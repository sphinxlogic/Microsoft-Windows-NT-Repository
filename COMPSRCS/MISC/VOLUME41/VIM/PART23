Newsgroups: comp.sources.misc
From: mool@oce.nl (Bram Moolenaar)
Subject: v41i073:  vim - Vi IMitation editor, v2.0, Part23/25
Message-ID: <1993Dec21.173042.2504@sparky.sterling.com>
X-Md4-Signature: 059a50556065a2c40f01d507ec67fb8b
Keywords: utility, editor, vi, vim
Sender: kent@sparky.sterling.com (Kent Landfield)
Organization: Sterling Software
Date: Tue, 21 Dec 1993 17:30:42 GMT
Approved: kent@sparky.sterling.com

Submitted-by: mool@oce.nl (Bram Moolenaar)
Posting-number: Volume 41, Issue 73
Archive-name: vim/part23
Environment: UNIX, AMIGA, MS-DOS
Supersedes: vim: Volume 37, Issue 1-24

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 23 (of 25)."
# Contents:  vim/doc/reference.do1
# Wrapped by mool@oce-rd2 on Wed Dec 15 09:50:09 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'vim/doc/reference.do1' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'vim/doc/reference.do1'\"
else
echo shar: Extracting \"'vim/doc/reference.do1'\" \(47200 characters\)
sed "s/^X//" >'vim/doc/reference.do1' <<'END_OF_FILE'
X
X
X
X			Vim reference manual
X
X			 By Bram Moolenaar
X
X			   version 2.0
X
X
X 1. Introduction
X 2. Notation
X 3. Starting Vim
X 4. Modes
X 5. Editing files
X 6. Cursor motions
X 7. Scrolling
X 8. Tags
X 9. Inserting text
X10. Deleting text
X11. Changing text
X12. Copying and moving text
X13. Visual mode
X14. Various commands
X15. Repeating commands
X16. Undo and redo
X17. Key mapping
X18. Recovery after a crash
X19. Options
X20. Terminal information
X21. Differences from Vi and Ex
X22. Credits
X
X
X	1. Introduction
X
XVim stands for Vi IMproved. It used to be Vi IMitation, but that does not
Xreally cover it anymore. Vim is a text editor which includes almost all the
Xcommands from the Unix program "Vi". It is very useful for editing programs
Xand other ASCII text. All commands are given with the keyboard. There is no
Xmouse support and there are no menus. This gives the advantage that you can
Xkeep your fingers on the keyboard and your eyes on the screen.
X
XThroughout this manual the differences between Vi and Vim are mentioned in 
Xcurly braces. Read the file "difference.doc" for a summary of the 
Xdifferences.
X
XThis manual refers to Vim on the Commodore Amiga computer. On other 
Xcomputers and on terminals there may be small differences. For MSDOS this 
Xis documented in msdos.doc. For UNIX this is in unix.doc.
X
XThis manual is a reference for all the Vim commands and options. A basic
Xknowledge of "Vi" is assumed. A summary of this manual can be found in the 
Xfile vim.hlp. It can be accessed from within Vim with the <HELP> key (in 
XMSDOS <F1>) and with the command ":help". The 'helpfile' option can be 
Xset to the name of the help file, so you can put it in any place you like.
X
X
X	2. Notation
X
X[]		Characters in square brackets are optional.
X
X[count]		An optional number that may precede the command to multiply
X		or iterate the command. If no number is given a count of one
X		is used, unless otherwise noted. Note that in this manual
X		the [count] is not mentioned in the description of the
X		command, but only in the explanation. This was done to make
X		the commands easier to lookup. If the "sc" option is on, the
X		(partially) entered count is shown at the bottom of the
X		window. You can use <DEL> to erase the last digit.
X
X["x]		An optional register designation where text can be stored.
X		The x is a single character between <a> and <z> or <A> and
X		<Z> or <">, and in some cases (with the put command) between
X		<0> and <9>, <%> or <.>. The uppercase and lower case letter
X		designate the same register, but the lower case letter is
X		used to overwrite the previous register contents, while the
X		uppercase letter is used to append to the previous register
X		contents. Without the ""x" or with """" the stored text is
X		put into the unnamed register. See also "Copying and moving
X		text".
X
X{}		Curly braces denote parts of the command which must appear, 
X		but can take a number of different values. The differences 
X		between Vim and Vi are also given in curly braces (this will 
X		be clear from the context).
X
X{motion}	A command that moves the cursor. They are listed in chapter 
X		6. This is used after an "operator" command to move over the 
X		text that is to be operated upon. If the motion includes a 
X		count and the operator also had a count, the two counts are 
X		multiplied. For example: "2d3w" deletes six words.
X
X{visual}	A piece of text that is started with the "v", "V" or CTRL-V
X		command and ended by the cursor position. This is used
X		before an "operator" to highlight the text that is to be
X		operated upon. See the chapter on Visual mode.
X
X<character>	A special character from the table below or a single ASCII
X		character.
X
X<char1-char2>	A single character from the range <char1> to <char2>. For
X		example: <a-z> is a lower case letter. Multiple ranges may be
X		concatenated. For example: <a-zA-Z0-9> is any alphanumeric
X		character.
X
XCTRL-<char>	<char> typed as a control character, that is, typing <char>
X		while holding the CTRL key down. The case of <char> does not
X		matter, thus CTRL-A and CTRL-a are equivalent.
X
X'option'	An option, or parameter, that can be set to a value is
X		enclosed in single quotes. See chapter 19.
X
X"command"	In examples the commands you can type are enclosed in double
X		quotes.
X
X
Xnotation	meaning		     equivalent decimal value
X-----------------------------------------------------------------------
X<NUL>		zero			CTRL_@  000 (internally 010)
X<BELL>  	bell			CTRL-G	007
X<BS>    	backspace		CTRL-H	008
X<TAB>   	tab			CTRL-I	009
X<LF>    	linefeed		CTRL-J	010
X<FF>    	formfeed		CTRL-L	012
X<CR>    	carriage return		CTRL-M	013
X<ESC>   	escape			CTRL-[	027
X<SPACE>    	space				032
X<DEL>   	delete				127
X<C_UP>		cursor-up			128 (msdos: 176)
X<C_DOWN>	cursor-down			129 (msdos: 177)
X<C_LEFT>	cursor-left			130 (msdos: 178)
X<C_RIGHT>	cursor-right			131 (msdos: 179)
X<SC_UP>		shift-cursor-up			132 (msdos: 180)
X<SC_DOWN>	shift-cursor-down		133 (msdos: 181)
X<SC_LEFT>	shift-cursor-left		134 (msdos: 182)
X<SC_RIGHT>	shift-cursor-right		135 (msdos: 183)
X<F1> - <F10>	function keys 1 to 10		136 - 145 (msdos: 184 - 193)
X<SF1> - <SF10>	shift-function keys 1 to 10	146 - 155 (msdos: 194 - 203)
XHELP>		help key			156 (msdos: 204)
X<UNDO>		undo key			157 (msdos: 205)
X-----------------------------------------------------------------------
XNote: The shifted cursor keys, the help key and the undo key are only
Xavailable on a few terminals. On some terminals the function keys 11 to 20
Xare used instead of the shifted function keys. On the Amiga shifted function
Xkey 10 produces a code (CSI) that is also used by key sequences. It will be
Xrecognized only after typing another key.
X
X
X	3. Starting Vim
X
X3.1 Command line
X
XMost often Vim is started to edit a single file with the command
X
X	vim file
X
XMore generally Vim is started with:
X
X	vim [options] [filelist]
X
XIf the filelist is missing, the editor will start with an empty buffer.
XOtherwise exactly one out of the following six may be used to choose one or
Xmore files to be edited.
X
Xfile ..		A list of file names. The first one will be the current file 
X		and read into the buffer. The cursor will be positioned on 
X		the first line of the buffer.
X
X+[num] file ..	Same as the above, but the cursor will be positioned on line
X		"num". If "num" is missing, the cursor will be positioned on
X		the last line.
X
X+/{pat} file ..	Same as the above, but the cursor will be positioned on the
X		first line containing "pat" in the current file (see the 
X		section "pattern searches" for the available search 
X		patterns).
X
X+{command} file ..
X-c {command} file ..
X		Same as the above, but "command" will be executed after the 
X		file has been read. "command" is interpreted as an Ex 
X		command. If the "command" contains spaces it must be 
X		enclosed in double quotes (this depends on the shell that is 
X		used). Example: vim "+set si" main.c
X
X-t {tag}	A tag. "tag" is looked up in the tags file, the associated 
X		file becomes the current file and the associated command is 
X		executed. Mostly this is used for C programs. In that case 
X		"tag" should be a function name. The effect is that the file 
X		containing that function becomes the current file and the 
X		cursor is positioned on the start of the function (see the 
X		section "tag searches").
X
X-e [errorfile]	QuickFix mode. The file with the name [errorfile] is read
X		and the first error is displayed. If [errorfile] is not
X		given, the 'errorfile' option is used for the file name
X		(default "AztecC.Err" for the Amiga, "errors" for other
X		systems). See section 5.5: "using the QuickFix mode".
X
XThe options, if present, must precede the filelist. The options may be given 
Xin any order.
X
X-r		Recovery mode. The autoscript file is read to recover a 
X		crashed editing session. It has almost the same effect as 
X		"-s file.vim". See the chapter "Recovery after a crash".
X
X-v		View mode. The 'readonly' option will be set and no 
X		autoscript file will be written (see -n below). You can 
X		still edit the buffer, but will be prevented from 
X		accidentally overwriting a file. If you forgot that you are 
X		in View mode and did make some changes, you can overwrite 
X		a file by adding an exclamation mark to the Ex command, as in 
X		":w!". The 'readonly' option can be reset with ":set noro" 
X		(see the options chapter). Calling the executable "view" 
X		has the same effect as the -v option. If your system does 
X		not support links and you do not want to have the executable 
X		twice you could make an alias: "alias view vim -v".
X
X-b		Binary mode. The 'textauto', 'textmode' and 'expandtab'
X		options will be reset. The 'textwidth' option is set to 0.
X		'modelines' is set to 0. The 'binary' option is set. This is
X		done after reading the .vimrc/.exrc files but before reading
X		a file. See also 5.6: "Editing binary files".
X
X-n		No autoscript file will be written. Recovery after a crash 
X		will be impossible. Handy if you want to edit a file on a 
X		very slow medium (e.g. floppy). Can also be done with ":set 
X		uc=0". You can switch it on again by setting the 'uc' option 
X		to some value, e.g. ":set uc=100" (only do this if the 
X		buffer was not changed yet).
X
X-x		Do not restart Vim to open a new window. This option should 
X		be used when Vim is started by a program that will wait for 
X		the edit session to finish (e.g. mail or readnews). See 
X		section 3.3.
X
X-T {terminal}	Set the terminal type to "terminal". This influences the 
X		codes that Vim will send to your terminal. This is normally 
X		not needed, because Vim will be able to find out what type 
X		of terminal you are using (See chapter 20).
X
X-d {device}	The "device" is opened to be used for editing. Normally you 
X		would use this to set the window position and size:
X		"-d con:x/y/width/height", e.g. "-d con:30/10/600/150". But 
X		you can also use it to start editing on another device, e.g. 
X		AUX:. This only works on the Amiga.
X
X-s {scriptin}	The script file "scriptin" is read. The characters in the 
X		file are interpreted as if you had typed them. The same can 
X		be done with the command ":source! {scriptin}". If the end 
X		of the file is reached before the editor exits, further 
X		characters are read from the keyboard. See also the section 
X		"complex repeats".
X
X-w {scriptout}	All the characters that you type are recorded in the file
X		"scriptout", until you exit Vim. This is useful if you want 
X		to create a script file to be used with "vim -s" or 
X		":source!". See also the section "complex repeats".
X
XExample for using a script file to change a name in several files:
X	Create a file "subs.vi" containing substitute commands and a :wq
X	command:
X
X		:%s/Jones/Smith/g
X		:%s/Allen/Peter/g
X		:wq
X
X	Execute Vim on all files you want to change:
X
X		foreach i ( *.let ) vim -s subs.vi $i
X
XIf the executable is called "view" Vim will start in Readonly mode. This is 
Xuseful if you can make a hard or symbolic link from "view" to "vim".
XStarting in Readonly mode can also be done with "vim -v". 
X
X
X3.2 Workbench (Amiga only)
X
XVim can be started from the workbench by clicking on its icon twice. It will
Xthen start with an empty buffer.
X
XVim can be started to edit one or more files by using a "Project" icon. The
X"Default Tool" of the icon must be the full pathname of the Vim executable. 
XThe name of the ".info" file must be the same as the name of the text file. 
XBy clicking on this icon twice, Vim will be started with the filename as 
Xcurrent filename, which will be read into the buffer (if it exists). You can 
Xedit multiple files by pressing the shift key while clicking on icons, and 
Xclicking twice on the last one. The "Default Tool" for all these icons must 
Xbe the same.
X
XIt is not possible to give arguments to Vim, other than filenames, from the
Xworkbench.
X
X
X3.3 Vim window (Amiga only)
X
XVim will run in the CLI window where it was started. If Vim was started with 
Xthe "run" or "runback" command, or if Vim was started from the workbench, it 
Xwill open a window of its own.
X
XTechnical detail:
X	To open the new window a little trick is used. As soon as Vim 
X	recognizes that it does not run in a normal CLI window, it will 
X	create a script file in t:. This script file contains the same 
X	command as how Vim was started, and an "endcli" command. This script 
X	file is then executed with a "newcli" command (the "c:run" and 
X	"c:newcli" commands are required for this to work). The script file 
X	will hang around until reboot, or until you delete it. This method 
X	is required to get the ":sh" and ":!" commands to work correctly. 
X	But when Vim was started with the -e option (Quickfix mode) or with 
X	the -x option, this method is not used. The reason for this is that 
X	when a compiler starts Vim with the -e option it will wait for a 
X	return code. With the script trick the compiler cannot get the 
X	return code. The -x option can be used when Vim is started by a mail 
X	program which also waits for the edit session to finish. As a 
X	consequence the ":sh" and ":!" commands are not available when the 
X	-e or -x option is used.
X
XVim will automatically recognize the window size and react to window 
Xresizing. Under Amiga DOS 1.3 it is advised to use the fastfonts program 
X"FF" to speed up display redrawing.
X
X
X3.4 Initialization
X
XWhen Vim starts running it does initializations in the following order. If
Xan environment variable is used, it is executed as a single Ex command line.
XMultiple commands must be separated with <|>. If a file is used, each line
Xis executed as an Ex command line.
X
X1.  Four places are searched for initializations. The first that exists is 
X    used, the others are ignored.
X     1. The environment variable VIMINIT
X     2. The file "s:.vimrc" (for Unix: "$HOME/.vimrc")
X     3. The environment variable EXINIT
X     4. The file "s:.exrc" (for Unix: "$HOME/.exrc")
X
X2.  If the 'exrc' option is set (default is 'noexrc'), the current directory
X    is searched for two files. The first that exists is used, the other is
X    ignored.
X     1. The file ".vimrc"
X     2. The file ".exrc"
X
X3.  The environment variable SHELL, if it exists, is used to set the 
X    'shell' option. With MSDOS the COMPSPEC variable is used if SHELL does
X    not exist.
X
X4.  The environment variable TERM, if it exists, is used to set the 'term'
X    option.
X
XThe first can be used to set your default settings and mappings for all edit 
Xsessions. The second one for sessions in a certain directory (note that the
X'exrc' option is default off). See the section "Saving settings" for how to
Xcreate a file with commands to recreate the current settings.
X
XIf the VIMINIT environment variable or ".vimrc" exist the EXINIT and ".exrc" 
Xare skipped. This can be used to initialize Vim without interfering with 
Xanother version of Vi.
X
XOn the Amiga two types of environment variables exist. The ones set with the
XDOS 1.3 (or later) setenv command are recognized. See the AmigaDos 1.3 
Xmanual. The environment variables set with the old Manx Set command (before 
Xversion 5.0) are not recognized.
X
XOn MS-DOS systems Vim assumes that all the "_vimrc" and "_exrc" files have
X<CR><LF> pairs as line separators. This will give problems if you have a
Xfile with only <LF>s and have a line like ":map xx yy^M". The trailing ^M
Xwill be ignored.
X
XWhile reading the ".vimrc" or the ".exrc" file in the current directory some
Xcommands can be disabled for security reasons by setting the 'secure'
Xoption. Otherwise it would be possible to create a .exrc that contains nasty
Xcommands, which another user may automatically execute when he starts Vim it
Xthat directory. The disabled commands are the ones that start a shell and
Xthe ones that write to a file. The ":map" commands are echoed, so you can
Xsee which keys are being mapped.
X
XYou can reset the 'secure' option in the EXINIT or VIMINIT environment
Xvariable or in the global ".exrc" or ".vimrc" file. This is not possible in
X".vimrc" or ".exrc" in the current directory, for obvious reasons.
X
XOn unix systems this only happens if you are not the owner of the ".vimrc" 
Xor ".exrc" file. Warning: If you unpack an archive that contains a .exrc 
Xfile, it will be owned by you. You won't have the security protection. Check 
Xthe .exrc file before you start Vim in that directory, or reset the 'exrc' 
Xoption. 
X
X
X3.5 Suspending
X
XCTRL-Z				Suspend the editor. Same as ":stop".
X
X:sus[pend][!]		or
X:st[op][!]			Suspend the editor. If the <!> is not given,
X				the buffer was changed, autowrite is set and 
X				a filename is known, the buffer will be 
X				written.
X
XOn many UNIX systems it is possible to suspend Vim with CTRL-Z. This is only 
Xpossible in Command mode (see next chapter). Vim will continue if you make it 
Xthe foreground job again. On other systems CTRL-Z will start a new shell. 
XThis is the same as the ":sh" command. Vim will continue if you exit from the 
Xshell.
X
X
X	4. Modes
X
X4.1 Introduction
X
XVim has four basic modes:
X
XCommand mode		In Command mode you can enter all the editor
X			commands. If you start the editor you are in this 
X			mode (unless you have set the 'insertmode' option, 
X			see below).
X
XInsert mode		In Insert mode the text you type is inserted into the
X			buffer. If the 'showmode' option is set (which is
X			default), the string "-- INSERT --" is shown at the
X			bottom of the window.
X
XReplace mode		Replace mode is a special case of Insert mode. You
X			can do the same things as in Insert mode, but for 
X			each character you enter (except some special 
X			characters) one character of the existing text is 
X			deleted. If the 'showmode' option is set (which is 
X			default), the string "-- REPLACE --" is shown at the 
X			bottom of the window.
X
XCommand_line mode	In Command_line mode you can enter one line of text
X			at the bottom of the window. This is for the Ex
X			commands <:>, the pattern search commands <?></> and
X			the filter command <!>.
X
XMore explanation on the insert, replace and Command_line mode is further on 
Xin this chapter.
X
X
X4.2 Switching from mode to mode
X
XIf for any reason you do not know in which mode you are, you can always get
Xback to Command mode by typing <ESC> twice. You will know you are back in
XCommand mode when you see the screen flash or hear the bell after you type
X<ESC>.
X
X- go from Command mode to Insert mode by giving one of the commands
X  "iIaAoOcCsS".
X- go from Command mode to Replace mode with the "R" command (not the "r"
X  command!).
X- go from Command mode to Command_line mode with the one of the commands
X  ":/?!".
X
X- go from insert or Replace mode to Command mode with <ESC> (twice in some
X  rare cases).
X- go from Command_line mode to Command mode by:
X   - hitting <CR> or <LF>, which causes the entered command to be executed
X   - deleting the complete line (e.g. with CTRL-U) and giving a final <BS>
X   - hitting CTRL-C or <ESC>, which quits the command line without executing
X     the command.
X  In the last case <ESC> may be the character defined with the 'wildchar'
X  option, and start filename completion. You can ignore that and type <ESC>
X  again. {vi: when hitting <ESC> the command line is executed. This is
X  unexpected for most people, therefore it was changed in Vim. But when the
X  <ESC> is part of a mapping the command line is executed. If you want the
X  vi behaviour also when typing <ESC> use ":cmap ^V<ESC> ^V^M"}
X
XIf the 'insertmode' option is set, editing a file will start in Insert mode.
X
X
X4.3 Insert and Replace mode
X
XIn insert and Replace mode the following characters have a special meaning,
Xother characters are inserted directly. To insert one of these special
Xcharacters into the buffer, precede it with CTRL-V. To insert a <NUL> 
Xcharacter use "CTRL-V CTRL-@" or "CTRL-V 000". On some systems you have to
Xuse "CTRL-V 003" to insert a CTRL-C.
X
Xchar		action
X-----------------------------------------------------------------------
XCTRL-@		Insert previously inserted text and stop insert. {Vi: only
X		when typed as first char, only up to 128 chars}
XCTRL-A		Insert previously inserted text. {not in Vi}
XCTRL-C		Quit insert mode, back to command mode.
XCTRL-D		Delete one shiftwidth of indent at the start of the current 
X		line. See also 'shiftround' option. When preceded with <^>
X		or <0> delete all indent in the current line. With <^> the
X		indent is restored in the next line. This is useful when
X		inserting a label. {Vi: CTRL-D works only when used after
X		autoindent}
XCTRL-E		Insert the character which is below the cursor. {not in Vi}
XCTRL-H <BS>	Delete the character before the cursor (see below). {Vi: 
X		does not delete autoindents}
XCTRL-I <TAB>    Insert a tab. If the 'expandtab' option is on, the
X		equivalent number of spaces is inserted (use CTRL-V <TAB> to
X		avoid the expansion).
XCTRL-J <LF>	Begin new line.
XCTRL-K {char1} {char2}
X		Enter digraph (see 4.7). {not in Vi}
XCTRL-M <CR>	Begin new line.
XCTRL-O		Execute one Command mode command. See below. {not in Vi}
XCTRL-P		Toggle the 'revins' option. {not in Vi}
XCTRL-R <0-9a-z"%>
X		Insert the contents of a numbered or named register. The
X		text is inserted as if you typed it, but mappings and
X		abbreviations are not used. If you have options like
X		'textwidht' or 'autoindent' set, this will influence what
X		will be inserted. Use <"> for the unnamed register,
X		containing the text of the last delete or yank. Use <%> for
X		the current file name.  See the chapter on copying and
X		moving text about registers. {not in Vi}
XCTRL-T		Insert one shiftwidth of indent at the start of the current 
X		line. See also 'shiftround' option. {Vi: only when in 
X		autoindent}
XCTRL-U		Delete all entered characters in the current line (see 
X		below).
XCTRL-V		Insert next non-digit literally. Up to three digits form the 
X		decimal value of a single byte. The non-digit and the three
X		digits are not considered for mapping. {Vi: no decimal byte
X		entry}
XCTRL-W		Delete the word before the cursor (see below). See the 
X		section "word motions" for the definition of a word.
XCTRL-Y		Insert the character which is above the cursor. {not in Vi}
XCTRL-[ or <ESC>	End insert or Replace mode, back to Command mode.
X<DEL>		Same as CTRL-H <BS>
X-----------------------------------------------------------------------
X
XThe effect of the <BS>, <DEL>, CTRL-W and CTRL-U depends on the 'backspace' 
Xoption (unless 'revins' is set):
X
Xbackspace	action
X option
X   0	   delete stops in column 1 and start position of insert
X   1	   delete stops at start position of insert
X   2	   delete always, CTRL-W and CTRL-U stop once at start position of 
X   	   insert
X
XIf the 'backspace' option is non-zero and the cursor is in column 1 when one 
Xof the three keys is used, the current line is joined with the previous 
Xline. This effectively deletes the newline in front of the cursor. {Vi: does 
Xnot cross lines, does not delete past start position of insert}
X
XWith CTRL-V followed by one, two or three digits you can enter the decimal 
Xvalue of a byte, except 10. Normally CTRL-V is followed by three digits. The 
Xformed byte is inserted as soon as you type the third digit. If you type 
Xonly one or two digits and then a non-digit, the decimal value of those one 
Xor two digits form the byte. After that the non-digit is dealt with in the 
Xnormal way. If you enter a value of 10, it will end up in the file as a 0.
XThe 10 is a <LF>, which is used internally to represent the <NUL> character.
XWhen writing the buffer to a file the <LF> character is translated into
X<NUL>. The <LF> character is written at the end of each line. Thus if you
Xwant to insert a <LF> character in a file you will have to make a line
Xbreak.
X
X
Xspecial keys
X
XThe following keys are special. They stop the current insert, do something 
Xand then restart insertion. This means you can do something without getting 
Xout of Insert mode. This is very handy if you prefer to use the Insert mode 
Xall the time, just like editors that don't have a separate Command mode. You 
Xmay also want to set the 'backspace' option to 2 and set the 'insertmode' 
Xoption. You can use CTRL-O if you want to map a function key to a command.
X
XThe changes (inserted or deleted characters) before and after these keys can 
Xbe undone separately. Only the last change can be redone and always behaves 
Xlike an "i" command.
X
Xchar		action
X-----------------------------------------------------------------------
X<C_UP>		cursor one line up
X<C_DOWN>	cursor one line down
X<C_LEFT>	cursor one character left
X<C_RIGHT>	cursor one character right
X<SC_UP>		move window one page up
X<SC_DOWN>	move window one page down
X<SC_LEFT>	cursor one word back (like "b" command)
X<SC_RIGHT>	cursor one word forward (like "w" command)
XCTRL-O		execute one command and return to Insert mode
X-----------------------------------------------------------------------
X
XThe CTRL-O command has one side effect: If the cursor was beyond the end of 
Xthe line it will be put on the last character in the line.
XThe shifted cursor keys are not available on all terminals.
X
X
X'textwidth' option
X
XThe 'textwidth' option can be used to automatically break a line before it 
Xgets too long. Set the 'textwidth' option to the desired maximum line 
Xlength. If you then type more characters (not spaces or tabs), the 
Xlast word will be put on a new line (unless it is the only word on the 
Xline). If you set 'textwidth' to 0, this feature is disabled. Vi has the
X'wrapmargin' option, but it does not do what you want. For compatibility, if
Xyou set the 'wrapmargin' option, 'textwidth' will be set to (columns -
X'wrapmargin'), where columns is the width of the display.
X
XIf you want to format a block of text you can use the "Q" operator. Type "Q" 
Xand a movement command to move the cursor to the end of the block. In many 
Xcases the command "Q}" will do what you want (format until the end of 
Xparagraph). Or you can use visual mode: hit "v", move to the end of the
Xblock and hit "Q".
X
X
X'expandtab' option
X
XIf the 'expandtab' option is set, spaces will be used to fill the amount of
Xwhitespace of the tab. If you want to enter a real <TAB> type CTRL-V first.
XThe 'expandtab' option is default off. Note that in Replace mode a single
Xcharacter is replaced by several spaces. The result of this is that the
Xnumber of characters in the line increases. Backspacing will delete one
Xspace at a time. The original text will be put back in a place where you
Xwould not expect it.
X
X
Xtyping backwards
X
XIf the 'revins' (reverse insert) option is set, inserting happens backwards.
XThis can be used to type Hebrew. When inserting characters the cursor is not
Xmoved and the text moves rightwards. A <BS> deletes the character under the
Xcursor. CTRL-W and CTRL-U also work in the opposite direction. <BS>, CTRL-W
Xand CTRL-U do not stop at the start of insert or end of line, no matter how
Xthe 'backspace' option is set.
X
XIn Replace mode the cursor is moved leftwards. <BS> will restore the
Xcharacter right of the cursor.
X
XIn insert or Replace mode the 'revins' option can be toggled with CTRL-P.
X
XIf the 'showmode' option is set, "-- REVERSE INSERT --" or
X"-- REVERSE REPLACE --" will be shown in the status line.
X
X
XReplace mode
X
XIn Replace mode one character in the line is deleted for every character you 
Xtype. If there is no character to delete (at the end of the line), the 
Xtyped character is appended (as in Insert mode). Thus the number of 
Xcharacters in a line stays the same until you get to the end of the line.
X
XBe careful with <TAB> characters. If you type a normal printing character in 
Xits place, the number of characters is still the same, but the number of 
Xcolumns will become smaller.
X
XIf you delete characters in Replace mode (with <BS>, <DEL>, CTRL-W or
XCTRL-U), you really delete your changes. The characters that were replaced
Xare restored. If you had typed past the existing text, the characters you
Xadded are deleted.
X    All this only works in the current line. If you have started a new line
X(replaced a character with a <CR>) Vim no longer remembers what happened in
Xthe previous line. If you backspace over the newline (only possible if the
X'backspace' option is non-zero), the two lines will be joined again, but
Xtyping further backspaces will not restore the original text. Only the
Xcursor is moved.
X    If the 'expandtab' option is set, a <TAB> will replace one character
Xwith several spaces. When backspacing over these spaces, the original text
Xwill appear in a position where you would not expect it.
X
X
X4.4 Command_line mode
X
XCommand_line mode is used to enter Ex commands <:>, search patterns </><?>
Xand filter commands <!>.
X
X
X4.4.1 Command line editing
X
XNormal characters are inserted in front of the cursor position. You can move
Xaround in the command line with the left and right cursor keys. {Vi: can 
Xonly alter the last character in the line}
X
XThe command lines that you enter are remembered in a history table. You can
Xrecall them with the up and down cursor keys. Use the 'history' option to 
Xset the number of lines that are remembered (default 20).
X
XCTRL-V		Insert next non-digit literally. Up to three digits form the 
X		decimal value of a single byte. The non-digit and the three
X		digits are not considered for mapping. This works the same
X		way as in Insert mode (see above).
X<C_LEFT>	cursor left
X<C_RIGHT>	cursor right
X<SC_LEFT>	cursor one word left
X<SC_RIGHT>	cursor one word right
XCTRL-B		cursor to begin of command line
XCTRL-E		cursor to end of command line
X
X<BS>		delete the character in front of the cursor
X<DEL>		delete the character under the cursor (at end of line:
X		character in front of the cursor)
XCTRL-W		delete the word in front of the cursor
XCTRL-U		remove all characters
X
X		Note: if the command line becomes empty with one of the
X		delete commands, command line mode is quit.
X
X{char1} <BS> {char2}	or
XCTRL-K {char1} {char2}
X		enter digraph (see 4.7). {not in Vi}
X
X<CR> or <LF>	start entered command
X<ESC>		when typed: quit command line without executing
X		in macros: start entered command
XCTRL-C		quit command line without executing
X
X<C_UP>		recall older command line from history
X<C_DOWN>	recall more recent command line from history
X
X<SC_UP>		recall older command line from history, which begin matches 
X		the current command line.
X<SC_DOWN>	recall more recent command line from history, which begin 
X		matches the current command line.
X
XCTRL-D		list filenames that match the pattern in front of the cursor
X'wildchar' option
X		do filename completion on the pattern in front of the cursor
X		(Note: does not work inside a macro)
XCTRL-K {char1} {char2}
X		enter digraph (see 4.7). {not in Vi}
XCTRL-N		after 'wildchar' with multiple matches: go to next match;
X		otherwise: recall more recent command line from history
XCTRL-P		after 'wildchar' with multiple matches: go to previous match;
X		otherwise: recall older command line from history
XCTRL-A		do filename completion on the pattern in front of the cursor
X		and insert all matches
XCTRL-L		do filename completion on the pattern in front of the cursor
X		and insert the longest common part
X
XThe 'wildchar' option defaults to <TAB> (CTRL-E when compiled with 
XCOMPATIBLE; in a previous version <ESC> was used). In the pattern for 
XCTRL-D and 'wildchar' standard Amiga wildcards are accepted, plus the <*> 
Xand <?> characters.
X
XFor filename completion you can use the 'suffixes' option to set a priority 
Xbetween files with almost the same name. If there are multiple matches, 
Xthose files with an extension that is in the 'suffixes' option are ignored.
XThe default is ".bak.o.h.info.vim", which means that files with the
Xextensions ".bak", ".o", ".h", ".info" and ".vim" are sometimes ignored. It
Xis impossible to ignore suffixes with two dots. Examples:
X
Xpattern:	files:				match:
Xtest*		test.c test.h test.o		test.c
Xtest*		test.h test.o			test.h and test.o
Xtest*		test.i test.h test.c		test.i and test.c
X
XIf there is more than one matching file (after ignoring the ones matching
Xthe 'suffixes' option) the message "Too many file names" is given. The first
Xfile name is inserted. You can get to the others by entering 'wildchar',
XCTRL-N or CTRL-P. All files are included then, also the ones with extensions
Xmatching the 'suffixes' option.
X
XThe <SC_UP> and <SC_DOWN> keys take the current command line as search 
Xstring. The beginning of the next/previous command lines are compared against 
Xthis string. The fist line that matches is the new command line. When typing 
Xthese two keys repeatedly, the same string is used again. For example this 
Xcan be used to find the previous substitute command: Type ":s" and then 
X<SC_UP>. The same could be done by typing <C_UP> a number of times until the 
Xdesired command line is shown. (Note: the shifted arrow keys do not work on
Xall terminals) 
X
X
X4.4.2 Ex command lines
X
XThe Ex commands have a few specialities:
X
X<"> or <#> at the start of a line causes the whole line to be ignored. <"> 
Xafter a command causes the rest of the line to be ignored. This can be used 
Xto add comments.
X
X<|> can be used to separate commands, so you can give multiple commands in 
Xone line. The commands ":global", "vglobal" and  ":!" see the <|> as their
Xargument, and can therefore not be followed by another command. If you want
X<|> to be included in a command, precede it with <\>. Note that this is
Xconfusing (inherited from vi). If you give a command with ":!" you don't
Xhave to use a backslash, with ":r !" you have to. And with ":g" the <|> is
Xincluded in the command, with ":s" it is not. Examples:
X	:!ls | wc		view the output of two commands
X	:r !ls \| wc		insert the same output in the text
X	:%g/foo/p|>		moves all matching lines one shiftwidth
X	:%s/foo/bar/|>		moves one line one shiftwidth
X
XWhen the character <%> or <#> is used where a filename is expected, they are 
Xexpanded to the current and alternate filename (see the chapter "editing 
Xfiles").
X
XEmbedded spaces in filenames are allowed if one filename is expected as
Xargument. Trailing spaces will be ignored, unless escaped with a backslash
Xor CTRL-V. Note that the ":next" command uses spaces to separate file names.
XEscape the spaces to include them in a file name. Example:
X	:next foo\ bar goes\ to school\ 
Xstarts editing the three files "foo bar", "goes to" and "school ".
X
XWhen you want to use the special characters <"> or  <|> in a command, or want
Xto use <%> or <#> in a filename, precede them with a backslash. The backslash
Xis not required in a range and in the ":substitute" command.
X
X
X4.4.3 Ex command line ranges
X
XSome Ex commands accept a line range in front of them. This is noted as
X[range]. It consists of one or more line specifiers, separated with <,> or 
X<;>. When separated with <;> the cursor position will be set to that line 
Xbefore interpreting the next line specifier. The default line specifier for 
Xmost commands is the cursor position, but the commands ":write" and 
X":global" have the whole file (1,$) as default. If more line specifiers are 
Xgiven than required for the command, the first one(s) will be ignored.
X
XLine numbers may be specified with:
X	{number}	an absolute line number
X	.		the current line
X	$		the last line in the file
X	%		equal to 1,$ (the entire file)
X	't		position of mark t (lower case)
X	/{pattern}[/]	the next line where {pattern} matches
X	?{pattern}[?]	the previous line where {pattern} matches
X
XEach may be followed (several times) by <+> or <-> and an optional number. 
XThis number is added or subtracted from the preceding line number. If the 
Xnumber is omitted, 1 is used.
X
XThe "/" and "?" may be preceded with another address. The search starts from
Xthere. The "/" and "?" after {pattern} are required to separate the pattern
Xfrom anything that follows.
X
XThe {number} must be between 0 and the number of lines in the file. A 0 is 
Xinterpreted as a 1, except with the commands tag, pop and read.
X
XExamples:
X	.+3		three lines below the cursor
X	/that/+1	the line below the next line containing "that"
X	.,$		from current line until end of file
X	0/that		the first line containing "that"
X
XSome commands allow for a count after the command. This count is used as the
Xnumber of lines to be used, starting with the line given in the last line
Xspecifier (the default is the cursor line).
X
XExamples:
X	:s/x/X/g 5	substitute <x> by <X> in the current line and four
X			following lines
X	:23d 4		delete lines 23, 24, 25 and 26
X
X
X4.5 The window contents
X
XIn command and Insert/Replace mode the screen window will show the current
Xcontents of the buffer: What You See Is What You Get. {Vi: when changing 
Xtext a <$> is placed on the last changed character; The window is not always 
Xupdated on slow terminals} Lines longer than the window width will wrap,
Xunless the 'wrap' option is off (see below). The bottom lines in the window
Xmay start with one of these two characters:
X
X<@> 	The next line is too long to fit in the window.
X<~>	Below the last line in the buffer.
X
XIf the bottom line is completely filled with <@>, the line that is at the 
Xtop of the window is too long to fit in the window. If the cursor is on this 
Xline you can't see what you are doing, because this part of the line is not 
Xshown. However, the part of the line before the <@>s can be edited normally. 
X{Vi: gives an "internal error" on lines that do not fit in the window}
X
XIf the 'wrap' option is off, long lines will not wrap. Only the part that
Xfits on the screen is shown. If the cursor is moved to a part of the line
Xthat is not shown, the screen is scrolled horizontally. The advantage of
Xthis method is that columns are shown as they are and lines that cannot fit
Xon the screen can be edited. The disadvantage is that you cannot see all the
Xcharacters of a line at once. The 'sidescroll' option can be set to the
Xminimal number of columns to scroll. {Vi: has no 'wrap' option}
X
XAll normal ASCII characters are displayed directly on the screen. The <TAB> 
Xis replaced by the number of spaces that it represents. Other non-printing 
Xcharacters are replaced by "^<char>", where <char> is the non-printing 
Xcharacter with 64 added. Thus character 7 (bell) will be shown as "^G". 
XCharacters between 127 and 160 are replaced by "~<char>", where <char> is 
Xthe character with 64 subtracted. These characters occupy more than one 
Xposition on the screen. The cursor can only be positioned on the first one.
X
XIf you set the 'number' option, all lines will be preceded with their 
Xnumber.
X
XIf you set the 'list' option, <TAB> characters will not be shown as several
Xspaces, but as "^I". A <$> will be placed at the end of the line, so you can
Xfind trailing blanks.
X
XIn Command_line mode only the command line itself is shown correctly. The
Xdisplay of the buffer contents is updated as soon as you go back to Command
Xmode.
X
XSome commands hand over the window to external commands (e.g. ":shell" and
X"="). After these commands are finished the window may be clobbered with 
Xoutput from the external command, so it needs to be redrawn. This is also 
Xthe case if something is displayed on the status line that is longer than 
Xthe width of the window. If you are expected to have a look at the screen 
Xbefore it is redrawn, you get this message:
X
X		Press RETURN or enter command to continue
X
XAfter you type a key the screen will be redrawn and Vim continues. If you 
Xtype <CR>, <SP> or <LF> nothing else happens. If you type any other key, it 
Xwill be interpreted as (the start of) a new command. {Vi: only <:> commands 
Xare interpreted}
X
XThe last line of the window is used for status and other messages. The 
Xstatus messages will only be used if an option is on:
X
Xstatus message			option		default	unix default
Xcurrent mode 			'showmode'	on	    on
Xcommand characters		'showcmd'	on	    off
Xcursor position			'ruler'		off	    off
X
XThe current mode is "-- INSERT --" or "-- REPLACE --". The command 
Xcharacters are those that you typed but were not used yet. {Vi: does not
Xshow the characters you typed or the cursor position}
X
XIf you have a slow terminal you can switch off the status messages to speed 
Xup editing:
X	:set nosc noru nosm
X
XIf there is an error, an error message will be shown for at least one second 
X(in reverse video). {Vi: error messages may be overwritten with other 
Xmessages before you have a chance to read them}
X
XSome commands show how many lines were affected. Above which threshold this
Xhappens can be controlled with the 'report' option (default 2).
X
XOn the Amiga Vim will run in a CLI window. The name Vim and the full name of
Xthe current filename will be shown in the title bar. When the window is
Xresized, Vim will automatically redraw the window. You may make the window as
Xsmall as you like, but if it gets too small not a single line will fit in it.
XMake it at least 40 characters wide to be able to read most messages on the
Xlast line.
X
XOn most Unix systems window resize works ok.  {Vi: not ok}
X
X
X4.6 Abbreviations
X
XAbbreviations are used in insert mode, Replace mode and Command_line mode.
XIf you enter a word that is an abbreviation, it is replaced by the word it
Xstands for. Only whole words are recognized. A word is made up of letters,
Xdigits and <_>. You have to type a character other than a letter, digit, or
X<_> in front of the word and after the word before the abbreviation is
Xrecognized. The word may also begin at the start of a line and at the
Xposition where the insertion started. You may also type a <CR> or <LF> after
Xthe word.
X
XExample: ":ab foo four old otters". Note that spaces in the <rhs> are
Xallowed and included in the replacement string. If you now insert the word
X"foo" with a space before and after it, it will be replaced by "four old
Xotters". If you would type "foobar" or "barfoo" nothing happens.
X
XTo avoid the abbreviation in insert mode type part of the abbreviation, exit
Xinsert mode with <ESC>, re-enter insert mode with "a" and type the rest. In
XCommand_line mode you can type CTRL-V twice somewhere in the abbreviation to
Xavoid it to be replaced. A CTRL-V in front of a normal character is mostly
Xignored otherwise.
X
XThere are no default abbreviations.
X
XAbbreviations are disabled if the 'paste' option is set.
X
X:ab[breviate]		list all abbreviations. The character in the first
X			column indicates the mode where the abbreviation is
X			used: 'i' for insert mode, 'c' for Command_line
X			mode, '!' for both.
X
X:ab[breviate] <lhs>	list the abbreviations that start with <lhs>
X
X:ab[breviate] <lhs> <rhs>
X			add abbreviation for <lhs> to <rhs>. If <lhs> already
X			existed it is replaced with the new <rhs>. <rhs> may
X			contain spaces.
X
X:una[bbreviate] <lhs>	remove abbreviation for <lhs> from the list
X
X:norea[bbrev] [lhs] [rhs]
X			same as ":ab", but no remapping for this <rhs> {not
X			in Vi}
X
X:ca[bbrev] [lhs] [rhs]	same as ":ab", but for Command_line mode only. {not
X			in Vi}
X
X:cuna[bbrev] <lhs>	same as ":una", but for Command_line mode only. {not
X			in Vi}
X
X:cnorea[bbrev] [lhs] [rhs]
X			same as ":ab", but for Command_line mode only and no
X			remapping for this <rhs> {not in Vi}
X
X:ia[bbrev] [lhs] [rhs]	same as ":ab", but for insert mode only. {not in Vi}
X
X:iuna[bbrev] <lhs>	same as ":una", but for insert mode only. {not in
X			Vi}
X
X:inorea[bbrev] [lhs] [rhs]
X			same as ":ab", but for insert mode only and no
X			remapping for this <rhs> {not in Vi}
X
X
X4.7 Digraphs
X
X:dig[raphs]		show currently defined digraphs. {not in Vi}
X
X:dig[raphs] {char1}{char2} {number} ...
X			Add digraph {char1}{char2} to the list. {number} is 
X			the decimal representation of the character.
X
XDigraphs are used to enter characters that normally cannot be entered by 
Xan ordinary keyboard. These are mostly accented characters which have the 
Xeighth bit set. The digraphs are easier to remember than the decimal number
Xthat can be entered with CTRL-V (see above).
X
XVim must have been compiled with the 'digraphs' option enabled. If not, the 
X":digraph" command will display an error message.
X
XThere are two methods to enter digraphs:
X	CTRL-K {char1} {char2}		or
X	{char1} <BS> {char2}
XThe first is always available. The second only when the 'digraph' option is 
Xset.
X
XOnce you have entered the digraph the character is treated like a normal 
Xcharacter, taking up only one character in the file and on the screen. 
XExample:
X	<|> <BS> <|>	will enter the double <|> character (166)
X	<a> <BS> <^>	will enter an <a> with a hat (226)
X	CTRL-K <-> <->	will enter a minus sign (173)
X
XThe default digraphs are listed in the file digraph.doc. They are meant for 
Xthe Amiga character set, which is some international standard. With another 
Xcharacter set they may be illogical.
X
XIf you accidently typed an <a> that should be an <e>, you will type <a> <BS> 
X<e>. But that is a digraph, so you will not get what you want. To avoid this, 
Xuse <DEL> instead of <BS>.
X
X
X	5. Editing files
X
X5.1 Introduction
X
XEditing a file with Vim means:
X
X1. reading the file into the internal buffer
X2. changing the buffer with editor commands
X3. writing the buffer into a file
X
XAs long as you don't write the buffer, the original file remains unchanged. 
XIf you start editing a file (read a file into the buffer), the file name is 
Xremembered as the "current filename".
X
XIf there already was a current filename, then that one becomes the alternate 
Xfile name. Up to 20 older alternate filenames are remembered in a list. When 
Xyou enter a filename, for editing (e.g. with ":e filename") or writing (e.g. 
Xwith (:w filename"), the filenames shift one down in this list. You can use 
Xthis list to remember which files you edited and to quickly switch from one 
Xfile to another with the CTRL-^ command (e.g. to copy text). {Vi: only one 
Xalternate filename}
X
XIn Ex commands (the ones that start with a colon) <%> is replaced by the
Xcurrent filename and <#> is replaced by the alternate filename. The older
Xalternate filenames are "#1", "#2", ..., "#9". "#0" is the same as "#". "#<"
Xis replaced by the current filename with the extension deleted (everything
Xafter and including the last '.' in the file name).
X
XCTRL-G		or
X:f[ile]			Prints the current filename (as typed) and the
X			cursor position.
X
X{count}CTRL-G		Prints the current filename with full path and the
X			cursor position.
X
X:f[ile] {name}		Sets the current filename to {name}.
X
X:files			Lists the alternate filenames.
X
XVim will remember the full path name of a file name that you enter. In most
Xcases when the file name is displayed only the name you typed is shown, but
Xthe full path name is being used if you used the ":cd" command.
X
XWhen writing the buffer, the default is to use the current filename. Thus 
Xwhen you give the "ZZ" or ":wq" command, the original file will be 
Xoverwritten. If you do not want this, the buffer can be written into another 
Xfile by giving a filename argument to the ":write" command. For example:
X	
X	vim testfile
X	[change the buffer with editor commands]
X	:w newfile
X	:q
X
XThis will create a file "newfile", that is a modified copy of "testfile". 
XThe file "testfile" will remain unchanged. Anyway, if the 'backup' option is 
Xset, Vim renames the original file before it will be overwritten. You can 
Xuse this file if you discover that you need the original file. The name of 
Xthe backup file is the same as the original file with ".bak" appended. Any 
X<.> is replaced by <_> on MSDOS machines, when Vim has detected that an 
XMSDOS-like filesystem is being used (e.g. messydos or crossdos) and when the 
X'shortname' option is set.
X
XTechnical: On the Amiga you can use 30 characters for a file name. But on an 
X	   MSDOS-compatible filesystem only 8 plus 3 characters are 
END_OF_FILE
if test 47200 -ne `wc -c <'vim/doc/reference.do1'`; then
    echo shar: \"'vim/doc/reference.do1'\" unpacked with wrong size!
fi
chmod +x 'vim/doc/reference.do1'
# end of 'vim/doc/reference.do1'
fi
echo shar: End of archive 23 \(of 25\).
cp /dev/null ark23isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 25 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0

===============================================================================
Bram Moolenaar                             | DISCLAIMER:  This  note  does  not
Oce Nederland B.V., Research & Development | necessarily represent the position
p.o. box 101, 5900 MA  Venlo               | of  Oce-Nederland  B.V.  Therefore
The Netherlands        phone +31 77 594077 | no liability or responsibility for
UUCP: mool@oce.nl        fax +31 77 595473 | whatever will be accepted.

exit 0 # Just in case...
