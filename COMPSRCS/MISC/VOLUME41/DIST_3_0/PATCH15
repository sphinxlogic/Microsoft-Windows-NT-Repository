Newsgroups: comp.sources.misc
From: Raphael Manfredi <ram@acri.fr>
Subject: v41i045:  dist-3.0 - Configure script generator and related tools, Patch15
Message-ID: <1993Dec19.211653.361@sparky.sterling.com>
X-Md4-Signature: b7eb8936af0e86d2f95102dbc6ee138e
Sender: kent@sparky.sterling.com (Kent Landfield)
Organization: Advanced Computer Research Institute, Lyon, France
Date: Sun, 19 Dec 1993 21:16:53 GMT
Approved: kent@sparky.sterling.com

Submitted-by: Raphael Manfredi <ram@acri.fr>
Posting-number: Volume 41, Issue 45
Archive-name: dist-3.0/patch15
Environment: UNIX, Perl, RCS
Patch-To: dist-3.0: Volume 39, Issue 5-32

[The latest patch for dist version 3.0 is #15.]

System: dist version 3.0
Patch #: 15
Priority: LOW
Subject: typo fix in Artistic license
Subject: updated Configure with new metaconfig
Subject: typo fix in README file
Subject: added new cpp symbols __bsdi__ and BSD_NET2
Subject: variable d_bsd was not always set properly
Subject: added /sbin:/usr/sbin:/usr/libexec in PATH for BSD/386
Subject: now set _test variable when test is built-in
Subject: fixed rare cases where echo is not needed
Subject: new variables cpprun and cpplast, guaranteed wrapper-free
Subject: cppstdin now tries to use cc, even at the cost of a wrapper
Subject: created four new units
Subject: did not strip variables properly when needed
Subject: now also strips down variables from trylist
Subject: now also looks under /var/mail for BSD/386
Subject: force zero exit status in all mkdep scripts
Subject: four new files
Date: Wed Dec 15 09:23:04 MET 1993
From: Raphael Manfredi <ram@acri.fr>

Description:
	Some minor typo and bug fixes.

	Added /sbin:/usr/sbin:/usr/libexec in PATH for BSD/386, as
	well as new cpp symbols __bsdi__ and BSD_NET2.

	Loc.U now sets _test variable when test is built-in, so that
	test is properly restored later on by Oldconfig.U.

	Fixed rare cases where echo is not needed and where Loc.U was
	aborting with a fatal error.

	New variables cpprun and cpplast, guaranteed wrapper-free,
	while cppstdin now tries to use cc, even at the cost of a
	wrapper. Some users requested this feature in order to
	guarantee that defines found by cppstdin will indeed be the
	same for cc. On the other hand, CPPRUN may be used in C
	program to invoke *a* cpp, not *the* cpp used by the C
	compiler.

	Created four new units for:
		mmap()
		munmap()
		msync()
		strdup()

	Unit d_portable.U did not strip variables properly when needed.
	Besides, it now also strips down variables from trylist.

	Unit maildir.U now also looks under /var/mail for BSD/386.

	Force zero exit status in all mkdep scripts, in order to
	avoid the 'make depend' failure even when the mkdep aborts
	on some error. Indeed, even when the 'make depend' phase does
	not proceed successfully, it is still possible to compile a
	package.


Fix:	From rn, say "| patch -p -N -d DIR", where DIR is your dist source
	directory.  Outside of rn, say "cd DIR; patch -p -N <thisarticle".
	If you don't have the patch program, apply the following by hand,
	or get patch (version 2.0, latest patchlevel).

	After patching:
		Configure -ders
		make
		make install
		make install.man

	If patch indicates that patchlevel is the wrong version, you may need
	to apply one or more previous patches, or the patch may already
	have been applied.  See the patchlevel.h file to find out what has or
	has not been applied.  In any event, don't continue with the patch.

	If you are missing previous patches they can be obtained from me:

		Raphael Manfredi <ram@acri.fr>

	If you send a mail message of the following form it will greatly speed
	processing:

		Subject: Command
		@SH mailpatch PATH dist 3.0 LIST
			   ^ note the c

	where PATH is a return path FROM ME TO YOU either in Internet notation,
	or in bang notation from some well-known host, and LIST is the number
	of one or more patches you need, separated by spaces, commas, and/or
	hyphens.  Saying 35- says everything from 35 to the end.

	To get some more detailed instructions, send me the following mail:

		Subject: Command
		@SH mailhelp PATH


Index: patchlevel.h
Prereq: 14
4c4
< #define PATCHLEVEL 14
---
> #define PATCHLEVEL 15

Index: mcon/U/cppstdin.U
Prereq: 3.0.1.1
*** mcon/U/cppstdin.U.old	Wed Dec 15 09:22:56 1993
--- mcon/U/cppstdin.U	Wed Dec 15 09:22:57 1993
***************
*** 1,4 ****
! ?RCS: $Id: cppstdin.U,v 3.0.1.1 1993/08/25 14:00:53 ram Exp $
  ?RCS:
  ?RCS: Copyright (c) 1991-1993, Raphael Manfredi
  ?RCS: 
--- 1,4 ----
! ?RCS: $Id: cppstdin.U,v 3.0.1.2 1993/12/15 08:18:58 ram Exp $
  ?RCS:
  ?RCS: Copyright (c) 1991-1993, Raphael Manfredi
  ?RCS: 
***************
*** 9,14 ****
--- 9,18 ----
  ?RCS: of the source tree for dist 3.0.
  ?RCS:
  ?RCS: $Log: cppstdin.U,v $
+ ?RCS: Revision 3.0.1.2  1993/12/15  08:18:58  ram
+ ?RCS: patch15: new variables cpprun and cpplast, guaranteed wrapper-free
+ ?RCS: patch15: cppstdin now tries to use cc, even at the cost of a wrapper
+ ?RCS:
  ?RCS: Revision 3.0.1.1  1993/08/25  14:00:53  ram
  ?RCS: patch6: remove wrapper when not actually used
  ?RCS:
***************
*** 15,21 ****
  ?RCS: Revision 3.0  1993/08/18  12:05:38  ram
  ?RCS: Baseline for dist 3.0 netwide release.
  ?RCS:
! ?MAKE:cppstdin cppminus: contains test Myread Oldconfig Loc cpp cc rm
  ?MAKE:	-pick add $@ %<
  ?S:cppstdin:
  ?S:	This variable contains the command which will invoke the C
--- 19,26 ----
  ?RCS: Revision 3.0  1993/08/18  12:05:38  ram
  ?RCS: Baseline for dist 3.0 netwide release.
  ?RCS:
! ?MAKE:cppstdin cppminus cpprun cpplast: contains test Myread Oldconfig Loc \
! 	cpp cc rm
  ?MAKE:	-pick add $@ %<
  ?S:cppstdin:
  ?S:	This variable contains the command which will invoke the C
***************
*** 29,38 ****
  ?S:	output.  This variable will have the value "-" if cppstdin needs a minus
  ?S:	to specify standard input, otherwise the value is "".
  ?S:.
  ?C:CPPSTDIN:
  ?C:	This symbol contains the first part of the string which will invoke
  ?C:	the C preprocessor on the standard input and produce to standard
! ?C:	output.	 Typical value of "cc -E" or "/lib/cpp".
  ?C:.
  ?C:CPPMINUS:
  ?C:	This symbol contains the second part of the string which will invoke
--- 34,56 ----
  ?S:	output.  This variable will have the value "-" if cppstdin needs a minus
  ?S:	to specify standard input, otherwise the value is "".
  ?S:.
+ ?S:cpprun:
+ ?S:	This variable contains the command which will invoke a C preprocessor
+ ?S:	on standard input and put the output to stdout. It is guaranteed not
+ ?S:	to be a wrapper and may be a null string if no preprocessor can be
+ ?S:	made directly available. This preprocessor might be different from the
+ ?S:	one used by the C compiler. Don't forget to append cpplast after the
+ ?S:	preprocessor options.
+ ?S:.
+ ?S:cpplast:
+ ?S:	This variable has the same functionality as cppminus, only it applies to
+ ?S:	cpprun and not cppstdin.
+ ?S:.
  ?C:CPPSTDIN:
  ?C:	This symbol contains the first part of the string which will invoke
  ?C:	the C preprocessor on the standard input and produce to standard
! ?C:	output.	 Typical value of "cc -E" or "/lib/cpp", but it can also
! ?C:	call a wrapper. See CPPRUN.
  ?C:.
  ?C:CPPMINUS:
  ?C:	This symbol contains the second part of the string which will invoke
***************
*** 40,49 ****
  ?C:	output.  This symbol will have the value "-" if CPPSTDIN needs a minus
  ?C:	to specify standard input, otherwise the value is "".
  ?C:.
  ?H:#define CPPSTDIN "$cppstdin"
  ?H:#define CPPMINUS "$cppminus"
  ?H:.
! ?T:wrapper
  : see how we invoke the C preprocessor
  echo " "
  echo "Now, how can we feed standard input to your C preprocessor..." >&4
--- 58,78 ----
  ?C:	output.  This symbol will have the value "-" if CPPSTDIN needs a minus
  ?C:	to specify standard input, otherwise the value is "".
  ?C:.
+ ?C:CPPRUN:
+ ?C:	This symbol contains the string which will invoke a C preprocessor on
+ ?C:	the standard input and produce to standard output. It needs to end
+ ?C:	with CPPLAST, after all other preprocessor flags have been specified.
+ ?C:	The main difference with CPPSTDIN is that this program will never be a
+ ?C:	pointer to a shell wrapper, i.e. it will be empty if no preprocessor is
+ ?C:	available directly to the user. Note that it may well be different from
+ ?C:	the preprocessor used to compile the C program.
+ ?C:.
  ?H:#define CPPSTDIN "$cppstdin"
  ?H:#define CPPMINUS "$cppminus"
+ ?H:#define CPPRUN "$cpprun"
+ ?H:#define CPPLAST "$cpplast"
  ?H:.
! ?T:wrapper x_cpp x_minus ok
  : see how we invoke the C preprocessor
  echo " "
  echo "Now, how can we feed standard input to your C preprocessor..." >&4
***************
*** 56,121 ****
  echo 'cat >.$$.c; '"$cc"' -E ${1+"$@"} .$$.c; rm .$$.c' >cppstdin
  chmod 755 cppstdin
  wrapper=`pwd`/cppstdin
  cd UU
  if $test "X$cppstdin" != "X" && \
  	$cppstdin $cppminus <testcpp.c >testcpp.out 2>&1 && \
! 	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
  	echo "You used to use $cppstdin $cppminus so we'll use that again."
! elif $test "$cc" = gcc && \
! 	(echo "Using gcc, eh?  We'll try to force gcc -E using a wrapper..."; \
! 	$wrapper <testcpp.c >testcpp.out 2>&1; \
! 	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1) ; then
! 	echo "Yup, we can."
! 	cppstdin="$wrapper"
! 	cppminus='';
  elif echo 'Maybe "'"$cc"' -E" will work...'; \
  	$cc -E <testcpp.c >testcpp.out 2>&1; \
  	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
  	echo "Yup, it does."
! 	cppstdin="$cc -E"
! 	cppminus='';
  elif echo 'Nope...maybe "'"$cc"' -E -" will work...'; \
  	$cc -E - <testcpp.c >testcpp.out 2>&1; \
  	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
  	echo "Yup, it does."
! 	cppstdin="$cc -E"
! 	cppminus='-';
! elif echo 'No such luck, maybe "'$cpp'" will work...'; \
! 	$cpp <testcpp.c >testcpp.out 2>&1; \
! 	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
! 	echo "It works!"
! 	cppstdin="$cpp"
! 	cppminus='';
! elif echo 'Nixed again...maybe "'$cpp' -" will work...'; \
! 	$cpp - <testcpp.c >testcpp.out 2>&1; \
! 	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
! 	echo "Hooray, it works!  I was beginning to wonder."
! 	cppstdin="$cpp"
! 	cppminus='-';
  elif echo 'Nope...maybe "'"$cc"' -P" will work...'; \
  	$cc -P <testcpp.c >testcpp.out 2>&1; \
  	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
  	echo "Yipee, that works!"
! 	cppstdin="$cc -P"
! 	cppminus='';
  elif echo 'Nope...maybe "'"$cc"' -P -" will work...'; \
  	$cc -P - <testcpp.c >testcpp.out 2>&1; \
  	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
  	echo "At long last!"
! 	cppstdin="$cc -P"
! 	cppminus='-';
  elif echo 'Uh-uh.  Time to get fancy.  Trying a wrapper...'; \
  	$wrapper <testcpp.c >testcpp.out 2>&1; \
  	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
! 	cppstdin="$wrapper"
! 	cppminus=''
  	echo "Eureka!"
  else
  	dflt=''
  	rp="No dice.  I can't find a C preprocessor.  Name one:"
  	. ./myread
! 	cppstdin="$ans"
! 	$cppstdin <testcpp.c >testcpp.out 2>&1
  	if $contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
  		echo "OK, that will do." >&4
  	else
--- 85,176 ----
  echo 'cat >.$$.c; '"$cc"' -E ${1+"$@"} .$$.c; rm .$$.c' >cppstdin
  chmod 755 cppstdin
  wrapper=`pwd`/cppstdin
+ ok='false'
  cd UU
+ 
+ ?X:
+ ?X: We'll run the cpp tests again if we don't have any valid C preprocessor
+ ?X: yet or don't know how to proceed without a wrapper (in which case cpprun
+ ?X: is empty and that's really annoying...)
+ ?X:
  if $test "X$cppstdin" != "X" && \
  	$cppstdin $cppminus <testcpp.c >testcpp.out 2>&1 && \
! 	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
! then
  	echo "You used to use $cppstdin $cppminus so we'll use that again."
! 	case "$cpprun" in
! 	'') echo "But let's see if we can live without a wrapper..." ;;
! 	*)
! 		if $cpprun $cpplast <testcpp.c >testcpp.out 2>&1 && \
! 			$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
! 		then
! 			echo "(And we'll use $cpprun $cpplast to preprocess directly.)"
! 			ok='true'
! 		else
! 			echo "(However, $cpprun $cpplast does not work, let's see...)"
! 		fi
! 		;;
! 	esac
! else
! 	case "$cppstdin" in
! 	'') ;;
! 	*)
! 		echo "Good old $cppstdin $cppminus does not seem to be of any help..."
! 		;;
! 	esac
! fi
! 
! if $ok; then
! 	: nothing
  elif echo 'Maybe "'"$cc"' -E" will work...'; \
  	$cc -E <testcpp.c >testcpp.out 2>&1; \
  	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
  	echo "Yup, it does."
! 	x_cpp="$cc -E"
! 	x_minus='';
  elif echo 'Nope...maybe "'"$cc"' -E -" will work...'; \
  	$cc -E - <testcpp.c >testcpp.out 2>&1; \
  	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
  	echo "Yup, it does."
! 	x_cpp="$cc -E"
! 	x_minus='-';
  elif echo 'Nope...maybe "'"$cc"' -P" will work...'; \
  	$cc -P <testcpp.c >testcpp.out 2>&1; \
  	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
  	echo "Yipee, that works!"
! 	x_cpp="$cc -P"
! 	x_minus='';
  elif echo 'Nope...maybe "'"$cc"' -P -" will work...'; \
  	$cc -P - <testcpp.c >testcpp.out 2>&1; \
  	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
  	echo "At long last!"
! 	x_cpp="$cc -P"
! 	x_minus='-';
! elif echo 'No such luck, maybe "'$cpp'" will work...'; \
! 	$cpp <testcpp.c >testcpp.out 2>&1; \
! 	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
! 	echo "It works!"
! 	x_cpp="$cpp"
! 	x_minus='';
! elif echo 'Nixed again...maybe "'$cpp' -" will work...'; \
! 	$cpp - <testcpp.c >testcpp.out 2>&1; \
! 	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
! 	echo "Hooray, it works!  I was beginning to wonder."
! 	x_cpp="$cpp"
! 	x_minus='-';
  elif echo 'Uh-uh.  Time to get fancy.  Trying a wrapper...'; \
  	$wrapper <testcpp.c >testcpp.out 2>&1; \
  	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
! 	x_cpp="$wrapper"
! 	x_minus=''
  	echo "Eureka!"
  else
  	dflt=''
  	rp="No dice.  I can't find a C preprocessor.  Name one:"
  	. ./myread
! 	x_cpp="$ans"
! 	x_minus=''
! 	$x_cpp <testcpp.c >testcpp.out 2>&1
  	if $contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
  		echo "OK, that will do." >&4
  	else
***************
*** 123,128 ****
--- 178,221 ----
  		exit 1
  	fi
  fi
+ 
+ case "$ok" in
+ false)
+ 	cppstdin="$x_cpp"
+ 	cppminus="$x_minus"
+ 	cpprun="$x_cpp"
+ 	cpplast="$x_minus"
+ ?X:
+ ?X: If /lib/cpp is used, try using a wrapper to increase our chances to have
+ ?X: the C compiler and our $cppstdin agree on the same symbols... However,
+ ?X: since cpprun is guaranteed not to be a wrapper, we must clear it if the
+ ?X: only preprocessor we found was a wrapper, with all our luck...
+ ?X:
+ 	set X $x_cpp
+ 	shift
+ 	case "$1" in
+ 	"$cpp")
+ 		echo "Perhaps can we force $cc -E using a wrapper..."
+ 		if $wrapper <testcpp.c >testcpp.out 2>&1; \
+ 			$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
+ 		then
+ 			echo "Yup, we can."
+ 			cppstdin="$wrapper"
+ 			cppminus='';
+ 		else
+ 			echo "Nope, we'll have to live without it..."
+ 		fi
+ 		;;
+ 	esac
+ 	case "$cpprun" in
+ 	"$wrapper")
+ 		cpprun=''
+ 		cpplast=''
+ 		;;
+ 	esac
+ 	;;
+ esac
+ 
  case "$cppstdin" in
  "$wrapper") ;;
  *) $rm -f $wrapper;;

Index: Configure
Prereq: 3.0.1.3
*** Configure.old	Wed Dec 15 09:22:52 1993
--- Configure	Wed Dec 15 09:22:52 1993
***************
*** 18,26 ****
  # archive site. Check with Archie if you don't know where that can be.)
  #
  
! # $Id: Configure,v 3.0.1.3 1993/10/16 13:45:31 ram Exp $
  #
! # Generated on Sat Oct 16 14:42:24 MET 1993 [metaconfig 3.0 PL11]
  
  cat >/tmp/c1$$ <<EOF
  ARGGGHHHH!!!!!
--- 18,26 ----
  # archive site. Check with Archie if you don't know where that can be.)
  #
  
! # $Id: Configure,v 3.0.1.4 1993/12/15 08:13:03 ram Exp $
  #
! # Generated on Wed Dec 15 09:10:18 MET 1993 [metaconfig 3.0 PL14]
  
  cat >/tmp/c1$$ <<EOF
  ARGGGHHHH!!!!!
***************
*** 61,67 ****
  
  : On HP-UX, large Configure scripts may exercise a bug in /bin/sh
  if test -f /hp-ux -a -f /bin/ksh; then
! 	if (alias -x) >/dev/null 2>&1; then
  		: already under /bin/ksh
  	else
  		cat <<'EOM'
--- 61,67 ----
  
  : On HP-UX, large Configure scripts may exercise a bug in /bin/sh
  if test -f /hp-ux -a -f /bin/ksh; then
! 	if (PATH=.; alias -x) >/dev/null 2>&1; then
  		: already under /bin/ksh
  	else
  		cat <<'EOM'
***************
*** 71,77 ****
  	fi
  else
  	: Warn them if they use ksh on other systems
! 	(alias -x) >/dev/null 2>&1 && \
  		cat <<'EOM'
  (I see you are using the Korn shell.  Some ksh's blow up on Configure,
  especially on exotic machines.  If yours does, try the Bourne shell instead.)
--- 71,77 ----
  	fi
  else
  	: Warn them if they use ksh on other systems
! 	(PATH=.; alias -x) >/dev/null 2>&1 && \
  		cat <<'EOM'
  (I see you are using the Korn shell.  Some ksh's blow up on Configure,
  especially on exotic machines.  If yours does, try the Bourne shell instead.)
***************
*** 327,333 ****
  	-s) shift; silent=true;;
  	-E) shift; alldone=exit;;
  	-S) shift; extractsh=true;;
! 	-V) echo "Configure generated by metaconfig 3.0 PL11." >&2
  		exit 0;;
  	--) break;;
  	-*) echo "Configure: unknown option $1" >&2; shift; error=true;;
--- 327,333 ----
  	-s) shift; silent=true;;
  	-E) shift; alldone=exit;;
  	-S) shift; extractsh=true;;
! 	-V) echo "Configure generated by metaconfig 3.0 PL14." >&2
  		exit 0;;
  	--) break;;
  	-*) echo "Configure: unknown option $1" >&2; shift; error=true;;
***************
*** 379,387 ****
  
  : set package name
  package=dist
- first=`echo $package | sed -e 's/^\(.\).*/\1/'`
- last=`echo $package | sed -e 's/^.\(.*\)/\1/'`
- spackage=`echo $first | tr '[a-z]' '[A-Z]'`$last
  
  : Eunice requires " " instead of "", can you believe it
  echo " "
--- 379,384 ----
***************
*** 848,853 ****
--- 845,851 ----
  	if sh -c "PATH= test true" >/dev/null 2>&1; then
  		echo "Using the test built into your sh."
  		test=test
+ 		_test=test
  	fi
  	;;
  esac
***************
*** 855,860 ****
--- 853,859 ----
  echo)
  	echo "Hopefully echo is built into your sh."
  	;;
+ '') ;;
  *)
  	echo " "
  echo "Checking compatibility between $echo and builtin echo (if any)..." >&4
***************
*** 973,980 ****
  . ./myread
  case "$ans" in
  	y*) d_portable="$define"
! 	for file in $loclist; do
! 		eval $file=$file
  	done
  	;;
  	*)  d_portable="$undef" ;;
--- 972,979 ----
  . ./myread
  case "$ans" in
  	y*) d_portable="$define"
! 	for file in $loclist $trylist; do
! 		eval $file="\$_$file"
  	done
  	;;
  	*)  d_portable="$undef" ;;
***************
*** 1428,1433 ****
--- 1427,1433 ----
  echo exit 1 >eunice
  echo exit 1 >xenix
  echo exit 1 >venix
+ d_bsd="$undef"
  $cat /usr/include/signal.h /usr/include/sys/signal.h >foo 2>/dev/null
  if test -f /osf_boot || $contains 'OSF/1' /usr/include/ctype.h >/dev/null 2>&1
  then
***************
*** 1447,1453 ****
  		fi
  		echo exit 0 >usg
  	fi
- 	d_bsd="$undef"
  elif $contains SIGTSTP foo >/dev/null 2>&1 ; then
  	echo "Looks kind of like a BSD system, but we'll see..."
  	d_bsd="$define"
--- 1447,1452 ----
***************
*** 1454,1460 ****
  	echo exit 0 >bsd
  else
  	echo "Looks kind of like a Version 7 system, but we'll see..."
- 	d_bsd="$undef"
  	echo exit 0 >v7
  fi
  case "$eunicefix" in
--- 1453,1458 ----

Index: mcon/U/Loc.U
Prereq: 3.0.1.1
*** mcon/U/Loc.U.old	Wed Dec 15 09:22:56 1993
--- mcon/U/Loc.U	Wed Dec 15 09:22:56 1993
***************
*** 1,4 ****
! ?RCS: $Id: Loc.U,v 3.0.1.1 1993/09/13 15:47:13 ram Exp $
  ?RCS:
  ?RCS: Copyright (c) 1991-1993, Raphael Manfredi
  ?RCS: 
--- 1,4 ----
! ?RCS: $Id: Loc.U,v 3.0.1.2 1993/12/15 08:16:52 ram Exp $
  ?RCS:
  ?RCS: Copyright (c) 1991-1993, Raphael Manfredi
  ?RCS: 
***************
*** 9,14 ****
--- 9,18 ----
  ?RCS: of the source tree for dist 3.0.
  ?RCS:
  ?RCS: $Log: Loc.U,v $
+ ?RCS: Revision 3.0.1.2  1993/12/15  08:16:52  ram
+ ?RCS: patch15: now set _test variable when test is built-in
+ ?RCS: patch15: fixed rare cases where echo is not needed
+ ?RCS:
  ?RCS: Revision 3.0.1.1  1993/09/13  15:47:13  ram
  ?RCS: patch10: test program not always in /bin/test (WAD)
  ?RCS:
***************
*** 40,46 ****
  	rmail sed sendmail sh shar sleep smail sort submit tail tar tbl test \
  	touch tr troff uname uniq uuname vi zcat
  ?V::pth loclist trylist
! ?T:thing xxx dir file say
  : find out where common programs are
  echo " "
  echo "Locating common programs..." >&4
--- 44,50 ----
  	rmail sed sendmail sh shar sleep smail sort submit tail tar tbl test \
  	touch tr troff uname uniq uuname vi zcat
  ?V::pth loclist trylist
! ?T:thing xxx dir file say _test
  : find out where common programs are
  echo " "
  echo "Locating common programs..." >&4
***************
*** 195,201 ****
--- 199,211 ----
  *)
  	if sh -c "PATH= test true" >/dev/null 2>&1; then
  		echo "Using the test built into your sh."
+ ?X:
+ ?X: We need to set both test and _test, since Oldconfig.U will use the _test
+ ?X: value to systematically restore computed paths, which may be wrong if
+ ?X: we choose to load an old config.sh generated on another platform.
+ ?X:
  		test=test
+ 		_test=test
  	fi
  	;;
  esac
***************
*** 204,209 ****
--- 214,221 ----
  echo)
  	echo "Hopefully echo is built into your sh."
  	;;
+ ?X: For those rare cases where we don't need $echo...
+ '') ;;
  *)
  	echo " "
  echo "Checking compatibility between $echo and builtin echo (if any)..." >&4

Index: mcon/U/Cppsym.U
Prereq: 3.0
*** mcon/U/Cppsym.U.old	Wed Dec 15 09:22:54 1993
--- mcon/U/Cppsym.U	Wed Dec 15 09:22:54 1993
***************
*** 1,4 ****
! ?RCS: $Id: Cppsym.U,v 3.0 1993/08/18 12:04:50 ram Exp $
  ?RCS:
  ?RCS: Copyright (c) 1991-1993, Raphael Manfredi
  ?RCS: 
--- 1,4 ----
! ?RCS: $Id: Cppsym.U,v 3.0.1.1 1993/12/15 08:14:14 ram Exp $
  ?RCS:
  ?RCS: Copyright (c) 1991-1993, Raphael Manfredi
  ?RCS: 
***************
*** 9,14 ****
--- 9,17 ----
  ?RCS: of the source tree for dist 3.0.
  ?RCS:
  ?RCS: $Log: Cppsym.U,v $
+ ?RCS: Revision 3.0.1.1  1993/12/15  08:14:14  ram
+ ?RCS: patch15: added new cpp symbols __bsdi__ and BSD_NET2
+ ?RCS:
  ?RCS: Revision 3.0  1993/08/18  12:04:50  ram
  ?RCS: Baseline for dist 3.0 netwide release.
  ?RCS:
***************
*** 25,31 ****
  ?T:attrlist sym list unknown status
  ?X: The attrlist is in alpha order for ease of maintenance...
  ?INIT:: list of known cpp symbols
! ?INIT:attrlist="__alpha DGUX M_I186 M_I286 M_I386 M_I8086 M_XENIX UTS __DGUX__"
  ?INIT:attrlist="$attrlist _AIX __STDC__ __m88k__ ansi bsd4_2 gcos gimpel"
  ?INIT:attrlist="$attrlist hp9000s300 hp9000s400 hp9000s500 hp9000s700"
  ?INIT:attrlist="$attrlist hp9000s800 hpux"
--- 28,35 ----
  ?T:attrlist sym list unknown status
  ?X: The attrlist is in alpha order for ease of maintenance...
  ?INIT:: list of known cpp symbols
! ?INIT:attrlist="__alpha __bsdi__ BSD_NET2 DGUX M_I186 M_I286 M_I386"
! ?INIT:attrlist="$attrlist M_I8086 M_XENIX UTS __DGUX__"
  ?INIT:attrlist="$attrlist _AIX __STDC__ __m88k__ ansi bsd4_2 gcos gimpel"
  ?INIT:attrlist="$attrlist hp9000s300 hp9000s400 hp9000s500 hp9000s700"
  ?INIT:attrlist="$attrlist hp9000s800 hpux"

Index: mcon/U/Guess.U
Prereq: 3.0.1.2
*** mcon/U/Guess.U.old	Wed Dec 15 09:22:54 1993
--- mcon/U/Guess.U	Wed Dec 15 09:22:55 1993
***************
*** 1,4 ****
! ?RCS: $Id: Guess.U,v 3.0.1.2 1993/08/30 08:57:14 ram Exp $
  ?RCS:
  ?RCS: Copyright (c) 1991-1993, Raphael Manfredi
  ?RCS: 
--- 1,4 ----
! ?RCS: $Id: Guess.U,v 3.0.1.3 1993/12/15 08:14:35 ram Exp $
  ?RCS:
  ?RCS: Copyright (c) 1991-1993, Raphael Manfredi
  ?RCS: 
***************
*** 9,14 ****
--- 9,17 ----
  ?RCS: of the source tree for dist 3.0.
  ?RCS:
  ?RCS: $Log: Guess.U,v $
+ ?RCS: Revision 3.0.1.3  1993/12/15  08:14:35  ram
+ ?RCS: patch15: variable d_bsd was not always set properly
+ ?RCS:
  ?RCS: Revision 3.0.1.2  1993/08/30  08:57:14  ram
  ?RCS: patch8: fixed comment which wrongly attributed the usrinc symbol
  ?RCS: patch8: no more ugly messages when no /usr/include/ctype.h
***************
*** 73,78 ****
--- 76,82 ----
  echo exit 1 >eunice
  echo exit 1 >xenix
  echo exit 1 >venix
+ d_bsd="$undef"
  ?X:
  ?X: Do not use 'usrinc', or we get a circular dependency. because
  ?X: usrinc is defined in usrinc.U, which relies on us...
***************
*** 96,102 ****
  		fi
  		echo exit 0 >usg
  	fi
- 	d_bsd="$undef"
  elif $contains SIGTSTP foo >/dev/null 2>&1 ; then
  	echo "Looks kind of like a BSD system, but we'll see..."
  	d_bsd="$define"
--- 100,105 ----
***************
*** 103,109 ****
  	echo exit 0 >bsd
  else
  	echo "Looks kind of like a Version 7 system, but we'll see..."
- 	d_bsd="$undef"
  	echo exit 0 >v7
  fi
  case "$eunicefix" in
--- 106,111 ----

Index: mcon/U/Head.U
Prereq: 3.0.1.2
*** mcon/U/Head.U.old	Wed Dec 15 09:22:55 1993
--- mcon/U/Head.U	Wed Dec 15 09:22:55 1993
***************
*** 1,4 ****
! ?RCS: $Id: Head.U,v 3.0.1.2 1993/11/10 17:32:35 ram Exp $
  ?RCS:
  ?RCS: Copyright (c) 1991-1993, Raphael Manfredi
  ?RCS: 
--- 1,4 ----
! ?RCS: $Id: Head.U,v 3.0.1.3 1993/12/15 08:15:07 ram Exp $
  ?RCS:
  ?RCS: Copyright (c) 1991-1993, Raphael Manfredi
  ?RCS: 
***************
*** 9,14 ****
--- 9,17 ----
  ?RCS: of the source tree for dist 3.0.
  ?RCS:
  ?RCS: $Log: Head.U,v $
+ ?RCS: Revision 3.0.1.3  1993/12/15  08:15:07  ram
+ ?RCS: patch15: added /sbin:/usr/sbin:/usr/libexec in PATH for BSD/386
+ ?RCS:
  ?RCS: Revision 3.0.1.2  1993/11/10  17:32:35  ram
  ?RCS: patch14: ensure PATH is reset to '.' before testing for alias
  ?RCS:
***************
*** 59,65 ****
  ?X: by your version, not mine: It credits your work.
  ?X:
  
! # $Id: Head.U,v 3.0.1.2 1993/11/10 17:32:35 ram Exp $
  #
  # Generated on <DATE> [metaconfig <VERSION> PL<PATCHLEVEL>]
  
--- 62,68 ----
  ?X: by your version, not mine: It credits your work.
  ?X:
  
! # $Id: Head.U,v 3.0.1.3 1993/12/15 08:15:07 ram Exp $
  #
  # Generated on <DATE> [metaconfig <VERSION> PL<PATCHLEVEL>]
  
***************
*** 103,108 ****
--- 106,112 ----
  PATH=$PATH:'/sys5.3/bin:/sys5.3/usr/bin:/bsd4.3/bin:/bsd4.3/usr/ucb'
  PATH=$PATH:'/bsd4.3/usr/bin:/usr/bsd:/bsd43/bin:/usr/ccs/bin'
  PATH=$PATH:'/etc:/usr/lib:/usr/ucblib:/lib:/usr/ccs/lib'
+ PATH=$PATH:'/sbin:/usr/sbin:/usr/libexec'
  export PATH
  
  if test ! -t 0; then

Index: mcon/U/d_portable.U
Prereq: 3.0
*** mcon/U/d_portable.U.old	Wed Dec 15 09:22:59 1993
--- mcon/U/d_portable.U	Wed Dec 15 09:22:59 1993
***************
*** 1,4 ****
! ?RCS: $Id: d_portable.U,v 3.0 1993/08/18 12:06:48 ram Exp $
  ?RCS:
  ?RCS: Copyright (c) 1991-1993, Raphael Manfredi
  ?RCS: 
--- 1,4 ----
! ?RCS: $Id: d_portable.U,v 3.0.1.1 1993/12/15 08:21:17 ram Exp $
  ?RCS:
  ?RCS: Copyright (c) 1991-1993, Raphael Manfredi
  ?RCS: 
***************
*** 9,14 ****
--- 9,18 ----
  ?RCS: of the source tree for dist 3.0.
  ?RCS:
  ?RCS: $Log: d_portable.U,v $
+ ?RCS: Revision 3.0.1.1  1993/12/15  08:21:17  ram
+ ?RCS: patch15: did not strip variables properly when needed
+ ?RCS: patch15: now also strips down variables from trylist
+ ?RCS:
  ?RCS: Revision 3.0  1993/08/18  12:06:48  ram
  ?RCS: Baseline for dist 3.0 netwide release.
  ?RCS:
***************
*** 55,62 ****
  . ./myread
  case "$ans" in
  	y*) d_portable="$define"
! 	for file in $loclist; do
! 		eval $file=$file
  	done
  	;;
  	*)  d_portable="$undef" ;;
--- 59,71 ----
  . ./myread
  case "$ans" in
  	y*) d_portable="$define"
! ?X:
! ?X: Strip down paths in located executables. For each file, e.g. vi, there
! ?X: is a $vi variable whose value is for instance '/usr/bin/vi'. By resetting
! ?X: $vi to 'vi', we rely on the PATH variable to locate the executable...
! ?X:
! 	for file in $loclist $trylist; do
! 		eval $file="\$file"
  	done
  	;;
  	*)  d_portable="$undef" ;;

Index: mcon/U/mkdep.U
Prereq: 3.0
*** mcon/U/mkdep.U.old	Wed Dec 15 09:23:02 1993
--- mcon/U/mkdep.U	Wed Dec 15 09:23:02 1993
***************
*** 1,4 ****
! ?RCS: $Id: mkdep.U,v 3.0 1993/08/18 12:09:16 ram Exp $
  ?RCS:
  ?RCS: Copyright (c) 1991-1993, Raphael Manfredi
  ?RCS: 
--- 1,4 ----
! ?RCS: $Id: mkdep.U,v 3.0.1.1 1993/12/15 08:22:39 ram Exp $
  ?RCS:
  ?RCS: Copyright (c) 1991-1993, Raphael Manfredi
  ?RCS: 
***************
*** 9,14 ****
--- 9,17 ----
  ?RCS: of the source tree for dist 3.0.
  ?RCS:
  ?RCS: $Log: mkdep.U,v $
+ ?RCS: Revision 3.0.1.1  1993/12/15  08:22:39  ram
+ ?RCS: patch15: force zero exit status in all mkdep scripts
+ ?RCS:
  ?RCS: Revision 3.0  1993/08/18  12:09:16  ram
  ?RCS: Baseline for dist 3.0 netwide release.
  ?RCS:
***************
*** 75,80 ****
--- 78,84 ----
  do
  	$cpp -M -I. $cppflags \$flags \$srcfile 2>/dev/null
  done
+ exit 0
  EOM
  	mkdep=$toplev/mkdep
  	chmod +x $mkdep
***************
*** 100,105 ****
--- 104,110 ----
  do
  	$cc -MM -I. $cppflags \$flags \$srcfile 2>/dev/null
  done
+ exit 0
  EOM
  	mkdep=$toplev/mkdep
  	chmod +x $mkdep
***************
*** 135,140 ****
--- 140,146 ----
  		-e 's|: *$|: '\$srcfile'|' | \\
  	$grep -v '^#' | $sort | $uniq
  done
+ exit 0
  EOS
  	mkdep=$toplev/mkdep
  	chmod +x $mkdep
***************
*** 197,202 ****
--- 203,209 ----
  	IFS=' '
  	$rm -f /tmp/mkdep\$\$
  done
+ exit 0
  EOS
  		mkdep=$toplev/mkdep
  		chmod +x $mkdep

Index: MANIFEST
*** MANIFEST.old	Wed Dec 15 09:23:02 1993
--- MANIFEST	Wed Dec 15 09:23:03 1993
***************
*** 176,186 ****
--- 176,189 ----
  mcon/U/d_memmove.U         Do we have memmove()?
  mcon/U/d_memset.U          Do we have memset()?
  mcon/U/d_mkdir.U           Do we have mkdir()?
+ mcon/U/d_mmap.U            Do we have mmap()?
  mcon/U/d_msg.U             Do we have full msg(2) support?
  mcon/U/d_msgctl.U          Do we have msgctl()?
  mcon/U/d_msgget.U          Do we have msgget()?
  mcon/U/d_msgrcv.U          Do we have msgrcv()?
  mcon/U/d_msgsnd.U          Do we have msgsnd()?
+ mcon/U/d_msync.U           Do we have msync()?
+ mcon/U/d_munmap.U          Do we have munmap()?
  mcon/U/d_newsadm.U         Who is news administrator?
  mcon/U/d_nolnbuf.U         Is stdout line buffered?
  mcon/U/d_normsig.U         signal() vs sigset()
***************
*** 236,241 ****
--- 239,245 ----
  mcon/U/d_strchr.U          Use strchr() or index()?
  mcon/U/d_strcspn.U         Do we have strcspn()?
  mcon/U/d_strctcpy.U        Do we do struct copies?
+ mcon/U/d_strdup.U          Do we have strdup()?
  mcon/U/d_strerror.U        Do we have strerror()?
  mcon/U/d_strftime.U        Do we have strftime()?
  mcon/U/d_strstr.U          Do we have strtr()?

Index: mcon/U/d_strdup.U
*** mcon/U/d_strdup.U.old	Wed Dec 15 09:22:59 1993
--- mcon/U/d_strdup.U	Wed Dec 15 09:23:00 1993
***************
*** 0 ****
--- 1,32 ----
+ ?RCS: $Id: d_strdup.U,v 3.0.1.1 1993/12/15 08:21:41 ram Exp $
+ ?RCS:
+ ?RCS: Copyright (c) 1991-1993, Raphael Manfredi
+ ?RCS: 
+ ?RCS: You may redistribute only under the terms of the Artistic Licence,
+ ?RCS: as specified in the README file that comes with the distribution.
+ ?RCS: You may reuse parts of this distribution only within the terms of
+ ?RCS: that same Artistic Licence; a copy of which may be found at the root
+ ?RCS: of the source tree for dist 3.0.
+ ?RCS:
+ ?RCS: $Log: d_strdup.U,v $
+ ?RCS: Revision 3.0.1.1  1993/12/15  08:21:41  ram
+ ?RCS: patch15: created
+ ?RCS:
+ ?MAKE:d_strdup: Inlibc
+ ?MAKE:	-pick add $@ %<
+ ?S:d_strdup:
+ ?S:	This variable conditionally defines HAS_STRDUP if strdup() is
+ ?S:	available to duplicate strings in memory.
+ ?S:.
+ ?C:HAS_STRDUP:
+ ?C:	This symbol, if defined, indicates that the strdup routine is
+ ?C:	available to duplicate strings in memory. Otherwise, roll up
+ ?C:	your own...
+ ?C:.
+ ?H:#$d_strdup HAS_STRDUP		/**/
+ ?H:.
+ ?LINT:set d_strdup
+ : see if strdup exists
+ set strdup d_strdup
+ eval $inlibc
+ 

Index: mcon/U/d_munmap.U
*** mcon/U/d_munmap.U.old	Wed Dec 15 09:22:58 1993
--- mcon/U/d_munmap.U	Wed Dec 15 09:22:58 1993
***************
*** 0 ****
--- 1,31 ----
+ ?RCS: $Id: d_munmap.U,v 3.0.1.1 1993/12/15 08:19:22 ram Exp $
+ ?RCS:
+ ?RCS: Copyright (c) 1991-1993, Raphael Manfredi
+ ?RCS: 
+ ?RCS: You may redistribute only under the terms of the Artistic Licence,
+ ?RCS: as specified in the README file that comes with the distribution.
+ ?RCS: You may reuse parts of this distribution only within the terms of
+ ?RCS: that same Artistic Licence; a copy of which may be found at the root
+ ?RCS: of the source tree for dist 3.0.
+ ?RCS:
+ ?RCS: $Log: d_munmap.U,v $
+ ?RCS: Revision 3.0.1.1  1993/12/15  08:19:22  ram
+ ?RCS: patch15: created
+ ?RCS:
+ ?MAKE:d_munmap: Inlibc
+ ?MAKE:	-pick add $@ %<
+ ?S:d_munmap:
+ ?S:	This variable conditionally defines HAS_MUNMAP if munmap() is
+ ?S:	available to unmap a region mapped by mmap().
+ ?S:.
+ ?C:HAS_MUNMAP:
+ ?C:	This symbol, if defined, indicates that the munmap system call is
+ ?C:	available to unmap a region, usually mapped by mmap().
+ ?C:.
+ ?H:#$d_munmap HAS_MUNMAP		/**/
+ ?H:.
+ ?LINT:set d_munmap
+ : see if munmap exists
+ set munmap d_munmap
+ eval $inlibc
+ 

Index: mcon/U/mailfile.U
Prereq: 3.0
*** mcon/U/mailfile.U.old	Wed Dec 15 09:23:01 1993
--- mcon/U/mailfile.U	Wed Dec 15 09:23:01 1993
***************
*** 1,4 ****
! ?RCS: $Id: mailfile.U,v 3.0 1993/08/18 12:09:11 ram Exp $
  ?RCS:
  ?RCS: Copyright (c) 1991-1993, Raphael Manfredi
  ?RCS: 
--- 1,4 ----
! ?RCS: $Id: mailfile.U,v 3.0.1.1 1993/12/15 08:22:08 ram Exp $
  ?RCS:
  ?RCS: Copyright (c) 1991-1993, Raphael Manfredi
  ?RCS: 
***************
*** 9,14 ****
--- 9,17 ----
  ?RCS: of the source tree for dist 3.0.
  ?RCS:
  ?RCS: $Log: mailfile.U,v $
+ ?RCS: Revision 3.0.1.1  1993/12/15  08:22:08  ram
+ ?RCS: patch15: now also looks under /var/mail for BSD/386
+ ?RCS:
  ?RCS: Revision 3.0  1993/08/18  12:09:11  ram
  ?RCS: Baseline for dist 3.0 netwide release.
  ?RCS:
***************
*** 29,35 ****
  : determine where mail is spooled
  case "$mailfile" in
  '')
! 	dflt=`./loc . XXX /usr/spool/mail /usr/mail`
  	case "$dflt" in
  	XXX) dflt='%~/mailbox';;
  	*) dflt="$dflt/%L";;
--- 32,38 ----
  : determine where mail is spooled
  case "$mailfile" in
  '')
! 	dflt=`./loc . XXX /usr/spool/mail /usr/mail /var/mail`
  	case "$dflt" in
  	XXX) dflt='%~/mailbox';;
  	*) dflt="$dflt/%L";;

Index: mcon/U/d_msync.U
*** mcon/U/d_msync.U.old	Wed Dec 15 09:22:58 1993
--- mcon/U/d_msync.U	Wed Dec 15 09:22:58 1993
***************
*** 0 ****
--- 1,31 ----
+ ?RCS: $Id: d_msync.U,v 3.0.1.1 1993/12/15 08:19:17 ram Exp $
+ ?RCS:
+ ?RCS: Copyright (c) 1991-1993, Raphael Manfredi
+ ?RCS: 
+ ?RCS: You may redistribute only under the terms of the Artistic Licence,
+ ?RCS: as specified in the README file that comes with the distribution.
+ ?RCS: You may reuse parts of this distribution only within the terms of
+ ?RCS: that same Artistic Licence; a copy of which may be found at the root
+ ?RCS: of the source tree for dist 3.0.
+ ?RCS:
+ ?RCS: $Log: d_msync.U,v $
+ ?RCS: Revision 3.0.1.1  1993/12/15  08:19:17  ram
+ ?RCS: patch15: created
+ ?RCS:
+ ?MAKE:d_msync: Inlibc
+ ?MAKE:	-pick add $@ %<
+ ?S:d_msync:
+ ?S:	This variable conditionally defines HAS_MSYNC if msync() is
+ ?S:	available to synchronize a mapped file.
+ ?S:.
+ ?C:HAS_MSYNC:
+ ?C:	This symbol, if defined, indicates that the msync system call is
+ ?C:	available to synchronize a mapped file.
+ ?C:.
+ ?H:#$d_msync HAS_MSYNC		/**/
+ ?H:.
+ ?LINT:set d_msync
+ : see if msync exists
+ set msync d_msync
+ eval $inlibc
+ 

Index: mcon/U/d_mmap.U
*** mcon/U/d_mmap.U.old	Wed Dec 15 09:22:57 1993
--- mcon/U/d_mmap.U	Wed Dec 15 09:22:57 1993
***************
*** 0 ****
--- 1,31 ----
+ ?RCS: $Id: d_mmap.U,v 3.0.1.1 1993/12/15 08:19:12 ram Exp $
+ ?RCS:
+ ?RCS: Copyright (c) 1991-1993, Raphael Manfredi
+ ?RCS: 
+ ?RCS: You may redistribute only under the terms of the Artistic Licence,
+ ?RCS: as specified in the README file that comes with the distribution.
+ ?RCS: You may reuse parts of this distribution only within the terms of
+ ?RCS: that same Artistic Licence; a copy of which may be found at the root
+ ?RCS: of the source tree for dist 3.0.
+ ?RCS:
+ ?RCS: $Log: d_mmap.U,v $
+ ?RCS: Revision 3.0.1.1  1993/12/15  08:19:12  ram
+ ?RCS: patch15: created
+ ?RCS:
+ ?MAKE:d_mmap: Inlibc
+ ?MAKE:	-pick add $@ %<
+ ?S:d_mmap:
+ ?S:	This variable conditionally defines HAS_MMAP if mmap() is
+ ?S:	available to map a file into memory.
+ ?S:.
+ ?C:HAS_MMAP:
+ ?C:	This symbol, if defined, indicates that the mmap system call is
+ ?C:	available to map a file into memory.
+ ?C:.
+ ?H:#$d_mmap HAS_MMAP		/**/
+ ?H:.
+ ?LINT:set d_mmap
+ : see if mmap exists
+ set mmap d_mmap
+ eval $inlibc
+ 

Index: mcon/U/maildir.U
Prereq: 3.0
*** mcon/U/maildir.U.old	Wed Dec 15 09:23:00 1993
--- mcon/U/maildir.U	Wed Dec 15 09:23:00 1993
***************
*** 1,4 ****
! ?RCS: $Id: maildir.U,v 3.0 1993/08/18 12:09:09 ram Exp $
  ?RCS:
  ?RCS: Copyright (c) 1991-1993, Raphael Manfredi
  ?RCS: 
--- 1,4 ----
! ?RCS: $Id: maildir.U,v 3.0.1.1 1993/12/15 08:21:56 ram Exp $
  ?RCS:
  ?RCS: Copyright (c) 1991-1993, Raphael Manfredi
  ?RCS: 
***************
*** 9,14 ****
--- 9,17 ----
  ?RCS: of the source tree for dist 3.0.
  ?RCS:
  ?RCS: $Log: maildir.U,v $
+ ?RCS: Revision 3.0.1.1  1993/12/15  08:21:56  ram
+ ?RCS: patch15: now also looks under /var/mail for BSD/386
+ ?RCS:
  ?RCS: Revision 3.0  1993/08/18  12:09:09  ram
  ?RCS: Baseline for dist 3.0 netwide release.
  ?RCS:
***************
*** 26,32 ****
  ?S:.
  : determine where mail is spooled
  case "$maildir" in
! '') dflt=`./loc . /usr/spool/mail /usr/spool/mail /usr/mail`;;
  *) dflt="$maildir";;
  esac
  echo " "
--- 29,35 ----
  ?S:.
  : determine where mail is spooled
  case "$maildir" in
! '') dflt=`./loc . /usr/spool/mail /usr/spool/mail /usr/mail /var/mail`;;
  *) dflt="$maildir";;
  esac
  echo " "

Index: Artistic
*** Artistic.old	Wed Dec 15 09:22:50 1993
--- Artistic	Wed Dec 15 09:22:50 1993
***************
*** 105,111 ****
  Package.
  
  7. You may reuse parts of this Package in your own programs, provided that
! you explicitly state where you got it from, in the source code (and, left
  to your courtesy, in the documentation), duplicating all the associated
  copyright notices and disclaimers. Besides your changes, if any, must be
  clearly marked as such. Parts reused that way will no longer fall under this
--- 105,111 ----
  Package.
  
  7. You may reuse parts of this Package in your own programs, provided that
! you explicitly state where you got them from, in the source code (and, left
  to your courtesy, in the documentation), duplicating all the associated
  copyright notices and disclaimers. Besides your changes, if any, must be
  clearly marked as such. Parts reused that way will no longer fall under this

Index: README
*** README.old	Wed Dec 15 09:22:53 1993
--- README	Wed Dec 15 09:22:53 1993
***************
*** 6,12 ****
  
  ------------------------------------------------------------------------
      This program is free software; you can redistribute it and/or modify
!     it under the terms of the Artistic Licence, a copy of which can be
      found with this package.
  
      This program is distributed in the hope that it will be useful,
--- 6,12 ----
  
  ------------------------------------------------------------------------
      This program is free software; you can redistribute it and/or modify
!     it under the terms of the Artistic License, a copy of which can be
      found with this package.
  
      This program is distributed in the hope that it will be useful,

*** End of Patch 15 ***

exit 0 # Just in case...
