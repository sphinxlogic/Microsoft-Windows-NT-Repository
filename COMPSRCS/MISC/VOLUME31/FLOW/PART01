Newsgroups: comp.sources.misc
From: julian@vscn08.cern.ch (Julian James Bunn)
Subject:  v31i064:  flow - Fortran Structure Analysers, Part01/05
Message-ID: <csm-v31i064=flow.002441@sparky.IMD.Sterling.COM>
X-Md4-Signature: b2dfa37f659dad204ef43c4a3d0ae16b
Date: Fri, 31 Jul 1992 05:25:41 GMT
Approved: kent@sparky.imd.sterling.com

Submitted-by: julian@vscn08.cern.ch (Julian James Bunn)
Posting-number: Volume 31, Issue 64
Archive-name: flow/part01
Environment: fortran, ffccc

The Flow program is a companion to Floppy, posted to comp.sources.misc in
Volume 12. With Floppy, it allows the user to produce various reports on the
structure of Fortran 77 code, such as flow diagrams and common block tables.

This posting includes files for installation on VMS, Unix and CMS operating
systems. The Readme file should be consulted for further details.

One MUST have Floppy installed before Flow can be used. Floppy was called
ffccc in Volume 12.
 -------------------------------------------------------------------------------
 Julian James Bunn / CERN Computing and Networks Division. Tel.: Geneva 767 5029
 Email: julian@vxcrna.cxern.ch
 -------------------------------------------------------------------------------
[ Moderator note: ]
[ v12i087-97   ffccc/part[01-11]   Floppy - Fortran Coding Convention Checker 
[
[ The required ffccc is available via FTP from any comp.sources.misc archives.
[ If you do not have access to the archives via FTP, send the following as
[ the body of a mail message to netlib@uunet.uu.net or uunet!netlib.
[
[ send volume12/ffccc/part01 from comp.sources.misc
[ send volume12/ffccc/part02 from comp.sources.misc
[ send volume12/ffccc/part03r from comp.sources.misc
[ send volume12/ffccc/part04 from comp.sources.misc
[ send volume12/ffccc/part05 from comp.sources.misc
[ send volume12/ffccc/part06 from comp.sources.misc
[ send volume12/ffccc/part07 from comp.sources.misc
[ send volume12/ffccc/part08 from comp.sources.misc
[ send volume12/ffccc/part09 from comp.sources.misc
[ send volume12/ffccc/part10 from comp.sources.misc
[ send volume12/ffccc/part11 from comp.sources.misc
[
---------------------------------------------------------------------------
#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# Contents:  floppy.ps.a makefile
# Wrapped by kent@sparky on Thu Jul 30 23:38:13 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 1 (of 5)."'
if test -f 'floppy.ps.a' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'floppy.ps.a'\"
else
  echo shar: Extracting \"'floppy.ps.a'\" \(50105 characters\)
  sed "s/^X//" >'floppy.ps.a' <<'END_OF_FILE'
X %!PS-Adobe-1.0
X
X %%Creator:  ***** POSTS VERSION 86.1 *****
X
X %%Title: POSTS: Waterloo SCRIPT 86.1 (87FEB11) 11:34:18 July 28, 1992
X
X %%CreationDate: 11:34:23 July 28, 1992
X
X %%Pages: (atend)
X
X %%BoundingBox: (atend)
X
X %%DocumentFonts: Courier Times-Bold Times-Italic Symbol Times-Roman
X
X %%EndComments
X
X /jobobj save def() pop
X /#copies 1 def
X /$blnkadj 0 def
X /$blnkwid 0 def
X /@bwset { $blnkwid (\040) stringwidth pop sub /$blnkadj exch def } bind def
X /@bw { /$blnkwid exch def @bwset $blnkadj 0 8#40 } bind def
X /@bw40 {$blnkadj 0 8#40} bind def
X /@ws {widthshow} bind def
X /@m {moveto} bind def
X /reencsmalldict 24 dict def
X /ReEncodeSmall
X   { reencsmalldict begin
X     /newcodesandnames exch def
X     /newfontname exch def
X     /basefontname exch def
X     /basefontdict basefontname findfont def
X     /newfont basefontdict maxlength dict def
X     basefontdict
X       { exch dup /FID ne
X           { dup /Encoding eq
X             { exch dup length array copy
X                 newfont 3 1 roll put }
X             { exch newfont 3 1 roll put }
X             ifelse }
X           { pop pop }
X           ifelse
X        } forall
X     newfont /FontName newfontname put
X     newcodesandnames aload pop
X     newcodesandnames length 2 idiv
X       { newfont /Encoding get 3 1 roll put }
X       repeat
X     newfontname newfont definefont pop
X     end
X  } def
X /accvec [
X   176 /aacute
X   181 /Aacute
X   190 /Agrave
X   192 /Acircumflex
X   201 /Adieresis
X   204 /Atilde
X   209 /aring
X   210 /Aring
X   211 /ccedilla
X   212 /Ccedilla
X   213 /eacute
X   214 /Eacute
X   215 /Egrave
X   216 /Ecircumflex
X   217 /Edieresis
X   218 /iacute
X   219 /Iacute
X   220 /igrave
X   221 /Igrave
X   222 /icircumflex
X   223 /Icircumflex
X   224 /idieresis
X   226 /Idieresis
X   228 /ntilde
X   229 /Ntilde
X   230 /oacute
X   231 /Oacute
X   236 /Ograve
X   237 /Ocircumflex
X   238 /Odieresis
X   239 /Otilde
X   240 /uacute
X   242 /Uacute
X   243 /Ugrave
X   244 /Ucircumflex
X   246 /Udieresis
X   247 /Ydieresis
X   ] def
X /@rm {rmoveto} bind def
X /@hr {/$hw exch def /$hl exch def currentpoint 2 copy $hw 2.0 div sub 2
X copy newpath moveto exch $hl add exch lineto $hw setlinewidth
X stroke moveto} bind def
X /@vr {/$vw exch def /$vl exch def currentpoint 2 copy exch $vw 2.0 div add
X exch 2 copy newpath moveto $vl sub lineto $vw setlinewidth
X stroke moveto} bind def
X /Courier /Courier-Acc accvec  ReEncodeSmall
X /@f1 {/Courier-Acc findfont exch scalefont setfont @bwset } bind def
X /Times-Bold /Times-Bold-Acc accvec  ReEncodeSmall
X /@f13 {/Times-Bold-Acc findfont exch scalefont setfont @bwset } bind def
X /Times-Italic /Times-Italic-Acc accvec  ReEncodeSmall
X /@f12 {/Times-Italic-Acc findfont exch scalefont setfont @bwset } bind def
X /@f111 {/Symbol findfont exch scalefont setfont @bwset } bind def
X /Times-Roman /Times-Roman-Acc accvec  ReEncodeSmall
X /@f11 {/Times-Roman-Acc findfont exch scalefont setfont @bwset } bind def
X 0 rotate
X 7.2 0 translate
X %% statusdict /manualfeed true put
X
X %%EndProlog
X
X %%Page: ? 1       
X
X /pageobj save def() pop
X 64.8 660 @m 10 @f11 89.289 @bw ( ) @ws 18 @f13 @bw40 (FLOPPY) @ws  9 @bw ( and)
X @ws @bw40 ( FLOW User Guide) @ws 64.8 636 @m 10 @f11 176.796 @bw ( ) @ws
X 18 @f13 @bw40 (VERSION) @ws  9 @bw ( 6) @ws 64.8 540 @m 9 @f1 48.6 @bw ( FFFFF)
X @ws @bw40 (FF) @ws  10.8 @bw ( LL) @ws  43.2 @bw ( OOOOOO) @ws  27 @bw ( PPPPP)
X @ws @bw40 (P) @ws  21.6 @bw ( PPPPPP YY YY) @ws 64.8 528 @m 43.2 @bw ( FFFFFFF)
X @ws @bw40 (F) @ws  10.8 @bw ( LL) @ws  37.8 @bw ( OOOOOOOO) @ws  16.2 @bw ( PP)
X @ws @bw40 (PPPPPP) @ws  10.8 @bw ( PPPPPPPP) @ws  16.2 @bw ( YY) @ws
X 21.6 @bw ( YY) @ws 64.8 516 @m 43.2 @bw ( FF LL) @ws  37.8 @bw ( OO) @ws
X 21.6 @bw ( OO) @ws  16.2 @bw ( PP) @ws  21.6 @bw ( PP) @ws  10.8 @bw ( PP) @ws
X 21.6 @bw ( PP) @ws  16.2 @bw ( YY) @ws  21.6 @bw ( YY) @ws 64.8 504 @m
X 43.2 @bw ( FFFFFF) @ws  21.6 @bw ( LL) @ws  37.8 @bw ( OO) @ws  21.6 @bw ( OO)
X @ws  16.2 @bw ( PP) @ws  21.6 @bw ( PP) @ws  10.8 @bw ( PP) @ws  21.6 @bw ( PP)
X @ws @bw40 ( YY) @ws  10.8 @bw ( YY) @ws 64.8 492 @m 43.2 @bw ( FFFFFF) @ws
X 21.6 @bw ( LL) @ws  37.8 @bw ( OO) @ws  21.6 @bw ( OO) @ws  16.2 @bw ( PPPPPPP)
X @ws @bw40 (P) @ws  10.8 @bw ( PPPPPPPP) @ws  27 @bw ( YYYY) @ws 64.8 480 @m
X 43.2 @bw ( FF LL) @ws  37.8 @bw ( OO) @ws  21.6 @bw ( OO) @ws  16.2 @bw ( PPPP)
X @ws @bw40 (PPP PPPPPPP) @ws  37.8 @bw ( YY) @ws 64.8 468 @m 43.2 @bw ( FF LL)
X @ws  37.8 @bw ( OO) @ws  21.6 @bw ( OO) @ws  16.2 @bw ( PP) @ws  43.2 @bw ( PP)
X @ws  64.8 @bw ( YY) @ws 64.8 456 @m 43.2 @bw ( FF LL) @ws  37.8 @bw ( OO) @ws
X 21.6 @bw ( OO) @ws  16.2 @bw ( PP) @ws  43.2 @bw ( PP) @ws  64.8 @bw ( YY) @ws
X 64.8 444 @m 43.2 @bw ( FF LLLLLL) @ws  16.2 @bw ( OOOOOOOO PP) @ws
X 43.2 @bw ( PP) @ws  64.8 @bw ( YY) @ws 64.8 432 @m 43.2 @bw ( FF) @ws
X 48.6 @bw ( LLLLLL) @ws  16.2 @bw ( OOOOOO) @ws  21.6 @bw ( PP) @ws
X 43.2 @bw ( PP) @ws  64.8 @bw ( YY) @ws 64.8 396 @m 10 @f11 90.14 @bw ( F) @ws
X 10 @bw ( L O P P Y \261 CODING) @ws  5 @bw ( CONVENTION CHECKER) @ws
X 64.8 360 @m 124.02 @bw ( F) @ws  10 @bw ( L O W \261 STRUCTURE) @ws  5 @bw ( A)
X @ws @bw40 (NALYSERS) @ws 64.8 336 @m 9 @f1 67.5 @bw ( !!!) @ws  5.4 @bw ( WARN)
X @ws @bw40 (ING ... CODING CONVENTIONS MAY IMPROVE YOUR FORTRAN) @ws 64.8 312 @m
X 10 @f11 118.62 @bw ( VERSION) @ws  5 @bw ( 6.00 \(May 1990\) \(Unix support ad)
X @ws @bw40 (ded\)) @ws 64.8 276 @m 199.715 @bw ( July) @ws  5 @bw ( 28, 1992)
X @ws 64.8 240 @m 139.015 @bw ( ********) @ws  20 @bw ( Sixth) @ws  5 @bw ( Edit)
X @ws @bw40 (ion) @ws  20 @bw ( ********) @ws 64.8 216 @m 132.075 @bw ( ********)
X @ws  35 @bw ( J.J.) @ws  5 @bw ( Bunn) @ws  35 @bw ( ********) @ws 64.8 180 @m
X 188.185 @bw ( CERN/DD/US/112) @ws 67.9 606.5 @m 447.4 1 @hr 67.9 606.5 @m
X 457 1 @vr 514.3 606.5 @m 457 1 @vr 82.3 582.5 @m 418.6 1 @hr 82.3 582.5 @m
X 409 1 @vr 499.9 582.5 @m 409 1 @vr 82.3 174.5 @m 418.6 1 @hr 67.9 150.5 @m
X 447.4 1 @hr
X showpage pageobj restore
X %%Page: ? 2       
X
X /pageobj save def() pop
X 64.8 744 @m 10 @f11 @bw40 (FLOPPY) @ws  5 @bw ( and FLOW User Guide) @ws
X 280.84 @bw ( page) @ws  5 @bw ( ii) @ws 64.8 732 @m 10 @f111 @bw40 (\276\276)
X @ws @bw40 (\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276)
X @ws @bw40 (\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276)
X @ws @bw40 (\276\276\276\276\276\276\276\276\276\276\276) @ws 10 @f11
X 3.6 @bw ( ) @ws 64.8 696 @m 12 @f11 206.802 @bw ( ) @ws 12 @f13 @bw40 (Content)
X @ws @bw40 (s) @ws 64.8 648 @m 10 @f13 @bw40 (Chapter) @ws  5 @bw ( 1:) @ws
X 10 @f11 8.72 @bw ( ) @ws 10 @f13 @bw40 (Introduction) @ws 10 @f11 7.95 @bw ( .)
X @ws  5 @bw ( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .)
X @ws @bw40 ( . . . . . . . . .) @ws  11.1 @bw ( ) @ws 10 @f13 @bw40 (1) @ws
X 64.8 612 @m @bw40 (Chapter) @ws  5 @bw ( 2:) @ws 10 @f11 8.72 @bw ( ) @ws
X 10 @f13 @bw40 (FLOPPY) @ws 10 @f11 7.4 @bw ( .) @ws  5 @bw ( . . . . . . . . .)
X @ws @bw40 ( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )
X @ws @bw40 (. .) @ws  11.1 @bw ( ) @ws 10 @f13 @bw40 (1) @ws 64.8 588 @m 10 @f11
X 21.6 @bw ( 2.1) @ws  10 @bw ( Warnings) @ws  5 @bw ( from FLOPPY) @ws
X 7.85 @bw ( .) @ws  5 @bw ( . . . . . . . . . . . . . . . . . . . . . . . . . .)
X @ws @bw40 ( . . . . . . . . . . .) @ws  11.1 @bw ( 2) @ws 64.8 576 @m
X 21.6 @bw ( 2.2) @ws  10 @bw ( Conventions) @ws  5 @bw ( that may be checked by)
X @ws @bw40 ( FLOPPY) @ws  8.69 @bw ( .) @ws  5 @bw ( . . . . . . . . . . . . . )
X @ws @bw40 (. . . . . . . . . . .) @ws  11.1 @bw ( 2) @ws 64.8 564 @m
X 21.6 @bw ( 2.3) @ws  10 @bw ( Names) @ws  5 @bw ( to Ignore) @ws  11.75 @bw ( )
X @ws @bw40 (.) @ws  5 @bw ( . . . . . . . . . . . . . . . . . . . . . . . . . .)
X @ws @bw40 ( . . . . . . . . . . . . . . .) @ws  11.1 @bw ( 3) @ws 64.8 552 @m
X 21.6 @bw ( 2.4) @ws  10 @bw ( Special) @ws  5 @bw ( Processes) @ws
X 10.08 @bw ( .) @ws  5 @bw ( . . . . . . . . . . . . . . . . . . . . . . . . . )
X @ws @bw40 (. . . . . . . . . . . . . . . .) @ws  11.1 @bw ( 4) @ws 64.8 540 @m
X 21.6 @bw ( 2.5) @ws  10 @bw ( Tidying) @ws  5 @bw ( your FORTRAN) @ws
X 6.73 @bw ( .) @ws  5 @bw ( . . . . . . . . . . . . . . . . . . . . . . . . . .)
X @ws @bw40 ( . . . . . . . . . . .) @ws  11.1 @bw ( 4) @ws 64.8 528 @m
X 21.6 @bw ( 2.6) @ws  10 @bw ( FLOPPY) @ws  5 @bw ( on VAX/VMS) @ws
X 10.06 @bw ( .) @ws  5 @bw ( . . . . . . . . . . . . . . . . . . . . . . . . . )
X @ws @bw40 (. . . . . . . . . . . .) @ws  11.1 @bw ( 5) @ws 64.8 516 @m
X 43.2 @bw ( 2.6.1) @ws  10 @bw ( VAX/VMS) @ws  5 @bw ( FLOPPY examples) @ws
X 5.69 @bw ( .) @ws  5 @bw ( . . . . . . . . . . . . . . . . . . . . . . . . . .)
X @ws @bw40 ( . . . .) @ws  11.1 @bw ( 5) @ws 64.8 504 @m 21.6 @bw ( 2.7) @ws
X 10 @bw ( FLOPPY) @ws  5 @bw ( on IBM/CMS) @ws  5.88 @bw ( .) @ws  5 @bw ( . . )
X @ws @bw40 (. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .)
X @ws @bw40 ( . .) @ws  11.1 @bw ( 6) @ws 64.8 492 @m 21.6 @bw ( 2.8) @ws
X 10 @bw ( FLOPPY) @ws  5 @bw ( on Unix) @ws  6.17 @bw ( .) @ws  5 @bw ( . . . .)
X @ws @bw40 ( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )
X @ws @bw40 (. . . .) @ws  11.1 @bw ( 7) @ws 64.8 480 @m 21.6 @bw ( 2.9) @ws
X 10 @bw ( The) @ws  5 @bw ( meaning of the FLOPPY Qualifiers/Options) @ws
X 11.19 @bw ( .) @ws  5 @bw ( . . . . . . . . . . . . . . . . . . . . . . .) @ws
X 11.1 @bw ( 8) @ws 64.8 444 @m 10 @f13 @bw40 (Chapter) @ws  5 @bw ( 3:) @ws
X 10 @f11 8.72 @bw ( ) @ws 10 @f13 @bw40 (Summary) @ws  5 @bw ( of Files produce)
X @ws @bw40 (d by a FLOPPY run) @ws 10 @f11 10.17 @bw ( .) @ws  5 @bw ( . . . . )
X @ws @bw40 (. . . . . . . . . . . . . . . .) @ws  6.1 @bw ( ) @ws 10 @f13
X @bw40 (10) @ws 64.8 408 @m @bw40 (Chapter) @ws  5 @bw ( 4:) @ws 10 @f11
X 8.72 @bw ( ) @ws 10 @f13 @bw40 (FLOW) @ws  5 @bw ( output) @ws 10 @f11
X 6 @bw ( .) @ws  5 @bw ( . . . . . . . . . . . . . . . . . . . . . . . . . . . )
X @ws @bw40 (. . . . . . . . . . . . . .) @ws  6.1 @bw ( ) @ws 10 @f13
X @bw40 (10) @ws 64.8 384 @m 10 @f11 21.6 @bw ( 4.1) @ws  10 @bw ( FLOW) @ws
X 5 @bw ( on VAX/VMS) @ws  11.46 @bw ( .) @ws  5 @bw ( . . . . . . . . . . . . .)
X @ws @bw40 ( . . . . . . . . . . . . . . . . . . . . . . . . .) @ws  6.1 @bw ( )
X @ws @bw40 (13) @ws 64.8 372 @m 21.6 @bw ( 4.2) @ws  10 @bw ( Examples) @ws
X 5 @bw ( of VAX/VMS FLOW commands) @ws  10.36 @bw ( .) @ws  5 @bw ( . . . . . .)
X @ws @bw40 ( . . . . . . . . . . . . . . . . . . . .) @ws  6.1 @bw ( 13) @ws
X 64.8 360 @m 21.6 @bw ( 4.3) @ws  10 @bw ( FLOW) @ws  5 @bw ( on CERNVM) @ws
X 7.29 @bw ( .) @ws  5 @bw ( . . . . . . . . . . . . . . . . . . . . . . . . . .)
X @ws @bw40 ( . . . . . . . . . . . . .) @ws  6.1 @bw ( 14) @ws 64.8 324 @m
X 10 @f13 @bw40 (Chapter) @ws  5 @bw ( 5:) @ws 10 @f11 8.72 @bw ( ) @ws 10 @f13
X @bw40 (The) @ws  5 @bw ( meaning of the FLOW Qualifiers/Options) @ws 10 @f11
X 9.88 @bw ( .) @ws  5 @bw ( . . . . . . . . . . . . . . . . . . . . .) @ws
X 6.1 @bw ( ) @ws 10 @f13 @bw40 (15) @ws 64.8 288 @m @bw40 (Chapter) @ws
X 5 @bw ( 6:) @ws 10 @f11 8.72 @bw ( ) @ws 10 @f13 @bw40 (Problems) @ws
X 5 @bw ( and Installation) @ws 10 @f11 6.83 @bw ( .) @ws  5 @bw ( . . . . . . .)
X @ws @bw40 ( . . . . . . . . . . . . . . . . . . . . . . . . . . .) @ws
X 6.1 @bw ( ) @ws 10 @f13 @bw40 (16) @ws 64.8 252 @m 5 @bw ( Acknowledgments) @ws
X 10 @f11 6.67 @bw ( .) @ws  5 @bw ( . . . . . . . . . . . . . . . . . . . . . .)
X @ws @bw40 ( . . . . . . . . . . . . . . . . . . . . . . . .) @ws  6.1 @bw ( )
X @ws 10 @f13 @bw40 (17) @ws 64.8 228 @m 5 @bw ( Index) @ws 10 @f11 8.05 @bw ( .)
X @ws  5 @bw ( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .)
X @ws @bw40 ( . . . . . . . . . . . . . . . . . . . .) @ws  6.1 @bw ( ) @ws
X 10 @f13 @bw40 (18) @ws
X showpage pageobj restore
X %%Page: ? 3       
X
X /pageobj save def() pop
X 64.8 744 @m 10 @f11 @bw40 (FLOPPY) @ws  5 @bw ( and FLOW User Guide) @ws
X 281.4 @bw ( page) @ws  5 @bw ( 1) @ws 64.8 732 @m 10 @f111 @bw40 (\276\276\276)
X @ws @bw40 (\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276)
X @ws @bw40 (\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276)
X @ws @bw40 (\276\276\276\276\276\276\276\276\276\276) @ws 10 @f11 3.6 @bw ( )
X @ws 64.8 696 @m 12 @f11 199.47 @bw ( ) @ws 12 @f13 @bw40 (Chapter) @ws
X 6 @bw ( 1) @ws 64.8 672 @m 10 @f11 194.13 @bw ( ) @ws 12 @f13 @bw40 (Introduct)
X @ws @bw40 (ion) @ws 64.8 636 @m 10 @f11 @bw40 (This) @ws  9.017 @bw ( document)
X @ws @bw40 ( describes the use) @ws  9.018 @bw ( of FLOPPY and FLOW on the VAX/)
X @ws @bw40 (VMS, IBM/CMS and) @ws 64.8 624 @m @bw40 (MIPS/Ultrix) @ws
X 5.481 @bw ( machines in the CERN Computer Centre.) @ws  10.481 @bw ( FLOPPY)
X @ws  5.481 @bw ( is a software) @ws  5.482 @bw ( tool that takes as input) @ws
X 64.8 612 @m @bw40 (a) @ws  5.275 @bw ( file of FORTRAN code and then checks it)
X @ws @bw40 ( according to various "coding conventions" that have been) @ws
X 64.8 600 @m @bw40 (defined.) @ws  5.384 @bw ( It can also "tidy" the) @ws
X 5.385 @bw ( source FORTRAN, producing a new file with indented DO\261loops, bl)
X @ws @bw40 (ock) @ws 64.8 588 @m @bw40 (IF\261s,) @ws  5.394 @bw ( and so on.)
X @ws  10.394 @bw ( In) @ws  5.394 @bw ( addition,) @ws  5.395 @bw ( FLOPPY can )
X @ws @bw40 (be asked to write a binary summary file \(which describes) @ws
X 64.8 576 @m @bw40 (the) @ws  5.035 @bw ( structure of the source FORTRAN\) tha)
X @ws @bw40 (t may then be used as input) @ws  5.036 @bw ( to the FLOW program.)
X @ws  10.036 @bw ( FLOW) @ws 64.8 564 @m @bw40 (is) @ws  5 @bw ( now also avail)
X @ws @bw40 (able for Unix.) @ws 64.8 540 @m @bw40 (The) @ws  5.096 @bw ( FLOW p)
X @ws @bw40 (rogram takes the binary summary file produced by FLOPPY, and, accor)
X @ws @bw40 (ding to the wishes) @ws 64.8 528 @m @bw40 (of) @ws  5 @bw ( the use)
X @ws @bw40 (r, produces various reports on the structure of the original FORTRA)
X @ws @bw40 (N program.) @ws 64.8 504 @m @bw40 (In summary, FLOPPY) @ws
X 64.8 480 @m 10 @f111 @bw40 (\247) @ws 10 @f11 21.27 @bw ( checks) @ws
X 5 @bw ( FORTRAN coding conventions,) @ws 64.8 468 @m 10 @f111 @bw40 (\247) @ws
X 10 @f11 21.27 @bw ( "tidies") @ws  5 @bw ( FORTRAN source,) @ws 64.8 456 @m
X 10 @f111 @bw40 (\247) @ws 10 @f11 21.27 @bw ( produces) @ws  5 @bw ( a summary)
X @ws @bw40 ( file for FLOW.) @ws 64.8 432 @m @bw40 (And the FLOW program) @ws
X 64.8 408 @m 10 @f111 @bw40 (\247) @ws 10 @f11 21.27 @bw ( produces) @ws
X 5 @bw ( various reports on the structure of FORTRAN code,) @ws 64.8 396 @m
X 10 @f111 @bw40 (\247) @ws 10 @f11 21.27 @bw ( allows) @ws  5 @bw ( an interact)
X @ws @bw40 (ive exploration of the structure,) @ws 64.8 384 @m 10 @f111
X @bw40 (\247) @ws 10 @f11 21.27 @bw ( shows) @ws  5 @bw ( COMMON block variable)
X @ws @bw40 ( usage.) @ws 64.8 360 @m @bw40 (Please note that FLOPPY is based on)
X @ws @bw40 ( FLOP) @ws 0 3 @rm  8 @f11 @bw40 (1) @ws 0 -3 @rm  10 @f11
X @bw40 ( \(FORTRAN Language Orientated Parser\).) @ws 64.8 312 @m 12 @f11
X 199.47 @bw ( ) @ws 12 @f13 @bw40 (Chapter) @ws  6 @bw ( 2) @ws 64.8 288 @m
X 10 @f11 202.8 @bw ( ) @ws 12 @f13 @bw40 (FLOPPY) @ws 64.8 252 @m 10 @f11
X @bw40 (Have) @ws  5.502 @bw ( you ever wondered whether the FORTRAN77 code you)
X @ws @bw40 ( are writing conforms to) @ws  5.503 @bw ( accepted coding) @ws
X 64.8 240 @m @bw40 (conventions) @ws  5.911 @bw ( ?) @ws  10.911 @bw ( Even) @ws
X  5.911 @bw ( if not, you may still be interested in using FLOPPY to see if it)
X @ws  5.912 @bw ( does.) @ws  10.912 @bw ( Before) @ws 64.8 228 @m @bw40 (using)
X @ws  6.43 @bw ( FLOPPY to check your) @ws  6.431 @bw ( FORTRAN, you should com)
X @ws @bw40 (pile the source form \(preferably with the) @ws 64.8 216 @m
X @bw40 (ANSI) @ws  6.012 @bw ( switch enabled\), and verify that there are no)
X @ws  6.013 @bw ( compilation errors.) @ws  11.013 @bw ( If) @ws  6.013 @bw ( t)
X @ws @bw40 (here are, then the results) @ws 64.8 204 @m @bw40 (from) @ws
X 8.333 @bw ( using FLOPPY will be unreliable.) @ws  13.333 @bw ( FLOPPY) @ws
X 8.333 @bw ( treats illegal) @ws  8.334 @bw ( FORTRAN statements \(such as) @ws
X 64.8 192 @m @bw40 ('INCLUDE') @ws  6.897 @bw ( and HISTORIAN directives\) as c)
X @ws @bw40 (omments, and will ignore) @ws  6.898 @bw ( them completely.) @ws
X 11.898 @bw ( FLOPPY) @ws 64.8 180 @m @bw40 (processes) @ws  5.519 @bw ( the FO)
X @ws @bw40 (RTRAN routine by routine and statement by statement.) @ws
X 10.519 @bw ( When) @ws  5.52 @bw ( all routines have been) @ws 64.8 168 @m
X @bw40 (processed,) @ws  5.384 @bw ( various global checks are made \(e.g. for )
X @ws @bw40 (EXTERNAL functions that) @ws  5.385 @bw ( are not declared\).) @ws
X 10.385 @bw ( One) @ws 64.8 156 @m @bw40 (useful) @ws  5.921 @bw ( by\261produc)
X @ws @bw40 (t of this treatment is the) @ws  5.922 @bw ( identification of COMM)
X @ws @bw40 (ON blocks declared in subprograms) @ws 64.8 144 @m @bw40 (where) @ws
X  5.09 @bw ( they are not used.) @ws  10.09 @bw ( FLOPPY) @ws  5.09 @bw ( is)
X @ws  5.091 @bw ( quite quick, particularly for short programs where the number)
X @ws @bw40 ( of) @ws 64.8 132 @m @bw40 (checks) @ws  5.299 @bw ( is disproporti)
X @ws @bw40 (onately smaller than for larger ones.) @ws  10.299 @bw ( It) @ws
X 5.299 @bw ( is recommended) @ws  5.3 @bw ( to use FLOPPY for short) @ws
X 64.8 120 @m @bw40 (programs,) @ws  5.004 @bw ( early on in the development cyc)
X @ws @bw40 (le, rather than submit very) @ws  5.005 @bw ( large programs later.)
X @ws  10.005 @bw ( In) @ws  5.005 @bw ( this way) @ws 64.8 108 @m @bw40 (the)
X @ws  5.85 @bw ( number of corrections that will need to be made) @ws
X 5.851 @bw ( at any time will be smaller, and thus easier to) @ws 64.8 96 @m
X @bw40 (come) @ws  5 @bw ( to terms with!) @ws 64.8 36 @m 10 @f111 @bw40 (\276)
X @ws @bw40 (\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276)
X @ws @bw40 (\276\276\276\276) @ws 64.8 12 @m 0 3 @rm  8 @f11 @bw40 (1) @ws
X 0 -3 @rm  10.4 @bw ( H.Grote) @ws  4 @bw ( "FLOP User's Guide and Reference Ma)
X @ws @bw40 (nual", DD/US/13 \(1985\)) @ws
X showpage pageobj restore
X %%Page: ? 4       
X
X /pageobj save def() pop
X 64.8 744 @m 10 @f11 @bw40 (FLOPPY) @ws  5 @bw ( and FLOW User Guide) @ws
X 281.4 @bw ( page) @ws  5 @bw ( 2) @ws 64.8 732 @m 10 @f111 @bw40 (\276\276\276)
X @ws @bw40 (\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276)
X @ws @bw40 (\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276)
X @ws @bw40 (\276\276\276\276\276\276\276\276\276\276) @ws 10 @f11 3.6 @bw ( )
X @ws 64.8 696 @m 12 @f13 @bw40 (2.1) @ws  6 @bw ( Warnings from FLOPPY) @ws
X 64.8 672 @m 10 @f11 @bw40 (When) @ws  5.556 @bw ( a FORTRAN statement which do)
X @ws @bw40 (es) @ws  5.557 @bw ( not conform to the conventions is identified b)
X @ws @bw40 (y FLOPPY, a) @ws 64.8 660 @m @bw40 (warning) @ws  5.182 @bw ( messa)
X @ws @bw40 (ge is printed describing the error, together with the offending sta)
X @ws @bw40 (tement.) @ws  10.182 @bw ( Figure) @ws  5.183 @bw ( 1 shows) @ws
X 64.8 648 @m @bw40 (some) @ws  5 @bw ( warnings generated by FLOPPY.) @ws
X 64.8 576 @m 9 @f1 27 @bw ( !!!) @ws  5.4 @bw ( WARNING ... NOT ENOUGH \(<3\) C)
X @ws @bw40 (OMMENT LINES AT START OF MODULE) @ws 64.8 552 @m 54 @bw ( 8.) @ws
X 37.8 @bw ( IF\(IF\(L\).EQ.1\)) @ws  5.4 @bw ( GOTO66) @ws 64.8 540 @m
X 27 @bw ( !!!) @ws  5.4 @bw ( STATEMENT HAS NO BLANK AFTER "GOTO") @ws
X 64.8 516 @m 48.6 @bw ( 16.) @ws  37.8 @bw ( WRITE\(*,21\)) @ws  5.4 @bw ( J)
X @ws 64.8 504 @m 27 @bw ( !!!) @ws  5.4 @bw ( STATEMENT SHOULD NOT HAVE LUN=*)
X @ws 64.8 480 @m 48.6 @bw ( 21.) @ws  37.8 @bw ( STOP) @ws 64.8 468 @m
X 27 @bw ( !!!) @ws  5.4 @bw ( STATEMENT SHOULD BE PRECEDED BY A "WRITE") @ws
X 64.8 444 @m 48.6 @bw ( 22.) @ws  10.8 @bw ( 999 END) @ws 64.8 432 @m 27 @bw ( )
X @ws @bw40 (!!!) @ws  5.4 @bw ( STATEMENT SHOULD NOT HAVE LABEL) @ws 64.8 408 @m
X 27 @bw ( !!!) @ws  16.2 @bw ( 5) @ws  5.4 @bw ( STATEMENT WARNING\(S\) IN THIS)
X @ws @bw40 ( MODULE) @ws 64.8 384 @m 27 @bw ( BEGIN) @ws  5.4 @bw ( GLOBAL CHEC)
X @ws @bw40 (KS WITHIN THIS MODULE) @ws 64.8 360 @m 27 @bw ( !!!) @ws
X 5.4 @bw ( MIXED MODE EXPRESSION \(BAD OPERATOR IS MARKED\)) @ws 64.8 348 @m
X 27 @bw ( IF\(I*2.0\)) @ws  5.4 @bw ( = 3) @ws 64.8 336 @m 48.6 @bw ( ) @ws
X 9 @f111 @bw40 (\264) @ws 64.8 324 @m 9 @f1 27 @bw ( !!!) @ws  5.4 @bw ( WARNIN)
X @ws @bw40 (G ... VARIABLE IF) @ws  37.8 @bw ( CLASHES) @ws  5.4 @bw ( WITH FOR)
X @ws @bw40 (TRAN KEY\261WORD IF) @ws 64.8 300 @m 27 @bw ( !!!) @ws  16.2 @bw ( )
X @ws @bw40 (2) @ws  5.4 @bw ( GLOBAL WARNING\(S\) IN THIS MODULE) @ws
X 64.8 276 @m 10 @f11 21.6 @bw ( ) @ws 10 @f12 @bw40 (Figure) @ws  5 @bw ( 1) @ws
X 10 @f11 @bw40 (:) @ws  24.8 @bw ( Warnings) @ws  5 @bw ( produced by FLOPPY)
X @ws 64.8 216 @m @bw40 (By) @ws  5.296 @bw ( default, only the statements at fa)
X @ws @bw40 (ult are printed, but optionally you may) @ws  5.297 @bw ( specify t)
X @ws @bw40 (hat all FORTRAN) @ws 64.8 204 @m @bw40 (statements) @ws
X 5.715 @bw ( are printed out \(this is useful) @ws  5.716 @bw ( for programs wh)
X @ws @bw40 (ere the context of the statement may clarify) @ws 64.8 192 @m
X @bw40 (the) @ws  6.035 @bw ( error\).) @ws  11.035 @bw ( FLOPPY) @ws
X 6.035 @bw ( will only) @ws  6.036 @bw ( print subprogram headers for those sub)
X @ws @bw40 (programs in which errors have) @ws 64.8 180 @m @bw40 (occured.) @ws
X 10.001 @bw ( All) @ws  5.001 @bw ( output) @ws  5.002 @bw ( from FLOPPY may ei)
X @ws @bw40 (ther be viewed directly at the terminal or, optionally, sent to) @ws
X 64.8 168 @m @bw40 (a) @ws  5 @bw ( disk file for inspection at a later time.)
X @ws 64.8 132 @m 12 @f13 @bw40 (2.2) @ws  6 @bw ( Conventions that may be check)
X @ws @bw40 (ed by FLOPPY) @ws 64.8 108 @m 10 @f11 @bw40 (Here) @ws
X 7.373 @bw ( follows the list of coding conventions which may at present) @ws
X 7.374 @bw ( be checked by FLOPPY. The) @ws 64.8 96 @m @bw40 (conventions) @ws
X 5 @bw ( in the STANDARD set are marked by an asterisk \(*\).) @ws 64.8 72 @m
X 9 @f1 @bw40 (*) @ws  10.8 @bw ( 1) @ws  16.2 @bw ( Avoid) @ws  5.4 @bw ( comme)
X @ws @bw40 (nt lines after end of module) @ws 64.8 60 @m @bw40 (*) @ws
X 10.8 @bw ( 2) @ws  16.2 @bw ( End) @ws  5.4 @bw ( all program modules with the)
X @ws @bw40 ( END statement) @ws 64.8 48 @m @bw40 (*) @ws  10.8 @bw ( 3) @ws
X 16.2 @bw ( Declared) @ws  5.4 @bw ( COMMON blocks must be used in the module)
X @ws 64.8 36 @m @bw40 (*) @ws  10.8 @bw ( 4) @ws  16.2 @bw ( COMPLEX) @ws
X 5.4 @bw ( and DOUBLEPRECISION vars at end of COMMON) @ws 64.8 24 @m
X @bw40 (*) @ws  10.8 @bw ( 5) @ws  16.2 @bw ( COMMON) @ws  5.4 @bw ( block defi)
X @ws @bw40 (nitions should not change) @ws 64.8 12 @m @bw40 (*) @ws
X 10.8 @bw ( 6) @ws  16.2 @bw ( Variable) @ws  5.4 @bw ( names should be 6 or fe)
X @ws @bw40 (wer characters long) @ws 67.9 618.5 @m 447.4 1 @hr 67.9 618.5 @m
X 361 1 @vr 514.3 618.5 @m 361 1 @vr 67.9 258.5 @m 447.4 1 @hr
X showpage pageobj restore
X %%Page: ? 5       
X
X /pageobj save def() pop
X 64.8 744 @m 10 @f11 @bw40 (FLOPPY) @ws  5 @bw ( and FLOW User Guide) @ws
X 281.4 @bw ( page) @ws  5 @bw ( 3) @ws 64.8 732 @m 10 @f111 @bw40 (\276\276\276)
X @ws @bw40 (\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276)
X @ws @bw40 (\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276)
X @ws @bw40 (\276\276\276\276\276\276\276\276\276\276) @ws 10 @f11 3.6 @bw ( )
X @ws 64.8 696 @m 9 @f1 16.2 @bw ( 7 Variables) @ws  5.4 @bw ( in COMMON should )
X @ws @bw40 (be 6 characters long) @ws 64.8 684 @m 16.2 @bw ( 8 Variables) @ws
X 5.4 @bw ( not in COMMON should be <6 characters) @ws 64.8 672 @m @bw40 (*) @ws
X 10.8 @bw ( 9) @ws  16.2 @bw ( Integer) @ws  5.4 @bw ( variables should begin w)
X @ws @bw40 (ith I to N) @ws 64.8 660 @m @bw40 (*) @ws  10.8 @bw ( 10 Variable)
X @ws  5.4 @bw ( names should not equal FORTRAN keywords) @ws 64.8 648 @m
X @bw40 (*) @ws  10.8 @bw ( 11 Avoid) @ws  5.4 @bw ( comment lines before module)
X @ws @bw40 ( declaration) @ws 64.8 636 @m @bw40 (*) @ws  10.8 @bw ( 12 Module)
X @ws  5.4 @bw ( names should not equal intrinsic functions) @ws 64.8 624 @m
X @bw40 (*) @ws  10.8 @bw ( 13 First) @ws  5.4 @bw ( statement in a module shoul)
X @ws @bw40 (d be declaration) @ws 64.8 612 @m @bw40 (*) @ws  10.8 @bw ( 14 Modu)
X @ws @bw40 (le) @ws  5.4 @bw ( should begin with at least 3 comment lines) @ws
X 64.8 600 @m 16.2 @bw ( 15) @ws  10.8 @bw ( Comment) @ws  5.4 @bw ( lines shoul)
X @ws @bw40 (d begin with a C) @ws 64.8 588 @m @bw40 (*) @ws  10.8 @bw ( 16 No)
X @ws  5.4 @bw ( comment lines between continuations) @ws 64.8 576 @m
X @bw40 (*) @ws  10.8 @bw ( 17 Avoid) @ws  5.4 @bw ( non\261standard variable ty)
X @ws @bw40 (pes eg INTEGER*2) @ws 64.8 564 @m @bw40 (*) @ws  10.8 @bw ( 18 Avoi)
X @ws @bw40 (d) @ws  5.4 @bw ( multiple COMMON definitions per line) @ws
X 64.8 552 @m @bw40 (*) @ws  10.8 @bw ( 19 Do) @ws  5.4 @bw ( not dimension COMM)
X @ws @bw40 (ON variables outside COMMON) @ws 64.8 540 @m @bw40 (*) @ws
X 10.8 @bw ( 20 Avoid) @ws  5.4 @bw ( embedded blanks in variable names) @ws
X 64.8 528 @m @bw40 (*) @ws  10.8 @bw ( 21 Avoid) @ws  5.4 @bw ( embedded blanks)
X @ws @bw40 ( in syntactic entities) @ws 64.8 516 @m @bw40 (*) @ws  10.8 @bw ( 2)
X @ws @bw40 (2 Avoid) @ws  5.4 @bw ( the use of PRINT statements \(use WRITE\))
X @ws 64.8 504 @m 16.2 @bw ( 23) @ws  10.8 @bw ( Do) @ws  5.4 @bw ( not give the)
X @ws @bw40 ( END statement a label) @ws 64.8 492 @m @bw40 (*) @ws  10.8 @bw ( 2)
X @ws @bw40 (4 Avoid) @ws  5.4 @bw ( WRITE\(* construction) @ws 64.8 480 @m
X 16.2 @bw ( 25) @ws  10.8 @bw ( Avoid) @ws  5.4 @bw ( WRITE statement in a FUNC)
X @ws @bw40 (TION) @ws 64.8 468 @m @bw40 (*) @ws  10.8 @bw ( 26 Avoid) @ws
X 5.4 @bw ( the use of PAUSE statements) @ws 64.8 456 @m @bw40 (*) @ws
X 10.8 @bw ( 27 Statement) @ws  5.4 @bw ( labels should not begin in column 1)
X @ws 64.8 444 @m @bw40 (*) @ws  10.8 @bw ( 28 Always) @ws  5.4 @bw ( preceede S)
X @ws @bw40 (TOP by a descriptive WRITE) @ws 64.8 432 @m @bw40 (*) @ws
X 10.8 @bw ( 29 Avoid) @ws  5.4 @bw ( the use of ENTRY in FUNCTIONS) @ws
X 64.8 420 @m @bw40 (*) @ws  10.8 @bw ( 30 Avoid) @ws  5.4 @bw ( using I/O in FU)
X @ws @bw40 (NCTIONs) @ws 64.8 408 @m 16.2 @bw ( 31) @ws  10.8 @bw ( Avoid) @ws
X 5.4 @bw ( the use of the alternate RETURN statement) @ws 64.8 396 @m
X @bw40 (*) @ws  10.8 @bw ( 32 COMMON) @ws  5.4 @bw ( block names should not equ)
X @ws @bw40 (al variable names) @ws 64.8 384 @m @bw40 (*) @ws  10.8 @bw ( 33 Avo)
X @ws @bw40 (id) @ws  5.4 @bw ( use of obsolete CERN library routines) @ws
X 64.8 372 @m 16.2 @bw ( 34) @ws  10.8 @bw ( Avoid) @ws  5.4 @bw ( FUNCTION name)
X @ws @bw40 (s the same as intrinsics) @ws 64.8 360 @m @bw40 (*) @ws
X 10.8 @bw ( 35 Local) @ws  5.4 @bw ( functions should be declared EXTERNAL) @ws
X 64.8 348 @m @bw40 (*) @ws  10.8 @bw ( 36 Module) @ws  5.4 @bw ( names should a)
X @ws @bw40 (ll be different) @ws 64.8 336 @m @bw40 (*) @ws  10.8 @bw ( 37 Avoid)
X @ws  5.4 @bw ( expressions of mixed mode eg A=B/I) @ws 64.8 324 @m @bw40 (*)
X @ws  10.8 @bw ( 38 Length) @ws  5.4 @bw ( of passed CHARACTER variables should)
X @ws @bw40 ( be *) @ws 64.8 312 @m @bw40 (*) @ws  10.8 @bw ( 39 Order) @ws
X 5.4 @bw ( of statements should conform !) @ws 64.8 300 @m @bw40 (*) @ws
X 10.8 @bw ( 40 Separate) @ws  5.4 @bw ( Statement Functions by comment lines)
X @ws 64.8 288 @m @bw40 (*) @ws  10.8 @bw ( 41 No) @ws  5.4 @bw ( names in State)
X @ws @bw40 (ment Function definitions elsewhere) @ws 64.8 276 @m 16.2 @bw ( 42)
X @ws  10.8 @bw ( Use) @ws  5.4 @bw ( LLT,LGT etc to compare CHARACTER vars. in )
X @ws @bw40 (IFs) @ws 64.8 264 @m 16.2 @bw ( 43) @ws  10.8 @bw ( Variables) @ws
X 5.4 @bw ( \(not COMMON, not PARAMs\) <6 characters) @ws 64.8 252 @m
X @bw40 (*) @ws  10.8 @bw ( 44 Passed) @ws  5.4 @bw ( arguments should be dimens)
X @ws @bw40 (ioned * in module) @ws 64.8 216 @m 12 @f13 @bw40 (2.3) @ws
X 6 @bw ( Names to Ignore) @ws 64.8 192 @m 10 @f11 @bw40 (Occasionally) @ws
X 5.71 @bw ( your FORTRAN may) @ws  5.711 @bw ( contain references to subroutine)
X @ws @bw40 (s or variables over which you have) @ws 64.8 180 @m @bw40 (no) @ws
X 6.33 @bw ( control \(e.g. GEANT) @ws  6.331 @bw ( variables\).) @ws
X 11.331 @bw ( The) @ws  6.331 @bw ( warnings associated with these variables or)
X @ws @bw40 ( subroutines are) @ws 64.8 168 @m @bw40 (therefore) @ws
X 6.243 @bw ( rather academic.) @ws  11.244 @bw ( FLOPPY) @ws  6.244 @bw ( thus )
X @ws @bw40 (allows you to suppress the warnings associated with either) @ws
X 64.8 156 @m @bw40 (particular) @ws  5.192 @bw ( variables, or whole subroutine)
X @ws @bw40 (s.) @ws  10.192 @bw ( This) @ws  5.192 @bw ( is done by) @ws
X 5.193 @bw ( giving FLOPPY a list of 'names to ignore') @ws 64.8 144 @m
X @bw40 (\(you) @ws  5.662 @bw ( may specify up to fifty variable names and) @ws
X 5.663 @bw ( fifty subroutine names\).) @ws  10.663 @bw ( The) @ws
X 5.663 @bw ( file containing the list) @ws 64.8 132 @m @bw40 (of) @ws
X 6.946 @bw ( names to ignore is saved on disk, and may be used again in) @ws
X 6.947 @bw ( a future FLOPPY run.) @ws  11.947 @bw ( As) @ws  6.947 @bw ( an)
X @ws 64.8 120 @m @bw40 (example,) @ws  6.711 @bw ( you may have a VMS file) @ws
X 6.712 @bw ( called TEST.FOR which contains various subroutines, amongst) @ws
X 64.8 108 @m @bw40 (them) @ws  5.631 @bw ( SUBROUTINE OPAL, and references) @ws
X 5.632 @bw ( to the 6\261character variables RINPAN and DRIDER, which) @ws
X 64.8 96 @m @bw40 (do) @ws  5.05 @bw ( not appear in a COMMON block and therefo)
X @ws @bw40 (re should be less than 6 characters long \(if you follow) @ws
X 64.8 84 @m @bw40 (this) @ws  6.486 @bw ( particular convention\).) @ws
X 11.486 @bw ( You) @ws  6.486 @bw ( are aware of this error and wish to suppres)
X @ws @bw40 (s those warnings from) @ws 64.8 72 @m @bw40 (FLOPPY.) @ws
X 10.101 @bw ( You) @ws  5.101 @bw ( also want to suppress all warnings from) @ws
X  5.102 @bw ( SUBROUTINE OPAL for other reasons.) @ws  10.102 @bw ( You) @ws
X 64.8 60 @m @bw40 (type) @ws  5 @bw ( the following FLOPPY command:) @ws
X 64.8 36 @m 9 @f1 @bw40 (FLOPPY) @ws  5.4 @bw ( TEST.FOR /IGNORE=\(#OPAL,RINPAN)
X @ws @bw40 (,DRIDER\)) @ws
X showpage pageobj restore
X %%Page: ? 6       
X
X /pageobj save def() pop
X 64.8 744 @m 10 @f11 @bw40 (FLOPPY) @ws  5 @bw ( and FLOW User Guide) @ws
X 281.4 @bw ( page) @ws  5 @bw ( 4) @ws 64.8 732 @m 10 @f111 @bw40 (\276\276\276)
X @ws @bw40 (\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276)
X @ws @bw40 (\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276)
X @ws @bw40 (\276\276\276\276\276\276\276\276\276\276) @ws 10 @f11 3.6 @bw ( )
X @ws 64.8 696 @m @bw40 (The) @ws  7.141 @bw ( process on CERN VM/CMS) @ws
X 7.142 @bw ( is similar; the names may be specified in the panel or on the) @ws
X 64.8 684 @m @bw40 (command) @ws  5 @bw ( line.) @ws 64.8 648 @m 12 @f13
X @bw40 (2.4) @ws  6 @bw ( Special Processes) @ws 64.8 624 @m 10 @f11
X @bw40 (At) @ws  5 @bw ( present there are two 'special processes' available in)
X @ws @bw40 ( FLOPPY.) @ws 64.8 600 @m 10 @f111 @bw40 (\247) @ws 10 @f11
X 21.27 @bw ( The) @ws  5.704 @bw ( process ALEPH will cause the set of coding c)
X @ws @bw40 (onventions to) @ws  5.705 @bw ( change from the STANDARD) @ws
X 64.8 588 @m 28.8 @bw ( set) @ws  5 @bw ( to the ALEPH set.) @ws 64.8 576 @m
X 10 @f111 @bw40 (\247) @ws 10 @f11 21.27 @bw ( The) @ws  5.244 @bw ( process GA)
X @ws @bw40 (LEPH \(the ALEPH Monte) @ws  5.245 @bw ( Carlo program\) is intende)
X @ws @bw40 (d for people using FLOPPY) @ws 64.8 564 @m 28.8 @bw ( to) @ws
X 6.795 @bw ( check programs that reference GEANT3 variables; it essentially cau)
X @ws @bw40 (ses FLOPPY to ignore) @ws 64.8 552 @m 28.8 @bw ( variable) @ws
X 5 @bw ( names beginning 'G.....' or 'IG....'.) @ws 64.8 516 @m 12 @f13
X @bw40 (2.5) @ws  6 @bw ( Tidying your FORTRAN) @ws 64.8 492 @m 10 @f11
X @bw40 (FLOPPY) @ws  5 @bw ( allows you to 'tidy' your FORTRAN in the following)
X @ws @bw40 ( ways:) @ws 64.8 468 @m @bw40 (1.) @ws  35.7 @bw ( ) @ws 10 @f12
X @bw40 (GROUPF) @ws  5 @bw ( \(IBM/CMS,VAX/VMS\) \261F \(UNIX\)) @ws 64.8 456 @m
X 10 @f11 43.2 @bw ( Group) @ws  5 @bw ( all FORMAT statements at the end of eac)
X @ws @bw40 (h subprogram.) @ws 64.8 444 @m @bw40 (2.) @ws  35.7 @bw ( ) @ws
X 10 @f12 @bw40 (INDENT) @ws  5 @bw ( \(IBM/CMS,VAX/VMS\) \261J \(UNIX\)) @ws
X 64.8 432 @m 10 @f11 43.2 @bw ( Indent) @ws  5 @bw ( DO\261loops and IF\261clau)
X @ws @bw40 (ses.) @ws 64.8 420 @m @bw40 (3.) @ws  35.7 @bw ( ) @ws 10 @f12
X @bw40 (GOTOS) @ws  10 @bw ( \(IBM/CMS,VAX/VMS\)) @ws  5 @bw ( \261G \(UNIX\))
X @ws 64.8 408 @m 10 @f11 43.2 @bw ( Tabulate) @ws  5 @bw ( GOTOs to the right h)
X @ws @bw40 (and side of the source form.) @ws 64.8 396 @m @bw40 (4.) @ws
X 35.7 @bw ( ) @ws 10 @f12 @bw40 (STMNTS) @ws  5 @bw ( \(IBM/CMS\) RENUMS \(VAX/)
X @ws @bw40 (VMS\) \261S \(UNIX\)) @ws 64.8 384 @m 10 @f11 43.2 @bw ( Renumber)
X @ws  5 @bw ( all statement labels.) @ws 64.8 372 @m @bw40 (5.) @ws
X 35.7 @bw ( ) @ws 10 @f12 @bw40 (RENUMF) @ws  5 @bw ( \(IBM/CMS\) FORMAT VAX/VM)
X @ws @bw40 (S\) \261R \(UNIX\)) @ws 64.8 360 @m 10 @f11 43.2 @bw ( Renumber) @ws
X  5 @bw ( all FORMAT labels.) @ws 64.8 336 @m @bw40 (In) @ws  6.546 @bw ( the c)
X @ws @bw40 (ase where you choose to use any of these options, a new FORTRAN fil)
X @ws @bw40 (e will) @ws  6.547 @bw ( be written) @ws 64.8 324 @m @bw40 (contain)
X @ws @bw40 (ing) @ws  5 @bw ( the changes.) @ws  10 @bw ( Figure) @ws  5 @bw ( )
X @ws @bw40 (2 shows the result of tidying a small subroutine using FLOP.) @ws
X 64.8 262 @m 7 @f1 46.8 @bw ( Before) @ws  4.2 @bw ( tidying) @ws  109.2 @bw ( )
X @ws @bw40 (After) @ws  4.2 @bw ( tidying) @ws 64.8 255 @m 46.8 @bw ( \261\261)
X @ws @bw40 (\261\261\261\261\261\261\261\261\261\261\261\261) @ws  109.2 @bw ( )
X @ws @bw40 (\261\261\261\261\261\261\261\261\261\261\261\261\261) @ws
X 64.8 241 @m 46.8 @bw ( PROGRAM) @ws  4.2 @bw ( BAD) @ws  121.8 @bw ( PROGRAM)
X @ws  4.2 @bw ( BAD) @ws 64.8 234 @m 46.8 @bw ( DIMENSION) @ws  4.2 @bw ( IF\(1)
X @ws @bw40 (0\)) @ws  100.8 @bw ( DIMENSION) @ws  4.2 @bw ( IF\(10\)) @ws
X 64.8 227 @m 46.8 @bw ( I=5) @ws  155.4 @bw ( I=5) @ws 64.8 220 @m 25.8 @bw ( 6)
X @ws @bw40 (6) @ws  12.6 @bw ( J=7) @ws  142.8 @bw ( 10) @ws  4.2 @bw ( J=7) @ws
X 64.8 213 @m 46.8 @bw ( DO) @ws  4.2 @bw ( 43 K=1,I) @ws  121.8 @bw ( DO) @ws
X 4.2 @bw ( 30 K=1,I) @ws 64.8 206 @m 46.8 @bw ( IF\(K\261J.EQ.2\)) @ws
X 4.2 @bw ( THEN) @ws  109.2 @bw ( IF\(K\261J.EQ.2\)) @ws  4.2 @bw ( THEN) @ws
X 64.8 199 @m 46.8 @bw ( DO) @ws  4.2 @bw ( 11 L=1,2) @ws  147 @bw ( DO) @ws
X 4.2 @bw ( 20 L=1,2) @ws 64.8 192 @m 46.8 @bw ( IF\(IF\(L\).EQ.1\)) @ws
X 4.2 @bw ( GOTO66) @ws  117.6 @bw ( IF\(IF\(L\).EQ.1\)) @ws  67.2 @bw ( GOTO)
X @ws  4.2 @bw ( 10) @ws 64.8 185 @m 30 @bw ( 21) @ws  8.4 @bw ( FORMAT\(1X,I2\))
X @ws  100.8 @bw ( 20) @ws  29.4 @bw ( CONTINUE) @ws 64.8 178 @m 30 @bw ( 11) @ws
X  8.4 @bw ( CONTINUE) @ws  298.2 @bw ( GOTO) @ws  4.2 @bw ( 10) @ws 64.8 171 @m
X 46.8 @bw ( GOTO) @ws  4.2 @bw ( 66) @ws  151.2 @bw ( ELSE) @ws 64.8 164 @m
X 46.8 @bw ( ELSE) @ws  176.4 @bw ( IF\(IF\(K\).EQ.IF\(J\)\)) @ws  4.2 @bw ( THE)
X @ws @bw40 (N) @ws 64.8 157 @m 46.8 @bw ( IF\(IF\(K\).EQ.IF\(J\)\)) @ws
X 4.2 @bw ( THEN) @ws  109.2 @bw ( IF\(K\)=1) @ws 64.8 150 @m 46.8 @bw ( IF\(K\))
X @ws @bw40 (=1) @ws  176.4 @bw ( WRITE\(6,500\)) @ws  4.2 @bw ( J) @ws
X 64.8 143 @m 46.8 @bw ( WRITE\(6,21\)) @ws  4.2 @bw ( J) @ws  151.2 @bw ( J=5)
X @ws 64.8 136 @m 46.8 @bw ( J=5) @ws  180.6 @bw ( ENDIF) @ws 64.8 129 @m
X 46.8 @bw ( ENDIF) @ws  159.6 @bw ( ENDIF) @ws 64.8 122 @m 46.8 @bw ( ENDIF) @ws
X  134.4 @bw ( 30) @ws  4.2 @bw ( CONTINUE) @ws 64.8 115 @m 34.2 @bw ( 43) @ws
X 4.2 @bw ( CONTINUE) @ws  134.4 @bw ( STOP) @ws 64.8 108 @m 46.8 @bw ( STOP) @ws
X  134.4 @bw ( 500) @ws  4.2 @bw ( FORMAT\(1X,I2\)) @ws 64.8 101 @m 46.8 @bw ( E)
X @ws @bw40 (ND) @ws  155.4 @bw ( END) @ws 64.8 77 @m 10 @f11 21.6 @bw ( ) @ws
X 10 @f12 @bw40 (Figure) @ws  5 @bw ( 2) @ws 10 @f11 @bw40 (:) @ws  24.8 @bw ( A)
X @ws  5 @bw ( Subroutine 'tidied' by FLOPPY) @ws 67.9 294.5 @m 447.4 1 @hr
X 67.9 294.5 @m 236 1 @vr 514.3 294.5 @m 236 1 @vr 67.9 59.5 @m 447.4 1 @hr
X showpage pageobj restore
X %%Page: ? 7       
X
X /pageobj save def() pop
X 64.8 744 @m 10 @f11 @bw40 (FLOPPY) @ws  5 @bw ( and FLOW User Guide) @ws
X 281.4 @bw ( page) @ws  5 @bw ( 5) @ws 64.8 732 @m 10 @f111 @bw40 (\276\276\276)
X @ws @bw40 (\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276)
X @ws @bw40 (\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276)
X @ws @bw40 (\276\276\276\276\276\276\276\276\276\276) @ws 10 @f11 3.6 @bw ( )
X @ws 64.8 696 @m 12 @f13 @bw40 (2.6) @ws  6 @bw ( FLOPPY on VAX/VMS) @ws
X 64.8 672 @m 10 @f11 @bw40 (The) @ws  5 @bw ( format of the FLOPPY command on V)
X @ws @bw40 (MS is:) @ws 64.8 648 @m 9 @f1 10.8 @bw ( FLOPPY filename [/qualifie)
X @ws @bw40 (rs]) @ws 64.8 624 @m 10 @f11 @bw40 (Where) @ws  5.244 @bw ( 'filena)
X @ws @bw40 (me' specifies the name of) @ws  5.245 @bw ( the input file of FORTR)
X @ws @bw40 (AN upon which the coding convention) @ws 64.8 612 @m @bw40 (checks)
X @ws  6.485 @bw ( are to be made.) @ws  11.485 @bw ( You) @ws  6.485 @bw ( may )
X @ws @bw40 (use wild\261cards in the filename; if more than one file is found)
X @ws 64.8 600 @m @bw40 (matching) @ws  7.712 @bw ( the specification, then the )
X @ws @bw40 (files will) @ws  7.713 @bw ( be internally concatenated.) @ws
X 12.713 @bw ( Note) @ws  7.713 @bw ( that non\261standard) @ws 64.8 588 @m
X @bw40 (constructs) @ws  5.379 @bw ( such as INCLUDE statements will be treated)
X @ws @bw40 ( as illegal statements) @ws  5.38 @bw ( by FLOPPY, and ignored.) @ws
X 64.8 576 @m @bw40 (If) @ws  5.035 @bw ( you are) @ws  5.036 @bw ( using FLOPPY)
X @ws @bw40 ( to tidy your Fortran \(see /TIDY option\), then 'filename' may be )
X @ws @bw40 (for instance) @ws 64.8 564 @m @bw40 (an) @ws  5.466 @bw ( EDITF.DAT)
X @ws @bw40 ( extracted with HISTORIAN option) @ws  5.467 @bw ( S, or likewise m)
X @ws @bw40 (ay be a file where the COMMON) @ws 64.8 552 @m @bw40 (block) @ws
X 5.677 @bw ( declarations are) @ws  5.678 @bw ( hidden in INCLUDE statements. T)
X @ws @bw40 (his will not jeopardize the indentation of DO) @ws 64.8 540 @m
X @bw40 (loops) @ws  5 @bw ( and IF clauses, nor the re\261numbering of statemen)
X @ws @bw40 (t labels.) @ws 64.8 504 @m 12 @f13 @bw40 (2.6.1) @ws  6 @bw ( VAX/V)
X @ws @bw40 (MS FLOPPY examples) @ws 64.8 480 @m 9 @f1 10.8 @bw ( $) @ws
X 5.4 @bw ( FLOPPY myfile.for) @ws 64.8 456 @m 10 @f11 @bw40 (Make) @ws
X 5 @bw ( all the standard coding convention checks on the FORTRAN file myfile.f)
X @ws @bw40 (or.) @ws 64.8 432 @m 9 @f1 10.8 @bw ( $) @ws  5.4 @bw ( FLOPPY/TREE)
X @ws @bw40 (/NOCHECKS myfile.for) @ws 64.8 408 @m 10 @f11 @bw40 (Produce) @ws
X 5 @bw ( an output file for FLOW, and make no checks.) @ws 64.8 384 @m 9 @f1
X 10.8 @bw ( $) @ws  5.4 @bw ( FLOPPY/IGNORE=\(FRED,#MICHEL\) myfile.for) @ws
X 64.8 360 @m 10 @f11 @bw40 (Make) @ws  5 @bw ( all the available checks, but ig)
X @ws @bw40 (nore the variable called FRED and the subroutine called MICHEL.) @ws
X 64.8 336 @m 9 @f1 10.8 @bw ( $) @ws  5.4 @bw ( FLOPPY/CHECKS=\(1,5,25,3\)/FULL)
X @ws @bw40 ( myfile.for) @ws 64.8 312 @m 10 @f11 @bw40 (Check) @ws  5 @bw ( con)
X @ws @bw40 (ventions 1,3,5 and 25, and list all lines from the source FORTRAN.)
X @ws 64.8 288 @m 9 @f1 10.8 @bw ( $) @ws  5.4 @bw ( FLOPPY/CHECKS=\(99,\2611,)
X @ws @bw40 (\2612,\26120\) my*.for) @ws 64.8 264 @m 10 @f11 @bw40 (Check) @ws
X 6.762 @bw ( all conventions except numbers 1,2 and 20. Use all files beginning)
X @ws @bw40 ( 'MY' and with filetype) @ws 64.8 252 @m @bw40 (.FOR.) @ws
X 64.8 228 @m 9 @f1 10.8 @bw ( $) @ws  5.4 @bw ( FLOPPY/NOLOG/OUT=output.lis) @ws
X  10.8 @bw ( myfile.for) @ws 64.8 204 @m 10 @f11 @bw40 (Send) @ws  5 @bw ( the )
X @ws @bw40 (FLOPPY output to a listing file, and disable the command parsing in)
X @ws @bw40 (formation.) @ws 64.8 180 @m 9 @f1 10.8 @bw ( $) @ws  5.4 @bw ( FLOP)
X @ws @bw40 (PY/NOCHECKS/TIDY/INDENT=2 myfile.for) @ws 64.8 156 @m 10 @f11
X @bw40 (Produce) @ws  7.363 @bw ( a new FORTRAN file) @ws  7.364 @bw ( with all)
X @ws @bw40 ( DO and IF clauses indented by two spaces. No coding) @ws
X 64.8 144 @m @bw40 (convention) @ws  5 @bw ( checking is done. The new Fortran )
X @ws @bw40 (will be called FORTRAN.FOR.) @ws 64.8 120 @m 9 @f1 10.8 @bw ( $) @ws
X  5.4 @bw ( FLOPPY/TIDY/STMNTS=\(START=10,STEP=5\)/FORTRAN=out.for myfile.for)
X @ws 64.8 96 @m 10 @f11 @bw40 (Renumber) @ws  7.675 @bw ( statements starting a)
X @ws @bw40 (t 10 \(10, 15,) @ws  7.676 @bw ( 20 etc.\) and write the new FORTRA)
X @ws @bw40 (N to the file) @ws 64.8 84 @m @bw40 (OUT.FOR.) @ws
X showpage pageobj restore
X %%Page: ? 8       
X
X /pageobj save def() pop
X 64.8 744 @m 10 @f11 @bw40 (FLOPPY) @ws  5 @bw ( and FLOW User Guide) @ws
X 281.4 @bw ( page) @ws  5 @bw ( 6) @ws 64.8 732 @m 10 @f111 @bw40 (\276\276\276)
X @ws @bw40 (\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276)
X @ws @bw40 (\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276)
X @ws @bw40 (\276\276\276\276\276\276\276\276\276\276) @ws 10 @f11 3.6 @bw ( )
X @ws 64.8 696 @m 12 @f13 @bw40 (2.7) @ws  6 @bw ( FLOPPY on IBM/CMS) @ws
X 64.8 672 @m 10 @f11 @bw40 (Type) @ws  5.94 @bw ( "FLOPPY" to activate the prog)
X @ws @bw40 (ram in full screen ) @ws 0 3 @rm  8 @f11 @bw40 (2) @ws 0 -3 @rm
X 10 @f11 @bw40 ( mode, or "FLOPPY fn ft fm \( options" to) @ws 64.8 660 @m
X @bw40 (activate) @ws  6.234 @bw ( the program in line mode.) @ws
X 11.234 @bw ( The) @ws  6.234 @bw ( FLOPPY panel obtained by typing "FLOPPY" is)
X @ws @bw40 ( shown in) @ws 64.8 648 @m @bw40 (figure) @ws  5 @bw ( 3.) @ws
X 64.8 564 @m 9 @f1 21.6 @bw ( <=>) @ws  5.4 @bw ( FLOPPY VERSION 6.00 <=======>)
X @ws @bw40 ( CODING CONVENTION CHECKER <====>) @ws 64.8 540 @m 32.4 @bw ( Name)
X @ws  5.4 @bw ( of source Fortran file not yet given) @ws 64.8 528 @m
X 248.4 @bw ( FN) @ws  43.2 @bw ( FT) @ws  32.4 @bw ( FM) @ws 64.8 516 @m
X 118.8 @bw ( Source) @ws  10.8 @bw ( FORTRAN ==>) @ws  64.8 @bw ( FORTRAN) @ws
X 16.2 @bw ( A) @ws 64.8 504 @m 21.6 @bw ( \261\261\261\261\261\261\261\261\261)
X @ws @bw40 (\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261)
X @ws @bw40 (\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261)
X @ws @bw40 (\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261)
X @ws @bw40 (\261\261\261\261\261\261\261\261\261\261\261\261\261) @ws
X 64.8 492 @m @bw40 ( a\)) @ws  5.4 @bw ( Existing FLOPPY parameter file) @ws
X 10.8 @bw ( ==>) @ws  64.8 @bw ( FLOPIGN) @ws  16.2 @bw ( A) @ws 64.8 480 @m
X 21.6 @bw ( b\)) @ws  5.4 @bw ( Checks to be made) @ws  59.4 @bw ( ==>) @ws
X 10.8 @bw ( STANDARD) @ws 64.8 468 @m 37.8 @bw ( Specify) @ws  5.4 @bw ( names )
X @ws @bw40 (to ignore) @ws  27 @bw ( ==>) @ws  10.8 @bw ( NO) @ws 64.8 456 @m
X 21.6 @bw ( \261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261)
X @ws @bw40 (\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261)
X @ws @bw40 (\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261)
X @ws @bw40 (\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261)
X @ws @bw40 (\261\261\261\261\261\261) @ws 64.8 444 @m @bw40 ( Generate) @ws
X 5.4 @bw ( a file for FLOW) @ws  37.8 @bw ( ==>) @ws  10.8 @bw ( NO) @ws
X 64.8 432 @m 21.6 @bw ( \261\261\261\261\261\261\261\261\261\261\261\261\261)
X @ws @bw40 (\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261)
X @ws @bw40 (\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261)
X @ws @bw40 (\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261)
X @ws @bw40 (\261\261\261\261\261\261\261\261\261) @ws 64.8 420 @m @bw40 ( Send)
X @ws  5.4 @bw ( FLOPPY Output to disk) @ws  27 @bw ( ==>) @ws  10.8 @bw ( YES)
X @ws 64.8 408 @m 21.6 @bw ( List) @ws  5.4 @bw ( all source FORTRAN lines) @ws
X 10.8 @bw ( ==> NO) @ws 64.8 396 @m 21.6 @bw ( \261\261\261\261\261\261\261\261)
X @ws @bw40 (\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261)
X @ws @bw40 (\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261)
X @ws @bw40 (\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261)
X @ws @bw40 (\261\261\261\261\261\261\261\261\261\261\261\261\261\261) @ws
X 64.8 384 @m @bw40 ( Tidy) @ws  5.4 @bw ( Fortran?) @ws  10.8 @bw ( ==>) @ws
X 5.4 @bw ( NO) @ws  32.4 @bw ( Output) @ws  10.8 @bw ( ==> OUTPUT) @ws
X 16.2 @bw ( FORTRAN A) @ws 64.8 372 @m 27 @bw ( a\)) @ws  5.4 @bw ( Adjust GOTO)
X @ws @bw40 (s to right of page) @ws  10.8 @bw ( ==> NO) @ws 64.8 360 @m
X 27 @bw ( b\)) @ws  5.4 @bw ( Indent DO/IF clauses) @ws  59.4 @bw ( ==>) @ws
X 10.8 @bw ( NO) @ws  37.8 @bw ( Spaces) @ws  10.8 @bw ( ==> 3) @ws 64.8 348 @m
X 27 @bw ( c\)) @ws  5.4 @bw ( Group FORMATs at routine ends) @ws  10.8 @bw ( ==)
X @ws @bw40 (> NO) @ws 64.8 336 @m 27 @bw ( d\)) @ws  5.4 @bw ( Renumber FORMAT )
X @ws @bw40 (statements) @ws  27 @bw ( ==>) @ws  10.8 @bw ( NO) @ws  37.8 @bw ( )
X @ws @bw40 (Start) @ws  16.2 @bw ( ==>) @ws  10.8 @bw ( 500) @ws 64.8 324 @m
X 286.2 @bw ( Step) @ws  21.6 @bw ( ==>) @ws  10.8 @bw ( 10) @ws 64.8 312 @m
X 27 @bw ( e\)) @ws  5.4 @bw ( Renumber all other statements) @ws  10.8 @bw ( ==)
X @ws @bw40 (> NO) @ws  37.8 @bw ( Start) @ws  16.2 @bw ( ==>) @ws  10.8 @bw ( 1)
X @ws @bw40 (0) @ws 64.8 300 @m 286.2 @bw ( Step) @ws  21.6 @bw ( ==>) @ws
X 10.8 @bw ( 10) @ws 64.8 276 @m 21.6 @bw ( PF1:) @ws  5.4 @bw ( Help) @ws
X 10.8 @bw ( \(on cursor\)) @ws  16.2 @bw ( PF2:) @ws  5.4 @bw ( Enter) @ws
X 10.8 @bw ( a CMS Command) @ws  27 @bw ( PF3:) @ws  5.4 @bw ( Exit) @ws
X 64.8 252 @m 10 @f11 21.6 @bw ( ) @ws 10 @f12 @bw40 (Figure) @ws  5 @bw ( 3) @ws
X 10 @f11 @bw40 (:) @ws  24.8 @bw ( The) @ws  5 @bw ( FLOPPY panel) @ws
X 64.8 192 @m @bw40 (The) @ws  5.037 @bw ( default FLOPPY options are highlighte)
X @ws @bw40 (d in the panel,) @ws  5.038 @bw ( and you may change these accordin)
X @ws @bw40 (g to your) @ws 64.8 180 @m @bw40 (requirements.) @ws  10.469 @bw ( )
X @ws @bw40 (By) @ws  5.469 @bw ( positioning the cursor on the item with which )
X @ws @bw40 (you) @ws  5.47 @bw ( want help, and pressing the PF1) @ws
X 64.8 168 @m @bw40 (key,) @ws  6.57 @bw ( FLOPPY will access the HELP file at)
X @ws  6.571 @bw ( the correct line. In addition, you may enter any CMS) @ws
X 64.8 156 @m @bw40 (command) @ws  5.294 @bw ( whilst in the FLOPPY panel) @ws
X 5.295 @bw ( by first pressing the PF2 key. This is useful for example when) @ws
X 64.8 144 @m @bw40 (you) @ws  5.453 @bw ( forget the whereabouts of your source)
X @ws @bw40 ( Fortran file; press PF2) @ws  5.454 @bw ( then enter "FILELIST * F)
X @ws @bw40 (ORTRAN) @ws 64.8 132 @m @bw40 (*".) @ws  5 @bw ( After execution of)
X @ws @bw40 ( the command you will be asked if you want to return to the FLOPPY )
X @ws @bw40 (panel.) @ws 64.8 108 @m @bw40 (Alternatively,) @ws  5.401 @bw ( FLO)
X @ws @bw40 (PPY may be invoked in line\261mode, in which case the format of) @ws
X  5.402 @bw ( the command is as) @ws 64.8 96 @m @bw40 (shown) @ws  5 @bw ( in F)
X @ws @bw40 (igure 4.) @ws 64.8 48 @m 9 @f111 @bw40 (\276\276\276\276\276\276)
X @ws @bw40 (\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276) @ws
X 64.8 24 @m 0 3 @rm  8 @f11 @bw40 (2) @ws 0 -3 @rm  10.4 @bw ( FLOPPY) @ws
X 4.375 @bw ( in full screen mode uses the IBM package) @ws  4.376 @bw ( IOS3270)
X @ws @bw40 (, a screen management facility for full\261screen terminals, which)
X @ws 64.8 12 @m 14.4 @bw ( is) @ws  4 @bw ( not standard REXX.) @ws
X 67.9 618.5 @m 447.4 1 @hr 67.9 618.5 @m 385 1 @vr 514.3 618.5 @m 385 1 @vr
X 67.9 234.5 @m 447.4 1 @hr
X showpage pageobj restore
X %%Page: ? 9       
X
X /pageobj save def() pop
X 64.8 744 @m 10 @f11 @bw40 (FLOPPY) @ws  5 @bw ( and FLOW User Guide) @ws
X 281.4 @bw ( page) @ws  5 @bw ( 7) @ws 64.8 732 @m 10 @f111 @bw40 (\276\276\276)
X @ws @bw40 (\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276)
X @ws @bw40 (\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276)
X @ws @bw40 (\276\276\276\276\276\276\276\276\276\276) @ws 10 @f11 3.6 @bw ( )
X @ws 64.8 696 @m 9 @f1 @bw40 (+\261\261\261\261\261\261\261\261+\261\261\261)
X @ws @bw40 (\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261)
X @ws @bw40 (\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261)
X @ws @bw40 (\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261)
X @ws @bw40 (\261\261\261\261\261\261\261\261\261\261\261+) @ws 64.8 684 @m
X @bw40 (|) @ws  43.2 @bw ( |) @ws  334.8 @bw ( |) @ws 64.8 672 @m @bw40 (|) @ws
X 5.4 @bw ( FLOPPY | [ ? | fn [ft [fm]] [\( Options ]]) @ws  156.6 @bw ( |) @ws
X 64.8 660 @m @bw40 (|) @ws  43.2 @bw ( |) @ws  334.8 @bw ( |) @ws 64.8 648 @m
X @bw40 (|) @ws  43.2 @bw ( |) @ws  5.4 @bw ( Options:) @ws  286.2 @bw ( |) @ws
X 64.8 636 @m @bw40 (|) @ws  43.2 @bw ( |) @ws  334.8 @bw ( |) @ws 64.8 624 @m
X @bw40 (|) @ws  43.2 @bw ( |) @ws  5.4 @bw ( [CHECKS [STANDARD|NONE|ALEPH|GALEP)
X @ws @bw40 (H|ONLINE|LIST|number_list]]|) @ws 64.8 612 @m @bw40 (|) @ws
X 43.2 @bw ( |) @ws  5.4 @bw ( [DISK]) @ws  297 @bw ( |) @ws 64.8 600 @m
X @bw40 (|) @ws  43.2 @bw ( |) @ws  5.4 @bw ( [FULL]) @ws  297 @bw ( |) @ws
X 64.8 588 @m @bw40 (|) @ws  43.2 @bw ( |) @ws  5.4 @bw ( [GOTOS]) @ws
X 291.6 @bw ( |) @ws 64.8 576 @m @bw40 (|) @ws  43.2 @bw ( |) @ws  5.4 @bw ( [GR)
X @ws @bw40 (OUPF]) @ws  286.2 @bw ( |) @ws 64.8 564 @m @bw40 (|) @ws
X 43.2 @bw ( |) @ws  5.4 @bw ( [IGNORE]) @ws  286.2 @bw ( |) @ws 64.8 552 @m
X @bw40 (|) @ws  43.2 @bw ( |) @ws  5.4 @bw ( [INDENT) @ws  21.6 @bw ( spaces])
X @ws  232.2 @bw ( |) @ws 64.8 540 @m @bw40 (|) @ws  43.2 @bw ( |) @ws
X 5.4 @bw ( [OLD) @ws  37.8 @bw ( fn) @ws  5.4 @bw ( ft fm]) @ws  221.4 @bw ( |)
X @ws 64.8 528 @m @bw40 (|) @ws  43.2 @bw ( |) @ws  5.4 @bw ( [OUTPUT) @ws
X 21.6 @bw ( fn) @ws  5.4 @bw ( ft fm]) @ws  221.4 @bw ( |) @ws 64.8 516 @m
X @bw40 (|) @ws  43.2 @bw ( |) @ws  5.4 @bw ( [RENUMF) @ws  21.6 @bw ( start_val)
X @ws @bw40 (ue[,step_value]]) @ws  135 @bw ( |) @ws 64.8 504 @m @bw40 (|) @ws
X 43.2 @bw ( |) @ws  5.4 @bw ( [RENUMS) @ws  21.6 @bw ( start_value[,step_value])
X @ws @bw40 (]) @ws  135 @bw ( |) @ws 64.8 492 @m @bw40 (|) @ws  43.2 @bw ( |)
X @ws  5.4 @bw ( [TIDY]) @ws  297 @bw ( |) @ws 64.8 480 @m @bw40 (|) @ws
X 43.2 @bw ( |) @ws  5.4 @bw ( [TREE]) @ws  297 @bw ( |) @ws 64.8 468 @m
X @bw40 (+\261\261\261\261\261\261\261\261+\261\261\261\261\261\261\261\261\261)
X @ws @bw40 (\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261)
X @ws @bw40 (\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261)
X @ws @bw40 (\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261)
X @ws @bw40 (\261\261\261\261\261+) @ws 64.8 444 @m 10 @f12 @bw40 (Figure) @ws
X 5 @bw ( 4) @ws 10 @f11 @bw40 (:) @ws  24.8 @bw ( FLOPPY) @ws  5 @bw ( \(IBM/CM)
X @ws @bw40 (S\) command format) @ws 64.8 408 @m 12 @f13 @bw40 (2.8) @ws
END_OF_FILE
  if test 50105 -ne `wc -c <'floppy.ps.a'`; then
    echo shar: \"'floppy.ps.a'\" unpacked with wrong size!
  else
    if test -f floppy.ps.b; then
      echo shar: Rebuilding \"'floppy.ps'\" \(104017 characters\)
      cat floppy.ps.a floppy.ps.b > floppy.ps
      if test 104017 -ne `wc -c <'floppy.ps'`; then
        echo shar: \"'floppy.ps'\" rebuilt with the wrong size!
      else 
        rm floppy.ps.a floppy.ps.b
      fi
    fi
  fi
  # end of 'floppy.ps.a'
fi
if test -f 'makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'makefile'\"
else
  echo shar: Extracting \"'makefile'\" \(1370 characters\)
  sed "s/^X//" >'makefile' <<'END_OF_FILE'
X# makefile for Flow
X# Companion to Floppy - J.J.Bunn/CERN
X
X.SUFFIXES	: 	.for
X
XF77 = f77
XFFLAGS = -c
XFFLAGSO = -w
X
XOBJECTS = unixflow.o caschg.o chtbox.o chtlin.o extern.o grinit.o \
X          iniarr.o procht.o procom.o prodes.o proqry.o protre.o \
X          rdflop.o search.o tabent.o lenocc.o gtx.o
XINCLUDES = *.h
X
X.for.o:	
X	$(F77) $(FFLAGS) $<
X
X
X# If the compiler only accepts .f files, use the following three lines
X# instead of the suffix rule above
X#.for.o:
X#       cp $< $*.f
X#       $(F77) $(FFLAGS) $*.f
X
Xflow:	$(OBJECTS) $(INCLUDES)
X	$(F77) -o $@ $(FFLAGSO) $(OBJECTS)
X
X 
Xcaschg.o:	caschg.for params.h
Xchtbox.o:	chtbox.for lunits.h
Xchtlin.o:	chtlin.for lunits.h
Xextern.o:	extern.for params.h tables.h lunits.h
Xgrinit.o:	grinit.for jobcom.h lunits.h
Xgtx.o:		gtx.for lunits.h
Xiniarr.o:	iniarr.for params.h tables.h
Xprocht.o:	procht.for jobcom.h lunits.h trecom.h tables.h hashnm.h
Xprocom.o:	procom.for jobcom.h lunits.h trecom.h tables.h hashnm.h
Xprodes.o:	prodes.for jobcom.h lunits.h
Xproqry.o:	proqry.for params.h tables.h floppy.h lunits.h trecom.h
Xprotre.o:	protre.for params.h tables.h ignore.h lunits.h trecom.h
Xrdflop.o:	rdflop.for params.h lunits.h jobcom.h floppy.h
Xsearch.o:	search.for params.h tables.h
Xtabent.o:	tabent.for params.h floppy.h lunits.h tables.h
Xlenocc.o:	lenocc.for
Xunixflow.o:	unixflow.for lunits.h params.h jobcom.h ignore.h trecom.h
X
END_OF_FILE
  if test 1370 -ne `wc -c <'makefile'`; then
    echo shar: \"'makefile'\" unpacked with wrong size!
  fi
  # end of 'makefile'
fi
echo shar: End of archive 1 \(of 5\).
cp /dev/null ark1isdone
MISSING=""
for I in 1 2 3 4 5 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 5 archives.
    rm -f ark[1-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0
exit 0 # Just in case...
