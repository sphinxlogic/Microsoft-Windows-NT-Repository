Newsgroups: comp.sources.misc
From: julian@vscn08.cern.ch (Julian James Bunn)
Subject:  v31i068:  flow - Fortran Structure Analysers, Part05/05
Message-ID: <1992Jul31.052656.546@sparky.imd.sterling.com>
X-Md4-Signature: 3933b5cec6d976fba70e5b61ca9193e5
Date: Fri, 31 Jul 1992 05:26:56 GMT
Approved: kent@sparky.imd.sterling.com

Submitted-by: julian@vscn08.cern.ch (Julian James Bunn)
Posting-number: Volume 31, Issue 68
Archive-name: flow/part05
Environment: fortran, ffccc

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# Contents:  extern.for gtx.for hashnm.h ignore.h jobcom.h lenocc.for
#   lunits.h search.for
# Wrapped by kent@sparky on Thu Jul 30 23:38:15 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 5 (of 5)."'
if test -f 'extern.for' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'extern.for'\"
else
  echo shar: Extracting \"'extern.for'\" \(228 characters\)
  sed "s/^X//" >'extern.for' <<'END_OF_FILE'
X      SUBROUTINE EXTERN
XC! Find names of external routines
X      INCLUDE 'params.h'
X      INCLUDE 'tables.h'
X      INCLUDE 'lunits.h'
XC
X      REWIND(LINTRE)
X      IPASS = 2
X      CALL RDFLOP(IPASS)
X      CLOSE(LINTRE)
X      END
END_OF_FILE
  if test 228 -ne `wc -c <'extern.for'`; then
    echo shar: \"'extern.for'\" unpacked with wrong size!
  fi
  # end of 'extern.for'
fi
if test -f 'gtx.for' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'gtx.for'\"
else
  echo shar: Extracting \"'gtx.for'\" \(287 characters\)
  sed "s/^X//" >'gtx.for' <<'END_OF_FILE'
X      SUBROUTINE GTX(X,Y,CHARS)
XC! Plots the text at a given position
X      INCLUDE 'lunits.h'
X      CHARACTER*(*) CHARS
XC
X      WRITE(LOUTCH,100) x,' xrel ',y,' yrel moveto'
X  100 FORMAT(1X,F10.5,A,F10.5,A)
X      L = LENOCC(CHARS)
X      WRITE(LOUTCH,*) '(',CHARS(:L),') show'
X      END
END_OF_FILE
  if test 287 -ne `wc -c <'gtx.for'`; then
    echo shar: \"'gtx.for'\" unpacked with wrong size!
  fi
  # end of 'gtx.for'
fi
if test -f 'hashnm.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'hashnm.h'\"
else
  echo shar: Extracting \"'hashnm.h'\" \(257 characters\)
  sed "s/^X//" >'hashnm.h' <<'END_OF_FILE'
X      PARAMETER (NXPOS=1000,NYPOS=40,MXLNK=50,MXLFT=200)
X      INTEGER NUMBER(NYPOS),INEXT(MXLFT)
X      REAL XBOX(MAXPRO),YBOX(MAXPRO),PX(10),PY(10)
X      INTEGER IXPOS(MAXPRO)
X      CHARACTER*(MXNAM) CNAM
X      CHARACTER*(MXNAM) CPLACE(-NXPOS:NXPOS,NYPOS)
END_OF_FILE
  if test 257 -ne `wc -c <'hashnm.h'`; then
    echo shar: \"'hashnm.h'\" unpacked with wrong size!
  fi
  # end of 'hashnm.h'
fi
if test -f 'ignore.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'ignore.h'\"
else
  echo shar: Extracting \"'ignore.h'\" \(84 characters\)
  sed "s/^X//" >'ignore.h' <<'END_OF_FILE'
X      COMMON /IGNORE/ NIGNO,CIGNO(MXIGN),LIGNO(MXIGN)
X      CHARACTER*(MXNAM) CIGNO
END_OF_FILE
  if test 84 -ne `wc -c <'ignore.h'`; then
    echo shar: \"'ignore.h'\" unpacked with wrong size!
  fi
  # end of 'ignore.h'
fi
if test -f 'jobcom.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'jobcom.h'\"
else
  echo shar: Extracting \"'jobcom.h'\" \(239 characters\)
  sed "s/^X//" >'jobcom.h' <<'END_OF_FILE'
X      COMMON /JOBCOM/ LDEBUG,LPRINT,LTREE,LCOMM,LSUBS,LQERY,LCHRT
X      LOGICAL LPRINT,LDEBUG,LTREE,LCOMM,LSUBS,LQERY,LCHRT
X      COMMON /JOBCO1/ CHART,CHRTYP,CCOMM,CGRAPH
X      CHARACTER*(128) CHART,CHRTYP,CCOMM,CGRAPH
X                  
END_OF_FILE
  if test 239 -ne `wc -c <'jobcom.h'`; then
    echo shar: \"'jobcom.h'\" unpacked with wrong size!
  fi
  # end of 'jobcom.h'
fi
if test -f 'lenocc.for' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lenocc.for'\"
else
  echo shar: Extracting \"'lenocc.for'\" \(221 characters\)
  sed "s/^X//" >'lenocc.for' <<'END_OF_FILE'
X      INTEGER FUNCTION LENOCC(CH)
X      CHARACTER*(*) CH
X      L = LEN(CH)
X      DO 1 I=L,1,-1
X        IF(CH(I:I).NE.' ') THEN
X          LENOCC = I
X          RETURN
X        ENDIF
X    1 CONTINUE
X      LENOCC = 0
X      END
END_OF_FILE
  if test 221 -ne `wc -c <'lenocc.for'`; then
    echo shar: \"'lenocc.for'\" unpacked with wrong size!
  fi
  # end of 'lenocc.for'
fi
if test -f 'lunits.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lunits.h'\"
else
  echo shar: Extracting \"'lunits.h'\" \(58 characters\)
  sed "s/^X//" >'lunits.h' <<'END_OF_FILE'
X      COMMON /LUNIT/ LIN,LOUT,LINTRE,LOUTRE,LOUTCO,LOUTCH
END_OF_FILE
  if test 58 -ne `wc -c <'lunits.h'`; then
    echo shar: \"'lunits.h'\" unpacked with wrong size!
  fi
  # end of 'lunits.h'
fi
if test -f 'search.for' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'search.for'\"
else
  echo shar: Extracting \"'search.for'\" \(312 characters\)
  sed "s/^X//" >'search.for' <<'END_OF_FILE'
X      INTEGER FUNCTION SEARCH(CNAM)
XC! Finds the index for a routine name
X      INCLUDE 'params.h'
X      INCLUDE 'tables.h'
X      CHARACTER*(*) CNAM
XC
X      SEARCH = 0
X      DO 1 I=1,NPROC
X         IF(CNAM.EQ.PROCED_NAME(I)) THEN
X            SEARCH = I
X            RETURN
X         ENDIF
X   1  CONTINUE
X      END
END_OF_FILE
  if test 312 -ne `wc -c <'search.for'`; then
    echo shar: \"'search.for'\" unpacked with wrong size!
  fi
  # end of 'search.for'
fi
echo shar: End of archive 5 \(of 5\).
cp /dev/null ark5isdone
MISSING=""
for I in 1 2 3 4 5 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 5 archives.
    rm -f ark[1-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0
exit 0 # Just in case...
