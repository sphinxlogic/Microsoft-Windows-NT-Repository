Newsgroups: comp.sources.misc
From: sbo@vlsi.polymtl.ca (Stephane Boucher)
Subject:  v31i063:  bam - [OpenLook|Athena] menu system for [GNU|Epoch|Lucid] Emacs, Part07/07
Message-ID: <1992Jul31.042628.24007@sparky.imd.sterling.com>
X-Md4-Signature: 59c1bccfdf9d7b7461b0c3af75119232
Date: Fri, 31 Jul 1992 04:26:28 GMT
Approved: kent@sparky.imd.sterling.com

Submitted-by: sbo@vlsi.polymtl.ca (Stephane Boucher)
Posting-number: Volume 31, Issue 63
Archive-name: bam/part07
Environment: Lex, Yacc, SunOS 4.x with XView or BSD Unix with Athena Widget
Supersedes: bam: Volume 27, Issue 68-69

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 7 (of 7)."
# Contents:  bam-2.0/bamdoc.texinfo bam-2.0/menus/rmail-menus.el
# Wrapped by sbo@froh on Mon Jul 27 20:11:50 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'bam-2.0/bamdoc.texinfo' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bam-2.0/bamdoc.texinfo'\"
else
echo shar: Extracting \"'bam-2.0/bamdoc.texinfo'\" \(16270 characters\)
sed "s/^X//" >'bam-2.0/bamdoc.texinfo' <<'END_OF_FILE'
X\input texinfo   @c -*-texinfo-*-
X@comment %**start of header (This is for running Texinfo on a region.)
X@setfilename bam-info
X@settitle The Born Again Menu
X@setchapternewpage odd
X@comment %**end of header (This is for running Texinfo on a region.)
X
X
X@ifinfo
X
X...This is the Header...
X
X@end ifinfo
X     
X@titlepage
X@sp 10
X@center @titlefont{BAM}
X@sp 2
X@center The Born Again Menu for GNU Emacs
X@sp 2
X@center St\'ephane Boucher
X@sp 4
X@center Edition 1.0
X@sp 2
X@center April 1992
X     
X@comment  The following two commands start the copyright page.
X@page
X@vskip 0pt plus 1filll
XCopyright @copyright{} 1992 St\'ephane Boucher
X     
XThis is version 1.0 of the documentation for bam version 1.1.
X
XPublished by St\'ephane Boucher,
X1404 De Rouen,
XBoucherville, Qu\'ebec, J4B 7Y3, Canada
X     
XPermission is granted to make and distribute verbatim copies of
Xthis manual provided the copyright notice and this permission
Xnotice are preserved on all copies.
X
XPermission is granted to copy and distribute modified versions of
Xthis manual under the conditions for verbatim copying, provided
Xthat the entire resulting derived work is distributed under the
Xterms of a permission notice identical to this one.
X
XPermission is granted to copy and distribute translations of this
Xmanual into another language, under the above conditions for
Xmodified versions, except that this permission may be stated in a
Xtranslation approved by the author.
X@end titlepage
X     
X@node Top, Overview, (dir), (dir)
X
X@ifinfo
XBam is a program that lets you attach menus to Emacs so that you
Xcan execute a command by a few mouse click without having to
Xremember all the keyboard sequences.
X@end ifinfo
X     
X@menu
X* Overview::			Overview of BAM.
X* Implementation::		Brief explanation of Bam's implementation.
X* Installation::		Steps needed to install Bam.
X* Bam Options::			The command line options of bam.
X* Menu Files::			The format of the menu files.
X* Bam Functions::		Description of the main functions.
X* Bam Variables::		Description of the main variables.
X* Compatibility issues::	Topics on Bam Compatibility.
X* Contributors::
X* Bug Reports::			How to submit a bug report.
X@end menu
X
X@node Overview, Implementation, Top, Top
X@comment node-name,     next,           previous, up
X@chapter Overview
X@cindex Overview
X
XThis is BAM (Born Again Menus) a menu system for GNU
XEmacs.  It provides a GUI front-end to GNU Emacs.  In it's
Xcurrent state, it is not a full fledge GUI, but it is easilly
Xcustomizable and extensible.  Note however that this package
Xdoes not provide direct mouse support in the Emacs window (i.e.
Xno scrollbar, no cut-and-paste, no pop-up menu, ...).
X
XIt is most useful to ease the transition from other
Xtext-editors to GNU Emacs, since basic commands are mouse
Xselectable.  First-timers won't be overwhelmed by GNU Emacs
Xapparent complexity and system administrator will spend less
Xtime repeating all the time "Press @kbd{C-h i m emacs @key{RET}} and
XRTFM" (Dream on... :-)
X
XBam is based on Dick van Soest's Buttons package, from which
Xit borrows some elisp code.  The C and the elisp code is
Xprotected by the copyleft.  There is however no restriction
Xfor the file @file{command-process.el} which came with the Buttons
Xpackage.  The menu files are not covered by the copyleft.
XPlease read the file COPYING that describes the COPYLEFT
Xbefore using bam.
X
XThis version of bam has a few bug fixes, and incorporate some
Xenhancement. Some of the changes are:
X
X@itemize @bullet
X@item
Xminor modifications to the menu files that cause
Xsome incompatibilites. The incompatibilities are
Xtrivial to correct;
X
X@item
XA set of new elisp functions to ease the use of bam. Some of the new
Xfunctions are (@code{bam-load-menu}@findex{bam-load-menu},
X@code{bam-open-menu}@findex{bam-load-menu},
X@code{bam-set-mode-hook}@findex{bam-set-mode-hook},
X@code{bam-set-menu-args}@findex{bam-set-menu-args},
X@code{bam-font-option}@findex{bam-font-option},
X@code{bam-geometry-option}@findex{bam-geometry-option},
X@code{bam-grab-option}@findex{bam-grab-option}).  By using these
Xfunction you can now associate a menu with a mode
X(@code{bam-set-mode-hook}) so that the appropriate menu gets openned
Xupon entering a given mode; @refill
X
X@item
XSupport for a menus path and an X bitmaps path;
X
X@item
XA trial makefile option that will allow you to
Xquickly view what bam looks like so that you don't
Xhave to go through the whole installation before
Xdeciding if you want bam.
X@end itemize
X
XIf you add something that you find interesting to bam, please
Xremember to contact me so that we can coordinate the
Xmodifications to be added to the distribution package.  This
Xway more people will benefit from everybody's contributions.
X
X
X@node Implementation, Installation, Overview, Top
X@chapter Implementation
X@cindex Implementation
X
XThe secret of the inner working of bam is rather simple.  You
Xrun an Emacs elisp sub-process that starts a command window.
XWhen a command button is pressed or a menu item is selected,
Xbam writes a string to stdout.  Emacs then gets the string from
Xthe stdin of the sub-process and interprets that string as an
Xelisp form.  Such a string could be @samp{"(save-buffer)"} or
X@samp{"(call-interactively 'search-regexp)"}.  Note that the
Xinterpretation of elisp forms is not done in an interactive
Xcontext.  Therefore, you have to use @code{call-interactively} with
Xelisp functions that can only be called interactively.
X
XBam is implemented with the Xview toolkit version 2.0 (also
Xworks with Xview version 3.0) available on @emph{export.lcs.mit.edu}
Xunder @file{/contrib} (standard with Open Windows on any Sun running
XSunOS 4.1 and later).  It is configurable.  The first release
Xcomes with a basic set of common Emacs and latex commands.
XYou can customize your own menus to support MAIL/RMAIL, VM,
XGNUS, LATEX etc.
X
XIt has also been implemented with the Athena toolkit. This version
Xis almost identical with two exceptions:
X@itemize @bullet
X@item 
XThe menus places emacs inside itself (It looks like textedit under
XOpen Windows).
X@item 
XSubmenus are hard to use 
X@end itemize
X
XIn our experience, it offers a solution to system adminstrator
X(or software managers) who wants to introduce the greatest text
Xeditor available on UNIX to PC users who demand something they
Xlabel @emph{user-friendly}.  Understand us (the contributors), we
Xare hard core puritains but we realise that not every one is.
XThis is our contribution to easing the average UNIX user's
Xlife.
X
XYou can, and you should, customize (i.e. create) new menus for
Xyour favorite GNU Emacs application.  We will hapilly collect
Xinteresting contributions and integrate them in future
Xversions. 
X
X@node Installation, Bam Options, Implementation, Top
X@comment node-name,     next,           previous, up
X@chapter Installation
X@cindex Installation
X
X@enumerate
X@item
X@code{cd} to the directory where bam's sources are;
X
X@item
XEdit the file @file{Makefile.in} to select your various
Xinstallation directories (located at the beginning of
Xthe file).
X
X@item
XRun the shell script withthe following command: 
X@code{sh ./configure.sh}
X
XNote: I have compiled successfuly the program on sun3 and
Xsun4.  You may have to experiment with the Makefile on other
Xkind of machine.
X
XA known problem is that cc, lex and the athena toolkit doesn't work
Xtogether on sun3's so you have to use a substitute for cc or athena
X(gcc or xview).
X
X@item
Xtype @code{make all}
X
X@item
Xtype @code{make install}
XYou now have a a command bemacs that gives you emacs with menus.
XSo the following two items are not necessary. It is probably
Xworthwhile to rename bemacs to xemacs if you plan on using it.
X
X@item
X(You can skip this item if you are satisfied with the bemacs)
X
Xput in your @file{.emacs} the content of emacs_init.
X      
X(To do this you can simply do 
X@code{cat /usr/local/lib/bam/emacs_init >> .emacs}) where 
X@file{/usr/local/lib/bam} should be replaced by the
Xdirectory name where you placed bam libraries.
X
X>>>> Notice the >> redirection.  DON'T USE > or you WILL LOOSE <<<<
X>>>> YOUR PREVIOUS .emacs file.                                <<<<
X
XNote:
X	Make sure that the elisp librairies are accessible
X	via Emacs' @var{load-path}.  One way to do this is to put
X	the elisp files in a given directory, for example
X	@file{/usr/something/elispdir}, and add that directory in
X	Emacs' @var{load-path} by including the following lisp 
X	sentence in your initialization file (@file{~/.emacs}):
X
X@example
X  (setq load-path (cons "/usr/something/elispdir" load-path))
X@end example
X
X@item
X(You can skip this item if you are satisfied with bemacs)
X
XIf you are using the Athena version you have to change the
Xnormal emacs startup so that the the emacs windows are
Xnamed(or bam can't place emacs inside of itself):
X@example
Xemacs -wn Emacs`date +%T`
X@end example
X
X@item
XIf you have lisp problems, consult your local Emacs guru.
X@end enumerate
X
X
XEnjoy !!!
X
X  ,
XStephane Boucher
Xsbo@@vlsi.polymtl.ca
XHans Olsson
Xf88ho@@efd.lth.se
X
X@node    Bam Options, Menu Files, Installation, Top
X@comment node-name,     next,           previous, up
X@chapter Bam Options
X@cindex Bam Options
X
X@display
Xbam [-e <error command string>] [<toolkit switches>] <menufile>
X@end display
X
X@table @code
X@item -e <error command string>
Xthe command string is the string sent to emacs when an error
Xis encounter durring the excution of bam. This string must
Xcontain exactly one %s which will be replaced by the message
Xgenarated by bam.
X
X@item -g <debug_level>
XSpecify the debug level (i.e. levels of trace information
Xdisplayed.  (Not necessary under normal use)
X
X@item -B bitmapdir1[:bitmapdir2[:bitmapdir3]...]
XSpecify a search path for the X bitmaps.
X
X@item -n
XSkip the display of the 'about the author' frame.
X
X@item <XView swithes>
XThe program can take any toolkit switches (either Xt or
XXView), since it can be compiled for either of them.
XThe ones that are particularly interesting are easily 
Xaccessible from emacs when the bam library is active:
X@table @code
X@item (bam-geometry-position <x-position> <y-position> <x-size> <y-size> )
Xto specify the window position and size. What happens is that
Xbam fits buttons in the window of the size
Xspecified and at the end resize the window to fit
Xaround the already placed menu buttons.
X
X@item (bam-font-option <font name> ) 
Xto specify a font for the menus. It is recommended
Xto use a fixed font since it is easier to align
Xthings in the menus.
X
X@end table
X
X@item <menufile>
XThis is the file that contains the description of an entire
Xmenu.
X
X@end table
X
X@node    Menu Files, Bam Functions, Bam Options, Top
X@comment node-name,     next,           previous, up
X@chapter Menu Files
X@cindex Menu Files
X
X@menu
X* Menu Files Format::
X* Making a New Menu::
X@end menu
X
X@node    Menu Files Format, Making a New Menu, Menu Files, Menu Files
X@comment node-name,     next,           previous, up
X@section Menu Files Format
X@cindex Menu Files Format
X
XThe indentation and spacing is rather loose, since the parser is
Xbuilt with lex and yacc.
X
XThe basic frame format for a menu is (note that * means 0 or
Xmore, and + means 1 or more):
X
X@display
X<menu file>: 
X	  FRAME <frame attribute>* PANEL <button>* END END
X
X<frame attribute>:
X	  TITLE <string>
X	| ICON_FILE_NAME <string>
X	| ICON_LABEL <string>
X
X<button>:
X	  BUTTON <button name string> <action string> <menu>
X
X<menu>:
X	  MENU <menu attribute>* <menu item>+ END
X
X<menu attribute>:
X	  TITLE <string>
X	| PUSHPIN TRUE
X	| PUSHPIN FALSE
X
X<menu item>:
X	  TEXT <text attribute>* <menu item name string> 
X               <action string>
X 	| TEXT <text attribute>* <menu item name string> 
X               <action string> <menu>
X	| BITMAP <bitmap attribute>* <file name of bitmap string> 
X                 <action string>
X	| BITMAP <bitmap attribute>* <file name of bitmap string> 
X                 <action string> <menu>
X
X<text attribute>:
X	  DEFAULT
X
X<bitmap attribute>:
X	  DEFAULT
X@end display
X
Xall type of strings must be delimited by "".  To have a " or \
Xwithin a string you simply use \" and \\. You can't, however, use
Xthings like \n, \t etc.
X
Xit is possible to write :
X@example
X"this is a
Xmulti-line string".
X@end example
X
XNote that PANEL is there for future use. It is at the moment
Xuseless. It is however required.
X
XOnly one FRAME or PANEL is possible per file.
X
X<action string> is a lisp expression.
X
XThe bitmap file must be an X bitmap.
X
XComments are allowed. text between # and the end of a line is
Xconsidered a comment.
X
X@node Making a New Menu, Compatibility Issues, Menu Files Format, Menu Files
X@comment node-name,     next,        previous,         up
X@section Making a New Menu
X@cindex Making a New Menu
X
X@enumerate
X
X@item
XWrite a menu file @file{my_menu} that conform the the menu file
Xformat.
X
X@item
Xcreate an elisp file e.g. @file{my_menu.el} and place the elisp
Xcode you made to use with the menu, if any. However, the elisp
Xfile is not required.
X
X@item
Xplace the two files (e.g. @file{my_menu} and @file{my_menu.el})
Xin the same directory.
X
X@item
XMake sure that the variable @var{bam-menus-path} contains the
Xdirectory where the menu was placed.
X(@var{bam-menus-path}@vindex{bam-menus-path} is similar to
X@var{load-path}); @refill
X
X@item 
XLook at the file @file{emacs_init} to know how to load and open a
Xmenu.  (Note that contrary to the version 1.0 of bam you do not
Xneed anymore to write elisp code to call bam. It is now done by
Xthe elisp function @code{bam-open-menu}@findex{bam-open-menu}).
X
X@end enumerate
X
X@node Bam Functions, Bam Variables, Menu Files, Top
X@comment node-name,     next,        previous,         up
X@chapter Bam Functions
X@cindex Bam Functions
X
X@node Bam Variables, Compatibility Issues, Bam Functions, Top
X@comment node-name,     next,        previous,         up
X@chapter Bam Variables
X@cindex Bam Variables
X
X@node Compatibility Issues, Contributors, Bam Variables, Top
X@comment node-name,     next,        previous,         up
X@chapter Compatibility Issues
X@cindex Compatibility Issues
X
XEverything in version 2.0 should be compatible with version 1.0,
Xexcept for NO_PUSHPIN which is now PUSHPIN FALSE, and PUSHPIN
Xwhich is now PUSHPIN TRUE.
X
XThere is no need anymore to create an elisp function to open
X(i.e. start the executable bam as a process) the menu. This is
Xnow taken care by the elisp function @code{bam-open-menu}.
X
XThere is a new attribute: DEFAULT. It can be used as a text item
Xand bitmap item attribute.
X
X@node Contributors, How To Get Bam, Compatibility Issues, Top
X@chapter Contributors
X
XBam is based on Dick van Soest's Buttons package, from which
Xit borrows some elisp code.  The C and elisp code was
Xwritten by myself, Stephane Boucher (sbo@@vlsi.polymtl.ca).
XThe port to athena widgets was done by Hans Olsson
X(f88ho@@efd.lth.se) except for the GrabAndManage widget-class
Xthat was written by Anders Carlsson (e87ac@@efd.lth.se). The
Xemacs-base-ol file was first written by Michel Dagenais and
Xthen modified by myself and Marc Paquette.  A new rmail menu
Xhas also been contributed by Marc Paquette.  Thanks also to
XChristian Marcotte who broke his teeth with Marc trying to
Xinstall buttons (on a bogus X!! !!!) and convinced me of the
Xneed for such a fun little package. Finally, thanks to
XOlivier L'Heureux who has contributed some changes to the
XLatex menu, and all the people who have sent bug reports.
X
X@node How To Get Bam, Bug Reports, Contributors, Top
X@chapter How To Get Bam
X
XYou can get the latest version of bam on @emph{vlsi.polymtl.ca (132.207.8.1)}
X@file{/pub/bam-??.tar.Z}.  Don't forget to set transfer mode to binary.
X
X@node Bug Reports, , How To Get Bam, Top
X@chapter Bug Reports
X@cindex Bug Reports
X
XBug reports, fixes (in patch format if possible), suggestions and
Xenhancements are welcome and can be sent to @emph{sbo@@vlsi.polymtl.ca}.
XI will make my best to integrate any useful improvement I receive into
Xthe package and make them available to the USENET community.
X
X
X@node Functions Index, Variables Index, Bug Reports, Top
X@comment node-name,     next, previous,      up
X@unnumbered Functions Index
X
X@printindex vr
X
X@node Variables Index, Concept Index, Function Index, Top
X@comment node-name,     next, previous,      up
X@unnumbered Variables Index
X
X@printindex vr
X
X@node    Concept Index, , Variables Index, Top
X@comment node-name,     next, previous,      up
X@unnumbered Concept Index
X     
X@printindex cp
X     
X@contents
X
X@bye
END_OF_FILE
if test 16270 -ne `wc -c <'bam-2.0/bamdoc.texinfo'`; then
    echo shar: \"'bam-2.0/bamdoc.texinfo'\" unpacked with wrong size!
fi
# end of 'bam-2.0/bamdoc.texinfo'
fi
if test -f 'bam-2.0/menus/rmail-menus.el' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bam-2.0/menus/rmail-menus.el'\"
else
echo shar: Extracting \"'bam-2.0/menus/rmail-menus.el'\" \(14882 characters\)
sed "s/^X//" >'bam-2.0/menus/rmail-menus.el' <<'END_OF_FILE'
X;   bam - the Born Again Menus for GNU Emacs.
X;   Copyright (C) 1992 Marc Paquette.
X;
X;    This program is free software; you can redistribute it and/or modify
X;    it under the terms of the GNU General Public License as published by
X;    the Free Software Foundation; either version 1, or (at your option)
X;    any later version.
X;
X;    This program is distributed in the hope that it will be useful,
X;    but WITHOUT ANY WARRANTY; without even the implied warranty of
X;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X;    GNU General Public License for more details.
X;
X;    You should have received a copy of the GNU General Public License
X;    along with this program; if not, write to the Free Software
X;    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X;
X;  In other words, you are welcome to use, share and improve this program.
X;  You are forbidden to forbid anyone else to use, share and improve
X;  what you give them.   Help stamp out software-hoarding!
X
X(defconst rmail-menus-RCS-id
X    "$Id: rmail-menus.el,v 1.1 1992/07/27 22:56:24 sbo Exp $")
X
X(provide 'rmail-menus)
X
X(defvar bam-rmail-menus:stay-in-selected-window nil
X  "*If T, point will be restored position after operations.  NIL means always switch to RMAIL buffer")
X
X(defvar bam-rmail-menus:strictly-need-to-be-in-rmail-mode nil)
X
X;; When bam-version does not exist, assumes it's version 1.0
X(and (not (boundp 'bam-version)) (setq bam-version "1.0"))
X
X(let* ((bam-version-major (string-to-int
X			   (substring bam-version
X				      0 (string-match "\\." bam-version)
X				      )))
X       (dot-pos (match-end 0))
X       (bam-version-minor (string-to-int
X			   (substring bam-version
X				      dot-pos
X				      (string-match "[^0-9]"
X						    bam-version
X						    (1+ dot-pos))))))
X  (if (and (= bam-version-major 1)
X	   (< bam-version-minor 1))
X      (progn				; setup for pre-V1.1 of BAM
X	(setq *bam-emacs-menu-dir* *bam-menu-dir*)
X	(defun rmail-menu ()
X	  "Run BAM with the menus for using Rmail"
X	  (interactive)
X	  (process-kill-without-query
X	   (command-process (concat *bam-exec-dir* "/bam")
X			    "-Wp" "0" "0" ; position of window
X			    "-Wt" "lucidasanstypewriter-bold-12" ; font
X			    "-Ws" "1000" "300" ;window size
X			    (concat *bam-emacs-menu-dir* "/rmail-menus") ;Menu filename
X			    ))))
X      (progn				; setup for V1.1 and over
X	(bam-set-menu-args "rmail-menus" (bam-font-option "lucidasanstypewriter-bold-12")))))
X  
X
X(defun bam-rmail-menus:do-it (function &optional interactive-p &rest args)
X  "Calls FUNCTION \(interactively if optional arg INTERACTIVE-P is true\)
Xwith arguments ARGS.  Tries to call FUNCTION in the right context.  The
X\"right context\" is controled with variables
Xbam-rmail-menus:strictly-need-to-be-in-rmail-mode and
Xbam-rmail-menus:stay-in-selected-window.
XThe intent of this function is to make it possible to execute commands
Xpertaining to the modes rmail and rmail-summary from any buffer."
X  (let ((return-value))
X    (cond ((not (fboundp function))
X	   (error "Arg %s not a function" function))
X	  (t
X	   (let ((origin-buffer)
X		 (in-rmail-mode-p
X		  (or (eq major-mode 'rmail-mode)
X		      (and (not bam-rmail-menus:strictly-need-to-be-in-rmail-mode)
X			   (eq major-mode 'rmail-summary-mode))))
X		 (need-to-get-back-to-origin-p nil))
X	     (if (not in-rmail-mode-p)
X		 (cond (bam-rmail-menus:stay-in-selected-window
X			(setq need-to-get-back-to-origin-p t)
X			(setq origin-buffer (current-buffer))
X			(set-buffer "RMAIL"))
X		       (t
X			(pop-to-buffer "RMAIL"))))
X	     (if interactive-p
X		 (setq return-value (call-interactively function))
X		 (setq return-value (apply function args)))
X	     (and need-to-get-back-to-origin-p (set-buffer origin-buffer)))))
X    return-value))
X
X(defun bam-rmail-menus:rmail-undelete ()
X  (let* ((message-number (bam-rmail-menus:rmail-message-number 'silent))
X	 (bam-rmail-menus:strictly-need-to-be-in-rmail-mode nil)
X	 (message-is-deleted-p (bam-rmail-menus:rmail-message-deleted-p
X				message-number)))
X    (and message-is-deleted-p
X	 (cond ((eq major-mode 'rmail-summary-mode)
X		(bam-rmail-menus:do-it 'rmail-summary-undelete 'interactive))
X	       (t
X		(bam-rmail-menus:do-it 'rmail-next-message 'interactive)
X		(bam-rmail-menus:do-it
X		 'rmail-undelete-previous-message 'interactive))))))
X
X(defun bam-rmail-menus:undelete-and-forward ()
X  (cond ((eq major-mode 'rmail-summary-mode)
X	 (bam-rmail-menus:do-it 'rmail-summary-undelete 'interactive)
X	 (bam-rmail-menus:do-it 'rmail-summary-next-all 'interactive))
X	(t
X	 (bam-rmail-menus:do-it 'rmail-next-message 'interactive)
X	 (bam-rmail-menus:do-it 'rmail-undelete-previous-message 'interactive)
X	 (bam-rmail-menus:do-it 'rmail-next-message 'interactive))))
X
X(defun bam-rmail-menus:undelete-and-backward ()
X  (cond ((eq major-mode 'rmail-summary-mode)
X	 (bam-rmail-menus:do-it 'rmail-summary-undelete 'interactive)
X	 (bam-rmail-menus:do-it 'rmail-summary-previous-all 'interactive))
X	(t
X	 (bam-rmail-menus:do-it 'rmail-next-message 'interactive)
X	 (bam-rmail-menus:do-it 'rmail-undelete-previous-message 'interactive)
X	 (bam-rmail-menus:do-it 'rmail-previoust-message 'interactive))))
X
X
X
X(defun bam-rmail-menus:rmail-get-new-mail ()
X  (let* ((rmail-buffer (get-buffer "RMAIL"))
X	 (rmail-buffer-exist-p (not (null rmail-buffer))))
X    (cond ((not rmail-buffer-exist-p)
X	   (call-interactively 'rmail))
X	  ((eq major-mode 'rmail-summary-mode)
X	   (bam-rmail-menus:do-it 'rmail-summary-get-new-mail 'interactive))
X	  ((eq major-mode 'rmail-mode)
X	   (bam-rmail-menus:do-it 'rmail-get-new-mail 'interactive))
X	  (t
X	   (bam-rmail-menus:do-it 'rmail-get-new-mail 'interactive)
X	   (display-buffer rmail-buffer)))))
X
X(defun bam-rmail-menus:rmail-last-message ()
X  (let ((bam-rmail-menus:strictly-need-to-be-in-rmail-mode t)
X	(update-summary-p (eq major-mode 'rmail-summary-mode)))
X    (bam-rmail-menus:do-it 'rmail-last-message 'interactive)
X    (and update-summary-p (bam-rmail-menus:rmail-summary))))
X
X(defun bam-rmail-menus:rmail-scroll-message-up ()
X  (cond ((eq major-mode 'rmail-summary-mode)
X	 (bam-rmail-menus:do-it 'rmail-summary-scroll-msg-up 'interactive))
X	(t
X	 (let ((bam-rmail-menus:strictly-need-to-be-in-rmail-mode t))
X	   (bam-rmail-menus:do-it 'scroll-up)))))
X
X(defun bam-rmail-menus:rmail-scroll-message-down ()
X  (cond ((eq major-mode 'rmail-summary-mode)
X	 (bam-rmail-menus:do-it 'rmail-summary-scroll-msg-down 'interactive))
X	(t
X	 (let ((bam-rmail-menus:strictly-need-to-be-in-rmail-mode t))
X	   (bam-rmail-menus:do-it 'scroll-down)))))
X
X
X(defun bam-rmail-menus:rmail ()
X  (call-interactively 'rmail))
X
X(defun bam-rmail-menus:rmail-input ()
X  (call-interactively 'rmail-input))
X
X(defun bam-rmail-menus:rmail-output-to-rmail-file ()
X  (call-interactively 'rmail-output-to-rmail-file))
X
X(defun bam-rmail-menus:rmail-expunge-and-save ()
X  (cond ((eq major-mode 'rmail-summary-mode)
X	 (bam-rmail-menus:do-it 'rmail-summary-expunge-and-save 'interactive))
X	(t
X	 (bam-rmail-menus:do-it 'rmail-expunge-and-save 'interactive))))
X
X(defun bam-rmail-menus:rmail-quit ()
X  (cond ((eq major-mode 'rmail-summary-mode)
X	 (bam-rmail-menus:do-it 'rmail-summary-quit 'interactive))
X	(t
X	 (bam-rmail-menus:do-it 'rmail-quit 'interactive))))
X
X(defun bam-rmail-menus:rmail-next-undeleted-message ()
X  (cond ((eq major-mode 'rmail-summary-mode)
X	 (bam-rmail-menus:do-it 'rmail-summary-next-msg 'interactive))
X	(t
X	 (bam-rmail-menus:do-it 'rmail-next-undeleted-message 'interactive))))
X
X(defun bam-rmail-menus:rmail-next-labeled-message ()
X  (let ((origin-buffer (current-buffer))
X	(in-rmail-summary-p (eq major-mode 'rmail-summary-mode))
X	(target-msg-num))
X    (cond (in-rmail-summary-p
X	   (set-buffer "RMAIL")
X	   (bam-rmail-menus:do-it 'rmail-next-labeled-message 'interactive)
X	   (setq target-msg rmail-current-message)
X	   (set-buffer origin-buffer)
X	   (rmail-summary-goto-msg target-msg))
X	  (t
X	   (bam-rmail-menus:do-it 'rmail-next-labeled-message 'interactive)))))
X
X(defun bam-rmail-menus:rmail-next-message ()
X  (cond ((eq major-mode 'rmail-summary-mode)
X	 (bam-rmail-menus:do-it 'rmail-summary-next-all 'interactive))
X	(t
X	 (bam-rmail-menus:do-it 'rmail-next-message 'interactive))))
X
X(defun bam-rmail-menus:rmail-previous-undeleted-message ()
X  (cond ((eq major-mode 'rmail-summary-mode)
X	 (bam-rmail-menus:do-it 'rmail-summary-previous-msg 'interactive))
X	(t
X	 (bam-rmail-menus:do-it 'rmail-previous-undeleted-message 'interactive))))
X
X(defun bam-rmail-menus:rmail-previous-labeled-message ()
X  (let ((origin-buffer (current-buffer))
X	(in-rmail-summary-p (eq major-mode 'rmail-summary-mode))
X	(target-msg-num))
X    (cond (in-rmail-summary-p
X	   (set-buffer "RMAIL")
X	   (bam-rmail-menus:do-it 'rmail-previous-labeled-message 'interactive)
X	   (setq target-msg rmail-current-message)
X	   (set-buffer origin-buffer)
X	   (rmail-summary-goto-msg target-msg))
X	  (t
X	   (bam-rmail-menus:do-it 'rmail-previous-labeled-message 'interactive)))))
X
X(defun bam-rmail-menus:rmail-previous-message ()
X  (cond ((eq major-mode 'rmail-summary-mode)
X	 (bam-rmail-menus:do-it 'rmail-summary-previous-all 'interactive))
X	(t
X	 (bam-rmail-menus:do-it 'rmail-previous-message 'interactive))))
X
X(defun bam-rmail-menus:rmail-beginning-of-message ()
X  (cond (bam-rmail-menus:stay-in-selected-window
X 	 (let ((this-buffer (current-buffer)))
X 	   (pop-to-buffer "RMAIL")
X	   (goto-char (point-min))
X; 	   (call-interactively 'rmail-beginning-of-message)
X 	   (pop-to-buffer this-buffer)))
X 	(t
X 	 (if (not (eq major-mode 'rmail-mode))
X 	     (pop-to-buffer "RMAIL"))
X 	 (call-interactively 'rmail-beginning-of-message))))
X
X(defun bam-rmail-menus:rmail-message-number (&optional be-silent-p)
X  (let ((origin-buffer (current-buffer))
X	(in-rmail-p (eq major-mode 'rmail-mode))
X	(msg-num))
X    (cond (in-rmail-p
X	   (setq msg-num rmail-current-message))
X	  (t
X	   (set-buffer "RMAIL")
X	   (setq msg-num rmail-current-message)
X	   (set-buffer origin-buffer)))
X    (and (not be-silent-p)
X	 (message "Current message number: %d" msg-num))
X    msg-num))
X
X(defun bam-rmail-menus:rmail-message-deleted-p (msg-num)
X  (let ((origin-buffer (current-buffer))
X	(in-rmail-p (eq major-mode 'rmail-mode))
X	(message-deleted-p))
X    (cond (in-rmail-p
X	   (setq message-deleted-p (rmail-message-deleted-p msg-num)))
X	  (t
X	   (set-buffer "RMAIL")
X	   (setq message-deleted-p (rmail-message-deleted-p msg-num))
X	   (set-buffer origin-buffer)))
X    message-deleted-p))
X
X(defun bam-rmail-menus:rmail-toggle-header ()
X  (let ((origin-buf (current-buffer)))
X    (let ((bam-rmail-menus:strictly-need-to-be-in-rmail-mode t)
X	  (bam-rmail-menus:stay-in-selected-window nil))
X      (bam-rmail-menus:do-it 'rmail-toggle-header))
X    (and bam-rmail-menus:stay-in-selected-window ;This is the public value
X	 (pop-to-buffer origin-buf))))
X
X(defun bam-rmail-menus:rmail-summary ()
X  (let ((bam-rmail-menus:strictly-need-to-be-in-rmail-mode t))
X    (bam-rmail-menus:do-it 'rmail-summary 'interactive))
X  (pop-to-buffer "RMAIL-summary"))
X
X(defun bam-rmail-menus:rmail-summary-by-labels ()
X  (let ((bam-rmail-menus:strictly-need-to-be-in-rmail-mode t))
X    (bam-rmail-menus:do-it 'rmail-summary-by-labels 'interactive))
X  (pop-to-buffer "RMAIL-summary"))
X
X(defun bam-rmail-menus:rmail-summary-by-recipients ()
X  (let ((bam-rmail-menus:strictly-need-to-be-in-rmail-mode t))
X    (bam-rmail-menus:do-it 'rmail-summary-by-recipients 'interactive))
X  (pop-to-buffer "RMAIL-summary"))
X
X(defun bam-rmail-menus:rmail-edit-current-message ()
X  (bam-rmail-menus:do-it 'rmail-edit-current-message 'interactive))
X
X(defun bam-rmail-menus:rmail-delete-forward ()
X  (cond ((eq major-mode 'rmail-summary-mode)
X	 (bam-rmail-menus:do-it 'rmail-summary-delete-forward 'interactive))
X	(t
X	 (bam-rmail-menus:do-it 'rmail-delete-forward 'interactive))))
X
X(defun bam-rmail-menus:rmail-delete-message ()
X  (cond ((eq major-mode 'rmail-summary-mode)
X	 (let ((initial-point (point)))
X	   (bam-rmail-menus:do-it 'rmail-summary-delete-forward 'interactive)
X	   (or (eq (point) initial-point) ;we were on last msg of summary
X	       (bam-rmail-menus:do-it 'rmail-summary-previous-all 'interactive))))
X	(t
X	 (bam-rmail-menus:do-it 'rmail-delete-message 'interactive))))
X
X(defun bam-rmail-menus:rmail-delete-backward ()
X  (cond ((eq major-mode 'rmail-summary-mode)
X	 (bam-rmail-menus:do-it 'rmail-summary-delete-forward 'interactive)
X	 (bam-rmail-menus:do-it 'rmail-summary-previous-msg nil 1))
X	(t
X	 (bam-rmail-menus:do-it 'rmail-delete-backward 'interactive))))
X
X(defun bam-rmail-menus:rmail-add-label ()
X  (let ((bam-rmail-menus:strictly-need-to-be-in-rmail-mode t)
X	(bam-rmail-menus:stay-in-selected-window t))
X    (bam-rmail-menus:do-it 'rmail-add-label 'interactive)))
X
X(defun bam-rmail-menus:rmail-kill-label ()
X  (let ((bam-rmail-menus:strictly-need-to-be-in-rmail-mode t)
X	(bam-rmail-menus:stay-in-selected-window t))
X    (bam-rmail-menus:do-it 'rmail-kill-label 'interactive)))
X
X(defun bam-rmail-menus:isearch-forward ()
X  (pop-to-buffer "RMAIL")
X  (bam-rmail-menus:do-it 'isearch-forward 'interactive))
X
X(defun bam-rmail-menus:search-forward ()
X  (pop-to-buffer "RMAIL")
X  (bam-rmail-menus:do-it 'search-forward 'interactive))
X
X(defun bam-rmail-menus:isearch-backward ()
X  (pop-to-buffer "RMAIL")
X  (bam-rmail-menus:do-it 'isearch-backward 'interactive))
X
X(defun bam-rmail-menus:search-backward ()
X  (pop-to-buffer "RMAIL")
X  (bam-rmail-menus:do-it 'search-backward 'interactive))
X
X(defun bam-rmail-menus:rmail-search (&optional backward-p)
X  (let ((bam-rmail-menus:strictly-need-to-be-in-rmail-mode t)
X	(bam-rmail-menus:stay-in-selected-window nil))
X    (if backward-p
X	(bam-rmail-menus:do-it 'bam-rmail-menus:rmail-search-backward)
X	(bam-rmail-menus:do-it 'rmail-search 'interactive))))
X
X(defun bam-rmail-menus:rmail-search-backward ()
X  (let ((current-prefix-arg '-))
X    (call-interactively 'rmail-search)))
X
X(defun bam-rmail-menus:isearch-forward-regexp ()
X  (pop-to-buffer "RMAIL")
X  (bam-rmail-menus:do-it 'isearch-forward-regexp 'interactive))
X
X(defun bam-rmail-menus:isearch-backward-regexp ()
X  (pop-to-buffer "RMAIL")
X  (bam-rmail-menus:do-it 'isearch-backward-regexp 'interactive))
X
X(defun bam-rmail-menus:mail ()
X  (call-interactively 'mail))
X
X(defun bam-rmail-menus:rmail-reply (&optional include-message-p reply-to-CC-p)
X  (let ((reply-function))
X    (cond ((eq major-mode 'rmail-summary-mode)
X	   (fset 'reply-function (symbol-function 'rmail-summary-reply)))
X	  (t
X	   (fset 'reply-function (symbol-function 'rmail-reply))))
X    (if reply-to-CC-p
X	(bam-rmail-menus:do-it 'reply-function 'interactive)
X	(bam-rmail-menus:do-it 'reply-function nil 'do-not-reply-to-CC)))
X    (if include-message-p
X	(progn
X	  (switch-to-buffer "*mail*")
X	  (call-interactively 'mail-yank-original))))
X
X(defun bam-rmail-menus:rmail-forward ()
X  (cond ((eq major-mode 'rmail-summary-mode)
X	 (bam-rmail-menus:do-it 'rmail-summary-forward 'interactive))
X	(t
X	 (bam-rmail-menus:do-it 'rmail-forward 'interactive))))
X
X      
END_OF_FILE
if test 14882 -ne `wc -c <'bam-2.0/menus/rmail-menus.el'`; then
    echo shar: \"'bam-2.0/menus/rmail-menus.el'\" unpacked with wrong size!
fi
# end of 'bam-2.0/menus/rmail-menus.el'
fi
echo shar: End of archive 7 \(of 7\).
cp /dev/null ark7isdone
MISSING=""
for I in 1 2 3 4 5 6 7 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 7 archives.
    rm -f ark[1-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0

exit 0 # Just in case...
