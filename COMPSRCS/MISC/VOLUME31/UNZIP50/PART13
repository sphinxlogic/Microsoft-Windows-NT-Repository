Newsgroups: comp.sources.misc
From: zip-bugs@cs.ucla.edu (Info-ZIP group)
Subject:  v31i116:  unzip50 - Info-ZIP portable UnZip, version 5.0, Part13/14
Message-ID: <1992Aug24.025836.25347@sparky.imd.sterling.com>
X-Md4-Signature: 1b341038a370ce875fb7bde5b4220895
Date: Mon, 24 Aug 1992 02:58:36 GMT
Approved: kent@sparky.imd.sterling.com

Submitted-by: zip-bugs@cs.ucla.edu (Info-ZIP group)
Posting-number: Volume 31, Issue 116
Archive-name: unzip50/part13
Supersedes: unzip: Volume 29, Issue 31-42
Environment: UNIX, VMS, OS/2, MS-DOS, MACINTOSH, WIN-NT, LINUX, MINIX, COHERENT AMIGA?, !ATARI, symlink, SGI, DEC, Cray, Convex, Amdahl, Sun

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# Contents:  AMIGA/Contents AMIGA/DMakefile AMIGA/lmkfile
#   AMIGA/patch.pw AMIGA/readme.pw ATARI/Contents.UU
#   ATARI/Makefile.st.UU ATARI/makeit.UU ATARI/unzip.lnk.UU
#   MAC/mpw.make.UU MAC/thinkc.rsrc.hqx MSDOS/Contents
#   MSDOS/bcc/tcconfig.tc.UU MSDOS/makefile.bcc MSDOS/makefile.qc
#   MSDOS/tcc/unzip.tc.UU MSDOS/tcc/unzip_cr.prj
#   MSDOS/tcc/unzip_cr.tc.UU MSDOS/tcc/zi_make.bat
#   MSDOS/tcc/zipinfo.tc.UU NT/makefile.nt VMS/Contents
#   VMS/bilf/make_bilf.com VMS/descrip.mms VMS/make_gcc_unzip.com
#   VMS/make_vaxc_unzip.com VMS/makefile funzip.1 funzip.doc
# Wrapped by kent@sparky on Sun Aug 23 21:09:36 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 13 (of 14)."'
if test -f 'AMIGA/Contents' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'AMIGA/Contents'\"
else
  echo shar: Extracting \"'AMIGA/Contents'\" \(1150 characters\)
  sed "s/^X//" >'AMIGA/Contents' <<'END_OF_FILE'
XContents of the AMIGA sub-archive for UnZip 5.0 and later:
X
X  Contents      this file
X  DMakefile     DICE compiler makefile for UnZip
X  lmkfile       SAS/C makefile for UnZip
X  patch.pw      Paul Wells _TZ patch, subsequently modified (see below)
X  readme.pw     Paul Wells comments
X  stat.c        stat() function for Paul Wells port
X  utime.c       utime() function for Paul Wells port
X
XNotes:  Paul Wells' original Amiga port for SAS/C and Lattice C (I think)
Xwas subsequently modified for another compiler (probably DICE by Georg
XSassen), and possibly no longer compiles under the original compilers.
XThe suspect code is in file_io.c and has to do with Paul's _TZ code, which
Xis presently commented out and replaced by a specialized SetFileDate call.
XThe file patch.pw will give you some idea of how the code originally looked.
XPresumably all three compilers have predefined macros which identify them,
Xso there need not be any conflict; but there may be one at the moment.
X
XNote also that the DICE compiler version does not require either of the
Xtwo source files included here, and that none of the Amiga stuff has been
Xtested since UnZip 4.1.
END_OF_FILE
  if test 1150 -ne `wc -c <'AMIGA/Contents'`; then
    echo shar: \"'AMIGA/Contents'\" unpacked with wrong size!
  fi
  # end of 'AMIGA/Contents'
fi
if test -f 'AMIGA/DMakefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'AMIGA/DMakefile'\"
else
  echo shar: Extracting \"'AMIGA/DMakefile'\" \(854 characters\)
  sed "s/^X//" >'AMIGA/DMakefile' <<'END_OF_FILE'
X# DMakefile for UnZip 5.x with Amiga DICE compiler                 24 June 1992
X#
X# Not tested since v4.1.  Edit directories as required.
X#
X#Georg Sassen, D-5100 Aachen,+49-241-875158 subnet: georg@bluemoon.tunix.sub.org
X#georg@bluemoon.GUN.de, georg@cip-s01.informatik.rwth-aachen.de, 2:242/7.11@fido
X
XCRYPTF =
XCRYPTC =
X# Uncomment following two lines for decryption version:
X#CRYPTF = -DCRYPT
X#CRYPTC = crypt.c
X
XEXE = DH0:bin/unzip
XOD  = dtmp:unzip/
XSRC1 = unzip.c $(CRYPTC) envargs.c explode.c extract.c file_io.c inflate.c
XSRC2 = mapname.c match.c misc.c unreduce.c unshrink.c
XSRCS = $(SRC1) $(SRC2)
XCFLAGS = -mD $(CRYPTF)
XOBJS = $(SRCS:"*.c":"$(OD)*.o") $(SRCS:"*.a":"$(OD)*.o")
X
Xall : $(EXE)
X
X$(OBJS) : $(SRCS) unzip.h zip.h
X    dcc $(CFLAGS) -c -o %(left) %(right)
X
X$(EXE) : $(OBJS)
X    dcc $(CFLAGS) -o %(left) %(right)
X
Xclean:
X    rm -v $(OBJS)
END_OF_FILE
  if test 854 -ne `wc -c <'AMIGA/DMakefile'`; then
    echo shar: \"'AMIGA/DMakefile'\" unpacked with wrong size!
  fi
  # end of 'AMIGA/DMakefile'
fi
if test -f 'AMIGA/lmkfile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'AMIGA/lmkfile'\"
else
  echo shar: Extracting \"'AMIGA/lmkfile'\" \(1502 characters\)
  sed "s/^X//" >'AMIGA/lmkfile' <<'END_OF_FILE'
X# Makefile for UnZip 5.x using SAS/C 5.10a                       24 June 1992
X#
X# Not tested since UnZip 4.1.  May need to change directory names for stat.c
X# and utime.c.
X
X#####################
X# MACRO DEFINITIONS #
X#####################
X
XCRYPTF =
XCRYPTO =
X# Uncomment following two lines for decryption version:
X#CRYPTF = -DCRYPT
X#CRYPTO = crypt.o
X
XCC = lc
XCFLAGS = -O -DUNIX $(CRYPTF) -v -m0t -cuaisfr -rr
XLD = blink
XLDFLAGS = TO unzip FROM LIB:c.o
XLDFLAGS2 = LIB LIB:lc.lib LIB:amiga.lib
XEXE =
XO = .o
XOBJS = unzip$O $(CRYPTO) envargs$O explode$O extract$O file_io$O inflate$O\
X       mapname$O match$O misc$O unreduce$O unshrink$O utime$O stat$O
X
X###############################################
X# BASIC COMPILE INSTRUCTIONS AND DEPENDENCIES #
X###############################################
X
X.c$O :
X        $(CC) -o$@ $(CFLAGS) $*.c
X
Xunzip$(EXE):    $(OBJS)
X        $(LD) $(LDFLAGS) $(OBJS) $(LDFLAGS2)
X
Xcrypt$O:        crypt.c unzip.h zip.h	# may or may not be in distribution
Xenvargs$O:      envargs.c unzip.h
Xexplode$O:      explode.c unzip.h
Xextract$O:      extract.c unzip.h
Xfile_io$O:      file_io.c unzip.h
Xinflate$O:      inflate.c unzip.h
Xmapname$O:      mapname.c unzip.h
Xmatch$O:        match.c unzip.h
Xmisc$O:         misc.c unzip.h
Xunreduce$O:     unreduce.c unzip.h
Xunshrink$O:     unshrink.c unzip.h
Xunzip$O:        unzip.c unzip.h
Xstat$O:         amiga/stat.c	# may need to change or remove directory name
Xutime$O:        amiga/utime.c	# may need to change or remove directory name
END_OF_FILE
  if test 1502 -ne `wc -c <'AMIGA/lmkfile'`; then
    echo shar: \"'AMIGA/lmkfile'\" unpacked with wrong size!
  fi
  # end of 'AMIGA/lmkfile'
fi
if test -f 'AMIGA/patch.pw' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'AMIGA/patch.pw'\"
else
  echo shar: Extracting \"'AMIGA/patch.pw'\" \(786 characters\)
  sed "s/^X//" >'AMIGA/patch.pw' <<'END_OF_FILE'
X*** v41/file_io.c Mon May 20 22:01:51 1991
X--- v41a/file_io.c Mon May 20 22:53:32 1991
X***************
X*** 719,727 ****
X  #ifdef BSD
X      static struct timeb tbp;
X  #else
X      extern long timezone;
X  #endif
X! 
X  
X      close(outfd);
X  
X--- 720,731 ----
X  #ifdef BSD
X      static struct timeb tbp;
X  #else
X+ #ifdef AMIGA
X+     extern char *_TZ;
X+ #else
X      extern long timezone;
X  #endif
X! #endif
X  
X      close(outfd);
X  
X***************
X*** 794,799 ****
X--- 798,806 ----
X     ftime(&tbp);
X     m_time += tbp.timezone * 60L;
X  #else                                   /* !BSD */
X+ #ifdef AMIGA
X+     _TZ = getenv("TZ");
X+ #endif
X      tzset();                            /* Set `timezone'. */
X      m_time += timezone;                 /* account for timezone differences */
X  #endif
END_OF_FILE
  if test 786 -ne `wc -c <'AMIGA/patch.pw'`; then
    echo shar: \"'AMIGA/patch.pw'\" unpacked with wrong size!
  fi
  # end of 'AMIGA/patch.pw'
fi
if test -f 'AMIGA/readme.pw' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'AMIGA/readme.pw'\"
else
  echo shar: Extracting \"'AMIGA/readme.pw'\" \(940 characters\)
  sed "s/^X//" >'AMIGA/readme.pw' <<'END_OF_FILE'
XDate: Tue, 21 May 91 12:46:10 EST
XFrom: mailrus!gatech!simcity!paul@uunet.UU.NET (Paul Wells)
XSubject: mods for unzip 4.1 for Amiga
XMessage-ID: <9105211746.AA03598@simcity.UUCP>
X
XPlease find enclosed a shar file for Amiga SAS/C 5.10a.  Two source files
Xfor the Amiga are included:  utime.c, so we can alter the date of a file,
Xand stat.c, which isn't really needed for the SAS compiler, but is necessary
Xfor the Lattice.  Sorry, sys/stat.h is not mine, hence, not included; utime.c
Xand stat.c are my original code and released to the public domain.  The patches
Xpertain primarily to ANSI prototyping; however, please note that the SAS
Xcompiler doesn't know what a dup function is.  Everything was compiled with
X-DUNIX -DNOTINT16 and other appropriate SAS/C flags, as noted in lmkfile.
XI hope this is useful for others, but apologize if I didn't get there first.
X
XPaul Wells
X..!gatech!wa4mei!paulw         (or)
X..!gatech!wa4mei!simcity!paul
END_OF_FILE
  if test 940 -ne `wc -c <'AMIGA/readme.pw'`; then
    echo shar: \"'AMIGA/readme.pw'\" unpacked with wrong size!
  fi
  # end of 'AMIGA/readme.pw'
fi
if test -f 'ATARI/Contents.UU' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'ATARI/Contents.UU'\"
else
  echo shar: Extracting \"'ATARI/Contents.UU'\" \(1901 characters\)
  sed "s/^X//" >'ATARI/Contents.UU' <<'END_OF_FILE'
Xbegin 666 ATARI/Contents
XM0V]N=&5N=',@;V8@=&AE($%405))('-U8BUA<F-H:79E(&9O<B!5;EII<" T
XM+C$Z#0H-"B @0V]N=&5N=',@(" @('1H:7,@9FEL90T*("!!=&%R:5-4+G!A
XM=" @<&%T8VAE<R!T;R!5;EII<" T+C$@9F]R($%T87)I(%-4#0H@($UA:V5F
XM:6QE+G-T("!-87)K(%=I;&QI86US(&UA:V5F:6QE(&9O<B!4=7)B;R!#(&-O
XM;7!I;&5R#0H@(&UA:V5I=" @(" @("!S:6UP;&4@8V]M;6%N9"!S8W)I<'0@
XM=&\@;6%K92!5;EII< T*("!214%$344N<W)C(" @;F]T97,@9G)O;2!-87)T
XM:6X@4V-H=6QZ(&]N(&AI<R!P871C:&5S#0H@('1C+F-F9R @(" @("!4=7)B
XM;R!#(&=E;F5R86P@8V]N9FEG=7)A=&EO;B!F:6QE(&9O<B!5;EII<" H8FEN
XM87)Y*0T*("!U;GII<"YL;FL@(" @<F5F97)R960@=&\@87,@(E1,24Y++D]0
XM5"(@:6X@;F]T97,_/PT*("!U;GII<"YP<FH@(" @5'5R8F\@0R!P<F]J96-T
XM(&9I;&4@9F]R(%5N6FEP#0H-"D%L;"!M871E<FEA;"!I;B!T:&ES('-U8BUA
XM<F-H:79E('=A<R!P<F]V:61E9"!B>2!-87)T:6X@4V-H=6QZ+@T*56YF;W)T
XM=6YA=&5L>2P@:&ES('!A=&-H97,@86=A:6YS="!V-"XQ(&%R<FEV960@:G5S
XM="!A<R!V-"XR('=A<R -"G)E;&5A<V5D(&%S(&$@9FEN86P@(F9E871U<F4M
XM9G)E97IE(B!B971A+"!T;V\@;&%T92!T;R!I;F-O<G!O<F%T92X-"E-I;F-E
XM('1H92!F:6QE<R!F;W(@56Y::7 @:&%V92!C:&%N9V5D(&-O;G-I9&5R86)L
XM>2!B971W965N('9E<BT-"G-I;VYS+2UI;B!P87)T:6-U;&%R+"!U;GII<"YC
XM+"!E>'1R86-T+F,@86YD(&9I;&5?:6\N8RTM=&AE('!A=&-H97,-"G!R;W9I
XM9&5D(&AE<F4@=VEL;"!F86EL(&UI<V5R86)L>2X@(%=E('=I;&PL(&AO=V5V
XM97(L('-E92!W:&%T('=E#0IC86X@9&\@=&\@:6YC;W)P;W)A=&4@;6]S="!O
XM9B!T:&5M(&)E9F]R92!V-2XP+@T*#0I4:&4@;F]N+4%T87)I('!A=&-H97,@
XM;65N=&EO;F5D(&EN($UA<G1I;B=S(')E861M92!F:6QE(&%R92!N;W0-"FEN
XM8VQU9&5D(&AE<F4N("!";W1H('1H92!5;FEX(&)L86YK<R!P871C:"!A;F0@
XM=&AE('-Y;6)O;&EC(&QI;FMS#0IP871C:&5S(&%R92!N;R!L;VYG97(@;F5C
XM97-S87)Y("AA8W1U86QL>2P@=&AE<F4@:7,@82!B=6<@:6X@=&AE#0IE>&ES
XM=&EN9R!S>6UB;VQI8R!L:6YK<R!C;V1E+2UI="!W;VXG="!D;R!C;VUP<F5S
XM<V5D(&QI;FMS('!R;W!E<FQY#0HM+6)U="!T:&ES(&ES(&$@<F%R92!P<F]B
XM;&5M*3L@=&AE(&]P=&EM:7IA=&EO;B!P871C:"!I<R!O;B!H;VQD#0IB=70@
XM=VEL;"!P<F]B86)L>2!B92!I;F-O<G!O<F%T960@:6X@=C4N,"!A<R!W96QL
XM+"!A<W-U;6EN9R!I= T*9&]E<VXG="!B<F5A:R!A;GD@;W1H97(@<WES=&5M
X$<RX-"G-U
X 
Xend
END_OF_FILE
 if test 1901 -ne `wc -c <'ATARI/Contents.UU'`; then
    echo shar: \"'ATARI/Contents.UU'\" unpacked with wrong size!
  else
    echo shar: Uudecoding \"'ATARI/Contents'\" \(1354 characters\)
    cat ATARI/Contents.UU | uudecode
    if test 1354 -ne `wc -c <'ATARI/Contents'`; then
      echo shar: \"'ATARI/Contents'\" uudecoded with wrong size!
    else
      rm ATARI/Contents.UU
    fi
  fi
  # end of 'ATARI/Contents.UU'
fi
if test -f 'ATARI/Makefile.st.UU' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'ATARI/Makefile.st.UU'\"
else
  echo shar: Extracting \"'ATARI/Makefile.st.UU'\" \(1622 characters\)
  sed "s/^X//" >'ATARI/Makefile.st.UU' <<'END_OF_FILE'
Xbegin 666 ATARI/Makefile.st
XM(R @36%K969I;&4N<W0)36%K969I;&4@9F]R(%5N6FEP(#0N,"P-"B,@('5S
XM:6YG(%1U<F)O($,@,BXP(&9O<B!T:&4@071A<FD@4U0@86YD#0HC("!M86ME
XM(&9R;VT@=&AE($UA<FL@5VEL;&EA;7,@0R S+CD@*'-O<G)Y(&9O<B!T:&%T
XM(&UI>'1U<F4I#0HC#0H-"B,@55!015)#05-%(&9I;&4@;F%M97,@9F%C:6QI
XM=&%T92!41"=S('5N9&5R<W1A;F1I;F<@;V8@;6]D=6QE<RX-"BY3549&25A%
XM4SH@+F\@+D\@+F,@+D,@+G,-"@T*5$-(3TU%"3T@13I<=&,-"@T*(R,C(R,C
XM(R,C(R,C(R,C(R,C(R,C#0HC($U!0U)/($1%1DE.251)3TY3(",-"B,C(R,C
XM(R,C(R,C(R,C(R,C(R,C(PT*#0I#0PD]('1C8PT*(T-&3$%'4PD]("U$051!
XM4DE?4U0],2 M62 M23TD*%1#2$]-12E<:6YC;'5D90T*0T9,04=3"3T@+41!
XM5$%225]35#TQ("U)/20H5$-(3TU%*5QI;F-L=61E#0HC3$9,04=3"3T@+4P@
XM+5D-"DQ&3$%'4PD]#0I,24()/2 D*%1#2$]-12E<;&EB#0I,1 D]('1L:6YK
XM#0H-"D]"2E,@/2!U;GII<"YO(&9I;&5?:6\N;R!M87!N86UE+F\@;6%T8V@N
XM;R!M:7-C+F]<#0H@(" @(" @=6YI;7!L;V0N;R!U;G)E9'5C92YO('5N<VAR
XM:6YK+F\-"@T*#0HC(R,C(R,C(R,C(R,C(R,C(R,C(R,C(R,C(R,C(R,C(R,C
XM(R,C(R,C(R,C(R,C(PT*(R!"05-)0R!#3TU024Q%($E.4U1254-424].4R!!
XM3D0@1$5014Y$14Y#2453(",-"B,C(R,C(R,C(R,C(R,C(R,C(R,C(R,C(R,C
XM(R,C(R,C(R,C(R,C(R,C(R,C(R,C#0H-"D%,3 DZ('5N>FEP+G!R9PT*"65C
XM:&\@9&]N90T*#0IU;GII<"YO.B @(" @('5N>FEP+F,@=6YZ:7 N: T*#0IF
XM:6QE7VEO+F\Z(" @(&9I;&5?:6\N8R!U;GII<"YH#0H-"FUA<&YA;64N;SH@
XM(" @;6%P;F%M92YC('5N>FEP+F@-"@T*;6%T8V@N;SH@(" @("!M871C:"YC
XM('5N>FEP+F@-"@T*;6ES8RYO.B @(" @("!M:7-C+F,@=6YZ:7 N: T*#0IU
XM;FEM<&QO9"YO.B @('5N:6UP;&]D+F,@=6YZ:7 N: T*#0IU;G)E9'5C92YO
XM.B @('5N<F5D=6-E+F,@=6YZ:7 N: T*#0IU;G-H<FEN:RYO.B @('5N<VAR
XM:6YK+F,@=6YZ:7 N: T*#0IU;GII<"YP<F<Z(" @(" D*$]"2E,I#0H)=&QI
XM;FL@+4\])$ @)"A,1DQ!1U,I("U3/3@Q.3(@+4,]=6YZ:7 N;&YK#0H-"BYC
X:+F\Z#0H)=&-C("0H0T9,04=3*2 D/ T*#0H@
X 
Xend
END_OF_FILE
 if test 1622 -ne `wc -c <'ATARI/Makefile.st.UU'`; then
    echo shar: \"'ATARI/Makefile.st.UU'\" unpacked with wrong size!
  else
    echo shar: Uudecoding \"'ATARI/Makefile.st'\" \(1151 characters\)
    cat ATARI/Makefile.st.UU | uudecode
    if test 1151 -ne `wc -c <'ATARI/Makefile.st'`; then
      echo shar: \"'ATARI/Makefile.st'\" uudecoded with wrong size!
    else
      rm ATARI/Makefile.st.UU
    fi
  fi
  # end of 'ATARI/Makefile.st.UU'
fi
if test -f 'ATARI/makeit.UU' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'ATARI/makeit.UU'\"
else
  echo shar: Extracting \"'ATARI/makeit.UU'\" \(597 characters\)
  sed "s/^X//" >'ATARI/makeit.UU' <<'END_OF_FILE'
Xbegin 666 ATARI/makeit
XM=&-C("U$051!4DE?4U0],2 M23U%.EQT8UQI;F-L=61E('5N>FEP+F,-"G1C
XM8R M1$%405))7U-4/3$@+4D]13I<=&-<:6YC;'5D92!F:6QE7VEO+F,-"G1C
XM8R M1$%405))7U-4/3$@+4D]13I<=&-<:6YC;'5D92!M87!N86UE+F,-"G1C
XM8R M1$%405))7U-4/3$@+4D]13I<=&-<:6YC;'5D92!M871C:"YC#0IT8V,@
XM+41!5$%225]35#TQ("U)/44Z7'1C7&EN8VQU9&4@;6ES8RYC#0IT8V,@+41!
XM5$%225]35#TQ("U)/44Z7'1C7&EN8VQU9&4@=6YI;7!L;V0N8PT*=&-C("U$
XM051!4DE?4U0],2 M23U%.EQT8UQI;F-L=61E('5N<F5D=6-E+F,-"G1C8R M
XM1$%405))7U-4/3$@+4D]13I<=&-<:6YC;'5D92!U;G-H<FEN:RYC#0IT;&EN
XM:R M3SUU;GII<"YP<F<@("U3/3@Q.3(@+4,]=6YZ:7 N;&YK#0IE8VAO(&1O
X$;F4-"CUU
X 
Xend
END_OF_FILE
 if test 597 -ne `wc -c <'ATARI/makeit.UU'`; then
    echo shar: \"'ATARI/makeit.UU'\" unpacked with wrong size!
  else
    echo shar: Uudecoding \"'ATARI/makeit'\" \(409 characters\)
    cat ATARI/makeit.UU | uudecode
    if test 409 -ne `wc -c <'ATARI/makeit'`; then
      echo shar: \"'ATARI/makeit'\" uudecoded with wrong size!
    else
      rm ATARI/makeit.UU
    fi
  fi
  # end of 'ATARI/makeit.UU'
fi
if test -f 'ATARI/unzip.lnk.UU' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'ATARI/unzip.lnk.UU'\"
else
  echo shar: Extracting \"'ATARI/unzip.lnk.UU'\" \(310 characters\)
  sed "s/^X//" >'ATARI/unzip.lnk.UU' <<'END_OF_FILE'
Xbegin 666 ATARI/unzip.lnk
XM93I<=&-<;&EB7&UY<W1A<G0N;PT*=6YZ:7 N;PT*9FEL95]I;RYO#0IM87!N
XM86UE+F\-"FUA=&-H+F\-"FUI<V,N;PT*=6YI;7!L;V0N;PT*=6YR961U8V4N
XM;PT*=6YS:')I;FLN;PT*93I<=&-<;&EB7'1C<W1D;&EB+FQI8@T*93I<=&-<
XM;&EB7'1C97AT;&EB+FQI8@T*93I<=&-<;&EB7'1C=&]S;&EB+FQI8@T*93I<
X5=&-<;&EB7'1C<W1D;&EB+FQI8@T*
X 
Xend
END_OF_FILE
 if test 310 -ne `wc -c <'ATARI/unzip.lnk.UU'`; then
    echo shar: \"'ATARI/unzip.lnk.UU'\" unpacked with wrong size!
  else
    echo shar: Uudecoding \"'ATARI/unzip.lnk'\" \(201 characters\)
    cat ATARI/unzip.lnk.UU | uudecode
    if test 201 -ne `wc -c <'ATARI/unzip.lnk'`; then
      echo shar: \"'ATARI/unzip.lnk'\" uudecoded with wrong size!
    else
      rm ATARI/unzip.lnk.UU
    fi
  fi
  # end of 'ATARI/unzip.lnk.UU'
fi
if test -f 'MAC/mpw.make.UU' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MAC/mpw.make.UU'\"
else
  echo shar: Extracting \"'MAC/mpw.make.UU'\" \(2023 characters\)
  sed "s/^X//" >'MAC/mpw.make.UU' <<'END_OF_FILE'
Xbegin 666 MAC/mpw.make
XM(R @(%1H:7,@35!7(&UA:V5F:6QE(&ES(&1E<VEG;F5D('1O(&)E('5S960@
XM=&\@8V]M<&EL92!A;B!-4%<@=F5R<VEO;@HC(" @;V8@=6YZ:7 @=7-I;F<@
XM=&AE($U05R!#(&-O;7!I;&5R+"!V97)S:6]N(#,N,BX@4VEM<&QY(')E;F%M
XM90HC(" @=&AI<R!F:6QE(&%S('5N>FEP+FUA:V4@86YD(&1O(&%N($U05R!B
XM=6EL9"X*"@HC(" @1FEL93H@(" @(" @=6YZ:7 N;6%K90HC(" @5&%R9V5T
XM.B @(" @56YZ:7 *(R @(%-O=7)C97,Z(" @('5N>FEP+F,*(R @(" @(" @
XM(" @(" @(&-R>7!T+F,*(R @(" @(" @(" @(" @(&5N=F%R9W,N8PHC(" @
XM(" @(" @(" @(" @97AP;&]D92YC"B,@(" @(" @(" @(" @("!E>'1R86-T
XM+F,*(R @(" @(" @(" @(" @(&9I;&5?:6\N8PHC(" @(" @(" @(" @(" @
XM:6YF;&%T92YC"B,@(" @(" @(" @(" @("!M86-F:6QE+F,*(R @(" @(" @
XM(" @(" @(&UA8W-T870N8PHC(" @(" @(" @(" @(" @;6%P;F%M92YC"B,@
XM(" @(" @(" @(" @("!M871C:"YC"B,@(" @(" @(" @(" @("!M:7-C+F,*
XM(R @(" @(" @(" @(" @('5N<F5D=6-E+F,*(R @(" @(" @(" @(" @('5N
XM<VAR:6YK+F,*(R @($-R96%T960Z(" @($9R:61A>2P@36%Y(#DL(#$Y.3(@
XM.3HP,#HP,"!030H*"D-&3$%'4R ]("UD($U05R C("UD($-265!4"@I,1DQ!
XM1U,@/2 M;0H*"BYC+F\@Q" N8R!U;GII<"YH('5N>FEP+FUA:V4*(" @(" @
XM("!#('M#1DQ!1U-]('M$969A=6QT?2YC"@I/0DI%0U13(#T@M@H@(" @(" @
XM('5N>FEP+F,N;R"V"B,@(" @(" @8W)Y<'0N8RYO(+8*(" @(" @("!E;G9A
XM<F=S+F,N;R"V"B @(" @(" @97AP;&]D92YC+F\@M@H@(" @(" @(&5X=')A
XM8W0N8RYO(+8*(" @(" @("!F:6QE7VEO+F,N;R"V"B @(" @(" @:6YF;&%T
XM92YC+F\@M@H@(" @(" @(&UA8V9I;&4N8RYO(+8*(" @(" @("!M86-S=&%T
XM+F,N;R"V"B @(" @(" @;6%P;F%M92YC+F\@M@H@(" @(" @(&UA=&-H+F,N
XM;R"V"B @(" @(" @;6ES8RYC+F\@M@H@(" @(" @('5N<F5D=6-E+F,N;R"V
XM"B @(" @(" @=6YS:')I;FLN8RYO"@I5;GII<"#$('M/0DI%0U13?2!U;GII
XM<"YR"B @(" @(" @3&EN:R M9" M8R G35!3("<@+70@35!35""V"B @(" @
XM(" @(" @(" @("![3T)*14-44WT@M@H@(" @(" @(" @(" @(" @(GM#3&EB
XM<F%R:65S?2)3=&1#;&EB+F\@M@H@(" @(" @(" @(" @(" @(GM,:6)R87)I
XM97-](E-T=6)S+F\@M@H@(" @(" @(" @(" @(" @(GM,:6)R87)I97-](E)U
XM;G1I;64N;R"V"B @(" @(" @(" @(" @(" B>TQI8G)A<FEE<WTB26YT97)F
XM86-E+F\@M@H@(" @(" @(" @(" @(" @+6\@56YZ:7 *(" @(" @("!R97H@
XM+6%P<&5N9" M;R!5;GII<"!U;GII<"YR"@IU;GII<"YR(,0@=6YZ:7 N=&AI
XM;FMC+G)S<F,*(" @(" @("!D97)E>B!U;GII<"YT:&EN:V,N<G-R8R ^('5N
X&>FEP+G(*
X 
Xend
END_OF_FILE
 if test 2023 -ne `wc -c <'MAC/mpw.make.UU'`; then
    echo shar: \"'MAC/mpw.make.UU'\" unpacked with wrong size!
  else
    echo shar: Uudecoding \"'MAC/mpw.make'\" \(1446 characters\)
    cat MAC/mpw.make.UU | uudecode
    if test 1446 -ne `wc -c <'MAC/mpw.make'`; then
      echo shar: \"'MAC/mpw.make'\" uudecoded with wrong size!
    else
      rm MAC/mpw.make.UU
    fi
  fi
  # end of 'MAC/mpw.make.UU'
fi
if test -f 'MAC/thinkc.rsrc.hqx' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MAC/thinkc.rsrc.hqx'\"
else
  echo shar: Extracting \"'MAC/thinkc.rsrc.hqx'\" \(1105 characters\)
  sed "s/^X//" >'MAC/thinkc.rsrc.hqx' <<'END_OF_FILE'
X(This file must be converted with BinHex 4.0)
X
X:%A9ZHQP`,R4SD@jVBbjbFh*M!(*cFQ058d9%!*!)!`@QeJ#3"!%!N!-#M`!!!Bm
X!N!0fFR)T$3N*)#"l$3N*)*!%HLdqE%4TFNP%)$dJF'eT,4&eERTTF#jdD'PZDf-
XZFR0bB`)!N!0bFh*M8P0&4!%!N!0bFh*M8P0&4!%!!*`"!*!6TQrieJ#3"J-&DA0
Xd)#T`HLN0H`dJ)%eKBdPZCQmJ+R"YD5!p)'0KE'a[BbJJ-5`JFfPkC@pQ)#KcG(*
XeBh3J6@&M5@jQEbNT1`dJ)!dJ)'PQ)#K`E@NT$5!JH`dJN!4$5@jQEe"#8Q9M)'0
XTF'*b1`dJN!43BA*KE8*XEf0V8Q9M)("LFMX0)#!!N!-8"3#!!*!$!c8Z-!P9ERT
XTF#!e,M!!N!06"3#!!*!$'%PZCQmY@QP`*h-J9@jkDA!JCQpb)%eKBc0*EQC[,9T
XTF#Gc)&9ZHQP`)'C[FL"dD'8J6@&MD@jdEh0S,#"$Eh"jFQPRD(3JU6%j16)!N!0
X%"m!I-$m)I`4r"2m#r`,rrS(qJIj"r%(m)IJCm!I!!!!(`"r`2rKrr(rmrrlrr[r
XqrrlrrRrmIr`rq"r`"m!!N!-(!!F!N!0%"m!Im$riAr42j)I#Ji+"!S1#Km*2j&r
Xd2rJIm!I!!!!(`"r`2rKrr(rmrrlrr[rqrrlrrRrmIr`rq"r`"m!!N!-(!!F!N!0
X%"m!Cm#(i3Ia"r)(qJIlrr[m#r`*r"(m%2`JI-!I!!!!(`"r`2rKrr(rmrrlrr[r
XqrrlrrRrmIr`rq"r`"m!!N!-(!!F!N!0%"m!B-#!)F"ai22aqr[lrrT!$r(ji2(!
XF)!JB-!I!!!!(`"r`2rKrr(rmrrlrr[rqrrlrrRrmIr`rq"r`"m!!N!-(!!F!!!%
X!N!-#M`!!!Bm!N!0f!"`p)!4U!*!$(!"f!!&fCA*c!!%!%N098P-!!`!U!!(rr`#
X3!aJ!($[8!!,rr`#3"4`m)!#!rrm%!!"[!*!&JIrr"!!!Y`#3"B,rr`3!!2m!N!@
X$rrm%!!&(!*!%JiB:
END_OF_FILE
  if test 1105 -ne `wc -c <'MAC/thinkc.rsrc.hqx'`; then
    echo shar: \"'MAC/thinkc.rsrc.hqx'\" unpacked with wrong size!
  fi
  # end of 'MAC/thinkc.rsrc.hqx'
fi
if test -f 'MSDOS/Contents' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MSDOS/Contents'\"
else
  echo shar: Extracting \"'MSDOS/Contents'\" \(2453 characters\)
  sed "s/^X//" >'MSDOS/Contents' <<'END_OF_FILE'
XContents of the MSDOS sub-archive for UnZip 5.0 and later:
X
X  Contents          this file
X  Borland.fix       patches to fix Borland executables for grokking Unix EOLs
X  makefile          makefile for Turbo C and old Microsoft C
X  makefile.bcc      makefile for Borland C++
X  makefile.qc       makefile for Quick C and nmake
X  tcc/unzip.prj     Turbo C project file for UnZip
X  tcc/unzip.tc      Turbo C configuration file for UnZip (binary)
X  tcc/unzip_cr.prj  Turbo C project file for UnZip + decryption (need crypt.c)
X  tcc/unzip_cr.tc   Turbo C configuration file for UnZip + decryption (binary)
X  tcc/zi_make.bat   batch file to make ZipInfo with Turbo C
X  tcc/zipinfo.prj   Turbo C project file for ZipInfo
X  tcc/zipinfo.tc    Turbo C configuration file for ZipInfo (binary)
X  bcc/tcconfig.tc   BC++ general configuration file (binary)
X  bcc/unzip.prj     BC++ project file for UnZip (binary)
X  bcc/unzip_cr.prj  BC++ project file for UnZip/decryption (binary; need crypt)
X  bcc/zipinfo.prj   BC++ project file for ZipInfo (binary)
X
XNote:  despite the similarity in names to the corresponding Turbo C files,
Xthe Borland C++ files apparently are NOT compatible with the older compilers
X(although they seem to be compatible with Turbo C++).  So the old TC project
Xfiles are also included.  FOR BOTH COMPILERS, you must indicate "rebuild" for
Xunzip or zipinfo (whichever you do second), because the two misc.obj's are not
Xcompatible with each other.  This is not a problem if you use the makefile(s),
Xin which case zipinfo's is called misc_.obj, but (1) the project files are
Xmuch faster on older machines, and (2) the Turbo C makefile doesn't seem to 
Xwork properly yet.  As always, if anyone manages to make it go, please send
Xus your fixes.
X
XNote also:  for MSC 6.0 or later, use the msc_dos and zi_dos targets in the
Xmain Unix Makefile--with NMAKE, not MAKE.  The msc_dos target has been re-
Xwritten to use a response file in order to get around the DOS 128-character 
Xcommand-line limit, but the nmake command itself may have trouble.  Give it 
Xa try, however.
X
XOne last note:  the binary patches in Borland.fix are NOT required; they may
Xbe useful if you regularly deal with Unix sources, but casual users should
Xprobably make use of an external utility like Rahul Dhesi's FLIP to convert 
Xbetween Unix and DOS/OS2 end-of-line characters.  If you know how to patch
Xbinary executables, you should be able to figure out how to use these patches.
END_OF_FILE
  if test 2453 -ne `wc -c <'MSDOS/Contents'`; then
    echo shar: \"'MSDOS/Contents'\" unpacked with wrong size!
  fi
  # end of 'MSDOS/Contents'
fi
if test -f 'MSDOS/bcc/tcconfig.tc.UU' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MSDOS/bcc/tcconfig.tc.UU'\"
else
  echo shar: Extracting \"'MSDOS/bcc/tcconfig.tc.UU'\" \(2548 characters\)
  sed "s/^X//" >'MSDOS/bcc/tcconfig.tc.UU' <<'END_OF_FILE'
Xbegin 666 MSDOS/bcc/tcconfig.tc
XM5'5R8F\@0R!#;VYF:6=U<F%T:6]N($9I;&4@&@ !#1(7 1H   L( 'P D0$"
XM    D@$"  $ E0$!  26 0(   "7 0( &0"8 0(   "9 0( !P"< 00 .   
XM )T! @ " )\! @ ' * ! @ B Z$! @"'_Z(! @   *,! @   *0! @   *4!
XM 0  I@$"  $ IP$"    J $"    J0$"    __\   D EP,7 ^\"        
XM_\!____A?___X                     #_^___               !    
XM                 5@ %@"P !, _  : &0!& #$ 08  0 # @, _P$$ .T!
XM!0#Q 08 !0('  D""  ' @D :0(+ -P!# #' @X 90(/ .(!$ "U A$ WP$2
XM /L!$P#O 10 $ (6 -L"%P#X 1@ \P$9  L"&@#U 0X !P() &D"1P 2 D@ 
XM\0%) /L!2P#O 4T [0%/ !0"4 #S 5$ _P%2 -L"4P ) G,  P)T  4"=0 9
XM G8 'P)W !8"A  < AL 3P(" 28" P%5 @0!MP(( 5,""0%A @L!*@(, 2X"
XM$ '7 A$!MP(2 ;\"$P'G A0!.0(5 6,"%@%9 A<!NP(9 5T", !K C$ ;@(R
XM '$",P!T C0 =P(U 'H"-@!] C< @ (X (,".0"& @$!RP(" 40" P$? @0!
XM% (% 18"!@'# @L!2 (0 4P"$@$< A,!$@(8 1D"&0$. C  B0(Q (T",@"1
XM C, E0(T )D"-0"= C8 H0(W *4". "I CD K0(; ;$"'0&S @8!X0() =T"
XM#P$B A(!Y0(4 >,"%0'? @(" 0(# 0($ 1(!$0$3 10!5 %5 14!%@$9/0$:
XM/0$^5CT!/E<] 1<!& $I 2@!)1T!)@$G 1T!'@$S'P$S( $S(0$S(@$>.0T!
XM3BHL 4XK+ %.01X3*Q0=*BQ" 4Y!$1=+*Q<J+$(!,RX_ 3,O/P$T/P%; 5P!
XM+0$P+#\!,2P_ 3(_3@%% 48!.0T4 5,!-P !-P$!-P(!-P,!-P0!-P4!-P8!
XM-P<!-P@!-PD!-@ _ 38!/P$V C\!-@,_ 38$/P$V!3\!-@8_ 38'/P$V"#\!
XM-@D_ 4P!30$Y 0,!  $# @ ! P,  0,$  $#!0 ! P8  0,)  $#"@ ! PL 
XM 2,!1P%) 5(!4 %9 0,2  $#$P ! "\J*B\!*  I  %; %T  7L ?0 !/  ^
XM   B "(  "< )P "                                            
XM                                                            
XM                                                            
XM            "P#3 @AP('!X="0(<"!P>'0D<' @<'AT)!<7<1X73A\?&A,Q
XM,3!/  <'?P]_3@\/"A,Q,0<  #$Q*S$_3C\_.A,Q,0   #$Q*S$_3C\_.A,Q
XM,0     W/C >,0 Q,3$3$P  ,# ^,!XQ/S\Z,1,3?G .<0  =' ?<0 ?&A,Q
XM,0                                           #$Q*S$_3C\_.A,Q
XM,0   #$Q*S$_3C\_.A,Q,0   ']_ '      >C$Q$P   ']^<'YP?G]^>!,;
XM'APO+BLN("YX&R\?+Q\>$!X7'QHP/B\X/SXP/C@'!W '#P\/!P=P!P\/#P<'
XM< </#P\'!W '!W /#P]W#P\/<  '!W '#W /#P]W#P\'   '!W '#W /#P]W
XM#P\    '!W '#W /#P]W#P\    /!P\'< \/#P]W#P\   \'#P=P#P\/#W</
XM#W!P#W    \'<'< #P]W#P\                                     
XM       '!W '#W /#P]W#P\    '!W '#W /#P]W#P\    /< !P     '!W
XM#P\    /< =P!W /<'@'!P<'#W '< =P> =P#W '#P</> \/!P=P> ]P!P]X
XM"'@'>'AP#PAX!WAX< \(> =X>' /!P=P#P]P#P\/=P\/#W  !P=P!P\/#P\/
XM=P\/!P  !P=P!P\/#P\/=P\/    !P=P!P\/#P\/=P\/    #P</!W (#P\/
XM=P\/   /!P\'< @/#P]W#P]P< ]X   /!W!P  \/=P\/                
XM                            !P=P!P\/#P\/=P\/    !P=P!P\/#P\/
XM=P\/    #W  <     !P=P\/    #W '< =P#W!X!P<'!P]P!W '<'@'< ]P
X4!P\'#W@/#P<'<'@/< </>/__    
X 
Xend
END_OF_FILE
  if test 2548 -ne `wc -c <'MSDOS/bcc/tcconfig.tc.UU'`; then
    echo shar: \"'MSDOS/bcc/tcconfig.tc.UU'\" unpacked with wrong size!
  else
    echo shar: Uudecoding \"'MSDOS/bcc/tcconfig.tc'\" \(1820 characters\)
    cat MSDOS/bcc/tcconfig.tc.UU | uudecode
    if test 1820 -ne `wc -c <'MSDOS/bcc/tcconfig.tc'`; then
      echo shar: \"'MSDOS/bcc/tcconfig.tc'\" uudecoded with wrong size!
    else
      rm MSDOS/bcc/tcconfig.tc.UU
    fi
  fi
  # end of 'MSDOS/bcc/tcconfig.tc.UU'
fi
if test -f 'MSDOS/makefile.bcc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MSDOS/makefile.bcc'\"
else
  echo shar: Extracting \"'MSDOS/makefile.bcc'\" \(2249 characters\)
  sed "s/^X//" >'MSDOS/makefile.bcc' <<'END_OF_FILE'
X# Makefile for unzip and zipinfo for Borland C++ 3.0             Alvin Koh
X# Version: 5.0                                                26 June 1992
X#
X# Toad Hall: Works great for BC++ v2.0 too!  [some spaces should be tabs?]
X
X# make definitions
X
XCC = bcc
XTASM = tasm
XTLINK = tlink
XMODEL = s               # small model
X
XCRYPTO =
XCRYPTF =
X# definitions for crypt version
X#CRYPTO = crypt.obj
X#CRYPTF = -DCRYPT
X
X# compiler flags
X
XGENFLAGS = -m$(MODEL) -ff- -k- -wamb -wamp -wasm -wpro -wdef -wnod -wstv \
X           -wucp -wuse -P-.C
XCFLAGS = $(GENFLAGS) $(CRYPTF)
XZIFLAGS = $(GENFLAGS) -K -d -wcln -wsig -DZIPINFO
X
X# implicit rules
X
X.c.obj:
X        $(CC) -c $(CFLAGS) {$< }
X
X# list macros
X
Xunzip_dependencies = \
X        unzip.obj $(CRYPTO) \
X        envargs.obj \
X        explode.obj \
X        extract.obj \
X        file_io.obj \
X        inflate.obj \
X        mapname.obj \
X        match.obj \
X        misc.obj \
X        unreduce.obj \
X        unshrink.obj
X
Xzipinfo_dependencies = \
X        zipinfo.obj \
X        envargs.obj \
X        match.obj \
X        misc_.obj
X
X# explicit rules
X
Xall:    unzip.exe zipinfo.exe
X
Xunzip.exe:      $(unzip_dependencies)
X        $(TLINK) /x/n/c/d/P- @&&|
Xc0$(MODEL).obj+
Xunzip.obj $(CRYPTO)+
Xenvargs.obj+
Xexplode.obj+
Xextract.obj+
Xfile_io.obj+
Xinflate.obj+
Xmapname.obj+
Xmatch.obj+
Xmisc.obj+
Xunreduce.obj+
Xunshrink.obj
Xunzip.exe
X                # no map file
Xemu.lib+
Xmath$(MODEL).lib+
Xc$(MODEL).lib
X|
X
Xzipinfo.exe:    $(zipinfo_dependencies)
X        $(TLINK) /x/n/c/d/P- @&&|
Xc0$(MODEL).obj+
Xzipinfo.obj+
Xenvargs.obj+
Xmatch.obj+
Xmisc_.obj
Xzipinfo.exe
X                # no map file
Xemu.lib+
Xmath$(MODEL).lib+
Xc$(MODEL).lib
X|
X
X# individual file dependencies
X
Xunzip.obj:      unzip.c unzip.h
Xcrypt.obj:      crypt.c unzip.h zip.h
Xenvargs.obj:    envargs.c unzip.h
Xexplode.obj:    explode.c unzip.h
Xextract.obj:    extract.c unzip.h
Xfile_io.obj:    file_io.c unzip.h
Xinflate.obj:    inflate.c unzip.h
Xmapname.obj:    mapname.c unzip.h
Xmatch.obj:      match.c unzip.h
Xmisc.obj:       misc.c unzip.h
Xunreduce.obj:   unreduce.c unzip.h
Xunshrink.obj:   unshrink.c unzip.h
X
Xzipinfo.obj:    zipinfo.c unzip.h
X        $(CC) -c $(ZIFLAGS) zipinfo.c
X
Xmisc_.obj:      misc.c unzip.h
X        $(CC) -c $(ZIFLAGS) -omisc_.obj misc.c
END_OF_FILE
  if test 2249 -ne `wc -c <'MSDOS/makefile.bcc'`; then
    echo shar: \"'MSDOS/makefile.bcc'\" unpacked with wrong size!
  fi
  # end of 'MSDOS/makefile.bcc'
fi
if test -f 'MSDOS/makefile.qc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MSDOS/makefile.qc'\"
else
  echo shar: Extracting \"'MSDOS/makefile.qc'\" \(1113 characters\)
  sed "s/^X//" >'MSDOS/makefile.qc' <<'END_OF_FILE'
X# From: Richard A Seay <g0rick@cdf.toronto.edu>, 4 Apr 92
X#
X# I successfully compiled both Zip and UnZip for MSDOS using the Microsoft
X# Quick C 2.0 compiler and linker.  Here are the NMAKE files that I used.
X
XPROJ	=UNZIP
XCC	=qcl
XCFLAGS  = /AS /W1 /Za /Olt
XLFLAGS  = /NOI /E
XOBJS_EXT =
XLIBS_EXT =
X
Xall:	$(PROJ).exe
X
Xunzip.obj:      unzip.c unzip.h
X
Xenvargs.obj:    envargs.c unzip.h
X
Xexplode.obj:    explode.c unzip.h
X
Xextract.obj:    extract.c unzip.h
X
Xfile_io.obj:    file_io.c unzip.h
X
Xinflate.obj:    inflate.c unzip.h
X
Xmapname.obj:    mapname.c unzip.h
X
Xmatch.obj:      match.c unzip.h
X
Xmisc.obj:       misc.c unzip.h
X
Xunreduce.obj:   unreduce.c unzip.h
X
Xunshrink.obj:   unshrink.c unzip.h
X
X$(PROJ).exe:	unzip.obj envargs.obj explode.obj extract.obj file_io.obj\
X	inflate.obj mapname.obj match.obj misc.obj unreduce.obj unshrink.obj\
X	$(OBJS_EXT)
X	echo >NUL @<<$(PROJ).crf
Xunzip.obj +
Xenvargs.obj +
Xexplode.obj +
Xextract.obj +
Xfile_io.obj +
Xinflate.obj +
Xmapname.obj +
Xmatch.obj +
Xmisc.obj +
Xunreduce.obj +
Xunshrink.obj +
X$(OBJS_EXT)
X$(PROJ).exe
X$(LIBS_EXT);
X<<
X	link $(LFLAGS) @$(PROJ).crf
X	del $(PROJ).crf
END_OF_FILE
  if test 1113 -ne `wc -c <'MSDOS/makefile.qc'`; then
    echo shar: \"'MSDOS/makefile.qc'\" unpacked with wrong size!
  fi
  # end of 'MSDOS/makefile.qc'
fi
if test -f 'MSDOS/tcc/unzip.tc.UU' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MSDOS/tcc/unzip.tc.UU'\"
else
  echo shar: Extracting \"'MSDOS/tcc/unzip.tc.UU'\" \(2367 characters\)
  sed "s/^X//" >'MSDOS/tcc/unzip.tc.UU' <<'END_OF_FILE'
Xbegin 666 MSDOS/tcc/unzip.tc
XM5'5R8F\@0R!#;VYF:6=U<F%T:6]N($9I;&4@&@ !#1(7 1H  @$!  (    "
XM  (  0 #  (  @ $  $   4  0  !@ !   (  $  0D  @    T  @ !  X 
XM @   !$  0 $$@ "    $P " !D %  "  $ %0 "  $ %@ "  ( %P "    
XM&  "    9  !  %E  $  68  0 !9P !  %H  $  6D  0 !:@ !  %K  $ 
XM 6P  0 !;0 !  %N  $  6\  0 !<  !  %Q  $  7(  0 !<P !  %T  $ 
XM 74  0 !=@ !  %W  $  7@  0 !>0 !  %Z  $  7L  0  ?  !  %]  $ 
XM 7X  0 !?P !  &   $  8(  0  A  !  "%  $  <@  0  R0 !  '*  $ 
XM <L  0  S  !  '-  $  ,X  0 !SP !  #0  $ &=$  0!DT@ ! "#5  $ 
XM -<  0  V  !  '9  $  =H  0 !VP !  #<  $  -T  0 !W@ !  '?  $ 
XM .   0  X0 !  #B  $  2P!1                                   
XM                                                         "T!
XM@ !#.EQ40UQ)3D-,541%                                        
XM                                                            
XM                                                     "X!@ !#
XM.EQ40UQ,24(                                                 
XM                                                            
XM                                                 "\!4 !53EI)
XM4"Y04DH                                                     
XM                                         # !!  S,@  ,0$% #(U
XM    ,@$% #$P,   ,P%_                                        
XM                                                            
XM                                                            
XM           T 1X *@                                      -0$>
XM "H                                      #8!'@ J            
XM                           W 1X *@                          
XM            . $> "H                                      #D!
XM'@ J                                       Z 1X *@          
XM                            .P$> "H                         
XM             #P!'@ J                                       ]
XM 8                                                          
XM                                                            
XM                                                       ^ 00 
XM-    #\!4   0U!)0TLN5$-0                                    
XM                                                         $ !
XM1 !#.EQ40P                                                  
XM                                 $$!4 !53EI)4"Y# $,         
XM                                                            
X9                         /__ @ :    
X 
Xend
END_OF_FILE
  if test 2367 -ne `wc -c <'MSDOS/tcc/unzip.tc.UU'`; then
    echo shar: \"'MSDOS/tcc/unzip.tc.UU'\" unpacked with wrong size!
  else
    echo shar: Uudecoding \"'MSDOS/tcc/unzip.tc'\" \(1690 characters\)
    cat MSDOS/tcc/unzip.tc.UU | uudecode
    if test 1690 -ne `wc -c <'MSDOS/tcc/unzip.tc'`; then
      echo shar: \"'MSDOS/tcc/unzip.tc'\" uudecoded with wrong size!
    else
      rm MSDOS/tcc/unzip.tc.UU
    fi
  fi
  # end of 'MSDOS/tcc/unzip.tc.UU'
fi
if test -f 'MSDOS/tcc/unzip_cr.prj' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MSDOS/tcc/unzip_cr.prj'\"
else
  echo shar: Extracting \"'MSDOS/tcc/unzip_cr.prj'\" \(311 characters\)
  sed "s/^X//" >'MSDOS/tcc/unzip_cr.prj' <<'END_OF_FILE'
Xunzip.c		(unzip.h)
Xcrypt.c         (unzip.h zip.h)
Xexplode.c       (unzip.h)
Xextract.c       (unzip.h)
Xfile_io.c       (unzip.h)
Xinflate.c       (unzip.h)
Xmapname.c       (unzip.h)
Xmatch.c         (unzip.h)
Xmisc.c          (unzip.h)
Xunreduce.c      (unzip.h)
Xunshrink.c      (unzip.h)
Xenvargs.c       (unzip.h)
END_OF_FILE
  if test 311 -ne `wc -c <'MSDOS/tcc/unzip_cr.prj'`; then
    echo shar: \"'MSDOS/tcc/unzip_cr.prj'\" unpacked with wrong size!
  fi
  # end of 'MSDOS/tcc/unzip_cr.prj'
fi
if test -f 'MSDOS/tcc/unzip_cr.tc.UU' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MSDOS/tcc/unzip_cr.tc.UU'\"
else
  echo shar: Extracting \"'MSDOS/tcc/unzip_cr.tc.UU'\" \(2370 characters\)
  sed "s/^X//" >'MSDOS/tcc/unzip_cr.tc.UU' <<'END_OF_FILE'
Xbegin 666 MSDOS/tcc/unzip_cr.tc
XM5'5R8F\@0R!#;VYF:6=U<F%T:6]N($9I;&4@&@ !#1(7 1H  @$!  (    "
XM  (  0 #  (  @ $  $   4  0  !@ !   (  $  0D  @    T  @ !  X 
XM @   !$  0 $$@ "    $P " !D %  "  $ %0 "  $ %@ "  ( %P "    
XM&  "    9  !  %E  $  68  0 !9P !  %H  $  6D  0 !:@ !  %K  $ 
XM 6P  0 !;0 !  %N  $  6\  0 !<  !  %Q  $  7(  0 !<P !  %T  $ 
XM 74  0 !=@ !  %W  $  7@  0 !>0 !  %Z  $  7L  0  ?  !  %]  $ 
XM 7X  0 !?P !  &   $  8(  0  A  !  "%  $  <@  0  R0 !  '*  $ 
XM <L  0  S  !  '-  $  ,X  0 !SP !  #0  $ &=$  0!DT@ ! "#5  $ 
XM -<  0  V  !  '9  $  =H  0 !VP !  #<  $  -T  0 !W@ !  '?  $ 
XM .   0  X0 !  #B  $  2P!1                                   
XM                                                         "T!
XM@ !#.EQ40UQ)3D-,541%                                        
XM                                                            
XM                                                     "X!@ !#
XM.EQ40UQ,24(                                                 
XM                                                            
XM                                                 "\!4 !53EI)
XM4%]#4BY04DH                                                 
XM                                         # !!  S,@  ,0$% #(U
XM    ,@$% #$P,   ,P%_ $-265!4                                
XM                                                            
XM                                                            
XM           T 1X *@                                      -0$>
XM "H                                      #8!'@ J            
XM                           W 1X *@                          
XM            . $> "H                                      #D!
XM'@ J                                       Z 1X *@          
XM                            .P$> "H                         
XM             #P!'@ J                                       ]
XM 8                                                          
XM                                                            
XM                                                       ^ 00 
XM-    #\!4   0U!)0TLN5$-0                                    
XM                                                         $ !
XM1 !#.EQ40P                                                  
XM                                 $$!4 !53EI)4"Y#            
XM                                                            
X9                         /__ @ :    
X 
Xend
END_OF_FILE
  if test 2370 -ne `wc -c <'MSDOS/tcc/unzip_cr.tc.UU'`; then
    echo shar: \"'MSDOS/tcc/unzip_cr.tc.UU'\" unpacked with wrong size!
  else
    echo shar: Uudecoding \"'MSDOS/tcc/unzip_cr.tc'\" \(1690 characters\)
    cat MSDOS/tcc/unzip_cr.tc.UU | uudecode
    if test 1690 -ne `wc -c <'MSDOS/tcc/unzip_cr.tc'`; then
      echo shar: \"'MSDOS/tcc/unzip_cr.tc'\" uudecoded with wrong size!
    else
      rm MSDOS/tcc/unzip_cr.tc.UU
    fi
  fi
  # end of 'MSDOS/tcc/unzip_cr.tc.UU'
fi
if test -f 'MSDOS/tcc/zi_make.bat' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MSDOS/tcc/zi_make.bat'\"
else
  echo shar: Extracting \"'MSDOS/tcc/zi_make.bat'\" \(255 characters\)
  sed "s/^X//" >'MSDOS/tcc/zi_make.bat' <<'END_OF_FILE'
Xtcc -c -w -K -G -a -d -O -Z zipinfo.c envargs.c match.c
Xtcc -c -w -K -G -a -d -O -Z -DZIPINFO -omisc_.obj misc.c
Xtcc -K -G -a -d -O -Z zipinfo.obj envargs.obj match.obj misc_.obj
Xrem del zipinfo.obj
Xrem del match.obj
Xrem del misc_.obj
Xrem del envargs.obj
END_OF_FILE
  if test 255 -ne `wc -c <'MSDOS/tcc/zi_make.bat'`; then
    echo shar: \"'MSDOS/tcc/zi_make.bat'\" unpacked with wrong size!
  fi
  # end of 'MSDOS/tcc/zi_make.bat'
fi
if test -f 'MSDOS/tcc/zipinfo.tc.UU' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MSDOS/tcc/zipinfo.tc.UU'\"
else
  echo shar: Extracting \"'MSDOS/tcc/zipinfo.tc.UU'\" \(2369 characters\)
  sed "s/^X//" >'MSDOS/tcc/zipinfo.tc.UU' <<'END_OF_FILE'
Xbegin 666 MSDOS/tcc/zipinfo.tc
XM5'5R8F\@0R!#;VYF:6=U<F%T:6]N($9I;&4@&@ !#1(7 1H  @$!  (    "
XM  (  0 #  (  @ $  $   4  0  !@ !   (  $  0D  @    T  @ !  X 
XM @   !$  0 $$@ "    $P " !D %  "  $ %0 "  $ %@ "  ( %P "    
XM&  "    9  !  %E  $  68  0 !9P !  %H  $  6D  0 !:@ !  %K  $ 
XM 6P  0 !;0 !  %N  $  6\  0 !<  !  %Q  $  7(  0 !<P !  %T  $ 
XM 74  0 !=@ !  %W  $  7@  0 !>0 !  %Z  $  7L  0  ?  !  %]  $ 
XM 7X  0 !?P !  &   $  8(  0  A  !  "%  $  <@  0  R0 !  '*  $ 
XM <L  0  S  !  '-  $  ,X  0 !SP !  #0  $ &=$  0!DT@ ! "#5  $ 
XM -<  0  V  !  '9  $  =H  0 !VP !  #<  $  -T  0 !W@ !  '?  $ 
XM .   0  X0 !  #B  $  2P!1                                   
XM                                                         "T!
XM@ !#.EQ40UQ)3D-,541%                                        
XM                                                            
XM                                                     "X!@ !#
XM.EQ40UQ,24(                                                 
XM                                                            
XM                                                 "\!4 !:25!)
XM3D9/+E!22@                                                  
XM                                         # !!  S,@  ,0$% #(U
XM    ,@$% #$P,   ,P%_ %I)4$E.1D\                             
XM                                                            
XM                                                            
XM           T 1X *@                                      -0$>
XM "H                                      #8!'@ J            
XM                           W 1X *@                          
XM            . $> "H                                      #D!
XM'@ J                                       Z 1X *@          
XM                            .P$> "H                         
XM             #P!'@ J                                       ]
XM 8                                                          
XM                                                            
XM                                                       ^ 00 
XM-    #\!4   0U!)0TLN5$-0                                    
XM                                                         $ !
XM1 !#.EQ40P                                                  
XM                                 $$!4 !:25!)3D9/+D,         
XM                                                            
X9                         /__ @ :    
X 
Xend
END_OF_FILE
  if test 2369 -ne `wc -c <'MSDOS/tcc/zipinfo.tc.UU'`; then
    echo shar: \"'MSDOS/tcc/zipinfo.tc.UU'\" unpacked with wrong size!
  else
    echo shar: Uudecoding \"'MSDOS/tcc/zipinfo.tc'\" \(1690 characters\)
    cat MSDOS/tcc/zipinfo.tc.UU | uudecode
    if test 1690 -ne `wc -c <'MSDOS/tcc/zipinfo.tc'`; then
      echo shar: \"'MSDOS/tcc/zipinfo.tc'\" uudecoded with wrong size!
    else
      rm MSDOS/tcc/zipinfo.tc.UU
    fi
  fi
  # end of 'MSDOS/tcc/zipinfo.tc.UU'
fi
if test -f 'NT/makefile.nt' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'NT/makefile.nt'\"
else
  echo shar: Extracting \"'NT/makefile.nt'\" \(1607 characters\)
  sed "s/^X//" >'NT/makefile.nt' <<'END_OF_FILE'
X# NMAKE Makefile
X# D. Feinleib 7/92 t-davefe@microsoft.com
X# Windows NT
X
X# Nmake macros for building Windows NT applications
X!include <ntwin32.mak>
X
XCRYPTF=
XCRYPTO=
X# For decryption version, uncomment next two lines:
X# CRYPTF=-DCRYPT
X# CRYPTO=CRYPT.obj
X
XPROJ=unzip
XOBJA=ENVARGS.obj EXPLODE.obj EXTRACT.obj FILE_IO.obj INFLATE.obj
XOBJB=MAPNAME.obj MATCH.obj MISC.obj UNREDUCE.obj UNSHRINK.obj UNZIP.obj
X
XOBJ=$(OBJA) $(OBJB) $(CRYPTO)
X
Xcvars=$(cvars) $(CRYPTF)
X
Xall : UNZIP.exe
X
XCRYPT.obj : CRYPT.c
X    $(cc) $(cflags) $(cvars) CRYPT.c
X    $(cvtobj) CRYPT.obj
X
XENVARGS.obj : ENVARGS.c
X    $(cc) $(cflags) $(cvars) ENVARGS.c
X    $(cvtobj) ENVARGS.obj
X
XEXPLODE.obj : EXPLODE.c
X    $(cc) $(cflags) $(cvars) EXPLODE.c
X    $(cvtobj) EXPLODE.obj
X
XEXTRACT.obj : EXTRACT.c
X    $(cc) $(cflags) $(cvars) EXTRACT.c
X    $(cvtobj) EXTRACT.obj
X
XFILE_IO.obj : FILE_IO.c
X    $(cc) $(cflags) $(cvars) FILE_IO.c
X    $(cvtobj) FILE_IO.obj
X
XINFLATE.obj : INFLATE.c
X    $(cc) $(cflags) $(cvars) INFLATE.c
X    $(cvtobj) INFLATE.obj
X
XMAPNAME.obj : MAPNAME.c
X    $(cc) $(cflags) $(cvars) MAPNAME.c
X    $(cvtobj) MAPNAME.obj
X
XMATCH.obj : MATCH.c
X    $(cc) $(cflags) $(cvars) MATCH.c
X    $(cvtobj) MATCH.obj
X
XMISC.obj : MISC.c
X    $(cc) $(cflags) $(cvars) MISC.c
X    $(cvtobj) MISC.obj
X
XUNREDUCE.obj : UNREDUCE.c
X    $(cc) $(cflags) $(cvars) UNREDUCE.c
X    $(cvtobj) UNREDUCE.obj
X
XUNSHRINK.obj : UNSHRINK.c
X    $(cc) $(cflags) $(cvars) UNSHRINK.c
X    $(cvtobj) UNSHRINK.obj
X
XUNZIP.obj : UNZIP.c
X    $(cc) $(cflags) $(cvars) UNZIP.c
X    $(cvtobj) UNZIP.obj
X
XUNZIP.exe : $(OBJ)
X    $(link) $(conflags) -out:$(PROJ).exe $(OBJ) $(conlibs)
END_OF_FILE
  if test 1607 -ne `wc -c <'NT/makefile.nt'`; then
    echo shar: \"'NT/makefile.nt'\" unpacked with wrong size!
  fi
  # end of 'NT/makefile.nt'
fi
if test -f 'VMS/Contents' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'VMS/Contents'\"
else
  echo shar: Extracting \"'VMS/Contents'\" \(1609 characters\)
  sed "s/^X//" >'VMS/Contents' <<'END_OF_FILE'
XContents of the VMS sub-archive for UnZip 5.0 and later:
X
X  Contents                   this file
X  VMS.notes                  general VMS info about installing and using UnZip
X  unzip.rnh                  UnZip manual page, RUNOFF format
X  vms.c                      VMS file manipulation code
X  make_gcc_unzip.com         command file to compile UnZip and ZipInfo w/ GNU C
X  make_vaxc_unzip.com        command file to compile UnZip and ZipInfo w/ VAX C
X  makefile                   MAKE/VMS makefile for UnZip and ZipInfo
X  descrip.mms                MMS makefile for UnZip and ZipInfo
X  vmsshare.opt               options file used in descrip.mms
X  bilf/bilf.c                BILF source code
X  bilf/bilf.exe              BILF executable (binary)
X  bilf/make_bilf.com         command file to compile BILF with VAX C
X
XBILF may be required for older zipfiles or for those created under other
Xoperating systems.  Instructions for its use are in the source code.
X
XThe non-decryption version of UnZip compiles fine with VMS GCC, although
Xyou may get a lot of warnings (especially for vms.c).  Ignore them; GCC
Xis hyper-picky.
X
XMAKE/VMS v3.4 is Todd Aven's 1989 make utility (Software Sweatshop, NY); his
Xe-mail address is listed as todd@cincom.umd.edu.  The version used here has two
Xrevisions by Ned Freed (1989, 1990) and one by Greg Roelofs (1992--options to
Xuse either creation date or revision date for determining out-of-date-ness).
XCheck valeria.cs.ucla.edu in /pub/VMS or /infozip for vms_make.zip, or send 
Xe-mail to zip-bugs@cs.ucla.edu if it's not there.  The original is stored on 
Xvmsa.oac.uci.edu.
END_OF_FILE
  if test 1609 -ne `wc -c <'VMS/Contents'`; then
    echo shar: \"'VMS/Contents'\" unpacked with wrong size!
  fi
  # end of 'VMS/Contents'
fi
if test -f 'VMS/bilf/make_bilf.com' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'VMS/bilf/make_bilf.com'\"
else
  echo shar: Extracting \"'VMS/bilf/make_bilf.com'\" \(219 characters\)
  sed "s/^X//" >'VMS/bilf/make_bilf.com' <<'END_OF_FILE'
X$ set verify	! like "echo on", eh?
X$ cc bilf
X$ link bilf,sys$input:/opt
Xsys$share:vaxcrtl.exe/shareable
X$ ! change the following symbol to "$diskname:[directory]bilf.exe" as approp.
X$ bilf == "$bilf.exe"
X$ set noverify
END_OF_FILE
  if test 219 -ne `wc -c <'VMS/bilf/make_bilf.com'`; then
    echo shar: \"'VMS/bilf/make_bilf.com'\" unpacked with wrong size!
  fi
  # end of 'VMS/bilf/make_bilf.com'
fi
if test -f 'VMS/descrip.mms' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'VMS/descrip.mms'\"
else
  echo shar: Extracting \"'VMS/descrip.mms'\" \(2231 characters\)
  sed "s/^X//" >'VMS/descrip.mms' <<'END_OF_FILE'
X!==========================================================================
X! MMS description file for UnZip 5.0+                          26 June 1992
X!==========================================================================
X!
X!   Original by Antonio Querubin, Jr., <querubin@uhccvx.uhcc.hawaii.edu>
X!     (23 Dec 90)
X!   Enhancements by Igor Mandrichenko, <mandrichenko@mx.decnet.ihep.su>
X!     (9 Feb 92)
X
X! To build UnZip that uses shared libraries,
X!	mms
X! (One-time users will find it easier to use the MAKE_UNZIP_VAXC.COM command
X! file, which generates both UnZip and ZipInfo.  Just type "@MAKE_UNZIP_VAXC";
X! or "@MAKE_UNZIP_GCC" if you have GNU C.)
X
X! To build UnZip without shared libraries,
X!	mms noshare
X
X! To delete unnecessary .OBJ files,
X!	mms clean
X
XCRYPTF =
XCRYPTO =
X! To build decryption version, uncomment next two lines:
X!CRYPTF = /def=(CRYPT)
X!CRYPTO = crypt.obj,
X
XCC = cc
XCFLAGS = $(CRYPTF)
XLD = link
XLDFLAGS =
XEXE =
XO = .obj;
XOBJS = unzip$(O), $(CRYPTO) envargs$(O), explode$(O), extract$(O),\
X       file_io$(O), inflate$(O), mapname$(O), match$(O), misc$(O),\
X       unreduce$(O), unshrink$(O), vms$(O)
XOBJI = zipinfo$(O), envargs$(O), match$(O), misc.obj_, vms.obj_
X
XLDFLAGS2 =
X
Xdefault	:	unzip.exe, zipinfo.exe
X	@	!	Do nothing.
X
Xunzip.exe :	$(OBJS), vmsshare.opt
X	$(LD) $(LDFLAGS) $(OBJS), \
X		vmsshare.opt/options
X
Xzipinfo.exe :	$(OBJI), vmsshare.opt
X	$(LD) $(LDFLAGS) $(OBJI), \
X		vmsshare.opt/options
X
X
Xnoshare :	$(OBJS)
X	$(LD) $(LDFLAGS) $(OBJS), \
X		sys$library:vaxcrtl.olb/library $(LDFLAGS2)
X
Xclean :
X	delete $(OBJS)	! you may want to change this to 'delete *.obj;*'
X
Xcrypt$(O) :	crypt.c unzip.h zip.h	! may or may not be included in distrib
Xenvargs$(O) :	envargs.c unzip.h
Xexplode$(O) :	explode.c unzip.h
Xextract$(O) :	extract.c unzip.h
Xfile_io$(O) :	file_io.c unzip.h
Xinflate$(O) :	inflate.c unzip.h
Xmapname$(O) :	mapname.c unzip.h
Xmatch$(O) :	match.c unzip.h
Xmisc$(O) :	misc.c unzip.h
Xunreduce$(O) :	unreduce.c unzip.h
Xunshrink$(O) :	unshrink.c unzip.h
Xunzip$(O) :	unzip.c unzip.h
Xvms$(O)	  :	vms.c unzip.h
XVMSmunch$(O) :	VMSmunch.c VMSmunch.h
Xmisc.obj_ :	misc.c unzip.h
X	$(CC)/object=misc.obj_/define="ZIPINFO" misc.c
X
Xvms.obj_ :	vms.c unzip.h
X	$(CC)/object=vms.obj_/define="ZIPINFO" vms.c
END_OF_FILE
  if test 2231 -ne `wc -c <'VMS/descrip.mms'`; then
    echo shar: \"'VMS/descrip.mms'\" unpacked with wrong size!
  fi
  # end of 'VMS/descrip.mms'
fi
if test -f 'VMS/make_gcc_unzip.com' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'VMS/make_gcc_unzip.com'\"
else
  echo shar: Extracting \"'VMS/make_gcc_unzip.com'\" \(1347 characters\)
  sed "s/^X//" >'VMS/make_gcc_unzip.com' <<'END_OF_FILE'
X$ !
X$ !		"Makefile" for VMS versions of UnZip and ZipInfo
X$ !				(version:  GNU C)
X$ !
X$ ! Find out current disk and directory
X$ !
X$ my_name = f$env("procedure")
X$ here = f$parse(my_name,,,"device") + f$parse(my_name,,,"directory")
X$ set verify	! like "echo on", eh?
X$ !
X$ ! Do UnZip:
X$ !   (for decryption version, add /def=CRYPT to each of following lines,
X$ !   uncomment crypt compile line, and add crypt to link line)
X$ !
X$ gcc unzip
X$ gcc envargs
X$ gcc explode
X$ gcc extract
X$ gcc file_io
X$ gcc inflate
X$ gcc mapname
X$ gcc match
X$ gcc misc
X$ gcc unreduce
X$ gcc unshrink
X$ gcc vms
X$! gcc crypt
X$ link unzip, envargs, explode, extract, file_io, inflate, mapname,-
X	match, misc, unreduce, unshrink, vms, gnu_cc:[000000]gcclib.olb/lib,-
X	sys$input:/opt
X sys$share:vaxcrtl.exe/shareable
X$ !
X$ ! Do ZipInfo:
X$ !
X$ gcc zipinfo
X$ gcc /def=(ZIPINFO) /object=misc_.obj misc
X$ gcc /def=(ZIPINFO) /object=vms_.obj  vms
X$ link zipinfo, envargs, match, misc_, vms_, gnu_cc:[000000]gcclib.olb/lib,-
X	sys$input:/opt
X sys$share:vaxcrtl.exe/shareable
X$ !
X$ ! Next line:  put a similar line (full pathname for unzip.exe and zipinfo.exe)
X$ ! in login.com.  Remember to include the leading "$" before disk name.
X$ !
X$ unzip == "$''here'unzip.exe"		! set up symbol to use unzip
X$ zipinfo == "$''here'zipinfo.exe"	! set up symbol to use zipinfo
X$ !
X$ set noverify
END_OF_FILE
  if test 1347 -ne `wc -c <'VMS/make_gcc_unzip.com'`; then
    echo shar: \"'VMS/make_gcc_unzip.com'\" unpacked with wrong size!
  fi
  # end of 'VMS/make_gcc_unzip.com'
fi
if test -f 'VMS/make_vaxc_unzip.com' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'VMS/make_vaxc_unzip.com'\"
else
  echo shar: Extracting \"'VMS/make_vaxc_unzip.com'\" \(1188 characters\)
  sed "s/^X//" >'VMS/make_vaxc_unzip.com' <<'END_OF_FILE'
X$ !
X$ !		"Makefile" for VMS versions of UnZip and ZipInfo
X$ !				(version:  VAX C)
X$ !
X$ ! Find out current disk and directory
X$ !
X$ my_name = f$env("procedure")
X$ here = f$parse(my_name,,,"device") + f$parse(my_name,,,"directory")
X$ set verify	! like "echo on", eh?
X$ !
X$ ! Do UnZip:
X$ !   (for decryption version, add /def=CRYPT to compile line, and add
X$ !   crypt to both compile and link lines)
X$ !
X$ cc unzip, envargs, explode, extract, file_io, inflate, mapname,-
X	match, misc, unreduce, unshrink, vms
X$ link unzip, envargs, explode, extract, file_io, inflate, mapname,-
X	match, misc, unreduce, unshrink, vms, sys$input:/opt
X sys$share:vaxcrtl.exe/shareable
X$ !
X$ ! Do ZipInfo:
X$ !
X$ cc zipinfo
X$ cc /def=(ZIPINFO) /obj=misc_.obj  misc.c
X$ cc /def=(ZIPINFO) /obj=vms_.obj   vms.c
X$ link zipinfo, envargs, match, misc_, vms_, sys$input:/opt
X sys$share:vaxcrtl.exe/shareable
X$ !
X$ ! Next line:  put a similar line (full pathname for unzip.exe and zipinfo.exe)
X$ ! in login.com.  Remember to include the leading "$" before disk name.
X$ !
X$ unzip == "$''here'unzip.exe"		! set up symbol to use unzip
X$ zipinfo == "$''here'zipinfo.exe"	! set up symbol to use zipinfo
X$ !
X$ set noverify
END_OF_FILE
  if test 1188 -ne `wc -c <'VMS/make_vaxc_unzip.com'`; then
    echo shar: \"'VMS/make_vaxc_unzip.com'\" unpacked with wrong size!
  fi
  # end of 'VMS/make_vaxc_unzip.com'
fi
if test -f 'VMS/makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'VMS/makefile'\"
else
  echo shar: Extracting \"'VMS/makefile'\" \(2874 characters\)
  sed "s/^X//" >'VMS/makefile' <<'END_OF_FILE'
X#============================================================================
X# Makefile for UnZip & ZipInfo:  VMS                             Greg Roelofs
X# Version:  5.0 (inflate,explode)                                  7 May 1992
X#============================================================================
X
X# Most recent revisions:  26 June 1992
X
X
X#####################
X# MACRO DEFINITIONS #
X#####################
X
XCRYPTF =
XCRYPTO =
X# Uncomment next two lines for decryption version:
X#CRYPTF = /def=(CRYPT)
X#CRYPTO = crypt.obj,
X
XCC = cc
XCFLAGS = $(CRYPTF)			# use "cc $(CFLAGS)" this way
X# CFLAGS := /def=(FLAG1,FLAG2)		# this also works, if use "cc 'CFLAGS'"
XZCFLAGS = /def=(ZIPINFO)
XLD = link
XLDFLAGS =
X
XLN = copy
XRM = delete
XE = .exe
XO = .obj
X
XOBJS = unzip$O, $(CRYPTO) envargs$O, explode$O, extract$O, file_io$O,-
X   inflate$O, mapname$O, match$O, misc$O, unreduce$O, unshrink$O,-
X   vms$O, sys$input:/opt
XZI_OBJS = zipinfo$O, envargs$O, match$O, misc$O_, vms$O_, sys$input:/opt
X
X
X###############################################
X# BASIC COMPILE INSTRUCTIONS AND DEPENDENCIES #
X###############################################
X
Xdefault:	unzip.exe zipinfo.exe
X
X*.obj:	*.c				# `*.c' necessary?
X	$(CC) $(CFLAGS) $<
X
X*.obj_:	*.c				# `$*' not legal
X	$(CC) $(ZCFLAGS) $< /obj=$@
X
Xunzip$E:	$(OBJS)
X	$(LD) $(LDFLAGS) $(OBJS)	# next line is data line
X	sys$share:vaxcrtl.exe/shareable $
X
Xzipinfo$E:	$(ZI_OBJS)
X	$(LD) $(LDFLAGS) $(ZI_OBJS)	# next line is data line
X	sys$share:vaxcrtl.exe/shareable $
X
Xcrypt$O:        crypt.c unzip.h zip.h	# may or may not be in distribution
Xenvargs$O:      envargs.c unzip.h
Xexplode$O:      explode.c unzip.h
Xextract$O:      extract.c unzip.h
Xfile_io$O:      file_io.c unzip.h
Xinflate$O:      inflate.c unzip.h
Xmapname$O:      mapname.c unzip.h
Xmatch$O:        match.c unzip.h
Xmisc$O:         misc.c unzip.h
Xmisc$O_:	misc.c unzip.h
Xunreduce$O:     unreduce.c unzip.h
Xunshrink$O:     unshrink.c unzip.h
Xunzip$O:        unzip.c unzip.h
Xvms$O:          vms.c unzip.h
Xvms$O_:         vms.c unzip.h
XVMSmunch$O:     VMSmunch.c VMSmunch.h
Xzipinfo$O:	zipinfo.c unzip.h
X
X# system: ${SYSDIR}make.exe ${SYSDIR}make.ini
X# debug:
X# 	cflags := /debug/noopt
X# 	lflags := /debug
X# ${DISTDIR}unzip.exe: unzip.exe
X#	copy unzip.exe ${DISTDIR}/log
X
Xclean:
X	purge/log
X#	purge/log ${DISTDIR}
X
X
X# the backslash '\' is the continuation character if it occurs as
X# the last non-white character on the line.
X# the hyphen '-' is the DCL continuation character, so if it occurs
X# as the last non-white character on the line, the next line will
X# not have the dollar sign '$' prepended.
X
X
X################################
X# INDIVIDUAL MACHINE MAKERULES #
X################################
X
Xgeneric:	default		# first try if unknown
Xgeneric2:	default		# second try if unknown
Xvax:		default
Xvms:		default
X
Xboth:		unzip.exe zipinfo.exe
Xunzip:		unzip.exe
Xzipinfo:	zipinfo.exe
END_OF_FILE
  if test 2874 -ne `wc -c <'VMS/makefile'`; then
    echo shar: \"'VMS/makefile'\" unpacked with wrong size!
  fi
  # end of 'VMS/makefile'
fi
if test -f 'funzip.1' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'funzip.1'\"
else
  echo shar: Extracting \"'funzip.1'\" \(1974 characters\)
  sed "s/^X//" >'funzip.1' <<'END_OF_FILE'
X.TH FUNZIP 1 "19 Aug 92 (v1.3)"
X.SH NAME
Xfunzip \- extract from a ZIP archive file as a filter
X.SH SYNOPSIS
X[...]  |  \fBfunzip\fP [ password ]  |  [...]
X.SH ARGUMENTS
X.IP [\fIpassword\fP] \w'[\fIpassword\fP]'u+2m
XOptional password to be used if ZIP archive is encrypted.  Decryption
Xmay not be supported at some sites.  See DESCRIPTION for more details.
X.PD
X.SH DESCRIPTION
X.I FUnZip
Xacts as a filter; that is, it assumes that a ZIP archive is being piped into
Xstandard input, and it extracts the first member from the archive to stdout.
XGiven the limitation on single-member extraction, \fIFUnZip\fP is most
Xuseful in conjunction with a secondary archiver program such as tar(1).
XThe following section includes an example illustrating this usage in the
Xcase of disk backups to tape.
X.PD
X.SH EXAMPLES
XTo use \fIFUnZip\fP to extract the first member file of the archive test.zip
Xand to pipe it into more(1):
X.PP
X.IP "\t\fIfunzip\fP < test.zip | more"
X.PP
XTo use \fIFUnZip\fP to test the first member file of test.zip (any errors
Xwill be reported on standard error):
X.PP
X.IP "\t\fIfunzip\fP < test.zip > /dev/null"
X.PP
XTo use \fIZip\fP and \fIFUnZip\fP in place of compress(1) and zcat(1) for
Xtape backups:
X.PP
X.IP "\ttar cf \- . | \fIzip\fP \-7 | dd of=/dev/nrst0 obs=8k"
X.IP "\tdd if=/dev/nrst0 ibs=8k | \fIfunzip\fP | tar xf \-"
X.PP
X(where, for example, nrst0 is a SCSI tape drive).
X.PD
X.SH LIMITATIONS
XThere is presently no way to extract any member but the first from a ZIP
Xarchive.  This would be useful in the case where a ZIP archive is included
Xwithin another archive.
X.PP
XAn alternate mechanism for passing the password to \fIFUnZip\fP would
Xbe preferable to putting it on the command line.
X.PP
X\fIFUnZip\fP would be useful under OS/2, too.
X.PP
XThe functionality of \fIFUnZip\fP should be included in \fIUnZip\fP
Xdirectly (future release).
X.PD
X.SH SEE ALSO
Xunzip(1), zip(1), zipcloak(1), zipinfo(1), zipnote(1), zipsplit(1)
X.PD
X.SH AUTHOR
XMark Adler (Info-ZIP)
X.PD
END_OF_FILE
  if test 1974 -ne `wc -c <'funzip.1'`; then
    echo shar: \"'funzip.1'\" unpacked with wrong size!
  fi
  # end of 'funzip.1'
fi
if test -f 'funzip.doc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'funzip.doc'\"
else
  echo shar: Extracting \"'funzip.doc'\" \(2249 characters\)
  sed "s/^X//" >'funzip.doc' <<'END_OF_FILE'
X
XFUNZIP(1)                USER COMMANDS                  FUNZIP(1)
X
XNAME
X     funzip - extract from a ZIP archive file as a filter
X
XSYNOPSIS
X     [...]  |  funzip [ password ]  |  [...]
X
XARGUMENTS
X     [password]  Optional password to be used if ZIP  archive  is
X                 encrypted.   Decryption  may not be supported at
X                 some sites.  See DESCRIPTION for more details.
X
XDESCRIPTION
X     FUnZip acts as a filter; that is,  it  assumes  that  a  ZIP
X     archive  is being piped into standard input, and it extracts
X     the first member from the archive to stdout.  Given the lim-
X     itation  on  single-member extraction, FUnZip is most useful
X     in conjunction with a secondary  archiver  program  such  as
X     tar(1).   The  following  section includes an example illus-
X     trating this usage in the case of disk backups to tape.
X
XEXAMPLES
X     To use FUnZip to  extract  the  first  member  file  of  the
X     archive test.zip and to pipe it into more(1):
X
X          funzip < test.zip | more
X
X     To use FUnZip to test the first member file of test.zip (any
X     errors will be reported on standard error):
X
X          funzip < test.zip > /dev/null
X
X     To use Zip and FUnZip in place of  compress(1)  and  zcat(1)
X     for tape backups:
X
X          tar cf - . | zip -7 | dd of=/dev/nrst0 obs=8k
X
X          dd if=/dev/nrst0 ibs=8k | funzip | tar xf -
X
X     (where, for example, nrst0 is a SCSI tape drive).
X
XLIMITATIONS
X     There is presently no way to  extract  any  member  but  the
X     first  from a ZIP archive.  This would be useful in the case
X     where a ZIP archive is included within another archive.
X
X     An alternate mechanism for passing the  password  to  FUnZip
X     would be preferable to putting it on the command line.
X
X     FUnZip would be useful under OS/2, too.
X
X     The functionality of FUnZip  should  be  included  in  UnZip
X     directly (future release).
X
XInfo-ZIP          Last change: 19 Aug 92 (v1.3)                 1
X
XFUNZIP(1)                USER COMMANDS                  FUNZIP(1)
X
XSEE ALSO
X     unzip(1),  zip(1),  zipcloak(1),   zipinfo(1),   zipnote(1),
X     zipsplit(1)
X
XAUTHOR
X     Mark Adler (Info-ZIP)
X
XInfo-ZIP          Last change: 19 Aug 92 (v1.3)                 2
X
END_OF_FILE
  if test 2249 -ne `wc -c <'funzip.doc'`; then
    echo shar: \"'funzip.doc'\" unpacked with wrong size!
  fi
  # end of 'funzip.doc'
fi
echo shar: End of archive 13 \(of 14\).
cp /dev/null ark13isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 14 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0
exit 0 # Just in case...
