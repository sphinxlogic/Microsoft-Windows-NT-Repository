Newsgroups: comp.sources.misc
From: jsp@Princeton.EDU (James Plank)
Subject:  v31i037:  jgraph - A filter for plotting postscript graphs v8.0, Part07/07
Message-ID: <1992Jul14.152155.11765@sparky.imd.sterling.com>
X-Md4-Signature: 93b286b20163238a00167273d68912ec
Date: Tue, 14 Jul 1992 15:21:55 GMT
Approved: kent@sparky.imd.sterling.com

Submitted-by: jsp@Princeton.EDU (James Plank)
Posting-number: Volume 31, Issue 37
Archive-name: jgraph/part07
Environment: UNIX, VMS, postscript
Supersedes: jgraph: Volume 16, Issue 20

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# Contents:  acc.jgr acc.tex exit.c g8.jgr g9n10.jgr gpaper.jgr
#   hypercube.jgr jgraph.com list.h mab2.jgr sin.c sin.jgr sin1.jgr
#   sin2.c sin2.jgr sin3.jgr
# Wrapped by kent@sparky on Sun Jul 12 20:04:05 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 7 (of 7)."'
if test -f 'acc.jgr' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'acc.jgr'\"
else
  echo shar: Extracting \"'acc.jgr'\" \(687 characters\)
  sed "s/^X//" >'acc.jgr' <<'END_OF_FILE'
X(* Graph #6: Kbytes processed each second
X *)
X
Xnewgraph
X
Xyaxis size 2.5 min 0 max 100
X  label fontsize 8 : Percentage of bus utilization
X
Xxaxis size 1.8 min 0 max 5
X  no_draw_hash_marks no_draw_axis_label no_draw_hash_labels
X
X(* 100% of utilization == 6510.4166 Kb/sec *)
X
Xnewcurve
X  label : DB
X  marktype xbar fill .9 marksize .4
X  pts 
X    1   3.3573  (* 218.5792 Kb/sec *)
X
Xnewcurve
X  label : QS
X  marktype xbar fill .6 marksize .4
X  pts
X    2   8.0665  (* 525.1688 Kb/sec *)
X
Xnewcurve
X  label : GE
X  marktype xbar fill .3 marksize .4
X  pts
X    3   7.9602  (* 518.2473 Kb/sec *)
X
Xnewcurve
X  label : RNG
X  marktype xbar fill 0 marksize .4
X  pts
X    4   8.2876  (* 539.5619 Kb/sec *)
X
X
END_OF_FILE
  if test 687 -ne `wc -c <'acc.jgr'`; then
    echo shar: \"'acc.jgr'\" unpacked with wrong size!
  fi
  # end of 'acc.jgr'
fi
if test -f 'acc.tex' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'acc.tex'\"
else
  echo shar: Extracting \"'acc.tex'\" \(168 characters\)
  sed "s/^X//" >'acc.tex' <<'END_OF_FILE'
X
X\documentstyle[12pt]{report}
X\input{psfig}
X
X\begin{document}
X
X
XA sample bar graph
X
X\begin{figure}[h]
X\centerline{\psfig{figure=acc.jps}}
X\end{figure}
X
X\end{document}
X
END_OF_FILE
  if test 168 -ne `wc -c <'acc.tex'`; then
    echo shar: \"'acc.tex'\" unpacked with wrong size!
  fi
  # end of 'acc.tex'
fi
if test -f 'exit.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'exit.c'\"
else
  echo shar: Extracting \"'exit.c'\" \(1095 characters\)
  sed "s/^X//" >'exit.c' <<'END_OF_FILE'
X/*
X**++
X**  FUNCTIONAL DESCRIPTION:
X**
X**      Exit is a VMS replacement for the standard Unix exit function
X**
X**  FORMAL PARAMETERS:
X**
X**      error_code	integer passed by value (optional)
X**
X**  SIDE EFFECTS:
X**
X**      Exit will never return to calling program
X**	VMS exit status ($STATUS) will be set
X**--
X**/
X#include <varargs.h>
X
Xexit(va_alist)
Xva_dcl
X{
X	int		nargs;
X	va_list		va;
X	int		exit_code = 0;
X	/*
X	 * Pick up the argument, if present
X	 */
X	va_count(nargs);
X	va_start(va);
X	if (nargs > 0) exit_code = va_arg(va,int);
X	/*
X	 * Set the VMS $STATUS to the appropriate value:
X	 *	if exit_code == 0 then $STATUS := success
X	 *	if exit_code >  0 then $STATUS := error
X	 *	if exit_code <  0 then $STATUS := severe_error
X	 * and perform exit.
X	 *
X	 * Note:
X	 *	the %X10000000 added to the actual success/error indicator
X	 *	will prevent DCL from printing a message.
X	 *	A 'on error' will be obeyed however.
X	 */
X	if (exit_code == 0)		/* success	*/
X		sys$exit(0x10000001);
X	else if (exit_code > 0)		/* error	*/
X		sys$exit(0x10000002);
X	else				/* severe error	*/
X		sys$exit(0x10000004);
X}
END_OF_FILE
  if test 1095 -ne `wc -c <'exit.c'`; then
    echo shar: \"'exit.c'\" unpacked with wrong size!
  fi
  # end of 'exit.c'
fi
if test -f 'g8.jgr' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'g8.jgr'\"
else
  echo shar: Extracting \"'g8.jgr'\" \(996 characters\)
  sed "s/^X//" >'g8.jgr' <<'END_OF_FILE'
X(* $Log:	g8.jgr,v $
X * Revision 1.1  90/10/12  17:33:33  jsp
X * Initial revision
X * 
X *)
X
XY 3
X
X(* Graph #8: Frequency of Traps.   This graph shows examples of plotting
X * character strings. *) 
X
Xnewgraph
X
Xyaxis size 1.9 min 0 max 10 hash 1 mhash 0
X  hash_labels fontsize 7
X  label fontsize 8 : Traps per 0.1 second Interval
X
Xxaxis size 2.14 min 0 max 2.6001 hash .5 mhash 4 precision 1
X  hash_labels fontsize 7
X  label fontsize 8 : Starting Time of 0.1 second interval (sec)
X
Xtitle fontsize 10 : Graph 8: Frequency of Traps.
X
Xnewcurve
X  marktype circle fill 0
X  linetype none
X  pts 
X    0.0 9
X    0.1 3
X    0.2 5
X    0.3 6
X    0.4 6
X    0.5 5
X    0.6 6
X    0.7 6
X    0.8 6 
X    0.9 6
X    1.0 6
X    1.1 4 
X    1.2 5
X    1.3 3
X    1.4 4
X    1.5 5
X    1.6 3
X    1.7 5
X    1.8 5
X    1.9 4
X    2.0 3
X    2.1 4
X    2.2 5
X    2.3 5
X    2.4 4
X    2.5 0
X    2.6 0
X
Xnewstring 
X  : Average Trap Time = 0.015 seconds
X  x 2.6 y 10
X  hjr vjc
X  fontsize 7
X
Xnewstring
X  : ...
X  x 2.7 y 0
X  hjl vjb
X  fontsize 7
X
END_OF_FILE
  if test 996 -ne `wc -c <'g8.jgr'`; then
    echo shar: \"'g8.jgr'\" unpacked with wrong size!
  fi
  # end of 'g8.jgr'
fi
if test -f 'g9n10.jgr' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'g9n10.jgr'\"
else
  echo shar: Extracting \"'g9n10.jgr'\" \(3866 characters\)
  sed "s/^X//" >'g9n10.jgr' <<'END_OF_FILE'
X(* This file plots two graphs side by side with a tricky legend format:
X * There are 5 legend entries, one of which is of a curve containing a
X * line.  The desire is to make the legend have two columns, the first
X * with the first three legend entries, and the second with the last
X * two.
X * 
X * The way that this is done is to actually plot four graphs -- two sets
X * of two graphs superimposed on each other.  The first of the two
X * graphs has the first three curves, and the second has the last two. 
X * Thus, the first can set its legend to be the first column, and the
X * second can set its legend to be the second column.
X * 
X * To get the two columns is pretty simple.  In each graph, the 
X * x and y coordinates of the legends are explicitly set.  For the
X * first column, the x coordinate is 0, and for the second column,
X * the x coordinate is 5.5.
X *
X * A potential problem with this graph is that in the first set of
X * legends, there is a line (the "Merge Sort" curve), while in the
X * second set there is not.  Thus, if nothing is done with the midspace
X * and linelength paramters, the second columns marks will appear closer
X * to the text than in the first column.  The solution to this was to 
X * explicitly set the linelength and midspace in the first legend to
X * be .80 and .25 respectively.  This means that in the first legend, the
X * marks are 0.65 units away from the text (in the presence of a line,
X * the marks are (midspace + linelength/2) away from the text.  In 
X * the absence of a line, the marks are simply (midspace) away from the
X * text.  Thus, midspace is set to be 0.65 in the second legend column.
X *)
X
X(* Set up the axes of the first graph.  Translate it to the left of the 
X * page *)
X
Xnewgraph
Xx_translate -1.37
Xyaxis size 1.9 min 0 max 40 precision 0 hash 10 mhash 1
X  label : Time (sec)
X    fontsize 8
Xxaxis size 2.14 min 0 max 10 hash 2 mhash 1
X  label : Heap Size (MBytes)
X    fontsize 8
Xtitle : Graph 9: Checkpoint Time of Other Benchmarks.
X  fontsize 10
X
X(* Draw the first three curves *)
Xnewcurve
X  label : Merge Sort
X  marktype circle fill 0.0 
X  linetype solid
X  pts 
X    .789 5.5414
X   2.985 13.9958
X   3.962 17.2362
X   4.938 21.0804
X   7.868 32.4082
X   9.821 39.8312
Xnewcurve
X  label : Travelling Salesman
X  marktype triangle fill 0 
X  linetype none
X  pts 
X.064 2.359
Xnewcurve
X  label : Pattern Match
X  marktype diamond fill 1.0 
X  linetype none
X  pts 
X1.233 6.374
X
X(* set the legend *)
Xlegend linelength .8 midspace .25 x 0 y 47.5 defaults fontsize 7
X
X(* Now make a second graph for the second curve with the same axes *)
Xcopygraph
Xxaxis nodraw
Xyaxis nodraw
X
X(* Draw the last two curves *)
Xnewcurve
X  label : Bubble Sort
X  marktype cross fill 1.0 
X  linetype none
X  pts 
X.513 3.91
Xnewcurve
X  label : Matrix Multiplication
X  marktype box fill 1 
X  linetype none
X  pts 
X3 14.71
X
X(* set the second legend to be a second column from the first  *)
Xlegend x 5.5 midspace .65
X
X(* The second of these graphs is just like the first only it is translated
Xto the right *)
X
Xcopygraph
Xx_translate 1.7
Xxaxis draw
Xyaxis draw
Xyaxis min 0 max 5 hash 1 mhash 1
Xtitle : Graph 10: Checkpoint Overhead of Other Benchmarks.
X  fontsize 10
X
Xnewcurve
X  label : Merge Sort
X  marktype circle fill 0.0 
X  linetype solid
X  pts 
X    .789 0.5954
X   2.985 3.8368
X   3.962 3.3598
X   4.938 3.6288
X   7.868 4.3096
X   9.821 4.377
X
Xnewcurve
X  label : Travelling Salesman
X  marktype triangle fill 0 
X  linetype none
X  pts 
X.064 0.17
X
Xnewcurve
X  label : Pattern Match
X  marktype diamond fill 1.0 
X  linetype none
X  pts 
X1.233 0.07
X
Xlegend linelength .8 midspace .25 x 0 y 5.9 defaults fontsize 7
X
Xcopygraph
Xxaxis nodraw
Xyaxis nodraw
X
Xnewcurve
X  label : Bubble Sort
X  marktype cross fill 1.0 
X  linetype none
X  pts 
X.513 0.07
X
Xnewcurve
X  label : Matrix Multiplication
X  marktype box fill 1 
X  linetype none
X  pts 
X3 0.75
X
Xlegend x 5.5 midspace .65
END_OF_FILE
  if test 3866 -ne `wc -c <'g9n10.jgr'`; then
    echo shar: \"'g9n10.jgr'\" unpacked with wrong size!
  fi
  # end of 'g9n10.jgr'
fi
if test -f 'gpaper.jgr' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'gpaper.jgr'\"
else
  echo shar: Extracting \"'gpaper.jgr'\" \(214 characters\)
  sed "s/^X//" >'gpaper.jgr' <<'END_OF_FILE'
Xnewgraph
X
Xxaxis size 7 min 0 max 7 hash 1 mhash 9
Xyaxis size 9 min 0 max 9 hash 1 mhash 9
X
Xcopygraph
X
Xxaxis hash_scale 1 grid_lines mgrid_lines mgrid_gray .5
Xyaxis hash_scale 1 grid_lines mgrid_lines mgrid_gray .5
END_OF_FILE
  if test 214 -ne `wc -c <'gpaper.jgr'`; then
    echo shar: \"'gpaper.jgr'\" unpacked with wrong size!
  fi
  # end of 'gpaper.jgr'
fi
if test -f 'hypercube.jgr' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'hypercube.jgr'\"
else
  echo shar: Extracting \"'hypercube.jgr'\" \(1488 characters\)
  sed "s/^X//" >'hypercube.jgr' <<'END_OF_FILE'
X(* 
X * $Source: /n/fs/vd/jsp/papers/dckp/RCS/hypercube.jgr,v $
X * $Revision: 4.4 $
X * $Date: 91/10/03 13:56:21 $
X * $Author: jsp $
X * 
X * Jgraph file containing a picture of a 3-D hypercube.
X *)
X
XY 2.3
Xnewgraph
Xxaxis size 2.5 min 0 max 2.5 nodraw
Xyaxis size 2 min 0 max 2 nodraw
Xlegend x 2.8 y 1.25
X   linelength 0.5
X
X(* The links are drawn first, so that the nodes will be drawn over them. *)
X
Xnewline linethickness 2 pts 0 0 1.5 0
Xcopycurve pts 0 1.5 1.5 1.5
Xcopycurve pts .5 .5 2.0 .5
Xcopycurve pts 2 2 .5 2
X  label fontsize 12 : Dimension 0 links
X
Xnewline linethickness 2 linetype dotted pts 0 0 0 1.5
Xcopycurve pts 1.5 0 1.5 1.5
Xcopycurve pts .5 .5 .5 2.0
Xcopycurve pts 2 2 2 .5
X  label fontsize 12 : Dimension 1 links
X
Xnewline linethickness 2 linetype dashed pts 0 0 .5 .5
Xcopycurve pts 0 1.5 .5 2
Xcopycurve pts 1.5 0 2.0 .5
Xcopycurve pts 1.5 1.5 2 2
X  label fontsize 12 : Dimension 2 links
X
X
X(* Now draw the nodes with fill 0 so that they will draw white over the 
X * link overlap *)
X
Xnewcurve pts 
X  0 0
X  0 1.5
X  1.5 0
X  1.5 1.5
X  marksize .35
X  marktype circle
X  fill 1
Xnewcurve pts
X  .5 .5
X  .5 2
X  2 .5
X  2 2
X  marksize .27
X  marktype circle
X  fill 1
X
X(* Now draw the node labels inside the nodes *)
X
Xnewstring   x 0   y 0   fontsize 12 hjc vjc : 000
Xcopystring  x 1.5 y 0   : 001
Xcopystring  x 0   y 1.5 : 010
Xcopystring  x 1.5 y 1.5 : 011
X
Xcopystring  x 0.5 y 0.5 fontsize 10 : 100
Xcopystring  x 2.0 y 0.5 : 101
Xcopystring  x 0.5 y 2.0 : 110
Xcopystring  x 2.0 y 2.0 : 111
X
X
END_OF_FILE
  if test 1488 -ne `wc -c <'hypercube.jgr'`; then
    echo shar: \"'hypercube.jgr'\" unpacked with wrong size!
  fi
  # end of 'hypercube.jgr'
fi
if test -f 'jgraph.com' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'jgraph.com'\"
else
  echo shar: Extracting \"'jgraph.com'\" \(1377 characters\)
  sed "s/^X//" >'jgraph.com' <<'END_OF_FILE'
X$!  JGRAPH.COM: Execute jgraph on VMS.
X$   SAVE_VER = 'F$VERIFY( F$TRNLNM( "JGRAPH_VERIFY"))'
X$ ! How to use this procedure:
X$ ! (1) define a symbol to execute the command file
X$ !      $ JGRAPH :== @dev:[directory]JGRAPH.COM
X$ !	 We will assume that both this jgraph.com and jgraph.exe reside
X$ !	 in dev:[directory].
X$ ! (2) Then, to run the program with say the HYPERCUBE.JGR file,
X$ !      $ JGRAPH HYPERCUBE      ! (Yes you can leave off the .JGR extension)
X$ !     To generate a stand-alone PostScript file that can be sent directly
X$ !	to the printer, use:
X$ !      $ JGRAPH HYPERCUBE "-P"
X$ !	or simply
X$ !      $ JGRAPH HYPERCUBE -P
X$ !     If you really want lowercase to reprint input in expanded form:
X$ !      $ JGRAPH HYPERCUBE "-p"
X$ !	The resulting output file will have a ".jps" extension.
X$!
X$   ON   ERROR   THEN GOTO EXIT
X$   ON CONTROL_Y THEN GOTO EXIT
X$!
X$L1:
X$   P1 = F$SEARCH( F$PARSE( P1, ".JGR"))
X$   IF P1 .NES. "" THEN GOTO L2
X$   INQUIRE /LOCAL P1 "Input File : "
X$   GOTO L1
X$L2:
X$   JPS_FILE  = F$PARSE( P1,,, "NAME") + ".JPS"
X$   THIS_FILE = F$ENVIRONMENT("PROCEDURE")
X$   HERE = F$PARSE(THIS_FILE,,,"DEVICE",) + F$PARSE(THIS_FILE,,,"DIRECTORY",)
X$   RUN_JGRAPH := $'HERE'JGRAPH
X$!
X$   TMP = F$VERIFY( 1)
X$   RUN_JGRAPH <'p1' >'jps_file' "''P2'"
X$   $status = $STATUS
X$   TMP = 'F$VERIFY( TMP)
X$!
X$EXIT:
X$   EXIT $status + 0*F$VERIFY( SAVE_VER)
END_OF_FILE
  if test 1377 -ne `wc -c <'jgraph.com'`; then
    echo shar: \"'jgraph.com'\" unpacked with wrong size!
  fi
  # end of 'jgraph.com'
fi
if test -f 'list.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'list.h'\"
else
  echo shar: Extracting \"'list.h'\" \(980 characters\)
  sed "s/^X//" >'list.h' <<'END_OF_FILE'
X/* 
X * $Source: /n/fs/vd/jsp/src/jgraph/RCS/list.h,v $
X * $Revision: 8.0 $
X * $Date: 92/07/03 14:16:02 $
X * $Author: jsp $
X */
X
X/* This is the header file for the list manipulation routines in list.c.
X * Any struct can be turned into a list as long as its first two fields are
X * flink and blink. */
X
Xtypedef struct list {
X  struct list *flink;
X  struct list *blink;
X} *List;
X
X/* Nil, first, next, and prev are macro expansions for list traversal 
X * primitives. */
X
X#define nil(l) (l)
X#define first(l) (l->flink)
X#define last(l) (l->blink)
X#define next(n) (n->flink)
X#define prev(n) (n->blink)
X
X/* These are the routines for manipluating lists */
X
X/* void insert(node list);     Inserts a node to the end of a list */
X/* void delete_item(node);     Deletes an arbitrary node */
X/* List make_list(node_size);  Creates a new list */
X/* List get_node(list);        Allocates a node to be inserted into the list */
X/* void free_node(node, list); Deallocates a node from the list */
X
END_OF_FILE
  if test 980 -ne `wc -c <'list.h'`; then
    echo shar: \"'list.h'\" unpacked with wrong size!
  fi
  # end of 'list.h'
fi
if test -f 'mab2.jgr' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mab2.jgr'\"
else
  echo shar: Extracting \"'mab2.jgr'\" \(512 characters\)
  sed "s/^X//" >'mab2.jgr' <<'END_OF_FILE'
Xnewgraph
Xlegend x 15 y 6000
Xnewcurve pts
Xshell : awk -F'|' '{printf "%d %d\n",NR,($2/2)}' mab2.times
Xlinetype dotted
Xmarktype none
Xlabel : Writes
Xnewcurve pts
Xshell : awk -F'|' '{printf "%d %d\n", NR,($3+$4)/2}' mab2.times
Xlinetype solid
Xmarktype none
Xlabel : Reads (all)
Xyaxis label : Reads/Writes per hour
Xxaxis
Xsize 4.75
Xno_auto_hash_labels
Xno_auto_hash_marks
Xhash_labels rotate -90 vjt hjl
Xshell :  awk -F'|' '(NR%3 == 1) {printf "hash_at %d hash_label at %d : %s\n",NR,NR,$1}' mab2.times
Xhash_label at 1 : 
END_OF_FILE
  if test 512 -ne `wc -c <'mab2.jgr'`; then
    echo shar: \"'mab2.jgr'\" unpacked with wrong size!
  fi
  # end of 'mab2.jgr'
fi
if test -f 'sin.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sin.c'\"
else
  echo shar: Extracting \"'sin.c'\" \(143 characters\)
  sed "s/^X//" >'sin.c' <<'END_OF_FILE'
X#include <math.h>
X     main()
X     {
X       double x;
X       for (x = -10.0; x < 10.0; x += .03)
X         printf("%f %f\n", x, sin(x));
X     }
END_OF_FILE
  if test 143 -ne `wc -c <'sin.c'`; then
    echo shar: \"'sin.c'\" unpacked with wrong size!
  fi
  # end of 'sin.c'
fi
if test -f 'sin.jgr' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sin.jgr'\"
else
  echo shar: Extracting \"'sin.jgr'\" \(523 characters\)
  sed "s/^X//" >'sin.jgr' <<'END_OF_FILE'
X(* This is a file to draw sin(i) for i going from -10 to 10.  The actual
X * points were created by a c program which is included below. *) 
X
Xnewgraph 
X
Xyaxis min -1 max 1 label : sin(i)
Xxaxis min -10 max 10 label : i
X
X(* Plot the sin curve *)
Xcurve 1 
X  marktype none
X  linetype solid
X  pts shell : ./sin
X   (* sin is the executable of the following c program:
X
X     #include <math.h>
X     main();
X     {
X       double x;
X       for (x = -10.0; x < 10.0; x += .03)
X         printf("%f %f\n", x, sin(x));
X     }
X     
X   *)
END_OF_FILE
  if test 523 -ne `wc -c <'sin.jgr'`; then
    echo shar: \"'sin.jgr'\" unpacked with wrong size!
  fi
  # end of 'sin.jgr'
fi
if test -f 'sin1.jgr' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sin1.jgr'\"
else
  echo shar: Extracting \"'sin1.jgr'\" \(1133 characters\)
  sed "s/^X//" >'sin1.jgr' <<'END_OF_FILE'
X(* This is an extension of sin.jgr only this time, the axes are at
Xx = 0 and y = 0.  The hash labels are printed at the left and bottom. *)
X
Xnewgraph 
X
Xyaxis min -1 max 1 label : sin(i) 
X  no_draw_hash_marks no_draw_axis_line
X
Xxaxis min -10 max 10 label : i
X  no_draw_hash_marks no_draw_axis_line
X
X(* Plot the sin curve *)
Xcurve 1 
X  marktype none
X  linetype solid
X  pts include sin.pts
X   (* sin.pts was created by the following c program:
X
X     #include <math.h>
X     main();
X     {
X       double x;
X       for (x = -10.0; x < 10.0; x += .03)
X         printf("%f %f\n", x, sin(x));
X     }
X     
X   *)
X
X(* Now, create a new graph with the same dimensions, but with the
X * x & y axes in a different place, and with no axis or hash labels.
X * Also, make the hash marks smaller. *)
X
Xnewgraph
Xinherit_axes
Xxaxis draw draw_at 0 hash_scale -.5 no_draw_hash_labels no_draw_axis_label
Xyaxis draw draw_at 0 hash_scale -.5 no_draw_hash_labels no_draw_axis_label
X
X(* Finally, we want the hash marks to be centered around the axes,
X * so draw them again with a scaling of +5.
X *)
X
Xnewgraph
Xinherit_axes
Xxaxis hash_scale .5
Xyaxis hash_scale .5
X
END_OF_FILE
  if test 1133 -ne `wc -c <'sin1.jgr'`; then
    echo shar: \"'sin1.jgr'\" unpacked with wrong size!
  fi
  # end of 'sin1.jgr'
fi
if test -f 'sin2.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sin2.c'\"
else
  echo shar: Extracting \"'sin2.c'\" \(142 characters\)
  sed "s/^X//" >'sin2.c' <<'END_OF_FILE'
X#include <math.h>
X     main()
X     {
X       double x;
X       for (x = 0.1; x < 100.0; x += .03)
X         printf("%f %f\n", x, sin(x));
X     }
END_OF_FILE
  if test 142 -ne `wc -c <'sin2.c'`; then
    echo shar: \"'sin2.c'\" unpacked with wrong size!
  fi
  # end of 'sin2.c'
fi
if test -f 'sin2.jgr' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sin2.jgr'\"
else
  echo shar: Extracting \"'sin2.jgr'\" \(469 characters\)
  sed "s/^X//" >'sin2.jgr' <<'END_OF_FILE'
X(* Now this is a sin wave from 0.1 to 100 with logarithmic axes *)
X
Xnewgraph 
X
Xyaxis min -1 max 1 
X  label : sin(i)
Xxaxis log 
X  label : i
X
Xtitle : I vs sin(i);
X
X(* Plot the sin curve *)
Xcurve 1 
X  marktype none
X  linetype solid
X  pts include sin2.pts
X   (* sin2.pts was created by the following c program:
X
X     #include <math.h>
X     main();
X     {
X       double x;
X       for (x = 0.1; x < 100.0; x += .03)
X         printf("%f %f\n", x, sin(x));
X     }
X     
X   *)
X
END_OF_FILE
  if test 469 -ne `wc -c <'sin2.jgr'`; then
    echo shar: \"'sin2.jgr'\" unpacked with wrong size!
  fi
  # end of 'sin2.jgr'
fi
if test -f 'sin3.jgr' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sin3.jgr'\"
else
  echo shar: Extracting \"'sin3.jgr'\" \(630 characters\)
  sed "s/^X//" >'sin3.jgr' <<'END_OF_FILE'
X(* This is the same as sin.jgr only a different include file of points is
Xused:  This one orders the points by ascending y value instead of ascending
Xx value.  The graph looks quite different *)
X
Xnewgraph 
X
Xyaxis min -1 max 1 label : sin(i)
Xxaxis min -10 max 10 label : i
X
X(* Plot the sin curve *)
Xcurve 1 
X  marktype none
X  linetype solid
X  pts include sin3.pts
X   (* sin.pts was created by the following c program:
X
X     #include <math.h>
X     main();
X     {
X       double x;
X       for (x = -10.0; x < 10.0; x += .03)
X         printf("%f %f\n", x, sin(x));
X     }
X     
X   * and then the output was piped through sort -n +1 *)
END_OF_FILE
  if test 630 -ne `wc -c <'sin3.jgr'`; then
    echo shar: \"'sin3.jgr'\" unpacked with wrong size!
  fi
  # end of 'sin3.jgr'
fi
echo shar: End of archive 7 \(of 7\).
cp /dev/null ark7isdone
MISSING=""
for I in 1 2 3 4 5 6 7 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 7 archives.
    rm -f ark[1-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0
exit 0 # Just in case...
