Newsgroups: comp.sources.misc
From: Kevin Stock <kstock@encore.com>
Subject:  v30i099:  oraperl-v2 - Extensions to Perl to access Oracle database, Patch01
Message-ID: <1992Jul6.154255.5091@sparky.imd.sterling.com>
X-Md4-Signature: a943431819cb362f80c8009bb702107f
Date: Mon, 6 Jul 1992 15:42:55 GMT
Approved: kent@sparky.imd.sterling.com

Submitted-by: Kevin Stock <kstock@encore.com>
Posting-number: Volume 30, Issue 99
Archive-name: oraperl-v2/patch01
Environment: Perl, Oracle with OCI, optionally Curses
Patch-To: oraperl-v2: Volume 30, Issue 87-91

*Sigh* There's always something. I made a mistake when I turned mkdb.pl
into a test, so it won't run anywhere else but here. I've also added a
hint about building coraperl with bsdcurses.mus. Thanks to Ron Pool for
these changes.

There's no functional change, so you don't need to rebuild. However,
patchlevel.h is updated to reflect the patch.

Run this file through patch -p to apply the patch.

	Kevin

*** patchlevel.h.orig	Wed Apr  8 13:12:16 1992
--- patchlevel.h	Tue Jun 30 08:54:41 1992
***************
*** 1,4 ****
  /* patchlevel.h */
  
  #define	VERSION		2
! #define	PATCHLEVEL	0
--- 1,4 ----
  /* patchlevel.h */
  
  #define	VERSION		2
! #define	PATCHLEVEL	1
*** Hints.orig	Tue Jun 23 16:41:38 1992
--- Hints	Tue Jun 30 08:56:44 1992
***************
*** 4,9 ****
--- 4,10 ----
  The topics dealt with are the following:
  
  	Memory Usage
+ 	Using bsdcurses.mus instead of curses.mus
  	Building on a Convex machine
  	Building on Dual Universe machines
  	Building with Perl v3
***************
*** 17,24 ****
  With versions of Perl prior to 4.034, there is a memory leak when
  repeated calls to &ora_fetch() are made within a while() loop.
  
! The correct solution is to upgrade to 4.034. However, if that is
! not possible for some reason, there is a workaround.
  
  Create a Perl subroutine which returns a row from a database and
  call this instead. So instead of
--- 18,25 ----
  With versions of Perl prior to 4.034, there is a memory leak when
  repeated calls to &ora_fetch() are made within a while() loop.
  
! The correct solution is to upgrade. However, if that is not possible
! for some reason, there is a workaround.
  
  Create a Perl subroutine which returns a row from a database and
  call this instead. So instead of
***************
*** 44,49 ****
--- 45,63 ----
  	{
  	    ...
  	}
+ 
+ 
+ Using bsdcurses.mus instead of curses.mus
+ =========================================
+ 
+ If you built curseperl using bsdcurses.mus (BSD curses) instead of
+ curses.mus (ATT curses), you must either:
+ 
+ 1) #ifdef out the references to the testcallback usersub
+    in bsdcurses.mus, or
+ 
+ 2) Extract the callback routines from $SRC/usub/usersub.c into a
+    separate file, and link it with coraperl.
  
  
  Building on a Convex machine
*** testdir/mkdb.pl.orig	Mon May 25 15:55:02 1992
--- testdir/mkdb.pl	Tue Jun 30 08:58:43 1992
***************
*** 46,52 ****
  
  # create the database
  
- $lda = &ora_login('t', 'kstock', 'kstock')	|| die $ora_errstr;
  &ora_do($lda, $CREATE)				|| die $ora_errstr;
  
  # put some data into it
--- 46,51 ----

exit 0 # Just in case...
