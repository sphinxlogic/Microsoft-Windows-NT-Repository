Newsgroups: comp.sources.misc
From: Kevin Stock <kstock@encore.com>
Subject:  v30i091:  oraperl-v2 - Extensions to Perl to access Oracle database, Part05/05
Message-ID: <1992Jun29.184348.11965@sparky.imd.sterling.com>
X-Md4-Signature: 4c2363782ba463ca40d73d90b28cdfb5
Date: Mon, 29 Jun 1992 18:43:48 GMT
Approved: kent@sparky.imd.sterling.com

Submitted-by: Kevin Stock <kstock@encore.com>
Posting-number: Volume 30, Issue 91
Archive-name: oraperl-v2/part05
Environment: Perl, Oracle with OCI, optionally Curses
Supersedes: oraperl: Volume 18, Issue 10

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# Contents:  Long colons.c dbug/Makefile dbug/Readme dbug/fact.c
#   doc/Makefile examples/Readme examples/bind.pl examples/ckdebug.pl
#   examples/ex.pl oraperl.ph patchlevel.h testdir/Readme
#   testdir/Standard-Results
# Wrapped by kent@sparky on Mon Jun 29 13:23:39 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 5 (of 5)."'
if test -f 'Long' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Long'\"
else
  echo shar: Extracting \"'Long'\" \(1139 characters\)
  sed "s/^X//" >'Long' <<'END_OF_FILE'
X
XPrior to version 2, Oraperl could not handle tables which contained
XLONG or LONGRAW datatypes.
X
XThe reason for this is that the OCI odsc function, which Oraperl uses
Xto determine the amount of buffer space to allocate for each field,
Xdoes not return a meaningful response in these cases. As a result, a
Xsmall buffer was allocated and the data was truncated during the fetch,
Xwhich Oraperl treated as an error.
X
XTo deal with LONG datatypes, two variables have been added.
X
X	$ora_long may be set by a program to the length of buffer to
X	be allocated for any LONG or LONGRAW fields encountered. It
X	is initialised to 80, as that is the value used by various
X	Oracle tools.
X
X	$ora_trunc is a flag which indicates whether truncation of a
X	LONG is to be considered an error or permitted. If $ora_trunc
X	is zero, then truncation of a LONG field causes &ora_fetch to
X	fail. Otherwise, the fetch completes successfully, but $ora_errno
X	is still set (to 1406) to warn of the truncation.
X
X&ora_fetch() accepts an optional second parameter which overrides the
Xsetting of $ora_trunc for that call.
X
XTruncation of all other datatypes remains an error.
END_OF_FILE
  if test 1139 -ne `wc -c <'Long'`; then
    echo shar: \"'Long'\" unpacked with wrong size!
  fi
  # end of 'Long'
fi
if test -f 'colons.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'colons.c'\"
else
  echo shar: Extracting \"'colons.c'\" \(1128 characters\)
  sed "s/^X//" >'colons.c' <<'END_OF_FILE'
X/* colons.c
X *
X * Returns the number of substitution variables in an SQL query.
X */
X/* Copyright 1991, 1992 Kevin Stock.
X *
X * You may copy this under the terms of the GNU General Public License,
X * or the Artistic License, copies of which should have accompanied your
X * Perl kit.
X */
X
X#include <stdio.h>
X#include "EXTERN.h"
X#include "orafns.h"
X
X
Xint count_colons(s)
Xregister char *s;
X{
X	register int n = 0, c;
X
X	DBUG_ENTER("count_colons");
X	DBUG_PRINT("entry", ("count_colons(\"%s\")", s));
X
X	while (*s != '\0')
X	{
X		if (*s == ':')
X		{
X			/* numbers must be used in sequence,
X			 * but they may be repeated if a parameter is reused
X			 */
X			if (((c = atoi(++s)) <= 0) || (c > n+1))
X			{
X			    /* number too low or out of sequence */
X			    DBUG_PRINT("exit",
X				("count_colons: got %d, expected %d", c, n+1));
X			    DBUG_RETURN(-1);
X			}
X			else if (c == n + 1)
X			{
X				++n;
X			}
X			/* else repeating a previous parameter */
X		}
X		else if (*s == '\'')
X		{
X			while ((*++s != '\'') && (*s != '\0'))
X				;
X		}
X		if (*s != '\0')
X		{
X			++s;
X		}
X	}
X
X	DBUG_PRINT("exit", ("count_colons: returning %d", n));
X	DBUG_RETURN(n);
X}
END_OF_FILE
  if test 1128 -ne `wc -c <'colons.c'`; then
    echo shar: \"'colons.c'\" unpacked with wrong size!
  fi
  # end of 'colons.c'
fi
if test -f 'dbug/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dbug/Makefile'\"
else
  echo shar: Extracting \"'dbug/Makefile'\" \(288 characters\)
  sed "s/^X//" >'dbug/Makefile' <<'END_OF_FILE'
X# Makefile for Fred Fish' DBUG package.
X# This file is not part of the original package.
X# It is in the public domain
X
XLIB	= dbug.o
X
Xall:	$(LIB) fact
X
Xfact:	$(LIB) fact.o
X	cc -o fact -O fact.o $(LIB)
X
Xfact.o:	dbug.h
X
Xclean:
X	rm -f fact.o nohup.out core
X
Xclobber: clean
X	rm -f $(LIB) fact
END_OF_FILE
  if test 288 -ne `wc -c <'dbug/Makefile'`; then
    echo shar: \"'dbug/Makefile'\" unpacked with wrong size!
  fi
  # end of 'dbug/Makefile'
fi
if test -f 'dbug/Readme' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dbug/Readme'\"
else
  echo shar: Extracting \"'dbug/Readme'\" \(914 characters\)
  sed "s/^X//" >'dbug/Readme' <<'END_OF_FILE'
XThis directory contains Fred Fish' internal debugging package DBUG.
X
XThe original files are
X
X	dbug.c		code for the debugging library
X	dbug.h		header file for debugged programs
X	dbug.p		documentation for the library
X
XTo these I have added
X
X	Makefile	builds dbug.o and the sample program
X	Readme		this file!
X	dbug.qr		a quick reference sheet for the library
X	fact.c		the sample program from the documentation
X
Xthe make targets are
X
X	all (default)	dbug.o and fact
X	dbug.o		the debugging library, ready for linking
X	fact		the sample program, linked and ready to test-drive
X
XI highly recommend this package. It is configurable at run time, allowing
Xthe debugging trace to be limited, for example, to selected functions and/or
Xtypes of operation. If used widely, it also guarantees a consistent debugging
Xinterface across different programs. It is in the public domain (see the
Xheader comment in dbug.[ch] for details).
END_OF_FILE
  if test 914 -ne `wc -c <'dbug/Readme'`; then
    echo shar: \"'dbug/Readme'\" unpacked with wrong size!
  fi
  # end of 'dbug/Readme'
fi
if test -f 'dbug/fact.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dbug/fact.c'\"
else
  echo shar: Extracting \"'dbug/fact.c'\" \(924 characters\)
  sed "s/^X//" >'dbug/fact.c' <<'END_OF_FILE'
X/* This is the example from the DBUG manual. */
X
X#include <stdio.h>
X#include "dbug.h"
X
X
Xmain (argc, argv)
Xint argc;
Xchar *argv[];
X{
X    register int result, ix;
X    extern int factorial (), atoi ();
X
X    DBUG_ENTER ("main");
X    DBUG_PROCESS (argv[0]);
X    for (ix = 1; ix < argc && argv[ix][0] == '-'; ix++) {
X        switch (argv[ix][1]) {
X            case '#':
X                DBUG_PUSH (&(argv[ix][2]));
X                break;
X        }
X    }
X    for (; ix < argc; ix++) {
X        DBUG_PRINT ("args", ("argv[%d] = %s", ix, argv[ix]));
X        result = factorial (atoi (argv[ix]));
X        printf ("%d\n", result);
X    }
X    DBUG_RETURN (0);
X}
X
X
Xint factorial (value)
Xregister int value;
X{
X    DBUG_ENTER ("factorial");
X    DBUG_PRINT ("find", ("find %d factorial", value));
X    if (value > 1) {
X        value *= factorial (value - 1);
X    }
X    DBUG_PRINT ("result", ("result is %d", value));
X    DBUG_RETURN (value);
X}
END_OF_FILE
  if test 924 -ne `wc -c <'dbug/fact.c'`; then
    echo shar: \"'dbug/fact.c'\" unpacked with wrong size!
  fi
  # end of 'dbug/fact.c'
fi
if test -f 'doc/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'doc/Makefile'\"
else
  echo shar: Extracting \"'doc/Makefile'\" \(227 characters\)
  sed "s/^X//" >'doc/Makefile' <<'END_OF_FILE'
X# Makefile for Oraperl documentation
X
XNROFF	= nroff
X
Xdocs:
X	$(NROFF) -man oraperl.1 >oraperl.man
X	$(NROFF) oraperl.ref >oraperl.ref.pr
X	$(NROFF) -man ../examples/sql >sql.man
X
Xclobber:
X	rm -f oraperl.man oraperl.ref.pr sql.man
END_OF_FILE
  if test 227 -ne `wc -c <'doc/Makefile'`; then
    echo shar: \"'doc/Makefile'\" unpacked with wrong size!
  fi
  # end of 'doc/Makefile'
fi
if test -f 'examples/Readme' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'examples/Readme'\"
else
  echo shar: Extracting \"'examples/Readme'\" \(1051 characters\)
  sed "s/^X//" >'examples/Readme' <<'END_OF_FILE'
XThis directory contains a few sample Oraperl scripts. Some are genuinely
Xuseful (sql, for example, is installed as part of make install) while
Xothers are just demonstrations of different things.
X
Xbind.pl		Demonstrates how &ora_bind() and &ora_fetch() may be
X		combined to make a simple table lookup program
X
Xckdebug.pl	Determines whether debugging is available
X
Xcommit.pl	Demonstrates the use of &ora_commit() and &ora_rollback()
X
Xex.pl		This was my first ever Oraperl script. I probably wrote it
X		before writing Oraperl! It reads data from a table and prints
X		it using a format.
X
Xmkdb.pl		Creates a database, puts some data into it, drops it. The nice
X		thing about this is that it detects whether it is running under
X		Oraperl or Coraperl, and changes its output accordingly.
X
Xoradump.pl	Dumps the contents of an Oracle table into a set of insert
X		statements.
X
Xsql		This was written in response to a posting on the net, asking
X		whether there was a tool which would execute an SQL statement
X		specified on the command line. Manual page built-in.
END_OF_FILE
  if test 1051 -ne `wc -c <'examples/Readme'`; then
    echo shar: \"'examples/Readme'\" unpacked with wrong size!
  fi
  # end of 'examples/Readme'
fi
if test -f 'examples/bind.pl' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'examples/bind.pl'\"
else
  echo shar: Extracting \"'examples/bind.pl'\" \(556 characters\)
  sed "s/^X//" >'examples/bind.pl' <<'END_OF_FILE'
X#!/usr/local/bin/oraperl
X#
X# bind.pl
X#
X# This shows how the ora_bind function may be used to implement a
X# simple lookup script.
X
X$ora_debug = shift if $ARGV[0] =~ /^-#/;
X
X$lda = &ora_login('t', 'kstock', 'kstock')
X	|| die $ora_errstr;
X$csr = &ora_open($lda, 'select phone from telno where name = :1')
X	|| die $ora_errstr;
X
Xwhile(<STDIN>)
X{
X	chop;
X	&ora_bind($csr, $_)	|| die $ora_errstr;
X
X	if (($phone) = &ora_fetch($csr))
X	{
X		print "$phone\n";
X	}
X	else
X	{
X		die $ora_errstr if $ora_errno;
X		print "unknown\n";
X	}
X}
X
X&ora_close($csr);
X&ora_logoff($lda);
END_OF_FILE
  if test 556 -ne `wc -c <'examples/bind.pl'`; then
    echo shar: \"'examples/bind.pl'\" unpacked with wrong size!
  fi
  chmod +x 'examples/bind.pl'
  # end of 'examples/bind.pl'
fi
if test -f 'examples/ckdebug.pl' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'examples/ckdebug.pl'\"
else
  echo shar: Extracting \"'examples/ckdebug.pl'\" \(138 characters\)
  sed "s/^X//" >'examples/ckdebug.pl' <<'END_OF_FILE'
X#!/usr/local/bin/oraperl
X
Xdefined($ora_debug) && print "debugging available\n";
Xdefined($ora_debug) || print "debugging not available\n";
END_OF_FILE
  if test 138 -ne `wc -c <'examples/ckdebug.pl'`; then
    echo shar: \"'examples/ckdebug.pl'\" unpacked with wrong size!
  fi
  chmod +x 'examples/ckdebug.pl'
  # end of 'examples/ckdebug.pl'
fi
if test -f 'examples/ex.pl' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'examples/ex.pl'\"
else
  echo shar: Extracting \"'examples/ex.pl'\" \(733 characters\)
  sed "s/^X//" >'examples/ex.pl' <<'END_OF_FILE'
X#!/usr/local/bin/oraperl
X
X$ora_debug = shift if $ARGV[0] =~ /^-#/;
X
Xformat STDOUT_TOP =
X       Name                           Phone
X       ====                           =====
X.
X
Xformat STDOUT =
X       @<<<<<<<<<<              @>>>>>>>>>>
X       $name,                   $phone
X.
X
Xdie ("You should use oraperl, not perl\n") unless defined &ora_login;
X
X$lda = &ora_login("t", "kstock", "kstock")
X	|| die $ora_errstr;
X$csr = &ora_open($lda, "select * from telno order by name", 6)
X	|| die $ora_errstr;
X
X$nfields = &ora_fetch($csr);
Xprint "Query will return $nfields fields\n\n";
X
Xwhile (($name, $phone) = &ora_fetch($csr))
X{
X	write;
X}
X
Xdo ora_close($csr) || die "can't close cursor";
Xdo ora_logoff($lda) || die "can't log off Oracle";
END_OF_FILE
  if test 733 -ne `wc -c <'examples/ex.pl'`; then
    echo shar: \"'examples/ex.pl'\" unpacked with wrong size!
  fi
  chmod +x 'examples/ex.pl'
  # end of 'examples/ex.pl'
fi
if test -f 'oraperl.ph' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'oraperl.ph'\"
else
  echo shar: Extracting \"'oraperl.ph'\" \(1086 characters\)
  sed "s/^X//" >'oraperl.ph' <<'END_OF_FILE'
X# oraperl.ph
X#
X# Various constants which may be useful in oraperl programs
X#
X# Author:	Kevin Stock
X# Date:		28th October 1991
X# Last Change:	8th April 1992
X
X
X# Oraperl error codes, set in $ora_errno
X
X$ORAP_NOMEM	= 100001;	# out of memory
X$ORAP_INVCSR	= 100002;	# invalid cursor supplied
X$ORAP_INVLDA	= 100003;	# invalid lda supplied
X$ORAP_NOSID	= 100004;	# couldn't set ORACLE_SID
X$ORAP_BADVAR	= 100005;	# bad colon variable sequence
X$ORAP_NUMVARS	= 100006;	# wrong number of colon variables
X$ORAP_NODATA	= 100007;	# statement does not return data
X
X
X# Oraperl debugging codes for $ora_debug
X# From version 2, you shouldn't really use these.
X
X$ODBG_EXEC	=   8;		# program execution
X$ODBG_STRNUM	=  32;		# string/numeric conversions
X$ODBG_MALLOC	= 128;		# memory allocation/release
X
X# Oracle datatypes
X# I don't know whether these are valid for all versions.
X
X%ora_types =
X(
X	 1,	'character array',
X	 2,	'number',
X	 3,	'signed integer',
X	 4,	'float',
X	 7,	'packed decimal',
X	 8,	'long string',
X	 9,	'varchar',
X	11,	'rowid',
X	12,	'date',
X	15,	'varraw',
X	23,	'raw',
X	24,	'long raw',
X);
X
X1;
END_OF_FILE
  if test 1086 -ne `wc -c <'oraperl.ph'`; then
    echo shar: \"'oraperl.ph'\" unpacked with wrong size!
  fi
  # end of 'oraperl.ph'
fi
if test -f 'patchlevel.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'patchlevel.h'\"
else
  echo shar: Extracting \"'patchlevel.h'\" \(60 characters\)
  sed "s/^X//" >'patchlevel.h' <<'END_OF_FILE'
X/* patchlevel.h */
X
X#define	VERSION		2
X#define	PATCHLEVEL	0
END_OF_FILE
  if test 60 -ne `wc -c <'patchlevel.h'`; then
    echo shar: \"'patchlevel.h'\" unpacked with wrong size!
  fi
  # end of 'patchlevel.h'
fi
if test -f 'testdir/Readme' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'testdir/Readme'\"
else
  echo shar: Extracting \"'testdir/Readme'\" \(196 characters\)
  sed "s/^X//" >'testdir/Readme' <<'END_OF_FILE'
XThe scripts in this directory are hacked from scripts in the examples
Xdirectory. They have been placed here for testing purposes. They aren't
Xexhaustive tests, but if they work, it's a good sign!
END_OF_FILE
  if test 196 -ne `wc -c <'testdir/Readme'`; then
    echo shar: \"'testdir/Readme'\" unpacked with wrong size!
  fi
  # end of 'testdir/Readme'
fi
if test -f 'testdir/Standard-Results' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'testdir/Standard-Results'\"
else
  echo shar: Extracting \"'testdir/Standard-Results'\" \(592 characters\)
  sed "s/^X//" >'testdir/Standard-Results' <<'END_OF_FILE'
Xcreating table 2 3 5 7 11 committing OK 13 17 19 23 29
X
XReading table for the first time
X
X2 3 5 7 11 13 17 19 23 29 
X
XRolling back OK
X
XAttempting to read data for the second time.
XOnly values up to 11 should appear.
X
X2 3 5 7 11 
X2 fields, lengths 10, 40
X	types 1, 2
X       Name         Ext
X       ====         ===
X       angela       208
X       arnold       305
X       catherine    201
X       julia        292
X       larry        424
X       randal       306
X2 fields, lengths 10, 40
X	types 1, 2
X       Name         Ext
X       ====         ===
X       larry        424
X       randal       306
END_OF_FILE
  if test 592 -ne `wc -c <'testdir/Standard-Results'`; then
    echo shar: \"'testdir/Standard-Results'\" unpacked with wrong size!
  fi
  # end of 'testdir/Standard-Results'
fi
echo shar: End of archive 5 \(of 5\).
cp /dev/null ark5isdone
MISSING=""
for I in 1 2 3 4 5 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 5 archives.
    rm -f ark[1-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0
exit 0 # Just in case...
