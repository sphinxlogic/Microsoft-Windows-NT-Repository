Newsgroups: comp.sources.misc
From: tynor@prism.gatech.edu (STEVE TYNOR)
Subject:  v30i083:  fplan-1.3 - Fplan 1.3 (Flight Planner), Part03/04
Message-ID: <1992Jun28.183420.3100@sparky.imd.sterling.com>
X-Md4-Signature: 7cd459a68824d5dfd44888a3079540a8
Date: Sun, 28 Jun 1992 18:34:20 GMT
Approved: kent@sparky.imd.sterling.com

Submitted-by: tynor@prism.gatech.edu (STEVE TYNOR)
Posting-number: Volume 30, Issue 83
Archive-name: fplan-1.3/part03
Environment: K&R C, BSD, MSDOS, Sunview (optional)
Supersedes: fplan: Volume 09, Issue 11-16

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# Contents:  Makefile NEW_FEATURES add.c config.h dosbuild.bat fp_lex.l
#   fp_yacc.y fplan.5 misc.c paddb.c reverse.c strings.c
# Wrapped by kent@sparky on Sun Jun 28 11:39:11 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 3 (of 4)."'
if test -f 'Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Makefile'\"
else
  echo shar: Extracting \"'Makefile'\" \(8127 characters\)
  sed "s/^X//" >'Makefile' <<'END_OF_FILE'
X# $Id: Makefile,v 2.23 91/02/22 21:22:19 tynor Exp Locker: tynor $
X#----------------------------------------------------------------------------
X#	FPLAN - Flight Planner
X#	Steve Tynor
X#	tynor@prism.gatech.edu
X#
X#	This program is in the public domain. Permission to copy,
X# distribute, modify this program is hearby given as long as this header
X# remains. If you redistribute this program after modifying it, please
X# document your changes so that I do not take the blame (or credit) for
X# those changes.  If you fix bugs or add features, please send me a
X# patch so that I can keep the 'official' version up-to-date.
X#
X#	Bug reports are welcome and I'll make an attempt to fix those
X# that are reported.
X#
X# 	USE AT YOUR OWN RISK! I assume no responsibility for any
X# errors in this program, its database or documentation. I will make an
X# effort to fix bugs, but if you crash and burn because, for example,
X# fuel estimates in this program were inaccurate, it's your own fault
X# for trusting somebody else's code! Remember, as PIC, it's _your_
X# responsibility to do complete preflight planning. Use this program as
X# a flight planning aid, but verify its results before using them.
X# ---------------------------------------------------------------------------
X
X# ---------------------------------------------------------------------------
X# EDIT THE FOLLOWING DEFINITIONS TO SUIT LOCAL CONDITIONS:
X# ---------------------------------------------------------------------------
X
X# ---------------------------------------------------------------------------
X# define which C compiler (if GNU, be sure to define as 'gcc -traditional')
XCC = gcc -traditional
X
X# ---------------------------------------------------------------------------
X# define where 'install' should put the man pages and executable:
XBINDIR	 = /usr/local/bin
XMANDIR	 = /usr/local/man
XDBS_LIBDIR = /usr/local/lib/preflight
X
X# ---------------------------------------------------------------------------
X# define the install command as 'install' on BSD Unix, otherwise just use 'cp'
X#INSTALL  = install
XINSTALL = cp
X
X# ---------------------------------------------------------------------------
X# define which graphics subroutines you want to include (currently, Sunview 
X# or nothing).  If you add X, NeWS, NeXT, EGA, etc. support - please mail me
X# your code so I can distribute it!)
X#GFX_OPTIONS = 
XGFX_OPTIONS = -DGFX_SUNVIEW
X
X# ---------------------------------------------------------------------------
X# define which graphics libraries are necessary for linking:
X#GFX_LIBS =
XGFX_LIBS = -lsuntool -lsunwindow -lpixrect
X
X# ---------------------------------------------------------------------------
X# define any flags required for the C compiler:
XCFLAGS   = -g $(GFX_OPTIONS)
X
X# ---------------------------------------------------------------------------
X# command to format the man pages. Note: tbl is necessary for the fplan.1 man
X# page when troffed (not necessary for nroff):
XMAN_FORMAT= nroff
X#MAN_FORMAT= tbl | troff -Tps
X
X# ---------------------------------------------------------------------------
X# NO NEED TO EDIT BELOW HERE.
X# ---------------------------------------------------------------------------
X
X# prevent certain makes (e.g. SunOS) from including wierd flags (like -sun386)
X.c.o:
X	$(CC) -c $(CFLAGS) $(CPPFLAGS) $*.c
X
XOBJS	  = output.o main.o add.o misc.o db.o compute.o fp_yacc.o fp_lex.o \
X	    strings.o reverse.o sv_draw.o
X
XC_SRC     = output.c main.c add.c misc.c db.c compute.c paddb.c \
X	    strings.c reverse.c sv_draw.c wp_info.h mystring.h version.h
X
XOTHER_SRC = fp_lex.l fp_yacc.y config.h
X
X# things required by the DOS version which are generated by Yacc/Lex:
XDOS_SRC   = fp_lex.c fp_yacc.c fp_tok.h dosbuild.bat
X
XMAN	  = fplan.1 fplan.5 paddb.1
X
XFORMATTED_MAN = fplan.man fplan_dbs.man paddb.man
X
XDOC 	  = README NEW_FEATURES EXAMPLE.fplan $(MAN) WHERE_DBS
X
XEXE	  = fplan paddb
X
XDIST_FILES = $(DOC) Makefile $(C_SRC) $(OTHER_SRC) dosbuild.bat 
XALL_SRC    = $(DIST_FILES)
X
XDIST_NAME  = fplan_1_3
XPATCH_NAME = $(DIST_NAME)__1_2.patch
X
X# where I test the MessyDOS version:
XDOSDIR   = /u/tynor/pc/src/fplan
X
Xall : $(EXE)
Xdoc : $(FORMATTED_MAN)
X
Xpaddb.man : paddb.1
X	cat paddb.1 | $(MAN_FORMAT) -man > paddb.man
Xfplan.man : fplan.1
X	cat fplan.1 | $(MAN_FORMAT) -man > fplan.man
Xfplan_dbs.man : fplan.5
X	cat fplan.5 | $(MAN_FORMAT) -man > fplan_dbs.man
X
Xpaddb : paddb.c
X	$(CC) -o paddb paddb.c
X
Xfplan : $(OBJS)
X	$(CC) -o fplan $(OBJS) $(GFX_LIBS) -lm
X
Xfp_lex.c : fp_lex.l fp_tok.h
X	lex fp_lex.l
X	mv lex.yy.c fp_lex.c
X
Xfp_yacc.c fp_tok.h : fp_yacc.y wp_info.h
X	yacc -d fp_yacc.y
X	mv y.tab.c fp_yacc.c
X	mv y.tab.h fp_tok.h
X
X#------------
Xfp_yacc.o 	: fp_yacc.c
Xfp_lex.o 	: fp_lex.c
Xadd.o 		: add.c wp_info.h 
Xcompute.o 	: compute.c wp_info.h
Xdb.o 		: db.c wp_info.h mystring.h config.h
Xmain.o 		: main.c wp_info.h version.h
Xmisc.o 		: misc.c 
Xoutput.o 	: output.c wp_info.h mystring.h
Xstrings.o 	: strings.c mystring.h
Xreverse.o	: reverse.c wp_info.h
Xsv_draw.o	: sv_draw.c wp_info.h
X#------------
X
X# move the current files into the DOS test directory:
Xdos : $(DOS_SRC)
X	cp $(C_SRC) $(DOSDIR)
X	cp $(DOS_SRC) $(DOSDIR)
X	(cd $(DOSDIR); /u/tynor/bin/2dos $(C_SRC) $(DOS_SRC))
X
Xpatch: 
X	-/bin/rm $(PATCH_NAME)
X	echo "Patch file to bring FPLAN 1.2 to FPLAN 1.3" > $(PATCH_NAME)
X	-( for f in $(DIST_FILES) ; \
X	  do \
X	     rcsdiff -w -t -c -rnet_1_2 $$f > /tmp/patch.$$ ;\
X	     if [ $$? != 0 ] ; \
X	     then \
X	       echo "-------------------------------------" >> $(PATCH_NAME) ;\
X	       echo FILE: $$f >> $(PATCH_NAME) ;\
X	       echo "-------------------------------------" >> $(PATCH_NAME) ;\
X	       cat /tmp/patch.$$ >> $(PATCH_NAME) ;\
X	     fi ;\
X	  done )
X
XTAGS : $(DIST_FILES)
X	etags $(DIST_FILES)
X
Xfreeze:
X	@(echo "rcsfreeze msg (1st line used as ci msg) (use ^D to end):";\
X	  cat > /tmp/check.$$$$;\
X	  read msg < /tmp/check.$$$$;\
X	  echo -------------------------------------------------;\
X	  echo rcsfreeze message:;\
X	  cat /tmp/check.$$$$;\
X	  echo -------------------------------------------------;\
X	  echo ci message: $$msg;\
X	  echo -------------------------------------------------;\
X	  echo -n "Ok? [n]: ";\
X	  read yn;\
X	  if [ "$$yn" \!= "y" ]; then echo Aborted.; exit 1; fi;\
X	  echo -n "RCSFREEZE version: ";\
X	  read ver;\
X	  ci -q -u -m"$$msg" $(ALL_SRC);\
X	  rcsfreeze $$ver < /tmp/check.$$$$ )
X
Xclean : 
X	-rm *.o *~ fp_tok.h fp_lex.c fp_yacc.c fplan paddb *.man fplan.0? fplan.tar.Z
X
Xdistribute :
X	# all-in-one compressed tar file for FTP archive:
X	tar cfo $(DIST_NAME).tar $(DIST_FILES)
X	compress $(DIST_NAME).tar
X	# many shar files for newsgroup distribution:
X	cat README > $(DIST_NAME).01
X	echo "" >> $(DIST_NAME).01
X	echo "---- cut here ---- cut here ---- cut here ---- cut here ----" >> $(DIST_NAME).01
X	echo "# This is part 1/6 of FPLAN" >> $(DIST_NAME).01
X	shar2 -D -v README NEW_FEATURES EXAMPLE.fplan WHERE_DBS Makefile paddb.c >> $(DIST_NAME).01
X	echo "#This is part 2/6 of FPLAN" > $(DIST_NAME).02
X	shar2 -D -v fplan.1 fplan.5 paddb.1 >> $(DIST_NAME).02
X	echo "#This is part 3/6 of FPLAN" > $(DIST_NAME).03
X	shar2 -D -v add.c compute.c >> $(DIST_NAME).03
X	echo "#This is part 4/6 of FPLAN" > $(DIST_NAME).04
X	shar2 -D -v output.c config.h >> $(DIST_NAME).04
X	echo "#This is part 5/6 of FPLAN" > $(DIST_NAME).05
X	shar2 -D -v main.c misc.c db.c strings.c >> $(DIST_NAME).05
X	echo "#This is part 6/6 of FPLAN" > $(DIST_NAME).06
X	shar2 -D -v fp_lex.l fp_yacc.y sv_draw.c dosbuild.bat mystring.h wp_info.h reverse.c version.h >> $(DIST_NAME).06
X
Xinstall : $(EXE) $(MAN) 
X	$(INSTALL) $(EXE) $(BINDIR)
X	$(INSTALL) fplan.1 paddb.1 $(MANDIR)/man1
X	$(INSTALL) fplan.5 $(MANDIR)/man5
X
Xinstall_dbs : $(DBS_LIBDIR)/vors.nav $(DBS_LIBDIR)/airports.nav
X
X$(DBS_LIBDIR)/vors.nav : $(DBS_LIBDIR)/vors.txt
X	sort $(DBS_LIBDIR)/vors.txt -o $(DBS_LIBDIR)/vors.txt
X	paddb $(DBS_LIBDIR)/vors.txt $(DBS_LIBDIR)/vors.nav
X
X$(DBS_LIBDIR)/airports.nav : $(DBS_LIBDIR)/airports.txt
X	sort $(DBS_LIBDIR)/airports.txt -o $(DBS_LIBDIR)/airports.txt
X	paddb $(DBS_LIBDIR)/airports.txt $(DBS_LIBDIR)/airports.nav
X
X$(DBS_LIBDIR)/airports.txt $(DBS_LIBDIR)/vors.txt :
X	@echo DB files missing. See WHERE_DBS to get the databases.
X
END_OF_FILE
  if test 8127 -ne `wc -c <'Makefile'`; then
    echo shar: \"'Makefile'\" unpacked with wrong size!
  fi
  # end of 'Makefile'
fi
if test -f 'NEW_FEATURES' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'NEW_FEATURES'\"
else
  echo shar: Extracting \"'NEW_FEATURES'\" \(1840 characters\)
  sed "s/^X//" >'NEW_FEATURES' <<'END_OF_FILE'
XThe following list summarizes the difference between FPLAN version 1.0
Xand  1.1:
X
X	- Added 'return' (-r) switch to produce the return trip version
X 	  of an input plan.
X	- Ported to MessyDOS (tested with MSC and Zortech compilers).
X	  Reports from users of FPLAN 1.0 indicate that it ports fairly
X	  easily to other flavors of Unix.
X	- Added a graphic previewer for Sunview.
X	- Added DME fields to VOR fixes.
X	- Slight change in output form.
X	- Added database summary (-d) option (appends a description of each 
X	  airport and navaid used to the end of the flight plan).
X	- Fixed a bug that sometimes printed negative headings.
X	- Fixed a bug that prevented refueling at an enroute airport.
X	- Added index (3) to the strings.c file. Can anyone suggest a
X	  way to portably handle the myriad different string(3) libraries
X	  without totaly redefining everything?
X	- Changed a right recursive rule in grammar to left recursion - longer
X	  plans now supported.
X	- Added documentation on the database file format for those without
X	  access to the NAV documentation or source.
X	- Added a database formatter for creating private databases.
X	- Incremental waypoints may now be specified as a distance to the
X	  _next_ turn point as well as from the _last_.
X
XThe following changes were made for version 1.2:
X
X	- fixed mag variation computation
X	- fixed TO/FROM logic for VORs
X	
XThe following changes were made for version 1.3:
X
X	- fixed longitude calculation to allow negative values (for those
X	  intrepid European net aviators)
X
XEnjoy! Let me know what you think.
X
X=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
X	Virtue is its own punishment.
X
X	Steve Tynor
X
X	Yellow Jacket Flying Club
X	and
X	Georgia Tech Research Institute
X	Artificial Intelligence Branch
X	Georgia Institute of Technology
X	tynor@prism.gatech.edu
END_OF_FILE
  if test 1840 -ne `wc -c <'NEW_FEATURES'`; then
    echo shar: \"'NEW_FEATURES'\" unpacked with wrong size!
  fi
  # end of 'NEW_FEATURES'
fi
if test -f 'add.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'add.c'\"
else
  echo shar: Extracting \"'add.c'\" \(8288 characters\)
  sed "s/^X//" >'add.c' <<'END_OF_FILE'
X/*
X * $Id: add.c,v 2.5 89/11/11 19:09:43 tynor Exp $
X *----------------------------------------------------------------------------
X *	FPLAN - Flight Planner
X *	Steve Tynor
X *	tynor@prism.gatech.edu
X *
X *	This program is in the public domain. Permission to copy,
X * distribute, modify this program is hearby given as long as this header
X * remains. If you redistribute this program after modifying it, please
X * document your changes so that I do not take the blame (or credit) for
X * those changes.  If you fix bugs or add features, please send me a
X * patch so that I can keep the 'official' version up-to-date.
X *
X *	Bug reports are welcome and I'll make an attempt to fix those
X * that are reported.
X *
X *	USE AT YOUR OWN RISK! I assume no responsibility for any
X * errors in this program, its database or documentation. I will make an
X * effort to fix bugs, but if you crash and burn because, for example,
X * fuel estimates in this program were inaccurate, it's your own fault
X * for trusting somebody else's code! Remember, as PIC, it's _your_
X * responsibility to do complete preflight planning. Use this program as
X * a flight planning aid, but verify its results before using them.
X *----------------------------------------------------------------------------
X */
X
Xstatic char rcsid[] = "$Id: add.c,v 2.5 89/11/11 19:09:43 tynor Exp $";
X
X#include "wp_info.h"
X
Xextern char *malloc();
Xextern BOOLEAN lookup_desig ();
X
Xstatic BOOLEAN brief_mode = FALSE;
X
X#if 0
X/*----------------------------------------------------------------------------*/
Xstatic void find_intersection (desig1, radial1, desig2, radial2,
X			       latitude, longitude)
X     double  radial1, radial2;
X     char    *desig1, *desig2;
X     double  *latitude, *longitude;
X{
X   yyerror ("don't know how to find intersection yet");
X}
X#endif
X
X/*----------------------------------------------------------------------------*/
Xstatic void init_db (db)
XDATABASE_INFO *db;
X{
X   if (db) {
X      db->freq.valid = FALSE;
X      db->desig = (char*)0;
X      db->name = (char*)0;
X      db->city = (char*)0;
X      db->comment = (char*)0;
X      db->altitude.valid = FALSE;
X   }
X}
X
X/*----------------------------------------------------------------------------*/
Xstatic void new_waypoint ()
X{
X   extern yyerror();
X
X   if (num_waypoints >= MAX_NUM_WAYPOINTS)
X      yyerror ("too many waypoints");
X   
X   if (num_waypoints > 0) {
X      waypoints[num_waypoints] = waypoints[num_waypoints-1]; 
X      waypoints[num_waypoints].refuel = FALSE;
X      waypoints[num_waypoints].extra_fuel_burn.valid = FALSE;
X   }
X   
X   num_waypoints++;
X}
X
X/*----------------------------------------------------------------------------*/
Xvoid add_named_waypoint (kind, desig)
X     WAYPOINT_KIND kind;
X     char *desig;
X{
X   DATABASE_INFO *db;
X
X   if (lookup_desig (kind, desig, &db)) {
X      new_waypoint ();   
X      waypoints[num_waypoints-1].wp_kind = kind;
X      waypoints[num_waypoints-1].db = db;
X   }
X}
X
X/*----------------------------------------------------------------------------*/
Xvoid add_inc_waypoint (dist_since_last_wp, 
X		       name_str, city_str, comment_str)
X     double dist_since_last_wp;
X     char   *name_str;
X     char   *city_str;
X     char   *comment_str;
X{
X   if (brief_mode)
X      return;
X
X   new_waypoint ();
X
X   waypoints[num_waypoints-1].db = 
X      (DATABASE_INFO*) malloc (sizeof (DATABASE_INFO));
X   if (! waypoints[num_waypoints-1].db)
X      yyerror ("unable to allocate space for waypoint");
X
X   init_db (waypoints[num_waypoints-1].db);
X
X   waypoints[num_waypoints-1].db->mode = WP_INCREMENTAL;
X   waypoints[num_waypoints-1].wp_kind = WP_VIA;
X   waypoints[num_waypoints-1].db->name = name_str;
X   waypoints[num_waypoints-1].db->city = city_str;
X   waypoints[num_waypoints-1].db->comment = comment_str;
X
X   /*
X    * NOTE: we can't compute lat/long since we don't know the true course
X    * yet. So, just store the distance until print time.
X    */
X   waypoints[num_waypoints-1].db->u.dist_since_last_wp = dist_since_last_wp;
X}
X
X#if 0
X/*----------------------------------------------------------------------------*/
Xvoid add_int_waypoint (kind, desig1, radial1, desig2, radial2, 
X		       name_str, city_str, comment_str)
X     WAYPOINT_KIND kind;
X     double  radial1, radial2;
X     char    *desig1, *desig2, *name_str, *city_str, *comment_str;
X{
X   new_waypoint ();
X   waypoints[num_waypoints-1].db = 
X      (DATABASE_INFO*) malloc (sizeof (DATABASE_INFO));
X   if (! waypoints[num_waypoints-1].db)
X      yyerror ("unable to allocate space for waypoint");
X
X   init_db (waypoints[num_waypoints-1].db);
X
X   find_intersection (desig1, radial1, desig2, radial2, 
X		      &waypoints[num_waypoints-1].db->latitude, 
X		      &waypoints[num_waypoints-1].db->longitude);
X   waypoints[num_waypoints-1].db->mode = WP_INTERSECTION;
X   waypoints[num_waypoints-1].wp_kind = kind;
X   waypoints[num_waypoints-1].db->name = name_str;
X   waypoints[num_waypoints-1].db->city = city_str;
X   waypoints[num_waypoints-1].db->comment = comment_str;
X}
X#endif
X
X/*----------------------------------------------------------------------------*/
Xvoid add_lat_waypoint (kind, latitude, longitude, 
X		       name_str, city_str, comment_str)
X     WAYPOINT_KIND kind;
X     double  latitude, longitude;
X     char    *name_str;
X     char    *city_str;
X     char    *comment_str;
X{
X   new_waypoint ();
X   waypoints[num_waypoints-1].db = 
X      (DATABASE_INFO*) malloc (sizeof (DATABASE_INFO));
X   if (! waypoints[num_waypoints-1].db)
X      yyerror ("unable to allocate space for waypoint");
X
X   init_db (waypoints[num_waypoints-1].db);
X
X   waypoints[num_waypoints-1].db->mode = WP_LAT_LONG;
X   waypoints[num_waypoints-1].wp_kind = kind;
X   waypoints[num_waypoints-1].db->latitude = latitude;
X   waypoints[num_waypoints-1].db->longitude = longitude;
X   waypoints[num_waypoints-1].db->name = name_str;
X   waypoints[num_waypoints-1].db->city = city_str;
X   waypoints[num_waypoints-1].db->comment = comment_str;
X}
X
X/*----------------------------------------------------------------------------*/
Xvoid set_xfix (vor_num, vor_desig)
Xint vor_num;
Xchar *vor_desig;
X{
X   char buffer[80];
X   int i = MAX (0, num_waypoints-1);
X
X   if ((vor_num < 1) || (vor_num > MAX_NUM_VOR_FIXES)) {
X      sprintf (buffer, "Invalid NAV number. Must be between 1 and %d", 
X	       MAX_NUM_VOR_FIXES);
X      yyerror (buffer);
X   }
X   if (lookup_desig (WP_VIA, vor_desig, &waypoints[i].vor_fix[vor_num-1].db)) {
X      waypoints[i].vor_fix[vor_num-1].valid = TRUE;
X      max_nav = MAX (max_nav, vor_num-1);
X   }
X}
X
X/*----------------------------------------------------------------------------*/
Xvoid set_tas (tas)
X     double tas;
X{
X   int i = MAX (0, num_waypoints-1);
X
X   waypoints[i].tas.valid = TRUE;
X   waypoints[i].tas.value = tas;
X}
X
X/*----------------------------------------------------------------------------*/
Xvoid set_wind (heading, speed)
X     double heading, speed;
X{
X   int i = MAX (0, num_waypoints-1);
X
X   waypoints[i].wind_speed.valid = TRUE;
X   waypoints[i].wind_speed.value = speed;
X   waypoints[i].wind_direction.valid = TRUE;
X   waypoints[i].wind_direction.value = heading;
X}
X
X/*----------------------------------------------------------------------------*/
Xvoid set_fuel_amt (amt)
X     double amt;
X{
X   int i = MAX (0, num_waypoints-1);
X
X   waypoints[i].refuel         = TRUE;
X   waypoints[i].fuel_amt.valid = TRUE;
X   waypoints[i].fuel_amt.value = amt;
X}
X
X/*----------------------------------------------------------------------------*/
Xvoid set_extra_fuel_burn (amt)
X     double amt;
X{
X   int i = MAX (0, num_waypoints-1);
X
X   waypoints[i].extra_fuel_burn.valid = TRUE;
X   waypoints[i].extra_fuel_burn.value = amt;
X}
X
X/*----------------------------------------------------------------------------*/
Xvoid set_fuel_rate (rate)
X     double rate;
X{
X   int i = MAX (0, num_waypoints-1);
X
X   waypoints[i].fuel_rate.valid = TRUE;
X   waypoints[i].fuel_rate.value = rate;
X}
X
X/*----------------------------------------------------------------------------*/
Xvoid set_altitude (feet)
X     double feet;
X{
X   int i = MAX (0, num_waypoints-1);
X
X   waypoints[i].altitude.valid = TRUE;
X   waypoints[i].altitude.value = feet;
X}
X
X/*----------------------------------------------------------------------------*/
Xvoid set_brief (on_off)
X     BOOLEAN on_off;
X{
X   brief_mode = on_off;
X}
X
X
END_OF_FILE
  if test 8288 -ne `wc -c <'add.c'`; then
    echo shar: \"'add.c'\" unpacked with wrong size!
  fi
  # end of 'add.c'
fi
if test -f 'config.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'config.h'\"
else
  echo shar: Extracting \"'config.h'\" \(2093 characters\)
  sed "s/^X//" >'config.h' <<'END_OF_FILE'
X/*
X * $Id: config.h,v 1.1 90/06/15 21:32:01 tynor Exp $
X *----------------------------------------------------------------------------
X *	FPLAN - Flight Planner
X *	Steve Tynor
X *	tynor@prism.gatech.edu
X *
X *	This program is in the public domain. Permission to copy,
X * distribute, modify this program is hearby given as long as this header
X * remains. If you redistribute this program after modifying it, please
X * document your changes so that I do not take the blame (or credit) for
X * those changes.  If you fix bugs or add features, please send me a
X * patch so that I can keep the 'official' version up-to-date.
X *
X *	Bug reports are welcome and I'll make an attempt to fix those
X * that are reported.
X *
X *	USE AT YOUR OWN RISK! I assume no responsibility for any
X * errors in this program, its database or documentation. I will make an
X * effort to fix bugs, but if you crash and burn because, for example,
X * fuel estimates in this program were inaccurate, it's your own fault
X * for trusting somebody else's code! Remember, as PIC, it's _your_
X * responsibility to do complete preflight planning. Use this program as
X * a flight planning aid, but verify its results before using them.
X *----------------------------------------------------------------------------
X */
X
X
X/*
X * environment variables for where the databases are:
X */
X#define HOME 		"HOME"		/* used to expand ~ */
X#define NAV_PUBLIC	"NAV"
X#define NAV_PRIVATE	"NAV_PRIVATE"
X
X/*
X * Default directories for the private databases
X */
X#ifndef DEFAULT_PVT_DIRECTORY
X#ifdef MSDOS
X#define DEFAULT_PVT_DIRECTORY	"\\flight"
X#else
X#define DEFAULT_PVT_DIRECTORY	"~/preflight"
X#endif
X#endif
X
X/*
X * Default directories for the public databases
X */
X#ifndef DEFAULT_PUB_DIRECTORY
X#ifdef MSDOS
X#define DEFAULT_PUB_DIRECTORY	"\\lib\\flight"
X#else
X#define DEFAULT_PUB_DIRECTORY	"/usr/local/lib/preflight"
X#endif
X#endif
X
X/*
X * Default names for the database files
X */
X#ifdef MSDOS
X#define AIRPORTS_NAME "\\airports.nav"
X#define VORS_NAME     "\\vors.nav"
X#else
X#define AIRPORTS_NAME "/airports.nav"
X#define VORS_NAME     "/vors.nav"
X#endif
X
END_OF_FILE
  if test 2093 -ne `wc -c <'config.h'`; then
    echo shar: \"'config.h'\" unpacked with wrong size!
  fi
  # end of 'config.h'
fi
if test -f 'dosbuild.bat' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dosbuild.bat'\"
else
  echo shar: Extracting \"'dosbuild.bat'\" \(2394 characters\)
  sed "s/^X//" >'dosbuild.bat' <<'END_OF_FILE'
X: $Id: dosbuild.bat,v 1.5 89/11/19 16:14:19 tynor Exp Locker: tynor $
X:----------------------------------------------------------------------------
X:	FPLAN - Flight Planner
X:	Steve Tynor
X:	tynor@prism.gatech.edu
X:
X:	This program is in the public domain. Permission to copy,
X: distribute, modify this program is hearby given as long as this header
X: remains. If you redistribute this program after modifying it, please
X: document your changes so that I do not take the blame (or credit) for
X: those changes.  If you fix bugs or add features, please send me a
X: patch so that I can keep the 'official' version up-to-date.
X:
X:	Bug reports are welcome and I'll make an attempt to fix those
X: that are reported.
X:
X: 	USE AT YOUR OWN RISK! I assume no responsibility for any
X: errors in this program, its database or documentation. I will make an
X: effort to fix bugs, but if you crash and burn because, for example,
X: fuel estimates in this program were inaccurate, it's your own fault
X: for trusting somebody else's code! Remember, as PIC, it's _your_
X: responsibility to do complete preflight planning. Use this program as
X: a flight planning aid, but verify its results before using them.
X: ---------------------------------------------------------------------------
X
X: ---------------------------------------------------------------------------
X: This is a MessyDOS batch file to compile FPLAN - 
X:
X: Uncomment the approriate lines to compile with whatever compiler you have.
X: ---------------------------------------------------------------------------
X
X: ---------------------------------------------------------------------------
X: Zortech:
Xztc -c -ml -w -p fp_lex.c
Xztc -c -ml -w -p fp_yacc.c
Xztc -c -ml -w -p add.c
Xztc -c -ml -w -p compute.c
Xztc -c -ml -w -p db.c
Xztc -c -ml -w -p main.c
Xztc -c -ml -w -p misc.c
Xztc -c -ml -w -p output.c
Xztc -c -ml -w -p strings.c
Xztc -c -ml -w -p reverse.c
Xztc -ml -L -ofplan.exe fp_lex.obj fp_yacc.obj add.obj compute.obj db.obj main.obj misc.obj output.obj strings.obj reverse.obj
X
X: ---------------------------------------------------------------------------
X: Microsoft:
X:cl /c /AL fp_lex.c
X:cl /c /AL fp_yacc.c
X:cl /c /AL add.c
X:cl /c /AL compute.c
X:cl /c /AL db.c
X:cl /c /AL main.c
X:cl /c /AL misc.c
X:cl /c /AL output.c
X:cl /c /AL strings.c
X:cl /c /AL reverse.c
X:cl /Fefplan.exe fp_lex fp_yacc add compute db main misc output strings reverse /link
X
END_OF_FILE
  if test 2394 -ne `wc -c <'dosbuild.bat'`; then
    echo shar: \"'dosbuild.bat'\" unpacked with wrong size!
  fi
  # end of 'dosbuild.bat'
fi
if test -f 'fp_lex.l' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'fp_lex.l'\"
else
  echo shar: Extracting \"'fp_lex.l'\" \(2437 characters\)
  sed "s/^X//" >'fp_lex.l' <<'END_OF_FILE'
X%{
X/*
X * $Id: fp_lex.l,v 2.4 89/11/14 20:28:11 tynor Exp $
X *----------------------------------------------------------------------------
X *	FPLAN - Flight Planner
X *	Steve Tynor
X *	tynor@prism.gatech.edu
X *
X *	This program is in the public domain. Permission to copy,
X * distribute, modify this program is hearby given as long as this header
X * remains. If you redistribute this program after modifying it, please
X * document your changes so that I do not take the blame (or credit) for
X * those changes.  If you fix bugs or add features, please send me a
X * patch so that I can keep the 'official' version up-to-date.
X *
X *	Bug reports are welcome and I'll make an attempt to fix those
X * that are reported.
X *
X *	USE AT YOUR OWN RISK! I assume no responsibility for any
X * errors in this program, its database or documentation. I will make an
X * effort to fix bugs, but if you crash and burn because, for example,
X * fuel estimates in this program were inaccurate, it's your own fault
X * for trusting somebody else's code! Remember, as PIC, it's _your_
X * responsibility to do complete preflight planning. Use this program as
X * a flight planning aid, but verify its results before using them.
X *----------------------------------------------------------------------------
X */
X	
X#include "fp_tok.h"
X
Xstatic char rcsid[] = "$Id: fp_lex.l,v 2.4 89/11/14 20:28:11 tynor Exp $";
X
Xdouble yydval;
Xextern double atof();
X
X%}
X
X%%
X
X\#.*$		;	/* comment */
X\"		{ int i;
X		  for (i = 0; (yytext[i] = input()) != '\"'; i++) {
X		     if (yytext[i] == '\"')
X			break;
X		     if (yytext[i] == '\\')
X			yytext[i] = input();
X		  }
X		  yytext[i] = '\0';
X		  return TOK_STRING;
X		};
Xalt		return TOK_ALT;
Xvia		return TOK_VIA;
Xfrom		return TOK_FROM;
Xto		return TOK_TO;
Xmi		return TOK_MI;
Xnm		return TOK_NM;
Xmph		return TOK_MPH;
Xkts		return TOK_KTS;
Xnav		return TOK_NAV;
Xwind		return TOK_WIND;
Xtas		return TOK_TAS;
Xfuel_amt	return TOK_FUEL_AMT;
Xfuel_rate	return TOK_FUEL_RATE;
Xfuel_used	return TOK_FUEL_USED;
X
X\@		return TOK_ATSIGN;
X
X[\+\-]?[0-9]+\.[0-9]+	{ yydval = atof (yytext);
X		  return TOK_REAL;
X		};
X[\+\-]?[0-9]+   { yydval = atof (yytext);
X		  return TOK_INTEGER;
X		};
X\_?[0-9A-Za-z]+ return TOK_SYMBOL; /* use a leading _ for personal waypoints */
X\:\=		return TOK_ASSIGN;
X\;		return TOK_SEMICOLON;
X\,		return TOK_COMMA;
X\(		return TOK_LPAREN;
X\)		return TOK_RPAREN;
X[ \t\n]       	;	/* ignore whitespace */
X.		;	/* ignore anything else too */
X%%
END_OF_FILE
  if test 2437 -ne `wc -c <'fp_lex.l'`; then
    echo shar: \"'fp_lex.l'\" unpacked with wrong size!
  fi
  # end of 'fp_lex.l'
fi
if test -f 'fp_yacc.y' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'fp_yacc.y'\"
else
  echo shar: Extracting \"'fp_yacc.y'\" \(4485 characters\)
  sed "s/^X//" >'fp_yacc.y' <<'END_OF_FILE'
X%{
X/*
X * $Id: fp_yacc.y,v 2.5 89/11/11 19:17:00 tynor Exp $
X *----------------------------------------------------------------------------
X *	FPLAN - Flight Planner
X *	Steve Tynor
X *	tynor@prism.gatech.edu
X *
X *	This program is in the public domain. Permission to copy,
X * distribute, modify this program is hearby given as long as this header
X * remains. If you redistribute this program after modifying it, please
X * document your changes so that I do not take the blame (or credit) for
X * those changes.  If you fix bugs or add features, please send me a
X * patch so that I can keep the 'official' version up-to-date.
X *
X *	Bug reports are welcome and I'll make an attempt to fix those
X * that are reported.
X *
X *	USE AT YOUR OWN RISK! I assume no responsibility for any
X * errors in this program, its database or documentation. I will make an
X * effort to fix bugs, but if you crash and burn because, for example,
X * fuel estimates in this program were inaccurate, it's your own fault
X * for trusting somebody else's code! Remember, as PIC, it's _your_
X * responsibility to do complete preflight planning. Use this program as
X * a flight planning aid, but verify its results before using them.
X *----------------------------------------------------------------------------
X */
X
X#include "wp_info.h"
X#include "mystring.h"
X
Xstatic char rcsid[] = "$Id: fp_yacc.y,v 2.5 89/11/11 19:17:00 tynor Exp $";
X
Xextern double degrees_mins_2_decimal ();
X
Xextern double yydval;
Xextern char   yytext[];
X
Xtypedef union {
X   int			ival;
X   double		dval;
X   char			*sval;
X   WAYPOINT_KIND	kval;
X} YYSTYPE;
X
X%}
X
X%type <kval> waypoint_kind
X   /*
X    * %type <dval> radial
X    */
X%type <dval> number
X%type <dval> latitude
X%type <dval> longitude
X%type <dval> heading
X%type <dval> distance 
X%type <dval> speed
X%type <sval> optional_string
X%type <sval> desig
X
X%token TOK_SEMICOLON
X%token TOK_ASSIGN
X%token TOK_VIA
X%token TOK_ALT
X%token TOK_FROM
X%token TOK_TO
X%token TOK_MI
X%token TOK_NM
X%token TOK_MPH
X%token TOK_KTS
X%token TOK_COMMA
X%token TOK_REAL
X%token TOK_INTEGER
X%token TOK_NAV
X%token TOK_WIND
X%token TOK_TAS
X%token TOK_LPAREN
X%token TOK_RPAREN
X%token TOK_FUEL_AMT
X%token TOK_FUEL_RATE
X%token TOK_FUEL_USED
X%token TOK_STRING
X%token TOK_SYMBOL
X%token TOK_ATSIGN
X
X%start fplan
X
X%%
X
Xfplan		: directives
X		;
X
Xdirectives 	: /* empty */
X		| directives directive
X		;
X
Xdirective	: named_waypoint	TOK_SEMICOLON
X   		| inc_waypoint		TOK_SEMICOLON
X   		/* | int_waypoint	TOK_SEMICOLON */
X   		| lat_waypoint		TOK_SEMICOLON
X		| nav_fix		TOK_SEMICOLON
X		| true_airspeed		TOK_SEMICOLON
X		| wind			TOK_SEMICOLON
X		| fuel_amt		TOK_SEMICOLON
X		| fuel_rate		TOK_SEMICOLON
X		| fuel_used		TOK_SEMICOLON
X   		| flight_altitude	TOK_SEMICOLON
X		;
X
Xnamed_waypoint	: waypoint_kind desig 
X			{add_named_waypoint ($1, $2);}
X
Xinc_waypoint 	: waypoint_kind distance 
X   		  optional_string optional_string optional_string
X			{add_inc_waypoint ($2, $3, $4, $5);}
X		;
X
X/*
X *int_waypoint	: waypoint_kind desig TOK_COMMA radial TOK_COMMA desig
X *		  TOK_COMMA radial optional_string
X *			{add_int_waypoint ($1, $2, $4, $6, $8, $9);}
X *		;
X */
X
Xlat_waypoint	: waypoint_kind latitude TOK_COMMA longitude 
X   		  optional_string optional_string optional_string
X		  {add_lat_waypoint ($1, $2, $4, $5, $6, $7);}
X		;
X
Xwaypoint_kind	: TOK_FROM {$$ = WP_FROM;}
X		| TOK_VIA  {$$ = WP_VIA;}
X		| TOK_TO   {$$ = WP_TO;}
X		;
X
Xnav_fix		: TOK_NAV TOK_LPAREN number TOK_RPAREN  desig
X		  {set_xfix ((int) $3, $5);}
X		;
X
Xtrue_airspeed	: TOK_TAS  speed {set_tas ($2);}
X		;
X
Xwind		: TOK_WIND  heading TOK_ATSIGN speed
X		  {set_wind ($2, $4);}
X		;
X
Xfuel_amt	: TOK_FUEL_AMT  number {set_fuel_amt ($2);}
X		;
X
Xfuel_rate	: TOK_FUEL_RATE  number {set_fuel_rate ($2);}
X		;
X
Xfuel_used	: TOK_FUEL_USED  number {set_extra_fuel_burn ($2);}
X		;
X
Xflight_altitude	: TOK_ALT number {set_altitude ($2);}
X		;
X
Xlatitude	: TOK_REAL	{$$ = degrees_mins_2_decimal (yydval);}
X		;
X
Xlongitude	: TOK_REAL	{$$ = degrees_mins_2_decimal (yydval);}
X		;
X
Xoptional_string	: /* empty */	        {$$ = (char*) 0;}
X		| TOK_COMMA TOK_STRING	{$$ = strdup (yytext);}
X		;
X
Xdesig		: TOK_SYMBOL    {$$ = strdup (yytext);}
X		;
X
Xnumber		: TOK_REAL	{$$ = yydval;}
X		| TOK_INTEGER	{$$ = yydval;}
X		;
X
Xdistance	: number TOK_MI {$$ = $1 / MI_PER_NM;}
X   		| number 	{$$ = $1;}
X   		| number TOK_NM {$$ = $1;}
X		;
X
Xspeed		: number TOK_MPH {$$ = $1 / MI_PER_NM;}
X   		| number 	 {$$ = $1;}
X   		| number TOK_KTS {$$ = $1;}
X		;
X
X/*
X *radial       	: heading
X *		;
X */
X
Xheading		: number	{$$ = $1;}
X		;
END_OF_FILE
  if test 4485 -ne `wc -c <'fp_yacc.y'`; then
    echo shar: \"'fp_yacc.y'\" unpacked with wrong size!
  fi
  # end of 'fp_yacc.y'
fi
if test -f 'fplan.5' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'fplan.5'\"
else
  echo shar: Extracting \"'fplan.5'\" \(6330 characters\)
  sed "s/^X//" >'fplan.5' <<'END_OF_FILE'
X.\" -*- nroff -*
X.\" $Id: fplan.5,v 1.1 89/11/11 19:09:21 tynor Exp $
X.TH FPLAN 5 "11 November 1989" FPLAN "Flight Planning"
X.SH "NAME"
Xairports.nav, vors.nav \- databases for flight planning
Xprograms (nav and fplan)
X.SH "SYNOPSIS"
X.B airports.nav
X.B vors.nav
X.SH "DESCRIPTION"
X.PP
XThe \fBfplan(5)\fP format is identical to the \fBnav(5)\fP format.
XDatabases created for \fBnav(1)\fP are compatible with \fBfplan(1)\fP.
X.PP
XThese files (\fIairports.nav\fP, and \fIvors.nav\fP) contain
Xinformation about airports and and radio navigation aids.  The files
Xconsist of any number of records in the formats described below.  Each
Xrecord contains a series of fields, separated by colons (:) and is
Xnull-padded to a fixed length which allows \fBfplan(1)\fP to use a
Xfast binary search algorithm for database searches. A companion
Xprogram, \fBpaddb(1)\fP, can be used to convert a text file into a
Xpadded database file.  The records must occur in increasing
Xlexigraphic (alphabetical) order.
X.SH AIRPORTS DATABASE (airports.nav)
X.PP
XThe following sample record:
X.sp
X.ce 1
X"1C6:POLO, IL:RADIO RANCH:840:-01:0:41:58.7:89:33.6:122.800:CHICAGO"
X.sp
Xis for Radio Ranch airport in Polo, IL. The airport designator
Xis 1C6. Its elevation is 840 feet. The local magnetic variation is 1
Xdegree, 0 minutes east. Its geographic coordinates (latitude and
Xlongitude) are 41 degrees, 58.7 minutes north, 89 degrees, 33.6
Xminutes west. Its CTAF frequency is 122.8. The final field is usually
Xused to indicate on which sectional chart the airport may be found - in
Xthis case Chicago.
X.PP
XThe fields in each
X.B airport.nav
Xrecord are as follows.
X.TP 15
XAirport ID 
XAirport identification code, typically three or four
Xcharacters and digits.  All letters must be uppercase.  Airports ID
Xcan be at most five characters long. NOTE: for private databases,
XAirport IDs may contain underscores (_) in order to distinguish them
Xfrom official Airport IDs.
X.TP
XCity
XName of the nearest city; up to thirty-two characters.
X.TP
XAirport Name
XAirport name, up to thirty-two characters.
X.TP
XAirport Elevation
XSpecified in feet.
X.TP
XDegrees Portion of Magnetic Variation 
XThe magnetic variation which
Xapplies to navigation at the airport, rounded down to the nearest
Xdegree.  Positive numbers indicate \fIwest\fP variation, negative
Xnumbers indicate \fIeast\fP.
X.TP 
XMinutes Portion of Magnetic Variation 
XThe minutes portion of the variation.
X.TP
XDegrees Portion of Latitude 
XThe \fIdegrees\fP portion of the latitude
Xof the airport.  Negative numbers indicate south latitude.
X.TP 
XMinutes Portion of Latitude 
XThe \fIminutes\fP portion of the latitude
Xof the airport, expressed in minutes and tenths of minutes (eg. 45.8).
X.TP 
XDegrees Portion of Longitude
XAs for latitude; negative numbers indicate east longitude.
X.TP 
XMinutes Portion of Longitude
XAs for latitude; again, minutes and tenths.
X.TP 
XCommon Traffic Avoidance Frequency
XThe CTAF
Xfor the airport, if known.  Frequently, this field is empty.
X.TP
XComments
XMay include, for example, other frequencies at the airport, or the
Xsectional on which the airport appears.
X.SH NAVIGATION AIDS DATABASE (vors.nav)
X.PP
XFollowing are some examples of records from the
X\fIvors.nav\fP
Xdatabase.  They are for a  VOR-DME
Xor VorTac, for a  VOR
X(without distance determination capabilities),
Xfor an
XNDB,
Xand for an intersection.  (In what follows, the term "fix"
Xrefers to an intersection or a waypoint.)
X.sp
X.ce 4
X"GUS:Grissom:116.50:810:02:0:40:38.7:86:9.1:DME:T [IN] IND FSS"
X"ROM:Priest:110.0:3880:-16:00:36:8.4:120:39.8:VOR:L PRB FSS"
X"EZB:East Bay:362::-17:0:37:44.6:122:13.1:NDB:[CA] OAK FSS"
X"AUGUS:ENRT-LOW:0:0:03:0:38:17.9:87:16.4:INT:PXVr043d31 & SAMr103"
X.sp
X.PP
XThe first of these is for the Grissom VOR/DME or VorTac, with
Xidentifier GUS and frequency 116.5.  The second is for Priest VOR,
Xidentifier ROM on frequency 110.0.  The third is for the East Bay NDB,
Xfrequency 362 and identifier EZB.  The last example is for the AUGUS
Xintersection, which is an enroute-low intersection (i.e.  appears on
Xan enroute low-altitude navigation chart).
X.TP 15
XNavaid ID
XThe identifier of the navigation aid, waypoint, or fix.
XThis field should be in all upper case, with at most five characters.
XNOTE: for private databases, Navaid IDs may contain underscores (_)
Xin order to distinguish them from official Navaid IDs.
X.TP
XNavaid Name
XName of the navigation aid, up to thirty-two characters.  For a
Xfix, this field will contain the principle use of the fix.
X.TP
XFrequency 
XFrequency of this navigation aid.
X.TP 
XAltitude
XAltitude of the navigation aid.  
X.TP
XDegrees Portion of Magnetic Variation
XThe magnetic variation which applies to navigation at the navaid,
Xas described for the airports.nav file above.
X.TP
XMinutes Portion of Magnetic Variation
XThe minutes portion of the variation.
X.TP
XDegrees Portion of Latitude
XThe \fIdegrees\fP
Xportion of the latitude of the airport.  Negative numbers indicate south
Xlatitude.
X.TP
XMinutes Portion of Latitude
XThe
X\fIminutes\fP
Xportion of the latitude of the airport, expressed in minutes and tenths
Xof minutes (eg. 45.8).
X.TP 
XDegrees Portion of Longitude
XAs for latitude; negative numbers indicate east longitude.
X.TP 
XMinutes Portion Longitude
XAs for latitude; again, minutes and tenths.
X.TP 
XNavaid or Fix Type
XThe type of the navigation aid or fix.  Types are:
X.nf
X.IP
XUNK \(em Unknown
XNDB \(em Non-Directional Beacon
XVOR \(em VOR (no distance determination facilities)
XDME \(em VOR-DME or VORTAC
XTAC \(em TACAN
XILS \(em Localizer
XINT \(em Intersection
XWPT \(em Waypoint
XLOM \(em Locator Outer Marker
XLMM \(em Locator Middle Marker
X.fi
X.TP 
XComments
XComments associated with this navaid or fix.  May include,
Xfor example, the state in which the navaid is located, the flight
Xservice station or ATC facility associated with or controlling it,
Xand, for a fix, the navids comprising the fix.  (In the fix shown
Xabove, the fix is defined by the Pocket City (PXV) VorTac's 043 radial
Xat 31 nautical miles, and by PXV's 043 radial and the Samsville (SAM)
XVorTac's 103 radial.)
X.SH "FILES"
Xairports.nav, vors.nav
X.SH "SEE ALSO"
Xnav(1), fplan(1), fplan(5)
X.SH AUTHORS
XAlan Markum \(em marcum@nescorna.sun.com \(em author of \fBnav\fP
X.br
XSteve Tynor \(em tynor@prism.gatech.edu \(em author of \fBfplan\fP
X.sp
XThis file is essentially just a reformat of the \fBnav(5)\fP manual
Xpage.
END_OF_FILE
  if test 6330 -ne `wc -c <'fplan.5'`; then
    echo shar: \"'fplan.5'\" unpacked with wrong size!
  fi
  # end of 'fplan.5'
fi
if test -f 'misc.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'misc.c'\"
else
  echo shar: Extracting \"'misc.c'\" \(1972 characters\)
  sed "s/^X//" >'misc.c' <<'END_OF_FILE'
X/*
X * $Id: misc.c,v 2.4 91/02/22 21:22:23 tynor Exp $
X *----------------------------------------------------------------------------
X *	FPLAN - Flight Planner
X *	Steve Tynor
X *	tynor@prism.gatech.edu
X *
X *	This program is in the public domain. Permission to copy,
X * distribute, modify this program is hearby given as long as this header
X * remains. If you redistribute this program after modifying it, please
X * document your changes so that I do not take the blame (or credit) for
X * those changes.  If you fix bugs or add features, please send me a
X * patch so that I can keep the 'official' version up-to-date.
X *
X *	Bug reports are welcome and I'll make an attempt to fix those
X * that are reported.
X *
X *	USE AT YOUR OWN RISK! I assume no responsibility for any
X * errors in this program, its database or documentation. I will make an
X * effort to fix bugs, but if you crash and burn because, for example,
X * fuel estimates in this program were inaccurate, it's your own fault
X * for trusting somebody else's code! Remember, as PIC, it's _your_
X * responsibility to do complete preflight planning. Use this program as
X * a flight planning aid, but verify its results before using them.
X *----------------------------------------------------------------------------
X */
X
Xstatic char rcsid[] = "$Id: misc.c,v 2.4 91/02/22 21:22:23 tynor Exp $";
X
X#include <math.h>
X
X/*----------------------------------------------------------------------------*/
Xdouble degrees_mins_2_decimal (hm)
X     double hm;
X{
X   /*
X    * input looks like: 40.45 (40 deg, 45 min), output is 40.75 (40.75 deg)
X    */
X   double i = (double) aint (hm);
X   
X   return (i + (hm - i) / 0.6);
X}
X
X/*----------------------------------------------------------------------------*/
Xdouble decimal_2_degrees_mins (dec)
X     double dec;
X{
X   /*
X    * input looks like: 40.75 (40.75 deg), output is 40 and 45 (40 deg, 45 min)
X    */
X   double tmp = (double) aint (dec);
X
X   return (tmp + 0.6 * (dec - tmp));
X}
X
END_OF_FILE
  if test 1972 -ne `wc -c <'misc.c'`; then
    echo shar: \"'misc.c'\" unpacked with wrong size!
  fi
  # end of 'misc.c'
fi
if test -f 'paddb.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'paddb.c'\"
else
  echo shar: Extracting \"'paddb.c'\" \(3111 characters\)
  sed "s/^X//" >'paddb.c' <<'END_OF_FILE'
X/*
X * $Id: paddb.c,v 1.1 89/11/11 17:29:43 tynor Exp $
X *----------------------------------------------------------------------------
X *	FPLAN - Flight Planner
X *	Steve Tynor
X *	tynor@prism.gatech.edu
X *
X *	This program is in the public domain. Permission to copy,
X * distribute, modify this program is hearby given as long as this header
X * remains. If you redistribute this program after modifying it, please
X * document your changes so that I do not take the blame (or credit) for
X * those changes.  If you fix bugs or add features, please send me a
X * patch so that I can keep the 'official' version up-to-date.
X *
X *	Bug reports are welcome and I'll make an attempt to fix those
X * that are reported.
X *
X *	USE AT YOUR OWN RISK! I assume no responsibility for any
X * errors in this program, its database or documentation. I will make an
X * effort to fix bugs, but if you crash and burn because, for example,
X * fuel estimates in this program were inaccurate, it's your own fault
X * for trusting somebody else's code! Remember, as PIC, it's _your_
X * responsibility to do complete preflight planning. Use this program as
X * a flight planning aid, but verify its results before using them.
X *----------------------------------------------------------------------------
X */
X
Xstatic char rcsid[] = "$Id: paddb.c,v 1.1 89/11/11 17:29:43 tynor Exp $";
X
X#include <stdio.h>
X#include "version.h"
X
X#define EXIT_GOOD 0
X#define EXIT_BAD  1
X
X#define MAX(a,b) ((a)>=(b)?(a):(b))
X
X/*----------------------------------------------------------------------------*/
Xusage (progname)
X     char *progname;
X{
X   fprintf (stderr, "FPLAN %s\n", VERSION);
X   fprintf (stderr, "usage: %s text-file db-file\n", progname);
X   exit (EXIT_BAD);
X}
X
X/*----------------------------------------------------------------------------*/
Xint main (argc, argv)
X     int argc;
X     char *argv[];
X{
X#define BUFSIZE 200
X   FILE *in, *out;
X   int recl = 0;
X   int len, i;
X   char buffer[BUFSIZE];
X
X#ifdef MSDOS
X#define CREATE_MODE "wb"
X#define LINE_TERMINATOR_LEN 2	/* CR-LF */
X#else
X#define CREATE_MODE "w"
X#define LINE_TERMINATOR_LEN 1	/* LF */
X#endif
X
X   if (argc != 3)
X      usage (argv[0]);
X
X   if (! (in = fopen (argv[1], "r"))) {
X      fprintf (stderr, "ERROR: opening input file: %s\n", argv[1]);
X      usage (argv[0]);
X   }
X
X   if (! (out = fopen (argv[2], CREATE_MODE))) {
X      fprintf (stderr, "ERROR: opening output file: %s\n", argv[2]);
X      usage (argv[0]);
X   }
X
X   /*
X    * first pass: find the max record length
X    */
X   while (fgets (buffer, BUFSIZE, in))
X      recl = MAX (recl, strlen (buffer) - LINE_TERMINATOR_LEN);
X
X   fclose (in);
X
X   /*
X    * second pass: copy each record to the output; pad each record
X    */
X
X   if (! (in = fopen (argv[1], "r"))) {
X      fprintf (stderr, "ERROR: opening input file: %s\n", argv[1]);
X      usage (argv[0]);
X   }
X   while (fgets (buffer, BUFSIZE, in)) {
X      len = strlen (buffer) - LINE_TERMINATOR_LEN;
X      buffer[len] = '\0';
X      fprintf (out, "%s", buffer);
X      for (i = len; i < recl; i++)
X	 putc ('\0', out);
X      putc ('\n', out);
X   }
X   fclose (in);
X   fclose (out);
X}
X
END_OF_FILE
  if test 3111 -ne `wc -c <'paddb.c'`; then
    echo shar: \"'paddb.c'\" unpacked with wrong size!
  fi
  # end of 'paddb.c'
fi
if test -f 'reverse.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'reverse.c'\"
else
  echo shar: Extracting \"'reverse.c'\" \(3089 characters\)
  sed "s/^X//" >'reverse.c' <<'END_OF_FILE'
X/*
X * $Id: reverse.c,v 1.2 89/11/05 11:23:58 tynor Exp $
X *----------------------------------------------------------------------------
X *	FPLAN - Flight Planner
X *	Steve Tynor
X *	tynor@prism.gatech.edu
X *
X *	This program is in the public domain. Permission to copy,
X * distribute, modify this program is hearby given as long as this header
X * remains. If you redistribute this program after modifying it, please
X * document your changes so that I do not take the blame (or credit) for
X * those changes.  If you fix bugs or add features, please send me a
X * patch so that I can keep the 'official' version up-to-date.
X *
X *	Bug reports are welcome and I'll make an attempt to fix those
X * that are reported.
X *
X *	USE AT YOUR OWN RISK! I assume no responsibility for any
X * errors in this program, its database or documentation. I will make an
X * effort to fix bugs, but if you crash and burn because, for example,
X * fuel estimates in this program were inaccurate, it's your own fault
X * for trusting somebody else's code! Remember, as PIC, it's _your_
X * responsibility to do complete preflight planning. Use this program as
X * a flight planning aid, but verify its results before using them.
X *----------------------------------------------------------------------------
X */
X
Xstatic char rcsid[] = "$Id: reverse.c,v 1.2 89/11/05 11:23:58 tynor Exp $";
X
X#include <stdio.h>
X#include "wp_info.h"
X
Xextern void distance_and_heading ();
X
X/*----------------------------------------------------------------------------*/
Xstatic void reverse_incrementals ()
X{
X   int i;
X   int last_non_inc = num_waypoints - 1;
X   double h;
X
X   for (i = num_waypoints - 2; i >= 0; i--)
X      if (waypoints[i].db->mode == WP_INCREMENTAL)
X	 distance_and_heading (waypoints[i].db->latitude, 
X			       waypoints[i].db->longitude,
X			       waypoints[last_non_inc].db->latitude,
X			       waypoints[last_non_inc].db->longitude,
X			       &waypoints[i].db->u.dist_since_last_wp, &h);
X      else
X	 last_non_inc = i;
X}
X
X/*----------------------------------------------------------------------------*/
Xvoid print_reverse ()
X{
X   int i, j;
X
X   reverse_incrementals ();
X
X   for (i = num_waypoints - 1; i >= 0; i--) {
X      for (j = 1; j <= max_nav; j++) {
X	 if ((i == num_waypoints - 1) ||
X	     (strcmp (waypoints[i].vor_fix[j].db->desig, 
X		      waypoints[i+1].vor_fix[j].db->desig))) {
X	    printf ("nav(%d) %s;\n", j+1, waypoints[i].vor_fix[j].db->desig);
X	 }
X      }
X      if (waypoints[i].wp_kind == WP_TO)
X	 printf ("\nfrom %s;\n", waypoints[i].db->desig);
X      else if (waypoints[i].wp_kind == WP_FROM)
X	 printf ("to %s;\n", waypoints[i].db->desig);
X      else if (waypoints[i].db->mode != WP_INCREMENTAL)
X	 printf ("\tvia %s;\n", waypoints[i].db->desig);
X      else {
X	 printf ("\t\tvia %1.0lf", waypoints[i].db->u.dist_since_last_wp);
X	 if (waypoints[i].db->name)
X	    printf (", \"%s\"", waypoints[i].db->name);
X	 if (waypoints[i].db->city)
X	    printf (", \"%s\"", waypoints[i].db->city);
X	 if (waypoints[i].db->comment)
X	    printf (", \"%s\"", waypoints[i].db->comment);
X	 printf (";\n");
X      }
X   }
X}
X
X
END_OF_FILE
  if test 3089 -ne `wc -c <'reverse.c'`; then
    echo shar: \"'reverse.c'\" unpacked with wrong size!
  fi
  # end of 'reverse.c'
fi
if test -f 'strings.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'strings.c'\"
else
  echo shar: Extracting \"'strings.c'\" \(2930 characters\)
  sed "s/^X//" >'strings.c' <<'END_OF_FILE'
X/*
X * $Id: strings.c,v 1.7 89/11/11 19:13:40 tynor Exp $
X *----------------------------------------------------------------------------
X *	FPLAN - Flight Planner
X *	Steve Tynor
X *	tynor@prism.gatech.edu
X *
X *	This program is in the public domain. Permission to copy,
X * distribute, modify this program is hearby given as long as this header
X * remains. If you redistribute this program after modifying it, please
X * document your changes so that I do not take the blame (or credit) for
X * those changes.  If you fix bugs or add features, please send me a
X * patch so that I can keep the 'official' version up-to-date.
X *
X *	Bug reports are welcome and I'll make an attempt to fix those
X * that are reported.
X *
X *	USE AT YOUR OWN RISK! I assume no responsibility for any
X * errors in this program, its database or documentation. I will make an
X * effort to fix bugs, but if you crash and burn because, for example,
X * fuel estimates in this program were inaccurate, it's your own fault
X * for trusting somebody else's code! Remember, as PIC, it's _your_
X * responsibility to do complete preflight planning. Use this program as
X * a flight planning aid, but verify its results before using them.
X *----------------------------------------------------------------------------
X */
X
Xstatic char rcsid[] = "$Id: strings.c,v 1.7 89/11/11 19:13:40 tynor Exp $";
X
X#include "mystring.h"
X#include "wp_info.h"
X#include "math.h"
X
Xextern char* malloc();
X
X/*
X * define a couple of functions that are in SunOS string(3), but apparently
X * aren't 'standard' - so much for the wonder of the portability of the 
X * standard C library...
X *
X * The only thing we count on is strlen().
X */
X
X/*---------------------------------------------------------------------------*/
Xchar* index (s, c)
X     char *s, c;
X{
X   char *p;
X   for (p = s; *p; p++)
X      if (*p == c)
X	 return p;
X   if (!c)
X      return p;
X   else
X      return (char*) 0;
X}
X
X/*---------------------------------------------------------------------------*/
Xchar* strdup (s)
X     char *s;
X{
X   int len = strlen (s);
X   char *new = (char*) malloc (len + 1);
X
X   if (new)
X      strcpy (new, s);
X   return (new);
X}
X
Xstatic char *buffer;
Xstatic int  start;
Xstatic int  buf_len;
X
X/*---------------------------------------------------------------------------*/
Xchar *strtok (str, separators)
X     char *str;
X     char *separators;
X{
X   int i, k;
X   int len = strlen (separators);
X   char *ptr;
X
X   if (str) {
X      buf_len = strlen (str);
X      buffer = str;
X      start = 0;
X   }
X   if (start > buf_len) {
X      return (char*) 0;
X   }
X   for (i = 0; i <= len; i++) {
X      /*
X       * notice we cheat and use the '\0' terminator in the separators string 
X       * to always recognize '\0' as a separator.
X       */
X      if (ptr = index (&buffer[start], separators[i])) {
X	 *ptr = '\0';
X	 k = start;
X	 start = (int) (ptr - buffer + 1);
X	 return (&buffer[k]);
X      }
X   }
X   return (char*) 0;
X}
X
END_OF_FILE
  if test 2930 -ne `wc -c <'strings.c'`; then
    echo shar: \"'strings.c'\" unpacked with wrong size!
  fi
  # end of 'strings.c'
fi
echo shar: End of archive 3 \(of 4\).
cp /dev/null ark3isdone
MISSING=""
for I in 1 2 3 4 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 4 archives.
    rm -f ark[1-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0
exit 0 # Just in case...
