Newsgroups: comp.sources.misc
From: tynor@prism.gatech.edu (STEVE TYNOR)
Subject:  v30i082:  fplan-1.3 - Fplan 1.3 (Flight Planner), Part02/04
Message-ID: <1992Jun28.183355.3027@sparky.imd.sterling.com>
X-Md4-Signature: 3777fbf8b349d831e020d1a98dc07373
Date: Sun, 28 Jun 1992 18:33:55 GMT
Approved: kent@sparky.imd.sterling.com

Submitted-by: tynor@prism.gatech.edu (STEVE TYNOR)
Posting-number: Volume 30, Issue 82
Archive-name: fplan-1.3/part02
Environment: K&R C, BSD, MSDOS, Sunview (optional)
Supersedes: fplan: Volume 09, Issue 11-16

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# Contents:  WHERE_DBS db.c fplan.1 main.c version.h wp_info.h
# Wrapped by kent@sparky on Sun Jun 28 11:39:11 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 2 (of 4)."'
if test -f 'WHERE_DBS' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'WHERE_DBS'\"
else
  echo shar: Extracting \"'WHERE_DBS'\" \(10695 characters\)
  sed "s/^X//" >'WHERE_DBS' <<'END_OF_FILE'
XThe complete NAV databases for the US can be found in several places
Xvia anonymous FTP and/or UUCP.  You'll only need the airports.nav.*
Xand vors.nav.* files to use FPLAN.
X
XThe following notes detail where and how:
X
X-----------------------------------------------------------------------------
XTry ftp.cica.indiana.edu (129.79.20.84) in the directory:
X/pub/Aviation/Software. The most recent version (1.3) of FPLAN is there
Xas well as the original NAV program and databases.
XFrom jon@b-tech.ann-arbor.mi.us Tue May 19 17:17:42 1992
XFrom: jon@b-tech.ann-arbor.mi.us (Jon Zeeff)
XNewsgroups: rec.aviation
XSubject: Re: Airport / Vor Database
XDate: 19 May 92 14:12:35 GMT
XOrganization: UMCC
X
X>One more time:  Where can I get an electronic listing of the 
X>VOR / NDB / airport / ... database?
X
XYou can ftp it from console.ais.org:pub/aviation.  It includes the FPLAN
Xflight planning software.
X
X-- 
XJon Zeeff   NIC handle JZ   zeeff@console.ais.org   jon@ais.org
X
XFrom jon@b-tech.ann-arbor.mi.us Wed May 20 15:14:02 1992
XFrom: jon@b-tech.ann-arbor.mi.us (Jon Zeeff)
XNewsgroups: rec.aviation
XSubject: Re: Airport / Vor Database
XDate: 19 May 92 23:08:21 GMT
XOrganization: UMCC
X
X>!!One more time:  Where can I get an electronic listing of the 
X>!!VOR / NDB / airport / ... database?
X>
X>!You can ftp it from console.ais.org:pub/aviation.  It includes the FPLAN
X>!flight planning software.
X>
X>Jon, could you give an IP address. Other posters also please note.
X
X35.208.17.6
X
XIt's a slow slip link so expect it to take awhile.
X
X-- 
XJon Zeeff   NIC handle JZ   zeeff@console.ais.org   jon@ais.org
X
XFrom barford@hpllab.hpl.hp.com Wed May 20 15:14:58 1992
XFrom: barford@hpllab.hpl.hp.com (Lee Alton Barford)
XNewsgroups: rec.aviation
XSubject: Re: Airport / Vor Database -- available within HP closed subnet
XDate: 20 May 92 17:07:52 GMT
XOrganization: Hewlett-Packard Laboratories, Palo Alto, CA
XIn-Reply-To: glenb@hpnmdla.sr.hp.com's message of Tue, 19 May 1992 17:35:41 GMT
XNntp-Posting-Host: hpllab.hpl.hp.com
X
X
XIn rec.aviation, glenb@hpnmdla.sr.hp.com (Glen Baker) writes:
X
X>In rec.aviation, jon@b-tech.ann-arbor.mi.us (Jon Zeeff) writes:
X>
X>> You can ftp it from console.ais.org:pub/aviation.  It includes the FPLAN
X>> flight planning software.
X>
X> Could some kind soul from HP who happens to have an open subnet account
X> please make these available for ftp within HP? I'd really like to compare
X
XDone! Both FPLAN and the NAV databases are now available for anonymous
Xftp within the HP closed subnet.  They are on hpllab.hpl.hp.com
X(15.0.112.183), in ~ftp/pub.
X
XThe FPLAN and NAV databases formats are identical.  The databases that
Xcome with both of them are about 4 years old.  The major difference is
Xthat the "VOR" database that comes with FPLAN has intersections and
XNDBs, too.
X
XSend me email if you have any problems.
X
X--Lee
X
X===============
XLee Barford, PhD, CFII, CAP MP&CP, and other silly acronyms
XHewlett-Packard Laboratories, Bldg. 26U, POB 10350, Palo Alto, CA 94303-0867
XDigital: barford@hpllab.hpl.hp.com           In the air: N235H
XAnalog:  Twisted pair: (415) 857-3606        Ether: N6UDE or Eagle 618 (CAP)
X
XFrom jon@b-tech.ann-arbor.mi.us Thu May 21 15:09:22 1992
XFrom: jon@b-tech.ann-arbor.mi.us (Jon Zeeff)
XNewsgroups: rec.aviation
XSubject: Re: Airport / Vor Database -- available within HP closed subnet
XDate: 21 May 92 15:45:44 GMT
XOrganization: UMCC
X
X>> Done! Both FPLAN and the NAV databases are now available for anonymous
X>> ftp within the HP closed subnet.  They are on hpllab.hpl.hp.com
X>> (15.0.112.183), in ~ftp/pub.
X>
X>Hmmm, do I have to go work for HP now to avoid the slow ftp?
X
XOk, I put the files on wolv.ais.org (which is at least 10 times faster).
X
X-- 
XJon Zeeff   NIC handle JZ   zeeff@console.ais.org   jon@ais.org
X
XFrom woof@hpfcmgw.FC.HP.COM Fri May 22 12:02:07 1992
XFrom: woof@hpfcmgw.FC.HP.COM (Steve Wolf)
XNewsgroups: rec.aviation
XSubject: Re: Airport / Vor Database
XDate: 21 May 92 22:23:18 GMT
XOrganization: HP Fort Collins, CO
X
X> I'll say it's slow!  I gave up after 10 minutes of FTP and only got the 
X> first 100K of the 900K+ ZIP file.  Would someone with more patience than I 
X> please transfer it to a faster archieve and let us know where it's at?
X
XThe README says,
X
X> If you need a faster machine, these files MAY be available on
X> wolv.ais.org.
X
XI just looked on wolv.ais.org, and the README and tar file are there.
XThe zip file is not.  wolv.ais.org seems pretty snappy.
X
XFYI, it took 2 hours 13 minutes for me to copy fplan.tar.Z from
Xconsole.ais.org, for an average transfer rate of 105 bytes/sec. :-)
X--
XSteve Wolf				PHONE: (303) 229-2088
XHewlett-Packard				UUCP:  hplabs!fc.hp.com!woof
XFort Collins, CO			ARPA:  woof@fc.hp.com
X
XFrom woof@hpfcmgw.FC.HP.COM Fri May 22 12:02:19 1992
XFrom: woof@hpfcmgw.FC.HP.COM (Steve Wolf)
XNewsgroups: rec.aviation
XSubject: Re: Airport / Vor Database
XDate: 21 May 92 15:37:21 GMT
XOrganization: HP Fort Collins, CO
X
XIn rec.aviation, glenb@hpnmdla.sr.hp.com (Glen Baker) writes:
X
X>  Could some kind soul from HP who happens to have an open subnet account
X>  please make these available for ftp within HP? I'd really like to compare
X>  this database to the 'nav' database that I've been maintaining (or are
X>  they the same thing?)
X
XI'm some kind of soul.  It's on hpfcsdw.fc.hp.com, in "~ftp/aviation".
X--
XSteve Wolf				PHONE: (303) 229-2088
XHewlett-Packard				UUCP:  hplabs!fc.hp.com!woof
XFort Collins, CO			ARPA:  woof@fc.hp.com
X
XFrom hdnea@usho92.hou281.chevron.com Fri May 22 13:26:59 1992
XFrom: hdnea@usho92.hou281.chevron.com (David Neal)
XNewsgroups: rec.aviation
XSubject: Re: FPLAN software availability
XDate: 22 May 92 15:58:30 GMT
XOrganization: Chevron
X
XIn article <1992May20.213156.9185@eco.twg.com>, reece@eco.twg.com (Reece R. Pollack) writes:
X|> 
X|> [...]
X|> If someone else has already snatched this stuff, please let me know.
X|> 
X|> --
X|> Reece R. Pollack
X
XUh, I sent a message out once before that I had put the software
Xon uunet, but may have accidentally limited distribution to chevron.
X
XSo, once again:
X
Xnav.tar.Z, fplan1.3.tar.Z, and brief136 are on ftp.uu.net [137.39.1.9]
Xunder the tmp/flight directory. 
X
X
X-- 
XDavid Neal  -  hdnea@usho92.hou281.chevron.com
XMACH: The UNIX(TM) of the 90's; it's small, fast, and you can't have it.
X
XFrom phil@eecs.nwu.edu Tue Jun  2 12:40:13 1992
XFrom: phil@eecs.nwu.edu (William LeFebvre)
XNewsgroups: rec.aviation
XSubject: Re: Fplan databases, where?
XDate: 29 May 92 20:51:12 GMT
XOrganization: EECS Department, Northwestern University
X
XIn article <2A2430B8.6DD2@deneva.sdd.trw.com>, cjohnson@venice.sedd.trw.com (Clarence Johnson) writes:
X|> Does anyone know where I can get the Databases for fplan?
X|> Is there an ftp site?    
X
XAsk and you shall receive.
X
XI have set up an aviation directory in our anonymous FTP area.  It
Xcurrently contains fplan and 1991 versions of the nav databases.  These
Xdatabases are the most recent I could find, but they are still about a
Xyear out of date.  If anyone knows of versions that are more recent, point
Xme at them and I will update my copies.
X
XOur site is well connected, so thruput should be pretty good.
X
XFTP to eecs.nwu.edu, login anonymous, any password.  The directory is
X/pub/aviation.  This is what currently exists there:
X
X      512 Feb 26 10:06 UL232       (directory containing United 232 transcripts)
X   413613 Feb 12  1991 airports.nav.Z
X      729 Feb 12  1991 airways.nav.Z
X    61637 May 29 15:42 fplan.tar.Z
X   338227 Feb 12  1991 vors.nav.Z
X
XBe sure to transfer the .Z files with binary mode, since they are compressed.
X
XIf you don't have ftp access, then I'm afraid I can't help you.
X
X		William LeFebvre
X		Computing Facilities Manager and Analyst
X		Department of Electrical Engineering and Computer Science
X		Northwestern University
X		<phil@eecs.nwu.edu>
X
X-----------------------------------------------------------------------------
X>From gatech!cwjcc!tut.cis.ohio-state.edu!gem.mps.ohio-state.edu!apple!geoff 
X>Thu Sep 28 09:33:31 EDT 1989
X>
X>Berry Kercheval has kindly provided an additional archive site for the
X>full US NAV database on mordor.s1.gov (26.3.0.95).  Berry will keep the
X>data there for the indefinite future, and may at some point provide
X>newer data.  The existing data will still remain on apple.com for a
X>week or so and will then be deleted.
X>
X>I neglected to mention how to decompress the files once you receive them.
X>You can either say "uncompress airports.nav.Z" and "uncompress vors.nav.Z"
X>or, if you prefer to preserve the compressed versions, utter
X>"zcat airports.nav.Z > airports.nav" and "zcat vors.nav.Z > vors.nav".
X>
X>To get the files from mordor rather than apple, do the following (well,
X>approximately):
X>
X>    apple% ftp mordor.s1.gov
X>    Connected to mordor.s1.gov.
X>    220 mordor FTP server (Version 4.172 Fri Dec 9 10:09:46 PST 1988) ready.
X>    Name (mordor.s1.gov:geoff): anonymous
X>    331 Guest login ok, send ident as password.
X>    Password:
X>    230 Guest login ok, access restrictions apply.
X>    ftp> binary
X>    200 Type set to I.
X>    ftp> get airports.nav.Z
X>    200 PORT command successful.
X>    150 Opening BINARY mode data connection for airports.nav.Z (413613 bytes).
X>    226 Transfer complete.
X>    local: airports.nav.Z remote: airports.nav.Z
X>    413613 bytes received in 11 seconds (36 Kbytes/s)
X>    ftp> get vors.nav.Z
X>    200 PORT command successful.
X>    150 Opening BINARY mode data connection for vors.nav.Z (338505 bytes).
X>    226 Transfer complete.
X>    local: vors.nav.Z remote: vors.nav.Z
X>    338505 bytes received in 6.7 seconds (49 Kbytes/s)
X>    ftp> quit
X>    221 Goodbye.
X
X------------------------------------------------------------------------------
X
X>The complete release, database as well as sources, is also available
X>for anonymous FTP on saqqara.cis.ohio-state.edu:pub/nav/* and for
X>anonymous UUCP (1200, 2400, V.32, or TB+) on osu-cis!~/nav/*, in files
X>named
X>
X>airports.nav.Z-part-a[abcde]   (sliced compressed text files)
X>vors.nav.Z-part-a[abcd]                (sliced compressed text files)
X>nav.{dbs,hdr,man}.shar.Z       (compressed shar archives)
X>nav.top_level.shar.Z           (compressed shar archive)
X>nav.src.shar-a[abcdef].Z       (compressed sliced shar archive)
X>
X>This will probably stay around for a while (at least a positive number
X>of days :-), but there are no guarantees because I'm using the space
X>there as a guest.  Because you won't be able to expand wildcards on
X>osu-cis, you'll need to issue a command for each file you want to get,
X>like
X>
X>       uucp osu-cis!~/nav/vors.nav.Z-part-aa
X>       uucp osu-cis!~/nav/vors.nav.Z-part-ab
X>       ... and so on ...
X>
X>Write to uucp@cis.ohio-state.edu (== osu-cis!uucp) for the generic
X>anonymous-UUCP instructions if you need them.
X
X
X
END_OF_FILE
  if test 10695 -ne `wc -c <'WHERE_DBS'`; then
    echo shar: \"'WHERE_DBS'\" unpacked with wrong size!
  fi
  # end of 'WHERE_DBS'
fi
if test -f 'db.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'db.c'\"
else
  echo shar: Extracting \"'db.c'\" \(12544 characters\)
  sed "s/^X//" >'db.c' <<'END_OF_FILE'
X/*
X * $Id: db.c,v 2.10 90/06/15 21:32:08 tynor Exp $
X *----------------------------------------------------------------------------
X *	FPLAN - Flight Planner
X *	Steve Tynor
X *	tynor@prism.gatech.edu
X *
X *	This program is in the public domain. Permission to copy,
X * distribute, modify this program is hearby given as long as this header
X * remains. If you redistribute this program after modifying it, please
X * document your changes so that I do not take the blame (or credit) for
X * those changes.  If you fix bugs or add features, please send me a
X * patch so that I can keep the 'official' version up-to-date.
X *
X *	Bug reports are welcome and I'll make an attempt to fix those
X * that are reported.
X *
X *	USE AT YOUR OWN RISK! I assume no responsibility for any
X * errors in this program, its database or documentation. I will make an
X * effort to fix bugs, but if you crash and burn because, for example,
X * fuel estimates in this program were inaccurate, it's your own fault
X * for trusting somebody else's code! Remember, as PIC, it's _your_
X * responsibility to do complete preflight planning. Use this program as
X * a flight planning aid, but verify its results before using them.
X *----------------------------------------------------------------------------
X */
X
X#include "mystring.h"
X#include <stdio.h>
X#include <ctype.h>
X#include "wp_info.h"
X#include "config.h"
X
Xextern char *malloc();
Xextern char *getenv();
Xextern int qsort();
X
Xstatic char rcsid[] = "$Id: db.c,v 2.10 90/06/15 21:32:08 tynor Exp $";
X
X/*
X * the database file pointers:
X */
Xtypedef struct {
X   FILE  *fp;
X   long  rec_size;
X   long  num_recs;
X} DB_FILE;
X
XDB_FILE pub_airports, pvt_airports, pub_vors, pvt_vors;
X
X#define FSEEK_FROM_BEGINNING 0
X#define FSEEK_FROM_CURRENT   1
X#define FSEEK_FROM_END       2
X
X/*----------------------------------------------------------------------------*/
Xstatic long get_rec_size (buffer)
Xchar *buffer;
X{
X   long i;
X
X   for (i = 0;; i++) {
X      if (buffer[i] == '\n') {
X	 return (i + 1L);
X      }
X   }
X}
X
X/*----------------------------------------------------------------------------*/
Xstatic long get_num_recs (rec_size, fp, filename)
X     long  rec_size;
X     FILE **fp;
X     char *filename;
X{
X   long file_size;
X
X   if (fseek (*fp, 0L, FSEEK_FROM_END)) {
X      fprintf (stderr, "ERROR: could not seek in db file: %s\n", filename);
X      *fp = NULL;
X      return (0L);
X   }
X   file_size = ftell (*fp);
X
X#ifndef MSDOS
X   /*
X    * can't figure out why MSC doesn't do this properly - maybe it's an 
X    * inconsistency in the way fseek works? For now, just assume that 
X    * database is in the proper format.
X    */
X   if ((file_size % rec_size) != 0L) {
X      fprintf (stderr, 
X	       "ERROR: file size (%ld/%ld) inconsistency in db file: %s\n", 
X	       file_size, rec_size, filename);
X      *fp = NULL;
X      return (0L);
X   }
X#endif
X   return (file_size / rec_size);
X}
X
X/*----------------------------------------------------------------------------*/
XBOOLEAN open_dbs ()
X{
X   char *pub_dir, *pvt_dir;
X   BOOLEAN ok;
X
X#define BUFSIZE 200
X   char filename[BUFSIZE];
X   char buffer[BUFSIZE];
X
X#ifdef MSDOS
X#define OPEN_MODE "rb"
X#else
X#define OPEN_MODE "r"
X#endif
X
X   if (! (pub_dir = getenv (NAV_PUBLIC)))
X      pub_dir = DEFAULT_PUB_DIRECTORY;
X
X   if (! (pvt_dir = getenv (NAV_PRIVATE)))
X      pvt_dir = DEFAULT_PVT_DIRECTORY;
X
X#ifndef MSDOS
X   if (pvt_dir[0] == '~') {
X      strcpy (filename, getenv (HOME));
X      strcat (filename, &pvt_dir[1]);
X      pvt_dir = strdup (filename);
X   }
X#endif
X
X   strcpy (filename, pub_dir);
X   strcat (filename, AIRPORTS_NAME);
X   if (pub_airports.fp = fopen (filename, OPEN_MODE)) {
X      fgets (buffer, BUFSIZE, pub_airports.fp);
X      pub_airports.rec_size = get_rec_size (buffer);
X      pub_airports.num_recs = get_num_recs (pub_airports.rec_size,
X					    &pub_airports.fp, filename);
X   }
X
X   strcpy (filename, pvt_dir);
X   strcat (filename, AIRPORTS_NAME);
X   if (pvt_airports.fp = fopen (filename, OPEN_MODE)) {
X      fgets (buffer, BUFSIZE, pvt_airports.fp);
X      pvt_airports.rec_size = get_rec_size (buffer);
X      pvt_airports.num_recs = get_num_recs (pvt_airports.rec_size,
X					    &pvt_airports.fp, filename);
X   }
X
X   strcpy (filename, pub_dir);
X   strcat (filename, VORS_NAME);
X   if (pub_vors.fp = fopen (filename, OPEN_MODE)) {
X      fgets (buffer, BUFSIZE, pub_vors.fp);
X      pub_vors.rec_size = get_rec_size (buffer);
X      pub_vors.num_recs = get_num_recs (pub_vors.rec_size,
X					&pub_vors.fp, filename);
X   }
X
X   strcpy (filename, pvt_dir);
X   strcat (filename, VORS_NAME);
X   if (pvt_vors.fp = fopen (filename, OPEN_MODE)) {
X      fgets (buffer, BUFSIZE, pvt_vors.fp);
X      pvt_vors.rec_size = get_rec_size (buffer);
X      pvt_vors.num_recs = get_num_recs (pvt_vors.rec_size,
X					&pvt_vors.fp, filename);
X   }
X   ok = TRUE;
X
X   if (!pub_airports.fp && !pvt_airports.fp) {
X      ok = FALSE;
X      fprintf (stderr, "ERROR: neither public or private airports db found\n");
X   }
X   if (!pub_vors.fp && !pvt_vors.fp) {
X      ok = FALSE;
X      fprintf (stderr, "ERROR: neither public or private vors db found\n");
X   }
X   return (ok);
X}
X
X/*----------------------------------------------------------------------------*/
XBOOLEAN close_dbs ()
X{
X   if (pub_airports.fp)
X      fclose (pub_airports.fp);
X   if (pvt_airports.fp)
X      fclose (pvt_airports.fp);
X   if (pub_vors.fp)
X      fclose (pub_vors.fp);
X   if (pvt_vors.fp)
X      fclose (pvt_vors.fp);
X
X   return (TRUE);
X}
X
X
X/*----------------------------------------------------------------------------*/
Xstatic BOOLEAN lookup_desig_internal (db, desig, buffer_size, buffer)
X     DB_FILE db;
X     char *desig;
X     int  buffer_size;
X     char *buffer;
X{
X   long low, high, mid;
X   int  cmp;
X   if (! db.fp) 
X      return FALSE;
X
X#ifdef NO_BINARY_SEARCH
X   rewind (db.fp);   
X   while (fgets (buffer, buffer_size, db.fp)) {
X      if (!strcmp (desig, strtok (buffer, ":\n")))
X	 return TRUE;
X   }
X   return FALSE;
X#else
X   low = 0L;
X   high = db.num_recs;
X   while (low <= high) {
X      mid = (low + high) / 2L;
X      fseek (db.fp, mid * db.rec_size, FSEEK_FROM_BEGINNING);
X      fgets (buffer, buffer_size, db.fp);
X      cmp =strcmp (desig, strtok (buffer, ":\n"));
X      if (!cmp)
X	 return TRUE;
X      else if (cmp > 0)
X	 low = mid + 1;
X      else
X	 high = mid - 1;
X   }
X   return FALSE;
X#endif
X}
X
X/*----------------------------------------------------------------------------*/
Xstatic void decode_common (db)
X     DATABASE_INFO *db;
X{
X   extern double atof ();
X   extern double degrees_mins_2_decimal ();
X   double d1, d2;
X
X   db->altitude.value =  atof (strtok ((char*)0, ":\n"));
X   db->altitude.valid = TRUE;
X
X   d1 = atof (strtok ((char*)0, ":\n"));
X   d2 = atof (strtok ((char*)0, ":\n"));
X   db->mag_variation = d1 + d2 / 60.0;
X
X   d1 = atof (strtok ((char*)0, ":\n"));
X   d2 = atof (strtok ((char*)0, ":\n"));
X   db->latitude = d1 + d2 / 60.0;
X
X   d1 = atof (strtok ((char*)0, ":\n"));
X   d2 = atof (strtok ((char*)0, ":\n"));
X   db->longitude = d1 + d2 / 60.0;
X}
X
X/*----------------------------------------------------------------------------*/
Xstatic void decode_vor (db)
X     DATABASE_INFO *db;
X{
X   char *tok;
X
X   db->name = strdup (strtok ((char*)0, ":\n"));
X
X   tok = strdup (strtok ((char*)0, ":\n"));   
X   if (tok[0] != '\0') {
X      db->freq.valid = TRUE;
X      db->freq.value = atof (tok);
X   } else
X      db->freq.valid = FALSE;
X
X   decode_common (db);
X
X   tok = strtok ((char*)0, ":\n");
X   if (!strcmp ("NDB", tok))
X      db->mode = WP_NDB;
X   else if (!strcmp ("VOR", tok))
X      db->mode = WP_VOR;
X   else if (!strcmp ("DME", tok))
X      db->mode = WP_DME;
X   else if (!strcmp ("TAC", tok))
X      db->mode = WP_TAC;
X   else if (!strcmp ("ILS", tok))
X      db->mode = WP_ILS;
X   else if (!strcmp ("INT", tok))
X      db->mode = WP_NAMED_INTERSECTION;
X   else if (!strcmp ("WPT", tok))
X      db->mode = WP_WPT;
X   else if (!strcmp ("LOM", tok))
X      db->mode = WP_LOM;
X   else if (!strcmp ("LMM", tok))
X      db->mode = WP_LMM;
X   else 
X      db->mode = WP_UNK;
X
X   tok = strtok ((char*)0, ":\n");   
X   if (tok)
X      db->comment = strdup (tok);
X   else
X      db->comment = NULL;
X}
X
X/*----------------------------------------------------------------------------*/
Xstatic void decode_airport (db)
X     DATABASE_INFO *db;
X{
X   char *tok;
X
X   db->mode = WP_AIRPORT;
X   db->city = strdup (strtok ((char*)0, ":\n"));   
X   db->name = strdup (strtok ((char*)0, ":\n"));   
X
X   decode_common (db);
X
X   tok = strdup (strtok ((char*)0, ":\n"));   
X
X   if (tok[0] != '\0') {
X      db->freq.valid = TRUE;
X      db->freq.value = atof (tok);
X   } else
X      db->freq.valid = FALSE;
X
X   tok = strtok ((char*)0, ":\n");   
X   if (tok)
X      db->comment = strdup (tok);
X   else
X      db->comment = NULL;
X}
X
X/*----------------------------------------------------------------------------*/
Xstatic void str_upcase (str)
X     char *str;
X{
X   int i;
X
X   for (i = 0; str[i] != '\0'; i++)
X      if (islower (str[i]))
X	  str[i] = toupper (str[i]);
X}
X
X/*----------------------------------------------------------------------------*/
Xstatic BOOLEAN in_cache (mode, desig)
X     WAYPOINT_MODE mode;
X     char *desig;
X{
X   int i;
X
X   for (i = 0; i < num_cached; i++) {
X      if ((!strcmp (desig, cache[i]->desig)) && 
X	  (mode == cache[i]->mode)) {
X	 return TRUE;
X      }
X   }
X   return FALSE;
X}
X
X/*----------------------------------------------------------------------------*/
XBOOLEAN lookup_desig (kind, desig, db)
X     WAYPOINT_KIND kind;
X     char          *desig;
X     DATABASE_INFO **db;
X{
X#undef BUFSIZE
X#define BUFSIZE 200
X   char buffer [BUFSIZE];
X   DB_FILE fps[4];
X   int i;
X   BOOLEAN found;
X   extern yyerror();
X   enum {VOR, AIRPORT} db_kind;
X
X   str_upcase (desig);
X
X   if (kind == WP_VIA) {
X      /* 
X       * prefer the VOR databases
X       */
X      fps[0] = pvt_vors;
X      fps[1] = pub_vors;
X      fps[2] = pvt_airports;
X      fps[3] = pub_airports;
X   } else {
X      /* 
X       * prefer the AIRPORT databases 
X       */
X      fps[0] = pvt_airports;
X      fps[1] = pub_airports;
X      fps[2] = pvt_vors;
X      fps[3] = pub_vors;
X   }
X
X   for (i = 0; i < 4; i++) {
X      if (found = lookup_desig_internal (fps[i], desig, BUFSIZE, buffer)) {
X#if 0
X	 printf ("%s found w/db %d[%ld] (%s)\n",desig,i,fps[i].fp,
X		 ((fps[i].fp == pub_airports.fp) ||
X		  (fps[i].fp == pvt_airports.fp)) ? "APT" : "VOR");
X#endif
X	 if ((fps[i].fp == pub_airports.fp) || (fps[i].fp == pvt_airports.fp))
X	    db_kind = AIRPORT;
X	 else
X	    db_kind = VOR;
X	 break;
X      }
X   }
X   if (! found) {
X      fprintf (stderr, "ERROR: could not find %s in any database\n", desig);
X      return FALSE;
X   }
X
X   /*
X    * now, convert it into a db record...
X    */
X
X   *db = (DATABASE_INFO*) malloc (sizeof (DATABASE_INFO));
X   if (! *db)
X      yyerror ("unable to allocate space for database element");
X
X   (*db)->desig = desig;	/* no need to strdup - the parser already did */
X
X   if (db_kind == VOR)
X      decode_vor (*db);
X   else
X      decode_airport (*db);
X
X   /*
X    * append to the cache: (NOTE: it might already be there if we didn't grab
X    * it out of the cach because of incompatible modes - e.g. the cached wp is
X    * an airport, but this is a via node - we forced a recheck in case there was
X    * a navaid with the same desig)
X    */
X   if (num_cached < CACHE_SIZE)
X      if (! in_cache ((*db)->mode, desig)) {
X	 cache[num_cached++] = *db;
X      }
X   return TRUE;
X}
X
X/*----------------------------------------------------------------------------*/
Xstatic int dbcmp (db1, db2)
X     DATABASE_INFO **db1, **db2;
X{
X   return (strcmp ((*db1)->desig, (*db2)->desig));
X}
X
X/*----------------------------------------------------------------------------*/
Xvoid put_db_summary (out_fp)
X     FILE *out_fp;
X{
X   int i;
X
X   /*
X    * first, sort the cache 
X    */
X   qsort ((char*) &cache[0], num_cached, sizeof(DATABASE_INFO*), dbcmp);
X
X   /*
X    * now, print it out.
X    */
X   fprintf (out_fp, "\f\n");
X   for (i = 0; i < num_cached; i++)
X      put_db (out_fp, cache[i]);
X}
X
X
X/*----------------------------------------------------------------------------*/
Xvoid min_max_lat_long (min_lat, max_lat, min_long, max_long)
X     double *min_lat, *max_lat, *min_long, *max_long;
X{
X   int i;
X
X   *min_lat  =  190.0;
X   *max_lat  = -190.0;
X   *min_long =  190.0;
X   *max_long = -190.0;
X
X   for (i = 0; i < num_cached; i++) {
X      *min_lat = MIN (cache[i]->latitude, *min_lat);
X      *max_lat = MAX (cache[i]->latitude, *max_lat);
X      *min_long = MIN (cache[i]->longitude, *min_long);
X      *max_long = MAX (cache[i]->longitude, *max_long);
X   }
X}
END_OF_FILE
  if test 12544 -ne `wc -c <'db.c'`; then
    echo shar: \"'db.c'\" unpacked with wrong size!
  fi
  # end of 'db.c'
fi
if test -f 'fplan.1' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'fplan.1'\"
else
  echo shar: Extracting \"'fplan.1'\" \(14949 characters\)
  sed "s/^X//" >'fplan.1' <<'END_OF_FILE'
X'\" t   \" must preprocess with tbl with troff. -*- nroff -*
X.\" $Id: fplan.1,v 2.17 89/11/14 20:29:26 tynor Exp $
X.\"-------------------------------------------
X.TH FPLAN 1 "11 November 1989" FPLAN "Flight Planning"
X.\"-------------------------------------------
X.SH NAME
Xfplan \- flight planner
X.\"-------------------------------------------
X.SH SYNOPSIS
X.LP
X\fBfplan -l\fP \fIdesignator ...\fP
X.br
X\fBfplan -r\fP [ \fB\-\fP | \fIplanfile\fP ]
X.br
X\fBfplan -g\fP [ \fB\-\fP | \fIplanfile\fP ] (Sun systems only)
X.br
X\fBfplan\fP [ \fB\-n|w\fP ][ \fB\-b\fP ][ \fB\-d\fP ][ \fB\-e\fP ][
X\fB\-s\fP ][ \fB\-t\fP ][ \fB\-\fP | \fIplanfile\fP ]
X.br
X.\"-------------------------------------------
X.SH DESCRIPTION
X.LP
X\fBfplan\fP reads the \fIplanfile\fP consisting of departure and
Xdestination airports, navigation aids, intermediate checkpoints, fuel
Xconsumption rates, winds aloft, and produces a flight plan including
Xwind corrected heading, fuel consumption for each leg, vor fixes for
Xeach checkpoint, etc.  \fBfplan\fP uses \fBnav(5)\fP format databases
Xfor upward compatibility with those widely distributed databases.
X.PP 
XThe primary differences between \fBfplan\fP and \fBnav(1)\fP are that
X\fBfplan\fP will automatically compute VOR cross fixes (radial and
Xdistance to/from fix) at each waypoint along the flight and allow you
Xto enter a waypoint as ``15 miles since the previous waypoint along
Xthe current heading''. These features provide a kind of flight plan
Xmore useful in VFR / dead reckoning flight, where frequent checkpoints
Xare necessary.  On Sun systems, a graphic preview of the flight can be
Xdisplayed in a scrollable window.
X.\"-------------------------------------------
X.SH OPTIONS
X.LP
X.TP  10
X.B \-l
XLookup the \fIdesignator(s)\fP in the databases and
Xprint their information to the standard output. If any designator
Xexists in both the airports and navigation aids databases, then both
Xentries are printed.
X.TP
X.B \-r
XProduce a return trip based on the input plan file. All waypoints are
Xreversed and incremental waypoints are recomputed. Correct \fBnav\fP
Xdirectives are included so that each waypoint uses the same VORs as in
Xthe input file. Fuel, wind, airspeed and altitude directives are not
Xincluded in the reversed plan.
X.TP
X.B \-g
X(Sun systems only). Preview the flight in a Sunview window. (NOTE: the
Xpreviewer uses a naive projection system - curvature of the earth is
Xignored. Do not use the preview map for navigation). The window is
Xdivided into two sections: the command panel and the map. The map is a
Xscrollable canvas where each waypoint and navaid is drawn. The command
Xpanel contains the following items:
X.br
X	\fBQUIT\fP - Quits the previewer.
X.br
X	\fBTO FIRST\fP - Scrolls the map to make the first waypoint visible.
X.br
X	\fBTO LAST\fP - Scrolls the map to make the last waypoint visible.
X.br
X	\fBBRIEF\fP - Toggles whether incremental waypoints are shown (similar
Xto the \fB-b\fP option).
X.br
X	\fBSCALE\fP - Sets the scale of the map. The default scale is 100
Xpixels per degree of latitude.
X.TP
X.B \-
XRead the planfile from the standard input. If this option is present,
Xthen no \fIplanfile\fP may be specified.
X.TP
X.B \-d
XAppend a sorted summary of all database objects used in the planfile.
X.TP
X.B \-e
XUse Epson (IBM/PC) style box characters on the output form instead of the 
Xdefault `+', `-', and `|'. Produces a more readable form if your terminal
Xand/or printer is capable of printing IBM box characters.
X.TP
X.B \-n
XSelect the narrow output format (no VOR cross fixes). Fits on a 80
Xcharacter terminal. Mutually exclusive with the \fB\-w\fP option
X[DEFAULT].
X.TP
X.B \-w
XSelect the wide output format (with VOR cross fixes). Can be up to 136
Xcharacters wide (depending on the number of active VORs). Mutually
Xexclusive with the \fB\-n\fP option.
X.TP 
X.B \-s
XSelect statute miles (and miles per hour) for output form. Default is
Xnautical miles (and knots). Note: All speeds and distances in the
X\fIplanfile\fP are assumed to be knots and nautical miles unless
Xexplicitly marked by the \fBmi\fP or \fBmph\fP keywords.
X.TP 
X.B \-b
XSelects \fIbrief\fP mode. Intermediate waypoints (those which are not
Xturning points) are not included in the output form. Useful for seeing
Xthe 'big picture'.
X.TP 
X.B \-t
XDisables automatically tracking navaids in the primary navigation
Xradio (nav(1)). By default the nav(1) VOR automatically tracks to the
Xnext navaid (or from the previous one). When this option is enabled
X[DEFAULT], user specified nav(1) assignments are overridden.
X.\"-------------------------------------------
X.SH "PLANFILE FORMAT"
X\fBfplan\fP accepts a reasonably free-format input language to specify
Xdeparture and destination airports, winds aloft, intermediate
Xwaypoints, etc.  The \fIplanfile\fP consists of any number of
Xsemicolon (;) separated descriptors.  Comments are introduced by a
Xhash mark (#) in any column (all characters following the # on the
Xline are ignored).  Each boldfaced keyword is case sensative - all are
Xlowercase. A \fIdesignator\fP, on the other hand, is not case
Xsensative - they may be written in upper or lowercase. In the case of
Xa conflict with an \fBfplan\fP keyword (e.g. if there is an airport
Xnamed VIA), use uppercase to prevent \fBfplan\fP from interpreting VIA
Xas a keyword. Each descriptor is listed below.
X.TP 20
X.\"-----------------
X\fBfrom\fP \fIdesignator\fP ; 
XSpecifies the departure airport.  \fIDesignator\fP is an airport
Xdesignator (e.g. ORD). The private and public airports.nav databases
Xare searched. It is an error if the \fIdesignator\fP cannot be found
Xin any database. (Example: \fIfrom ORD;\fP).
X.\"-----------------
X.TP
X\fBto\fP \fIdesignator\fP ;
XSpecifies the destination airport.  \fIDesignator\fP is an airport
Xdesignator (e.g. ORD). The private and public airports.nav databases
Xare searched. It is an error if the \fIdesignator\fP cannot be found
Xin any database. (Example: \fIto ATL;\fP).
X.\"-----------------
X.PP
XIntermediate waypoints can be specified in three ways: by designator
X(for vors or airports in the databases), by geographic coordinates
X(latitude and longitude), or as a `distance since last turn' (useful
Xfor VFR, dead reckoning flights where it is helpful to have a
Xcheckpoint every 10 minutes or so).
X.TP 20
X\fBvia\fP \fIdesignator\fP ;
XSpecifies a navaid or airport waypoint.  \fIDesignator\fP is a
Xnavaid, intersection, or airport designator (e.g. RMG).  The private
Xand public vors.nav, then airports.nav databases are searched. It is
Xan error if the \fIdesignator\fP cannot be found in any database.
X(Example: \fIvia CMI;\fP).
X.\"-----------------
X.TP
X\fBvia\fP \fIlatitude\fP , \fIlongitude [, name [, city [, comment ]]]\fP ;
XSpecifies a geographic coordinate checkpoint. Use positive latitudes
Xfor north, negative for south. Use positive longitudes for west,
Xnegative for east. Use \fIdegrees.minutes\fP notation: 45.678 means 45
Xdegrees, 67.8 minutes. Up to three optional comma-separated strings
X(corresponding to the \fIname\fP, \fIcity\fP, and \fIcomment\fP,
Xstrings in the output form) may be specified. (Examples: \fIvia 33.51,
X84.38, ``Tank Farms'', ``Atlanta'', ``7nm NW of FTY'';\fP or \fIvia
X33.51, 84.38, ``Tank Farms'', ``Atlanta'';\fP or even just \fIvia
X33.51, 84.38;\fP).
X.\"-----------------
X.TP
X\fBvia\fP \fIdistance [, name [, city [, comment ]]]\fP ;
XSpecifies an `incremental' checkpoint.  If positive, \fIDistance\fP is
Xa number specifying the number of \fInautical\fP miles (unless the
X\fBmi\fP keyword is specified - then statute miles) since the last
Xturn point. If negative, then the distance until the next turn point.
XIncremental waypoints are very useful for intermediate waypoints in
XVFR / dead reckoning flight, where it is often necessary to have
Xcheckpoints every 10 miles or so. They are also useful for specifying
X`end-of-climb' or `beginning-of-descent' points.  The optional strings
Xare described under geographic coordinate checkpoints.  Warning:
Xsuccessive `incremental' distances refer to the previous
Xnon-`incremental' checkpoint. Thus the following two waypoints
Xactually refer to the same point: \fIvia 10, ``point 1'';\fP and
X\fIvia 10, ``point 2''\fP.  (Examples: \fIvia 12;\fP or \fIvia 13.4
Xmi;\fP or \fIvia 5, ``Montefusco's Lake'';\fP) 
X.PP
XThe following directives are used to specify the wind and true airspeed.
X.TP 20
X\fBwind\fP \fIheading\fP \fB@\fP \fIspeed\fP ; 
XSpecifies the wind speed and direction. If no wind is specified, it
Xis assumed to be calm. (Example: \fIwind 320@15;\fP).
X.TP
X\fBtas\fP \fIspeed\fP ;
XSpecifies the true airspeed. If no true airspeed is specified, time
Xestimates will not be made. The speed is assumed to be in knots unless
Xthe \fBmph\fP keyword is specified. (Example: \fItas 95;\fP or \fItas
X95mph;\fP).
X.PP
XIn order for fuel consumption computations to be made, the initial
Xamount of fuel on board and burn rate must be specified.
X.TP 20
X\fBfuel_amt\fP \fInumber\fP ;
XSpecifies the initial amount (pounds, gallons, liters, whatever) of
Xfuel on board. (Example: \fIfuel_amt 24.5;\fP).
X.TP
X\fBfuel_rate\fP \fInumber\fP ;
XSpecifies the fuel burn rate in units per hour - use the same units
Xas in the \fBfuel_amt\fP directive. (Example: \fIfuel_rate 5.4;\fP).
X.TP
X\fBfuel_used\fP \fInumber\fP ; 
XSpecifies fuel burn not computable from the burn rate (e.g. for taxi
Xand climb). Use the same units as in the \fBfuel_amt\fP directive.
X(Example: \fIfuel_used 0.8;\fP).
X.PP
XThe flight altitude may be specified with the following directive. It
Xis currently simply copied to the output form, but future versions of
X\fBfplan\fP may use it to look up true airspeed and fuel economy from
Xan aircraft specific database.
X.TP 20
X\fBalt\fP \fIfeet\fP ;
XSpecifies the flight altitude for the succeeding legs. (Example:
X\fIalt 5500;\fP).
X.PP
XVOR cross fixes can be computed for each waypoint. Up to 6
Xsimultaneous fixes may be specified. By default, nav(1) automatically
Xtracks to the next waypoint (if it is a navigation aid), or from the
Xprevious waypoint. This can be disabled by the \fB-t\fP command line
Xswitch. When auto track is enabled (the default), user specified
Xvalues for nav(1) are ignored.
X.TP 20
X\fBnav (\fP \fInumber\fP \fB)\fP \fIdesignator\fP ;
XSpecifies which VOR to track in the \fInumber\fP navigation radio. It
Xis an error if no navaid named \fIdesignator\fP can be found in the
Xdatabases. (Example: \fInav(2) cmi;\fP).
X.\"-------------------------------------------
X.SH EXAMPLE
XThe following example planfile illustrates a simple flight from
XChicago O'Hare to Champaign, IL via the DuPage VOR with a 5 knot wind
Xfrom 320. True airspeed is set for 95 knots. VOR cross fixes from the
XPeotone VOR (EON) will be computed. Initial fuel is 24.5 gallons and
Xfuel economy is set to 5.4 gallons per hour.
X.nf
X.sp
Xnav(2) EON;
Xfuel_amt  24.5;
Xfuel_rate 5.4;
Xtas 95;
Xwind 230@5;
Xfrom ORD;
Xvia  DPA;
Xto   CMI;
X.sp
X.fi
XRunning 
X.B fplan
Xwith this planfile produces (elided in order to fit the narrow page):
X.sp
X.\" if this is nroff, then don't use tbl since the column widths
X.\" usually  end up too wide for an 80 column terminal. If it's troff,
X.\" then use tbl since we don't have constant width fonts to do our
X.\" formatting. 
X.if n \{ .nf
X+-------- / -------+---+-----+                              +--------+
X|CHECKPOI /   DESIG|   | FUEL|                              |     VOR|
X|CITY     /    FREQ|DIS|  ETE+------+---+----+-----+--------+    FREQ|
X|COMMENT  / AT/LONG|REM|  ATE|    MC|TAS|DIST|  ALT|     VOR|DME  RAD|
X+-------- / -------+---+----->  WIND|EGS| ETE| RATE|    FREQ<--------+
X|CHICAGO- /     ORD|   | 24.5|    MH|AGS| ATE| FUEL|DME  RAD|     EON|
X|CHICAGO, /        |  0|     +------+---+----+-----+--------+  113.20|
X|         / 87.543]|132|     |   256| 95|  21|     |     DPA|43  171T|
X+-------- / -------+---+----->230@05| 90|  14|  5.4|  108.40<--------+
X|DUPAGE   /     DPA|   | 23.3|   254|   |    |  1.2|21  253T|     EON|
X|         /  108.40| 21|   14+------+---+----+-----+--------+  113.20|
X|L [IL] C / 88.210]|111|     |   176| 95| 111|     |     CMI|45  144T|
X+-------- / -------+---+----->230@05| 92|1:12|  5.4|  110.00<--------+
X|UNIVERSI /     CMI|   | 16.8|   179|   |    |  6.5|111 175T|     EON|
X|CHAMPAIG /  120.40|132| 1:26+------+---+----+-----+--------+  113.20|
X|CHICAGO  / 88.167]|  0|     |                              |77  015T|
X+-------- / -------+---+-----+                              +--------+
X.fi
X\}
X.if t \{ .nf
X.bp
X\s-2
XSpeeds in knots; Distances in nautical miles
X.fi
X.TS
Xtab (~) center;
X| l || r | r | r | r   r   r   r   re |  re | .
X_~_~_~_~~~~~~_
XCHECKPOINT~DESIG~~FUEL~~~~~~VOR
X.T&
X| l || r | r | r | r | r | r | r | re |  re | .
XCITY~FREQ~DIS~ETE~_~_~_~_~_~FREQ
XCOMMENT~T/LONG~REM~ATE~MC~TAS~DIST~ALT~VOR~RAD DME
X_~_~_~_~WIND~EGS~ETE~RATE~FREQ~_~
XCHICAGO-O~ORD~~24.5~MH~AGS~ATE~FUEL~RAD DME~EON
XCHICAGO, IL~~0~~_~_~_~_~_~113.20
XCHICAGO~87.543]~132~~256~95~21~~DPA~171T 43
X_~_~_~_~230@05~90~14~5.4~108.40~_
XDUPAGE~DPA~~23.3~254~~~1.2~253T 21~EON
X~108.40~21~14~_~_~_~_~_~113.20
XL [IL] CHIC~88.210]~111~~176~95~111~~CMI~144T 45
X_~_~_~_~230@05~92~1:12~5.4~110.00~_
XUNIVERSITY~CMI~~16.8~179~~~6.5~175T 111~EON
XCHAMPAIGN/~120.40~132~1:26~_~_~_~_~_~113.20
X.T&
X| l || r | r | r | r   r   r   r   re |  re | .
XCHICAGO~88.167]~0~~~~~~~015T 77
X_~_~_~_~~~~~~_
X.TE
X\s+2
X\}
X.\"-------------------------------------------
X.SH ENVIRONMENT
X.B fplan
Xrecognizes the following environment variables to specify where to
Xlook for its databases:
X.TP  12
X.B NAV
XOverrides the location of the public databases (Unix default is
X"/usr/local/lib/preflight", MSDOS default is "\\lib\\flight").
X.TP 
X.B NAV_PRIVATE
XOverrides the location of the private databases (Unix default is
X"~/preflight", MSDOS default is "\\flight").
X.\"-------------------------------------------
X.SH FILES
XThe database files used by \fBfplan\fP are specially formatted for
Xquick lookup. Use \fBpaddb\fP to convert a text file into the
Xformatted version suitable for use with \fBfplan\fP.
X.sp
X.PD 0
X.TP 15
X.B airports.nav
XAirports database in \fBfplan(5)\fP format.
X.TP
X.B vors.nav
XNavigation aids database in \fBfplan(5)\fP format.
X.PD
X.\"-------------------------------------------
X.SH SEE ALSO
X\fBnav(1)\fP, \fBfplan(5)\fP, \fBnav(5)\fP, \fBpaddb(1)\fP
X.LP 
X.\"-------------------------------------------
X.SH AUTHOR
XSteve Tynor \- tynor@prism.gatech.edu
X.\"-------------------------------------------
X.SH DISCLAIMER
X     USE AT YOUR OWN RISK! I assume no responsibility for any errors
Xin this program, its database or documentation. I will make an effort
Xto fix bugs, but if you crash and burn because, for example, fuel
Xestimates in this program were inaccurate, it's your own fault for
Xtrusting somebody else's code! Remember, as Pilot In Command, it's
X\fIyour\fP responsibility to do complete preflight planning. Use this
Xprogram as a flight planning aid, but verify its results before using
Xthem.
X.\"-------------------------------------------
X.SH LIMITATIONS
XThe airways.nav databases are currently not used.
END_OF_FILE
  if test 14949 -ne `wc -c <'fplan.1'`; then
    echo shar: \"'fplan.1'\" unpacked with wrong size!
  fi
  # end of 'fplan.1'
fi
if test -f 'main.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'main.c'\"
else
  echo shar: Extracting \"'main.c'\" \(8562 characters\)
  sed "s/^X//" >'main.c' <<'END_OF_FILE'
X/*
X * $Id: main.c,v 2.12 89/11/11 19:13:48 tynor Exp $
X *----------------------------------------------------------------------------
X *	FPLAN - Flight Planner
X *	Steve Tynor
X *	tynor@prism.gatech.edu
X *
X *	This program is in the public domain. Permission to copy,
X * distribute, modify this program is hearby given as long as this header
X * remains. If you redistribute this program after modifying it, please
X * document your changes so that I do not take the blame (or credit) for
X * those changes.  If you fix bugs or add features, please send me a
X * patch so that I can keep the 'official' version up-to-date.
X *
X *	Bug reports are welcome and I'll make an attempt to fix those
X * that are reported.
X *
X *	USE AT YOUR OWN RISK! I assume no responsibility for any
X * errors in this program, its database or documentation. I will make an
X * effort to fix bugs, but if you crash and burn because, for example,
X * fuel estimates in this program were inaccurate, it's your own fault
X * for trusting somebody else's code! Remember, as PIC, it's _your_
X * responsibility to do complete preflight planning. Use this program as
X * a flight planning aid, but verify its results before using them.
X *----------------------------------------------------------------------------
X */
X
Xstatic char rcsid[] = "$Id: main.c,v 2.12 89/11/11 19:13:48 tynor Exp $";
X
X#include <stdio.h>
X#include "wp_info.h"
X#include "version.h"
X
X#define EXIT_GOOD 0
X#define EXIT_BAD  1
X
Xextern FILE *yyin;
Xextern BOOLEAN open_dbs ();
Xextern BOOLEAN close_dbs ();
Xextern BOOLEAN compute_plan ();
Xextern void print_plan ();
Xextern void set_output_units ();
Xextern void set_format ();
Xextern void set_brief ();
Xextern char yytext[];
Xextern BOOLEAN lookup_desig ();
Xextern void put_db_summary ();
Xextern void print_reverse ();
X
X/*
X * if any of the GFX_* options are defined, define GFX
X */
X#ifdef GFX_SUNVIEW
X#define GFX
X#endif
X#ifdef GFX_X
X#undef GFX
X#define GFX
X#endif
X#ifdef GFX_POSTSCRIPT
X#undef GFX
X#define GFX
X#endif
X
X/*----------------------------------------------------------------------------*/
Xstatic void do_lookup (desig)
X     char *desig;
X{
X   DATABASE_INFO *db1 = (DATABASE_INFO*)0;
X   DATABASE_INFO *db2 = (DATABASE_INFO*)0;
X
X   if (lookup_desig (WP_VIA, desig, &db1))
X      put_db (stdout, db1);
X
X   if (lookup_desig (WP_FROM, desig, &db2))
X      if (!db1 || (db1->mode != db2->mode))
X	 put_db (stdout, db2);
X}
X
X/*----------------------------------------------------------------------------*/
Xstatic void init (brief)
X     BOOLEAN brief;
X{
X   /* 
X    * NOTE: we count on all variables being set to 0 (thus all optional values
X    * are 'off' by default).
X    */
X   num_waypoints = 0;
X   num_cached = 0;
X   set_brief (brief);
X}
X
X/*----------------------------------------------------------------------------*/
Xstatic BOOLEAN parse_script ()
X{
X   return (BOOLEAN) (! yyparse ());
X}
X
X/*----------------------------------------------------------------------------*/
Xusage (progname)
X     char *progname;
X{
X   fprintf (stderr, "FPLAN %s\n", VERSION);
X   /*
X    * LOOKUP mode:
X    */
X   fprintf (stderr, "usage: %s -l designator ...\n", progname);
X   fprintf (stderr, "\t-l - lookup the designator(s) in the databases\n");
X
X   /*
X    * REVERSE mode:
X    */
X   fprintf (stderr, "    or\n");
X   fprintf (stderr, "       %s -r [-|planfile]\n", progname);
X   fprintf (stderr, "\t-r - compute the return trip, prints the reversed plan to stdout.\n");
X   fprintf (stderr, "\t-  - read 'planfile' from the standard input.\n");
X
X#ifdef GFX
X   /*
X    * GRAPHICS mode:
X    */
X   fprintf (stderr, "    or\n");
X   fprintf (stderr, "       %s -g [-|planfile]\n", progname);
X
X#ifdef GFX_SUNVIEW
X   fprintf (stderr, "\t-g - preview the route graphically in a Sunview window\n");
X#endif /* GFX_SUNVIEW */
X#ifdef GFX_X
X   fprintf (stderr, "\t-g - preview the route graphically in an X window\n");
X#endif /* GFX_X*/
X#ifdef GFX_POSTSCRIPT
X   fprintf (stderr, "\t-g - create a PostScript program to draw the route\n");
X#endif /* GFX_POSTSCRIPT*/
X   fprintf (stderr, "\t-  - read 'planfile' from the standard input.\n");
X#endif /* GFX */
X
X   /*
X    * NORMAL mode:
X    */
X   fprintf (stderr, "    or\n");
X   fprintf (stderr, "       %s [-n|w][-b][-t][-s][-e][-|planfile]\n", 
X	    progname);
X   fprintf (stderr, "\t-n - selects the narrow (no VOR fixes) format form [default]\n");
X   fprintf (stderr, "\t-w - selects the wide (VOR fixes) format form \n");
X   fprintf (stderr, "\t-s - selects Statute miles for output format [default = Nautical]\n");
X   fprintf (stderr, "\t-t - disable automatically tracking navaids in NAV1 [default = enabled]\n");
X   fprintf (stderr, "\t-b - set BRIEF mode - ignore 'incremental' waypoints\n");
X   fprintf (stderr, "\t-e - use Epson (PC) box characters on output form\n");
X   fprintf (stderr, "\t-d - append a summary of all database objects used\n");
X   fprintf (stderr, "\t-  - read 'planfile' from the standard input.\n");
X   fprintf (stderr, "    the planfile format is described in FPLAN(1)\n");
X   exit (EXIT_BAD);
X}
X
X/*----------------------------------------------------------------------------*/
Xint main (argc, argv)
X     int argc;
X     char *argv[];
X{
X   enum {WIDE, NARROW} format = NARROW;
X   int i;
X   BOOLEAN auto_nav1        = TRUE;
X   BOOLEAN brief            = FALSE;
X   BOOLEAN epson_box_chars  = FALSE;
X   BOOLEAN reverse          = FALSE;
X   BOOLEAN database_summary = FALSE;
X#ifdef GFX_SUNVIEW
X   BOOLEAN draw_sunview     = FALSE;
X#endif
X#ifdef GFX_X
X   BOOLEAN draw_x           = FALSE;
X#endif
X#ifdef GFX_POSTSCRIPT
X   BOOLEAN draw_postscript  = FALSE;
X#endif
X
X   if (argc < 2)
X      usage (argv[0]);
X
X   if (! open_dbs ())
X      exit (EXIT_BAD);
X
X   if ((argv[1][0] == '-') && (argv[1][1] == 'l')) {
X      for (i = 2; i < argc; i++)
X	 do_lookup (argv[i]);
X      exit (EXIT_GOOD);
X   }
X
X   yyin = NULL;
X   set_output_units (1);
X   for (i = 1; i < argc; i++) {
X      if (argv[i][0] == '-') {
X	 switch (argv[i][1]) {
X	 case 'g':
X	    /* 
X	     *leave these separate for now, we'll probably want to link in all
X	     * three on some systems...
X	     */
X#ifdef GFX_SUNVIEW
X	    draw_sunview = TRUE;
X#endif
X#ifdef GFX_X
X	    draw_x = TRUE;
X#endif
X#ifdef GFX_POSTSCRIPT
X	    draw_postscript = TRUE;
X#endif
X	    break;
X	 case 'r':
X	    reverse = TRUE;
X	    break;
X	 case 'e':
X	    epson_box_chars = TRUE;
X	    break;
X	 case 'd':
X	    database_summary = TRUE;
X	    break;
X	 case 's':
X	    set_output_units (0);
X	    break;
X	 case 'n':
X	    format = NARROW;
X	    break;
X	 case 'w':
X	    format = WIDE;
X	    break;
X	 case 'b':
X	    brief = TRUE;
X	    break;
X	 case 't':
X	    auto_nav1 = FALSE;
X	    break;
X	 case '\0':
X	    if (yyin) {
X	       fprintf (stderr, 
X			"ERROR: cannot read from stdin and planfile: \"%s\".\n",
X			argv[i]);
X	       usage (argv[0]);
X	    } else {
X	       yyin = stdin;
X	    }
X	    break;
X	 default:
X	    fprintf (stderr, "ERROR: unknown option: \"%s\".\n", argv[i]);
X	    usage (argv[0]);
X	    break;
X	 }
X      } else {
X	 if (yyin) {
X	    fprintf (stderr, "ERROR: only one planfile allowed: \"%s\".\n",
X		     argv[i]);
X	    usage (argv[0]);
X	 } else {
X	    yyin = fopen (argv[i], "r");
X            if (! yyin) {
X	       fprintf (stderr, "ERROR: could not open script file: %s.\n", 
X			argv[i]);
X	       usage (argv[0]);
X	    }
X	 }
X      }
X   }
X
X   if (! yyin) {
X      fprintf (stderr, "ERROR: no planfile\n");
X      usage (argv[0]);
X   }
X   init (brief);
X
X   if (! parse_script ())
X      exit (EXIT_BAD);
X
X   if (! compute_plan (auto_nav1) )
X      exit (EXIT_BAD);
X
X   if (reverse) {
X      print_reverse ();
X#ifdef GFX_SUNVIEW
X   } else if (draw_sunview) {
X      sv_draw (brief);
X#endif
X#ifdef GFX_X
X   } else if (draw_x) {
X      x_draw (brief);
X#endif
X#ifdef GFX_POSTSCRIPT
X   } else if (draw_postscript) {
X      ps_draw (brief);
X#endif
X   } else {
X      if (format == NARROW)
X	 max_nav = -1;
X      else if (auto_nav1)
X	 max_nav = MAX (0, max_nav);
X      set_format (max_nav, epson_box_chars);
X      
X      print_plan ();
X
X      if (database_summary)
X	 put_db_summary (stdout);
X   }
X
X   if (! close_dbs ())
X      exit (EXIT_BAD);
X}
X
X
X/*----------------------------------------------------------------------------*/
Xint yyerror(s)
Xchar* s;
X{
X   extern int yylineno;
X
X   fprintf (stderr, "ERROR: line %d: %s\n", yylineno, s);
X   exit (EXIT_BAD);
X}
X
X/*----------------------------------------------------------------------------*/
Xint yywrap ()
X{
X   return (1);
X}
X
X/*----------------------------------------------------------------------------*/
Xint yyreject ()
X{
X   printf ("ERROR: parser rejecting %s\n", yytext);
X   return (1);
X}
X
END_OF_FILE
  if test 8562 -ne `wc -c <'main.c'`; then
    echo shar: \"'main.c'\" unpacked with wrong size!
  fi
  # end of 'main.c'
fi
if test -f 'version.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'version.h'\"
else
  echo shar: Extracting \"'version.h'\" \(22 characters\)
  sed "s/^X//" >'version.h' <<'END_OF_FILE'
X#define VERSION "1.3"
END_OF_FILE
  if test 22 -ne `wc -c <'version.h'`; then
    echo shar: \"'version.h'\" unpacked with wrong size!
  fi
  # end of 'version.h'
fi
if test -f 'wp_info.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'wp_info.h'\"
else
  echo shar: Extracting \"'wp_info.h'\" \(3446 characters\)
  sed "s/^X//" >'wp_info.h' <<'END_OF_FILE'
X/*
X * $Id: wp_info.h,v 2.8 89/12/03 13:59:43 tynor Exp $
X *----------------------------------------------------------------------------
X *	FPLAN - Flight Planner
X *	Steve Tynor
X *	tynor@prism.gatech.edu
X *
X *	This program is in the public domain. Permission to copy,
X * distribute, modify this program is hearby given as long as this header
X * remains. If you redistribute this program after modifying it, please
X * document your changes so that I do not take the blame (or credit) for
X * those changes.  If you fix bugs or add features, please send me a
X * patch so that I can keep the 'official' version up-to-date.
X *
X *	Bug reports are welcome and I'll make an attempt to fix those
X * that are reported.
X *
X *	USE AT YOUR OWN RISK! I assume no responsibility for any
X * errors in this program, its database or documentation. I will make an
X * effort to fix bugs, but if you crash and burn because, for example,
X * fuel estimates in this program were inaccurate, it's your own fault
X * for trusting somebody else's code! Remember, as PIC, it's _your_
X * responsibility to do complete preflight planning. Use this program as
X * a flight planning aid, but verify its results before using them.
X *----------------------------------------------------------------------------
X */
X
Xtypedef int BOOLEAN;
X#define FALSE ((BOOLEAN)0)
X#define TRUE  ((BOOLEAN)1)
X
X#define MI_PER_NM 1.1507575757	/* statute miles per natutical miles */
X
Xtypedef enum {WP_FROM, WP_VIA, WP_TO} WAYPOINT_KIND;
X
Xtypedef enum {WP_VOR, WP_AIRPORT, WP_NAMED_INTERSECTION, 
X		 WP_INTERSECTION, WP_INCREMENTAL, WP_LAT_LONG,
X		 WP_NDB, WP_DME, WP_TAC, WP_ILS, WP_WPT, WP_LOM, WP_LMM, WP_UNK
X		 } WAYPOINT_MODE;
X
X#define MAX_NUM_WAYPOINTS 100
X#define MAX_NUM_VOR_FIXES 6
X
Xtypedef enum {FROM, TO} FROM_TO;
X
Xtypedef struct {
X   BOOLEAN valid;
X   double  value;
X} OPTIONAL_DBL;
X
Xtypedef struct {
X   WAYPOINT_MODE       	mode;
X   double		latitude;  /* stored in decimal - not degrees/min/sec */
X   double		longitude;   
X   char 		*desig;
X   char 		*city;
X   char 		*name;
X   char 		*comment;
X   OPTIONAL_DBL		freq;
X   OPTIONAL_DBL		altitude;
X   double		mag_variation;
X   union {
X      /* when wp_mode == WP_INCREMENTAL */
X      double	dist_since_last_wp;
X   } u;
X} DATABASE_INFO;
X
Xtypedef struct {
X   BOOLEAN valid;
X   DATABASE_INFO *db;
X   double  heading;
X   double  distance;
X   FROM_TO from_to;
X} VOR_FIX;
X
X/*
X * NOTE: ALL VALUES STORED INTERNALLY IN KNOTS AND NAUTICAL MILES
X */
Xtypedef struct {
X   WAYPOINT_KIND       	wp_kind;
X   DATABASE_INFO	*db;
X   OPTIONAL_DBL 	tc;
X   OPTIONAL_DBL 	mc;
X   OPTIONAL_DBL 	mh;
X   OPTIONAL_DBL 	wind_speed; 
X   OPTIONAL_DBL 	wind_direction;
X   OPTIONAL_DBL 	dist_leg;
X   OPTIONAL_DBL 	dist;
X   OPTIONAL_DBL 	dist_remain;
X   OPTIONAL_DBL 	eta_leg;
X   OPTIONAL_DBL 	eta;
X   BOOLEAN		refuel;
X   OPTIONAL_DBL		extra_fuel_burn;
X   OPTIONAL_DBL 	fuel_amt;
X   OPTIONAL_DBL 	fuel_rate;
X   OPTIONAL_DBL 	fuel_leg;
X   OPTIONAL_DBL 	altitude;
X   OPTIONAL_DBL 	tas;
X   OPTIONAL_DBL 	egs;
X   VOR_FIX		vor_fix [MAX_NUM_VOR_FIXES];
X} WAYPOINT_INFO;
X
X
XWAYPOINT_INFO waypoints[MAX_NUM_WAYPOINTS];
X
Xint num_waypoints;
X
X#define MAX(x,y) (((x) > (y)) ? (x) : (y))
X#define MIN(x,y) (((x) < (y)) ? (x) : (y))
X#define ABS(x) (((x) < 0) ? -(x) : (x))
X
X
X#define PI ((double) 3.14159265358979323846)
X
X#define DEG2RAD(x) ((x)*PI/180.0)
X#define RAD2DEG(x) ((x)*180.0/PI)
X
Xint max_nav;
X
X#define CACHE_SIZE MAX_NUM_WAYPOINTS
XDATABASE_INFO *cache [CACHE_SIZE];
Xint num_cached;
X
END_OF_FILE
  if test 3446 -ne `wc -c <'wp_info.h'`; then
    echo shar: \"'wp_info.h'\" unpacked with wrong size!
  fi
  # end of 'wp_info.h'
fi
echo shar: End of archive 2 \(of 4\).
cp /dev/null ark2isdone
MISSING=""
for I in 1 2 3 4 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 4 archives.
    rm -f ark[1-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0
exit 0 # Just in case...
