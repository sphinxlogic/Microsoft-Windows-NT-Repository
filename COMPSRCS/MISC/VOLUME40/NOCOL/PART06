Newsgroups: comp.sources.misc
From: vikas@jvnc.net (Vikas Aggarwal)
Subject: v40i136:  nocol - Network Monitoring System, Part06/26
Message-ID: <1993Nov23.034709.5561@sparky.sterling.com>
X-Md4-Signature: 5e39d61829411879a7d89018a9a7572e
Sender: kent@sparky.sterling.com (Kent Landfield)
Organization: Sterling Software
Date: Tue, 23 Nov 1993 03:47:09 GMT
Approved: kent@sparky.sterling.com

Submitted-by: vikas@jvnc.net (Vikas Aggarwal)
Posting-number: Volume 40, Issue 136
Archive-name: nocol/part06
Environment: INET, UNIX

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# Contents:  nocol-3.0/src/cmu-snmp/cisco.mib91.C
#   nocol-3.0/src/support/mping/mping.c
# Wrapped by kent@sparky on Tue Nov  9 22:22:15 1993
PATH=/bin:/usr/bin:/usr/ucb:/usr/local/bin:/usr/lbin:$PATH ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 6 (of 26)."'
if test -f 'nocol-3.0/src/cmu-snmp/cisco.mib91.C' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'nocol-3.0/src/cmu-snmp/cisco.mib91.C'\"
else
  echo shar: Extracting \"'nocol-3.0/src/cmu-snmp/cisco.mib91.C'\" \(59063 characters\)
  sed "s/^X//" >'nocol-3.0/src/cmu-snmp/cisco.mib91.C' <<'END_OF_FILE'
X                   ::= { ltsLineEntry 15 }
X
X               tsLineUses OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Number of times a connection has been made
X                           to or from this line."
X                   ::= { ltsLineEntry 16 }
X
X               tsLineNses OBJECT-TYPE
X
X
X
X
X
X          -- cisco MIB                                         [Page 67]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Current number of sessions in use on this
X                           line."
X                   ::= { ltsLineEntry 17 }
X
X               tsLineUser OBJECT-TYPE
X                   SYNTAX  DisplayString
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "TACACS user name, if TACACS enabled, of user
X                           on this line."
X                   ::= { ltsLineEntry 18 }
X
X               tsLineNoise OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Count of garbage characters received when
X                           line inactive."
X                   ::= { ltsLineEntry 19 }
X
X               -- End of table
X
X
X
X               -- Local Terminal Server Line Session Table
X
X          -- This group contains terminal server specific
X          -- information on a per line and per session basis.
X
X               ltsLineSessionTable OBJECT-TYPE
X                   SYNTAX  SEQUENCE OF LTsLineSessionEntry
X                   ACCESS  not-accessible
X                   STATUS  mandatory
X                   DESCRIPTION
X                            "A list of terminal server line and session
X                            entries."
X                   ::= { lts 3 }
X
X               ltsLineSessionEntry OBJECT-TYPE
X
X
X
X
X
X          -- cisco MIB                                         [Page 68]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   SYNTAX LTsLineSessionEntry
X                   ACCESS  not-accessible
X                   STATUS  mandatory
X                   DESCRIPTION
X                            "A collection of per session and per TTY
X                            objects in the cisco Terminal Server
X                            implementation."
X                   INDEX { INTEGER, INTEGER }
X               ::= { ltsLineSessionTable 1 }
X
X               LTsLineSessionEntry ::=
X                   SEQUENCE {
X                       tslineSesType
X                           INTEGER,
X                       tslineSesDir
X                           INTEGER,
X                       tslineSesAddr
X                           IpAddress,
X                       tslineSesName
X                           DisplayString,
X                       tslineSesCur
X                           INTEGER,
X                       tslineSesIdle
X                           INTEGER
X                   }
X
X
X          -- The following section describes the components of the
X          -- table.
X
X               tslineSesType OBJECT-TYPE
X                   SYNTAX  INTEGER {
X                        unknown(1),
X                        pad(2),
X                        stream(3),
X                        rlogin(4),
X                        telnet(5),
X                        tcp(6),
X                        lat(7),
X                        mop(8),
X                        slip(9),
X                        xremote(10)
X                   }
X                   ACCESS  read-only
X                   STATUS  mandatory
X
X
X
X
X
X          -- cisco MIB                                         [Page 69]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   DESCRIPTION
X                           "Type of session."
X                   ::= { ltsLineSessionEntry 1 }
X
X               tslineSesDir OBJECT-TYPE
X                   SYNTAX  INTEGER {
X                        unknown(1),
X                        incoming(2),
X                        outgoing(3)
X                   }
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Direction of session."
X                   ::= { ltsLineSessionEntry 2 }
X
X               tslineSesAddr OBJECT-TYPE
X                   SYNTAX  IpAddress
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Remote host address of session. [What about
X                           PAD connections?]"
X                   ::= { ltsLineSessionEntry 3 }
X
X               tslineSesName OBJECT-TYPE
X                   SYNTAX  DisplayString
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Remote host name of session."
X                   ::= { ltsLineSessionEntry 4 }
X
X               tslineSesCur OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Boolean whether session is the currently
X                           active one."
X                   ::= { ltsLineSessionEntry 5 }
X
X               tslineSesIdle OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X
X
X
X
X
X          -- cisco MIB                                         [Page 70]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Time in seconds session has been idle."
X                   ::= { ltsLineSessionEntry 6 }
X
X               -- End of table
X
X
X               tsMsgTtyLine OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-write
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "tty line to send the message to. -1 will
X                           send it to all tty lines"
X                   ::= { lts 4 }
X
X               tsMsgIntervaltim OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-write
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Interval between reissuing message in
X                           milliseconds. Minimum non-zero setting is
X                           10000. 0 will cause the routine to choose its
X                           own intervals becoming more frequent as
X                           MessageDuration gets close to expiring. 2hr,
X                           1hr, 30min, 5min, 1min"
X                   ::= { lts 5 }
X
X               tsMsgDuration OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-write
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Length of time to reissue message in
X                           milliseconds. Minimum non-zero setting is
X                           10000. A setting of 0 will not repeat the
X                           message."
X                   ::= { lts 6 }
X
X               tsMsgText OBJECT-TYPE
X                   SYNTAX  DisplayString
X                   ACCESS  read-write
X                   STATUS  mandatory
X
X
X
X
X
X          -- cisco MIB                                         [Page 71]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   DESCRIPTION
X                           "Up to 256 characters that will make up the
X                           message"
X                   ::= { lts 7 }
X
X               tsMsgTmpBanner OBJECT-TYPE
X                   SYNTAX  INTEGER {
X                        no(1),
X                        additive(2)
X                   }
X                   ACCESS  read-write
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Should the message be used as a temporary
X                           banner. 1 - No. 2 - In addition to the normal
X                           banner"
X                   ::= { lts 8 }
X
X               tsMsgSend OBJECT-TYPE
X                   SYNTAX  INTEGER {
X                        nothing(1),
X                        reload(2),
X                        messagedone(3),
X                        abort(4)
X                   }
X                   ACCESS  read-write
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Sends the message. The value determines what
X                           to do after the message has completed."
X                   ::= { lts 9 }
X
X
X               -- Local cisco Flash Group
X
X          -- This group is present in all products which contain flash"
X
X               flashSize OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total Size in Octets of Flash memory"
X                   ::= { lflash 1 }
X
X
X
X
X
X
X          -- cisco MIB                                         [Page 72]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X               flashFree OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Unused Size in Octets of Flash memory"
X                   ::= { lflash 2 }
X
X               flashcontoller OBJECT-TYPE
X                   SYNTAX  DisplayString
X                   ACCESS  write-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "flash contoller"
X                   ::= { lflash 3 }
X
X               flashcard OBJECT-TYPE
X                   SYNTAX  DisplayString
X                   ACCESS  write-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "flash card"
X                   ::= { lflash 4 }
X
X               flashVPP OBJECT-TYPE
X                   SYNTAX  INTEGER {
X                        installed(1),
X                        missing(2)
X                   }
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "State of the VPP DIP"
X                   ::= { lflash 5 }
X
X               flashErase OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  write-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Request to erase flash memory"
X                   ::= { lflash 6 }
X
X               flashEraseTime OBJECT-TYPE
X                   SYNTAX  TimeTicks
X
X
X
X
X
X          -- cisco MIB                                         [Page 73]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Last time the flash was erased"
X                   ::= { lflash 7 }
X
X               flashEraseStatus OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Status of current or last flash erasing"
X                   ::= { lflash 8 }
X
X               flashToNet OBJECT-TYPE
X                   SYNTAX  DisplayString
X                   ACCESS  write-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Write flash entry to tftp server. Value
X                           should be the name of the flash entry to
X                           send. Instance is the IP address of the tftp
X                           host."
X                   ::= { lflash 9 }
X
X               flashToNetTime OBJECT-TYPE
X                   SYNTAX  TimeTicks
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Last time a copy from the net to the flash
X                           took place"
X                   ::= { lflash 10 }
X
X               flashToNetStatus OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Status of current or last flash to net
X                           transfer"
X                   ::= { lflash 11 }
X
X               netToFlash OBJECT-TYPE
X                   SYNTAX  DisplayString
X
X
X
X
X
X          -- cisco MIB                                         [Page 74]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   ACCESS  write-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Write flash entry from tftp server. Value
X                           should be the name of the flash entry to
X                           write. Instance is the IP address of the tftp
X                           host."
X                   ::= { lflash 12 }
X
X               netToFlashTime OBJECT-TYPE
X                   SYNTAX  TimeTicks
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Last time a copy from the net to the flash
X                           took place"
X                   ::= { lflash 13 }
X
X               netToFlashStatus OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Status of current or last net to flash
X                           transfer"
X                   ::= { lflash 14 }
X
X               flashStatus OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Status of the availablity of flash"
X                   ::= { lflash 15 }
X
X               flashEntries OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Number of entries in the flash directory"
X                   ::= { lflash 16 }
X
X
X               -- Local Flash file Table
X
X
X
X
X
X          -- cisco MIB                                         [Page 75]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X          -- This group contains information on a per file basis
X
X               lflashFileDirTable OBJECT-TYPE
X                   SYNTAX  SEQUENCE OF LFlashFileDirEntry
X                   ACCESS  not-accessible
X                   STATUS  mandatory
X                   DESCRIPTION
X                            " A list of flash file entries."
X                   ::= { lflash 17 }
X
X               lflashFileDirEntry OBJECT-TYPE
X                   SYNTAX LFlashFileDirEntry
X                   ACCESS  not-accessible
X                   STATUS  mandatory
X                   DESCRIPTION
X                            "A collection of flash eprom objects"
X                   INDEX { flashEntries }
X               ::= { lflashFileDirTable 1 }
X
X               LFlashFileDirEntry ::=
X                   SEQUENCE {
X                       flashDirName
X                           DisplayString,
X                       flashDirSize
X                           INTEGER,
X                       flashDirStatus
X                           INTEGER
X                   }
X
X
X          -- The following section describes the components of the
X          -- table.
X
X               flashDirName OBJECT-TYPE
X                   SYNTAX  DisplayString
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Name associated with the flash entry"
X                   ::= { lflashFileDirEntry 1 }
X
X               flashDirSize OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X
X
X
X
X
X          -- cisco MIB                                         [Page 76]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   DESCRIPTION
X                           "Size in Octets of a flash entry"
X                   ::= { lflashFileDirEntry 2 }
X
X               flashDirStatus OBJECT-TYPE
X                   SYNTAX  INTEGER {
X                        valid(1),
X                        deleted(2)
X                   }
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Indicates the status of the entry"
X                   ::= { lflashFileDirEntry 3 }
X
X               -- End of table
X
X
X
X               -- Temporary Variable Section
X
X          -- This section is equivalent to the experimental
X          -- space defined by the SMI. It contains variables
X          -- that are useful to have but are beyond cisco's
X          -- ability to control and maintain. This section can
X          -- change from release to release without warning.
X          -- This document controls what is contained here for
X          -- this version.
X
X
X          -- Temporary DECNET Section
X
X          -- This group is present in all router based products.
X
X               dnForward OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of DECNET packets forwarded."
X                   ::= { decnet 1 }
X
X               dnReceived OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X
X
X
X
X
X          -- cisco MIB                                         [Page 77]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Count of total DECNET packets received."
X                   ::= { decnet 2 }
X
X               dnFormaterr OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total number of DECNET packets received with
X                           header errors."
X                   ::= { decnet 3 }
X
X               dnNotgateway OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total number of packets received while not
X                           routing."
X                   ::= { decnet 4 }
X
X               dnNotimp OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total number of unknown control packets
X                           received."
X                   ::= { decnet 5 }
X
X               dnHellos OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total number of Hellos received."
X                   ::= { decnet 6 }
X
X               dnBadhello OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X
X
X
X
X
X          -- cisco MIB                                         [Page 78]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                           "Total number of received bad Hellos."
X                   ::= { decnet 7 }
X
X               dnNotlong OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total number of received packets not in long
X                           format."
X                   ::= { decnet 8 }
X
X               dnDatas OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total number of received data packets."
X                   ::= { decnet 9 }
X
X               dnBigaddr OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total number of too large addresses."
X                   ::= { decnet 10 }
X
X               dnNoroute OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total number of packets dropped due to no
X                           route present."
X                   ::= { decnet 11 }
X
X               dnNoencap OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total number of packets dropped due to
X                           output encapsulation failure."
X                   ::= { decnet 12 }
X
X
X
X
X
X          -- cisco MIB                                         [Page 79]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X               dnLevel1s OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total number of Level 1 routing packets
X                           received."
X                   ::= { decnet 13 }
X
X               dnBadlevel1 OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total number of bad Level 1 routing packets
X                           received."
X                   ::= { decnet 14 }
X
X               dnToomanyhops OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total number of packets received which
X                           visited too many nodes."
X                   ::= { decnet 15 }
X
X               dnHellosent OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total number of Hellos output."
X                   ::= { decnet 16 }
X
X               dnLevel1sent OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total number of Level 1 routing packets
X                           sent."
X                   ::= { decnet 17 }
X
X               dnNomemory OBJECT-TYPE
X
X
X
X
X
X          -- cisco MIB                                         [Page 80]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total number of memory requests denied."
X                   ::= { decnet 18 }
X
X               dnOtherhello OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total number of Hellos received from another
X                           area."
X                   ::= { decnet 19 }
X
X               dnOtherlevel1 OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total number of Level 1 routing packets
X                           received from another area."
X                   ::= { decnet 20 }
X
X               dnLevel2s OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total number of Level 2 routing packets
X                           received."
X                   ::= { decnet 21 }
X
X               dnLevel2sent OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total number of Level 2 routing packets
X                           sent."
X                   ::= { decnet 22 }
X
X               dnNovector OBJECT-TYPE
X                   SYNTAX  INTEGER
X
X
X
X
X
X          -- cisco MIB                                         [Page 81]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total number of missing routing vectors."
X                   ::= { decnet 23 }
X
X               dnOtherlevel2 OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total number of received Level 2 routing
X                           packets from another area."
X                   ::= { decnet 24 }
X
X               dnNoaccess OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total number of packets dropped due to
X                           access control failure."
X                   ::= { decnet 25 }
X
X               dnAreaTable OBJECT-TYPE
X                   SYNTAX  SEQUENCE OF DnAreaTableEntry
X                   ACCESS  not-accessible
X                   STATUS  mandatory
X                   DESCRIPTION
X                            "DECNET area routing table"
X                   ::= { decnet 26 }
X
X               dnAreaTableEntry OBJECT-TYPE
X                   SYNTAX DnAreaTableEntry
X                   ACCESS  not-accessible
X                   STATUS  mandatory
X                   DESCRIPTION
X                            "DECNET area routing table"
X                   INDEX { dnArea }
X               ::= { dnAreaTable 1 }
X
X               DnAreaTableEntry ::=
X                   SEQUENCE {
X                       dnArea
X                           INTEGER,
X
X
X
X
X
X          -- cisco MIB                                         [Page 82]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                       dnACost
X                           INTEGER,
X                       dnAHop
X                           INTEGER,
X                       dnAIfIndex
X                           INTEGER,
X                       dnANextHop
X                           OCTET STRING,
X                       dnAAge
X                           INTEGER,
X                       dnAPrio
X                           INTEGER
X                   }
X
X
X          -- The following section describes the components of the
X          -- table.
X
X               dnArea OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "DECNet area from the area table."
X                   ::= { dnAreaTableEntry 1 }
X
X               dnACost OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Cost of area in the area table."
X                   ::= { dnAreaTableEntry 2 }
X
X               dnAHop OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Number of hops to area in the area table."
X                   ::= { dnAreaTableEntry 3 }
X
X               dnAIfIndex OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X
X
X
X
X
X          -- cisco MIB                                         [Page 83]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Index of interface to the next hop address
X                           to the area. 0 denotes self."
X                   ::= { dnAreaTableEntry 4 }
X
X               dnANextHop OBJECT-TYPE
X                   SYNTAX  OCTET STRING
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Next hop DECNet address."
X                   ::= { dnAreaTableEntry 5 }
X
X               dnAAge OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Age in seconds of area route."
X                   ::= { dnAreaTableEntry 6 }
X
X               dnAPrio OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Priority of next hop router for area route."
X                   ::= { dnAreaTableEntry 7 }
X
X               -- End of table
X
X
X               dnHostTable OBJECT-TYPE
X                   SYNTAX  SEQUENCE OF DnHostTableEntry
X                   ACCESS  not-accessible
X                   STATUS  mandatory
X                   DESCRIPTION
X                            "DECNET routing table"
X                   ::= { decnet 27 }
X
X               dnHostTableEntry OBJECT-TYPE
X                   SYNTAX DnHostTableEntry
X                   ACCESS  not-accessible
X                   STATUS  mandatory
X
X
X
X
X
X          -- cisco MIB                                         [Page 84]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   DESCRIPTION
X                            "DECNET routing table"
X                   INDEX { INTEGER, INTEGER }
X               ::= { dnHostTable 1 }
X
X               DnHostTableEntry ::=
X                   SEQUENCE {
X                       dnHost
X                           INTEGER,
X                       dnHCost
X                           INTEGER,
X                       dnHHop
X                           INTEGER,
X                       dnHIfIndex
X                           INTEGER,
X                       dnHNextHop
X                           OCTET STRING,
X                       dnHAge
X                           INTEGER,
X                       dnHPrio
X                           INTEGER
X                   }
X
X
X          -- The following section describes the components of the
X          -- table.
X
X               dnHost OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "DECNet node address from the routing table."
X                   ::= { dnHostTableEntry 1 }
X
X               dnHCost OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Cost of path to node in the routing table."
X                   ::= { dnHostTableEntry 2 }
X
X               dnHHop OBJECT-TYPE
X                   SYNTAX  INTEGER
X
X
X
X
X
X          -- cisco MIB                                         [Page 85]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Number of hops to node in the routing
X                           table."
X                   ::= { dnHostTableEntry 3 }
X
X               dnHIfIndex OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Index of interface to the next hop address
X                           to the node. 0 denotes self."
X                   ::= { dnHostTableEntry 4 }
X
X               dnHNextHop OBJECT-TYPE
X                   SYNTAX  OCTET STRING
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Next hop DECNet address."
X                   ::= { dnHostTableEntry 5 }
X
X               dnHAge OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Age in seconds of route to node."
X                   ::= { dnHostTableEntry 6 }
X
X               dnHPrio OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Priority of next hop router for node."
X                   ::= { dnHostTableEntry 7 }
X
X               -- End of table
X
X
X               dnIfTable OBJECT-TYPE
X                   SYNTAX  SEQUENCE OF DnIfTableEntry
X
X
X
X
X
X          -- cisco MIB                                         [Page 86]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   ACCESS  not-accessible
X                   STATUS  mandatory
X                   DESCRIPTION
X                            "DECNET interface table"
X                   ::= { decnet 28 }
X
X               dnIfTableEntry OBJECT-TYPE
X                   SYNTAX DnIfTableEntry
X                   ACCESS  not-accessible
X                   STATUS  mandatory
X                   DESCRIPTION
X                            "DECNET interface table"
X                   INDEX { ifIndex }
X               ::= { dnIfTable 1 }
X
X               DnIfTableEntry ::=
X                   SEQUENCE {
X                       dnIfCost
X                           INTEGER
X                   }
X
X
X          -- The following section describes the components of the
X          -- table.
X
X               dnIfCost OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Cost of this interface."
X                   ::= { dnIfTableEntry 1 }
X
X               -- End of table
X
X
X
X               -- Temporary XNS Section
X
X          -- This group is present in all router based products.
X
X               xnsInput OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X
X
X
X
X
X          -- cisco MIB                                         [Page 87]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   DESCRIPTION
X                           "Total input count of number of XNS packets."
X                   ::= { xns 1 }
X
X               xnsLocal OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of XNS input packets for this
X                           host."
X                   ::= { xns 2 }
X
X               xnsBcastin OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of XNS input broadcast
X                           packets."
X                   ::= { xns 3 }
X
X               xnsForward OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of XNS packets
X                           forwarded."
X                   ::= { xns 4 }
X
X               xnsBcastout OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of XNS output
X                           broadcast packets."
X                   ::= { xns 5 }
X
X               xnsErrin OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X
X
X
X
X
X          -- cisco MIB                                         [Page 88]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                           "Total count of number of XNS Error input
X                           packets."
X                   ::= { xns 6 }
X
X               xnsErrout OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of XNS Error output
X                           packets."
X                   ::= { xns 7 }
X
X               xnsFormerr OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of XNS input packets
X                           with header errors."
X                   ::= { xns 8 }
X
X               xnsChksum OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of XNS input packets
X                           with checksum errors."
X                   ::= { xns 9 }
X
X               xnsNotgate OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of XNS input packets
X                           received while not routing."
X                   ::= { xns 10 }
X
X               xnsHopcnt OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X
X
X
X
X
X          -- cisco MIB                                         [Page 89]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                           "Total count of number of XNS input packets
X                           that have exceeded the maximum hop count."
X                   ::= { xns 11 }
X
X               xnsNoroute OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of XNS packets dropped
X                           due to no route."
X                   ::= { xns 12 }
X
X               xnsNoencap OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of XNS packets dropped
X                           due to output encapsulation failure."
X                   ::= { xns 13 }
X
X               xnsOutput OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of XNS output
X                           packets."
X                   ::= { xns 14 }
X
X               xnsInmult OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of XNS input multicast
X                           packets."
X                   ::= { xns 15 }
X
X               xnsUnknown OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X
X
X
X
X
X          -- cisco MIB                                         [Page 90]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                           "Total count of number of unknown XNS input
X                           packets."
X                   ::= { xns 16 }
X
X               xnsFwdbrd OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of XNS broadcast
X                           packets forwarded."
X                   ::= { xns 17 }
X
X               xnsEchoreqin OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of XNS Echo request
X                           packets received."
X                   ::= { xns 18 }
X
X               xnsEchoreqout OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of XNS Echo request
X                           packets sent."
X                   ::= { xns 19 }
X
X               xnsEchorepin OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of XNS Echo reply
X                           packets received."
X                   ::= { xns 20 }
X
X               xnsEchorepout OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X
X
X
X
X
X          -- cisco MIB                                         [Page 91]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                           "Total count of number of XNS Echo reply
X                           packets sent."
X                   ::= { xns 21 }
X
X
X               -- Temporary AppleTalk Section
X
X          -- This group is present in all router based products.
X
X               atInput OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total input count of number of AppleTalk
X                           packets."
X                   ::= { appletalk 1 }
X
X               atLocal OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of AppleTalk input packets for
X                           this host."
X                   ::= { appletalk 2 }
X
X               atBcastin OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of AppleTalk input
X                           broadcast packets."
X                   ::= { appletalk 3 }
X
X               atForward OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of AppleTalk packets
X                           forwarded."
X                   ::= { appletalk 4 }
X
X
X
X
X
X
X          -- cisco MIB                                         [Page 92]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X               atBcastout OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of AppleTalk output
X                           broadcast packets."
X                   ::= { appletalk 5 }
X
X               atChksum OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of AppleTalk input
X                           packets with checksum erors."
X                   ::= { appletalk 7 }
X
X               atNotgate OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of AppleTalk input packets
X                           received while not routing."
X                   ::= { appletalk 8 }
X
X               atHopcnt OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of AppleTalk input
X                           packets that have exceeded the maximum hop
X                           count."
X                   ::= { appletalk 9 }
X
X               atNoaccess OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total number of AppleTalk packets dropped
X                           due to access control."
X                   ::= { appletalk 10 }
X
X
X
X
X
X          -- cisco MIB                                         [Page 93]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X               atNoroute OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of AppleTalk packets
X                           dropped due to no route."
X                   ::= { appletalk 11 }
X
X               atNoencap OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of AppleTalk packets
X                           dropped due to output encapsulation failure."
X                   ::= { appletalk 12 }
X
X               atOutput OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of AppleTalk output
X                           packets."
X                   ::= { appletalk 13 }
X
X               atInmult OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of AppleTalk input
X                           multicast packets."
X                   ::= { appletalk 14 }
X
X               atRtmpin OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of AppleTalk RTMP
X                           packets received."
X                   ::= { appletalk 15 }
X
X
X
X
X
X
X          -- cisco MIB                                         [Page 94]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X               atRtmpout OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of AppleTalk RTMP
X                           packets sent."
X                   ::= { appletalk 16 }
X
X               atNbpin OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of AppleTalk NBP
X                           packets received."
X                   ::= { appletalk 17 }
X
X               atNbpout OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of AppleTalk NBP
X                           packets sent."
X                   ::= { appletalk 18 }
X
X               atAtp OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of AppleTalk ATP
X                           packets received."
X                   ::= { appletalk 19 }
X
X               atZipin OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of AppleTalk ZIP
X                           packets received."
X                   ::= { appletalk 20 }
X
X
X
X
X
X
X          -- cisco MIB                                         [Page 95]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X               atZipout OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of AppleTalk ZIP
X                           packets sent."
X                   ::= { appletalk 21 }
X
X               atEcho OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of AppleTalk Echo
X                           packets received."
X                   ::= { appletalk 22 }
X
X               atEchoill OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of illegal AppleTalk
X                           Echo packets received."
X                   ::= { appletalk 23 }
X
X               atDdpshort OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of short AppleTalk DDP
X                           packets received."
X                   ::= { appletalk 24 }
X
X               atDdplong OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of long AppleTalk DDP
X                           packets received."
X                   ::= { appletalk 25 }
X
X
X
X
X
X
X          -- cisco MIB                                         [Page 96]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X               atDdpbad OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of illegal sized
X                           AppleTalk DDP packets received."
X                   ::= { appletalk 26 }
X
X               atNobuffer OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of AppleTalk packets
X                           lost due to no memory."
X                   ::= { appletalk 27 }
X
X               atArpreq OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of input AppleTalk ARP
X                           request packets."
X                   ::= { appletalk 28 }
X
X               atArpreply OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of AppleTalk ARP reply
X                           packets output."
X                   ::= { appletalk 29 }
X
X               atArpprobe OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of input AppleTalk ARP
X                           probe packets."
X                   ::= { appletalk 30 }
X
X
X
X
X
X
X          -- cisco MIB                                         [Page 97]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X               atUnknown OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of unknown AppleTalk
X                           input packets."
X                   ::= { appletalk 31 }
X
X
X               -- Temporary Novell Section
X
X          -- This group is present in all router based products.
X
X               novellInput OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total input count of number of NOVELL
X                           packets."
X                   ::= { novell 1 }
X
X               novellBcastin OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of NOVELL input
X                           broadcast packets."
X                   ::= { novell 2 }
X
X               novellForward OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of NOVELL packets
X                           forwarded."
X                   ::= { novell 3 }
X
X               novellBcastout OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X
X
X
X
X
X          -- cisco MIB                                         [Page 98]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   DESCRIPTION
X                           "Total count of number of NOVELL output
X                           broadcast packets."
X                   ::= { novell 4 }
X
X               novellFormerr OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of NOVELL input
X                           packets with header errors."
X                   ::= { novell 5 }
X
X               novellChksum OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of NOVELL input
X                           packets with checksum erors."
X                   ::= { novell 6 }
X
X               novellHopcnt OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of NOVELL input
X                           packets that have exceeded the maximum hop
X                           count."
X                   ::= { novell 7 }
X
X               novellNoroute OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of NOVELL packets
X                           dropped due to no route."
X                   ::= { novell 8 }
X
X               novellNoencap OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X
X
X
X
X
X          -- cisco MIB                                         [Page 99]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of NOVELL packets
X                           dropped due to output encapsulation failure."
X                   ::= { novell 9 }
X
X               novellOutput OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of NOVELL output
X                           packets."
X                   ::= { novell 10 }
X
X               novellInmult OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of NOVELL input
X                           multicast packets."
X                   ::= { novell 11 }
X
X               novellLocal OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of NOVELL input packets for this
X                           host."
X                   ::= { novell 12 }
X
X               novellUnknown OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total count of number of unknown NOVELL
X                           input packets."
X                   ::= { novell 13 }
X
X               novellSapreqin OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X
X
X
X
X
X          -- cisco MIB                                        [Page 100]
X--
X
END_OF_FILE
  if test 59063 -ne `wc -c <'nocol-3.0/src/cmu-snmp/cisco.mib91.C'`; then
    echo shar: \"'nocol-3.0/src/cmu-snmp/cisco.mib91.C'\" unpacked with wrong size!
  elif test -f 'nocol-3.0/src/cmu-snmp/cisco.mib91.A' && test -f 'nocol-3.0/src/cmu-snmp/cisco.mib91.B' && test -f 'nocol-3.0/src/cmu-snmp/cisco.mib91.D'; then
    echo shar: Combining  \"'nocol-3.0/src/cmu-snmp/cisco.mib91'\" \(190589 characters\)
    cat 'nocol-3.0/src/cmu-snmp/cisco.mib91.A' 'nocol-3.0/src/cmu-snmp/cisco.mib91.B' 'nocol-3.0/src/cmu-snmp/cisco.mib91.C' 'nocol-3.0/src/cmu-snmp/cisco.mib91.D' > 'nocol-3.0/src/cmu-snmp/cisco.mib91'
    if test 190589 -ne `wc -c <'nocol-3.0/src/cmu-snmp/cisco.mib91'`; then
      echo shar: \"'nocol-3.0/src/cmu-snmp/cisco.mib91'\" combined with wrong size!
    else
      rm nocol-3.0/src/cmu-snmp/cisco.mib91.A nocol-3.0/src/cmu-snmp/cisco.mib91.B nocol-3.0/src/cmu-snmp/cisco.mib91.C nocol-3.0/src/cmu-snmp/cisco.mib91.D
    fi
  fi
  # end of 'nocol-3.0/src/cmu-snmp/cisco.mib91.C'
fi
if test -f 'nocol-3.0/src/support/mping/mping.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'nocol-3.0/src/support/mping/mping.c'\"
else
  echo shar: Extracting \"'nocol-3.0/src/support/mping/mping.c'\" \(13960 characters\)
  sed "s/^X//" >'nocol-3.0/src/support/mping/mping.c' <<'END_OF_FILE'
X/*
X * mping -- parallel ping
X */
X
X#include <stdio.h>
X#include <sys/time.h>
X#include <signal.h>
X#include <sys/types.h>
X#include <sys/socket.h>
X#include <netinet/in_systm.h>
X#include <netinet/in.h>
X#include <netinet/ip.h>
X#include <netinet/ip_icmp.h>
X#include <arpa/inet.h>
X#include <stdlib.h>
X#include <netdb.h>
X#include <string.h>
X
X/* Design
X *
X * This reads a configuration file (or stdin) and gets a list of nodes
X * to ping, together with options for packet size and retry count.
X *
X * It pings all these in parallel until the entire list is satisfied
X * or all retry counts are exhausted.
X *
X * We do this by setting an interval timer for the basic inter-packet
X * interval and keeping a process clock.  Every time a system is ready
X * to be sent a packet, we wait for the next process clock interval
X * (to avoid overloading the network).
X */
X
Xstruct plist {
X	struct plist*	next;
X	char		name[32];
X	struct sockaddr_in target;
X	unsigned long	nextSend;	/* virtual clock time for next send */
X	int		timeOut;	/* inter-packet transmit interval */
X	int		numRetries;	/* # of retries to make */
X	int		numTried;	/* # sent on this ping */
X	int		numToSend;	/* # of successful returns req'd */
X	int		numSent;	/* # of packets sent */
X	int		numReceived;	/* # of responses received */
X	int		dataPattern;	/* what to fill packet with */
X	int		status;
X#define STS_WAITING	0x0		/* waiting for response or next turn */
X#define STS_DONE	0x1		/* success or timeout */
X#define STS_READY	0x2		/* waiting to ping */
X#define STS_ACTIVE	0x3		/* pinging */
X	int		pktSize;
X	char*		packet;
X	unsigned long	pktTimes;	/* total microseconds of packet RTT */ };
X
X/* This defines, in milliseconds, the basic inter-packet interval we
X * want to maintain for the parallel pings.  This ignores round-off
X * problems with the system clock.
X */
X#define TICK	50			/* milliseconds per TICK */
X#define INV_TICK	(1000/TICK)	/* TICKs per second */
X#define RETRY_TIME	(1000/TICK)	/* 1 second retry interval */
Xchar*	createPacket();
X
X/* Defaults for optional arguments */
Xint	dflt_size	=   56;	/* 56 bytes of ICMP packet data */
Xint	dflt_retries	=    5;	/* make 5 attempts before quitting */
Xint	dflt_toSend	=    1;	/* quit on 1 successful return */
Xint	dflt_pattern	=    0;	/* packet data pattern */
Xint	dflt_timeOut	= 1000;	/* in milliseconds */
X
X/* Minima for optional arguments */
Xint	min_data_size	= sizeof (struct timeval) + sizeof(short);
Xint	min_timeOut	= 100;	/* milliseconds */
X
Xstruct plist*	sendq;		/* targets ready to send */
Xstruct plist*	plist_array;	/* all configured targets */
Xint	num_plist;		/* count of configured targets */
Xint	siz_plist;		/* count of allocated plist structs */
Xint	num_active;		/* number of targets still active */
X
X/* The socket handle */
Xint	pingSocket;
Xint	verbose;
Xint	icmp_ident;
X
X#define HUNK	64
X#define FOREACHPLIST(P,I) \
X	for((P)=plist_array,(I)=0; (I)<num_plist; (I)++,(P)++)
X
Xextern int	errno;
Xextern int	sys_nerr;
Xextern char*	sys_errlist[];
X#define STRERROR	(errno>=sys_nerr ? "unknown" : sys_errlist[errno])
X
X/* return pointer to newly-allocated plist */
Xstatic struct plist*
Xnew_plist() {
X	unsigned nbytes;
X	unsigned oldsize;
X	if (num_plist >= siz_plist) {
X		oldsize = siz_plist;
X		siz_plist += HUNK;
X		nbytes = siz_plist * sizeof (struct plist);
X		plist_array = (struct plist*) (plist_array
X			? realloc (plist_array, nbytes)
X			: malloc (nbytes));
X
X		/* clear the new space */
X		bzero ((char*)&plist_array[oldsize], HUNK*sizeof(struct plist));
X	}
X	return &plist_array[num_plist++];
X}
X
Xadd_plist_byTime (head, item)
Xstruct plist** head;
Xstruct plist* item;
X{
X	register struct plist** q;
X	register struct plist* p;
X
X	for (q = head; p = *q; q = & (*q)->next)
X		if (p->nextSend > item->nextSend)
X			break;
X
X	item->next = p;
X	*q = item;
X}
X
Xstruct plist*
Xget_plist (q)
Xstruct plist**q;
X{
X	struct plist* p;
X	if ((p = *q) != 0) {
X		*q = p->next;
X		p->next = 0;
X	}
X	return p;
X}
X	
X
XreadConfig (stream)
XFILE*	stream;
X{
X	char buf[512];
X	char *vec[10];
X	char *ovec[6];
X	struct plist* p;
X	int nf, no;
X
X	/* name address size retries */
X	while (fgets(buf, sizeof buf, stream)) {
X		if (buf[0] == '#' || buf[0]== '\n')
X			continue;
X		nf = strsplit (buf, vec, 10, 0);
X		if (nf < 2)
X			continue;
X		p = new_plist();
X		strncpy (p->name, vec[0], sizeof p->name);
X
X		p->pktSize = dflt_size;
X		p->numRetries = dflt_retries;
X		p->dataPattern = dflt_pattern;
X		p->numToSend = dflt_toSend;
X		p->timeOut = dflt_timeOut/TICK;
X		p->numTried = 0;
X		if (nf >= 3) {
X			bzero (ovec, sizeof ovec);
X			no = strsplit (vec[2], ovec, 6, ",");
X			if (ovec[0]) p->pktSize = atoi(ovec[0]);
X			if (p->pktSize < min_data_size)
X				p->pktSize = min_data_size;
X
X			if (ovec[1]) p->dataPattern = strtol (ovec[1],0,16);
X			if (ovec[2]) p->numToSend = atoi (ovec[2]);
X			if (p->numToSend <= 0)
X				p->numToSend = dflt_toSend;
X
X			if (ovec[3]) p->numRetries = atoi (ovec[3]);
X			if (p->numRetries <= 0)
X				p->numRetries = dflt_retries;
X
X			if (ovec[4]) p->timeOut = atoi (ovec[4])/TICK;
X			if (p->timeOut <= min_timeOut/TICK)
X				p->timeOut = min_timeOut/TICK;
X		}
X		p->packet = (char*)createPacket (p->pktSize, p->dataPattern);
X		p->target.sin_family = AF_INET;
X
X		/* If the 2nd argument isn't an address, look it up.
X		 * clone the entry for each address.
X		 */
X		p->target.sin_addr.s_addr = inet_addr (vec[1]);
X		if (p->target.sin_addr.s_addr == 0xffffffff) {
X			struct hostent *hp;
X			struct plist* p2;
X			char** addrp;
X
X			if ((hp = gethostbyname (vec[1])) == 0)
X				continue;
X
X			addrp = hp->h_addr_list;
X			p2 = p;
X			while (*addrp) {
X				if (p2 == 0) {
X					p2 = new_plist();
X					*p2 = *p;
X				}
X				bcopy (*addrp, (caddr_t)&p->target.sin_addr,
X					hp->h_length);
X				p2 = 0;
X				addrp++;
X			}
X		}
X	}
X}
X
X
X/* Dump out the config file for debugging */
Xvoid
XprintConfig ()
X{
X	register struct plist* p;
X	register i;
X
X	FOREACHPLIST(p,i) {
X		printf ("plist[%d]: addr=%s; retry=%d; size=%d\n",
X			i, inet_ntoa(p->target.sin_addr),
X			p->numRetries, p->pktSize);
X	}
X}
X
X
X
X
Xstruct timeval clock_interval = { 0, TICK*1000 };
X
Xstatic unsigned long clock_value;
Xstatic void clockService()
X{
X	clock_value++;
X}
X
XstartTimer()
X{
X	struct itimerval tim;
X	signal (SIGALRM, clockService);
X
X	tim.it_interval = clock_interval;
X	tim.it_value = clock_interval;
X	setitimer (ITIMER_REAL, &tim, (int*)0);
X}
X
XstopTimer()
X{
X	struct timeval zero;
X	struct itimerval tim;
X
X	zero.tv_sec = 0;
X	zero.tv_usec = 0;
X	tim.it_interval = zero;
X	tim.it_value = zero;
X	setitimer (ITIMER_REAL, &tim, (int*)0);
X}
X
Xmain(argc, argv)
Xint	argc;
Xchar**	argv;
X{
X	FILE* configf = stdin;
X	struct plist* target;
X
X#define EQ(S)	(strcmp((S),*argv)==0)
X	for (argc--,argv++; argc > 0; argc--, argv++) {
X		if (EQ("-f")) {
X			configf = fopen(argv[1], "r");
X		}
X		if (EQ("-v")) {
X			verbose++;
X		}
X	}
X#undef EQ
X
X	/* Read configuration.  Allocate plist structures and everything
X	 * else necessary to ping all the targets.
X	 *
X	 * Cycle through the list pinging each one until satisfied or
X	 * retry limit exceeded.
X	 *
X	 * Print results to standard output.
X	 */
X	readConfig (configf);
X	pingSocket = initSocket();
X	startTimer();
X	readPause();
X	while (num_active > 0) {
X		if (sendq == 0) {
X			readPause();
X			continue;
X		}
X		target = get_plist(&sendq);
X		target->status = STS_ACTIVE;
X		sendPing (target, target-plist_array);
X	}
X	stopTimer();
X
X	printStatus();
X}
X
XsendPing (target, index)
Xstruct plist* target;
Xint	index;
X{
X	static lastSent;
X	int pktlen;
X	int i;
X
X	if (target->numTried >= target->numRetries
X	    || target->numReceived >= target->numToSend) {
X		target->status = STS_DONE;
X		return 0;
X	}
X
X	/* make sure at least 1 tick has elapsed since last packet
X	 * transmitted.
X	 */
X	while (clock_value <= lastSent)
X		readPause();
X
X	target->numSent++;
X	target->numTried++;
X	target->nextSend = clock_value + target->timeOut;
X	lastSent = clock_value;
X	
X	initPacket (target, index);
X	if (verbose) {
X		printf ("ping %-15s %d (%d/%d of %d/%d)\n",
X			inet_ntoa(target->target.sin_addr),
X			target->pktSize,
X			target->numTried, target->numRetries,
X			target->numSent, target->numReceived);
X	}
X	pktlen = target->pktSize + ICMP_MINLEN;
X	i = sendto (pingSocket, target->packet, pktlen, 0,
X			&target->target, sizeof (struct sockaddr));
X	if (i < 0) {
X		fprintf (stderr, "sendto: %s\n", STRERROR);
X		target->status = STS_DONE;
X	}
X	else
X		target->status = STS_WAITING;
X}
X
XreadPause()
X{
X	register struct plist* p;
X	register int i;
X	unsigned long old_clock = clock_value;
X	struct sockaddr_in from;
X	int fromlen ;
X	char pkt[4096];
X	int len = sizeof pkt;
X	fd_set fdmask;
X
X	/* This will block if nothing there */
X	for (;;) {
X		struct timeval timeout;
X		bzero (&fdmask, sizeof fdmask);
X		FD_SET(pingSocket, &fdmask);
X		timeout.tv_sec = 0; timeout.tv_usec = TICK*1000;
X		i = select (pingSocket+1,&fdmask,(int*)0,(int*)0,&timeout);
X		if (i > 0 && FD_ISSET(pingSocket, &fdmask)) {
X			fromlen = sizeof from;
X			i = recvfrom (pingSocket, pkt, len, 0, &from, &fromlen);
X			if (i < 0) {
X				fprintf ("recvfrom: %s\n", STRERROR);
X				break;
X			}
X			pr_pack (pkt, &from);
X		}
X		if (clock_value > old_clock)
X			break;
X	}
X
X	num_active = 0;
X	FOREACHPLIST(p,i) {
X		if (p->status == STS_DONE)
X			continue;
X		num_active++;
X		if (p->status == STS_WAITING && p->nextSend <= clock_value) {
X			p->status = STS_READY;
X			add_plist_byTime (&sendq, p);
X		}
X	}
X}
X
XprintStatus()
X{
X	register struct plist*p;
X	register i;
X	unsigned long rtt;
X
X	FOREACHPLIST (p,i) {
X		rtt = p->numReceived ? p->pktTimes/p->numReceived : 0;
X		printf ("%-24s %-15s %2d %2d %8lu\n", p->name,
X			inet_ntoa(p->target.sin_addr), p->numSent,
X			p->numReceived, rtt);
X	}
X}
X
X/* IP specific routines */
X
X
X/* The "size" argument here references the ICMP_DATA portion of the
X * packet.  We add to that the ICMP overhead.
X */
Xchar* createPacket (size)
Xint size;
X{
X	return malloc (size + ICMP_MINLEN);
X}
X
Xint initPacket (packet, i)
Xstruct plist* packet;
Xint	i;
X{
X	register struct icmp *icp = (struct icmp*) packet->packet;
X	u_short *usp;
X	struct timeval* tvp;
X	struct timezone tz;
X
X	icp->icmp_type = ICMP_ECHO;	
X	icp->icmp_code = 0;
X	icp->icmp_cksum = 0;
X	icp->icmp_seq = packet->numSent;
X
X	if (icmp_ident == 0)
X		icmp_ident = getpid() & 0xffff;
X	icp->icmp_id = icmp_ident;
X
X	/* fill packet with argument pattern */
X	memset (icp->icmp_data, packet->dataPattern, packet->pktSize);
X
X	tvp = (struct timeval*) icp->icmp_data;
X	gettimeofday (tvp, &tz);
X
X	/* store the index of this plist structure in the packet for
X	 * fast lookup when it comes back.
X	 */
X	usp = (u_short*) (icp->icmp_data + sizeof (struct timeval));
X	*usp = i;
X
X	icp->icmp_cksum = in_cksum ((u_short*)icp, packet->pktSize+ICMP_MINLEN);
X}
X
X/*
X *			I N _ C K S U M
X *
X * Checksum routine for Internet Protocol family headers (C Version)
X *
X */
Xin_cksum(addr, len)
Xu_short *addr;
Xint len;
X{
X	register int nleft = len;
X	register u_short *w = addr;
X	register int sum = 0;
X	u_short answer = 0;
X
X	/*
X	 *  Our algorithm is simple, using a 32 bit accumulator (sum),
X	 *  we add sequential 16 bit words to it, and at the end, fold
X	 *  back all the carry bits from the top 16 bits into the lower
X	 *  16 bits.
X	 */
X	while( nleft > 1 )  {
X		sum += *w++;
X		nleft -= 2;
X	}
X
X	/* mop up an odd byte, if necessary */
X	if( nleft == 1 ) {
X		*(u_char *)(&answer) = *(u_char *)w ;
X		sum += answer;
X	}
X
X	/*
X	 * add back carry outs from top 16 bits to low 16 bits
X	 */
X	sum = (sum >> 16) + (sum & 0xffff);	/* add hi 16 to low 16 */
X	sum += (sum >> 16);			/* add carry */
X	answer = ~sum;				/* truncate to 16 bits */
X	return (answer);
X}
X
X/*
X * 			T V S U B
X * 
X * Subtract 2 timeval structs:  out = out - in.
X * 
X * Out is assumed to be >= in.
X */
Xtvsub( out, in )
Xregister struct timeval *out, *in;
X{
X	if( (out->tv_usec -= in->tv_usec) < 0 )   {
X		out->tv_sec--;
X		out->tv_usec += 1000000;
X	}
X	out->tv_sec -= in->tv_sec;
X}
X
Xint
XinitSocket ()
X{
X	int s;
X	struct protoent* proto;
X
X	proto = (struct protoent*)getprotobyname("icmp");
X	s = socket (AF_INET, SOCK_RAW, proto->p_proto);
X	if (s < 0) {
X		fprintf (stderr, "Cannot create socket: %s\n", STRERROR);
X		exit (1);
X	}
X	return s;
X}
X
Xpr_pack (pkt, fromptr)
Xchar*	pkt;
Xstruct sockaddr_in *fromptr;
X{
X	struct icmp *icp;
X	struct ip * ipp;
X	register struct plist* p;
X	register int i;
X	struct timeval tv, *tvp;
X	struct timezone tz;
X	unsigned short *usp;
X	unsigned long rtt;
X
X	ipp = (struct ip*) pkt;
X	icp = (struct icmp*) (pkt + (ipp->ip_hl * 4));
X
X	/* discard stuff that's not ours */
X	if (icp->icmp_type != ICMP_ECHOREPLY || icp->icmp_id != icmp_ident) {
X		if (verbose)
X			printf ("%s -- %d,%d; not mine\n",
X				inet_ntoa(fromptr->sin_addr),
X						icp->icmp_type, icp->icmp_id);
X		return;
X	}
X
X	gettimeofday (&tv, &tz);
X	tvp = (struct timeval*)icp->icmp_data;
X	/* need to calculate RTT */
X	tvsub (&tv, tvp);
X	rtt = (tv.tv_sec * 1000000) + tv.tv_usec;
X
X	/* See if it contains a valid index */
X	usp = (u_short*)(icp->icmp_data + sizeof (struct timeval));
X	i = *usp;
X	if (i >= 0 && i < num_plist) {
X		p = &plist_array[i];
X		if (p->target.sin_addr.s_addr == fromptr->sin_addr.s_addr) {
X	 gotit:
X			p->numReceived++;
X			p->numTried = 0;
X			p->pktTimes += rtt;
X			if (p->numReceived >= p->numToSend)
X				p->status = STS_DONE;
X			return;
X		}
X	}
X
X	/* otherwise, walk through the list of eligibles looking
X	 * for a match.
X	 */
X	FOREACHPLIST(p,i) {
X		if (p->target.sin_addr.s_addr == fromptr->sin_addr.s_addr) {
X			goto gotit;
X		}
X	}
X	if (verbose) 
X		printf ("%s -- %d; not in list\n",
X			inet_ntoa(fromptr->sin_addr), icp->icmp_type);
X}
X
X/* A version of my strsplit function which uses the new
X * ANSI standard function 'strtok'.  This one doesn't
X * have the behavior of concatenating all remaining tokens
X * in the the last return when <nvec> is less than the
X * number of real <sep>-delimited fields.
X */
Xint
Xstrsplit (buf, vec, nvec, sep)
Xchar*	buf;
Xchar**	vec;
Xint	nvec;
Xchar*	sep;
X{
X	int n = 0;
X
X	if (sep == NULL) sep = " \t\r\n\f";
X
X	while (n < nvec) {
X		if ((vec[n] = strtok (buf, sep)) == NULL)
X			break;
X		if (n == 0) buf = NULL;
X		n++;
X	}
X
X	/* NULL-terminate pointer array if space permits */
X	if (n < nvec)
X		vec[n] = NULL;
X	return n;
X}
END_OF_FILE
  if test 13960 -ne `wc -c <'nocol-3.0/src/support/mping/mping.c'`; then
    echo shar: \"'nocol-3.0/src/support/mping/mping.c'\" unpacked with wrong size!
  fi
  # end of 'nocol-3.0/src/support/mping/mping.c'
fi
echo shar: End of archive 6 \(of 26\).
cp /dev/null ark6isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 26 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0
exit 0 # Just in case...
