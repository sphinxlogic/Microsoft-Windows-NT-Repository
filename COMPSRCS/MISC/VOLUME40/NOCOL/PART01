Newsgroups: comp.sources.misc
From: vikas@jvnc.net (Vikas Aggarwal)
Subject: v40i131:  nocol - Network Monitoring System, Part01/26
Message-ID: <csm-v40i131=nocol.214150@sparky.Sterling.COM>
X-Md4-Signature: 2008055822ac3adcce1b989d0da74919
Sender: kent@sparky.sterling.com (Kent Landfield)
Organization: Sterling Software
Date: Tue, 23 Nov 1993 03:44:55 GMT
Approved: kent@sparky.sterling.com

Submitted-by: vikas@jvnc.net (Vikas Aggarwal)
Posting-number: Volume 40, Issue 131
Archive-name: nocol/part01
Environment: INET, UNIX

NOCOL (Network Operation Center On-Line) is a network monitoring
package that runs on Unix platforms. It can monitor various network
variables such as ICMP reachability, nameservers, SNMP traps,  modem
line usage, appletalk & novell routes and services, BGP peers, etc.

The software consists of a number of monitoring agents that poll various
parameters (from any system) and put it into a common format.  All the
monitors have a common display and postprocessing interface (such as logging,
notification, etc.). The design also allows running just one set of
monitoring agents and *any* number of display agents, and all of the displays
see the same consistent set of data. Additionally, each event is assigned a
pre-determined severity which is gradually escalated, thus preventing false
alarms and a customized priority notification based on the severity. The
severity levels range from Critical thru Info.

The display uses UNIX 'curses' screen management and can thus run on a large
variety of terminals. The user running the display can select the minimum
display priority- only events above this minimum priority level are displayed.

To date, the various monitoring agents developed are:

	- IP ICMP monitor (using 'ping' or 'multiping')
	- OSI reachability monitor (using the OSI ping)
	- SNMP trap monitor
	- IP data throughput monitor
	- Nameserver (named) monitor
	- Monitor for usage of terminal server modem lines in use
	- Appletalk route monitor (for cisco routers)
	- Novell service monitor
	- BGP peer status (if not connected)
	- TCP port monitor
	
A PERL interface has been provided (jmwobus@mailbox.syr.edu) for 
developing additional monitors in the PERL programming language. It is
easy to add additional monitors for system load, etc.

Has been tested on Solaris2.2, SunOS4.1.1, Ultrix4.2. 

The software is available from 'ftp.jvnc.net' (128.121.50.2) under 
~ftp/pub/jvncnet-packages/nocol/nocol.tar.Z.

Please send a message to 'nocol-users-request@jvnc.net' to be added to the
'nocol-users' mailing list for updates and bug fixes. Mail comments to
'nocol-info@jvnc.net' and bugs to 'nocol-bugs@jvnc.net'.

The JvNCnet display monitor can be viewed by logging onto 'nocol.jvnc.net' 
as user 'nocol'.

	Vikas Aggarwal (vikas@jvnc.net)
	JvNCnet, GES
==================
#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# Contents:  nocol-3.0 nocol-3.0/src nocol-3.0/src/cmu-snmp
#   nocol-3.0/src/cmu-snmp/apps
#   nocol-3.0/src/cmu-snmp/apps/snmpnetstat nocol-3.0/src/cmu-snmp/bin
#   nocol-3.0/src/cmu-snmp/include nocol-3.0/src/cmu-snmp/lib
#   nocol-3.0/src/cmu-snmp/man nocol-3.0/src/cmu-snmp/man/snmptrapd.1
#   nocol-3.0/src/cmu-snmp/mib.txt.A nocol-3.0/src/cmu-snmp/snmplib
#   nocol-3.0/src/contrib nocol-3.0/src/doc nocol-3.0/src/eventselect
#   nocol-3.0/src/genmon nocol-3.0/src/include nocol-3.0/src/lib
#   nocol-3.0/src/netmon nocol-3.0/src/noclog nocol-3.0/src/nsmon
#   nocol-3.0/src/perlnocol nocol-3.0/src/pingmon
#   nocol-3.0/src/portmon nocol-3.0/src/support
#   nocol-3.0/src/support/mping nocol-3.0/src/support/multiping
#   nocol-3.0/src/tpmon nocol-3.0/src/trapmon nocol-3.0/src/utility
# Wrapped by kent@sparky on Tue Nov  9 22:22:12 1993
PATH=/bin:/usr/bin:/usr/ucb:/usr/local/bin:/usr/lbin:$PATH ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 1 (of 26)."'
if test ! -d 'nocol-3.0' ; then
    echo shar: Creating directory \"'nocol-3.0'\"
    mkdir 'nocol-3.0'
fi
if test ! -d 'nocol-3.0/src' ; then
    echo shar: Creating directory \"'nocol-3.0/src'\"
    mkdir 'nocol-3.0/src'
fi
if test ! -d 'nocol-3.0/src/cmu-snmp' ; then
    echo shar: Creating directory \"'nocol-3.0/src/cmu-snmp'\"
    mkdir 'nocol-3.0/src/cmu-snmp'
fi
if test ! -d 'nocol-3.0/src/cmu-snmp/apps' ; then
    echo shar: Creating directory \"'nocol-3.0/src/cmu-snmp/apps'\"
    mkdir 'nocol-3.0/src/cmu-snmp/apps'
fi
if test ! -d 'nocol-3.0/src/cmu-snmp/apps/snmpnetstat' ; then
    echo shar: Creating directory \"'nocol-3.0/src/cmu-snmp/apps/snmpnetstat'\"
    mkdir 'nocol-3.0/src/cmu-snmp/apps/snmpnetstat'
fi
if test ! -d 'nocol-3.0/src/cmu-snmp/bin' ; then
    echo shar: Creating directory \"'nocol-3.0/src/cmu-snmp/bin'\"
    mkdir 'nocol-3.0/src/cmu-snmp/bin'
fi
if test ! -d 'nocol-3.0/src/cmu-snmp/include' ; then
    echo shar: Creating directory \"'nocol-3.0/src/cmu-snmp/include'\"
    mkdir 'nocol-3.0/src/cmu-snmp/include'
fi
if test ! -d 'nocol-3.0/src/cmu-snmp/lib' ; then
    echo shar: Creating directory \"'nocol-3.0/src/cmu-snmp/lib'\"
    mkdir 'nocol-3.0/src/cmu-snmp/lib'
fi
if test ! -d 'nocol-3.0/src/cmu-snmp/man' ; then
    echo shar: Creating directory \"'nocol-3.0/src/cmu-snmp/man'\"
    mkdir 'nocol-3.0/src/cmu-snmp/man'
fi
if test -f 'nocol-3.0/src/cmu-snmp/man/snmptrapd.1' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'nocol-3.0/src/cmu-snmp/man/snmptrapd.1'\"
else
  echo shar: Extracting \"'nocol-3.0/src/cmu-snmp/man/snmptrapd.1'\" \(2145 characters\)
  sed "s/^X//" >'nocol-3.0/src/cmu-snmp/man/snmptrapd.1' <<'END_OF_FILE'
X.\* /***********************************************************
X.\" 	Copyright 1989 by Carnegie Mellon University
X.\" 
X.\"                       All Rights Reserved
X.\" 
X.\" Permission to use, copy, modify, and distribute this software and its 
X.\" documentation for any purpose and without fee is hereby granted, 
X.\" provided that the above copyright notice appear in all copies and that
X.\" both that copyright notice and this permission notice appear in 
X.\" supporting documentation, and that the name of CMU not be
X.\" used in advertising or publicity pertaining to distribution of the
X.\" software without specific, written prior permission.  
X.\" 
X.\" CMU DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
X.\" ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
X.\" CMU BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
X.\" ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
X.\" WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
X.\" ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
X.\" SOFTWARE.
X.\" ******************************************************************/
X.TH SNMPTRAPD 1 "17 SEPTEMBER 1989"
X.UC 4
X.SH NAME
Xsnmptrapd - Receive and log snmp trap messages.
X.SH SYNOPSIS
Xsnmptrapd [ -p ]
X.SH DESCRIPTION
XSnmptrapd
Xis an SNMP application that receives and logs snmp trap messages
Xsent to the SNMP-TRAP port (162) on the local machine.
X.PP
XIf the
X.B -p
Xoption is given,
X.I snmptrapd
Xwill print it's messages to the standard output.  Otherwise it will use
X.IR syslog (8)
Xto log messages.  These syslog messages are sent with the level of LOG_WARNING, and
Xare if available (usually on 4.3 systems) are sent to the LOG_LOCAL0 facility.
X.PP
XThe log messages are of the form:
X.br
X.I Sep 17 22:39:52 suffern snmptrapd: 128.2.13.41:
X.I Cold Start Trap (0) Uptime:
X.I 8 days, 0:35:46
X.PP
X.I Snmptrapd
Xmust be run as root so that UDP port 162 can be opened.
X.PP
XAdding a "-d" to the argument list will cause the application to dump input and output packets.
X.PP
X.SH "SEE ALSO"
Xsyslog(8), variables(5), RFC 1065, RFC 1066, RFC 1067
END_OF_FILE
  if test 2145 -ne `wc -c <'nocol-3.0/src/cmu-snmp/man/snmptrapd.1'`; then
    echo shar: \"'nocol-3.0/src/cmu-snmp/man/snmptrapd.1'\" unpacked with wrong size!
  fi
  # end of 'nocol-3.0/src/cmu-snmp/man/snmptrapd.1'
fi
if test -f 'nocol-3.0/src/cmu-snmp/mib.txt.A' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'nocol-3.0/src/cmu-snmp/mib.txt.A'\"
else
  echo shar: Extracting \"'nocol-3.0/src/cmu-snmp/mib.txt.A'\" \(64528 characters\)
  sed "s/^X//" >'nocol-3.0/src/cmu-snmp/mib.txt.A' <<'END_OF_FILE'
X		  mgmt	     OBJECT IDENTIFIER ::= { iso org(3) dod(6) internet(1) mgmt(2) }
X                  mib        OBJECT IDENTIFIER ::= { mgmt 1 }
X		  directory  OBJECT IDENTIFIER ::= { internet 1 }
X		  experimental   OBJECT IDENTIFIER ::= { internet 3 }
X		  private    OBJECT IDENTIFIER ::= { internet 4 }
X		  enterprises OBJECT IDENTIFIER ::= { private 1 }
X
X                  system     OBJECT IDENTIFIER ::= { mib 1 }
X                  interfaces OBJECT IDENTIFIER ::= { mib 2 }
X                  at         OBJECT IDENTIFIER ::= { mib 3 }
X                  ip         OBJECT IDENTIFIER ::= { mib 4 }
X                  icmp       OBJECT IDENTIFIER ::= { mib 5 }
X                  tcp        OBJECT IDENTIFIER ::= { mib 6 }
X                  udp        OBJECT IDENTIFIER ::= { mib 7 }
X                  egp        OBJECT IDENTIFIER ::= { mib 8 }
X
X                  -- object types
X
X                  -- the System group
X
X                  sysDescr OBJECT-TYPE
X                          SYNTAX  OCTET STRING
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { system 1 }
X
X                  sysObjectID OBJECT-TYPE
X                          SYNTAX  OBJECT IDENTIFIER
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { system 2 }
X
X                  sysUpTime OBJECT-TYPE
X                          SYNTAX  TimeTicks
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { system 3 }
X
X                  -- the Interfaces group
X
X                  ifNumber OBJECT-TYPE
X                          SYNTAX  INTEGER
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { interfaces 1 }
X
X                  -- the Interfaces table
X
X                  ifTable OBJECT-TYPE
X                          SYNTAX  SEQUENCE OF IfEntry
X                          ACCESS  read-write
X                          STATUS  mandatory
X                          ::= { interfaces 2 }
X
X                  ifEntry OBJECT-TYPE
X                          SYNTAX  IfEntry
X                          ACCESS  read-write
X                          STATUS  mandatory
X                          ::= { ifTable 1 }
X
X                  IfEntry ::= SEQUENCE {
X                      ifIndex
X                          INTEGER,
X                      ifDescr
X                          OCTET STRING,
X                      ifType
X                          INTEGER,
X                      ifMtu
X                          INTEGER,
X                      ifSpeed
X                          Gauge,
X                      ifPhysAddress
X                          OCTET STRING,
X                      ifAdminStatus
X                          INTEGER,
X                      ifOperStatus
X                          INTEGER,
X                      ifLastChange
X                          TimeTicks,
X                      ifInOctets
X                          Counter,
X                      ifInUcastPkts
X                          Counter,
X                      ifInNUcastPkts
X                          Counter,
X                      ifInDiscards
X                          Counter,
X                      ifInErrors
X                          Counter,
X                      ifInUnknownProtos
X                          Counter,
X                      ifOutOctets
X                          Counter,
X                      ifOutUcastPkts
X                          Counter,
X                      ifOutNUcastPkts
X                          Counter,
X                      ifOutDiscards
X                          Counter,
X                      ifOutErrors
X                          Counter,
X                      ifOutQLen
X                          Gauge
X                  }
X
X                  ifIndex OBJECT-TYPE
X                          SYNTAX  INTEGER
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ifEntry 1 }
X
X                  ifDescr OBJECT-TYPE
X                          SYNTAX  OCTET STRING
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ifEntry 2 }
X
X                  ifType OBJECT-TYPE
X                          SYNTAX  INTEGER {
X                                  other(1),     -- none of the following
X                                  regular1822(2),
X                                  hdh1822(3),
X                                  ddn-x25(4),
X                                  rfc877-x25(5),
X                                  ethernet-csmacd(6),
X                                  iso88023-csmacd(7),
X                                  iso88024-tokenBus(8),
X                                  iso88025-tokenRing(9),
X                                  iso88026-man(10),
X                                  starLan(11),
X                                  proteon-10MBit(12),
X                                  proteon-80MBit(13),
X                                  hyperchannel(14),
X                                  fddi(15),
X                                  lapb(16),
X                                  sdlc(17),
X                                  t1-carrier(18),
X                                  cept(19),
X                                  basicIsdn(20),
X                                  primaryIsdn(21),
X                                                   -- proprietary serial
X                                  propPointToPointSerial(22)
X                              }
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ifEntry 3 }
X
X                  ifMtu OBJECT-TYPE
X                          SYNTAX  INTEGER
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ifEntry 4 }
X
X                  ifSpeed OBJECT-TYPE
X                          SYNTAX  Gauge
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ifEntry 5 }
X
X                  ifPhysAddress OBJECT-TYPE
X                          SYNTAX  OCTET STRING
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ifEntry 6 }
X
X                  ifAdminStatus OBJECT-TYPE
X                          SYNTAX  INTEGER {
X                                  up(1),        -- ready to pass packets
X                                  down(2),
X                                  testing(3)    -- in some test mode
X                                  }
X                          ACCESS  read-write
X                          STATUS  mandatory
X                          ::= { ifEntry 7 }
X
X                  ifOperStatus OBJECT-TYPE
X                          SYNTAX  INTEGER {
X                                  up(1),        -- ready to pass packets
X                                  down(2),
X                                  testing(3)    -- in some test mode
X                                  }
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ifEntry 8 }
X
X                  ifLastChange OBJECT-TYPE
X                          SYNTAX  TimeTicks
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ifEntry 9 }
X
X                  ifInOctets OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ifEntry 10 }
X
X                  ifInUcastPkts OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::=  { ifEntry 11 }
X
X                  ifInNUcastPkts OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ifEntry 12 }
X
X                  ifInDiscards OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ifEntry 13 }
X
X                  ifInErrors OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ifEntry 14 }
X
X                  ifInUnknownProtos OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ifEntry 15 }
X
X                  ifOutOctets OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ifEntry 16 }
X
X                  ifOutUcastPkts OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ifEntry 17 }
X
X                  ifOutNUcastPkts OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ifEntry 18 }
X
X                  ifOutDiscards OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ifEntry 19 }
X
X                  ifOutErrors OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ifEntry 20 }
X
X                  ifOutQLen OBJECT-TYPE
X                          SYNTAX  Gauge
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ifEntry 21 }
X
X                  -- the Address Translation group
X
X                  atTable OBJECT-TYPE
X                          SYNTAX  SEQUENCE OF AtEntry
X                          ACCESS  read-write
X                          STATUS  mandatory
X                          ::= { at 1 }
X
X                  atEntry OBJECT-TYPE
X                          SYNTAX  AtEntry
X                          ACCESS  read-write
X                          STATUS  mandatory
X                          ::= { atTable 1 }
X
X                  AtEntry ::= SEQUENCE {
X                      atIfIndex
X                          INTEGER,
X                      atPhysAddress
X                          OCTET STRING,
X                      atNetAddress
X                          NetworkAddress
X                  }
X
X                  atIfIndex OBJECT-TYPE
X                          SYNTAX  INTEGER
X                          ACCESS  read-write
X                          STATUS  mandatory
X                          ::= { atEntry 1 }
X
X                  atPhysAddress OBJECT-TYPE
X                          SYNTAX  OCTET STRING
X                          ACCESS  read-write
X                          STATUS  mandatory
X                          ::= { atEntry 2 }
X
X                  atNetAddress OBJECT-TYPE
X                          SYNTAX  NetworkAddress
X                          ACCESS  read-write
X                          STATUS  mandatory
X                          ::= { atEntry 3 }
X
X                  -- the IP group
X
X                  ipForwarding OBJECT-TYPE
X                          SYNTAX  INTEGER {
X                        gateway(1), -- entity forwards datagrams
X                        host(2)     -- entity does NOT forward datagrams
X                                  }
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ip 1 }
X
X                  ipDefaultTTL OBJECT-TYPE
X                          SYNTAX  INTEGER
X                          ACCESS  read-write
X                          STATUS  mandatory
X                          ::= { ip 2 }
X
X                  ipInReceives OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ip 3 }
X
X                  ipInHdrErrors OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ip 4 }
X
X                  ipInAddrErrors OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ip 5 }
X
X                  ipForwDatagrams OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ip 6 }
X
X                  ipInUnknownProtos OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ip 7 }
X
X                  ipInDiscards OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ip 8 }
X
X                  ipInDelivers OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ip 9 }
X
X                  ipOutRequests OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ip 10 }
X
X                  ipOutDiscards OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ip 11 }
X
X                  ipOutNoRoutes OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ip 12 }
X
X                  ipReasmTimeout OBJECT-TYPE
X                          SYNTAX  INTEGER
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ip 13 }
X
X                  ipReasmReqds OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ip 14 }
X
X                  ipReasmOKs OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ip 15 }
X
X                  ipReasmFails OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ip 16 }
X
X                  ipFragOKs OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ip 17 }
X
X                  ipFragFails OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ip 18 }
X
X                  ipFragCreates OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ip 19 }
X
X                  -- the IP Interface table
X
X                  ipAddrTable OBJECT-TYPE
X                          SYNTAX  SEQUENCE OF IpAddrEntry
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ip 20 }
X
X                  ipAddrEntry OBJECT-TYPE
X                          SYNTAX  IpAddrEntry
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ipAddrTable 1 }
X
X                  IpAddrEntry ::= SEQUENCE {
X                      ipAdEntAddr
X                          IpAddress,
X                      ipAdEntIfIndex
X                          INTEGER,
X                      ipAdEntNetMask
X                          IpAddress,
X                      ipAdEntBcastAddr
X                          INTEGER
X                  }
X
X                  ipAdEntAddr OBJECT-TYPE
X                          SYNTAX  IpAddress
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::=  { ipAddrEntry 1 }
X
X                  ipAdEntIfIndex OBJECT-TYPE
X                          SYNTAX  INTEGER
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::=  { ipAddrEntry 2 }
X
X                  ipAdEntNetMask OBJECT-TYPE
X                          SYNTAX  IpAddress
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::=  { ipAddrEntry 3 }
X
X                  ipAdEntBcastAddr OBJECT-TYPE
X                          SYNTAX  INTEGER
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ipAddrEntry 4 }
X
X                  -- the IP Routing table
X
X                  ipRoutingTable OBJECT-TYPE
X                          SYNTAX  SEQUENCE OF IpRouteEntry
X                          ACCESS  read-write
X                          STATUS  mandatory
X                          ::= { ip 21 }
X
X                  ipRouteEntry OBJECT-TYPE
X                          SYNTAX  IpRouteEntry
X                          ACCESS  read-write
X                          STATUS  mandatory
X                          ::= { ipRoutingTable 1 }
X
X                  IpRouteEntry ::= SEQUENCE {
X                      ipRouteDest
X                          IpAddress,
X                      ipRouteIfIndex
X                          INTEGER,
X                      ipRouteMetric1
X                          INTEGER,
X                      ipRouteMetric2
X                          INTEGER,
X                      ipRouteMetric3
X                          INTEGER,
X                      ipRouteMetric4
X                          INTEGER,
X                      ipRouteNextHop
X                          IpAddress,
X                      ipRouteType
X                          INTEGER,
X                      ipRouteProto
X                          INTEGER,
X                      ipRouteAge
X                          INTEGER
X                  }
X
X                  ipRouteDest OBJECT-TYPE
X                          SYNTAX  IpAddress
X                          ACCESS  read-write
X                          STATUS  mandatory
X                          ::= { ipRouteEntry 1 }
X
X                  ipRouteIfIndex  OBJECT-TYPE
X                          SYNTAX  INTEGER
X                          ACCESS  read-write
X                          STATUS  mandatory
X                          ::= { ipRouteEntry 2 }
X
X                  ipRouteMetric1 OBJECT-TYPE
X
X                          SYNTAX  INTEGER
X                          ACCESS  read-write
X                          STATUS  mandatory
X                          ::= { ipRouteEntry 3 }
X
X                  ipRouteMetric2 OBJECT-TYPE
X                          SYNTAX  INTEGER
X                          ACCESS  read-write
X                          STATUS  mandatory
X                          ::= { ipRouteEntry 4 }
X
X                  ipRouteMetric3 OBJECT-TYPE
X                          SYNTAX  INTEGER
X                          ACCESS  read-write
X                          STATUS  mandatory
X                          ::= { ipRouteEntry 5 }
X
X                  ipRouteMetric4 OBJECT-TYPE
X                          SYNTAX  INTEGER
X                          ACCESS  read-write
X                          STATUS  mandatory
X                          ::= { ipRouteEntry 6 }
X
X                  ipRouteNextHop OBJECT-TYPE
X                          SYNTAX  IpAddress
X                          ACCESS  read-write
X                          STATUS  mandatory
X                          ::= { ipRouteEntry 7 }
X
X                  ipRouteType OBJECT-TYPE
X                          SYNTAX  INTEGER {
X                            other(1),      -- none of the following
X
X                            invalid(2),    -- an invalidated route
X
X                                           -- route to directly
X                            direct(3),     -- connected (sub-)network
X
X                                           -- route to a non-local
X                            remote(4),     -- host/network/sub-network
X                              }
X                          ACCESS  read-write
X                          STATUS  mandatory
X                          ::= { ipRouteEntry 8 }
X
X                  ipRouteProto OBJECT-TYPE
X                          SYNTAX  INTEGER {
X                            other(1),     -- none of the following
X
X                                          -- non-protocol information
X                                          --   e.g., manually
X                            local(2),     --   configured entries
X
X                                          -- set via a network
X                            netmgmt(3),   --   management protocol
X
X                                          -- obtained via ICMP,
X                            icmp(4),      --   e.g., Redirect
X
X                                          -- the following are
X                                          -- gateway routing protocols
X                            egp(5),
X                            ggp(6),
X                            hello(7),
X                            rip(8),
X                            is-is(9),
X                            es-is(10),
X                            ciscoIgrp(11),
X                            bbnSpfIgp(12),
X                            oigp(13)
X                              }
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { ipRouteEntry 9 }
X
X                  ipRouteAge OBJECT-TYPE
X                          SYNTAX  INTEGER
X                          ACCESS  read-write
X                          STATUS  mandatory
X                          ::= { ipRouteEntry 10 }
X
X                  -- the ICMP group
X
X                  icmpInMsgs OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { icmp 1 }
X
X                  icmpInErrors OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { icmp 2 }
X
X                  icmpInDestUnreachs OBJECT-TYPE
X                          SYNTAX  Counter
X
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { icmp 3 }
X
X                  icmpInTimeExcds OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { icmp 4 }
X
X                  icmpInParmProbs OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { icmp 5 }
X
X                  icmpInSrcQuenchs OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { icmp 6 }
X
X                  icmpInRedirects OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { icmp 7 }
X
X                  icmpInEchos OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { icmp 8 }
X
X                  icmpInEchoReps OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { icmp 9 }
X
X                  icmpInTimestamps OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { icmp 10 }
X
X                  icmpInTimestampReps OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { icmp 11 }
X
X                  icmpInAddrMasks OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { icmp 12 }
X
X                  icmpInAddrMaskReps OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { icmp 13 }
X
X                  icmpOutMsgs OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { icmp 14 }
X
X                  icmpOutErrors OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { icmp 15 }
X
X                  icmpOutDestUnreachs OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { icmp 16 }
X
X                  icmpOutTimeExcds OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { icmp 17 }
X
X                  icmpOutParmProbs OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { icmp 18 }
X
X                  icmpOutSrcQuenchs OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { icmp 19 }
X
X                  icmpOutRedirects OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { icmp 20 }
X
X                  icmpOutEchos OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { icmp 21 }
X
X                  icmpOutEchoReps OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { icmp 22 }
X
X                  icmpOutTimestamps OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { icmp 23 }
X
X                  icmpOutTimestampReps OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { icmp 24 }
X
X                  icmpOutAddrMasks OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { icmp 25 }
X
X                  icmpOutAddrMaskReps OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { icmp 26 }
X
X                  -- the TCP group
X
X                  tcpRtoAlgorithm OBJECT-TYPE
X                          SYNTAX  INTEGER {
X                          other(1),    -- none of the following
X                          constant(2), -- a constant rto
X                          rsre(3),     -- MIL-STD-1778, Appendix B
X                          vanj(4)      -- Van Jacobson's algorithm [11]
X                                  }
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { tcp 1 }
X
X                  tcpRtoMin OBJECT-TYPE
X                          SYNTAX  INTEGER
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { tcp 2 }
X
X                  tcpRtoMax OBJECT-TYPE
X                          SYNTAX  INTEGER
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { tcp 3 }
X
X                  tcpMaxConn OBJECT-TYPE
X                          SYNTAX  INTEGER
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { tcp 4 }
X
X                  tcpActiveOpens OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { tcp 5 }
X
X                  tcpPassiveOpens OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { tcp 6 }
X
X                  tcpAttemptFails OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { tcp 7 }
X
X                  tcpEstabResets OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { tcp 8 }
X
X                  tcpCurrEstab OBJECT-TYPE
X                          SYNTAX  Gauge
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { tcp 9 }
X
X                  tcpInSegs OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { tcp 10 }
X
X                  tcpOutSegs OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { tcp 11 }
X
X                  tcpRetransSegs OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { tcp 12 }
X
X                  -- the TCP connections table
X
X                  tcpConnTable OBJECT-TYPE
X                          SYNTAX  SEQUENCE OF TcpConnEntry
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { tcp 13 }
X
X                  tcpConnEntry OBJECT-TYPE
X                          SYNTAX  TcpConnEntry
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { tcpConnTable 1 }
X
X                  TcpConnEntry ::= SEQUENCE {
X                      tcpConnState
X                          INTEGER,
X                      tcpConnLocalAddress
X                          IpAddress,
X                      tcpConnLocalPort
X                          INTEGER (0..65535),
X                      tcpConnRemAddress
X                          IpAddress,
X                      tcpConnRemPort
X                          INTEGER (0..65535)
X                  }
X
X                  tcpConnState OBJECT-TYPE
X                          SYNTAX  INTEGER {
X                                      closed(1),
X                                      listen(2),
X                                      synSent(3),
X                                      synReceived(4),
X                                      established(5),
X                                      finWait1(6),
X                                      finWait2(7),
X                                      closeWait(8),
X                                      lastAck(9),
X                                      closing(10),
X                                      timeWait(11)
X                                  }
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { tcpConnEntry 1 }
X
X                  tcpConnLocalAddress OBJECT-TYPE
X                          SYNTAX  IpAddress
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { tcpConnEntry 2 }
X
X                  tcpConnLocalPort OBJECT-TYPE
X                          SYNTAX  INTEGER (0..65535)
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { tcpConnEntry 3 }
X
X                  tcpConnRemAddress OBJECT-TYPE
X                          SYNTAX  IpAddress
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { tcpConnEntry 4 }
X
X                  tcpConnRemPort OBJECT-TYPE
X                          SYNTAX  INTEGER (0..65535)
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { tcpConnEntry 5 }
X
X                  -- the UDP group
X
X                  udpInDatagrams OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { udp 1 }
X
X                  udpNoPorts OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { udp 2 }
X
X                  udpInErrors OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { udp 3 }
X
X                  udpOutDatagrams OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { udp 4 }
X
X                  -- the EGP group
X
X                  egpInMsgs OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { egp 1 }
X
X                  egpInErrors OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { egp 2 }
X
X                  egpOutMsgs OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { egp 3 }
X
X                  egpOutErrors OBJECT-TYPE
X                          SYNTAX  Counter
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { egp 4 }
X
X                  -- the EGP Neighbor table
X
X                  egpNeighTable OBJECT-TYPE
X                          SYNTAX  SEQUENCE OF EgpNeighEntry
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { egp 5 }
X
X                  egpNeighEntry OBJECT-TYPE
X                          SYNTAX  EgpNeighEntry
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { egpNeighTable 1 }
X
X                  EgpNeighEntry ::= SEQUENCE {
X                      egpNeighState
X                          INTEGER,
X                      egpNeighAddr
X                          IpAddress
X                  }
X
X                  egpNeighState OBJECT-TYPE
X                          SYNTAX  INTEGER {
X                                      idle(1),
X                                      acquisition(2),
X                                      down(3),
X                                      up(4),
X                                      cease(5)
X                                  }
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { egpNeighEntry 1 }
X
X                  egpNeighAddr OBJECT-TYPE
X                          SYNTAX  IpAddress
X                          ACCESS  read-only
X                          STATUS  mandatory
X                          ::= { egpNeighEntry 2 }
X
X		  cmu OBJECT IDENTIFIER ::= { enterprises 3 }
X		  systems OBJECT IDENTIFIER ::= { cmu 1 }
X		  mibs OBJECT IDENTIFIER ::= { cmu 2 }
X		  cmuSNMP OBJECT IDENTIFIER ::= { systems 1 }
X		  cmuKip OBJECT IDENTIFIER ::= { systems 2 }
X		  cmuRouter OBJECT IDENTIFIER ::= { systems 3 }
X
X
X
X--
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                                  -- cisco MIB*
X
X                           -- Tue Nov 17 08:04:09 1992
X
X
X                              -- cisco Systems, Inc.
X                                 -- 1525 O'Brien
X                             -- Menlo Park, CA  94025
X
X                          -- customer-service@cisco.com
X
X
X
X          -- 1. Introduction
X
X          -- This memo describes the variables that are implemented for
X          -- the cisco Systems, Inc.  set of products including the
X          -- Gateway Server, Terminal Server, Trouter, and Protocol
X          -- Translator.  The document relies upon the Structure of
X          -- Management Information (SMI), RFC1155.  It is presented in
X          -- a format described in RFC1212, the Concise MIB document.
X
X          -- This  document describes the cisco local Management
X          -- Information Base (MIB) variables for
X          -- version 9.1 of the system software.
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X               cisco               OBJECT IDENTIFIER ::= { enterprises 9 }
X
X               products            OBJECT IDENTIFIER ::= { cisco 1 }
X               local               OBJECT IDENTIFIER ::= { cisco 2 }
X               temporary           OBJECT IDENTIFIER ::= { cisco 3 }
X
X               gateway-server      OBJECT IDENTIFIER ::= { products 1 }
X               terminal-server     OBJECT IDENTIFIER ::= { products 2 }
X               trouter             OBJECT IDENTIFIER ::= { products 3 }
X               protocol-translator OBJECT IDENTIFIER ::= { products 4 }
X               igs                 OBJECT IDENTIFIER ::= { products 5 }
X
X               lsystem             OBJECT IDENTIFIER ::= { local 1 }
X               linterfaces         OBJECT IDENTIFIER ::= { local 2 }
X               lat                 OBJECT IDENTIFIER ::= { local 3 }
X               lip                 OBJECT IDENTIFIER ::= { local 4 }
X               licmp               OBJECT IDENTIFIER ::= { local 5 }
X               ltcp                OBJECT IDENTIFIER ::= { local 6 }
X               ludp                OBJECT IDENTIFIER ::= { local 7 }
X               legp                OBJECT IDENTIFIER ::= { local 8 }
X               lts                 OBJECT IDENTIFIER ::= { local 9 }
X               lflash              OBJECT IDENTIFIER ::= { local 10 }
X
X               decnet              OBJECT IDENTIFIER ::= { temporary 1 }
X               xns                 OBJECT IDENTIFIER ::= { temporary 2 }
X               appletalk           OBJECT IDENTIFIER ::= { temporary 3 }
X               novell              OBJECT IDENTIFIER ::= { temporary 4 }
X               vines               OBJECT IDENTIFIER ::= { temporary 5 }
X
X
X
X          -- Product Section
X
X          -- The product section contains the different product's
X          -- object identifiers.  Each product has a unique object
X          -- identifier allocated from this section which is referenced
X          -- by the sysObjectID variable from RFC1156.
X
X               -- gateway-server      OBJECT IDENTIFIER ::= { products 1 }
X               -- terminal-server     OBJECT IDENTIFIER ::= { products 2 }
X               -- trouter             OBJECT IDENTIFIER ::= { products 3 }
X               -- protocol-translator OBJECT IDENTIFIER ::= { products 4 }
X               -- igs                 OBJECT IDENTIFIER ::= { products 5 }
X
X
X
X
X
X
X
X          -- cisco MIB                                          [Page 2]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X          -- New products will be added at the end of this list.
X
X
X          -- Local Variable Section
X
X          -- This section describes the local variables within the cisco
X          -- product line.  Groups may or may not be present depending
X          -- on the software options present in the managed device.
X
X
X          -- Local System Group
X
X          -- This group is present in all products.
X
X               romId OBJECT-TYPE
X                   SYNTAX  DisplayString
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 1 }
X
X               whyReload OBJECT-TYPE
X                   SYNTAX  DisplayString
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 2 }
X
X               hostName OBJECT-TYPE
X                   SYNTAX  DisplayString
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 3 }
X
X               domainName OBJECT-TYPE
X                   SYNTAX  DisplayString
X
X
X
X
X
X          -- cisco MIB                                          [Page 3]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 4 }
X
X               authAddr OBJECT-TYPE
X                   SYNTAX  IpAddress
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 5 }
X
X               bootHost OBJECT-TYPE
X                   SYNTAX  IpAddress
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 6 }
X
X               ping OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-write
X                   STATUS  mandatory
X                   ::= { lsystem 7 }
X
X               freeMem OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 8 }
X
X               bufferElFree OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 9 }
X
X               bufferElMax OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 10 }
X
X               bufferElHit OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 11 }
X
X               bufferElMiss OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 12 }
X
X               bufferElCreate OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 13 }
X
X
X
X
X
X          -- cisco MIB                                          [Page 5]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X               bufferSmSize OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 14 }
X
X               bufferSmTotal OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 15 }
X
X               bufferSmFree OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 16 }
X
X               bufferSmMax OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 17 }
X
X               bufferSmHit OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 18 }
X
X               bufferSmMiss OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 19 }
X
X               bufferSmTrim OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 20 }
X
X               bufferSmCreate OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 21 }
X
X               bufferMdSize OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 22 }
X
X               bufferMdTotal OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 23 }
X
X               bufferMdFree OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 24 }
X
X
X
X
X
X          -- cisco MIB                                          [Page 7]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X               bufferMdMax OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 25 }
X
X               bufferMdHit OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 26 }
X
X               bufferMdMiss OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 27 }
X
X               bufferMdTrim OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 28 }
X
X               bufferMdCreate OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 29 }
X
X               bufferBgSize OBJECT-TYPE
X                   SYNTAX  INTEGER
X
X
X
X
X
X          -- cisco MIB                                          [Page 8]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 30 }
X
X               bufferBgTotal OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 31 }
X
X               bufferBgFree OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 32 }
X
X               bufferBgMax OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 33 }
X
X               bufferBgHit OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 34 }
X
X               bufferBgMiss OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 35 }
X
X
X
X
X
X          -- cisco MIB                                          [Page 9]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X               bufferBgTrim OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 36 }
X
X               bufferBgCreate OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 37 }
X
X               bufferLgSize OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 38 }
X
X               bufferLgTotal OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 39 }
X
X               bufferLgFree OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 40 }
X
X               bufferLgMax OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 41 }
X
X               bufferLgHit OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 42 }
X
X               bufferLgMiss OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 43 }
X
X               bufferLgTrim OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 44 }
X
X               bufferLgCreate OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 45 }
X
X               bufferFail OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 46 }
X
X
X
X
X
X          -- cisco MIB                                         [Page 11]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X               bufferNoMem OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 47 }
X
X               netConfigAddr OBJECT-TYPE
X                   SYNTAX  IpAddress
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 48 }
X
X               netConfigName OBJECT-TYPE
X                   SYNTAX  DisplayString
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 49 }
X
X               netConfigSet OBJECT-TYPE
X                   SYNTAX  DisplayString
X                   ACCESS  write-only
X                   STATUS  mandatory
X                   ::= { lsystem 50 }
X
X               hostConfigAddr OBJECT-TYPE
X                   SYNTAX  IpAddress
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 51 }
X
X
X
X
X
X
X          -- cisco MIB                                         [Page 12]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X               hostConfigName OBJECT-TYPE
X                   SYNTAX  DisplayString
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 52 }
X
X               hostConfigSet OBJECT-TYPE
X                   SYNTAX  DisplayString
X                   ACCESS  write-only
X                   STATUS  mandatory
X                   ::= { lsystem 53 }
X
X               writeMem OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  write-only
X                   STATUS  mandatory
X                   ::= { lsystem 54 }
X
X               writeNet OBJECT-TYPE
X                   SYNTAX  DisplayString
X                   ACCESS  write-only
X                   STATUS  mandatory
X                   ::= { lsystem 55 }
X
X               busyPer OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 56 }
X
X
X
X
X
X
X          -- cisco MIB                                         [Page 13]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X               avgBusy1 OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 57 }
X
X               avgBusy5 OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 58 }
X
X               idleCount OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-write
X                   STATUS  mandatory
X                   ::= { lsystem 59 }
X
X               idleWired OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-write
X                   STATUS  mandatory
X                   ::= { lsystem 60 }
X
X               ciscoContactInfo OBJECT-TYPE
X                   SYNTAX  DisplayString
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 61 }
X
X               bufferHgSize OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X
X
X
X
X
X          -- cisco MIB                                         [Page 14]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   STATUS  mandatory
X                   ::= { lsystem 62 }
X
X               bufferHgTotal OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 63 }
X
X               bufferHgFree OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 64 }
X
X               bufferHgMax OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 65 }
X
X               bufferHgHit OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 66 }
X
X               bufferHgMiss OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 67 }
X
X
X
X
X
X          -- cisco MIB                                         [Page 15]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X               bufferHgTrim OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 68 }
X
X               bufferHgCreate OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 69 }
X
X               netConfigProto OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 70 }
X
X               hostConfigProto OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 71 }
X
X               sysConfigAddr OBJECT-TYPE
X                   SYNTAX  IpAddress
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 72 }
X
X               sysConfigName OBJECT-TYPE
X                   SYNTAX  DisplayString
X
X
X
X
X
X          -- cisco MIB                                         [Page 16]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 73 }
X
X               sysConfigProto OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 74 }
X
X               sysClearARP OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  write-only
X                   STATUS  mandatory
X                   ::= { lsystem 75 }
X
X               sysClearInt OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  write-only
X                   STATUS  mandatory
X                   ::= { lsystem 76 }
X
X               envPresent OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 77 }
X
X               envTestPt1Descr OBJECT-TYPE
X                   SYNTAX  DisplayString
X                   ACCESS  read-only
X                   STATUS  mandatory
X
X
X
X
X
X          -- cisco MIB                                         [Page 17]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   ::= { lsystem 78 }
X
X               envTestPt1Measure OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 79 }
X
X               envTestPt2Descr OBJECT-TYPE
X                   SYNTAX  DisplayString
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 80 }
X
X               envTestPt2Measure OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 81 }
X
X               envTestPt3Descr OBJECT-TYPE
X                   SYNTAX  DisplayString
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 82 }
X
X               envTestPt3Measure OBJECT-TYPE
X                   SYNTAX  INTEGER
X
X
X
X
X
X          -- cisco MIB                                         [Page 18]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 83 }
X
X               envTestPt4Descr OBJECT-TYPE
X                   SYNTAX  DisplayString
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 84 }
X
X               envTestPt4Measure OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 85 }
X
X               envTestPt5Descr OBJECT-TYPE
X                   SYNTAX  DisplayString
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 86 }
X
X               envTestPt5Measure OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 87 }
X
X               envTestPt6Descr OBJECT-TYPE
X                   SYNTAX  DisplayString
X
X
X
X
X
X          -- cisco MIB                                         [Page 19]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 88 }
X
X               envTestPt6Measure OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 89 }
X
X               envTestPt1MarginVal OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 90 }
X
X               envTestPt2MarginVal OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 91 }
X
X               envTestPt3MarginPercent OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 92 }
X
X
X
X
X
X
X          -- cisco MIB                                         [Page 20]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X               envTestPt4MarginPercent OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 93 }
X
X               envTestPt5MarginPercent OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 94 }
X
X               envTestPt6MarginPercent OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 95 }
X
X               envTestPt1last OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 96 }
X
X               envTestPt2last OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 97 }
X
X
X
X
X
X
X          -- cisco MIB                                         [Page 21]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X               envTestPt3last OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 98 }
X
X               envTestPt4last OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 99 }
X
X               envTestPt5last OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 100 }
X
X               envTestPt6last OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 101 }
X
X               envTestPt1warn OBJECT-TYPE
X                   SYNTAX  INTEGER {
X                        warning(1),
X                        noWarning(2)
X                   }
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 102 }
X
X               envTestPt2warn OBJECT-TYPE
X                   SYNTAX  INTEGER {
X                        warning(1),
X                        noWarning(2)
X                   }
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 103 }
X
X               envTestPt3warn OBJECT-TYPE
X                   SYNTAX  INTEGER {
X                        warning(1),
X                        noWarning(2)
X                   }
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 104 }
X
X               envTestPt4warn OBJECT-TYPE
X                   SYNTAX  INTEGER {
X                        warning(1),
X                        noWarning(2)
X                   }
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   ::= { lsystem 105 }
X
X               envTestPt5warn OBJECT-TYPE
X                   SYNTAX  INTEGER {
X                        warning(1),
END_OF_FILE
  if test 64528 -ne `wc -c <'nocol-3.0/src/cmu-snmp/mib.txt.A'`; then
    echo shar: \"'nocol-3.0/src/cmu-snmp/mib.txt.A'\" unpacked with wrong size!
  elif test -f 'nocol-3.0/src/cmu-snmp/mib.txt.B' && test -f 'nocol-3.0/src/cmu-snmp/mib.txt.C'; then
    echo shar: Combining  \"'nocol-3.0/src/cmu-snmp/mib.txt'\" \(164470 characters\)
    cat 'nocol-3.0/src/cmu-snmp/mib.txt.A' 'nocol-3.0/src/cmu-snmp/mib.txt.B' 'nocol-3.0/src/cmu-snmp/mib.txt.C' > 'nocol-3.0/src/cmu-snmp/mib.txt'
    if test 164470 -ne `wc -c <'nocol-3.0/src/cmu-snmp/mib.txt'`; then
      echo shar: \"'nocol-3.0/src/cmu-snmp/mib.txt'\" combined with wrong size!
    else
      rm nocol-3.0/src/cmu-snmp/mib.txt.A nocol-3.0/src/cmu-snmp/mib.txt.B nocol-3.0/src/cmu-snmp/mib.txt.C
    fi
  fi
  # end of 'nocol-3.0/src/cmu-snmp/mib.txt.A'
fi
if test ! -d 'nocol-3.0/src/cmu-snmp/snmplib' ; then
    echo shar: Creating directory \"'nocol-3.0/src/cmu-snmp/snmplib'\"
    mkdir 'nocol-3.0/src/cmu-snmp/snmplib'
fi
if test ! -d 'nocol-3.0/src/contrib' ; then
    echo shar: Creating directory \"'nocol-3.0/src/contrib'\"
    mkdir 'nocol-3.0/src/contrib'
fi
if test ! -d 'nocol-3.0/src/doc' ; then
    echo shar: Creating directory \"'nocol-3.0/src/doc'\"
    mkdir 'nocol-3.0/src/doc'
fi
if test ! -d 'nocol-3.0/src/eventselect' ; then
    echo shar: Creating directory \"'nocol-3.0/src/eventselect'\"
    mkdir 'nocol-3.0/src/eventselect'
fi
if test ! -d 'nocol-3.0/src/genmon' ; then
    echo shar: Creating directory \"'nocol-3.0/src/genmon'\"
    mkdir 'nocol-3.0/src/genmon'
fi
if test ! -d 'nocol-3.0/src/include' ; then
    echo shar: Creating directory \"'nocol-3.0/src/include'\"
    mkdir 'nocol-3.0/src/include'
fi
if test ! -d 'nocol-3.0/src/lib' ; then
    echo shar: Creating directory \"'nocol-3.0/src/lib'\"
    mkdir 'nocol-3.0/src/lib'
fi
if test ! -d 'nocol-3.0/src/netmon' ; then
    echo shar: Creating directory \"'nocol-3.0/src/netmon'\"
    mkdir 'nocol-3.0/src/netmon'
fi
if test ! -d 'nocol-3.0/src/noclog' ; then
    echo shar: Creating directory \"'nocol-3.0/src/noclog'\"
    mkdir 'nocol-3.0/src/noclog'
fi
if test ! -d 'nocol-3.0/src/nsmon' ; then
    echo shar: Creating directory \"'nocol-3.0/src/nsmon'\"
    mkdir 'nocol-3.0/src/nsmon'
fi
if test ! -d 'nocol-3.0/src/perlnocol' ; then
    echo shar: Creating directory \"'nocol-3.0/src/perlnocol'\"
    mkdir 'nocol-3.0/src/perlnocol'
fi
if test ! -d 'nocol-3.0/src/pingmon' ; then
    echo shar: Creating directory \"'nocol-3.0/src/pingmon'\"
    mkdir 'nocol-3.0/src/pingmon'
fi
if test ! -d 'nocol-3.0/src/portmon' ; then
    echo shar: Creating directory \"'nocol-3.0/src/portmon'\"
    mkdir 'nocol-3.0/src/portmon'
fi
if test ! -d 'nocol-3.0/src/support' ; then
    echo shar: Creating directory \"'nocol-3.0/src/support'\"
    mkdir 'nocol-3.0/src/support'
fi
if test ! -d 'nocol-3.0/src/support/mping' ; then
    echo shar: Creating directory \"'nocol-3.0/src/support/mping'\"
    mkdir 'nocol-3.0/src/support/mping'
fi
if test ! -d 'nocol-3.0/src/support/multiping' ; then
    echo shar: Creating directory \"'nocol-3.0/src/support/multiping'\"
    mkdir 'nocol-3.0/src/support/multiping'
fi
if test ! -d 'nocol-3.0/src/tpmon' ; then
    echo shar: Creating directory \"'nocol-3.0/src/tpmon'\"
    mkdir 'nocol-3.0/src/tpmon'
fi
if test ! -d 'nocol-3.0/src/trapmon' ; then
    echo shar: Creating directory \"'nocol-3.0/src/trapmon'\"
    mkdir 'nocol-3.0/src/trapmon'
fi
if test ! -d 'nocol-3.0/src/utility' ; then
    echo shar: Creating directory \"'nocol-3.0/src/utility'\"
    mkdir 'nocol-3.0/src/utility'
fi
echo shar: End of archive 1 \(of 26\).
cp /dev/null ark1isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 26 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0
exit 0 # Just in case...
