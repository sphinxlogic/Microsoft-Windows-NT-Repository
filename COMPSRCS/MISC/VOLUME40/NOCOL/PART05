Newsgroups: comp.sources.misc
From: vikas@jvnc.net (Vikas Aggarwal)
Subject: v40i135:  nocol - Network Monitoring System, Part05/26
Message-ID: <1993Nov23.034642.5469@sparky.sterling.com>
X-Md4-Signature: f5d2344fc4b8ddb81f9957eb17e81fc9
Sender: kent@sparky.sterling.com (Kent Landfield)
Organization: Sterling Software
Date: Tue, 23 Nov 1993 03:46:42 GMT
Approved: kent@sparky.sterling.com

Submitted-by: vikas@jvnc.net (Vikas Aggarwal)
Posting-number: Volume 40, Issue 135
Archive-name: nocol/part05
Environment: INET, UNIX

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# Contents:  nocol-3.0/src/cmu-snmp/cisco.mib91.B
#   nocol-3.0/src/lib/fgetline.c nocol-3.0/src/lib/random.c
# Wrapped by kent@sparky on Tue Nov  9 22:22:14 1993
PATH=/bin:/usr/bin:/usr/ucb:/usr/local/bin:/usr/lbin:$PATH ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 5 (of 26)."'
if test -f 'nocol-3.0/src/cmu-snmp/cisco.mib91.B' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'nocol-3.0/src/cmu-snmp/cisco.mib91.B'\"
else
  echo shar: Extracting \"'nocol-3.0/src/cmu-snmp/cisco.mib91.B'\" \(59125 characters\)
  sed "s/^X//" >'nocol-3.0/src/cmu-snmp/cisco.mib91.B' <<'END_OF_FILE'
X                           reset."
X                   ::= { lifEntry 17 }
X
X               locIfRestarts OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Number of times interface needed to be
X                           completely restarted."
X                   ::= { lifEntry 18 }
X
X               locIfKeep OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Boolean whether keepalives are enabled on
X                           this interface."
X                   ::= { lifEntry 19 }
X
X               locIfReason OBJECT-TYPE
X                   SYNTAX  DisplayString
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Reason for interface last status change."
X                   ::= { lifEntry 20 }
X
X               locIfCarTrans OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X
X
X
X
X
X          -- cisco MIB                                         [Page 34]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Number of times interface saw the carrier
X                           signal transition."
X                   ::= { lifEntry 21 }
X
X               locIfReliab OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "The reliability of the interface. Used by
X                           IGRP."
X                   ::= { lifEntry 22 }
X
X               locIfDelay OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "The amount of delay in microseconds of the
X                           interface. Used by IGRP."
X                   ::= { lifEntry 23 }
X
X               locIfLoad OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "The loading factor of the interface. Used by
X                           IGRP."
X                   ::= { lifEntry 24 }
X
X               locIfCollisions OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "The number of output collisions detected on
X                           this interface."
X                   ::= { lifEntry 25 }
X
X               locIfInputQueueDrops OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X
X
X
X
X
X          -- cisco MIB                                         [Page 35]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "The number of packets dropped because the
X                           input queue was full."
X                   ::= { lifEntry 26 }
X
X               locIfOutputQueueDrops OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "The number of packets dropped because the
X                           output queue was full."
X                   ::= { lifEntry 27 }
X
X               locIfDescr OBJECT-TYPE
X                   SYNTAX  DisplayString
X                   ACCESS  read-write
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "User configurable interface description."
X                   ::= { lifEntry 28 }
X
X               locIfPakmon OBJECT-TYPE
X                   SYNTAX  INTEGER {
X                        enable(1),
X                        disable(2)
X                   }
X                   ACCESS  read-write
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Enable Pakmon - IGS only."
X                   ::= { lifEntry 29 }
X
X               locIfSlowInPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Packet count for Inbound traffic routed with
X                           slow switching"
X                   ::= { lifEntry 30 }
X
X               locIfSlowOutPkts OBJECT-TYPE
X                   SYNTAX  Counter
X
X
X
X
X
X          -- cisco MIB                                         [Page 36]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Packet count for Outbound traffic routed
X                           with slow switching"
X                   ::= { lifEntry 31 }
X
X               locIfSlowInOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Octet count for Inbound traffic routed with
X                           slow switching"
X                   ::= { lifEntry 32 }
X
X               locIfSlowOutOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Octet count for Outbound traffic routed with
X                           slow switching"
X                   ::= { lifEntry 33 }
X
X               locIfFastInPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Packet count for Inbound traffic routed with
X                           fast switching"
X                   ::= { lifEntry 34 }
X
X               locIfFastOutPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Packet count for Outbound traffic routed
X                           with fast switching"
X                   ::= { lifEntry 35 }
X
X               locIfFastInOctets OBJECT-TYPE
X                   SYNTAX  Counter
X
X
X
X
X
X          -- cisco MIB                                         [Page 37]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Octet count for Inbound traffic routed with
X                           fast switching"
X                   ::= { lifEntry 36 }
X
X               locIfFastOutOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Octet count for Outbound traffic routed with
X                           fast switching"
X                   ::= { lifEntry 37 }
X
X               locIfotherInPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Other protocol input packet count"
X                   ::= { lifEntry 38 }
X
X               locIfotherOutPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Other protocol output packet count"
X                   ::= { lifEntry 39 }
X
X               locIfotherInOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Other protocol input octet count"
X                   ::= { lifEntry 40 }
X
X               locIfotherOutOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X
X
X
X
X
X          -- cisco MIB                                         [Page 38]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                           "Other protocol output octet count"
X                   ::= { lifEntry 41 }
X
X               locIfipInPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "ip protocol input packet count"
X                   ::= { lifEntry 42 }
X
X               locIfipOutPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "ip protocol output packet count"
X                   ::= { lifEntry 43 }
X
X               locIfipInOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "ip protocol input octet count"
X                   ::= { lifEntry 44 }
X
X               locIfipOutOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "ip protocol output octet count"
X                   ::= { lifEntry 45 }
X
X               locIfdecnetInPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Decnet protocol input packet count"
X                   ::= { lifEntry 46 }
X
X               locIfdecnetOutPkts OBJECT-TYPE
X                   SYNTAX  Counter
X
X
X
X
X
X          -- cisco MIB                                         [Page 39]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Decnet protocol output packet count"
X                   ::= { lifEntry 47 }
X
X               locIfdecnetInOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Decnet protocol input byte count"
X                   ::= { lifEntry 48 }
X
X               locIfdecnetOutOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Decnet protocol output byte count"
X                   ::= { lifEntry 49 }
X
X               locIfxnsInPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "XNS protocol input packet count"
X                   ::= { lifEntry 50 }
X
X               locIfxnsOutPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "XNS protocol output packet count"
X                   ::= { lifEntry 51 }
X
X               locIfxnsInOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "XNS protocol input byte count"
X                   ::= { lifEntry 52 }
X
X
X
X
X
X          -- cisco MIB                                         [Page 40]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X               locIfxnsOutOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "XNS protocol output byte count"
X                   ::= { lifEntry 53 }
X
X               locIfclnsInPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "CLNS protocol input packet count"
X                   ::= { lifEntry 54 }
X
X               locIfclnsOutPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "CLNS protocol output packet count"
X                   ::= { lifEntry 55 }
X
X               locIfclnsInOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "CLNS protocol input byte count"
X                   ::= { lifEntry 56 }
X
X               locIfclnsOutOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "CLNS protocol output byte count"
X                   ::= { lifEntry 57 }
X
X               locIfappletalkInPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X
X
X
X
X
X          -- cisco MIB                                         [Page 41]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                           "Appletalk protocol input packet count"
X                   ::= { lifEntry 58 }
X
X               locIfappletalkOutPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Appletalk protocol output packet count"
X                   ::= { lifEntry 59 }
X
X               locIfappletalkInOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Appletalk protocol input octet count"
X                   ::= { lifEntry 60 }
X
X               locIfappletalkOutOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Appletalk protocol output octet count"
X                   ::= { lifEntry 61 }
X
X               locIfnovellInPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Novell protocol input packet count"
X                   ::= { lifEntry 62 }
X
X               locIfnovellOutPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Novell protocol output packet count"
X                   ::= { lifEntry 63 }
X
X               locIfnovellInOctets OBJECT-TYPE
X                   SYNTAX  Counter
X
X
X
X
X
X          -- cisco MIB                                         [Page 42]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Novell protocol input octet count"
X                   ::= { lifEntry 64 }
X
X               locIfnovellOutOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Novell protocol output octet count"
X                   ::= { lifEntry 65 }
X
X               locIfapolloInPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Apollo protocol input packet count"
X                   ::= { lifEntry 66 }
X
X               locIfapolloOutPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Apollo protocol output packet count"
X                   ::= { lifEntry 67 }
X
X               locIfapolloInOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Apollo protocol input octet count"
X                   ::= { lifEntry 68 }
X
X               locIfapolloOutOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Apollo protocol output octet count"
X                   ::= { lifEntry 69 }
X
X
X
X
X
X          -- cisco MIB                                         [Page 43]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X               locIfvinesInPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Vines protocol input packet count"
X                   ::= { lifEntry 70 }
X
X               locIfvinesOutPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Vines protocol output packet count"
X                   ::= { lifEntry 71 }
X
X               locIfvinesInOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Vines protocol input octet count"
X                   ::= { lifEntry 72 }
X
X               locIfvinesOutOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Vines protocol output octet count"
X                   ::= { lifEntry 73 }
X
X               locIfbridgedInPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Bridged protocol input packet count"
X                   ::= { lifEntry 74 }
X
X               locIfbridgedOutPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X
X
X
X
X
X          -- cisco MIB                                         [Page 44]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                           "Bridged protocol output packet count"
X                   ::= { lifEntry 75 }
X
X               locIfbridgedInOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Bridged protocol input octet count"
X                   ::= { lifEntry 76 }
X
X               locIfbridgedOutOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Bridged protocol output octet count"
X                   ::= { lifEntry 77 }
X
X               locIfsrbInPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "SRB protocol input packet count"
X                   ::= { lifEntry 78 }
X
X               locIfsrbOutPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "SRB protocol output packet count"
X                   ::= { lifEntry 79 }
X
X               locIfsrbInOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "SRB protocol input octet count"
X                   ::= { lifEntry 80 }
X
X               locIfsrbOutOctets OBJECT-TYPE
X                   SYNTAX  Counter
X
X
X
X
X
X          -- cisco MIB                                         [Page 45]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "SRB protocol output octet count"
X                   ::= { lifEntry 81 }
X
X               locIfchaosInPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Choas protocol input packet count"
X                   ::= { lifEntry 82 }
X
X               locIfchaosOutPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Choas protocol output packet count"
X                   ::= { lifEntry 83 }
X
X               locIfchaosInOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Choas protocol input octet count"
X                   ::= { lifEntry 84 }
X
X               locIfchaosOutOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Choas protocol output octet count"
X                   ::= { lifEntry 85 }
X
X               locIfpupInPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "PUP protocol input packet count"
X                   ::= { lifEntry 86 }
X
X
X
X
X
X          -- cisco MIB                                         [Page 46]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X               locIfpupOutPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "PUP protocol output packet count"
X                   ::= { lifEntry 87 }
X
X               locIfpupInOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "PUP protocol input octet count"
X                   ::= { lifEntry 88 }
X
X               locIfpupOutOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "PUP protocol output octet count"
X                   ::= { lifEntry 89 }
X
X               locIfmopInPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "MOP protocol input packet count"
X                   ::= { lifEntry 90 }
X
X               locIfmopOutPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "MOP protocol output packet count"
X                   ::= { lifEntry 91 }
X
X               locIfmopInOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X
X
X
X
X
X          -- cisco MIB                                         [Page 47]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                           "MOP protocol input octet count"
X                   ::= { lifEntry 92 }
X
X               locIfmopOutOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "MOP protocol output octet count"
X                   ::= { lifEntry 93 }
X
X               locIflanmanInPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "LanMan protocol input packet count"
X                   ::= { lifEntry 94 }
X
X               locIflanmanOutPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "LanMan protocol output packet count"
X                   ::= { lifEntry 95 }
X
X               locIflanmanInOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "LanMan protocol input octet count"
X                   ::= { lifEntry 96 }
X
X               locIflanmanOutOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "LanMan protocol output octet count"
X                   ::= { lifEntry 97 }
X
X               locIfstunInPkts OBJECT-TYPE
X                   SYNTAX  Counter
X
X
X
X
X
X          -- cisco MIB                                         [Page 48]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "STUN protocol input packet count"
X                   ::= { lifEntry 98 }
X
X               locIfstunOutPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "STUN protocol output packet count"
X                   ::= { lifEntry 99 }
X
X               locIfstunInOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "STUN protocol input octet count"
X                   ::= { lifEntry 100 }
X
X               locIfstunOutOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "STUN protocol output octet count"
X                   ::= { lifEntry 101 }
X
X               locIfspanInPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Spanning tree input protocol packet count"
X                   ::= { lifEntry 102 }
X
X               locIfspanOutPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Spanning tree output protocol packet count"
X                   ::= { lifEntry 103 }
X
X
X
X
X
X          -- cisco MIB                                         [Page 49]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X               locIfspanInOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Spanning tree input octet packet count"
X                   ::= { lifEntry 104 }
X
X               locIfspanOutOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Spanning tree output octet packet count"
X                   ::= { lifEntry 105 }
X
X               locIfarpInPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Arp protocol input packet count"
X                   ::= { lifEntry 106 }
X
X               locIfarpOutPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Arp protocol output packet count"
X                   ::= { lifEntry 107 }
X
X               locIfarpInOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Arp protocol input octet count"
X                   ::= { lifEntry 108 }
X
X               locIfarpOutOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X
X
X
X
X
X          -- cisco MIB                                         [Page 50]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                           "Arp protocol output octet count"
X                   ::= { lifEntry 109 }
X
X               locIfprobeInPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Probe protocol input packet count"
X                   ::= { lifEntry 110 }
X
X               locIfprobeOutPkts OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Probe protocol output packet count"
X                   ::= { lifEntry 111 }
X
X               locIfprobeInOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Probe protocol input octet count"
X                   ::= { lifEntry 112 }
X
X               locIfprobeOutOctets OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Probe protocol output octet count"
X                   ::= { lifEntry 113 }
X
X               -- End of table
X
X
X
X               -- Local IP Group
X
X          -- This group is present in all products which are using the
X          -- IP protocol.
X
X
X
X
X
X
X
X          -- cisco MIB                                         [Page 51]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X          -- Local IP Address Table
X
X          -- This group provides additional objects to the table
X          -- defined by RFC1156.
X
X               lipAddrTable OBJECT-TYPE
X                   SYNTAX  SEQUENCE OF LIpAddrEntry
X                   ACCESS  not-accessible
X                   STATUS  mandatory
X                   DESCRIPTION
X                            "A list of IP address entries."
X                   ::= { lip 1 }
X
X               lipAddrEntry OBJECT-TYPE
X                   SYNTAX LIpAddrEntry
X                   ACCESS  not-accessible
X                   STATUS  mandatory
X                   DESCRIPTION
X                            "A collection of additional objects in the
X                            cisco IP implementation."
X                   INDEX { ipAdEntAddr }
X               ::= { lipAddrTable 1 }
X
X               LIpAddrEntry ::=
X                   SEQUENCE {
X                       locIPHow
X                           DisplayString,
X                       locIPWho
X                           IpAddress,
X                       locIPHelper
X                           IpAddress,
X                       locIPSecurity
X                           INTEGER,
X                       locIPRedirects
X                           INTEGER,
X                       locIPUnreach
X                           INTEGER
X                   }
X
X
X          -- The following section describes the components of the
X          -- table.
X
X               locIPHow OBJECT-TYPE
X                   SYNTAX  DisplayString
X
X
X
X
X
X          -- cisco MIB                                         [Page 52]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Method of how this interface obtained its IP
X                           address."
X                   ::= { lipAddrEntry 1 }
X
X               locIPWho OBJECT-TYPE
X                   SYNTAX  IpAddress
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "IP address of who supplied this interface
X                           its IP address."
X                   ::= { lipAddrEntry 2 }
X
X               locIPHelper OBJECT-TYPE
X                   SYNTAX  IpAddress
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "IP helper address for broadcast forwarding
X                           support."
X                   ::= { lipAddrEntry 3 }
X
X               locIPSecurity OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "IP security level. See RFC 1038."
X                   ::= { lipAddrEntry 4 }
X
X               locIPRedirects OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Boolean whether ICMP redirects will be sent
X                           or not."
X                   ::= { lipAddrEntry 5 }
X
X               locIPUnreach OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X
X
X
X
X
X          -- cisco MIB                                         [Page 53]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Boolean whether ICMP unreachables will be
X                           sent or not."
X                   ::= { lipAddrEntry 6 }
X
X               -- End of table
X
X
X
X               -- Local IP Routing Table
X
X          -- This group provides additional objects to the table
X          -- defined by RFC1156.
X
X               lipRoutingTable OBJECT-TYPE
X                   SYNTAX  SEQUENCE OF LIpRouteEntry
X                   ACCESS  not-accessible
X                   STATUS  mandatory
X                   DESCRIPTION
X                            "A list of IP routing entries."
X                   ::= { lip 2 }
X
X               lipRouteEntry OBJECT-TYPE
X                   SYNTAX LIpRouteEntry
X                   ACCESS  not-accessible
X                   STATUS  mandatory
X                   DESCRIPTION
X                            "A collection of additional objects in the
X                            cisco IP routing implementation."
X                   INDEX { ipRouteDest }
X               ::= { lipRoutingTable 1 }
X
X               LIpRouteEntry ::=
X                   SEQUENCE {
X                       locRtMask
X                           IpAddress,
X                       locRtCount
X                           INTEGER,
X                       locRtUses
X                           INTEGER
X                   }
X
X
X
X
X
X
X
X
X          -- cisco MIB                                         [Page 54]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X          -- The following section describes the components of the
X          -- table.
X
X               locRtMask OBJECT-TYPE
X                   SYNTAX  IpAddress
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Routing table network mask."
X                   ::= { lipRouteEntry 1 }
X
X               locRtCount OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Number of parallel routes within routing
X                           table."
X                   ::= { lipRouteEntry 2 }
X
X               locRtUses OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Number of times this route was used in a
X                           forward operation."
X                   ::= { lipRouteEntry 3 }
X
X               -- End of table
X
X
X               actThresh OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Threshold of IP accounting records in use
X                           before IP traffic will be discarded."
X                   ::= { lip 4 }
X
X               actLostPkts OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X
X
X
X
X
X          -- cisco MIB                                         [Page 55]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   DESCRIPTION
X                           "Lost IP packets due to memory limitations."
X                   ::= { lip 5 }
X
X               actLostByts OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total bytes of lost IP packets."
X                   ::= { lip 6 }
X
X
X               -- Local IP Accounting Table
X
X          -- This group provides access to the cisco IP accounting
X          -- support.
X
X               lipAccountingTable OBJECT-TYPE
X                   SYNTAX  SEQUENCE OF LIpAccountEntry
X                   ACCESS  not-accessible
X                   STATUS  mandatory
X                   DESCRIPTION
X                            "A list of IP accounting entries."
X                   ::= { lip 7 }
X
X               lipAccountEntry OBJECT-TYPE
X                   SYNTAX LIpAccountEntry
X                   ACCESS  not-accessible
X                   STATUS  mandatory
X                   DESCRIPTION
X                            "A collection of objects necessary for IP
X                            accounting."
X                   INDEX { actSrc, actDst }
X               ::= { lipAccountingTable 1 }
X
X               LIpAccountEntry ::=
X                   SEQUENCE {
X                       actSrc
X                           IpAddress,
X                       actDst
X                           IpAddress,
X                       actPkts
X                           INTEGER,
X                       actByts
X
X
X
X
X
X          -- cisco MIB                                         [Page 56]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                           INTEGER
X                   }
X
X
X          -- The following section describes the components of the
X          -- table.
X
X               actSrc OBJECT-TYPE
X                   SYNTAX  IpAddress
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "IP Source address for host traffic matrix."
X                   ::= { lipAccountEntry 1 }
X
X               actDst OBJECT-TYPE
X                   SYNTAX  IpAddress
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "IP Destination address for host traffic
X                           matrix."
X                   ::= { lipAccountEntry 2 }
X
X               actPkts OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Number of IP packets sent from source to
X                           destination."
X                   ::= { lipAccountEntry 3 }
X
X               actByts OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total number of bytes in IP packets from
X                           source to destination."
X                   ::= { lipAccountEntry 4 }
X
X               -- End of table
X
X
X
X
X
X
X
X          -- cisco MIB                                         [Page 57]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X               actAge OBJECT-TYPE
X                   SYNTAX  TimeTicks
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "The age of the data in the current data
X                           matrix."
X                   ::= { lip 8 }
X
X
X               -- Local IP Checkpoint Accounting Table
X
X          -- This group provides access to the cisco
X          -- IP checkpoint accounting support.
X
X               lipCkAccountingTable OBJECT-TYPE
X                   SYNTAX  SEQUENCE OF LIpCkAccountEntry
X                   ACCESS  not-accessible
X                   STATUS  mandatory
X                   DESCRIPTION
X                            "A list of IP checkpoint accounting
X                            entries."
X                   ::= { lip 9 }
X
X               lipCkAccountEntry OBJECT-TYPE
X                   SYNTAX LIpCkAccountEntry
X                   ACCESS  not-accessible
X                   STATUS  mandatory
X                   DESCRIPTION
X                            "A collection of objects necessary for IP
X                            checkpoint accounting."
X                   INDEX { ckactSrc, ckactDst }
X               ::= { lipCkAccountingTable 1 }
X
X               LIpCkAccountEntry ::=
X                   SEQUENCE {
X                       ckactSrc
X                           IpAddress,
X                       ckactDst
X                           IpAddress,
X                       ckactPkts
X                           INTEGER,
X                       ckactByts
X                           INTEGER
X                   }
X
X
X
X
X
X          -- cisco MIB                                         [Page 58]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X          -- The following section describes the components of the
X          -- table.
X
X               ckactSrc OBJECT-TYPE
X                   SYNTAX  IpAddress
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "IP Source address for host in checkpoint
X                           traffic matrix."
X                   ::= { lipCkAccountEntry 1 }
X
X               ckactDst OBJECT-TYPE
X                   SYNTAX  IpAddress
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "IP Destination address for host in
X                           checkpoint traffic matrix."
X                   ::= { lipCkAccountEntry 2 }
X
X               ckactPkts OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Number of IP packets sent from source to
X                           destination in checkpoint matrix."
X                   ::= { lipCkAccountEntry 3 }
X
X               ckactByts OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total number of bytes in IP packets from
X                           source to destination in checkpoint matrix."
X                   ::= { lipCkAccountEntry 4 }
X
X               -- End of table
X
X
X               ckactAge OBJECT-TYPE
X                   SYNTAX  TimeTicks
X                   ACCESS  read-only
X
X
X
X
X
X          -- cisco MIB                                         [Page 59]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Age of data in the checkpoint matrix."
X                   ::= { lip 10 }
X
X               actCheckPoint OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-write
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Check points the accounting database. This
X                           mib variable must be read and then set with
X                           the same value for the check point to
X                           succeed. The value read and then set will be
X                           incremented after a successful set request"
X                   ::= { lip 11 }
X
X               ipNoaccess OBJECT-TYPE
X                   SYNTAX  Counter
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Total number of packets dropped due to
X                           access control failure."
X                   ::= { lip 12 }
X
X
X               -- Local TCP Group
X
X          -- This group is present in all products which are using the
X          -- TCP protocol.
X
X
X          -- Local TCP Connection Table
X
X          -- This group provides additional objects to the table defined
X          -- by RFC1156.
X
X               ltcpConnTable OBJECT-TYPE
X                   SYNTAX  SEQUENCE OF LTcpConnEntry
X                   ACCESS  not-accessible
X                   STATUS  mandatory
X                   DESCRIPTION
X                            "A list of TCP connection entries."
X                   ::= { ltcp 1 }
X
X
X
X
X
X          -- cisco MIB                                         [Page 60]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X               ltcpConnEntry OBJECT-TYPE
X                   SYNTAX LTcpConnEntry
X                   ACCESS  not-accessible
X                   STATUS  mandatory
X                   DESCRIPTION
X                            "A collection of additional objects in the
X                            cisco TCP implementation."
X                   INDEX { tcpConnLocalAddress, tcpConnLocalPort,
X                   tcpConnRemAddress, tcpConnRemPort}
X               ::= { ltcpConnTable 1 }
X
X               LTcpConnEntry ::=
X                   SEQUENCE {
X                       loctcpConnInBytes
X                           INTEGER,
X                       loctcpConnOutBytes
X                           INTEGER,
X                       loctcpConnInPkts
X                           INTEGER,
X                       loctcpConnOutPkts
X                           INTEGER,
X                       loctcpConnElapsed
X                           TimeTicks
X                   }
X
X
X          -- The following section describes the components of the
X          -- table.
X
X               loctcpConnInBytes OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Bytes input for this TCP connection."
X                   ::= { ltcpConnEntry 1 }
X
X               loctcpConnOutBytes OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Bytes output for this TCP connection."
X                   ::= { ltcpConnEntry 2 }
X
X
X
X
X
X
X          -- cisco MIB                                         [Page 61]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X               loctcpConnInPkts OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Packets input for this TCP connection."
X                   ::= { ltcpConnEntry 3 }
X
X               loctcpConnOutPkts OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Packets output for this TCP connection."
X                   ::= { ltcpConnEntry 4 }
X
X               loctcpConnElapsed OBJECT-TYPE
X                   SYNTAX  TimeTicks
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "How long this TCP connection has been
X                           established."
X                   ::= { ltcpConnEntry 5 }
X
X               -- End of table
X
X
X
X               -- Local cisco Terminal Server Group
X
X          -- This group is present in all products which contain
X          -- asynchronous terminal lines.
X
X               tsLines OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Number of terminal lines on this device.
X                           Includes virtual lines"
X                   ::= { lts 1 }
X
X
X               -- Local Terminal Server Line Table
X
X
X
X
X
X          -- cisco MIB                                         [Page 62]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X          -- This group contains terminal server specific
X          -- information on a per line basis.
X
X               ltsLineTable OBJECT-TYPE
X                   SYNTAX  SEQUENCE OF LTsLineEntry
X                   ACCESS  not-accessible
X                   STATUS  mandatory
X                   DESCRIPTION
X                            "A list of terminal server line entries."
X                   ::= { lts 2 }
X
X               ltsLineEntry OBJECT-TYPE
X                   SYNTAX LTsLineEntry
X                   ACCESS  not-accessible
X                   STATUS  mandatory
X                   DESCRIPTION
X                            "A collection of per TTY objects in the
X                            cisco Terminal Server implementation."
X                   INDEX { INTEGER }
X               ::= { ltsLineTable 1 }
X
X               LTsLineEntry ::=
X                   SEQUENCE {
X                       tsLineActive
X                           INTEGER,
X                       tsLineType
X                           INTEGER,
X                       tsLineAutobaud
X                           INTEGER,
X                       tsLineSpeedin
X                           INTEGER,
X                       tsLineSpeedout
X                           INTEGER,
X                       tsLineFlow
X                           INTEGER,
X                       tsLineModem
X                           INTEGER,
X                       tsLineLoc
X                           DisplayString,
X                       tsLineTerm
X                           DisplayString,
X                       tsLineScrlen
X                           INTEGER,
X                       tsLineScrwid
X                           INTEGER,
X
X
X
X
X
X          -- cisco MIB                                         [Page 63]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                       tsLineEsc
X                           DisplayString,
X                       tsLineTmo
X                           INTEGER,
X                       tsLineSestmo
X                           INTEGER,
X                       tsLineRotary
X                           INTEGER,
X                       tsLineUses
X                           INTEGER,
X                       tsLineNses
X                           INTEGER,
X                       tsLineUser
X                           DisplayString,
X                       tsLineNoise
X                           INTEGER
X                   }
X
X
X          -- The following section describes the components of the
X          -- table.
X
X               tsLineActive OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Boolean whether this line is active or not."
X                   ::= { ltsLineEntry 1 }
X
X               tsLineType OBJECT-TYPE
X                   SYNTAX  INTEGER {
X                        unknown(1),
X                        console(2),
X                        terminal(3),
X                        line-printer(4),
X                        virtual-terminal(5),
X                        auxiliary(6)
X                   }
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Type of line."
X                   ::= { ltsLineEntry 2 }
X
X
X
X
X
X
X          -- cisco MIB                                         [Page 64]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X               tsLineAutobaud OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Boolean whether line will autobaud or not."
X                   ::= { ltsLineEntry 3 }
X
X               tsLineSpeedin OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "What input speed the line is running at."
X                   ::= { ltsLineEntry 4 }
X
X               tsLineSpeedout OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "What output speed the line is running at."
X                   ::= { ltsLineEntry 5 }
X
X               tsLineFlow OBJECT-TYPE
X                   SYNTAX  INTEGER {
X                        unknown(1),
X                        none(2),
X                        software-input(3),
X                        software-output(4),
X                        software-both(5),
X                        hardware-input(6),
X                        hardware-output(7),
X                        hardware-both(8)
X                   }
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "What kind of flow control the line is
X                           using."
X                   ::= { ltsLineEntry 6 }
X
X               tsLineModem OBJECT-TYPE
X                   SYNTAX  INTEGER {
X                        unknown(1),
X
X
X
X
X
X          -- cisco MIB                                         [Page 65]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                        none(2),
X                        call-in(3),
X                        call-out(4),
X                        cts-required(5),
X                        rs-is-cd(6)
X                   }
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "What kind of modem control the line is
X                           using."
X                   ::= { ltsLineEntry 7 }
X
X               tsLineLoc OBJECT-TYPE
X                   SYNTAX  DisplayString
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Describes the line's physical location."
X                   ::= { ltsLineEntry 8 }
X
X               tsLineTerm OBJECT-TYPE
X                   SYNTAX  DisplayString
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Describes the line's terminal type."
X                   ::= { ltsLineEntry 9 }
X
X               tsLineScrlen OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Length in lines of the screen of terminal
X                           attached to this line."
X                   ::= { ltsLineEntry 10 }
X
X               tsLineScrwid OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Width in characters of the screen of
X                           terminal attached to this line."
X
X
X
X
X
X          -- cisco MIB                                         [Page 66]
X--
X
X
X
X
X
X          -- Request for Comments: Draft             cisco Systems, Inc.
X
X
X                   ::= { ltsLineEntry 11 }
X
X               tsLineEsc OBJECT-TYPE
X                   SYNTAX  DisplayString
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Escape character used to break out of active
X                           sessions."
X                   ::= { ltsLineEntry 12 }
X
X               tsLineTmo OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Line idleness timeout in seconds."
X                   ::= { ltsLineEntry 13 }
X
X               tsLineSestmo OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Session idleness timeout in seconds."
X                   ::= { ltsLineEntry 14 }
X
X               tsLineRotary OBJECT-TYPE
X                   SYNTAX  INTEGER
X                   ACCESS  read-only
X                   STATUS  mandatory
X                   DESCRIPTION
X                           "Rotary group number the line belongs in."
END_OF_FILE
  if test 59125 -ne `wc -c <'nocol-3.0/src/cmu-snmp/cisco.mib91.B'`; then
    echo shar: \"'nocol-3.0/src/cmu-snmp/cisco.mib91.B'\" unpacked with wrong size!
  elif test -f 'nocol-3.0/src/cmu-snmp/cisco.mib91.A' && test -f 'nocol-3.0/src/cmu-snmp/cisco.mib91.C' && test -f 'nocol-3.0/src/cmu-snmp/cisco.mib91.D'; then
    echo shar: Combining  \"'nocol-3.0/src/cmu-snmp/cisco.mib91'\" \(190589 characters\)
    cat 'nocol-3.0/src/cmu-snmp/cisco.mib91.A' 'nocol-3.0/src/cmu-snmp/cisco.mib91.B' 'nocol-3.0/src/cmu-snmp/cisco.mib91.C' 'nocol-3.0/src/cmu-snmp/cisco.mib91.D' > 'nocol-3.0/src/cmu-snmp/cisco.mib91'
    if test 190589 -ne `wc -c <'nocol-3.0/src/cmu-snmp/cisco.mib91'`; then
      echo shar: \"'nocol-3.0/src/cmu-snmp/cisco.mib91'\" combined with wrong size!
    else
      rm nocol-3.0/src/cmu-snmp/cisco.mib91.A nocol-3.0/src/cmu-snmp/cisco.mib91.B nocol-3.0/src/cmu-snmp/cisco.mib91.C nocol-3.0/src/cmu-snmp/cisco.mib91.D
    fi
  fi
  # end of 'nocol-3.0/src/cmu-snmp/cisco.mib91.B'
fi
if test -f 'nocol-3.0/src/lib/fgetline.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'nocol-3.0/src/lib/fgetline.c'\"
else
  echo shar: Extracting \"'nocol-3.0/src/lib/fgetline.c'\" \(562 characters\)
  sed "s/^X//" >'nocol-3.0/src/lib/fgetline.c' <<'END_OF_FILE'
X
X/*+	$Header: /nocol/src/pingmon/RCS/fgetline.c,v 1.1 1989/11/02 11:40:00 aggarwal Exp $
X** FUNCTION:
X**
X**	Analogous to the stdio function 'fgets' but returns the number
X** 	characters read instead of the pointer to the string read.
X**	Leaves the '\n' character and appends a null '\0' at end of string.
X**/
X
X#include <stdio.h>
X
Xint fgetline(fp, s,lim)
XFILE *fp; 
Xchar *s;
Xint lim;
X{
X    register int c,i;
X    
X    i=0;
X    while (--lim>0 && (c=getc(fp)) != EOF && c!='\n') 
X      s[i++]=c;
X    if ( c== '\n' )
X      s[i++]=c;
X    s[i]='\0';
X    return(i);
X
X}
X
END_OF_FILE
  if test 562 -ne `wc -c <'nocol-3.0/src/lib/fgetline.c'`; then
    echo shar: \"'nocol-3.0/src/lib/fgetline.c'\" unpacked with wrong size!
  fi
  # end of 'nocol-3.0/src/lib/fgetline.c'
fi
if test -f 'nocol-3.0/src/lib/random.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'nocol-3.0/src/lib/random.c'\"
else
  echo shar: Extracting \"'nocol-3.0/src/lib/random.c'\" \(12893 characters\)
  sed "s/^X//" >'nocol-3.0/src/lib/random.c' <<'END_OF_FILE'
X/* $Header: /home/aggarwal/lsrc/nocol/src/lib/RCS/random.c,v 1.1 1993/10/27 02:08:30 aggarwal Exp $
X/*
X * Copyright (c) 1983 Regents of the University of California.
X * All rights reserved.
X *
X * Redistribution and use in source and binary forms are permitted
X * provided that the above copyright notice and this paragraph are
X * duplicated in all such forms and that any documentation,
X * advertising materials, and other materials related to such
X * distribution and use acknowledge that the software was developed
X * by the University of California, Berkeley.  The name of the
X * University may not be used to endorse or promote products derived
X * from this software without specific prior written permission.
X * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
X * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
X * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
X */
X
X#if defined(LIBC_SCCS) && !defined(lint)
Xstatic char sccsid[] = "@(#)random.c	5.5 (Berkeley) 7/6/88";
X#endif /* LIBC_SCCS and not lint */
X
X#include <stdio.h>
X
X/*
X * random.c:
X * An improved random number generation package.  In addition to the standard
X * rand()/srand() like interface, this package also has a special state info
X * interface.  The initstate() routine is called with a seed, an array of
X * bytes, and a count of how many bytes are being passed in; this array is then
X * initialized to contain information for random number generation with that
X * much state information.  Good sizes for the amount of state information are
X * 32, 64, 128, and 256 bytes.  The state can be switched by calling the
X * setstate() routine with the same array as was initiallized with initstate().
X * By default, the package runs with 128 bytes of state information and
X * generates far better random numbers than a linear congruential generator.
X * If the amount of state information is less than 32 bytes, a simple linear
X * congruential R.N.G. is used.
X * Internally, the state information is treated as an array of longs; the
X * zeroeth element of the array is the type of R.N.G. being used (small
X * integer); the remainder of the array is the state information for the
X * R.N.G.  Thus, 32 bytes of state information will give 7 longs worth of
X * state information, which will allow a degree seven polynomial.  (Note: the 
X * zeroeth word of state information also has some other information stored
X * in it -- see setstate() for details).
X * The random number generation technique is a linear feedback shift register
X * approach, employing trinomials (since there are fewer terms to sum up that
X * way).  In this approach, the least significant bit of all the numbers in
X * the state table will act as a linear feedback shift register, and will have
X * period 2^deg - 1 (where deg is the degree of the polynomial being used,
X * assuming that the polynomial is irreducible and primitive).  The higher
X * order bits will have longer periods, since their values are also influenced
X * by pseudo-random carries out of the lower bits.  The total period of the
X * generator is approximately deg*(2**deg - 1); thus doubling the amount of
X * state information has a vast influence on the period of the generator.
X * Note: the deg*(2**deg - 1) is an approximation only good for large deg,
X * when the period of the shift register is the dominant factor.  With deg
X * equal to seven, the period is actually much longer than the 7*(2**7 - 1)
X * predicted by this formula.
X */
X
X
X
X/*
X * For each of the currently supported random number generators, we have a
X * break value on the amount of state information (you need at least this
X * many bytes of state info to support this random number generator), a degree
X * for the polynomial (actually a trinomial) that the R.N.G. is based on, and
X * the separation between the two lower order coefficients of the trinomial.
X */
X
X#define		TYPE_0		0		/* linear congruential */
X#define		BREAK_0		8
X#define		DEG_0		0
X#define		SEP_0		0
X
X#define		TYPE_1		1		/* x**7 + x**3 + 1 */
X#define		BREAK_1		32
X#define		DEG_1		7
X#define		SEP_1		3
X
X#define		TYPE_2		2		/* x**15 + x + 1 */
X#define		BREAK_2		64
X#define		DEG_2		15
X#define		SEP_2		1
X
X#define		TYPE_3		3		/* x**31 + x**3 + 1 */
X#define		BREAK_3		128
X#define		DEG_3		31
X#define		SEP_3		3
X
X#define		TYPE_4		4		/* x**63 + x + 1 */
X#define		BREAK_4		256
X#define		DEG_4		63
X#define		SEP_4		1
X
X
X/*
X * Array versions of the above information to make code run faster -- relies
X * on fact that TYPE_i == i.
X */
X
X#define		MAX_TYPES	5		/* max number of types above */
X
Xstatic  int		degrees[ MAX_TYPES ]	= { DEG_0, DEG_1, DEG_2,
X								DEG_3, DEG_4 };
X
Xstatic  int		seps[ MAX_TYPES ]	= { SEP_0, SEP_1, SEP_2,
X								SEP_3, SEP_4 };
X
X
X
X/*
X * Initially, everything is set up as if from :
X *		initstate( 1, &randtbl, 128 );
X * Note that this initialization takes advantage of the fact that srandom()
X * advances the front and rear pointers 10*rand_deg times, and hence the
X * rear pointer which starts at 0 will also end up at zero; thus the zeroeth
X * element of the state information, which contains info about the current
X * position of the rear pointer is just
X *	MAX_TYPES*(rptr - state) + TYPE_3 == TYPE_3.
X */
X
Xstatic  long		randtbl[ DEG_3 + 1 ]	= { TYPE_3,
X			    0x9a319039, 0x32d9c024, 0x9b663182, 0x5da1f342, 
X			    0xde3b81e0, 0xdf0a6fb5, 0xf103bc02, 0x48f340fb, 
X			    0x7449e56b, 0xbeb1dbb0, 0xab5c5918, 0x946554fd, 
X			    0x8c2e680f, 0xeb3d799f, 0xb11ee0b7, 0x2d436b86, 
X			    0xda672e2a, 0x1588ca88, 0xe369735d, 0x904f35f7, 
X			    0xd7158fd6, 0x6fa6f051, 0x616e6b96, 0xac94efdc, 
X			    0x36413f93, 0xc622c298, 0xf5a42ab8, 0x8a88d77b, 
X					0xf5ad9d0e, 0x8999220b, 0x27fb47b9 };
X
X/*
X * fptr and rptr are two pointers into the state info, a front and a rear
X * pointer.  These two pointers are always rand_sep places aparts, as they cycle
X * cyclically through the state information.  (Yes, this does mean we could get
X * away with just one pointer, but the code for random() is more efficient this
X * way).  The pointers are left positioned as they would be from the call
X *			initstate( 1, randtbl, 128 )
X * (The position of the rear pointer, rptr, is really 0 (as explained above
X * in the initialization of randtbl) because the state table pointer is set
X * to point to randtbl[1] (as explained below).
X */
X
Xstatic  long		*fptr			= &randtbl[ SEP_3 + 1 ];
Xstatic  long		*rptr			= &randtbl[ 1 ];
X
X
X
X/*
X * The following things are the pointer to the state information table,
X * the type of the current generator, the degree of the current polynomial
X * being used, and the separation between the two pointers.
X * Note that for efficiency of random(), we remember the first location of
X * the state information, not the zeroeth.  Hence it is valid to access
X * state[-1], which is used to store the type of the R.N.G.
X * Also, we remember the last location, since this is more efficient than
X * indexing every time to find the address of the last element to see if
X * the front and rear pointers have wrapped.
X */
X
Xstatic  long		*state			= &randtbl[ 1 ];
X
Xstatic  int		rand_type		= TYPE_3;
Xstatic  int		rand_deg		= DEG_3;
Xstatic  int		rand_sep		= SEP_3;
X
Xstatic  long		*end_ptr		= &randtbl[ DEG_3 + 1 ];
X
X
X
X/*
X * srandom:
X * Initialize the random number generator based on the given seed.  If the
X * type is the trivial no-state-information type, just remember the seed.
X * Otherwise, initializes state[] based on the given "seed" via a linear
X * congruential generator.  Then, the pointers are set to known locations
X * that are exactly rand_sep places apart.  Lastly, it cycles the state
X * information a given number of times to get rid of any initial dependencies
X * introduced by the L.C.R.N.G.
X * Note that the initialization of randtbl[] for default usage relies on
X * values produced by this routine.
X */
X
Xsrandom( x )
X
X    unsigned		x;
X{
X    	register  int		i, j;
X	long random();
X
X	if(  rand_type  ==  TYPE_0  )  {
X	    state[ 0 ] = x;
X	}
X	else  {
X	    j = 1;
X	    state[ 0 ] = x;
X	    for( i = 1; i < rand_deg; i++ )  {
X		state[i] = 1103515245*state[i - 1] + 12345;
X	    }
X	    fptr = &state[ rand_sep ];
X	    rptr = &state[ 0 ];
X	    for( i = 0; i < 10*rand_deg; i++ )  random();
X	}
X}
X
X
X
X/*
X * initstate:
X * Initialize the state information in the given array of n bytes for
X * future random number generation.  Based on the number of bytes we
X * are given, and the break values for the different R.N.G.'s, we choose
X * the best (largest) one we can and set things up for it.  srandom() is
X * then called to initialize the state information.
X * Note that on return from srandom(), we set state[-1] to be the type
X * multiplexed with the current value of the rear pointer; this is so
X * successive calls to initstate() won't lose this information and will
X * be able to restart with setstate().
X * Note: the first thing we do is save the current state, if any, just like
X * setstate() so that it doesn't matter when initstate is called.
X * Returns a pointer to the old state.
X */
X
Xchar  *
Xinitstate( seed, arg_state, n )
X
X    unsigned		seed;			/* seed for R. N. G. */
X    char		*arg_state;		/* pointer to state array */
X    int			n;			/* # bytes of state info */
X{
X	register  char		*ostate		= (char *)( &state[ -1 ] );
X
X	if(  rand_type  ==  TYPE_0  )  state[ -1 ] = rand_type;
X	else  state[ -1 ] = MAX_TYPES*(rptr - state) + rand_type;
X	if(  n  <  BREAK_1  )  {
X	    if(  n  <  BREAK_0  )  {
X		fprintf( stderr, "initstate: not enough state (%d bytes) with which to do jack; ignored.\n", n );
X		return;
X	    }
X	    rand_type = TYPE_0;
X	    rand_deg = DEG_0;
X	    rand_sep = SEP_0;
X	}
X	else  {
X	    if(  n  <  BREAK_2  )  {
X		rand_type = TYPE_1;
X		rand_deg = DEG_1;
X		rand_sep = SEP_1;
X	    }
X	    else  {
X		if(  n  <  BREAK_3  )  {
X		    rand_type = TYPE_2;
X		    rand_deg = DEG_2;
X		    rand_sep = SEP_2;
X		}
X		else  {
X		    if(  n  <  BREAK_4  )  {
X			rand_type = TYPE_3;
X			rand_deg = DEG_3;
X			rand_sep = SEP_3;
X		    }
X		    else  {
X			rand_type = TYPE_4;
X			rand_deg = DEG_4;
X			rand_sep = SEP_4;
X		    }
X		}
X	    }
X	}
X	state = &(  ( (long *)arg_state )[1]  );	/* first location */
X	end_ptr = &state[ rand_deg ];	/* must set end_ptr before srandom */
X	srandom( seed );
X	if(  rand_type  ==  TYPE_0  )  state[ -1 ] = rand_type;
X	else  state[ -1 ] = MAX_TYPES*(rptr - state) + rand_type;
X	return( ostate );
X}
X
X
X
X/*
X * setstate:
X * Restore the state from the given state array.
X * Note: it is important that we also remember the locations of the pointers
X * in the current state information, and restore the locations of the pointers
X * from the old state information.  This is done by multiplexing the pointer
X * location into the zeroeth word of the state information.
X * Note that due to the order in which things are done, it is OK to call
X * setstate() with the same state as the current state.
X * Returns a pointer to the old state information.
X */
X
Xchar  *
Xsetstate( arg_state )
X
X    char		*arg_state;
X{
X	register  long		*new_state	= (long *)arg_state;
X	register  int		type		= new_state[0]%MAX_TYPES;
X	register  int		rear		= new_state[0]/MAX_TYPES;
X	char			*ostate		= (char *)( &state[ -1 ] );
X
X	if(  rand_type  ==  TYPE_0  )  state[ -1 ] = rand_type;
X	else  state[ -1 ] = MAX_TYPES*(rptr - state) + rand_type;
X	switch(  type  )  {
X	    case  TYPE_0:
X	    case  TYPE_1:
X	    case  TYPE_2:
X	    case  TYPE_3:
X	    case  TYPE_4:
X		rand_type = type;
X		rand_deg = degrees[ type ];
X		rand_sep = seps[ type ];
X		break;
X
X	    default:
X		fprintf( stderr, "setstate: state info has been munged; not changed.\n" );
X	}
X	state = &new_state[ 1 ];
X	if(  rand_type  !=  TYPE_0  )  {
X	    rptr = &state[ rear ];
X	    fptr = &state[ (rear + rand_sep)%rand_deg ];
X	}
X	end_ptr = &state[ rand_deg ];		/* set end_ptr too */
X	return( ostate );
X}
X
X
X
X/*
X * random:
X * If we are using the trivial TYPE_0 R.N.G., just do the old linear
X * congruential bit.  Otherwise, we do our fancy trinomial stuff, which is the
X * same in all ther other cases due to all the global variables that have been
X * set up.  The basic operation is to add the number at the rear pointer into
X * the one at the front pointer.  Then both pointers are advanced to the next
X * location cyclically in the table.  The value returned is the sum generated,
X * reduced to 31 bits by throwing away the "least random" low bit.
X * Note: the code takes advantage of the fact that both the front and
X * rear pointers can't wrap on the same call by not testing the rear
X * pointer if the front one has wrapped.
X * Returns a 31-bit random number.
X */
X
Xlong
Xrandom()
X{
X	long		i;
X	
X	if(  rand_type  ==  TYPE_0  )  {
X	    i = state[0] = ( state[0]*1103515245 + 12345 )&0x7fffffff;
X	}
X	else  {
X	    *fptr += *rptr;
X	    i = (*fptr >> 1)&0x7fffffff;	/* chucking least random bit */
X	    if(  ++fptr  >=  end_ptr  )  {
X		fptr = state;
X		++rptr;
X	    }
X	    else  {
X		if(  ++rptr  >=  end_ptr  )  rptr = state;
X	    }
X	}
X	return( i );
X}
X
END_OF_FILE
  if test 12893 -ne `wc -c <'nocol-3.0/src/lib/random.c'`; then
    echo shar: \"'nocol-3.0/src/lib/random.c'\" unpacked with wrong size!
  fi
  # end of 'nocol-3.0/src/lib/random.c'
fi
echo shar: End of archive 5 \(of 26\).
cp /dev/null ark5isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 26 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0
exit 0 # Just in case...
