Newsgroups: comp.sources.misc
From: woo@playfair.stanford.edu ("Alexander Woo")
Subject: v40i023:  gnuplot - interactive function plotting utility, Part11/33
Message-ID: <1993Oct21.144541.2099@sparky.sterling.com>
X-Md4-Signature: fe09095fdefb3c1151faeefc4264e809
Sender: kent@sparky.sterling.com (Kent Landfield)
Organization: Sterling Software
Date: Thu, 21 Oct 1993 14:45:41 GMT
Approved: kent@sparky.sterling.com

Submitted-by: woo@playfair.stanford.edu ("Alexander Woo")
Posting-number: Volume 40, Issue 23
Archive-name: gnuplot/part11
Environment: UNIX, MS-DOS, VMS
Supersedes: gnuplot3: Volume 24, Issue 23-48

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# Contents:  gnuplot/demo/whale.dat.B gnuplot/term/fg.trm
#   gnuplot/term/tpic.trm
# Wrapped by kent@sparky on Wed Oct 20 17:14:44 1993
PATH=/bin:/usr/bin:/usr/ucb:/usr/local/bin:/usr/lbin ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 11 (of 33)."'
if test -f 'gnuplot/demo/whale.dat.B' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'gnuplot/demo/whale.dat.B'\"
else
  echo shar: Extracting \"'gnuplot/demo/whale.dat.B'\" \(46303 characters\)
  sed "s/^X//" >'gnuplot/demo/whale.dat.B' <<'END_OF_FILE'
X
X   0.00000    0.00000    0.00000
X   0.05719    0.04818   -0.06177
X   0.22484    0.12990   -0.16843
X   0.44638    0.21135   -0.28294
X   0.67368    0.26595   -0.37849
X   0.90354    0.30481   -0.45056
X   1.13342    0.34377   -0.51117
X   1.36865    0.37634   -0.56431
X   1.59817    0.39745   -0.60826
X   1.82134    0.40949   -0.64500
X   2.05379    0.41638   -0.67818
X   2.30457    0.41952   -0.70696
X   2.56975    0.41549   -0.71590
X   2.82079    0.40200   -0.70017
X   3.06428    0.38524   -0.67566
X   3.31133    0.36592   -0.64125
X   3.56017    0.34410   -0.59437
X   3.81062    0.31931   -0.53091
X   4.05615    0.29227   -0.45172
X   4.29470    0.26372   -0.35951
X   4.52624    0.23410   -0.25502
X   4.74869    0.20419   -0.13851
X   4.96037    0.17584   -0.01424
X   5.16539    0.15173    0.10792
X   5.37190    0.13486    0.22145
X   5.58575    0.12831    0.32229
X   5.79983    0.13359    0.40056
X   6.00317    0.13602    0.45594
X   6.17511    0.12753    0.49258
X   6.18099    0.12793    0.49453
X   6.19137    0.12894    0.49796
X   6.24827    0.11736    0.50406
X   6.32143    0.10456    0.51242
X   6.39459    0.09023    0.52434
X   6.46774    0.07726    0.53532
X   6.54090    0.06451    0.54626
X   6.61406    0.05098    0.55644
X   6.68722    0.03700    0.56854
X   6.76038    0.01906    0.58948
X   6.83354    0.00000    0.61392
X
X   0.00000    0.00000    0.00000
X   0.05699    0.03667   -0.06610
X   0.22428    0.09506   -0.17709
X   0.44510    0.15322   -0.29684
X   0.67141    0.19685   -0.40336
X   0.90049    0.22896   -0.48415
X   1.12996    0.25806   -0.54834
X   1.36532    0.28191   -0.60396
X   1.59436    0.29792   -0.65056
X   1.81634    0.30794   -0.69029
X   2.04832    0.31466   -0.72690
X   2.30048    0.31881   -0.75921
X   2.56874    0.31742   -0.77055
X   2.82154    0.30922   -0.75665
X   3.06616    0.29865   -0.73372
X   3.31496    0.28576   -0.69993
X   3.56610    0.27025   -0.65206
X   3.81913    0.25143   -0.58521
X   4.06667    0.23001   -0.50074
X   4.30640    0.20717   -0.40256
X   4.53868    0.18391   -0.29262
X   4.76193    0.16162   -0.17266
X   4.97429    0.14146   -0.04696
X   5.17906    0.12432    0.07624
X   5.38465    0.11166    0.19135
X   5.59782    0.10594    0.29420
X   5.80964    0.10811    0.37429
X   6.00843    0.10780    0.43190
X   6.17511    0.09724    0.46901
X   6.18099    0.09701    0.47113
X   6.19137    0.09789    0.47487
X   6.24827    0.08863    0.48456
X   6.32143    0.07911    0.49593
X   6.39459    0.06762    0.51119
X   6.46774    0.05775    0.52461
X   6.54090    0.04818    0.53759
X   6.61406    0.03817    0.54962
X   6.68722    0.02806    0.56392
X   6.76038    0.01436    0.58713
X   6.83354    0.00000    0.61392
X
X   0.00000    0.00000    0.00000
X   0.05682    0.02342   -0.06971
X   0.22388    0.06128   -0.18315
X   0.44434    0.09965   -0.30516
X   0.66993    0.13008   -0.41968
X   0.89842    0.15245   -0.50694
X   1.12764    0.17170   -0.57334
X   1.36309    0.18739   -0.63053
X   1.59179    0.19822   -0.67907
X   1.81293    0.20538   -0.72111
X   2.04455    0.21057   -0.76040
X   2.29764    0.21413   -0.79543
X   2.56803    0.21398   -0.80874
X   2.82207    0.20966   -0.79707
X   3.06754    0.20385   -0.77639
X   3.31768    0.19626   -0.74400
X   3.57060    0.18642   -0.69589
X   3.82557    0.17361   -0.62628
X   4.07448    0.15850   -0.53714
X   4.31497    0.14246   -0.43409
X   4.54808    0.12682   -0.32102
X   4.77323    0.11327   -0.20180
X   4.98818    0.10207   -0.07962
X   5.19417    0.09225    0.04122
X   5.39899    0.08377    0.15751
X   5.61091    0.07885    0.26374
X   5.81972    0.07865    0.34728
X   6.01360    0.07678    0.40821
X   6.17511    0.06572    0.44711
X   6.18099    0.06528    0.44927
X   6.19137    0.06591    0.45309
X   6.24827    0.05941    0.46580
X   6.32143    0.05321    0.48015
X   6.39459    0.04506    0.49797
X   6.46774    0.03839    0.51361
X   6.54090    0.03201    0.52862
X   6.61406    0.02541    0.54271
X   6.68722    0.01887    0.55980
X   6.76038    0.00961    0.58489
X   6.83354    0.00000    0.61392
X
X   0.00000    0.00000    0.00000
X   0.05666    0.01133   -0.07309
X   0.22354    0.03007   -0.18837
X   0.44386    0.04921   -0.31036
X   0.66916    0.06453   -0.42809
X   0.89738    0.07578   -0.51845
X   1.12639    0.08548   -0.58670
X   1.36181    0.09345   -0.64568
X   1.59028    0.09901   -0.69590
X   1.81090    0.10275   -0.73950
X   2.04231    0.10551   -0.78032
X   2.29597    0.10745   -0.81669
X   2.56761    0.10759   -0.83109
X   2.82240    0.10586   -0.82137
X   3.06840    0.10345   -0.80280
X   3.31940    0.10002   -0.77180
X   3.57344    0.09523   -0.72359
X   3.82952    0.08857   -0.65145
X   4.07899    0.08054   -0.55817
X   4.31976    0.07221   -0.45171
X   4.55394    0.06473   -0.33874
X   4.78257    0.05944   -0.22590
X   5.00271    0.05598   -0.11377
X   5.21187    0.05257    0.00023
X   5.41601    0.04828    0.11732
X   5.62577    0.04484    0.22915
X   5.83058    0.04358    0.31820
X   6.01895    0.04161    0.38376
X   6.17511    0.03317    0.42678
X   6.18099    0.03285    0.42881
X   6.19137    0.03322    0.43240
X   6.24827    0.02984    0.44760
X   6.32143    0.02684    0.46519
X   6.39459    0.02252    0.48471
X   6.46774    0.01916    0.50240
X   6.54090    0.01597    0.51945
X   6.61406    0.01269    0.53573
X   6.68722    0.00949    0.55613
X   6.76038    0.00482    0.58274
X   6.83354    0.00000    0.61392
X
X   0.00000    0.00000    0.00000
X   0.05650    0.00000   -0.07646
X   0.22306    0.00000   -0.19580
X   0.44300    0.00000   -0.31974
X   0.66892    0.00000   -0.43078
X   0.89723    0.00000   -0.52011
X   1.12589    0.00000   -0.59209
X   1.36142    0.00000   -0.65031
X   1.58968    0.00000   -0.70251
X   1.81009    0.00000   -0.74687
X   2.04147    0.00000   -0.78774
X   2.29542    0.00000   -0.82368
X   2.56749    0.00000   -0.83806
X   2.82251    0.00000   -0.82964
X   3.06872    0.00000   -0.81249
X   3.32005    0.00000   -0.78231
X   3.57447    0.00000   -0.73359
X   3.83066    0.00000   -0.65873
X   4.07975    0.00000   -0.56170
X   4.32027    0.00000   -0.45357
X   4.55598    0.00000   -0.34491
X   4.79025    0.00000   -0.24572
X   5.01903    0.00000   -0.15212
X   5.23394    0.00000   -0.05092
X   5.43735    0.00000    0.06694
X   5.64353    0.00000    0.18782
X   5.84296    0.00000    0.28504
X   6.02481    0.00000    0.35695
X   6.17511    0.00000    0.40747
X   6.18099    0.00000    0.40932
X   6.19137    0.00000    0.41256
X   6.24827    0.00000    0.42984
X   6.32143    0.00000    0.45107
X   6.39459    0.00000    0.47142
X   6.46774    0.00000    0.49106
X   6.54090    0.00000    0.51013
X   6.61406    0.00000    0.52870
X   6.68722   -0.00002    0.55283
X   6.76038    0.00000    0.58064
X   6.83354    0.00000    0.61392
X
X
X   0.00000    0.00000    0.00000
X   0.05918   -0.12167   -0.01906
X   0.23201   -0.28255   -0.05808
X   0.46255   -0.43089   -0.10707
X   0.69414   -0.51969   -0.15381
X   0.92732   -0.57765   -0.18834
X   1.16111   -0.63573   -0.21353
X   1.39621   -0.68174   -0.23662
X   1.62950   -0.70779   -0.26033
X   1.86113   -0.71617   -0.28494
X   2.09525   -0.71311   -0.30955
X   2.33401   -0.70213   -0.33169
X   2.57671   -0.67892   -0.34046
X   2.81593   -0.64095   -0.33422
X   3.05282   -0.59896   -0.32240
X   3.29045   -0.55567   -0.30378
X   3.52752   -0.51225   -0.27631
X   3.76451   -0.46917   -0.23682
X   3.99887   -0.42714   -0.18483
X   4.23003   -0.38633   -0.12164
X   4.45769   -0.34693   -0.04783
X   4.68071   -0.30936    0.03689
X   4.89780   -0.27337    0.13283
X   5.11030   -0.23709    0.23555
X   5.32325   -0.20399    0.33632
X   5.53855   -0.18905    0.43216
X   5.75613   -0.19438    0.51760
X   5.97671   -0.21655    0.57700
X   6.17511   -0.23920    0.59790
X   6.18099   -0.24745    0.60590
X   6.19137   -0.24422    0.60120
X   6.24827   -0.22671    0.58967
X   6.32143   -0.20408    0.58179
X   6.39459   -0.18119    0.57597
X   6.46774   -0.15776    0.57331
X   6.54090   -0.13244    0.57536
X   6.61406   -0.10329    0.58155
X   6.68722   -0.07054    0.59077
X   6.76038   -0.03578    0.60198
X   6.83354    0.00000    0.61392
X
X   0.00000    0.00000    0.00000
X   0.05850   -0.10685   -0.03370
X   0.22937   -0.25332   -0.09871
X   0.45652   -0.38710   -0.17258
X   0.68698   -0.46627   -0.23243
X   0.91936   -0.52145   -0.27611
X   1.15190   -0.58103   -0.31252
X   1.38707   -0.62979   -0.34532
X   1.61920   -0.65805   -0.37477
X   1.84825   -0.66860   -0.40150
X   2.08212   -0.66814   -0.42634
X   2.32491   -0.66020   -0.44777
X   2.57461   -0.64120   -0.45408
X   2.81736   -0.60780   -0.44240
X   3.05612   -0.57009   -0.42426
X   3.29633   -0.53066   -0.39882
X   3.53653   -0.49067   -0.36413
X   3.77708   -0.45057   -0.31701
X   4.01442   -0.41100   -0.25731
X   4.24765   -0.37185   -0.18644
X   4.47655   -0.33273   -0.10484
X   4.69968   -0.29337   -0.01203
X   4.91532   -0.25494    0.09163
X   5.12534   -0.21910    0.20072
X   5.33620   -0.19003    0.30575
X   5.55092   -0.17768    0.40337
X   5.76779   -0.18571    0.48639
X   5.98418   -0.20103    0.54282
X   6.17511   -0.21204    0.57076
X   6.18099   -0.21391    0.57205
X   6.19137   -0.21636    0.57432
X   6.24827   -0.20003    0.56742
X   6.32143   -0.17940    0.56416
X   6.39459   -0.15837    0.56320
X   6.46774   -0.13729    0.56456
X   6.54090   -0.11507    0.56900
X   6.61406   -0.09002    0.57566
X   6.68722   -0.06239    0.58486
X   6.76038   -0.03216    0.59817
X   6.83354    0.00000    0.61392
X
X   0.00000    0.00000    0.00000
X   0.05796   -0.08840   -0.04520
X   0.22733   -0.21477   -0.13012
X   0.45187   -0.33130   -0.22322
X   0.68126   -0.40215   -0.29524
X   0.91282   -0.45337   -0.34815
X   1.14424   -0.50929   -0.39490
X   1.37938   -0.55580   -0.43676
X   1.61044   -0.58369   -0.47202
X   1.83717   -0.59597   -0.50180
X   2.07064   -0.59884   -0.52838
X   2.31682   -0.59528   -0.55088
X   2.57271   -0.58177   -0.55656
X   2.81868   -0.55475   -0.54144
X   3.05919   -0.52342   -0.51892
X   3.30187   -0.48992   -0.48839
X   3.54514   -0.45517   -0.44790
X   3.78918   -0.41942   -0.39416
X   4.02945   -0.38327   -0.32729
X   4.26464   -0.34666   -0.24894
X   4.49460   -0.30908   -0.15938
X   4.71754   -0.27020   -0.05812
X   4.93153   -0.23212    0.05355
X   5.13913   -0.19842    0.16876
X   5.34825   -0.17332    0.27730
X   5.56275   -0.16395    0.37582
X   5.77881   -0.17167    0.45686
X   5.99113   -0.18308    0.51104
X   6.17511   -0.18482    0.54369
X   6.18099   -0.18607    0.54525
X   6.19137   -0.18798    0.54800
X   6.24827   -0.17299    0.54564
X   6.32143   -0.15462    0.54668
X   6.39459   -0.13560    0.55034
X   6.46774   -0.11702    0.55534
X   6.54090   -0.09794    0.56204
X   6.61406   -0.07688    0.56950
X   6.68722   -0.05412    0.57913
X   6.76038   -0.02808    0.59487
X   6.83354    0.00000    0.61392
X
X   0.00000    0.00000    0.00000
X   0.05731   -0.07154   -0.05922
X   0.22562   -0.17489   -0.15646
X   0.44858   -0.27117   -0.25901
X   0.67697   -0.33375   -0.34235
X   0.90759   -0.38021   -0.40584
X   1.13810   -0.42872   -0.46088
X   1.37327   -0.46909   -0.50943
X   1.60346   -0.49423   -0.54949
X   1.82822   -0.50705   -0.58276
X   2.06119   -0.51266   -0.61240
X   2.31001   -0.51319   -0.63766
X   2.57107   -0.50500   -0.64444
X   2.81983   -0.48496   -0.62806
X   3.06193   -0.46099   -0.60348
X   3.30692   -0.43452   -0.56999
X   3.55310   -0.40610   -0.52546
X   3.80048   -0.37562   -0.46625
X   4.04351   -0.34369   -0.39284
X   4.28050   -0.31058   -0.30727
X   4.51135   -0.27609   -0.21000
X   4.73409   -0.24029   -0.10081
X   4.94666   -0.20561    0.01798
X   5.15222   -0.17590    0.13842
X   5.35988   -0.15481    0.24983
X   5.57426   -0.14754    0.34904
X   5.78950   -0.15455    0.42822
X   5.99742   -0.16111    0.48223
X   6.17511   -0.15659    0.51767
X   6.18099   -0.15757    0.51940
X   6.19137   -0.15891    0.52245
X   6.24827   -0.14546    0.52446
X   6.32143   -0.12969    0.52940
X   6.39459   -0.11288    0.53739
X   6.46774   -0.09701    0.54560
X   6.54090   -0.08108    0.55446
X   6.61406   -0.06387    0.56309
X   6.68722   -0.04566    0.57366
X   6.76038   -0.02367    0.59201
X   6.83354    0.00000    0.61392
X
X   0.00000    0.00000    0.00000
X   0.05719   -0.04818   -0.06177
X   0.22484   -0.12990   -0.16843
X   0.44638   -0.21135   -0.28294
X   0.67368   -0.26595   -0.37849
X   0.90354   -0.30481   -0.45056
X   1.13342   -0.34377   -0.51117
X   1.36865   -0.37634   -0.56431
X   1.59817   -0.39745   -0.60826
X   1.82134   -0.40949   -0.64500
X   2.05379   -0.41638   -0.67818
X   2.30457   -0.41952   -0.70696
X   2.56975   -0.41549   -0.71590
X   2.82079   -0.40200   -0.70017
X   3.06428   -0.38524   -0.67566
X   3.31133   -0.36592   -0.64125
X   3.56017   -0.34410   -0.59437
X   3.81062   -0.31931   -0.53091
X   4.05615   -0.29227   -0.45172
X   4.29470   -0.26372   -0.35951
X   4.52624   -0.23410   -0.25502
X   4.74869   -0.20419   -0.13851
X   4.96037   -0.17584   -0.01424
X   5.16539   -0.15173    0.10792
X   5.37190   -0.13486    0.22145
X   5.58575   -0.12831    0.32229
X   5.79983   -0.13359    0.40056
X   6.00317   -0.13602    0.45594
X   6.17511   -0.12753    0.49258
X   6.18099   -0.12793    0.49453
X   6.19137   -0.12894    0.49796
X   6.24827   -0.11736    0.50406
X   6.32143   -0.10456    0.51242
X   6.39459   -0.09023    0.52434
X   6.46774   -0.07726    0.53532
X   6.54090   -0.06451    0.54626
X   6.61406   -0.05098    0.55644
X   6.68722   -0.03700    0.56854
X   6.76038   -0.01906    0.58948
X   6.83354    0.00000    0.61392
X
X   0.00000    0.00000    0.00000
X   0.05699   -0.03667   -0.06610
X   0.22428   -0.09506   -0.17709
X   0.44510   -0.15322   -0.29684
X   0.67141   -0.19685   -0.40336
X   0.90049   -0.22896   -0.48415
X   1.12996   -0.25806   -0.54834
X   1.36532   -0.28191   -0.60396
X   1.59436   -0.29792   -0.65056
X   1.81634   -0.30794   -0.69029
X   2.04832   -0.31466   -0.72690
X   2.30048   -0.31881   -0.75921
X   2.56874   -0.31742   -0.77055
X   2.82154   -0.30922   -0.75665
X   3.06616   -0.29865   -0.73372
X   3.31496   -0.28576   -0.69993
X   3.56610   -0.27025   -0.65206
X   3.81913   -0.25143   -0.58521
X   4.06667   -0.23001   -0.50074
X   4.30640   -0.20717   -0.40256
X   4.53868   -0.18391   -0.29262
X   4.76193   -0.16162   -0.17266
X   4.97429   -0.14146   -0.04696
X   5.17906   -0.12432    0.07624
X   5.38465   -0.11166    0.19135
X   5.59782   -0.10594    0.29420
X   5.80964   -0.10811    0.37429
X   6.00843   -0.10780    0.43190
X   6.17511   -0.09724    0.46901
X   6.18099   -0.09701    0.47113
X   6.19137   -0.09789    0.47487
X   6.24827   -0.08863    0.48456
X   6.32143   -0.07911    0.49593
X   6.39459   -0.06762    0.51119
X   6.46774   -0.05775    0.52461
X   6.54090   -0.04818    0.53759
X   6.61406   -0.03817    0.54962
X   6.68722   -0.02806    0.56392
X   6.76038   -0.01436    0.58713
X   6.83354    0.00000    0.61392
X
X   0.00000    0.00000    0.00000
X   0.05682   -0.02342   -0.06971
X   0.22388   -0.06128   -0.18315
X   0.44434   -0.09965   -0.30516
X   0.66993   -0.13008   -0.41968
X   0.89842   -0.15245   -0.50694
X   1.12764   -0.17170   -0.57334
X   1.36309   -0.18739   -0.63053
X   1.59179   -0.19822   -0.67907
X   1.81293   -0.20538   -0.72111
X   2.04455   -0.21057   -0.76040
X   2.29764   -0.21413   -0.79543
X   2.56803   -0.21398   -0.80874
X   2.82207   -0.20966   -0.79707
X   3.06754   -0.20385   -0.77639
X   3.31768   -0.19626   -0.74400
X   3.57060   -0.18642   -0.69589
X   3.82557   -0.17361   -0.62628
X   4.07448   -0.15850   -0.53714
X   4.31497   -0.14246   -0.43409
X   4.54808   -0.12682   -0.32102
X   4.77323   -0.11327   -0.20180
X   4.98818   -0.10207   -0.07962
X   5.19417   -0.09225    0.04122
X   5.39899   -0.08377    0.15751
X   5.61091   -0.07885    0.26374
X   5.81972   -0.07865    0.34728
X   6.01360   -0.07678    0.40821
X   6.17511   -0.06572    0.44711
X   6.18099   -0.06528    0.44927
X   6.19137   -0.06591    0.45309
X   6.24827   -0.05941    0.46580
X   6.32143   -0.05321    0.48015
X   6.39459   -0.04506    0.49797
X   6.46774   -0.03839    0.51361
X   6.54090   -0.03201    0.52862
X   6.61406   -0.02541    0.54271
X   6.68722   -0.01887    0.55980
X   6.76038   -0.00961    0.58489
X   6.83354    0.00000    0.61392
X
X   0.00000    0.00000    0.00000
X   0.05666   -0.01133   -0.07309
X   0.22354   -0.03007   -0.18837
X   0.44386   -0.04921   -0.31036
X   0.66916   -0.06453   -0.42809
X   0.89738   -0.07578   -0.51845
X   1.12639   -0.08548   -0.58670
X   1.36181   -0.09345   -0.64568
X   1.59028   -0.09901   -0.69590
X   1.81090   -0.10275   -0.73950
X   2.04231   -0.10551   -0.78032
X   2.29597   -0.10745   -0.81669
X   2.56761   -0.10759   -0.83109
X   2.82240   -0.10586   -0.82137
X   3.06840   -0.10345   -0.80280
X   3.31940   -0.10002   -0.77180
X   3.57344   -0.09523   -0.72359
X   3.82952   -0.08857   -0.65145
X   4.07899   -0.08054   -0.55817
X   4.31976   -0.07221   -0.45171
X   4.55394   -0.06473   -0.33874
X   4.78257   -0.05944   -0.22590
X   5.00271   -0.05598   -0.11377
X   5.21187   -0.05257    0.00023
X   5.41601   -0.04828    0.11732
X   5.62577   -0.04484    0.22915
X   5.83058   -0.04358    0.31820
X   6.01895   -0.04161    0.38376
X   6.17511   -0.03317    0.42678
X   6.18099   -0.03285    0.42881
X   6.19137   -0.03322    0.43240
X   6.24827   -0.02984    0.44760
X   6.32143   -0.02684    0.46519
X   6.39459   -0.02252    0.48471
X   6.46774   -0.01916    0.50240
X   6.54090   -0.01597    0.51945
X   6.61406   -0.01269    0.53573
X   6.68722   -0.00949    0.55613
X   6.76038   -0.00482    0.58274
X   6.83354    0.00000    0.61392
X
X   0.00000    0.00000    0.00000
X   0.05650    0.00000   -0.07646
X   0.22306    0.00000   -0.19580
X   0.44300    0.00000   -0.31974
X   0.66892    0.00000   -0.43078
X   0.89723    0.00000   -0.52011
X   1.12589    0.00000   -0.59209
X   1.36142    0.00000   -0.65031
X   1.58968    0.00000   -0.70251
X   1.81009    0.00000   -0.74687
X   2.04147    0.00000   -0.78774
X   2.29542    0.00000   -0.82368
X   2.56749    0.00000   -0.83806
X   2.82251    0.00000   -0.82964
X   3.06872    0.00000   -0.81249
X   3.32005    0.00000   -0.78231
X   3.57447    0.00000   -0.73359
X   3.83066    0.00000   -0.65873
X   4.07975    0.00000   -0.56170
X   4.32027    0.00000   -0.45357
X   4.55598    0.00000   -0.34491
X   4.79025    0.00000   -0.24572
X   5.01903    0.00000   -0.15212
X   5.23394    0.00000   -0.05092
X   5.43735    0.00000    0.06694
X   5.64353    0.00000    0.18782
X   5.84296    0.00000    0.28504
X   6.02481    0.00000    0.35695
X   6.17511    0.00000    0.40747
X   6.18099    0.00000    0.40932
X   6.19137    0.00000    0.41256
X   6.24827    0.00000    0.42984
X   6.32143    0.00000    0.45107
X   6.39459    0.00000    0.47142
X   6.46774    0.00000    0.49106
X   6.54090    0.00000    0.51013
X   6.61406    0.00000    0.52870
X   6.68722    0.00002    0.55283
X   6.76038    0.00000    0.58064
X   6.83354    0.00000    0.61392
X
X
X#NETWORK = TAIL-HOR-TOP          14   6  NEW
X   6.17511    0.26004    0.62973
X   6.18099    0.26000    0.64191
X   6.19137    0.26000    0.64915
X   6.24827    0.26000    0.66170
X   6.32143    0.26000    0.66657
X   6.39459    0.26000    0.66891
X   6.46774    0.26000    0.66993
X   6.54090    0.26000    0.66924
X   6.61406    0.26000    0.66597
X   6.68722    0.26000    0.66015
X   6.76038    0.26000    0.65264
X   6.83354    0.26000    0.64425
X   6.90669    0.26000    0.63594
X   6.98798    0.26000    0.62961
X
X   6.38421    0.41000    0.62961
X   6.38885    0.41000    0.63805
X   6.39675    0.41000    0.64272
X   6.44061    0.41000    0.65063
X   6.49700    0.41000    0.65333
X   6.55340    0.41000    0.65454
X   6.60980    0.41000    0.65505
X   6.66619    0.41000    0.65460
X   6.72259    0.41000    0.65261
X   6.77899    0.41000    0.64903
X   6.83538    0.41000    0.64435
X   6.89178    0.41000    0.63905
X   6.94817    0.41000    0.63373
X   7.01084    0.41000    0.62961
X
X   6.56300    0.56000    0.62961
X   6.56655    0.56000    0.63612
X   6.57261    0.56000    0.63972
X   6.60626    0.56000    0.64583
X   6.64953    0.56000    0.64794
X   6.69279    0.56000    0.64888
X   6.73605    0.56000    0.64928
X   6.77932    0.56000    0.64893
X   6.82258    0.56000    0.64739
X   6.86585    0.56000    0.64462
X   6.90911    0.56000    0.64100
X   6.95238    0.56000    0.63690
X   6.99564    0.56000    0.63279
X   7.04371    0.56000    0.62961
X
X   6.73079    0.71000    0.62961
X   6.73340    0.71000    0.63485
X   6.73795    0.71000    0.63788
X   6.76301    0.71000    0.64311
X   6.79523    0.71000    0.64507
X   6.82745    0.71000    0.64600
X   6.85967    0.71000    0.64640
X   6.89189    0.71000    0.64611
X   6.92411    0.71000    0.64476
X   6.95633    0.71000    0.64236
X   6.98855    0.71000    0.63924
X   7.02077    0.71000    0.63574
X   7.05299    0.71000    0.63227
X   7.08879    0.71000    0.62961
X
X   6.90092    0.86000    0.62961
X   6.90271    0.86000    0.63340
X   6.90587    0.86000    0.63564
X   6.92317    0.86000    0.63953
X   6.94542    0.86000    0.64106
X   6.96766    0.86000    0.64180
X   6.98990    0.86000    0.64212
X   7.01215    0.86000    0.64191
X   7.03440    0.86000    0.64089
X   7.05664    0.86000    0.63908
X   7.07889    0.86000    0.63675
X   7.10113    0.86000    0.63415
X   7.12338    0.86000    0.63157
X   7.14809    0.86000    0.62961
X
X   7.01919    0.96248    0.62961
X   7.03301    0.97333    0.63213
X   7.04227    0.97952    0.63349
X   7.06921    0.99353    0.63551
X   7.09119    1.00123    0.63608
X   7.10864    1.00528    0.63630
X   7.12385    1.00742    0.63637
X   7.13775    1.00834    0.63622
X   7.15080    1.00834    0.63568
X   7.16385    1.00834    0.63471
X   7.17690    1.00834    0.63347
X   7.18995    1.00834    0.63207
X   7.20300    1.00834    0.63068
X   7.21310    0.99936    0.62961
X
X
X   6.17511   -0.26004    0.62973
X   6.18099   -0.26000    0.64191
X   6.19137   -0.26000    0.64915
X   6.24827   -0.26000    0.66170
X   6.32143   -0.26000    0.66657
X   6.39459   -0.26000    0.66891
X   6.46774   -0.26000    0.66993
X   6.54090   -0.26000    0.66924
X   6.61406   -0.26000    0.66597
X   6.68722   -0.26000    0.66015
X   6.76038   -0.26000    0.65264
X   6.83354   -0.26000    0.64425
X   6.90669   -0.26000    0.63594
X   6.98798   -0.26000    0.62961
X
X   6.38421   -0.41000    0.62961
X   6.38885   -0.41000    0.63805
X   6.39675   -0.41000    0.64272
X   6.44061   -0.41000    0.65063
X   6.49700   -0.41000    0.65333
X   6.55340   -0.41000    0.65454
X   6.60980   -0.41000    0.65505
X   6.66619   -0.41000    0.65460
X   6.72259   -0.41000    0.65261
X   6.77899   -0.41000    0.64903
X   6.83538   -0.41000    0.64435
X   6.89178   -0.41000    0.63905
X   6.94817   -0.41000    0.63373
X   7.01084   -0.41000    0.62961
X
X   6.56300   -0.56000    0.62961
X   6.56655   -0.56000    0.63612
X   6.57261   -0.56000    0.63972
X   6.60626   -0.56000    0.64583
X   6.64953   -0.56000    0.64794
X   6.69279   -0.56000    0.64888
X   6.73605   -0.56000    0.64928
X   6.77932   -0.56000    0.64893
X   6.82258   -0.56000    0.64739
X   6.86585   -0.56000    0.64462
X   6.90911   -0.56000    0.64100
X   6.95238   -0.56000    0.63690
X   6.99564   -0.56000    0.63279
X   7.04371   -0.56000    0.62961
X
X   6.73079   -0.71000    0.62961
X   6.73340   -0.71000    0.63485
X   6.73795   -0.71000    0.63788
X   6.76301   -0.71000    0.64311
X   6.79523   -0.71000    0.64507
X   6.82745   -0.71000    0.64600
X   6.85967   -0.71000    0.64640
X   6.89189   -0.71000    0.64611
X   6.92411   -0.71000    0.64476
X   6.95633   -0.71000    0.64236
X   6.98855   -0.71000    0.63924
X   7.02077   -0.71000    0.63574
X   7.05299   -0.71000    0.63227
X   7.08879   -0.71000    0.62961
X
X   6.90092   -0.86000    0.62961
X   6.90271   -0.86000    0.63340
X   6.90587   -0.86000    0.63564
X   6.92317   -0.86000    0.63953
X   6.94542   -0.86000    0.64106
X   6.96766   -0.86000    0.64180
X   6.98990   -0.86000    0.64212
X   7.01215   -0.86000    0.64191
X   7.03440   -0.86000    0.64089
X   7.05664   -0.86000    0.63908
X   7.07889   -0.86000    0.63675
X   7.10113   -0.86000    0.63415
X   7.12338   -0.86000    0.63157
X   7.14809   -0.86000    0.62961
X
X   7.01919   -0.96248    0.62961
X   7.03301   -0.97333    0.63213
X   7.04227   -0.97952    0.63349
X   7.06921   -0.99353    0.63551
X   7.09119   -1.00123    0.63608
X   7.10864   -1.00528    0.63630
X   7.12385   -1.00742    0.63637
X   7.13775   -1.00834    0.63622
X   7.15080   -1.00834    0.63568
X   7.16385   -1.00834    0.63471
X   7.17690   -1.00834    0.63347
X   7.18995   -1.00834    0.63207
X   7.20300   -1.00834    0.63068
X   7.21310   -0.99936    0.62961
X
X
X#NETWORK = TAIL-HOR-BOT          14   6  NEW
X   6.17511    0.26004    0.62973
X   6.18099    0.26000    0.61731
X   6.19137    0.26000    0.61007
X   6.24827    0.26000    0.59752
X   6.32143    0.26000    0.59266
X   6.39459    0.26000    0.59031
X   6.46774    0.26000    0.58930
X   6.54090    0.26000    0.58998
X   6.61406    0.26000    0.59326
X   6.68722    0.26000    0.59908
X   6.76038    0.26000    0.60659
X   6.83354    0.26000    0.61497
X   6.90669    0.26000    0.62328
X   6.98798    0.26000    0.62961
X
X   6.38421    0.41000    0.62961
X   6.38885    0.41000    0.62117
X   6.39675    0.41000    0.61651
X   6.44061    0.41000    0.60860
X   6.49700    0.41000    0.60590
X   6.55340    0.41000    0.60468
X   6.60980    0.41000    0.60418
X   6.66619    0.41000    0.60463
X   6.72259    0.41000    0.60661
X   6.77899    0.41000    0.61019
X   6.83538    0.41000    0.61488
X   6.89178    0.41000    0.62018
X   6.94817    0.41000    0.62550
X   7.01084    0.41000    0.62961
X
X   6.56300    0.56000    0.62961
X   6.56655    0.56000    0.62311
X   6.57261    0.56000    0.61951
X   6.60626    0.56000    0.61339
X   6.64953    0.56000    0.61129
X   6.69279    0.56000    0.61034
X   6.73605    0.56000    0.60995
X   6.77932    0.56000    0.61030
X   6.82258    0.56000    0.61183
X   6.86585    0.56000    0.61460
X   6.90911    0.56000    0.61823
X   6.95238    0.56000    0.62232
X   6.99564    0.56000    0.62644
X   7.04371    0.56000    0.62961
X
X   6.73079    0.71000    0.62961
X   6.73340    0.71000    0.62437
X   6.73795    0.71000    0.62134
X   6.76301    0.71000    0.61612
X   6.79523    0.71000    0.61415
X   6.82745    0.71000    0.61322
X   6.85967    0.71000    0.61282
X   6.89189    0.71000    0.61311
X   6.92411    0.71000    0.61446
X   6.95633    0.71000    0.61687
X   6.98855    0.71000    0.61999
X   7.02077    0.71000    0.62348
X   7.05299    0.71000    0.62696
X   7.08879    0.71000    0.62961
X
X   6.90092    0.86000    0.62961
X   6.90271    0.86000    0.62582
X   6.90587    0.86000    0.62358
X   6.92317    0.86000    0.61969
X   6.94542    0.86000    0.61816
X   6.96766    0.86000    0.61743
X   6.98990    0.86000    0.61710
X   7.01215    0.86000    0.61732
X   7.03440    0.86000    0.61834
X   7.05664    0.86000    0.62015
X   7.07889    0.86000    0.62248
X   7.10113    0.86000    0.62508
X   7.12338    0.86000    0.62765
X   7.14809    0.86000    0.62961
X
X   7.01919    0.96248    0.62961
X   7.03301    0.97333    0.62709
X   7.04227    0.97952    0.62574
X   7.06921    0.99353    0.62372
X   7.09119    1.00123    0.62315
X   7.10864    1.00528    0.62293
X   7.12385    1.00742    0.62285
X   7.13775    1.00834    0.62301
X   7.15080    1.00834    0.62355
X   7.16385    1.00834    0.62451
X   7.17690    1.00834    0.62576
X   7.18995    1.00834    0.62716
X   7.20300    1.00834    0.62855
X   7.21310    0.99936    0.62961
X
X
X   6.17511   -0.26004    0.62973
X   6.18099   -0.26000    0.61731
X   6.19137   -0.26000    0.61007
X   6.24827   -0.26000    0.59752
X   6.32143   -0.26000    0.59266
X   6.39459   -0.26000    0.59031
X   6.46774   -0.26000    0.58930
X   6.54090   -0.26000    0.58998
X   6.61406   -0.26000    0.59326
X   6.68722   -0.26000    0.59908
X   6.76038   -0.26000    0.60659
X   6.83354   -0.26000    0.61497
X   6.90669   -0.26000    0.62328
X   6.98798   -0.26000    0.62961
X
X   6.38421   -0.41000    0.62961
X   6.38885   -0.41000    0.62117
X   6.39675   -0.41000    0.61651
X   6.44061   -0.41000    0.60860
X   6.49700   -0.41000    0.60590
X   6.55340   -0.41000    0.60468
X   6.60980   -0.41000    0.60418
X   6.66619   -0.41000    0.60463
X   6.72259   -0.41000    0.60661
X   6.77899   -0.41000    0.61019
X   6.83538   -0.41000    0.61488
X   6.89178   -0.41000    0.62018
X   6.94817   -0.41000    0.62550
X   7.01084   -0.41000    0.62961
X
X   6.56300   -0.56000    0.62961
X   6.56655   -0.56000    0.62311
X   6.57261   -0.56000    0.61951
X   6.60626   -0.56000    0.61339
X   6.64953   -0.56000    0.61129
X   6.69279   -0.56000    0.61034
X   6.73605   -0.56000    0.60995
X   6.77932   -0.56000    0.61030
X   6.82258   -0.56000    0.61183
X   6.86585   -0.56000    0.61460
X   6.90911   -0.56000    0.61823
X   6.95238   -0.56000    0.62232
X   6.99564   -0.56000    0.62644
X   7.04371   -0.56000    0.62961
X
X   6.73079   -0.71000    0.62961
X   6.73340   -0.71000    0.62437
X   6.73795   -0.71000    0.62134
X   6.76301   -0.71000    0.61612
X   6.79523   -0.71000    0.61415
X   6.82745   -0.71000    0.61322
X   6.85967   -0.71000    0.61282
X   6.89189   -0.71000    0.61311
X   6.92411   -0.71000    0.61446
X   6.95633   -0.71000    0.61687
X   6.98855   -0.71000    0.61999
X   7.02077   -0.71000    0.62348
X   7.05299   -0.71000    0.62696
X   7.08879   -0.71000    0.62961
X
X   6.90092   -0.86000    0.62961
X   6.90271   -0.86000    0.62582
X   6.90587   -0.86000    0.62358
X   6.92317   -0.86000    0.61969
X   6.94542   -0.86000    0.61816
X   6.96766   -0.86000    0.61743
X   6.98990   -0.86000    0.61710
X   7.01215   -0.86000    0.61732
X   7.03440   -0.86000    0.61834
X   7.05664   -0.86000    0.62015
X   7.07889   -0.86000    0.62248
X   7.10113   -0.86000    0.62508
X   7.12338   -0.86000    0.62765
X   7.14809   -0.86000    0.62961
X
X   7.01919   -0.96248    0.62961
X   7.03301   -0.97333    0.62709
X   7.04227   -0.97952    0.62574
X   7.06921   -0.99353    0.62372
X   7.09119   -1.00123    0.62315
X   7.10864   -1.00528    0.62293
X   7.12385   -1.00742    0.62285
X   7.13775   -1.00834    0.62301
X   7.15080   -1.00834    0.62355
X   7.16385   -1.00834    0.62451
X   7.17690   -1.00834    0.62576
X   7.18995   -1.00834    0.62716
X   7.20300   -1.00834    0.62855
X   7.21310   -0.99936    0.62961
X
X
X#NETWORK = FIN-TOP               11   9  NEW
X   2.24615    0.71820   -0.13168
X   2.24387    0.71497   -0.10853
X   2.24763    0.71048   -0.08568
X   2.27537    0.69807   -0.04680
X   2.31275    0.68550   -0.01921
X   2.37698    0.67457   -0.00777
X   2.46527    0.67321   -0.03080
X   2.55370    0.67196   -0.06271
X   2.62820    0.66760   -0.08700
X   2.69273    0.66480   -0.11317
X   2.74057    0.66409   -0.13415
X
X   2.28218    0.74450   -0.13927
X   2.28533    0.74432   -0.12346
X   2.29482    0.74378   -0.10921
X   2.33165    0.74169   -0.08727
X   2.38888    0.73843   -0.07666
X   2.46068    0.73435   -0.07792
X   2.53984    0.72985   -0.08834
X   2.61836    0.72539   -0.10362
X   2.68903    0.72137   -0.11972
X   2.74488    0.71819   -0.13384
X   2.77891    0.71626   -0.14845
X
X   2.30791    0.77078   -0.14718
X   2.31114    0.77078   -0.13419
X   2.32086    0.77078   -0.12266
X   2.35857    0.77078   -0.10556
X   2.41692    0.77078   -0.09846
X   2.48970    0.77078   -0.10147
X   2.56932    0.77078   -0.11197
X   2.64772    0.77078   -0.12615
X   2.71760    0.77078   -0.14069
X   2.77231    0.77078   -0.15317
X   2.81899    0.77078   -0.16558
X
X   2.40989    0.92121   -0.19241
X   2.41294    0.92121   -0.18419
X   2.42169    0.92121   -0.17693
X   2.45510    0.92121   -0.16615
X   2.50650    0.92121   -0.16169
X   2.57029    0.92121   -0.16400
X   2.63982    0.92121   -0.17184
X   2.70865    0.92121   -0.18283
X   2.76832    0.92121   -0.19470
X   2.81508    0.92121   -0.20513
X   2.84978    0.92121   -0.21607
X
X   2.49810    1.06814   -0.23659
X   2.50090    1.06814   -0.22916
X   2.50878    1.06814   -0.22266
X   2.53867    1.06814   -0.21318
X   2.58451    1.06814   -0.20954
X   2.64127    1.06814   -0.21225
X   2.70308    1.06814   -0.22024
X   2.76389    1.06814   -0.23139
X   2.81740    1.06814   -0.24336
X   2.85947    1.06814   -0.25397
X   2.89601    1.06814   -0.26465
X
X   2.58593    1.19765   -0.27553
X   2.58804    1.19765   -0.26806
X   2.59508    1.19765   -0.26157
X   2.62329    1.19765   -0.25222
X   2.66752    1.19765   -0.24888
X   2.72354    1.19765   -0.25203
X   2.78557    1.19765   -0.26050
X   2.84499    1.19765   -0.27190
X   2.90032    1.19765   -0.28340
X   2.94488    1.19765   -0.29332
X   2.98342    1.19765   -0.30305
X
X   2.71387    1.31328   -0.31030
X   2.71617    1.31328   -0.30360
X   2.72379    1.31328   -0.29784
X   2.75400    1.31328   -0.28986
X   2.80014    1.31328   -0.28751
X   2.85587    1.31328   -0.29055
X   2.91487    1.31328   -0.29727
X   2.97499    1.31328   -0.30547
X   3.02754    1.31328   -0.31354
X   3.06386    1.31328   -0.32018
X   3.09374    1.31328   -0.32660
X
X   2.82952    1.37861   -0.32995
X   2.83407    1.37861   -0.32537
X   2.84273    1.37861   -0.32141
X   2.86992    1.37861   -0.31579
X   2.90864    1.37861   -0.31380
X   2.95397    1.37861   -0.31526
X   3.00267    1.37861   -0.31911
X   3.05884    1.37861   -0.32403
X   3.10634    1.37861   -0.32905
X   3.13322    1.37861   -0.33326
X   3.15559    1.37861   -0.33743
X
X   3.03700    1.43000   -0.34540
X   3.03803    1.43000   -0.34314
X   3.04109    1.43000   -0.34108
X   3.05295    1.43000   -0.33771
X   3.07142    1.43000   -0.33576
X   3.09470    1.43000   -0.33545
X   3.12050    1.43000   -0.33656
X   3.14630    1.43000   -0.33857
X   3.16958    1.43000   -0.34091
X   3.18805    1.43000   -0.34308
X   3.20400    1.43000   -0.34540
X
X
X   2.24615   -0.71820   -0.13168
X   2.24387   -0.71497   -0.10853
X   2.24763   -0.71048   -0.08568
X   2.27537   -0.69807   -0.04680
X   2.31275   -0.68550   -0.01921
X   2.37698   -0.67457   -0.00777
X   2.46527   -0.67321   -0.03080
X   2.55370   -0.67196   -0.06271
X   2.62820   -0.66760   -0.08700
X   2.69273   -0.66480   -0.11317
X   2.74057   -0.66409   -0.13415
X
X   2.28218   -0.74450   -0.13927
X   2.28533   -0.74432   -0.12346
X   2.29482   -0.74378   -0.10921
X   2.33165   -0.74169   -0.08727
X   2.38888   -0.73843   -0.07666
X   2.46068   -0.73435   -0.07792
X   2.53984   -0.72985   -0.08834
X   2.61836   -0.72539   -0.10362
X   2.68903   -0.72137   -0.11972
X   2.74488   -0.71819   -0.13384
X   2.77891   -0.71626   -0.14845
X
X   2.30791   -0.77078   -0.14718
X   2.31114   -0.77078   -0.13419
X   2.32086   -0.77078   -0.12266
X   2.35857   -0.77078   -0.10556
X   2.41692   -0.77078   -0.09846
X   2.48970   -0.77078   -0.10147
X   2.56932   -0.77078   -0.11197
X   2.64772   -0.77078   -0.12615
X   2.71760   -0.77078   -0.14069
X   2.77231   -0.77078   -0.15317
X   2.81899   -0.77078   -0.16558
X
X   2.40989   -0.92121   -0.19241
X   2.41294   -0.92121   -0.18419
X   2.42169   -0.92121   -0.17693
X   2.45510   -0.92121   -0.16615
X   2.50650   -0.92121   -0.16169
X   2.57029   -0.92121   -0.16400
X   2.63982   -0.92121   -0.17184
X   2.70865   -0.92121   -0.18283
X   2.76832   -0.92121   -0.19470
X   2.81508   -0.92121   -0.20513
X   2.84978   -0.92121   -0.21607
X
X   2.49810   -1.06814   -0.23659
X   2.50090   -1.06814   -0.22916
X   2.50878   -1.06814   -0.22266
X   2.53867   -1.06814   -0.21318
X   2.58451   -1.06814   -0.20954
X   2.64127   -1.06814   -0.21225
X   2.70308   -1.06814   -0.22024
X   2.76389   -1.06814   -0.23139
X   2.81740   -1.06814   -0.24336
X   2.85947   -1.06814   -0.25397
X   2.89601   -1.06814   -0.26465
X
X   2.58593   -1.19765   -0.27553
X   2.58804   -1.19765   -0.26806
X   2.59508   -1.19765   -0.26157
X   2.62329   -1.19765   -0.25222
X   2.66752   -1.19765   -0.24888
X   2.72354   -1.19765   -0.25203
X   2.78557   -1.19765   -0.26050
X   2.84499   -1.19765   -0.27190
X   2.90032   -1.19765   -0.28340
X   2.94488   -1.19765   -0.29332
X   2.98342   -1.19765   -0.30305
X
X   2.71387   -1.31328   -0.31030
X   2.71617   -1.31328   -0.30360
X   2.72379   -1.31328   -0.29784
X   2.75400   -1.31328   -0.28986
X   2.80014   -1.31328   -0.28751
X   2.85587   -1.31328   -0.29055
X   2.91487   -1.31328   -0.29727
X   2.97499   -1.31328   -0.30547
X   3.02754   -1.31328   -0.31354
X   3.06386   -1.31328   -0.32018
X   3.09374   -1.31328   -0.32660
X
X   2.82952   -1.37861   -0.32995
X   2.83407   -1.37861   -0.32537
X   2.84273   -1.37861   -0.32141
X   2.86992   -1.37861   -0.31579
X   2.90864   -1.37861   -0.31380
X   2.95397   -1.37861   -0.31526
X   3.00267   -1.37861   -0.31911
X   3.05884   -1.37861   -0.32403
X   3.10634   -1.37861   -0.32905
X   3.13322   -1.37861   -0.33326
X   3.15559   -1.37861   -0.33743
X
X   3.03700   -1.43000   -0.34540
X   3.03803   -1.43000   -0.34314
X   3.04109   -1.43000   -0.34108
X   3.05295   -1.43000   -0.33771
X   3.07142   -1.43000   -0.33576
X   3.09470   -1.43000   -0.33545
X   3.12050   -1.43000   -0.33656
X   3.14630   -1.43000   -0.33857
X   3.16958   -1.43000   -0.34091
X   3.18805   -1.43000   -0.34308
X   3.20400   -1.43000   -0.34540
X
X
X#NETWORK = FIN-BOT               11   9  NEW
X   2.24615    0.71820   -0.13168
X   2.25215    0.72039   -0.15308
X   2.26291    0.72131   -0.17195
X   2.30310    0.71949   -0.20042
X   2.36037    0.71527   -0.21534
X   2.43162    0.70907   -0.21628
X   2.50850    0.70087   -0.20655
X   2.58262    0.69079   -0.19056
X   2.64672    0.67976   -0.17199
X   2.69790    0.67122   -0.15393
X   2.74057    0.66409   -0.13415
X
X   2.28218    0.74450   -0.13927
X   2.28533    0.74432   -0.15521
X   2.29482    0.74378   -0.16979
X   2.33165    0.74169   -0.19302
X   2.38888    0.73843   -0.20562
X   2.46068    0.73435   -0.20684
X   2.53984    0.72985   -0.19917
X   2.61836    0.72539   -0.18665
X   2.68903    0.72137   -0.17295
X   2.74488    0.71819   -0.16081
X   2.77891    0.71626   -0.14845
X
X   2.30791    0.77078   -0.14718
X   2.31114    0.77078   -0.16038
X   2.32086    0.77078   -0.17256
X   2.35857    0.77078   -0.19217
X   2.41692    0.77078   -0.20320
X   2.48970    0.77078   -0.20517
X   2.56932    0.77078   -0.20028
X   2.64772    0.77078   -0.19178
X   2.71760    0.77078   -0.18246
X   2.77231    0.77078   -0.17425
X   2.81899    0.77078   -0.16558
X
X   2.40989    0.92121   -0.19241
X   2.41294    0.92121   -0.20089
X   2.42169    0.92121   -0.20890
X   2.45510    0.92121   -0.22265
X   2.50650    0.92121   -0.23183
X   2.57029    0.92121   -0.23561
X   2.63982    0.92121   -0.23474
X   2.70865    0.92121   -0.23094
X   2.76832    0.92121   -0.22618
X   2.81508    0.92121   -0.22131
X   2.84978    0.92121   -0.21607
X
X   2.49810    1.06814   -0.23659
X   2.50090    1.06814   -0.24433
X   2.50878    1.06814   -0.25176
X   2.53867    1.06814   -0.26488
X   2.58451    1.06814   -0.27428
X   2.64127    1.06814   -0.27904
X   2.70308    1.06814   -0.27960
X   2.76389    1.06814   -0.27731
X   2.81740    1.06814   -0.27361
X   2.85947    1.06814   -0.26962
X   2.89601    1.06814   -0.26465
X
X   2.58593    1.19765   -0.27553
X   2.58804    1.19765   -0.28337
X   2.59508    1.19765   -0.29093
X   2.62329    1.19765   -0.30446
X   2.66752    1.19765   -0.31439
X   2.72354    1.19765   -0.31959
X   2.78557    1.19765   -0.32030
X   2.84499    1.19765   -0.31774
X   2.90032    1.19765   -0.31274
X   2.94488    1.19765   -0.30833
X   2.98342    1.19765   -0.30305
X
X   2.71387    1.31328   -0.31030
X   2.71617    1.31328   -0.31732
X   2.72379    1.31328   -0.32401
X   2.75400    1.31328   -0.33544
X   2.80014    1.31328   -0.34270
X   2.85587    1.31328   -0.34508
X   2.91487    1.31328   -0.34349
X   2.97499    1.31328   -0.33964
X   3.02754    1.31328   -0.33539
X   3.06386    1.31328   -0.33117
X   3.09374    1.31328   -0.32660
X
X   2.82952    1.37861   -0.32995
X   2.83407    1.37861   -0.33469
X   2.84273    1.37861   -0.33913
X   2.86992    1.37861   -0.34648
X   2.90864    1.37861   -0.35082
X   2.95397    1.37861   -0.35186
X   3.00267    1.37861   -0.35030
X   3.05884    1.37861   -0.34727
X   3.10634    1.37861   -0.34404
X   3.13322    1.37861   -0.34084
X   3.15559    1.37861   -0.33743
X
X   3.03700    1.43000   -0.34540
X   3.03803    1.43000   -0.34766
X   3.04109    1.43000   -0.34972
X   3.05295    1.43000   -0.35309
X   3.07142    1.43000   -0.35504
X   3.09470    1.43000   -0.35535
X   3.12050    1.43000   -0.35424
X   3.14630    1.43000   -0.35223
X   3.16958    1.43000   -0.34989
X   3.18805    1.43000   -0.34772
X   3.20400    1.43000   -0.34540
X
X
X   2.24615   -0.71820   -0.13168
X   2.25215   -0.72039   -0.15308
X   2.26291   -0.72131   -0.17195
X   2.30310   -0.71949   -0.20042
X   2.36037   -0.71527   -0.21534
X   2.43162   -0.70907   -0.21628
X   2.50850   -0.70087   -0.20655
X   2.58262   -0.69079   -0.19056
X   2.64672   -0.67976   -0.17199
X   2.69790   -0.67122   -0.15393
X   2.74057   -0.66409   -0.13415
X
X   2.28218   -0.74450   -0.13927
X   2.28533   -0.74432   -0.15521
X   2.29482   -0.74378   -0.16979
X   2.33165   -0.74169   -0.19302
X   2.38888   -0.73843   -0.20562
X   2.46068   -0.73435   -0.20684
X   2.53984   -0.72985   -0.19917
X   2.61836   -0.72539   -0.18665
X   2.68903   -0.72137   -0.17295
X   2.74488   -0.71819   -0.16081
X   2.77891   -0.71626   -0.14845
X
X   2.30791   -0.77078   -0.14718
X   2.31114   -0.77078   -0.16038
X   2.32086   -0.77078   -0.17256
X   2.35857   -0.77078   -0.19217
X   2.41692   -0.77078   -0.20320
X   2.48970   -0.77078   -0.20517
X   2.56932   -0.77078   -0.20028
X   2.64772   -0.77078   -0.19178
X   2.71760   -0.77078   -0.18246
X   2.77231   -0.77078   -0.17425
X   2.81899   -0.77078   -0.16558
X
X   2.40989   -0.92121   -0.19241
X   2.41294   -0.92121   -0.20089
X   2.42169   -0.92121   -0.20890
X   2.45510   -0.92121   -0.22265
X   2.50650   -0.92121   -0.23183
X   2.57029   -0.92121   -0.23561
X   2.63982   -0.92121   -0.23474
X   2.70865   -0.92121   -0.23094
X   2.76832   -0.92121   -0.22618
X   2.81508   -0.92121   -0.22131
X   2.84978   -0.92121   -0.21607
X
X   2.49810   -1.06814   -0.23659
X   2.50090   -1.06814   -0.24433
X   2.50878   -1.06814   -0.25176
X   2.53867   -1.06814   -0.26488
X   2.58451   -1.06814   -0.27428
X   2.64127   -1.06814   -0.27904
X   2.70308   -1.06814   -0.27960
X   2.76389   -1.06814   -0.27731
X   2.81740   -1.06814   -0.27361
X   2.85947   -1.06814   -0.26962
X   2.89601   -1.06814   -0.26465
X
X   2.58593   -1.19765   -0.27553
X   2.58804   -1.19765   -0.28337
X   2.59508   -1.19765   -0.29093
X   2.62329   -1.19765   -0.30446
X   2.66752   -1.19765   -0.31439
X   2.72354   -1.19765   -0.31959
X   2.78557   -1.19765   -0.32030
X   2.84499   -1.19765   -0.31774
X   2.90032   -1.19765   -0.31274
X   2.94488   -1.19765   -0.30833
X   2.98342   -1.19765   -0.30305
X
X   2.71387   -1.31328   -0.31030
X   2.71617   -1.31328   -0.31732
X   2.72379   -1.31328   -0.32401
X   2.75400   -1.31328   -0.33544
X   2.80014   -1.31328   -0.34270
X   2.85587   -1.31328   -0.34508
X   2.91487   -1.31328   -0.34349
X   2.97499   -1.31328   -0.33964
X   3.02754   -1.31328   -0.33539
X   3.06386   -1.31328   -0.33117
X   3.09374   -1.31328   -0.32660
X
X   2.82952   -1.37861   -0.32995
X   2.83407   -1.37861   -0.33469
X   2.84273   -1.37861   -0.33913
X   2.86992   -1.37861   -0.34648
X   2.90864   -1.37861   -0.35082
X   2.95397   -1.37861   -0.35186
X   3.00267   -1.37861   -0.35030
X   3.05884   -1.37861   -0.34727
X   3.10634   -1.37861   -0.34404
X   3.13322   -1.37861   -0.34084
X   3.15559   -1.37861   -0.33743
X
X   3.03700   -1.43000   -0.34540
X   3.03803   -1.43000   -0.34766
X   3.04109   -1.43000   -0.34972
X   3.05295   -1.43000   -0.35309
X   3.07142   -1.43000   -0.35504
X   3.09470   -1.43000   -0.35535
X   3.12050   -1.43000   -0.35424
X   3.14630   -1.43000   -0.35223
X   3.16958   -1.43000   -0.34989
X   3.18805   -1.43000   -0.34772
X   3.20400   -1.43000   -0.34540
X
X
X#NETWORK = TAIL-TIP              14   2  NEW
X   7.01919    0.96248    0.62961
X   7.03301    0.97333    0.63213
X   7.04227    0.97952    0.63349
X   7.06921    0.99353    0.63551
X   7.09119    1.00123    0.63608
X   7.10864    1.00528    0.63630
X   7.12385    1.00742    0.63637
X   7.13775    1.00834    0.63622
X   7.15080    1.00834    0.63568
X   7.16385    1.00834    0.63471
X   7.17690    1.00834    0.63347
X   7.18995    1.00834    0.63207
X   7.20300    1.00834    0.63068
X   7.21310    0.99936    0.62961
X
X   7.01919    0.96248    0.62961
X   7.03301    0.97333    0.62709
X   7.04227    0.97952    0.62574
X   7.06921    0.99353    0.62372
X   7.09119    1.00123    0.62315
X   7.10864    1.00528    0.62293
X   7.12385    1.00742    0.62285
X   7.13775    1.00834    0.62301
X   7.15080    1.00834    0.62355
X   7.16385    1.00834    0.62451
X   7.17690    1.00834    0.62576
X   7.18995    1.00834    0.62716
X   7.20300    1.00834    0.62855
X   7.21310    0.99936    0.62961
X
X
X   7.01919   -0.96248    0.62961
X   7.03301   -0.97333    0.63213
X   7.04227   -0.97952    0.63349
X   7.06921   -0.99353    0.63551
X   7.09119   -1.00123    0.63608
X   7.10864   -1.00528    0.63630
X   7.12385   -1.00742    0.63637
X   7.13775   -1.00834    0.63622
X   7.15080   -1.00834    0.63568
X   7.16385   -1.00834    0.63471
X   7.17690   -1.00834    0.63347
X   7.18995   -1.00834    0.63207
X   7.20300   -1.00834    0.63068
X   7.21310   -0.99936    0.62961
X
X   7.01919   -0.96248    0.62961
X   7.03301   -0.97333    0.62709
X   7.04227   -0.97952    0.62574
X   7.06921   -0.99353    0.62372
X   7.09119   -1.00123    0.62315
X   7.10864   -1.00528    0.62293
X   7.12385   -1.00742    0.62285
X   7.13775   -1.00834    0.62301
X   7.15080   -1.00834    0.62355
X   7.16385   -1.00834    0.62451
X   7.17690   -1.00834    0.62576
X   7.18995   -1.00834    0.62716
X   7.20300   -1.00834    0.62855
X   7.21310   -0.99936    0.62961
X
X
X#NETWORK = FIN-TIP               11   2  NEW
X   3.03700    1.43000   -0.34540
X   3.03803    1.43000   -0.34314
X   3.04109    1.43000   -0.34108
X   3.05295    1.43000   -0.33771
X   3.07142    1.43000   -0.33576
X   3.09470    1.43000   -0.33545
X   3.12050    1.43000   -0.33656
X   3.14630    1.43000   -0.33857
X   3.16958    1.43000   -0.34091
X   3.18805    1.43000   -0.34308
X   3.20400    1.43000   -0.34540
X
X   3.03700    1.43000   -0.34540
X   3.03803    1.43000   -0.34766
X   3.04109    1.43000   -0.34972
X   3.05295    1.43000   -0.35309
X   3.07142    1.43000   -0.35504
X   3.09470    1.43000   -0.35535
X   3.12050    1.43000   -0.35424
X   3.14630    1.43000   -0.35223
X   3.16958    1.43000   -0.34989
X   3.18805    1.43000   -0.34772
X   3.20400    1.43000   -0.34540
X
X
X   3.03700   -1.43000   -0.34540
X   3.03803   -1.43000   -0.34314
X   3.04109   -1.43000   -0.34108
X   3.05295   -1.43000   -0.33771
X   3.07142   -1.43000   -0.33576
X   3.09470   -1.43000   -0.33545
X   3.12050   -1.43000   -0.33656
X   3.14630   -1.43000   -0.33857
X   3.16958   -1.43000   -0.34091
X   3.18805   -1.43000   -0.34308
X   3.20400   -1.43000   -0.34540
X
X   3.03700   -1.43000   -0.34540
X   3.03803   -1.43000   -0.34766
X   3.04109   -1.43000   -0.34972
X   3.05295   -1.43000   -0.35309
X   3.07142   -1.43000   -0.35504
X   3.09470   -1.43000   -0.35535
X   3.12050   -1.43000   -0.35424
X   3.14630   -1.43000   -0.35223
X   3.16958   -1.43000   -0.34989
X   3.18805   -1.43000   -0.34772
X   3.20400   -1.43000   -0.34540
X
X
END_OF_FILE
  if test 46303 -ne `wc -c <'gnuplot/demo/whale.dat.B'`; then
    echo shar: \"'gnuplot/demo/whale.dat.B'\" unpacked with wrong size!
  elif test -f 'gnuplot/demo/whale.dat.A' ; then
    echo shar: Combining  \"'gnuplot/demo/whale.dat'\" \(94483 characters\)
    cat 'gnuplot/demo/whale.dat.A' 'gnuplot/demo/whale.dat.B' > 'gnuplot/demo/whale.dat'
    if test 94483 -ne `wc -c <'gnuplot/demo/whale.dat'`; then
      echo shar: \"'gnuplot/demo/whale.dat'\" combined with wrong size!
    else 
      rm gnuplot/demo/whale.dat.A gnuplot/demo/whale.dat.B
    fi 
  fi
  # end of 'gnuplot/demo/whale.dat.B'
fi
if test -f 'gnuplot/term/fg.trm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'gnuplot/term/fg.trm'\"
else
  echo shar: Extracting \"'gnuplot/term/fg.trm'\" \(5015 characters\)
  sed "s/^X//" >'gnuplot/term/fg.trm' <<'END_OF_FILE'
X/* GNUPLOT - fg.trm */
X/*
X * Copyright (C) 1990, 1991, 1992
X *
X * Permission to use, copy, and distribute this software and its
X * documentation for any purpose with or without fee is hereby granted, 
X * provided that the above copyright notice appear in all copies and 
X * that both that copyright notice and this permission notice appear 
X * in supporting documentation.
X *
X * Permission to modify the software is granted, but not the right to
X * distribute the modified code.  Modifications are to be distributed 
X * as patches to released version.
X *
X * This software  is provided "as is" without express or implied warranty.
X *
X * This file is included by ../term.c.
X *
X * This terminal driver supports:
X *	Under Zortech C
X *      egalib, vgalib, vgamono, svga, mcga, cga, hercules, att
X *
X * AUTHORS
X *		  Gnuplot for DOS 386/flash graphics
X *				  Clifton T. Liu
X *
X * There is a mailing list for gnuplot users. Note, however, that the
X * newsgroup 
X *	comp.graphics.gnuplot 
X * is identical to the mailing list (they
X * both carry the same set of messages). We prefer that you read the
X * messages through that newsgroup, to subscribing to the mailing list.
X * (If you can read that newsgroup, and are already on the mailing list,
X * please send a message info-gnuplot-request@dartmouth.edu, asking to be
X * removed from the mailing list.)
X *
X * The address for mailing to list members is
X *	   info-gnuplot@dartmouth.edu
X * and for mailing administrative requests is 
X *	   info-gnuplot-request@dartmouth.edu
X * The mailing list for bug reports is 
X *	   bug-gnuplot@dartmouth.edu
X * The list of those interested in beta-test versions is
X *	   info-gnuplot-beta@dartmouth.edu
X */
X/* The modifications to allow Gnuplot to compile with Zortech C/C++   */
X/* 3.1 /Flash Graphics	were made by Clifton T. Liu 				  */
X/* (cliu@merlin.appmath.columbia.edu)		 20 Feb 1993			  */
X
X#include <fg.h>
X
Xstatic int pattern[] = {0xffff, 0x0f0f, 0xffff, 0xaaaa, 0x3333, 0x3f3f, 0x0f0f};
X
Xstatic int graphics_on = FALSE;
Xint startx, starty;
X/*
Xint pc_angle;
X#define PC_VCHAR FNT5X9_VCHAR
X#define PC_HCHAR FNT5X9_HCHAR
X*/
Xpause()		/* press any key to continue... */
X{
X	(void) getch();
X}
X
X
XPC_text()
X{
X	if (graphics_on) {
X		graphics_on = FALSE;
X		pause();
X	}
X   fg_term();
X}
X
XPC_reset()
X{
X}
X
X
X
X/* all of the FlashGraphics C routines for the different graphics devices go here */
X
X
X#define HERC_XMAX 720
X#define HERC_YMAX 348
X
X#define HERC_XLAST (HERC_XMAX - 1)
X#define HERC_YLAST (HERC_YMAX - 1)
X
X#define HERC_VCHAR 10
X#define HERC_HCHAR 8
X#define HERC_VTIC 5
X#define HERC_HTIC 5
X
X
X
X#define EGA_XMAX 640
X#define EGA_YMAX 350
X
X#define EGA_XLAST (EGA_XMAX - 1)
X#define EGA_YLAST (EGA_YMAX - 1)
X
X#define EGA_VCHAR 18
X#define EGA_HCHAR 8
X#define EGA_VTIC 5
X#define EGA_HTIC 5
X
X
X#define VGA_XMAX 640
X#define VGA_YMAX 480
X
X#define VGA_XLAST (VGA_XMAX - 1)
X#define VGA_YLAST (VGA_YMAX - 1)
X
X#define VGA_VCHAR 24
X#define VGA_HCHAR 8
X#define VGA_VTIC 5
X#define VGA_HTIC 5
X
X
X#define SVGA_XMAX 800
X#define SVGA_YMAX 600
X
X#define SVGA_XLAST (SVGA_XMAX - 1)
X#define SVGA_YLAST (SVGA_YMAX - 1)
X
X#define SVGA_VCHAR 24
X#define SVGA_HCHAR 8
X#define SVGA_VTIC 5
X#define SVGA_HTIC 5
X
X#define SSVGA_XMAX 1024
X#define SSVGA_YMAX 768
X
X#define SSVGA_XLAST (SSVGA_XMAX - 1)
X#define SSVGA_YLAST (SSVGA_YMAX - 1)
X
X#define SSVGA_VCHAR 24
X#define SSVGA_HCHAR 8
X#define SSVGA_VTIC 5
X#define SSVGA_HTIC 5
X
X
Xstatic int vga256color[] = {7,8,2,3,4,5,9,14,12,15,13,10,11,1,6};
Xstatic int *vgacolor = vga256color;
Xstatic fg_color_t vga_color;
Xstatic int text_angle;
Xstatic fg_line_t line_to_draw;
X
Xint VGA_text_angle(ang)
Xint ang;
X{
X	text_angle = ang;
X	return TRUE;
X}
X
Xint VGA_justify_text(mode)
Xenum JUSTIFY mode;
X{
X	return FALSE;
X}
X
Xint VGA_init()
X{
X	   if (fg_init() == FG_NULL)  {
X		   fprintf(stderr,"Graphics card not detected.\n");
X		   exit(1);
X	  }
X}
X
Xint HERC_graphics()
X{
X   fg_init_herc();
X   graphics_on = TRUE;
X}
X
Xint EGAMONO_graphics()
X{
X   fg_init_egamono();
X   graphics_on = TRUE;
X}
X
Xint EGA_graphics()
X{
X   fg_init_egaecd();
X   graphics_on = TRUE;
X}
X
Xint VGA_graphics()
X{
X   fg_init_vga12();
X   graphics_on = TRUE;
X}
X
Xint VGAMONO_graphics()
X{
X   fg_init_vga11();
X   graphics_on = TRUE;
X}
X
Xint SVGA_graphics()
X{
X   fg_init_vesa6a();
X   graphics_on = TRUE;
X}
X
Xint SSVGA_graphics()
X{
X   fg_init_vesa5();
X   graphics_on = TRUE;
X}
X
Xint VGA_linetype(linetype)
X{
X { /* 13 replaces 15 */
X   if (linetype >= 13)
X       linetype %= 13;
X       vga_color = fg.color[vgacolor[linetype+2]];
X}
X
Xint VGA_put_text(x,y,str)
Xunsigned int x, y;
Xchar *str;
X{
X   fg_puts(vga_color, FG_MODE_SET,	~0,  text_angle, x, y, str, fg.displaybox);
X}
X
Xint VGA_move(x,y)
X{
X	 line_to_draw[FG_X1] = x;
X	 line_to_draw[FG_Y1] = y;
X}
X
X
Xint VGA_vector(x,y)
X{
X	 line_to_draw[FG_X2] = x;
X	 line_to_draw[FG_Y2] = y;
X	 fg_drawline(vga_color, FG_MODE_SET, ~0, FG_LINE_SOLID, line_to_draw);
X	 line_to_draw[FG_X1] = x;
X	 line_to_draw[FG_Y1] = y;
X}
X
Xint VGA_text()
X{
X	if (graphics_on) {
X		graphics_on = FALSE;
X		fg_flush();
X		pause();
X	}
X   fg_term();
X}
X
Xint VGA_reset()
X{
X   fg_term();
X}
END_OF_FILE
  if test 5015 -ne `wc -c <'gnuplot/term/fg.trm'`; then
    echo shar: \"'gnuplot/term/fg.trm'\" unpacked with wrong size!
  fi
  # end of 'gnuplot/term/fg.trm'
fi
if test -f 'gnuplot/term/tpic.trm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'gnuplot/term/tpic.trm'\"
else
  echo shar: Extracting \"'gnuplot/term/tpic.trm'\" \(25790 characters\)
  sed "s/^X//" >'gnuplot/term/tpic.trm' <<'END_OF_FILE'
X/*
X * $Id: tpic.trm%v 3.50 1993/07/09 05:35:24 woo Exp $
X */
X
X/* GNUPLOT - tpic.trm */
X/*
X * Copyright (C) 1990 - 1993   
X *
X * Permission to use, copy, and distribute this software and its
X * documentation for any purpose with or without fee is hereby granted, 
X * provided that the above copyright notice appear in all copies and 
X * that both that copyright notice and this permission notice appear 
X * in supporting documentation.
X *
X * Permission to modify the software is granted, but not the right to
X * distribute the modified code.  Modifications are to be distributed 
X * as patches to released version.
X *  
X * This software  is provided "as is" without express or implied warranty.
X * 
X * This file is included by ../term.c.
X *
X * This terminal driver supports:
X *   The tpic \specials (version 2.2) for LaTeX. 
X *
X * AUTHORS
X *   Oh-Yeah?   3 Sep. 1992 (closely following eepic.trm by David Kotz)
X *   A. Woo     5 Oct. 1992 (removed ansi prototypes for braindead compilers)
X *
X * send your comments or suggestions to (info-gnuplot@dartmouth.edu).
X * 
X */
X/*
X *  This file contains the tpic terminal driver for use with LaTeX. 
X *  This is an alternative to the latex and eepic drivers. You need 
X *  a printer driver that supports the tpic \specials version 2.2.
X *
X * Comparison with the eepic driver (eepic.trm):
X *  Merits
X *    - More point and line types
X *    - Options to change point size, linewidth, dot & dash intervals
X *    - Dotted and dashed lines for high-sample-rate curves (but may
X *      depend on tpic (da & dt) implementation of your dvi driver :-)
X *    - Overlapped points made fancier by tpic shading facility
X *    - Optional comments for trimming figure margins
X *    - No need for epic and eepic macros
X *  Drawback
X *    - You cannot use eepicemu macro for non-tpic-support dvi drivers
X *
X * LATEX must also be defined.
X */
X
X
X/* These parameters can be modified as you like, through options.  Say 
X   "set terminal tpic <pointsize> <linewidth> <interval>".  <pointsize> 
X   and <linewidth> are integers in milli-inches; <interval> is a float 
X   in inches.  If non-positive value is specified, the default (below) 
X   is chosen. 
X*/
Xstatic int tpic_pointsize   =  40; /* min point radius   (in milli-inches) */
Xstatic int tpic_linewidth   =   6; /* min line thickness (in milli-inches) */
Xstatic double tpic_interval = 0.1; /* min dot & dash intervals (in inches) */
X
X/* ARROWS: same code as for LATEX */
X/* static void best\_latex\_arrow(int sx, int sy, int ex, int ey, int who, 
X	TBOOLEAN head); figure out the best arrow. in latex.trm */
Xstatic void best_latex_arrow();
X
X/* all prototypes ... */
Xint TPIC_options(); /* get size options */
Xint TPIC_init();
Xint TPIC_reset();
Xint TPIC_text();
X/* TBOOLEAN TPIC_scale(double xs, double ys);  scaling factors */
XTBOOLEAN TPIC_scale();
Xint TPIC_graphics();
X/* int TPIC_move(unsigned int x, unsigned int y);
Xint TPIC_vector(unsigned int ux, unsigned int uy); */
Xint TPIC_move();
Xint TPIC_vector();
Xstatic void tpic_startline();  /* private */
Xstatic void tpic_endline();  /* private */
X/* static void tpic_pushpath(unsigned int x, unsigned int y); /* private */
Xstatic void tpic_pushpath();
Xstatic void tpic_scanpath();
X/* int TPIC_linetype(int linetype);
Xint TPIC_put_text(int x, int y, char *str); /* ref point and text */
Xint TPIC_linetype();
Xint TPIC_put_text();
X/* TBOOLEAN TPIC_text_angle(int angle);
XTBOOLEAN TPIC_justify_text(enum JUSTIFY mode); */
XTBOOLEAN TPIC_text_angle();
XTBOOLEAN TPIC_justify_text();
X/* int TPIC_point(unsigned int x, unsigned int y, int number); */
Xint TPIC_point();
X/* int TPIC_arrow(int sx, int sy, int ex, int ey, TBOOLEAN head); */
Xint TPIC_arrow();
X/* void tpic_diamond(int size); */
Xvoid tpic_diamond();
X/* void tpic_plus(int size); */
Xvoid tpic_plus();
X/* void tpic_box(int size); */
Xvoid tpic_box();
X/* void tpic_times(int size); */
Xvoid tpic_times();
X/* void tpic_triangle(int size); */
Xvoid tpic_triangle();
X/* void tpic_star(int size); */
Xvoid tpic_star();
X/* void tpic_hexagon(int size); */
Xvoid tpic_hexagon();
X/* void tpic_circle(int size); */
Xvoid tpic_circle();
X/* void tpic_doublecircle(int size); */
Xvoid tpic_doublecircle();
X/* void tpic_vercircle(int size); /* circle with | */
Xvoid tpic_vercircle(); /* circle with | */
X/* void tpic_horcircle(int size); /* circle with - */
Xvoid tpic_horcircle(); /* circle with - */
X/* void tpic_pluscircle(int size); /* circle with + */
Xvoid tpic_pluscircle(); /* circle with + */
X/* void tpic_timescircle(int size); /* circle with times */
Xvoid tpic_timescircle(); /* circle with times */
X/* void tpic_starcircle(int size); /* circle with star */
Xvoid tpic_starcircle(); /* circle with star */
X/* void tpic_dotcircle(int size); /* circle with dot (black circle) */
Xvoid tpic_dotcircle(); /* circle with dot (black circle) */
X/* void tpic_diamondcircle(int size); /* circle with black diamond */
Xvoid tpic_diamondcircle(); /* circle with black diamond */
X/* void tpic_boxcircle(int size); /* circle with black box */
Xvoid tpic_boxcircle(); /* circle with black box */
X/* void tpic_trianglecircle(int size); /* circle with black triangle */
Xvoid tpic_trianglecircle(); /* circle with black triangle */
X/* void tpic_hexagoncircle(int size); /* circle with black hexagon */
Xvoid tpic_hexagoncircle(); /* circle with black hexagon */
X/* void tpic_plustimescircle(int size); /* no more idea ... with plus & times */
Xvoid tpic_plustimescircle(); /* no more idea ... with plus & times */
X/* void tpic_abspath(unsigned int x, unsigned int y); /* absolute coord */
Xvoid tpic_abspath(); /* absolute coord */
X/* void tpic_path(int x, int y); */
Xvoid tpic_path();
X/* void tpic_flush(void); */
Xvoid tpic_flush();
X/* void tpic_arc(int radius); /* actually, draw a full circle */
Xvoid tpic_arc(); /* actually, draw a full circle */
X/* void tpic_shade(double grayscale); */
Xvoid tpic_shade();
X/* void tpic_pen(int thickness); */
Xvoid tpic_pen();
X/* void tpic_dottedflush(double interval); */
Xvoid tpic_dottedflush();
X/* void tpic_dashedflush(double interval); */
Xvoid tpic_dashedflush();
X
X#define TPIC_UNIT 0.001 /* tpic \specials unit in inches (1 milli-inch) */
X/* 5 inches wide by 3 inches high (default) */
X#define TPIC_XMAX (unsigned int) (5 / TPIC_UNIT)
X#define TPIC_YMAX (unsigned int) (3 / TPIC_UNIT)
X#define TPIC_PTS_PER_UNIT (72.27 * TPIC_UNIT)
X#define TPIC_HTIC  (unsigned int) ( 5.0 / TPIC_PTS_PER_UNIT) /* 5pt */
X#define TPIC_VTIC  (unsigned int) ( 5.0 / TPIC_PTS_PER_UNIT) /* 5pt */
X#define TPIC_HCHAR (unsigned int) ( 5.3 / TPIC_PTS_PER_UNIT) /* 5.3pt */
X#define TPIC_VCHAR (unsigned int) (11.0 / TPIC_PTS_PER_UNIT) /* 11pt */
X
Xtypedef enum {tpic_none, tpic_white, tpic_gray, tpic_black} tpic_shadestyle;
Xtypedef enum {tpic_nosize, tpic_small, tpic_medium, tpic_large} tpic_size;
X/* typedef void (*tpic_function)(int size); */
Xtypedef void (*tpic_function)();
Xtypedef struct {
X	tpic_shadestyle shadestyle;
X	tpic_size size;
X	tpic_function function;
X} tpic_point_info;
X
X/* POINTS */
Xstatic GPFAR tpic_point_info GPFAR tpic_point[] = {
X	{tpic_white, tpic_medium, tpic_diamond},
X	{tpic_none,  tpic_medium, tpic_plus},
X	{tpic_white, tpic_medium, tpic_box},
X	{tpic_none,  tpic_medium, tpic_times},
X	{tpic_white, tpic_medium, tpic_triangle},
X	{tpic_none,  tpic_medium, tpic_star},
X	{tpic_white, tpic_small,  tpic_circle},
X	{tpic_white, tpic_medium, tpic_circle},
X	{tpic_white, tpic_large,  tpic_circle},
X	{tpic_black, tpic_small,  tpic_circle},
X	{tpic_black, tpic_medium, tpic_circle},
X	{tpic_black, tpic_large,  tpic_circle},
X	{tpic_black, tpic_medium, tpic_diamond},
X	{tpic_black, tpic_medium, tpic_box},
X	{tpic_black, tpic_medium, tpic_triangle},
X	{tpic_white, tpic_medium, tpic_hexagon},
X	{tpic_black, tpic_medium, tpic_hexagon},
X	{tpic_white, tpic_medium, tpic_doublecircle},
X	{tpic_white, tpic_medium, tpic_vercircle},
X	{tpic_white, tpic_medium, tpic_horcircle},
X	{tpic_white, tpic_medium, tpic_pluscircle},
X	{tpic_white, tpic_medium, tpic_timescircle},
X	{tpic_white, tpic_medium, tpic_starcircle},
X	{tpic_black, tpic_medium, tpic_doublecircle},
X	{tpic_white, tpic_medium, tpic_dotcircle},
X	{tpic_white, tpic_medium, tpic_diamondcircle},
X	{tpic_white, tpic_medium, tpic_boxcircle},
X	{tpic_white, tpic_medium, tpic_trianglecircle},
X	{tpic_white, tpic_medium, tpic_hexagoncircle},
X	{tpic_white, tpic_medium, tpic_plustimescircle}
X};
X
Xtypedef enum {tpic_solid, tpic_dotted, tpic_dashed, 
X	tpic_dashed_sdot, tpic_dashed_ddot} tpic_linestyle;
Xtypedef struct {
X	tpic_size thickness, interval;
X	tpic_linestyle linestyle;
X} tpic_line_info;
X
X/* LINES */
Xstatic GPFAR tpic_line_info GPFAR tpic_line[] = {
X	{tpic_medium, tpic_nosize, tpic_solid},  /* -2 border */
X	{tpic_small,  tpic_small,  tpic_dashed}, /* -1 axes */
X	{tpic_small,  tpic_nosize, tpic_solid},
X	{tpic_medium, tpic_nosize, tpic_solid},
X	{tpic_large,  tpic_nosize, tpic_solid},
X	{tpic_small,  tpic_small,  tpic_dotted},
X	{tpic_medium, tpic_small,  tpic_dotted},
X	{tpic_large,  tpic_small,  tpic_dotted},
X	{tpic_small,  tpic_small,  tpic_dashed},
X	{tpic_medium, tpic_small,  tpic_dashed},
X	{tpic_large,  tpic_small,  tpic_dashed},
X	{tpic_small,  tpic_small,  tpic_dashed_sdot}, /* dash with single dots */
X	{tpic_medium, tpic_small,  tpic_dashed_sdot},
X	{tpic_large,  tpic_small,  tpic_dashed_sdot},
X	{tpic_small,  tpic_small,  tpic_dashed_ddot}, /* dash with double dots */
X	{tpic_medium, tpic_small,  tpic_dashed_ddot},
X	{tpic_large,  tpic_small,  tpic_dashed_ddot},
X	{tpic_small,  tpic_medium, tpic_dotted},
X	{tpic_medium, tpic_medium, tpic_dotted},
X	{tpic_large,  tpic_medium, tpic_dotted},
X	{tpic_small,  tpic_medium, tpic_dashed},
X	{tpic_medium, tpic_medium, tpic_dashed},
X	{tpic_large,  tpic_medium, tpic_dashed},
X	{tpic_small,  tpic_medium, tpic_dashed_sdot},
X	{tpic_medium, tpic_medium, tpic_dashed_sdot},
X	{tpic_large,  tpic_medium, tpic_dashed_sdot},
X	{tpic_small,  tpic_medium, tpic_dashed_ddot},
X	{tpic_medium, tpic_medium, tpic_dashed_ddot},
X	{tpic_large,  tpic_medium, tpic_dashed_ddot},
X	{tpic_small,  tpic_large,  tpic_dotted},
X	{tpic_medium, tpic_large,  tpic_dotted},
X	{tpic_large,  tpic_large,  tpic_dotted},
X	{tpic_small,  tpic_large,  tpic_dashed},
X	{tpic_medium, tpic_large,  tpic_dashed},
X	{tpic_large,  tpic_large,  tpic_dashed},
X	{tpic_small,  tpic_large,  tpic_dashed_sdot},
X	{tpic_medium, tpic_large,  tpic_dashed_sdot},
X	{tpic_large,  tpic_large,  tpic_dashed_sdot},
X	{tpic_small,  tpic_large,  tpic_dashed_ddot},
X	{tpic_medium, tpic_large,  tpic_dashed_ddot},
X	{tpic_large,  tpic_large,  tpic_dashed_ddot}
X};
X
X/* int TPIC_options(void) /* get size options */
Xint TPIC_options() /* get size options */
X{
X/*
X	extern struct value *const_express(struct value *valptr);
X	extern double real(struct value *val);
X	*/
X	extern struct value *const_express();
X	extern double real();
X	struct value a;
X	int pointsize, linewidth;
X	double interval;
X
X	if (!END_OF_COMMAND) {
X		pointsize = (int)real(const_express(&a));
X		if (pointsize > 0) tpic_pointsize = pointsize;
X	}
X
X	if (!END_OF_COMMAND) {
X		linewidth = (int)real(const_express(&a));
X		if (linewidth > 0) tpic_linewidth = linewidth;
X	}
X
X	if (!END_OF_COMMAND) {
X		interval = (double)real(const_express(&a));
X		if (interval > 0) tpic_interval = interval;
X	}
X
X	sprintf(term_options, "%d %d %f", tpic_pointsize, tpic_linewidth, 
X		tpic_interval);
X	return(0);
X}
X
Xstatic unsigned int tpic_posx; /* current position */
Xstatic unsigned int tpic_posy;
Xstatic int tpic_point_types;
Xstatic int tpic_numlines;
X
X/* int TPIC_init(void) */
Xint TPIC_init()
X{
Xstatic char GPFAR tpic1[] = "\
X%% GNUPLOT: LaTeX picture using tpic \\specials\n\
X%%          with %d point types and %d line types\n\
X%% Options: pointsize = %d, linewidth = %d, interval = %f\n\
X%% To change above options, say:\n\
X%% set terminal tpic pointsize_value linewidth_value interval_value\n\
X%% (pointsize and linewidth - integers in milli-inches.\n\
X%%  interval - a float in inches.  If zero is specified, \n\
X%%  the default value is chosen.)\n\
X\\setlength{\\unitlength}{%fin}%%\n";
X	tpic_point_types = sizeof(tpic_point) / sizeof(tpic_point[0]);
X	tpic_numlines = sizeof(tpic_line) / sizeof(tpic_line[0]);
X
X	tpic_posx = tpic_posy = 0;
X	TPIC_linetype(-1);
X	fprintf(outfile, tpic1,
X		tpic_point_types, tpic_numlines - 2,
X		tpic_pointsize, tpic_linewidth, tpic_interval,
X		TPIC_UNIT);
X	return(0);
X}
X
X/* int TPIC_reset(void) */
Xint TPIC_reset()
X{
X	tpic_endline();
X	tpic_posx = tpic_posy = 0;
X	return(0);
X}
X
X/* int TPIC_text(void) */
Xint TPIC_text()
X{
X	tpic_endline();
X	fprintf(outfile, "\\end{picture}\n");
X	return(0);
X}
X
X/* TBOOLEAN TPIC_scale(double xs, double ys) /* scaling factors */
XTBOOLEAN TPIC_scale(xs,ys)
Xdouble xs; double ys; /* scaling factors */
X{
X	register struct termentry *t = &term_tbl[term];
X
X	/* we change the table for use in graphics.c and TPIC_graphics */
X	t->xmax = (unsigned int)(TPIC_XMAX * xs);
X	t->ymax = (unsigned int)(TPIC_YMAX * ys);
X	return(TRUE);
X}
X
X/* int TPIC_graphics(void) */
Xint TPIC_graphics()
X{
X	register struct termentry *t = &term_tbl[term];
X	int left, right, top, bottom; /* margins */
X	static char GPFAR begin[] = "%s\\begin{picture}(%d,%d)(%d,%d)%% %s\n";
X
X	fprintf(outfile, begin, "", t->xmax, t->ymax, 0, 0, "");
X
X	/* the following is dependent on boundary() function in graphics.c */
X	left = TPIC_HCHAR * 12;
X	right = TPIC_HCHAR * 2 + TPIC_HTIC;
X	bottom = TPIC_VCHAR * 7 / 2 + 1;
X	top = TPIC_VCHAR * 5 / 2 - 1;
X	fprintf(outfile, begin, "%% ", t->xmax - left, t->ymax, left, 0, 
X		"trim left margin");
X	fprintf(outfile, begin, "%% ", t->xmax - right, t->ymax, 0, 0, 
X		"trim right margin");
X	fprintf(outfile, begin, "%% ", t->xmax - left - right, t->ymax, left, 0, 
X		"trim left & right margins");
X	fprintf(outfile, begin, "%% ", t->xmax, t->ymax - top, 0, 0, 
X		"trim top margin");
X	fprintf(outfile, begin, "%% ", t->xmax, t->ymax - bottom, 0, bottom, 
X		"trim bottom margin");
X	fprintf(outfile, begin, "%% ", t->xmax, t->ymax - top - bottom, 0, bottom,
X		"trim top & bottom margins");
X
X	fprintf(outfile, "\\tenrm%%\n");
X	return(0);
X}
X
X/* int TPIC_move(unsigned int x, unsigned int y) */
Xint TPIC_move(x,y)
Xunsigned int x; unsigned int y;
X{
X	tpic_endline();
X	tpic_posx = x;
X	tpic_posy = y;
X	return(0);
X}
X
X#define TPIC_LINEMAX 100 /* max value for linecount */
Xstatic TBOOLEAN tpic_inline = FALSE; /* are we in the middle of a line */
Xstatic int tpic_linecount = 0; /* number of points in line so far */
X
X/* int TPIC_vector(unsigned int ux, unsigned int uy) */
Xint TPIC_vector(ux,uy)
Xunsigned int ux; unsigned int uy;
X{
X	if (!tpic_inline) {
X		tpic_startline();
X	} else if (tpic_linecount >= TPIC_LINEMAX) {
X		/* Even though we are in middle of a path, we may start a new path 
X		command once in a while; if they are too long, latex will choke. */
X		tpic_endline();
X		tpic_startline();
X	}
X	tpic_pushpath(ux, uy);
X	tpic_posx = ux;
X	tpic_posy = uy;
X	return(0);
X}
X
Xstatic int tpic_linetype; /* current line type */
X
X/* static void tpic_startline(void) /* private */
Xstatic void tpic_startline() /* private */
X{
X	int thickness;
X
X	tpic_inline = TRUE;
X	switch (tpic_line[tpic_linetype + 2].thickness) {
X	case tpic_small:
X		thickness = tpic_linewidth;
X		break;
X	case tpic_medium:
X		thickness = (int)(tpic_linewidth * 3);
X		break;
X	case tpic_large:
X		thickness = (int)(tpic_linewidth * 5);
X		break;
X	}
X	tpic_pen(thickness);
X	tpic_linecount = 0;
X	tpic_pushpath(tpic_posx, tpic_posy);
X	return;
X}
X
X/* static void tpic_endline(void) /* private */
Xstatic void tpic_endline() /* private */
X{
X	double interval;
X
X	if (tpic_inline) {
X		tpic_scanpath(); /* draw actually */
X		switch (tpic_line[tpic_linetype + 2].interval) {
X		case tpic_small:
X			interval = tpic_interval;
X			break;
X		case tpic_medium:
X			interval = tpic_interval * 2;
X			break;
X		case tpic_large:
X			interval = tpic_interval * 3;
X			break;
X		case tpic_nosize:
X			break;
X		}
X		switch (tpic_line[tpic_linetype + 2].linestyle) {
X		case tpic_solid:
X			tpic_flush();
X			break;
X		case tpic_dotted:
X			tpic_dottedflush(interval);
X			break;
X		case tpic_dashed:
X			tpic_dashedflush(interval);
X			break;
X		case tpic_dashed_sdot: /* dashed with single dots in between */
X			tpic_dashedflush(interval);
X			tpic_scanpath(); /* draw again */
X			tpic_dottedflush(interval / 2);
X			break;
X		case tpic_dashed_ddot: /* dashed with double dots in between */
X			tpic_dashedflush(interval);
X			tpic_scanpath(); /* draw again */
X			tpic_dottedflush(interval / 3);
X			break;
X		}
X		tpic_inline = FALSE;
X	}
X	return;
X}
X
X/* private: stack functions */
Xstatic unsigned int pathpoint[TPIC_LINEMAX][2]; /* point stack */
X
X/* static void tpic_pushpath(unsigned int x, unsigned int y) /* private */
Xstatic void tpic_pushpath(x,y)
Xunsigned int x; unsigned int y; /* private */
X{
X	if (tpic_linecount < TPIC_LINEMAX) {
X		pathpoint[tpic_linecount][0] = x;
X		pathpoint[tpic_linecount][1] = y;
X		tpic_linecount++;
X	}
X	return;
X}
X
X/* static void tpic_scanpath(void) */
Xstatic void tpic_scanpath()
X{
X	int i;
X
X	for (i = 0; i < tpic_linecount; i++)
X		tpic_abspath(pathpoint[i][0], pathpoint[i][1]);
X	return;
X}
X
X/* int TPIC_linetype(int linetype) */
Xint TPIC_linetype(linetype)
Xint linetype;
X{
X	tpic_endline();
X	if (linetype >= tpic_numlines - 2) linetype %= (tpic_numlines - 2);
X	tpic_linetype = linetype;
X	return(0);
X}
X
Xstatic int tpic_angle = 0; /* 0 = horizontal, 1 = vertical */
Xstatic enum JUSTIFY tpic_justify = LEFT;
X
X/* int TPIC_put_text(int x, int y, char *str) /* ref point and text */
Xint TPIC_put_text(x,y,str)
Xint x; int y; char *str; /* ref point and text */
X{
X	char *justify;
X
X	tpic_endline();
X	fprintf(outfile, "\\put(%d,%d)", x, y);
X
X	switch (tpic_angle) {
X	case 0: /* horizontal */
X		switch (tpic_justify) {
X		case LEFT:
X			justify = "[l]";
X			break;
X		case CENTRE:
X			justify = "";
X			break;
X		case RIGHT:
X			justify = "[r]";
X			break;
X		}
X		fprintf(outfile, "{\\makebox(0,0)%s{%s}}\n", justify, str);
X		break;
X	case 1: /* vertical */
X		/* we can't really write text vertically, but will put the ylabel 
X		centred at the left of the plot, and then we'll make a \shortstack */
X		switch (tpic_justify) {
X		case LEFT:
X			justify = "[lb]";
X			break;
X		case CENTRE:
X			justify = "[l]";
X			break;
X		case RIGHT:
X			justify = "[lt]";
X			break;
X		}
X		fprintf(outfile, "{\\makebox(0,0)%s{\\shortstack{%s}}}\n", 
X			justify, str);
X		break;
X	}
X	return(0);
X}
X
X/* TBOOLEAN TPIC_text_angle(int angle) */
XTBOOLEAN TPIC_text_angle(angle)
Xint angle;
X{
X	tpic_angle = angle;
X	return(TRUE);
X}
X
X/* TBOOLEAN TPIC_justify_text(enum JUSTIFY mode) */
XTBOOLEAN TPIC_justify_text(mode)
Xenum JUSTIFY mode;
X{
X	tpic_justify = mode;
X	return(TRUE);
X}
X
X/* int TPIC_point(unsigned int x, unsigned int y, int number) */
Xint TPIC_point(x,y,number)
Xunsigned int x; unsigned int y; int number;
X{
X	int size;
X
X	TPIC_move(x, y);
X
X	/* Print the character defined by 'number'; number < 0 means 
X	to use a dot, otherwise one of the defined points. */
X
X	fprintf(outfile, "\\put(%d,%d){", x, y); /* start putting */
X
X	if (number < 0) {
X		fprintf(outfile, "\\rule{.1pt}{.1pt}"); /* tiny dot */
X	} else {
X		number %= tpic_point_types;
X		switch (tpic_point[number].shadestyle) {
X		case tpic_white:
X			tpic_pen(tpic_linewidth); /* set it thin */
X			tpic_shade(0.0);
X			break;
X		case tpic_gray:
X			tpic_pen(tpic_linewidth);
X			tpic_shade(0.5);
X			break;
X		case tpic_black:
X			tpic_pen(tpic_linewidth);
X			tpic_shade(1.0);
X			break;
X		case tpic_none:
X			tpic_pen(tpic_linewidth * 3); /* set it thick */
X			break;
X		}
X		switch (tpic_point[number].size) {
X		case tpic_small:
X			size = tpic_pointsize;
X			break;
X		case tpic_medium:
X			size = (int)(tpic_pointsize * 1.4142);
X			break;
X		case tpic_large:
X			size = (int)(tpic_pointsize * 2.0);
X			break;
X		}
X		(tpic_point[number].function)(size);
X	}
X
X	fprintf(outfile, "}%%\n"); /* end putting */
X	return(0);
X}
X
X/* int TPIC_arrow(int sx, int sy, int ex, int ey, TBOOLEAN head) */
Xint TPIC_arrow(sx,sy,ex,ey,head)
Xint sx; int sy; int ex; int ey; TBOOLEAN head;
X{
X	best_latex_arrow(sx, sy, ex, ey, 1, head); /* call latex routine */
X	tpic_posx = ex;
X	tpic_posy = ey;
X	return(0);
X}
X
X/* private: draw points with tpic commands */
X
X/* void tpic_diamond(int size) */
Xvoid tpic_diamond(size)
Xint size;
X{
X	size = (int)(size * 1.4142); /* spread by sqrt(2) */
X
X	tpic_path(0, size);
X	tpic_path(-size, 0);
X	tpic_path(0, -size);
X	tpic_path(size, 0);
X	tpic_path(0, size);
X	tpic_flush();
X	return;
X}
X
X/* void tpic_plus(int size) */
Xvoid tpic_plus(size)
Xint size;
X{
X	tpic_path(0, size);
X	tpic_path(0, -size);
X	tpic_flush();
X	tpic_path(size, 0);
X	tpic_path(-size, 0);
X	tpic_flush();
X	return;
X}
X
X/* void tpic_box(int size) */
Xvoid tpic_box(size)
Xint size;
X{
X	tpic_path(size, size);
X	tpic_path(-size, size);
X	tpic_path(-size, -size);
X	tpic_path(size, -size);
X	tpic_path(size, size);
X	tpic_flush();
X	return;
X}
X
X/* void tpic_times(int size) */
Xvoid tpic_times(size)
Xint size;
X{
X	size = (int)(size / 1.4142); /* reduce by sqrt(2) */
X
X	tpic_path(size, size);
X	tpic_path(-size, -size);
X	tpic_flush();
X	tpic_path(size, -size);
X	tpic_path(-size, size);
X	tpic_flush();
X	return;
X}
X
X/* void tpic_triangle(int size) */
Xvoid tpic_triangle(size)
Xint size;
X{
X	int x;
X
X	size = (int)(size / 1.6119); /* reduce by sqrt(3 * sqrt(3) / 2) */
X	x = (int)(size * 1.7321);
X
X	tpic_path(0, -size * 2);
X	tpic_path(-x, size);
X	tpic_path(x, size);
X	tpic_path(0, -size * 2);
X	tpic_flush();
X	return;
X}
X
X/* void tpic_star(int size) */
Xvoid tpic_star(size)
Xint size;
X{
X	int x;
X
X	size = (int)(size / 2); /* reduce by 2 */
X	x = (int)(size * 1.7321);
X
X	tpic_path(0, size * 2);
X	tpic_path(0, -size * 2);
X	tpic_flush();
X	tpic_path(x, size);
X	tpic_path(-x, -size);
X	tpic_flush();
X	tpic_path(x, -size);
X	tpic_path(-x, size);
X	tpic_flush();
X	return;
X}
X
X/* void tpic_hexagon(int size) */
Xvoid tpic_hexagon(size)
Xint size;
X{
X	int x;
X
X	size = (int)(size / 2); /* reduce by 2 */
X	x = (int)(size * 1.7321);
X
X	tpic_path(0, size * 2);
X	tpic_path(-x, size);
X	tpic_path(-x, -size);
X	tpic_path(0, -size * 2);
X	tpic_path(x, -size);
X	tpic_path(x, size);
X	tpic_path(0, size * 2);
X	tpic_flush();
X	return;
X}
X
X/* void tpic_circle(int size) */
Xvoid tpic_circle(size)
Xint size;
X{
X	tpic_arc(size);
X	return;
X}
X
X/* void tpic_doublecircle(int size) */
Xvoid tpic_doublecircle(size)
Xint size;
X{
X	tpic_arc(size);
X	tpic_shade(0.0);
X	tpic_arc(size / 2);
X	return;
X}
X
X/* void tpic_vercircle(int size) /* circle with | */
Xvoid tpic_vercircle(size)
Xint size; /* circle with | */
X{
X	tpic_arc(size);
X	tpic_path(0, size);
X	tpic_path(0, -size);
X	tpic_flush();
X	return;
X}
X
X/* void tpic_horcircle(int size) /* circle with - */
Xvoid tpic_horcircle(size)
Xint size; /* circle with - */
X{
X	tpic_arc(size);
X	tpic_path(size, 0);
X	tpic_path(-size, 0);
X	tpic_flush();
X	return;
X}
X
X/* void tpic_pluscircle(int size) /* circle with + */
Xvoid tpic_pluscircle(size)
Xint size; /* circle with + */
X{
X	tpic_arc(size);
X	tpic_plus(size);
X	return;
X}
X
X/* void tpic_timescircle(int size) /* circle with times */
Xvoid tpic_timescircle(size)
Xint size; /* circle with times */
X{
X	tpic_arc(size);
X	tpic_times(size);
X	return;
X}
X
X/* void tpic_starcircle(int size) /* circle with star */
Xvoid tpic_starcircle(size)
Xint size; /* circle with star */
X{
X	tpic_arc(size);
X	tpic_star(size);
X	return;
X}
X
X/* void tpic_dotcircle(int size) /* circle with dot (black circle) */
Xvoid tpic_dotcircle(size)
Xint size; /* circle with dot (black circle) */
X{
X	tpic_arc(size);
X	tpic_shade(1.0);
X	tpic_arc(size / 2);
X	return;
X}
X
X/* void tpic_diamondcircle(int size) /* not enough? circle with black diamond */
Xvoid tpic_diamondcircle(size)
Xint size; /* not enough? circle with black diamond */
X{
X	tpic_arc(size);
X	tpic_shade(1.0);
X	tpic_diamond((int)(size / 1.5));
X	return;
X}
X
X/* void tpic_boxcircle(int size) /* need more? circle with black box */
Xvoid tpic_boxcircle(size)
Xint size; /* need more? circle with black box */
X{
X	tpic_arc(size);
X	tpic_shade(1.0);
X	tpic_box((int)(size / 1.5));
X	return;
X}
X
X/* void tpic_trianglecircle(int size) /* circle with black triangle */
Xvoid tpic_trianglecircle(size)
Xint size; /* circle with black triangle */
X{
X	tpic_arc(size);
X	tpic_shade(1.0);
X	tpic_triangle((int)(size / 1.5));
X	return;
X}
X
X/* void tpic_hexagoncircle(int size) /* how about circle with black hexagon? */
Xvoid tpic_hexagoncircle(size)
Xint size; /* how about circle with black hexagon? */
X{
X	tpic_arc(size);
X	tpic_shade(1.0);
X	tpic_hexagon((int)(size / 1.2));
X	return;
X}
X
X/* void tpic_plustimescircle(int size) /* no more idea ... with plus & times */
Xvoid tpic_plustimescircle(size)
Xint size; /* no more idea ... with plus & times */
X{
X	tpic_arc(size);
X	tpic_plus(size);
X	tpic_times(size);
X	return;
X}
X
X/* private: draw lines */
X
X/* void tpic_abspath(unsigned int x, unsigned int y) /* absolute coord */
Xvoid tpic_abspath(x,y)
Xunsigned int x; unsigned int y; /* absolute coord */
X{
X	fprintf(outfile, "\\put(%u,%u){", x, y); /* start putting */
X	tpic_path(0, 0);
X	fprintf(outfile, "}%%\n"); /* end putting */
X	return;
X}
X
X/* private: tpic primitive functions */
X
X/* void tpic_path(int x, int y) */
Xvoid tpic_path(x,y)
Xint x; int y;
X{
X	fprintf(outfile, "\\special{pa %d %d}", x, y);
X	return;
X}
X
X/* void tpic_flush(void) */
Xvoid tpic_flush()
X{
X	fprintf(outfile, "\\special{fp}%%\n");
X	return;
X}
X
X/* void tpic_arc(int radius) /* actually, draw a full circle */
Xvoid tpic_arc(radius)
Xint radius; /* actually, draw a full circle */
X{
X	fprintf(outfile, "\\special{ar 0 0 %d %d 0 7}", radius, radius);
X	return;
X}
X
X/* void tpic_shade(double grayscale) */
Xvoid tpic_shade(grayscale)
Xdouble grayscale;
X{
X	fprintf(outfile, "\\special{sh %f}", grayscale);
X	return;
X}
X
X/* void tpic_pen(int thickness) */
Xvoid tpic_pen(thickness)
Xint thickness;
X{
X	fprintf(outfile, "\\special{pn %d}", thickness);
X	return;
X}
X
X/* void tpic_dottedflush(double interval) */
Xvoid tpic_dottedflush(interval)
Xdouble interval;
X{
X	fprintf(outfile, "\\special{dt %f}%%\n", interval);
X	return;
X}
X
X/* void tpic_dashedflush(double interval) */
Xvoid tpic_dashedflush(interval)
Xdouble interval;
X{
X	fprintf(outfile, "\\special{da %f}%%\n", interval);
X	return;
X}
END_OF_FILE
  if test 25790 -ne `wc -c <'gnuplot/term/tpic.trm'`; then
    echo shar: \"'gnuplot/term/tpic.trm'\" unpacked with wrong size!
  fi
  # end of 'gnuplot/term/tpic.trm'
fi
echo shar: End of archive 11 \(of 33\).
cp /dev/null ark11isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 33 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0
exit 0 # Just in case...
