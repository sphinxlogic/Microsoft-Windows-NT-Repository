Newsgroups: comp.sources.misc
From: Raphael Manfredi <ram@acri.fr>
Subject: v40i046:  dist-3.0 - Configure script generator and related tools, Patch12
Message-ID: <1993Oct25.211047.3761@sparky.sterling.com>
X-Md4-Signature: bb0fea45bb794997a7480eb4b984f956
Sender: kent@sparky.sterling.com (Kent Landfield)
Organization: Advanced Computer Research Institute, Lyon, France
Date: Mon, 25 Oct 1993 21:10:47 GMT
Approved: kent@sparky.sterling.com

Submitted-by: Raphael Manfredi <ram@acri.fr>
Posting-number: Volume 40, Issue 46
Archive-name: dist-3.0/patch12
Environment: UNIX, Perl, RCS
Patch-To: dist-3.0: Volume 39, Issue 5-32

[The latest patch for dist version 3.0 is #13.]

System: dist version 3.0
Patch #: 12
Priority: LOW
Subject: updated Configure script with newer metaconfig
Subject: created for ?M: lines support (magic symbols)
Subject: now makes sure user-specified address is in Internet format
Subject: added magic support for bcmp()
Subject: added magic support for bcopy()
Subject: added magic support for bzero()
Subject: added magic for index() and rindex()
Subject: added magic for vfork()
Subject: added support for HAS_INDEX
Subject: comment for SIGNALS_KEPT was the other way round
Subject: updated to support new ?M: lines
Subject: new option -M to activate ?M: lines
Subject: documents new ?M: lines format
Subject: new internal Makefile command cm_h_weed for ?M: support
Subject: documents usage for new confmagic.h file
Subject: added support for ?M: lines and fixed some typos
Subject: added BUGS section for metaxref
Subject: new -M option for magic symbols and confmagic.h production
Subject: added minimal support for ?P: lines (not ready yet)
Subject: now skip confmagic.h when -M option is used
Subject: metalint now checks ?M: lines also
Subject: added warning when magic symbols used without proper config
Subject: three new files
Date: Sat Oct 16 14:57:09 MET 1993
From: Raphael Manfredi <ram@acri.fr>

Description:
	Updated Configure script with newer metaconfig. That has to be
	done from time to time.

	MailAuthor.U now makes sure user-specified address is in Internet
	format, to avoid predictable bounces when mailing patches to people.

	Comment for SIGNALS_KEPT was the other way round, thanks to
	Scott Grosch <garath@engin.umich.edu> for pointing it out.

	There is now a new option -M in metaconfig to activate ?M: lines
	and turn back the magic on (which was removed at patchlevel 11).
	This magic processing simply remaps non-portable functions to other
	well-known functions, for easy and transparent code writing. This
	magic concerns the following routines:

		bcmp()
		bcopy()
		bzero()
		index() and rindex()
		vfork()

	When the -M option is given to metaconfig, a confmagic.h file is
	generated. That file has to be included after "config.h" but also
	after all the otherwise needed inclusions.

	If you choose to not use the -M option, you will have to do whatever
	is necessary to ensure portability, by checking the value of HAS_BCMP
	for instance whenever you use bcmp() and provide your own or do the
	mapping to memcmp() yourself. If you don't, metaconfig will warn you
	and suggest you use -M.

	Added support for HAS_INDEX, in order to implement ?M: lines for
	index() and rindex().

	This new -M option now introduces a small bug in metaxref, which
	is documented in the new BUGS section in the manual page.

	Added minimal support for ?P: lines (not ready yet). I simply did
	not want to remove the code I have been writing to add that support,
	but ?P: lines are not supported yet. That will happen in the near
	future, but not necessarily in the next patch(es).

	Metalint now checks ?M: lines also, in order to ensure a minimal
	consistency...

	Three new files.


Fix:	From rn, say "| patch -p -N -d DIR", where DIR is your dist source
	directory.  Outside of rn, say "cd DIR; patch -p -N <thisarticle".
	If you don't have the patch program, apply the following by hand,
	or get patch (version 2.0, latest patchlevel).

	After patching:
		*** DO NOTHING--INSTALL ALL PATCHES UP THROUGH #13 FIRST ***

	If patch indicates that patchlevel is the wrong version, you may need
	to apply one or more previous patches, or the patch may already
	have been applied.  See the patchlevel.h file to find out what has or
	has not been applied.  In any event, don't continue with the patch.

	If you are missing previous patches they can be obtained from me:

		Raphael Manfredi <ram@acri.fr>

	If you send a mail message of the following form it will greatly speed
	processing:

		Subject: Command
		@SH mailpatch PATH dist 3.0 LIST
			   ^ note the c

	where PATH is a return path FROM ME TO YOU either in Internet notation,
	or in bang notation from some well-known host, and LIST is the number
	of one or more patches you need, separated by spaces, commas, and/or
	hyphens.  Saying 35- says everything from 35 to the end.

	To get some more detailed instructions, send me the following mail:

		Subject: Command
		@SH mailhelp PATH


Index: patchlevel.h
Prereq: 11
4c4
< #define PATCHLEVEL 11
---
> #define PATCHLEVEL 12

Index: Configure
Prereq: 3.0.1.2
*** Configure.old	Sat Oct 16 14:56:40 1993
--- Configure	Sat Oct 16 14:56:41 1993
***************
*** 18,26 ****
  # archive site. Check with Archie if you don't know where that can be.)
  #
  
! # $Id: Configure,v 3.0.1.2 1993/08/30 07:41:59 ram Exp $
  #
! # Generated on Mon Aug 30 09:38:39 MET DST 1993 [metaconfig 3.0 PL7]
  
  cat >/tmp/c1$$ <<EOF
  ARGGGHHHH!!!!!
--- 18,26 ----
  # archive site. Check with Archie if you don't know where that can be.)
  #
  
! # $Id: Configure,v 3.0.1.3 1993/10/16 13:45:31 ram Exp $
  #
! # Generated on Sat Oct 16 14:42:24 MET 1993 [metaconfig 3.0 PL11]
  
  cat >/tmp/c1$$ <<EOF
  ARGGGHHHH!!!!!
***************
*** 190,195 ****
--- 190,196 ----
  passcat=''
  orgname=''
  package=''
+ spackage=''
  pager=''
  patchlevel=''
  perlpath=''
***************
*** 326,332 ****
  	-s) shift; silent=true;;
  	-E) shift; alldone=exit;;
  	-S) shift; extractsh=true;;
! 	-V) echo "Configure generated by metaconfig 3.0 PL7." >&2
  		exit 0;;
  	--) break;;
  	-*) echo "Configure: unknown option $1" >&2; shift; error=true;;
--- 327,333 ----
  	-s) shift; silent=true;;
  	-E) shift; alldone=exit;;
  	-S) shift; extractsh=true;;
! 	-V) echo "Configure generated by metaconfig 3.0 PL11." >&2
  		exit 0;;
  	--) break;;
  	-*) echo "Configure: unknown option $1" >&2; shift; error=true;;
***************
*** 378,383 ****
--- 379,387 ----
  
  : set package name
  package=dist
+ first=`echo $package | sed -e 's/^\(.\).*/\1/'`
+ last=`echo $package | sed -e 's/^.\(.*\)/\1/'`
+ spackage=`echo $first | tr '[a-z]' '[A-Z]'`$last
  
  : Eunice requires " " instead of "", can you believe it
  echo " "
***************
*** 687,693 ****
  			echo "It does."
  			sharpbang='#! '
  		else
! 			echo "It doesn't."
  			sharpbang=': use '
  		fi
  	fi
--- 691,697 ----
  			echo "It does."
  			sharpbang='#! '
  		else
! 			echo "It's just a comment."
  			sharpbang=': use '
  		fi
  	fi
***************
*** 840,854 ****
  test)
  	echo "Hopefully test is built into your sh."
  	;;
! /bin/test)
  	if sh -c "PATH= test true" >/dev/null 2>&1; then
  		echo "Using the test built into your sh."
  		test=test
  	fi
  	;;
- *)
- 	test=test
- 	;;
  esac
  case "$echo" in
  echo)
--- 844,855 ----
  test)
  	echo "Hopefully test is built into your sh."
  	;;
! *)
  	if sh -c "PATH= test true" >/dev/null 2>&1; then
  		echo "Using the test built into your sh."
  		test=test
  	fi
  	;;
  esac
  case "$echo" in
  echo)
***************
*** 885,891 ****
  '')
  myuname=`( ($uname -a) 2>/dev/null || hostname) 2>&1`
  dflt=n
! if test -f ../config.sh; then
  	oldmyuname=''
  	if $contains myuname= ../config.sh >/dev/null 2>&1; then
  		eval "old`grep myuname= ../config.sh`"
--- 886,894 ----
  '')
  myuname=`( ($uname -a) 2>/dev/null || hostname) 2>&1`
  dflt=n
! if test "$fastread" = yes; then
! 	dflt=y
! elif test -f ../config.sh; then
  	oldmyuname=''
  	if $contains myuname= ../config.sh >/dev/null 2>&1; then
  		eval "old`grep myuname= ../config.sh`"
***************
*** 1064,1069 ****
--- 1067,1073 ----
  	;;
  esac
  
+ cd ..
  while test "$type"; do
  	redo=''
  	rp="$orig_rp"
***************
*** 1071,1077 ****
  	case "$tilde" in
  	true) rp="$rp (~name ok)";;
  	esac
! 	. ./myread
  	case "$ans" in
  	none)
  		value=''
--- 1075,1081 ----
  	case "$tilde" in
  	true) rp="$rp (~name ok)";;
  	esac
! 	. UU/myread
  	case "$ans" in
  	none)
  		value=''
***************
*** 1083,1091 ****
  	*)
  		case "$tilde" in
  		'') value="$ans"
! 		    ansexp="$ans";;
  		*)
! 			value=`./filexp $ans`
  			case $? in
  			0)
  				if test "$ans" != "$value"; then
--- 1087,1095 ----
  	*)
  		case "$tilde" in
  		'') value="$ans"
! 			ansexp="$ans";;
  		*)
! 			value=`UU/filexp $ans`
  			case $? in
  			0)
  				if test "$ans" != "$value"; then
***************
*** 1165,1171 ****
  					dflt=n
  				fi
  				rp="$what $value doesn't exist.  Use that name anyway?"
! 				. ./myread
  				dflt=''
  				case "$ans" in
  				y*) type='';;
--- 1169,1175 ----
  					dflt=n
  				fi
  				rp="$what $value doesn't exist.  Use that name anyway?"
! 				. UU/myread
  				dflt=''
  				case "$ans" in
  				y*) type='';;
***************
*** 1178,1183 ****
--- 1182,1188 ----
  		;;
  	esac
  done
+ cd UU
  ans="$value"
  rp="$orig_rp"
  dflt="$orig_dflt"
***************
*** 1213,1219 ****
  : determine where manual pages are on this system
  echo " "
  case "$sysman" in
! '') sysman=`./loc . /usr/man/man1 /usr/man/man1 /usr/man/mann /usr/man/manl /usr/man/local/man1 /usr/man/u_man/man1 /usr/share/man/man1 /usr/catman/u_man/man1 /usr/man/l_man/man1 /usr/local/man/u_man/man1 /usr/local/man/l_man/man1 /usr/man/man.L`
  	;;
  esac
  if $test -d "$sysman"; then
--- 1218,1231 ----
  : determine where manual pages are on this system
  echo " "
  case "$sysman" in
! '') 
! 	syspath='/usr/man/man1 /usr/man/man1 /usr/man/mann'
! 	syspath="$syspath /usr/man/manl /usr/man/local/man1"
! 	syspath="$syspath /usr/man/u_man/man1 /usr/share/man/man1"
! 	syspath="$syspath /usr/catman/u_man/man1 /usr/man/l_man/man1"
! 	syspath="$syspath /usr/local/man/u_man/man1 /usr/local/man/l_man/man1"
! 	syspath="$syspath /usr/man/man.L /local/man/man1"
! 	sysman=`./loc . $syspath`
  	;;
  esac
  if $test -d "$sysman"; then
***************
*** 1261,1267 ****
  	$cat <<EOM
  
  Since you are running AFS, I need to distinguish the directory in which
! manual page reside from the directory in which they are installed (and from
  which they are presumably copied to the former directory by occult means).
  
  EOM
--- 1273,1279 ----
  	$cat <<EOM
  
  Since you are running AFS, I need to distinguish the directory in which
! manual pages reside from the directory in which they are installed (and from
  which they are presumably copied to the former directory by occult means).
  
  EOM
***************
*** 1270,1276 ****
  	*) dflt="$installmansrc";;
  	esac
  	fn=de~
! 	rp='Where will public executables be installed?'
  	. ./getfile
  	installmansrc="$ans"
  else
--- 1282,1288 ----
  	*) dflt="$installmansrc";;
  	esac
  	fn=de~
! 	rp='Where will man pages be installed?'
  	. ./getfile
  	installmansrc="$ans"
  else
***************
*** 1286,1291 ****
--- 1298,1304 ----
  *p) manext=n;;
  *C) manext=C;;
  *L) manext=L;;
+ *L1) manext=L1;;
  *) manext=1;;
  esac
  
***************
*** 1294,1299 ****
--- 1307,1313 ----
  '')
  	dflt=/usr/lib/$package
  	$test -d /usr/local/lib && dflt=/usr/local/lib/$package
+ 	$test -d /local/lib && dflt=/local/lib/$package
  	;;
  *)  dflt="$privlib"
  	;;
***************
*** 1300,1312 ****
  esac
  $cat <<EOM
  
! The $package package has some auxiliary files that should be put in a library
! that is accessible by everyone.  Where do you want to put these "private" but
! accessible files?
  
  EOM
  fn=d~+
! rp='Private library path?'
  . ./getfile
  privlib="$ans"
  privlibexp="$ansexp"
--- 1314,1325 ----
  esac
  $cat <<EOM
  
! There are some auxiliary files for $package that need to be put into a
! private library directory that is accessible by everyone.
  
  EOM
  fn=d~+
! rp='Pathname where private library files will reside?'
  . ./getfile
  privlib="$ans"
  privlibexp="$ansexp"
***************
*** 1314,1320 ****
  	$cat <<EOM
  
  Since you are running AFS, I need to distinguish the directory in which
! private file reside from the directory in which they are installed (and from
  which they are presumably copied to the former directory by occult means).
  
  EOM
--- 1327,1333 ----
  	$cat <<EOM
  
  Since you are running AFS, I need to distinguish the directory in which
! private files reside from the directory in which they are installed (and from
  which they are presumably copied to the former directory by occult means).
  
  EOM
***************
*** 1690,1696 ****
      guest:**paswword**:10:100:Mister Guest User:/usr/users:/bin/sh
                                ^^^^^^^^^^^^^^^^^
  EOM
! rp="Berkeley/V7 format for full name?"
  . ./myread
  case "$ans" in
  y*) d_passnames="$define"
--- 1703,1709 ----
      guest:**paswword**:10:100:Mister Guest User:/usr/users:/bin/sh
                                ^^^^^^^^^^^^^^^^^
  EOM
! rp="Berkeley/V7 format for full name in /etc/password?"
  . ./myread
  case "$ans" in
  y*) d_passnames="$define"
***************
*** 1719,1725 ****
      guest:**paswword**:10:100:000-Mister Guest User(000):/usr/users:/bin/sh
                                    ^^^^^^^^^^^^^^^^^
  EOM
! 	rp="USG format for full name?"
  	. ./myread
  	case "$ans" in
  	n*) echo "Full name will be taken from ~/.fullname"
--- 1732,1738 ----
      guest:**paswword**:10:100:000-Mister Guest User(000):/usr/users:/bin/sh
                                    ^^^^^^^^^^^^^^^^^
  EOM
! 	rp="USG format for full name in /etc/passwd?"
  	. ./myread
  	case "$ans" in
  	n*) echo "Full name will be taken from ~/.fullname"
***************
*** 1738,1744 ****
  esac
  
  : get organization name
! longshots='/usr/src/new /usr/src/local /usr/local/src'
  case "$orgname" in
  '') if xxx=`./loc news/src/defs.h x $longshots`; then
  		dflt=`$sed -n 's/^.*MYORG[ 	]*"\(.*\)".*$/\1/p' $xxx`
--- 1751,1757 ----
  esac
  
  : get organization name
! longshots='/local/src /usr/src/new /usr/src/local /usr/local/src'
  case "$orgname" in
  '') if xxx=`./loc news/src/defs.h x $longshots`; then
  		dflt=`$sed -n 's/^.*MYORG[ 	]*"\(.*\)".*$/\1/p' $xxx`
***************
*** 1855,1884 ****
  esac
  
  : notify author that his package is used
- case "$mailpatches$notifypatches" in
- '') dflt=y;;
- *) dflt=n;;
- esac
- needmail=true
  if $test -f ../.config/mailauthor &&
  	cmp ../patchlevel.h ../.config/mailauthor >/dev/null 2>&1
  then
! 	needmail=false
! fi
! if $needmail; then
! 	$cat <<EOM
! 
! If you are able to send mail to the Internet, the author of $package would
! really appreciate you letting me send off a quick note, just to say that you've
! tried it. The author is more likely to spend time maintaining $package if it's
! known that many people are using it, and you can even ask to get sent new
! patches automagically this way if you wish. To protect your privacy, all I'll
! say in the mail is the version of $package that you're using.
! 
! EOM
! 	rp='Should I send mail to ram@acri.fr?'
! else
! 	status="register yourself as a $package user";
  	case "$mailpatches" in
  	true) status='have patches mailed to you as they are issued';;
  	esac
--- 1868,1877 ----
  esac
  
  : notify author that his package is used
  if $test -f ../.config/mailauthor &&
  	cmp ../patchlevel.h ../.config/mailauthor >/dev/null 2>&1
  then
! 	status="say that you're using $package";
  	case "$mailpatches" in
  	true) status='have patches mailed to you as they are issued';;
  	esac
***************
*** 1887,1898 ****
  	esac
  	$cat <<EOM
  
! You have already sent the author of $package (ram@acri.fr) a mail to
  $status. If you wish, you may modify
  your previous request by sending a new mail with different options.
  
  EOM
  	rp='Should I send a status update to ram@acri.fr?'
  fi
  . ./myread
  case "$ans" in
--- 1880,1905 ----
  	esac
  	$cat <<EOM
  
! You have already sent the author of $package (ram@acri.fr) mail to
  $status. If you wish, you may modify
  your previous request by sending a new mail with different options.
  
  EOM
  	rp='Should I send a status update to ram@acri.fr?'
+ 	dflt=n
+ else
+ 	$cat <<EOM
+ 
+ If you are able to send mail to the Internet, the author of $package would
+ really appreciate you letting me send off a quick note, just to say that you've
+ tried it. The author is more likely to spend time maintaining $package if it's
+ known that many people are using it, and you can even ask to get sent new
+ patches automagically this way if you wish. To protect your privacy, all I'll
+ say in the mail is the version of $package that you're using.
+ 
+ EOM
+ 	rp='Should I send mail to ram@acri.fr?'
+ 	dflt=y
  fi
  . ./myread
  case "$ans" in
***************
*** 1901,1943 ****
  	echo "Great!. You cooperation is really appreciated."
  	$cat <<EOM
  
! Some sites do not set a proper return address in their outgoing mail,
! especially when connected to the Internet via UUCP. If the supplied
! address in the From: header field is wrong, the author won't be able
! to get back to you, should there be a need to do so.
  
  EOM
  	case "$usermail" in
! 	'') dflt=y;;
! 	*) dflt=n;;
  	esac
! 	rp='Would you like to supply the return address yourself?'
  	. ./myread
  	case "$ans" in
! 	[yY]*)
! 		$cat <<EOM
! 
! Ok, I need your e-mail address then, something like user@domain.top. If you
! wish to let the mail transport agent set it for you or do not know what your
! e-mail address is, use the word "none".
! 
! EOM
! 		case "$usermail" in
! 		'-') dflt=none;;
! 		'') dflt='';;
! 		*) dflt="$usermail";;
! 		esac
! 		rp='Which return address shall I use?'
! 		. ./myread
  		case "$ans" in
  		none) usermail='-';;
  		*) usermail="$ans";;
  		esac
  		;;
  	esac
- 	case "$usermail" in
- 	'') usermail='-';;
- 	esac
  	echo " "
  	opt=''
  	rp='Would you like to have new patches automatically mailed to you?'
--- 1908,1942 ----
  	echo "Great!. You cooperation is really appreciated."
  	$cat <<EOM
  
! Some braindead sites do not set a proper return address in the From: header of
! their outgoing mail, making it impossible to reply to mail they generate.
! If your site is broken in this way, write to your system administrator and get
! it fixed!!! In the mean time, you can manually specify the Internet e-mail
! address by which the author can get back to you, should there be a need to do
! so. If manually specified, it should be something like "user@domain.top".
! If your mail system generates addresses correctly, specify "none".
  
  EOM
  	case "$usermail" in
! 	'-'|'') dflt=none;;
! 	*) dflt="$usermail";;
  	esac
! 	rp='Manually specify a return address to use:'
  	. ./myread
  	case "$ans" in
! 	none|*@*.*)
  		case "$ans" in
  		none) usermail='-';;
  		*) usermail="$ans";;
  		esac
  		;;
+ 	*)
+ 		echo "(Address does not look like an Internet one -- ignoring it.)"
+ 		usermail='-'
+ 		mailpatches=false
+ 		notifypatches=false
+ 		;;
  	esac
  	echo " "
  	opt=''
  	rp='Would you like to have new patches automatically mailed to you?'
***************
*** 1961,1967 ****
  		case "$ans" in
  		[yY]*) opt=' notifypatches'; notifypatches=true;;
  		*)
! 			echo "Fine, you will only be registered as a user then."
  			notifypatches=false
  			;;
  		esac
--- 1960,1966 ----
  		case "$ans" in
  		[yY]*) opt=' notifypatches'; notifypatches=true;;
  		*)
! 			echo "Fine, I'll simply say that you've tried it then."
  			notifypatches=false
  			;;
  		esac
***************
*** 2134,2139 ****
--- 2133,2139 ----
  passcat='$passcat'
  orgname='$orgname'
  package='$package'
+ spackage='$spackage'
  pager='$pager'
  patchlevel='$patchlevel'
  perlpath='$perlpath'
***************
*** 2200,2206 ****
  	case "$ans" in
  	'') ;;
  	*) : in case they cannot read
! 		eval $ans;;
  	esac
  	;;
  esac
--- 2200,2206 ----
  	case "$ans" in
  	'') ;;
  	*) : in case they cannot read
! 		sh 1>&4 -c "$ans";;
  	esac
  	;;
  esac

Index: mcon/man/mconfig.SH
Prereq: 3.0.1.4
*** mcon/man/mconfig.SH.old	Sat Oct 16 14:56:54 1993
--- mcon/man/mconfig.SH	Sat Oct 16 14:56:55 1993
***************
*** 20,26 ****
  .TH METACONFIG $manext "Version $VERSION PL$PATCHLEVEL"
  ''' @(#) Manual page for metaconfig
  '''
! ''' $Id: mconfig.SH,v 3.0.1.4 1993/09/09 11:50:35 ram Exp $
  '''
  '''  Copyright (c) 1991-1993, Raphael Manfredi
  '''  
--- 20,26 ----
  .TH METACONFIG $manext "Version $VERSION PL$PATCHLEVEL"
  ''' @(#) Manual page for metaconfig
  '''
! ''' $Id: mconfig.SH,v 3.0.1.5 1993/10/16 13:51:50 ram Exp $
  '''
  '''  Copyright (c) 1991-1993, Raphael Manfredi
  '''  
***************
*** 31,36 ****
--- 31,42 ----
  '''  of the source tree for dist 3.0.
  '''
  ''' $Log: mconfig.SH,v $
+ ''' Revision 3.0.1.5  1993/10/16  13:51:50  ram
+ ''' patch12: new option -M to activate ?M: lines
+ ''' patch12: documents new ?M: lines format
+ ''' patch12: new internal Makefile command cm_h_weed for ?M: support
+ ''' patch12: documents usage for new confmagic.h file
+ '''
  ''' Revision 3.0.1.4  1993/09/09  11:50:35  ram
  ''' patch9: lots of typo fixes and abusive variable substitution problems
  '''
***************
*** 61,67 ****
  metaconfig \- a Configure script generator
  .SH SYNOPSIS
  .B metaconfig
! [ \-\fBdhkmostvwV\fR ]
  .SH DESCRIPTION
  .I Metaconfig
  is a program that generates Configure scripts. If you don't know what a
--- 67,73 ----
  metaconfig \- a Configure script generator
  .SH SYNOPSIS
  .B metaconfig
! [ \-\fBdhkmostvwMV\fR ]
  .SH DESCRIPTION
  .I Metaconfig
  is a program that generates Configure scripts. If you don't know what a
***************
*** 207,212 ****
--- 213,221 ----
  ?H:
  config.h definitions
  .TP
+ ?M:
+ confmagic.h definitions
+ .TP
  ?W:
  wanted symbols
  .TP
***************
*** 257,262 ****
--- 266,276 ----
  ?H:#define TWO "\$two"
  ?H:#\$d_one ONE_TWO "\$two"
  ?H:.
+ ?M:flip: HAS_FLIP
+ ?M:#ifndef HAS_FLIP
+ ?M:#define flip(x) flop(x)
+ ?M:#endif
+ ?M:.
  ?W:%<:one_two
  ?V:p_one p_two:p_three
  ?T:tmp var
***************
*** 353,358 ****
--- 367,373 ----
  Wanted
  Obsolete
  config_h.SH
+ confmagic.h
  U/*
  MANIFEST.new
  .Ef
***************
*** 406,411 ****
--- 421,434 ----
  Use it only when you know your source file have not changed with respect
  to the pool of \fImetaconfig\fR symbols used.
  .TP
+ .B \-M
+ Allow production of a \fIconfmagic.h\fR file to automagically remap some
+ well-known symbols to some other alternative, like \fIbcopy\fR() being
+ remapped transparently to \fImemcpy()\fR when not available. This option
+ is turned on automatically when a \fIconfmagic.h\fR file exists in the
+ top-level directory. Simply remove that file if you wish to disable this
+ option permanently.
+ .TP
  .B \-V
  Print version number and exit.
  '''
***************
*** 1064,1069 ****
--- 1087,1113 ----
  ?H:.
  Closes the \fIconfig_h.SH\fR inclusion requests.
  .TP
+ ?M:\fIC symbol\fR: \fIC dependencies\fR
+ Introduces magic definition concerning the C symbol, for \fIconfmagic.h\fR,
+ and defines the guarding symbol for the remaining ?M: definitions. This
+ line silently implies '?W:%<:\fIC symbol\fR', i.e. the unit will be loaded
+ into Configure if the C symbol appears within the C sources, whether magic
+ is used or not. The C dependencies are activated when magic is used, in order
+ to force their definition in \fIconfig_h.SH\fR. However, if magic is \fBnot\fR
+ used but the C symbol appears in the source without the needed C dependencies,
+ you will be warned every time the Wanted file is built, since it may be a
+ portability issue (and also because the unit is unconditionally loaded into
+ Configure whenever the C symbol is used, regardless of the other ?C: lines
+ from the unit).
+ .TP
+ ?M:\fIcpp defs\fR
+ Defines the magic cpp mapping to be introduced in confmagic.h whenever the
+ concerned symbol is used. There is an implicit '?\fIsym\fR' guarding where
+ \fIsym\fR is the symbol name defined by the leading ?M: line.
+ .TP
+ ?M:.
+ Closes the \fIconfmagic.h\fR inclusion request.
+ .TP
  ?W:\fIshell symbol list\fR:\fIC symbol list\fR
  Ties up the destiny of the shell symbols with that of the C symbols: if any
  of the C symbols listed is wanted, then all the shell symbols are marked
***************
*** 1223,1228 ****
--- 1267,1277 ----
  c_h_weed
  Produces the \fIconfig_h.SH\fR file. Only the necessary lines are printed.
  .TP
+ cm_h_weed
+ Produces the \fIconfmagic.h\fR file. Only the necessary lines are printed.
+ This command is only enabled when the \fB\-M\fR switch is given, or when a
+ \fIconfmagic.h\fR file already exists.
+ .TP
  close.Config_sh
  Adds the final 'EOT' symbol on a line by itself to end the here document
  construct producing the \fIconfig.sh\fR file.
***************
*** 1678,1683 ****
--- 1727,1752 ----
  Print the version number of the \fImetaconfig\fR that generated this
  .I Configure
  script and exit.
+ '''
+ .SS Using Magic Redefinitions
+ .PP
+ By making use of the \fB\-M\fR switch, some magic remappings may take place
+ within a \fIconfmagic.h\fR file. That file needs to be included after
+ \fIconfig.h\fR, of course, but also after all the other needed include files.
+ Namely:
+ .Ex
+ #include "config.h"
+ \&...
+ \&... \fIother inclusions\fR ...
+ \&...
+ #include "confmagic.h"
+ .Ef
+ Typically, \fIconfmagic.h\fR will attempt to remap \fIbcopy()\fR
+ on \fImemcpy()\fR if no \fIbcopy()\fR is available locally, or transform
+ \fIvfork\fR into \fIfork\fR when necessary, hence making it useless to
+ bother about the \fIHAS_VFORK\fR symbol.
+ .PP
+ This configuration magic is documented in the Glossary file.
  '''
  .SS Unit Templates
  .PP

Index: mcon/mconfig.SH
Prereq: 3.0.1.1
*** mcon/mconfig.SH.old	Sat Oct 16 14:56:58 1993
--- mcon/mconfig.SH	Sat Oct 16 14:56:58 1993
***************
*** 20,26 ****
  	eval "exec perl -S \$0 \$*"
  		if \$running_under_some_shell;
  
! # $Id: mconfig.SH,v 3.0.1.1 1993/08/19 06:42:26 ram Exp $
  #
  #  Copyright (c) 1991-1993, Raphael Manfredi
  #  
--- 20,26 ----
  	eval "exec perl -S \$0 \$*"
  		if \$running_under_some_shell;
  
! # $Id: mconfig.SH,v 3.0.1.2 1993/10/16 13:53:10 ram Exp $
  #
  #  Copyright (c) 1991-1993, Raphael Manfredi
  #  
***************
*** 34,39 ****
--- 34,42 ----
  # Key Contributor: Harlan Stenn <harlan@mumps.pfcs.com>
  #
  # $Log: mconfig.SH,v $
+ # Revision 3.0.1.2  1993/10/16  13:53:10  ram
+ # patch12: new -M option for magic symbols and confmagic.h production
+ #
  # Revision 3.0.1.1  1993/08/19  06:42:26  ram
  # patch1: leading config.sh searching was not aborting properly
  #
***************
*** 58,66 ****
  chdir $WD || die "Can't chdir back to $WD: $!\n";
  
  require 'getopts.pl';
! &usage unless &Getopts("dhkmostvwV");
  
  ++$opt_k if $opt_d;
  
  if ($opt_V) {
  	print STDERR "metaconfig $version PL$patchlevel\n";
--- 61,70 ----
  chdir $WD || die "Can't chdir back to $WD: $!\n";
  
  require 'getopts.pl';
! &usage unless &Getopts("dhkmostvwMV");
  
  ++$opt_k if $opt_d;
+ ++$opt_M if -f 'confmagic.h';	# Force -M if confmagic.h already there
  
  if ($opt_V) {
  	print STDERR "metaconfig $version PL$patchlevel\n";
***************
*** 124,130 ****
  # Print out metaconfig's usage and exits
  sub usage {
  	print STDERR <<'EOH';
! Usage: metaconfig [-dhkmostvwV]
    -d : debug mode.
    -h : print this help message and exits.
    -k : keep temporary directory.
--- 128,134 ----
  # Print out metaconfig's usage and exits
  sub usage {
  	print STDERR <<'EOH';
! Usage: metaconfig [-dhkmostvwMV]
    -d : debug mode.
    -h : print this help message and exits.
    -k : keep temporary directory.
***************
*** 134,139 ****
--- 138,144 ----
    -t : trace symbols as they are found.
    -v : verbose mode.
    -w : trust Wanted file as being up-to-date.
+   -M : activate production of confmagic.h.
    -V : print version number and exits.
  EOH
  	exit 1;

Index: mcon/pl/lint.pl
Prereq: 3.0.1.1
*** mcon/pl/lint.pl.old	Sat Oct 16 14:57:03 1993
--- mcon/pl/lint.pl	Sat Oct 16 14:57:04 1993
***************
*** 1,4 ****
! ;# $Id: lint.pl,v 3.0.1.1 1993/08/25 14:03:40 ram Exp $
  ;#
  ;#  Copyright (c) 1991-1993, Raphael Manfredi
  ;#  
--- 1,4 ----
! ;# $Id: lint.pl,v 3.0.1.2 1993/10/16 13:55:26 ram Exp $
  ;#
  ;#  Copyright (c) 1991-1993, Raphael Manfredi
  ;#  
***************
*** 9,14 ****
--- 9,17 ----
  ;#  of the source tree for dist 3.0.
  ;#
  ;# $Log: lint.pl,v $
+ ;# Revision 3.0.1.2  1993/10/16  13:55:26  ram
+ ;# patch12: now checks ?M: lines also
+ ;#
  ;# Revision 3.0.1.1  1993/08/25  14:03:40  ram
  ;# patch6: now correctly signals conditional dependencies with no default
  ;#
***************
*** 24,34 ****
--- 27,39 ----
  sub init_extraction {
  	$c_symbol = '';				# Current symbol seen in ?C: lines
  	$s_symbol = '';				# Current symbol seen in ?S: lines
+ 	$m_symbol = '';				# Current symbol seen in ?M: lines
  	$last_interpreted = 0;		# True when last line was an '@' one
  	%csym = ();					# C symbols described
  	%ssym = ();					# Shell symbols described
  	%hcsym = ();				# C symbols used by ?H: lines
  	%hssym = ();				# Shell symbols used by ?H: lines
+ 	%msym = ();					# Magic symbols defined by ?M: lines
  	%symset = ();				# Records all the shell symbol set
  	%symused = ();				# Records all the shell symbol used
  	%tempseen = ();				# Temporary shell variable seen
***************
*** 235,240 ****
--- 240,263 ----
  	}
  }
  
+ # Process the ?M: lines
+ sub p_magic {
+ 	local($_) = @_;
+ 	local($where) = "\"$file\", line $. (?M)";
+ 	if (/^(\w+):\s*$/) {
+ 		&check_last_declaration;
+ 		$m_symbol = $1;
+ 		$msym{$1}++;	# p_wanted will ensure we do not define symbol twice
+ 		&p_wanted("$unit:$m_symbol");
+ 	} else {
+ 		unless ($m_symbol) {
+ 			warn "$where: syntax error in ?M: construct.\n";
+ 			return;
+ 		}
+ 	}
+ 	m|^\.\s*$| && ($m_symbol = '');		# End of comment
+ }
+ 
  # Process the ?INIT: lines
  sub p_init {
  	local($where) = "\"$file\", line $. (?INIT)";
***************
*** 291,298 ****
  
  # Process the ?W: lines
  sub p_wanted {
! 	local(@symbols) = split(' ', $_[0]);
! 	local($where) = "\"$file\", line $. (?W)";
  	# A "?W:symbol" line asks metaconfig to define 'symbol' in the wanted file
  	# as a C target iff that word is found within the sources. This is mainly
  	# intended for the built-in interpreter to check for definedness.
--- 314,325 ----
  
  # Process the ?W: lines
  sub p_wanted {
! 	# Somehow, we should check that none of the symbols to activate are stale
! 	# ones, i.e. they all finally resolve to some known target -- FIXME
! 	local($active) = $_[0] =~ /^([^:]*):/;		# Symbols to activate
! 	local($look_symbols) = $_[0] =~ /:(.*)/;	# When those are used
! 	local(@symbols) = split(' ', $look_symbols);
! 	local($where) = "\"$file\", line $. (?W)" unless $where;
  	# A "?W:symbol" line asks metaconfig to define 'symbol' in the wanted file
  	# as a C target iff that word is found within the sources. This is mainly
  	# intended for the built-in interpreter to check for definedness.
***************
*** 301,312 ****
--- 328,349 ----
  		warn "$where: variable '\$$_' already wanted.\n" if &wanted($_);
  		warn "$where: variable '\$$_' also locally defined.\n" if &defined($_);
  		$w = $cwanted{$_};
+ 		if ($msym{$_}) {
+ 			warn "$where: symbol '$_' already listed on a ?M: line in '$w'.\n"
+ 				if $w;
+ 		} else {
  		warn "$where: variable '\$$_' already listed on a ?W: line in '$w'.\n"
  			if $w;
+ 		}
  		$cwanted{$_} = $unit unless $w;
  	}
  }
  
+ # Process the ?P: lines
+ sub p_public {
+ 	# FIXME
+ }
+ 
  # Process the ?L: lines
  # There should not be any '-l' in front of the library name
  sub p_library {
***************
*** 733,739 ****
  		if $s_symbol ne '';
  	warn "$where: definition of '$c_symbol' not closed by '?C:.'.\n"
  		if $c_symbol ne '';
! 	$s_symbol = $c_symbol = '';
  }
  
  # Make sure the variable is mentionned on the ?MAKE line, if possible in the
--- 770,778 ----
  		if $s_symbol ne '';
  	warn "$where: definition of '$c_symbol' not closed by '?C:.'.\n"
  		if $c_symbol ne '';
! 	warn "$where: magic definition of '$m_symbol' not closed by '?M:.'.\n"
! 		if $m_symbol ne '';
! 	$s_symbol = $c_symbol = $m_symbol = '';
  }
  
  # Make sure the variable is mentionned on the ?MAKE line, if possible in the

Index: mcon/U/d_strchr.U
Prereq: 3.0.1.1
*** mcon/U/d_strchr.U.old	Sat Oct 16 14:56:47 1993
--- mcon/U/d_strchr.U	Sat Oct 16 14:56:47 1993
***************
*** 1,4 ****
! ?RCS: $Id: d_strchr.U,v 3.0.1.1 1993/09/13 16:05:26 ram Exp $
  ?RCS:
  ?RCS: Copyright (c) 1991-1993, Raphael Manfredi
  ?RCS: 
--- 1,4 ----
! ?RCS: $Id: d_strchr.U,v 3.0.1.2 1993/10/16 13:49:20 ram Exp $
  ?RCS:
  ?RCS: Copyright (c) 1991-1993, Raphael Manfredi
  ?RCS: 
***************
*** 9,14 ****
--- 9,18 ----
  ?RCS: of the source tree for dist 3.0.
  ?RCS:
  ?RCS: $Log: d_strchr.U,v $
+ ?RCS: Revision 3.0.1.2  1993/10/16  13:49:20  ram
+ ?RCS: patch12: added support for HAS_INDEX
+ ?RCS: patch12: added magic for index() and rindex()
+ ?RCS:
  ?RCS: Revision 3.0.1.1  1993/09/13  16:05:26  ram
  ?RCS: patch10: now only defines HAS_STRCHR, no macro remap of index (WAD)
  ?RCS:
***************
*** 15,34 ****
  ?RCS: Revision 3.0  1993/08/18  12:07:32  ram
  ?RCS: Baseline for dist 3.0 netwide release.
  ?RCS:
! ?MAKE:d_strchr: contains strings Setvar Myread Oldconfig Csym
  ?MAKE:	-pick add $@ %<
  ?S:d_strchr:
  ?S:	This variable conditionally defines HAS_STRCHR if strchr() and
  ?S:	strrchr() are available for string searching.
  ?S:.
  ?C:HAS_STRCHR:
  ?C:	This symbol is defined to indicate that the strchr()/strrchr()
  ?C:	functions are available for string searching. If not, try the
  ?C:	index()/rindex() pair.
  ?C:.
  ?H:#$d_strchr HAS_STRCHR	/**/
  ?H:.
! ?LINT:set d_strchr
  : index or strchr
  echo " "
  if set index val -f; eval $csym; $val; then
--- 19,62 ----
  ?RCS: Revision 3.0  1993/08/18  12:07:32  ram
  ?RCS: Baseline for dist 3.0 netwide release.
  ?RCS:
! ?MAKE:d_strchr d_index: contains strings Setvar Myread Oldconfig Csym
  ?MAKE:	-pick add $@ %<
  ?S:d_strchr:
  ?S:	This variable conditionally defines HAS_STRCHR if strchr() and
  ?S:	strrchr() are available for string searching.
  ?S:.
+ ?S:d_index:
+ ?S:	This variable conditionally defines HAS_INDEX if index() and
+ ?S:	rindex() are available for string searching.
+ ?S:.
  ?C:HAS_STRCHR:
  ?C:	This symbol is defined to indicate that the strchr()/strrchr()
  ?C:	functions are available for string searching. If not, try the
  ?C:	index()/rindex() pair.
  ?C:.
+ ?C:HAS_INDEX:
+ ?C:	This symbol is defined to indicate that the index()/rindex()
+ ?C:	functions are available for string searching.
+ ?C:.
  ?H:#$d_strchr HAS_STRCHR	/**/
+ ?H:#$d_index HAS_INDEX	/**/
  ?H:.
! ?M:index: HAS_INDEX
! ?M:#ifndef HAS_INDEX
! ?M:#ifndef index
! ?M:#define index strchr
! ?M:#endif
! ?M:#endif
! ?M:.
! ?M:rindex: HAS_INDEX
! ?M:#ifndef HAS_INDEX
! ?M:#ifndef rindex
! ?M:#define rindex strrchr
! ?M:#endif
! ?M:#endif
! ?M:.
! ?T:vali
! ?LINT:set d_strchr d_index
  : index or strchr
  echo " "
  if set index val -f; eval $csym; $val; then
***************
*** 36,61 ****
  		if $contains strchr "$strings" >/dev/null 2>&1 ; then
  ?X: has index, strchr, and strchr in string header
  			val="$define"
  			echo "strchr() found." >&4
  		else
  ?X: has index, strchr, and no strchr in string header
  			val="$undef"
  			echo "index() found." >&4
  		fi
  	else
  ?X: has only index, no strchr, string header is a moot point
  		val="$undef"
  		echo "index() found." >&4
  	fi
  else
  	if set strchr val -f d_strchr; eval $csym; $val; then
  		val="$define"
  		echo "strchr() found." >&4
  	else
  		echo "No index() or strchr() found!" >&4
  		val="$undef"
  	fi
  fi
! set d_strchr
! eval $setvar
  
--- 64,95 ----
  		if $contains strchr "$strings" >/dev/null 2>&1 ; then
  ?X: has index, strchr, and strchr in string header
  			val="$define"
+ 			vali="$undef"
  			echo "strchr() found." >&4
  		else
  ?X: has index, strchr, and no strchr in string header
  			val="$undef"
+ 			vali="$define"
  			echo "index() found." >&4
  		fi
  	else
  ?X: has only index, no strchr, string header is a moot point
  		val="$undef"
+ 		vali="$define"
  		echo "index() found." >&4
  	fi
  else
  	if set strchr val -f d_strchr; eval $csym; $val; then
  		val="$define"
+ 		vali="$undef"
  		echo "strchr() found." >&4
  	else
  		echo "No index() or strchr() found!" >&4
  		val="$undef"
+ 		vali="$undef"
  	fi
  fi
! set d_strchr; eval $setvar
! val="$vali"
! set d_index; eval $setvar
  

Index: mcon/pl/wanted.pl
Prereq: 3.0
*** mcon/pl/wanted.pl.old	Sat Oct 16 14:57:05 1993
--- mcon/pl/wanted.pl	Sat Oct 16 14:57:05 1993
***************
*** 1,4 ****
! ;# $Id: wanted.pl,v 3.0 1993/08/18 12:10:29 ram Exp $
  ;#
  ;#  Copyright (c) 1991-1993, Raphael Manfredi
  ;#  
--- 1,4 ----
! ;# $Id: wanted.pl,v 3.0.1.1 1993/10/16 13:56:05 ram Exp $
  ;#
  ;#  Copyright (c) 1991-1993, Raphael Manfredi
  ;#  
***************
*** 9,14 ****
--- 9,18 ----
  ;#  of the source tree for dist 3.0.
  ;#
  ;# $Log: wanted.pl,v $
+ ;# Revision 3.0.1.1  1993/10/16  13:56:05  ram
+ ;# patch12: modified to handle ?M: lines
+ ;# patch12: added warning when magic symbols used without proper config
+ ;#
  ;# Revision 3.0  1993/08/18  12:10:29  ram
  ;# Baseline for dist 3.0 netwide release.
  ;#
***************
*** 34,40 ****
  # Build a wanted file from the files held in @SHlist and @clist arrays
  sub build_wanted {
  	# If wanted file is already there, parse it to map obsolete if -o option
! 	# was used. Otherwise, built a new one.
  	if (-f 'Wanted') {
  		&map_obsolete if $opt_o;			# Build Obsol*.U files
  		&dump_obsolete;						# Dump obsolete symbols if any
--- 38,44 ----
  # Build a wanted file from the files held in @SHlist and @clist arrays
  sub build_wanted {
  	# If wanted file is already there, parse it to map obsolete if -o option
! 	# was used. Otherwise, build a new one.
  	if (-f 'Wanted') {
  		&map_obsolete if $opt_o;			# Build Obsol*.U files
  		&dump_obsolete;						# Dump obsolete symbols if any
***************
*** 83,91 ****
--- 87,123 ----
  		}
  	}
  
+ 	# If they don't use magic but use magically guarded symbols without
+ 	# their corresponding C symbol dependency, warn them, since they might
+ 	# not know about that portability issue.
+ 
+ 	if (@clist && !$opt_M) {
+ 		local($nused);					# list of non-used symbols
+ 		local($warning) = 0;			# true when one warning issued
+ 		foreach $cmag (keys %mwanted) {	# loop over all used magic symbols
+ 			next unless $cmaster{$cmag};
+ 			$nused = '';
+ 			foreach $cdep (split(' ', $mwanted{$cmag})) {
+ 				$nused .= " $cdep" unless $cmaster{$cdep};
+ 			}
+ 			$nused =~ s/^ //;
+ 			$nused = "one of " . $nused if $nused =~ s/ /, /g;
+ 			if ($nused ne '') {
+ 				print "    Warning: $cmag is used without $nused.\n";
+ 				$warning++;
+ 			}
+ 		}
+ 		if ($warning) {
+ 			local($those) = $warning == 1 ? 'that' : 'those';
+ 			local($s) = $warning == 1 ? '' : 's';
+ 			print "Note: $those previous warning$s may be suppressed by -M.\n";
+ 		}
+ 	}
+ 
  	# Cannot remove $cmaster as it is used later on when building Configure
  	undef @clist;
  	undef %cwanted;
+ 	undef %mwanted;
  	%visited = ();
  	%lastfound = ();
  
***************
*** 141,151 ****
  sub cmaster {
  	local($key) = @_;
  	$cmaster{$key}++;					# This symbol is wanted
! 	return unless $opt_t;				# Continue if trace option on
! 	if ($lastfound{$key} ne $ARGV) {	# Never mentionned for this file ?
  		$visited{$ARGV}++ || print $ARGV,":\n";
  		print "\t$key\n";
  		$lastfound{$key} = $ARGV;
  	}
  }
  
--- 173,192 ----
  sub cmaster {
  	local($key) = @_;
  	$cmaster{$key}++;					# This symbol is wanted
! 	return unless $opt_t || $opt_M;		# Return if neither -t nor -M
! 	if ($opt_t &&
! 		$lastfound{$key} ne $ARGV		# Never mentionned for this file ?
! 	) {
  		$visited{$ARGV}++ || print $ARGV,":\n";
  		print "\t$key\n";
  		$lastfound{$key} = $ARGV;
+ 	}
+ 	if ($opt_M &&
+ 		defined($mwanted{$key})			# Found a ?M: symbol
+ 	) {
+ 		foreach $csym (split(' ', $mwanted{$key})) {
+ 			$cmaster{$csym}++;			# Activate C symbol dependencies
+ 		}
  	}
  }
  

Index: mcon/pl/common.pl
Prereq: 3.0
*** mcon/pl/common.pl.old	Sat Oct 16 14:56:59 1993
--- mcon/pl/common.pl	Sat Oct 16 14:56:59 1993
***************
*** 1,4 ****
! ;# $Id: common.pl,v 3.0 1993/08/18 12:10:19 ram Exp $
  ;#
  ;#  Copyright (c) 1991-1993, Raphael Manfredi
  ;#  
--- 1,4 ----
! ;# $Id: common.pl,v 3.0.1.1 1993/10/16 13:53:29 ram Exp $
  ;#
  ;#  Copyright (c) 1991-1993, Raphael Manfredi
  ;#  
***************
*** 9,14 ****
--- 9,17 ----
  ;#  of the source tree for dist 3.0.
  ;#
  ;# $Log: common.pl,v $
+ ;# Revision 3.0.1.1  1993/10/16  13:53:29  ram
+ ;# patch12: added support for ?M: lines and confmagic.h production
+ ;#
  ;# Revision 3.0  1993/08/18  12:10:19  ram
  ;# Baseline for dist 3.0 netwide release.
  ;#
***************
*** 24,29 ****
--- 27,33 ----
  ;#  %shmaster{'$sym'} records how many times '$sym' is found in a .SH file
  ;#  %cmaster{'SYM'} records how many times 'SYM' is found in a .c file
  ;#  %cwanted{'SYM'} records the set of necessary shell symbols needed for SYM
+ ;#  %mwanted{'sym'} is set of C symbols needed when sym is found in .c file
  ;#
  ;# This data structure records the initializations which are requires at the
  ;# beginning of a Configure script. The initialization only occurs when the
***************
*** 66,74 ****
--- 70,81 ----
  		die "Can't create .MT/Config_h.U\n";
  	open(EXTERN, ">$WD/.MT/Extern.U") ||
  		die "Can't create .MT/Extern.U\n";
+ 	open(MAGIC_H, ">$WD/.MT/Magic_h.U") ||
+ 		die "Can't create .MT/Magic_h.U\n";
  
  	$c_symbol = '';				# Current symbol seen in ?C: lines
  	$s_symbol = '';				# Current symbol seen in ?S: lines
+ 	$m_symbol = '';				# Current symbol seen in ?M: lines
  	$condlist = '';				# List of conditional symbols
  	$defined = '';				# List of defined symbols in the unit
  	$body = '';					# No procedure to handle body
***************
*** 80,85 ****
--- 87,93 ----
  	close EXTERN;			# External dependencies (libraries, includes...)
  	close CONF_H;			# C symbol definition template
  	close INIT;				# Required initializations
+ 	close MAGIC;			# Magic C symbol redefinition templates
  
  	print $dependencies if $opt_v;	# Print extracted dependencies
  }
***************
*** 221,226 ****
--- 229,259 ----
  	# If not a single ?H:. line, add the leading constraint
  	s/^\.// || s/^/?$constraint:/;
  	print CONF_H;
+ }
+ 
+ # Process the ?M: lines
+ sub p_magic {
+ 	local($_) = @_;
+ 	unless ($m_symbol) {
+ 		if (/^(\w+):\s*([\w\s]*)\n$/) {
+ 			# A '?M:sym:' line implies a '?W:%<:sym' since we'll need to know
+ 			# about the wantedness of sym later on when building confmagic.h.
+ 			# Buf is sym is wanted, then the C symbol dependencies have to
+ 			# be triggered. That is done by introducing sym in the mwanted
+ 			# array, known by the Wanted file construction process...
+ 			$m_symbol = $1;
+ 			print "  ?M: $m_symbol\n" if $opt_d;
+ 			$mwanted{$m_symbol} = $2;		# Record C dependencies
+ 			&p_wanted("$unit:$m_symbol");	# Build fake ?W: line
+ 		} else {
+ 			warn "\"$file\", line $.: syntax error in ?M: construct.\n";
+ 		}
+ 		return;
+ 	}
+ 	(s/^\.\s*$/?$m_symbol:\n/ && ($m_symbol = '', 1)) ||	# End of block
+ 	s/^/?$m_symbol:/;
+ 	print MAGIC_H;					# Definition goes to confmagic.h
+ 	print "  ?M: $_" if $opt_d;
  }
  
  sub p_ignore {}		# Ignore comment line

Index: mcon/pl/configure.pl
Prereq: 3.0
*** mcon/pl/configure.pl.old	Sat Oct 16 14:57:00 1993
--- mcon/pl/configure.pl	Sat Oct 16 14:57:00 1993
***************
*** 1,4 ****
! ;# $Id: configure.pl,v 3.0 1993/08/18 12:10:20 ram Exp $
  ;#
  ;#  Copyright (c) 1991-1993, Raphael Manfredi
  ;#  
--- 1,4 ----
! ;# $Id: configure.pl,v 3.0.1.1 1993/10/16 13:54:02 ram Exp $
  ;#
  ;#  Copyright (c) 1991-1993, Raphael Manfredi
  ;#  
***************
*** 9,14 ****
--- 9,18 ----
  ;#  of the source tree for dist 3.0.
  ;#
  ;# $Log: configure.pl,v $
+ ;# Revision 3.0.1.1  1993/10/16  13:54:02  ram
+ ;# patch12: added support for ?M: lines and confmagic.h production
+ ;# patch12: new Makefile command cm_h_weed
+ ;#
  ;# Revision 3.0  1993/08/18  12:10:20  ram
  ;# Baseline for dist 3.0 netwide release.
  ;#
***************
*** 24,33 ****
  # Create the Configure script
  sub create_configure {
  	print "Creating Configure...\n" unless $opt_s;
! 	open(CONFIGURE,">Configure") || die "Can't create Configure.\n";
! 	open(CONF_H,">config_h.SH") || die "Can't create config_h.SH.\n";
  
! 	chdir('.MT') || die "Can't cd to .MT\n";
  	for (@cmdwanted) {
  		&process_command($_);		# Run the makefile command
  	}
--- 28,40 ----
  # Create the Configure script
  sub create_configure {
  	print "Creating Configure...\n" unless $opt_s;
! 	open(CONFIGURE,">Configure") || die "Can't create Configure: $!\n";
! 	open(CONF_H,">config_h.SH") || die "Can't create config_h.SH: $!\n";
! 	if ($opt_M) {
! 		open(MAGIC_H,">confmagic.h") || die "Can't create confmagic.h: $!\n";
! 	}
  
! 	chdir('.MT') || die "Can't cd to .MT: $!\n";
  	for (@cmdwanted) {
  		&process_command($_);		# Run the makefile command
  	}
***************
*** 36,41 ****
--- 43,52 ----
  	print CONF_H "#endif\n";		# Close the opened #ifdef (see Config_h.U)
  	print CONF_H "!GROK!THIS!\n";
  	close CONF_H;
+ 	if ($opt_M) {
+ 		print MAGIC_H "#endif\n";	# Close the opened #ifdef (see Magic_h.U)
+ 		close MAGIC_H;
+ 	}
  	`chmod +x Configure`;
  }
  
***************
*** 155,160 ****
--- 166,194 ----
  				} else {
  					print CONF_H;
  					++$printed;
+ 				}
+ 			}
+ 		}
+ 	}
+ 	
+ 	# The 'cm_h_weed' command produces the confmagic.h file.
+ 	# Only the necessary lines are kept. If no conditional line is
+ 	# ever printed, then the file is useless and will be removed.
+ 	elsif ($cmd eq 'cm_h_weed') {
+ 		if ($opt_M) {
+ 			$printed = 0;
+ 			while (<UNIT>) {
+ 				if (/^\?(\w+):/) {
+ 					s/^\?\w+:// if $cmaster{$1} || $symwanted{$1};
+ 				}
+ 				unless (&skipped || !&interpret($_)) {
+ 					if (/^$/) {
+ 						print MAGIC_H "\n" if $printed;
+ 						$printed = 0;
+ 					} else {
+ 						print MAGIC_H;
+ 						++$printed;
+ 					}
  				}
  			}
  		}

*** End of Patch 12 ***

exit 0 # Just in case...
