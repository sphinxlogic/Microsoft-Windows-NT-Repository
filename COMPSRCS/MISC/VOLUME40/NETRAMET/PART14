Newsgroups: comp.sources.misc
From: nevil@ccu1.aukuni.ac.nz (J Nevil Brownlee)
Subject: REPOST: v40i102: netramet - Network Traffic Accounting Meter, Part14/25
Message-ID: <1993Nov7.230224.15241@sparky.sterling.com>
X-Md4-Signature: ade6545e822cdffd21c071c17f80aa58
Sender: kent@sparky.sterling.com (Kent Landfield)
Organization: Sterling Software
Date: Sun, 7 Nov 1993 23:02:24 GMT
Approved: kent@sparky.sterling.com

Submitted-by: nevil@ccu1.aukuni.ac.nz (J Nevil Brownlee)
Posting-number: Volume 40, Issue 102
Archive-name: netramet/part14
Environment: INET, UNIX, DOS

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# Contents:  netramet/doc/NeTraMet/NeTraMet.man.ps.C
#   netramet/src/apps/snmpwalk.c netramet/src/snmplib/include/mib.h
# Wrapped by kent@sparky on Tue Nov  2 18:17:08 1993
PATH=/bin:/usr/bin:/usr/ucb:/usr/local/bin:/usr/lbin:$PATH ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 14 (of 25)."'
if test -f 'netramet/doc/NeTraMet/NeTraMet.man.ps.C' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'netramet/doc/NeTraMet/NeTraMet.man.ps.C'\"
else
  echo shar: Extracting \"'netramet/doc/NeTraMet/NeTraMet.man.ps.C'\" \(44499 characters\)
  sed "s/^X//" >'netramet/doc/NeTraMet/NeTraMet.man.ps.C' <<'END_OF_FILE'
Xn
X0 0 0 fC
X903 1548 448 (Format statement) 448 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 1732 1823 (A rule file contains one or more of five possible elements, which may appear in any order) 1823 SB
X271 1786 199 (in the file.) 199 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Bold /font13 ANSIFont font
X271 1858 117 (5.2.1.) 117 SB
X419 1858 408 (RuleSet Statement) 408 SB
X1 lc
X1 lj
X0 0 0 pC
X277 2046 M 1626 0 1 PP
XS
Xn
X32 0 0 50 50 0 0 0 41 /Courier-Bold /font9 ANSIFont font
X271 1937 510 (RuleSet statement) 510 SB
X255 255 255 fC
X1871 2024 M -38 -19 35 -28 0 41 3 6 4 PP
X1 F
XS
Xn
X0 lc
X0 lj
X255 255 255 pC
X58 84 1659 2005 B
X1 F
XS
Xn
X32 0 0 46 46 0 0 0 38 /Courier-Bold /font9 ANSIFont font
X0 0 0 fC
X1674 2018 28 (;) 28 SB
X255 255 255 fC
X130 96 574 2002 B
X1 F
XS
Xn
X32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
X0 0 0 fC
X593 2026 84 (SET) 84 SB
X255 255 255 fC
X212 103 855 1999 B
X1 F
XS
Xn
X32 0 0 46 46 0 0 0 39 /Courier-Oblique /font11 ANSIFont font
X0 0 0 fC
X877 2023 168 (setnbr) 168 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 2132 1839 (The RuleSet statement tells the meter which rule set it is to use.  If a rule file doesn't have) 1839 SB
X271 2186 1442 (a RuleSet statement, the meter will continue to use its current rule set.) 1442 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Bold /font13 ANSIFont font
X271 2258 117 (5.2.2.) 117 SB
X419 2258 306 (Rules Section) 306 SB
X1 lc
X1 lj
X0 0 0 pC
X275 2387 M 1626 0 1 PP
XS
Xn
X255 255 255 fC
X1869 2365 M -38 -19 35 -28 0 41 3 6 4 PP
X1 F
XS
Xn
X0 lc
X0 lj
X255 255 255 pC
X446 90 994 2340 B
X1 F
XS
Xn
X32 0 0 46 46 0 0 0 39 /Courier-Oblique /font11 ANSIFont font
X0 0 0 fC
X1019 2360 392 (Rule statement) 392 SB
X255 255 255 fC
X170 77 413 2349 B
X1 F
XS
Xn
X32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
X0 0 0 fC
X428 2364 140 (RULES) 140 SB
X1 lc
X1 lj
X0 0 0 pC
X816 2390 M 0 -85 831 0 0 85 3 PP
XS
Xn
X862 2443 M 40 31 -37 24 -3 7 3 PP
XS
Xn
X277 2644 M 1626 0 1 PP
XS
Xn
X32 0 0 50 50 0 0 0 41 /Courier-Bold /font9 ANSIFont font
X271 2534 420 (Rule statement) 420 SB
X255 255 255 fC
X1871 2622 M -38 -19 35 -28 0 40 3 7 4 PP
X1 F
XS
Xn
X0 lc
X0 lj
X255 255 255 pC
X759 100 349 2594 B
X1 F
XS
Xn
X32 0 0 46 46 0 0 0 39 /Courier-Oblique /font11 ANSIFont font
X0 0 0 fC
X362 2618 728 (attribute & mask = value :) 728 SB
X255 255 255 fC
X59 84 1727 2603 B
X1 F
XS
Xn
X32 0 0 46 46 0 0 0 38 /Courier-Bold /font9 ANSIFont font
X0 0 0 fC
X1743 2615 28 (;) 28 SB
X255 255 255 fC
X428 97 1199 2594 B
X1 F
XS
Xn
X32 0 0 46 46 0 0 0 39 /Courier-Oblique /font11 ANSIFont font
X0 0 0 fC
X1212 2618 392 (action , index) 392 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 2724 1845 (The Rules section specifies the rule table for a rule set, and requests NeMaC to download) 1845 SB
X271 2778 297 (it to the meter.) 297 SB
X271 2857 1795 (It starts with the keyword RULES, followed by a series of Rule statements, one for each) 1795 SB
X271 2911 1829 (rule.  Each rule has five components, which must appear in the correct order.  These are:) 1829 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 2990 173 (Attribute) 173 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 3044 1645 (The name of the attribute to be tested by this rule.  Any of the address attributes) 1645 SB
X389 3098 1075 (may be used, but not the mask or general attributes.) 1075 SB
X32 0 0 46 46 1 0 0 43 /Helvetica /font12 ANSIFont font
X271 3186 416 (                                ) 416 SB
X687 3186 416 (                                ) 416 SB
X1103 3186 78 (      ) 78 SB
X1171 3186 416 (                                ) 416 SB
X1587 3186 416 (                                ) 416 SB
X2003 3186 78 (      ) 78 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 3265 182 (10/15/93) 182 SB
X1102 3265 43 (-- ) 43 SB
X1145 3265 52 (11) 52 SB
X1197 3265 43 ( --) 43 SB
X1866 3265 205 (NeTraMet) 205 SB
XEJ RS
X%%PageTrailer
XSS
X0 0 18 13 783 1169 300 SM
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X0 0 0 fC
X271 256 110 (Mask) 110 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 310 1730 (Specifies a mask which is ANDed with the attribute's value from an incoming packet.) 1730 SB
X389 364 1343 (Must be the same length \(number of bytes\) as the attribute value.) 1343 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 443 119 (Value) 119 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 497 1729 (Specifies the value to be compared with the masked value from an incoming packet.) 1729 SB
X389 551 1284 (If the compare fails the next rule is tested, otherwise the rule's ) 1284 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X1673 551 129 (Action) 129 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1802 551 283 ( is performed.) 283 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 630 129 (Action) 129 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 684 1534 (Action to be performed if the rule's value is matched.  Possible actions are:) 1534 SB
X448 751 124 (Count) 124 SB
X714 751 837 (Count this packet.  Attribute values for a ) 837 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X1551 751 114 (count) 114 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1665 751 407 ( flow are taken from) 407 SB
X714 805 1316 (the matched rules, which means that only those attributes which) 1316 SB
X714 859 741 (have been matched will appear in it.) 741 SB
X448 926 97 (Tally) 97 SB
X714 926 1351 (Tally this packet.  The attributes \(or parts thereof\) are specified by) 1351 SB
X714 980 1229 (the mask attributes in the tally action specified by this rule's ) 1229 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X1943 980 114 (Index) 114 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X2057 980 13 (.) 13 SB
X714 1034 1352 (The non-mask attributes of a tally action can be specified, and will) 1352 SB
X714 1088 918 (appear in each flow which is part of this tally.) 918 SB
X448 1155 215 (Aggregate) 215 SB
X714 1155 1404 (Aggregate this packet, i.e. count it in the aggregate flow specified by) 1404 SB
X714 1209 207 (this rule's ) 207 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X921 1209 124 (index.) 124 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1045 1209 998 (  All the attribute values of an aggregate flow are) 998 SB
X714 1263 1018 (specified in the aggregate action which created it.) 1018 SB
X448 1330 181 (Succeed) 181 SB
X714 1330 1286 (Force rule matching to finish, returning a 'succeed' result.  This) 1286 SB
X714 1384 1409 (means the incoming packet will not be counted, i.e. it will be ignored.) 1409 SB
X448 1451 74 (Fail) 74 SB
X714 1451 1395 (Stop rule matching and return a 'fail' result.  This allows the meter to) 1395 SB
X714 1505 1280 (interchange the source and destination attributes and retry the) 1280 SB
X714 1559 139 (match.) 139 SB
X448 1626 160 (PushTo) 160 SB
X714 1626 1409 (Save the current rule number on the 'pattern stack' and set the index) 1409 SB
X714 1680 837 (of the next rule to be tested to this rule's ) 837 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X1551 1680 124 (index.) 124 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1675 1680 385 (  The pattern stack) 385 SB
X714 1734 1353 (records the rules which were correctly matched; this information is) 1353 SB
X714 1788 367 (used to construct ) 367 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X1081 1788 114 (count) 114 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1195 1788 131 ( flows.) 131 SB
X448 1855 137 (PopTo) 137 SB
X714 1855 1122 (Set the index of the next rule to be tested to this rule's ) 1122 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X1836 1855 124 (index ) 124 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1960 1855 169 (and pop) 169 SB
X714 1909 978 (the topmost rule number from the pattern stack.) 978 SB
X448 1976 116 (GoTo) 116 SB
X714 1976 1122 (Set the index of the next rule to be tested to this rule's ) 1122 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X1836 1976 124 (index.) 124 SB
X271 2055 114 (Index) 114 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 2109 476 (This is a parameter for ) 476 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X865 2109 155 (Action; ) 155 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1020 2109 627 (see above for its various uses.) 627 SB
X271 2188 1855 (Rule and action numbers are 1-origin indexes to their corresponding tables.  Since there is) 1855 SB
X271 2242 1781 (no provision for labelling the rule and action statements it is very important to get these) 1781 SB
X271 2296 1807 (numbers correct!  The simplest way to do this is to include the rule or action number in a) 1807 SB
X271 2350 778 (comment attached to each statement.) 778 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Bold /font13 ANSIFont font
X271 2422 117 (5.2.3.) 117 SB
X419 2422 349 (Actions Section) 349 SB
X1 lc
X1 lj
X0 0 0 pC
X6 4 SP
X275 2551 M 1626 0 1 PP
XS
Xn
X255 255 255 fC
X/fm 256 def
X1869 2529 M -38 -19 35 -28 0 41 3 6 4 PP
X1 F
XS
Xn
X0 lc
X0 lj
X255 255 255 pC
X501 89 982 2504 B
X1 F
XS
Xn
X32 0 0 46 46 0 0 0 39 /Courier-Oblique /font11 ANSIFont font
X0 0 0 fC
X1007 2524 448 (Action statement) 448 SB
X255 255 255 fC
X227 71 406 2513 B
X1 F
XS
Xn
X32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
X0 0 0 fC
X422 2528 196 (ACTIONS) 196 SB
X1 lc
X1 lj
X0 0 0 pC
X816 2554 M 0 -85 831 0 0 85 3 PP
XS
Xn
X862 2607 M 40 31 -37 24 -3 7 3 PP
XS
Xn
X277 2808 M 1626 0 1 PP
XS
Xn
X32 0 0 50 50 0 0 0 41 /Courier-Bold /font9 ANSIFont font
X271 2699 480 (Action statement) 480 SB
X255 255 255 fC
X1871 2786 M -38 -19 35 -28 0 41 3 6 4 PP
X1 F
XS
Xn
X0 lc
X0 lj
X255 255 255 pC
X592 93 793 2764 B
X1 F
XS
Xn
X32 0 0 46 46 0 0 0 39 /Courier-Oblique /font11 ANSIFont font
X0 0 0 fC
X818 2785 532 (attribute  =  value) 532 SB
X1 lc
X1 lj
X0 0 0 pC
X1146 2868 M 34 28 -31 22 -3 6 3 PP
XS
Xn
X0 lc
X0 lj
X255 255 255 pC
X255 255 255 fC
X58 84 1659 2767 B
X1 F
XS
Xn
X32 0 0 46 46 0 0 0 38 /Courier-Bold /font9 ANSIFont font
X0 0 0 fC
X1674 2779 28 (;) 28 SB
X1 lc
X1 lj
X0 0 0 pC
X674 2811 M 0 -85 832 0 0 85 3 PP
XS
Xn
X721 2864 M 41 32 -37 24 -4 7 3 PP
XS
Xn
X0 lc
X0 lj
X255 255 255 pC
X255 255 255 fC
X59 84 1046 2861 B
X1 F
XS
Xn
X0 0 0 fC
X1062 2873 28 (,) 28 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 2975 1747 (The Actions section specifies the action table for a rule set.  It starts with the keyword) 1747 SB
X271 3029 1507 (ACTIONS, followed by a series of Action statements, one for each action.) 1507 SB
X32 0 0 46 46 1 0 0 43 /Helvetica /font12 ANSIFont font
X271 3186 416 (                                ) 416 SB
X687 3186 416 (                                ) 416 SB
X1103 3186 78 (      ) 78 SB
X1171 3186 416 (                                ) 416 SB
X1587 3186 416 (                                ) 416 SB
X2003 3186 78 (      ) 78 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 3265 182 (10/15/93) 182 SB
X1102 3265 43 (-- ) 43 SB
X1145 3265 52 (12) 52 SB
X1197 3265 43 ( --) 43 SB
X1866 3265 205 (NeTraMet) 205 SB
XEJ RS
X%%PageTrailer
XSS
X0 0 18 13 783 1169 300 SM
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X0 0 0 fC
X271 256 1804 (Each Action statement is a list of attribute values, separated by commas and terminated) 1804 SB
X271 310 1794 (with a semicolon.  Attribute values must be in the correct form for their attributes - these) 1794 SB
X271 364 1056 (are explained in the 'Flow Attributes' section above.) 1056 SB
X271 443 1848 (Detail addresses are a special case.  They have two-byte values, but may also be entered) 1848 SB
X271 497 1460 (as single integers.  Examples of this are given in the following sections.) 1460 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Bold /font13 ANSIFont font
X271 569 117 (5.2.4.) 117 SB
X419 569 392 (Format Statement) 392 SB
X1 lc
X1 lj
X0 0 0 pC
X6 4 SP
X277 757 M 1626 0 1 PP
XS
Xn
X32 0 0 50 50 0 0 0 41 /Courier-Bold /font9 ANSIFont font
X271 647 480 (Format statement) 480 SB
X255 255 255 fC
X/fm 256 def
X1871 735 M -38 -19 35 -28 0 41 3 6 4 PP
X1 F
XS
Xn
X0 lc
X0 lj
X255 255 255 pC
X312 89 952 710 B
X1 F
XS
Xn
X32 0 0 46 46 0 0 0 39 /Courier-Oblique /font11 ANSIFont font
X0 0 0 fC
X977 730 252 (attribute) 252 SB
X255 255 255 fC
X202 83 377 710 B
X1 F
XS
Xn
X32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
X0 0 0 fC
X393 733 168 (FORMAT) 168 SB
X1 lc
X1 lj
X0 0 0 pC
X1290 819 M 34 28 -31 22 -3 7 3 PP
XS
Xn
X0 lc
X0 lj
X255 255 255 pC
X255 255 255 fC
X58 84 1659 716 B
X1 F
XS
Xn
X32 0 0 46 46 0 0 0 38 /Courier-Bold /font9 ANSIFont font
X0 0 0 fC
X1674 728 28 (;) 28 SB
X1 lc
X1 lj
X0 0 0 pC
X799 757 M 0 -91 635 0 0 91 3 PP
XS
Xn
X0 lc
X0 lj
X255 255 255 pC
X255 255 255 fC
X295 80 959 810 B
X1 F
XS
Xn
X32 0 0 46 46 0 0 0 39 /Courier-Oblique /font11 ANSIFont font
X0 0 0 fC
X977 821 252 (separator) 252 SB
X1 lc
X1 lj
X0 0 0 pC
X834 819 M 35 28 -31 22 -4 7 3 PP
XS
Xn
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 920 1788 (The Format statement specifies the format of rule data lines in a NeMaC Flow Data file.) 1788 SB
X271 999 1751 (It starts with the FORMAT keyword, which is followed by a list of flow attributes, in the) 1751 SB
X271 1053 932 (order they are to appear in the Flow Data file.) 932 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Bold /font13 ANSIFont font
X271 1125 117 (5.2.5.) 117 SB
X419 1125 442 (Statistics Statement) 442 SB
X277 1313 M 1626 0 1 PP
XS
Xn
X32 0 0 50 50 0 0 0 41 /Courier-Bold /font9 ANSIFont font
X271 1203 600 (Statistics statement) 600 SB
X255 255 255 fC
X1871 1291 M -38 -19 35 -28 0 40 3 7 4 PP
X1 F
XS
Xn
X0 lc
X0 lj
X255 255 255 pC
X58 84 1659 1272 B
X1 F
XS
Xn
X32 0 0 46 46 0 0 0 38 /Courier-Bold /font9 ANSIFont font
X0 0 0 fC
X1674 1284 28 (;) 28 SB
X255 255 255 fC
X321 94 718 1269 B
X1 F
XS
Xn
X32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
X0 0 0 fC
X737 1293 280 (STATISTICS) 280 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 1393 1799 (The Statistics statement tells NeMaC to collect meter performance statistics each time it) 1799 SB
X271 1447 1789 (collects flow data, and to write it to the flow data file.  NeMaC sets NeTraMet's statistics) 1789 SB
X271 1501 877 (variables to zero after reading their values.) 877 SB
X32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
X271 1588 84 (5.3.) 84 SB
X413 1588 252 ( Rule Files) 252 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 1671 1802 (This section gives a few examples of rule files, with comments on what they do and why) 1802 SB
X271 1725 606 (they were written as they are.) 606 SB
X271 1804 1624 (I have found it simplest, when developing a new rule file, to proceed as follows:) 1624 SB
X32 0 0 46 46 0 0 0 46 /Symbol font
Xgs 292 3426 0 0 CB
X271 1880 21 (\267) 21 SB
Xgr
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X421 1883 1698 (Make sure that every rule or action has a comment which includes its rule or action) 1698 SB
X271 1937 1611 (number.  Check carefully that these numbers start at one and are consecutive.) 1611 SB
X32 0 0 46 46 0 0 0 46 /Symbol font
Xgs 292 3426 0 0 CB
X271 2013 21 (\267) 21 SB
Xgr
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X421 2016 1683 (Make sure that rule actions have indexes which really do refer to the intended rule) 1683 SB
X271 2070 191 (or action.) 191 SB
X32 0 0 46 46 0 0 0 46 /Symbol font
Xgs 292 3426 0 0 CB
X271 2146 21 (\267) 21 SB
Xgr
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X421 2149 1611 (Check the rule file by using NeMaC's syntax check \(-s\) option, piping NeMaC's) 1611 SB
X271 2203 1807 (output to a file.  Compare the syntax check output with the rule file using two windows in) 1807 SB
X271 2257 1687 (your favourite file editor.  It's helpful to start by verifying that NeMaC has found the) 1687 SB
X271 2311 778 (intended number of rules and actions!) 778 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Bold /font13 ANSIFont font
X271 2383 117 (5.3.1.) 117 SB
X419 2383 275 (rules.default) 275 SB
X32 0 0 38 38 0 0 0 30 /Courier /font0 ANSIFont font
X330 2461 483 (#  1705, Mon 1 Sep 93) 483 SB
X330 2501 23 (#) 23 SB
X330 2541 1311 (#  Default rule file for NeTraMet \(built in to the meter\)) 1311 SB
X330 2581 23 (#) 23 SB
X330 2621 1380 (#  Nevil Brownlee,  Computer Centre,  University of Auckland) 1380 SB
X330 2661 23 (#) 23 SB
X330 2701 115 (SET 1) 115 SB
X330 2741 23 (#) 23 SB
X330 2781 115 (RULES) 115 SB
X330 2821 23 (#) 23 SB
X330 2861 1311 (SourcePeerType & 255 = IP :         Aggregate,  1;  #   1) 1311 SB
X330 2901 1311 (SourcePeerType & 255 = Novell :     Aggregate,  2;  #   2) 1311 SB
X330 2941 1311 (SourcePeerType & 255 = DECnet :     Aggregate,  3;  #   3) 1311 SB
X330 2981 1311 (SourcePeerType & 255 = EtherTalk :  Aggregate,  4;  #   4) 1311 SB
X330 3021 1495 (Null & 0 = 0 :                        Succeed,  0;  #   5  Ignore) 1495 SB
X32 0 0 46 46 1 0 0 43 /Helvetica /font12 ANSIFont font
X271 3186 416 (                                ) 416 SB
X687 3186 416 (                                ) 416 SB
X1103 3186 78 (      ) 78 SB
X1171 3186 416 (                                ) 416 SB
X1587 3186 416 (                                ) 416 SB
X2003 3186 78 (      ) 78 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 3265 182 (10/15/93) 182 SB
X1102 3265 43 (-- ) 43 SB
X1145 3265 52 (13) 52 SB
X1197 3265 43 ( --) 43 SB
X1866 3265 205 (NeTraMet) 205 SB
XEJ RS
X%%PageTrailer
XSS
X0 0 18 13 783 1169 300 SM
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X0 0 0 fC
X271 256 1838 (This is the default rule set, which is built in to the meter and can't be changed.  It provides) 1838 SB
X271 310 1736 (rule set 1 which produces four aggregate flows, one for each of the peer types which) 1736 SB
X271 364 487 (NeTraMet understands.) 487 SB
X271 443 548 (Rule five, above, tests the ) 548 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X819 443 79 (Null) 79 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X898 443 1167 ( attribute.  This is a special case which always succeeds.) 1167 SB
X271 497 366 (The rule action is ) 366 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X637 497 207 (Succeed, ) 207 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X844 497 1251 (which means that any other packets \(e.g. dummy packets for) 1251 SB
X271 551 975 (measuring processor utilisation\) will be ignored.) 975 SB
X32 0 0 38 38 0 0 0 30 /Courier /font0 ANSIFont font
X330 630 161 (ACTIONS) 161 SB
X330 670 23 (#) 23 SB
X330 710 1311 (SourcePeerType=IP, SourcePeerMask=255,              #   1) 1311 SB
X330 750 1357 (   SourcePeerAddress=11.12.0.0, SourcePeerMask=255.255.0.0,) 1357 SB
X330 790 1265 (   DestPeerAddress=13.14.0.0, DestPeerMask=255.255.0.0;) 1265 SB
X330 830 1311 (SourcePeerType=Novell, SourcePeerMask=255,          #   2) 1311 SB
X330 870 1357 (   SourcePeerAddress=21.22.0.0, SourcePeerMask=255.255.0.0,) 1357 SB
X330 910 1265 (   DestPeerAddress=23.24.0.0, DestPeerMask=255.255.0.0;) 1265 SB
X330 950 1311 (SourcePeerType=DECnet, SourcePeerMask=255,          #   3) 1311 SB
X330 990 1357 (   SourcePeerAddress=31.32.0.0, SourcePeerMask=255.255.0.0,) 1357 SB
X330 1030 1265 (   DestPeerAddress=33.34.0.0, DestPeerMask=255.255.0.0;) 1265 SB
X330 1070 1311 (SourcePeerType=EtherTalk, SOurcePeerMask=255,       #   4) 1311 SB
X330 1110 1357 (   SourcePeerAddress=41.42.0.0, SourcePeerMask=255.255.0.0,) 1357 SB
X330 1150 1265 (   DestPeerAddress=43.44.0.0, DestPeerMask=255.255.0.0;) 1265 SB
X330 1190 23 (#) 23 SB
X330 1230 299 (# end of file) 299 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 1295 1851 (The default action table provides aggregate actions as required by the default rules.  Each) 1851 SB
X271 1349 1717 (of these specifies a set of values for flow attributes.  These have been chosen to be) 1717 SB
X271 1403 1738 (values which would not occur in normal traffic flows - they simply serve to identify the) 1738 SB
X271 1457 246 (aggregates.) 246 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Bold /font13 ANSIFont font
X271 1529 117 (5.3.2.) 117 SB
X419 1529 284 (rules.sample) 284 SB
X32 0 0 38 38 0 0 0 30 /Courier /font0 ANSIFont font
X330 1607 506 (#  1705, Mon 13 Sep 93) 506 SB
X330 1647 23 (#) 23 SB
X330 1687 1242 (#  Rule specification file to tally IP net <-> IP net,) 1242 SB
X330 1727 1219 (#     tally DECnet and Novell and aggregate EtherTalk) 1219 SB
X330 1767 23 (#) 23 SB
X330 1807 1380 (#  Nevil Brownlee,  Computer Centre,  University of Auckland) 1380 SB
X330 1847 23 (#) 23 SB
X330 1887 828 (SET 2  #  Rule + action set number 2) 828 SB
X330 1927 23 (#) 23 SB
X330 1967 115 (RULES) 115 SB
X330 2007 23 (#) 23 SB
X330 2047 1311 (SourcePeerType & 255 = DECnet :         Tally,  9;  #   1) 1311 SB
X330 2087 1311 (SourcePeerType & 255 = IP.0.0.0 :      Pushto,  8;  #   2) 1311 SB
X330 2127 1311 (SourcePeerType & 255 = EtherTalk :  Aggregate,  7;  #   3) 1311 SB
X330 2167 1311 (SourcePeerType & 255 = Novell :         Tally,  8;  #   4) 1311 SB
X330 2207 1495 (Null & 0 = 0 :                        Succeed,  0;  #   5  Ignore) 1495 SB
X330 2247 23 (#) 23 SB
X330 2287 1311 (Null & 0 = 0 :                        Succeed,  0;  #   6) 1311 SB
X330 2327 1311 (Null & 0 = 0 :                        Succeed,  0;  #   7) 1311 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 2392 1739 (The first part of this rule table determines the peer protocol type.  DECnet and Novell) 1739 SB
X271 2446 1843 (packets are tallied by actions 9 and 8, and EtherTalk packets are aggregated using action) 1843 SB
X271 2500 1832 (7.  IP packets cause the meter to save rule 2's index on the pattern stack then test rule 8.) 1832 SB
X271 2554 1839 (Rules 6 and 7 are never executed; they merely provide a gap in the rule table for possible) 1839 SB
X271 2608 191 (later use.) 191 SB
X32 0 0 38 38 0 0 0 30 /Courier /font0 ANSIFont font
X330 2687 1610 (SourcePeerAddress & 192.0.0.0 = 128.0.0.0 :  Pushto, 13;  #   8  Low B) 1610 SB
X330 2727 1610 (SourcePeerAddress & 192.0.0.0 = 192.0.0.0 :  Pushto, 16;  #   9  Low C) 1610 SB
X330 2767 1610 (SourcePeerAddress & 192.0.0.0 = 64.0.0.0 :   Pushto, 18;  #  10  Low A) 1610 SB
X330 2807 1610 (SourcePeerAddress & 192.0.0.0 = 0.0.0.0 :    Pushto, 18;  #  11  Low A) 1610 SB
X330 2847 1449 (Null & 0 = 0 :                                 Fail,  0;  #  12) 1449 SB
X330 2887 23 (#) 23 SB
X330 2927 1748 (DestPeerAddress & 192.0.0.0 = 128.0.0.0 :     Tally,  1;  #  13  High B: B-B) 1748 SB
X330 2967 1748 (DestPeerAddress & 192.0.0.0 = 192.0.0.0 :     Tally,  2;  #  14  High C: B-C) 1748 SB
X330 3007 1449 (Null & 0 = 0 :                                 Fail,  0;  #  15) 1449 SB
X330 3047 23 (#) 23 SB
X32 0 0 46 46 1 0 0 43 /Helvetica /font12 ANSIFont font
X271 3186 416 (                                ) 416 SB
X687 3186 416 (                                ) 416 SB
X1103 3186 78 (      ) 78 SB
X1171 3186 416 (                                ) 416 SB
X1587 3186 416 (                                ) 416 SB
X2003 3186 78 (      ) 78 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 3265 182 (10/15/93) 182 SB
X1102 3265 43 (-- ) 43 SB
X1145 3265 52 (14) 52 SB
X1197 3265 43 ( --) 43 SB
X1866 3265 205 (NeTraMet) 205 SB
XEJ RS
X%%PageTrailer
XSS
X0 0 18 13 783 1169 300 SM
X32 0 0 38 38 0 0 0 30 /Courier /font0 ANSIFont font
X0 0 0 fC
X330 256 1748 (DestPeerAddress & 192.0.0.0 = 192.0.0.0 :     Tally,  3;  #  16  High C: C-C) 1748 SB
X330 296 1449 (Null & 0 = 0 :                                 Fail,  0;  #  17) 1449 SB
X330 336 23 (#) 23 SB
X330 376 1748 (DestPeerAddress & 192.0.0.0 = 128.0.0.0 :    Tally,   4;  #  18  High B: A-B) 1748 SB
X330 416 1748 (DestPeerAddress & 192.0.0.0 = 192.0.0.0 :    Tally,   5;  #  19  High C: A-C) 1748 SB
X330 456 1748 (DestPeerAddress & 192.0.0.0 = 64.0.0.0 :     Tally,   6;  #  20  High A: A-A) 1748 SB
X330 496 1748 (DestPeerAddress & 192.0.0.0 = 0.0.0.0 :      Tally,   6;  #  21  High A: A-A) 1748 SB
X330 536 1449 (Null & 0 = 0 :                                 Fail,  0;  #  22) 1449 SB
X330 576 23 (#) 23 SB
X330 616 1449 (Null & 0 = 0 :                                 Fail,  0;  #  23) 1449 SB
X330 656 1449 (Null & 0 = 0 :                                 Fail,  0;  #  24) 1449 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 721 1760 (This part of the rule table handles IP packets.  The first two bits of the packet's source) 1760 SB
X271 775 1747 (peer address are examined to decide whether it is class A, B or C.  For each of these) 1747 SB
X271 829 1802 (cases the first two bits of the destination peer address is tested to determine its address) 1802 SB
X271 883 1709 (class.  The packet is then tallied in one of six tallies for each of the possible pairs of) 1709 SB
X271 937 296 (address class.) 296 SB
X271 1016 1848 (Note that the above rules make no attempt to impose any order on source and destination) 1848 SB
X271 1070 1796 (addresses.  When a packet appears which is the first of a new traffic flow, its source will) 1796 SB
X271 1124 535 (be the source for the flow.) 535 SB
X32 0 0 38 38 0 0 0 30 /Courier /font0 ANSIFont font
X330 1203 161 (ACTIONS) 161 SB
X330 1243 23 (#) 23 SB
X330 1283 1058 (SourcePeerType=IP, SourcePeerMask=255.255.0.0,) 1058 SB
X330 1323 1472 (                   DestPeerMask=255.255.0.0;            # 1  B-B) 1472 SB
X330 1363 1058 (SourcePeerType=IP, SourcePeerMask=255.255.0.0,) 1058 SB
X330 1403 1472 (                   DestPeerMask=255.255.255.0;          # 2  B-C) 1472 SB
X330 1443 1104 (SourcePeerType=IP, SourcePeerMask=255.255.255.0,) 1104 SB
X330 1483 1472 (                   DestPeerMask=255.255.255.0;          # 3  C-C) 1472 SB
X330 1523 1012 (SourcePeerType=IP, SourcePeerMask=255.0.0.0,) 1012 SB
X330 1563 1472 (                   DestPeerMask=255.255.0.0;            # 4  A-B) 1472 SB
X330 1603 1012 (SourcePeerType=IP, SourcePeerMask=255.0.0.0,) 1012 SB
X330 1643 1472 (                   DestPeerMask=255.255.255.0;          # 5  A-C) 1472 SB
X330 1683 1012 (SourcePeerType=IP, SourcePeerMask=255.0.0.0,) 1012 SB
X330 1723 1472 (                   DestPeerMask=255.0.0.0;              # 6  A-A) 1472 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 1788 1805 (The first six actions are tallies for each of the possible combinations of IP address class.) 1805 SB
X271 1842 1807 (Each has the appropriate peer address masks set, telling the meter which parts of those) 1807 SB
X271 1896 561 (attributes are to be tallied.  ) 561 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X832 1896 361 (SourcePeerType ) 361 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1193 1896 788 (is set to IP; without this it would not be) 788 SB
X271 1950 1609 (possible to determine the peer address type when the flow data was collected.) 1609 SB
X32 0 0 38 38 0 0 0 30 /Courier /font0 ANSIFont font
X330 2029 575 (SourcePeerType=EtherTalk,) 575 SB
X330 2069 1265 (   SourcePeerAddress=1.0.0.0, SourcePeerMask=255.0.0.0,) 1265 SB
X330 2109 1610 (   DestPeerAddress=1.0.0.0, DestPeerMask=255.0.0.0;     # 7  Aggregate) 1610 SB
X330 2149 23 (#) 23 SB
X330 2189 1242 (SourcePeerType=Novell, SourcePeerMask=255.255.255.255,) 1242 SB
X330 2229 1610 (                       DestPeerMask=255.255.255.255;    # 8  Tally all) 1610 SB
X330 2269 1196 (SourcePeerType=DECnet, SourcePeerMask=255.255.255.0,) 1196 SB
X330 2309 1610 (                       DestPeerMask=255.255.255.0;      # 9  Tally all) 1610 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 2374 1801 (The remaining actions aggreagate EtherTalk and tally Novell and DECnet packets.  The) 1801 SB
X271 2428 1803 (tallies use the entire peer address in each case.  This instructs the meter to create flows) 1803 SB
X271 2482 1799 (for every possible pair of peer addresses.  The network segment which this rule set was) 1799 SB
X271 2536 1219 (written for has very little EtherTalk, Novell or DECnet traffic.) 1219 SB
X32 0 0 38 38 0 0 0 30 /Courier /font0 ANSIFont font
X330 2615 989 (FORMAT FlowRuleSet FlowIndex FirstTime "  ") 989 SB
X330 2655 1288 (   SourcePeerType SourcePeerAddress DestPeerAddress "  ") 1288 SB
X330 2695 1012 (   ToPDUs FromPDUs "  " ToOctets FromOctets;) 1012 SB
X330 2735 23 (#) 23 SB
X330 2775 299 (# end of file) 299 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 2840 1734 (The Format statement specifies the attributes to be collected from the meter.  It uses) 1734 SB
X271 2894 1177 (double spaces to separate the attributes into four groups.) 1177 SB
X32 0 0 46 46 1 0 0 43 /Helvetica /font12 ANSIFont font
X271 3186 416 (                                ) 416 SB
X687 3186 416 (                                ) 416 SB
X1103 3186 78 (      ) 78 SB
X1171 3186 416 (                                ) 416 SB
X1587 3186 416 (                                ) 416 SB
X2003 3186 78 (      ) 78 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 3265 182 (10/15/93) 182 SB
X1102 3265 43 (-- ) 43 SB
X1145 3265 52 (15) 52 SB
X1197 3265 43 ( --) 43 SB
X1866 3265 205 (NeTraMet) 205 SB
XEJ RS
X%%PageTrailer
XSS
X0 0 18 13 783 1169 300 SM
X32 0 0 46 46 0 0 0 43 /Helvetica-Bold /font13 ANSIFont font
X0 0 0 fC
X271 257 117 (5.3.3.) 117 SB
X419 257 307 (rules.gateway) 307 SB
X32 0 0 38 38 0 0 0 30 /Courier /font0 ANSIFont font
X330 335 506 (#  1605, Fri 24 Sep 93) 506 SB
X330 375 23 (#) 23 SB
X330 415 1288 (#  Rule specification file to tally traffic to/from ccr1) 1288 SB
X330 455 23 (#) 23 SB
X330 495 1380 (#  Nevil Brownlee,  Computer Centre,  University of Auckland) 1380 SB
X330 535 23 (#) 23 SB
X330 575 828 (SET 6  #  Rule + action set number 6) 828 SB
X330 615 23 (#) 23 SB
X330 655 115 (RULES) 115 SB
X330 695 23 (#) 23 SB
X330 735 1610 (DestAdjacentAddress & ff-ff-ff-ff-ff-ff = aa-00-04-00-f4-ed :  #  ccr1) 1610 SB
X330 775 506 (    Pushto,  3;  #   1) 506 SB
X330 815 1150 (Null & 0 = 0 :         Fail,  0;  #   2  Try again) 1150 SB
X330 855 23 (#) 23 SB
X330 895 1518 (SourcePeerType,       255,           IP,        Pushto,  5;  #   3) 1518 SB
X330 935 1702 (Null,                   0,            0,       Succeed,  0;  #   4  Ignore) 1702 SB
X330 975 23 (#) 23 SB
X330 1015 1748 (SourcePeerAddress,  255.255.0.0,  130.216.0.0,  Pushto,  8;  #   5  Auckland) 1748 SB
X330 1055 1679 (SourcePeerAddress,  192.0.0.0,    192.0.0.0,    Pushto,  8;  #   6  Low C) 1679 SB
X330 1095 1679 (Null,                 0,            0,          Pushto, 11;  #   7  Low B) 1679 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 1160 1776 (This rule set was intended for metering traffic through a gateway ethernet, which has a) 1776 SB
X271 1214 289 (router named ) 289 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X560 1214 87 (ccr1) 87 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X647 1214 1358 ( providing our connection to the Internet.  Rule 1 above tests each) 1358 SB
X271 1268 182 (packet's ) 182 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X453 1268 446 (DestAdjacentAddress) 446 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X899 1268 1034 ( to see whether its destination is on the far side of ) 1034 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X1933 1268 100 (ccr1.) 100 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X2033 1268 88 (  If it) 88 SB
X271 1322 1858 (is, rule 5 will be tested next, otherwise rule two is tested,  Rule two fails, allowing the meter) 1858 SB
X271 1376 1828 (to interchange source and destinations and try again.  If the match fails on the second try) 1828 SB
X271 1430 442 (the packet is ignored.) 442 SB
X271 1509 1240 (The rest of this rule file is very similar to rules.sample above.) 1240 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Bold /font13 ANSIFont font
X271 1581 117 (5.3.4.) 117 SB
X419 1581 233 (rules.UofA) 233 SB
X32 0 0 38 38 0 0 0 30 /Courier /font0 ANSIFont font
X330 1659 483 (#  1440, Fri 1 Oct 93) 483 SB
X330 1699 23 (#) 23 SB
X330 1739 1449 (#  Rule specification file to tally traffic for Auckland, using) 1449 SB
X330 1779 966 (#     three groups of sites: UA, Local, NZ) 966 SB
X330 1819 23 (#) 23 SB
X330 1859 1380 (#  Nevil Brownlee,  Computer Centre,  University of Auckland) 1380 SB
X330 1899 23 (#) 23 SB
X330 1939 782 (SET 8  #  Rule + action set number) 782 SB
X330 1979 23 (#) 23 SB
X330 2019 115 (RULES) 115 SB
X330 2059 23 (#) 23 SB
X330 2099 1104 (SourcePeerType & 255 = IP :   Pushto,  7;  #   1) 1104 SB
X330 2139 1288 (Null & 0 = 0 :               Succeed,  0;  #   2  Ignore) 1288 SB
X330 2179 23 (#) 23 SB
X330 2219 1288 (Null & 0 = 0 :               Succeed,  0;  #   3  Ignore) 1288 SB
X330 2259 1288 (Null & 0 = 0 :               Succeed,  0;  #   4  Ignore) 1288 SB
X330 2299 1288 (Null & 0 = 0 :               Succeed,  0;  #   5  Ignore) 1288 SB
X330 2339 1288 (Null & 0 = 0 :               Succeed,  0;  #   6  Ignore) 1288 SB
X330 2379 23 (#) 23 SB
X330 2419 1725 (SourcePeerAddress & 255.255.0.0 = 130.216.0.0 :     Pushto, 33  #   7  UofA) 1725 SB
X330 2459 23 (#) 23 SB
X330 2499 1702 (SourcePeerAddress & 255.255.255.0 = 192.156.165.0 : Pushto, 31  #  8 decus) 1702 SB
X330 2539 1817 (SourcePeerAddress & 255.255.255.0 = 192.251.230.0 : Pushto, 31  #  9 clearfield) 1817 SB
X330 2579 1656 (SourcePeerAddress & 255.255.255.0 = 202.12.104.0 :  Pushto, 31  # 10 dse) 1656 SB
X330 2659 1725 (SourcePeerAddress & 255.255.255.0 = 202.14.254.0 :  Pushto, 31  # 18 cray 3) 1725 SB
X330 2699 23 (#) 23 SB
X330 2739 1679 (SourcePeerAddress & 255.255.0.0 = 156.62.0.0 :      Pushto, 31  #  19 ati) 1679 SB
X330 2779 23 (#) 23 SB
X330 2819 598 (# Source isn't UA or local) 598 SB
X330 2859 23 (#) 23 SB
X330 2899 1495 (Null & 0 = 0 :                  Fail,  0;  #  20  Try match again) 1495 SB
X330 2939 23 (#) 23 SB
X330 2979 1104 (Null & 0 = 0 :               Succeed,  0;  #  21) 1104 SB
X330 3019 1104 (Null & 0 = 0 :               Succeed,  0;  #  22) 1104 SB
X330 3099 1104 (Null & 0 = 0 :               Succeed,  0;  #  30) 1104 SB
X32 0 0 46 46 1 0 0 43 /Helvetica /font12 ANSIFont font
X271 3186 416 (                                ) 416 SB
X687 3186 416 (                                ) 416 SB
X1103 3186 78 (      ) 78 SB
X1171 3186 416 (                                ) 416 SB
X1587 3186 416 (                                ) 416 SB
X2003 3186 78 (      ) 78 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 3265 182 (10/15/93) 182 SB
X1102 3265 43 (-- ) 43 SB
X1145 3265 52 (16) 52 SB
X1197 3265 43 ( --) 43 SB
X1866 3265 205 (NeTraMet) 205 SB
XEJ RS
X%%PageTrailer
XSS
X0 0 18 13 783 1169 300 SM
X32 0 0 38 38 0 0 0 30 /Courier /font0 ANSIFont font
X0 0 0 fC
X330 256 23 (#) 23 SB
X330 296 391 (# Source is local) 391 SB
X330 336 23 (#) 23 SB
X330 376 1748 (DestPeerAddress & 255.255.0.0 = 130.216.0.0 :  Fail,  0;  #  31  Retry match) 1748 SB
X330 416 1472 (Null & 0 = 0 :                 Pushto,  34;  #  32  Tally packet) 1472 SB
X330 456 23 (#) 23 SB
X330 496 322 (# Source is UA) 322 SB
X330 536 23 (#) 23 SB
X330 576 1610 (DestPeerAddress & 255.255.0.0 = 130.216.0.0 :  Count, 0;  #  33  UA-UA) 1610 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 641 1865 (This rule set meters traffic through our gateway ethernet.  IP packets are classified into two) 1865 SB
X271 695 1887 (groups:  'source is Auckland' and 'source is local to Auckland,' i.e. one of the list of networks) 1887 SB
X271 749 1790 (in rules 8 to 19.  The rules above make sure that if either of a flow's hosts is Auckland it) 1790 SB
X271 803 1897 (appears as the flow's source, so that flows between Auckland and one of our  local networks) 1897 SB
X271 857 338 (are well defined.) 338 SB
X32 0 0 38 38 0 0 0 30 /Courier /font0 ANSIFont font
X330 936 920 (# Direction determined; tally the packet) 920 SB
X330 976 23 (#) 23 SB
X330 1016 1610 (DestPeerAddress & 140.200.0.0 = 255.255.0.0 : Pushto, 48;  #  34  Tuia) 1610 SB
X330 1056 23 (#) 23 SB
X330 1096 1633 (DestPeerAddress & 192.0.0.0 = 192.0.0.0 :   Pushto, 49;  #  35  Tally C) 1633 SB
X330 1136 1633 (DestPeerAddress & 192.0.0.0 = 128.0.0.0 :   Pushto, 43;  #  36  Tally B) 1633 SB
X330 1176 23 (#) 23 SB
X330 1216 1610 (SourceDetailType & 255 = icmp :            Tally,   4;  #  37  Tally A) 1610 SB
X330 1256 1403 (SourceDetailAddress & 255.255 = domain :   Tally,   7;  #  38) 1403 SB
X330 1296 1403 (DestDetailAddress & 255.255 = domain :     Tally,   7;  #  39) 1403 SB
X330 1336 1403 (DestDetailAddress & 255.255 = ftpdata :    Tally,  10;  #  40) 1403 SB
X330 1376 1403 (SourceDetailAddress & 255.255 = ftpdata :  Tally,  13;  #  41) 1403 SB
X330 1416 1403 (Null & 0 = 0 :                             Tally,   1;  #  42) 1403 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 1481 1899 (Once classified, packets are tallied in various ways, depending on their IP protocol type.  For) 1899 SB
X271 1535 1427 (example, Domain Name Service traffic flows have a detail address of ) 1427 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X1698 1535 152 (domain) 152 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1850 1535 232 ( for source,) 232 SB
X271 1589 1016 (destination or both. - these are tallied by action 7.) 1016 SB
X32 0 0 38 38 0 0 0 30 /Courier /font0 ANSIFont font
X330 1668 161 (ACTIONS) 161 SB
X330 1708 23 (#) 23 SB
X330 1748 1679 (SourcePeerMask=255.255.255.0, DestPeerMask=255.0.0.0,  #  1 Tally ports A) 1679 SB
X330 1788 644 (   SourceDetailTypeMask=255,) 644 SB
X330 1828 1196 (   SourceDetailMask=255.255, DestDetailMask=255.255;) 1196 SB
X330 1868 1725 (SourcePeerMask=255.255.255.0, DestPeerMask=255.255.0.0,  #  2 Tally ports B) 1725 SB
X330 1908 644 (   SourceDetailTypeMask=255,) 644 SB
X330 1948 1196 (   SourceDetailMask=255.255, DestDetailMask=255.255;) 1196 SB
X330 1988 1771 (SourcePeerMask=255.255.255.0, DestPeerMask=255.255.255.0,  #  3 Tally ports C) 1771 SB
X330 2028 644 (   SourceDetailTypeMask=255,) 644 SB
X330 2068 1196 (   SourceDetailMask=255.255, DestDetailMask=255.255;) 1196 SB
X330 2108 23 (#) 23 SB
X330 2148 1656 (SourcePeerMask=255.255.255.0, DestPeerMask=255.0.0.0,  #  4 Tally icmp A) 1656 SB
X330 2188 1058 (   SourceDetailType=icmp, DestDetailType=icmp;) 1058 SB
X330 2228 1702 (SourcePeerMask=255.255.255.0, DestPeerMask=255.255.0.0,  #  5 Tally icmp B) 1702 SB
X330 2268 1058 (   SourceDetailType=icmp, DestDetailType=icmp;) 1058 SB
X330 2308 1748 (SourcePeerMask=255.255.255.0, DestPeerMask=255.255.255.0,  #  6 Tally icmp C) 1748 SB
X330 2348 1058 (   SourceDetailType=icmp, DestDetailType=icmp;) 1058 SB
X330 2388 23 (#) 23 SB
X330 2428 1702 (SourcePeerMask=255.255.255.0, DestPeerMask=255.0.0.0,  #  7 Tally domain A) 1702 SB
X330 2468 644 (   SourceDetailTypeMask=255,) 644 SB
X330 2508 1288 (   SourceDetailAddress=domain, DestDetailAddress=domain;) 1288 SB
X330 2548 1748 (SourcePeerMask=255.255.255.0, DestPeerMask=255.255.0.0,  #  8 Tally domain B) 1748 SB
X330 2588 644 (   SourceDetailTypeMask=255,) 644 SB
X330 2628 1288 (   SourceDetailAddress=domain, DestDetailAddress=domain;) 1288 SB
X330 2668 1794 (SourcePeerMask=255.255.255.0, DestPeerMask=255.255.255.0,  #  9 Tally domain C) 1794 SB
X330 2708 644 (   SourceDetailTypeMask=255,) 644 SB
X330 2748 1288 (   SourceDetailAddress=domain, DestDetailAddress=domain;) 1288 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 2813 1823 (The actions are arranged in groups of three, for class A, B and C destination networks. A) 1823 SB
X271 2867 1857 (class C mask is used for all the source networks, which breaks the class B ones \(Auckland) 1857 SB
X271 2921 699 (and ait\) into their class C subnets.) 699 SB
X32 0 0 46 46 1 0 0 43 /Helvetica /font12 ANSIFont font
X271 3186 416 (                                ) 416 SB
X687 3186 416 (                                ) 416 SB
X1103 3186 78 (      ) 78 SB
X1171 3186 416 (                                ) 416 SB
X1587 3186 416 (                                ) 416 SB
X2003 3186 78 (      ) 78 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 3265 182 (10/15/93) 182 SB
X1102 3265 43 (-- ) 43 SB
X1145 3265 52 (17) 52 SB
X1197 3265 43 ( --) 43 SB
X1866 3265 205 (NeTraMet) 205 SB
XEJ RS
X%%PageTrailer
XSS
X0 0 18 13 783 1169 300 SM
X32 0 0 38 38 0 0 0 30 /Courier /font0 ANSIFont font
X0 0 0 fC
X330 256 989 (FORMAT FlowRuleSet FlowIndex FirstTime "  ") 989 SB
X330 296 943 (   SourcePeerAddress DestPeerAddress "  ") 943 SB
X330 336 1426 (   SourceDetailType SourceDetailAddress DestDetailAddress "  ") 1426 SB
X330 376 1012 (   ToPDUs FromPDUs "  " ToOctets FromOctets;) 1012 SB
X330 416 23 (#) 23 SB
X330 456 897 (STATISTICS  #  Collect meter statistics) 897 SB
X330 496 23 (#) 23 SB
X330 536 299 (# end of file) 299 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 601 1774 (The Format statement specifies the attributes to be collected.  These include the detail) 1774 SB
X271 655 1743 (addresses, allowing for analysis of the traffic by IP service.  The meter's performance) 1743 SB
X271 709 625 (statistics will also be collected.) 625 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Bold /font13 ANSIFont font
X271 781 117 (5.3.5.) 117 SB
X419 781 191 (rules.lan) 191 SB
X32 0 0 38 38 0 0 0 30 /Courier /font0 ANSIFont font
X330 859 483 (#  1015, Mon 4 Oct 93) 483 SB
X330 899 23 (#) 23 SB
X330 939 1426 (#  Rule specification file to tally Local Area Network traffic) 1426 SB
X330 979 23 (#) 23 SB
X330 1019 1380 (#  Nevil Brownlee,  Computer Centre,  University of Auckland) 1380 SB
X330 1059 23 (#) 23 SB
X330 1099 759 (SET 4  # Rule + action set number) 759 SB
X330 1139 23 (#) 23 SB
X330 1179 115 (RULES) 115 SB
X330 1219 23 (#) 23 SB
X330 1259 1311 (SourcePeerType & 255 = IP.0.0.0 :       Tally,  1;  #   1) 1311 SB
X330 1299 1311 (SourcePeerType & 255 = DECnet :        Pushto,  6;  #   2) 1311 SB
X330 1339 1311 (SourcePeerType & 255 = EtherTalk :     Pushto, 11;  #   3) 1311 SB
X330 1379 1311 (SourcePeerType & 255 = Novell :         Tally,  6;  #   4) 1311 SB
X330 1419 1495 (Null & 0 = 0 :                        Succeed,  0;  #   5  Ignore) 1495 SB
X330 1459 23 (#) 23 SB
X330 1499 1702 (SourceDetailType & 255 = 38 : Tally,  2;  #   6  Tally DECnet data by host) 1702 SB
X330 1539 1081 (SourceDetailType & 255 =  6 : Tally,  2;  #   7) 1081 SB
X330 1579 1081 (SourceDetailType & 255 = 46 : Tally,  2;  #   8) 1081 SB
X330 1619 1081 (SourceDetailType & 255 = 14 : Tally,  2;  #   9) 1081 SB
X330 1659 1656 (Null & 0 = 0 :                Tally,  3;  #  10  Tally rest of DECnet by) 1656 SB
X330 1699 138 (detail) 138 SB
X330 1739 23 (#) 23 SB
X330 1779 1610 (SourceDetailType & 255 =  3 : Tally,  4;  #  11  Tally AT data by host) 1610 SB
X330 1819 1725 (Null & 0 = 0 :                Tally,  5;  #  12  Tally rest of AT by detail) 1725 SB
X330 1859 23 (#) 23 SB
X330 1899 161 (ACTIONS) 161 SB
X330 1939 23 (#) 23 SB
X330 1979 1656 (SourcePeerType=IP,                     #  1  Tally IP by subnet and port) 1656 SB
X330 2019 1380 (   SourcePeerMask=255.255.255.0, DestPeerMask=255.255.255.0,) 1380 SB
X330 2059 1794 (   SourceDetailTypeMask=255, SourceDetailMask=255.255, DestDetailMask=255.255;) 1794 SB
X330 2099 23 (#) 23 SB
X330 2139 1587 (SourcePeerType=DECnet,                 #  2 Tally DECnet data by host) 1587 SB
X330 2179 1380 (   SourcePeerMask=255.255.255.0, DestPeerMask=255.255.255.0,) 1380 SB
X330 2219 644 (   SourceDetailTypeMask=255;) 644 SB
X330 2259 1564 (SourcePeerType=DECnet,                 #  3 Tally DECnet by protocol) 1564 SB
X330 2299 644 (   SourceDetailTypeMask=255;) 644 SB
X330 2339 23 (#) 23 SB
X330 2379 1656 (SourcePeerType=EtherTalk,              #  4 Tally Ethertalk data by host) 1656 SB
X330 2419 1380 (   SourcePeerMask=255.255.255.0, DestPeerMask=255.255.255.0,) 1380 SB
X330 2459 644 (   SourceDetailTypeMask=255;) 644 SB
X330 2499 1633 (SourcePeerType=EtherTalk,              #  5 Tally Ethertalk by DDP type) 1633 SB
X330 2539 644 (   SourceDetailTypeMask=255;) 644 SB
X330 2579 23 (#) 23 SB
X330 2619 1794 (SourcePeerType=Novell,                 #  6  Tally IPX by network nbr and port) 1794 SB
X330 2659 1472 (   SourcePeerMask=255.255.255.255, DestPeerMask=255.255.255.255,) 1472 SB
X330 2699 644 (   SourceDetailTypeMask=255,) 644 SB
X330 2739 1196 (   SourceDetailMask=255.255, DestDetailMask=255.255;) 1196 SB
X330 2779 23 (#) 23 SB
X330 2819 230 (STATISTICS) 230 SB
X330 2859 23 (#) 23 SB
X330 2899 989 (FORMAT FlowRuleSet FlowIndex FirstTime "  ") 989 SB
X330 2939 1288 (   SourcePeerType SourcePeerAddress DestPeerAddress "  ") 1288 SB
X330 2979 1426 (   SourceDetailType SourceDetailAddress DestDetailAddress "  ") 1426 SB
X330 3019 1012 (   ToPDUs FromPDUs "  " ToOctets FromOctets;) 1012 SB
X330 3059 23 (#) 23 SB
X330 3099 299 (# end of file) 299 SB
X32 0 0 46 46 1 0 0 43 /Helvetica /font12 ANSIFont font
X271 3186 416 (                                ) 416 SB
X687 3186 416 (                                ) 416 SB
X1103 3186 78 (      ) 78 SB
X1171 3186 416 (                                ) 416 SB
X1587 3186 416 (                                ) 416 SB
END_OF_FILE
  if test 44499 -ne `wc -c <'netramet/doc/NeTraMet/NeTraMet.man.ps.C'`; then
    echo shar: \"'netramet/doc/NeTraMet/NeTraMet.man.ps.C'\" unpacked with wrong size!
  else  
    PARTS="" 
    for I in A B C D ; do 
      if test -f netramet/doc/NeTraMet/NeTraMet.man.ps.$I ; then
        PARTS="${PARTS}${I}"  
      fi  
      if test "${PARTS}" = "ABCD" ; then  
        echo shar: Combining  \"'netramet/doc/NeTraMet/NeTraMet.man.ps'\" \(188008 characters\)
        cat netramet/doc/NeTraMet/NeTraMet.man.ps.[A-D] > 'netramet/doc/NeTraMet/NeTraMet.man.ps' 
        if test 188008 -ne `wc -c <'netramet/doc/NeTraMet/NeTraMet.man.ps'`; then 
          echo shar: \"'netramet/doc/NeTraMet/NeTraMet.man.ps'\" combined with wrong size!  
        else  
          rm netramet/doc/NeTraMet/NeTraMet.man.ps.[A-D]  
        fi    
      fi    
    done  
  fi
  # end of 'netramet/doc/NeTraMet/NeTraMet.man.ps.C'
fi
if test -f 'netramet/src/apps/snmpwalk.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'netramet/src/apps/snmpwalk.c'\"
else
  echo shar: Extracting \"'netramet/src/apps/snmpwalk.c'\" \(4841 characters\)
  sed "s/^X//" >'netramet/src/apps/snmpwalk.c' <<'END_OF_FILE'
X/*
X * snmpwalk.c - send snmp GETNEXT requests to a network entity, walking a subtree.
X *
X */
X/***********************************************************
X	Copyright 1988, 1989 by Carnegie Mellon University
X
X                      All Rights Reserved
X
XPermission to use, copy, modify, and distribute this software and its 
Xdocumentation for any purpose and without fee is hereby granted, 
Xprovided that the above copyright notice appear in all copies and that
Xboth that copyright notice and this permission notice appear in 
Xsupporting documentation, and that the name of CMU not be
Xused in advertising or publicity pertaining to distribution of the
Xsoftware without specific, written prior permission.  
X
XCMU DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
XALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
XCMU BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
XANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
XWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
XARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
XSOFTWARE.
X******************************************************************/
X#include <sys/types.h>
X#include <netinet/in.h>
X#include <stdio.h>
X
X#include "ausnmp.h"
X#include "snmp.h"
X#include "snmpimpl.h"
X#include "asn1.h"
X#include "snmpapi.h"
X#include "snmpclnt.h"
X
Xoid objid_mib[] = {1, 3, 6, 1, 2, 1};
X
Xint	snmp_dump_packet = 0;
X
X
Xmain(argc, argv)
X    int	    argc;
X    char    *argv[];
X{
X    struct snmp_session	session, *ss;
X    struct snmp_pdu *pdu, *response;
X    struct variable_list *vars;
X    int	arg;
X    char *gateway = NULL;
X    char *community = NULL;
X    int gotroot = 0;
X    oid	name[32];
X    int name_length;
X    oid root[MAX_NAME_LEN];
X    int	rootlen, count;
X    int running;
X    int status;
X
X    init_mib();
X    /*
X     * usage: snmpwalk gateway-name community-name [object-id]
X     */
X    for(arg = 1; arg < argc; arg++){
X	if (argv[arg][0] == '-'){
X	    switch(argv[arg][1]){
X		case 'd':
X		    snmp_dump_packet++;
X		    break;
X		default:
X		    printf("invalid option: -%c\n", argv[arg][1]);
X		    break;
X	    }
X	    continue;
X	}
X	if (gateway == NULL){
X	    gateway = argv[arg];
X	} else if (community == NULL){
X	    community = argv[arg]; 
X	} else {
X	    rootlen = MAX_NAME_LEN;
X	    if (read_objid(argv[arg], root, &rootlen)){
X		gotroot = 1;
X	    } else {
X		printf("Invalid object identifier: %s\n", argv[arg]);
X	    }
X	}
X    }
X
X    if (gotroot == 0){
X	bcopy((char *)objid_mib, (char *)root, sizeof(objid_mib));
X	rootlen = sizeof(objid_mib) / sizeof(oid);        
X	gotroot = 1;
X    }
X
X    if (!(gateway && community && gotroot == 1)){
X	printf("usage: snmpwalk gateway-name community-name object-identifier\n");
X	exit(1);
X    }
X
X    bzero((char *)&session, sizeof(struct snmp_session));
X    session.peername = gateway;
X    session.community = (u_char *)community;
X    session.community_len = strlen((char *)community);
X    session.retries = SNMP_DEFAULT_RETRIES;
X    session.timeout = SNMP_DEFAULT_TIMEOUT;
X    session.authenticator = NULL;
X    snmp_synch_setup(&session);
X    ss = snmp_open(&session);
X    if (ss == NULL){
X	printf("Couldn't open snmp\n");
X	exit(-1);
X    }
X
X    bcopy((char *)root, (char *)name, rootlen * sizeof(oid));
X    name_length = rootlen;
X
X    running = 1;
X    while(running){
X	running = 0;
X	pdu = snmp_pdu_create(GETNEXT_REQ_MSG);
X
X	snmp_add_null_var(pdu, name, name_length);
X
X	status = snmp_synch_response(ss, pdu, &response);
X	if (status == STAT_SUCCESS){
X	    if (response->errstat == SNMP_ERR_NOERROR){
X		for(vars = response->variables; vars; vars = vars->next_variable){
X		    if (vars->name_length < rootlen || bcmp(root, vars->name, rootlen * sizeof(oid)))
X			continue;	/* not part of this subtree */
X		    print_variable(vars->name, vars->name_length, vars);
X		    bcopy((char *)vars->name, (char *)name, vars->name_length * sizeof(oid));
X		    name_length = vars->name_length;
X		    running = 1; /* restart so we can get next variable */
X		}
X	    } else {
X		if (response->errstat == SNMP_ERR_NOSUCHNAME){
X		    printf("End of MIB.\n");
X		} else {
X		    printf("Error in packet.\nReason: %s\n", snmp_errstring(response->errstat));
X		    if (response->errstat == SNMP_ERR_NOSUCHNAME){
X			printf("The request for this object identifier failed: ");
X			for(count = 1, vars = response->variables; vars && count != response->errindex;
X			    vars = vars->next_variable, count++)
X				;
X			if (vars)
X			    print_objid(vars->name, vars->name_length);
X			printf("\n");
X		    }
X		}
X	    }
X
X	} else if (status == STAT_TIMEOUT){
X	    printf("No Response from %s\n", gateway);
X	} else {    /* status == STAT_ERROR */
X	    printf("An error occurred, Quitting\n");
X	}
X
X	if (response)
X	    snmp_free_pdu(response);
X    }
X    printf("rootlen  %d\n", rootlen);
X    snmp_close(ss);
X}
X
END_OF_FILE
  if test 4841 -ne `wc -c <'netramet/src/apps/snmpwalk.c'`; then
    echo shar: \"'netramet/src/apps/snmpwalk.c'\" unpacked with wrong size!
  fi
  # end of 'netramet/src/apps/snmpwalk.c'
fi
if test -f 'netramet/src/snmplib/include/mib.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'netramet/src/snmplib/include/mib.h'\"
else
  echo shar: Extracting \"'netramet/src/snmplib/include/mib.h'\" \(10793 characters\)
  sed "s/^X//" >'netramet/src/snmplib/include/mib.h' <<'END_OF_FILE'
X/*
X * Definitions for the variables as defined in the MIB
X */
X/***********************************************************
X	Copyright 1988, 1989 by Carnegie Mellon University
X
X                      All Rights Reserved
X
XPermission to use, copy, modify, and distribute this software and its 
Xdocumentation for any purpose and without fee is hereby granted, 
Xprovided that the above copyright notice appear in all copies and that
Xboth that copyright notice and this permission notice appear in 
Xsupporting documentation, and that the name of CMU not be
Xused in advertising or publicity pertaining to distribution of the
Xsoftware without specific, written prior permission.  
X
XCMU DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
XALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
XCMU BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
XANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
XWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
XARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
XSOFTWARE.
X******************************************************************/
X
Xstruct	mib_system {
X    char    sysDescr[32];   /* textual description */
X    u_char  sysObjectID[16];/* OBJECT IDENTIFIER of system */
X    u_char  ObjIDLen;	    /* length of sysObjectID */
X    u_long  sysUpTime;	    /* Uptime in 100/s of a second */    
X};
X
Xstruct mib_interface {
X    long    ifNumber;	    /* number of interfaces */
X};
X
Xstruct mib_ifEntry {
X    long    ifIndex;	    /* index of this interface	*/
X    char    ifDescr[32];    /* english description of interface	*/
X    long    ifType;	    /* network type of device	*/
X    long    ifMtu;	    /* size of largest packet in bytes	*/
X    u_long  ifSpeed;	    /* bandwidth in bits/sec	*/
X    u_char  ifPhysAddress[11];	/* interface's address */
X    u_char  PhysAddrLen;    /* length of physAddr */
X    long    ifAdminStatus;  /* desired state of interface */
X    long    ifOperStatus;   /* current operational status */
X    u_long  ifLastChange;   /* value of sysUpTime when current state entered */
X    u_long  ifInOctets;	    /* number of octets received on interface */
X    u_long  ifInUcastPkts;  /* number of unicast packets delivered */
X    u_long  ifInNUcastPkts; /* number of broadcasts or multicasts */
X    u_long  ifInDiscards;   /* number of packets discarded with no error */
X    u_long  ifInErrors;	    /* number of packets containing errors */
X    u_long  ifInUnknownProtos;	/* number of packets with unknown protocol */
X    u_long  ifOutOctets;    /* number of octets transmitted */
X    u_long  ifOutUcastPkts; /* number of unicast packets sent */
X    u_long  ifOutNUcastPkts;/* number of broadcast or multicast pkts */
X    u_long  ifOutDiscards;  /* number of packets discarded with no error */
X    u_long  ifOutErrors;    /* number of pkts discarded with an error */
X    u_long  ifOutQLen;	    /* number of packets in output queue */
X};
X
Xstruct mib_atEntry {
X    long    atIfIndex;	    /* interface on which this entry maps */
X    u_char  atPhysAddress[11]; /* physical address of destination */
X    u_char  PhysAddressLen; /* length of atPhysAddress */
X    u_long  atNetAddress;   /* IP address of physical address */
X};
X
Xstruct mib_ip {
X    long    ipForwarding;   /* 1 if gateway, 2 if host */
X    long    ipDefaultTTL;   /* default TTL for pkts originating here */
X    u_long  ipInReceives;   /* no. of IP packets received from interfaces */
X    u_long  ipInHdrErrors;  /* number of pkts discarded due to header errors */
X    u_long  ipInAddrErrors; /* no. of pkts discarded due to bad address */
X    u_long  ipForwDatagrams;/* number pf pkts forwarded through this entity */
X    u_long  ipInUnknownProtos;/* no. of local-addressed pkts w/unknown proto */
X    u_long  ipInDiscards;   /* number of error-free packets discarded */
X    u_long  ipInDelivers;   /* number of datagrams delivered to upper level */
X    u_long  ipOutRequests;  /* number of IP datagrams originating locally */
X    u_long  ipOutDiscards;  /* number of error-free output IP pkts discarded */
X    u_long  ipOutNoRoutes;  /* number of IP pkts discarded due to no route */
X    long    ipReasmTimeout; /* seconds fragment is held awaiting reassembly */
X    u_long  ipReasmReqds;   /* no. of fragments needing reassembly (here) */
X    u_long  ipReasmOKs;	    /* number of fragments reassembled */
X    u_long  ipReasmFails;   /* number of failures in IP reassembly */
X    u_long  ipFragOKs;	    /* number of datagrams fragmented here */
X    u_long  ipFragFails;    /* no. pkts unable to be fragmented here */
X    u_long  ipFragCreates;  /* number of IP fragments created here */
X};
X
Xstruct mib_ipAddrEntry {
X    u_long  ipAdEntAddr;    /* IP address of this entry */
X    long    ipAdEntIfIndex; /* IF for this entry */
X    u_long  ipAdEntNetMask; /* subnet mask of this entry */
X    long    ipAdEntBcastAddr;/* read the MIB for this one */
X};
X
Xstruct mib_ipRouteEntry {
X    u_long  ipRouteDest;    /* destination IP addr for this route */
X    long    ipRouteIfIndex; /* index of local IF for this route */
X    long    ipRouteMetric1; /* Primary routing metric */
X    long    ipRouteMetric2; /* Alternate routing metric */
X    long    ipRouteMetric3; /* Alternate routing metric */
X    long    ipRouteMetric4; /* Alternate routing metric */
X    u_long  ipRouteNextHop; /* IP addr of next hop */
X    long    ipRouteType;    /* Type of this route */
X    long    ipRouteProto;   /* How this route was learned */
X    long    ipRouteAge;	    /* No. of seconds since updating this route */
X};
X
Xstruct mib_icmp {
X    u_long  icmpInMsgs;	    /* Total of ICMP msgs received */
X    u_long  icmpInErrors;   /* Total of ICMP msgs received with errors */
X    u_long  icmpInDestUnreachs;
X    u_long  icmpInTimeExcds;
X    u_long  icmpInParmProbs;
X    u_long  icmpInSrcQuenchs;
X    u_long  icmpInRedirects;
X    u_long  icmpInEchos;
X    u_long  icmpInEchoReps;
X    u_long  icmpInTimestamps;
X    u_long  icmpInTimestampReps;
X    u_long  icmpInAddrMasks;
X    u_long  icmpInAddrMaskReps;
X    u_long  icmpOutMsgs;
X    u_long  icmpOutErrors;
X    u_long  icmpOutDestUnreachs;
X    u_long  icmpOutTimeExcds;
X    u_long  icmpOutParmProbs;
X    u_long  icmpOutSrcQuenchs;
X    u_long  icmpOutRedirects;
X    u_long  icmpOutEchos;
X    u_long  icmpOutEchoReps;
X    u_long  icmpOutTimestamps;
X    u_long  icmpOutTimestampReps;
X    u_long  icmpOutAddrMasks;
X    u_long  icmpOutAddrMaskReps;
X};
X
Xstruct	mib_tcp {
X    long    tcpRtoAlgorithm;	/* retransmission timeout algorithm */
X    long    tcpRtoMin;		/* minimum retransmission timeout (mS) */
X    long    tcpRtoMax;		/* maximum retransmission timeout (mS) */ 
X    long    tcpMaxConn;		/* maximum tcp connections possible */
X    u_long  tcpActiveOpens;	/* number of SYN-SENT -> CLOSED transitions */
X    u_long  tcpPassiveOpens;	/* number of SYN-RCVD -> LISTEN transitions */
X    u_long  tcpAttemptFails;/*(SYN-SENT,SYN-RCVD)->CLOSED or SYN-RCVD->LISTEN*/
X    u_long  tcpEstabResets;	/* (ESTABLISHED,CLOSE-WAIT) -> CLOSED */
X    u_long  tcpCurrEstab;	/* number in ESTABLISHED or CLOSE-WAIT state */
X    u_long  tcpInSegs;		/* number of segments received */
X    u_long  tcpOutSegs;		/* number of segments sent */
X    u_long  tcpRetransSegs;	/* number of retransmitted segments */
X};
X
Xstruct mib_tcpConnEntry {
X    long    tcpConnState;	/* State of this connection */
X    u_long  tcpConnLocalAddress;/* local IP address for this connection */
X    long    tcpConnLocalPort;	/* local port for this connection */
X    u_long  tcpConnRemAddress;	/* remote IP address for this connection */
X    long    tcpConnRemPort;	/* remote port for this connection */
X};
X
Xstruct mib_udp {
X    u_long  udpInDatagrams; /* No. of UDP datagrams delivered to users */
X    u_long  udpNoPorts;	    /* No. of UDP datagrams to port with no listener */
X    u_long  udpInErrors;    /* No. of UDP datagrams unable to be delivered */
X    u_long  udpOutDatagrams;/* No. of UDP datagrams sent from this entity */
X};
X
Xstruct	mib_egp {
X    u_long  egpInMsgs;	/* No. of EGP msgs received without error */
X    u_long  egpInErrors;/* No. of EGP msgs received with error */
X    u_long  egpOutMsgs;	/* No. of EGP msgs sent */
X    u_long  egpOutErrors;/* No. of (outgoing) EGP msgs dropped due to error */
X};
X
Xstruct	mib_egpNeighEntry {
X    long    egpNeighState;  /* local EGP state with this entry's neighbor */
X    u_long  egpNeighAddr;   /* IP address of this entry's neighbor */
X};
X
X#define MIB 1, 3, 6, 1, 2, 1
X
X#define MIB_IFTYPE_OTHER		    1
X#define MIB_IFTYPE_REGULAR1822		    2
X#define MIB_IFTYPE_HDH1822		    3
X#define MIB_IFTYPE_DDNX25		    4
X#define MIB_IFTYPE_RFC877X25		    5
X#define MIB_IFTYPE_ETHERNETCSMACD	    6
X#define MIB_IFTYPE_ISO88023CSMACD	    7
X#define MIB_IFTYPE_ISO88024TOKENBUS	    8
X#define MIB_IFTYPE_ISO88025TOKENRING	    9
X#define MIB_IFTYPE_ISO88026MAN		    10
X#define MIB_IFTYPE_STARLAN		    11
X#define MIB_IFTYPE_PROTEON10MBIT	    12
X#define MIB_IFTYPE_PROTEON80MBIT	    13
X#define MIB_IFTYPE_HYPERCHANNEL		    14
X#define MIB_IFTYPE_FDDI			    15
X#define MIB_IFTYPE_LAPB			    16
X#define MIB_IFTYPE_SDLC			    17
X#define MIB_IFTYPE_T1CARRIER		    18
X#define MIB_IFTYPE_CEPT			    19
X#define MIB_IFTYPE_BASICISDN		    20
X#define MIB_IFTYPE_PRIMARYISDN		    21
X#define MIB_IFTYPE_PROPPOINTTOPOINTSERIAL   22
X
X#define MIB_IFSTATUS_UP		1
X#define MIB_IFSTATUS_DOWN	2
X#define MIB_IFSTATUS_TESTING	3
X
X#define MIB_FORWARD_GATEWAY	1
X#define MIB_FORWARD_HOST	2
X
X#define MIB_IPROUTETYPE_OTHER	1
X#define MIB_IPROUTETYPE_INVALID	2
X#define MIB_IPROUTETYPE_DIRECT	3
X#define MIB_IPROUTETYPE_REMOTE	4
X
X#define MIB_IPROUTEPROTO_OTHER	    1
X#define MIB_IPROUTEPROTO_LOCAL	    2
X#define MIB_IPROUTEPROTO_NETMGMT    3
X#define MIB_IPROUTEPROTO_ICMP	    4
X#define MIB_IPROUTEPROTO_EGP	    5
X#define MIB_IPROUTEPROTO_GGP	    6
X#define MIB_IPROUTEPROTO_HELLO	    7
X#define MIB_IPROUTEPROTO_RIP	    8
X#define MIB_IPROUTEPROTO_ISIS	    9
X#define MIB_IPROUTEPROTO_ESIS	    10
X#define MIB_IPROUTEPROTO_CISCOIGRP  11
X#define MIB_IPROUTEPROTO_BBNSPFIGP  12
X#define MIB_IPROUTEPROTO_OIGP	    13
X
X#define MIB_TCPRTOALG_OTHER	1
X#define MIB_TCPRTOALG_CONSTANT	2
X#define MIB_TCPRTOALG_RSRE	3
X#define MIB_TCPRTOALG_VANJ	4
X
X#define MIB_TCPCONNSTATE_CLOSED		1
X#define MIB_TCPCONNSTATE_LISTEN		2
X#define MIB_TCPCONNSTATE_SYNSENT	3
X#define MIB_TCPCONNSTATE_SYNRECEIVED	4
X#define MIB_TCPCONNSTATE_ESTABLISHED	5
X#define MIB_TCPCONNSTATE_FINWAIT1	6
X#define MIB_TCPCONNSTATE_FINWAIT2	7
X#define MIB_TCPCONNSTATE_CLOSEWAIT	8
X#define MIB_TCPCONNSTATE_LASTACK	9
X#define MIB_TCPCONNSTATE_CLOSING	10
X#define MIB_TCPCONNSTATE_TIMEWAIT	11
X
X#define MIB_EGPNEIGHSTATE_IDLE		1
X#define MIB_EGPNEIGHSTATE_AQUISITION	2
X#define MIB_EGPNEIGHSTATE_DOWN		3
X#define MIB_EGPNEIGHSTATE_UP		4
X#define MIB_EGPNEIGHSTATE_CEASE		5
X
X
X
END_OF_FILE
  if test 10793 -ne `wc -c <'netramet/src/snmplib/include/mib.h'`; then
    echo shar: \"'netramet/src/snmplib/include/mib.h'\" unpacked with wrong size!
  fi
  # end of 'netramet/src/snmplib/include/mib.h'
fi
echo shar: End of archive 14 \(of 25\).
cp /dev/null ark14isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 25 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0
exit 0 # Just in case...
exit 0 # Just in case...
