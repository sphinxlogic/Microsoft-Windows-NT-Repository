Newsgroups: comp.sources.misc
From: nevil@ccu1.aukuni.ac.nz (J Nevil Brownlee)
Subject: v40i100:  netramet - Network Traffic Accounting Meter, Part12/25
Message-ID: <1993Nov7.221135.12047@sparky.sterling.com>
X-Md4-Signature: 6d4082315f65b402675f683984b800cd
Sender: kent@sparky.sterling.com (Kent Landfield)
Organization: Sterling Software
Date: Sun, 7 Nov 1993 22:11:35 GMT
Approved: kent@sparky.sterling.com

Submitted-by: nevil@ccu1.aukuni.ac.nz (J Nevil Brownlee)
Posting-number: Volume 40, Issue 100
Archive-name: netramet/part12
Environment: INET, UNIX, DOS

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# Contents:  netramet/mib/mib.txt netramet/src/apps/snmpnetstat/inet.c
# Wrapped by kent@sparky on Tue Nov  2 18:17:08 1993
PATH=/bin:/usr/bin:/usr/ucb:/usr/local/bin:/usr/lbin:$PATH ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 12 (of 25)."'
if test -f 'netramet/mib/mib.txt' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'netramet/mib/mib.txt'\"
else
  echo shar: Extracting \"'netramet/mib/mib.txt'\" \(47344 characters\)
  sed "s/^X//" >'netramet/mib/mib.txt' <<'END_OF_FILE'
X   mgmt	        OBJECT IDENTIFIER ::= { iso org(3) dod(6) internet(1) mgmt(2) }
X   mib          OBJECT IDENTIFIER ::= { mgmt 1 }
X   directory    OBJECT IDENTIFIER ::= { internet 1 }
X   experimental OBJECT IDENTIFIER ::= { internet 3 }
X   private      OBJECT IDENTIFIER ::= { internet 4 }
X   enterprises  OBJECT IDENTIFIER ::= { private 1 }
X
X   system       OBJECT IDENTIFIER ::= { mib 1 }
X   interfaces   OBJECT IDENTIFIER ::= { mib 2 }
X   at           OBJECT IDENTIFIER ::= { mib 3 }
X   ip           OBJECT IDENTIFIER ::= { mib 4 }
X   icmp         OBJECT IDENTIFIER ::= { mib 5 }
X   tcp          OBJECT IDENTIFIER ::= { mib 6 }
X   udp          OBJECT IDENTIFIER ::= { mib 7 }
X   egp          OBJECT IDENTIFIER ::= { mib 8 }
X
X   -- object types
X
X   -- the System group
X
X   sysDescr OBJECT-TYPE
X      SYNTAX  OCTET STRING
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { system 1 }
X
X   sysObjectID OBJECT-TYPE
X      SYNTAX  OBJECT IDENTIFIER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { system 2 }
X
X   sysUpTime OBJECT-TYPE
X      SYNTAX  TimeTicks
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { system 3 }
X
X   -- the Interfaces group
X
X   ifNumber OBJECT-TYPE
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { interfaces 1 }
X
X   -- the Interfaces table
X
X   ifTable OBJECT-TYPE
X      SYNTAX  SEQUENCE OF IfEntry
X      ACCESS  read-write
X      STATUS  mandatory
X      ::= { interfaces 2 }
X
X   ifEntry OBJECT-TYPE
X      SYNTAX  IfEntry
X      ACCESS  read-write
X      STATUS  mandatory
X      ::= { ifTable 1 }
X
X   IfEntry ::= SEQUENCE {
X      ifIndex		INTEGER,
X      ifDescr		OCTET STRING,
X      ifType		INTEGER,
X      ifMtu		INTEGER,
X      ifSpeed		Gauge,
X      ifPhysAddress	OCTET STRING,
X      ifAdminStatus	INTEGER,
X      ifOperStatus	INTEGER,
X      ifLastChange	TimeTicks,
X      ifInOctets	Counter,
X      ifInUcastPkts	Counter,
X      ifInNUcastPkts	Counter,
X      ifInDiscards	Counter,
X      ifInErrors	Counter,
X      ifInUnknownProtos	Counter,
X      ifOutOctets	Counter,
X      ifOutUcastPkts	Counter,
X      ifOutNUcastPkts	Counter,
X      ifOutDiscards	Counter,
X      ifOutErrors	Counter,
X      ifOutQLen		Gauge
X      }
X
X   ifIndex OBJECT-TYPE
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ifEntry 1 }
X
X   ifDescr OBJECT-TYPE
X      SYNTAX  OCTET STRING
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ifEntry 2 }
X
X   ifType OBJECT-TYPE
X      SYNTAX  INTEGER {
X	 other(1),     -- none of the following
X	 regular1822(2),
X	 hdh1822(3),
X	 ddn-x25(4),
X	 rfc877-x25(5),
X	 ethernet-csmacd(6),
X	 iso88023-csmacd(7),
X	 iso88024-tokenBus(8),
X	 iso88025-tokenRing(9),
X	 iso88026-man(10),
X	 starLan(11),
X	 proteon-10MBit(12),
X	 proteon-80MBit(13),
X	 hyperchannel(14),
X	 fddi(15),
X	 lapb(16),
X	 sdlc(17),
X	 t1-carrier(18),
X	 cept(19),
X	 basicIsdn(20),
X	 primaryIsdn(21),
X	 -- proprietary serial
X	 propPointToPointSerial(22)
X	 }
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ifEntry 3 }
X
X   ifMtu OBJECT-TYPE
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ifEntry 4 }
X
X   ifSpeed OBJECT-TYPE
X      SYNTAX  Gauge
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ifEntry 5 }
X
X   ifPhysAddress OBJECT-TYPE
X      SYNTAX  OCTET STRING
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ifEntry 6 }
X
X   ifAdminStatus OBJECT-TYPE
X      SYNTAX  INTEGER {
X	 up(1),        -- ready to pass packets
X	 down(2),
X	 testing(3)    -- in some test mode
X	 }
X      ACCESS  read-write
X      STATUS  mandatory
X      ::= { ifEntry 7 }
X
X   ifOperStatus OBJECT-TYPE
X      SYNTAX  INTEGER {
X	 up(1),        -- ready to pass packets
X	 down(2),
X	 testing(3)    -- in some test mode
X	 }
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ifEntry 8 }
X
X   ifLastChange OBJECT-TYPE
X      SYNTAX  TimeTicks
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ifEntry 9 }
X
X   ifInOctets OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ifEntry 10 }
X
X   ifInUcastPkts OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::=  { ifEntry 11 }
X
X   ifInNUcastPkts OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ifEntry 12 }
X
X   ifInDiscards OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ifEntry 13 }
X
X   ifInErrors OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ifEntry 14 }
X
X   ifInUnknownProtos OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ifEntry 15 }
X
X   ifOutOctets OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ifEntry 16 }
X
X   ifOutUcastPkts OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ifEntry 17 }
X
X   ifOutNUcastPkts OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ifEntry 18 }
X
X   ifOutDiscards OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ifEntry 19 }
X
X   ifOutErrors OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ifEntry 20 }
X
X   ifOutQLen OBJECT-TYPE
X      SYNTAX  Gauge
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ifEntry 21 }
X
X   -- the Address Translation group
X
X   atTable OBJECT-TYPE
X      SYNTAX  SEQUENCE OF AtEntry
X      ACCESS  read-write
X      STATUS  mandatory
X      ::= { at 1 }
X
X   atEntry OBJECT-TYPE
X      SYNTAX  AtEntry
X      ACCESS  read-write
X      STATUS  mandatory
X      ::= { atTable 1 }
X
X   AtEntry ::= SEQUENCE {
X      atIfIndex		INTEGER,
X      atPhysAddress	OCTET STRING,
X      atNetAddress	NetworkAddress
X      }
X
X   atIfIndex OBJECT-TYPE
X      SYNTAX  INTEGER
X      ACCESS  read-write
X      STATUS  mandatory
X      ::= { atEntry 1 }
X
X   atPhysAddress OBJECT-TYPE
X      SYNTAX  OCTET STRING
X      ACCESS  read-write
X      STATUS  mandatory
X      ::= { atEntry 2 }
X
X   atNetAddress OBJECT-TYPE
X      SYNTAX  NetworkAddress
X      ACCESS  read-write
X      STATUS  mandatory
X      ::= { atEntry 3 }
X
X   -- the IP group
X
X   ipForwarding OBJECT-TYPE
X      SYNTAX  INTEGER {
X	 gateway(1), -- entity forwards datagrams
X	 host(2)     -- entity does NOT forward datagrams
X	 }
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ip 1 }
X
X   ipDefaultTTL OBJECT-TYPE
X      SYNTAX  INTEGER
X      ACCESS  read-write
X      STATUS  mandatory
X      ::= { ip 2 }
X
X   ipInReceives OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ip 3 }
X
X   ipInHdrErrors OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ip 4 }
X
X   ipInAddrErrors OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ip 5 }
X
X   ipForwDatagrams OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ip 6 }
X
X   ipInUnknownProtos OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ip 7 }
X
X   ipInDiscards OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ip 8 }
X
X   ipInDelivers OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ip 9 }
X
X   ipOutRequests OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ip 10 }
X
X   ipOutDiscards OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ip 11 }
X
X   ipOutNoRoutes OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ip 12 }
X
X   ipReasmTimeout OBJECT-TYPE
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ip 13 }
X
X   ipReasmReqds OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ip 14 }
X
X   ipReasmOKs OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ip 15 }
X
X   ipReasmFails OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ip 16 }
X
X   ipFragOKs OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ip 17 }
X
X   ipFragFails OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ip 18 }
X
X   ipFragCreates OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ip 19 }
X
X   -- the IP Interface table
X
X   ipAddrTable OBJECT-TYPE
X      SYNTAX  SEQUENCE OF IpAddrEntry
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ip 20 }
X
X   ipAddrEntry OBJECT-TYPE
X      SYNTAX  IpAddrEntry
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ipAddrTable 1 }
X
X   IpAddrEntry ::= SEQUENCE {
X      ipAdEntAddr	IpAddress,
X      ipAdEntIfIndex	INTEGER,
X      ipAdEntNetMask	IpAddress,
X      ipAdEntBcastAddr	INTEGER
X      }
X
X   ipAdEntAddr OBJECT-TYPE
X      SYNTAX  IpAddress
X      ACCESS  read-only
X      STATUS  mandatory
X      ::=  { ipAddrEntry 1 }
X
X   ipAdEntIfIndex OBJECT-TYPE
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::=  { ipAddrEntry 2 }
X
X   ipAdEntNetMask OBJECT-TYPE
X      SYNTAX  IpAddress
X      ACCESS  read-only
X      STATUS  mandatory
X      ::=  { ipAddrEntry 3 }
X
X   ipAdEntBcastAddr OBJECT-TYPE
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ipAddrEntry 4 }
X
X   -- the IP Routing table
X
X   ipRoutingTable OBJECT-TYPE
X      SYNTAX  SEQUENCE OF IpRouteEntry
X      ACCESS  read-write
X      STATUS  mandatory
X      ::= { ip 21 }
X
X   ipRouteEntry OBJECT-TYPE
X      SYNTAX  IpRouteEntry
X      ACCESS  read-write
X      STATUS  mandatory
X      ::= { ipRoutingTable 1 }
X
X   IpRouteEntry ::= SEQUENCE {
X      ipRouteDest
X      IpAddress,
X      ipRouteIfIndex	INTEGER,
X      ipRouteMetric1	INTEGER,
X      ipRouteMetric2	INTEGER,
X      ipRouteMetric3	INTEGER,
X      ipRouteMetric4	INTEGER,
X      ipRouteNextHop	IpAddress,
X      ipRouteType	INTEGER,
X      ipRouteProto	INTEGER,
X      ipRouteAge	INTEGER
X      }
X
X   ipRouteDest OBJECT-TYPE
X      SYNTAX  IpAddress
X      ACCESS  read-write
X      STATUS  mandatory
X      ::= { ipRouteEntry 1 }
X
X   ipRouteIfIndex  OBJECT-TYPE
X      SYNTAX  INTEGER
X      ACCESS  read-write
X      STATUS  mandatory
X      ::= { ipRouteEntry 2 }
X
X   ipRouteMetric1 OBJECT-TYPE
X      SYNTAX  INTEGER
X      ACCESS  read-write
X      STATUS  mandatory
X      ::= { ipRouteEntry 3 }
X
X   ipRouteMetric2 OBJECT-TYPE
X      SYNTAX  INTEGER
X      ACCESS  read-write
X      STATUS  mandatory
X      ::= { ipRouteEntry 4 }
X
X   ipRouteMetric3 OBJECT-TYPE
X      SYNTAX  INTEGER
X      ACCESS  read-write
X      STATUS  mandatory
X      ::= { ipRouteEntry 5 }
X
X   ipRouteMetric4 OBJECT-TYPE
X      SYNTAX  INTEGER
X      ACCESS  read-write
X      STATUS  mandatory
X      ::= { ipRouteEntry 6 }
X
X   ipRouteNextHop OBJECT-TYPE
X      SYNTAX  IpAddress
X      ACCESS  read-write
X      STATUS  mandatory
X      ::= { ipRouteEntry 7 }
X
X   ipRouteType OBJECT-TYPE
X      SYNTAX  INTEGER {
X	 other(1),      -- none of the following
X
X	 invalid(2),    -- an invalidated route
X
X			-- route to directly
X	 direct(3),     -- connected (sub-)network
X
X			-- route to a non-local
X	 remote(4),     -- host/network/sub-network
X	 }
X      ACCESS  read-write
X      STATUS  mandatory
X      ::= { ipRouteEntry 8 }
X
X   ipRouteProto OBJECT-TYPE
X      SYNTAX  INTEGER {
X	 other(1),	-- none of the following
X
X			-- non-protocol information
X			--   e.g., manually
X	 local(2),	--   configured entries
X
X			-- set via a network
X	 netmgmt(3),	--   management protocol
X
X			-- obtained via ICMP,
X	 icmp(4),	--   e.g., Redirect
X
X			-- the following are
X			-- gateway routing protocols
X	 egp(5),
X	 ggp(6),
X	 hello(7),
X	 rip(8),
X	 is-is(9),
X	 es-is(10),
X	 ciscoIgrp(11),
X	 bbnSpfIgp(12),
X	 oigp(13)
X	 }
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { ipRouteEntry 9 }
X
X   ipRouteAge OBJECT-TYPE
X      SYNTAX  INTEGER
X      ACCESS  read-write
X      STATUS  mandatory
X      ::= { ipRouteEntry 10 }
X
X   -- the ICMP group
X
X   icmpInMsgs OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { icmp 1 }
X
X   icmpInErrors OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { icmp 2 }
X
X   icmpInDestUnreachs OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { icmp 3 }
X
X   icmpInTimeExcds OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { icmp 4 }
X
X   icmpInParmProbs OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { icmp 5 }
X
X   icmpInSrcQuenchs OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { icmp 6 }
X
X   icmpInRedirects OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { icmp 7 }
X
X   icmpInEchos OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { icmp 8 }
X
X   icmpInEchoReps OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { icmp 9 }
X
X   icmpInTimestamps OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { icmp 10 }
X
X   icmpInTimestampReps OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { icmp 11 }
X
X   icmpInAddrMasks OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { icmp 12 }
X
X   icmpInAddrMaskReps OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { icmp 13 }
X
X   icmpOutMsgs OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { icmp 14 }
X
X   icmpOutErrors OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { icmp 15 }
X
X   icmpOutDestUnreachs OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { icmp 16 }
X
X   icmpOutTimeExcds OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { icmp 17 }
X
X   icmpOutParmProbs OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { icmp 18 }
X
X   icmpOutSrcQuenchs OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { icmp 19 }
X
X   icmpOutRedirects OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { icmp 20 }
X
X   icmpOutEchos OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { icmp 21 }
X
X   icmpOutEchoReps OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { icmp 22 }
X
X   icmpOutTimestamps OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { icmp 23 }
X
X   icmpOutTimestampReps OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { icmp 24 }
X
X   icmpOutAddrMasks OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { icmp 25 }
X
X   icmpOutAddrMaskReps OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { icmp 26 }
X
X   -- the TCP group
X
X   tcpRtoAlgorithm OBJECT-TYPE
X      SYNTAX  INTEGER {
X	 other(1),    -- none of the following
X	 constant(2), -- a constant rto
X	 rsre(3),     -- MIL-STD-1778, Appendix B
X	 vanj(4)      -- Van Jacobson's algorithm [11]
X	 }
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { tcp 1 }
X
X   tcpRtoMin OBJECT-TYPE
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { tcp 2 }
X
X   tcpRtoMax OBJECT-TYPE
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { tcp 3 }
X
X   tcpMaxConn OBJECT-TYPE
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { tcp 4 }
X
X   tcpActiveOpens OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { tcp 5 }
X
X   tcpPassiveOpens OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { tcp 6 }
X
X   tcpAttemptFails OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { tcp 7 }
X
X   tcpEstabResets OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { tcp 8 }
X
X   tcpCurrEstab OBJECT-TYPE
X      SYNTAX  Gauge
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { tcp 9 }
X
X   tcpInSegs OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { tcp 10 }
X
X   tcpOutSegs OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { tcp 11 }
X
X   tcpRetransSegs OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { tcp 12 }
X
X   -- the TCP connections table
X
X   tcpConnTable OBJECT-TYPE
X      SYNTAX  SEQUENCE OF TcpConnEntry
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { tcp 13 }
X
X   tcpConnEntry OBJECT-TYPE
X      SYNTAX  TcpConnEntry
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { tcpConnTable 1 }
X
X   TcpConnEntry ::= SEQUENCE {
X      tcpConnState		INTEGER,
X      tcpConnLocalAddress	IpAddress,
X      tcpConnLocalPort		INTEGER (0..65535),
X      tcpConnRemAddress		IpAddress,
X      tcpConnRemPort		INTEGER (0..65535)
X      }
X
X   tcpConnState OBJECT-TYPE
X      SYNTAX  INTEGER {
X	 closed(1),
X	 listen(2),
X	 synSent(3),
X	 synReceived(4),
X	 established(5),
X	 finWait1(6),
X	 finWait2(7),
X	 closeWait(8),
X	 lastAck(9),
X	 closing(10),
X	 timeWait(11)
X	 }
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { tcpConnEntry 1 }
X
X   tcpConnLocalAddress OBJECT-TYPE
X      SYNTAX  IpAddress
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { tcpConnEntry 2 }
X
X   tcpConnLocalPort OBJECT-TYPE
X      SYNTAX  INTEGER (0..65535)
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { tcpConnEntry 3 }
X
X   tcpConnRemAddress OBJECT-TYPE
X      SYNTAX  IpAddress
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { tcpConnEntry 4 }
X
X   tcpConnRemPort OBJECT-TYPE
X      SYNTAX  INTEGER (0..65535)
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { tcpConnEntry 5 }
X
X   -- the UDP group
X
X   udpInDatagrams OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { udp 1 }
X
X   udpNoPorts OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { udp 2 }
X
X   udpInErrors OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { udp 3 }
X
X   udpOutDatagrams OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { udp 4 }
X
X   -- the EGP group
X
X   egpInMsgs OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { egp 1 }
X
X   egpInErrors OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { egp 2 }
X
X   egpOutMsgs OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { egp 3 }
X
X   egpOutErrors OBJECT-TYPE
X      SYNTAX  Counter
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { egp 4 }
X
X   -- the EGP Neighbor table
X
X   egpNeighTable OBJECT-TYPE
X      SYNTAX  SEQUENCE OF EgpNeighEntry
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { egp 5 }
X
X   egpNeighEntry OBJECT-TYPE
X      SYNTAX  EgpNeighEntry
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { egpNeighTable 1 }
X
X   EgpNeighEntry ::= SEQUENCE {
X      egpNeighState	INTEGER,
X      egpNeighAddr	IpAddress
X      }
X
X   egpNeighState OBJECT-TYPE
X      SYNTAX  INTEGER {
X	 idle(1),
X	 acquisition(2),
X	 down(3),
X	 up(4),
X	 cease(5)
X	 }
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { egpNeighEntry 1 }
X
X   egpNeighAddr OBJECT-TYPE
X      SYNTAX  IpAddress
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { egpNeighEntry 2 }
Xinternet-accounting OBJECT IDENTIFIER ::= { experimental 99 }
Xcontrol		OBJECT IDENTIFIER ::= { internet-accounting 1 }
Xflowdata	OBJECT IDENTIFIER ::= { internet-accounting 2 }
Xruledata	OBJECT IDENTIFIER ::= { internet-accounting 3 }
Xactiondata	OBJECT IDENTIFIER ::= { internet-accounting 4 }
XacctHighWaterMark OBJECT-TYPE
X    SYNTAX  INTEGER (0..100)
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { control 1 }
XacctFloodMark OBJECT-TYPE
X    SYNTAX  INTEGER (0..100)
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { control 2 }
XacctInactivityTimeout OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { control 3 }
XacctFlowSamplingRate OBJECT-TYPE
X    SYNTAX  SEQUENCE OF FlowSamplingRate
X    ACCESS  not-accessible
X    STATUS  mandatory
X    ::= { control 4 }
XFlowSamplingRate ::= SEQUENCE { rate INTEGER }
XacctCollectorInfo OBJECT-TYPE
X    SYNTAX  SEQUENCE OF acctCollectorInfoEntry
X    ACCESS  not-accessible
X    STATUS  mandatory
X    ::= { control 5 }
XacctCollectorInfoEntry OBJECT-TYPE
X    SYNTAX  AcctCollectorInfoEntry
X    ACCESS  not-accessible
X    STATUS  mandatory
X--    INDEX  { acctCollectorIndex }
X    ::= { acctCollectorInfo 1 }
XAcctCollectorInfoEntry ::= SEQUENCE {
X    acctCollectorIndex	 		INTEGER,
X    acctCollectorPeerAddress	 	OCTET STRING,
X    acctCollectorLastTime		TIMETICKS,
X    acctCollectorPreviousTime		TIMETICKS
X    }
XacctCollectorIndex OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctCollectorInfoEntry 1 }
XacctCollectorPeerAddress OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctCollectorInfoEntry 2 }
XcacctCollectorLastTime OBJECT-TYPE
X    SYNTAX  TIMETICKS
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctCollectorInfoEntry 3 }
XacctCollectorPreviousTime OBJECT-TYPE
X    SYNTAX  TIMETICKS
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctCollectorInfoEntry 4 }
XacctLastCollectTime OBJECT-TYPE
X    SYNTAX  TIMETICKS
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { control 6 }
XacctRuleSetInfo OBJECT-TYPE
X    SYNTAX  SEQUENCE OF acctRuleInfoEntry
X    ACCESS  not-accessible
X    STATUS  mandatory
X    ::= { control 7 }
XacctRuleInfoEntry OBJECT-TYPE
X    SYNTAX  AcctRuleInfoEntry
X    ACCESS  not-accessible
X    STATUS  mandatory
X--    INDEX  { acctRuleInfoIndex }
X    ::= { acctRuleSetInfo 1 }
XAcctRuleInfoEntry ::= SEQUENCE {
X    acctRuleInfoIndex		 	INTEGER,
X    acctRuleInfoRuleSize		INTEGER,
X    acctRuleInfoActionSize		INTEGER
X    }
XacctRuleInfoIndex OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctRuleInfoEntry 1 }
XacctRuleInfoRuleSize OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctRuleInfoEntry 2 }
XacctRuleInfoActionSize OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctRuleInfoEntry 3 }
XacctCurrentRuleSet OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { control 8 }
XacctEmergencyRuleSet OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { control 9 }
XacctFlowTable OBJECT-TYPE
X    SYNTAX  SEQUENCE OF AcctFlowEntry
X    ACCESS  not-accessible
X    STATUS  mandatory
X    ::= { flowdata 1 }
XacctFlowEntry OBJECT-TYPE
X    SYNTAX  AcctFlowEntry
X    ACCESS  not-accessible
X    STATUS  mandatory
X--    INDEX { acctFlowIndex }
X    ::= { acctFlowTable 1 }
XAcctFlowEntry ::= SEQUENCE {
X    acctFlowIndex		   INTEGER,
X    acctFlowStatus		   INTEGER,
X    acctFlowSourceInterface	   INTEGER,	  -- Source Address Tuple
X    acctFlowSourceAdjacentType	   INTEGER,
X    acctFlowSourceAdjacentAddress  OCTET STRING,
X    acctFlowSourceAdjacentMask	   OCTET STRING,
X    acctFlowSourcePeerType	   INTEGER,
X    acctFlowSourcePeerTypeMask	   INTEGER,
X    acctFlowSourcePeerAddress	   OCTET STRING,
X    acctFlowSourcePeerMask	   OCTET STRING,
X    acctFlowSourceDetailType	   INTEGER,
X    acctFlowSourceDetailTypeMask   INTEGER,
X    acctFlowSourceDetailAddress	   OCTET STRING,
X    acctFlowSourceDetailMask	   OCTET STRING,
X    acctFlowSourceSubscriberID	   OCTET STRING,
X    acctFlowSourceSubscriberMask   OCTET STRING,
X    acctFlowDestInterface	   INTEGER,	  -- Dest Address Tuple
X    acctFlowDestAdjacentType	   INTEGER,
X    acctFlowDestAdjacentAddress	   OCTET STRING,
X    acctFlowDestAdjacentMask	   OCTET STRING,
X    acctFlowDestPeerType	   INTEGER,
X    acctFlowDestPeerTypeMask	   INTEGER,
X    acctFlowDestPeerAddress	   OCTET STRING,
X    acctFlowDestPeerMask	   OCTET STRING,
X    acctFlowDestDetailType	   INTEGER,
X    acctFlowDestDetailTypeMask	   INTEGER,
X    acctFlowDestDetailAddress	   OCTET STRING,
X    acctFlowDestDetailMask	   OCTET STRING,
X    acctFlowDestSubscriberID	   OCTET STRING,
X    acctFlowDestSubscriberMask	   OCTET STRING,
X    acctFlowSubscriberID	   OCTET STRING,  -- Session attributes
X    acctFlowSessionID		   INTEGER,
X    acctFlowPDUScale		   INTEGER,	  -- Rule Set attributes
X    acctFlowOctetScale		   INTEGER,
X    acctFlowRuleSet		   INTEGER,
X    acctFlowType		   INTEGER,
X    acctFlowToOctets		   Counter,	  -- Source-to-Dest counters
X    acctFlowToPDUs		   Counter,
X    acctFlowFromOctets		   Counter,	  -- Dest-to-Source counters
X    acctFlowFromPDUs		   Counter,
X    acctFlowFirstTime		   TimeTicks,	  -- Activity times
X    acctFlowLastTime		   TimeTicks
X    }
XacctFlowIndex OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 1 }
XacctFlowStatus OBJECT-TYPE
X    SYNTAX  INTEGER { valid(1), invalid(2) }
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 2 }
XacctFlowSourceInterface OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 3 }
XacctFlowSourceAdjacentType OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 4 }
XacctFlowSourceAdjacentAddress OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 5 }
XacctFlowSourceAdjacentMask OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 6 }
XacctFlowSourcePeerType OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 7 }
XacctFlowSourcePeerTypeMask OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 8 }
XacctFlowSourcePeerAddress OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 9 }
XacctFlowSourcePeerMask OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 10 }
XacctFlowSourceDetailType OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 11 }
XacctFlowSourceDetailTypeMask OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 12 }
XacctFlowSourceDetailAddress OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 13 }
XacctFlowSourceDetailMask OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 14 }
XacctFlowSourceSubscriberID OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 15 }
XacctFlowSourceSubscriberMask OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 16 }
XacctFlowDestInterface OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 17 }
XacctFlowDestAdjacentType OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 18 }
XacctFlowDestAdjacentAddress OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 19 }
XacctFlowDestAdjacentMask OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 20 }
XacctFlowDestPeerType OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 21 }
XacctFlowDestPeerTypeMask OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 22 }
XacctFlowDestPeerAddress OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 23 }
XacctFlowDestPeerMask OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 24 }
XacctFlowDestDetailType OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 25 }
XacctFlowDestDetailTypeMask OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 26 }
XacctFlowDestDetailAddress OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 27 }
XacctFlowDestDetailMask OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 28 }
XacctFlowDestSubscriberID OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 29 }
XacctFlowDestSubscriberMask OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 30 }
XacctFlowSubscriberID OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 31 }
XacctFlowSessionID OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 32 }
XacctFlowPDUScale OBJECT-TYPE
X    SYNTAX  INTEGER (1..127)
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 33 }
XacctFlowOctetScale OBJECT-TYPE
X    SYNTAX  INTEGER (1..127)
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 34 }
XacctFlowRuleSet OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 35 }
XacctFlowType OBJECT-TYPE
X    SYNTAX  INTEGER { count(1), tally(2), aggregate(3) }
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 36 }
XacctFlowToOctets OBJECT-TYPE
X    SYNTAX  Counter
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 37 }
XacctFlowToPDUs OBJECT-TYPE
X    SYNTAX  Counter
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 38 }
XacctFlowFromOctets OBJECT-TYPE
X    SYNTAX  Counter
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 39 }
XacctFlowFromPDUs OBJECT-TYPE
X    SYNTAX  Counter
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 40 }
XacctFlowFirstTime OBJECT-TYPE
X    SYNTAX  Timeticks
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 41 }
XacctFlowLastTime OBJECT-TYPE
X    SYNTAX  Timeticks
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctFlowEntry 42 }
XacctCreationTable OBJECT-TYPE
X    SYNTAX  SEQUENCE OF AcctCreationEntry
X    ACCESS  not-accessible
X    STATUS  mandatory
X    ::= { flowdata 2 }
XacctCreationEntry OBJECT-TYPE
X    SYNTAX  AcctCreationEntry
X    ACCESS  not-accessible
X    STATUS   mandatory
X--    INDEX { acctCreationTime, acctCreationIndex }
X    ::= { acctCreationTable 1 }
XAcctCreationEntry ::= SEQUENCE {
X    acctCreationTime		 TimeTicks,
X    acctCreationIndex		 INTEGER
X    }
XacctCreationTime OBJECT-TYPE
X    SYNTAX  TimeTicks
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctCreationEntry 1 }
XacctCreationIndex OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctCreationEntry 2 }
XacctActivityTable OBJECT-TYPE
X    SYNTAX  SEQUENCE OF AcctActivityEntry
X    ACCESS  not-accessible
X    STATUS   mandatory
X    ::= { flowdata 3 }
XacctActivityEntry OBJECT-TYPE
X    SYNTAX  AcctActivityEntry
X    ACCESS  not-accessible
X    STATUS  mandatory
X--    INDEX { acctActivityTime, acctActivityIndex }
X    ::= { acctActivityTable 1 }
XAcctActivityEntry ::= SEQUENCE {
X    acctActivitytTime	 	TimeTicks,
X    acctActivityIndex		INTEGER
X    }
XacctActivityTime OBJECT-TYPE
X    SYNTAX  TimeTicks
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctActivityEntry 1 }
XacctActivityIndex OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctActivityEntry 2 }
XacctActivityColumnTable OBJECT-TYPE
X    SYNTAX  SEQUENCE OF AcctColumnEntry
X    ACCESS  not-accessible
X    STATUS   mandatory
X    ::= { flowdata 4 }
XacctColumnEntry OBJECT-TYPE
X    SYNTAX  AcctColumnEntry
X    ACCESS  not-accessible
X    STATUS  mandatory
X--    INDEX { acctColumnAttribute, acctColumnTime, acctColumnIndex }
X    ::= { acctActivityColumnTable 1 }
XAcctColumnEntry ::= SEQUENCE {
X    acctColumnAttribute		INTEGER,
X    acctColumntTime	 	TimeTicks,
X    acctColumnIndex		INTEGER,
X    acctColumnData		OPAQUE
X    }
XacctColumnAttribute OBJECT-TYPE
X    SYNTAX  INTEGER { Null(0),
X	FlowIndex(1),FlowStatus(2),
X	FlowSourceInterface(3),	-- Source Address Tuple
X	FlowSourceAdjacentType(4),
X	FlowSourceAdjacentAddress(5),FlowSourceAdjacentMask(6),
X	FlowSourcePeerType(7),FlowSourcePeerTypeMask(8),
X	FlowSourcePeerAddress(9),FlowSourcePeerMask(10),
X	FlowSourceDetailType(11),FlowSourceDetailTypeMask(12),
X	FlowSourceDetailAddress(13),FlowSourceDetailMask(14),
X	FlowSourceSubscriberID(15),FlowSourceSubscriberMask(16),
X	FlowDestInterface(17),	-- Dest Address Tuple
X	FlowDestAdjacentType(18),
X	FlowDestAdjacentAddress(19),FlowDestAdjacentMask(20),
X	FlowDestPeerType(21),FlowDestPeerTypeMask(22),
X	FlowDestPeerAddress(23),FlowDestPeerMask(24),
X	FlowDestDetailType(25),FlowDestDetailTypeMask(26),
X	FlowDestDetailAddress(27),FlowDestDetailMask(28),
X	FlowDestSubscriberID(29),FlowDestSubscriberMask(30),
X	FlowSubscriberID(31),	-- Session attributes
X	FlowSessionID(32),
X	FlowPDUScale(33),	-- Rule Set attributes
X	FlowOctetScale(34),
X	FlowRuleSet(35),
X	FlowType(36),
X	FlowToOctets(37),	-- Source-to-Dest counters
X	FlowToPDUs(38),
X	FlowFromOctets(39),	-- Dest-to-Source counters
X	FlowFromPDUs(40),
X	FlowFirstTime(41),	-- Activity times
X	FlowLastTime(42)
X	}
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctColumnEntry 1 }
XacctColumnTime OBJECT-TYPE
X    SYNTAX  TimeTicks
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctColumnEntry 2 }
XacctColumnIndex OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctColumnEntry 3 }
XacctColumnFlowData OBJECT-TYPE
X    SYNTAX  OPAQUE
X    ACCESS  read-only
X    STATUS  mandatory
X    ::= { acctColumnEntry 4 }
XacctRuleTable OBJECT-TYPE
X    SYNTAX  SEQUENCE OF AcctRuleEntry
X    ACCESS  not-accessible
X    STATUS   mandatory
X    ::= { ruledata 1 }
XacctRuleEntry OBJECT-TYPE
X    SYNTAX  AcctRuleEntry
X    ACCESS  not-accessible
X    STATUS   mandatory
X--    INDEX { acctRuleSet, acctRuleIndex }
X    ::= { acctRuleTable 1 }
XAcctRuleEntry ::= SEQUENCE {
X    acctRuleSet			 INTEGER,
X    acctRuleIndex		 INTEGER,
X    acctRuleSelector		 INTEGER,	 -- what to select on
X    acctRuleMask		 OCTET STRING,	 -- mask value
X    acctRuleMatchedValue	 OCTET STRING,	 -- matched value
X    acctRuleAction 		 INTEGER,	 -- action to take
X    acctRuleJumpIndex		 INTEGER	 -- where to go
X    }
XacctRuleSet OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctRuleEntry 1 }
XacctRuleIndex OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctRuleEntry 2 }
XacctRuleSelector OBJECT-TYPE
X    SYNTAX  INTEGER { Null(0),
X	FlowSourceInterface(3),
X	FlowSourceAdjacentType(4),FlowSourceAdjacentAddress(5),
X	FlowSourcePeerType(7),
X	FlowSourcePeerAddress(9),
X	FlowSourceDetailType(11),
X	FlowSourceDetailAddress(13),
X	FlowSourceSubscriberID(15),
X	FlowDestInterface(17),
X	FlowDestAdjacentType(18),FlowDestAdjacentAddress(19),
X	FlowDestPeerType(21),
X	FlowDestPeerAddress(23),
X	FlowDestDetailType(25),
X	FlowDestDetailAddress(27),
X	FlowDestSubscriberID(29),
X	FlowSubscriberID(31),FlowSessionID(32),
X	}
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctRuleEntry 3 }
XacctRuleMask OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctRuleEntry 4 }
XacctRuleMatchedValue OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctRuleEntry 5 }
XacctRuleAction OBJECT-TYPE
X    SYNTAX  INTEGER { count(1), tally(2), aggregate(3),
X	succeed(4), fail(5),
X	pushto(6), popto(7),
X	goto(8) }
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctRuleEntry 6 }
XacctRuleJumpIndex OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctRuleEntry 7 }
XacctActionTable OBJECT-TYPE
X    SYNTAX  SEQUENCE OF AcctActionEntry
X    ACCESS  not-accessible
X    STATUS  mandatory
X    ::= { actiondata 1 }
XacctActionEntry OBJECT-TYPE
X    SYNTAX  AcctActionEntry
X    ACCESS  not-accessible
X    STATUS  mandatory
X--    INDEX { acctActionSet, acctActionIndex }
X    ::= { acctActionTable 1 }
XAcctActionEntry ::= SEQUENCE {
X    acctActionIndex		      INTEGER,
X    acctActionStatus 		      INTEGER,
X    acctActionSourceInterface	      INTEGER,	      -- Source AddressTuple
X    acctActionSourceAdjacentType      INTEGER,
X    acctActionSourceAdjacentAddress   OCTET STRING,
X    acctActionSourceAdjacentMask      OCTET STRING,
X    acctActionSourcePeerType	      INTEGER,
X    acctActionSourcePeerTypeMask      INTEGER,
X    acctActionSourcePeerAddress	      OCTET STRING,
X    acctActionSourcePeerMask	      OCTET STRING,
X    acctActionSourceDetailType        INTEGER,
X    acctActionSourceDetailTypeMask    INTEGER,
X    acctActionSourceDetailAddress     OCTET STRING,
X    acctActionSourceDetailMask	      OCTET STRING,
X    acctActionSourceSubscriberID      OCTET STRING,
X    acctActionSourceSubscriberMask    OCTET STRING,
X    acctActionDestInterface	      INTEGER,	      -- Dest AddressTuple
X    acctActionDestAdjacentType	      INTEGER,
X    acctActionDestAdjacentAddress     OCTET STRING,
X    acctActionDestAdjacentMask	      OCTET STRING,
X    acctActionDestPeerType	      INTEGER,
X    acctActionDestPeerTypeMask	      INTEGER,
X    acctActionDestPeerAddress	      OCTET STRING,
X    acctActionDestPeerMask	      OCTET STRING,
X    acctActionDestDetailType	      INTEGER,
X    acctActionDestDetailTypeMask      INTEGER,
X    acctActionDestDetailAddress       OCTET STRING,
X    acctActionSoDestDetailMask	      OCTET STRING,
X    acctActionDestSubscriberID	      OCTET STRING,
X    acctActionDestSubscriberMask      OCTET STRING,
X    acctActionSubscriberID	      OCTET STRING,   -- Session attributes
X    acctActionSessionID		      INTEGER,
X    acctActionPDUScale		      INTEGER,	      -- Rule Set attributes
X    acctActionOctetScale	      INTEGER
X    acctActionSet		      INTEGER,
X    }
XacctActionIndex OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 1 }
XacctActionStatus OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 2 }
XacctActionSourceInterface OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 3 }
XacctActionSourceAdjacentType OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 4 }
XacctActionSourceAdjacentAddress OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 5 }
XacctActionSourceAdjacentMask OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 6 }
XacctActionSourcePeerType OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 7 }
XacctActionSourcePeerTypeMask OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 8 }
XacctActionSourcePeerAddress OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 9 }
XacctActionSourcePeerMask OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 10 }
XacctActionSourceDetailType OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 11 }
XacctActionSourceDetailTypeMask OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 12 }
XacctActionSourceDetailAddress OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 13 }
XacctActionSourceDetailMask OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 14 }
XacctActionSourceSubscriberID OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 15 }
XacctActionSourceSubscriberMask OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 16 }
XacctActionDestInterface OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 17 }
XacctActionDestAdjacentType OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 18 }
XacctActionDestAdjacentAddress OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 19 }
XacctActionDestAdjacentMask OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 20 }
XacctActionDestPeerType OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 21 }
XacctActionDestPeerTypeMask OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 22 }
XacctActionDestPeerAddress OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 23 }
XacctActionDestPeerMask OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 24 }
XacctActionDestDetailType OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 25 }
XacctActionDestDetailTypeMask OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 26 }
XacctActionDestDetailAddress OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 27 }
XacctActionDestDetailMask OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 28 }
XacctActionDestSubscriberID OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 29 }
XacctActionDestSubscriberMask OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 30 }
XacctActionSubscriberID OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 31 }
XacctActionSessionID OBJECT-TYPE
X    SYNTAX  OCTET STRING
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 32 }
XacctActionPDUScale OBJECT-TYPE
X    SYNTAX  INTEGER (1..127)
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 33 }
XacctActionOctetScale OBJECT-TYPE
X    SYNTAX  INTEGER (1..127)
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 34 }
XacctActionSet OBJECT-TYPE
X    SYNTAX  INTEGER
X    ACCESS  read-write
X    STATUS  mandatory
X    ::= { acctActionEntry 35 }
X   -- Auckland University Monitor MIB
X   -- Nevil Brownlee, 5 Oct 93
X
X   UofAuckland OBJECT IDENTIFIER ::= { enterprises 411 }
X
X   MeterStats OBJECT IDENTIFIER ::= { UofAuckland 1 }
X
X   msStatsReset OBJECT-TYPE	-- Write to zero statistics counters
X      SYNTAX  INTEGER
X      ACCESS  read-write
X      STATUS  mandatory
X      ::= { MeterStats 1 }
X
X   msStatsTime OBJECT-TYPE	-- Seconds since stats counters were zeroed
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { MeterStats 2 }
X
X   msNbrPackets OBJECT-TYPE	-- Nbr of packets this stats interval
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { MeterStats 3 }
X
X   msTotalPacketBacklog OBJECT-TYPE  -- Sum of pkt backlogs this stats interval
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { MeterStats 4 }
X
X   msMaxPacketRate OBJECT-TYPE	-- Max packet rate this stats interval
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { MeterStats 5 }
X
X   msMaxPacketBacklog OBJECT-TYPE  -- Max packet backlog this stats interval
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { MeterStats 6 }
X
X   msNbrFlows OBJECT-TYPE		-- Nbr of flows currently in use
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { MeterStats 7 }
X
X   msFlowsRecovered OBJECT-TYPE	-- Flows recovered during this stats interval
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { MeterStats 8 }
X
X   msRuleMatches OBJECT-TYPE	-- Rules matched during this stats interval
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { MeterStats 9 }
X
X   msHashSearches OBJECT-TYPE	-- Tally hash searches this stats interval
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { MeterStats 10 }
X
X   msHashCompares OBJECT-TYPE	-- Compares for tally searches this interval
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { MeterStats 11 }
X
X   msTotalHashSize OBJECT-TYPE	-- Current sum of tally hash table sizes
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { MeterStats 12 }
X
X   msNbrHashEntries OBJECT-TYPE	-- Nbr of in-use slots in tally hash tables
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { MeterStats 13 }
X
X   msGarbageCollectInterval OBJECT-TYPE  -- Seconds between G.C. invocations
X      SYNTAX  INTEGER
X      ACCESS  read-write
X      STATUS  mandatory
X      ::= { MeterStats 14 }
X
X   msMaxFlows OBJECT-TYPE  -- Max nbr of flows in meter's flows table
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { MeterStats 15 }
X
X   msAvIdlePer1000 OBJECT-TYPE  -- Average idle processor % * 10
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { MeterStats 16 }
X
X   msMinIdlePer1000 OBJECT-TYPE  -- Minimum idels processor % * 10
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { MeterStats 17 }
X
X
X   pcSystem OBJECT IDENTIFIER ::= { UofAuckland 2 }
X
X   pcNearMem OBJECT-TYPE
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { pcSystem 1 }
X
X   pcFarMem OBJECT-TYPE
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { pcSystem 2 }
X
X   pcBadPackets OBJECT-TYPE
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { pcSystem 3 }
X
X   pcNoBufPackets OBJECT-TYPE
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { pcSystem 4 }
X
X   pcLostPackets OBJECT-TYPE
X      SYNTAX  INTEGER
X      ACCESS  read-only
X      STATUS  mandatory
X      ::= { pcSystem 5 }
END_OF_FILE
  if test 47344 -ne `wc -c <'netramet/mib/mib.txt'`; then
    echo shar: \"'netramet/mib/mib.txt'\" unpacked with wrong size!
  fi
  # end of 'netramet/mib/mib.txt'
fi
if test -f 'netramet/src/apps/snmpnetstat/inet.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'netramet/src/apps/snmpnetstat/inet.c'\"
else
  echo shar: Extracting \"'netramet/src/apps/snmpnetstat/inet.c'\" \(14067 characters\)
  sed "s/^X//" >'netramet/src/apps/snmpnetstat/inet.c' <<'END_OF_FILE'
X/***********************************************************
X	Copyright 1989 by Carnegie Mellon University
X
X                      All Rights Reserved
X
XPermission to use, copy, modify, and distribute this software and its 
Xdocumentation for any purpose and without fee is hereby granted, 
Xprovided that the above copyright notice appear in all copies and that
Xboth that copyright notice and this permission notice appear in 
Xsupporting documentation, and that the name of CMU not be
Xused in advertising or publicity pertaining to distribution of the
Xsoftware without specific, written prior permission.  
X
XCMU DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
XALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
XCMU BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
XANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
XWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
XARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
XSOFTWARE.
X******************************************************************/
X/*
X * Copyright (c) 1983,1988 Regents of the University of California.
X * All rights reserved.
X *
X * Redistribution and use in source and binary forms are permitted
X * provided that this notice is preserved and that due credit is given
X * to the University of California at Berkeley. The name of the University
X * may not be used to endorse or promote products derived from this
X * software without specific prior written permission. This software
X * is provided ``as is'' without express or implied warranty.
X */
X
X#include <strings.h>
X#include <stdio.h>
X
X#include <sys/param.h>
X#include <sys/socket.h>
X
X#include <netinet/in.h>
X
X#include <netdb.h>
X
X#include "ausnmp.h"
X#include "main.h"
X#include "asn1.h"
X#include "snmp.h"
X#include "snmpimpl.h"
X#include "snmpapi.h"
X#include "snmpclnt.h"
X#include "mib.h"
X
Xextern	int aflag;
Xextern	int nflag;
Xextern	char *plural();
X/* extern	char *malloc();  /* in ausnmp.h */
Xextern	struct snmp_session *Session;
Xextern	struct variable_list *getvarbyname();
X
X
Xchar	*inetname();
X
Xstruct stat_table {
X    int	    entry;  /* entry number in table */
X    /* format string to printf(description, value, plural(value)); */
X    /* warning: the %d must be before the %s */
X    char    description[80];
X};
X
Xstatic oid oid_ipstats[] = {1, 3, 6, 1, 2, 1, 4, 0, 0};
Xstruct stat_table ip_stattab[] = {
X    {3, "%d total datagram%s received"},
X    {4, "%d datagram%s with header errors"},
X    {5, "%d datagram%s with an invalid destination address"},
X    {6, "%d datagram%s forwarded"},
X    {7, "%d datagram%s with unknown protocol"},
X    {8, "%d datagram%s discarded"},
X    {9, "%d datagram%s delivered"},
X    {10, "%d output datagram request%s"},
X    {11, "%d output datagram%s discarded"},
X    {12, "%d datagram%s with no route"},
X    {14, "%d fragment%s received"},
X    {15, "%d datagram%s reassembled"},
X    {16, "%d reassembly failure%s"},
X    {17, "%d datagram%s fragmented"},
X    {18, "%d fragmentation failure%s"},
X    {19, "%d fragment%s created"}
X};
X
Xstatic oid oid_udpstats[] = {1, 3, 6, 1, 2, 1, 7, 0, 0};
Xstruct stat_table udp_stattab[] = {
X    {1, "%d total datagram%s received"},
X    {2, "%d datagram%s to invalid port"},
X    {3, "%d datagram%s dropped due to errors"},
X    {4, "%d output datagram request%s"}
X};
X
Xstatic oid oid_tcpstats[] = {1, 3, 6, 1, 2, 1, 6, 0, 0};
Xstruct stat_table tcp_stattab[] = {
X    {5, "%d active open%s"},
X    {6, "%d passive open%s"},
X    {7, "%d failed attempt%s"},
X    {8, "%d reset%s of established connections"},
X    {9, "%d current established connection%s"},
X    {10, "%d segment%s received"},
X    {11, "%d segment%s sent"},
X    {12, "%d segment%s retransmitted"}
X};
X
Xstatic oid oid_icmpstats[] = {1, 3, 6, 1, 2, 1, 5, 0, 0};
Xstruct stat_table icmp_stattab[] = {
X    {1, "%d total message%s received"},
X    {2, "%d message%s dropped due to errors"},
X    {14, "%d ouput message request%s"},
X    {15, "%d output message%s discarded"}
X};
X
Xstruct stat_table icmp_inhistogram[] = {
X    {3, "Destination unreachable: %d"},
X    {4, "Time Exceeded: %d"},
X    {5, "Parameter Problem: %d"},
X    {6, "Source Quench: %d"},
X    {7, "Redirect: %d"},
X    {8, "Echo Request: %d"},
X    {9, "Echo Reply: %d"},
X    {10, "Timestamp Request: %d"},
X    {11, "Timestamp Reply: %d"},
X    {12, "Address Mask Request: %d"},
X    {13, "Addrss Mask Reply:%d"},
X};
X
Xstruct stat_table icmp_outhistogram[] = {
X    {16, "Destination unreachable: %d"},
X    {17, "Time Exceeded: %d"},
X    {18, "Parameter Problem: %d"},
X    {19, "Source Quench: %d"},
X    {20, "Redirect: %d"},
X    {21, "Echo Request: %d"},
X    {22, "Echo Reply: %d"},
X    {23, "Timestamp Request: %d"},
X    {24, "Timestamp Reply: %d"},
X    {25, "Address Mask Request: %d"},
X    {26, "Addrss Mask Reply:%d"},
X};
X
Xstruct tcpconn_entry {
X    oid	    instance[10];
X    struct in_addr  localAddress;
X    int	    locAddrSet;
X    u_short localPort;
X    int	    locPortSet;
X    struct in_addr  remoteAddress;
X    int	    remAddrSet;
X    u_short remotePort;
X    int	    remPortSet;
X    int	    state;
X    int	    stateSet;
X    struct tcpconn_entry *next;
X};
X
X#define TCPCONN_STATE	1
X#define TCPCONN_LOCADDR	2
X#define TCPCONN_LOCPORT	3
X#define TCPCONN_REMADDR	4
X#define TCPCONN_REMPORT	5
X
X
X
Xstatic oid oid_tcpconntable[] = {1, 3, 6, 1, 2, 1, 6, 13, 1};
X#define ENTRY 9
X
Xchar *tcpstates[] = {
X    "",		    "CLOSED",	    "LISTEN",   "SYNSENT",
X    "SYNRECEIVED",  "ESTABLISHED",  "FINWAIT1", "FINWAIT2",
X    "CLOSEWAIT",    "LASTACK",	    "CLOSING",	"TIMEWAIT"
X};
X#define TCP_NSTATES 11
X
X/*
X * Print a summary of connections related to an Internet
X * protocol (currently only TCP).  For TCP, also give state of connection.
X */
Xprotopr(){
X    struct tcpconn_entry *tcpconn = NULL, *tp, *newp;
X    struct snmp_pdu *request, *response;
X    struct variable_list *vp;
X    oid *instance;
X    int first, status;
X
X    request = snmp_pdu_create(GETNEXT_REQ_MSG);
X
X    snmp_add_null_var(request, oid_tcpconntable, sizeof(oid_tcpconntable)/sizeof(oid));
X
X    while(1){
X	status = snmp_synch_response(Session, request, &response);
X	if (status != STAT_SUCCESS || response->errstat != SNMP_ERR_NOERROR){
X	    fprintf(stderr, "SNMP request failed\n");
X	    break;
X	}
X	vp = response->variables;
X	if (vp->name_length != 20 ||
X	    bcmp((char *)vp->name, (char *)oid_tcpconntable, sizeof(oid_tcpconntable))){
X		break;
X	}
X	
X	request = snmp_pdu_create(GETNEXT_REQ_MSG);
X	snmp_add_null_var(request, vp->name, vp->name_length);
X
X	instance = vp->name + 10;
X	for(tp = tcpconn; tp != NULL; tp = tp->next){
X	    if (!bcmp((char *)instance, (char *)tp->instance,
X		sizeof(tp->instance)))
X		    break;
X	}
X	if (tp == NULL){
X	    newp = (struct tcpconn_entry *)malloc(sizeof(struct tcpconn_entry));
X	    if (tcpconn == NULL){
X		tcpconn = newp;
X	    } else {
X		for(tp = tcpconn; tp->next != NULL; tp = tp->next)
X		    ;
X		tp->next = newp;
X	    }
X	    tp = newp;
X	    bzero((char *)tp, sizeof(*tp));
X	    tp->next = NULL;
X	    bcopy((char *)instance, (char *)tp->instance, sizeof(tp->instance));
X	}
X
X	if (vp->name[ENTRY] == TCPCONN_STATE){
X	    tp->state = *vp->val.integer;
X	    tp->stateSet = 1;
X
X	}
X
X	if (vp->name[ENTRY] == TCPCONN_LOCADDR){
X	    bcopy((char *)vp->val.string, (char *)&tp->localAddress, sizeof(u_long));
X	    tp->locAddrSet = 1;
X
X	}
X
X	if (vp->name[ENTRY] == TCPCONN_LOCPORT){
X	    tp->localPort = *vp->val.integer;
X	    tp->locPortSet = 1;
X
X	}
X
X	if (vp->name[ENTRY] == TCPCONN_REMADDR){
X	    bcopy((char *)vp->val.string, (char *)&tp->remoteAddress, sizeof(u_long));
X	    tp->remAddrSet = 1;
X
X	}
X
X	if (vp->name[ENTRY] == TCPCONN_REMPORT){
X	    tp->remotePort = *vp->val.integer;
X	    tp->remPortSet = 1;
X
X	}
X
X    }
X
X    for(first = 1, tp = tcpconn; tp != NULL; tp = tp->next){
X	if (!(tp->stateSet && tp->locAddrSet
X	    && tp->locPortSet && tp->remAddrSet && tp->remPortSet)){
X		printf("incomplete entry\n");
X		continue;
X	}
X	if (!aflag && tp->state == MIB_TCPCONNSTATE_LISTEN)
X		    continue;
X	if (first){
X	    printf("Active Internet Connections");
X	    if (aflag)
X		printf(" (including servers)");
X	    putchar('\n');
X	    printf("%-5.5s %-6.6s %-6.6s  %-22.22s %-22.22s %s\n",
X		    "Proto", "Recv-Q", "Send-Q",
X		    "Local Address", "Foreign Address", "(state)");
X	    first = 0;
X	}
X	printf("%-5.5s %6d %6d ", "tcp", 0, 0);
X	inetprint(&tp->localAddress, tp->localPort, "tcp");
X	inetprint(&tp->remoteAddress, tp->remotePort, "tcp");
X	if (tp->state < 1 || tp->state > TCP_NSTATES)
X	    printf(" %d", tp->state);
X	else
X	    printf(" %s", tcpstates[tp->state]);
X	putchar('\n');
X    }
X
X}
X
X
X/*
X * Dump UDP statistics structure.
X */
Xudp_stats()
X{
X    oid varname[MAX_NAME_LEN], *udpentry;
X    int varname_len;
X    struct variable_list *var;
X    int count;
X    struct stat_table *sp = udp_stattab;
X
X    bcopy((char *)oid_udpstats, (char *)varname, sizeof(oid_udpstats));
X    varname_len = sizeof(oid_udpstats) / sizeof(oid);
X    udpentry = varname + 7;
X    printf("udp:\n");
X    count = sizeof(udp_stattab) / sizeof (struct stat_table);
X    while (count--){
X	*udpentry = sp->entry;
X	var = getvarbyname(Session, varname, varname_len);
X	if (var){
X	    putchar('\t');
X	    printf(sp->description, *var->val.integer, plural((int)*var->val.integer));
X	    putchar('\n');
X	}
X	sp++;
X    }
X
X}
X
X/*
X * Dump TCP statistics structure.
X */
Xtcp_stats()
X{
X    oid varname[MAX_NAME_LEN], *tcpentry;
X    int varname_len;
X    struct variable_list *var;
X    int count;
X    struct stat_table *sp = tcp_stattab;
X
X    bcopy((char *)oid_tcpstats, (char *)varname, sizeof(oid_tcpstats));
X    varname_len = sizeof(oid_tcpstats) / sizeof(oid);
X    tcpentry = varname + 7;
X    printf("tcp:\n");
X    count = sizeof(tcp_stattab) / sizeof (struct stat_table);
X    while (count--){
X	*tcpentry = sp->entry;
X	var = getvarbyname(Session, varname, varname_len);
X	if (var){
X	    putchar('\t');
X	    printf(sp->description, *var->val.integer, plural((int)*var->val.integer));
X	    putchar('\n');
X	}
X	sp++;
X    }
X
X}
X
X/*
X * Dump IP statistics structure.
X */
Xip_stats()
X{
X    oid varname[MAX_NAME_LEN], *ipentry;
X    int varname_len;
X    struct variable_list *var;
X    int count;
X    struct stat_table *sp = ip_stattab;
X
X    bcopy((char *)oid_ipstats, (char *)varname, sizeof(oid_ipstats));
X    varname_len = sizeof(oid_ipstats) / sizeof(oid);
X    ipentry = varname + 7;
X    printf("ip:\n");
X    count = sizeof(ip_stattab) / sizeof (struct stat_table);
X    while (count--){
X	*ipentry = sp->entry;
X	var = getvarbyname(Session, varname, varname_len);
X	if (var){
X	    putchar('\t');
X	    printf(sp->description, *var->val.integer, plural((int)*var->val.integer));
X	    putchar('\n');
X	}
X	sp++;
X    }
X
X}
X
X/*
X * Dump ICMP statistics.
X */
Xicmp_stats()
X{
X    oid varname[MAX_NAME_LEN], *icmpentry;
X    int varname_len;
X    struct variable_list *var;
X    int count, first;
X    struct stat_table *sp;
X
X    bcopy((char *)oid_icmpstats, (char *)varname, sizeof(oid_icmpstats));
X    varname_len = sizeof(oid_icmpstats) / sizeof(oid);
X    icmpentry = varname + 7;
X    printf("icmp:\n");
X    sp = icmp_stattab;
X    count = sizeof(icmp_stattab) / sizeof (struct stat_table);
X    while (count--){
X	*icmpentry = sp->entry;
X	var = getvarbyname(Session, varname, varname_len);
X	if (var){
X	    putchar('\t');
X	    printf(sp->description, *var->val.integer, plural((int)*var->val.integer));
X	    putchar('\n');
X	}
X	sp++;
X    }
X
X    sp = icmp_outhistogram;
X    first = 1;
X    count = sizeof(icmp_outhistogram) / sizeof (struct stat_table);
X    while (count--){
X	*icmpentry = sp->entry;
X	var = getvarbyname(Session, varname, varname_len);
X	if (var && *var->val.integer != 0){
X	    if (first){
X		printf("\tOutput Histogram:\n");
X		first = 0;
X	    }
X	    printf("\t\t");
X	    printf(sp->description, *var->val.integer, plural((int)*var->val.integer));
X	    putchar('\n');
X	}
X	sp++;
X    }
X
X    sp = icmp_inhistogram;
X    first = 1;
X    count = sizeof(icmp_inhistogram) / sizeof (struct stat_table);
X    while (count--){
X	*icmpentry = sp->entry;
X	var = getvarbyname(Session, varname, varname_len);
X	if (var && *var->val.integer != 0){
X	    if (first){
X		printf("\tInput Histogram:\n");
X		first = 0;
X	    }
X	    printf("\t\t");
X	    printf(sp->description, *var->val.integer, plural((int)*var->val.integer));
X	    putchar('\n');
X	}
X	sp++;
X    }
X}
X
X/*
X * Pretty print an Internet address (net address + port).
X * If the nflag was specified, use numbers instead of names.
X */
Xinetprint(in, port, proto)
X	register struct in_addr *in;
X	u_short port; 
X	char *proto;
X{
X	struct servent *sp = 0;
X	char line[80], *cp, *index();
X	int width;
X
X	sprintf(line, "%.*s.", 16, inetname(*in));
X	cp = index(line, '\0');
X	if (!nflag && port)
X		sp = getservbyport((int)port, proto);
X	if (sp || port == 0)
X		sprintf(cp, "%.8s", sp ? sp->s_name : "*");
X	else
X		sprintf(cp, "%d", ntohs((u_short)port));
X	width = 22;
X	printf(" %-*.*s", width, width, line);
X}
X
X/*
X * Construct an Internet address representation.
X * If the nflag has been supplied, give 
X * numeric value, otherwise try for symbolic name.
X */
Xchar *
Xinetname(in)
X	struct in_addr in;
X{
X	register char *cp;
X	static char line[50];
X	struct hostent *hp;
X	struct netent *np;
X	static char domain[MAXHOSTNAMELEN + 1];
X	static int first = 1;
X
X	if (first && !nflag) {
X		first = 0;
X		if (gethostname(domain, MAXHOSTNAMELEN) == 0 &&
X		    (cp = index(domain, '.')))
X			(void) strcpy(domain, cp + 1);
X		else
X			domain[0] = 0;
X	}
X	cp = 0;
X	if (!nflag && in.s_addr != INADDR_ANY) {
X		u_long net = inet_netof(in);
X		u_long lna = inet_lnaof(in);
X
X		if (lna == INADDR_ANY) {
X			np = getnetbyaddr(net, AF_INET);
X			if (np)
X				cp = np->n_name;
X		}
X		if (cp == 0) {
X			hp = gethostbyaddr((char *)&in, sizeof (in), AF_INET);
X			if (hp) {
X				if ((cp = index(hp->h_name, '.')) &&
X				    !strcmp(cp + 1, domain))
X					*cp = 0;
X				cp = hp->h_name;
X			}
X		}
X	}
X	if (in.s_addr == INADDR_ANY)
X		strcpy(line, "*");
X	else if (cp)
X		strcpy(line, cp);
X	else {
X		in.s_addr = ntohl(in.s_addr);
X#define C(x)	((x) & 0xff)
X		sprintf(line, "%u.%u.%u.%u", C(in.s_addr >> 24),
X			C(in.s_addr >> 16), C(in.s_addr >> 8), C(in.s_addr));
X	}
X	return (line);
X}
END_OF_FILE
  if test 14067 -ne `wc -c <'netramet/src/apps/snmpnetstat/inet.c'`; then
    echo shar: \"'netramet/src/apps/snmpnetstat/inet.c'\" unpacked with wrong size!
  fi
  # end of 'netramet/src/apps/snmpnetstat/inet.c'
fi
echo shar: End of archive 12 \(of 25\).
cp /dev/null ark12isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 24 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0
exit 0 # Just in case...
