Newsgroups: comp.sources.misc
From: nevil@ccu1.aukuni.ac.nz (J Nevil Brownlee)
Subject: REPOST: v40i097: netramet - Network Traffic Accounting Meter, Part09/25
Message-ID: <1993Nov7.225933.15060@sparky.sterling.com>
X-Md4-Signature: 63b887cdeabb643ddec0069626da1b8e
Sender: kent@sparky.sterling.com (Kent Landfield)
Organization: Sterling Software
Date: Sun, 7 Nov 1993 22:59:33 GMT
Approved: kent@sparky.sterling.com

Submitted-by: nevil@ccu1.aukuni.ac.nz (J Nevil Brownlee)
Posting-number: Volume 40, Issue 97
Archive-name: netramet/part09
Environment: INET, UNIX, DOS

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# Contents:  netramet/doc/NeTraMet/NeTraMet.man.ps.B
#   netramet/src/meter/meter_pc.c
# Wrapped by kent@sparky on Tue Nov  2 18:17:07 1993
PATH=/bin:/usr/bin:/usr/ucb:/usr/local/bin:/usr/lbin:$PATH ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 9 (of 25)."'
if test -f 'netramet/doc/NeTraMet/NeTraMet.man.ps.B' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'netramet/doc/NeTraMet/NeTraMet.man.ps.B'\"
else
  echo shar: Extracting \"'netramet/doc/NeTraMet/NeTraMet.man.ps.B'\" \(47982 characters\)
  sed "s/^X//" >'netramet/doc/NeTraMet/NeTraMet.man.ps.B' <<'END_OF_FILE'
X413 2731 1021 (Column Blobs: Recovering Bulk Flow Data) 1021 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 2814 1848 (One vital element of an accounting meter is that it must be possible to retrieve flow data in) 1848 SB
X271 2868 1839 (an efficient manner.  SNMP can be inefficient for this purpose, since every value retrieved) 1839 SB
X271 2922 1823 (is accompanied by its object identifier.  To retrieve a long value \(four bytes\) can require a) 1823 SB
X271 2976 885 (further 12 or more bytes of object identifier!) 885 SB
X32 0 0 46 46 1 0 0 43 /Helvetica /font12 ANSIFont font
X271 3186 416 (                                ) 416 SB
X687 3186 416 (                                ) 416 SB
X1103 3186 78 (      ) 78 SB
X1171 3186 416 (                                ) 416 SB
X1587 3186 416 (                                ) 416 SB
X2003 3186 78 (      ) 78 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 3265 182 (10/15/93) 182 SB
X1115 3265 43 (-- ) 43 SB
X1158 3265 26 (4) 26 SB
X1184 3265 43 ( --) 43 SB
X1866 3265 205 (NeTraMet) 205 SB
XEJ RS
X%%PageTrailer
XSS
X0 0 18 13 783 1169 300 SM
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X0 0 0 fC
X271 256 1822 (NeTraMet solves this problem by using SNMP opaque objects to pass many values back) 1822 SB
X271 310 1286 (to NeMac as a single unit.  The MIB defines an object called a ) 1286 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X1557 310 265 (Column Blob) 265 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1822 310 272 ( to do this.  A) 272 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 364 265 (Column Blob) 265 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X536 364 1433 ( is a three-dimensional SNMP object, the dimensions being a 'column') 1433 SB
X271 418 209 (number,a ) 209 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X480 418 190 (LastTime) 190 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X670 418 267 ( value and a ) 267 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X937 418 211 (FlowIndex) 211 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1148 418 983 (.  NeMaC views the flow table as a matrix with a) 983 SB
X271 472 1792 (column for each flow attribute.  It can retrieve values of a particular attribute for all flows) 1792 SB
X271 526 1834 (active since a specified time, starting at a given row of the flow table and recalling column) 1834 SB
X271 580 713 (blobs in sequence down a column.) 713 SB
X271 659 1684 (NeMac takes this idea a little further.  The user specifies which attributes are to be) 1684 SB
X271 713 1756 (collected using a Format statement in the rule file.  NeMaC uses the Format to decide) 1756 SB
X271 767 1816 (which columns are required, then retrieves column blobs for each attribute starting at the) 1816 SB
X271 821 1692 (first row of the flow table.  The resulting collected flows are written to disk, then the) 1692 SB
X271 875 1583 (process is repeated starting at the row after the last collected row, and so on.) 1583 SB
X271 954 1809 (The maximum column blob size is chosen to fit into a 500-byte SNMP packet, which can) 1809 SB
X271 1008 1812 (carry from 50 to 60 attribute values \(together with their flow numbers\).  As an example, if) 1812 SB
X271 1062 1803 (we wish to collect 10 attributes for 1000 flows, this will require only 10 x 20 = 200 SNMP) 1803 SB
X271 1116 1733 (packets  To minimise network loading, NeMaC pauses for 90 milliseconds after each) 1733 SB
X271 1170 314 (SNMP request.) 314 SB
X32 0 0 58 58 0 0 0 54 /Helvetica-Bold /font13 ANSIFont font
Xgs 323 3426 0 0 CB
X271 1307 48 (3.) 48 SB
Xgr
X360 1307 35 (F) 37 SB
X397 1307 16 (l) 18 SB
X415 1307 35 (o) 37 SB
X452 1307 45 (w) 47 SB
X499 1307 16 ( ) 18 SB
X517 1307 42 (A) 44 SB
X561 1307 19 (t) 21 SB
X582 1307 19 (t) 21 SB
X603 1307 23 (r) 25 SB
X628 1307 16 (i) 18 SB
X646 1307 35 (b) 37 SB
X683 1307 35 (u) 37 SB
X720 1307 19 (t) 21 SB
X741 1307 32 (e) 34 SB
X775 1307 32 (s) 34 SB
X32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
Xgs 355 3426 0 0 CB
X271 1407 84 (3.1.) 84 SB
Xgr
X413 1407 295 (Introduction) 295 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 1490 1824 (A flow's attributes may be conveniently arranged into five groups: adjacent address, peer) 1824 SB
X271 1544 1680 (address, detail address, subscriber and general.  Since NeTraMet can't determine) 1680 SB
X271 1598 1793 (subscriber information merely by watching the packets passing by, subscriber attributes) 1793 SB
X271 1652 1690 (are not currently implemented.  A meter running in a network access server would,) 1690 SB
X271 1706 761 (however, be able to implement them.) 761 SB
X271 1785 1814 (Adjacent address attributes are described in the Ethernet Attributes section; they are the) 1814 SB
X271 1839 790 (same for all of the peer address types.) 790 SB
X271 1918 1842 (Peer and detail addresses, however, are different for each of the peer protocols. They are) 1842 SB
X271 1972 1759 (therefore explained together in the sections on IP, DECnet, Novell IPX and EtherTalk.) 1759 SB
X271 2026 1372 (The attributes which give a flow's peer and detail address type are ) 1372 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X1643 2026 348 (SourcePeerType) 348 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1991 2026 91 ( and) 91 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 2080 368 (SourceDetailType) 368 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X639 2080 39 (.  ) 39 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X678 2080 348 (SourcePeerType) 348 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1026 2080 104 ( and ) 104 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X1130 2080 296 (DestPeerType) 296 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1426 2080 456 ( are synonyms, as are) 456 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 2134 368 (SourceDetailType) 368 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X639 2134 104 ( and ) 104 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X743 2134 316 (DestDetailType) 316 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1059 2134 1033 (.  If the meter were implemented on a gateway the) 1033 SB
X271 2188 1721 (source- and dest- types could be different, but this is impossible on a single network) 1721 SB
X271 2242 191 (segment.) 191 SB
X271 2321 93 (The ) 93 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X364 2321 458 (SourcePeerTypeMask) 458 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X822 2321 104 ( and ) 104 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X926 2321 478 (SourceDetailTypeMask) 478 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1404 2321 82 ( \(or ) 82 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X1486 2321 406 (DestPeerTypeMask) 406 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1892 2321 91 ( and) 91 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 2375 426 (DestDetailTypeMask) 426 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X697 2375 1430 (\) attributes can be used to specify that the type fields are to be tallied.) 1430 SB
X271 2429 1487 (In this situation a mask value of 255 \(all bits on\) is the only sensible one.) 1487 SB
X32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
X271 2516 84 (3.2.) 84 SB
X413 2516 448 (Ethernet attributes) 448 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 2599 1685 (NeTraMet's initial implementation supports a single ethernet interface.  It therefore) 1685 SB
X271 2653 1672 (supports only one adjacent address type, i.e. ethernet, which is the same for both) 1672 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 2707 431 (SourceAdjacentType) 431 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X702 2707 104 ( and ) 104 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X806 2707 379 (DestAdjacentType) 379 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1185 2707 876 (.  Since there is only one adjacent address) 876 SB
X271 2761 192 (type, the ) 192 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X463 2761 394 (AdjacentTypeMask) 394 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X857 2761 653 ( attributes are not implemented.) 653 SB
X271 2840 93 (The ) 93 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X364 2840 498 (SourceAdjacentAddress) 498 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X862 2840 104 ( and ) 104 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X966 2840 446 (DestAdjacentAddress) 446 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1412 2840 546 ( attributes are the ethernet) 546 SB
X271 2894 1750 (addresses of the source and destination hosts.  These are written as six hexadecimal) 1750 SB
X271 2948 1828 (bytes separated by hyphens, e.g. 00-00-C0-00-13-A5.  They may be entered in this form,) 1828 SB
X271 3002 864 (or as six decimal bytes separated by dots.) 864 SB
X32 0 0 46 46 1 0 0 43 /Helvetica /font12 ANSIFont font
X271 3186 416 (                                ) 416 SB
X687 3186 416 (                                ) 416 SB
X1103 3186 78 (      ) 78 SB
X1171 3186 416 (                                ) 416 SB
X1587 3186 416 (                                ) 416 SB
X2003 3186 78 (      ) 78 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 3265 182 (10/15/93) 182 SB
X1115 3265 43 (-- ) 43 SB
X1158 3265 26 (5) 26 SB
X1184 3265 43 ( --) 43 SB
X1866 3265 205 (NeTraMet) 205 SB
XEJ RS
X%%PageTrailer
XSS
X0 0 18 13 783 1169 300 SM
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X0 0 0 fC
X271 256 438 (SourceAdjacentMask) 438 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X709 256 104 ( and ) 104 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X813 256 386 (DestAdjacentMask) 386 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1199 256 887 ( may be used in actions to tally fields within) 887 SB
X271 310 1645 (adjacent addresses.  They are written and entered in the same form as adjacent) 1645 SB
X271 364 227 (addresses.) 227 SB
X32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
X271 451 84 (3.2.) 84 SB
X413 451 291 (IP attributes) 291 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 534 348 (SourcePeerType) 348 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X619 534 104 ( and ) 104 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X723 534 296 (DestPeerType) 296 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1019 534 118 (   =  2) 118 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 613 415 (SourcePeerAddress) 415 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X686 613 104 ( and ) 104 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X790 613 363 (DestPeerAddress) 363 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 667 1733 (IP addresses of the flow's two hosts, written as four decimal bytes separated by dots) 1733 SB
X389 721 1078 (and entered in the same way, e.g. 130.216.234.237.) 1078 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 800 355 (SourcePeerMask) 355 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X626 800 104 ( and ) 104 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X730 800 303 (DestPeerMask) 303 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 854 1293 (Address masks for tallies; in the same form as peer addresses.) 1293 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 933 368 (SourceDetailType) 368 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X639 933 104 ( and ) 104 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X743 933 316 (DestDetailType) 316 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 987 1647 (Protocol field from the IP packet header.  The values of these are given in RFC ,) 1647 SB
X389 1041 857 (Assigned Numbers.  Common values are:) 857 SB
X500 1095 66 (1 =) 66 SB
X596 1095 115 (ICMP) 115 SB
X500 1149 66 (6 =) 66 SB
X596 1149 92 (TCP) 92 SB
X500 1203 66 (7 =) 66 SB
X596 1203 97 (UDP) 97 SB
X389 1257 978 (These names can be used for them in rule files.) 978 SB
X389 1337 117 (If the ) 117 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X506 1337 221 (DetailType) 221 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X727 1337 59 ( is ) 59 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Bold /font13 ANSIFont font
X786 1337 92 (TCP) 92 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X878 1337 67 ( or ) 67 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Bold /font13 ANSIFont font
X945 1337 97 (UDP) 97 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1042 1337 104 (, the ) 104 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X1146 1337 435 (SourceDetailAddress) 435 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1581 1337 104 ( and ) 104 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X1685 1337 383 (DestDetailAddress) 383 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 1391 1656 (contain the flow's source and destination port numbers.  Many of their values are) 1656 SB
X389 1445 1254 (given in RFC 1060, Assigned Numbers.  Common values are) 1254 SB
X474 1499 92 (20 =) 92 SB
X596 1499 225 (FTP-DATA) 225 SB
X1183 1499 92 (53 =) 92 SB
X1305 1499 184 (DOMAIN) 184 SB
X474 1553 92 (21 =) 92 SB
X596 1553 87 (FTP) 87 SB
X1157 1553 118 (119 =) 118 SB
X1305 1553 125 (NNTP) 125 SB
X474 1607 92 (23 =) 92 SB
X596 1607 177 (TELNET) 177 SB
X1157 1607 118 (123 =) 118 SB
X1305 1607 92 (NTP) 92 SB
X474 1661 92 (25 =) 92 SB
X596 1661 128 (SMTP) 128 SB
X1157 1661 118 (161 =) 118 SB
X1305 1661 133 (SNMP) 133 SB
X389 1715 1128 (These names can be also be used for them in rule files) 1128 SB
X389 1795 117 (If the ) 117 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X506 1795 221 (DetailType) 221 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X727 1795 59 ( is ) 59 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Bold /font13 ANSIFont font
X786 1795 115 (ICMP) 115 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X901 1795 130 (, then ) 130 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X1031 1795 435 (SourceDetailAddress) 435 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1466 1795 584 ( contains the ICMP type and) 584 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X389 1849 383 (DestDetailAddress) 383 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X772 1849 1321 ( contains the ICMP code.  For a description of these see Comer,) 1321 SB
X389 1903 1072 ("Internetworking with TCP/IP."  Common values are:) 1072 SB
X500 1957 66 (0 =) 66 SB
X596 1957 214 (echo reply) 214 SB
X500 2011 66 (8 =) 66 SB
X596 2011 269 (echo request) 269 SB
X500 2065 66 (3 =) 66 SB
X596 2065 494 (destination unreachable) 494 SB
X500 2119 66 (5 =) 66 SB
X596 2119 154 (redirect) 154 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 2198 375 (SourceDetailMask) 375 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X646 2198 104 ( and ) 104 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X750 2198 323 (DestDetailMask) 323 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 2252 98 (Like ) 98 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X487 2252 368 (SourceDetailType) 368 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X855 2252 1246 (, these are 16-bit fields, which are written as a single integer,) 1246 SB
X389 2306 1641 (and can be entered in this form or as two decimal bytes separated by a dot, e.g.) 1641 SB
X389 2360 379 (255.255 or 65535.) 379 SB
X32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
X271 2447 84 (3.3.) 84 SB
X421 2447 425 (DECnet attributes) 425 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 2530 348 (SourcePeerType) 348 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X619 2530 104 ( and ) 104 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X723 2530 296 (DestPeerType) 296 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1019 2530 118 (   =  5) 118 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 2609 415 (SourcePeerAddress) 415 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X686 2609 104 ( and ) 104 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X790 2609 363 (DestPeerAddress) 363 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 2663 1670 (DECnet Phase IV addresses of the flow's two hosts, written as four decimal bytes) 1670 SB
X389 2717 1710 (separated by dots and entered in the same way, e.g.4.1.150.0.  The first byte is the) 1710 SB
X389 2771 1673 (DECnet Area Number, the next two are the \(16-bit\) DECnet Host Number and the) 1673 SB
X389 2825 489 (last byte is always zero.) 489 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 2904 368 (SourceDetailType) 368 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X639 2904 104 ( and ) 104 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X743 2904 316 (DestDetailType) 316 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 2958 1306 (DECnet Phase IV protocol type, which has the following values:) 1306 SB
X32 0 0 46 46 1 0 0 43 /Helvetica /font12 ANSIFont font
X271 3186 416 (                                ) 416 SB
X687 3186 416 (                                ) 416 SB
X1103 3186 78 (      ) 78 SB
X1171 3186 416 (                                ) 416 SB
X1587 3186 416 (                                ) 416 SB
X2003 3186 78 (      ) 78 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 3265 182 (10/15/93) 182 SB
X1115 3265 43 (-- ) 43 SB
X1158 3265 26 (6) 26 SB
X1184 3265 43 ( --) 43 SB
X1866 3265 205 (NeTraMet) 205 SB
XEJ RS
X%%PageTrailer
XSS
X0 0 18 13 783 1169 300 SM
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X0 0 0 fC
X474 256 92 (14 =) 92 SB
X596 256 293 (data + discard) 293 SB
X1183 256 92 (11 =) 92 SB
X1305 256 232 (router hello) 232 SB
X500 310 66 (6 =) 66 SB
X596 310 91 (data) 91 SB
X1209 310 66 (9 =) 66 SB
X1305 310 289 (level 2 routing) 289 SB
X500 364 66 (7 =) 66 SB
X596 364 289 (level 1 routing) 289 SB
X1183 364 92 (13 =) 92 SB
X1305 364 293 (endnode hello) 293 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 443 435 (SourceDetailAddress) 435 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X706 443 104 ( and ) 104 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X810 443 383 (DestDetailAddress) 383 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 497 504 (Always zero for DECnet.) 504 SB
X32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
X271 584 84 (3.4.) 84 SB
X413 584 489 (Novell IPX attributes) 489 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 667 348 (SourcePeerType) 348 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X619 667 104 ( and ) 104 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X723 667 296 (DestPeerType) 296 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1019 667 118 (   =  6) 118 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 746 415 (SourcePeerAddress) 415 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X686 746 104 ( and ) 104 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X790 746 363 (DestPeerAddress) 363 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 800 1742 (IPX network numbers of the flow's two hosts, written as four decimal bytes separated) 1742 SB
X389 854 1685 (by dots and entered in the same way, e.g. 130.216.0.28.  Novell network numbers) 1685 SB
X389 908 1674 (are assigned by the network administrator; at the University of Auckland we use a) 1674 SB
X389 962 1023 (Novell Server's IP address as its network number.) 1023 SB
X389 1041 1588 (A full IPX host address is the combination of its network number and ethernet) 1588 SB
X389 1095 1719 (address.  Because the current implementation of NeTraMet limits peer addresses to) 1719 SB
X389 1149 1715 (a maximum of four bytes, it can in general only handle IPX network numbers.  For a) 1715 SB
X389 1203 1709 (host on the same network segment as its server the adjacent address provides that) 1709 SB
X389 1257 1562 (host's ethernet address but this is not the case for IPX packets from another) 1562 SB
X389 1311 1715 (segment, which have the adjacent address of the router through which they arrived.) 1715 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 1390 368 (SourceDetailType) 368 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X639 1390 104 ( and ) 104 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X743 1390 316 (DestDetailType) 316 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 1444 1316 (XNS protocol type.  Possible values are given in RFC 1060, e.g:) 1316 SB
X500 1498 66 (5 =) 66 SB
X596 1498 378 (sequenced packet) 378 SB
X500 1552 66 (4 =) 66 SB
X596 1552 352 (packet exchange) 352 SB
X500 1606 66 (1 =) 66 SB
X596 1606 384 (routing information) 384 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 1685 435 (SourceDetailAddress) 435 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X706 1685 104 ( and ) 104 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X810 1685 383 (DestDetailAddress) 383 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 1739 1178 (Source and destination IPX port numbers.  These include) 1178 SB
X422 1793 144 (1105 =) 144 SB
X596 1793 608 (NCP \(Netware Core Protocol\)) 608 SB
X422 1847 144 (1106 =) 144 SB
X596 1847 715 (SAP \(Service Advertising Protocol\)) 715 SB
X422 1901 144 (1107 =) 144 SB
X596 1901 708 (RIP \(Routing Information Protocol\)) 708 SB
X271 1980 1843 (Further details of Netware communications protocols are given "Netware Communications) 1843 SB
X271 2034 245 (Processes.") 245 SB
X32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
X271 2121 84 (3.5.) 84 SB
X413 2121 473 (EtherTalk attributes) 473 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 2204 348 (SourcePeerType) 348 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X619 2204 104 ( and ) 104 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X723 2204 296 (DestPeerType) 296 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1019 2204 118 (   =  7) 118 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 2283 415 (SourcePeerAddress) 415 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X686 2283 104 ( and ) 104 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X790 2283 363 (DestPeerAddress) 363 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 2337 1732 (AppleTalk addresses of the flow's two hosts, written as four decimal bytes separated) 1732 SB
X389 2391 1697 (by dots and entered in the same way, e.g. 0.129.251.0.  The first two bytes are the) 1697 SB
X389 2445 1698 (host's AppleTalk \(16-bit\) network number, the third is its node number \(dynamically) 1698 SB
X389 2499 1169 (assigned when it starts up\) and the fourth is always zero.) 1169 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 2578 368 (SourceDetailType) 368 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X639 2578 104 ( and ) 104 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X743 2578 316 (DestDetailType) 316 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 2632 1185 (AppleTalk DDP protocol type.  Some common values are:) 1185 SB
X500 2686 66 (1 =) 66 SB
X596 2686 130 (RTMP) 130 SB
X1209 2686 66 (5 =) 66 SB
X1305 2686 130 (RTMP) 130 SB
X500 2740 66 (2 =) 66 SB
X596 2740 95 (NBP) 95 SB
X1209 2740 66 (6 =) 66 SB
X1305 2740 72 (ZIP) 72 SB
X500 2794 66 (3 =) 66 SB
X596 2794 90 (ATP) 90 SB
X1209 2794 66 (7 =) 66 SB
X1305 2794 126 (ADSP) 126 SB
X500 2848 66 (4 =) 66 SB
X596 2848 62 (EP) 62 SB
X32 0 0 46 46 1 0 0 43 /Helvetica /font12 ANSIFont font
X271 3186 416 (                                ) 416 SB
X687 3186 416 (                                ) 416 SB
X1103 3186 78 (      ) 78 SB
X1171 3186 416 (                                ) 416 SB
X1587 3186 416 (                                ) 416 SB
X2003 3186 78 (      ) 78 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 3265 182 (10/15/93) 182 SB
X1115 3265 43 (-- ) 43 SB
X1158 3265 26 (7) 26 SB
X1184 3265 43 ( --) 43 SB
X1866 3265 205 (NeTraMet) 205 SB
XEJ RS
X%%PageTrailer
XSS
X0 0 18 13 783 1169 300 SM
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X0 0 0 fC
X271 256 435 (SourceDetailAddress) 435 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X706 256 104 ( and ) 104 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X810 256 383 (DestDetailAddress) 383 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 310 1677 (Source and destination AppleTalk socket numbers.  These are two-byte numbers;) 1677 SB
X389 364 1525 (the socket numbers are the low-order byte and the high-order byte is zero.) 1525 SB
X271 443 1542 (Details of the AppleTalk protocols are given in the book "Inside Macintosh.") 1542 SB
X32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
X271 530 84 (3.6.) 84 SB
X413 530 431 (General attributes) 431 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 613 1825 (General attributes are those which relate to a traffic flow itself, rather than to its end-point) 1825 SB
X271 667 1783 (addresses.  They may be collected from the meter and may be specified in actions, but) 1783 SB
X271 721 1087 (may not be used in rules.  General attributes include:) 1087 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 800 630 (SourceInterface, DestInterface) 630 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 854 1678 (Interfaces corresponding to the flow's source and destination adjacent addresses.) 1678 SB
X389 908 1250 (In the current implementation these always have the value 1.) 1250 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 987 211 (FlowIndex) 211 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 1041 1211 (\(1-origin\) index of the flow within NeTraMet's table of flows.) 1211 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 1120 262 (FlowRuleSet) 262 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 1174 1583 (Number of the rule set the meter was using when the flow was first observed.) 1583 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 1253 200 (FlowType) 200 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 1307 1323 (Type of the flow.  Values are: 1 = count, 2 = tally, 3 = aggregate.) 1323 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 1386 455 (ToOctets, FromOctets) 455 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 1440 1682 (Number of bytes observed in the 'to' \(source to destination\) and 'from' direction for) 1682 SB
X389 1494 180 (this flow.) 180 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 1573 427 (ToPDUs, FromPDUs) 427 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 1627 1731 (Number of packets observed in the 'to' \(source to destination\) and 'from' direction for) 1731 SB
X389 1681 180 (this flow.) 180 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 1760 191 (FirstTime) 191 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 1814 1706 (Time \(in 1/100 second ticks from the time the meter started executing\) at which this) 1706 SB
X389 1868 752 (flow was first observed by the meter.) 752 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 1947 190 (LastTime) 190 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 2001 1461 (Time \(units as above\) at which a packet was last observed for this flow.) 1461 SB
X32 0 0 58 58 0 0 0 54 /Helvetica-Bold /font13 ANSIFont font
X271 2138 32 (4) 34 SB
X305 2138 16 (.) 18 SB
X360 2138 35 (F) 37 SB
X397 2138 16 (l) 18 SB
X415 2138 35 (o) 37 SB
X452 2138 45 (w) 47 SB
X499 2138 16 ( ) 18 SB
X517 2138 42 (D) 44 SB
X561 2138 32 (a) 34 SB
X595 2138 19 (t) 21 SB
X616 2138 32 (a) 34 SB
X650 2138 16 ( ) 18 SB
X668 2138 35 (F) 37 SB
X705 2138 16 (i) 18 SB
X723 2138 16 (l) 18 SB
X741 2138 32 (e) 34 SB
X775 2138 32 (s) 34 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 2230 1290 (NeMaC produces files of flow data information with names like ) 1290 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X1561 2230 307 (ccu2.flows.007) 307 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1868 2230 260 (.  This would) 260 SB
X271 2284 1573 (be the seventh file of flow data collected from NeTraMet running on the host ) 1573 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X1844 2284 98 (ccu2) 98 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1942 2284 176 (.  Before) 176 SB
X271 2338 1732 (opening a flow data file NeMaC inspects its current working directory and selects the) 1732 SB
X271 2392 1219 (lowest sequence number not already used for this purpose.) 1219 SB
X271 2471 1773 (There are two kinds of records in a flow data file: flow records and information records.) 1773 SB
X271 2525 1860 (Each flow record is simply a sequence of attribute values separated by separators \(if these) 1860 SB
X271 2579 1834 (were specified - see the Format Statement section below\) or spaces, and terminated by a) 1834 SB
X271 2633 170 (newline.) 170 SB
X32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
X271 2720 84 (4.1.) 84 SB
X413 2720 492 (Information Records) 492 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 2803 1815 (Information records all start with a cross-hatch.  The file's first record begins with ##, and) 1815 SB
X271 2857 1792 (identifies the file as being a file of data from NeTraMet.  It records NeMaC's parameters) 1792 SB
X271 2911 810 (and the time this collection was started.) 810 SB
X271 2990 1841 (The file's second record begins with #Format: and is a copy of the Format statement used) 1841 SB
X271 3044 1843 (by NeMaC to collect the data.  Note that any separators specified in the Format statement) 1843 SB
X271 3098 1175 (appear in the data file directly, not as C-language strings.) 1175 SB
X32 0 0 46 46 1 0 0 43 /Helvetica /font12 ANSIFont font
X271 3186 416 (                                ) 416 SB
X687 3186 416 (                                ) 416 SB
X1103 3186 78 (      ) 78 SB
X1171 3186 416 (                                ) 416 SB
X1587 3186 416 (                                ) 416 SB
X2003 3186 78 (      ) 78 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 3265 182 (10/15/93) 182 SB
X1115 3265 43 (-- ) 43 SB
X1158 3265 26 (8) 26 SB
X1184 3265 43 ( --) 43 SB
X1866 3265 205 (NeTraMet) 205 SB
XEJ RS
X%%PageTrailer
XSS
X0 0 18 13 783 1169 300 SM
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X0 0 0 fC
X271 256 1860 (The rest of the file is a sequence of collected data sets.  Each of these starts with a #Time:) 1860 SB
X271 310 1847 (record, giving the time of day the collection was started, the meter name, and the range of) 1847 SB
X271 364 945 (meter times this collection represents.  These ) 945 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X1216 364 92 (from) 92 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1308 364 104 ( and ) 104 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X1412 364 39 (to) 39 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1451 364 347 ( times are meter ) 347 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X1798 364 184 (UpTimes) 184 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1982 364 88 (, i.e.) 88 SB
X271 418 1639 (they are times in hundredths of seconds since the meter commenced operation.) 1639 SB
X271 497 1767 (If meter statistics were requested, they appear in a #Stats: record following the #Time:) 1767 SB
X271 551 1804 (one.  The statistics are given as a list of variable names and corresponding values.  The) 1804 SB
X271 605 407 (variable names are:) 407 SB
X363 667 115 (aps =) 115 SB
X507 667 504 (average packets/second) 504 SB
X1214 667 91 (frc =) 91 SB
X1334 667 324 (flows recovered) 324 SB
X360 721 118 (apb =) 118 SB
X507 721 491 (average packet backlog) 491 SB
X1206 721 99 (gci =) 99 SB
X1334 721 755 (garbage collection interval \(seconds\)) 755 SB
X351 775 127 (mps =) 127 SB
X507 775 535 (maximum packets/second) 535 SB
X1198 775 107 (rpp =) 107 SB
X1334 775 521 (rules matched per packet) 521 SB
X348 829 130 (mpb =) 130 SB
X507 829 522 (maximum packet backlog) 522 SB
X1200 829 105 (tpp =) 105 SB
X1334 829 348 (tallies per packet) 348 SB
X379 883 99 (lsp =) 99 SB
X507 883 467 (number of packets lost) 467 SB
X1203 883 102 (cpt =) 102 SB
X1334 883 378 (compares per tally) 378 SB
X379 937 99 (avi =) 99 SB
X507 937 523 (average processor idle %) 523 SB
X1216 937 89 (tts =) 89 SB
X1334 937 505 (Total tally slots allocated) 505 SB
X364 991 114 (mni =) 114 SB
X507 991 456 (minimum processor %) 456 SB
X1203 991 115 (tsu = ) 115 SB
X1334 991 342 (Tally slots in use) 342 SB
X389 1045 89 (fiu =) 89 SB
X507 1045 242 (flows in use) 242 SB
X32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
X271 1132 84 (4.2.) 84 SB
X413 1132 531 (Sample Flow Data File) 531 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X301 1215 1798 (A sample flow data file appears below.  Most of the flow records have been deleted, but) 1798 SB
X301 1269 735 (lines of dots show where they were.) 735 SB
X32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
X330 1348 252 (##NeTraMe) 252 SB
X32 0 0 38 38 0 0 0 30 /Courier /font0 ANSIFont font
X582 1354 1449 (t v2.2:  -c300 -r rules.lan test_meter  4000 flows  starting at) 1449 SB
X330 1397 506 (12:31:27 Fri  1 Oct 93) 506 SB
X330 1437 1702 (#Format: flowruleset flowindex firsttime  sourcepeertype sourcepeeraddress) 1702 SB
X330 1477 1219 (destpeeraddress  topdus frompdus  tooctets fromoctets) 1219 SB
X330 1517 1495 (#Time: 12:31:27 Fri  1 Oct 93 130.216.14.251 Flows from 1 to 3642) 1495 SB
X330 1557 1748 (#Stats: aps=478 apb=11 mps=636 mpb=48 lsp=0 avi=97.3 mni = 93.4 fiu=44 frc=0) 1748 SB
X330 1597 1035 (gci=5 rpp=1.9 tpp=0.0 cpt=1.0 tts=1024 tsu=38) 1035 SB
X330 1637 1081 (1 2 13  5 31.32.0.0 33.34.0.0  1138 0  121824 0) 1081 SB
X330 1677 1081 (1 3 13  2 11.12.0.0 13.14.0.0  4215 0  689711 0) 1081 SB
X330 1717 1081 (1 4 13  7 41.42.0.0 43.34.0.0  1432 0  411712 0) 1081 SB
X330 1757 1104 (1 5 13  6 21.22.0.0 23.24.0.0  8243 0  4338744 0) 1104 SB
X330 1797 1150 (3 6 3560  2 130.216.14.0 130.216.3.0  0 10  0 1053) 1150 SB
X330 1837 1265 (3 7 3560  2 130.216.14.0 130.216.76.0  59 65  4286 3796) 1265 SB
X330 1877 1035 (3 8 3560  7 0.0.255.0 1.144.200.0  0 4  0 222) 1035 SB
X330 1917 1242 (3 9 3560  2 130.216.14.0 130.216.14.0  118 1  32060 60) 1242 SB
X330 1957 1311 (3 10 3560  6 130.216.0.28 130.216.0.192  782 1  344620 66) 1311 SB
X330 1997 1035 (3 11 3560  7 0.0.255.0 0.128.113.0  0 1  0 73) 1035 SB
X330 2037 1012 (3 12 3560  5 59.3.13.0 4.1.152.0  1 1  60 60) 1012 SB
X330 2077 1104 (3 13 3560  7 0.128.94.0 0.129.27.0  2 2  120 158) 1104 SB
X330 2117 1058 (3 14 3560  5 59.3.40.0 4.1.153.0  2 2  120 120) 1058 SB
X330 2157 943 (3 15 3560  5 0.0.0.0 4.1.153.0  0 1  0 60) 943 SB
X330 2197 1081 (3 16 3560  5 4.1.152.0 59.2.189.0  2 2  120 120) 1081 SB
X330 2237 713 (      .  .  .  .  .  .  .  .  .) 713 SB
X330 2292 1035 (3 42 3560  7 0.128.42.0 0.129.34.0  0 1  0 60) 1035 SB
X330 2332 1035 (3 43 3560  7 0.128.42.0 0.128.43.0  0 1  0 60) 1035 SB
X330 2372 1035 (3 44 3560  7 0.128.42.0 0.128.41.0  0 1  0 60) 1035 SB
X330 2412 1012 (3 45 3560  7 0.128.42.0 0.129.2.0  0 1  0 60) 1012 SB
X330 2452 1081 (3 46 3560  5 4.1.152.0 59.2.208.0  2 2  120 120) 1081 SB
X330 2492 1058 (3 47 3560  5 59.3.46.0 4.1.150.0  2 2  120 120) 1058 SB
X330 2532 1081 (3 48 3560  5 4.1.152.0 59.2.198.0  2 2  120 120) 1081 SB
X330 2572 966 (3 49 3560  5 0.0.0.0 59.2.120.0  0 1  0 60) 966 SB
X330 2612 1012 (3 50 3664  5 4.1.152.0 59.2.214.0  0 1  0 60) 1012 SB
X330 2652 943 (3 51 3664  5 0.0.0.0 4.2.142.0  0 1  0 60) 943 SB
X330 2692 1058 (3 52 3664  5 4.1.153.0 59.3.45.0  4 4  240 240) 1058 SB
X330 2732 1587 (#Time: 12:36:25 Fri  1 Oct 93 130.216.14.251 Flows from 3641 to 33420) 1587 SB
X330 2772 1679 (#Stats: aps=349 apb=16 mps=1357 mpb=537 lsp=0 avi=97.3 mni = 93.4 fiu=480) 1679 SB
X330 2812 1196 (frc=0 gci=5 rpp=2.4 tpp=1.2 cpt=1.2 tts=1024 tsu=328) 1196 SB
X330 2852 1150 (3 6 3560  2 130.216.14.0 130.216.3.0  0 21  0 2378) 1150 SB
X330 2892 1472 (3 7 3560  2 130.216.14.0 130.216.76.0  9586 7148  1111118 565274) 1472 SB
X330 2932 1081 (3 8 3560  7 0.0.255.0 1.144.200.0  0 26  0 1983) 1081 SB
X330 2972 1334 (3 9 3560  2 130.216.14.0 130.216.14.0  10596 1  2792846 60) 1334 SB
X330 3012 1380 (3 10 3560  6 130.216.0.28 130.216.0.192  16589 1  7878902 66) 1380 SB
X330 3052 1127 (3 11 3560  7 0.0.255.0 0.128.113.0  0 87  0 16848) 1127 SB
X330 3092 1150 (3 12 3560  5 59.3.13.0 4.1.152.0  20 20  1200 1200) 1150 SB
X32 0 0 46 46 1 0 0 43 /Helvetica /font12 ANSIFont font
X271 3186 416 (                                ) 416 SB
X687 3186 416 (                                ) 416 SB
X1103 3186 78 (      ) 78 SB
X1171 3186 416 (                                ) 416 SB
X1587 3186 416 (                                ) 416 SB
X2003 3186 78 (      ) 78 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 3265 182 (10/15/93) 182 SB
X1115 3265 43 (-- ) 43 SB
X1158 3265 26 (9) 26 SB
X1184 3265 43 ( --) 43 SB
X1866 3265 205 (NeTraMet) 205 SB
XEJ RS
X%%PageTrailer
XSS
X0 0 18 13 783 1169 300 SM
X32 0 0 38 38 0 0 0 30 /Courier /font0 ANSIFont font
X0 0 0 fC
X330 256 1173 (3 13 3560  7 0.128.94.0 0.129.27.0  15 14  900 1144) 1173 SB
X330 296 1150 (3 14 3560  5 59.3.40.0 4.1.153.0  38 38  2280 2280) 1150 SB
X330 336 1012 (3 15 3560  5 0.0.0.0 4.1.153.0  0 30  0 1800) 1012 SB
X330 376 1173 (3 16 3560  5 4.1.152.0 59.2.189.0  20 20  1200 1200) 1173 SB
X330 416 1012 (3 17 3560  5 0.0.0.0 59.2.141.0  0 11  0 660) 1012 SB
X330 456 713 (      .  .  .  .  .  .  .  .  .) 713 SB
X330 511 1104 (3 476 26162  7 0.129.113.0 0.128.37.0  0 1  0 82) 1104 SB
X330 551 1150 (3 477 27628  7 0.128.41.0 0.128.46.0  1 1  543 543) 1150 SB
X330 591 1173 (3 478 27732  7 0.128.211.0 0.128.46.0  1 1  543 543) 1173 SB
X330 631 1104 (3 479 31048  7 0.128.47.0 2.38.221.0  1 1  60 60) 1104 SB
X330 671 1196 (3 480 32717  2 202.14.100.0 130.216.76.0  0 4  0 240) 1196 SB
X330 711 1265 (3 481 32717  2 130.216.76.0 130.216.3.0  0 232  0 16240) 1265 SB
X330 751 1610 (#Time: 12:41:25 Fri  1 Oct 93 130.216.14.251 Flows from 33419 to 63384) 1610 SB
X330 791 1679 (#Stats: aps=415 apb=17 mps=1780 mpb=542 lsp=0 avi=97.3 mni = 93.4 fiu=567) 1679 SB
X330 831 1196 (frc=0 gci=5 rpp=1.8 tpp=1.0 cpt=1.3 tts=1024 tsu=372) 1196 SB
X330 871 1311 (3 6 3560  2 130.216.14.0 130.216.3.0  51 180  3079 138195) 1311 SB
X330 911 1541 (3 7 3560  2 130.216.14.0 130.216.76.0  21842 18428  2467693 1356570) 1541 SB
X330 951 1081 (3 8 3560  7 0.0.255.0 1.144.200.0  0 30  0 2282) 1081 SB
X330 991 1334 (3 9 3560  2 130.216.14.0 130.216.14.0  24980 1  5051834 60) 1334 SB
X330 1031 1380 (3 10 3560  6 130.216.0.28 130.216.0.192  20087 1  8800070 66) 1380 SB
X330 1071 1150 (3 11 3560  7 0.0.255.0 0.128.113.0  0 164  0 32608) 1150 SB
X330 1111 1150 (3 12 3560  5 59.3.13.0 4.1.152.0  41 41  2460 2460) 1150 SB
X330 1151 1150 (3 14 3560  5 59.3.40.0 4.1.153.0  82 82  4920 4920) 1150 SB
X330 1197 966 (3 15 3560  5 0.0.0.0 4.1.153.0  0 60  0 36) 966 SB
X32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
X1296 1191 56 (00) 56 SB
X32 0 0 38 38 0 0 0 30 /Courier /font0 ANSIFont font
X330 1240 713 (      .  .  .  .  .  .  .  .  .) 713 SB
X32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
X271 1313 84 (4.3.) 84 SB
X413 1313 462 (Flow Data Features) 462 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 1396 1080 (Several features of the Flow data are worthy of note:) 1080 SB
X32 0 0 46 46 0 0 0 46 /Symbol font
Xgs 351 3426 0 0 CB
X330 1472 21 (\267) 21 SB
Xgr
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 1475 1471 (Collection times overlap slightly between samples.  This allows for flows) 1471 SB
X389 1529 1522 (which were created after the collection started, and makes sure  that flows) 1522 SB
X389 1583 667 (are not missed from a collection.) 667 SB
X32 0 0 46 46 0 0 0 46 /Symbol font
Xgs 351 3426 0 0 CB
X330 1659 21 (\267) 21 SB
Xgr
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 1662 1563 (The rule set may change during a run.  The above shows flows from rule set) 1563 SB
X389 1716 1579 (1 - the default set - in the first collection, followed by the first flows created by) 1579 SB
X389 1770 1150 (rule set 3 \(which has just been downloaded by NeMaC\).) 1150 SB
X32 0 0 46 46 0 0 0 46 /Symbol font
Xgs 351 3426 0 0 CB
X330 1846 21 (\267) 21 SB
Xgr
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X389 1849 273 (FlowIndexes ) 273 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X662 1849 1144 (may be reused by the meter once their flows have been) 1144 SB
X389 1903 1162 (recovered by the garbage collector.  The combination of ) 1162 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X1551 1903 275 (FlowRuleSet,) 275 SB
X389 1957 224 (FlowIndex ) 224 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X613 1957 91 (and ) 91 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X704 1957 213 (StartTime ) 213 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X917 1957 781 (are needed to identify a flow uniquely.) 781 SB
X32 0 0 46 46 0 0 0 46 /Symbol font
Xgs 351 3426 0 0 CB
X330 2033 21 (\267) 21 SB
Xgr
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 2036 1548 (Packet and Byte counters are 32-bit unsigned integers, and are never reset) 1548 SB
X389 2090 1566 (by the meter.  Computing the counts occurring within a collection interval will) 1566 SB
X389 2144 1564 (require taking the difference between the collected count and its value when) 1564 SB
X389 2198 1595 (the flow was last collected.  Note that counter wrap-around can be allowed for) 1595 SB
X389 2252 1418 (by simply performing an unsigned subtraction and ignoring any carry.) 1418 SB
X32 0 0 46 46 0 0 0 46 /Symbol font
Xgs 351 3426 0 0 CB
X330 2328 21 (\267) 21 SB
Xgr
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X389 2331 1551 (In the sample flow data file above I have used double spaces as separators) 1551 SB
X389 2385 1564 (between the flow identifiers, peer addresses, pdu counts and packet counts.) 1564 SB
X32 0 0 58 58 0 0 0 54 /Helvetica-Bold /font13 ANSIFont font
X271 2522 32 (5) 34 SB
X305 2522 16 (.) 18 SB
X360 2522 55 (W) 57 SB
X417 2522 23 (r) 25 SB
X442 2522 16 (i) 18 SB
X460 2522 19 (t) 21 SB
X481 2522 16 (i) 18 SB
X499 2522 35 (n) 37 SB
X536 2522 35 (g) 37 SB
X573 2522 16 ( ) 18 SB
X591 2522 42 (R) 44 SB
X635 2522 35 (u) 37 SB
X672 2522 16 (l) 18 SB
X690 2522 32 (e) 34 SB
X724 2522 16 ( ) 18 SB
X742 2522 35 (F) 37 SB
X779 2522 16 (i) 18 SB
X797 2522 16 (l) 18 SB
X815 2522 32 (e) 34 SB
X849 2522 32 (s) 34 SB
X32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
X271 2622 84 (5.1.) 84 SB
X413 2622 295 (Introduction) 295 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 2705 44 (A ) 44 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X315 2705 162 (rule file ) 162 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X477 2705 1642 (is a file of ASCII text which contains information needed by an accounting meter) 1642 SB
X271 2759 1809 (and by a collector.  This includes a rule set, rule and action tables, a format specification) 1809 SB
X271 2813 712 (and a statistics request.  The term ) 712 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X983 2813 152 (rule set) 152 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X1135 2813 938 ( means the combination of a rule table and its) 938 SB
X271 2867 1836 (corresponding action table.  An accounting meter can have up to ten rule sets in memory,) 1836 SB
X271 2921 1607 (allowing its manager to switch between them simply by setting the value of the) 1607 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 2975 319 (CurrentRuleSet) 319 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X590 2975 283 ( MIB variable.) 283 SB
X32 0 0 46 46 1 0 0 43 /Helvetica /font12 ANSIFont font
X271 3186 416 (                                ) 416 SB
X687 3186 416 (                                ) 416 SB
X1103 3186 78 (      ) 78 SB
X1171 3186 416 (                                ) 416 SB
X1587 3186 416 (                                ) 416 SB
X2003 3186 78 (      ) 78 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X271 3265 182 (10/15/93) 182 SB
X1102 3265 43 (-- ) 43 SB
X1145 3265 52 (10) 52 SB
X1197 3265 43 ( --) 43 SB
X1866 3265 205 (NeTraMet) 205 SB
XEJ RS
X%%PageTrailer
XSS
X0 0 18 13 783 1169 300 SM
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X0 0 0 fC
X271 256 1836 (NeTraMet has one rule set built in; this is the default rule set, which is set number 1.  This) 1836 SB
X271 310 1747 (allows NeTraMet to be active as soon as it starts up, and it provides a default rule set) 1747 SB
X271 364 1853 (which it can use while other rule sets are downloaded by its manager.  The default rule set) 1853 SB
X271 418 703 (can't be changed by the manager.) 703 SB
X32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
X271 505 84 (5.2.) 84 SB
X413 505 375 (Rule file Syntax) 375 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X271 588 1706 (The syntax for rule files is given below in the form of railway diagrams, and detailed) 1706 SB
X271 642 1737 (examples are given in the following sections.  Note that NeMaC's parser is extremely) 1737 SB
X271 696 1699 (simple-minded - although it does a good job on valid rule files it has very poor error) 1699 SB
X271 750 190 (recovery!) 190 SB
X271 829 119 (Each ) 119 SB
X32 0 0 46 46 0 0 0 43 /Helvetica-Oblique /font19 ANSIFont font
X390 829 217 (statement ) 217 SB
X32 0 0 46 46 0 0 0 43 /Helvetica /font12 ANSIFont font
X607 829 1412 (in a rule file starts at the beginning of a line.  A cross-hatch character) 1412 SB
X271 883 1832 (marks the end of a line; all characters following a cross-hatch on a line are ignored by the) 1832 SB
X271 937 178 (scanner.) 178 SB
X271 1016 1804 (NeMaC's scanner looks for keywords, numbers and addresses.  Keywords are shown in) 1804 SB
X271 1070 1705 (the railway diagrams in upper case, but case is ignored by the scanner.  Keywords,) 1705 SB
X271 1124 1610 (including attribute names, must be given in full - abbreviations are not allowed.) 1610 SB
X0 lc
X0 lj
X0 0 0 pC
X6 4 SP
X255 255 255 fC
X/fm 256 def
X712 423 781 1241 B
X1 F
XS
Xn
X1 lc
X1 lj
X275 1325 M 1626 0 1 PP
XS
Xn
X32 0 0 50 50 0 0 0 41 /Courier-Bold /font9 ANSIFont font
X0 0 0 fC
X275 1203 300 (Rules File) 300 SB
X255 255 255 fC
X1869 1303 M -38 -19 35 -28 0 40 3 7 4 PP
X1 F
XS
Xn
X778 1394 M 713 0 1 PP
XS
Xn
X0 lc
X0 lj
X255 255 255 pC
X400 84 925 1350 B
X1 F
XS
Xn
X32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
X0 0 0 fC
X941 1373 364 (Rules section) 364 SB
X1 lc
X1 lj
X0 0 0 pC
X782 1482 M 712 0 1 PP
XS
Xn
X0 lc
X0 lj
X255 255 255 pC
X255 255 255 fC
X456 71 894 1444 B
X1 F
XS
Xn
X0 0 0 fC
X912 1458 420 (Actions section) 420 SB
X255 255 255 fC
X514 86 869 1272 B
X1 F
XS
Xn
X0 0 0 fC
X885 1295 476 (RuleSet statement) 476 SB
X1 lc
X1 lj
X0 0 0 pC
X816 1210 M 34 28 -31 22 -3 6 3 PP
XS
Xn
X0 lc
X0 lj
X255 255 255 pC
X255 255 255 fC
X615 83 822 1619 B
X1 F
XS
Xn
X0 0 0 fC
X847 1642 560 (Statistics statement) 560 SB
X1 lc
X1 lj
X0 0 0 pC
X782 1575 M 712 0 1 PP
XS
Xn
X0 lc
X0 lj
X255 255 255 pC
X255 255 255 fC
X497 87 878 1525 B
X1 F
XS
END_OF_FILE
  if test 47982 -ne `wc -c <'netramet/doc/NeTraMet/NeTraMet.man.ps.B'`; then
    echo shar: \"'netramet/doc/NeTraMet/NeTraMet.man.ps.B'\" unpacked with wrong size!
  else  
    PARTS="" 
    for I in A B C D ; do 
      if test -f netramet/doc/NeTraMet/NeTraMet.man.ps.$I ; then
        PARTS="${PARTS}${I}"  
      fi  
      if test "${PARTS}" = "ABCD" ; then  
        echo shar: Combining  \"'netramet/doc/NeTraMet/NeTraMet.man.ps'\" \(188008 characters\)
        cat netramet/doc/NeTraMet/NeTraMet.man.ps.[A-D] > 'netramet/doc/NeTraMet/NeTraMet.man.ps'
        if test 188008 -ne `wc -c <'netramet/doc/NeTraMet/NeTraMet.man.ps'`; then 
          echo shar: \"'netramet/doc/NeTraMet/NeTraMet.man.ps'\" combined with wrong size!  
        else  
          rm netramet/doc/NeTraMet/NeTraMet.man.ps.[A-D]  
        fi    
      fi    
    done  
  fi
  # end of 'netramet/doc/NeTraMet/NeTraMet.man.ps.B'
fi
if test -f 'netramet/src/meter/meter_pc.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'netramet/src/meter/meter_pc.c'\"
else
  echo shar: Extracting \"'netramet/src/meter/meter_pc.c'\" \(11885 characters\)
  sed "s/^X//" >'netramet/src/meter/meter_pc.c' <<'END_OF_FILE'
X/* 1407, Wed 6 Oct 93
X
X   METER_PC.C:  The AU accounting meter mainline;
X		   based on CMU's snmpd,
X		   PCIP's packet monitoring
X		   and Waterloo's TCP/IP.
X
X   Copyright (C) 1992,1993 by Nevil Brownlee,
X   Computer Centre,  University of Auckland */
X
X/*
X * snmpd.c - send snmp GET requests to a network entity.
X *
X */
X/***********************************************************
X	Copyright 1988, 1989 by Carnegie Mellon University
X
X                      All Rights Reserved
X
XPermission to use, copy, modify, and distribute this software and its 
Xdocumentation for any purpose and without fee is hereby granted, 
Xprovided that the above copyright notice appear in all copies and that
Xboth that copyright notice and this permission notice appear in 
Xsupporting documentation, and that the name of CMU not be
Xused in advertising or publicity pertaining to distribution of the
Xsoftware without specific, written prior permission.  
X
XCMU DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
XALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
XCMU BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
XANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
XWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
XARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
XSOFTWARE.
X******************************************************************/
X
X#include "ausnmp.h"
X#define PKTSNAP
X#include "pktsnap.h"
X#include "flowhash.h"
X
X#define APPLETALK
X
Xextern char version_descr[];  /* In met_vars.c */
Xextern char *communities[];  /* In snmp/snmpagnt.c */
X
X#include <dos.h>
X#include <alloc.h>
X#include <ctype.h>
X
X#include <sys/types.h>
X/* #include <netinet/in.h> AU */
X#include <stdio.h>
X/* #include <sys/socket.h>  AU */
X#include "tcp.h"
X
X#include <errno.h>
X
X#include "snmp.h"
X#include "snmpimpl.h"  /* AU */
X#include "asn1.h"
X
Xextern int errno;
Xint snmp_dump_packet = 0;
X
Xudp_Socket udpsock;
Xstatic udp_Socket *s;
Xint status;  /* For socket */
X
Xvoid init_snmp();
Xvoid receive();
Xvoid snmp_read();
X
Xvoid pkt_rcv_call2(handle, len, buffp)
Xunsigned int handle, len;
Xunsigned char far *buffp;
X{
X   unsigned char *buff = buffp;  /* TCP's buffers are in our data segment! */
X   struct pkt far *pp;
X
X   if (buff[0] == 0xFF && buff[1] == 0xFF && buff[2] == 0xFF &&
X	 buff[3] == 0xFF && buff[4] == 0xFF && buff[5] == 0xFF) {
X      if (buff[12] == 0x08 &&
X	    (buff[13] == 0x00 || buff[13] == 0x06 )) {  /* IP or ARP */
X	 buff[-2] = 1;  /* Ready for tcp/ip */
X	 }
X      else buff[-2] = 0;  /* Not for us; free the buffer */
X      }
X   else if (buff[5] == eth_addr[5] && buff[4] == eth_addr[4] &&
X	 buff[3] == eth_addr[3] && buff[2] == eth_addr[2] &&
X	 buff[1] == eth_addr[1] && buff[0] == eth_addr[0]) {
X      if (buff[12] == 0x08 &&
X	    (buff[13] == 0x00 || buff[13] == 0x06 )) {  /* IP or ARP */
X	 buff[-2] = 1;  /* Ready for tcp/ip */
X	 }
X      else buff[-2] = 0;  /* Not for us; free the buffer */
X      }
X   else buff[-2] = 0;  /* Not for us; free the buffer */
X
X   ++npackets;  nbytes += len;
X   if(((pproc - prcv) & pktmask) == 1) {  /* No pkts free, ignore the data */
X      ++lostpackets;
X      }
X   else {
X      pp = &pkts[prcv];
X      if (buff[12] == 0x08 && buff[13] == 0x00) pp->p_type = AT_IP;
X      else if (buff[12] <= maxpkthi) {  /* 802.3 */
X	 if (buff[14] == 0xFF && buff[15] == 0xFF) pp->p_type = AT_NOVELL;
X#ifdef APPLETALK
X	 else if (buff[14] == 0xAA && buff[15] == 0xAA) {  /* SNAP */
X	    if (buff[20] == 0x80 && buff[21] == 0x9B) pp->p_type = AT_ETHERTALK;
X	    else return;
X	    }
X#endif
X	 else return;
X	 }
X      else if (buff[12] == 0x60 && buff[13] == 0x03) pp->p_type = AT_DECNET;
X      else return;
X      pp->p_len = len;
X      qmove(&buffp[SNAPFROM], pp->p_data, SNAPLEN);
X      prcv = (prcv+1) & pktmask;
X      }
X   }
X
Xvoid main(argc, argv)
X    int	    argc;
X    char    *argv[];
X{
X    int	arg, c;
X    char cbuf[20], *ap;
X
X   sclear();
X   scpos(0,0);  printf(version_descr);
X   scpos(0,1);
X
X   maxpkt = 1024;
X   display_enabled = kb_enabled = 1;  /* Enabled by default */
X   mxflowsp1 = DFMXFLOWS+1;
X   /* Default (CMU) communities are:  0 = "public", 1 = "proxy",
X	 2 = "private", 3 = "regional", 4 = "core"
X      We only allow "public" and "private" by default */
X   communities[1] = communities[3] = communities[4] = "";
X   for (c = 0, arg = 1; arg < argc; ++arg) {
X      if (argv[arg][0] == '-') {
X	 switch (argv[arg][1]) {
X	 case 'd':
X	    snmp_dump_packet++;
X	    break;
X	 case 'f':
X	    ap = argv[arg]+2;
X	    if (*ap == NULL) ap = argv[++arg];
X	    mxflowsp1 = atoi(ap)+1;
X	    break;
X	 case 'k':
X	    kb_enabled = 0;  /* -k to disable keyboard */
X	    break;
X	 case 'p':
X	    ap = argv[arg]+2;
X	    if (*ap == NULL) ap = argv[++arg];
X	    maxpkt = atoi(ap);
X	    break;
X	 case 'r':
X	    for (;;) {
X	       if (c == 5) {
X                  printf("Max of 4 read communities allowed\n");
X                  exit(0);
X                  }
X	       communities[c++] = argv[++arg];
X	       if (c == 2) ++c;  /* 2 -> "private" */
X	       if (arg == argc-1 || argv[arg+1][0] == '-') break;
X               }
X	    break;
X	 case 's':
X	    display_enabled = 0;  /* -s to disable screen */
X	    break;
X	 case 'w':
X	    communities[2] = argv[++arg];  /* -w to set write community */
X	    break;
X	 default:
X	    printf("Invalid option: -%c\n", argv[arg][1]);
X	    exit(0);
X	    }
X	 }
X      }
X   pktmask = maxpkt-1;  maxpkthi = maxpkt/256;
X   pkts = (struct pkt far *)farmalloc((maxpkt+1) * sizeof(struct pkt));
X   pproc = prcv = 0;
X   au_monitor = 1;
X
X   sock_init();
X   printf("Running on %s",inet_ntoa(cbuf,gethostid()));
X
X   s = &udpsock;  /* myport        hisadr hisport */
X   if (!udp_open( s, SNMP_PORT,  0, 0,        0 )) {
X      puts("udp_open failed!\n");
X      exit(1);
X      }
X
X   init_snmp();
X   init_monitor();
X   receive();
X   }
X
Xvoid show_meter_time()
X{
X   char msg[60];
X   sprintf(msg,"%lu seconds since %02d%02d:%02d",
X      elapsed_sec, s_tod_h,s_tod_m,s_tod_s);
X   display_msg(0,msg);
X   }
X
Xunsigned int mxmonpkts = 400;  /* Max nbr of packets per pkt_monitor call */
Xunsigned int bkgi;  /* Seconds before next run of backgound process */
X#define BKG_INTERVAL  30  /* 30 seconds */
X
Xvoid zero_pkt_stats()
X{
X   npackets = nbytes = badpackets = nobufpackets = lostpackets =
X      stats_time = t_backlog = spackets = sbytes =
X      kilodummypackets = dummypacketrate = 0L;
X   mindummyrate = 100000000L;
X   pkt_backlog = max_pkt_backlog = max_pkt_rate =
X      dummypackets = mdpacketrate = 0;
X   clear_pkt_stats = 0;
X   }
X
Xvoid receive()
X{
X   unsigned char startup, ch, gci, p;
X   unsigned int k, n, x, sumx, minx, maxx, samples, ax;
X   char l_tod_s;  /* Last tod_s displayed on chart */
X   unsigned long pd, bd;
X   long tot = set_timeout(1);
X   struct pkt far *pkp;
X   unsigned char half_scale = 0;
X
X   startup = 1;
X   pproc = prcv;  /* Discard packets collected during initialisation */
X   for (;;) {
X      sock_tick(s, &status);
X      if ((n = sock_dataready(s)) != 0) {
X         snmp_read(n);
X         sock_close(s);
X         if (!udp_open( s, SNMP_PORT,  0, 0,        0 )) {
X            puts("udp_open failed!\n");
X            exit(1);
X            }
X	 }
X
X      k = (prcv-pproc) & pktmask;
X      if (k == 0) {  /* Build a dummy packet */
X	 pkp = &pkts[maxpkt];
X	 for (k = 0; k != SNAPLEN; ++k) pkp->p_data[k] = 0;
X	 pkt_monitor(pkp->p_data, 0, AT_DUMMY);
X	 }
X      else {
X	 if (k > pkt_backlog) pkt_backlog = k;
X	 for (k = mxmonpkts; pproc != prcv && k != 0; --k) {
X	    pkp = &pkts[pproc];
X	    pkt_monitor(pkp->p_data, pkp->p_len, pkp->p_type);
X	    pproc = (pproc+1) & pktmask;
X	    }
X	 }
X
X      if (chk_timeout(tot)) {
X	 tot = set_timeout(1);  /* 1 second */
X	 ++elapsed_sec;  set_tod();
X	 s_uptime = uptime();  /* Don't do this too often! */
X
X	 if (startup) {  /* Running now, initialise counters etc. */
X	    clear_pkt_stats = 1;
X	    minx = 100;  sumx = samples = maxx = 0;
X	    l_tod_s = -1;
X	    gci = gc_interval;  /* Garbage collect interval */
X	    bkgi = BKG_INTERVAL;  /* Background interval */
X	    startup = 0;
X	    }
X	 else {
X            if (--gci == 0) {
X	       garbage_collect();
X               gci = gc_interval;
X               }
X	    if (--bkgi == 0) {
X	       p = (unsigned long)nflows*100/(mxflowsp1-1);
X	       if (p > HighWaterMark) {  /* % flows in use */
X		  pd = s_uptime-InactivityTimeout;
X		  GarbageCollectTime += InactivityTimeout;
X		  if (GarbageCollectTime > pd) GarbageCollectTime = pd;
X		  }
X	       bkgi = BKG_INTERVAL;
X	       }
X	    pd = npackets-spackets;  bd = nbytes-sbytes;
X	    if (display_enabled) {
X   	       scpos(0,3);
X	       printf("q=%4d",pkt_backlog);
X	       scpos(23,3);
X	       printf("%02d%02d:%02d", tod_h,tod_m,tod_s);
X	       scpos(0,5);
X	       x = util_pc(pd,bd);  /* % utilisation */
X	       printf("p=%6lu, b=%10lu, u=%4d", pd,bd, x);
X	       sumx += x;  ++samples;
X	       if (x < minx) minx = x;
X	       if (x > maxx) maxx = x;
X	       if (tod_s != l_tod_s && tod_s%10 == 0) {
X	          if (samples) {  /* 30% in col 79 */
X                     ax = (sumx+(samples>>1))/samples;
X                     if (half_scale) 
X                        chart(41,0, 79,24, minx>>1,ax>>1,maxx>>1);
X		     else chart(41,0, 79,24, minx,ax,maxx);
X		     l_tod_s = tod_s;
X		     }
X	          minx = 100;  sumx = samples = maxx = 0;
X	          }
X               }
X	    }
X	 if (clear_pkt_stats) zero_pkt_stats();
X	 else {
X            ++stats_time;
X            if (pd > max_pkt_rate) max_pkt_rate = pd;
X            t_backlog += (unsigned long)pkt_backlog;
X	    if (pkt_backlog > max_pkt_backlog)
X	       max_pkt_backlog = pkt_backlog;
X	    if (dummypacketrate < mindummyrate) {
X	       mindummyrate = dummypacketrate;  mdpacketrate = pd;
X	       }
X	    }
X
X	 pkt_backlog = 0;  dummypacketrate = 0;
X	 spackets = npackets;  sbytes = nbytes;
X
X	 if (kb_enabled && kbhit()) {
X	    if ((ch = getch()) == 27) {  /* ESC */
X	       scpos(0,24);
X	       printf("\nShutting down\n");
X               exit(0);
X               }
X	    w_clear(0,24, 40,24);  scpos(0,24);
X	    switch (tolower(ch)) {
X	    case 'b':
X	       printf("bad=%lu, nobuf=%lu, lost=%lu",
X		  badpackets,nobufpackets,lostpackets);
X	       break;
X	    case 'h':
X	       half_scale = !half_scale;
X	       printf("Chart scale 0..%d \%",
X		  half_scale ? 60 : 30);
X	       break;
X	    case 'm':
X	       printf("%u near, %lu far bytes free",
X		  coreleft(),farcoreleft());
X	       break;
X	    case 'v':
X	       printf(version_descr);
X	       break;
X	    default:
X	       handle_kb(ch);
X	       break;
X	       }
X            }
X         }
X      }
X
Xsock_err:
X   switch (status) {
X   case 1 : /* foreign host closed */
X      exit(0);
X   case -1: /* timeout */
X      printf("\nConnection timed out!");
X      exit(1);
X   default: printf("Aborting");
X      exit(1);
X      }
X}
X
Xunsigned long snmp_peer_addr;
X
Xvoid snmp_read(length)
Xint length;
X{
X   int out_length;
X   u_char  packet[1500], outpacket[1500];
X   int count;
X   struct sockaddr from;
X   int fromlen = sizeof(struct sockaddr);
X   char snmp_peer_name[30];  /* name of host which sent the snmp request */
X   getpeername(s, &from,&fromlen);
X   snmp_peer_addr = from.s_ip;
X
X   sock_read(s, packet,length);
X
X   if (snmp_dump_packet) {
X      inet_ntoa(snmp_peer_name,from.s_ip);
X      printf("received %d bytes from %s:\n", length, snmp_peer_name);
X      for (count = 0; count < length; count++) {
X	 printf("%02X ", packet[count]);
X	 if ((count % 16) == 15) printf("\n");
X	 }
X      printf("\n\n");
X      }
X   out_length = 1500;
X   if (snmp_agent_parse(packet, length, outpacket, &out_length, from.s_ip)) {
X      if (snmp_dump_packet) {
X	 printf("sent %d bytes to %s:\n", out_length, snmp_peer_name);
X	 for (count = 0; count < out_length; count++) {
X	    printf("%02X ", outpacket[count]);
X	    if ((count % 16) == 15) printf("\n");
X	    }
X         printf("\n\n");
X	 }
X      sock_write( s, (char *)outpacket, out_length);
X      }
X   }
X
END_OF_FILE
  if test 11885 -ne `wc -c <'netramet/src/meter/meter_pc.c'`; then
    echo shar: \"'netramet/src/meter/meter_pc.c'\" unpacked with wrong size!
  fi
  # end of 'netramet/src/meter/meter_pc.c'
fi
echo shar: End of archive 9 \(of 25\).
cp /dev/null ark9isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 25 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0
exit 0 # Just in case...
exit 0 # Just in case...
