Newsgroups: comp.sources.misc
From: Raphael Manfredi <ram@acri.fr>
Subject: v39i027:  dist-3.0 - Configure script generator and related tools, Part23/28
Message-ID: <1993Aug20.131614.22275@sparky.sterling.com>
X-Md4-Signature: b2db63070686589f00dae438995936eb
Sender: kent@sparky.sterling.com (Kent Landfield)
Organization: Advanced Computer Research Institute, Lyon, France.
Date: Fri, 20 Aug 1993 13:16:14 GMT
Approved: kent@sparky.sterling.com

Submitted-by: Raphael Manfredi <ram@acri.fr>
Posting-number: Volume 39, Issue 27
Archive-name: dist-3.0/part23
Environment: UNIX, Perl, RCS

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# Contents:  bin/manicheck.man bin/packinit.man kit/README
#   kit/manifake.man mcon/Jmakefile mcon/U/Whoa.U mcon/U/cf_who.U
#   mcon/U/contains.U mcon/U/d_memcmp.U mcon/U/d_memcpy.U
#   mcon/U/d_memset.U mcon/U/d_msg.U mcon/U/d_perror.U
#   mcon/U/d_rusage.U mcon/U/d_shm.U mcon/U/d_stdstdio.U
#   mcon/U/d_su_chown.U mcon/U/i_unistd.U mcon/U/intsize.U
#   mcon/U/kernel.U mcon/U/lintlib.U mcon/U/perlpath.U
#   mcon/U/pidtype.U mcon/U/ptrsize.U mcon/U/sbrktype.U
#   mcon/files/dir.U mcon/files/file.U mcon/files/locate.U
#   pl/rcsargs.pl
# Wrapped by ram@soft208 on Wed Aug 18 14:42:25 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 23 (of 28)."'
if test -f 'bin/manicheck.man' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bin/manicheck.man'\"
else
  echo shar: Extracting \"'bin/manicheck.man'\" \(1376 characters\)
  sed "s/^X//" >'bin/manicheck.man' <<'END_OF_FILE'
X''' $Id: manicheck.man,v 3.0 1993/08/18 12:04:02 ram Exp $
X'''
X'''  Copyright (c) 1991-1993, Raphael Manfredi
X'''  
X'''  You may redistribute only under the terms of the Artistic Licence,
X'''  as specified in the README file that comes with the distribution.
X'''  You may reuse parts of this distribution only within the terms of
X'''  that same Artistic Licence; a copy of which may be found at the root
X'''  of the source tree for dist 3.0.
X'''
X''' $Log: manicheck.man,v $
X''' Revision 3.0  1993/08/18  12:04:02  ram
X''' Baseline for dist 3.0 netwide release.
X'''
X''' 
X.TH MANICHECK 1 ram
X.SH NAME
Xmanicheck \- check manifest accuracy
X.SH SYNOPSIS
X.B manicheck
X.SH DESCRIPTION
X.I Manicheck
Xcompares the files listed in your MANIFEST.new (or MANIFEST if that file
Xis not present) with the files within your distribution. It will report
Xfiles listed in the manifest but not present or files missing from your
Xmanifest file.
X.SH FILES
X.I Manicheck
Xproduces the following temporary files:
X.TP 20
X.PD 0
Xcheck.expected
Xlists filenames from manifest
X.TP
Xcheck.present
Xlists all potential source files
X.PD
X.PP
XIf MANIFEST is not 100% accurate, the following files may be created:
X.TP 20
X.PD 0
Xcheck.extra
Xfiles not listed in manifest
X.TP
Xcheck.want
Xfiles missing from manifest
X.PD
X.SH AUTHOR
XHarlan Stenn <harlan@mumps.pfcs.com>
X.SH "SEE ALSO"
Xmanifake(1), makedist(1), manilist(1).
END_OF_FILE
  if test 1376 -ne `wc -c <'bin/manicheck.man'`; then
    echo shar: \"'bin/manicheck.man'\" unpacked with wrong size!
  fi
  # end of 'bin/manicheck.man'
fi
if test -f 'bin/packinit.man' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bin/packinit.man'\"
else
  echo shar: Extracting \"'bin/packinit.man'\" \(1361 characters\)
  sed "s/^X//" >'bin/packinit.man' <<'END_OF_FILE'
X''' $Id: packinit.man,v 3.0 1993/08/18 12:04:06 ram Exp $
X'''
X'''  Copyright (c) 1991-1993, Raphael Manfredi
X'''  
X'''  You may redistribute only under the terms of the Artistic Licence,
X'''  as specified in the README file that comes with the distribution.
X'''  You may reuse parts of this distribution only within the terms of
X'''  that same Artistic Licence; a copy of which may be found at the root
X'''  of the source tree for dist 3.0.
X'''
X''' $Log: packinit.man,v $
X''' Revision 3.0  1993/08/18  12:04:06  ram
X''' Baseline for dist 3.0 netwide release.
X'''
X''' 
X.TH PACKINIT 1 ram
X.SH NAME
Xpackinit \- initialize or update your .package file
X.SH SYNOPSIS
X.B packinit
X.SH DESCRIPTION
X.B Packinit
Xwill create (or update) a \fI.package\fR file, so that all the
X.B dist
Xtools can be smart and know some basic things about your package,
Xsuch as its revision number, or the e-mail address of its maintainer.
X.PP
X.I Packinit
Xshould be run from the top level directory of your package, before
Xusing any other \fIdist\fR tool. Later on, you may rerun it to
Xupdate some of its values.
X.I Packinit
Xwill create a single file and leave the remaining of
Xyour directory undisturbed.
X.SH FILE
X.TP 15
X\&.package
XFile holding all the package-related values
X.SH AUTHORS
XLarry Wall <lwall@netlabs.com> (version 2.0)
X.br
XRaphael Manfredi <ram@acri.fr>
X.SH "SEE ALSO"
Xdist(1).
END_OF_FILE
  if test 1361 -ne `wc -c <'bin/packinit.man'`; then
    echo shar: \"'bin/packinit.man'\" unpacked with wrong size!
  fi
  # end of 'bin/packinit.man'
fi
if test -f 'kit/README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'kit/README'\"
else
  echo shar: Extracting \"'kit/README'\" \(1461 characters\)
  sed "s/^X//" >'kit/README' <<'END_OF_FILE'
XThis directory contains a rudimentary kit maker.
X
XN.B.: This must not be confused with the kit package, which is a set of shell
Xscripts for sending arbitrary files and directories by mail and unpacking them.
XOne could call kit a binary tarmailer. The kit package has been released
Xseparately from dist (posted on comp.sources.unix in 1991).
X
XLarry Wall said:
X
X	Depending on where you are going to send your kits you might prefer
X	to use Rich $alz's kit maker instead--it makes more robust kits
X	but assumes more about the target system.
X
XI say:
X
X	If you are using RCS 4.3, be sure to use makedist instead of your
X	own shell archiver, unless you do not use $Id, $Header or $Locker
X	markers. Moreover, makedist will take the latest checked in
X	revision intead of the working file, so that you archive a coherent
X	package even if you made some mods since the last patch.
X
XYou run makedist in the top level directory of your package and it uses
Xthe MANIFEST.new file to generate shar scripts of about 50000 bytes each.
X
XJust make sure MANIFEST.new contains everything you want, including any
XConfigure, config.h.SH, or patchlevel.h files. A prototype patchlevel.h
Xmay be found in ../gen/patchlevel.h. See the manpage for more details.
X
XIf you do not wish to build up shell archives but an up-to-date copy of
Xyour source tree, run someting like:
X
X	makedist -c dir
X
Xto build an up-to-date source tree in dir, which you can then archive using
Xyour own shell archiver.
END_OF_FILE
  if test 1461 -ne `wc -c <'kit/README'`; then
    echo shar: \"'kit/README'\" unpacked with wrong size!
  fi
  # end of 'kit/README'
fi
if test -f 'kit/manifake.man' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'kit/manifake.man'\"
else
  echo shar: Extracting \"'kit/manifake.man'\" \(1380 characters\)
  sed "s/^X//" >'kit/manifake.man' <<'END_OF_FILE'
X''' $Id: manifake.man,v 3.0 1993/08/18 12:04:33 ram Exp $
X'''
X'''  Copyright (c) 1991-1993, Raphael Manfredi
X'''  
X'''  You may redistribute only under the terms of the Artistic Licence,
X'''  as specified in the README file that comes with the distribution.
X'''  You may reuse parts of this distribution only within the terms of
X'''  that same Artistic Licence; a copy of which may be found at the root
X'''  of the source tree for dist 3.0.
X'''
X''' $Log: manifake.man,v $
X''' Revision 3.0  1993/08/18  12:04:33  ram
X''' Baseline for dist 3.0 netwide release.
X'''
X.TH MANIFAKE 1 ram
X.SH NAME
Xmanifake \- creates a MANIFEST.new out of a MANIFEST file
X.SH SYNOPSIS
X.B manifake
X.SH DESCRIPTION
X.I Manifake
Xis a real simpleminded program that takes a MANIFEST file, such as one
Xproduced by a shar program, and creates a MANIFEST.new file ready to be
Xused by all the dist programs. What it does is that all archive numbers
Xare removed and the optional leading comments up to a dashed-line are
Xthrown away.
X.PP
X.I Manifake
Xwill typically be used when converting an existing package
Xto use \fImetaconfig\fR or any other dist utility.
X.SH AUTHOR
XRaphael Manfredi <ram@acri.fr>
X.SH FILES
X.PD 0
X.TP 20
XMANIFEST
XOriginal manifest produced by some shar program
X.TP
XMANIFEST.new
XFaked manifest file, suitable for use by any dist programs.
X.PD
X.SH "SEE ALSO"
Xmakedist(1), metaconfig(1), pat(1).
END_OF_FILE
  if test 1380 -ne `wc -c <'kit/manifake.man'`; then
    echo shar: \"'kit/manifake.man'\" unpacked with wrong size!
  fi
  # end of 'kit/manifake.man'
fi
if test -f 'mcon/Jmakefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/Jmakefile'\"
else
  echo shar: Extracting \"'mcon/Jmakefile'\" \(1399 characters\)
  sed "s/^X//" >'mcon/Jmakefile' <<'END_OF_FILE'
X/*
X * Jmakefile for metaconfig
X */
X
X;# $Id: Jmakefile,v 3.0 1993/08/18 12:04:40 ram Exp $
X;#
X;#  Copyright (c) 1991-1993, Raphael Manfredi
X;#  
X;#  You may redistribute only under the terms of the Artistic Licence,
X;#  as specified in the README file that comes with the distribution.
X;#  You may reuse parts of this distribution only within the terms of
X;#  that same Artistic Licence; a copy of which may be found at the root
X;#  of the source tree for dist 3.0.
X;#
X;# $Log: Jmakefile,v $
X;# Revision 3.0  1993/08/18  12:04:40  ram
X;# Baseline for dist 3.0 netwide release.
X;#
X
XSetSubdirs(man)
XAllTarget(Glossary)
X
XGlossary: makegloss
X	chmod +x makegloss
X	./makegloss
X
XSimpleShellScriptTarget(makegloss)
X
X>PRIVLIB		/* We need the privlib definition */
X>SCRIPTDIR		/* As well as the script directory */
X
XMakeInstallDirectories($(PRIVLIB) $(PRIVLIB)/U)
XInstallNonExec(Glossary,$(PRIVLIB))
XInstallScript(makegloss,$(PRIVLIB))
XInstallMultipleFlags(U/^^*.U,$(PRIVLIB)/U,-m 444)	/* Escape C comment */
X
X/*
X * Build up dataloading versions of metalint, metaconfig and metaxref.
X */
X
X#define SimpleDataloadTarget(file,datafile) @!\
XAllTarget(datafile file) @!\
Xdatafile: file		@@\
X	$(TOP)/bin/perload -o file > $@		@@\
X	chmod +rx $@						@!\
X					@!\
XInstallScript(datafile,$(SCRIPTDIR))
X
XSimpleDataloadTarget(mconfig,metaconfig)
XSimpleDataloadTarget(mlint,metalint)
XSimpleDataloadTarget(mxref,metaxref)
X
END_OF_FILE
  if test 1399 -ne `wc -c <'mcon/Jmakefile'`; then
    echo shar: \"'mcon/Jmakefile'\" unpacked with wrong size!
  fi
  # end of 'mcon/Jmakefile'
fi
if test -f 'mcon/U/Whoa.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/Whoa.U'\"
else
  echo shar: Extracting \"'mcon/U/Whoa.U'\" \(1459 characters\)
  sed "s/^X//" >'mcon/U/Whoa.U' <<'END_OF_FILE'
X?RCS: $Id: Whoa.U,v 3.0 1993/08/18 12:05:19 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: Whoa.U,v $
X?RCS: Revision 3.0  1993/08/18  12:05:19  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?X: 
X?X: This unit produces a bit of shell code that must be dotted in in order
X?X: to warn the user in case a change into a variable is noticed.
X?X:	
X?X: To use this unit, $was must hold the old value that has changed. Upon
X?X: exit, the two variables $td and $tu are set to the correct value for
X?X: respectively defining or undefining a variable. For instance, if $vas was
X?X: $undef, but now $var is $define, after calling . whoa, you should use
X?X: eval "$var=\$tu" to finally set $var to the correct value. See unit Inlibc.
X?X: 
X?MAKE:Whoa: Myread hint
X?MAKE:	-pick add $@ %<
X?T:var was td tu
X: set up the script used to warn in case of inconsistency
Xcat <<'EOSC' >whoa
Xdflt=y
Xecho " "
Xecho "*** WHOA THERE!!! ***" >&4
Xecho "    The $hint value for \$$var on this machine was \"$was\"!" >&4
Xrp="    Keep the $hint value?"
X. ./myread
Xcase "$ans" in
Xy) td=$was; tu=$was;;
Xesac
XEOSC
X
END_OF_FILE
  if test 1459 -ne `wc -c <'mcon/U/Whoa.U'`; then
    echo shar: \"'mcon/U/Whoa.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/Whoa.U'
fi
if test -f 'mcon/U/cf_who.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/cf_who.U'\"
else
  echo shar: Extracting \"'mcon/U/cf_who.U'\" \(1463 characters\)
  sed "s/^X//" >'mcon/U/cf_who.U' <<'END_OF_FILE'
X?RCS: $Id: cf_who.U,v 3.0 1993/08/18 12:05:32 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: cf_who.U,v $
X?RCS: Revision 3.0  1993/08/18  12:05:32  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?X:
X?X: Oldconfig dependency is there to ensure computation occurs after old values
X?X: from config.sh have been loaded, so that we can supersede them.
X?X:
X?MAKE:cf_time cf_by: date Oldconfig
X?MAKE:	-pick add $@ %<
X?S:cf_time:
X?S:	Holds the output of the "date" command when the configuration file was
X?S:	produced. This is used to tag both config.sh and config_h.SH.
X?S:.
X?S:cf_by:
X?S:	Login name of the person who ran the Configure script and answered the
X?S:	questions. This is used to tag both config.sh and config_h.SH.
X?S:.
X: who configured the system
Xcf_time=`$date 2>&1`
X?X: Leave a white space between first two '(' for ksh. The sub-shell is needed
X?X: on some machines to avoid the error message when logname is not found; e.g.
X?X: on SUN-OS 3.2, (logname || whoami) would not execute whoami if logname was
X?X: not found. Sigh!
Xcf_by=`( (logname) 2>/dev/null || whoami) 2>&1`
X
END_OF_FILE
  if test 1463 -ne `wc -c <'mcon/U/cf_who.U'`; then
    echo shar: \"'mcon/U/cf_who.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/cf_who.U'
fi
if test -f 'mcon/U/contains.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/contains.U'\"
else
  echo shar: Extracting \"'mcon/U/contains.U'\" \(1433 characters\)
  sed "s/^X//" >'mcon/U/contains.U' <<'END_OF_FILE'
X?RCS: $Id: contains.U,v 3.0 1993/08/18 12:05:35 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: contains.U,v $
X?RCS: Revision 3.0  1993/08/18  12:05:35  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:contains: Nothing
X?MAKE:	-pick add $@ %<
X?S:contains:
X?S:	This variable holds the command to do a grep with a proper return
X?S:	status.  On most sane systems it is simply "grep".  On insane systems
X?S:	it is a grep followed by a cat followed by a test.  This variable
X?S:	is primarily for the use of other Configure units.
X?S:.
X: Some greps do not return status, grrr.
Xecho "grimblepritz" >grimble
Xif grep blurfldyick grimble >/dev/null 2>&1 ; then
X	contains=contains
Xelif grep grimblepritz grimble >/dev/null 2>&1 ; then
X	contains=grep
Xelse
X	contains=contains
Xfi
Xrm -f grimble
X: the following should work in any shell
Xcase "$contains" in
Xcontains*)
X	echo " "
X	echo "AGH!  Grep doesn't return a status.  Attempting remedial action."
X	cat >contains <<'EOSS'
Xgrep "$1" "$2" >.greptmp && cat .greptmp && test -s .greptmp
XEOSS
Xchmod +x contains
Xesac
X
END_OF_FILE
  if test 1433 -ne `wc -c <'mcon/U/contains.U'`; then
    echo shar: \"'mcon/U/contains.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/contains.U'
fi
if test -f 'mcon/U/d_memcmp.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_memcmp.U'\"
else
  echo shar: Extracting \"'mcon/U/d_memcmp.U'\" \(1373 characters\)
  sed "s/^X//" >'mcon/U/d_memcmp.U' <<'END_OF_FILE'
X?RCS: $Id: d_memcmp.U,v 3.0 1993/08/18 12:06:33 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_memcmp.U,v $
X?RCS: Revision 3.0  1993/08/18  12:06:33  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_memcmp: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_memcmp:
X?S:	This variable conditionally defines the HAS_MEMCMP symbol, which
X?S:	indicates to the C program that the memcmp() routine is available
X?S:	to compare blocks of memory.
X?S:.
X?C:HAS_MEMCMP (MEMCMP):
X?C:	This symbol, if defined, indicates that the memcmp routine is available
X?C:	to compare blocks of memory. You should always use bcmp() instead of
X?C:	memcmp() because bcmp is remaped to memcmp if necessary. This means
X?C:	that a memcmp() routine must be provided in case HAS_MEMCMP is not
X?C:	defined and no bcmp() is found, but you just have to check for this
X?C:	HAS_MEMCMP symbol to conditionally implement it.
X?C:.
X?H:#$d_memcmp HAS_MEMCMP	/**/
X?H:.
X?LINT:set d_memcmp
X: see if memcmp exists
Xset memcmp d_memcmp
Xeval $inlibc
X
END_OF_FILE
  if test 1373 -ne `wc -c <'mcon/U/d_memcmp.U'`; then
    echo shar: \"'mcon/U/d_memcmp.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_memcmp.U'
fi
if test -f 'mcon/U/d_memcpy.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_memcpy.U'\"
else
  echo shar: Extracting \"'mcon/U/d_memcpy.U'\" \(1375 characters\)
  sed "s/^X//" >'mcon/U/d_memcpy.U' <<'END_OF_FILE'
X?RCS: $Id: d_memcpy.U,v 3.0 1993/08/18 12:06:34 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_memcpy.U,v $
X?RCS: Revision 3.0  1993/08/18  12:06:34  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_memcpy: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_memcpy:
X?S:	This variable conditionally defines the HAS_MEMCPY symbol, which
X?S:	indicates to the C program that the memcpy() routine is available
X?S:	to copy blocks of memory.
X?S:.
X?C:HAS_MEMCPY (MEMCPY):
X?C:	This symbol, if defined, indicates that the memcpy routine is available
X?C:	to copy blocks of memory. You should always use bcopy() instead of
X?C:	memcpy() because bcopy is remaped to memcpy if necessary. This means
X?C:	that a memcpy() routine must be provided in case HAS_MEMCPY is not
X?C:	defined and no bcopy() is found, that is to say you must provided
X?C:	your own version if and only if HAS_MEMCPY is not found.
X?C:.
X?H:#$d_memcpy HAS_MEMCPY	/**/
X?H:.
X?LINT:set d_memcpy
X: see if memcpy exists
Xset memcpy d_memcpy
Xeval $inlibc
X
END_OF_FILE
  if test 1375 -ne `wc -c <'mcon/U/d_memcpy.U'`; then
    echo shar: \"'mcon/U/d_memcpy.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_memcpy.U'
fi
if test -f 'mcon/U/d_memset.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_memset.U'\"
else
  echo shar: Extracting \"'mcon/U/d_memset.U'\" \(1384 characters\)
  sed "s/^X//" >'mcon/U/d_memset.U' <<'END_OF_FILE'
X?RCS: $Id: d_memset.U,v 3.0 1993/08/18 12:06:36 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_memset.U,v $
X?RCS: Revision 3.0  1993/08/18  12:06:36  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_memset: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_memset:
X?S:	This variable conditionally defines the HAS_MEMSET symbol, which
X?S:	indicates to the C program that the memset() routine is available
X?S:	to set blocks of memory.
X?S:.
X?C:HAS_MEMSET (MEMSET):
X?C:	This symbol, if defined, indicates that the memset routine is available
X?C:	to set blocks of memory. You should always use bzero() instead of
X?C:	memset() because bzero is remaped to memset if necessary. This means
X?C:	that a memset() routine must be provided in case HAS_MEMSET is not
X?C:	defined and no bzero() is found. In other words, you must provide your
X?C:	own copy whenever HAS_MEMSET is not defined, but call bzero().
X?C:.
X?H:#$d_memset HAS_MEMSET	/**/
X?H:.
X?LINT:set d_memset
X: see if memset exists
Xset memset d_memset
Xeval $inlibc
X
END_OF_FILE
  if test 1384 -ne `wc -c <'mcon/U/d_memset.U'`; then
    echo shar: \"'mcon/U/d_memset.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_memset.U'
fi
if test -f 'mcon/U/d_msg.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_msg.U'\"
else
  echo shar: Extracting \"'mcon/U/d_msg.U'\" \(1404 characters\)
  sed "s/^X//" >'mcon/U/d_msg.U' <<'END_OF_FILE'
X?RCS: $Id: d_msg.U,v 3.0 1993/08/18 12:06:37 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_msg.U,v $
X?RCS: Revision 3.0  1993/08/18  12:06:37  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_msg: test d_msgctl d_msgget d_msgsnd d_msgrcv Setvar Findhdr
X?MAKE:	-pick add $@ %<
X?S:d_msg:
X?S:	This variable conditionally defines the HAS_MSG symbol, which
X?S:	indicates that the entire msg*(2) library is present.
X?S:.
X?C:HAS_MSG:
X?C:	This symbol, if defined, indicates that the entire msg*(2) library is
X?C:	supported (IPC mechanism based on message queues).
X?C:.
X?H:#$d_msg HAS_MSG		/**/
X?H:.
X?T:h_msg
X?LINT:set d_msg
X: see how much of the 'msg*(2)' library is present.
Xh_msg=true
Xecho " "
Xcase "$d_msgctl$d_msgget$d_msgsnd$d_msgrcv" in
X*"$undef"*) h_msg=false;;
Xesac
X: we could also check for sys/ipc.h ...
Xif $h_msg && $test `./findhdr sys/msg.h`; then
X	echo "You have the full msg*(2) library." >&4
X	val="$define"
Xelse
X	echo "You don't have the full msg*(2) library." >&4
X	val="$undef"
Xfi
Xset d_msg
Xeval $setvar
X
END_OF_FILE
  if test 1404 -ne `wc -c <'mcon/U/d_msg.U'`; then
    echo shar: \"'mcon/U/d_msg.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_msg.U'
fi
if test -f 'mcon/U/d_perror.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_perror.U'\"
else
  echo shar: Extracting \"'mcon/U/d_perror.U'\" \(1402 characters\)
  sed "s/^X//" >'mcon/U/d_perror.U' <<'END_OF_FILE'
X?RCS: $Id: d_perror.U,v 3.0 1993/08/18 12:06:45 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_perror.U,v $
X?RCS: Revision 3.0  1993/08/18  12:06:45  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_perror: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_perror:
X?S:	This variable conditionally remaps perror to a null action and
X?S:	defines the symbol HAS_PERROR, which indicates to the C program
X?S:	that the perror() routine is not available to print system
X?S:	error messages.
X?S:.
X?C:HAS_PERROR:
X?C:	This symbol, if defined, indicates that the perror() routine is
X?C:	available to print system error messages. If not defined, you should
X?C:	use your own diagnostic routine...
X?C:.
X?C:perror:
X?C:	This symbol is maped to null if the  perror() routine is not
X?C:	available to print system error messages.
X?C:.
X?H:#$d_perror HAS_PERROR		/**/
X?H:?%<:#ifndef HAS_PERROR
X?H:?%<:#define perror(s)	;		/* mapped to a null statement */
X?H:?%<:#endif
X?H:.
X?LINT:set d_perror
X: see if perror exists
Xset perror d_perror
Xeval $inlibc
X
END_OF_FILE
  if test 1402 -ne `wc -c <'mcon/U/d_perror.U'`; then
    echo shar: \"'mcon/U/d_perror.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_perror.U'
fi
if test -f 'mcon/U/d_rusage.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_rusage.U'\"
else
  echo shar: Extracting \"'mcon/U/d_rusage.U'\" \(1395 characters\)
  sed "s/^X//" >'mcon/U/d_rusage.U' <<'END_OF_FILE'
X?RCS: $Id: d_rusage.U,v 3.0 1993/08/18 12:06:57 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_rusage.U,v $
X?RCS: Revision 3.0  1993/08/18  12:06:57  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?X:	We may need to include <sys/resource.h> and <sys/time.h> FIXME
X?X:INC: i_sysresrc i_systime
X?MAKE:d_rusage: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_rusage (d_getrusg):
X?S:	This variable conditionally defines the HAS_GETRUSAGE symbol, which
X?S:	indicates that the getrusage() routine exists.  The getrusage() routine
X?S:	supports sub-second accuracy for process cpu accounting. You may need
X?S:	to include <sys/resource.h> and <sys/time.h>.
X?S:.
X?C:HAS_GETRUSAGE (RUSAGE GETRUSAGE):
X?C:	This symbol, if defined, indicates that the getrusage() routine is
X?C:	available to get process statistics with a sub-second accuracy.
X?C:	Inclusion of <sys/resource.h> and <sys/time.h> may be necessary.
X?C:.
X?H:#$d_rusage HAS_GETRUSAGE		/**/
X?H:.
X?LINT:set d_rusage
X: see if getrusage exists
Xset getrusage d_rusage
Xeval $inlibc
X
END_OF_FILE
  if test 1395 -ne `wc -c <'mcon/U/d_rusage.U'`; then
    echo shar: \"'mcon/U/d_rusage.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_rusage.U'
fi
if test -f 'mcon/U/d_shm.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_shm.U'\"
else
  echo shar: Extracting \"'mcon/U/d_shm.U'\" \(1360 characters\)
  sed "s/^X//" >'mcon/U/d_shm.U' <<'END_OF_FILE'
X?RCS: $Id: d_shm.U,v 3.0 1993/08/18 12:07:17 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_shm.U,v $
X?RCS: Revision 3.0  1993/08/18  12:07:17  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_shm: test d_shmctl d_shmget d_shmat d_shmdt Setvar Findhdr
X?MAKE:	-pick add $@ %<
X?S:d_shm:
X?S:	This variable conditionally defines the HAS_SHM symbol, which
X?S:	indicates that the entire shm*(2) library is present.
X?S:.
X?C:HAS_SHM:
X?C:	This symbol, if defined, indicates that the entire shm*(2) library is
X?C:	supported.
X?C:.
X?H:#$d_shm HAS_SHM		/**/
X?H:.
X?T:h_shm
X?LINT:set d_shm
X: see how much of the 'shm*(2)' library is present.
Xh_shm=true
Xecho " "
Xcase "$d_shmctl$d_shmget$d_shmat$d_shmdt" in
X*"$undef"*) h_shm=false;;
Xesac
X: we could also check for sys/ipc.h ...
Xif $h_shm && $test `./findhdr sys/shm.h`; then
X	echo "You have the full shm*(2) library." >&4
X	val="$define"
Xelse
X	echo "You don't have the full shm*(2) library." >&4
X	val="$undef"
Xfi
Xset d_shm
Xeval $setvar
X
END_OF_FILE
  if test 1360 -ne `wc -c <'mcon/U/d_shm.U'`; then
    echo shar: \"'mcon/U/d_shm.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_shm.U'
fi
if test -f 'mcon/U/d_stdstdio.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_stdstdio.U'\"
else
  echo shar: Extracting \"'mcon/U/d_stdstdio.U'\" \(1386 characters\)
  sed "s/^X//" >'mcon/U/d_stdstdio.U' <<'END_OF_FILE'
X?RCS: $Id: d_stdstdio.U,v 3.0 1993/08/18 12:07:31 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_stdstdio.U,v $
X?RCS: Revision 3.0  1993/08/18  12:07:31  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_stdstdio: contains Setvar Findhdr
X?MAKE:	-pick add $@ %<
X?S:d_stdstdio:
X?S:	This variable conditionally defines USE_STD_STDIO if this system
X?S:	has a FILE structure declaring _ptr and _cnt in stdio.h.
X?S:.
X?C:USE_STD_STDIO (STDSTDIO):
X?C:	This symbol is defined if this system has a FILE structure declaring
X?C:	_ptr and _cnt in stdio.h.
X?C:.
X?H:#$d_stdstdio USE_STD_STDIO 	/**/
X?H:.
X?T:xxx
X?LINT:set d_stdstdio
X: see if stdio is really std
Xecho " "
Xxxx=`./findhdr stdio.h`
Xif $contains 'char.*_ptr;' "$xxx" >/dev/null 2>&1 ; then
X	if $contains '_cnt;' "$xxx" >/dev/null 2>&1 ; then
X		echo "Your stdio is pretty std." >&4
X		val="$define"
X	else
X		echo "Your stdio isn't very std." >&4
X		val="$undef"
X	fi
Xelse
X	echo "Your stdio isn't very std." >&4
X	val="$undef"
Xfi
Xset d_stdstdio
Xeval $setvar
X
END_OF_FILE
  if test 1386 -ne `wc -c <'mcon/U/d_stdstdio.U'`; then
    echo shar: \"'mcon/U/d_stdstdio.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_stdstdio.U'
fi
if test -f 'mcon/U/d_su_chown.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_su_chown.U'\"
else
  echo shar: Extracting \"'mcon/U/d_su_chown.U'\" \(1391 characters\)
  sed "s/^X//" >'mcon/U/d_su_chown.U' <<'END_OF_FILE'
X?RCS: $Id: d_su_chown.U,v 3.0 1993/08/18 12:07:40 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_su_chown.U,v $
X?RCS: Revision 3.0  1993/08/18  12:07:40  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_su_chown: Csym Setvar
X?MAKE:	-pick add $@ %<
X?S:d_su_chown (d_rootchown):
X?S:	This variable conditionally defines the SU_CHOWN symbol, which
X?S:	indicates to the C program that only root can chown() the owner
X?S:	of a file.
X?S:.
X?C:SU_CHOWN (ROOT_CHOWN):
X?C:	This symbol, if defined, indicates that the system allows only root
X?C:	can change the owner of a file with chown().
X?C:.
X?H:#$d_su_chown SU_CHOWN	/**/
X?H:.
X?LINT:set d_su_chown
X: see if 'chown()' is restricted.
X: but not too hard, as it is late and I am tired. -- HMS
Xecho " "
Xif set setreuid val -f d_su_chown; eval $csym; $val; then
X	echo 'It looks like only root can chown() the owner of a file.' >&4
X	val="$define"
Xelse
X	echo 'It looks like root or the owner can chown() a file away.' >&4
X	val="$undef"
Xfi
Xset d_su_chown
Xeval $setvar
X
END_OF_FILE
  if test 1391 -ne `wc -c <'mcon/U/d_su_chown.U'`; then
    echo shar: \"'mcon/U/d_su_chown.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_su_chown.U'
fi
if test -f 'mcon/U/i_unistd.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/i_unistd.U'\"
else
  echo shar: Extracting \"'mcon/U/i_unistd.U'\" \(1005 characters\)
  sed "s/^X//" >'mcon/U/i_unistd.U' <<'END_OF_FILE'
X?RCS: $Id: i_unistd.U,v 3.0 1993/08/18 12:08:46 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: i_unistd.U,v $
X?RCS: Revision 3.0  1993/08/18  12:08:46  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:i_unistd: Inhdr
X?MAKE:	-pick add $@ %<
X?S:i_unistd:
X?S:	This variable conditionally defines the I_UNISTD symbol, and indicates
X?S:	whether a C program should include <unistd.h>.
X?S:.
X?C:I_UNISTD:
X?C:	This symbol, if defined, indicates to the C program that it should
X?C:	include <unistd.h>.
X?C:.
X?H:#$i_unistd I_UNISTD		/**/
X?H:.
X?LINT:set i_unistd
X: see if this is a unistd.h system
Xset unistd.h i_unistd
Xeval $inhdr
X
END_OF_FILE
  if test 1005 -ne `wc -c <'mcon/U/i_unistd.U'`; then
    echo shar: \"'mcon/U/i_unistd.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/i_unistd.U'
fi
if test -f 'mcon/U/intsize.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/intsize.U'\"
else
  echo shar: Extracting \"'mcon/U/intsize.U'\" \(1451 characters\)
  sed "s/^X//" >'mcon/U/intsize.U' <<'END_OF_FILE'
X?RCS: $Id: intsize.U,v 3.0 1993/08/18 12:08:52 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: intsize.U,v $
X?RCS: Revision 3.0  1993/08/18  12:08:52  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:intsize: cat rm Myread +cc +ccflags
X?MAKE:	-pick add $@ %<
X?S:intsize:
X?S:	This variable contains the value of the INTSIZE symbol,
X?S:	which indicates to the C program how many bytes there are
X?S:	in an integer.
X?S:.
X?C:INTSIZE:
X?C:	This symbol contains the size of an int, so that the C preprocessor
X?C:	can make decisions based on it.
X?C:.
X?H:#define INTSIZE $intsize		/**/
X?H:.
X: check for length of integer
Xecho " "
Xcase "$intsize" in
X'')
X	echo "Checking to see how big your integers are..." >&4
X	$cat >try.c <<'EOCP'
X#include <stdio.h>
Xmain()
X{
X	printf("%d\n", sizeof(int));
X}
XEOCP
X	if $cc $ccflags try.c -o try >/dev/null 2>&1 ; then
X		dflt=`./try`
X	else
X		dflt='4'
X		echo "(I can't seem to compile the test program.  Guessing...)"
X	fi
X	;;
X*)
X	dflt="$intsize"
X	;;
Xesac
Xrp="What is the size of an integer (in bytes)?"
X. ./myread
Xintsize="$ans"
X$rm -f try.c try
X
END_OF_FILE
  if test 1451 -ne `wc -c <'mcon/U/intsize.U'`; then
    echo shar: \"'mcon/U/intsize.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/intsize.U'
fi
if test -f 'mcon/U/kernel.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/kernel.U'\"
else
  echo shar: Extracting \"'mcon/U/kernel.U'\" \(1366 characters\)
  sed "s/^X//" >'mcon/U/kernel.U' <<'END_OF_FILE'
X?RCS: $Id: kernel.U,v 3.0 1993/08/18 12:08:54 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: kernel.U,v $
X?RCS: Revision 3.0  1993/08/18  12:08:54  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:kernel: Getfile test
X?MAKE:	-pick add $@ %<
X?S:kernel:
X?S:	This variable becomes the (fully rooted) path name of the kernel.
X?S:.
X: find the name of the kernel.
Xecho " "
Xcase "$kernel" in
X'')
X	if $test -r /unix; then
X		dflt=/unix
X	elif $test -r /vmunix; then
X		dflt=/vmunix
X	elif $test -r /xenix; then
X		dflt=/xenix
X	elif $test -r /mach; then
X		dflt=/mach
X	elif $test -r /dgux; then
X		dflt=/dgux
X	elif $test -r /hp-ux; then
X		dflt=/hp-ux
X	elif $test -r /syst; then
X		dflt=/syst
X	elif $test -r /arix; then
X		dflt=/arix
X	elif $test -r /irix; then
X		dflt=/arix
X	else
X		dflt='unknown'
X		set X /*x
X		shift
X		case $# in
X		1)
X			if $test -r "$1"; then
X				dflt="$1"
X			fi
X			;;
X		esac
X	fi
X	;;
X*)
X	dflt="$kernel"
X	;;
Xesac
Xfn=f
Xrp='What is the name of your kernel?'
X. ./getfile
Xkernel="$ans"
X
END_OF_FILE
  if test 1366 -ne `wc -c <'mcon/U/kernel.U'`; then
    echo shar: \"'mcon/U/kernel.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/kernel.U'
fi
if test -f 'mcon/U/lintlib.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/lintlib.U'\"
else
  echo shar: Extracting \"'mcon/U/lintlib.U'\" \(1398 characters\)
  sed "s/^X//" >'mcon/U/lintlib.U' <<'END_OF_FILE'
X?RCS: $Id: lintlib.U,v 3.0 1993/08/18 12:09:05 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: lintlib.U,v $
X?RCS: Revision 3.0  1993/08/18  12:09:05  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:lintlib lintlibexp: Getfile Loc Oldconfig
X?MAKE:	-pick add $@ %<
X?S:lintlib:
X?S:	This variable holds the name of the directory in which the user wants
X?S:	to put public lint-library files for the package in question.  It is
X?S:	most often a local directory such as /usr/local/lib/lint. Programs using
X?S:	this variable must be prepared to deal with ~name expansion.
X?S:.
X?S:lintlibexp:
X?S:	This variable is the same as the lintlib variable, but is filename
X?S:	expanded at configuration time, for convenient use in your makefiles.
X?S:.
X: determine where public lint libraries go
Xcase "$lintlib" in
X'') dflt=`./loc . "." /usr/local/lib/lint /usr/lib/lint /usr/lib`;;
X*) dflt="$lintlib" ;;
Xesac
Xecho " "
Xfn=d~
Xrp='Where do you want to put the public lint libraries?'
X. ./getfile
Xlintlib="$ans"
Xlintlibexp="$ansexp"
X
END_OF_FILE
  if test 1398 -ne `wc -c <'mcon/U/lintlib.U'`; then
    echo shar: \"'mcon/U/lintlib.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/lintlib.U'
fi
if test -f 'mcon/U/perlpath.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/perlpath.U'\"
else
  echo shar: Extracting \"'mcon/U/perlpath.U'\" \(1359 characters\)
  sed "s/^X//" >'mcon/U/perlpath.U' <<'END_OF_FILE'
X?RCS: $Id: perlpath.U,v 3.0 1993/08/18 12:09:32 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: perlpath.U,v $
X?RCS: Revision 3.0  1993/08/18  12:09:32  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?X:
X?X: The purpose of this unit is to locate perl good enough to construct a #!
X?X:
X?MAKE:perlpath: Getfile Oldconfig Loc perl
X?MAKE:	-pick add $@ %<
X?S:perlpath:
X?S:	This variable contains the eventual value of the PERLPATH symbol,
X?S:	which contains the absolute location of the perl interpeter.
X?S:.
X?C:PERLPATH:
X?C:	This symbol contains the absolute location of the perl interpeter.
X?C:.
X?H:#define PERLPATH "$perlpath"		/**/
X?H:.
X?T:_perl
X?LINT:use perl
X: determine perl absolute location
Xcase "$perlpath" in
X'')
X	if test -f /usr/bin/perl; then
X		dflt=/usr/bin/perl
X	else
X		case "$_perl" in
X		*/*) dflt="$_perl";;
X		*) dflt=/usr/bin/perl;;
X		esac
X	fi
X	;;
X*)  dflt="$perlpath"
X	;;
Xesac
Xecho " "
Xfn=f~/
Xrp="Where is perl located on your system?"
X. ./getfile
Xperlpath="$ans"
X
END_OF_FILE
  if test 1359 -ne `wc -c <'mcon/U/perlpath.U'`; then
    echo shar: \"'mcon/U/perlpath.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/perlpath.U'
fi
if test -f 'mcon/U/pidtype.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/pidtype.U'\"
else
  echo shar: Extracting \"'mcon/U/pidtype.U'\" \(1388 characters\)
  sed "s/^X//" >'mcon/U/pidtype.U' <<'END_OF_FILE'
X?RCS: $Id: pidtype.U,v 3.0 1993/08/18 12:09:33 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: pidtype.U,v $
X?RCS: Revision 3.0  1993/08/18  12:09:33  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:pidtype: Myread Oldconfig contains Findhdr
X?MAKE:	-pick add $@ %<
X?S:pidtype:
X?S:	This variable defines PIDTYPE to be something like pid_t, int, 
X?S:	ushort, or whatever type is used to declare process ids in the kernel.
X?S:.
X?C:Pid_t (PIDTYPE):
X?C:	This symbol holds the type used to declare process ids in the kernel.
X?C:	It can be int, uint, pid_t, etc... It may be necessary to include
X?C:	<sys/types.h> to get any typedef'ed information.
X?C:.
X?H:#define Pid_t $pidtype		/* PID type */
X?H:.
X: see what type pids are declared as in the kernel
Xcase "$pidtype" in
X'')
X	if $contains 'pid_t;' `./findhdr sys/types.h` >/dev/null 2>&1 ; then
X		dflt='pid_t';
X	else
X		dflt="int"
X	fi
X	;;
X*)  dflt="$pidtype";;
Xesac
Xecho " "
Xrp="What type are process ids on this system declared as?"
X. ./myread
Xpidtype="$ans"
X
END_OF_FILE
  if test 1388 -ne `wc -c <'mcon/U/pidtype.U'`; then
    echo shar: \"'mcon/U/pidtype.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/pidtype.U'
fi
if test -f 'mcon/U/ptrsize.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/ptrsize.U'\"
else
  echo shar: Extracting \"'mcon/U/ptrsize.U'\" \(1451 characters\)
  sed "s/^X//" >'mcon/U/ptrsize.U' <<'END_OF_FILE'
X?RCS: $Id: ptrsize.U,v 3.0 1993/08/18 12:09:37 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: ptrsize.U,v $
X?RCS: Revision 3.0  1993/08/18  12:09:37  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:ptrsize: cat rm Myread +cc +ccflags
X?MAKE:	-pick add $@ %<
X?S:ptrsize:
X?S:	This variable contains the value of the PTRSIZE symbol, which
X?S:	indicates to the C program how many bytes there are in a pointer.
X?S:.
X?C:PTRSIZE:
X?C:	This symbol contains the size of a pointer, so that the C preprocessor
X?C:	can make decisions based on it.
X?C:.
X?H:#define PTRSIZE $ptrsize		/**/
X?H:.
X: check for length of pointer
Xecho " "
Xcase "$ptrsize" in
X'')
X	echo "Checking to see how big your pointers are..." >&4
X	$cat >try.c <<'EOCP'
X#include <stdio.h>
Xmain()
X{
X	printf("%d\n", sizeof(char *));
X}
XEOCP
X	if $cc $ccflags try.c -o try >/dev/null 2>&1 ; then
X		dflt=`./try`
X	else
X		dflt='4'
X		echo "(I can't seem to compile the test program.  Guessing...)"
X	fi
X	;;
X*)
X	dflt="$ptrsize"
X	;;
Xesac
Xrp="What is the size of a pointer (in bytes)?"
X. ./myread
Xptrsize="$ans"
X$rm -f try.c try
X
END_OF_FILE
  if test 1451 -ne `wc -c <'mcon/U/ptrsize.U'`; then
    echo shar: \"'mcon/U/ptrsize.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/ptrsize.U'
fi
if test -f 'mcon/U/sbrktype.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/sbrktype.U'\"
else
  echo shar: Extracting \"'mcon/U/sbrktype.U'\" \(1418 characters\)
  sed "s/^X//" >'mcon/U/sbrktype.U' <<'END_OF_FILE'
X?RCS: $Id: sbrktype.U,v 3.0 1993/08/18 12:09:43 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: sbrktype.U,v $
X?RCS: Revision 3.0  1993/08/18  12:09:43  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:sbrktype: Myread Oldconfig Loc contains Findhdr
X?MAKE:	-pick add $@ %<
X?S:sbrktype:
X?S:	This variable defines sbrktype to be something like caddr_t, char *, 
X?S:	or whatever type is used to declare sbrk() in the kernel.
X?S:.
X?C:Caddr_t (SBRKTYPE):
X?C:	This symbol holds the type of a core address. It is inteded to be used
X?C:	to safely declare the return type of system calls like sbrk(). It might
X?C:	be necessary to include <sys/types.h> as well.
X?C:.
X?H:#define Caddr_t $sbrktype	/* <core address> type */
X?H:.
X: see what type sbrk is declared as in the kernel
Xcase "$sbrktype" in
X'')
X	if $contains 'caddr_t;' `./findhdr sys/types.h` >/dev/null 2>&1 ; then
X		dflt='caddr_t';
X	else
X		dflt='char *';
X	fi
X	;;
X*)  dflt="$sbrktype"
X	;;
Xesac
Xecho " "
Xrp="What is the return type of sbrk() on this system?"
X. ./myread
Xsbrktype="$ans"
X
END_OF_FILE
  if test 1418 -ne `wc -c <'mcon/U/sbrktype.U'`; then
    echo shar: \"'mcon/U/sbrktype.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/sbrktype.U'
fi
if test -f 'mcon/files/dir.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/files/dir.U'\"
else
  echo shar: Extracting \"'mcon/files/dir.U'\" \(1394 characters\)
  sed "s/^X//" >'mcon/files/dir.U' <<'END_OF_FILE'
X?RCS: $Id: dir.U,v 3.0 1993/08/18 12:10:06 ram Exp $
X?RCS:
X?RCS:  Copyright (c) 1991-1993, Raphael Manfredi
X?RCS:  
X?RCS:  You may redistribute only under the terms of the Artistic Licence,
X?RCS:  as specified in the README file that comes with the distribution.
X?RCS:  You may reuse parts of this distribution only within the terms of
X?RCS:  that same Artistic Licence; a copy of which may be found at the root
X?RCS:  of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: dir.U,v $
X?RCS: Revision 3.0  1993/08/18  12:10:06  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:<DIR> <DIR>exp: Oldconfig Getfile
X?MAKE:	-pick add $@ %<
X?S:<DIR>:
X?S:	Where <DIR> files are located. The name may have ~ on the front.
X?S:.
X?S:<DIR>exp:
X?S:	This is the same as the <DIR> variable, but is filename expanded
X?S:	so that later Configure units can look at the <DIR> directory if desired.
X?S:.
X?C:<%DIR>:
X?C:	The directory where <DIR> files are located. The name may have ~ on
X?C:	the front so the C program must be prepared to do ~ expansion.
X?C:.
X?C:<%DIR>_EXP:
X?C:	The same as <DIR>, but ~name expantion has been done by Configure.
X?C:.
X?H:#define <%DIR> "$<DIR>"		/**/
X?H:#define <%DIR>_EXP "$<DIR>exp"		/**/
X?H:.
X: locate <DIR> directory
Xecho " "
Xcase "$<DIR>" in
X'')
X	dflt=<DFLT>
X	;;
X*)  dflt="$<DIR>";;
Xesac
Xfn=d~
Xrp='Where is the <DIR> directory?'
X. getfile
X<DIR>="$ans"
X<DIR>exp="$ansexp"
X
END_OF_FILE
  if test 1394 -ne `wc -c <'mcon/files/dir.U'`; then
    echo shar: \"'mcon/files/dir.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/files/dir.U'
fi
if test -f 'mcon/files/file.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/files/file.U'\"
else
  echo shar: Extracting \"'mcon/files/file.U'\" \(1386 characters\)
  sed "s/^X//" >'mcon/files/file.U' <<'END_OF_FILE'
X?RCS: $Id: file.U,v 3.0 1993/08/18 12:10:06 ram Exp $
X?RCS:
X?RCS:  Copyright (c) 1991-1993, Raphael Manfredi
X?RCS:  
X?RCS:  You may redistribute only under the terms of the Artistic Licence,
X?RCS:  as specified in the README file that comes with the distribution.
X?RCS:  You may reuse parts of this distribution only within the terms of
X?RCS:  that same Artistic Licence; a copy of which may be found at the root
X?RCS:  of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: file.U,v $
X?RCS: Revision 3.0  1993/08/18  12:10:06  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:<FILE> <FILE>exp: Oldconfig Getfile
X?MAKE:	-pick add $@ %<
X?S:<FILE>:
X?S:	The name of the <FILE> file. The name may have ~ on the front.
X?S:.
X?S:<FILE>exp:
X?S:	This is the same as the <FILE> variable, but is filename expanded
X?S:	so that later Configure units can look at the <FILE> file if desired.
X?S:.
X?C:<%FILE>:
X?C:	The name of the <FILE> file. The name may have ~ on the front so the
X?C:	program must be prepared to do filename expansion.
X?C:.
X?C:<%FILE>_EXP:
X?C:	The same as <FILE> but ~name expansion has been done by Configure.
X?C:.
X?H:#define <%FILE> "$<FILE>"		/**/
X?H:#define <%FILE>_EXP "$<FILE>exp"		/**/
X?H:.
X: locate <FILE> file
Xecho " "
Xcase "$<FILE>" in
X'')
X	dflt=<DFLT>
X	;;
X*)  dflt="$<FILE>";;
Xesac
Xfn=f~
Xrp='Where is the <FILE> file?'
X. getfile
X<FILE>="$ans"
X<FILE>exp="$ansexp"
X
END_OF_FILE
  if test 1386 -ne `wc -c <'mcon/files/file.U'`; then
    echo shar: \"'mcon/files/file.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/files/file.U'
fi
if test -f 'mcon/files/locate.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/files/locate.U'\"
else
  echo shar: Extracting \"'mcon/files/locate.U'\" \(1397 characters\)
  sed "s/^X//" >'mcon/files/locate.U' <<'END_OF_FILE'
X?RCS: $Id: locate.U,v 3.0 1993/08/18 12:10:08 ram Exp $
X?RCS:
X?RCS:  Copyright (c) 1991-1993, Raphael Manfredi
X?RCS:  
X?RCS:  You may redistribute only under the terms of the Artistic Licence,
X?RCS:  as specified in the README file that comes with the distribution.
X?RCS:  You may reuse parts of this distribution only within the terms of
X?RCS:  that same Artistic Licence; a copy of which may be found at the root
X?RCS:  of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: locate.U,v $
X?RCS: Revision 3.0  1993/08/18  12:10:08  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:<FILE> <FILE>exp: Oldconfig Getfile
X?MAKE:	-pick add $@ %<
X?S:<FILE>:
X?S:	The name of the <FILE> file. The name may have ~ on the front.
X?S:.
X?S:<FILE>exp:
X?S:	This is the same as the <FILE> variable, but is filename expanded
X?S:	so that later Configure units can look at the <FILE> file if desired.
X?S:.
X?C:<%FILE>:
X?C:	The name of the <FILE> file. The name may have ~ on the front so the
X?C:	program must be prepared to do filename expansion.
X?C:.
X?C:<%FILE>_EXP:
X?C:	The same as <FILE> but ~name expansion has been done by Configure.
X?C:.
X?H:#define <%FILE> "$<FILE>"		/**/
X?H:#define <%FILE>_EXP "$<FILE>exp"		/**/
X?H:.
X: locate <FILE> file
Xecho " "
Xcase "$<FILE>" in
X'')
X	dflt=<DFLT>
X	;;
X*)  dflt="$<FILE>";;
Xesac
Xfn=l~:<FILE>
Xrp='Where is the <FILE> file?'
X. getfile
X<FILE>="$ans"
X<FILE>exp="$ansexp"
X
END_OF_FILE
  if test 1397 -ne `wc -c <'mcon/files/locate.U'`; then
    echo shar: \"'mcon/files/locate.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/files/locate.U'
fi
if test -f 'pl/rcsargs.pl' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'pl/rcsargs.pl'\"
else
  echo shar: Extracting \"'pl/rcsargs.pl'\" \(1390 characters\)
  sed "s/^X//" >'pl/rcsargs.pl' <<'END_OF_FILE'
X;# $Id: rcsargs.pl,v 3.0 1993/08/18 12:11:01 ram Exp $
X;#
X;#  Copyright (c) 1991-1993, Raphael Manfredi
X;#  
X;#  You may redistribute only under the terms of the Artistic Licence,
X;#  as specified in the README file that comes with the distribution.
X;#  You may reuse parts of this distribution only within the terms of
X;#  that same Artistic Licence; a copy of which may be found at the root
X;#  of the source tree for dist 3.0.
X;#
X;# $Log: rcsargs.pl,v $
X;# Revision 3.0  1993/08/18  12:11:01  ram
X;# Baseline for dist 3.0 netwide release.
X;#
X;#
Xsub rcsargs {
X	local($result) = '';
X	local($_);
X	while ($_ = shift(@_)) {
X		if ($_ =~ /^-/) {
X			$result .= $_ . ' ';
X		} elsif ($#_ >= 0 && do equiv($_,$_[0])) {
X			$result .= $_ . ' ' . $_[0] . ' ';
X			shift(@_);
X		} else {
X			$result .= $_ . ' ' . do other($_) . ' ';
X		}
X	}
X	$result;
X}
X
Xsub equiv {
X	local($s1, $s2) = @_;
X	$s1 =~ s|.*/||;
X	$s2 =~ s|.*/||;
X	if ($s1 eq $s2) {
X		0;
X	} elsif ($s1 =~ s/$RCSEXT$// || $s2 =~ s/$RCSEXT$//) {
X		$s1 eq $s2;
X	} else {
X		0;
X	}
X}
X
Xsub other {
X	local($s1) = @_;
X	($dir,$file) = ('./',$s1) unless local($dir,$file) = ($s1 =~ m|(.*/)(.*)|);
X	$dir = $TOPDIR . $dir if -d $TOPDIR . "$dir/RCS";
X	local($wasrcs) = ($file =~ s/$RCSEXT$//);
X	if ($wasrcs) {
X		`mkdir $dir` unless -d $dir;
X		$dir =~ s|RCS/||;
X	} else {
X		$dir .= 'RCS/';
X		`mkdir $dir` unless -d $dir;
X		$file .= $RCSEXT;
X	}
X	"$dir$file";
X}
X
END_OF_FILE
  if test 1390 -ne `wc -c <'pl/rcsargs.pl'`; then
    echo shar: \"'pl/rcsargs.pl'\" unpacked with wrong size!
  fi
  # end of 'pl/rcsargs.pl'
fi
echo shar: End of archive 23 \(of 28\).
cp /dev/null ark23isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 28 archives.
    echo "Please run PACKNOTES through sh, read REAMDE and then type Configure."
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0

exit 0 # Just in case...
