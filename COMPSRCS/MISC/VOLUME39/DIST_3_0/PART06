Newsgroups: comp.sources.misc
From: Raphael Manfredi <ram@acri.fr>
Subject: v39i010:  dist-3.0 - Configure script generator and related tools, Part06/28
Message-ID: <1993Aug18.184058.17329@sparky.sterling.com>
X-Md4-Signature: 1f1cfe10cda42bc1682a7fd8d824a98f
Sender: kent@sparky.sterling.com (Kent Landfield)
Organization: Advanced Computer Research Institute, Lyon, France.
Date: Wed, 18 Aug 1993 18:40:58 GMT
Approved: kent@sparky.sterling.com

Submitted-by: Raphael Manfredi <ram@acri.fr>
Posting-number: Volume 39, Issue 10
Archive-name: dist-3.0/part06
Environment: UNIX, Perl, RCS

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# Contents:  MANIFEST mcon/U/libc.U mcon/man/mconfig.SH.02
# Wrapped by ram@soft208 on Wed Aug 18 14:42:19 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 6 (of 28)."'
if test -f 'MANIFEST' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MANIFEST'\"
else
  echo shar: Extracting \"'MANIFEST'\" \(25166 characters\)
  sed "s/^X//" >'MANIFEST' <<'END_OF_FILE'
XArtistic                   The Artistic Licence
XConfigure                  Portability tool
XCredits                    Traditional "thank you" list
XJmakefile                  Description of the main Makefile
XKnown_bugs                 A list of known bugs
XMANIFEST                   This list of files
XMakefile.SH                A makefile to run subsidiary makefiles
XREADME                     Basic instructions
XWishlist                   Features I would like to add
Xbin/                       Some binary tools
Xbin/Jmakefile              Generic makefile description for bin
Xbin/Makefile.SH            Jmake-generated configured makefile
Xbin/manicheck.SH           Check manifest accuracy
Xbin/manicheck.man          Manual page for manicheck
Xbin/manilist.SH            Produces reports based on manifest
Xbin/manilist.man           Manual page for manilist
Xbin/packinit.SH            Creates a .package file describing your package
Xbin/packinit.man           Manual page for packinit
Xbin/perload                Build dynamically loaded perl scripts
Xdist.man                   Introduction to dist
Xinstall.SH                 Installation script with a BSD-like syntax
Xjmake/                     Where makefile generator is stored
Xjmake/Jmakefile            High level makefile description for jmake
Xjmake/Makefile.SH          Generated makefile for jmake
Xjmake/NOTES                Quick description of the internal syntax
Xjmake/README               Welcome to jmake
Xjmake/bindex.SH            Script to build an index of rules
Xjmake/files/               Where rules for jmake are held
Xjmake/files/Jmake.rules    Generic rules for jmake
Xjmake/files/Jmake.tmpl     Template used by jmake to produce Makefile.SH
Xjmake/jmake.SH             The makefile generator
Xjmake/jmake.man            Manual page for jmake
Xjmake/jmkmf.SH             Wrapper for jmake
Xjmake/jmkmf.man            Manual page for jmkmf
Xkit/                       Where distribution tools are stored
Xkit/Jmakefile              Jmake's description of kit builder's makefile
Xkit/Makefile.SH            Builds kit builder
Xkit/README                 Instructions on makedist
Xkit/kitsend.SH             Mail shell archive kits
Xkit/kitsend.man            Manual page for kitsend
Xkit/makeSH                 Does most of turning a script into an SH file
Xkit/makeSH.man             Manual page for same
Xkit/makedist.SH            Makes a set of kits in the current directory
Xkit/makedist.man           Manual page for same
Xkit/manifake.SH            Makes a MANIFEST.new file out of a MANIFEST
Xkit/manifake.man           Manual page for same
Xlib/                       Some library support files
Xlib/Jmakefile              Generic makefile description for lib
Xlib/Makefile.SH            Jmake-generated configured makefile
Xlib/errnolist.a            Awk script to build sys_errnolist[]
Xlib/errnolist.mk           Rule files to add for errnolist.c
Xlib/errnolist.sh           Script to build errnolist.c
Xlib/makedepend.sh          Script to make dependecies, Larry Wall's way
Xlib/makedir.sh             Emulates 'mkdir -p'
Xmcon/                      Where metaconfig tools are stored
Xmcon/INTRO                 Quick introduction for newcommers
Xmcon/Jmakefile             The file used by jmake to produce the Makefile
Xmcon/Makefile.SH           Builds metaconfig
Xmcon/NOTES                 Documents the changes in metaconfig
Xmcon/README                Instructions on using metaconfig
Xmcon/U/                    Holds Units for metaconfig
Xmcon/U/AAAAA.U             Does magic before Head.U
Xmcon/U/Chk_MANI.U          MANIFEST checks
Xmcon/U/Chk_whoami.U        A unit which checks for conflicts
Xmcon/U/Config_h.U          Makes config.h.SH--bizarrity here
Xmcon/U/Config_sh.U         Makes config.sh
Xmcon/U/Configdir.U         Creates .config directory to store persistent info
Xmcon/U/Cppsym.U            Makes program to test for cpp symbols
Xmcon/U/Csym.U              Determines whether C symbol is defined
Xmcon/U/End.U               "End of configuration questions"
Xmcon/U/Extract.U           .SH file extraction
Xmcon/U/Filexp.U            Makes program to do tilde expansion
Xmcon/U/Findhdr.U           Locate header files
Xmcon/U/Finish.U            A unit which always goes last
Xmcon/U/Getfile.U           Get file/directory name
Xmcon/U/Guess.U             Hazard guesses as to overall philosophy
Xmcon/U/Head.U              First unit, does "#!/bin/sh" et al
Xmcon/U/Inhdr.U             Defines a look-for-header function
Xmcon/U/Init.U              Magically gathers ?Init: lines from other units
Xmcon/U/Inlibc.U            Defines an is-in-libc? function
Xmcon/U/Instruct.U          Prints instructions
Xmcon/U/Loc.U               Look for common programs
Xmcon/U/MailAuthor.U        Offers user to register himself
Xmcon/U/Myinit.U            For copying to private U directories
Xmcon/U/Myread.U            Makes program to do read with shell escape
Xmcon/U/Nothing.U           For empty dependencies
Xmcon/U/Null.U              Zeroes out variables.  Probably unnecessary
Xmcon/U/Obsol_h.U           Warnings about obsolete C symbols
Xmcon/U/Obsol_sh.U          Warnings about obsolete shell symbols
Xmcon/U/Oldconfig.U         Looks for old config.sh file
Xmcon/U/Oldsym.U            Try to propagate symbols
Xmcon/U/Options.U           Configure option parsing
Xmcon/U/Rcs.U               Some stupid redefinitions to keep RCS happy
Xmcon/U/Setvar.U            Set a variable with some sanity checks
Xmcon/U/Warn_v7EXT.U        V7 has some ideosyncracies
Xmcon/U/Warn_v7ND.U         V7 has no O_NDELAY read
Xmcon/U/Whoa.U              Warning function
Xmcon/U/abortsig.U          Which signal is sent by abort()?
Xmcon/U/active.U            Find the news active file
Xmcon/U/alignbytes.U        Check for alignment constraints
Xmcon/U/baserev.U           Base revision of package
Xmcon/U/basicshell.U        Which basic shell is available
Xmcon/U/bin.U               Find where to install public executables
Xmcon/U/bitpbyte.U          Computes the number of bits in a byte
Xmcon/U/byteorder.U         Computes the byte order (big-endian?)
Xmcon/U/cc.U                Which C compiler should be used?
Xmcon/U/ccflags.U           Any additional C flags?
Xmcon/U/cf_who.U            Who configured the sytem, where and when
Xmcon/U/charorder.U         Character order within a byte
Xmcon/U/charsize.U          What is the size of "char"?
Xmcon/U/contains.U          Makes status-returning grep
Xmcon/U/cpp_stuff.U         Some cpp stuff
Xmcon/U/cppfilecom.U        Running cpp while preserving C comments
Xmcon/U/cppstdin.U          Check how to invoke the C pre-processor
Xmcon/U/d_NOFILE.U          Maximum # of file descriptors
Xmcon/U/d_NeWS.U            Old NeWS stuff
Xmcon/U/d_PORTAR.U          Do we know about portable archives?
Xmcon/U/d_SHM_MAC.U         SHMLBA macro stuff
Xmcon/U/d_access.U          Do we have access()?
Xmcon/U/d_bcmp.U            Do we have bcmp() or memcmp()?
Xmcon/U/d_bcopy.U           Do we have bcopy() or memcpy()?
Xmcon/U/d_bsdjmp.U          Do we have BSD _setjmp() and _longjmp()?
Xmcon/U/d_bzero.U           Do we have bzero() or memset()?
Xmcon/U/d_castneg.U         Can the C compiler cast negative to unsigned?
Xmcon/U/d_cbrt.U            Do we have cubic root cbrt()?
Xmcon/U/d_charsprf.U        How is sprintf() defined?
Xmcon/U/d_chsize.U          Size of a char
Xmcon/U/d_ckeypad.U         Do we have the curses keypad()?
Xmcon/U/d_const.U           Can cc grok the const keyword?
Xmcon/U/d_crypt.U           Does crypt() exist?
Xmcon/U/d_csh.U             csh path
Xmcon/U/d_ctermid.U         Do we have ctermid()?
Xmcon/U/d_dosuid.U          Do they want setuid emulation?
Xmcon/U/d_dup2.U            Do we have dup2()?
Xmcon/U/d_eofpipe.U         Will EOF be seen on closed pipes?
Xmcon/U/d_euc2jis.U         Do we have euc2jis()?
Xmcon/U/d_fchmod.U          Do we have fchmod()?
Xmcon/U/d_fchown.U          Do we have fchown()?
Xmcon/U/d_fcntl.U           Do we have fcntl()?
Xmcon/U/d_fd_set.U          Do we have the fd set manipulation macros?
Xmcon/U/d_ffs.U             Do we have ffs()?
Xmcon/U/d_flexfnam.U        Long filenames?
Xmcon/U/d_flock.U           Do we have flock()?
Xmcon/U/d_ftime.U           Do we have ftime()?
Xmcon/U/d_ftrncate.U        Do we have ftruncate()?
Xmcon/U/d_getgrps.U         Do we have getgroups()?
Xmcon/U/d_gethbynm.U        Do we have gethostbyname()?
Xmcon/U/d_gethent.U         Do we have gethostent()?
Xmcon/U/d_gethid.U          Do we have gethostid()?
Xmcon/U/d_gethname.U        What is the C function to get host name?
Xmcon/U/d_getopt.U          Do we have getopt()?
Xmcon/U/d_getpagsz.U        Computes system's page size
Xmcon/U/d_getpgrp.U         Do we have getpgrp()?
Xmcon/U/d_getpgrp2.U        Do we have getpgrp2()? (DG/UX)
Xmcon/U/d_getprior.U        Do we have getpriority()?
Xmcon/U/d_getpwent.U        How is passwd info gotten?
Xmcon/U/d_getwd.U           Do we have getwd()?
Xmcon/U/d_havetlib.U        Where is termlib?
Xmcon/U/d_hidnet.U          Do hiddennet stuff?
Xmcon/U/d_htonl.U           Do we have htonl() and friends?
Xmcon/U/d_inetd.U           Should internet communication be done via inetd?
Xmcon/U/d_internet.U        Use internet addresses?
Xmcon/U/d_itimer.U          Do we have setitimer()?
Xmcon/U/d_keepsig.U         Will signal handlers need to be rearmed?
Xmcon/U/d_killpg.U          Do we have killpg()?
Xmcon/U/d_lstat.U           Do we have lstat()?
Xmcon/U/d_mbstowcs.U        Do we have mbstowcs()?
Xmcon/U/d_mbtowc.U          Do we have mbtowc()?
Xmcon/U/d_memccpy.U         Do we have memccpy()?
Xmcon/U/d_memchr.U          Do we have memchr()?
Xmcon/U/d_memcmp.U          Do we have memcmp()?
Xmcon/U/d_memcpy.U          Do we have memcpy()?
Xmcon/U/d_memmove.U         Do we have memmove()?
Xmcon/U/d_memset.U          Do we have memset()?
Xmcon/U/d_mkdir.U           Do we have mkdir()?
Xmcon/U/d_msg.U             Do we have full msg(2) support?
Xmcon/U/d_msgctl.U          Do we have msgctl()?
Xmcon/U/d_msgget.U          Do we have msgget()?
Xmcon/U/d_msgrcv.U          Do we have msgrcv()?
Xmcon/U/d_msgsnd.U          Do we have msgsnd()?
Xmcon/U/d_newsadm.U         Who is news administrator?
Xmcon/U/d_nolnbuf.U         Is stdout line buffered?
Xmcon/U/d_normsig.U         signal() vs sigset()
Xmcon/U/d_open3.U           Do we have the 3 arguments form for open()?
Xmcon/U/d_perror.U          Do we have perror()?
Xmcon/U/d_pidcheck.U        Is kill(pid, 0) allowed for PID checks?
Xmcon/U/d_popen.U           Do we have popen()?
Xmcon/U/d_portable.U        How portable do we want to be?
Xmcon/U/d_psignal.U         Do we have psignal()?
Xmcon/U/d_raster.U          Is this a Raster Tech machine?
Xmcon/U/d_rdchk.U           Is rdchk() there to check for input?
Xmcon/U/d_readdir.U         Do we have readdir()?
Xmcon/U/d_regcmp.U          Do we have regcmp()?
Xmcon/U/d_rename.U          Do we have rename()?
Xmcon/U/d_rmdir.U           Do we have rmdir()?
Xmcon/U/d_rusage.U          Do we have getrusage()?
Xmcon/U/d_safebcpy.U        Can bcopy() handle overlapping blocks?
Xmcon/U/d_safemcpy.U        Can memcpy() handle overlapping blocks?
Xmcon/U/d_scannl.U          Does scanf() groks '\n' correctly?
Xmcon/U/d_scorfl.U          Keep scoreboards by full name?
Xmcon/U/d_select.U          Do we have select()?
Xmcon/U/d_sem.U             Do we have full sem(2) support?
Xmcon/U/d_semctl.U          Do we have d_semctl()?
Xmcon/U/d_semget.U          Do we have semget()?
Xmcon/U/d_semop.U           Do we have semop()?
Xmcon/U/d_setegid.U         Do we have setegid()?
Xmcon/U/d_seteuid.U         Do we have seteuid()?
Xmcon/U/d_setpgrp.U         Do we have setpgrp()?
Xmcon/U/d_setpgrp2.U        Do we have setpgrp2()? (DG/UX)
Xmcon/U/d_setprior.U        Do we have setpriority()?
Xmcon/U/d_setregid.U        Do we have setregid()?
Xmcon/U/d_setreuid.U        Do we have setreuid()?
Xmcon/U/d_setrgid.U         Do we have setrgid()?
Xmcon/U/d_setruid.U         Do we have setruid()?
Xmcon/U/d_sgndchr.U         Are chars signed?
Xmcon/U/d_shm.U             Do we have full shm(2) support?
Xmcon/U/d_shmat.U           Do we have shmat()?
Xmcon/U/d_shmctl.U          Do we have shmctl()?
Xmcon/U/d_shmdt.U           Do we have shmdt()?
Xmcon/U/d_shmget.U          Do we have shmget()?
Xmcon/U/d_sigblock.U        Do we have sigblock()?
Xmcon/U/d_sighold.U         Do we have sighold()?
Xmcon/U/d_siglist.U         Do we have sys_siglist[]?
Xmcon/U/d_sigsetmk.U        Do we have sigsetmask()?
Xmcon/U/d_sigvec.U          BSD reliable signals supported?
Xmcon/U/d_sjis2jis.U        Do we have sjis2jis()?
Xmcon/U/d_socket.U          BSD socket interface supported?
Xmcon/U/d_speedopt.U        Optimize speed vs memory?
Xmcon/U/d_stat.U            Do we have stat()?
Xmcon/U/d_statblks.U        Does stat know about blksize and blocks?
Xmcon/U/d_stdstdio.U        How standard is stdio?
Xmcon/U/d_strchr.U          Use strchr() or index()?
Xmcon/U/d_strcspn.U         Do we have strcspn()?
Xmcon/U/d_strctcpy.U        Do we do struct copies?
Xmcon/U/d_strerror.U        Do we have strerror()?
Xmcon/U/d_strftime.U        Do we have strftime()?
Xmcon/U/d_strstr.U          Do we have strtr()?
Xmcon/U/d_strtok.U          Do we have strtok()?
Xmcon/U/d_strtol.U          Do we have strtol()?
Xmcon/U/d_su_chown.U        Do we need to be root to do a chown?
Xmcon/U/d_symlink.U         Does symlink() exist?
Xmcon/U/d_syscall.U         Do we have syscall()?
Xmcon/U/d_syslog.U          Do we have syslog()?
Xmcon/U/d_system.U          Do we have system()?
Xmcon/U/d_time.U            Do we have time()?
Xmcon/U/d_times.U           Do we have a times() function?
Xmcon/U/d_tminsys.U         Is struct tm in <sys/time.h>?
Xmcon/U/d_truncate.U        Do we have truncate()?
Xmcon/U/d_tzmin.U           Do we use tz_minuteswest?
Xmcon/U/d_ulimit.U          Do we have ulimit()?
Xmcon/U/d_usendir.U         Use our own ndir routines?
Xmcon/U/d_usleep.U          Do we have usleep()?
Xmcon/U/d_uwait.U           Is there a 'union wait' declaration around here?
Xmcon/U/d_vfork.U           vfork() vs fork()
Xmcon/U/d_voidsig.U         How is signal() declared?
Xmcon/U/d_volatile.U        Does our C compiler support "volatile"?
Xmcon/U/d_vprintf.U         Do we have vprintf()?
Xmcon/U/d_wait3.U           Do we have wait3()?
Xmcon/U/d_wait4.U           Do we have wait4()?
Xmcon/U/d_waitpid.U         Do we have waitpid() system call?
Xmcon/U/d_wcstombs.U        Do we have wcstombs()?
Xmcon/U/d_xdrs.U            Do we have XDR serialization routines?
Xmcon/U/defeditor.U         Find default editor
Xmcon/U/doublesize.U        What is the size of "double"?
Xmcon/U/etc.U               Where administrative executable should go
Xmcon/U/filexp.U            Finds location of filexp made by Filexp.U
Xmcon/U/floatsize.U         What is the size of "float"?
Xmcon/U/fpu.U               What kind of Sun fpu is in use?
Xmcon/U/gidtype.U           What is the type of gids?
Xmcon/U/h_fcntl.U           Do we need to include fcntl.h?
Xmcon/U/h_sysfile.U         Do we need to include sys/file.h?
Xmcon/U/i_arpainet.U        Shall we include <arpa/inet.h>?
Xmcon/U/i_dbm.U             Shall we include <dbm.h>?
Xmcon/U/i_dirent.U          Shall we include <dirent.h>
Xmcon/U/i_fcntl.U           Shall we include <fcntl.h>?
Xmcon/U/i_gdbm.U            Shall we include <gdbm.h>?
Xmcon/U/i_grp.U             Shall we include <grp.h>?
Xmcon/U/i_limits.U          Shall we include <limits.h>?
Xmcon/U/i_malloc.U          Shall we include <malloc.h>?
Xmcon/U/i_memory.U          Shall we include <memory.h>?
Xmcon/U/i_ndbm.U            Shall we include <ndbm.h>?
Xmcon/U/i_niin.U            Shall we include <netinet/in.h>?
Xmcon/U/i_pwd.U             Shall we include <pwd.h>?
Xmcon/U/i_stdarg.U          Shall we include <stdarg.h>?
Xmcon/U/i_stddef.U          Shall we include <stddef.h>?
Xmcon/U/i_stdlib.U          Shall we include <stdlib.h>?
Xmcon/U/i_string.U          <string.h> or <strings.h>?
Xmcon/U/i_sysdir.U          Shall we include <sys/dir.h>?
Xmcon/U/i_sysfile.U         Do we need <sys/file.h>?
Xmcon/U/i_sysioctl.U        Include <sys/ioctl.h> or <sgtty.h>?
Xmcon/U/i_sysndir.U         Shall we include <sys/ndir.h>?
Xmcon/U/i_sysresrc.U        Shall we include <sys/resource.h>?
Xmcon/U/i_sysselct.U        Shall we include <sys/select.h>?
Xmcon/U/i_syssock.U         Shall we include <sys/socket.h>?
Xmcon/U/i_systimeb.U        Is struct timeb defined in <sys/timeb.h>?
Xmcon/U/i_systimes.U        Shall we include <sys/times.h>?
Xmcon/U/i_systwgcf.U        Shall we include <sys/twg_config.h>?
Xmcon/U/i_systypes.U        Do we have to include <sys/types.h>?
Xmcon/U/i_sysun.U           Shall we include <sys/un.h>?
Xmcon/U/i_syswait.U 	       Is there a <sys/wait.h>?
Xmcon/U/i_termio.U          Include <termio.h> or <sgtty.h>?
Xmcon/U/i_time.U            Which time.h should we include?
Xmcon/U/i_unistd.U          Include <unistd.h>?
Xmcon/U/i_utime.U           Include <utime.h>?
Xmcon/U/i_varargs.U         Include <varargs.h>?
Xmcon/U/i_varhdr.U          Choose between <varargs.h> and <stdarg.h>
Xmcon/U/i_vfork.U           Include <vfork.h>?
Xmcon/U/i_whoami.U          Include <whoami.h>?
Xmcon/U/inc.U               Where to put public include files?
Xmcon/U/intsize.U           What is the size of "int"?
Xmcon/U/ipc.U               Choose IPC mechanism
Xmcon/U/kernel.U            Compute the kernel pathname
Xmcon/U/lex.U               Use lex or flex?
Xmcon/U/lib.U               Where to put public library files ?
Xmcon/U/libc.U              Where is libc?
Xmcon/U/libdbm.U            Look for a suitable dbm library
Xmcon/U/libflex.U           Locate flex library
Xmcon/U/libnlist.U          Locate an nlist library
Xmcon/U/libnm.U             New math library?
Xmcon/U/libpth.U            Set path to locate libraries
Xmcon/U/libs.U              Optional libraries?
Xmcon/U/libyacc.U           Locate yacc library
Xmcon/U/lintlib.U           Where lint library should be placed
Xmcon/U/locdist.U           Find distribution names for news
Xmcon/U/longsize.U          What is the size of "long"?
Xmcon/U/lseektype.U         What is the type of lseek()?
Xmcon/U/maildir.U           Where is mail spooled
Xmcon/U/mailer.U            What delivers mail?
Xmcon/U/mailfile.U          What filename in maildir?
Xmcon/U/mallocsrc.U         Use malloc included in kit?
Xmcon/U/manfmt.U            Formatted man directories
Xmcon/U/mansrc.U            Where to put manual pages source
Xmcon/U/mboxchar.U          How to determine if file is mailbox
Xmcon/U/mkdep.U             How to generate makefile dependencies?
Xmcon/U/models.U            Large vs small, split I&D, etc
Xmcon/U/myhostname.U        How to determine hostname from shell
Xmcon/U/n.U                 How to suppress newline with echo
Xmcon/U/nametype.U          How to get user's fullname
Xmcon/U/newslevel.U         What version of news are we running?
Xmcon/U/newslib.U           Where is the news library?
Xmcon/U/newsspool.U         Where is news spooled?
Xmcon/U/nis.U               Do we have to deal with NIS (former YP)?
Xmcon/U/nlist_pfx.U         nlist() related stuff
Xmcon/U/orderlib.U          Shall we order components libraries?
Xmcon/U/orgname.U           What is the organizaton name?
Xmcon/U/package.U           Gets package name from .package magically
Xmcon/U/pager.U             What's the pager, more or less?
Xmcon/U/patchlevel.U        Grab current patchlevel out of patchlevel.h
Xmcon/U/perlpath.U          The full path of perl
Xmcon/U/pidtype.U           What is the type of a PID?
Xmcon/U/prefshell.U         Preferred user shell
Xmcon/U/privlib.U           Where is the private library?
Xmcon/U/prototype.U         Do we support prototypes?
Xmcon/U/ptrsize.U           What is the size of a pointer?
Xmcon/U/randbits.U          How many bits in rand()?
Xmcon/U/randfunc.U          Which random number function shall we use?
Xmcon/U/rcs_branch.U        Does RCS know about the -b switch?
Xmcon/U/registers.U         How many register declarations to use
Xmcon/U/rootid.U            Root user id
Xmcon/U/sbrktype.U          What is the return type of sbrk()?
Xmcon/U/scriptdir.U         Where to put public scripts
Xmcon/U/shm_for.U           More shared memory stuff
Xmcon/U/sig_name.U          Signal names
Xmcon/U/sockopt.U           Check for socket options
Xmcon/U/spitshell.U         Shell comment stripper, maybe
Xmcon/U/startperl.U         Do we start perl with #! or what?
Xmcon/U/startsh.U           How to guarantee sh startup
Xmcon/U/stdchar.U           Are chars unsigned in stdio?
Xmcon/U/sunscanf.U          Is this Sun's version of scanf()?
Xmcon/U/sysman.U            Where is the man(1) located?
Xmcon/U/uidtype.U           What is the type of uids?
Xmcon/U/usenm.U             Shall we use the costly nm extraction?
Xmcon/U/usrinc.U            Where are include files located?
Xmcon/U/vaproto.U           How do we prototype varargs, with ...?
Xmcon/U/voidflags.U         How supported is void?
Xmcon/U/warnflags.U         Any additional cc warning flags?
Xmcon/U/yacc.U              Which compiler-compiler to use?
Xmcon/files/                Templates for new units
Xmcon/files/Internal.U      Template for special units with internal symbols
Xmcon/files/README          Why those templates are here...
Xmcon/files/d_function.U    Template for C defines
Xmcon/files/dir.U           Template to get a directory
Xmcon/files/file.U          Template get a file
Xmcon/files/i_include.U     Template for include files
Xmcon/files/keyword.U       Template for keyword checking
Xmcon/files/locate.U        Template to locate a file
Xmcon/files/question.U      Template for setvar questions
Xmcon/files/rcshead.U       Template for unit head
Xmcon/files/shell.U         Template for non-setvar questions
Xmcon/files/type.U          Template for type lookup
Xmcon/makegloss.SH          Extracts Glossary from Unit files
Xmcon/man/                  Manual pages for metaconfig et al.
Xmcon/man/Jmakefile         Generic makefile description for manual pages
Xmcon/man/Makefile.SH       Jmake-generated makefile for manual pages
Xmcon/man/mconfig.SH        Manual page for metaconfig
Xmcon/man/mlint.SH          Manual page for metalint
Xmcon/man/mxref.SH          Manual page for metaxref
Xmcon/mconfig.SH            Writes Configure scripts for you
Xmcon/mlint.SH              Lints metaconfig units
Xmcon/mxref.SH              Builds symbol cross-reference files
Xmcon/pl/                   Perl library for metaconfig et al.
Xmcon/pl/common.pl          Common control lines extraction
Xmcon/pl/configure.pl       Generates Configure
Xmcon/pl/cosmetic.pl        Some cosmetic fixes
Xmcon/pl/depend.pl          Metaconfig-only dependencies
Xmcon/pl/eval.pl            Built-in interpreter
Xmcon/pl/extract.pl         Dependency extractor engine
Xmcon/pl/files.pl           Extracts files from MANIFEST.new
Xmcon/pl/gensym.pl          Dynamic symbol generator
Xmcon/pl/init.pl            Initialization of dependency control array
Xmcon/pl/lint.pl            Lint-only dependencies
Xmcon/pl/locate.pl          Locate units
Xmcon/pl/makefile.pl        Builds temporary Makefiles
Xmcon/pl/obsolete.pl        Deals with obsolete symbols
Xmcon/pl/order.pl           Re-order units within Configure
Xmcon/pl/tsort.pl           Topological sort
Xmcon/pl/wanted.pl          Set up Wanted file
Xmcon/pl/xref.pl            Metaxref-only dependencies
Xmcon/pl/xwant.pl           Metaxref symbol extraction
Xpat/                       Where patching tools are stored
Xpat/Jmakefile              High level makefile description for pat
Xpat/Makefile.SH            Makefile for pat tools
Xpat/README                 Instructions for patch/developping tools
Xpat/pat.SH                 Check in, do diffs, make patch, send it
Xpat/pat.man                Manual page for patch tools
Xpat/patbase.SH             To set the base for future differences
Xpat/patchlevel.h           Prototypical patchlevel.h
Xpat/patcil.SH              Check in the latest changes
Xpat/patclean.SH            Check in latest changes and remove files
Xpat/patcol.SH              Check out working file
Xpat/patdiff.SH             Find the differences since last patch
Xpat/patftp.SH              Put patches in ftp pub directory
Xpat/patindex.SH            Create an index of patches sent out
Xpat/patmake.SH             Put together a patch file
Xpat/patname.SH             Assign symbolic name to a revision
Xpat/patpost.SH             Send patches via news
Xpat/patsend.SH             Sends patches via mail
Xpatchlevel.h               The current patchlevel for dist
Xpl/                        Directory for public perl libraries
Xpl/comment.pl              Perl library to find comment in front of $Log
Xpl/copyright.pl            Perl library to expand copyright
Xpl/fullname.pl             Perl library to get full name
Xpl/logname.pl              Perl library to get login name
Xpl/makedir.pl              Perl library to emulate 'mkdir -p'
Xpl/manifake.pl             Perl library to build a MANIFEST.new if none found
Xpl/newer.pl                Perl library to Find files newer than patchlevel.h
Xpl/package.pl              Perl library to read .package
Xpl/rangeargs.pl            Perl library to expand number lists
Xpl/rcsargs.pl              Perl library to expand rcs filename lists
Xpl/tilde.pl                Perl library to perform ~name expansion
Xpl/users.pl                Perl library to parse users file
END_OF_FILE
  if test 25166 -ne `wc -c <'MANIFEST'`; then
    echo shar: \"'MANIFEST'\" unpacked with wrong size!
  fi
  # end of 'MANIFEST'
fi
if test -f 'mcon/U/libc.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/libc.U'\"
else
  echo shar: Extracting \"'mcon/U/libc.U'\" \(8430 characters\)
  sed "s/^X//" >'mcon/U/libc.U' <<'END_OF_FILE'
X?RCS: $Id: libc.U,v 3.0 1993/08/18 12:08:57 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: libc.U,v $
X?RCS: Revision 3.0  1993/08/18  12:08:57  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:libc: echo n c rm test grep Getfile Myread Oldconfig Loc sed \
X	libs incpath libpth runnm nm_opt contains plibpth xlibpth
X?MAKE:	-pick add $@ %<
X?S:libc:
X?S:	This variable contains the location of the C library.
X?S:.
X?X: Do not add this variable in the MAKE line--RAM.
X?S:nm_extract:
X?S:	This variable holds the name of the extraction command used to process
X?S:	the output of nm and yield the list of defined symbols. It is used
X?S:	internally by Configure.
X?S:.
X?T:thislib try libnames xxx xscan xrun thisname com tans
X?LINT:change libpth nm_opt
Xcase "$runnm" in
Xtrue)
X?X: indentation is wrong on purpose--RAM
X: get list of predefined functions in a handy place
Xecho " "
Xcase "$libc" in
X'') libc=unknown
X	case "$libs" in
X	*-lc_s*) libc=`./loc libc_s.a $libc $libpth`
X	esac
X	;;
Xesac
Xlibpth="$plibpth $libpth"
Xlibnames='';
Xcase "$libs" in
X'') ;;
X*)  for thislib in $libs; do
X	case "$thislib" in
X	-l*)
X		thislib=`expr X$thislib : 'X-l\(.*\)'`
X		try=`./loc lib$thislib.a blurfl/dyick $libpth`
X		if test ! -f $try; then
X			try=`./loc lib$thislib blurfl/dyick $libpth`
X			if test ! -f $try; then
X				try=`./loc $thislib blurfl/dyick $libpth`
X				if test ! -f $try; then
X					try=`./loc Slib$thislib.a blurfl/dyick $xlibpth`
X					if test ! -f $try; then
X						try=''
X					fi
X				fi
X			fi
X		fi
X		libnames="$libnames $try"
X		;;
X	*) libnames="$libnames $thislib" ;;
X	esac
X	done
X	;;
Xesac
X?X:
X?X: Some systems (e.g. DG/UX) use "environmental" links, which make the test
X?X: -f fail. Ditto for symbolic links. So in order to reliably check the
X?X: existence of a file, we use test -r. It will still fail with DG/UX links 
X?X: though, but at least it will detect symbolic links. At some strategic
X?X: points, we make use of (test -h), using a sub-shell in case builtin test
X?X: does not implement the -h check for symbolic links. This makes it
X?X: possible to preset libc in a hint file for instance and have it show up
X?X:	as-is in the question.
X?X:
Xcase "$libc" in
Xunknown)
X	set /usr/ccs/lib/libc.so
X	$test -r $1 || set /usr/lib/libc.so
X	$test -r $1 || set /usr/lib/libc.so.[0-9]*
X	$test -r $1 || set /lib/libsys_s.a
X	eval set \$$#
X	;;
X*)
X?X: ensure the test below for the (shared) C library will fail
X	set blurfl
X	;;
Xesac
Xif $test -r "$1"; then
X	echo "Your (shared) C library seems to be in $1."
X	libc="$1"
Xelif $test -r /lib/libc && $test -r /lib/clib; then
X?X:
X?X: Apollo has its C library in /lib/clib AND /lib/libc
X?X: not to mention its math library in /lib/syslib...
X?X:
X	echo "Your C library seems to be in both /lib/clib and /lib/libc."
X	libc='/lib/clib /lib/libc'
X	if $test -r /lib/syslib; then
X		echo "(Your math library is in /lib/syslib.)"
X?X: Put syslib in libc -- not quite right, but won't hurt
X		libc="$libc /lib/syslib"
X	fi
Xelif $test -r "$libc" || (test -h "$libc") >/dev/null 2>&1; then
X	echo "Your C library seems to be in $libc, as you said before."
X?X: For mips, and...
Xelif $test -r $incpath/usr/lib/libc.a; then
X	libc=$incpath/usr/lib/libc.a;
X	echo "Your C library seems to be in $libc.  That's fine."
Xelif $test -r /lib/libc.a; then
X	libc=/lib/libc.a;
X	echo "Your C library seems to be in $libc.  You're normal."
Xelse
X	if tans=`./loc libc.a blurfl/dyick $libpth`; $test -r "$tans"; then
X		:
X	elif tans=`./loc libc blurfl/dyick $libpth`; $test -r "$tans"; then
X		libnames="$libnames "`./loc clib blurfl/dyick $libpth`
X	elif tans=`./loc clib blurfl/dyick $libpth`; $test -r "$tans"; then
X		:
X	elif tans=`./loc Slibc.a blurfl/dyick $xlibpth`; $test -r "$tans"; then
X		:
X	elif tans=`./loc Mlibc.a blurfl/dyick $xlibpth`; $test -r "$tans"; then
X		:
X	else
X		tans=`./loc Llibc.a blurfl/dyick $xlibpth`
X	fi
X	if $test -r "$tans"; then
X		echo "Your C library seems to be in $tans, of all places."
X		libc=$tans
X	else
X		libc='blurfl'
X	fi
Xfi
Xif $test -r "$libc" || (test -h "$libc") >/dev/null 2>&1; then
X	dflt="$libc"
X	cat <<EOM
X
XIf the guess above is wrong (which it might be if you're using a strange
Xcompiler, or your machine supports multiple models), you can override it here.
X
XEOM
Xelse
X	dflt=''
X	echo $libpth | tr ' ' '\012' | sort | uniq > libpath
X	cat >&4 <<EOM
XI can't seem to find your C library.  I've looked in the following places:
X
XEOM
X	$sed 's/^/	/' libpath
X	cat <<EOM
X
XNone of these seems to contain your C library. I need to get its name...
X
XEOM
Xfi
Xfn=f
Xrp='Where is your C library?'
X. ./getfile
Xlibc="$ans"
X
Xecho " "
Xecho $libc $libnames | tr ' ' '\012' | sort | uniq > libnames
Xset X `cat libnames`
Xshift
Xxxx=files
Xcase $# in 1) xxx=file; esac
Xecho "Extracting names from the following $xxx for later perusal:" >&4
Xecho " "
X$sed 's/^/	/' libnames >&4
Xecho " "
X$echo $n "This may take a while...$c" >&4
X
Xnm $nm_opt $* 2>/dev/null >libc.tmp
X$echo $n ".$c"
X?X:
X?X: To accelerate processing, we look at the correct 'sed' command
X?X:	by using a small subset of libc.tmp, i.e. fprintf function.
X?X: When we know which sed command to use, do the name extraction
X?X:
X$grep fprintf libc.tmp > libc.ptf
X?X:
X?X: In order to ehance readability and save some space, we define
X?X:	some variables that will be "eval"ed.
X?X:
Xxscan='eval "<libc.ptf $com >libc.list"; $echo $n ".$c" >&4'
Xxrun='eval "<libc.tmp $com >libc.list"; echo "done" >&4'
X?X: BSD-like output
Xif com="$sed -n -e 's/^.* [ADTS]  *_[_.]*//p' -e 's/^.* [ADTS] //p'";\
X	eval $xscan;\
X	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
X		eval $xrun
X?X: SYSV-like output
Xelif com="$sed -n -e 's/^__*//' -e 's/^\([a-zA-Z_0-9$]*\).*xtern.*/\1/p'";\
X	eval $xscan;\
X	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
X		eval $xrun
Xelif com="$sed -n -e '/|UNDEF/d' -e '/FUNC..GL/s/^.*|__*//p'";\
X	eval $xscan;\
X	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
X		eval $xrun
Xelif com="$sed -n -e 's/^.* D __*//p' -e 's/^.* D //p'";\
X	eval $xscan;\
X	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
X		eval $xrun
Xelif com="$sed -n -e 's/^_//' -e 's/^\([a-zA-Z_0-9]*\).*xtern.*text.*/\1/p'";\
X	eval $xscan;\
X	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
X		eval $xrun
Xelif com="$sed -n -e 's/^.*|FUNC |GLOB .*|//p'";\
X	eval $xscan;\
X	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
X		eval $xrun
Xelif com="$grep '|' | $sed -n -e '/|COMMON/d' -e '/|DATA/d' \
X				-e '/ file/d' -e 's/^\([^ 	]*\).*/\1/p'";\
X	eval $xscan;\
X	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
X		eval $xrun
Xelif com="$sed -n -e 's/^.*|FUNC |GLOB .*|//p' -e 's/^.*|FUNC |WEAK .*|//p'";\
X	eval $xscan;\
X	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
X		eval $xrun
X?X: mips nm output (sysV)
Xelif com="$sed -n -e 's/^__//' -e '/|Undef/d' -e '/|Proc/s/ .*//p'";\
X	eval $xscan;\
X	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
X		eval $xrun
Xelse
X	nm -p $* 2>/dev/null >libc.tmp
X	com="$sed -n -e 's/^.* [ADTS]  *_[_.]*//p' -e 's/^.* [ADTS] //p'";\
X	eval "<libc.tmp $com >libc.list"
X	if $contains '^fprintf$' libc.list >/dev/null 2>&1; then
X		nm_opt='-p'
X		echo "done" >&4
X	else
X		echo " "
X		echo "nm didn't seem to work right. Trying ar instead..." >&4
X		com=''
X		if ar t $libc > libc.tmp; then
X			for thisname in $libnames; do
X				ar t $thisname >>libc.tmp
X			done
X			$sed -e 's/\.o$//' < libc.tmp > libc.list
X			echo "Ok." >&4
X		else
X			echo "ar didn't seem to work right." >&4
X			echo "Maybe this is a Cray...trying bld instead..." >&4
X			if bld t $libc | $sed -e 's/.*\///' -e 's/\.o:.*$//' > libc.list; then
X				for thisname in $libnames; do
X					bld t $libnames | \
X					$sed -e 's/.*\///' -e 's/\.o:.*$//' >>libc.list
X					ar t $thisname >>libc.tmp
X				done
X				echo "Ok." >&4
X			else
X				echo "That didn't work either.  Giving up." >&4
X				exit 1
X			fi
X		fi
X	fi
Xfi
Xnm_extract="$com"
Xif $test -f /lib/syscalls.exp; then
X	echo " "
X	echo "Also extracting names from /lib/syscalls.exp for good ole AIX..." >&4
X	$sed -n 's/^\([^ 	]*\)[ 	]*syscall$/\1/p' /lib/syscalls.exp >>libc.list
Xfi
X?X: remember, indentation is wrong on purpose--RAM
X;;
Xesac
X$rm -f libnames libpath
X
END_OF_FILE
  if test 8430 -ne `wc -c <'mcon/U/libc.U'`; then
    echo shar: \"'mcon/U/libc.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/libc.U'
fi
if test -f 'mcon/man/mconfig.SH.02' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/man/mconfig.SH.02'\"
else
  echo shar: Extracting \"'mcon/man/mconfig.SH.02'\" \(18155 characters\)
  sed "s/^X//" >'mcon/man/mconfig.SH.02' <<'END_OF_FILE'
XThe name of the package, as derived from your \fI.package\fR file.
X.TP
X<PATCHLEVEL>
XThe patch level of the \fImetaconfig\fR program.
X.TP
X<VERSION>
XThe version number of the \fImetaconfig\fR program.
X.PP
XThose macros are mainly used to identify the \fImetaconfig\fR version that
Xgenerated a particular \fIConfigure\fR script and for which package it
Xwas done. The e-mail address of the maintainer is hardwired in the leading
Xinstructions that \fIConfigure\fR prints when starting.
X'''
X.SS Special Units
X.PP
XThe following special units are used to factorize code and provide higher
Xlevel functionalities. They either produce a shell script that can be
Xsourced or a shell variable that can be \fIeval\fR'ed. Parameter passing
Xis done via well-know variables, either named or anonymous like \$1, \$2,
Xetc... (which can be easily set via the shell \fIset\fR operator).
XWhen \fIConfigure\fR executes, it creates and goes into a \fIUU\fR directory,
Xso every produced script lies in there and does not interfere with the
Xfiles from your package.
X.PP
XHere are the sepcial units that you should know about, and the way to use
Xthem.
X.TP 5
XCppsym.U
XThis unit produces a shell script called \fICppsym\fR, which can be used
Xto determine whether any symbol in a list is defined by the C preprocessor.
XIt can determine the status of any symbol, though the symbols in \fI$attrlist\fR
Xare more easily determined.
X.TP
XCsym.U
XThis sets the \$csym shell variable, used internally by \fIConfigure\fR to
Xcheck whether a given C symbol is defined or not. A typical use is:
X.Ex
Xset symbol result [-fva] [previous]
Xeval \$\&csym
X.Ef
XThat will set the \fIresult\fR variable to 'true' if the 
Xfunction [-f],
Xvariable [-v] or
Xarray [-a]
Xis defined, 'false' otherwise. If a previous value is given and the \fB\-r\fR
Xswitch was provided to \fIConfigure\fR (see the \fIConfigure Options\fR
Xparagraph), then that value is re-used without questioning.
X.TP
XEnd.U
XBy copying this unit into your private \fIU\fR directory and appending
Xdependencies on the ?MAKE: line, you can force a given unit to be loaded
Xinto \fIConfigure\fR even if it is not otherwise wanted. Some units may
Xonly be forced into \fIConfigure\fR that way.
X.TP
XFilexp.U
XThis unit produces a shell script \fIfilexp\fR which will expand filenames
Xbeginning with tildes. A typical use is:
X.Ex
Xexp_name=\`./filexp \$name\`
X.Ef
Xto assign the expanded file name in \fIexp_name\fR.
X.TP
XFindhdr.U
XThis unit produces a \fIfindhdr\fR script which is used to locate the
Xheader files in \fI$\&usrinc\fR or other stranger places using cpp capabilities.
XThe script is given an include file base name like 'stdio.h' or 'sys/file.h'
Xand it returns the full path of the inlcude file and a zero status if found,
Xor an empty string and a non-zero status if the file could not be located.
X.TP
XGetfile.U
XThis unit produces a bit of shell code that must be sourced in order to get
Xa file name and make some sanity checks. Optionally, a ~name expansion is
Xperformed.
X.sp
XTo use this unit, \fI\$rp\fR and \fI\$dflt\fR must hold the question and the
Xdefault answer, which will be passed as-is to the \fImyread\fR script
X(see forthcoming \fIMyread.U\fR). The \fI\$fn\fR variable controls the
Xoperation and the result is returned into \fI$ans\fR.
X.sp
XTo locate a file or directory, put 'f' or 'd' in \fI$fn\fR. If a '~' appears,
Xthen ~name substitution is allowed. If a '/' appears, only absolute pathnames
Xare accepted and ~name subsitutions are always expanded before returning.
XIf '+' is specified, existence checks are skipped. If 'n'
Xappears within \fI$fn\fR, then the user is allowed to answer 'none'.
X.sp
XUsually, unless you asked for portability, ~name substitution occurs when
Xrequested. However, there are some times you wish to bypass portability and
Xforce the substitution. You may use the 'e' letter (expand) to do that.
X.sp
XIf the special 'l' (locate) type is used, then the \fI$fn\fR variable must
Xend with a ':', followed by a file basename. If the answer is a directory,
Xthe file basename will be appended before testing for file existence. This
Xis useful in locate-style questions like this:
X.Ex
Xdflt='~news/lib'
X: no need to specify 'd' or 'f' when 'l' is used
Xfn='l~:active'
Xrp='Where is the active file?'
X. ./getfile
Xactive="\$ans"
X.Ef
XIf the answer to the question is 'none', then the existence checks are skipped
Xand the empty string is returned. Note that since \fIgetfile\fR calls
X\fImyread\fR internally, all the features available with \fImyread\fR apply
Xhere to.
X.PP
XIf a completely expanded value is needed (for instance in a Makefile), you
Xmay use the \fI\$ansexp\fR variable which is always set up properly
Xby \fIgetfile\fR
Xas the expanded version of \fI\$ans\fR. Of course, it will not expand ~name if
Xyou did not allow that in the first place in the \fI\$fn\fR variable.
X.TP
XInhdr.U
XThis unit produces the \fI\$inhdr\fR shell variable, used internally by
X\fIConfigure\fR to check whether a set of headers exist or not. A typical
Xuse is:
X.Ex
Xset header i_header [ header2 i_header2 ... ]
Xeval \$\&inhdr
X.Ef
XThat will print a message, saying whether the header was found or not and
Xset the \fIi_header\fR variable accordingly. If more than one header
Xis specified and the first header is not found, we try the next one, until
Xthe list is empty or one is found.
X.TP
XInlibc.U
XThis unit produces the \fI\$inlibc\fR shell variable, used internally
Xby \fIConfigure\fR to check whether a given C function is defined or not.
XA typical use is:
X.Ex
Xset function d_func
Xeval \$\&inlibc
X.Ef
XThat will print a message, saying whether the function was found or not
Xand set \fI\$d_func\fR accordingly. Internally, it used the \fI\$\&csym\fR
Xroutine.
X.TP
XLoc.U
XThis important unit produces a shell script \fIloc\fR which can be used
Xto find out where in a list of directoris a given file lies.
X.TP
XMailAuthor.U
XThis unit needs to be included on the ?MAKE: line of your own private End.U
Xto make it into \fIConfigure\fR. It offers the user to register himself to
Xthe author, optionally being notified when new patches arrive or receiving
Xthem automatically when issued. You need to install \fImailagent\fR to do
Xthis (at least version 3.0).
X.TP
XMyinit.U
XCopy this unit into your private \fIU\fR directory to add your own default
Xvalues to some internal variables. This unit is loaded into \fIConfigure\fR
Xafter all the default initializations have been done.
X.TP
XMyread.U
XThis unit produces the \fImyread\fR shell script that must be sourced in
Xorder to do a read. It allows shell escapes, default assignment and
Xparameter evaluation, as documented in the Instruct.U unit.
X.sp
XTo use this unit, \fI$rp\fR must hold the question and \fI$dflt\fR should
Xcontain the default answer. The question will be printed by the script
Xitself, and the result is returned in the \fI$ans\fR variable.
X.sp
XHere is a typical usage:
X.Ex
Xdflt='y'
Xrp='Question?'
X. ./myread
Xvalue="\$ans"
X.Ef
XSee the unit itself for more information.
X.TP
XOldconfig.U
XThis unit must be part of your dependency ?MAKE: line when some of your
Xunits tries to reuse an old symbol value. This unit is responsible for
Xgetting the old answers from \fIconfig.sh\fR or providing useful hints
Xwhen running on a given platform for the first time. See the \fIConfigure
XHints\fR paragraph for more information about hints.
X.TP
XSetvar.U
XThis unit produces the \fI$setvar\fR variable, which is used internally
Xby \fIConfigure\fR to set a \fIdefine\fR/\fRundef\fR value to a given symbol,
Xemitting a warning when it suddenly changes from a previous value. For instance:
X.Ex
Xval="\$\&define"
Xset d_variable
Xeval \$\&setvar
X.Ef
XIf the previous \fI\$d_variable\fR value was non-null and \fI\$val\fR is
Xdifferent, a "whoa" warning is issued.
X.TP
XWhoa.U
XThis unit produces the \fIwhoa\fR script, which emits a warning when the
X\fIvalue\fR in variable whose name is \fI\$var\fR is not the same as
Xits old previous value held in \fI\$was\fR. Upon return, \fI\$td\fR and
X\fI\$tu\fR hold the proper value to \fIdefine\fR or \fIundef\fR the variable.
XSee examples in \fIInlibc.U\fR.
X'''
X.SS Builtin Pre-processor
X.PP
XEach unit to be included in \fIConfigure\fR is ran through a built-in
Xpre-processor. Pre-processor statements are introduced by the '@' character
X('#' is the shell comment character). It functions merely as the C
Xpre-processor does but allows for shell and perl escapes. Here are the
Xavailable functions:
X.TP 10
X@if \fIexpression\fR
XIf \fIexpression\fR is true, continue loading code until @end, @elsif or @else.
X.TP
X@elsif \fIexpression\fR
XAlternative choice. If \fIexpression\fR is true, continue loading code until
X@end, another @elsif or @else.
X.TP
X@else
XDefault code to be loaded if the @if \fIexpression\fR was false and none
Xof the optional @elsif matched. Load until @end.
X.TP
X@end
XClose the conditional loading statement opened by @if.
X.TP
X@define \fIsymbol\fR
XTells the pre-processor that \fIsymbol\fR is defined from now on.
X.PP
XThe conditional \fIexpression\fR can include symbol names (value is
Xtrue if symbol is wanted or defined via \fI@define\fR or shell/perl
Xescapes. Those atoms can be combined using the traditional boolean
Xoperators '!' for negation, '&&' for logical and, and '||' for logical
Xor.
X.PP
XText enclosed within single brackets is a shell test, while text between
Xdouble brakets is a perl test. Namely the expressions:
X.Ex
X{ \fIshell text\fR }
X{{ \fIperl text\fR }}
X.Ef
Xare translated into:
X.Ex
Xif \fIshell text\fR >/dev/null 2>&1; then exit 0; else exit 1; fi
Xif (\fIperl text\fR) {exit 0;} else {exit 1;}
X.Ef
Xand the exit status is used in the standard way to get a boolean value,
Xi.e. 0 is true and everything else is false. Note that only simple
Xconditions can be expressed in perl, until some complex code can be
Xloaded within \fImetaconfig\fR and executed.
X.PP
XThe built-in pre-processor can be used to finely tune some units
X(see \fId_gethname.U\fR for a complex example) depending on the symbols
Xactually used by the program or the files present in the distribution.
XFor instance, the \fIOldconfig.U\fR uses a test like:
X.Ex
X@if {test -d ../hints}
X.Ef
Xand \fIConfigure\fR will contain hint-dependent code only if there is
Xa \fIhints\fR directory in the package's top level directory. Note that
Xtests are ran from within the '\fI.MT\fR' directory, hence the needed
X'../' in the test.
X.PP
XThe pre-processor can also be used to avoid putting useless code when
Xa symbol is not defined. Units defining more than one symbol can be
Xprotected that way (since the unit is loaded as a whole) by gathering
Xsymbol-dependent code within an @if/@end pair. For instance:
X.Ex
X@if I_TIME || I_SYS_TIME || I_SYS_TIME_KERNEL
Xneed_time_h='true'
X@else
Xneed_time_h='false'
X@end
X.Ef
Xwill test whether the source code makes any use of one of the three
Xsymbols that control the \fItime.h\fR or \fIsys/time.h\fR inclusion
Xand define the shell symbol accordingly. That gives \fIConfigure\fR
Xa feedback on what the sources need and avoid the drawback of having
Xfixed frozen units.
X.PP
XVia the '?W:' lines, you can get intersting combinations. For instance,
Xthe \fIi_time.U\fR unit needs to know whether the C sources make any
Xuse of the \fIstruct timezone\fR type. Therefore, the line:
X.Ex
X?W::timezone
X.Ef
Xis used for its side-effect of defining the symbol \fItimezone\fR for
Xthe pre-processor. The unit code can then say:
X.Ex
X@if timezone
Xfor s_timezone in '-DS_TIMEZONE' ''; do
X@else
Xs_timezone=''
X@end
X
X\&... code using s_timezone ...
X
X@if timezone
Xdone
X@end
X.Ef
Xand have an extra loop trying two successive values for the \fIs_timezone\fR
Xvariable, but only if needed.
X'''
X.SS Obsolete Symbols
X.PP
XObsolete symbols are preserved to ease the transition with older
X.I metaconfig
Xunits. Unless the \fB\-o\fR switch is passed to \fImetaconfig\fR they will
Xbe ignored. However, an \fIObsolete\fR file will be generated, telling you
Xwhich files are making use of those obsolete symbols and what are the new
Xsymbols to be used.
X.PP
XThe lifetime for obsolete symbols is one full revision, i.e. they will
Xbe removed when the next base revision is issued (patch upgrades do not
Xcount of course). Therefore, it is wise to translate your sources and
Xstart using the new symbols as soon as possible.
X'''
X.SS Configure Hints
X.PP
XIt may happen that the internal configuration logic makes the wrong choices.
XFor instance, on some platform, the \fIvfork()\fR system call is present but
Xbroken, so it should not be used. It is not possible to include that knowledge
Xin the units themselves, because that might be a temporary problem which the
Xvendor will eventually fix, or something that was introduced by a new OS
Xupgrade.
X.PP
XAnyway, for all those tiny little problems that are too system-specific,
X\fImetaconfig\fR provides hint files support. To use it, you need to create
Xa \fIhints\fR directory in the package's top level directory, and have it
Xwhen you run \fImetaconfig\fR. That will load the hint-related part from
X\fIOldconfig.U\fR.
X.PP
XFrom then on, you may pre-set some of the shell variables \fIConfigure\fR uses
Xin an OS-specific .sh file. There is code in \fIOldconfig.U\fR that tries
Xto guess which hint files are needed by computing a standard name based
Xon the system OS name, the kernel name, the release number, etc... Since
Xthis information is likely to change rapidly, I'm not documenting it here.
XYou have to reverse engineer the code from \fIOldconfig.U\fR.
X.PP
XWhen you first release your package, your hints file directory should be empty.
XIf the users of your package complain that they have problem with
X\fIConfigure\fR defaults on a particular system, you have to see whether this
Xis a platform-specific problem or a general one. In the former case, it's
Xtime to introduce a new hint file, while in the latter, the corresponding
Xunit should be revised.
X.PP
XFor instance, SGI systems are known to have a broken \fIvfork()\fR system
Xcall, as of this writing. And the corresponding hint file name is \fIsgi.sh\fR.
XSo all you need to do is create a \fIhints/sgi.sh\fR file in which you write:
X.Ex
Xd_vfork="\$\&define"
X.Ef
Xwhich will always remap \fIvfork\fR on \fIfork\fR (see \fId_vfork.U). When
Xrunning on SGI systems for the first time, \fIConfigure\fR will detect that
Xthere is an \fIhints/sgi.sh\fR file, and that we are on an IRIX machine
X(the kernel name is /irix), therefore it will propose \fIsgi\fR as a possible
Xhint. If the user accepts it, and since the \fI\$\&d_vfork\fR value is modified
Xvia the \fI$\&setvar\fR call, a \fIwhoa!\fR will be emitted to warn that we
Xare about to override the value computed by \fIConfigure\fR.
X.PP
XNote that you don't have to provide \fIall\fR the hints known by
X\fIOldconfig.U\fR. If a hint file is missing, it will not be proposed as a
Xpossible choice. The heuristic tests ran to compute the possible hint
Xcandidates are flaky. If you have new values or different tests, please send
Xthem to me...
X'''
X.SS Overriding Choices
X.PP
XIf you create a \fIconfig.over\fR file in the top level directory,
X\fIConfigure\fR will ask you if you wish to load it to override the default
Xvalues. This is done prior creation of the \fIconfig.sh\fR file, so it gives
Xyou a chance to patch the values stored in there.
X.PP
XThis is distinct from the hints approach in that it is a local file, which
Xthe user is free to create for his own usage. You should not provide such
Xa file yourself, but let the user know about this possibility.
X'''
X.SS Configure Options
X.PP
XThe \fIConfigure\fR script may be called with some options specified on the
Xcommand line, to slightly modify its behaviour. Here are the allowed options:
X.TP 10
X.B \-d
XUse defaults for all answers.
X.TP
X.B \-e
XGo on without questioning past the production of \fIconfig.sh\fR.
X.TP
X.B \-f \fIfile\fR
XUse the specified file as a default configuration. If this switch is not
Xused, the configuration is taken from \fIconfig.sh\fR, when present.
X.TP
X.B \-h
XPrint help message and exit.
X.TP
X.B \-r
XReuse C symbols value if possible. This will skip the costly \fInm\fR
Xsymbol extraction. If used the first time (with no previous configuration
Xfile), \fIConfigure\fR will try to compile and link a small program in order
Xto know about the presence of a symbol, or absence thereof.
X.TP
X.B \-s
XSilent mode. Only strings printed on file descriptor #4 will be seen on
Xthe screen (that's the important messages). It's not possible to completely
Xturn off any output, but you may use '\fIConfigure -ders >/dev/null 2>&1\fR'
Xto have a full batch run with no output and no user interaction required.
X.TP
X.B \-E
XStop at the end of the configuration questions, after having produced
Xa \fIconfig.sh\fR. This will not perform any '\fImake depend\fR' or .SH files
Xextraction.
X.TP
X.B \-S
XPerform variable substitution on all the .SH files. You can combine it with the
X\fB\-f\fR switch to propagate any configuration you like.
X.TP
X.B \-V
XPrint the version number of the \fImetaconfig\fR that generated this
X.I Configure
Xscript and exit.
X'''
X.SS Unit Templates
X.PP
XThere is a set of unit templates in the \fImetaconfig\fR source directory,
Xwhich are intended to be used by a (not yet written) program to quickly
Xproduce new units for various kind of situations. No documentation for this
Xunfinished project, but I thought I would mention it in the manual page in
Xcase you wish to do it yourself and then contribute it...
X.SH AUTHORS
XLarry Wall <lwall@netlabs.com> for version 2.0.
X.br
XHarlan Stenn <harlan@mumps.pfcs.com> for important unit extensions.
X.br
XRaphael Manfredi <ram@acri.fr>
X.br
XMany other contributors for the
X\fImetaconfig\fR units. See the credit file for a list.
X.SH FILES
X.TP 10
X.PD 0
XLIB/dist/mcon/U/*.U
XPublic unit files
X.TP
XU/*.U
XPrivate unit files
X.TP
XLIB/dist/mcon/Glossary
XGlossary file, describing all the metaconfig symbols.
X.TP
XObsolete
XLists all the obsolete symbols used by the sources.
X.TP
XWanted
XLists all the wanted symbols.
X.PD
X.sp
X.in +5
Xwhere LIB is $privlibexp.
X.in -5
X.SH BUGS
XUnits are sometimes included unnecessarily if one of its symbols is
Xaccidentally mentioned, e.g. in a comment.
XBetter too many units than too few, however.
X.SH "SEE ALSO"
Xpat($manext), makeSH($manext), makedist($manext), metalint($manext)
X!GROK!THIS!
Xchmod 444 metaconfig.$manext
END_OF_FILE
  if test 18155 -ne `wc -c <'mcon/man/mconfig.SH.02'`; then
    echo shar: \"'mcon/man/mconfig.SH.02'\" unpacked with wrong size!
  fi
  # end of 'mcon/man/mconfig.SH.02'
fi
echo shar: End of archive 6 \(of 28\).
cp /dev/null ark6isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 28 archives.
    echo "Please run PACKNOTES through sh, read REAMDE and then type Configure."
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0

exit 0 # Just in case...
