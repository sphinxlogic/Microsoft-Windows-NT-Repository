Newsgroups: comp.sources.misc
From: Raphael Manfredi <ram@acri.fr>
Subject: v39i023:  dist-3.0 - Configure script generator and related tools, Part19/28
Message-ID: <1993Aug19.131509.5900@sparky.sterling.com>
X-Md4-Signature: 8dcd2de9e40f5f2aa7aef6d2935eabde
Sender: kent@sparky.sterling.com (Kent Landfield)
Organization: Advanced Computer Research Institute, Lyon, France.
Date: Thu, 19 Aug 1993 13:15:09 GMT
Approved: kent@sparky.sterling.com

Submitted-by: Raphael Manfredi <ram@acri.fr>
Posting-number: Volume 39, Issue 23
Archive-name: dist-3.0/part19
Environment: UNIX, Perl, RCS

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# Contents:  bin/manicheck.SH kit/makeSH mcon/U/Config_sh.U
#   mcon/U/Csym.U mcon/U/Oldsym.U mcon/U/abortsig.U mcon/U/cc.U
#   mcon/U/d_PORTAR.U mcon/U/d_pidcheck.U mcon/U/d_portable.U
#   mcon/U/d_regcmp.U mcon/U/d_scannl.U mcon/U/d_time.U
#   mcon/U/sig_name.U mcon/U/spitshell.U mcon/U/vaproto.U
#   mcon/U/yacc.U mcon/files/keyword.U mcon/files/shell.U
#   mcon/pl/cosmetic.pl mcon/pl/xref.pl pl/copyright.pl
# Wrapped by ram@soft208 on Wed Aug 18 14:42:23 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 19 (of 28)."'
if test -f 'bin/manicheck.SH' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bin/manicheck.SH'\"
else
  echo shar: Extracting \"'bin/manicheck.SH'\" \(1948 characters\)
  sed "s/^X//" >'bin/manicheck.SH' <<'END_OF_FILE'
Xcase $CONFIG in
X'')
X	if test -f config.sh; then TOP=.;
X	elif test -f ../config.sh; then TOP=..;
X	elif test -f ../../config.sh; then TOP=../..;
X	elif test -f ../../../config.sh; then TOP=../../..;
X	elif test -f ../../../../config.sh; then TOP=../../../..;
X	else
X		(echo "Can't find config.sh."; exit 1)
X	fi
X	. $TOP/config.sh
X	;;
Xesac
Xcase "$0" in
X*/*) cd `expr X$0 : 'X\(.*\)/'` ;;
Xesac
Xecho "Extracting bin/manicheck (with variable substitutions)"
X$spitshell >manicheck <<!GROK!THIS!
X$startsh
X!GROK!THIS!
X$spitshell >>manicheck <<'!NO!SUBS!'
X# $Id: manicheck.SH,v 3.0 1993/08/18 12:04:02 ram Exp $
X#
X#  Copyright (c) 1991-1993, Raphael Manfredi
X#  
X#  You may redistribute only under the terms of the Artistic Licence,
X#  as specified in the README file that comes with the distribution.
X#  You may reuse parts of this distribution only within the terms of
X#  that same Artistic Licence; a copy of which may be found at the root
X#  of the source tree for dist 3.0.
X#
X# Original Author: Harlan Stenn <harlan@mumps.pfcs.com>
X#
X# $Log: manicheck.SH,v $
X# Revision 3.0  1993/08/18  12:04:02  ram
X# Baseline for dist 3.0 netwide release.
X#
X
Xfind . ! -type d -print | sed -e '
Xs|^./||
X/RCS\//d
X/UU\//d
X/core$/d
X/\.bak$/d
X/\.orig$/d
X' | sort > check.present
X
Xmanifest=''
Xif test -r MANIFEST.new; then
X	manifest='MANIFEST.new'
Xelse
X	if test -r MANIFEST; then
X		manifest='MANIFEST'
X	else
X		echo "No MANIFEST.new or MANIFEST file--don't know what to look for."
X	fi
Xfi
X
Xawk '{print $1}' $manifest | sort > check.expected
X
Xcomm -23 check.expected check.present > check.want
Xcomm -13 check.expected check.present > check.extra
X
Xrm -f check.expected check.present
X
Xif test -s check.want; then
X	echo "Some files listed in $manifest are missing; see check.want."
Xelse
X	rm check.want
Xfi
X
Xif test -s check.extra; then
X	echo "Some files not listed in $manifest are present; see check.extra."
Xelse
X	rm check.extra
Xfi
X!NO!SUBS!
Xchmod 755 manicheck
X$eunicefix manicheck
END_OF_FILE
  if test 1948 -ne `wc -c <'bin/manicheck.SH'`; then
    echo shar: \"'bin/manicheck.SH'\" unpacked with wrong size!
  fi
  chmod +x 'bin/manicheck.SH'
  # end of 'bin/manicheck.SH'
fi
if test -f 'kit/makeSH' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'kit/makeSH'\"
else
  echo shar: Extracting \"'kit/makeSH'\" \(2074 characters\)
  sed "s/^X//" >'kit/makeSH' <<'END_OF_FILE'
X#!/bin/sh
X
X# $Id: makeSH,v 3.0 1993/08/18 12:04:26 ram Exp $
X#
X#  Copyright (c) 1991-1993, Raphael Manfredi
X#  
X#  You may redistribute only under the terms of the Artistic Licence,
X#  as specified in the README file that comes with the distribution.
X#  You may reuse parts of this distribution only within the terms of
X#  that same Artistic Licence; a copy of which may be found at the root
X#  of the source tree for dist 3.0.
X#
X# Original Author: Larry Wall <lwall@netlabs.com>
X#
X# $Log: makeSH,v $
X# Revision 3.0  1993/08/18  12:04:26  ram
X# Baseline for dist 3.0 netwide release.
X#
X
Xfor file do
X	if test -f $file.SH; then
X		mv $file.SH $file.SH.old
X		echo "makeSH: renaming $file.SH as $file.SH.old."
X    fi
X	base=`basename $file`
X
X	cat >$file.SH <<BLURFL
Xcase \$CONFIG in
X'')
X	if test -f config.sh; then TOP=.;
X	elif test -f ../config.sh; then TOP=..;
X	elif test -f ../../config.sh; then TOP=../..;
X	elif test -f ../../../config.sh; then TOP=../../..;
X	elif test -f ../../../../config.sh; then TOP=../../../..;
X	else
X		(echo "Can't find config.sh."; exit 1)
X	fi
X	. \$TOP/config.sh
X	;;
Xesac
X: This forces SH files to create target in same directory as SH file.
X: This is so that make depend always knows where to find SH derivatives.
Xcase "\$0" in
X*/*) cd \`expr X\$0 : 'X\(.*\)/'\` ;;
Xesac
Xecho "Extracting $file (with variable substitutions)"
X: This section of the file will have variable substitutions done on it.
X: Move anything that needs config subs from !NO!SUBS! section to !GROK!THIS!.
X: Protect any dollar signs and backticks that you do not want interpreted
X: by putting a backslash in front.  You may delete these comments.
X\$spitshell >$base <<!GROK!THIS!
XBLURFL
X
X	case `head -1 $file` in
X	*/bin/sh) echo '$startsh' >>$file.SH ;;
X	esac
X
X	cat >>$file.SH <<BLURFL
X!GROK!THIS!
X
X: In the following dollars and backticks do not need the extra backslash.
X\$spitshell >>$base <<'!NO!SUBS!'
XBLURFL
X
X	sed -e '1{' -e '/#!.*\/bin\/sh$/d' -e '}' $file >>$file.SH
X    
X	cat >>$file.SH <<BLURFL
X!NO!SUBS!
Xchmod 755 $base
X\$eunicefix $base
XBLURFL
X	chmod 755 $file.SH
Xdone
END_OF_FILE
  if test 2074 -ne `wc -c <'kit/makeSH'`; then
    echo shar: \"'kit/makeSH'\" unpacked with wrong size!
  fi
  # end of 'kit/makeSH'
fi
if test -f 'mcon/U/Config_sh.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/Config_sh.U'\"
else
  echo shar: Extracting \"'mcon/U/Config_sh.U'\" \(1941 characters\)
  sed "s/^X//" >'mcon/U/Config_sh.U' <<'END_OF_FILE'
X?RCS: $Id: Config_sh.U,v 3.0 1993/08/18 12:04:48 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: Config_sh.U,v $
X?RCS: Revision 3.0  1993/08/18  12:04:48  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?X: 
X?X: This unit ends up producing the config.sh script, which contains all the
X?X: definitions figured out by Configure.  The add.Config_sh command knows
X?X: which variables need to be remembered.  It also adds the EOT (ends the
X?X: here document redirection with variable substitution).
X?X: 
X?MAKE:Config_sh: cf_time cf_by test spitshell startsh myuname Myread \
X	End Obsol_sh
X?MAKE:	-pick add.Config_sh $@ %<
X?MAKE:	-pick add $@ ./Obsol_sh
X?MAKE:	-pick close.Config_sh $@ %<
X: back to where it started
Xif test -d ../UU; then
X	cd ..
Xfi
X
X: configuration may be patched via a 'config.over' file
Xif $test -f config.over; then
X	echo " "
X	dflt=y
X	rp='I see a config.over file.  Do you wish to load it?'
X	. UU/myread
X	case "$ans" in
X	n*) echo "OK, I'll ignore it.";;
X	*)	. ./config.over
X		echo "Configuration override changes have been loaded."
X		;;
X	esac
Xfi
X
X: create config.sh file
Xecho " "
Xecho "Creating config.sh..." >&4
X$spitshell <<EOT >config.sh
X$startsh
X#
X# This file was produced by running the Configure script. It holds all the
X# definitions figured out by Configure. Should you modify one of these values,
X# do not forget to propagate your changes by running "Configure -der". You may
X# instead choose to run each of the .SH files by yourself, or "Configure -S".
X#
X
X# Configuration time: $cf_time
X# Configured by: $cf_by
X# Target system: $myuname
X
END_OF_FILE
  if test 1941 -ne `wc -c <'mcon/U/Config_sh.U'`; then
    echo shar: \"'mcon/U/Config_sh.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/Config_sh.U'
fi
if test -f 'mcon/U/Csym.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/Csym.U'\"
else
  echo shar: Extracting \"'mcon/U/Csym.U'\" \(1938 characters\)
  sed "s/^X//" >'mcon/U/Csym.U' <<'END_OF_FILE'
X?RCS: $Id: Csym.U,v 3.0 1993/08/18 12:04:50 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: Csym.U,v $
X?RCS: Revision 3.0  1993/08/18  12:04:50  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:Csym: contains libc libs runnm +cc +ccflags rm
X?MAKE:	-pick add $@ %<
X?LINT:define csym
X?LINT:use libc
X?S:csym:
X?S:	This shell variable is used internally by Configure to check
X?S:	wether a given C symbol is defined or not. A typical use is:
X?S:		set symbol result [-fva] [previous]
X?S:		eval $csym
X?S:	That will set result to 'true' if the function [-f], variable [-v]
X?S:	or array [-a] is defined, 'false' otherwise. If a previous value is
X?S:	given and the -r flag was provided on the command line, that value
X?S:	is reused without questioning.
X?S:.
X?V:csym
X?T:tval tx tlook tf tdc tc
X: is a C symbol defined?
Xcsym='tlook=$1;
Xcase "$3" in
X-v) tf=libc.tmp; tc=""; tdc="";;
X-a) tf=libc.tmp; tc="[0]"; tdc=[];;
X*) tlook="^$1\$"; tf=libc.list; tc="()"; tdc="()";;
Xesac;
Xtx=yes;
Xcase "$reuseval-$4" in
Xtrue-) ;;
Xtrue-*) tx=no; eval "tval=\$$4"; case "$tval" in "") tx=yes;; esac;;
Xesac;
Xcase "$tx" in
Xyes)
X	case "$runnm" in
X	true)
X		if $contains $tlook $tf >/dev/null 2>&1;
X		then tval=true;
X		else tval=false;
X		fi;;
X	*)
X?X: put symbol inside a printf to fool optimizing compilers...
X		echo "main() { extern int $1$tdc; printf(\"%d\", $1$tc); }" > t.c;
X		if $cc $ccflags -o t t.c $libs >/dev/null 2>&1;
X		then tval=true;
X		else tval=false;
X		fi;
X		$rm -f t t.c;;
X	esac;;
X*)
X	case "$tval" in
X	$define) tval=true;;
X	*) tval=false;;
X	esac;;
Xesac;
Xeval "$2=$tval'
X
END_OF_FILE
  if test 1938 -ne `wc -c <'mcon/U/Csym.U'`; then
    echo shar: \"'mcon/U/Csym.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/Csym.U'
fi
if test -f 'mcon/U/Oldsym.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/Oldsym.U'\"
else
  echo shar: Extracting \"'mcon/U/Oldsym.U'\" \(2084 characters\)
  sed "s/^X//" >'mcon/U/Oldsym.U' <<'END_OF_FILE'
X?RCS: $Id: Oldsym.U,v 3.0 1993/08/18 12:05:13 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: Oldsym.U,v $
X?RCS: Revision 3.0  1993/08/18  12:05:13  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?X: 
X?X: This unit follows the creation of the config.sh file. It adds some
X?X: special symbols: defines from patchlevel.h file if any and CONFIG,
X?X: which is set to true. Then, we try to keep all the new symbols that
X?X: may come from a hint file or a previous config.sh file.
X?X: 
X?MAKE:Oldsym: Config_sh test hint
X?MAKE:	-pick add $@ %<
X?T:CONFIG sym tmp s
X: add special variables
X$test -f patchlevel.h && \
Xawk '/^#define/ {printf "%s=%s\n",$2,$3}' patchlevel.h >>config.sh
Xecho "CONFIG=true" >>config.sh
X
X: propagate old symbols
Xif $test -f UU/config.sh; then
X?X: Make sure each symbol is unique in oldconfig.sh
X	<UU/config.sh sort | uniq >UU/oldconfig.sh
X?X:
X?X: All the symbols that appear twice come only from config.sh (hence the
X?X: two config.sh in the command line). These symbols will be removed by
X?X: the uniq -u command. The oldsyms file thus contains all the symbols
X?X: that did not appear in the produced config.sh (Larry Wall).
X?X:
X	sed -n 's/^\([a-zA-Z_0-9]*\)=.*/\1/p' config.sh config.sh UU/oldconfig.sh |\
X	sort | uniq -u >UU/oldsyms
X	set X `cat UU/oldsyms`
X	shift
X	case $# in
X	0) ;;
X	*)
X		cat <<EOM
XHmm...You had some extra variables I don't know about...I'll try to keep 'em...
XEOM
X		echo "# Variables propagated from previous config.sh file." >>config.sh
X		for sym in `cat UU/oldsyms`; do
X			echo "    Propagating $hint variable "'$'"$sym..."
X			eval 'tmp="$'"${sym}"'"'
X			echo "$tmp" | \
X				sed -e "s/'/'\"'\"'/g" -e "s/^/$sym='/" -e "s/$/'/" >>config.sh
X		done
X		;;
X	esac
Xfi
X
END_OF_FILE
  if test 2084 -ne `wc -c <'mcon/U/Oldsym.U'`; then
    echo shar: \"'mcon/U/Oldsym.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/Oldsym.U'
fi
if test -f 'mcon/U/abortsig.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/abortsig.U'\"
else
  echo shar: Extracting \"'mcon/U/abortsig.U'\" \(2024 characters\)
  sed "s/^X//" >'mcon/U/abortsig.U' <<'END_OF_FILE'
X?RCS: $Id: abortsig.U,v 3.0 1993/08/18 12:05:20 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: abortsig.U,v $
X?RCS: Revision 3.0  1993/08/18  12:05:20  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:abortsig: Myread Oldconfig Guess cat +cc ccflags rm
X?MAKE:	-pick add $@ %<
X?S:abortsig:
X?S:	This variable holds the name of the signal used by the abort() call.
X?S:.
X?C:ABORTSIG:
X?C:	This symbol holds the signal number (symbol) used by the abort() call. To
X?C:	actually define the signal symbol, <signal.h> should be included.
X?C:.
X?H:#define ABORTSIG $abortsig		/**/
X?H:.
X?T:signal
X: which signal is sent by abort ?
Xecho " "
Xcase "$abortsig" in
X'')
X	echo "Checking to see which signal is sent to the process by abort()..." >&4
X	echo "abort" > abort.sh
X	chmod +x abort.sh
X?X: SIGABRT should replace SIGIOT on USG machines in a near future (1991).
X	for signal in SIGIOT SIGILL SIGABRT; do
X		case "$abortsig" in
X		'') $cat >abort.c <<EOP
X#include <signal.h>
Xcaught() { exit(0); }
Xmain()
X{
X#ifdef $signal
X	signal($signal, caught);
X#endif
X	if (-1 == abort())
X		exit(1);
X	exit(1);
X}
XEOP
X?X: We have to use the abort.sh script otherwise sh behaves strangely on AIX.
X			if $cc $ccflags -o abort abort.c >/dev/null 2>&1; then
X				(./abort.sh) >/dev/null 2>&1
X				case $? in
X				0) abortsig="$signal";;
X				esac
X			fi
X			;;
X		esac
X	done
X	;;
Xesac
Xcase "$abortsig" in
X'') echo "(I wasn't able to compute the signal name--guessing)"
X	if usg; then
X		dflt="SIGIOT"
X	else
X		dflt="SIGILL"
X	fi;;
X*)  dflt="$abortsig"
X	;;
Xesac
Xrp="Which signal does abort() send to the process (signal name)?"
X. ./myread
Xabortsig="$ans"
X$rm -f core abort.sh abort abort.c
X
END_OF_FILE
  if test 2024 -ne `wc -c <'mcon/U/abortsig.U'`; then
    echo shar: \"'mcon/U/abortsig.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/abortsig.U'
fi
if test -f 'mcon/U/cc.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/cc.U'\"
else
  echo shar: Extracting \"'mcon/U/cc.U'\" \(1978 characters\)
  sed "s/^X//" >'mcon/U/cc.U' <<'END_OF_FILE'
X?RCS: $Id: cc.U,v 3.0 1993/08/18 12:05:30 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: cc.U,v $
X?RCS: Revision 3.0  1993/08/18  12:05:30  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:cc: cat contains sysman +large cpp Mcc Myread Guess Oldconfig Loc
X?MAKE:	-pick add $@ %<
X?S:cc:
X?S:	This variable holds the name of a command to execute a C compiler which
X?S:	can resolve multiple global references that happen to have the same
X?S:	name.  Usual values are "cc", "Mcc", "cc -M", and "gcc".
X?S:.
X?D:cc='cc'
X?LINT:change cpp
X: see if we need a special compiler
Xecho " "
Xif usg; then
X	case "$cc" in
X	'') case "$Mcc" in
X		/*) dflt='Mcc';;
X		*) case "$large" in
X			-M*) dflt='cc';;
X			*)	if $contains '\-M' $sysman/cc.1 >/dev/null 2>&1 ; then
X					if $contains '\-M' $sysman/cpp.1 >/dev/null 2>&1; then
X						dflt='cc'
X					else
X						dflt='cc -M'
X					fi
X				else
X					dflt='cc'
X				fi;;
X			esac;;
X		esac;;
X	*)  dflt="$cc";;
X	esac
X	$cat <<'EOM'
XOn some systems the default C compiler will not resolve multiple global
Xreferences that happen to have the same name.  On some such systems the "Mcc"
Xcommand may be used to force these to be resolved.  On other systems a "cc -M"
Xcommand is required.  (Note that the -M flag on other systems indicates a
Xmemory model to use!) If you have the Gnu C compiler, you might wish to use
Xthat instead.
X
XEOM
X	rp="What command will force resolution on this system?"
X	. ./myread
X	cc="$ans"
Xelse
X	case "$cc" in
X	'') dflt=cc;;
X	*) dflt="$cc";;
X	esac
X	rp="Use which C compiler?"
X	. ./myread
X	cc="$ans"
Xfi
Xcase "$cc" in
Xgcc*) cpp=`./loc gcc-cpp $cpp $pth`;;
Xesac
X
END_OF_FILE
  if test 1978 -ne `wc -c <'mcon/U/cc.U'`; then
    echo shar: \"'mcon/U/cc.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/cc.U'
fi
if test -f 'mcon/U/d_PORTAR.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_PORTAR.U'\"
else
  echo shar: Extracting \"'mcon/U/d_PORTAR.U'\" \(1926 characters\)
  sed "s/^X//" >'mcon/U/d_PORTAR.U' <<'END_OF_FILE'
X?RCS: $Id: d_PORTAR.U,v 3.0 1993/08/18 12:05:40 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_PORTAR.U,v $
X?RCS: Revision 3.0  1993/08/18  12:05:40  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_PORTAR: cat +cc rm Setvar
X?MAKE:	-pick add $@ %<
X?S:d_PORTAR:
X?S:	This variable conditionally handles definition of PORTAR,
X?S:	a creation of greater minds than I can imagine.
X?S:.
X?C:PORTAR:
X?C:	This manifest constant must be defined to 1 for some implementations
X?C:	of ar.h to get the portable ar most everybody uses.
X?C:.
X?L:ar_fmag:
X?L:ARFMAG:
X?L:SARMAG:
X?H:#$d_PORTAR PORTAR 1	/**/
X?H:.
X?LINT:set d_PORTAR
X: see if we need to define PORTAR
Xecho " "
Xecho 'Checking to see if we need to define PORTAR for portable archives...' >&4
X$cat >portar.c <<'EOCP'
X#include <ar.h>
Xmain() {
X	char *arfmag = ARFMAG;
X	int sarmag = SARMAG;
X	struct ar_hdr arh;
X
X	strncpy(arh.ar_fmag, arfmag, 2);
X
X#ifdef PORTAR
X	printf("D\n");
X#else
X	printf("U\n");
X#endif
X	exit(0);}
XEOCP
Xif $cc portar.c -o portar >/dev/null 2>&1 || \
X	$cc -DPORTAR=1 portar.c -o portar >/dev/null 2>&1 ; then
X	case "`./portar`" in
X	D)
X		val="$define"
X		echo "We'll be defining PORTAR for you."
X		;;
X	U)
X		val="$undef"
X		echo "We don't seem to need PORTAR defined here."
X		;;
X	*)
X		val="$define"
X		echo "(My test program gave me an unexpected value!)"
X		echo "I'll just define PORTAR to be sure."
X		;;
X	esac
Xelse
X	echo "(Strange, I couldn't get my test program to compile.)"
X	echo "We'll just define PORTAR in this case."
X	val="$define"
Xfi
Xset d_PORTAR
Xeval $setvar
X$rm -f portar*
X
END_OF_FILE
  if test 1926 -ne `wc -c <'mcon/U/d_PORTAR.U'`; then
    echo shar: \"'mcon/U/d_PORTAR.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_PORTAR.U'
fi
if test -f 'mcon/U/d_pidcheck.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_pidcheck.U'\"
else
  echo shar: Extracting \"'mcon/U/d_pidcheck.U'\" \(1901 characters\)
  sed "s/^X//" >'mcon/U/d_pidcheck.U' <<'END_OF_FILE'
X?RCS: $Id: d_pidcheck.U,v 3.0 1993/08/18 12:06:46 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_pidcheck.U,v $
X?RCS: Revision 3.0  1993/08/18  12:06:46  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_pidcheck: cat rm +cc
X?MAKE:	-pick add $@ %<
X?S:d_pidcheck:
X?S:	This variable conditionally defines the variable PIDCHECK
X?S:	which indicates that kill(pid, 0) will check for an active pid.
X?S:.
X?C:PIDCHECK:
X?C:	This symbol, if defined, means that the kill(pid, 0) will
X?C:	check for an active pid (i.e. the kernel will run all the
X?C:	necessary pid checks, but no signal is actually sent).
X?C:.
X?H:#$d_pidcheck PIDCHECK		/**/
X?H:.
X: check for "kill(pid, 0)"
Xecho " "
Xcase "$d_pidcheck" in
X"$define")
Xecho "I already know your system supports kill(pid, 0) for pid checks." >&4
X	;;
X"$undef")
Xecho "We both know your system does not support signal #0 for pid checks." >&4
X	;;
X*)
X	echo "Checking to see if kill(pid, 0) works..." >&4
X	$cat >try.c <<'EOCP'
Xmain()
X	{
X	int	pid, status0, status9;
X
X	if ((pid = fork()) == 0)
X		{
X		sleep(30);
X		exit(1);
X		}
X	status0 = kill(pid, 0);
X	status9 = kill(pid, 9);
X	exit(status0 == status9);
X	}
XEOCP
X	if $cc try.c -o try >/dev/null 2>&1 ; then
X		if ./try >/dev/null 2>&1 ; then
X			echo "Yes, it does marvels."
X			d_pidcheck="$undef"
X		else
X			d_pidcheck="$define"
X			echo "No, it doesn't."
X		fi
X	else
X		echo "(I was unable to compile the test program.)"
X		echo "Your system does not appear to support kill(pid, 0)."
X		d_pidcheck="$undef"
X	fi
X	$rm -f try.c try.o try
X	;;
Xesac
X
END_OF_FILE
  if test 1901 -ne `wc -c <'mcon/U/d_pidcheck.U'`; then
    echo shar: \"'mcon/U/d_pidcheck.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_pidcheck.U'
fi
if test -f 'mcon/U/d_portable.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_portable.U'\"
else
  echo shar: Extracting \"'mcon/U/d_portable.U'\" \(2045 characters\)
  sed "s/^X//" >'mcon/U/d_portable.U' <<'END_OF_FILE'
X?RCS: $Id: d_portable.U,v 3.0 1993/08/18 12:06:48 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_portable.U,v $
X?RCS: Revision 3.0  1993/08/18  12:06:48  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?X:
X?X: The Loc unit is wanted to get the definition of all the locating variables.
X?X:
X?MAKE:d_portable: cat Loc Myread Oldconfig
X?MAKE:	-pick add $@ %<
X?S:d_portable:
X?S:	This variable conditionally defines the PORTABLE symbol, which
X?S:	indicates to the C program that it should not assume that it is
X?S:	running on the machine it was compiled on.
X?S:.
X?C:PORTABLE:
X?C:	This symbol, if defined, indicates to the C program that it should
X?C:	not assume that it is running on the machine it was compiled on.
X?C:	The program should be prepared to look up the host name, translate
X?C:	generic filenames, use PATH, etc.
X?C:.
X?H:#$d_portable PORTABLE	/**/
X?H:.
X?T:file
X: decide how portable to be
Xcase "$d_portable" in
X"$define") dflt=y;;
X*)	dflt=n;;
Xesac
X$cat <<'EOH'
X 
XI can set things up so that your shell scripts and binaries are more portable,
Xat what may be a noticable cost in performance.  In particular, if you
Xask to be portable, the following happens:
X
X     1) Shell scripts will rely on the PATH variable rather than using
X	the paths derived above.
X     2) ~username interpretations will be done at run time rather than
X	by Configure.
X@if PHOSTNAME
X     3) The system name will be determined at run time, if at all possible.
X@end
X
XEOH
Xrp="Do you expect to run these scripts and binaries on multiple machines?"
X. ./myread
Xcase "$ans" in
X	y*) d_portable="$define"
X	for file in $loclist; do
X		eval $file=$file
X	done
X	;;
X	*)  d_portable="$undef" ;;
Xesac
X
END_OF_FILE
  if test 2045 -ne `wc -c <'mcon/U/d_portable.U'`; then
    echo shar: \"'mcon/U/d_portable.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_portable.U'
fi
if test -f 'mcon/U/d_regcmp.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_regcmp.U'\"
else
  echo shar: Extracting \"'mcon/U/d_regcmp.U'\" \(2050 characters\)
  sed "s/^X//" >'mcon/U/d_regcmp.U' <<'END_OF_FILE'
X?RCS: $Id: d_regcmp.U,v 3.0 1993/08/18 12:06:53 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_regcmp.U,v $
X?RCS: Revision 3.0  1993/08/18  12:06:53  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_regcmp d_re_comp: Csym
X?MAKE:	-pick add $@ %<
X?S:d_regcmp:
X?S:	This variable conditionally defines the HAS_REGCMP symbol, which
X?S:	indicates to the C program that the regcmp() routine is available
X?S:	for regular patern matching (usally on System V).
X?S:.
X?S:d_re_comp:
X?S:	This variable conditionally defines the HAS_RECOMP symbol, which
X?S:	indicates to the C program that the re_comp() routine is available
X?S:	for regular patern matching (usally on BSD). If so, it is likely that
X?S:	re_exec() exists.
X?S:.
X?C:HAS_REGCMP (REGCMP):
X?C:	This symbol, if defined, indicates that the regcmp() routine is
X?C:	available to do some regular patern matching (usually on System V).
X?C:.
X?C:HAS_RECOMP (RECOMP):
X?C:	This symbol, if defined, indicates that the re_comp() routine is
X?C:	available to do some regular patern matching (usually on BSD). If so,
X?C:	it is likely that re_exec() be available.
X?C:.
X?H:#$d_regcmp HAS_REGCMP		/* sysV */
X?H:#$d_re_comp HAS_RECOMP		/* BSD */
X?H:.
X?T:val
X: see if regcmp or re_comp exist, for regular pattern matching
Xecho " "
Xif set regcmp val -f d_regcmp; eval $csym; $val; then
X	echo 'regcmp() found.' >&4
X	d_regcmp="$define"
X	d_re_comp="$undef"
Xelif set re_comp val -f d_re_comp; eval $csym; $val; then
X	echo 're_comp() found, assuming re_exec() also exists.' >&4
X	d_re_comp="$define"
X	d_regcmp="$undef"
Xelse
X	echo "No regcmp() nor re_comp() found !! No regular pattern matching." >&4
X	d_regcmp="$undef"
X	d_re_comp="$undef"
Xfi
X
END_OF_FILE
  if test 2050 -ne `wc -c <'mcon/U/d_regcmp.U'`; then
    echo shar: \"'mcon/U/d_regcmp.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_regcmp.U'
fi
if test -f 'mcon/U/d_scannl.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_scannl.U'\"
else
  echo shar: Extracting \"'mcon/U/d_scannl.U'\" \(1889 characters\)
  sed "s/^X//" >'mcon/U/d_scannl.U' <<'END_OF_FILE'
X?RCS: $Id: d_scannl.U,v 3.0 1993/08/18 12:07:00 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_scannl.U,v $
X?RCS: Revision 3.0  1993/08/18  12:07:00  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?X:
X?X:	Does the scanf routine read "\n" corretly ? This is was not
X?X:	the case on AIX...
X?X:
X?MAKE:d_scannl: cat cc ccflags rm Setvar
X?MAKE:	-pick add $@ %<
X?S:d_scannl:
X?S:	This variable conditionally defines SCAN_NL, which indicates
X?S:	wether the C library routines scanf() and friends can deal with
X?S:	a '\n' in the input correctly. They do most of the time.
X?S:.
X?C:SCAN_NL:
X?C:	This symbol is defined if the C library routines scanf() and friends
X?C:	can deal with a '\n' in the input correctly, so that you can say
X?C:	scanf("%d\n"); instead of scanf("%d"); getc(c); to handle the '\n'.
X?C:.
X?H:#$d_scannl SCAN_NL		/* scanf("%d\n") works */
X?H:.
X?LINT:set d_scannl
X: does scanf handle "\n" correctly ?
Xecho " "
Xval="$define"
X?X: I really want to say "\n" instead of '\n', becasue I am refering
X?X:	to the string given as argument to scanf().
Xecho 'Let'"'"'s see if scanf() handles "\\n" correctly...' >&4
X$cat >try.c <<'EOCP'
Xmain()
X{
X	int i = 0, j = 0;
X	scanf("%d\n%d", &i, &j);
X	if (j != 3)
X		exit(1);
X	exit(0);
X}
XEOCP
Xif $cc -o try $ccflags try.c >/dev/null 2>&1; then
X	if ./try <<'EOD'
X2
X3
XEOD
X	then
X		echo "Yes, it does."
X	else
X		echo "No, it doesn't."
X		val="$undef"
X	fi
Xelse
X	echo "(I can't seem to compile the test program. Assuming it does.)"
Xfi
Xset d_scannl
Xeval $setvar
X$rm -f try.* try
X
END_OF_FILE
  if test 1889 -ne `wc -c <'mcon/U/d_scannl.U'`; then
    echo shar: \"'mcon/U/d_scannl.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_scannl.U'
fi
if test -f 'mcon/U/d_time.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_time.U'\"
else
  echo shar: Extracting \"'mcon/U/d_time.U'\" \(1986 characters\)
  sed "s/^X//" >'mcon/U/d_time.U' <<'END_OF_FILE'
X?RCS: $Id: d_time.U,v 3.0 1993/08/18 12:07:45 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_time.U,v $
X?RCS: Revision 3.0  1993/08/18  12:07:45  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?X: Maybe <sys/types.h> should be included?
X?X:INC: i_systypes
X?MAKE:d_time timetype: contains Csym Setvar Findhdr
X?MAKE:	-pick add $@ %<
X?S:d_time:
X?S:	This variable conditionally defines the HAS_TIME symbol, which indicates
X?S:	that the time() routine exists.  The time() routine is normaly
X?S:	provided on UNIX systems.
X?S:.
X?S:timetype:
X?S:	This variable holds the type returned by time(). It can be long,
X?S:	or time_t on BSD sites (in which case <sys/types.h> should be
X?S:	included). Anyway, the type Time_t should be used.
X?S:.
X?C:HAS_TIME (TIMER):
X?C:	This symbol, if defined, indicates that the time() routine exists.
X?C:.
X?C:Time_t (TIMETYPE):
X?C:	This symbol holds the type returned by time(). It can be long,
X?C:	or time_t on BSD sites (in which case <sys/types.h> should be
X?C:	included).
X?C:.
X?H:#$d_time HAS_TIME		/**/
X?H:#define Time_t $timetype		/* Time type */
X?H:.
X?LINT:set d_time
X: see if time exists
Xecho " "
Xif set time val -f d_time; eval $csym; $val; then
X	echo 'time() found.' >&4
X	val="$define"
X	case "$timetype" in
X	'')
X		if $contains 'time_t;' `./findhdr sys/types.h` >/dev/null 2>&1 ; then
X			dflt='time_t';
X		else
X			dflt='long';
X		fi
X		;;
X	*)  dflt="$timetype"
X		;;
X	esac
X	echo " "
X	rp="What type is returned by time() on this sytem?"
X	. ./myread
X	timetype="$ans"
Xelse
X	echo 'time() not found, hope that will do.' >&4
X	val="$undef"
X	timetype='int';
Xfi
Xset d_time
Xeval $setvar
X
END_OF_FILE
  if test 1986 -ne `wc -c <'mcon/U/d_time.U'`; then
    echo shar: \"'mcon/U/d_time.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_time.U'
fi
if test -f 'mcon/U/sig_name.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/sig_name.U'\"
else
  echo shar: Extracting \"'mcon/U/sig_name.U'\" \(2055 characters\)
  sed "s/^X//" >'mcon/U/sig_name.U' <<'END_OF_FILE'
X?RCS: $Id: sig_name.U,v 3.0 1993/08/18 12:09:47 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: sig_name.U,v $
X?RCS: Revision 3.0  1993/08/18  12:09:47  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:sig_name: awk rm sed Findhdr
X?MAKE:	-pick add $@ %<
X?S:sig_name:
X?S:	This variable holds the signal names, space separated. The leading
X?S:	SIG in signals name is removed.
X?S:.
X?C:SIG_NAME:
X?C:	This symbol contains a list of signal names in order. This is intended
X?C:	to be used as a static array initialization, like this:
X?C:		char *sig_name[] = { SIG_NAME };
X?C:	The signals in the list are separated with commas, and each signal
X?C:	is surrounded by double quotes. There is no leading SIG in the signal
X?C:	name, i.e. SIGQUIT is known as "QUIT".
X?C:.
X?H:#define SIG_NAME "`echo $sig_name | sed 's/ /","/g'`"	/**/
X?H:.
X?T:xxx
X: generate list of signal names
Xecho " "
Xcase "$sig_name" in
X'')
X	echo "Generating a list of signal names..." >&4
X	xxx=`./findhdr signal.h`" "`./findhdr sys/signal.h`
X	set X `cat $xxx 2>&1 | $awk '
X$1 ~ /^#define$/ && $2 ~ /^SIG[A-Z0-9]*$/ && $3 ~ /^[1-9][0-9]*$/ {
X	sig[$3] = substr($2,4,20)
X	if (max < $3 && $3 < 60) {
X		max = $3
X	}
X}
X
XEND {
X	for (i = 1; i <= max; i++) {
X		if (sig[i] == "")
X			printf "%d", i
X		else
X			printf "%s", sig[i]
X		if (i < max)
X			printf " "
X	}
X	printf "\n"
X}
X'`
X	shift
X	case $# in
X	0)
X		echo 'kill -l' >/tmp/foo$$
X		set X `csh -f </tmp/foo$$`
X		$rm -f /tmp/foo$$
X		shift
X		case $# in
X		0)set HUP INT QUIT ILL TRAP IOT EMT FPE KILL BUS SEGV SYS PIPE ALRM TERM
X		;;
X		esac
X		;;
X	esac
X	sig_name="ZERO $*"
X	;;
Xesac
Xecho "The following signals are available:"
Xecho $sig_name | tr ' ' '\012' | $sed 's/^/    SIG/'
X
END_OF_FILE
  if test 2055 -ne `wc -c <'mcon/U/sig_name.U'`; then
    echo shar: \"'mcon/U/sig_name.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/sig_name.U'
fi
if test -f 'mcon/U/spitshell.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/spitshell.U'\"
else
  echo shar: Extracting \"'mcon/U/spitshell.U'\" \(1942 characters\)
  sed "s/^X//" >'mcon/U/spitshell.U' <<'END_OF_FILE'
X?RCS: $Id: spitshell.U,v 3.0 1993/08/18 12:09:49 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: spitshell.U,v $
X?RCS: Revision 3.0  1993/08/18  12:09:49  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:spitshell shsharp sharpbang: eunicefix
X?MAKE:	-pick add $@ %<
X?S:spitshell:
X?S:	This variable contains the command necessary to spit out a runnable
X?S:	shell on this system.  It is either cat or a grep -v for # comments.
X?S:.
X?S:shsharp:
X?S:	This variable tells further Configure units whether your sh can
X?S:	handle # comments.
X?S:.
X?S:sharpbang:
X?S:	This variable contains the string #! if this system supports that
X?S:	construct.
X?S:.
X: see if sh knows # comments
Xecho " "
Xecho "Checking your sh to see if it knows about # comments..." >&4
Xif sh -c '#' >/dev/null 2>&1 ; then
X	echo "Your sh handles # comments correctly."
X	shsharp=true
X	spitshell=cat
X	echo " "
X	echo "Okay, let's see if #! works on this system..."
X	echo "#!/bin/cat" >try
X	$eunicefix try
X	chmod +x try
X	./try > today
X	if test -s today; then
X		echo "It does."
X		sharpbang='#!'
X	else
X		echo "#! /bin/cat" > try
X		$eunicefix try
X		chmod +x try
X		./try > today
X		if test -s today; then
X			echo "It does."
X			sharpbang='#! '
X		else
X			echo "It doesn't."
X			sharpbang=': use '
X		fi
X	fi
Xelse
X	echo "Your sh doesn't grok # comments--I will strip them later on."
X	shsharp=false
X	echo "exec grep -v '^[ 	]*#'" >spitshell
X	chmod +x spitshell
X	$eunicefix spitshell
X	spitshell=`pwd`/spitshell
X	echo "I presume that if # doesn't work, #! won't work either!"
X	sharpbang=': use '
Xfi
Xrm -f try today
X
END_OF_FILE
  if test 1942 -ne `wc -c <'mcon/U/spitshell.U'`; then
    echo shar: \"'mcon/U/spitshell.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/spitshell.U'
fi
if test -f 'mcon/U/vaproto.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/vaproto.U'\"
else
  echo shar: Extracting \"'mcon/U/vaproto.U'\" \(1993 characters\)
  sed "s/^X//" >'mcon/U/vaproto.U' <<'END_OF_FILE'
X?RCS: $Id: vaproto.U,v 3.0 1993/08/18 12:09:59 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: Orginal Author: Graham Stoney <greyham@research.canon.oz.au>
X?RCS:
X?RCS: $Log: vaproto.U,v $
X?RCS: Revision 3.0  1993/08/18  12:09:59  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:vaproto: prototype i_stdarg Setvar
X?MAKE:	-pick add $@ %<
X?S:vaproto:
X?S:	This variable conditionally defines CAN_VAPROTO on systems supporting
X?S:	prototype declaration of functions with a variable number of
X?S:	arguments. See also prototype.
X?S:.
X?C:CAN_VAPROTO ~ %<:
X?C:	This variable is defined on systems supporting prototype declaration
X?C:	of functions with a variable number of arguments.
X?C:.
X?C:_V ~ %<:
X?C:	This macro is used to declare function parameters in prototypes for
X?C:	functions with a variable number of parameters. Use double parentheses.
X?C:	For example:
X?C:
X?C:		int printf _V((char *fmt, ...));
X?C:
X?C:	Remember to use the plain simple _() macro when declaring a function
X?C:	with no variable number of arguments, since it might be possible to
X?C:	have a non-effect _V() macro and still get prototypes via _().
X?C:.
X?H:?%<:#$vaproto CAN_VAPROTO	/**/
X?H:?%<:#ifdef CAN_VAPROTO
X?H:?%<:#define	_V(args) args
X?H:?%<:#else
X?H:?%<:#define	_V(args) ()
X?H:?%<:#endif
X?H:.
X?W:%<:_V
X?LINT:set vaproto
X: see if prototypes support variable argument declarations
Xecho " "
Xcase "$prototype$i_stdarg" in
X$define$define)
X	echo "It appears we'll be able to prototype varargs functions."
X	val="$define"
X	;;
X*)
X	echo "Too bad... We won't be using prototyped varargs functions..."
X	val="$undef"
X	;;
Xesac
Xset vaproto
Xeval $setvar
X
END_OF_FILE
  if test 1993 -ne `wc -c <'mcon/U/vaproto.U'`; then
    echo shar: \"'mcon/U/vaproto.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/vaproto.U'
fi
if test -f 'mcon/U/yacc.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/yacc.U'\"
else
  echo shar: Extracting \"'mcon/U/yacc.U'\" \(1956 characters\)
  sed "s/^X//" >'mcon/U/yacc.U' <<'END_OF_FILE'
X?RCS: $Id: yacc.U,v 3.0 1993/08/18 12:10:03 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: yacc.U,v $
X?RCS: Revision 3.0  1993/08/18  12:10:03  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:yacc yaccflags: Guess Myread Oldconfig bison cat test
X?MAKE:	-pick add $@ %<
X?S:yacc:
X?S:	This variable holds the name of the compiler compiler we
X?S:	want to use in the Makefile. It can be yacc or bison -y.
X?S:.
X?S:yaccflags:
X?S:	This variable contains any additional yacc flags desired by the
X?S:	user.  It is up to the Makefile to use this.
X?S:.
X: determine compiler compiler
Xcase "$yacc" in
X'')
X	dflt=yacc;;
X*)
X	dflt="$yacc";;
Xesac
Xecho " "
Xif $test -f "$bison"; then
X	rp='Which compiler compiler (yacc or bison -y) shall I use?'
Xelse
X	rp='Which compiler compiler shall I use?'
Xfi
X. ./myread
Xyacc="$ans"
Xcase "$yacc" in
X*bis*)
X	case "$yacc" in
X	*-y*) ;;
X	*)
X		yacc="$yacc -y"
X		echo "(Adding -y option to bison to get yacc-compatible behaviour.)"
X		;;
X	esac
X	;;
Xesac
X
X@if yaccflags
X: see if we need extra yacc flags
Xdflt="$yaccflags"
Xcase "$dflt" in
X'') dflt=none;;
Xesac
X$cat <<EOH
X
XYour yacc program may need extra flags to normally process the parser sources.
XDo NOT specify any -d or -v flags here, since those are explicitely known
Xby the various Makefiles. However, if your machine has strange/undocumented
Xoptions (like -Sr# on SCO to specify the maximum number of grammar rules), then
Xplease add them here.  To use no flags, specify the word "none".
X
XEOH
Xrp="Any additional yacc flags?"
X. ./myread
Xcase "$ans" in
Xnone) yaccflags='';;
X*) yaccflags="$ans";;
Xesac
X
X@end
END_OF_FILE
  if test 1956 -ne `wc -c <'mcon/U/yacc.U'`; then
    echo shar: \"'mcon/U/yacc.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/yacc.U'
fi
if test -f 'mcon/files/keyword.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/files/keyword.U'\"
else
  echo shar: Extracting \"'mcon/files/keyword.U'\" \(1542 characters\)
  sed "s/^X//" >'mcon/files/keyword.U' <<'END_OF_FILE'
X?RCS: $Id: keyword.U,v 3.0 1993/08/18 12:10:08 ram Exp $
X?RCS:
X?RCS:  Copyright (c) 1991-1993, Raphael Manfredi
X?RCS:  
X?RCS:  You may redistribute only under the terms of the Artistic Licence,
X?RCS:  as specified in the README file that comes with the distribution.
X?RCS:  You may reuse parts of this distribution only within the terms of
X?RCS:  that same Artistic Licence; a copy of which may be found at the root
X?RCS:  of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: keyword.U,v $
X?RCS: Revision 3.0  1993/08/18  12:10:08  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_const: cat cc ccflags Setvar
X?MAKE:	-pick add $@ %<
X?S:d_<KEY>:
X?S:	This variable conditionally defines the HASCONST symbol, which
X?S:	indicates to the C program that this C compiler knows about the
X?S:	<KEY> type.
X?S:.
X?C:HAS<%KEY> ~ %<:
X?C:	This symbol, if defined, indicates that this C compiler knows about
X?C:	the <KEY> type. There is no need to actually test for that symbol
X?C:	within your programs. The mere use of the "<KEY>" keyword will
X?C:	trigger the necessary tests.
X?C:.
X?H:?%<:#$d_<KEY> HAS<%KEY>	/**/
X?H:?%<:#ifndef HAS<%KEY>
X?H:?%<:#define <KEY>
X?H:?%<:#endif
X?H:.
X?W:%<:<KEY>
X?LINT:set d_<KEY>
X?LINT:known <KEY>
X: check for <KEY> keyword
Xecho " "
Xecho 'Checking to see if your C compiler knows about "<KEY>"...'
X$cat ><KEY>.c <<'EOCP'
Xmain()
X{
X	<KEY> char *foo;
X}
XEOCP
Xif $cc -c $ccflags <KEY>.c >/dev/null 2>&1 ; then
X	val="$define"
X	echo "Yup, it does."
Xelse
X	val="$undef"
X	echo "Nope, it doesn't."
Xfi
Xset d_<KEY>
Xeval $setvar
X
END_OF_FILE
  if test 1542 -ne `wc -c <'mcon/files/keyword.U'`; then
    echo shar: \"'mcon/files/keyword.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/files/keyword.U'
fi
if test -f 'mcon/files/shell.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/files/shell.U'\"
else
  echo shar: Extracting \"'mcon/files/shell.U'\" \(1964 characters\)
  sed "s/^X//" >'mcon/files/shell.U' <<'END_OF_FILE'
X?RCS: $Id: shell.U,v 3.0 1993/08/18 12:10:10 ram Exp $
X?RCS:
X?RCS:  Copyright (c) 1991-1993, Raphael Manfredi
X?RCS:  
X?RCS:  You may redistribute only under the terms of the Artistic Licence,
X?RCS:  as specified in the README file that comes with the distribution.
X?RCS:  You may reuse parts of this distribution only within the terms of
X?RCS:  that same Artistic Licence; a copy of which may be found at the root
X?RCS:  of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: shell.U,v $
X?RCS: Revision 3.0  1993/08/18  12:10:10  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:cc: cat contains sysman +large Mcc Myread Guess Oldconfig Loc
X?MAKE:	-pick add $@ %<
X?DEF:cc=cc
X?S:cc:
X?S:	This variable holds the name of a command to execute a C compiler which
X?S:	can resolve multiple global references that happen to have the same
X?S:	name.  Usual values are "cc", "Mcc", "cc -M", and "gcc".
X?S:.
X: see if we need a special compiler
Xecho " "
Xif usg; then
X	case "$cc" in
X	'') case "$Mcc" in
X		/*) dflt='Mcc';;
X		*) case "$large" in
X			-M*) dflt='cc';;
X			*)	if $contains '\-M' $sysman/cc.1 >/dev/null 2>&1 ; then
X					if $contains '\-M' $sysman/cpp.1 >/dev/null 2>&1; then
X						dflt='cc'
X					else
X						dflt='cc -M'
X					fi
X				else
X					dflt='cc'
X				fi;;
X			esac;;
X		esac;;
X	*)  dflt="$cc";;
X	esac
X	$cat <<'EOM'
XOn some systems the default C compiler will not resolve multiple global
Xreferences that happen to have the same name.  On some such systems the "Mcc"
Xcommand may be used to force these to be resolved.  On other systems a "cc -M"
Xcommand is required.  (Note that the -M flag on other systems indicates a
Xmemory model to use!) If you have the Gnu C compiler, you might wish to use
Xthat instead.
X
XEOM
X	rp="What command will force resolution on this system?"
X	. myread
X	cc="$ans"
Xelse
X	case "$cc" in
X	'') dflt=cc;;
X	*) dflt="$cc";;
X	esac
X	rp="Use which C compiler?"
X	. myread
X	cc="$ans"
Xfi
Xcase "$cc" in
Xgcc*) cpp=`loc gcc-cpp $cpp $pth`;;
Xesac
X
END_OF_FILE
  if test 1964 -ne `wc -c <'mcon/files/shell.U'`; then
    echo shar: \"'mcon/files/shell.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/files/shell.U'
fi
if test -f 'mcon/pl/cosmetic.pl' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/pl/cosmetic.pl'\"
else
  echo shar: Extracting \"'mcon/pl/cosmetic.pl'\" \(1998 characters\)
  sed "s/^X//" >'mcon/pl/cosmetic.pl' <<'END_OF_FILE'
X;# $Id: cosmetic.pl,v 3.0 1993/08/18 12:10:20 ram Exp $
X;#
X;#  Copyright (c) 1991-1993, Raphael Manfredi
X;#  
X;#  You may redistribute only under the terms of the Artistic Licence,
X;#  as specified in the README file that comes with the distribution.
X;#  You may reuse parts of this distribution only within the terms of
X;#  that same Artistic Licence; a copy of which may be found at the root
X;#  of the source tree for dist 3.0.
X;#
X;# $Log: cosmetic.pl,v $
X;# Revision 3.0  1993/08/18  12:10:20  ram
X;# Baseline for dist 3.0 netwide release.
X;#
X;# 
X# Update the MANIFEST.new file if necessary
Xsub cosmetic_update {
X	# Check for an "empty" config_h.SH (2 blank lines only). This test relies
X	# on the actual text held in Config_h.U. If the unit is modified, then the
X	# following might need adjustments.
X	local($blank_lines) = 0;
X	open(CONF_H, 'config_h.SH') || die "Can't open config_h.SH\n";
X	while(<CONF_H>) {
X		++$blank_lines if /^$/;
X	}
X	unlink 'config_h.SH' unless $blank_lines > 3;
X
X	open(NEWMANI,$NEWMANI);
X	$_ = <NEWMANI>;
X	/(\S+\s+)\S+/ && ($spaces = length($1));	# Spaces wanted
X	close NEWMANI;
X	$spaces = 29 if ($spaces < 12);				# Default value
X	open(NEWMANI,$NEWMANI);
X	$/ = "\001";			# Swallow the whole file
X	$_ = <NEWMANI>;
X	$/ = "\n";
X	close NEWMANI;
X
X	$* = 1;					# Multi-line matching
X	local($blank);			# Number of blanks between name and description
X	unless (/^Configure/) {
X		$blank = ' ' x ($spaces - 9);
X		print "Adding Configure to your $NEWMANI file...\n" unless $opt_s;
X		`echo "Configure${blank}Portability tool" >>$NEWMANI`;
X	}
X	unless (/^config_h\.SH/ || !-f 'config_h.SH') {
X		$blank = ' ' x ($spaces - 11);
X		print "Adding config_h.SH to your $NEWMANI file...\n" unless $opt_s;
X		`echo "config_h.SH${blank}Produces config.h" >>$NEWMANI`;
X	}
X	if (/^config_h\.SH/ && !-f 'config_h.SH') {
X		print "Removing config_h.SH from $NEWMANI...\n";
X		`mv $NEWMANI $NEWMANI.o`;
X		`$grep -v '^config\.h\.SH' $NEWMANI.o > $NEWMANI`;
X		`rm -f $NEWMANI.o` unless $?;
X	}
X	$* = 0;
X}
X
END_OF_FILE
  if test 1998 -ne `wc -c <'mcon/pl/cosmetic.pl'`; then
    echo shar: \"'mcon/pl/cosmetic.pl'\" unpacked with wrong size!
  fi
  # end of 'mcon/pl/cosmetic.pl'
fi
if test -f 'mcon/pl/xref.pl' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/pl/xref.pl'\"
else
  echo shar: Extracting \"'mcon/pl/xref.pl'\" \(1922 characters\)
  sed "s/^X//" >'mcon/pl/xref.pl' <<'END_OF_FILE'
X;# $Id: xref.pl,v 3.0 1993/08/18 12:10:31 ram Exp $
X;#
X;#  Copyright (c) 1991-1993, Raphael Manfredi
X;#  
X;#  You may redistribute only under the terms of the Artistic Licence,
X;#  as specified in the README file that comes with the distribution.
X;#  You may reuse parts of this distribution only within the terms of
X;#  that same Artistic Licence; a copy of which may be found at the root
X;#  of the source tree for dist 3.0.
X;#
X;# $Log: xref.pl,v $
X;# Revision 3.0  1993/08/18  12:10:31  ram
X;# Baseline for dist 3.0 netwide release.
X;#
X;# Metaxref-dependent part of the dependency extranction.
X;#
X# Process the ?W: lines
Xsub p_wanted {
X	# Syntax is ?W:<shell symbols>:<C symbols>
X	local($active) = $_[0] =~ /^([^:]*):/;		# Symbols to activate
X	local($look_symbols) = $_[0] =~ /:(.*)/;	# When those are used
X	local(@syms) = split(/ /, $look_symbols);	# Keep original spacing info
X	$active =~ s/\s+/\n/g;						# One symbol per line
X
X	# Concatenate quoted strings, so saying something like 'two words' will
X	# be introduced as one single symbol "two words".
X	local(@symbols);				# Concatenated symbols to look for
X	local($concat) = '';			# Concatenation buffer
X	foreach (@syms) {
X		if (s/^\'//) {
X			$concat = $_;
X		} elsif (s/\'$//) {
X			push(@symbols, $concat . ' ' . $_);
X			$concat = '';
X		} else {
X			push(@symbols, $_) unless $concat;
X			$concat .= ' ' . $_ if $concat;
X		}
X	}
X
X	local($fake);		# Fake unique shell symbol to reparent C symbol
X
X	# Now record symbols in master and wanted tables
X	foreach (@symbols) {
X		$cmaster{$_} = undef;					# Asks for look-up in C files
X		# Make a fake C symbol and associate that with the wanted symbol
X		# so that later we know were it comes from
X		$fake = &gensym;
X		$cwanted{$_} = "$fake";					# Attached to this symbol
X		push(@Master, "?$unit:$fake=''");		# Fake initialization
X	}
X}
X
X# Ingnore the following:
Xsub p_init {}
Xsub p_default {}
Xsub p_library {}
Xsub p_include {}
X
END_OF_FILE
  if test 1922 -ne `wc -c <'mcon/pl/xref.pl'`; then
    echo shar: \"'mcon/pl/xref.pl'\" unpacked with wrong size!
  fi
  # end of 'mcon/pl/xref.pl'
fi
if test -f 'pl/copyright.pl' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'pl/copyright.pl'\"
else
  echo shar: Extracting \"'pl/copyright.pl'\" \(2140 characters\)
  sed "s/^X//" >'pl/copyright.pl' <<'END_OF_FILE'
X;# $Id: copyright.pl,v 3.0 1993/08/18 12:10:51 ram Exp $
X;#
X;#  Copyright (c) 1991-1993, Raphael Manfredi
X;#  
X;#  You may redistribute only under the terms of the Artistic Licence,
X;#  as specified in the README file that comes with the distribution.
X;#  You may reuse parts of this distribution only within the terms of
X;#  that same Artistic Licence; a copy of which may be found at the root
X;#  of the source tree for dist 3.0.
X;#
X;# $Log: copyright.pl,v $
X;# Revision 3.0  1993/08/18  12:10:51  ram
X;# Baseline for dist 3.0 netwide release.
X;#
X;#
X;# Copyright expansion. The @COPYRIGHT@ symbol is expanded the first time
X;# it is seen in a file, and before the $Log RCS marker is reached. The
X;# automaton needs to be reset for each file.
X;#
Xpackage copyright;
X
X# Read in copyright file
Xsub init {
X	local($file) = @_;		# Copyright file
X	undef @copyright;
X	open(COPYRIGHT, $file) || die "Can't open $file: $!\n";
X	chop(@copyright = <COPYRIGHT>);
X	close COPYRIGHT;
X}
X
X# Reset the automaton for a new file.
Xsub reset {
X	$copyright_seen = @copyright ? 0 : 1;
X	$marker_seen = 0;
X}
X
X# Filter file, line by line, and expand the copyright string. The @COPYRIGHT@
X# symbol may be preceded by some random comment. A leader can be defined and
X# will be pre-pended to all the input lines.
Xsub filter {
X	local($line, $leader) = @_;		# Leader is optional
X	return $leader . $line if $copyright_seen || $marker_seen;
X	$marker_seen = 1 if $line =~ /\$Log[:\$]/;
X	$copyright_seen = 1 if $line =~ /\@COPYRIGHT\@/;
X	return $leader . $line unless $copyright_seen;
X	local($comment, $trailer) = $line =~ /^(.*)\@COPYRIGHT\@\s*(.*)/;
X	$comment = $leader . $comment;
X	$comment . join("\n$comment", @copyright) . "\n";
X}
X
X# Filter output of $cmd redirected into $file by expanding copyright, if any.
Xsub expand {
X	local($cmd, $file) = @_;
X	if (@copyright) {
X		open(CMD,"$cmd|") || die "Can't start '$cmd': $!\n";
X		open(OUT, ">$file") || die "Can't create $file: $!\n";
X		&reset;
X		local($_);
X		while (<CMD>) {
X			print OUT &filter($_);
X		}
X		close OUT;
X		close CMD;
X	} else {
X		system "$cmd > $file";
X		die "Command '$cmd' failed!" if $?;
X	}
X}
X
Xpackage main;
X
END_OF_FILE
  if test 2140 -ne `wc -c <'pl/copyright.pl'`; then
    echo shar: \"'pl/copyright.pl'\" unpacked with wrong size!
  fi
  # end of 'pl/copyright.pl'
fi
echo shar: End of archive 19 \(of 28\).
cp /dev/null ark19isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 28 archives.
    echo "Please run PACKNOTES through sh, read REAMDE and then type Configure."
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0

exit 0 # Just in case...
