Newsgroups: comp.sources.misc
From: Raphael Manfredi <ram@acri.fr>
Subject: v39i026:  dist-3.0 - Configure script generator and related tools, Part22/28
Message-ID: <1993Aug20.131524.22178@sparky.sterling.com>
X-Md4-Signature: 5a472a78e6b8ec2bd8a58c36fd056c69
Sender: kent@sparky.sterling.com (Kent Landfield)
Organization: Advanced Computer Research Institute, Lyon, France.
Date: Fri, 20 Aug 1993 13:15:24 GMT
Approved: kent@sparky.sterling.com

Submitted-by: Raphael Manfredi <ram@acri.fr>
Posting-number: Volume 39, Issue 26
Archive-name: dist-3.0/part22
Environment: UNIX, Perl, RCS

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# Contents:  jmake/jmkmf.man mcon/U/Extract.U mcon/U/Setvar.U
#   mcon/U/alignbytes.U mcon/U/basicshell.U mcon/U/charsize.U
#   mcon/U/d_bcmp.U mcon/U/d_bcopy.U mcon/U/d_bzero.U mcon/U/d_const.U
#   mcon/U/d_sgndchr.U mcon/U/d_statblks.U mcon/U/d_strctcpy.U
#   mcon/U/d_syslog.U mcon/U/d_tminsys.U mcon/U/d_uwait.U
#   mcon/U/d_vfork.U mcon/U/doublesize.U mcon/U/floatsize.U
#   mcon/U/i_sysfile.U mcon/U/longsize.U mcon/U/lseektype.U
#   mcon/U/mailfile.U mcon/U/sunscanf.U mcon/U/uidtype.U
#   mcon/files/type.U mcon/pl/order.pl
# Wrapped by ram@soft208 on Wed Aug 18 14:42:24 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 22 (of 28)."'
if test -f 'jmake/jmkmf.man' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'jmake/jmkmf.man'\"
else
  echo shar: Extracting \"'jmake/jmkmf.man'\" \(1488 characters\)
  sed "s/^X//" >'jmake/jmkmf.man' <<'END_OF_FILE'
X''' $Id: jmkmf.man,v 3.0 1993/08/18 12:04:20 ram Exp $
X'''
X'''  Copyright (c) 1991-1993, Raphael Manfredi
X'''  
X'''  You may redistribute only under the terms of the Artistic Licence,
X'''  as specified in the README file that comes with the distribution.
X'''  You may reuse parts of this distribution only within the terms of
X'''  that same Artistic Licence; a copy of which may be found at the root
X'''  of the source tree for dist 3.0.
X'''
X''' $Log: jmkmf.man,v $
X''' Revision 3.0  1993/08/18  12:04:20  ram
X''' Baseline for dist 3.0 netwide release.
X'''
X.TH JMKMF 1 ram
X.SH NAME
Xjmkmf \- runs jmake with the correct options
X.SH SYNOPSIS
X.B jmkmf
X[
X.I top-level dir
X[
X.I current dir
X]
X]
X.SH DESCRIPTION
X.I Jmkmf
Xis a wrapper which calls
X.I jmake
Xwith the correct options, defining the symbols
X.SM TOPDIR
X(location of the top-level directory) and
X.SM CURDIR
X(current directory). The generated
X.I Makefile.SH
Xis then ran through
X.I /bin/sh
Xto produce a
X.I Makefile.
X.PP
X.I Jmkmf
Xis useful when you generate a makefile for the first time.
XOnce you have a
X.I Makefile.SH
Xgenerated by
X.I jmake,
Xyou can use
X.I make Makefile.SH
Xto build the Makefile.SH again and
X.I make Makefile
Xto run the Makefile.SH through
X.I /bin/sh.
XTo use the recursive commands, you have to append an 's' at the
Xend of the name as in
X.I make Makefiles.SH
Xand
X.I make Makefiles.
X.SH AUTHOR
XRaphael Manfredi <ram@acri.fr>
X.SH FILES
X.PD 0
X.TP 20
XJmakefile
XHigh level description of makefile
X.PD
X.SH "SEE ALSO"
Xjmake(1).
END_OF_FILE
  if test 1488 -ne `wc -c <'jmake/jmkmf.man'`; then
    echo shar: \"'jmake/jmkmf.man'\" unpacked with wrong size!
  fi
  # end of 'jmake/jmkmf.man'
fi
if test -f 'mcon/U/Extract.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/Extract.U'\"
else
  echo shar: Extracting \"'mcon/U/Extract.U'\" \(1505 characters\)
  sed "s/^X//" >'mcon/U/Extract.U' <<'END_OF_FILE'
X?RCS: $Id: Extract.U,v 3.0 1993/08/18 12:04:52 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: Extract.U,v $
X?RCS: Revision 3.0  1993/08/18  12:04:52  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?X: 
X?X: This unit produces a shell script which can be doted in order to extract
X?X: .SH files with variable substitutions.
X?X: 
X?MAKE:Extract: Nothing
X?MAKE:	-pick add $@ %<
X?T:CONFIG dir file
X: script used to extract .SH files with variable substitutions
Xcat >extract <<'EOS'
XCONFIG=true
Xecho "Doing variable substitutions on .SH files..."
Xif test -f MANIFEST; then
X	set x `awk '{print $1}' <MANIFEST | grep '\.SH'`
Xelse
X	echo "(Looking for .SH files under the current directory.)"
X	set x `find . -name "*.SH" -print`
Xfi
Xshift
Xcase $# in
X0) set x *.SH; shift;;
Xesac
Xif test ! -f $1; then
X	shift
Xfi
Xfor file in $*; do
X	case "$file" in
X	*/*)
X		dir=`expr X$file : 'X\(.*\)/'`
X		file=`expr X$file : 'X.*/\(.*\)'`
X		(cd $dir && . ./$file)
X		;;
X	*)
X		. ./$file
X		;;
X	esac
Xdone
Xif test -f config_h.SH; then
X	if test ! -f config.h; then
X	: oops, they left it out of MANIFEST, probably, so do it anyway.
X	. ./config_h.SH
X	fi
Xfi
XEOS
X
END_OF_FILE
  if test 1505 -ne `wc -c <'mcon/U/Extract.U'`; then
    echo shar: \"'mcon/U/Extract.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/Extract.U'
fi
if test -f 'mcon/U/Setvar.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/Setvar.U'\"
else
  echo shar: Extracting \"'mcon/U/Setvar.U'\" \(1529 characters\)
  sed "s/^X//" >'mcon/U/Setvar.U' <<'END_OF_FILE'
X?RCS: $Id: Setvar.U,v 3.0 1993/08/18 12:05:16 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: Setvar.U,v $
X?RCS: Revision 3.0  1993/08/18  12:05:16  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?X:
X?X: This unit produces a variable that is intended to be eval'ed in
X?X: order to define/undefine a symbol. A consistency check is made
X?X: regarding any previous value and a warning is issued if there
X?X: is any discrepancy.
X?X:
X?X: To use it, say:
X?X: val=<value>
X?X: set d_variable
X?X: eval $setvar
X?X:
X?MAKE:Setvar: Whoa
X?MAKE:	-pick add $@ %<
X?LINT:define setvar
X?S:setvar:
X?S:	This shell variable is used internally by Configure to set a value
X?S:	to a given symbol that is defined or not. A typical use is:
X?S:     val=<value computed>
X?S:		set d_variable
X?S:		eval $setvar
X?S:	That will print a message in case the $val value is not the same
X?S:	as the previous value of $d_variable.
X?S:.
X?V:setvar:val
X?T:var was td tu
X: function used to set $1 to $val
Xsetvar='var=$1; eval "was=\$$1"; td=$define; tu=$undef;
Xcase "$val$was" in
X$define$undef) . whoa; eval "$var=\$td";;
X$undef$define) . whoa; eval "$var=\$tu";;
X*) eval "$var=$val";;
Xesac'
X
END_OF_FILE
  if test 1529 -ne `wc -c <'mcon/U/Setvar.U'`; then
    echo shar: \"'mcon/U/Setvar.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/Setvar.U'
fi
if test -f 'mcon/U/alignbytes.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/alignbytes.U'\"
else
  echo shar: Extracting \"'mcon/U/alignbytes.U'\" \(1481 characters\)
  sed "s/^X//" >'mcon/U/alignbytes.U' <<'END_OF_FILE'
X?RCS: $Id: alignbytes.U,v 3.0 1993/08/18 12:05:23 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: alignbytes.U,v $
X?RCS: Revision 3.0  1993/08/18  12:05:23  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:alignbytes: Myread cat cc ccflags rm
X?MAKE:	-pick add $@ %<
X?S:alignbytes:
X?S:	This variable holds the number of bytes required to align a
X?S:	double. Usual values are 2, 4 and 8.
X?S:.
X?C:ALIGNBYTES:
X?C:	This symbol contains the number of bytes required to align a
X?C:	double. Usual values are 2, 4 and 8.
X?C:.
X?H:#define ALIGNBYTES $alignbytes	/**/
X?H:.
X: check for alignment requirements
Xecho " "
Xcase "$alignbytes" in
X'') echo "Checking alignment constraints..." >&4
X	$cat >try.c <<'EOCP'
Xstruct foobar {
X	char foo;
X	double bar;
X} try;
Xmain()
X{
X	printf("%d\n", (char *)&try.bar - (char *)&try.foo);
X}
XEOCP
X	if $cc $ccflags try.c -o try >/dev/null 2>&1; then
X		dflt=`./try`
X	else
X		dflt='8'
X		echo"(I can't seem to compile the test program...)"
X	fi
X	;;
X*) dflt="$alignbytes"
X	;;
Xesac
Xrp="Doubles must be aligned on a how-many-byte boundary?"
X. ./myread
Xalignbytes="$ans"
X$rm -f try.c try
X
END_OF_FILE
  if test 1481 -ne `wc -c <'mcon/U/alignbytes.U'`; then
    echo shar: \"'mcon/U/alignbytes.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/alignbytes.U'
fi
if test -f 'mcon/U/basicshell.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/basicshell.U'\"
else
  echo shar: Extracting \"'mcon/U/basicshell.U'\" \(1447 characters\)
  sed "s/^X//" >'mcon/U/basicshell.U' <<'END_OF_FILE'
X?RCS: $Id: basicshell.U,v 3.0 1993/08/18 12:05:25 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: basicshell.U,v $
X?RCS: Revision 3.0  1993/08/18  12:05:25  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:basicshell: Getfile Oldconfig bash csh ksh sh
X?MAKE:	-pick add $@ %<
X?S:basicshell:
X?S:	This variable contains the eventual value of the BASICSHELL symbol,
X?S:	which contains the full name of the basic script shell on this
X?S:	system.  Usual values are /bin/sh, /bin/ksh, /bin/csh.
X?S:.
X?C:BASICSHELL:
X?C:	This symbol contains the full name of the basic script shell on this
X?C:	system.  Usual values are /bin/sh, /bin/ksh, /bin/csh.
X?C:.
X?H:#define BASICSHELL "$basicshell"		/**/
X?H:.
X: find the most basic shell for scripts
Xecho " "
Xcase "$basicshell" in
X'')
X	case "$sh $bash $csh $ksh" in
X	*/sh*) dflt="$sh" ;;
X	*/ksh*) dflt="$ksh" ;;
X	*/csh*) dflt="$csh" ;;
X	*/bash*) dflt="$bash" ;;
X	*) dflt='/bin/sh' ;;
X	esac
X	;;
X*)
X	dflt="$basicshell";;
Xesac
Xfn=f
Xrp="Give the full path name of the most basic shell used on your system"
X. ./getfile
Xbasicshell=$ans
X
END_OF_FILE
  if test 1447 -ne `wc -c <'mcon/U/basicshell.U'`; then
    echo shar: \"'mcon/U/basicshell.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/basicshell.U'
fi
if test -f 'mcon/U/charsize.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/charsize.U'\"
else
  echo shar: Extracting \"'mcon/U/charsize.U'\" \(1465 characters\)
  sed "s/^X//" >'mcon/U/charsize.U' <<'END_OF_FILE'
X?RCS: $Id: charsize.U,v 3.0 1993/08/18 12:05:34 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: charsize.U,v $
X?RCS: Revision 3.0  1993/08/18  12:05:34  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:charsize: cat rm Myread +cc +ccflags
X?MAKE:	-pick add $@ %<
X?S:charsize:
X?S:	This variable contains the value of the CHARSIZE symbol, which
X?S:	indicates to the C program how many bytes there are in a character.
X?S:.
X?C:CHARSIZE:
X?C:	This symbol contains the size of a char, so that the C preprocessor
X?C:	can make decisions based on it.
X?C:.
X?H:#define CHARSIZE $charsize		/**/
X?H:.
X: check for length of character
Xecho " "
Xcase "$charsize" in
X'')
X	echo "Checking to see how big your characters are..." >&4
X	$cat >try.c <<'EOCP'
X#include <stdio.h>
Xmain()
X{
X	printf("%d\n", sizeof(char));
X}
XEOCP
X	if $cc $ccflags try.c -o try >/dev/null 2>&1 ; then
X		dflt=`./try`
X	else
X		dflt='1'
X		echo "(I can't seem to compile the test program.  Guessing...)"
X	fi
X	;;
X*)
X	dflt="$charsize"
X	;;
Xesac
Xrp="What is the size of a character (in bytes)?"
X. ./myread
Xcharsize="$ans"
X$rm -f try.c try
X
END_OF_FILE
  if test 1465 -ne `wc -c <'mcon/U/charsize.U'`; then
    echo shar: \"'mcon/U/charsize.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/charsize.U'
fi
if test -f 'mcon/U/d_bcmp.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_bcmp.U'\"
else
  echo shar: Extracting \"'mcon/U/d_bcmp.U'\" \(1494 characters\)
  sed "s/^X//" >'mcon/U/d_bcmp.U' <<'END_OF_FILE'
X?RCS: $Id: d_bcmp.U,v 3.0 1993/08/18 12:05:42 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_bcmp.U,v $
X?RCS: Revision 3.0  1993/08/18  12:05:42  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_bcmp: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_bcmp:
X?S:	This variable conditionally defines the HAS_BCMP symbol if
X?S:	the bcmp() routine is available to compare strings.
X?S:.
X?C:bcmp ~ %<:
X?C:	This symbol is maped to memcmp if the bcmp() routine is not
X?C:	available to compare strings.
X?C:.
X?C:HAS_BCMP ~ %<:
X?C:	This symbol is defined if the bcmp() routine is available to
X?C:	compare blocks of memory. You should not use this symbol under
X?C:	normal circumstances and use bcmp() directly instead, since that
X?C:	symbol will be mapped to memcmp() should bcmp not be available.
X?C:.
X?H:?%<:#$d_bcmp HAS_BCMP	/**/
X?H:?%<:#ifndef HAS_BCMP
X?H:?%<:#ifdef bcmp
X?X: The following line is NOT a typo -- see Config_h.U
X?H:?%<:#un-def bcmp
X?H:?%<:#endif
X?H:?%<:#define bcmp(s,d,l) memcmp((s),(d),(l))	/* mapped to memcmp */
X?H:?%<:#endif
X?H:.
X?W:%<:bcmp
X?LINT:set d_bcmp
X: see if bcmp exists
Xset bcmp d_bcmp
Xeval $inlibc
X
END_OF_FILE
  if test 1494 -ne `wc -c <'mcon/U/d_bcmp.U'`; then
    echo shar: \"'mcon/U/d_bcmp.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_bcmp.U'
fi
if test -f 'mcon/U/d_bcopy.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_bcopy.U'\"
else
  echo shar: Extracting \"'mcon/U/d_bcopy.U'\" \(1494 characters\)
  sed "s/^X//" >'mcon/U/d_bcopy.U' <<'END_OF_FILE'
X?RCS: $Id: d_bcopy.U,v 3.0 1993/08/18 12:05:44 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_bcopy.U,v $
X?RCS: Revision 3.0  1993/08/18  12:05:44  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_bcopy: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_bcopy:
X?S:	This variable conditionally defines the HAS_BCOPY symbol if
X?S:	the bcopy() routine is available to copy strings.
X?S:.
X?C:bcopy ~ %<:
X?C:	This symbol is maped to memcpy if the bcopy() routine is not
X?C:	available to copy strings.
X?C:.
X?C:HAS_BCOPY ~ %<:
X?C:	This symbol is defined if the bcopy() routine is available to
X?C:	copy blocks of memory. You should not use this symbol under
X?C:	normal circumstances and use bcopy() directly instead, which
X?C:	will get mapped to memcpy() if bcopy is not available.
X?C:.
X?H:?%<:#$d_bcopy HAS_BCOPY	/**/
X?H:?%<:#ifndef HAS_BCOPY
X?H:?%<:#ifdef bcopy
X?X: The following line is NOT a typo -- see Config_h.U
X?H:?%<:#un-def bcopy
X?H:?%<:#endif
X?H:?%<:#define bcopy(s,d,l) memcpy((d),(s),(l))		/* mapped to memcpy */
X?H:?%<:#endif
X?H:.
X?W:%<:bcopy
X?LINT:set d_bcopy
X: see if bcopy exists
Xset bcopy d_bcopy
Xeval $inlibc
X
END_OF_FILE
  if test 1494 -ne `wc -c <'mcon/U/d_bcopy.U'`; then
    echo shar: \"'mcon/U/d_bcopy.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_bcopy.U'
fi
if test -f 'mcon/U/d_bzero.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_bzero.U'\"
else
  echo shar: Extracting \"'mcon/U/d_bzero.U'\" \(1507 characters\)
  sed "s/^X//" >'mcon/U/d_bzero.U' <<'END_OF_FILE'
X?RCS: $Id: d_bzero.U,v 3.0 1993/08/18 12:05:46 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_bzero.U,v $
X?RCS: Revision 3.0  1993/08/18  12:05:46  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_bzero: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_bzero:
X?S:	This variable conditionally defines the HAS_BZERO symbol if
X?S:	the bzero() routine is available to set memory to 0.
X?S:.
X?C:bzero ~ %<:
X?C:	This symbol is maped to memset if the bzero() routine is not
X?C:	available to set memory to 0.
X?C:.
X?C:HAS_BZERO ~ %<:
X?C:	This symbol is defined if the bzero() routine is available to
X?C:	set a memory block to 0. You should not make use of this symbol
X?C:	under normal circumstances but rather use bzero() directly. That
X?C:	will get remapped to memset() when bzero is not available.
X?C:.
X?H:?%<:#$d_bzero HAS_BZERO	/**/
X?H:?%<:#ifndef HAS_BZERO
X?H:?%<:#ifdef bzero
X?X: The following line is NOT a typo -- see Config_h.U
X?H:?%<:#un-def bzero
X?H:?%<:#endif
X?H:?%<:#define bzero(s,l) memset((s),0,(l))	/* mapped to memset */
X?H:?%<:#endif
X?H:.
X?W:%<:bzero
X?LINT:set d_bzero
X: see if bzero exists
Xset bzero d_bzero
Xeval $inlibc
X
END_OF_FILE
  if test 1507 -ne `wc -c <'mcon/U/d_bzero.U'`; then
    echo shar: \"'mcon/U/d_bzero.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_bzero.U'
fi
if test -f 'mcon/U/d_const.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_const.U'\"
else
  echo shar: Extracting \"'mcon/U/d_const.U'\" \(1536 characters\)
  sed "s/^X//" >'mcon/U/d_const.U' <<'END_OF_FILE'
X?RCS: $Id: d_const.U,v 3.0 1993/08/18 12:05:51 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_const.U,v $
X?RCS: Revision 3.0  1993/08/18  12:05:51  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_const: cat cc ccflags Setvar
X?MAKE:	-pick add $@ %<
X?S:d_const:
X?S:	This variable conditionally defines the HASCONST symbol, which
X?S:	indicates to the C program that this C compiler knows about the
X?S:	const type.
X?S:.
X?C:HASCONST ~ %<:
X?C:	This symbol, if defined, indicates that this C compiler knows about
X?C:	the const type. There is no need to actually test for that symbol
X?C:	within your programs. The mere use of the "const" keyword will
X?C:	trigger the necessary tests.
X?C:.
X?H:?%<:#$d_const HASCONST	/**/
X?H:?%<:#ifndef HASCONST
X?H:?%<:#define const
X?H:?%<:#endif
X?H:.
X?W:%<:const
X?LINT:set d_const
X?LINT:known const
X: check for const keyword
Xecho " "
Xecho 'Checking to see if your C compiler knows about "const"...' >&4
X$cat >const.c <<'EOCP'
Xmain()
X{
X	const char *foo;
X}
XEOCP
Xif $cc -c $ccflags const.c >/dev/null 2>&1 ; then
X	val="$define"
X	echo "Yup, it does."
Xelse
X	val="$undef"
X	echo "Nope, it doesn't."
Xfi
Xset d_const
Xeval $setvar
X
END_OF_FILE
  if test 1536 -ne `wc -c <'mcon/U/d_const.U'`; then
    echo shar: \"'mcon/U/d_const.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_const.U'
fi
if test -f 'mcon/U/d_sgndchr.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_sgndchr.U'\"
else
  echo shar: Extracting \"'mcon/U/d_sgndchr.U'\" \(1481 characters\)
  sed "s/^X//" >'mcon/U/d_sgndchr.U' <<'END_OF_FILE'
X?RCS: $Id: d_sgndchr.U,v 3.0 1993/08/18 12:07:16 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_sgndchr.U,v $
X?RCS: Revision 3.0  1993/08/18  12:07:16  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_sgndchr: cat rm cc ccflags Setvar
X?MAKE:	-pick add $@ %<
X?S:d_sgndchr:
X?S:	This variable conditionally defines the SIGNEDCHAR symbol, which
X?S:	indicates to the C program that signed characters are available.
X?S:.
X?C:SIGNEDCHAR:
X?C:	This symbol, if defined, indicates that characters are a signed type.
X?C:	If not defined, things declared as signed characters (and that make
X?C:	use of negative values) should probably be declared as shorts instead.
X?C:.
X?H:#$d_sgndchr SIGNEDCHAR	/**/
X?H:.
X?LINT:set d_sgndchr
X: check for signed chars
Xecho " "
Xecho "Checking to see if your C compiler can do signed chars..." >&4
X$cat >try.c <<'EOCP'
Xmain()
X{
X	char c = 0;
X
X	c--;
X	exit(c >= 0);
X}
XEOCP
X$cc $ccflags -o try try.c
Xif ./try; then
X	val="$define"
X	echo "It certainly can."
Xelse
X	val="$undef"
X	echo "It can't.  I'll have to make some things type short."
Xfi
Xset d_sgndchr
Xeval $setvar
X$rm -f try*
X
END_OF_FILE
  if test 1481 -ne `wc -c <'mcon/U/d_sgndchr.U'`; then
    echo shar: \"'mcon/U/d_sgndchr.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_sgndchr.U'
fi
if test -f 'mcon/U/d_statblks.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_statblks.U'\"
else
  echo shar: Extracting \"'mcon/U/d_statblks.U'\" \(1456 characters\)
  sed "s/^X//" >'mcon/U/d_statblks.U' <<'END_OF_FILE'
X?RCS: $Id: d_statblks.U,v 3.0 1993/08/18 12:07:29 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_statblks.U,v $
X?RCS: Revision 3.0  1993/08/18  12:07:29  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_statblks: contains Setvar Findhdr
X?MAKE:	-pick add $@ %<
X?S:d_statblks:
X?S:	This variable conditionally defines USE_STAT_BLOCKS if this system
X?S:	has a stat structure declaring st_blksize and st_blocks.
X?S:.
X?C:USE_STAT_BLOCKS (STATBLOCKS):
X?C:	This symbol is defined if this system has a stat structure declaring
X?C:	st_blksize and st_blocks.
X?C:.
X?H:#$d_statblks USE_STAT_BLOCKS 	/**/
X?H:.
X?T:xxx
X?LINT:set d_statblks
X: see if stat knows about block sizes
Xecho " "
Xxxx=`./findhdr sys/stat.h`
Xif $contains 'st_blocks;' "$xxx" >/dev/null 2>&1 ; then
X	if $contains 'st_blksize;' "$xxx" >/dev/null 2>&1 ; then
X		echo "Your stat() knows about block sizes." >&4
X		val="$define"
X	else
X		echo "Your stat() doesn't know about block sizes." >&4
X		val="$undef"
X	fi
Xelse
X	echo "Your stat() doesn't know about block sizes." >&4
X	val="$undef"
Xfi
Xset d_statblks
Xeval $setvar
X
END_OF_FILE
  if test 1456 -ne `wc -c <'mcon/U/d_statblks.U'`; then
    echo shar: \"'mcon/U/d_statblks.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_statblks.U'
fi
if test -f 'mcon/U/d_strctcpy.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_strctcpy.U'\"
else
  echo shar: Extracting \"'mcon/U/d_strctcpy.U'\" \(1459 characters\)
  sed "s/^X//" >'mcon/U/d_strctcpy.U' <<'END_OF_FILE'
X?RCS: $Id: d_strctcpy.U,v 3.0 1993/08/18 12:07:34 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_strctcpy.U,v $
X?RCS: Revision 3.0  1993/08/18  12:07:34  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_strctcpy: cat rm cc Setvar
X?MAKE:	-pick add $@ %<
X?S:d_strctcpy:
X?S:	This variable conditionally defines the USE_STRUCT_COPY symbol, which
X?S:	indicates to the C program that this C compiler knows how to copy
X?S:	structures.
X?S:.
X?C:USE_STRUCT_COPY (STRUCTCOPY):
X?C:	This symbol, if defined, indicates that this C compiler knows how
X?C:	to copy structures.  If undefined, you'll need to use a block copy
X?C:	routine of some sort instead.
X?C:.
X?H:#$d_strctcpy	USE_STRUCT_COPY	/**/
X?H:.
X?LINT:set d_strctcpy
X: check for structure copying
Xecho " "
Xecho "Checking to see if your C compiler can copy structs..." >&4
X$cat >try.c <<'EOCP'
Xmain()
X{
X	struct blurfl {
X		int dyick;
X	} foo, bar;
X
X	foo = bar;
X}
XEOCP
Xif $cc -c try.c >/dev/null 2>&1 ; then
X	val="$define"
X	echo "Yup, it can."
Xelse
X	val="$undef"
X	echo "Nope, it can't."
Xfi
Xset d_strctcpy
Xeval $setvar
X$rm -f try.*
X
END_OF_FILE
  if test 1459 -ne `wc -c <'mcon/U/d_strctcpy.U'`; then
    echo shar: \"'mcon/U/d_strctcpy.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_strctcpy.U'
fi
if test -f 'mcon/U/d_syslog.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_syslog.U'\"
else
  echo shar: Extracting \"'mcon/U/d_syslog.U'\" \(1458 characters\)
  sed "s/^X//" >'mcon/U/d_syslog.U' <<'END_OF_FILE'
X?RCS: $Id: d_syslog.U,v 3.0 1993/08/18 12:07:43 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_syslog.U,v $
X?RCS: Revision 3.0  1993/08/18  12:07:43  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_syslog syslogc syslogo: test Csym Setvar Findhdr
X?MAKE:	-pick add $@ %<
X?S:d_syslog:
X?S:	This variable conditionally defines the HAS_SYSLOG symbol, which
X?S:	indicates to the C program that syslog() exists on this system.
X?S:.
X?C:HAS_SYSLOG (LIBSYSLOG):
X?C:	This symbol, if defined, indicates that the program can rely on the
X?C:	system providing syslog().  Otherwise, the syslog code provided by
X?C:	the package should be used.
X?C:.
X?H:#$d_syslog HAS_SYSLOG	/**/
X?H:.
X?LINT:set d_syslog
X?LINT:describe syslogc syslogo
X: see if syslog is available
Xecho " "
Xif $test `./findhdr syslog.h` && \
X	(set syslog val -f d_syslog; eval $csym; $val); then
X	echo "syslog() found." >&4
X	val="$define"
X	syslogc=''
X	syslogo=''
Xelse
X	echo "syslog() not found in your C library--using ./syslog.c." >&4
X	val="$undef"
X	syslogc='syslog.c'
X	syslogo='syslog.o'
Xfi
Xset d_syslog
Xeval $setvar
X
END_OF_FILE
  if test 1458 -ne `wc -c <'mcon/U/d_syslog.U'`; then
    echo shar: \"'mcon/U/d_syslog.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_syslog.U'
fi
if test -f 'mcon/U/d_tminsys.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_tminsys.U'\"
else
  echo shar: Extracting \"'mcon/U/d_tminsys.U'\" \(1451 characters\)
  sed "s/^X//" >'mcon/U/d_tminsys.U' <<'END_OF_FILE'
X?RCS: $Id: d_tminsys.U,v 3.0 1993/08/18 12:07:47 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_tminsys.U,v $
X?RCS: Revision 3.0  1993/08/18  12:07:47  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_tminsys: contains Setvar Findhdr
X?MAKE:	-pick add $@ %<
X?S:d_tminsys:
X?S:	This variable conditionally defines TM_IN_SYS if this system
X?S:	declares "struct tm" in <sys/time.h> rather than <time.h>.
X?S:.
X?C:TM_IN_SYS (TMINSYS):
X?C:	This symbol is defined if this system declares "struct tm" in
X?C:	in <sys/time.h> rather than <time.h>.  We can't just say
X?C:	-I/usr/include/sys because some systems have both time files, and
X?C:	the -I trick gets the wrong one.
X?C:.
X?H:#$d_tminsys TM_IN_SYS 	/**/
X?H:.
X?LINT:set d_tminsys
X: see if struct tm is defined in sys/time.h
Xecho " "
Xif $contains 'struct tm' `./findhdr time.h` >/dev/null 2>&1 ; then
X	echo "You have struct tm defined in <time.h> rather than <sys/time.h>." >&4
X	val="$undef"
Xelse
X	echo "You have struct tm defined in <sys/time.h> rather than <time.h>." >&4
X	val="$define"
Xfi
Xset d_tminsys
Xeval $setvar
X
END_OF_FILE
  if test 1451 -ne `wc -c <'mcon/U/d_tminsys.U'`; then
    echo shar: \"'mcon/U/d_tminsys.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_tminsys.U'
fi
if test -f 'mcon/U/d_uwait.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_uwait.U'\"
else
  echo shar: Extracting \"'mcon/U/d_uwait.U'\" \(1504 characters\)
  sed "s/^X//" >'mcon/U/d_uwait.U' <<'END_OF_FILE'
X?RCS: $Id: d_uwait.U,v 3.0 1993/08/18 12:07:54 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_uwait.U,v $
X?RCS: Revision 3.0  1993/08/18  12:07:54  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_uwait: contains Setvar Findhdr
X?MAKE:	-pick add $@ %<
X?S:d_uwait:
X?S:	This symbol conditionally defines UNION_WAIT which indicates to the C
X?S:	program that argument for the wait() system call should be declared as
X?S:	'union wait status' instead of 'int status'.
X?S:.
X?C:UNION_WAIT:
X?C:	This symbol if defined indicates to the C program that the argument
X?C:	for the wait() system call should be declared as 'union wait status'
X?C:	instead of 'int status'. You probably need to include <sys/wait.h>
X?C:	in the former case (see I_SYSWAIT).
X?C:.
X?H:#$d_uwait UNION_WAIT		/**/
X?H:.
X?LINT:set d_uwait
X: see if union wait is available
Xecho " "
Xif $contains 'union.*wait.*{' `./findhdr sys/wait.h` >/dev/null 2>&1 ; then
X	echo "Looks like we have to use 'union wait' pointer for wait()." >&4
X	val="$define"
Xelse
X	echo "Your wait() should be happy with a plain 'int' pointer." >&4
X	val="$undef"
Xfi
Xset d_uwait
Xeval $setvar
X
END_OF_FILE
  if test 1504 -ne `wc -c <'mcon/U/d_uwait.U'`; then
    echo shar: \"'mcon/U/d_uwait.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_uwait.U'
fi
if test -f 'mcon/U/d_vfork.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_vfork.U'\"
else
  echo shar: Extracting \"'mcon/U/d_vfork.U'\" \(1519 characters\)
  sed "s/^X//" >'mcon/U/d_vfork.U' <<'END_OF_FILE'
X?RCS: $Id: d_vfork.U,v 3.0 1993/08/18 12:07:55 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_vfork.U,v $
X?RCS: Revision 3.0  1993/08/18  12:07:55  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_vfork d_hvfork: Csym Setvar
X?MAKE:	-pick add $@ %<
X?S:d_vfork:
X?S:	This variable conditionally defines the vfork symbol, which
X?S:	redefines vfork to fork if the vfork() routine doesn't exist.
X?S:.
X?S:d_hvfork:
X?S:	This variable conditionally defines the HAS_VFORK symbol, which
X?S:	indicates the vfork() routine is available.
X?S:.
X?C:vfork:
X?C:	This symbol, if defined, remaps the vfork routine to fork if the
X?C:	vfork() routine isn't supported here.
X?C:.
X?C:HAS_VFORK (VFORK):
X?C:	This symbol, if defined, indicates that vfork() exists.
X?C:.
X?H:#$d_vfork vfork fork	/**/
X?H:#$d_hvfork HAS_VFORK	/**/
X?H:.
X?LINT:set d_vfork
X: see if there is a vfork
Xecho " "
Xif set vfork val -f d_hvfork; eval $csym; $val; then
X	echo "vfork() found." >&4
X	val="$undef"
Xelse
X	echo "No vfork() found--will use fork() instead." >&4
X	val="$define"
Xfi
Xset d_vfork
Xeval $setvar
Xd_hvfork="$define"
Xcase "$d_vfork" in
X"$define") d_hvfork="$undef";;
Xesac
X
END_OF_FILE
  if test 1519 -ne `wc -c <'mcon/U/d_vfork.U'`; then
    echo shar: \"'mcon/U/d_vfork.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_vfork.U'
fi
if test -f 'mcon/U/doublesize.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/doublesize.U'\"
else
  echo shar: Extracting \"'mcon/U/doublesize.U'\" \(1513 characters\)
  sed "s/^X//" >'mcon/U/doublesize.U' <<'END_OF_FILE'
X?RCS: $Id: doublesize.U,v 3.0 1993/08/18 12:08:06 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: doublesize.U,v $
X?RCS: Revision 3.0  1993/08/18  12:08:06  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:doublesize: cat rm Myread +cc +ccflags
X?MAKE:	-pick add $@ %<
X?S:doublesize:
X?S:	This variable contains the value of the DOUBLESIZE symbol, which
X?S:	indicates to the C program how many bytes there are in a double.
X?S:.
X?C:DOUBLESIZE:
X?C:	This symbol contains the size of a double, so that the C preprocessor
X?C:	can make decisions based on it.
X?C:.
X?H:#define DOUBLESIZE $doublesize		/**/
X?H:.
X: check for length of double
Xecho " "
Xcase "$doublesize" in
X'')
X	echo "Checking to see how big your double precision numbers are..." >&4
X	$cat >try.c <<'EOCP'
X#include <stdio.h>
Xmain()
X{
X	printf("%d\n", sizeof(double));
X}
XEOCP
X	if $cc $ccflags try.c -o try >/dev/null 2>&1 ; then
X		dflt=`./try`
X	else
X		dflt='8'
X		echo "(I can't seem to compile the test program.  Guessing...)"
X	fi
X	;;
X*)
X	dflt="$doublesize"
X	;;
Xesac
Xrp="What is the size of a double precision number (in bytes)?"
X. ./myread
Xdoublesize="$ans"
X$rm -f try.c try
X
END_OF_FILE
  if test 1513 -ne `wc -c <'mcon/U/doublesize.U'`; then
    echo shar: \"'mcon/U/doublesize.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/doublesize.U'
fi
if test -f 'mcon/U/floatsize.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/floatsize.U'\"
else
  echo shar: Extracting \"'mcon/U/floatsize.U'\" \(1494 characters\)
  sed "s/^X//" >'mcon/U/floatsize.U' <<'END_OF_FILE'
X?RCS: $Id: floatsize.U,v 3.0 1993/08/18 12:08:09 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: floatsize.U,v $
X?RCS: Revision 3.0  1993/08/18  12:08:09  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:floatsize: cat rm Myread +cc +ccflags
X?MAKE:	-pick add $@ %<
X?S:floatsize:
X?S:	This variable contains the value of the FLOATSIZE symbol, which
X?S:	indicates to the C program how many bytes there are in a float.
X?S:.
X?C:FLOATSIZE:
X?C:	This symbol contains the size of a float, so that the C preprocessor
X?C:	can make decisions based on it.
X?C:.
X?H:#define FLOATSIZE $floatsize		/**/
X?H:.
X: check for length of float
Xecho " "
Xcase "$floatsize" in
X'')
X	echo "Checking to see how big your floating point numbers are..." >&4
X	$cat >try.c <<'EOCP'
X#include <stdio.h>
Xmain()
X{
X	printf("%d\n", sizeof(float));
X}
XEOCP
X	if $cc $ccflags try.c -o try >/dev/null 2>&1 ; then
X		dflt=`./try`
X	else
X		dflt='4'
X		echo "(I can't seem to compile the test program.  Guessing...)"
X	fi
X	;;
X*)
X	dflt="$floatsize"
X	;;
Xesac
Xrp="What is the size of a floating point number (in bytes)?"
X. ./myread
Xfloatsize="$ans"
X$rm -f try.c try
X
END_OF_FILE
  if test 1494 -ne `wc -c <'mcon/U/floatsize.U'`; then
    echo shar: \"'mcon/U/floatsize.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/floatsize.U'
fi
if test -f 'mcon/U/i_sysfile.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/i_sysfile.U'\"
else
  echo shar: Extracting \"'mcon/U/i_sysfile.U'\" \(1442 characters\)
  sed "s/^X//" >'mcon/U/i_sysfile.U' <<'END_OF_FILE'
X?RCS: $Id: i_sysfile.U,v 3.0 1993/08/18 12:08:31 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: i_sysfile.U,v $
X?RCS: Revision 3.0  1993/08/18  12:08:31  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:i_sysfile: h_sysfile Inhdr Setvar
X?MAKE:	-pick add $@ %<
X?S:i_sysfile:
X?S:	This variable conditionally defines the I_SYS_FILE symbol, and indicates
X?S:	whether a C program should include <sys/file.h> to get R_OK and friends.
X?S:.
X?C:I_SYS_FILE (I_SYSFILE):
X?C:	This symbol, if defined, indicates to the C program that it should
X?C:	include <sys/file.h> to get definition of R_OK and friends.
X?C:.
X?H:#$i_sysfile I_SYS_FILE		/**/
X?H:.
X?T:val
X?LINT:set i_sysfile
X?LINT:change h_sysfile
X: see if this is a sys/file.h system
Xval=''
Xset sys/file.h val
Xeval $inhdr
X
X: do we need to #include <sys/file.h> ?
Xcase "$val" in
X"$define")
X	echo " "
X	if $h_sysfile; then
X		val="$define"
X		echo "We'll be including <sys/file.h>." >&4
X	else
X		val="$undef"
X		echo "We won't be including <sys/file.h>." >&4
X	fi
X	;;
X*)
X	h_sysfile=false
X	;;
Xesac
Xset i_sysfile
Xeval $setvar
X
END_OF_FILE
  if test 1442 -ne `wc -c <'mcon/U/i_sysfile.U'`; then
    echo shar: \"'mcon/U/i_sysfile.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/i_sysfile.U'
fi
if test -f 'mcon/U/longsize.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/longsize.U'\"
else
  echo shar: Extracting \"'mcon/U/longsize.U'\" \(1461 characters\)
  sed "s/^X//" >'mcon/U/longsize.U' <<'END_OF_FILE'
X?RCS: $Id: longsize.U,v 3.0 1993/08/18 12:09:07 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: longsize.U,v $
X?RCS: Revision 3.0  1993/08/18  12:09:07  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:longsize: cat rm Myread +cc +ccflags
X?MAKE:	-pick add $@ %<
X?S:longsize:
X?S:	This variable contains the value of the LONGSIZE symbol, which
X?S:	indicates to the C program how many bytes there are in a long.
X?S:.
X?C:LONGSIZE:
X?C:	This symbol contains the size of a long, so that the C preprocessor
X?C:	can make decisions based on it.
X?C:.
X?H:#define LONGSIZE $longsize		/**/
X?H:.
X: check for length of long
Xecho " "
Xcase "$longsize" in
X'')
X	echo "Checking to see how big your long integers are..." >&4
X	$cat >try.c <<'EOCP'
X#include <stdio.h>
Xmain()
X{
X	printf("%d\n", sizeof(long));
X}
XEOCP
X	if $cc $ccflags try.c -o try >/dev/null 2>&1 ; then
X		dflt=`./try`
X	else
X		dflt='4'
X		echo "(I can't seem to compile the test program.  Guessing...)"
X	fi
X	;;
X*)
X	dflt="$longsize"
X	;;
Xesac
Xrp="What is the size of a long integer (in bytes)?"
X. ./myread
Xlongsize="$ans"
X$rm -f try.c try
X
END_OF_FILE
  if test 1461 -ne `wc -c <'mcon/U/longsize.U'`; then
    echo shar: \"'mcon/U/longsize.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/longsize.U'
fi
if test -f 'mcon/U/lseektype.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/lseektype.U'\"
else
  echo shar: Extracting \"'mcon/U/lseektype.U'\" \(1471 characters\)
  sed "s/^X//" >'mcon/U/lseektype.U' <<'END_OF_FILE'
X?RCS: $Id: lseektype.U,v 3.0 1993/08/18 12:09:08 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: lseektype.U,v $
X?RCS: Revision 3.0  1993/08/18  12:09:08  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:lseektype: Myread Oldconfig Loc contains Findhdr
X?MAKE:	-pick add $@ %<
X?S:lseektype:
X?S:	This variable defines lseektype to be something like off_t, long, 
X?S:	or whatever type is used to declare lseek offset's type in the
X?S:	kernel (which also appears to be lseek's return type).
X?S:.
X?C:Off_t (LSEEKTYPE):
X?C:	This symbol holds the type used to declare offsets in the kernel.
X?C:	It can be int, long, off_t, etc... It may be necessary to include
X?C:	<sys/types.h> to get any typedef'ed information.
X?C:.
X?H:#define Off_t $lseektype		/* <offset> type */
X?H:.
X: see what type lseek is declared as in the kernel
Xcase "$lseektype" in
X'')
X	if $contains 'off_t;' `./findhdr sys/types.h` >/dev/null 2>&1 ; then
X		dflt='off_t';
X	else
X		dflt='long';
X	fi
X	;;
X*)  dflt="$lseektype"
X	;;
Xesac
Xecho " "
Xrp="What type is lseek's offset on this system declared as?"
X. ./myread
Xlseektype="$ans"
X
END_OF_FILE
  if test 1471 -ne `wc -c <'mcon/U/lseektype.U'`; then
    echo shar: \"'mcon/U/lseektype.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/lseektype.U'
fi
if test -f 'mcon/U/mailfile.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/mailfile.U'\"
else
  echo shar: Extracting \"'mcon/U/mailfile.U'\" \(1523 characters\)
  sed "s/^X//" >'mcon/U/mailfile.U' <<'END_OF_FILE'
X?RCS: $Id: mailfile.U,v 3.0 1993/08/18 12:09:11 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: mailfile.U,v $
X?RCS: Revision 3.0  1993/08/18  12:09:11  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:mailfile: Myread Oldconfig Filexp
X?MAKE:	-pick add $@ %<
X?S:mailfile:
X?S:	This variable contains the eventual value of the MAILFILE symbol,
X?S:	which contains an interpretable name of the mail spool file for the
X?S:	current user.
X?S:.
X?C:MAILFILE:
X?C:	This symbol contains the interpretable name of the mail spool file
X?C:	for the current user.  The program must be prepared to substitute
X?C:	the HOME directory for %~, and the login id for %L.
X?C:.
X?H:#define MAILFILE "$mailfile"		/**/
X?H:.
X: determine where mail is spooled
Xcase "$mailfile" in
X'')
X	dflt=`./loc . XXX /usr/spool/mail /usr/mail`
X	case "$dflt" in
X	XXX) dflt='%~/mailbox';;
X	*) dflt="$dflt/%L";;
X	esac
X	;;
X*)  dflt="$mailfile"
X	;;
Xesac
Xcat <<'EOM'
X
XIn the following question, you may use %~ to represent the user's home
Xdirectory, and %L to represent a users name.
X
XEOM
Xrp='In which file is yet-to-be-read mail spooled? (~name ok)'
X. ./myread
Xmailfile=`./filexp "$ans"`
X
END_OF_FILE
  if test 1523 -ne `wc -c <'mcon/U/mailfile.U'`; then
    echo shar: \"'mcon/U/mailfile.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/mailfile.U'
fi
if test -f 'mcon/U/sunscanf.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/sunscanf.U'\"
else
  echo shar: Extracting \"'mcon/U/sunscanf.U'\" \(1493 characters\)
  sed "s/^X//" >'mcon/U/sunscanf.U' <<'END_OF_FILE'
X?RCS: $Id: sunscanf.U,v 3.0 1993/08/18 12:09:54 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: sunscanf.U,v $
X?RCS: Revision 3.0  1993/08/18  12:09:54  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:sunscanf: cat rm Myread +cc +ccflags test Setvar
X?MAKE:	-pick add $@ %<
X?S:sunscanf:
X?S:	This variable is set if this system runs with the Sun version
X?S:	of scanf.
X?S:.
X?C:SUNSCANF:
X?C:	This variable is set if this system runs with the Sun version
X?C:	of scanf.
X?C:.
X?H:#$sunscanf 	SUNSCANF  /**/
X?H:.
X?LINT:set sunscanf
X: check to see what kinda scanf your using.
Xecho " "
Xecho "Checking to see what flavor of scanf you have..." >&4
X$cat >scanf.c <<'EOCP'
Xmain()
X{
X	float value;
X
X	sscanf("4.5","%g",&value);
X	printf("%d\n", value == 4.5);
X}
XEOCP
Xif $cc $ccflags scanf.c -o scanf >/dev/null 2>&1 ; then
X	if $test `scanf` = 0; then
X		echo "Hmm.. seems your not running the USG flavor.."
X		val="$undef"
X	else
X		echo "Uh... your running the USG flavor of scanf."
X		val="$define"
X	fi
Xelse
X	echo "(I can't seem to compile the test program... Guessing)"
X	val="$undef"
Xfi
Xset sunscanf
Xeval $setvar
X$rm -f scanf*
X
END_OF_FILE
  if test 1493 -ne `wc -c <'mcon/U/sunscanf.U'`; then
    echo shar: \"'mcon/U/sunscanf.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/sunscanf.U'
fi
if test -f 'mcon/U/uidtype.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/uidtype.U'\"
else
  echo shar: Extracting \"'mcon/U/uidtype.U'\" \(1526 characters\)
  sed "s/^X//" >'mcon/U/uidtype.U' <<'END_OF_FILE'
X?RCS: $Id: uidtype.U,v 3.0 1993/08/18 12:09:56 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: uidtype.U,v $
X?RCS: Revision 3.0  1993/08/18  12:09:56  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:uidtype: Myread Oldconfig contains Findhdr
X?MAKE:	-pick add $@ %<
X?S:uidtype:
X?S:	This variable defines UIDTYPE to be something like uid_t, int, 
X?S:	ushort, or whatever type is used to declare user ids in the kernel.
X?S:.
X?C:Uid_t (UIDTYPE):
X?C:	This symbol holds the type used to declare user ids in the kernel.
X?C:	It can be int, ushort, uid_t, etc... It may be necessary to include
X?C:	<sys/types.h> to get any typedef'ed information.
X?C:.
X?H:#define Uid_t $uidtype		/* UID type */
X?H:.
X?T:xxx
X: see what type uids are declared as in the kernel
Xcase "$uidtype" in
X'')
X	if $contains 'uid_t;' `./findhdr sys/types.h` >/dev/null 2>&1 ; then
X		dflt='uid_t';
X	else
X		xxx=`./findhdr sys/user.h`
X		set `grep '_ruid;' "$xxx" 2>/dev/null` unsigned short
X		case $1 in
X		unsigned) dflt="$1 $2" ;;
X		*) dflt="$1" ;;
X		esac
X	fi
X	;;
X*)  dflt="$uidtype";;
Xesac
Xecho " "
Xrp="What type are user ids on this system declared as?"
X. ./myread
Xuidtype="$ans"
X
END_OF_FILE
  if test 1526 -ne `wc -c <'mcon/U/uidtype.U'`; then
    echo shar: \"'mcon/U/uidtype.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/uidtype.U'
fi
if test -f 'mcon/files/type.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/files/type.U'\"
else
  echo shar: Extracting \"'mcon/files/type.U'\" \(1496 characters\)
  sed "s/^X//" >'mcon/files/type.U' <<'END_OF_FILE'
X?RCS: $Id: type.U,v 3.0 1993/08/18 12:10:11 ram Exp $
X?RCS:
X?RCS:  Copyright (c) 1991-1993, Raphael Manfredi
X?RCS:  
X?RCS:  You may redistribute only under the terms of the Artistic Licence,
X?RCS:  as specified in the README file that comes with the distribution.
X?RCS:  You may reuse parts of this distribution only within the terms of
X?RCS:  that same Artistic Licence; a copy of which may be found at the root
X?RCS:  of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: type.U,v $
X?RCS: Revision 3.0  1993/08/18  12:10:11  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:uidtype: Myread Oldconfig contains usrinc
X?MAKE:	-pick add $@ %<
X?S:uidtype:
X?S:	This variable defines UIDTYPE to be something like uid_t, int, 
X?S:	ushort, or whatever type is used to declare user ids in the kernel.
X?S:.
X?C:Uid_t (UIDTYPE):
X?C:	This symbol holds the type used to declare user ids in the kernel.
X?C:	It can be int, ushort, uid_t, etc... It may be necessary to include
X?C:	<sys/types.h> to get any typedef'ed information.
X?C:.
X?H:#define Uid_t $uidtype		/* UID type */
X?H:.
X: see what type uids are declared as in the kernel
Xcase "$uidtype" in
X'')
X	if $contains 'uid_t;' $usrinc/sys/types.h >/dev/null 2>&1 ; then
X		dflt='uid_t';
X	else
X		set `grep '_ruid;' $usrinc/sys/user.h 2>/dev/null` unsigned short
X		case $1 in
X		unsigned) dflt="$1 $2" ;;
X		*) dflt="$1" ;;
X		esac
X	fi
X	;;
X*)  dflt="$uidtype";;
Xesac
Xecho " "
Xrp="What type are user ids on this system declared as?"
X. myread
Xuidtype="$ans"
X
END_OF_FILE
  if test 1496 -ne `wc -c <'mcon/files/type.U'`; then
    echo shar: \"'mcon/files/type.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/files/type.U'
fi
if test -f 'mcon/pl/order.pl' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/pl/order.pl'\"
else
  echo shar: Extracting \"'mcon/pl/order.pl'\" \(1482 characters\)
  sed "s/^X//" >'mcon/pl/order.pl' <<'END_OF_FILE'
X;# $Id: order.pl,v 3.0 1993/08/18 12:10:28 ram Exp $
X;#
X;#  Copyright (c) 1991-1993, Raphael Manfredi
X;#  
X;#  You may redistribute only under the terms of the Artistic Licence,
X;#  as specified in the README file that comes with the distribution.
X;#  You may reuse parts of this distribution only within the terms of
X;#  that same Artistic Licence; a copy of which may be found at the root
X;#  of the source tree for dist 3.0.
X;#
X;# $Log: order.pl,v $
X;# Revision 3.0  1993/08/18  12:10:28  ram
X;# Baseline for dist 3.0 netwide release.
X;#
X;# 
X;# The @cmdwanted array records the output of the makefile (pick commands only).
X;# The shell commands are executed right away.
X;#  @cmdwanted records the output of the make process (solving dependencies)
X# Solve dependencies by saving the 'pick' command in @cmdwanted
Xsub solve_dependencies {
X	local(%unitseen);			# Record already picked units (avoid duplicates)
X	print "Determining the correct order for the units...\n" unless $opt_s;
X	chdir('.MT') || die "Can't chdir to .MT: $!.\n";
X	open(MAKE, "make -n |") || die "Can't run make";
X	while (<MAKE>) {
X		s|^\s+||;				# Some make print tabs before command
X		print "\t$_" if $opt_v;
X		if (/^pick/) {
X			($pick,$cmd,$symbol,$unit) = split(' ');
X			push(@cmdwanted,"$cmd $symbol $unit")
X				unless $unitseen{"$cmd:$unit"}++;
X		} elsif (/^cond/) {
X			# Ignore conditional symbol request
X		} else {
X			chop;
X			system;
X		}
X	}
X	chdir($WD) || die "Can't chdir to $WD: $!.\n";
X	close MAKE;
X}
X
END_OF_FILE
  if test 1482 -ne `wc -c <'mcon/pl/order.pl'`; then
    echo shar: \"'mcon/pl/order.pl'\" unpacked with wrong size!
  fi
  # end of 'mcon/pl/order.pl'
fi
echo shar: End of archive 22 \(of 28\).
cp /dev/null ark22isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 28 archives.
    echo "Please run PACKNOTES through sh, read REAMDE and then type Configure."
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0

exit 0 # Just in case...
