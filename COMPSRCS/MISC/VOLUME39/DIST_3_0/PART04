Newsgroups: comp.sources.misc
From: Raphael Manfredi <ram@acri.fr>
Subject: v39i008:  dist-3.0 - Configure script generator and related tools, Part04/28
Message-ID: <1993Aug18.183830.16898@sparky.sterling.com>
X-Md4-Signature: b6760d0aa6b2bcd45fbcbb2a7463b0d1
Sender: kent@sparky.sterling.com (Kent Landfield)
Organization: A.C.R.I., Lyon, France
Date: Wed, 18 Aug 1993 18:38:30 GMT
Approved: kent@sparky.sterling.com

Submitted-by: Raphael Manfredi <ram@acri.fr>
Posting-number: Volume 39, Issue 8
Archive-name: dist-3.0/part04
Environment: UNIX, Perl, RCS

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# Contents:  Configure mcon/Makefile.SH patchlevel.h
# Wrapped by ram@soft208 on Wed Aug 18 14:42:18 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 4 (of 28)."'
if test -f 'Configure' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Configure'\"
else
  echo shar: Extracting \"'Configure'\" \(45156 characters\)
  sed "s/^X//" >'Configure' <<'END_OF_FILE'
X#! /bin/sh
X#
X# If these # comments don't work, trim them. Don't worry about any other
X# shell scripts, Configure will trim # comments from them for you.
X#
X# (If you are trying to port this package to a machine without sh,
X# I would suggest you have a look at the prototypical config_h.SH file
X# and edit it to reflect your system. Some packages may include samples
X# of config.h for certain machines, so you might look for one of those.)
X#
X# Yes, you may rip this off to use in other distribution packages. This
X# script belongs to the public domain and cannot be copyrighted.
X#
X# (Note: this Configure script was generated automatically. Rather than
X# working with this copy of Configure, you may wish to get metaconfig.
X# The dist-3.0 package (which contains metaconfig) was posted in
X# comp.sources.misc so you may fetch it yourself from your nearest
X# archive site. Check with Archie if you don't know where that can be.)
X#
X
X# $Id: Configure,v 3.0 1993/08/18 12:03:51 ram Exp $
X#
X# Generated on Wed Aug 18 11:02:42 MET DST 1993 [metaconfig 3.0 PL0]
X
Xcat >/tmp/c1$$ <<EOF
XARGGGHHHH!!!!!
X
XSCO csh still thinks true is false.  Write to SCO today and tell them that next
Xyear Configure ought to "rm /bin/csh" unless they fix their blasted shell. :-)
X
X(Actually, Configure ought to just patch csh in place.  Hmm.  Hmmmmm.  All
Xwe'd have to do is go in and swap the && and || tokens, wherever they are.)
X
X[End of diatribe. We now return you to your regularly scheduled programming...]
XEOF
Xcat >/tmp/c2$$ <<EOF
X
XOOPS!  You naughty creature!  You didn't run Configure with sh!
XI will attempt to remedy the situation by running sh for you...
XEOF
X
Xtrue || cat /tmp/c1$$ /tmp/c2$$
Xtrue || exec sh $0 $argv:q
X
X(exit $?0) || cat /tmp/c2$$
X(exit $?0) || exec sh $0 $argv:q
Xrm -f /tmp/c1$$ /tmp/c2$$
X
X: Sanity checks
XPATH=".:$PATH:/bin:/usr/bin:/usr/local/bin:/usr/ucb:/usr/local:/usr/lbin"
XPATH=$PATH:'/usr/5bin:/etc:/usr/gnu/bin:/usr/new:/usr/new/bin:/usr/nbin'
XPATH=$PATH:'/sys5.3/bin:/sys5.3/usr/bin:/bsd4.3/bin:/bsd4.3/usr/ucb'
XPATH=$PATH:'/bsd4.3/usr/bin:/usr/bsd:/bsd43/bin:/usr/ccs/bin'
XPATH=$PATH:'/etc:/usr/lib:/usr/ucblib:/lib:/usr/ccs/lib'
Xexport PATH
X
Xif test ! -t 0; then
X	echo "Say 'sh Configure', not 'sh <Configure'"
X	exit 1
Xfi
X
X: On HP-UX, large Configure scripts may exercise a bug in /bin/sh
Xif test -f /hp-ux -a -x /bin/ksh; then
X	if (alias -x) >/dev/null 2>&1; then
X		: already under /bin/ksh
X	else
X		cat <<'EOM'
X(Feeding myself to ksh to avoid nasty sh bug in "here document" expansion.)
XEOM
X		exec /bin/ksh $0 "$@"
X	fi
Xelse
X	: Warn them if they use ksh on other systems
X	(alias -x) >/dev/null 2>&1 && \
X		cat <<'EOM'
X(I see you are using the Korn shell.  Some ksh's blow up on Configure,
Xespecially on exotic machines.  If yours does, try the Bourne shell instead.)
XEOM
Xfi
X
X: Configure runs within the UU subdirectory
Xtest -d UU || mkdir UU
Xcd UU && rm -f *
X
Xd_bsd=''
Xd_eunice=''
Xd_xenix=''
Xeunicefix=''
XMcc=''
Xawk=''
Xbash=''
Xbison=''
Xcat=''
Xchgrp=''
Xchmod=''
Xchown=''
Xcompress=''
Xcp=''
Xcpio=''
Xcpp=''
Xcsh=''
Xdate=''
Xecho=''
Xegrep=''
Xemacs=''
Xexpr=''
Xflex=''
Xgcc=''
Xgrep=''
Xinews=''
Xksh=''
Xless=''
Xline=''
Xlint=''
Xln=''
Xlp=''
Xlpr=''
Xls=''
Xmail=''
Xmailx=''
Xmake=''
Xmkdir=''
Xmore=''
Xmv=''
Xnroff=''
Xperl=''
Xpg=''
Xpmake=''
Xpr=''
Xrm=''
Xrmail=''
Xsed=''
Xsendmail=''
Xsh=''
Xshar=''
Xsleep=''
Xsmail=''
Xsort=''
Xsubmit=''
Xtail=''
Xtar=''
Xtbl=''
Xtest=''
Xtouch=''
Xtr=''
Xtroff=''
Xuname=''
Xuniq=''
Xuuname=''
Xvi=''
Xzcat=''
Xmailpatches=''
Xnotifypatches=''
Xhint=''
Xmyuname=''
XAuthor=''
XDate=''
XHeader=''
XId=''
XLocker=''
XLog=''
XRCSfile=''
XRevision=''
XSource=''
XState=''
Xafs=''
Xbaserev=''
Xcf_by=''
Xcf_time=''
Xcontains=''
Xd_portable=''
Xdefeditor=''
Xmailer=''
Xinstallmansrc=''
Xmanext=''
Xmansrc=''
Xmansrcexp=''
Xmydomain=''
Xmyhostname=''
Xphostname=''
Xc=''
Xn=''
Xd_berknames=''
Xd_passnames=''
Xd_usgnames=''
Xnametype=''
Xgroupcat=''
Xhostcat=''
Xpasscat=''
Xorgname=''
Xpackage=''
Xpager=''
Xpatchlevel=''
Xperlpath=''
Xinstallprivlib=''
Xprivlib=''
Xprivlibexp=''
Xinstallscript=''
Xscriptdir=''
Xscriptdirexp=''
Xsharpbang=''
Xshsharp=''
Xspitshell=''
Xstartperl=''
Xstartsh=''
Xsysman=''
Xccflags=''
Xcppflags=''
Xi_sysfile=''
Xi_sysselct=''
Xi_whoami=''
Xlarge=''
Xlibs=''
XCONFIG=''
X
X: script used to extract .SH files with variable substitutions
Xcat >extract <<'EOS'
XCONFIG=true
Xecho "Doing variable substitutions on .SH files..."
Xif test -f MANIFEST; then
X	set x `awk '{print $1}' <MANIFEST | grep '\.SH'`
Xelse
X	echo "(Looking for .SH files under the current directory.)"
X	set x `find . -name "*.SH" -print`
Xfi
Xshift
Xcase $# in
X0) set x *.SH; shift;;
Xesac
Xif test ! -f $1; then
X	shift
Xfi
Xfor file in $*; do
X	case "$file" in
X	*/*)
X		dir=`expr X$file : 'X\(.*\)/'`
X		file=`expr X$file : 'X.*/\(.*\)'`
X		(cd $dir && . ./$file)
X		;;
X	*)
X		. ./$file
X		;;
X	esac
Xdone
Xif test -f config_h.SH; then
X	if test ! -f config.h; then
X	: oops, they left it out of MANIFEST, probably, so do it anyway.
X	. ./config_h.SH
X	fi
Xfi
XEOS
X
X: produce awk script to parse command line options
Xcat >options.awk <<'EOF'
XBEGIN {
X	optstr = "deEf:hrsSV";	# getopt-style specification
X
X	len = length(optstr);
X	for (i = 1; i <= len; i++) {
X		c = substr(optstr, i, 1);
X		if (i < len) a = substr(optstr, i + 1, 1); else a = "";
X		if (a == ":") {
X			arg[c] = 1;
X			i++;
X		}
X		opt[c] = 1;
X	}
X}
X{
X	expect = 0;
X	str = $0;
X	if (substr(str, 1, 1) != "-") {
X		printf("'%s'\n", str);
X		next;
X	}
X	len = length($0);
X	for (i = 2; i <= len; i++) {
X		c = substr(str, i, 1);
X		if (!opt[c]) {
X			printf("-%s\n", substr(str, i));
X			next;
X		}
X		printf("-%s\n", c);
X		if (arg[c]) {
X			if (i < len)
X				printf("'%s'\n", substr(str, i + 1));
X			else
X				expect = 1;
X			next;
X		}
X	}
X}
XEND {
X	if (expect)
X		print "?";
X}
XEOF
X
X: process the command line options
Xset X `for arg in "$@"; do echo $arg; done | awk -f options.awk`
Xeval "set $*"
Xshift
Xrm -f options.awk
X
X: set up default values
Xfastread=''
Xreuseval=false
Xconfig_sh=''
Xalldone=''
Xerror=''
Xsilent=''
Xextractsh=''
X
X: option parsing
Xwhile test $# -gt 0; do
X	case "$1" in
X	-d) shift; fastread=yes;;
X	-e) shift; alldone=cont;;
X	-f)
X		shift
X		cd ..
X		if test -r "$1"; then
X			config_sh="$1"
X		else
X			echo "Configure: cannot read config file $1." >&2
X			error=true
X		fi
X		cd UU
X		shift;;
X	-h) shift; error=true;;
X	-r) shift; reuseval=true;;
X	-s) shift; silent=true;;
X	-E) shift; alldone=exit;;
X	-S) shift; extractsh=true;;
X	-V) echo "Configure generated by metaconfig 3.0 PL0." >&2
X		exit 0;;
X	--) break;;
X	-*) echo "Configure: unknown option $1" >&2; shift; error=true;;
X	*) break;;
X	esac
Xdone
X
Xcase "$error" in
Xtrue)
X	cat >&2 <<EOM
XUsage: Configure [-dehrESV] [-f config.sh]
X  -d : use defaults for all answers.
X  -e : go on without questioning past the production of config.sh.
X  -f : specify an alternate default configuration file.
X  -h : print this help message and exit (with an error status).
X  -r : reuse C symbols value if possible (skips costly nm extraction).
X  -s : silent mode, only echoes questions and essential information.
X  -E : stop at the end of questions, after having produced config.sh.
X  -S : perform variable substitutions on all .SH files (can mix with -f)
X  -V : print version number and exit (with a zero status).
XEOM
X	exit 1
X	;;
Xesac
X
Xexec 4>&1
Xcase "$silent" in
Xtrue) exec 1>/dev/null;;
Xesac
X
Xcase "$extractsh" in
Xtrue)
X	case "$config_sh" in
X	'') config_sh='config.sh'; config='./config.sh';;
X	/*) config="$config_sh";;
X	*) config="./$config_sh";;
X	esac
X	echo " "
X	echo "Fetching answers from $config_sh..."
X	cd ..
X	. $config
X	echo " "
X	. ./UU/extract
X	rm -rf UU
X	echo "Done."
X	exit 0
X	;;
Xesac
X
X: set package name
Xpackage=dist
X
X: Eunice requires " " instead of "", can you believe it
Xecho " "
X: Here we go...
Xecho "Beginning of configuration questions for $package."
X
Xdefine='define'
Xundef='undef'
Xsmallmach='pdp11 i8086 z8000 i80286 iAPX286'
Xrmlist=''
X
Xtrap 'echo " "; rm -rf $rmlist; exit 1' 1 2 3 15
X
X: We must find out about Eunice early
Xeunicefix=':'
Xif test -f /etc/unixtovms; then
X	eunicefix=/etc/unixtovms
Xfi
Xif test -f /etc/unixtovms.exe; then
X	eunicefix=/etc/unixtovms.exe
Xfi
X
Xbin='/usr/local/bin'
Xusrinc='/usr/include'
X
X: Some greps do not return status, grrr.
Xecho "grimblepritz" >grimble
Xif grep blurfldyick grimble >/dev/null 2>&1 ; then
X	contains=contains
Xelif grep grimblepritz grimble >/dev/null 2>&1 ; then
X	contains=grep
Xelse
X	contains=contains
Xfi
Xrm -f grimble
X: the following should work in any shell
Xcase "$contains" in
Xcontains*)
X	echo " "
X	echo "AGH!  Grep doesn't return a status.  Attempting remedial action."
X	cat >contains <<'EOSS'
Xgrep "$1" "$2" >.greptmp && cat .greptmp && test -s .greptmp
XEOSS
Xchmod +x contains
Xesac
X
X: first determine how to suppress newline on echo command
Xecho " "
Xecho "Checking echo to see how to suppress newlines..."
X(echo "hi there\c" ; echo " ") >.echotmp
Xif $contains c .echotmp >/dev/null 2>&1 ; then
X	echo "...using -n."
X	n='-n'
X	c=''
Xelse
X	cat <<'EOM'
X...using \c
XEOM
X	n=''
X	c='\c'
Xfi
Xecho $n "The star should be here-->$c"
Xecho '*'
Xrm -f .echotmp
X
X: Now test for existence of everything in MANIFEST
Xecho " "
Xif test -f ../MANIFEST; then
X	echo "First let's make sure your kit is complete.  Checking..." >&4
X	awk '$1 !~ /PACK[A-Z]+/ {print $1}' ../MANIFEST | split -50
X	rm -f missing
X	for filelist in x??; do
X		(cd ..; ls `cat UU/$filelist` >/dev/null 2>>UU/missing)
X	done
X	if test -s missing; then
X		cat missing >&4
X		cat >&4 <<'EOM'
X
XTHIS PACKAGE SEEMS TO BE INCOMPLETE.
X
XYou have the option of continuing the configuration process, despite the
Xdistinct possibility that your kit is damaged, by typing 'y'es.  If you
Xdo, don't blame me if something goes wrong.  I advise you to type 'n'o
Xand contact the author (ram@acri.fr).
X
XEOM
X		echo $n "Continue? [n] $c" >&4
X		read ans
X		case "$ans" in
X		y*)
X			echo "Continuing..." >&4
X			rm -f missing
X			;;
X		*)
X			echo "ABORTING..." >&4
X			kill $$
X			;;
X		esac
X	else
X		echo "Looks good..." >&4
X	fi
Xelse
X	echo "There is no MANIFEST file.  I hope your kit is complete !"
Xfi
Xrm -f missing x??
X
X: compute the number of columns on the terminal for proper question formatting
Xcase "$COLUMNS" in
X'') COLUMNS='80';;
Xesac
X
X: set up the echo used in my read
Xmyecho="case \"\$xxxm\" in
X'') echo $n \"\$rp $c\" >&4;;
X*) case \"\$rp\" in
X	'') echo $n \"[\$xxxm] $c\";;
X	*)
X		if test \`echo \"\$rp [\$xxxm]  \" | wc -c\` -ge $COLUMNS; then
X			echo \"\$rp\" >&4
X			echo $n \"[\$xxxm] $c\" >&4
X		else
X			echo $n \"\$rp [\$xxxm] $c\" >&4
X		fi
X		;;
X	esac;;
Xesac"
X
X: now set up to do reads with possible shell escape and default assignment
Xcat <<EOSC >myread
Xxxxm=\$dflt
X$myecho
Xans='!'
Xcase "\$fastread" in
Xyes) case "\$dflt" in
X	'') ;;
X	*) ans='';
X		case "\$silent-\$rp" in
X		true-) ;;
X		*) echo " " >&4;;
X		esac;;
X	esac;;
X*) case "\$silent" in
X	true) case "\$rp" in
X		'') ans='';;
X		esac;;
X	esac;;
Xesac
Xwhile expr "X\$ans" : "X!" >/dev/null; do
X	read answ
X	set x \$xxxm
X	shift
X	aok=''; eval "ans=\"\$answ\"" && aok=y
X	case  "\$answ" in
X	"\$ans")
X		case "\$ans" in
X		"!")
X			sh 1>&4
X			echo " "
X			$myecho
X			;;
X		!*)
X			set x \`expr "X\$ans" : "X!\(.*\)\$"\`
X			shift
X			sh 1>&4 -c "\$*"
X			echo " "
X			$myecho
X			;;
X		esac;;
X	*)
X		case "\$aok" in
X		y)
X			echo "*** Substitution done -- please confirm."
X			xxxm="\$ans"
X			ans=\`echo $n "\$ans$c" | tr '\012' ' '\`
X			xxxm="\$ans"
X			ans=!
X			;;
X		*)
X			echo "*** Error -- try again."
X			ans=!
X			;;
X		esac
X		$myecho
X		;;
X	esac
Xdone
Xcase "\$ans" in
X'') ans="\$xxxm";;
Xesac
XEOSC
X
X: create .config dir to save info across Configure sessions
Xtest -d ../.config || mkdir ../.config
Xcat >../.config/README <<EOF
XThis directory created by Configure to save information that should
Xpersist across sessions.
X
XYou may safely delete it if you wish.
XEOF
X
X: general instructions
Xneedman=true
Xfirsttime=true
Xuser=`( (logname) 2>/dev/null || whoami) 2>&1`
Xif $contains "^$user\$" ../.config/instruct >/dev/null 2>&1; then
X	firsttime=false
X	echo " "
X	rp='Would you like to see the instructions?'
X	dflt=n
X	. ./myread
X	case "$ans" in
X	[yY]*) ;;
X	*) needman=false;;
X	esac
Xfi
Xif $needman; then
X	cat <<EOH
X 
XThis installation shell script will examine your system and ask you questions
Xto determine how the dist package should be installed. If you get
Xstuck on a question, you may use a ! shell escape to start a subshell or
Xexecute a command.  Many of the questions will have default answers in square
Xbrackets; typing carriage return will give you the default.
X
XOn some of the questions which ask for file or directory names you are allowed
Xto use the ~name construct to specify the login directory belonging to "name",
Xeven if you don't have a shell which knows about that.  Questions where this is
Xallowed will be marked "(~name ok)".
X
XEOH
X	rp=''
X	dflt='Type carriage return to continue'
X	. ./myread
X	cat <<'EOH'
X
XThe prompter used in this script allows you to use shell variables and
Xbackticks in your answers.  You may use $1, $2, etc...  to refer to the words
Xin the default answer, as if the default line was a set of arguments given to a
Xscript shell.  This means you may also use $* to repeat the whole default line,
Xso you do not have to re-type everything to add something to the default.
X
XEverytime there is a substitution, you will have to confirm.  If there is an
Xerror (e.g. an unmatched backtick), the default answer will remain unchanged
Xand you will be prompted again.
X
XIf you are in a hurry, you may run 'Configure -d'.  This will bypass nearly all
Xthe questions and use the computed defaults (or the previous answers if there
Xwas already a config.sh file). Type 'Configure -h' for a list of options.
X
XEOH
X	. ./myread
X	cat <<EOH
X
XMuch effort has been expended to ensure that this shell script will run on any
XUnix system.  If despite that it blows up on yours, your best bet is to edit
XConfigure and run it again.  Also, let me (ram@acri.fr)
Xknow how I blew it.  If you can't run Configure for some reason, you'll have to
Xgenerate a config.sh file by hand.
X
XThis installation script affects things in two ways:
X
X1) it may do direct variable substitutions on some of the files included
X   in this kit.
X2) it builds a config.h file for inclusion in C programs.  You may edit
X   any of these files as the need arises after running this script.
X
XIf you make a mistake on a question, there is no easy way to back up to it
Xcurrently.  The easiest thing to do is to edit config.sh and rerun all the SH
Xfiles.  Configure will offer to let you do this before it runs the SH files.
X
XEOH
X	dflt='Type carriage return to continue'
X	. ./myread
X	case "$firsttime" in
X	true) echo $user >>../.config/instruct;;
X	esac
Xfi
X
X: see if sh knows # comments
Xecho " "
Xecho "Checking your sh to see if it knows about # comments..." >&4
Xif sh -c '#' >/dev/null 2>&1 ; then
X	echo "Your sh handles # comments correctly."
X	shsharp=true
X	spitshell=cat
X	echo " "
X	echo "Okay, let's see if #! works on this system..."
X	echo "#!/bin/cat" >try
X	$eunicefix try
X	chmod +x try
X	./try > today
X	if test -s today; then
X		echo "It does."
X		sharpbang='#!'
X	else
X		echo "#! /bin/cat" > try
X		$eunicefix try
X		chmod +x try
X		./try > today
X		if test -s today; then
X			echo "It does."
X			sharpbang='#! '
X		else
X			echo "It doesn't."
X			sharpbang=': use '
X		fi
X	fi
Xelse
X	echo "Your sh doesn't grok # comments--I will strip them later on."
X	shsharp=false
X	echo "exec grep -v '^[ 	]*#'" >spitshell
X	chmod +x spitshell
X	$eunicefix spitshell
X	spitshell=`pwd`/spitshell
X	echo "I presume that if # doesn't work, #! won't work either!"
X	sharpbang=': use '
Xfi
Xrm -f try today
X
X: figure out how to guarantee sh startup
Xecho " "
Xecho "Checking out how to guarantee sh startup..." >&4
Xcase "$SYSTYPE" in
X*bsd*|sys5*) startsh=$sharpbang"/$SYSTYPE/bin/sh";;
X*) startsh=$sharpbang'/bin/sh';;
Xesac
Xecho "Let's see if '$startsh' works..."
Xcat >try <<EOSS
X$startsh
Xset abc
Xtest "$?abc" != 1
XEOSS
X
Xchmod +x try
X$eunicefix try
Xif ./try; then
X	echo "Yup, it does."
Xelse
Xecho "Nope.  You may have to fix up the shell scripts to make sure sh runs them."
Xfi
Xrm -f try
X
X: find out where common programs are
Xecho " "
Xecho "Locating common programs..." >&4
Xcat <<EOSC >loc
X$startsh
Xcase \$# in
X0) exit 1;;
Xesac
Xthing=\$1
Xshift
Xdflt=\$1
Xshift
Xfor dir in \$*; do
X	case "\$thing" in
X	.)
X	if test -d \$dir/\$thing; then
X		echo \$dir
X		exit 0
X	fi
X	;;
X	*)
X	if test -f \$dir/\$thing; then
X		echo \$dir/\$thing
X		exit 0
X	elif test -f \$dir/\$thing.exe; then
X		: on Eunice apparently
X		echo \$dir/\$thing
X		exit 0
X	fi
X	;;
X	esac
Xdone
Xecho \$dflt
Xexit 1
XEOSC
Xchmod +x loc
X$eunicefix loc
Xloclist="
Xawk
Xcat
Xchgrp
Xchmod
Xchown
Xecho
Xexpr
Xgrep
Xmake
Xmv
Xrm
Xsed
Xsort
Xuniq
X"
Xtrylist="
Xcpp
Xdate
Xinews
Xless
Xline
Xmail
Xmore
Xnroff
Xperl
Xpg
Xrmail
Xsendmail
Xsmail
Xtest
Xuname
Xvi
Xzcat
X"
Xpth=`echo $PATH | sed -e 's/:/ /g'`
Xpth="$pth /lib /usr/lib"
Xfor file in $loclist; do
X	xxx=`./loc $file $file $pth`
X	eval $file=$xxx
X	eval _$file=$xxx
X	case "$xxx" in
X	/*)
X		echo $file is in $xxx.
X		;;
X	*)
X		echo "I don't know where $file is.  I hope it's in everyone's PATH."
X		;;
X	esac
Xdone
Xecho " "
Xecho "Don't worry if any of the following aren't found..."
Xsay=offhand
Xfor file in $trylist; do
X	xxx=`./loc $file $file $pth`
X	eval $file=$xxx
X	eval _$file=$xxx
X	case "$xxx" in
X	/*)
X		echo $file is in $xxx.
X		;;
X	*)
X		echo "I don't see $file out there, $say."
X		say=either
X		;;
X	esac
Xdone
Xcase "$egrep" in
Xegrep)
X	echo "Substituting grep for egrep."
X	egrep=$grep
X	;;
Xesac
Xcase "$test" in
Xtest)
X	echo "Hopefully test is built into your sh."
X	;;
X/bin/test)
X	if sh -c "PATH= test true" >/dev/null 2>&1; then
X		echo "Using the test built into your sh."
X		test=test
X	fi
X	;;
X*)
X	test=test
X	;;
Xesac
Xcase "$echo" in
Xecho)
X	echo "Hopefully echo is built into your sh."
X	;;
X*)
X	echo " "
Xecho "Checking compatibility between $echo and builtin echo (if any)..." >&4
X	$echo $n "hi there$c" >foo1
X	echo $n "hi there$c" >foo2
X	if cmp foo1 foo2 >/dev/null 2>&1; then
X		echo "They are compatible.  In fact, they may be identical."
X	else
X		case "$n" in
X		'-n') n='' c='\c';;
X		*) n='-n' c='';;
X		esac
X		cat <<FOO
XThey are not compatible!  You are probably running ksh on a non-USG system.
XI'll have to use $echo instead of the builtin, since Bourne shell doesn't
Xhave echo built in and we may have to run some Bourne shell scripts.  That
Xmeans I'll have to use '$n$c' to suppress newlines now.  Life is ridiculous.
X
XFOO
X		$echo $n "The star should be here-->$c"
X		$echo "*"
X	fi
X	$rm -f foo1 foo2
X	;;
Xesac
X
X: Try to determine whether config.sh was made on this system
Xcase "$config_sh" in
X'')
Xmyuname=`( ($uname -a) 2>/dev/null || hostname) 2>&1`
Xdflt=n
Xif test -f ../config.sh; then
X	oldmyuname=''
X	if $contains myuname= ../config.sh >/dev/null 2>&1; then
X		eval "old`grep myuname= ../config.sh`"
X	fi
X	if test "X$myuname" = "X$oldmyuname"; then
X		dflt=y
X	fi
Xfi
X
X: Get old answers, if there is a config file out there
Xhint=default
Xif test -f ../config.sh; then
X	echo " "
X	rp="I see a config.sh file.  Did Configure make it on THIS system?"
X	. ./myread
X	case "$ans" in
X	n*|N*) echo "OK, I'll ignore it.";;
X	*)  echo "Fetching default answers from your old config.sh file..." >&4
X		tmp="$n"
X		tans="$c"
X		. ../config.sh
X		cp ../config.sh .
X		n="$tmp"
X		c="$tans"
X		hint=previous
X		;;
X	esac
Xfi
X;;
X*)
X	echo " "
X	echo "Fetching default answers from $config_sh..." >&4
X	tmp="$n"
X	tans="$c"
X	cd ..
X	cp $config_sh config.sh 2>/dev/null
X	. ./config.sh
X	cd UU
X	cp ../config.sh .
X	n="$tmp"
X	c="$tans"
X	hint=previous
X	;;
Xesac
X
X: Restore computed paths
Xfor file in $loclist $trylist; do
X	eval $file="\$_$file"
Xdone
X
X: who configured the system
Xcf_time=`$date 2>&1`
Xcf_by=`( (logname) 2>/dev/null || whoami) 2>&1`
X
X: preserve RCS keywords in files with variable substitution, grrr
XHeader='$Header'
XId='$Id'
XLocker='$Locker'
XLog='$Log'
X
X: set the base revision
Xbaserev=3.0
X
X: decide how portable to be
Xcase "$d_portable" in
X"$define") dflt=y;;
X*)	dflt=n;;
Xesac
X$cat <<'EOH'
X 
XI can set things up so that your shell scripts and binaries are more portable,
Xat what may be a noticable cost in performance.  In particular, if you
Xask to be portable, the following happens:
X
X     1) Shell scripts will rely on the PATH variable rather than using
X	the paths derived above.
X     2) ~username interpretations will be done at run time rather than
X	by Configure.
X
XEOH
Xrp="Do you expect to run these scripts and binaries on multiple machines?"
X. ./myread
Xcase "$ans" in
X	y*) d_portable="$define"
X	for file in $loclist; do
X		eval $file=$file
X	done
X	;;
X	*)  d_portable="$undef" ;;
Xesac
X
X: set up shell script to do ~ expansion
Xcat >filexp <<EOSS
X$startsh
X: expand filename
Xcase "\$1" in
X ~/*|~)
X	echo \$1 | $sed "s|~|\${HOME-\$LOGDIR}|"
X	;;
X ~*)
X	if $test -f /bin/csh; then
X		/bin/csh -f -c "glob \$1"
X		failed=$?
X		echo ""
X		exit \$failed
X	else
X		name=\`$expr x\$1 : '..\([^/]*\)'\`
X		dir=\`$sed -n -e "/^\${name}:/{s/^[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:\([^:]*\).*"'\$'"/\1/" -e p -e q -e '}' </etc/passwd\`
X		if $test ! -d "\$dir"; then
X			me=\`basename \$0\`
X			echo "\$me: can't locate home directory for: \$name" >&2
X			exit 1
X		fi
X		case "\$1" in
X		*/*)
X			echo \$dir/\`$expr x\$1 : '..[^/]*/\(.*\)'\`
X			;;
X		*)
X			echo \$dir
X			;;
X		esac
X	fi
X	;;
X*)
X	echo \$1
X	;;
Xesac
XEOSS
Xchmod +x filexp
X$eunicefix filexp
X
X: now set up to get a file name
Xcat <<'EOSC' >getfile
Xtilde=''
Xfullpath=''
Xalready=''
Xskip=''
Xnone_ok=''
Xexp_file=''
Xorig_rp="$rp"
Xorig_dflt="$dflt"
X
Xcase "$fn" in
X*~*) tilde=true;;
Xesac
Xcase "$fn" in
X*/*) fullpath=true;;
Xesac
Xcase "$fn" in
X*+*) skip=true;;
Xesac
Xcase "$fn" in
X*n*) none_ok=true;;
Xesac
Xcase "$fn" in
X*e*) exp_file=true;;
Xesac
X
Xcase "$fn" in
X*f*) type='File';;
X*d*) type='Directory';;
X*l*) type='Locate'; fn=`expr $fn : '.*:\(.*\)'`;;
Xesac
X
Xwhat="$type"
Xcase "$what" in
XLocate) what='File';;
Xesac
X
Xcase "$exp_file" in
X'')
X	case "$d_portable" in
X	"$define") ;;
X	*) exp_file=true;;
X	esac
X	;;
Xesac
X
Xwhile test "$type"; do
X	redo=''
X	rp="$orig_rp"
X	dflt="$orig_dflt"
X	case "$tilde" in
X	true) rp="$rp (~name ok)";;
X	esac
X	. ./myread
X	case "$ans" in
X	none)
X		value=''
X		ansexp=''
X		case "$none_ok" in
X		true) type='';;
X		esac
X		;;
X	*)
X		case "$tilde" in
X		'') value="$ans"
X		    ansexp="$ans";;
X		*)
X			value=`./filexp $ans`
X			case $? in
X			0)
X				if test "$ans" != "$value"; then
X					echo "(That is $value on this particular system.)"
X				fi
X				;;
X			*) value="$ans";;
X			esac
X			ansexp="$value"
X			case "$exp_file" in
X			'') value="$ans";;
X			esac
X			;;
X		esac
X		case "$fullpath" in
X		true)
X			case "$ansexp" in
X			/*) value="$ansexp" ;;
X			*)
X				redo=true
X				case "$already" in
X				true)
X				echo "I shall only accept a full path name, as in /bin/ls." >&4
X				echo "Use a ! shell escape if you wish to check pathnames." >&4
X					;;
X				*)
X				echo "Please give a full path name, starting with slash." >&4
X					case "$tilde" in
X					true)
X				echo "Note that using ~name is ok provided it expands well." >&4
X						already=true
X						;;
X					esac
X				esac
X				;;
X			esac
X			;;
X		esac
X		case "$redo" in
X		'')
X			case "$type" in
X			File)
X				if test -f "$ansexp"; then
X					type=''
X				elif test -r "$ansexp" || (test -h "$ansexp") >/dev/null 2>&1
X				then
X					echo "($value is not a plain file, but that's ok.)"
X					type=''
X				fi
X				;;
X			Directory)
X				if test -d "$ansexp"; then
X					type=''
X				fi
X				;;
X			Locate)
X				if test -d "$value"; then
X					echo "(Looking for $fn in directory $value.)"
X					value="$value/$fn"
X				fi
X				if test -f "$value"; then
X					type=''
X				fi
X				;;
X			esac
X
X			case "$skip" in
X			true) type='';
X			esac
X
X			case "$type" in
X			'') ;;
X			*)
X				if test "$fastread" = yes; then
X					dflt=y
X				else
X					dflt=n
X				fi
X				rp="$what $value doesn't exist.  Use that name anyway?"
X				. ./myread
X				dflt=''
X				case "$ans" in
X				y*) type='';;
X				*) echo " ";;
X				esac
X				;;
X			esac
X			;;
X		esac
X		;;
X	esac
Xdone
Xans="$value"
Xrp="$orig_rp"
Xdflt="$orig_dflt"
XEOSC
X
X: determine default editor
Xecho " "
Xcase "$defeditor" in
X'')
X	case "$_vi" in
X	*/*) dflt="$_vi";;
X	*) dflt=/usr/ucb/vi;;
X	esac
X	;;
X*)  dflt="$defeditor"
X	;;
Xesac
Xfn=f/
Xrp="What is the default editor on your system?"
X. ./getfile
Xdefeditor="$ans"
X
X: is AFS running?
Xecho " "
Xif test -d /afs; then
X	echo "AFS may be running... I'll be extra cautious then..." >&4
X	afs=true
Xelse
X	echo "AFS does not seem to be running..." >&4
X	afs=false
Xfi
X
X: determine where manual pages are on this system
Xecho " "
Xcase "$sysman" in
X'') sysman=`./loc . /usr/man/man1 /usr/man/man1 /usr/man/mann /usr/man/manl /usr/man/local/man1 /usr/man/u_man/man1 /usr/share/man/man1 /usr/catman/u_man/man1 /usr/man/l_man/man1 /usr/local/man/u_man/man1 /usr/local/man/l_man/man1 /usr/man/man.L`
X	;;
Xesac
Xif $test -d "$sysman"; then
X	echo "System manual is in $sysman." >&4
Xelse
X	echo "Could not find manual pages in source form." >&4
Xfi
X
X: determine where manual pages go
X$cat <<EOM
X
X$package has manual pages available in source form.
XEOM
Xcase "$nroff" in
Xnroff)
X	echo "However, you don't have nroff, so they're probably useless to you."
X	case "$mansrc" in
X	'') mansrc="none";;
X	esac;;
Xesac
Xecho "If you don't want the manual sources installed, answer 'none'."
Xcase "$mansrc" in
X'')
X	lookpath='/usr/local/man/man1 /usr/local/man/man1 /usr/man/manl'
X	lookpath="$lookpath /usr/man/local/man1 /usr/man/l_man/man1"
X	lookpath="$lookpath /usr/local/man/u_man/man1 /usr/local/man/l_man/man1"
X	lookpath="$lookpath /usr/man/man.L"
X	mansrc=`./loc . $lookpath`
X	if $test -d "$mansrc"; then
X		dflt="$mansrc"
X	else
X		dflt="$sysman"
X	fi
X	;;
X*)  dflt="$mansrc"
X	;;
Xesac
Xecho " "
Xfn=dn~
Xrp='Where do the manual pages (source) go?'
X. ./getfile
Xmansrc="$ans"
Xmansrcexp="$ansexp"
Xif $afs; then
X	$cat <<EOM
X
XSince you are running AFS, I need to distinguish the directory in which
Xmanual page reside from the directory in which they are installed (and from
Xwhich they are presumably copied to the former directory by occult means).
X
XEOM
X	case "$installmansrc" in
X	'') dflt=`echo $mansrcexp | sed 's#^/afs/#/afs/.#'`;;
X	*) dflt="$installmansrc";;
X	esac
X	fn=de~
X	rp='Where will public executables be installed?'
X	. ./getfile
X	installmansrc="$ans"
Xelse
X	installmansrc="$mansrcexp"
Xfi
X
X
Xcase "$mansrc" in
X'') manext='0';;
X*l) manext=l;;
X*n) manext=n;;
X*o) manext=l;;
X*p) manext=n;;
X*C) manext=C;;
X*L) manext=L;;
X*) manext=1;;
Xesac
X
X: determine where private executables go
Xcase "$privlib" in
X'')
X	dflt=/usr/lib/$package
X	$test -d /usr/local/lib && dflt=/usr/local/lib/$package
X	;;
X*)  dflt="$privlib"
X	;;
Xesac
X$cat <<EOM
X
XThe $package package has some auxiliary files that should be put in a library
Xthat is accessible by everyone.  Where do you want to put these "private" but
Xaccessible files?
X
XEOM
Xfn=d~+
Xrp='Private library path?'
X. ./getfile
Xprivlib="$ans"
Xprivlibexp="$ansexp"
Xif $afs; then
X	$cat <<EOM
X
XSince you are running AFS, I need to distinguish the directory in which
Xprivate file reside from the directory in which they are installed (and from
Xwhich they are presumably copied to the former directory by occult means).
X
XEOM
X	case "$installprivlib" in
X	'') dflt=`echo $privlibexp | sed 's#^/afs/#/afs/.#'`;;
X	*) dflt="$installprivlib";;
X	esac
X	fn=de~
X	rp='Where will private files be installed?'
X	. ./getfile
X	installprivlib="$ans"
Xelse
X	installprivlib="$privlibexp"
Xfi
X
X: determine where public executables go
Xcase "$scriptdir" in
X'')
X	dflt="$bin"
X	: guess some guesses
X	$test -d /usr/share/scripts && dflt=/usr/share/scripts
X	$test -d /usr/share/bin && dflt=/usr/share/bin
X	$test -d /usr/local/script && dflt=/usr/local/script
X	;;
X*)  dflt="$scriptdir"
X	;;
Xesac
X$cat <<EOM
X 
XSome installations have a separate directory just for executable scripts so
Xthat they can mount it across multiple architectures but keep the scripts in
Xone spot.  You might, for example, have a subdirectory of /usr/share for this.
XOr you might just lump your scripts in with all your other executables.
X 
XEOM
Xfn=d~
Xrp='Where do you keep publicly executable scripts?'
X. ./getfile
Xscriptdir="$ans"
Xscriptdirexp="$ansexp"
Xif $afs; then
X	$cat <<EOM
X
XSince you are running AFS, I need to distinguish the directory in which
Xscripts reside from the directory in which they are installed (and from
Xwhich they are presumably copied to the former directory by occult means).
X
XEOM
X	case "$installscript" in
X	'') dflt=`echo $scriptdirexp | sed 's#^/afs/#/afs/.#'`;;
X	*) dflt="$installscript";;
X	esac
X	fn=de~
X	rp='Where will public scripts be installed?'
X	. ./getfile
X	installscript="$ans"
Xelse
X	installscript="$scriptdirexp"
Xfi
X
X: determine the name of a reasonable mailer
Xcase "$mailer" in
X'')
X	if $test -f "$sendmail"; then
X		dflt="$sendmail"
X	elif $test -f "$smail"; then
X		dflt="$smail"
X	elif $test -f "$rmail"; then
X		dflt="$rmail"
X	elif $test -f /bin/mail; then
X		dflt=/bin/mail
X	else
X		dflt=$mail
X	fi
X	;;
X*)  dflt="$mailer";;
Xesac
X$cat <<EOM
X
XI need the full pathname of the program used to deliver mail on your system.
XA typical answer would be /usr/lib/sendmail or /bin/rmail, but you may choose
Xany other program, as long as it can be fed from standard input and will
Xhonour any user-supplied headers.
X
XEOM
Xfn=f
Xrp='Mail transport agent to be used?'
X. ./getfile
Xmailer="$ans"
X
X: make some quick guesses about what we are up against
Xecho " "
X$echo $n "Hmm...  $c"
X$cat /usr/include/signal.h /usr/include/sys/signal.h >foo 2>/dev/null
Xif test `echo abc | tr a-z A-Z` = Abc ; then
X	xxx=`./loc addbib blurfl $pth`
X	if $test -f $xxx; then
X	echo "Looks kind of like a USG system with BSD features, but we'll see..."
X		echo exit 0 >bsd
X		echo exit 0 >usg
X		echo exit 1 >v7
X	else
X		if $contains SIGTSTP foo >/dev/null 2>&1 ; then
X			echo "Looks kind of like an extended USG system, but we'll see..."
X		else
X			echo "Looks kind of like a USG system, but we'll see..."
X		fi
X		echo exit 1 >bsd
X		echo exit 0 >usg
X		echo exit 1 >v7
X	fi
X	d_bsd="$undef"
Xelif $contains SIGTSTP foo >/dev/null 2>&1 ; then
X	echo "Looks kind of like a BSD system, but we'll see..."
X	d_bsd="$define"
X	echo exit 0 >bsd
X	echo exit 1 >usg
X	echo exit 1 >v7
Xelse
X	echo "Looks kind of like a Version 7 system, but we'll see..."
X	d_bsd="$undef"
X	echo exit 1 >bsd
X	echo exit 1 >usg
X	echo exit 0 >v7
Xfi
Xcase "$eunicefix" in
X*unixtovms*)
X	$cat <<'EOI'
XThere is, however, a strange, musty smell in the air that reminds me of
Xsomething...hmm...yes...I've got it...there's a VMS nearby, or I'm a Blit.
XEOI
X	echo "exit 0" >eunice
X	d_eunice="$define"
X: it so happens the Eunice I know will not run shell scripts in Unix format
X	;;
X*)
X	echo " "
X	echo "Congratulations.  You aren't running Eunice."
X	d_eunice="$undef"
X	echo "exit 1" >eunice
X	;;
Xesac
Xif test -f /xenix; then
X	echo "Actually, this looks more like a XENIX system..."
X	echo "exit 0" >xenix
X	d_xenix="$define"
Xelse
X	echo " "
X	echo "It's not Xenix..."
X	echo "exit 1" >xenix
X	d_xenix="$undef"
Xfi
Xchmod +x xenix
X$eunicefix xenix
Xif test -f /venix; then
X	echo "Actually, this looks more like a VENIX system..."
X	echo "exit 0" >venix
Xelse
X	echo " "
X	if xenix; then
X		: null
X	else
X		echo "Nor is it Venix..."
X	fi
X	echo "exit 1" >venix
Xfi
Xchmod +x bsd usg v7 eunice venix
X$eunicefix bsd usg v7 eunice venix
X$rm -f foo
X
X: see if we have to deal with yellow pages, now NIS.
Xif $test -d /usr/etc/yp || $test -d /etc/yp; then
X	if $test -f /usr/etc/nibindd; then
X		echo " "
X		echo "I'm fairly confident you're on a NeXT."
X		echo " "
X		rp='Do you get the hosts file via NetInfo?'
X		dflt=y
X		case "$hostcat" in
X		nidump*) ;;
X		'') ;;
X		*) dflt=n;;
X		esac
X		. ./myread
X		case "$ans" in
X		y*) hostcat='nidump hosts .';;
X		*) hostcat='cat /etc/hosts';;
X		esac
X	fi
X	case "$hostcat" in
X	nidump*) ;;
X	*)
X		case "$hostcat" in
X		*ypcat*) dflt=y;;
X		'') if $contains '^\+' /etc/passwd >/dev/null 2>&1; then
X				dflt=y
X			else
X				dflt=n
X			fi;;
X		*) dflt=n;;
X		esac
X		echo " "
X		rp='Are you getting the hosts file via yellow pages?'
X		. ./myread
X		case "$ans" in
X		y*) hostcat='ypcat hosts';;
X		*) hostcat='cat /etc/hosts';;
X		esac
X		;;
X	esac
Xfi
X
X: now get the host name
Xecho " "
Xecho "Figuring out host name..." >&4
Xcase "$myhostname" in
X'') cont=true
X	echo 'Maybe "hostname" will work...'
X	if tans=`sh -c hostname 2>&1` ; then
X		myhostname=$tans
X		phostname=hostname
X		cont=''
X	fi
X	;;
X*) cont='';;
Xesac
Xif $test "$cont"; then
X	if xenix; then
X		echo 'Oh, dear.  Maybe "/etc/systemid" is the key...'
X		if tans=`cat /etc/systemid 2>&1` ; then
X			myhostname=$tans
X			phostname='cat /etc/systemid'
X			echo "Whadyaknow.  Xenix always was a bit strange..."
X			cont=''
X		fi
X	elif $test -r /etc/systemid; then
X		echo "(What is a non-Xenix system doing with /etc/systemid?)"
X	fi
Xfi
Xif $test "$cont"; then
X	echo 'No, maybe "uuname -l" will work...'
X	if tans=`sh -c 'uuname -l' 2>&1` ; then
X		myhostname=$tans
X		phostname='uuname -l'
X	else
X		echo 'Strange.  Maybe "uname -n" will work...'
X		if tans=`sh -c 'uname -n' 2>&1` ; then
X			myhostname=$tans
X			phostname='uname -n'
X		else
X			echo 'Oh well, maybe I can mine it out of whoami.h...'
X			if tans=`sh -c $contains' sysname $usrinc/whoami.h' 2>&1` ; then
X				myhostname=`echo "$tans" | $sed 's/^.*"\(.*\)"/\1/'`
X				phostname="sed -n -e '"'/sysname/s/^.*\"\\(.*\\)\"/\1/{'"' -e p -e q -e '}' <$usrinc/whoami.h"
X			else
X				case "$myhostname" in
X				'') echo "Does this machine have an identity crisis or something?"
X					phostname='';;
X				*)
X					echo "Well, you said $myhostname before..."
X					phostname='echo $myhostname';;
X				esac
X			fi
X		fi
X	fi
Xfi
X: you do not want to know about this
Xset $myhostname
Xmyhostname=$1
X
X: translate upper to lower if necessary
Xcase "$myhostname" in
X*[A-Z]*)
X	myhostname=`echo $myhostname | tr '[A-Z]' '[a-z]'`
X	echo "(Normalizing case in your host name)"
X	;;
Xesac
X
X: verify guess
Xif $test "$myhostname" ; then
X	dflt=y
X	rp='Your host name appears to be "'$myhostname'".'" Right?"
X	. ./myread
X	case "$ans" in
X	y*) ;;
X	*) myhostname='';;
X	esac
Xfi
X
X: bad guess or no guess
Xwhile $test "X$myhostname" = X ; do
X	dflt=''
X	rp="Please type the (one word) name of your host:"
X	. ./myread
X	myhostname="$ans"
Xdone
X
Xcase "$myhostname" in
X*.*)
X	dflt=`expr "X$myhostname" : "X[^.]*\(\..*\)"`
X	myhostname=`expr "X$myhostname" : "X\([^.]*\)\."`
X	echo "(Trimming domain name from host name--host name is now $myhostname)"
X	;;
X*) case "$mydomain" in
X	'')
X		$hostcat >hosts
X		dflt=.`$awk "/[0-9].*$myhostname/ {for(i=2; i<=NF;i++) print \\\$i}" \
X			hosts | $sort | $uniq | \
X			$sed -n -e "s/$myhostname\.\([a-zA-Z_.]\)/\1/p"`
X		case "$dflt" in
X		.) echo "(You do not have fully-qualified names in /etc/hosts)"
X			dflt='.uucp';;
X		esac
X		$rm -f hosts
X		;;
X	*) dflt="$mydomain";;
X	esac;;
Xesac
Xecho " "
Xrp="What is your domain name?"
X. ./myread
Xtans="$ans"
Xcase "$ans" in
X'') ;;
X.*) ;;
X*) tans=".$tans";;
Xesac
Xmydomain="$tans"
X
X: a little sanity check here
Xcase "$phostname" in
X'') ;;
X*)
X	case `$phostname` in
X	$myhostname$mydomain|$myhostname) ;;
X	*)
X		case "$phostname" in
X		sed*)
X			echo "(That doesn't agree with your whoami.h file, by the way.)"
X			;;
X		*)
X			echo "(That doesn't agree with your $phostname command, by the way.)"
X			;;
X		esac
X	;;
X	esac
X	;;
Xesac
X
X: find out how to find out full name
Xcase "$d_berknames" in
X"$define")
X	dflt=y;;
X"$undef")
X	dflt=n;;
X*)
X	if bsd; then
X		dflt=y
X	elif xenix; then
X		dflt=y
X	else
X		dflt=n
X	fi
X	;;
Xesac
X$cat <<'EOM'
X
XDoes your /etc/passwd file keep full names in Berkeley/V7 format (name first
Xthing after ':' in GCOS field)?  In that case, a typical entry in the password
Xfile looks like this:
X
X    guest:**paswword**:10:100:Mister Guest User:/usr/users:/bin/sh
X                              ^^^^^^^^^^^^^^^^^
XEOM
Xrp="Berkeley/V7 format for full name?"
X. ./myread
Xcase "$ans" in
Xy*) d_passnames="$define"
X	d_berknames="$define"
X	d_usgnames="$undef"
X	nametype=bsd
X	;;
X*)
X	case "$d_usgnames" in
X	"$define") dflt=y;;
X	"$undef") dflt=n;;
X	*)
X		if usg; then
X			dflt=y
X		else
X			dflt=n
X		fi
X		;;
X	esac
X$cat <<'EOM'
X
XDoes your passwd file keep full names in USG format (name sandwiched between a
X'-' and a '(')?  In that case, a typical entry in the password file looks like
Xthis:
X
X    guest:**paswword**:10:100:000-Mister Guest User(000):/usr/users:/bin/sh
X                                  ^^^^^^^^^^^^^^^^^
XEOM
X	rp="USG format for full name?"
X	. ./myread
X	case "$ans" in
X	n*) echo "Full name will be taken from ~/.fullname"
X		d_passnames="$undef"
X		d_berknames="$undef"
X		d_usgnames="$undef"
X		nametype=other
X		;;
X	*)
X		d_passnames="$define"
X		d_berknames="$undef"
X		d_usgnames="$define"
X		nametype=usg
X		;;
X	esac;;
Xesac
X
X: get organization name
Xlongshots='/usr/src/new /usr/src/local /usr/local/src'
Xcase "$orgname" in
X'') if xxx=`./loc news/src/defs.h x $longshots`; then
X		dflt=`$sed -n 's/^.*MYORG[ 	]*"\(.*\)".*$/\1/p' $xxx`
X	else
X		dflt=''
X	fi
X	;;
X*)  dflt="$orgname";;
Xesac
X$cat << 'EOH'
X 
XPlease type the name of your organization as you want it to appear on the
XOrganization line of outgoing articles.  (It's nice if this also specifies
Xyour location.  Your city name is probably sufficient if well known.)
XFor example:
X
X    University of Southern North Dakota, Hoople
X
XYou may also put the name of a file, as long as it begins with a slash.
XFor example:
X
X    /etc/organization
X
XEOH
Xorgname=""
Xwhile test "X$orgname" = "X"; do
X	rp='Organization:'
X	. ./myread
X	orgname="$ans"
Xdone
X
X: locate the preferred pager for this system
Xcase "$pager" in
X'')
X	case "$pg" in
X	/*) dflt=$pg;;
X	esac
X	case "$more" in
X	/*) dflt=$more;;
X	esac
X	case "$less" in
X	/*) dflt=$less;;
X	esac
X	case "$dflt" in
X	'') dflt=/usr/ucb/more;;
X	esac
X	;;
X*) dflt="$pager";;
Xesac
Xecho " "
Xfn=f/
Xrp='What pager is used on your system?'
X. ./getfile
Xpager="$ans"
X
X: get the patchlevel
Xecho " "
Xecho "Getting the current patchlevel..." >&4
Xif $test -r ../patchlevel.h;then
X	patchlevel=`awk '/PATCHLEVEL/ {print $3}' < ../patchlevel.h`
Xelse
X	patchlevel=0
Xfi
Xecho "(You have $package $baserev PL$patchlevel.)"
X
X: determine perl absolute location
Xcase "$perlpath" in
X'')
X	if test -f /usr/bin/perl; then
X		dflt=/usr/bin/perl
X	else
X		case "$_perl" in
X		*/*) dflt="$_perl";;
X		*) dflt=/usr/bin/perl;;
X		esac
X	fi
X	;;
X*)  dflt="$perlpath"
X	;;
Xesac
Xecho " "
Xfn=f~/
Xrp="Where is perl located on your system?"
X. ./getfile
Xperlpath="$ans"
X
X: figure out how to guarantee perl startup
Xcase "$sharpbang" in
X*!)
X	$cat <<EOH
X
XI can use the #! construct to start perl on your system. This will make
Xstartup of perl scripts faster, but may cause problems if you want to share
Xthose scripts and perl is not in a standard place (/usr/bin/perl) on all your
Xplatforms. The alternative is to force a shell by starting the script with a
Xsingle ':' character.
X
XEOH
X	dflt=n
X	case "$startperl" in
X	*!*) dflt=y;;
X	'') case "$d_portable" in
X		"$define") ;;
X		*) dflt=y;;
X		esac;;
X	esac
X	rp='Shall I use #! to start up perl?'
X	. ./myread
X	case "$ans" in
X	y*|Y*) startperl="#!$perlpath";;
X	*) startperl=": # use perl";;
X	esac;;
X*) startperl=": # use perl";;
Xesac
X
X: notify author that his package is used
Xcase "$mailpatches$notifypatches" in
X'') dflt=y;;
X*) dflt=n;;
Xesac
Xneedmail=true
Xif $test -f ../.config/mailauthor &&
X	cmp ../patchlevel.h ../.config/mailauthor >/dev/null 2>&1
Xthen
X	needmail=false
Xfi
Xif $needmail; then
X	$cat <<EOM
X
XIf you are able to send mail to the Internet, the author of $package would
Xreally appreciate you letting me send off a quick note, just to say that you've
Xtried it. The author is more likely to spend time maintaining $package if it's
Xknown that many people are using it, and you can even ask to get sent new
Xpatches automagically this way if you wish. To protect your privacy, all I'll
Xsay in the mail is the version of $package that you're using.
X
XEOM
X	rp='Should I send mail to ram@acri.fr?'
X	. ./myread
X	case "$ans" in
X	[yY]*)
X		echo " "
X		echo "Great!. You cooperation is really appreciated."
X		echo " "
X		opt=''
X		rp='Would you like to have new patches automatically mailed to you?'
X		case "$mailpatches" in
X		true) dflt=y;;
X		*) dflt=n;;
X		esac
X		. ./myread
X		case "$ans" in
X		[yY]*) opt=' mailpatches'; mailpatches=true;;
X		*)
X			mailpatches=false
X			rp='Ok, would you like to simply be notified of new patches?'
X			case "$notifypatches" in
X			false) dflt=n;;
X			*) dflt=y;;
X			esac
X			. ./myread
X			echo " "
X			case "$ans" in
X			[yY]*) opt=' notifypatches'; notifypatches=true;;
X			*)
X				echo "Fine, you will only be registered as a user then."
X				notifypatches=false
X				;;
X			esac
X			;;
X		esac
X		echo "Sending mail to ram@acri.fr..." >&4
X		atsh='@SH'
X		$mailer ram@acri.fr <<EOM >/dev/null 2>&1
XSubject: Command
XPrecedence: junk
XTo: ram@acri.fr
X
X$atsh package - $package $baserev $patchlevel$opt
XEOM
X		$rm -f ../.config/mailauthor
X		cp ../patchlevel.h ../.config/mailauthor
X		;;
X	*) echo "Oh well, maybe next time.";;
X	esac
Xfi
X
X: end of configuration questions
Xecho " "
Xecho "End of configuration questions."
Xecho " "
X
X: back to where it started
Xif test -d ../UU; then
X	cd ..
Xfi
X
X: configuration may be patched via a 'config.over' file
Xif $test -f config.over; then
X	echo " "
X	dflt=y
X	rp='I see a config.over file.  Do you wish to load it?'
X	. UU/myread
X	case "$ans" in
X	n*) echo "OK, I'll ignore it.";;
X	*)	. ./config.over
X		echo "Configuration override changes have been loaded."
X		;;
X	esac
Xfi
X
X: create config.sh file
Xecho " "
Xecho "Creating config.sh..." >&4
X$spitshell <<EOT >config.sh
X$startsh
X#
X# This file was produced by running the Configure script. It holds all the
X# definitions figured out by Configure. Should you modify one of these values,
X# do not forget to propagate your changes by running "Configure -der". You may
X# instead choose to run each of the .SH files by yourself, or "Configure -S".
X#
X
X# Configuration time: $cf_time
X# Configured by: $cf_by
X# Target system: $myuname
X
Xd_bsd='$d_bsd'
Xd_eunice='$d_eunice'
Xd_xenix='$d_xenix'
Xeunicefix='$eunicefix'
XMcc='$Mcc'
Xawk='$awk'
Xbash='$bash'
Xbison='$bison'
Xcat='$cat'
Xchgrp='$chgrp'
Xchmod='$chmod'
Xchown='$chown'
Xcompress='$compress'
Xcp='$cp'
Xcpio='$cpio'
Xcpp='$cpp'
Xcsh='$csh'
Xdate='$date'
Xecho='$echo'
Xegrep='$egrep'
Xemacs='$emacs'
Xexpr='$expr'
Xflex='$flex'
Xgcc='$gcc'
Xgrep='$grep'
Xinews='$inews'
Xksh='$ksh'
Xless='$less'
Xline='$line'
Xlint='$lint'
Xln='$ln'
Xlp='$lp'
Xlpr='$lpr'
Xls='$ls'
Xmail='$mail'
Xmailx='$mailx'
Xmake='$make'
Xmkdir='$mkdir'
Xmore='$more'
Xmv='$mv'
Xnroff='$nroff'
Xperl='$perl'
Xpg='$pg'
Xpmake='$pmake'
Xpr='$pr'
Xrm='$rm'
Xrmail='$rmail'
Xsed='$sed'
Xsendmail='$sendmail'
Xsh='$sh'
Xshar='$shar'
Xsleep='$sleep'
Xsmail='$smail'
Xsort='$sort'
Xsubmit='$submit'
Xtail='$tail'
Xtar='$tar'
Xtbl='$tbl'
Xtest='$test'
Xtouch='$touch'
Xtr='$tr'
Xtroff='$troff'
Xuname='$uname'
Xuniq='$uniq'
Xuuname='$uuname'
Xvi='$vi'
Xzcat='$zcat'
Xmailpatches='$mailpatches'
Xnotifypatches='$notifypatches'
Xhint='$hint'
Xmyuname='$myuname'
XAuthor='$Author'
XDate='$Date'
XHeader='$Header'
XId='$Id'
XLocker='$Locker'
XLog='$Log'
XRCSfile='$RCSfile'
XRevision='$Revision'
XSource='$Source'
XState='$State'
Xafs='$afs'
Xbaserev='$baserev'
Xcf_by='$cf_by'
Xcf_time='$cf_time'
Xcontains='$contains'
Xd_portable='$d_portable'
Xdefeditor='$defeditor'
Xmailer='$mailer'
Xinstallmansrc='$installmansrc'
Xmanext='$manext'
Xmansrc='$mansrc'
Xmansrcexp='$mansrcexp'
Xmydomain='$mydomain'
Xmyhostname='$myhostname'
Xphostname='$phostname'
Xc='$c'
Xn='$n'
Xd_berknames='$d_berknames'
Xd_passnames='$d_passnames'
Xd_usgnames='$d_usgnames'
Xnametype='$nametype'
Xgroupcat='$groupcat'
Xhostcat='$hostcat'
Xpasscat='$passcat'
Xorgname='$orgname'
Xpackage='$package'
Xpager='$pager'
Xpatchlevel='$patchlevel'
Xperlpath='$perlpath'
Xinstallprivlib='$installprivlib'
Xprivlib='$privlib'
Xprivlibexp='$privlibexp'
Xinstallscript='$installscript'
Xscriptdir='$scriptdir'
Xscriptdirexp='$scriptdirexp'
Xsharpbang='$sharpbang'
Xshsharp='$shsharp'
Xspitshell='$spitshell'
Xstartperl='$startperl'
Xstartsh='$startsh'
Xsysman='$sysman'
XEOT
X
X: add special variables
X$test -f patchlevel.h && \
Xawk '/^#define/ {printf "%s=%s\n",$2,$3}' patchlevel.h >>config.sh
Xecho "CONFIG=true" >>config.sh
X
X: propagate old symbols
Xif $test -f UU/config.sh; then
X	<UU/config.sh sort | uniq >UU/oldconfig.sh
X	sed -n 's/^\([a-zA-Z_0-9]*\)=.*/\1/p' config.sh config.sh UU/oldconfig.sh |\
X	sort | uniq -u >UU/oldsyms
X	set X `cat UU/oldsyms`
X	shift
X	case $# in
X	0) ;;
X	*)
X		cat <<EOM
XHmm...You had some extra variables I don't know about...I'll try to keep 'em...
XEOM
X		echo "# Variables propagated from previous config.sh file." >>config.sh
X		for sym in `cat UU/oldsyms`; do
X			echo "    Propagating $hint variable "'$'"$sym..."
X			eval 'tmp="$'"${sym}"'"'
X			echo "$tmp" | \
X				sed -e "s/'/'\"'\"'/g" -e "s/^/$sym='/" -e "s/$/'/" >>config.sh
X		done
X		;;
X	esac
Xfi
X
X: Finish up by extracting the .SH files
Xcase "$alldone" in
Xexit)
X	$rm -rf UU
X	echo "Done."
X	exit 0
X	;;
Xcont)
X	;;
X'')
X	echo " "
X	dflt=''
Xecho "If you didn't make any mistakes, then just type a carriage return here."
X	rp="If you need to edit config.sh, do it as a shell escape here:"
X	. UU/myread
X	case "$ans" in
X	'') ;;
X	*) : in case they cannot read
X		eval $ans;;
X	esac
X	;;
Xesac
X
X: if this fails, just run all the .SH files by hand
X. ./config.sh
X
Xecho " "
Xexec 1>&4
X. ./UU/extract
X
Xif $contains '^depend:' [Mm]akefile >/dev/null 2>&1; then
X	dflt=y
X	case "$silent" in
X	true) ;;
X	*)
X		$cat <<EOM
X
XNow you need to generate make dependencies by running "make depend".
XYou might prefer to run it in background: "make depend > makedepend.out &"
XIt can take a while, so you might not want to run it right now.
X
XEOM
X		;;
X	esac
X	rp="Run make depend now?"
X	. UU/myread
X	case "$ans" in
X	y*)
X		make depend && echo "Now you must run a make."
X		;;
X	*)
X		echo "You must run 'make depend' then 'make'."
X		;;
X	esac
Xelif test -f [Mm]akefile; then
X	echo " "
X	echo "Now you must run a make."
Xelse
X	echo "Done."
Xfi
X
X$rm -f kit*isdone ark*isdone
X$rm -rf UU
X: End of Configure
END_OF_FILE
  if test 45156 -ne `wc -c <'Configure'`; then
    echo shar: \"'Configure'\" unpacked with wrong size!
  fi
  chmod +x 'Configure'
  # end of 'Configure'
fi
if test -f 'mcon/Makefile.SH' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/Makefile.SH'\"
else
  echo shar: Extracting \"'mcon/Makefile.SH'\" \(6602 characters\)
  sed "s/^X//" >'mcon/Makefile.SH' <<'END_OF_FILE'
X: Makefile.SH generated from Jmake.tmpl and Jmakefile [jmake 3.0 PL0]
X: $X-Id: Jmake.tmpl,v 2.8.1.2 91/11/18 13:22:54 ram Exp $
X
Xcase $CONFIG in
X'')
X	if test -f config.sh; then TOP=.;
X	elif test -f ../config.sh; then TOP=..;
X	elif test -f ../../config.sh; then TOP=../..;
X	elif test -f ../../../config.sh; then TOP=../../..;
X	elif test -f ../../../../config.sh; then TOP=../../../..;
X	else
X		(echo "Can't find config.sh."; exit 1)
X	fi
X	. $TOP/config.sh
X	;;
Xesac
Xcase "$0" in
X*/*) cd `expr X$0 : 'X\(.*\)/'` ;;
Xesac
XCURRENT=mcon
XDIR=`echo $CURRENT/ | sed -e 's/\.\///g'`
Xecho "Extracting ${DIR}Makefile (with variable substitutions)"
XDATE=`date`
X$spitshell >Makefile <<!GROK!THIS!
X########################################################################
X# Makefile generated from Makefile.SH on $DATE
X
XSHELL = /bin/sh
XJMAKE = jmake
XTOP = ..
XCURRENT = $CURRENT
XDIR = $DIR
XINSTALL = ../install
X
X########################################################################
X# Parameters set by Configure -- edit config.sh if changes are needed
X
XCTAGS = ctags
XMAKE = make
XMV = $mv
XPRIVLIB = $installprivlib
XRM = $rm -f
XSCRIPTDIR = $installscript
X
X########################################################################
X# Automatically generated parameters -- do not edit
X
XSUBDIRS = man
X
X!GROK!THIS!
X$spitshell >>Makefile <<'!NO!SUBS!'
X########################################################################
X# Jmake rules for building libraries, programs, scripts, and data files
X# $X-Id: Jmake.rules,v 2.8.1.4 91/11/18 13:19:07 ram Exp $
X
X########################################################################
X# Start of Jmakefile
X
X# $X-Id: Jmakefile,v 2.8 91/07/08 13:28:49 ram Exp $
X#
X#  Copyright (c) 1991-1993, Raphael Manfredi
X#  
X#  You may redistribute only under the terms of the Artistic Licence,
X#  as specified in the README file that comes with the distribution.
X#  You may reuse parts of this distribution only within the terms of
X#  that same Artistic Licence; a copy of which may be found at the root
X#  of the source tree for dist 3.0.
X#
X# $X-Log:	Jmakefile,v $
X# Revision 2.8  91/07/08  13:28:49  ram
X# 3.0 alpha baseline.
X#
X
Xall:: Glossary
X
Xlocal_realclean::
X	$(RM) Glossary
X
XGlossary: makegloss
X	chmod +x makegloss
X	./makegloss
X
Xall:: makegloss
X
Xlocal_realclean::
X	$(RM) makegloss
X
Xmakegloss: makegloss.SH
X	/bin/sh makegloss.SH
X
X
Xinstall::
X	@for dir in $(PRIVLIB) $(PRIVLIB)/U; do \
X		case '${MFLAGS}' in *[i]*) set +e;; esac; \
X		(set -x; $(INSTALL) -d $$dir); \
X	done
X
Xdeinstall::
X	$(RM) -r $(PRIVLIB) $(PRIVLIB)/U
X
Xinstall:: Glossary
X	$(INSTALL) -c -m 444 Glossary $(PRIVLIB)
X
Xdeinstall::
X	$(RM) $(PRIVLIB)/Glossary
X
Xinstall:: makegloss
X	$(INSTALL) -c -m 555  makegloss $(PRIVLIB)
X
Xdeinstall::
X	$(RM) $(PRIVLIB)/makegloss
X
Xinstall:: U/*.U
X	@case '${MFLAGS}' in *[i]*) set +e;; esac; \
X	for i in U/*.U; do \
X		(set -x; $(INSTALL) -c -m 444 $$i $(PRIVLIB)/U); \
X	done
X
Xdeinstall::
X	@case '${MFLAGS}' in *[i]*) set +e;; esac; \
X	for i in U/*.U; do \
X		(set -x; $(RM) $(PRIVLIB)/U/$$i); \
X	done
X
Xall:: metaconfig mconfig
X
Xlocal_realclean::
X	$(RM) metaconfig mconfig
Xmetaconfig: mconfig
X	$(TOP)/bin/perload -o mconfig > $@
X	chmod +rx $@
X
Xinstall:: metaconfig
X	$(INSTALL) -c -m 555  metaconfig $(SCRIPTDIR)
X
Xdeinstall::
X	$(RM) $(SCRIPTDIR)/metaconfig
X
Xall:: metalint mlint
X
Xlocal_realclean::
X	$(RM) metalint mlint
Xmetalint: mlint
X	$(TOP)/bin/perload -o mlint > $@
X	chmod +rx $@
X
Xinstall:: metalint
X	$(INSTALL) -c -m 555  metalint $(SCRIPTDIR)
X
Xdeinstall::
X	$(RM) $(SCRIPTDIR)/metalint
X
Xall:: metaxref mxref
X
Xlocal_realclean::
X	$(RM) metaxref mxref
Xmetaxref: mxref
X	$(TOP)/bin/perload -o mxref > $@
X	chmod +rx $@
X
Xinstall:: metaxref
X	$(INSTALL) -c -m 555  metaxref $(SCRIPTDIR)
X
Xdeinstall::
X	$(RM) $(SCRIPTDIR)/metaxref
X
X########################################################################
X# Common rules for all Makefiles -- do not edit
X
Xemptyrule::
X
Xclean: sub_clean local_clean
Xrealclean: sub_realclean local_realclean
Xclobber: sub_clobber local_clobber
X
Xlocal_clean::
X	$(RM) core *~ *.o
X
Xlocal_realclean:: local_clean
X
Xlocal_clobber:: local_realclean
X	$(RM) Makefile config.sh
X
XMakefile.SH: Jmakefile
X	-@if test -f $(TOP)/.package; then \
X		if test -f Makefile.SH; then \
X			echo "	$(RM) Makefile.SH~; $(MV) Makefile.SH Makefile.SH~"; \
X			$(RM) Makefile.SH~; $(MV) Makefile.SH Makefile.SH~; \
X		fi; \
X		echo "	$(JMAKE) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT)" ; \
X		$(JMAKE) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT) ; \
X	else touch $@; exit 0; fi
X
XMakefile: Makefile.SH
X	/bin/sh Makefile.SH
X
Xtags::
X	$(CTAGS) -w *.[ch]
X	$(CTAGS) -xw *.[ch] > tags
X
Xlocal_clobber::
X	$(RM) tags
X
X########################################################################
X# Rules for building in sub-directories -- do not edit
X
Xsubdirs:
X	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
X	for i in $(SUBDIRS) ;\
X	do \
X		(cd $$i ; echo $(VERB) "in $(DIR)$$i..."; \
X			$(MAKE) $(MFLAGS) $(FLAGS) $(TARGET)); \
X	done
X
Xinstall::
X	@$(MAKE) subdirs TARGET=install VERB="Installing" FLAGS=
X
Xdeinstall::
X	@$(MAKE) subdirs TARGET=deinstall VERB="Deinstalling" FLAGS=
X
Xinstall.man::
X	@$(MAKE) subdirs TARGET=install.man VERB="Installing man pages" FLAGS=
X
Xdeinstall.man::
X	@$(MAKE) subdirs TARGET=deinstall.man VERB="Deinstalling man pages" FLAGS=
X
Xsub_clean::
X	@$(MAKE) subdirs TARGET=clean VERB="Cleaning" FLAGS=
X	@echo "Back to $(CURRENT) for "clean...
X
Xsub_realclean::
X	@$(MAKE) subdirs TARGET=realclean VERB="Real cleaning" FLAGS=
X	@echo "Back to $(CURRENT) for "realclean...
X
Xsub_clobber::
X	@$(MAKE) subdirs TARGET=clobber VERB="Clobbering" FLAGS=
X	@echo "Back to $(CURRENT) for "clobber...
X
Xtag::
X	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
X	for i in $(SUBDIRS) ;\
X	do \
X		(cd $$i ; echo "Tagging" "in $(DIR)$$i..."; \
X			$(MAKE) $(MFLAGS)  tag); \
X	done
X
XMakefiles::
X	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
X	for i in $(SUBDIRS);\
X	do \
X		echo "Making "Makefiles" in $(DIR)$$i..."; \
X		(cd $$i || exit 1; \
X		if test ! -f Makefile; then /bin/sh Makefile.SH; fi; \
X		$(MAKE) $(MFLAGS) Makefiles) \
X	done
X
XMakefiles.SH:: Makefile.SH
X	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
X	for i in $(SUBDIRS);\
X	do \
X		case "$(DIR)$$i/" in \
X		*/*/*/*/) newtop=../../../..;; \
X		*/*/*/) newtop=../../..;; \
X		*/*/) newtop=../..;; \
X		*/) newtop=..;; \
X		esac; \
X		case "$(TOP)" in \
X		/*) newtop="$(TOP)" ;; \
X		esac; \
X		echo "Making Makefiles.SH in $(DIR)$$i..."; \
X		(cd $$i || exit 1; $(MAKE) $(MFLAGS) -f ../Makefile \
X		Makefile TOP=$$newtop CURRENT=$(DIR)$$i;\
X		$(MAKE) $(MFLAGS) Makefiles.SH) \
X	done
X
Xall::
X	@$(MAKE) subdirs TARGET=all VERB="Making all" FLAGS=
X
X!NO!SUBS!
Xchmod 644 Makefile
X$eunicefix Makefile
X
END_OF_FILE
  if test 6602 -ne `wc -c <'mcon/Makefile.SH'`; then
    echo shar: \"'mcon/Makefile.SH'\" unpacked with wrong size!
  fi
  # end of 'mcon/Makefile.SH'
fi
if test -f 'patchlevel.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'patchlevel.h'\"
else
  echo shar: Extracting \"'patchlevel.h'\" \(71 characters\)
  sed "s/^X//" >'patchlevel.h' <<'END_OF_FILE'
X/* dist-3.0 - 18 Aug 1993 */
X
X#define VERSION 3.0
X#define PATCHLEVEL 0
END_OF_FILE
  if test 71 -ne `wc -c <'patchlevel.h'`; then
    echo shar: \"'patchlevel.h'\" unpacked with wrong size!
  fi
  # end of 'patchlevel.h'
fi
echo shar: End of archive 4 \(of 28\).
cp /dev/null ark4isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 28 archives.
    echo "Please run PACKNOTES through sh, read REAMDE and then type Configure."
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0

exit 0 # Just in case...
