Newsgroups: comp.sources.misc
From: Raphael Manfredi <ram@acri.fr>
Subject: v39i005:  dist-3.0 - Configure script generator and related tools, Part01/28
Message-ID: <csm-v39i005=dist-3.0.133435@sparky.Sterling.COM>
X-Md4-Signature: c6976a4fb41aa7b3343c17b91b5af019
Sender: kent@sparky.sterling.com (Kent Landfield)
Organization: Advanced Computer Research Institute, Lyon, France.
Date: Wed, 18 Aug 1993 18:35:46 GMT
Approved: kent@sparky.sterling.com

Submitted-by: Raphael Manfredi <ram@acri.fr>
Posting-number: Volume 39, Issue 5
Archive-name: dist-3.0/part01
Environment: UNIX, Perl, RCS

This package consists in a set of tools:

	- A Configure script generator (metaconfig)
	- A Makefile.SH generator (jmake)
	- Patching tools (pat)
	- Kit making tools and miscellaneous stuff.

It is an (hopefully) improved version of the original dist 2.0 package
released by Larry Wall on comp.sources.unix in 1988.

The two main programs metaconfig and jmake will help you write portable
programs and Makefiles, making the installation of your own software easy.
The patching tools will assist you while you maintain your package, producing
standard-looking patches. The remaining tools help you administrate your
software package.
-----
#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# Contents:  PACKNOTES README PACKLIST bin/ bin/manilist.SH jmake/
#   jmake/files/ kit/ lib/ mcon/ mcon/U/ mcon/files/ mcon/files/README
#   mcon/man/ mcon/pl/ pat/ pl/
# Wrapped by ram@soft208 on Wed Aug 18 14:42:18 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 1 (of 28)."'
if test -f 'PACKNOTES' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'PACKNOTES'\"
else
  echo shar: Extracting \"'PACKNOTES'\" \(148 characters\)
  sed "s/^X//" >'PACKNOTES' <<'END_OF_FILE'
X
X# mcon/man/mconfig.SH" was split into 2 parts; to create it, do
X	cat mcon/man/mconfig.SH.0[1-9] >mcon/man/mconfig.SH
X	chmod +x mcon/man/mconfig.SH
END_OF_FILE
  if test 148 -ne `wc -c <'PACKNOTES'`; then
    echo shar: \"'PACKNOTES'\" unpacked with wrong size!
  fi
  # end of 'PACKNOTES'
fi
if test -f 'README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'README'\"
else
  echo shar: Extracting \"'README'\" \(5375 characters\)
  sed "s/^X//" >'README' <<'END_OF_FILE'
X                             dist 3.0
X
X                   Copyright (c) 1988, Larry Wall
X                Copyright (c) 1990-1992, Harlan Stenn
X              Copyright (c) 1991-1993, Raphael Manfredi
X
X------------------------------------------------------------------------
X    This program is free software; you can redistribute it and/or modify
X    it under the terms of the Artistic Licence, a copy of which can be
X    found with this package.
X
X    This program is distributed in the hope that it will be useful,
X    but WITHOUT ANY WARRANTY; without even the implied warranty of
X    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X    Artistic License for more details.
X------------------------------------------------------------------------
X
XThis version of dist requires you to have at least perl 4.0.
X
XPlease read all the directions below before you proceed any further, and
Xthen follow them carefully.
X
XAfter you have unpacked your kit, you should have all the files listed
Xin MANIFEST.
X
X========================================================================
X                           It's not the way I wrote it, but the
X                           way you play it makes it sound a lot better.
X                                -- Camille Saint-Saens (French composer)
X
XThe dist package consists of four parts:
X
X    1) The Configure generator (metaconfig) and its supporting files.
X    2) The distribution kit maker (makedist) and its supporting files.
X    3) The patch distribution system (pat*) and its supporting files.
X    4) The Makefile generator (jmake) and its supporting files.
X
XEach of these can be used separately from the others.  Before you can
Xuse any of those, however, the directory containing your package (not this
Xpackage) must be initialized by putting a .package file into it.  This
Xcan be done by running packinit in that directory.
X
XThere is a mailing list hosted in Japan and set up by Shigeya Suzuki
X<shigeya@foretune.co.jp>, for discussion about the dist package as a
Xwhole. It's a good place to ask questions (or answer them) and to
Xsend your patches. I will post official patches to the net, as well
Xas to the dist-users list.
X
XTo send a mail to the list, address it to <dist-users@foretune.co.jp>.
XTo subscribe, send a mail to <majordomo@foretune.co.jp>. If you don't
Xknow how to use majordomo, the syntax of the subscribe command is:
X
X	subscribe dist-users [address]
X
Xwhere the address part is optional. You may unsubscribe automatically
Xat any time by sending:
X
X	unsubscribe dist-users
X
XIf you have a problem with this version of dist, it is recommended that
Xyou subscribe to the list, then send a description of your problem to it.
XIf you send mail to me personally, I may not be able to answer in a
Xtimely fashion.
X
XNotes:
X
X    If you are running on a system with <= 14 char filenames, don't
X    distribute any files with filenames longer than 12 chars (with the
X    exception of patchlevel.h), so that there will be room for a
X    2-digit extension indicating patch number in your bugs direcory.
X    This includes .SH files, so any shell script built by a .SH file
X    should be 9 characters or less.  On systems with flexfilenames you
X    don't have to worry about it.
X
X    This package has been designed on top of dist 2.0, which has been
X    written by Larry Wall <lwall@netlabs.com>.
X========================================================================
X
XINSTALLATION
X
X1) Run Configure. This will figure out various things about your
Xsystem. After it has completed, it will produce config.h and config.sh.
X
XYou might possibly have to trim # comments from the front of Configure
Xif your shell doesn't handle them, but all other comments will be taken
Xcare of.
X
X2) Run make.
X
X3) If make succeeded, you may wish to do "make install install.man". Be
Xsure your rights are correct (if you install manual pages, you may need
Xsuper-user privileges). By not running "make install.man", you avoid the
Xinstallation of the manual pages.
X
X4) Read the manual entry before running.
X
X5) IMPORTANT!  Communicate any problem and suggested patches to me,
Xram@acri.fr (Raphael Manfredi), so we can keep this distribution in
Xsync.  If you have a problem, there will be someone else who had it or
Xwill have it too...
X
XIf possible, send me patches such that the patch program will apply
Xthem.  Context diffs are the best, then normal diffs.  Do not send ed
Xscripts, I have probably changed my copy since the version you got.
X
X6) After everything is installed, you can do make clobber. This will
Xclean up everything and let you re-distribute this kit, without
Xcarrying useless files. You should keep this distribution intact, so
Xthat future patches will be applyable.
X
X7) I have an automatic patch sender. Send me the following mail:
X
X	Subject: Command
X	@SH mailhelp PATH
X
Xand you'll get instructions (PATH stands for YOUR e-mail address, either
Xin INTERNET or in bang notation). I would recommend you to get all the
Xissued patches before you start making some modifications on this
Xpackage.
X
X8) If you wish to deinstall the package, you may run "make deinstall".
XA separate "make deinstall.man" will remove the manual pages. Be sure
Xthe makefiles are correctly set before running any deinstall target.
XOn USG systems, some executable have a chance to remain despite the
Xdeinstall (text file busy...).
X
X	Raphael Manfredi <ram@acri.fr>
END_OF_FILE
  if test 5375 -ne `wc -c <'README'`; then
    echo shar: \"'README'\" unpacked with wrong size!
  fi
  # end of 'README'
fi
if test -f 'PACKLIST' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'PACKLIST'\"
else
  echo shar: Extracting \"'PACKLIST'\" \(26345 characters\)
  sed "s/^X//" >'PACKLIST' <<'END_OF_FILE'
X   File Name		Archive #	Description
X----------------------------------------------------------
XPACKNOTES                  1	Warnings about long lines, etc
XREADME                     1	Basic instructions
XMANIFEST                   6	This list of files
XArtistic                  10	The Artistic Licence
XConfigure                  4	Portability tool
XCredits                   16	Traditional "thank you" list
XJmakefile                 28	Description of the main Makefile
XKnown_bugs                28	A list of known bugs
XMakefile.SH               11	A makefile to run subsidiary makefiles
XPACKLIST                   1	This shipping list
XWishlist                  20	Features I would like to add
Xbin/                       1	Some binary tools
Xbin/Jmakefile             28	Generic makefile description for bin
Xbin/Makefile.SH           14	Jmake-generated configured makefile
Xbin/manicheck.SH          19	Check manifest accuracy
Xbin/manicheck.man         23	Manual page for manicheck
Xbin/manilist.SH            1	Produces reports based on manifest
Xbin/manilist.man           8	Manual page for manilist
Xbin/packinit.SH            9	Creates a .package file describing your package
Xbin/packinit.man          23	Manual page for packinit
Xbin/perload                5	Build dynamically loaded perl scripts
Xdist.man                   9	Introduction to dist
Xinstall.SH                14	Installation script with a BSD-like syntax
Xjmake/                     1	Where makefile generator is stored
Xjmake/Jmakefile           28	High level makefile description for jmake
Xjmake/Makefile.SH         11	Generated makefile for jmake
Xjmake/NOTES               11	Quick description of the internal syntax
Xjmake/README              17	Welcome to jmake
Xjmake/bindex.SH            3	Script to build an index of rules
Xjmake/files/               1	Where rules for jmake are held
Xjmake/files/Jmake.rules    3	Generic rules for jmake
Xjmake/files/Jmake.tmpl    11	Template used by jmake to produce Makefile.SH
Xjmake/jmake.SH             8	The makefile generator
Xjmake/jmake.man            8	Manual page for jmake
Xjmake/jmkmf.SH            21	Wrapper for jmake
Xjmake/jmkmf.man           22	Manual page for jmkmf
Xkit/                       1	Where distribution tools are stored
Xkit/Jmakefile             28	Jmake's description of kit builder's makefile
Xkit/Makefile.SH           13	Builds kit builder
Xkit/README                23	Instructions on makedist
Xkit/kitsend.SH            16	Mail shell archive kits
Xkit/kitsend.man           24	Manual page for kitsend
Xkit/makeSH                19	Does most of turning a script into an SH file
Xkit/makeSH.man            21	Manual page for same
Xkit/makedist.SH            7	Makes a set of kits in the current directory
Xkit/makedist.man           9	Manual page for same
Xkit/manifake.SH           24	Makes a MANIFEST.new file out of a MANIFEST
Xkit/manifake.man          23	Manual page for same
Xlib/                       1	Some library support files
Xlib/Jmakefile             21	Generic makefile description for lib
Xlib/Makefile.SH           13	Jmake-generated configured makefile
Xlib/errnolist.a           21	Awk script to build sys_errnolist[]
Xlib/errnolist.mk          27	Rule files to add for errnolist.c
Xlib/errnolist.sh          26	Script to build errnolist.c
Xlib/makedepend.sh         13	Script to make dependecies, Larry Wall's way
Xlib/makedir.sh            20	Emulates 'mkdir -p'
Xmcon/                      1	Where metaconfig tools are stored
Xmcon/INTRO                14	Quick introduction for newcommers
Xmcon/Jmakefile            23	The file used by jmake to produce the Makefile
Xmcon/Makefile.SH           4	Builds metaconfig
Xmcon/NOTES                 9	Documents the changes in metaconfig
Xmcon/README               25	Instructions on using metaconfig
Xmcon/U/                    1	Holds Units for metaconfig
Xmcon/U/AAAAA.U            26	Does magic before Head.U
Xmcon/U/Chk_MANI.U         18	MANIFEST checks
Xmcon/U/Chk_whoami.U       28	A unit which checks for conflicts
Xmcon/U/Config_h.U         17	Makes config.h.SH--bizarrity here
Xmcon/U/Config_sh.U        19	Makes config.sh
Xmcon/U/Configdir.U        28	Creates .config directory to store persistent info
Xmcon/U/Cppsym.U           16	Makes program to test for cpp symbols
Xmcon/U/Csym.U             19	Determines whether C symbol is defined
Xmcon/U/End.U              27	"End of configuration questions"
Xmcon/U/Extract.U          22	.SH file extraction
Xmcon/U/Filexp.U           21	Makes program to do tilde expansion
Xmcon/U/Findhdr.U          14	Locate header files
Xmcon/U/Finish.U           17	A unit which always goes last
Xmcon/U/Getfile.U          12	Get file/directory name
Xmcon/U/Guess.U            12	Hazard guesses as to overall philosophy
Xmcon/U/Head.U             12	First unit, does "#!/bin/sh" et al
Xmcon/U/Inhdr.U            17	Defines a look-for-header function
Xmcon/U/Init.U             20	Magically gathers ?Init: lines from other units
Xmcon/U/Inlibc.U           21	Defines an is-in-libc? function
Xmcon/U/Instruct.U         14	Prints instructions
Xmcon/U/Loc.U              12	Look for common programs
Xmcon/U/MailAuthor.U       15	Offers user to register himself
Xmcon/U/Myinit.U           28	For copying to private U directories
Xmcon/U/Myread.U           15	Makes program to do read with shell escape
Xmcon/U/Nothing.U          28	For empty dependencies
Xmcon/U/Null.U             28	Zeroes out variables.  Probably unnecessary
Xmcon/U/Obsol_h.U          26	Warnings about obsolete C symbols
Xmcon/U/Obsol_sh.U         26	Warnings about obsolete shell symbols
Xmcon/U/Oldconfig.U        10	Looks for old config.sh file
Xmcon/U/Oldsym.U           19	Try to propagate symbols
Xmcon/U/Options.U          13	Configure option parsing
Xmcon/U/Rcs.U              24	Some stupid redefinitions to keep RCS happy
Xmcon/U/Setvar.U           22	Set a variable with some sanity checks
Xmcon/U/Warn_v7EXT.U       25	V7 has some ideosyncracies
Xmcon/U/Warn_v7ND.U        26	V7 has no O_NDELAY read
Xmcon/U/Whoa.U             23	Warning function
Xmcon/U/abortsig.U         19	Which signal is sent by abort()?
Xmcon/U/active.U           21	Find the news active file
Xmcon/U/alignbytes.U       22	Check for alignment constraints
Xmcon/U/baserev.U          28	Base revision of package
Xmcon/U/basicshell.U       22	Which basic shell is available
Xmcon/U/bin.U              17	Find where to install public executables
Xmcon/U/bitpbyte.U         20	Computes the number of bits in a byte
Xmcon/U/byteorder.U        18	Computes the byte order (big-endian?)
Xmcon/U/cc.U               19	Which C compiler should be used?
Xmcon/U/ccflags.U          12	Any additional C flags?
Xmcon/U/cf_who.U           23	Who configured the sytem, where and when
Xmcon/U/charorder.U        15	Character order within a byte
Xmcon/U/charsize.U         22	What is the size of "char"?
Xmcon/U/contains.U         23	Makes status-returning grep
Xmcon/U/cpp_stuff.U        15	Some cpp stuff
Xmcon/U/cppfilecom.U       10	Running cpp while preserving C comments
Xmcon/U/cppstdin.U         13	Check how to invoke the C pre-processor
Xmcon/U/d_NOFILE.U         12	Maximum # of file descriptors
Xmcon/U/d_NeWS.U           17	Old NeWS stuff
Xmcon/U/d_PORTAR.U         19	Do we know about portable archives?
Xmcon/U/d_SHM_MAC.U        14	SHMLBA macro stuff
Xmcon/U/d_access.U          2	Do we have access()?
Xmcon/U/d_bcmp.U           22	Do we have bcmp() or memcmp()?
Xmcon/U/d_bcopy.U          22	Do we have bcopy() or memcpy()?
Xmcon/U/d_bsdjmp.U         18	Do we have BSD _setjmp() and _longjmp()?
Xmcon/U/d_bzero.U          22	Do we have bzero() or memset()?
Xmcon/U/d_castneg.U        17	Can the C compiler cast negative to unsigned?
Xmcon/U/d_cbrt.U           27	Do we have cubic root cbrt()?
Xmcon/U/d_charsprf.U       21	How is sprintf() defined?
Xmcon/U/d_chsize.U         25	Size of a char
Xmcon/U/d_ckeypad.U        21	Do we have the curses keypad()?
Xmcon/U/d_const.U          22	Can cc grok the const keyword?
Xmcon/U/d_crypt.U          20	Does crypt() exist?
Xmcon/U/d_csh.U            27	csh path
Xmcon/U/d_ctermid.U        27	Do we have ctermid()?
Xmcon/U/d_dosuid.U         18	Do they want setuid emulation?
Xmcon/U/d_dup2.U           28	Do we have dup2()?
Xmcon/U/d_eofpipe.U        18	Will EOF be seen on closed pipes?
Xmcon/U/d_euc2jis.U        26	Do we have euc2jis()?
Xmcon/U/d_fchmod.U         25	Do we have fchmod()?
Xmcon/U/d_fchown.U         25	Do we have fchown()?
Xmcon/U/d_fcntl.U          27	Do we have fcntl()?
Xmcon/U/d_fd_set.U         16	Do we have the fd set manipulation macros?
Xmcon/U/d_ffs.U            26	Do we have ffs()?
Xmcon/U/d_flexfnam.U       17	Long filenames?
Xmcon/U/d_flock.U          28	Do we have flock()?
Xmcon/U/d_ftime.U          17	Do we have ftime()?
Xmcon/U/d_ftrncate.U       26	Do we have ftruncate()?
Xmcon/U/d_getgrps.U        25	Do we have getgroups()?
Xmcon/U/d_gethbynm.U       25	Do we have gethostbyname()?
Xmcon/U/d_gethent.U        26	Do we have gethostent()?
Xmcon/U/d_gethid.U         27	Do we have gethostid()?
Xmcon/U/d_gethname.U        9	What is the C function to get host name?
Xmcon/U/d_getopt.U         26	Do we have getopt()?
Xmcon/U/d_getpagsz.U       16	Computes system's page size
Xmcon/U/d_getpgrp.U        26	Do we have getpgrp()?
Xmcon/U/d_getpgrp2.U       25	Do we have getpgrp2()? (DG/UX)
Xmcon/U/d_getprior.U       26	Do we have getpriority()?
Xmcon/U/d_getpwent.U       24	How is passwd info gotten?
Xmcon/U/d_getwd.U          24	Do we have getwd()?
Xmcon/U/d_havetlib.U       16	Where is termlib?
Xmcon/U/d_hidnet.U         18	Do hiddennet stuff?
Xmcon/U/d_htonl.U          21	Do we have htonl() and friends?
Xmcon/U/d_inetd.U          17	Should internet communication be done via inetd?
Xmcon/U/d_internet.U       21	Use internet addresses?
Xmcon/U/d_itimer.U         26	Do we have setitimer()?
Xmcon/U/d_keepsig.U        20	Will signal handlers need to be rearmed?
Xmcon/U/d_killpg.U         25	Do we have killpg()?
Xmcon/U/d_lstat.U          27	Do we have lstat()?
Xmcon/U/d_mbstowcs.U       25	Do we have mbstowcs()?
Xmcon/U/d_mbtowc.U         26	Do we have mbtowc()?
Xmcon/U/d_memccpy.U        25	Do we have memccpy()?
Xmcon/U/d_memchr.U         25	Do we have memchr()?
Xmcon/U/d_memcmp.U         23	Do we have memcmp()?
Xmcon/U/d_memcpy.U         23	Do we have memcpy()?
Xmcon/U/d_memmove.U        24	Do we have memmove()?
Xmcon/U/d_memset.U         23	Do we have memset()?
Xmcon/U/d_mkdir.U          25	Do we have mkdir()?
Xmcon/U/d_msg.U            23	Do we have full msg(2) support?
Xmcon/U/d_msgctl.U         26	Do we have msgctl()?
Xmcon/U/d_msgget.U         27	Do we have msgget()?
Xmcon/U/d_msgrcv.U         26	Do we have msgrcv()?
Xmcon/U/d_msgsnd.U         26	Do we have msgsnd()?
Xmcon/U/d_newsadm.U        20	Who is news administrator?
Xmcon/U/d_nolnbuf.U        18	Is stdout line buffered?
Xmcon/U/d_normsig.U        20	signal() vs sigset()
Xmcon/U/d_open3.U          18	Do we have the 3 arguments form for open()?
Xmcon/U/d_perror.U         23	Do we have perror()?
Xmcon/U/d_pidcheck.U       19	Is kill(pid, 0) allowed for PID checks?
Xmcon/U/d_popen.U          27	Do we have popen()?
Xmcon/U/d_portable.U       19	How portable do we want to be?
Xmcon/U/d_psignal.U        26	Do we have psignal()?
Xmcon/U/d_raster.U         21	Is this a Raster Tech machine?
Xmcon/U/d_rdchk.U          25	Is rdchk() there to check for input?
Xmcon/U/d_readdir.U        25	Do we have readdir()?
Xmcon/U/d_regcmp.U         19	Do we have regcmp()?
Xmcon/U/d_rename.U         25	Do we have rename()?
Xmcon/U/d_rmdir.U          26	Do we have rmdir()?
Xmcon/U/d_rusage.U         23	Do we have getrusage()?
Xmcon/U/d_safebcpy.U       18	Can bcopy() handle overlapping blocks?
Xmcon/U/d_safemcpy.U       18	Can memcpy() handle overlapping blocks?
Xmcon/U/d_scannl.U         19	Does scanf() groks '\n' correctly?
Xmcon/U/d_scorfl.U         20	Keep scoreboards by full name?
Xmcon/U/d_select.U         25	Do we have select()?
Xmcon/U/d_sem.U            24	Do we have full sem(2) support?
Xmcon/U/d_semctl.U         26	Do we have d_semctl()?
Xmcon/U/d_semget.U         27	Do we have semget()?
Xmcon/U/d_semop.U          27	Do we have semop()?
Xmcon/U/d_setegid.U        25	Do we have setegid()?
Xmcon/U/d_seteuid.U        25	Do we have seteuid()?
Xmcon/U/d_setpgrp.U        17	Do we have setpgrp()?
Xmcon/U/d_setpgrp2.U       25	Do we have setpgrp2()? (DG/UX)
Xmcon/U/d_setprior.U       26	Do we have setpriority()?
Xmcon/U/d_setregid.U       21	Do we have setregid()?
Xmcon/U/d_setreuid.U       21	Do we have setreuid()?
Xmcon/U/d_setrgid.U        25	Do we have setrgid()?
Xmcon/U/d_setruid.U        25	Do we have setruid()?
Xmcon/U/d_sgndchr.U        22	Are chars signed?
Xmcon/U/d_shm.U            23	Do we have full shm(2) support?
Xmcon/U/d_shmat.U          27	Do we have shmat()?
Xmcon/U/d_shmctl.U         26	Do we have shmctl()?
Xmcon/U/d_shmdt.U          27	Do we have shmdt()?
Xmcon/U/d_shmget.U         26	Do we have shmget()?
Xmcon/U/d_sigblock.U       27	Do we have sigblock()?
Xmcon/U/d_sighold.U        27	Do we have sighold()?
Xmcon/U/d_siglist.U        24	Do we have sys_siglist[]?
Xmcon/U/d_sigsetmk.U       17	Do we have sigsetmask()?
Xmcon/U/d_sigvec.U         16	BSD reliable signals supported?
Xmcon/U/d_sjis2jis.U       26	Do we have sjis2jis()?
Xmcon/U/d_socket.U         14	BSD socket interface supported?
Xmcon/U/d_speedopt.U       20	Optimize speed vs memory?
Xmcon/U/d_stat.U           28	Do we have stat()?
Xmcon/U/d_statblks.U       22	Does stat know about blksize and blocks?
Xmcon/U/d_stdstdio.U       23	How standard is stdio?
Xmcon/U/d_strchr.U         18	Use strchr() or index()?
Xmcon/U/d_strcspn.U        26	Do we have strcspn()?
Xmcon/U/d_strctcpy.U       22	Do we do struct copies?
Xmcon/U/d_strerror.U       15	Do we have strerror()?
Xmcon/U/d_strftime.U       26	Do we have strftime()?
Xmcon/U/d_strstr.U         27	Do we have strtr()?
Xmcon/U/d_strtok.U         25	Do we have strtok()?
Xmcon/U/d_strtol.U         25	Do we have strtol()?
Xmcon/U/d_su_chown.U       23	Do we need to be root to do a chown?
Xmcon/U/d_symlink.U        26	Does symlink() exist?
Xmcon/U/d_syscall.U        26	Do we have syscall()?
Xmcon/U/d_syslog.U         22	Do we have syslog()?
Xmcon/U/d_system.U         27	Do we have system()?
Xmcon/U/d_time.U           19	Do we have time()?
Xmcon/U/d_times.U          18	Do we have a times() function?
Xmcon/U/d_tminsys.U        22	Is struct tm in <sys/time.h>?
Xmcon/U/d_truncate.U       27	Do we have truncate()?
Xmcon/U/d_tzmin.U          21	Do we use tz_minuteswest?
Xmcon/U/d_ulimit.U         18	Do we have ulimit()?
Xmcon/U/d_usendir.U        18	Use our own ndir routines?
Xmcon/U/d_usleep.U         27	Do we have usleep()?
Xmcon/U/d_uwait.U          22	Is there a 'union wait' declaration around here?
Xmcon/U/d_vfork.U          22	vfork() vs fork()
Xmcon/U/d_voidsig.U        17	How is signal() declared?
Xmcon/U/d_volatile.U       20	Does our C compiler support "volatile"?
Xmcon/U/d_vprintf.U        18	Do we have vprintf()?
Xmcon/U/d_wait3.U          27	Do we have wait3()?
Xmcon/U/d_wait4.U          28	Do we have wait4()?
Xmcon/U/d_waitpid.U        27	Do we have waitpid() system call?
Xmcon/U/d_wcstombs.U       25	Do we have wcstombs()?
Xmcon/U/d_xdrs.U           24	Do we have XDR serialization routines?
Xmcon/U/defeditor.U        25	Find default editor
Xmcon/U/doublesize.U       22	What is the size of "double"?
Xmcon/U/etc.U              24	Where administrative executable should go
Xmcon/U/filexp.U           28	Finds location of filexp made by Filexp.U
Xmcon/U/floatsize.U        22	What is the size of "float"?
Xmcon/U/fpu.U              20	What kind of Sun fpu is in use?
Xmcon/U/gidtype.U          21	What is the type of gids?
Xmcon/U/h_fcntl.U          28	Do we need to include fcntl.h?
Xmcon/U/h_sysfile.U        28	Do we need to include sys/file.h?
Xmcon/U/i_arpainet.U       26	Shall we include <arpa/inet.h>?
Xmcon/U/i_dbm.U            28	Shall we include <dbm.h>?
Xmcon/U/i_dirent.U         18	Shall we include <dirent.h>
Xmcon/U/i_fcntl.U          21	Shall we include <fcntl.h>?
Xmcon/U/i_gdbm.U           27	Shall we include <gdbm.h>?
Xmcon/U/i_grp.U            28	Shall we include <grp.h>?
Xmcon/U/i_limits.U         25	Shall we include <limits.h>?
Xmcon/U/i_malloc.U         27	Shall we include <malloc.h>?
Xmcon/U/i_memory.U         27	Shall we include <memory.h>?
Xmcon/U/i_ndbm.U           27	Shall we include <ndbm.h>?
Xmcon/U/i_niin.U           21	Shall we include <netinet/in.h>?
Xmcon/U/i_pwd.U             5	Shall we include <pwd.h>?
Xmcon/U/i_stdarg.U         27	Shall we include <stdarg.h>?
Xmcon/U/i_stddef.U         27	Shall we include <stddef.h>?
Xmcon/U/i_stdlib.U         27	Shall we include <stdlib.h>?
Xmcon/U/i_string.U         20	<string.h> or <strings.h>?
Xmcon/U/i_sysdir.U         27	Shall we include <sys/dir.h>?
Xmcon/U/i_sysfile.U        22	Do we need <sys/file.h>?
Xmcon/U/i_sysioctl.U       12	Include <sys/ioctl.h> or <sgtty.h>?
Xmcon/U/i_sysndir.U        26	Shall we include <sys/ndir.h>?
Xmcon/U/i_sysresrc.U       25	Shall we include <sys/resource.h>?
Xmcon/U/i_sysselct.U       24	Shall we include <sys/select.h>?
Xmcon/U/i_syssock.U        21	Shall we include <sys/socket.h>?
Xmcon/U/i_systimeb.U       20	Is struct timeb defined in <sys/timeb.h>?
Xmcon/U/i_systimes.U       26	Shall we include <sys/times.h>?
Xmcon/U/i_systwgcf.U       26	Shall we include <sys/twg_config.h>?
Xmcon/U/i_systypes.U       24	Do we have to include <sys/types.h>?
Xmcon/U/i_sysun.U          25	Shall we include <sys/un.h>?
Xmcon/U/i_syswait.U        25	Is there a <sys/wait.h>?
Xmcon/U/i_termio.U         15	Include <termio.h> or <sgtty.h>?
Xmcon/U/i_time.U           13	Which time.h should we include?
Xmcon/U/i_unistd.U         23	Include <unistd.h>?
Xmcon/U/i_utime.U          27	Include <utime.h>?
Xmcon/U/i_varargs.U        24	Include <varargs.h>?
Xmcon/U/i_varhdr.U         18	Choose between <varargs.h> and <stdarg.h>
Xmcon/U/i_vfork.U          27	Include <vfork.h>?
Xmcon/U/i_whoami.U         27	Include <whoami.h>?
Xmcon/U/inc.U              24	Where to put public include files?
Xmcon/U/intsize.U          23	What is the size of "int"?
Xmcon/U/ipc.U              14	Choose IPC mechanism
Xmcon/U/kernel.U           23	Compute the kernel pathname
Xmcon/U/lex.U              26	Use lex or flex?
Xmcon/U/lib.U              24	Where to put public library files ?
Xmcon/U/libc.U              6	Where is libc?
Xmcon/U/libdbm.U           24	Look for a suitable dbm library
Xmcon/U/libflex.U          24	Locate flex library
Xmcon/U/libnlist.U         24	Locate an nlist library
Xmcon/U/libnm.U            24	New math library?
Xmcon/U/libpth.U           21	Set path to locate libraries
Xmcon/U/libs.U             17	Optional libraries?
Xmcon/U/libyacc.U          24	Locate yacc library
Xmcon/U/lintlib.U          23	Where lint library should be placed
Xmcon/U/locdist.U          12	Find distribution names for news
Xmcon/U/longsize.U         22	What is the size of "long"?
Xmcon/U/lseektype.U        22	What is the type of lseek()?
Xmcon/U/maildir.U          24	Where is mail spooled
Xmcon/U/mailer.U           21	What delivers mail?
Xmcon/U/mailfile.U         22	What filename in maildir?
Xmcon/U/mallocsrc.U        17	Use malloc included in kit?
Xmcon/U/manfmt.U           20	Formatted man directories
Xmcon/U/mansrc.U           16	Where to put manual pages source
Xmcon/U/mboxchar.U         20	How to determine if file is mailbox
Xmcon/U/mkdep.U            11	How to generate makefile dependencies?
Xmcon/U/models.U           11	Large vs small, split I&D, etc
Xmcon/U/myhostname.U       10	How to determine hostname from shell
Xmcon/U/n.U                24	How to suppress newline with echo
Xmcon/U/nametype.U         15	How to get user's fullname
Xmcon/U/newslevel.U        21	What version of news are we running?
Xmcon/U/newslib.U          20	Where is the news library?
Xmcon/U/newsspool.U        21	Where is news spooled?
Xmcon/U/nis.U              16	Do we have to deal with NIS (former YP)?
Xmcon/U/nlist_pfx.U        15	nlist() related stuff
Xmcon/U/orderlib.U         18	Shall we order components libraries?
Xmcon/U/orgname.U          20	What is the organizaton name?
Xmcon/U/package.U          28	Gets package name from .package magically
Xmcon/U/pager.U            25	What's the pager, more or less?
Xmcon/U/patchlevel.U       27	Grab current patchlevel out of patchlevel.h
Xmcon/U/perlpath.U         23	The full path of perl
Xmcon/U/pidtype.U          23	What is the type of a PID?
Xmcon/U/prefshell.U        21	Preferred user shell
Xmcon/U/privlib.U          16	Where is the private library?
Xmcon/U/prototype.U        14	Do we support prototypes?
Xmcon/U/ptrsize.U          23	What is the size of a pointer?
Xmcon/U/randbits.U         20	How many bits in rand()?
Xmcon/U/randfunc.U         14	Which random number function shall we use?
Xmcon/U/rcs_branch.U       24	Does RCS know about the -b switch?
Xmcon/U/registers.U        15	How many register declarations to use
Xmcon/U/rootid.U           27	Root user id
Xmcon/U/sbrktype.U         23	What is the return type of sbrk()?
Xmcon/U/scriptdir.U        16	Where to put public scripts
Xmcon/U/shm_for.U          16	More shared memory stuff
Xmcon/U/sig_name.U         19	Signal names
Xmcon/U/sockopt.U          18	Check for socket options
Xmcon/U/spitshell.U        19	Shell comment stripper, maybe
Xmcon/U/startperl.U        20	Do we start perl with #! or what?
Xmcon/U/startsh.U          24	How to guarantee sh startup
Xmcon/U/stdchar.U          24	Are chars unsigned in stdio?
Xmcon/U/sunscanf.U         22	Is this Sun's version of scanf()?
Xmcon/U/sysman.U           24	Where is the man(1) located?
Xmcon/U/uidtype.U          22	What is the type of uids?
Xmcon/U/usenm.U            17	Shall we use the costly nm extraction?
Xmcon/U/usrinc.U           18	Where are include files located?
Xmcon/U/vaproto.U          19	How do we prototype varargs, with ...?
Xmcon/U/voidflags.U        13	How supported is void?
Xmcon/U/warnflags.U        21	Any additional cc warning flags?
Xmcon/U/yacc.U             19	Which compiler-compiler to use?
Xmcon/files/                1	Templates for new units
Xmcon/files/Internal.U     28	Template for special units with internal symbols
Xmcon/files/README          1	Why those templates are here...
Xmcon/files/d_function.U   26	Template for C defines
Xmcon/files/dir.U          23	Template to get a directory
Xmcon/files/file.U         23	Template get a file
Xmcon/files/i_include.U    25	Template for include files
Xmcon/files/keyword.U      19	Template for keyword checking
Xmcon/files/locate.U       23	Template to locate a file
Xmcon/files/question.U     20	Template for setvar questions
Xmcon/files/rcshead.U      28	Template for unit head
Xmcon/files/shell.U        19	Template for non-setvar questions
Xmcon/files/type.U         22	Template for type lookup
Xmcon/makegloss.SH         12	Extracts Glossary from Unit files
Xmcon/man/                  1	Manual pages for metaconfig et al.
Xmcon/man/Jmakefile        28	Generic makefile description for manual pages
Xmcon/man/Makefile.SH      14	Jmake-generated makefile for manual pages
Xmcon/man/mconfig.SH.01     2	Manual page for metaconfig (part 1)
Xmcon/man/mconfig.SH.02     6	Manual page for metaconfig (part 2)
Xmcon/man/mlint.SH          7	Manual page for metalint
Xmcon/man/mxref.SH         13	Manual page for metaxref
Xmcon/mconfig.SH           13	Writes Configure scripts for you
Xmcon/mlint.SH             16	Lints metaconfig units
Xmcon/mxref.SH             15	Builds symbol cross-reference files
Xmcon/pl/                   1	Perl library for metaconfig et al.
Xmcon/pl/common.pl          9	Common control lines extraction
Xmcon/pl/configure.pl      10	Generates Configure
Xmcon/pl/cosmetic.pl       19	Some cosmetic fixes
Xmcon/pl/depend.pl         17	Metaconfig-only dependencies
Xmcon/pl/eval.pl            9	Built-in interpreter
Xmcon/pl/extract.pl        15	Dependency extractor engine
Xmcon/pl/files.pl          24	Extracts files from MANIFEST.new
Xmcon/pl/gensym.pl         28	Dynamic symbol generator
Xmcon/pl/init.pl           20	Initialization of dependency control array
Xmcon/pl/lint.pl            5	Lint-only dependencies
Xmcon/pl/locate.pl         11	Locate units
Xmcon/pl/makefile.pl       10	Builds temporary Makefiles
Xmcon/pl/obsolete.pl       15	Deals with obsolete symbols
Xmcon/pl/order.pl          22	Re-order units within Configure
Xmcon/pl/tsort.pl          11	Topological sort
Xmcon/pl/wanted.pl          8	Set up Wanted file
Xmcon/pl/xref.pl           19	Metaxref-only dependencies
Xmcon/pl/xwant.pl          12	Metaxref symbol extraction
Xpat/                       1	Where patching tools are stored
Xpat/Jmakefile             24	High level makefile description for pat
Xpat/Makefile.SH           13	Makefile for pat tools
Xpat/README                11	Instructions for patch/developping tools
Xpat/pat.SH                16	Check in, do diffs, make patch, send it
Xpat/pat.man                8	Manual page for patch tools
Xpat/patbase.SH            16	To set the base for future differences
Xpat/patchlevel.h          26	Prototypical patchlevel.h
Xpat/patcil.SH              7	Check in the latest changes
Xpat/patclean.SH           13	Check in latest changes and remove files
Xpat/patcol.SH             10	Check out working file
Xpat/patdiff.SH            10	Find the differences since last patch
Xpat/patftp.SH             17	Put patches in ftp pub directory
Xpat/patindex.SH           21	Create an index of patches sent out
Xpat/patmake.SH             7	Put together a patch file
Xpat/patname.SH            14	Assign symbolic name to a revision
Xpat/patpost.SH            15	Send patches via news
Xpat/patsend.SH             7	Sends patches via mail
Xpatchlevel.h               4	The current patchlevel for dist
Xpl/                        1	Directory for public perl libraries
Xpl/comment.pl             24	Perl library to find comment in front of $Log
Xpl/copyright.pl           19	Perl library to expand copyright
Xpl/fullname.pl            24	Perl library to get full name
Xpl/logname.pl             28	Perl library to get login name
Xpl/makedir.pl             28	Perl library to emulate 'mkdir -p'
Xpl/manifake.pl            24	Perl library to build a MANIFEST.new if none found
Xpl/newer.pl               20	Perl library to Find files newer than patchlevel.h
Xpl/package.pl             27	Perl library to read .package
Xpl/rangeargs.pl           25	Perl library to expand number lists
Xpl/rcsargs.pl             23	Perl library to expand rcs filename lists
Xpl/tilde.pl               28	Perl library to perform ~name expansion
Xpl/users.pl               28	Perl library to parse users file
END_OF_FILE
  if test 26345 -ne `wc -c <'PACKLIST'`; then
    echo shar: \"'PACKLIST'\" unpacked with wrong size!
  fi
  # end of 'PACKLIST'
fi
if test ! -d 'bin' ; then
    echo shar: Creating directory \"'bin'\"
    mkdir 'bin'
fi
if test -f 'bin/manilist.SH' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bin/manilist.SH'\"
else
  echo shar: Extracting \"'bin/manilist.SH'\" \(15152 characters\)
  sed "s/^X//" >'bin/manilist.SH' <<'END_OF_FILE'
Xcase $CONFIG in
X'')
X	if test -f config.sh; then TOP=.;
X	elif test -f ../config.sh; then TOP=..;
X	elif test -f ../../config.sh; then TOP=../..;
X	elif test -f ../../../config.sh; then TOP=../../..;
X	elif test -f ../../../../config.sh; then TOP=../../../..;
X	else
X		(echo "Can't find config.sh."; exit 1)
X	fi
X	. $TOP/config.sh
X	;;
Xesac
Xcase "$0" in
X*/*) cd `expr X$0 : 'X\(.*\)/'` ;;
Xesac
Xecho "Extracting bin/manilist (with variable substitutions)"
X$spitshell >manilist <<!GROK!THIS!
X$startperl
X	eval 'exec perl -S \$0 "\$@"'
X		if \$running_under_some_shell;
X
X# $Id: manilist.SH,v 3.0 1993/08/18 12:04:03 ram Exp $
X#
X#  Copyright (c) 1991-1993, Raphael Manfredi
X#  
X#  You may redistribute only under the terms of the Artistic Licence,
X#  as specified in the README file that comes with the distribution.
X#  You may reuse parts of this distribution only within the terms of
X#  that same Artistic Licence; a copy of which may be found at the root
X#  of the source tree for dist 3.0.
X#
X# $Log: manilist.SH,v $
X# Revision 3.0  1993/08/18  12:04:03  ram
X# Baseline for dist 3.0 netwide release.
X#
X
X\$version = '$VERSION';
X\$pl = '$PATCHLEVEL';
X!GROK!THIS!
X$spitshell >>manilist <<'!NO!SUBS!'
X
X# This script scans the MANIFEST.new file and builds some reports.
X
X# The output can be somewhat changed to produce other kind of reports.
X# The format is specified with a leading set of activation character, followed
X# by a ':', and then a set of formatting macros. The leading characters tell
X# when a report line shall be issued:
X#  a: all files (shortcut for 'ix')
X#  A: all files but the excluded ones
X#  f: report for files only
X#  d: report for directories only
X#  m: report for files/directories found in the MANIFEST.new
X#  n: report for files/directories not found in the MANIFEST.new
X#  i: included files are listed
X#  x: excluded files are listed
X# Then a set of macros introduced by %:
X#  %c: the leading one character code defined as follows:
X#  		. if the file is up to date (i.e. not newer than patchlevel.h)
X#  		- if the file is present in the manifest but is missing
X#  		> if the file has changed since last patch.
X#  		+ if the file is not present in the manifest but exists
X#  		o if the file is not listed but exists and is older than patchlevel.h
X#       x if the file in manifest and exists but was excluded
X#       ? if the file in manifest but was excluded and does not exist
X#  %n: the name of the file (its path from the top directory)
X#  %t: time stamp of last modification
X#  %d: description from MANIFEST.new file, if any
X#  %s: size of the file, in bytes
X
X$format = 'A:%c %n';
X
X# By default, only the source files whith the following extensions are reported
X# (but a -a option will report ALL the files, and a -i option can specify some
X# other extensions as well).
X#  .sh .SH .c .h .l .y .man
X
X@include = ('.sh', '.SH', '.c', '.h', '.l', '.y', '.man');
X
X# By default, the following extensions are excluded from the list. More
X# exclusions can be added with the -x option:
X#  ^core .o .bak .rej .new .old .orig ,v
X
X@exclude = ('^core', '.o', '.bak', '.rej', '.new', '.old', '.orig', ',v');
X
X# The column separator character (or string) is used to separate each formatted
X# column on the output. Formatting is requested by adding a '|' character in
X# the format string. A new separator can be specified via the -C option.
X# The maximum column size is fixed by the -L.
X
X$col_separator = ' ';
X$col_size = '';
X
Xrequire 'getopts.pl';
Xrequire 'stat.pl';
X&usage unless &Getopts('abcdhntVi:f:p:s:w:x:C:L:I:X:');
X
X&usage if $opt_h;
Xif ($opt_V) {
X	print "manilist $version PL$pl\n";
X	exit 0;
X}
X
X# Go to the top of the package, and update any file name given as argument
X# by prepending the needed path. The process then performs a chdir to the
X# top.
Xunless ($opt_b) {
X	chop($pwd = `pwd`) unless -f '.package';
X	until (-f '.package') {
X		die "No .package file!  Run packinit.\n" unless $pwd;
X		chdir '..' || die "Can't cd ..\n";
X		$pwd =~ s|(.*)/(.*)|$1|;
X		$prefix = $2 . '/' . $prefix;
X	}
X	if ($prefix) {
X		for (@ARGV) {
X			s/^\.$/$prefix/ && next;
X			s/^/$prefix/ unless m|^[-/]|;
X		}
X	}
X}
X
X# We now are at the top level
X
X# Build up the file hierarchy filter in @filter
Xforeach $entry (@ARGV) {
X	$entry =~ s|/$||;			# Remove final / in directory names
X	if (-d $entry) {
X		push(@filter, "d:$entry");
X	} elsif (-f $entry) {
X		push(@filter, "f:$entry");
X	} else {
X		die "$entry: No such file or directory.\n";
X	}
X}
X
X$prefix = '.' unless $prefix;
X($top = $prefix) =~ s|/$||;
X$top = '.' if $opt_t;			# Start from top, not from original dir
X@ARGV = ($top) unless @ARGV;
X
Xif ($opt_n) {		# "manifest" files are found by scanning the directory
X	open(MANIFEST, "find @ARGV -print|") || die "Can't run find: $!\n";
X	while (<MANIFEST>) {
X		chop;
X		s|^./||;
X		push(@manifest, $_);
X	}
X	close MANIFEST;
X} else {
X	$MANIFEST = $opt_f;
X	$MANIFEST = 'MANIFEST.new' unless $opt_f;
X	open MANIFEST || die "Can't open $MANIFEST: $!\n";
X	while (<MANIFEST>) {
X		chop;
X		s|^./||;
X		s|^(\S+)||;
X		local($name) = $1;
X		push(@manifest, $name);
X		m|^\s+(\d+)*\s*(.*)| && ($comment{$name} = $2);
X	}
X	close MANIFEST;
X}
X
X# If we have to compare the files in the MANIFEST with the actual files on
X# the file system, then grab them...
Xif ($opt_c && !$opt_n) {
X	open(FILES, "find @ARGV -print|") || die "Can't run find: $!\n";
X	while (<FILES>) {
X		chop;
X		s|^./||;
X		push(@files, $_);
X	}
X	close FILES;
X}
X
X# If there is a patchlevel.h file, get its time stamp.
X$pl_mtime = 0;
X$pl_mtime = (stat('patchlevel.h'))[$ST_MTIME] if -f 'patchlevel.h';
X
X# Dealing with command-line options
X$format = $opt_p if $opt_p;
X$col_separator = $opt_C if $opt_C;
X$col_size = $opt_L if $opt_L;
Xunless ($opt_p) {		# -p may be used as a shortcut for -w and -s
X	local($which) = ($format =~ /^(\w+):/);
X	local($string) = ($format =~ /^\w+:(.*)/);
X	$which = $opt_w if $opt_w;
X	$string = $opt_s if $opt_s;
X	$format = "$which:$string";
X}
X@include = split(' ', $opt_I) if $opt_I;		# First reset included with -I
X@exclude = split(' ', $opt_X) if $opt_X;		# and excluded with -X
Xpush(@include, split(' ', $opt_i)) if $opt_i;	# before applying additions
Xpush(@exclude, split(' ', $opt_x)) if $opt_x;
X&mode_opt;				# Compute $mode_xxx variables
X&init_functions;		# Compile &included and &excluded
X
X# Option -d requests dumping of inclusion and exclusion lists on stderr
Xif ($opt_d) {
X	print STDERR "Included: ", join(' ', @include), "\n";
X	print STDERR "Excluded: ", join(' ', @exclude), "\n";
X}
X
X@manifest = sort @manifest;
X@files = sort @files if defined(@files);
X
X# Build up the %manifest array so that we quickly know whether a file is in the
X# manifest or not.
Xforeach (@manifest) {
X	++$manifest{$_};
X}
X
X# Now loop other the files held in @manifest and perform your job...
Xforeach $mani (@manifest) {
X	if ($opt_c && !$opt_n) {		# Check MANIFEST with actual files on disk
X		for (;;) {
X			$disk = $files[0];				# Next file coming up
X			last unless $disk;
X			last if $disk gt $mani;			# Past the current point
X			shift(@files);					# Remove the file from list
X			last if $disk eq $mani;			# Reached the manifest point
X			# This means the file is before the current MANIFEST point
X			&report($disk);					# File exists and not in MANIFEST
X		}
X	}
X	&report($mani);
X}
X
X&flush_report;		# Flush the @Report array if formatting is needed
X
X# Print usage and exit with a non-zero status
Xsub usage {
X	print STDERR <<EOH;
XUsage: manilist [-abcdhnptV] [-i ext] [-f manifest] [-p format] [-s string]
X       [-w which] [-x ext] [-C separator] [-I included] [-L colsize]
X       [-X excluded] [files]
X  -a : report for all the files, regardless of (dis)allowed extensions.
X  -b : take current directory as base top (do not look for .package).
X  -c : check files against those in manifest and report differences.
X  -d : dump include and exclude lists on stderr.
X  -f : specify an alternate MANIFEST.new file.
X  -h : print this help message.
X  -i : specify a new extension to be included in the list of scanned files.
X  -n : do not use any MANIFEST file, rather scan directories for files.
X  -p : set new printing format (default is '$format'), shortcut for -s and -w.
X  -s : set string to be printed (with escapes) for each file on report.
X  -t : start from top directory, regardless of current dir.
X  -w : give leading letter(s) for printing format (file selection on report).
X  -x : give a new extension to be excluded from the list of scanned files.
X  -C : specify column separator (replaces '|' in format string).
X  -I : override default include list (space separated).
X  -L : specify maximum column size before truncation (',' separated).
X  -V : print version number.
X  -X : override default exclude list (space separated).
XEOH
X	exit 1;
X}
X
X# Set up $mode_xxx variables, where xxx is one of the options which may be set
X# in the printing mode. For instance, $mode_i is true if and only if 'i' is
X# mentionnned in the printing mode.
Xsub mode_opt {
X	local($fmt) = $format;
X	$fmt =~ s/^(\w+)://;
X	local($mode) = $1;
X	$mode .= 'ix' if $mode =~ /a/;
X	local($mode_eval) = '';
X	foreach (split(//, $mode)) {
X		$mode_eval .= "\$mode_$_ = 1;"
X	}
X	eval $mode_eval;
X	chop($@) && die "Can't set mode variables: $@.\n";
X}
X
X# Write a report about a file, either on stdout or into @Report if some
X# formatting post-processing is needed (aligned on '|' characters in the
X# report format string).
Xsub report {
X	local($file) = @_;
X	return unless &report_wanted($file);
X
X	local($fmt) = $format;
X	local($postproc) = 0;		# Do we need formatting post-processing ?
X	$fmt =~ s/^\w+://;
X	$fmt =~ s/\|/\02/g && ($postproc = 1);		# Formatted colum separator
X
X	# If neither 'd' nor 'f' is specified, then all the files are candidate
X	# for report. Specifying 'df' is the same, but is less efficient.
X	if (($mode_d || $mode_f) && -e $file) {		# File exists on disk
X		return if -f _ && !$mode_f;
X		return if -d _ && !$mode_d;
X	}
X
X	# Mode 'm' and 'n', if present, respectively ask for a report when a file
X	# is in the manifest and when a file is not in the manifest. Not specifying
X	# any of those modes is the same as specifying both of them.
X	local($in_mani) = defined $manifest{$file};
X	if ($mode_m || $mode_n) {
X		return if $in_mani && !$mode_m;
X		return if !$in_mani && !$mode_n;
X	}
X
X	# Mode 'i' and 'x' are used to control included and excluded files. By
X	# default all the files not excluded are reported. Specifying 'x' also asks
X	# for excluded files. The 'i' restricts the report to included files.
X	local($included) = $mode_i ? &included($file) : 1;
X	local($excluded) = &excluded($file);
X	if (!$included || $excluded) {
X		return if !$mode_x && $excluded;
X		return if ($mode_i && !$included) && !$excluded;
X	}
X
X	local($c_macro);
X	local($mtime) = (stat($file))[$ST_MTIME];
X	if ($in_mani) {							# File in MANIFEST
X		if (-e $file) {						# And file exists
X			$c_macro = '.' if $mtime <= $pl_mtime;
X			$c_macro = '>' if $mtime > $pl_mtime;
X			$c_macro = 'x' if &excluded($file);
X		} else {
X			$c_macro = '-';
X			$c_macro = '?' if &excluded($file);
X		}
X	} else {								# File not in MANIFEST
X		if (-e $file) {						# And file exists
X			$c_macro = $mtime < $pl_mtime ? 'o' : '+';
X		} else {
X			return if -l $file;
X			warn "$file seems to have been removed...\n";
X		}
X	}
X
X	# Perform the macro substitution
X	$fmt =~ s/%%/\0/g;			# Escape %%
X	$fmt =~ s/%/\01/g;			# Transform %, in case substitution add some
X	$fmt =~ s/\01c/$c_macro/g;	# %c is the code
X	$fmt =~ s/\01n/$file/g;		# %n is the file name
X	$fmt =~ s/\01t/&fstamp/ge;	# %t is the time stamp
X	$fmt =~ s/\01s/&fsize/ge;	# %s is the file size, in bytes
X	$fmt =~ s/\01d/&mdesc/ge;	# %d is the manifest description
X	$fmt =~ s/\01/%/g;			# All other %'s are left undisturbed
X
X	print "$fmt\n" unless $postproc;
X	push(@Report, $fmt) if $postproc;
X}
X
X# Format and flush report on stdout. Columns are aligned on what was originally
X# a '|' character in the format string, translated into a ^B by the reporting
X# routine.
Xsub flush_report {
X	return unless @Report;		# Early return if nothing to be done
X	local(@length);				# Stores maximum length for each field
X	local(@max);				# Maximum allowed column sizes
X	local($i);
X	local($report);
X	local($len);
X	local(@fields);
X	@max = split(',', $col_size);
X	foreach $report (@Report) { # First pass: compute fields lengths
X		$i = 0;
X		foreach (split(/\02/, $report)) {
X			$len = length($_);
X			$length[$i] = $length[$i] < $len ? $len : $length[$i];
X			$i++;
X		}
X	}
X	for ($i = 0; $i < @length; $i++) {	# Adapt to maximum specified length
X		$length[$i] = $max[$i] if $max[$i] > 0 && $length[$i] > $max[$i];
X	}
X	foreach $report (@Report) { # Second pass: formats each line
X		@fields = split(/\02/, $report);
X		$i = 0;
X		foreach (@fields) {
X			$len = length($_);
X			if ($max[$i] > 0 && $len > $max[$i]) {
X				$_ = substr($_, 0, $max[$i]);		# Truncate field
X			} else {
X				$_ .= ' ' x ($length[$i] - $len);	# Pad with blanks
X			}
X			$i++;
X		}
X		print join($col_separator, @fields), "\n";
X	}
X}
X
X# The following macro subsitution functions are called with $file set
X
X# Return the modification time on file
Xsub fstamp {
X	(stat($file))[$ST_MTIME];
X}
X
X# Return the file size, in bytes
Xsub fsize {
X	(stat($file))[$ST_SIZE];
X}
X
X# Return the description from the MANIFEST file, if any
Xsub mdesc {
X	return '' unless defined $comment{$file};
X	$comment{$file};
X}
X
X# Do we have to report informations on the specified file?
Xsub report_wanted {
X	return 1 unless @filter;
X	local($file) = @_;
X	local($filter);
X	foreach (@filter) {
X		$filter = $_;		# Work on a copy
X		if ($filter =~ s/^d://) {
X			return 1 if $file =~ m|^$filter(/[^/]*)*|;
X		} else {
X			$filter =~ s/^f://;
X			return 1 if $filter eq $file;
X		}
X	}
X	return 0;
X}
X
X# Build up the 'included' and 'excluded' functions which return true if a file
X# is in the include or exclude set.
Xsub init_functions {
X	&build_function('included', *include, 1);
X	&build_function('excluded', *exclude, 0);
X}
X
X# Build a function which returns true if a given name is found in the array
X# list of regular expression. Each regular expression is applied on the file
X# name, anchored at the end. False is returned only if none of the expressions
X# match. The purpose of building such a function dynamically is to avoid the
X# costly pattern recompilation every time.
Xsub build_function {
X	local($name) = shift(@_);	# The name of the function to be built
X	local(*array) = shift(@_);	# The extension array we have to check with
X	local($dflt) = shift(@_);	# Default value when -a is used
X	local($fn) = &q(<<EOF);		# Function being built.
X:sub $name {
X:	return $dflt if \$opt_a;	# All files are included, none excluded.
X:	local(\$_) = \@_;
X:	study;
XEOF
X	foreach (@array) {
X		$ext = $_;			# Work on a copy
X		# Convert shell-style globbing into perl's RE meta-characters
X		$ext =~ s/\./\\./g;	# Escape .
X		$ext =~ s/\?/./g;	# ? turns into .
X		$ext =~ s/\*/.*/g;	# And * turns into .*
X	$fn .= &q(<<EOL);
X:	return 1 if /$ext\$/;
XEOL
X	}
X	$fn .= &q(<<EOF);
X:	0;	# None of the extensions can be applied to the file
X:}
XEOF
X	eval $fn;
X	chop($@) && die "Can't compile '$name':\n$fn\n$@.\n";
X}
X
X# Remove ':' quotations in front of the lines
Xsub q {
X	local($_) = @_;
X	local($*) = 1;
X	s/^://g;
X	$_;
X}
X
X!NO!SUBS!
Xchmod 755 manilist
X$eunicefix manilist
END_OF_FILE
  if test 15152 -ne `wc -c <'bin/manilist.SH'`; then
    echo shar: \"'bin/manilist.SH'\" unpacked with wrong size!
  fi
  chmod +x 'bin/manilist.SH'
  # end of 'bin/manilist.SH'
fi
if test ! -d 'jmake' ; then
    echo shar: Creating directory \"'jmake'\"
    mkdir 'jmake'
fi
if test ! -d 'jmake/files' ; then
    echo shar: Creating directory \"'jmake/files'\"
    mkdir 'jmake/files'
fi
if test ! -d 'kit' ; then
    echo shar: Creating directory \"'kit'\"
    mkdir 'kit'
fi
if test ! -d 'lib' ; then
    echo shar: Creating directory \"'lib'\"
    mkdir 'lib'
fi
if test ! -d 'mcon' ; then
    echo shar: Creating directory \"'mcon'\"
    mkdir 'mcon'
fi
if test ! -d 'mcon/U' ; then
    echo shar: Creating directory \"'mcon/U'\"
    mkdir 'mcon/U'
fi
if test ! -d 'mcon/files' ; then
    echo shar: Creating directory \"'mcon/files'\"
    mkdir 'mcon/files'
fi
if test -f 'mcon/files/README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/files/README'\"
else
  echo shar: Extracting \"'mcon/files/README'\" \(189 characters\)
  sed "s/^X//" >'mcon/files/README' <<'END_OF_FILE'
XThis directory contains unit templates.
X
XIt is hoped metaconfig will have a tool to generate "standard" units based
Xon some well-known templates.
X
XFor now, it has a documentary-only value.
END_OF_FILE
  if test 189 -ne `wc -c <'mcon/files/README'`; then
    echo shar: \"'mcon/files/README'\" unpacked with wrong size!
  fi
  # end of 'mcon/files/README'
fi
if test ! -d 'mcon/man' ; then
    echo shar: Creating directory \"'mcon/man'\"
    mkdir 'mcon/man'
fi
if test ! -d 'mcon/pl' ; then
    echo shar: Creating directory \"'mcon/pl'\"
    mkdir 'mcon/pl'
fi
if test ! -d 'pat' ; then
    echo shar: Creating directory \"'pat'\"
    mkdir 'pat'
fi
if test ! -d 'pl' ; then
    echo shar: Creating directory \"'pl'\"
    mkdir 'pl'
fi
echo shar: End of archive 1 \(of 28\).
cp /dev/null ark1isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 28 archives.
    echo "Please run PACKNOTES through sh, read REAMDE and then type Configure."
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0

exit 0 # Just in case...
