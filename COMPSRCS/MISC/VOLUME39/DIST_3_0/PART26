Newsgroups: comp.sources.misc
From: Raphael Manfredi <ram@acri.fr>
Subject: v39i030:  dist-3.0 - Configure script generator and related tools, Part26/28
Message-ID: <1993Aug20.131737.22511@sparky.sterling.com>
X-Md4-Signature: 276008774499d37ed3b381415f8e35f2
Sender: kent@sparky.sterling.com (Kent Landfield)
Organization: Advanced Computer Research Institute, Lyon, France.
Date: Fri, 20 Aug 1993 13:17:37 GMT
Approved: kent@sparky.sterling.com

Submitted-by: Raphael Manfredi <ram@acri.fr>
Posting-number: Volume 39, Issue 30
Archive-name: dist-3.0/part26
Environment: UNIX, Perl, RCS

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# Contents:  lib/errnolist.sh mcon/U/AAAAA.U mcon/U/Obsol_h.U
#   mcon/U/Obsol_sh.U mcon/U/Warn_v7ND.U mcon/U/d_euc2jis.U
#   mcon/U/d_ffs.U mcon/U/d_ftrncate.U mcon/U/d_gethent.U
#   mcon/U/d_getopt.U mcon/U/d_getpgrp.U mcon/U/d_getprior.U
#   mcon/U/d_itimer.U mcon/U/d_mbtowc.U mcon/U/d_msgctl.U
#   mcon/U/d_msgrcv.U mcon/U/d_msgsnd.U mcon/U/d_psignal.U
#   mcon/U/d_rmdir.U mcon/U/d_semctl.U mcon/U/d_setprior.U
#   mcon/U/d_shmctl.U mcon/U/d_shmget.U mcon/U/d_sjis2jis.U
#   mcon/U/d_strcspn.U mcon/U/d_strftime.U mcon/U/d_symlink.U
#   mcon/U/d_syscall.U mcon/U/i_arpainet.U mcon/U/i_sysndir.U
#   mcon/U/i_systimes.U mcon/U/i_systwgcf.U mcon/U/lex.U
#   mcon/files/d_function.U pat/patchlevel.h
# Wrapped by ram@soft208 on Wed Aug 18 14:42:26 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 26 (of 28)."'
if test -f 'lib/errnolist.sh' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lib/errnolist.sh'\"
else
  echo shar: Extracting \"'lib/errnolist.sh'\" \(1100 characters\)
  sed "s/^X//" >'lib/errnolist.sh' <<'END_OF_FILE'
X# $Id: errnolist.sh,v 3.0 1993/08/18 12:04:36 ram Exp $
X#
X#  Copyright (c) 1991-1993, Raphael Manfredi
X#  
X#  You may redistribute only under the terms of the Artistic Licence,
X#  as specified in the README file that comes with the distribution.
X#  You may reuse parts of this distribution only within the terms of
X#  that same Artistic Licence; a copy of which may be found at the root
X#  of the source tree for dist 3.0.
X#
X# Original Author: Harlan Stenn <harlan@mumps.pfcs.com>
X#
X# $Log: errnolist.sh,v $
X# Revision 3.0  1993/08/18  12:04:36  ram
X# Baseline for dist 3.0 netwide release.
X#
X
Xcase $CONFIG in
X'')
X	if test ! -f config.sh; then
X		ln ../config.sh . || \
X		ln ../../config.sh . || \
X		ln ../../../config.sh . || \
X		ln ../../../../config.sh . || \
X		(echo "Can't find config.sh."; exit 1)
X	fi 2>/dev/null
X	. ./config.sh
X	;;
Xesac
Xcase "$0" in
X*/*) cd `expr X$0 : 'X\(.*\)/'` ;;
Xesac
Xcase "$errnolistc" in
X'') ;;
X*)
X	echo "Making $errnolistc ..."
X	awk -f errnolist.a < /usr/include/sys/errno.h > $errnolistc
X	echo "It would be a good idea to make sure that $errnolistc is correct."
Xesac
X
END_OF_FILE
  if test 1100 -ne `wc -c <'lib/errnolist.sh'`; then
    echo shar: \"'lib/errnolist.sh'\" unpacked with wrong size!
  fi
  # end of 'lib/errnolist.sh'
fi
if test -f 'mcon/U/AAAAA.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/AAAAA.U'\"
else
  echo shar: Extracting \"'mcon/U/AAAAA.U'\" \(1108 characters\)
  sed "s/^X//" >'mcon/U/AAAAA.U' <<'END_OF_FILE'
X?RCS: $Id: AAAAA.U,v 3.0 1993/08/18 12:04:44 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: AAAAA.U,v $
X?RCS: Revision 3.0  1993/08/18  12:04:44  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?X: 
X?X: The purpose of this file is to supply the head of the Makefile created
X?X: by metaconfig.  For this reason it must be first in alphabetical order.
X?X: 
X?MAKE:All: Finish
X?X:
X?X: Throughout the units, the following initials are used to identify comments:
X?X:
X?X:		HMS: Harlan Stenn
X?X:		RAM: Raphael Manfredi
X?X:
X?X: Agreed, this is a weird place to document it, but I couldn't find a better
X?X: place to do so. I've bet on the curiosity of users, who would probably
X?X: want to know what's in this strangely-named file--RAM.
END_OF_FILE
  if test 1108 -ne `wc -c <'mcon/U/AAAAA.U'`; then
    echo shar: \"'mcon/U/AAAAA.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/AAAAA.U'
fi
if test -f 'mcon/U/Obsol_h.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/Obsol_h.U'\"
else
  echo shar: Extracting \"'mcon/U/Obsol_h.U'\" \(1048 characters\)
  sed "s/^X//" >'mcon/U/Obsol_h.U' <<'END_OF_FILE'
X?RCS: $Id: Obsol_h.U,v 3.0 1993/08/18 12:05:11 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: Obsol_h.U,v $
X?RCS: Revision 3.0  1993/08/18  12:05:11  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?X: 
X?X: This file is prepended to .MT/Obsol_h if that file is not empty. That file
X?X: contains the necessary mappings of new symbols to obsolete ones.
X?X: 
X?MAKE:Obsol_h:
X?MAKE:	-pick prepend $@ ./Obsol_h
X/*
X * The following symbols are obsolete. They are mapped to the the new
X * symbols only to ease the transition process. The sources should be
X * updated so as to use the new symbols only, as the support for these
X * obsolete symbols may end without notice.
X */
X
END_OF_FILE
  if test 1048 -ne `wc -c <'mcon/U/Obsol_h.U'`; then
    echo shar: \"'mcon/U/Obsol_h.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/Obsol_h.U'
fi
if test -f 'mcon/U/Obsol_sh.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/Obsol_sh.U'\"
else
  echo shar: Extracting \"'mcon/U/Obsol_sh.U'\" \(1046 characters\)
  sed "s/^X//" >'mcon/U/Obsol_sh.U' <<'END_OF_FILE'
X?RCS: $Id: Obsol_sh.U,v 3.0 1993/08/18 12:05:11 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: Obsol_sh.U,v $
X?RCS: Revision 3.0  1993/08/18  12:05:11  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?X: 
X?X: This file is prepended to .MT/Obsol_sh if that file is not empty. That file
X?X: contains the necessary mappings of new symbols to obsolete ones.
X?X: 
X?MAKE:Obsol_sh:
X?MAKE:	-pick prepend $@ ./Obsol_sh
X#
X# The following symbols are obsolete. They are mapped to the the new
X# symbols only to ease the transition process. The sources should be
X# updated so as to use the new symbols only, since supporting of those
X# obsolete symbols may end without notice.
X#
END_OF_FILE
  if test 1046 -ne `wc -c <'mcon/U/Obsol_sh.U'`; then
    echo shar: \"'mcon/U/Obsol_sh.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/Obsol_sh.U'
fi
if test -f 'mcon/U/Warn_v7ND.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/Warn_v7ND.U'\"
else
  echo shar: Extracting \"'mcon/U/Warn_v7ND.U'\" \(1034 characters\)
  sed "s/^X//" >'mcon/U/Warn_v7ND.U' <<'END_OF_FILE'
X?RCS: $Id: Warn_v7ND.U,v 3.0 1993/08/18 12:05:18 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: Warn_v7ND.U,v $
X?RCS: Revision 3.0  1993/08/18  12:05:18  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?X: 
X?X: This unit warns V7 sites that they may not have a non-blocking read.
X?X: This unit needs to be mentioned in End.U to get included.
X?X: 
X?MAKE:Warn_v7ND: package Guess 
X?MAKE:	-pick add $@ %<
X: Warnings
Xif v7; then
X	cat <<'EOM'
X
XNOTE: many V7 systems do not have a way to do a non-blocking read.  If you
Xdon't have any of FIONREAD, O_NDELAY, or rdchk(), the $package package
Xmay not work as well as it might.  It might not work at all.
XEOM
Xfi
X
END_OF_FILE
  if test 1034 -ne `wc -c <'mcon/U/Warn_v7ND.U'`; then
    echo shar: \"'mcon/U/Warn_v7ND.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/Warn_v7ND.U'
fi
if test -f 'mcon/U/d_euc2jis.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_euc2jis.U'\"
else
  echo shar: Extracting \"'mcon/U/d_euc2jis.U'\" \(1059 characters\)
  sed "s/^X//" >'mcon/U/d_euc2jis.U' <<'END_OF_FILE'
X?RCS: $Id: d_euc2jis.U,v 3.0 1993/08/18 12:05:58 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_euc2jis.U,v $
X?RCS: Revision 3.0  1993/08/18  12:05:58  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_euc2jis: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_euc2jis:
X?S:	This variable conditionally defines the HAS_EUC2JIS symbol, which
X?S:	indicates to the C program that the euc2jis() routine is available
X?S:	to convert EUC to JIS.
X?S:.
X?C:HAS_EUC2JIS:
X?C:	This symbol, if defined, indicates that the euc2jis routine is
X?C:	available to convert EUC to JIS.
X?C:.
X?H:#$d_euc2jis	HAS_EUC2JIS		/**/
X?H:.
X?LINT:set d_euc2jis
X: see if euc2jis exists
Xset euc2jis d_euc2jis
Xeval $inlibc
X
END_OF_FILE
  if test 1059 -ne `wc -c <'mcon/U/d_euc2jis.U'`; then
    echo shar: \"'mcon/U/d_euc2jis.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_euc2jis.U'
fi
if test -f 'mcon/U/d_ffs.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_ffs.U'\"
else
  echo shar: Extracting \"'mcon/U/d_ffs.U'\" \(1103 characters\)
  sed "s/^X//" >'mcon/U/d_ffs.U' <<'END_OF_FILE'
X?RCS: $Id: d_ffs.U,v 3.0 1993/08/18 12:06:03 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_ffs.U,v $
X?RCS: Revision 3.0  1993/08/18  12:06:03  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_ffs: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_ffs:
X?S:	This variable conditionally defines the HAS_FFS symbol, which
X?S:	indicates to the C program that the ffs() routine is available
X?S:	to find the first bit which is set in its integer argument.
X?S:.
X?C:HAS_FFS:
X?C:	This symbol, if defined, indicates that the ffs routine is available
X?C:	to find the first bit set in its argument.  If it's not available,
X?C:	roll your own.
X?C:.
X?H:#$d_ffs HAS_FFS		/**/
X?H:.
X?LINT:set d_ffs
X: see if ffs exists
Xset ffs d_ffs
Xeval $inlibc
X
END_OF_FILE
  if test 1103 -ne `wc -c <'mcon/U/d_ffs.U'`; then
    echo shar: \"'mcon/U/d_ffs.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_ffs.U'
fi
if test -f 'mcon/U/d_ftrncate.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_ftrncate.U'\"
else
  echo shar: Extracting \"'mcon/U/d_ftrncate.U'\" \(1041 characters\)
  sed "s/^X//" >'mcon/U/d_ftrncate.U' <<'END_OF_FILE'
X?RCS: $Id: d_ftrncate.U,v 3.0 1993/08/18 12:06:07 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_ftrncate.U,v $
X?RCS: Revision 3.0  1993/08/18  12:06:07  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_ftrncate: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_ftrncate (d_ftruncate):
X?S:	This variable conditionally defines the HAS_FTRUNCATE symbol, which
X?S:	indicates to the C program that the ftruncate() subroutine exists.
X?S:.
X?C:HAS_FTRUNCATE:
X?C:	This symbol, if defined, indicates that the ftruncate() subroutine
X?C:	exists.
X?C:.
X?H:#$d_ftrncate HAS_FTRUNCATE	/**/
X?H:.
X?LINT:set d_ftrncate
X: see if ftruncate exists
Xset ftruncate d_ftrncate
Xeval $inlibc
X
END_OF_FILE
  if test 1041 -ne `wc -c <'mcon/U/d_ftrncate.U'`; then
    echo shar: \"'mcon/U/d_ftrncate.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_ftrncate.U'
fi
if test -f 'mcon/U/d_gethent.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_gethent.U'\"
else
  echo shar: Extracting \"'mcon/U/d_gethent.U'\" \(1058 characters\)
  sed "s/^X//" >'mcon/U/d_gethent.U' <<'END_OF_FILE'
X?RCS: $Id: d_gethent.U,v 3.0 1993/08/18 12:06:09 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_gethent.U,v $
X?RCS: Revision 3.0  1993/08/18  12:06:09  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_gethent: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_gethent:
X?S:	This variable conditionally defines HAS_GETHOSTENT if gethostent() is
X?S:	available to dup file descriptors.
X?S:.
X?C:HAS_GETHOSTENT (GETHOSTENT):
X?C:	This symbol, if defined, indicates that the gethostent routine is
X?C:	available to lookup host names in some data base or other.
X?C:.
X?H:#$d_gethent HAS_GETHOSTENT		/**/
X?H:.
X?LINT:set d_gethent
X: see if gethostent exists
Xset gethostent d_gethent
Xeval $inlibc
X
END_OF_FILE
  if test 1058 -ne `wc -c <'mcon/U/d_gethent.U'`; then
    echo shar: \"'mcon/U/d_gethent.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_gethent.U'
fi
if test -f 'mcon/U/d_getopt.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_getopt.U'\"
else
  echo shar: Extracting \"'mcon/U/d_getopt.U'\" \(1052 characters\)
  sed "s/^X//" >'mcon/U/d_getopt.U' <<'END_OF_FILE'
X?RCS: $Id: d_getopt.U,v 3.0 1993/08/18 12:06:13 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_getopt.U,v $
X?RCS: Revision 3.0  1993/08/18  12:06:13  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_getopt: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_getopt:
X?S:	This variable conditionally defines the HAS_GETOPT symbol, which
X?S:	indicates that the getopt() routine exists.  The getopt() routine
X?S:	parses command line options in a standard fashion.
X?S:.
X?C:HAS_GETOPT (GETOPT):
X?C:	This symbol, if defined, indicates that the getopt() routine exists.
X?C:.
X?H:#$d_getopt HAS_GETOPT		/**/
X?H:.
X?LINT:set d_getopt
X: see if getopt exists
Xset getopt d_getopt
Xeval $inlibc
X
END_OF_FILE
  if test 1052 -ne `wc -c <'mcon/U/d_getopt.U'`; then
    echo shar: \"'mcon/U/d_getopt.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_getopt.U'
fi
if test -f 'mcon/U/d_getpgrp.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_getpgrp.U'\"
else
  echo shar: Extracting \"'mcon/U/d_getpgrp.U'\" \(1028 characters\)
  sed "s/^X//" >'mcon/U/d_getpgrp.U' <<'END_OF_FILE'
X?RCS: $Id: d_getpgrp.U,v 3.0 1993/08/18 12:06:15 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_getpgrp.U,v $
X?RCS: Revision 3.0  1993/08/18  12:06:15  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_getpgrp: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_getpgrp:
X?S:	This variable conditionally defines HAS_GETPGRP if getpgrp() is
X?S:	available to get the current process group.
X?S:.
X?C:HAS_GETPGRP (GETPGRP):
X?C:	This symbol, if defined, indicates that the getpgrp routine is
X?C:	available to get the current process group.
X?C:.
X?H:#$d_getpgrp HAS_GETPGRP		/**/
X?H:.
X?LINT:set d_getpgrp
X: see if getpgrp exists
Xset getpgrp d_getpgrp
Xeval $inlibc
X
END_OF_FILE
  if test 1028 -ne `wc -c <'mcon/U/d_getpgrp.U'`; then
    echo shar: \"'mcon/U/d_getpgrp.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_getpgrp.U'
fi
if test -f 'mcon/U/d_getprior.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_getprior.U'\"
else
  echo shar: Extracting \"'mcon/U/d_getprior.U'\" \(1057 characters\)
  sed "s/^X//" >'mcon/U/d_getprior.U' <<'END_OF_FILE'
X?RCS: $Id: d_getprior.U,v 3.0 1993/08/18 12:06:16 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_getprior.U,v $
X?RCS: Revision 3.0  1993/08/18  12:06:16  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_getprior: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_getprior:
X?S:	This variable conditionally defines HAS_GETPRIORITY if getpriority()
X?S:	is available to get a process's priority.
X?S:.
X?C:HAS_GETPRIORITY (GETPRIORITY):
X?C:	This symbol, if defined, indicates that the getpriority routine is
X?C:	available to get a process's priority.
X?C:.
X?H:#$d_getprior HAS_GETPRIORITY		/**/
X?H:.
X: see if getpriority exists
X?LINT:set d_getprior
Xset getpriority d_getprior
Xeval $inlibc
X
END_OF_FILE
  if test 1057 -ne `wc -c <'mcon/U/d_getprior.U'`; then
    echo shar: \"'mcon/U/d_getprior.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_getprior.U'
fi
if test -f 'mcon/U/d_itimer.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_itimer.U'\"
else
  echo shar: Extracting \"'mcon/U/d_itimer.U'\" \(1086 characters\)
  sed "s/^X//" >'mcon/U/d_itimer.U' <<'END_OF_FILE'
X?RCS: $Id: d_itimer.U,v 3.0 1993/08/18 12:06:25 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_itimer.U,v $
X?RCS: Revision 3.0  1993/08/18  12:06:25  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_itimer: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_itimer:
X?S:	This variable conditionally defines the HAS_ITIMER symbol, which
X?S:	indicates that the setitimer() routine exists.  The setitimer()
X?S:	routine supports sub-second accuracy for one real-time and two
X?S:	cpu clocks.
X?S:.
X?C:HAS_ITIMER (ITIMER):
X?C:	This symbol, if defined, indicates that the setitimer() routine exists.
X?C:.
X?H:#$d_itimer HAS_ITIMER	/**/
X?H:.
X?LINT:set d_itimer
X: see if setitimer exists
Xset setitimer d_itimer
Xeval $inlibc
X
END_OF_FILE
  if test 1086 -ne `wc -c <'mcon/U/d_itimer.U'`; then
    echo shar: \"'mcon/U/d_itimer.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_itimer.U'
fi
if test -f 'mcon/U/d_mbtowc.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_mbtowc.U'\"
else
  echo shar: Extracting \"'mcon/U/d_mbtowc.U'\" \(1093 characters\)
  sed "s/^X//" >'mcon/U/d_mbtowc.U' <<'END_OF_FILE'
X?RCS: $Id: d_mbtowc.U,v 3.0 1993/08/18 12:06:30 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_mbtowc.U,v $
X?RCS: Revision 3.0  1993/08/18  12:06:30  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_mbtowc: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_mbtowc:
X?S:	This variable conditionally defines the HAS_MBTOWC symbol, which
X?S:	indicates to the C program that the mbtowc() routine is available
X?S:	to convert multibyte to a wide character.
X?S:.
X?C:HAS_MBTOWC (MBTOWC):
X?C:	This symbol, if defined, indicates that the mbtowc routine is available
X?C:	to covert a multibyte to a wide character.
X?C:.
X?H:#$d_mbtowc HAS_MBTOWC		/**/
X?H:.
X?LINT:set d_mbtowc
X: see if mbtowc exists
Xset mbtowc d_mbtowc
Xeval $inlibc
X
END_OF_FILE
  if test 1093 -ne `wc -c <'mcon/U/d_mbtowc.U'`; then
    echo shar: \"'mcon/U/d_mbtowc.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_mbtowc.U'
fi
if test -f 'mcon/U/d_msgctl.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_msgctl.U'\"
else
  echo shar: Extracting \"'mcon/U/d_msgctl.U'\" \(1037 characters\)
  sed "s/^X//" >'mcon/U/d_msgctl.U' <<'END_OF_FILE'
X?RCS: $Id: d_msgctl.U,v 3.0 1993/08/18 12:06:38 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_msgctl.U,v $
X?RCS: Revision 3.0  1993/08/18  12:06:38  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_msgctl: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_msgctl:
X?S:	This variable conditionally defines the HAS_MSGCTL symbol, which
X?S:	indicates to the C program that the msgctl() routine is available.
X?S:.
X?C:HAS_MSGCTL:
X?C:	This symbol, if defined, indicates that the msgctl() routine is
X?C:	available to perform message control operations.
X?C:.
X?H:#$d_msgctl HAS_MSGCTL		/**/
X?H:.
X?LINT:set d_msgctl
X: see if msgctl exists
Xset msgctl d_msgctl
Xeval $inlibc
X
END_OF_FILE
  if test 1037 -ne `wc -c <'mcon/U/d_msgctl.U'`; then
    echo shar: \"'mcon/U/d_msgctl.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_msgctl.U'
fi
if test -f 'mcon/U/d_msgrcv.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_msgrcv.U'\"
else
  echo shar: Extracting \"'mcon/U/d_msgrcv.U'\" \(1043 characters\)
  sed "s/^X//" >'mcon/U/d_msgrcv.U' <<'END_OF_FILE'
X?RCS: $Id: d_msgrcv.U,v 3.0 1993/08/18 12:06:40 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_msgrcv.U,v $
X?RCS: Revision 3.0  1993/08/18  12:06:40  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_msgrcv: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_msgrcv:
X?S:	This variable conditionally defines the HAS_MSGRCV symbol, which
X?S:	indicates to the C program that the msgrcv() routine is available.
X?S:.
X?C:HAS_MSGRCV:
X?C:	This symbol, if defined, indicates that the msgrcv() routine is
X?C:	available to extract a message from the message queue.
X?C:.
X?H:#$d_msgrcv HAS_MSGRCV		/**/
X?H:.
X?LINT:set d_msgrcv
X: see if msgrcv exists
Xset msgrcv d_msgrcv
Xeval $inlibc
X
END_OF_FILE
  if test 1043 -ne `wc -c <'mcon/U/d_msgrcv.U'`; then
    echo shar: \"'mcon/U/d_msgrcv.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_msgrcv.U'
fi
if test -f 'mcon/U/d_msgsnd.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_msgsnd.U'\"
else
  echo shar: Extracting \"'mcon/U/d_msgsnd.U'\" \(1040 characters\)
  sed "s/^X//" >'mcon/U/d_msgsnd.U' <<'END_OF_FILE'
X?RCS: $Id: d_msgsnd.U,v 3.0 1993/08/18 12:06:41 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_msgsnd.U,v $
X?RCS: Revision 3.0  1993/08/18  12:06:41  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_msgsnd: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_msgsnd:
X?S:	This variable conditionally defines the HAS_MSGSND symbol, which
X?S:	indicates to the C program that the msgsnd() routine is available.
X?S:.
X?C:HAS_MSGSND:
X?C:	This symbol, if defined, indicates that the msgsnd() routine is
X?C:	available to send a message into the message queue.
X?C:.
X?H:#$d_msgsnd HAS_MSGSND		/**/
X?H:.
X?LINT:set d_msgsnd
X: see if msgsnd exists
Xset msgsnd d_msgsnd
Xeval $inlibc
X
END_OF_FILE
  if test 1040 -ne `wc -c <'mcon/U/d_msgsnd.U'`; then
    echo shar: \"'mcon/U/d_msgsnd.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_msgsnd.U'
fi
if test -f 'mcon/U/d_psignal.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_psignal.U'\"
else
  echo shar: Extracting \"'mcon/U/d_psignal.U'\" \(1080 characters\)
  sed "s/^X//" >'mcon/U/d_psignal.U' <<'END_OF_FILE'
X?RCS: $Id: d_psignal.U,v 3.0 1993/08/18 12:06:49 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_psignal.U,v $
X?RCS: Revision 3.0  1993/08/18  12:06:49  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_psignal: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_psignal:
X?S:	This variable conditionally defines the HAS_PSIGNAL symbol, which
X?S:	indicates that the psignal() routine exists.  The psignal() routine
X?S:	prints a description of a signal on the standard error output.
X?S:.
X?C:HAS_PSIGNAL (PSIGNAL):
X?C:	This symbol, if defined, indicates that the psignal() routine exists.
X?C:.
X?H:#$d_psignal HAS_PSIGNAL		/**/
X?H:.
X?LINT:set d_psignal
X: see if psignal exists
Xset psignal d_psignal
Xeval $inlibc
X
END_OF_FILE
  if test 1080 -ne `wc -c <'mcon/U/d_psignal.U'`; then
    echo shar: \"'mcon/U/d_psignal.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_psignal.U'
fi
if test -f 'mcon/U/d_rmdir.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_rmdir.U'\"
else
  echo shar: Extracting \"'mcon/U/d_rmdir.U'\" \(1044 characters\)
  sed "s/^X//" >'mcon/U/d_rmdir.U' <<'END_OF_FILE'
X?RCS: $Id: d_rmdir.U,v 3.0 1993/08/18 12:06:56 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_rmdir.U,v $
X?RCS: Revision 3.0  1993/08/18  12:06:56  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_rmdir: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_rmdir:
X?S:	This variable conditionally defines HAS_RMDIR if rmdir() is
X?S:	available to remove directories.
X?S:.
X?C:HAS_RMDIR (RMDIR):
X?C:	This symbol, if defined, indicates that the rmdir routine is
X?C:	available to remove directories. Otherwise you should fork off a
X?C:	new process to exec /bin/rmdir.
X?C:.
X?H:#$d_rmdir HAS_RMDIR		/**/
X?H:.
X?LINT:set d_rmdir
X: see if rmdir exists
Xset rmdir d_rmdir
Xeval $inlibc
X
END_OF_FILE
  if test 1044 -ne `wc -c <'mcon/U/d_rmdir.U'`; then
    echo shar: \"'mcon/U/d_rmdir.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_rmdir.U'
fi
if test -f 'mcon/U/d_semctl.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_semctl.U'\"
else
  echo shar: Extracting \"'mcon/U/d_semctl.U'\" \(1038 characters\)
  sed "s/^X//" >'mcon/U/d_semctl.U' <<'END_OF_FILE'
X?RCS: $Id: d_semctl.U,v 3.0 1993/08/18 12:07:04 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_semctl.U,v $
X?RCS: Revision 3.0  1993/08/18  12:07:04  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_semctl: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_semctl:
X?S:	This variable conditionally defines the HAS_SEMCTL symbol, which
X?S:	indicates to the C program that the semctl() routine is available.
X?S:.
X?C:HAS_SEMCTL:
X?C:	This symbol, if defined, indicates that the semctl() routine is
X?C:	available to perform semaphore control operations.
X?C:.
X?H:#$d_semctl HAS_SEMCTL	/**/
X?H:.
X?LINT:set d_semctl
X: see if semctl exists
Xset semctl d_semctl
Xeval $inlibc
X
END_OF_FILE
  if test 1038 -ne `wc -c <'mcon/U/d_semctl.U'`; then
    echo shar: \"'mcon/U/d_semctl.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_semctl.U'
fi
if test -f 'mcon/U/d_setprior.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_setprior.U'\"
else
  echo shar: Extracting \"'mcon/U/d_setprior.U'\" \(1057 characters\)
  sed "s/^X//" >'mcon/U/d_setprior.U' <<'END_OF_FILE'
X?RCS: $Id: d_setprior.U,v 3.0 1993/08/18 12:07:11 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_setprior.U,v $
X?RCS: Revision 3.0  1993/08/18  12:07:11  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_setprior: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_setprior:
X?S:	This variable conditionally defines HAS_SETPRIORITY if setpriority()
X?S:	is available to set a process's priority.
X?S:.
X?C:HAS_SETPRIORITY (SETPRIORITY):
X?C:	This symbol, if defined, indicates that the setpriority routine is
X?C:	available to set a process's priority.
X?C:.
X?H:#$d_setprior HAS_SETPRIORITY		/**/
X?H:.
X?LINT:set d_setprior
X: see if setpriority exists
Xset setpriority d_setprior
Xeval $inlibc
X
END_OF_FILE
  if test 1057 -ne `wc -c <'mcon/U/d_setprior.U'`; then
    echo shar: \"'mcon/U/d_setprior.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_setprior.U'
fi
if test -f 'mcon/U/d_shmctl.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_shmctl.U'\"
else
  echo shar: Extracting \"'mcon/U/d_shmctl.U'\" \(1043 characters\)
  sed "s/^X//" >'mcon/U/d_shmctl.U' <<'END_OF_FILE'
X?RCS: $Id: d_shmctl.U,v 3.0 1993/08/18 12:07:18 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_shmctl.U,v $
X?RCS: Revision 3.0  1993/08/18  12:07:18  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_shmctl: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_shmctl:
X?S:	This variable conditionally defines the HAS_SHMCTL symbol, which
X?S:	indicates to the C program that the shmctl() routine is available.
X?S:.
X?C:HAS_SHMCTL:
X?C:	This symbol, if defined, indicates that the shmctl() routine is
X?C:	available to perform shared memory control operations.
X?C:.
X?H:#$d_shmctl HAS_SHMCTL		/**/
X?H:.
X?LINT:set d_shmctl
X: see if shmctl exists
Xset shmctl d_shmctl
Xeval $inlibc
X
END_OF_FILE
  if test 1043 -ne `wc -c <'mcon/U/d_shmctl.U'`; then
    echo shar: \"'mcon/U/d_shmctl.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_shmctl.U'
fi
if test -f 'mcon/U/d_shmget.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_shmget.U'\"
else
  echo shar: Extracting \"'mcon/U/d_shmget.U'\" \(1050 characters\)
  sed "s/^X//" >'mcon/U/d_shmget.U' <<'END_OF_FILE'
X?RCS: $Id: d_shmget.U,v 3.0 1993/08/18 12:07:20 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_shmget.U,v $
X?RCS: Revision 3.0  1993/08/18  12:07:20  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_shmget: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_shmget:
X?S:	This variable conditionally defines the HAS_SHMGET symbol, which
X?S:	indicates to the C program that the shmget() routine is available.
X?S:.
X?C:HAS_SHMGET:
X?C:	This symbol, if defined, indicates that the shmget() routine is
X?C:	available to request a shared memory segment from the kernel.
X?C:.
X?H:#$d_shmget HAS_SHMGET		/**/
X?H:.
X?LINT:set d_shmget
X: see if shmget exists
Xset shmget d_shmget
Xeval $inlibc
X
END_OF_FILE
  if test 1050 -ne `wc -c <'mcon/U/d_shmget.U'`; then
    echo shar: \"'mcon/U/d_shmget.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_shmget.U'
fi
if test -f 'mcon/U/d_sjis2jis.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_sjis2jis.U'\"
else
  echo shar: Extracting \"'mcon/U/d_sjis2jis.U'\" \(1075 characters\)
  sed "s/^X//" >'mcon/U/d_sjis2jis.U' <<'END_OF_FILE'
X?RCS: $Id: d_sjis2jis.U,v 3.0 1993/08/18 12:07:25 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_sjis2jis.U,v $
X?RCS: Revision 3.0  1993/08/18  12:07:25  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_sjis2jis: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_sjis2jis:
X?S:	This variable conditionally defines the HAS_SJIS2JIS symbol, which
X?S:	indicates to the C program that the sjis2jis() routine is available
X?S:	to convert SJIS to JIS.
X?S:.
X?C:HAS_SJIS2JIS:
X?C:	This symbol, if defined, indicates that the sjis2jis routine is
X?C:	available to convert SJIS to JIS.
X?C:.
X?H:#$d_sjis2jis	HAS_SJIS2JIS		/**/
X?H:.
X?LINT:set d_sjis2jis
X: see if sjis2jis exists
Xset sjis2jis d_sjis2jis
Xeval $inlibc
X
END_OF_FILE
  if test 1075 -ne `wc -c <'mcon/U/d_sjis2jis.U'`; then
    echo shar: \"'mcon/U/d_sjis2jis.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_sjis2jis.U'
fi
if test -f 'mcon/U/d_strcspn.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_strcspn.U'\"
else
  echo shar: Extracting \"'mcon/U/d_strcspn.U'\" \(1057 characters\)
  sed "s/^X//" >'mcon/U/d_strcspn.U' <<'END_OF_FILE'
X?RCS: $Id: d_strcspn.U,v 3.0 1993/08/18 12:07:33 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_strcspn.U,v $
X?RCS: Revision 3.0  1993/08/18  12:07:33  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_strcspn: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_strcspn:
X?S:	This variable conditionally defines the HAS_STRCSPN symbol, which
X?S:	indicates to the C program that the strcspn() routine is available
X?S:	to scan strings.
X?S:.
X?C:HAS_STRCSPN (STRCSPN):
X?C:	This symbol, if defined, indicates that the strcspn routine is
X?C:	available to scan strings.
X?C:.
X?H:#$d_strcspn HAS_STRCSPN		/**/
X?H:.
X?LINT:set d_strcspn
X: see if strcspn exists
Xset strcspn d_strcspn
Xeval $inlibc
X
END_OF_FILE
  if test 1057 -ne `wc -c <'mcon/U/d_strcspn.U'`; then
    echo shar: \"'mcon/U/d_strcspn.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_strcspn.U'
fi
if test -f 'mcon/U/d_strftime.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_strftime.U'\"
else
  echo shar: Extracting \"'mcon/U/d_strftime.U'\" \(1029 characters\)
  sed "s/^X//" >'mcon/U/d_strftime.U' <<'END_OF_FILE'
X?RCS: $Id: d_strftime.U,v 3.0 1993/08/18 12:07:36 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_strftime.U,v $
X?RCS: Revision 3.0  1993/08/18  12:07:36  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_strftime: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_strftime:
X?S:	This variable conditionally defines HAS_STRFTIME if strftime() is
X?S:	available to format locale-specific times.
X?S:.
X?C:HAS_STRFTIME:
X?C:	This symbol, if defined, indicates that the strftime routine is
X?C:	available to format locale-specific times.
X?C:.
X?H:#$d_strftime HAS_STRFTIME	/**/
X?H:.
X?LINT:set d_strftime
X: see if strftime exists
Xset strftime d_strftime
Xeval $inlibc
X
END_OF_FILE
  if test 1029 -ne `wc -c <'mcon/U/d_strftime.U'`; then
    echo shar: \"'mcon/U/d_strftime.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_strftime.U'
fi
if test -f 'mcon/U/d_symlink.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_symlink.U'\"
else
  echo shar: Extracting \"'mcon/U/d_symlink.U'\" \(1074 characters\)
  sed "s/^X//" >'mcon/U/d_symlink.U' <<'END_OF_FILE'
X?RCS: $Id: d_symlink.U,v 3.0 1993/08/18 12:07:41 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_symlink.U,v $
X?RCS: Revision 3.0  1993/08/18  12:07:41  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_symlink: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_symlink:
X?S:	This variable conditionally defines the HAS_SYMLINK symbol, which
X?S:	indicates to the C program that the symlink() routine is available
X?S:	to create symbolic links.
X?S:.
X?C:HAS_SYMLINK (SYMLINK):
X?C:	This symbol, if defined, indicates that the symlink routine is available
X?C:	to create symbolic links.
X?C:.
X?H:#$d_symlink HAS_SYMLINK	/**/
X?H:.
X?LINT:set d_symlink
X: see if symlink exists
Xset symlink d_symlink
Xeval $inlibc
X
END_OF_FILE
  if test 1074 -ne `wc -c <'mcon/U/d_symlink.U'`; then
    echo shar: \"'mcon/U/d_symlink.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_symlink.U'
fi
if test -f 'mcon/U/d_syscall.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/d_syscall.U'\"
else
  echo shar: Extracting \"'mcon/U/d_syscall.U'\" \(1048 characters\)
  sed "s/^X//" >'mcon/U/d_syscall.U' <<'END_OF_FILE'
X?RCS: $Id: d_syscall.U,v 3.0 1993/08/18 12:07:42 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_syscall.U,v $
X?RCS: Revision 3.0  1993/08/18  12:07:42  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_syscall: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_syscall:
X?S:	This variable conditionally defines HAS_SYSCALL if syscall() is
X?S:	available call arbitrary system calls.
X?S:.
X?C:HAS_SYSCALL (SYSCALL):
X?C:	This symbol, if defined, indicates that the syscall routine is
X?C:	available to call arbitrary system calls. If undefined, that's tough.
X?C:.
X?H:#$d_syscall HAS_SYSCALL	/**/
X?H:.
X?LINT:set d_syscall
X: see if syscall exists
Xset syscall d_syscall
Xeval $inlibc
X
END_OF_FILE
  if test 1048 -ne `wc -c <'mcon/U/d_syscall.U'`; then
    echo shar: \"'mcon/U/d_syscall.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/d_syscall.U'
fi
if test -f 'mcon/U/i_arpainet.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/i_arpainet.U'\"
else
  echo shar: Extracting \"'mcon/U/i_arpainet.U'\" \(1084 characters\)
  sed "s/^X//" >'mcon/U/i_arpainet.U' <<'END_OF_FILE'
X?RCS: $Id: i_arpainet.U,v 3.0 1993/08/18 12:08:15 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: i_arpainet.U,v $
X?RCS: Revision 3.0  1993/08/18  12:08:15  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:i_arpainet: Inhdr
X?MAKE:	-pick add $@ %<
X?S:i_arpainet:
X?S:	This variable conditionally defines the I_ARPA_INET symbol,
X?S:	and indicates whether a C program should include <arpa/inet.h>.
X?S:.
X?C:I_ARPA_INET:
X?C:	This symbol, if defined, indicates to the C program that it should
X?C:	include <arpa/inet.h> to get inet_addr and friends declarations.
X?C:.
X?H:#$i_arpainet	I_ARPA_INET		/**/
X?H:.
X?LINT:set i_arpainet
X: see if arpa/inet.h has to be included
Xset arpa/inet.h i_arpainet
Xeval $inhdr
X
END_OF_FILE
  if test 1084 -ne `wc -c <'mcon/U/i_arpainet.U'`; then
    echo shar: \"'mcon/U/i_arpainet.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/i_arpainet.U'
fi
if test -f 'mcon/U/i_sysndir.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/i_sysndir.U'\"
else
  echo shar: Extracting \"'mcon/U/i_sysndir.U'\" \(1035 characters\)
  sed "s/^X//" >'mcon/U/i_sysndir.U' <<'END_OF_FILE'
X?RCS: $Id: i_sysndir.U,v 3.0 1993/08/18 12:08:33 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: i_sysndir.U,v $
X?RCS: Revision 3.0  1993/08/18  12:08:33  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:i_sysndir: Inhdr
X?MAKE:	-pick add $@ %<
X?S:i_sysndir:
X?S:	This variable conditionally defines the I_SYS_NDIR symbol, and indicates
X?S:	whether a C program should include <sys/ndir.h>.
X?S:.
X?C:I_SYS_NDIR (I_SYSNDIR):
X?C:	This symbol, if defined, indicates to the C program that it should
X?C:	include <sys/ndir.h>.
X?C:.
X?H:#$i_sysndir I_SYS_NDIR	/**/
X?H:.
X?LINT:set i_sysndir
X: see if this is an sysndir system
Xset sys/ndir.h i_sysndir
Xeval $inhdr
X
END_OF_FILE
  if test 1035 -ne `wc -c <'mcon/U/i_sysndir.U'`; then
    echo shar: \"'mcon/U/i_sysndir.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/i_sysndir.U'
fi
if test -f 'mcon/U/i_systimes.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/i_systimes.U'\"
else
  echo shar: Extracting \"'mcon/U/i_systimes.U'\" \(1053 characters\)
  sed "s/^X//" >'mcon/U/i_systimes.U' <<'END_OF_FILE'
X?RCS: $Id: i_systimes.U,v 3.0 1993/08/18 12:08:39 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: i_systimes.U,v $
X?RCS: Revision 3.0  1993/08/18  12:08:39  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:i_systimes: Inhdr
X?MAKE:	-pick add $@ %<
X?S:i_systimes:
X?S:	This variable conditionally defines the I_SYS_TIMES symbol, and indicates
X?S:	whether a C program should include <sys/times.h>.
X?S:.
X?C:I_SYS_TIMES (I_SYSTIMES):
X?C:	This symbol, if defined, indicates to the C program that it should
X?C:	include <sys/times.h>.
X?C:.
X?H:#$i_systimes	I_SYS_TIMES		/**/
X?H:.
X?LINT:set i_systimes
X: see if this is a sys/times.h system
Xset sys/times.h i_systimes
Xeval $inhdr
X
END_OF_FILE
  if test 1053 -ne `wc -c <'mcon/U/i_systimes.U'`; then
    echo shar: \"'mcon/U/i_systimes.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/i_systimes.U'
fi
if test -f 'mcon/U/i_systwgcf.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/i_systwgcf.U'\"
else
  echo shar: Extracting \"'mcon/U/i_systwgcf.U'\" \(1058 characters\)
  sed "s/^X//" >'mcon/U/i_systwgcf.U' <<'END_OF_FILE'
X?RCS: $Id: i_systwgcf.U,v 3.0 1993/08/18 12:08:39 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: i_systwgcf.U,v $
X?RCS: Revision 3.0  1993/08/18  12:08:39  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:i_systwgcf: Inhdr
X?MAKE:	-pick add $@ %<
X?S:i_systwgcf:
X?S:	This variable conditionally defines the I_SYS_TWG_CF symbol, and
X?S:	indicates whether a C program should include sys/twg_config.h.
X?S:.
X?C:I_SYS_TWG_CF:
X?C:	This symbol, if defined, indicates to the C program that it should
X?C:	include sys/twg_config.h.
X?C:.
X?H:#$i_systwgcf I_SYS_TWG_CF	/**/
X?H:.
X?LINT:set i_systwgcf
X: see if this is a sys/twg_config.h system
Xset sys/twg_config.h i_systwgcf
Xeval $inhdr
X
END_OF_FILE
  if test 1058 -ne `wc -c <'mcon/U/i_systwgcf.U'`; then
    echo shar: \"'mcon/U/i_systwgcf.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/i_systwgcf.U'
fi
if test -f 'mcon/U/lex.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/lex.U'\"
else
  echo shar: Extracting \"'mcon/U/lex.U'\" \(1125 characters\)
  sed "s/^X//" >'mcon/U/lex.U' <<'END_OF_FILE'
X?RCS: $Id: lex.U,v 3.0 1993/08/18 12:08:55 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: Orginal Author: Graham Stoney <greyham@research.canon.oz.au>
X?RCS:
X?RCS: $Log: lex.U,v $
X?RCS: Revision 3.0  1993/08/18  12:08:55  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:lex: Guess Myread Oldconfig flex test
X?MAKE:	-pick add $@ %<
X?S:lex:
X?S:	This variable holds the name of the lexical analyser generator we
X?S:	want to use in the Makefile. It can be lex or flex.
X?S:.
X: determine lexical analyser generator
Xcase "$lex" in
X'')
X	dflt=lex;;
X*)
X	dflt="$lex";;
Xesac
Xecho " "
Xif $test -f "$flex"; then
X	rp='Which lexical analyser generator (lex or flex) shall I use?'
Xelse
X	rp='Which lexical analyser generator shall I use?'
Xfi
X. ./myread
Xlex="$ans"
END_OF_FILE
  if test 1125 -ne `wc -c <'mcon/U/lex.U'`; then
    echo shar: \"'mcon/U/lex.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/lex.U'
fi
if test -f 'mcon/files/d_function.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/files/d_function.U'\"
else
  echo shar: Extracting \"'mcon/files/d_function.U'\" \(1013 characters\)
  sed "s/^X//" >'mcon/files/d_function.U' <<'END_OF_FILE'
X?RCS: $Id: d_function.U,v 3.0 1993/08/18 12:10:05 ram Exp $
X?RCS:
X?RCS:  Copyright (c) 1991-1993, Raphael Manfredi
X?RCS:  
X?RCS:  You may redistribute only under the terms of the Artistic Licence,
X?RCS:  as specified in the README file that comes with the distribution.
X?RCS:  You may reuse parts of this distribution only within the terms of
X?RCS:  that same Artistic Licence; a copy of which may be found at the root
X?RCS:  of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: d_function.U,v $
X?RCS: Revision 3.0  1993/08/18  12:10:05  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:d_<FUNCTION>: Inlibc
X?MAKE:	-pick add $@ %<
X?S:d_<FUNCTION>:
X?S:	This variable conditionally defines HAS_<%FUNCTION> if <FUNCTION>() is
X?S:	available to ...
X?S:.
X?C:HAS_<%FUNCTION>:
X?C:	This symbol, if defined, indicates that the <FUNCTION>() routine is
X?C:	available to ...
X?C:.
X?H:#$d_<FUNCTION> HAS_<%FUNCTION>	/**/
X?H:.
X?LINT:set d_<FUNCTION>
X: see if <FUNCTION> exists
Xset <FUNCTION> d_<FUNCTION>
Xeval $inlibc
X
END_OF_FILE
  if test 1013 -ne `wc -c <'mcon/files/d_function.U'`; then
    echo shar: \"'mcon/files/d_function.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/files/d_function.U'
fi
if test -f 'pat/patchlevel.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'pat/patchlevel.h'\"
else
  echo shar: Extracting \"'pat/patchlevel.h'\" \(1052 characters\)
  sed "s/^X//" >'pat/patchlevel.h' <<'END_OF_FILE'
X/*
X * This is a prototypical patchlevel.h file. Only the line defining
X * the PATCHLEVEL symbol is taken into account when patching, so be
X * sure to make changes to this file ONLY when you start a new release
X * and, of course, before running patcil...
X *
X * This file must appear in your MANIFEST.new, but it will never be
X * checked in by the pat tools. It is automatically updated when a new
X * patch is issued.
X *
X * When using the '-n' option in some pat* scripts, this file is
X * taken as a timestamp. So it is best to avoid manual editing unless
X * you know what you are doing.
X */
X
X/*
X * $Id: patchlevel.h,v 3.0 1993/08/18 12:10:39 ram Exp $
X *
X *  Copyright (c) 1991, Raphael Manfredi
X *
X *  You may redistribute only under the terms of the GNU General Public
X *  Licence as specified in the README file that comes with dist.
X *
X * $Log: patchlevel.h,v $
X * Revision 3.0  1993/08/18  12:10:39  ram
X * Baseline for dist 3.0 netwide release.
X *
X */
X
X#define VERSION 3.0			/* For instance */
X#define PATCHLEVEL 0		/* This line is a mandatory */
END_OF_FILE
  if test 1052 -ne `wc -c <'pat/patchlevel.h'`; then
    echo shar: \"'pat/patchlevel.h'\" unpacked with wrong size!
  fi
  # end of 'pat/patchlevel.h'
fi
echo shar: End of archive 26 \(of 28\).
cp /dev/null ark26isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 28 archives.
    echo "Please run PACKNOTES through sh, read REAMDE and then type Configure."
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0

exit 0 # Just in case...
