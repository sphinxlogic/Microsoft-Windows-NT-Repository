Newsgroups: comp.sources.misc
From: Raphael Manfredi <ram@acri.fr>
Subject: v39i017:  dist-3.0 - Configure script generator and related tools, Part13/28
Message-ID: <1993Aug19.131241.5446@sparky.sterling.com>
X-Md4-Signature: a2d58435cac610e92732f61f74a39b43
Sender: kent@sparky.sterling.com (Kent Landfield)
Organization: Advanced Computer Research Institute, Lyon, France.
Date: Thu, 19 Aug 1993 13:12:41 GMT
Approved: kent@sparky.sterling.com

Submitted-by: Raphael Manfredi <ram@acri.fr>
Posting-number: Volume 39, Issue 17
Archive-name: dist-3.0/part13
Environment: UNIX, Perl, RCS

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# Contents:  kit/Makefile.SH lib/Makefile.SH lib/makedepend.sh
#   mcon/U/Options.U mcon/U/cppstdin.U mcon/U/i_time.U
#   mcon/U/voidflags.U mcon/man/mxref.SH mcon/mconfig.SH
#   pat/Makefile.SH pat/patclean.SH
# Wrapped by ram@soft208 on Wed Aug 18 14:42:21 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 13 (of 28)."'
if test -f 'kit/Makefile.SH' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'kit/Makefile.SH'\"
else
  echo shar: Extracting \"'kit/Makefile.SH'\" \(4624 characters\)
  sed "s/^X//" >'kit/Makefile.SH' <<'END_OF_FILE'
X: Makefile.SH generated from Jmake.tmpl and Jmakefile [jmake 3.0 PL0]
X: $X-Id: Jmake.tmpl,v 2.8.1.2 91/11/18 13:22:54 ram Exp $
X
Xcase $CONFIG in
X'')
X	if test -f config.sh; then TOP=.;
X	elif test -f ../config.sh; then TOP=..;
X	elif test -f ../../config.sh; then TOP=../..;
X	elif test -f ../../../config.sh; then TOP=../../..;
X	elif test -f ../../../../config.sh; then TOP=../../../..;
X	else
X		(echo "Can't find config.sh."; exit 1)
X	fi
X	. $TOP/config.sh
X	;;
Xesac
Xcase "$0" in
X*/*) cd `expr X$0 : 'X\(.*\)/'` ;;
Xesac
XCURRENT=kit
XDIR=`echo $CURRENT/ | sed -e 's/\.\///g'`
Xecho "Extracting ${DIR}Makefile (with variable substitutions)"
XDATE=`date`
X$spitshell >Makefile <<!GROK!THIS!
X########################################################################
X# Makefile generated from Makefile.SH on $DATE
X
XSHELL = /bin/sh
XJMAKE = jmake
XTOP = ..
XCURRENT = $CURRENT
XDIR = $DIR
XINSTALL = ../install
X
X########################################################################
X# Parameters set by Configure -- edit config.sh if changes are needed
X
XCTAGS = ctags
XL = $manext
XMANSRC = $installmansrc
XMAKE = make
XMV = $mv
XRM = $rm -f
XSCRIPTDIR = $installscript
X
X########################################################################
X# Automatically generated parameters -- do not edit
X
XSCRIPTS =  \$(SCRIPT_SH)
X
X!GROK!THIS!
X$spitshell >>Makefile <<'!NO!SUBS!'
X########################################################################
X# Jmake rules for building libraries, programs, scripts, and data files
X# $X-Id: Jmake.rules,v 2.8.1.4 91/11/18 13:19:07 ram Exp $
X
X########################################################################
X# Start of Jmakefile
X
X# $X-Id: Jmakefile,v 2.8 91/07/08 13:27:57 ram Exp $
X#
X#  Copyright (c) 1991-1993, Raphael Manfredi
X#  
X#  You may redistribute only under the terms of the Artistic Licence,
X#  as specified in the README file that comes with the distribution.
X#  You may reuse parts of this distribution only within the terms of
X#  that same Artistic Licence; a copy of which may be found at the root
X#  of the source tree for dist 3.0.
X#
X# $X-Log:	Jmakefile,v $
X# Revision 2.8  91/07/08  13:27:57  ram
X# 3.0 alpha baseline.
X#
X
XSCRIPT_SH = makedist manifake kitsend
X
Xall:: $(SCRIPT_SH)
X
Xlocal_realclean::
X	$(RM) $(SCRIPT_SH)
X
Xmakedist: makedist.SH
X	/bin/sh makedist.SH
X
Xmanifake: manifake.SH
X	/bin/sh manifake.SH
X
Xkitsend: kitsend.SH
X	/bin/sh kitsend.SH
X
X
Xinstall:: $(SCRIPTS) $(LSCRIPTS)
X	@for file in $(SCRIPTS) $(LSCRIPTS); do \
X		case '${MFLAGS}' in *[i]*) set +e;; esac; \
X		(set -x; $(INSTALL) -c -m 555 $$file $(SCRIPTDIR)); \
X	done
X
Xdeinstall::
X	@for file in $(SCRIPTS) $(LSCRIPTS); do \
X		case '${MFLAGS}' in *[i]*) set +e;; esac; \
X		(set -x; $(RM) $(SCRIPTDIR)/$$file); \
X	done
X
Xinstall.man::
X	@if test "$(MANSRC)"; then \
X		case '${MFLAGS}' in *[i]*) set +e;; esac; \
X		for file in $(SCRIPTS); do \
X			(set -x; \
X			$(INSTALL) -c -m 444 $$file.man $(MANSRC)/$$file.$(L)); \
X		done; \
X	else exit 0; fi
X
Xdeinstall.man::
X	@if test "$(MANSRC)"; then \
X		case '${MFLAGS}' in *[i]*) set +e;; esac; \
X		for file in $(SCRIPTS); do \
X			(set -x; $(RM) $(MANSRC)/$$file.$(L)); \
X		done; \
X	else exit 0; fi
X
Xinstall:: makeSH
X	$(INSTALL) -c -m 555  makeSH $(SCRIPTDIR)
X
Xdeinstall::
X	$(RM) $(SCRIPTDIR)/makeSH
X
Xinstall.man:: makeSH.man
X	$(INSTALL) -c -m 444 makeSH.man $(MANSRC)/makeSH.$(L)
X
Xdeinstall.man::
X	$(RM) $(MANSRC)/makeSH.$(L)
X
X########################################################################
X# Common rules for all Makefiles -- do not edit
X
Xemptyrule::
X
Xclean: local_clean
Xrealclean: local_realclean
Xclobber: local_clobber
X
Xlocal_clean::
X	$(RM) core *~ *.o
X
Xlocal_realclean:: local_clean
X
Xlocal_clobber:: local_realclean
X	$(RM) Makefile config.sh
X
XMakefile.SH: Jmakefile
X	-@if test -f $(TOP)/.package; then \
X		if test -f Makefile.SH; then \
X			echo "	$(RM) Makefile.SH~; $(MV) Makefile.SH Makefile.SH~"; \
X			$(RM) Makefile.SH~; $(MV) Makefile.SH Makefile.SH~; \
X		fi; \
X		echo "	$(JMAKE) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT)" ; \
X		$(JMAKE) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT) ; \
X	else touch $@; exit 0; fi
X
XMakefile: Makefile.SH
X	/bin/sh Makefile.SH
X
Xtags::
X	$(CTAGS) -w *.[ch]
X	$(CTAGS) -xw *.[ch] > tags
X
Xlocal_clobber::
X	$(RM) tags
X
X########################################################################
X# Empty rules for directories with no sub-directories -- do not edit
X
Xinstall::
X	@echo "install in $(CURRENT) done."
X
Xdeinstall::
X	@echo "deinstall in $(CURRENT) done."
X
Xinstall.man::
X	@echo "install.man in $(CURRENT) done."
X
Xdeinstall.man::
X	@echo "deinstall.man in $(CURRENT) done."
X
XMakefiles::
X
XMakefiles.SH::
X
X!NO!SUBS!
Xchmod 644 Makefile
X$eunicefix Makefile
X
END_OF_FILE
  if test 4624 -ne `wc -c <'kit/Makefile.SH'`; then
    echo shar: \"'kit/Makefile.SH'\" unpacked with wrong size!
  fi
  # end of 'kit/Makefile.SH'
fi
if test -f 'lib/Makefile.SH' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lib/Makefile.SH'\"
else
  echo shar: Extracting \"'lib/Makefile.SH'\" \(4431 characters\)
  sed "s/^X//" >'lib/Makefile.SH' <<'END_OF_FILE'
X: Makefile.SH generated from Jmake.tmpl and Jmakefile [jmake 3.0 PL0]
X: $X-Id: Jmake.tmpl,v 2.8.1.2 91/11/18 13:22:54 ram Exp $
X
Xcase $CONFIG in
X'')
X	if test -f config.sh; then TOP=.;
X	elif test -f ../config.sh; then TOP=..;
X	elif test -f ../../config.sh; then TOP=../..;
X	elif test -f ../../../config.sh; then TOP=../../..;
X	elif test -f ../../../../config.sh; then TOP=../../../..;
X	else
X		(echo "Can't find config.sh."; exit 1)
X	fi
X	. $TOP/config.sh
X	;;
Xesac
Xcase "$0" in
X*/*) cd `expr X$0 : 'X\(.*\)/'` ;;
Xesac
XCURRENT=lib
XDIR=`echo $CURRENT/ | sed -e 's/\.\///g'`
Xecho "Extracting ${DIR}Makefile (with variable substitutions)"
XDATE=`date`
X$spitshell >Makefile <<!GROK!THIS!
X########################################################################
X# Makefile generated from Makefile.SH on $DATE
X
XSHELL = /bin/sh
XJMAKE = jmake
XTOP = ..
XCURRENT = $CURRENT
XDIR = $DIR
XINSTALL = ../install
X
X########################################################################
X# Parameters set by Configure -- edit config.sh if changes are needed
X
XCTAGS = ctags
XMAKE = make
XMV = $mv
XPRIVLIB = $installprivlib
XRM = $rm -f
X
X!GROK!THIS!
X$spitshell >>Makefile <<'!NO!SUBS!'
X########################################################################
X# Jmake rules for building libraries, programs, scripts, and data files
X# $X-Id: Jmake.rules,v 2.8.1.4 91/11/18 13:19:07 ram Exp $
X
X########################################################################
X# Start of Jmakefile
X
X# $X-Id: Jmakefile,v 2.8.1.1 91/10/18 10:09:07 ram Exp $
X#
X#  Copyright (c) 1991-1993, Raphael Manfredi
X#  
X#  You may redistribute only under the terms of the Artistic Licence,
X#  as specified in the README file that comes with the distribution.
X#  You may reuse parts of this distribution only within the terms of
X#  that same Artistic Licence; a copy of which may be found at the root
X#  of the source tree for dist 3.0.
X#
X# $X-Log:	Jmakefile,v $
X
XFILES = errnolist.a errnolist.mk
XFILES_SH = errnolist makedepend makedir
X
XINSTALLFLAGS = -m 444
X
Xall::
X
Xinstall::
X	@for dir in $(PRIVLIB)/lib; do \
X		case '${MFLAGS}' in *[i]*) set +e;; esac; \
X		(set -x; $(INSTALL) -d $$dir); \
X	done
X
Xinstall:: $(FILES)
X	@case '${MFLAGS}' in *[i]*) set +e;; esac; \
X	for i in $(FILES); do \
X		(set -x; $(INSTALL) -c $(INSTALLFLAGS) $$i $(PRIVLIB)/lib); \
X	done
X
Xdeinstall::
X	@case '${MFLAGS}' in *[i]*) set +e;; esac; \
X	for i in $(FILES); do \
X		(set -x; $(RM) $(PRIVLIB)/lib/$$i); \
X	done
X
X
Xinstall:: errnolist.sh
X	@case '${MFLAGS}' in *[i]*) set +e;; esac; \
X	(set -x; $(INSTALL) -c -m 444 errnolist.sh $(PRIVLIB)/lib/errnolist.SH)
X
Xdeinstall::
X	@case '${MFLAGS}' in *[i]*) set +e;; esac; \
X	(set -x; $(RM) $(PRIVLIB)/lib/errnolist.SH)
X
Xinstall:: makedepend.sh
X	@case '${MFLAGS}' in *[i]*) set +e;; esac; \
X	(set -x; $(INSTALL) -c -m 444 makedepend.sh $(PRIVLIB)/lib/makedepend.SH)
X
Xdeinstall::
X	@case '${MFLAGS}' in *[i]*) set +e;; esac; \
X	(set -x; $(RM) $(PRIVLIB)/lib/makedepend.SH)
X
Xinstall:: makedir.sh
X	@case '${MFLAGS}' in *[i]*) set +e;; esac; \
X	(set -x; $(INSTALL) -c -m 444 makedir.sh $(PRIVLIB)/lib/makedir.SH)
X
Xdeinstall::
X	@case '${MFLAGS}' in *[i]*) set +e;; esac; \
X	(set -x; $(RM) $(PRIVLIB)/lib/makedir.SH)
X
X########################################################################
X# Common rules for all Makefiles -- do not edit
X
Xemptyrule::
X
Xclean: local_clean
Xrealclean: local_realclean
Xclobber: local_clobber
X
Xlocal_clean::
X	$(RM) core *~ *.o
X
Xlocal_realclean:: local_clean
X
Xlocal_clobber:: local_realclean
X	$(RM) Makefile config.sh
X
XMakefile.SH: Jmakefile
X	-@if test -f $(TOP)/.package; then \
X		if test -f Makefile.SH; then \
X			echo "	$(RM) Makefile.SH~; $(MV) Makefile.SH Makefile.SH~"; \
X			$(RM) Makefile.SH~; $(MV) Makefile.SH Makefile.SH~; \
X		fi; \
X		echo "	$(JMAKE) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT)" ; \
X		$(JMAKE) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT) ; \
X	else touch $@; exit 0; fi
X
XMakefile: Makefile.SH
X	/bin/sh Makefile.SH
X
Xtags::
X	$(CTAGS) -w *.[ch]
X	$(CTAGS) -xw *.[ch] > tags
X
Xlocal_clobber::
X	$(RM) tags
X
X########################################################################
X# Empty rules for directories with no sub-directories -- do not edit
X
Xinstall::
X	@echo "install in $(CURRENT) done."
X
Xdeinstall::
X	@echo "deinstall in $(CURRENT) done."
X
Xinstall.man::
X	@echo "install.man in $(CURRENT) done."
X
Xdeinstall.man::
X	@echo "deinstall.man in $(CURRENT) done."
X
XMakefiles::
X
XMakefiles.SH::
X
X!NO!SUBS!
Xchmod 644 Makefile
X$eunicefix Makefile
X
END_OF_FILE
  if test 4431 -ne `wc -c <'lib/Makefile.SH'`; then
    echo shar: \"'lib/Makefile.SH'\" unpacked with wrong size!
  fi
  # end of 'lib/Makefile.SH'
fi
if test -f 'lib/makedepend.sh' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lib/makedepend.sh'\"
else
  echo shar: Extracting \"'lib/makedepend.sh'\" \(4541 characters\)
  sed "s/^X//" >'lib/makedepend.sh' <<'END_OF_FILE'
Xcase $CONFIG in
X'')
X	if test ! -f config.sh; then
X		ln ../config.sh . || \
X		ln ../../config.sh . || \
X		ln ../../../config.sh . || \
X		ln ../../../../config.sh . || \
X		(echo "Can't find config.sh."; exit 1)
X	fi 2>/dev/null
X	. ./config.sh
X	;;
Xesac
Xcase "$0" in
X*/*) cd `expr X$0 : 'X\(.*\)/'` ;;
Xesac
Xecho "Extracting makedepend (with variable substitutions)"
X$spitshell >makedepend <<!GROK!THIS!
X$startsh
X# $Id: makedepend.sh,v 3.0 1993/08/18 12:04:37 ram Exp $
X#
X#  Copyright (c) 1991-1993, Raphael Manfredi
X#  
X#  You may redistribute only under the terms of the Artistic Licence,
X#  as specified in the README file that comes with the distribution.
X#  You may reuse parts of this distribution only within the terms of
X#  that same Artistic Licence; a copy of which may be found at the root
X#  of the source tree for dist 3.0.
X#
X# Original Author: Larry Wall <lwall@netlabs.com>
X#
X# $Log: makedepend.sh,v $
X# Revision 3.0  1993/08/18  12:04:37  ram
X# Baseline for dist 3.0 netwide release.
X#
X
Xexport PATH || (echo "OOPS, this isn't sh.  Desperation time.  I will feed myself to sh."; sh \$0; kill \$\$)
X
Xcat='$cat'
Xcppflags='$cppflags'
Xcp='$cp'
Xcpp='$cppstdin'
Xecho='$echo'
Xegrep='$egrep'
Xexpr='$expr'
Xmv='$mv'
Xrm='$rm'
Xsed='$sed'
Xsort='$sort'
Xtest='$test'
Xtr='$tr'
Xuniq='$uniq'
X!GROK!THIS!
X
X$spitshell >>makedepend <<'!NO!SUBS!'
X
X$cat /dev/null >.deptmp
X$rm -f *.c.c c/*.c.c
Xif test -f Makefile; then
X    mf=Makefile
Xelse
X    mf=makefile
Xfi
Xif test -f $mf; then
X    defrule=`<$mf sed -n		\
X	-e '/^\.c\.o:.*;/{'		\
X	-e    's/\$\*\.c//'		\
X	-e    's/^[^;]*;[	 ]*//p'	\
X	-e    q				\
X	-e '}'				\
X	-e '/^\.c\.o: *$/{'		\
X	-e    N				\
X	-e    's/\$\*\.c//'		\
X	-e    's/^.*\n[	 ]*//p'		\
X	-e    q				\
X	-e '}'`
Xfi
Xcase "$defrule" in
X'') defrule='$(CC) -c $(CFLAGS)' ;;
Xesac
X
Xmake clist || ($echo "Searching for .c files..."; \
X	$echo *.c | $tr ' ' '\012' | $egrep -v '\*' >.clist)
Xgotnone=true
Xfor file in `$cat .clist`; do
X# for file in `cat /dev/null`; do
X    case "$file" in
X    *.c) filebase=`basename $file .c` ;;
X    *.y) filebase=`basename $file .c` ;;
X    '')  continue ;;
X    esac
X    gotnone=false
X    $echo "Finding dependencies for $filebase.o."
X    $sed -n <$file >$file.c \
X	-e "/^${filebase}_init(/q" \
X	-e '/^#/{' \
X	-e 's|/\*.*$||' \
X	-e 's|\\$||' \
X	-e p \
X	-e '}'
X    $cpp -I/usr/local/include -I. $cppflags $file.c | \
X    $sed \
X	-e '/^# *[0-9]/!d' \
X	-e 's/^.*"\(.*\)".*$/'$filebase'.o: \1/' \
X	-e 's|: \./|: |' \
X	-e 's|\.c\.c|.c|' | \
X    $uniq | $sort | $uniq >> .deptmp
Xdone
X
X$sed <Makefile >Makefile.new -e '1,/^# AUTOMATICALLY/!d'
X
Xmake shlist || ($echo "Searching for .SH files..."; \
X	$echo *.SH | $tr ' ' '\012' | $egrep -v '\*' >.shlist)
Xif $gotnone || $test -s .deptmp; then
X    for file in `cat .shlist`; do
X	$echo `$expr X$file : 'X\(.*\).SH`: $file config.sh \; \
X	    /bin/sh $file >> .deptmp
X    done
X    $echo "Updating Makefile..."
X    $echo "# If this runs make out of memory, delete /usr/include lines." \
X	>> Makefile.new
X    $sed 's|^\(.*\.o:\) *\(.*/.*\.c\) *$|\1 \2; '"$defrule \2|" .deptmp \
X       >>Makefile.new
Xelse
X    make hlist || ($echo "Searching for .h files..."; \
X	$echo *.h | $tr ' ' '\012' | $egrep -v '\*' >.hlist)
X    $echo "You don't seem to have a proper C preprocessor.  Using grep instead."
X    $egrep '^#include ' `cat .clist` `cat .hlist`  >.deptmp
X    $echo "Updating Makefile..."
X    <.clist $sed -n							\
X	-e '/\//{'							\
X	-e   's|^\(.*\)/\(.*\)\.c|\2.o: \1/\2.c; '"$defrule \1/\2.c|p"	\
X	-e   d								\
X	-e '}'								\
X	-e 's|^\(.*\)\.c|\1.o: \1.c|p' >> Makefile.new
X    <.hlist $sed -n 's|\(.*/\)\(.*\)|s= \2= \1\2=|p' >.hsed
X    <.deptmp $sed -n 's|c:#include "\(.*\)".*$|o: \1|p' | \
X       $sed 's|^[^;]*/||' | \
X       $sed -f .hsed >> Makefile.new
X    <.deptmp $sed -n 's|c:#include <\(.*\)>.*$|o: /usr/include/\1|p' \
X       >> Makefile.new
X    <.deptmp $sed -n 's|h:#include "\(.*\)".*$|h: \1|p' | \
X       $sed -f .hsed >> Makefile.new
X    <.deptmp $sed -n 's|h:#include <\(.*\)>.*$|h: /usr/include/\1|p' \
X       >> Makefile.new
X    for file in `$cat .shlist`; do
X	$echo `$expr X$file : 'X\(.*\).SH`: $file config.sh \; \
X	    /bin/sh $file >> Makefile.new
X    done
Xfi
X$rm -f Makefile.old
X$cp Makefile Makefile.old
X$cp Makefile.new Makefile
X$rm Makefile.new
X$echo "# WARNING: Put nothing here or make depend will gobble it up!" >> Makefile
X$rm -f .deptmp `sed 's/\.c/.c.c/' .clist` .shlist .clist .hlist .hsed
X
X!NO!SUBS!
X$eunicefix makedepend
Xchmod +x makedepend
Xcase `pwd` in
X*SH)
X    $rm -f ../makedepend
X    ln makedepend ../makedepend
X    ;;
Xesac
END_OF_FILE
  if test 4541 -ne `wc -c <'lib/makedepend.sh'`; then
    echo shar: \"'lib/makedepend.sh'\" unpacked with wrong size!
  fi
  # end of 'lib/makedepend.sh'
fi
if test -f 'mcon/U/Options.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/Options.U'\"
else
  echo shar: Extracting \"'mcon/U/Options.U'\" \(4557 characters\)
  sed "s/^X//" >'mcon/U/Options.U' <<'END_OF_FILE'
X?RCS: $Id: Options.U,v 3.0 1993/08/18 12:05:14 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: Options.U,v $
X?RCS: Revision 3.0  1993/08/18  12:05:14  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?X:
X?X: Command line parsing. It is really important that the variables used here
X?X:	be not listed in the MAKE line, or they will be saved in config.sh and
X?X: loading this file to fetch default answers would clobber the values set
X?X:	herein.
X?X:
X?MAKE:Options: Extract
X?MAKE:	-pick wipe $@ %<
X?V:reuseval config_sh alldone error silent extractsh fastread:
X?T:arg config
X: produce awk script to parse command line options
Xcat >options.awk <<'EOF'
XBEGIN {
X	optstr = "deEf:hrsSV";	# getopt-style specification
X
X	len = length(optstr);
X	for (i = 1; i <= len; i++) {
X		c = substr(optstr, i, 1);
X?X: some older awk's do not have the C ?: construct
X		if (i < len) a = substr(optstr, i + 1, 1); else a = "";
X		if (a == ":") {
X			arg[c] = 1;
X			i++;
X		}
X		opt[c] = 1;
X	}
X}
X{
X	expect = 0;
X	str = $0;
X	if (substr(str, 1, 1) != "-") {
X		printf("'%s'\n", str);
X		next;
X	}
X	len = length($0);
X	for (i = 2; i <= len; i++) {
X		c = substr(str, i, 1);
X		if (!opt[c]) {
X			printf("-%s\n", substr(str, i));
X			next;
X		}
X		printf("-%s\n", c);
X		if (arg[c]) {
X			if (i < len)
X				printf("'%s'\n", substr(str, i + 1));
X			else
X				expect = 1;
X			next;
X		}
X	}
X}
XEND {
X	if (expect)
X		print "?";
X}
XEOF
X
X: process the command line options
X?X: Use "$@" to keep arguments with spaces in them from being split apart.
X?X: For the same reason, awk will output quoted arguments and the final eval
X?X: removes them and sets a proper $* array.
X?X: BEWARE: if a -n option is added, the following will not work with BSD
X?X: echo (since it would be seen as 'echo -n' by the shell). In that case
X?X: the trick will be to stuff an 'x' in front of each argument, then strip
X?X: it within awk.
Xset X `for arg in "$@"; do echo $arg; done | awk -f options.awk`
Xeval "set $*"
Xshift
Xrm -f options.awk
X
X: set up default values
Xfastread=''
Xreuseval=false
Xconfig_sh=''
Xalldone=''
Xerror=''
Xsilent=''
Xextractsh=''
X
X: option parsing
Xwhile test $# -gt 0; do
X	case "$1" in
X	-d) shift; fastread=yes;;
X	-e) shift; alldone=cont;;
X	-f)
X		shift
X		cd ..
X		if test -r "$1"; then
X			config_sh="$1"
X		else
X			echo "Configure: cannot read config file $1." >&2
X			error=true
X		fi
X		cd UU
X		shift;;
X	-h) shift; error=true;;
X	-r) shift; reuseval=true;;
X	-s) shift; silent=true;;
X	-E) shift; alldone=exit;;
X	-S) shift; extractsh=true;;
X	-V) echo "Configure generated by metaconfig <VERSION> PL<PATCHLEVEL>." >&2
X		exit 0;;
X	--) break;;
X	-*) echo "Configure: unknown option $1" >&2; shift; error=true;;
X	*) break;;
X	esac
Xdone
X
Xcase "$error" in
Xtrue)
X	cat >&2 <<EOM
XUsage: Configure [-dehrESV] [-f config.sh]
X  -d : use defaults for all answers.
X  -e : go on without questioning past the production of config.sh.
X  -f : specify an alternate default configuration file.
X  -h : print this help message and exit (with an error status).
X  -r : reuse C symbols value if possible (skips costly nm extraction).
X  -s : silent mode, only echoes questions and essential information.
X  -E : stop at the end of questions, after having produced config.sh.
X  -S : perform variable substitutions on all .SH files (can mix with -f)
X  -V : print version number and exit (with a zero status).
XEOM
X	exit 1
X	;;
Xesac
X
X?X: In silent mode, the standard output is closed. Questions are asked by
X?X: outputing on file descriptor #4, which is the original stdout descriptor.
X?X: This filters out all the "junk", since all the needed information is written
X?X: on #4. Note that ksh will not let us redirect output if the file descriptor
X?X: has not be defined yet, unlike sh, hence the following line...--RAM.
Xexec 4>&1
Xcase "$silent" in
Xtrue) exec 1>/dev/null;;
Xesac
X
X?X: If extraction has been requested, load the configuration file, perform
X?X: the extraction and exit.
Xcase "$extractsh" in
Xtrue)
X	case "$config_sh" in
X	'') config_sh='config.sh'; config='./config.sh';;
X	/*) config="$config_sh";;
X	*) config="./$config_sh";;
X	esac
X	echo " "
X	echo "Fetching answers from $config_sh..."
X	cd ..
X	. $config
X	echo " "
X	. ./UU/extract
X	rm -rf UU
X	echo "Done."
X	exit 0
X	;;
Xesac
X
END_OF_FILE
  if test 4557 -ne `wc -c <'mcon/U/Options.U'`; then
    echo shar: \"'mcon/U/Options.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/Options.U'
fi
if test -f 'mcon/U/cppstdin.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/cppstdin.U'\"
else
  echo shar: Extracting \"'mcon/U/cppstdin.U'\" \(4421 characters\)
  sed "s/^X//" >'mcon/U/cppstdin.U' <<'END_OF_FILE'
X?RCS: $Id: cppstdin.U,v 3.0 1993/08/18 12:05:38 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: cppstdin.U,v $
X?RCS: Revision 3.0  1993/08/18  12:05:38  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:cppstdin cppminus: contains test Myread Oldconfig Loc cpp cc rm
X?MAKE:	-pick add $@ %<
X?S:cppstdin:
X?S:	This variable contains the command which will invoke the C
X?S:	preprocessor on standard input and put the output to stdout.
X?S:	It is primarily used by other Configure units that ask about
X?S:	preprocessor symbols.
X?S:.
X?S:cppminus:
X?S:	This variable contains the second part of the string which will invoke
X?S:	the C preprocessor on the standard input and produce to standard
X?S:	output.  This variable will have the value "-" if cppstdin needs a minus
X?S:	to specify standard input, otherwise the value is "".
X?S:.
X?C:CPPSTDIN:
X?C:	This symbol contains the first part of the string which will invoke
X?C:	the C preprocessor on the standard input and produce to standard
X?C:	output.	 Typical value of "cc -E" or "/lib/cpp".
X?C:.
X?C:CPPMINUS:
X?C:	This symbol contains the second part of the string which will invoke
X?C:	the C preprocessor on the standard input and produce to standard
X?C:	output.  This symbol will have the value "-" if CPPSTDIN needs a minus
X?C:	to specify standard input, otherwise the value is "".
X?C:.
X?H:#define CPPSTDIN "$cppstdin"
X?H:#define CPPMINUS "$cppminus"
X?H:.
X?T:wrapper
X: see how we invoke the C preprocessor
Xecho " "
Xecho "Now, how can we feed standard input to your C preprocessor..." >&4
Xcat <<'EOT' >testcpp.c
X#define ABC abc
X#define XYZ xyz
XABC.XYZ
XEOT
Xcd ..
Xecho 'cat >.$$.c; '"$cc"' -E ${1+"$@"} .$$.c; rm .$$.c' >cppstdin
Xchmod 755 cppstdin
Xwrapper=`pwd`/cppstdin
Xcd UU
Xif $test "X$cppstdin" != "X" && \
X	$cppstdin $cppminus <testcpp.c >testcpp.out 2>&1 && \
X	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
X	echo "You used to use $cppstdin $cppminus so we'll use that again."
Xelif $test "$cc" = gcc && \
X	(echo "Using gcc, eh?  We'll try to force gcc -E using a wrapper..."; \
X	$wrapper <testcpp.c >testcpp.out 2>&1; \
X	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1) ; then
X	echo "Yup, we can."
X	cppstdin="$wrapper"
X	cppminus='';
Xelif echo 'Maybe "'"$cc"' -E" will work...'; \
X	$cc -E <testcpp.c >testcpp.out 2>&1; \
X	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
X	echo "Yup, it does."
X	cppstdin="$cc -E"
X	cppminus='';
Xelif echo 'Nope...maybe "'"$cc"' -E -" will work...'; \
X	$cc -E - <testcpp.c >testcpp.out 2>&1; \
X	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
X	echo "Yup, it does."
X	cppstdin="$cc -E"
X	cppminus='-';
Xelif echo 'No such luck, maybe "'$cpp'" will work...'; \
X	$cpp <testcpp.c >testcpp.out 2>&1; \
X	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
X	echo "It works!"
X	cppstdin="$cpp"
X	cppminus='';
Xelif echo 'Nixed again...maybe "'$cpp' -" will work...'; \
X	$cpp - <testcpp.c >testcpp.out 2>&1; \
X	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
X	echo "Hooray, it works!  I was beginning to wonder."
X	cppstdin="$cpp"
X	cppminus='-';
Xelif echo 'Nope...maybe "'"$cc"' -P" will work...'; \
X	$cc -P <testcpp.c >testcpp.out 2>&1; \
X	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
X	echo "Yipee, that works!"
X	cppstdin="$cc -P"
X	cppminus='';
Xelif echo 'Nope...maybe "'"$cc"' -P -" will work...'; \
X	$cc -P - <testcpp.c >testcpp.out 2>&1; \
X	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
X	echo "At long last!"
X	cppstdin="$cc -P"
X	cppminus='-';
Xelif echo 'Uh-uh.  Time to get fancy.  Trying a wrapper...'; \
X	$wrapper <testcpp.c >testcpp.out 2>&1; \
X	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
X	cppstdin="$wrapper"
X	cppminus=''
X	echo "Eureka!"
Xelse
X	dflt=''
X	rp="No dice.  I can't find a C preprocessor.  Name one:"
X	. ./myread
X	cppstdin="$ans"
X	$cppstdin <testcpp.c >testcpp.out 2>&1
X	if $contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
X		echo "OK, that will do." >&4
X	else
Xecho "Sorry, I can't get that to work.  Go find one and rerun Configure." >&4
X		exit 1
X	fi
Xfi
X$rm -f testcpp.c testcpp.out
X
END_OF_FILE
  if test 4421 -ne `wc -c <'mcon/U/cppstdin.U'`; then
    echo shar: \"'mcon/U/cppstdin.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/cppstdin.U'
fi
if test -f 'mcon/U/i_time.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/i_time.U'\"
else
  echo shar: Extracting \"'mcon/U/i_time.U'\" \(4460 characters\)
  sed "s/^X//" >'mcon/U/i_time.U' <<'END_OF_FILE'
X?RCS: $Id: i_time.U,v 3.0 1993/08/18 12:08:45 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: i_time.U,v $
X?RCS: Revision 3.0  1993/08/18  12:08:45  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?X:
X?X: This unit finds which "time" include to use. If 'timezone' is used by the
X?X: program, we also try to find which header should be included. Eventually,
X?X: we look for <sys/select.h> if I_SYSSELECT is used, to get struct timeval.
X?X:
X?MAKE:i_time i_systime i_systimek timeincl: cat cc ccflags contains rm \
X	echo n c +i_sysselct Findhdr
X?MAKE:	-pick add $@ %<
X?S:i_time:
X?S:	This variable conditionally defines I_TIME, which indicates
X?S:	to the C program that it should include <time.h>.
X?S:.
X?S:i_systime:
X?S:	This variable conditionally defines I_SYS_TIME, which indicates
X?S:	to the C program that it should include <sys/time.h>.
X?S:.
X?S:i_systimek:
X?S:	This variable conditionally defines I_SYS_TIME_KERNEL, which
X?S:	indicates to the C program that it should include <sys/time.h>
X?S:	with KERNEL defined.
X?S:.
X?S:timeincl:
X?S:	This variable holds the full path of the included time header(s).
X?S:.
X?C:I_TIME (USE_TIME_H):
X?C:	This symbol, if defined, indicates to the C program that it should
X?C:	include <time.h>.
X?C:.
X?C:I_SYS_TIME (I_SYSTIME USE_SYS_TIME_H NO_TIME_WITH_SYS_TIME):
X?C:	This symbol, if defined, indicates to the C program that it should
X?C:	include <sys/time.h>.
X?C:.
X?C:I_SYS_TIME_KERNEL (I_SYSTIMEKERNEL):
X?C:	This symbol, if defined, indicates to the C program that it should
X?C:	include <sys/time.h> with KERNEL defined.
X?C:.
X?H:#$i_time I_TIME		/**/
X?H:#$i_systime I_SYS_TIME		/**/
X?H:#$i_systimek I_SYS_TIME_KERNEL		/**/
X?H:.
X?W::timezone
X?T:xselect flags sysselect s_timeval s_timezone
X?LINT:change i_sysselct
X: see if we should include time.h, sys/time.h, or both
Xecho " "
Xecho "Testing to see if we should include <time.h>, <sys/time.h> or both." >&4
X$echo $n "I'm now running the test program...$c"
X$cat >try.c <<'EOCP'
X#include <sys/types.h>
X#ifdef I_TIME
X#include <time.h>
X#endif
X#ifdef I_SYSTIME
X#ifdef SYSTIMEKERNEL
X#define KERNEL
X#endif
X#include <sys/time.h>
X#endif
X#ifdef I_SYSSELECT
X#include <sys/select.h>
X#endif
Xmain()
X{
X	struct tm foo;
X#ifdef S_TIMEVAL
X	struct timeval bar;
X#endif
X#ifdef S_TIMEZONE
X	struct timezone tzp;
X#endif
X	if (foo.tm_sec == foo.tm_sec)
X		exit(0);
X#ifdef S_TIMEVAL
X	if (bar.tv_sec == bar.tv_sec)
X		exit(0);
X#endif
X	exit(1);
X}
XEOCP
Xflags=''
X@if I_SYSSELECT
Xif $contains 'timeval.*{' `./findhdr sys/select.h` >/dev/null 2>&1; then
X	xselect='-DI_SYSSELECT'
Xelse
X	xselect=''
Xfi
X@end
X@if timezone
Xfor s_timezone in '-DS_TIMEZONE' ''; do
X@else
Xs_timezone=''
X@end
X?X: Every package is given a try with 'struct timeval'
X@if I_SYSSELECT
Xfor sysselect in $xselect ''; do
X@else
Xsysselect=''
X@end
Xfor s_timeval in '-DS_TIMEVAL' ''; do
Xfor i_systimek in '' '-DSYSTIMEKERNEL'; do
Xfor i_time in '' '-DI_TIME'; do
Xfor i_systime in '-DI_SYSTIME' ''; do
X	case "$flags" in
X	'') $echo $n ".$c"
X		if $cc $ccflags \
X		$i_time $i_systime $i_systimek $sysselect $s_timeval $s_timezone \
X		try.c -o try >/dev/null 2>&1 ; then
X			set X $i_time $i_systime $i_systimek $sysselect $s_timeval
X			shift
X			flags="$*"
X			echo " "
X			$echo $n "Succeeded with $flags$c"
X		fi
X		;;
X	esac
Xdone
Xdone
Xdone
Xdone
X@if I_SYSSELECT
Xdone
X@end
X@if timezone
Xdone
X@end
Xtimeincl=''
Xecho " "
Xcase "$flags" in
X*SYSTIMEKERNEL*) i_systimek="$define"
X	timeincl=`./findhdr sys/time.h`
X	echo "We'll include <sys/time.h> with KERNEL defined." >&4;;
X*) i_systimek="$undef";;
Xesac
Xcase "$flags" in
X*I_TIME*) i_time="$define"
X	timeincl=`./findhdr time.h`" $timeincl"
X	echo "We'll include <time.h>." >&4;;
X*) i_time="$undef";;
Xesac
Xcase "$flags" in
X*I_SYSTIME*) i_systime="$define"
X	timeincl=`./findhdr sys/time.h`" $timeincl"
X	echo "We'll include <sys/time.h>." >&4;;
X*) i_systime="$undef";;
Xesac
X@if I_SYSSELECT
Xcase "$flags" in
X*I_SYSSELECT*) i_sysselct="$define"
X	timeincl=`./findhdr sys/select.h`" $timeincl"
X	echo "We'll also include <sys/select.h> to get struct timeval." >&4;;
X*) case "$i_sysselct" in
X	'') i_sysselct="$undef";;
X	esac
Xesac
X@end
X$rm -f try.c try
X
END_OF_FILE
  if test 4460 -ne `wc -c <'mcon/U/i_time.U'`; then
    echo shar: \"'mcon/U/i_time.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/i_time.U'
fi
if test -f 'mcon/U/voidflags.U' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/U/voidflags.U'\"
else
  echo shar: Extracting \"'mcon/U/voidflags.U'\" \(4493 characters\)
  sed "s/^X//" >'mcon/U/voidflags.U' <<'END_OF_FILE'
X?RCS: $Id: voidflags.U,v 3.0 1993/08/18 12:10:01 ram Exp $
X?RCS:
X?RCS: Copyright (c) 1991-1993, Raphael Manfredi
X?RCS: 
X?RCS: You may redistribute only under the terms of the Artistic Licence,
X?RCS: as specified in the README file that comes with the distribution.
X?RCS: You may reuse parts of this distribution only within the terms of
X?RCS: that same Artistic Licence; a copy of which may be found at the root
X?RCS: of the source tree for dist 3.0.
X?RCS:
X?RCS: $Log: voidflags.U,v $
X?RCS: Revision 3.0  1993/08/18  12:10:01  ram
X?RCS: Baseline for dist 3.0 netwide release.
X?RCS:
X?MAKE:voidflags defvoidused: cat rm contains cc package Oldconfig Myread
X?MAKE:	-pick add $@ %<
X?S:voidflags:
X?S:	This variable contains the eventual value of the VOIDFLAGS symbol,
X?S:	which indicates how much support of the void type is given by this
X?S:	compiler.  See VOIDFLAGS for more info.
X?S:.
X?X:	Exceptionally, we have to explicitely alias the symbol name for
X?X: config_h.SH, otherwise the comment would not appear.
X?C:VOIDFLAGS ~ %<:
X?C:	This symbol indicates how much support of the void type is given by this
X?C:	compiler.  What various bits mean:
X?C:
X?C:	    1 = supports declaration of void
X?C:	    2 = supports arrays of pointers to functions returning void
X?C:	    4 = supports comparisons between pointers to void functions and
X?C:		    addresses of void functions
X?C:	    8 = suports declaration of generic void pointers
X?C:
X?C:	The package designer should define VOIDUSED to indicate the requirements
X?C:	of the package.  This can be done either by #defining VOIDUSED before
X?C:	including config.h, or by defining defvoidused in Myinit.U.  If the
X?C:	latter approach is taken, only those flags will be tested.  If the
X?C:	level of void support necessary is not present, defines void to int.
X?C:.
X?H:?%<:#ifndef VOIDUSED
X?H:?%<:#define VOIDUSED $defvoidused
X?H:?%<:#endif
X?H:?%<:#define VOIDFLAGS $voidflags
X?H:?%<:#if (VOIDFLAGS & VOIDUSED) != VOIDUSED
X?H:?%<:#define void int		/* is void to be avoided? */
X?H:?%<:#define M_VOID			/* Xenix strikes again */
X?H:?%<:#endif
X?H:.
X?W:%<:void
X?INIT:: full support for void wanted by default
X?INIT:defvoidused=15
X?INIT:
X?LINT:describe defvoidused
X?LINT:known void M_VOID VOIDUSED
X: check for void type
Xecho " "
X$cat >&4 <<EOM
XChecking to see how well your C compiler groks the void type...
X
X  Support flag bits are:
X    1: basic void declarations.
X    2: arrays of pointers to functions returning void.
X    4: operations between pointers to and addresses of void functions.
X    8: generic void pointers.
X
XEOM
Xcase "$voidflags" in
X'')
X	$cat >try.c <<'EOCP'
X#if TRY & 1
Xvoid main() {
X#else
Xmain() {
X#endif
X	extern void moo();	/* function returning void */
X	void (*goo)();		/* ptr to func returning void */
X#if TRY & 8
X	void *hue;		/* generic ptr */
X#endif
X#if TRY & 2
X	void (*foo[10])();
X#endif
X
X#if TRY & 4
X	if(goo == moo) {
X		exit(0);
X	}
X#endif
X	exit(0);
X}
XEOCP
X?X: This unit used to use cc -S in those tests to try to speed up things, but
X?X: unfortunately, AIX 3.2 does not support this option.
X	if $cc -c -DTRY=$defvoidused try.c >.out 2>&1 ; then
X		voidflags=$defvoidused
X	echo "It appears to support void to the level $package wants ($defvoidused)."
X		if $contains warning .out >/dev/null 2>&1; then
X			echo "However, you might get some warnings that look like this:"
X			$cat .out
X		fi
X	else
Xecho "Hmm, your compiler has some difficulty with void. Checking further..." >&4
X		if $cc -c -DTRY=1 try.c >/dev/null 2>&1 ; then
X			echo "It supports 1..."
X			if $cc -c -DTRY=3 try.c >/dev/null 2>&1 ; then
X				echo "It also supports 2..."
X				if $cc -c -DTRY=7 try.c >/dev/null 2>&1 ; then
X					voidflags=7
X					echo "And it supports 4 but not 8 definitely."
X				else
X					echo "It doesn't support 4..."
X					if $cc -c -DTRY=11 try.c >/dev/null 2>&1 ; then
X						voidflags=11
X						echo "But it supports 8."
X					else
X						voidflags=3
X						echo "Neither does it support 8."
X					fi
X				fi
X			else
X				echo "It does not support 2..."
X				if $cc -c -DTRY=13 try.c >/dev/null 2>&1 ; then
X					voidflags=13
X					echo "But it supports 4 and 8."
X				else
X					if $cc -c -DTRY=5 try.c >/dev/null 2>&1 ; then
X						voidflags=5
X						echo "And it supports 4 but has not heard about 8."
X					else
X						echo "However it supports 8 but not 4."
X					fi
X				fi
X			fi
X		else
X			echo "There is no support at all for void."
X			voidflags=0
X		fi
X	fi
Xesac
Xdflt="$voidflags";
Xrp="Your void support flags add up to what?"
X. ./myread
Xvoidflags="$ans"
X$rm -f try.* .out
X
END_OF_FILE
  if test 4493 -ne `wc -c <'mcon/U/voidflags.U'`; then
    echo shar: \"'mcon/U/voidflags.U'\" unpacked with wrong size!
  fi
  # end of 'mcon/U/voidflags.U'
fi
if test -f 'mcon/man/mxref.SH' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/man/mxref.SH'\"
else
  echo shar: Extracting \"'mcon/man/mxref.SH'\" \(2950 characters\)
  sed "s/^X//" >'mcon/man/mxref.SH' <<'END_OF_FILE'
Xcase $CONFIG in
X'')
X	if test -f config.sh; then TOP=.;
X	elif test -f ../config.sh; then TOP=..;
X	elif test -f ../../config.sh; then TOP=../..;
X	elif test -f ../../../config.sh; then TOP=../../..;
X	elif test -f ../../../../config.sh; then TOP=../../../..;
X	else
X		(echo "Can't find config.sh."; exit 1)
X	fi
X	. $TOP/config.sh
X	;;
Xesac
Xcase "$0" in
X*/*) cd `expr X$0 : 'X\(.*\)/'` ;;
Xesac
Xecho "Extracting mcon/man/metaxref.$manext (with variable substitutions)"
X$rm -f metaxref.$manext
X$spitshell >metaxref.$manext <<!GROK!THIS!
X.TH METACONFIG $manext "Version $VERSION PL$PATCHLEVEL"
X''' @(#) Manual page for metaxref
X'''
X''' $Id: mxref.SH,v 3.0 1993/08/18 12:10:15 ram Exp $
X'''
X'''  Copyright (c) 1991-1993, Raphael Manfredi
X'''  
X'''  You may redistribute only under the terms of the Artistic Licence,
X'''  as specified in the README file that comes with the distribution.
X'''  You may reuse parts of this distribution only within the terms of
X'''  that same Artistic Licence; a copy of which may be found at the root
X'''  of the source tree for dist 3.0.
X'''
X''' $Log: mxref.SH,v $
X''' Revision 3.0  1993/08/18  12:10:15  ram
X''' Baseline for dist 3.0 netwide release.
X'''
X'''
X.SH NAME
Xmetaxref \- builds cross-reference file/unit/item information
X.SH SYNOPSIS
X.B metaxref
X[ \-\fBdhkmsV\fR ] [ \-\Bf\fI manifest\fR ]
X.SH DESCRIPTION
X.I Metaxref
Xis a program that scans all the files in your MANIFEST file and produces
Xthree files which contains information about how the files in that MANIFEST
Xreference items defined by metaconfig's unit files.
X.PP
XThe first two files,
X.I I.fui
Xand
X.I I.uif
Xreference the \fIfile\fR, \fIunit\fR and \fIitems\fR sorted differently. The
Xthird file, \fIObsolete\fR, dumps all the known obsolete symbols, in which
Xfile they appear and the new symbol that should be used instead.
X.PP
XNote that obsolete symbols do not appear in the main cross-reference files,
Xbut are only listed in the \fIObsolete\fR file. That's yet another incentive
Xto use the new symbols in your sources. :-)
X.SH OPTIONS
X.I Metaxref
Xrecognizes the following options:
X.TP 10
X.B \-d
XTurn on debug mode.
X.TP
X.B \-f\fI manifest\fR
XUse an alternate \fImanifest\fR file.
X.TP
X.B \-h
XPrint help message and exit.
X.TP
X.B \-k
XKeep temporary \fI.MT\fR directory.
X.TP
X.B \-m
XAssume lots of memory and swap space. This will drastically improve the
Xsymbol lookup time in your source files, at the expense of memory usage.
X.TP
X.B \-s
XTurn on silent mode.
X.TP
X.B \-V
XPrint version number and exit.
X.SH AUTHOR
XHarlan Stenn <harlan@mumps.pfcs.com>
X.SH FILES
X.TP 10
X.PD 0
XLIB/dist/mcon/U/*.U
XPublic unit files.
X.TP
XU/*.U
XPrivate unit files
X.TP
XI.fui
XLists information sorted by file, unit and item.
X.TP
XI.uif
XLists information sorted by unit, item and file.
X.TP
XObsolete
XLists all the obsolete symbols used by the sources.
X.PD
X.sp
X.in +5
Xwhere LIB is $privlibexp.
X.in -5
X.SH "SEE ALSO"
Xmetaconfig($manext), metalint($manext)
X!GROK!THIS!
Xchmod 444 metaxref.$manext
END_OF_FILE
  if test 2950 -ne `wc -c <'mcon/man/mxref.SH'`; then
    echo shar: \"'mcon/man/mxref.SH'\" unpacked with wrong size!
  fi
  chmod +x 'mcon/man/mxref.SH'
  # end of 'mcon/man/mxref.SH'
fi
if test -f 'mcon/mconfig.SH' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mcon/mconfig.SH'\"
else
  echo shar: Extracting \"'mcon/mconfig.SH'\" \(4647 characters\)
  sed "s/^X//" >'mcon/mconfig.SH' <<'END_OF_FILE'
Xcase $CONFIG in
X'')
X	if test -f config.sh; then TOP=.;
X	elif test -f ../config.sh; then TOP=..;
X	elif test -f ../../config.sh; then TOP=../..;
X	elif test -f ../../../config.sh; then TOP=../../..;
X	elif test -f ../../../../config.sh; then TOP=../../../..;
X	else
X		(echo "Can't find config.sh."; exit 1)
X	fi
X	. $TOP/config.sh
X	;;
Xesac
Xcase "$0" in
X*/*) cd `expr X$0 : 'X\(.*\)/'` ;;
Xesac
Xecho "Extracting mcon/mconfig (with variable substitutions)"
Xcat >mconfig <<!GROK!THIS!
X$startperl
X	eval "exec perl -S \$0 \$*"
X		if \$running_under_some_shell;
X
X# $Id: mconfig.SH,v 3.0 1993/08/18 12:10:17 ram Exp $
X#
X#  Copyright (c) 1991-1993, Raphael Manfredi
X#  
X#  You may redistribute only under the terms of the Artistic Licence,
X#  as specified in the README file that comes with the distribution.
X#  You may reuse parts of this distribution only within the terms of
X#  that same Artistic Licence; a copy of which may be found at the root
X#  of the source tree for dist 3.0.
X#
X# Original Author: Larry Wall <lwall@netlabs.com>
X# Key Contributor: Harlan Stenn <harlan@mumps.pfcs.com>
X#
X# $Log: mconfig.SH,v $
X# Revision 3.0  1993/08/18  12:10:17  ram
X# Baseline for dist 3.0 netwide release.
X#
X
X# Perload ON
X
X\$MC = '$privlib';
X\$version = '$VERSION';
X\$patchlevel = '$PATCHLEVEL';
X\$grep = '$grep';
X!GROK!THIS!
X
X$spitshell >>mconfig <<'!NO!SUBS!'
Xchop($date = `date`);
X$MC = &tilda_expand($MC);		# ~name expansion
Xchop($WD = `pwd`);				# Working directory
Xchdir $MC || die "Can't chdir to $MC: $!\n";
Xchop($MC = `pwd`);				# Real metaconfig lib path (no symbolic links)
Xchdir $WD || die "Can't chdir back to $WD: $!\n";
X
Xrequire 'getopts.pl';
X&usage unless &Getopts("dhkmostvwV");
X
X++$opt_k if $opt_d;
X
Xif ($opt_V) {
X	print STDERR "metaconfig $version PL$patchlevel\n";
X	exit 0;
X} elsif ($opt_h) {
X	&usage;
X}
X
Xunlink 'Wanted' unless $opt_w;			# Wanted rebuilt if no -w
Xunlink 'Obsolete' unless $opt_w;		# Obsolete file rebuilt if no -w
X&readpackage;							# Merely get the package's name
X&init;									# Various initializations
X`mkdir .MT 2>&1` unless -d '.MT';		# For private temporary files
X
X&locate_units;				# Fill in @ARGV with a unit list
X&extract_dependencies;		# Extract dependencies from units
X&extract_filenames;			# Extract files to be scanned for
X&build_wanted;				# Build a list of wanted symbols in file Wanted
X&build_makefile;			# To do the transitive closure of dependencies
X&solve_dependencies;		# Now run the makefile to close dependency graph
X&create_configure;			# Create the Configure script and related files
X&cosmetic_update;			# Update the manifests
X
Xif ($opt_k) {
X	print "Leaving subdirectory .MT unremoved so you can peruse it.\n"
X		unless $opt_s;
X} else {
X	`rm -rf .MT 2>&1`;
X}
Xprint "Done.\n" unless $opt_s;
X
X# General initializations
Xsub init {
X	&init_except;			# Token which have upper-cased letters
X	&init_keep;				# The keep status for built-in interpreter
X	&init_priority;			# Priorities for diadic operators
X	&init_constants;		# Define global constants
X	&init_depend;			# The %Depend array records control line handling
X}
X
Xsub init_constants {
X	$NEWMANI = 'MANIFEST.new';		# List of files to be scanned
X	$MANI = 'MANIFEST';				# For manifake
X}
X
X# Record the exceptions -- all symbols but these are lower case
Xsub init_except {
X	$Except{'Mcc'}++;
X	$Except{'Author'}++;
X	$Except{'Date'}++;
X	$Except{'Header'}++;
X	$Except{'Id'}++;
X	$Except{'Locker'}++;
X	$Except{'Log'}++;
X	$Except{'RCSfile'}++;
X	$Except{'Revision'}++;
X	$Except{'Source'}++;
X	$Except{'State'}++;
X}
X
X# Print out metaconfig's usage and exits
Xsub usage {
X	print STDERR <<'EOH';
XUsage: metaconfig [-dhkmostvwV]
X  -d : debug mode.
X  -h : print this help message and exits.
X  -k : keep temporary directory.
X  -m : assume lots of memory and swap space.
X  -o : maps obsolete symbols on new ones.
X  -s : silent mode.
X  -t : trace symbols as they are found.
X  -v : verbose mode.
X  -w : trust Wanted file as being up-to-date.
X  -V : print version number and exits.
XEOH
X	exit 1;
X}
X
X!NO!SUBS!
X$grep -v '^;#' pl/locate.pl >>mconfig 
X$grep -v '^;#' pl/common.pl >>mconfig 
X$grep -v '^;#' pl/depend.pl >>mconfig 
X$grep -v '^;#' pl/init.pl >>mconfig 
X$grep -v '^;#' pl/extract.pl >>mconfig 
X$grep -v '^;#' pl/files.pl >>mconfig 
X$grep -v '^;#' pl/wanted.pl >>mconfig 
X$grep -v '^;#' pl/obsolete.pl >>mconfig 
X$grep -v '^;#' pl/makefile.pl >>mconfig 
X$grep -v '^;#' pl/order.pl >>mconfig 
X$grep -v '^;#' pl/configure.pl >>mconfig 
X$grep -v '^;#' pl/cosmetic.pl >>mconfig 
X$grep -v '^;#' pl/eval.pl >>mconfig 
X$grep -v '^;#' ../pl/package.pl >>mconfig 
X$grep -v '^;#' ../pl/manifake.pl >>mconfig 
X$grep -v '^;#' ../pl/tilde.pl >>mconfig 
Xchmod +x mconfig
X$eunicefix mconfig
END_OF_FILE
  if test 4647 -ne `wc -c <'mcon/mconfig.SH'`; then
    echo shar: \"'mcon/mconfig.SH'\" unpacked with wrong size!
  fi
  # end of 'mcon/mconfig.SH'
fi
if test -f 'pat/Makefile.SH' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'pat/Makefile.SH'\"
else
  echo shar: Extracting \"'pat/Makefile.SH'\" \(4579 characters\)
  sed "s/^X//" >'pat/Makefile.SH' <<'END_OF_FILE'
X: Makefile.SH generated from Jmake.tmpl and Jmakefile [jmake 3.0 PL0]
X: $X-Id: Jmake.tmpl,v 2.8.1.2 91/11/18 13:22:54 ram Exp $
X
Xcase $CONFIG in
X'')
X	if test -f config.sh; then TOP=.;
X	elif test -f ../config.sh; then TOP=..;
X	elif test -f ../../config.sh; then TOP=../..;
X	elif test -f ../../../config.sh; then TOP=../../..;
X	elif test -f ../../../../config.sh; then TOP=../../../..;
X	else
X		(echo "Can't find config.sh."; exit 1)
X	fi
X	. $TOP/config.sh
X	;;
Xesac
Xcase "$0" in
X*/*) cd `expr X$0 : 'X\(.*\)/'` ;;
Xesac
XCURRENT=pat
XDIR=`echo $CURRENT/ | sed -e 's/\.\///g'`
Xecho "Extracting ${DIR}Makefile (with variable substitutions)"
XDATE=`date`
X$spitshell >Makefile <<!GROK!THIS!
X########################################################################
X# Makefile generated from Makefile.SH on $DATE
X
XSHELL = /bin/sh
XJMAKE = jmake
XTOP = ..
XCURRENT = $CURRENT
XDIR = $DIR
XINSTALL = ../install
X
X########################################################################
X# Parameters set by Configure -- edit config.sh if changes are needed
X
XCTAGS = ctags
XL = $manext
XMANSRC = $installmansrc
XMAKE = make
XMV = $mv
XRM = $rm -f
XSCRIPTDIR = $installscript
X
X!GROK!THIS!
X$spitshell >>Makefile <<'!NO!SUBS!'
X########################################################################
X# Jmake rules for building libraries, programs, scripts, and data files
X# $X-Id: Jmake.rules,v 2.8.1.4 91/11/18 13:19:07 ram Exp $
X
X########################################################################
X# Start of Jmakefile
X
X# $X-Id: Jmakefile,v 2.8.1.2 91/11/03 16:33:16 ram Exp $
X#
X#  Copyright (c) 1991-1993, Raphael Manfredi
X#  
X#  You may redistribute only under the terms of the Artistic Licence,
X#  as specified in the README file that comes with the distribution.
X#  You may reuse parts of this distribution only within the terms of
X#  that same Artistic Licence; a copy of which may be found at the root
X#  of the source tree for dist 3.0.
X#
X# $X-Log:	Jmakefile,v $
X# Revision 2.8.1.2  91/11/03  16:33:16  ram
X# patch7: makefile made more generic by using new improved expand
X#
X# Revision 2.8.1.1  91/07/14  13:01:31  ram
X# patch1: added manual page for pat tools
X#
X# Revision 2.8  91/07/08  13:26:08  ram
X# 3.0 alpha baseline.
X#
X
XBASE = // cil base diff make clean col name ftp send index post
X
XPAT = \
X	pat \
X	patcil \
X	patbase \
X	patdiff \
X	patmake \
X	patclean \
X	patcol \
X	patname \
X	patftp \
X	patsend \
X	patindex \
X	patpost 
X
Xall:: $(PAT)
X
Xlocal_realclean::
X	$(RM) $(PAT)
X
Xpat: pat.SH
X	/bin/sh pat.SH
X
Xpatcil: patcil.SH
X	/bin/sh patcil.SH
X
Xpatbase: patbase.SH
X	/bin/sh patbase.SH
X
Xpatdiff: patdiff.SH
X	/bin/sh patdiff.SH
X
Xpatmake: patmake.SH
X	/bin/sh patmake.SH
X
Xpatclean: patclean.SH
X	/bin/sh patclean.SH
X
Xpatcol: patcol.SH
X	/bin/sh patcol.SH
X
Xpatname: patname.SH
X	/bin/sh patname.SH
X
Xpatftp: patftp.SH
X	/bin/sh patftp.SH
X
Xpatsend: patsend.SH
X	/bin/sh patsend.SH
X
Xpatindex: patindex.SH
X	/bin/sh patindex.SH
X
Xpatpost: patpost.SH
X	/bin/sh patpost.SH
X
X
Xinstall:: $(PAT)
X	@case '${MFLAGS}' in *[i]*) set +e;; esac; \
X	for i in $(PAT); do \
X		(set -x; $(INSTALL) -c -m 555 $$i $(SCRIPTDIR)); \
X	done
X
Xdeinstall::
X	@case '${MFLAGS}' in *[i]*) set +e;; esac; \
X	for i in $(PAT); do \
X		(set -x; $(RM) $(SCRIPTDIR)/$$i); \
X	done
X
Xinstall.man:: pat.man
X	$(INSTALL) -c -m 444 pat.man $(MANSRC)/pat.$(L)
X
Xdeinstall.man::
X	$(RM) $(MANSRC)/pat.$(L)
X
X########################################################################
X# Common rules for all Makefiles -- do not edit
X
Xemptyrule::
X
Xclean: local_clean
Xrealclean: local_realclean
Xclobber: local_clobber
X
Xlocal_clean::
X	$(RM) core *~ *.o
X
Xlocal_realclean:: local_clean
X
Xlocal_clobber:: local_realclean
X	$(RM) Makefile config.sh
X
XMakefile.SH: Jmakefile
X	-@if test -f $(TOP)/.package; then \
X		if test -f Makefile.SH; then \
X			echo "	$(RM) Makefile.SH~; $(MV) Makefile.SH Makefile.SH~"; \
X			$(RM) Makefile.SH~; $(MV) Makefile.SH Makefile.SH~; \
X		fi; \
X		echo "	$(JMAKE) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT)" ; \
X		$(JMAKE) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT) ; \
X	else touch $@; exit 0; fi
X
XMakefile: Makefile.SH
X	/bin/sh Makefile.SH
X
Xtags::
X	$(CTAGS) -w *.[ch]
X	$(CTAGS) -xw *.[ch] > tags
X
Xlocal_clobber::
X	$(RM) tags
X
X########################################################################
X# Empty rules for directories with no sub-directories -- do not edit
X
Xinstall::
X	@echo "install in $(CURRENT) done."
X
Xdeinstall::
X	@echo "deinstall in $(CURRENT) done."
X
Xinstall.man::
X	@echo "install.man in $(CURRENT) done."
X
Xdeinstall.man::
X	@echo "deinstall.man in $(CURRENT) done."
X
XMakefiles::
X
XMakefiles.SH::
X
X!NO!SUBS!
Xchmod 644 Makefile
X$eunicefix Makefile
X
END_OF_FILE
  if test 4579 -ne `wc -c <'pat/Makefile.SH'`; then
    echo shar: \"'pat/Makefile.SH'\" unpacked with wrong size!
  fi
  # end of 'pat/Makefile.SH'
fi
if test -f 'pat/patclean.SH' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'pat/patclean.SH'\"
else
  echo shar: Extracting \"'pat/patclean.SH'\" \(4523 characters\)
  sed "s/^X//" >'pat/patclean.SH' <<'END_OF_FILE'
Xcase $CONFIG in
X'')
X	if test -f config.sh; then TOP=.;
X	elif test -f ../config.sh; then TOP=..;
X	elif test -f ../../config.sh; then TOP=../..;
X	elif test -f ../../../config.sh; then TOP=../../..;
X	elif test -f ../../../../config.sh; then TOP=../../../..;
X	else
X		(echo "Can't find config.sh."; exit 1)
X	fi
X	. $TOP/config.sh
X	;;
Xesac
Xcase "$0" in
X*/*) cd `expr X$0 : 'X\(.*\)/'` ;;
Xesac
Xecho "Extracting pat/patclean (with variable substitutions)"
Xcat >patclean <<!GROK!THIS!
X$startperl
X	eval "exec perl -S \$0 \$*"
X		if \$running_under_some_shell;
X
X# $Id: patclean.SH,v 3.0 1993/08/18 12:10:41 ram Exp $
X#
X#  Copyright (c) 1991-1993, Raphael Manfredi
X#  
X#  You may redistribute only under the terms of the Artistic Licence,
X#  as specified in the README file that comes with the distribution.
X#  You may reuse parts of this distribution only within the terms of
X#  that same Artistic Licence; a copy of which may be found at the root
X#  of the source tree for dist 3.0.
X#
X# $Log: patclean.SH,v $
X# Revision 3.0  1993/08/18  12:10:41  ram
X# Baseline for dist 3.0 netwide release.
X#
X
X\$version = '$VERSION';
X\$patchlevel = '$PATCHLEVEL';
X!GROK!THIS!
Xcat >>patclean <<'!NO!SUBS!'
X
X$RCSEXT = ',v' unless $RCSEXT;
X$progname = "patclean";
X
Xrequire 'getopts.pl';
X&usage unless $#ARGV >= 0;
X&usage unless &Getopts("ahnmV");
X
Xif ($opt_V) {
X	print STDERR "$progname $version PL$patchlevel\n";
X	exit 0;
X} elsif ($opt_h) {
X	&usage;
X}
X
X$RCSEXT = ',v' unless $RCSEXT;
Xchop($pwd = `pwd`) unless -f '.package';
Xuntil (-f '.package') {
X	die "No .package file!  Run packinit.\n" unless $pwd;
X	chdir '..' || die "Can't cd ..";
X	$pwd =~ s|(.*)/(.*)|$1|;
X	$prefix = $2 . '/' . $prefix;
X}
Xif ($prefix) {
X	for (@ARGV) {
X		s/^/$prefix/ unless m|^[-/]|;
X	}
X}
X
X# We now are at the top level
X
X&readpackage;
X
Xif ($opt_n) {
X	&newer;				# Look for files newer than patchlevel.h
X} elsif ($opt_a) {
X	open(MANI,"MANIFEST.new") || die "No MANIFEST.new found.\n";
X	@ARGV = ();
X	while (<MANI>) {
X		s|^\./||;
X		next if m|^patchlevel.h|;		# This file is built by hand
X		chop;
X		($_) = split(' ');
X		next if -d;
X		push(@ARGV,$_);
X	}
X	close MANI;
X} elsif ($opt_m) {
X	open(MODS,"bugs/.mods$bnum") || die "No modification found.\n";
X	@ARGV = ();
X	while (<MODS>) {
X		next if m|^patchlevel.h$|;		# This file is built by hand
X		chop;
X		($_) = split(' ');
X		push(@ARGV,$_);
X	}
X    close MODS;
X}
X
X# Set a temporary file for check outs
X$TMPFILE = "/tmp/cl$$.tmp";
X
X# Now loop over each file specified, doing a 'rcsclean'
Xforeach $file (@ARGV) {
X	if (-f $file) {
X		$files = &rcsargs($file);
X		@files = split(' ', $files);
X		$rlog = `rlog -rlastpat- $files 2>&1`;
X		($revs) = ($rlog =~ /selected revisions: (\d+)/);
X		if (!$revs) {
X			print "$progname: $file has never been checked in--checking in...\n";
X			system 'perl', '-S', 'patcil', '-p', $file;
X			$revs = 2;		# At least null trunk + new fresh revision
X		}
X		# Look whether there is a branch
X		if ($revs == 1) {
X			$rlog = `rlog -r$revbranch $files 2>&1`;
X			($revs) = ($rlog =~ /selected revisions: (\d+)/);
X			$revs++;	# add the base revision
X		}
X		# We must only give the name of the RCS revision file, i.e. $files[1]
X		if ($revs == 1) {
X			system "co -q -p$baserev $files[1] > $TMPFILE";
X		} else {
X			system "co -q -p$revbranch $files[1] > $TMPFILE";
X		}
X		if ($? == 0) {
X			system 'cmp', '-s', $file, $TMPFILE;
X			if ($? == 0) {
X				unlink $file;
X				print "$progname: $file removed.\n";
X			} else {
X				# Check in file and make sure all was ok
X				system 'perl', '-S', 'patcil', '-p', $file;
X				system "co -q -p$revbranch $files[1] > $TMPFILE";
X				if ($? == 0) {
X					system 'cmp', '-s', $file, $TMPFILE;
X					if ($? == 0) {
X						unlink $file;
X						print "$progname: $file removed.\n";
X					} else {
X						print "$progname: $file NOT removed.\n";
X					}
X				} else {
X					print "$progname: could not check out--$file NOT removed.\n";
X				}
X			}
X		} else {
X			print "$progname: no revision--$file NOT removed.\n";
X		}
X	}
X}
X
Xunlink "$TMPFILE";
X
Xsub usage {
X	print STDERR "Usage: $progname [-ahnmV] [filelist]\n";
X	print STDERR "  -a : all the files in MANIFEST.new\n";
X	print STDERR "  -h : print this message and exit\n";
X	print STDERR "  -n : all the files newer than patchlevel.h\n";
X	print STDERR "  -m : all the modified files (which have been patciled)\n";
X	print STDERR "  -V : print version number and exit\n";
X	exit 1;
X}
X
X!NO!SUBS!
X$grep -v '^;#' ../pl/newer.pl >>patclean
X$grep -v '^;#' ../pl/package.pl >>patclean
X$grep -v '^;#' ../pl/rcsargs.pl >>patclean
Xchmod +x patclean
X$eunicefix patclean
END_OF_FILE
  if test 4523 -ne `wc -c <'pat/patclean.SH'`; then
    echo shar: \"'pat/patclean.SH'\" unpacked with wrong size!
  fi
  # end of 'pat/patclean.SH'
fi
echo shar: End of archive 13 \(of 28\).
cp /dev/null ark13isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 28 archives.
    echo "Please run PACKNOTES through sh, read REAMDE and then type Configure."
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0

exit 0 # Just in case...
