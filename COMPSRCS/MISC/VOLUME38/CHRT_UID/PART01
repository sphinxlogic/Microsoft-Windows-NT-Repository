Newsgroups: comp.sources.misc
From: wietse@wzv.win.tue.nl (Wietse Venema)
Subject: v38i119: chrootuid - run servers in a restricted environment, Part01/01
Message-ID: <1993Aug13.042714.19818@sparky.sterling.com>
X-Md4-Signature: 6dbadee7c53d4f6eee4407070051ff26
Keywords: security,gopher,www
Sender: kent@sparky.sterling.com (Kent Landfield)
Organization: Eindhoven University of Technology, The Netherlands
Date: Fri, 13 Aug 1993 04:27:14 GMT
Approved: kent@sparky.sterling.com

Submitted-by: wietse@wzv.win.tue.nl (Wietse Venema)
Posting-number: Volume 38, Issue 119
Archive-name: chrootuid/part01
Environment: UNIX,syslog

Chrootuid makes it easy to run a network service at low privilege level
and with restricted file system access.  At Eindhoven University we use
this program to run the gopher and www (world-wide web) network daemons
in a restricted environment:  the daemons have access only to their own
directory tree, and run under a low-privileged userid.  The arrangement
greatly reduces the impact of possible loopholes in daemon software.

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of shell archive."
# Contents:  README Makefile chrootuid.c chrootuid.1
# Wrapped by wietse@wzv on Fri Aug 13 01:16:15 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f README -a "${1}" != "-c" ; then 
  echo shar: Will not over-write existing file \"README\"
else
echo shar: Extracting \"README\" \(5478 characters\)
sed "s/^X//" >README <<'END_OF_README'
X@(#) README 1.1 93/08/12 16:13:55
X
Xchrootuid - run command in restricted environment
X
XDescription
X===========
X
XChrootuid makes it easy to run a network service at low privilege level
Xand with restricted file system access.  At Eindhoven University we use
Xthis program to run the gopher and www (world-wide web) network daemons
Xin a restricted environment:  the daemons have access only to their own
Xdirectory tree, and run under a low-privileged userid.  The arrangement
Xgreatly reduces the impact of possible loopholes in daemon software.
X
XInstallation
X============
X
XThe source of the chrootuid program is small and easy to verify.  In
Xorder to build the program, run "make". If it compiles OK, edit the
Xdestination pathnames in the Makefile and do a "make install".
X
XImportant: chrootuid should *not* be installed set-uid.
X
XUsing the chrootuid program
X===========================
X
XThe use of the chrootuid program will be illustrated with the gopher
Xservice. The examples are easily adapted to www (world-wide web) or any
Xother network service.
X
XIn the inetd.conf file, make a gopher entry like this:
X
X    gopher  stream  tcp   nowait  root  /usr/local/lib/gopherd gopherd
X
XIf you like to run the daemon under control of my tcp/ip daemon
Xwrapper, use the following entry:
X
X    gopher  stream  tcp   nowait  root  /some/where/tcpd /usr/local/lib/gopherd
X
XOn some systems you will have to omit the "root" field, because all
Xdaemons are executed as root by default. 
X
XThe file /usr/local/lib/gopherd should be a shell script that is
Xmaintained by the superuser, because inetd runs the script with root
Xprivilege. It is this script that runs the real gopher daemon, as an
Xunprivileged process, in a restricted environment. Of course you can
Xspecify any other pathname for the script, as long as it is fully
Xcontrolled by the superuser.
X
X    #!/bin/sh
X
X    exec /usr/local/bin/chrootuid /some/where/gopher nobody \
X        /bin/gopherd -I -l /tmp/gopher.log \
X                        -o /bin/gopherd.conf \
X                     -c -C /gopherdata 70
X
XI'll describe the contents of this script in some detail:
X
X- Instead of /usr/local/bin/chrootuid, specify the absolute path to the
Xinstalled chrootuid executable. The program is executed by root so the
Xpath should be fully controlled by the super user.
X
X- Instead of /some/where/gopher, specify the absolute path to your
Xgopher directory tree. The gopher daemon will have access only to files
Xwithin this subtree. This arrangement is similar to anonymous FTP.
X
X- The gopher daemon will be executed with the privileges of the "nobody"
Xaccount.  You can specify any unprivileged account, as long as it does
Xnot own any files etc. within the gopher directory tree.  Important:
Xthe account should have an entry in the ~gopher/etc/passwd file.
X
X- "/bin/gopherd -I -l ..." is the command that will be executed, after
Xaccess to the file system has been restricted to the gopher directory
Xtree, and after privileges have been reduced to those of "nobody" (or
Xwhatever account name you choose).  All path names should be absolute
Xwith respect to the root of the gopher directory tree. Thus,
X/bin/gopherd corresponds to /some/where/gopher/bin/gopherd.
X
XOn systems with shared libraries it will be necessary to set up the
Xappropriate files in the gopher directory tree. The appendix below
Xshows what we have under SunOS 4.x. It is essentially the same as 
Xwhat one has to set up for anonymous FTP.
X
XFinally, chrootuid reports all problems to the syslog daemon.  Have a
Xlook at your syslog.conf file if you don't know where the errors are
Xlogged.
X
X        Wietse Venema
X	wietse@wzv.win.tue.nl
X        Mathematics and Computing Science
X        Eindhoven University of Technology
X        The Netherlands
X
XAppendix: SunOS 4.x restricted gopher subtree
X=============================================
X
XThe restricted gopher subtree is essentially the same as the tree used
Xfor anonymous ftp.  As with anonymous ftp, please strip any passwords
Xfrom the ~gopher/etc/passwd file. In fact, the only entry that is
Xreally needed is the one for the unprivileged account ("nobody" or
Xwhatever you chose). Make sure that no files etc. are owned by the
Xunprivileged account. The only exception we permit is the gopherd
Xlogfile, because no other program depends on it.
X
Xdrwxr-sr-x  2 exp           512 Aug 12 13:33 bin
Xdr-xr-sr-x  2 exp           512 Oct 12  1992 dev
Xdr-xr-sr-x  2 exp           512 Oct 12  1992 etc
Xdrwxr-sr-x  9 exp           512 Aug  9 12:35 gopherdata
Xdrwxrwsrwt  2 exp           512 Aug 12 13:48 tmp
Xdr-xr-sr-x  4 exp           512 Jan 25  1993 usr
X
Xbin:
X-rwx--x--x  1 exp        409600 Aug 12 13:39 gopherd
X-rw-r--r--  1 exp          2299 Jun 15 10:12 gopherd.conf
X
Xdev:
Xcrw-rw-rw-  1 exp        3,  12 Oct 12  1992 zero
X
Xetc:
X-r--r--r--  1 exp           163 Oct 12  1992 group
X-r--r--r--  1 exp           239 Oct 13  1992 passwd
X
Xgopherdata:
X<our information data base omitted for brevity>
X
Xusr:
Xdr-xr-xr-x  2 exp           512 Oct 12  1992 lib
Xdr-xr-xr-x  3 exp           512 Jan 21  1993 share
X
Xusr/lib:
X-r-xr-xr-x  1 exp         40960 Oct 11  1990 ld.so
X-r-xr-xr-x  1 exp        516096 Oct 12  1990 libc.so.1.6
X
Xusr/share:
Xdr-xr-xr-x  3 exp           512 Jan 21  1993 lib
X
Xusr/share/lib:
Xdr-xr-xr-x  2 exp           512 Jan 21  1993 zoneinfo
X
Xusr/share/lib/zoneinfo:
X-r--r--r--  1 exp           590 Oct 11  1990 MET
X-r--r--r--  1 exp           590 Oct 11  1990 localtime
X
Xtmp:
X-rw-r--r--  1 nobody     220563 Aug 12 14:46 gopher.log
END_OF_README
if test 5478 -ne `wc -c <README`; then
    echo shar: \"README\" unpacked with wrong size!
fi
# end of overwriting check
fi
if test -f Makefile -a "${1}" != "-c" ; then 
  echo shar: Will not over-write existing file \"Makefile\"
else
echo shar: Extracting \"Makefile\" \(386 characters\)
sed "s/^X//" >Makefile <<'END_OF_Makefile'
X# @(#) Makefile 1.2 93/08/12 16:09:29
X
XFILES	= README Makefile chrootuid.c chrootuid.1
XCFLAGS	= -O 
X
Xall:	chrootuid chrootuid.1
X
Xchrootuid: chrootuid.c
X	$(CC) $(CFLAGS) -o $@ $?
X
X#chrootuid.1: chrootuid.c
X#	srctoman $? >$@
X
Xshar:	$(FILES)
X	@shar $(FILES)
X
Xinstall: chrootuid.1 chrootuid
X	cp chrootuid /usr/local/bin
X	cp chrootuid.1 /usr/local/man/man1
X
Xclean:
X	rm -f *.o core chrootuid
END_OF_Makefile
if test 386 -ne `wc -c <Makefile`; then
    echo shar: \"Makefile\" unpacked with wrong size!
fi
# end of overwriting check
fi
if test -f chrootuid.c -a "${1}" != "-c" ; then 
  echo shar: Will not over-write existing file \"chrootuid.c\"
else
echo shar: Extracting \"chrootuid.c\" \(2762 characters\)
sed "s/^X//" >chrootuid.c <<'END_OF_chrootuid.c'
X/*++
X/* NAME
X/*	chrootuid 1
X/* SUMMARY
X/*	run command in restricted environment
X/* SYNOPSIS
X/*	chrootuid newroot newuser command...
X/* DESCRIPTION
X/*	The \fIchrootuid\fR command sets up a restricted environment for
X/*	command execution. Access to the file system is restricted to
X/*	the \fInewroot\fR subtree; privileges are restricted to those of 
X/*	\fInewuser\fR. The initial working directory is changed to 
X/*	\fInewroot\fR.
X/*
X/*	\fIchrootuid\fR combines chroot(8) and su(1) into one program, so 
X/*	that there is no need to have dangerous commands such as /usr/bin/su 
X/*	in the restricted environment.
X/*
X/*	Only the superuser can use the \fIchrootuid\fR command.
X/* SEE ALSO
X/*	chroot(8), su(1)
X/* DIAGNOSTICS
X/*	Problems are reported to the syslog daemon.
X/* BUGS
X/*	The \fInewuser\fR must be known in the \fInewroot\fR universe.
X/* AUTHOR(S)
X/*	W.Z. Venema
X/*	Eindhoven University of Technology
X/*	Department of Mathematics and Computer Science
X/*	Den Dolech 2, P.O. Box 513, 5600 MB Eindhoven, The Netherlands
X/* CREATION DATE
X/*	Tue Oct 13 11:37:29 MET 1992
X/* LAST MODIFICATION
X/*	92/10/13 12:01:19
X/* VERSION/RELEASE
X/*	1.1
X/*--*/
X
X#ifndef lint
Xstatic char sccsid[] = "@(#) chrootuid.c 1.1 92/10/13 12:01:19";
X#endif
X
X/* System libraries. */
X
X#include <pwd.h>
X#include <syslog.h>
X
Xmain(argc, argv)
Xint     argc;
Xchar  **argv;
X{
X    struct passwd *pwd;
X
X    /*
X     * Open a channel to the syslog daemon. Older versions of openlog()
X     * require only two arguments.
X     */
X
X#ifdef LOG_DAEMON
X    (void) openlog(argv[0], LOG_PID, LOG_DAEMON);
X#else
X    (void) openlog(argv[0], LOG_PID);
X#endif
X
X    /*
X     * Require proper amount of arguments. In all cases of error, exit with
X     * zero status because we have already reported the problem via syslogd.
X     * No need to make inetd complain, too.
X     */
X
X    if (argc < 4) {
X	syslog(LOG_ERR, "usage: %s path user command", argv[0]);
X	return (0);
X    }
X    /* Must step into the new subtree. */
X
X    if (chdir(argv[1])) {
X	syslog(LOG_ERR, "chdir(%s): %m", argv[1]);
X	return (0);
X    }
X    /* Do the chroot() before giving away root privileges. */
X
X    if (chroot(argv[1])) {
X	syslog(LOG_ERR, "chroot(%s): %m", argv[1]);
X	return (0);
X    }
X    /* The user must be known in the chrooted universe... */
X
X    if ((pwd = getpwnam(argv[2])) == 0) {
X	syslog(LOG_ERR, "%s: user unknown", argv[2]);
X	return (0);
X    }
X    /* Switch group id then user id. */
X
X    if (setgid(pwd->pw_gid)) {
X	syslog(LOG_ERR, "setgid(%d): %m", pwd->pw_gid);
X	return (0);
X    }
X    if (setuid(pwd->pw_uid)) {
X	syslog(LOG_ERR, "setuid(%d): %m", pwd->pw_uid);
X	return (0);
X    }
X    /* Run the command and hope for the best. */
X
X    (void) execvp(argv[3], argv + 3);
X    syslog(LOG_ERR, "%s: %m", argv[3]);
X    return (0);
X}
END_OF_chrootuid.c
if test 2762 -ne `wc -c <chrootuid.c`; then
    echo shar: \"chrootuid.c\" unpacked with wrong size!
fi
# end of overwriting check
fi
if test -f chrootuid.1 -a "${1}" != "-c" ; then 
  echo shar: Will not over-write existing file \"chrootuid.1\"
else
echo shar: Extracting \"chrootuid.1\" \(1157 characters\)
sed "s/^X//" >chrootuid.1 <<'END_OF_chrootuid.1'
X.TH CHROOTUID 1 
X.ad
X.fi
X.SH NAME
Xchrootuid
X\-
Xrun command in restricted environment
X.SH SYNOPSIS
X.na
X.nf
Xchrootuid newroot newuser command...
X.SH DESCRIPTION
X.ad
X.fi
XThe \fIchrootuid\fR command sets up a restricted environment for
Xcommand execution. Access to the file system is restricted to
Xthe \fInewroot\fR subtree; privileges are restricted to those of
X\fInewuser\fR. The initial working directory is changed to
X\fInewroot\fR.
X
X\fIchrootuid\fR combines chroot(8) and su(1) into one program, so
Xthat there is no need to have dangerous commands such as /usr/bin/su
Xin the restricted environment.
X
XOnly the superuser can use the \fIchrootuid\fR command.
X.SH SEE ALSO
X.na
X.nf
Xchroot(8), su(1)
X.SH DIAGNOSTICS
X.ad
X.fi
XProblems are reported to the syslog daemon.
X.SH BUGS
X.ad
X.fi
XThe \fInewuser\fR must be known in the \fInewroot\fR universe.
X.SH AUTHOR(S)
X.na
X.nf
XW.Z. Venema
XEindhoven University of Technology
XDepartment of Mathematics and Computer Science
XDen Dolech 2, P.O. Box 513, 5600 MB Eindhoven, The Netherlands
X.SH CREATION DATE
X.na
X.nf
XTue Oct 13 11:37:29 MET 1992
X.SH LAST MODIFICATION
X.na
X.nf
X92/10/13 12:01:19
X.SH VERSION/RELEASE
X.na
X.nf
X1.1
END_OF_chrootuid.1
if test 1157 -ne `wc -c <chrootuid.1`; then
    echo shar: \"chrootuid.1\" unpacked with wrong size!
fi
# end of overwriting check
fi
echo shar: End of shell archive.
exit 0

exit 0 # Just in case...
