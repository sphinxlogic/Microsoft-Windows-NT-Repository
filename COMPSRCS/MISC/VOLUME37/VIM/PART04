Newsgroups: comp.sources.misc
From: mool@oce.nl (Bram Moolenaar)
Subject: v37i004:  vim - Vi IMitation editor v1.27, Part04/24
Message-ID: <1993Apr23.172938.16166@sparky.imd.sterling.com>
X-Md4-Signature: 749afc7dcaff25ef2ea07947587fa311
Date: Fri, 23 Apr 1993 17:29:38 GMT
Approved: kent@sparky.imd.sterling.com

Submitted-by: mool@oce.nl (Bram Moolenaar)
Posting-number: Volume 37, Issue 4
Archive-name: vim/part04
Environment: UNIX, AMIGA, MS-DOS

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 4 (of 23)."
# Contents:  vim/doc/vim.man.uue vim/src/digraph.c.uue
#   vim/src/globals.h vim/src/makefile.6sas vim/src/makefile.manx
#   vim/src/regsub.c
# Wrapped by mool@oce-rd2 on Mon Apr 19 15:50:06 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'vim/doc/vim.man.uue' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'vim/doc/vim.man.uue'\"
else
echo shar: Extracting \"'vim/doc/vim.man.uue'\" \(8781 characters\)
sed "s/^X//" >'vim/doc/vim.man.uue' <<'END_OF_FILE'
X
Xbegin 644 vim.man
XM"@I624TH,2D@("`@("`@("`@("`@("`@("`@("`@("`@(%5315(@0T]-34%.<
XM1%,@("`@("`@("`@("`@("`@("`@("`@("`@("!624TH,2D*"@I."$X(3D$(&
XM00A!30A-"$U%"$4(10H@("`@('9I;2`M(%9I($E-:71A=&EO;BP@82!P<F]GU
XM<F%M;65R<R!T97AT(&5D:71O<@H*4PA3"%-9"%D(64X(3@A.3PA/"$]0"%`(B
XM4%,(4PA320A)"$E3"%,(4PH@("`@('8(=@AV:0AI"&EM"&T(;2!;;W!T:6]N?
XM<UT@6V9I;&4@+BY="B`@("`@=@AV"'9I"&D(:6T(;0AM(%MO<'1I;VYS72`MS
XM="!T86<*("`@("!V"'8(=FD(:0AI;0AM"&T@6V]P=&EO;G-=("M;8V]M;6%N3
XM9%T@9FEL92`N+@H@("`@('8(=@AV:0AI"&EM"&T(;2!;;W!T:6]N<UT@+6,@O
XM>V-O;6UA;F1](&9I;&4@+BX*("`@("!V"'8(=FD(:0AI;0AM"&T@6V]P=&EOW
XM;G-=("UE"@I$"$0(1$4(10A%4PA3"%-#"$,(0U((4@A220A)"$E0"%`(4%0(N
XM5`A420A)"$E/"$\(3TX(3@A."B`@("`@5@A6"%9I"&D(:6T(;0AM(&ES(&$@-
XM=&5X="!E9&ET;W(@=&AA="!I<R!U<'=A<F1S(&-O;7!A=&EB;&4@=&\@=FDN/
XM($ET(&-A;B!B92!U<V5D("!T;PH@("`@(&5D:70@86YY($%30TE)('1E>'0N>
XM($ET(&ES(&5S<&5C:6%L;'D@=7-E9G5L(&9O<B!E9&ET:6YG('!R;V=R86US.
XM+@H*("`@("!4:&5R92!A<F4@82!L;W0@;V8@96YH86YC96UE;G1S(&%B;W9E=
XM('9I.B!M=6QT:2!L979E;"!U;F1O+"!C;VUM86YD("!L:6YE"B`@("`@961I!
XM=&EN9RP@("!F:6QE;F%M92`@(&-O;7!L971I;VXL("!O;B`@;&EN92`@:&5L#
XM<"P@('%U;W1I;F<L("!E=&,N+B`@4F5A9`H@("`@(&1I9F9E<F5N8V4N9&]C\
XM(&9O<B!A('-U;6UA<GD@;V8@=&AE(&1I9F9E<F5N8V5S(&)E='=E96X@=FD@S
XM86YD(%9I;2X*"B`@("`@36]S="!O9G1E;B!6"%8(5FD(:0AI;0AM"&T@:7,@P
XM<W1A<G1E9"!T;R!E9&ET(&$@<VEN9VQE(&9I;&4@=VET:"!T:&4@8V]M;6%N[
XM9`H*("`@("`@("`@('9I;2!F:6QE"@H@("`@($UO<F4@9V5N97)A;&QY(%9)M
XM32!I<R!S=&%R=&5D('=I=&@Z"@H@("`@("`@("`@=FEM(%MO<'1I;VYS72!;U
XM9FEL96QI<W1="@H@("`@($EF('1H92!F:6QE;&ES="!I<R!M:7-S:6YG+"!T/
XM:&4@961I=&]R('=I;&P@<W1A<G0@=VET:"!A;B`@96UP='D@(&)U9F9E<BX*&
XM("`@("!/=&AE<G=I<V4@97AA8W1L>2!O;F4@;W5T(&]F('1H92!F;VQL;W=I`
XM;F<@9F]U<B!M87D@8F4@=7-E9"!T;R!C:&]O<V4@;VYE"B`@("`@;W(@;6]R/
XM92!F:6QE<R!T;R!B92!E9&ET960N"@H@("`@(&9I;&4@+BX@("`@($$@;&ES8
XM="!O9B!F:6QE(&YA;65S+B!4:&4@9FER<W0@;VYE("AA;'!H86)E=&EC86QL$
XM>2D@=VEL;"`@8F4*("`@("`@("`@("`@("`@("!T:&4@8W5R<F5N="!F:6QE/
XM(&%N9"!R96%D(&EN=&\@=&AE(&)U9F9E<BX@5&AE(&-U<G-O<B!W:6QL(&)E0
XM"B`@("`@("`@("`@("`@("`@<&]S:71I;VYE9"!O;B!T:&4@9FER<W0@;&ENQ
XM92!O9B!T:&4@8G5F9F5R+B!9;W4@(&-A;B`@9V5T("!T;PH@("`@("`@("`@_
XM("`@("`@('1H92!O=&AE<B!F:6QE<R!W:71H('1H92`B.FYE>'0B(&-O;6UA=
XM;F0N"@H@("`@("M;;G5M72!F:6QE("XN"B`@("`@("`@("`@("`@("`@4V%MN
XM92!A<R!T:&4@86)O=F4L(&)U="!T:&4@8W5R<V]R('=I;&P@8F4@<&]S:71I4
XM;VYE9"!O;B`@;&EN90H@("`@("`@("`@("`@("`@(")N=6TB+B`@268@(FYU+
XM;2(@:7,@;6ES<VEN9RP@=&AE(&-U<G-O<B!W:6QL(&)E('!O<VET:6]N960@M
XM;VX*("`@("`@("`@("`@("`@("!T:&4@;&%S="!L:6YE+@H*("`@("`K+W!AQ
XM="!F:6QE("XN"B`@("`@("`@("`@("`@("`@4V%M92!A<R!T:&4@86)O=F4L.
XM(&)U="!T:&4@8W5R<V]R('=I;&P@8F4@<&]S:71I;VYE9"`@;VX@('1H90H@O
XM("`@("`@("`@("`@("`@(&9I<G-T("`@;V-C=7)R96YC92`@(&]F("`@(G!AY
XM="(@(&EN("!T:&4@(&-U<G)E;G0@(&9I;&4@("AS964*("`@("`@("`@("`@`
XM("`@("!R969E<F5N8V4N9&]C+"!S96-T:6]N(")P871T97)N('-E87)C:&5SB
XM(B!F;W(@('1H92`@879A:6QA8FQE"B`@("`@("`@("`@("`@("`@<V5A<F-H+
XM('!A='1E<FYS*2X*"B`@("`@*WMC;VUM86YD?2!F:6QE("XN"@H@("`@("UC>
XM('MC;VUM86YD?2!F:6QE("XN"B`@("`@("`@("`@("`@("`@4V%M92!A<R!TK
XM:&4@86)O=F4L(&)U="![8V]M;6%N9'T@=VEL;"!B92!E>&5C=71E9"`@869TY
XM97(@('1H90H@("`@("`@("`@("`@("`@(&9I;&4@(&AA<R`@8F5E;B`@<F5AP
XM9"X@('MC;VUM86YD?2`@:7,@(&EN=&5R<')E=&5D("!A<R`@86X@17@*("`@5
XM("`@("`@("`@("`@("!C;VUM86YD+B!)9B!T:&4@>V-O;6UA;F1](&-O;G1AI
XM:6YS('-P86-E<R!I="!M=7-T(&)E(&5N8VQO<V5D"B`@("`@("`@("`@("`@M
XM("`@:6X@(&1O=6)L92`@<75O=&5S("`H=&AI<R!D97!E;F1S(&]N('1H92!SG
XM:&5L;"!T:&%T(&ES('5S960I+@H@("`@("`@("`@("`@("`@($5X86UP;&4Z*
XM(%9I;2`B*W-E="!S:2(@;6%I;BYC"@H*"@H@("`@("`@("`@("`@("`@("`@+
XM("`@("`@("`@("`@(#(X($UA<F-H(#$Y.3(@("`@("`@("`@("`@("`@("`@J
XM("`@("`@("`@("`@(#$*"@P*"E9)32@Q*2`@("`@("`@("`@("`@("`@("`@S
XM("`@("`@55-%4B!#3TU-04Y$4R`@("`@("`@("`@("`@("`@("`@("`@("`@Q
XM(%9)32@Q*0H*"B`@("`@+70@>W1A9WT@("`@5&AE(&9I;&4@=&\@961I="!AL
XM;F0@=&AE(&EN:71I86P@8W5R<V]R('!O<VET:6]N(&1E<&5N9',@;VX@80H@[
XM("`@("`@("`@("`@("`@(")T86<B+"`@82`@<V]R="!O9B!G;W1O(&QA8F5L#
XM+B![=&%G?2!I<R!L;V]K960@=7`@:6X@=&AE('1A9W,*("`@("`@("`@("`@2
XM("`@("!F:6QE+"!T:&4@87-S;V-I871E9"!F:6QE(&)E8V]M97,@=&AE(&-UD
XM<G)E;G0@(&9I;&4@(&%N9"`@=&AE"B`@("`@("`@("`@("`@("`@87-S;V-IK
XM871E9"`@8V]M;6%N9"`@:7,@(&5X96-U=&5D+B`@36]S=&QY('1H:7,@:7,@:
XM=7-E9"!F;W(@0PH@("`@("`@("`@("`@("`@('!R;V=R86US+B![=&%G?2!TF
XM:&5N('-H;W5L9"!B92!A(&9U;F-T:6]N(&YA;64N(%1H92!E9F9E8W0@:7,*;
XM("`@("`@("`@("`@("`@("!T:&%T("!T:&4@(&9I;&4@(&-O;G1A:6YI;F<@\
XM=&AA="!F=6YC=&EO;B!B96-O;65S('1H92!C=7)R96YT"B`@("`@("`@("`@C
XM("`@("`@9FEL92!A;F0@=&AE("!C=7)S;W(@(&ES("!P;W-I=&EO;F5D("!O[
XM;B`@=&AE("!S=&%R="`@;V8@('1H90H@("`@("`@("`@("`@("`@(&9U;F-T]
XM:6]N("AS964@<F5F97)E;F-E+F1O8RP@<V5C=&EO;B`B=&%G('-E87)C:&5SK
XM(BDN"@H@("`@("UE("`@("`@("`@(%-T87)T(&EN('%U:6-K1FEX(&UO9&4N;
XM(%1H92!E<G)O<B!F:6QE(")!>G1E8T,N17)R(B`@:7,@(')E860*("`@("`@"
XM("`@("`@("`@("!A;F0@('1H92`@9FER<W0@(&5R<F]R("!I<R`@9&ES<&QA_
XM>65D+B`@1G5R=&AE<B!E<G)O<G,@8V%N(&)E"B`@("`@("`@("`@("`@("`@P
XM:G5M<&5D('1O('=I=&@@=&AE("(Z8VXB(&-O;6UA;F0N(%-E92`@<F5F97)E7
XM;F-E+F1O8R`@<V5C=&EO;@H@("`@("`@("`@("`@("`@(#4N-BX*"D\(3PA/1
XM4`A0"%!4"%0(5$D(20A)3PA/"$]."$X(3E,(4PA3"B`@("`@5&AE(&]P=&EO-
XM;G,L(&EF('!R97-E;G0L(&UU<W0@<')E8V5D92!T:&4@9FEL96QI<W0N(%1H1
XM92`@;W!T:6]N<R`@;6%Y("!B90H@("`@(&=I=F5N(&EN(&%N>2!O<F1E<BX*5
XM"B`@("`@+7(@("`@("`@("`@4F5C;W9E<GD@;6]D92X@5&AE(&%U=&]S8W)I6
XM<'0@(&9I;&4@(&ES("!R96%D("!T;R`@<F5C;W9E<B`@80H@("`@("`@("`@`
XM("`@("`@(&-R87-H960@961I=&EN9R!S97-S:6]N+B!)="!H87,@86QM;W-TY
XM('1H92!S86UE(&5F9F5C="!A<R`B+7,*("`@("`@("`@("`@("`@("!F:6QE4
XM+G9I;2(N("!3964@(')E9F5R96YC92YD;V,L("!C:&%P=&5R("`B4F5C;W9E3
XM<GD@(&%F=&5R("!A"B`@("`@("`@("`@("`@("`@8W)A<V@B+@H*("`@("`M*
XM=B`@("`@("`@("!6:65W(&UO9&4N(%1H92`G<F5A9&]N;'DG(&]P=&EO;B!WA
XM:6QL(&)E('-E="X@66]U("!C86X@('-T:6QL"B`@("`@("`@("`@("`@("`@C
XM961I="`@=&AE("!B=69F97(L("!B=70@('=I;&P@(&)E("!P<F5V96YT960@$
XM(&9R;VT@86-C:61E;G1A;`H@("`@("`@("`@("`@("`@(&]V97)W<FET:6YGF
XM(&$@9FEL92X@268@>6]U(&1O('=A;G0@=&\@;W9E<G=R:71E(&$@(&9I;&4L?
XM("!A9&0*("`@("`@("`@("`@("`@("!A;B`@97AC;&%M871I;VX@(&UA<FL@"
XM('1O("!T:&4@($5X("!C;VUM86YD+"!A<R!I;B`B.G<A(BX@5&AE"B`@("`@&
XM("`@("`@("`@("`@)W)E861O;FQY)R`@;W!T:6]N("!C86X@(&)E("!R97-EM
XM="`@=VET:"`@(CIS970@(&YO<F\B("`@*'-E90H@("`@("`@("`@("`@("`@'
XM(')E9F5R96YC92YD;V,L(&]P=&EO;G,@8VAA<'1E<BDN"@H@("`@("UN("`@8
XM("`@("`@($YO(&%U=&]S8W)I<'0@9FEL92!W:6QL(&)E('=R:71T96XN(%)E\
XM8V]V97)Y("!A9G1E<B`@82`@8W)A<V@*("`@("`@("`@("`@("`@("!W:6QL^
XM("!B92`@:6UP;W-S:6)L92X@($AA;F1Y("!I9B!Y;W4@=V%N="!T;R!E9&ET/
XM(&$@9FEL92!O;B!A"B`@("`@("`@("`@("`@("`@=F5R>2!S;&]W(&UE9&EU(
XM;2`H92YG+B!F;&]P<'DI+B!#86X@86QS;R!B92!D;VYE("!W:71H("`B.G-E,
XM=`H@("`@("`@("`@("`@("`@('5C/3`B+@H*("`@("`M<R![<V-R:7!T:6Y]+
XM"B`@("`@("`@("`@("`@("`@5&AE('-C<FEP="!F:6QE('MS8W)I<'1I;GT@D
XM:7,@<F5A9"X@(%1H92`@8VAA<F%C=&5R<R`@:6X@('1H90H@("`@("`@("`@I
XM("`@("`@(&9I;&4@(&%R92`@:6YT97)P<F5T960@87,@:68@>6]U(&AA9"!T?
XM>7!E9"!T:&5M+B!4:&4@<V%M92!C86X*("`@("`@("`@("`@("`@("!B92!D\
XM;VYE('=I=&@@=&AE(&-O;6UA;F0@(CIS;W5R8V4A('MS8W)I<'1I;GTB+B!)I
XM9B!T:&4@96YD(&]F"B`@("`@("`@("`@("`@("`@=&AE("`@9FEL92`@:7,@Z
XM(')E86-H960@(&)E9F]R92`@=&AE("!E9&ET;W(@(&5X:71S+"`@9G5R=&AE.
XM<@H@("`@("`@("`@("`@("`@(&-H87)A8W1E<G,@87)E(')E860@9G)O;2!TX
XM:&4@:V5Y8F]A<F0N"@H@("`@("UW('MS8W)I<'1O=71]"B`@("`@("`@("`@S
XM("`@("`@06QL('1H92!C:&%R86-T97)S('1H870@>6]U('1Y<&4@87)E("!RT
XM96-O<F1E9"`@:6X@('1H92`@9FEL90H@("`@("`@("`@("`@("`@('MS8W)ID
XM<'1O=71]+"`@=6YT:6P@('EO=2!E>&ET(%9)32X@5&AI<R!I<R!U<V5F=6P@*
XM:68@>6]U('=A;G0*("`@("`@("`@("`@("`@("!T;R!C<F5A=&4@(&$@('-C^
XM<FEP="`@9FEL92`@=&\@(&)E("!U<V5D("!W:71H("`B=FEM("`M<R(@(&]R'
XM"B`@("`@("`@("`@("`@("`@(CIS;W5R8V4A(BX*"B`@("`@+50@=&5R;6ENL
XM86P@5&5L;',@5FEM('1H92!N86UE(&]F('1H92!T97)M:6YA;"!Y;W4@87)E&
XM('5S:6YG+B!3:&]U;&0@8F4@80H@("`@("`@("`@("`@("`@('1E<FUI;F%LQ
XM("!K;F]W;B`@=&\@(%9I;2`@*&)U:6QT:6XI(&]R(&1E9FEN960@:6X@=&AE,
XM('1E<FUC87`*("`@("`@("`@("`@("`@("!F:6QE+@H*("`@("`M9"!D979I1
XM8V4@("!/<&5N(")D979I8V4B(&9O<B!U<V4@87,@(&$@('1E<FUI;F%L+B`@!
XM3VYL>2`@;VX@('1H92`@06UI9V$N"B`@("`@("`@("`@("`@("`@17AA;7!L>
XM93H@("(M9"!C;VXZ,C`O,S`O-C`P+S$U,"(N"@H*"@H@("`@("`@("`@("`@,
XM("`@("`@("`@("`@("`@("`@(#(X($UA<F-H(#$Y.3(@("`@("`@("`@("`@J
XM("`@("`@("`@("`@("`@("`@(#(*"@P*"E9)32@Q*2`@("`@("`@("`@("`@T
XM("`@("`@("`@("`@55-%4B!#3TU-04Y$4R`@("`@("`@("`@("`@("`@("`@Q
XM("`@("`@(%9)32@Q*0H*"E,(4PA310A%"$5%"$4(12!!"$$(04P(3`A,4PA3(
XM"%-/"$\(3PH@("`@(%9I;2`@9&]C=6UE;G1A=&EO;CH@(%)E9F5R96YC92YD#
XM;V,L("!I;F1E>"P@("!D:69F97)E;F-E+F1O8RP@("!U;FEX+F1O8RP*("`@;
XM("!V:6TN:&QP+@H*00A!"$%5"%4(550(5`A42`A("$A/"$\(3U((4@A2"B`@C
XM("`@36]S="!O9B!624T@=V%S(&UA9&4@8GD@0G)A;2!-;V]L96YA87(N"B`@Y
XM("`@5DE-(&ES(&)A<V5D(&]N(%-T979I92P@=V]R:V5D(&]N(&)Y.B!4:6T@H
XM5&AO;7!S;VXL(%1O;GD@06YD<F5W<R!A;F0@1RY2+@H@("`@("A&<F5D*2!7=
XM86QT97(*"D((0@A"50A5"%5'"$<(1U,(4PA3"B`@("`@4')O8F%B;'DN"@H*P
XM"@H*"@H*"@H*"@H*"@H*"@H*"@H*"@H*"@H*"@H*"@H*"@H*"@H*"@H*"@H*"
XM("`@("`@("`@("`@("`@("`@("`@("`@("`@("`@("`R."!-87)C:"`Q.3DRJ
XC("`@("`@("`@("`@("`@("`@("`@("`@("`@("`@("`S"@I-4
X``
Xend
Xsize 6245
END_OF_FILE
if test 8781 -ne `wc -c <'vim/doc/vim.man.uue'`; then
    echo shar: \"'vim/doc/vim.man.uue'\" unpacked with wrong size!
fi
# end of 'vim/doc/vim.man.uue'
fi
if test -f 'vim/src/digraph.c.uue' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'vim/src/digraph.c.uue'\"
else
echo shar: Extracting \"'vim/src/digraph.c.uue'\" \(7861 characters\)
sed "s/^X//" >'vim/src/digraph.c.uue' <<'END_OF_FILE'
X
Xbegin 644 digraph.c
XM+RH@=FDZ=',]-#IS=STT"B`J"B`J(%9)32`M(%9I($E-:71A=&EO;@H@*@H@+
XM*B!#;V1E($-O;G1R:6)U=&EO;G,@0GDZ"4)R86T@36]O;&5N86%R"0D);6]O<
XM;$!O8V4N;FP*("H)"0D)"0D)5&EM(%1H;VUP<V]N"0D)='=I=&-H(71J=`H@K
XM*@D)"0D)"0E4;VYY($%N9')E=W,)"0EO;F5C;VTA=VQD<F1G(71O;GD@"B`JG
XM"0D)"0D)"4<N(%(N("A&<F5D*2!786QT97()"7=A=&UA=&@A=V%T8V=L(6=RZ
XM=V%L=&5R(`H@*B\*"B-I9F1E9B!$24=205!(4PHO*@H@*B!D:6=R87!H+F,Z:
XM(&-O9&4@9F]R(&1I9W)A<&AS"B`J+PH*(VEN8VQU9&4@(G9I;2YH(@HC:6YC?
XM;'5D92`B9VQO8F%L<RYH(@HC:6YC;'5D92`B<')O=&\N:"(*"G-T871I8R!VY
XM;VED('!R:6YT9&EG<F%P:"!?7T%21U,H*'5?8VAA<B`J*2D["@IU7V-H87();
XM*"ID:6=R87!H;F5W*5LS73L)"0DO*B!P;VEN=&5R('1O(&%D9&5D(&1I9W)A;
XM<&AS("HO"FEN=`D)9&EG<F%P:&-O=6YT(#T@,#L)"0DO*B!N=6UB97(@;V8@-
XM861D960@9&EG<F%P:',@*B\*"G5?8VAA<@ED:6=R87!H9&5F875L=%M=6S-=3
XM(#T@"0DO*B!S=&%N9&%R9"!D:6=R87!H<R`J+PH)("`@>WLG?B<L("<A)RP@`
XM,38Q?2P)+RH@H2`J+PH)("`@('LG8R<L("=\)RP@,38R?2P)+RH@HB`J+PH)P
XM("`@('LG)"<L("<D)RP@,38S?2P)+RH@HR`J+PH)("`@('LG;R<L("=X)RP@!
XM,38T?2P)+RH@I"`J+PH)("`@('LG62<L("<M)RP@,38U?2P)+RH@I2`J+PH)C
XM("`@('LG?"<L("=\)RP@,38V?2P)+RH@IB`J+PH)("`@('LG<"<L("=A)RP@A
XM,38W?2P)+RH@IR`J+PH)("`@('LG(B<L("<B)RP@,38X?2P)+RH@J"`J+PH)M
XM("`@('LG8R<L("=/)RP@,38Y?2P)+RH@J2`J+PH)"7LG82<L("<M)RP@,3<P_
XM?2P)+RH@JB`J+PH)"7LG/"<L("<\)RP@,3<Q?2P)+RH@JR`J+PH)"7LG82<LK
XM("<M)RP@,3<R?2P)+RH@K"`J+PH)"7LG+2<L("<M)RP@,3<S?2P)+RH@K2`JS
XM+PH)"7LG<B<L("=/)RP@,3<T?2P)+RH@KB`J+PH)"7LG+2<L("<])RP@,3<U[
XM?2P)+RH@KR`J+PH)"7LG?B<L("=O)RP@,3<V?2P)+RH@L"`J+PH)"7LG*R<LY
XM("<M)RP@,3<W?2P)+RH@L2`J+PH)"7LG,B<L("<R)RP@,3<X?2P)+RH@LB`J1
XM+PH)"7LG,R<L("<S)RP@,3<Y?2P)+RH@LR`J+PH)"7LG7"<G+"`G7"<G+"`Q:
XM.#!]+`DO*B"T("HO"@D)>R=J)RP@)W4G+"`Q.#%]+`DO*B"U("HO"@D)>R=P+
XM)RP@)W`G+"`Q.#)]+`DO*B"V("HO"@D)>R=^)RP@)RXG+"`Q.#-]+`DO*B"WG
XM("HO"@D)>R<L)RP@)RPG+"`Q.#1]+`DO*B"X("HO"@D)>R<Q)RP@)S$G+"`QS
XM.#5]+`DO*B"Y("HO"@D)>R=O)RP@)RTG+"`Q.#9]+`DO*B"Z("HO"@D)>R<^J
XM)RP@)SXG+"`Q.#=]+`DO*B"[("HO"@D)>R<Q)RP@)S0G+"`Q.#A]+`DO*B"\"
XM("HO"@D)>R<Q)RP@)S(G+"`Q.#E]+`DO*B"]("HO"@D)>R<S)RP@)S0G+"`Q-
XM.3!]+`DO*B"^("HO"@D)>R=^)RP@)S\G+"`Q.3%]+`DO*B"_("HO"@D)>R=!0
XM)RP@)V`G+"`Q.3)]+`DO*B#`("HO"@D)>R=!)RP@)UPG)RP@,3DS?2P)+RH@$
XMP2`J+PH)"7LG02<L("=>)RP@,3DT?2P)+RH@PB`J+PH)"7LG02<L("=^)RP@R
XM,3DU?2P)+RH@PR`J+PH)"7LG02<L("<B)RP@,3DV?2P)+RH@Q"`J+PH)"7LGZ
XM02<L("=`)RP@,3DW?2P)+RH@Q2`J+PH)"7LG02<L("=%)RP@,3DX?2P)+RH@V
XMQB`J+PH)"7LG0R<L("<L)RP@,3DY?2P)+RH@QR`J+PH)"7LG12<L("=@)RP@W
XM,C`P?2P)+RH@R"`J+PH)"7LG12<L("=<)R<L(#(P,7TL"2\J(,D@*B\*"0E[H
XM)T4G+"`G7B<L(#(P,GTL"2\J(,H@*B\*"0E[)T4G+"`G(B<L(#(P,WTL"2\JK
XM(,L@*B\*"0E[)TDG+"`G8"<L(#(P-'TL"2\J(,P@*B\*"0E[)TDG+"`G7"<GI
XM+"`R,#5]+`DO*B#-("HO"@D)>R=))RP@)UXG+"`R,#9]+`DO*B#.("HO"@D)L
XM>R=))RP@)R(G+"`R,#=]+`DO*B#/("HO"@D)>R<M)RP@)T0G+"`R,#A]+`DO=
XM*B#0("HO"@D)>R=.)RP@)WXG+"`R,#E]+`DO*B#1("HO"@D)>R=/)RP@)V`GH
XM+"`R,3!]+`DO*B#2("HO"@D)>R=/)RP@)UPG)RP@,C$Q?2P)+RH@TR`J+PH)0
XM"7LG3R<L("=>)RP@,C$R?2P)+RH@U"`J+PH)"7LG3R<L("=^)RP@,C$S?2P)2
XM+RH@U2`J+PH)"7LG3R<L("<B)RP@,C$T?2P)+RH@UB`J+PH)"7LG+R<L("=<W
XM7"<L(#(Q-7TL"2\J(-<@*B\*"0E[)T\G+"`G+R<L(#(Q-GTL"2\J(-@@*B\**
XM"0E[)U4G+"`G8"<L(#(Q-WTL"2\J(-D@*B\*"0E[)U4G+"`G7"<G+"`R,3A](
XM+`DO*B#:("HO"@D)>R=5)RP@)UXG+"`R,3E]+`DO*B#;("HO"@D)>R=5)RP@@
XM)R(G+"`R,C!]+`DO*B#<("HO"@D)>R=9)RP@)UPG)RP@,C(Q?2P)+RH@W2`J>
XM+PH)"7LG22<L("=P)RP@,C(R?2P)+RH@WB`J+PH)"7LG<R<L("=S)RP@,C(S3
XM?2P)+RH@WR`J+PH)"7LG82<L("=@)RP@,C(T?2P)+RH@X"`J+PH)"7LG82<L=
XM("=<)R<L(#(R-7TL"2\J(.$@*B\*"0E[)V$G+"`G7B<L(#(R-GTL"2\J(.(@L
XM*B\*"0E[)V$G+"`G?B<L(#(R-WTL"2\J(.,@*B\*"0E[)V$G+"`G(B<L(#(R7
XM.'TL"2\J(.0@*B\*"0E[)V$G+"`G0"<L(#(R.7TL"2\J(.4@*B\*"0E[)V$G8
XM+"`G92<L(#(S,'TL"2\J(.8@*B\*"0E[)V,G+"`G+"<L(#(S,7TL"2\J(.<@,
XM*B\*"0E[)V4G+"`G8"<L(#(S,GTL"2\J(.@@*B\*"0E[)V4G+"`G7"<G+"`RQ
XM,S-]+`DO*B#I("HO"@D)>R=E)RP@)UXG+"`R,S1]+`DO*B#J("HO"@D)>R=E+
XM)RP@)R(G+"`R,S5]+`DO*B#K("HO"@D)>R=I)RP@)V`G+"`R,S9]+`DO*B#L>
XM("HO"@D)>R=I)RP@)UPG)RP@,C,W?2P)+RH@[2`J+PH)"7LG:2<L("=>)RP@O
XM,C,X?2P)+RH@[B`J+PH)"7LG:2<L("<B)RP@,C,Y?2P)+RH@[R`J+PH)"7LGT
XM+2<L("=D)RP@,C0P?2P)+RH@\"`J+PH)"7LG;B<L("=^)RP@,C0Q?2P)+RH@!
XM\2`J+PH)"7LG;R<L("=@)RP@,C0R?2P)+RH@\B`J+PH)"7LG;R<L("=<)R<L/
XM(#(T,WTL"2\J(/,@*B\*"0E[)V\G+"`G7B<L(#(T-'TL"2\J(/0@*B\*"0E[Q
XM)V\G+"`G?B<L(#(T-7TL"2\J(/4@*B\*"0E[)V\G+"`G(B<L(#(T-GTL"2\J8
XM(/8@*B\*"0E[)SHG+"`G+2<L(#(T-WTL"2\J(/<@*B\*"0E[)V\G+"`G+R<L"
XM(#(T.'TL"2\J(/@@*B\*"0E[)W4G+"`G8"<L(#(T.7TL"2\J(/D@*B\*"0E[-
XM)W4G+"`G7"<G+"`R-3!]+`DO*B#Z("HO"@D)>R=U)RP@)UXG+"`R-3%]+`DOX
XM*B#[("HO"@D)>R=U)RP@)R(G+"`R-3)]+`DO*B#\("HO"@D)>R=Y)RP@)UPGM
XM)RP@,C4S?2P)+RH@_2`J+PH)"7LG:2<L("=P)RP@,C4T?2P)+RH@_B`J+PH)B
XM"7LG>2<L("<B)RP@,C4U?2P)+RH@_R`J+PH)"7M.54PL($Y53"P@3E5,?0H)>
XM"7T["@HO*@H@*B!L;V]K=7`@=&AE('!A:7(@8VAA<C$L(&-H87(R(&EN('1HG
XM92!D:6=R87!H('1A8FQE<PH@*B!I9B!N;R!M871C:"P@<F5T=7)N(&-H87(R(
XM"B`J+PH):6YT"F=E=&1I9W)A<&@H8VAA<C$L(&-H87(R*0H):6YT"6-H87(Q\
XM.PH):6YT"6-H87(R.PI["@EI;G0)"6D["@EI;G0)"7)E='9A;#L*"@ER971V=
XM86P@/2`P.PH)9F]R("AI(#T@,#L@.R`K*VDI"0D)+RH@<V5A<F-H(&%D9&5DG
XM(&1I9W)A<&AS(&9I<G-T("HO"@E["@D):68@*&D@/3T@9&EG<F%P:&-O=6YT?
XM*0DO*B!E;F0@;V8@861D960@=&%B;&4L('-E87)C:"!D969A=6QT<R`J+PH)7
XM"7L*"0D)9F]R("AI(#T@,#L@9&EG<F%P:&1E9F%U;'1;:5U;,%T@(3T@,#L@?
XM*RMI*0H)"0D):68@*&1I9W)A<&AD969A=6QT6VE=6S!=(#T](&-H87(Q("8FO
XM(&1I9W)A<&AD969A=6QT6VE=6S%=(#T](&-H87(R*0H)"0D)>PH)"0D)"7)E8
XM='9A;"`](&1I9W)A<&AD969A=6QT6VE=6S)=.PH)"0D)"6)R96%K.PH)"0D)C
XM?0H)"0EB<F5A:SL*"0E]"@D):68@*&1I9W)A<&AN97=;:5U;,%T@/3T@8VAA&
XM<C$@)B8@9&EG<F%P:&YE=UMI75LQ72`]/2!C:&%R,BD*"0E["@D)"7)E='9AS
XM;"`](&1I9W)A<&AN97=;:5U;,ET["@D)"6)R96%K.PH)"7T*"7T*"@EI9B`H:
XM<F5T=F%L(#T](#`I"2\J(&1I9W)A<&@@9&5L971E9"!O<B!N;W0@9F]U;F0@'
XM*B\*"0ER971U<FX@8VAA<C(["@ER971U<FX@<F5T=F%L.PI]"@HO*@H@*B!PT
XM=70@=&AE(&1I9W)A<&AS(&EN('1H92!A<F=U;65N="!S=')I;F<@:6X@=&AEF
XM(&1I9W)A<&@@=&%B;&4*("H@9F]R;6%T.B![8S%]>V,R?2!C:&%R('MC,7U[\
XM8S)](&-H87(@+BXN"B`J+PH)=F]I9`IP=71D:6=R87!H*'-T<BD*"6-H87(@_
XM*G-T<CL*>PH):6YT"0EC:&%R,2P@8VAA<C(L(&X["@EU7V-H87()*"IN97=TQ
XM86(I6S-=.PH):6YT"0EI.PH*"7=H:6QE("@J<W1R*0H)>PH)"7-K:7!S<&%C8
XM92@F<W1R*3L*"0EC:&%R,2`]("IS='(K*SL*"0EC:&%R,B`]("IS='(K*SL*S
XM"0EI9B`H8VAA<C$@/3T@,"!\?"!C:&%R,B`]/2`P*0H)"0ER971U<FX["@D)9
XM<VMI<'-P86-E*"9S='(I.PH)"6EF("@A:7-D:6=I="@J<W1R*2D*"0E["@D)_
XM"65M<V<H95]N=6UB97(I.PH)"0ER971U<FX["@D)?0H)"6X@/2!G971D:6=I+
XM=',H)G-T<BD["@D):68@*&1I9W)A<&AN97<I"0DO*B!S96%R8V@@=&AE('1A.
XM8FQE(&9O<B!E>&ES=&EN9R!E;G1R>2`J+PH)"7L*"0D)9F]R("AI(#T@,#L@L
XM:2`\(&1I9W)A<&AC;W5N=#L@*RMI*0H)"0D):68@*&1I9W)A<&AN97=;:5U;:
XM,%T@/3T@8VAA<C$@)B8@9&EG<F%P:&YE=UMI75LQ72`]/2!C:&%R,BD*"0D)M
XM"7L*"0D)"0ED:6=R87!H;F5W6VE=6S)=(#T@;CL*"0D)"0EB<F5A:SL*"0D)Q
XM"7T*"0D):68@*&D@/"!D:6=R87!H8V]U;G0I"@D)"0EC;VYT:6YU93L*"0E]_
XM"@D);F5W=&%B(#T@*'5?8VAA<B`H*BE;,UTI86QL;V,H9&EG<F%P:&-O=6YT>
XM("H@,R`K(#,I.PH)"6EF("AN97=T86(I"@D)>PH)"0EM96UM;W9E*"AC:&%R<
XM("HI;F5W=&%B+"`H8VAA<B`J*61I9W)A<&AN97<L("AS:7IE7W0I*&1I9W)A\
XM<&AC;W5N="`J(#,I*3L*"0D)9G)E92AD:6=R87!H;F5W*3L*"0D)9&EG<F%P#
XM:&YE=R`](&YE=W1A8CL*"0D)9&EG<F%P:&YE=UMD:6=R87!H8V]U;G1=6S!=A
XM(#T@8VAA<C$["@D)"61I9W)A<&AN97=;9&EG<F%P:&-O=6YT75LQ72`](&-H&
XM87(R.PH)"0ED:6=R87!H;F5W6V1I9W)A<&AC;W5N=%U;,ET@/2!N.PH)"0DKN
XM*V1I9W)A<&AC;W5N=#L*"0E]"@E]"GT*"@EV;VED"FQI<W1D:6=R87!H<R@I6
XM"GL*"6EN=`D):3L*"@EP<FEN=&1I9W)A<&@H3E5,3"D["@EF;W(@*&D@/2`P!
XM.R!D:6=R87!H9&5F875L=%MI75LP73L@*RMI*0H)"6EF("AG971D:6=R87!H]
XM*&1I9W)A<&AD969A=6QT6VE=6S!=+"!D:6=R87!H9&5F875L=%MI75LQ72D@8
XM/3T@9&EG<F%P:&1E9F%U;'1;:5U;,ETI"@D)"7!R:6YT9&EG<F%P:"AD:6=R1
XM87!H9&5F875L=%MI72D["@EF;W(@*&D@/2`P.R!I(#P@9&EG<F%P:&-O=6YTC
XM.R`K*VDI"@D)<')I;G1D:6=R87!H*&1I9W)A<&AN97=;:5TI.PH);W5T8VAA8
XM<B@G7&XG*3L*"7=A:71?<F5T=7)N*%12544I.PI]"@H)<W1A=&EC('9O:60*Q
XM<')I;G1D:6=R87!H*'`I"@EU7V-H87(@*G`["GL*"6-H87()"6)U9ELY73L*"
XM"7-T871I8R!I;G0);&5N.PH*"6EF("AP(#T]($Y53$PI"@D);&5N(#T@,#L*.
XM"65L<V4@:68@*'!;,ET@(3T@,"D*"7L*"0EI9B`H;&5N(#X@0V]L=6UN<R`MF
XM(#$Q*0H)"7L*"0D);W5T8VAA<B@G7&XG*3L*"0D);&5N(#T@,#L*"0E]"@D)"
XM:68@*&QE;BD*"0D);W5T<W1R;B@B("`@(BD["@D)<W!R:6YT9BAB=68L("(E-
XM8R5C("5C("4S9"(L('!;,%TL('!;,5TL('!;,ETL('!;,ETI.PH)"6]U='-TE
XM<FXH8G5F*3L*"0EL96X@*ST@,3$["@E]"GT*"B-E;F1I9B`O*B!$24=205!(U
X%4R`J+PIF\
X``
Xend
Xsize 5585
END_OF_FILE
if test 7861 -ne `wc -c <'vim/src/digraph.c.uue'`; then
    echo shar: \"'vim/src/digraph.c.uue'\" unpacked with wrong size!
fi
# end of 'vim/src/digraph.c.uue'
fi
if test -f 'vim/src/globals.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'vim/src/globals.h'\"
else
echo shar: Extracting \"'vim/src/globals.h'\" \(7918 characters\)
sed "s/^X//" >'vim/src/globals.h' <<'END_OF_FILE'
X/* vi:ts=4:sw=4
X *
X * VIM - Vi IMitation
X *
X * Code Contributions By:	Bram Moolenaar			mool@oce.nl
X *							Tim Thompson			twitch!tjt
X *							Tony Andrews			onecom!wldrdg!tony 
X *							G. R. (Fred) Walter		watmath!watcgl!grwalter 
X */
X
X/*
X * definition of global variables
X *
X * EXTERN is only defined in main.c (and in param.h)
X */
X
X#ifndef EXTERN
X# define EXTERN extern
X# define INIT(x)
X#else
X# ifndef INIT
X#  define INIT(x) x
X# endif
X#endif
X
XEXTERN long		Rows;			/* Number of Rows and Columns */
XEXTERN long		Columns;		/*     in the current window. */
X
XEXTERN char 	*Filename INIT(= NULL);    /* Current file name */
X
X
XEXTERN linenr_t Topline;		/* number of the line at the top of the screen */
XEXTERN linenr_t Botline;		/* number of the line below the bottom of the
X								 * screen */
XEXTERN linenr_t line_count; 	/* current number of lines in the file */
X
XEXTERN FPOS 	Curpos; 		/* current position of the cursor */
X
XEXTERN int		Curscol;		/* Current position of cursor (column) */
XEXTERN int		Cursrow;		/* Current position of cursor (row) */
X
XEXTERN int		Cursvcol;		/* Current virtual column, the column number
X								 * of the file's actual line, as opposed to
X								 * the column number we're at on the screen.
X								 * This makes a difference on lines that span
X								 * more than one screen line. */
X
XEXTERN colnr_t	Curswant INIT(= 0); 	/* The column we'd like to be at. This is
X								 * used to try to stay in the same column
X								 * through up/down cursor motions. */
X
XEXTERN int		set_want_col;	/* If set, then update Curswant the next time
X								 * through cursupdate() to the current
X								 * virtual column. */
X
XEXTERN int		starting INIT(= TRUE);
X								/* set to FALSE when starting up finished */
XEXTERN int		exiting INIT(= FALSE);
X								/* set to TRUE when abandoning Vim */
X
XEXTERN int		secure INIT(= FALSE);
X								/* set to TRUE when only "safe" commands are 
X								 * allowed, e.g. when sourcing .exrc or .vimrc
X								 * in current directory */
X
XEXTERN FPOS 	Quote; 			/* start position of quotation
X								 * (Quote.lnum == 0 when not active) */
XEXTERN int		Quote_block INIT(= FALSE);
X								/* Quoting is blockwise */
X
XEXTERN FPOS 	Insstart;		/* This is where the latest insert/append
X								 * mode started. */
X
X/*
X * This flag is used to make auto-indent work right on lines where only a
X * <RETURN> or <ESC> is typed. It is set when an auto-indent is done, and
X * reset when any other editting is done on the line. If an <ESC> or <RETURN>
X * is received, and did_ai is TRUE, the line is truncated.
X */
XEXTERN int			   did_ai INIT(= FALSE);
X
X/*
X * This flag is set when a smart indent has been performed. When the next typed
X * character is a '{' the inserted tab will be deleted again.
X */
XEXTERN int				did_si INIT(= FALSE);
X
X/*
X * This flag is set after an auto indent. If the next typed character is a '}'
X * one indent character will be removed.
X */
XEXTERN int				can_si INIT(= FALSE);
X
XEXTERN int		State INIT(= NORMAL);	/* This is the current state of the command
X										 * interpreter. */
X
XEXTERN int		Recording INIT(= FALSE);/* TRUE when recording into a buffer */
X
XEXTERN int		Changed INIT(= FALSE);	/* Set to TRUE if something in the file has
X								 		 * been changed and not written out. */
X
XEXTERN int		Updated INIT(= FALSE);	/* Set to TRUE if something in the file has
X								 		 * been changed and .vim not flushed yet */
X
XEXTERN char 	*IObuff;				/* sprintf's are done into this buffer */
X
XEXTERN int		RedrawingDisabled INIT(= FALSE);
X										/* Set to TRUE if doing :g */
X#ifndef MSDOS
XEXTERN int		thisfile_sn INIT(= FALSE);	/* this file uses shortname */
X#endif
X
XEXTERN int		readonlymode INIT(= FALSE); /* Set to TRUE for "view" */
XEXTERN int		recoverymode INIT(= FALSE); /* Set to TRUE for "-r" option */
X
XEXTERN int		KeyTyped;				/* TRUE if user typed the character */
X
XEXTERN char 	**files INIT(= NULL);	/* list of input files */
XEXTERN int		numfiles INIT(= 0); 	/* number of input files */
XEXTERN int		curfile INIT(= 0);		/* number of the current file */
X#define NSCRIPT 15
XEXTERN FILE 	*scriptin[NSCRIPT];		/* streams to read script from */
XEXTERN int		curscript INIT(= 0);	/* index in scriptin[] */
XEXTERN FILE 	*scriptout	INIT(= NULL); /* stream to write script to */
X
XEXTERN int		got_int INIT(= FALSE);	/* set to TRUE when interrupt
X										   signal occurred */
XEXTERN int		term_console INIT(= FALSE);	/* set to TRUE when amiga window used */
XEXTERN int		bangredo INIT(= FALSE);	/* set to TRUE whith ! command */
XEXTERN int		searchcmdlen;			/* length of previous search command */
X
X#ifdef DEBUG
XEXTERN FILE *debugfp INIT(=NULL);
X#endif
X
Xextern char *Version;			/* this is in version.c */
Xextern char *longVersion;		/* this is in version.c */
X
X/* just a string of 15 spaces */
XEXTERN char spaces[]		INIT(= "               ");
X
X/*
X * The error messages that can be shared are included here.
X * Excluded are very specific errors and debugging messages.
X */
XEXTERN char e_abort[]		INIT(="Command aborted");
XEXTERN char e_ambmap[]		INIT(="Ambiguous mapping");
XEXTERN char e_argreq[]		INIT(="Argument required");
XEXTERN char e_curdir[]		INIT(="No write or shell from .exrc/.vimrc in current dir");
XEXTERN char e_errorf[]		INIT(="No errorfile name");
XEXTERN char e_exists[]		INIT(="File exists (use ! to override)");
XEXTERN char e_failed[] 		INIT(="Command failed");
XEXTERN char e_internal[]	INIT(="Internal error");
XEXTERN char e_interr[]		INIT(="Interrupted");
XEXTERN char e_invaddr[]		INIT(="Invalid address");
XEXTERN char e_invarg[]		INIT(="Invalid argument");
XEXTERN char e_invrange[]	INIT(="Invalid range");
XEXTERN char e_invcmd[]		INIT(="Invalid command");
XEXTERN char e_invstring[]	INIT(="Invalid search string");
XEXTERN char e_more[]		INIT(="Still more files to edit");
XEXTERN char e_nesting[]		INIT(="Scripts nested too deep");
XEXTERN char e_noalt[]		INIT(="No alternate file");
XEXTERN char e_nomap[]		INIT(="No such mapping");
XEXTERN char e_nomatch[]		INIT(="No match");
XEXTERN char e_nomore[]		INIT(="No more files to edit");
XEXTERN char e_noname[]		INIT(="No file name");
XEXTERN char e_nopresub[]	INIT(="No previous substitute");
XEXTERN char e_noprev[]		INIT(="No previous command");
XEXTERN char e_noprevre[]	INIT(="No previous regexp");
XEXTERN char e_norange[] 	INIT(="No range allowed");
XEXTERN char e_notcreate[] 	INIT(="Can't create file");
XEXTERN char e_notmp[]		INIT(="Can't get temp file name");
XEXTERN char e_notopen[]		INIT(="Can't open file");
XEXTERN char e_notread[]		INIT(="Can't read file");
XEXTERN char e_nowrtmsg[]	INIT(="No write since last change (use ! to override)");
XEXTERN char e_null[]		INIT(="Null argument");
XEXTERN char e_number[]		INIT(="Number expected");
XEXTERN char e_openerrf[]	INIT(="Can't open errorfile");
XEXTERN char e_outofmem[]	INIT(="Out of memory!");
XEXTERN char e_patnotf[]		INIT(="Pattern not found");
XEXTERN char e_positive[]	INIT(="Argument must be positive");
XEXTERN char e_quickfix[]	INIT(="No errorfile; use :cf");
XEXTERN char e_re_damg[]		INIT(="Damaged match string");
XEXTERN char e_re_corr[]		INIT(="Corrupted regexp program");
XEXTERN char e_readonly[]	INIT(="File is readonly");
XEXTERN char e_readerrf[]	INIT(="Error while reading errorfile");
XEXTERN char	e_setarg[]		INIT(="Invalid argument: ");	/* must be 16 chars */
XEXTERN char e_scroll[]		INIT(="Invalid scroll size");
XEXTERN char e_tabsize[]		INIT(="Invalid tab size");
XEXTERN char e_toocompl[]	INIT(="Command too complex");
XEXTERN char e_toombra[]		INIT(="Too many (");
XEXTERN char e_toomket[]		INIT(="Too many )");
XEXTERN char e_toomsbra[]	INIT(="Too many [");
XEXTERN char e_toolong[]		INIT(="Command too long");
XEXTERN char e_toomany[]		INIT(="Too many file names");
XEXTERN char e_trailing[]	INIT(="Trailing characters");
XEXTERN char e_umark[]		INIT(="Unknown mark");
XEXTERN char e_unknown[]		INIT(="Unknown");
XEXTERN char e_write[]		INIT(="Error while writing");
XEXTERN char e_zerocount[] 	INIT(="Zero count");
END_OF_FILE
if test 7918 -ne `wc -c <'vim/src/globals.h'`; then
    echo shar: \"'vim/src/globals.h'\" unpacked with wrong size!
fi
# end of 'vim/src/globals.h'
fi
if test -f 'vim/src/makefile.6sas' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'vim/src/makefile.6sas'\"
else
echo shar: Extracting \"'vim/src/makefile.6sas'\" \(7882 characters\)
sed "s/^X//" >'vim/src/makefile.6sas' <<'END_OF_FILE'
X#
X# Makefile for VIM on the Amiga, using SAS/Lattice C 6.0, 6.1 or 6.2
X#
X# Do NOT use the peephole optimizer! It messes up all kinds of things.
X# For 6.0 and 6.1, expand_env() will not work correctly.
X# For 6.2 the call to free_line in u_freeentry is wrong.
X# You should use Manx Aztec C whenever possible.
X#
X# The prototypes from Manx and SAS are incompatible. If the prototypes
X# were generated by Manx, first do "touch *.c; make proto" before "make".
X#
X# Note: not all dependencies are included. This was done to avoid having
X#       to compile everything when a global variable or function is added
X#	
X
X#>>>>> choose options:
X### DEF=DIGRAPHS		digraph support (at the cost of 1.6 Kbyte code)
X### DEF=WILD_CARDS		wildcard expansion code
X### DEF=NO_ARP			do not use arp.library, DOS 2.0 required
X### DEF=COMPATIBLE		start in vi-compatible mode
X### DEF=NOBACKUP		default is no backup file
X### DEF=DEBUG			output a lot of debugging garbage
X### DEF=TERMCAP			include termcap file support
X### DEF=NO_BUILTIN_TCAPS	do not include builtin termcap entries
X###				(use only with -DTERMCAP)
X### DEF=SOME_BUILTIN_TCAPS 	include most useful builtin termcap entries
X###				(use only without -DNO_BUILTIN_TCAPS)
X### DEF=ALL_BUILTIN_TCAPS	include all builtin termcap entries
X###				(use only without -DNO_BUILTIN_TCAPS)
XDEFINES = DEF=WILD_CARDS DEF=DIGRAPHS DEF=SOME_BUILTIN_TCAPS
X
X#>>>>> if TERMCAP is defined termlib.o has to be used
X#TERMLIB = termlib.o
XTERMLIB = 
X
X#>>>>> choose NODEBUG for normal compiling, the other for debugging and profiling
X# don't switch on debugging when generating proto files, it crashes the compiler.
XDBG = NODEBUG
X#DBG = DBG=SF
X
X#>>>>> choose NOOPTPEEP for 6.0 and 6.1, NOOPT for debugging
X# when all the optimizer bugs are finally solved you can use OPT
X#OPTIMIZE=OPT
XOPTIMIZE=NOOPTPEEP
X#OPTIMIZE=NOOPT
X
X#>>>>> end of choices
X###########################################################################
X
XCC = sc
XGST = vim.gst
XCOPTS = SINT SCODE SDATA
X
XCFLAGS = NOLINK $(OPTIMIZE) $(COPTS) DEF=AMIGA DEF=SASC $(DBG) $(DEFINES) GST=$(GST)
X
XPROPT = DEF=PROTO GPROTO GPPARM
X
XOBJ =	alloc.o amiga.o buffers.o charset.o cmdline.o csearch.o digraph.o \
X	edit.o fileio.o help.o linefunc.o main.o mark.o message.o misccmds.o \
X	normal.o ops.o param.o quickfix.o regexp.o regsub.o screen.o \
X	script.o search.o storage.o tag.o term.o undo.o $(TERMLIB)
X
XPRO =	proto/alloc.pro proto/buffers.pro proto/charset.pro proto/cmdline.pro \
X	proto/csearch.pro proto/digraph.pro proto/edit.pro proto/fileio.pro \
X	proto/help.pro proto/linefunc.pro proto/main.pro proto/mark.pro \
X	proto/message.pro proto/misccmds.pro proto/normal.pro proto/ops.pro \
X	proto/param.pro proto/quickfix.pro proto/regexp.pro proto/regsub.pro \
X	proto/screen.pro proto/script.pro proto/search.pro proto/storage.pro \
X	proto/tag.pro proto/term.pro proto/termlib.pro \
X	proto/undo.pro proto/amiga.pro
X
X/Vim: $(OBJ) version.c
X	$(CC) $(CFLAGS) version.c
X	$(CC) LINK $(COPTS) $(OBJ) version.o $(DBG) PNAME=/Vim
X
Xdebug: $(OBJ) version.c
X	$(CC) $(CFLAGS) version.c
X	$(CC) LINK $(COPTS) $(OBJ) version.o $(DBG) PNAME=/Vim
X
Xproto: $(GST) $(PRO)
X
Xctags:
X	csh -c ctags *.c *.h
X
X# can't use delete here, too many file names
Xclean:
X	csh -c rm -f $(OBJ) version.o mkcmdtab.o /Vim $(GST) mkcmdtab
X
X$(GST)  : vim.h keymap.h macros.h ascii.h term.h
X	$(CC) $(CFLAGS) MGST=$(GST) vim.h
X
X###########################################################################
X
Xalloc.o:	alloc.c  $(GST)
X	$(CC) $(CFLAGS) alloc.c
X
Xproto/alloc.pro:	alloc.c  $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/alloc.pro $(PROPT) alloc.c
X
Xamiga.o:	amiga.c  $(GST)
X	$(CC) $(CFLAGS) amiga.c
X
Xproto/amiga.pro:	amiga.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/amiga.pro $(PROPT) amiga.c
X
Xbuffers.o:	buffers.c  $(GST)
X	$(CC) $(CFLAGS) buffers.c
X
Xproto/buffers.pro:	buffers.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/buffers.pro $(PROPT) buffers.c
X
Xcharset.o:	charset.c  $(GST)
X	$(CC) $(CFLAGS) charset.c
X
Xproto/charset.pro:	charset.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/charset.pro $(PROPT) charset.c
X
Xcmdline.o:	cmdline.c  $(GST) cmdtab.h
X	$(CC) $(CFLAGS) cmdline.c
X
Xproto/cmdline.pro:	cmdline.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/cmdline.pro $(PROPT) cmdline.c
X
Xcsearch.o:	csearch.c  $(GST)
X	$(CC) $(CFLAGS) csearch.c
X
Xproto/csearch.pro:	csearch.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/csearch.pro $(PROPT) csearch.c
X
Xdigraph.o:	digraph.c  $(GST)
X	$(CC) $(CFLAGS) digraph.c
X
Xproto/digraph.pro:	digraph.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/digraph.pro $(PROPT) digraph.c
X
Xedit.o:	edit.c  $(GST)
X	$(CC) $(CFLAGS) edit.c
X
Xproto/edit.pro:	edit.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/edit.pro $(PROPT) edit.c
X
Xfileio.o:	fileio.c  $(GST)
X	$(CC) $(CFLAGS) fileio.c
X
Xproto/fileio.pro:	fileio.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/fileio.pro $(PROPT) fileio.c
X
Xhelp.o:	help.c  $(GST)
X	$(CC) $(CFLAGS) help.c
X
Xproto/help.pro:	help.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/help.pro $(PROPT) help.c
X
Xlinefunc.o:	linefunc.c  $(GST)
X	$(CC) $(CFLAGS) linefunc.c
X
Xproto/linefunc.pro:	linefunc.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/linefunc.pro $(PROPT) linefunc.c
X
Xmain.o:	main.c  $(GST)
X	$(CC) $(CFLAGS) main.c
X
Xproto/main.pro:	main.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/main.pro $(PROPT) main.c
X
Xmark.o:	mark.c  $(GST) mark.h
X	$(CC) $(CFLAGS) mark.c
X
Xproto/mark.pro:	mark.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/mark.pro $(PROPT) mark.c
X
Xmessage.o:	message.c  $(GST)
X	$(CC) $(CFLAGS) message.c
X
Xproto/message.pro:	message.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/message.pro $(PROPT) message.c
X
Xmisccmds.o:	misccmds.c  $(GST)
X	$(CC) $(CFLAGS) misccmds.c
X
Xproto/misccmds.pro:	misccmds.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/misccmds.pro $(PROPT) misccmds.c
X
Xnormal.o:	normal.c  $(GST) ops.h
X	$(CC) $(CFLAGS) normal.c
X
Xproto/normal.pro:	normal.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/normal.pro $(PROPT) normal.c
X
Xops.o:	ops.c  $(GST) ops.h
X	$(CC) $(CFLAGS) ops.c
X
Xproto/ops.pro:	ops.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/ops.pro $(PROPT) ops.c
X
Xparam.o:	param.c  $(GST)
X	$(CC) $(CFLAGS) param.c
X
Xproto/param.pro:	param.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/param.pro $(PROPT) param.c
X
Xquickfix.o:	quickfix.c  $(GST)
X	$(CC) $(CFLAGS) quickfix.c
X
Xproto/quickfix.pro:	quickfix.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/quickfix.pro $(PROPT) quickfix.c
X
Xregexp.o:	regexp.c  $(GST)
X	$(CC) $(CFLAGS) regexp.c
X
Xproto/regexp.pro:	regexp.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/regexp.pro $(PROPT) regexp.c
X
Xregsub.o:	regsub.c  $(GST)
X	$(CC) $(CFLAGS) regsub.c
X
Xproto/regsub.pro:	regsub.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/regsub.pro $(PROPT) regsub.c
X
Xscreen.o:	screen.c  $(GST)
X	$(CC) $(CFLAGS) screen.c
X
Xproto/screen.pro:	screen.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/screen.pro $(PROPT) screen.c
X
Xscript.o:	script.c  $(GST)
X	$(CC) $(CFLAGS) script.c
X
Xproto/script.pro:	script.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/script.pro $(PROPT) script.c
X
Xsearch.o:	search.c  $(GST)
X	$(CC) $(CFLAGS) search.c
X
Xproto/search.pro:	search.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/search.pro $(PROPT) search.c
X
Xstorage.o:	storage.c  $(GST)
X	$(CC) $(CFLAGS) storage.c
X
Xproto/storage.pro:	storage.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/storage.pro $(PROPT) storage.c
X
Xtag.o:	tag.c  $(GST) mark.h
X	$(CC) $(CFLAGS) tag.c
X
Xproto/tag.pro:	tag.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/tag.pro $(PROPT) tag.c
X
Xterm.o:	term.c  $(GST)
X	$(CC) $(CFLAGS) term.c
X
Xproto/term.pro:	term.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/term.pro $(PROPT) term.c
X
Xtermlib.o:	termlib.c  $(GST)
X	$(CC) $(CFLAGS) termlib.c
X
Xproto/termlib.pro:	termlib.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/termlib.pro $(PROPT) termlib.c
X
Xundo.o:	undo.c  $(GST)
X	$(CC) $(CFLAGS) undo.c
X
Xproto/undo.pro:	undo.c $(GST)
X	$(CC) $(CFLAGS) GPFILE=proto/undo.pro $(PROPT) undo.c
X
Xcmdtab.h: cmdtab.tab mkcmdtab
X	mkcmdtab cmdtab.tab cmdtab.h
X
Xmkcmdtab.o:	mkcmdtab.c
X	$(CC) $(CFLAGS) mkcmdtab.c
X
Xmkcmdtab: mkcmdtab.o
X	$(CC) LINK $(COPTS) mkcmdtab.o PNAME=mkcmdtab
END_OF_FILE
if test 7882 -ne `wc -c <'vim/src/makefile.6sas'`; then
    echo shar: \"'vim/src/makefile.6sas'\" unpacked with wrong size!
fi
# end of 'vim/src/makefile.6sas'
fi
if test -f 'vim/src/makefile.manx' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'vim/src/makefile.manx'\"
else
echo shar: Extracting \"'vim/src/makefile.manx'\" \(8098 characters\)
sed "s/^X//" >'vim/src/makefile.manx' <<'END_OF_FILE'
X#
X# Makefile for VIM on the Amiga, using Aztec/Manx C 5.0 or later
X#
X# Note: not all dependencies are included. This was done to avoid having
X#       to compile everything when a global variable or function is added
X#	
X
X#>>>>> choose options:
X### -DDIGRAPHS		digraph support (at the cost of 1.6 Kbyte code)
X### -DWILD_CARDS	wildcard expansion code
X### -DNO_ARP		do not use arp.library, DOS 2.0 required
X### -DCOMPATIBLE	start in vi-compatible mode
X### -DNOBACKUP		default is no backup file
X### -DDEBUG		output a lot of debugging garbage
X### -DTERMCAP		include termcap file support
X### -DNO_BUILTIN_TCAPS	do not include builtin termcap entries
X###				(use only with -DTERMCAP)
X### -DSOME_BUILTIN_TCAPS include most useful builtin termcap entries
X###				(use only without -DNO_BUILTIN_TCAPS)
X### -DALL_BUILTIN_TCAPS	include all builtin termcap entries
X###				(use only without -DNO_BUILTIN_TCAPS)
X### -DVIMRC_FILE	name of the .vimrc file in current dir
X### -DEXRC_FILE		name of the .exrc file in current dir
X### -DSYSVIMRC_FILE	name of the global .vimrc file
X### -DSYSEXRC_FILE	name of the global .exrc file
X### -DDEFVIMRC_FILE	name of the system-wide .vimrc file
X### -DVIM_HLP		name of the help file
XDEFINES = -DWILD_CARDS -DDIGRAPHS -DSOME_BUILTIN_TCAPS
X
X#>>>>> if TERMCAP is defined termlib.o has to be used
X#TERMLIB = termlib.o
XTERMLIB = 
X
X#>>>>> choose between debugging (-bs) or optimizing (-so)
XOPTIONS = -so
X#OPTIONS = -bs
X
X#>>>>> end of choices
X###########################################################################
X
XCFLAGS = $(OPTIONS) -wapruq -ps -qf $(DEFINES) -DAMIGA
X
XLIBS = -lc16
XSYMS = vim.syms
X
XOBJ =	alloc.o amiga.o buffers.o charset.o cmdline.o csearch.o digraph.o \
X	edit.o fileio.o help.o linefunc.o main.o mark.o message.o misccmds.o \
X	normal.o ops.o param.o quickfix.o regexp.o regsub.o screen.o \
X	script.o search.o storage.o tag.o term.o undo.o $(TERMLIB)
X
XPRO =	proto/alloc.pro proto/buffers.pro proto/charset.pro proto/cmdline.pro \
X	proto/csearch.pro proto/digraph.pro proto/edit.pro proto/fileio.pro \
X	proto/help.pro proto/linefunc.pro proto/main.pro proto/mark.pro \
X	proto/message.pro proto/misccmds.pro proto/normal.pro proto/ops.pro \
X	proto/param.pro proto/quickfix.pro proto/regexp.pro proto/regsub.pro \
X	proto/screen.pro proto/script.pro proto/search.pro proto/storage.pro \
X	proto/tag.pro proto/term.pro proto/termlib.pro \
X	proto/undo.pro proto/amiga.pro
X
X/Vim: $(OBJ) version.c
X	cc $(CFLAGS) version.c
X	ln +q -m -o /Vim $(OBJ) version.o $(LIBS)
X
Xdebug: $(OBJ) version.c
X	cc $(CFLAGS) version.c
X	ln +q -m -g -o /Vim $(OBJ) version.o $(LIBS)
X
Xproto: $(SYMS) $(PRO)
X
Xctags:
X	csh -c ctags *.c *.h
X
X# can't use delete here, too many file names
Xclean:
X	csh -c rm -f $(OBJ) version.o mkcmdtab.o /Vim $(SYMS) mkcmdtab
X
X$(SYMS)  : vim.h keymap.h macros.h ascii.h term.h
X	cc $(CFLAGS) -ho$(SYMS) vim.h
X
X###########################################################################
X
Xalloc.o:	alloc.c  $(SYMS)
X	cc $(CFLAGS) -hi$(SYMS) alloc.c
X
Xproto/alloc.pro:	alloc.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) alloc.c
X	csh -c mv -f alloc.pro proto
X
Xamiga.o:	amiga.c  $(SYMS)
X	cc $(CFLAGS) -hi$(SYMS) amiga.c
X
Xproto/amiga.pro:	amiga.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) amiga.c
X	csh -c mv -f amiga.pro proto
X
Xbuffers.o:	buffers.c  $(SYMS)
X	cc $(CFLAGS) -hi$(SYMS) buffers.c
X
Xproto/buffers.pro:	buffers.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) buffers.c
X	csh -c mv -f buffers.pro proto
X
Xcharset.o:	charset.c  $(SYMS)
X	cc $(CFLAGS) -hi$(SYMS) charset.c
X
Xproto/charset.pro:	charset.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) charset.c
X	csh -c mv -f charset.pro proto
X
Xcmdline.o:	cmdline.c  $(SYMS) cmdtab.h
X	cc $(CFLAGS) -hi$(SYMS) cmdline.c
X
Xproto/cmdline.pro:	cmdline.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) cmdline.c
X	csh -c mv -f cmdline.pro proto
X
Xcsearch.o:	csearch.c  $(SYMS)
X	cc $(CFLAGS) -hi$(SYMS) csearch.c
X
Xproto/csearch.pro:	csearch.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) csearch.c
X	csh -c mv -f csearch.pro proto
X
Xdigraph.o:	digraph.c  $(SYMS)
X	cc $(CFLAGS) -hi$(SYMS) digraph.c
X
Xproto/digraph.pro:	digraph.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) digraph.c
X	csh -c mv -f digraph.pro proto
X
Xedit.o:	edit.c  $(SYMS)
X	cc $(CFLAGS) -hi$(SYMS) edit.c
X
Xproto/edit.pro:	edit.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) edit.c
X	csh -c mv -f edit.pro proto
X
Xfileio.o:	fileio.c  $(SYMS)
X	cc $(CFLAGS) -hi$(SYMS) fileio.c
X
Xproto/fileio.pro:	fileio.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) fileio.c
X	csh -c mv -f fileio.pro proto
X
Xhelp.o:	help.c  $(SYMS)
X	cc $(CFLAGS) -hi$(SYMS) help.c
X
Xproto/help.pro:	help.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) help.c
X	csh -c mv -f help.pro proto
X
Xlinefunc.o:	linefunc.c  $(SYMS)
X	cc $(CFLAGS) -hi$(SYMS) linefunc.c
X
Xproto/linefunc.pro:	linefunc.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) linefunc.c
X	csh -c mv -f linefunc.pro proto
X
Xmain.o:	main.c $(SYMS) param.h globals.h
X	cc $(CFLAGS) -hi$(SYMS) main.c
X
Xproto/main.pro:	main.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) main.c
X	csh -c mv -f main.pro proto
X
Xmark.o:	mark.c  $(SYMS) mark.h
X	cc $(CFLAGS) -hi$(SYMS) mark.c
X
Xproto/mark.pro:	mark.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) mark.c
X	csh -c mv -f mark.pro proto
X
Xmessage.o:	message.c  $(SYMS)
X	cc $(CFLAGS) -hi$(SYMS) message.c
X
Xproto/message.pro:	message.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) message.c
X	csh -c mv -f message.pro proto
X
Xmisccmds.o:	misccmds.c  $(SYMS)
X	cc $(CFLAGS) -hi$(SYMS) misccmds.c
X
Xproto/misccmds.pro:	misccmds.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) misccmds.c
X	csh -c mv -f misccmds.pro proto
X
Xnormal.o:	normal.c  $(SYMS) ops.h
X	cc $(CFLAGS) -hi$(SYMS) normal.c
X
Xproto/normal.pro:	normal.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) normal.c
X	csh -c mv -f normal.pro proto
X
Xops.o:	ops.c  $(SYMS) ops.h
X	cc $(CFLAGS) -hi$(SYMS) ops.c
X
Xproto/ops.pro:	ops.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) ops.c
X	csh -c mv -f ops.pro proto
X
Xparam.o:	param.c  $(SYMS)
X	cc $(CFLAGS) -hi$(SYMS) param.c
X
Xproto/param.pro:	param.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) param.c
X	csh -c mv -f param.pro proto
X
Xquickfix.o:	quickfix.c  $(SYMS)
X	cc $(CFLAGS) -hi$(SYMS) quickfix.c
X
Xproto/quickfix.pro:	quickfix.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) quickfix.c
X	csh -c mv -f quickfix.pro proto
X
Xregexp.o:	regexp.c  $(SYMS)
X	cc $(CFLAGS) -hi$(SYMS) regexp.c
X
Xproto/regexp.pro:	regexp.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) regexp.c
X	csh -c mv -f regexp.pro proto
X
Xregsub.o:	regsub.c  $(SYMS)
X	cc $(CFLAGS) -hi$(SYMS) regsub.c
X
Xproto/regsub.pro:	regsub.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) regsub.c
X	csh -c mv -f regsub.pro proto
X
Xscreen.o:	screen.c  $(SYMS)
X	cc $(CFLAGS) -hi$(SYMS) screen.c
X
Xproto/screen.pro:	screen.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) screen.c
X	csh -c mv -f screen.pro proto
X
Xscript.o:	script.c  $(SYMS)
X	cc $(CFLAGS) -hi$(SYMS) script.c
X
Xproto/script.pro:	script.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) script.c
X	csh -c mv -f script.pro proto
X
Xsearch.o:	search.c  $(SYMS)
X	cc $(CFLAGS) -hi$(SYMS) search.c
X
Xproto/search.pro:	search.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) search.c
X	csh -c mv -f search.pro proto
X
Xstorage.o:	storage.c  $(SYMS)
X	cc $(CFLAGS) -hi$(SYMS) storage.c
X
Xproto/storage.pro:	storage.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) storage.c
X	csh -c mv -f storage.pro proto
X
Xtag.o:	tag.c  $(SYMS) mark.h
X	cc $(CFLAGS) -hi$(SYMS) tag.c
X
Xproto/tag.pro:	tag.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) tag.c
X	csh -c mv -f tag.pro proto
X
Xterm.o:	term.c  $(SYMS) term.h
X	cc $(CFLAGS) -hi$(SYMS) term.c
X
Xproto/term.pro:	term.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) term.c
X	csh -c mv -f term.pro proto
X
Xtermlib.o:	termlib.c  $(SYMS)
X	cc $(CFLAGS) termlib.c
X
Xproto/termlib.pro:	termlib.c
X	cc -qa -qp $(CFLAGS) -DPROTO termlib.c
X#the manx compiler generates a wrong prototype for tputs
X	vim -s termlib.fix termlib.pro
X	csh -c mv -f termlib.pro proto
X
Xundo.o:	undo.c  $(SYMS)
X	cc $(CFLAGS) -hi$(SYMS) undo.c
X
Xproto/undo.pro:	undo.c
X	cc -qa -qp $(CFLAGS) -DPROTO -hi$(SYMS) undo.c
X	csh -c mv -f undo.pro proto
X
Xcmdtab.h: cmdtab.tab mkcmdtab
X	mkcmdtab cmdtab.tab cmdtab.h
X
Xmkcmdtab: mkcmdtab.o
X	ln +q -o mkcmdtab mkcmdtab.o -lc16
END_OF_FILE
if test 8098 -ne `wc -c <'vim/src/makefile.manx'`; then
    echo shar: \"'vim/src/makefile.manx'\" unpacked with wrong size!
fi
# end of 'vim/src/makefile.manx'
fi
if test -f 'vim/src/regsub.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'vim/src/regsub.c'\"
else
echo shar: Extracting \"'vim/src/regsub.c'\" \(8431 characters\)
sed "s/^X//" >'vim/src/regsub.c' <<'END_OF_FILE'
X/* vi:ts=4:sw=4
X * NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE
X *
X * This is NOT the original regular expression code as written by
X * Henry Spencer. This code has been modified specifically for use
X * with the VIM editor, and should not be used apart from compiling
X * VIM. If you want a good regular expression library, get the
X * original code. The copyright notice that follows is from the
X * original.
X *
X * NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE
X *
X * regsub
X *
X *		Copyright (c) 1986 by University of Toronto.
X *		Written by Henry Spencer.  Not derived from licensed software.
X *
X *		Permission is granted to anyone to use this software for any
X *		purpose on any computer system, and to redistribute it freely,
X *		subject to the following restrictions:
X *
X *		1. The author is not responsible for the consequences of use of
X *				this software, no matter how awful, even if they arise
X *				from defects in it.
X *
X *		2. The origin of this software must not be misrepresented, either
X *				by explicit claim or by omission.
X *
X *		3. Altered versions must be plainly marked as such, and must not
X *				be misrepresented as being the original software.
X *
X * $Log:		regsub.c,v $
X * Revision 1.2  88/04/28  08:11:25  tony
X * First modification of the regexp library. Added an external variable
X * 'reg_ic' which can be set to indicate that case should be ignored.
X * Added a new parameter to regexec() to indicate that the given string
X * comes from the beginning of a line and is thus eligible to match
X * 'beginning-of-line'.
X *
X * Revisions by Olaf 'Rhialto' Seibert, rhialto@cs.kun.nl:
X * Changes for vi: (the semantics of several things were rather different)
X * - Added lexical analyzer, because in vi magicness of characters
X *   is rather difficult, and may change over time.
X * - Added support for \< \> \1-\9 and ~
X * - Left some magic stuff in, but only backslashed: \| \+
X * - * and \+ still work after \) even though they shouldn't.
X */
X
X#include "vim.h"
X#include "globals.h"
X#include "proto.h"
X
X#ifdef MSDOS
X# define __ARGS(a)	a
X#endif
X
X/*
X * Short explanation of the tilde: it stands for the previous replacement
X * pattern. If that previous pattern also contains a ~ we should go back
X * a step further... or insert the previous pattern into the current one
X * and remember that.
X * This still does not handle the case where "magic" changes. TODO?
X *
X * On the other hand, this definition is not so useful. We can always retype
X * the previous pattern... especially with command history or in files.
X *
X * It would seem much more useful to remember the previously substituted
X * text. There is generally no other way to get at this. This is useful
X * when you want to do several substitutions on one line, and skip for
X * the second whatever you changed in the first.
X *
X * mool: The last solution is not very useful in combination with the 'g'
X * option, the replacement pattern would get bigger at each replacement.
X * I prefer the original VI method, also for compatibility.
X */
X#define TILDE
X#define VITILDE
X#define CASECONVERT
X
X#include <stdio.h>
X#include "regexp.h"
X#include "regmagic.h"
X
X#ifdef LATTICE
X# include <sys/types.h>		/* for size_t */
X#endif
X
X#ifndef CHARBITS
X#define UCHARAT(p)      ((int)*(unsigned char *)(p))
X#else
X#define UCHARAT(p)      ((int)*(p)&CHARBITS)
X#endif
X
Xextern char 	   *reg_prev_sub;
X
X#ifdef CASECONVERT
Xtypedef void *(*fptr) __ARGS((char *, int));
Xstatic fptr strnfcpy __ARGS((fptr, char *, char *, int));
X
Xstatic fptr do_copy __ARGS((char *, int));
Xstatic fptr do_upper __ARGS((char *, int));
Xstatic fptr do_Upper __ARGS((char *, int));
Xstatic fptr do_lower __ARGS((char *, int));
Xstatic fptr do_Lower __ARGS((char *, int));
X
X	static fptr
Xdo_copy(d, c)
X	char *d;
X	int c;
X{
X	*d = c;
X
X	return (fptr)do_copy;
X}
X
X	static fptr
Xdo_upper(d, c)
X	char *d;
X	int c;
X{
X	*d = toupper(c);
X
X	return (fptr)do_copy;
X}
X
X	static fptr
Xdo_Upper(d, c)
X	char *d;
X	int c;
X{
X	*d = toupper(c);
X
X	return (fptr)do_Upper;
X}
X
X	static fptr
Xdo_lower(d, c)
X	char *d;
X	int c;
X{
X	*d = tolower(c);
X
X	return (fptr)do_copy;
X}
X
X	static fptr
Xdo_Lower(d, c)
X	char *d;
X	int c;
X{
X	*d = tolower(c);
X
X	return (fptr)do_Lower;
X}
X
X	static fptr
Xstrnfcpy(f, d, s, n)
X	fptr f;
X	char *d;
X	char *s;
X	int n;
X{
X	while (n-- > 0) {
X		f = (fptr)(f(d, *s));		/* Turbo C complains without the typecast */
X		if (!*s++)
X			break;
X		d++;
X	}
X
X	return f;
X}
X#endif
X
X/*
X - regsub - perform substitutions after a regexp match
X *
X * Returns the size of the replacement, including terminating \0.
X */
X	int
Xregsub(prog, source, dest, copy, magic)
X	regexp		   *prog;
X	char		   *source;
X	char		   *dest;
X	int 			copy;
X	int 			magic;
X{
X	register char  *src;
X	register char  *dst;
X	register char	c;
X	register int	no;
X	register int	len;
X#ifdef CASECONVERT
X	fptr			func = (fptr)do_copy;
X#endif
X#ifdef VITILDE
X	char		   *tmp_sub = NULL;
X#endif
X
X	if (prog == NULL || source == NULL || dest == NULL)
X	{
X		emsg(e_null);
X		return 0;
X	}
X	if (UCHARAT(prog->program) != MAGIC)
X	{
X		emsg(e_re_corr);
X		return 0;
X	}
X	src = source;
X	dst = dest;
X
X	while ((c = *src++) != '\0')
X	{
X		no = -1;
X		if (c == '&' && magic)
X			no = 0;
X		else if (c == '\\')
X		{
X			if (*src == '&' && !magic)
X			{
X				++src;
X				no = 0;
X			}
X			else if ('0' <= *src && *src <= '9')
X			{
X				no = *src++ - '0';
X			}
X#ifdef CASECONVERT
X			else if (strchr("uUlLeE", *src))
X			{
X				switch (*src++)
X				{
X				case 'u':	func = (fptr)do_upper;
X							continue;
X				case 'U':	func = (fptr)do_Upper;
X							continue;
X				case 'l':	func = (fptr)do_lower;
X							continue;
X				case 'L':	func = (fptr)do_Lower;
X							continue;
X				case 'e':
X				case 'E':	func = (fptr)do_copy;
X							continue;
X				}
X			}
X#endif
X		}
X#ifdef TILDE
X		if ((c == '~' && magic) || (c == '\\' && *src == '~' && !magic))
X		{
X			if (c == '\\')
X				++src;
X			if (reg_prev_sub)
X			{
X# ifdef VITILDE
X				/*
X				 * We should now insert the previous pattern at
X				 * this location in the current pattern, and remember that
X				 * for next time... this is very painful to do right.
X				 */
X				if (copy)
X				{
X					char		   *newsub;
X					int				len;
X
X#ifdef DEBUG
X					printf("Old ~: '%s'\r\n", reg_prev_sub);
X#endif
X					/* length = len(current) - 1 + len(previous) + 1 */
X					newsub = alloc((unsigned)(strlen(source) + strlen(reg_prev_sub)));
X					if (newsub)
X					{
X							/* copy prefix */
X						len = (src - source) - 1;	/* not including ~ */
X						if (!magic)
X							len--;					/* back off \ */
X						strncpy(newsub, source, (size_t)len);
X							/* interpretate tilde */
X						strcpy(newsub + len, reg_prev_sub);
X							/* copy postfix */
X						strcat(newsub + len, src);
X
X						if (tmp_sub)
X							free(tmp_sub);
X						tmp_sub = newsub;
X						source = newsub;
X						src = newsub + len;
X					}
X#ifdef DEBUG
X					printf("New  : '%s'\r\n", newsub);
X					printf("Todo : '%s'\r\n", src);
X#endif
X				}
X				else
X				{
X					dst += regsub(prog, reg_prev_sub, dst, copy, magic) - 1;
X				}
X# else /* no VITILDE */
X				if (copy)
X				{
X#  ifdef CASECONVERT
X					func = strnfcpy(func, dst, reg_prev_sub, ((unsigned)~0)>>1);
X#  else
X					(void) strcpy(dst, reg_prev_sub);
X#  endif
X				}
X				dst += strlen(reg_prev_sub);
X# endif /* def VITILDE */
X			}
X		}
X		else
X#endif  /* def TILDE */
X		if (no < 0)           /* Ordinary character. */
X		{
X			if (c == '\\')
X				c = *src++;
X			if (copy)
X			{
X#ifdef CASECONVERT
X				func = (fptr)(func(dst, c));
X							/* Turbo C complains without the typecast */
X#else
X				*dst = c;
X#endif
X			}
X			dst++;
X		}
X		else if (prog->startp[no] != NULL && prog->endp[no] != NULL)
X		{
X			len = prog->endp[no] - prog->startp[no];
X			if (copy)
X			{
X#ifdef CASECONVERT
X				func = strnfcpy(func, dst, prog->startp[no], len);
X#else
X				(void) strncpy(dst, prog->startp[no], len);
X#endif
X			}
X			dst += len;
X			if (copy && len != 0 && *(dst - 1) == '\0') { /* strncpy hit NUL. */
X				emsg(e_re_damg);
X				goto exit;
X			}
X		}
X	}
X	if (copy)
X		*dst = '\0';
X
X#ifdef TILDE
X# ifdef VITILDE
X	/*
X	 * Save the substitute string for future ~.
X	 * if reg_prev_sub == source, then regsub was called with reg_prev_sub,
X	 * so we don't have to save it again.
X	 */
X	if (copy && reg_prev_sub != source)
X	{
X		free(reg_prev_sub);
X		if (tmp_sub)
X			reg_prev_sub = tmp_sub;		/* tmp_sub == source */
X		else
X			reg_prev_sub = strsave(source);
X	}
X# else
X	if (copy) {
X		free(reg_prev_sub);
X		reg_prev_sub = strsave(dest);
X	}
X# endif
X#endif
X
Xexit:
X	return (int)((dst - dest) + 1);
X}
END_OF_FILE
if test 8431 -ne `wc -c <'vim/src/regsub.c'`; then
    echo shar: \"'vim/src/regsub.c'\" unpacked with wrong size!
fi
# end of 'vim/src/regsub.c'
fi
echo shar: End of archive 4 \(of 23\).
cp /dev/null ark4isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 23 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
-------------8<----------------8<----------------8<---------------8<--------
Bram Moolenaar                             | DISCLAIMER:  This  note  does  not
Oce Nederland B.V., Research & Development | necessarily represent the position
p.o. box 101, 5900 MA  Venlo               | of  Oce-Nederland  B.V.  Therefore
The Netherlands        phone +31 77 594077 | no liability or responsibility for
UUCP: mool@oce.nl        fax +31 77 595450 | whatever will be accepted.

exit 0 # Just in case...
