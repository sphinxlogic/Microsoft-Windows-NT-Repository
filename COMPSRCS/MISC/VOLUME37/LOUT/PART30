Newsgroups: comp.sources.misc
From: jeff@joyce.cs.su.oz.au (Jeff Kingston)
Subject: v37i128:  lout - Lout document formatting system, v2, Part30/30
Message-ID: <1993Jun2.030720.29333@sparky.imd.sterling.com>
X-Md4-Signature: 54d29d8c62f5bccc8a1b80cd036a48d5
Sender: kent@sparky.imd.sterling.com (Kent Landfield)
Organization: Sterling Software
Date: Wed, 2 Jun 1993 03:07:20 GMT
Approved: kent@sparky.imd.sterling.com

Submitted-by: jeff@joyce.cs.su.oz.au (Jeff Kingston)
Posting-number: Volume 37, Issue 128
Archive-name: lout/part30
Environment: UNIX

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# Contents:  lout/data/README lout/doc/README lout/doc/tr.begin/README
#   lout/doc/tr.begin/s00 lout/doc/tr.begin/setup
#   lout/doc/tr.eq/README lout/doc/tr.fig/README
#   lout/doc/tr.impl/README lout/doc/tr.impl/s0.0
#   lout/doc/tr.impl/s2.0 lout/doc/tr.impl/s2.9 lout/doc/tr.impl/s3.0
#   lout/doc/tr.impl/s3.9 lout/doc/tr.impl/s5.9 lout/doc/tr.impl/s6.0
#   lout/doc/tr.impl/s6.9 lout/doc/tr.lout/README
#   lout/doc/tr.lout/ch1.00 lout/doc/tr.lout/ch1.99
#   lout/doc/tr.lout/ch2.00 lout/doc/tr.lout/ch2.99
#   lout/doc/tr.lout/ch3.00 lout/doc/tr.lout/ch3.05
#   lout/doc/tr.lout/ch3.09 lout/doc/tr.lout/ch3.12
#   lout/doc/tr.lout/ch3.14 lout/doc/tr.lout/ch3.17
#   lout/doc/tr.lout/ch3.20 lout/doc/tr.lout/ch3.26
#   lout/doc/tr.lout/ch3.99 lout/doc/tr.lout/ch4.00
#   lout/doc/tr.lout/ch4.99 lout/doc/tr.tab/README
#   lout/doc/tr.tab/setup lout/font0/README lout/font1/README
#   lout/include/README
# Wrapped by kent@sparky on Sun May 30 19:44:03 1993
PATH=/bin:/usr/bin:/usr/ucb:/usr/local/bin:/usr/lbin ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 30 (of 30)."'
if test -f 'lout/data/README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/data/README'\"
else
  echo shar: Extracting \"'lout/data/README'\" \(351 characters\)
  sed "s/^X//" >'lout/data/README' <<'END_OF_FILE'
XDirectory lout/data
X
XThis directory contains Lout database files:
X
X    loutrefs.ld		References used in the various reports
X    refstyles.ld	Reference printing styles
X    standard.ld		Roman numerals, months, etc.
X
XCorresponding .li files will be created in this directory the
Xfirst time each database is accessed.
X
XJeffrey H. Kingston
X22 December 1992
END_OF_FILE
  if test 351 -ne `wc -c <'lout/data/README'`; then
    echo shar: \"'lout/data/README'\" unpacked with wrong size!
  fi
  # end of 'lout/data/README'
fi
if test -f 'lout/doc/README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/README'\"
else
  echo shar: Extracting \"'lout/doc/README'\" \(905 characters\)
  sed "s/^X//" >'lout/doc/README' <<'END_OF_FILE'
XDirectory lout/doc
X
XThis directory contains directories holding the Lout source for
Xthe various technical reports that describe the Lout document
Xformatting system:
X
Xtr.lout	  `Document Formatting with Lout', the Lout user manual;
X
Xtr.over	  `A New Approach to Document Formatting', a journal article;
X
Xtr.impl	  `The Design and Implementation of the Lout Document Formatting
X	  Language', another journal article;
X
Xtr.begin  `A Beginners' Guide to Lout', describing the @DocumentLayout
X	  package;
X
Xtr.eq	  `Eq - A Lout package for typesetting mathematics',
X	  describing the Eq equation formatter, and also the
X	  Pas Pascal program formatter;
X
Xtr.fig	  `Fig - A Lout package for drawing figures', describing
X	  the Fig figure drawing package.
X
Xtr.tab	  `Tab - A Lout package for formatting tables', describing
X	  the Tab table formatting package.
X
XJeffrey H. Kingston
X24 September 1991
X27 January 1993
END_OF_FILE
  if test 905 -ne `wc -c <'lout/doc/README'`; then
    echo shar: \"'lout/doc/README'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/README'
fi
if test -f 'lout/doc/tr.begin/README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.begin/README'\"
else
  echo shar: Extracting \"'lout/doc/tr.begin/README'\" \(540 characters\)
  sed "s/^X//" >'lout/doc/tr.begin/README' <<'END_OF_FILE'
XDirectory lout/doc/tr.begin
X
XThis directory contains the Lout source files for
Xthe Beginners' Guide to Lout technical report.  To
Xproduce the report, type the command
X
X	lout setup s?? > outfile.ps
X
Xin this directory.  This must be done three times to
Xcompletely resolve all cross references, although
Xthe PostScript file outfile.ps is printable after
Xthe first run.  Auxiliary files with .li and .ld
Xsuffixes will be created in this directory.  A copy
Xof the final outfile.ps is included.
X
XJeffrey H. Kingston
X30 July 1991
X22 December 1992
END_OF_FILE
  if test 540 -ne `wc -c <'lout/doc/tr.begin/README'`; then
    echo shar: \"'lout/doc/tr.begin/README'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.begin/README'
fi
if test -f 'lout/doc/tr.begin/s00' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.begin/s00'\"
else
  echo shar: Extracting \"'lout/doc/tr.begin/s00'\" \(717 characters\)
  sed "s/^X//" >'lout/doc/tr.begin/s00' <<'END_OF_FILE'
X@Report
X   @Title { A Beginners' Guide to Lout }
X   @Author { Jeffrey H. Kingston }
X   @Institution { Basser Department of Computer Science
XThe University of Sydney 2006
XAustralia }
X   @DateLine { 22 December, 1992 }
X   @Columns { Double }
X//
X
X@Abstract {
XThis report is a beginners' guide to the Lout document formatting
Xsystem.  It shows in a very practical, step-by-step way how to produce
Xdocuments with paragraphs, headings, fonts, displays and lists,
Xfootnotes, numbered sections, references, tables and figures, and so on,
Xusing the DocumentLayout package (Version 2), which is designed for
Xproducing simple documents, technical reports, and books.  The underlying
Xprinciples of Lout are not explained here.
X}
END_OF_FILE
  if test 717 -ne `wc -c <'lout/doc/tr.begin/s00'`; then
    echo shar: \"'lout/doc/tr.begin/s00'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.begin/s00'
fi
if test -f 'lout/doc/tr.begin/setup' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.begin/setup'\"
else
  echo shar: Extracting \"'lout/doc/tr.begin/setup'\" \(711 characters\)
  sed "s/^X//" >'lout/doc/tr.begin/setup' <<'END_OF_FILE'
X
X######################################################
X#                                                    #
X#  Lout setup file for producing a technical report  #
X#                                                    #
X#  Jeffrey H. Kingston                               #
X#  8 June 1991                                       #
X#                                                    #
X######################################################
X
X@SysInclude { ft  }
X@SysInclude { dl  }
X@SysInclude { eq  }
X@SysInclude { tab }
X@SysInclude { pas }
X@SysInclude { fig }
X
X   def @Code
X      right x
X   { { Helvetica Base -1p } @Font lines @Break x
X   }
X
X@Use { @DocumentLayout }
X
X@SysDatabase @Reference { "loutrefs"  }
END_OF_FILE
  if test 711 -ne `wc -c <'lout/doc/tr.begin/setup'`; then
    echo shar: \"'lout/doc/tr.begin/setup'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.begin/setup'
fi
if test -f 'lout/doc/tr.eq/README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.eq/README'\"
else
  echo shar: Extracting \"'lout/doc/tr.eq/README'\" \(557 characters\)
  sed "s/^X//" >'lout/doc/tr.eq/README' <<'END_OF_FILE'
XDirectory lout/doc/tr.eq
X
XThis directory contains the Lout source files for the
Xtechnical report describing the Eq equation formatting
Xpackage.  To produce the report, type the command
X
X	lout setup s? > outfile.ps
X
Xin this directory.  This must be done three times to
Xcompletely resolve all cross references, although
Xthe PostScript file outfile.ps is printable after
Xthe first run.  Auxiliary files with .li and .ld
Xsuffixes will be created in this directory.  A copy
Xof the final outfile.ps is included.
X
XJeffrey H. Kingston
X30 July 1991
X22 December 1992
END_OF_FILE
  if test 557 -ne `wc -c <'lout/doc/tr.eq/README'`; then
    echo shar: \"'lout/doc/tr.eq/README'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.eq/README'
fi
if test -f 'lout/doc/tr.fig/README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.fig/README'\"
else
  echo shar: Extracting \"'lout/doc/tr.fig/README'\" \(570 characters\)
  sed "s/^X//" >'lout/doc/tr.fig/README' <<'END_OF_FILE'
XDirectory lout/doc/tr.fig
X
XThis directory contains the Lout source files for the
Xtechnical report describing the Fig figure drawing
Xpackage (Version 2).  To produce the report, type
Xthe command
X
X	lout setup s? > outfile.ps
X
Xin this directory.  This must be done three times to
Xcompletely resolve all cross references, although
Xthe PostScript file outfile.ps is printable after
Xthe first run.  Auxiliary files with .li and .ld
Xsuffixes will be created in this directory.  A copy
Xof the final outfile.ps is included.
X
XJeffrey H. Kingston
X17 February 1992
X22 December 1992
END_OF_FILE
  if test 570 -ne `wc -c <'lout/doc/tr.fig/README'`; then
    echo shar: \"'lout/doc/tr.fig/README'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.fig/README'
fi
if test -f 'lout/doc/tr.impl/README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.impl/README'\"
else
  echo shar: Extracting \"'lout/doc/tr.impl/README'\" \(650 characters\)
  sed "s/^X//" >'lout/doc/tr.impl/README' <<'END_OF_FILE'
XDirectory lout/doc/tr.impl
X
XThis directory contains the Lout source files for the
Xreport entitled `The design and implementation of the
XLout document formatting language'  which has been
Xaccepted for publication in Software - Practice and
XExperience.  To produce the report, type the command
X
X	lout setup s?.? > outfile.ps
X
Xin this directory.  This must be done three times to
Xcompletely resolve all cross references, although
Xthe PostScript file outfile.ps is printable after
Xthe first run.  Auxiliary files with .li and .ld
Xsuffixes will be created in this directory.  A copy
Xof the final outfile.ps is included.
X
XJeffrey H. Kingston
X22 April 1993
END_OF_FILE
  if test 650 -ne `wc -c <'lout/doc/tr.impl/README'`; then
    echo shar: \"'lout/doc/tr.impl/README'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.impl/README'
fi
if test -f 'lout/doc/tr.impl/s0.0' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.impl/s0.0'\"
else
  echo shar: Extracting \"'lout/doc/tr.impl/s0.0'\" \(741 characters\)
  sed "s/^X//" >'lout/doc/tr.impl/s0.0' <<'END_OF_FILE'
X@Report
X    @Title { The Design and Implementation
Xof the
XLout Document Formatting Language }
X    @Author { Jeffrey H. Kingston }
X    @Institution { Basser Department of Computer Science,
XThe University of Sydney 2006,
XAustralia }
X    @DateLine { 27 January, 1993 }
X//
X
X@Abstract
X   @Title { SUMMARY }
X{
XLout is a high-level language for document formatting, whose ease of use
Xhas permitted an unprecedented number of advanced features to be added
Xquickly and reliably.  This paper charts the evolution of the design and
Ximplementation of Lout from conception in mid-1984 to public release in
XOctober 1991.  It includes extensive discussions of remaining problems
Xand possible solutions.
X@DP
X{@B Keywords}  document formatting typesetting
X}
END_OF_FILE
  if test 741 -ne `wc -c <'lout/doc/tr.impl/s0.0'`; then
    echo shar: \"'lout/doc/tr.impl/s0.0'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.impl/s0.0'
fi
if test -f 'lout/doc/tr.impl/s2.0' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.impl/s2.0'\"
else
  echo shar: Extracting \"'lout/doc/tr.impl/s2.0'\" \(616 characters\)
  sed "s/^X//" >'lout/doc/tr.impl/s2.0' <<'END_OF_FILE'
X@Section
X    @Title { Objects }
X@Begin
X@PP
XThe essence of any move to a higher level is the introduction of some
Xabstraction which serves to organize the low-level operations,
Xresulting in a more succinct expression of their
Xcommon combinations at the cost of some loss of detailed control.  The
Xearly part of the Lout project was spent in the development of such an
Xabstraction for the building blocks of documents, one which could
Xexplain, not just the simple phenomena of words, lines, and paragraphs,
Xbut also the alignment of columns in tables, and the complex nested
Xstructures of equations.
X@BeginSubSections
END_OF_FILE
  if test 616 -ne `wc -c <'lout/doc/tr.impl/s2.0'`; then
    echo shar: \"'lout/doc/tr.impl/s2.0'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.impl/s2.0'
fi
if test -f 'lout/doc/tr.impl/s2.9' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.impl/s2.9'\"
else
  echo shar: Extracting \"'lout/doc/tr.impl/s2.9'\" \(30 characters\)
  sed "s/^X//" >'lout/doc/tr.impl/s2.9' <<'END_OF_FILE'
X@EndSubSections
X@End @Section
END_OF_FILE
  if test 30 -ne `wc -c <'lout/doc/tr.impl/s2.9'`; then
    echo shar: \"'lout/doc/tr.impl/s2.9'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.impl/s2.9'
fi
if test -f 'lout/doc/tr.impl/s3.0' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.impl/s3.0'\"
else
  echo shar: Extracting \"'lout/doc/tr.impl/s3.0'\" \(378 characters\)
  sed "s/^X//" >'lout/doc/tr.impl/s3.0' <<'END_OF_FILE'
X@Section
X    @Title { Definitions }
X@Begin
X@PP
XThe need to provide a means of packaging useful pieces of code for easy
Xrepeated use was recognised in the very earliest programming
Xlanguages.  This need is even more acute in document formatting, if that
Xis possible, because the majority of users are not programmers and do
Xnot understand the code they invoke.
X@BeginSubSections
END_OF_FILE
  if test 378 -ne `wc -c <'lout/doc/tr.impl/s3.0'`; then
    echo shar: \"'lout/doc/tr.impl/s3.0'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.impl/s3.0'
fi
if test -f 'lout/doc/tr.impl/s3.9' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.impl/s3.9'\"
else
  echo shar: Extracting \"'lout/doc/tr.impl/s3.9'\" \(30 characters\)
  sed "s/^X//" >'lout/doc/tr.impl/s3.9' <<'END_OF_FILE'
X@EndSubSections
X@End @Section
END_OF_FILE
  if test 30 -ne `wc -c <'lout/doc/tr.impl/s3.9'`; then
    echo shar: \"'lout/doc/tr.impl/s3.9'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.impl/s3.9'
fi
if test -f 'lout/doc/tr.impl/s5.9' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.impl/s5.9'\"
else
  echo shar: Extracting \"'lout/doc/tr.impl/s5.9'\" \(30 characters\)
  sed "s/^X//" >'lout/doc/tr.impl/s5.9' <<'END_OF_FILE'
X@EndSubSections
X@End @Section
END_OF_FILE
  if test 30 -ne `wc -c <'lout/doc/tr.impl/s5.9'`; then
    echo shar: \"'lout/doc/tr.impl/s5.9'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.impl/s5.9'
fi
if test -f 'lout/doc/tr.impl/s6.0' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.impl/s6.0'\"
else
  echo shar: Extracting \"'lout/doc/tr.impl/s6.0'\" \(829 characters\)
  sed "s/^X//" >'lout/doc/tr.impl/s6.0' <<'END_OF_FILE'
X@Section
X    @Title { Cross references }
X@Begin
X@PP
XCross references, such as `see page 57' and `see Figure 5,' are a useful
Xbut highly error-prone feature of documents.  Scribe [7]
Xintroduced a method of keeping them up to date automatically as the
Xdocument changes:  the user gives each referenced entity a tag, and
Xoperators are provided that return the page or sequence number of the
Xentity with a given tag.
X@PP
XA cross reference takes an object (such as a page number) from one point
Xin the document and copies it to another, and this generalization
Xsuggests other applications.  For example, a running header is copied
Xfrom the title of a nearby chapter, and a reference is copied from a
Xbibliographic database.  Making the unity of these applications manifest
Xis an interesting language design problem.
X@BeginSubSections
END_OF_FILE
  if test 829 -ne `wc -c <'lout/doc/tr.impl/s6.0'`; then
    echo shar: \"'lout/doc/tr.impl/s6.0'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.impl/s6.0'
fi
if test -f 'lout/doc/tr.impl/s6.9' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.impl/s6.9'\"
else
  echo shar: Extracting \"'lout/doc/tr.impl/s6.9'\" \(30 characters\)
  sed "s/^X//" >'lout/doc/tr.impl/s6.9' <<'END_OF_FILE'
X@EndSubSections
X@End @Section
END_OF_FILE
  if test 30 -ne `wc -c <'lout/doc/tr.impl/s6.9'`; then
    echo shar: \"'lout/doc/tr.impl/s6.9'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.impl/s6.9'
fi
if test -f 'lout/doc/tr.lout/README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.lout/README'\"
else
  echo shar: Extracting \"'lout/doc/tr.lout/README'\" \(579 characters\)
  sed "s/^X//" >'lout/doc/tr.lout/README' <<'END_OF_FILE'
XDirectory lout/doc/tr.lout
X
XThis directory contains the Lout source files for the
Xreport `Document Formatting with Lout (Second Edition)',
Xalso known as  the Lout user manual.  To produce the
Xreport, type the command
X
X	lout setup ch?.?? > outfile.ps
X
Xin this directory.  This must be done four times to
Xcompletely resolve all cross references, although
Xthe PostScript file outfile.ps is printable after
Xthe first run.  Auxiliary files with .li and .ld
Xsuffixes will be created in this directory.  A copy
Xof the final outfile.ps is included.
X
XJeffrey H. Kingston
X23 December 1992
END_OF_FILE
  if test 579 -ne `wc -c <'lout/doc/tr.lout/README'`; then
    echo shar: \"'lout/doc/tr.lout/README'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.lout/README'
fi
if test -f 'lout/doc/tr.lout/ch1.00' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.lout/ch1.00'\"
else
  echo shar: Extracting \"'lout/doc/tr.lout/ch1.00'\" \(301 characters\)
  sed "s/^X//" >'lout/doc/tr.lout/ch1.00' <<'END_OF_FILE'
X@Chapter
X   @Title { Principles }
X   @Tag { principles }
X@Begin
X@LP
XThe document formatting language Lout is based on just four key ideas:
Xobjects, definitions, cross references, and galleys.  In this chapter we
Xconcentrate on them, postponing the inevitable details to later chapters.
X@BeginSections
END_OF_FILE
  if test 301 -ne `wc -c <'lout/doc/tr.lout/ch1.00'`; then
    echo shar: \"'lout/doc/tr.lout/ch1.00'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.lout/ch1.00'
fi
if test -f 'lout/doc/tr.lout/ch1.99' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.lout/ch1.99'\"
else
  echo shar: Extracting \"'lout/doc/tr.lout/ch1.99'\" \(27 characters\)
  sed "s/^X//" >'lout/doc/tr.lout/ch1.99' <<'END_OF_FILE'
X@EndSections
X@End @Chapter
END_OF_FILE
  if test 27 -ne `wc -c <'lout/doc/tr.lout/ch1.99'`; then
    echo shar: \"'lout/doc/tr.lout/ch1.99'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.lout/ch1.99'
fi
if test -f 'lout/doc/tr.lout/ch2.00' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.lout/ch2.00'\"
else
  echo shar: Extracting \"'lout/doc/tr.lout/ch2.00'\" \(73 characters\)
  sed "s/^X//" >'lout/doc/tr.lout/ch2.00' <<'END_OF_FILE'
X@Chapter
X   @Title { Details }
X   @Tag { details }
X@Begin
X@BeginSections
END_OF_FILE
  if test 73 -ne `wc -c <'lout/doc/tr.lout/ch2.00'`; then
    echo shar: \"'lout/doc/tr.lout/ch2.00'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.lout/ch2.00'
fi
if test -f 'lout/doc/tr.lout/ch2.99' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.lout/ch2.99'\"
else
  echo shar: Extracting \"'lout/doc/tr.lout/ch2.99'\" \(27 characters\)
  sed "s/^X//" >'lout/doc/tr.lout/ch2.99' <<'END_OF_FILE'
X@EndSections
X@End @Chapter
END_OF_FILE
  if test 27 -ne `wc -c <'lout/doc/tr.lout/ch2.99'`; then
    echo shar: \"'lout/doc/tr.lout/ch2.99'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.lout/ch2.99'
fi
if test -f 'lout/doc/tr.lout/ch3.00' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.lout/ch3.00'\"
else
  echo shar: Extracting \"'lout/doc/tr.lout/ch3.00'\" \(84 characters\)
  sed "s/^X//" >'lout/doc/tr.lout/ch3.00' <<'END_OF_FILE'
X@Chapter
X   @Title { Predefined symbols }
X   @Tag { symbols }
X@Begin
X@BeginSections
END_OF_FILE
  if test 84 -ne `wc -c <'lout/doc/tr.lout/ch3.00'`; then
    echo shar: \"'lout/doc/tr.lout/ch3.00'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.lout/ch3.00'
fi
if test -f 'lout/doc/tr.lout/ch3.05' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.lout/ch3.05'\"
else
  echo shar: Extracting \"'lout/doc/tr.lout/ch3.05'\" \(611 characters\)
  sed "s/^X//" >'lout/doc/tr.lout/ch3.05' <<'END_OF_FILE'
X@Section
X   @Title { "@Space" }
X   @Tag { space }
X@Begin
X@PP
XThe @@Space symbol
Xspace.sym @Index { @@Space symbol }
Xchanges the value of the @Code s unit of measurement (Section
Xs.unit.space @SubIndex { and @@Space symbol }
X{@NumberOf concatenation}) within its right parameter to the value
Xgiven by the left parameter:
X@ID {
X@Code "1c @Space { a b c d }"
X}
Xhas result
X@ID {
X1c @Space { a b c d }
X}
XAs for the @@Break symbol, the left parameter of @@Space may be given
Xrelative to the enclosing @Code s unit, and it may include a gap
Xmode.  Note that the @@Font symbol also sets the @Code s unit.
X@End @Section
END_OF_FILE
  if test 611 -ne `wc -c <'lout/doc/tr.lout/ch3.05'`; then
    echo shar: \"'lout/doc/tr.lout/ch3.05'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.lout/ch3.05'
fi
if test -f 'lout/doc/tr.lout/ch3.09' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.lout/ch3.09'\"
else
  echo shar: Extracting \"'lout/doc/tr.lout/ch3.09'\" \(642 characters\)
  sed "s/^X//" >'lout/doc/tr.lout/ch3.09' <<'END_OF_FILE'
X@Section
X   @Title { "@HContract" and "@VContract" }
X   @Tag { hcontract }
X@Begin
X@PP
Xhcontract @Index { @@HContract symbol }
Xvcontract @Index { @@VContract symbol }
Xcontraction @Index { Contraction of object }
XThe @@HContract symbol reduces the size of its right parameter to a
Xreasonable minimum (after paragraph breaking).  For example,
X@ID @Code "5i @Wide @HContract { A |1rt B }"
Xhas result
X@ID { 5i @Wide @HContract { A |1rt B } }
Xin which the B is much closer to the A than it would otherwise have
Xbeen.  @@VContract is similar, but in a vertical direction.  See Section
X{@NumberOf size} for a more extensive discussion.
X@End @Section
END_OF_FILE
  if test 642 -ne `wc -c <'lout/doc/tr.lout/ch3.09'`; then
    echo shar: \"'lout/doc/tr.lout/ch3.09'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.lout/ch3.09'
fi
if test -f 'lout/doc/tr.lout/ch3.12' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.lout/ch3.12'\"
else
  echo shar: Extracting \"'lout/doc/tr.lout/ch3.12'\" \(718 characters\)
  sed "s/^X//" >'lout/doc/tr.lout/ch3.12' <<'END_OF_FILE'
X@Section
X   @Title { "@Scale" }
X   @Tag { scale }
X@Begin
X@PP
Xscale @Index { @@Scale symbol }
XThis symbol geometrically scales its right parameter by the scale factor
Xgiven in its left parameter:
X@ID @Code "1.0 @Scale Hello  2.0 @Scale Hello  0.5 @Scale Hello"
Xhas result
X@ID { 1.0 @Scale Hello  2.0 @Scale Hello  0.5 @Scale Hello }
XThe left parameter can be two scale factors, in which case the first
Xapplies horizontally, and the second vertically:
X@ID @Code "{0.5 2.0} @Scale Hello"
Xhas result
X@ID { {0.5 2.0} @Scale Hello }
XThe right parameter may be any object.  @@Scale has both a @@OneCol and
Xa @@OneRow effect, and the marks of the result coincide with the principal
Xmarks of the right parameter.
X@End @Section
END_OF_FILE
  if test 718 -ne `wc -c <'lout/doc/tr.lout/ch3.12'`; then
    echo shar: \"'lout/doc/tr.lout/ch3.12'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.lout/ch3.12'
fi
if test -f 'lout/doc/tr.lout/ch3.14' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.lout/ch3.14'\"
else
  echo shar: Extracting \"'lout/doc/tr.lout/ch3.14'\" \(556 characters\)
  sed "s/^X//" >'lout/doc/tr.lout/ch3.14' <<'END_OF_FILE'
X@Section
X   @Title { "@Next" }
X   @Tag { next }
X@Begin
X@PP
Xnext.sym @Index { @@Next symbol }
XThe symbol @@Next returns its parameter
Xplus one.  It is rather clever at working this out:  it hunts through
Xthe parameter from right to left, looking for a number to increment:
X@ID @Code {
X"@Next (3.99)"
X}
Xhas result {@Next (3.99)}.  If @@Next cannot find a digit inside
Xits parameter, it is an error.  Roman numerals are handled by storing
Xthem in a database, as explained in Section {@NumberOf paras};
X@@Next will not increment a Roman numeral.
X@End @Section
END_OF_FILE
  if test 556 -ne `wc -c <'lout/doc/tr.lout/ch3.14'`; then
    echo shar: \"'lout/doc/tr.lout/ch3.14'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.lout/ch3.14'
fi
if test -f 'lout/doc/tr.lout/ch3.17' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.lout/ch3.17'\"
else
  echo shar: Extracting \"'lout/doc/tr.lout/ch3.17'\" \(791 characters\)
  sed "s/^X//" >'lout/doc/tr.lout/ch3.17' <<'END_OF_FILE'
X@Section
X   @Title { "@Null" }
X   @Tag { null }
X@Begin
X@PP
XThis symbol
Xnull.sym @Index { @@Null symbol }
Xprovides a convenient way to remove unwanted
Xconcatenation symbols.  If there is a concatenation symbol
Xpreceding @@Null, the @@Null and the
Xconcatenation symbol are both deleted.  Otherwise, if there is a
Xfollowing concatenation symbol, it and the @@Null are both deleted.
XOtherwise, @@Null becomes an empty object.
X@PP
XThese rules apply to a fully parenthesized version of the expression.  For
Xexample, in
X@ID @Code {
X"...  //1vx @Null |0.5i ..."
X}
Xit is the horizontal concatenation symbol following @@Null that
Xdisappears, because in the fully parenthesized version
X@ID @Code {
X"...  //1vx { @Null |0.5i ... }"
X}
Xthere is no concatenation symbol preceding the @@Null.
X@End @Section
END_OF_FILE
  if test 791 -ne `wc -c <'lout/doc/tr.lout/ch3.17'`; then
    echo shar: \"'lout/doc/tr.lout/ch3.17'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.lout/ch3.17'
fi
if test -f 'lout/doc/tr.lout/ch3.20' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.lout/ch3.20'\"
else
  echo shar: Extracting \"'lout/doc/tr.lout/ch3.20'\" \(570 characters\)
  sed "s/^X//" >'lout/doc/tr.lout/ch3.20' <<'END_OF_FILE'
X@Section
X   @Title { "@Tagged" }
X   @Tag { tagged }
X@Begin
X@PP
XThe @@Tagged
Xtagged.sym @Index { @@Tagged symbol }
Xsymbol takes a cross reference for its left parameter and an object, whose
Xvalue must be a juxtaposition of simple words or an empty
Xobject, for its right parameter.  It has the effect of attaching its
Xright parameter as an additional tag to the invocation denoted by its
Xleft parameter, unless the right parameter is empty, in which case @@Tagged
Xdoes nothing.  The result of @@Tagged is always @@Null, which makes it
Xeffectively invisible.
X@End @Section
END_OF_FILE
  if test 570 -ne `wc -c <'lout/doc/tr.lout/ch3.20'`; then
    echo shar: \"'lout/doc/tr.lout/ch3.20'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.lout/ch3.20'
fi
if test -f 'lout/doc/tr.lout/ch3.26' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.lout/ch3.26'\"
else
  echo shar: Extracting \"'lout/doc/tr.lout/ch3.26'\" \(824 characters\)
  sed "s/^X//" >'lout/doc/tr.lout/ch3.26' <<'END_OF_FILE'
X@Section
X   @Tag { include }
X   @Title { "@Include and @SysInclude" }
X@Begin
X@PP
Xinclude.sym @Index { @@Include symbol }
Xsysinclude.sym @Index { @@SysInclude symbol }
XThese symbols instruct Lout to temporarily switch to reading another
Xfile, whose name appears in braces following the symbol.  For example,
X@ID @Code {
X"@Include { \"/usr/lout/fontdefs\" }"
X}
Xwill cause the contents of file "/usr/lout/fontdefs" to be read at the
Xpoint it occurs.  After that file is read, the current file is resumed.  The
Xincluded file may contain arbitrary Lout text, including other
X@@Include commands.  The file is searched for first in the current
Xdirectory, then in a sequence of standard places which are not necessarily the
Xsame places that databases are searched for.  @@SysInclude searches the
Xstandard places only.
X@End @Section
END_OF_FILE
  if test 824 -ne `wc -c <'lout/doc/tr.lout/ch3.26'`; then
    echo shar: \"'lout/doc/tr.lout/ch3.26'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.lout/ch3.26'
fi
if test -f 'lout/doc/tr.lout/ch3.99' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.lout/ch3.99'\"
else
  echo shar: Extracting \"'lout/doc/tr.lout/ch3.99'\" \(27 characters\)
  sed "s/^X//" >'lout/doc/tr.lout/ch3.99' <<'END_OF_FILE'
X@EndSections
X@End @Chapter
END_OF_FILE
  if test 27 -ne `wc -c <'lout/doc/tr.lout/ch3.99'`; then
    echo shar: \"'lout/doc/tr.lout/ch3.99'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.lout/ch3.99'
fi
if test -f 'lout/doc/tr.lout/ch4.00' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.lout/ch4.00'\"
else
  echo shar: Extracting \"'lout/doc/tr.lout/ch4.00'\" \(397 characters\)
  sed "s/^X//" >'lout/doc/tr.lout/ch4.00' <<'END_OF_FILE'
X@Chapter
X   @Title { Examples }
X   @Tag { examples }
X@Begin
X@LP
XThis chapter presents some examples taken from the various
Xpackages available with Basser Lout.  The reader who masters these
Xexamples will be well prepared to read the packages themselves.  The
Xexamples have not been simplified in any way, since an important part of
Xtheir purpose is to show Lout in actual practice.
X@BeginSections
END_OF_FILE
  if test 397 -ne `wc -c <'lout/doc/tr.lout/ch4.00'`; then
    echo shar: \"'lout/doc/tr.lout/ch4.00'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.lout/ch4.00'
fi
if test -f 'lout/doc/tr.lout/ch4.99' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.lout/ch4.99'\"
else
  echo shar: Extracting \"'lout/doc/tr.lout/ch4.99'\" \(27 characters\)
  sed "s/^X//" >'lout/doc/tr.lout/ch4.99' <<'END_OF_FILE'
X@EndSections
X@End @Chapter
END_OF_FILE
  if test 27 -ne `wc -c <'lout/doc/tr.lout/ch4.99'`; then
    echo shar: \"'lout/doc/tr.lout/ch4.99'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.lout/ch4.99'
fi
if test -f 'lout/doc/tr.tab/README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.tab/README'\"
else
  echo shar: Extracting \"'lout/doc/tr.tab/README'\" \(545 characters\)
  sed "s/^X//" >'lout/doc/tr.tab/README' <<'END_OF_FILE'
XDirectory lout/doc/tr.tab
X
XThis directory contains the Lout source files for
Xthe Tab table formatting package technical report.
XTo produce the report, type the command
X
X	lout setup s? > outfile.ps
X
Xin this directory.  This must be done three times to
Xcompletely resolve all cross references, although
Xthe PostScript file outfile.ps is printable after
Xthe first run.  Auxiliary files with .li and .ld
Xsuffixes will be created in this directory.  A copy
Xof the final outfile.ps is included.
X
XJeffrey H. Kingston
X24 September 1991
X22 December 1992
END_OF_FILE
  if test 545 -ne `wc -c <'lout/doc/tr.tab/README'`; then
    echo shar: \"'lout/doc/tr.tab/README'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.tab/README'
fi
if test -f 'lout/doc/tr.tab/setup' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/doc/tr.tab/setup'\"
else
  echo shar: Extracting \"'lout/doc/tr.tab/setup'\" \(739 characters\)
  sed "s/^X//" >'lout/doc/tr.tab/setup' <<'END_OF_FILE'
X
X######################################################
X#                                                    #
X#  Lout setup file for Tab paper.                    #
X#                                                    #
X#  Jeffrey H. Kingston                               #
X#  22 December 1992                                  #
X#                                                    #
X######################################################
X
X@SysInclude { ft  }
X@SysInclude { dl  }
X@SysInclude { eq  }
X@SysInclude { pas }
X@SysInclude { fig }
X@Include { tab }
X
X   def @TeX { T{ /0.2fo E}X }
X
X   def @Code
X      right x
X   { { Helvetica Base -1p } @Font lines @Break x
X   }
X
X@Use { @DocumentLayout }
X
X@SysDatabase @Reference { "loutrefs"  }
END_OF_FILE
  if test 739 -ne `wc -c <'lout/doc/tr.tab/setup'`; then
    echo shar: \"'lout/doc/tr.tab/setup'\" unpacked with wrong size!
  fi
  # end of 'lout/doc/tr.tab/setup'
fi
if test -f 'lout/font0/README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/font0/README'\"
else
  echo shar: Extracting \"'lout/font0/README'\" \(419 characters\)
  sed "s/^X//" >'lout/font0/README' <<'END_OF_FILE'
XDirectory lout/font0 - font metrics for ASCII
X
XThis directory contains Adobe Systems font metrics
X(.AFM) files for the ASCII character set, exactly as
Xdistributed by Adobe Systems except that erroneous
Xligature information has been removed from Couri*.AFM
X(Courier font).  These files are the source of Lout's
Xinformation about the height and width of all characters.
X
XJeffrey H. Kingston
X30 July 1991
X22 December 1992
END_OF_FILE
  if test 419 -ne `wc -c <'lout/font0/README'`; then
    echo shar: \"'lout/font0/README'\" unpacked with wrong size!
  fi
  # end of 'lout/font0/README'
fi
if test -f 'lout/font1/README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/font1/README'\"
else
  echo shar: Extracting \"'lout/font1/README'\" \(384 characters\)
  sed "s/^X//" >'lout/font1/README' <<'END_OF_FILE'
XDirectory lout/font1 - font metrics for ISO-LATIN-1
X
XThis directory is supposed to contain Adobe Systems
Xfont metrics (.AFM) files for the ISO-LATIN-1
Xcharacter set.  They are the source of Lout's
Xinformation about the height and width of all
Xcharacters.
X
XAt the time of writing the directory is empty
Xbecause I don't have these files.
X
XJeffrey H. Kingston
X30 July 1991
X24 March 1993
END_OF_FILE
  if test 384 -ne `wc -c <'lout/font1/README'`; then
    echo shar: \"'lout/font1/README'\" unpacked with wrong size!
  fi
  # end of 'lout/font1/README'
fi
if test -f 'lout/include/README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lout/include/README'\"
else
  echo shar: Extracting \"'lout/include/README'\" \(682 characters\)
  sed "s/^X//" >'lout/include/README' <<'END_OF_FILE'
XDirectory lout/include
X
XThis directory contains Lout source files for
Xa variety of standard packages and setup files:
X
X   ft		A file of font definitions
X   dl		The DocumentLayout package
X   doc		A setup file calling dl for simple documents
X   report	A setup file calling dl for technical reports
X   book		A setup file calling dl for books
X   eq		The Eq equation formatting package
X   pas		The Pas Pascal formatting package
X   fig		The Fig figure drawing package
X   fig_prepend	A PostScript file needed by fig
X   tab		The Tab table formatting package
X   tab_prepend	A PostScript file needed by Tab
X   lout.hyph	Text file of hyphenation patterns
X
XJeffrey H. Kingston
X22 December 1992
END_OF_FILE
  if test 682 -ne `wc -c <'lout/include/README'`; then
    echo shar: \"'lout/include/README'\" unpacked with wrong size!
  fi
  # end of 'lout/include/README'
fi
echo shar: End of archive 30 \(of 30\).
cp /dev/null ark30isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 30 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0
exit 0 # Just in case...
