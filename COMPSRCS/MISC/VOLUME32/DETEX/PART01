Newsgroups: comp.sources.misc
From: trinkle@cs.purdue.edu (Daniel Trinkle)
Subject:  v32i091:  detex - filter to strip TeX commands from a .tex file, Part01/01
Message-ID: <1992Sep21.211722.10059@sparky.imd.sterling.com>
X-Md4-Signature: 3a600f8c6c77f222b22ad069c6639bce
Date: Mon, 21 Sep 1992 21:17:22 GMT
Approved: kent@sparky.imd.sterling.com

Submitted-by: trinkle@cs.purdue.edu (Daniel Trinkle)
Posting-number: Volume 32, Issue 91
Archive-name: detex/part01
Environment: UNIX

This is the source for detex version 2.4.  New features include
handling ligatures so they don't introduce spelling errors, better
support for the mathmatica environment.  It also has a bug fix that
caused problems for AMS-TeX input.

You can also anonymous FTP this version from
ftp.cs.purdue.edu:/pub/trinkle/detex-2.4.tar

Daniel Trinkle			trinkle@cs.purdue.edu
Dept. of Computer Sciences	{backbone}!purdue!trinkle
Purdue University		317-494-7844
West Lafayette, IN 47907-1398
--------
#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of shell archive."
# Contents:  Makefile README detex.1l detex.h detex.l states.sed
# Wrapped by trinkle@arthur.cs.purdue.edu on Mon Sep 21 15:02:52 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Makefile'\"
else
echo shar: Extracting \"'Makefile'\" \(1422 characters\)
sed "s/^X//" >'Makefile' <<'END_OF_FILE'
X#	Makefile for detex and delatex
X#
X#	Daniel Trinkle
X#	Computer Science Department
X#	Purdue University
X#
X# Detex is a program to remove TeX and LaTeX constructs from text source.
X
X# Installation directory
X#
XDESTDIR	= /usr/local/bin
X
X# Compile time flags, just uncomment the necessary lines
X#
XDEFS	=
X#
X# Add -traditional for GNU cc on ISC 386/ix system and possibly others
X# (reported by pinard@iro.umontreal.ca)
X#
X#DEFS	= ${DEFS} -traditional
X#
X# Add -DUSG for the SysV string manipulation routines
X#
X#DEFS	= ${DEFS} -DUSG
X#
X# Add -DMAXPATHLEN=<length> if it is not defined in /usr/include/sys/param.h
X#
X#DEFS	= ${DEFS} -DMAXPATHLEN=1024
X#
X# Add -DNO_MALLOC_DECL if your system does not like the malloc() declaration
X# in detex.l (reported by pinard@iro.umontreal.ca)
X#
X#DEFS	= ${DEFS} -DNO_MALLOC_DECL
X#
XCFLAGS	= -O ${DEFS}
X
XLPR	= lpr -p
X
X# Program names
X#
XPROGS	= detex
X
X# Header files
X#
XHDR	= detex.h
X
X# Sources
X#
XSRC	= detex.l
X
X# Objects for various programs
X#
XD_OBJ	= detex.o
X
Xall:	${PROGS}
X
Xdetex: ${D_OBJ}
X	${CC} ${CFLAGS} -o $@ ${D_OBJ} -ll
X
Xdetex.c:
X	sed -f states.sed detex.l | lex ${LFLAGS}
X	mv lex.yy.c detex.c
X
Xman-page:
X	troff -man detex.1l
X
Xinstall: detex
X	install -c -m 775 -o binary -g staff -s detex ${DESTDIR}
X
Xclean:
X	-rm -f a.out core *.s *.o ERRS errs .,* .emacs_[0-9]*
X	-rm -f ${PROGS} lex.yy.c
X
Xprint:	${HDR} ${SRC}
X	${LPR} Makefile ${HDR} ${SRC}
X
X# Dependencies
X#
Xdetex.c: detex.h
Xdetex.c: detex.l
END_OF_FILE
if test 1422 -ne `wc -c <'Makefile'`; then
    echo shar: \"'Makefile'\" unpacked with wrong size!
fi
# end of 'Makefile'
fi
if test -f 'README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'README'\"
else
echo shar: Extracting \"'README'\" \(4636 characters\)
sed "s/^X//" >'README' <<'END_OF_FILE'
XDetex - Version 2.4
X
XDetex is a program to remove TeX constructs from a text file.  It recognizes
Xthe \input command.
X
XThis program assumes it is dealing with LaTeX input if it sees the string
X"\begin{document}" in the text.  It recognizes the \include and \includeonly
Xcommands.
X
XThis directory contains the following files:
X
XREADME -	you're looking at it.
X
XMakefile -	makefile for generating detex on a 4.2BSD Unix system.
X
Xdetex.1l -	troff source for the detex manual page.
X		Assuming you have the -man macros, use "make man-page" to
X		generate it.
X
Xdetex.h -	Various global definitions.  These should be modified to suit
X		the local installation.
X
Xdetex.l -	Lex and C source for the detex program.
X
Xstates.sed -	sed(1) script to munge the state names in detex.l so that
X		reasonable names can be used in the source without causing
X		lex(1) to overflow.
X
XFeel free to redistribute this program, but distribute the complete contents
Xof this directory.  Send comments and fixes to me via email.
X
XDaniel Trinkle <trinkle@cs.purdue.edu>
XDepartment of Computer Sciences
XPurdue University
XWest Lafayette, IN 47906
X
XApril 26, 1986
X
XModified -- June 4, 1986
XChanged so that it automatically recognizes LaTeX source and ignores several
Xenvironment modes such as array.
X
X
XModified (Version 2.0) -- June 30, 1984
XNow handles white space in sequences like "\begin { document }".  Detex is not
Xas easily confused by such things as display mode ends and begins that don't
Xmatch up.
X
X
XModified -- September 19, 1986
XAdded the "-e <environment-list>" option to ignore specified LaTeX environments.
X
X
XModified -- June 30, 1987
XAdded the "-n" no-follow option, to allow detex to ignore \input and \include
Xcommands.  Also changed the algorithm for locating the input files.  It now
Xinterprets the "." more reasonably (i.e. it is not always the beginning of an
Xextension).
X
X
XModified -- December 15, 1988
XAdded handling of verbatim environment in LaTeX mode and added it to the list
Xof modes ignored by default.  Because of limitations with lex, it was
Xnecessary to shorten the names of some of the existing start states before
Xadding a new one (ugh).
X
X
XModified -- January 3, 1988
XAdded ignore of \$ inside $$ (math) pair.
X
X
XModified (Version 2.2) -- June 25, 1990
XControl sequences are no longer replaced by space, but just removed.  This
Xmeans accents no longer cause output words to be broken.  The "-c" option was
Xadded to show the arguments of \cite, \ref, and \pageref macros.  This is
Xusefule when using something like style on the output.
X
X
XModified (Version 2.3) -- September 7, 1990
XFixed the handling of Ctl mode a little better and added an exception
Xfor \index on suggestions from kcb@hss.caltech.edu (KC Border).  Also
Xchanged the value for DEFAULTINPUTS to coincide with a local change.
X
X
XModified -- February 10, 1991
XAdded -t option to force TeX mode even when seeing the "\begin{document}"
Xstring in the input.
X
X
XModified -- February 23, 1991
XBased on suggestions from pinard@iro.umontreal.ca (Francois Pinard), I
Xadded support for the SysV string routines (-DUSG), added defines for
Xthe flex lexical scanner (-DFLEX_SCANNER), changed NULL to '\0' when
Xusing it as a character (his sys defined NULL as (void *)0), changed
Xthe Makefile to use ${CC} instead of cc, and added comments about the
Xnew compile time options.
X
XModified (Version 2.4) -- September 2, 1990
XCorrected the way CITEBEGIN worked.  Due to serious braindeath I had
Xthe condition wrong in the if test.  It should be (fLatex && !fCite).
XThis solves the problem a couple people reported with amstex style
X\ref entries.
X
XAdded a preprocessing sed(1) command to replace all the long, easy to
Xread state names with short two letter state names (SA-S?) so that lex
Xwon't overflow and I don't have to keep shortening the state names
Xevery time I add one.  If a state is added, it must also be added to
Xstates.sed (order is important) along with its unique S? replacement.
X
XAdded \pagestyle, \setcounter, and \verb handling from
XK.Sattar@cs.exeter.ac.uk (Khalid Sattar).  Also allows invocation as
X"delatex" to force LaTeX mode.
X
XApplied patches from queinnec@cenatls.cena.dgac.fr (Philippe Queinnec)
Xto handle nested {}s in state <LaMacro2> (\bibitem, \cite, \index).
X
XAdded special ligature handling (\aa, \ae, \oe, \l, \o, \i, \j, \ss)
Xat the suggestion of gwp@dido.caltech.edu (G. W. Pigman II).
X
XCleaned up the comments on detex.h, added mathmatica to DEFAULTENV.
X
XPorting notes -- March 30, 1992
XWhen using gcc, you should compile with -fwritable-strings.
X
XOn a NeXT, it has been reported that lex replaces the '\0' with NULL,
Xand then the compiler complains about it.
END_OF_FILE
if test 4636 -ne `wc -c <'README'`; then
    echo shar: \"'README'\" unpacked with wrong size!
fi
# end of 'README'
fi
if test -f 'detex.1l' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'detex.1l'\"
else
echo shar: Extracting \"'detex.1l'\" \(3839 characters\)
sed "s/^X//" >'detex.1l' <<'END_OF_FILE'
X.TH DETEX 1L "21 September 1992" "Purdue University"
X.SH NAME
Xdetex \- a filter to strip \fITeX\fP commands from a .tex file.
X.SH SYNOPSIS
X.B detex
X[ \fB\-clnstw\fR ] [ \fB\-e\fI environment-list\fR ] [ \fIfilename\fR[.tex] ... ]
X.SH DESCRIPTION
X.I Detex
X(Version 2.4)
Xreads each file in sequence, removes all comments and
X.I TeX
Xcontrol sequences
Xand writes the remainder on the standard output.
XAll text in math mode and display mode is removed.
XBy default,
X.I detex
Xfollows \\input commands.
XIf a file cannot be opened, a warning message is
Xprinted and the command is ignored.
XIf the
X.B \-n
Xoption is used, no \\input or \\include commands will be processed.
XThis allows single file processing.
XIf no input file is given on the command line,
X.I detex
Xreads from standard input.
X.PP
XIf the magic sequence ``\\begin{document}'' appears in the text,
X.I detex
Xassumes it is dealing with
X.I LaTeX
Xsource and
X.I detex
Xrecognizes additional constructs used in
X.IR LaTeX .
XThese include the \\include and \\includeonly commands.
XThe
X.B \-l
Xoption can be used to force
X.I LaTeX
Xmode and the
X.B \-t
Xoption can be used to force
X.I TeX
Xmode regardless of input content.
X.PP
XText in various environment modes of
X.I LaTeX
Xis ignored.  The default modes are array, eqnarray, equation, figure,
Xmathmatica, picture, table and verbatim.  The
X.B \-e
Xoption can be used to specify a comma separated
X.I environment-list
Xof environments to ignore.  The list replaces the defaults so specifying an
Xempty list effectively causes no environments to be ignored.
X.PP
XThe
X.B \-c
Xoption can be used in
X.I LaTeX
Xmode to have detex echo the arguments to \\cite,
X\\ref, and \\pageref macros.  This can be useful when sending the output to
Xa style checker.
X.PP
X.I Detex
Xassumes the standard character classes are being used for
X.IR TeX .
X.I Detex
Xallows white space between control sequences
Xand magic characters like `{' when recognizing things like
X.I LaTeX
Xenvironments.
X.PP
XIf the
X.B \-w
Xflag is given, the output is a word list, one `word' (string of two or more
Xletters and apostrophes beginning with a letter)
Xper line, and all other characters ignored.
XWithout \fB\-w\fR the output follows the original,
Xwith the deletions mentioned above.  Newline characters are
Xpreserved where possible
Xso that the lines of output match the input as closely as possible.
X.PP
XThe TEXINPUTS environment variable is used to find \\input and \\include
Xfiles.
X.PP
XDetex now handles the basic TeX ligatures as a special case, replacing the
Xligatures with acceptable charater substitutes.  This eliminates
Xspelling errors introduced by merely removing them.  The ligatures are
X\\aa, \\ae, \\oe, \\ss, \\o, \\l (and their upper-case
Xequivalents).  The special "dotless" characters \\i and \\j are also
Xreplaced with i and j respectively.
X.PP
XNote that previous versions of
X.I detex
Xwould replace control sequences with a space character to prevent words
Xfrom running together.
XHowever, this caused accents in the middle of words to break words, generating
X"spelling errors" that were not desirable.
XTherefore, the new version merely removes these accents.
XThe old functionality can be essentially duplicated by using the
X.B \-s
Xoption.
X.SH SEE ALSO
Xtex(1L)
X.SH DIAGNOSTICS
XNesting of \\input is allowed but the number of opened files must not
Xexceed the system's limit on the number of simultaneously opened files.
X.I Detex
Xignores unrecognized option characters after printing a warning message.
X.SH AUTHOR
XDaniel Trinkle, Computer Science Department, Purdue University
X.SH BUGS
X.I Detex
Xis not a complete
X.I TeX
Xinterpreter, so it can be confused by some constructs.
XMost errors result in too much rather than too little output.
X.PP
XRunning \fILaTeX\fR
Xsource without a ``\\begin{document}''
Xthrough \fIdetex\fR may produce
Xerrors.
X.PP
XSuggestions for improvements are encouraged.
END_OF_FILE
if test 3839 -ne `wc -c <'detex.1l'`; then
    echo shar: \"'detex.1l'\" unpacked with wrong size!
fi
# end of 'detex.1l'
fi
if test -f 'detex.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'detex.h'\"
else
echo shar: Extracting \"'detex.h'\" \(1139 characters\)
sed "s/^X//" >'detex.h' <<'END_OF_FILE'
X/******
X** The following parameters should be modified as necessary
X**	MAXINCLIST - maximum number of files allowed in an \includeonly list
X**
X**	DEFAULTINPUTS - this should be the same as the default TEXINPUTS
X**	CHPATHSEP - the path separator character in TEXINPUTS
X**	MAXINPUTPATHS - (arbitrary) number of separate paths in TEXINPUTS
X**
X**	DEFAULTENV - list of LaTeX environments ignored
X**	CHENVSEP - the list separator character in the ignore envronment list
X**	MAXENVS - maximum number of environments listed in the ignore list
X**	CCHMAXENV - maximum count of characters in an environment name (LaTex)
X******/
X
X#define	MAXINCLIST	40
X
X#define	DEFAULTINPUTS	".:/usr/local/tex/inputs"
X#define	CHPATHSEP	':'
X#define	MAXINPUTPATHS	10
X
X#define	DEFAULTENV	"array,eqnarray,equation,figure,mathmatica,picture,table,verbatim"
X#define	CHENVSEP	','
X#define	MAXENVS		10
X#define	CCHMAXENV	100
X
X/******
X** These probably should not be changed
X******/
X
X#define	CHOPT		'-'
X#define	CHCITEOPT	'c'
X#define	CHENVOPT	'e'
X#define	CHLATEXOPT	'l'
X#define	CHNOFOLLOWOPT	'n'
X#define	CHSPACEOPT	's'
X#define	CHTEXOPT	't'
X#define	CHWORDOPT	'w'
X
X#define	ERROR		-1
END_OF_FILE
if test 1139 -ne `wc -c <'detex.h'`; then
    echo shar: \"'detex.h'\" unpacked with wrong size!
fi
# end of 'detex.h'
fi
if test -f 'detex.l' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'detex.l'\"
else
echo shar: Extracting \"'detex.l'\" \(14623 characters\)
sed "s/^X//" >'detex.l' <<'END_OF_FILE'
X%{
X#ifndef lint
Xstatic char	rcsid[] = "$Header: /usr/src/local/bin/detex/RCS/detex.l,v 2.14 1992/09/02 15:35:44 trinkle Exp $";
X#endif
X
X/*
X * detex [-e environment-list] [-c] [-l] [-n] [-s] [-t] [-w] [file[.tex]]
X *
X *	This program is used to remove TeX or LaTeX constructs from a text
X *	file.
X *
X * Written by:
X *	Daniel Trinkle
X *	Department of Computer Science
X *	Purdue University
X *
X */
X
X#include "detex.h"
X#ifdef USG
X#include <string.h>
X#define	index	strchr
X#define	rindex	strrchr
X#else
X#include <strings.h>
X#endif
X#ifndef MAXPATHLEN
X#include <sys/param.h>
X#endif
X
X#define	LaBEGIN		if (fLatex) BEGIN
X#define	CITEBEGIN	if (fLatex && !fCite) BEGIN
X#define	IGNORE		if (fSpace && !fWord) putchar(' ')
X#define	SPACE		if (!fWord) putchar(' ')
X#define	NEWLINE		if (!fWord) putchar('\n')
X
X#ifndef NO_MALLOC_DECL
Xchar	*malloc();
X#endif
X
Xchar	*rgsbEnvIgnore[MAXENVS];	/* list of environments ignored */
Xchar	*rgsbIncList[MAXINCLIST];	/* list of includeonly files */
Xchar	*rgsbInputPaths[MAXINPUTPATHS];	/* list of input paths in order */
Xchar	sbCurrentEnv[CCHMAXENV];	/* current environment being ignored */
Xchar	*sbProgName;			/* name we were invoked with */
XFILE	*rgfp[NOFILE+1];		/* stack of input/include files */
Xint	cfp = 0;			/* count of files in stack */
Xint	cOpenBrace = 0;			/* count of `{' in <LaMacro2> */
Xint	csbEnvIgnore;			/* count of environments ignored */
Xint	csbIncList = 0;			/* count of includeonly files */
Xint	csbInputPaths;			/* count of input paths */
Xint	fLatex = 0;			/* flag to indicated delatex */
Xint	fWord = 0;			/* flag for -w option */
Xint	fFollow = 1;			/* flag to follow input/include */
Xint	fCite = 0;			/* flag to echo \cite and \ref args */
Xint	fSpace = 0;			/* flag to replace \cs with space */
Xint	fForcetex = 0;			/* flag to inhibit latex mode */
X%}
X
XS	[ \t\n]*
XW	[a-zA-Z]+
X
X%Start Define Display IncludeOnly Input Math Normal Control
X%Start LaBegin LaDisplay LaEnd LaEnv LaFormula LaInclude
X%Start LaMacro LaMacro2 LaVerbatim
X
X%%
X<Normal>"%".*		/* ignore comments */	;
X
X<Normal>"\\begin"{S}"{"{S}"document"{S}"}"	{fLatex = !fForcetex; IGNORE;}
X
X<Normal>"\\begin"     /* environment start */	{LaBEGIN LaBegin; IGNORE;}
X
X<LaBegin>{S}"{"{S}"verbatim"{S}"}"		{   if (BeginEnv("verbatim"))
X							BEGIN LaEnv;
X						    else
X							BEGIN LaVerbatim;
X						    IGNORE;
X						}
X
X<LaVerbatim>"\\end"{S}"{"{S}"verbatim"{S}"}" /* verbatim mode */	{BEGIN Normal; IGNORE;}
X<LaVerbatim>.					ECHO;
X
X<LaBegin>{W}					{   if (BeginEnv(yytext))
X							BEGIN LaEnv;
X						    else
X							BEGIN LaMacro;
X						    IGNORE;
X						}
X<LaBegin>"\n"					NEWLINE;
X<LaBegin>.					;
X
X<LaEnv>"\\end"  /* absorb some environments */	{LaBEGIN LaEnd; IGNORE;}
X<LaEnv>"\n"					NEWLINE;
X<LaEnv>.					;
X
X<LaEnd>{W}		 /* end environment */	{   if (EndEnv(yytext))
X							BEGIN Normal;
X						    IGNORE;
X						}
X<LaEnd>"}"					{BEGIN LaEnv; IGNORE;}
X<LaEnd>"\n"					NEWLINE;
X<LaEnd>.					;
X
X<Normal>"\\bibitem"	    /* ignore args  */	{LaBEGIN LaMacro2; IGNORE;}
X<Normal>"\\bibliography"    /* of these \cs */	{LaBEGIN LaMacro; IGNORE;}
X<Normal>"\\bibstyle"				{LaBEGIN LaMacro; IGNORE;}
X<Normal>"\\cite"				{CITEBEGIN LaMacro2; IGNORE;}
X<Normal>"\\documentstyle"			{LaBEGIN LaMacro; IGNORE;}
X<Normal>"\\end"					{LaBEGIN LaMacro; IGNORE;}
X<Normal>"\\index"				{LaBEGIN LaMacro2; SPACE;}
X<Normal>"\\label"				{LaBEGIN LaMacro; IGNORE;}
X<Normal>"\\pageref"				{CITEBEGIN LaMacro; IGNORE;}
X<Normal>"\\pagestyle"				{LaBEGIN LaMacro; IGNORE;}
X<Normal>"\\ref"					{CITEBEGIN LaMacro; IGNORE;}
X<Normal>"\\setcounter"				{LaBEGIN LaMacro; IGNORE;}
X<Normal>"\\verb" /* ignore \verb<char>...<char> */ {   if (fLatex) {
X						 	char verbchar, c;
X						 	verbchar = input();
X						 	while ((c = input()) != verbchar)
X							    if (c == '\n')
X								NEWLINE;
X						    }
X						    IGNORE;
X						}
X<LaMacro>"}"					BEGIN Normal;
X<LaMacro>"\n"					NEWLINE;
X<LaMacro>.					;
X<LaMacro2>"{"					{   cOpenBrace++; }
X<LaMacro2>"}"					{   cOpenBrace--;
X						    if (cOpenBrace == 0)
X							BEGIN Normal;
X						}
X<LaMacro2>"\n"					NEWLINE;
X<LaMacro2>.					;
X
X<Normal>"\\def"		/* ignore def begin */	{BEGIN Define; IGNORE;}
X<Define>"{"					BEGIN Normal;
X<Define>"\n"					NEWLINE;
X<Define>.					;
X
X<Normal>"\\("		/* formula mode */	{LaBEGIN LaFormula; IGNORE;}
X<LaFormula>"\\)"				BEGIN Normal;
X<LaFormula>"\n"					NEWLINE;
X<LaFormula>.					;
X
X<Normal>"\\["		/* display mode */	{LaBEGIN LaDisplay; IGNORE;}
X<LaDisplay>"\\]"				BEGIN Normal;
X<LaDisplay>"\n"					NEWLINE;
X<LaDisplay>.					;
X
X<Normal>"$$"		/* display mode */	{BEGIN Display; IGNORE;}
X<Display>"$$"					BEGIN Normal;
X<Display>"\n"					NEWLINE;
X<Display>.					;
X
X<Normal>"$"		/* math mode */		{BEGIN Math; IGNORE;}
X<Math>"$"					BEGIN Normal;
X<Math>"\n"					NEWLINE;
X<Math>"\\$"					;
X<Math>.						;
X
X<Normal>"\\include"	/* process files */	{LaBEGIN LaInclude; IGNORE;}
X<LaInclude>[^{ \t\n}]+				{   IncludeFile(yytext);
X						    BEGIN Normal;
X						}
X<LaInclude>"\n"					NEWLINE;
X<LaInclude>.					;
X
X<Normal>"\\includeonly"				{BEGIN IncludeOnly; IGNORE;}
X<IncludeOnly>[^{ \t,\n}]+			AddInclude(yytext);
X<IncludeOnly>"}"				{   if (csbIncList == 0)
X							rgsbIncList[csbIncList++] = '\0';
X						    BEGIN Normal;
X						}
X<IncludeOnly>"\n"				NEWLINE;
X<IncludeOnly>.					;
X
X<Normal>"\\input"				{BEGIN Input; IGNORE;}
X<Input>[^{ \t\n}]+				{   InputFile(yytext);
X						    BEGIN Normal;
X						}
X<Input>"\n"					NEWLINE;
X<Input>.					;
X
X<Normal>\\(aa|AA|ae|AE|oe|OE|ss)" " /* handle ligatures */ {printf("%.2s", yytext+1);}
X<Normal>\\[OoijLl]" "				{printf("%.1s", yytext+1);}
X
X<Normal>\\[a-zA-Z@]+	/* ignore other \cs */	{BEGIN Control; IGNORE;}
X<Normal>"\\ "					SPACE;
X<Normal>\\.					IGNORE;
X<Control>\\[a-zA-Z@]+				IGNORE;
X<Control>[a-zA-Z@0-9]*[-'=`][^ \t\n{]*		IGNORE;
X<Control>"\n"					{BEGIN Normal; NEWLINE;}
X<Control>[ \t{]*				{BEGIN Normal; IGNORE;}
X<Control>.					{yyless(0);BEGIN Normal;}
X
X<Normal>[{}\\|]	/* special characters */	IGNORE;
X<Normal>[!?]"`"					IGNORE;
X<Normal>~					SPACE;
X
X<Normal>{W}[']*{W}				{   if (fWord)
X							printf("%s\n", yytext);
X						    else
X							ECHO;
X						}
X<Normal>[0-9]+					if (!fWord) ECHO;
X<Normal>(.|\n)					if (!fWord) ECHO;
X%%
X/******
X** main --
X**	Set sbProgName to the base of arg 0.
X**	Set the input paths.
X**	Check for options
X**		-c		echo LaTeX \cite, \ref, and \pageref values
X**		-e <env-list>	list of LaTeX environments to ignore
X**		-l		force latex mode
X**		-n		do not follow \input and \include
X**		-s		replace control sequences with space
X**		-t		force tex mode
X**		-w		word only output
X**	Set the list of LaTeX environments to ignore.
X**	Process each input file.
X**	If no input files are specified on the command line, process stdin.
X******/
X
Xmain(cArgs,rgsbArgs)
Xint	cArgs;
Xchar	*rgsbArgs[];
X{
X	char	*pch, *sbEnvList = DEFAULTENV, sbBadOpt[2];
X	FILE	*TexOpen();
X	int	fSawFile = 0, iArgs = 1;
X	
X	/* get base name and decide what we are doing, detex or delatex */
X	if ((sbProgName = rindex(rgsbArgs[0], '/')) != NULL)
X	    sbProgName++;
X	else
X	    sbProgName = rgsbArgs[0];
X	if (strcmp("delatex",sbProgName) == 0)
X	    fLatex = 1;
X	
X	/* set rgsbInputPaths for use with TexOpen() */
X	SetInputPaths();
X
X	/* process command line options */
X	while (iArgs < cArgs && *(pch = rgsbArgs[iArgs]) == CHOPT) {
X		while (*++pch)
X		    switch (*pch) {
X		    case CHCITEOPT:
X			fCite = 1;
X			break;
X		    case CHENVOPT:
X			sbEnvList = rgsbArgs[++iArgs];
X			break;
X		    case CHLATEXOPT:
X			fLatex = 1;
X			break;
X		    case CHNOFOLLOWOPT:
X			fFollow = 0;
X			break;
X		    case CHSPACEOPT:
X			fSpace = 1;
X			break;
X		    case CHTEXOPT:
X			fForcetex = 1;
X			break;
X		    case CHWORDOPT:
X			fWord = 1;
X			break;
X		    default:
X			sbBadOpt[0] = *pch;
X			sbBadOpt[1] = '\0';
X			Warning("unknown option ignored -", sbBadOpt);
X		    }
X		iArgs++;
X	}
X	SetEnvIgnore(sbEnvList);
X
X	/* process input files */
X	for (; iArgs < cArgs; iArgs++) {
X	    fSawFile++;
X	    if ((yyin = TexOpen(rgsbArgs[iArgs])) == NULL) {
X		Warning("can't open file", rgsbArgs[iArgs]);
X		continue;;
X	    }
X	    BEGIN Normal;
X	    (void)yylex();
X	}
X
X	/* if there were no input files, assume stdin */
X	if (!fSawFile) {
X	    yyin = stdin;
X	    BEGIN Normal;
X	    (void)yylex();
X	}
X#ifndef FLEX_SCANNER
X	if (YYSTATE != Normal)
X	    ErrorExit("input contains an unterminated mode or environment");
X#endif
X	exit(0);
X}
X
X#ifdef FLEX_SCANNER
X#undef yywrap
X#endif
X
X/******
X** yywrap -- handles EOF for lex.  Check to see if the stack of open files
X**	has anything on it.  If it does, set yyin to the to value.  If not
X**	return the termination signal for lex.
X******/
X
Xyywrap()
X{
X	(void)fclose(yyin);
X	if (cfp > 0) {
X	    yyin = rgfp[--cfp];
X	    return(0);
X	}
X	return(1);
X}
X
X/******
X** SetEnvIgnore -- sets rgsbEnvIgnore to the values indicated by the
X**	sbEnvList.
X******/
X
XSetEnvIgnore(sbEnvList)
Xchar	*sbEnvList;
X{
X	csbEnvIgnore = SeparateList(sbEnvList, rgsbEnvIgnore, CHENVSEP, MAXENVS);
X	if (csbEnvIgnore == ERROR)
X	    ErrorExit("The environtment list contains too many environments");
X}
X
X/******
X** BeginEnv -- checks to see if sbEnv is in the list rgsbEnvIgnore.  If it
X**	is, sbCurrentEnv is set to sbEnv.
X******/
X
XBeginEnv(sbEnv)
Xchar	*sbEnv;
X{
X	int	i;
X
X	if (!fLatex) return(0);
X	for (i = 0; i < csbEnvIgnore; i++)
X	    if (strcmp(sbEnv, rgsbEnvIgnore[i]) == 0) {
X		(void)strcpy(sbCurrentEnv, sbEnv);
X		return(1);
X	    }
X	return(0);
X}
X
X/******
X** EndEnv -- checks to see if sbEnv is the current environment being ignored.
X******/
X
XEndEnv(sbEnv)
Xchar	*sbEnv;
X{
X	if (!fLatex) return(0);
X	if (strcmp(sbEnv, sbCurrentEnv) == 0)
X	    return(1);
X	return(0);
X}
X
X/******
X** InputFile -- push the current yyin and open sbFile.  If the open fails,
X**	the sbFile is ignored.
X******/
X
XInputFile(sbFile)
Xchar	*sbFile;
X{
X	FILE	*TexOpen();
X
X	if (!fFollow)
X	    return;
X	rgfp[cfp++] = yyin;
X	if ((yyin = TexOpen(sbFile)) == NULL) {
X	    Warning("can't open \\input file", sbFile);
X	    yyin = rgfp[--cfp];
X	}
X}
X
X/******
X** IncludeFile -- if sbFile is not in the rgsbIncList, push current yyin
X**	and open sbFile.  If the open fails, the sbFile is ignored.
X******/
X
XIncludeFile(sbFile)
Xchar	*sbFile;
X{
X	FILE	*TexOpen();
X
X	if (!fFollow)
X	    return;
X	if (!InList(sbFile))
X	    return;
X	rgfp[cfp++] = yyin;
X	if ((yyin = TexOpen(sbFile)) == NULL) {
X	    Warning("can't open \\include file", sbFile);
X	    yyin = rgfp[--cfp];
X	}
X}
X
X/******
X** AddInclude -- adds sbFile to the rgsbIncList and increments csbIncList.
X**	If the include list is too long, sbFile is ignored.
X******/
X
XAddInclude(sbFile)
Xchar	*sbFile;
X{
X	if (!fFollow)
X	    return;
X	if (csbIncList >= MAXINCLIST)
X	    Warning("\\includeonly list is too long, ignoring", sbFile);
X	rgsbIncList[csbIncList] = malloc((unsigned)(strlen(sbFile) + 1));
X	(void)strcpy(rgsbIncList[csbIncList++], sbFile);
X}
X
X/******
X** InList -- checks to see if sbFile is in the rgsbIncList.  If there is
X**	no list, all files are assumed to be "in the list".
X******/
X
XInList(sbFile)
Xchar	*sbFile;
X{
X	char	*pch, sbBase[MAXPATHLEN];
X	int	i;
X
X	if (csbIncList == 0)	/* no list */
X	    return(1);
X	(void)strcpy(sbBase, sbFile);
X	if ((pch = rindex(sbBase, '.')) != NULL)
X	    *pch = '\0';
X	i = 0;
X	while ((i < csbIncList) && rgsbIncList[i])
X	    if (strcmp(rgsbIncList[i++], sbBase) == 0)
X	        return(1);
X	return(0);
X}
X
X/******
X** SetInputPaths -- sets rgsbInputPaths to the values indicated by the
X**	TEXINPUTS environment variable if set or else DEFAULTINPUTS.
X******/
X
XSetInputPaths()
X{
X    char *sb, *sbPaths, *getenv();
X
X    if ((sb = getenv("TEXINPUTS")) == NULL)
X	sbPaths = DEFAULTINPUTS;
X    else {
X	sbPaths = malloc((unsigned)(strlen(sb) + 1));
X	(void)strcpy(sbPaths, sb);
X    }
X
X    csbInputPaths = SeparateList(sbPaths, rgsbInputPaths, CHPATHSEP, MAXINPUTPATHS);
X    if (csbInputPaths == ERROR)
X	ErrorExit("TEXINPUTS environment variable has too many paths");
X}
X
X/******
X** SeparateList -- takes a chSep separated list sbList, replaces the
X**	chSep's with NULLs and sets rgsbList[i] to the beginning of
X**	the ith word in sbList.  The number of words is returned.  A
X**	ERROR is returned if there are more than csbMax words.
X******/
X
XSeparateList(sbList, rgsbList, chSep, csbMax)
Xchar	*sbList, *rgsbList[], chSep;
Xint	csbMax;
X{
X	int	csbList = 0;
X
X	while (sbList && *sbList && csbList < csbMax) {
X	    rgsbList[csbList++] = sbList;
X	    if (sbList = index(sbList, chSep))
X		*sbList++ = '\0';
X	}
X	return(sbList && *sbList ? ERROR : csbList);
X}
X
X/******
X** TexOpen -- tries to open sbFile in each of the rgsbInputPaths in turn.
X**	For each input path the following order is used:
X**		file.tex - must be as named, if not there go to the next path
X**		file.ext - random extension, try it
X**		file     - base name, add .tex and try it
X**		file     - try it as is
X**	Notice that if file exists in the first path and file.tex exists in
X**	one of the other paths, file in the first path is what is opened.
X**	If the sbFile begins with a '/', no paths are searched.
X******/
X
XFILE *
XTexOpen(sbFile)
Xchar	*sbFile;
X{
X	char	*pch, *sbNew;
X	FILE	*fp;
X	int	iPath;
X	static char	sbFullPath[MAXPATHLEN];
X
X	for (iPath = 0; iPath < csbInputPaths; iPath++) {
X	    if (*sbFile == '/') {	/* absolute path */
X		(void)sprintf(sbFullPath, "%s", sbFile);
X		iPath = csbInputPaths;	/* only check once */
X	    } else
X		(void)sprintf(sbFullPath, "%s/%s", rgsbInputPaths[iPath], sbFile);
X
X	    /* If sbFile ends in .tex then it must be there */
X	    if ((pch = rindex(sbFullPath, '.')) != NULL
X			&& (strcmp(pch, ".tex") == 0))
X		if ((fp = fopen(sbFullPath, "r")) != NULL)
X		    return(fp);
X		else
X		    continue;
X
X	    /* if .<ext> then try to open it.  the '.' represents   */
X	    /* the beginning of an extension if it is not the first */
X	    /* character and it does not follow a '.' or a '/'      */
X	    if (pch != NULL && pch > &(sbFullPath[0])
X                    && *(pch - 1) != '.' && *(pch - 1) != '/'
X		    && (fp = fopen(sbFullPath, "r")) != NULL)
X		return(fp);
X
X	    /* just base name, add .tex to the name */
X	    sbNew = malloc((unsigned)(strlen(sbFullPath) + 5));
X	    (void)strcpy(sbNew, sbFullPath);
X	    (void)strcat(sbNew, ".tex");
X	    if ((fp = fopen(sbNew, "r")) != NULL)
X		return(fp);
X
X	    /* try sbFile regardless */
X	    if ((fp = fopen(sbFullPath, "r")) != NULL)
X		return(fp);
X	}
X	return((FILE *)NULL);
X}
X
X/******
X** Warning -- print a warning message preceded by the program name.
X******/
X
XWarning(sb1, sb2)
Xchar	*sb1, *sb2;
X{
X	fprintf(stderr, "%s: warning: %s %s\n", sbProgName, sb1, sb2);
X}
X
X/******
X** ErrorExit -- print an error message preceded by the program name.
X**	Stdout is flushed and detex exits.
X******/
X
XErrorExit(sb1)
Xchar	*sb1;
X{
X	(void)fflush(stdout);
X	fprintf(stderr, "%s: error: %s\n", sbProgName, sb1);
X	exit(1);
X}
END_OF_FILE
if test 14623 -ne `wc -c <'detex.l'`; then
    echo shar: \"'detex.l'\" unpacked with wrong size!
fi
# end of 'detex.l'
fi
if test -f 'states.sed' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'states.sed'\"
else
echo shar: Extracting \"'states.sed'\" \(308 characters\)
sed "s/^X//" >'states.sed' <<'END_OF_FILE'
X# convert long labels to a shorter form so lex(1) won't overflow
Xs/LaBegin/SA/g
Xs/LaDisplay/SB/g
Xs/LaEnd/SC/g
Xs/LaEnv/SD/g
Xs/LaFormula/SE/g
Xs/LaInclude/SF/g
Xs/LaMacro2/SG/g
Xs/LaMacro/SH/g
Xs/LaVerbatim/SI/g
Xs/Define/SJ/g
Xs/Display/SK/g
Xs/IncludeOnly/SL/g
Xs/Input/SM/g
Xs/Math/SN/g
Xs/Normal/SO/g
Xs/Control/SP/g
END_OF_FILE
if test 308 -ne `wc -c <'states.sed'`; then
    echo shar: \"'states.sed'\" unpacked with wrong size!
fi
# end of 'states.sed'
fi
echo shar: End of shell archive.
exit 0
-- 
Daniel Trinkle			trinkle@cs.purdue.edu
Dept. of Computer Sciences	{backbone}!purdue!trinkle
Purdue University		317-494-7844
West Lafayette, IN 47907-1398

exit 0 # Just in case...
