Newsgroups: comp.sources.misc
From: dave@galaxia.newport.ri.us (David H. Brierley)
Subject:  v29i058:  ls_archive - produce ls-like (but better) listings of archives, Part01/01
Message-ID: <1992Apr5.033019.199@sparky.imd.sterling.com>
X-Md4-Signature: ec30b8db55f62e1391c4d9799e504e31
Date: Sun, 5 Apr 1992 03:30:19 GMT
Approved: kent@sparky.imd.sterling.com

Submitted-by: dave@galaxia.newport.ri.us (David H. Brierley)
Posting-number: Volume 29, Issue 58
Archive-name: ls_archive/part01
Environment: UNIX, ANSI-C

This program produces a recursive listing of a directory tree, similar to
"ls -lR" but with a few major differences.  The first difference is that
each line of the output contains a complete file name, including directory
information.  The second is that not all of the information presented by
"ls" is presented by default.  How many people really care about the mode
of a file, the number of links to it, and the owner.  The third difference
is that the dates are presented in the format "yy/mm/dd hh:mm" and are
placed at the beginning of the line.  These changes allow the file to be
sorted by date and to be easily searched using simple tools like "grep".
See the README file for more details.

I am strongly urging all major archive sites to consider installing and
running this program, especially if you provide uucp access.  The output of
this program will (hopefully) be appreciated by the users of your archive.
This program does not require any special maintenance or special data files,
you just plug it in and tell cron to run it once a night.  The files
produced by this program are comparable in size to the output of "ls -lR",
despite the fact that each line contains a full directory name.  This is due
to the fact that some of the other fields normally presented by "ls" are not
presented.

Note: this program requires an ANSI compiler.  If this presents a major
problem to someone that wants to use it, let me know and I will generate an
old-style version.

David H. Brierley
Home: dave@galaxia.newport.ri.us; Work: dhb@quahog.ssd.ray.com
Send comp.sources.3b1 submissions to comp-sources-3b1@galaxia.newport.ri.us
%% Can I be excused, my brain is full. **
-----
#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 1 (of 1)."
# Contents:  Installation MANIFEST README ls_archive.1 ls_archive.c
#   makefile patchlevel.h scandir.c
# Wrapped by dave@galaxia on Sat Mar 28 23:06:16 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'Installation' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Installation'\"
else
echo shar: Extracting \"'Installation'\" \(938 characters\)
sed "s/^X//" >'Installation' <<'END_OF_FILE'
XThere is not a lot involved with configuring and installing this
Xprogram.  Answer the following questions and then edit the makefile.
X
X1. What is the name of your ANSI C compiler?  This program will not compile
X   without an ANSI compiler.
X
X2. Does your directory reading library use "struct direct" or "struct dirent"?
X
X3. Are your directory reading routines included in libc or are they in a
X   separate library?
X
X4. Does your library provide a scandir routine that is compatible with your
X   directory reading routines?  Some systems seem to have a scandir routine
X   which uses "struct direct" even though the directory routines use the
X   "struct dirent".
X
XThere are a few other little minor things you can set in the makefile, like
Xwhat options to pass to the compiler and stuff like that.
X
XEdit the makefile and then type "make".
X
XThere is no "install" target provided.  Please install the program according
Xto your local customs.
END_OF_FILE
if test 938 -ne `wc -c <'Installation'`; then
    echo shar: \"'Installation'\" unpacked with wrong size!
fi
# end of 'Installation'
fi
if test -f 'MANIFEST' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MANIFEST'\"
else
echo shar: Extracting \"'MANIFEST'\" \(344 characters\)
sed "s/^X//" >'MANIFEST' <<'END_OF_FILE'
X   File Name		Archive #	Description
X-----------------------------------------------------------
X Installation               1	
X MANIFEST                   1	
X README                     1	
X ls_archive.1               1	
X ls_archive.c               1	
X makefile                   1	
X patchlevel.h               1	
X scandir.c                  1	
END_OF_FILE
if test 344 -ne `wc -c <'MANIFEST'`; then
    echo shar: \"'MANIFEST'\" unpacked with wrong size!
fi
# end of 'MANIFEST'
fi
if test -f 'README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'README'\"
else
echo shar: Extracting \"'README'\" \(3061 characters\)
sed "s/^X//" >'README' <<'END_OF_FILE'
XThis program produces a recursive listing of a directory tree.  Now the first
Xquestion you might ask yourself is "why do I want this program, what's wrong
Xwith ls -lR"?  Try grepping the output of ls -lR for any random string that
Xmight occur in the file, for example 'bison', and then quickly tell me the
Xname of the file that matched the grep.  You can't because the grep only gave
Xyou the actual file name but none of the directory information.  You have to
Xsearch the file using more/less/vi/emacs to find out all of the information
Xyou need.  It is also next to impossible to determine what has been added to
Xan archive area recently by looking at the ls-lR file.  Some archive sites
Xprovide an ls-ltR file which apparently attempts to address this situation
Xbut fails miserably.
X
XThis program addresses both of these problems in the following ways:
X   - only actual files are listed, no directories
X   - files are listed by full path name (relative to the top level directory)
X   - dates are printed in a format suitable for sorting
X
XThe purpose of this program is to provide a listing of an archive directory
Xthat can be easily grepped for keywords and that can be truly sorted into time
Xorder.  To find a file in a standard "ls-lR" file you must search the file for
Xthe requested file name (or file name pattern) and then scan backwards in the
Xfile to find the directory name.  To find out what files have been added to an
Xarchive recently using a standard "ls-lR" file you must somehow convert the
Xmyriad of date formats (to say nothing of "ls" formats) into a standard form
Xand then sort.  This program solves both of these problems by printing the
Xdate in yy/mm/dd format and by printing the full path name of the file on each
Xline.  To compensate for the potential extra space taken up by printing the
Xfull path name for each file the program does not print the names of
Xdirectories as separate entries, it does not print the number of links a file
Xhas, and by default it does not print the mode of the file or the owner.
XOptions are available to request either or both of the mode and the owner to
Xbe printed.
X
XThis program was written and is being distributed in the hopes that at least
Xsome of the major archive sites might be willing to use this program either in
Xaddition to or in place of the ls program to produce a listing of the contents
Xof their archives.  The output of this program is easy to sort, easy to
Xsearch, and in general much friendlier than the output of "ls -lR".
X
X
XSample output:
X91/02/18 20:55     9856 cs-3b1/volume01/info1.Z
X91/02/23 22:08    41837 cs-3b1/volume01/afio/part01.Z
X91/06/01 13:43    16761 cs-3b1/volume01/ccc_1.3x/part01.Z
X91/09/29 20:09     4864 cs-3b1/volume01/ccmath/part01.Z
X91/03/17 16:25     9125 cs-3b1/volume01/cdraw2fig/part01.Z
X91/07/03 21:31    19561 cs-3b1/volume01/epx/part01.Z
X91/08/07 23:17     2993 cs-3b1/volume01/epx/part02.Z
X
X
X
X-------------------------------------------------------------------------------
XCopyright 1992 David H. Brierley, All Rights Reserved
Xdave@galaxia.newport.ri.us
END_OF_FILE
if test 3061 -ne `wc -c <'README'`; then
    echo shar: \"'README'\" unpacked with wrong size!
fi
# end of 'README'
fi
if test -f 'ls_archive.1' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'ls_archive.1'\"
else
echo shar: Extracting \"'ls_archive.1'\" \(3131 characters\)
sed "s/^X//" >'ls_archive.1' <<'END_OF_FILE'
X.TH ls_archive 1 "local"
X.SH NAME
Xls_archive \- produce readable listings of archive directories
X.SH SYNOPSIS
Xls_archives [options] [directories]
X.SH DESCRIPTION
XThis program produces a recursive listing of a directory tree with the
Xfollowing characteristics:
X.TP 5
X-
Xonly actual files are listed, no directories
X.TP 5
X-
Xfiles are listed by full path name (relative to the top level directory)
X.TP 5
X-
Xdates are printed in a format suitable for sorting
X.PP
XThe purpose of this program is to provide a listing of an archive directory
Xthat can be easily grepped for keywords and that can be truly sorted into
Xtime order.  To find a file in a standard "ls-lR" file you must search the
Xfile for the requested file name (or file name pattern) and then scan
Xbackwards in the file to find the directory name.  To find out what files
Xhave been added to an archive recently using a standard "ls-lR" file you
Xmust somehow convert the myriad of date formats (to say nothing of "ls"
Xformats) into a standard form and then sort.  This program solves both of
Xthese problems by printing the date in yy/mm/dd format and by printing the
Xfull path name of the file on each line.  To compensate for the potential
Xextra space taken up by printing the full path name for each file the 
Xprogram does not print the names of directories as separate entries, it
Xdoes not print the number of links a file has, and by default it does not
Xprint the mode of the file or the owner.  Options are available to request
Xeither or both of the mode and the owner to be printed.
X.SH "COMMAND LINE OPTIONS"
X.TP 5
X-a
XAll files are displayed.  By default, files that begin with a
Xdot are not printed.
X.TP 5
X-t
XSort files by time within each directory.  The default is to
Xsort the files alphabetically.
XSub-directories will still be sorted alphabetically unless this
Xflag is specified twice (i.e. -tt).
X.TP 5
X-s
XShow the name of the top level directory.
X.TP 5
X-f X
XThe string X is used to specify what information is to be printed
Xand what order it is to be printed in.  The string X is comprised
Xof the letters 'dsomn', which stand for date, size, owner, mode,
Xand name.  The default value is 'dsn'.
X.TP 5
Xdir
XIf a directory is specified on the command line, the program will chdir()
Xto that directory before beginning it's work.  The name of this directory
Xwill not be included in the output unless the "-s" option is specified.
XIf no directory name is specified, the program will simply process the
Xcurrent directory.  In this case, the name of the current directory will
Xnot be included in the output.
X.SH EXAMPLE
Xls_archive ~uucp/pub
X.sp
X.nf
X91/02/18 20:55     9856 cs-3b1/volume01/info1.Z
X91/02/23 22:08    41837 cs-3b1/volume01/afio/part01.Z
X91/06/01 13:43    16761 cs-3b1/volume01/ccc_1.3x/part01.Z
X91/09/29 20:09     4864 cs-3b1/volume01/ccmath/part01.Z
X91/03/17 16:25     9125 cs-3b1/volume01/cdraw2fig/part01.Z
X91/07/03 21:31    19561 cs-3b1/volume01/epx/part01.Z
X91/08/07 23:17     2993 cs-3b1/volume01/epx/part02.Z
X.fi
X.SH BUGS
XNone that I know of.  Your mileage may vary.
X.SH "SEE ALSO"
Xls(1)
X.SH AUTHOR
XDavid H. Brierley
X.br
X.I "dave@galaxia.newport.ri.us"
END_OF_FILE
if test 3131 -ne `wc -c <'ls_archive.1'`; then
    echo shar: \"'ls_archive.1'\" unpacked with wrong size!
fi
# end of 'ls_archive.1'
fi
if test -f 'ls_archive.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'ls_archive.c'\"
else
echo shar: Extracting \"'ls_archive.c'\" \(7883 characters\)
sed "s/^X//" >'ls_archive.c' <<'END_OF_FILE'
X/*
X * Program: ls_archive
X *
X * Program functional details are provided in the README file and the man page.
X * Operational details are provided by reading the source code (there are even
X * a few comments scattered throughout).
X *
X * Copyright 1992 David H. Brierley, All Rights Reserved
X */
X
X#include <stdio.h>
X#include <sys/types.h>
X
X#ifdef	TYPE_DIRENT
X# include <dirent.h>
X  typedef struct dirent DIRENT;
X#endif
X
X#ifdef	TYPE_DIRECT
X# include <sys/dir.h>
X  typedef struct direct DIRENT;
X#endif
X
X#include <sys/stat.h>
X#ifdef	BSD
X#include <strings.h>
X#else
X#include <string.h>
X#include <malloc.h>
X#endif
X#include <time.h>
X#include <unistd.h>
X#include <pwd.h>
X
X
Xextern int      optind;
Xextern char    *optarg;
Xextern int      getopt (int argc, char *argv[], char *key);
X
Xstatic char    *mode_vals[] = {
X    "---", "--x", "-w-", "-wx",
X    "r--", "r-x", "rw-", "rwx"
X};
X
Xstruct ulist {
X    int             nl_uid;
X    char            nl_username[16];
X    struct ulist   *nl_next;
X};
Xtypedef struct ulist ULIST;
X
X
X/* ls_archive.c */
Xint             main (int argc, char *argv[]);
Xvoid            list_directory (char *dir_name, int aflg, int tsort, char *fmt);
Xint             time_sort (DIRENT ** d1, DIRENT ** d2);
Xvoid            show_owner (struct stat buf);
X/* scandir.c */
Xint             scandir (char *d, DIRENT * (*n[]), int (*s) (), int (*c) ());
Xint             alphasort (DIRENT ** d1, DIRENT ** d2);
X
X#ifndef	S_IFLNK
X# define	lstat(f,p)	stat((f),(p))
X#endif
X
Xstatic char    *SccsId = "@(#) ls_archive.c: version 1.9 3/28/92 23:05:10";
X
Xint
Xmain (int argc, char *argv[])
X{
X    int             all_flag = 0;
X    int             time_order = 0;
X    int             show_dir = 0;
X    char            fmt_string[32];
X    int             optc;
X
X    all_flag = time_order = show_dir = 0;
X    (void) strcpy (fmt_string, "dsn");
X
X    while ((optc = getopt (argc, argv, "tsaf:")) != EOF) {
X	switch (optc) {
X	case 'a':
X	    all_flag = 1;
X	    break;
X	case 't':
X	    ++time_order;
X	    break;
X	case 's':
X	    show_dir = 1;
X	    break;
X	case 'f':
X	    (void) strncpy (fmt_string, optarg, sizeof (fmt_string));
X	    break;
X	}
X    }
X
X    if (optind < argc) {
X	if (chdir (argv[optind]) == -1) {
X	    perror (argv[0]);
X	    fprintf (stderr,
X		     "Unable to change directory to '%s'\n",
X		     argv[optind]);
X	    exit (1);
X	}
X    }
X
X    if ((show_dir == 0) || (argv[optind] == NULL)) {
X	argv[optind] = "";
X    }
X
X    list_directory (argv[optind], all_flag, time_order, fmt_string);
X
X    return (0);
X
X}
X
X/*
X * Procedure: list_directory
X * 
X * This procedure is called recursively to list out the contents of a directory.
X * Before calling the routine the caller should execute a chdir() to the
X * requested directory.  The directory name that is passed to this routine
X * should be the complete name relative to the start of the program.
X */
Xvoid
Xlist_directory (char *dir_name, int aflg, int tsort, char *fmt)
X{
X    struct stat     sbuf;
X    DIRENT         *dp;
X    DIRENT        **dp_list;
X    int             nitems;
X    int             xitem;
X    char            filename[1024];
X#ifdef	S_IFLNK
X    char            link[1024];
X    int             len;
X#endif
X    char            sep_char[2];
X    char           *fmt_opt;
X    struct tm      *tm;
X    int             m1;
X    int             m2;
X    int             m3;
X
X    if (tsort == 0) {
X	nitems = scandir (".", &dp_list, NULL, alphasort);
X    }
X    else {
X	nitems = scandir (".", &dp_list, NULL, time_sort);
X    }
X    if (nitems == -1) {
X	return;
X    }
X
X    if (*dir_name != '\0') {
X	(void) strcpy (sep_char, "/");
X    }
X    else {
X	sep_char[0] = '\0';
X    }
X
X    /*
X     * First we scan for regular files.
X     */
X    for (xitem = 0; xitem < nitems; ++xitem) {
X	dp = dp_list[xitem];
X	if (strcmp (dp -> d_name, ".") == 0) {
X	    continue;
X	}
X	if (strcmp (dp -> d_name, "..") == 0) {
X	    continue;
X	}
X	if ((aflg == 0) && (*dp -> d_name == '.')) {
X	    continue;
X	}
X	if (lstat (dp -> d_name, &sbuf) == -1) {
X	    continue;
X	}
X	if ((sbuf.st_mode & S_IFMT) == S_IFDIR) {
X	    continue;
X	}
X
X	/*
X	 * Print out each of the items requested in the format string
X	 */
X	fmt_opt = fmt;
X	while (*fmt_opt) {
X	    switch (*fmt_opt) {
X	    case 'd':		/* date and time */
X		tm = localtime (&sbuf.st_mtime);
X		printf ("%02d/%02d/%02d %02d:%02d",
X			tm -> tm_year, tm -> tm_mon + 1, tm -> tm_mday,
X			tm -> tm_hour, tm -> tm_min);
X		break;
X	    case 's':		/* size */
X		printf ("%8d", sbuf.st_size);
X		break;
X	    case 'm':		/* modes (permissions) */
X		m1 = (sbuf.st_mode >> 6) & 07;
X		m2 = (sbuf.st_mode >> 3) & 07;
X		m3 = (sbuf.st_mode) & 07;
X		printf ("-%s%s%s",
X			mode_vals[m1], mode_vals[m2], mode_vals[m3]);
X		break;
X	    case 'o':		/* owner */
X		show_owner (sbuf);
X		break;
X	    case 'n':		/* name */
X		printf ("%s%s%s",
X			dir_name, sep_char, dp -> d_name);
X#ifdef		S_IFLNK
X		if ((sbuf.st_mode & S_IFMT) == S_IFLNK) {
X		    len = readlink (dp -> d_name, link, sizeof (link));
X		    if (len == -1) {
X			(void) strcpy (link, "[unable to read link]");
X		    }
X		    else {
X			link[len] = '\0';
X		    }
X		    printf (" -> %s", link);
X		}
X#endif
X		break;
X	    }
X
X	    /*
X	     * If there are more items in the format string print a space and
X	     * then loop back
X	     */
X	    if (*++fmt_opt) {
X		printf (" ");
X	    }
X	}
X	printf ("\n");
X    }
X
X    /*
X     * And then we scan for directories
X     */
X    if (tsort == 1) {
X	nitems = scandir (".", &dp_list, NULL, alphasort);
X    }
X    for (xitem = 0; xitem < nitems; ++xitem) {
X	dp = dp_list[xitem];
X	if (strcmp (dp -> d_name, ".") == 0) {
X	    continue;
X	}
X	if (strcmp (dp -> d_name, "..") == 0) {
X	    continue;
X	}
X	if ((aflg == 0) && (*dp -> d_name == '.')) {
X	    continue;
X	}
X	if (lstat (dp -> d_name, &sbuf) == -1) {
X	    continue;
X	}
X	if ((sbuf.st_mode & S_IFMT) != S_IFDIR) {
X	    continue;
X	}
X	if (chdir (dp -> d_name) == -1) {
X	    perror (dp -> d_name);
X	    fprintf (stderr,
X		     "Unable to change directory to '%s%s%s'\n",
X		     dir_name, sep_char, dp -> d_name);
X	    continue;
X	}
X	(void) sprintf (filename, "%s%s%s", dir_name, sep_char, dp -> d_name);
X	list_directory (filename, aflg, tsort, fmt);
X	if (chdir ("..") == -1) {
X	    perror (dp -> d_name);
X	    fprintf (stderr, "Unable to change directory back to '..'\n");
X	    fprintf (stderr, "Program terminated\n");
X	    exit (1);
X	}
X    }
X
X    (void) free (dp_list);
X
X}
X
X/*
X * Procedure: time_sort
X * 
X * This procedure is called from qsort if a time order sort has been requested.
X * The two files are "stat"ed and the time stamps compared.  If either file
X * cannot be "stat"ed, a value of 0 is returned.  This is not really a
X * correct value but the stat should never fail.
X */
Xint
Xtime_sort (DIRENT ** d1, DIRENT ** d2)
X{
X    struct stat     s1;
X    struct stat     s2;
X
X    if (lstat ((*d1) -> d_name, &s1) == -1) {
X	return (0);
X    }
X    if (lstat ((*d2) -> d_name, &s2) == -1) {
X	return (0);
X    }
X
X    return (s1.st_mtime - s2.st_mtime);
X
X}
X
X/*
X * Procedure: show_owner
X * 
X * This procedure prints out the username associated with a numeric uid value.
X * It keeps a linked list of uid/username matchings to avoid having to scan
X * the passwd file repeatedly.
X */
Xvoid
Xshow_owner (struct stat buf)
X{
X    static ULIST   *head = NULL;
X    ULIST          *ptr;
X    ULIST          *old;
X    struct passwd  *pw;
X
X    old = NULL;
X    for (ptr = head; ptr != NULL; ptr = ptr -> nl_next) {
X	if (ptr -> nl_uid == buf.st_uid) {
X	    printf ("%-8.8s", ptr -> nl_username);
X	    return;
X	}
X	old = ptr;
X    }
X
X    pw = getpwuid (buf.st_uid);
X    ptr = (ULIST *) malloc (sizeof (ULIST));
X    if (pw == NULL) {
X	(void) sprintf (ptr -> nl_username, "%d", buf.st_uid);
X    }
X    else {
X	(void) strcpy (ptr -> nl_username, pw -> pw_name);
X    }
X    ptr -> nl_uid = buf.st_uid;
X    ptr -> nl_next = NULL;
X
X    if (head == NULL) {
X	head = ptr;
X    }
X    else {
X	old -> nl_next = ptr;
X    }
X
X    printf ("%-8.8s", ptr -> nl_username);
X
X}
END_OF_FILE
if test 7883 -ne `wc -c <'ls_archive.c'`; then
    echo shar: \"'ls_archive.c'\" unpacked with wrong size!
fi
# end of 'ls_archive.c'
fi
if test -f 'makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'makefile'\"
else
echo shar: Extracting \"'makefile'\" \(1300 characters\)
sed "s/^X//" >'makefile' <<'END_OF_FILE'
X#
X# makefile for ls_archive package
X#
X
X# ls_archive.c requires an ANSI compiler
XCC		= gcc
XCOPTS		= -Wall -fstrength-reduce -fpcc-struct-return
X
X# Configuration options for a System V machine
XSYSTYPE		= -DSYSV
XDIRTYPE		= -DTYPE_DIRENT
XLIBDIR		= -ldir		# not needed on all systems
X
X# Configuration options for a BSD machine
X#SYSTYPE	= -DBSD
X#DIRTYPE	= -DTYPE_DIRECT
X#LIBDIR		=		# define this for a non-standard library
X
X# if your library has a scandir routine which is compatible with the
X# directory routines, comment out the following line.  This is not
X# always the case on BSD systems which have adopted the new "dirent"
X# routines.  A "dirent" version of scandir is included with this package.
XSCANDIR		= scandir.o
X
X# The default behaviour is to link using gcc.  Change these options to use
X# some other program and set of libraries to link with.
XLD		= gcc
XLD_LIBS		=
X#LD		= ccc				# use this on the 3b1
X#LD_LIBS	= /usr/local/lib/gcc-gnulib	# use this on the 3b1
X
X# add special options here 
XDEF		=
XDEBUG		= # -g
XOPTIMIZE	= -O
XCFLAGS 		= $(COPTS) $(DEF) $(DEBUG) $(OPTIMIZE) $(DIRTYPE) $(SYSTYPE)
X
XOBJECT		= ls_archive.o
X
Xls_archive	:	$(OBJECT) $(SCANDIR)
X	$(LD) $(LDFLAGS) $(OBJECT) $(SCANDIR) $(LIBDIR) $(LD_LIBS)
X	mv a.out ls_archive
X
Xclean:
X	rm -f *.o ls_archive a.out core
X
Xshar:
X	makekit -m
END_OF_FILE
if test 1300 -ne `wc -c <'makefile'`; then
    echo shar: \"'makefile'\" unpacked with wrong size!
fi
# end of 'makefile'
fi
if test -f 'patchlevel.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'patchlevel.h'\"
else
echo shar: Extracting \"'patchlevel.h'\" \(65 characters\)
sed "s/^X//" >'patchlevel.h' <<'END_OF_FILE'
X#define PATCH_LEVEL	"1.2"
X#define PATCH_DATE	"92/03/28 23:05:40"
END_OF_FILE
if test 65 -ne `wc -c <'patchlevel.h'`; then
    echo shar: \"'patchlevel.h'\" unpacked with wrong size!
fi
# end of 'patchlevel.h'
fi
if test -f 'scandir.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'scandir.c'\"
else
echo shar: Extracting \"'scandir.c'\" \(2657 characters\)
sed "s/^X//" >'scandir.c' <<'END_OF_FILE'
X/*
X * Copyright (c) 1983 Regents of the University of California.
X * All rights reserved.  The Berkeley software License Agreement
X * specifies the terms and conditions for redistribution.
X */
X
X#if defined(LIBC_SCCS) && !defined(lint)
Xstatic char sccsid[] = "@(#)scandir.c	5.2 (Berkeley) 3/9/86";
X#endif LIBC_SCCS and not lint
X
X/*
X * Scan the directory dirname calling select to make a list of selected
X * directory entries then sort using qsort and compare routine dcomp.
X * Returns the number of entries and a pointer to a list of pointers to
X * struct direct (through namelist). Returns -1 if there were any errors.
X */
X
X#include <sys/types.h>
X#include <sys/stat.h>
X#include <dirent.h>
X
Xscandir(dirname, namelist, select, dcomp)
X	char *dirname;
X	struct dirent *(*namelist[]);
X	int (*select)(), (*dcomp)();
X{
X	register struct dirent *d, *p, **names;
X	register int nitems;
X	register char *cp1, *cp2;
X	unsigned int len;
X	struct stat stb;
X	long arraysz;
X	DIR *dirp;
X
X	if ((dirp = opendir(dirname)) == NULL)
X		return(-1);
X	if (fstat(dirp->dd_fd, &stb) < 0) {
X		closedir(dirp);
X		return(-1);
X	}
X
X	/*
X	 * estimate the array size by taking the size of the directory file
X	 * and dividing it by a multiple of the minimum size entry. 
X	 */
X	arraysz = (stb.st_size / 24);
X	names = (struct dirent **)malloc(arraysz * sizeof(struct dirent *));
X	if (names == NULL) {
X		closedir(dirp);
X		return(-1);
X	}
X
X	nitems = 0;
X	while ((d = readdir(dirp)) != NULL) {
X		if (select != NULL && !(*select)(d))
X			continue;	/* just selected names */
X		/*
X		 * Make a minimum size copy of the data
X		 */
X#ifdef		DIRENTSIZ
X		len = DIRENTSIZ(d->d_reclen);
X#else
X		len = DIRSIZ(d);
X#endif
X		p = (struct dirent *)malloc(len);
X		if (p == NULL) {
X			closedir(dirp);
X			return(-1);
X		}
X		p->d_ino = d->d_ino;
X		p->d_reclen = d->d_reclen;
X		/* p->d_namlen = d->d_namlen; */
X		for (cp1 = p->d_name, cp2 = d->d_name; *cp1++ = *cp2++; );
X		/*
X		 * Check to make sure the array has space left and
X		 * realloc the maximum size.
X		 */
X		if (++nitems >= arraysz) {
X			if (fstat(dirp->dd_fd, &stb) < 0) {
X				closedir(dirp);
X				return(-1);	/* just might have grown */
X			}
X			arraysz = stb.st_size / 12;
X			names = (struct dirent **)realloc((char *)names,
X				arraysz * sizeof(struct dirent *));
X			if (names == NULL) {
X				closedir(dirp);
X				return(-1);
X			}
X		}
X		names[nitems-1] = p;
X	}
X	closedir(dirp);
X	if (nitems && dcomp != NULL)
X		qsort(names, nitems, sizeof(struct dirent *), dcomp);
X	*namelist = names;
X	return(nitems);
X}
X
X/*
X * Alphabetic order comparison routine for those who want it.
X */
Xalphasort(d1, d2)
X	struct dirent **d1, **d2;
X{
X	return(strcmp((*d1)->d_name, (*d2)->d_name));
X}
X
END_OF_FILE
if test 2657 -ne `wc -c <'scandir.c'`; then
    echo shar: \"'scandir.c'\" unpacked with wrong size!
fi
# end of 'scandir.c'
fi
echo shar: End of archive 1 \(of 1\).
cp /dev/null ark1isdone
MISSING=""
for I in 1 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have the archive.
    rm -f ark[1-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0

exit 0 # Just in case...
