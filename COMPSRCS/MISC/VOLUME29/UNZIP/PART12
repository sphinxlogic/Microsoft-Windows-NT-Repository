Newsgroups: comp.sources.misc
From: info-zip@cs.ucla.edu (Info-Zip)
Subject:  v29i042:  unzip - Info-ZIP's portable UnZip v4.2, Part12/12
Message-ID: <1992Apr3.063434.29441@sparky.imd.sterling.com>
X-Md4-Signature: 5a155f5c7510be19d240b4487df26a4c
Date: Fri, 3 Apr 1992 06:34:34 GMT
Approved: kent@sparky.imd.sterling.com

Submitted-by: info-zip@cs.ucla.edu (Info-Zip)
Posting-number: Volume 29, Issue 42
Archive-name: unzip/part12
Environment: Unix, VMS, OS/2, MS-DOS, Amiga, Macintosh
Supersedes: unzip, Volume 19, Issues 96-101

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# Contents:  AMIGA/Contents AMIGA/DMakefile AMIGA/DMakefile.cr
#   AMIGA/lmkfile AMIGA/lmkfile.cr AMIGA/patch.pw AMIGA/readme.pw
#   ATARI/Contents ATARI/Makefile.st ATARI/makeit ATARI/unzip.lnk
#   ATARI/unzip.prj MAC/Contents MAC/macstat.h MAC/make.aztec.uu
#   MSDOS/bcc/makeship.bat.u
#   MSDOS/bcc/unz42_bc.dif MSDOS/bcc/unzip.dsk.uu MSDOS/bcc/unzip.mak
#   MSDOS/bcc/unzip_cr.dsk.u MSDOS/bcc/unzip_cr.mak
#   MSDOS/bcc/zipinfo.dsk.uu MSDOS/bcc/zipinfo.mak
#   MSDOS/tcc/makeship.bat.u MSDOS/tcc/unzip.prj
#   MSDOS/tcc/unzip_cr.prj OS2/ship.def OS2/unzip.cs OS2/unzip.def.uu
#   OS2/zipinfo.cs OS2/zipinfo.def.uu VMS/Contents VMS/VMSmunch.h
#   VMS/bilf/make_bilf.com VMS/crypt/make_unzip_vaxc.com VMS/fjndef.h
#   VMS/make_unzip_gcc.com VMS/vmsshare.opt cray.dif zip.h
# Wrapped by kent@sparky on Mon Mar 30 01:45:57 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 12 (of 12)."'
if test -f 'AMIGA/Contents' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'AMIGA/Contents'\"
else
  echo shar: Extracting \"'AMIGA/Contents'\" \(1318 characters\)
  sed "s/^X//" >'AMIGA/Contents' <<'END_OF_FILE'
XContents of the AMIGA sub-archive for UnZip 4.2 and later:
X
X  Contents      this file
X  DMakefile     DICE compiler makefile for regular UnZip
X  DMakefile.cr  DICE compiler makefile for UnZip with decryption (need crypt.c)
X  lmkfile       SAS/C makefile for regular UnZip
X  lmkfile.cr    SAS/C makefile for UnZip with decryption (need crypt.c)
X  patch.pw      Paul Wells _TZ patch, subsequently modified (see below)
X  readme.pw     Paul Wells comments
X  stat.c        stat() function for Paul Wells port
X  utime.c       utime() function for Paul Wells port
X
XNotes:  Paul Wells' original Amiga port for SAS/C and Lattice C (I think)
Xwas subsequently modified for another compiler (probably DICE by Georg
XSassen), and possibly no longer compiles under the original compilers.
XThe suspect code is in file_io.c and has to do with Paul's _TZ code, which
Xis presently commented out and replaced by a specialized SetFileDate call.
XThe file patch.pw will give you some idea of how the code originally looked.
XPresumably all three compilers have predefined macros which identify them,
Xso there need not be any conflict; but there may be one at the moment.
X
XNote also that the DICE compiler version does not require either of the
Xtwo source files included here, and that none of the Amiga stuff has been
Xtested since UnZip 4.1.
END_OF_FILE
  if test 1318 -ne `wc -c <'AMIGA/Contents'`; then
    echo shar: \"'AMIGA/Contents'\" unpacked with wrong size!
  fi
  # end of 'AMIGA/Contents'
fi
if test -f 'AMIGA/DMakefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'AMIGA/DMakefile'\"
else
  echo shar: Extracting \"'AMIGA/DMakefile'\" \(715 characters\)
  sed "s/^X//" >'AMIGA/DMakefile' <<'END_OF_FILE'
X# DMakefile for UnZip 4.2 with Amiga DICE compiler
X# Version:  no crypt + no inflate   [29 Feb 92]
X#
X# Not tested for v4.2.  Edit directories as required.
X#
X#Georg Sassen, D-5100 Aachen,+49-241-875158 subnet: georg@bluemoon.tunix.sub.org
X#georg@bluemoon.GUN.de, georg@cip-s01.informatik.rwth-aachen.de, 2:242/7.11@fido
X
XEXE = DH0:bin/unzip
XOD  = dtmp:unzip/
XSRC1 = unzip.c extract.c file_io.c mapname.c match.c misc.c
XSRC2 = unimplod.c unreduce.c unshrink.c
XSRCS = $(SRC1) $(SRC2)
XCFLAGS = -mD
XOBJS = $(SRCS:"*.c":"$(OD)*.o") $(SRCS:"*.a":"$(OD)*.o")
X
Xall : $(EXE)
X
X$(OBJS) : $(SRCS) unzip.h
X    dcc $(CFLAGS) -c -o %(left) %(right)
X
X$(EXE) : $(OBJS)
X    dcc $(CFLAGS) -o %(left) %(right)
X
Xclean:
X    rm -v $(OBJS)
END_OF_FILE
  if test 715 -ne `wc -c <'AMIGA/DMakefile'`; then
    echo shar: \"'AMIGA/DMakefile'\" unpacked with wrong size!
  fi
  # end of 'AMIGA/DMakefile'
fi
if test -f 'AMIGA/DMakefile.cr' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'AMIGA/DMakefile.cr'\"
else
  echo shar: Extracting \"'AMIGA/DMakefile.cr'\" \(734 characters\)
  sed "s/^X//" >'AMIGA/DMakefile.cr' <<'END_OF_FILE'
X# DMakefile for UnZip 4.2 with Amiga DICE compiler
X# Version:  crypt + no inflate   [29 Feb 92]
X#
X# Not tested for v4.2.  Edit directories as required.
X#
X#Georg Sassen, D-5100 Aachen,+49-241-875158 subnet: georg@bluemoon.tunix.sub.org
X#georg@bluemoon.GUN.de, georg@cip-s01.informatik.rwth-aachen.de, 2:242/7.11@fido
X
XEXE = DH0:bin/unzip
XOD  = dtmp:unzip/
XSRC1 = unzip.c crypt.c extract.c file_io.c mapname.c match.c misc.c
XSRC2 = unimplod.c unreduce.c unshrink.c
XSRCS = $(SRC1) $(SRC2)
XCFLAGS = -mD -DCRYPT
XOBJS = $(SRCS:"*.c":"$(OD)*.o") $(SRCS:"*.a":"$(OD)*.o")
X
Xall : $(EXE)
X
X$(OBJS) : $(SRCS) unzip.h zip.h
X    dcc $(CFLAGS) -c -o %(left) %(right)
X
X$(EXE) : $(OBJS)
X    dcc $(CFLAGS) -o %(left) %(right)
X
Xclean:
X    rm -v $(OBJS)
END_OF_FILE
  if test 734 -ne `wc -c <'AMIGA/DMakefile.cr'`; then
    echo shar: \"'AMIGA/DMakefile.cr'\" unpacked with wrong size!
  fi
  # end of 'AMIGA/DMakefile.cr'
fi
if test -f 'AMIGA/lmkfile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'AMIGA/lmkfile'\"
else
  echo shar: Extracting \"'AMIGA/lmkfile'\" \(1346 characters\)
  sed "s/^X//" >'AMIGA/lmkfile' <<'END_OF_FILE'
X# Makefile for UnZip 4.2 using SAS/C 5.10a
X# [no crypt + no inflate]
X#
X# Not tested since UnZip 4.1.  May need to change directory names for stat.c
X# and utime.c.
X
X#####################
X# MACRO DEFINITIONS #
X#####################
X
XCC = lc
XCFLAGS = -O -DUNIX -v -m0t -cuaisfr -rr
XLD = blink
XLDFLAGS = TO unzip FROM LIB:c.o
XLDFLAGS2 = LIB LIB:lc.lib LIB:amiga.lib
XEXE =
XO = .o
XOBJS = unzip$O extract$O file_io$O mapname$O match$O misc$O\
X       unimplod$O unreduce$O unshrink$O utime$O stat$O
X
X###############################################
X# BASIC COMPILE INSTRUCTIONS AND DEPENDENCIES #
X###############################################
X
X.c$O :
X        $(CC) -o$@ $(CFLAGS) $*.c
X
Xunzip$(EXE):    $(OBJS)
X        $(LD) $(LDFLAGS) $(OBJS) $(LDFLAGS2)
X
Xunzip$O:        unzip.c unzip.h
Xcrypt$O:        crypt.c unzip.h zip.h	# may or may not be in distribution
Xextract$O:      extract.c unzip.h
Xfile_io$O:      file_io.c unzip.h
Xinflate$O:      inflate.c unzip.h	# may or may not be in distribution
Xmapname$O:      mapname.c unzip.h
Xmatch$O:        match.c unzip.h
Xmisc$O:         misc.c unzip.h
Xunimplod$O:     unimplod.c unzip.h
Xunreduce$O:     unreduce.c unzip.h
Xunshrink$O:     unshrink.c unzip.h
Xstat$O:         amiga/stat.c	# may need to change or remove directory name
Xutime$O:        amiga/utime.c	# may need to change or remove directory name
END_OF_FILE
  if test 1346 -ne `wc -c <'AMIGA/lmkfile'`; then
    echo shar: \"'AMIGA/lmkfile'\" unpacked with wrong size!
  fi
  # end of 'AMIGA/lmkfile'
fi
if test -f 'AMIGA/lmkfile.cr' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'AMIGA/lmkfile.cr'\"
else
  echo shar: Extracting \"'AMIGA/lmkfile.cr'\" \(1359 characters\)
  sed "s/^X//" >'AMIGA/lmkfile.cr' <<'END_OF_FILE'
X# Makefile for UnZip 4.2 using SAS/C 5.10a
X# [crypt + no inflate]
X#
X# Not tested since UnZip 4.1.  May need to change directory names for stat.c
X# and utime.c.
X
X#####################
X# MACRO DEFINITIONS #
X#####################
X
XCC = lc
XCFLAGS = -O -DUNIX -DCRYPT -v -m0t -cuaisfr -rr
XLD = blink
XLDFLAGS = TO unzip FROM LIB:c.o
XLDFLAGS2 = LIB LIB:lc.lib LIB:amiga.lib
XEXE =
XO = .o
XOBJS = unzip$O crypt$O extract$O file_io$O mapname$O match$O misc$O\
X       unimplod$O unreduce$O unshrink$O utime$O stat$O
X
X###############################################
X# BASIC COMPILE INSTRUCTIONS AND DEPENDENCIES #
X###############################################
X
X.c$O :
X        $(CC) -o$@ $(CFLAGS) $*.c
X
Xunzip$(EXE):    $(OBJS)
X        $(LD) $(LDFLAGS) $(OBJS) $(LDFLAGS2)
X
Xunzip$O:        unzip.c unzip.h
Xcrypt$O:        crypt.c unzip.h zip.h	# may or may not be in distribution
Xextract$O:      extract.c unzip.h
Xfile_io$O:      file_io.c unzip.h
Xinflate$O:      inflate.c unzip.h	# may or may not be in distribution
Xmapname$O:      mapname.c unzip.h
Xmatch$O:        match.c unzip.h
Xmisc$O:         misc.c unzip.h
Xunimplod$O:     unimplod.c unzip.h
Xunreduce$O:     unreduce.c unzip.h
Xunshrink$O:     unshrink.c unzip.h
Xstat$O:         amiga/stat.c	# may need to change or remove directory name
Xutime$O:        amiga/utime.c	# may need to change or remove directory name
END_OF_FILE
  if test 1359 -ne `wc -c <'AMIGA/lmkfile.cr'`; then
    echo shar: \"'AMIGA/lmkfile.cr'\" unpacked with wrong size!
  fi
  # end of 'AMIGA/lmkfile.cr'
fi
if test -f 'AMIGA/patch.pw' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'AMIGA/patch.pw'\"
else
  echo shar: Extracting \"'AMIGA/patch.pw'\" \(786 characters\)
  sed "s/^X//" >'AMIGA/patch.pw' <<'END_OF_FILE'
X*** v41/file_io.c Mon May 20 22:01:51 1991
X--- v41a/file_io.c Mon May 20 22:53:32 1991
X***************
X*** 719,727 ****
X  #ifdef BSD
X      static struct timeb tbp;
X  #else
X      extern long timezone;
X  #endif
X! 
X  
X      close(outfd);
X  
X--- 720,731 ----
X  #ifdef BSD
X      static struct timeb tbp;
X  #else
X+ #ifdef AMIGA
X+     extern char *_TZ;
X+ #else
X      extern long timezone;
X  #endif
X! #endif
X  
X      close(outfd);
X  
X***************
X*** 794,799 ****
X--- 798,806 ----
X     ftime(&tbp);
X     m_time += tbp.timezone * 60L;
X  #else                                   /* !BSD */
X+ #ifdef AMIGA
X+     _TZ = getenv("TZ");
X+ #endif
X      tzset();                            /* Set `timezone'. */
X      m_time += timezone;                 /* account for timezone differences */
X  #endif
END_OF_FILE
  if test 786 -ne `wc -c <'AMIGA/patch.pw'`; then
    echo shar: \"'AMIGA/patch.pw'\" unpacked with wrong size!
  fi
  # end of 'AMIGA/patch.pw'
fi
if test -f 'AMIGA/readme.pw' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'AMIGA/readme.pw'\"
else
  echo shar: Extracting \"'AMIGA/readme.pw'\" \(940 characters\)
  sed "s/^X//" >'AMIGA/readme.pw' <<'END_OF_FILE'
XDate: Tue, 21 May 91 12:46:10 EST
XFrom: mailrus!gatech!simcity!paul@uunet.UU.NET (Paul Wells)
XSubject: mods for unzip 4.1 for Amiga
XMessage-ID: <9105211746.AA03598@simcity.UUCP>
X
XPlease find enclosed a shar file for Amiga SAS/C 5.10a.  Two source files
Xfor the Amiga are included:  utime.c, so we can alter the date of a file,
Xand stat.c, which isn't really needed for the SAS compiler, but is necessary
Xfor the Lattice.  Sorry, sys/stat.h is not mine, hence, not included; utime.c
Xand stat.c are my original code and released to the public domain.  The patches
Xpertain primarily to ANSI prototyping; however, please note that the SAS
Xcompiler doesn't know what a dup function is.  Everything was compiled with
X-DUNIX -DNOTINT16 and other appropriate SAS/C flags, as noted in lmkfile.
XI hope this is useful for others, but apologize if I didn't get there first.
X
XPaul Wells
X..!gatech!wa4mei!paulw         (or)
X..!gatech!wa4mei!simcity!paul
END_OF_FILE
  if test 940 -ne `wc -c <'AMIGA/readme.pw'`; then
    echo shar: \"'AMIGA/readme.pw'\" unpacked with wrong size!
  fi
  # end of 'AMIGA/readme.pw'
fi
if test -f 'ATARI/Contents' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'ATARI/Contents'\"
else
  echo shar: Extracting \"'ATARI/Contents'\" \(1328 characters\)
  sed "s/^X//" >'ATARI/Contents' <<'END_OF_FILE'
XContents of the ATARI sub-archive for UnZip 4.1:
X
X  Contents     this file
X  AtariST.pat  patches to UnZip 4.1 for Atari ST
X  Makefile.st  Mark Williams makefile for Turbo C compiler
X  makeit       simple command script to make UnZip
X  README.src   notes from Martin Schulz on his patches
X  tc.cfg       Turbo C general configuration file for UnZip (binary)
X  unzip.lnk    referred to as "TLINK.OPT" in notes??
X  unzip.prj    Turbo C project file for UnZip
X
XAll material in this sub-archive was provided by Martin Schulz.
XUnfortunately, his patches against v4.1 arrived just as v4.2 was 
Xreleased as a final "feature-freeze" beta, too late to incorporate.
XSince the files for UnZip have changed considerably between ver-
Xsions--in particular, unzip.c, extract.c and file_io.c--the patches
Xprovided here will fail miserably.  We will, however, see what we
Xcan do to incorporate most of them before v5.0.
X
XThe non-Atari patches mentioned in Martin's readme file are not
Xincluded here.  Both the Unix blanks patch and the symbolic links
Xpatches are no longer necessary (actually, there is a bug in the
Xexisting symbolic links code--it won't do compressed links properly
X--but this is a rare problem); the optimization patch is on hold
Xbut will probably be incorporated in v5.0 as well, assuming it
Xdoesn't break any other systems.
END_OF_FILE
  if test 1328 -ne `wc -c <'ATARI/Contents'`; then
    echo shar: \"'ATARI/Contents'\" unpacked with wrong size!
  fi
  # end of 'ATARI/Contents'
fi
if test -f 'ATARI/Makefile.st' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'ATARI/Makefile.st'\"
else
  echo shar: Extracting \"'ATARI/Makefile.st'\" \(1096 characters\)
  sed "s/^X//" >'ATARI/Makefile.st' <<'END_OF_FILE'
X#  Makefile.st	Makefile for UnZip 4.0,
X#  using Turbo C 2.0 for the Atari ST and
X#  make from the Mark Williams C 3.9 (sorry for that mixture)
X#
X
X# UPPERCASE file names facilitate TD's understanding of modules.
X.SUFFIXES: .o .O .c .C .s
X
XTCHOME	= E:\tc
X
X#####################
X# MACRO DEFINITIONS #
X#####################
X
XCC	= tcc
X#CFLAGS	= -DATARI_ST=1 -Y -I=$(TCHOME)\include
XCFLAGS	= -DATARI_ST=1 -I=$(TCHOME)\include
X#LFLAGS	= -L -Y
XLFLAGS	=
XLIB	= $(TCHOME)\lib
XLD	= tlink
X
XOBJS = unzip.o file_io.o mapname.o match.o misc.o\
X       unimplod.o unreduce.o unshrink.o
X
X
X###############################################
X# BASIC COMPILE INSTRUCTIONS AND DEPENDENCIES #
X###############################################
X
XALL	: unzip.prg
X	echo done
X
Xunzip.o:      unzip.c unzip.h
X
Xfile_io.o:    file_io.c unzip.h
X
Xmapname.o:    mapname.c unzip.h
X
Xmatch.o:      match.c unzip.h
X
Xmisc.o:       misc.c unzip.h
X
Xunimplod.o:   unimplod.c unzip.h
X
Xunreduce.o:   unreduce.c unzip.h
X
Xunshrink.o:   unshrink.c unzip.h
X
Xunzip.prg:     $(OBJS)
X	tlink -O=$@ $(LFLAGS) -S=8192 -C=unzip.lnk
X
X.c.o:
X	tcc $(CFLAGS) $<
X
END_OF_FILE
  if test 1096 -ne `wc -c <'ATARI/Makefile.st'`; then
    echo shar: \"'ATARI/Makefile.st'\" unpacked with wrong size!
  fi
  # end of 'ATARI/Makefile.st'
fi
if test -f 'ATARI/makeit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'ATARI/makeit'\"
else
  echo shar: Extracting \"'ATARI/makeit'\" \(399 characters\)
  sed "s/^X//" >'ATARI/makeit' <<'END_OF_FILE'
Xtcc -DATARI_ST=1 -I=E:\tc\include unzip.c
Xtcc -DATARI_ST=1 -I=E:\tc\include file_io.c
Xtcc -DATARI_ST=1 -I=E:\tc\include mapname.c
Xtcc -DATARI_ST=1 -I=E:\tc\include match.c
Xtcc -DATARI_ST=1 -I=E:\tc\include misc.c
Xtcc -DATARI_ST=1 -I=E:\tc\include unimplod.c
Xtcc -DATARI_ST=1 -I=E:\tc\include unreduce.c
Xtcc -DATARI_ST=1 -I=E:\tc\include unshrink.c
Xtlink -O=unzip.prg  -S=8192 -C=unzip.lnk
Xecho done
END_OF_FILE
  if test 399 -ne `wc -c <'ATARI/makeit'`; then
    echo shar: \"'ATARI/makeit'\" unpacked with wrong size!
  fi
  # end of 'ATARI/makeit'
fi
if test -f 'ATARI/unzip.lnk' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'ATARI/unzip.lnk'\"
else
  echo shar: Extracting \"'ATARI/unzip.lnk'\" \(188 characters\)
  sed "s/^X//" >'ATARI/unzip.lnk' <<'END_OF_FILE'
Xe:\tc\lib\mystart.o
Xunzip.o
Xfile_io.o
Xmapname.o
Xmatch.o
Xmisc.o
Xunimplod.o
Xunreduce.o
Xunshrink.o
Xe:\tc\lib\tcstdlib.lib
Xe:\tc\lib\tcextlib.lib
Xe:\tc\lib\tctoslib.lib
Xe:\tc\lib\tcstdlib.lib
END_OF_FILE
  if test 188 -ne `wc -c <'ATARI/unzip.lnk'`; then
    echo shar: \"'ATARI/unzip.lnk'\" unpacked with wrong size!
  fi
  # end of 'ATARI/unzip.lnk'
fi
if test -f 'ATARI/unzip.prj' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'ATARI/unzip.prj'\"
else
  echo shar: Extracting \"'ATARI/unzip.prj'\" \(379 characters\)
  sed "s/^X//" >'ATARI/unzip.prj' <<'END_OF_FILE'
X;>>>>>>> UNZIP.PRJ
X
XUNZIP.PRG
X
X=                  ; list of modules follows...
X
X; TCSTART.O          ; startup code
XMYSTART.O
XUNZIP.C
XFILE_IO.C
XMAPNAME.C
XMATCH.C
XMISC.C
XUNIMPLOD.C
XUNREDUCE.C
XUNSHRINK.C
X
XTCSTDLIB.LIB       ; standard library
XTCEXTLIB.LIB       ; extended library
XTCTOSLIB.LIB       ; TOS library
X
X;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
END_OF_FILE
  if test 379 -ne `wc -c <'ATARI/unzip.prj'`; then
    echo shar: \"'ATARI/unzip.prj'\" unpacked with wrong size!
  fi
  # end of 'ATARI/unzip.prj'
fi
if test -f 'MAC/Contents' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MAC/Contents'\"
else
  echo shar: Extracting \"'MAC/Contents'\" \(951 characters\)
  sed "s/^X//" >'MAC/Contents' <<'END_OF_FILE'
XContents of the MAC sub-archive for UnZip 4.2 and later:
X
X  Contents           this file
X  macfile.c          Macintosh filesystem code
X  macstat.c          Macintosh stat() emulation
X  macstat.h          header file for stat() emulation
X  unzip.make.aztec   makefile for Aztec C (binary)
X  unzip.make.mpw     makefile for Mac Programmer's Workbench (binary)
X
XNo makefiles or project files were provided for the original Think C port,
Xbut the two makefiles provided by Antoine Verheijen for Aztec C and MPW C
Xshould be helpful anyway.  If someone comes up with a Think C makefile,
Xplease send it in to zip-bugs for inclusion.  Mucho thanks.
X
XThe makefiles are marked "binary" because they contain a few special
Xcharacters (which look a lot like D's and 6's under Unix).  They're
Xbasically readable, but e-mailing them without protection is likely
Xto strip the high bit off these characters, rendering the makefiles
Xless than useful.  Be forewarned...
END_OF_FILE
  if test 951 -ne `wc -c <'MAC/Contents'`; then
    echo shar: \"'MAC/Contents'\" unpacked with wrong size!
  fi
  # end of 'MAC/Contents'
fi
if test -f 'MAC/macstat.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MAC/macstat.h'\"
else
  echo shar: Extracting \"'MAC/macstat.h'\" \(909 characters\)
  sed "s/^X//" >'MAC/macstat.h' <<'END_OF_FILE'
X/*****************************************************************
X *
X *                stat.h
X *
X *****************************************************************/
X
X#include <time.h>
Xextern stat();
Xtypedef long dev_t;
Xtypedef long ino_t;
Xtypedef long off_t;
X
Xstruct stat {
X    dev_t    st_dev;
X    ino_t    st_ino;
X    unsigned short    st_mode;
X    short    st_nlink;
X    short    st_uid;
X    short    st_gid;
X    dev_t    st_rdev;
X    off_t    st_size;
X    time_t   st_atime, st_mtime, st_ctime;
X    long     st_blksize;
X    long     st_blocks;
X};
X
X#define S_IFMT     0xF000
X#define S_IFIFO    0x1000
X#define S_IFCHR    0x2000
X#define S_IFDIR    0x4000
X#define S_IFBLK    0x6000
X#define S_IFREG    0x8000
X#define S_IFLNK    0xA000
X#define S_IFSOCK   0xC000
X#define S_ISUID    0x800
X#define S_ISGID    0x400
X#define S_ISVTX    0x200
X#define S_IREAD    0x100
X#define S_IWRITE   0x80
X#define S_IEXEC    0x40
END_OF_FILE
  if test 909 -ne `wc -c <'MAC/macstat.h'`; then
    echo shar: \"'MAC/macstat.h'\" unpacked with wrong size!
  fi
  # end of 'MAC/macstat.h'
fi
if test -f 'MAC/make.aztec.uu' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MAC/make.aztec.uu'\"
else
  echo shar: Extracting \"'MAC/make.aztec.uu'\" \(1463 characters\)
  sed "s/^X//" >'MAC/make.aztec.uu' <<'END_OF_FILE'
Xbegin 644 MAC/unzip.make.aztec
XM(R @(%1H:7,@35!7(&UA:V5F:6QE(&ES(&1E<VEG;F5D('1O(&)E('5S960@
XM=&\@8V]M<&EL92!A;B!-4%<@=F5R<VEO;@HC(" @;V8@=6YZ:7 @=7-I;F<@
XM=&AE($%Z=&5C($,@8V]M<&EL97(L('9E<G-I;VX@-2XR82X@4VEM<&QY(')E
XM;F%M90HC(" @=&AI<R!F:6QE(&%S('5N>FEP+FUA:V4@86YD(&1O(&%N($U0
XM5R!B=6EL9"X*"@HC(" @1FEL93H@(" @(" @=6YZ:7 N;6%K90HC(" @5&%R
XM9V5T.B @(" @=6YZ:7 *(R @(%-O=7)C97,Z(" @('5N>FEP+F,*(R @(" @
XM(" @(" @(" @(&5X=')A8W0N8PHC(" @(" @(" @(" @(" @9FEL95]I;RYC
XM"B,@(" @(" @(" @(" @("!M86-F:6QE+F,*(R @(" @(" @(" @(" @(&UA
XM8W-T870N8PHC(" @(" @(" @(" @(" @;6%P;F%M92YC"B,@(" @(" @(" @
XM(" @("!M871C:"YC"B,@(" @(" @(" @(" @("!M:7-C+F,*(R @(" @(" @
XM(" @(" @('5N:6UP;&]D+F,*(R @(" @(" @(" @(" @('5N<F5D=6-E+F,*
XM(R @(" @(" @(" @(" @('5N<VAR:6YK+F,*(R @($-R96%T960Z(" @(%-A
XM='5R9&%Y+"!&96)R=6%R>2 R.2P@,3DY,B W.C U.C P(%!-"@H*0T9,04=3
XM(#T@+60@35!7"@I,1DQ!1U,@/2 M;0H*"BYO(,0@+F,@=6YZ:7 N:"!U;GII
XM<"YM86ME"B @(" @(" @0R![0T9,04=3?2 M;R![1&5F875L='TN;R![1&5F
XM875L='TN8PH*+F\@Q" N87-M"B @(" @(" @87,@+6\@>T1E9F%U;'1]+F\@
XM>T1E9F%U;'1]+F%S;0H*3T)*14-44R ](+8*(" @(" @("!U;GII<"YO(+8*
XM(" @(" @("!E>'1R86-T+F\@M@H@(" @(" @(&9I;&5?:6\N;R"V"B @(" @
XM(" @;6%C9FEL92YO(+8*(" @(" @("!M86-S=&%T+F\@M@H@(" @(" @(&UA
XM<&YA;64N;R"V"B @(" @(" @;6%T8V@N;R"V"B @(" @(" @;6ES8RYO(+8*
XM(" @(" @("!U;FEM<&QO9"YO(+8*(" @(" @("!U;G)E9'5C92YO(+8*(" @
XM(" @("!U;G-H<FEN:RYO"@IU;GII<"#$('M/0DI%0U13?0H@(" @(" @(&QN
XK('M,1DQ!1U-]("UO('5N>FEP('M/0DI%0U13?2 M;&T@+6QM<'<@+6QC"FQN
X 
Xend
END_OF_FILE
  if test 1463 -ne `wc -c <'MAC/make.aztec.uu'`; then
    echo shar: \"'MAC/make.aztec.uu'\" unpacked with wrong size!
  else
    echo shar: Uudecoding \"'MAC/make.aztec.uu'\"
    cat MAC/make.aztec.uu | uudecode
    if [ -f MAC/make.aztec.uu ]; then
       rm MAC/make.aztec.uu
    fi
  fi
  # end of 'MAC/make.aztec.uu'
fi
if test -f 'MSDOS/bcc/makeship.bat.u' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MSDOS/bcc/makeship.bat.u'\"
else
  echo shar: Extracting \"'MSDOS/bcc/makeship.bat.u'\" \(155 characters\)
  sed "s/^X//" >'MSDOS/bcc/makeship.bat.u' <<'END_OF_FILE'
Xbegin 644 MSDOS/bcc/makeship.bat
XM8F-C("UW("UW+65F9B M82 M9" M1R M3R M6B M;70@+6QT("U)8SI<8F]R
XG;&%N9%QI;F-L=61E("U,8SI<8F]R;&%N9%QL:6(@<VAI<"YC#0H:
X 
Xend
END_OF_FILE
  if test 155 -ne `wc -c <'MSDOS/bcc/makeship.bat.u'`; then
    echo shar: \"'MSDOS/bcc/makeship.bat.u'\" unpacked with wrong size!
  else
    echo shar: Uudecoding \"'MSDOS/bcc/makeship.bat.u'\"
    cat MSDOS/bcc/makeship.bat.u | uudecode
    if [ -f MSDOS/bcc/makeship.bat.u ]; then
       rm MSDOS/bcc/makeship.bat.u
    fi
  fi
  # end of 'MSDOS/bcc/makeship.bat.u'
fi
if test -f 'MSDOS/bcc/unz42_bc.dif' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MSDOS/bcc/unz42_bc.dif'\"
else
  echo shar: Extracting \"'MSDOS/bcc/unz42_bc.dif'\" \(442 characters\)
  sed "s/^X//" >'MSDOS/bcc/unz42_bc.dif' <<'END_OF_FILE'
X*** misc.old	Tue Mar 03 17:50:24 1992
X--- misc.c	Sat Mar 07 17:57:12 1992
X***************
X*** 21,26 ****
X--- 21,33 ----
X  
X  #include "unzip.h"
X  
X+ #ifdef __TURBOC__
X+ /* v4.2 dpk  For some reason Borland C++'s TIME.H defines tzset()
X+  * only if not STD_C!  Weird .. but rather than have the warning
X+  * spoiling an otherwise perfect compile ...
X+  */
X+ void tzset(void);
X+ #endif
X  
X  
X  #ifndef ZIPINFO   /* no need to calculate CRCs */
END_OF_FILE
  if test 442 -ne `wc -c <'MSDOS/bcc/unz42_bc.dif'`; then
    echo shar: \"'MSDOS/bcc/unz42_bc.dif'\" unpacked with wrong size!
  fi
  # end of 'MSDOS/bcc/unz42_bc.dif'
fi
if test -f 'MSDOS/bcc/unzip.dsk.uu' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MSDOS/bcc/unzip.dsk.uu'\"
else
  echo shar: Extracting \"'MSDOS/bcc/unzip.dsk.uu'\" \(1214 characters\)
  sed "s/^X//" >'MSDOS/bcc/unzip.dsk.uu' <<'END_OF_FILE'
Xbegin 644 MSDOS/bcc/unzip.dsk
XM5'5R8F\@0R!#;VYT97AT($9I;&4@&@ !#1(7 1H   ED * !"P   '8!2@$>
XM ?0 RP"> '$ 1  8 !@ 15A44D%#5"Y#  $  0 !  $  0 !  $  0 !  $ 
XM 0 !  $  0 !  $   !53E-(4DE.2RY#  $  0 !  $  0 !  $  0 !  $ 
XM 0 !  $  0 !  $   !53E)%1%5#12Y#  $  0 !  $  0 !  $  0 !  $ 
XM 0 !  $  0 !  $   !53DE-4$Q/1"Y#  $  0 !  $  0 !  $  0 !  $ 
XM 0 !  $  0 !  $   !-25-#+D,  0 !  $  0 !  $  0 !  $  0 !  $ 
XM 0 !  $  0   $U!5$-(+D,  0 !  $  0 !  $  0 !  $  0 !  $  0 !
XM  $  0   $U!4$Y!344N0P !  $  0 !  $  0 !  $  0 !  $  0 !  $ 
XM 0 !    1DE,15])3RY#  $  0 !  $  0 !  $  0 !  $  0 !  $  0 !
XM  $   !53EI)4"Y# "< 8P(! %D" 0 !  $  0 !  $  0 !  $ 8@(! &4"
XM" !E "P !  ( !X    ( !  % !53EI)4"Y# %5.6DE0+D@ *BY# $E.1DQ!
XM5$4N0P!X &H #  8 $P    '  \ %0 ; "$ )@ K #4 /@!& $< ;V9F<V5T
XM &]F9G-E=%\ 54Q/3D< ;'-E96L 3%-%14L 2$5210!G;W1O '-T87)T;W9E
XM<@!O;&1?;6]D90!$3U-?3U,R  !L87-T 'H (P #  8 %P    H $P!)3D9,
XM051%+D, 15A004Y$+D, *BY# /0!G  2   9    $4\7 !%/%P@ S0]$   9
XM     4\7  %/%P  " !#.EQ414U07%5.6DE0+D, )P!C @$ 60(!  $  0 !
XM  $  0 !  $  0!B @$ 90(( $8  !D    !3Q<  4\7     $,Z7%1%35!<
XM24Y&3$%412Y#  $  0 !  $  0 !  $  0 !  $  0 !  $  0 !  $   #U
XK 20 $@  &0   !%/%P 13Q<( &%T$@  &0   !%/%P 13Q<" !H __\   #U
X 
Xend
END_OF_FILE
  if test 1214 -ne `wc -c <'MSDOS/bcc/unzip.dsk.uu'`; then
    echo shar: \"'MSDOS/bcc/unzip.dsk.uu'\" unpacked with wrong size!
  else
    echo shar: Uudecoding \"'MSDOS/bcc/unzip.dsk.uu'\"
    cat MSDOS/bcc/unzip.dsk.uu | uudecode
    if [ -f MSDOS/bcc/unzip.dsk.uu ]; then
       rm MSDOS/bcc/unzip.dsk.uu
    fi
  fi
  # end of 'MSDOS/bcc/unzip.dsk.uu'
fi
if test -f 'MSDOS/bcc/unzip.mak' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MSDOS/bcc/unzip.mak'\"
else
  echo shar: Extracting \"'MSDOS/bcc/unzip.mak'\" \(1062 characters\)
  sed "s/^X//" >'MSDOS/bcc/unzip.mak' <<'END_OF_FILE'
X.AUTODEPEND
X
X#		*Translator Definitions*
XCC = bcc +UNZIP.CFG
XTASM = TASM
XTLINK = tlink
X
X
X#		*Implicit Rules*
X.c.obj:
X  $(CC) -c {$< }
X
X.cpp.obj:
X  $(CC) -c {$< }
X
X#		*List Macros*
X
X
XEXE_dependencies =  \
X  unzip.obj \
X  file_io.obj \
X  mapname.obj \
X  match.obj \
X  misc.obj \
X  unimplod.obj \
X  unreduce.obj \
X  unshrink.obj \
X  extract.obj
X
X#		*Explicit Rules*
Xunzip.exe: unzip.cfg $(EXE_dependencies)
X  $(TLINK) /x/n/c/d/P-/LC:\BORLAND\LIB @&&|
Xc0s.obj+
Xunzip.obj+
Xfile_io.obj+
Xmapname.obj+
Xmatch.obj+
Xmisc.obj+
Xunimplod.obj+
Xunreduce.obj+
Xunshrink.obj+
Xextract.obj
Xunzip
X		# no map file
Xemu.lib+
Xmaths.lib+
Xcs.lib
X|
X
X
X#		*Individual File Dependencies*
Xunzip.obj: unzip.c 
X
Xfile_io.obj: file_io.c 
X
Xmapname.obj: mapname.c 
X
Xmatch.obj: match.c 
X
Xmisc.obj: misc.c 
X
Xunimplod.obj: unimplod.c 
X
Xunreduce.obj: unreduce.c 
X
Xunshrink.obj: unshrink.c 
X
Xextract.obj: extract.c 
X
X#		*Compiler Configuration File*
Xunzip.cfg: unzip.mak
X  copy &&|
X-ff-
X-A
X-k-
X-wamb
X-wamp
X-wasm
X-wpro
X-wdef
X-wnod
X-wstv
X-wucp
X-wuse
X-IC:\BORLAND\INCLUDE
X-LC:\BORLAND\LIB
X-P-.C
X| unzip.cfg
X
X
END_OF_FILE
  if test 1062 -ne `wc -c <'MSDOS/bcc/unzip.mak'`; then
    echo shar: \"'MSDOS/bcc/unzip.mak'\" unpacked with wrong size!
  fi
  # end of 'MSDOS/bcc/unzip.mak'
fi
if test -f 'MSDOS/bcc/unzip_cr.dsk.u' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MSDOS/bcc/unzip_cr.dsk.u'\"
else
  echo shar: Extracting \"'MSDOS/bcc/unzip_cr.dsk.u'\" \(1387 characters\)
  sed "s/^X//" >'MSDOS/bcc/unzip_cr.dsk.u' <<'END_OF_FILE'
Xbegin 644 MSDOS/bcc/unzip_cr.dsk
XM5'5R8F\@0R!#;VYT97AT($9I;&4@&@ !#1(7 1H   ED ,P!#    *(!=@%*
XM 2 !]P#* )T < !$ !H &@!#4EE05"Y#  $  0 !  $  0 !  $  0 !  $ 
XM 0 !  $  0 !  $   !%6%1204-4+D,  0 !  $  0 !  $  0 !  $  0 !
XM  $  0 !  $  0   %5.4TA224Y++D,  0 !  $  0 !  $  0 !  $  0 !
XM  $  0 !  $  0   %5.4D5$54-%+D,  0 !  $  0 !  $  0 !  $  0 !
XM  $  0 !  $  0   %5.24U03$]$+D,  0 !  $  0 !  $  0 !  $  0 !
XM  $  0 !  $  0   $U)4T,N0P !  $  0 !  $  0 !  $  0 !  $  0 !
XM  $  0 !    34%40T@N0P !  $  0 !  $  0 !  $  0 !  $  0 !  $ 
XM 0 !    34%03D%-12Y#  $  0 !  $  0 !  $  0 !  $  0 !  $  0 !
XM  $   !&24Q%7TE/+D,  0 P  $ ,  !  $  0 !  $  0 !  $  0 !  $ 
XM 0   %5.6DE0+D, )P!C @$ 60(!  $  0 !  $  0 !  $  0!B @$ 90((
XM &4 +  $  @ '@    @ $  4 %5.6DE0+D, 54Y:25 N2  J+D, 24Y&3$%4
XM12Y# '@ :@ , !@ 3     < #P 5 !L (0 F "L -0 ^ $8 1P!O9F9S970 
XM;V9F<V5T7P!53$].1P!L<V5E:P!,4T5%2P!(15)% &=O=&\ <W1A<G1O=F5R
XM &]L9%]M;V1E $1/4U]/4S(  &QA<W0 >@ M  0 "  ?    "@ 3 !L 24Y&
XM3$%412Y# $584$%.1"Y# $-265!4+D, *BY# /0!]  2   9    $4\7 !%/
XM%P@ S0]$   9     4\7  %/%P  " !#.EQ414U07%5.6DE0+D, )P!C @$ 
XM60(!  $  0 !  $  0 !  $  0!B @$ 90(( $8  !D    !3Q<  4\7    
XM $,Z7%1%35!<24Y&3$%412Y#  $  0 !  $  0 !  $  0 !  $  0 !  $ 
XM 0 !  $    2   9    $4\7 !%/%P( Q =&   9     4\0  %/$     !#
XM.EQ414U07$9)3$5?24\N0P ! #   0 P  $  0 !  $  0 !  $  0 !  $ 
X@ 0 !    ]0$2 !(  !D    13Q< $4\7" !A=/__    
X 
Xend
END_OF_FILE
  if test 1387 -ne `wc -c <'MSDOS/bcc/unzip_cr.dsk.u'`; then
    echo shar: \"'MSDOS/bcc/unzip_cr.dsk.u'\" unpacked with wrong size!
  else
    echo shar: Uudecoding \"'MSDOS/bcc/unzip_cr.dsk.u'\"
    cat MSDOS/bcc/unzip_cr.dsk.u | uudecode
    if [ -f MSDOS/bcc/unzip_cr.dsk.u ]; then
       rm MSDOS/bcc/unzip_cr.dsk.u
    fi
  fi
  # end of 'MSDOS/bcc/unzip_cr.dsk.u'
fi
if test -f 'MSDOS/bcc/unzip_cr.mak' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MSDOS/bcc/unzip_cr.mak'\"
else
  echo shar: Extracting \"'MSDOS/bcc/unzip_cr.mak'\" \(1137 characters\)
  sed "s/^X//" >'MSDOS/bcc/unzip_cr.mak' <<'END_OF_FILE'
X.AUTODEPEND
X
X#		*Translator Definitions*
XCC = bcc +UNZIP_CR.CFG
XTASM = TASM
XTLINK = tlink
X
X
X#		*Implicit Rules*
X.c.obj:
X  $(CC) -c {$< }
X
X.cpp.obj:
X  $(CC) -c {$< }
X
X#		*List Macros*
X
X
XEXE_dependencies =  \
X  unzip.obj \
X  file_io.obj \
X  mapname.obj \
X  match.obj \
X  misc.obj \
X  unimplod.obj \
X  unreduce.obj \
X  unshrink.obj \
X  extract.obj \
X  crypt.obj
X
X#		*Explicit Rules*
Xunzip_cr.exe: unzip_cr.cfg $(EXE_dependencies)
X  $(TLINK) /x/n/c/d/P-/LC:\BORLAND\LIB @&&|
Xc0s.obj+
Xunzip.obj+
Xfile_io.obj+
Xmapname.obj+
Xmatch.obj+
Xmisc.obj+
Xunimplod.obj+
Xunreduce.obj+
Xunshrink.obj+
Xextract.obj+
Xcrypt.obj
Xunzip_cr
X		# no map file
Xemu.lib+
Xmaths.lib+
Xcs.lib
X|
X
X
X#		*Individual File Dependencies*
Xunzip.obj: unzip.c 
X
Xfile_io.obj: file_io.c 
X
Xmapname.obj: mapname.c 
X
Xmatch.obj: match.c 
X
Xmisc.obj: misc.c 
X
Xunimplod.obj: unimplod.c 
X
Xunreduce.obj: unreduce.c 
X
Xunshrink.obj: unshrink.c 
X
Xextract.obj: extract.c 
X
Xcrypt.obj: crypt.c 
X
X#		*Compiler Configuration File*
Xunzip_cr.cfg: unzip_cr.mak
X  copy &&|
X-ff-
X-A
X-k-
X-wamb
X-wamp
X-wasm
X-wpro
X-wdef
X-wnod
X-wstv
X-wucp
X-wuse
X-IC:\BORLAND\INCLUDE
X-LC:\BORLAND\LIB
X-DCRYPT
X-P-.C
X| unzip_cr.cfg
X
X
END_OF_FILE
  if test 1137 -ne `wc -c <'MSDOS/bcc/unzip_cr.mak'`; then
    echo shar: \"'MSDOS/bcc/unzip_cr.mak'\" unpacked with wrong size!
  fi
  # end of 'MSDOS/bcc/unzip_cr.mak'
fi
if test -f 'MSDOS/bcc/zipinfo.dsk.uu' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MSDOS/bcc/zipinfo.dsk.uu'\"
else
  echo shar: Extracting \"'MSDOS/bcc/zipinfo.dsk.uu'\" \(840 characters\)
  sed "s/^X//" >'MSDOS/bcc/zipinfo.dsk.uu' <<'END_OF_FILE'
Xbegin 644 MSDOS/bcc/zipinfo.dsk
XM5'5R8F\@0R!#;VYT97AT($9I;&4@&@ !#1(7 1H   ED (L !0   %\ -0 ,
XM  P 34E30RY#  $  0 !  $  0 !  $  0 !  $  0 !  $  0 !  $   !-
XM051#2"Y#  $  0 !  $  0 !  $  0 !  $  0 !  $  0 !  $   !:25!)
XM3D9/+D,  0 !  $  0 !  $  0 !  $  0 !  $ "0"[ Q4 SP,  &4 0@ %
XM  H ,@    H #@ F "H 6DE024Y&3RY# "HN0P!<0D]23$%.1%Q)3D-,541%
XM7%-4050N2  J+D@ 54Y:25 N2 !X (T #P > &D    %  H $  5 !P ,P [
XM #X 10!0 %( 6@!A &( 4T140P!?1D%2 &UE;2YH %-41$, <&QU<F%L 'II
XM<&9I;&5?8V]M;65N=%]L96YG=&@ ;65M8F5R<P!M;0!S=&%T+F@ <VAO<G1?
XM:6YF;P!Q &5X=%]V97( 97AT=F5R  !E>'1N=6T >@ 5  ( !  +    !P!:
XM25 J+D, *BY# /0!B  2   9    $4\7 !%/%P@ &@4>   9   /!4 5#P5 
XM%00 0P P"           +@ 2   9    $4\7 !%/%P(  PY&   9     4\7
XM  %/%P    !#.EQ414U07%I)4$E.1D\N0P !  $  0 !  $  0 !  $  0 !
XI  $  0 ) +L#%0#/ P  ]0$2 !(  !D    13Q< $4\7" !A=/__    
X 
Xend
END_OF_FILE
  if test 840 -ne `wc -c <'MSDOS/bcc/zipinfo.dsk.uu'`; then
    echo shar: \"'MSDOS/bcc/zipinfo.dsk.uu'\" unpacked with wrong size!
  else
    echo shar: Uudecoding \"'MSDOS/bcc/zipinfo.dsk.uu'\"
    cat MSDOS/bcc/zipinfo.dsk.uu | uudecode
    if [ -f MSDOS/bcc/zipinfo.dsk.uu ]; then
       rm MSDOS/bcc/zipinfo.dsk.uu
    fi
  fi
  # end of 'MSDOS/bcc/zipinfo.dsk.uu'
fi
if test -f 'MSDOS/bcc/zipinfo.mak' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MSDOS/bcc/zipinfo.mak'\"
else
  echo shar: Extracting \"'MSDOS/bcc/zipinfo.mak'\" \(776 characters\)
  sed "s/^X//" >'MSDOS/bcc/zipinfo.mak' <<'END_OF_FILE'
X.AUTODEPEND
X
X#		*Translator Definitions*
XCC = bcc +ZIPINFO.CFG
XTASM = TASM
XTLINK = tlink
X
X
X#		*Implicit Rules*
X.c.obj:
X  $(CC) -c {$< }
X
X.cpp.obj:
X  $(CC) -c {$< }
X
X#		*List Macros*
X
X
XEXE_dependencies =  \
X  zipinfo.obj \
X  match.obj \
X  misc.obj
X
X#		*Explicit Rules*
Xzipinfo.exe: zipinfo.cfg $(EXE_dependencies)
X  $(TLINK) /x/n/c/d/P-/LC:\BORLAND\LIB @&&|
Xc0s.obj+
Xzipinfo.obj+
Xmatch.obj+
Xmisc.obj
Xzipinfo
X		# no map file
Xemu.lib+
Xmaths.lib+
Xcs.lib
X|
X
X
X#		*Individual File Dependencies*
Xzipinfo.obj: zipinfo.c 
X
Xmatch.obj: match.c 
X
Xmisc.obj: misc.c 
X
X#		*Compiler Configuration File*
Xzipinfo.cfg: zipinfo.mak
X  copy &&|
X-ff-
X-A
X-K
X-k-
X-d
X-wamb
X-wamp
X-wasm
X-wpro
X-wcln
X-wdef
X-wsig
X-wnod
X-wstv
X-wucp
X-wuse
X-IC:\BORLAND\INCLUDE
X-LC:\BORLAND\LIB
X-DZIPINFO
X-P-.C
X| zipinfo.cfg
X
X
END_OF_FILE
  if test 776 -ne `wc -c <'MSDOS/bcc/zipinfo.mak'`; then
    echo shar: \"'MSDOS/bcc/zipinfo.mak'\" unpacked with wrong size!
  fi
  # end of 'MSDOS/bcc/zipinfo.mak'
fi
if test -f 'MSDOS/tcc/makeship.bat.u' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MSDOS/tcc/makeship.bat.u'\"
else
  echo shar: Extracting \"'MSDOS/tcc/makeship.bat.u'\" \(139 characters\)
  sed "s/^X//" >'MSDOS/tcc/makeship.bat.u' <<'END_OF_FILE'
Xbegin 644 MSDOS/tcc/makeship.bat
XM=&-C("UW("UW+65F9B M82 M9" M1R M3R M6B M;70@+6QT("U)8SI<=&-<
X;:6YC;'5D92 M3&,Z7'1C7&QI8B!S:&EP+F,:
X 
Xend
END_OF_FILE
  if test 139 -ne `wc -c <'MSDOS/tcc/makeship.bat.u'`; then
    echo shar: \"'MSDOS/tcc/makeship.bat.u'\" unpacked with wrong size!
  else
    echo shar: Uudecoding \"'MSDOS/tcc/makeship.bat.u'\"
    cat MSDOS/tcc/makeship.bat.u | uudecode
    if [ -f MSDOS/tcc/makeship.bat.u ]; then
       rm MSDOS/tcc/makeship.bat.u
    fi
  fi
  # end of 'MSDOS/tcc/makeship.bat.u'
fi
if test -f 'MSDOS/tcc/unzip.prj' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MSDOS/tcc/unzip.prj'\"
else
  echo shar: Extracting \"'MSDOS/tcc/unzip.prj'\" \(179 characters\)
  sed "s/^X//" >'MSDOS/tcc/unzip.prj' <<'END_OF_FILE'
Xunzip.c		(unzip.h)
Xextract.c	(unzip.h)
Xfile_io.c	(unzip.h)
Xmapname.c	(unzip.h)
Xmatch.c		(unzip.h)
Xmisc.c		(unzip.h)
Xunimplod.c	(unzip.h)
Xunreduce.c	(unzip.h)
Xunshrink.c	(unzip.h)
END_OF_FILE
  if test 179 -ne `wc -c <'MSDOS/tcc/unzip.prj'`; then
    echo shar: \"'MSDOS/tcc/unzip.prj'\" unpacked with wrong size!
  fi
  # end of 'MSDOS/tcc/unzip.prj'
fi
if test -f 'MSDOS/tcc/unzip_cr.prj' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MSDOS/tcc/unzip_cr.prj'\"
else
  echo shar: Extracting \"'MSDOS/tcc/unzip_cr.prj'\" \(204 characters\)
  sed "s/^X//" >'MSDOS/tcc/unzip_cr.prj' <<'END_OF_FILE'
Xunzip.c		(unzip.h)
Xcrypt.c		(unzip.h zip.h)
Xextract.c	(unzip.h)
Xfile_io.c	(unzip.h)
Xmapname.c	(unzip.h)
Xmatch.c		(unzip.h)
Xmisc.c		(unzip.h)
Xunimplod.c	(unzip.h)
Xunreduce.c	(unzip.h)
Xunshrink.c	(unzip.h)
END_OF_FILE
  if test 204 -ne `wc -c <'MSDOS/tcc/unzip_cr.prj'`; then
    echo shar: \"'MSDOS/tcc/unzip_cr.prj'\" unpacked with wrong size!
  fi
  # end of 'MSDOS/tcc/unzip_cr.prj'
fi
if test -f 'OS2/ship.def' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'OS2/ship.def'\"
else
  echo shar: Extracting \"'OS2/ship.def'\" \(74 characters\)
  sed "s/^X//" >'OS2/ship.def' <<'END_OF_FILE'
XNAME WINDOWCOMPAT NEWFILES
XDESCRIPTION 'encode/split/mail & decode files'
END_OF_FILE
  if test 74 -ne `wc -c <'OS2/ship.def'`; then
    echo shar: \"'OS2/ship.def'\" unpacked with wrong size!
  fi
  # end of 'OS2/ship.def'
fi
if test -f 'OS2/unzip.cs' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'OS2/unzip.cs'\"
else
  echo shar: Extracting \"'OS2/unzip.cs'\" \(192 characters\)
  sed "s/^X//" >'OS2/unzip.cs' <<'END_OF_FILE'
X(-W1 -DOS2 -DINFLATE -DCRYPT
Xunzip.c extract.c file_io.c mapname.c match.c misc.c dosname.c
Xunimplod.c unreduce.c unshrink.c inflate.c crypt.c
X)
Xunzip.exe
Xunzip.def
Xunzip.bad
X-AS -LB -S0x1000
END_OF_FILE
  if test 192 -ne `wc -c <'OS2/unzip.cs'`; then
    echo shar: \"'OS2/unzip.cs'\" unpacked with wrong size!
  fi
  # end of 'OS2/unzip.cs'
fi
if test -f 'OS2/unzip.def.uu' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'OS2/unzip.def.uu'\"
else
  echo shar: Extracting \"'OS2/unzip.def.uu'\" \(172 characters\)
  sed "s/^X//" >'OS2/unzip.def.uu' <<'END_OF_FILE'
Xbegin 644 OS2/unzip.def
XM3D%-12!5;EII<"!724Y$3U=#3TU0050@3D571DE,15,-"D1%4T-225!424].
XM("=4:&4@=V]R;&0M9F%M;W5S('5N87)C:&EV:6YG('5T:6QI='D@9G)O;2!)
X+;F9O+5I)4"<-"AHM
X 
Xend
END_OF_FILE
  if test 172 -ne `wc -c <'OS2/unzip.def.uu'`; then
    echo shar: \"'OS2/unzip.def.uu'\" unpacked with wrong size!
  else 
    echo shar: Uudecoding \"'OS2/unzip.def.uu'\" 
    cat OS2/unzip.def.uu | uudecode 
    if [ -f OS2/unzip.def.uu ]; then 
       rm OS2/unzip.def.uu 
    fi 
  fi
  # end of 'OS2/unzip.def.uu'
fi
if test -f 'OS2/zipinfo.cs' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'OS2/zipinfo.cs'\"
else
  echo shar: Extracting \"'OS2/zipinfo.cs'\" \(82 characters\)
  sed "s/^X//" >'OS2/zipinfo.cs' <<'END_OF_FILE'
X(-W1 -DZIPINFO zipinfo.c misc.c match.c)
Xzipinfo.exe
Xzipinfo.def
X-AS -LB -S0x1000
END_OF_FILE
  if test 82 -ne `wc -c <'OS2/zipinfo.cs'`; then
    echo shar: \"'OS2/zipinfo.cs'\" unpacked with wrong size!
  fi
  # end of 'OS2/zipinfo.cs'
fi
if test -f 'OS2/zipinfo.def.uu' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'OS2/zipinfo.def.uu'\"
else
  echo shar: Extracting \"'OS2/zipinfo.def.uu'\" \(170 characters\)
  sed "s/^X//" >'OS2/zipinfo.def.uu' <<'END_OF_FILE'
Xbegin 644 OS2/zipinfo.def
XM3D%-12!::7!);F9O(%=)3D1/5T-/35!!5"!.15=&24Q%4PT*1$530U))4%1)
XM3TX@)T=R96%T(&=O8G,@;V8@:6YT97)E<W1I;F<@:6YF;R!A8F]U="!Z:7!F
X(:6QE<R<-"AIT
X 
Xend
END_OF_FILE
  if test 170 -ne `wc -c <'OS2/zipinfo.def.uu'`; then
    echo shar: \"'OS2/zipinfo.def.uu'\" unpacked with wrong size!
  else  
    echo shar: Uudecoding \"'OS2/zipinfo.def.uu'\" 
    cat OS2/zipinfo.def.uu | uudecode  
    if [ -f OS2/zipinfo.def.uu ]; then  
       rm OS2/zipinfo.def.uu 
    fi
  fi
  # end of 'OS2/zipinfo.def.uu'
fi
if test -f 'VMS/Contents' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'VMS/Contents'\"
else
  echo shar: Extracting \"'VMS/Contents'\" \(1529 characters\)
  sed "s/^X//" >'VMS/Contents' <<'END_OF_FILE'
XContents of the VMS sub-archive for UnZip 4.2 and later:
X
X  Contents                   this file
X  VMS.notes                  general VMS info about installing and using UnZip
X  unzip.rnh                  UnZip manual page, RUNOFF format
X  vms.c                      VMS file attributes code (for extracted files)
X  VMSmunch.c                 more file attributes code (for zipfile, mainly)
X  VMSmunch.h                 VMSmunch macros
X  fatdef.h                   attributes macros
X  fchdef.h                   attributes macros
X  fjndef.h                   attributes macros
X  make_unzip_gcc.com         command file to compile UnZip and ZipInfo w/ GNU C
X  make_unzip_vaxc.com        command file to compile UnZip and ZipInfo w/ VAX C
X  descrip.mms                MMS makefile for UnZip and ZipInfo
X  vmsshare.opt               options file used in descrip.mms
X  crypt/make_unzip_gcc.com   command file for decryption version and GNU C
X  crypt/make_unzip_vaxc.com  command file for decryption version and VAX C
X  crypt/descrip.mms          MMS makefile for decryption version
X  bilf/bilf.c                BILF source code
X  bilf/bilf.exe              BILF executable (binary)
X  bilf/make_bilf.com         command file to compile BILF
X
XBILF may be required for older zipfiles or for those created under other
Xoperating systems.  Instructions are in the source code.
X
XThe non-decryption version of UnZip compiles fine with VMS GCC, although
Xyou may get a lot of warnings (especially for vms.c).  Ignore them; GCC
Xis hyper-picky.
END_OF_FILE
  if test 1529 -ne `wc -c <'VMS/Contents'`; then
    echo shar: \"'VMS/Contents'\" unpacked with wrong size!
  fi
  # end of 'VMS/Contents'
fi
if test -f 'VMS/VMSmunch.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'VMS/VMSmunch.h'\"
else
  echo shar: Extracting \"'VMS/VMSmunch.h'\" \(333 characters\)
  sed "s/^X//" >'VMS/VMSmunch.h' <<'END_OF_FILE'
X/*---------------------------------------------------------------------------
X
X  VMSmunch.h  (just a few handy #defines)
X
X  ---------------------------------------------------------------------------*/
X
X#define GET_TIMES       4
X#define SET_TIMES       0
X#define GET_RTYPE       1
X#define CHANGE_RTYPE    2
X#define RESTORE_RTYPE   3
END_OF_FILE
  if test 333 -ne `wc -c <'VMS/VMSmunch.h'`; then
    echo shar: \"'VMS/VMSmunch.h'\" unpacked with wrong size!
  fi
  # end of 'VMS/VMSmunch.h'
fi
if test -f 'VMS/bilf/make_bilf.com' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'VMS/bilf/make_bilf.com'\"
else
  echo shar: Extracting \"'VMS/bilf/make_bilf.com'\" \(219 characters\)
  sed "s/^X//" >'VMS/bilf/make_bilf.com' <<'END_OF_FILE'
X$ set verify	! like "echo on", eh?
X$ cc bilf
X$ link bilf,sys$input:/opt
Xsys$share:vaxcrtl.exe/shareable
X$ ! change the following symbol to "$diskname:[directory]bilf.exe" as approp.
X$ bilf == "$bilf.exe"
X$ set noverify
END_OF_FILE
  if test 219 -ne `wc -c <'VMS/bilf/make_bilf.com'`; then
    echo shar: \"'VMS/bilf/make_bilf.com'\" unpacked with wrong size!
  fi
  # end of 'VMS/bilf/make_bilf.com'
fi
if test -f 'VMS/crypt/make_unzip_vaxc.com' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'VMS/crypt/make_unzip_vaxc.com'\"
else
  echo shar: Extracting \"'VMS/crypt/make_unzip_vaxc.com'\" \(1154 characters\)
  sed "s/^X//" >'VMS/crypt/make_unzip_vaxc.com' <<'END_OF_FILE'
X$ !
X$ !		"Makefile" for VMS versions of unzip and zipinfo
X$ !			(version:  crypt + no inflate)
X$ !
X$ ! Find out current disk and directory
X$ !
X$ my_name = f$env("procedure")
X$ here = f$parse(my_name,,,"device") + f$parse(my_name,,,"directory")
X$ set verify	! like "echo on", eh?
X$ !
X$ ! Do unzip:
X$ !
X$ cc /def=(CRYPT) unzip,crypt,extract,file_io,-
X	mapname,match,misc,unimplod,unreduce,unshrink,vms,VMSmunch
X$ link unzip,crypt,extract,file_io,mapname,match,misc,-
X	unimplod,unreduce,unshrink,vms,VMSmunch, sys$input:/opt
X sys$share:vaxcrtl.exe/shareable
X! Next line:  put a similar line (full pathname for unzip.exe) in login.com.
X! Remember to include leading "$" before disk name.
X$ unzip == "$''here'unzip.exe"		! set up symbol to use unzip
X$ !
X$ ! Do zipinfo:
X$ !
X$ cc zipinfo
X$ rename misc.c misc_.c;*
X$ cc /def=(ZIPINFO) misc_
X$ rename misc_.c misc.c;*
X$ link zipinfo,match,misc_,VMSmunch,sys$input:/opt
X sys$share:vaxcrtl.exe/shareable
X! Next line:  put a similar line (full pathname for unzip.exe) in login.com.
X! Remember to include leading "$" before disk name.
X$ zipinfo == "$''here'zipinfo.exe"	! set up symbol to use zipinfo
X$ set noverify
END_OF_FILE
  if test 1154 -ne `wc -c <'VMS/crypt/make_unzip_vaxc.com'`; then
    echo shar: \"'VMS/crypt/make_unzip_vaxc.com'\" unpacked with wrong size!
  fi
  # end of 'VMS/crypt/make_unzip_vaxc.com'
fi
if test -f 'VMS/fjndef.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'VMS/fjndef.h'\"
else
  echo shar: Extracting \"'VMS/fjndef.h'\" \(684 characters\)
  sed "s/^X//" >'VMS/fjndef.h' <<'END_OF_FILE'
X/* This header file was created by Joe Meadows, and is not copyrighted
X   in any way. No guarantee is made as to the accuracy of the contents
X   of this header file. This header file was last modified on Sep. 22th,
X   1987. (Modified to include this statement) */
X
X#define FJN$M_ONLY_RU 1
X#define FJN$M_RUJNL 2
X#define FJN$M_BIJNL 4
X#define FJN$M_AIJNL 8
X#define FJN$M_ATJNL 16
X#define FJN$M_NEVER_RU 32
X#define FJN$M_JOURNAL_FILE 64
X#define FJN$S_FJNDEF 1
Xstruct fjndef  {
X  unsigned fjn$v_only_ru : 1;
X  unsigned fjn$v_rujnl : 1;
X  unsigned fjn$v_bijnl : 1;
X  unsigned fjn$v_aijnl : 1;
X  unsigned fjn$v_atjnl : 1;
X  unsigned fjn$v_never_ru : 1;
X  unsigned fjn$v_journal_file:1;
X} ;
END_OF_FILE
  if test 684 -ne `wc -c <'VMS/fjndef.h'`; then
    echo shar: \"'VMS/fjndef.h'\" unpacked with wrong size!
  fi
  # end of 'VMS/fjndef.h'
fi
if test -f 'VMS/make_unzip_gcc.com' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'VMS/make_unzip_gcc.com'\"
else
  echo shar: Extracting \"'VMS/make_unzip_gcc.com'\" \(1468 characters\)
  sed "s/^X//" >'VMS/make_unzip_gcc.com' <<'END_OF_FILE'
X$ !
X$ !		"Makefile" for VMS versions of unzip and zipinfo
X$ !			(version:  no crypt + no inflate)
X$ !
X$ ! Find out current disk and directory
X$ !
X$ my_name = f$env("procedure")
X$ here = f$parse(my_name,,,"device") + f$parse(my_name,,,"directory")
X$ set verify	! like "echo on", eh?
X$ !
X$ ! Do unzip:
X$ !
X$ gcc /undef=__STDC__ unzip
X$ gcc /undef=__STDC__ extract
X$ gcc /undef=__STDC__ file_io
X$ gcc /undef=__STDC__ 	mapname
X$ gcc /undef=__STDC__ match
X$ gcc /undef=__STDC__ misc
X$ gcc /undef=__STDC__ unimplod
X$ gcc /undef=__STDC__ unreduce
X$ gcc /undef=__STDC__ unshrink
X$ gcc /undef=__STDC__ vms
X$ gcc /undef=__STDC__ VMSmunch
X$ link unzip,extract,file_io,mapname,match,misc,-
X	unimplod,unreduce,unshrink,vms,VMSmunch,-
Xgnu_cc:[000000]gcclib.olb/lib,-
X sys$input:/opt
X sys$share:vaxcrtl.exe/shareable
X! Next line:  put a similar line (full pathname for unzip.exe) in login.com.
X! Remember to include leading "$" before disk name.
X$ unzip == "$''here'unzip.exe"		! set up symbol to use unzip
X$ !
X$ ! Do zipinfo:
X$ !
X$ gcc /undef=__STDC__ zipinfo
X$ rename misc.c misc_.c;*
X$ gcc /undef=_STDC__ /def=(ZIPINFO) misc_
X$ rename misc_.c misc.c;*
X$ link zipinfo,match,misc_,VMSmunch,-
Xgnu_cc:[000000]gcclib.olb/lib,-
Xsys$input:/opt
X sys$share:vaxcrtl.exe/shareable
X! Next line:  put a similar line (full pathname for unzip.exe) in login.com.
X! Remember to include leading "$" before disk name.
X$ zipinfo == "$''here'zipinfo.exe"	! set up symbol to use zipinfo
X$ set noverify
END_OF_FILE
  if test 1468 -ne `wc -c <'VMS/make_unzip_gcc.com'`; then
    echo shar: \"'VMS/make_unzip_gcc.com'\" unpacked with wrong size!
  fi
  # end of 'VMS/make_unzip_gcc.com'
fi
if test -f 'VMS/vmsshare.opt' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'VMS/vmsshare.opt'\"
else
  echo shar: Extracting \"'VMS/vmsshare.opt'\" \(30 characters\)
  sed "s/^X//" >'VMS/vmsshare.opt' <<'END_OF_FILE'
Xsys$library:vaxcrtl.exe/share
END_OF_FILE
  if test 30 -ne `wc -c <'VMS/vmsshare.opt'`; then
    echo shar: \"'VMS/vmsshare.opt'\" unpacked with wrong size!
  fi
  # end of 'VMS/vmsshare.opt'
fi
if test -f 'cray.dif' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'cray.dif'\"
else
  echo shar: Extracting \"'cray.dif'\" \(498 characters\)
  sed "s/^X//" >'cray.dif' <<'END_OF_FILE'
X*** crypt.c.orig	Fri Nov  8 13:59:54 1991
X--- crypt.c	Fri Mar 20 12:46:47 1992
X***************
X*** 36,42 ****
X     ush temp;
X  
X     temp = (ush)keys[2] | 2;
X!    return (int)(((temp * (temp ^ 1)) >> 8) & 0xff);
X  }
X  
X  /***********************************************************************
X--- 36,42 ----
X     ush temp;
X  
X     temp = (ush)keys[2] | 2;
X!    return (int)(((ush)(temp * (temp ^ 1)) >> 8) & 0xff);
X  }
X  
X  /***********************************************************************
END_OF_FILE
  if test 498 -ne `wc -c <'cray.dif'`; then
    echo shar: \"'cray.dif'\" unpacked with wrong size!
  fi
  # end of 'cray.dif'
fi
if test -f 'zip.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'zip.h'\"
else
  echo shar: Extracting \"'zip.h'\" \(650 characters\)
  sed "s/^X//" >'zip.h' <<'END_OF_FILE'
X/* This is a dummy zip.h to allow crypt.c from Zip to compile for unzip */
X
X#define SKIP_TIME_H   /* temporary bugfix for VMS gcc compiler (may be */
X#include "unzip.h"    /*  necessary for other compilers--edit unzip.h  */
X#undef SKIP_TIME_H    /*  appropriately) */
X
X#define local
X#ifdef __STDC__
X#  define PROTO
X#endif
Xtypedef unsigned short ush;
Xtypedef unsigned long ulg;
X#if defined(UTS)   /* may be necessary for other old compilers, too */
X   typedef char *voidp;
X#else /* !UTS */
X   typedef void *voidp;
X#endif /* ?UTS */
Xtypedef int extent;
X
Xextern ULONG crc_32_tab[];
X#define crc32(c, b) (crc_32_tab[((int)(c) ^ (b)) & 0xff] ^ ((c) >> 8))
END_OF_FILE
  if test 650 -ne `wc -c <'zip.h'`; then
    echo shar: \"'zip.h'\" unpacked with wrong size!
  fi
  # end of 'zip.h'
fi
echo shar: End of archive 12 \(of 12\).
cp /dev/null ark12isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 12 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0


exit 0 # Just in case...
