From: eay@psych.psy.uq.oz.au (Eric Young)
Newsgroups: comp.sources.misc
Subject: v29i045: libdes - DES encryption library, Part03/04
Message-ID: <1992Apr3.224129.29668@aber.ac.uk>
Date: 3 Apr 92 22:41:29 GMT
Approved: aem@aber.ac.uk
X-Md4-Signature: 0ccae4e73807ce4f2d66c7acf9386f0d

Submitted-by: eay@psych.psy.uq.oz.au (Eric Young)
Posting-number: Volume 29, Issue 45
Archive-name: libdes/part03
Environment: UNIX

#! /bin/sh
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 3 (of 4)."
# Contents:  des.pl fcrypt.c
# Wrapped by aem@aberfa on Wed Apr  1 15:53:25 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'des.pl' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'des.pl'\"
else
echo shar: Extracting \"'des.pl'\" \(17482 characters\)
sed "s/^X//" >'des.pl' <<'END_OF_FILE'
X#!/usr/local/bin/perl
X# Copyright (C) 1992 Eric Young
X# des.pl - eric young 22/11/1991 eay@psych.psy.uq.oz.au
X#
X# This is an implementation of DES in perl.
X# The two routines (des_set_key and des_ecb_encrypt)
X# take 8 byte objects as arguments.
X#
X# des_set_key takes an 8 byte string as a key and returns a key schedule
X# for use in calls to des_ecb_encrypt.
X# des_ecb_encrypt takes three arguments, the first is a key schedule
X# (make sure to pass it by reference with the *), the second is 1
X# to encrypt, 0 to decrypt.  The third argument is an 8 byte object
X# to encrypt.  The function returns an 8 byte object that has been
X# DES encrypted.
X#
X# example:
X# require 'des.pl'
X#
X# $key =pack("C8",0x12,0x23,0x45,0x67,0x89,0xab,0xcd,0xef);
X# @ks=  &des_set_key($key);
X#
X# $outbytes= &des_ecb_encrypt(*ks,1,$data);
X# @enc =unpack("C8",$outbytes);
X#
X
Xpackage des;
X
X# The following 8 arrays are used in des_set_key
X@skb0=(
X# for C bits (numbered as per FIPS 46) 1 2 3 4 5 6 
X0x00000000,0x00000010,0x20000000,0x20000010,
X0x00010000,0x00010010,0x20010000,0x20010010,
X0x00000800,0x00000810,0x20000800,0x20000810,
X0x00010800,0x00010810,0x20010800,0x20010810,
X0x00000020,0x00000030,0x20000020,0x20000030,
X0x00010020,0x00010030,0x20010020,0x20010030,
X0x00000820,0x00000830,0x20000820,0x20000830,
X0x00010820,0x00010830,0x20010820,0x20010830,
X0x00080000,0x00080010,0x20080000,0x20080010,
X0x00090000,0x00090010,0x20090000,0x20090010,
X0x00080800,0x00080810,0x20080800,0x20080810,
X0x00090800,0x00090810,0x20090800,0x20090810,
X0x00080020,0x00080030,0x20080020,0x20080030,
X0x00090020,0x00090030,0x20090020,0x20090030,
X0x00080820,0x00080830,0x20080820,0x20080830,
X0x00090820,0x00090830,0x20090820,0x20090830,
X);
X@skb1=(
X# for C bits (numbered as per FIPS 46) 7 8 10 11 12 13 
X0x00000000,0x02000000,0x00002000,0x02002000,
X0x00200000,0x02200000,0x00202000,0x02202000,
X0x00000004,0x02000004,0x00002004,0x02002004,
X0x00200004,0x02200004,0x00202004,0x02202004,
X0x00000400,0x02000400,0x00002400,0x02002400,
X0x00200400,0x02200400,0x00202400,0x02202400,
X0x00000404,0x02000404,0x00002404,0x02002404,
X0x00200404,0x02200404,0x00202404,0x02202404,
X0x10000000,0x12000000,0x10002000,0x12002000,
X0x10200000,0x12200000,0x10202000,0x12202000,
X0x10000004,0x12000004,0x10002004,0x12002004,
X0x10200004,0x12200004,0x10202004,0x12202004,
X0x10000400,0x12000400,0x10002400,0x12002400,
X0x10200400,0x12200400,0x10202400,0x12202400,
X0x10000404,0x12000404,0x10002404,0x12002404,
X0x10200404,0x12200404,0x10202404,0x12202404,
X);
X@skb2=(
X# for C bits (numbered as per FIPS 46) 14 15 16 17 19 20 
X0x00000000,0x00000001,0x00040000,0x00040001,
X0x01000000,0x01000001,0x01040000,0x01040001,
X0x00000002,0x00000003,0x00040002,0x00040003,
X0x01000002,0x01000003,0x01040002,0x01040003,
X0x00000200,0x00000201,0x00040200,0x00040201,
X0x01000200,0x01000201,0x01040200,0x01040201,
X0x00000202,0x00000203,0x00040202,0x00040203,
X0x01000202,0x01000203,0x01040202,0x01040203,
X0x08000000,0x08000001,0x08040000,0x08040001,
X0x09000000,0x09000001,0x09040000,0x09040001,
X0x08000002,0x08000003,0x08040002,0x08040003,
X0x09000002,0x09000003,0x09040002,0x09040003,
X0x08000200,0x08000201,0x08040200,0x08040201,
X0x09000200,0x09000201,0x09040200,0x09040201,
X0x08000202,0x08000203,0x08040202,0x08040203,
X0x09000202,0x09000203,0x09040202,0x09040203,
X);
X@skb3=(
X# for C bits (numbered as per FIPS 46) 21 23 24 26 27 28 
X0x00000000,0x00100000,0x00000100,0x00100100,
X0x00000008,0x00100008,0x00000108,0x00100108,
X0x00001000,0x00101000,0x00001100,0x00101100,
X0x00001008,0x00101008,0x00001108,0x00101108,
X0x04000000,0x04100000,0x04000100,0x04100100,
X0x04000008,0x04100008,0x04000108,0x04100108,
X0x04001000,0x04101000,0x04001100,0x04101100,
X0x04001008,0x04101008,0x04001108,0x04101108,
X0x00020000,0x00120000,0x00020100,0x00120100,
X0x00020008,0x00120008,0x00020108,0x00120108,
X0x00021000,0x00121000,0x00021100,0x00121100,
X0x00021008,0x00121008,0x00021108,0x00121108,
X0x04020000,0x04120000,0x04020100,0x04120100,
X0x04020008,0x04120008,0x04020108,0x04120108,
X0x04021000,0x04121000,0x04021100,0x04121100,
X0x04021008,0x04121008,0x04021108,0x04121108,
X);
X@skb4=(
X# for D bits (numbered as per FIPS 46) 1 2 3 4 5 6 
X0x00000000,0x10000000,0x00010000,0x10010000,
X0x00000004,0x10000004,0x00010004,0x10010004,
X0x20000000,0x30000000,0x20010000,0x30010000,
X0x20000004,0x30000004,0x20010004,0x30010004,
X0x00100000,0x10100000,0x00110000,0x10110000,
X0x00100004,0x10100004,0x00110004,0x10110004,
X0x20100000,0x30100000,0x20110000,0x30110000,
X0x20100004,0x30100004,0x20110004,0x30110004,
X0x00001000,0x10001000,0x00011000,0x10011000,
X0x00001004,0x10001004,0x00011004,0x10011004,
X0x20001000,0x30001000,0x20011000,0x30011000,
X0x20001004,0x30001004,0x20011004,0x30011004,
X0x00101000,0x10101000,0x00111000,0x10111000,
X0x00101004,0x10101004,0x00111004,0x10111004,
X0x20101000,0x30101000,0x20111000,0x30111000,
X0x20101004,0x30101004,0x20111004,0x30111004,
X);
X@skb5=(
X# for D bits (numbered as per FIPS 46) 8 9 11 12 13 14 
X0x00000000,0x08000000,0x00000008,0x08000008,
X0x00000400,0x08000400,0x00000408,0x08000408,
X0x00020000,0x08020000,0x00020008,0x08020008,
X0x00020400,0x08020400,0x00020408,0x08020408,
X0x00000001,0x08000001,0x00000009,0x08000009,
X0x00000401,0x08000401,0x00000409,0x08000409,
X0x00020001,0x08020001,0x00020009,0x08020009,
X0x00020401,0x08020401,0x00020409,0x08020409,
X0x02000000,0x0A000000,0x02000008,0x0A000008,
X0x02000400,0x0A000400,0x02000408,0x0A000408,
X0x02020000,0x0A020000,0x02020008,0x0A020008,
X0x02020400,0x0A020400,0x02020408,0x0A020408,
X0x02000001,0x0A000001,0x02000009,0x0A000009,
X0x02000401,0x0A000401,0x02000409,0x0A000409,
X0x02020001,0x0A020001,0x02020009,0x0A020009,
X0x02020401,0x0A020401,0x02020409,0x0A020409,
X);
X@skb6=(
X# for D bits (numbered as per FIPS 46) 16 17 18 19 20 21 
X0x00000000,0x00000100,0x00080000,0x00080100,
X0x01000000,0x01000100,0x01080000,0x01080100,
X0x00000010,0x00000110,0x00080010,0x00080110,
X0x01000010,0x01000110,0x01080010,0x01080110,
X0x00200000,0x00200100,0x00280000,0x00280100,
X0x01200000,0x01200100,0x01280000,0x01280100,
X0x00200010,0x00200110,0x00280010,0x00280110,
X0x01200010,0x01200110,0x01280010,0x01280110,
X0x00000200,0x00000300,0x00080200,0x00080300,
X0x01000200,0x01000300,0x01080200,0x01080300,
X0x00000210,0x00000310,0x00080210,0x00080310,
X0x01000210,0x01000310,0x01080210,0x01080310,
X0x00200200,0x00200300,0x00280200,0x00280300,
X0x01200200,0x01200300,0x01280200,0x01280300,
X0x00200210,0x00200310,0x00280210,0x00280310,
X0x01200210,0x01200310,0x01280210,0x01280310,
X);
X@skb7=(
X# for D bits (numbered as per FIPS 46) 22 23 24 25 27 28 
X0x00000000,0x04000000,0x00040000,0x04040000,
X0x00000002,0x04000002,0x00040002,0x04040002,
X0x00002000,0x04002000,0x00042000,0x04042000,
X0x00002002,0x04002002,0x00042002,0x04042002,
X0x00000020,0x04000020,0x00040020,0x04040020,
X0x00000022,0x04000022,0x00040022,0x04040022,
X0x00002020,0x04002020,0x00042020,0x04042020,
X0x00002022,0x04002022,0x00042022,0x04042022,
X0x00000800,0x04000800,0x00040800,0x04040800,
X0x00000802,0x04000802,0x00040802,0x04040802,
X0x00002800,0x04002800,0x00042800,0x04042800,
X0x00002802,0x04002802,0x00042802,0x04042802,
X0x00000820,0x04000820,0x00040820,0x04040820,
X0x00000822,0x04000822,0x00040822,0x04040822,
X0x00002820,0x04002820,0x00042820,0x04042820,
X0x00002822,0x04002822,0x00042822,0x04042822,
X);
X
X@shifts2=(0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0);
X
X# used in ecb_encrypt
X@SP0=(
X0x00410100, 0x00010000, 0x40400000, 0x40410100,
X0x00400000, 0x40010100, 0x40010000, 0x40400000,
X0x40010100, 0x00410100, 0x00410000, 0x40000100,
X0x40400100, 0x00400000, 0x00000000, 0x40010000,
X0x00010000, 0x40000000, 0x00400100, 0x00010100,
X0x40410100, 0x00410000, 0x40000100, 0x00400100,
X0x40000000, 0x00000100, 0x00010100, 0x40410000,
X0x00000100, 0x40400100, 0x40410000, 0x00000000,
X0x00000000, 0x40410100, 0x00400100, 0x40010000,
X0x00410100, 0x00010000, 0x40000100, 0x00400100,
X0x40410000, 0x00000100, 0x00010100, 0x40400000,
X0x40010100, 0x40000000, 0x40400000, 0x00410000,
X0x40410100, 0x00010100, 0x00410000, 0x40400100,
X0x00400000, 0x40000100, 0x40010000, 0x00000000,
X0x00010000, 0x00400000, 0x40400100, 0x00410100,
X0x40000000, 0x40410000, 0x00000100, 0x40010100,
X);
X@SP1=(
X0x08021002, 0x00000000, 0x00021000, 0x08020000,
X0x08000002, 0x00001002, 0x08001000, 0x00021000,
X0x00001000, 0x08020002, 0x00000002, 0x08001000,
X0x00020002, 0x08021000, 0x08020000, 0x00000002,
X0x00020000, 0x08001002, 0x08020002, 0x00001000,
X0x00021002, 0x08000000, 0x00000000, 0x00020002,
X0x08001002, 0x00021002, 0x08021000, 0x08000002,
X0x08000000, 0x00020000, 0x00001002, 0x08021002,
X0x00020002, 0x08021000, 0x08001000, 0x00021002,
X0x08021002, 0x00020002, 0x08000002, 0x00000000,
X0x08000000, 0x00001002, 0x00020000, 0x08020002,
X0x00001000, 0x08000000, 0x00021002, 0x08001002,
X0x08021000, 0x00001000, 0x00000000, 0x08000002,
X0x00000002, 0x08021002, 0x00021000, 0x08020000,
X0x08020002, 0x00020000, 0x00001002, 0x08001000,
X0x08001002, 0x00000002, 0x08020000, 0x00021000,
X);
X@SP2=(
X0x20800000, 0x00808020, 0x00000020, 0x20800020,
X0x20008000, 0x00800000, 0x20800020, 0x00008020,
X0x00800020, 0x00008000, 0x00808000, 0x20000000,
X0x20808020, 0x20000020, 0x20000000, 0x20808000,
X0x00000000, 0x20008000, 0x00808020, 0x00000020,
X0x20000020, 0x20808020, 0x00008000, 0x20800000,
X0x20808000, 0x00800020, 0x20008020, 0x00808000,
X0x00008020, 0x00000000, 0x00800000, 0x20008020,
X0x00808020, 0x00000020, 0x20000000, 0x00008000,
X0x20000020, 0x20008000, 0x00808000, 0x20800020,
X0x00000000, 0x00808020, 0x00008020, 0x20808000,
X0x20008000, 0x00800000, 0x20808020, 0x20000000,
X0x20008020, 0x20800000, 0x00800000, 0x20808020,
X0x00008000, 0x00800020, 0x20800020, 0x00008020,
X0x00800020, 0x00000000, 0x20808000, 0x20000020,
X0x20800000, 0x20008020, 0x00000020, 0x00808000,
X);
X@SP3=(
X0x00080201, 0x02000200, 0x00000001, 0x02080201,
X0x00000000, 0x02080000, 0x02000201, 0x00080001,
X0x02080200, 0x02000001, 0x02000000, 0x00000201,
X0x02000001, 0x00080201, 0x00080000, 0x02000000,
X0x02080001, 0x00080200, 0x00000200, 0x00000001,
X0x00080200, 0x02000201, 0x02080000, 0x00000200,
X0x00000201, 0x00000000, 0x00080001, 0x02080200,
X0x02000200, 0x02080001, 0x02080201, 0x00080000,
X0x02080001, 0x00000201, 0x00080000, 0x02000001,
X0x00080200, 0x02000200, 0x00000001, 0x02080000,
X0x02000201, 0x00000000, 0x00000200, 0x00080001,
X0x00000000, 0x02080001, 0x02080200, 0x00000200,
X0x02000000, 0x02080201, 0x00080201, 0x00080000,
X0x02080201, 0x00000001, 0x02000200, 0x00080201,
X0x00080001, 0x00080200, 0x02080000, 0x02000201,
X0x00000201, 0x02000000, 0x02000001, 0x02080200,
X);
X@SP4=(
X0x01000000, 0x00002000, 0x00000080, 0x01002084,
X0x01002004, 0x01000080, 0x00002084, 0x01002000,
X0x00002000, 0x00000004, 0x01000004, 0x00002080,
X0x01000084, 0x01002004, 0x01002080, 0x00000000,
X0x00002080, 0x01000000, 0x00002004, 0x00000084,
X0x01000080, 0x00002084, 0x00000000, 0x01000004,
X0x00000004, 0x01000084, 0x01002084, 0x00002004,
X0x01002000, 0x00000080, 0x00000084, 0x01002080,
X0x01002080, 0x01000084, 0x00002004, 0x01002000,
X0x00002000, 0x00000004, 0x01000004, 0x01000080,
X0x01000000, 0x00002080, 0x01002084, 0x00000000,
X0x00002084, 0x01000000, 0x00000080, 0x00002004,
X0x01000084, 0x00000080, 0x00000000, 0x01002084,
X0x01002004, 0x01002080, 0x00000084, 0x00002000,
X0x00002080, 0x01002004, 0x01000080, 0x00000084,
X0x00000004, 0x00002084, 0x01002000, 0x01000004,
X);
X@SP5=(
X0x10000008, 0x00040008, 0x00000000, 0x10040400,
X0x00040008, 0x00000400, 0x10000408, 0x00040000,
X0x00000408, 0x10040408, 0x00040400, 0x10000000,
X0x10000400, 0x10000008, 0x10040000, 0x00040408,
X0x00040000, 0x10000408, 0x10040008, 0x00000000,
X0x00000400, 0x00000008, 0x10040400, 0x10040008,
X0x10040408, 0x10040000, 0x10000000, 0x00000408,
X0x00000008, 0x00040400, 0x00040408, 0x10000400,
X0x00000408, 0x10000000, 0x10000400, 0x00040408,
X0x10040400, 0x00040008, 0x00000000, 0x10000400,
X0x10000000, 0x00000400, 0x10040008, 0x00040000,
X0x00040008, 0x10040408, 0x00040400, 0x00000008,
X0x10040408, 0x00040400, 0x00040000, 0x10000408,
X0x10000008, 0x10040000, 0x00040408, 0x00000000,
X0x00000400, 0x10000008, 0x10000408, 0x10040400,
X0x10040000, 0x00000408, 0x00000008, 0x10040008,
X);
X@SP6=(
X0x00000800, 0x00000040, 0x00200040, 0x80200000,
X0x80200840, 0x80000800, 0x00000840, 0x00000000,
X0x00200000, 0x80200040, 0x80000040, 0x00200800,
X0x80000000, 0x00200840, 0x00200800, 0x80000040,
X0x80200040, 0x00000800, 0x80000800, 0x80200840,
X0x00000000, 0x00200040, 0x80200000, 0x00000840,
X0x80200800, 0x80000840, 0x00200840, 0x80000000,
X0x80000840, 0x80200800, 0x00000040, 0x00200000,
X0x80000840, 0x00200800, 0x80200800, 0x80000040,
X0x00000800, 0x00000040, 0x00200000, 0x80200800,
X0x80200040, 0x80000840, 0x00000840, 0x00000000,
X0x00000040, 0x80200000, 0x80000000, 0x00200040,
X0x00000000, 0x80200040, 0x00200040, 0x00000840,
X0x80000040, 0x00000800, 0x80200840, 0x00200000,
X0x00200840, 0x80000000, 0x80000800, 0x80200840,
X0x80200000, 0x00200840, 0x00200800, 0x80000800,
X);
X@SP7=(
X0x04100010, 0x04104000, 0x00004010, 0x00000000,
X0x04004000, 0x00100010, 0x04100000, 0x04104010,
X0x00000010, 0x04000000, 0x00104000, 0x00004010,
X0x00104010, 0x04004010, 0x04000010, 0x04100000,
X0x00004000, 0x00104010, 0x00100010, 0x04004000,
X0x04104010, 0x04000010, 0x00000000, 0x00104000,
X0x04000000, 0x00100000, 0x04004010, 0x04100010,
X0x00100000, 0x00004000, 0x04104000, 0x00000010,
X0x00100000, 0x00004000, 0x04000010, 0x04104010,
X0x00004010, 0x04000000, 0x00000000, 0x00104000,
X0x04100010, 0x04004010, 0x04004000, 0x00100010,
X0x04104000, 0x00000010, 0x00100010, 0x04004000,
X0x04104010, 0x00100000, 0x04100000, 0x04000010,
X0x00104000, 0x00004010, 0x04004010, 0x04100000,
X0x00000010, 0x04104000, 0x00104010, 0x00000000,
X0x04000000, 0x04100010, 0x00004000, 0x00104010,
X);
X
Xsub main'des_set_key
X	{
X	local($param)=@_;
X	local(@key);
X	local($c,$d,$i,$s,$t);
X	local(@ks)=();
X
X	# Get the bytes in the order we want.
X	@key=unpack("C8",$param);
X
X	$c=	($key[0]    )|
X		($key[1]<< 8)|
X		($key[2]<<16)|
X		($key[3]<<24);
X	$d=	($key[4]    )|
X		($key[5]<< 8)|
X		($key[6]<<16)|
X		($key[7]<<24);
X
X	&doPC1(*c,*d);
X
X	for $i (@shifts2)
X		{
X		if ($i)
X			{
X			$c=($c>>2)|($c<<26);
X			$d=($d>>2)|($d<<26);
X			}
X		else
X			{
X			$c=($c>>1)|($c<<27);
X			$d=($d>>1)|($d<<27);
X			}
X		$c&=0x0fffffff;
X		$d&=0x0fffffff;
X		$s=	$skb0[ ($c    )&0x3f                 ]|
X			$skb1[(($c>> 6)&0x03)|(($c>> 7)&0x3c)]|
X			$skb2[(($c>>13)&0x0f)|(($c>>14)&0x30)]|
X			$skb3[(($c>>20)&0x01)|(($c>>21)&0x06) |
X					     (($c>>22)&0x38)];
X		$t=     $skb4[ ($d    )&0x3f                ]|
X			$skb5[(($d>> 7)&0x03)|(($d>> 8)&0x3c)]|
X			$skb6[ ($d>>15)&0x3f                 ]|
X			$skb7[(($d>>21)&0x0f)|(($d>>22)&0x30)];
X		push(@ks,($t<<16)|($s&0x0000ffff));
X		$s=      ($s>>16)|($t&0xffff0000) ;
X		push(@ks,($s<<4)|($s>>28));
X		}
X	@ks;
X	}
X
Xsub doPC1
X	{
X	local(*a,*b)=@_;
X	local($t);
X
X	$t=(($b>>4)^$a)&0x0f0f0f0f;
X	$b^=($t<<4);
X	$a^=$t;
X
X	# do $a first 
X	$t=(($a<<18)^$a)&0xcccc0000;
X	$a=$a^$t^($t>>18);
X	$t=(($a<<17)^$a)&0xaaaa0000;
X	$a=$a^$t^($t>>17);
X	$t=(($a<< 8)^$a)&0x00ff0000;
X	$a=$a^$t^($t>> 8);
X	$t=(($a<<17)^$a)&0xaaaa0000;
X	$a=$a^$t^($t>>17);
X
X	# now do $b
X	$t=(($b<<24)^$b)&0xff000000;
X	$b=$b^$t^($t>>24);
X	$t=(($b<< 8)^$b)&0x00ff0000;
X	$b=$b^$t^($t>> 8);
X	$t=(($b<<14)^$b)&0x33330000;
X	$b=$b^$t^($t>>14);
X	$b=(($b&0x00aa00aa)<<7)|(($b&0x55005500)>>7)|($b&0xaa55aa55);
X	$b=($b>>8)|(($a&0xf0000000)>>4);
X	$a&=0x0fffffff;
X	}
X
Xsub doIP
X	{
X	local(*a,*b)=@_;
X	local($t);
X
X	$t=(($b>> 4)^$a)&0x0f0f0f0f;
X	$b^=($t<< 4); $a^=$t;
X	$t=(($a>>16)^$b)&0x0000ffff;
X	$a^=($t<<16); $b^=$t;
X	$t=(($b>> 2)^$a)&0x33333333;
X	$b^=($t<< 2); $a^=$t;
X	$t=(($a>> 8)^$b)&0x00ff00ff;
X	$a^=($t<< 8); $b^=$t;
X	$t=(($b>> 1)^$a)&0x55555555;
X	$b^=($t<< 1); $a^=$t;
X	$t=$a;
X	$a=$b;
X	$b=$t;
X	}
X
Xsub doFP
X	{
X	local(*a,*b)=@_;
X	local($t);
X
X	$t=(($b>> 1)^$a)&0x55555555;
X	$b^=($t<< 1); $a^=$t;
X	$t=(($a>> 8)^$b)&0x00ff00ff;
X	$a^=($t<< 8); $b^=$t;
X	$t=(($b>> 2)^$a)&0x33333333;
X	$b^=($t<< 2); $a^=$t;
X	$t=(($a>>16)^$b)&0x0000ffff;
X	$a^=($t<<16); $b^=$t;
X	$t=(($b>> 4)^$a)&0x0f0f0f0f;
X	$b^=($t<< 4); $a^=$t;
X	}
X
Xsub main'des_ecb_encrypt
X	{
X	local(*ks,$encrypt,$in)=@_;
X	local($l,$r,$inc,$start,$end,$i,$t,$u,@input);
X	
X	@input=unpack("C8",$in);
X	# Get the bytes in the order we want.
X	$l=	($input[0]    )|
X		($input[1]<< 8)|
X		($input[2]<<16)|
X		($input[3]<<24);
X	$r=	($input[4]    )|
X		($input[5]<< 8)|
X		($input[6]<<16)|
X		($input[7]<<24);
X
X	&doIP(*l,*r);
X	if ($encrypt)
X		{
X		for ($i=0; $i<32; $i+=4)
X			{
X			$t=($r<<1)|($r>>31);
X			$u=$t^$ks[$i  ];
X			$t=$t^$ks[$i+1];
X			$t=($t>>4)|($t<<28);
X			$l^=	$SP1[ $t     &0x3f]|
X				$SP3[($t>> 8)&0x3f]|
X				$SP5[($t>>16)&0x3f]|
X				$SP7[($t>>24)&0x3f]|
X				$SP0[ $u     &0x3f]|
X				$SP2[($u>> 8)&0x3f]|
X				$SP4[($u>>16)&0x3f]|
X				$SP6[($u>>24)&0x3f];
X
X			$t=($l<<1)|($l>>31);
X			$u=$t^$ks[$i+2];
X			$t=$t^$ks[$i+3];
X			$t=($t>>4)|($t<<28);
X			$r^=	$SP1[ $t     &0x3f]|
X				$SP3[($t>> 8)&0x3f]|
X				$SP5[($t>>16)&0x3f]|
X				$SP7[($t>>24)&0x3f]|
X				$SP0[ $u     &0x3f]|
X				$SP2[($u>> 8)&0x3f]|
X				$SP4[($u>>16)&0x3f]|
X				$SP6[($u>>24)&0x3f];
X			}
X		}
X	else	
X		{
X		for ($i=30; $i>0; $i-=4)
X			{
X			$t=($r<<1)|($r>>31);
X			$u=$t^$ks[$i  ];
X			$t=$t^$ks[$i+1];
X			$t=($t>>4)|($t<<28);
X			$l^=	$SP1[ $t     &0x3f]|
X				$SP3[($t>> 8)&0x3f]|
X				$SP5[($t>>16)&0x3f]|
X				$SP7[($t>>24)&0x3f]|
X				$SP0[ $u     &0x3f]|
X				$SP2[($u>> 8)&0x3f]|
X				$SP4[($u>>16)&0x3f]|
X				$SP6[($u>>24)&0x3f];
X
X			$t=($l<<1)|($l>>31);
X			$u=$t^$ks[$i-2];
X			$t=$t^$ks[$i-1];
X			$t=($t>>4)|($t<<28);
X			$r^=	$SP1[ $t     &0x3f]|
X				$SP3[($t>> 8)&0x3f]|
X				$SP5[($t>>16)&0x3f]|
X				$SP7[($t>>24)&0x3f]|
X				$SP0[ $u     &0x3f]|
X				$SP2[($u>> 8)&0x3f]|
X				$SP4[($u>>16)&0x3f]|
X				$SP6[($u>>24)&0x3f];
X			}
X		}
X	&doFP(*l,*r);
X	pack("C8",$l&0xff,$l>>8,$l>>16,$l>>24,
X		  $r&0xff,$r>>8,$r>>16,$r>>24);
X	}
END_OF_FILE
if test 17482 -ne `wc -c <'des.pl'`; then
    echo shar: \"'des.pl'\" unpacked with wrong size!
fi
# end of 'des.pl'
fi
if test -f 'fcrypt.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'fcrypt.c'\"
else
echo shar: Extracting \"'fcrypt.c'\" \(18467 characters\)
sed "s/^X//" >'fcrypt.c' <<'END_OF_FILE'
X/* fcrypt.c */
X#include <stdio.h>
X/* Copyright (C) 1992 Eric Young - see COPYING for more details */
X
X/* Eric Young.
X * This version of crypt has been developed from my MIT compatable
X * DES library.
X * The library is available at pub/DES at ftp.psy.uq.oz.au
X * eay@psych.psy.uq.oz.au
X */
X
Xtypedef unsigned char des_cblock[8];
Xtypedef struct des_ks_struct
X	{
X	des_cblock _;
X	} des_key_schedule[16];
X
X#define DES_KEY_SZ 	(sizeof(des_cblock))
X#define DES_ENCRYPT	1
X#define DES_DECRYPT	0
X
Xtypedef unsigned char uchar;
Xtypedef unsigned short ushort;
Xtypedef unsigned int uint;
Xtypedef unsigned long ulong;
X
X#define ITERATIONS 16
X#define HALF_ITERATIONS 8
X
X#define c2l(c,l)	(l =((ulong)(*((c)++)))    , \
X			 l|=((ulong)(*((c)++)))<< 8, \
X			 l|=((ulong)(*((c)++)))<<16, \
X			 l|=((ulong)(*((c)++)))<<24)
X
X#define l2c(l,c)	(*((c)++)=(uchar)(((l)    )&0xff), \
X			 *((c)++)=(uchar)(((l)>> 8)&0xff), \
X			 *((c)++)=(uchar)(((l)>>16)&0xff), \
X			 *((c)++)=(uchar)(((l)>>24)&0xff))
X
Xstatic unsigned long SPtrans[8][64]={
X/* nibble 0 */
X0x00410100, 0x00010000, 0x40400000, 0x40410100,
X0x00400000, 0x40010100, 0x40010000, 0x40400000,
X0x40010100, 0x00410100, 0x00410000, 0x40000100,
X0x40400100, 0x00400000, 0x00000000, 0x40010000,
X0x00010000, 0x40000000, 0x00400100, 0x00010100,
X0x40410100, 0x00410000, 0x40000100, 0x00400100,
X0x40000000, 0x00000100, 0x00010100, 0x40410000,
X0x00000100, 0x40400100, 0x40410000, 0x00000000,
X0x00000000, 0x40410100, 0x00400100, 0x40010000,
X0x00410100, 0x00010000, 0x40000100, 0x00400100,
X0x40410000, 0x00000100, 0x00010100, 0x40400000,
X0x40010100, 0x40000000, 0x40400000, 0x00410000,
X0x40410100, 0x00010100, 0x00410000, 0x40400100,
X0x00400000, 0x40000100, 0x40010000, 0x00000000,
X0x00010000, 0x00400000, 0x40400100, 0x00410100,
X0x40000000, 0x40410000, 0x00000100, 0x40010100,
X
X/* nibble 1 */
X0x08021002, 0x00000000, 0x00021000, 0x08020000,
X0x08000002, 0x00001002, 0x08001000, 0x00021000,
X0x00001000, 0x08020002, 0x00000002, 0x08001000,
X0x00020002, 0x08021000, 0x08020000, 0x00000002,
X0x00020000, 0x08001002, 0x08020002, 0x00001000,
X0x00021002, 0x08000000, 0x00000000, 0x00020002,
X0x08001002, 0x00021002, 0x08021000, 0x08000002,
X0x08000000, 0x00020000, 0x00001002, 0x08021002,
X0x00020002, 0x08021000, 0x08001000, 0x00021002,
X0x08021002, 0x00020002, 0x08000002, 0x00000000,
X0x08000000, 0x00001002, 0x00020000, 0x08020002,
X0x00001000, 0x08000000, 0x00021002, 0x08001002,
X0x08021000, 0x00001000, 0x00000000, 0x08000002,
X0x00000002, 0x08021002, 0x00021000, 0x08020000,
X0x08020002, 0x00020000, 0x00001002, 0x08001000,
X0x08001002, 0x00000002, 0x08020000, 0x00021000,
X
X/* nibble 2 */
X0x20800000, 0x00808020, 0x00000020, 0x20800020,
X0x20008000, 0x00800000, 0x20800020, 0x00008020,
X0x00800020, 0x00008000, 0x00808000, 0x20000000,
X0x20808020, 0x20000020, 0x20000000, 0x20808000,
X0x00000000, 0x20008000, 0x00808020, 0x00000020,
X0x20000020, 0x20808020, 0x00008000, 0x20800000,
X0x20808000, 0x00800020, 0x20008020, 0x00808000,
X0x00008020, 0x00000000, 0x00800000, 0x20008020,
X0x00808020, 0x00000020, 0x20000000, 0x00008000,
X0x20000020, 0x20008000, 0x00808000, 0x20800020,
X0x00000000, 0x00808020, 0x00008020, 0x20808000,
X0x20008000, 0x00800000, 0x20808020, 0x20000000,
X0x20008020, 0x20800000, 0x00800000, 0x20808020,
X0x00008000, 0x00800020, 0x20800020, 0x00008020,
X0x00800020, 0x00000000, 0x20808000, 0x20000020,
X0x20800000, 0x20008020, 0x00000020, 0x00808000,
X
X/* nibble 3 */
X0x00080201, 0x02000200, 0x00000001, 0x02080201,
X0x00000000, 0x02080000, 0x02000201, 0x00080001,
X0x02080200, 0x02000001, 0x02000000, 0x00000201,
X0x02000001, 0x00080201, 0x00080000, 0x02000000,
X0x02080001, 0x00080200, 0x00000200, 0x00000001,
X0x00080200, 0x02000201, 0x02080000, 0x00000200,
X0x00000201, 0x00000000, 0x00080001, 0x02080200,
X0x02000200, 0x02080001, 0x02080201, 0x00080000,
X0x02080001, 0x00000201, 0x00080000, 0x02000001,
X0x00080200, 0x02000200, 0x00000001, 0x02080000,
X0x02000201, 0x00000000, 0x00000200, 0x00080001,
X0x00000000, 0x02080001, 0x02080200, 0x00000200,
X0x02000000, 0x02080201, 0x00080201, 0x00080000,
X0x02080201, 0x00000001, 0x02000200, 0x00080201,
X0x00080001, 0x00080200, 0x02080000, 0x02000201,
X0x00000201, 0x02000000, 0x02000001, 0x02080200,
X
X/* nibble 4 */
X0x01000000, 0x00002000, 0x00000080, 0x01002084,
X0x01002004, 0x01000080, 0x00002084, 0x01002000,
X0x00002000, 0x00000004, 0x01000004, 0x00002080,
X0x01000084, 0x01002004, 0x01002080, 0x00000000,
X0x00002080, 0x01000000, 0x00002004, 0x00000084,
X0x01000080, 0x00002084, 0x00000000, 0x01000004,
X0x00000004, 0x01000084, 0x01002084, 0x00002004,
X0x01002000, 0x00000080, 0x00000084, 0x01002080,
X0x01002080, 0x01000084, 0x00002004, 0x01002000,
X0x00002000, 0x00000004, 0x01000004, 0x01000080,
X0x01000000, 0x00002080, 0x01002084, 0x00000000,
X0x00002084, 0x01000000, 0x00000080, 0x00002004,
X0x01000084, 0x00000080, 0x00000000, 0x01002084,
X0x01002004, 0x01002080, 0x00000084, 0x00002000,
X0x00002080, 0x01002004, 0x01000080, 0x00000084,
X0x00000004, 0x00002084, 0x01002000, 0x01000004,
X
X/* nibble 5 */
X0x10000008, 0x00040008, 0x00000000, 0x10040400,
X0x00040008, 0x00000400, 0x10000408, 0x00040000,
X0x00000408, 0x10040408, 0x00040400, 0x10000000,
X0x10000400, 0x10000008, 0x10040000, 0x00040408,
X0x00040000, 0x10000408, 0x10040008, 0x00000000,
X0x00000400, 0x00000008, 0x10040400, 0x10040008,
X0x10040408, 0x10040000, 0x10000000, 0x00000408,
X0x00000008, 0x00040400, 0x00040408, 0x10000400,
X0x00000408, 0x10000000, 0x10000400, 0x00040408,
X0x10040400, 0x00040008, 0x00000000, 0x10000400,
X0x10000000, 0x00000400, 0x10040008, 0x00040000,
X0x00040008, 0x10040408, 0x00040400, 0x00000008,
X0x10040408, 0x00040400, 0x00040000, 0x10000408,
X0x10000008, 0x10040000, 0x00040408, 0x00000000,
X0x00000400, 0x10000008, 0x10000408, 0x10040400,
X0x10040000, 0x00000408, 0x00000008, 0x10040008,
X
X/* nibble 6 */
X0x00000800, 0x00000040, 0x00200040, 0x80200000,
X0x80200840, 0x80000800, 0x00000840, 0x00000000,
X0x00200000, 0x80200040, 0x80000040, 0x00200800,
X0x80000000, 0x00200840, 0x00200800, 0x80000040,
X0x80200040, 0x00000800, 0x80000800, 0x80200840,
X0x00000000, 0x00200040, 0x80200000, 0x00000840,
X0x80200800, 0x80000840, 0x00200840, 0x80000000,
X0x80000840, 0x80200800, 0x00000040, 0x00200000,
X0x80000840, 0x00200800, 0x80200800, 0x80000040,
X0x00000800, 0x00000040, 0x00200000, 0x80200800,
X0x80200040, 0x80000840, 0x00000840, 0x00000000,
X0x00000040, 0x80200000, 0x80000000, 0x00200040,
X0x00000000, 0x80200040, 0x00200040, 0x00000840,
X0x80000040, 0x00000800, 0x80200840, 0x00200000,
X0x00200840, 0x80000000, 0x80000800, 0x80200840,
X0x80200000, 0x00200840, 0x00200800, 0x80000800,
X
X/* nibble 7 */
X0x04100010, 0x04104000, 0x00004010, 0x00000000,
X0x04004000, 0x00100010, 0x04100000, 0x04104010,
X0x00000010, 0x04000000, 0x00104000, 0x00004010,
X0x00104010, 0x04004010, 0x04000010, 0x04100000,
X0x00004000, 0x00104010, 0x00100010, 0x04004000,
X0x04104010, 0x04000010, 0x00000000, 0x00104000,
X0x04000000, 0x00100000, 0x04004010, 0x04100010,
X0x00100000, 0x00004000, 0x04104000, 0x00000010,
X0x00100000, 0x00004000, 0x04000010, 0x04104010,
X0x00004010, 0x04000000, 0x00000000, 0x00104000,
X0x04100010, 0x04004010, 0x04004000, 0x00100010,
X0x04104000, 0x00000010, 0x00100010, 0x04004000,
X0x04104010, 0x00100000, 0x04100000, 0x04000010,
X0x00104000, 0x00004010, 0x04004010, 0x04100000,
X0x00000010, 0x04104000, 0x00104010, 0x00000000,
X0x04000000, 0x04100010, 0x00004000, 0x00104010};
Xstatic ulong skb[8][64]={
X/* for C bits (numbered as per FIPS 46) 1 2 3 4 5 6 */
X0x00000000,0x00000010,0x20000000,0x20000010,
X0x00010000,0x00010010,0x20010000,0x20010010,
X0x00000800,0x00000810,0x20000800,0x20000810,
X0x00010800,0x00010810,0x20010800,0x20010810,
X0x00000020,0x00000030,0x20000020,0x20000030,
X0x00010020,0x00010030,0x20010020,0x20010030,
X0x00000820,0x00000830,0x20000820,0x20000830,
X0x00010820,0x00010830,0x20010820,0x20010830,
X0x00080000,0x00080010,0x20080000,0x20080010,
X0x00090000,0x00090010,0x20090000,0x20090010,
X0x00080800,0x00080810,0x20080800,0x20080810,
X0x00090800,0x00090810,0x20090800,0x20090810,
X0x00080020,0x00080030,0x20080020,0x20080030,
X0x00090020,0x00090030,0x20090020,0x20090030,
X0x00080820,0x00080830,0x20080820,0x20080830,
X0x00090820,0x00090830,0x20090820,0x20090830,
X/* for C bits (numbered as per FIPS 46) 7 8 10 11 12 13 */
X0x00000000,0x02000000,0x00002000,0x02002000,
X0x00200000,0x02200000,0x00202000,0x02202000,
X0x00000004,0x02000004,0x00002004,0x02002004,
X0x00200004,0x02200004,0x00202004,0x02202004,
X0x00000400,0x02000400,0x00002400,0x02002400,
X0x00200400,0x02200400,0x00202400,0x02202400,
X0x00000404,0x02000404,0x00002404,0x02002404,
X0x00200404,0x02200404,0x00202404,0x02202404,
X0x10000000,0x12000000,0x10002000,0x12002000,
X0x10200000,0x12200000,0x10202000,0x12202000,
X0x10000004,0x12000004,0x10002004,0x12002004,
X0x10200004,0x12200004,0x10202004,0x12202004,
X0x10000400,0x12000400,0x10002400,0x12002400,
X0x10200400,0x12200400,0x10202400,0x12202400,
X0x10000404,0x12000404,0x10002404,0x12002404,
X0x10200404,0x12200404,0x10202404,0x12202404,
X/* for C bits (numbered as per FIPS 46) 14 15 16 17 19 20 */
X0x00000000,0x00000001,0x00040000,0x00040001,
X0x01000000,0x01000001,0x01040000,0x01040001,
X0x00000002,0x00000003,0x00040002,0x00040003,
X0x01000002,0x01000003,0x01040002,0x01040003,
X0x00000200,0x00000201,0x00040200,0x00040201,
X0x01000200,0x01000201,0x01040200,0x01040201,
X0x00000202,0x00000203,0x00040202,0x00040203,
X0x01000202,0x01000203,0x01040202,0x01040203,
X0x08000000,0x08000001,0x08040000,0x08040001,
X0x09000000,0x09000001,0x09040000,0x09040001,
X0x08000002,0x08000003,0x08040002,0x08040003,
X0x09000002,0x09000003,0x09040002,0x09040003,
X0x08000200,0x08000201,0x08040200,0x08040201,
X0x09000200,0x09000201,0x09040200,0x09040201,
X0x08000202,0x08000203,0x08040202,0x08040203,
X0x09000202,0x09000203,0x09040202,0x09040203,
X/* for C bits (numbered as per FIPS 46) 21 23 24 26 27 28 */
X0x00000000,0x00100000,0x00000100,0x00100100,
X0x00000008,0x00100008,0x00000108,0x00100108,
X0x00001000,0x00101000,0x00001100,0x00101100,
X0x00001008,0x00101008,0x00001108,0x00101108,
X0x04000000,0x04100000,0x04000100,0x04100100,
X0x04000008,0x04100008,0x04000108,0x04100108,
X0x04001000,0x04101000,0x04001100,0x04101100,
X0x04001008,0x04101008,0x04001108,0x04101108,
X0x00020000,0x00120000,0x00020100,0x00120100,
X0x00020008,0x00120008,0x00020108,0x00120108,
X0x00021000,0x00121000,0x00021100,0x00121100,
X0x00021008,0x00121008,0x00021108,0x00121108,
X0x04020000,0x04120000,0x04020100,0x04120100,
X0x04020008,0x04120008,0x04020108,0x04120108,
X0x04021000,0x04121000,0x04021100,0x04121100,
X0x04021008,0x04121008,0x04021108,0x04121108,
X/* for D bits (numbered as per FIPS 46) 1 2 3 4 5 6 */
X0x00000000,0x10000000,0x00010000,0x10010000,
X0x00000004,0x10000004,0x00010004,0x10010004,
X0x20000000,0x30000000,0x20010000,0x30010000,
X0x20000004,0x30000004,0x20010004,0x30010004,
X0x00100000,0x10100000,0x00110000,0x10110000,
X0x00100004,0x10100004,0x00110004,0x10110004,
X0x20100000,0x30100000,0x20110000,0x30110000,
X0x20100004,0x30100004,0x20110004,0x30110004,
X0x00001000,0x10001000,0x00011000,0x10011000,
X0x00001004,0x10001004,0x00011004,0x10011004,
X0x20001000,0x30001000,0x20011000,0x30011000,
X0x20001004,0x30001004,0x20011004,0x30011004,
X0x00101000,0x10101000,0x00111000,0x10111000,
X0x00101004,0x10101004,0x00111004,0x10111004,
X0x20101000,0x30101000,0x20111000,0x30111000,
X0x20101004,0x30101004,0x20111004,0x30111004,
X/* for D bits (numbered as per FIPS 46) 8 9 11 12 13 14 */
X0x00000000,0x08000000,0x00000008,0x08000008,
X0x00000400,0x08000400,0x00000408,0x08000408,
X0x00020000,0x08020000,0x00020008,0x08020008,
X0x00020400,0x08020400,0x00020408,0x08020408,
X0x00000001,0x08000001,0x00000009,0x08000009,
X0x00000401,0x08000401,0x00000409,0x08000409,
X0x00020001,0x08020001,0x00020009,0x08020009,
X0x00020401,0x08020401,0x00020409,0x08020409,
X0x02000000,0x0A000000,0x02000008,0x0A000008,
X0x02000400,0x0A000400,0x02000408,0x0A000408,
X0x02020000,0x0A020000,0x02020008,0x0A020008,
X0x02020400,0x0A020400,0x02020408,0x0A020408,
X0x02000001,0x0A000001,0x02000009,0x0A000009,
X0x02000401,0x0A000401,0x02000409,0x0A000409,
X0x02020001,0x0A020001,0x02020009,0x0A020009,
X0x02020401,0x0A020401,0x02020409,0x0A020409,
X/* for D bits (numbered as per FIPS 46) 16 17 18 19 20 21 */
X0x00000000,0x00000100,0x00080000,0x00080100,
X0x01000000,0x01000100,0x01080000,0x01080100,
X0x00000010,0x00000110,0x00080010,0x00080110,
X0x01000010,0x01000110,0x01080010,0x01080110,
X0x00200000,0x00200100,0x00280000,0x00280100,
X0x01200000,0x01200100,0x01280000,0x01280100,
X0x00200010,0x00200110,0x00280010,0x00280110,
X0x01200010,0x01200110,0x01280010,0x01280110,
X0x00000200,0x00000300,0x00080200,0x00080300,
X0x01000200,0x01000300,0x01080200,0x01080300,
X0x00000210,0x00000310,0x00080210,0x00080310,
X0x01000210,0x01000310,0x01080210,0x01080310,
X0x00200200,0x00200300,0x00280200,0x00280300,
X0x01200200,0x01200300,0x01280200,0x01280300,
X0x00200210,0x00200310,0x00280210,0x00280310,
X0x01200210,0x01200310,0x01280210,0x01280310,
X/* for D bits (numbered as per FIPS 46) 22 23 24 25 27 28 */
X0x00000000,0x04000000,0x00040000,0x04040000,
X0x00000002,0x04000002,0x00040002,0x04040002,
X0x00002000,0x04002000,0x00042000,0x04042000,
X0x00002002,0x04002002,0x00042002,0x04042002,
X0x00000020,0x04000020,0x00040020,0x04040020,
X0x00000022,0x04000022,0x00040022,0x04040022,
X0x00002020,0x04002020,0x00042020,0x04042020,
X0x00002022,0x04002022,0x00042022,0x04042022,
X0x00000800,0x04000800,0x00040800,0x04040800,
X0x00000802,0x04000802,0x00040802,0x04040802,
X0x00002800,0x04002800,0x00042800,0x04042800,
X0x00002802,0x04002802,0x00042802,0x04042802,
X0x00000820,0x04000820,0x00040820,0x04040820,
X0x00000822,0x04000822,0x00040822,0x04040822,
X0x00002820,0x04002820,0x00042820,0x04042820,
X0x00002822,0x04002822,0x00042822,0x04042822,
X};
X
X/* See ecb_encrypt.c for a pseudo description of these macros. */
X#define PERM_OP(a,b,t,n,m) ((t)=((((a)>>(n))^(b))&(m)),\
X	(b)^=(t),\
X	(a)^=((t)<<(n)))
X
X#define HPERM_OP(a,t,n,m) ((t)=((((a)<<(16-(n)))^(a))&(m)),\
X	(a)=(a)^(t)^(t>>(16-(n))))\
X
Xstatic char shifts2[16]={0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0};
X
Xstatic int body();
X
Xstatic int des_set_key(key,schedule)
Xdes_cblock *key;
Xdes_key_schedule schedule;
X	{
X	register unsigned long c,d,t,s;
X	register unsigned char *in;
X	unsigned long *k;
X	register int i;
X
X	k=(unsigned long *)schedule;
X	in=(uchar *)key;
X
X	c2l(in,c);
X	c2l(in,d);
X
X	/* do PC1 in 60 simple operations */ 
X	PERM_OP(d,c,t,4,0x0f0f0f0f);
X	HPERM_OP(c,t,-2, 0xcccc0000);
X	HPERM_OP(c,t,-1, 0xaaaa0000);
X	HPERM_OP(c,t, 8, 0x00ff0000);
X	HPERM_OP(c,t,-1, 0xaaaa0000);
X	HPERM_OP(d,t,-8, 0xff000000);
X	HPERM_OP(d,t, 8, 0x00ff0000);
X	HPERM_OP(d,t, 2, 0x33330000);
X	d=((d&0x00aa00aa)<<7)|((d&0x55005500)>>7)|(d&0xaa55aa55);
X	d=(d>>8)|((c&0xf0000000)>>4);
X	c&=0x0fffffff;
X
X	for (i=0; i<ITERATIONS; i++)
X		{
X		if (shifts2[i])
X			{ c=((c>>2)|(c<<26)); d=((d>>2)|(d<<26)); }
X		else
X			{ c=((c>>1)|(c<<27)); d=((d>>1)|(d<<27)); }
X		c&=0x0fffffff;
X		d&=0x0fffffff;
X		/* could be a few less shifts but I am to lazy at this
X		 * point in time to investigate */
X		s=	skb[0][ (c    )&0x3f                ]|
X			skb[1][((c>> 6)&0x03)|((c>> 7)&0x3c)]|
X			skb[2][((c>>13)&0x0f)|((c>>14)&0x30)]|
X			skb[3][((c>>20)&0x01)|((c>>21)&0x06) |
X			                      ((c>>22)&0x38)];
X		t=	skb[4][ (d    )&0x3f                ]|
X			skb[5][((d>> 7)&0x03)|((d>> 8)&0x3c)]|
X			skb[6][ (d>>15)&0x3f                ]|
X			skb[7][((d>>21)&0x0f)|((d>>22)&0x30)];
X
X		/* table contained 0213 4657 */
X		*(k++)=((t<<16)|(s&0x0000ffff));
X		s=     ((s>>16)|(t&0xffff0000));
X		
X		s=(s<<4)|(s>>28);
X		*(k++)=s;
X		}
X	return(0);
X	}
X
X/******************************************************************
X * modified stuff for crypt.
X ******************************************************************/
X
X#define D_ENCRYPT(L,R,S)	\
X	t=(R<<1)|(R>>31); \
X	v=(t^(t>>16)); \
X	u=(v&E0); \
X	v=(v&E1); \
X	u=(u^(u<<16))^t^s[S  ]; \
X	t=(v^(v<<16))^t^s[S+1]; \
X	t=(t>>4)|(t<<28); \
X	L^=	SPtrans[1][(t    )&0x3f]| \
X		SPtrans[3][(t>> 8)&0x3f]| \
X		SPtrans[5][(t>>16)&0x3f]| \
X		SPtrans[7][(t>>24)&0x3f]| \
X		SPtrans[0][(u    )&0x3f]| \
X		SPtrans[2][(u>> 8)&0x3f]| \
X		SPtrans[4][(u>>16)&0x3f]| \
X		SPtrans[6][(u>>24)&0x3f];
X
X#define PERM_OP(a,b,t,n,m) ((t)=((((a)>>(n))^(b))&(m)),\
X	(b)^=(t),\
X	(a)^=((t)<<(n)))
X
Xuchar con_salt[128]={
X0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
X0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,
X0x0A,0x0B,0x05,0x06,0x07,0x08,0x09,0x0A,
X0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,
X0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,
X0x1B,0x1C,0x1D,0x1E,0x1F,0x20,0x21,0x22,
X0x23,0x24,0x25,0x20,0x21,0x22,0x23,0x24,
X0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,
X0x2D,0x2E,0x2F,0x30,0x31,0x32,0x33,0x34,
X0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,
X0x3D,0x3E,0x3F,0x00,0x00,0x00,0x00,0x00,
X};
X
Xuchar cov_2char[64]={
X0x2E,0x2F,0x30,0x31,0x32,0x33,0x34,0x35,
X0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,
X0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,
X0x4D,0x4E,0x4F,0x50,0x51,0x52,0x53,0x54,
X0x55,0x56,0x57,0x58,0x59,0x5A,0x61,0x62,
X0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,
X0x6B,0x6C,0x6D,0x6E,0x6F,0x70,0x71,0x72,
X0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A
X};
X
Xchar *crypt(buf,salt)
Xchar *buf;
Xchar *salt;
X	{
X	unsigned int i,j,k,x,y;
X	ulong Eswap0=0,Eswap1=0;
X	ulong out[2],ll;
X	des_cblock key;
X	des_key_schedule ks;
X	static uchar buff[20];
X	uchar bb[9];
X	uchar *b=bb;
X	uchar c,u;
X
X	x=buff[0]=salt[0];
X	Eswap0=con_salt[x];
X	x=buff[1]=salt[1];
X	Eswap1=con_salt[x]<<4;
X
X	for (i=0; i<8; i++)
X		{
X		c= *(buf++);
X		if (!c) break;
X		key[i]=(c<<1);
X		}
X	for (; i<8; i++)
X		key[i]=0;
X
X	des_set_key((des_cblock *)(key),ks);
X	body(&out[0],&out[1],ks,Eswap0,Eswap1);
X
X	ll=out[0]; l2c(ll,b);
X	ll=out[1]; l2c(ll,b);
X	y=0;
X	u=0x80;
X	bb[8]=0;
X	for (i=2; i<13; i++)
X		{
X		c=0;
X		for (j=0; j<6; j++)
X			{
X			c<<=1;
X			if (bb[y] & u) c|=1;
X			u>>=1;
X			if (!u)
X				{
X				y++;
X				u=0x80;
X				}
X			}
X		buff[i]=cov_2char[c];
X		}
X	return((char *)buff);
X	}
X
Xstatic int body(out0,out1,ks,Eswap0,Eswap1)
Xulong *out0,*out1;
Xdes_key_schedule *ks;
Xulong Eswap0,Eswap1;
X	{
X	register unsigned long l,r,t,u,v;
X	register unsigned long *s;
X	register int i,j;
X	register unsigned long E0,E1;
X
X	l=0;
X	r=0;
X
X	s=(ulong *)ks;
X	E0=Eswap0;
X	E1=Eswap1;
X
X	for (j=0; j<25; j++)
X		{
X		for (i=0; i<(ITERATIONS*2); i+=4)
X			{
X			D_ENCRYPT(l,r,  i);	/*  1 */
X			D_ENCRYPT(r,l,  i+2);	/*  2 */
X			}
X		t=l;
X		l=r;
X		r=t;
X		}
X	t=l;
X	l=r;
X	r=t;
X	PERM_OP(r,l,t, 1,0x55555555);
X	PERM_OP(l,r,t, 8,0x00ff00ff);
X	PERM_OP(r,l,t, 2,0x33333333);
X	PERM_OP(l,r,t,16,0x0000ffff);
X	PERM_OP(r,l,t, 4,0x0f0f0f0f);
X
X	*out0=l;
X	*out1=r;
X	return(0);
X	}
END_OF_FILE
if test 18467 -ne `wc -c <'fcrypt.c'`; then
    echo shar: \"'fcrypt.c'\" unpacked with wrong size!
fi
# end of 'fcrypt.c'
fi
echo shar: End of archive 3 \(of 4\).
cp /dev/null ark3isdone
MISSING=""
for I in 1 2 3 4 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 4 archives.
    rm -f ark[1-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
exit 0 # Just in case...
