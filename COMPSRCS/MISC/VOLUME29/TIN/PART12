Newsgroups: comp.sources.misc
From: iain%anl433.uucp@germany.eu.net (Iain J. Lea)
Subject:  v29i030:  tin - threaded full screen newsreader v1.1P1, Part12/12
Message-ID: <1992Mar27.034007.3769@sparky.imd.sterling.com>
X-Md4-Signature: 6db157ea46fa2c4c5f57b0c4046edc82
Date: Fri, 27 Mar 1992 03:40:07 GMT
Approved: kent@sparky.imd.sterling.com

Submitted-by: iain%anl433.uucp@germany.eu.net (Iain J. Lea)
Posting-number: Volume 29, Issue 30
Archive-name: tin/part12
Environment: BSD, SCO, ISC, SUNOS, SYSVR3, SYSVR4, ULTRIX, XENIX
Supersedes: tin: Volume 28, Issue 45-55

#!/bin/sh
# this is tin.shar.12 (part 12 of tin1.1)
# do not concatenate these parts, unpack them in order with /bin/sh
# file nntp.h continued
#
if test ! -r _shar_seq_.tmp; then
	echo 'Please unpack part 1 first!'
	exit 1
fi
(read Scheck
 if test "$Scheck" != 12; then
	echo Please unpack part "$Scheck" next!
	exit 1
 else
	exit 0
 fi
) < _shar_seq_.tmp || exit 1
if test ! -f _shar_wnt_.tmp; then
	echo 'x - still skipping nntp.h'
else
echo 'x - continuing file nntp.h'
sed 's/^X//' << 'SHAR_EOF' >> 'nntp.h' &&
#define	ERR_CMDSYN		501	/* Command syntax error */
#define	ERR_ACCESS		502	/* Access to server denied */
#define ERR_FAULT		503	/* Program fault, command not performed */
X	
/*
X * RFC 977 defines this; don't change it.
X */
X
#define	NNTP_STRLEN		512
X
SHAR_EOF
echo 'File nntp.h is complete' &&
chmod 0600 nntp.h ||
echo 'restore of nntp.h failed'
Wc_c="`wc -c < 'nntp.h'`"
test 3725 -eq "$Wc_c" ||
	echo 'nntp.h: original size 3725, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= proto.h ==============
if test -f 'proto.h' -a X"$1" != X"-c"; then
	echo 'x - skipping proto.h (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting proto.h (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'proto.h' &&
#if __STDC__
X 
/* active.c */
extern void resync_active_file(void);
extern int read_active_file(void);
extern int backup_active(int create);
extern void notify_groups(void);
/* art.c */
extern void find_base(int only_unread);
extern int num_of_arts(void);
extern int valid_artnum(long art);
extern int purge_needed(void);
extern void index_group(char *group, char *group_path);
extern int read_group(char *group, char *group_path);
extern void make_threads(int rethread);
extern int parse_headers(int fd, struct article_t *h);
extern void dump_index_file(char *group, int killed);
extern int load_index_file(char *group_name);
extern void find_index_file(char *group);
extern void do_update(void);
extern void reload_index_file(char *group, int killed);
extern char *parse_date(char *date, char *str);
extern int artnum_comp(char *p1, char *p2);
extern int subj_comp(char *p1, char *p2);
extern int from_comp(char *p1, char *p2);
extern int date_comp(char *p1, char *p2);
extern void set_article(struct article_t *art);
/* curses.c */
extern int InitScreen(void);
extern void ScreenSize(int *num_lines, int *num_columns);
extern void InitWin(void);
extern void EndWin(void);
extern void ClearScreen(void);
extern void MoveCursor(int row, int col);
extern void CleartoEOLN(void);
extern void CleartoEOS(void);
extern void StartInverse(void);
extern void EndInverse(void);
extern int RawState(void);
extern void Raw(int state);
extern int ReadCh(void);
extern int outchar(int c);
/* debug.c */
extern void debug_nntp(char *func, char *line);
extern void debug_nntp_respcode(int respcode);
extern void debug_print_arts(void);
extern void debug_print_header(struct article_t *s);
extern void debug_print_comment(char *comment);
extern void debug_print_base(void);
extern void debug_print_active(void);
/* feed.c */
extern void feed_articles(int function, int level, char *prompt, int respnum, char *group_path);
extern void print_file(FILE *fp, int respnum, int count);
/* getline.c */
extern char *getline(char *prompt, int number_only, char *str);
/* group.c */
extern void group_page(char *group);
extern void fix_new_highest(int groupnum);
extern void show_group_page(char *group);
extern void draw_subject_arrow(void);
extern void erase_subject_arrow(void);
extern int prompt_subject_num(int ch, char *group);
extern void clear_note_area(void);
extern int find_new_pos(int old_top, long old_artnum, int cur_pos);
extern void mark_screen(int col, char *value);
/* hashstr.c */
extern char *hash_str(char *s);
extern struct hashnode *add_string(char *s);
extern void hash_init(void);
extern void hash_reclaim(void);
/* help.c */
extern void show_info_page(int type, char *help[], char *title);
/* inews.c */
extern int submit_inews(char *name);
/* init.c */
extern void init_selfinfo(void);
extern int create_mail_save_dirs(void);
/* kill.c */
extern int read_kill_file(void);
extern void write_kill_file(void);
extern int kill_art_menu(char *group_name, int index);
extern int unkill_all_articles(void);
extern int kill_any_articles(char *group);
/* lang.c */
/* main.c */
extern void main(int argc, char *argv[]);
extern void read_cmd_line_options(int argc, char *argv[]);
extern void usage(char *progname);
extern int check_for_any_new_news(int check_any_unread, int start_any_unread);
extern void save_or_mail_new_news(void);
extern void update_index_files(void);
extern void show_intro_page(void);
/* memory.c */
extern void init_alloc(void);
extern void expand_art(void);
extern void expand_active(void);
extern void expand_kill(void);
extern void expand_save(void);
extern void init_screen_array(int allocate);
extern void free_all_arrays(void);
extern void free_art_array(void);
extern void free_active_arrays(void);
extern void free_kill_array(void);
extern void free_save_array(void);
extern char *my_malloc(unsigned size);
extern char *my_realloc(char *p, unsigned size);
/* misc.c */
extern void asfail(char *file, int line, char *cond);
extern void copy_fp(FILE *fp_ip, FILE *fp_op, char *prefix);
extern char *get_val(char *env, char *def);
extern int invoke_editor(char *nam);
extern void shell_escape(void);
extern void tin_done(int ret);
extern void mark_unthreaded_groups(void);
extern long hash_groupname(char *group);
extern void rename_file(char *old_filename, char *new_filename);
extern char *str_dup(char *str);
extern int invoke_cmd(char *nam);
extern void draw_percent_mark(int cur_num, int max_num);
extern void set_real_uid_gid(void);
extern void set_tin_uid_gid(void);
extern void basename(char *dirname, char *program);
extern void mail_setup(void);
extern int mail_check(void);
extern void parse_from(char *str, char *addr, char *name);
extern long my_atol(char *s, int n);
extern char *eat_re(char *s);
extern long hash_s(char *s);
extern void my_strncpy(char *p, char *q, int n);
extern int untag_all_articles(void);
extern char *str_str(char *text, char *pattern, int patlen);
extern void get_author(int thread, int respnum, char *str);
extern void toggle_inverse_video(void);
extern int get_arrow_key(void);
/* newsrc.c */
extern int auto_subscribe_groups(void);
extern void backup_newsrc(void);
extern void read_newsrc(int sub_only);
extern void write_newsrc(void);
extern void rewrite_newsrc(void);
extern void read_newsrc_line(char *group);
extern void update_newsrc(char *group, int groupnum, int mark_unread);
extern void subscribe(char *group, int ch, int num, int out_seq);
extern void reset_newsrc(void);
extern void delete_group(char *group);
extern int undel_group(void);
extern void mark_group_read(char *group, int groupnum);
extern void parse_seq(char *s);
extern int parse_unread(char *s, int groupnum);
extern int get_line_unread(char *group, int groupnum);
extern void print_seq(FILE *fp, int groupnum);
extern int pos_group_in_newsrc(char *group, int pos);
extern void mark_all_xref_read(char *xref_line);
/* open.c */
extern char *is_remote(void);
extern void nntp_startup(void);
extern void nntp_finish(void);
extern FILE *open_active_fp(void);
extern FILE *open_subscription_fp(void);
extern FILE *open_index_fp(char *group_name);
extern FILE *open_art_fp(char *group_path, long art);
extern int open_header_fd(char *group_path, long art);
extern int base_comp(char *p1, char *p2);
extern void setup_base(char *group, char *group_path);
extern int get_respcode(void);
extern int stuff_nntp(char *fnam);
extern FILE *nntp_to_fp(void);
extern int nntp_to_fd(void);
extern void log_user(void);
extern char *nntp_respcode(int respcode);
/* page.c */
extern int show_page(int respnum, char *group, char *group_path);
extern void redraw_page(int respnum, char *group);
extern void show_note_page(int respnum, char *group);
extern void show_first_header(int respnum, char *group);
extern void show_cont_header(int respnum);
extern int art_open(long art, char *group_path);
extern void art_close(void);
extern int prompt_response(int ch, int respnum);
extern void yank_to_addr(char *orig, char *addr);
extern int show_last_page(void);
extern int match_header(char *buf, char *pat, char *body, int len);
/* post.c */
extern int user_posted_messages(void);
extern void update_art_posted_file(char *group, char *subj);
extern int post_base(char *group, int *posted);
extern int post_response(char *group, int respnum, int copy_text);
extern int mail_to_someone(char *address, int confirm_to_mail);
extern int mail_bug_report(void);
extern int mail_to_author(int respnum, int copy_text);
extern void find_mail_header(int header, char *file, char *value);
extern int cancel_article(void);
extern int submit_file(char *name);
extern void add_signature(FILE *fp, int flag);
/* prompt.c */
extern int prompt_num(int ch, char *prompt);
extern int prompt_string(char *prompt, char *buf);
extern int prompt_menu_string(int line, int col, char *var);
extern int prompt_yn(int line, char *prompt, int default_ch);
extern void prompt_on_off(int row, int col, int *var, char *help_text, char *prompt_text);
extern void continue_prompt(void);
/* rcfile.c */
extern int read_rcfile(void);
extern void write_rcfile(void);
extern int change_rcfile(char *group, int kill_at_once);
extern void show_rcfile_menu(void);
extern void expand_rel_abs_pathname(int line, int col, char *str);
extern void show_menu_help(char *help_message);
/* save.c */
extern int check_start_save_any_news(int check_start_save);
extern int save_art_to_file(int respnum, int index, int mailbox, char *filename);
extern int save_thread_to_file(int is_mailbox, char *group_path);
extern int save_regex_arts(int is_mailbox, char *group_path);
extern int append_to_existing_file(int i);
extern int create_path(char *path);
extern int create_sub_dir(int i);
extern void add_to_save_list(int index, struct article_t *article, int is_mailbox, char *path);
extern void sort_save_list(void);
extern int save_comp(char *p1, char *p2);
extern char *save_filename(int i);
extern char *get_first_savefile(void);
extern char *get_last_savefile(void);
extern int post_process_files(int proc_type_ch);
extern void post_process_uud(int pp);
extern void post_process_sh(void);
extern char *get_archive_file(char *dir, char *ext);
extern void delete_processed_files(void);
/* screen.c */
extern void info_message(char *str);
extern void wait_message(char *str);
extern void error_message(char *template, char *str);
extern void clear_message(void);
extern void center_line(int line, int inverse, char *str);
extern void draw_arrow(int line);
extern void erase_arrow(int line);
extern void show_title(char *title);
extern void ring_bell(void);
/* search.c */
extern int search_author(int only_unread, int current_art, int forward);
extern void search_group(int forward);
extern void search_subject(int forward, char *group);
extern int search_article(int forward);
extern void make_lower(char *s, char *t);
/* select.c */
extern void selection_index(int start_groupnum);
extern void group_selection_page(void);
extern int prompt_group_num(int ch);
extern void erase_group_arrow(void);
extern void draw_group_arrow(void);
extern int choose_new_group(void);
extern int add_group(char *s, int get_unread);
extern int reposition_group(char *group, int default_num);
extern void catchup_group(int goto_next_unread_group);
extern void next_unread_group(int enter_group);
/* signal.c */
extern void set_signal_handlers(void);
extern void set_alarm_signal(void);
extern void signal_handler(int sig);
extern void set_win_size(int *num_lines, int *num_cols);
extern void set_signals_art(void);
extern void set_signals_group(void);
extern void set_signals_page(void);
extern void set_signals_select(void);
extern void set_signals_thread(void);
extern void art_suspend(int sig);
extern void main_suspend(int sig);
extern void select_suspend(int sig);
extern void group_suspend(int sig);
extern void page_suspend(int sig);
extern void thread_suspend(int sig);
extern void rcfile_suspend(int sig);
extern void art_resize(int sig);
extern void main_resize(int sig);
extern void select_resize(int sig);
extern void group_resize(int sig);
extern void page_resize(int sig);
extern void thread_resize(int sig);
/* thread.c */
extern int show_thread(int respnum, char *group, char *group_path);
extern void show_thread_page(void);
extern void draw_thread_arrow(void);
extern void erase_thread_arrow(void);
extern int prompt_thread_num(int ch);
extern int new_responses(int thread);
extern int which_thread(int n);
extern int which_response(int n);
extern int num_of_responses(int n);
extern int next_response(int n);
extern int next_thread(int n);
extern int prev_response(int n);
extern int choose_response(int i, int n);
extern int next_unread(int n);
extern int prev_unread(int n);
/* wildmat.c */
extern int wildmat(char *text, char *p);
X 
#else
X 
/* active.c */
extern void resync_active_file(/*void*/);
extern int read_active_file(/*void*/);
extern int backup_active(/*int create*/);
extern void notify_groups(/*void*/);
/* art.c */
extern void find_base(/*int only_unread*/);
extern int num_of_arts(/*void*/);
extern int valid_artnum(/*long art*/);
extern int purge_needed(/*void*/);
extern void index_group(/*char *group, char *group_path*/);
extern int read_group(/*char *group, char *group_path*/);
extern void make_threads(/*int rethread*/);
extern int parse_headers(/*int fd, struct article_t *h*/);
extern void dump_index_file(/*char *group, int killed*/);
extern int load_index_file(/*char *group_name*/);
extern void find_index_file(/*char *group*/);
extern void do_update(/*void*/);
extern void reload_index_file(/*char *group, int killed*/);
extern char *parse_date(/*char *date, char *str*/);
extern int artnum_comp(/*char *p1, char *p2*/);
extern int subj_comp(/*char *p1, char *p2*/);
extern int from_comp(/*char *p1, char *p2*/);
extern int date_comp(/*char *p1, char *p2*/);
extern void set_article(/*struct article_t *art*/);
/* curses.c */
extern int InitScreen(/*void*/);
extern void ScreenSize(/*int *num_lines, int *num_columns*/);
extern void InitWin(/*void*/);
extern void EndWin(/*void*/);
extern void ClearScreen(/*void*/);
extern void MoveCursor(/*int row, int col*/);
extern void CleartoEOLN(/*void*/);
extern void CleartoEOS(/*void*/);
extern void StartInverse(/*void*/);
extern void EndInverse(/*void*/);
extern int RawState(/*void*/);
extern void Raw(/*int state*/);
extern int ReadCh(/*void*/);
extern int outchar(/*int c*/);
/* debug.c */
extern void debug_nntp(/*char *func, char *line*/);
extern void debug_nntp_respcode(/*int respcode*/);
extern void debug_print_arts(/*void*/);
extern void debug_print_header(/*struct article_t *s*/);
extern void debug_print_comment(/*char *comment*/);
extern void debug_print_base(/*void*/);
extern void debug_print_active(/*void*/);
/* feed.c */
extern void feed_articles(/*int function, int level, char *prompt, int respnum, char *group_path*/);
extern void print_file(/*FILE *fp, int respnum, int count*/);
/* getline.c */
extern char *getline(/*char *prompt, int number_only, char *str*/);
/* group.c */
extern void group_page(/*char *group*/);
extern void fix_new_highest(/*int groupnum*/);
extern void show_group_page(/*char *group*/);
extern void draw_subject_arrow(/*void*/);
extern void erase_subject_arrow(/*void*/);
extern int prompt_subject_num(/*int ch, char *group*/);
extern void clear_note_area(/*void*/);
extern int find_new_pos(/*int old_top, long old_artnum, int cur_pos*/);
extern void mark_screen(/*int col, char *value*/);
/* hashstr.c */
extern char *hash_str(/*char *s*/);
extern struct hashnode *add_string(/*char *s*/);
extern void hash_init(/*void*/);
extern void hash_reclaim(/*void*/);
/* help.c */
extern void show_info_page(/*int type, char *help[], char *title*/);
/* inews.c */
extern int submit_inews(/*char *name*/);
/* init.c */
extern void init_selfinfo(/*void*/);
extern int create_mail_save_dirs(/*void*/);
/* kill.c */
extern int read_kill_file(/*void*/);
extern void write_kill_file(/*void*/);
extern int kill_art_menu(/*char *group_name, int index*/);
extern int unkill_all_articles(/*void*/);
extern int kill_any_articles(/*char *group*/);
/* lang.c */
/* main.c */
extern void main(/*int argc, char *argv[]*/);
extern void read_cmd_line_options(/*int argc, char *argv[]*/);
extern void usage(/*char *progname*/);
extern int check_for_any_new_news(/*int check_any_unread, int start_any_unread*/);
extern void save_or_mail_new_news(/*void*/);
extern void update_index_files(/*void*/);
extern void show_intro_page(/*void*/);
/* memory.c */
extern void init_alloc(/*void*/);
extern void expand_art(/*void*/);
extern void expand_active(/*void*/);
extern void expand_kill(/*void*/);
extern void expand_save(/*void*/);
extern void init_screen_array(/*int allocate*/);
extern void free_all_arrays(/*void*/);
extern void free_art_array(/*void*/);
extern void free_active_arrays(/*void*/);
extern void free_kill_array(/*void*/);
extern void free_save_array(/*void*/);
extern char *my_malloc(/*unsigned size*/);
extern char *my_realloc(/*char *p, unsigned size*/);
/* misc.c */
extern void asfail(/*char *file, int line, char *cond*/);
extern void copy_fp(/*FILE *fp_ip, FILE *fp_op, char *prefix*/);
extern char *get_val(/*char *env, char *def*/);
extern int invoke_editor(/*char *nam*/);
extern void shell_escape(/*void*/);
extern void tin_done(/*int ret*/);
extern void mark_unthreaded_groups(/*void*/);
extern long hash_groupname(/*char *group*/);
extern void rename_file(/*char *old_filename, char *new_filename*/);
extern char *str_dup(/*char *str*/);
extern int invoke_cmd(/*char *nam*/);
extern void draw_percent_mark(/*int cur_num, int max_num*/);
extern void set_real_uid_gid(/*void*/);
extern void set_tin_uid_gid(/*void*/);
extern void basename(/*char *dirname, char *program*/);
extern void mail_setup(/*void*/);
extern int mail_check(/*void*/);
extern void parse_from(/*char *str, char *addr, char *name*/);
extern long my_atol(/*char *s, int n*/);
extern char *eat_re(/*char *s*/);
extern long hash_s(/*char *s*/);
extern void my_strncpy(/*char *p, char *q, int n*/);
extern int untag_all_articles(/*void*/);
extern char *str_str(/*char *text, char *pattern, int patlen*/);
extern void get_author(/*int thread, int respnum, char *str*/);
extern void toggle_inverse_video(/*void*/);
extern int get_arrow_key(/*void*/);
/* newsrc.c */
extern int auto_subscribe_groups(/*void*/);
extern void backup_newsrc(/*void*/);
extern void read_newsrc(/*int sub_only*/);
extern void write_newsrc(/*void*/);
extern void rewrite_newsrc(/*void*/);
extern void read_newsrc_line(/*char *group*/);
extern void update_newsrc(/*char *group, int groupnum, int mark_unread*/);
extern void subscribe(/*char *group, int ch, int num, int out_seq*/);
extern void reset_newsrc(/*void*/);
extern void delete_group(/*char *group*/);
extern int undel_group(/*void*/);
extern void mark_group_read(/*char *group, int groupnum*/);
extern void parse_seq(/*char *s*/);
extern int parse_unread(/*char *s, int groupnum*/);
extern int get_line_unread(/*char *group, int groupnum*/);
extern void print_seq(/*FILE *fp, int groupnum*/);
extern int pos_group_in_newsrc(/*char *group, int pos*/);
extern void mark_all_xref_read(/*char *xref_line*/);
/* open.c */
extern char *is_remote(/*void*/);
extern void nntp_startup(/*void*/);
extern void nntp_finish(/*void*/);
extern FILE *open_active_fp(/*void*/);
extern FILE *open_subscription_fp(/*void*/);
extern FILE *open_index_fp(/*char *group_name*/);
extern FILE *open_art_fp(/*char *group_path, long art*/);
extern int open_header_fd(/*char *group_path, long art*/);
extern int base_comp(/*char *p1, char *p2*/);
extern void setup_base(/*char *group, char *group_path*/);
extern int get_respcode(/*void*/);
extern int stuff_nntp(/*char *fnam*/);
extern FILE *nntp_to_fp(/*void*/);
extern int nntp_to_fd(/*void*/);
extern void log_user(/*void*/);
extern char *nntp_respcode(/*int respcode*/);
/* page.c */
extern int show_page(/*int respnum, char *group, char *group_path*/);
extern void redraw_page(/*int respnum, char *group*/);
extern void show_note_page(/*int respnum, char *group*/);
extern void show_first_header(/*int respnum, char *group*/);
extern void show_cont_header(/*int respnum*/);
extern int art_open(/*long art, char *group_path*/);
extern void art_close(/*void*/);
extern int prompt_response(/*int ch, int respnum*/);
extern void yank_to_addr(/*char *orig, char *addr*/);
extern int show_last_page(/*void*/);
extern int match_header(/*char *buf, char *pat, char *body, int len*/);
/* post.c */
extern int user_posted_messages(/*void*/);
extern void update_art_posted_file(/*char *group, char *subj*/);
extern int post_base(/*char *group, int *posted*/);
extern int post_response(/*char *group, int respnum, int copy_text*/);
extern int mail_to_someone(/*char *address, int confirm_to_mail*/);
extern int mail_bug_report(/*void*/);
extern int mail_to_author(/*int respnum, int copy_text*/);
extern void find_mail_header(/*int header, char *file, char *value*/);
extern int cancel_article(/*void*/);
extern int submit_file(/*char *name*/);
extern void add_signature(/*FILE *fp, int flag*/);
/* prompt.c */
extern int prompt_num(/*int ch, char *prompt*/);
extern int prompt_string(/*char *prompt, char *buf*/);
extern int prompt_menu_string(/*int line, int col, char *var*/);
extern int prompt_yn(/*int line, char *prompt, int default_ch*/);
extern void prompt_on_off(/*int row, int col, int *var, char *help_text, char *prompt_text*/);
extern void continue_prompt(/*void*/);
/* rcfile.c */
extern int read_rcfile(/*void*/);
extern void write_rcfile(/*void*/);
extern int change_rcfile(/*char *group, int kill_at_once*/);
extern void show_rcfile_menu(/*void*/);
extern void expand_rel_abs_pathname(/*int line, int col, char *str*/);
extern void show_menu_help(/*char *help_message*/);
/* save.c */
extern int check_start_save_any_news(/*int check_start_save*/);
extern int save_art_to_file(/*int respnum, int index, int mailbox, char *filename*/);
extern int save_thread_to_file(/*int is_mailbox, char *group_path*/);
extern int save_regex_arts(/*int is_mailbox, char *group_path*/);
extern int append_to_existing_file(/*int i*/);
extern int create_path(/*char *path*/);
extern int create_sub_dir(/*int i*/);
extern void add_to_save_list(/*int index, struct article_t *article, int is_mailbox, char *path*/);
extern void sort_save_list(/*void*/);
extern int save_comp(/*char *p1, char *p2*/);
extern char *save_filename(/*int i*/);
extern char *get_first_savefile(/*void*/);
extern char *get_last_savefile(/*void*/);
extern int post_process_files(/*int proc_type_ch*/);
extern void post_process_uud(/*int pp*/);
extern void post_process_sh(/*void*/);
extern char *get_archive_file(/*char *dir, char *ext*/);
extern void delete_processed_files(/*void*/);
/* screen.c */
extern void info_message(/*char *str*/);
extern void wait_message(/*char *str*/);
extern void error_message(/*char *template, char *str*/);
extern void clear_message(/*void*/);
extern void center_line(/*int line, int inverse, char *str*/);
extern void draw_arrow(/*int line*/);
extern void erase_arrow(/*int line*/);
extern void show_title(/*char *title*/);
extern void ring_bell(/*void*/);
/* search.c */
extern int search_author(/*int only_unread, int current_art, int forward*/);
extern void search_group(/*int forward*/);
extern void search_subject(/*int forward, char *group*/);
extern int search_article(/*int forward*/);
extern void make_lower(/*char *s, char *t*/);
/* select.c */
extern void selection_index(/*int start_groupnum*/);
extern void group_selection_page(/*void*/);
extern int prompt_group_num(/*int ch*/);
extern void erase_group_arrow(/*void*/);
extern void draw_group_arrow(/*void*/);
extern int choose_new_group(/*void*/);
extern int add_group(/*char *s, int get_unread*/);
extern int reposition_group(/*char *group, int default_num*/);
extern void catchup_group(/*int goto_next_unread_group*/);
extern void next_unread_group(/*int enter_group*/);
/* signal.c */
extern void set_signal_handlers(/*void*/);
extern void set_alarm_signal(/*void*/);
extern void signal_handler(/*int sig*/);
extern void set_win_size(/*int *num_lines, int *num_cols*/);
extern void set_signals_art(/*void*/);
extern void set_signals_group(/*void*/);
extern void set_signals_page(/*void*/);
extern void set_signals_select(/*void*/);
extern void set_signals_thread(/*void*/);
extern void art_suspend(/*int sig*/);
extern void main_suspend(/*int sig*/);
extern void select_suspend(/*int sig*/);
extern void group_suspend(/*int sig*/);
extern void page_suspend(/*int sig*/);
extern void thread_suspend(/*int sig*/);
extern void rcfile_suspend(/*int sig*/);
extern void art_resize(/*int sig*/);
extern void main_resize(/*int sig*/);
extern void select_resize(/*int sig*/);
extern void group_resize(/*int sig*/);
extern void page_resize(/*int sig*/);
extern void thread_resize(/*int sig*/);
/* thread.c */
extern int show_thread(/*int respnum, char *group, char *group_path*/);
extern void show_thread_page(/*void*/);
extern void draw_thread_arrow(/*void*/);
extern void erase_thread_arrow(/*void*/);
extern int prompt_thread_num(/*int ch*/);
extern int new_responses(/*int thread*/);
extern int which_thread(/*int n*/);
extern int which_response(/*int n*/);
extern int num_of_responses(/*int n*/);
extern int next_response(/*int n*/);
extern int next_thread(/*int n*/);
extern int prev_response(/*int n*/);
extern int choose_response(/*int i, int n*/);
extern int next_unread(/*int n*/);
extern int prev_unread(/*int n*/);
/* wildmat.c */
extern int wildmat(/*char *text, char *p*/);
X 
#endif
SHAR_EOF
chmod 0600 proto.h ||
echo 'restore of proto.h failed'
Wc_c="`wc -c < 'proto.h'`"
test 24466 -eq "$Wc_c" ||
	echo 'proto.h: original size 24466, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= patchlev.h ==============
if test -f 'patchlev.h' -a X"$1" != X"-c"; then
	echo 'x - skipping patchlev.h (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting patchlev.h (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'patchlev.h' &&
/*
X *  Project   : tin - a threaded Netnews reader
X *  Module    : patchlev.h
X *  Author    : I.Lea
X *  Created   : 01-04-91
X *  Updated   : 22-03-92
X *  Notes     :
X *  Copyright : (c) Copyright 1991-92 by Iain Lea
X *              You may  freely  copy or  redistribute  this software,
X *              so  long as there is no profit made from its use, sale
X *              trade or  reproduction.  You may not change this copy-
X *              right notice, and it must be included in any copy made
X */
X
#define VERSION		"1.1"	/* Beta versions are "1.n Beta" */
#define PATCHLEVEL	1
SHAR_EOF
chmod 0600 patchlev.h ||
echo 'restore of patchlev.h failed'
Wc_c="`wc -c < 'patchlev.h'`"
test 584 -eq "$Wc_c" ||
	echo 'patchlev.h: original size 584, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
rm -f _shar_seq_.tmp
echo You have unpacked the last part
exit 0

--
NAME   Iain Lea 
EMAIL  iain%anl433.uucp@germany.eu.net
SNAIL  Siemens AG, ANL A433SZ, Gruendlacher Str. 248, 8510 Fuerth, Germany.
PHONE  +49-911-3089-407 (work) +49-911-331963 (home) +49-911-3089-290 (FAX)  
-- 
 Dr. med. dipl.-math Dieter Becker           Tel.: (0 / +49) 6841 - 16 3046
 Medizinische Universitaets- und Poliklinik  Fax.: (0 / +49) 6841 - 16 3369
 Innere Medizin III                         
 D - 6650 Homburg / Saar                     Email: becker@med-in.uni-sb.de
exit 0 # Just in case...
