Newsgroups: comp.sources.misc
From: stein.wbst129@xerox.com (Adam Stein)
Subject:  v29i056:  persim - Single-Layer Perceptron Simulator, Part03/03
Message-ID: <1992Apr5.025137.28435@sparky.imd.sterling.com>
X-Md4-Signature: 01f180e6aa35a9338af217a19e369277
Date: Sun, 5 Apr 1992 02:51:37 GMT
Approved: kent@sparky.imd.sterling.com

Submitted-by: stein.wbst129@xerox.com (Adam Stein)
Posting-number: Volume 29, Issue 56
Archive-name: persim/part03
Environment: BSD

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# Contents:  example1/desired1.asc example1/desired10.asc
#   example1/desired2.asc example1/desired3.asc example1/desired4.asc
#   example1/desired5.asc example1/desired6.asc example1/desired7.asc
#   example1/desired8.asc example1/desired9.asc example1/input1.asc
#   example1/input10.asc example1/input2.asc example1/input3.asc
#   example1/input4.asc example1/input5.asc example1/input6.asc
#   example1/input7.asc example1/input8.asc example1/input9.asc
#   example1/output1 example1/output10 example1/output6
#   example1/output7 example1/output8 example1/output9
#   example1/weights.asc example2/desired1.asc example2/desired10.asc
#   example2/desired2.asc example2/desired3.asc example2/desired4.asc
#   example2/desired5.asc example2/desired6.asc example2/desired7.asc
#   example2/desired8.asc example2/desired9.asc example2/input1.asc
#   example2/input10.asc example2/input2.asc example2/input3.asc
#   example2/input4.asc example2/input5.asc example2/input6.asc
#   example2/input7.asc example2/input8.asc example2/input9.asc
#   example2/output10 example2/output6 example2/output7
#   example2/output8 example2/output9 example2/weights.asc
# Wrapped by kent@sparky on Sat Apr  4 20:29:31 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 3 (of 3)."'
if test -f 'example1/desired1.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/desired1.asc'\"
else
  echo shar: Extracting \"'example1/desired1.asc'\" \(2 characters\)
  sed "s/^X//" >'example1/desired1.asc' <<'END_OF_FILE'
X1
END_OF_FILE
  if test 2 -ne `wc -c <'example1/desired1.asc'`; then
    echo shar: \"'example1/desired1.asc'\" unpacked with wrong size!
  fi
  # end of 'example1/desired1.asc'
fi
if test -f 'example1/desired10.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/desired10.asc'\"
else
  echo shar: Extracting \"'example1/desired10.asc'\" \(2 characters\)
  sed "s/^X//" >'example1/desired10.asc' <<'END_OF_FILE'
X1
END_OF_FILE
  if test 2 -ne `wc -c <'example1/desired10.asc'`; then
    echo shar: \"'example1/desired10.asc'\" unpacked with wrong size!
  fi
  # end of 'example1/desired10.asc'
fi
if test -f 'example1/desired2.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/desired2.asc'\"
else
  echo shar: Extracting \"'example1/desired2.asc'\" \(2 characters\)
  sed "s/^X//" >'example1/desired2.asc' <<'END_OF_FILE'
X1
END_OF_FILE
  if test 2 -ne `wc -c <'example1/desired2.asc'`; then
    echo shar: \"'example1/desired2.asc'\" unpacked with wrong size!
  fi
  # end of 'example1/desired2.asc'
fi
if test -f 'example1/desired3.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/desired3.asc'\"
else
  echo shar: Extracting \"'example1/desired3.asc'\" \(2 characters\)
  sed "s/^X//" >'example1/desired3.asc' <<'END_OF_FILE'
X1
END_OF_FILE
  if test 2 -ne `wc -c <'example1/desired3.asc'`; then
    echo shar: \"'example1/desired3.asc'\" unpacked with wrong size!
  fi
  # end of 'example1/desired3.asc'
fi
if test -f 'example1/desired4.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/desired4.asc'\"
else
  echo shar: Extracting \"'example1/desired4.asc'\" \(3 characters\)
  sed "s/^X//" >'example1/desired4.asc' <<'END_OF_FILE'
X-1
END_OF_FILE
  if test 3 -ne `wc -c <'example1/desired4.asc'`; then
    echo shar: \"'example1/desired4.asc'\" unpacked with wrong size!
  fi
  # end of 'example1/desired4.asc'
fi
if test -f 'example1/desired5.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/desired5.asc'\"
else
  echo shar: Extracting \"'example1/desired5.asc'\" \(2 characters\)
  sed "s/^X//" >'example1/desired5.asc' <<'END_OF_FILE'
X1
END_OF_FILE
  if test 2 -ne `wc -c <'example1/desired5.asc'`; then
    echo shar: \"'example1/desired5.asc'\" unpacked with wrong size!
  fi
  # end of 'example1/desired5.asc'
fi
if test -f 'example1/desired6.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/desired6.asc'\"
else
  echo shar: Extracting \"'example1/desired6.asc'\" \(2 characters\)
  sed "s/^X//" >'example1/desired6.asc' <<'END_OF_FILE'
X1
END_OF_FILE
  if test 2 -ne `wc -c <'example1/desired6.asc'`; then
    echo shar: \"'example1/desired6.asc'\" unpacked with wrong size!
  fi
  # end of 'example1/desired6.asc'
fi
if test -f 'example1/desired7.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/desired7.asc'\"
else
  echo shar: Extracting \"'example1/desired7.asc'\" \(2 characters\)
  sed "s/^X//" >'example1/desired7.asc' <<'END_OF_FILE'
X1
END_OF_FILE
  if test 2 -ne `wc -c <'example1/desired7.asc'`; then
    echo shar: \"'example1/desired7.asc'\" unpacked with wrong size!
  fi
  # end of 'example1/desired7.asc'
fi
if test -f 'example1/desired8.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/desired8.asc'\"
else
  echo shar: Extracting \"'example1/desired8.asc'\" \(3 characters\)
  sed "s/^X//" >'example1/desired8.asc' <<'END_OF_FILE'
X-1
END_OF_FILE
  if test 3 -ne `wc -c <'example1/desired8.asc'`; then
    echo shar: \"'example1/desired8.asc'\" unpacked with wrong size!
  fi
  # end of 'example1/desired8.asc'
fi
if test -f 'example1/desired9.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/desired9.asc'\"
else
  echo shar: Extracting \"'example1/desired9.asc'\" \(2 characters\)
  sed "s/^X//" >'example1/desired9.asc' <<'END_OF_FILE'
X1
END_OF_FILE
  if test 2 -ne `wc -c <'example1/desired9.asc'`; then
    echo shar: \"'example1/desired9.asc'\" unpacked with wrong size!
  fi
  # end of 'example1/desired9.asc'
fi
if test -f 'example1/input1.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/input1.asc'\"
else
  echo shar: Extracting \"'example1/input1.asc'\" \(22 characters\)
  sed "s/^X//" >'example1/input1.asc' <<'END_OF_FILE'
X1.0
X1.653669
X0.751830
END_OF_FILE
  if test 22 -ne `wc -c <'example1/input1.asc'`; then
    echo shar: \"'example1/input1.asc'\" unpacked with wrong size!
  fi
  # end of 'example1/input1.asc'
fi
if test -f 'example1/input10.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/input10.asc'\"
else
  echo shar: Extracting \"'example1/input10.asc'\" \(22 characters\)
  sed "s/^X//" >'example1/input10.asc' <<'END_OF_FILE'
X1.0
X1.287520
X0.845964
END_OF_FILE
  if test 22 -ne `wc -c <'example1/input10.asc'`; then
    echo shar: \"'example1/input10.asc'\" unpacked with wrong size!
  fi
  # end of 'example1/input10.asc'
fi
if test -f 'example1/input2.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/input2.asc'\"
else
  echo shar: Extracting \"'example1/input2.asc'\" \(22 characters\)
  sed "s/^X//" >'example1/input2.asc' <<'END_OF_FILE'
X1.0
X0.998680
X0.830797
END_OF_FILE
  if test 22 -ne `wc -c <'example1/input2.asc'`; then
    echo shar: \"'example1/input2.asc'\" unpacked with wrong size!
  fi
  # end of 'example1/input2.asc'
fi
if test -f 'example1/input3.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/input3.asc'\"
else
  echo shar: Extracting \"'example1/input3.asc'\" \(22 characters\)
  sed "s/^X//" >'example1/input3.asc' <<'END_OF_FILE'
X1.0
X0.593711
X1.569002
END_OF_FILE
  if test 22 -ne `wc -c <'example1/input3.asc'`; then
    echo shar: \"'example1/input3.asc'\" unpacked with wrong size!
  fi
  # end of 'example1/input3.asc'
fi
if test -f 'example1/input4.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/input4.asc'\"
else
  echo shar: Extracting \"'example1/input4.asc'\" \(22 characters\)
  sed "s/^X//" >'example1/input4.asc' <<'END_OF_FILE'
X1.0
X1.409324
X0.026516
END_OF_FILE
  if test 22 -ne `wc -c <'example1/input4.asc'`; then
    echo shar: \"'example1/input4.asc'\" unpacked with wrong size!
  fi
  # end of 'example1/input4.asc'
fi
if test -f 'example1/input5.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/input5.asc'\"
else
  echo shar: Extracting \"'example1/input5.asc'\" \(22 characters\)
  sed "s/^X//" >'example1/input5.asc' <<'END_OF_FILE'
X1.0
X1.644088
X1.192088
END_OF_FILE
  if test 22 -ne `wc -c <'example1/input5.asc'`; then
    echo shar: \"'example1/input5.asc'\" unpacked with wrong size!
  fi
  # end of 'example1/input5.asc'
fi
if test -f 'example1/input6.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/input6.asc'\"
else
  echo shar: Extracting \"'example1/input6.asc'\" \(22 characters\)
  sed "s/^X//" >'example1/input6.asc' <<'END_OF_FILE'
X1.0
X0.113405
X1.437829
END_OF_FILE
  if test 22 -ne `wc -c <'example1/input6.asc'`; then
    echo shar: \"'example1/input6.asc'\" unpacked with wrong size!
  fi
  # end of 'example1/input6.asc'
fi
if test -f 'example1/input7.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/input7.asc'\"
else
  echo shar: Extracting \"'example1/input7.asc'\" \(22 characters\)
  sed "s/^X//" >'example1/input7.asc' <<'END_OF_FILE'
X1.0
X0.908876
X1.642126
END_OF_FILE
  if test 22 -ne `wc -c <'example1/input7.asc'`; then
    echo shar: \"'example1/input7.asc'\" unpacked with wrong size!
  fi
  # end of 'example1/input7.asc'
fi
if test -f 'example1/input8.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/input8.asc'\"
else
  echo shar: Extracting \"'example1/input8.asc'\" \(22 characters\)
  sed "s/^X//" >'example1/input8.asc' <<'END_OF_FILE'
X1.0
X0.376715
X0.265278
END_OF_FILE
  if test 22 -ne `wc -c <'example1/input8.asc'`; then
    echo shar: \"'example1/input8.asc'\" unpacked with wrong size!
  fi
  # end of 'example1/input8.asc'
fi
if test -f 'example1/input9.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/input9.asc'\"
else
  echo shar: Extracting \"'example1/input9.asc'\" \(22 characters\)
  sed "s/^X//" >'example1/input9.asc' <<'END_OF_FILE'
X1.0
X1.897176
X0.115201
END_OF_FILE
  if test 22 -ne `wc -c <'example1/input9.asc'`; then
    echo shar: \"'example1/input9.asc'\" unpacked with wrong size!
  fi
  # end of 'example1/input9.asc'
fi
if test -f 'example1/output1' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/output1'\"
else
  echo shar: Extracting \"'example1/output1'\" \(429 characters\)
  sed "s/^X//" >'example1/output1' <<'END_OF_FILE'
Xpersim> inodes=3
Xpersim> onodes=1
Xpersim> alpha=0.01
Xpersim> node function step
Xpersim> load input "input1.asc",asc
Xpersim> load desired "desired1.asc",asc
Xpersim> load weights random
Xpersim> run verbose
XEpoch #1:
X  Actual Output Node #1 = 1.000000
X
X  [New] From #1, To #1, Weight = 0.396465
X  [New] From #2, To #1, Weight = 0.840485
X  [New] From #3, To #1, Weight = 0.353336
X
Xpersim> save weights "weights.asc",asc
Xpersim> exit
END_OF_FILE
  if test 429 -ne `wc -c <'example1/output1'`; then
    echo shar: \"'example1/output1'\" unpacked with wrong size!
  fi
  # end of 'example1/output1'
fi
if test -f 'example1/output10' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/output10'\"
else
  echo shar: Extracting \"'example1/output10'\" \(304 characters\)
  sed "s/^X//" >'example1/output10' <<'END_OF_FILE'
Xpersim> training
Xtraining mode has been turned off
Xpersim> inodes=3
Xpersim> onodes=1
Xpersim> node function step
Xpersim> load input "input10.asc",asc
Xpersim> load weights "weights.asc",asc
Xpersim> run
Xpersim> # Expecting 1 for output value
Xpersim> show output
XOutput Data Point #1 = 1.000000
Xpersim> exit
END_OF_FILE
  if test 304 -ne `wc -c <'example1/output10'`; then
    echo shar: \"'example1/output10'\" unpacked with wrong size!
  fi
  # end of 'example1/output10'
fi
if test -f 'example1/output6' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/output6'\"
else
  echo shar: Extracting \"'example1/output6'\" \(303 characters\)
  sed "s/^X//" >'example1/output6' <<'END_OF_FILE'
Xpersim> training
Xtraining mode has been turned off
Xpersim> inodes=3
Xpersim> onodes=1
Xpersim> node function step
Xpersim> load input "input6.asc",asc
Xpersim> load weights "weights.asc",asc
Xpersim> run
Xpersim> # Expecting 1 for output value
Xpersim> show output
XOutput Data Point #1 = 1.000000
Xpersim> exit
END_OF_FILE
  if test 303 -ne `wc -c <'example1/output6'`; then
    echo shar: \"'example1/output6'\" unpacked with wrong size!
  fi
  # end of 'example1/output6'
fi
if test -f 'example1/output7' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/output7'\"
else
  echo shar: Extracting \"'example1/output7'\" \(303 characters\)
  sed "s/^X//" >'example1/output7' <<'END_OF_FILE'
Xpersim> training
Xtraining mode has been turned off
Xpersim> inodes=3
Xpersim> onodes=1
Xpersim> node function step
Xpersim> load input "input7.asc",asc
Xpersim> load weights "weights.asc",asc
Xpersim> run
Xpersim> # Expecting 1 for output value
Xpersim> show output
XOutput Data Point #1 = 1.000000
Xpersim> exit
END_OF_FILE
  if test 303 -ne `wc -c <'example1/output7'`; then
    echo shar: \"'example1/output7'\" unpacked with wrong size!
  fi
  # end of 'example1/output7'
fi
if test -f 'example1/output8' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/output8'\"
else
  echo shar: Extracting \"'example1/output8'\" \(305 characters\)
  sed "s/^X//" >'example1/output8' <<'END_OF_FILE'
Xpersim> training
Xtraining mode has been turned off
Xpersim> inodes=3
Xpersim> onodes=1
Xpersim> node function step
Xpersim> load input "input8.asc",asc
Xpersim> load weights "weights.asc",asc
Xpersim> run
Xpersim> # Expecting -1 for output value
Xpersim> show output
XOutput Data Point #1 = -1.000000
Xpersim> exit
END_OF_FILE
  if test 305 -ne `wc -c <'example1/output8'`; then
    echo shar: \"'example1/output8'\" unpacked with wrong size!
  fi
  # end of 'example1/output8'
fi
if test -f 'example1/output9' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/output9'\"
else
  echo shar: Extracting \"'example1/output9'\" \(303 characters\)
  sed "s/^X//" >'example1/output9' <<'END_OF_FILE'
Xpersim> training
Xtraining mode has been turned off
Xpersim> inodes=3
Xpersim> onodes=1
Xpersim> node function step
Xpersim> load input "input9.asc",asc
Xpersim> load weights "weights.asc",asc
Xpersim> run
Xpersim> # Expecting 1 for output value
Xpersim> show output
XOutput Data Point #1 = 1.000000
Xpersim> exit
END_OF_FILE
  if test 303 -ne `wc -c <'example1/output9'`; then
    echo shar: \"'example1/output9'\" unpacked with wrong size!
  fi
  # end of 'example1/output9'
fi
if test -f 'example1/weights.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example1/weights.asc'\"
else
  echo shar: Extracting \"'example1/weights.asc'\" \(40 characters\)
  sed "s/^X//" >'example1/weights.asc' <<'END_OF_FILE'
X1 1 -0.143535
X2 1 0.079450
X3 1 0.339017
END_OF_FILE
  if test 40 -ne `wc -c <'example1/weights.asc'`; then
    echo shar: \"'example1/weights.asc'\" unpacked with wrong size!
  fi
  # end of 'example1/weights.asc'
fi
if test -f 'example2/desired1.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example2/desired1.asc'\"
else
  echo shar: Extracting \"'example2/desired1.asc'\" \(2 characters\)
  sed "s/^X//" >'example2/desired1.asc' <<'END_OF_FILE'
X1
END_OF_FILE
  if test 2 -ne `wc -c <'example2/desired1.asc'`; then
    echo shar: \"'example2/desired1.asc'\" unpacked with wrong size!
  fi
  # end of 'example2/desired1.asc'
fi
if test -f 'example2/desired10.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example2/desired10.asc'\"
else
  echo shar: Extracting \"'example2/desired10.asc'\" \(3 characters\)
  sed "s/^X//" >'example2/desired10.asc' <<'END_OF_FILE'
X-1
END_OF_FILE
  if test 3 -ne `wc -c <'example2/desired10.asc'`; then
    echo shar: \"'example2/desired10.asc'\" unpacked with wrong size!
  fi
  # end of 'example2/desired10.asc'
fi
if test -f 'example2/desired2.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example2/desired2.asc'\"
else
  echo shar: Extracting \"'example2/desired2.asc'\" \(3 characters\)
  sed "s/^X//" >'example2/desired2.asc' <<'END_OF_FILE'
X-1
END_OF_FILE
  if test 3 -ne `wc -c <'example2/desired2.asc'`; then
    echo shar: \"'example2/desired2.asc'\" unpacked with wrong size!
  fi
  # end of 'example2/desired2.asc'
fi
if test -f 'example2/desired3.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example2/desired3.asc'\"
else
  echo shar: Extracting \"'example2/desired3.asc'\" \(2 characters\)
  sed "s/^X//" >'example2/desired3.asc' <<'END_OF_FILE'
X1
END_OF_FILE
  if test 2 -ne `wc -c <'example2/desired3.asc'`; then
    echo shar: \"'example2/desired3.asc'\" unpacked with wrong size!
  fi
  # end of 'example2/desired3.asc'
fi
if test -f 'example2/desired4.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example2/desired4.asc'\"
else
  echo shar: Extracting \"'example2/desired4.asc'\" \(2 characters\)
  sed "s/^X//" >'example2/desired4.asc' <<'END_OF_FILE'
X1
END_OF_FILE
  if test 2 -ne `wc -c <'example2/desired4.asc'`; then
    echo shar: \"'example2/desired4.asc'\" unpacked with wrong size!
  fi
  # end of 'example2/desired4.asc'
fi
if test -f 'example2/desired5.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example2/desired5.asc'\"
else
  echo shar: Extracting \"'example2/desired5.asc'\" \(3 characters\)
  sed "s/^X//" >'example2/desired5.asc' <<'END_OF_FILE'
X-1
END_OF_FILE
  if test 3 -ne `wc -c <'example2/desired5.asc'`; then
    echo shar: \"'example2/desired5.asc'\" unpacked with wrong size!
  fi
  # end of 'example2/desired5.asc'
fi
if test -f 'example2/desired6.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example2/desired6.asc'\"
else
  echo shar: Extracting \"'example2/desired6.asc'\" \(2 characters\)
  sed "s/^X//" >'example2/desired6.asc' <<'END_OF_FILE'
X1
END_OF_FILE
  if test 2 -ne `wc -c <'example2/desired6.asc'`; then
    echo shar: \"'example2/desired6.asc'\" unpacked with wrong size!
  fi
  # end of 'example2/desired6.asc'
fi
if test -f 'example2/desired7.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example2/desired7.asc'\"
else
  echo shar: Extracting \"'example2/desired7.asc'\" \(3 characters\)
  sed "s/^X//" >'example2/desired7.asc' <<'END_OF_FILE'
X-1
END_OF_FILE
  if test 3 -ne `wc -c <'example2/desired7.asc'`; then
    echo shar: \"'example2/desired7.asc'\" unpacked with wrong size!
  fi
  # end of 'example2/desired7.asc'
fi
if test -f 'example2/desired8.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example2/desired8.asc'\"
else
  echo shar: Extracting \"'example2/desired8.asc'\" \(3 characters\)
  sed "s/^X//" >'example2/desired8.asc' <<'END_OF_FILE'
X-1
END_OF_FILE
  if test 3 -ne `wc -c <'example2/desired8.asc'`; then
    echo shar: \"'example2/desired8.asc'\" unpacked with wrong size!
  fi
  # end of 'example2/desired8.asc'
fi
if test -f 'example2/desired9.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example2/desired9.asc'\"
else
  echo shar: Extracting \"'example2/desired9.asc'\" \(2 characters\)
  sed "s/^X//" >'example2/desired9.asc' <<'END_OF_FILE'
X1
END_OF_FILE
  if test 2 -ne `wc -c <'example2/desired9.asc'`; then
    echo shar: \"'example2/desired9.asc'\" unpacked with wrong size!
  fi
  # end of 'example2/desired9.asc'
fi
if test -f 'example2/input1.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example2/input1.asc'\"
else
  echo shar: Extracting \"'example2/input1.asc'\" \(22 characters\)
  sed "s/^X//" >'example2/input1.asc' <<'END_OF_FILE'
X1.0
X0.814881
X1.472649
END_OF_FILE
  if test 22 -ne `wc -c <'example2/input1.asc'`; then
    echo shar: \"'example2/input1.asc'\" unpacked with wrong size!
  fi
  # end of 'example2/input1.asc'
fi
if test -f 'example2/input10.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example2/input10.asc'\"
else
  echo shar: Extracting \"'example2/input10.asc'\" \(22 characters\)
  sed "s/^X//" >'example2/input10.asc' <<'END_OF_FILE'
X1.0
X0.951878
X0.087117
END_OF_FILE
  if test 22 -ne `wc -c <'example2/input10.asc'`; then
    echo shar: \"'example2/input10.asc'\" unpacked with wrong size!
  fi
  # end of 'example2/input10.asc'
fi
if test -f 'example2/input2.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example2/input2.asc'\"
else
  echo shar: Extracting \"'example2/input2.asc'\" \(22 characters\)
  sed "s/^X//" >'example2/input2.asc' <<'END_OF_FILE'
X1.0
X0.828876
X0.502262
END_OF_FILE
  if test 22 -ne `wc -c <'example2/input2.asc'`; then
    echo shar: \"'example2/input2.asc'\" unpacked with wrong size!
  fi
  # end of 'example2/input2.asc'
fi
if test -f 'example2/input3.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example2/input3.asc'\"
else
  echo shar: Extracting \"'example2/input3.asc'\" \(22 characters\)
  sed "s/^X//" >'example2/input3.asc' <<'END_OF_FILE'
X1.0
X0.190366
X1.483445
END_OF_FILE
  if test 22 -ne `wc -c <'example2/input3.asc'`; then
    echo shar: \"'example2/input3.asc'\" unpacked with wrong size!
  fi
  # end of 'example2/input3.asc'
fi
if test -f 'example2/input4.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example2/input4.asc'\"
else
  echo shar: Extracting \"'example2/input4.asc'\" \(22 characters\)
  sed "s/^X//" >'example2/input4.asc' <<'END_OF_FILE'
X1.0
X0.781129
X1.203531
END_OF_FILE
  if test 22 -ne `wc -c <'example2/input4.asc'`; then
    echo shar: \"'example2/input4.asc'\" unpacked with wrong size!
  fi
  # end of 'example2/input4.asc'
fi
if test -f 'example2/input5.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example2/input5.asc'\"
else
  echo shar: Extracting \"'example2/input5.asc'\" \(22 characters\)
  sed "s/^X//" >'example2/input5.asc' <<'END_OF_FILE'
X1.0
X0.139535
X0.117174
END_OF_FILE
  if test 22 -ne `wc -c <'example2/input5.asc'`; then
    echo shar: \"'example2/input5.asc'\" unpacked with wrong size!
  fi
  # end of 'example2/input5.asc'
fi
if test -f 'example2/input6.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example2/input6.asc'\"
else
  echo shar: Extracting \"'example2/input6.asc'\" \(22 characters\)
  sed "s/^X//" >'example2/input6.asc' <<'END_OF_FILE'
X1.0
X0.845524
X1.005736
END_OF_FILE
  if test 22 -ne `wc -c <'example2/input6.asc'`; then
    echo shar: \"'example2/input6.asc'\" unpacked with wrong size!
  fi
  # end of 'example2/input6.asc'
fi
if test -f 'example2/input7.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example2/input7.asc'\"
else
  echo shar: Extracting \"'example2/input7.asc'\" \(22 characters\)
  sed "s/^X//" >'example2/input7.asc' <<'END_OF_FILE'
X1.0
X0.388396
X0.122054
END_OF_FILE
  if test 22 -ne `wc -c <'example2/input7.asc'`; then
    echo shar: \"'example2/input7.asc'\" unpacked with wrong size!
  fi
  # end of 'example2/input7.asc'
fi
if test -f 'example2/input8.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example2/input8.asc'\"
else
  echo shar: Extracting \"'example2/input8.asc'\" \(22 characters\)
  sed "s/^X//" >'example2/input8.asc' <<'END_OF_FILE'
X1.0
X0.055437
X0.610442
END_OF_FILE
  if test 22 -ne `wc -c <'example2/input8.asc'`; then
    echo shar: \"'example2/input8.asc'\" unpacked with wrong size!
  fi
  # end of 'example2/input8.asc'
fi
if test -f 'example2/input9.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example2/input9.asc'\"
else
  echo shar: Extracting \"'example2/input9.asc'\" \(22 characters\)
  sed "s/^X//" >'example2/input9.asc' <<'END_OF_FILE'
X1.0
X1.448644
X0.615749
END_OF_FILE
  if test 22 -ne `wc -c <'example2/input9.asc'`; then
    echo shar: \"'example2/input9.asc'\" unpacked with wrong size!
  fi
  # end of 'example2/input9.asc'
fi
if test -f 'example2/output10' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example2/output10'\"
else
  echo shar: Extracting \"'example2/output10'\" \(306 characters\)
  sed "s/^X//" >'example2/output10' <<'END_OF_FILE'
Xpersim> training
Xtraining mode has been turned off
Xpersim> inodes=3
Xpersim> onodes=1
Xpersim> node function step
Xpersim> load input "input10.asc",asc
Xpersim> load weights "weights.asc",asc
Xpersim> run
Xpersim> # Expecting -1 for output value
Xpersim> show output
XOutput Data Point #1 = -1.000000
Xpersim> exit
END_OF_FILE
  if test 306 -ne `wc -c <'example2/output10'`; then
    echo shar: \"'example2/output10'\" unpacked with wrong size!
  fi
  # end of 'example2/output10'
fi
if test -f 'example2/output6' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example2/output6'\"
else
  echo shar: Extracting \"'example2/output6'\" \(303 characters\)
  sed "s/^X//" >'example2/output6' <<'END_OF_FILE'
Xpersim> training
Xtraining mode has been turned off
Xpersim> inodes=3
Xpersim> onodes=1
Xpersim> node function step
Xpersim> load input "input6.asc",asc
Xpersim> load weights "weights.asc",asc
Xpersim> run
Xpersim> # Expecting 1 for output value
Xpersim> show output
XOutput Data Point #1 = 1.000000
Xpersim> exit
END_OF_FILE
  if test 303 -ne `wc -c <'example2/output6'`; then
    echo shar: \"'example2/output6'\" unpacked with wrong size!
  fi
  # end of 'example2/output6'
fi
if test -f 'example2/output7' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example2/output7'\"
else
  echo shar: Extracting \"'example2/output7'\" \(305 characters\)
  sed "s/^X//" >'example2/output7' <<'END_OF_FILE'
Xpersim> training
Xtraining mode has been turned off
Xpersim> inodes=3
Xpersim> onodes=1
Xpersim> node function step
Xpersim> load input "input7.asc",asc
Xpersim> load weights "weights.asc",asc
Xpersim> run
Xpersim> # Expecting -1 for output value
Xpersim> show output
XOutput Data Point #1 = -1.000000
Xpersim> exit
END_OF_FILE
  if test 305 -ne `wc -c <'example2/output7'`; then
    echo shar: \"'example2/output7'\" unpacked with wrong size!
  fi
  # end of 'example2/output7'
fi
if test -f 'example2/output8' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example2/output8'\"
else
  echo shar: Extracting \"'example2/output8'\" \(305 characters\)
  sed "s/^X//" >'example2/output8' <<'END_OF_FILE'
Xpersim> training
Xtraining mode has been turned off
Xpersim> inodes=3
Xpersim> onodes=1
Xpersim> node function step
Xpersim> load input "input8.asc",asc
Xpersim> load weights "weights.asc",asc
Xpersim> run
Xpersim> # Expecting -1 for output value
Xpersim> show output
XOutput Data Point #1 = -1.000000
Xpersim> exit
END_OF_FILE
  if test 305 -ne `wc -c <'example2/output8'`; then
    echo shar: \"'example2/output8'\" unpacked with wrong size!
  fi
  # end of 'example2/output8'
fi
if test -f 'example2/output9' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example2/output9'\"
else
  echo shar: Extracting \"'example2/output9'\" \(303 characters\)
  sed "s/^X//" >'example2/output9' <<'END_OF_FILE'
Xpersim> training
Xtraining mode has been turned off
Xpersim> inodes=3
Xpersim> onodes=1
Xpersim> node function step
Xpersim> load input "input9.asc",asc
Xpersim> load weights "weights.asc",asc
Xpersim> run
Xpersim> # Expecting 1 for output value
Xpersim> show output
XOutput Data Point #1 = 1.000000
Xpersim> exit
END_OF_FILE
  if test 303 -ne `wc -c <'example2/output9'`; then
    echo shar: \"'example2/output9'\" unpacked with wrong size!
  fi
  # end of 'example2/output9'
fi
if test -f 'example2/weights.asc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'example2/weights.asc'\"
else
  echo shar: Extracting \"'example2/weights.asc'\" \(40 characters\)
  sed "s/^X//" >'example2/weights.asc' <<'END_OF_FILE'
X1 1 -0.243535
X2 1 0.207843
X3 1 0.188877
END_OF_FILE
  if test 40 -ne `wc -c <'example2/weights.asc'`; then
    echo shar: \"'example2/weights.asc'\" unpacked with wrong size!
  fi
  # end of 'example2/weights.asc'
fi
echo shar: End of archive 3 \(of 3\).
cp /dev/null ark3isdone
MISSING=""
for I in 1 2 3 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 3 archives.
    rm -f ark[1-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0
exit 0 # Just in case...
