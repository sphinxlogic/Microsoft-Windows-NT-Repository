Newsgroups: comp.sources.misc
From: zsh-list@cs.uow.edu.au (The Zsh Mailing List)
Subject: v35i055:  zsh - The Z Shell, version 2.3.1, Part05/22
Message-ID: <1993Feb20.212132.28333@sparky.imd.sterling.com>
X-Md4-Signature: 9b3475df98c1f0e144673cf5d5a7269c
Date: Sat, 20 Feb 1993 21:21:32 GMT
Approved: kent@sparky.imd.sterling.com

Submitted-by: zsh-list@cs.uow.edu.au (The Zsh Mailing List)
Posting-number: Volume 35, Issue 55
Archive-name: zsh/part05
Environment: UNIX
Supersedes: zsh2.2: Volume 29, Issue 97-113

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# Contents:  doc/zsh.texi.01 help/TRAP help/fc
# Wrapped by mattson@odin on Sat Feb  6 14:41:52 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 5 (of 22)."'
if test -f 'doc/zsh.texi.01' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'doc/zsh.texi.01'\"
else
  echo shar: Extracting \"'doc/zsh.texi.01'\" \(49503 characters\)
  sed "s/^X//" >'doc/zsh.texi.01' <<'END_OF_FILE'
X\input texinfo.tex @c -*- texinfo -*-
X@c %**start of header
X@setfilename zsh.info
X@settitle    zsh
X@c %**end of header
X@c v0.1, July 8th 1992.  Added documentation for Rick's
X@c (pclink@@qld.tne.oz.au) four new glob qualifiers (a/m/c/L)
X@c v0.2, August 11th 1992.  Added documentation for the new PSVAR
X@c variable, the f E and I flags for the fc command, and the
X@c appendhistory and extendedhistory options.  Also corrected a typo in
X@c the description of the ${ := } modifier.  Now current to zsh2.3beta
X@c (patch level 28).
X@c v0.3, August 21 1992.  Unified to the zsh.1 (patchlevel 30) patches
X@c supplied by Hans Albertsson.  This meant rewriting most of the extra
X@c text I added in v0.1 and v0.2, in order to match Hans'.  Corrected
X@c some more typos ("is has" in several places). 
X@c       [ added to the archive sometime around here ]
X@c v0.4, November 1 1992.  Added up-line-or-search to complement
X@c down-line-or-search.  Moved information about availability and the
X@c mailing list to the end of the file, to match zsh.1.  Should now be
X@c current to patchlevel 65.
X@c v0.5, February 5 1993.  Has been kept mostly up-do-date by denizens
X@c of the mailing list.  Final clean-up to conform to the new release
X@c of zsh version 2.3 (man page dated 1 February 1993), and to the new
X@c Texinfo standards (but should remain compatible with old Texinfo).
X@c Eventually I want to rewrite to use the new features of Texinfo v2.0
X@c and above, but we'll have to wait for the rest of the world to catch
X@c up first.  <sigh>
X
X@setchapternewpage on
X
X@ifinfo
XThis is a texinfo version of the man page for the Z Shell, by Paul
XFalstad.  It was converted from the original @code{zsh.1} file
Xdistributed with zsh v2.2.0.  The conversion was done by Jonathan
XHardwick, @code{jch@@cs.cmu.edu}, who would love to hear of any errors
Xhe introduced or texinfo rules he broke.  The text remains the work of
XPaul Falstad.@refill
X@end ifinfo
X
X@titlepage
X@sp 4
X@center @titlefont{The Z Shell}
X@sp 2
X@center Paul Falstad
X@center pf@@ttisms.com
X@sp 2
X@center 1 February 1993
X@page
X@vskip 0pt plus 1filll
XThis is a texinfo version of the man page for the Z Shell, by Paul
XFalstad.  It was converted from the original @code{zsh.1} file
Xdistributed with zsh v2.2.0.  The conversion was done by Jonathan
XHardwick, @code{jch@@cs.cmu.edu}, who would love to hear of any errors
Xhe introduced or texinfo rules he broke.  The text remains the work of
XPaul Falstad.
X@end titlepage
X
X@node Top, Shell Grammar, (dir), (dir)
X@top zsh
X
X@menu
X* Shell Grammar::               
X* Expansion::                   
X* Redirection::                 
X* Command Execution::           
X* Functions::                   
X* Jobs & Signals::              
X* History::                     
X* Arithmetic Evaluation::       
X* Conditional Expressions::     
X* Zsh Line Editor::             
X* Parameters::                  
X* Options::                     
X* Shell Builtin Commands::      
X* Invocation::                  
X* Wrapping Up::                 
X* Concept Index::               
X* Variables Index::             
X* Options Index::               
X* Functions Index::             
X* Editor Functions Index::      
X* Keystroke Index::             
X
X --- The Detailed Node Listing ---
X
XShell Grammar
X
X* Simple Commands & Pipelines::  
X* Complex Commands::            
X* Reserved Words::              
X* Comments::                    
X* Aliasing::                    
X* Quoting::                     
X
XExpansion
X
X* Filename Expansion::          
X* Process Substitution::        
X* Parameter Expansion::         
X* Command Substitution::        
X* Arithmetic Expansion::        
X* Brace Expansion::             
X* Filename Generation::         
X
XHistory
X
X* Event Designators::           
X* Word Designators::            
X* Modifiers::                   
X
XZsh Line Editor
X
X* Movement::                    
X* History Control::             
X* Modifying Text::              
X* Arguments::                   
X* Completion::                  
X* Miscellaneous::               
X
XParameters
X
X* Array Parameters::            
X* Positional Parameters::       
X* Parameters Set By The Shell::  
X* Parameters Used By The Shell::  
X
XWrapping Up
X
X* See Also::                    
X* Files Used::                  
X* Availability::                
X* Undocumented Features::       
X@end menu
X
X@node Shell Grammar, Expansion, Top, Top
X@chapter Shell Grammar
X@cindex shell grammar
X@cindex grammar, shell
X
X@menu
X* Simple Commands & Pipelines::  
X* Complex Commands::            
X* Reserved Words::              
X* Comments::                    
X* Aliasing::                    
X* Quoting::                     
X@end menu
X
X@node Simple Commands & Pipelines, Complex Commands,  , Shell Grammar
X@section Simple Commands
X@cindex simple commands
X@cindex commands, simple
X
X@noindent
XA @dfn{simple command} is a sequence of optional parameter assignments
Xfollowed by blank-separated words, with optional redirections
Xinterspersed.  The first word is the command to be executed, and the
Xremaining words, if any, are arguments to the command.  If a command
Xname is given, the parameter assignments modify the environment of the
Xcommand when it is executed.  The value of a simple command is its exit
Xstatus, or 128 plus the signal number if terminated by a signal.
X
X@findex exec
X@findex command
X@findex noglob
X@findex nocorrect
X@noindent
XIf a simple command is preceded by the word @code{exec}, it is executed
Xin the parent shell without forking.  If preceded by @code{command}, the
Xcommand word is taken to be the name of an external command, rather than
Xa shell function or builtin.  If preceded by @code{noglob}, filename
Xgeneration is not performed on any of the words.  If preceded by a
X@code{-}, the command is executed with a @code{-} prepended to its
X@code{argv[0]} string. If preceded by @code{nocorrect}, spelling
Xcorrection is not done on any of the words.@refill
X
X@cindex pipeline
X@noindent
XA @dfn{pipeline} is a sequence of one or more commands separated by
X@code{|} or @code{|&}.  @code{|&} is shorthand for @code{2>&1 |}.  The
Xstandard output of each command is connected to the standard input of
Xthe next command in the pipeline.@refill
X
X@cindex pipeline, value of
X@noindent
XThe value of a pipeline is the value of the last command.  If a pipeline
Xis preceded by a @code{!}, the value of that pipeline is the logical NOT
Xof the value of the last command.
X
X@findex coproc
X@cindex coprocesses
X@noindent
XIf a pipeline is preceded by @code{coproc}, it is executed as a
Xcoprocess; a two-way pipe is established between it and the parent
Xshell.  The shell can read from or write to the coprocess by means of
Xthe @code{>&p} and @code{<&p} redirection operators.@refill
X
X@cindex sublist
X@noindent
XA @dfn{sublist} is a sequence of one or more pipelines separated by
X@code{&&} or @code{||}.  If two pipelines are separated by @code{&&},
Xthe second pipeline is executed only if the first is successful (returns
Xa zero value).  If two pipelines are separated by @code{||}, the second
Xis executed only if the first is unsuccessful (returns a nonzero
Xvalue).@refill
X
X@cindex list
X@noindent
XA @dfn{list} is a sequence of one or more sublists separated by, and
Xoptionally terminated by, @code{;}, @code{&}, or a newline.  Normally
Xthe shell waits for each list to finish before executing the next one.
XIf a list is terminated by a @code{&}, the shell executes it in the
Xbackground, and does not wait for it to finish.@refill
X
X@node Complex Commands, Reserved Words, Simple Commands & Pipelines, Shell Grammar
X@section Complex Commands
X@cindex complex commands
X@cindex commands, complex
X
X@noindent
XA @dfn{complex command} is one of the following:
X
X@table @code
X@cindex for loops
X@cindex loops, for
X@findex for
X@item for @var{name} [ in @var{word} @dots{} ]
X@itemx do @var{list}
X@itemx done
XExpand the list of @var{word}s, and set the parameter @var{name} to each
Xof them in turn, executing @var{list} each time.  If the @code{in}
X@var{word} is omitted, use the positional parameters instead of the
X@var{word}s.@refill
X
X@item for @var{name} [ in @var{word} @dots{} ] ; @var{sublist}
XThis is a shorthand for @code{for}.  Though it may cause confusion, it
Xis included for convenience; its use in scripts is discouraged, unless
X@var{sublist} is a command of the form @{ @var{list} @}.@refill
X
X@findex foreach
X@item foreach @var{name} ( @var{word} @dots{} )
X@itemx @var{list}
X@itemx end
XAnother form of @code{for}.
X
X@item for @var{name} in @var{word} @dots{}
X@itemx @{
X@itemx @var{list}
X@itemx @}
XAnother form of @code{for}.
X
X@item for @var{name} ( @var{word} @dots{} ) @{
X@itemx @var{list}
X@itemx @}
XAnother form of @code{for}.
X
X@item for @var{name} ( @var{word} @dots{} ) @var{sublist}
XAnother form of @code{for}.
X
X@cindex selection, user
X@cindex user selection
X@findex select
X@item select @var{name} [ in @var{word} @dots{} ]
X@itemx do @var{list}
X@itemx done
XPrint the set of @var{word}s, each preceded by a number.  If the
X@code{in} @var{word} is omitted, use the positional parameters.  The
X@code{PROMPT3} prompt is printed and a line is read from standard input.
XIf this line consists of the number of one of the listed @var{word}s,
Xthen the parameter @var{name} is set to the @var{word} corresponding to
Xthis number.  If this line is empty, the selection list is printed
Xagain.  Otherwise, the value of the parameter @var{name} is set to null.
XThe contents of the line read from standard input is saved in the
Xparameter @code{REPLY}.  @var{list} is executed for each selection until
Xa break or end-of-file is encountered.@refill
X
X@item select @var{name} [ in @var{word} ] ; @var{sublist}
XA short form of @code{select}.
X
X@findex case
X@cindex case selection
X@cindex selection, case
X@item case @var{word} in [ @var{pattern} ) @var{list} ;; ] @dots{}
X@itemx esac
XExecute the @var{list} associated with the first @var{pattern} that
Xmatches @var{word}, if any.  The form of the patterns is the same as
Xthat used for filename generation.  @xref{Filename Generation}.@refill
X
X@item case @var{word} @{ [ @var{pattern} ) @var{list} ;; ] @dots{}
X@itemx @}
XAnother form of @code{case}.
X
X@findex if
X@cindex if construct
X@item if @var{list}
X@itemx then @var{list}
X@itemx [ elif @var{list} ; then @var{list} ] @dots{}
X@itemx [ else @var{list} ]
X@itemx fi
XThe @code{if} @var{list} is executed, and, if it returns a zero exit
Xstatus, the @code{then} @var{list} is executed.  Otherwise, the
X@code{elif} @var{list} is executed and, if its value is zero, the
X@code{then} @var{list} is executed.  If each @code{elif} @var{list}
Xreturns nonzero, the @code{else} @var{list} is executed.@refill
X
X@item if ( @var{list} ) @var{sublist}
XA short form of @code{if}.
X
X@item if ( @var{list} ) @{
X@itemx @var{list}
X@itemx @} elif ( @var{list} ) @{
X@itemx @var{list}
X@itemx @} @dots{} else @{
X@itemx @var{list}
X@itemx @}
XAn alternate form of @code{if}.
X
X@findex while
X@cindex while loops
X@cindex loops, while
X@item while @var{list}
X@itemx do @var{list}
X@itemx done
XExecute the @code{do} @var{list} as long as the @code{while} @var{list}
Xreturns a zero exit status.@refill
X
X@item while ( @var{list} ) @{
X@itemx @var{list}
X@itemx @}
XAn alternate form of @code{while}.
X
X@findex until
X@cindex until loops
X@cindex loops, until
X@item until @var{list}
X@itemx do @var{list}
X@itemx done
XExecute the @code{do} @var{list} as long as @code{until} @var{list}
Xreturns a nonzero exit status.@refill
X
X@findex repeat
X@cindex repeat loops
X@cindex loops, repeat
X@item repeat @var{word}
X@itemx do @var{list}
X@itemx done
X@var{word} is expanded and treated as an arithmetic expression, which
Xmust evaluate to a number @var{n}.  @var{list} is then executed @code{n}
Xtimes.@refill
X
X@item repeat @var{word} @var{sublist}
XThis is a short form of @code{repeat}.
X
X@cindex subshells
X@item ( @var{list} )
XExecute @var{list} in a subshell.
X
X@item @{ @var{list} @}
XExecute @var{list}.
X
X@item function @var{word} [ () ] @dots{} @{ @var{list} @}
X@itemx @var{word} @dots{} () @{ @var{list} @}
X@itemx @var{word} @dots{} () @var{sublist}
XDefine a function which is referenced by any one of @var{word}.
XNormally, only one @var{word} is provided; multiple @var{word}s are
Xusually only useful for setting traps.  The body of the function is the
X@var{list} between the @code{@{} and @code{@}}.
X@xref{Functions}.@refill
X
X@cindex timing
X@item time [ @var{pipeline} ]
XThe @var{pipeline} is executed, and timing statistics are reported on
Xthe standard error in the form specified by the @code{TIMEFMT}
Xparameter.  If @var{pipeline} is omitted, print statistics about the
Xshell process and its children.@refill
X
X@cindex testing conditional expression
X@item [[ @var{exp} ]]
XEvaluates the conditional expression @var{exp} and return a zero exit
Xstatus if it is true.  @xref{Conditional Expressions}, for a description
Xof @var{exp}.@refill
X@end table
X
X@node Reserved Words, Comments, Complex Commands, Shell Grammar
X@section Reserved Words
X@cindex reserved words
X
X@findex unalias, use of
X@noindent
XThe following words are recognized as @dfn{reserved words} when used as
Xthe first word of a command unless quoted or removed using the
X@code{unalias} builtin:@refill
X
X@noindent
X@code{do} @code{done} @code{esac} @code{then} @code{elif} @code{else}
X@code{fi} @code{for} @code{case} @code{if} @code{while} @code{function}
X@code{repeat} @code{code} @code{time} @code{until} @code{exec}
X@code{command} @code{select} @code{coproc} @code{noglob} @code{-}
X@code{nocorrect} @code{foreach} @code{end} @refill
X
X@node Comments, Aliasing, Reserved Words, Shell Grammar
X@section Comments
X@cindex comments
X
X@vindex HISTCHARS, use of
X@pindex INTERACTIVE_COMMENTS, use of
X@noindent
XIn noninteractive shells, or in interactive shells with the
X@code{INTERACTIVE_COMMENTS} option set, a word beginning with the third
Xcharacter of the @code{HISTCHARS} parameter (@code{#} by default) causes
Xthat word and all the following characters up to a newline to be
Xignored.@refill
X
X@node Aliasing, Quoting, Comments, Shell Grammar
X@section Aliasing
X@cindex aliasing
X
X@findex alias, use of
X@cindex aliases, global
X@noindent
XEvery token in the shell input is checked to see if there is an alias
Xdefined for it.  If so, it is replaced by the text of the alias if it is
Xin command position (if it could be the first word of a simple command),
Xor if the alias is global.  If the text ends with a space, the next word
Xin the shell input is treated as though it were in command position for
Xpurposes of alias expansion.  An alias is defined using the @code{alias}
Xbuiltin; global aliases may be defined using the @code{-g} option to
Xthat bulitin.@refill
X
X@noindent
XAlias substitution is done on the shell input before any other
Xsubstitution except history substitution.  Therefore, if an alias is
Xdefined for the word @samp{foo}, alias substitution may be avoided by
Xquoting part of the word, e.g. @samp{\foo}.  But there is nothing to
Xprevent an alias being defined for @samp{\foo} as well.@refill
X
X@node Quoting,  , Aliasing, Shell Grammar
X@section Quoting
X@cindex quoting
X
X@noindent
XA character may be @dfn{quoted} (that is, made to stand for itself) by
Xpreceding it with a @code{\}.  @code{\} followed by a newline is
Xignored.  All characters enclosed between a pair of single quotes
X(@code{''}) are quoted.  A single quote cannot appear within single
Xquotes.  Inside double quotes (@code{""}), parameter and command
Xsubstitution occurs, and @code{\} quotes the characters @code{\},
X@code{`}, @code{"}, and @code{$}. @refill
X
X@node Expansion, Redirection, Shell Grammar, Top
X@chapter Expansion
X@cindex expansion
X
X@menu
X* Filename Expansion::          
X* Process Substitution::        
X* Parameter Expansion::         
X* Command Substitution::        
X* Arithmetic Expansion::        
X* Brace Expansion::             
X* Filename Generation::         
X@end menu
X
X@noindent
XExpansion is performed on the command line after it has been parsed.
XThe types of expansions performed are @dfn{filename expansion},
X@dfn{process substitution}, @dfn{parameter expansion}, @dfn{command
Xsubstitution}, @dfn{arithmetic expansion}, @dfn{brace expansion}, and
X@dfn{filename generation}.@refill
X
X@node Filename Expansion, Process Substitution,  , Expansion
X@section Filename Expansion
X@cindex filename expansion
X@cindex expansion, filename
X
X@noindent
XEach word is checked to see if it begins with an unquoted @code{~}.  If
Xit does, then the word up to a @code{/} is checked to see if it matches
Xthe name of a named directory.  If so, then the @code{~} and the matched
Xportion are replaced with the value of the named directory.  A @code{~}
Xby itself or followed by a @code{/} is replaced by the value of the
X@code{HOME} parameter.  A @code{~} followed by a @code{+} or a @code{-}
Xis replaced by the value of @code{PWD} or @code{OLDPWD},
Xrespectively.@refill
X
X@cindex directories, named
X@cindex named directories
X@noindent
XNamed directories are typically login directories for users on the
Xsystem.  They may also be defined if the text after the @code{~} is the
Xname of a string shell parameter whose value begins with a @code{/}.  In
Xcertain circumstances (in prompts, for instance), when the shell prints
Xa path, the path is checked to see if it has a named directory as its
Xprefix.  If so, then the prefix portion is replaced with a @code{~}
Xfollowed by the name of the directory.  The longest match is preferred.
X
X@noindent
XIf a word begins with an unquoted @code{=} and the @code{NO_EQUALS}
Xoption is not set, the remainder of the word is taken as the name of a
Xcommand or alias.  If a command exists by that name, the word is
Xreplaced by the full pathname of the command.  If an alias exists by
Xthat name, the word is replaced with the text of the alias.  Otherwise
Xthe word is checked up to a @code{/} to see if it is a number or a
X@code{-}.  If so, the matched portion is replaced with the @var{n}th
Xdirectory in the directory stack, where @var{n} is the number matched,
Xor the last directory in the directory stack if a @code{-} is
Xmatched.@refill
X
X@node Process Substitution, Parameter Expansion, Filename Expansion, Expansion
X@section Process Substitution
X@cindex process substitution
X@cindex substitution, process
X
X@noindent
XEach command argument of the form @code{<(@var{list})} or
X@code{>(@var{list})} or @code{=(@var{list})} is subject to process
Xsubstitution.  In the case of the @code{<} or @code{>} forms, the shell
Xwill run process @var{list} asynchronously connected to a named pipe
X(FIFO).  The name of this pipe will become the argument to the command.
XIf the form with @code{>} is selected then writing on this file will
Xprovide input for @var{list}.  If @code{<} is used, then the file passed
Xas an argument will be a named pipe connected to the output of the
X@var{list} process.  For example,@refill
X
X@code{paste <(cut -f1 @var{file1}) <(cut -f3 @var{file2}) | tee >(@var{process1}) >(@var{process2}) >/dev/null}
X
X@noindent
X@code{cut}s fields 1 and 3 from the files @var{file1} and @var{file2}
Xrespectively, @code{paste}s the results together, and sends it to the
Xprocesses @var{process1} and @var{process2}.  Note that the file, which
Xis passed as an argument to the command, is a system pipe so programs
Xthat expect to @code{lseek(2)} on the file will not work.  Also note
Xthat the previous example can be more compactly and efficiently written
Xas:@refill
X
X@code{paste <(cut -f1 @var{file1}) <(cut -f3 @var{file2}) >>(@var{process1}) >>(@var{process2})}
X
X@noindent
XThe shell uses pipes instead of FIFOs to implement the latter two
Xprocess substitutions in the above example.
X
X@cindex temporary files
X@cindex files, temporary
X@noindent
XIf @code{=} is used, then the file passed as an argument will be the name
Xof a temporary file containing the output of the @var{list} process.
XThis may be used instead of the @code{<} form for a program that expects
Xto @code{lseek(2)} on the input file.@refill
X
X@node Parameter Expansion, Command Substitution, Process Substitution, Expansion
X@section Parameter Expansion
X@cindex parameter expansion
X@cindex expansion, parameter
X
X@noindent
XThe character @code{$} is used to introduce parameter expansions.
X@xref{Parameters}, for a description of parameters.@refill
X
X@table @code
X@item $@{@var{name}@}
XThe value, if any, of the parameter @var{name} is substituted.  The
Xbraces are required if @var{name} is followed by a letter, digit, or
Xunderscore that is not to be interpreted as part of its name.  If
X@var{name} is an array parameter, then the values of each element of
X@var{name} is substituted, one element per word.  Otherwise, the
Xexpansion results in one word only; no word splitting is done on the
Xresult.@refill
X
X@item $@{@var{name}:-@var{word}@}
XIf @var{name} is set and is non-null then substitute its value;
Xotherwise substitute @var{word}.@refill
X
X@item $@{@var{name}:=@var{word}@}
XIf @var{name} is unset or is null then set it to @var{word}; the value
Xof the parameter is then substituted.@refill
X
X@item $@{@var{name}:?@var{word}@}
XIf @var{name} is set and is non-null, then substitute its value;
Xotherwise, print @var{word} and exit from the shell.  If @var{word} is
Xomitted, then a standard message is printed.@refill
X
X@item $@{@var{name}:+@var{word}@}
XIf @var{name} is set and is non-null then substitute @var{word};
Xotherwise substitute nothing.@refill
X
X@item $@{@var{name}#@var{pattern}@}
X@itemx $@{@var{name}##@var{pattern}@}
XIf the @var{pattern} matches the beginning of the value of @var{name},
Xthen substitute the value of @var{name} with the matched portion
Xdeleted; otherwise, just substitute the value of @var{name}.  In the
Xfirst form, the smallest matching pattern is preferred; in the second
Xform, the largest matching pattern is preferred.@refill
X
X@item $@{@var{name}%@var{pattern}@}
X@itemx $@{@var{name}%%@var{pattern}@}
XIf the @var{pattern} matches the end of the value of @var{name}, then
Xsubstitute the value of @var{name} with the matched portion deleted;
Xotherwise, just substitute the value of @var{name}.  In the first form,
Xthe smallest matching pattern is preferred; in the second form, the
Xlargest matching pattern is preferred.@refill
X
X@item $@{#@var{spec}@}
XIf @var{spec} is one of the above substitutions, substitute the length
Xin characters of the result instead of the result itself.  If @var{spec}
Xis an array expression, substitute the number of elements of the
Xresult.@refill
X
X@cindex rc, array expansion style
X@cindex array expansion, rc style
X@pindex RC_EXPAND_PARAM, use of
X@item $@{^@var{spec}@}
XToggle the value of the @code{RC_EXPAND_PARAM} option for the evaluation
Xof @var{spec}.  When this option is set, array expansions of the form
X@samp{foo$@{xx@}bar}, where the parameter @samp{xx} is set to @samp{(a b
Xc)}, are substituted with @samp{fooabar foobbar foocbar} instead of the
Xdefault @samp{fooa b cbar}.@refill
X
X@cindex word splitting, sh style
X@cindex sh, word splitting style
X@pindex SH_WORD_SPLIT, use of
X@vindex IFS, use of
X@item $@{=@var{spec}@}
XToggle the value of the @code{SH_WORD_SPLIT} option for the evaluation
Xof @var{spec}.  When this option is set, parameter values are split into
Xseparate words using @code{IFS} as a delimiter before substitution.
XThis is done by default in most other shells.@refill
X@end table
X
X@noindent
XIf the colon is omitted from one of the above expressions containing a
Xcolon, then the shell only checks whether @var{name} is set or not, not
Xwhether it is null.@refill
X
X@node Command Substitution, Arithmetic Expansion, Parameter Expansion, Expansion
X@section Command Substitution
X@cindex command substitution
X@cindex substitution, command
X
X@vindex IFS, use of
X@noindent
XA command enclosed in parentheses preceded by a dollar sign, like so:
X@code{$(@dots{})} or quoted with grave accents: @code{`@dots{}`} is replaced
Xwith its standard output.  If the substitution is not enclosed in double
Xquotes, the output is broken into words using the @code{IFS} parameter.
XThe substitution @code{$(cat foo)} may be replaced by the equivalent but
Xfaster @code{$(<foo)}.@refill
X
X@node Arithmetic Expansion, Brace Expansion, Command Substitution, Expansion
X@section Arithmetic Expansion
X@cindex arithmetic expansion
X@cindex expansion, arithmetic
X
X@noindent
XA string of the form @code{$[@var{exp}]} is substituted with the value
Xof the arithmetic expression @var{exp}.  @var{exp} is treated as if it
Xwere within single quotes.  @xref{Arithmetic Evaluation}.@refill
X
X@node Brace Expansion, Filename Generation, Arithmetic Expansion, Expansion
X@section Brace Expansion
X@cindex brace expansion
X@cindex expansion, brace
X
X@noindent
XA string of the form @samp{foo@{xx,yy,zz@}bar} is expanded to the
Xindividual words @samp{fooxxbar}, @*@samp{fooyybar}, and @samp{foozzbar}.
XLeft-to-right order is preserved.  This construct may be nested.
XMalformed brace expansion expressions, including expressions without a
Xcomma, are left unchanged by the shell.@refill
X
X@noindent
XAn expression of the form @code{@{x-y@}}, where @code{x} and @code{y}
Xare single characters, is expanded to every character between @code{x}
Xand @code{y}, inclusive.@refill
X
X@node Filename Generation,  , Brace Expansion, Expansion
X@section Filename Generation
X@cindex filename generation
X
X@cindex globbing
X@pindex NO_GLOB, use of
X@pindex EXTENDED_GLOB, use of
X@pindex NULL_GLOB, use of
X@pindex NO_NOMATCH, use of
X@pindex GLOB_DOTS, use of
X@noindent
XIf a word contains an unquoted instance of one of the characters
X@code{*}, @code{|}, @code{<}, @code{[}, or @code{?}, it is regarded as a
Xpattern for filename generation, unless the @code{NO_GLOB} option is
Xset.  If the @code{EXTENDED_GLOB} option is set, the @code{^} and
X@code{#} characters also denote a pattern; otherwise they are not
Xtreated specially by the shell.  The word is replaced with a list of
Xsorted filenames that match the pattern.  If no matching pattern is
Xfound, the shell gives an error message, unless the @code{NULL_GLOB}
Xoption is set, in which case the word is deleted; or unless the
X@code{NO_NOMATCH} option is set, in which case the word is left
Xunchanged.  In filename generation, the character @code{/} must be
Xmatched explicitly; also, a @code{.} must be matched explicitly at the
Xbeginning of a pattern or after a @code{/}, unless the @code{GLOB_DOTS}
Xoption is set.  No filename generation pattern matches the files
X@file{.} or @file{..}.  In other instances of pattern matching, the
X@code{/} and @code{.} are not treated specially.@refill
X
X@table @code
X@item *
Xmatches any string, including the null string.
X@item ?
Xmatches any character.
X@item [@dots{}]
Xmatches any of the enclosed characters.
X@item [^@dots{}]
Xmatches any character except the enclosed characters.
X@item <x-y>
Xmatches any number in the range @code{x} to @code{y}, inclusive.  If
X@code{x} is omitted, the number must be less than or equal to @code{y}.
XIf @code{y} is omitted, the number must be greater than or equal to
X@code{x}.  A pattern of the form @code{<->} or simply @code{<>} matches
Xany number.@refill
X@item ^x
Xmatches anything except the pattern @code{x}.
X@item x|y
Xmatches either @code{x} or @code{y}.
X@item x#
Xmatches zero or more occurrences of the pattern @code{x}.
X@item x##
Xmatches one or more occurrences of the pattern @code{x}.
X@end table
X
X@noindent
XParentheses may be used for grouping.  Note that the @code{|} character
Xmust be within parentheses, so that the lexical analyzer does not think
Xit is a pipe character.  Also note that @code{/} has a higher precedence
Xthan @code{^}; that is:@refill
X
X@code{ls ^foo/bar}
X
X@noindent
Xwill search directories in @file{.} except @file{./foo} for a file named
X@file{bar}.@refill
X
X@noindent
XA pathname component of the form @code{(@var{foo}/)#} matches a path
Xconsisting of zero or more directories matching the pattern @var{foo}.
XAs a shorthand, @code{**/} is equivalent to @code{(*/)#}.  Thus:@refill
X
X@code{ls (*/)#bar}
X
X@noindent
Xor
X
X@code{ls **/bar}
X
X@noindent
Xdoes a recursive directory search for files named @file{bar}.
X
X@cindex exclusion, globbing
X@cindex globbing, excluding patterns
X@noindent
XIf used for filename generation, a pattern may contain an exclusion
Xspecifier.  Such patterns are of the form @var{pat1}~@var{pat2}.
XThis pattern will generate all files matching @var{pat1}, but which do
Xnot match @var{pat2}.  For example, @samp{*.c~lex.c} will match all
Xfiles ending in @file{.c}, except the file @file{lex.c}.@refill
X
X@cindex qualifiers, globbing
X@cindex globbing, qualifiers
X@noindent
XPatterns used for filename generation may also end in a list of
Xqualifiers enclosed in parentheses.  The qualifiers specify which
Xfilenames that otherwise match the given pattern will be inserted in the
Xargument list.  A qualifier may be any one of the following:
X
X@table @code
X@item /
Xdirectories
X@item .
Xplain files
X@item @@
Xsymbolic links
X@item =
Xsockets
X@item p
Xnamed pipes (FIFOs)
X@item *
Xexecutable plain files (0100)
X@item %
Xdevice files (character or block special)
X@item r
Xreadable files (0400)
X@item w
Xwritable files (0200)
X@item x
Xexecutable files (0100)
X@item R
Xworld-readable files (0004)
X@item W
Xworld-writable files (0002)
X@item X
Xworld-executable files (0001)
X@item s
Xsetuid files (04000)
X@item S
Xsetgid files (02000)
X@item d@var{dev}
Xfiles on the device @var{dev}
X@item l@var{ct}
Xfiles having a link count of @var{ct}
X@item U
Xfiles owned by the effective user id
X@item G
Xfiles owned by the effective group id
X@item u@var{num}
Xfiles owned by user id @var{num}
X@item g@var{num}
Xfiles owned by group id @var{num}
X@item a[+-]@var{n}
Xfiles accessed within last @var{n} days (@code{-}), more than @var{n}
Xdays ago (@code{+}), or exactly @var{n} days ago.@refill
X@item m[+-]@var{n}
Xfiles modified within last @var{n} days (@code{-}), more than @var{n}
Xdays ago (@code{+}), or exactly @var{n} days ago.@refill
X@item c[+-]@var{n}
Xfiles whose inode changed within last @var{n} days (@code{-}), more than
X@var{n} days ago (@code{+}), or exactly @var{n} days ago.@refill
X@item L[+-]@var{bytes}
Xfiles less than @var{n} bytes (@code{-}), more than @var{n} bytes
X(@code{+}), or exactly @var{n} bytes in length.@refill
X@item ^
Xnegates all qualifiers following it
X@item M
X@pindex MARK_DIRS, setting in pattern
Xsets the @code{MARK_DIRS} option for the current pattern
X@item N
X@pindex NULL_GLOB, setting in pattern
Xsets the @code{NULL_GLOB} option for the current pattern
X@item D
X@pindex GLOB_DOTS, setting in pattern
Xsets the @code{GLOB_DOTS} option for the current pattern
X@end table
X
X@noindent
XThus:
X
X@code{ls *(%W)}
X
X@noindent
Xlists all world-writable device files in the current directory,
Xand@refill
X
X@code{ls /tmp/foo*(u0^@@)}
X
X@noindent
Xlists all root-owned files beginning with the string @samp{foo} in
X@file{/tmp}, ignoring symlinks, and@refill
X
X@code{ls *.*~(lex|parse).[ch](^D^l1)}
X
X@noindent
Xlists all files having a link count of one whose names contain a dot
X(but not those starting with a dot, since @code{GLOB_DOTS} is explicitly
Xswitched off) except for @file{lex.c}, @file{lex.h}, @file{parse.c}, and
X@file{parse.h}.  A @code{/} at the end of a pattern is equivalent to
X@code{(/)}.@refill
X
X@node Redirection, Command Execution, Expansion, Top
X@chapter Redirection
X@cindex redirection
X
X@cindex file descriptors
X@cindex descriptors, file
X@noindent
XBefore a command is executed, its input and output may be redirected.
XThe following may appear anywhere in a simple-command or may precede or
Xfollow a complex command.  Substitution occurs before @var{word} is used
Xexcept as noted below.  If the result of substitution on @var{word}
Xproduces more than one filename, redirection occurs for each separate
Xfilename in turn.@refill
X
X@table @code
X@item < @var{word}
XOpen file @var{word} as standard input.
X
X@item > @var{word}
X@pindex NO_CLOBBER, use of
XOpen file @var{word} as standard output.  If the file does not exist
Xthen it is created.  If the file exists, and the @code{NO_CLOBBER}
Xoption is set, this causes an error; otherwise, it is truncated to zero
Xlength.@refill
X
X@item >! @var{word}
XSame as @code{>}, except that the file is truncated to zero length if it
Xexists, even if @code{NO_CLOBBER} is set.@refill
X
X@item >> @var{word}
XOpen file @var{word} as standard output.  If the file exists then output
Xis appended to it.  If the file does not exist, and the
X@code{NO_CLOBBER} option is set, this causes an error; otherwise, the
Xfile is created.@refill
X
X@item >>! @var{word}
XSame as @code{>>}, except that the file is created if it does not exist,
Xeven if @code{NO_CLOBBER} is set.@refill
X
X@item <<[-] @var{word}
XThe shell input is read up to a line that is the same as @var{word}, or
Xto an end-of-file.  No parameter substitution, command substitution or
Xfilename generation is performed on @var{word}.  The resulting document,
Xcalled a @dfn{here-document}, becomes the standard input.  If any
Xcharacter of @var{word} is quoted with single or double quotes
Xor a @code{\}, no interpretation is placed
Xupon the characters of the document.  Otherwise, parameter and command
Xsubstitution occurs, @code{\} followed by a newline is removed, and
X@code{\} must be used to quote the characters @code{\}, @code{$},
X@code{`}, and the first character of @var{word}.  If @code{<<-} is used,
Xthen all leading tabs are stripped from @var{word} and from the
Xdocument.@refill
X
X@item <<< @var{word}
XOpen a file containing @var{word}, after expansion, as standard input.
X
X@item <& @var{digit}
XThe standard input is duplicated from file descriptor @var{digit} (see
X@code{dup(2)}).  Similarly for standard output using
X@code{>&@var{digit}}.@refill
X
X@item >& @var{word}
XSame as @code{> @var{word} 2>&1}.
X
X@item >>& @var{word}
XSame as @code{>> @var{word} 2>&1}.
X
X@item <&-
XClose the standard input.
X
X@item >&-
XClose the standard output.
X
X@item <&p
XThe input from the coprocess is moved to the standard input.
X
X@item >&p
XThe output to the coprocess is moved to the standard output.
X@end table
X
X@noindent
XIf one of the above is preceded by a digit, then the file descriptor
Xreferred to is that specified by the digit (instead of the default 0 or
X1).  The order in which redirections are specified is significant.  The
Xshell evaluates each redirection in terms of the (@var{file descriptor},
X@var{file}) association at the time of evaluation.  For example:@refill
X
X@code{@dots{} 1>@var{fname} 1>&1}
X
X@noindent
Xfirst associates file descriptor 1 with file @var{fname}.  It then
Xassociates file descriptor 2 with the file associated with file
Xdescriptor 1 (that is, @var{fname}).  If the order of redirections were
Xreversed, file descriptor 2 would be associated with the terminal
X(assuming file descriptor 1 had been) and then file descriptor 1 would
Xbe associated with file @var{fname}.@refill
X
X@noindent
XIf the user tries to open a file descriptor for writing more than once,
Xthe shell opens the file descriptor as a pipe to a process that copies
Xits input to all the specified outputs, similar to @code{tee(1)}.  Thus:
X
X@code{date >foo >bar}
X
X@noindent
Xwrites the date to two files, named @file{foo} and @file{bar}.  Note
Xthat a pipe is an implicit indirection; thus
X
X@code{date >foo | cat}
X
X@noindent
Xwrites the date to the file @file{foo}, and also pipes it to @code{cat}.
X
X@noindent
XIf the user tries to open a file descriptor for reading more than once,
Xthe shell opens the file descriptor as a pipe to a process that copies
Xall the specified inputs to its output in the order specified, similar
Xto @code{cat(1)}.  Thus
X
X@code{sort <foo <fubar}
X
X@noindent
Xor even
X
X@code{sort <f@{oo,ubar@}}
X
X@noindent
Xis equivalent to @samp{cat foo fubar | sort}.  Note that a pipe is an
Ximplicit indirection; thus@refill
X
X@code{cat bar | sort <foo}
X
X@noindent
Xis equivalent to @samp{cat bar foo | sort} (note the order of the inputs).
X
X@noindent
XIf a simple command consists of one or more redirection operators and
Xzero or more parameter assignments, but no command name, the command
X@code{cat} is assumed.  Thus
X
X@code{< file}
X
X@noindent
Xprints the contents of @code{file}.
X
X@noindent
XIf a command is followed by @code{&} and job control is not active, then
Xthe default standard input for the command is the empty file
X@file{/dev/null}.  Otherwise, the environment for the execution of a
Xcommand contains the file descriptors of the invoking shell as modified
Xby input/output specifications.@refill
X
X@node Command Execution, Functions, Redirection, Top
X@chapter Command Execution
X@cindex command execution
X@cindex execution, of commands
X
X@noindent
XIf a command name contains no slashes, the shell attempts to locate it.
XIf there exists a shell function by that name, the function is invoked
Xas described below (@pxref{Functions}).  If there exists a shell builtin
Xby that name, the builtin is invoked.
X
X@vindex path, use of
X@noindent
XOtherwise, the shell searches each element of @code{path} for a directory
Xcontaining an executable file by that name.  If the search is
Xunsuccessful, the shell prints an error message and returns a nonzero
Xexit status.
X
X@noindent
XIf execution fails because the file is not in executable format, and the
Xfile is not a directory, it is assumed to be a shell script.
X@code{/bin/sh} is spawned to execute it.  If the program is a file
Xbeginning with @code{#!}, the remainder of the first line specifies an
Xinterpreter for the program.  The shell will execute the specified
Xinterpreter on operating systems that do not handle this executable
Xformat in the kernel.@refill
X
X@node Functions, Jobs & Signals, Command Execution, Top
X@chapter Functions
X@cindex functions
X
X@findex function
X@noindent
XThe @code{function} reserved word is used to define shell functions.
XShell functions are read in and stored internally.  Alias names are
Xresolved when the function is read.  Functions are executed like
Xcommands with the arguments passed as positional parameters.@refill
X
X@noindent
XFunctions execute in the same process as the caller and share all files
Xand present working directory with the caller.  A trap on @code{EXIT}
Xset inside a function is executed after the function completes in the
Xenvironment of the caller.@refill
X
X@findex return, use of
X@noindent
XThe @code{return} builtin is used to return from function calls.
X
X@findex functions, use of
X@findex unfunction, use of
X@noindent
XFunction identifiers can be listed with the @code{functions} builtin.
XFunctions can be undefined with the @code{unfunction} builtin.@refill
X
X@noindent
XThe following functions, if defined, have special meaning to the shell:
X
X@table @code
X@findex chpwd
X@item chpwd
XExecuted whenever the current working directory is changed.
X
X@findex precmd
X@item precmd
XExecuted before each prompt.
X
X@vindex PERIOD
X@findex periodic
X@item periodic
XIf the parameter @code{PERIOD} is set, this function is executed every
X@code{PERIOD} seconds, just before a prompt.@refill
X
X@findex TRAPERR
X@findex TRAPDEBUG
X@findex TRAPEXIT
X@cindex signals, trapping
X@cindex trapping signals
X@item TRAP@var{xxx}
XIf defined and non-null, this function will be executed whenever the
Xshell catches a signal @code{SIG@var{xxx}}, where @var{xxx} is a signal
Xname as specified for the @code{kill} builtin 
X(@pxref{Shell Builtin Commands}).  
XIn addition, @code{TRAPERR} is executed whenever a command
Xhas a non-zero exit status, @code{TRAPDEBUG} is executed after each
Xcommand, and @code{TRAPEXIT} is executed when the shell exits, or when
Xthe current function exits if defined inside a function.  If a function
Xof this form is defined and null, the shell and processes spawned by it
Xwill ignore @code{SIG@var{xxx}}.@refill
X@end table
X
X@node Jobs & Signals, History, Functions, Top
X@chapter Jobs & Signals
X@cindex jobs
X
X@findex jobs, use of
X@pindex MONITOR, use of
X@noindent
XIf the @code{MONITOR} option is set, an interactive shell associates a
X@dfn{job} with each pipeline.  It keeps a table of current jobs,
Xprinted by the @code{jobs} command, and assigns them small integer
Xnumbers.  When a job is started asynchronously with @code{&}, the shell
Xprints a line which looks like:@refill
X
X@code{[1] 1234}
X
X@noindent
Xindicating that the job which was started asynchronously was job number
X1 and had one (top-level) process, whose process id was 1234.
X
X@kindex CTRL-Z
X@cindex jobs, suspending
X@cindex suspending jobs
X@findex fg, use of
X@findex bg, use of
X@noindent
XIf you are running a job and wish to do something else you may hit the
Xkey @ctrl{Z} (control-Z) which sends a @code{STOP} signal to the current
Xjob.  The shell will then normally indicate that the job has been
X@dfn{suspended}, and print another prompt.  You can then manipulate the
Xstate of this job, putting it in the background with the @code{bg}
Xcommand, or run some other commands and then eventually bring the job
Xback into the foreground with the foreground command @code{fg}.  A
X@ctrl{Z} takes effect immediately and is like an interrupt in that
Xpending output and unread input are discarded when it is typed.@refill
X
X@cindex jobs, background, IO
X@cindex background jobs, IO
X@noindent
XA job being run in the background will suspend if it tries to read from
Xthe terminal.  Background jobs are normally allowed to produce output,
Xbut this can be disabled by giving the command @code{stty tostop}.  If
Xyou set this tty option, then background jobs will suspend when they try
Xto produce output like they do when they try to read input.@refill
X
X@cindex jobs, referring to
X@cindex referring to jobs
X@noindent
XThere are several ways to refer to jobs in the shell.  A job can be
Xreferred to by the process id of any process of the job or by one of the
Xfollowing:
X
X@table @code
X@item %@var{number}
XThe job with the given number.
X@item %@var{string}
XAny job whose command line begins with @var{string}.
X@item %?@var{string}
XAny job whose command line contains @var{string}.
X@item %%
XCurrent job.
X@item %+
XEquivalent to @code{%%}.
X@item %-
XPrevious job.
X@end table
X
X@findex notify, use of
X@noindent
XThe shell learns immediately whenever a process changes state.  It
Xnormally informs you whenever a job becomes blocked so that no further
Xprogress is possible.  If @code{notify} is not set, it waits until just
Xbefore it prints a prompt before it informs you.@refill
X
X@noindent
XWhen the monitor mode is on, each background job that completes triggers
Xany trap set for @code{CHLD}.
X
X@findex disown, use of
X@cindex jobs, disowning
X@cindex disowning jobs
X@noindent
XWhen you try to leave the shell while jobs are running or suspended, you
Xwill be warned that @samp{You have suspended (running) jobs}.  You may
Xuse the @code{jobs} command to see what they are.  If you do this or
Ximmediately try to exit again, the shell will not warn you a second
Xtime; the suspended jobs will be terminated, and the running jobs will
Xbe sent a @code{SIGHUP} signal.  To avoid having the shell terminate the
Xrunning jobs, either use the @code{nohup(1)} command or the
X@code{disown} builtin (@pxref{Shell Builtin Commands}).@refill
X
X@cindex signals
X@noindent
XThe @code{INT} and @code{QUIT} signals for an invoked command are
Xignored if the command is followed by @code{&} and the job @code{monitor}
Xoption is not active.  Otherwise, signals have the values inherited by
Xthe shell from its parent (but @xref{Functions}, for the
X@code{TRAP@var{xxx}} special functions).@refill
X
X@node History, Arithmetic Evaluation, Jobs & Signals, Top
X@chapter History
X@cindex history
X
X@vindex HISTSIZE, use of
X@noindent
XHistory substitution allows you to use words from previous command lines
Xin the command line you are typing.  This simplifies spelling
Xcorrections and the repetition of complicated commands or arguments.
XCommand lines are saved in the history list, the size of which is
Xcontrolled by the @code{HISTSIZE} variable.  The most recent command is
Xretained in any case.  A history substitution begins with a @code{!} and
Xmay occur anywhere on the command line; history substitutions do not
Xnest.  The @code{!} can be escaped with @code{\} to suppress its special
Xmeaning.  Single or double quotes will @emph{not} work for this.@refill
X
X@noindent
XInput lines containing history substitutions are echoed on the terminal
Xafter being expanded, but before any other substitutions take place or
Xthe command gets executed.
X
X@menu
X* Event Designators::           
X* Word Designators::            
X* Modifiers::                   
X@end menu
X
X@node Event Designators, Word Designators,  , History
X@section Event Designators
X@cindex history event designators
X@cindex event designators, history
X
X@noindent
XAn event designator is a reference to a command line entry in the
Xhistory list.
X
X@table @code
X@item !
XStart a history substitution, except when followed by a blank, newline,
X@code{=}, or @code{(}.
X@item !!
XRefer to the previous command.  By itself, this substitution repeats the
Xprevious command.
X@item !n
XRefer to command line @var{n}.
X@item !-n
XRefer to the current command line minus @var{n}.
X@item !str
XRefer to the most recent command starting with @var{str}.
X@item !?@var{str}[?]
XRefer to the most recent command containing @var{str}.
X@item !#
XRefer to the current command line typed in so far.
X@item !@{@dots{}@}
XInsulate a history reference from adjacent characters (if necessary).
X@end table
X
X@node Word Designators, Modifiers, Event Designators, History
X@section Word Designators
X@cindex history word designators
X@cindex word designators, history
X
X@noindent
XA @code{:} separates the event specification from the word designator.
XIt can be omitted if the word designator begins with a @code{,},
X@code{$}, @code{*}, @code{-} or @code{%}.  If the word is to be selected
Xfrom the previous command, the second @code{!} character can be omitted
Xfrom the event specification.  For instance, @code{!!:1} and @code{!:1}
Xboth refer to the first word of the previous command, while @code{!!$}
Xand @code{!$} both refer to the last word in the previous command.  Word
Xdesignators include:@refill
X
X@table @code
X@item 0
XThe first input word (command).
X@item @var{n}
XThe @var{n}'th argument.
X@item ^
XThe first argument, that is, @code{1}.
X@item $
XThe last argument.
X@item %
XThe word matched by (the most recent) @code{?}s search.
X@item @var{x}-@var{y}
XA range of words;  @code{-@var{y}} abbreviates @code{0-@var{y}}.
X@item *
XAll the arguments, or a null value if there is just one word in the
Xevent.
X@item @var{x}*
XAbbreviates @code{@var{x}-$}.
X@item @var{x}
XLike @code{@var{x}*} but omitting word @code{$}.
X@end table
X
X@node Modifiers,  , Word Designators, History
X@section Modifiers
X@cindex modifiers, history
X@cindex history modifiers
X
X@noindent
XAfter the optional word designator, you can add a sequence of one or
Xmore of the following modifiers, each preceded by a @code{:}.  These
Xmodifiers also work on the result of filename and parameter
Xexpansion.@refill
X
X@table @code
X@item h
XRemove a trailing pathname component, leaving the head.
X@item r
XRemove a trailing suffix of the form @code{.@var{xxx}}, leaving the
Xbasename.@refill
X@item e
XRemove all but the suffix.
X@item t
XRemove all leading pathname components, leaving the tail.
X@item &
XRepeat the previous substitution.
X@item g
XApply the change to the first occurrence of a match in each word, by
Xprefixing the above (for example, @code{g&}).
X@item p
XPrint the new command but do not execute it.
X@item q
XQuote the substituted words, escaping further substitutions.
X@item x
XLike @code{q}, but break into words at each blank.
X@item l
XConvert the words to all lowercase.
X@item u
XConvert the words to all uppercase.
X@item s/@var{l}/@var{r}[/]
XSubstitute @var{r} for @var{l}.
X@end table
X
X@noindent
XUnless preceded by a @code{g}, the substitution is done only for the
Xfirst string that matches @var{l}.
X
X@noindent
XThe left-hand side of substitutions are not regular expressions, but
Xcharacter strings.  Any character can be used as the delimiter in place
Xof @code{/}.  A backslash quotes the delimiter character.  The character
X@code{&}, in the right-hand side, is replaced by the text from the
Xleft-hand side.  The @code{&} can be quoted with a backslash.  A null
X@var{l} uses the previous string either from a @var{l} or from a
Xcontextual scan string @var{s} from @code{!?@var{s}}.  You can omit the
Xrightmost delimiter if a newline immediately follows @var{r}; the
Xrightmost @code{?} in a context scan can similarly be omitted.@refill
X
X@noindent
XWithout an event specification, a history reference refers either to the
Xprevious command, or to a previous history reference on the command line
X(if any).
X
X@noindent
XThe character sequence @samp{^foo^bar} repeats the last command,
Xreplacing the string @samp{foo} with the string @samp{bar}.@refill
X
X@cindex history, disabling
X@cindex disabling history
X@noindent
XIf the shell encounters the character sequence @code{!"} in the input,
Xthe history mechanism is temporarily disabled until the current list is
Xfully parsed.  The @code{!"} is removed from the input, and any
Xsubsequent @code{!} characters have no special significance.@refill
X
X@findex fc, use of
X@noindent
XA less convenient but more comprehensible form of command history
Xsupport is provided by the @code{fc} builtin 
X(@pxref{Shell Builtin Commands}).
X
X@node Arithmetic Evaluation, Conditional Expressions, History, Top
X@chapter Arithmetic Evaluation
X@cindex arithmetic evaluation
X@cindex evaluation, arithmetic
X
X@noindent
XAn ability to perform integer arithmetic is provided with the builtin
X@code{let}.  Evaluations are performed using @emph{long} arithmetic.
XConstants are of the form @code{[@var{base}#]@var{n}} where @var{base}
Xis a decimal number between two and thirty-six representing the
Xarithmetic base and @var{n} is a number in that base.  If @var{base} is
Xomitted then base 10 is used.@refill
X
X@cindex arithmetic operators
X@cindex operators, arithmetic
X@noindent
XAn arithmetic expression uses nearly the same syntax, precedence, and
END_OF_FILE
  if test 49503 -ne `wc -c <'doc/zsh.texi.01'`; then
    echo shar: \"'doc/zsh.texi.01'\" unpacked with wrong size!
  fi
  # end of 'doc/zsh.texi.01'
fi
if test -f 'help/TRAP' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'help/TRAP'\"
else
  echo shar: Extracting \"'help/TRAP'\" \(640 characters\)
  sed "s/^X//" >'help/TRAP' <<'END_OF_FILE'
X     TRAPxxx
X          If defined and non-null, this function will be executed
X          whenever  the  shell catches a signal SIGxxx, where xxx
X          is a signal name as specified for the kill builtin (see
X          below).   In  addition,  TRAPERR is executed whenever a
X          command has a non-zero exit status, TRAPDEBUG  is  exe-
X          cuted after each command, and TRAPEXIT is executed when
X          the shell exits, or when the current function exits  if
X          defined  inside a function.  If a function of this form
X          is defined and null, the shell and processes spawned by
X          it will ignore SIGxxx.
END_OF_FILE
  if test 640 -ne `wc -c <'help/TRAP'`; then
    echo shar: \"'help/TRAP'\" unpacked with wrong size!
  fi
  # end of 'help/TRAP'
fi
if test -f 'help/fc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'help/fc'\"
else
  echo shar: Extracting \"'help/fc'\" \(1743 characters\)
  sed "s/^X//" >'help/fc' <<'END_OF_FILE'
X     fc [ -e ename ] [ -nlrdD ] [ old=new ... ] [ first [ last ] ]
X     fc -ARW [ filename ]
X          Select a range of commands from first to last from  the
X          history  list.   The  arguments  first  and last may be
X          specified as a number  or  as  a  string.   A  negative
X          number  is  used  as  an  offset to the current history
X          event number.  A string specifies the most recent event
X          beginning  with  the  given  string.  All substitutions
X          old=new, if any, are then performed  on  the  commands.
X          If  the  -l  flag  is given, the resulting commands are
X          listed on standard output.  Otherwise the  editor  pro-
X          gram  ename  is invoked on a file containing these his-
X          tory events.  If ename is not given, the value  of  the
X          parameter  FCEDIT  is used.  If ename is "-", no editor
X          is invoked.   When  editing  is  complete,  the  edited
X          command(s)  is  executed. If first is not specified, it
X          will be set to -1 (the most recent event), or to -16 if
X          the  -l  flag  is  given.  If last is not specified, it
X          will be set to first, or to -1 if the -l flag is given.
X          The  flag -r reverses the order of the commands and the
X          flag -n suppresses command numbers when listing.   Also
X          when  listing,  -d  prints datestamps for each command,
X          and -D prints real execution times.
X
X          fc -R reads the history from  the  given  file,  fc  -W
X          writes  the  history  out  to the given file, and fc -A
X          appends the history out to the given file.
X     history [ -nr ] [ first [ last ] ]
X          Same as fc -l.
X     r    Equivalent to fc -e -.
END_OF_FILE
  if test 1743 -ne `wc -c <'help/fc'`; then
    echo shar: \"'help/fc'\" unpacked with wrong size!
  fi
  # end of 'help/fc'
fi
echo shar: End of archive 5 \(of 22\).
cp /dev/null ark5isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 22 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0

exit 0 # Just in case...
