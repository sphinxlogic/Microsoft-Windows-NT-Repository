Newsgroups: comp.sources.misc
From: robertd@kauri.vuw.ac.nz (Robert Davies)
Subject: v34i114:  newmat07 - A matrix package in C++, Part08/08
Message-ID: <1993Jan11.153535.3321@sparky.imd.sterling.com>
X-Md4-Signature: 16959256358d18f71652cd8d6519edc7
Date: Mon, 11 Jan 1993 15:35:35 GMT
Approved: kent@sparky.imd.sterling.com

Submitted-by: robertd@kauri.vuw.ac.nz (Robert Davies)
Posting-number: Volume 34, Issue 114
Archive-name: newmat07/part08
Environment: C++
Supersedes: newmat06: Volume 34, Issue 7-13

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 8 (of 8)."
# Contents:  tmt.mak tmt_b.mak tmt_ms.mak tmt_z.mak
# Wrapped by robert@kea on Sun Jan 10 23:58:46 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'tmt.mak' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tmt.mak'\"
else
echo shar: Extracting \"'tmt.mak'\" \(2558 characters\)
sed "s/^X//" >'tmt.mak' <<'END_OF_FILE'
XOBJ = fft.o evalue.o submat.o cholesky.o hholder.o sort.o newmatrm.o     \
X  jacobi.o tmtf.o svd.o tmte.o tmtd.o newmat8.o tmtc.o tmtb.o            \
X  newmat7.o newmat6.o newmat5.o newmat3.o newmat4.o newmat2.o newmat1.o  \
X  tmt.o tmt1.o tmt2.o tmt3.o tmt4.o tmt5.o tmt6.o tmt7.o tmt8.o          \
X  tmt9.o tmta.o tmtg.o tmth.o tmti.o bandmat.o except.o newmatex.o
X
Xtmt:          $(OBJ)
X	      g++ -o $@ $(OBJ) -lm
X
X%.o:          %.cxx
X	      g++ -c $*.cxx
X
Xnewmatxx:     include.h newmat.h boolean.h except.h
X	      rm -f newmatxx
X	      echo "main .h files uptodate?" > newmatxx
X
Xexcept.o:     except.h except.cxx
X
Xnewmatex.o:   newmatxx newmatex.cxx
X
Xexample.o:    newmatxx newmatap.h example.cxx
X
Xcholesky.o:   newmatxx cholesky.cxx
X
Xevalue.o:     newmatxx newmatrm.h precisio.h evalue.cxx
X
Xfft.o:        newmatxx newmatap.h fft.cxx
X
Xhholder.o:    newmatxx newmatap.h hholder.cxx
X
Xjacobi.o:     newmatxx precisio.h newmatrm.h jacobi.cxx
X
Xbandmat.o:    newmatxx newmatrc.h controlw.h bandmat.cxx
X
Xnewmat1.o:    newmatxx newmat1.cxx
X
Xnewmat2.o:    newmatxx newmatrc.h controlw.h newmat2.cxx
X
Xnewmat3.o:    newmatxx newmatrc.h controlw.h newmat3.cxx
X
Xnewmat4.o:    newmatxx newmatrc.h controlw.h newmat4.cxx
X
Xnewmat5.o:    newmatxx newmatrc.h controlw.h newmat5.cxx
X
Xnewmat6.o:    newmatxx newmatrc.h controlw.h newmat6.cxx
X
Xnewmat7.o:    newmatxx newmatrc.h controlw.h newmat7.cxx
X
Xnewmat8.o:    newmatxx newmatap.h newmat8.cxx
X
Xnewmat9.o:    newmatxx newmatrc.h controlw.h newmatio.h newmat9.cxx
X
Xnewmatrm.o:   newmatxx newmatrm.h newmatrm.cxx
X
Xsort.o:       newmatxx newmatap.h sort.cxx
X
Xsubmat.o:     newmatxx newmatrc.h controlw.h submat.cxx
X
Xsvd.o:        newmatxx newmatrm.h precisio.h svd.cxx
X
Xtmt.o:        newmatxx newmatap.h tmt.cxx 
X
Xtmt1.o:       newmatxx newmatap.h tmt1.cxx 
X
Xtmt2.o:       newmatxx newmatap.h tmt2.cxx 
X
Xtmt3.o:       newmatxx newmatap.h tmt3.cxx 
X
Xtmt4.o:       newmatxx newmatap.h tmt4.cxx 
X
Xtmt5.o:       newmatxx newmatap.h tmt5.cxx 
X
Xtmt6.o:       newmatxx newmatap.h tmt6.cxx 
X
Xtmt7.o:       newmatxx newmatap.h tmt7.cxx 
X
Xtmt8.o:       newmatxx newmatap.h tmt8.cxx 
X
Xtmt9.o:       newmatxx newmatap.h tmt9.cxx 
X
Xtmta.o:       newmatxx newmatap.h tmta.cxx 
X
Xtmtb.o:       newmatxx newmatap.h tmtb.cxx 
X
Xtmtc.o:       newmatxx newmatap.h tmtc.cxx 
X
Xtmtd.o:       newmatxx newmatap.h tmtd.cxx 
X
Xtmte.o:       newmatxx newmatap.h tmte.cxx 
X
Xtmtf.o:       newmatxx newmatap.h tmtf.cxx 
X
Xtmtg.o:       newmatxx newmatap.h tmtg.cxx 
X
Xtmth.o:       newmatxx newmatap.h tmth.cxx
X
Xtmti.o:       newmatxx newmatap.h tmti.cxx
X
X
END_OF_FILE
if test 2558 -ne `wc -c <'tmt.mak'`; then
    echo shar: \"'tmt.mak'\" unpacked with wrong size!
fi
# end of 'tmt.mak'
fi
if test -f 'tmt_b.mak' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tmt_b.mak'\"
else
echo shar: Extracting \"'tmt_b.mak'\" \(3757 characters\)
sed "s/^X//" >'tmt_b.mak' <<'END_OF_FILE'
X.AUTODEPEND
X
X#		*Translator Definitions*
XCC = bcc +TMT_B.CFG
XTASM = TASM
XTLIB = tlib
XTLINK = tlink
XLIBPATH = C:\BORLANDC\LIB
XINCLUDEPATH = C:\BORLANDC\INCLUDE
X
X
X#		*Implicit Rules*
X.c.obj:
X  $(CC) -c {$< }
X
X.cpp.obj:
X  $(CC) -c {$< }
X
X#		*List Macros*
X
X
XEXE_dependencies =  \
X tmti.obj \
X except.obj \
X newmatex.obj \
X tmth.obj \
X bandmat.obj \
X fft.obj \
X newmat9.obj \
X evalue.obj \
X submat.obj \
X cholesky.obj \
X hholder.obj \
X sort.obj \
X newmatrm.obj \
X jacobi.obj \
X tmtf.obj \
X svd.obj \
X tmte.obj \
X tmtd.obj \
X newmat8.obj \
X tmtc.obj \
X tmtb.obj \
X newmat7.obj \
X newmat6.obj \
X newmat5.obj \
X newmat3.obj \
X newmat4.obj \
X newmat2.obj \
X newmat1.obj \
X tmt.obj \
X tmt1.obj \
X tmt2.obj \
X tmt3.obj \
X tmt4.obj \
X tmt5.obj \
X tmt6.obj \
X tmt7.obj \
X tmt8.obj \
X tmt9.obj \
X tmta.obj \
X tmtg.obj
X
X#		*Explicit Rules*
Xtmt_b.exe: tmt_b.cfg $(EXE_dependencies)
X  $(TLINK) /v/x/c/d/P-/L$(LIBPATH) @&&|
Xc0l.obj+
Xtmti.obj+
Xexcept.obj+
Xnewmatex.obj+
Xtmth.obj+
Xbandmat.obj+
Xfft.obj+
Xnewmat9.obj+
Xevalue.obj+
Xsubmat.obj+
Xcholesky.obj+
Xhholder.obj+
Xsort.obj+
Xnewmatrm.obj+
Xjacobi.obj+
Xtmtf.obj+
Xsvd.obj+
Xtmte.obj+
Xtmtd.obj+
Xnewmat8.obj+
Xtmtc.obj+
Xtmtb.obj+
Xnewmat7.obj+
Xnewmat6.obj+
Xnewmat5.obj+
Xnewmat3.obj+
Xnewmat4.obj+
Xnewmat2.obj+
Xnewmat1.obj+
Xtmt.obj+
Xtmt1.obj+
Xtmt2.obj+
Xtmt3.obj+
Xtmt4.obj+
Xtmt5.obj+
Xtmt6.obj+
Xtmt7.obj+
Xtmt8.obj+
Xtmt9.obj+
Xtmta.obj+
Xtmtg.obj
Xtmt_b
X		# no map file
Xfp87.lib+
Xmathl.lib+
Xcl.lib
X|
X
X
X#		*Individual File Dependencies*
Xtmti.obj: tmt_b.cfg tmti.cxx 
X	$(CC) -c tmti.cxx
X
Xexcept.obj: tmt_b.cfg except.cxx 
X	$(CC) -c except.cxx
X
Xnewmatex.obj: tmt_b.cfg newmatex.cxx 
X	$(CC) -c newmatex.cxx
X
Xtmth.obj: tmt_b.cfg tmth.cxx 
X	$(CC) -c tmth.cxx
X
Xbandmat.obj: tmt_b.cfg bandmat.cxx 
X	$(CC) -c bandmat.cxx
X
Xfft.obj: tmt_b.cfg fft.cxx 
X	$(CC) -c fft.cxx
X
Xnewmat9.obj: tmt_b.cfg newmat9.cxx 
X	$(CC) -c newmat9.cxx
X
Xevalue.obj: tmt_b.cfg evalue.cxx 
X	$(CC) -c evalue.cxx
X
Xsubmat.obj: tmt_b.cfg submat.cxx 
X	$(CC) -c submat.cxx
X
Xcholesky.obj: tmt_b.cfg cholesky.cxx 
X	$(CC) -c cholesky.cxx
X
Xhholder.obj: tmt_b.cfg hholder.cxx 
X	$(CC) -c hholder.cxx
X
Xsort.obj: tmt_b.cfg sort.cxx 
X	$(CC) -c sort.cxx
X
Xnewmatrm.obj: tmt_b.cfg newmatrm.cxx 
X	$(CC) -c newmatrm.cxx
X
Xjacobi.obj: tmt_b.cfg jacobi.cxx 
X	$(CC) -c jacobi.cxx
X
Xtmtf.obj: tmt_b.cfg tmtf.cxx 
X	$(CC) -c tmtf.cxx
X
Xsvd.obj: tmt_b.cfg svd.cxx 
X	$(CC) -c svd.cxx
X
Xtmte.obj: tmt_b.cfg tmte.cxx 
X	$(CC) -c tmte.cxx
X
Xtmtd.obj: tmt_b.cfg tmtd.cxx 
X	$(CC) -c tmtd.cxx
X
Xnewmat8.obj: tmt_b.cfg newmat8.cxx 
X	$(CC) -c newmat8.cxx
X
Xtmtc.obj: tmt_b.cfg tmtc.cxx 
X	$(CC) -c tmtc.cxx
X
Xtmtb.obj: tmt_b.cfg tmtb.cxx 
X	$(CC) -c tmtb.cxx
X
Xnewmat7.obj: tmt_b.cfg newmat7.cxx 
X	$(CC) -c newmat7.cxx
X
Xnewmat6.obj: tmt_b.cfg newmat6.cxx 
X	$(CC) -c newmat6.cxx
X
Xnewmat5.obj: tmt_b.cfg newmat5.cxx 
X	$(CC) -c newmat5.cxx
X
Xnewmat3.obj: tmt_b.cfg newmat3.cxx 
X	$(CC) -c newmat3.cxx
X
Xnewmat4.obj: tmt_b.cfg newmat4.cxx 
X	$(CC) -c newmat4.cxx
X
Xnewmat2.obj: tmt_b.cfg newmat2.cxx 
X	$(CC) -c newmat2.cxx
X
Xnewmat1.obj: tmt_b.cfg newmat1.cxx 
X	$(CC) -c newmat1.cxx
X
Xtmt.obj: tmt_b.cfg tmt.cxx 
X	$(CC) -c tmt.cxx
X
Xtmt1.obj: tmt_b.cfg tmt1.cxx 
X	$(CC) -c tmt1.cxx
X
Xtmt2.obj: tmt_b.cfg tmt2.cxx 
X	$(CC) -c tmt2.cxx
X
Xtmt3.obj: tmt_b.cfg tmt3.cxx 
X	$(CC) -c tmt3.cxx
X
Xtmt4.obj: tmt_b.cfg tmt4.cxx 
X	$(CC) -c tmt4.cxx
X
Xtmt5.obj: tmt_b.cfg tmt5.cxx 
X	$(CC) -c tmt5.cxx
X
Xtmt6.obj: tmt_b.cfg tmt6.cxx 
X	$(CC) -c tmt6.cxx
X
Xtmt7.obj: tmt_b.cfg tmt7.cxx 
X	$(CC) -c tmt7.cxx
X
Xtmt8.obj: tmt_b.cfg tmt8.cxx 
X	$(CC) -c tmt8.cxx
X
Xtmt9.obj: tmt_b.cfg tmt9.cxx 
X	$(CC) -c tmt9.cxx
X
Xtmta.obj: tmt_b.cfg tmta.cxx 
X	$(CC) -c tmta.cxx
X
Xtmtg.obj: tmt_b.cfg tmtg.cxx 
X	$(CC) -c tmtg.cxx
X
X#		*Compiler Configuration File*
Xtmt_b.cfg: tmt_b.mak
X  copy &&|
X-ml
X-3
X-f287
X-N
X-H=TMT_B.SYM
X-weas
X-wpre
X-I$(INCLUDEPATH)
X-L$(LIBPATH)
X-P.C
X| tmt_b.cfg
X
X
END_OF_FILE
if test 3757 -ne `wc -c <'tmt_b.mak'`; then
    echo shar: \"'tmt_b.mak'\" unpacked with wrong size!
fi
# end of 'tmt_b.mak'
fi
if test -f 'tmt_ms.mak' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tmt_ms.mak'\"
else
echo shar: Extracting \"'tmt_ms.mak'\" \(23756 characters\)
sed "s/^X//" >'tmt_ms.mak' <<'END_OF_FILE'
XORIGIN = PWB
XORIGIN_VER = 2.0
XPROJ = TMT_MS
XPROJFILE = TMT_MS.MAK
XDEBUG = 0
X
XCC  = cl
XCFLAGS_G  = /AL /G2 /BATCH
XCFLAGS_D  = /f /Od /Zi
XCFLAGS_R  = /f- /Ot
XCXX  = cl
XCXXFLAGS_G  = /AL /BATCH
XCXXFLAGS_D  = /f /Od /Zi
XCXXFLAGS_R  = /f- /Ot
XMAPFILE_D  = NUL
XMAPFILE_R  = NUL
XLFLAGS_G  = /NOI /STACK:4096 /BATCH /ONERROR:NOEXE
XLFLAGS_D  = /CO /FAR /PACKC
XLFLAGS_R  = /EXE /FAR /PACKC
XLINKER	= link
XILINK  = ilink
XLRF  = echo > NUL
XILFLAGS  = /a /e
XBSCMAKE  = bscmake
XSBRPACK  = sbrpack
XNMAKEBSC1  = set
XNMAKEBSC2  = nmake
X
XFILES  = EXCEPT.CXX BANDMAT.CXX CHOLESKY.CXX EVALUE.CXX FFT.CXX HHOLDER.CXX\
X	JACOBI.CXX NEWMAT1.CXX NEWMAT2.CXX NEWMAT3.CXX NEWMAT4.CXX NEWMAT5.CXX\
X	NEWMAT6.CXX NEWMAT7.CXX NEWMAT8.CXX NEWMAT9.CXX NEWMATEX.CXX\
X	NEWMATRM.CXX SORT.CXX SUBMAT.CXX SVD.CXX TMT.CXX TMT1.CXX TMT2.CXX\
X	TMT3.CXX TMT4.CXX TMT5.CXX TMT6.CXX TMT7.CXX TMT8.CXX TMT9.CXX\
X	TMTA.CXX TMTB.CXX TMTC.CXX TMTD.CXX TMTE.CXX TMTF.CXX TMTG.CXX\
X	TMTH.CXX TMTI.CXX
XOBJS  = EXCEPT.obj BANDMAT.obj CHOLESKY.obj EVALUE.obj FFT.obj HHOLDER.obj\
X	JACOBI.obj NEWMAT1.obj NEWMAT2.obj NEWMAT3.obj NEWMAT4.obj NEWMAT5.obj\
X	NEWMAT6.obj NEWMAT7.obj NEWMAT8.obj NEWMAT9.obj NEWMATEX.obj\
X	NEWMATRM.obj SORT.obj SUBMAT.obj SVD.obj TMT.obj TMT1.obj TMT2.obj\
X	TMT3.obj TMT4.obj TMT5.obj TMT6.obj TMT7.obj TMT8.obj TMT9.obj\
X	TMTA.obj TMTB.obj TMTC.obj TMTD.obj TMTE.obj TMTF.obj TMTG.obj\
X	TMTH.obj TMTI.obj
XSBRS  = EXCEPT.sbr BANDMAT.sbr CHOLESKY.sbr EVALUE.sbr FFT.sbr HHOLDER.sbr\
X	JACOBI.sbr NEWMAT1.sbr NEWMAT2.sbr NEWMAT3.sbr NEWMAT4.sbr NEWMAT5.sbr\
X	NEWMAT6.sbr NEWMAT7.sbr NEWMAT8.sbr NEWMAT9.sbr NEWMATEX.sbr\
X	NEWMATRM.sbr SORT.sbr SUBMAT.sbr SVD.sbr TMT.sbr TMT1.sbr TMT2.sbr\
X	TMT3.sbr TMT4.sbr TMT5.sbr TMT6.sbr TMT7.sbr TMT8.sbr TMT9.sbr\
X	TMTA.sbr TMTB.sbr TMTC.sbr TMTD.sbr TMTE.sbr TMTF.sbr TMTG.sbr\
X	TMTH.sbr TMTI.sbr
X
Xall: $(PROJ).exe
X
X.SUFFIXES:
X.SUFFIXES:
X.SUFFIXES: .obj .sbr .cxx
X
XEXCEPT.obj : EXCEPT.CXX include.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoEXCEPT.obj EXCEPT.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoEXCEPT.obj EXCEPT.CXX
X<<
X!ENDIF
X
XEXCEPT.sbr : EXCEPT.CXX include.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FREXCEPT.sbr EXCEPT.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FREXCEPT.sbr EXCEPT.CXX
X<<
X!ENDIF
X
XBANDMAT.obj : BANDMAT.CXX include.h newmat.h newmatrc.h boolean.h except.h\
X	controlw.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoBANDMAT.obj BANDMAT.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoBANDMAT.obj BANDMAT.CXX
X<<
X!ENDIF
X
XBANDMAT.sbr : BANDMAT.CXX include.h newmat.h newmatrc.h boolean.h except.h\
X	controlw.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRBANDMAT.sbr BANDMAT.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRBANDMAT.sbr BANDMAT.CXX
X<<
X!ENDIF
X
XCHOLESKY.obj : CHOLESKY.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoCHOLESKY.obj CHOLESKY.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoCHOLESKY.obj CHOLESKY.CXX
X<<
X!ENDIF
X
XCHOLESKY.sbr : CHOLESKY.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRCHOLESKY.sbr CHOLESKY.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRCHOLESKY.sbr CHOLESKY.CXX
X<<
X!ENDIF
X
XEVALUE.obj : EVALUE.CXX include.h newmat.h newmatrm.h precisio.h boolean.h\
X	except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoEVALUE.obj EVALUE.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoEVALUE.obj EVALUE.CXX
X<<
X!ENDIF
X
XEVALUE.sbr : EVALUE.CXX include.h newmat.h newmatrm.h precisio.h boolean.h\
X	except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FREVALUE.sbr EVALUE.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FREVALUE.sbr EVALUE.CXX
X<<
X!ENDIF
X
XFFT.obj : FFT.CXX include.h newmatap.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoFFT.obj FFT.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoFFT.obj FFT.CXX
X<<
X!ENDIF
X
XFFT.sbr : FFT.CXX include.h newmatap.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRFFT.sbr FFT.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRFFT.sbr FFT.CXX
X<<
X!ENDIF
X
XHHOLDER.obj : HHOLDER.CXX include.h newmatap.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoHHOLDER.obj HHOLDER.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoHHOLDER.obj HHOLDER.CXX
X<<
X!ENDIF
X
XHHOLDER.sbr : HHOLDER.CXX include.h newmatap.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRHHOLDER.sbr HHOLDER.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRHHOLDER.sbr HHOLDER.CXX
X<<
X!ENDIF
X
XJACOBI.obj : JACOBI.CXX include.h newmat.h precisio.h newmatrm.h boolean.h\
X	except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoJACOBI.obj JACOBI.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoJACOBI.obj JACOBI.CXX
X<<
X!ENDIF
X
XJACOBI.sbr : JACOBI.CXX include.h newmat.h precisio.h newmatrm.h boolean.h\
X	except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRJACOBI.sbr JACOBI.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRJACOBI.sbr JACOBI.CXX
X<<
X!ENDIF
X
XNEWMAT1.obj : NEWMAT1.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoNEWMAT1.obj NEWMAT1.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoNEWMAT1.obj NEWMAT1.CXX
X<<
X!ENDIF
X
XNEWMAT1.sbr : NEWMAT1.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRNEWMAT1.sbr NEWMAT1.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRNEWMAT1.sbr NEWMAT1.CXX
X<<
X!ENDIF
X
XNEWMAT2.obj : NEWMAT2.CXX include.h newmat.h newmatrc.h boolean.h except.h\
X	controlw.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoNEWMAT2.obj NEWMAT2.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoNEWMAT2.obj NEWMAT2.CXX
X<<
X!ENDIF
X
XNEWMAT2.sbr : NEWMAT2.CXX include.h newmat.h newmatrc.h boolean.h except.h\
X	controlw.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRNEWMAT2.sbr NEWMAT2.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRNEWMAT2.sbr NEWMAT2.CXX
X<<
X!ENDIF
X
XNEWMAT3.obj : NEWMAT3.CXX include.h newmat.h newmatrc.h boolean.h except.h\
X	controlw.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoNEWMAT3.obj NEWMAT3.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoNEWMAT3.obj NEWMAT3.CXX
X<<
X!ENDIF
X
XNEWMAT3.sbr : NEWMAT3.CXX include.h newmat.h newmatrc.h boolean.h except.h\
X	controlw.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRNEWMAT3.sbr NEWMAT3.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRNEWMAT3.sbr NEWMAT3.CXX
X<<
X!ENDIF
X
XNEWMAT4.obj : NEWMAT4.CXX include.h newmat.h newmatrc.h boolean.h except.h\
X	controlw.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoNEWMAT4.obj NEWMAT4.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoNEWMAT4.obj NEWMAT4.CXX
X<<
X!ENDIF
X
XNEWMAT4.sbr : NEWMAT4.CXX include.h newmat.h newmatrc.h boolean.h except.h\
X	controlw.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRNEWMAT4.sbr NEWMAT4.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRNEWMAT4.sbr NEWMAT4.CXX
X<<
X!ENDIF
X
XNEWMAT5.obj : NEWMAT5.CXX include.h newmat.h newmatrc.h boolean.h except.h\
X	controlw.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoNEWMAT5.obj NEWMAT5.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoNEWMAT5.obj NEWMAT5.CXX
X<<
X!ENDIF
X
XNEWMAT5.sbr : NEWMAT5.CXX include.h newmat.h newmatrc.h boolean.h except.h\
X	controlw.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRNEWMAT5.sbr NEWMAT5.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRNEWMAT5.sbr NEWMAT5.CXX
X<<
X!ENDIF
X
XNEWMAT6.obj : NEWMAT6.CXX include.h newmat.h newmatrc.h boolean.h except.h\
X	controlw.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoNEWMAT6.obj NEWMAT6.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoNEWMAT6.obj NEWMAT6.CXX
X<<
X!ENDIF
X
XNEWMAT6.sbr : NEWMAT6.CXX include.h newmat.h newmatrc.h boolean.h except.h\
X	controlw.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRNEWMAT6.sbr NEWMAT6.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRNEWMAT6.sbr NEWMAT6.CXX
X<<
X!ENDIF
X
XNEWMAT7.obj : NEWMAT7.CXX include.h newmat.h newmatrc.h boolean.h except.h\
X	controlw.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoNEWMAT7.obj NEWMAT7.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoNEWMAT7.obj NEWMAT7.CXX
X<<
X!ENDIF
X
XNEWMAT7.sbr : NEWMAT7.CXX include.h newmat.h newmatrc.h boolean.h except.h\
X	controlw.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRNEWMAT7.sbr NEWMAT7.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRNEWMAT7.sbr NEWMAT7.CXX
X<<
X!ENDIF
X
XNEWMAT8.obj : NEWMAT8.CXX include.h newmatap.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoNEWMAT8.obj NEWMAT8.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoNEWMAT8.obj NEWMAT8.CXX
X<<
X!ENDIF
X
XNEWMAT8.sbr : NEWMAT8.CXX include.h newmatap.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRNEWMAT8.sbr NEWMAT8.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRNEWMAT8.sbr NEWMAT8.CXX
X<<
X!ENDIF
X
XNEWMAT9.obj : NEWMAT9.CXX include.h newmat.h newmatrc.h newmatio.h boolean.h\
X	except.h controlw.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoNEWMAT9.obj NEWMAT9.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoNEWMAT9.obj NEWMAT9.CXX
X<<
X!ENDIF
X
XNEWMAT9.sbr : NEWMAT9.CXX include.h newmat.h newmatrc.h newmatio.h boolean.h\
X	except.h controlw.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRNEWMAT9.sbr NEWMAT9.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRNEWMAT9.sbr NEWMAT9.CXX
X<<
X!ENDIF
X
XNEWMATEX.obj : NEWMATEX.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoNEWMATEX.obj NEWMATEX.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoNEWMATEX.obj NEWMATEX.CXX
X<<
X!ENDIF
X
XNEWMATEX.sbr : NEWMATEX.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRNEWMATEX.sbr NEWMATEX.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRNEWMATEX.sbr NEWMATEX.CXX
X<<
X!ENDIF
X
XNEWMATRM.obj : NEWMATRM.CXX include.h newmat.h newmatrm.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoNEWMATRM.obj NEWMATRM.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoNEWMATRM.obj NEWMATRM.CXX
X<<
X!ENDIF
X
XNEWMATRM.sbr : NEWMATRM.CXX include.h newmat.h newmatrm.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRNEWMATRM.sbr NEWMATRM.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRNEWMATRM.sbr NEWMATRM.CXX
X<<
X!ENDIF
X
XSORT.obj : SORT.CXX include.h newmatap.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoSORT.obj SORT.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoSORT.obj SORT.CXX
X<<
X!ENDIF
X
XSORT.sbr : SORT.CXX include.h newmatap.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRSORT.sbr SORT.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRSORT.sbr SORT.CXX
X<<
X!ENDIF
X
XSUBMAT.obj : SUBMAT.CXX include.h newmat.h newmatrc.h boolean.h except.h\
X	controlw.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoSUBMAT.obj SUBMAT.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoSUBMAT.obj SUBMAT.CXX
X<<
X!ENDIF
X
XSUBMAT.sbr : SUBMAT.CXX include.h newmat.h newmatrc.h boolean.h except.h\
X	controlw.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRSUBMAT.sbr SUBMAT.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRSUBMAT.sbr SUBMAT.CXX
X<<
X!ENDIF
X
XSVD.obj : SVD.CXX include.h newmat.h newmatrm.h precisio.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoSVD.obj SVD.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoSVD.obj SVD.CXX
X<<
X!ENDIF
X
XSVD.sbr : SVD.CXX include.h newmat.h newmatrm.h precisio.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRSVD.sbr SVD.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRSVD.sbr SVD.CXX
X<<
X!ENDIF
X
XTMT.obj : TMT.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoTMT.obj TMT.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoTMT.obj TMT.CXX
X<<
X!ENDIF
X
XTMT.sbr : TMT.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRTMT.sbr TMT.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRTMT.sbr TMT.CXX
X<<
X!ENDIF
X
XTMT1.obj : TMT1.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoTMT1.obj TMT1.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoTMT1.obj TMT1.CXX
X<<
X!ENDIF
X
XTMT1.sbr : TMT1.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRTMT1.sbr TMT1.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRTMT1.sbr TMT1.CXX
X<<
X!ENDIF
X
XTMT2.obj : TMT2.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoTMT2.obj TMT2.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoTMT2.obj TMT2.CXX
X<<
X!ENDIF
X
XTMT2.sbr : TMT2.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRTMT2.sbr TMT2.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRTMT2.sbr TMT2.CXX
X<<
X!ENDIF
X
XTMT3.obj : TMT3.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoTMT3.obj TMT3.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoTMT3.obj TMT3.CXX
X<<
X!ENDIF
X
XTMT3.sbr : TMT3.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRTMT3.sbr TMT3.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRTMT3.sbr TMT3.CXX
X<<
X!ENDIF
X
XTMT4.obj : TMT4.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoTMT4.obj TMT4.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoTMT4.obj TMT4.CXX
X<<
X!ENDIF
X
XTMT4.sbr : TMT4.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRTMT4.sbr TMT4.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRTMT4.sbr TMT4.CXX
X<<
X!ENDIF
X
XTMT5.obj : TMT5.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoTMT5.obj TMT5.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoTMT5.obj TMT5.CXX
X<<
X!ENDIF
X
XTMT5.sbr : TMT5.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRTMT5.sbr TMT5.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRTMT5.sbr TMT5.CXX
X<<
X!ENDIF
X
XTMT6.obj : TMT6.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoTMT6.obj TMT6.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoTMT6.obj TMT6.CXX
X<<
X!ENDIF
X
XTMT6.sbr : TMT6.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRTMT6.sbr TMT6.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRTMT6.sbr TMT6.CXX
X<<
X!ENDIF
X
XTMT7.obj : TMT7.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoTMT7.obj TMT7.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoTMT7.obj TMT7.CXX
X<<
X!ENDIF
X
XTMT7.sbr : TMT7.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRTMT7.sbr TMT7.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRTMT7.sbr TMT7.CXX
X<<
X!ENDIF
X
XTMT8.obj : TMT8.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoTMT8.obj TMT8.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoTMT8.obj TMT8.CXX
X<<
X!ENDIF
X
XTMT8.sbr : TMT8.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRTMT8.sbr TMT8.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRTMT8.sbr TMT8.CXX
X<<
X!ENDIF
X
XTMT9.obj : TMT9.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoTMT9.obj TMT9.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoTMT9.obj TMT9.CXX
X<<
X!ENDIF
X
XTMT9.sbr : TMT9.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRTMT9.sbr TMT9.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRTMT9.sbr TMT9.CXX
X<<
X!ENDIF
X
XTMTA.obj : TMTA.CXX include.h newmatap.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoTMTA.obj TMTA.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoTMTA.obj TMTA.CXX
X<<
X!ENDIF
X
XTMTA.sbr : TMTA.CXX include.h newmatap.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRTMTA.sbr TMTA.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRTMTA.sbr TMTA.CXX
X<<
X!ENDIF
X
XTMTB.obj : TMTB.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoTMTB.obj TMTB.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoTMTB.obj TMTB.CXX
X<<
X!ENDIF
X
XTMTB.sbr : TMTB.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRTMTB.sbr TMTB.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRTMTB.sbr TMTB.CXX
X<<
X!ENDIF
X
XTMTC.obj : TMTC.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoTMTC.obj TMTC.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoTMTC.obj TMTC.CXX
X<<
X!ENDIF
X
XTMTC.sbr : TMTC.CXX include.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRTMTC.sbr TMTC.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRTMTC.sbr TMTC.CXX
X<<
X!ENDIF
X
XTMTD.obj : TMTD.CXX include.h newmatap.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoTMTD.obj TMTD.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoTMTD.obj TMTD.CXX
X<<
X!ENDIF
X
XTMTD.sbr : TMTD.CXX include.h newmatap.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRTMTD.sbr TMTD.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRTMTD.sbr TMTD.CXX
X<<
X!ENDIF
X
XTMTE.obj : TMTE.CXX include.h newmatap.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoTMTE.obj TMTE.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoTMTE.obj TMTE.CXX
X<<
X!ENDIF
X
XTMTE.sbr : TMTE.CXX include.h newmatap.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRTMTE.sbr TMTE.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRTMTE.sbr TMTE.CXX
X<<
X!ENDIF
X
XTMTF.obj : TMTF.CXX include.h newmatap.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoTMTF.obj TMTF.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoTMTF.obj TMTF.CXX
X<<
X!ENDIF
X
XTMTF.sbr : TMTF.CXX include.h newmatap.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRTMTF.sbr TMTF.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRTMTF.sbr TMTF.CXX
X<<
X!ENDIF
X
XTMTG.obj : TMTG.CXX include.h newmatap.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoTMTG.obj TMTG.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoTMTG.obj TMTG.CXX
X<<
X!ENDIF
X
XTMTG.sbr : TMTG.CXX include.h newmatap.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRTMTG.sbr TMTG.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRTMTG.sbr TMTG.CXX
X<<
X!ENDIF
X
XTMTH.obj : TMTH.CXX include.h newmatap.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoTMTH.obj TMTH.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoTMTH.obj TMTH.CXX
X<<
X!ENDIF
X
XTMTH.sbr : TMTH.CXX include.h newmatap.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRTMTH.sbr TMTH.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRTMTH.sbr TMTH.CXX
X<<
X!ENDIF
X
XTMTI.obj : TMTI.CXX include.h newmatap.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FoTMTI.obj TMTI.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FoTMTI.obj TMTI.CXX
X<<
X!ENDIF
X
XTMTI.sbr : TMTI.CXX include.h newmatap.h newmat.h boolean.h except.h
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FRTMTI.sbr TMTI.CXX
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FRTMTI.sbr TMTI.CXX
X<<
X!ENDIF
X
X
X$(PROJ).exe : $(OBJS)
X!IF $(DEBUG)
X	$(LRF) @<<$(PROJ).lrf
X$(RT_OBJS: = +^
X) $(OBJS: = +^
X)
X$@
X$(MAPFILE_D)
X$(LIBS: = +^
X) +
X$(LLIBS_G: = +^
X) +
X$(LLIBS_D: = +^
X)
X$(DEF_FILE) $(LFLAGS_G) $(LFLAGS_D);
X<<
X!ELSE
X	$(LRF) @<<$(PROJ).lrf
X$(RT_OBJS: = +^
X) $(OBJS: = +^
X)
X$@
X$(MAPFILE_R)
X$(LIBS: = +^
X) +
X$(LLIBS_G: = +^
X) +
X$(LLIBS_R: = +^
X)
X$(DEF_FILE) $(LFLAGS_G) $(LFLAGS_R);
X<<
X!ENDIF
X	$(LINKER) @$(PROJ).lrf
X
X$(PROJ).bsc : $(SBRS)
X	$(BSCMAKE) @<<
X$(BRFLAGS) $(SBRS)
X<<
X
X
X.cxx.obj :
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_D) /Fo$@ $<
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/c $(CXXFLAGS_G)
X$(CXXFLAGS_R) /Fo$@ $<
X<<
X!ENDIF
X
X.cxx.sbr :
X!IF $(DEBUG)
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_D) /FR$@ $<
X<<
X!ELSE
X	@$(CXX) @<<$(PROJ).rsp
X/Zs $(CXXFLAGS_G)
X$(CXXFLAGS_R) /FR$@ $<
X<<
X!ENDIF
X
X
Xrun: $(PROJ).exe
X	$(PROJ).exe $(RUNFLAGS)
X
Xdebug: $(PROJ).exe
X	CV $(CVFLAGS) $(PROJ).exe $(RUNFLAGS)
END_OF_FILE
if test 23756 -ne `wc -c <'tmt_ms.mak'`; then
    echo shar: \"'tmt_ms.mak'\" unpacked with wrong size!
fi
# end of 'tmt_ms.mak'
fi
if test -f 'tmt_z.mak' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tmt_z.mak'\"
else
echo shar: Extracting \"'tmt_z.mak'\" \(4103 characters\)
sed "s/^X//" >'tmt_z.mak' <<'END_OF_FILE'
XC = ztc -c -ml $*.cxx -o
X
XOBJ = fft.obj evalue.obj submat.obj cholesky.obj hholder.obj          \
X  sort.obj newmatrm.obj jacobi.obj tmtf.obj svd.obj tmte.obj          \
X  tmtd.obj newmat8.obj tmtc.obj tmtb.obj newmat7.obj newmat6.obj      \
X  newmat5.obj newmat3.obj newmat4.obj newmat2.obj newmat1.obj         \
X  tmt.obj tmt1.obj tmt2.obj tmt3.obj tmt4.obj tmt5.obj tmt6.obj       \
X  tmt7.obj tmt8.obj tmt9.obj tmta.obj tmtg.obj tmth.obj tmti.obj      \
X  bandmat.obj except.obj newmatex.obj
X
Xtmt_z.exe:      $(OBJ) tmt_z.lnk
X                blink @tmt_z.lnk
X
Xtmt_z.lnk:      tmt_z.mak
X	        echo newmat1.obj+newmat2.obj+newmat3.obj+    > tmt_z.lnk
X	        echo newmat4.obj+svd.obj+newmat5.obj+       >> tmt_z.lnk
X	        echo newmat6.obj+newmat7.obj+newmat8.obj+   >> tmt_z.lnk
X	        echo tmt.obj+tmt1.obj+tmt2.obj+tmt3.obj+    >> tmt_z.lnk
X	        echo tmt4.obj+tmt5.obj+tmt6.obj+tmt7.obj+   >> tmt_z.lnk
X	        echo tmt8.obj+tmt9.obj+tmta.obj+tmti.obj+   >> tmt_z.lnk
X	        echo tmtb.obj+tmtc.obj+tmtd.obj+tmte.obj+   >> tmt_z.lnk
X	        echo tmtf.obj+tmtg.obj+tmth.obj+            >> tmt_z.lnk
X	        echo cholesky.obj+hholder.obj+sort.obj+     >> tmt_z.lnk
X	        echo submat.obj+jacobi.obj+newmatrm.obj+    >> tmt_z.lnk
X	        echo fft.obj+evalue.obj+bandmat.obj+        >> tmt_z.lnk
X	        echo newmatex.obj+except.obj                >> tmt_z.lnk
X	        echo tmt_z.exe                              >> tmt_z.lnk
X
Xnewmatxx:       include.h newmat.h boolean.h except.h
X	        echo "main .h files uptodate?" > newmatxx
X
Xexcept.obj:     except.h except.cxx
X	        $C
X
Xnewmatex.obj:   newmatxx newmatex.cxx
X	        $C
X
Xexample.obj:    newmatxx newmatap.h example.cxx
X	        $C
X
Xcholesky.obj:   newmatxx cholesky.cxx
X	        $C
X
Xevalue.obj:     newmatxx newmatrm.h precisio.h evalue.cxx
X	        $C
X
Xfft.obj:        newmatxx newmatap.h fft.cxx
X	        $C
X
Xhholder.obj:    newmatxx newmatap.h hholder.cxx
X	        $C
X
Xjacobi.obj:     newmatxx precisio.h newmatrm.h jacobi.cxx
X	        $C
X
Xbandmat.obj:    newmatxx newmatrc.h controlw.h bandmat.cxx
X	        $C
X
Xnewmat1.obj:    newmatxx newmat1.cxx
X	        $C
X
Xnewmat2.obj:    newmatxx newmatrc.h controlw.h newmat2.cxx
X	        $C
X
Xnewmat3.obj:    newmatxx newmatrc.h controlw.h newmat3.cxx
X	        $C
X
Xnewmat4.obj:    newmatxx newmatrc.h controlw.h newmat4.cxx
X	        $C
X
Xnewmat5.obj:    newmatxx newmatrc.h controlw.h newmat5.cxx
X	        $C
X
Xnewmat6.obj:    newmatxx newmatrc.h controlw.h newmat6.cxx
X	        $C
X
Xnewmat7.obj:    newmatxx newmatrc.h controlw.h newmat7.cxx
X	        $C
X
Xnewmat8.obj:    newmatxx newmatap.h newmat8.cxx
X	        $C
X
Xnewmat9.obj:    newmatxx newmatrc.h controlw.h newmatio.h newmat9.cxx
X	        $C
X
Xnewmatrm.obj:   newmatxx newmatrm.h newmatrm.cxx
X	        $C
X
Xsort.obj:       newmatxx newmatap.h sort.cxx
X	        $C
X
Xsubmat.obj:     newmatxx newmatrc.h controlw.h submat.cxx
X	        $C
X
Xsvd.obj:        newmatxx newmatrm.h precisio.h svd.cxx
X	        $C
X
Xtmt.obj:        newmatxx newmatap.h tmt.cxx 
X	        $C
X
Xtmt1.obj:       newmatxx newmatap.h tmt1.cxx 
X	        $C
X
Xtmt2.obj:       newmatxx newmatap.h tmt2.cxx 
X	        $C
X
Xtmt3.obj:       newmatxx newmatap.h tmt3.cxx 
X	        $C
X
Xtmt4.obj:       newmatxx newmatap.h tmt4.cxx 
X	        $C
X
Xtmt5.obj:       newmatxx newmatap.h tmt5.cxx 
X	        $C
X
Xtmt6.obj:       newmatxx newmatap.h tmt6.cxx 
X	        $C
X
Xtmt7.obj:       newmatxx newmatap.h tmt7.cxx 
X	        $C
X
Xtmt8.obj:       newmatxx newmatap.h tmt8.cxx 
X	        $C
X
Xtmt9.obj:       newmatxx newmatap.h tmt9.cxx 
X	        $C
X
Xtmta.obj:       newmatxx newmatap.h tmta.cxx 
X	        $C
X
Xtmtb.obj:       newmatxx newmatap.h tmtb.cxx 
X	        $C
X
Xtmtc.obj:       newmatxx newmatap.h tmtc.cxx 
X	        $C
X
Xtmtd.obj:       newmatxx newmatap.h tmtd.cxx 
X	        $C
X
Xtmte.obj:       newmatxx newmatap.h tmte.cxx 
X	        $C
X
Xtmtf.obj:       newmatxx newmatap.h tmtf.cxx 
X	        $C
X
Xtmtg.obj:       newmatxx newmatap.h tmtg.cxx 
X	        $C
X
Xtmth.obj:       newmatxx newmatap.h tmth.cxx
X	        $C
X
Xtmti.obj:       newmatxx newmatap.h tmti.cxx
X	        $C
X
X
END_OF_FILE
if test 4103 -ne `wc -c <'tmt_z.mak'`; then
    echo shar: \"'tmt_z.mak'\" unpacked with wrong size!
fi
# end of 'tmt_z.mak'
fi
echo shar: End of archive 8 \(of 8\).
cp /dev/null ark8isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 8 archives.
    rm -f ark[1-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0

exit 0 # Just in case...
