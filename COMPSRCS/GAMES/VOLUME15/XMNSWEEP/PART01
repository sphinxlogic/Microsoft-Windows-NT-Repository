Path: uunet!ogicse!zephyr.ens.tek.com!master!saab!billr
From: billr@saab.CNA.TEK.COM (Bill Randle)
Newsgroups: comp.sources.games
Subject: v15i003:  xminesweeper - minesweeper for X/XView, Part01/01
Message-ID: <3731@master.CNA.TEK.COM>
Date: 9 Oct 92 00:29:27 GMT
Article-I.D.: master.3731
Sender: news@master.CNA.TEK.COM
Lines: 1237
Approved: billr@saab.CNA.TEK.COM

Submitted-by: etxtsg@solsta.ericsson.se (Thomas Grennefors  TX/DKF)
Posting-number: Volume 15, Issue 3
Archive-name: xminesweeper/Part01
Environment: XView, Xlib, X11


#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 1 (of 1)."
# Contents:  README MANIFEST Makefile TODO sweep.c sweep.h sweeper.6
#   sweeper.icon window.c window.h
# Wrapped by billr@saab on Thu Oct  8 17:28:12 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'README'\"
else
echo shar: Extracting \"'README'\" \(886 characters\)
sed "s/^X//" >'README' <<'END_OF_FILE'
XSweeper is a game where your task is to find the hidden mines in a minefield.
X
XTo play the game move your mouse pointer to a square and press the left
Xmouse button to mark that you think this is safe square. If there is a
Xmine on this square the game is over. If there is no mine on this square
Xa number will be shown that shows home many mines there are in the
Xsurronding squares. All surrounding squares, even those diagonally are 
Xcounted.
X
XIf you think there is a mine on a square you move the mousepointer to that
Xsquare and press the middle button. If you want to unmark a square that
Xyou thought that there is a mine on just press the middle button again.
X
XIf you click with the left button on a mine all squares will be revealed
Xto you. The squares that you have marked will be shaded, all other squares 
Xwill be white. A faulty marked bomb will be marked with a cross over it.
END_OF_FILE
if test 886 -ne `wc -c <'README'`; then
    echo shar: \"'README'\" unpacked with wrong size!
fi
# end of 'README'
fi
if test -f 'MANIFEST' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MANIFEST'\"
else
echo shar: Extracting \"'MANIFEST'\" \(424 characters\)
sed "s/^X//" >'MANIFEST' <<'END_OF_FILE'
X   File Name		Archive #	Description
X-----------------------------------------------------------
X MANIFEST                   1	This shipping list
X Makefile                   1	
X README                     1	
X TODO                       1	
X sweep.c                    1	
X sweep.h                    1	
X sweeper.6                  1	
X sweeper.icon               1	
X window.c                   1	
X window.h                   1	
END_OF_FILE
if test 424 -ne `wc -c <'MANIFEST'`; then
    echo shar: \"'MANIFEST'\" unpacked with wrong size!
fi
# end of 'MANIFEST'
fi
if test -f 'Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Makefile'\"
else
echo shar: Extracting \"'Makefile'\" \(727 characters\)
sed "s/^X//" >'Makefile' <<'END_OF_FILE'
XPROGRAM= sweeper
XSOURCES= sweep.c window.c
XINCLUDES= sweep.h window.h
XOTHER= MANIFEST TODO sweeper.6 sweeper.icon Makefile
XOBJECTS= sweep.o window.o
XSCOREFILE= /home/solsta-b/pub/lib/games/sweeper.scores
X#SCOREFILE= sweeper.scores
XSHARFILE= sweeper.shar
X
XCFLAGS=	-I/usr/openwin/include -O -DHIGHSCOREFILE=\"$(SCOREFILE)\"
XCCFLAGS=-I/usr/openwin/include -g 
XLDFLAGS= -L/usr/openwin/lib -lxview -lolgx -lX11
X
Xall: $(OBJECTS)
X	cc $(CFLAGS) -o $(PROGRAM) $(OBJECTS) $(LDFLAGS)
X
Xccenter:
X	# load $(SOURCES) $(CCFLAGS) $(LDFLAGS)
X	#
X
Xshar:
X	shar $(SOURCES) $(INCLUDES) $(OTHER)> $(SHARFILE)
X
Xclean:
X	/bin/rm -f *.o *.~?~
X
Xlint:
X	lint -I/usr/openwin/include $(SOURCES)
X
Xsweep.o: sweep.c sweep.h
Xwindow.o: window.c window.h sweep.h
X
X
X
END_OF_FILE
if test 727 -ne `wc -c <'Makefile'`; then
    echo shar: \"'Makefile'\" unpacked with wrong size!
fi
# end of 'Makefile'
fi
if test -f 'TODO' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'TODO'\"
else
echo shar: Extracting \"'TODO'\" \(128 characters\)
sed "s/^X//" >'TODO' <<'END_OF_FILE'
X
Xo Better look for colour/grey scale
X
Xo Make the mines look more like mines...
X
Xo Game not done until all squares marked/shown
X
END_OF_FILE
if test 128 -ne `wc -c <'TODO'`; then
    echo shar: \"'TODO'\" unpacked with wrong size!
fi
# end of 'TODO'
fi
if test -f 'sweep.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sweep.c'\"
else
echo shar: Extracting \"'sweep.c'\" \(1893 characters\)
sed "s/^X//" >'sweep.c' <<'END_OF_FILE'
Xstatic char sccsid[]="@(#)sweep.c	1.1 9/30/92";
X#define _IN_SWEEP_C_
X#include "sweep.h"
X
Xvoid init_board()
X{
X      int row,col,i,r,c,no_adj_bombs;
X      float perc;
X      double randno;
X
X      stack=NULL;
X      perc=((float)(level+1.0)*0.05);
X      no_bombs=(int)((float)area_width*area_height*perc);
X      no_cor_marked_bombs=0;
X      no_marked_bombs=0;
X      for(row=0;row<area_height;row++)
X	    for(col=0;col<area_width;col++){
X		  bomb_grid[row][col].value=0;
X		  bomb_grid[row][col].selected=UNMARKED;
X	    }
X      for(i=0;i<no_bombs;i++){
X	    do{
X		  randno=(double)drand48();
X		  row=(int)(randno*(double)area_height);
X		  randno=(double)drand48();
X		  col=(int)(randno*(double)area_width);
X	    } while( bomb_grid[row][col].value==BOMB);
X	    bomb_grid[row][col].value=BOMB;
X      }
X      for(row=0;row<area_height;row++)
X	    for(col=0;col<area_width;col++){
X		  no_adj_bombs=0;
X		  if(bomb_grid[row][col].value!=BOMB){
X			for(r=row-1;r<=row+1;r++){
X			      for(c=col-1;c<=col+1;c++){
X				    if(r<0 )
X					  r=0;
X				    if(c<0)
X					  c=0;
X				    if(c >= area_width || r>=area_height)
X					  break;
X				    if(bomb_grid[r][c].value==BOMB) no_adj_bombs++;
X			      }
X			}
X			bomb_grid[row][col].value=no_adj_bombs;
X		  }
X	    }
X}
X
Xvoid push(x,y)
X    int x,y;
X{
X      if(top==NULL){
X	    stack=(stacktype *)malloc(sizeof(stacktype));
X	    stack->next=NULL;
X	    stack->prev=NULL;
X	    stack->x=x;
X	    stack->y=y;
X	    top=stack;
X      }
X      else{
X	    top->prev=(stacktype *)malloc(sizeof(stacktype));
X	    top->prev->next=top;
X	    top=top->prev;
X	    top->x=x;
X	    top->y=y;
X      }
X}
X
Xvoid pop()
X{
X      if(top==NULL){
X	    fprintf(stderr,"Stack underflow\n");
X	    exit(1);
X      }
X      top=top->next;
X      if(top!=NULL){
X	    free(top->prev);
X	    top->prev=NULL;
X      }
X}
X
X
Xvoid flag(x,y,set)
X    int x,y;
X    marktype set;
X{
X      bomb_grid[x][y].selected=set;
X}
X
X
X
END_OF_FILE
if test 1893 -ne `wc -c <'sweep.c'`; then
    echo shar: \"'sweep.c'\" unpacked with wrong size!
fi
# end of 'sweep.c'
fi
if test -f 'sweep.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sweep.h'\"
else
echo shar: Extracting \"'sweep.h'\" \(1035 characters\)
sed "s/^X//" >'sweep.h' <<'END_OF_FILE'
X/*static char sccsid[]="@(#)sweep.h	1.1 9/30/92";*/
X#include <sys/types.h>
X#include <stdio.h>
X
X#define BOX_SIZE 30
X#define OFFSET 7
X
X#define S10X10 0
X#define S15X15 1
X#define S18X25 2
X
X#define BOMB -1
X#define NOHIGHSCORES 10
X
Xtypedef enum markval {UNMARKED,CHECK,SHOWN,FLAG} marktype;
X
Xint area_width,area_height;
Xint game_started;
Xint no_bombs,no_marked_bombs,no_cor_marked_bombs;
Xint level;
Xint size;
Xlong seed;
X
Xtypedef struct stackstruct {
X      int x;
X      int y;
X      struct stackstruct *next;
X      struct stackstruct *prev;
X} stacktype;
X
Xtypedef struct movestruct {
X      int x;
X      int y;
X      int flag;
X} movetype;
X
Xstacktype *stack,*top;
X
Xstruct bombs {
X      int value;
X      marktype  selected;
X} bomb_grid[18][25];
X
Xtypedef struct highscoreentry {
X      char name[30];
X      int score;
X} highscoretype; 
X
Xhighscoretype highscore[5][3][NOHIGHSCORES];
X
Xvoid init_board();
Xvoid push();
Xvoid pop();
Xvoid flag();
Xmovetype *input_move();
Xvoid show_board();
X#ifdef _IN_SWEEP_C_
X
X double drand48();
X void srand48();
X
X#endif
END_OF_FILE
if test 1035 -ne `wc -c <'sweep.h'`; then
    echo shar: \"'sweep.h'\" unpacked with wrong size!
fi
# end of 'sweep.h'
fi
if test -f 'sweeper.6' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sweeper.6'\"
else
echo shar: Extracting \"'sweeper.6'\" \(1375 characters\)
sed "s/^X//" >'sweeper.6' <<'END_OF_FILE'
X.\" @(#)@(#)sweeper.6	1.1 0 92/09/30;
X.TH SWEEPER 6  "30 September 1992"
X.SH NAME
Xsweeper \- mine sweeper game
X.SH SYNOPSIS
X.B /usr/games/sweeper
X.SH DESCRIPTION
X.LP
X.B Sweeper
Xis a game where your task is to find the hidden mines in a minefield.
X.LP
XTo play the game move your mouse pointer to a square and press the left
Xmouse button to mark that you think this is safe square. If there is a
Xmine on this square the game is over. If there is no mine on this square
Xa number will be shown that shows home many mines there are in the
Xsurronding squares. All surrounding squares, even those diagonally are 
Xcounted.
X.LP
XIf you think there is a mine on a square you move the mousepointer to that
Xsquare and press the middle button. If you want to unmark a square that
Xyou thought that there is a mine on just press the middle button again.
X.LP
XIf you click with the left button on a mine all squares will be revealed
Xto you. The squares that you have marked will be shaded, all other squares 
Xwill be white. A faulty marked bomb will be marked with a cross over it.
X.SH BUGS
X.LP
XThe manual could be better.
X.LP 
XThe graphic interface could be better, and adapted for colour/gray scale.
X.LP
XThe game should not be finished until all squares are marked/shown.
X.LP
X.SH AUTHOR
XThomas Grennefors (etxtsg@solsta.ericsson.se).  Feel free to send comments,
Xcriticisms and suggestions.
END_OF_FILE
if test 1375 -ne `wc -c <'sweeper.6'`; then
    echo shar: \"'sweeper.6'\" unpacked with wrong size!
fi
# end of 'sweeper.6'
fi
if test -f 'sweeper.icon' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sweeper.icon'\"
else
echo shar: Extracting \"'sweeper.icon'\" \(2190 characters\)
sed "s/^X//" >'sweeper.icon' <<'END_OF_FILE'
X/* Format_version=1, Width=64, Height=64, Depth=1, Valid_bits_per_item=16
X */
X	0xFFFF,	0xFFFF,	0xFFFF,	0xFFFF,
X	0x8000,	0x0000,	0x0000,	0x0001,
X	0x8000,	0x0000,	0x0000,	0x0001,
X	0x8000,	0x0000,	0x0000,	0x0001,
X	0x8000,	0x0000,	0x0000,	0x0001,
X	0x8000,	0x0000,	0x0000,	0x0001,
X	0x8000,	0x0000,	0x0000,	0x0001,
X	0x8000,	0x0000,	0x0000,	0x0001,
X	0x8000,	0x0000,	0x0000,	0x0001,
X	0x8000,	0x0000,	0x0000,	0x0001,
X	0x8000,	0x0000,	0x0000,	0x4001,
X	0x8000,	0x0000,	0x0001,	0x0001,
X	0x8000,	0x0000,	0x0000,	0x2001,
X	0x8000,	0x0000,	0x000A,	0x0001,
X	0x8000,	0x0000,	0x0000,	0xA001,
X	0x8000,	0x0000,	0x0000,	0x0001,
X	0x8000,	0x0000,	0x0009,	0x2001,
X	0x8000,	0x0001,	0xFE38,	0x0001,
X	0x8000,	0x0001,	0x01E0,	0x0001,
X	0x8000,	0x0002,	0x0000,	0x0001,
X	0x8000,	0x0002,	0x0000,	0x0001,
X	0x8000,	0x0002,	0x0000,	0x0001,
X	0x8000,	0x0002,	0x0000,	0x0001,
X	0x8000,	0x003F,	0xE000,	0x0001,
X	0x8000,	0x003F,	0xE000,	0x0001,
X	0x8000,	0x003F,	0xE000,	0x0001,
X	0x8000,	0x003F,	0xE000,	0x0001,
X	0x8000,	0x007F,	0xF000,	0x0001,
X	0x8000,	0x01FF,	0xFC00,	0x0001,
X	0x8000,	0x03FF,	0xFE00,	0x0001,
X	0x8000,	0x07FF,	0xFF00,	0x0001,
X	0x8000,	0x0FFF,	0xFF80,	0x0001,
X	0x8000,	0x0FFF,	0xFF80,	0x0001,
X	0x8000,	0x1FFF,	0xFFC0,	0x0001,
X	0x8000,	0x1FFF,	0xFFC0,	0x0001,
X	0x8000,	0x3FFF,	0xFFE0,	0x0001,
X	0x8000,	0x3FFF,	0xFFE0,	0x0001,
X	0x8000,	0x3FFF,	0xFFE0,	0x0001,
X	0x8000,	0x3FFF,	0xFFE0,	0x0001,
X	0x8000,	0x3FFF,	0xFFE0,	0x0001,
X	0x8000,	0x3FFF,	0xFFE0,	0x0001,
X	0x8000,	0x3FFF,	0xFFE0,	0x0001,
X	0x8000,	0x1FFF,	0xFFC0,	0x0001,
X	0x8000,	0x1FFF,	0xFFC0,	0x0001,
X	0x8000,	0x0FFF,	0xFF80,	0x0001,
X	0x8000,	0x0FFF,	0xFF80,	0x0001,
X	0x8000,	0x07FF,	0xFF00,	0x0001,
X	0x8000,	0x03FF,	0xFE00,	0x0001,
X	0x8000,	0x01FF,	0xFC00,	0x0001,
X	0x8000,	0x007F,	0xF000,	0x0001,
X	0x8000,	0x001F,	0xC000,	0x0001,
X	0x8000,	0x0000,	0x0000,	0x0001,
X	0x8000,	0x0000,	0x0000,	0x0001,
X	0x8000,	0x0000,	0x0000,	0x0001,
X	0x8000,	0x0000,	0x0000,	0x0001,
X	0x8000,	0x0000,	0x0000,	0x0001,
X	0x8000,	0x0000,	0x0000,	0x0001,
X	0x8000,	0x0000,	0x0000,	0x0001,
X	0x8000,	0x0000,	0x0000,	0x0001,
X	0x8000,	0x0000,	0x0000,	0x0001,
X	0x8000,	0x0000,	0x0000,	0x0001,
X	0x8000,	0x0000,	0x0000,	0x0001,
X	0x8000,	0x0000,	0x0000,	0x0001,
X	0xFFFF,	0xFFFF,	0xFFFF,	0xFFFF,
END_OF_FILE
if test 2190 -ne `wc -c <'sweeper.icon'`; then
    echo shar: \"'sweeper.icon'\" unpacked with wrong size!
fi
# end of 'sweeper.icon'
fi
if test -f 'window.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'window.c'\"
else
echo shar: Extracting \"'window.c'\" \(17705 characters\)
sed "s/^X//" >'window.c' <<'END_OF_FILE'
Xstatic char sccsid[]="@(#)window.c	1.1 9/30/92";
X
X#include "window.h"
X
Xvoid init_windows()
X{
X      Xv_Window pw;
X      XID xid;
X      Server_image    image;
X      Icon            icon;
X      Display *dpy;
X      char bombmsg[40];
X      GC gc;
X
X      static char bits[]={0x88,0x88,0x00,0x00,0x22,0x22,0x00,0x00};
X
X
X      image=(Server_image)xv_create(NULL               ,SERVER_IMAGE,
X				    XV_HEIGHT          ,64,
X				    XV_WIDTH           ,64,
X				    SERVER_IMAGE_BITS  ,icon_bits,
X				    0);
X
X      icon=(Icon)xv_create(NULL,ICON,
X			   ICON_IMAGE, image,
X			   0);
X
X      frame = xv_create( XV_NULL, FRAME_BASE,
X			FRAME_ICON, icon, 
X			XV_LABEL, VERSION,
X			FRAME_SHOW_RESIZE_CORNER,FALSE,
X			FRAME_SHOW_FOOTER,TRUE,
X			0 );
X
X      sprintf(bombmsg,"No bombs left: %d",no_bombs-no_marked_bombs);
X      xv_set(frame,FRAME_LEFT_FOOTER,bombmsg,0);
X
X      pan=xv_create(frame,PANEL,
X		      WIN_BORDER, TRUE,
X		      XV_WIDTH, area_width*BOX_SIZE,
X		      0);
X
X      ngamebutt=xv_create(pan,PANEL_BUTTON,
X		      PANEL_LABEL_STRING,"New game",
X		      PANEL_NOTIFY_PROC,new_game,
X		      XV_Y, xv_row(pan,0),
X		      0);
X
X      (void)xv_create(pan,PANEL_CHOICE_STACK,
X		      PANEL_LABEL_STRING,"Size",
X		      PANEL_CHOICE_STRINGS, "10x10","15x15","18x25",0,
X		      PANEL_VALUE,0,
X		      PANEL_NOTIFY_PROC,set_size,
X		      XV_Y,xv_row(pan,0),
X		      0);
X
X      (void)xv_create(pan,PANEL_BUTTON,
X		      PANEL_LABEL_STRING,"Score...",
X		      PANEL_NOTIFY_PROC,highscore_butt,
X		      XV_Y, xv_row(pan,0),
X		      0);
X
X      (void)xv_create(pan,PANEL_CHOICE_STACK,
X		      PANEL_LABEL_STRING,"Level",
X		      PANEL_CHOICE_STRINGS,"Rookie","Easy","Medium","Hard","Impossible",0,
X		      PANEL_VALUE,level,
X		      PANEL_NOTIFY_PROC,set_diff,
X		      XV_Y,xv_row(pan,1),
X		      XV_X,xv_col(pan,1),
X		      0);
X
X      time_msg=xv_create(pan,PANEL_MESSAGE,
X			 PANEL_LABEL_STRING,"Time: 0.00",
X			 XV_Y,xv_row(pan,1)+4,
X			 0);
X
X      canvas=xv_create(frame,CANVAS,
X		       XV_X               ,0,
X		       XV_Y               ,xv_row(frame,6),
X		       XV_WIDTH           ,area_width*BOX_SIZE,
X		       XV_HEIGHT          ,area_height*BOX_SIZE,
X		       CANVAS_REPAINT_PROC, repaint_proc,
X		       CANVAS_X_PAINT_WINDOW, TRUE,
X		       CANVAS_AUTO_CLEAR, TRUE,
X		       0);
X
X      xv_set(canvas_paint_window(canvas),
X	     WIN_EVENT_PROC, cv_event,
X	     WIN_CONSUME_X_EVENT_MASK,ButtonPressMask,
X	     NULL);
X
X      font=(Xv_Font)xv_find(NULL,FONT,
X			     FONT_FAMILY,FONT_FAMILY_DEFAULT_FIXEDWIDTH,
X			     FONT_SIZES_FOR_SCALE,6,12,24,36,
X			     NULL);
X
X      largefont=(Xv_Font)xv_find(NULL,FONT,
X				 FONT_RESCALE_OF, font, WIN_SCALE_EXTRALARGE,
X				 NULL);
X
X      pw =xv_get(canvas,CANVAS_NTH_PAINT_WINDOW,0);
X      xid=(XID)xv_get(pw,XV_XID);
X      dpy=(Display *)xv_get(pw,XV_DISPLAY);
X      gc=DefaultGC(dpy,DefaultScreen(dpy));
X      XSetStipple(dpy,gc,XCreateBitmapFromData(dpy,xid,bits,16,4));
X      repaint_proc((Canvas)NULL,pw,
X		   (Display *)xv_get(pw,XV_DISPLAY),
X		   xv_get(pw,XV_XID),(Xv_xrectlist *)NULL);
X      window_fit_height(pan);
X      window_fit(frame);
X      xv_main_loop(frame);
X}
X
Xvoid repaint_proc(canv,pw,dpy,xwin,xrects)
X    Canvas canv;
X    Xv_Window pw;
X    Display *dpy;
X    Window xwin;
X    Xv_xrectlist *xrects;
X{
X      GC gc;
X      int i,row,col;
X
X      XClearArea(dpy,xwin,0,0,area_width*BOX_SIZE,area_height*BOX_SIZE,FALSE);
X      gc=DefaultGC(dpy,DefaultScreen(dpy));
X      /* draw grid */
X      for(i=BOX_SIZE; i<BOX_SIZE*area_width;i+=BOX_SIZE)
X	    XDrawLine(dpy,xwin,gc,i,0,i,area_height*BOX_SIZE);
X      for(i=BOX_SIZE; i<BOX_SIZE*area_height;i+=BOX_SIZE)
X	    XDrawLine(dpy,xwin,gc,0,i,area_width*BOX_SIZE,i);
X      /* show marked/shown boxes */
X      if(game_started==1||game_started==3)
X	    for(row=0;row<area_height;row++)
X		  for(col=0;col<area_width;col++)
X			if(bomb_grid[row][col].selected==SHOWN){
X			      fill_square(row,col,dpy,xwin);
X			      if(bomb_grid[row][col].value>0)
X				    draw_number(row,col,bomb_grid[row][col].value,
X						dpy,xwin);
X			      else if(bomb_grid[row][col].value==BOMB)
X				    draw_bomb(row,col,dpy,xwin);
X			}
X}
X
Xvoid cv_event(pw,event)
X    Xv_Window pw;
X    Event *event;
X{
X      int row,col,xcord,ycord;
X
X
X      if((game_started==1 || game_started==2) && bang_shown==0){
X	    xcord=event_x(event);
X	    ycord=event_y(event);
X	    col=xcord/BOX_SIZE;
X	    row=ycord/BOX_SIZE;
X	    if(event_action(event)==ACTION_SELECT
X	       && ! event_left_is_down(event)){
X		  if(game_started==2) {
X			start();
X		  }
X		  show_square(row,col,pw,
X			      (Display *)xv_get(pw,XV_DISPLAY),
X			      xv_get(pw,XV_XID));
X	    }
X	    else if(event_action(event)==ACTION_ADJUST 
X		    && ! event_middle_is_down(event)){
X		  mark_square(row,col,
X			      (Display *)xv_get(pw,XV_DISPLAY),
X			      xv_get(pw,XV_XID));     
X	    }
X      }
X}
X
Xvoid show_square(row,col,pw,dpy,xwin)
X    int row,col;
X    Xv_Window pw;
X    Display *dpy;
X    Window xwin;    
X{
X      int val;
X
X      if(bomb_grid[row][col].selected==FLAG) return;
X      val=bomb_grid[row][col].value;
X      if(val != 0 && val != -1){
X	    no_shown_squares++;
X	    fill_square(row,col,dpy,xwin);
X	    draw_number(row,col,bomb_grid[row][col].value,dpy,xwin);
X	    bomb_grid[row][col].selected=SHOWN;
X	    done();
X      }
X      else if(val==0){
X	    expose(row,col,pw,dpy,xwin);
X	    done();
X      }
X      else {
X	    bang(dpy,xwin);
X      }
X}
X
Xvoid draw_bomb(row,col,dpy,xwin)
X    int row;
X    int col;
X    Display *dpy;
X    Window xwin;
X{
X      GC gc;
X
X      gc=DefaultGC(dpy,DefaultScreen(dpy));
X      XFillArc(dpy,xwin,gc,
X	       col*BOX_SIZE+BOX_SIZE/3,
X	       row*BOX_SIZE+BOX_SIZE/3,
X	       BOX_SIZE/2,BOX_SIZE/2,0,360*64);
X}
X
Xvoid fill_square(row,col,dpy,xwin)
X    int row;
X    int col;
X    Display *dpy;
X    Window xwin;
X{
X      GC gc;
X
X      gc=DefaultGC(dpy,DefaultScreen(dpy));
X      XClearArea(dpy,xwin,col*BOX_SIZE+1,row*BOX_SIZE+1,
X		 BOX_SIZE-2,BOX_SIZE-2,FALSE);
X      XSetFillStyle(dpy,gc,FillStippled);
X      XFillRectangle(dpy,xwin,gc,col*BOX_SIZE
X		     ,row*BOX_SIZE,BOX_SIZE,BOX_SIZE);
X      XSetFillStyle(dpy,gc,FillSolid);
X}
X
Xvoid draw_number(row,col,number,dpy,xwin)
X    int row;
X    int col;
X    int number;
X    Display *dpy;
X    Window xwin;
X{
X      GC gc;
X      char str[5];
X
X      gc=DefaultGC(dpy,DefaultScreen(dpy));
X      sprintf(str,"%d",number);
X      XDrawString(dpy,xwin,gc,
X		  col*BOX_SIZE+BOX_SIZE/3,
X		  (int)(row*BOX_SIZE+BOX_SIZE*0.66),
X		  str,strlen(str));
X}
X
Xvoid bang(dpy,xwin)
X    Display *dpy;
X    Window xwin;
X{
X      GC gc;
X      int xcord,ycord;
X
X      gc=DefaultGC(dpy,DefaultScreen(dpy));
X      
X      xcord=(area_height*BOX_SIZE)/2-30;
X      ycord=(area_width*BOX_SIZE)/2-110;
X      XDrawRectangle(dpy,xwin,gc,ycord,xcord,220,60);
X      XClearArea(dpy,xwin,ycord+1,xcord+1,218,58,FALSE);
X      XSetFont(dpy,gc,(Font)xv_get(largefont,XV_XID));
X      XDrawString(dpy,xwin,gc,ycord+10,xcord+40,
X		  "B A N G !",9);
X      XSetFont(dpy,gc,(Font)xv_get(font,XV_XID));
X      bang_shown=1;
X      xv_set(ngamebutt,PANEL_INACTIVE,TRUE,0);
X      notify_set_itimer_func(frame,NOTIFY_FUNC_NULL,ITIMER_REAL,NULL,NULL);
X      timer.it_value.tv_usec=92767;
X      timer.it_interval.tv_usec=92767;    
X      notify_set_itimer_func(frame,bang_timer,ITIMER_REAL,&timer,NULL);
X}
X
Xvoid bang_timer()
X{
X      static counter=0;
X
X      counter++;
X      counter%=15;
X      if(counter==0){
X	    show_all();
X	    stop();
X	    xv_set(ngamebutt,PANEL_INACTIVE,FALSE,0);
X	    bang_shown=0;
X      }
X}
X
Xvoid expose(x,y,pw,dpy,xwin)
X    int x,y;
X    Xv_Window pw;
X    Display *dpy;
X    Window xwin;    
X{
X      int row,col;
X      int rs,re,cs,ce;
X      int no_found,i;
X
X      if(bomb_grid[x][y].value==0){
X	    bomb_grid[x][y].selected=SHOWN;
X	    rs=x-1;
X	    if(rs<0)rs=0;
X	    re=x+1;
X	    if(re>=area_height)re=area_height-1;
X	    cs=y-1;
X	    if(cs<0)cs=0;
X	    ce=y+1;
X	    if(ce>=area_width)ce=area_width-1;
X	    no_found=0;
X	    for(row=rs;row<=re;row++){
X		  for(col=cs;col<=ce;col++){
X			if(bomb_grid[row][col].selected==UNMARKED){
X			      no_found++;
X			      push(row,col);
X			      bomb_grid[row][col].selected=CHECK;
X			}
X		  }
X	    }
X	    for(i=0;i<no_found;i++){
X		  expose(top->x,top->y,pw,dpy,xwin);
X		  pop();
X	    }
X      }
X      bomb_grid[x][y].selected=SHOWN;
X      no_shown_squares++;
X      fill_square(x,y,dpy,xwin);
X      if(bomb_grid[x][y].value>0)
X	    draw_number(x,y,bomb_grid[x][y].value,dpy,xwin);
X}
X
Xvoid mark_square(row,col,dpy,xwin)
X    int row,col;
X    Display *dpy;
X    Window xwin;    
X{
X      if(bomb_grid[row][col].selected==SHOWN)
X	    return;
X      if(bomb_grid[row][col].selected==UNMARKED){
X	    no_shown_squares++;
X	    no_marked_bombs++;
X	    if(bomb_grid[row][col].value==BOMB)
X		  no_cor_marked_bombs++;
X	    bomb_grid[row][col].selected=FLAG;
X	    if(done() == 1) return;
X	    fill_square(row,col,dpy,xwin);
X	    draw_bomb(row,col,dpy,xwin);
X      }
X      else{
X	    no_shown_squares--;
X	    no_marked_bombs--;	
X	    XClearArea(dpy,xwin,col*BOX_SIZE+1,row*BOX_SIZE+1,
X		       BOX_SIZE-1,BOX_SIZE-1,FALSE);
X	    if(bomb_grid[row][col].value==BOMB)
X		  no_cor_marked_bombs--;
X	    bomb_grid[row][col].selected=UNMARKED;
X      }
X}
X
Xint done()
X{
X      int i;
X      char bombmsg[40];
X
X      if(no_cor_marked_bombs==no_bombs &&
X	 no_marked_bombs==no_bombs){/* &&
X	 no_shown_squares==area_width*area_height){*/
X	    show_all();
X	    i=update_highscore();
X	    show_highscore(i);
X	    xv_set(frame,FRAME_LEFT_FOOTER,"You made it",0);
X	    stop();
X	    return 1;
X      }
X      else{
X	    sprintf(bombmsg,"No bombs left: %d",no_bombs-no_marked_bombs);
X	    xv_set(frame,FRAME_LEFT_FOOTER,bombmsg,0);
X	    return 0;
X      }
X}
X
Xvoid show_all()
X{
X      int row,col;
X      Xv_Window pw;
X      Display *dpy;
X      Window xwin;
X      GC gc;
X      int i;
X      
X      pw =xv_get(canvas,CANVAS_NTH_PAINT_WINDOW,0);
X      dpy=(Display *)xv_get(pw,XV_DISPLAY);
X      xwin=xv_get(pw,XV_XID);
X      gc=DefaultGC(dpy,DefaultScreen(dpy));
X      XClearArea(dpy,xwin,0,0,area_width*BOX_SIZE,area_height*BOX_SIZE,FALSE);
X      gc=DefaultGC(dpy,DefaultScreen(dpy));
X      /* draw grid */
X      for(i=BOX_SIZE; i<BOX_SIZE*area_width;i+=BOX_SIZE)
X	    XDrawLine(dpy,xwin,gc,i,0,i,area_height*BOX_SIZE);
X      for(i=BOX_SIZE; i<BOX_SIZE*area_height;i+=BOX_SIZE)
X	    XDrawLine(dpy,xwin,gc,0,i,area_width*BOX_SIZE,i);
X      /* show marked/shown boxes */
X      for(row=0;row<area_height;row++)
X	    for(col=0;col<area_width;col++){
X		  if(bomb_grid[row][col].selected==SHOWN ||
X		     bomb_grid[row][col].selected==FLAG )
X			fill_square(row,col,dpy,xwin);
X		  if(bomb_grid[row][col].value>=0 &&
X			  bomb_grid[row][col].selected==FLAG){
X			draw_bomb(row,col,dpy,xwin);
X			XDrawLine(dpy,xwin,gc,col*BOX_SIZE+5,row*BOX_SIZE+5,
X				  (col+1)*BOX_SIZE-5,(row+1)*BOX_SIZE-5);
X			XDrawLine(dpy,xwin,gc,col*BOX_SIZE+5,(row+1)*BOX_SIZE-5,
X				  (col+1)*BOX_SIZE-5,row*BOX_SIZE+5);
X		  }
X		  else if(bomb_grid[row][col].value>0)
X			draw_number(row,col,bomb_grid[row][col].value,dpy,xwin);
X		  else if(bomb_grid[row][col].value==BOMB)
X			draw_bomb(row,col,dpy,xwin);
X	    }
X}
X
Xvoid set_size(item,val,event)
X    Panel_item item;
X    int val;
X    Event *event;
X{
X      Xv_Window pw;
X
X      stop();
X      size=val;
X      switch(val){
X	 case S10X10:
X	    area_width=10;
X	    area_height=10;
X	    break;
X	 case S15X15:
X	    area_width=15;
X	    area_height=15;
X	    break;
X	 case S18X25:
X	    area_width=25;
X	    area_height=18;
X	    break;
X      }
X      xv_set(pan,XV_WIDTH,area_width*BOX_SIZE,NULL);
X      xv_set(canvas,XV_WIDTH,area_width*BOX_SIZE,NULL);
X      xv_set(canvas,XV_HEIGHT,area_height*BOX_SIZE,NULL);
X      window_fit(frame);
X      pw =xv_get(canvas,CANVAS_NTH_PAINT_WINDOW,0);
X      new_game();
X      repaint_proc((Canvas)NULL,pw,
X		   (Display *)xv_get(pw,XV_DISPLAY),
X		   xv_get(pw,XV_XID),(Xv_xrectlist *)NULL);
X}
X
Xvoid set_diff(item,val,event)
X    Panel_item item;
X    int val;
X    Event *event;
X{
X      Xv_Window pw;
X
X      stop();
X      pw =xv_get(canvas,CANVAS_NTH_PAINT_WINDOW,0);
X      level=val;
X      new_game();
X      repaint_proc((Canvas)NULL,pw,
X		   (Display *)xv_get(pw,XV_DISPLAY),
X		   xv_get(pw,XV_XID),(Xv_xrectlist *)NULL);
X}
X
Xvoid start()
X{
X      char str[30];
X
X      game_started=1;
X      timer.it_value.tv_usec=92767;
X      timer.it_interval.tv_usec=92767;    
X      notify_set_itimer_func(frame,clock,ITIMER_REAL,&timer,NULL);
X      sprintf(str,"No bombs left: %d",no_bombs);
X      xv_set(frame,FRAME_LEFT_FOOTER,str,0);
X      xv_set(time_msg,PANEL_LABEL_STRING,"Time: 0.00  ",0);
X}
X
Xvoid new_game()
X{
X      Xv_Window pw;
X      char bombmsg[40];
X      
X      pw =xv_get(canvas,CANVAS_NTH_PAINT_WINDOW,0);
X      game_started=0;
X      sec=0;
X      no_shown_squares=0;
X      init_board();
X      repaint_proc((Canvas)NULL,pw,
X		   (Display *)xv_get(pw,XV_DISPLAY),
X		   xv_get(pw,XV_XID),(Xv_xrectlist *)NULL);
X      sprintf(bombmsg,"No bombs left: %d",no_bombs-no_marked_bombs);
X      xv_set(frame,FRAME_LEFT_FOOTER,bombmsg,0);
X      xv_set(time_msg,PANEL_LABEL_STRING,"Time: 0.00  ",0);
X      game_started=2;
X}
X
Xvoid stop()
X{
X      game_started=0;
X      notify_set_itimer_func(frame,NOTIFY_FUNC_NULL,ITIMER_REAL,NULL,NULL);
X}
X
XNotify_value clock()
X{
X      static int cntr=0;
X      char str[10];
X
X      if(cntr==0){
X	    sec++;
X	    sprintf(str,"Time: %d.%2.2d",sec/60,sec%60);
X	    xv_set(time_msg,PANEL_LABEL_STRING,str,0);
X      }
X      cntr++;
X      cntr%=10;
X}
X
Xvoid highscore_butt()
X{
X      show_highscore(-1);
X}
X
Xvoid show_highscore(pos)
X    int pos;
X{
X      Panel cmd_pan;
X      static Frame cframe=NULL;
X      int i,scr,row;
X      char str[18];
X      static char levelnames[5][40]={"Rookie","Easy","Medium","Hard","Impossible"};
X      static char sizes[3][40]={"10x10","15x15","18x25"};
X
X      if(cframe!=NULL)
X	    xv_destroy_safe(cframe);
X      if(pos==-1)
X	    read_highscore();
X      cframe=xv_create(frame,FRAME_CMD,
X		       FRAME_LABEL,"Highscores",
X		       0);
X      cmd_pan=xv_get(cframe,FRAME_CMD_PANEL);
X      xv_set(cmd_pan,WIN_BORDER,TRUE,0);
X
X      row=0;
X      (void)xv_create(cmd_pan,PANEL_MESSAGE,
X		      XV_Y,xv_row(cmd_pan,row),
X		      XV_X,xv_col(cmd_pan,1),
X		      PANEL_LABEL_STRING,sizes[size],
X			    0);
X      (void)xv_create(cmd_pan,PANEL_MESSAGE,
X		      XV_Y,xv_row(cmd_pan,row),
X		      XV_X,xv_col(cmd_pan,10),
X		      PANEL_LABEL_STRING,levelnames[level],
X			    0);
X      row++;
X      (void)xv_create(cmd_pan,PANEL_MESSAGE,
X		      XV_Y,xv_row(cmd_pan,row),
X		      XV_X,xv_col(cmd_pan,3),
X		      PANEL_LABEL_STRING,"Player",
X			    0);
X      (void)xv_create(cmd_pan,PANEL_MESSAGE,
X		      XV_Y,xv_row(cmd_pan,row),
X		      XV_X,xv_col(cmd_pan,12),
X		      PANEL_LABEL_STRING,"Time",
X			    0);
X      row++;
X      for(i=0;i<NOHIGHSCORES;i++) {
X	    if(highscore[level][size][i].score>=0){
X		  if(pos==i)
X			(void)xv_create(cmd_pan,PANEL_MESSAGE,
X					XV_Y,xv_row(cmd_pan,row),
X					XV_X,xv_col(cmd_pan,1),
X					PANEL_LABEL_STRING,"->",
X					0);
X		  (void)xv_create(cmd_pan,PANEL_MESSAGE,
X				  XV_Y,xv_row(cmd_pan,row),
X				  XV_X,xv_col(cmd_pan,3),
X				  PANEL_LABEL_STRING,highscore[level][size][i].name,
X				  0);
X		  scr=highscore[level][size][i].score;
X		  sprintf(str,"%d.%2.2d",scr/60,scr%60);
X		  (void)xv_create(cmd_pan,PANEL_MESSAGE,
X				  XV_Y,xv_row(cmd_pan,row),
X				  XV_X,xv_col(cmd_pan,12),
X				  PANEL_LABEL_STRING,str,
X				  0);
X	    }
X	    row++;
X      }
X      window_fit(cmd_pan);
X      window_fit(cframe);
X      xv_set(cframe,WIN_SHOW,TRUE,0);
X}
X
Xint update_highscore()
X{
X      int i,j;
X      char name[20];
X
X      stop();
X      strcpy(name,getlogin());
X      read_highscore();
X      i=0;
X      while( highscore[level][size][i].score <= sec &&
X	    highscore[level][size][i].score != -1) i++;
X      if(i<NOHIGHSCORES){
X	    for(j=NOHIGHSCORES-1;j>i;j--){
X		  highscore[level][size][j].score=highscore[level][size][j-1].score;
X		  strcpy(highscore[level][size][j].name,highscore[level][size][j-1].name);
X	    }
X	    highscore[level][size][i].score=sec;
X	    strcpy(highscore[level][size][i].name,name);
X	    write_highscore();
X	    return i;
X      }
X      else
X	    return -1;
X}
X
Xvoid read_highscore()
X{
X      FILE *fp;
X      int i=0,j,k;
X      int fs=2;
X      int lvl;
X      int sze;
X      highscoretype hgsc;
X	    
X
X      for(k=0;k<5;k++)
X	    for(j=0;j<3;j++)
X		  for(i=0;i<NOHIGHSCORES;i++)
X			highscore[k][j][i].score=-1;
X      if((fp=fopen(HIGHSCOREFILE,"r"))==NULL)
X	    return;
X      fs=fscanf(fp,"%s %d %d %d %f",hgsc.name,
X		&hgsc.score,&lvl,&sze);
X      if(fs!=EOF){
X	    do{
X		  i=0;
X		  while(highscore[lvl][sze][i].score>=0	
X			&& i<NOHIGHSCORES) i++;
X		  highscore[lvl][sze][i].score=hgsc.score;
X		  strcpy(highscore[lvl][sze][i].name,hgsc.name);	
X		  fs=fscanf(fp,"%s %d %d %d",hgsc.name,
X			    &hgsc.score,&lvl,&sze);
X	    } while(fs!=EOF);
X      }
X      fclose(fp);
X}
X
Xvoid write_highscore()
X{
X      int i,j,k;
X      FILE *fp;
X
X      i=0;
X      while((fp=fopen(HIGHSCOREFILE,"w"))==NULL && i<3 ){
X	    sleep(1);
X	    i++;
X      }
X      if(fp==NULL){
X	    xv_set(frame,FRAME_LEFT_FOOTER,"Cannot open Highscore file",0);
X	    return;
X      }
X      for(i=0;i<5;i++)
X	    for(j=0;j<3;j++){
X		  k=0;
X		  while(highscore[i][j][k].score>=0 && k<NOHIGHSCORES){
X			fprintf(fp,"%s %d %d %d\n",highscore[i][j][k].name,
X				highscore[i][j][k].score,i,j);
X			k++;
X		  }
X	    }
X      fclose(fp);
X}
X
Xmain(argc,argv)
X    int argc;
X    char **argv;
X{
X      int i,j,k;
X
X      for(k=0;k<5;k++)
X	    for(j=0;j<3;j++)
X		  for(i=0;i<NOHIGHSCORES;i++)
X			highscore[k][j][i].score=-1;
X      seed=(long)getpid();
X      srand48(seed);
X      area_width=10;
X      area_height=10;
X      size=0;
X      level=2;
X      no_shown_squares=0;
X      sec=0;
X      bang_shown=0;
X      init_board();
X      game_started=2;
X      init_windows();
X      exit(0);
X}
X
END_OF_FILE
if test 17705 -ne `wc -c <'window.c'`; then
    echo shar: \"'window.c'\" unpacked with wrong size!
fi
# end of 'window.c'
fi
if test -f 'window.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'window.h'\"
else
echo shar: Extracting \"'window.h'\" \(1219 characters\)
sed "s/^X//" >'window.h' <<'END_OF_FILE'
X/* static char sccsid[]="@(#)window.h	1.2 9/30/92";*/
X#include "sweep.h"
X#ifndef _WINDOWS_H_
X#define _WINDOWS_H_
X#include <X11/Xlib.h>
X#include <xview/xview.h>
X#include <xview/canvas.h>
X#include <xview/font.h>
X#include <xview/panel.h>
X#include <xview/textsw.h>
X#include <xview/xv_xrect.h>
X#include <xview/svrimage.h>
X#include <xview/icon.h>
X#include <xview/notify.h>
X
Xshort icon_bits[] = {
X#include "sweeper.icon"
X};
X
X#ifndef HIGHSCOREFILE
X#define HIGHSCOREFILE "sweeper.scores"
X#endif
X
X#define VERSION "Sweeper V 1.0"
X
XFrame frame;
XCanvas canvas;
XPanel pan;
XPanel_item time_msg,ngamebutt;
Xstruct itimerval timer;
Xint sec,bang_shown,no_shown_squares;
XXv_Font font,largefont;
X
Xvoid expose();
Xvoid repaint_proc();
Xvoid cv_event();
Xvoid init_windows();
Xvoid show_square();
Xvoid mark_square();
Xint  done();
Xvoid show_all();
Xvoid set_size();
Xvoid set_diff();
Xvoid new_game();
Xvoid start();
XNotify_value clock();
Xvoid bang();
Xvoid bang_timer();
Xvoid stop();
Xvoid highscore_butt();
Xvoid show_highscore();
Xint  update_highscore();
Xvoid read_highscore();
Xvoid write_highscore();
Xvoid draw_bomb(/* row,col,pw,dpy,xwin */);
Xvoid fill_square(/* row,col,pw,dpy,xwin */);
Xvoid draw_number(/* row,col,number,pw,dpy,xwin */);
X
X
X#endif
END_OF_FILE
if test 1219 -ne `wc -c <'window.h'`; then
    echo shar: \"'window.h'\" unpacked with wrong size!
fi
# end of 'window.h'
fi
echo shar: End of archive 1 \(of 1\).
cp /dev/null ark1isdone
MISSING=""
for I in 1 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have the archive.
    rm -f ark[1-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
