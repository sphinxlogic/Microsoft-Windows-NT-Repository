Path: uunet!news.tek.com!master!saab!billr
From: billr@saab.CNA.TEK.COM (Bill Randle)
Newsgroups: comp.sources.games
Subject: v15i050:  xbomb - minesweeper game with extra features, Part03/04
Message-ID: <4225@master.CNA.TEK.COM>
Date: 18 Jan 93 20:09:23 GMT
Sender: news@master.CNA.TEK.COM
Lines: 1423
Approved: billr@saab.CNA.TEK.COM
Xref: uunet comp.sources.games:1549

Submitted-by: johnh@FICUS.CS.UCLA.EDU (John Heidemann)
Posting-number: Volume 15, Issue 50
Archive-name: xbomb/Part03
Environment: X11, Xlib

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 3 (of 4)."
# Contents:  applications.c bitmaps/old/known1.bit
#   bitmaps/old/known4.bit bitmaps/old/known5.bit
#   bitmaps/old/known6.bit bitmaps/old/known7.bit
#   bitmaps/old/known8.bit bitmaps/roman/known0.bit
#   bitmaps/roman/known1.bit bitmaps/roman/known2.bit
#   bitmaps/roman/known3.bit bitmaps/roman/known4.bit
#   bitmaps/roman/known5.bit bitmaps/roman/known6.bit
#   bitmaps/roman/known7.bit bitmaps/roman/known8.bit
#   bitmaps/roman/known9.bit bitmaps/standard/blank.bit
#   bitmaps/standard/bomb.bit bitmaps/standard/ebomb.bit
#   bitmaps/standard/empty.bit bitmaps/standard/flag.bit
#   bitmaps/standard/known0.bit bitmaps/standard/known1.bit
#   bitmaps/standard/known2.bit bitmaps/standard/known3.bit
#   bitmaps/standard/known4.bit bitmaps/standard/known5.bit
#   bitmaps/standard/known6.bit bitmaps/standard/known7.bit
#   bitmaps/standard/known8.bit bitmaps/standard/known9.bit
#   bitmaps/standard/think.bit debug_solver forced_solver.c
#   prob_solver.c statistics xbomb.h
# Wrapped by billr@saab on Mon Jan 18 12:03:06 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'applications.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'applications.c'\"
else
echo shar: Extracting \"'applications.c'\" \(1756 characters\)
sed "s/^X//" >'applications.c' <<'END_OF_FILE'
X
X/*
X * applications.c
X * @(#)applications.c	1.2 (UCLA) 10/6/92
X *
X * xbomb is Copyright (C) 1992 by Matthew Merzbacher, Los Angeles, CA.
X * All rights reserved.  Permission is granted to freely distribute
X * this as long as this copyright message is retained intact.
X * Permission to distribute this as part of a commerical product
X * requires explicit permission of the author.
X *
X */
X
X#include "xbomb.h"
X
X
Xint
Xapply_add_neighbor_kbombs(x, y, ptr)
X	int x, y;
X	void *ptr;
X{
X	int delta = (int)ptr;
X	map[x][y].neighbor_kbombs += delta;
X	if (map[x][y].status == KEMPTY && ted) putpix(x,y);
X	if (map[x][y].status == KEMPTY && shouldfollow(x,y)) {
X		follow(x,y);
X		return(1);
X	}
X	return(0);
X}
X
Xint
Xapply_inc_if_unknown(x, y, ptr)
X	int x, y;
X	void *ptr;
X{
X	int *ip = (int*)ptr;
X	if (is_unknown(map[x][y].status))
X		(*ip)++;
X	return(0);
X}
X
Xint
Xapply_inc_if_bomb(x, y, ptr)
X	int x, y;
X	void *ptr;
X{
X	int *ip = (int*)ptr;
X	if (is_bomb(map[x][y].status))
X		(*ip)++;
X	return(0);
X}
X
Xint 
Xapply_flag_if_unknown(x, y, ptr)
X	int x, y;
X	void *ptr;
X{
X	if (is_unknown(map[x][y].status) && !map[x][y].flag) {
X		numflags--;
X		map[x][y].flag = 1;
X		putpix(x, y);
X		return(1);
X	};
X	return(0);
X}
X
Xint
Xadd_neighbor_kbombs(c,r, delta)
X	int c,r, delta;
X{
X	int x, y;
X	
X	for (x = c-1; x <= c+1; x++)
X		for (y = r-1; y <= r+1; y++) {
X			if (x==c && y==r)
X				continue;
X			map[x][y].neighbor_kbombs += delta;
X			if (map[x][y].status == KEMPTY && ted) putpix(x,y);
X			if (map[x][y].status == KEMPTY && shouldfollow(x,y))
X				follow(x,y);
X		};
X}
X
Xint
Xapply_neighbor(c,r, f, ptr)
X	int c,r;
X	int (*f)();
X	void *ptr;
X{
X	int x, y, ret = 0;
X	
X	for (x = c-1; x <= c+1; x++)
X		for (y = r-1; y <= r+1; y++) {
X			if (x==c && y==r)
X				continue;
X			ret |= (*f)(x, y, ptr);
X		};
X	
X	return(ret);
X}
X
X
END_OF_FILE
if test 1756 -ne `wc -c <'applications.c'`; then
    echo shar: \"'applications.c'\" unpacked with wrong size!
fi
# end of 'applications.c'
fi
if test -f 'bitmaps/old/known1.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/old/known1.bit'\"
else
echo shar: Extracting \"'bitmaps/old/known1.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/old/known1.bit' <<'END_OF_FILE'
X#define known1_width 32
X#define known1_height 32
Xstatic char known1_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
X   0x00, 0x80, 0x01, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0xe0, 0x01, 0x00,
X   0x00, 0xe0, 0x01, 0x00, 0x00, 0xb0, 0x01, 0x00, 0x00, 0x98, 0x01, 0x00,
X   0x00, 0x88, 0x01, 0x00, 0x00, 0x8c, 0x01, 0x00, 0x00, 0x84, 0x01, 0x00,
X   0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00,
X   0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00,
X   0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00,
X   0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00,
X   0x00, 0x80, 0x01, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0xf8, 0x1f, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/old/known1.bit'`; then
    echo shar: \"'bitmaps/old/known1.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/old/known1.bit'
fi
if test -f 'bitmaps/old/known4.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/old/known4.bit'\"
else
echo shar: Extracting \"'bitmaps/old/known4.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/old/known4.bit' <<'END_OF_FILE'
X#define known4_width 32
X#define known4_height 32
Xstatic char known4_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x08, 0x04, 0x00, 0x00, 0x08, 0x04, 0x00, 0x00, 0x08, 0x04, 0x00,
X   0x00, 0x08, 0x04, 0x00, 0x00, 0x08, 0x04, 0x00, 0x00, 0x08, 0x04, 0x00,
X   0x00, 0x08, 0x04, 0x00, 0x00, 0x08, 0x04, 0x00, 0x00, 0x08, 0x04, 0x00,
X   0x00, 0x08, 0x04, 0x00, 0x00, 0xf8, 0x3f, 0x00, 0x00, 0x00, 0x04, 0x00,
X   0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00,
X   0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00,
X   0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00,
X   0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/old/known4.bit'`; then
    echo shar: \"'bitmaps/old/known4.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/old/known4.bit'
fi
if test -f 'bitmaps/old/known5.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/old/known5.bit'\"
else
echo shar: Extracting \"'bitmaps/old/known5.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/old/known5.bit' <<'END_OF_FILE'
X#define known5_width 32
X#define known5_height 32
Xstatic char known5_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x0f, 0x00,
X   0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
X   0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
X   0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00,
X   0x00, 0xe6, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0c, 0x00,
X   0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x10, 0x00,
X   0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00,
X   0x00, 0x00, 0x18, 0x00, 0x00, 0x02, 0x18, 0x00, 0x00, 0x03, 0x10, 0x00,
X   0x00, 0x01, 0x18, 0x00, 0x00, 0x03, 0x08, 0x00, 0x00, 0x0e, 0x0c, 0x00,
X   0x00, 0xfc, 0x07, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/old/known5.bit'`; then
    echo shar: \"'bitmaps/old/known5.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/old/known5.bit'
fi
if test -f 'bitmaps/old/known6.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/old/known6.bit'\"
else
echo shar: Extracting \"'bitmaps/old/known6.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/old/known6.bit' <<'END_OF_FILE'
X#define known6_width 32
X#define known6_height 32
Xstatic char known6_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x0f, 0x00,
X   0x00, 0xb0, 0x7b, 0x00, 0x00, 0xf0, 0x40, 0x00, 0x00, 0x38, 0x00, 0x00,
X   0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00,
X   0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
X   0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
X   0x00, 0xc3, 0x00, 0x00, 0x00, 0xf2, 0x1f, 0x00, 0x00, 0x3b, 0x18, 0x00,
X   0x00, 0x1f, 0x20, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x0f, 0xc0, 0x00,
X   0x00, 0x07, 0x80, 0x00, 0x00, 0x06, 0x80, 0x01, 0x00, 0x1c, 0x80, 0x01,
X   0x00, 0x70, 0x80, 0x01, 0x00, 0xc0, 0xc3, 0x01, 0x00, 0x00, 0x7e, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/old/known6.bit'`; then
    echo shar: \"'bitmaps/old/known6.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/old/known6.bit'
fi
if test -f 'bitmaps/old/known7.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/old/known7.bit'\"
else
echo shar: Extracting \"'bitmaps/old/known7.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/old/known7.bit' <<'END_OF_FILE'
X#define known7_width 32
X#define known7_height 32
Xstatic char known7_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0xff, 0x3f, 0x00, 0x80, 0xbf, 0x3f, 0x00, 0xc0, 0x00, 0x20, 0x00,
X   0x80, 0x00, 0x20, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00,
X   0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x18, 0x00,
X   0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0c, 0x00,
X   0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x07, 0x00,
X   0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
X   0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00,
X   0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00,
X   0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/old/known7.bit'`; then
    echo shar: \"'bitmaps/old/known7.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/old/known7.bit'
fi
if test -f 'bitmaps/old/known8.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/old/known8.bit'\"
else
echo shar: Extracting \"'bitmaps/old/known8.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/old/known8.bit' <<'END_OF_FILE'
X#define known8_width 32
X#define known8_height 32
Xstatic char known8_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x00,
X   0x00, 0x20, 0x08, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x08, 0x20, 0x00,
X   0x00, 0x08, 0x20, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x08, 0x20, 0x00,
X   0x00, 0x08, 0x20, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x20, 0x08, 0x00,
X   0x00, 0xc0, 0x07, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0x30, 0x18, 0x00,
X   0x00, 0x08, 0x20, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x04, 0x40, 0x00,
X   0x00, 0x02, 0x80, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x02, 0x80, 0x00,
X   0x00, 0x02, 0x80, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x04, 0x40, 0x00,
X   0x00, 0x04, 0x40, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x30, 0x18, 0x00,
X   0x00, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/old/known8.bit'`; then
    echo shar: \"'bitmaps/old/known8.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/old/known8.bit'
fi
if test -f 'bitmaps/roman/known0.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/roman/known0.bit'\"
else
echo shar: Extracting \"'bitmaps/roman/known0.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/roman/known0.bit' <<'END_OF_FILE'
X#define known0_width 32
X#define known0_height 32
Xstatic char known0_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0xc0, 0x03, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x30, 0x0c, 0x00,
X   0x00, 0x18, 0x18, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x06, 0x60, 0x00,
X   0x00, 0x06, 0x60, 0x00, 0x00, 0x02, 0xc0, 0x00, 0x00, 0x03, 0xc0, 0x00,
X   0x00, 0x03, 0xc0, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x03, 0xc0, 0x00,
X   0x00, 0x03, 0xc0, 0x00, 0x00, 0x02, 0xc0, 0x00, 0x00, 0x06, 0x60, 0x00,
X   0x00, 0x06, 0x60, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x18, 0x18, 0x00,
X   0x00, 0x30, 0x0c, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xc0, 0x03, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/roman/known0.bit'`; then
    echo shar: \"'bitmaps/roman/known0.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/roman/known0.bit'
fi
if test -f 'bitmaps/roman/known1.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/roman/known1.bit'\"
else
echo shar: Extracting \"'bitmaps/roman/known1.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/roman/known1.bit' <<'END_OF_FILE'
X#define known1_width 32
X#define known1_height 32
Xstatic char known1_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00,
X   0x00, 0xfc, 0x3f, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x80, 0x01, 0x00,
X   0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00,
X   0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00,
X   0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00,
X   0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00,
X   0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00,
X   0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00,
X   0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00,
X   0x00, 0xe0, 0x07, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/roman/known1.bit'`; then
    echo shar: \"'bitmaps/roman/known1.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/roman/known1.bit'
fi
if test -f 'bitmaps/roman/known2.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/roman/known2.bit'\"
else
echo shar: Extracting \"'bitmaps/roman/known2.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/roman/known2.bit' <<'END_OF_FILE'
X#define known2_width 32
X#define known2_height 32
Xstatic char known2_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0x07,
X   0x00, 0xff, 0xff, 0x01, 0x00, 0xf8, 0x3f, 0x00, 0x00, 0x60, 0x0c, 0x00,
X   0x00, 0x60, 0x0c, 0x00, 0x00, 0x60, 0x0c, 0x00, 0x00, 0x60, 0x0c, 0x00,
X   0x00, 0x60, 0x0c, 0x00, 0x00, 0x60, 0x0c, 0x00, 0x00, 0x60, 0x0c, 0x00,
X   0x00, 0x60, 0x0c, 0x00, 0x00, 0x60, 0x0c, 0x00, 0x00, 0x60, 0x0c, 0x00,
X   0x00, 0x60, 0x0c, 0x00, 0x00, 0x60, 0x0c, 0x00, 0x00, 0x60, 0x0c, 0x00,
X   0x00, 0x60, 0x0c, 0x00, 0x00, 0x60, 0x0c, 0x00, 0x00, 0x60, 0x0c, 0x00,
X   0x00, 0x60, 0x0c, 0x00, 0x00, 0x60, 0x0c, 0x00, 0x00, 0x60, 0x0c, 0x00,
X   0x00, 0x60, 0x0c, 0x00, 0x00, 0x60, 0x0c, 0x00, 0x00, 0x60, 0x0c, 0x00,
X   0x00, 0xf8, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x01, 0xc0, 0xff, 0xff, 0x07,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/roman/known2.bit'`; then
    echo shar: \"'bitmaps/roman/known2.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/roman/known2.bit'
fi
if test -f 'bitmaps/roman/known3.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/roman/known3.bit'\"
else
echo shar: Extracting \"'bitmaps/roman/known3.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/roman/known3.bit' <<'END_OF_FILE'
X#define known3_width 32
X#define known3_height 32
Xstatic char known3_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0x1f,
X   0xe0, 0xff, 0xff, 0x07, 0x00, 0xff, 0xff, 0x00, 0x00, 0x8c, 0x31, 0x00,
X   0x00, 0x8c, 0x31, 0x00, 0x00, 0x8c, 0x31, 0x00, 0x00, 0x8c, 0x31, 0x00,
X   0x00, 0x8c, 0x31, 0x00, 0x00, 0x8c, 0x31, 0x00, 0x00, 0x8c, 0x31, 0x00,
X   0x00, 0x8c, 0x31, 0x00, 0x00, 0x8c, 0x31, 0x00, 0x00, 0x8c, 0x31, 0x00,
X   0x00, 0x8c, 0x31, 0x00, 0x00, 0x8c, 0x31, 0x00, 0x00, 0x8c, 0x31, 0x00,
X   0x00, 0x8c, 0x31, 0x00, 0x00, 0x8c, 0x31, 0x00, 0x00, 0x8c, 0x31, 0x00,
X   0x00, 0x8c, 0x31, 0x00, 0x00, 0x8c, 0x31, 0x00, 0x00, 0x8c, 0x31, 0x00,
X   0x00, 0x8c, 0x31, 0x00, 0x00, 0x8c, 0x31, 0x00, 0x00, 0x8c, 0x31, 0x00,
X   0x00, 0xff, 0xff, 0x00, 0xe0, 0xff, 0xff, 0x07, 0xf8, 0xff, 0xff, 0x1f,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/roman/known3.bit'`; then
    echo shar: \"'bitmaps/roman/known3.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/roman/known3.bit'
fi
if test -f 'bitmaps/roman/known4.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/roman/known4.bit'\"
else
echo shar: Extracting \"'bitmaps/roman/known4.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/roman/known4.bit' <<'END_OF_FILE'
X#define known4_width 32
X#define known4_height 32
Xstatic char known4_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
X   0xfc, 0xff, 0xff, 0x3f, 0xe0, 0xff, 0xff, 0x07, 0x80, 0x19, 0x00, 0x03,
X   0x80, 0x19, 0x00, 0x03, 0x80, 0x19, 0x00, 0x03, 0x80, 0x19, 0x00, 0x03,
X   0x80, 0x31, 0x80, 0x01, 0x80, 0x31, 0x80, 0x01, 0x80, 0x31, 0x80, 0x01,
X   0x80, 0x61, 0xc0, 0x00, 0x80, 0x61, 0xc0, 0x00, 0x80, 0x61, 0xc0, 0x00,
X   0x80, 0xc1, 0x60, 0x00, 0x80, 0xc1, 0x60, 0x00, 0x80, 0xc1, 0x60, 0x00,
X   0x80, 0x81, 0x31, 0x00, 0x80, 0x81, 0x31, 0x00, 0x80, 0x81, 0x31, 0x00,
X   0x80, 0x01, 0x1b, 0x00, 0x80, 0x01, 0x1b, 0x00, 0x80, 0x01, 0x1f, 0x00,
X   0x80, 0x01, 0x0e, 0x00, 0x80, 0x01, 0x04, 0x00, 0x80, 0x01, 0x04, 0x00,
X   0xe0, 0xff, 0xff, 0x07, 0xfc, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/roman/known4.bit'`; then
    echo shar: \"'bitmaps/roman/known4.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/roman/known4.bit'
fi
if test -f 'bitmaps/roman/known5.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/roman/known5.bit'\"
else
echo shar: Extracting \"'bitmaps/roman/known5.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/roman/known5.bit' <<'END_OF_FILE'
X#define known5_width 32
X#define known5_height 32
Xstatic char known5_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0x3f,
X   0xf8, 0xff, 0xff, 0x0f, 0xc0, 0xff, 0xff, 0x01, 0x00, 0x03, 0x60, 0x00,
X   0x00, 0x03, 0x60, 0x00, 0x00, 0x03, 0x60, 0x00, 0x00, 0x03, 0x60, 0x00,
X   0x00, 0x06, 0x30, 0x00, 0x00, 0x06, 0x30, 0x00, 0x00, 0x06, 0x30, 0x00,
X   0x00, 0x0c, 0x18, 0x00, 0x00, 0x0c, 0x18, 0x00, 0x00, 0x0c, 0x18, 0x00,
X   0x00, 0x18, 0x0c, 0x00, 0x00, 0x18, 0x0c, 0x00, 0x00, 0x18, 0x0c, 0x00,
X   0x00, 0x30, 0x06, 0x00, 0x00, 0x30, 0x06, 0x00, 0x00, 0x30, 0x06, 0x00,
X   0x00, 0x60, 0x03, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00, 0xe0, 0x03, 0x00,
X   0x00, 0xc0, 0x01, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00,
X   0xc0, 0xff, 0xff, 0x01, 0xf8, 0xff, 0xff, 0x0f, 0xfe, 0xff, 0xff, 0x3f,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/roman/known5.bit'`; then
    echo shar: \"'bitmaps/roman/known5.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/roman/known5.bit'
fi
if test -f 'bitmaps/roman/known6.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/roman/known6.bit'\"
else
echo shar: Extracting \"'bitmaps/roman/known6.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/roman/known6.bit' <<'END_OF_FILE'
X#define known6_width 32
X#define known6_height 32
Xstatic char known6_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
X   0xfc, 0xff, 0xff, 0x3f, 0xe0, 0xff, 0xff, 0x07, 0xc0, 0x00, 0x98, 0x01,
X   0xc0, 0x00, 0x98, 0x01, 0xc0, 0x00, 0x98, 0x01, 0xc0, 0x00, 0x98, 0x01,
X   0x80, 0x01, 0x8c, 0x01, 0x80, 0x01, 0x8c, 0x01, 0x80, 0x01, 0x8c, 0x01,
X   0x00, 0x03, 0x86, 0x01, 0x00, 0x03, 0x86, 0x01, 0x00, 0x03, 0x86, 0x01,
X   0x00, 0x06, 0x83, 0x01, 0x00, 0x06, 0x83, 0x01, 0x00, 0x06, 0x83, 0x01,
X   0x00, 0x8c, 0x81, 0x01, 0x00, 0x8c, 0x81, 0x01, 0x00, 0x8c, 0x81, 0x01,
X   0x00, 0xd8, 0x80, 0x01, 0x00, 0xd8, 0x80, 0x01, 0x00, 0xf8, 0x80, 0x01,
X   0x00, 0x70, 0x80, 0x01, 0x00, 0x20, 0x80, 0x01, 0x00, 0x20, 0x80, 0x01,
X   0xe0, 0xff, 0xff, 0x07, 0xfc, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/roman/known6.bit'`; then
    echo shar: \"'bitmaps/roman/known6.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/roman/known6.bit'
fi
if test -f 'bitmaps/roman/known7.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/roman/known7.bit'\"
else
echo shar: Extracting \"'bitmaps/roman/known7.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/roman/known7.bit' <<'END_OF_FILE'
X#define known7_width 32
X#define known7_height 32
Xstatic char known7_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
X   0xfe, 0xff, 0xff, 0x7f, 0xfc, 0xff, 0xff, 0x3f, 0x0c, 0x80, 0x99, 0x19,
X   0x0c, 0x80, 0x99, 0x19, 0x0c, 0x80, 0x99, 0x19, 0x0c, 0x80, 0x99, 0x19,
X   0x18, 0xc0, 0x98, 0x19, 0x18, 0xc0, 0x98, 0x19, 0x18, 0xc0, 0x98, 0x19,
X   0x30, 0x60, 0x98, 0x19, 0x30, 0x60, 0x98, 0x19, 0x30, 0x60, 0x98, 0x19,
X   0x60, 0x30, 0x98, 0x19, 0x60, 0x30, 0x98, 0x19, 0x60, 0x30, 0x98, 0x19,
X   0xc0, 0x18, 0x98, 0x19, 0xc0, 0x18, 0x98, 0x19, 0xc0, 0x18, 0x98, 0x19,
X   0x80, 0x0d, 0x98, 0x19, 0x80, 0x0d, 0x98, 0x19, 0x80, 0x0f, 0x98, 0x19,
X   0x00, 0x07, 0x98, 0x19, 0x00, 0x02, 0x98, 0x19, 0x00, 0x02, 0x98, 0x19,
X   0xfc, 0xff, 0xff, 0x3f, 0xfe, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/roman/known7.bit'`; then
    echo shar: \"'bitmaps/roman/known7.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/roman/known7.bit'
fi
if test -f 'bitmaps/roman/known8.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/roman/known8.bit'\"
else
echo shar: Extracting \"'bitmaps/roman/known8.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/roman/known8.bit' <<'END_OF_FILE'
X#define known7_width 32
X#define known7_height 32
Xstatic char known7_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x3f,
X   0xfe, 0xff, 0xff, 0x1f, 0xf8, 0xff, 0xff, 0x0f, 0x30, 0x00, 0x66, 0x0c,
X   0x30, 0x00, 0x66, 0x0c, 0x30, 0x00, 0x66, 0x0c, 0x30, 0x00, 0x66, 0x0c,
X   0x60, 0x00, 0x63, 0x0c, 0x60, 0x00, 0x63, 0x0c, 0x60, 0x00, 0x63, 0x0c,
X   0xc0, 0x80, 0x61, 0x0c, 0xc0, 0x80, 0x61, 0x0c, 0xc0, 0x80, 0x61, 0x0c,
X   0x80, 0xc1, 0x60, 0x0c, 0x80, 0xc1, 0x60, 0x0c, 0x80, 0xc1, 0x60, 0x0c,
X   0x00, 0x63, 0x60, 0x0c, 0x00, 0x63, 0x60, 0x0c, 0x00, 0x63, 0x60, 0x0c,
X   0x00, 0x36, 0x60, 0x0c, 0x00, 0x36, 0x60, 0x0c, 0x00, 0x3e, 0x60, 0x0c,
X   0x00, 0x1c, 0x60, 0x0c, 0x00, 0x08, 0x60, 0x0c, 0x00, 0x08, 0x60, 0x0c,
X   0xf8, 0xff, 0xff, 0x0f, 0xfe, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0x3f,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/roman/known8.bit'`; then
    echo shar: \"'bitmaps/roman/known8.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/roman/known8.bit'
fi
if test -f 'bitmaps/roman/known9.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/roman/known9.bit'\"
else
echo shar: Extracting \"'bitmaps/roman/known9.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/roman/known9.bit' <<'END_OF_FILE'
X#define known9_width 32
X#define known9_height 32
Xstatic char known9_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
X   0xfc, 0xff, 0xff, 0x3f, 0xe0, 0xff, 0xff, 0x07, 0x80, 0xc1, 0x00, 0x03,
X   0x80, 0xc1, 0x00, 0x03, 0x80, 0x81, 0x81, 0x01, 0x80, 0x81, 0x81, 0x01,
X   0x80, 0x01, 0xc3, 0x00, 0x80, 0x01, 0xc3, 0x00, 0x80, 0x01, 0x66, 0x00,
X   0x80, 0x01, 0x66, 0x00, 0x80, 0x01, 0x34, 0x00, 0x80, 0x01, 0x3c, 0x00,
X   0x80, 0x01, 0x18, 0x00, 0x80, 0x01, 0x18, 0x00, 0x80, 0x01, 0x3c, 0x00,
X   0x80, 0x01, 0x2c, 0x00, 0x80, 0x01, 0x66, 0x00, 0x80, 0x01, 0x66, 0x00,
X   0x80, 0x01, 0xc3, 0x00, 0x80, 0x01, 0xc3, 0x00, 0x80, 0x81, 0x81, 0x01,
X   0x80, 0x81, 0x81, 0x01, 0x80, 0xc1, 0x00, 0x03, 0x80, 0xc1, 0x00, 0x03,
X   0xe0, 0xff, 0xff, 0x07, 0xfc, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/roman/known9.bit'`; then
    echo shar: \"'bitmaps/roman/known9.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/roman/known9.bit'
fi
if test -f 'bitmaps/standard/blank.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/standard/blank.bit'\"
else
echo shar: Extracting \"'bitmaps/standard/blank.bit'\" \(878 characters\)
sed "s/^X//" >'bitmaps/standard/blank.bit' <<'END_OF_FILE'
X#define blank_width 32
X#define blank_height 32
Xstatic char blank_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 878 -ne `wc -c <'bitmaps/standard/blank.bit'`; then
    echo shar: \"'bitmaps/standard/blank.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/standard/blank.bit'
fi
if test -f 'bitmaps/standard/bomb.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/standard/bomb.bit'\"
else
echo shar: Extracting \"'bitmaps/standard/bomb.bit'\" \(875 characters\)
sed "s/^X//" >'bitmaps/standard/bomb.bit' <<'END_OF_FILE'
X#define bomb_width 32
X#define bomb_height 32
Xstatic char bomb_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x50, 0x00,
X   0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x80, 0x51, 0x00,
X   0x00, 0x80, 0x50, 0x00, 0x00, 0x80, 0x08, 0x00, 0x00, 0x80, 0x00, 0x00,
X   0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0xf0, 0x07, 0x00,
X   0x00, 0xfc, 0x1f, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0xff, 0x7f, 0x00,
X   0x80, 0xff, 0xff, 0x00, 0x80, 0xff, 0xff, 0x00, 0xc0, 0xff, 0xff, 0x01,
X   0xc0, 0xff, 0xff, 0x01, 0xc0, 0xff, 0xff, 0x01, 0xc0, 0xff, 0xff, 0x01,
X   0xc0, 0xff, 0xff, 0x01, 0xc0, 0xff, 0xff, 0x01, 0xc0, 0xff, 0xff, 0x01,
X   0x80, 0xff, 0xff, 0x00, 0x80, 0xff, 0xff, 0x00, 0x00, 0xff, 0x7f, 0x00,
X   0x00, 0xfe, 0x3f, 0x00, 0x00, 0xfc, 0x1f, 0x00, 0x00, 0xf0, 0x07, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 875 -ne `wc -c <'bitmaps/standard/bomb.bit'`; then
    echo shar: \"'bitmaps/standard/bomb.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/standard/bomb.bit'
fi
if test -f 'bitmaps/standard/ebomb.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/standard/ebomb.bit'\"
else
echo shar: Extracting \"'bitmaps/standard/ebomb.bit'\" \(878 characters\)
sed "s/^X//" >'bitmaps/standard/ebomb.bit' <<'END_OF_FILE'
X#define ebomb_width 32
X#define ebomb_height 32
Xstatic char ebomb_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x50, 0x00,
X   0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x80, 0x51, 0x00,
X   0x00, 0x80, 0x50, 0x00, 0x00, 0x80, 0x08, 0x00, 0x00, 0x80, 0x00, 0x00,
X   0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0xf0, 0x07, 0x00,
X   0x00, 0xfc, 0x1f, 0x00, 0x00, 0x0e, 0x38, 0x00, 0x00, 0x07, 0x70, 0x00,
X   0x80, 0x03, 0xe0, 0x00, 0x80, 0x01, 0xc0, 0x00, 0xc0, 0x00, 0x80, 0x01,
X   0xc0, 0x00, 0x80, 0x01, 0xc0, 0x00, 0x80, 0x01, 0xc0, 0x00, 0x80, 0x01,
X   0xc0, 0x00, 0x80, 0x01, 0xc0, 0x00, 0x80, 0x01, 0xc0, 0x00, 0x80, 0x01,
X   0x80, 0x01, 0xc0, 0x00, 0x80, 0x03, 0xe0, 0x00, 0x00, 0x07, 0x70, 0x00,
X   0x00, 0x0e, 0x38, 0x00, 0x00, 0xfc, 0x1f, 0x00, 0x00, 0xf0, 0x07, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 878 -ne `wc -c <'bitmaps/standard/ebomb.bit'`; then
    echo shar: \"'bitmaps/standard/ebomb.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/standard/ebomb.bit'
fi
if test -f 'bitmaps/standard/empty.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/standard/empty.bit'\"
else
echo shar: Extracting \"'bitmaps/standard/empty.bit'\" \(878 characters\)
sed "s/^X//" >'bitmaps/standard/empty.bit' <<'END_OF_FILE'
X#define empty_width 32
X#define empty_height 32
Xstatic char empty_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00,
X   0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 878 -ne `wc -c <'bitmaps/standard/empty.bit'`; then
    echo shar: \"'bitmaps/standard/empty.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/standard/empty.bit'
fi
if test -f 'bitmaps/standard/flag.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/standard/flag.bit'\"
else
echo shar: Extracting \"'bitmaps/standard/flag.bit'\" \(875 characters\)
sed "s/^X//" >'bitmaps/standard/flag.bit' <<'END_OF_FILE'
X#define flag_width 32
X#define flag_height 32
Xstatic char flag_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x07, 0x00,
X   0x00, 0x80, 0x1f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0xff, 0x00,
X   0x00, 0x80, 0xff, 0x03, 0x00, 0x80, 0xff, 0x07, 0x00, 0x80, 0xff, 0x01,
X   0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x80, 0x00, 0x00,
X   0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00,
X   0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00,
X   0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00,
X   0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00,
X   0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 875 -ne `wc -c <'bitmaps/standard/flag.bit'`; then
    echo shar: \"'bitmaps/standard/flag.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/standard/flag.bit'
fi
if test -f 'bitmaps/standard/known0.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/standard/known0.bit'\"
else
echo shar: Extracting \"'bitmaps/standard/known0.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/standard/known0.bit' <<'END_OF_FILE'
X#define known0_width 32
X#define known0_height 32
Xstatic char known0_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0xc0, 0x03, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x30, 0x0c, 0x00,
X   0x00, 0x18, 0x18, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x06, 0x60, 0x00,
X   0x00, 0x06, 0x60, 0x00, 0x00, 0x02, 0xc0, 0x00, 0x00, 0x03, 0xc0, 0x00,
X   0x00, 0x03, 0xc0, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x03, 0xc0, 0x00,
X   0x00, 0x03, 0xc0, 0x00, 0x00, 0x02, 0xc0, 0x00, 0x00, 0x06, 0x60, 0x00,
X   0x00, 0x06, 0x60, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x18, 0x18, 0x00,
X   0x00, 0x30, 0x0c, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xc0, 0x03, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/standard/known0.bit'`; then
    echo shar: \"'bitmaps/standard/known0.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/standard/known0.bit'
fi
if test -f 'bitmaps/standard/known1.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/standard/known1.bit'\"
else
echo shar: Extracting \"'bitmaps/standard/known1.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/standard/known1.bit' <<'END_OF_FILE'
X#define known1_width 32
X#define known1_height 32
Xstatic char known1_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
X   0x00, 0x80, 0x01, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0xe0, 0x01, 0x00,
X   0x00, 0xe0, 0x01, 0x00, 0x00, 0xb0, 0x01, 0x00, 0x00, 0x98, 0x01, 0x00,
X   0x00, 0x88, 0x01, 0x00, 0x00, 0x8c, 0x01, 0x00, 0x00, 0x84, 0x01, 0x00,
X   0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00,
X   0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00,
X   0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00,
X   0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00,
X   0x00, 0x80, 0x01, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0xf8, 0x1f, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/standard/known1.bit'`; then
    echo shar: \"'bitmaps/standard/known1.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/standard/known1.bit'
fi
if test -f 'bitmaps/standard/known2.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/standard/known2.bit'\"
else
echo shar: Extracting \"'bitmaps/standard/known2.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/standard/known2.bit' <<'END_OF_FILE'
X#define known2_width 32
X#define known2_height 32
Xstatic char known2_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x07, 0x00, 0x00, 0xfc, 0x0f, 0x00,
X   0x00, 0x0e, 0x18, 0x00, 0x00, 0x06, 0x18, 0x00, 0x00, 0x02, 0x30, 0x00,
X   0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00,
X   0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x0c, 0x00,
X   0x00, 0xc0, 0x07, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0x38, 0x00, 0x00,
X   0x00, 0x0c, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
X   0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
X   0x00, 0x06, 0x40, 0x00, 0x00, 0x06, 0x40, 0x00, 0x00, 0xfe, 0x7f, 0x00,
X   0x00, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/standard/known2.bit'`; then
    echo shar: \"'bitmaps/standard/known2.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/standard/known2.bit'
fi
if test -f 'bitmaps/standard/known3.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/standard/known3.bit'\"
else
echo shar: Extracting \"'bitmaps/standard/known3.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/standard/known3.bit' <<'END_OF_FILE'
X#define known3_width 32
X#define known3_height 32
Xstatic char known3_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0xff, 0x1f, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0x00, 0x0c, 0x00,
X   0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x80, 0x01, 0x00,
X   0x00, 0xc0, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00,
X   0x00, 0x18, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfe, 0x07, 0x00,
X   0x00, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x30, 0x00,
X   0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00,
X   0x00, 0x00, 0x30, 0x00, 0x00, 0x01, 0x30, 0x00, 0x00, 0x03, 0x30, 0x00,
X   0x00, 0x02, 0x18, 0x00, 0x00, 0x06, 0x1c, 0x00, 0x00, 0xfc, 0x0f, 0x00,
X   0x00, 0xf8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/standard/known3.bit'`; then
    echo shar: \"'bitmaps/standard/known3.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/standard/known3.bit'
fi
if test -f 'bitmaps/standard/known4.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/standard/known4.bit'\"
else
echo shar: Extracting \"'bitmaps/standard/known4.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/standard/known4.bit' <<'END_OF_FILE'
X#define known4_width 32
X#define known4_height 32
Xstatic char known4_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0f, 0x00,
X   0x00, 0x80, 0x0d, 0x00, 0x00, 0xc0, 0x0c, 0x00, 0x00, 0x60, 0x0c, 0x00,
X   0x00, 0x30, 0x0c, 0x00, 0x00, 0x18, 0x0c, 0x00, 0x00, 0x0c, 0x0c, 0x00,
X   0x00, 0x06, 0x0c, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x80, 0xff, 0x7f, 0x00,
X   0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00,
X   0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00,
X   0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00,
X   0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/standard/known4.bit'`; then
    echo shar: \"'bitmaps/standard/known4.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/standard/known4.bit'
fi
if test -f 'bitmaps/standard/known5.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/standard/known5.bit'\"
else
echo shar: Extracting \"'bitmaps/standard/known5.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/standard/known5.bit' <<'END_OF_FILE'
X#define known5_width 32
X#define known5_height 32
Xstatic char known5_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x00,
X   0x00, 0xfe, 0x3f, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
X   0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
X   0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
X   0x00, 0xfe, 0x07, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0x00, 0x38, 0x00,
X   0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00,
X   0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00,
X   0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x01, 0x30, 0x00,
X   0x00, 0x03, 0x30, 0x00, 0x00, 0x07, 0x18, 0x00, 0x00, 0x1e, 0x0e, 0x00,
X   0x00, 0xfc, 0x07, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/standard/known5.bit'`; then
    echo shar: \"'bitmaps/standard/known5.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/standard/known5.bit'
fi
if test -f 'bitmaps/standard/known6.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/standard/known6.bit'\"
else
echo shar: Extracting \"'bitmaps/standard/known6.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/standard/known6.bit' <<'END_OF_FILE'
X#define known6_width 32
X#define known6_height 32
Xstatic char known6_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0x00, 0x00, 0xe0, 0xff, 0x00,
X   0x00, 0x70, 0x80, 0x01, 0x00, 0x18, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00,
X   0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
X   0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
X   0x00, 0x18, 0x00, 0x00, 0x00, 0xd8, 0x7f, 0x00, 0x00, 0xf8, 0xff, 0x01,
X   0x00, 0x38, 0x80, 0x01, 0x00, 0x38, 0x00, 0x03, 0x00, 0x18, 0x00, 0x03,
X   0x00, 0x18, 0x00, 0x03, 0x00, 0x18, 0x00, 0x03, 0x00, 0x18, 0x00, 0x03,
X   0x00, 0x18, 0x00, 0x03, 0x00, 0x18, 0x00, 0x03, 0x00, 0x18, 0x00, 0x03,
X   0x00, 0x30, 0x80, 0x01, 0x00, 0x30, 0xc0, 0x01, 0x00, 0xe0, 0xff, 0x00,
X   0x00, 0xc0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/standard/known6.bit'`; then
    echo shar: \"'bitmaps/standard/known6.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/standard/known6.bit'
fi
if test -f 'bitmaps/standard/known7.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/standard/known7.bit'\"
else
echo shar: Extracting \"'bitmaps/standard/known7.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/standard/known7.bit' <<'END_OF_FILE'
X#define known7_width 32
X#define known7_height 32
Xstatic char known7_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0xf8, 0x3f, 0x00, 0x00, 0xf8, 0x3f, 0x00, 0x00, 0x08, 0x30, 0x00,
X   0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00,
X   0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x38, 0x00,
X   0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x0e, 0x00,
X   0x00, 0x00, 0x07, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x80, 0x01, 0x00,
X   0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00,
X   0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00,
X   0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/standard/known7.bit'`; then
    echo shar: \"'bitmaps/standard/known7.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/standard/known7.bit'
fi
if test -f 'bitmaps/standard/known8.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/standard/known8.bit'\"
else
echo shar: Extracting \"'bitmaps/standard/known8.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/standard/known8.bit' <<'END_OF_FILE'
X#define known8_width 32
X#define known8_height 32
Xstatic char known8_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x00,
X   0x00, 0xe0, 0x0f, 0x00, 0x00, 0x30, 0x18, 0x00, 0x00, 0x18, 0x30, 0x00,
X   0x00, 0x18, 0x30, 0x00, 0x00, 0x18, 0x30, 0x00, 0x00, 0x18, 0x30, 0x00,
X   0x00, 0x18, 0x30, 0x00, 0x00, 0x30, 0x18, 0x00, 0x00, 0x60, 0x0c, 0x00,
X   0x00, 0xc0, 0x07, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0x70, 0x1c, 0x00,
X   0x00, 0x18, 0x30, 0x00, 0x00, 0x0c, 0x60, 0x00, 0x00, 0x04, 0x40, 0x00,
X   0x00, 0x06, 0xc0, 0x00, 0x00, 0x06, 0xc0, 0x00, 0x00, 0x06, 0xc0, 0x00,
X   0x00, 0x06, 0xc0, 0x00, 0x00, 0x06, 0xc0, 0x00, 0x00, 0x04, 0x40, 0x00,
X   0x00, 0x0c, 0x60, 0x00, 0x00, 0x18, 0x30, 0x00, 0x00, 0xf0, 0x1f, 0x00,
X   0x00, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/standard/known8.bit'`; then
    echo shar: \"'bitmaps/standard/known8.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/standard/known8.bit'
fi
if test -f 'bitmaps/standard/known9.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/standard/known9.bit'\"
else
echo shar: Extracting \"'bitmaps/standard/known9.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/standard/known9.bit' <<'END_OF_FILE'
X#define known9_width 32
X#define known9_height 32
Xstatic char known9_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0xe0, 0x0f, 0x00,
X   0x00, 0x30, 0x18, 0x00, 0x00, 0x18, 0x30, 0x00, 0x00, 0x18, 0x30, 0x00,
X   0x00, 0x18, 0x30, 0x00, 0x00, 0x18, 0x30, 0x00, 0x00, 0x10, 0x30, 0x00,
X   0x00, 0x30, 0x38, 0x00, 0x00, 0xe0, 0x3f, 0x00, 0x00, 0xc0, 0x37, 0x00,
X   0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x10, 0x00,
X   0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0c, 0x00,
X   0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x03, 0x00,
X   0x00, 0x80, 0x01, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/standard/known9.bit'`; then
    echo shar: \"'bitmaps/standard/known9.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/standard/known9.bit'
fi
if test -f 'bitmaps/standard/think.bit' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/standard/think.bit'\"
else
echo shar: Extracting \"'bitmaps/standard/think.bit'\" \(881 characters\)
sed "s/^X//" >'bitmaps/standard/think.bit' <<'END_OF_FILE'
X#define think2_width 32
X#define think2_height 32
Xstatic char think2_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x07, 0x00,
X   0x00, 0x0c, 0x18, 0x00, 0x00, 0x03, 0x60, 0x00, 0x80, 0x00, 0x80, 0x00,
X   0x80, 0x00, 0x80, 0x00, 0x40, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x01,
X   0x20, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x02, 0x20, 0x40, 0x00, 0x02,
X   0x20, 0x10, 0x01, 0x02, 0x20, 0x00, 0x00, 0x02, 0x20, 0x00, 0x01, 0x02,
X   0x20, 0x00, 0x00, 0x02, 0x40, 0x00, 0x01, 0x01, 0x40, 0x80, 0x00, 0x01,
X   0x80, 0x40, 0x82, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x0f, 0x78, 0x00,
X   0x00, 0xf4, 0x17, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x0c, 0x18, 0x00,
X   0x00, 0xf4, 0x17, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x0c, 0x18, 0x00,
X   0x00, 0xf4, 0x17, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0xf8, 0x0f, 0x00,
X   0x00, 0xc0, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00};
END_OF_FILE
if test 881 -ne `wc -c <'bitmaps/standard/think.bit'`; then
    echo shar: \"'bitmaps/standard/think.bit'\" unpacked with wrong size!
fi
# end of 'bitmaps/standard/think.bit'
fi
if test -f 'debug_solver' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'debug_solver'\"
else
echo shar: Extracting \"'debug_solver'\" \(491 characters\)
sed "s/^X//" >'debug_solver' <<'END_OF_FILE'
X#!/usr/local/bin/perl
X
X#
X# debug solver
X# just print out the map
X#
X# %W% (UCLA) %G%
X#
X# statistics is Copyright (C) 1992 by John Heidemann, Los Angeles, CA.
X# All rights reserved.  Permission is granted to freely distribute
X# this as long as this copyright message is retained intact.
X# Permission to distribute this as part of a commerical product
X# requires explicit permission of the author.
X
X$| = 1;
X
Xwhile (<STDIN>) {
X	print STDERR $_;
X	if (/^$/) {
X		print STDOUT "\n";
X	};
X};
X
Xexit 0;
END_OF_FILE
if test 491 -ne `wc -c <'debug_solver'`; then
    echo shar: \"'debug_solver'\" unpacked with wrong size!
fi
chmod +x 'debug_solver'
# end of 'debug_solver'
fi
if test -f 'forced_solver.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'forced_solver.c'\"
else
echo shar: Extracting \"'forced_solver.c'\" \(1717 characters\)
sed "s/^X//" >'forced_solver.c' <<'END_OF_FILE'
X
X/*
X * forced_solver -
X * Do the corner rule.
X *
X * Improved 22-Sep-92 to also do the basic follow rule.
X *
X * forced_solver is Copyright (C) 1992 by John Heidemann, Los Angeles, CA.
X * All rights reserved.  Permission is granted to freely distribute
X * this as long as this copyright message is retained intact.
X * Permission to distribute this as part of a commerical product
X * requires explicit permission of the author.
X *
X */
X
X#include <stdio.h>
X#include "solver_io.h"
X
X
Xint 
Xapply_flag_if_unknown(x, y, ptr)
X	int x, y;
X	void *ptr;
X{
X	if (map[x][y].status==unknown) {
X		map[x][y].status = bomb_flag;
X		printf ("%d %d f\n", x, y);
X		return(1);
X	};
X	return(0);
X}
X
Xint 
Xapply_move_if_unknown(x, y, ptr)
X	int x, y;
X	void *ptr;
X{
X	if (map[x][y].status==unknown) {
X		map[x][y].status = bomb_flag;
X		printf ("%d %d m\n", x, y);
X		return(1);
X	};
X	return(0);
X}
X
X
Xint
Xplace_em()
X{
X	int x, y, ret = 0;
X	
X	/*
X	 * This is the basic follow rule.
X	 * If ted==0, it's empty.
X	 */
X	for (x = 1; x <= width; x++)
X		for (y = 1; y <= height; y++)
X			if (map[x][y].status==empty && 
X			    map[x][y].ted == 0) {
X				ret |= apply_neighbor(x,y,apply_move_if_unknown, NULL);
X			};
X
X	/*
X	 * This is the basic corner rule.
X	 * If ted==empties, it's a bomb.
X	 */
X	for (x = 1; x <= width; x++)
X		for (y = 1; y <= height; y++)
X			if (map[x][y].status==empty && 
X			    map[x][y].ted == map[x][y].neighbor_unknowns) {
X				ret |= apply_neighbor(x,y,apply_flag_if_unknown, NULL);
X			};
X	return(ret);
X}
X	
Xmain()
X{
X	int ret;
X	while (!feof(stdin)) {
X		read_data();
X		if (counts[bomb_flag])
X			exit (1);   /* we don't allow flags, yet */
X		calc_em();
X		ret = place_em();
X		printf ("\n");   /* terminate output */
X		fflush(stdout);
X	};
X	exit (0);
X}
END_OF_FILE
if test 1717 -ne `wc -c <'forced_solver.c'`; then
    echo shar: \"'forced_solver.c'\" unpacked with wrong size!
fi
# end of 'forced_solver.c'
fi
if test -f 'prob_solver.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'prob_solver.c'\"
else
echo shar: Extracting \"'prob_solver.c'\" \(2128 characters\)
sed "s/^X//" >'prob_solver.c' <<'END_OF_FILE'
X
X/*
X * probabalistic flag identifier
X * @(#)prob_solver.c	1.3 (UCLA) 10/6/92
X *
X * xbomb is Copyright (C) 1992 by Matthew Merzbacher, Los Angeles, CA.
X * All rights reserved.  Permission is granted to freely distribute
X * this as long as this copyright message is retained intact.
X * Permission to distribute this as part of a commerical product
X * requires explicit permission of the author.
X *
X */
X
X
X#include <stdio.h>
X#include "solver_io.h"
X
X
X#define KNOWN(s) ((s == empty) || (s == bomb) || (s == edge))
X	
Xstruct cell {
X	float prob, inc;
X};
X
Xstruct cell mymap[MAXWIDTH+2][MAXHEIGHT+2];
X
Xint
Xplace_em()
X{
X	int x, y, ret = 0, dx, dy;
X	int maxx, maxy, found;
X	float inc, max, tot;
X	
X	for (x = 1; x <= width; x++)
X		for (y = 1; y <= height; y++) {
X			if ((map[x][y].status == empty) &&
X			   (map[x][y].neighbor_unknowns > 0))
X				mymap[x][y].inc = 
X					((float) map[x][y].ted) / 
X					((float) map[x][y].neighbor_unknowns);
X			else mymap[x][y].inc = 0.0;
X			}
X			
X
X	for (x = 1; x <= width; x++)
X		for (y = 1; y <= height; y++) {
X			mymap[x][y].prob = 0.0;
X			if (map[x][y].status == unknown) {
X				for (dx = -1; dx <= 1; dx++)
X					for (dy = -1; dy <= 1; dy++)
X						mymap[x][y].prob += 
X							mymap[x+dx][y+dy].inc;
X				}
X			}
X
X	found = 0;
X
X	for (x = 1; x <= width; x++)
X		for (y = 1; y <= height; y++)
X			if (map[x][y].status == unknown) {
X
X				if (!found || (mymap[x][y].prob > max)) {
X					maxx = x; maxy = y;
X					max = mymap[x][y].prob;
X					found = 1;
X					}
X
X/*
X				for (dx = -1; dx <= 1; dx++)
X					for (dy = -1; dy <= 1; dy++)
X						if (((dx != 0) || (dy != 0)) &&
X						    map[x+dx][y+dy].status == unknown)
X							tot -= mymap[x+dx][y+dy].prob;
X						if (!found || (tot > max)) {
X							maxx = x; maxy = y;
X							max = tot;
X							found = 1;
X							}
X*/
X
X				}
X	
X	printf("%d %d f\n", maxx, maxy);
X
X	fprintf(stderr, "%d %d f %0.4f\n", maxx, maxy, max);
X	
X	return(ret);
X}
X
Xmain()
X{
X	int ret;
X	while (!feof(stdin)) {
X		read_data();
X		if (counts[bomb_flag])
X			exit (1);   /* we don't allow flags, yet */
X		calc_em();
X		ret = place_em();
X		printf ("\n");   /* terminate output */
X		fflush(stdout);
X	};
X	exit (0);
X}
END_OF_FILE
if test 2128 -ne `wc -c <'prob_solver.c'`; then
    echo shar: \"'prob_solver.c'\" unpacked with wrong size!
fi
# end of 'prob_solver.c'
fi
if test -f 'statistics' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'statistics'\"
else
echo shar: Extracting \"'statistics'\" \(1081 characters\)
sed "s/^X//" >'statistics' <<'END_OF_FILE'
X#!/usr/local/bin/perl
X
X#
X# output statistics about map
X# @(#)statistics	1.4 (UCLA) 10/15/92
X#
X# statistics is Copyright (C) 1992 by John Heidemann, Los Angeles, CA.
X# All rights reserved.  Permission is granted to freely distribute
X# this as long as this copyright message is retained intact.
X# Permission to distribute this as part of a commerical product
X# requires explicit permission of the author.
X#
X#
X
X
X$| = 1;   # no output buffering
X
X
X
X#
X# loop reading boards
X#
X
Xfor (;!eof(STDIN);) {
X
X	# read in data
X	while (<STDIN>) {
X		chop;
X		if (/^numbombs (\d+)/) {
X			$numbombs = $1;
X		};
X		last if (/map/);
X	};
X	@map = ();
X	while (<STDIN>) {
X		last if (/^$/);
X		chop;
X		push (@map, $_);
X	};
X
X	$bombsfound = $unknownfound = 0;
X	# figure stats
X	foreach (@map) {
X		$bombsfound += tr/X/X/;
X		$unknownfound += tr/././;
X	};
X
X	# report stats
X	print STDERR "Bombs found: $bombsfound\n";
X	print STDERR "Unkowns found: $unknownfound\n";
X	printf STDERR "Guess chance: %.5f\n", ($numbombs-$bombsfound) / $unknownfound;
X	print STDERR "\n";
X	# we draw no conclusions
X	print "\n";
X
X};
X
Xexit (0);
END_OF_FILE
if test 1081 -ne `wc -c <'statistics'`; then
    echo shar: \"'statistics'\" unpacked with wrong size!
fi
chmod +x 'statistics'
# end of 'statistics'
fi
if test -f 'xbomb.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'xbomb.h'\"
else
echo shar: Extracting \"'xbomb.h'\" \(2299 characters\)
sed "s/^X//" >'xbomb.h' <<'END_OF_FILE'
X
X#include <stdio.h>
X#include <sys/file.h>
X#include <sys/wait.h>
X#include <pwd.h>
X#include <string.h>
X
X#include <errno.h>
X
X#include <X11/Xatom.h>
X#include <X11/Xlib.h>
X#include <X11/Xutil.h>
X#include <X11/cursorfont.h>
X
X#include <sys/time.h>
X
X#ifndef _PATH_SCORE
Xerror ("_PATH_SCORE must be defined in the Makefile")
X#endif
X
X#ifndef _PATH_SOLVERS
Xerror ("_PATH_SOLVERS must be defined in the Makefile")
X#endif
X
X#ifndef _PATH_BITMAPS
Xerror ("_PATH_BITMAPS must be defined in the Makefile")
X#endif
X
X#define NUM_SCORES 100
X#define MAX_PER_PLAYER 5
X#define TOP_PRINT 5
X
Xtypedef struct score {
X        char    name[10];
X        int     size;
X        int     bombs;
X        int     defused;
X	int	won;
X	int	score;
X	time_t	time;
X	int	mine;
X};
X
X	
X	
X#define  MAXWIDTH	100
X#define  MAXHEIGHT	100
X#define  DEFWIDTH	20
X#define  DEFHEIGHT	20
X#define  WIDTH		32
X#define  HEIGHT		32
X
X#define XTOCOLUMN(X)	((X)/(WIDTH))
X#define YTOROW(Y)	((Y)/(HEIGHT) - 1)
X	
X#define  EMPTY		10
X#define  FLAG		11
X#define  BOMB		12
X#define  KEMPTY		13
X#define  KBOMB		14
X#define  EBOMB		15
X#define  BORDER		16
X#define  CHECK 20
X#define  BLANK          17
X#define  THINK          18
X
Xvoid move_somewhere();
Xvoid place_flag();
Xvoid bail();
X
X
Xextern int dead,
X	numflags,
X	emptylen,
X	numempty,
X	button,
X	shifted,
X	numbombs,
X	width,
X	height,
X	ted,
X	onlyprint,
X	randomE,
X	randomB,
X	seed,
X	showscore,
X	betterfollow,
X	startwithzero,
X	playagain;
X
Xextern char *name;
Xextern char *bitdir;
X	
Xextern char *geom;
Xextern int borderWidth;
X
X#define MAX_SOLVERS 10
Xextern char *solvers[MAX_SOLVERS];
Xextern FILE *solver_rfps[MAX_SOLVERS], *solver_wfps[MAX_SOLVERS];
Xextern int solver_pids[MAX_SOLVERS];
X
X
Xstruct cell {
X	unsigned status;
X	unsigned neighbors;
X	unsigned flag;
X	int neighbor_kbombs;
X	int neighbor_unknowns;  /* not maintained */
X};
X	
X#define is_bomb(s)  ((s == BOMB)?1:0)
X#define is_bomb_or_flag(s) ((s==BOMB || s==FLAG)?1:0)
X#define is_unknown(s) ((s==BOMB || s==EMPTY)?1:0)
X
Xextern struct cell map[MAXWIDTH+2][MAXHEIGHT+2];
X	
Xextern Display     *dpy;
Xextern int         screen;
Xextern GC          gc;
X	
Xextern Window      rootWindow, puzzleWindow;
Xextern long        FgPixel, BgPixel, BdPixel;
X	
Xextern Pixmap pixmaps[20];
X	
Xextern int apply_inc_if_bomb(),
X	apply_inc_if_unknown(),
X	apply_flag_if_unknown(),
X	apply_add_neighbor_kbombs();
END_OF_FILE
if test 2299 -ne `wc -c <'xbomb.h'`; then
    echo shar: \"'xbomb.h'\" unpacked with wrong size!
fi
# end of 'xbomb.h'
fi
echo shar: End of archive 3 \(of 4\).
cp /dev/null ark3isdone
MISSING=""
for I in 1 2 3 4 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 4 archives.
    rm -f ark[1-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
