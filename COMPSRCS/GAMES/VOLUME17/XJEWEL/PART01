Path: uunet!news.tek.com!master!saab!billr
From: billr@saab.CNA.TEK.COM (Bill Randle)
Newsgroups: comp.sources.games
Subject: v17i001:  xjewel - dropping jewels game for X11, Part01/05
Message-ID: <4508@master.CNA.TEK.COM>
Date: 8 Feb 93 21:37:20 GMT
Sender: news@master.CNA.TEK.COM
Lines: 1253
Approved: billr@saab.CNA.TEK.COM
Xref: uunet comp.sources.games:1680

Submitted-by: dcooper@datap.ca (Dave Cooper)
Posting-number: Volume 17, Issue 1
Archive-name: xjewel/Part01
Environment: X11, Xlib, Unix, VMS

	[An earlier version of this game was posted on alt.sources awhile
	back. This version fixes some bugs and supports monochrome displays. -br]

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 1 (of 5)."
# Contents:  README MANIFEST bitmaps bitmaps/biglogo.xbm xw.c
# Wrapped by billr@saab on Mon Feb  8 11:36:52 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'README'\"
else
echo shar: Extracting \"'README'\" \(7152 characters\)
sed "s/^X//" >'README' <<'END_OF_FILE'
X==============================================================================
X
X			    #
X			   #  ######  #    #  ######  #
X			  #  #       #    #  #       #
X			 #  #####   #    #  #####   #
X		  #     #  #       # ## #  #       #
X		 #     #  #       ##  ##  #       #
X		 #####   ######  #    #  ######  ######
X
X==============================================================================
X
XThis game was originally written by Yoshihiro Satoh of HP.  I have made a
Xmodest attempt to replicate Domain/JewelBox under X.
X
XI have somewhat rudely taken the bitmaps from the original game and
Xcreated this version.  I hold the copyright for the code, as I created
Xit, but I hold no claim to the bitmaps which were freely
Xdistributed with the Domain version.
X
XREDISTRIBUTION in source or binary from is permited as long as adequate
Xnotation of the originators is retained, including the developer of the 
Xoriginal Domain/Jewlbox, Yoshihiro Satoh.
XNOTE: I do not claim to hold any copyright on columns games, Jewelbox, or any
Xrelated name or icon.  I have written the source and thats all I hold claim to.
X
XUSE AT YOUR OWN RISK AND PERIL, I MAKE NO CLAIM OF USEABILITY OR WARANTY.
X
XBUILDING
X========
X
XJewel SHOULD compile on any UNIX or VMS machines:
X
XUNIX:
XIn order to build xjewel:
X    1) edit the Imakefile to taste.
X        NOTE if you do not have imake use the file Makefile.simple and skip 2)
X            Worthwhile defines:
X                USE_SELECT - for the BSD crowd
X                        (define if build fails to find the poll system call)
X                ICON_WINDOW - for a dynamic icon window rather than static
X                DECWM - for a site using the DECwindows session manager
X    2) build the make file -> xmkmf or imake...
X    3) build the font: ( NOTE: only if desired, the game will run with out it )
X        % make bitmaps/seven_seg.snf
X	% xset +fp <curr path>
X	NOTE:   the xset will work only when you are local to the X-server,
X		on networked machines you have to add the font to the servers
X		font directories as appropriate...
X		AGAIN: The game will play without it.
X    4) make the program:
X        % make 
X    5) install and make the scorefile:
X	% copy xjewel ``your exec dir''/xjewel
X	% chmod a-w ``your exec dir''/xjewel
X        % touch ``your scorefile dir''/xjewel.scores
X        % chmod a+w ``your scorefile dir''/xjewel.scores
X	OR:
X	% make install
X    6) and enjoy....
Xalso:
X    7) Please edit the man page to show the exe path if desired, and install.
X	% copy xjewel.man /usr/local/man/man6/xjewel.6
X	OR:
X	% make install.man
X
XI have been able to build this on ISC 3.0, HP-UX 8.02, Ultrix 4.2, Solaris 1.0,
XDomain X11R4, and OSF1.0.  All have functioned as expected.
X
XIt reportedly builds on Dell SVR4 v2.1, and several other un-named machines.
X
XVMS:
X    1) edit make.com to setup HSCORE_FILE
X    2) build both the font and executable:
X        @make.com
X    3) install the program and font
X	% copy xjewel.exe ``your local exec area''
X	% copy xjewel.hlb ``your local help area''
X	% copy [.bitmaps]seven_seg.* ``your local font area''
X		NOTE: new fonts may require restarting your x-server
X    4) and enjoy....
X
XI have been able to build this on VMS V5.5 and run with DECwindows.
X
XThere is a man page in xjewel.man and a ps version in xjewel.ps.
X
XPLAYING
X=======
X
XJewel is a game much like Domain/Jewelbox which is a puzzle game like
XTetris.
X
XIt is played by controling the motion of blocks which continue to fall from
Xthe top of the screen.  One can move them left and right, as well as
Xrotate the jewel segements.  The object is to get the most points before
Xthe grim reaper ends the fun.
X
XDeath happens when the screen is no longer capable of holding any more
Xblocks.  To make high scores more interesting, you are given but three
Xattempts to get points -- use them wisely.
X
XAs the game progresses, and more jewels are removed, the speed of the game
Xwill increase.  This is measured in seconds of delay between steps of
Xblock motion.
X
XKeys
X----
XThere are three sets of keys that can be used:
X( or any combination )
X
XOption 1:
X         +---+ +---+ +---+
X         | j | | k | | l |
X         +---+ +---+ +---+
X           ^     ^     ^
X           |     |     |__ move block right
X           |     |________ rotate block
X           |______________ move block left
X
X         +---------+
X         |  SPACE  | <---- drop block
X         +---------+
X
XOption 2:
X         +---+ +---+ +---+
X         | 4 | | 5 | | 6 |
X         +---+ +---+ +---+
X           ^     ^     ^
X           |     |     |__ move block right
X           |     |________ rotate block
X           |______________ move block left
X
X         +---------+
X         |    0    | <---- drop block
X         +---------+
X
XOption 3: (cursor keypad)
X                
X               +---+
X               | ^ | <----  rotate block
X               +---+
X         +---+ +---+ +---+
X         | < | | V | | > |
X         +---+ +---+ +---+
X           ^     ^     ^
X           |     |     |__ move block right
X           |     |________ drop block
X           |______________ move block left
X
X
XRotations
X---------
XThe folowing rotations are possible:
X( there are no others )
X
X              +---+       +---+       +---+
X              | 1 |       | 3 |       | 2 |
X              +---+       +---+       +---+
X              | 2 |  ==>  | 1 | ==>   | 3 |
X              +---+       +---+       +---+
X              | 3 |       | 2 |       | 1 |
X              +---+       +---+       +---+
X
X
X
XSCORING
X=======
X
XThe basic way to get points is to unite the jewels to form triplet (or
Xhigher) matches.  This can be done in any direction, and can be
Xaccomplished in more than one part of the board at one time.  As the
Xjewels are removed, the board falls to fill the spaces -- matches may
Xagain occur.
X
XThese teritiary matches provide an interesting part to the game due to the
Xformula for calculating points:
X    
X    ( 300 (for base triplet) + 150 * (each additional jewel) ) * 2^order
X
X    where order is the number of the repeition from which the match
X    occured.
X
XAs a light at the end of the bleak tunnel, a WILD CARD is available.  The
Xwild block will be given at infrequent intervals, and will give the user
Xthe points for one triplet by removing all the jewels of a particular
Xshape/color.
X
XTo add some interest to the game, points are awarded for dropping the
Xblock from a height above its resting place.  This is accumlated at 10
Xpoints per level above the place it will rest.
X
XStages
X------
XThere are no changes for the higher levels, although the speed increases,
Xproportionaly to the level.  Stage increases with the successful
Xcompletion of the 50 jewels required per level.  The current status is
Xshown in the REST field.
X
X
XORIGINAL NOTATIONS
X==================
X>Authors
X>-------
X>
X>   Programming       Yoshihiro Satoh
X>   Font Design       Yoshiharu Minami
X>   Document Writing  Nancy Paisner
X>
X>Copyright
X>---------
X>
X>  This software is in the Yoshihiro's Arcade Collections.
X>  Domain/JewelBox is a trade mark of Yoshihiro Satoh.
X>
X>  Copyright @ 1990 by Yoshihiro Satoh
X>  All rights are reserved by Yoshihiro Satoh.
X
Xxjewel - Jewel for X11 Copyright 1992 by David Cooper
X
END_OF_FILE
if test 7152 -ne `wc -c <'README'`; then
    echo shar: \"'README'\" unpacked with wrong size!
fi
# end of 'README'
fi
if test -f 'MANIFEST' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MANIFEST'\"
else
echo shar: Extracting \"'MANIFEST'\" \(2388 characters\)
sed "s/^X//" >'MANIFEST' <<'END_OF_FILE'
X   File Name		Archive #	Description
X-----------------------------------------------------------
X CHANGES                    5	of course
X Imakefile                  4	basic imake makefile
X MANIFEST                   1	.
X Makefile.simple            4	basic makefile for systems without imake
X README                     1	of course
X bitmaps                    1	directory of various bitmaps and fonts
X bitmaps/back1.xbm          5	.
X bitmaps/back2.xbm          5	.
X bitmaps/back3.xbm          5	.
X bitmaps/back4.xbm          5	.
X bitmaps/biglogo.xbm        1	.
X bitmaps/border.xbm         4	.
X bitmaps/border1.xbm        4	.
X bitmaps/button.xbm         4	.
X bitmaps/flash1.xbm         4	.
X bitmaps/flash2.xbm         4	.
X bitmaps/flash3.xbm         4	.
X bitmaps/flash4.xbm         4	.
X bitmaps/icon.xbm           5	.
X bitmaps/jewel.xbm          4	.
X bitmaps/jewellogo.xbm      2	.
X bitmaps/jewellogo2.xbm     2	.
X bitmaps/piece1.xbm         4	.
X bitmaps/piece2.xbm         4	.
X bitmaps/piece3.xbm         4	.
X bitmaps/piece4.xbm         4	.
X bitmaps/piece5.xbm         4	.
X bitmaps/piece6.xbm         4	.
X bitmaps/seven_seg.bdf      3	.
X bitmaps/skule.xbm          5	.
X bitmaps/skulemask.xbm      4	.
X bitmaps/smicon.xbm         5	.
X game.c                     3	code to handle game state
X game.h                     5	.
X general.h                  5	global defs
X help.c                     4	code to handle help state
X help.h                     5	.
X hscore.c                   4	code to handle high score file
X hscore.h                   5	.
X intro.c                    2	code to handle intro state
X intro.h                    5	.
X jewel.c                    3	main code and initialization
X jewel.h                    4	.
X logic.c                    3	code to handle logic during game state
X logic.h                    2	.
X make.com                   3	VMS make procedures
X panel.c                    4	code to handle the game screen
X panel.h                    5	.
X version.h                  5	version file
X vmsstubs.c                 5	required VMS routines
X xhscore.c                  3	code to handle high score state
X xhscore.h                  5	.
X xjewel.help                4	VMS help file
X xjewel.man                 4	UNIX roff man page
X xjewel.ps                  2	postscript version of man page
X xw.c                       1	X interface code
X xw.h                       4	.
END_OF_FILE
if test 2388 -ne `wc -c <'MANIFEST'`; then
    echo shar: \"'MANIFEST'\" unpacked with wrong size!
fi
# end of 'MANIFEST'
fi
if test ! -d 'bitmaps' ; then
    echo shar: Creating directory \"'bitmaps'\"
    mkdir 'bitmaps'
fi
if test -f 'bitmaps/biglogo.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/biglogo.xbm'\"
else
echo shar: Extracting \"'bitmaps/biglogo.xbm'\" \(32312 characters\)
sed "s/^X//" >'bitmaps/biglogo.xbm' <<'END_OF_FILE'
X#define biglogo_width 577
X#define biglogo_height 86
Xstatic char biglogo_bits[] = {
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x00,0x00,0xf8,0xff,0xff,0xff,0xff,0xff,
X 0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0xff,0xff,0x07,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0xfe,0x00,0x80,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x03,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0xff,0xff,0xff,0x07,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0xfe,0x00,0xc0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0f,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0xfe,0x00,0xe0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x1f,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x1f,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0xc0,0xff,0xff,0xff,0xff,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x00,
X 0xe0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0xfc,0xff,0xff,0xff,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x00,0xe0,0xff,
X 0xff,0xff,0xff,0xff,0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0xf8,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,
X 0xff,0xff,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x00,0xe0,0xff,0xff,0xff,
X 0xff,0xff,0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0xfc,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,
X 0xff,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x00,0xe0,0xff,0xff,0xff,0xff,0xff,
X 0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,
X 0xff,0xff,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,
X 0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0xfe,0x00,0xe0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
X 0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,
X 0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x3f,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0xfe,0x01,0x00,0xfe,0x00,0xc0,0x3f,0x00,0xfe,0xff,0xff,0x3f,0xf8,0x3f,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0xff,0x1f,0x00,
X 0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0xff,0x87,0xff,0xff,0xff,0x3f,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x3f,
X 0x00,0xfe,0x00,0x80,0x0f,0x00,0xf8,0xff,0xff,0x0f,0xf0,0x1f,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0xff,0xff,0x1f,0x00,0x00,0x00,
X 0x00,0x00,0x00,0xfc,0xff,0xff,0x01,0xff,0xff,0xff,0x3f,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x3f,0x00,0xfe,
X 0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x03,0xe0,0x03,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0xff,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,
X 0x00,0xf8,0xff,0x01,0x00,0x00,0xf8,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x3f,0x00,0xfe,0x00,0x00,
X 0x00,0x00,0x00,0xfe,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0xe0,0xff,0x3f,0xf8,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,
X 0x3f,0x00,0x00,0x00,0xe0,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0x7f,0x00,0xfe,0x00,0x00,0x00,0x00,
X 0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0xf0,0xff,0x0f,0xf0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,
X 0x00,0x00,0xc0,0xff,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0xe0,0xff,0x7f,0x00,0xfe,0x00,0x00,0x00,0x00,0x00,0xf8,
X 0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,
X 0xff,0x07,0xf0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x80,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0xe0,0xff,0x7f,0x00,0xfe,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0x01,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x03,
X 0xf0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,
X 0xff,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0xe0,0xff,0xff,0x00,0xfe,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0x01,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0xf0,0x3f,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0x07,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x01,0x00,0x00,0xe0,0xff,
X 0xff,0x00,0xfe,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0x03,0x00,0x00,0x00,0x00,
X 0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x01,
X 0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0xfc,0x7f,0x00,0xf0,0x3f,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0x07,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x07,0x00,0x00,0xe0,0xff,0xff,0x00,
X 0xfe,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x03,0x00,0x00,0x00,0x00,0xc0,0xff,
X 0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x03,0x00,0x00,
X 0xc0,0xff,0xff,0x01,0x00,0x00,0xfe,0x3f,0x00,0xf0,0x3f,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x07,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x80,0xff,0x3f,0x00,0x00,0xe0,0xff,0xff,0x00,0xfe,0x00,
X 0x00,0x00,0x00,0x00,0x80,0xff,0x07,0x00,0x00,0x00,0x00,0xf0,0xff,0xff,0x07,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x07,0x00,0x00,0xf0,0xff,
X 0xff,0x07,0x00,0x00,0xfe,0x1f,0x00,0xf0,0x3f,0x00,0x00,0x00,0x00,0x00,0x80,
X 0xff,0x01,0x00,0x00,0x00,0x00,0xc0,0xff,0x07,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0xc0,0xff,0xff,0x01,0x00,0xc0,0xff,0xff,0x00,0xfe,0x00,0x00,0x00,
X 0x00,0x00,0x80,0xff,0x07,0x00,0x00,0x00,0x00,0xf8,0xff,0xff,0x0f,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x0f,0x00,0x00,0xf8,0xff,0xff,0x0f,
X 0x00,0x00,0xff,0x0f,0x00,0xf0,0x3f,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0x03,
X 0x00,0x00,0x00,0x00,0x80,0xff,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0xe0,0xff,0xff,0x07,0x00,0xc0,0xff,0xff,0x00,0xfe,0x00,0x00,0x00,0x00,0x00,
X 0x00,0xff,0x0f,0x00,0x00,0x00,0x00,0xfe,0xff,0xff,0x1f,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0xfe,0x0f,0x00,0x00,0xfe,0xff,0xff,0x1f,0x00,0x00,
X 0xff,0x0f,0x00,0xf0,0x3f,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0x07,0x00,0x00,
X 0x00,0x00,0x80,0xff,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,
X 0xff,0x0f,0x00,0x80,0xff,0x7f,0x00,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0xff,
X 0x0f,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0xfe,0x0f,0x00,0x00,0xff,0xff,0xff,0x3f,0x00,0x00,0xff,0x0f,
X 0x00,0xf8,0x3f,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0x07,0x00,0x00,0x00,0x00,
X 0x80,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0xff,0x1f,
X 0x00,0x00,0xe0,0x7f,0x00,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x1f,0x00,
X 0x00,0x00,0x80,0xff,0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0xfe,0x0f,0x00,0x80,0xff,0xff,0xff,0x7f,0x00,0x80,0xff,0x07,0x00,0xf8,
X 0x3f,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0x07,0x00,0x00,0x00,0x00,0x80,0xff,
X 0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0xff,0x1f,0x00,0x00,
X 0xe0,0x7f,0x00,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x1f,0x00,0x00,0x00,
X 0xc0,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,
X 0x0f,0x00,0xc0,0xff,0xff,0xff,0xff,0x00,0x80,0xff,0x07,0x00,0xfc,0x3f,0x00,
X 0x00,0x00,0x00,0x00,0xf0,0xff,0x0f,0x00,0x00,0x00,0x00,0x80,0xff,0x03,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0xff,0x3f,0x00,0x00,0xe0,0x3f,
X 0x00,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x3f,0x00,0x00,0x00,0xe0,0xff,
X 0xff,0xff,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x0f,0x00,
X 0xe0,0xff,0xff,0xff,0xff,0x01,0x80,0xff,0x07,0x00,0xfc,0x3f,0x00,0x00,0x00,
X 0x00,0x00,0xf0,0xff,0x0f,0x00,0x00,0x00,0x00,0x80,0xff,0x03,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x3f,0x00,0x00,0xf0,0x3f,0x00,0xfe,
X 0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x3f,0x00,0x00,0x00,0xf0,0xff,0xff,0xff,
X 0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x0f,0x00,0xf0,0xff,
X 0xff,0xff,0xff,0x03,0x80,0xff,0x03,0x00,0xfe,0x1f,0x00,0x00,0x00,0x00,0x00,
X 0xe0,0xff,0x0f,0x00,0x00,0x00,0x00,0x80,0xff,0x03,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x80,0xff,0xff,0xff,0x3f,0x00,0x00,0xf8,0x3f,0x00,0xfe,0x00,0x00,
X 0x00,0x00,0x00,0x00,0xf8,0x7f,0x00,0x00,0x00,0xf8,0xff,0xff,0xff,0xff,0x07,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x07,0x00,0xf8,0xff,0xff,0xff,
X 0xff,0x07,0x80,0xff,0x03,0x00,0xff,0x1f,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,
X 0x0f,0x00,0x00,0x00,0x00,0xc0,0xff,0x01,0x00,0x00,0x00,0xf8,0x01,0x00,0x00,
X 0xc0,0xff,0xff,0xff,0x7f,0x00,0x00,0xfc,0x3f,0x00,0xfe,0x00,0x00,0x00,0x00,
X 0x00,0x00,0xf8,0x7f,0x00,0x00,0x00,0xfc,0xff,0xff,0xff,0xff,0x0f,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x01,0x00,0xfc,0xff,0xff,0xff,0xff,0x0f,
X 0xc0,0xff,0x03,0x00,0xff,0x1f,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x0f,0x00,
X 0x00,0x00,0x00,0xc0,0xff,0x01,0x00,0x00,0x00,0xfe,0x1f,0x00,0x00,0xe0,0xff,
X 0xff,0xff,0xff,0x00,0x00,0xfc,0x3f,0x00,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,
X 0xf0,0xff,0x00,0x00,0x00,0xfe,0xff,0xff,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0xc0,0xff,0x01,0x00,0xfe,0xff,0xff,0xff,0xff,0x0f,0xc0,0xff,
X 0x03,0x80,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x0f,0x00,0x00,0x00,
X 0x00,0xe0,0xff,0x01,0x00,0x00,0x00,0xff,0x1f,0x00,0x00,0xf0,0xff,0xff,0xff,
X 0xff,0x00,0x00,0xfe,0x3f,0x00,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,
X 0x00,0x00,0x00,0xfe,0xff,0x7f,0xf8,0xff,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0xc0,0xff,0x07,0x00,0xfe,0xff,0x7f,0xf8,0xff,0x1f,0xc0,0xff,0x01,0xc0,
X 0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x0f,0x00,0x00,0x00,0x00,0xe0,
X 0xff,0x00,0x00,0xfc,0xff,0xff,0x3f,0x00,0x00,0xfc,0xff,0xff,0xff,0xff,0x00,
X 0x00,0xfe,0x3f,0x00,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0x01,0x00,
X 0x00,0xff,0xff,0x03,0xe0,0xff,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,
X 0xff,0x0f,0x00,0xff,0xff,0x03,0xe0,0xff,0x1f,0xc0,0xff,0x01,0xe0,0xff,0x0f,
X 0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x1f,0x00,0x00,0x00,0x00,0xf0,0xff,0x00,
X 0x00,0xfe,0xff,0xff,0x7f,0x00,0x00,0xfe,0xff,0xff,0xff,0xff,0x00,0x00,0xff,
X 0x3f,0x00,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0x01,0x00,0x00,0xff,
X 0x7f,0x00,0x80,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x1f,
X 0x00,0xff,0x7f,0x00,0x80,0xff,0x3f,0xc0,0xff,0x01,0xf0,0xff,0x07,0x00,0x00,
X 0x00,0x00,0x00,0x00,0xff,0x1f,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0xff,
X 0xff,0xff,0xff,0x01,0x00,0xfe,0xff,0xc7,0xff,0xff,0x01,0x00,0xff,0x1f,0x00,
X 0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0x03,0x00,0x80,0xff,0x3f,0x00,
X 0x00,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x3f,0x80,0xff,
X 0x3f,0x00,0x00,0xff,0x3f,0xc0,0xff,0x01,0xf8,0xff,0x07,0x00,0x00,0x00,0x00,
X 0x00,0x00,0xff,0x1f,0x00,0x00,0xf0,0x0f,0xf8,0x7f,0x00,0x80,0xff,0xff,0xff,
X 0xff,0x07,0x00,0xff,0xff,0x00,0xff,0xff,0x01,0x80,0xff,0x1f,0x00,0xfe,0x00,
X 0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x03,0x00,0x80,0xff,0x1f,0x00,0x00,0xfe,
X 0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x80,0xff,0x1f,0x00,
X 0x00,0xfe,0x3f,0xc0,0xff,0x01,0xfc,0xff,0x07,0x00,0x00,0x00,0x00,0x00,0x00,
X 0xff,0x1f,0x00,0x00,0xf8,0x7f,0xf8,0x7f,0x00,0xc0,0xff,0xff,0xff,0xff,0x0f,
X 0x00,0xff,0xff,0x00,0xfc,0xff,0x01,0xc0,0xff,0x1f,0x00,0xfe,0x00,0x00,0x00,
X 0x00,0x00,0x00,0xc0,0xff,0x07,0x00,0x80,0xff,0x0f,0x00,0x00,0xfe,0x3f,0x80,
X 0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x7f,0x80,0xff,0x0f,0x00,0x00,0xfe,
X 0x3f,0xc0,0xff,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x1f,
X 0x00,0x00,0xfc,0xff,0xff,0x1f,0x00,0xe0,0xff,0xff,0xff,0xff,0x1f,0x80,0xff,
X 0x3f,0x00,0xf0,0xff,0x03,0xe0,0xff,0x07,0x00,0xfe,0x00,0x00,0x00,0x00,0x00,
X 0x00,0xc0,0xff,0x07,0x00,0x80,0xff,0x07,0x00,0x00,0xfe,0x3f,0xc0,0xff,0x00,
X 0x00,0x00,0x00,0x00,0x00,0xf8,0x7f,0x80,0xff,0x07,0x00,0x00,0xfe,0x3f,0xc0,
X 0xff,0x00,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,
X 0xfe,0xff,0xff,0x0f,0x00,0xf0,0xff,0xff,0xff,0xff,0x3f,0x80,0xff,0x1f,0x00,
X 0xe0,0xff,0x03,0xf8,0xff,0x01,0x00,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,
X 0xff,0x07,0x00,0x80,0xff,0x03,0x00,0x00,0xff,0x3f,0xc0,0xff,0x01,0x00,0x00,
X 0x00,0x00,0x00,0xf0,0xff,0x80,0xff,0x03,0x00,0x00,0xff,0x3f,0xc0,0xff,0x80,
X 0xff,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0xfe,0xff,
X 0xff,0x0f,0x00,0xf8,0xff,0xff,0xff,0xff,0x7f,0xc0,0xff,0x1f,0x00,0xc0,0xff,
X 0x07,0xfc,0xff,0x01,0x00,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x0f,
X 0x00,0xc0,0xff,0x03,0x00,0x00,0xff,0x1f,0xc0,0xff,0x01,0x00,0x00,0x00,0x00,
X 0x00,0xf0,0xff,0xc0,0xff,0x03,0x00,0x00,0xff,0x1f,0xc0,0x7f,0x80,0xff,0xff,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0xfe,0xff,0xff,0x0f,
X 0x00,0xfc,0xff,0xff,0xff,0xff,0xff,0xc0,0xff,0x0f,0x00,0x80,0xff,0x07,0xfe,
X 0xff,0x00,0x00,0xfe,0x00,0xc0,0x0f,0x00,0x00,0x00,0x80,0xff,0x0f,0x00,0xc0,
X 0xff,0x01,0x00,0x80,0xff,0x1f,0xc0,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xf0,
X 0xff,0xc0,0xff,0x01,0x00,0x80,0xff,0x1f,0xc0,0x7f,0xc0,0xff,0xff,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0xfe,0xff,0xff,0x0f,0x00,0xfe,
X 0xff,0x03,0xff,0xff,0xff,0xc1,0xff,0x07,0x00,0x00,0xff,0x07,0xff,0x3f,0x00,
X 0x00,0xfe,0x00,0xe0,0xff,0x00,0x00,0x00,0x80,0xff,0x0f,0x00,0xc0,0xff,0x01,
X 0x00,0x80,0xff,0x0f,0xc0,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0xc0,
X 0xff,0x01,0x00,0x80,0xff,0x0f,0xc0,0x7f,0xc0,0xff,0x7f,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0xff,0x3f,0x00,0x00,0xfc,0xff,0xff,0x0f,0x00,0xfe,0xff,0x01,
X 0xfe,0xff,0xff,0xc1,0xff,0x03,0x00,0x00,0xff,0x8f,0xff,0x3f,0x00,0x00,0xfe,
X 0x00,0xf0,0xff,0x01,0x00,0x00,0x80,0xff,0x0f,0x00,0xc0,0xff,0x01,0x00,0xc0,
X 0xff,0x0f,0xc0,0xff,0x03,0x00,0xe0,0x0f,0x00,0x00,0xe0,0xff,0xc1,0xff,0x01,
X 0x00,0xc0,0xff,0x0f,0xc0,0x7f,0xc0,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0xff,0x3f,0x00,0x00,0xf8,0xff,0xff,0x0f,0x00,0xff,0x7f,0x00,0xe0,0xff,
X 0xff,0x81,0xff,0x00,0x00,0x00,0xfe,0xff,0xff,0x1f,0x00,0x00,0xfe,0x00,0xf0,
X 0xff,0x01,0x00,0x00,0x80,0xff,0x0f,0x00,0xc0,0xff,0x00,0x00,0xc0,0xff,0x07,
X 0xc0,0xff,0x03,0x00,0xf0,0x1f,0x00,0x00,0xe0,0xff,0xc1,0xff,0x00,0x00,0xc0,
X 0xff,0x07,0xc0,0x7f,0xc0,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,
X 0x3f,0x00,0x00,0xf0,0xff,0xff,0x0f,0x00,0xff,0x3f,0x00,0xc0,0xff,0xff,0x01,
X 0x3f,0x00,0x00,0x00,0xfe,0xff,0xff,0x1f,0x00,0x00,0xfe,0x00,0xf8,0xff,0x01,
X 0x00,0x00,0xc0,0xff,0x0f,0x00,0xe0,0xff,0x00,0x00,0xf0,0xff,0x03,0x80,0xff,
X 0x03,0x00,0xf8,0x1f,0x00,0x00,0xc0,0xff,0xe1,0xff,0x00,0x00,0xf0,0xff,0x03,
X 0xc0,0x7f,0xc0,0xff,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x3f,0x00,
X 0x00,0xe0,0xff,0xff,0x1f,0x00,0xff,0x1f,0x00,0x00,0xe0,0xff,0x03,0x00,0x00,
X 0x00,0x00,0xfe,0xff,0xff,0x07,0x00,0x00,0xfe,0x00,0xfc,0xff,0x01,0x00,0x00,
X 0xc0,0xff,0x0f,0x00,0xe0,0x7f,0x00,0x00,0xfc,0xff,0x01,0x00,0xff,0x07,0x00,
X 0xfc,0x3f,0x00,0x00,0xc0,0xff,0xe1,0x7f,0x00,0x00,0xfc,0xff,0x01,0xc0,0x7f,
X 0xc0,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x1f,0x00,0x00,0x00,
X 0xf0,0xff,0x3f,0x80,0xff,0x0f,0x00,0x00,0x80,0xff,0x03,0x00,0x00,0x00,0x00,
X 0xfe,0xff,0xff,0x01,0x00,0x00,0xfe,0x00,0xfe,0xff,0x00,0x00,0x00,0xc0,0xff,
X 0x0f,0x00,0xe0,0x7f,0x00,0x00,0xff,0xff,0x00,0x00,0xfe,0x07,0x00,0xfc,0x3f,
X 0x00,0x00,0xc0,0xff,0xe1,0x7f,0x00,0x00,0xff,0xff,0x00,0xc0,0x7f,0xc0,0xff,
X 0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x1f,0x00,0x00,0x00,0xf0,0xff,
X 0x3f,0x80,0xff,0x0f,0x00,0x00,0x00,0xff,0x07,0x00,0x00,0x00,0x00,0xfe,0xff,
X 0xff,0x01,0x00,0x00,0xfe,0x00,0xfe,0x7f,0x00,0x00,0x00,0xc0,0xff,0x07,0x00,
X 0xe0,0x7f,0x00,0xc0,0xff,0x7f,0x00,0x00,0xfe,0x07,0x00,0xfc,0x7f,0x00,0x00,
X 0xc0,0xff,0xe1,0x7f,0x00,0xc0,0xff,0x7f,0x00,0xc0,0x7f,0xc0,0xff,0x01,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x1f,0x00,0x00,0x00,0x00,0xff,0x7f,0x80,
X 0xff,0x07,0x00,0x00,0x00,0xff,0x07,0x00,0x00,0x00,0x00,0xfe,0xff,0xff,0x00,
X 0x00,0x00,0xfe,0x00,0xff,0x3f,0x00,0x00,0x00,0xe0,0xff,0x07,0x00,0xe0,0x3f,
X 0x80,0xf7,0xff,0x1f,0x00,0x00,0xfe,0x07,0x00,0xfc,0x7f,0x00,0x00,0xc0,0xff,
X 0xe1,0x3f,0x80,0xf7,0xff,0x1f,0x00,0xc0,0xff,0x80,0x7f,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0xc0,0xff,0x0f,0x00,0x00,0x00,0x00,0xfe,0x7f,0x80,0xff,0x03,
X 0x00,0x00,0x00,0xff,0x07,0x00,0x00,0x00,0x00,0xfe,0xff,0x3f,0x00,0x00,0x00,
X 0xfe,0x80,0xff,0x1f,0x00,0x00,0x00,0xe0,0xff,0x07,0x00,0xe0,0x3f,0xc0,0xff,
X 0xff,0x0f,0x00,0x00,0xfe,0x07,0x00,0xfc,0x7f,0x00,0x00,0xc0,0xff,0xe1,0x3f,
X 0xc0,0xff,0xff,0x0f,0x00,0xc0,0xff,0x00,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0xc0,0xff,0x0f,0x00,0x00,0x00,0x00,0xfe,0xff,0xc0,0xff,0x01,0x00,0x00,
X 0x00,0xfe,0x07,0x00,0x00,0x00,0x00,0xfe,0xff,0x3f,0x00,0x00,0x00,0xfe,0x80,
X 0xff,0x0f,0x00,0x00,0x00,0xf0,0xff,0x07,0x00,0xe0,0x3f,0xe0,0xff,0xff,0x07,
X 0x00,0x00,0xfe,0x07,0x00,0xfc,0xff,0x00,0x00,0xc0,0xff,0xe0,0x3f,0xe0,0xff,
X 0xff,0x07,0x00,0xc0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,
X 0xff,0x0f,0x00,0x00,0x00,0x00,0xfc,0xff,0xc0,0xff,0x01,0x00,0x00,0x00,0xfe,
X 0x07,0x00,0x00,0x00,0x00,0xfe,0xff,0x1f,0x00,0x00,0x00,0xfe,0xc0,0xff,0x07,
X 0x00,0x00,0x00,0xf0,0xff,0x03,0x00,0xe0,0x3f,0xf0,0xff,0xff,0x03,0x00,0x00,
X 0xfe,0x0f,0x00,0xfc,0xff,0x01,0x00,0xc0,0xff,0xe0,0x3f,0xf0,0xff,0xff,0x03,
X 0x00,0x80,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0x07,
X 0x00,0x00,0x00,0x00,0xfc,0xff,0xc0,0xff,0x00,0x00,0x00,0x00,0xfe,0x07,0x00,
X 0x00,0x00,0x00,0xfe,0xff,0x0f,0x00,0x00,0x00,0xfe,0xc0,0xff,0x03,0x00,0x00,
X 0x00,0xf8,0xff,0x03,0x00,0xe0,0x7f,0xf0,0xff,0xff,0x00,0x00,0x00,0xfc,0x0f,
X 0x00,0xfc,0xff,0x01,0x00,0xc0,0xff,0xe0,0x7f,0xf0,0xff,0xff,0x00,0x00,0x80,
X 0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0x07,0x00,0x00,
X 0x00,0x00,0xf8,0xff,0xc0,0xff,0x00,0x00,0x00,0x00,0xfe,0x07,0x00,0x00,0x00,
X 0x00,0xff,0xff,0x01,0x00,0x00,0x00,0xfe,0xe0,0xff,0x01,0x00,0x00,0x00,0xf8,
X 0xff,0x03,0x00,0xe0,0x7f,0xf0,0xff,0x7f,0x00,0x00,0x0f,0xfc,0x0f,0x00,0xfc,
X 0xff,0x01,0x00,0xe0,0xff,0xe0,0x7f,0xf0,0xff,0x7f,0x00,0x00,0x8f,0xff,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0x03,0x00,0x00,0x00,0x00,
X 0xf8,0xff,0xc1,0xff,0x00,0x00,0x00,0x00,0xfe,0x07,0x00,0x00,0x00,0x80,0xff,
X 0xff,0x00,0x00,0x00,0x00,0xfe,0xe0,0xff,0x01,0x00,0x00,0x00,0xfc,0xff,0x01,
X 0x00,0xe0,0x7f,0xf0,0xff,0x3f,0x00,0x80,0x1f,0xfc,0x0f,0x00,0xf8,0xff,0x03,
X 0x00,0xe0,0x7f,0xe0,0x7f,0xf0,0xff,0x3f,0x00,0x80,0x9f,0xff,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0x03,0x00,0x00,0x00,0x00,0xf8,0xff,
X 0xc1,0xff,0x00,0x00,0x00,0x00,0xfe,0x07,0x00,0x00,0x00,0xc0,0xff,0xff,0x00,
X 0x00,0x00,0x00,0xfe,0xe0,0xff,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0xe0,
X 0x7f,0xe0,0xff,0x0f,0x00,0xc0,0x1f,0xfc,0x0f,0x00,0xf8,0xff,0x03,0x00,0xe0,
X 0x7f,0xe0,0x7f,0xe0,0xff,0x0f,0x00,0xc0,0x9f,0xff,0x01,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0xf8,0xff,0x03,0x00,0x00,0x00,0x00,0xf0,0xff,0xc1,0xff,
X 0x00,0x00,0x00,0x00,0xfe,0x07,0x00,0x00,0x00,0xe0,0xff,0x7f,0x00,0x00,0x00,
X 0x00,0xfe,0xe0,0xff,0x00,0x00,0x00,0x00,0xfe,0xff,0x01,0x00,0xe0,0x7f,0xe0,
X 0xff,0x07,0x00,0xe0,0x3f,0xfc,0x0f,0x00,0xf0,0xff,0x07,0x00,0xe0,0x7f,0xe0,
X 0x7f,0xe0,0xff,0x07,0x00,0xe0,0xbf,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0xf8,0xff,0x01,0x00,0x00,0x00,0x00,0xe0,0xff,0xc3,0xff,0x00,0x00,
X 0x00,0x00,0xfe,0x07,0x00,0x00,0x00,0xf8,0xff,0x3f,0x00,0x00,0x00,0x00,0xfe,
X 0xe0,0x7f,0x00,0x00,0x00,0x00,0xfe,0xff,0x00,0x00,0xe0,0x7f,0xc0,0xff,0x03,
X 0x00,0xe0,0x3f,0xfc,0x0f,0x00,0xf0,0xff,0x07,0x00,0xf0,0x7f,0xe0,0x7f,0xc0,
X 0xff,0x03,0x00,0xe0,0xbf,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0xf8,0xff,0x01,0x00,0x00,0x00,0x00,0xe0,0xff,0xc3,0xff,0x01,0x00,0x00,0x00,
X 0xfe,0x07,0x00,0x00,0x00,0xfc,0xff,0x3f,0x00,0x00,0x00,0x00,0xfe,0xe0,0x7f,
X 0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xc0,0xff,0x80,0x7f,0x00,0x00,0xf0,
X 0x3f,0xfc,0x0f,0x00,0xe0,0xff,0x0f,0x00,0xf0,0x3f,0xc0,0xff,0x80,0x7f,0x00,
X 0x00,0xf0,0xbf,0xff,0x01,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,
X 0x01,0x00,0x00,0x00,0x00,0xc0,0xff,0xc3,0xff,0x01,0x00,0x00,0x00,0xfe,0x07,
X 0x00,0x00,0x00,0xfe,0xff,0x3f,0x00,0x00,0x00,0x00,0xfe,0xe0,0x7f,0x00,0x00,
X 0x00,0x80,0xff,0x7f,0x00,0x00,0xc0,0xff,0x00,0x0f,0x00,0x00,0xf8,0x3f,0xfc,
X 0x1f,0x00,0xc0,0xff,0x0f,0x00,0xf8,0x3f,0xc0,0xff,0x00,0x0f,0x00,0x00,0xf8,
X 0xbf,0xff,0x01,0x00,0xc0,0x0f,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x00,0x00,
X 0x00,0x00,0x00,0xc0,0xff,0xc7,0xff,0x01,0x00,0x00,0x00,0xfe,0x07,0x00,0x00,
X 0x00,0xff,0xff,0x3f,0x00,0x00,0x00,0x00,0xfe,0xe0,0x7f,0x00,0x00,0x00,0xc0,
X 0xff,0x3f,0x00,0x00,0xc0,0xff,0x00,0x00,0x00,0x00,0xfc,0x3f,0xfc,0x1f,0x00,
X 0xc0,0xff,0x1f,0x00,0xfc,0x3f,0xc0,0xff,0x00,0x00,0x00,0x00,0xfc,0xbf,0xff,
X 0x01,0x00,0xe0,0x1f,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x00,0x00,0x00,0x00,
X 0x00,0xc0,0xff,0x87,0xff,0x01,0x00,0x00,0x00,0xfe,0x07,0x00,0x00,0xe0,0xff,
X 0xff,0x3f,0x00,0x00,0xfe,0x00,0xfe,0xe0,0x7f,0x00,0x00,0x00,0xe0,0xff,0x1f,
X 0x00,0x00,0xc0,0xff,0x00,0x00,0x00,0x00,0xfc,0x1f,0xf8,0x1f,0x00,0x80,0xff,
X 0x1f,0x00,0xfe,0x1f,0xc0,0xff,0x00,0x00,0x00,0x00,0xfc,0x1f,0xff,0x03,0x00,
X 0xf0,0x1f,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xc0,
X 0xff,0x87,0xff,0x01,0x00,0x00,0x00,0xfe,0x07,0x00,0x00,0xe0,0xff,0xff,0x3f,
X 0x00,0xc0,0xff,0x07,0xfe,0xe0,0x7f,0x00,0x00,0x00,0xe0,0xff,0x1f,0x00,0x00,
X 0x80,0xff,0x01,0x00,0x00,0x00,0xfe,0x1f,0xf8,0x3f,0x00,0x80,0xff,0x1f,0x00,
X 0xfe,0x1f,0x80,0xff,0x01,0x00,0x00,0x00,0xfe,0x1f,0xff,0x03,0x00,0xf8,0x3f,
X 0x00,0x00,0x00,0x00,0x80,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x87,
X 0xff,0x03,0x00,0x00,0x00,0xfe,0x07,0x00,0x00,0xf0,0xff,0xff,0x3f,0x00,0xc0,
X 0xff,0x07,0xfe,0xc0,0xff,0x00,0x00,0x00,0xf0,0xff,0x0f,0x00,0x00,0x80,0xff,
X 0x01,0x00,0x00,0x00,0xff,0x1f,0xf8,0x3f,0x00,0x80,0xff,0x3f,0x00,0xff,0x0f,
X 0x80,0xff,0x01,0x00,0x00,0x00,0xff,0x1f,0xff,0x03,0x00,0xf8,0x3f,0x00,0x00,
X 0x00,0x00,0x80,0xff,0x7f,0xc0,0xff,0x01,0x00,0x00,0xc0,0xff,0x87,0xff,0x03,
X 0x00,0x00,0x00,0xfe,0x07,0x00,0x00,0xfe,0xff,0xff,0x3f,0x00,0xe0,0xff,0x0f,
X 0xfe,0xc0,0xff,0x00,0x00,0x00,0xf8,0xff,0x07,0x00,0x00,0x80,0xff,0x03,0x00,
X 0x00,0x80,0xff,0x1f,0xf8,0x3f,0x00,0x80,0xff,0x3f,0x00,0xff,0x0f,0x80,0xff,
X 0x03,0x00,0x00,0x80,0xff,0x1f,0xff,0x07,0x00,0xfc,0x3f,0x00,0x00,0x00,0x00,
X 0xc0,0xff,0x7f,0xf0,0xff,0x1f,0x00,0x00,0xe0,0xff,0x03,0xff,0x07,0x00,0x00,
X 0x00,0xff,0x07,0x00,0x00,0xff,0x1f,0xfc,0xff,0x00,0xf8,0xff,0x1f,0xfe,0xc0,
X 0xff,0x01,0x00,0x00,0xfc,0xff,0x07,0x00,0x00,0x80,0xff,0x03,0x00,0x00,0xc0,
X 0xff,0x0f,0xf8,0x7f,0x00,0x80,0xff,0x3f,0x80,0xff,0x07,0x80,0xff,0x03,0x00,
X 0x00,0xc0,0xff,0x0f,0xff,0x07,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0xc0,0xff,
X 0x3f,0xf0,0xff,0x3f,0x00,0x00,0xf0,0xff,0x03,0xff,0x07,0x00,0x00,0x00,0xff,
X 0x07,0x00,0x00,0xff,0x07,0xf8,0xff,0x00,0xf8,0xff,0x1f,0xfe,0xc0,0xff,0x01,
X 0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x80,0xff,0x07,0x00,0x00,0xe0,0xff,0x0f,
X 0xf8,0x7f,0x00,0x80,0xff,0x7f,0xc0,0xff,0x07,0x80,0xff,0x07,0x00,0x00,0xe0,
X 0xff,0x0f,0xfe,0x07,0x00,0xff,0x3f,0x00,0x00,0x00,0x00,0xc0,0xff,0x3f,0xf8,
X 0xff,0x7f,0x00,0x00,0xf8,0xff,0x01,0xff,0x0f,0x00,0x00,0xc0,0xff,0x03,0x00,
X 0xe0,0xff,0x01,0xf8,0xff,0x01,0xfe,0xff,0x1f,0xfe,0x80,0xff,0x03,0x00,0x80,
X 0xff,0xff,0x01,0x00,0x00,0x00,0xff,0x07,0x00,0x00,0xf0,0xff,0x07,0xf0,0x7f,
X 0x00,0x80,0xff,0x7f,0xe0,0xff,0x03,0x00,0xff,0x07,0x00,0x00,0xf0,0xff,0x07,
X 0xfe,0x0f,0x80,0xff,0x3f,0x00,0x00,0x00,0x00,0xc0,0xff,0x1f,0xf8,0xff,0xff,
X 0x00,0x00,0xff,0xff,0x01,0xfe,0x0f,0x00,0x00,0xe0,0xff,0x03,0x00,0xe0,0x1f,
X 0x00,0xf8,0xff,0x01,0xfe,0xff,0x1f,0xfe,0x80,0xff,0x0f,0x00,0xe0,0xff,0xff,
X 0x00,0x00,0x00,0x00,0xff,0x0f,0x00,0x00,0xf8,0xff,0x03,0xf0,0xff,0x00,0x80,
X 0xff,0x7f,0xf0,0xff,0x03,0x00,0xff,0x0f,0x00,0x00,0xf8,0xff,0x03,0xfe,0x3f,
X 0xc0,0xff,0x3f,0x00,0x00,0x00,0x00,0xc0,0xff,0x1f,0xf8,0xff,0xff,0x0f,0xf0,
X 0xff,0xff,0x00,0xfe,0x1f,0x00,0x00,0xf8,0xff,0x01,0x00,0xc0,0x07,0x00,0xf0,
X 0xff,0x07,0xfe,0xff,0x0f,0xfe,0x00,0xff,0xff,0x01,0xf8,0xff,0x7f,0x00,0x00,
X 0x00,0x00,0xfe,0x1f,0x00,0x00,0xff,0xff,0x01,0xf0,0xff,0x00,0xc0,0xbf,0xff,
X 0xfe,0xff,0x01,0x00,0xfe,0x1f,0x00,0x00,0xff,0xff,0x01,0xfc,0xff,0xff,0xff,
X 0x1f,0x00,0x00,0x00,0x00,0xc0,0xff,0x0f,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,
X 0x00,0xfe,0x3f,0x00,0xf0,0xff,0xff,0x01,0x00,0xe7,0x00,0x00,0xf0,0xff,0xff,
X 0xff,0xff,0x07,0xfe,0x00,0xff,0xff,0x8f,0xff,0xff,0x3f,0x00,0x00,0x00,0x00,
X 0xfe,0xff,0x01,0xc0,0xff,0xff,0x00,0xf0,0xff,0x03,0xe0,0xbf,0xff,0xff,0xff,
X 0x00,0x00,0xfe,0xff,0x01,0xc0,0xff,0xff,0x00,0xfc,0xff,0xff,0xff,0x1f,0x00,
X 0x00,0x00,0x00,0xc0,0xff,0x0f,0xf8,0xff,0xff,0xff,0xff,0xff,0x7f,0x00,0xfe,
X 0x7f,0x00,0xf8,0xff,0xff,0x01,0x00,0x07,0x00,0x00,0xf0,0xff,0xff,0xff,0xff,
X 0x07,0xfe,0x00,0xfe,0xff,0xff,0xff,0xff,0x1f,0x00,0x00,0x00,0x00,0xfc,0xff,
X 0xff,0xff,0xff,0xff,0x00,0xe0,0xff,0x0f,0xf0,0x9f,0xff,0xff,0x7f,0x00,0x00,
X 0xfc,0xff,0xff,0xff,0xff,0xff,0x00,0xfc,0xff,0xff,0xff,0x07,0x00,0x00,0x00,
X 0x00,0xc0,0xff,0x07,0xf0,0xff,0xff,0xff,0xff,0xff,0x3f,0x00,0xfc,0xff,0x01,
X 0xfe,0xff,0xff,0x00,0x00,0x18,0x00,0x00,0xf0,0xff,0xff,0xff,0xff,0x01,0xfe,
X 0x00,0xfc,0xff,0xff,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,0xf8,0xff,0xff,0xff,
X 0xff,0x7f,0x00,0xe0,0xff,0xff,0xff,0x9f,0xff,0xff,0x3f,0x00,0x00,0xf8,0xff,
X 0xff,0xff,0xff,0x7f,0x00,0xf8,0xff,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0xc0,
X 0xff,0x07,0xe0,0xff,0xff,0xff,0xff,0xff,0x1f,0x00,0xfc,0xff,0xff,0xff,0xff,
X 0x7f,0x00,0xd8,0x00,0x00,0x00,0xe0,0xff,0xff,0xff,0x3f,0x00,0xfe,0x00,0xfc,
X 0xff,0xff,0xff,0xff,0x07,0x00,0x00,0x00,0x00,0xf0,0xff,0xff,0xff,0xff,0x3f,
X 0x00,0xe0,0xff,0xff,0xff,0x9f,0xff,0xff,0x1f,0x00,0x00,0xf0,0xff,0xff,0xff,
X 0xff,0x3f,0x00,0xf8,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0x00,0xc0,0xff,0x03,
X 0x00,0xff,0xff,0xff,0xff,0xff,0x0f,0x00,0xf8,0xff,0xff,0xff,0xff,0x3f,0x00,
X 0xd8,0x00,0x00,0x00,0xc0,0xff,0xff,0xff,0x3f,0x00,0xfe,0x00,0xf8,0xff,0xff,
X 0xff,0xff,0x03,0x00,0x00,0x00,0x00,0xf0,0xff,0xff,0xff,0xff,0x1f,0x00,0xc0,
X 0xff,0xff,0xff,0x0f,0xff,0xff,0x0f,0x00,0x00,0xf0,0xff,0xff,0xff,0xff,0x1f,
X 0x00,0xf0,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x01,0x00,0xfe,
X 0xff,0xff,0xff,0xff,0x07,0x00,0xf0,0xff,0xff,0xff,0xff,0x1f,0x00,0x00,0x00,
X 0x00,0x00,0x80,0xff,0xff,0xff,0x1f,0x00,0xfe,0x00,0xf0,0xff,0xff,0xff,0xff,
X 0x01,0x00,0x00,0x00,0x00,0xe0,0xff,0xff,0xff,0xff,0x0f,0x00,0xc0,0xff,0xff,
X 0xff,0x07,0xff,0xff,0x07,0x00,0x00,0xe0,0xff,0xff,0xff,0xff,0x0f,0x00,0xe0,
X 0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x00,0x00,0xfc,0xff,0xff,
X 0xff,0xff,0x03,0x00,0xf0,0xff,0xff,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,
X 0x80,0xff,0xff,0xff,0x07,0x00,0xfe,0x00,0xe0,0xff,0xff,0xff,0x3f,0x00,0x00,
X 0x00,0x00,0x00,0xc0,0xff,0xff,0xff,0xff,0x07,0x00,0x80,0xff,0xff,0xff,0x03,
X 0xfe,0xff,0x01,0x00,0x00,0xc0,0xff,0xff,0xff,0xff,0x07,0x00,0xc0,0xff,0xff,
X 0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,0xe0,0xff,0xff,0xff,0xff,
X 0x00,0x00,0xc0,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,
X 0xff,0xff,0x01,0x00,0xfe,0x00,0x80,0xff,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,
X 0x00,0x80,0xff,0xff,0xff,0xff,0x01,0x00,0x00,0xff,0xff,0xff,0x03,0xfc,0x7f,
X 0x00,0x00,0x00,0x80,0xff,0xff,0xff,0xff,0x01,0x00,0x80,0xff,0xff,0x07,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x7e,0x00,0x00,0x80,0xff,0xff,0xff,0x3f,0x00,0x00,
X 0x00,0xff,0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0x1f,
X 0x00,0x00,0xfe,0x00,0x00,0xff,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,
X 0xff,0xff,0xff,0x7f,0x00,0x00,0x00,0xfe,0xff,0xff,0x01,0xf8,0x1f,0x00,0x00,
X 0x00,0x00,0xff,0xff,0xff,0x7f,0x00,0x00,0x00,0xf8,0xff,0x01,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0xff,0xff,0xff,0x0f,0x00,0x00,0x00,0xfe,
X 0xff,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x07,0x00,0x00,
X 0xfe,0x00,0x00,0xfc,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,
X 0xff,0x1f,0x00,0x00,0x00,0xfc,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0xfc,0xff,0xff,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x7f,0x00,0x00,0x00,0x00,0xf8,0xff,0xff,
X 0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x00,
X 0x00,0xc0,0xff,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0xff,0x03,
X 0x00,0x00,0x00,0xf0,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,
X 0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
X 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe};
END_OF_FILE
if test 32312 -ne `wc -c <'bitmaps/biglogo.xbm'`; then
    echo shar: \"'bitmaps/biglogo.xbm'\" unpacked with wrong size!
fi
# end of 'bitmaps/biglogo.xbm'
fi
if test -f 'xw.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'xw.c'\"
else
echo shar: Extracting \"'xw.c'\" \(9901 characters\)
sed "s/^X//" >'xw.c' <<'END_OF_FILE'
X/*
X**
X**	X11 Jewel By David Cooper and Jose Guterman 05/92
X**
X*/
X
X#ifdef VMS
X#include <decw$include/Xlib.h>
X#include <decw$include/Xutil.h>
X#include <decw$include/Xos.h>
X#else
X#include <X11/Xlib.h>
X#include <X11/Xutil.h>
X#include <X11/Xos.h>
X#endif
X
X#ifndef VMS
X#   include <sys/param.h>
X#endif
X#ifndef HZ
X#	define HZ 60
X#endif
X
X#include <stdlib.h>
X#include <stdio.h>
X#ifndef SYSV
X#include <string.h>
X#else
X#include <strings.h>
X#endif
X#include <errno.h>
X
X#include "general.h"
X#include "xw.h"
X
X/* include bitmaps */
X
X#include "bitmaps/icon.xbm"
X#include "bitmaps/smicon.xbm"
X
X/* important stuff */
X
XWindow iw_window;
Xint iw_width=60;
Xint iw_height=60;
X
XDisplay *xw_display;
Xint     xw_screen;
XWindow  xw_window;
XGC      xw_gc;
Xint     xw_main;
Xint     xw_screen_width;
Xint     xw_screen_height;
Xint     xw_fg;
Xint     xw_bg;
X
X/* local routines */
X
Xvoid xw_fatal(s,line,file)
Xchar *s;
Xint line;
Xchar *file;
X	{
X	fprintf(stderr,"FATAL ERROR:%s\nIn:%s, Line:%d\n",s,file,line);
X	exit(1);
X	}
X
X
X/********************************************************/
X
XPixel xw_alloc_color(cname)
Xchar *cname;
X	{
X	XColor dev_color, act_color;
X	int res;
X
X	/* a little BW addition from rjc@cogsci.edinburgh.ac.uk */
X	if (DefaultDepth(xw_display, xw_screen)==1)
X		{
X		if (!strcmp(cname,"grey"))
X			return BlackPixel(xw_display, xw_screen);
X		if (!strcmp(cname,"black"))
X			return BlackPixel(xw_display, xw_screen);
X
X		return WhitePixel(xw_display, xw_screen);
X		}
X
X	res = XAllocNamedColor(xw_display,
X			DefaultColormap(xw_display, xw_screen),
X			cname, &dev_color, &act_color);
X	if (!res)
X		{
X		char blah[128];
X		sprintf(blah,"Unable to allocate color:%s.",cname);
X		xw_fatal(blah,__LINE__,__FILE__);
X		}
X	return (dev_color.pixel);
X	}
X
X
X/********************************************************/
X
Xvoid xw_sync_sleep(ms)
Xunsigned long ms;
X	{
X	struct timeval st, et;
X	long SyncTime;
X
X	/*printf("sync ms:%ld\n",ms);*/
X	
X	gettimeofday(&st,NULL);
X	XSync(xw_display, False);
X	gettimeofday(&et,NULL);
X	/*printf("et-st.sec:%ld,usec:%ld\n",et.tv_sec-st.tv_sec,
X		et.tv_usec-st.tv_usec);*/
X	SyncTime=( ((et.tv_sec-st.tv_sec)*1000) +
X		((et.tv_usec-st.tv_usec)/1000) );
X	if ((ms) > ((1000/HZ)+SyncTime))
X		{
X		ms_sleep(ms-SyncTime);
X		}
X	/* printf("slept (ms-Synctime):%ld (ms):%ld\n", (long)(ms-SyncTime), ms);
X	gettimeofday(&et,NULL);
X	printf("#2:et-st.sec:%ld,usec:%ld\n",et.tv_sec-st.tv_sec,
X		et.tv_usec-st.tv_usec);*/
X	}
X
X
XBOOL timer_set=FALSE;
XBOOL timer_reset=FALSE;
Xunsigned long timer_ms;
Xstruct timeval timer;
Xstruct timeval curtime;
X
Xvoid xw_set_timer(time_ms)
Xunsigned long time_ms;
X	{
X	timer_set=FALSE;
X	timer_reset=TRUE;
X	timer_ms=time_ms;
X	if (time_ms <= (1000/HZ)) /* HZ should be in param.h */
X		{
X		timer_ms=(1000/HZ);
X		}
X	}
X
X
X/********************************************************/
X
Xvoid xw_main_loop()
X	{
X	XEvent xev;
X#ifndef VMS
X#   ifdef USE_SELECT
X	size_t nfds=(XConnectionNumber(xw_display) + 1);
X	fd_set readfds, writefds, exceptfds;
X	struct timeval timeout_BSD;
X
X	FD_SET(XConnectionNumber(xw_display),&readfds);
X	FD_SET(XConnectionNumber(xw_display),&exceptfds);
X#   else
X	struct pollfd fds[1];
X
X	fds[0].fd=XConnectionNumber(xw_display);
X	fds[0].events=(POLLIN|POLLPRI);
X#   endif
X#endif
X
X	xw_main = 1;
X	while (xw_main)
X		{
X		int ret, timeout, pending;
X		if (timer_set)
X			{
X			gettimeofday(&curtime,NULL);
X			timeout=( ((timer.tv_sec - curtime.tv_sec) * 1000) + 
X						((timer.tv_usec - curtime.tv_usec) / 1000) );
X			if (timeout <= (1000/HZ)) /* HZ should be in param.h */
X				{
X				xw_timeout();
X				continue;
X				}
X			}
X		else
X			{ timeout=(-1); }
X		if (timer_reset)
X			{
X			gettimeofday(&curtime,NULL);
X			timer.tv_sec= curtime.tv_sec+(timer_ms/1000);
X			timer.tv_usec=curtime.tv_usec+((timer_ms%1000)*1000);
X			if (timer.tv_usec > 1000000)
X				{
X				timer.tv_usec -= 1000000;
X				timer.tv_sec += 1;
X				}
X			timer_set=TRUE;
X			timer_reset=FALSE;
X			timeout=timer_ms;
X			}
X			
X	/* ret = 0 -> timeout						    */
X	/* ret < 0 -> error						    */
X	/* ret > 0 -> event						    */
X#if defined(VMS)
X	ret=0;
X	while ( (timeout > 0) && (ret == 0) )
X		{
X		gettimeofday(&curtime,NULL);
X		timeout=( ((timer.tv_sec - curtime.tv_sec) * 1000) +
X			((timer.tv_usec - curtime.tv_usec) / 1000) );
X		ret=XPending(xw_display);
X		}
X	if (timeout <= (1000/HZ)) /* HZ should be in param.h */
X		{
X		ret=0;
X		}
X#else
X#if defined(USE_SELECT)
X		if (timeout > 0)
X			{
X			timeout_BSD.tv_usec=(timeout%1000)*1000;
X			timeout_BSD.tv_sec=(timeout/1000);
X			ret = select(nfds,&readfds,NULL,&exceptfds,&timeout_BSD);
X			}
X		else
X			{ ret = select(nfds,&readfds,NULL,&exceptfds,NULL); }
X		FD_SET(XConnectionNumber(xw_display),&readfds);
X		FD_SET(XConnectionNumber(xw_display),&exceptfds);
X#else
X		while( ( (ret=poll(fds, 1L, timeout)) < 0) &&
X				((errno==EINTR) || (errno=EAGAIN)) )
X#endif
X#endif
X		
X		if (ret < 0)
X			{
X			perror("xw poll");
X			/*xw_fatal("CANNOT POLL.",__LINE__,__FILE__);*/
X			}
X		if (ret==0)
X			{
X			timer_set=FALSE;
X			xw_timeout();
X			}
X		pending=XPending(xw_display);
X/*		printf("PENDING:%d\n",pending);*/
X		for (;pending > 0;pending--)
X			{
X			XNextEvent(xw_display, &xev);
X			switch (xev.type)
X				{
X				case Expose:
X					xw_expose_event((XExposeEvent *) &xev);
X					break;
X				case FocusIn:
X				case FocusOut:
X					xw_focus_event((XFocusChangeEvent *) &xev);
X					break;
X				case LeaveNotify:
X					xw_leave_event((XLeaveWindowEvent *) &xev);
X				case KeyRelease:
X				case KeyPress:
X					xw_key_event((XKeyEvent *) &xev);
X					break;
X				case ButtonRelease:
X				case ButtonPress:
X					xw_but_event((XButtonEvent *) &xev);
X					break;
X				case UnmapNotify:
X				case MapNotify:
X					xw_map_event((XMapEvent *) &xev);
X					break;
X				case ConfigureNotify:
X					{
X					XConfigureEvent *xcev=(XConfigureEvent *)&xev;
X					/*printf("config:w:%d,h:%d\n", xcev->width, xcev->height);*/
X					if (xcev->window == iw_window)
X						{
X						iw_width=xcev->width;
X						iw_height=xcev->height;
X						}
X					}
X					break;
X				}
X			}
X		}
X	}
X
X
X/********************************************************/
X
Xvoid xw_exit_main()
X	{
X	xw_main = 0;
X	}
X
X
X/********************************************************/
XPixmap Icon;
XPixmap SmIcon;
X
X#ifdef DECWM
X#ifdef VMS
X#include <decw$include/decwmhints.h>
X#else
X#include <X11/DECWmHints.h>
X#endif
X
XBOOL decwm_init()
X	{
X	/* setup for dec window manager */
X	DECWmHintsRec dwmhints;
X	Atom wmatom;
X
X	/* if decwm hints atom exists -> wm is running */
X	wmatom=XInternAtom(xw_display, "DEC_WM_HINTS", True);
X
X	if (wmatom != None)
X		{
X		dwmhints.value_mask=DECWmIconifyPixmapMask;
X		dwmhints.iconify_pixmap=SmIcon;
X		XChangeProperty(xw_display, xw_window, wmatom, wmatom, 32,
X			PropModeReplace, &dwmhints, sizeof(dwmhints)/4);
X		return(TRUE);
X		}
X	else
X		{ return(FALSE); }
X	}
X#endif
X
X#ifndef MAX
X#define MAX(a,b) ((a>b)?a:b)
X#endif
X
Xvoid xw_init(argc, argv, w, h )
Xint  argc;
Xchar **argv;
Xint  w, h;
X	{
X	XIconSize *icon_sizes;
X	int size_count;
X	BOOL big_icon=FALSE;
X	XSizeHints hints;
X	XWMHints wmhints;
X	XGCValues gcv;
X	unsigned long gcvm;
X	char *Disp=NULL;
X	char *AppName;
X	int i;
X
X	/* look for display in args */
X	for (i=1;i<(argc-1);i++)
X		{
X		int len;
X		char *dispstr="-display";
X		len=MAX(strlen(dispstr),strlen(argv[i]));
X		if (len<4) { continue; }
X		if (strncmp(argv[i],dispstr,len)==0)
X			{
X			Disp=argv[i+1];
X			break;
X			}
X		}
X
X	xw_display = XOpenDisplay(Disp);
X	if (!xw_display)
X		{
X		printf("Unable to connect to display:%s, exiting.\n",Disp);
X		exit(-1);
X		}
X
X	if (XGetIconSizes(xw_display, RootWindow(xw_display,xw_screen),
X			&icon_sizes, &size_count))
X		{
X		big_icon=FALSE;
X		for (;size_count>0; size_count--)
X			{
X			if (icon_sizes->max_width >= icon_width)
X			    { big_icon=TRUE; }
X			/*    
X			printf("minw:%d,minh:%d,maxw:%d,maxh:%d,winc:%d,hinc:%d\n",
X			    icon_sizes->min_width, icon_sizes->min_height,
X			    icon_sizes->max_width, icon_sizes->max_height,
X			    icon_sizes->width_inc, icon_sizes->height_inc);
X			*/
X			icon_sizes++;
X			}
X		}
X	else
X		{ big_icon=TRUE; }
X
X	/* look for appname in args */
X#ifdef VMS
X	AppName=strrchr(argv[0],']');
X#else
X	AppName=strrchr(argv[0],'/');
X#endif
X	if (!AppName)
X		{ AppName=argv[0]; }
X	else
X		{ AppName++; /* skip trailing seperator */}
X	*AppName=toupper(*AppName);
X
X	/* lets get to it */
X	xw_screen_width = w;
X	xw_screen_height = h;
X	hints.width = xw_screen_width;
X	hints.height = xw_screen_height;
X	hints.flags = PSize;
X
X	xw_screen = DefaultScreen(xw_display);
X	xw_fg = WhitePixel(xw_display,xw_screen);
X	xw_bg = BlackPixel(xw_display,xw_screen);
X	gcv.graphics_exposures = False;
X	gcv.foreground = xw_fg;
X	gcv.background = xw_bg;
X/*	gcv.font = XLoadFont(xw_display, "8x13");*/
X	gcvm = (GCGraphicsExposures | GCForeground | GCBackground /*| GCFont*/);
X
X	xw_window = XCreateSimpleWindow(xw_display,
X			RootWindow(xw_display, xw_screen), 0, 0, hints.width,
X			hints.height, 2, xw_fg, xw_bg);
X
X	XSetStandardProperties(xw_display, xw_window, AppName, AppName,
X			None, argv, argc, &hints);
X
X	Icon=XCreateBitmapFromData(xw_display, xw_window, icon_bits, 
X		icon_width, icon_height);
X	SmIcon=XCreateBitmapFromData(xw_display, xw_window, smicon_bits, 
X		smicon_width, smicon_height);
X	if (big_icon)
X		{ wmhints.icon_pixmap=Icon; }
X	else
X		{ wmhints.icon_pixmap=SmIcon; }
X	wmhints.flags=IconPixmapHint;
X
X#ifdef ICON_WINDOW
X	wmhints.flags|=IconWindowHint;
X	iw_window=
X	wmhints.icon_window=XCreateSimpleWindow(xw_display,
X			RootWindow(xw_display, xw_screen), 0, 0, iw_width,
X			iw_height, 2, xw_fg, xw_bg);
X	XSelectInput(xw_display, iw_window, StructureNotifyMask | ExposureMask);
X#endif
X
X	wmhints.flags|=InputHint;
X	wmhints.input=True;
X
X#ifdef DECWM
X	if (!decwm_init())
X#endif
X		{ XSetWMHints(xw_display, xw_window, &wmhints); }
X
X	XSelectInput(xw_display, xw_window,
X			 ExposureMask | KeyPressMask | ButtonPressMask |
X			 LeaveWindowMask | FocusChangeMask |
X			 StructureNotifyMask );
X
X	xw_gc = XCreateGC(xw_display, xw_window, gcvm, &gcv);
X
X	}
X
X
X
Xvoid xw_start()
X	{
X	XMapWindow(xw_display, xw_window);
X	XFlush(xw_display);
X	}
X
END_OF_FILE
if test 9901 -ne `wc -c <'xw.c'`; then
    echo shar: \"'xw.c'\" unpacked with wrong size!
fi
# end of 'xw.c'
fi
echo shar: End of archive 1 \(of 5\).
cp /dev/null ark1isdone
MISSING=""
for I in 1 2 3 4 5 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 5 archives.
    rm -f ark[1-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
