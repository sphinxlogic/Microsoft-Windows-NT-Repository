Path: uunet!zephyr.ens.tek.com!master!saab!billr
From: billr@saab.CNA.TEK.COM (Bill Randle)
Newsgroups: comp.sources.games
Subject: v13i014:  xsokoban2 - another X11 based, get the money game, Part02/03
Message-ID: <2267@masterCNA.TEK.COM>
Date: 10 Jan 92 00:32:24 GMT
Sender: news@masterCNA.TEK.COM
Lines: 1699
Approved: billr@saab.CNA.TEK.COM

Submitted-by: "Joseph L. Traub" <jt1o+@andrew.cmu.edu>
Posting-number: Volume 13, Issue 14
Archive-name: xsokoban2/Part02
Environment: x11, xlib


#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 2 (of 3)."
# Contents:  Makefile bitmaps/centerwall.xbm bitmaps/east_twall.xbm
#   bitmaps/eastwall.xbm bitmaps/floor.xbm bitmaps/goal.xbm
#   bitmaps/horizwall.xbm bitmaps/llcornerwall.xbm
#   bitmaps/lonewall.xbm bitmaps/lrcornerwall.xbm bitmaps/man.xbm
#   bitmaps/north_twall.xbm bitmaps/northwall.xbm bitmaps/object.xbm
#   bitmaps/saveman.xbm bitmaps/south_twall.xbm bitmaps/southwall.xbm
#   bitmaps/treasure.xbm bitmaps/ulcornerwall.xbm
#   bitmaps/urcornerwall.xbm bitmaps/vertiwall.xbm bitmaps/wall.xbm
#   bitmaps/west_twall.xbm bitmaps/westwall.xbm makefile readscreen.c
#   save.c screens/screen.14 screens/screen.20 screens/screen.22
#   screens/screen.24 screens/screen.25 screens/screen.28
#   screens/screen.30 screens/screen.35 screens/screen.36
#   screens/screen.37 screens/screen.39 screens/screen.41
#   screens/screen.44 screens/screen.50 showscreen.c sokoban.h
# Wrapped by billr@saab on Thu Jan  9 16:24:57 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Makefile'\"
else
echo shar: Extracting \"'Makefile'\" \(959 characters\)
sed "s/^X//" >'Makefile' <<'END_OF_FILE'
X# Uncomment the first one of this pair only if you are building under an AFS
X# environment, and then only if you know exactly what this does.
X#CFLAGS = -O -DVICE -I/usr/local/include -I/usr/local/include/res
XCFLAGS = -g -I/home/include
X
X# Uncomment the first one of this pair only if you are building under an AFS
X# environment, and then only if you know exactly what this does.
X#LIBS = -L/usr/local/lib -lX11 $(AUTHLIBS) -L/usr/local/lib/res -lresolv
XLIBS = -L/home/lib  -lX11 
X
XCC = cc
X
XOBJECTS = sok.o readscreen.o xdisp.o play.o save.o score.o
X
XDEST = /afs/andrew.cmu.edu/usr5/jt1o/bin
X
Xxsokoban: $(OBJECTS)
X	$(CC) $(CFLAGS) -o xsokoban $(OBJECTS) $(LIBS)
X
Xinstall: xsokoban
X	install -s xsokoban $(DEST)/xsokoban
X
Xclean :
X	rm xsokoban $(OBJECTS)
X
Xsok.o: sok.c sokoban.h
Xreadscreen.o: readscreen.c sokoban.h
Xshowscreen.o: showscreen.c sokoban.h
Xplay.o: play.c sokoban.h
Xsave.o: save.c sokoban.h
Xscore.o: score.c sokoban.h
Xxdisp.o: xdisp.c sokoban.h help.h
END_OF_FILE
if test 959 -ne `wc -c <'Makefile'`; then
    echo shar: \"'Makefile'\" unpacked with wrong size!
fi
# end of 'Makefile'
fi
if test -f 'bitmaps/centerwall.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/centerwall.xbm'\"
else
echo shar: Extracting \"'bitmaps/centerwall.xbm'\" \(842 characters\)
sed "s/^X//" >'bitmaps/centerwall.xbm' <<'END_OF_FILE'
X#define centerwall_width 30
X#define centerwall_height 30
Xstatic char centerwall_bits[] = {
X   0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a, 0xbb, 0xff, 0x7f, 0x35,
X   0xb7, 0xff, 0x7f, 0x3a, 0xaf, 0xff, 0x7f, 0x3d, 0x9f, 0xff, 0x7f, 0x3e,
X   0x80, 0xff, 0x7f, 0x00, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0x80, 0xff, 0x7f, 0x00,
X   0x95, 0xff, 0x7f, 0x15, 0xaa, 0xff, 0x7f, 0x28, 0xb5, 0xff, 0x7f, 0x11,
X   0xba, 0xff, 0x7f, 0x22, 0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a};
END_OF_FILE
if test 842 -ne `wc -c <'bitmaps/centerwall.xbm'`; then
    echo shar: \"'bitmaps/centerwall.xbm'\" unpacked with wrong size!
fi
# end of 'bitmaps/centerwall.xbm'
fi
if test -f 'bitmaps/east_twall.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/east_twall.xbm'\"
else
echo shar: Extracting \"'bitmaps/east_twall.xbm'\" \(842 characters\)
sed "s/^X//" >'bitmaps/east_twall.xbm' <<'END_OF_FILE'
X#define east_twall_width 30
X#define east_twall_height 30
Xstatic char east_twall_bits[] = {
X   0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a, 0xbb, 0xff, 0x7f, 0x05,
X   0xb7, 0xff, 0x7f, 0x0a, 0xaf, 0xff, 0x7f, 0x05, 0x9f, 0xff, 0x7f, 0x0a,
X   0x80, 0xff, 0x7f, 0x05, 0xff, 0xff, 0x7f, 0x0a, 0xff, 0xff, 0x7f, 0x05,
X   0xff, 0xff, 0x7f, 0x0a, 0xff, 0xff, 0x7f, 0x05, 0xff, 0xff, 0x7f, 0x0a,
X   0xff, 0xff, 0x7f, 0x05, 0xff, 0xff, 0x7f, 0x0a, 0xff, 0xff, 0x7f, 0x05,
X   0xff, 0xff, 0x7f, 0x0a, 0xff, 0xff, 0x7f, 0x05, 0xff, 0xff, 0x7f, 0x0a,
X   0xff, 0xff, 0x7f, 0x05, 0xff, 0xff, 0x7f, 0x0a, 0xff, 0xff, 0x7f, 0x05,
X   0xff, 0xff, 0x7f, 0x0a, 0xff, 0xff, 0x7f, 0x05, 0x80, 0xff, 0x7f, 0x0a,
X   0x95, 0xff, 0x7f, 0x05, 0xaa, 0xff, 0x7f, 0x0a, 0xb5, 0xff, 0x7f, 0x05,
X   0xba, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a};
END_OF_FILE
if test 842 -ne `wc -c <'bitmaps/east_twall.xbm'`; then
    echo shar: \"'bitmaps/east_twall.xbm'\" unpacked with wrong size!
fi
# end of 'bitmaps/east_twall.xbm'
fi
if test -f 'bitmaps/eastwall.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/eastwall.xbm'\"
else
echo shar: Extracting \"'bitmaps/eastwall.xbm'\" \(836 characters\)
sed "s/^X//" >'bitmaps/eastwall.xbm' <<'END_OF_FILE'
X#define eastwall_width 30
X#define eastwall_height 30
Xstatic char eastwall_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x07,
X   0xff, 0xff, 0xff, 0x0b, 0xff, 0xff, 0xff, 0x05, 0xff, 0xff, 0xff, 0x0a,
X   0x00, 0x00, 0x00, 0x05, 0xff, 0xff, 0x7f, 0x0a, 0xff, 0xff, 0x7f, 0x05,
X   0xff, 0xff, 0x7f, 0x0a, 0xff, 0xff, 0x7f, 0x05, 0xff, 0xff, 0x7f, 0x0a,
X   0xff, 0xff, 0x7f, 0x05, 0xff, 0xff, 0x7f, 0x0a, 0xff, 0xff, 0x7f, 0x05,
X   0xff, 0xff, 0x7f, 0x0a, 0xff, 0xff, 0x7f, 0x05, 0xff, 0xff, 0x7f, 0x0a,
X   0xff, 0xff, 0x7f, 0x05, 0xff, 0xff, 0x7f, 0x0a, 0xff, 0xff, 0x7f, 0x05,
X   0xff, 0xff, 0x7f, 0x0a, 0xff, 0xff, 0x7f, 0x05, 0x00, 0x00, 0x00, 0x0a,
X   0x55, 0x55, 0x55, 0x04, 0xaa, 0xaa, 0xaa, 0x08, 0x55, 0x55, 0x55, 0x01,
X   0xaa, 0xaa, 0xaa, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 836 -ne `wc -c <'bitmaps/eastwall.xbm'`; then
    echo shar: \"'bitmaps/eastwall.xbm'\" unpacked with wrong size!
fi
# end of 'bitmaps/eastwall.xbm'
fi
if test -f 'bitmaps/floor.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/floor.xbm'\"
else
echo shar: Extracting \"'bitmaps/floor.xbm'\" \(827 characters\)
sed "s/^X//" >'bitmaps/floor.xbm' <<'END_OF_FILE'
X#define floor_width 30
X#define floor_height 30
Xstatic char floor_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 827 -ne `wc -c <'bitmaps/floor.xbm'`; then
    echo shar: \"'bitmaps/floor.xbm'\" unpacked with wrong size!
fi
# end of 'bitmaps/floor.xbm'
fi
if test -f 'bitmaps/goal.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/goal.xbm'\"
else
echo shar: Extracting \"'bitmaps/goal.xbm'\" \(824 characters\)
sed "s/^X//" >'bitmaps/goal.xbm' <<'END_OF_FILE'
X#define goal_width 30
X#define goal_height 30
Xstatic char goal_bits[] = {
X   0x41, 0x10, 0x04, 0x01, 0xa2, 0x28, 0x8a, 0x22, 0x14, 0x45, 0x51, 0x14,
X   0x08, 0x82, 0x20, 0x08, 0x14, 0x45, 0x51, 0x14, 0xa2, 0x28, 0x8a, 0x22,
X   0x41, 0x10, 0x04, 0x01, 0xa2, 0x28, 0x8a, 0x22, 0x14, 0x45, 0x51, 0x14,
X   0x08, 0x82, 0x20, 0x08, 0x14, 0x45, 0x51, 0x14, 0xa2, 0x28, 0x8a, 0x22,
X   0x41, 0x10, 0x04, 0x01, 0xa2, 0x28, 0x8a, 0x22, 0x14, 0x45, 0x51, 0x14,
X   0x08, 0x82, 0x20, 0x08, 0x14, 0x45, 0x51, 0x14, 0xa2, 0x28, 0x8a, 0x22,
X   0x41, 0x10, 0x04, 0x01, 0xa2, 0x28, 0x8a, 0x22, 0x14, 0x45, 0x51, 0x14,
X   0x08, 0x82, 0x20, 0x08, 0x14, 0x45, 0x51, 0x14, 0xa2, 0x28, 0x8a, 0x22,
X   0x41, 0x10, 0x04, 0x01, 0xa2, 0x28, 0x8a, 0x22, 0x14, 0x45, 0x51, 0x14,
X   0x08, 0x82, 0x20, 0x08, 0x14, 0x45, 0x51, 0x14, 0xa2, 0x28, 0x8a, 0x22};
END_OF_FILE
if test 824 -ne `wc -c <'bitmaps/goal.xbm'`; then
    echo shar: \"'bitmaps/goal.xbm'\" unpacked with wrong size!
fi
# end of 'bitmaps/goal.xbm'
fi
if test -f 'bitmaps/horizwall.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/horizwall.xbm'\"
else
echo shar: Extracting \"'bitmaps/horizwall.xbm'\" \(839 characters\)
sed "s/^X//" >'bitmaps/horizwall.xbm' <<'END_OF_FILE'
X#define horizwall_width 30
X#define horizwall_height 30
Xstatic char horizwall_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00,
X   0x55, 0x55, 0x55, 0x15, 0xaa, 0xaa, 0xaa, 0x2a, 0x55, 0x55, 0x55, 0x15,
X   0xaa, 0xaa, 0xaa, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 839 -ne `wc -c <'bitmaps/horizwall.xbm'`; then
    echo shar: \"'bitmaps/horizwall.xbm'\" unpacked with wrong size!
fi
# end of 'bitmaps/horizwall.xbm'
fi
if test -f 'bitmaps/llcornerwall.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/llcornerwall.xbm'\"
else
echo shar: Extracting \"'bitmaps/llcornerwall.xbm'\" \(848 characters\)
sed "s/^X//" >'bitmaps/llcornerwall.xbm' <<'END_OF_FILE'
X#define llcornerwall_width 30
X#define llcornerwall_height 30
Xstatic char llcornerwall_bits[] = {
X   0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x35,
X   0xbc, 0xff, 0x7f, 0x3a, 0xbc, 0xff, 0x7f, 0x3d, 0xbc, 0xff, 0x7f, 0x3e,
X   0xbc, 0xff, 0x7f, 0x00, 0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f,
X   0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f,
X   0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f,
X   0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f,
X   0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f,
X   0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f, 0x3c, 0x00, 0x00, 0x00,
X   0x5c, 0x55, 0x55, 0x15, 0xac, 0xaa, 0xaa, 0x2a, 0x54, 0x55, 0x55, 0x15,
X   0xa8, 0xaa, 0xaa, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 848 -ne `wc -c <'bitmaps/llcornerwall.xbm'`; then
    echo shar: \"'bitmaps/llcornerwall.xbm'\" unpacked with wrong size!
fi
# end of 'bitmaps/llcornerwall.xbm'
fi
if test -f 'bitmaps/lonewall.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/lonewall.xbm'\"
else
echo shar: Extracting \"'bitmaps/lonewall.xbm'\" \(836 characters\)
sed "s/^X//" >'bitmaps/lonewall.xbm' <<'END_OF_FILE'
X#define lonewall_width 30
X#define lonewall_height 30
Xstatic char lonewall_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0x0f,
X   0xf4, 0xff, 0xff, 0x07, 0xec, 0xff, 0xff, 0x0b, 0xdc, 0xff, 0xff, 0x05,
X   0x3c, 0x00, 0x00, 0x0a, 0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a,
X   0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05,
X   0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a,
X   0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05,
X   0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a,
X   0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a, 0x3c, 0x00, 0x00, 0x04,
X   0xbc, 0xaa, 0xaa, 0x08, 0x5c, 0x55, 0x55, 0x01, 0xac, 0xaa, 0xaa, 0x02,
X   0x54, 0x55, 0x55, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 836 -ne `wc -c <'bitmaps/lonewall.xbm'`; then
    echo shar: \"'bitmaps/lonewall.xbm'\" unpacked with wrong size!
fi
# end of 'bitmaps/lonewall.xbm'
fi
if test -f 'bitmaps/lrcornerwall.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/lrcornerwall.xbm'\"
else
echo shar: Extracting \"'bitmaps/lrcornerwall.xbm'\" \(848 characters\)
sed "s/^X//" >'bitmaps/lrcornerwall.xbm' <<'END_OF_FILE'
X#define lrcornerwall_width 30
X#define lrcornerwall_height 30
Xstatic char lrcornerwall_bits[] = {
X   0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a, 0xbb, 0xff, 0x7f, 0x05,
X   0xb7, 0xff, 0x7f, 0x0a, 0xaf, 0xff, 0x7f, 0x05, 0x9f, 0xff, 0x7f, 0x0a,
X   0x80, 0xff, 0x7f, 0x05, 0xff, 0xff, 0x7f, 0x0a, 0xff, 0xff, 0x7f, 0x05,
X   0xff, 0xff, 0x7f, 0x0a, 0xff, 0xff, 0x7f, 0x05, 0xff, 0xff, 0x7f, 0x0a,
X   0xff, 0xff, 0x7f, 0x05, 0xff, 0xff, 0x7f, 0x0a, 0xff, 0xff, 0x7f, 0x05,
X   0xff, 0xff, 0x7f, 0x0a, 0xff, 0xff, 0x7f, 0x05, 0xff, 0xff, 0x7f, 0x0a,
X   0xff, 0xff, 0x7f, 0x05, 0xff, 0xff, 0x7f, 0x0a, 0xff, 0xff, 0x7f, 0x05,
X   0xff, 0xff, 0x7f, 0x0a, 0xff, 0xff, 0x7f, 0x05, 0x00, 0x00, 0x00, 0x0a,
X   0x55, 0x55, 0x55, 0x04, 0xaa, 0xaa, 0xaa, 0x08, 0x55, 0x55, 0x55, 0x01,
X   0xaa, 0xaa, 0xaa, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 848 -ne `wc -c <'bitmaps/lrcornerwall.xbm'`; then
    echo shar: \"'bitmaps/lrcornerwall.xbm'\" unpacked with wrong size!
fi
# end of 'bitmaps/lrcornerwall.xbm'
fi
if test -f 'bitmaps/man.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/man.xbm'\"
else
echo shar: Extracting \"'bitmaps/man.xbm'\" \(821 characters\)
sed "s/^X//" >'bitmaps/man.xbm' <<'END_OF_FILE'
X#define man_width 30
X#define man_height 30
Xstatic char man_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0x08, 0x04, 0x00,
X   0x00, 0x08, 0x04, 0x00, 0x00, 0x04, 0x08, 0x00, 0x00, 0x34, 0x0b, 0x00,
X   0x00, 0x04, 0x08, 0x00, 0x00, 0xe8, 0x05, 0x00, 0x00, 0xcc, 0x0c, 0x00,
X   0x00, 0xde, 0x1e, 0x00, 0x00, 0xda, 0x16, 0x00, 0x00, 0x3a, 0x17, 0x00,
X   0x00, 0xf9, 0x27, 0x00, 0x00, 0xf9, 0x27, 0x00, 0x80, 0xf8, 0x47, 0x00,
X   0x80, 0xf8, 0x47, 0x00, 0x80, 0xf8, 0x47, 0x00, 0x00, 0xf9, 0x27, 0x00,
X   0x00, 0xf9, 0x27, 0x00, 0x00, 0xfd, 0x2f, 0x00, 0x00, 0xfe, 0x1f, 0x00,
X   0x00, 0xfc, 0x0f, 0x00, 0x00, 0xf8, 0x07, 0x00, 0x00, 0x14, 0x0a, 0x00,
X   0x00, 0x3e, 0x1f, 0x00, 0x00, 0x3f, 0x3f, 0x00, 0x80, 0x3f, 0x7f, 0x00,
X   0xc0, 0x36, 0xdb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 821 -ne `wc -c <'bitmaps/man.xbm'`; then
    echo shar: \"'bitmaps/man.xbm'\" unpacked with wrong size!
fi
# end of 'bitmaps/man.xbm'
fi
if test -f 'bitmaps/north_twall.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/north_twall.xbm'\"
else
echo shar: Extracting \"'bitmaps/north_twall.xbm'\" \(845 characters\)
sed "s/^X//" >'bitmaps/north_twall.xbm' <<'END_OF_FILE'
X#define north_twall_width 30
X#define north_twall_height 30
Xstatic char north_twall_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0x80, 0xff, 0x7f, 0x00,
X   0x95, 0xff, 0x7f, 0x15, 0xaa, 0xff, 0x7f, 0x28, 0xb5, 0xff, 0x7f, 0x11,
X   0xba, 0xff, 0x7f, 0x22, 0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a};
END_OF_FILE
if test 845 -ne `wc -c <'bitmaps/north_twall.xbm'`; then
    echo shar: \"'bitmaps/north_twall.xbm'\" unpacked with wrong size!
fi
# end of 'bitmaps/north_twall.xbm'
fi
if test -f 'bitmaps/northwall.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/northwall.xbm'\"
else
echo shar: Extracting \"'bitmaps/northwall.xbm'\" \(839 characters\)
sed "s/^X//" >'bitmaps/northwall.xbm' <<'END_OF_FILE'
X#define northwall_width 30
X#define northwall_height 30
Xstatic char northwall_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0x07,
X   0xf4, 0xff, 0xff, 0x0b, 0xec, 0xff, 0xff, 0x05, 0xdc, 0xff, 0xff, 0x0a,
X   0x3c, 0x00, 0x00, 0x05, 0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05,
X   0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a,
X   0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05,
X   0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a,
X   0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05,
X   0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a,
X   0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05,
X   0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a};
END_OF_FILE
if test 839 -ne `wc -c <'bitmaps/northwall.xbm'`; then
    echo shar: \"'bitmaps/northwall.xbm'\" unpacked with wrong size!
fi
# end of 'bitmaps/northwall.xbm'
fi
if test -f 'bitmaps/object.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/object.xbm'\"
else
echo shar: Extracting \"'bitmaps/object.xbm'\" \(836 characters\)
sed "s/^X//" >'bitmaps/object.xbm' <<'END_OF_FILE'
X#define treasure_width 30
X#define treasure_height 30
Xstatic char treasure_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x07, 0x00,
X   0x00, 0xfe, 0x1f, 0x00, 0x80, 0x0f, 0x7c, 0x00, 0xc0, 0x03, 0xf0, 0x00,
X   0xe0, 0xc0, 0xc0, 0x01, 0x70, 0x70, 0x80, 0x03, 0x30, 0x18, 0x00, 0x03,
X   0x38, 0x0c, 0x00, 0x07, 0x18, 0x06, 0x00, 0x06, 0x1c, 0x02, 0x00, 0x0e,
X   0x0c, 0x03, 0x00, 0x0c, 0x0c, 0x03, 0x00, 0x0c, 0x0c, 0x01, 0x00, 0x0c,
X   0x0c, 0x00, 0x00, 0x0c, 0x0c, 0x00, 0x00, 0x0c, 0x0c, 0x00, 0x00, 0x0c,
X   0x1c, 0x01, 0x00, 0x0e, 0x18, 0x03, 0x00, 0x06, 0x38, 0x0e, 0x00, 0x07,
X   0x30, 0xfc, 0x03, 0x03, 0x70, 0xf0, 0x87, 0x03, 0xe0, 0x00, 0xc0, 0x01,
X   0xc0, 0x03, 0xf0, 0x00, 0x80, 0x0f, 0x7c, 0x00, 0x00, 0xfe, 0x1f, 0x00,
X   0x00, 0xf8, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 836 -ne `wc -c <'bitmaps/object.xbm'`; then
    echo shar: \"'bitmaps/object.xbm'\" unpacked with wrong size!
fi
# end of 'bitmaps/object.xbm'
fi
if test -f 'bitmaps/saveman.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/saveman.xbm'\"
else
echo shar: Extracting \"'bitmaps/saveman.xbm'\" \(833 characters\)
sed "s/^X//" >'bitmaps/saveman.xbm' <<'END_OF_FILE'
X#define saveman_width 30
X#define saveman_height 30
Xstatic char saveman_bits[] = {
X   0x41, 0x10, 0x04, 0x01, 0xa2, 0xf8, 0x8b, 0x22, 0x14, 0x0d, 0x54, 0x14,
X   0x08, 0x0a, 0x24, 0x08, 0x14, 0x05, 0x58, 0x14, 0xa2, 0x34, 0x8b, 0x22,
X   0x41, 0x04, 0x08, 0x01, 0xa2, 0xe8, 0x85, 0x22, 0x14, 0xcd, 0x4c, 0x14,
X   0x08, 0xde, 0x3e, 0x08, 0x14, 0xdb, 0x56, 0x14, 0xa2, 0x3a, 0x97, 0x22,
X   0x41, 0xf9, 0x27, 0x01, 0xa2, 0xf9, 0xe7, 0x22, 0x94, 0xf8, 0x47, 0x14,
X   0x88, 0xf8, 0x47, 0x08, 0x94, 0xf8, 0x47, 0x14, 0xa2, 0xf9, 0xe7, 0x22,
X   0x41, 0xf9, 0x27, 0x01, 0xa2, 0xfd, 0xaf, 0x22, 0x14, 0xfe, 0x5f, 0x14,
X   0x08, 0xfe, 0x2f, 0x08, 0x14, 0xf9, 0x57, 0x14, 0xa2, 0x14, 0x8a, 0x22,
X   0x41, 0x3e, 0x1f, 0x01, 0xa2, 0x3f, 0xbf, 0x22, 0x94, 0x7f, 0x7f, 0x14,
X   0xc8, 0xb6, 0xdb, 0x08, 0x14, 0x45, 0x41, 0x14, 0xa2, 0x28, 0x8a, 0x22};
END_OF_FILE
if test 833 -ne `wc -c <'bitmaps/saveman.xbm'`; then
    echo shar: \"'bitmaps/saveman.xbm'\" unpacked with wrong size!
fi
# end of 'bitmaps/saveman.xbm'
fi
if test -f 'bitmaps/south_twall.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/south_twall.xbm'\"
else
echo shar: Extracting \"'bitmaps/south_twall.xbm'\" \(845 characters\)
sed "s/^X//" >'bitmaps/south_twall.xbm' <<'END_OF_FILE'
X#define south_twall_width 30
X#define south_twall_height 30
Xstatic char south_twall_bits[] = {
X   0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a, 0xbb, 0xff, 0x7f, 0x35,
X   0xb7, 0xff, 0x7f, 0x3a, 0xaf, 0xff, 0x7f, 0x3d, 0x9f, 0xff, 0x7f, 0x3e,
X   0x80, 0xff, 0x7f, 0x00, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00,
X   0x55, 0x55, 0x55, 0x15, 0xaa, 0xaa, 0xaa, 0x2a, 0x55, 0x55, 0x55, 0x15,
X   0xaa, 0xaa, 0xaa, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 845 -ne `wc -c <'bitmaps/south_twall.xbm'`; then
    echo shar: \"'bitmaps/south_twall.xbm'\" unpacked with wrong size!
fi
# end of 'bitmaps/south_twall.xbm'
fi
if test -f 'bitmaps/southwall.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/southwall.xbm'\"
else
echo shar: Extracting \"'bitmaps/southwall.xbm'\" \(839 characters\)
sed "s/^X//" >'bitmaps/southwall.xbm' <<'END_OF_FILE'
X#define southwall_width 30
X#define southwall_height 30
Xstatic char southwall_bits[] = {
X   0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05,
X   0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a,
X   0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05,
X   0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a,
X   0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05,
X   0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a,
X   0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05,
X   0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05, 0x3c, 0x00, 0x00, 0x0a,
X   0x5c, 0x55, 0x55, 0x04, 0xac, 0xaa, 0xaa, 0x08, 0x54, 0x55, 0x55, 0x01,
X   0xa8, 0xaa, 0xaa, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 839 -ne `wc -c <'bitmaps/southwall.xbm'`; then
    echo shar: \"'bitmaps/southwall.xbm'\" unpacked with wrong size!
fi
# end of 'bitmaps/southwall.xbm'
fi
if test -f 'bitmaps/treasure.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/treasure.xbm'\"
else
echo shar: Extracting \"'bitmaps/treasure.xbm'\" \(836 characters\)
sed "s/^X//" >'bitmaps/treasure.xbm' <<'END_OF_FILE'
X#define treasure_width 30
X#define treasure_height 30
Xstatic char treasure_bits[] = {
X   0x41, 0x10, 0x04, 0x01, 0xa2, 0x28, 0x8a, 0x22, 0x14, 0xfd, 0x57, 0x14,
X   0x08, 0xce, 0x3f, 0x08, 0x94, 0x7b, 0x7c, 0x14, 0xe2, 0x31, 0xe0, 0x22,
X   0x61, 0x78, 0xe0, 0x01, 0x32, 0xfc, 0xb0, 0x23, 0x74, 0x9e, 0x19, 0x17,
X   0xd8, 0x0f, 0x0f, 0x0e, 0x8c, 0x0f, 0x06, 0x16, 0xce, 0x07, 0x0f, 0x2c,
X   0xed, 0x87, 0x19, 0x0c, 0xbe, 0xcd, 0x30, 0x2e, 0x9c, 0x78, 0x60, 0x1f,
X   0x0c, 0x30, 0xc0, 0x0d, 0x1c, 0x78, 0xc0, 0x1d, 0x3e, 0xcd, 0x60, 0x2f,
X   0x6d, 0x87, 0x31, 0x0e, 0xca, 0x07, 0x1b, 0x26, 0x9c, 0x0f, 0x0e, 0x16,
X   0xf8, 0xff, 0x0f, 0x0b, 0x74, 0xe6, 0x9b, 0x17, 0xe2, 0x8c, 0xf1, 0x23,
X   0xe1, 0xdb, 0xf0, 0x01, 0xa2, 0x77, 0xfc, 0x22, 0x14, 0xff, 0x5f, 0x14,
X   0x08, 0xfa, 0x27, 0x08, 0x14, 0x45, 0x51, 0x14, 0xa2, 0x28, 0x8a, 0x22};
END_OF_FILE
if test 836 -ne `wc -c <'bitmaps/treasure.xbm'`; then
    echo shar: \"'bitmaps/treasure.xbm'\" unpacked with wrong size!
fi
# end of 'bitmaps/treasure.xbm'
fi
if test -f 'bitmaps/ulcornerwall.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/ulcornerwall.xbm'\"
else
echo shar: Extracting \"'bitmaps/ulcornerwall.xbm'\" \(848 characters\)
sed "s/^X//" >'bitmaps/ulcornerwall.xbm' <<'END_OF_FILE'
X#define ulcornerwall_width 30
X#define ulcornerwall_height 30
Xstatic char ulcornerwall_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0x3f,
X   0xf4, 0xff, 0xff, 0x3f, 0xec, 0xff, 0xff, 0x3f, 0xdc, 0xff, 0xff, 0x3f,
X   0x3c, 0x00, 0x00, 0x00, 0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f,
X   0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f,
X   0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f,
X   0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f,
X   0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f,
X   0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0x7f, 0x00,
X   0xbc, 0xff, 0x7f, 0x15, 0xbc, 0xff, 0x7f, 0x28, 0xbc, 0xff, 0x7f, 0x11,
X   0xbc, 0xff, 0x7f, 0x22, 0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a};
END_OF_FILE
if test 848 -ne `wc -c <'bitmaps/ulcornerwall.xbm'`; then
    echo shar: \"'bitmaps/ulcornerwall.xbm'\" unpacked with wrong size!
fi
# end of 'bitmaps/ulcornerwall.xbm'
fi
if test -f 'bitmaps/urcornerwall.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/urcornerwall.xbm'\"
else
echo shar: Extracting \"'bitmaps/urcornerwall.xbm'\" \(848 characters\)
sed "s/^X//" >'bitmaps/urcornerwall.xbm' <<'END_OF_FILE'
X#define urcornerwall_width 30
X#define urcornerwall_height 30
Xstatic char urcornerwall_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x07,
X   0xff, 0xff, 0xff, 0x0b, 0xff, 0xff, 0xff, 0x05, 0xff, 0xff, 0xff, 0x0a,
X   0x00, 0x00, 0x00, 0x05, 0xff, 0xff, 0x7f, 0x0a, 0xff, 0xff, 0x7f, 0x05,
X   0xff, 0xff, 0x7f, 0x0a, 0xff, 0xff, 0x7f, 0x05, 0xff, 0xff, 0x7f, 0x0a,
X   0xff, 0xff, 0x7f, 0x05, 0xff, 0xff, 0x7f, 0x0a, 0xff, 0xff, 0x7f, 0x05,
X   0xff, 0xff, 0x7f, 0x0a, 0xff, 0xff, 0x7f, 0x05, 0xff, 0xff, 0x7f, 0x0a,
X   0xff, 0xff, 0x7f, 0x05, 0xff, 0xff, 0x7f, 0x0a, 0xff, 0xff, 0x7f, 0x05,
X   0xff, 0xff, 0x7f, 0x0a, 0xff, 0xff, 0x7f, 0x05, 0x80, 0xff, 0x7f, 0x0a,
X   0x95, 0xff, 0x7f, 0x05, 0xaa, 0xff, 0x7f, 0x0a, 0xb5, 0xff, 0x7f, 0x05,
X   0xba, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a};
END_OF_FILE
if test 848 -ne `wc -c <'bitmaps/urcornerwall.xbm'`; then
    echo shar: \"'bitmaps/urcornerwall.xbm'\" unpacked with wrong size!
fi
# end of 'bitmaps/urcornerwall.xbm'
fi
if test -f 'bitmaps/vertiwall.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/vertiwall.xbm'\"
else
echo shar: Extracting \"'bitmaps/vertiwall.xbm'\" \(839 characters\)
sed "s/^X//" >'bitmaps/vertiwall.xbm' <<'END_OF_FILE'
X#define vertiwall_width 30
X#define vertiwall_height 30
Xstatic char vertiwall_bits[] = {
X   0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05,
X   0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a,
X   0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05,
X   0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a,
X   0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05,
X   0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a,
X   0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05,
X   0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a,
X   0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05,
X   0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a};
END_OF_FILE
if test 839 -ne `wc -c <'bitmaps/vertiwall.xbm'`; then
    echo shar: \"'bitmaps/vertiwall.xbm'\" unpacked with wrong size!
fi
# end of 'bitmaps/vertiwall.xbm'
fi
if test -f 'bitmaps/wall.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/wall.xbm'\"
else
echo shar: Extracting \"'bitmaps/wall.xbm'\" \(824 characters\)
sed "s/^X//" >'bitmaps/wall.xbm' <<'END_OF_FILE'
X#define wall_width 30
X#define wall_height 30
Xstatic char wall_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0x0f, 0xfa, 0xff, 0xff, 0x17,
X   0xf6, 0xff, 0xff, 0x1b, 0xee, 0xff, 0xff, 0x1d, 0xde, 0xff, 0xff, 0x16,
X   0xbe, 0x00, 0x40, 0x1b, 0x7e, 0xff, 0xbf, 0x1d, 0xbe, 0xb6, 0x6d, 0x1f,
X   0xbe, 0xdb, 0x76, 0x1b, 0xbe, 0x6d, 0x5b, 0x1d, 0xbe, 0xf6, 0x6f, 0x1f,
X   0xbe, 0xfb, 0x7f, 0x1f, 0xbe, 0xfd, 0x5f, 0x1f, 0xbe, 0xfe, 0x7f, 0x1f,
X   0xbe, 0xfb, 0x7f, 0x1f, 0xbe, 0xfd, 0x7f, 0x1f, 0xbe, 0xfe, 0x7f, 0x1f,
X   0xbe, 0xfb, 0x7f, 0x1f, 0xbe, 0xfd, 0x7f, 0x1f, 0xbe, 0xf6, 0x7f, 0x1f,
X   0xbe, 0xdb, 0x7f, 0x1f, 0x7e, 0xff, 0xbf, 0x1f, 0xbe, 0x00, 0x40, 0x1f,
X   0xde, 0xff, 0xff, 0x1e, 0x6e, 0xfb, 0xff, 0x1d, 0xb6, 0xfd, 0xff, 0x1b,
X   0xda, 0xff, 0xff, 0x17, 0xfc, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 824 -ne `wc -c <'bitmaps/wall.xbm'`; then
    echo shar: \"'bitmaps/wall.xbm'\" unpacked with wrong size!
fi
# end of 'bitmaps/wall.xbm'
fi
if test -f 'bitmaps/west_twall.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/west_twall.xbm'\"
else
echo shar: Extracting \"'bitmaps/west_twall.xbm'\" \(842 characters\)
sed "s/^X//" >'bitmaps/west_twall.xbm' <<'END_OF_FILE'
X#define west_twall_width 30
X#define west_twall_height 30
Xstatic char west_twall_bits[] = {
X   0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a, 0xbc, 0xff, 0x7f, 0x35,
X   0xbc, 0xff, 0x7f, 0x3a, 0xbc, 0xff, 0x7f, 0x3d, 0xbc, 0xff, 0x7f, 0x3e,
X   0xbc, 0xff, 0x7f, 0x00, 0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f,
X   0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f,
X   0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f,
X   0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f,
X   0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f,
X   0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0x7f, 0x00,
X   0xbc, 0xff, 0x7f, 0x15, 0xbc, 0xff, 0x7f, 0x28, 0xbc, 0xff, 0x7f, 0x11,
X   0xbc, 0xff, 0x7f, 0x22, 0xbc, 0xff, 0x7f, 0x05, 0xbc, 0xff, 0x7f, 0x0a};
END_OF_FILE
if test 842 -ne `wc -c <'bitmaps/west_twall.xbm'`; then
    echo shar: \"'bitmaps/west_twall.xbm'\" unpacked with wrong size!
fi
# end of 'bitmaps/west_twall.xbm'
fi
if test -f 'bitmaps/westwall.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/westwall.xbm'\"
else
echo shar: Extracting \"'bitmaps/westwall.xbm'\" \(836 characters\)
sed "s/^X//" >'bitmaps/westwall.xbm' <<'END_OF_FILE'
X#define westwall_width 30
X#define westwall_height 30
Xstatic char westwall_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0x3f,
X   0xf4, 0xff, 0xff, 0x3f, 0xec, 0xff, 0xff, 0x3f, 0xdc, 0xff, 0xff, 0x3f,
X   0x3c, 0x00, 0x00, 0x00, 0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f,
X   0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f,
X   0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f,
X   0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f,
X   0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f,
X   0xbc, 0xff, 0xff, 0x3f, 0xbc, 0xff, 0xff, 0x3f, 0x3c, 0x00, 0x00, 0x00,
X   0x5c, 0x55, 0x55, 0x15, 0xac, 0xaa, 0xaa, 0x2a, 0x54, 0x55, 0x55, 0x15,
X   0xa8, 0xaa, 0xaa, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 836 -ne `wc -c <'bitmaps/westwall.xbm'`; then
    echo shar: \"'bitmaps/westwall.xbm'\" unpacked with wrong size!
fi
# end of 'bitmaps/westwall.xbm'
fi
if test -f 'makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'makefile'\"
else
echo shar: Extracting \"'makefile'\" \(969 characters\)
sed "s/^X//" >'makefile' <<'END_OF_FILE'
X# Uncomment the first one of this pair only if you are building under an AFS
X# environment, and then only if you know exactly what this does.
X#CFLAGS = -O -DVICE -I/usr/local/include -I/usr/local/include/res
XCFLAGS = -O -I/usr/X11R5/include
X
X# Uncomment the first one of this pair only if you are building under an AFS
X# environment, and then only if you know exactly what this does.
X#LIBS = -L/usr/local/lib -lX11 $(AUTHLIBS) -L/usr/local/lib/res -lresolv
XLIBS = -L/usr/X11R5/lib  -lX11 
X
XCC = cc
X
XOBJECTS = sok.o readscreen.o xdisp.o play.o save.o score.o
X
XDEST = /afs/andrew.cmu.edu/usr5/jt1o/bin
X
Xxsokoban: $(OBJECTS)
X	$(CC) $(CFLAGS) -o xsokoban $(OBJECTS) $(LIBS)
X
Xinstall: xsokoban
X	install -s xsokoban $(DEST)/xsokoban
X
Xclean :
X	rm xsokoban $(OBJECTS)
X
Xsok.o: sok.c sokoban.h
Xreadscreen.o: readscreen.c sokoban.h
Xshowscreen.o: showscreen.c sokoban.h
Xplay.o: play.c sokoban.h
Xsave.o: save.c sokoban.h
Xscore.o: score.c sokoban.h
Xxdisp.o: xdisp.c sokoban.h help.h
END_OF_FILE
if test 969 -ne `wc -c <'makefile'`; then
    echo shar: \"'makefile'\" unpacked with wrong size!
fi
# end of 'makefile'
fi
if test -f 'readscreen.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'readscreen.c'\"
else
echo shar: Extracting \"'readscreen.c'\" \(1498 characters\)
sed "s/^X//" >'readscreen.c' <<'END_OF_FILE'
X#include <stdio.h>
X#include "sokoban.h"
X
Xextern char *malloc();
Xextern FILE *fopen();
X
Xextern short level, packets, savepack, rows, cols;
Xextern char  map[MAXROW+1][MAXCOL+1];
Xextern POS   ppos;
X
Xshort readscreen() {
X
X   FILE *screen;
X   char *fnam;
X   int y, x;
X   short j, c, ret = 0;
X
X   for(y = 0; y < MAXROW; y++)
X     for(x = 0; x < MAXCOL; x++)
X       map[y][x] = ground;
X
X   fnam = malloc( strlen( SCREENPATH) + 12);
X   sprintf( fnam, "%s/screen.%d", SCREENPATH, level);
X   if( (screen = fopen( fnam, "r")) == NULL) 
X      ret = E_FOPENSCREEN;
X   else {
X      packets = savepack = rows = j = cols  = 0;
X      ppos.x = -1; ppos.y = -1;
X      while( (ret == 0) && ((c = getc( screen)) != EOF)) {
X         if( c == '\n') {
X	    map[rows++][j] = '\0';
X	    if( rows > MAXROW) 
X	       ret = E_TOMUCHROWS;
X	    else {
X	       if( j > cols) cols = j;
X	       j = 0;
X	    }
X	 }
X	 else if( (c == player) || (c == playerstore)) {
X	    if( ppos.x != -1) 
X	       ret = E_PLAYPOS1;
X	    else { 
X	       ppos.x = rows; ppos.y = j;
X	       map[rows][j++] = c;
X	       if( j > MAXCOL) ret = E_TOMUCHCOLS;
X	    }
X	 }
X	 else if( (c == save) || (c == packet) ||
X		  (c == wall) || (c == store) ||
X		  (c == ground)) {
X	    if( c == save)   { savepack++; packets++; }
X	    if( c == packet) packets++;
X	    map[rows][j++] = c;
X	    if( j > MAXCOL) ret = E_TOMUCHCOLS;
X	 }
X	 else ret = E_ILLCHAR;
X      }
X      fclose( screen);
X      if( (ret == 0) && (ppos.x == -1)) ret = E_PLAYPOS2;
X   }
X   return( ret);
X}
END_OF_FILE
if test 1498 -ne `wc -c <'readscreen.c'`; then
    echo shar: \"'readscreen.c'\" unpacked with wrong size!
fi
# end of 'readscreen.c'
fi
if test -f 'save.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'save.c'\"
else
echo shar: Extracting \"'save.c'\" \(5636 characters\)
sed "s/^X//" >'save.c' <<'END_OF_FILE'
X#include <stdio.h>
X#include <sys/types.h>
X#include <sys/stat.h>
X#include <signal.h>
X#if ! defined(vax)
X# include <netinet/in.h>
X#endif
X#include "sokoban.h"
X
Xextern char    *malloc();
Xextern FILE    *fopen();
X
Xextern char    *username;
Xextern char     map[MAXROW + 1][MAXCOL + 1];
Xextern short    level, moves, pushes, packets, savepack, rows, cols;
Xextern POS      ppos;
X
Xstatic long     savedbn;
Xstatic char    *sfname;
Xstatic FILE    *savefile;
Xstatic struct stat sfstat;
X
Xshort
Xsavegame()
X{
X
X	short           ret = 0;
X
X	signal(SIGINT, SIG_IGN);
X	sfname = malloc(strlen(SAVEPATH) + strlen(username) + 6);
X	sprintf(sfname, "%s/%s.sav", SAVEPATH, username);
X#ifdef __MSDOS__
X	if ((savefile = fopen(sfname, "wb")) == NULL)
X		ret = E_FOPENSAVE;
X	else {
X		if (fwrite(map, 1, MAXROW * MAXCOL, savefile) != MAXROW * MAXCOL)
X			ret = E_WRITESAVE;
X		else if (fwrite(&ppos, 1, sizeof(POS), savefile) != sizeof(POS))
X			ret = E_WRITESAVE;
X		else if (fwrite(&level, 1, 2, savefile) != 2)
X			ret = E_WRITESAVE;
X		else if (fwrite(&moves, 1, 2, savefile) != 2)
X			ret = E_WRITESAVE;
X		else if (fwrite(&pushes, 1, 2, savefile) != 2)
X			ret = E_WRITESAVE;
X		else if (fwrite(&packets, 1, 2, savefile) != 2)
X			ret = E_WRITESAVE;
X		else if (fwrite(&savepack, 1, 2, savefile) != 2)
X			ret = E_WRITESAVE;
X		else if (fwrite(&rows, 1, 2, savefile) != 2)
X			ret = E_WRITESAVE;
X		else if (fwrite(&cols, 1, 2, savefile) != 2)
X			ret = E_WRITESAVE;
X		else {
X			fclose(savefile);
X			if (stat(sfname, &sfstat) != 0)
X				ret = E_STATSAVE;
X			else if ((savefile = fopen(sfname, "ab")) == NULL)
X				ret = E_FOPENSAVE;
X			else {
X				if (fwrite(&sfstat, 1, sizeof(sfstat), savefile) != sizeof(sfstat))
X					ret = E_WRITESAVE;
X#else
X	packets = htons(packets);
X	pushes = htons(pushes);
X	moves = htons(moves);
X	level = htons(level);
X	cols = htons(cols);
X	savepack = htons(savepack);
X	rows = htons(rows);
X	ppos.x = htons(ppos.x);
X	ppos.y = htons(ppos.y);
X	if ((savefile = fopen(sfname, "w")) == NULL)
X		ret = E_FOPENSAVE;
X	else {
X		savedbn = fileno(savefile);
X		if (write(savedbn, &(map[0][0]), MAXROW * MAXCOL) != MAXROW * MAXCOL)
X			ret = E_WRITESAVE;
X		else if (write(savedbn, &ppos, sizeof(POS)) != sizeof(POS))
X			ret = E_WRITESAVE;
X		else if (write(savedbn, &level, 2) != 2)
X			ret = E_WRITESAVE;
X		else if (write(savedbn, &moves, 2) != 2)
X			ret = E_WRITESAVE;
X		else if (write(savedbn, &pushes, 2) != 2)
X			ret = E_WRITESAVE;
X		else if (write(savedbn, &packets, 2) != 2)
X			ret = E_WRITESAVE;
X		else if (write(savedbn, &savepack, 2) != 2)
X			ret = E_WRITESAVE;
X		else if (write(savedbn, &rows, 2) != 2)
X			ret = E_WRITESAVE;
X		else if (write(savedbn, &cols, 2) != 2)
X			ret = E_WRITESAVE;
X		else
X			fclose(savefile);
X		if (stat(sfname, &sfstat) != 0)
X			ret = E_STATSAVE;
X		else if ((savefile = fopen(sfname, "a")) == NULL)
X			ret = E_FOPENSAVE;
X		else if (write(savedbn, &sfstat, sizeof(sfstat)) != sizeof(sfstat))
X			ret = E_WRITESAVE;
X#endif
X		fclose(savefile);
X	}
X#ifndef __MSDOS__
X	ppos.x = ntohs(ppos.x);
X	ppos.y = ntohs(ppos.y);
X	pushes = ntohs(pushes);
X	moves = ntohs(moves);
X	level = ntohs(level);
X	packets = ntohs(packets);
X	cols = ntohs(cols);
X	rows = ntohs(rows);
X	savepack = ntohs(savepack);
X#endif
X
X	if ((ret == E_WRITESAVE) || (ret == E_STATSAVE))
X		unlink(sfname);
X	signal(SIGINT, SIG_DFL);
X
X	return (ret);
X}
X
Xshort
Xrestoregame()
X{
X
X	short           ret = 0;
X	struct stat     oldsfstat;
X
X	signal(SIGINT, SIG_IGN);
X	sfname = malloc(strlen(SAVEPATH) + strlen(username) + 6);
X	sprintf(sfname, "%s/%s.sav", SAVEPATH, username);
X#ifdef __MSDOS__
X	if (stat(sfname, &oldsfstat) < -1)
X		ret = E_NOSAVEFILE;
X	else {
X		if ((savefile = fopen(sfname, "rb")) == NULL)
X			ret = E_FOPENSAVE;
X		else {
X			if (fread(map, 1, MAXROW * MAXCOL, savefile) != MAXROW * MAXCOL)
X				ret = E_READSAVE;
X			else if (fread(&ppos, 1, sizeof(POS), savefile) != sizeof(POS))
X				ret = E_READSAVE;
X			else if (fread(&level, 1, 2, savefile) != 2)
X				ret = E_READSAVE;
X			else if (fread(&moves, 1, 2, savefile) != 2)
X				ret = E_READSAVE;
X			else if (fread(&pushes, 1, 2, savefile) != 2)
X				ret = E_READSAVE;
X			else if (fread(&packets, 1, 2, savefile) != 2)
X				ret = E_READSAVE;
X			else if (fread(&savepack, 1, 2, savefile) != 2)
X				ret = E_READSAVE;
X			else if (fread(&rows, 1, 2, savefile) != 2)
X				ret = E_READSAVE;
X			else if (fread(&cols, 1, 2, savefile) != 2)
X				ret = E_READSAVE;
X			else if (fread(&sfstat, 1, sizeof(sfstat), savefile) != sizeof(sfstat))
X#else
X	if (stat(sfname, &oldsfstat) < -1)
X		ret = E_NOSAVEFILE;
X	else {
X		if ((savefile = fopen(sfname, "r")) == NULL)
X			ret = E_FOPENSAVE;
X		else {
X			savedbn = fileno(savefile);
X			if (read(savedbn, &(map[0][0]), MAXROW * MAXCOL) != MAXROW * MAXCOL)
X				ret = E_READSAVE;
X			else if (read(savedbn, &ppos, sizeof(POS)) != sizeof(POS))
X				ret = E_READSAVE;
X			else if (read(savedbn, &level, 2) != 2)
X				ret = E_READSAVE;
X			else if (read(savedbn, &moves, 2) != 2)
X				ret = E_READSAVE;
X			else if (read(savedbn, &pushes, 2) != 2)
X				ret = E_READSAVE;
X			else if (read(savedbn, &packets, 2) != 2)
X				ret = E_READSAVE;
X			else if (read(savedbn, &savepack, 2) != 2)
X				ret = E_READSAVE;
X			else if (read(savedbn, &rows, 2) != 2)
X				ret = E_READSAVE;
X			else if (read(savedbn, &cols, 2) != 2)
X				ret = E_READSAVE;
X			else if (read(savedbn, &sfstat, sizeof(sfstat)) != sizeof(sfstat))
X#endif
X				ret = E_READSAVE;
X		}
X		ppos.x = ntohs(ppos.x);
X		ppos.y = ntohs(ppos.y);
X		level = ntohs(level);
X		moves = ntohs(moves);
X		pushes = ntohs(pushes);
X		packets = ntohs(packets);
X		savepack = ntohs(savepack);
X		rows = ntohs(rows);
X		cols = ntohs(cols);
X
X		unlink(sfname);
X	}
X	signal(SIGINT, SIG_DFL);
X	return (ret);
X}
END_OF_FILE
if test 5636 -ne `wc -c <'save.c'`; then
    echo shar: \"'save.c'\" unpacked with wrong size!
fi
# end of 'save.c'
fi
if test -f 'screens/screen.14' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'screens/screen.14'\"
else
echo shar: Extracting \"'screens/screen.14'\" \(284 characters\)
sed "s/^X//" >'screens/screen.14' <<'END_OF_FILE'
X       #######
X #######     #
X #     # $@$ #
X #$$ #   #########
X # ###......##   #
X #   $......## # #
X # ###......     #
X##   #### ### #$##
X#  #$   #  $  # #
X#  $ $$$  # $## #
X#   $ $ ###$$ # #
X#####     $   # #
X    ### ###   # #
X      #     #   #
X      ########  #
X             ####
END_OF_FILE
if test 284 -ne `wc -c <'screens/screen.14'`; then
    echo shar: \"'screens/screen.14'\" unpacked with wrong size!
fi
# end of 'screens/screen.14'
fi
if test -f 'screens/screen.20' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'screens/screen.20'\"
else
echo shar: Extracting \"'screens/screen.20'\" \(303 characters\)
sed "s/^X//" >'screens/screen.20' <<'END_OF_FILE'
X    ##########
X#####        ####
X#     #   $  #@ #
X# #######$####  ###
X# #    ## #  #$ ..#
X# # $     #  #  #.#
X# # $  #     #$ ..#
X# #  ### ##     #.#
X# ###  #  #  #$ ..#
X# #    #  ####  #.#
X# #$   $  $  #$ ..#
X#    $ # $ $ #  #.#
X#### $###    #$ ..#
X   #    $$ ###....#
X   #      ## ######
X   ########
END_OF_FILE
if test 303 -ne `wc -c <'screens/screen.20'`; then
    echo shar: \"'screens/screen.20'\" unpacked with wrong size!
fi
# end of 'screens/screen.20'
fi
if test -f 'screens/screen.22' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'screens/screen.22'\"
else
echo shar: Extracting \"'screens/screen.22'\" \(311 characters\)
sed "s/^X//" >'screens/screen.22' <<'END_OF_FILE'
X######     ####
X#    #######  #####
X#   $#  #  $  #   #
X#  $  $  $ # $ $  #
X##$ $   # @# $    #
X#  $ ########### ##
X# #   #.......# $#
X# ##  # ......#  #
X# #   $........$ #
X# # $ #.... ..#  #
X#  $ $####$#### $#
X# $   ### $   $  ##
X# $     $ $  $    #
X## ###### $ ##### #
X#         #       #
X###################
END_OF_FILE
if test 311 -ne `wc -c <'screens/screen.22'`; then
    echo shar: \"'screens/screen.22'\" unpacked with wrong size!
fi
# end of 'screens/screen.22'
fi
if test -f 'screens/screen.24' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'screens/screen.24'\"
else
echo shar: Extracting \"'screens/screen.24'\" \(306 characters\)
sed "s/^X//" >'screens/screen.24' <<'END_OF_FILE'
X###############
X#..........  .####
X#..........$$.#  #
X###########$ #   ##
X#      $  $     $ #
X## ####   #  $ #  #
X#      #   ##  # ##
X#  $#  # ##  ### ##
X# $ #$###    ### ##
X###  $ #  #  ### ##
X###    $ ## #  # ##
X # $  #  $  $ $   #
X #  $  $#$$$  #   #
X #  #  $      #####
X # @##  #  #  #
X ##############
END_OF_FILE
if test 306 -ne `wc -c <'screens/screen.24'`; then
    echo shar: \"'screens/screen.24'\" unpacked with wrong size!
fi
# end of 'screens/screen.24'
fi
if test -f 'screens/screen.25' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'screens/screen.25'\"
else
echo shar: Extracting \"'screens/screen.25'\" \(295 characters\)
sed "s/^X//" >'screens/screen.25' <<'END_OF_FILE'
X####
X#  ##############
X#  #   ..#......#
X#  # # ##### ...#
X##$#    ........#
X#   ##$######  ####
X# $ #     ######@ #
X##$ # $   ######  #
X#  $ #$$$##       #
X#      #    #$#$###
X# #### #$$$$$    #
X# #    $     #   #
X# #   ##        ###
X# ######$###### $ #
X#        #    #   #
X##########    #####
END_OF_FILE
if test 295 -ne `wc -c <'screens/screen.25'`; then
    echo shar: \"'screens/screen.25'\" unpacked with wrong size!
fi
# end of 'screens/screen.25'
fi
if test -f 'screens/screen.28' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'screens/screen.28'\"
else
echo shar: Extracting \"'screens/screen.28'\" \(258 characters\)
sed "s/^X//" >'screens/screen.28' <<'END_OF_FILE'
X         #####
X     #####   #
X    ## $  $  ####
X##### $  $ $ ##.#
X#       $$  ##..#
X#  ###### ###.. #
X## #  #    #... #
X# $   #    #... #
X#@ #$ ## ####...#
X####  $ $$  ##..#
X   ##  $ $  $...#
X    # $$  $ #  .#
X    #   $ $  ####
X    ######   #
X         #####
END_OF_FILE
if test 258 -ne `wc -c <'screens/screen.28'`; then
    echo shar: \"'screens/screen.28'\" unpacked with wrong size!
fi
# end of 'screens/screen.28'
fi
if test -f 'screens/screen.30' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'screens/screen.30'\"
else
echo shar: Extracting \"'screens/screen.30'\" \(270 characters\)
sed "s/^X//" >'screens/screen.30' <<'END_OF_FILE'
X       ###########
X       #   #     #
X#####  #     $ $ #
X#   ##### $## # ##
X# $ ##   # ## $  #
X# $  @$$ # ##$$$ #
X## ###   # ##    #
X## #   ### #####$#
X## #     $  #....#
X#  ### ## $ #....##
X# $   $ #   #..$. #
X#  ## $ #  ##.... #
X#####   ######...##
X    #####    #####
END_OF_FILE
if test 270 -ne `wc -c <'screens/screen.30'`; then
    echo shar: \"'screens/screen.30'\" unpacked with wrong size!
fi
# end of 'screens/screen.30'
fi
if test -f 'screens/screen.35' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'screens/screen.35'\"
else
echo shar: Extracting \"'screens/screen.35'\" \(298 characters\)
sed "s/^X//" >'screens/screen.35' <<'END_OF_FILE'
X############ ######
X#   #    # ###....#
X#   $$#   @  .....#
X#   # ###   # ....#
X## ## ###  #  ....#
X # $ $     # # ####
X #  $ $##  #      #
X#### #  #### # ## #
X#  # #$   ## #    #
X# $  $  # ## #   ##
X# # $ $    # #   #
X#  $ ## ## # #####
X# $$     $$  #
X## ## ### $  #
X #    # #    #
X ###### ######
END_OF_FILE
if test 298 -ne `wc -c <'screens/screen.35'`; then
    echo shar: \"'screens/screen.35'\" unpacked with wrong size!
fi
# end of 'screens/screen.35'
fi
if test -f 'screens/screen.36' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'screens/screen.36'\"
else
echo shar: Extracting \"'screens/screen.36'\" \(289 characters\)
sed "s/^X//" >'screens/screen.36' <<'END_OF_FILE'
X            #####
X#####  ######   #
X#   ####  $ $ $ #
X# $   ## ## ##  ##
X#   $ $     $  $ #
X### $  ## ##     ##
X  # ##### #####$$ #
X ##$##### @##     #
X # $  ###$### $  ##
X # $  #   ###  ###
X # $$ $ #   $$ #
X #     #   ##  #
X #######.. .###
X    #.........#
X    #.........#
X    ###########
END_OF_FILE
if test 289 -ne `wc -c <'screens/screen.36'`; then
    echo shar: \"'screens/screen.36'\" unpacked with wrong size!
fi
# end of 'screens/screen.36'
fi
if test -f 'screens/screen.37' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'screens/screen.37'\"
else
echo shar: Extracting \"'screens/screen.37'\" \(272 characters\)
sed "s/^X//" >'screens/screen.37' <<'END_OF_FILE'
X###########
X#......   #########
X#......   #  ##   #
X#..### $    $     #
X#... $ $ #   ##   #
X#...#$#####    #  #
X###    #   #$  #$ #
X  #  $$ $ $  $##  #
X  #  $   #$#$ ##$ #
X  ### ## #    ##  #
X   #  $ $ ## ######
X   #    $  $  #
X   ##   # #   #
X    #####@#####
X        ###
END_OF_FILE
if test 272 -ne `wc -c <'screens/screen.37'`; then
    echo shar: \"'screens/screen.37'\" unpacked with wrong size!
fi
# end of 'screens/screen.37'
fi
if test -f 'screens/screen.39' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'screens/screen.39'\"
else
echo shar: Extracting \"'screens/screen.39'\" \(291 characters\)
sed "s/^X//" >'screens/screen.39' <<'END_OF_FILE'
X             ######
X #############....#
X##   ##     ##....#
X#  $$##  $ @##....#
X#      $$ $#  ....#
X#  $ ## $$ # # ...#
X#  $ ## $  #  ....#
X## ##### ### ##.###
X##   $  $ ##   .  #
X# $###  # ##### ###
X#   $   #       #
X#  $ #$ $ $###  #
X# $$$# $   # ####
X#    #  $$ #
X######   ###
X     #####
END_OF_FILE
if test 291 -ne `wc -c <'screens/screen.39'`; then
    echo shar: \"'screens/screen.39'\" unpacked with wrong size!
fi
# end of 'screens/screen.39'
fi
if test -f 'screens/screen.41' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'screens/screen.41'\"
else
echo shar: Extracting \"'screens/screen.41'\" \(286 characters\)
sed "s/^X//" >'screens/screen.41' <<'END_OF_FILE'
X           #####
X          ##   ##
X         ##     #
X        ##  $$  #
X       ## $$  $ #
X       # $    $ #
X####   #   $$ #####
X#  ######## ##    #
X#.            $$$@#
X#.# ####### ##   ##
X#.# #######. #$ $##
X#........... #    #
X##############  $ #
X             ##  ##
X              ####
END_OF_FILE
if test 286 -ne `wc -c <'screens/screen.41'`; then
    echo shar: \"'screens/screen.41'\" unpacked with wrong size!
fi
# end of 'screens/screen.41'
fi
if test -f 'screens/screen.44' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'screens/screen.44'\"
else
echo shar: Extracting \"'screens/screen.44'\" \(258 characters\)
sed "s/^X//" >'screens/screen.44' <<'END_OF_FILE'
X #####
X #   #
X # # #######
X #      $@######
X # $ ##$ ###   #
X # #### $    $ #
X # ##### #  #$ ####
X##  #### ##$      #
X#  $#  $  # ## ## #
X#         # #...# #
X######  ###  ...  #
X     #### # #...# #
X          # ### # #
X          #       #
X          #########
END_OF_FILE
if test 258 -ne `wc -c <'screens/screen.44'`; then
    echo shar: \"'screens/screen.44'\" unpacked with wrong size!
fi
# end of 'screens/screen.44'
fi
if test -f 'screens/screen.50' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'screens/screen.50'\"
else
echo shar: Extracting \"'screens/screen.50'\" \(307 characters\)
sed "s/^X//" >'screens/screen.50' <<'END_OF_FILE'
X      ############
X     ##..    #   #
X    ##..* $    $ #
X   ##..*.# # # $##
X   #..*.# # # $  #
X####...#  #    # #
X#  ## #          #
X# @$ $ ###  #   ##
X# $   $   # #   #
X###$$   # # # # #
X  #   $   # # #####
X  # $# #####      #
X  #$   #   #    # #
X  #  ###   ##     #
X  #  #      #    ##
X  ####      ######
END_OF_FILE
if test 307 -ne `wc -c <'screens/screen.50'`; then
    echo shar: \"'screens/screen.50'\" unpacked with wrong size!
fi
# end of 'screens/screen.50'
fi
if test -f 'showscreen.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'showscreen.c'\"
else
echo shar: Extracting \"'showscreen.c'\" \(5656 characters\)
sed "s/^X//" >'showscreen.c' <<'END_OF_FILE'
X#include <stdio.h>
X#include <curses.h>
X#include "sokoban.h"
X
Xextern short rows, cols, level, moves, pushes, packets, savepack;
Xextern char  map[MAXROW+1][MAXCOL+1];
X
Xshowscreen() {
X
X   register short i, j;
X
X   move( 0, 0); clrtobot();
X   for( i = 0; i < rows; i++)
X      for( j = 0; map[i][j] != '\0'; j++)
X         mapchar( map[i][j], i, j);
X   move( MAXROW, 0);
X   printw( "Level:      Packets:      Saved:      Moves:       Pushes:");
X   displevel();
X   disppackets();
X   dispsave();
X   dispmoves();
X   disppushes();
X   move( MAXROW+2,0);
X   refresh();
X}
X
Xmapchar( c, i, j) 
Xregister char c; 
Xregister short i, j;
X{
X   OBJECT *obj, *get_obj_adr();
X   register short offset_row = (MAXROW - rows) / 2;
X   register short offset_col = MAXCOL - cols;
X
X   obj = get_obj_adr( c);
X
X   if( obj->invers) standout();
X   move( i + offset_row, 2*j + offset_col); 
X   printw( "%c%c", obj -> obj_display, obj -> obj_display);
X   if( obj->invers) standend();
X}
X
XOBJECT *get_obj_adr( c)
Xregister char c;
X{
X   register OBJECT *ret;
X
X   if(      c == player.obj_intern)		ret = &player;
X   else if( c == playerstore.obj_intern)	ret = &playerstore;
X   else if( c == store.obj_intern)		ret = &store;
X   else if( c == save.obj_intern)		ret = &save;
X   else if( c == packet.obj_intern)		ret = &packet;
X   else if( c == wall.obj_intern)		ret = &wall;
X   else if( c == ground.obj_intern)		ret = &ground;
X   else                                         ret = &ground;
X
X   return( ret);
X}
X
X
Xdisplevel() { 
X   move( MAXROW, 7); printw( "%3d", level); 
X}
X   
Xdisppackets() { 
X   move( MAXROW, 21); printw( "%3d", packets); 
X}
X   
Xdispsave() { 
X   move( MAXROW, 33); printw( "%3d", savepack); 
X}
X   
Xdispmoves() { 
X   move( MAXROW, 45); printw( "%5d", moves); 
X}
X      
Xdisppushes() { 
X   move( MAXROW, 59); printw( "%5d", pushes); 
X}
X
Xhelpmessage() {
X
X   move( MAXROW+2, 0); 
X   printw( "Press ? for help.%c", '\007');
X   refresh();
X   raw();			/* no input allowed while sleeping */
X   sleep( 2);
X   move( MAXROW+2, 0); deleteln();
X   refresh();
X   noraw();				/* end raw mode */
X}
X
Xstatic char *helppages[] = { /* be sure that there are max 9 lines per page */
X   "The problem is to push packets to",
X   "         saving positions.       ",
X   "                                 ",
X   "You can only push one packet at a",
X   "time,  so  watch  out  for  the  ",
X   "corners!                         ",
X   "                                 ",
X   "                                 ",
X   "                                 ",
X   NULL,					/* end of page */
X   "Moving: You can move by using    ",
X   "           the vi-keys hjkl.     ",
X   "                                 ",
X   "              left right up down ",
X   "  Move/Push     h    l    k   j  ",
X   "  Run/Push      H    L    K   J  ",
X   "  Run only     ^H   ^L   ^K  ^J  ",
X   "                                 ",
X   "                                 ",
X   NULL,					/* end of page */
X   "Other commands:                  ",
X   "   c:  temporary save            ",
X   "   q:  quit                      ",
X   "  ^R:  refresh the screen        ",
X   "   s:  save the game             ",
X   "   u:  undo last move/push       ",
X   "   U:  undo all                  ",
X   "  ^U:  reset to temp save        ",
X   "   ?:  this help scree           ",
X   NULL,					/* end of page */
X   "Characters on screen are:        ",
X   "                                 ",
X   "  %@  player                     ",
X   "  %+  player on saving position  ",
X   "  %.  saving position for packet ",
X   "  %$  packet                     ",
X   "  %*  saved packet               ",
X   "  %#  wall                       ",
X   "                                 ",
X   NULL,				/* end of page */
X   "If you set a temporary  save, you",
X   "need not  undo  all when you  get",
X   "stuck. Just reset to this save.  ",
X   "                                 ",
X   "A temporary save is automatically",
X   "made at the start.",
X   "                                 ",
X   "                                 ",
X   "                                 ",
X   NULL,					/* end of page */
X   NULL						/* total end */
X};
X
Xstatic char *title[] = {
X   "          S O K O B A N          ",
X   "---------------------------------"
X};
X
Xstatic char *helphelp[] = {
X   "   (Press return to exit help,   ",
X   "    any other key to continue)   "
X};
X
X#define HELPROWS	16
X#define HELPCOLS	37
X
Xshowhelp() {
X
X   register short line, i;
X   short goon = 1;
X   WINDOW *win, *makehelpwin();
X
X   win = makehelpwin();
X   for( i = 0, line = 2; goon; i++, line++) {
X      if( helppages[i] != NULL) {
X	 wmove( win, line+1, 2);
X	 printhelpline( win, helppages[i]);
X      }
X      else {
X	 wmove( win, HELPROWS-1, 0);
X	 wrefresh( win);
X	 if( (goon = (wgetch( win) != '\n'))) {
X	    line = 1;
X	    if( helppages[i+1] == NULL) i = -1;
X	 }
X      }
X   }
X   werase( win);
X   wrefresh( win);
X   delwin( win);
X}
X
XWINDOW *makehelpwin() {
X
X   WINDOW *win, *newwin();
X
X   win = newwin( HELPROWS, HELPCOLS, 2, 0);
X   box( win, '|', '-');
X   wmove( win, 1, 2);
X   wprintw( win, "%s", title[0]);
X   wmove( win, 2, 2);
X   wprintw( win, "%s", title[1]);
X   wmove( win, HELPROWS-3, 2);
X   wprintw( win, "%s", helphelp[0]);
X   wmove( win, HELPROWS-2, 2);
X   wprintw( win, "%s", helphelp[1]);
X
X   return( win);
X}
X
Xprinthelpline( win, line)
XWINDOW *win;
Xchar *line;
X{
X   OBJECT *obj, *get_obj_adr();
X
X   for( ; *line != '\0'; line++) {
X      if( *line == '%') {
X	 ++line;
X	 obj = get_obj_adr( *line);
X         if( obj -> invers) wstandout( win);
X         waddch( win, obj -> obj_display); waddch( win, obj -> obj_display);
X         if( obj -> invers) wstandend( win);
X      }
X      else waddch( win, *line);
X   }
X}
END_OF_FILE
if test 5656 -ne `wc -c <'showscreen.c'`; then
    echo shar: \"'showscreen.c'\" unpacked with wrong size!
fi
# end of 'showscreen.c'
fi
if test -f 'sokoban.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sokoban.h'\"
else
echo shar: Extracting \"'sokoban.h'\" \(2938 characters\)
sed "s/^X//" >'sokoban.h' <<'END_OF_FILE'
X/***********************************************************************
X   You may wish to alter the following directory paths
X***********************************************************************/
X/**/
X/* SCREENPATH: the name of the directioy where the screen file are held */
X/**/
X#define SCREENPATH "/home/tmp/jt1o/xsokoban/screens"
X
X/**/
X/* SAVEPATH: the name of the path where save files are held */
X/*           Attention: Be sure that there are no other files with */
X/*                      the name <username>.sav                    */
X/**/
X#define SAVEPATH "/home/tmp/jt1o/xsokoban/saves"
X
X/* BITPATH: the full pathname to the bitmap file defaults. */
X#define BITPATH "/home/tmp/jt1o/xsokban/bitmaps"
X
X/**/
X/* LOCKPATH: temporary file which is created to ensure that no users */
X/*           work with the scorefile at the same time                */
X/**/
X#define LOCKFILE "/tmp/score.slock"
X
X/**/
X/* SCOREFILE: the full pathname of the score file */
X/**/
X#define SCOREFILE "/home/tmp/jt1o/xsokoban/sokoban.slock"
X
X/**/
X/* MAXUSERNAME: defines the maximum length of a system's user name */
X/**/
X#define MAXUSERNAME	32
X
X/**/
X/* MAXSCOREENTRIES: defines the maximum numner of entries in the scoretable */
X/**/
X#define MAXSCOREENTRIES	10000
X
X/**/
X/* SUPERUSER: defines the name of the game superuser */
X/**/
X#define SUPERUSER "jt1o"
X
X/**/
X/* PASSWORD: defines the password necessary for creating a new score file */
X/**/
X#define PASSWORD "gandalf"
X
X#ifdef VICE
Xextern int PlayerUID;
X#define getuid() PlayerUID
X#define geteuid() PlayerUID
X#endif
X
X/**/
X/* OBJECT: this typedef is used for internal and external representation */
X/*         of objects                                                    */
X/**/
X
X#define BUFSIZE 256
X
X/**/
X/* Attention: Do not alter the following defines. */
X/* This would cause an error when reading the screenfiles */
X/**/
X#define   player	'@'
X#define   playerstore	'+'
X#define   store		'.'
X#define   packet	'$'
X#define   save		'*'
X#define   ground	' '
X#define   wall		'#'
X
X/*************************************************************************
X********************** DO NOT CHANGE BELOW THIS LINE *********************
X*************************************************************************/
X#define MAXROW		20
X#define MAXCOL		20
X
Xtypedef struct {
X   short x, y;
X} POS;
X
X#define E_FOPENSCREEN	1
X#define E_PLAYPOS1	2
X#define E_ILLCHAR	3
X#define E_PLAYPOS2	4
X#define E_TOMUCHROWS	5
X#define E_TOMUCHCOLS	6
X#define E_ENDGAME	7
X#define E_NOUSER	9
X#define E_FOPENSAVE	10
X#define E_WRITESAVE	11
X#define E_STATSAVE	12
X#define E_READSAVE	13
X#define E_ALTERSAVE	14
X#define E_SAVED		15
X#define E_TOMUCHSE	16
X#define E_FOPENSCORE	17
X#define E_READSCORE	18
X#define E_WRITESCORE	19
X#define E_USAGE		20
X#define E_ILLPASSWORD	21
X#define E_LEVELTOOHIGH	22
X#define E_NOSUPER	23
X#define E_NOSAVEFILE	24
X#define E_NOBITMAP	25
X#define E_NODISPLAY	26
X#define E_NOFONT	27
X#define E_NOMEM		28
X#define E_NOCOLOR	29
END_OF_FILE
if test 2938 -ne `wc -c <'sokoban.h'`; then
    echo shar: \"'sokoban.h'\" unpacked with wrong size!
fi
# end of 'sokoban.h'
fi
echo shar: End of archive 2 \(of 3\).
cp /dev/null ark2isdone
MISSING=""
for I in 1 2 3 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 3 archives.
    rm -f ark[1-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
