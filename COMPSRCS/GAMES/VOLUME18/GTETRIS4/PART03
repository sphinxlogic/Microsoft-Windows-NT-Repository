Path: uunet!news.tek.com!news.cna.tek.com!not-for-mail
From: billr@saab.cna.tek.com (Bill Randle)
Newsgroups: comp.sources.games
Subject: v18i055:  gtetris4 - Generic Tetris for X11, V3.0.1, Part03/03 (REPOST)
Date: 30 Aug 1993 07:53:27 -0700
Organization: Tektronix, Inc., Redmond, OR
Lines: 477
Approved: billr@saab.CNA.TEK.COM
Message-ID: <25t497$f6h@saab.cna.tek.com>
NNTP-Posting-Host: saab.cna.tek.com
Xref: uunet comp.sources.games:1855

Submitted-by: "Q. Alex Zhao" <azhao@cc.gatech.edu>
Posting-number: Volume 18, Issue 55
Archive-name: gtetris4/part03
Supersedes: tetris3: Volume 15, Issue 44-45
Environment: X11R4/5, Xlib



#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 3 (of 3)."
# Contents:  COPYRIGHT bm-3d/rot00.xbm bm-3d/rot01.xbm bm-3d/rot02.xbm
#   bm-3d/rot03.xbm bm-3d/rot04.xbm bm-3d/rot05.xbm bm-3d/rot06.xbm
#   bm-3d/rot07.xbm bm-3d/rot08.xbm bm-3d/rot09.xbm bm-3d/rot10.xbm
#   bm-3d/rot11.xbm bm-3d/rot12.xbm bm-3d/rot13.xbm bm-3d/rot14.xbm
#   bm-3d/rot15.xbm bm-plain/rop15.xbm
# Wrapped by billr@saab on Fri Aug 27 12:06:40 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'COPYRIGHT' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'COPYRIGHT'\"
else
echo shar: Extracting \"'COPYRIGHT'\" \(798 characters\)
sed "s/^X//" >'COPYRIGHT' <<'END_OF_FILE'
X# GENERIC X-WINDOW-BASED TETRIS
X#
X#  Copyright (C) 1992 - 93		Q. Alex Zhao, azhao@cc.gatech.edu
X#
X#			All Rights Reserved
X#
X#  Permission to use, copy, modify, and distribute this software and
X#  its documentation for any purpose and without fee is hereby granted,
X#  provided that the above copyright notice appear in all copies and
X#  that both that copyright notice and this permission notice appear in
X#  supporting documentation, and that the name of the author not be
X#  used in advertising or publicity pertaining to distribution of the
X#  software without specific, written prior permission.
X#
X#  This program is distributed in the hope that it will be "playable",
X#  but WITHOUT ANY WARRANTY; without even the implied warranty of
X#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
X#
X
END_OF_FILE
if test 798 -ne `wc -c <'COPYRIGHT'`; then
    echo shar: \"'COPYRIGHT'\" unpacked with wrong size!
fi
# end of 'COPYRIGHT'
fi
if test -f 'bm-3d/rot00.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bm-3d/rot00.xbm'\"
else
echo shar: Extracting \"'bm-3d/rot00.xbm'\" \(827 characters\)
sed "s/^X//" >'bm-3d/rot00.xbm' <<'END_OF_FILE'
X#define rot00_width 30
X#define rot00_height 30
Xstatic char rot00_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0x03, 0xf8, 0xff, 0xff, 0x07,
X   0x5c, 0x55, 0x55, 0x0f, 0xae, 0xaa, 0xaa, 0x1e, 0x56, 0x55, 0x55, 0x1f,
X   0xae, 0xaa, 0xaa, 0x1f, 0xd6, 0xff, 0xff, 0x1f, 0xae, 0xff, 0xbf, 0x1f,
X   0xd6, 0xff, 0xdf, 0x1f, 0xae, 0xff, 0xaf, 0x1f, 0xd6, 0xff, 0xd7, 0x1f,
X   0xae, 0xff, 0xab, 0x1f, 0xd6, 0xff, 0xd5, 0x1f, 0xae, 0xff, 0xaa, 0x1f,
X   0xd6, 0x7f, 0xd5, 0x1f, 0xae, 0xbf, 0xaa, 0x1f, 0xd6, 0x5f, 0xd5, 0x1f,
X   0xae, 0xaf, 0xaa, 0x1f, 0xd6, 0x57, 0xd5, 0x1f, 0xae, 0xab, 0xaa, 0x1f,
X   0xd6, 0x55, 0xd5, 0x1f, 0xae, 0xaa, 0xaa, 0x1f, 0xd6, 0xff, 0xff, 0x1f,
X   0xee, 0xff, 0xff, 0x1f, 0xfe, 0xff, 0xff, 0x1f, 0xfc, 0xff, 0xff, 0x0f,
X   0xf8, 0xff, 0xff, 0x07, 0xf0, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 827 -ne `wc -c <'bm-3d/rot00.xbm'`; then
    echo shar: \"'bm-3d/rot00.xbm'\" unpacked with wrong size!
fi
# end of 'bm-3d/rot00.xbm'
fi
if test -f 'bm-3d/rot01.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bm-3d/rot01.xbm'\"
else
echo shar: Extracting \"'bm-3d/rot01.xbm'\" \(827 characters\)
sed "s/^X//" >'bm-3d/rot01.xbm' <<'END_OF_FILE'
X#define rot01_width 30
X#define rot01_height 30
Xstatic char rot01_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0x07,
X   0x55, 0x55, 0x55, 0x0f, 0xaa, 0xaa, 0xaa, 0x1e, 0x55, 0x55, 0x55, 0x1f,
X   0xaa, 0xaa, 0xaa, 0x1f, 0x55, 0x55, 0xd5, 0x1f, 0xaa, 0xaa, 0xea, 0x1f,
X   0x55, 0x55, 0xf5, 0x1f, 0xaa, 0xaa, 0xfa, 0x1f, 0x55, 0x55, 0xfd, 0x1f,
X   0xaa, 0xaa, 0xfe, 0x1f, 0x55, 0x55, 0xff, 0x1f, 0xaa, 0xaa, 0xff, 0x1f,
X   0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0x1f,
X   0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0x1f,
X   0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0x1f,
X   0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0x0f,
X   0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 827 -ne `wc -c <'bm-3d/rot01.xbm'`; then
    echo shar: \"'bm-3d/rot01.xbm'\" unpacked with wrong size!
fi
# end of 'bm-3d/rot01.xbm'
fi
if test -f 'bm-3d/rot02.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bm-3d/rot02.xbm'\"
else
echo shar: Extracting \"'bm-3d/rot02.xbm'\" \(827 characters\)
sed "s/^X//" >'bm-3d/rot02.xbm' <<'END_OF_FILE'
X#define rot02_width 30
X#define rot02_height 30
Xstatic char rot02_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0x03, 0xf8, 0xff, 0xff, 0x07,
X   0x5c, 0x55, 0x55, 0x0f, 0xae, 0xaa, 0xaa, 0x1e, 0x56, 0x55, 0x55, 0x1f,
X   0xae, 0xaa, 0xaa, 0x1f, 0x56, 0x55, 0xd5, 0x1f, 0xae, 0xaa, 0xea, 0x1f,
X   0x56, 0x55, 0xf5, 0x1f, 0xae, 0xaa, 0xfa, 0x1f, 0x56, 0x55, 0xfd, 0x1f,
X   0xae, 0xaa, 0xfe, 0x1f, 0x56, 0x55, 0xff, 0x1f, 0xae, 0xaa, 0xff, 0x1f,
X   0x56, 0xd5, 0xff, 0x1f, 0xae, 0xaa, 0xff, 0x1f, 0x56, 0xd5, 0xff, 0x1f,
X   0xae, 0xaa, 0xff, 0x1f, 0x56, 0xd5, 0xff, 0x1f, 0xae, 0xaa, 0xff, 0x1f,
X   0x56, 0xd5, 0xff, 0x1f, 0xae, 0xaa, 0xff, 0x1f, 0x56, 0xd5, 0xff, 0x1f,
X   0xae, 0xaa, 0xff, 0x1f, 0x56, 0xd5, 0xff, 0x1f, 0xae, 0xaa, 0xff, 0x1f,
X   0x56, 0xd5, 0xff, 0x1f, 0xae, 0xaa, 0xff, 0x1f, 0x56, 0xd5, 0xff, 0x1f};
END_OF_FILE
if test 827 -ne `wc -c <'bm-3d/rot02.xbm'`; then
    echo shar: \"'bm-3d/rot02.xbm'\" unpacked with wrong size!
fi
# end of 'bm-3d/rot02.xbm'
fi
if test -f 'bm-3d/rot03.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bm-3d/rot03.xbm'\"
else
echo shar: Extracting \"'bm-3d/rot03.xbm'\" \(827 characters\)
sed "s/^X//" >'bm-3d/rot03.xbm' <<'END_OF_FILE'
X#define rot03_width 30
X#define rot03_height 30
Xstatic char rot03_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0x07,
X   0x55, 0x55, 0x55, 0x0f, 0xaa, 0xaa, 0xaa, 0x1e, 0x55, 0x55, 0x55, 0x1f,
X   0xaa, 0xaa, 0xaa, 0x1f, 0x55, 0x55, 0xd5, 0x1f, 0xaa, 0xaa, 0xea, 0x1f,
X   0x55, 0x55, 0xf5, 0x1f, 0xaa, 0xaa, 0xfa, 0x1f, 0x55, 0x55, 0xfd, 0x1f,
X   0xaa, 0xaa, 0xfe, 0x1f, 0x55, 0x55, 0xff, 0x1f, 0xaa, 0xaa, 0xff, 0x1f,
X   0xff, 0xff, 0xff, 0x1f, 0xff, 0xbf, 0xff, 0x1f, 0xff, 0xdf, 0xff, 0x1f,
X   0xff, 0xaf, 0xff, 0x1f, 0xff, 0xd7, 0xff, 0x1f, 0xff, 0xab, 0xff, 0x1f,
X   0xff, 0xd5, 0xff, 0x1f, 0xff, 0xaa, 0xff, 0x1f, 0x7f, 0xd5, 0xff, 0x1f,
X   0xbf, 0xaa, 0xff, 0x1f, 0x5f, 0xd5, 0xff, 0x1f, 0xaf, 0xaa, 0xff, 0x1f,
X   0x57, 0xd5, 0xff, 0x1f, 0xab, 0xaa, 0xff, 0x1f, 0x55, 0xd5, 0xff, 0x1f};
END_OF_FILE
if test 827 -ne `wc -c <'bm-3d/rot03.xbm'`; then
    echo shar: \"'bm-3d/rot03.xbm'\" unpacked with wrong size!
fi
# end of 'bm-3d/rot03.xbm'
fi
if test -f 'bm-3d/rot04.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bm-3d/rot04.xbm'\"
else
echo shar: Extracting \"'bm-3d/rot04.xbm'\" \(827 characters\)
sed "s/^X//" >'bm-3d/rot04.xbm' <<'END_OF_FILE'
X#define rot04_width 30
X#define rot04_height 30
Xstatic char rot04_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0x3f, 0xf8, 0xff, 0xff, 0x3f,
X   0x5c, 0x55, 0x55, 0x15, 0xae, 0xaa, 0xaa, 0x2a, 0x56, 0x55, 0x55, 0x15,
X   0xae, 0xaa, 0xaa, 0x2a, 0x56, 0x55, 0x55, 0x15, 0xae, 0xaa, 0xaa, 0x2a,
X   0x56, 0x55, 0x55, 0x15, 0xae, 0xaa, 0xaa, 0x2a, 0x56, 0x55, 0x55, 0x15,
X   0xae, 0xaa, 0xaa, 0x2a, 0x56, 0x55, 0x55, 0x15, 0xae, 0xaa, 0xaa, 0x2a,
X   0x56, 0xd5, 0xff, 0x3f, 0xae, 0xea, 0xff, 0x3f, 0x56, 0xf5, 0xff, 0x3f,
X   0xae, 0xfa, 0xff, 0x3f, 0x56, 0xfd, 0xff, 0x3f, 0xae, 0xfe, 0xff, 0x3f,
X   0x56, 0xff, 0xff, 0x3f, 0xae, 0xff, 0xff, 0x3f, 0xd6, 0xff, 0xff, 0x3f,
X   0xee, 0xff, 0xff, 0x3f, 0xfe, 0xff, 0xff, 0x3f, 0xfc, 0xff, 0xff, 0x3f,
X   0xf8, 0xff, 0xff, 0x3f, 0xf0, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 827 -ne `wc -c <'bm-3d/rot04.xbm'`; then
    echo shar: \"'bm-3d/rot04.xbm'\" unpacked with wrong size!
fi
# end of 'bm-3d/rot04.xbm'
fi
if test -f 'bm-3d/rot05.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bm-3d/rot05.xbm'\"
else
echo shar: Extracting \"'bm-3d/rot05.xbm'\" \(827 characters\)
sed "s/^X//" >'bm-3d/rot05.xbm' <<'END_OF_FILE'
X#define rot05_width 30
X#define rot05_height 30
Xstatic char rot05_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0x55, 0x55, 0x55, 0x15, 0xaa, 0xaa, 0xaa, 0x2a, 0x55, 0x55, 0x55, 0x15,
X   0xaa, 0xaa, 0xaa, 0x2a, 0x55, 0x55, 0x55, 0x15, 0xaa, 0xaa, 0xaa, 0x2a,
X   0x55, 0x55, 0x55, 0x15, 0xaa, 0xaa, 0xaa, 0x2a, 0x55, 0x55, 0x55, 0x15,
X   0xaa, 0xaa, 0xaa, 0x2a, 0x55, 0x55, 0x55, 0x15, 0xaa, 0xaa, 0xaa, 0x2a,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 827 -ne `wc -c <'bm-3d/rot05.xbm'`; then
    echo shar: \"'bm-3d/rot05.xbm'\" unpacked with wrong size!
fi
# end of 'bm-3d/rot05.xbm'
fi
if test -f 'bm-3d/rot06.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bm-3d/rot06.xbm'\"
else
echo shar: Extracting \"'bm-3d/rot06.xbm'\" \(827 characters\)
sed "s/^X//" >'bm-3d/rot06.xbm' <<'END_OF_FILE'
X#define rot06_width 30
X#define rot06_height 30
Xstatic char rot06_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0x3f, 0xf8, 0xff, 0xff, 0x3f,
X   0x5c, 0x55, 0x55, 0x15, 0xae, 0xaa, 0xaa, 0x2a, 0x56, 0x55, 0x55, 0x15,
X   0xae, 0xaa, 0xaa, 0x2a, 0x56, 0x55, 0x55, 0x15, 0xae, 0xaa, 0xaa, 0x2a,
X   0x56, 0x55, 0x55, 0x15, 0xae, 0xaa, 0xaa, 0x2a, 0x56, 0x55, 0x55, 0x15,
X   0xae, 0xaa, 0xaa, 0x2a, 0x56, 0x55, 0x55, 0x15, 0xae, 0xaa, 0xaa, 0x2a,
X   0x56, 0xd5, 0xff, 0x3f, 0xae, 0xaa, 0xff, 0x3f, 0x56, 0xd5, 0xff, 0x3f,
X   0xae, 0xaa, 0xff, 0x3f, 0x56, 0xd5, 0xff, 0x3f, 0xae, 0xaa, 0xff, 0x3f,
X   0x56, 0xd5, 0xff, 0x3f, 0xae, 0xaa, 0xff, 0x3f, 0x56, 0xd5, 0xff, 0x3f,
X   0xae, 0xaa, 0xff, 0x3f, 0x56, 0xd5, 0xff, 0x3f, 0xae, 0xaa, 0xff, 0x3f,
X   0x56, 0xd5, 0xff, 0x3f, 0xae, 0xaa, 0xff, 0x3f, 0x56, 0xd5, 0xff, 0x3f};
END_OF_FILE
if test 827 -ne `wc -c <'bm-3d/rot06.xbm'`; then
    echo shar: \"'bm-3d/rot06.xbm'\" unpacked with wrong size!
fi
# end of 'bm-3d/rot06.xbm'
fi
if test -f 'bm-3d/rot07.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bm-3d/rot07.xbm'\"
else
echo shar: Extracting \"'bm-3d/rot07.xbm'\" \(827 characters\)
sed "s/^X//" >'bm-3d/rot07.xbm' <<'END_OF_FILE'
X#define rot07_width 30
X#define rot07_height 30
Xstatic char rot07_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0x55, 0x55, 0x55, 0x15, 0xaa, 0xaa, 0xaa, 0x2a, 0x55, 0x55, 0x55, 0x15,
X   0xaa, 0xaa, 0xaa, 0x2a, 0x55, 0x55, 0x55, 0x15, 0xaa, 0xaa, 0xaa, 0x2a,
X   0x55, 0x55, 0x55, 0x15, 0xaa, 0xaa, 0xaa, 0x2a, 0x55, 0x55, 0x55, 0x15,
X   0xaa, 0xaa, 0xaa, 0x2a, 0x55, 0x55, 0x55, 0x15, 0xaa, 0xaa, 0xaa, 0x2a,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xbf, 0xff, 0x3f, 0xff, 0xdf, 0xff, 0x3f,
X   0xff, 0xaf, 0xff, 0x3f, 0xff, 0xd7, 0xff, 0x3f, 0xff, 0xab, 0xff, 0x3f,
X   0xff, 0xd5, 0xff, 0x3f, 0xff, 0xaa, 0xff, 0x3f, 0x7f, 0xd5, 0xff, 0x3f,
X   0xbf, 0xaa, 0xff, 0x3f, 0x5f, 0xd5, 0xff, 0x3f, 0xaf, 0xaa, 0xff, 0x3f,
X   0x57, 0xd5, 0xff, 0x3f, 0xab, 0xaa, 0xff, 0x3f, 0x55, 0xd5, 0xff, 0x3f};
END_OF_FILE
if test 827 -ne `wc -c <'bm-3d/rot07.xbm'`; then
    echo shar: \"'bm-3d/rot07.xbm'\" unpacked with wrong size!
fi
# end of 'bm-3d/rot07.xbm'
fi
if test -f 'bm-3d/rot08.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bm-3d/rot08.xbm'\"
else
echo shar: Extracting \"'bm-3d/rot08.xbm'\" \(827 characters\)
sed "s/^X//" >'bm-3d/rot08.xbm' <<'END_OF_FILE'
X#define rot08_width 30
X#define rot08_height 30
Xstatic char rot08_bits[] = {
X   0xae, 0xaa, 0xff, 0x1f, 0x56, 0xd5, 0xff, 0x1f, 0xae, 0xaa, 0xff, 0x1f,
X   0x56, 0xd5, 0xff, 0x1f, 0xae, 0xaa, 0xff, 0x1f, 0x56, 0xd5, 0xff, 0x1f,
X   0xae, 0xaa, 0xff, 0x1f, 0x56, 0xd5, 0xff, 0x1f, 0xae, 0xaa, 0xff, 0x1f,
X   0x56, 0xd5, 0xff, 0x1f, 0xae, 0xaa, 0xff, 0x1f, 0x56, 0xd5, 0xff, 0x1f,
X   0xae, 0xaa, 0xff, 0x1f, 0x56, 0xd5, 0xff, 0x1f, 0xae, 0xaa, 0xff, 0x1f,
X   0x56, 0xd5, 0xff, 0x1f, 0xae, 0xea, 0xff, 0x1f, 0x56, 0xf5, 0xff, 0x1f,
X   0xae, 0xfa, 0xff, 0x1f, 0x56, 0xfd, 0xff, 0x1f, 0xae, 0xfe, 0xff, 0x1f,
X   0x56, 0xff, 0xff, 0x1f, 0xae, 0xff, 0xff, 0x1f, 0xd6, 0xff, 0xff, 0x1f,
X   0xee, 0xff, 0xff, 0x1f, 0xfe, 0xff, 0xff, 0x1f, 0xfc, 0xff, 0xff, 0x0f,
X   0xf8, 0xff, 0xff, 0x07, 0xf0, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 827 -ne `wc -c <'bm-3d/rot08.xbm'`; then
    echo shar: \"'bm-3d/rot08.xbm'\" unpacked with wrong size!
fi
# end of 'bm-3d/rot08.xbm'
fi
if test -f 'bm-3d/rot09.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bm-3d/rot09.xbm'\"
else
echo shar: Extracting \"'bm-3d/rot09.xbm'\" \(827 characters\)
sed "s/^X//" >'bm-3d/rot09.xbm' <<'END_OF_FILE'
X#define rot09_width 30
X#define rot09_height 30
Xstatic char rot09_bits[] = {
X   0xaa, 0xaa, 0xff, 0x1f, 0x55, 0xd5, 0xff, 0x1f, 0xaa, 0xaa, 0xff, 0x1f,
X   0x55, 0xd5, 0xff, 0x1f, 0xaa, 0xaa, 0xff, 0x1f, 0x55, 0xd5, 0xff, 0x1f,
X   0xaa, 0xaa, 0xff, 0x1f, 0x55, 0xd5, 0xff, 0x1f, 0xaa, 0xaa, 0xff, 0x1f,
X   0x55, 0xd5, 0xff, 0x1f, 0xaa, 0xaa, 0xff, 0x1f, 0x55, 0xd5, 0xff, 0x1f,
X   0xaa, 0xaa, 0xff, 0x1f, 0x55, 0xd5, 0xff, 0x1f, 0xaa, 0xaa, 0xff, 0x1f,
X   0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0x1f,
X   0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0x1f,
X   0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0x1f,
X   0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0x0f,
X   0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 827 -ne `wc -c <'bm-3d/rot09.xbm'`; then
    echo shar: \"'bm-3d/rot09.xbm'\" unpacked with wrong size!
fi
# end of 'bm-3d/rot09.xbm'
fi
if test -f 'bm-3d/rot10.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bm-3d/rot10.xbm'\"
else
echo shar: Extracting \"'bm-3d/rot10.xbm'\" \(827 characters\)
sed "s/^X//" >'bm-3d/rot10.xbm' <<'END_OF_FILE'
X#define rot10_width 30
X#define rot10_height 30
Xstatic char rot10_bits[] = {
X   0xae, 0xaa, 0xff, 0x1f, 0x56, 0xd5, 0xff, 0x1f, 0xae, 0xaa, 0xff, 0x1f,
X   0x56, 0xd5, 0xff, 0x1f, 0xae, 0xaa, 0xff, 0x1f, 0x56, 0xd5, 0xff, 0x1f,
X   0xae, 0xaa, 0xff, 0x1f, 0x56, 0xd5, 0xff, 0x1f, 0xae, 0xaa, 0xff, 0x1f,
X   0x56, 0xd5, 0xff, 0x1f, 0xae, 0xaa, 0xff, 0x1f, 0x56, 0xd5, 0xff, 0x1f,
X   0xae, 0xaa, 0xff, 0x1f, 0x56, 0xd5, 0xff, 0x1f, 0xae, 0xaa, 0xff, 0x1f,
X   0x56, 0xd5, 0xff, 0x1f, 0xae, 0xaa, 0xff, 0x1f, 0x56, 0xd5, 0xff, 0x1f,
X   0xae, 0xaa, 0xff, 0x1f, 0x56, 0xd5, 0xff, 0x1f, 0xae, 0xaa, 0xff, 0x1f,
X   0x56, 0xd5, 0xff, 0x1f, 0xae, 0xaa, 0xff, 0x1f, 0x56, 0xd5, 0xff, 0x1f,
X   0xae, 0xaa, 0xff, 0x1f, 0x56, 0xd5, 0xff, 0x1f, 0xae, 0xaa, 0xff, 0x1f,
X   0x56, 0xd5, 0xff, 0x1f, 0xae, 0xaa, 0xff, 0x1f, 0x56, 0xd5, 0xff, 0x1f};
END_OF_FILE
if test 827 -ne `wc -c <'bm-3d/rot10.xbm'`; then
    echo shar: \"'bm-3d/rot10.xbm'\" unpacked with wrong size!
fi
# end of 'bm-3d/rot10.xbm'
fi
if test -f 'bm-3d/rot11.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bm-3d/rot11.xbm'\"
else
echo shar: Extracting \"'bm-3d/rot11.xbm'\" \(827 characters\)
sed "s/^X//" >'bm-3d/rot11.xbm' <<'END_OF_FILE'
X#define rot11_width 30
X#define rot11_height 30
Xstatic char rot11_bits[] = {
X   0xaa, 0xaa, 0xff, 0x1f, 0x55, 0xd5, 0xff, 0x1f, 0xaa, 0xaa, 0xff, 0x1f,
X   0x55, 0xd5, 0xff, 0x1f, 0xaa, 0xaa, 0xff, 0x1f, 0x55, 0xd5, 0xff, 0x1f,
X   0xaa, 0xaa, 0xff, 0x1f, 0x55, 0xd5, 0xff, 0x1f, 0xaa, 0xaa, 0xff, 0x1f,
X   0x55, 0xd5, 0xff, 0x1f, 0xaa, 0xaa, 0xff, 0x1f, 0x55, 0xd5, 0xff, 0x1f,
X   0xaa, 0xaa, 0xff, 0x1f, 0x55, 0xd5, 0xff, 0x1f, 0xaa, 0xaa, 0xff, 0x1f,
X   0xff, 0xff, 0xff, 0x1f, 0xff, 0xbf, 0xff, 0x1f, 0xff, 0xdf, 0xff, 0x1f,
X   0xff, 0xaf, 0xff, 0x1f, 0xff, 0xd7, 0xff, 0x1f, 0xff, 0xab, 0xff, 0x1f,
X   0xff, 0xd5, 0xff, 0x1f, 0xff, 0xaa, 0xff, 0x1f, 0x7f, 0xd5, 0xff, 0x1f,
X   0xbf, 0xaa, 0xff, 0x1f, 0x5f, 0xd5, 0xff, 0x1f, 0xaf, 0xaa, 0xff, 0x1f,
X   0x57, 0xd5, 0xff, 0x1f, 0xab, 0xaa, 0xff, 0x1f, 0x55, 0xd5, 0xff, 0x1f};
END_OF_FILE
if test 827 -ne `wc -c <'bm-3d/rot11.xbm'`; then
    echo shar: \"'bm-3d/rot11.xbm'\" unpacked with wrong size!
fi
# end of 'bm-3d/rot11.xbm'
fi
if test -f 'bm-3d/rot12.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bm-3d/rot12.xbm'\"
else
echo shar: Extracting \"'bm-3d/rot12.xbm'\" \(827 characters\)
sed "s/^X//" >'bm-3d/rot12.xbm' <<'END_OF_FILE'
X#define rot12_width 30
X#define rot12_height 30
Xstatic char rot12_bits[] = {
X   0xae, 0xaa, 0xff, 0x3f, 0x56, 0xd5, 0xff, 0x1f, 0xae, 0xaa, 0xff, 0x2f,
X   0x56, 0xd5, 0xff, 0x17, 0xae, 0xaa, 0xff, 0x2b, 0x56, 0xd5, 0xff, 0x15,
X   0xae, 0xaa, 0xff, 0x2a, 0x56, 0xd5, 0x7f, 0x15, 0xae, 0xaa, 0xbf, 0x2a,
X   0x56, 0xd5, 0x5f, 0x15, 0xae, 0xaa, 0xaf, 0x2a, 0x56, 0xd5, 0x57, 0x15,
X   0xae, 0xaa, 0xab, 0x2a, 0x56, 0xd5, 0x55, 0x15, 0xae, 0xaa, 0xaa, 0x2a,
X   0x56, 0xd5, 0xff, 0x3f, 0xae, 0xea, 0xff, 0x3f, 0x56, 0xf5, 0xff, 0x3f,
X   0xae, 0xfa, 0xff, 0x3f, 0x56, 0xfd, 0xff, 0x3f, 0xae, 0xfe, 0xff, 0x3f,
X   0x56, 0xff, 0xff, 0x3f, 0xae, 0xff, 0xff, 0x3f, 0xd6, 0xff, 0xff, 0x3f,
X   0xee, 0xff, 0xff, 0x3f, 0xfe, 0xff, 0xff, 0x3f, 0xfc, 0xff, 0xff, 0x3f,
X   0xf8, 0xff, 0xff, 0x3f, 0xf0, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 827 -ne `wc -c <'bm-3d/rot12.xbm'`; then
    echo shar: \"'bm-3d/rot12.xbm'\" unpacked with wrong size!
fi
# end of 'bm-3d/rot12.xbm'
fi
if test -f 'bm-3d/rot13.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bm-3d/rot13.xbm'\"
else
echo shar: Extracting \"'bm-3d/rot13.xbm'\" \(827 characters\)
sed "s/^X//" >'bm-3d/rot13.xbm' <<'END_OF_FILE'
X#define rot13_width 30
X#define rot13_height 30
Xstatic char rot13_bits[] = {
X   0xaa, 0xaa, 0xff, 0x3f, 0x55, 0xd5, 0xff, 0x1f, 0xaa, 0xaa, 0xff, 0x2f,
X   0x55, 0xd5, 0xff, 0x17, 0xaa, 0xaa, 0xff, 0x2b, 0x55, 0xd5, 0xff, 0x15,
X   0xaa, 0xaa, 0xff, 0x2a, 0x55, 0xd5, 0x7f, 0x15, 0xaa, 0xaa, 0xbf, 0x2a,
X   0x55, 0xd5, 0x5f, 0x15, 0xaa, 0xaa, 0xaf, 0x2a, 0x55, 0xd5, 0x57, 0x15,
X   0xaa, 0xaa, 0xab, 0x2a, 0x55, 0xd5, 0x55, 0x15, 0xaa, 0xaa, 0xaa, 0x2a,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 827 -ne `wc -c <'bm-3d/rot13.xbm'`; then
    echo shar: \"'bm-3d/rot13.xbm'\" unpacked with wrong size!
fi
# end of 'bm-3d/rot13.xbm'
fi
if test -f 'bm-3d/rot14.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bm-3d/rot14.xbm'\"
else
echo shar: Extracting \"'bm-3d/rot14.xbm'\" \(827 characters\)
sed "s/^X//" >'bm-3d/rot14.xbm' <<'END_OF_FILE'
X#define rot14_width 30
X#define rot14_height 30
Xstatic char rot14_bits[] = {
X   0xae, 0xaa, 0xff, 0x3f, 0x56, 0xd5, 0xff, 0x1f, 0xae, 0xaa, 0xff, 0x2f,
X   0x56, 0xd5, 0xff, 0x17, 0xae, 0xaa, 0xff, 0x2b, 0x56, 0xd5, 0xff, 0x15,
X   0xae, 0xaa, 0xff, 0x2a, 0x56, 0xd5, 0x7f, 0x15, 0xae, 0xaa, 0xbf, 0x2a,
X   0x56, 0xd5, 0x5f, 0x15, 0xae, 0xaa, 0xaf, 0x2a, 0x56, 0xd5, 0x57, 0x15,
X   0xae, 0xaa, 0xab, 0x2a, 0x56, 0xd5, 0x55, 0x15, 0xae, 0xaa, 0xaa, 0x2a,
X   0x56, 0xd5, 0xff, 0x3f, 0xae, 0xaa, 0xff, 0x3f, 0x56, 0xd5, 0xff, 0x3f,
X   0xae, 0xaa, 0xff, 0x3f, 0x56, 0xd5, 0xff, 0x3f, 0xae, 0xaa, 0xff, 0x3f,
X   0x56, 0xd5, 0xff, 0x3f, 0xae, 0xaa, 0xff, 0x3f, 0x56, 0xd5, 0xff, 0x3f,
X   0xae, 0xaa, 0xff, 0x3f, 0x56, 0xd5, 0xff, 0x3f, 0xae, 0xaa, 0xff, 0x3f,
X   0x56, 0xd5, 0xff, 0x3f, 0xae, 0xaa, 0xff, 0x3f, 0x56, 0xd5, 0xff, 0x3f};
END_OF_FILE
if test 827 -ne `wc -c <'bm-3d/rot14.xbm'`; then
    echo shar: \"'bm-3d/rot14.xbm'\" unpacked with wrong size!
fi
# end of 'bm-3d/rot14.xbm'
fi
if test -f 'bm-3d/rot15.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bm-3d/rot15.xbm'\"
else
echo shar: Extracting \"'bm-3d/rot15.xbm'\" \(827 characters\)
sed "s/^X//" >'bm-3d/rot15.xbm' <<'END_OF_FILE'
X#define rot15_width 30
X#define rot15_height 30
Xstatic char rot15_bits[] = {
X   0xaa, 0xaa, 0xff, 0x3f, 0x55, 0xd5, 0xff, 0x1f, 0xaa, 0xaa, 0xff, 0x2f,
X   0x55, 0xd5, 0xff, 0x17, 0xaa, 0xaa, 0xff, 0x2b, 0x55, 0xd5, 0xff, 0x15,
X   0xaa, 0xaa, 0xff, 0x2a, 0x55, 0xd5, 0x7f, 0x15, 0xaa, 0xaa, 0xbf, 0x2a,
X   0x55, 0xd5, 0x5f, 0x15, 0xaa, 0xaa, 0xaf, 0x2a, 0x55, 0xd5, 0x57, 0x15,
X   0xaa, 0xaa, 0xab, 0x2a, 0x55, 0xd5, 0x55, 0x15, 0xaa, 0xaa, 0xaa, 0x2a,
X   0xff, 0xff, 0xff, 0x3f, 0xff, 0xbf, 0xff, 0x3f, 0xff, 0xdf, 0xff, 0x3f,
X   0xff, 0xaf, 0xff, 0x3f, 0xff, 0xd7, 0xff, 0x3f, 0xff, 0xab, 0xff, 0x3f,
X   0xff, 0xd5, 0xff, 0x3f, 0xff, 0xaa, 0xff, 0x3f, 0x7f, 0xd5, 0xff, 0x3f,
X   0xbf, 0xaa, 0xff, 0x3f, 0x5f, 0xd5, 0xff, 0x3f, 0xaf, 0xaa, 0xff, 0x3f,
X   0x57, 0xd5, 0xff, 0x3f, 0xab, 0xaa, 0xff, 0x3f, 0x55, 0xd5, 0xff, 0x3f};
END_OF_FILE
if test 827 -ne `wc -c <'bm-3d/rot15.xbm'`; then
    echo shar: \"'bm-3d/rot15.xbm'\" unpacked with wrong size!
fi
# end of 'bm-3d/rot15.xbm'
fi
if test -f 'bm-plain/rop15.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bm-plain/rop15.xbm'\"
else
echo shar: Extracting \"'bm-plain/rop15.xbm'\" \(827 characters\)
sed "s/^X//" >'bm-plain/rop15.xbm' <<'END_OF_FILE'
X#define rop15_width 30
X#define rop15_height 30
Xstatic char rop15_bits[] = {
X   0xaf, 0xaa, 0xaa, 0x3a, 0x57, 0x55, 0x55, 0x3d, 0xaf, 0xaa, 0xaa, 0x3a,
X   0x55, 0x55, 0x55, 0x15, 0xaa, 0xaa, 0xaa, 0x2a, 0x55, 0x55, 0x55, 0x15,
X   0xaa, 0xaa, 0xaa, 0x2a, 0x55, 0x55, 0x55, 0x15, 0xaa, 0xaa, 0xaa, 0x2a,
X   0x55, 0x55, 0x55, 0x15, 0xaa, 0xaa, 0xaa, 0x2a, 0x55, 0x55, 0x55, 0x15,
X   0xaa, 0xaa, 0xaa, 0x2a, 0x55, 0x55, 0x55, 0x15, 0xaa, 0x6a, 0xaa, 0x2a,
X   0x55, 0x95, 0x55, 0x15, 0xaa, 0xaa, 0xaa, 0x2a, 0x55, 0x55, 0x55, 0x15,
X   0xaa, 0xaa, 0xaa, 0x2a, 0x55, 0x55, 0x55, 0x15, 0xaa, 0xaa, 0xaa, 0x2a,
X   0x55, 0x55, 0x55, 0x15, 0xaa, 0xaa, 0xaa, 0x2a, 0x55, 0x55, 0x55, 0x15,
X   0xaa, 0xaa, 0xaa, 0x2a, 0x55, 0x55, 0x55, 0x15, 0xaa, 0xaa, 0xaa, 0x2a,
X   0x57, 0x55, 0x55, 0x3d, 0xaf, 0xaa, 0xaa, 0x3a, 0x57, 0x55, 0x55, 0x3d};
END_OF_FILE
if test 827 -ne `wc -c <'bm-plain/rop15.xbm'`; then
    echo shar: \"'bm-plain/rop15.xbm'\" unpacked with wrong size!
fi
# end of 'bm-plain/rop15.xbm'
fi
echo shar: End of archive 3 \(of 3\).
cp /dev/null ark3isdone
MISSING=""
for I in 1 2 3 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 3 archives.
    rm -f ark[1-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
