Path: uunet!zephyr.ens.tek.com!master!saab!billr
From: billr@saab.CNA.TEK.COM (Bill Randle)
Newsgroups: comp.sources.games
Subject: v14i030:  dunnet - emacs-lisp text adventure, Part03/02
Message-ID: <3343@master.CNA.TEK.COM>
Date: 10 Aug 92 03:54:00 GMT
Sender: news@master.CNA.TEK.COM
Lines: 113
Approved: billr@saab.CNA.TEK.COM

Submitted-by: Ron Schnell <rschnell@encore.COM>
Posting-number: Volume 14, Issue 30
Archive-name: dunnet/Part03
Environment: gnu-emacs, emacs-lisp

	[Somehow, the README file got left out of the dunnet post, so here it is.  -br]

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 3 (of 2)."
# Contents:  README
# Wrapped by billr@saab on Sun Aug  9 20:53:02 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'README'\"
else
echo shar: Extracting \"'README'\" \(2801 characters\)
sed "s/^X//" >'README' <<'END_OF_FILE'
XThis is "dunnet", a text adventure game written in emacs-lisp.  I decided it
Xwould be interesting to write an elisp program, so for fun I wrote this
Xone.  Try to play it without looking at the code, for two reasons:
X
X1. It's more fun if you don't cheat.
X2. Since I haven't written much lisp, I'm not confident of the quality
X   of the code.
X
XYou'll notice some really different things about this dungeon.  Without
Xgiving anything away, let's just say that like much lisp code seems to
Xbe, this dungeon is sort of recursive in a way.  A minimal knowledge of
XUNIX, and some internet experience is assumed.
X
XINSTALLATION
X------------
X
XModify the first line of dun-main.el to have a logfile that is writable
Xby all.  You only need to do this if you want to log where everyone died
Xor saved, or won.  You will also need to create this file as an empty file,
Xif it doesn't already exist.
X
XYou can use the 'makefile' to compile everything and encrypt the appropriate
Xportions of dunnet.  You may, of course, just run the code as-is.  In either
Xcase, all of the files must be put in your load-path directory, or they
Xmust be in your current directory when it is run.  If you do
Xrun make, all of the compiled/encrypted files are put in ../bin.
X
X*IMPORTANT*
X
XThere are two ways to run the program:
X
X1. dunnet
X2. dunnet.window
X
XI strongly suggest using the non-window version, because otherwise stuff will
Xscroll off the screen, and you'll need to be scrolling back a lot.  These
Xfiles are Unix shellscripts, and one of them should be put in a normal
Xbin directory.  If you are on a non-unix machine, it should be simple to
Xset up similar script files.
X
XNOTE: It may be necessary to modify the script files in order to run out
X      of the current directory.  If it can't seem to find the load file,
X      change the "-l dun-main" to "-l `pwd`/dun-main" for Unix.  For other
X      platforms, use whatever method appropriate to indicate the complete
X      pathname.
X
XI have included part of crypt.el by Kyle E. Jones.  It is needed in order to
Xencrypt and decrypt save files and one of the data files.
X
Xcrypt.el assumes that you can run the "crypt" command.  If you cannot,
Xedit the file 'save.el', and replace the functions 'compile-save-out'
Xand 'restore' with 'compile-save-out-nocrypt' and 'restore-nocrypt'.  If
Xyou aren't using crypt you will also have to make sure to copy
X'dun-globals.el' to the load-path or current directory if you are
Xusing 'make' to compile.
X
XThis software assumes you have "cl.el" (necessary) and "yow.el" (not critical)
Xin the load-path directory.  These come standard with gnu-emacs.
X
XSome hints and tips.
X
XRead the help carefully.
XSave the game often.
XAn abbreviation for examine is 'x'.
XYou can use 'get all', but not 'drop all'.
X
XQuestions or comments to ronnie@eddie.mit.edu.
X
END_OF_FILE
if test 2801 -ne `wc -c <'README'`; then
    echo shar: \"'README'\" unpacked with wrong size!
fi
# end of 'README'
fi
echo shar: End of archive 3 \(of 2\).
cp /dev/null ark3isdone
MISSING=""
for I in 1 2 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked both archives.
    rm -f ark[1-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
