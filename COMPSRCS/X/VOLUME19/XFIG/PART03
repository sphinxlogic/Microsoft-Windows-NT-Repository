Newsgroups: comp.sources.x
From: envbvs@epb9.lbl.gov (Brian V. Smith)
Subject: v19i115:  xfig - Draw amd manipulate objects in an X-Window, Part03/27
Message-ID: <1993May21.021244.5049@sparky.imd.sterling.com>
X-Md4-Signature: 106d45307c304d89a320139aeb2d45c9
Sender: chris@sparky.imd.sterling.com (Chris Olson)
Organization: Sterling Software
Date: Fri, 21 May 1993 02:12:44 GMT
Approved: chris@sparky.imd.sterling.com

Submitted-by: envbvs@epb9.lbl.gov (Brian V. Smith)
Posting-number: Volume 19, Issue 115
Archive-name: xfig/part03
Environment: X11
Supersedes: xfig: Volume 16, Issue 6-30,39

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 3 (of 27)."
# Contents:  Examples/deltat.fig.uu Examples/filenames.fig.uu
#   Examples/flowchart.fig.uu Examples/gold.fig.uu
#   Examples/network.fig.uu Examples/resistor.fig.uu
#   Examples/splinefill.fig.uu Examples/window2.fig.uu d_arc.c
#   e_convert.c e_copy.c mode.h u_fonts.c u_free.c w_grid.c w_zoom.c
# Wrapped by envbvs@epb9.lbl.gov.lbl.gov on Mon May  3 12:05:46 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'Examples/deltat.fig.uu' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Examples/deltat.fig.uu'\"
else
echo shar: Extracting \"'Examples/deltat.fig.uu'\" \(3611 characters\)
sed "s/^X//" >'Examples/deltat.fig.uu' <<'END_OF_FILE'
Xbegin 444 deltat.fig
XM(T9)1R`R+C$*.#`@,@HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@
XM,S4T(#$V-"`T,SD@,38T(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N
XM,#`P(#`@,"`P"@D@,C`T(#,Q-"`Q,C0@,S$T(#DY.3D@.3DY.0HR(#$@,"`Q
XM("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,C`T(#$S-"`R,3D@,3$Y(#DY.3D@
XM.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,S(T(#,V.2`S
XM-30@,S,Y(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P
XM"@D@,C@Y(#,T.2`S-30@,C@T(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P
XM(#`N,#`P(#`@,"`P"@D@,C@Y(#$V.2`S,SD@,3$Y(#DY.3D@.3DY.0HR(#$@
XM,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,C@Y(#(R.2`S-30@,38T(#DY
XM.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,C@Y(#(X
XM.2`S-30@,C(T(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@
XM,"`P"@D@,C<T(#,V-"`R-CD@,S8Y(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@
XM,"`P(#`N,#`P(#`@,"`P"@D@,C<T(#,P-"`R,#D@,S8Y(#DY.3D@.3DY.0HR
XM(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,C<T(#(T-"`R,#0@,S$T
XM(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,C<T
XM(#$X-"`R,#0@,C4T(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P
XM(#`@,"`P"@D@,C<T(#$R-"`R,#0@,3DT(#DY.3D@.3DY.0HR(#$@,"`Q("TQ
XM(#`@,"`P(#`N,#`P(#`@,"`P"@D@,S4T(#$Q.2`S-30@,S8Y(#DY.3D@.3DY
XM.0HR(#$@,"`R("TQ(#`@,"`P(#`N,#`P(#`@,2`P"@DP(#`@,2XP,#`@-"XP
XM,#`@."XP,#`*"2`Q-#D@,C8Y(#0P.2`R-CD@.3DY.2`Y.3DY"C(@,2`P(#(@
XM+3$@,"`P(#`@,"XP,#`@,"`Q(#`*"3`@,"`Q+C`P,"`T+C`P,"`X+C`P,`H)
XM(#$T.2`S-CD@-#4Y(#,V.2`Y.3DY(#DY.3D*,B`Q(#`@,B`M,2`P(#`@,"`P
XM+C`P,"`P(#$@,`H),"`P(#$N,#`P(#0N,#`P(#@N,#`P"@D@,C`T(#0S-"`R
XM,#0@,3`Y(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P
XM"@D@,C<T(#$Q.2`R-S0@,S8Y(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P
XM(#`N,#`P(#`@,"`P"@D@,C@Y(#$Q.2`R.#D@,S8Y(#DY.3D@.3DY.0HR(#$@
XM,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,C<T(#$U.2`R.#D@,34Y(#DY
XM.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,C<T(#,U
XM-"`R.#D@,S4T(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@
XM,"`P"@D@,C<T(#,S.2`R.#D@,S,Y(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@
XM,"`P(#`N,#`P(#`@,"`P"@D@,C<T(#,R-"`R.#D@,S(T(#DY.3D@.3DY.0HR
XM(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,C<T(#,P.2`R.#D@,S`Y
XM(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,C<T
XM(#(Y-"`R.#D@,CDT(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P
XM(#`@,"`P"@D@,C<T(#(W.2`R.#D@,C<Y(#DY.3D@.3DY.0HR(#$@,"`Q("TQ
XM(#`@,"`P(#`N,#`P(#`@,"`P"@D@,C<T(#(V-"`R.#D@,C8T(#DY.3D@.3DY
XM.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,C<T(#(T.2`R.#D@
XM,C0Y(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@
XM,C<T(#(S-"`R.#D@,C,T(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N
XM,#`P(#`@,"`P"@D@,C<T(#(Q.2`R.#D@,C$Y(#DY.3D@.3DY.0HR(#$@,"`Q
XM("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,C<T(#(P-"`R.#D@,C`T(#DY.3D@
XM.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,C<T(#$X.2`R
XM.#D@,3@Y(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P
XM"@D@,C<T(#$W-"`R.#D@,3<T(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P
XM(#`N,#`P(#`@,"`P"@D@,C<T(#$T-"`R.#D@,30T(#DY.3D@.3DY.0HR(#$@
XM,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,C<T(#$R.2`R.#D@,3(Y(#DY
XM.3D@.3DY.0HT(#`@,"`Q,B`P("TQ(#`@,"XP,#`@-"`W(#0@,3@Y(#$Q-"!T
XM`0HT(#`@,"`Q,B`P("TQ(#`@,"XP,#`@-"`Y(#,@-#4R(#$W,R!I`0HT(#`@
XM,"`Q,B`P("TQ(#`@,"XP,#`@-"`V(#8@,3$T(#,R-"!O`0HT(#`@,"`Q,B`P
XM("TQ(#`@,"XP,#`@-"`W(#0@-#0T(#$V.2!T`0HT(#`@,"`Q,B`P("TQ(#`@
XM,"XP,#`@-"`W(#0@,3`Y(#,Q.2!T`0HT(#$@,"`Q,B`P("TQ(#`@,"XP,#`@
XM-"`V(#8@,S8R(#,X."!O`0HT(#$@,"`Q,B`P("TQ(#`@,"XP,#`@-"`Y(#@@
XM,S4T(#,X-"!2`0HT(#$@,"`Q,B`P("TQ(#`@,"XP,#`@-"`Y(#$T(#(W.2`S
XM.#0@9%(!"C0@,2`P(#$T(#`@+3$@,"`P+C`P,"`T(#(@,R`T,C0@,C8T("X!
XM"C0@,"`P(#$R(#`@+3$@,"`P+C`P,"`T(#D@."`T-30@,S@T(%(!"C0@,2`P
XM(#$R(#`@+3$@,"`P+C`P,"`T(#8@.2`T,C0@,C<T(&T!"C0@,"`P(#$R(#`@
XM+3$@,"`P+C`P,"`T(#D@,30@,C<T(#$P.2!D4@$*-"`P(#`@,3(@,"`M,2`P
XC(#`N,#`P(#0@,3(@-#<@,C4Y(#0W-"!C<F%C:RYF:6<V`0H@
X`
Xend
END_OF_FILE
if test 3611 -ne `wc -c <'Examples/deltat.fig.uu'`; then
    echo shar: \"'Examples/deltat.fig.uu'\" unpacked with wrong size!
fi
# end of 'Examples/deltat.fig.uu'
fi
if test -f 'Examples/filenames.fig.uu' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Examples/filenames.fig.uu'\"
else
echo shar: Extracting \"'Examples/filenames.fig.uu'\" \(4318 characters\)
sed "s/^X//" >'Examples/filenames.fig.uu' <<'END_OF_FILE'
Xbegin 444 filenames.fig
XM(T9)1R`R+C$*.#`@,@HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@
XM,3,Y(#$W.2`Q,SD@,3$T(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N
XM,#`P(#`@,"`P"@D@,3DY(#$W.2`Q.3D@,34Y(#DY.3D@.3DY.0HR(#$@,"`Q
XM("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,CDY(#$X.2`S,30@,C`T(#,Q-"`R
XM,30@-#$T(#(Q-"`T,30@,C,T(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P
XM(#`N,#`P(#`@,"`P"@D@,S(Y(#$X.2`S,30@,C`T(#DY.3D@.3DY.0HR(#$@
XM,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,C8Y(#$X.2`R-30@,C`T(#DY
XM.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,C,Y(#$X
XM.2`R-30@,C`T(#(U-"`R,C0@,CDT(#(R-"`R.30@,C4T(#DY.3D@.3DY.0HR
XM(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,38Y(#$X.2`Q-CD@,C,Y
XM(#(V-"`R,SD@,C8T(#,Q-"`R,30@,S$T(#(Q-"`S,CD@.3DY.2`Y.3DY"C(@
XM,2`P(#$@+3$@,"`P(#`@,"XP,#`@,"`P(#`*"2`X-"`Q.#D@.#0@,S$T(#DY
XM.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,3`Y(#$X
XM.2`Q,#D@,C0Y(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@
XM,"`P"@D@,S$Y(#$X-"`S,SD@,3@T(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@
XM,"`P(#`N,#`P(#`@,"`P"@D@,C@Y(#$X-"`S,#D@,3@T(#DY.3D@.3DY.0HR
XM(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,C4Y(#$X-"`R-SD@,3@T
XM(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,C(Y
XM(#$X-"`R-#D@,3@T(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P
XM(#`@,"`P"@D@,3@Y(#$X-"`R,#D@,3@T(#DY.3D@.3DY.0HR(#$@,"`Q("TQ
XM(#`@,"`P(#`N,#`P(#`@,"`P"@D@,34Y(#$X-"`Q-SD@,3@T(#DY.3D@.3DY
XM.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,3(Y(#$X-"`Q-#D@
XM,3@T(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@
XM.3D@,3@T(#$Q.2`Q.#0@.3DY.2`Y.3DY"C0@,"`R(#$V(#`@+3$@,"`P+C`P
XM,"`T(#$U(#(W(#,T-"`Q.#0@+FEN<`$*-"`P(#(@,38@,"`M,2`P(#`N,#`P
XM(#0@,B`Y(#(Q-"`Q.#0@+0$*-"`P(#(@,38@,"`M,2`P(#`N,#`P(#0@,3$@
XM,3@@-SD@,3@T(&(M`0HT(#`@,"`Q,B`P("TQ(#`@,"XP,#`@-"`Y(#$S,"`Q
XM,#D@,C8Y(#$@/2!+;&5I;F5S($=E8F%U9&4@4%-:`0HT(#`@,"`Q,B`P("TQ
XM(#`@,"XP,#`@-"`Y(#8Y(#$P.2`R.#0@,B`]($AO8VAH875S`0HT(#`@,"`Q
XM,B`P("TQ(#`@,"XP,#`@-"`Y(#$T,"`Q,#D@,CDY(#,@/2!+;&5I;F5S($=E
XM8F%U9&4@4DA&4P$*-"`P(#(@,30@,"`M,2`P(#`N,#`P(#0@,3`@.3`@-#$T
XM(#(U-"!!8G-C:&%L='=E<G1E`0HT(#`@,"`Q,B`P("TQ(#`@,"XP,#`@-"`Y
XM(#$Q-"`T,30@,C<T(#`P(#T@3VAN92!%8V]N;VUI>F5R`0HT(#`@,"`Q,B`P
XM("TQ(#`@,"XP,#`@-"`Y(#$P."`T,30@,C@Y(#$Q(#T@1&EF9BX@16-O;F]M
XM:7IE<@$*-"`P(#`@,3(@,"`M,2`P(#`N,#`P(#0@,3(@-S@@-#$T(#,P.2`V
XM,"`](#$U+#8@9&5G($,!"C0@,"`P(#$R(#`@+3$@,"`P+C`P,"`T(#$R(#<X
XM(#0Q-"`S,C0@-C@@/2`R,"PP(&1E9R!#`0HT(#`@,"`Q,B`P("TQ(#`@,"XP
XM,#`@-"`Q,B`W."`T,30@,S,Y(#<S(#T@,C(L."!D96<@0P$*-"`P(#`@,3(@
XM,"`M,2`P(#`N,#`P(#0@,3(@-S@@-#$T(#,U-"`W."`](#(U+#8@9&5G($,!
XM"C0@,"`P(#$R(#`@+3$@,"`P+C`P,"`T(#$R(#0P(#0Q-"`S-S0@-#0@:THO
XM:V<!"C0@,"`P(#$R(#`@+3$@,"`P+C`P,"`T(#$R(#0P(#0Q-"`S.#D@-#@@
XM:THO:V<!"C0@,"`P(#$R(#`@+3$@,"`P+C`P,"`T(#$R(#0P(#0Q-"`T,#0@
XM-3(@:THO:V<!"C0@,"`R(#$T(#`@+3$@,"`P+C`P,"`T(#$S(#8Y(#(Y-"`R
XM-S0@4F%U;71E;7`!"C0@,"`P(#$R(#`@+3$@,"`P+C`P,"`T(#$R(#<X(#(Y
XM-"`R.30@-S4@/2`R,RPY(&1E9R!#`0HT(#`@,"`Q,B`P("TQ(#`@,"XP,#`@
XM-"`Q,B`W."`R.30@,S`Y(#<X(#T@,C4L-B!D96<@0P$*-"`P(#(@,30@,"`M
XM,2`P(#`N,#`P(#0@,3,@-C0@,C$T(#,T.2!%:6YB875T>7`!"C0@,"`P(#$R
XM(#`@+3$@,"`P+C`P,"`T(#D@,3`X(#(Q-"`S-C0@,2`]($]H;F4@16-O;F]M
XM:7IE<@$*-"`P(#`@,3(@,"`M,2`P(#`N,#`P(#0@,3(@,3(W(#(Q-"`S-SD@
XM,B`](%1E;7!D:69F+B!%8V]N;VUI>F5R`0HT(#`@,"`Q,B`P("TQ(#`@,"XP
XM,#`@-"`Q,B`Q-3$@,C$T(#,Y-"`S(#T@06)S8VAA;'1T96UP($5C;VYO;6EZ
XM97(!"C0@,"`P(#$R(#`@+3$@,"`P+C`P,"`T(#D@,3(S(#(Q-"`T,#D@-"`]
XM($5N=&AD:69F+B!%8V]N;VUI>F5R`0HT(#`@,"`Q,B`P("TQ(#`@,"XP,#`@
XM-"`Y(#$U,2`R,30@-#(T(#4@/2!!8G-C:&%L=&5N=&@N($5C;VYO;6EZ97(!
XM"C0@,"`P(#$R(#`@+3$@,"`P+C`P,"`T(#D@-3$@,3,Y(#$P-"`R(#T@4DA&
XM4P$*-"`P(#`@,3(@,"`M,2`P(#`N,#`P(#0@,3(@.3,@,3,Y(#@Y(#$@/2!#
XM14,@+2!!;FQA9V4!"C0@,"`P(#$R(#`@+3$@,"`P+C`P,"`T(#$R(#$P-B`Q
XM.3D@,30Y(#$@/2!-:70@16YT9F5U8VAT=6YG`0HT(#`@,"`Q,B`P("TQ(#`@
XM,"XP,#`@-"`Q,B`Q,34@,3DY(#$S-"`P(#T@3VAN92!%;G1F975C:'1U;F<!
XM"C0@,"`R(#$T(#`@+3$@,"`P+C`P,"`T(#$P(#,S(#@T(#,S-"!3=&%D=`$*
XM-"`P(#`@,3(@,"`M,2`P(#`N,#`P(#0@.2`V."`X-"`T-30@:"`]($AA;FYO
XM=F5R`0HT(#`@,"`Q,B`P("TQ(#`@,"XP,#`@-"`Q,B`V-B`X-"`T,SD@9R`]
XM($9R86YK9G5R=`$*-"`P(#`@,3(@,"`M,2`P(#`N,#`P(#0@.2`U.2`X-"`T
XM,C0@9B`@/2!0:&]E;FEX`0HT(#`@,"`Q,B`P("TQ(#`@,"XP,#`@-"`Q,B`W
XM,2`X-"`T,#D@92`](%-A;B!$:65G;P$*-"`P(#`@,3(@,"`M,2`P(#`N,#`P
XM(#0@.2`V-2`X-"`S.30@9"`](%)E9"!";'5F9@$*-"`P(#`@,3(@,"`M,2`P
XM(#`N,#`P(#0@,3(@-S<@.#0@,S<Y(&,@/2!,;VYG($)E86-H`0HT(#`@,"`Q
XM,B`P("TQ(#`@,"XP,#`@-"`Y(#@V(#@T(#,V-"!B(#T@3&%K92!#:&%R;&5S
XM`0HT(#`@,"`Q,B`P("TQ(#`@,"XP,#`@-"`Y(#4S(#@T(#,T.2!A(#T@07)C
X%871A`0H@
X`
Xend
END_OF_FILE
if test 4318 -ne `wc -c <'Examples/filenames.fig.uu'`; then
    echo shar: \"'Examples/filenames.fig.uu'\" unpacked with wrong size!
fi
# end of 'Examples/filenames.fig.uu'
fi
if test -f 'Examples/flowchart.fig.uu' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Examples/flowchart.fig.uu'\"
else
echo shar: Extracting \"'Examples/flowchart.fig.uu'\" \(4230 characters\)
sed "s/^X//" >'Examples/flowchart.fig.uu' <<'END_OF_FILE'
Xbegin 444 flowchart.fig
XM(T9)1R`R+C$*.#`@,@HR(#(@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@
XM-#<T(#4T.2`T-S0@-3<Y(#8P-"`U-SD@-C`T(#4T.2`T-S0@-30Y(#DY.3D@
XM.3DY.0HR(#0@,"`R("TQ(#`@,"`P(#`N,#`P(#<@,"`P"@D@,3DY(#$W-"`Q
XM.3D@,C,T(#,Y.2`R,S0@,SDY(#$W-"`Q.3D@,3<T(#DY.3D@.3DY.0HR(#0@
XM,"`R("TQ(#`@,"`P(#`N,#`P(#<@,"`P"@D@,3DY(#(W-"`Q.3D@,S,T(#,Y
XM.2`S,S0@,SDY(#(W-"`Q.3D@,C<T(#DY.3D@.3DY.0HR(#0@,"`R("TQ(#`@
XM,"`P(#`N,#`P(#<@,"`P"@D@,3DY(#,W-"`Q.3D@-#,T(#,Y.2`T,S0@,SDY
XM(#,W-"`Q.3D@,S<T(#DY.3D@.3DY.0HR(#0@,"`R("TQ(#`@,"`P(#`N,#`P
XM(#<@,"`P"@D@,3DY(#4S-"`Q.3D@-3DT(#,Y.2`U.30@,SDY(#4S-"`Q.3D@
XM-3,T(#DY.3D@.3DY.0HR(#0@,"`R("TQ(#`@,"`P(#`N,#`P(#<@,"`P"@D@
XM-3$Y(#$W-"`U,3D@,C,T(#<Q.2`R,S0@-S$Y(#$W-"`U,3D@,3<T(#DY.3D@
XM.3DY.0HR(#0@,"`R("TQ(#`@,"`P(#`N,#`P(#<@,"`P"@D@-3$Y(#(W-"`U
XM,3D@,S,T(#<Q.2`S,S0@-S$Y(#(W-"`U,3D@,C<T(#DY.3D@.3DY.0HR(#0@
XM,"`R("TQ(#`@,"`P(#`N,#`P(#<@,"`P"@D@-3$Y(#,W-"`U,3D@-#,T(#<Q
XM.2`T,S0@-S$Y(#,W-"`U,3D@,S<T(#DY.3D@.3DY.0HR(#$@,"`S("TQ(#`@
XM,"`P(#`N,#`P(#`@,"`P"@D@-#4Y(#$U-"`T-3D@,S4T(#DY.3D@.3DY.0HR
XM(#$@,"`S("TQ(#`@,"`P(#`N,#`P(#`@,2`P"@DP(#`@,BXP,#`@."XP,#`@
XM,38N,#`P"@D@,SDY(#4V-"`T-CD@-38T(#DY.3D@.3DY.0HR(#0@,"`R("TQ
XM(#`@,"`P(#`N,#`P(#<@,"`P"@D@,S4T(#<T(#,U-"`Q,S0@-34T(#$S-"`U
XM-30@-S0@,S4T(#<T(#DY.3D@.3DY.0HR(#(@,"`Q("TQ(#`@,"`P(#`N,#`P
XM(#`@,"`P"@D@,3,T(#4T(#$S-"`X-"`R-C0@.#0@,C8T(#4T(#$S-"`U-"`Y
XM.3DY(#DY.3D*,R`P(#`@,R`M,2`P(#`@,"`P+C`P,"`Q(#`*"3`@,"`R+C`P
XM,"`X+C`P,"`Q-BXP,#`*"2`T-3D@,S4T(#0U.2`S-S0@-#4T(#,X.2`T,SD@
XM-#`T(#0P-"`T,#0@.3DY.2`Y.3DY"C,@,"`P(#,@+3$@,"`P(#`@,"XP,#`@
XM,2`P"@DP(#`@,BXP,#`@."XP,#`@,38N,#`P"@D@-#4Y(#$Y-"`T-3D@,C<T
XM(#0S.2`S,#0@-#`T(#,P-"`Y.3DY(#DY.3D*,R`P(#`@,R`M,2`P(#`@,"`P
XM+C`P,"`Q(#`*"3`@,"`R+C`P,"`X+C`P,"`Q-BXP,#`*"2`T-3D@,3,T(#0U
XM.2`Q-S0@-#,Y(#(P-"`T,#0@,C`T(#DY.3D@.3DY.0HS(#`@,"`S("TQ(#`@
XM,"`P(#`N,#`P(#$@,`H),"`P(#(N,#`P(#@N,#`P(#$V+C`P,`H)(#0U.2`Q
XM,S0@-#4Y(#$W-"`T-SD@,C`T(#4Q-"`R,#0@.3DY.2`Y.3DY"C,@,"`P(#,@
XM+3$@,"`P(#`@,"XP,#`@,2`P"@DP(#`@,BXP,#`@."XP,#`@,38N,#`P"@D@
XM-#4Y(#(Q-"`T-3D@,C<T(#0W.2`S,#0@-3$T(#,P-"`Y.3DY(#DY.3D*,R`P
XM(#`@,R`M,2`P(#`@,"`P+C`P,"`Q(#`*"3`@,"`R+C`P,"`X+C`P,"`Q-BXP
XM,#`*"2`T-3D@,S8Y(#0U.2`S-S0@-#8T(#,X.2`T-SD@-#`T(#4Q-"`T,#0@
XM.3DY.2`Y.3DY"C,@,"`P(#,@+3$@,"`P(#`@,"XP,#`@,2`P"@DP(#`@,BXP
XM,#`@."XP,#`@,38N,#`P"@D@,3DY(#(P-"`Q-#D@,C`T(#$T-"`R,C0@,30T
XM(#(U-"`Q-#0@-#4Y(#$T-"`T-S0@,34T(#0Y-"`Q.30@-#DT(#(R-"`T.30@
XM,C(T(#4R.2`Y.3DY(#DY.3D*,R`P(#`@,R`M,2`P(#`@,"`P+C`P,"`P(#`*
XM"2`Q.3D@,S`T(#$U.2`S,#0@,30T(#,Q.2`Q-#0@,S0T(#DY.3D@.3DY.0HS
XM(#`@,"`S("TQ(#`@,"`P(#`N,#`P(#`@,`H)(#$Y.2`T,#0@,34Y(#0P-"`Q
XM-#0@-#$Y(#$T-"`T-#0@.3DY.2`Y.3DY"C,@,"`P(#,@+3$@,"`P(#`@,"XP
XM,#`@,2`P"@DP(#`@,BXP,#`@."XP,#`@,38N,#`P"@D@-S$Y(#(P-"`W-CD@
XM,C`T(#<W-"`R,C0@-S<T(#(U-"`W-S0@-#0T(#<W-"`T-S0@-S8Y(#0Y-"`W
XM,3D@-#DT(#0S.2`T.30@,S<T(#0Y-"`S-S0@-3(Y(#DY.3D@.3DY.0HS(#`@
XM,"`S("TQ(#`@,"`P(#`N,#`P(#`@,`H)(#<Q.2`S,#0@-S4Y(#,P-"`W-S0@
XM,S$Y(#<W-"`S-#0@.3DY.2`Y.3DY"C,@,"`P(#,@+3$@,"`P(#`@,"XP,#`@
XM,"`P"@D@-S$Y(#0P-"`W-3D@-#`T(#<W-"`T,3D@-S<T(#0U.2`Y.3DY(#DY
XM.3D*,R`P(#`@,R`M,2`P(#`@,"`P+C`P,"`Q(#`*"3`@,"`R+C`P,"`X+C`P
XM,"`Q-BXP,#`*"2`R,S0@.#0@,C,T(#$P-"`R-30@,3`T(#,T.2`Q,#0@.3DY
XM.2`Y.3DY"C0@,"`P(#$T(#`@+3$@,"`P+C`P,"`T(#$S(#(Q-"`W.2`S-"!-
XM;V1U;&4@-"XR("!&;&]W($5Q=6%T:6]N<RX@($QE=F5L(#(N`0HT(#`@,"`Q
XM-"`P("TQ(#`@,"XP,#`@-"`Q,R`T."`R-CD@-3<Y('!E<B!,:6YK`0HT(#`@
XM,"`Q-"`P("TQ(#`@,"XP,#`@-"`Q,"`Q,3`@,C`T(#4U-"`T+C(N-R`@4&QA
XM8V4@4F5S=6QT<P$*-"`P(#`@,30@,"`M,2`P(#`N,#`P(#0@,3`@-#$@-3<T
XM(#0Q.2!%9F9E8W1S`0HT(#`@,"`Q-"`P("TQ(#`@,"XP,#`@-"`Q,R`Q,3D@
XM-3(T(#,Y-"`T+C(N-B`@3&%R9V4@3W!E;FEN9P$*-"`P(#`@,30@,"`M,2`P
XM(#`N,#`P(#0@,3`@,3(P(#(P-"`S.30@-"XR+C4@1FQO=R!#;VYT<F]L;&5R
XM`0HT(#`@,"`Q-"`P("TQ(#`@,"XP,#`@-"`Q,"`V,2`U,C0@,CDT(#0N,BXT
XM("!$=6-T`0HT(#`@,"`Q-"`P("TQ(#`@,"XP,#`@-"`Q,"`U-2`R,#0@,CDT
XM(#0N,BXS("!&86X!"C0@,"`P(#$T(#`@+3$@,"`P+C`P,"`T(#$P(#$S,2`U
XM,C0@,3DT(#0N,BXR("!#;VUB:6YE9"!#<F%C:P$*-"`P(#`@,30@,"`M,2`P
XM(#`N,#`P(#0@,3,@,3$Q(#(P-"`Q.30@-"XR+C$@(%-I;7!L92!#<F%C:P$*
XM-"`P(#`@,30@,"`M,2`P(#`N,#`P(#0@,3`@.#<@-#<Y(#4V.2!!;&P@4&%R
XM86UE=&5R<P$*-"`P(#`@,30@,"`M,2`P(#`N,#`P(#0@,3`@,S`@,S4Y(#DT
XM(#0N,BXP(`$*-"`P(#`@,30@,"`M,2`P(#`N,#`P(#0@,3`@.#<@,3,Y(#<T
XM($%L;"!087)A;65T97)S`0HT(#`@,"`Q-"`P("TQ(#`@,"XP,#`@-"`Q,"`X
XM,R`T,3D@.30@4V5L96-T($UO9'5L90$*-"`P(#`@,30@,"`M,2`P(#`N,#`P
X@(#0@,3,@-S@@-#$Y(#$Q.2!F;W(@3&EN:R!4>7!E`0H@
X`
Xend
END_OF_FILE
if test 4230 -ne `wc -c <'Examples/flowchart.fig.uu'`; then
    echo shar: \"'Examples/flowchart.fig.uu'\" unpacked with wrong size!
fi
# end of 'Examples/flowchart.fig.uu'
fi
if test -f 'Examples/gold.fig.uu' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Examples/gold.fig.uu'\"
else
echo shar: Extracting \"'Examples/gold.fig.uu'\" \(3989 characters\)
sed "s/^X//" >'Examples/gold.fig.uu' <<'END_OF_FILE'
Xbegin 444 gold.fig
XM(T9)1R`R+C$*.#`@,@HR(#(@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@
XM-34T(#0S.2`U-30@-#,Q(#4V,B`T,S$@-38R(#0S.2`U-30@-#,Y(#DY.3D@
XM.3DY.0HR(#(@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,34T(#0S.2`Q
XM-30@-#,Q(#$V,2`T,S$@,38Q(#0S.2`Q-30@-#,Y(#DY.3D@.3DY.0HR(#(@
XM,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@-SD@,C(T(#(S.2`R,C0@,C,Y
XM(#,X-"`W.2`S.#0@-SD@,C(T(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P
XM(#`N,#`P(#`@,"`P"@D@-SD@,C@T(#(S.2`R.#0@.3DY.2`Y.3DY"C(@,2`P
XM(#$@+3$@,"`P(#`@,"XP,#`@,"`P(#`*"2`W.2`R,C0@,C,Y(#(X-"`Y.3DY
XM(#DY.3D*,B`Q(#`@,2`M,2`P(#`@,"`P+C`P,"`P(#`@,`H)(#$W.2`R.#0@
XM,3,Y(#,X-"`Y.3DY(#DY.3D*,B`Q(#`@,R`M,2`P(#`@,"`P+C`P,"`P(#$@
XM,`H),"`P(#,N,#`P(#$R+C`P,"`R-"XP,#`*"2`R.3D@,S`T(#,W.2`S,#0@
XM.3DY.2`Y.3DY"C(@,B`P(#$@+3$@,"`P(#`@,"XP,#`@,"`P(#`*"2`T,3D@
XM,C0T(#8W.2`R-#0@-C<Y(#,T-"`T,3D@,S0T(#0Q.2`R-#0@.3DY.2`Y.3DY
XM"C(@,2`P(#$@+3$@,"`P(#`@,"XP,#`@,"`P(#`*"2`U,3D@,C@R(#4Q.2`S
XM-#0@.3DY.2`Y.3DY"C(@,2`P(#$@+3$@,"`P(#`@,"XP,#`@,"`P(#`*"2`U
XM-SD@,C0T(#4W.2`S,#8@.3DY.2`Y.3DY"C(@,R`P(#$@+3$@,"`P(#(@,"XP
XM,#`@,"`P(#`*"2`W.2`R,C0@,3$Y(#$Y-"`R-SD@,3DT(#(S.2`R,C0@-SD@
XM,C(T(#DY.3D@.3DY.0HR(#,@,"`Q("TQ(#`@,"`R(#`N,#`P(#`@,"`P"@D@
XM,C<Y(#$Y-"`R-SD@,S4T(#(S.2`S.#0@,C,Y(#(R-"`R-SD@,3DT(#DY.3D@
XM.3DY.0HR(#,@,"`Q("TQ(#`@,"`R(#`N,#`P(#`@,"`P"@D@-#$Y(#(T-"`T
XM-3D@,C$T(#<Q.2`R,30@-C<Y(#(T-"`T,3D@,C0T(#DY.3D@.3DY.0HR(#,@
XM,"`Q("TQ(#`@,"`R(#`N,#`P(#`@,"`P"@D@-S$Y(#(Q-"`W,3D@,S$T(#8W
XM.2`S-#0@-C<Y(#(T-"`W,3D@,C$T(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@
XM,"`P(#`N,#`P(#`@,"`P"@D@,3$Y(#$W-"`Q,3D@,3@T(#DY.3D@.3DY.0HR
XM(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,C<Y(#$W-"`R-SD@,3@T
XM(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`Q"@DP(#`@
XM,2XP,#`@-"XP,#`@."XP,#`*"2`Q,3D@,3<Y(#$W.2`Q-SD@.3DY.2`Y.3DY
XM"C(@,2`P(#$@+3$@,"`P(#`@,"XP,#`@,"`P(#$*"3`@,"`Q+C`P,"`T+C`P
XM,"`X+C`P,`H)(#(W.2`Q-SD@,C`Y(#$W.2`Y.3DY(#DY.3D*,B`Q(#`@,2`M
XM,2`P(#`@,"`P+C`P,"`P(#`@,`H)(#4Y(#(R-"`V.2`R,C0@.3DY.2`Y.3DY
XM"C(@,2`P(#$@+3$@,"`P(#`@,"XP,#`@,"`P(#`*"2`U.2`R.#0@-CD@,C@T
XM(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@-3D@
XM,S@T(#8Y(#,X-"`Y.3DY(#DY.3D*,B`Q(#`@,2`M,2`P(#`@,"`P+C`P,"`P
XM(#`@,0H),"`P(#$N,#`P(#0N,#`P(#@N,#`P"@D@-C0@,C(T(#8T(#(T-"`Y
XM.3DY(#DY.3D*,B`Q(#`@,2`M,2`P(#`@,"`P+C`P,"`P(#`@,0H),"`P(#$N
XM,#`P(#0N,#`P(#@N,#`P"@D@-C0@,C@T(#8T(#(V-"`Y.3DY(#DY.3D*,B`Q
XM(#`@,2`M,2`P(#`@,"`P+C`P,"`P(#`@,0H),"`P(#$N,#`P(#0N,#`P(#@N
XM,#`P"@D@-C0@,C@T(#8T(#,R-"`Y.3DY(#DY.3D*,B`Q(#`@,2`M,2`P(#`@
XM,"`P+C`P,"`P(#`@,0H),"`P(#$N,#`P(#0N,#`P(#@N,#`P"@D@-C0@,S@T
XM(#8T(#,T-"`Y.3DY(#DY.3D*,B`Q(#`@,2`M,2`P(#`@,"`P+C`P,"`P(#`@
XM,`H)(#0U.2`Q.30@-#4Y(#(P-"`Y.3DY(#DY.3D*,B`Q(#`@,2`M,2`P(#`@
XM,"`P+C`P,"`P(#`@,`H)(#<Q.2`Q.30@-S$Y(#(P-"`Y.3DY(#DY.3D*,B`Q
XM(#`@,2`M,2`P(#`@,"`P+C`P,"`P(#`@,0H),"`P(#$N,#`P(#0N,#`P(#@N
XM,#`P"@D@-#4Y(#$Y.2`U-S0@,3DY(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@
XM,"`P(#`N,#`P(#`@,"`Q"@DP(#`@,2XP,#`@-"XP,#`@."XP,#`*"2`W,3D@
XM,3DY(#8P-"`Q.3D@.3DY.2`Y.3DY"C(@,2`P(#$@+3$@,"`P(#`@,"XP,#`@
XM,"`P(#`*"2`S.3D@,C0T(#0P.2`R-#0@.3DY.2`Y.3DY"C(@,2`P(#$@+3$@
XM,"`P(#`@,"XP,#`@,"`P(#`*"2`S.3D@,S0T(#0P.2`S-#0@.3DY.2`Y.3DY
XM"C(@,2`P(#$@+3$@,"`P(#`@,"XP,#`@,"`P(#$*"3`@,"`Q+C`P,"`T+C`P
XM,"`X+C`P,`H)(#0P-"`R-#0@-#`T(#(X-"`Y.3DY(#DY.3D*,B`Q(#`@,2`M
XM,2`P(#`@,"`P+C`P,"`P(#`@,0H),"`P(#$N,#`P(#0N,#`P(#@N,#`P"@D@
XM-#`T(#,T-"`T,#0@,S`T(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N
XM,#`P(#`@,"`P"@D@-#$Y(#(T-"`V-SD@,S0T(#DY.3D@.3DY.0HR(#$@,"`Q
XM("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@-3<Y(#(T-"`V,3D@,C$T(#DY.3D@
XM.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,C,Y(#(X-"`R
XM-SD@,C4T(#DY.3D@.3DY.0HT(#`@,"`Q,B`P("TQ(#`@,"XP,#`@-"`Y(#(Y
XM(#4S.2`T,SD@-C4@("`@(@$*-"`P(#`@,3(@,"`M,2`P(#`N,#`P(#0@.2`R
XM.2`Q,SD@-#,Y(#8T("`@("(!"C0@,"`P(#$R(#`@+3$@,"`P+C`P,"`T(#D@
XM,3$@-3D@,C4Y(#,B`0HT(#`@,"`Q,B`P("TQ(#`@,"XP,#`@-"`Y(#$Q(#4Y
XM(#,S.2`U(@$*-"`P(#`@,3(@,"`M,2`P(#`N,#`P(#0@.2`Q-R`U-SD@,C`T
XM(#$S(@$*-"`P(#`@,3(@,"`M,2`P(#`N,#`P(#0@.2`Q,2`S.3D@,CDY(#4B
XM`0HT(#`@,"`Q,B`P("TQ(#`@,"XP,#`@-"`Y(#$Q(#$X.2`Q.#0@."(!"C0@
XM,2`P(#$X(#`@+3$@,"`P+C`P,"`T(#$W(#,U."`S-#D@,3(T($AO=R!T;R!C
XI<F5A=&4@;6%T=&5R("AU<VEN9R!G;VQD(&%S(&%N(&5X86UP;&4I`0IT
X`
Xend
END_OF_FILE
if test 3989 -ne `wc -c <'Examples/gold.fig.uu'`; then
    echo shar: \"'Examples/gold.fig.uu'\" unpacked with wrong size!
fi
# end of 'Examples/gold.fig.uu'
fi
if test -f 'Examples/network.fig.uu' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Examples/network.fig.uu'\"
else
echo shar: Extracting \"'Examples/network.fig.uu'\" \(3988 characters\)
sed "s/^X//" >'Examples/network.fig.uu' <<'END_OF_FILE'
Xbegin 444 network.fig
XM(T9)1R`R+C$*.#`@,@HQ(#,@,"`Q("TQ(#`@,"`R,2`P+C`P,"`Q(#`N,#`P
XM(#(W.2`Q.2`S(#,@,C<Y(#$Y(#(X,2`R,`HQ(#,@,"`Q("TQ(#`@,"`R,2`P
XM+C`P,"`Q(#`N,#`P(#0S.2`Q.2`S(#,@-#,Y(#$Y(#0T,2`R,`HQ(#,@,"`Q
XM("TQ(#`@,"`R,2`P+C`P,"`Q(#`N,#`P(#4Y.2`Q.2`S(#,@-3DY(#$Y(#8P
XM,2`R,`HQ(#,@,"`Q("TQ(#`@,"`R,2`P+C`P,"`Q(#`N,#`P(#0S.2`Q-3D@
XM,R`S(#0S.2`Q-3D@-#0Q(#$V,`HQ(#,@,"`Q("TQ(#`@,"`R,2`P+C`P,"`Q
XM(#`N,#`P(#(W.2`R.3D@,R`S(#(W.2`R.3D@,C@Q(#,P,`HQ(#,@,"`Q("TQ
XM(#`@,"`R,2`P+C`P,"`Q(#`N,#`P(#0S.2`R.3D@,R`S(#0S.2`R.3D@-#0Q
XM(#,P,`HQ(#,@,"`Q("TQ(#`@,"`R,2`P+C`P,"`Q(#`N,#`P(#4Y.2`R.3D@
XM,R`S(#4Y.2`R.3D@-C`Q(#,P,`HQ(#,@,"`Q("TQ(#`@,"`R,2`P+C`P,"`Q
XM(#`N,#`P(#(W.2`T-SD@,R`S(#(W.2`T-SD@,C@Q(#0T,`HQ(#,@,"`Q("TQ
XM(#`@,"`R,2`P+C`P,"`Q(#`N,#`P(#0S.2`T-SD@,R`S(#0S.2`T-SD@-#0Q
XM(#0T,`HQ(#,@,"`Q("TQ(#`@,"`R,2`P+C`P,"`Q(#`N,#`P(#4Y.2`T-SD@
XM,R`S(#4Y.2`T-SD@-C`Q(#0T,`HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@
XM,"`P"@D@,C<Y(#$Q.2`R-SD@,S,Y(#DY.3D@.3DY.0HR(#(@,"`Q("TQ(#`@
XM,"`P(#`N,#`P(#`@,"`P"@D@,C8Y(#4Y(#(X.2`U.2`R.#D@,3$Y(#(V.2`Q
XM,3D@,C8Y(#4Y(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@
XM,"`P"@D@,C<Y(#$Y(#(W.2`U.2`Y.3DY(#DY.3D*,B`Q(#`@,2`M,2`P(#`@
XM,"`P+C`P,"`P(#`@,`H)(#0S.2`Q.2`T,SD@-3D@.3DY.2`Y.3DY"C(@,B`P
XM(#$@+3$@,"`P(#`@,"XP,#`@,"`P(#`*"2`T,CD@-3D@-#0Y(#4Y(#0T.2`Q
XM,3D@-#(Y(#$Q.2`T,CD@-3D@.3DY.2`Y.3DY"C(@,2`P(#$@+3$@,"`P(#`@
XM,"XP,#`@,"`P(#`*"2`T,SD@,3$Y(#0S.2`Q-3D@.3DY.2`Y.3DY"C(@,2`P
XM(#$@+3$@,"`P(#`@,"XP,#`@,"`P(#`*"2`U.3D@,3$Y(#4Y.2`Q-3D@.3DY
XM.2`Y.3DY"C(@,B`P(#$@+3$@,"`P(#`@,"XP,#`@,"`P(#`*"2`U.#D@-3D@
XM-C`Y(#4Y(#8P.2`Q,3D@-3@Y(#$Q.2`U.#D@-3D@.3DY.2`Y.3DY"C(@,2`P
XM(#$@+3$@,"`P(#`@,"XP,#`@,"`P(#`*"2`U.3D@,3D@-3DY(#4Y(#DY.3D@
XM.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@-#,Y(#(U.2`T
XM,SD@,CDY(#DY.3D@.3DY.0HR(#(@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P
XM"@D@-#(Y(#$Y.2`T-#D@,3DY(#0T.2`R-3D@-#(Y(#(U.2`T,CD@,3DY(#DY
XM.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@-#,Y(#$U
XM.2`T,SD@,3DY(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@
XM,"`P"@D@,C<Y(#(Y.2`S,3D@,CDY(#DY.3D@.3DY.0HR(#(@,"`Q("TQ(#`@
XM,"`P(#`N,#`P(#`@,"`P"@D@,S$Y(#,P.2`S,3D@,C@Y(#,W.2`R.#D@,S<Y
XM(#,P.2`S,3D@,S`Y(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P
XM(#`@,"`P"@D@,S<Y(#(Y.2`T,SD@,CDY(#DY.3D@.3DY.0HR(#$@,"`Q("TQ
XM(#`@,"`P(#`N,#`P(#`@,"`P"@D@-#,Y(#(Y.2`T.3D@,CDY(#DY.3D@.3DY
XM.0HR(#(@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@-#DY(#,P.2`T.3D@
XM,C@Y(#4U.2`R.#D@-34Y(#,P.2`T.3D@,S`Y(#DY.3D@.3DY.0HR(#$@,"`Q
XM("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@-34Y(#(Y.2`U.3D@,CDY(#DY.3D@
XM.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@-#,Y(#0S.2`T
XM,SD@-#<Y(#DY.3D@.3DY.0HR(#(@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P
XM"@D@-#(T(#,W.2`T,C0@-#,Y(#0U-"`T,SD@-#4T(#,W.2`T,C0@,S<Y(#DY
XM.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@-#,Y(#(Y
XM.2`T,SD@,S<Y(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@
XM,"`P"@D@-3DY(#$U.2`U.3D@,S<Y(#DY.3D@.3DY.0HR(#(@,"`Q("TQ(#`@
XM,"`P(#`N,#`P(#`@,"`P"@D@-3@Y(#,W.2`V,#D@,S<Y(#8P.2`T,SD@-3@Y
XM(#0S.2`U.#D@,S<Y(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P
XM(#`@,"`P"@D@-3DY(#0S.2`U.3D@-#<Y(#DY.3D@.3DY.0HR(#$@,"`Q("TQ
XM(#`@,"`P(#`N,#`P(#`@,"`P"@D@,C<Y(#,S.2`R-SD@,S<Y(#DY.3D@.3DY
XM.0HR(#(@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,C8Y(#,W.2`R.#D@
XM,S<Y(#(X.2`T,SD@,C8Y(#0S.2`R-CD@,S<Y(#DY.3D@.3DY.0HR(#$@,"`Q
XM("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,C<Y(#0S.2`R-SD@-#<Y(#DY.3D@
XM.3DY.0HT(#`@,"`Q,B`P("TQ(#`@,"XP,#`@-"`Y(#$U(#4V-2`T,30@1#D!
XM"C0@,"`P(#$R(#`@+3$@,"`P+C`P,"`T(#D@,34@-#`Q(#0Q-"!$.`$*-"`P
XM(#`@,3(@,"`M,2`P(#`N,#`P(#0@.2`Q-2`R-#4@-#$T($0W`0HT(#`@,"`Q
XM,B`P("TQ(#`@,"XP,#`@-"`Y(#0@,C8R(#,P,B!)`0HT(#`@,"`Q,B`P("TQ
XM(#`@,"XP,#`@-"`Y(#$R(#8P.2`S,#(@24E)`0HT(#`@,"`Q,B`P("TQ(#`@
XM,"XP,#`@-"`Y(#$U(#4R-2`R-SD@1#8!"C0@,"`P(#$R(#`@+3$@,"`P+C`P
XM,"`T(#D@,3,@-#0Y(#(X.2!)5@$*-"`P(#`@,3(@,"`M,2`P(#`N,#`P(#0@
XM.2`Q-2`S-#0@,C<Y($0T`0HT(#`@,"`Q,B`P("TQ(#`@,"XP,#`@-"`Y(#$U
XM(#0P-2`R,SD@1#4!"C0@,"`P(#$R(#`@+3$@,"`P+C`P,"`T(#D@."`T-#D@
XM,38S($E)`0HT(#`@,"`Q,B`P("TQ(#`@,"XP,#`@-"`Y(#$U(#4V-2`Y-"!$
XM,P$*-"`P(#`@,3(@,"`M,2`P(#`N,#`P(#0@.2`Q-2`T,#4@.30@1#(!"C0@
XF,"`P(#$R(#`@+3$@,"`P+C`P,"`T(#D@,34@,C0U(#DT($0Q`0H@
X`
Xend
END_OF_FILE
if test 3988 -ne `wc -c <'Examples/network.fig.uu'`; then
    echo shar: \"'Examples/network.fig.uu'\" unpacked with wrong size!
fi
# end of 'Examples/network.fig.uu'
fi
if test -f 'Examples/resistor.fig.uu' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Examples/resistor.fig.uu'\"
else
echo shar: Extracting \"'Examples/resistor.fig.uu'\" \(3585 characters\)
sed "s/^X//" >'Examples/resistor.fig.uu' <<'END_OF_FILE'
Xbegin 444 resistor.fig
XM(T9)1R`R+C$*.#`@,@HQ(#,@,"`Q("TQ(#`@,"`P(#`N,#`P(#$@,"XP,#`@
XM,C0Y(#$T.2`Q,2`Q,2`R-#D@,30Y(#(U.2`Q-30*,2`T(#`@,2`M,2`P(#`@
XM,C$@,"XP,#`@,2`P+C`P,"`R-#D@,C(Y(#,@,R`R-#<@,C(Y(#(U,B`R,CD*
XM,2`T(#`@,2`M,2`P(#`@,C$@,"XP,#`@,2`P+C`P,"`Q-3D@,C(Y(#,@,R`Q
XM-3<@,C(Y(#$V,B`R,CD*,2`T(#`@,2`M,2`P(#`@,C$@,"XP,#`@,2`P+C`P
XM,"`S,SD@,C(Y(#,@,R`S,S<@,C(Y(#,T,B`R,CD*,2`T(#`@,2`M,2`P(#`@
XM,C$@,"XP,#`@,2`P+C`P,"`R-#D@-SD@,R`S(#(T-R`W.2`R-3(@-SD*,B`Q
XM(#`@,2`M,2`P(#`@,"`P+C`P,"`P(#`@,`H)(#,W-B`S,3D@,S@Q(#,Q.2`Y
XM.3DY(#DY.3D*,B`Q(#`@,2`M,2`P(#`@,"`P+C`P,"`P(#`@,`H)(#,W-"`S
XM,30@,S@T(#,Q-"`Y.3DY(#DY.3D*,B`Q(#`@,2`M,2`P(#`@,"`P+C`P,"`P
XM(#`@,`H)(#,V.2`S,#D@,S@Y(#,P.2`Y.3DY(#DY.3D*,B`Q(#`@,2`M,2`P
XM(#`@,"`P+C`P,"`P(#`@,`H)(#$P-"`S,#D@,3(T(#,P.2`Y.3DY(#DY.3D*
XM,B`Q(#`@,2`M,2`P(#`@,"`P+C`P,"`P(#`@,`H)(#$P.2`S,30@,3$Y(#,Q
XM-"`Y.3DY(#DY.3D*,B`Q(#`@,2`M,2`P(#`@,"`P+C`P,"`P(#`@,`H)(#$Q
XM,2`S,3D@,3$V(#,Q.2`Y.3DY(#DY.3D*,B`Q(#`@,B`M,2`P(#`@,"`P+C`P
XM,"`P(#`@,0H),"`P(#$N,#`P(#0N,#`P(#@N,#`P"@D@,C0Y(#$T-"`R-#D@
XM,34V(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@
XM,S,Y(#<Y(#,S.2`Q,C0@,S,T(#$R.2`S-#0@,3,T(#,S-"`Q,SD@,S0T(#$T
XM-"`S,S0@,30Y(#,T-"`Q-30*"2`S,S0@,34Y(#,T-"`Q-C0@,S,Y(#$V.2`S
XM,SD@,C(Y(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P
XM"@D@,34Y(#<Y(#,S.2`W.2`Y.3DY(#DY.3D*,B`Q(#`@,2`M,2`P(#`@,"`P
XM+C`P,"`P(#`@,`H)(#(T.2`W.2`R-#D@,3,Y(#DY.3D@.3DY.0HR(#$@,"`Q
XM("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,C0Y(#$U.2`R-#D@,C(Y(#DY.3D@
XM.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,34Y(#(R.2`Q
XM-3D@,C@Y(#(R.2`R.#D@,C,T(#(Y-"`R,SD@,C@T(#(T-"`R.30@,C0Y(#(X
XM-"`R-30@,CDT"@D@,C4Y(#(X-"`R-C0@,CDT(#(V.2`R.#0@,C<T(#(X.2`S
XM,SD@,C@Y(#,S.2`R,CD@.3DY.2`Y.3DY"C(@,2`P(#$@+3$@,"`P(#`@,"XP
XM,#`@,"`P(#`*"2`Q-3D@,C(Y(#$W.2`R,CD@,3@T(#(S-"`Q.#D@,C(T(#$Y
XM-"`R,S0@,3DY(#(R-"`R,#0@,C,T(#(P.2`R,C0*"2`R,30@,C,T(#(Q.2`R
XM,C0@,C(T(#(R.2`R-#D@,C(Y(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P
XM(#`N,#`P(#`@,"`P"@D@,S,Y(#(R.2`S-SD@,C(Y(#,W.2`R-#D@,S<T(#(U
XM-"`S.#0@,C4Y(#,W-"`R-C0@,S@T(#(V.2`S-S0@,C<T"@D@,S@T(#(W.2`S
XM-S0@,C@T(#,X-"`R.#D@,S<Y(#(Y-"`S-SD@,S`Y(#DY.3D@.3DY.0HR(#$@
XM,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,34Y(#(R.2`Q,30@,C(Y(#$Q
XM-"`R-#D@,3`Y(#(U-"`Q,3D@,C4Y(#$P.2`R-C0@,3$Y(#(V.2`Q,#D@,C<T
XM"@D@,3$Y(#(W.2`Q,#D@,C@T(#$Q.2`R.#D@,3$T(#(Y-"`Q,30@,S`Y(#DY
XM.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,34Y(#<Y
XM(#$U.2`Q,C0@,34T(#$R.2`Q-C0@,3,T(#$U-"`Q,SD@,38T(#$T-"`Q-30@
XM,30Y(#$V-"`Q-30*"2`Q-30@,34Y(#$V-"`Q-C0@,34Y(#$V.2`Q-3D@,C(Y
XM(#DY.3D@.3DY.0HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,C0Y
XM(#(R.2`R-CD@,C(Y(#(W-"`R,S0@,C<Y(#(R-"`R.#0@,C,T(#(X.2`R,C0@
XM,CDT(#(S-"`R.3D@,C(T"@D@,S`T(#(S-"`S,#D@,C(T(#,Q-"`R,CD@,S,Y
XM(#(R.2`Y.3DY(#DY.3D*-"`Q(#`@,38@,"`M,2`P(#`N,#`P(#0@,34@,C0R
XM(#(T-"`S-2!"=6EL9&EN9R!!:7)F;&]W(%)E<VES=&EV92!.971W;W)K`0HT
XM(#$@,"`Q,B`P("TQ(#`@,"XP,#`@-"`Y(#@@,C@T(#(U-"!2`0HT(#`@,"`Q
XM,"`P("TQ(#`@,"XP,#`@-"`W(#,Q(#(X.2`R-3D@<F5T=7)N,0$*-"`Q(#`@
XM,3(@,"`M,2`P(#`N,#`P(#0@.2`X(#$X-"`R-30@4@$*-"`P(#`@,3`@,"`M
XM,2`P(#`N,#`P(#0@-R`S,R`Q.#D@,C4Y(')E='5R;B`R`0HT(#$@,"`Q,B`P
XM("TQ(#`@,"XP,#`@-"`Y(#@@,SDY(#(V.2!2`0HT(#`@,"`Q,"`P("TQ(#`@
XM,"XP,#`@-"`Y(#0Q(#0P-"`R-S0@96YV96QO<&4Q`0HT(#$@,"`Q,B`P("TQ
XM(#`@,"XP,#`@-"`Y(#@@,S8T(#$T.2!2`0HT(#`@,"`Q,"`P("TQ(#`@,"XP
XM,#`@-"`Y(#,S(#,V.2`Q-30@<W5P<&QY,0$*-"`Q(#`@,3(@,"`M,2`P(#`N
XM,#`P(#0@.2`X(#DY(#$T.2!2`0HT(#`@,"`Q,"`P("TQ(#`@,"XP,#`@-"`Y
XM(#,S(#$P-"`Q-30@<W5P<&QY,@$*-"`P(#`@,3`@,"`M,2`P(#`N,#`P(#0@
XM.2`T,2`T.2`R-S0@96YV96QO<&4R`0HT(#$@,"`Q,B`P("TQ(#`@,"XP,#`@
XM-"`Y(#@@-#0@,C8Y(%(!"C0@,2`P(#$R(#`@+3$@,"`P+C`P,"`T(#D@."`R
XM,CD@,S$Y(%(!"C0@,"`P(#$P(#`@+3$@,"`P+C`P,"`T(#<@,SD@,C,T(#,R
X--"!I;G1E<GIO;F4!"B`P
X`
Xend
END_OF_FILE
if test 3585 -ne `wc -c <'Examples/resistor.fig.uu'`; then
    echo shar: \"'Examples/resistor.fig.uu'\" unpacked with wrong size!
fi
# end of 'Examples/resistor.fig.uu'
fi
if test -f 'Examples/splinefill.fig.uu' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Examples/splinefill.fig.uu'\"
else
echo shar: Extracting \"'Examples/splinefill.fig.uu'\" \(3537 characters\)
sed "s/^X//" >'Examples/splinefill.fig.uu' <<'END_OF_FILE'
Xbegin 444 splinefill.fig
XM(T9)1R`R+C$*.#`@,@HS(#,@,2`Q("TQ(#`@,"`P(#`N,#`P(#`@,`H)(#$T
XM,"`U-38@,C,S(#4U-"`R,3@@-3(U(#$U."`T-S0@,3<Q(#4P,R`S,SD@-#,X
XM(#(T."`S,S,@,S`Q(#(W,"`S.#(@,C0X(#(W,B`R,S4@,C8S(#0U-B`R-C0@
XM-C`Q(#$W.2`V,3`@,30P(#4U-B`Y.3DY(#DY.3D*"2`Q,S(N-#$Q(#4W,2XR
XM-#0@,34P+C4Y."`U,S0N-S$R(#(Q.2XQ-S<@-3<W+C(W,B`R,S<N.#4R(#4T
XM-2XX,S(*"2`R,C(N.#0P(#4S,2XP.#<@,C`V+C,R-B`U,3`N,S(P(#$V-2XV
XM-#$@-#8X+C(V-"`Q-30N.3$V(#0W-BXS,34*"2`Q-3DN.#8T(#0Y."XT,C$@
XM,C,T+C$R,2`U,C@N.34S(#,R-2XR-#0@-#DS+C,Q,"`S-#DN-C$Q(#,Y-2XS
XM,S<*"2`R-#@N,S8W(#,X,BXY-38@,C0W+C<X,R`S,#,N-#`P(#(X,RXT-3,@
XM,C@Q+C(P-2`S,3@N.#@Y(#(U."XU-S<*"2`S.#(N-C0W(#(U-BXW-3D@,S@Q
XM+C$T-B`R,S8N-#0Q(#,P,RXT.#D@,C`X+C$T,"`R,#DN,3(Q(#(X."XV,S8*
XM"2`R-C,N.#4Q(#0P-2XU.#4@,C8R+C0T,B`T.#DN,#4Q(#(Y.2XW-C8@-38P
XM+CDV.2`R-#(N.3$W(#8R-"XU.3<*"2`R,#(N-3<Q(#8R,"XU,C,@,38P+C8S
XM,2`V,#$N-SDY(#$S,BXT,3$@-3<Q+C(T-"`Q-3`N-3DX(#4S-"XW,3(*,R`R
XM(#$@,2`M,2`P(#`@,"`P+C`P,"`P(#`*"2`Q-S0@,C$@,S4@-3@@,30V(#DY
XM(#8Y(#$R,R`Q,3(@,30W(#$P-"`U."`R-38@,C<@,C<S(#$T,"`Q,S@@,C,U
XM(#$X,2`S-S0@.3DY.2`Y.3DY"@D@,"XP,#`@,"XP,#`@-S`N-3@Y(#,P+C@T
XM,"`S-2XX,SD@-#`N,#DP(#,T+C`W.2`W-RXV-#4*"2`Q-#8N-30Q(#<X+C`T
XM,B`Q-#4N-C,Q(#$Q,RXR.#4@-S`N.#`W(#$P-2XU.3`@-C<N.#DV(#$S,RXV
XM,S`*"2`Q,#$N,S@W(#$U,RXX.#@@,3,Q+C(U."`Q,S0N-3`Q(#@T+C,W,B`X
XM-"XS-C0@,3,X+C`W-B`Q,BXR,S$*"2`R,#<N.#4S("TV+C8V,2`R.3$N-#8V
XM(#4Q+C<Y-2`R.#8N.3(U(#$P-RXT,S@@,C4R+C@X,R`Q.#<N,#,Y"@D@,34U
XM+C<T.2`Q.#(N.3<S(#$R-BXR-C<@,C8Y+C,Y,R`Q,S<N,#$W(#,P-"XQ-#,@
XM,"XP,#`@,"XP,#`*,R`R(#$@,R`M,2`P(#`@,"`P+C`P,"`P(#`*"2`V-3(@
XM,S4@-3DX(#0X(#8S,2`Y."`V,#4@,3$R(#4X,"`Q-C`@-C,U(#(R-"`V-C0@
XM,CDQ(#8S-B`S,SD@-C(Y(#(P,B`U,3`@,38V(#8T,"`S,C(@-3@P(#0W."`U
XM,#4@-38U(#8T.2`U.3,@-S,V(#4W.2`W.#`@-#,W(#<P,R`R.34@-S0P(#$R
XM-2`W-C4@.3<@-S<P(#(S,"`V,S<@,CDX(#8R-B`S-#@@-S,T(#0R,B`Y.3DY
XM(#DY.3D*"2`P+C`P,"`P+C`P,"`V,38N,S(W(#,R+C4P."`V,#(N.#(W(#,U
XM+C<U."`U.3$N,#4X(#8U+C8P-@H)(#8S-BXT,S`@-S8N-#,Y(#8R."XS,C,@
XM,3`X+C8R."`V,3`N,C(X(#$P-BXW,#`@-3DU+C0Q.2`Q,C$N-S$T"@D@-3<X
XM+C`P,"`Q-#(N-C<P(#4X,RXQ,3@@,3@W+C`R,B`V,C0N-3(R(#(P-RXR-3@@
XM-C0T+C`V-2`R,S@N-#@T"@D@-C8U+C(U,B`R-S`N,#@S(#8V,RXP-#<@,S`V
XM+CDR,2`V-#0N-#@P(#,T,2XP-C(@-C$U+C`V-R`S,S,N.3$Q"@D@-C4V+C<R
XM-B`R,S<N-#(X(#8P,RXX-S(@,38Y+C@Y,2`U,C`N.#,W(#$T.2XV,S4@-#DR
XM+C,P,"`Q.3(N-S(Y"@D@-C(Y+CDT.2`R-C$N,3@X(#8T."XR-S,@,S<R+C`U
XM-"`V,#`N,C4Q(#0T-"XQ-C(@-38V+C`X,R`U,#$N,C4U"@D@-#DT+C8Q-R`U
XM,S4N,#0V(#4Q."XR-C`@-C`S+C(U-2`V,30N,S0R(#4Y,BXT,S<@-C8Y+C@Q
XM.2`U.3,N,S,X"@D@-S$U+C,T,"`U.38N.3,V(#<W,"XX-30@-30X+C<T,B`W
XM.#,N.30Y(#0W-RXP.#4@-S<U+C<P.2`S.3,N-#0T"@D@-S`X+CDV-2`S,S8N
XM.3,U(#8Y-BXU-S8@,C0Y+C@S-"`W,C`N-38T(#$V,RXQ,30@-S0T+C$Y,R`Q
XM,38N-S<W"@D@-S4W+C<S-R`Y-"XS.#4@-SDP+C<U,B`Q,#8N,C<S(#<Y,2XQ
XM-#8@,3DS+CDS,R`W-#8N,C8W(#(W,"XT.#`*"2`V-C(N-3DQ(#(V-"XX-#4@
XM-C(X+C(R.2`S,#DN,S8S(#8Q.2XY,S@@,S,R+C8X,"`V,S<N-C(V(#,W-RXS
XM.#(*"2`V-C0N-C(V(#,Y-2XX.#(@,"XP,#`@,"XP,#`*,R`Q(#$@,2`M,2`P
XM(#`@,"`P+C`P,"`P(#`*"2`T-3(@,38X(#0Q,R`R-C@@-3`V(#(X-"`S-C,@
XM,S8X(#,P.2`S,S<@-#0U(#(Q,R`U.3<@,C4W(#4P-2`Q-S@@,S8P(#DV(#0U
XM,B`Q-C@@.3DY.2`Y.3DY"C,@,2`P(#$@+3$@,2`P(#$X(#`N,#`P(#`@,`H)
XM(#$T-B`Q,SD@.3D@,C$P(#(U-"`S,34@,3DR(#,W-2`Q,SD@-#0V(#@T(#,W
XM,"`R,#@@,S4Y(#,S-"`S,34@,C@Y(#$V,R`Q-#8@,3,Y(#DY.3D@.3DY.0HS
XM(#$@,2`Q("TQ(#$@,"`W(#`N,#`P(#`@,`H)(#0S-R`U,S$@,C<X(#4P-"`R
XM-3,@-3(S(#,X-R`U-#8@,S8X(#4Q,2`S-C4@,SDY(#0V,B`T,SD@,S<S(#0X
XM."`R,S(@-#DT(#(X,"`V,#8@-#8R(#4V-2`T,C8@-#8S(#,S-R`S.#8@-3,Y
XM(#,P-B`V,#`@,C<X(#0P-B`Q,SD@-#(U(#,U-2`R-3D@-3$P(#0X-"`U-C4@
XM-#$Y(#4P-R`S-3$@,S`Y(#4U-"`R,#<@-#,W(#4S,2`Y.3DY(#DY.3D*,R`P
XM(#(@,2`M,2`Q(#`@,R`P+C`P,"`P(#`*"2`V,C$@-#0X(#4Q,R`U,#@@-3DW
X7(#4V,2`W,SD@-#DW(#DY.3D@.3DY.0H*
X`
Xend
END_OF_FILE
if test 3537 -ne `wc -c <'Examples/splinefill.fig.uu'`; then
    echo shar: \"'Examples/splinefill.fig.uu'\" unpacked with wrong size!
fi
# end of 'Examples/splinefill.fig.uu'
fi
if test -f 'Examples/window2.fig.uu' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Examples/window2.fig.uu'\"
else
echo shar: Extracting \"'Examples/window2.fig.uu'\" \(3522 characters\)
sed "s/^X//" >'Examples/window2.fig.uu' <<'END_OF_FILE'
Xbegin 444 window2.fig
XM(T9)1R`R+C$*.#`@,@HU(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,2`P(#(N
XM,3$Y(#(R,2XS-C<@-#D@,3$Y(#DY(#$V-"`Q,30@,C,T"@DP(#`@,2XP,#`@
XM-"XP,#`@."XP,#`*-2`Q(#`@,2`M,2`P(#`@,"`P+C`P,"`P(#$@,"`Q,2XU
XM,#`@-#$T+C`P,"`Q,C0@-#,Y(#DY(#0X.2`U.2`U,3D*"3`@,"`Q+C`P,"`T
XM+C`P,"`X+C`P,`HR(#$@,"`Q("TQ(#`@,"`P(#`N,#`P(#`@,2`P"@DP(#`@
XM,2XP,#`@-"XP,#`@."XP,#`*"2`R.#D@,S0T(#(U.2`S-#0@,C0Y(#,U-"`Y
XM.3DY(#DY.3D*,B`Q(#`@,2`M,2`P(#`@,"`P+C`P,"`P(#$@,`H),"`P(#$N
XM,#`P(#0N,#`P(#@N,#`P"@D@.3D@,S0T(#$R.2`S-#0@,3,Y(#,U-"`Y.3DY
XM(#DY.3D*,B`Q(#`@,2`M,2`P(#`@,"`P+C`P,"`P(#`@,0H),"`P(#$N,#`P
XM(#0N,#`P(#@N,#`P"@D@,3(Y(#$U.2`R-CD@,34Y(#DY.3D@.3DY.0HR(#$@
XM,"`R("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,C8T(#0R-"`S,#0@-#(T(#DY
XM.3D@.3DY.0HR(#$@,"`R("TQ(#`@,"`P(#`N,#`P(#`@,"`P"@D@,3(T(#(V
XM-"`X-"`R-C0@.3DY.2`Y.3DY"C(@,R`P(#(@+3$@,"`P(#$Q(#`N,#`P(#`@
XM,"`P"@D@,3`T(#4R-"`R.#0@-3(T(#(X-"`U.3D@,C<Y(#8P-"`R-CD@-C`T
XM(#(U.2`V,#0@,C0X(#8P,"`R-#0@-3DU"@D@,C,W(#4Y-R`R,C$@-C`P(#(Q
XM-"`U.3`@,3DT(#4Y-2`Q.3,@-3DU(#$Y,"`U.3@@,3@W(#8P,R`Q-S<@-C`S
XM"@D@,38W(#4Y,R`Q-C,@-3DP(#$V,R`U.3`@,38S(#4Y,"`Q-34@-3DT(#$T
XM-"`V,#(@,3,U(#8P,R`Q,CD@-3DV"@D@,3(R(#4Y,R`Q,30@-3DU(#$P-R`U
XM.30@,3`U(#4X-"`Q,#0@-3(T(#DY.3D@.3DY.0HR(#,@,"`R("TQ(#`@,"`Q
XM,2`P+C`P,"`P(#`@,`H)(#$P-"`T-"`Q,#0@,3`T(#(X-"`Q,#0@,C@T(#,T
XM(#(W,R`S,R`R-3@@,S(@,C0X(#(T(#(S.2`S,PH)(#(R-"`S,"`R,34@,C@@
XM,C`S(#,Q(#$Y-B`R."`Q.3$@,C0@,3@U(#(V(#$X,"`R.2`Q-S`@,S0*"2`Q
XM-C$@,S0@,34V(#(X(#$T,2`R-"`Q,S(@,C4@,3(X(#,P(#$R,"`S-2`Q,38@
XM,S,@,3`Y(#,U"@D@,3`W(#,Y(#$P-"`T-"`Y.3DY(#DY.3D*,B`R(#`@,B`M
XM,2`P(#`@,"`P+C`P,"`P(#`@,`H)(#$S.2`Q,#0@,3,Y(#$P.2`Q-30@,3`Y
XM(#$U-"`Q,#0@,3,Y(#$P-"`Y.3DY(#DY.3D*,B`R(#`@,B`M,2`P(#`@,"`P
XM+C`P,"`P(#`@,`H)(#$S.2`U,3D@,3,Y(#4R-"`Q-30@-3(T(#$U-"`U,3D@
XM,3,Y(#4Q.2`Y.3DY(#DY.3D*,B`R(#`@,2`M,2`P(#`@,"`P+C`P,"`P(#`@
XM,`H)(#$T-"`Q,#D@,30Y(#$P.2`Q-#D@-3$Y(#$T-"`U,3D@,30T(#$P.2`Y
XM.3DY(#DY.3D*,B`R(#`@,B`M,2`P(#`@,"`P+C`P,"`P(#`@,`H)(#(S-"`Q
XM,#0@,C,T(#$P.2`R-#D@,3`Y(#(T.2`Q,#0@,C,T(#$P-"`Y.3DY(#DY.3D*
XM,B`R(#`@,B`M,2`P(#`@,"`P+C`P,"`P(#`@,`H)(#(S-"`U,3D@,C,T(#4R
XM-"`R-#D@-3(T(#(T.2`U,3D@,C,T(#4Q.2`Y.3DY(#DY.3D*,B`R(#`@,2`M
XM,2`P(#`@,"`P+C`P,"`P(#`@,`H)(#(S.2`Q,#D@,C0T(#$P.2`R-#0@-3$Y
XM(#(S.2`U,3D@,C,Y(#$P.2`Y.3DY(#DY.3D*,R`P(#`@,B`M,2`P(#`@,"`P
XM+C`P,"`P(#`*"2`Q,C0@,C8T(#$S-"`R-CD@,30P(#,P-"`Q-3,@,S`S(#$U
XM-"`S,C$@,34W(#,U,R`R,S0@,S4Q(#(S-"`S.#0@,C0X(#,X,R`R-3`@,SDP
XM(#(T.2`T,3D@,C8T(#0R-"`Y.3DY(#DY.3D*,R`P(#`@,2`M,2`P(#`@,"`P
XM+C`P,"`Q(#`*"3`@,"`Q+C`P,"`T+C`P,"`X+C`P,`H)(#$U.2`R-C0@,34Y
XM(#$Y-"`Q-C0@,3,Y(#$W.2`Q,30@,C`T(#$Q-"`R,C0@,3,T(#(R.2`Q.30@
XM,C(Y(#(T-"`Y.3DY(#DY.3D*,R`P(#`@,2`M,2`P(#`@,"`P+C`P,"`Q(#`*
XM"3`@,"`Q+C`P,"`T+C`P,"`X+C`P,`H)(#(R.2`T,3D@,C(Y(#0V.2`R,3D@
XM-#DY(#$X-"`U,#0@,34Y(#0X-"`Q-3D@,SDT(#DY.3D@.3DY.0HT(#`@,"`Q
XM,B`P("TQ(#`@,"XP,#`@-"`W(#(Y(#(U.2`S-#`@<W1O<FT!"C0@,B`P(#$R
XM(#`@+3$@,"`P+C`P,"`T(#$R(#(X(#$R.2`S,S<@<')I;64!"C0@,2`P(#$T
XM(#`@+3$@,"`P+C`P,"`T(#(@,R`R-S@@,34V("X!"C0@,2`P(#$R(#`@+3$@
XM,"`P+C`P,"`T(#8@.2`R-S@@,38T(&T!"C0@,"`P(#$R(#`@+3$@,"`P+C`P
XM,"`T(#8@-B`Q.34@,S0Y(&$!"C0@,"`P(#$R(#`@+3$@,"`P+C`P,"`T(#<@
XM-"`Q.#@@,S0T('0!"C0@,"`P(#$R(#`@+3$@,"`P+C`P,"`T(#8@-B`R.#<@
XM-#(Q(&\!"C0@,"`P(#$R(#`@+3$@,"`P+C`P,"`T(#<@-"`R.#`@-#$W('0!
XM"C0@,"`P(#$R(#`@+3$@,"`P+C`P,"`T(#D@,R`Y,R`R-3@@:0$*-"`P(#`@
XM,3(@,"`M,2`P(#`N,#`P(#0@-R`T(#@W(#(U-2!T`0HT(#`@,"`Q,"`P("TQ
XM(#`@,"XP,#`@-"`W(#4@,C8R(#$S,2`R`0HT(#`@,"`Q,B`P("TQ(#`@,"XP
XM,#`@-"`W(#0@,C4U(#$R-B!T`0HT(#`@,"`Q,"`P("TQ(#`@,"XP,#`@-"`W
XM(#4@,38P(#$S,B`Q`0HT(#`@,"`Q,B`P("TQ(#`@,"XP,#`@-"`W(#0@,34T
XM(#$R-R!T`0HT(#`@,"`Q,B`P("TQ(#`@,"XP,#`@-"`Q,B`T-R`Q-CD@-C,T
X-(&-R86-K+F9I9S0!"B`Q
X`
Xend
END_OF_FILE
if test 3522 -ne `wc -c <'Examples/window2.fig.uu'`; then
    echo shar: \"'Examples/window2.fig.uu'\" unpacked with wrong size!
fi
# end of 'Examples/window2.fig.uu'
fi
if test -f 'd_arc.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'d_arc.c'\"
else
echo shar: Extracting \"'d_arc.c'\" \(4363 characters\)
sed "s/^X//" >'d_arc.c' <<'END_OF_FILE'
X/*
X * FIG : Facility for Interactive Generation of figures
X * Copyright (c) 1985 by Supoj Sutanthavibul
X *
X * "Permission to use, copy, modify, distribute, and sell this software and its
X * documentation for any purpose is hereby granted without fee, provided that
X * the above copyright notice appear in all copies and that both the copyright
X * notice and this permission notice appear in supporting documentation. 
X * No representations are made about the suitability of this software for 
X * any purpose.  It is provided "as is" without express or implied warranty."
X */
X
X/********************** DECLARATIONS ********************/
X
X/* IMPORTS */
X
X#include "fig.h"
X#include "resources.h"
X#include "mode.h"
X#include "object.h"
X#include "paintop.h"
X#include "u_create.h"
X#include "u_elastic.h"
X#include "u_list.h"
X#include "w_canvas.h"
X#include "w_mousefun.h"
X
X/* LOCAL */
X
XF_pos		point[3];
X
Xstatic int	create_arcobject();
Xstatic int	get_arcpoint();
Xstatic int	init_arc_drawing();
Xstatic int	cancel_arc();
X
Xarc_drawing_selected()
X{
X    set_mousefun("first point", "", "");
X    canvas_kbd_proc = null_proc;
X    canvas_locmove_proc = null_proc;
X    canvas_leftbut_proc = init_arc_drawing;
X    canvas_middlebut_proc = null_proc;
X    canvas_rightbut_proc = null_proc;
X    set_cursor(arrow_cursor);
X    reset_action_on();
X}
X
Xstatic
Xinit_arc_drawing(x, y)
X    int		    x, y;
X{
X    set_mousefun("mid point", "", "cancel");
X    draw_mousefun_canvas();
X    canvas_rightbut_proc = cancel_arc;
X    num_point = 0;
X    point[num_point].x = fix_x = cur_x = x;
X    point[num_point++].y = fix_y = cur_y = y;
X    canvas_locmove_proc = freehand_line;
X    canvas_leftbut_proc = get_arcpoint;
X    canvas_middlebut_proc = null_proc;
X    elastic_line();
X    set_temp_cursor(null_cursor);
X    set_action_on();
X}
X
Xstatic
Xcancel_arc()
X{
X    elastic_line();
X    if (num_point == 2) {
X	/* erase initial part of line */
X	cur_x = point[0].x;
X	cur_y = point[0].y;
X	elastic_line();
X    }
X    arc_drawing_selected();
X    draw_mousefun_canvas();
X}
X
Xstatic
Xget_arcpoint(x, y)
X    int		    x, y;
X{
X    if (x == fix_x && y == fix_y)
X	return;
X
X    if (num_point == 1) {
X	set_mousefun("final point", "", "cancel");
X	draw_mousefun_canvas();
X    }
X    if (num_point == 2) {
X	create_arcobject(x, y);
X	return;
X    }
X    elastic_line();
X    cur_x = x;
X    cur_y = y;
X    elastic_line();
X    point[num_point].x = fix_x = x;
X    point[num_point++].y = fix_y = y;
X    elastic_line();
X}
X
Xstatic
Xcreate_arcobject(lx, ly)
X    int		    lx, ly;
X{
X    F_arc	   *arc;
X    int		    x, y, i;
X    float	    xx, yy;
X
X    elastic_line();
X    cur_x = lx;
X    cur_y = ly;
X    elastic_line();
X    point[num_point].x = lx;
X    point[num_point++].y = ly;
X    x = point[0].x;
X    y = point[0].y;
X    /* erase previous line segment(s) if necessary */
X    for (i = 1; i < num_point; i++) {
X	pw_vector(canvas_win, x, y, point[i].x, point[i].y, INV_PAINT,
X		  1, RUBBER_LINE, 0.0, DEFAULT_COLOR);
X	x = point[i].x;
X	y = point[i].y;
X    }
X    if (!compute_arccenter(point[0], point[1], point[2], &xx, &yy)) {
X	put_msg("Invalid ARC geometry");
X	arc_drawing_selected();
X	draw_mousefun_canvas();
X	return;
X    }
X    if ((arc = create_arc()) == NULL) {
X	arc_drawing_selected();
X	draw_mousefun_canvas();
X	return;
X    }
X    arc->type = T_3_POINTS_ARC;
X    arc->style = cur_linestyle;
X    arc->thickness = cur_linewidth;
X    /* scale dash length according to linethickness */
X    arc->style_val = cur_styleval * (cur_linewidth + 1) / 2;
X    arc->pen = 0;
X    arc->fill_style = cur_fillstyle;
X    arc->color = cur_color;
X    arc->depth = cur_depth;
X    arc->direction = compute_direction(point[0], point[1], point[2]);
X    if (autoforwardarrow_mode)
X	arc->for_arrow = forward_arrow();
X    else
X	arc->for_arrow = NULL;
X    if (autobackwardarrow_mode)
X	arc->back_arrow = backward_arrow();
X    else
X	arc->back_arrow = NULL;
X    arc->center.x = xx;
X    arc->center.y = yy;
X    arc->point[0].x = point[0].x;
X    arc->point[0].y = point[0].y;
X    arc->point[1].x = point[1].x;
X    arc->point[1].y = point[1].y;
X    arc->point[2].x = point[2].x;
X    arc->point[2].y = point[2].y;
X    arc->next = NULL;
X    draw_arc(arc, PAINT);
X    if (appres.DEBUG) {
X	int		xmin, ymin, xmax, ymax;
X
X	arc_bound(arc, &xmin, &ymin, &xmax, &ymax);
X	elastic_box(xmin, ymin, xmax, ymax);
X    }
X    add_arc(arc);
X    arc_drawing_selected();
X    draw_mousefun_canvas();
X}
END_OF_FILE
if test 4363 -ne `wc -c <'d_arc.c'`; then
    echo shar: \"'d_arc.c'\" unpacked with wrong size!
fi
# end of 'd_arc.c'
fi
if test -f 'e_convert.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'e_convert.c'\"
else
echo shar: Extracting \"'e_convert.c'\" \(4237 characters\)
sed "s/^X//" >'e_convert.c' <<'END_OF_FILE'
X/*
X * FIG : Facility for Interactive Generation of figures
X * Copyright (c) 1985 by Supoj Sutanthavibul
X *
X * "Permission to use, copy, modify, distribute, and sell this software and its
X * documentation for any purpose is hereby granted without fee, provided that
X * the above copyright notice appear in all copies and that both the copyright
X * notice and this permission notice appear in supporting documentation. 
X * No representations are made about the suitability of this software for 
X * any purpose.  It is provided "as is" without express or implied warranty."
X */
X
X#include "fig.h"
X#include "resources.h"
X#include "mode.h"
X#include "object.h"
X#include "paintop.h"
X#include "u_create.h"
X#include "u_list.h"
X#include "u_search.h"
X#include "w_canvas.h"
X#include "w_mousefun.h"
X
Xstatic int	init_convert();
X
Xconvert_selected()
X{
X    set_mousefun("spline<->line", "", "");
X    canvas_kbd_proc = null_proc;
X    canvas_locmove_proc = null_proc;
X    init_searchproc_left(init_convert);
X    canvas_leftbut_proc = object_search_left;
X    canvas_middlebut_proc = null_proc;
X    canvas_rightbut_proc = null_proc;
X    set_cursor(pick15_cursor);
X}
X
Xstatic
Xinit_convert(p, type, x, y, px, py)
X    char	   *p;
X    int		    type;
X    int		    x, y;
X    int		    px, py;
X{
X    switch (type) {
X    case O_POLYLINE:
X	cur_l = (F_line *) p;
X	/* the search routine will ensure that we don't have a box */
X	line_2_spline(cur_l);
X	break;
X    case O_SPLINE:
X	cur_s = (F_spline *) p;
X	/* the search routine will ensure that we have a interp spline */
X	spline_2_line(cur_s);
X	break;
X    default:
X	return;
X    }
X}
X
Xline_2_spline(l)
X    F_line	   *l;
X{
X    F_spline	   *s;
X
X    if (num_points(l->points) < 3) {
X	put_msg("Can't CONVERT this line into a spline: insufficient points");
X	return;
X    }
X    if ((s = create_spline()) == NULL)
X	return;
X
X    if (l->type == T_POLYGON)
X	s->type = T_CLOSED_INTERP;
X    else
X	s->type = T_OPEN_INTERP;
X    s->style = l->style;
X    s->thickness = l->thickness;
X    s->color = l->color;
X    s->depth = l->depth;
X    s->style_val = l->style_val;
X    s->pen = l->pen;
X    s->fill_style = l->fill_style;
X    s->for_arrow = l->for_arrow;
X    s->back_arrow = l->back_arrow;
X    s->points = l->points;
X    s->controls = NULL;
X    s->next = NULL;
X
X    if (-1 == create_control_list(s)) {
X	free_splinestorage(s);
X	return;
X    }
X    remake_control_points(s);
X
X    /* now we have finished creating the spline, we can get rid of the line */
X    /* first off the screen */
X    mask_toggle_linemarker(l);
X    draw_line(l, ERASE);
X    list_delete_line(&objects.lines, l);
X    /* we reuse the arrows and points, so `detach' them from the line */
X    l->for_arrow = l->back_arrow = NULL;
X    l->points = NULL;
X    /* now get rid of the rest */
X    free_linestorage(l);
X
X    /* now put back the new spline */
X    draw_spline(s, PAINT);
X    mask_toggle_splinemarker(s);
X    list_add_spline(&objects.splines, s);
X    clean_up();
X    set_action_object(F_CONVERT, O_POLYLINE);
X    set_latestspline(s);
X    return;
X}
X
Xspline_2_line(s)
X    F_spline	   *s;
X{
X    F_line	   *l;
X
X    /* Now we turn s into a line */
X    if ((l = create_line()) == NULL)
X	return;
X
X    if (s->type == T_OPEN_INTERP)
X	l->type = T_POLYLINE;
X    else if (s->type == T_CLOSED_INTERP)
X	l->type = T_POLYGON;
X    l->style = s->style;
X    l->thickness = s->thickness;
X    l->color = s->color;
X    l->depth = s->depth;
X    l->style_val = s->style_val;
X    l->pen = s->pen;
X    l->radius = DEF_BOXRADIUS;
X    l->fill_style = s->fill_style;
X    l->for_arrow = s->for_arrow;
X    l->back_arrow = s->back_arrow;
X    l->points = s->points;
X
X    /* now we have finished creating the line, we can get rid of the spline */
X    /* first off the screen */
X    mask_toggle_splinemarker(s);
X    draw_spline(s, ERASE);
X    list_delete_spline(&objects.splines, s);
X    /* we reuse the arrows and points, so `detach' them from the spline */
X    s->for_arrow = s->back_arrow = NULL;
X    s->points = NULL;
X    /* now get rid of the rest */
X    free_splinestorage(s);
X
X    /* and put in the new line */
X    draw_line(l, PAINT);
X    mask_toggle_linemarker(l);
X    list_add_line(&objects.lines, l);
X    clean_up();
X    set_action_object(F_CONVERT, O_SPLINE);
X    set_latestline(l);
X    return;
X}
END_OF_FILE
if test 4237 -ne `wc -c <'e_convert.c'`; then
    echo shar: \"'e_convert.c'\" unpacked with wrong size!
fi
# end of 'e_convert.c'
fi
if test -f 'e_copy.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'e_copy.c'\"
else
echo shar: Extracting \"'e_copy.c'\" \(4636 characters\)
sed "s/^X//" >'e_copy.c' <<'END_OF_FILE'
X/*
X * FIG : Facility for Interactive Generation of figures
X * Copyright (c) 1985 by Supoj Sutanthavibul
X *
X * "Permission to use, copy, modify, distribute, and sell this software and its
X * documentation for any purpose is hereby granted without fee, provided that
X * the above copyright notice appear in all copies and that both the copyright
X * notice and this permission notice appear in supporting documentation. 
X * No representations are made about the suitability of this software for 
X * any purpose.  It is provided "as is" without express or implied warranty."
X */
X
X#include "fig.h"
X#include "resources.h"
X#include "mode.h"
X#include "object.h"
X#include "paintop.h"
X#include "u_elastic.h"
X#include "u_search.h"
X#include "u_create.h"
X#include "w_canvas.h"
X#include "w_mousefun.h"
X#include "w_setup.h"
X
X/* local routine declarations */
Xstatic		init_copy(), init_arb_copy(), init_constrained_copy();
Xstatic		init_copy_to_scrap();
X
Xcopy_selected()
X{
X    canvas_kbd_proc = null_proc;
X    canvas_locmove_proc = null_proc;
X    init_searchproc_left(init_arb_copy);
X    init_searchproc_middle(init_constrained_copy);
X    init_searchproc_right(init_copy_to_scrap);
X    canvas_leftbut_proc = object_search_left;
X    canvas_middlebut_proc = object_search_middle;
X    canvas_rightbut_proc = object_search_right;
X    return_proc = copy_selected;
X    set_cursor(pick15_cursor);
X    set_mousefun("copy object", "horiz/vert copy", "copy to cut buf");
X    reset_action_on();
X}
X
Xstatic
Xinit_arb_copy(p, type, x, y, px, py)
X    char	   *p;
X    int		    type;
X    int		    x, y, px, py;
X{
X    constrained = MOVE_ARB;
X    init_copy(p, type, x, y, px, py);
X    canvas_middlebut_proc = null_proc;
X    set_mousefun("place object", "", "cancel");
X    draw_mousefun_canvas();
X}
X
Xstatic
Xinit_constrained_copy(p, type, x, y, px, py)
X    char	   *p;
X    int		    type;
X    int		    x, y, px, py;
X{
X    constrained = MOVE_HORIZ_VERT;
X    init_copy(p, type, x, y, px, py);
X    canvas_middlebut_proc = canvas_leftbut_proc;
X    canvas_leftbut_proc = null_proc;
X    set_mousefun("", "place object", "cancel");
X    draw_mousefun_canvas();
X}
X
Xstatic
Xinit_copy(p, type, x, y, px, py)
X    char	   *p;
X    int		    type;
X    int		    x, y, px, py;
X{
X    switch (type) {
X    case O_COMPOUND:
X	set_temp_cursor(null_cursor);
X	cur_c = (F_compound *) p;
X	new_c = copy_compound(cur_c);
X	init_compounddragging(new_c, px, py);
X	break;
X    case O_POLYLINE:
X	set_temp_cursor(null_cursor);
X	cur_l = (F_line *) p;
X	new_l = copy_line(cur_l);
X	init_linedragging(new_l, px, py);
X	break;
X    case O_TEXT:
X	set_temp_cursor(null_cursor);
X	cur_t = (F_text *) p;
X	new_t = copy_text(cur_t);
X	init_textdragging(new_t, x, y);
X	break;
X    case O_ELLIPSE:
X	set_temp_cursor(null_cursor);
X	cur_e = (F_ellipse *) p;
X	new_e = copy_ellipse(cur_e);
X	init_ellipsedragging(new_e, px, py);
X	break;
X    case O_ARC:
X	set_temp_cursor(null_cursor);
X	cur_a = (F_arc *) p;
X	new_a = copy_arc(cur_a);
X	init_arcdragging(new_a, px, py);
X	break;
X    case O_SPLINE:
X	set_temp_cursor(null_cursor);
X	cur_s = (F_spline *) p;
X	new_s = copy_spline(cur_s);
X	init_splinedragging(new_s, px, py);
X	break;
X    default:
X	return;
X    }
X}
X
Xstatic
Xinit_copy_to_scrap(p, type, x, y, px, py)
X    char	   *p;
X    int		    type;
X    int		    x, y;
X    int		    px, py;
X{
X    FILE	   *fp;
X    struct stat	    file_status;
X
X    if (stat(cut_buf_name, &file_status) == 0) {	/* file exists */
X	if (file_status.st_mode & S_IFDIR) {
X	    put_msg("\"%s\" is a directory", cut_buf_name);
X	    return;
X	}
X	if (file_status.st_mode & S_IWRITE) {	/* writing is permitted */
X	    if (file_status.st_uid != geteuid()) {
X		put_msg("Error: access denied to cut file");
X		return;
X	    }
X	} else {
X	    put_msg("Error: cut file is read only");
X	    return;
X	}
X    } else if (errno != ENOENT)
X	return;			/* file does exist but stat fails */
X
X    if ((fp = fopen(cut_buf_name, "w")) == NULL) {
X	put_msg("Couldn't open cut file %s", sys_errlist[errno]);
X	return;
X    } else {
X	(void) fprintf(fp, "%s\n", file_header);
X	(void) fprintf(fp, "%d %d\n", PIX_PER_INCH, 2);
X    }
X
X    switch (type) {
X    case O_COMPOUND:
X	cur_c = (F_compound *) p;
X	write_compound(fp, cur_c);
X	break;
X    case O_ARC:
X	cur_a = (F_arc *) p;
X	write_arc(fp, cur_a);
X	break;
X    case O_ELLIPSE:
X	cur_e = (F_ellipse *) p;
X	write_ellipse(fp, cur_e);
X	break;
X    case O_POLYLINE:
X	cur_l = (F_line *) p;
X	write_line(fp, cur_l);
X	break;
X    case O_TEXT:
X	cur_t = (F_text *) p;
X	write_text(fp, cur_t);
X	break;
X    case O_SPLINE:
X	cur_s = (F_spline *) p;
X	write_spline(fp, cur_s);
X	break;
X    default:
X	fclose(fp);
X	return;
X    }
X    put_msg("Object copied to scrap");
X    fclose(fp);
X}
END_OF_FILE
if test 4636 -ne `wc -c <'e_copy.c'`; then
    echo shar: \"'e_copy.c'\" unpacked with wrong size!
fi
# end of 'e_copy.c'
fi
if test -f 'mode.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mode.h'\"
else
echo shar: Extracting \"'mode.h'\" \(4624 characters\)
sed "s/^X//" >'mode.h' <<'END_OF_FILE'
X/*
X * FIG : Facility for Interactive Generation of figures
X * Copyright (c) 1985 by Supoj Sutanthavibul
X *
X * "Permission to use, copy, modify, distribute, and sell this software and its
X * documentation for any purpose is hereby granted without fee, provided that
X * the above copyright notice appear in all copies and that both the copyright
X * notice and this permission notice appear in supporting documentation. 
X * No representations are made about the suitability of this software for 
X * any purpose.  It is provided "as is" without express or implied warranty."
X */
X
X#define		F_NULL			0
X#define	    FIRST_DRAW_MODE	    F_CIRCLE_BY_RAD
X#define		F_CIRCLE_BY_RAD		1
X#define		F_CIRCLE_BY_DIA		2
X#define		F_ELLIPSE_BY_RAD	3
X#define		F_ELLIPSE_BY_DIA	4
X#define		F_CIRCULAR_ARC		5
X#define		F_POLYLINE		6
X#define		F_BOX			7
X#define		F_POLYGON		8
X#define		F_TEXT			9
X#define		F_SPLINE		10
X#define		F_CLOSED_SPLINE		11
X#define		F_INTSPLINE		12
X#define		F_CLOSED_INTSPLINE	13
X#define		F_ARC_BOX		14
X#define		F_REGPOLY		15
X#define		F_EPSOBJ		16
X#define	    FIRST_EDIT_MODE	    F_GLUE
X#define		F_GLUE			30
X#define		F_BREAK			31
X#define		F_SCALE			32
X#define		F_ADD			33
X#define		F_COPY			34
X#define		F_MOVE			35
X#define		F_DELETE		36
X#define		F_MOVE_POINT		37
X#define		F_DELETE_POINT		38
X#define		F_ADD_POINT		39
X#define		F_DELETE_ARROW_HEAD	40
X#define		F_ADD_ARROW_HEAD	41
X#define		F_FLIP			42
X#define		F_ROTATE		43
X#define		F_AUTOARROW		44
X#define		F_CONVERT		45
X#define		F_CHANGE		46
X#define		F_UPDATE		47
X#define		F_ALIGN			48
X#define		F_ZOOM			49
X#define		F_LOAD			50
X#define		F_EDIT			50
X
Xextern int	cur_mode;
X
X/* alignment mode */
X#define		NONE			0
X#define		LEFT			1
X#define		TOP			1
X#define		CENTER			2
X#define		RIGHT			3
X#define		BOTTOM			3
X
Xextern int	cur_halign;
Xextern int	cur_valign;
X
X/* angle geometry */
X#define		L_UNCONSTRAINED		0
X#define		L_LATEXLINE		1
X#define		L_LATEXARROW		2
X#define		L_MOUNTHATTAN		3
X#define		L_MANHATTAN		4
X#define		L_MOUNTAIN		5
X
Xextern int	manhattan_mode;
Xextern int	mountain_mode;
Xextern int	latexline_mode;
Xextern int	latexarrow_mode;
X
X/* arrow mode */
X#define		L_NOARROWS		0
X#define		L_FARROWS		1
X#define		L_FBARROWS		2
X#define		L_BARROWS		3
X
Xextern int	autoforwardarrow_mode;
Xextern int	autobackwardarrow_mode;
X
X/* grid mode */
X#define		GRID_0			0
X#define		GRID_1			1
X#define		GRID_2			2
X
Xextern int	cur_gridmode;
X
X/* point position */
X#define		P_ANY			0
X#define		P_MAGNET		1
X#define		P_GRID1			2
X#define		P_GRID2			3
X
Xextern int	cur_pointposn;
Xextern int	posn_rnd[P_GRID2 + 1];
Xextern int	posn_hlf[P_GRID2 + 1];
Xextern int	grid_fine[P_GRID2 + 1];
Xextern int	grid_coarse[P_GRID2 + 1];
Xextern char    *grid_name[P_GRID2 + 1];
X
X/* rotn axis */
X#define		UD_FLIP			1
X#define		LR_FLIP			2
X
Xextern int	cur_rotnangle;
X
X/* smart link mode */
X#define		SMART_OFF		0
X#define		SMART_MOVE		1
X#define		SMART_SLIDE		2
X
Xextern int	cur_linkmode;
X
X/* misc */
Xextern int	action_on;
Xextern int	highlighting;
Xextern int	aborting;
Xextern int	anypointposn;
Xextern int	figure_modified;
Xextern int	cur_numsides;
Xextern char	cur_fig_units[32];
Xextern Boolean	warnexist;
X
Xextern void	reset_modifiedflag();
Xextern void	set_modifiedflag();
Xextern void	reset_action_on();
Xextern void	set_action_on();
X
X/**********************	 global mode variables	************************/
X
Xextern int	num_point;
Xextern int	min_num_points;
X
X/***************************  Export Settings  ****************************/
X
Xextern Boolean	export_flushleft;	/* flush left (true) or center (false) */
X
X/***************************  Print Settings  ****************************/
X
Xextern int	print_landscape;/* def. orientation for printer */
Xextern Boolean	print_flushleft; /* flush left (true) or center (false) */
X
X#define NUM_EXP_LANG	15	/* number of export languages */
X#define LANG_EPS	7	/* position of eps starting from 0 */
X#define LANG_PS		8	/* position of ps starting from 0 */
X#define LANG_XBITMAP	14	/* position of xbm starting from 0 */
X
Xextern int	cur_exp_lang;
Xextern char    *lang_items[NUM_EXP_LANG];
Xextern char    *lang_texts[NUM_EXP_LANG];
Xextern Boolean  batch_exists;
Xextern char     batch_file[];
X
X/***************************  Mode Settings  ****************************/
X
Xextern int	cur_objmask;
Xextern int	cur_updatemask;
Xextern int	cur_depth;
X
X/***************************  Text Settings  ****************************/
X
Xextern int	hidden_text_length;
Xextern float	cur_textstep;
X
X/***************************  File Settings  ****************************/
X
Xextern char	cur_dir[];
Xextern char	cur_filename[];
Xextern char	save_filename[];  /* to undo load */
Xextern char	file_header[];
Xextern char	cut_buf_name[];
END_OF_FILE
if test 4624 -ne `wc -c <'mode.h'`; then
    echo shar: \"'mode.h'\" unpacked with wrong size!
fi
# end of 'mode.h'
fi
if test -f 'u_fonts.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'u_fonts.c'\"
else
echo shar: Extracting \"'u_fonts.c'\" \(4300 characters\)
sed "s/^X//" >'u_fonts.c' <<'END_OF_FILE'
X/*
X * FIG : Facility for Interactive Generation of figures
X * Copyright (c) 1991 by Brian V. Smith
X *
X * "Permission to use, copy, modify, distribute, and sell this software and its
X * documentation for any purpose is hereby granted without fee, provided that
X * the above copyright notice appear in all copies and that both the copyright
X * notice and this permission notice appear in supporting documentation. 
X * No representations are made about the suitability of this software for 
X * any purpose.  It is provided "as is" without express or implied warranty."
X */
X
X#include <X11/Xlib.h>
X#include "fig.h"
X#include "resources.h"
X#include "u_fonts.h"
X#include "object.h"
X
X/* printer font names for indicator window */
X
Xstruct _xfstruct x_fontinfo[NUM_X_FONTS] = {
X    {"-adobe-times-medium-r-*--", (struct xfont*) NULL},
X    {"-adobe-times-medium-i-*--", (struct xfont*) NULL},
X    {"-adobe-times-bold-r-*--", (struct xfont*) NULL},
X    {"-adobe-times-bold-i-*--", (struct xfont*) NULL},
X    {"-schumacher-clean-medium-r-*--", (struct xfont*) NULL},
X    {"-schumacher-clean-medium-i-*--", (struct xfont*) NULL},
X    {"-schumacher-clean-bold-r-*--", (struct xfont*) NULL},
X    {"-schumacher-clean-bold-i-*--", (struct xfont*) NULL},
X    {"-adobe-courier-medium-r-*--", (struct xfont*) NULL},
X    {"-adobe-courier-medium-o-*--", (struct xfont*) NULL},
X    {"-adobe-courier-bold-r-*--", (struct xfont*) NULL},
X    {"-adobe-courier-bold-o-*--", (struct xfont*) NULL},
X    {"-adobe-helvetica-medium-r-*--", (struct xfont*) NULL},
X    {"-adobe-helvetica-medium-o-*--", (struct xfont*) NULL},
X    {"-adobe-helvetica-bold-r-*--", (struct xfont*) NULL},
X    {"-adobe-helvetica-bold-o-*--", (struct xfont*) NULL},
X    {"-adobe-new century schoolbook-medium-r-*--", (struct xfont*) NULL},
X    {"-adobe-new century schoolbook-medium-i-*--", (struct xfont*) NULL},
X    {"-adobe-new century schoolbook-bold-r-*--", (struct xfont*) NULL},
X    {"-adobe-new century schoolbook-bold-i-*--", (struct xfont*) NULL},
X    {"-*-lucidabright-medium-r-*--", (struct xfont*) NULL},
X    {"-*-lucidabright-medium-i-*--", (struct xfont*) NULL},
X    {"-*-lucidabright-demibold-r-*--", (struct xfont*) NULL},
X    {"-*-lucidabright-demibold-i-*--", (struct xfont*) NULL},
X    {"-*-symbol-medium-r-*--", (struct xfont*) NULL},
X    {"-*-zapfchancery-medium-i-*--", (struct xfont*) NULL},
X    {"-*-zapfdingbats-*-*-*--", (struct xfont*) NULL},
X};
X
Xstruct _fstruct ps_fontinfo[NUM_PS_FONTS + 1] = {
X    {"Default", -1},
X    {"Times-Roman", 0},
X    {"Times-Italic", 1},
X    {"Times-Bold", 2},
X    {"Times-BoldItalic", 3},
X    {"AvantGarde-Book", 4},
X    {"AvantGarde-BookOblique", 5},
X    {"AvantGarde-Demi", 6},
X    {"AvantGarde-DemiOblique", 7},
X    {"Bookman-Light", 0},
X    {"Bookman-LightItalic", 0},
X    {"Bookman-Demi", 0},
X    {"Bookman-DemiItalic", 0},
X    {"Courier", 8},
X    {"Courier-Oblique", 9},
X    {"Courier-Bold", 10},
X    {"Courier-BoldOblique", 11},
X    {"Helvetica", 12},
X    {"Helvetica-Oblique", 13},
X    {"Helvetica-Bold", 14},
X    {"Helvetica-BoldOblique", 15},
X    {"Helvetica-Narrow", 0},
X    {"Helvetica-Narrow-Oblique", 0},
X    {"Helvetica-Narrow-Bold", 0},
X    {"Helvetica-Narrow-BoldOblique", 0},
X    {"NewCenturySchlbk-Roman", 16},
X    {"NewCenturySchlbk-Italic", 17},
X    {"NewCenturySchlbk-Bold", 18},
X    {"NewCenturySchlbk-BoldItalic", 19},
X    {"Palatino-Roman", 20},
X    {"Palatino-Italic", 21},
X    {"Palatino-Bold", 22},
X    {"Palatino-BoldItalic", 23},
X    {"Symbol", 24},
X    {"ZapfChancery-MediumItalic", 25},
X    {"ZapfDingbats", 26},
X};
X
Xstruct _fstruct latex_fontinfo[NUM_LATEX_FONTS] = {
X    {"Default", 0},
X    {"Roman", 0},
X    {"Bold", 2},
X    {"Italic", 1},
X    {"Modern", 12},
X    {"Typewriter", 8},
X};
X
Xx_fontnum(psflag, fnum)
X    int		    psflag, fnum;
X{
X    return (psflag ? ps_fontinfo[fnum + 1].xfontnum :
X	    latex_fontinfo[fnum].xfontnum);
X}
X
Xpsfontnum(font)
Xchar *font;
X{
X    int i;
X
X    if (font == NULL)
X	return(DEF_PS_FONT);
X    for (i=0; i<NUM_PS_FONTS; i++)
X	if (strcmp(ps_fontinfo[i].name, font) == 0)
X		return (i-1);
X    return(DEF_PS_FONT);
X}
X
Xlatexfontnum(font)
Xchar *font;
X{
X    int i;
X
X    if (font == NULL)
X	return(DEF_LATEX_FONT);
X    for (i=0; i<NUM_LATEX_FONTS; i++)
X	if (strcmp(latex_fontinfo[i].name, font) == 0)
X		return (i);
X    return(DEF_LATEX_FONT);
X}
END_OF_FILE
if test 4300 -ne `wc -c <'u_fonts.c'`; then
    echo shar: \"'u_fonts.c'\" unpacked with wrong size!
fi
# end of 'u_fonts.c'
fi
if test -f 'u_free.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'u_free.c'\"
else
echo shar: Extracting \"'u_free.c'\" \(3779 characters\)
sed "s/^X//" >'u_free.c' <<'END_OF_FILE'
X/*
X * FIG : Facility for Interactive Generation of figures
X * Copyright (c) 1985 by Supoj Sutanthavibul
X *
X * "Permission to use, copy, modify, distribute, and sell this software and its
X * documentation for any purpose is hereby granted without fee, provided that
X * the above copyright notice appear in all copies and that both the copyright
X * notice and this permission notice appear in supporting documentation. 
X * No representations are made about the suitability of this software for 
X * any purpose.  It is provided "as is" without express or implied warranty."
X */
X
X#include "fig.h"
X#include "resources.h"
X#include "object.h"
X
Xfree_arc(list)
X    F_arc	  **list;
X{
X    F_arc	   *a, *arc;
X
X    for (a = *list; a != NULL;) {
X	arc = a;
X	a = a->next;
X	if (arc->for_arrow)
X	    free((char *) arc->for_arrow);
X	if (arc->back_arrow)
X	    free((char *) arc->back_arrow);
X	free((char *) arc);
X    }
X    *list = NULL;
X}
X
Xfree_compound(list)
X    F_compound	  **list;
X{
X    F_compound	   *c, *compound;
X
X    for (c = *list; c != NULL;) {
X	compound = c;
X	c = c->next;
X	free_arc(&compound->arcs);
X	free_compound(&compound->compounds);
X	free_ellipse(&compound->ellipses);
X	free_line(&compound->lines);
X	free_spline(&compound->splines);
X	free_text(&compound->texts);
X	free((char *) compound);
X    }
X    *list = NULL;
X}
X
Xfree_ellipse(list)
X    F_ellipse	  **list;
X{
X    F_ellipse	   *e, *ellipse;
X
X    for (e = *list; e != NULL;) {
X	ellipse = e;
X	e = e->next;
X	free((char *) ellipse);
X    }
X    *list = NULL;
X}
X
Xfree_line(list)
X    F_line	  **list;
X{
X    F_line	   *l, *line;
X
X    for (l = *list; l != NULL;) {
X	line = l;
X	l = l->next;
X	free_linestorage(line);
X    }
X    *list = NULL;
X}
X
Xfree_text(list)
X    F_text	  **list;
X{
X    F_text	   *t, *text;
X
X    for (t = *list; t != NULL;) {
X	text = t;
X	t = t->next;
X	free(text->cstring);
X	free((char *) text);
X    }
X    *list = NULL;
X}
X
Xfree_spline(list)
X    F_spline	  **list;
X{
X    F_spline	   *s, *spline;
X
X    for (s = *list; s != NULL;) {
X	spline = s;
X	s = s->next;
X	free_splinestorage(spline);
X    }
X    *list = NULL;
X}
X
Xfree_splinestorage(s)
X    F_spline	   *s;
X{
X    F_control	   *a, *b;
X
X    free_points(s->points);
X    for (a = s->controls; a != NULL; a = b) {
X	b = a->next;
X	free((char *) a);
X    }
X    if (s->for_arrow)
X	free((char *) s->for_arrow);
X    if (s->back_arrow)
X	free((char *) s->back_arrow);
X    free((char *) s);
X}
X
Xfree_linestorage(l)
X    F_line	   *l;
X{
X    free_points(l->points);
X    if (l->for_arrow)
X	free((char *) l->for_arrow);
X    if (l->back_arrow)
X	free((char *) l->back_arrow);
X    if (l->eps) {
X	if (l->eps->bitmap)
X	    free((char *) l->eps->bitmap);
X	if (l->eps->pixmap != 0)
X	    XFreePixmap(tool_d, l->eps->pixmap);
X	free((char *) l->eps);
X    }
X    free((char *) l);
X}
X
Xfree_points(first_point)
X    F_point	   *first_point;
X{
X    F_point	   *p, *q;
X
X    for (p = first_point; p != NULL; p = q) {
X	q = p->next;
X	free((char *) p);
X    }
X}
X
Xfree_linkinfo(list)
X    F_linkinfo	  **list;
X{
X    F_linkinfo	   *l, *link;
X
X    for (l = *list; l != NULL;) {
X	link = l;
X	l = l->next;
X	free((char *) link);
X    }
X    *list = NULL;
X}
X
X/* free up all the GC's before leaving xfig */
X
Xfree_GCs()
X	{
X	int i;
X
X	XFreeGC(tool_d, gc);
X	XFreeGC(tool_d, bold_gc);
X	XFreeGC(tool_d, button_gc);
X	XFreeGC(tool_d, color_gc);
X	XFreeGC(tool_d, ind_button_gc);
X	XFreeGC(tool_d, ind_blank_gc);
X	XFreeGC(tool_d, blank_gc);
X	XFreeGC(tool_d, mouse_blank_gc);
X	XFreeGC(tool_d, mouse_button_gc);
X	XFreeGC(tool_d, tr_gc);
X	XFreeGC(tool_d, tr_erase_gc);
X	XFreeGC(tool_d, tr_xor_gc);
X	XFreeGC(tool_d, sr_gc);
X	XFreeGC(tool_d, sr_erase_gc);
X	XFreeGC(tool_d, sr_xor_gc);
X
X	for (i=0; i<NUMOPS; i++) {
X		XFreeGC(tool_d, gccache[i]);
X	}
X	for (i=0; i<NUMFILLPATS; i++) {
X		XFreeGC(tool_d, fill_gc[i]);
X		XFreeGC(tool_d, un_fill_gc[i]);
X	}
X}
END_OF_FILE
if test 3779 -ne `wc -c <'u_free.c'`; then
    echo shar: \"'u_free.c'\" unpacked with wrong size!
fi
# end of 'u_free.c'
fi
if test -f 'w_grid.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'w_grid.c'\"
else
echo shar: Extracting \"'w_grid.c'\" \(4307 characters\)
sed "s/^X//" >'w_grid.c' <<'END_OF_FILE'
X/*
X * FIG : Facility for Interactive Generation of figures
X * Copyright (c) 1985 by Supoj Sutanthavibul
X *
X * "Permission to use, copy, modify, distribute, and sell this software and its
X * documentation for any purpose is hereby granted without fee, provided that
X * the above copyright notice appear in all copies and that both the copyright
X * notice and this permission notice appear in supporting documentation. 
X * No representations are made about the suitability of this software for 
X * any purpose.  It is provided "as is" without express or implied warranty."
X */
X
X#include "fig.h"
X#include "figx.h"
X#include "resources.h"
X#include "mode.h"
X#include "paintop.h"
X#include "object.h"
X#include "w_setup.h"
X#include "w_util.h"
X#include "w_zoom.h"
X
X#define null_width 32
X#define null_height 32
X
X#define MMTOPIX 3
X#define IN16TOPIX 5
X
Xstatic char	null_bits[null_width * null_height / 8] = {0};
X
Xstatic Pixmap	null_pm, grid_pm = 0;
Xstatic unsigned long bg, fg;
X
Xinit_grid()
X{
X    DeclareArgs(2);
X
X    if (null_pm == 0) {
X	FirstArg(XtNbackground, &bg);
X	NextArg(XtNforeground, &fg);
X	GetValues(canvas_sw);
X
X	null_pm = XCreatePixmapFromBitmapData(tool_d, canvas_win,
X				(char *) null_bits, null_width, null_height,
X				      fg, bg, DefaultDepthOfScreen(tool_s));
X    }
X
X    if (appres.INCHES) {
X	posn_rnd[P_MAGNET] = 5; /* 1 x 1/8" */
X	posn_hlf[P_MAGNET] = 3;
X	posn_rnd[P_GRID1] = 20; /* 4 x 1/8" */
X	posn_hlf[P_GRID1] = 10;
X	posn_rnd[P_GRID2] = 40; /* 8 x 1/8" */
X	posn_hlf[P_GRID2] = 20;
X	grid_name[P_MAGNET] = "1/16 in";
X	grid_name[P_GRID1] = "1/4 in";
X	grid_name[P_GRID2] = "1/2 in";
X	grid_fine[P_GRID1] = 1 * IN16TOPIX;	/* 1 x 1/16" */
X	grid_coarse[P_GRID1] = 4 * IN16TOPIX;	/* 4 x 1/16" */
X	grid_fine[P_GRID2] = 1 * IN16TOPIX;	/* 1 x 1/16" */
X	grid_coarse[P_GRID2] = 8 * IN16TOPIX;	/* 8 x 1/16" */
X    } else {
X	posn_rnd[P_MAGNET] = 3; /* 1 mm */
X	posn_hlf[P_MAGNET] = 2;
X	posn_rnd[P_GRID1] = 15; /* 5 mm */
X	posn_hlf[P_GRID1] = 7;
X	posn_rnd[P_GRID2] = 30; /* 10 mm */
X	posn_hlf[P_GRID2] = 15;
X	grid_name[P_MAGNET] = "1 mm";
X	grid_name[P_GRID1] = "5 mm";
X	grid_name[P_GRID2] = "10 mm";
X	grid_fine[P_GRID1] = 1 * MMTOPIX;	/* 1 mm */
X	grid_coarse[P_GRID1] = 5 * MMTOPIX;	/* 5 mm */
X	grid_fine[P_GRID2] = 2 * MMTOPIX;	/* 2 mm */
X	grid_coarse[P_GRID2] = 10 * MMTOPIX;	/* 10 mm */
X    }
X}
X
X/* grid in X11 is simply the background of the canvas */
X
Xsetup_grid(grid)
X    int		    grid;
X{
X    float	    coarse, fine;
X    float	    x, x0c, x0f, y, y0c, y0f;
X    int		    ic, dim;
X    static	    prev_grid = -1;
X
X    DeclareArgs(1);
X
X    if (grid == GRID_0) {
X	FirstArg(XtNbackgroundPixmap, null_pm);
X    } else {
X	if (grid == GRID_1) {
X	    coarse = grid_coarse[P_GRID1] * zoomscale;
X	    fine = grid_fine[P_GRID1] * zoomscale;
X	} else {
X	    coarse = grid_coarse[P_GRID2] * zoomscale;
X	    fine = grid_fine[P_GRID2] * zoomscale;
X	}
X
X	if (coarse==0.0 && fine==0.0) { /* grid values both zero */
X	    FirstArg(XtNbackgroundPixmap, null_pm);
X	}
X	if (coarse == 0.0) {	/* coarse must be <> 0 */
X	    coarse = fine;
X	    fine = 0.0;
X	}
X	ic = (int) coarse;
X	dim = (ic > 64.0) ? ic : (64 / ic + 1) * ic;
X
X	if (grid_pm)
X	    XFreePixmap(tool_d, grid_pm);
X	grid_pm = XCreatePixmap(tool_d, canvas_win, dim, dim,
X				DefaultDepthOfScreen(tool_s));
X	XSetForeground(tool_d, gc, bg);
X	XFillRectangle(tool_d, grid_pm, gc, 0, 0, dim, dim);
X	XSetForeground(tool_d, gc, fg);
X	x0c = round(-round(zoomscale * zoomxoff) % round(coarse) - zoomscale);
X	y0c = round(-round(zoomscale * zoomyoff) % round(coarse) - zoomscale);
X	if (fine != 0.0) {
X	    x0f = round(-round(zoomscale * zoomxoff) % round(fine) - zoomscale);
X	    y0f = round(-round(zoomscale * zoomyoff) % round(fine) - zoomscale);
X	    for (x = x0c; x < dim; x += coarse)
X		for (y = y0f; y < dim; y += fine)
X		    {
X		    XDrawPoint(tool_d, grid_pm, gc, round(x), round(y));
X		    }
X	    for (y = y0c; y < dim; y += coarse)
X		for (x = x0f; x < dim; x += fine)
X		    {
X		    XDrawPoint(tool_d, grid_pm, gc, round(x), round(y));
X		    }
X	} else {
X	    for (x = x0c; x < dim; x += coarse)
X		for (y = y0c; y < dim; y += coarse)
X		    {
X		    XDrawPoint(tool_d, grid_pm, gc, round(x), round(y));
X		    }
X	}
X
X	FirstArg(XtNbackgroundPixmap, grid_pm);
X    }
X    SetValues(canvas_sw);
X    if (prev_grid == GRID_0 && grid == GRID_0)
X	redisplay_canvas();
X    prev_grid = grid;
X}
END_OF_FILE
if test 4307 -ne `wc -c <'w_grid.c'`; then
    echo shar: \"'w_grid.c'\" unpacked with wrong size!
fi
# end of 'w_grid.c'
fi
if test -f 'w_zoom.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'w_zoom.c'\"
else
echo shar: Extracting \"'w_zoom.c'\" \(3733 characters\)
sed "s/^X//" >'w_zoom.c' <<'END_OF_FILE'
X/*
X * FIG : Facility for Interactive Generation of figures
X * Copyright (c) 1991 by Henning Spruth
X *
X * "Permission to use, copy, modify, distribute, and sell this software and its
X * documentation for any purpose is hereby granted without fee, provided that
X * the above copyright notice appear in all copies and that both the copyright
X * notice and this permission notice appear in supporting documentation. 
X * No representations are made about the suitability of this software for 
X * any purpose.  It is provided "as is" without express or implied warranty."
X */
X
X#include <X11/keysym.h>
X#include "fig.h"
X#include "mode.h"
X#include "resources.h"
X#include "object.h"
X#include "paintop.h"
X#include "u_create.h"
X#include "u_elastic.h"
X#include "w_canvas.h"
X#include "w_setup.h"
X#include "w_zoom.h"
X#include "w_indpanel.h"
X
Xextern		elastic_box();
Xextern		show_zoom();
Xextern		pan_origin();
X
X/* extern int		   gc_thickness[NUMOPS]; */
X
Xstatic		do_zoom();
Xstatic		zoom_up();
Xstatic		init_zoombox_drawing();
X
Xstatic int	(*save_kbd_proc) ();
Xstatic int	(*save_locmove_proc) ();
Xstatic int	(*save_leftbut_proc) ();
Xstatic int	(*save_middlebut_proc) ();
Xstatic int	(*save_rightbut_proc) ();
Xstatic Cursor	save_cur_cursor;
Xstatic int	save_action_on;
X
Xfloat		zoomscale = 1.0;
Xint		zoomxoff = 0;
Xint		zoomyoff = 0;
X
Xstatic Boolean	zoom_in_progress = False;
X
X/* used for private box drawing functions */
Xstatic int	my_fix_x, my_fix_y;
Xstatic int	my_cur_x, my_cur_y;
X
Xzoom_selected(x, y, button)
X    int		    x, y;
X    unsigned int    button;
X{
X    if (!zoom_in_progress) {
X	switch (button) {
X	case Button1:
X	    init_zoombox_drawing(x, y);
X	    break;
X	case Button2:
X	    pan_origin();
X	    break;
X	case Button3:
X	    zoomscale = 1.0;
X	    show_zoom(&ind_switches[ZOOM_SWITCH_INDEX]);
X	    break;
X	}
X    } else if (button == Button1)
X	do_zoom(x, y);
X}
X
X
Xstatic
Xmy_box(x, y)
X    int		    x, y;
X{
X    elastic_box(my_fix_x, my_fix_y, my_cur_x, my_cur_y);
X    my_cur_x = x;
X    my_cur_y = y;
X    elastic_box(my_fix_x, my_fix_y, my_cur_x, my_cur_y);
X}
X
X
X
Xstatic
Xinit_zoombox_drawing(x, y)
X    int		    x, y;
X{
X    save_kbd_proc = canvas_kbd_proc;
X    save_locmove_proc = canvas_locmove_proc;
X    save_leftbut_proc = canvas_leftbut_proc;
X    save_middlebut_proc = canvas_middlebut_proc;
X    save_rightbut_proc = canvas_rightbut_proc;
X    save_kbd_proc = canvas_kbd_proc;
X    save_cur_cursor = cur_cursor;
X
X    my_cur_x = my_fix_x = x;
X    my_cur_y = my_fix_y = y;
X    canvas_locmove_proc = moving_box;
X
X    canvas_locmove_proc = my_box;
X    canvas_leftbut_proc = do_zoom;
X    canvas_middlebut_proc = canvas_rightbut_proc = null_proc;
X    elastic_box(my_fix_x, my_fix_y, my_cur_x, my_cur_y);
X    set_temp_cursor(null_cursor);
X    set_action_on();
X    zoom_in_progress = True;
X}
X
Xstatic
Xdo_zoom(x, y)
X    int		    x, y;
X{
X    int		    dimx, dimy;
X    float	    scalex, scaley;
X
X    elastic_box(my_fix_x, my_fix_y, my_cur_x, my_cur_y);
X    zoomxoff = my_fix_x < x ? my_fix_x : x;
X    zoomyoff = my_fix_y < y ? my_fix_y : y;
X    dimx = abs(x - my_fix_x);
X    dimy = abs(y - my_fix_y);
X    if (zoomxoff < 0)
X	zoomxoff = 0;
X    if (zoomyoff < 0)
X	zoomyoff = 0;
X    if (dimx && dimy) {
X	scalex = CANVAS_WD / (float) dimx;
X	scaley = CANVAS_HT / (float) dimy;
X	zoomscale = (int)((scalex > scaley ? scaley : scalex)+.99);
X
X	show_zoom(&ind_switches[ZOOM_SWITCH_INDEX]);
X    }
X    /* restore state */
X    canvas_kbd_proc = save_kbd_proc;
X    canvas_locmove_proc = save_locmove_proc;
X    canvas_leftbut_proc = save_leftbut_proc;
X    canvas_middlebut_proc = save_middlebut_proc;
X    canvas_rightbut_proc = save_rightbut_proc;
X    canvas_kbd_proc = save_kbd_proc;
X    set_cursor(save_cur_cursor);
X    action_on = save_action_on;
X    zoom_in_progress = False;
X}
END_OF_FILE
if test 3733 -ne `wc -c <'w_zoom.c'`; then
    echo shar: \"'w_zoom.c'\" unpacked with wrong size!
fi
# end of 'w_zoom.c'
fi
echo shar: End of archive 3 \(of 27\).
cp /dev/null ark3isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 27 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0

exit 0 # Just in case...
-- 
  // chris@IMD.Sterling.COM       | Send comp.sources.x submissions to:
\X/  Amiga - The only way to fly! |    sources-x@imd.sterling.com
 "It's intuitively obvious to the |
  most casual observer..."        | GCS d+/-- p+ c++ l+ m+ s++/+ g+ w+ t+ r+ x+
