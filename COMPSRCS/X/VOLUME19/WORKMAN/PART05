Newsgroups: comp.sources.x
From: koreth@hyperion.com (Steven Grimm)
Subject: v19i013:  workman - CD player for HP, Sun, DEC, Linux, Part05/09
Message-ID: <1993Mar9.164311.1479@sparky.imd.sterling.com>
X-Md4-Signature: f847bfc96a47fe2ba8225a619d543a68
Date: Tue, 9 Mar 1993 16:43:11 GMT
Approved: chris@sparky.imd.sterling.com

Submitted-by: koreth@hyperion.com (Steven Grimm)
Posting-number: Volume 19, Issue 13
Archive-name: workman/part05
Environment: X11R5 Xview3 HP Sun Dec Linux

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 5 (of 9)."
# Contents:  database.c
# Wrapped by koreth@gerbilmeister on Thu Mar  4 10:04:51 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'database.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'database.c'\"
else
echo shar: Extracting \"'database.c'\" \(22738 characters\)
sed "s/^X//" >'database.c' <<'END_OF_FILE'
X/*
X * @(#)database.c	1.25	12/10/92
X *
X * Manage the CD database.  All these routines assume that the "cd" global
X * structure contains current information (as far as the outside world knows;
X * obviously it won't contain track titles just after a CD is inserted.)
X */
X#define RCFILE "/.workmanrc"
X#define DBFILE "/.workmandb"
Xstatic char *ident = "@(#)database.c	1.25 12/10/92";
X
X#include <errno.h>
X#include <stdio.h>
X#include <sys/types.h>
X#include <fcntl.h>
X#include <sys/param.h>
X#include <unistd.h>
X#include <sys/time.h>
X#include "struct.h"
X
X#define SWALLOW_LINE(fp) { int c; while ((c = getc(fp)) != '\n' && c != EOF); }
X
Xvoid *malloc(), *realloc();
Xchar *strchr(), *getenv();
X
Xint	suppress_locking = 0;	/* Turn off locking of datafile (dangerous) */
X
Xchar	*rcfile = NULL;		/* Personal rcfile */
Xchar	**databases = NULL;	/* NULL-terminated list of databases */
X
Xchar	*otherrc = NULL;	/* Unrecognized cruft from start of rcfile */
X
Xlong	rcpos, rclen;		/* XXX */
X
Xint	found_in_db, found_in_rc;
Xlong	holepos, firstpos;
X
Xextern int cur_stopmode, cur_playnew, cur_ntracks, cur_nsections;
Xextern int mark_a, mark_b;
X
X/* Copy into a malloced string. */
Xvoid
Xstrmcpy(t, s)
X	char	**t, *s;
X{
X	if (*t != NULL)
X		free(*t);
X
X	*t = malloc(strlen(s) + 1);
X	if (*t == NULL)
X	{
X		perror("strmcpy");
X		exit(1);
X	}
X
X	(void) strcpy(*t, s);
X}
X
X/* Add to a malloced string. */
Xvoid
Xstrmcat(t, s)
X	char	**t, *s;
X{
X	int	len = strlen(s) + 1;
X
X	if (*s == '\0')
X		return;
X
X	if (*t != NULL)
X	{
X		len += strlen(*t);
X		*t = realloc(*t, len);
X		if (*t == NULL)
X		{
X			perror("strmcat");
X			exit(1);
X		}
X		strcat(*t, s);
X	}
X	else
X		strmcpy(t, s);
X}
X
X/*
X * split_workmandb()
X *
X * Split the WORKMANDB environment variable, if any, into a list of database
X * files in the global "databases".  If WORKMANDB is not available, make
X * a single entry with $HOME/DBFILE.
X *
X * Also, fill the "rcfile" global with the personal preferences filename.
X */
Xvoid
Xsplit_workmandb()
X{
X	int	ndbs, i;
X	char	*home, *wmdb;
X
X	if (rcfile == NULL && (rcfile = getenv("WORKMANRC")) == NULL)
X	{
X		if ((home = getenv("HOME")) == NULL)
X		{
Xnohome:
X			fprintf(stderr, "$HOME is not set!  Despair!\n");
X			exit(1);
X		}
X
X		rcfile = malloc(strlen(home) + sizeof(RCFILE));
X		if (rcfile == NULL)
X		{
Xnomem:
X			perror("split_workmandb()");
X			exit(1);
X		}
X
X		strcpy(rcfile, home);
X		strcat(rcfile, RCFILE);
X	}
X
X	if (databases == NULL)
X	{
X		if ((wmdb = getenv("WORKMANDB")) == NULL)
X		{
X			if ((home = getenv("HOME")) == NULL)
X				goto nohome;
X
X			wmdb = malloc(strlen(home) + sizeof(DBFILE));
X			if (wmdb == NULL)
X				goto nomem;
X
X			databases = malloc(2 * sizeof (databases[0]));
X			if (databases == NULL)
X				goto nomem;
X
X			strcpy(wmdb, home);
X			strcat(wmdb, DBFILE);
X			databases[0] = wmdb;
X			databases[1] = NULL;
X		}
X		else
X		{
X			ndbs = 1;
X			for (home = wmdb; *home; home++)
X				if (*home == ':')
X				{
X					*home = '\0';
X					ndbs++;
X				}
X			
X			databases = malloc((ndbs + 1) * sizeof(databases[0]));
X			if (databases == NULL)
X				goto nomem;
X			
X			for (i = 0; i < ndbs; i++)
X			{
X				databases[i] = wmdb;
X				wmdb += strlen(wmdb) + 1;
X			}
X
X			databases[i] = NULL;
X		}
X	}
X}
X
X/*
X * print_cdinfo(cd, prefs)
X *
X * cd		A pointer to a cdinfo struct.
X * prefs	Flag: write personal preferences?
X *
X * Print a CD's information (in more or less readable form) to a buffer.
X * Returns a pointer to the buffer.
X *
X * XXX - could be more efficient about calling strmcat() and strlen().
X */
Xchar *
Xprint_cdinfo(cd, prefs)
X	struct cdinfo	*cd;
X	int		prefs;
X{
X	int		i;
X	char		tempbuf[2000];	/* XXX - is this always big enough? */
X	static char	*cdibuf = NULL;
X	struct playlist	*l;
X
X	sprintf(tempbuf, "tracks %d", cd->ntracks);
X	for (i = 0; i < cur_ntracks; i++)
X		if (cd->trk[i].section < 2)
X			sprintf(tempbuf + strlen(tempbuf), " %d",
X				cd->trk[i].start);
X	sprintf(tempbuf + strlen(tempbuf), " %d\n", cd->length);
X
X	strmcpy(&cdibuf, tempbuf);
X
X	if (cur_nsections)
X	{
X		sprintf(tempbuf, "sections %d", cur_nsections);
X		for (i = 0; i < cur_ntracks; i++)
X			if (cd->trk[i].section > 1)
X				sprintf(tempbuf + strlen(tempbuf), " %d",
X					cd->trk[i].start);
X		sprintf(tempbuf + strlen(tempbuf), "\n");
X
X		strmcat(&cdibuf, tempbuf);
X	}
X
X	if (prefs)
X	{
X		if (cd->autoplay)
X			strmcat(&cdibuf, "autoplay\n");
X		for (l = cd->lists; l != NULL && l->name != NULL; l++)
X		{
X			strmcat(&cdibuf, "playlist ");
X
X			i = strlen(cdibuf) - 1;
X			strmcat(&cdibuf, l->name);
X			while (cdibuf[++i])
X				if (cdibuf[i] == ' ' || cdibuf[i] == '\t')
X					cdibuf[i] = '_';
X
X			if (l->list != NULL)
X			{
X				for (i = 0; l->list[i]; i++)
X					;
X				sprintf(tempbuf, " %d", i);
X				strmcat(&cdibuf, tempbuf);
X				for (i = 0; l->list[i]; i++)
X				{
X					sprintf(tempbuf, " %d", l->list[i]);
X					strmcat(&cdibuf, tempbuf);
X				}
X				strmcat(&cdibuf, "\n");
X			}
X			else
X				strmcat(&cdibuf, " 0\n");
X		}
X
X		if (cd->volume)
X		{
X			sprintf(tempbuf, "cdvolume %d\n", cd->volume);
X			strmcat(&cdibuf, tempbuf);
X		}
X
X		if (cd->playmode)
X		{
X			sprintf(tempbuf, "playmode %d\n", cd->playmode);
X			strmcat(&cdibuf, tempbuf);
X		}
X
X		if (mark_a)
X		{
X			sprintf(tempbuf, "mark %d START\n", mark_a);
X			strmcat(&cdibuf, tempbuf);
X		}
X		if (mark_b)
X		{
X			sprintf(tempbuf, "mark %d END\n", mark_b);
X			strmcat(&cdibuf, tempbuf);
X		}
X
X		if (cd->otherrc)
X			strmcat(&cdibuf, cd->otherrc);
X
X		for (i = 0; i < cur_ntracks; i++)
X		{
X			if (cd->trk[i].avoid)
X			{
X				sprintf(tempbuf, "dontplay %d\n", i + 1);
X				strmcat(&cdibuf, tempbuf);
X			}
X			if (cd->trk[i].volume)
X			{
X				sprintf(tempbuf, "volume %d %d\n", i + 1,
X					cd->trk[i].volume);
X				strmcat(&cdibuf, tempbuf);
X			}
X			if (cd->trk[i].otherrc)
X				strmcat(&cdibuf, cd->trk[i].otherrc);
X		}
X	}
X	else
X	{
X		if (cd->cdname[0])
X		{
X			strmcat(&cdibuf, "cdname ");
X			strmcat(&cdibuf, cd->cdname);
X			strmcat(&cdibuf, "\n");
X		}
X
X		if (cd->artist[0])
X		{
X			strmcat(&cdibuf, "artist ");
X			strmcat(&cdibuf, cd->artist);
X			strmcat(&cdibuf, "\n");
X		}
X
X		if (cd->otherdb)
X			strmcat(&cdibuf, cd->otherdb);
X
X		for (i = 0; i < cur_ntracks; i++)
X		{
X			if (cd->trk[i].section > 1)
X				strmcat(&cdibuf, "s-");
X			strmcat(&cdibuf, "track ");
X			if (cd->trk[i].songname != NULL)
X				strmcat(&cdibuf, cd->trk[i].songname);
X			strmcat(&cdibuf, "\n");
X			if (cd->trk[i].contd)
X			{
X				if (cd->trk[i].section > 1)
X					strmcat(&cdibuf, "s-");
X				strmcat(&cdibuf, "continue\n");
X			}
X			if (cd->trk[i].otherdb)
X				strmcat(&cdibuf, cd->trk[i].otherdb);
X		}
X	}
X
X	return (cdibuf);
X}
X
X/*
X * Open the rcfile for reading or writing.
X *
X *	name		Filename
X *	mode		"r" or "w"
X */
XFILE *
Xopen_rcfile(name, mode)
X	char	*name, *mode;
X{
X	FILE	*fp;
X
X	fp = fopen(name, mode);
X	if (fp == NULL)
X	{
X		if (errno != ENOENT || mode[0] == 'w')
X			perror(name);
X	}
X	else if (mode[0] == 'w') /* create -- put data in so locks work */
X	{
X		fputs("# WorkMan database file\n", fp);
X		fclose(fp);
X		fp = fopen(name, "r+");
X		if (fp == NULL)
X			if (errno != ENOENT)
X				perror(name);
X	}
X
X	return (fp);
X}
X
X/*
X * Load a new-format database file, searching for a match with the currently
X * inserted CD.  Modify the in-core copy of the CD info based on what's found
X * in the database.
X *
X * Returns 1 if there was a match or 0 if not.
X *
X *	fp		FILE* of database or rcfile.
X *	prefs		1 if we're searching .workmanrc, 0 for .workmandb
X *	scan		Scan for "tracks" location and entry size only
X *	holesize_wanted	How big a hole we're looking for, if any.
X *
X * If a hole was found along the way, update the global "holepos" with its
X * starting offset in the file.  A hole is defined as a bunch of blank lines
X * preceding a "tracks" line.  Holepos will contain the best match.
X *
X * In addition, "firstpos" will be filled with the position of the first
X * "tracks" keyword, so we know how much room is available for global
X * settings at the rcfile's start.
X */
Xsearch_db(fp, prefs, scan, holesize_wanted)
X	FILE	*fp;
X	int	prefs, scan, holesize_wanted;
X{
X	char	keyword[64], listname[64], *c;
X	int	i, j, track = 0, listsize, ntracks, scratch, searching = 1;
X	int	*trackmap, gotsections = 0;
X	long	pos, thisholepos = -1, holesize = 99991239;
X	struct playlist	*l;
X
X	rclen = 0;
X
X	/* We may not find any holes at all! */
X	if (holesize_wanted)
X		holepos = -1;
X
X	/*
X	 * Since we access track numbers indirectly (to handle sections
X	 * with at least a little elegance), the track mapping needs to be
X	 * set up before we read anything.  Initially it must assume that
X	 * no sections will appear in this datafile.
X	 */
X	trackmap = malloc(sizeof(int) * cur_ntracks);
X	if (trackmap == NULL)
X	{
X		perror("trackmap");
X		exit(1);
X	}
X	j = 0;
X	for (i = 0; i < cd->ntracks; i++)
X	{
X		trackmap[i] = j;
X		while (cd->trk[++j].section > 1)
X			;
X	}
X
X	if (prefs)
X		freeup(&otherrc);
X	firstpos = -1;
X
X	while (! feof(fp))
X	{
X		pos = ftell(fp);
X
X		keyword[0] = '\0';
X		fscanf(fp, "%s", keyword);
X		if (keyword[0] == '\0')		/* Blank line. */
X		{
X			if (thisholepos < 0)
X				thisholepos = pos;
X			continue;
X		}
X
X		/* Strip off "s-" if we've seen a "sections" keyword */
X		if (gotsections && keyword[0] == 's' && keyword[1] == '-')
X			for (c = &keyword[2]; (c[-2] = *c) != '\0'; c++)
X				;
X
X		/* If this is the start of a CD entry, see if it matches. */
X		if (! strcmp(keyword, "tracks"))
X		{
X			/* Is this the end of a hole? */
X			if (holesize_wanted && (thisholepos >= 0))
X			{
X				/* Yep.  Is it better than the last one? */
X				if (pos - thisholepos < holesize && pos -
X						thisholepos >= holesize_wanted)
X				{
X					holepos = thisholepos;
X					holesize = pos - thisholepos;
X				}
X				thisholepos = -1;
X			}
X
X			/* Is it the start of the CD entries? */
X			if (firstpos == -1)
X				firstpos = pos;
X
X			/* Is this the end of the entry we really wanted? */
X			if (! searching)
X			{
X				rclen = pos - rcpos;
X				break;
X			}
X
X			fscanf(fp, "%d", &ntracks);
X
X			if (ntracks != cd->ntracks)
X			{
Xchomp:
X				SWALLOW_LINE(fp);
X				continue;
X			}
X
X			track = 0;
X			for (i = 0; i < ntracks; i++)
X			{
X				fscanf(fp, "%d", &scratch);
X				if (scratch != cd->trk[track].start)
X					break;
X				while (cd->trk[++track].section > 1)
X					;
X			}
X			if (i != ntracks)
X				goto chomp;
X
X			fscanf(fp, "%d", &scratch);
X
X			if (scratch != -1 && scratch != cd->length)
X				goto chomp;
X
X			/* Found it! */
X			rcpos = pos;
X			track = 0;
X			searching = 0;
X
X			SWALLOW_LINE(fp);	/* Get rid of newline */
X		}
X
X		/* Global mode stuff goes here */
X		else if (! strcmp(keyword, "whendone"))
X		{
X			getc(fp);
X			i = getc(fp);	/* only first letter is used */
X			if (cur_stopmode == -1)	/* user's setting preferred */
X				cur_stopmode = i == 's' ? 0 : i == 'r' ? 1 : 2;
X			do
X				i = getc(fp);
X			while (i != '\n' && i != EOF);
X		}
X
X		else if (! strcmp(keyword, "playnew"))
X		{
X			if (cur_playnew == -1)
X				cur_playnew = 1;
X		}
X
X		/* If we're searching, skip to the next "tracks" line. */
X		else if ((searching || scan) && !(prefs && firstpos == -1))
X			SWALLOW_LINE(fp)
X
X		else if (! strcmp(keyword, "sections"))
X		{
X			gotsections = 1;
X			fscanf(fp, "%d", &ntracks);
X
X			free(trackmap);
X			trackmap = (int *) malloc(sizeof(int) *
X						(cur_ntracks + ntracks));
X			if (trackmap == NULL)
X			{
X				perror("section mapping");
X				exit(1);
X			}
X
X			/*
X			 * If sections are already defined, use these as a
X			 * reference, mapping this CD entry's section numbers
X			 * to the ones in core.
X			 *
X			 * Otherwise, split the CD up according to the sections
X			 * listed here.
X			 */
X			if (cur_nsections)
X			{
X				track = 0;
X				i = 0;
X				while (ntracks)
X				{
X					ntracks--;
X					fscanf(fp, "%d", &scratch);
X					while (scratch > cd->trk[track].start)
X					{
X						if (cd->trk[track].section < 2)
X							trackmap[i++] = track;
X						++track;
X
X						if (track == cur_ntracks)
X							break;
X					}
X
X					/* rc has later sections than db... */
X					if (track == cur_ntracks)
X						break;
X
X					/* Matches can be approximate */
X					if (scratch+75 > cd->trk[track].start &&
X					    scratch-75 < cd->trk[track].start)
X						trackmap[i++] = track++;
X					else
X						trackmap[i++] = -1;
X					
X					if (track == cur_ntracks)
X						break;
X				}
X
X				/* This only happens if track == cur_ntracks */
X				while (ntracks--)
X					trackmap[i++] = -1;
X
X				while (track < cur_ntracks)
X				{
X					if (cd->trk[track].section < 2)
X						trackmap[i++] = track;
X					track++;
X				}
X
X				track = 0;
X				SWALLOW_LINE(fp);
X			}
X			else
X			{
X				while (ntracks--)
X				{
X					fscanf(fp, "%d", &scratch);
X					split_trackinfo(scratch);
X				}
X
X				for (i = 0; i < cur_ntracks; i++)
X				{
X					trackmap[i] = i;
X					/* split_trackinfo() sets this */
X					cd->trk[i].contd = 0;
X				}
X
X				SWALLOW_LINE(fp);
X			}
X		}
X
X		else if (! strcmp(keyword, "track"))
X		{
X			char buf[502];
X
X			getc(fp);	/* lose the space */
X			/* don't overwrite existing track names. */
X			if (trackmap[track] == -1)
X				SWALLOW_LINE(fp)
X			else if (cd->trk[trackmap[track]].songname &&
X					cd->trk[trackmap[track]].songname[0])
X				do
X					i = getc(fp);
X				while (i != '\n' && i != EOF);
X			else
X			{
X				fgets(buf, sizeof(buf), fp);
X				if (i = strlen(buf))
X					buf[i - 1] = '\0';
X				strmcpy(&cd->trk[trackmap[track]].songname,
X									buf);
X			}
X			track++;
X		}
X
X		else if (! strcmp(keyword, "playmode"))
X			fscanf(fp, "%d", &cd->playmode);
X
X		else if (! strcmp(keyword, "autoplay"))
X			cd->autoplay = 1;
X
X		else if (! strcmp(keyword, "cdname"))
X		{
X			getc(fp);	/* lose the space */
X			/* don't overwrite existing cd name. */
X			if (cd->cdname[0])
X				do
X					i = getc(fp);
X				while (i != '\n' && i != EOF);
X			else
X			{
X				fgets(cd->cdname, sizeof(cd->cdname), fp);
X				if (i = strlen(cd->cdname))
X					cd->cdname[i - 1] = '\0';
X			}
X		}
X
X		else if (! strcmp(keyword, "artist"))
X		{
X			getc(fp);	/* lose the space */
X			/* don't overwrite existing artist names. */
X			if (cd->artist[0])
X				do
X					i = getc(fp);
X				while (i != '\n' && i != EOF);
X			else
X			{
X				fgets(cd->artist, sizeof(cd->artist), fp);
X				if (i = strlen(cd->artist))
X					cd->artist[i - 1] = '\0';
X			}
X		}
X
X		else if (! strcmp(keyword, "cdvolume"))
X			fscanf(fp, "%d", &cd->volume);
X
X		else if (! strcmp(keyword, "dontplay"))
X		{
X			fscanf(fp, "%d", &i);
X			if (trackmap[i - 1] != -1)
X				cd->trk[trackmap[i - 1]].avoid = 1;
X		}
X
X		else if (! strcmp(keyword, "continue"))
X		{
X			if (trackmap[track - 1] != -1)
X				cd->trk[trackmap[track - 1]].contd = 1;
X		}
X
X		else if (! strcmp(keyword, "volume"))
X		{
X			fscanf(fp, "%d", &i);
X			if (trackmap[i - 1] == -1)
X				SWALLOW_LINE(fp)
X			else
X			{
X				i = trackmap[i - 1];
X				fscanf(fp, "%d", &cd->trk[i].volume);
X				if (cd->trk[i].volume > 32)
X					cd->trk[i].volume = 0;
X			}
X		}
X
X		else if (! strcmp(keyword, "playlist"))
X		{
X			getc(fp);
X			fscanf(fp, "%s", listname);
X
X/* XXX take this out at some point */
X			if (! strcmp(listname, "Default"))
X				strcpy(listname, "List A");
X
X			for (i = 0; listname[i]; i++)
X				if (listname[i] == '_')
X					listname[i] = ' ';
X
X			l = new_list(cd, listname);
X			if (l == NULL)
X			{
Xplnomem:
X				perror("playlist read");
X				exit(1);
X			}
X
X			fscanf(fp, "%d", &listsize);
X
X			l->list = malloc(sizeof(int) * (listsize + 1));
X			if (l->list == NULL)
X				goto plnomem;
X
X			/* Leave out tracks that weren't in .workmandb. */
X			j = 0;
X			for (i = 0; i < listsize; i++)
X			{
X				fscanf(fp, "%d", &scratch);
X				scratch = trackmap[scratch - 1];
X				if (scratch != -1)
X					l->list[j++] = scratch + 1;
X			}
X
X			l->list[j] = 0;
X		}
X
X		else if (! strcmp(keyword, "mark"))
X		{
X			int mark_val = -1, mark_namelen;
X			char mark_name[32];
X
X			fscanf(fp, "%d", &mark_val);
X			if (mark_val == -1)
X				goto chomp;
X
X			if (getc(fp) != ' ')
X				continue;
X
X			fgets(mark_name, sizeof(mark_name), fp);
X			if (mark_namelen = strlen(mark_name))
X				mark_name[mark_namelen - 1] = '\0';
X
X			if (! strcmp(mark_name, "START"))
X				set_abtimer(0, mark_val);
X			else if (! strcmp(mark_name, "END"))
X				set_abtimer(1, mark_val);
X		}
X
X		/* Unrecognized keyword.  Put it in the right place. */
X		else
X		{
X			char	**buf, input[BUFSIZ];
X
X			if (track && trackmap[track - 1] == -1)
X			{
X				SWALLOW_LINE(fp);
X				continue;
X			}
X
X			i = track ? trackmap[track - 1] : 0;
X			buf = prefs ? i ? &cd->trk[i].otherrc : &cd->otherrc :
X				i ? &cd->trk[i].otherdb : &cd->otherdb;
X			if (firstpos == -1)
X				if (prefs)
X					buf = &otherrc;
X				else
X					goto chomp;
X
X			strmcat(buf, keyword);
X			do {
X				input[sizeof(input) - 1] = 'x';
X				fgets(input, sizeof(input), fp);
X				strmcat(buf, input);
X			} while (input[sizeof(input) - 1] != 'x');
X		}
X	}
X
X	if (rclen == 0 && !searching)
X		rclen = pos - rcpos;
X
X	return (! searching);
X}
X
X/*
X * Delay some amount of time without using interval timers.
X */
Xvoid
Xspinwheels(secs)
X	int	secs;
X{
X	struct timeval	tv;
X
X	tv.tv_usec = 0;
X	tv.tv_sec = secs;
X	select(0, NULL, NULL, NULL, &tv);
X}
X
X/*
X * Lock a file.  Time out after a little while if we can't get a lock;
X * this usually means the locking system is broken.
X *
X * Unfortunately, if there are lots of people contending for a lock,
X * this can result in the file not getting locked when it probably should.
X */
Xint
Xlockit(fd, type)
X	int	fd;
X	int	type;
X{
X	struct flock	fl;
X	int		result, timer = 0;
X
X	if (suppress_locking)
X		return (0);
X
X	fl.l_type = type;
X	fl.l_whence = 0;
X	fl.l_start = 0;
X	fl.l_len = 0;
X
X	while ((result = fcntl(fd, F_SETLK, &fl)) < 0)
X	{
X		if (errno != EACCES || errno != EAGAIN)
X			break;
X		if (timer++ == 30)
X		{
X			errno = ETIMEDOUT;
X			break;
X		}
X
X		spinwheels(1);
X	}
X
X	return (result);
X}
X
X/*
X * Search all the database files and our personal preference file for
X * more information about the current CD.
X */
Xvoid
Xload()
X{
X	FILE		*fp;
X	char		**dbfile;
X	int		locked = 0;
X
X	if (databases == NULL)
X		split_workmandb();
X
X	dbfile = databases;
X
X	found_in_db = 0;
X
X	do {
X		fp = open_rcfile(*dbfile, "r");
X		if (fp != NULL)
X		{
X			if (lockit(fileno(fp), F_RDLCK))
X				perror("Couldn't get read lock");
X			else
X				locked = 1;
X
X			if (search_db(fp, 0, 0, 0))
X			{
X				found_in_db = 1;
X				cd->whichdb = *dbfile;
X			}
X
X			if (locked && lockit(fileno(fp), F_UNLCK))
X				perror("Couldn't relinquish lock");
X
X			fclose(fp);
X		}
X	} while (*++dbfile != NULL && cd->whichdb == NULL);
X
X	fp = open_rcfile(rcfile, "r");
X	if (fp != NULL)
X	{
X		locked = 0;
X		if (lockit(fileno(fp), F_RDLCK))
X			perror("Couldn't get read lock");
X		else
X			locked = 1;
X
X		rcpos = 0;
X		found_in_rc = search_db(fp, 1, 0, 0);
X		if (! found_in_rc)
X			cd->autoplay = get_playnew();
X
X		if (locked && lockit(fileno(fp), F_UNLCK))
X			perror("Couldn't relinquish lock");
X
X		fclose(fp);
X	}
X
X	if (cur_playnew == -1)
X		cur_playnew = 0;
X}
X
X/*
X * save_globals()
X *
X * Save the global preferences, scooting CD entries to the end if needed.
X * The assumption here is that the rcfile is locked, and that firstpos has
X * been set by a previous scan.
X */
Xvoid
Xsave_globals(fp)
XFILE *fp;
X{
X	char	*globes = NULL, *cdentry = NULL, temp[100];
X	long	curpos;
X	int	globesize, hit_cdent = 0, c;
X
X	if (otherrc)
X		strmcpy(&globes, otherrc);
X
X	if (cur_stopmode == 1 || cur_stopmode == 2)
X	{
X		sprintf(temp, "whendone %s\n", cur_stopmode == 1 ? "repeat" :
X			"eject");
X		strmcat(&globes, temp);
X	}
X
X	if (cur_playnew == 1)
X		strmcat(&globes, "playnew\n");
X
X	curpos = firstpos;
X	if (curpos < 0)
X		curpos = 0;
X
X	fseek(fp, curpos, SEEK_SET);
X
X	if (firstpos < (globesize = globes != NULL ? strlen(globes) : 0))
X	{
X		while (1)
X		{
X			temp[sizeof(temp)-1] = 'x';
X
X			if (fgets(temp, sizeof(temp), fp) == NULL)
X			{
X				fseek(fp, 0, SEEK_SET);
X				if (globes != NULL)
X				{
X					fwrite(globes, globesize, 1, fp);
X					free(globes);
X				}
X				if (cdentry != NULL)
X				{
X					fwrite(cdentry, strlen(cdentry), 1, fp);
X					free(cdentry);
X				}
X				return;
X			}
X
X			if (! strncmp(temp, "tracks ", 7))
X			{
X				hit_cdent = 1;
X				if (curpos >= globesize)
X					break;
X			}
X
X			if (! hit_cdent)
X			{
X				curpos += strlen(temp);
X				if (temp[sizeof(temp)-1] == '\0')
X					while ((c = getc(fp)) != '\n' &&
X								c != EOF)
X						curpos++;
X				if (c == '\n')
X					curpos++;
X
X				continue;
X			}
X
X			strmcat(&cdentry, temp);
X			curpos += strlen(temp);
X			while (temp[sizeof(temp)-1] == '\0')
X			{
X				temp[sizeof(temp)-1] = 'x';
X				if (fgets(temp, sizeof(temp), fp) == NULL)
X					break;
X				strmcat(&cdentry, temp);
X				curpos += strlen(temp);
X			}
X		} 
X
X		if (cdentry != NULL)
X		{
X			fseek(fp, 0, SEEK_END);
X			fwrite(cdentry, strlen(cdentry), 1, fp);
X			free(cdentry);
X		}
X	}
X
X	if (globes != NULL)
X	{
X		fseek(fp, 0, SEEK_SET);
X		fwrite(globes, globesize, 1, fp);
X		free(globes);
X	}
X
X	while (globesize++ < curpos)
X		putc('\n', fp);
X}
X
X/*
X * save_entry()
X *
X * Save the CD information to one database.
X *
X *	fp	FILE* of database to save to.
X *	pref	0 for hard data, 1 for preferences.
X *
X * If an entry for this CD exists already, overwrite it with the new entry
X * if the new entry is the same size or smaller, or with newlines if the new
X * entry is larger (in which case the new entry is appended to the file.)
X *
X * Also, if the preference information is being updated, save it to the
X * file while we've got it locked.  Scoot stuff from the beginning of
X * the file to the end as needed to facilitate this.
X *
X * XXX Preference-saving should probably be done elsewhere, like in an
X * Apply button on the Goodies popup.
X */
Xsave_entry(fp, pref)
X	FILE	*fp;
X	int	pref;
X{
X	char		*buf;
X	int		len, i, locked = 0;
X
X	if (lockit(fileno(fp), F_WRLCK))
X		perror("Warning: Couldn't get write lock");
X	else
X		locked = 1;
X
X	buf = print_cdinfo(cd, pref);
X	len = strlen(buf);	/* doesn't return if there's an error */
X
X	rcpos = -1;
X	search_db(fp, pref, 1, len);
X	if (rcpos != -1)		/* XXX */
X	{
X		fseek(fp, rcpos, SEEK_SET);
X		if (rclen >= len && holepos == -1)
X		{
X			fputs(buf, fp);
X			for (i = len; i < rclen; i++)
X				fputc('\n', fp);
X		}
X		else
X		{
X			for (i = 0; i < rclen; i++)
X				fputc('\n', fp);
X			if (holepos >= 0)
X				fseek(fp, holepos, SEEK_SET);
X			else
X				fseek(fp, 0, SEEK_END);
X			fputs(buf, fp);
X		}
X	}
X	else
X	{
X		if (holepos >= 0)
X			fseek(fp, holepos, SEEK_SET);
X		else
X			fseek(fp, 0, SEEK_END);
X		fputs(buf, fp);
X	}
X
X	if (pref)
X		save_globals(fp);
X
X	fflush(fp);
X
X	if (locked && lockit(fileno(fp), F_UNLCK))
X		perror("Warning: Couldn't relinquish write lock");
X}
X
X/*
X * save()
X *
X * Save CD information to the appropriate datafile (the first file in the
X * list, unless the entry came from another database file) and to the
X * personal prefs file.
X */
Xsave()
X{
X	FILE		*fp;
X
X	fp = open_rcfile(rcfile, "r+");
X	if (fp == NULL)
X	{
X		if (errno == ENOENT)	/* doesn't exist already */
X			fp = open_rcfile(rcfile, "w");
X		if (fp == NULL)
X			return (0);
X	}
X
X	save_entry(fp, 1);
X
X	fclose(fp);
X
X	if (cd->whichdb == NULL || access(cd->whichdb, W_OK))
X		cd->whichdb = databases[0];
X
X	if ((fp = open_rcfile(cd->whichdb, "r+")) == NULL)
X	{
X		if (errno == ENOENT)
X			fp = open_rcfile(cd->whichdb, "w");
X		if (fp == NULL)
X			return (0);
X	}
X
X	save_entry(fp, 0);
X	fclose(fp);
X
X	return (1);
X}
END_OF_FILE
if test 22738 -ne `wc -c <'database.c'`; then
    echo shar: \"'database.c'\" unpacked with wrong size!
fi
# end of 'database.c'
fi
echo shar: End of archive 5 \(of 9\).
cp /dev/null ark5isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 9 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0

exit 0 # Just in case...
-- 
  // chris@IMD.Sterling.COM            | Send comp.sources.x submissions to:
\X/  Amiga - The only way to fly!      |
 "It's intuitively obvious to the most |    sources-x@imd.sterling.com
  casual observer..."                  |
