Path: uunet!elroy.jpl.nasa.gov!swrinde!mips!msi!dcmartin
From: mppa3@syma.sussex.ac.uk (Alan Richardson)
Newsgroups: comp.sources.x
Subject: v18i021: Xrotfont - draw rotated text, Part03/03
Message-ID: <1992Jul14.152947.14780@msi.com>
Date: 14 Jul 92 15:29:47 GMT
References: <csx-18i019-xrotfont@uunet.UU.NET>
Sender: dcmartin@msi.com (David C. Martin - Moderator)
Organization: Molecular Simulations, Inc.
Lines: 736
Approved: dcmartin@msi.com
Originator: dcmartin@fascet

Submitted-by: Alan Richardson <mppa3@syma.sussex.ac.uk>
Posting-number: Volume 18, Issue 21
Archive-name: xrotfont/part03

#!/bin/sh
# this is part.03 (part 3 of a multipart archive)
# do not concatenate these parts, unpack them in order with /bin/sh
# file main.c continued
#
if test ! -r _shar_seq_.tmp; then
	echo 'Please unpack part 1 first!'
	exit 1
fi
(read Scheck
 if test "$Scheck" != 3; then
	echo Please unpack part "$Scheck" next!
	exit 1
 else
	exit 0
 fi
) < _shar_seq_.tmp || exit 1
if test ! -f _shar_wnt_.tmp; then
	echo 'x - still skipping main.c'
else
echo 'x - continuing file main.c'
sed 's/^X//' << 'SHAR_EOF' >> 'main.c' &&
X
/* xrotfont, Copyright (c) 1992 Alan Richardson (mppa3@uk.ac.sussex.syma)
X *
X * Permission to use, copy, modify, and distribute this software and its
X * documentation ON A NONPROFIT BASIS is hereby granted, provided that
X * the above copyright notice appear in all copies and that both that
X * copyright notice and this permission notice appear in supporting
X * documentation.  All work developed as a consequence of the use of
X * this program should duly acknowledge such use. No representations are
X * made about the suitability of this software for any purpose.  It is
X * provided "as is" without express or implied warranty.
X */
X
/* ***************************************************************************
X 
X   main.c -    the main controlling function
X  
X   Functions:  main()
X 
X   Date:       8/5/92  
X
X   Copyright   (c) 1992 Alan Richardson
X
X  ************************************************************************* */
X
X
#include "all.h"
X
extern void nap();
extern void proc_event();
extern void paint_screen();
extern void openwin();
X
/* the main procedure ... */
main(argc,argv)
X int argc;
X char *argv[];
{
X /* value of pi ... */
X pi=4*atan((double)1);
X
X /* window size ... */
X W=500;
X H=500;
X
X /* check command line options ... */
X options(argc, argv);
X
X /* open the window ... */
X openwin(argc,argv); 
X
X /* draw the screen ... */
X paint_screen();
X
X /* event loop ... */
X while(1)  /* loop for ever */
X {
X   proc_event();
X   nap(200000);
X }
X
}
X
X
SHAR_EOF
echo 'File main.c is complete' &&
chmod 0644 main.c ||
echo 'restore of main.c failed'
Wc_c="`wc -c < 'main.c'`"
test 1542 -eq "$Wc_c" ||
	echo 'main.c: original size 1542, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= misc.c ==============
if test -f 'misc.c' -a X"$1" != X"-c"; then
	echo 'x - skipping misc.c (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting misc.c (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'misc.c' &&
/* ***************************************************************************
X
X   misc.c -    miscellaneous routines
X
X   Functions:  AllocNamedColor()
X               nap()
X
X   Date:       8/5/92
X
X   Copyright   (c) 1992 Alan Richardson 
X
X   ************************************************************************ */
X
X
#include "all.h"
X
void nap();
long AllocNamedColor();
X
/* returns the pixel corresponding to a named colour */
long AllocNamedColor(colname)
X char *colname;
{
X long pixel;
X XColor scrncol, excol;
X
X /* monochrome display ? ... */
X if(mono) pixel=WhitePixel(dpy, screen);
X
X else
X /* colour ... */
X {
X  if(XAllocNamedColor(dpy, DefaultColormap(dpy, screen), colname,
X                      &scrncol, &excol))
X     { pixel=scrncol.pixel; }
X  else
X     { pixel=WhitePixel(dpy, screen); }
X }
X
X return pixel;
}
X
X
X
/* routine to sleep for so many microseconds (at least) */
#ifdef NO_USLEEP
#include <sys/types.h>
#include <sys/time.h>
#endif
X
void nap (usecs)
X unsigned long usecs;
{
X /* systems without the usleep function ... */
#ifdef NO_USLEEP
X struct timeval tv;
X tv.tv_sec  = usecs / 1000000L;
X tv.tv_usec = usecs % 1000000L;
X (void) select (0, 0, 0, 0, &tv);
X
#else
X usleep(usecs);
X
#endif
}
X
SHAR_EOF
chmod 0644 misc.c ||
echo 'restore of misc.c failed'
Wc_c="`wc -c < 'misc.c'`"
test 1212 -eq "$Wc_c" ||
	echo 'misc.c: original size 1212, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= openwin.c ==============
if test -f 'openwin.c' -a X"$1" != X"-c"; then
	echo 'x - skipping openwin.c (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting openwin.c (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'openwin.c' &&
/* ***************************************************************************
X
X   openwin.c - initialise X and open a window
X
X   Functions:  openwin()
X
X   Date:       8/5/92
X
X   Copyright   (c) 1992 Alan Richardson
X
X   ************************************************************************ */
X
#include "all.h"
X
extern void loadfont();
extern void options();
extern char *getenv();
X
void openwin();
X
/* initialise x11 and open a window */
void openwin(argc,argv)
X int argc;
X char *argv[];
{
X GC cleargc;
X XSetWindowAttributes attr;
X
X /* establish connection to display ... */
X if(host==(char *)NULL)
X {
X /* get hostname from enviroment if not specified ... */
X if((host=getenv("DISPLAY"))==NULL)
X   {fprintf(stderr,"Can't connect to host\n");
X    exit(); }
X }
X
X /* open the display ... */
X if((dpy=XOpenDisplay(host))==NULL)   
X   {fprintf(stderr,"Can't open display\n");
X    exit();}
X
X /* display hardware info ... */
X screen=DefaultScreen(dpy);
X depth=DefaultDepth(dpy,screen);
X root=DefaultRootWindow(dpy);
X
X /* monochrome ? ... */
X if(depth==1) mono=1;
X else         mono=0;
X
X /* the events we're interested in ... */
X attr.event_mask=ExposureMask|KeyPressMask;
X
X /* open the window ... */
X gowin=XCreateWindow(dpy, root, 0, 0, W, H,
X                     0, depth, InputOutput, DefaultVisual(dpy,screen),
X                     CWEventMask, &attr);
X
X /* for debugging ... */
X /* XSynchronize(dpy, True);*/
X
X /* window name ... */
X XSetStandardProperties(dpy, gowin, "Rotated text",
X                            NULL, NULL, argv, argc, 0); 
X
X /* create pixmap and set window background to it 
X    - all drawing will be done in this pixmap, so that on Expose events
X      all we need do is clear the window to restore the contents ... */
X gopix=XCreatePixmap(dpy, gowin, W, H, depth);
X
X /* clear the pixmap ... */
X cleargc=XCreateGC(dpy, gowin, NULL, 0);
X XSetForeground(dpy, cleargc, BlackPixel(dpy, screen));
X XFillRectangle(dpy, gopix, cleargc, 0, 0, W, H);
X XFreeGC(dpy, cleargc);
X
X XSetWindowBackgroundPixmap(dpy, gowin, gopix);
X
X /* set the default font ... */
X loadfont("fixed");
X
X /* make the window visible ... */
X XMapWindow(dpy, gowin); 
X
}
X
SHAR_EOF
chmod 0644 openwin.c ||
echo 'restore of openwin.c failed'
Wc_c="`wc -c < 'openwin.c'`"
test 2155 -eq "$Wc_c" ||
	echo 'openwin.c: original size 2155, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= options.c ==============
if test -f 'options.c' -a X"$1" != X"-c"; then
	echo 'x - skipping options.c (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting options.c (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'options.c' &&
/* ***************************************************************************
X
X   options.c - routines to interpret command line options
X                and print a help message
X
X   Functions:  options()
X               usage()
X
X   Date:       8/5/92
X
X   Copyright   (c) 1992 Alan Richardson 
X
X   ************************************************************************ */
X
X
#include "all.h"
X
void options();
void usage();
X
/* handle command line options */
void options(argc, argv)
X int argc;
X char *argv[];
{
X int i;
X
X /* check command line arguments ... */
X for (i=1; i<argc; i++)
X { 
X   /* which x-server ... */
X   if(strcmp(argv[i],"-display")==0)
X     { if(i==argc-1) usage(argc, argv);
X       host=argv[++i]; }
X
X   else usage(argc, argv);
X
X }
X
}
X
X
/* help message */
void usage(argc, argv)
X int argc;
X char *argv[];
{
X fprintf(stderr,"usage: %s [options]\n",argv[0]);
X fprintf(stderr,
X   "         -display HOST:0.0                 : where to display window\n\n");
X exit();
}
SHAR_EOF
chmod 0644 options.c ||
echo 'restore of options.c failed'
Wc_c="`wc -c < 'options.c'`"
test 983 -eq "$Wc_c" ||
	echo 'options.c: original size 983, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= paintscreen.c ==============
if test -f 'paintscreen.c' -a X"$1" != X"-c"; then
	echo 'x - skipping paintscreen.c (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting paintscreen.c (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'paintscreen.c' &&
/* ***************************************************************************
X
X   paintscreen.c - routine to build up the window contents
X                
X   Functions:  paintscreen()
X               
X   Date:       8/5/92
X
X   Copyright   (c) 1992 Alan Richardson
X
X   ************************************************************************ */
X
X
#include "all.h"
X
extern void drawtext();
extern void rotatedtext();
extern void loadfont();
extern void hersheytext();
X
void paint_screen();
X
/* what to paint in the window */
void paint_screen()
{
X loadfont("-adobe-courier-bold-o-normal--14-140-75-75-m-90-iso8859-1");
X
X drawtext("This is just XDrawImageString", 250, 20, CENTRE, "cyan");
X drawtext("like you normally use ...", 250, 40, CENTRE, "cyan");
X
X loadfont("-adobe-courier-bold-r-normal--14-140-75-75-m-90-iso8859-1");
X
X rotatedtext("..but this is  ", 250, 170, RALLIGN, 0., "green");
X rotatedtext("rotated  ", 250, 170, RALLIGN, -45., "green");
X rotatedtext("snf text  ", 250, 170, RALLIGN, -90., "green");
X rotatedtext("  painted", 250, 170, LALLIGN, 45., "green");
X rotatedtext("  using XImages", 250, 170, LALLIGN, 0., "green");
X
X loadfont("Hershey-Gothic-English");
X
X hersheytext("This is", 250, 220, 30, CENTRE, 0., "yellow");
X hersheytext("a Hershey", 250, 270, 50, CENTRE, 0., "yellow");
X hersheytext("outline font", 250, 330, 70, CENTRE, 0., "yellow");
X
X loadfont("Hershey-Script-Complex");
X
X hersheytext("AND", 100, 430, 50, CENTRE, 45., "cyan");
X hersheytext("SO", 200, 430, 50, CENTRE, 45., "cyan");
X hersheytext("IS", 300, 430, 50, CENTRE, 45., "cyan");
X hersheytext("THIS", 400, 430, 50, CENTRE, 45., "cyan");
X
X loadfont("fixed");
X
X rotatedtext("This would look good along the y-axis of a graph..",
X                  20, 250, CENTRE, 90., "cyan");
X
X loadfont("Hershey-Plain-Simplex");
X
X hersheytext("..maybe this would too ?",
X                  480, 250, 20, CENTRE, -90., "cyan");
X
X 
}
X
SHAR_EOF
chmod 0644 paintscreen.c ||
echo 'restore of paintscreen.c failed'
Wc_c="`wc -c < 'paintscreen.c'`"
test 1908 -eq "$Wc_c" ||
	echo 'paintscreen.c: original size 1908, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= Makefile.std ==============
if test -f 'Makefile.std' -a X"$1" != X"-c"; then
	echo 'x - skipping Makefile.std (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting Makefile.std (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'Makefile.std' &&
# Makefile generated by imake - do not edit!
# $XConsortium: imake.c,v 1.51 89/12/12 12:37:30 jim Exp $
#
# The cpp used on this machine replaces all newlines and multiple tabs and
# spaces in a macro expansion with a single space.  Imake tries to compensate
# for this, but is not always successful.
#
X
###########################################################################
# Makefile generated from "Imake.tmpl" and </tmp/IIf.a04747>
# $XConsortium: Imake.tmpl,v 1.77 89/12/18 17:01:37 jim Exp $
#
# Platform-specific parameters may be set in the appropriate .cf
# configuration files.  Site-wide parameters may be set in the file
# site.def.  Full rebuilds are recommended if any parameters are changed.
#
# If your C preprocessor doesn't define any unique symbols, you'll need
# to set BOOTSTRAPCFLAGS when rebuilding imake (usually when doing
# "make Makefile", "make Makefiles", or "make World").
#
# If you absolutely can't get imake to work, you'll need to set the
# variables at the top of each Makefile as well as the dependencies at the
# bottom (makedepend will do this automatically).
#
X
###########################################################################
# platform-specific configuration parameters - edit sol.cf to change
X
# platform:  $XConsortium: sun.cf,v 1.32 89/10/11 18:54:52 jim Exp $
# operating system:  SunOS 4.0.3
X
###########################################################################
# site-specific configuration parameters - edit site.def to change
X
# site:  $XConsortium: site.def,v 1.21 89/12/06 11:46:50 jim Exp $
X
X            SHELL = /bin/sh
X
X              TOP = .
X      CURRENT_DIR = .
X
X               AR = ar cq
X  BOOTSTRAPCFLAGS =
X               CC = cc
X
X         COMPRESS = compress
X              CPP = /lib/cpp $(STD_CPP_DEFINES)
X    PREPROCESSCMD = cc -E $(STD_CPP_DEFINES)
X          INSTALL = install
X               LD = ld
X             LINT = lint
X      LINTLIBFLAG = -C
X         LINTOPTS = -axz
X               LN = ln -s
X             MAKE = make
X               MV = mv
X               CP = cp
X           RANLIB = ranlib
X  RANLIBINSTFLAGS =
X               RM = rm -f
X     STD_INCLUDES =
X  STD_CPP_DEFINES =
X      STD_DEFINES =
X EXTRA_LOAD_FLAGS =
X  EXTRA_LIBRARIES =
X             TAGS = ctags
X
X    SHAREDCODEDEF = -DSHAREDCODE
X         SHLIBDEF = -DSUNSHLIB
X
X    PROTO_DEFINES =
X
X     INSTPGMFLAGS =
X
X     INSTBINFLAGS = -m 0755
X     INSTUIDFLAGS = -m 4755
X     INSTLIBFLAGS = -m 0664
X     INSTINCFLAGS = -m 0444
X     INSTMANFLAGS = -m 0444
X     INSTDATFLAGS = -m 0444
X    INSTKMEMFLAGS = -g kmem -m 2755
X
X          DESTDIR =
X
X     TOP_INCLUDES = -I$(INCROOT)
X
X      CDEBUGFLAGS = -O
X        CCOPTIONS =
X      COMPATFLAGS =
X
X         SOLTOP = $(TOP)/../Solbourne
X       SOLOILIB = -L$(SOLTOP)/OI -lOI
X      ALLINCLUDES = -I$(SOLTOP)/OI $(STD_INCLUDES) $(TOP_INCLUDES) $(INCLUDES) $(EXTRA_INCLUDES)
X       ALLDEFINES = $(ALLINCLUDES) $(STD_DEFINES) $(PROTO_DEFINES) $(DEFINES) $(COMPATFLAGS)
X           CFLAGS = $(CDEBUGFLAGS) $(CCOPTIONS) $(ALLDEFINES)
X        LINTFLAGS = $(LINTOPTS) -DLINT $(ALLDEFINES)
X           LDLIBS = $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)
X        LDOPTIONS = $(CDEBUGFLAGS) $(CCOPTIONS)
X   LDCOMBINEFLAGS = -X -r
X
X        MACROFILE = sol.cf
X           RM_CMD = $(RM) *.CKP *.ln *.BAK *.bak *.o core errs ,* *~ *.a .emacs_* tags TAGS make.log MakeOut
X
X    IMAKE_DEFINES =
X
X         IRULESRC = $(CONFIGDIR)
X        IMAKE_CMD = $(IMAKE) -DUseInstalled -I$(IRULESRC) $(IMAKE_DEFINES)
X
X     ICONFIGFILES = $(IRULESRC)/Imake.tmpl $(IRULESRC)/Imake.rules \
X			$(IRULESRC)/Project.tmpl $(IRULESRC)/site.def \
X			$(IRULESRC)/$(MACROFILE) $(EXTRA_ICONFIGFILES)
X
###########################################################################
# X Window System Build Parameters
# $XConsortium: Project.tmpl,v 1.63 89/12/18 16:46:44 jim Exp $
X
###########################################################################
# X Window System make variables; this need to be coordinated with rules
# $XConsortium: Project.tmpl,v 1.63 89/12/18 16:46:44 jim Exp $
X
X          PATHSEP = /
X        USRLIBDIR = $(DESTDIR)/usr/lib
X           BINDIR = $(DESTDIR)/usr/bin/X11
X          INCROOT = $(DESTDIR)/usr/include
X     BUILDINCROOT = $(TOP)
X      BUILDINCDIR = $(BUILDINCROOT)/X11
X      BUILDINCTOP = ..
X           INCDIR = $(INCROOT)/X11
X           ADMDIR = $(DESTDIR)/usr/adm
X           LIBDIR = $(USRLIBDIR)/X11
X        CONFIGDIR = $(LIBDIR)/config
X       LINTLIBDIR = $(USRLIBDIR)/lint
X
X          FONTDIR = $(LIBDIR)/fonts
X         XINITDIR = $(LIBDIR)/xinit
X           XDMDIR = $(LIBDIR)/xdm
X           AWMDIR = $(LIBDIR)/awm
X           TWMDIR = $(LIBDIR)/twm
X           GWMDIR = $(LIBDIR)/gwm
X          MANPATH = $(DESTDIR)/usr/man
X    MANSOURCEPATH = $(MANPATH)/man
X           MANDIR = $(MANSOURCEPATH)n
X        LIBMANDIR = $(MANSOURCEPATH)3
X      XAPPLOADDIR = $(LIBDIR)/app-defaults
X
X        SOXLIBREV = 4.2
X          SOXTREV = 4.0
X         SOXAWREV = 4.0
X        SOOLDXREV = 4.0
X         SOXMUREV = 4.0
X        SOXEXTREV = 4.0
X
X       FONTCFLAGS = -t
X
X     INSTAPPFLAGS = $(INSTDATFLAGS)
X
X            IMAKE = imake
X           DEPEND = makedepend
X              RGB = rgb
X            FONTC = bdftosnf
X        MKFONTDIR = mkfontdir
X        MKDIRHIER = /bin/sh $(BINDIR)/mkdirhier.sh
X
X        CONFIGSRC = $(TOP)/config
X        CLIENTSRC = $(TOP)/clients
X          DEMOSRC = $(TOP)/demos
X           LIBSRC = $(TOP)/lib
X          FONTSRC = $(TOP)/fonts
X       INCLUDESRC = $(TOP)/X11
X        SERVERSRC = $(TOP)/server
X          UTILSRC = $(TOP)/util
X        SCRIPTSRC = $(UTILSRC)/scripts
X       EXAMPLESRC = $(TOP)/examples
X       CONTRIBSRC = $(TOP)/../contrib
X           DOCSRC = $(TOP)/doc
X           RGBSRC = $(TOP)/rgb
X        DEPENDSRC = $(UTILSRC)/makedepend
X         IMAKESRC = $(CONFIGSRC)
X         XAUTHSRC = $(LIBSRC)/Xau
X          XLIBSRC = $(LIBSRC)/X
X           XMUSRC = $(LIBSRC)/Xmu
X       TOOLKITSRC = $(LIBSRC)/Xt
X       AWIDGETSRC = $(LIBSRC)/Xaw
X       OLDXLIBSRC = $(LIBSRC)/oldX
X      XDMCPLIBSRC = $(LIBSRC)/Xdmcp
X      BDFTOSNFSRC = $(FONTSRC)/bdftosnf
X     MKFONTDIRSRC = $(FONTSRC)/mkfontdir
X     EXTENSIONSRC = $(TOP)/extensions
X
X  DEPEXTENSIONLIB = $(USRLIBDIR)/libXext.a
X     EXTENSIONLIB =  -lXext
X
X          DEPXLIB = $(DEPEXTENSIONLIB)
X             XLIB = $(EXTENSIONLIB) -lX11
X
X      DEPXAUTHLIB = $(USRLIBDIR)/libXau.a
X         XAUTHLIB =  -lXau
X
X        DEPXMULIB =
X           XMULIB = -lXmu
X
X       DEPOLDXLIB =
X          OLDXLIB = -loldX
X
X      DEPXTOOLLIB =
X         XTOOLLIB = -lXt
X
X        DEPXAWLIB =
X           XAWLIB = -lXaw
X
X LINTEXTENSIONLIB = $(USRLIBDIR)/llib-lXext.ln
X         LINTXLIB = $(USRLIBDIR)/llib-lX11.ln
X          LINTXMU = $(USRLIBDIR)/llib-lXmu.ln
X        LINTXTOOL = $(USRLIBDIR)/llib-lXt.ln
X          LINTXAW = $(USRLIBDIR)/llib-lXaw.ln
X
X          DEPLIBS = $(DEPXAWLIB) $(DEPXMULIB) $(DEPXTOOLLIB) $(DEPXLIB)
X
X         DEPLIBS1 = $(DEPLIBS)
X         DEPLIBS2 = $(DEPLIBS)
X         DEPLIBS3 = $(DEPLIBS)
X
###########################################################################
# Imake rules for building libraries, programs, scripts, and data files
# rules:  $XConsortium: Imake.rules,v 1.67 89/12/18 17:14:15 jim Exp $
X
###########################################################################
# start of Imakefile
X
# Imakefile file for xrotfont,
#   Copyright (c) 1992 Alan Richardson
X
# If your system doesn't have the `usleep()' function,
#  add  -DNO_USLEEP  to  DEFINES
X
X           OBJS = main.o events.o openwin.o misc.o options.o \
X                  paintscreen.o imagetext.o hersheytext.o
X        DEFINES = 
X    CDEBUGFLAGS = -O
X
xrotfont : $(OBJS)
X	     cc -o xrotfont $(OBJS) $(DEFINES) -lX11 -lm
X
$(OBJS) : all.h
X
###########################################################################
# common rules for all Makefiles - do not edit
X
emptyrule::
X
clean::
X	$(RM_CMD) \#*
X
Makefile::
X	-@if [ -f Makefile ]; then \
X	echo "	$(RM) Makefile.bak; $(MV) Makefile Makefile.bak"; \
X	$(RM) Makefile.bak; $(MV) Makefile Makefile.bak; \
X	else exit 0; fi
X	$(IMAKE_CMD) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT_DIR)
X
tags::
X	$(TAGS) -w *.[ch]
X	$(TAGS) -xw *.[ch] > TAGS
X
###########################################################################
# empty rules for directories that do not have SUBDIRS - do not edit
X
install::
X	@echo "install in $(CURRENT_DIR) done"
X
install.man::
X	@echo "install.man in $(CURRENT_DIR) done"
X
Makefiles::
X
includes::
X
###########################################################################
# dependencies generated by makedepend
X
SHAR_EOF
chmod 0644 Makefile.std ||
echo 'restore of Makefile.std failed'
Wc_c="`wc -c < 'Makefile.std'`"
test 8494 -eq "$Wc_c" ||
	echo 'Makefile.std: original size 8494, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
rm -f _shar_seq_.tmp
echo You have unpacked the last part
exit 0
-- 
Senior Systems Scientist		mail: dcmartin@msi.com
Molecular Simulations, Inc.		uucp: uunet!dcmartin
796 North Pastoria Avenue		at&t: 408/522-9236
Sunnyvale, California 94086		fax: 407/732-0831
