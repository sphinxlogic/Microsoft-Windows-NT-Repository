Path: uunet!uunet!darwin.sura.net!gatech!swrinde!mips!msi!dcmartin
From: jipping@cs.hope.edu (Mike Jipping)
Newsgroups: comp.sources.x
Subject: v18i067: XVTDL 3.0, Part06/06
Message-ID: <1992Jul29.175138.15126@msi.com>
Date: 29 Jul 92 17:51:38 GMT
References: <csx-18i062-xvtdl-3.0@uunet.UU.NET>
Sender: dcmartin@msi.com (David C. Martin - Moderator)
Organization: Molecular Simulations, Inc.
Lines: 884
Approved: dcmartin@msi.com
Originator: dcmartin@fascet

Submitted-by: jipping@cs.hope.edu (Mike Jipping)
Posting-number: Volume 18, Issue 67
Archive-name: xvtdl-3.0/part06

#!/bin/sh
# this is part.06 (part 6 of a multipart archive)
# do not concatenate these parts, unpack them in order with /bin/sh
# file prolog1.ps continued
#
if test ! -r _shar_seq_.tmp; then
	echo 'Please unpack part 1 first!'
	exit 1
fi
(read Scheck
 if test "$Scheck" != 6; then
	echo Please unpack part "$Scheck" next!
	exit 1
 else
	exit 0
 fi
) < _shar_seq_.tmp || exit 1
if test ! -f _shar_wnt_.tmp; then
	echo 'x - still skipping prolog1.ps'
else
echo 'x - continuing file prolog1.ps'
sed 's/^X//' << 'SHAR_EOF' >> 'prolog1.ps' &&
X	0 ne dup {setmanualfeed} if
X	/manualfeed exch def
X	/paperheight exch def
X	/paperwidth exch def
X	setpapername
X	manualfeed {true} {papersize} ifelse 
X	{manualpapersize} {false} ifelse 
X	{desperatepapersize} if
X	/yscale exch def
X	/xscale exch def
X	currenttransfer cvlit /orgxfer exch def
X	currentscreen cvlit /orgproc exch def
X	/organgle exch def /orgfreq exch def
X	end 
X	} def 
X	/pagesave FMLOCAL
X	/orgmatrix FMLOCAL
X	/landscape FMLOCAL
/FMBEGINPAGE { 
X	FrameDict begin 
X	/pagesave save def
X	3.86 setmiterlimit
X	/landscape exch 0 ne def
X	landscape { 
X		90 rotate 0 exch neg translate pop 
X		}
X		{pop pop}
X		ifelse
X	xscale yscale scale
X	/orgmatrix matrix def
X	gsave 
X	} def 
/FMENDPAGE {
X	grestore 
X	pagesave restore
X	end 
X	showpage
X	} def 
/FMDEFINEFONT { 
X	FrameDict begin
X	findfont 
X	ReEncode 
X	2 index exch 
X	definefont exch 
X	scalefont 
X	FMfonts 3 1 roll 
X	put
X	end 
X	} bind def
/FMNORMALIZEGRAPHICS { 
X	newpath
X	0.0 0.0 moveto
X	1 setlinewidth
X	0 setlinecap
X	0 0 0 sethsbcolor
X	0 setgray 
X	} bind def
X	/fx FMLOCAL
X	/fy FMLOCAL
X	/fh FMLOCAL
X	/fw FMLOCAL
X	/llx FMLOCAL
X	/lly FMLOCAL
X	/urx FMLOCAL
X	/ury FMLOCAL
/FMBEGINEPSF { 
X	end 
X	/FMEPSF save def 
X	/showpage {} def 
X	FMNORMALIZEGRAPHICS 
X	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
X	fx fy translate 
X	rotate
X	fw urx llx sub div fh ury lly sub div scale 
X	llx neg lly neg translate 
X	} bind def
/FMENDEPSF {
X	FMEPSF restore
X	FrameDict begin 
X	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
X	 statusdict /manualfeed true put
%%EndFeature
X	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
X	paperheight sub abs 16 lt exch 
X	paperwidth sub abs 16 lt and
X	{/papername exch def} {pop} ifelse
X	} def
X	/papersizedict FMLOCAL
/setpapername { 
X	/papersizedict 14 dict def 
X	papersizedict begin
X	/papername /unknown def 
X		/Letter 8.5 inch 11.0 inch pagedimen
X		/LetterSmall 7.68 inch 10.16 inch pagedimen
X		/Tabloid 11.0 inch 17.0 inch pagedimen
X		/Ledger 17.0 inch 11.0 inch pagedimen
X		/Legal 8.5 inch 14.0 inch pagedimen
X		/Statement 5.5 inch 8.5 inch pagedimen
X		/Executive 7.5 inch 10.0 inch pagedimen
X		/A3 11.69 inch 16.5 inch pagedimen
X		/A4 8.26 inch 11.69 inch pagedimen
X		/A4Small 7.47 inch 10.85 inch pagedimen
X		/B4 10.125 inch 14.33 inch pagedimen
X		/B5 7.16 inch 10.125 inch pagedimen
X	end
X	} def
/papersize {
X	papersizedict begin
X		/Letter {lettertray} def
X		/LetterSmall {lettertray lettersmall} def
X		/Tabloid {11x17tray} def
X		/Ledger {ledgertray} def
X		/Legal {legaltray} def
X		/Statement {statementtray} def
X		/Executive {executivetray} def
X		/A3 {a3tray} def
X		/A4 {a4tray} def
X		/A4Small {a4tray a4small} def
X		/B4 {b4tray} def
X		/B5 {b5tray} def
X		/unknown {unknown} def
X	papersizedict dup papername known {papername} {/unknown} ifelse get
X	end
X	statusdict begin stopped end 
X	} def
/manualpapersize {
X	papersizedict begin
X		/Letter {letter} def
X		/LetterSmall {lettersmall} def
X		/Tabloid {11x17} def
X		/Ledger {ledger} def
X		/Legal {legal} def
X		/Statement {statement} def
X		/Executive {executive} def
X		/A3 {a3} def
X		/A4 {a4} def
X		/A4Small {a4small} def
X		/B4 {b4} def
X		/B5 {b5} def
X		/unknown {unknown} def
X	papersizedict dup papername known {papername} {/unknown} ifelse get
X	end
X	stopped 
X	} def
/desperatepapersize {
X	statusdict /setpageparams known
X		{
X		paperwidth paperheight 0 1 
X		statusdict begin
X		{setpageparams} stopped pop 
X		end
X		} if
X	} def
/savematrix {
X	orgmatrix currentmatrix pop
X	} bind def
/restorematrix {
X	orgmatrix setmatrix
X	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
X    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
X	dup 
X	length 
X	dict begin 
X	{
X	1 index /FID ne 
X		{def} 
X		{pop pop} ifelse 
X	} forall
X	Encoding StandardEncoding eq 
X	{
X		/Encoding DiacriticEncoding def
X	}if
X	currentdict 
X	end 
X	} bind def
/graymode true def
X	/bwidth FMLOCAL
X	/bpside FMLOCAL
X	/bstring FMLOCAL
X	/onbits FMLOCAL
X	/offbits FMLOCAL
X	/xindex FMLOCAL
X	/yindex FMLOCAL
X	/x FMLOCAL
X	/y FMLOCAL
/setpattern {
X	 /bwidth  exch def
X	 /bpside  exch def
X	 /bstring exch def
X	 /onbits 0 def  /offbits 0 def
X	 freq sangle landscape {90 add} if 
X		{/y exch def
X		 /x exch def
X		 /xindex x 1 add 2 div bpside mul cvi def
X		 /yindex y 1 add 2 div bpside mul cvi def
X		 bstring yindex bwidth mul xindex 8 idiv add get
X		 1 7 xindex 8 mod sub bitshift and 0 ne
X		 {/onbits  onbits  1 add def 1}
X		 {/offbits offbits 1 add def 0}
X		 ifelse
X		}
X		setscreen
X	 {} settransfer
X	 offbits offbits onbits add div FMsetgray
X	/graymode false def
X	} bind def
/grayness {
X	FMsetgray
X	graymode not {
X		/graymode true def
X		orgxfer cvx settransfer
X		orgfreq organgle orgproc cvx setscreen
X		} if
X	} bind def
X	/HUE FMLOCAL
X	/SAT FMLOCAL
X	/BRIGHT FMLOCAL
X	/Colors FMLOCAL
FMPrintInColor 
X	
X	{
X	/HUE 0 def
X	/SAT 0 def
X	/BRIGHT 0 def
X	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
X	/Colors   
X	[[0    0  ]    % black
X	 [0    0  ]    % white
X	 [0.00 1.0]    % red
X	 [0.37 1.0]    % green
X	 [0.60 1.0]    % blue
X	 [0.50 1.0]    % cyan
X	 [0.83 1.0]    % magenta
X	 [0.16 1.0]    % comment / yellow
X	 ] def
X      
X	/BEGINBITMAPCOLOR { 
X		BITMAPCOLOR} def
X	/BEGINBITMAPCOLORc { 
X		BITMAPCOLORc} def
X	/K { 
X		Colors exch get dup
X		0 get /HUE exch store 
X		1 get /BRIGHT exch store
X		  HUE 0 eq BRIGHT 0 eq and
X			{1.0 SAT sub setgray}
X			{HUE SAT BRIGHT sethsbcolor} 
X		  ifelse
X		} def
X	/FMsetgray { 
X		/SAT exch 1.0 exch sub store 
X		  HUE 0 eq BRIGHT 0 eq and
X			{1.0 SAT sub setgray}
X			{HUE SAT BRIGHT sethsbcolor} 
X		  ifelse
X		} bind def
X	}
X	
X	{
X	/BEGINBITMAPCOLOR { 
X		BITMAPGRAY} def
X	/BEGINBITMAPCOLORc { 
X		BITMAPGRAYc} def
X	/FMsetgray {setgray} bind def
X	/K { 
X		pop
X		} def
X	}
ifelse
/normalize {
X	transform round exch round exch itransform
X	} bind def
/dnormalize {
X	dtransform round exch round exch idtransform
X	} bind def
/lnormalize { 
X	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
X	} bind def
/H { 
X	lnormalize setlinewidth
X	} bind def
/Z {
X	setlinecap
X	} bind def
/X { 
X	fillprocs exch get exec
X	} bind def
/V { 
X	gsave eofill grestore
X	} bind def
/N { 
X	stroke
X	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
X	/n FMLOCAL
/L { 
X 	/n exch def
X	newpath
X	normalize
X	moveto 
X	2 1 n {pop normalize lineto} for
X	} bind def
/Y { 
X	L 
X	closepath
X	} bind def
X	/x1 FMLOCAL
X	/x2 FMLOCAL
X	/y1 FMLOCAL
X	/y2 FMLOCAL
X	/rad FMLOCAL
/R { 
X	/y2 exch def
X	/x2 exch def
X	/y1 exch def
X	/x1 exch def
X	x1 y1
X	x2 y1
X	x2 y2
X	x1 y2
X	4 Y 
X	} bind def
/RR { 
X	/rad exch def
X	normalize
X	/y2 exch def
X	/x2 exch def
X	normalize
X	/y1 exch def
X	/x1 exch def
X	newpath
X	x1 y1 rad add moveto
X	x1 y2 x2 y2 rad arcto
X	x2 y2 x2 y1 rad arcto
X	x2 y1 x1 y1 rad arcto
X	x1 y1 x1 y2 rad arcto
X	closepath
X	16 {pop} repeat
X	} bind def
/C { 
X	grestore
X	gsave
X	R 
X	clip
X	} bind def
/U { 
X	grestore
X	gsave
X	} bind def
/F { 
X	FMfonts exch get
X	setfont
X	} bind def
/T { 
X	moveto show
X	} bind def
/RF { 
X	rotate
X	0 ne {-1 1 scale} if
X	} bind def
/TF { 
X	gsave
X	moveto 
X	RF
X	show
X	grestore
X	} bind def
/P { 
X	moveto
X	0 32 3 2 roll widthshow
X	} bind def
/PF { 
X	gsave
X	moveto 
X	RF
X	0 32 3 2 roll widthshow
X	grestore
X	} bind def
/S { 
X	moveto
X	0 exch ashow
X	} bind def
/SF { 
X	gsave
X	moveto
X	RF
X	0 exch ashow
X	grestore
X	} bind def
/B { 
X	moveto
X	0 32 4 2 roll 0 exch awidthshow
X	} bind def
/BF { 
X	gsave
X	moveto
X	RF
X	0 32 4 2 roll 0 exch awidthshow
X	grestore
X	} bind def
X	/x FMLOCAL
X	/y FMLOCAL
X	/dx FMLOCAL
X	/dy FMLOCAL
X	/dl FMLOCAL
X	/t FMLOCAL
X	/t2 FMLOCAL
X	/Cos FMLOCAL
X	/Sin FMLOCAL
X	/r FMLOCAL
/W { 
X	dnormalize
X	/dy exch def
X	/dx exch def
X	normalize
X	/y  exch def
X	/x  exch def
X	/dl dx dx mul dy dy mul add sqrt def
X	dl 0.0 gt {
X		/t currentlinewidth def
X		savematrix
X		/Cos dx dl div def
X		/Sin dy dl div def
X		/r [Cos Sin Sin neg Cos 0.0 0.0] def
X		/t2 t 2.5 mul 3.5 max def
X		newpath
X		x y translate
X		r concat
X		0.0 0.0 moveto
X		dl t 2.7 mul sub 0.0 rlineto
X		stroke
X		restorematrix
X		x dx add y dy add translate
X		r concat
X		t 0.67 mul setlinewidth
X		t 1.61 mul neg  0.0 translate
X		0.0 0.0 moveto
X		t2 1.7 mul neg  t2 2.0 div     moveto
X		0.0 0.0 lineto
X		t2 1.7 mul neg  t2 2.0 div neg lineto
X		stroke
X		t setlinewidth
X		restorematrix
X		} if
X	} bind def
/G { 
X	gsave
X	newpath
X	normalize translate 0.0 0.0 moveto 
X	dnormalize scale 
X	0.0 0.0 1.0 5 3 roll arc 
X	closepath fill
X	grestore
X	} bind def
/A { 
X	gsave
X	savematrix
X	newpath
X	2 index 2 div add exch 3 index 2 div sub exch 
X	normalize 2 index 2 div sub exch 3 index 2 div add exch 
X	translate 
X	scale 
X	0.0 0.0 1.0 5 3 roll arc 
X	restorematrix
X	stroke
X	grestore
X	} bind def
X	/x FMLOCAL
X	/y FMLOCAL
X	/w FMLOCAL
X	/h FMLOCAL
X	/xx FMLOCAL
X	/yy FMLOCAL
X	/ww FMLOCAL
X	/hh FMLOCAL
X	/FMsaveobject FMLOCAL
X	/FMoptop FMLOCAL
X	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
X	/FMdicttop countdictstack 1 add def 
X	/FMoptop count 4 sub def 
X	/FMsaveobject save def
X	userdict begin 
X	/showpage {} def 
X	FMNORMALIZEGRAPHICS 
X	3 index neg 3 index neg translate
X	} bind def
/ENDPRINTCODE {
X	count -1 FMoptop {pop pop} for 
X	countdictstack -1 FMdicttop {pop end} for 
X	FMsaveobject restore 
X	} bind def
/gn { 
X	0 
X	{	46 mul 
X		cf read pop 
X		32 sub 
X		dup 46 lt {exit} if 
X		46 sub add 
X		} loop
X	add 
X	} bind def
X	/str FMLOCAL
/cfs { 
X	/str sl string def 
X	0 1 sl 1 sub {str exch val put} for 
X	str def 
X	} bind def
/ic [ 
X	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
X	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
X	0
X	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
X	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
X	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
X	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
X	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
X	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
X	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
X	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
X	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
X	] def
X	/sl FMLOCAL
X	/val FMLOCAL
X	/ws FMLOCAL
X	/im FMLOCAL
X	/bs FMLOCAL
X	/cs FMLOCAL
X	/len FMLOCAL
X	/pos FMLOCAL
/ms { 
X	/sl exch def 
X	/val 255 def 
X	/ws cfs 
X	/im cfs 
X	/val 0 def 
X	/bs cfs 
X	/cs cfs 
X	} bind def
400 ms 
/ip { 
X	is 
X	0 
X	cf cs readline pop 
X	{	ic exch get exec 
X		add 
X		} forall 
X	pop 
X	
X	} bind def
/wh { 
X	/len exch def 
X	/pos exch def 
X	ws 0 len getinterval im pos len getinterval copy pop
X	pos len 
X	} bind def
/bl { 
X	/len exch def 
X	/pos exch def 
X	bs 0 len getinterval im pos len getinterval copy pop
X	pos len 
X	} bind def
/s1 1 string def
/fl { 
X	/len exch def 
X	/pos exch def 
X	/val cf s1 readhexstring pop 0 get def
X	pos 1 pos len add 1 sub {im exch val put} for
X	pos len 
X	} bind def
/hx { 
X	3 copy getinterval 
X	cf exch readhexstring pop pop 
X	} bind def
X	/h FMLOCAL
X	/w FMLOCAL
X	/d FMLOCAL
X	/lb FMLOCAL
X	/bitmapsave FMLOCAL
X	/is FMLOCAL
X	/cf FMLOCAL
/wbytes { 
X	dup 
X	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
X	} bind def
/BEGINBITMAPBWc { 
X	1 {} COMMONBITMAPc
X	} bind def
/BEGINBITMAPGRAYc { 
X	8 {} COMMONBITMAPc
X	} bind def
/BEGINBITMAP2BITc { 
X	2 {} COMMONBITMAPc
X	} bind def
/COMMONBITMAPc { 
X	/r exch def
X	/d exch def
X	gsave
X	translate rotate scale /h exch def /w exch def
X	/lb w d wbytes def 
X	sl lb lt {lb ms} if 
X	/bitmapsave save def 
X	r                    
X	/is im 0 lb getinterval def 
X	ws 0 lb getinterval is copy pop 
X	/cf currentfile def 
X	w h d [w 0 0 h neg 0 h] 
X	{ip} image 
X	bitmapsave restore 
X	grestore
X	} bind def
/BEGINBITMAPBW { 
X	1 {} COMMONBITMAP
X	} bind def
/BEGINBITMAPGRAY { 
X	8 {} COMMONBITMAP
X	} bind def
/BEGINBITMAP2BIT { 
X	2 {} COMMONBITMAP
X	} bind def
/COMMONBITMAP { 
X	/r exch def
X	/d exch def
X	gsave
X	translate rotate scale /h exch def /w exch def
X	/bitmapsave save def 
X	r                    
X	/is w d wbytes string def
X	/cf currentfile def 
X	w h d [w 0 0 h neg 0 h] 
X	{cf is readhexstring pop} image
X	bitmapsave restore 
X	grestore
X	} bind def
X	/proc1 FMLOCAL
X	/proc2 FMLOCAL
X	/newproc FMLOCAL
/Fmcc {
X    /proc2 exch cvlit def
X    /proc1 exch cvlit def
X    /newproc proc1 length proc2 length add array def
X    newproc 0 proc1 putinterval
X    newproc proc1 length proc2 putinterval
X    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
X	/gryt FMLOCAL
X	/blut FMLOCAL
X	/grnt FMLOCAL
X	/redt FMLOCAL
X	/indx FMLOCAL
X	/cynu FMLOCAL
X	/magu FMLOCAL
X	/yelu FMLOCAL
X	/k FMLOCAL
X	/u FMLOCAL
/colorsetup {
X	currentcolortransfer
X	/gryt exch def
X	/blut exch def
X	/grnt exch def
X	/redt exch def
X	0 1 255 {
X		/indx exch def
X		/cynu 1 red indx get 255 div sub def
X		/magu 1 green indx get 255 div sub def
X		/yelu 1 blue indx get 255 div sub def
X		/k cynu magu min yelu min def
X		/u k currentundercolorremoval exec def
X		nredt indx 1 0 cynu u sub max sub redt exec put
X		ngreent indx 1 0 magu u sub max sub grnt exec put
X		nbluet indx 1 0 yelu u sub max sub blut exec put
X		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
X	} for
X	{255 mul cvi nredt exch get}
X	{255 mul cvi ngreent exch get}
X	{255 mul cvi nbluet exch get}
X	{255 mul cvi ngrayt exch get}
X	setcolortransfer
X	{pop 0} setundercolorremoval
X	{} setblackgeneration
X	} bind def
X	/tran FMLOCAL
/fakecolorsetup {
X	/tran 256 string def
X	0 1 255 {/indx exch def 
X		tran indx
X		red indx get 77 mul
X		green indx get 151 mul
X		blue indx get 28 mul
X		add add 256 idiv put} for
X	currenttransfer
X	{255 mul cvi tran exch get 255.0 div}
X	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
X	/d 8 def
X	gsave
X	translate rotate scale /h exch def /w exch def
X	/bitmapsave save def 
X	colorsetup
X	/is w d wbytes string def
X	/cf currentfile def 
X	w h d [w 0 0 h neg 0 h] 
X	{cf is readhexstring pop} {is} {is} true 3 colorimage 
X	bitmapsave restore 
X	grestore
X	} bind def
/BITMAPCOLORc { 
X	/d 8 def
X	gsave
X	translate rotate scale /h exch def /w exch def
X	/lb w d wbytes def 
X	sl lb lt {lb ms} if 
X	/bitmapsave save def 
X	colorsetup
X	/is im 0 lb getinterval def 
X	ws 0 lb getinterval is copy pop 
X	/cf currentfile def 
X	w h d [w 0 0 h neg 0 h] 
X	{ip} {is} {is} true 3 colorimage
X	bitmapsave restore 
X	grestore
X	} bind def
/BITMAPGRAY { 
X	8 {fakecolorsetup} COMMONBITMAP
X	} bind def
/BITMAPGRAYc { 
X	8 {fakecolorsetup} COMMONBITMAPc
X	} bind def
/ENDBITMAP {
X	} bind def
/TODOITEM {
X   /y exch 20 mul 610 exch sub def
X	/ZapfDingbats findfont 20 scalefont setfont
X 	(o ) 120 y T
X   1 F
X   145 y 3 add T
} bind def
/TODOCHECKEDITEM {
X   /y exch 20 mul 610 exch sub def
X	/ZapfDingbats findfont 20 scalefont setfont
X 	(3 ) 120 y T
X   1 F
X   145 y 3 add T
} bind def
end
%%EndProlog
%%BeginSetup
(2.0) FMVERSION
1 1 612 792 0 1 2 FMDOCUMENT
/fillprocs 32 array def
fillprocs 0 { 0.000000 grayness } put
fillprocs 1 { 0.100000 grayness } put
fillprocs 2 { 0.300000 grayness } put
fillprocs 3 { 0.500000 grayness } put
fillprocs 4 { 0.700000 grayness } put
fillprocs 5 { 0.900000 grayness } put
fillprocs 6 { 0.970000 grayness } put
fillprocs 7 { 1.000000 grayness } put
fillprocs 8 {<0f1e3c78f0e1c387> 8 1 setpattern } put
fillprocs 9 {<0f87c3e1f0783c1e> 8 1 setpattern } put
fillprocs 10 {<cccccccccccccccc> 8 1 setpattern } put
fillprocs 11 {<ffff0000ffff0000> 8 1 setpattern } put
fillprocs 12 {<8142241818244281> 8 1 setpattern } put
fillprocs 13 {<03060c183060c081> 8 1 setpattern } put
fillprocs 14 {<8040201008040201> 8 1 setpattern } put
fillprocs 15 {} put
fillprocs 16 { 1.000000 grayness } put
fillprocs 17 { 0.900000 grayness } put
fillprocs 18 { 0.700000 grayness } put
fillprocs 19 { 0.500000 grayness } put
fillprocs 20 { 0.300000 grayness } put
fillprocs 21 { 0.100000 grayness } put
fillprocs 22 { 0.030000 grayness } put
fillprocs 23 { 0.000000 grayness } put
fillprocs 24 {<f0e1c3870f1e3c78> 8 1 setpattern } put
fillprocs 25 {<f0783c1e0f87c3e1> 8 1 setpattern } put
fillprocs 26 {<3333333333333333> 8 1 setpattern } put
fillprocs 27 {<0000ffff0000ffff> 8 1 setpattern } put
fillprocs 28 {<7ebddbe7e7dbbd7e> 8 1 setpattern } put
fillprocs 29 {<fcf9f3e7cf9f3f7e> 8 1 setpattern } put
fillprocs 30 {<7fbfdfeff7fbfdfe> 8 1 setpattern } put
fillprocs 31 {} put
%%EndSetup
0 18 /NewCenturySchlbk-Bold FMDEFINEFONT
1 14 /NewCenturySchlbk-Italic FMDEFINEFONT
%%BeginPaperSize: Letter
%%EndPaperSize
SHAR_EOF
echo 'File prolog1.ps is complete' &&
chmod 0644 prolog1.ps ||
echo 'restore of prolog1.ps failed'
Wc_c="`wc -c < 'prolog1.ps'`"
test 20276 -eq "$Wc_c" ||
	echo 'prolog1.ps: original size 20276, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
rm -f _shar_seq_.tmp
echo You have unpacked the last part
exit 0
-- 
Senior Systems Scientist		mail: dcmartin@msi.com
Molecular Simulations, Inc.		uucp: uunet!dcmartin
796 North Pastoria Avenue		at&t: 408/522-9236
Sunnyvale, California 94086		fax: 408/732-0831
