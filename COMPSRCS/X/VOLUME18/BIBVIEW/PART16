Newsgroups: comp.sources.x
Path: uunet!cis.ohio-state.edu!pacific.mps.ohio-state.edu!linac!att!pacbell.com!mips!msi!dcmartin
From: Armin Liebl <liebla@informatik.tu-muenchen.de>
Subject: v18i114: bibview - BibTeX GUI, Part16/20
Message-ID: <1992Aug27.161800.26024@msi.com>
Originator: dcmartin@fascet
Sender: dcmartin@msi.com (David C. Martin - Moderator)
Organization: Molecular Simulations, Inc.
References: <csx-18i099-bibview@uunet.UU.NET>
Date: Thu, 27 Aug 1992 16:18:00 GMT
Approved: dcmartin@msi.com
Lines: 1260

Submitted-by: Armin Liebl <liebla@informatik.tu-muenchen.de>
Posting-number: Volume 18, Issue 114
Archive-name: bibview/part16

#!/bin/sh
# this is part.16 (part 16 of a multipart archive)
# do not concatenate these parts, unpack them in order with /bin/sh
# file gui_card.c continued
#
if test ! -r _shar_seq_.tmp; then
	echo 'Please unpack part 1 first!'
	exit 1
fi
(read Scheck
 if test "$Scheck" != 16; then
	echo Please unpack part "$Scheck" next!
	exit 1
 else
	exit 0
 fi
) < _shar_seq_.tmp || exit 1
if test ! -f _shar_wnt_.tmp; then
	echo 'x - still skipping gui_card.c'
else
echo 'x - continuing file gui_card.c'
sed 's/^X//' << 'SHAR_EOF' >> 'gui_card.c' &&
X		   	  XtNstring, cdp->publisher, 
X		   	  XtNfromVert, cwp->organization, 
X		   	  XtNfromHoriz, cwp->publisherL, NULL);
X   cwp->addressL = 	XtVaCreateManagedWidget("addressLabel", 
X	            	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->publisher, 
X		    	  XtNleft, XtChainLeft, NULL);
X   cwp->address = 	XtVaCreateManagedWidget("address", 
X	           	  asciiTextWidgetClass, card, 
X		   	  XtNstring, cdp->address, 
X		   	  XtNfromVert, cwp->publisher, 
X		   	  XtNfromHoriz, cwp->addressL, NULL);
X   cwp->pagesL = 	XtVaCreateManagedWidget("pagesLabel", 
X	            	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->address,
X		    	  XtNleft, XtChainLeft, NULL);
X   cwp->pages = 	XtVaCreateManagedWidget("pages",
X	           	  asciiTextWidgetClass, card, 
X		   	  XtNstring, cdp->pages, 
X		   	  XtNfromVert, cwp->address,
X		   	  XtNfromHoriz, cwp->pagesL, NULL);
X   cwp->monthL = 	XtVaCreateManagedWidget("monthLabel", 
X	           	  labelWidgetClass, card, 
X		   	  XtNfromVert, cwp->pages,
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->month = 	XtVaCreateManagedWidget("month", 
X	          	  asciiTextWidgetClass, card, 
X		  	  XtNstring, cdp->month, 
X		  	  XtNfromVert, cwp->pages,
X		  	  XtNfromHoriz, cwp->monthL, NULL);
X   cwp->yearL = 	XtVaCreateManagedWidget("yearLabel", 
X	          	  labelWidgetClass, card, 
X		  	  XtNfromVert, cwp->pages,
X		  	  XtNfromHoriz, cwp->month, NULL);
X   cwp->year = 		XtVaCreateManagedWidget("year", 
X	         	  asciiTextWidgetClass, card, 
X			  XtNborderWidth, 2,
X		 	  XtNstring, cdp->year, 
X		 	  XtNfromVert, cwp->pages,
X		 	  XtNfromHoriz, cwp->yearL, NULL);
X   cwp->noteL = 	XtVaCreateManagedWidget("noteLabel", 
X	            	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->month,
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->note = 		XtVaCreateManagedWidget("note",
X	           	  asciiTextWidgetClass, card, 
X		   	  XtNstring, cdp->note, 
X		   	  XtNfromVert, cwp->month,
X		   	  XtNfromHoriz, cwp->noteL, NULL);
}
X
/*********************************************************************/
/* CreateManualWidgets:                                              */
/*    Creates widgets for card type manual                           */
/*********************************************************************/
static void
CreateManualWidgets (BibPtr bp, CardPtr cp)
{
CardWidgetsPtr cwp = &cp->cw->ct.cw;	/* ptr to widget ids */
CardDataPtr cdp = cp->cd;		/* ptr to real card data */
CardDataPtr cbp = &cp->cw->ct.buf;	/* ptr to text buffers */
Widget card = cp->cw->cardFlds;		/* parent widget */
X
X   cdp->annoteDisplayed = FALSE;
X   cdp->annoteChanged = FALSE;
X   cwp->titleL = 	XtVaCreateManagedWidget("titleLabel", 
X	           	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->category, 
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->title = 	XtVaCreateManagedWidget("title", 
X	          	  asciiTextWidgetClass, card, 
X			  XtNborderWidth, 2,
X		  	  XtNstring, cdp->title, 
X		    	  XtNfromVert, cwp->category, 
X		  	  XtNfromHoriz, cwp->titleL, NULL);
X   cwp->authorL = 	XtVaCreateManagedWidget("authorLabel", 
X	           	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->title, 
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->author = 	XtVaCreateManagedWidget("author", 
X	          	  asciiTextWidgetClass, card, 
X		  	  XtNstring, cdp->author, 
X		    	  XtNfromVert, cwp->title, 
X		  	  XtNfromHoriz, cwp->authorL, NULL);
X   cwp->organizationL = XtVaCreateManagedWidget("organizationLabel", 
X	           	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->author, 
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->organization = 	XtVaCreateManagedWidget("organization", 
X	          	  asciiTextWidgetClass, card, 
X		  	  XtNstring, cdp->organization, 
X		    	  XtNfromVert, cwp->author, 
X		  	  XtNfromHoriz, cwp->organizationL, NULL);
X   cwp->addressL = 	XtVaCreateManagedWidget("addressLabel", 
X	            	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->organization, 
X		    	  XtNleft, XtChainLeft, NULL);
X   cwp->address = 	XtVaCreateManagedWidget("address", 
X	           	  asciiTextWidgetClass, card, 
X		   	  XtNstring, cdp->address, 
X		   	  XtNfromVert, cwp->organization, 
X		   	  XtNfromHoriz, cwp->addressL, NULL);
X   cwp->editionL = 	XtVaCreateManagedWidget("editionLabel", 
X	            	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->address, 
X		    	  XtNleft, XtChainLeft, NULL);
X   cwp->edition = 	XtVaCreateManagedWidget("edition", 
X	           	  asciiTextWidgetClass, card, 
X		   	  XtNstring, cdp->edition, 
X		   	  XtNfromVert, cwp->address, 
X		   	  XtNfromHoriz, cwp->editionL, NULL);
X   cwp->monthL = 	XtVaCreateManagedWidget("monthLabel", 
X	           	  labelWidgetClass, card, 
X		   	  XtNfromVert, cwp->edition,
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->month = 	XtVaCreateManagedWidget("month", 
X	          	  asciiTextWidgetClass, card, 
X		  	  XtNstring, cdp->month, 
X		  	  XtNfromVert, cwp->edition,
X		  	  XtNfromHoriz, cwp->monthL, NULL);
X   cwp->yearL = 	XtVaCreateManagedWidget("yearLabel", 
X	          	  labelWidgetClass, card, 
X		  	  XtNfromVert, cwp->edition,
X		  	  XtNfromHoriz, cwp->month, NULL);
X   cwp->year = 		XtVaCreateManagedWidget("year", 
X	         	  asciiTextWidgetClass, card, 
X		 	  XtNstring, cdp->year, 
X		 	  XtNfromVert, cwp->edition,
X		 	  XtNfromHoriz, cwp->yearL, NULL);
X   cwp->noteL = 	XtVaCreateManagedWidget("noteLabel", 
X	            	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->month,
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->note = 		XtVaCreateManagedWidget("note",
X	           	  asciiTextWidgetClass, card, 
X		   	  XtNstring, cdp->note, 
X		   	  XtNfromVert, cwp->month,
X		   	  XtNfromHoriz, cwp->noteL, NULL);
X
}
X
/*********************************************************************/
/* CreateMasterthesisWidgets:                                        */
/*    Creates widgets for card type mastersthesis                    */
/*********************************************************************/
static void
CreateMasterthesisWidgets (BibPtr bp, CardPtr cp)
{
CardWidgetsPtr cwp = &cp->cw->ct.cw;	/* ptr to widget ids */
CardDataPtr cdp = cp->cd;		/* ptr to real card data */
CardDataPtr cbp = &cp->cw->ct.buf;	/* ptr to text buffers */
Widget card = cp->cw->cardFlds;		/* parent widget */
X
X   cdp->annoteDisplayed = FALSE;
X   cdp->annoteChanged = FALSE;
X   cwp->titleL = 	XtVaCreateManagedWidget("titleLabel", 
X	           	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->category, 
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->title = 	XtVaCreateManagedWidget("title", 
X	          	  asciiTextWidgetClass, card, 
X			  XtNborderWidth, 2,
X		  	  XtNstring, cdp->title, 
X		    	  XtNfromVert, cwp->category, 
X		  	  XtNfromHoriz, cwp->titleL, NULL);
X   cwp->authorL = 	XtVaCreateManagedWidget("authorLabel", 
X	           	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->title, 
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->author = 	XtVaCreateManagedWidget("author", 
X	          	  asciiTextWidgetClass, card, 
X			  XtNborderWidth, 2,
X		  	  XtNstring, cdp->author, 
X		    	  XtNfromVert, cwp->title, 
X		  	  XtNfromHoriz, cwp->authorL, NULL);
X   cwp->schoolL = 	XtVaCreateManagedWidget("schoolLabel", 
X	           	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->author, 
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->school = 	XtVaCreateManagedWidget("school", 
X	          	  asciiTextWidgetClass, card, 
X			  XtNborderWidth, 2,
X		  	  XtNstring, cdp->school, 
X		    	  XtNfromVert, cwp->author, 
X		  	  XtNfromHoriz, cwp->schoolL, NULL);
X   cwp->addressL = 	XtVaCreateManagedWidget("addressLabel", 
X	            	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->school, 
X		    	  XtNleft, XtChainLeft, NULL);
X   cwp->address = 	XtVaCreateManagedWidget("address", 
X	           	  asciiTextWidgetClass, card, 
X		   	  XtNstring, cdp->address, 
X		   	  XtNfromVert, cwp->school, 
X		   	  XtNfromHoriz, cwp->addressL, NULL);
X   cwp->monthL = 	XtVaCreateManagedWidget("monthLabel", 
X	           	  labelWidgetClass, card, 
X		   	  XtNfromVert, cwp->address,
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->month = 	XtVaCreateManagedWidget("month", 
X	          	  asciiTextWidgetClass, card, 
X		  	  XtNstring, cdp->month, 
X		  	  XtNfromVert, cwp->address,
X		  	  XtNfromHoriz, cwp->monthL, NULL);
X   cwp->yearL = 	XtVaCreateManagedWidget("yearLabel", 
X	          	  labelWidgetClass, card, 
X		  	  XtNfromVert, cwp->address,
X		  	  XtNfromHoriz, cwp->month, NULL);
X   cwp->year = 		XtVaCreateManagedWidget("year", 
X	         	  asciiTextWidgetClass, card, 
X			  XtNborderWidth, 2,
X		 	  XtNstring, cdp->year, 
X		 	  XtNfromVert, cwp->address,
X		 	  XtNfromHoriz, cwp->yearL, NULL);
X   cwp->noteL = 	XtVaCreateManagedWidget("noteLabel", 
X	            	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->month,
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->note = 		XtVaCreateManagedWidget("note",
X	           	  asciiTextWidgetClass, card, 
X		   	  XtNstring, cdp->note, 
X		   	  XtNfromVert, cwp->month,
X		   	  XtNfromHoriz, cwp->noteL, NULL);
}
X
/*********************************************************************/
/* CreateMiscWidgets:                                                */
/*    Creates widgets for card type misc                             */
/*********************************************************************/
static void
CreateMiscWidgets (BibPtr bp, CardPtr cp)
{
X CardWidgetsPtr cwp = &cp->cw->ct.cw;	/* ptr to widget ids */
X CardDataPtr cdp = cp->cd;		/* ptr to real card data */
X CardDataPtr cbp = &cp->cw->ct.buf;	/* ptr to text buffers */
X Widget card = cp->cw->cardFlds;		/* parent widget */
X
X   cdp->annoteDisplayed = FALSE;
X   cdp->annoteChanged = FALSE;
X   cwp->titleL = 	XtVaCreateManagedWidget("titleLabel", 
X	           	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->category, 
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->title = 	XtVaCreateManagedWidget("title", 
X	          	  asciiTextWidgetClass, card, 
X		  	  XtNstring, cdp->title, 
X		    	  XtNfromVert, cwp->category, 
X		  	  XtNfromHoriz, cwp->titleL, NULL);
X   cwp->authorL = 	XtVaCreateManagedWidget("authorLabel", 
X	            	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->title, 
X		    	  XtNleft, XtChainLeft, NULL);
X   cwp->author = 	XtVaCreateManagedWidget("author", 
X	           	  asciiTextWidgetClass, card, 
X		   	  XtNstring, cdp->author, 
X		   	  XtNfromVert, cwp->title, 
X		   	  XtNfromHoriz, cwp->authorL, NULL);
X   cwp->howpublishedL =	XtVaCreateManagedWidget("howpublishedLabel", 
X	            	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->author, 
X		    	  XtNleft, XtChainLeft, NULL);
X   cwp->howpublished = 	XtVaCreateManagedWidget("howpublished", 
X	           	  asciiTextWidgetClass, card, 
X		   	  XtNstring, cdp->howpublished, 
X		   	  XtNfromVert, cwp->author, 
X		   	  XtNfromHoriz, cwp->howpublishedL, NULL);
X   cwp->monthL = 	XtVaCreateManagedWidget("monthLabel", 
X	           	  labelWidgetClass, card, 
X		   	  XtNfromVert, cwp->howpublished,
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->month = 	XtVaCreateManagedWidget("month", 
X	          	  asciiTextWidgetClass, card, 
X		  	  XtNstring, cdp->month, 
X		  	  XtNfromVert, cwp->howpublished,
X		  	  XtNfromHoriz, cwp->monthL, NULL);
X   cwp->yearL = 	XtVaCreateManagedWidget("yearLabel", 
X	          	  labelWidgetClass, card, 
X		  	  XtNfromVert, cwp->howpublished,
X		  	  XtNfromHoriz, cwp->month, NULL);
X   cwp->year = 		XtVaCreateManagedWidget("year", 
X	         	  asciiTextWidgetClass, card, 
X		 	  XtNstring, cdp->year, 
X		 	  XtNfromVert, cwp->howpublished,
X		 	  XtNfromHoriz, cwp->yearL, NULL);
X   cwp->noteL = 	XtVaCreateManagedWidget("noteLabel", 
X	            	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->month,
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->note = 		XtVaCreateManagedWidget("note",
X	           	  asciiTextWidgetClass, card, 
X		   	  XtNstring, cdp->note, 
X		   	  XtNfromVert, cwp->month,
X		   	  XtNfromHoriz, cwp->noteL, NULL);
}
X
X
/*********************************************************************/
/* CreatePhdthesisWidgets:                                           */
/*    Creates widgets for card type phdthesis                        */
/*********************************************************************/
static void
CreatePhdthesisWidgets (BibPtr bp, CardPtr cp)
{
CardWidgetsPtr cwp = &cp->cw->ct.cw;	/* ptr to widget ids */
CardDataPtr cdp = cp->cd;		/* ptr to real card data */
CardDataPtr cbp = &cp->cw->ct.buf;	/* ptr to text buffers */
Widget card = cp->cw->cardFlds;		/* parent widget */
X
X   cdp->annoteDisplayed = FALSE;
X   cdp->annoteChanged = FALSE;
X   cwp->titleL = 	XtVaCreateManagedWidget("titleLabel", 
X	           	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->category, 
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->title = 	XtVaCreateManagedWidget("title", 
X	          	  asciiTextWidgetClass, card, 
X			  XtNborderWidth, 2,
X		  	  XtNstring, cdp->title, 
X		    	  XtNfromVert, cwp->category, 
X		  	  XtNfromHoriz, cwp->titleL, NULL);
X   cwp->authorL = 	XtVaCreateManagedWidget("authorLabel", 
X	           	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->title, 
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->author = 	XtVaCreateManagedWidget("author", 
X	          	  asciiTextWidgetClass, card, 
X			  XtNborderWidth, 2,
X		  	  XtNstring, cdp->author, 
X		    	  XtNfromVert, cwp->title, 
X		  	  XtNfromHoriz, cwp->authorL, NULL);
X   cwp->schoolL = 	XtVaCreateManagedWidget("schoolLabel", 
X	           	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->author, 
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->school = 	XtVaCreateManagedWidget("school", 
X	          	  asciiTextWidgetClass, card, 
X			  XtNborderWidth, 2,
X		  	  XtNstring, cdp->school, 
X		    	  XtNfromVert, cwp->author, 
X		  	  XtNfromHoriz, cwp->schoolL, NULL);
X   cwp->addressL = 	XtVaCreateManagedWidget("addressLabel", 
X	            	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->school, 
X		    	  XtNleft, XtChainLeft, NULL);
X   cwp->address = 	XtVaCreateManagedWidget("address", 
X	           	  asciiTextWidgetClass, card, 
X		   	  XtNstring, cdp->address, 
X		   	  XtNfromVert, cwp->school, 
X		   	  XtNfromHoriz, cwp->addressL, NULL);
X   cwp->monthL = 	XtVaCreateManagedWidget("monthLabel", 
X	           	  labelWidgetClass, card, 
X		   	  XtNfromVert, cwp->address,
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->month = 	XtVaCreateManagedWidget("month", 
X	          	  asciiTextWidgetClass, card, 
X		  	  XtNstring, cdp->month, 
X		  	  XtNfromVert, cwp->address,
X		  	  XtNfromHoriz, cwp->monthL, NULL);
X   cwp->yearL = 	XtVaCreateManagedWidget("yearLabel", 
X	          	  labelWidgetClass, card, 
X		  	  XtNfromVert, cwp->address,
X		  	  XtNfromHoriz, cwp->month, NULL);
X   cwp->year = 		XtVaCreateManagedWidget("year", 
X	         	  asciiTextWidgetClass, card, 
X			  XtNborderWidth, 2,
X		 	  XtNstring, cdp->year, 
X		 	  XtNfromVert, cwp->address,
X		 	  XtNfromHoriz, cwp->yearL, NULL);
X   cwp->noteL = 	XtVaCreateManagedWidget("noteLabel", 
X	            	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->month,
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->note = 		XtVaCreateManagedWidget("note",
X	           	  asciiTextWidgetClass, card, 
X		   	  XtNstring, cdp->note, 
X		   	  XtNfromVert, cwp->month,
X		   	  XtNfromHoriz, cwp->noteL, NULL);
}
X
/*********************************************************************/
/* CreateProceedingsWidgets:                                         */
/*    Creates widgets for card type proceedings                      */
/*********************************************************************/
static void
CreateProceedingsWidgets (BibPtr bp, CardPtr cp)
{
X CardWidgetsPtr cwp = &cp->cw->ct.cw;	/* ptr to widget ids */
X CardDataPtr cdp = cp->cd;		/* ptr to real card data */
X CardDataPtr cbp = &cp->cw->ct.buf;	/* ptr to text buffers */
X Widget card = cp->cw->cardFlds;		/* parent widget */
X
X   cdp->annoteDisplayed = FALSE;
X   cdp->annoteChanged = FALSE;
X   cwp->titleL = 	XtVaCreateManagedWidget("titleLabel", 
X	           	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->category, 
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->title = 	XtVaCreateManagedWidget("title", 
X	          	  asciiTextWidgetClass, card, 
X			  XtNborderWidth, 2,
X		  	  XtNstring, cdp->title, 
X		    	  XtNfromVert, cwp->category, 
X		  	  XtNfromHoriz, cwp->titleL, NULL);
X   cwp->editorL = 	XtVaCreateManagedWidget("editorLabel", 
X	            	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->title, 
X		    	  XtNleft, XtChainLeft, NULL);
X   cwp->editor = 	XtVaCreateManagedWidget("editor", 
X	           	  asciiTextWidgetClass, card, 
X		   	  XtNstring, cdp->editor, 
X		   	  XtNfromVert, cwp->title, 
X		   	  XtNfromHoriz, cwp->editorL, NULL);
X   cwp->organizationL =	XtVaCreateManagedWidget("organizationLabel", 
X	            	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->editor, 
X		    	  XtNleft, XtChainLeft, NULL);
X   cwp->organization = 	XtVaCreateManagedWidget("organization", 
X	           	  asciiTextWidgetClass, card, 
X		   	  XtNstring, cdp->organization, 
X		   	  XtNfromVert, cwp->editor, 
X		   	  XtNfromHoriz, cwp->organizationL, NULL);
X   cwp->publisherL = 	XtVaCreateManagedWidget("publisherLabel", 
X	            	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->organization, 
X		    	  XtNleft, XtChainLeft, NULL);
X   cwp->publisher = 	XtVaCreateManagedWidget("publisher", 
X	           	  asciiTextWidgetClass, card, 
X		   	  XtNstring, cdp->publisher, 
X		   	  XtNfromVert, cwp->organization, 
X		   	  XtNfromHoriz, cwp->publisherL, NULL);
X   cwp->addressL = 	XtVaCreateManagedWidget("addressLabel", 
X	            	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->publisher, 
X		    	  XtNleft, XtChainLeft, NULL);
X   cwp->address = 	XtVaCreateManagedWidget("address", 
X	           	  asciiTextWidgetClass, card, 
X		   	  XtNstring, cdp->address, 
X		   	  XtNfromVert, cwp->publisher, 
X		   	  XtNfromHoriz, cwp->addressL, NULL);
X   cwp->pagesL = 	XtVaCreateManagedWidget("pagesLabel", 
X	            	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->address,
X		    	  XtNleft, XtChainLeft, NULL);
X   cwp->pages = 	XtVaCreateManagedWidget("pages",
X	           	  asciiTextWidgetClass, card, 
X		   	  XtNstring, cdp->pages, 
X		   	  XtNfromVert, cwp->address,
X		   	  XtNfromHoriz, cwp->pagesL, NULL);
X   cwp->monthL = 	XtVaCreateManagedWidget("monthLabel", 
X	           	  labelWidgetClass, card, 
X		   	  XtNfromVert, cwp->pages,
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->month = 	XtVaCreateManagedWidget("month", 
X	          	  asciiTextWidgetClass, card, 
X		  	  XtNstring, cdp->month, 
X		  	  XtNfromVert, cwp->pages,
X		  	  XtNfromHoriz, cwp->monthL, NULL);
X   cwp->yearL = 	XtVaCreateManagedWidget("yearLabel", 
X	          	  labelWidgetClass, card, 
X		  	  XtNfromVert, cwp->pages,
X		  	  XtNfromHoriz, cwp->month, NULL);
X   cwp->year = 		XtVaCreateManagedWidget("year", 
X	         	  asciiTextWidgetClass, card, 
X			  XtNborderWidth, 2,
X		 	  XtNstring, cdp->year, 
X		 	  XtNfromVert, cwp->pages,
X		 	  XtNfromHoriz, cwp->yearL, NULL);
X   cwp->noteL = 	XtVaCreateManagedWidget("noteLabel", 
X	            	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->month,
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->note = 		XtVaCreateManagedWidget("note",
X	           	  asciiTextWidgetClass, card, 
X		   	  XtNstring, cdp->note, 
X		   	  XtNfromVert, cwp->month,
X		   	  XtNfromHoriz, cwp->noteL, NULL);
}
X
/*********************************************************************/
/* CreateTechreportWidgets:                                          */
/*    Creates widgets for card type techreport                       */
/*********************************************************************/
static void
CreateTechreportWidgets (BibPtr bp, CardPtr cp)
{
CardWidgetsPtr cwp = &cp->cw->ct.cw;	/* ptr to widget ids */
CardDataPtr cdp = cp->cd;		/* ptr to real card data */
CardDataPtr cbp = &cp->cw->ct.buf;	/* ptr to text buffers */
Widget card = cp->cw->cardFlds;		/* parent widget */
X
X   cdp->annoteDisplayed = FALSE;
X   cdp->annoteChanged = FALSE;
X   cwp->titleL = 	XtVaCreateManagedWidget("titleLabel", 
X	           	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->category, 
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->title = 	XtVaCreateManagedWidget("title", 
X	          	  asciiTextWidgetClass, card, 
X			  XtNborderWidth, 2,
X		  	  XtNstring, cdp->title, 
X		    	  XtNfromVert, cwp->category, 
X		  	  XtNfromHoriz, cwp->titleL, NULL);
X   cwp->authorL = 	XtVaCreateManagedWidget("authorLabel", 
X	           	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->title, 
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->author = 	XtVaCreateManagedWidget("author", 
X	          	  asciiTextWidgetClass, card, 
X			  XtNborderWidth, 2,
X		  	  XtNstring, cdp->author, 
X		    	  XtNfromVert, cwp->title, 
X		  	  XtNfromHoriz, cwp->authorL, NULL);
X   cwp->institutionL = 	XtVaCreateManagedWidget("institutionLabel", 
X	           	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->author, 
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->institution = 	XtVaCreateManagedWidget("institution", 
X	          	  asciiTextWidgetClass, card, 
X			  XtNborderWidth, 2,
X		  	  XtNstring, cdp->institution, 
X		    	  XtNfromVert, cwp->author, 
X		  	  XtNfromHoriz, cwp->institutionL, NULL);
X   cwp->typeL = 	XtVaCreateManagedWidget("typeLabel", 
X	            	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->institution, 
X		    	  XtNleft, XtChainLeft, NULL);
X   cwp->type =  	XtVaCreateManagedWidget("type", 
X	           	  asciiTextWidgetClass, card, 
X		   	  XtNstring, cdp->type, 
X		   	  XtNfromVert, cwp->institution, 
X		   	  XtNfromHoriz, cwp->typeL, NULL);
X   cwp->numberL = 	XtVaCreateManagedWidget("numberLabel", 
X	            	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->type, 
X		    	  XtNleft, XtChainLeft, NULL);
X   cwp->number =  	XtVaCreateManagedWidget("number", 
X	           	  asciiTextWidgetClass, card, 
X		   	  XtNstring, cdp->number, 
X		   	  XtNfromVert, cwp->type, 
X		   	  XtNfromHoriz, cwp->numberL, NULL);
X   cwp->addressL = 	XtVaCreateManagedWidget("addressLabel", 
X	            	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->number, 
X		    	  XtNleft, XtChainLeft, NULL);
X   cwp->address = 	XtVaCreateManagedWidget("address", 
X	           	  asciiTextWidgetClass, card, 
X		   	  XtNstring, cdp->address, 
X		   	  XtNfromVert, cwp->number, 
X		   	  XtNfromHoriz, cwp->addressL, NULL);
X   cwp->monthL = 	XtVaCreateManagedWidget("monthLabel", 
X	           	  labelWidgetClass, card, 
X		   	  XtNfromVert, cwp->address,
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->month = 	XtVaCreateManagedWidget("month", 
X	          	  asciiTextWidgetClass, card, 
X		  	  XtNstring, cdp->month, 
X		  	  XtNfromVert, cwp->address,
X		  	  XtNfromHoriz, cwp->monthL, NULL);
X   cwp->yearL = 	XtVaCreateManagedWidget("yearLabel", 
X	          	  labelWidgetClass, card, 
X		  	  XtNfromVert, cwp->address,
X		  	  XtNfromHoriz, cwp->month, NULL);
X   cwp->year = 		XtVaCreateManagedWidget("year", 
X	         	  asciiTextWidgetClass, card, 
X			  XtNborderWidth, 2,
X		 	  XtNstring, cdp->year, 
X		 	  XtNfromVert, cwp->address,
X		 	  XtNfromHoriz, cwp->yearL, NULL);
X   cwp->noteL = 	XtVaCreateManagedWidget("noteLabel", 
X	            	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->month,
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->note = 		XtVaCreateManagedWidget("note",
X	           	  asciiTextWidgetClass, card, 
X		   	  XtNstring, cdp->note, 
X		   	  XtNfromVert, cwp->month,
X		   	  XtNfromHoriz, cwp->noteL, NULL);
}
X
X
/*********************************************************************/
/* CreateUnpublishedWidgets:                                         */
/*    Creates widgets for card type unpublished                      */
/*********************************************************************/
static void
CreateUnpublishedWidgets (BibPtr bp, CardPtr cp)
{
CardWidgetsPtr cwp = &cp->cw->ct.cw;	/* ptr to widget ids */
CardDataPtr cdp = cp->cd;		/* ptr to real card data */
CardDataPtr cbp = &cp->cw->ct.buf;	/* ptr to text buffers */
Widget card = cp->cw->cardFlds;		/* parent widget */
X
X   cdp->annoteDisplayed = FALSE;
X   cdp->annoteChanged = FALSE;
X   cwp->titleL = 	XtVaCreateManagedWidget("titleLabel", 
X	           	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->category, 
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->title = 	XtVaCreateManagedWidget("title", 
X	          	  asciiTextWidgetClass, card, 
X			  XtNborderWidth, 2,
X		  	  XtNstring, cdp->title, 
X		    	  XtNfromVert, cwp->category, 
X		  	  XtNfromHoriz, cwp->titleL, NULL);
X   cwp->authorL = 	XtVaCreateManagedWidget("authorLabel", 
X	           	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->title, 
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->author = 	XtVaCreateManagedWidget("author", 
X	          	  asciiTextWidgetClass, card, 
X			  XtNborderWidth, 2,
X		  	  XtNstring, cdp->author, 
X		    	  XtNfromVert, cwp->title, 
X		  	  XtNfromHoriz, cwp->authorL, NULL);
X   cwp->monthL = 	XtVaCreateManagedWidget("monthLabel", 
X	           	  labelWidgetClass, card, 
X		   	  XtNfromVert, cwp->author,
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->month = 	XtVaCreateManagedWidget("month", 
X	          	  asciiTextWidgetClass, card, 
X		  	  XtNstring, cdp->month, 
X		  	  XtNfromVert, cwp->author,
X		  	  XtNfromHoriz, cwp->monthL, NULL);
X   cwp->yearL = 	XtVaCreateManagedWidget("yearLabel", 
X	          	  labelWidgetClass, card, 
X		  	  XtNfromVert, cwp->author,
X		  	  XtNfromHoriz, cwp->month, NULL);
X   cwp->year = 		XtVaCreateManagedWidget("year", 
X	         	  asciiTextWidgetClass, card, 
X		 	  XtNstring, cdp->year, 
X		 	  XtNfromVert, cwp->author,
X		 	  XtNfromHoriz, cwp->yearL, NULL);
X   cwp->noteL = 	XtVaCreateManagedWidget("noteLabel", 
X	            	  labelWidgetClass, card, 
X		    	  XtNfromVert, cwp->month,
X		   	  XtNleft, XtChainLeft, NULL);
X   cwp->note = 		XtVaCreateManagedWidget("note",
X	           	  asciiTextWidgetClass, card, 
X			  XtNborderWidth, 2,
X		   	  XtNstring, cdp->note, 
X		   	  XtNfromVert, cwp->month,
X		   	  XtNfromHoriz, cwp->noteL, NULL);
}
X
X
/*********************************************************************/
/* saveStdWidgetFlds:                                                */
/*    Saves data from standard widget fields                         */
/*********************************************************************/
static Errcode
saveStdWidgetFlds (CardPtr cp)
{
CardWidgetsPtr cwp = &cp->cw->ct.cw;	/* ptr to widget ids */
CardDataPtr cdp = cp->cd;		/* ptr to real card data */
CardDataPtr cbp = &cp->cw->ct.buf;	/* ptr to text buffers */
Widget card = cp->cw->cardFlds;		/* parent widget */
String str;
X   
X   XtVaGetValues(cwp->mainkey, XtNstring, &str, NULL);
X   if ((cdp->mainkey = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->crossref, XtNstring, &str, NULL);
X   if ((cdp->crossref = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->key, XtNstring, &str, NULL);
X   if ((cdp->key = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->category, XtNstring, &str, NULL);
X   if ((cdp->category = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->note, XtNstring, &str, NULL);
X   if ((cdp->note = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X
X   return(OK);
}
X
X
/*********************************************************************/
/* SaveArticleWidgets:                                               */
/*    Saves data from widget to new card                             */
/*********************************************************************/
static Errcode
SaveArticleWidgets (CardPtr cp)
{
CardWidgetsPtr cwp = &cp->cw->ct.cw;	/* ptr to widget ids */
CardDataPtr cdp = cp->cd;		/* ptr to real card data */
CardDataPtr cbp = &cp->cw->ct.buf;	/* ptr to text buffers */
Widget card = cp->cw->cardFlds;		/* parent widget */
String str;
X   
X   XtVaGetValues(cwp->title, XtNstring, &str, NULL);
X   if ((cdp->title = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->author, XtNstring, &str, NULL);
X   if ((cdp->author = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->journal, XtNstring, &str, NULL);
X   if ((cdp->journal = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->pages, XtNstring, &str, NULL);
X   if ((cdp->pages = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->month, XtNstring, &str, NULL);
X   if ((cdp->month = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->year, XtNstring, &str, NULL);
X   if ((cdp->year = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->volume, XtNstring, &str, NULL);
X   if ((cdp->volume = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->number, XtNstring, &str, NULL);
X   if ((cdp->number = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X
X   return(OK);
}
X
X
/*********************************************************************/
/* SaveBookWidgets:                                                  */
/*    Saves data from widget to new card                             */
/*********************************************************************/
static Errcode
SaveBookWidgets (CardPtr cp)
{
CardWidgetsPtr cwp = &cp->cw->ct.cw;	/* ptr to widget ids */
CardDataPtr cdp = cp->cd;		/* ptr to real card data */
CardDataPtr cbp = &cp->cw->ct.buf;	/* ptr to text buffers */
Widget card = cp->cw->cardFlds;		/* parent widget */
String str;
X
X   XtVaGetValues(cwp->title, XtNstring, &str, NULL);
X   if ((cdp->title = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->author, XtNstring, &str, NULL);
X   if ((cdp->author = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->editor, XtNstring, &str, NULL);
X   if ((cdp->editor = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->publisher, XtNstring, &str, NULL);
X   if ((cdp->publisher = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->address, XtNstring, &str, NULL);
X   if ((cdp->address = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->series, XtNstring, &str, NULL);
X   if ((cdp->series = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->month, XtNstring, &str, NULL);
X   if ((cdp->month = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->year, XtNstring, &str, NULL);
X   if ((cdp->year = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->volume, XtNstring, &str, NULL);
X   if ((cdp->volume = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->edition, XtNstring, &str, NULL);
X   if ((cdp->edition = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X
X   return(OK);
}
X
X
/*********************************************************************/
/* SaveBookletWidgets:                                               */
/*    Saves data from widget to new card                             */
/*********************************************************************/
static Errcode
SaveBookletWidgets (CardPtr cp)
{
CardWidgetsPtr cwp = &cp->cw->ct.cw;	/* ptr to widget ids */
CardDataPtr cdp = cp->cd;		/* ptr to real card data */
CardDataPtr cbp = &cp->cw->ct.buf;	/* ptr to text buffers */
Widget card = cp->cw->cardFlds;		/* parent widget */
String str;
X
X   XtVaGetValues(cwp->title, XtNstring, &str, NULL);
X   if ((cdp->title = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->author, XtNstring, &str, NULL);
X   if ((cdp->author = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->howpublished, XtNstring, &str, NULL);
X   if ((cdp->howpublished = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->address, XtNstring, &str, NULL);
X   if ((cdp->address = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->month, XtNstring, &str, NULL);
X   if ((cdp->month = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->year, XtNstring, &str, NULL);
X   if ((cdp->year = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X
X   return(OK);
}
X
X
/*********************************************************************/
/* SaveConferenceWidgets:                                            */
/*    Saves data from widget to new card                             */
/*********************************************************************/
static Errcode
SaveConferenceWidgets (CardPtr cp)
{
CardWidgetsPtr cwp = &cp->cw->ct.cw;	/* ptr to widget ids */
CardDataPtr cdp = cp->cd;		/* ptr to real card data */
CardDataPtr cbp = &cp->cw->ct.buf;	/* ptr to text buffers */
Widget card = cp->cw->cardFlds;		/* parent widget */
String str;
X
X   XtVaGetValues(cwp->title, XtNstring, &str, NULL);
X   if ((cdp->title = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->booktitle, XtNstring, &str, NULL);
X   if ((cdp->booktitle = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->author, XtNstring, &str, NULL);
X   if ((cdp->author = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->editor, XtNstring, &str, NULL);
X   if ((cdp->editor = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->organization, XtNstring, &str, NULL);
X   if ((cdp->organization = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->publisher, XtNstring, &str, NULL);
X   if ((cdp->publisher = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->address, XtNstring, &str, NULL);
X   if ((cdp->address = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->pages, XtNstring, &str, NULL);
X   if ((cdp->pages = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->month, XtNstring, &str, NULL);
X   if ((cdp->month = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->year, XtNstring, &str, NULL);
X   if ((cdp->year = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X
X   return(OK);
}
X
X
/*********************************************************************/
/* SaveInbookWidgets:                                                */
/*    Saves data from widget to new card                             */
/*********************************************************************/
static Errcode
SaveInbookWidgets (CardPtr cp)
{
CardWidgetsPtr cwp = &cp->cw->ct.cw;	/* ptr to widget ids */
CardDataPtr cdp = cp->cd;		/* ptr to real card data */
CardDataPtr cbp = &cp->cw->ct.buf;	/* ptr to text buffers */
Widget card = cp->cw->cardFlds;		/* parent widget */
String str;
X
X   XtVaGetValues(cwp->title, XtNstring, &str, NULL);
X   if ((cdp->title = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->author, XtNstring, &str, NULL);
X   if ((cdp->author = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->editor, XtNstring, &str, NULL);
X   if ((cdp->editor = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->chapter, XtNstring, &str, NULL);
X   if ((cdp->chapter = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->pages, XtNstring, &str, NULL);
X   if ((cdp->pages = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->publisher, XtNstring, &str, NULL);
X   if ((cdp->publisher = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->address, XtNstring, &str, NULL);
X   if ((cdp->address = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->series, XtNstring, &str, NULL);
X   if ((cdp->series = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->month, XtNstring, &str, NULL);
X   if ((cdp->month = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->year, XtNstring, &str, NULL);
X   if ((cdp->year = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->volume, XtNstring, &str, NULL);
X   if ((cdp->volume = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->edition, XtNstring, &str, NULL);
X   if ((cdp->edition = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X
X   return(OK);
}
X
X
/*********************************************************************/
/* SaveIncollectionWidgets:                                          */
/*    Saves data from widget to new card                             */
/*********************************************************************/
static Errcode
SaveIncollectionWidgets (CardPtr cp)
{
CardWidgetsPtr cwp = &cp->cw->ct.cw;	/* ptr to widget ids */
CardDataPtr cdp = cp->cd;		/* ptr to real card data */
CardDataPtr cbp = &cp->cw->ct.buf;	/* ptr to text buffers */
Widget card = cp->cw->cardFlds;		/* parent widget */
String str;
X
X   XtVaGetValues(cwp->title, XtNstring, &str, NULL);
X   if ((cdp->title = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->booktitle, XtNstring, &str, NULL);
X   if ((cdp->booktitle = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->author, XtNstring, &str, NULL);
X   if ((cdp->author = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->editor, XtNstring, &str, NULL);
X   if ((cdp->editor = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->publisher, XtNstring, &str, NULL);
X   if ((cdp->publisher = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->address, XtNstring, &str, NULL);
X   if ((cdp->address = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->chapter, XtNstring, &str, NULL);
X   if ((cdp->chapter = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->pages, XtNstring, &str, NULL);
X   if ((cdp->pages = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->month, XtNstring, &str, NULL);
X   if ((cdp->month = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->year, XtNstring, &str, NULL);
X   if ((cdp->year = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X
X   return(OK);
}
X
X
/*********************************************************************/
/* SaveInproceedingsWidgets:                                         */
/*    Saves data from widget to new card                             */
/*********************************************************************/
static Errcode
SaveInproceedingsWidgets (CardPtr cp)
{
CardWidgetsPtr cwp = &cp->cw->ct.cw;	/* ptr to widget ids */
CardDataPtr cdp = cp->cd;		/* ptr to real card data */
CardDataPtr cbp = &cp->cw->ct.buf;	/* ptr to text buffers */
Widget card = cp->cw->cardFlds;		/* parent widget */
String str;
X
X   XtVaGetValues(cwp->title, XtNstring, &str, NULL);
X   if ((cdp->title = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->booktitle, XtNstring, &str, NULL);
X   if ((cdp->booktitle = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->author, XtNstring, &str, NULL);
X   if ((cdp->author = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->editor, XtNstring, &str, NULL);
X   if ((cdp->editor = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->organization, XtNstring, &str, NULL);
X   if ((cdp->organization = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->publisher, XtNstring, &str, NULL);
X   if ((cdp->publisher = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->address, XtNstring, &str, NULL);
X   if ((cdp->address = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->pages, XtNstring, &str, NULL);
X   if ((cdp->pages = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->month, XtNstring, &str, NULL);
X   if ((cdp->month = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->year, XtNstring, &str, NULL);
X   if ((cdp->year = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X
X   return(OK);
}
X
X
/*********************************************************************/
/* SaveManualWidgets:                                                */
/*    Saves data from widget to new card                             */
/*********************************************************************/
static Errcode
SaveManualWidgets (CardPtr cp)
{
CardWidgetsPtr cwp = &cp->cw->ct.cw;	/* ptr to widget ids */
CardDataPtr cdp = cp->cd;		/* ptr to real card data */
CardDataPtr cbp = &cp->cw->ct.buf;	/* ptr to text buffers */
Widget card = cp->cw->cardFlds;		/* parent widget */
String str;
X
X   XtVaGetValues(cwp->title, XtNstring, &str, NULL);
X   if ((cdp->title = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->author, XtNstring, &str, NULL);
X   if ((cdp->author = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->organization, XtNstring, &str, NULL);
X   if ((cdp->organization = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->address, XtNstring, &str, NULL);
X   if ((cdp->address = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->edition, XtNstring, &str, NULL);
X   if ((cdp->edition = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->month, XtNstring, &str, NULL);
X   if ((cdp->month = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->year, XtNstring, &str, NULL);
X   if ((cdp->year = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X
X   return(OK);
}
X
X
/*********************************************************************/
/* SaveMasterthesisWidgets:                                          */
/*    Saves data from widget to new card                             */
/*********************************************************************/
static Errcode
SaveMasterthesisWidgets (CardPtr cp)
{
CardWidgetsPtr cwp = &cp->cw->ct.cw;	/* ptr to widget ids */
CardDataPtr cdp = cp->cd;		/* ptr to real card data */
CardDataPtr cbp = &cp->cw->ct.buf;	/* ptr to text buffers */
Widget card = cp->cw->cardFlds;		/* parent widget */
String str;
X
X   XtVaGetValues(cwp->title, XtNstring, &str, NULL);
X   if ((cdp->title = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->author, XtNstring, &str, NULL);
X   if ((cdp->author = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->school, XtNstring, &str, NULL);
X   if ((cdp->school = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->address, XtNstring, &str, NULL);
X   if ((cdp->address = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->month, XtNstring, &str, NULL);
X   if ((cdp->month = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->year, XtNstring, &str, NULL);
X   if ((cdp->year = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X
X   return(OK);
}
X
X
/*********************************************************************/
/* SaveMiscWidgets:                                                  */
/*    Saves data from widget to new card                             */
/*********************************************************************/
static Errcode
SaveMiscWidgets (CardPtr cp)
{
CardWidgetsPtr cwp = &cp->cw->ct.cw;	/* ptr to widget ids */
CardDataPtr cdp = cp->cd;		/* ptr to real card data */
CardDataPtr cbp = &cp->cw->ct.buf;	/* ptr to text buffers */
Widget card = cp->cw->cardFlds;		/* parent widget */
String str;
X
X   XtVaGetValues(cwp->title, XtNstring, &str, NULL);
X   if ((cdp->title = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->author, XtNstring, &str, NULL);
X   if ((cdp->author = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->howpublished, XtNstring, &str, NULL);
X   if ((cdp->howpublished = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->month, XtNstring, &str, NULL);
X   if ((cdp->month = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->year, XtNstring, &str, NULL);
X   if ((cdp->year = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X
X   return(OK);
}
X
X
/*********************************************************************/
/* SavePhdthesisWidgets:                                             */
/*    Saves data from widget to new card                             */
/*********************************************************************/
static Errcode
SavePhdthesisWidgets (CardPtr cp)
{
CardWidgetsPtr cwp = &cp->cw->ct.cw;	/* ptr to widget ids */
CardDataPtr cdp = cp->cd;		/* ptr to real card data */
CardDataPtr cbp = &cp->cw->ct.buf;	/* ptr to text buffers */
Widget card = cp->cw->cardFlds;		/* parent widget */
String str;
X
X   XtVaGetValues(cwp->title, XtNstring, &str, NULL);
X   if ((cdp->title = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->author, XtNstring, &str, NULL);
X   if ((cdp->author = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->school, XtNstring, &str, NULL);
X   if ((cdp->school = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->address, XtNstring, &str, NULL);
X   if ((cdp->address = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->month, XtNstring, &str, NULL);
X   if ((cdp->month = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->year, XtNstring, &str, NULL);
X   if ((cdp->year = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X
X   return(OK);
}
X
X
/*********************************************************************/
/* SaveProceedingsWidgets:                                           */
/*    Saves data from widget to new card                             */
/*********************************************************************/
static Errcode
SaveProceedingsWidgets (CardPtr cp)
{
CardWidgetsPtr cwp = &cp->cw->ct.cw;	/* ptr to widget ids */
CardDataPtr cdp = cp->cd;		/* ptr to real card data */
CardDataPtr cbp = &cp->cw->ct.buf;	/* ptr to text buffers */
Widget card = cp->cw->cardFlds;		/* parent widget */
String str;
X
X   XtVaGetValues(cwp->title, XtNstring, &str, NULL);
X   if ((cdp->title = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->editor, XtNstring, &str, NULL);
X   if ((cdp->editor = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->organization, XtNstring, &str, NULL);
X   if ((cdp->organization = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->publisher, XtNstring, &str, NULL);
X   if ((cdp->publisher = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->address, XtNstring, &str, NULL);
X   if ((cdp->address = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->pages, XtNstring, &str, NULL);
X   if ((cdp->pages = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->month, XtNstring, &str, NULL);
X   if ((cdp->month = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->year, XtNstring, &str, NULL);
X   if ((cdp->year = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X
X   return(OK);
}
X
X
/*********************************************************************/
/* SaveTechreportWidgets:                                            */
/*    Saves data from widget to new card                             */
/*********************************************************************/
static Errcode
SaveTechreportWidgets (CardPtr cp)
{
CardWidgetsPtr cwp = &cp->cw->ct.cw;	/* ptr to widget ids */
CardDataPtr cdp = cp->cd;		/* ptr to real card data */
CardDataPtr cbp = &cp->cw->ct.buf;	/* ptr to text buffers */
Widget card = cp->cw->cardFlds;		/* parent widget */
String str;
X
X   XtVaGetValues(cwp->title, XtNstring, &str, NULL);
X   if ((cdp->title = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->author, XtNstring, &str, NULL);
X   if ((cdp->author = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->institution, XtNstring, &str, NULL);
X   if ((cdp->institution = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->type, XtNstring, &str, NULL);
X   if ((cdp->type = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->number, XtNstring, &str, NULL);
X   if ((cdp->number = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->address, XtNstring, &str, NULL);
X   if ((cdp->address = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->month, XtNstring, &str, NULL);
X   if ((cdp->month = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   XtVaGetValues(cwp->year, XtNstring, &str, NULL);
SHAR_EOF
true || echo 'restore of gui_card.c failed'
fi
echo 'End of  part 16'
echo 'File gui_card.c is continued in part 17'
echo 17 > _shar_seq_.tmp
exit 0
-- 
Senior Systems Scientist		mail: dcmartin@msi.com
Molecular Simulations, Inc.		uucp: uunet!dcmartin
796 North Pastoria Avenue		at&t: 408/522-9236
Sunnyvale, California 94086		fax: 408/732-0831
