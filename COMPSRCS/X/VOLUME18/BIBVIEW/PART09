Path: uunet!dtix!darwin.sura.net!mips!msi!dcmartin
From: liebla@informatik.tu-muenchen.de (Armin Liebl)
Newsgroups: comp.sources.x
Subject: v18i107: bibview - BibTeX GUI, Part09/20
Message-ID: <1992Aug27.161536.25585@msi.com>
Date: 27 Aug 92 16:15:36 GMT
References: <csx-18i099-bibview@uunet.UU.NET>
Sender: dcmartin@msi.com (David C. Martin - Moderator)
Organization: Molecular Simulations, Inc.
Lines: 1253
Approved: dcmartin@msi.com
Originator: dcmartin@fascet

Submitted-by: Armin Liebl <liebla@informatik.tu-muenchen.de>
Posting-number: Volume 18, Issue 107
Archive-name: bibview/part09

#!/bin/sh
# this is part.09 (part 9 of a multipart archive)
# do not concatenate these parts, unpack them in order with /bin/sh
# file bitmaps/proggerm.xbm continued
#
if test ! -r _shar_seq_.tmp; then
	echo 'Please unpack part 1 first!'
	exit 1
fi
(read Scheck
 if test "$Scheck" != 9; then
	echo Please unpack part "$Scheck" next!
	exit 1
 else
	exit 0
 fi
) < _shar_seq_.tmp || exit 1
if test ! -f _shar_wnt_.tmp; then
	echo 'x - still skipping bitmaps/proggerm.xbm'
else
echo 'x - continuing file bitmaps/proggerm.xbm'
sed 's/^X//' << 'SHAR_EOF' >> 'bitmaps/proggerm.xbm' &&
X   0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00,
X   0x9f, 0x49, 0x02, 0x04, 0x19, 0x40, 0x00, 0x47, 0x4a, 0x92, 0x94, 0x44,
X   0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00,
X   0x81, 0x48, 0x02, 0x04, 0x09, 0x40, 0x00, 0x4c, 0x48, 0x92, 0x90, 0xc4,
X   0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00,
X   0x81, 0x48, 0x02, 0x84, 0x08, 0x40, 0x40, 0x48, 0x48, 0x92, 0x90, 0x44,
X   0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00,
X   0x81, 0x48, 0x02, 0xc4, 0x08, 0x50, 0xc0, 0x4c, 0x4a, 0x92, 0x94, 0xc4,
X   0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x84,
X   0xc3, 0x31, 0x12, 0x7e, 0x9c, 0x30, 0x42, 0x87, 0xdd, 0x3f, 0xbb, 0x99,
X   0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x08, 0x00, 0x40, 0x00, 0x0e, 0x02, 0x86, 0x01, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x01, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x01, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x14, 0xdd, 0x66, 0x0d, 0x04, 0x63, 0x1c, 0x01, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x22, 0x26, 0x49, 0x12, 0x04, 0x92, 0x24, 0x01, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x3e, 0x22, 0x49, 0x12, 0x04, 0xf2, 0x24, 0x01, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x22, 0x22, 0x49, 0x12, 0x04, 0x12, 0x24, 0x01, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x41, 0x22, 0x49, 0x12, 0x44, 0x32, 0x25, 0x01, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x80, 0xe3, 0x77, 0xfb, 0x37, 0x7e, 0xe7, 0x9c, 0x03, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x80, 0xc3, 0x01, 0x20, 0x00, 0x00, 0x00, 0x0e, 0x38,
X   0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x80, 0x1f, 0x00, 0x00, 0x00, 0xe0,
X   0x80, 0x03, 0x70, 0x38, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x81, 0x00, 0x30, 0x00, 0x00, 0x00, 0x0c, 0x18,
X   0x00, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x01, 0x00, 0xc0,
X   0x80, 0x01, 0x20, 0x10, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x81, 0x00, 0x20, 0x00, 0x00, 0x00, 0x14, 0x14,
X   0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x01, 0x00, 0x40,
X   0x41, 0x01, 0x20, 0x10, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x81, 0xe0, 0x20, 0x6c, 0x1c, 0x0d, 0x14, 0x14,
X   0x1c, 0xed, 0x11, 0x1d, 0x00, 0x00, 0x00, 0x41, 0x9c, 0xc7, 0xd1, 0x40,
X   0x41, 0x01, 0x20, 0x10, 0x9a, 0x0e, 0x47, 0x07, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x81, 0x10, 0x21, 0x32, 0xa2, 0x0b, 0x24, 0x12,
X   0xa2, 0x4b, 0x98, 0x33, 0x00, 0x00, 0x00, 0x21, 0x22, 0x21, 0xba, 0x40,
X   0x22, 0x01, 0x20, 0x10, 0x97, 0x89, 0xe8, 0x0c, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0xff, 0x08, 0x22, 0x21, 0x21, 0x01, 0x24, 0x12,
X   0x22, 0x41, 0x10, 0x21, 0x00, 0x00, 0x00, 0x1f, 0x21, 0x11, 0x12, 0x40,
X   0x22, 0x01, 0x20, 0x10, 0x82, 0x90, 0x48, 0x08, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x81, 0x08, 0x22, 0x21, 0x3f, 0x01, 0x24, 0x12,
X   0x38, 0x41, 0x10, 0x21, 0x00, 0x00, 0x00, 0x01, 0x3f, 0xf1, 0x13, 0x40,
X   0x22, 0x01, 0x20, 0x10, 0x82, 0x10, 0x4e, 0x08, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x81, 0x08, 0x22, 0x12, 0x01, 0x01, 0x44, 0x11,
X   0x26, 0x41, 0x10, 0x21, 0x00, 0x00, 0x00, 0x01, 0x01, 0x11, 0x10, 0x40,
X   0x14, 0x01, 0x20, 0x10, 0x82, 0x90, 0x49, 0x08, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x81, 0x08, 0x22, 0x0e, 0x01, 0x01, 0x44, 0x11,
X   0x22, 0x41, 0x10, 0x21, 0x00, 0x00, 0x00, 0x01, 0x01, 0x11, 0x10, 0x40,
X   0x14, 0x01, 0x20, 0x10, 0x82, 0x90, 0x48, 0x08, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x81, 0x10, 0x21, 0x01, 0x22, 0x01, 0x84, 0x10,
X   0xb2, 0x41, 0x11, 0x21, 0x00, 0x00, 0x00, 0x01, 0x22, 0x25, 0x12, 0x40,
X   0x08, 0x21, 0x40, 0x08, 0x82, 0x89, 0x6c, 0x08, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x80, 0xc3, 0xe1, 0x70, 0x3e, 0x9c, 0x03, 0x8e, 0x38,
X   0xec, 0x83, 0xb8, 0x73, 0x00, 0x00, 0x80, 0x03, 0x1c, 0xc2, 0x39, 0xe0,
X   0x88, 0x23, 0x80, 0x07, 0x07, 0x07, 0xfb, 0x1c, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
SHAR_EOF
echo 'File bitmaps/proggerm.xbm is complete' &&
chmod 0640 bitmaps/proggerm.xbm ||
echo 'restore of bitmaps/proggerm.xbm failed'
Wc_c="`wc -c < 'bitmaps/proggerm.xbm'`"
test 61288 -eq "$Wc_c" ||
	echo 'bitmaps/proggerm.xbm: original size 61288, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= ctl_card.c ==============
if test -f 'ctl_card.c' -a X"$1" != X"-c"; then
	echo 'x - skipping ctl_card.c (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting ctl_card.c (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'ctl_card.c' &&
/*********************************************************************/
/*  bibView: Administration of bibTex-Databases                      */
/*           (Verwaltung von bibTeX-Literaturdatenbanken)            */
/*                                                                   */
/*  Module:  ctl_card.c                                              */
/*                                                                   */
/*             Card Window Commands Control                          */
/*             - New      Open empty card window                     */
/*             - Change   Register changes done in card window       */
/*             - Copy     Copy card to other bibTeX file             */
/*                                                                   */
/*  Author:  Holger Martin,  martinh@informatik.tu-muenchen.de       */
/*           Peter M. Urban, urban@informatik.tu-muenchen.de         */
/*                                                                   */
/*  History:                                                         */
/*    01.25.92  PMU  created                                         */
/*    05.26.92       Version 1.0 released                            */
/*                                                                   */
/*  Copyright 1992 TU MUENCHEN                                       */
/*    See ./Copyright for complete rights and liability information. */
/*                                                                   */
/*********************************************************************/
X
#include <stdio.h>
#include <X11/Intrinsic.h>
#include <X11/StringDefs.h>
#include <X11/Xaw/Paned.h>
#include <X11/Xaw/Form.h>
#include <X11/Xaw/Box.h>
#include <X11/Xaw/Command.h>
#include <X11/Xaw/Dialog.h>
#include <X11/Xaw/MenuButton.h>
#include <X11/Xaw/SimpleMenu.h>
#include <X11/Xaw/SmeBSB.h>
#include <X11/Xaw/SmeLine.h>
#include <X11/Xaw/Text.h>
#include <X11/Xaw/AsciiText.h>
#include "bibview.h"
X
X
/* imported global variables */
/* ------------------------- */
extern Widget topLevel, mainMenu, desktop;
extern Pixmap questPixmap, annoteIconPixmap;
X
X
/* macros and definitions */
/* ---------------------- */
X
X
/* local function prototypes */
/* ------------------------- */
static void confirmCloseCard (CardPtr cp);
static void cancelQuitCmd (Widget w, XtPointer clientData, XtPointer callData);
static void cardQuitOkCmd (Widget w, XtPointer clientData, XtPointer callData);
static Errcode annoteSave (CardPtr cp); 
static Errcode annoteClose (CardPtr cp); 
static void annoteSaveCmd (Widget w, XtPointer clientData, XtPointer callData);
static void annoteCloseCmd (Widget w, XtPointer clientData, XtPointer callData);
X
X
/* exported variables */
/* ------------------ */
X
X
/* local global variables */
/* ---------------------- */
CardPtr gcp;
X
X
/*********************************************************************/
/* ccdNewCardCmd:                                                    */
/*    Callback function for command "New" in bib window              */
/*********************************************************************/
void 
ccdNewCardCmd (Widget w, XtPointer clientData, XtPointer callData)
{
BibPtr bp = (BibPtr)clientData;
Errcode status;
CardType type;
CardDataPtr cd;
CardPtr cp;
X
X   sscanf(XtName(w), "item%d", &type);
X   type -= 1;
X
X   /* create new internal data for a card window */
X   if ((status = dbtMakeCard(&cd)) != DBT_OK) {
X      guwError(status);
X      return;
X   }
X   cd->cardtype = type;
X   if ((cd->cardtypestr = glbNewString(glbTypeToName(type))) == NULL) {
X      guwError(ERR_NOMALLOC);
X      dbtDeleteCard(&cd);
X      return;
X   }
X   if ((status = glbNewCardListEl(bp, &cp, cd)) != OK) {
X      guwError(status);
X      dbtDeleteCard(&cd);
X      return;
X   }
X
X   /* open the window */
X   if ((status = gucOpenCardWin(bp, cp, TRUE)) != OK)
X      guwError(status);
}
X
X
/*********************************************************************/
/* ccdSaveCardCmd:                                                   */
/*    Callback function for command "Save" in card window            */
/*********************************************************************/
void 
ccdSaveCardCmd (Widget w, XtPointer clientData, XtPointer callData)
{
CardPtr cp = (CardPtr)clientData;
BibPtr bp = (BibPtr)cp->bp;
Errcode status;
X
X   if (cp->cd->annoteDisplayed == TRUE)
X      annoteClose(cp);
X
X   /* save data from text widgets to card */
X   if ((status = gucSaveCardData(cp)) != OK) {
X      guwError(status);
X      gulCloseListWin(bp);
X      return;
X   }
X
X   /* Check if data in card is OK */
X   if ((status = dbtTestCard(cp->cd)) != DBT_OK) {
X      if (cotRequiredFields()) {
X         guwWarning(status);
X         return;
X      }
X      guwWarning(ERR_REQFIELDS);
X   }
X
X   /* insert new card in data tree, possibly new mainkey */
X   if ((status = dbtInsert(bp->treeIdx, cp->cd)) != DBT_OK) {
X      guwError(status);
X      gulCloseListWin(bp);
X      return;
X   }
X   cp->changed = FALSE;
X   bp->changed = TRUE;
X
X   /* Change callback to change */
X   XtRemoveAllCallbacks(cp->cw->change, XtNcallback);
X   XtAddCallback(cp->cw->change, XtNcallback, ccdChangeCardCmd, (XtPointer)cp);
}
X
X
/*********************************************************************/
/* ccdUserdataCmd:                                                   */
/*    Callback function for command "Userdata" in card window        */
/*********************************************************************/
void 
ccdUserdataCmd (Widget w, XtPointer clientData, XtPointer callData)
{
CardPtr cp = (CardPtr)clientData;
Errcode status;
X
X   if (cp->extended)
X      status = gucCloseUserFields(cp);
X   else
X      status = gucOpenUserFields(cp);
X
X   if (status != OK)
X      guwError(status);
}
X
/*********************************************************************/
/* annoteSave:                                                       */
/*    Save "annote"  						     */
/*********************************************************************/
static Errcode 
annoteSave (CardPtr cp)
{
String str;
CardWidgetsPtr cwp = &cp->cw->ct.cw;
X   
X   free(cp->cd->annote);
X   XtVaGetValues(cwp->annote, XtNstring, &str, NULL);
X   if ((cp->cd->annote = glbNewString(str)) == NULL)
X      return(ERR_NOMALLOC);
X   cp->cd->annoteChanged = TRUE;
X   return(OK);
}
X
/*********************************************************************/
/* annoteSaveCmd:                                                    */
/*    Callback function for command "Save" in annote window          */
/*********************************************************************/
static void 
annoteSaveCmd (Widget w, XtPointer clientData, XtPointer callData)
{
Errcode status;
CardPtr cp = (CardPtr)clientData;
X   if ((status=annoteSave(cp))!=OK)
X      guwError(status);
X   return;
}
X
/*********************************************************************/
/* annoteClose:                                                      */
/*    Close  annote window                                           */
/*********************************************************************/
static Errcode 
annoteClose(CardPtr cp)
{
CardWidgetsPtr cwp = &cp->cw->ct.cw;
String str;
X   
X   cp->cd->annoteDisplayed = FALSE;
X   XtPopdown(cwp->annoteShell);
X   return(OK);
}
X
/*********************************************************************/
/* annoteCloseCmd:                                                   */
/*    Callback function for command "Close" in annote window         */
/*********************************************************************/
static void 
annoteCloseCmd (Widget w, XtPointer clientData, XtPointer callData)
{
CardPtr cp = (CardPtr)clientData;
X
X   annoteClose(cp);
}
X
/*********************************************************************/
/* ccdAnnoteCardCmd:                                                 */
/*    Callback function for command "Annote" in card window          */
/*********************************************************************/
void 
ccdAnnoteCardCmd (Widget w, XtPointer clientData, XtPointer callData)
{
CardPtr cp = (CardPtr)clientData;
BibPtr bp = (BibPtr)cp->bp;
CardWidgetsPtr cwp = &cp->cw->ct.cw;
Widget annoteWin, cmdBox, save, close;
Errcode status;
String hlpstring;
X   
X   if (cp->cd->mainkey==NULL)
X       hlpstring = (String) calloc(15,sizeof(char));
X   else
X       hlpstring = (String) calloc(strlen(cp->cd->mainkey)+10,
X		sizeof(char));
X   if (hlpstring == NULL)
X      {guwError(ERR_NOMALLOC);
X       return;
X       }
X   if (cp->cd->mainkey==NULL)
X      sprintf(hlpstring, "Annote: NEW");
X   else
X      sprintf(hlpstring, "Annote: %s", cp->cd->mainkey);
X   if (cp->cd->annoteDisplayed == TRUE)
X      {if (XtIsRealized(cwp->annoteShell))
X	  XRaiseWindow(XtDisplay(cwp->annoteShell),
X	                XtWindow(cwp->annoteShell));
X       return;
X       }
X   cwp->annoteShell = XtVaCreatePopupShell("AnnoteShell",
X	       topLevelShellWidgetClass, topLevel,
X	       XtNtitle, hlpstring,
X	       XtNiconName, cp->cd->mainkey,
X	       XtNiconPixmap, annoteIconPixmap, NULL);
X   free(hlpstring);
X   if (cp->cd->annote != NULL)
X      {hlpstring = (String)calloc(strlen(cp->cd->annote)+1, sizeof(char));
X       strcpy(hlpstring, cp->cd->annote);
X       }
X   else 
X      hlpstring = NULL;
X   annoteWin = XtVaCreateManagedWidget("annoteWin",
X		    panedWidgetClass, cwp->annoteShell, NULL);
X   cmdBox    = XtVaCreateManagedWidget("commandBox",
X                    boxWidgetClass, annoteWin, NULL);
X   save      = XtVaCreateManagedWidget("save",
X                    commandWidgetClass, cmdBox, NULL);
X   close     = XtVaCreateManagedWidget("close",
X                    commandWidgetClass, cmdBox, NULL);
X   cwp->annote = XtVaCreateManagedWidget("AnnoteText",
X		    asciiTextWidgetClass, annoteWin,
X		    XtNtype, XawAsciiString,
X		    XtNeditType, XawtextEdit, 
X		    XtNstring, hlpstring,
X		    XtNscrollHorizontal, XawtextScrollWhenNeeded,
X		    XtNscrollVertical, XawtextScrollWhenNeeded, NULL);
X   cp->cd->annoteDisplayed = TRUE;
X   free(hlpstring);
X   XtAddCallback(close, XtNcallback, annoteCloseCmd, (XtPointer)cp);
X   XtAddCallback(save, XtNcallback, annoteSaveCmd, (XtPointer)cp);
X   XtPopup(cwp->annoteShell, XtGrabNone);
X   return;
}
X
X
/*********************************************************************/
/* ccdDeleteCardCmd:                                                 */
/*    Callback function for command "Delete" in card window          */
/*********************************************************************/
void 
ccdDeleteCardCmd (Widget w, XtPointer clientData, XtPointer callData)
{
CardPtr cp = (CardPtr)clientData;
BibPtr bp = (BibPtr)cp->bp;
CardDataList cl, clp;
Errcode status;
X
X   /* remove card from list of cards for list window */
X   if (gulListWinExists(bp)) {
X      cl = clp = bp->lw->cardLst;
X      if (strcmp(cp->cd->mainkey, clp->data->mainkey) == 0) {
X	 bp->lw->cardLst = clp->next;
X	 cl = clp->next;
X	 dbtDeleteCard(&clp->data); 
X      }
X      else {
X	 while (clp->next != NULL) {
X	    if (strcmp(cp->cd->mainkey, clp->next->data->mainkey) == 0) {
X               dbtDeleteCard(&clp->next->data); 
X	       clp->next = clp->next->next;
X	       break;
X	    }
X	    clp = clp->next;
X	 } /* endwhile */
X      }
X
X      /* Update list window */
X      if (cl != NULL) {
X	 bp->lw->cardLst = NULL;
X	 if ((status = gulReplaceListData(bp, cl)) != OK) {
X	    guwError(status);
X	    gulCloseListWin(bp);
X	 }
X      }
X      else {
X	 if ((status = gulCloseListWin(bp)) != OK)
X	    guwError(status);
X      }
X   }
X
X   /* remove window */
X   if ((status = gucCloseCardWin(cp)) != OK) 
X      guwError(status);
X   
X   /* delete card from data tree */
X   if ((status = dbtDelete(bp->treeIdx, cp->cd)) != DBT_OK) {
X      guwError(status);
X      return;
X   }
X   bp->changed = TRUE;
X   
X
}
X
X
/*********************************************************************/
/* ccdChangeCardCmd:                                                 */
/*    Callback function for command "Change" in card window          */
/*********************************************************************/
void 
ccdChangeCardCmd (Widget w, XtPointer clientData, XtPointer callData)
{
CardPtr cp = (CardPtr)clientData;
BibPtr bp = (BibPtr)cp->bp;
CardDataList cl, clp;
Errcode status;
X
X   /* delete old card from data tree */
X   if ((status = dbtDelete(bp->treeIdx, cp->cd)) != DBT_OK) {
X      guwError(status);
X      return;
X   }
X
X   if (cp->cd->annoteDisplayed == TRUE)
X      annoteClose(cp);
X
X   /* remove old card from list of cards for list window, keep node */
X   if (gulListWinExists(bp)) {
X      cl = clp = bp->lw->cardLst;
X      if (strcmp(cp->cd->mainkey, clp->data->mainkey) == 0) {
X	 dbtDeleteCard(&clp->data);
X      }
X      else {
X	 while (clp->next != NULL) {
X	    if (strcmp(cp->cd->mainkey, clp->next->data->mainkey) == 0) {
X               dbtDeleteCard(&clp->next->data);
X	       clp = clp->next;
X	       break;
X	    }
X	    clp = clp->next;
X	 } /* endwhile */
X      } /* endelse */
X   } /* endif */
X
X   /* save data from text widgets to card */
X   if ((status = gucSaveCardData(cp)) != OK) {
X      guwError(status);
X      gulCloseListWin(bp);
X      return;
X   }
X
X   /* insert new card in data tree, possibly new mainkey */
X   if ((status = dbtInsert(bp->treeIdx, cp->cd)) != DBT_OK) {
X      guwError(status);
X      gulCloseListWin(bp);
X      return;
X   }
X   cp->changed = FALSE;
X   bp->changed = TRUE;
X
X   /* update node in list window with new card */
X   if (gulListWinExists(bp)) {
X      if ((status = CopyCard(&clp->data, cp->cd)) != DBT_OK) /* HOLGER */
X	 guwError(status);
X      /* replace "new" list with not existent old */
X      bp->lw->cardLst = NULL;
X      if ((status = gulReplaceListData(bp, cl)) != OK) {
X	 guwError(status);
X	 gulCloseListWin(bp);
X      }
X   } /* endif */
X
X   /* Check if data in card is OK */
X   if ((status = dbtTestCard(cp->cd)) != DBT_OK) {
X      if (cotRequiredFields()) {
X         guwWarning(status);
X         return;
X      }
X      guwWarning(ERR_REQFIELDS);
X   }
X
X
}
X
X
/*********************************************************************/
/* ccdCopyCardCmd:                                                   */
/*    Callback function for command "Copy" in card window            */
/*********************************************************************/
void 
ccdCopyCardCmd (Widget w, XtPointer clientData, XtPointer callData)
{
CardPtr cp = (CardPtr)clientData;
BibPtr bp = (BibPtr)cp->bp;
Errcode status;
X
X   gcp = cp;
X   if ((status = guwSelectBib("copyHead", ccdCopyCard1)) != OK)
X      guwError(status);
}
X
X
/*********************************************************************/
/* ccdCopyCard1:                                                     */
/*    intermediate function for copy card                            */
/*********************************************************************/
Errcode
ccdCopyCard1 (BibPtr bp)
{
BibPtr p = gcp->bp;
X
X   /* check bibs: can't be equal */
X   if (bp->treeIdx == p->treeIdx) {
X      return(ERR_COPY_SAME_BIB);
X   }
X
X   return(ccdCopyCard(bp, gcp));
}
X
X
/*********************************************************************/
/* ccdCopyCard:                                                      */
/*    copy card from one bib to another bib                          */
/*********************************************************************/
Errcode
ccdCopyCard (BibPtr bp, CardPtr cp)
{
Errcode status;
X
X   /* insert new card in data tree, possibly new mainkey */
X   if ((status = dbtInsert(bp->treeIdx, cp->cd)) != DBT_OK) {
X      guwError(status);
X      return(status);
X   }
X   bp->changed = TRUE;
X
X   return(OK);
}
X
X
/*********************************************************************/
/* ccdSetChangeFlag:                                                 */
/*    Set flag that card fields have changed                         */
/*********************************************************************/
void
ccdSetChangeFlag (Widget w, XtPointer clientData, XtPointer callData)
{
CardPtr cp = (CardPtr)clientData;
X
X   cp->changed = TRUE;
}
X
X
/*********************************************************************/
/* ccdCloseCardCmd:                                                  */
/*    Callback for close card command in card window                 */
/*********************************************************************/
void
ccdCloseCardCmd (Widget w, XtPointer clientData, XtPointer callData)
{
CardPtr cp = (CardPtr)clientData;
X
X   ccdCloseCard(cp->bp, cp);
}
X
X
/*********************************************************************/
/* ccdCloseCard:                                                     */
/*    close card window, check for changes                           */
/*********************************************************************/
Errcode
ccdCloseCard (BibPtr bp, CardPtr cp)
{
Errcode status;
CardDataList cl, clp;
X
X   if (cp->cd->annoteDisplayed == TRUE)
X      annoteClose(cp);
X   /* check for unsaved changes */
X   if (cp->changed || gucStdFldsChanged(cp)) {
X      cp->changed = TRUE;
X      confirmCloseCard(cp);
X      return(OK);
X   }
X   
X   /* Check if data in card is OK */
X   if ((status = dbtTestCard(cp->cd)) != DBT_OK) {
X      if (cotRequiredFields()) {
X         /* delete card from data tree */
X         if ((status = dbtDelete(bp->treeIdx, cp->cd)) != DBT_OK) {
X            guwError(status);
X            return;
X         }
X         bp->changed = TRUE;
X
X         /* remove card from list of cards for list window */
X         if (gulListWinExists(bp)) {
X            cl = clp = bp->lw->cardLst;
X            if (strcmp(cp->cd->mainkey, clp->data->mainkey) == 0) {
X               bp->lw->cardLst = clp->next;
X	       cl = clp->next;
X	       dbtDeleteCard(&clp->data);
X            }
X            else {
X	       while (clp->next != NULL) {
X	          if (strcmp(cp->cd->mainkey, clp->next->data->mainkey) == 0) {
X                     dbtDeleteCard(&clp->next->data);
X	             clp->next = clp->next->next;
X	             break;
X	          }
X	          clp = clp->next;
X	       } /* endwhile */
X            }
X
X            /* Update list window */
X            if (cl != NULL) {
X	       bp->lw->cardLst = NULL;
X	       if ((status = gulReplaceListData(bp, cl)) != OK) {
X	          guwError(status);
X	          gulCloseListWin(bp);
X	       }
X            }
X            else {
X	       if ((status = gulCloseListWin(bp)) != OK)
X	          guwError(status);
X            }
X         }
X      }
X   }
X   /* close card window */
X   if ((status = gucCloseCardWin(cp)) != OK) {
X      guwError(status);
X      return(status);
X   }
X
X   return(OK);
}
X
X
/*********************************************************************/
/* LOCAL FUNCTIONS                                                   */
/*********************************************************************/
X
/*********************************************************************/
/* confirmCloseCard:                                                 */
/*    Opens dialogbox for user to confirm closing without saving     */
/*********************************************************************/
static void
confirmCloseCard (CardPtr cp)
{
static Widget conShell, conDialog, conOkButton, conQuitButton;
Position dx, dy, x, y;
int status;
X
X   XtVaGetValues(desktop,
X                 XtNx, &dx,
X                 XtNy, &dy, NULL);
X   XtTranslateCoords(cp->cw->cardDesk,
X                     (Position)dx + SUBWIN_MARGIN,
X                     (Position)dy + SUBWIN_MARGIN,
X                     &x, &y);
X   conShell = XtVaCreatePopupShell("confirmQuitCardShell",
X	        transientShellWidgetClass, topLevel, 
X		XtNx, x, XtNy, y, NULL);
X   conDialog = XtVaCreateManagedWidget("confirmQuitCardBox",
X	         dialogWidgetClass, conShell, 
X		 XtNicon, questPixmap, NULL);
X   conOkButton = XtVaCreateManagedWidget("ok",
X	           commandWidgetClass, conDialog, NULL);
X   conQuitButton = XtVaCreateManagedWidget("cancel",
X	             commandWidgetClass, conDialog, NULL);
X   XtAddCallback(conOkButton, XtNcallback, cardQuitOkCmd, conShell);
X   XtAddCallback(conQuitButton, XtNcallback, cancelQuitCmd, conShell);
X
X   XtSetSensitive(mainMenu, FALSE);
X   gubSetSensitive(NULL, FALSE);
X   gcp = cp;
X   XtPopup(conShell, XtGrabNonexclusive);
}
X
X
/*********************************************************************/
/* cancelQuitCmd:                                                    */
/*    Callback function for QUIT button in confirm box               */
/*********************************************************************/
static void
cancelQuitCmd (Widget w, XtPointer clientData, XtPointer callData)
{
Widget shell = (Widget)clientData;
Errcode status;
X
X   /* remove confirm shell */
X   XtPopdown(shell);
X   gcp = NULL;
X   XtSetSensitive(mainMenu, TRUE);
X   gubSetSensitive(NULL, TRUE);
}
X
X
/*********************************************************************/
/* CardQuitOkCmd:                                                    */
/*    Callback function for OK button in confirm box                 */
/*********************************************************************/
static void
cardQuitOkCmd (Widget w, XtPointer clientData, XtPointer callData)
{
Widget shell = (Widget)clientData;
Errcode status;
X
X   /* remove confirm shell */
X   XtPopdown(shell);
X
X   /* close card window */
X   if ((status = gucCloseCardWin(gcp)) != OK) {
X      guwError(status);
X      return;
X   }
X   gcp = NULL;
X
X   /* enable menus */
X   XtSetSensitive(mainMenu, TRUE);
X   gubSetSensitive(NULL, TRUE);
}
X
X
X
SHAR_EOF
chmod 0644 ctl_card.c ||
echo 'restore of ctl_card.c failed'
Wc_c="`wc -c < 'ctl_card.c'`"
test 21466 -eq "$Wc_c" ||
	echo 'ctl_card.c: original size 21466, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= ctl_open.c ==============
if test -f 'ctl_open.c' -a X"$1" != X"-c"; then
	echo 'x - skipping ctl_open.c (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting ctl_open.c (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'ctl_open.c' &&
/*********************************************************************/
/*  bibView: Administration of bibTex-Databases                      */
/*           (Verwaltung von bibTeX-Literaturdatenbanken)            */
/*                                                                   */
/*  Module:  ctl_open.c                                              */
/*                                                                   */
/*             Open Control                                          */
/*             - Menu function New                                   */
/*             - Menu function Open                                  */
/*                                                                   */
/*  Author:  Holger Martin,  martinh@informatik.tu-muenchen.de       */
/*           Peter M. Urban, urban@informatik.tu-muenchen.de         */
/*                                                                   */
/*  History:                                                         */
/*    12.05.91  PMU  created                                         */
/*    05.26.92       Version 1.0 released                            */
/*                                                                   */
/*  Copyright 1992 TU MUENCHEN                                       */
/*    See ./Copyright for complete rights and liability information. */
/*                                                                   */
/*********************************************************************/
X
#include <stdio.h>
/* #include <stdlib.h> */
#include <X11/Intrinsic.h>
#include <X11/StringDefs.h>
#include <X11/Shell.h>
#include <X11/Xaw/Cardinals.h>
#include <X11/Xaw/Command.h>
#include <X11/Xaw/Dialog.h>
#include <X11/Xaw/Label.h>
#include <X11/Xaw/Box.h>
#include "FileNom.h"
#include "bibview.h"
X
X
/* macros and definitions */
/* ---------------------- */
#define NN_FILENAME	"noname"
#define NN_FILEEXT	".bib"
#define NN_FILENAMELEN  14
X
X
/* imported global variables */
/* ------------------------- */
extern XtAppContext app_context;
extern Widget topLevel, mainMenu, desktop;
extern Pixmap questPixmap;
X
X
/* exported global variables */
/* ------------------------- */
X
X
/* local function prototypes */
/* ------------------------- */
static void LoadBibFile (Widget w, XtPointer clientData, XtPointer callData);
static void CancelLoad (Widget w, XtPointer clientData, XtPointer callData);
static void confirmLoad (BibPtr bp);
static void cancelLoadCmd (Widget w, XtPointer clientData, XtPointer callData);
static void loadCmdOk (Widget w, XtPointer clientData, XtPointer callData);
X
X
/* local global variables */
/* ---------------------- */
static int nnCnt = 0;
static BibPtr gbp = NULL;
X
X
/*********************************************************************/
/* copNewCmd:                                                        */
/*    Callback function for option new in main window file menu      */
/*********************************************************************/
void
copNewCmd (Widget w, XtPointer clientData, XtPointer callData)
{
BibPtr bp;
FILE *tempFile;
int status;
X
X   /* make new global data struct for bib file */
X   if ((status = glbNewBibListEl(&bp)) != OK) {
X      guwError(status);
X      return;
X   }
X
X   /* build new noname filename */
X   sprintf(bp->filename, "%s%d%s", NN_FILENAME, nnCnt+1, NN_FILEEXT);
X   getcwd(bp->filepath, MAX_FILEPATHLEN);
X   strcat(bp->filepath, "/");
X   strcat(bp->filepath, bp->filename);
X
X   /* create temp file */
X   bp->tempfile = (char *)tempnam(NULL, NULL);
X   tempFile = fopen(bp->tempfile, "w" );
X   fclose(tempFile);
X
X   /* display window for bib */
X   if ((status = gubOpenBibWin(bp)) != OK) {
X      guwError(status); 
X      return;
X   }
X   nnCnt++;
}
X
X
/*********************************************************************/
/* copOpenCmd:                                                       */
/*    Callback function for option open in main window file menu     */
/*********************************************************************/
void
copOpenCmd (Widget w, XtPointer clientData, XtPointer callData)
{
static Widget fsbShell, fsbBox, fsbLabel, fsbDialog;
char fname[MAX_FILEPATHLEN];
Position dx, dy, x, y;
int status;
X
X   XtVaGetValues(desktop,
X                 XtNx, &dx,
X                 XtNy, &dy, NULL);
X   XtTranslateCoords(desktop,
X                     (Position)dx + SUBWIN_MARGIN,
X                     (Position)dy + SUBWIN_MARGIN,
X                     &x, &y);
X   fsbShell  = XtVaCreatePopupShell("fileSelectBoxShell",
X	         topLevelShellWidgetClass, desktop, 
X	 	 XtNx, x, XtNy, y, NULL);
X   fsbBox    = XtVaCreateManagedWidget("fileSelectBox",
X                 boxWidgetClass, fsbShell, NULL);
X   fsbLabel  = XtVaCreateManagedWidget("fileLoadHead",
X                 labelWidgetClass, fsbBox,
X                 XtNborderWidth, 0, NULL);
X   fsbDialog = XtVaCreateManagedWidget("loadFileBoxShell",
X                fileNominatorWidgetClass, fsbBox,
X                XtNborderWidth, 0, NULL);
X
X   XtAddCallback(fsbDialog, XtNcancelCallback, CancelLoad, fsbShell);
X   XtAddCallback(fsbDialog, XtNselectCallback, LoadBibFile, fsbDialog);
X
X   XtSetSensitive(mainMenu, FALSE);
X   gubSetSensitive(NULL, FALSE);
X   XtPopup(fsbShell, XtGrabNonexclusive);
}
X
X
X
/*********************************************************************/
/* LOCAL FUNCTIONS                                                   */
/*********************************************************************/
X
/*********************************************************************/
/* CancelLoad:                                                       */
/*    Callback function for CANCEL button in file select box         */
/*********************************************************************/
static void
CancelLoad (Widget w, XtPointer clientData, XtPointer callData)
{
Widget dialog = (Widget)clientData;
X
X   XtSetSensitive(mainMenu, TRUE);
X   gubSetSensitive(NULL, TRUE);
X   XtPopdown(dialog);
X
}
X
X
/*********************************************************************/
/* LoadBibFile:                                                      */
/*    Callback function for OK button in file select box             */
/*********************************************************************/
static void
LoadBibFile (Widget w, XtPointer clientData, XtPointer callData)
{
Widget dialog = (Widget)clientData;
String filepath;
BibPtr p, bp;
int status;
X
X   /* get and keep filename */
X   filepath = (String)FileNominatorGetFullFileName(dialog);
X
X   /* check if opened already */
X   p = glbFirstBibListEl();
X   while (p != NULL) {
X      if (strcmp(p->filepath, filepath) == 0) {
X	 if (p->ew != NULL)
X	    {guwError(ERR_IS_CORRECTED);
X             XtSetSensitive(mainMenu, TRUE);
X             gubSetSensitive(NULL, TRUE);
X             XtPopdown(XtParent(XtParent(dialog)));
X	     return;
X	     }
X	   
X	 XtSetSensitive(mainMenu, TRUE);
X	 gubSetSensitive(NULL, TRUE);
X	 XtPopdown(XtParent(XtParent(dialog)));
X	 confirmLoad(p);
X	 return;
X      }
X      p = glbNextBibListEl(p);
X   }
X
X   /* make new global data struct for bib file */
X   if ((status = glbNewBibListEl(&bp)) != OK) {
X      guwError(status);
X      XtSetSensitive(mainMenu, TRUE);
X      gubSetSensitive(NULL, TRUE);
X      XtPopdown(XtParent(XtParent(dialog)));
X      return;
X   }
X   strcpy(bp->filepath, filepath);
X   strcpy(bp->filename, (String)FileNominatorGetFileName(dialog));
X   bp->mw=NULL;
X   bp->ew=NULL;
X
X   /* remove file select box */
X   XtSetSensitive(mainMenu, TRUE);
X   gubSetSensitive(NULL, TRUE);
X   XtPopdown(XtParent(XtParent(dialog))); 
X
X   /* read file into tree and open bib window */
X   if ((status = bifFileRead(bp)) == BIF_EOPEN) {
X      glbDelBibListEl(bp); 
X      guwError(status);
X      return;
X   }
X   if (status != BIF_OK) {
X      status = gueOpenBibErrWin(bp, (int)status);   
X      if (status == ERR_NOBIB)
X         glbDelBibListEl(bp); 
X      return;
X   }
X   if ((status = gubOpenBibWin(bp)) != OK) {
X  /*    glbDelBibListEl(bp);  */
X      guwError(status);
X      return;
X   }
X   
X   /* check cards, if option is on */
X   if (cotAutoCheckBib()) 
X      cseCheckBib(bp, False);      
}
X
X
/*********************************************************************/
/* confirmLoad:                                                      */
/*    Opens dialogbox for user to confirm loading from disk          */
/*********************************************************************/
static void
confirmLoad (BibPtr bp)
{
static Widget conShell, conDialog, conOKButton, conQuitButton;
Position dx, dy, x, y;
int status;
X
X   XtVaGetValues(desktop,
X                 XtNx, &dx,
X                 XtNy, &dy, NULL);
X   XtTranslateCoords(desktop,
X                     (Position)dx + SUBWIN_MARGIN,
X                     (Position)dy + SUBWIN_MARGIN,
X                     &x, &y);
X   conShell = XtVaCreatePopupShell("confirmLoadShell",
X	        transientShellWidgetClass, topLevel, 
SHAR_EOF
true || echo 'restore of ctl_open.c failed'
fi
echo 'End of  part 9'
echo 'File ctl_open.c is continued in part 10'
echo 10 > _shar_seq_.tmp
exit 0
-- 
Senior Systems Scientist		mail: dcmartin@msi.com
Molecular Simulations, Inc.		uucp: uunet!dcmartin
796 North Pastoria Avenue		at&t: 408/522-9236
Sunnyvale, California 94086		fax: 408/732-0831
