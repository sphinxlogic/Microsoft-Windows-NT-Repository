Newsgroups: comp.sources.x
From: jck@kimba.catt.citri.edu.au (Justin Kibell)
Subject: v20i119:  xboing - a simple blockout type game, Part12/26
Message-ID: <1993Sep3.123326.7578@sparky.sterling.com>
X-Md4-Signature: 1a431141f291af44065dce2604ce6cc0
Sender: chris@sparky.sterling.com (Chris Olson)
Organization: Sterling Software
Date: Fri, 3 Sep 1993 12:33:26 GMT
Approved: chris@sterling.com

Submitted-by: jck@kimba.catt.citri.edu.au (Justin Kibell)
Posting-number: Volume 20, Issue 119
Archive-name: xboing/part12
Environment: X11, xpm, color

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# Contents:  bitmaps/background2.xpm bitmaps/background5.xpm level.c
#   sfx.h
# Wrapped by chris@sparky on Fri Sep  3 07:14:46 1993
PATH=/bin:/usr/bin:/usr/ucb:/usr/local/bin:/usr/lbin ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 12 (of 26)."'
if test -f 'bitmaps/background2.xpm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/background2.xpm'\"
else
  echo shar: Extracting \"'bitmaps/background2.xpm'\" \(17313 characters\)
  sed "s/^X//" >'bitmaps/background2.xpm' <<'END_OF_FILE'
X/* XPM */
Xstatic char *background2_xpm[] = {
X/* width height ncolors chars_per_pixel */
X"128 128 19 1",
X/* colors */
X"` c #191315",
X"a c #846342",
X"b c #342114",
X"c c #806B61",
X"d c #110F0E",
X"e c #8D7360",
X"f c #594123",
X"g c #3F343B",
X"h c #372915",
X"i c #988067",
X"j c #6C4E35",
X"k c #725C58",
X"l c #A58C72",
X"m c #231A1D",
X"n c #2D262A",
X"o c #4A3118",
X"p c #594544",
X"q c #615259",
X"r c #030203",
X/* pixels */
X"fohofffohffobofffohbbmbhfjaeeiiiiiiiiieajfohhbbhfjjjfhbmhffjffoohbdrrmpqqqpggggqkccqgmmngggggpkcccqpggggg`dnpccecckpgggnmmrr`qaj",
X"ooofjfoooffoboffohbbbbbofjaakccccccceaajfhbbbmmhffffobbboffjjffobmdrdggppqqpgggqcecqgm`nggggpqkcccqpgnnnnddnpceecccqpggm`mdrdgfo",
X"offjffoofffohoffobbbbbhffpgm```````mgpjfohbbbbbbooooobbbofjjjjfob`rr`nggpqqpgggqceekgm`mngppqqqqqqqpgnmm`ddmpceeecckpgn`mn`rrmbb",
X"hofffohffjfohofobhohhhohm`drrrrrrrrrd`mhhhhhhhhbbhofoohhofjajfobh`rrmmmnpkkqpgpkceckgm``ngpkkqqppqqpgn`d`ddmgkeeeeccqgm`ngmrr`bb",
X"hhooohofjjfohooohofohm`drrrdgkcqpndrrrrd`mhoooobbofffohhfjaajfbbhdrdmd`ngqkqpppkcccqpgn`mgpkkqppppppgndd```mgqceeeccqgmmgpgdrdho",
X"ohhbbhofjjfobbbhohm`drrrdgqccqkpppqpndrrrrd`mhbhojjjfhbhfjaajohhmrr``rdmgpqqpqqkckqqqpg`dnpkkqpggpppgmddmm``npceeeckpn`mgpq`rrmo",
X"oohbbhfjjjfobmbm`drrrdnqccqkcckpgngppqpndrrrrddmgpajfbbofaajfoof`rrmdddmggppqkcckqpqqkpndmpqqppggggggmd`nm``ngkceckqpn`mgppmrr`h",
X"ffhbbhfjjjfhmddrrrdnqcckkceeeckpgnnggngpqpndrrrrd`mhombojajfhhfhdrdmddd`mngpqcccqppqcckg`mgpppppggggn`dmnm``ngqcccqpgm`mgggndrdh",
X"ffhbbhfpgm`drrrdnpccqpqqkceeecqgggggn`dmgqqqgndrrrrd``bojjfobhfmrr``dd`d`mngqcccqppqcccpnmnggpppgggnm```m```ngpqkqppgm``ngnmdrrm",
X"fobmbhm`drrrrnpcckgngpkccccccqpgggggn`d`gqccqqqgmdrrrrd`mhobbof`rr`dd`````mgpcccqppqceekgm`mggppggn`dd```d`mnggppppggmdd```ddrr`",
X"mhb``drrrrmpcckkkgnngqccccckqpggggggndd`gpceeekqqqgmrrrrrd`mhhndrdnmmnnmm`mnpqcckqqkceecpnd`ngggggn`dddddd`mnngggggggn`ddd```drd",
X"dddrrrrmpcckqpqkqgmngqccccqpgggggggnmddmgpkccckpggpqpgmrrrrrdddrrdgggggnm``ngpqccccceeecqgmd`mgggnmddddddd`mmmmmnngggnm```mmmdrr",
X"rrrr`pcccccckqqqpn`mgqccckpggnggggnnmd`ngppqppppgnnmgpqpg`rrrrrrrdgpppggn``mggpkceeeeeeckpg`d`nggnm`dddddd``````mnggggnnnnnnndrr",
X"rdgkcqggqceeckqpgm`mgqkckqgnnnngnnm`ddmngggggggggm`d``mgpqpgdrrrrrdmgqpgndddngpceeceeecckqpn`d`mnnnmmddd``dd``dddmngggggnngmdrrr",
X"rckgmd`gqceeccpgn`mngppqqpgnnmnnm``dd`mnggnnnnnnn`dd`d`mggppqrrrrrrrd`mgn`ddmnpceckkcccckqqgg`ddmnnnn`d`m`d`mm`dd`ngpppgm`drrrrr",
X"rkgdddmgqcelecpn`dmngggggggnnmm``````mnnnm````mmmdd```d`ngqcndrmldrrrrrd`m`dmnpcecqqcccckkkqgn`d`mgggmdmnmdmnm`dddmggm`drrrrrddr",
X"rgkdd`ngqceeckgmddnnngnnnnnnnm``mnnnnnmmmddd`mmmm`mmmmm`mgqcmrrpajfmdrrrrrd`mgqcecpqkcccccckpgn``mgggmd`mm`mnnmdddm`drrrrrmpilnd",
X"r`cmmngpqccckpg`ddmnnmm````mm`dmnggggnm`ddd`nnggnnmmnnn``gqq`rrijfjaajo`rrrrrd`mgqqpkcecccccqpgm`mggnmdd`dd`mnmdddrrrrrmpiliajfm",
X"drkgggpppqqqpgndddmmmm`ddd````mngqppgn`d``nggppppgnnnnn``gqgdrmlfffffjjajfmrrrrrd`mgqceecccckpgm`mngn`dddddd``drrrrrmpilijjfffoh",
X"`rgkgqqqpgggnm`ddddd`dddddd```ngqckqgnddmnggpkkkqpgnnnn`dnqmrrqiffohofaeaaajphdrrrrd`mgqcccckpgmd`nnmm`dddddrrrrrmpiliafbofohhoh",
X"mr`cpkkqgnm``ddddddd````mmmnnngpqcckpmddnggqkccckqpggnn``gq`rrijfooofaiiiiicaaajfmrrrrd`mgqckpg`ddmmmmmddrrrrrmpilieaffhoofhbboh",
X"bdrcqkkpnm`d`dddddd`mm``mngggggpkcecpmd`ggpkcceeccqpgnmdmggdrmlohbofjilliiilllckjajfbdrrrd`mgpgmdd`m`drrrrrmpiliaaaajfohohhhoofo",
X"o`rpkqpgn`mmnmm```mnnnm`ngqkkqppkcccpn`mgpqkceeeeccqgn`dmgmrrqebbhfaelllillliillicjjjajodrrrd`mm`ddrrrrrmpilijffjjjjjfohhbbffjfo",
X"omrmcpgn``mnngnm``nggnmmgqceecqqkcckpnmnpqqcceeeeeckgmddnp`rdipbhfjeillliiiiiiiieajfffjjajfmrrrdrrrrrmpiliajfffjjjjjfohbbbojjjfo",
X"fgdrcpn`ddmggggn`mnnnnngpceeecckkccqgmmnpqqcceecceecg`d`ggdrnloofaaiiiiiiieiiiieajfffffoofjaajhdrrmpiliejfffffjjfffffobmbofjajfo",
X"jq`rpq`dddmgpppn``nnnngpceeeeeeckqqpgm`npqqcccccceecg`d`gmrrjehfjaiiiiieeeeiiieajffffffoobbofpjaaaliieajffffjjfoohhhhbbmhfjaajff",
X"aemrmc`dd`mgpqpn`dm`mnpceeccceeckqpgg`dmgpqcccccccckgm`ng`rdijfjaiiieeaaeiiiiiajjfffffffohoffjffjaaeaajffoffffohbbbbbbbbofjajfff",
X"aegdrcgd`mngpqpnmd`dmgqccckkceecqpggn`dmggpccccccccqgmmngdrhlfjaiiiieaaeiillieajjjjffffoooffjjjjjaaajfobbhoohoofoohhbmmhfjjjfffj",
X"jap`rpq`mngpppggn``dmpcckqqkceecqpggnm``ngpceccccckpn`mnmrrkefaiiiiieeeillllieaajjjffffohoffjffjjjjjfhbbbhhmbofjjjffobbhffffffff",
X"fffmrnc`ngpqpgggnmm`nqccqpqceeccqpggnmm`mgpceececcqgn`mn`rdlaaillliieiiillllieaaajjffffobhffffffffooooooooohofaeeajfobbboffoooof",
X"oofhddcgnpqkpggngmmmgkeckqkceeckkqpggnn``npceeeeckpnm`mndrglaiilllliiilllllliieaajjffffobhofffffobbofjjjjfffjeiiiejfobbbhoooohhh",
X"bofp`rppgqccqgnngmdmpceeccceeckkkqppggn``npccecckqgmddmmrrcieillilliiillillliieaajjjjjfohbhhohhoooffjaaaajjaeillieafobbbbhhhhbbb",
X"ofjamrncpcccqggnnddnpceeeeeeccccckqppgg``npqkckkqpgmddm`rdliiiiiiiliiilliillliiaaajjjjjffhbbbbbofjaaaeeaaaaeillliejfhbbbbhhhhbbb",
X"fjaagddcpceekpgm`d`gqccccccccccccckqpgg`d`gppppppgn`ddmdrgliliieiiliiiliiiillieaaaaaajjjfohmbbofaeeieeeeeeeilllliajobmbhhooohbbh",
X"fjaap`rpqccccpg`d`ngqkkkqqkkccccccckqgn`ddnngggpggn```mrrciiieaeiiiiiiiieeillieaaaaaajjjjfobbojaeiiiiiiiieiilllliafhbbooooooohof",
X"jaajfmrncqcccqgm`ngppppppppqkcccceccqgnm``m``mgggnm````rdleieaailiiiiieaaeiliieeeeeaaaaajfobofaiiiiiiiiiiiilllliejobhofffffoooof",
X"jjjjfhddcpcccpgnnggpggggggpqkcceeeecpggnggnmd`nggnm```drpiliaaailieilieaeilliiiiiieaaaaajfohfjeiliiiiiiiiiilllliafohfffffffffffj",
X"jjjjjp`rqpkckpnnngggnmmmnggpqkceeeckpgggppgn`d`nnnm`ddrrcelieeiliieilieeiiliiiiiiiaaaaaajooojaillliiillllliiiiieafbofjjjfffffjjj",
X"jaaaeemrncqqpgmmnnnm`dd`ngggpkceeecqpppqkcqpgmdmnnm`ddrdleiiiilieaeiliiilliiilliieaaaaajfoofailllliiillliiieeeeajoofaaajjjjjajjj",
X"aeiliigddcppgn`d`mmm`dd`ngggpqceeckppqceeeckpnd`nnm`ddrpiilliiieaaeillilllliilllieaaaaajfofjaillliiiilliieaaaaafhofaeeaaaaaaaaaa",
X"eillliq`rqpgnm`d``mnn`d`nggggqceccqqkceeeeecqn`mnnm`drriiillieaaaailllllllliilllieaaajjffffjeilliiiiiiieajjffjjobfaiiiieeiiiieaa",
X"illliicmrgcnmmmmnnngn`d`nggggqkccqqcceecceeekg``nnm`dr`laeiieaaaaeillliiiiiiillieajjjjfffffjeiiieeeeeeajfohhohhboailllliilllliii",
X"lieeiiigddcgmnnggppggmd`nggggpqqqqkceckqccecqgm`mm``drpijaaaaaaeiiilliieeeeiilieajfffffffffjaeeaaaaaaajfobbbbmbfailliillllllliil",
X"iaaaaiiq`rqpnggpqqqpgmddnngggppppqccckppqcecqgnm`dddrrijfjjjaaiiilliieaaaeiiiieajfooofffoffjjaaajaaajfohhhohhbojilliiiiiiiilllii",
X"ajjjaiicmrgkgpqkkkqpgmddmnnggppppkcckpppqcccpggnn`ddrrlpfjjaeiillllieaaaeillieajfoohofffooffjjjjjjjjfhbhffjfffjeiieaaaaeeeiiiiii",
X"jfffjilenddcgqcccckpgmddd`nggppgpcecqggpkccqgggggn`drdijfjaiilllllieaaaeiiliiajffhhoofffohoofffjjjjfobofjaajjjailiajjjjaaaaeeiea",
X"jfffailcmr`cgkceeckpgm`dddmggpppqcecqgpkccqpggpqpgn`rrpifaillliiiieaaaeilliieajffooofffohbbhoffjjjfoofjaaaaaaaeiiejfffjjaaaaaeaa",
X"jffaiiiq`rgkgkeeeckpnm```ddngqqkkeecqpqcccpgggqccqgmrrmlaiilliiieaaaaaiilllieajffoofffoohbhbhoffffoofjaeeeaaaeiiiafffffjjaaaaaaa",
X"ajjiliagdrkpgkeeeckpnmmmnddmpkccceeckkccckpggpqcccqndrdiiiiieeeaaaaaaeiillliiajffooofoohooohbofffoofaaaeaaaaaeiiejfoffjjaaaeeiea",
X"ieiiiajmr`cngqceeckpgnnnn`dmgkeeceeecccckppgpqkeeekndrrqllieaaajjjaaeeiiillliajfohhooooofffhmhfohofjaaaaaaaaailiajfoffjaeiiiiiii",
X"ilieaff`rgkmgpceeecqgnnnn``mgceeceeeecckpppppqceeekg`rrnliaajjjjjjaaaaeeillleafobbbbhhofjjfohofobofjajjjjjjaailiajjfjaeiilllllll",
X"iieajfhdrcpmngqceeckpgnmmddmpceeccecckqppgppqkceeckgmdrdiijjffffjaaaaaaailliajobbbbbbhffffoofffobofjjffffjaaillleajjaiiiiillllli",
X"aajjjfmrmcgnngpceeecqgn``ddnpceeccckpggggppqqkccccqpg`rrqijffoffjjajjjaeilieafobbbhbbofffhbojjjfohoooooffjaeiillieeeilliiiiiiiie",
X"jjjjjf`rpkgnmngkeeecqgnd`dmgpcceeecqgnnngpqqqkccckqpgmrrnljohhofjjjffjailliajfoooohbbbhoooojaaafohhbhbofjaeiiiiiliiilliieeeieaaj",
X"ffjjjhdrcqgnnngqcecckgmdmnggpqkceecpn``ngpqqqqqkkkqqpgdrdiabbhffjffffjailleajfffoohbbmbbofjaaajfobbbbhfjaeieeaeiillliieaaaeeajff",
X"ofjjjmrmcpggnngqceeeknddngppggpkcckgmddmgqkqpppqkkkkkq`rrqibbhfffffffaillieajjffohbbbbhhofjaaajfhbbbhojaeieaajaailllieaaaaaajohb",
X"fjjjf`rpkpggggpqceecqndmgppggnggqkqg`ddmgqqqpppqkcccccmrrnlobooffoffjeiliieajjfohbbbooffffjaajfobmhhofjaaaajffjaeiiieaaaaaafobbh",
X"faajhdrcpggppqqkccccpn`npqpgnmmggpgn`ddmgpppggpqkkcceegdrdijhooooofjaillieaajfobbmboffffffjjjjfbmmhofjjaajjffofjaeieaajaajjob`mo",
X"aaaamrmcggpqkccccckqgnngqqggm`mnngnmdd`mgggggppqqkccccq`rrqihhohoofaiiiieaajfhbbbhoffffoffjjjfobbmbofjjjjffooofjaeeeaaaajjfhbmof",
X"aiep`rpqngpkceeckqpgmmgpqpgn`d`````ddd`mnnggppqpqkcccppmrrnlfbhbofaiiieaaajfhmmmhfffffooffjjffhbbmbofjjjffohhofjaeeeaaaajffbbhfj",
X"iiigddcgngpceeeckpgmdmgppgnm`ddddd`ddd``mmngpqqqqcccqgggdrdijbhhfjeiieaajjfob`bhffjjfoooffjjfohhhbbofjjjfffooofjaiieeaaajffoofje",
X"liemrncnngqceeeckgn``nggggn`dddddd```````mngpqqqqcecpggq`rrpimhfjeiiajjjjffbmbofjjjfobbhfffffoohhbhffjjjfffoofjaeiiiieeajffofjai",
X"llq`rpqggpccceecqgm`nngggnn`dd```mnngnm`mngpqqqqkcecpgpqmrrhlofjaiiajjjjjffhoffjjjfobmboffffooohhhofjjjjjffoffjeiiiiiieajfffjail",
X"llgddcpgpqceeeecqgmmngggnnm`ddm`mmngpgnmmggpqqqkceecpppkgdrdijfaiiajfjjjjjfffjjajfobbmbhooooooobbhfjjajjfffofjaiillliieajffjaill",
X"icmrncppqcceeeccqgmmnnnnnnm`ddmmmngpqpgnngpqqqqkceecqqqcq`rrpiaiiajfjaaaajjjjaajfobbhbbhooooooobbojjaajjffffjaeilllliieajjjaiili",
X"egdrqqqqkceeecckpgn``mnnnnmdddmmngpkcqgnngqkkqqkcceckkcccmrrmliiajffaaaaajjjaajfhbhbbbbhooffohbbofjaaaajjffjaeillllliieaaaiiiiie",
X"amrdcpkccccecckqpgn`d`nggnn`ddnngpqccqgnnpkccqqqkceccccccgdrriiijfjaaeeaajjjjjfobbohbbbhofhm``d````mgqajjjjaeilllllliiieeilieaaa",
X"p`rnccccccccccqpggnm`d`nggn`d`ngpkcckpgnnpccckppqceeccecckmrrpiajjaaeieaajjjjfobmmbbbmbhm`drrrrrrrrrd`mgpjaeillllllllliiiiieajjj",
X"gdrqkcccccccccqgnnnnn`dmgggmdmgpkcccqgnmnpccckpppceeccecccgdrmlajaeeieeaajjffoobbbhhhmddrrrdgkcqpndrrrrd`mgqcllllllllllliieajjjj",
X"mrdckcckkcceecpgm`nggm`mgpgmdmpkccckpgmmgpkcckpgpkeccccceeq`rrieaeeiieaajjfffoobbhm`drrrdnqccqgpppqpndrrrrd`mgqcllllliiiieajjjja",
X"`rgccckqkcceecpn`dmggnmngppmdnqceccqpn``ggpkkqpggqccckcceecmrrpiiiiieeaajffofohm`drrrrnpcckpgggggm`gpqpndrrrrd`mgqciieeeeaaaaaaq",
X"drqqeckqqceeekgn`d`nggnmngpndgceeekpgmd`nggpqqpggpkkkkkceeegdrmliiiiieajfoohm`drrrrmpccqqqqpgggnmd`mngppqpndrrrrd`mgqaeeeeaaaaeg",
X"rdckcckqkceecqgm`d`mnnnmmngm`gceecqgnd``nngpqqpgggqkcccccccq`rriiiiiieaphm`drrrr`gcckg`mgqqqpgn``mgggppppppqpndrrrrd`mgqciieeecm",
X"rgccccckcceccqgm`dd`mnnm``mdmgceecpn`ddd`mggpppgggqccecckqkcmrrpiiicqgm`drrrrdgkckpggm`mgpqkpn`dmnggppqkqqpggpqpndrrrrd`mgqciiq`",
X"rkqeecccccccqpgm`ddd`mnnmdddmgkeecpndddddmggppggggqceeeckqkcgdrmlggm`drrrrdgqccpm`mnnm`mgpqqpmd`gggppkcccqpgm`mgpqpndrrrrd`mggnd",
X"rcqeeeeccckqqpgmddddd`nnnnm`mgqcccpmdddddmgggggggpqcceecckkcpdrrdddrrrrdnqccqpnmdd`mm`dmgpqpgmdmgggpqcceckpn`dddd`gpqpndrrrrdddr",
X"rdgceeeeccqqpgn`dd`dd`nggpgnnngqckpn`ddddmgggggggppqqkcccckkgdrrrrrrrmpcckpppggnmdd`mddmggpgnmmnggpqcceeekgmddmm`d`ngppqpndrrrrr",
X"rrdmgqceecqpgn`d``mdd`ngpqpgnngpqqpgmdddd`ngggggggggppkccqgmdrrrrr`pcckpgppqqpgnm`dddddmnggn``mngppkceeeekgmd`nnmmnggpgggpqpndrr",
X"rrrrd`mgqcqgg`d`mm```ngpqqpggnngpppgn`ddddmngggggggggpqgm`drrrrrrdccpnngpqkkqpggnmmddddmnnm`ddnggpqcceeecqgmmmgggggggggnm`mgpqrr",
X"rdrrrrrd`mggmd`mnm``mggqqqpggnnngppggmddddmnggggnmmmnm`drrrrrdrrrcppgnggqcccqpggnnnmddd```ddd`nggpkceeeecqgmmngpppgnnmmm`d``mdrr",
X"ajpmdrrrrrd```ngn`d`ngpqqqpggnnngggggn`ddd`nggggm```drrrrrmpil`rrkqpgggqccccqpgggggnm`ddddddmnggpqkcceeckpgmmnpqqpgm`d``dd`mndrm",
X"icaajpmdrrrrrd`mn`dmgpqqqppggggnnggggnmdddmnngnm`drrrrrmqiliicgdrgcqpgqcceckqpggggggn`dddddmngggpqkcccccqgnmmgpkqpnm`ddddd`nmrrp",
X"elliajajpmdrrrrrd``ngpqqqpggggggnngggnm`d`mmm`drrrrdnqiliiilllcmrdckqqcceeckpggggggggmdd`mmnggggppqkcckqpgnmngqkqgm`m``dddmg`rri",
X"lllijoojaajpmdrrrrrd`mgqqpggggggnmnnggnm```drrrrdhkiliiilllllllgdrqkcceeeecqpggggpppgmddmnnggppggpqkkkqpgm``npqqpn``mm`dd`ngdrml",
X"lliafffjaieaajpmdrrrrrd`mgpgggggnmmnnnm`drrrrdgclliiiiillliiillq`rncceeeeecqpggggpppgn``nggppgggggpqqqpgn`dmgpppgm`mnnmmmngmrrqi",
X"llijoojaiillieaajpmdrrrrrd`mgggnnm```drrrrdpclliiiiliilliieeeilcmrrcceeeeeckpnnngpppgn`mngpqpgnnggpqppgm`d`ngpgn``mmnnnnggp`rrii",
X"liafhojeillllllieaajpmdrrrrrd`mnm`drrrr`pcliejaeilllllliaaaaaeilgdrpkceeeeckgnmngpppgn`mgpqqgnmmngpppgn`d`ngggnmdmngnnnggpgdrnll",
X"iiafbfaillllliiiilieaajpmdrrrrrdrrrr`pilieajjjeilllllliajjjjaeilq`rmcceeeeckgmmmgpppgmdmgqqqgmddmggpgn`dmngggn`d`nggggggpkmrrqil",
X"iejfojilllliiiieilllieajajpmdrrdmpjeiiaajjjjjaiilliiiieajfjjaiilcmrrcqceeecqgnmnggppg`dmgqpgn`ddmngggmdmggggn`d`ngppppppqgdrdiii",
X"eafofaillliiieeiiliieajfofjajfpaiajfofjjjjjjaeillliiiiajjjjaiiiligdrgcceeckpgnnnggggn`dngpgn`ddddmnnm`dngggn`ddmgpqkqqqqkmrrhlii",
X"ajffailliiieeaeilliaaajfhhofjjjfohbhffjjjjjjaeillliiieaajjaiiliiajmrdckcckppgggnnnnnm`mgggn`dd`dd`m```nggggmddmngqccckqqq`rrciaa",
X"jfojillliiieeiilliaajjfobhofoooohbbhfffffffjjaillliiieaaaaiilliajfhdrqkccqggppggnm`d`mnnnn`dd```dd`d`mngggn`ddngpkceeckkgdrdliaa",
X"fffailiiiiiiiiliiaajjjfobhoffoohbbhoooofffffjaiiiiiiieeaeiiliieajobdrgcckpggpppgndddmnnnm``mnnmmmmmmnngggnm``mgpqceeeeccmrrgljjj",
X"oojillllliiillliajjffffobhffoobbbbbbbhooffffjeiiieeeeeeeeilliiajfobmrdckqgggpppgn`d`nnnm``mnggnnnmnnggggnm`dmnpqcceeeeeq`rrciffo",
X"bfaiillllllllliajjfffffhbhffobbbhbbmbboofffjaiiiaaaeeiiiilllieajfhhhdrpkqggggppgnmmngnm``mggggggnngggggnn``mnpkcccceeeegdrdlaffb",
X"hfaeiiiiillllieajfffjffhbhoohbbbbhbmmboofffaiieajjaiilllllliiajfhbbh`rncqgggggggnmnngmddmngppppggggppggnmd`npkceccceelcmrrplfoob",
X"ofjaaaeeiilliiajfffjjjfobbhbbbbbbhobbbooffailijjjaeillllllieajfhbmbbmrrckpgggggnmmmnn`d`nggpqqppggpppggnm`mgqceecccceeq`rrcifooh",
X"hffjjaaeiilliajffffjjjfhbmbmbbhhhoobbhoffjeiiajjaiiiiilliiaajfobhhhbbdrpcgggnnnm`d```ddmngpqqqqpppppppgmd`gqceeecccccegdr`ljfohb",
X"bhffjjaeiiiieajfffjjjfobbmbbbhoooohbhoffjaiiiaaeiiieaeeeaajffhhofohbbdrmcgggnnm`dddd`mmnggpqqqqqqqqpppgmdmpceeeeccccccmrrplffoob",
X"hbofjjaeiiieajfffjjjjfobbbbhooooohbbhoffjeiiiiiiieajjaaajjfohboffobmbmrrkqggnmdddd`mnngggppqqqqqqkqqpgg``gkeeeeeecckqq`rrciffooh",
X"ohofjaaeeieajfffjjjjfohbbbooofoohbbbboffaeiillliajffjjjjffobboffobbmhhdrgcnnn`dd`mnggpgggpppppqqkckkpgnmgpcceeeeeckqpgdr`lafffff",
X"foofjjaaeeajfffjjjjffohbbhooooohbbbbbofjaeiilliajfofffffobbbhofohmbhfp`rdcgm`ddddmgpqqqppppppppqkcckpnmngqccceeeecqpgmrrpljfffff",
X"ooffjjaaaaajjjjjjjjffohbbhoohhbbhbbbhofjjaeiiiajfooffffohbbbooohbmhfjamrrqp`dddddngqkckqpppgpppqkccqgnmgqkkkcceeecpgn`rriefoffff",
X"bofjjjjaaaaajaaaajjjffhbbhhhbbhhhbbboffjjaeieajfoooooohbbmmbhhbmbbfjaegdrgc``dddmgpkccckqppgggpqkccqgnngkkqqkceecqpgndrmljooffjf",
X"bojjjjaaeeeeeeaaaajjjfohbhhbbbooobbhfffjjaeeaaffoooooohbbbbbbbbmbofjaap`rdcgmdd`gpqccccckqpgggppqkqgnngpkkqqqkcckpgnmrrpiohhfffo",
X"hfjjjjaeiiiiiieaaaaajfooooohbhohbboofffjaaeeajfooofooohhhbbbhoobbofjjjjmrrpqn`dnpqcccccckqpggggppppnmmgqkkqppqqqpggn`rriambhfffo",
X"fjjjjaaiilllliieeeaajfffffohhoohboffffjjaeeaajffffffoooooooofffohoffffohdrncn``gqcccckkkkkqpgggggggmdmgpkkqpggggggnmdrmlfmboffoo",
X"fjjjaaiillllliiieeeajjfffohhhhhoofffjjjaaeeajfffffffoooooofffjjfhhoohbbh`rrcg`mgkccckqqqkckqgggnnm`ddmgpqkqpgnnnnnm`rrpimmhfffho",
X"jjaaaeilliillliiieeajjfffhbbohoffjjjjjaaaeaajfffjfffoooooffjjjjfhbbbbmbo`rrpcmnpkccckppqkckqpgnmmddd`mngqqpgnm``mmm`rrijbhffjobo",
X"jaaaeiliiiiilliiiieaajjfhbbbooffjjjjjaaaaaajjfjjffohhbbhofjaajfobbbmbbof`rrgcmgpkcccqpppqkkkpgnm`d``mmngpqpgmd`d```drrlpoffjfobf",
X"aaaeiiiieaiilliiieeajjfhbmhhofjjjjjjaaaaajjjfffffobbbbbhfjjajjfhbbhhoffp`rrppmgpqcckqppppqkkpgn`mmnnmmnggpgn``m``dddrriaffjffofj",
X"eiiiiieaaaeilliiieeajfobbbhofjjjjjjaaajjjffffffoooooobmofjaajfobbboofjjgdr`cpngpqkqqppgppqqqpgm`mnnnnmnngggmd`nm`ddddrpifffoooja",
X"illlieajaaeilliieeaajobbooofjjjjjjjaajffffffffohhfffohofjaajjfhbhoffjjamrrpcgggpppppggpppppppnm`mnnnmmmnnnm``mnnm`dd`r`ljffhofai",
X"lllieaajaeillieeeeajohobbofjjjjjjjaajffoofffohhhofffhofjaaajfobbhofjjjp`rrkkgggppgggggpppppggm`dmmmmmmmmnm``mnnnm````rriahoofail",
X"lliieaaaeillieaaaajobhfobfjajjjjjajjfohhoffoohoffjfobfjaaajffhbbhoffjjgdr`cqpppppgnmnggpppggn`dd```````mm`d`mnnnm````drpibofaiil",
X"liiieaeiiliieaaaaafobboofjaaajjaaajfobbboohbhofjjffoojaaajfoobbbhfffffmrrgcppqppgn`d`ngqqpgn`ddd````ddd``dd`nnnmmdddddrdlffjeill",
X"liiiiiilliiaaaaaajfoobbojaaaaaaajjfohbbhohbhffjjjfoofjjjjfoohbbboffffo`rrkqgpqqpgmdrdngqqpnm`dd`mnnmmddd`dd`mnnm`dddd`rrcajaeill",
X"lllllllllieaaaaajfhbohofaeaaaaajfohbbbbhooofjaaajfbofjffohbbhbbhoffoohdr`cggpqqpgmdddmgqqgnmmdd`ngggnm`ddddd`mm`dd````drpljaeiil",
X"llllllllieaaaaaajobmbofjaaaaajjfobhhoooffjjaaeeajobhffohbbbhobbhofohbmrrgc`ngppgnmm``mgppgmmm`dmggppggn`dddd`mm`dmnnmm`rdljaaiil",
X"lllllllieajjaaajfbb`bofjaaajjfoooffffjjaaaeiiiiajobbhhbmmmbhobmboohbb`rrqp``mgggnmm``mnggnm``ddmgpqqpgnmdddddd```nggnmmrrcejeiil",
X"iiiiiieaajjjjjjfhbhbbhfjjjjffoofjajjaaeiiiiliieajfobbbbbbbhoobbbhhbbbdrdcgm``mgnmm````mnnnm`dd`mgpqkqpgnmdd`mmmmngggnnndrglaeiil",
X"iiiieaajjfjjjffhbhohbhoffffooofaaeeeiiilllllliajffobmmbbbhooohbbbbbbmrrgcnnm``````d`````mnnm`d`ngqkccqggndd`nnggggggggg`rdleiiii",
X"iiieajjfffffffhhoooohbhoffoofjaiiiiilliillliiaajffobbboooooooohbbbbb`rrqqgggnmdd`dd`m````nnnnmmngqcccqpgn`dmgpppgggggggmrrciiiii",
X"iieajffooffffhbboffoobhoohbojailiiilllillliiaajffohhoffooooffoobbbbhdrdcpggggn`dddd`mmm``ngggnngpqccckppg`dmpkckpggggppgdrgliiii",
X"iiajfoohoffffhbhfffohbhoohofaiilllllliillieajjfffhbfjjfohoffffobbbhmrrgcggggggnnm`mmnnmmnggggnggqkcckqppg`dmpccckpgggppp`rdliiii",
X"iejfhmbbhfffohhoffohbbhbbbfjeillllllllllieajfffohhfjjjfohoffffobbbh`rrqcppggggggnnnnnm`mgggggggqkckqqpppgmdnqceecqgggpppmrrkiiii",
X"eafhbmbbhfffooofffobbbhbbojaiiillllllllieajffffhbfjajfobboffffobbbbdrdckqpgggggggggggmdmgpggggpkcckqppppgmdnqceeecpggppggdrhliii",
X"jfohhoohbofoboffffhbmmbbhfaeiiiillllllieaffoohhbofjajobmboffffohbbmrrgcqqppggggpqqqpgm`ngpggggqcccqpgggggmdnqceeecqgggpgn`rdliia"
X};
END_OF_FILE
  if test 17313 -ne `wc -c <'bitmaps/background2.xpm'`; then
    echo shar: \"'bitmaps/background2.xpm'\" unpacked with wrong size!
  fi
  # end of 'bitmaps/background2.xpm'
fi
if test -f 'bitmaps/background5.xpm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bitmaps/background5.xpm'\"
else
  echo shar: Extracting \"'bitmaps/background5.xpm'\" \(17328 characters\)
  sed "s/^X//" >'bitmaps/background5.xpm' <<'END_OF_FILE'
X/* XPM */
Xstatic char *background5_xpm[] = {
X/* width height ncolors chars_per_pixel */
X"128 128 20 1",
X/* colors */
X"` c #63217C",
X"a c #391042",
X"b c #6D2A88",
X"c c #42185A",
X"d c #1C0724",
X"e c #4A185A",
X"f c #421852",
X"g c #421052",
X"h c #291039",
X"i c #290839",
X"j c #210831",
X"k c #52186B",
X"l c #4A1863",
X"m c #391052",
X"n c #311039",
X"o c #290831",
X"p c #521863",
X"q c #39104A",
X"r c #311042",
X"s c #5A1E71",
X/* pixels */
X"nhhioddddddddoojddddddohhnrqglsbbb`kpecgggcelksbbseqrihnrqrrhhnrqfeeeecgqqqqqqe`bscmmqqqrrqqqqqrrrqfcgrojdjohnnnrqflks`bbbb`keqr",
X"nhnhoddddddddoojddddddoooonafp`bbb`specgggcepsbb`kgrhoohrqrnhhnrgcelefgqggfqqqes`pggfcfmqaqqqqqrrnrqffqnoddjihnhnrgeks`b`bbb`kca",
X"nhhhijdddddddoooddddddddjonqek`bbb`kpecgffelkbbbkeqrnoohnrrnhhrqfelecqqqceegqglsseggelefgqqqqqqrrnnrqggrhojjohnnnrqcks```bbbb`pq",
X"rhiooodddddddooojddddddddorqeps`bbskpecffcek`bbsegqrhooihhhhhnqgeplegqqmepeqqgkskcgcpklefqqqqqqrnhhnrgfqriooohnnnnrglsbbbbbbbbkg",
X"qhoooodddddddjihoooojddddorgelpsb`skleeceepsbbslfqarnhhhhihhnrmelklgqqqgeleqqcsspcfepklecgqqqqarnhhhrqfgqrhoohnrrnrqes`bbb```bse",
X"qhojjjdddddddjhnhnnijddddorqgcls`sklleeeepk`b`pcmqrnnnnhhhhnrqflppeqrrqceefqqlb`lffclplecgqqqqrnnhhhnrqfgqriohrrrnnrfksb``sssb`p",
X"gnojjjdddddddonrrrrhjddddorrqflsskleeellpk`bbsegqrrrrrrrrrrrqgellegrnrgccgqqgkb`lfgfelleefgqqqrrnhhhnrqgcgrhihrqqrrrmekssskks``k",
X"frhojddddddddjhrrqrhjdddoohnrglsspeccelpk`bb`kfqqrrrrrraqqqqgcelemrnrqgfgqrrgsb`lfggeeeeecfggqqrnhnhnrrmffqnhhrqqqrrqglkkkkkk``k",
X"eqrhoddddddddohrrrrhoooooooirglkklcfcelksbbbkefqqrrrqqqqmggfceecgarraqqqqnnrfsb`pcggceeeeeeecfgqrnrrrraqgfqrhnrqqmqaaqclpkkks``k",
X"egqnodddjddddoinrrrnnnnhodjorgkklefgcepsbbbspegqqqqqqqgfceeeeecgqrrrqqqrnhnrcs``kefggfeelllplefqrrrqqqqqgfgrnnrqgfgqqqfelpkks``k",
X"lfqnojddjjddjohhnrrrrqrhojoorfkkecffeek`bbspecfgmqgggfceeelleegqrrrqqqrhiirqes`sklegggcepkkkkpeqarqqgqqgfcgrnnqgcefqqqgelksss`sk",
X"lfqrhjddjjjjoohhnraqqqrhojohaflefgffelk``slecffffceeeeecelllegqrrrqqqrhooorqes`skplfggcekss`skeqaqgcecfccegrnnqgceegqqgcpks```sk",
X"egqnijdddddjohnnraqqqrrhiohrqfffgggfeks`speffgceelppeecfcelegqrrraqqrnooohrmes`skplefgclk````keqqqclppllllfrnnqgceegmmgeks````sk",
X"eqrnojdddddjohnrrqqqarnhhhnqmggqqqgfes``kefgggelkkkleffgfcefqrnnrqqrnhooohrmek`skkpecfels`bb`kcqqglsssskkpcannqgcecgqqfeks````sk",
X"fqrhojddddddohraqqqrrnrnrrqqqqqqqqgflsb`pefggfekssklcgggfcfqrnhnrqrrhhhhnnrqeksskkpeefepsbbbslgqqcksssssskeqrrqqfcfqqqcls``b``sp",
X"ganhojddddddohrqggqrnnrrrqgqqqqqqqgeks`klcfgfclkskpecggfcfqarhihrrnhhnnnrraqekssskpeefepsbbbkfqqglsskkssskeqrrrqgfgqaqcls`bb`ske",
X"qrnhojddddddohrqfgqrnnraqggqaaqqggclkskpeeccelksskpeeffeefqrnhhhnhhhnrrrrrqqclksskpeefcls``spmqqfksklepkkklfqrraqmqarqcps`bb`spc",
X"qrhooojdddddoonqefqrnnrqfcgqrrqqgclkkkleeeeelkssssklecceegqrnhhhhhhnrraaarqqfepkskpeegfeksskeqrqckklccelkkpegrrrqqqrrqclk`bbsklg",
X"rnhoooojjjjjoonqefqrrrqgecqarrqgepkskpeeeelpkks`sskpleeecgqrnnnnnnnrrrqaaaqqgclkskpleggclkklcqrqelleffelpkkpcqqraqqqqqclk`b`skeq",
X"rhioooooooojoonqfgqrrrqepeqrrrqflksspeeeelpkkssssskkpleefmqrrnnnrrrrrrrrarqqmgepkkplegggceefqarqeecgggfelkkklfqqqqqqmgclk```klfq",
X"rhioooooooooohrqmqarqqgekeqqqqgeksskllllpkkkkkskkkkkkleecgqqqrrrqqqrrrrrrrqqqgclkkplecgggffmqqqclegqqqgelkssklcgggggfcelk``spegq",
X"nhioooooihhhhrrqqqrrqqflpeqqqmckssklllpkkkkkkkkkkkkkkleeecfgqqqqqqqrrnnnrrrqqqfepplllefggmmqqqgepeqraqmclks``skleccceelkssskegqr",
X"nhhooooohhnnraqqqraaqgellcgmgcpksklelpkssskkplppkkkskpeceeeecggmqqqrrhhihnrqqgfeelllleecfggmggfpkeqrrrqfls`b``skplllllks`skefqqr",
X"nhhooooohnraqqqqqrqqqgelpleceksskleelkss`skpleelpkssklefceeleecgqqqrnoooohraqgfcceellleeecfgffckkeqrnnqgls`b````skkpkks``sefqqrr",
X"nhhooooonrqqqqaaqqqqmgelkpllks`splelpks``skpleelksssklcggfeeelefqqrnhoojohrqmfcfgfeellllllleeelkpcqrnnrqesb`sss```skss``skcmqrrr",
X"nnhoojoonrqqrrrrqqqgggcelppkkssklellks```skleeelk``skefqmgfcellcqrnoojjjoonqgcfmqmfelpppkkkkkkkklgqrnnrqesb`kks`bbbbbbb`kegqrrrr",
X"nnhoooohrrrnnhnrqqgggggfceelllllllpkks``sskplelks``slcgmgggcellcqrhojdjdoonqffgqqqgclkkkksssssskegqrrnrqck``kkksbbbbbb`slfqarrrr",
X"nnhoooohrrnhoohnaqgffggqmggfffcellkkss``sskkkkks``skefgmmmgclplfqnodddddjonqcfqqqqmflpks``````spcqqrrrrqfksskkks`bbbb`slcqqrrrrr",
X"nnhooohrqrhoooihrqgggmqqqaqqqmgcelkss``sssskss```sklecfgffelplegqnojddddoonqcgqaqqqfeks```ssskkecgqrrrqqflkskkkkkssskklegqqaarrr",
X"nhioihnrqnojjjohnaqgqqrrnnrraqmgelkss`ssss``````skpeecccellplefqqnijddddoonqgqqraqqgeks`skkppllecgmqrraqgepkkplllleeecfggqqqqrrr",
X"rhoohnrqqnojjdoohrqqqrrhhhnraqgfelkkssss```bb``skkleeeelpkkpefgqqrhojjjjohnrqqrrraqgekssklecffceecgqqrrqqflkkleccffgggggggqqqqar",
X"rhoohraqrhodddjoohnnnnhhhhhnaqmgcelpkkss`bbb`sskklleeelkssklcgqqqrnhooooohnrrrrrrrqmeksklcgqqqgfeecgqrrrqgellegqqggffgfffggqqqqr",
X"rhoohrqqrhojdddjoohhhhhhnhnrqqggfceelpk`bb``sskkkpplllks``kecggqqqrnnhhhhnrrrnnhnrqqcpkkegmqqqqgceefqarramelegqqqgelleeecfgmmqqq",
X"rnhonqgqrhojddddjoihnnnnnhnrqggggggfelk``b`sskkkkkkpkks``skecgggqqqrrnnnnrrrrhhihnrqflklfmqrrrqmfeecgqrrrmelfqrrmclpkpleefggggmq",
X"rnnhrqgqnoojjdjjoonrrarrnhnrqffggqqmflkssssskkkkkkskss```skleccfgmqarrrrraqqrhooihrqglklgqqrrrqqgccfgqrrageemrrqflpkkkpeefgggggq",
X"rrrrrqqrhojjjjoohnrqqqqrnhnrgcfgmqqqgekkkkkkkkkkssss``b`ssklleeeecgqarrrrqqqrhojoonrqepeqqarrrqqmgggqqaaqfcgqrrqclpkkkplefgggggq",
X"rraqqqqnojjdoohnrqqggqqrnhrqgccfmqqqmcllllpkkkkkss```bbb`skkpllllefqqrrramfgrhojjohrqelcqrrrraqqqmmqqqqqggmrrrrqcllpkkplefgmmgmq",
X"qqqgcgrhodddohrqqffcfmqnhhrqmffgqqqqqgccccepkksss``bbbbbb`skkpppplegqrrragefrijjooonqcegarrraqqqqqqqqqqffgqnhhrqfelllpllefgmqqqq",
X"qqgelfrojdddonagcllefqanhhrqqgggmqqqqqgggfelkkss````bbbbbbb`skklleegqrrrqfcmroooooinqeegrrrrqqqmqqqqqqgcgqrhhhnamcelllleefgqqqqq",
X"qqglpfrojdjjhrqflkklcqrhhhrqqqmgmqqqqqqqqmfepkss````````bbb`skpleecgqqaqfcgrhooohohrmecqrnrrqqqmqqqqqgcfqrnhiohnqgcelleecgqqqrrr",
X"qmcllmnojjoinrqclkklcqrhhhraqqqmgmqggqqrqqgelksssssssss``bbb`klecgggmqqcefqniihhhhnaflegqrrraqqqqqqqgfcgqrrnhoihrqgeeeecgqqqqrrr",
X"qgelcqhooohnrrqclkklfqrhhhrrqqqqmqmgfqrrrqmfepksssskkkks`bbb`klfgqqqqgelcanihhnhhhrqepefqrrrrqqqqqmgccgqrrnnnioohrqfcefgqqqqqarr",
X"qclemrhihnrrrqqfeplefqrnhhnrqqmggggffgqrrrqgcepkkkkkkkks`bbb`kegqqqqqelcqnhhnrrhhnrglkpegqqqqqqqqmgelcmqrrrrnhhohnrqgggqqqqqqqqa",
X"mepcqnihnrraqqmfeeecgqrnhhhrqgfffggfcgqrrrqqgfelllllppkk`bbbskegqaqqgecahhnrrrrhhnqcpkkklcgqqqqqqgcllegqqrrrrnhooohnraqqqqqqqqqq",
X"flegrhhhrraqqqgfcecfgqrnhihrqceecggffgqarrraqqgfeellpkks`bbbspegqqqgfgahihaqqrnnnagepkkskpefgqqqqgceeefgmqqrrnnhooihnrrqqqqqqqqg",
X"llganihnrrqqqqmgfccfgqrnhoirqceefgggggqqrrrrrraqgceepkk`bbb`kleggqgccahohrqgqrnnrqelppkkkkpefmqqmgceeeeecgqarnhhhihhnraqqqqqqqge",
X"keqnhihnrraqqqmgfcccgqanhoirgcfgqqmmmqqqqrrnnnrrqgelkssbbbbskeeffceegnoirqmqqnnrmellleeepkkpefggggccecellegqrnnnnrrrqqqqmqqqqgcp",
X"emrhhohnrrrrqqqgfcccgqrhojorffqqaqqqqqqqqrnnnnrraqclk`bbbb`speecepklqninqggarnrqclllecccek`sleeccffggggelegqrnnrqqgffggmqqqmgelp",
X"qrrnhihhrrrrqqqggfcfgqriojhqfqrnrrqqqqqqrrnrrrrrrqepsbbbbb`skllels`eqnrrqgqnhnqclplecgggek``klleefgqqqqgeegqarrqgclplecggqggellc",
X"rrnhhhhhnrrrraqqgffgqqnojjhaqrhhhnrrqarrrrrrqqrrrqek`bbbb``sskkks`sfrnrqmqrhhrglppegmqmgesb`kkleefqqrramcfgqqqgfeellpplcggfeeefq",
X"rnnhhhnnrrrrraqqqgggqrnooonrrnooihnrrrrnnrrqqqrrrqls`b``bb```ss``slqrrqqqrnhnqfllegqqqqgesbbsklecgqqrrqgecgqmfeecfgcekklececfqar",
X"nnnnhhnnnraqarrrrqqqqrrhhnrrnoojoohnnnnhhnaqqqrrqgps`sssbbbbbbbb`keqrnrrrnnnrqceegqqqrqgl`bbsklefgqarrqgeecfcccfgqqgclkklefqannn",
X"nnnnnhhhnrqqqrrrrqqqqqqrrqqrijddjoohhhhhhnrqqrrrqeksskss`bbbbbbbskeqrrrrrnnrqqgfgqarqaqgp`bbsplcfgqqqqgceeecfmqqqqqqfelpegqnhohh",
X"hnnnhhhhhrrarrrraqgfffggggmroddddjooooooihnrrrrrgeksssss``bbbbb`slemqrrrrrrrqqqqqrrqqaqgkbb`klecfggqmgceeefmqrrnrrqqgcccgqroojoo",
X"hhnnhhhohnrrrrrqgelpplleeemnjdddddjjooooihhnnnrqflkssssssssss`sskpecgqqqaaqqqqarrrqqqqqesb`speeeeccceeeecgqrnhhhrrqqggmqqrhojdjo",
X"ohhhhhioohnrrqqekssskkkkpeqhddddddddjjooohhhnnrqflkkskkkkpkkksskkpllecggqqqqrnnnraqqaqgkbbspeceeellppplegqrhioihnrqqqqrrrhojjdjo",
X"oooihhhiihnrqgek```skkkplfqhddddddddjooihhnnnrqqfelkkkplllppkkkkkkkkkplefgqrnhhnrqqrrqe`b`keeceekks`sklfqnhihhhhnrqqqrrrrnoojjoo",
X"ojjooohhhhragps```skleeecgroddddddddjoihnnnnnrqqgfeelllellpkkkkkkkkssskpegqnhihrarrrqesb`keceeepk`bb`slqrioihnnhnraqarrrrniojjoo",
X"ojjjoohnrrqges``sklecggmqqnoddddddddjonrrrrrrrrqqmgceelllpkkkkskkkssssskegqnhhrrrrrqcs`speeceekk`bbbbseqnihhrrnnnrraqqggqrhojooo",
X"ojddoohrqgeelkskpeefgqqrrnojddddddddohrqqqqrrnrrqqqgfelkkkksssskkksss`skegannnrrrnafksklefccepk`bbbbbseqnihnrrrnnrrqqgcegrhojjoo",
X"oojjoinrqellecccccfgmqrrniojddddddddonamggqrrnnnrrqgfekkkkkkssskkpkksskpeqarrrrnrrgpkpcgggcepk`bbbbb`seqrnnnrrrrrraqfellfqnojjoo",
X"ooooonaqgfccggmqqqqqqqrrnhioodddddddonqgffqqrnhhnrqmclkklllkkskklllkkkklcqrrrnrrqflkegqqqgelksbbbbbbskeqrrrrrrrrraqmclpkeqnojjoo",
X"oooinrqqqqqqqqqqqqqqmmqqqrrhojdddddjhrqgffgqrnnnnrqgepleffelkkkpeeellllegqqrrrrqcppeqqqqqgeks`bbbbb`spegqrrrrrraqqgcepkkeqrooooo",
X"hhhhnrarrrrrrrrraqqgfccfgqrnhjddddjonrqmggggqarnramceefmqqfekkpefffceecggqqaqqflppeqarrrqglk`bbbbbbsklegqqarrrrqgfeelkkpeqrhiohh",
X"rnhhnnnnnhnnrrrrqqgelkplegqrhjdddjonrqqqggffgqqqqqgccfqqqqflkkefgmggffgggqmgfekklfqrrrqqqflsbbbbbb`skpefgqqrrrqqfelkkkplcqrnnnrr",
X"rhooihhhhhhhnrrqqgepkssskeqridddjonrqqqqqfeecfgqqqqgmqqraqgekpcgqqqqgggqmgclksklgqararaqqfpsbbbbbb`skplefqqrrrqgelkskklegrnnrqqq",
X"rhoooohhhoihnrqfeeks`b``keqnodddonrqqqmmgfecgqqqarraqqqqqqgeplfmqqqqqggggclsskemqrqqqqrqgek`bbbbbbb`skplefmqqqqgepkssklfqrrrqgfg",
X"anioooohhooonqflpk`bbbbbkeqnodddhrqmgffcccgqarrrnnnnrrqqqmfeefgqqqqqqqgelllplfqqqqqqqqaqfek`bbbbbbb`skklecfqqqmflkkskkegqrrqgccg",
X"qrnhiohhioohrglk`bbbbbb`kcqhoddjhrqgcelleganhooooihnrrqqgccfgqqqqqqqqgclklfmqrrqqmmqqqqqclk`bbbbbbb``skpleegqqgfepkkklegqqqgfcgq",
X"arrrnhhoojohqek`bbbbbb`slgrijddjhrqclkkpcqnojdddjoihrrqgceefqqqaqaqqqfelefqrrrrqgggqqqqqcls`bbbbbbbb`skkplefgggcellecffggfeeegqa",
X"raqqrrniooirgp`bbbbbb`klcqrojdjohrqepkpemrnojddddjonraqfelecgqqrarqqmfcgqarnnrqggfgqqqqgcls`bbbbbbbb`sskkklecgfceeefggcekkkklgqr",
X"raqqqqrhoonqesbbbbbb`klfqanojdjohaglppegarnhojddddohrqqfelecgqarrrqqqqqrrnnnrrqgffgqqqqgeps`bbbbbbbb````ssklegggggfffclksb`slgqr",
X"rrqqqqrhohrgp`bbbbb`kefqqrnojddonqceecmqrrrrrhodddohrqgfceecgqqrrrqqrrnhhhhnrqqggfgqqqgfeps`bbbbbbbbbbbb``skefgmggcepks`bbb`pfqr",
X"qqqqqqrhihqckbbbbb`kegqarrnojddonmeegqrrrqqqqrodddohrqqgggfggqqrnnrnhooooohnrqqqgggqqqgfeps````bbbbbb`sss``slcfgfeps`bbbbbb`kegq",
X"mqqqqqrnhnqck`bbb`kefqarrnhojddorggmqrrrqgfgqrhjddohrqqqqqqmqqarnhioojjdjohnraqqmgmqqqgceps````bbbbb`kpepsb`kllepk`bbbbbbbb`kleg",
X"fmqqqqrnhnqfks`b`klfqrrnhhhooddiqgqrnnrqfeeegqnojjohrrrraqqqqqrnhojddddddjohnraqqqqqqqgfepks````bbb`spefek``skksbbbbb```bb``skle",
X"cggqqqrrnrqgekkskpegqrnhhhiojdjnqqrhhrqceplefqroooihnrrrrraqqrrhojdddddddjoohnrqqqqqqqgfelks``````skpefgfeks```bbbskkkks``bb`ske",
X"cfggqqqrrrrqgelplefqqrnhioojjdorqroohrglpkklcqrhoohnnnnnnnrrrrnijddddddddjooihrrqqqqqqqgelks`sssskpecggqgflk```bbspeeepks`bb`ske",
X"effffggqqaaqqgcecfgqqrrnhooddjhrqhoorqcpkkkpemrhiohnnnnhhnnrrnhojddddddddjooohnrqqqqqqqgepkssskklecgmqqqqgclkskklecfcelks`bbbskl",
X"cfcceellegqqqqmgggqqqqrnhojddjnrrooiqgekkskkegqnhihnnnhhhhhnnniodddddddddjoooihrqqqqqqqqcpkssklecgqqrrrrqqgfceefgmgggfeks`bbbske",
X"ecelkksskklcgqqqmqqqqqqrnodddjrrhohrqcekkkkpefqrnhhnnnnhhihhnhiojddddddddjoooohrqqqmqqaqcksskpefgqrrnnrraqqmggmqqqgmggeps`bb`skl",
X"eels```sssskcgqqqqqqqqqanodddoqnjorqfelpkkkpefqrrhhnnnnhiooohhhhojdddddddjoooohnaqqmqarqck`spefqqrnhhhnrrqqqqqqqqmgqqgelk```sskl",
X"ppsbbbskks``kegqqqqqqqqqrojddhaodoqfelllllllecgqrnnnrrnhhoooihnhojjdddddddjjoohnaqqqqraqes`sefgqrrnhhhnrrqqmggffcfgmqgclksssskkl",
X"ksbbbskllksb`kcqqqqqqqrrnoooinnodoqelleeccceecgqrrnnrrnhiooohhoojdddddddddddjoinrqarrrqglsskcgqqrrrnhhnnrqqgfceeecfmqqgelkkkkpkp",
X"sbbbkleceek`b`lfmqqqqarnnhhrrrioonqelecggggfffgqqrrrrrrhhoohhodddddddjdddddddoohrrrnnrqflkklcqqqqqrrnhnnrqgceeeeecfmqqgfelllllkk",
X"bbbslcgggfl`bbkegqqqqrrnnnrmgrojirmeeegqqqqqgggqqrrrrrnhhoihidddddddjjddddddddooihnnnrqekkpegqqqqqqrnnnnrqgcelllecgmqqqqgfceeeks",
X"bbspeggmggek`b`kefggqqqrqqgecroohrqffgqqaraqqqqqqrrrrrrnhhnhjdddddddjojdddddddjooinrqqglkklegqqqgmqrrnnnraqgceeeecggqqqqqggfeekb",
X"b`kcggggggfek`b`pecffggmgellgnoohrqqmqqrrrrrqqqqarrrrrrnnrroddddddddoijdddddddjoinrqmgclkklcgqqqggqarhhhnrqqgceeefgmqqqqqqqgclsb",
X"kpefggeeefgflsbbsklllelllkklqnoohnrqqqrrrnrrrrrrrraaqrrrrrnjddddddddohoddddddoinraqgfcelkklfgqqgfgqarhhohnrqqfceccfggmqqqqqgekss",
X"effggclplefgcp`bb`sssssssskcqnhooihnnrrnnnnnrrrrrrraqqqqgqidddddddddihjdddddjhrqqqgceeepkkefqqqgffqrnooohhnrqmfcccfgggmqqaqmeksk",
X"gqggelkkkkefgek`bbb``bb`skefqrniooohhnnrrrrrrnnnnnrrqqmecrjdddddddddhidddddjhrqqqqqgeeelkpegqqqgffqrhooohhhnrqgceeecfggqqaqgekkl",
X"qaqflksssspcgflk`bbbbb`sklefgqrnhooohnrrrrrrrnnhhhnrqfepgnddddddddddiodddjinrqrrrrqqfcelplegqqqgggahooohnnhhnrmceleecgmqarqglkpf",
X"arqeks````klcfelks```sklleeecgqrrhhhnrrqqqqqrrrnhhrrqekeqodddddddddohojdjirqqrhohnrqmgfelecgqaaqqqrhoohnrrnhhnqcellecgqqrraglklg",
X"rrgls`bbb`skefgclkkkkkpeeelllecgqrrrrraqqqqqqrrnnhrqckpfrodddddddddinnhihnrrrhojohrqqggfccgqqrrrarrnnnrrrrnoohqfepplcgqrrnrglkeq",
X"rrfpsbbbbb`kpcggeellllllelpkkkplefgqqqqqqqqqqqqrrrqfllcqnoddddddddjhrrrrnhioooooonrqmgqqmggqqqrrraqqqqqarrnooirgelllcgqrrnrglpcq",
X"rqek`bbbbb`skefggfceeeeelpks```skpecgqqrqqqqqqqqgfeeegqrijddddddddjhrrniodddddjoonrqqqqaqqqqqqqqqqggggqqrrnojonqfllefmqnnnrgllgq",
X"qfps`bbbbbbsklegggffccelpks`bbb``sklcgqqqqqqggcelkpcqrrhiodddddddddoihojddddddjohraqqqqrrrqmggffceeeeefqqrnojohrqcccgqrnhnackeqq",
X"mek``bbbbbb`kpefggggfcelks`bbbbb``skegqqqaqqgeksklfqrnhhoojddddddddddjjjddddddoinraqqqrrrrqfellllpkkkpegqrhojdohrqggmqrhhnqekfrr",
X"gek````bbbb`kpefggggfcelksbbbb`````klfgqqqqgek``pfqrrnnnhiojddddddddddjooojdddohrraaarrrrqgeppleelpkkklcmqrhoddonrqqqrrhhrqelqrr",
X"glkssss``b`skleggggffcelk`bbb````b`slcgqqqgek`skcgqrnnrrrrnojddddddddjonnhoddjhnrrrrrrrrrqcleefggfelkkplcqrnojddohrrrnhhnrqecrnr",
X"qelkkkkkssskpefmmgffccelk`bbb````b`skecggfes``pcggfqrrqmgqrhjdddddddjinrrhojoonrrrrrrnrrqflegqqqqqgfelllefqrnoojjohhhiohrqgcgrhn",
X"qgellllpkkkpegqqmgccccelk`bb````bbbskleelk`b`pcfceeqrqfcgqrhjdddddddonrarhooinrrrrnnnnrrqfefqqrrrrqqgceeeefqrnoojoooojohrgecqhoh",
X"rqqgfceellecgqqqgfccffceksbbb```bbb`skkksbb`pffekkegqfleqrnhodddddjohnrrnooonrrrrnnhnnrqqfcgqarrrrrqqqmggffgqrnhioojjjohrfleqhih",
X"hhrrqggceefqqrrqmgffggfels`bb```bbbbbbb```slcfekkpcgflkeqrnhodddddohnnhooohrrqqrnhhhhnrqgffqqrrrnnnnrraqqqgggmqrnhojjdohrcpeqnio",
X"iohhraqgfgmqrrraqggggggclk`bb```bbbbbbbbslegfekkkefclkkcqrrnoddddoohhiojoirqqqrrnhhhnnrqfcfmqrrnnhhhnnrrraqqqggmqrniojoorfleqrni",
X"hiooinrqqqqrnnrrqqqmgmggek`bb````bbbbbspefffepkkeffekskcqqqnodddohhiojddonaqqqrnhhhhnraqfefgqrnhhhnnnhhnnrraqmgfgqrniooormeegqrn",
X"rrnooonrqqrnhhnrrraqgggfek`bb``s````sklfgfelpplecfek``keggqnoddjohiojddonrqqqrnhhhnnrrqqfeegqrhhhnrrrnhhnnrrrqqfecqrnooonqgcfgqq",
X"gqriojohrrnhhhnnnnrqqggfls`bb`ssssskeccfcepkkecgfclsb`slccgnjdjohoodddohrqqarnhoihnrrqqqgcegqnionrqqqrnhhhnnrrqqfefqrhiohrqggfgf",
X"fgqnojjohnhhihhnnnrrqmfepsbbb`sskkpeffelkkkklcggelk`bb`klegnojooiojjoirqqqrrniooohrrqqqgfccgqhohrqqgmqqrnhnnrrrqmcegqnhoihnrqqgf",
X"qgqrijjjoooooohhhhnrqgelk`bbb`skkleffclks`klcgfclks`bbb`spgrojjjojjohrqgmqrnoojjohrqqmgceegqrhihrqmgggqrrhhhrrrqqfecqrnoooohnrqq",
X"rqqrhojdjjjjooohnnrqmclks`bbb`skkeffeks``skeffelkkss`bbbspgrnoojoohrqgfcgqrhojdjohrqgfceleqrrhhnrqqgffgqqnhhrrqqqgccgqriojjjoohn",
X"hrqrhojddddddjohnrqqclks`bbbbb`klcfcksbb`spcfcpksssss```slgqrhhohhrqceccgqnojdddohrqgelplfqrhihnrqqgfccfqrnhnrqqggcecqrijdddddoo",
X"ohrrniodddddddohrqgclks```bbbb`klcepsbbb`kecclkssskkksssklfqqrrrqqfeeeccgqnojdddohrqflkpcgqnhihnraqmfeeegqrnnrqgfcelegrhjddddddj",
X"jonrnhodddddddonqflkks``````bbbkeclkbbbbslffeks``skkppkkpecffgfelllleeccgqnojdddohrgellegqrnhooinrrqgellcgqnnrqfeelplgrhjddddddd",
X"dohnnhojddddddorqekkks``skkksbbkeck`bbbbsegfps```sklleellelellpkskpeeellcqroodjjonqflegqqqrrnooohhragellegqnnrmclkkklgqnoddddddd",
X"ddohrrnioddddjnrqfeels`skllpkbbkfckbbbb`kcgck````sklefffelkkkkkkkkplllppemrhojjohrqcefqrrrrrrniooohrqcllegqnnrgcls`slfqnojdddddd",
X"dddohnnniojddonraqqgekskeceekbbpgcsbbbbslccls````skecgggepsskkpllellpkkkpcqrhooonrgcgqarrraqqqrojjonqfelcmqrnrgeps`spcqrniojdddd",
X"ddddjihnhiojjjihnnrqelleggfep`blge`bbb`pefeks```skpefqqgepkkpleeeelpkkksklfqnhhhnqccqarnrrqqggqnodjorqfcgqrnrrgeps`spegqrrnhojdd",
X"ddddddjooojddddjihrgecgqqqgek``lfe`bbbsefclk````sklcgqmgeeccfffceelkkksssklgqnnnrgecqarrrqqfcegqhjdjhrqgqqrnrrgeksssklefgmqqrhjd",
X"ddddddddddddddddonammqrrrqqek`seflsb`skcgcks````kpefgggfcgqqqqgfcelpkkkssskefqqrqfefqrrrqgclpklgrjddonrqqrrnnrmepsskkppkkpleqrod",
X"ddddddddddddddddorqqrnhhrrgls`kecekssklffeks```skleffccfmarraqmgcelpkkkkkkkklcggfeegqqqqgelkkkkeqoddjohnrrrnnrqcpssskkss`skkeqhd",
X"dddddddddddddddohrrnojoohrgkb`pcgclklecgfekssssklefffelfahhhnrqgfellpkkppkkkkpllleefggfelllllkkeqhjdddjohnnhhnqgls``ss```ssspqhd",
X"dddddddddddddddinnoojddjhrfsb`lfgfeeefggelkksskpecfceplgrooonrqmfeellpppllllpkkkkpleeelppleccelefahddddjohnhnnames`````sskkskqhd",
X"ddddddddddddddjihojdddddiqes`slfggfffggfelpkkkkleffepkeqhooohnrqgceellllleeellpkkkkpeeeeefggggclegroddddjohhnnrqeks```sskksskqhj",
X"ojddddddddddddoooddddddjhqlkkpleecfffffceelpkkklecclkpgrhihhhnrqgfcelllleccfccepksskegmqqqqqmggelcqnoddddohnnnrqflkssskkss``kqno",
X"iojddddddddddjoodddddddorgeeeellleeecfccceellppllllplfqrnhhhhhnrqgcelllecgmqgfeksskegqrrrqqqqqmfelcqnjddddohnnnrmclkkkkksbbbkmni",
X"hoojdddddddddohodddddddirqmgfepkkkkpeecffceelpkkkkkegqrrrrnhhhnrqgcelllefqqqqgek`slfqarrrrqqqqqqgcefahodddohnnnrqgelkkss`bbbkgrn",
X"nhhodddddddddoojddddddjhrrrqgeks``sklecfggcelpks``pgannnrrrnhhnrqgcellefmqqaqqesbsegqarrrraqqqqqqmfegahdddjohnnnrqclkks`bbb`kfqr"
X};
END_OF_FILE
  if test 17328 -ne `wc -c <'bitmaps/background5.xpm'`; then
    echo shar: \"'bitmaps/background5.xpm'\" unpacked with wrong size!
  fi
  # end of 'bitmaps/background5.xpm'
fi
if test -f 'level.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'level.c'\"
else
  echo shar: Extracting \"'level.c'\" \(15516 characters\)
  sed "s/^X//" >'level.c' <<'END_OF_FILE'
X#include "copyright.h"
X
X/*
X *  Include file dependencies:
X */
X
X#include <stdio.h>
X#include <stdlib.h>
X#include <stddef.h>
X#include <assert.h>
X#include <X11/Xlib.h>
X#include <X11/Xutil.h>
X#include <X11/Xos.h>
X#include <xpm.h>
X
X#include "bitmaps/life.xpm"
X
X#include "error.h"
X#include "audio.h"
X#include "special.h"
X#include "intro.h"
X#include "gun.h"
X#include "init.h"
X#include "stage.h"
X#include "sfx.h"
X#include "score.h"
X#include "blocks.h"
X#include "bonus.h"
X#include "highscore.h"
X#include "ball.h"
X#include "main.h"
X#include "mess.h"
X#include "misc.h"
X
X#include "level.h"
X
X/*
X *  Internal macro definitions:
X */
X
X#define MAX_LIVES			6
X#define START_LIVES			3
X#define NEW_LIVE_SCORE_INC	100000L
X
X#define SHOTS_TO_KILL_SPECIAL	3
X
X#define BUF_SIZE			1024
X
X/*
X *  Internal type declarations:
X */
X
X#if NeedFunctionPrototypes
Xstatic void DrawLevelTimeBonus(Display *display, Window window, int timebonus);
X#else
Xstatic void DrawLevelTimeBonus();
X#endif
X
X/*
X *  Internal variable declarations:
X */
X
XPixmap		lifePixmap, lifeMask;	
Xint 		livesLeft = 3;
Xu_long		level;
Xu_long		startlevel;
Xtime_t		gameTime;
Xint			bonus = 1;
Xchar 		levelTitle[BUF_SIZE];
Xint 		bonusBlock = False;
Xstatic int 	bulletPos;
Xstatic int 	timeBonus;
X
X#if NeedFunctionPrototypes
Xvoid InitialiseLevelInfo(Display *display, Window window, Colormap colormap)
X#else
Xvoid InitialiseLevelInfo(display, window, colormap)
X	Display *display;
X	Window window;
X	Colormap colormap;
X#endif
X{
X	XpmAttributes   attributes;
X	int 			XpmErrorStatus;
X
X	attributes.valuemask = XpmColormap;
X	attributes.colormap = colormap;
X
X	/* Create xpm pixmap for the life */
X	XpmErrorStatus = XpmCreatePixmapFromData(display, window, life_xpm, 
X		&lifePixmap, &lifeMask, &attributes);
X	HandleXPMError(display, XpmErrorStatus, "InitialiseLevelInfo()");
X
X	/* Free the xpm pixmap attributes */
X	XpmFreeAttributes(&attributes);
X}
X
X#if NeedFunctionPrototypes
Xvoid DecLevelTimeBonus(Display *display, Window window)
X#else
Xvoid DecLevelTimeBonus(display, window)
X	Display *display;
X	Window window;
X#endif
X{
X	/* Decrement the time bonus */
X	timeBonus--;	
X
X	/* Cannot step back in time */
X	if (timeBonus < 0) 
X		timeBonus = 0;
X	else
X	{
X		/* Draw the time bonus */
X		DrawLevelTimeBonus(display, window, timeBonus);
X	}
X}
X
X#if NeedFunctionPrototypes
Xint GetLevelTimeBonus(void)
X#else
Xint GetLevelTimeBonus()
X#endif
X{
X	/* return the time bonus */
X	return timeBonus;	
X}
X
X#if NeedFunctionPrototypes
Xvoid SetLevelTimeBonus(Display *display, Window window, int seconds)
X#else
Xvoid SetLevelTimeBonus(display, window, seconds)
X	Display *display;
X	Window window;
X	int seconds;
X#endif
X{
X	assert(timeBonus >= 0);
X
X	/* Reset the time bonus to desired time */
X	timeBonus = seconds;	
X
X	/* Draw the time bonus */
X	DrawLevelTimeBonus(display, window, timeBonus);
X}
X
X#if NeedFunctionPrototypes
Xstatic void DrawLevelTimeBonus(Display *display, Window window, int timebonus)
X#else
Xstatic void DrawLevelTimeBonus(display, window, timebonus)
X	Display *display;
X	Window window;
X	int timebonus;
X#endif
X{
X	int len, minutes, seconds;
X	char str[10];
X
X	/* Work out the minutes and seconds using time bonus */
X	minutes = timebonus / 60;
X	seconds = timebonus % 60;
X
X	/* Construct a string with the time bonus and draw it */
X	sprintf(str, "%02d:%02d", minutes, seconds);
X	len = strlen(str);
X
X	/* Draw the text now thanks  - using title font for big numbers */
X	XClearWindow(display, window);
X	DrawText(display, window, 2, 7, titleFont, black, str, len);
X
X	/* The less time you have the more drastic the colour comes */
X	if (timebonus <= 10)
X		DrawText(display, window, 0, 5, titleFont, red, str, len);
X	else if (timebonus <= 60)
X		DrawText(display, window, 0, 5, titleFont, yellow, str, len);
X	else 
X		DrawText(display, window, 0, 5, titleFont, green, str, len);
X}
X
X#if NeedFunctionPrototypes
Xvoid DrawLife(Display *display, Window window, int x, int y)
X#else
Xvoid DrawLife(display, window, x, y)
X	Display *display;
X	Window window;
X	int x;
X	int y;
X#endif
X{
X	/* Draw the life pixmap */
X	RenderShape(display, window, lifePixmap, lifeMask, 
X		x-12, y-12, 25, 24, True);
X}
X
X#if NeedFunctionPrototypes
Xvoid DisplayLevelInfo(Display *display, Window window, u_long level)
X#else
Xvoid DisplayLevelInfo(display, window, level)
X	Display *display;
X	Window window;
X	u_long level;
X#endif
X{
X	int i;
X
X	/* Clear the window for level information */
X	XClearWindow(display, levelWindow);
X
X	/* Put the level number up */
X	DrawOutNumber(display, levelWindow, level, 260, 0);
X
X	/* Draw out the lives left pixmaps */
X	for (i = 0; i < livesLeft; i++)
X		DrawLife(display, window, 175 - (i * 30), 21);
X
X	/* Draw the score in the score window */
X	DisplayScore(display, scoreWindow, score);
X
X	/* Draw all the bullets in the ammo pouch ;-) */
X	ReDrawBulletsLeft(display);
X
X	XFlush(display);
X}
X
X#if NeedFunctionPrototypes
Xvoid SetLevelNumber(int levelNum)
X#else
Xvoid SetLevelNumber(levelNum)
X	int levelNum;
X#endif
X{
X	level = (u_long) levelNum;
X}
X
X#if NeedFunctionPrototypes
Xvoid SetStartingLevel(int levelNum)
X#else
Xvoid SetStartingLevel(levelNum)
X	int levelNum;
X#endif
X{
X	startlevel = (u_long) levelNum;
X}
X
X#if NeedFunctionPrototypes
Xint GetStartingLevel(void)
X#else
Xint GetStartingLevel()
X#endif
X{
X	return ((int) startlevel);
X}
X
X#if NeedFunctionPrototypes
Xvoid RedrawLevelInfo(Display *display, Window window)
X#else
Xvoid RedrawLevelInfo(display, window)
X	Display *display;
X	Window	window;
X#endif
X{
X	DisplayLevelInfo(display, window, level);
X}
X
X#if NeedFunctionPrototypes
Xvoid FreeLevelInfo(Display *display)
X#else
Xvoid FreeLevelInfo(display)
X	Display *display;
X#endif
X{
X	/* Free the life pixmap  */
X	if (lifePixmap)		XFreePixmap(display, lifePixmap);
X	if (lifeMask)		XFreePixmap(display, lifeMask);
X}
X
X#if NeedFunctionPrototypes
Xvoid DeleteABullet(Display *display)
X#else
Xvoid DeleteABullet(display)
X	Display *display;
X#endif
X{
X	bulletPos = 192 - (GetNumberBullets() * 9);
X
X	/* Take a bullet away from ammo belt */
X	EraseTheBullet(display, levelWindow, bulletPos, 43);
X
X	DecNumberBullets();
X}
X
X#if NeedFunctionPrototypes
Xvoid AddABullet(Display *display)
X#else
Xvoid AddABullet(display)
X	Display *display;
X#endif
X{
X	IncNumberBullets();
X
X	bulletPos = 192 - (GetNumberBullets() * 9);
X
X	/* Add a bullet to the ammo belt */
X	DrawTheBullet(display, levelWindow, bulletPos, 43);
X}
X
X#if NeedFunctionPrototypes
Xvoid ReDrawBulletsLeft(Display *display)
X#else
Xvoid ReDrawBulletsLeft(display)
X	Display *display;
X#endif
X{
X	int x, i;
X
X	/* Draw the bullets in the ammo belt */
X	for (i = 0; i < GetNumberBullets(); i++)
X	{
X		x = 192 - ((i+1) * 9);
X		DrawTheBullet(display, levelWindow, x, 43);
X	} 
X}
X
X#if NeedFunctionPrototypes
Xvoid DecExtraLife(Display *display)
X#else
Xvoid DecExtraLife(display)
X	Display *display;
X#endif
X{
X	/* Take a life */
X	livesLeft--;
X
X	if (livesLeft < 0) 
X		livesLeft = 0;
X
X	/* redraw the level info */
X	DisplayLevelInfo(display, levelWindow, level);
X}
X
X#if NeedFunctionPrototypes
Xvoid AddExtraLife(Display *display)
X#else
Xvoid AddExtraLife(display)
X	Display *display;
X#endif
X{
X	/* Add a new life */
X	livesLeft++;
X
X	/* Dont issue too many extra balls! */
X	if (livesLeft >= MAX_LIVES) 
X		livesLeft = MAX_LIVES;
X	else
X		SetCurrentMessage(display, messWindow, "Extra ball", True);
X
X	/* redraw the level info */
X	DisplayLevelInfo(display, levelWindow, level);
X}
X
X#if NeedFunctionPrototypes
Xvoid CheckAndAddExtraLife(Display *display, long score)
X#else
Xvoid CheckAndAddExtraLife(display, score)
X	Display *display;
X	long score;
X#endif
X{
X	static int ballInc = 0;
X
X	/* Add a new life? */
X	if ((score) && ((score / NEW_LIVE_SCORE_INC) != ballInc)) 
X	{
X		/* Add a new life */
X		AddExtraLife(display);
X	}
X
X	/* Next inc before adding a new life */
X	ballInc = score / NEW_LIVE_SCORE_INC;
X}
X
X#if NeedFunctionPrototypes
Xvoid HandleGameTimer(Display *display, Window window)
X#else
Xvoid HandleGameTimer(display, window)
X	Display *display;
X	Window window;
X#endif
X{
X	static time_t oldTime = 0;
X
X	/* Time to decrement the timer */
X	if (time(NULL) > oldTime)
X	{
X		/* Decrement the timer bonus */
X		DecLevelTimeBonus(display, timeWindow);
X		oldTime = time(NULL);
X	}
X}
X
X#if NeedFunctionPrototypes
Xvoid CheckGameRules(Display *display, Window window)
X#else
Xvoid CheckGameRules(display, window)
X	Display *display;
X	Window window;
X#endif
X{
X	CheckAndAddExtraLife(display, score);
X
X	HandleGameTimer(display, window);
X
X	if (StillActiveBlocks() == False)
X	{
X		/* Turn off the x2 x4 bonuses */
X		Togglex2Bonus(display, False);
X		Togglex4Bonus(display, False);
X		DrawSpecials(display);
X
X		/* Give the play a big head */
X		if (noSound == False) playSoundFile("applause", 70);
X
X		/* Finished level now so set up bonus screen */
X        mode = MODE_BONUS;
X		SetupBonusScreen(display, mainWindow);
X	}
X}
X
X#if NeedFunctionPrototypes
Xvoid UpdateHighScores(void)
X#else
Xvoid UpdateHighScores()
X#endif
X{
X	time_t endTime;
X	u_long theLevel;
X
X	/* Obtain the game duration in seconds - taking account for pauses */
X	endTime = time(NULL) - gameTime - pausedTime;
X
X	/* Adjust the level so that the starting level is taken into account */
X	theLevel = level - (u_long) GetStartingLevel() + 1L;
X
X	/* Update the high score table */
X	(void) CheckAndAddScoreToHighScore(score, theLevel, endTime, PERSONAL);
X	if (CheckAndAddScoreToHighScore(score, theLevel, endTime, GLOBAL) == False)
X		ResetHighScore(PERSONAL);
X	else
X		ResetHighScore(GLOBAL);
X}
X
X
X#if NeedFunctionPrototypes
Xvoid EndTheGame(Display *display, Window window)
X#else
Xvoid EndTheGame(display, window)
X	Display *display;
X	Window window;
X#endif
X{
X	/* Game over man! */
X	SetCurrentMessage(display, messWindow, "- Game Over - ", True);
X
X	if (noSound == False)
X		playSoundFile("game_over", 100);
X
X	UpdateHighScores();
X
X	/* Reset game and setup for high score table */
X	gameActive = False;
X	SetLevelNumber(GetStartingLevel());
X	ResetIntroduction();
X	mode = MODE_HIGHSCORE;
X
X	TurnSpecialsOff(display);
X}
X
X#if NeedFunctionPrototypes
Xvoid DeadBall(Display *display, Window window)
X#else
Xvoid DeadBall(display, window)
X	Display *display;
X	Window window;
X#endif
X{
X
X	/* Decrement the number of lives left and display so */
X	livesLeft--;
X	DisplayLevelInfo(display, levelWindow, level);
X
X	/* Disable some of the specials */
X	Togglex2Bonus(display, False);
X	Togglex4Bonus(display, False);
X	ToggleKiller(display, False);
X	DrawSpecials(display);
X
X	SetCurrentMessage(display, messWindow, "Ball vapourised!", True);
X
X	if (livesLeft < 0 && GetAnActiveBall() == -1)
X		EndTheGame(display, window);
X	else 
X	{
X		if (noSound == False) playSoundFile("balllost", 100);
X		ResetBallStart(display, window);
X	}
X}
X
X#if NeedFunctionPrototypes
Xchar *GetLevelName(void)
X#else
Xchar *GetLevelName()
X#endif
X{
X	/* Return the name of the current level */
X	return (levelTitle);
X}
X
X#if NeedFunctionPrototypes
Xint ReadNextLevel(Display *display, Window window, char *levelName)
X#else
Xint ReadNextLevel(display, window, levelName)
X	Display *display;
X	Window window;
X	char *levelName;
X#endif
X{
X	FILE *levelFile;
X	int row, col, type;
X	char str[BUF_SIZE];
X	int	timeLimit = 180;
X
X	/* Clear all existing mess in structures */
X	ClearBlockArray();
X
X	/* Setup the new level data */
X    blocksExploding = 0;
X	colWidth 	= PLAY_WIDTH / MAX_COL;
X	rowHeight 	= PLAY_HEIGHT / MAX_ROW;
X	bonusBlock 	= False;
X	ResetNumberBonus();
X
X	/* Open the new level data file for reading */
X	if ((levelFile = fopen(levelName, "r")) == NULL)
X	{
X		ErrorMessage("Error: Cannot load level data - check level directory.");
X		return False;
X	}
X
X	/* Obtain the title string */
X	fgets(levelTitle, BUF_SIZE, levelFile);
X
X	/* Now get the time bonus from the level file */
X	fgets(str, BUF_SIZE, levelFile);
X	if (sscanf(str, "%d", &timeLimit) != 1)
X	{
X		ErrorMessage("Error: Cannot parse level data - time bonus error.");
X		return False;
X	}
X
X	/* Set and draw the time limit for the level */
X	SetLevelTimeBonus(display, timeWindow, timeLimit);
X
X	for (row = 0; row < (MAX_ROW - 3); row++)
X	{
X		for (col = 0; col < MAX_COL; col++)
X		{
X			/* Get the next character from the level data file */
X			type = fgetc(levelFile);
X
X			switch (type)
X			{
X				case 'H' :	/* hyperspace block - walls are now gone */
X					AddNewBlock(display, window, row, col, HYPERSPACE_BLK, 0);
X					break;
X					
X				case 'B' :	/* bullet block - ammo */
X					AddNewBlock(display, window, row, col, BULLET_BLK, 0);
X					break;
X					
X				case 'r' :	/* A red block */
X					AddNewBlock(display, window, row, col, RED_BLK, 0);
X					break;
X					
X				case 'g' :	/* A green block */
X					AddNewBlock(display, window, row, col, GREEN_BLK, 0);
X					break;
X					
X				case 'b' :	/* A blue block */
X					AddNewBlock(display, window, row, col, BLUE_BLK, 0);
X					break;
X					
X				case 't' :	/* A tan block */
X					AddNewBlock(display, window, row, col, TAN_BLK, 0);
X					break;
X					
X				case 'p' :	/* A purple block */
X					AddNewBlock(display, window, row, col, PURPLE_BLK, 0);
X					break;
X					
X				case 'y' :	/* A yellow block */
X					AddNewBlock(display, window, row, col, YELLOW_BLK, 0);
X					break;
X					
X				case 'w' :	/* A solid wall block */
X					AddNewBlock(display, window, row, col, BLACK_BLK, 0);
X					break;
X					
X				case '0' :	/* A counter block - no number */
X					AddNewBlock(display, window, row, col, COUNTER_BLK, 0);
X					break;
X					
X				case '1' :	/* A counter block level 1 */
X					AddNewBlock(display, window, row, col, COUNTER_BLK, 1);
X					break;
X					
X				case '2' : /* A counter block level 2 */
X					AddNewBlock(display, window, row, col, COUNTER_BLK, 2);
X					break;
X					
X				case '3' : /* A counter block level 3 */
X					AddNewBlock(display, window, row, col, COUNTER_BLK, 3);
X					break;
X					
X				case '4' : /* A counter block level 4 */
X					AddNewBlock(display, window, row, col, COUNTER_BLK, 4);
X					break;
X					
X				case '5' : /* A counter block level 5  - highest */
X					AddNewBlock(display, window, row, col, COUNTER_BLK, 5);
X					break;
X					
X				case 'X' : /* A bomb block - arggh! */
X					AddNewBlock(display, window, row, col, BOMB_BLK, 0);
X					break;
X
X				case 'D' : /* A death block */
X					AddNewBlock(display, window, row, col, DEATH_BLK, 
X						SHOTS_TO_KILL_SPECIAL);
X					break;
X
X				case 'L' : /* An extra ball block */
X					AddNewBlock(display, window, row, col, EXTRABALL_BLK, 0);
X					break;
X
X				case 'M' : /* A machine gun block */
X					AddNewBlock(display, window, row, col, MGUN_BLK, 
X						SHOTS_TO_KILL_SPECIAL);
X					break;
X
X				case 'W' : /* A wall off block */
X					AddNewBlock(display, window, row, col, WALLOFF_BLK, 
X						SHOTS_TO_KILL_SPECIAL);
X					break;
X
X				case '?' : /* A random changing block */
X					AddNewBlock(display, window, row, col, RANDOM_BLK, 0);
X					break;
X
X				case 'm' : /* A multiple ball block */
X					AddNewBlock(display, window, row, col, MULTIBALL_BLK, 
X						SHOTS_TO_KILL_SPECIAL);
X					break;
X
X				case 's' : /* A sticky block */
X					AddNewBlock(display, window, row, col, STICKY_BLK, 
X						SHOTS_TO_KILL_SPECIAL);
X					break;
X
X				case 'R' :	/* reverse block - switch paddle control */
X					AddNewBlock(display, window, row, col, REVERSE_BLK, 
X						SHOTS_TO_KILL_SPECIAL);
X					break;
X					
X				case '<' :	/* shrink paddle block - make paddle smaller */
X					AddNewBlock(display, window, row, col, PAD_SHRINK_BLK, 
X						SHOTS_TO_KILL_SPECIAL);
X					break;
X					
X				case '>' :	/* expand paddle block - make paddle bigger */
X					AddNewBlock(display, window, row, col, PAD_EXPAND_BLK, 
X						SHOTS_TO_KILL_SPECIAL);
X					break;
X					
X				default:
X					break;
X			}
X		}
X
X		/* Get the newline */
X		type = fgetc(levelFile);
X	}
X
X	/* Close our level data file */
X	if (fclose(levelFile) < 0)
X		ErrorMessage("Warning: Cannot close level data file.");
X
X	return True;
X}
END_OF_FILE
  if test 15516 -ne `wc -c <'level.c'`; then
    echo shar: \"'level.c'\" unpacked with wrong size!
  fi
  # end of 'level.c'
fi
if test -f 'sfx.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sfx.h'\"
else
  echo shar: Extracting \"'sfx.h'\" \(866 characters\)
  sed "s/^X//" >'sfx.h' <<'END_OF_FILE'
X#ifndef _SFX_H_
X#define _SFX_H_
X
X#include "copyright.h"
X
X/*
X *  Dependencies on other include files:
X */
X
X#include <X11/Xlib.h>
X
X/*
X *  Constants and macros:
X */
X
X#define SFX_NONE        0
X#define SFX_SCROLL_ON   1
X#define SFX_SCROLL_OFF  2
X#define SFX_DOTS        3
X#define SFX_SHAKE      	4
X#define SFX_BLOCKFILL  	5
X#define SFX_SCATTER  	6
X
X/*
X *  Type declarations:
X */
X
X/*
X *  Function prototypes:
X */
X
X#if NeedFunctionPrototypes
Xvoid SetSfxEndFrame(int endFrame);
Xvoid changeSfxMode(int newMode);
Xint oldSfxMode(void);
Xint currentSfxMode(void);
Xint WindowShakeEffect(Display *display, Window window);
Xint getSpecialEffects(Display *display);
Xvoid useSpecialEffects(int state);
X#else
Xvoid useSpecialEffects();
Xint getSpecialEffects();
Xvoid SetSfxEndFrame();
Xvoid changeSfxMode();
Xint oldSfxMode();
Xint currentSfxMode();
Xint WindowShakeEffect();
X#endif
X
X
X#endif
END_OF_FILE
  if test 866 -ne `wc -c <'sfx.h'`; then
    echo shar: \"'sfx.h'\" unpacked with wrong size!
  fi
  # end of 'sfx.h'
fi
echo shar: End of archive 12 \(of 26\).
cp /dev/null ark12isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 26 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
    echo "merging split files..."
    cat blocks.c[12] > blocks.c
    rm blocks.c[12]
    echo "blocks.c done"
    cat bitmaps/earth.xpm.Z.u.[ab] > bitmaps/earth.xpm.Z.uue
    rm bitmaps/earth.xpm.Z.u.[ab]
    echo "bitmaps/earth.xpm.Z.uue done"
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0
exit 0 # Just in case...
-- 
  // chris@Sterling.COM           | Send comp.sources.x submissions to:
\X/  Amiga - The only way to fly! |    sources-x@sterling.com
 "It's intuitively obvious to the |
  most casual observer..."        | GCS d+/-- p+ c++ l+ m+ s++/+ g+ w+ t+ r+ x+
