Path: uunet!zaphod.mps.ohio-state.edu!mips!msi!dcmartin
From: pjs@pa.dec.com (Philip Schneider)
Newsgroups: comp.sources.x
Subject: v16i033: Motif Xclock, Part03/04
Message-ID: <1992Feb4.155419.6702@msi.com>
Date: 4 Feb 92 15:54:19 GMT
References: <csx-16i031-catclock@uunet.UU.NET>
Sender: dcmartin@msi.com (David C. Martin - Moderator)
Organization: Molecular Simulations, Inc.
Lines: 1309
Approved: dcmartin@msi.com
Originator: dcmartin@fascet

Submitted-by: pjs@pa.dec.com (Philip Schneider)
Posting-number: Volume 16, Issue 33
Archive-name: catclock/part03

# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# If this archive is complete, you will see the following message at the end:
#		"End of archive 3 (of 4)."
# Contents:  alarm.c catback.xbm patchlevel.h xclock.man
# Wrapped by dcmartin@fascet on Mon Jan 13 14:38:02 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'alarm.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'alarm.c'\"
else
echo shar: Extracting \"'alarm.c'\" \(8383 characters\)
sed "s/^X//" >'alarm.c' <<'END_OF_FILE'
X#include <stdio.h>
X#include <malloc.h>
X
X#include <signal.h>
X#include <strings.h>
X#include <ctype.h>
X#include <sys/time.h>
X
X#include <X11/Xlib.h>
X#include <X11/Xutil.h>
X#include <X11/Intrinsic.h>
X
X#include <Xm/Xm.h>
X
X#include "alarm.h"
X#include "bell.xbm"
X
X/*
X *  Various defines
X */
X#define	ALARMBELLSEC	(1000000L / TEXTSCROLLTIME)
X#define	PAD		3
X#define	RECHECKTIME	(5 * 60)
X#define	SECONDSPERDAY	(60 * 60 * 24)
X#define	TEXTSCROLLTIME	250000L
X
X
X/*
X *  Alarm structure
X */
Xtypedef struct _Alarm {
X    long	alarmTime;
X    long	alarmSec;
X    char	*alarmAnnounce;
X} Alarm;
X
X
X#define TRUE 1
X#define FALSE 0
X
X
X/*
X *  Globals (ugh!)
X */
Xstatic char	alarmBuf[BUFSIZ];
Xstatic int 	alarmBufLen;
X
Xstatic char 	alarmFile[BUFSIZ];
X
Xstatic XFontStruct *alarmFontInfo;
X
Xstatic int 	alarmIndex;
Xstatic int 	alarmLen;
Xstatic int 	alarmBell;
Xstatic int 	alarmBellCnt;
Xstatic Boolean 	*alarmOn;
Xstatic Boolean 	alarmRun;
Xstatic Boolean 	*alarmState;
Xstatic int 	alarmWidth;
X
Xstatic int 	alarmX;
Xstatic int 	alarmY;
X
Xstatic int 	foreground;
Xstatic int 	background;
X
Xstatic Boolean 	bellFlash;
X
Xstatic int 	bellX;
Xstatic int 	bellY;
X
Xstatic Alarm 	nextAlarm;
Xstatic Window 	w;
X
Xstatic Pixmap 	BellPixmap;
Xstatic GC 	eraseGC = 0;
X
Xextern Display *dpy;
Xextern int 	screen;
Xextern Window 	root;
Xextern GC 	gc;
X
Xstatic XmFontList xmFontList;
X
X
X
Xvoid InitBellAlarm(win, width, height, fontInfo, fontList, fg, bg, state, on)
X    Window 	win;
X    int 	width, height;
X    XFontStruct *fontInfo;
X    Pixel	fg, bg;
X    XmFontList	fontList;
X    Boolean 	*state, *on;
X{
X    xmFontList = fontList;
X
X    bellX = PAD;
X    bellY = PAD;
X
X    alarmX = bell_width + 2 * PAD + fontInfo->max_bounds.width;
X    alarmY = PAD;
X
X    w = win;
X
X    alarmFontInfo = fontInfo;
X    alarmWidth = width - alarmX;
X
X    foreground = fg;
X    background = bg;
X
X    alarmLen = (alarmWidth + (fontInfo->max_bounds.width - 1)) /
X      fontInfo->max_bounds.width;
X    alarmOn    = on;
X    alarmState = state;
X    
X    if (!eraseGC) {
X	XGCValues xgcv;
X	
X	eraseGC = XCreateGC(dpy, w, 0,  &xgcv);
X	XCopyGC(dpy, gc, ~0, eraseGC);
X
X	xgcv.foreground = bg;
X	xgcv.background = fg;
X	XChangeGC(dpy, eraseGC, GCForeground | GCBackground, &xgcv);
X    }
X}
X
X
X
Xvoid DrawBell(flash)
X    int flash;
X{
X    Boolean	i;
X    
X    if (!nextAlarm.alarmTime) {
X	return;
X    }
X    
X    i = flash ? (bellFlash = (bellFlash == TRUE) ? FALSE : TRUE) : TRUE;
X    
X    if (i == TRUE) {
X	if (!BellPixmap) {
X	    BellPixmap = XCreateBitmapFromData(dpy, w,
X					       bell_bits,
X					       bell_width, bell_height);
X	}
X	XCopyPlane(dpy, BellPixmap, w, gc,
X		   0, 0,
X		   bell_width, bell_height,
X		   bellX, bellY, 0x1);
X    } else {
X	extern void HideBell();
X	
X	HideBell();
X    }
X}
X
X
X
Xstatic void HideBell()
X{
X    XFillRectangle(dpy, w, eraseGC,
X		   bellX, bellY, bell_width, bell_height);
X    XFlush(dpy);
X}
X
X
X
Xstatic void AlarmAnnounce()
X{
X    int 		i, w;
X    char 		buf[BUFSIZ];
X    struct itimerval 	tv;
X    extern void		TextScroll();
X    
X    strcpy(buf, nextAlarm.alarmAnnounce ? nextAlarm.alarmAnnounce : "alarm");
X    strcat(buf, " ... ");
X    alarmBufLen = strlen(buf);
X
X    w = XTextWidth(alarmFontInfo, buf, alarmBufLen);
X
X    i = alarmWidth;
X    strcpy(alarmBuf, buf);
X
X    do {
X	strcat(alarmBuf, buf);
X    } while ((i -= w) > 0);
X
X    alarmIndex = -alarmLen;
X    signal(SIGALRM, TextScroll);
X    
X    bzero((char *)&tv, sizeof(tv));
X    tv.it_interval.tv_usec = tv.it_value.tv_usec = TEXTSCROLLTIME;
X    setitimer(ITIMER_REAL, &tv, (struct itimerval *)NULL);
X    
X    alarmRun = TRUE;
X
X    if (alarmOn) {
X	*alarmOn = TRUE;
X    }
X    if (alarmBell) {
X	XBell(dpy, 25);
X	alarmBellCnt = ALARMBELLSEC * alarmBell;
X    }
X}
X
X
X
X
Xstatic void TextScroll()
X{
X    int 	x, index;
X    XmString	xmString;
X    
X    if (alarmRun == FALSE) {
X	return;
X    }
X    if (++alarmIndex < 0) {
X	x = alarmX - alarmIndex * alarmFontInfo->max_bounds.width;
X	index = 0;
X    } else {
X	if (alarmIndex >= alarmBufLen) {
X	    alarmIndex -= alarmBufLen;
X	}
X	x = alarmX;
X	index = alarmIndex;
X    }
X    
X    DrawBell(TRUE);
X    
X    xmString = XmStringCreate(&alarmBuf[index], XmSTRING_ISO8859_1);
X    XmStringDrawImage(dpy, w, xmFontList, xmString, gc,
X		      x, alarmY, 1024,
X		      XmALIGNMENT_BEGINNING,
X		      XmSTRING_DIRECTION_L_TO_R, NULL);
X    XmStringFree(xmString);
X    
X    if (alarmBell && --alarmBellCnt <= 0) {
X	XBell(dpy, 25);
X	alarmBellCnt = ALARMBELLSEC * alarmBell;
X    }
X    XFlush(dpy);
X}
X
X
X
Xstatic void ReadAlarmFile(file)
X    char	*file;
X{
X    char	*cp, *tp, *dp;
X    int 	hour, minute, pm, day;
X    FILE 	*fp;
X    struct tm 	*tm;
X    long 	l, l0;
X    time_t	clock;
X    char	buf[BUFSIZ];
X    
X    if (nextAlarm.alarmAnnounce) {
X	free((void *)(nextAlarm.alarmAnnounce));
X    }
X    bzero((char *)&nextAlarm, sizeof(nextAlarm));
X
X    if (!file || !(fp = fopen(file, "r"))) {
X	return;
X    }
X
X    time(&clock);
X    tm = localtime(&clock);
X    
X    l0 = clock - (60 * (60 * tm->tm_hour + tm->tm_min) + tm->tm_sec);
X    
X    while (fgets(buf, sizeof(buf), fp)) {
X	if (*buf == '#' || !(cp = index(buf, ':')) ||
X	    !(tp = index(buf, '\t')) || tp < cp) {
X	    continue;
X	}
X	
X	dp = buf;
X	while (isspace(*dp)) {
X	    dp++;
X	}
X	
X	switch (*dp) {
X	    case 'S':
X	    case 's': {
X		day = (dp[1] == 'a' || dp[1] == 'A') ? 6 : 0;
X		break;
X	    }
X	    case 'M':
X	    case 'm': {
X		day = 1;
X		break;
X	    }
X	    case 'T':
X	    case 't': {
X		day = (dp[1] == 'h' || dp[1] == 'H') ? 4 : 2;
X		break;
X	    }
X	    case 'W':
X	    case 'w': {
X		day = 3;
X		break;
X
X	    }
X	    case 'F':
X	    case 'f': {
X		day = 5;
X		break;
X	    }
X	    default: {
X		day = -1;
X		break;
X	    }
X	}
X
X	while (!isdigit(*dp) && dp < cp) {
X	    dp++;
X	}
X	*cp++ = 0;
X	*tp++ = 0;
X
X	while (isspace(*cp)) {
X	    cp++;
X	}
X
X	if ((minute = atoi(cp)) < 0) {
X	    minute = 0;
X	} else if (minute > 59) {
X	    minute = 59;
X	}
X
X	while (isdigit(*cp)) {
X	    cp++;
X	}
X
X	while (isspace(*cp)) {
X	    cp++;
X	}
X
X	pm = (*cp == 'p' || *cp == 'P');
X
X	if ((hour = atoi(dp)) < 0) {
X	    hour = 0;
X	} else if (hour < 12) {
X	    if (pm) {
X		hour += 12;
X	    }
X	} else if (hour == 12) {
X	    if (!pm) {
X		hour = 0;
X	    }
X	} else if (hour > 23) {
X	    hour = 23;
X	}
X
X	l = l0 + 60 * (60 * hour + minute);
X
X	if (day < 0) {
X	    if (l < clock) {
X		l += SECONDSPERDAY;
X	    }
X	} else {
X	    if (day < tm->tm_wday || (day == tm->tm_wday && l < clock)) {
X		day += 7;
X	    }
X	    l += (day - tm->tm_wday) * SECONDSPERDAY;
X	}
X	
X	if (nextAlarm.alarmTime && l >= nextAlarm.alarmTime) {
X	    continue;
X	}
X	if (nextAlarm.alarmAnnounce) {
X	    free((void *)(nextAlarm.alarmAnnounce));
X	}
X	nextAlarm.alarmTime = l;
X	
X	while (isspace(*tp)) {
X	    tp++;
X	}
X
X	if (cp = index(tp, '\n')) {
X	    *cp = 0;
X	}
X
X	for (cp = tp + strlen(tp) - 1 ; cp >= tp && isspace(*cp) ; ) {
X	    *cp-- = 0;
X	}
X
X	if (!*tp) {
X	    continue;
X	}
X
X	if (nextAlarm.alarmAnnounce = malloc(strlen(tp) + 1)) {
X	    strcpy(nextAlarm.alarmAnnounce, tp);
X	}
X    }
X
X    fclose(fp);
X    
X    if (nextAlarm.alarmTime) {
X	nextAlarm.alarmSec = nextAlarm.alarmTime - clock;
X    }
X}
X
X
X
Xvoid SetAlarm(file)
X    char	*file;
X{
X    extern void Set_Alarm();
X
X    ReadAlarmFile(file);
X    
X    if (!nextAlarm.alarmTime) {
X	*alarmFile = 0;
X	if (alarmState) {
X	    *alarmState = FALSE;
X	}
X	AlarmOff();
X	HideBell();
X	
X	return;
X    }
X    
X    strcpy(alarmFile, file);
X    
X    DrawBell(FALSE);
X    Set_Alarm();
X}
X
X
X
Xstatic void ResetAlarm()
X{
X    extern void Set_Alarm();
X    
X    if (!*alarmFile) {
X	return;
X    }
X    ReadAlarmFile(alarmFile);
X    
X    if (!nextAlarm.alarmTime) {
X	*alarmFile = 0;
X	if (alarmState) {
X	    *alarmState = FALSE;
X	}
X	HideBell();
X
X	return;
X    }
X
X    Set_Alarm();
X}
X
X
X
Xstatic void Set_Alarm()
X{
X    struct itimerval tv;
X    
X    if (alarmState) {
X	*alarmState = TRUE;
X    }
X    if (nextAlarm.alarmSec > RECHECKTIME + 60) {
X	nextAlarm.alarmSec = RECHECKTIME;
X	signal(SIGALRM, ResetAlarm);
X    } else {
X	signal(SIGALRM, AlarmAnnounce);
X    }
X    
X    bzero((char *)&tv, sizeof(tv));
X    tv.it_value.tv_sec = nextAlarm.alarmSec;
X    setitimer(ITIMER_REAL, &tv, (struct itimerval *)NULL);
X}
X
X
X
Xvoid GetBellSize(bw, bh)
X    int *bw, *bh;
X{
X    *bw = bell_width +  2 * PAD;
X    *bh = bell_height + 2 * PAD;
X}
X
X
X
Xvoid SetBell(seconds)
X    int seconds;
X{
X    alarmBell = seconds;
X}
X
X
Xvoid AlarmOff()
X{
X    struct itimerval tv;
X    
X    alarmRun = FALSE;
X
X    if (alarmOn) {
X	*alarmOn = FALSE;
X    }
X
X    bzero((char *)&tv, sizeof(tv));
X    setitimer(ITIMER_REAL, &tv, (struct itimerval *)NULL);
X}
END_OF_FILE
if test 8383 -ne `wc -c <'alarm.c'`; then
    echo shar: \"'alarm.c'\" unpacked with wrong size!
fi
# end of 'alarm.c'
fi
if test -f 'catback.xbm' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'catback.xbm'\"
else
echo shar: Extracting \"'catback.xbm'\" \(35760 characters\)
sed "s/^X//" >'catback.xbm' <<'END_OF_FILE'
X#define catback_width 150
X#define catback_height 300
X#define catback_x_hot -1
X#define catback_y_hot -1
Xstatic char catback_bits[] = {
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0x7f, 0x00,
X   0xe0, 0xff, 0x03, 0x00, 0xfe, 0xef, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0xef, 0xff, 0x01, 0xfe, 0xff, 0x3f, 0x80, 0xff,
X   0xf7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd7,
X   0xff, 0xe7, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xeb, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaf, 0xfe, 0xff, 0xff, 0xff, 0xff,
X   0xff, 0x7f, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x57, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xea, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaf, 0xfa, 0xff, 0xff,
X   0xff, 0xff, 0xff, 0x5f, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x57, 0xf5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xaf, 0xea,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaf, 0xea,
X   0xff, 0xff, 0xff, 0xff, 0xff, 0x57, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0xf5, 0xff, 0xff, 0xff, 0xff, 0xff,
X   0xaf, 0xea, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0xaf, 0xfa, 0xff, 0xff, 0xff, 0xff, 0xff, 0x5f, 0xf5, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0xfd, 0xff, 0xff, 0xff,
X   0xff, 0xff, 0xbf, 0xea, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0xaf, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xf5, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0xff, 0xff,
X   0xff, 0xff, 0xff, 0xff, 0xff, 0xea, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0xaf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
X   0xf5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd7,
X   0xff, 0x01, 0xff, 0xff, 0xff, 0x80, 0xff, 0xeb, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0x3f, 0x00, 0xf8, 0xff, 0x1f,
X   0x00, 0xfc, 0xf7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0xf7, 0x1f, 0x00, 0xf0, 0xff, 0x0f, 0x00, 0xf8, 0xef, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x0f, 0x00, 0xe0,
X   0xff, 0x07, 0x00, 0xf0, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0xff, 0x07, 0x00, 0xc0, 0xff, 0x03, 0x00, 0xe0, 0xff,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x03,
X   0x00, 0x80, 0xff, 0x01, 0x00, 0xc0, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x03, 0x00, 0x80, 0xff, 0x01, 0x00,
X   0xc0, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0xff, 0x03, 0x00, 0x80, 0xff, 0x01, 0x00, 0xc0, 0xff, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x01, 0x00, 0x00, 0xff,
X   0x00, 0x00, 0x80, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x80, 0xff, 0x01, 0x00, 0x00, 0xff, 0x00, 0x00, 0x80, 0xff, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x01, 0x00,
X   0x00, 0xff, 0x00, 0x00, 0x80, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0xc0, 0xff, 0x01, 0x00, 0x00, 0xff, 0x00, 0x00, 0x80,
X   0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff,
X   0x01, 0x00, 0x00, 0xff, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x01, 0x00, 0x00, 0xff, 0x00,
X   0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0xe0, 0xff, 0x01, 0x00, 0x00, 0xff, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x03, 0x00, 0x80,
X   0xff, 0x01, 0x00, 0xc0, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0xf0, 0xff, 0x03, 0x00, 0x80, 0xff, 0x01, 0x00, 0xc0, 0xff,
X   0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x03,
X   0x00, 0x80, 0xff, 0x01, 0x00, 0xc0, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x07, 0x00, 0xc0, 0xff, 0x03, 0x00,
X   0xe0, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0,
X   0xff, 0x0f, 0x00, 0xe0, 0xff, 0x07, 0x00, 0xf0, 0xff, 0x07, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0x1f, 0x00, 0xf0, 0xff,
X   0x0f, 0x00, 0xf8, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0xf8, 0xff, 0x3f, 0x00, 0xf8, 0xd5, 0x1f, 0x00, 0xfc, 0xff, 0x0f,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0x01,
X   0xff, 0xaa, 0xff, 0x80, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x7f, 0x55, 0xff, 0xff, 0xff,
X   0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff,
X   0xff, 0xff, 0xbf, 0xaa, 0xfe, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x7f, 0x55, 0xff,
X   0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0xf8, 0xff, 0xff, 0xff, 0xbf, 0xaa, 0xfe, 0xff, 0xff, 0xff, 0x0f, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x7f,
X   0x55, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0xf8, 0x0f, 0x00, 0x00, 0x80, 0xaa, 0x00, 0x00, 0x00, 0xf8,
X   0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x0f, 0x04,
X   0x00, 0x40, 0x55, 0x01, 0x00, 0x10, 0xf8, 0x0f, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0xf8, 0x0f, 0x0c, 0x00, 0x8c, 0xaa, 0x18, 0x00,
X   0x18, 0xf8, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8,
X   0x1f, 0x18, 0x00, 0x06, 0x55, 0x30, 0x00, 0x0c, 0xfc, 0x0f, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0x30, 0x00, 0x03, 0x2a,
X   0x60, 0x00, 0x07, 0xfc, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0xf0, 0x1f, 0xe0, 0xff, 0x63, 0x00, 0xc6, 0xff, 0x01, 0xfc, 0x07,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x1f, 0xc0, 0xff,
X   0x30, 0x00, 0x0c, 0xff, 0x00, 0xfc, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0xf0, 0x3f, 0x02, 0x00, 0x10, 0x00, 0x18, 0x00, 0x10,
X   0xfe, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f,
X   0x0e, 0x00, 0x18, 0x00, 0x30, 0x00, 0x1c, 0xfe, 0x07, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x3f, 0xf8, 0xff, 0x0f, 0x00, 0xe0,
X   0xff, 0x07, 0xfe, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0xe0, 0x7f, 0xe0, 0xff, 0x03, 0x00, 0x80, 0xff, 0x00, 0xff, 0x03, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x7f, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0xe0, 0xff, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x80, 0xff,
X   0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x00,
X   0xf0, 0x00, 0x00, 0x80, 0x0f, 0x80, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x01, 0xf0, 0x1f, 0x00, 0xf0, 0x0f,
X   0xc0, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
X   0xff, 0x01, 0xe0, 0xff, 0xff, 0xff, 0x07, 0xc0, 0xff, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x03, 0x80, 0xff, 0xff,
X   0xff, 0x01, 0xe0, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0xff, 0x07, 0x00, 0xff, 0xff, 0xff, 0x00, 0xf0, 0x7f, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x0f, 0x00,
X   0xfe, 0xff, 0x7f, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0xf8, 0xff, 0x1f, 0x00, 0xfc,
X   0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe,
X   0x3f, 0x00, 0xf0, 0xff, 0x0f, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x7f, 0x00, 0xc0, 0xff, 0x03,
X   0x00, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0xf8, 0xff, 0x00, 0x00, 0xff, 0x00, 0x80, 0xff, 0x0f, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x01, 0x00,
X   0x00, 0x00, 0xc0, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0xf0, 0xff, 0x03, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x03,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff,
X   0x1f, 0x00, 0x00, 0x00, 0xfc, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x7f, 0x00, 0x00, 0x00, 0xff,
X   0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
X   0xff, 0xff, 0xff, 0x03, 0x00, 0xe0, 0xff, 0x01, 0x00, 0x0e, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0xf0, 0xff, 0x3f, 0x00,
X   0xfe, 0x1f, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x20, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x08,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0xf8,
X   0xff, 0xff, 0xff, 0x01, 0x1c, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0xc0, 0xff, 0xff, 0x0f, 0xf0, 0x03,
X   0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
X   0x07, 0x00, 0xfe, 0x80, 0x0f, 0x1f, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0xfc, 0xff, 0xf1, 0xc0, 0xe1,
X   0x01, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x0c, 0x00, 0x00, 0x00, 0x97, 0x61, 0x31, 0x00, 0x00, 0x00, 0x00, 0x03,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x1c,
X   0x21, 0x1d, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x03, 0xff, 0x3f, 0x00,
X   0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
X   0x00, 0x10, 0x00, 0xff, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0xff, 0xff, 0x1f, 0x00, 0x03, 0x00,
X   0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c,
X   0x00, 0x00, 0x00, 0x10, 0x00, 0xff, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x30, 0x61,
X   0x81, 0x1f, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x10, 0x00, 0x00, 0xf8, 0xbf, 0xc1, 0x03, 0xf0, 0x00, 0x00, 0x10,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x0f,
X   0x70, 0x80, 0x0f, 0x80, 0x1f, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x18, 0x00, 0xf0, 0x00, 0xfc, 0xff, 0x7f, 0x00, 0x00,
X   0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00,
X   0x1f, 0x00, 0xff, 0xff, 0xff, 0x01, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff,
X   0x0f, 0x00, 0xf8, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0xfb, 0x00, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x17, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0xff, 0xff, 0xff, 0xff,
X   0xff, 0xff, 0xff, 0xff, 0xff, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x80, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
X   0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xff, 0xff,
X   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x20, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x40, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
X   0xff, 0x3f, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x80,
X   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x40, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0xff, 0xff, 0xff, 0x07, 0x80,
X   0xff, 0xff, 0xff, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x20, 0x00, 0xff, 0xff, 0x7f, 0x00, 0x00, 0xf8, 0xff, 0xff, 0x0f, 0x80,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0xfe, 0xff, 0x1f,
X   0x80, 0x1c, 0xc0, 0xff, 0xff, 0x0f, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x10, 0x00, 0xfc, 0xff, 0x07, 0xc0, 0x24, 0x00, 0xff, 0xff,
X   0x07, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0xfc,
X   0xff, 0x03, 0x80, 0x20, 0x00, 0xfe, 0xff, 0x03, 0x00, 0x02, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0xfc, 0xff, 0x00, 0x80, 0x10, 0x00,
X   0xf8, 0xff, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
X   0x00, 0xf8, 0x3f, 0x00, 0x80, 0x08, 0x00, 0xf0, 0xff, 0x01, 0x00, 0x02,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0xf8, 0x1f, 0x42, 0x80,
X   0x04, 0x00, 0xc0, 0xff, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x04, 0x00, 0xf8, 0x0f, 0x63, 0xc0, 0x3d, 0x00, 0x81, 0xff, 0x10,
X   0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x80, 0xf8, 0x07,
X   0x42, 0x00, 0x00, 0x80, 0x01, 0xff, 0x18, 0x00, 0x04, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x02, 0x80, 0xf1, 0x07, 0x42, 0x00, 0x00, 0x00, 0x01,
X   0xff, 0x0c, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
X   0xf7, 0x03, 0x42, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x07, 0x00, 0x08, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xfc, 0x03, 0x42, 0x00, 0x00,
X   0x00, 0x01, 0xfc, 0x43, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x01, 0x00, 0xf8, 0x01, 0xe7, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x60, 0x00,
X   0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x20, 0xf8, 0x00, 0x00,
X   0x00, 0x00, 0x80, 0x03, 0xf8, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x01, 0x60, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0,
X   0x18, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x78,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0e, 0x01, 0x10, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0xe0, 0x83, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
X   0x08, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x81, 0x00, 0x18,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x18, 0x3c, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0xe0, 0x61, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x01, 0x30, 0x1c, 0xe2, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc3, 0x33,
X   0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x1c, 0x13,
X   0x01, 0x00, 0x00, 0x00, 0x80, 0xc4, 0x1f, 0x04, 0x1c, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x01, 0x82, 0x1f, 0x12, 0x01, 0x00, 0x00, 0x00, 0x00,
X   0xc4, 0x07, 0x06, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x06,
X   0x1e, 0x12, 0x01, 0x00, 0x00, 0x00, 0x00, 0xc2, 0x07, 0x03, 0x1c, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x0e, 0x12, 0x01, 0x00, 0x00,
X   0x00, 0x00, 0x81, 0xcf, 0x01, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x07, 0x18, 0x0e, 0x12, 0x01, 0x00, 0x00, 0x00, 0x80, 0x80, 0xdf, 0x00,
X   0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x60, 0x0f, 0xe7, 0x00,
X   0x00, 0x00, 0x00, 0x80, 0x87, 0x7f, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x1f, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
X   0x7f, 0xc0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe3, 0x0f,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x1f, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x80, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
X   0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x1f,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff,
X   0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x80, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
X   0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x1f, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x03, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x9e, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0xff, 0xff, 0x4f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91, 0xff, 0xff,
X   0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x04, 0x00,
X   0x00, 0x07, 0x00, 0x00, 0x90, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0xff, 0xff, 0x8f, 0x07, 0x00, 0x00, 0x07, 0x00, 0x00, 0x8c,
X   0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f,
X   0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x90, 0xff, 0xff, 0x1f, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x04, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x91, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
X   0xff, 0x8f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9e, 0xff, 0xff, 0x1f,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff,
X   0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x80, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
X   0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x1f, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x80, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff,
X   0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
X   0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x1f, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x80, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
X   0xff, 0x0f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xff, 0xff, 0x1f,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x08, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x85, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0xff, 0xff, 0x8f, 0x08, 0x00, 0x00, 0x00, 0x00, 0x80, 0x84, 0xff,
X   0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x07,
X   0x00, 0x00, 0x00, 0x00, 0x40, 0x84, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x08, 0x00, 0x00, 0x00, 0x00, 0xc0,
X   0x8f, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
X   0x8f, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0xff, 0xff, 0x1f, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x07, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x84, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0xff, 0xff,
X   0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
X   0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1f,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0x1f, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0xe0, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
X   0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0x1f,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0xff, 0xff, 0x7f, 0x80, 0x1f, 0x00, 0x00, 0xc0, 0x07, 0xf0, 0x1f,
X   0xf0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfc, 0xff, 0x00,
X   0x08, 0x00, 0x00, 0x40, 0x00, 0xf8, 0x17, 0xc0, 0x1f, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x2f, 0x8c, 0xff, 0x01, 0x04, 0x00, 0x00, 0xc0, 0x03,
X   0xfc, 0x13, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x08,
X   0xff, 0x03, 0x02, 0x00, 0x00, 0x00, 0x06, 0xfe, 0x31, 0x00, 0x1e, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x08, 0xfe, 0x07, 0x02, 0x00, 0x00,
X   0x40, 0x04, 0xff, 0x21, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x23, 0x08, 0xfe, 0x0f, 0x02, 0x00, 0x00, 0x40, 0x04, 0xff, 0x61, 0x00,
X   0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x08, 0xf6, 0x1f, 0x02,
X   0x00, 0x0f, 0x80, 0x83, 0xff, 0xc2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x21, 0x08, 0xe6, 0x3f, 0x00, 0x80, 0x00, 0x00, 0xc0, 0x7f,
X   0x86, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x08, 0xc6,
X   0x7f, 0x00, 0x80, 0x00, 0x00, 0xf0, 0x7f, 0x0c, 0x01, 0x10, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x21, 0x0c, 0xc2, 0xff, 0x00, 0x80, 0x07, 0x00,
X   0xf8, 0x7f, 0x08, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
X   0x04, 0xc2, 0xff, 0x01, 0x80, 0x08, 0x00, 0xfc, 0x7f, 0x18, 0x00, 0x10,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0xc3, 0xff, 0x07, 0x80,
X   0x08, 0x00, 0xff, 0x7f, 0x30, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x01, 0x80, 0xc1, 0xff, 0x1f, 0x00, 0x07, 0xc0, 0xff, 0xdf, 0x00,
X   0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0xc0, 0xff,
X   0xff, 0x00, 0x00, 0xf8, 0xff, 0x9f, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x01, 0x40, 0x60, 0xff, 0xff, 0x0f, 0x80, 0xff, 0xff,
X   0x9f, 0x01, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
X   0x30, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x03, 0x00, 0x10, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0xff, 0xff, 0xff, 0xff,
X   0xff, 0xff, 0x3f, 0x06, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x01, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2f, 0x00, 0x00,
X   0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xfe, 0xff,
X   0xff, 0xff, 0xff, 0xff, 0x6f, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x01, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x4f,
X   0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
X   0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0x00, 0x00, 0x10, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff,
X   0xff, 0x0f, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
X   0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x10,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xfe, 0xff, 0xff,
X   0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x01, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00,
X   0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xfe,
X   0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff,
X   0x1f, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
X   0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x10, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff,
X   0xff, 0xff, 0x1f, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x03, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00,
X   0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0xff, 0xff,
X   0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0xf0, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f,
X   0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff,
X   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
END_OF_FILE
if test 35760 -ne `wc -c <'catback.xbm'`; then
    echo shar: \"'catback.xbm'\" unpacked with wrong size!
fi
# end of 'catback.xbm'
fi
if test -f 'patchlevel.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'patchlevel.h'\"
else
echo shar: Extracting \"'patchlevel.h'\" \(21 characters\)
sed "s/^X//" >'patchlevel.h' <<'END_OF_FILE'
X#define PATCHLEVEL 0
END_OF_FILE
if test 21 -ne `wc -c <'patchlevel.h'`; then
    echo shar: \"'patchlevel.h'\" unpacked with wrong size!
fi
# end of 'patchlevel.h'
fi
if test -f 'xclock.man' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'xclock.man'\"
else
echo shar: Extracting \"'xclock.man'\" \(8257 characters\)
sed "s/^X//" >'xclock.man' <<'END_OF_FILE'
X.TH XCLOCK 1 "Release 4" "X Version 11"
X.SH NAME
Xxclock - analog / digital / cat clock for X
X.SH SYNOPSIS
X.ta 8n
X\fBxclock\fP	[-\fItoolkitoption\fP ...] 
X.br
X	[-mode \fIanalog | digital | cat\fP]
X.br
X	[-alarm] [-bell] [-chime] [-file \fIfilename\fP] 
X.br
X	[-hd \fIcolor\fP] [-hl \fIcolor\fP] 
X.br
X	[-catcolor \fIcolor\fP] [-detailcolor \fIcolor\fP] [-tiecolor \fIcolor\fP]
X.br
X	[-update \fIseconds\fP] [-padding \fInumber\fP]
X.br
X	[-period \fIseconds\fP] [-ntails \fInumber\fP] [-help] 
X.SH DESCRIPTION
XThe
X.I xclock 
Xprogram displays the time in analog, digital, or cat form.  The time is continuously
Xupdated at a frequency which may be specified by the user.  
X.SH OPTIONS
X.I Xclock
Xaccepts all of the standard X Toolkit command line options along with the 
Xadditional options listed below:
X.TP 8
X.B \-mode  \fImode\fP
XDetermines display mode. Modes are \fIanalog\fP, \fIdigital\fP, and \fIcat\fP.  Analog mode
Xdisplays a conventional 12 hour clock face with ``ticks''
Xfor each minute and stroke marks on each hour. Digital mode displays an
Xascii string corresponding to the time. Cat mode displays an image of
Xthe famous "Kit Cat (R)" plastic clock, complete with pendulum tail. 
XThe default is \fIanalog\fP.
X.TP 8
X.B \-alarm 
XTurns the alarm on.
XIf the alarm file exists and has valid alarm entries, a bell
Xis displayed in the clock window.
X.TP 8
X.B \-bell
XTurns the alarm bell on, sounding when an alarm is reached.
X.TP 8
X.B \-chime
XThis option indicates that the clock should chime 
Xonce on the half hour and twice on the hour.
X.TP 8
X.B \-file \fIalarmfile\fP
XSpecifies an alternate alarm file.
XThe default is \fI~/.Xclock\fP.
X.TP 8
X.B \-hd \fIcolor\fP
XThis option specifies the color of the hands on an analog clock.  The default
Xis \fIblack\fP.
X.TP 8
X.B \-hl \fIcolor\fP
XThis option specifies the color of the edges of the hands on an analog clock,
Xand is only useful on color displays.  The default is \fIblack\fP.
X.TP 8
X.B \-catcolor \fIcolor\fP
XFor cat mode -- determines the color of the cat's body.
XThe default color is \fIblack\fP.
X.TP 8
X.B \-detailcolor \fIcolor\fP
XFor cat mode -- determines the color of the cat's face, paws, and belly.
XThe default color is \fIwhite\fP.
X.TP 8
X.B \-tiecolor \fIcolor\fP
XFor cat mode -- determines the color of the cat's tie.
XThe default color is \fIwhite\fP.
X.TP 8
X.B \-update \fIseconds\fP
XThis option specifies the frequency in seconds at which \fIxclock\fP
Xshould update its display.  If the clock is obscured and then exposed,
Xit will be updated immediately.  A value of less than 30 seconds will enable a
Xsecond hand on an analog clock.  The default is \fI60\fP.
X.TP 8
X.B \-padding \fInumber\fP
XThis option specifies the width in pixels of the padding 
Xbetween the window border and clock text or picture.  The default is \fI10\fP
Xon a digital clock and \fI8\fP on an analog clock.
X.TP 8
X.B \-period \fIseconds\fP
XGives the period in seconds of the alarm bell (default is \fI60\fP).
X.TP 8
X.B \-ntails \fInumber\fP
XIn cat mode, determines the number of tails per ``sweep'', which 
Xaffects the smoothness of the swinging pendulum tail. The default
Xis \fI16\fP.
X.TP 8
X.B \-help
XThis option indicates that a brief summary of the allowed options should be
Xprinted on the standard error.
X
X.SH X DEFAULTS
XThis program understands all of the usual Xt resources as well as the following:
X.PP
X.TP 8
X.B mode (\fPclass\fB String)
XSpecifies the display mode -- \fIanalog\fP, \fIdigital\fP, or \fIcat\fP.  The
Xdefault is \fIanalog\fP.
X.TP 8
X.B alarm (\fPclass\fB Boolean)
XSpecifies whether or not the alarm should be set on startup.  The
Xdefault is \fIoff\fP.
X.TP 8
X.B bell (\fPclass\fB Boolean)
XSpecifies whether or not a bell should be rung when the alarm goes off.
XThe default is \fIoff\fP.
X.TP 8
X.B chime (\fPclass\fB Boolean)
XSpecifies whether or not a bell should be rung on the hour and half hour.
XThe default is \fIoff\fP.
X.TP 8
X.B hands (\fPclass\fB Foreground)
XSpecifies the color of the insides of the clock's hands. The default 
Xdepends on whether
X\fIreverseVideo\fP is specified.  If \fIreverseVideo\fP is specified
Xthe default is \fIwhite\fP, otherwise the default is \fIblack\fP.
X.TP 8
X.B highlight (\fPclass\fB Foreground)
XSpecifies the color used to highlight the clock's hands. The default
Xdepends on whether \fIreverseVideo\fP is specified.  
XIf \fIreverseVideo\fP is specified
Xthe default is \fIwhite\fP, otherwise the default is \fIblack\fP.
X.TP 8
X.B catColor (\fPclass\fB Foreground)
XSpecifies the color used for the cat's body.. The default
Xdepends on whether
X\fIreverseVideo\fP is specified.  If \fIreverseVideo\fP is specified
Xthe default is \fIwhite\fP, otherwise the default is \fIblack\fP.
X.TP 8
X.B detailColor (\fPclass\fB Foreground)
XSpecifies the color used for the cat's belly, eyes, and paws. The default
Xdepends on whether
X\fIreverseVideo\fP is specified.  If \fIreverseVideo\fP is specified
Xthe default is \fIblack\fP, otherwise the default is \fIwhite\fP.
X.TP 8
X.B tieColor (\fPclass\fB Foreground)
XSpecifies the color used for the cat's bow tie. The default
Xdepends on whether
X\fIreverseVideo\fP is specified.  If \fIreverseVideo\fP is specified
Xthe default is \fIblack\fP, otherwise the default is \fIwhite\fP.
X.TP 8
X.B update (\fPclass\fB Interval)
XSpecifies the frequency in seconds at which the time should be redisplayed.
X.TP 8
X.B padding (\fPclass\fB Margin)
XSpecifies the amount of internal padding in pixels to be used.  The default is
X\fI8\fP.
X.TP 8
X.B period (\fPclass\fB Interval)
XSpecifies the period of the alarm bell. The default is \fI60\fP.
X.TP 8
X.B nTails (\fPclass\fB Cardinal)
XSpecifies the number of tails per sweep.  The default is \fI16\fP.
X
X.SH MENU
XA popup menu is displayed when any mouse button is pressed and held
Xwithin the
X.I xclock
Xwindow.
XSelecting and releasing the button over the ``Alarm Set'', ``Alarm Bell''
Xor ``Chime'' toggles their state.
X.PP
XThe middle band of menu items are commands to perform (see ALARM FUNCTION
Xbelow).
XThe ``Exit'' menu item causes
X.I xclock
Xto exit.
X.SH ALARM FUNCTION
X.I Xclock
Xreads the alarm file to obtain the nearest alarm.
XThe alarm file is consulted periodically to see if it has been changed and
Xthere is a more recent alarm, but to guarantee that the alarm file is read,
Xuse the menu item ``Reread Alarm File''.
X.PP
XTo make changes to the alarm file, select menu item ``Edit Alarm File''.
XThe editor specified by the EDITOR environment variable will be run
Xon the alarm file.  The default editor is vi.  Emacs users who use GNU
XEmacs will have that editor appear in its own window, while "other"
Xemacs versions will appear in an xterm window.
X
X
X.PP
XAfter an alarm has been rung, select either the ``Acknowledge Alarm''
Xor the ``Reread Alarm File'' menu items.
XThis will terminate the current alarm and cause the next alarm in sequence
Xto be activated.
X.PP
XEach line in the file is an alarm composed of up to 4 fields.
XThe first fields must be space separated, and the last field
X(the message field) must be separated from the previous fields with tabs.
XThe first field is optional and gives the day of the week for the alarm
Xto happen (no day of week means a daily alarm).
X.PP
XThe next field is the time field and must contain a colon separating
Xthe hour from the minute.
XThe third (optional) field may contain AM or PM (any case) specifying
Xnormal time.
XIf no AM/PM indication is given, 24-hour time is assumed.
X.PP
XThe final field is a message that is displayed when the alarm goes off.
XThe text is scrolled from right to left within the
X.I xclock
Xwindow.
X.SH EXAMPLES
X.ta 2i
X  Mon. 1:30 pm	Staff meeting
X  Thur. 15:30	Management meeting
X  11:55 am	Time for lunch
X.fi
X.sp
X.SH ENVIRONMENT
X.PP
X.TP 8
X.B DISPLAY
Xto get the default host and display number.
X.TP 8
X.B EDITOR
Xto specify the editor to use in modifying the alarm file.
X.SH "SEE ALSO"
XX(1), xrdb(1), time(3C)
X.SH BUGS
X.I Xclock
Xbelieves the system clock.
X.SH COPYRIGHT
XCopyright 1988, Massachusetts Institute of Technology.
X.br
XSee \fIX(1)\fP for a full statement of rights and permissions.
X.SH AUTHORS
XTony Della Fera (MIT-Athena, DEC)
X.br
XDave Mankins (MIT-Athena, BBN)
X.br
XEd Moy (UC Berkeley)
X.br
XDeanna Hohn (DEC) created the cat pixmaps.
X.br
XPhilip Schneider (DEC) created the pendulum tails and eyes, and ported
Xthe program to Motif 1.1.
X
X
END_OF_FILE
if test 8257 -ne `wc -c <'xclock.man'`; then
    echo shar: \"'xclock.man'\" unpacked with wrong size!
fi
# end of 'xclock.man'
fi
echo shar: End of archive 3 \(of 4\).
cp /dev/null ark3isdone
MISSING=""
for I in 1 2 3 4 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 4 archives.
    rm -f ark[1-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
-- 
Molecular Simulations, Inc.             mail: dcmartin@msi.com
796 N. Pastoria Avenue                  uucp: uunet!dcmartin
Sunnyvale, California 94086             at&t: 408/522-9236
