Path: uunet!cs.utexas.edu!swrinde!mips!msi!dcmartin
From: envbvs@bea.lbl.gov (Brian V. Smith)
Newsgroups: comp.sources.x
Subject: v16i017: Xfig 2.1.3, Part12/25
Message-ID: <1992Feb4.150008.905@msi.com>
Date: 4 Feb 92 15:00:08 GMT
References: <csx-16i006-xfig-2.1.3@uunet.UU.NET>
Sender: dcmartin@msi.com (David C. Martin - Moderator)
Organization: Molecular Simulations, Inc.
Lines: 1485
Approved: dcmartin@msi.com
Originator: dcmartin@fascet

Submitted-by: envbvs@bea.lbl.gov (Brian V. Smith)
Posting-number: Volume 16, Issue 17
Archive-name: xfig-2.1.3/part12

# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# If this archive is complete, you will see the following message at the end:
#		"End of archive 12 (of 25)."
# Contents:  Examples/watch.fig.uu e_update.c u_redraw.c w_icons.c.Z.uu
# Wrapped by dcmartin@fascet on Tue Feb  4 06:42:29 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'Examples/watch.fig.uu' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Examples/watch.fig.uu'\"
else
echo shar: Extracting \"'Examples/watch.fig.uu'\" \(13250 characters\)
sed "s/^X//" >'Examples/watch.fig.uu' <<'END_OF_FILE'
Xbegin 664 watch.fig
XM(T9)1R`R+C`*.#`@,@HU(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P(#`@,3DT
XM+C`P,"`T,S8N,#`P(#(P-B`T,S$@,C`W(#0S-B`R,#8@-#0Q"C4@,2`P(#$@
XM,"`P(#`@,"`P+C`P,"`P(#`@,"`Q.3`N-3`P(#0S-BXP,#`@,C`X(#0S,"`R
XM,#D@-#,V(#(P."`T-#(*-2`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,"`P(#$X
XM-RXP,#`@-#,V+C`P,"`R,3(@-#(Y(#(Q,R`T,S8@,C$R(#0T,PHU(#$@,"`Q
XM(#`@,"`P(#`@,"XP,#`@,2`P(#`@,C`U+C`P,"`T,S8N,#`P(#$Y,R`T,S$@
XM,3DR(#0S-B`Q.3,@-#0Q"C4@,2`P(#$@,"`P(#`@,"`P+C`P,"`Q(#`@,"`R
XM,#<N-3`P(#0S-BXP,#`@,3DP(#0S,"`Q.#D@-#,V(#$Y,"`T-#(*-2`Q(#`@
XM,2`P(#`@,"`P(#`N,#`P(#$@,"`P(#(Q,2XP,#`@-#,V+C`P,"`Q.#<@-#(Y
XM(#$X-B`T,S8@,3@W(#0T,PHQ(#0@,"`Q(#`@,"`P(#`@,"XP,#`@,2`P+C`P
XM,"`R-#`@,S,Y(#@@."`R,S,@,S,Y(#(T."`S,SD*,2`T(#`@,R`P(#`@,"`R
XM,2`P+C`P,"`Q(#`N,#`P(#(T,"`S,SD@,R`S(#(S."`S,SD@,C0S(#,S.0HQ
XM(#,@,"`Q(#`@,"`P(#(Q(#`N,#`P(#$@,"XP,#`@,3DX(#0T,"`R(#(@,3DX
XM(#0T,"`R,#`@-#0P"C$@,R`P(#$@,"`P(#`@,C$@,"XP,#`@,2`P+C`P,"`R
XM-3(@-#0R(#(@,B`R-3(@-#0R(#(U-"`T-#(*,B`S(#`@,2`P(#`@,"`R,2`P
XM+C`P,"`P(#`*"2`R,S4@,S(X(#(R,B`S,#4@,C(S(#,P,R`R,C4@,S`S(#(S
XM-2`S,C@@.3DY.2`Y.3DY"C(@-"`P(#$@,"`P(#`@,"`P+C`P,"`U(#`@,`H)
XM(#0W.2`R-3D@-#<Y(#(W.2`T.3$@,C<Y(#0Y,2`R-3D@-#<Y(#(U.2`Y.3DY
XM(#DY.3D*,B`T(#`@,2`P(#`@,"`P(#`N,#`P(#4@,"`P"@D@-#<Y(#0Q.2`T
XM-SD@-#,Y(#0Y,2`T,SD@-#DQ(#0Q.2`T-SD@-#$Y(#DY.3D@.3DY.0HR(#0@
XM,"`Q(#`@,"`P(#`@,"XP,#`@-2`P(#`*"2`Q-#<@-#$Y(#$T-R`T,SD@,34Y
XM(#0S.2`Q-3D@-#$Y(#$T-R`T,3D@.3DY.2`Y.3DY"C(@,2`P(#,@,"`P(#`@
XM,"`P+C`P,"`P(#`*"2`S-30@,S@T(#,U-"`S.#D@.3DY.2`Y.3DY"C(@,2`P
XM(#,@,"`P(#`@,"`P+C`P,"`P(#`*"2`S-30@,S4T(#,U-"`S-3D@.3DY.2`Y
XM.3DY"C(@,R`P(#$@,"`P(#`@,C$@,"XP,#`@,"`P"@D@-#0V(#,W-R`T-#0@
XM,S@P(#0T-"`T,#(@-#0V(#0P-2`T-#@@-#`R(#0T."`S.#`@-#0V(#,W-R`Y
XM.3DY(#DY.3D*,B`S(#`@,2`P(#`@,"`R,2`P+C`P,"`P(#`*"2`T-#8@,S0U
XM(#0T-"`S-#@@-#0T(#,W,"`T-#8@,S<S(#0T."`S-S`@-#0X(#,T."`T-#8@
XM,S0U(#DY.3D@.3DY.0HR(#,@,"`Q(#`@,"`P(#(Q(#`N,#`P(#`@,`H)(#0T
XM-B`S-S4@-#0S(#,W,R`T,C$@,S<S(#0Q."`S-S4@-#(Q(#,W-R`T-#,@,S<W
XM(#0T-B`S-S4@.3DY.2`Y.3DY"C(@,R`P(#$@,"`P(#`@,C$@,"XP,#`@,"`P
XM"@D@,SDX(#0P-2`S.34@-#`S(#,W,R`T,#,@,S<P(#0P-2`S-S,@-#`W(#,Y
XM-2`T,#<@,SDX(#0P-2`Y.3DY(#DY.3D*,B`S(#`@,2`P(#`@,"`R,2`P+C`P
XM,"`P(#`*"2`S-CD@,S<V(#,V-R`S-SD@,S8W(#0P,2`S-CD@-#`T(#,W,2`T
XM,#$@,S<Q(#,W.2`S-CD@,S<V(#DY.3D@.3DY.0HR(#,@,"`Q(#`@,"`P(#(Q
XM(#`N,#`P(#`@,`H)(#,Y.2`S-#4@,SDW(#,T."`S.3<@,S<P(#,Y.2`S-S,@
XM-#`Q(#,W,"`T,#$@,S0X(#,Y.2`S-#4@.3DY.2`Y.3DY"C(@,R`P(#$@,"`P
XM(#`@,C$@,"XP,#`@,"`P"@D@,SDW(#,T-"`S.30@,S0R(#,W,B`S-#(@,S8Y
XM(#,T-"`S-S(@,S0V(#,Y-"`S-#8@,SDW(#,T-"`Y.3DY(#DY.3D*,B`S(#`@
XM,2`P(#`@,"`R,2`P+C`P,"`P(#`*"2`S-#0@,S<V(#,T,B`S-SD@,S0R(#0P
XM,2`S-#0@-#`T(#,T-B`T,#$@,S0V(#,W.2`S-#0@,S<V(#DY.3D@.3DY.0HR
XM(#,@,"`Q(#`@,"`P(#(Q(#`N,#`P(#`@,`H)(#,T-"`S-#0@,S0R(#,T-R`S
XM-#(@,S8Y(#,T-"`S-S(@,S0V(#,V.2`S-#8@,S0W(#,T-"`S-#0@.3DY.2`Y
XM.3DY"C(@,R`P(#$@,"`P(#`@,C$@,"XP,#`@,"`P"@D@,SDW(#,W-"`S.30@
XM,S<R(#,W,B`S-S(@,S8Y(#,W-"`S-S(@,S<V(#,Y-"`S-S8@,SDW(#,W-"`Y
XM.3DY(#DY.3D*,B`S(#`@,2`P(#`@,"`R,2`P+C`P,"`P(#`*"2`S,30@,S<V
XM(#,Q,B`S-SD@,S$R(#0P,2`S,30@-#`T(#,Q-B`T,#$@,S$V(#,W.2`S,30@
XM,S<V(#DY.3D@.3DY.0HR(#,@,"`Q(#`@,"`P(#(Q(#`N,#`P(#`@,`H)(#,Q
XM-"`S-#0@,S$R(#,T-R`S,3(@,S8Y(#,Q-"`S-S(@,S$V(#,V.2`S,38@,S0W
XM(#,Q-"`S-#0@.3DY.2`Y.3DY"C(@,R`P(#$@,"`P(#`@,C$@,"XP,#`@,"`P
XM"@D@-#$X(#,T-2`T,38@,S0X(#0Q-B`S-S`@-#$X(#,W,R`T,C`@,S<P(#0R
XM,"`S-#@@-#$X(#,T-2`Y.3DY(#DY.3D*,B`R(#`@,2`P(#`@,"`P(#`N,#`P
XM(#`@,`H)(#$U,2`R-3@@,34Q(#(W.2`Q-3D@,C<Y(#$U.2`R-3@@,34Q(#(U
XM."`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`R,2`P+C`P,"`P(#`*"2`Q.30@
XM,S,Y(#(P.2`S,SD@.3DY.2`Y.3DY"C(@,2`P(#$@,"`P(#`@,C$@,"XP,#`@
XM,"`P"@D@,C@Y(#,S.2`R-S0@,S,Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P
XM(#`@,"XP,#`@,"`P"@D@,C,Y(#,X.2`R,SD@-#`T(#DY.3D@.3DY.0HR(#$@
XM,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,C,Y(#(V-"`R,SD@,C<Y(#DY.3D@
XM.3DY.0HR(#,@,"`Q(#`@,"`P(#(Q(#`N,#`P(#`@,`H)(#(T."`S-#D@,C<S
XM(#,W-R`R-S(@,S@P(#(V.2`S-SD@,C0X(#,T.2`Y.3DY(#DY.3D*,B`Q(#`@
XM,B`P(#`@,"`P(#`N,#`P(#`@,`H)(#0R,"`S,#@@-#,S(#,P."`Y.3DY(#DY
XM.3D*,B`Q(#`@,B`P(#`@,"`P(#`N,#`P(#`@,`H)(#0R,2`R.#8@-#,U(#(X
XM-B`Y.3DY(#DY.3D*,B`Q(#`@,B`P(#`@,"`P(#`N,#`P(#`@,`H)(#0R,R`R
XM-C,@-#,V(#(V,R`Y.3DY(#DY.3D*,B`Q(#`@,B`P(#`@,"`P(#`N,#`P(#`@
XM,`H)(#0S-R`R.#<@-#,U(#,P-R`Y.3DY(#DY.3D*,B`Q(#`@,B`P(#`@,"`P
XM(#`N,#`P(#`@,`H)(#0S.2`R-C0@-#,W(#(X-"`Y.3DY(#DY.3D*,B`Q(#`@
XM,B`P(#`@,"`P(#`N,#`P(#`@,`H)(#0Q.2`R.#<@-#$W(#,P-R`Y.3DY(#DY
XM.3D*,B`Q(#`@,B`P(#`@,"`P(#`N,#`P(#`@,`H)(#0R,2`R-C0@-#$Y(#(X
XM-"`Y.3DY(#DY.3D*,B`Q(#`@,B`P(#`@,"`P(#`N,#`P(#`@,`H)(#0P-"`R
XM.#<@-#`R(#,P-R`Y.3DY(#DY.3D*,B`Q(#`@,B`P(#`@,"`P(#`N,#`P(#`@
XM,`H)(#0P-B`R-C0@-#`T(#(X-"`Y.3DY(#DY.3D*,B`T(#`@,2`P(#`@,"`P
XM(#`N,#`P(#<@,"`P"@D@,CDY(#(U-"`R.3D@-#$T(#0U-"`T,30@-#4T(#(U
XM-"`R.3D@,C4T(#DY.3D@.3DY.0HR(#0@,"`Q(#`@,"`P(#`@,"XP,#`@-R`P
XM(#`*"2`Q.#0@,C4T(#$X-"`T,30@,CDY(#0Q-"`R.3D@,C4T(#$X-"`R-30@
XM.3DY.2`Y.3DY"C(@,2`P(#$@,"`P(#`@,"`P+C`P,"`P(#`*"2`R-SD@-#$Y
XM(#$W.2`T,3D@.3DY.2`Y.3DY"C(@,B`P(#$@,"`P(#`@,"`P+C`P,"`P(#`*
XM"2`S,C0@-#$Y(#(W.2`T,3D@,C<Y(#0U-"`S,C0@-#4T(#,R-"`T,3D@.3DY
XM.2`Y.3DY"C(@,B`P(#$@,"`P(#`@,"`P+C`P,"`P(#`*"2`S,C0@-#$Y(#,V
XM.2`T,3D@,S8Y(#0U-"`S,C0@-#4T(#,R-"`T,3D@.3DY.2`Y.3DY"C(@,B`P
XM(#$@,"`P(#`@,"`P+C`P,"`P(#`*"2`T,30@-#$Y(#,V.2`T,3D@,S8Y(#0U
XM-"`T,30@-#4T(#0Q-"`T,3D@.3DY.2`Y.3DY"C(@,2`P(#$@,"`P(#`@,"`P
XM+C`P,"`P(#`*"2`T-3D@-#$Y(#0Q-"`T,3D@.3DY.2`Y.3DY"C(@-"`P(#(@
XM,"`P(#`@,"`P+C`P,"`X(#`@,`H)(#$W.2`R-#D@,3<Y(#0U-"`T-3D@-#4T
XM(#0U.2`R-#D@,3<Y(#(T.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N
XM,#`P(#`@,`H)(#(U-"`R,SD@-#,Y(#(S.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P
XM(#`@,"`P(#`N,#`P(#`@,`H)(#(U-"`R,S0@-#,Y(#(S-"`Y.3DY(#DY.3D*
XM,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#(U-"`R,CD@-#,Y(#(R.2`Y
XM.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#(U-"`R,C0@
XM-#,Y(#(R-"`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)
XM(#(U-"`R,3D@-#,Y(#(Q.2`Y.3DY(#DY.3D*,B`S(#`@,B`P(#`@,"`P(#`N
XM,#`P(#`@,`H)(#$X.2`R,30@,3<Y(#(S-"`Q.#0@,C0T(#0U-"`R-#0@-#4Y
XM(#(S-"`T-#D@,C$T(#$X.2`R,30@.3DY.2`Y.3DY"C(@,R`P(#(@,"`P(#`@
XM,"`P+C`P,"`P(#`*"2`Q.#0@,C`Y(#$V.2`R,SD@,38Y(#0U.2`Q.#0@-#@Y
XM(#0U-"`T.#D@-#8Y(#0U.2`T-CD@,C,Y(#0U-"`R,#D@,3@T(#(P.2`Y.3DY
XM(#DY.3D*,B`S(#`@,R`P(#`@,"`P(#`N,#`P(#`@,`H)(#$W.2`Q.3D@,34Y
XM(#(S.2`Q-3D@-#4Y(#$W.2`T.3D@-#4Y(#0Y.2`T-SD@-#4Y(#0W.2`R,SD@
XM-#4Y(#$Y.2`Q-SD@,3DY(#DY.3D@.3DY.0HR(#,@,"`Q(#`@,"`P(#0@,"XP
XM,#`@,"`P"@D@,3@Y(#$Y.2`Q.#D@,3@T(#(V.2`Q.#0@,C8Y(#$V-"`R.#D@
XM,38T(#(X.2`Q.#0@,S`Y(#$X-"`S,#D@,38T(#,R.2`Q-C0@,S(Y(#$X-"`S
XM-#D@,3@T(#,T.2`Q-C0@,S8Y(#$V-"`S-CD@,3@T(#0T.2`Q.#0@-#0Y(#$Y
XM.2`Q.#D@,3DY(#DY.3D@.3DY.0HR(#,@,"`Q(#`@,"`P(#0@,"XP,#`@,"`P
XM"@D@,3DT(#$W.2`R-CD@,3<Y(#(V.2`Q-#0@,C`T(#$T-"`Q.30@,3<Y(#DY
XM.3D@.3DY.0HR(#,@,"`Q(#`@,"`P(#0@,"XP,#`@,"`P"@D@,C8Y(#$S.2`R
XM-CD@,3`T(#(Q-B`Q,#0@,C`V(#$S.2`R-CD@,3,Y(#DY.3D@.3DY.0HR(#,@
XM,"`Q(#`@,"`P(#0@,"XP,#`@,"`P"@D@,C8Y(#DY(#(V.2`V-"`R,C,@-C0@
XM,C$W(#DY(#(V.2`Y.2`Y.3DY(#DY.3D*,B`S(#`@,2`P(#`@,"`T(#`N,#`P
XM(#`@,`H)(#(R-"`U.2`R-CD@-3D@,C8Y(#(T(#(R-R`R-"`R,C0@-3D@.3DY
XM.2`Y.3DY"C(@,B`P(#$@,"`P(#`@-"`P+C`P,"`P(#`*"2`R-CD@,3(T(#(V
XM.2`Q-C0@,C@Y(#$V-"`R.#D@,3(T(#(V.2`Q,C0@.3DY.2`Y.3DY"C(@,B`P
XM(#$@,"`P(#`@-"`P+C`P,"`P(#`*"2`R.#D@,30T(#(X.2`Q.#0@,S`Y(#$X
XM-"`S,#D@,30T(#(X.2`Q-#0@.3DY.2`Y.3DY"C(@,B`P(#$@,"`P(#`@-"`P
XM+C`P,"`P(#`*"2`S-#D@-"`S-#D@-#0@,S8Y(#0T(#,V.2`T(#,T.2`T(#DY
XM.3D@.3DY.0HR(#(@,"`Q(#`@,"`P(#0@,"XP,#`@,"`P"@D@,S`Y(#$R-"`S
XM,#D@,38T(#,R.2`Q-C0@,S(Y(#$R-"`S,#D@,3(T(#DY.3D@.3DY.0HR(#(@
XM,"`Q(#`@,"`P(#0@,"XP,#`@,"`P"@D@,C@Y(#$P-"`R.#D@,30T(#,P.2`Q
XM-#0@,S`Y(#$P-"`R.#D@,3`T(#DY.3D@.3DY.0HR(#(@,"`Q(#`@,"`P(#0@
XM,"XP,#`@,"`P"@D@,C8Y(#@T(#(V.2`Q,C0@,C@Y(#$R-"`R.#D@.#0@,C8Y
XM(#@T(#DY.3D@.3DY.0HR(#(@,"`Q(#`@,"`P(#0@,"XP,#`@,"`P"@D@,C@Y
XM(#8T(#(X.2`Q,#0@,S`Y(#$P-"`S,#D@-C0@,C@Y(#8T(#DY.3D@.3DY.0HR
XM(#(@,"`Q(#`@,"`P(#0@,"XP,#`@,"`P"@D@,S`Y(#@T(#,P.2`Q,C0@,S(Y
XM(#$R-"`S,CD@.#0@,S`Y(#@T(#DY.3D@.3DY.0HR(#(@,"`Q(#`@,"`P(#0@
XM,"XP,#`@,"`P"@D@,S(Y(#$T-"`S,CD@,3@T(#,T.2`Q.#0@,S0Y(#$T-"`S
XM,CD@,30T(#DY.3D@.3DY.0HR(#(@,"`Q(#`@,"`P(#0@,"XP,#`@,"`P"@D@
XM,S(Y(#$P-"`S,CD@,30T(#,T.2`Q-#0@,S0Y(#$P-"`S,CD@,3`T(#DY.3D@
XM.3DY.0HR(#(@,"`Q(#`@,"`P(#0@,"XP,#`@,"`P"@D@,S0Y(#$R-"`S-#D@
XM,38T(#,V.2`Q-C0@,S8Y(#$R-"`S-#D@,3(T(#DY.3D@.3DY.0HR(#(@,"`Q
XM(#`@,"`P(#0@,"XP,#`@,"`P"@D@,S0Y(#@T(#,T.2`Q,C0@,S8Y(#$R-"`S
XM-CD@.#0@,S0Y(#@T(#DY.3D@.3DY.0HR(#(@,"`Q(#`@,"`P(#0@,"XP,#`@
XM,"`P"@D@,S(Y(#8T(#,R.2`Q,#0@,S0Y(#$P-"`S-#D@-C0@,S(Y(#8T(#DY
XM.3D@.3DY.0HR(#(@,"`Q(#`@,"`P(#0@,"XP,#`@,"`P"@D@,S`Y(#0T(#,P
XM.2`X-"`S,CD@.#0@,S(Y(#0T(#,P.2`T-"`Y.3DY(#DY.3D*,B`R(#`@,2`P
XM(#`@,"`T(#`N,#`P(#`@,`H)(#(V.2`T-"`R-CD@.#0@,C@Y(#@T(#(X.2`T
XM-"`R-CD@-#0@.3DY.2`Y.3DY"C(@,B`P(#$@,"`P(#`@-"`P+C`P,"`P(#`*
XM"2`R.#D@,C0@,C@Y(#8T(#,P.2`V-"`S,#D@,C0@,C@Y(#(T(#DY.3D@.3DY
XM.0HR(#(@,"`Q(#`@,"`P(#0@,"XP,#`@,"`P"@D@,C8Y(#0@,C8Y(#0T(#(X
XM.2`T-"`R.#D@-"`R-CD@-"`Y.3DY(#DY.3D*,B`R(#`@,2`P(#`@,"`T(#`N
XM,#`P(#`@,`H)(#,R.2`R-"`S,CD@-C0@,S0Y(#8T(#,T.2`R-"`S,CD@,C0@
XM.3DY.2`Y.3DY"C(@,B`P(#$@,"`P(#`@-"`P+C`P,"`P(#`*"2`S,#D@-"`S
XM,#D@-#0@,S(Y(#0T(#,R.2`T(#,P.2`T(#DY.3D@.3DY.0HR(#(@,"`Q(#`@
XM,"`P(#0@,"XP,#`@,"`P"@D@,S0Y(#0T(#,T.2`X-"`S-CD@.#0@,S8Y(#0T
XM(#,T.2`T-"`Y.3DY(#DY.3D*,B`S(#`@,2`P(#`@,"`T(#`N,#`P(#`@,`H)
XM(#0T-"`Q-SD@,S8Y(#$W.2`S-CD@,30T(#0S-"`Q-#0@-#0T(#$W.2`Y.3DY
XM(#DY.3D*,B`S(#`@,2`P(#`@,"`T(#`N,#`P(#`@,`H)(#,V.2`Q,SD@,S8Y
XM(#$P-"`T,C(@,3`T(#0S,B`Q,SD@,S8Y(#$S.2`Y.3DY(#DY.3D*,B`S(#`@
XM,2`P(#`@,"`T(#`N,#`P(#`@,`H)(#,V.2`Y.2`S-CD@-C0@-#$U(#8T(#0R
XM,2`Y.2`S-CD@.3D@.3DY.2`Y.3DY"C(@,R`P(#$@,"`P(#`@-"`P+C`P,"`P
XM(#`*"2`T,30@-3D@,S8Y(#4Y(#,V.2`R-"`T,3$@,C0@-#$T(#4Y(#DY.3D@
XM.3DY.0HR(#,@,"`Q(#`@,"`P(#0@,"XP,#`@,"`P"@D@-#$T(#8S.2`S-CD@
XM-C,Y(#,V.2`V-S0@-#$Q(#8W-"`T,30@-C,Y(#DY.3D@.3DY.0HR(#,@,"`Q
XM(#`@,"`P(#0@,"XP,#`@,"`P"@D@,S8Y(#4Y.2`S-CD@-C,T(#0Q-2`V,S0@
XM-#(Q(#4Y.2`S-CD@-3DY(#DY.3D@.3DY.0HR(#,@,"`Q(#`@,"`P(#0@,"XP
XM,#`@,"`P"@D@,S8Y(#4U.2`S-CD@-3DT(#0R,B`U.30@-#,R(#4U.2`S-CD@
XM-34Y(#DY.3D@.3DY.0HR(#,@,"`Q(#`@,"`P(#0@,"XP,#`@,"`P"@D@-#0T
XM(#4Q.2`S-CD@-3$Y(#,V.2`U-30@-#,T(#4U-"`T-#0@-3$Y(#DY.3D@.3DY
XM.0HR(#(@,"`Q(#`@,"`P(#0@,"XP,#`@,"`P"@D@,S0Y(#8U-"`S-#D@-C$T
XM(#,V.2`V,30@,S8Y(#8U-"`S-#D@-C4T(#DY.3D@.3DY.0HR(#(@,"`Q(#`@
XM,"`P(#0@,"XP,#`@,"`P"@D@,S`Y(#8Y-"`S,#D@-C4T(#,R.2`V-30@,S(Y
XM(#8Y-"`S,#D@-CDT(#DY.3D@.3DY.0HR(#(@,"`Q(#`@,"`P(#0@,"XP,#`@
XM,"`P"@D@,S(Y(#8W-"`S,CD@-C,T(#,T.2`V,S0@,S0Y(#8W-"`S,CD@-C<T
XM(#DY.3D@.3DY.0HR(#(@,"`Q(#`@,"`P(#0@,"XP,#`@,"`P"@D@,C8Y(#8Y
XM-"`R-CD@-C4T(#(X.2`V-30@,C@Y(#8Y-"`R-CD@-CDT(#DY.3D@.3DY.0HR
XM(#(@,"`Q(#`@,"`P(#0@,"XP,#`@,"`P"@D@,C@Y(#8W-"`R.#D@-C,T(#,P
XM.2`V,S0@,S`Y(#8W-"`R.#D@-C<T(#DY.3D@.3DY.0HR(#(@,"`Q(#`@,"`P
XM(#0@,"XP,#`@,"`P"@D@,C8Y(#8U-"`R-CD@-C$T(#(X.2`V,30@,C@Y(#8U
XM-"`R-CD@-C4T(#DY.3D@.3DY.0HR(#(@,"`Q(#`@,"`P(#0@,"XP,#`@,"`P
XM"@D@,S`Y(#8U-"`S,#D@-C$T(#,R.2`V,30@,S(Y(#8U-"`S,#D@-C4T(#DY
XM.3D@.3DY.0HR(#(@,"`Q(#`@,"`P(#0@,"XP,#`@,"`P"@D@,S(Y(#8S-"`S
XM,CD@-3DT(#,T.2`U.30@,S0Y(#8S-"`S,CD@-C,T(#DY.3D@.3DY.0HR(#(@
XM,"`Q(#`@,"`P(#0@,"XP,#`@,"`P"@D@,S0Y(#8Q-"`S-#D@-3<T(#,V.2`U
XM-S0@,S8Y(#8Q-"`S-#D@-C$T(#DY.3D@.3DY.0HR(#(@,"`Q(#`@,"`P(#0@
XM,"XP,#`@,"`P"@D@,S0Y(#4W-"`S-#D@-3,T(#,V.2`U,S0@,S8Y(#4W-"`S
XM-#D@-3<T(#DY.3D@.3DY.0HR(#(@,"`Q(#`@,"`P(#0@,"XP,#`@,"`P"@D@
XM,S(Y(#4Y-"`S,CD@-34T(#,T.2`U-30@,S0Y(#4Y-"`S,CD@-3DT(#DY.3D@
XM.3DY.0HR(#(@,"`Q(#`@,"`P(#0@,"XP,#`@,"`P"@D@,S(Y(#4U-"`S,CD@
XM-3$T(#,T.2`U,30@,S0Y(#4U-"`S,CD@-34T(#DY.3D@.3DY.0HR(#(@,"`Q
XM(#`@,"`P(#0@,"XP,#`@,"`P"@D@,S`Y(#8Q-"`S,#D@-3<T(#,R.2`U-S0@
XM,S(Y(#8Q-"`S,#D@-C$T(#DY.3D@.3DY.0HR(#(@,"`Q(#`@,"`P(#0@,"XP
XM,#`@,"`P"@D@,C@Y(#8S-"`R.#D@-3DT(#,P.2`U.30@,S`Y(#8S-"`R.#D@
XM-C,T(#DY.3D@.3DY.0HR(#(@,"`Q(#`@,"`P(#0@,"XP,#`@,"`P"@D@,C8Y
XM(#8Q-"`R-CD@-3<T(#(X.2`U-S0@,C@Y(#8Q-"`R-CD@-C$T(#DY.3D@.3DY
XM.0HR(#(@,"`Q(#`@,"`P(#0@,"XP,#`@,"`P"@D@,C@Y(#4Y-"`R.#D@-34T
XM(#,P.2`U-30@,S`Y(#4Y-"`R.#D@-3DT(#DY.3D@.3DY.0HR(#(@,"`Q(#`@
XM,"`P(#0@,"XP,#`@,"`P"@D@,S`Y(#4W-"`S,#D@-3,T(#,R.2`U,S0@,S(Y
XM(#4W-"`S,#D@-3<T(#DY.3D@.3DY.0HR(#(@,"`Q(#`@,"`P(#0@,"XP,#`@
XM,"`P"@D@,S0Y(#8Y-"`S-#D@-C4T(#,V.2`V-30@,S8Y(#8Y-"`S-#D@-CDT
XM(#DY.3D@.3DY.0HR(#(@,"`Q(#`@,"`P(#0@,"XP,#`@,"`P"@D@,C@Y(#4U
XM-"`R.#D@-3$T(#,P.2`U,30@,S`Y(#4U-"`R.#D@-34T(#DY.3D@.3DY.0HR
XM(#(@,"`Q(#`@,"`P(#0@,"XP,#`@,"`P"@D@,C8Y(#4W-"`R-CD@-3,T(#(X
XM.2`U,S0@,C@Y(#4W-"`R-CD@-3<T(#DY.3D@.3DY.0HR(#,@,"`Q(#`@,"`P
XM(#0@,"XP,#`@,"`P"@D@,C(T(#8S.2`R-CD@-C,Y(#(V.2`V-S0@,C(W(#8W
XM-"`R,C0@-C,Y(#DY.3D@.3DY.0HR(#,@,"`Q(#`@,"`P(#0@,"XP,#`@,"`P
XM"@D@,C8Y(#4Y.2`R-CD@-C,T(#(R,R`V,S0@,C$W(#4Y.2`R-CD@-3DY(#DY
XM.3D@.3DY.0HR(#,@,"`Q(#`@,"`P(#0@,"XP,#`@,"`P"@D@,C8Y(#4U.2`R
XM-CD@-3DT(#(Q-B`U.30@,C`V(#4U.2`R-CD@-34Y(#DY.3D@.3DY.0HR(#,@
XM,"`Q(#`@,"`P(#0@,"XP,#`@,"`P"@D@,3DT(#4Q.2`R-CD@-3$Y(#(V.2`U
XM-30@,C`T(#4U-"`Q.30@-3$Y(#DY.3D@.3DY.0HR(#,@,"`Q(#`@,"`P(#0@
XM,"XP,#`@,"`P"@D@,3@Y(#0Y.2`Q.#D@-3$T(#(V.2`U,30@,C8Y(#4S-"`R
XM.#D@-3,T(#(X.2`U,30@,S`Y(#4Q-"`S,#D@-3,T(#,R.2`U,S0@,S(Y(#4Q
XM-"`S-#D@-3$T(#,T.2`U,S0@,S8Y(#4S-"`S-CD@-3$T(#0T.2`U,30@-#0Y
XM(#0Y.2`Q.#D@-#DY(#DY.3D@.3DY.0HR(#$@,"`S(#`@,"`P(#`@,"XP,#`@
XM,"`P"@D@,C`P(#0S,B`R,#0@-#,R(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P
XM(#(Q(#`N,#`P(#`@,`H)(#(P,"`T,SD@,C`P(#0S,B`Y.3DY(#DY.3D*,B`Q
XM(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#(T-"`T,SD@,C0V(#0S-R`R-#@@
XM-#,P(#(U,2`T,CD@.3DY.2`Y.3DY"C(@,2`P(#$@,"`P(#`@,"`P+C`P,"`P
XM(#`*"2`R-3D@-#,Y(#(U-R`T,S<@,C4U(#0S,"`R-3(@-#(Y(#DY.3D@.3DY
XM.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,C0T(#0S.2`R-3@@-#,Y
XM(#DY.3D@.3DY.0HR(#$@,"`R(#`@,"`P(#`@,"XP,#`@,"`P"@D@,C4R(#0R
XM.2`R-3(@-#(W(#DY.3D@.3DY.0HT(#`@,3@@,30@,"`P(#`@,"XP,#`@,2`Q
XM,2`R,R`S,3D@,C@Y($%-`0HT(#$@,3@@,3@@,"`P(#`@,"XP,#`@,2`Q-"`V
XM,"`R,3@@,C,V($-!4TE/`0HT(#$@,3@@,30@,"`P(#`@,"XP,#`@,2`Q,2`S
XM,B`T,S8@-#0R($-(4@$*-"`Q(#$X(#$T(#`@,"`P(#`N,#`P(#$@,3$@,S(@
XM,SDS(#0T,B!435(!"C0@,2`Q."`Q-"`P(#`@,"`P+C`P,"`Q(#$Q(#0P(#,T
XM-R`T-#(@1%5!3`$*-"`Q(#$X(#$T(#`@,"`P(#`N,#`P(#$@,3$@,S$@,S`Q
X*(#0T,B!!3$T!"@$*
X`
Xend
END_OF_FILE
if test 13250 -ne `wc -c <'Examples/watch.fig.uu'`; then
    echo shar: \"'Examples/watch.fig.uu'\" unpacked with wrong size!
fi
# end of 'Examples/watch.fig.uu'
fi
if test -f 'e_update.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'e_update.c'\"
else
echo shar: Extracting \"'e_update.c'\" \(8856 characters\)
sed "s/^X//" >'e_update.c' <<'END_OF_FILE'
X/*
X * FIG : Facility for Interactive Generation of figures
X * Copyright (c) 1985 by Supoj Sutanthavibul
X *
X * "Permission to use, copy, modify, distribute, and sell this software and its
X * documentation for any purpose is hereby granted without fee, provided that
X * the above copyright notice appear in all copies and that both that
X * copyright notice and this permission notice appear in supporting
X * documentation, and that the name of M.I.T. not be used in advertising or
X * publicity pertaining to distribution of the software without specific,
X * written prior permission.  M.I.T. makes no representations about the
X * suitability of this software for any purpose.  It is provided "as is"
X * without express or implied warranty."
X *
X */
X
X#include "fig.h"
X#include "object.h"
X#include "resources.h"
X#include "mode.h"
X#include "paintop.h"
X#include "u_create.h"
X#include "u_list.h"
X#include "u_search.h"
X#include "w_canvas.h"
X#include "w_drawprim.h"
X#include "w_mousefun.h"
X
Xextern		update_current_settings();
Xstatic int	init_update_object();
Xstatic int	init_update_settings();
X
Xupdate_selected()
X{
X    set_mousefun("update object", "update settings", "");
X    canvas_kbd_proc = null_proc;
X    canvas_locmove_proc = null_proc;
X    init_searchproc_left(init_update_object);
X    init_searchproc_middle(init_update_settings);
X    canvas_leftbut_proc = object_search_left;
X    canvas_middlebut_proc = object_search_middle;
X    canvas_rightbut_proc = null_proc;
X    set_cursor(pick9_cursor);
X}
X
Xstatic
Xget_arrow_mode(object)
X    F_line	   *object;
X{
X    if (!object->for_arrow && !object->back_arrow)
X	return L_NOARROWS;
X    else if (object->for_arrow && !object->back_arrow)
X	return L_FARROWS;
X    else if (!object->for_arrow && object->back_arrow)
X	return L_BARROWS;
X    else
X	return L_FBARROWS;
X}
X    
Xstatic
Xinit_update_settings(p, type, x, y, px, py)
X    char	   *p;
X    int		    type;
X    int		    x, y;
X    int		    px, py;
X{
X    switch (type) {
X    case O_COMPOUND:
X	put_msg("There is no support for updating settings from a compound object");
X	return;
X    case O_POLYLINE:
X	cur_l = (F_line *) p;
X	cur_linewidth = cur_l->thickness;
X	cur_fillstyle = cur_l->fill_style;
X	cur_color = cur_l->color;
X	cur_linestyle = cur_l->style;
X	cur_styleval = cur_l->style_val;
X	cur_arrowmode = get_arrow_mode(cur_l);
X	if (cur_l->type == T_ARC_BOX)
X	    cur_boxradius = cur_l->radius;
X	break;
X    case O_TEXT:
X	cur_t = (F_text *) p;
X	cur_color = cur_t->color;
X	cur_textjust = cur_t->type;
X	cur_textflags = cur_t->flags;
X	if (using_ps)
X	    cur_ps_font = cur_t->font;
X	else
X	    cur_latex_font = cur_t->font;
X	cur_fontsize = cur_t->size;
X	cur_angle = cur_t->angle;
X	break;
X    case O_ELLIPSE:
X	cur_e = (F_ellipse *) p;
X	cur_linewidth = cur_e->thickness;
X	cur_fillstyle = cur_e->fill_style;
X	cur_color = cur_e->color;
X	cur_linestyle = cur_e->style;
X	cur_styleval = cur_e->style_val;
X	break;
X    case O_ARC:
X	cur_a = (F_arc *) p;
X	cur_linewidth = cur_a->thickness;
X	cur_fillstyle = cur_a->fill_style;
X	cur_color = cur_a->color;
X	cur_linestyle = cur_a->style;
X	cur_styleval = cur_a->style_val;
X	cur_arrowmode = get_arrow_mode(cur_a);
X	break;
X    case O_SPLINE:
X	cur_s = (F_spline *) p;
X	cur_linewidth = cur_s->thickness;
X	cur_fillstyle = cur_s->fill_style;
X	cur_color = cur_s->color;
X	cur_linestyle = cur_s->style;
X	cur_styleval = cur_s->style_val;
X	cur_arrowmode = get_arrow_mode(cur_s);
X	break;
X    default:
X	return;
X    }
X    update_current_settings();
X    put_msg("Settings UPDATED");
X}
X
Xstatic
Xinit_update_object(p, type, x, y, px, py)
X    char	   *p;
X    int		    type;
X    int		    x, y;
X    int		    px, py;
X{
X    switch (type) {
X    case O_COMPOUND:
X	set_temp_cursor(wait_cursor);
X	cur_c = (F_compound *) p;
X	toggle_compoundmarker(cur_c);
X	new_c = copy_compound(cur_c);
X	update_compound(new_c);
X	change_compound(cur_c, new_c);
X	toggle_compoundmarker(new_c);
X	break;
X    case O_POLYLINE:
X	set_temp_cursor(wait_cursor);
X	cur_l = (F_line *) p;
X	toggle_linemarker(cur_l);
X	new_l = copy_line(cur_l);
X	update_line(new_l);
X	change_line(cur_l, new_l);
X	toggle_linemarker(new_l);
X	break;
X    case O_TEXT:
X	set_temp_cursor(wait_cursor);
X	cur_t = (F_text *) p;
X	toggle_textmarker(cur_t);
X	new_t = copy_text(cur_t);
X	update_text(new_t);
X	change_text(cur_t, new_t);
X	toggle_textmarker(new_t);
X	break;
X    case O_ELLIPSE:
X	set_temp_cursor(wait_cursor);
X	cur_e = (F_ellipse *) p;
X	toggle_ellipsemarker(cur_e);
X	new_e = copy_ellipse(cur_e);
X	update_ellipse(new_e);
X	change_ellipse(cur_e, new_e);
X	toggle_ellipsemarker(new_e);
X	break;
X    case O_ARC:
X	set_temp_cursor(wait_cursor);
X	cur_a = (F_arc *) p;
X	toggle_arcmarker(cur_a);
X	new_a = copy_arc(cur_a);
X	update_arc(new_a);
X	change_arc(cur_a, new_a);
X	toggle_arcmarker(new_a);
X	break;
X    case O_SPLINE:
X	set_temp_cursor(wait_cursor);
X	cur_s = (F_spline *) p;
X	toggle_splinemarker(cur_s);
X	new_s = copy_spline(cur_s);
X	update_spline(new_s);
X	change_spline(cur_s, new_s);
X	toggle_splinemarker(new_s);
X	break;
X    default:
X	return;
X    }
X    reset_cursor();
X    put_msg("Object(s) UPDATED");
X}
X
Xupdate_ellipse(ellipse)
X    F_ellipse	   *ellipse;
X{
X    draw_ellipse(ellipse, ERASE);
X    ellipse->thickness = cur_linewidth;
X    ellipse->style = cur_linestyle;
X    ellipse->fill_style = cur_fillstyle;
X    ellipse->color = cur_color;
X    ellipse->style_val = cur_styleval * (cur_linewidth + 1) / 2;
X    draw_ellipse(ellipse, PAINT);
X}
X
Xupdate_arc(arc)
X    F_arc	   *arc;
X{
X    draw_arc(arc, ERASE);
X    arc->thickness = cur_linewidth;
X    arc->style = cur_linestyle;
X    arc->fill_style = cur_fillstyle;
X    arc->color = cur_color;
X    arc->style_val = cur_styleval * (cur_linewidth + 1) / 2;
X    if (autoforwardarrow_mode)
X	arc->for_arrow = forward_arrow();
X    else
X	arc->for_arrow = NULL;
X    if (autobackwardarrow_mode)
X	arc->back_arrow = backward_arrow();
X    else
X	arc->back_arrow = NULL;
X    draw_arc(arc, PAINT);
X}
X
Xupdate_line(line)
X    F_line	   *line;
X{
X    draw_line(line, ERASE);
X    line->thickness = cur_linewidth;
X    line->style = cur_linestyle;
X    line->color = cur_color;
X    line->style_val = cur_styleval * (cur_linewidth + 1) / 2;
X    line->radius = cur_boxradius;
X    line->fill_style = cur_fillstyle;
X    if (line->type != T_POLYGON && line->type != T_BOX &&
X	line->type != T_ARC_BOX && line->points->next != NULL) {
X	if (autoforwardarrow_mode)
X	    line->for_arrow = forward_arrow();
X	else
X	    line->for_arrow = NULL;
X	if (autobackwardarrow_mode)
X	    line->back_arrow = backward_arrow();
X	else
X	    line->back_arrow = NULL;
X    }
X    draw_line(line, PAINT);
X}
X
Xupdate_text(text)
X    F_text	   *text;
X{
X    PR_SIZE	    size;
X
X    draw_text(text, ERASE);
X    text->type = cur_textjust;
X    text->font = using_ps ? cur_ps_font : cur_latex_font;
X    text->flags = cur_textflags;  
X    text->size = cur_fontsize;
X    text->angle = cur_angle;
X    text->color = cur_color;
X    size = pf_textwidth(text->font, psfont_text(text), text->size,
X			strlen(text->cstring), text->cstring);
X    text->length = size.x;	/* in pixels */
X    text->height = size.y;	/* in pixels */
X    draw_text(text, PAINT);
X}
X
Xupdate_spline(spline)
X    F_spline	   *spline;
X{
X    draw_spline(spline, ERASE);
X    spline->thickness = cur_linewidth;
X    spline->style = cur_linestyle;
X    spline->color = cur_color;
X    spline->style_val = cur_styleval * (cur_linewidth + 1) / 2;
X    spline->fill_style = cur_fillstyle;
X    if (open_spline(spline)) {
X	if (autoforwardarrow_mode)
X	    spline->for_arrow = forward_arrow();
X	else
X	    spline->for_arrow = NULL;
X	if (autobackwardarrow_mode)
X	    spline->back_arrow = backward_arrow();
X	else
X	    spline->back_arrow = NULL;
X    }
X    draw_spline(spline, PAINT);
X}
X
Xupdate_compound(compound)
X    F_compound	   *compound;
X{
X    update_lines(compound->lines);
X    update_splines(compound->splines);
X    update_ellipses(compound->ellipses);
X    update_arcs(compound->arcs);
X    update_texts(compound->texts);
X    update_compounds(compound->compounds);
X    compound_bound(compound, &compound->nwcorner.x, &compound->nwcorner.y,
X		   &compound->secorner.x, &compound->secorner.y);
X}
X
Xupdate_arcs(arcs)
X    F_arc	   *arcs;
X{
X    F_arc	   *a;
X
X    for (a = arcs; a != NULL; a = a->next)
X	update_arc(a);
X}
X
Xupdate_compounds(compounds)
X    F_compound	   *compounds;
X{
X    F_compound	   *c;
X
X    for (c = compounds; c != NULL; c = c->next)
X	update_compound(c);
X}
X
Xupdate_ellipses(ellipses)
X    F_ellipse	   *ellipses;
X{
X    F_ellipse	   *e;
X
X    for (e = ellipses; e != NULL; e = e->next)
X	update_ellipse(e);
X}
X
Xupdate_lines(lines)
X    F_line	   *lines;
X{
X    F_line	   *l;
X
X    for (l = lines; l != NULL; l = l->next)
X	update_line(l);
X}
X
Xupdate_splines(splines)
X    F_spline	   *splines;
X{
X    F_spline	   *s;
X
X    for (s = splines; s != NULL; s = s->next)
X	update_spline(s);
X}
X
Xupdate_texts(texts)
X    F_text	   *texts;
X{
X    F_text	   *t;
X
X    for (t = texts; t != NULL; t = t->next)
X	update_text(t);
X}
END_OF_FILE
if test 8856 -ne `wc -c <'e_update.c'`; then
    echo shar: \"'e_update.c'\" unpacked with wrong size!
fi
# end of 'e_update.c'
fi
if test -f 'u_redraw.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'u_redraw.c'\"
else
echo shar: Extracting \"'u_redraw.c'\" \(14809 characters\)
sed "s/^X//" >'u_redraw.c' <<'END_OF_FILE'
X/*
X * FIG : Facility for Interactive Generation of figures
X * Copyright (c) 1985 by Supoj Sutanthavibul
X * Depth code by Mike Lutz 1991
X *
X * "Permission to use, copy, modify, distribute, and sell this software and its
X * documentation for any purpose is hereby granted without fee, provided that
X * the above copyright notice appear in all copies and that both that
X * copyright notice and this permission notice appear in supporting
X * documentation, and that the name of M.I.T. not be used in advertising or
X * publicity pertaining to distribution of the software without specific,
X * written prior permission.  M.I.T. makes no representations about the
X * suitability of this software for any purpose.  It is provided "as is"
X * without express or implied warranty."
X *
X */
X
X#include "fig.h"
X#include "resources.h"
X#include "object.h"
X#include "paintop.h"
X#include "w_setup.h"
X#include "w_util.h"
X#include "w_zoom.h"
X
X/*
X * Support for rendering based on correct object depth.	 A simple depth based
X * caching scheme; anything more will require major surgery on the object
X * data structures that will percolate throughout program.
X */
X
X#define MAXDEPTH	(10)
X
X/*
X * One ``counts'' structure for each object type at each nesting depth from 0
X * to MAXDEPTH - 1.  We track both the number of objects per type per depth,
X * as well as the number of objects drawn so far per type per depth to cut
X * down on search loop overhead.
X */
X
Xstruct counts {
X    unsigned	    num_arcs;	/* # arcs at this depth */
X    unsigned	    num_lines;	/* # lines at this depth */
X    unsigned	    num_ellipses;	/* # ellipses at this depth */
X    unsigned	    num_splines;/* # splines at this depth */
X    unsigned	    num_texts;	/* # texts at this depth */
X    unsigned	    cnt_arcs;	/* count of arcs drawn at this depth */
X    unsigned	    cnt_lines;	/* count of lines drawn at this depth */
X    unsigned	    cnt_ellipses;	/* count of ellipses drawn at this
X					 * depth */
X    unsigned	    cnt_splines;/* count of splines drawn at this depth */
X    unsigned	    cnt_texts;	/* count of texts drawn at this depth */
X};
X
X/*
X * The array of ``counts'' structures.	All objects at depth >= MAXDEPTH are
X * accounted for in the counts[MAXDEPTH] entry.
X */
X
Xstruct counts	counts[MAXDEPTH + 1];
X
X/*
X * Function to clear the array of object counts prior to each redraw.
X */
X
Xstatic void
Xclearcounts()
X{
X    register struct counts *cp;
X
X    for (cp = &counts[0]; cp <= &counts[MAXDEPTH]; ++cp) {
X	cp->num_arcs = 0;
X	cp->num_lines = 0;
X	cp->num_ellipses = 0;
X	cp->num_splines = 0;
X	cp->num_texts = 0;
X	cp->cnt_arcs = 0;
X	cp->cnt_lines = 0;
X	cp->cnt_ellipses = 0;
X	cp->cnt_splines = 0;
X	cp->cnt_texts = 0;
X    }
X}
X
Xunsigned int	max_depth;
X
Xredisplay_objects(objects)
X    F_compound	   *objects;
X{
X    int		    fill;
X    int		    depth;
X    int		    tdepth;
X
X    if (objects == NULL)
X	return;
X
X    /*
X     * Clear object counts, and then get the max. depth of any object from
X     * the max. depths of each object type in the top level compound.
X     */
X
X    clearcounts();
X    tdepth = max2(compound_depths(objects->compounds),
X		  max2(text_depths(objects->texts),
X		       spline_depths(objects->splines)));
X    max_depth = max2(arc_depths(objects->arcs),
X		     max2(line_depths(objects->lines),
X			  max2(ellipse_depths(objects->ellipses),
X			       tdepth)));
X
X    /*
X     * A new outer loop, executing once per depth level from max_depth down
X     * to 0 (negative depths are not supported).  The code inside the loop is
X     * the original code for redisplay_objects.
X     */
X
X    for (depth = max_depth; depth >= 0; --depth) {
X	for (fill = 1; fill >= 0; fill--) {
X	    redisplay_arcobject(objects->arcs, depth, fill);
X	    redisplay_compoundobject(objects->compounds, depth, fill);
X	    redisplay_ellipseobject(objects->ellipses, depth, fill);
X	    redisplay_lineobject(objects->lines, depth, fill);
X	    redisplay_splineobject(objects->splines, depth, fill);
X	}
X	/* text doesn't have fill mode */
X	redisplay_textobject(objects->texts, depth);
X    }
X
X    /*
X     * Point markers and compounds, not being ``real objects'', are handled
X     * outside the depth loop.
X     */
X
X    /* show the markers if they are on */
X    toggle_markers_in_compound(objects);
X}
X
X/*
X * Find the maximum depth of any arc, recording the number of arcs per each
X * level along the way.
X */
X
Xint
Xarc_depths(arcs)
X    F_arc	   *arcs;
X{
X    int		    maxdepth = 0;
X    F_arc	   *fp;
X
X    for (fp = arcs; fp != NULL; fp = fp->next) {
X	if (maxdepth < fp->depth)
X	    maxdepth = fp->depth;
X
X	++counts[min2(fp->depth, MAXDEPTH)].num_arcs;
X    }
X    return maxdepth;
X}
X
X/*
X * Find the maximum depth of any line, recording the number of lines per each
X * level along the way.
X */
X
Xint
Xline_depths(lines)
X    F_line	   *lines;
X{
X    int		    maxdepth = 0;
X    F_line	   *fp;
X
X    for (fp = lines; fp != NULL; fp = fp->next) {
X	if (maxdepth < fp->depth)
X	    maxdepth = fp->depth;
X
X	++counts[min2(fp->depth, MAXDEPTH)].num_lines;
X    }
X    return maxdepth;
X}
X
X/*
X * Find the maximum depth of any ellipse, recording the number of ellipses
X * per each level along the way.
X */
X
Xint
Xellipse_depths(ellipses)
X    F_ellipse	   *ellipses;
X{
X    int		    maxdepth = 0;
X    F_ellipse	   *fp;
X
X    for (fp = ellipses; fp != NULL; fp = fp->next) {
X	if (maxdepth < fp->depth)
X	    maxdepth = fp->depth;
X
X	++counts[min2(fp->depth, MAXDEPTH)].num_ellipses;
X    }
X    return maxdepth;
X}
X
X/*
X * Find the maximum depth of any spline, recording the number of splines per
X * each level along the way.
X */
X
Xint
Xspline_depths(splines)
X    F_spline	   *splines;
X{
X    int		    maxdepth = 0;
X    F_spline	   *fp;
X
X    for (fp = splines; fp != NULL; fp = fp->next) {
X	if (maxdepth < fp->depth)
X	    maxdepth = fp->depth;
X
X	++counts[min2(fp->depth, MAXDEPTH)].num_splines;
X    }
X    return maxdepth;
X}
X
X/*
X * Find the maximum depth of any text, recording the number of texts per each
X * level along the way.
X */
X
Xint
Xtext_depths(texts)
X    F_text	   *texts;
X{
X    int		    maxdepth = 0;
X    F_text	   *fp;
X
X    for (fp = texts; fp != NULL; fp = fp->next) {
X	if (maxdepth < fp->depth)
X	    maxdepth = fp->depth;
X
X	++counts[min2(fp->depth, MAXDEPTH)].num_texts;
X    }
X    return maxdepth;
X}
X
X/*
X * Find the maximum depth of any of the objects contained in the compound.
X */
X
Xint
Xcompound_depths(compounds)
X    F_compound	   *compounds;
X{
X    int		    maxdepth = 0;
X    F_compound	   *fp;
X    int		    tdepth;
X
X    for (fp = compounds; fp != NULL; fp = fp->next) {
X	tdepth = max2(compound_depths(fp->compounds),
X		      max2(text_depths(fp->texts),
X			   spline_depths(fp->splines)));
X	maxdepth = max2(arc_depths(fp->arcs),
X			max2(line_depths(fp->lines),
X			     max2(ellipse_depths(fp->ellipses),
X				  tdepth)));
X    }
X    return maxdepth;
X}
X
X/*
X * Redisplay a list of arcs.  Only display arcs of the correct depth and fill
X * mode.  For each arc drawn, update the count for the appropriate depth in
X * the counts array.
X */
X
Xredisplay_arcobject(arcs, depth, fill)
X    F_arc	   *arcs;
X    int		    depth;
X    int		    fill;
X{
X    F_arc	   *arc;
X    struct counts  *cp = &counts[min2(depth, MAXDEPTH)];
X
X    arc = arcs;
X    while (arc != NULL && cp->cnt_arcs < cp->num_arcs) {
X	if (depth == arc->depth)
X	    if ((fill && arc->fill_style) ||
X		(fill == 0 && arc->fill_style == 0)) {
X		draw_arc(arc, PAINT);
X		++cp->cnt_arcs;
X	    }
X	arc = arc->next;
X    }
X}
X
X/*
X * Redisplay a list of ellipses.  Only display ellipses of the correct depth
X * and fill mode.  For each ellipse drawn, update the count for the
X * appropriate depth in the counts array.
X */
X
Xredisplay_ellipseobject(ellipses, depth, fill)
X    F_ellipse	   *ellipses;
X    int		    depth;
X    int		    fill;
X{
X    F_ellipse	   *ep;
X    struct counts  *cp = &counts[min2(depth, MAXDEPTH)];
X
X
X    ep = ellipses;
X    while (ep != NULL && cp->cnt_ellipses < cp->num_ellipses) {
X	if (depth == ep->depth)
X	    if ((fill && ep->fill_style) ||
X		(fill == 0 && ep->fill_style == 0)) {
X		draw_ellipse(ep, PAINT);
X		++cp->cnt_ellipses;
X	    }
X	ep = ep->next;
X    }
X}
X
X/*
X * Redisplay a list of lines.  Only display lines of the correct depth and
X * fill mode.  For each line drawn, update the count for the appropriate
X * depth in the counts array.
X */
X
Xredisplay_lineobject(lines, depth, fill)
X    F_line	   *lines;
X    int		    depth;
X    int		    fill;
X{
X    F_line	   *lp;
X    struct counts  *cp = &counts[min2(depth, MAXDEPTH)];
X
X
X    lp = lines;
X    while (lp != NULL && cp->cnt_lines < cp->num_lines) {
X	if (depth == lp->depth)
X	    if ((fill && lp->fill_style) ||
X		(fill == 0 && lp->fill_style == 0)) {
X		draw_line(lp, PAINT);
X		++cp->cnt_lines;
X	    }
X	lp = lp->next;
X    }
X}
X
X/*
X * Redisplay a list of splines.	 Only display splines of the correct depth
X * and fill mode.  For each spline drawn, update the count for the
X * appropriate depth in the counts array.
X */
X
Xredisplay_splineobject(splines, depth, fill)
X    F_spline	   *splines;
X    int		    depth;
X    int		    fill;
X{
X    F_spline	   *spline;
X    struct counts  *cp = &counts[min2(depth, MAXDEPTH)];
X
X    spline = splines;
X    while (spline != NULL && cp->cnt_splines < cp->num_splines) {
X	if (depth == spline->depth)
X	    if ((fill && spline->fill_style) ||
X		(fill == 0 && spline->fill_style == 0)) {
X		draw_spline(spline, PAINT);
X		++cp->cnt_splines;
X	    }
X	spline = spline->next;
X    }
X}
X
X/*
X * Redisplay a list of texts.  Only display texts of the correct depth.	 For
X * each text drawn, update the count for the appropriate depth in the counts
X * array.
X */
X
Xredisplay_textobject(texts, depth)
X    F_text	   *texts;
X    int		    depth;
X{
X    F_text	   *text;
X    struct counts  *cp = &counts[min2(depth, MAXDEPTH)];
X
X    text = texts;
X    while (text != NULL && cp->cnt_texts < cp->num_texts) {
X	if (depth == text->depth) {
X	    draw_text(text, PAINT);
X	    ++cp->cnt_texts;
X	}
X	text = text->next;
X    }
X}
X
X/*
X * Redisplay a list of compounds at a current depth.  Basically just farm the
X * work out to the objects contained in the compound.
X */
X
Xredisplay_compoundobject(compounds, depth, fill)
X    F_compound	   *compounds;
X    int		    depth;
X    int		    fill;
X{
X    F_compound	   *c;
X
X    for (c = compounds; c != NULL; c = c->next) {
X	redisplay_arcobject(c->arcs, depth, fill);
X	redisplay_compoundobject(c->compounds, depth, fill);
X	redisplay_ellipseobject(c->ellipses, depth, fill);
X	redisplay_lineobject(c->lines, depth, fill);
X	redisplay_splineobject(c->splines, depth, fill);
X
X	/* no filled text mode, just do text on non-filled pass */
X	if (fill == 0) {
X	    redisplay_textobject(c->texts, depth);
X	}
X    }
X}
X
X/*
X * Redisplay the entire drawing.
X */
Xredisplay_canvas()
X{
X    redisplay_region(0, 0, CANVAS_WD, CANVAS_HT);
X}
X
Xredisplay_region(xmin, ymin, xmax, ymax)
X    int		    xmin, ymin, xmax, ymax;
X{
X    set_temp_cursor(wait_cursor);
X    /* kludge so that markers are redrawn */
X    xmin -= 8;
X    ymin -= 8;
X    xmax += 8;
X    ymax += 8;
X    set_clip_window(xmin, ymin, xmax, ymax);
X    clear_canvas();
X    redisplay_grid();
X    redisplay_objects(&objects);
X    reset_clip_window();
X    reset_cursor();
X}
X
Xredisplay_zoomed_region(xmin, ymin, xmax, ymax)
X    int		    xmin, ymin, xmax, ymax;
X{
X    redisplay_region(ZOOMX(xmin), ZOOMY(ymin), ZOOMX(xmax), ZOOMY(ymax));
X}
X
Xredisplay_ellipse(e)
X    F_ellipse	   *e;
X{
X    int		    xmin, ymin, xmax, ymax;
X
X    ellipse_bound(e, &xmin, &ymin, &xmax, &ymax);
X    redisplay_zoomed_region(xmin, ymin, xmax, ymax);
X}
X
Xredisplay_ellipses(e1, e2)
X    F_ellipse	   *e1, *e2;
X{
X    int		    xmin1, ymin1, xmax1, ymax1;
X    int		    xmin2, ymin2, xmax2, ymax2;
X
X    ellipse_bound(e1, &xmin1, &ymin1, &xmax1, &ymax1);
X    ellipse_bound(e2, &xmin2, &ymin2, &xmax2, &ymax2);
X    redisplay_regions(xmin1, ymin1, xmax1, ymax1, xmin2, ymin2, xmax2, ymax2);
X}
X
Xredisplay_arc(a)
X    F_arc	   *a;
X{
X    int		    xmin, ymin, xmax, ymax;
X
X    arc_bound(a, &xmin, &ymin, &xmax, &ymax);
X    redisplay_zoomed_region(xmin, ymin, xmax, ymax);
X}
X
Xredisplay_arcs(a1, a2)
X    F_arc	   *a1, *a2;
X{
X    int		    xmin1, ymin1, xmax1, ymax1;
X    int		    xmin2, ymin2, xmax2, ymax2;
X
X    arc_bound(a1, &xmin1, &ymin1, &xmax1, &ymax1);
X    arc_bound(a2, &xmin2, &ymin2, &xmax2, &ymax2);
X    redisplay_regions(xmin1, ymin1, xmax1, ymax1, xmin2, ymin2, xmax2, ymax2);
X}
X
Xredisplay_spline(s)
X    F_spline	   *s;
X{
X    int		    xmin, ymin, xmax, ymax;
X
X    spline_bound(s, &xmin, &ymin, &xmax, &ymax);
X    redisplay_zoomed_region(xmin, ymin, xmax, ymax);
X}
X
Xredisplay_splines(s1, s2)
X    F_spline	   *s1, *s2;
X{
X    int		    xmin1, ymin1, xmax1, ymax1;
X    int		    xmin2, ymin2, xmax2, ymax2;
X
X    spline_bound(s1, &xmin1, &ymin1, &xmax1, &ymax1);
X    spline_bound(s2, &xmin2, &ymin2, &xmax2, &ymax2);
X    redisplay_regions(xmin1, ymin1, xmax1, ymax1, xmin2, ymin2, xmax2, ymax2);
X}
X
Xredisplay_line(l)
X    F_line	   *l;
X{
X    int		    xmin, ymin, xmax, ymax;
X
X    line_bound(l, &xmin, &ymin, &xmax, &ymax);
X    redisplay_zoomed_region(xmin, ymin, xmax, ymax);
X}
X
Xredisplay_lines(l1, l2)
X    F_line	   *l1, *l2;
X{
X    int		    xmin1, ymin1, xmax1, ymax1;
X    int		    xmin2, ymin2, xmax2, ymax2;
X
X    line_bound(l1, &xmin1, &ymin1, &xmax1, &ymax1);
X    line_bound(l2, &xmin2, &ymin2, &xmax2, &ymax2);
X    redisplay_regions(xmin1, ymin1, xmax1, ymax1, xmin2, ymin2, xmax2, ymax2);
X}
X
Xredisplay_compound(c)
X    F_compound	   *c;
X{
X    redisplay_zoomed_region(c->nwcorner.x, c->nwcorner.y,
X			    c->secorner.x, c->secorner.y);
X}
X
Xredisplay_compounds(c1, c2)
X    F_compound	   *c1, *c2;
X{
X    redisplay_regions(c1->nwcorner.x, c1->nwcorner.y,
X		      c1->secorner.x, c1->secorner.y,
X		      c2->nwcorner.x, c2->nwcorner.y,
X		      c2->secorner.x, c2->secorner.y);
X}
X
Xredisplay_text(t)
X    F_text	   *t;
X{
X    int		    xmin, ymin, xmax, ymax;
X
X    text_bound(t, &xmin, &ymin, &xmax, &ymax);
X    redisplay_zoomed_region(xmin, ymin, xmax, ymax);
X}
X
Xredisplay_texts(t1, t2)
X    F_text	   *t1, *t2;
X{
X    int		    xmin1, ymin1, xmax1, ymax1;
X    int		    xmin2, ymin2, xmax2, ymax2;
X
X    text_bound(t1, &xmin1, &ymin1, &xmax1, &ymax1);
X    text_bound(t2, &xmin2, &ymin2, &xmax2, &ymax2);
X    redisplay_regions(xmin1, ymin1, xmax1, ymax1, xmin2, ymin2, xmax2, ymax2);
X}
X
Xredisplay_regions(xmin1, ymin1, xmax1, ymax1, xmin2, ymin2, xmax2, ymax2)
X    int		    xmin1, ymin1, xmax1, ymax1, xmin2, ymin2, xmax2, ymax2;
X{
X    if (xmin1 == xmin2 && ymin1 == ymin2 && xmax1 == xmax2 && ymax1 == ymax2) {
X	redisplay_zoomed_region(xmin1, ymin1, xmax1, ymax1);
X	return;
X    }
X    /* below is easier than sending clip rectangle array to X */
X    if (overlapping(xmin1, ymin1, xmax1, ymax1, xmin2, ymin2, xmax2, ymax2)) {
X	redisplay_zoomed_region(min2(xmin1, xmin2), min2(ymin1, ymin2),
X				max2(xmax1, xmax2), max2(ymax1, ymax2));
X    } else {
X	redisplay_zoomed_region(xmin1, ymin1, xmax1, ymax1);
X	redisplay_zoomed_region(xmin2, ymin2, xmax2, ymax2);
X    }
X}
END_OF_FILE
if test 14809 -ne `wc -c <'u_redraw.c'`; then
    echo shar: \"'u_redraw.c'\" unpacked with wrong size!
fi
# end of 'u_redraw.c'
fi
if test -f 'w_icons.c.Z.uu' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'w_icons.c.Z.uu'\"
else
echo shar: Extracting \"'w_icons.c.Z.uu'\" \(15136 characters\)
sed "s/^X//" >'w_icons.c.Z.uu' <<'END_OF_FILE'
Xbegin 666 w_icons.c.Z
XM'YV0+U0H *$"A)$D1T#H,!AF3!HV:>CD 6'FC1P02=S0*2.G(9TT=LJ .%+&
XM#<<P']^X ?'&#,4T9^K(*3-G8,$A;^#DD0,3#1T0*,:D !$C!XX:(,1,G%('
XMSALU()C2":,131@[:<3486/3)@@14#BV23-G3AJ5(.B\ 5%G3AD6(,;DS .W
XMS1LR:<S0!8%W#AV>6C?"I4H&A%LV;-*B(6NX)9T[86:"( PB8DV"?-^,J=.F
XMY-24*RM>I#H1CDRG;BO/ 8&&8QFE(,YTU%BF\)V(:-[4^6FFS%L0<.2\P4JF
XMMF*47NFTGBQFN$BY.GF>\0G"S9N/8T2&@0.G3.3**\,@CILS#<W);@HK1YGT
XM.IKC=+Q"W]GSIW7LVM,K9MQ=SMBR9ZUT7QK93<:==Q>EL=(<33DEQT=NG.$5
XM&9IQYAE* 0ZFWWH_*2>2&V%TQI)+3;B0A M4N%#==4F)U)9Q"DY&1D@/DJ7@
XM&2S)X95I8D#DD$3 <325@C>FM59??V6U6X C*B;2'(Y!)MEMRNGVTQS=.60&
XM@2QX=0=/=&RT4G!G7=3??V:II"(()9Z8(@AMA+'&>=:!,%-P-%T(VFIA-+>;
XMDUXQ&%&?#T4T44O[K0:E&8]%)I)HZ)5VVAMNK9G$3_P)1YQQ(H2Q&EDB>(F;
XME2"4@0>>9>5861MP0&2<E+-)Y$*H!-GT@@(*C*#@&&S44=Q76Y[A AJAZNH&
XMK[Z*),),4,J4W1S#AJI 0"I4:^VUE<GEQFJ0VO4K'%25D=BUY)9;[:T*^(7A
XM&'%9)4<",YWA%!MY?)%&G&>4L44,-L#0!0@]@+#'0" 4# ,>,,  U\$)+XRP
XMPB P#+'$#C<<\<,53XSQQ1933+#!&U/,L<8=AXR'&3@X;(89&;<\<L4T=%DP
XMR"7#$(/+(C,<\\L<W\QSS@C+T/+'' O]L\DVXXSPSD#7['/3,1,-- XD5UUQ
XMRD=3K73-6'L\\\4T:!R#U1>/K;0,8G=M,MIG*RPU'F9S?(/#;!\=]\%W(SPW
XMV&0?7#?>;G_-\-Y^]XW'WW ;CGC)83L\@]H-OYUWR5H?S;72E3=-<LIOUTSR
XMTT@SC?3G6XL>N>!(&PVT#:J/#K/2.8#NN<PSZ^SP&!KC(+OA**O,,MB[;QUX
XM[7C@3G?PEAL^N>&SOVT&\] ++WWR76H^O>9][( KJW)\H2YV*,0[;[U<@C"#
XM#7#-8+3/XK]!K[WXEI&"]NE^1F"[D240!AEDP$$'_&'(U[[Z]:^ #0QULZ.>
XM JVW0(QU+GH-3" #K?? ZYDL<W#[W00O*#:65;"!&"R*!2DGMAP,#8&&"Z$&
XM77<TXUUL!BML'@H=UB\:0A!H,]"8"S=X.N+%0&T83%H$QU"QUL%@!B-$7^<(
XMAS#T@1")' M#Q8B8-=(5C78@^Z'2=I@ZQQFNAI9K70T_>+ <;JUU7"R9%L/H
XML"#>C(Q=C. -6>@UXDF0CG@(@]K"(,6+\=%A?Y0C%@5)2!Y&#XYW3.0<%5D]
XM/#)R9-G;7G"\9[\QH&!__?M?^<Z7OO4-AG_^ V"^YH>K[]UO#.[2'T3.X 91
XMZHM?_@*8P!"YR%J.<'@T4UX,Y\A%,!IRD(5KHRTOAK@@SM%LB$0>PT"WO(HI
XMLWC,A&(=:08Z#-*@=3$PHA4/9DUL:M.9P,1#X\ F.AFTSI@.&^?!:%#.<RH.
XMEV!3VQC$:+@RZ#"&TLR@TFH@NAK4()S^=%A >W;+@E*/E@;=( 9G\,P>YC*=
XM&C-G$2V(.!F8[I"HJZCH;)#/&?SS:!IU6 Y:1P,J LV>X90!$T>:SHO2+:(;
XM):E+B0G3<&:SI6USV U$5P8FLC.AB0NG$']Y,906TI%N(ZHA(ZD [E%R79=<
XM92LWZ43UP<5GXH')5.-'RESEI3@NN0]8$T#6@*SH)R\J3![*@*F5G PF!+F5
XM*=F%ROQUA"QE<.4 8VE A![UD0J%Y\%6YKA=8NZ=%D3GVQ:70L2"L)Z"U6<5
XM<UJV9V*0L"]<80RB-L.CJ1-NS&RHQC[[T[*Y%(Z?C4%H+<A%S.+-L"_SJU(=
XM"3F,VE%L)D6JTF;PF]DZE&.U!2H,@GNQRZX0AHY["QS125.'Q2"W)*0LPX+[
XM-N8&\[&WTYAK)3NUR*9VM9.]V U66%J\S11HC9,<>#=(6M%MUH+?M:EHL^L[
XMY\+6MTG5K1R9ZM2YAB\,>+47%3EI/D_:"<!N<24I1U 2O)BAE)7$W[LB,P:]
XMPK* L^PL?H5KVX<>=:'$W6!K.:=A/(*X8OF\HW411D39XF'%S0POT!@K5!UN
XM\W##1&^'&_A9P'+0B]);[FA#C$<NTF"^L44=%V6 9*!Q4;5 U5KGB*QBC=V 
XMRH;K<61]K.4M.I:"&;TQC2/(3%YNF630G>,,3,BQ%'_Y9"9T<<FX^#@.![G$
XM/LZS+16PX>3Q=Y+^I;" TU=5 POZ7@&4'_WF*F'][>8-D1'.'2Q,0%D>\+9V
XM_NN.^\QIW7;NFW\%M6_G)F?F,5'/%3OUF0];L3[.-HBN=IV06PW4U(I:UJBS
XM=:W%=NL[LFVQO7ZS1(]:4:&5VKFC#;;2\G;-$V(Z@LJ&]IV?W;1H\]#:#L0S
XMMA.Y;:M].M,,Z_:T/=QI5!^TW%7[<_<"_>A(OV'25.WD50?3;CE(6L&+CG!=
XMW]4</%":KQFFMG[1/6Y-@]O3>,[QP!$N<','MKX7VVX,/%CB%:NQL19L9G6/
XMB?$&QIB;J[9;QS?X\1=[N\0EM[C81HYK'[+\CBGG>(V%F?&7*^_DQ%,YLED=
XM\15*_+[9;KC"'=YR<B^<Z(P\ML$-SN>C0T_=3P5?OP=MOD+/NSW^1O0H\[VN
XM1@MZZEI_9:7[FO"#(SWD!%_Z--7N]((J?;"YW>X11^CF*<Z\N#*7,1XUGNLY
XMCGF=?L\RVM<F>(H6/LD"_[LX Z^T+B,>9(IW_(P/O\%?EUCRA.<YR7$.,IV7
XM;9%UYUB:G0TR,\0=GV;?<]G9?O:[IYW@36\]).G7WTI>4@X5!ON K4Z4P>#^
XM"V#G*M>QTV@QS$1._\;PI8TN>]BO_O5XK('& OJV@1[,^FWW.&3#B?F2S2"W
XM:V18Z &73B.*[J<NUMWK.';>H!*4_3A]/!O+!KGQN[^,N34JX N^_Z/F;<7=
XMESMOA&?/Q&RWUFP-]'VD!W\BIS2]D4Y8MFR;XWKW9S+,%H$]MW/ M8#D5UQE
XM!H&)]8$,"#3(A#KJ]WGE9T$2=V,7QX$F$X ')WT"]5'7]T_51X/9!WV1HX,P
XM '7^97S>L0941V!6U7M)<7Q"&'9=Q6C[E@ .86_[DWR6]G8YV'8;5UA Y4O%
XMHW!:A$CV5S/M!P-A2#+?-&4C5( VEU.SUD"1-T==]C8PR#?296*(E7YO!H8T
XM!U*<YT>]E4>Q5C**)X9Y.'G\9W)S6&6-YX:#%X?]UUV&YX*>=UT\A(:%" .]
XMAH&V8SECZ%PDUG!?J#%:F$9SM% 4)W2I9V>Q-W3I1GN 9GM/V!%D,(2\YS.O
XM&(5*.'RGE$I/B!=A((5D9XJLIXKA1(I9:&- U85X]HGK!S4C5(8(A(D(0XEZ
XMYVN#%XDXEHCPM8>-B$>8%XBY4X?/9XAZ6#J#:#)AH#%_]#9AT(>!1(B:6(Z 
XMN&GBZ(X/YUF*2(&,N'B:AT<T=H5LN$C2"&9V=(DC%(:;2'\4.'<-%(H*1XQ4
XMV'R>QH,^Z(II( >\*(OR9H2[F :]>(L0UG5-6&%8P@:^&'#,)XS!F) HV6DH
XM)3E !W.YI85YYDXJN34-U631:),U^7X@)UR@ X.(U#IF=%0**'INIV16]I*&
XM,Y0]*3<CU&)X!HT*28)I*'^2^(*,9X^/"$?>^%*'>(>1U94HJ)411&3I%8Z"
XM.(W,HXQ.Z3P*USL<HY1'"8P\Z'82R8KKYHK>TRH866!7)Y)\Z9'U Y*Z.!<E
XMN7PIF9@]V3GV]UQ>EFJ[U8<E(Y-0*7 <M5MH5HXV\$Q,R6(T]S:;B9EVAW<T
XMQ)EITT;R-( "UYGAAP<YH$.FZ3!DH#9BL$)C$#QOPYIJ\YJW$YL(65RI*9J=
XMDUL8%)I'0YE*<YDME)EP9 -.Y(AQJ30W,'J6HVKA5&>*686_Q4/6B5T;*$C^
XMV&D8U$MLYC>W)F5A)E*Q-FS0>94XL)[G&5&="#(Y$&M%*&),9 /E>3C4R4/S
XMV5Q_I38Q()G"F(JI-Y%0-1]]682T:)B"R82I= :]DE=AMU?*]Y KR7 G:4'8
XMN4'Z9S)P.5BE6'H^!W0=BD<?VH)'TY)])X&. WYJ0P.-F6S+*$Z<)7#_)SOG
XMUWZ3HZ/QMW8=&&Z<F$XS^J(.\Z&85X+$@WE)^HW8V( >B(\!*4X'>&MY4Y1 
XM:J,N>C0/&$];2I4@"$<E=X%?>C*:-60NF*,:N$Y$IJ9CN4X\&EDG&*146J8K
XMF$Y3NIU8N5O0F*+:I3;;15C.8Z)]FJ$[J)VK*$EY"5426@<4NGL9Z3.-2J'"
XM]Y'$UX3%P09L50:A5*$7-H5H::BJ1SQIA).,PX)F)E0X.9[=.5MAL)]ZZF-B
XM(&Y'$P:;Z&)C()4K)U*Z&DXW()_@U$"\"38X:(D<*J?/N32LI3'U63&P.D=E
XM@$220ZO<1 9T4ZQS) 8_J5SA.)[3!XT8A$'1ZCC_J6/EV*4'<P/62I9->3!<
XM- :&M5A.2IH7DP/K2H_SN(4J4Z3AJ:\7XYQEZJVC^7#]"@//NH\U(P:)I8T(
XM0Z (*ZI#<Y>*&G4$@@*9NJF="JE^:807NQ&=6JF#>:FI)"YL (N'B:&G>%"A
XMFK*_A++9Z9 K*U[&R)..!%VFHT1H29!D5J-\EW-9::[O*(=:Z6+=R#RBLV+]
XMB#KK"$A_&%%&"X^C)8],>H]JJ89HF:?,H[-96C/]V406]*OT1;,RY+-8F)VH
XMYK)U:96(RK(.)+%-U8I01;(F&V\;ZS-R:XL@"Z'Y0[(7Z:EC9Y)F"[%HN[8J
XM2Y>$6X]E-*)'!;874ZI/6:,P@+.&:ZR6(Y4^^J9!UWD_NZ=!NXVGNI.>Z[3D
XM2*] <XY,&TY+ZT=-ZY6=FZ^?6[@@,[6C&[I0:[63>[ETRFU;0UUX9K,5DZQW
XMQ+CNBJJ0J#'(%;ASN:'("YXQF[84Y+:U%[>(T;<:RZ!PP;<<B6^6FHOY8P80
XM 0=?D'7Q8Z&@.KD0R[SFR[9W=);IRZY5:+IJZV/PRXS:%ZQ"ZF(]6C%R^9U"
XM^D+.V'"0(U,%6:- B3JF!YFD6X4K)H,70WVH@WUSJL!S=,!M:8*+9#KGMT@!
XMC%-RML'^6W/VBS#QBG(LB&WS&SJ%>,)$EX_K.W@0V7J#^\+>!KUP"S[>FP;@
XMFW75:V WG,/:&[+<^RX]_ 7D,[Z?^HO*Z[P:.G^SY9B-2[P@96P99438=F1K
XMJJP\QDQ2;$<'N4XBF(F5USKL&32@"S<9',(P=WY&A)L6?*0=!3D.*[1-PT0E
XM9WFDFD^M:5&P$U%B[%.KV\!\G%*M4P.WUIE6C+DVT,7BI,5"U7[A.H'\^V,)
XM# -_6*Z<VS0X6')<]!H.4YO.Y;!<&6LJC&TR(,I47(BE#$AD2%&F/%%L*$7J
XMN,JO#$BGG(!]R*)VQ);5IK[Y)<,(:L/?2\0+RL/!7,2)MH3ZEDH*0@<C>;+-
XM>[A+K,0PT*HH&ED3=XSY=VJZ3,:DR9AG"(_V%T3*N(;B%V4DL\VQ*LN=AJ4-
XMF[Q/K%/[JU"22<UCRWR]"J4;)J\')[Q5"+9PY*?2N7W_Z(( C<^2S$-=&ZL-
XMM<TX<,OHK%W6',\'C3 /78GG"WLTO*C@L\S-3+?6"Q[,')AYF\SY4V$<+=*)
XM1KY(O+S.U[Z(2]% A<M9)-$EDP,Q6=%7],Z=8UGG'+;+A+#YY+CD#-.3#) 0
XM9=&N7$8*Q\Y.W+)("<] U9DVC< (G9!26:15J[9M^+64AT?^7&(%#33\7#)A
XMG7EJ6]8J"K3^B8URYLB@QUJD9L"F^J?Z"U1"_<PR'&093;&69-(:T=$[_)?V
XM\M<HO77;2U>I!!$FX<PN#<U)A]<7771L%XB*W)FQFM#3QSR8#8)V<Z-)_&)M
XMJL@XP*.GA6>F SICK+LTF]H,2[G]:Y[?G-/KM&VJ23-J_+ $')]GI*I/VC2R
XM\TR?97&U/8YRC#3/5%',P\8XFMPC!$2C"C*&K'!+5J"H$P,XW32;C;Z?G=?@
XMN=?^I=B/2FB1"A?@_<-Z^RYV$1*,O=V1_=B-'5VR;8%=F[2K&<>YVW[*^6J1
XM99Q@.H+YRM^TI9G#W=]3$YQE*5*PF:8S>S">W+BFNIL)WH#+9> \=+2@>-RM
XM#8KHC-_ .Z^OG;GBE=T;=*(P#-G9"+GRF$8=OJRWDZPXL)]-O:>+A8/O23<'
XM&%$T;I_VK8_$Y-D-7,MJ?3C]),8W?COE-.!P(^*.?4C>;7OI'=Y5-]YPXASF
XM3=+H[1P?F])'#+C23-WOK7 WL..C+%1J$^;'"(HK#J '4P9"J;@' [#^9V5B
XMKLX(4^;<^N7.U;5!9*6@_,PQH+#3Z-S.=;#QN^!P0V08A#A:V)KN#=VGJ7<A
XM)*#WS#"5F46(SCS)RNAOC9!#'40P#HVB.*1J6YRB^YLCKCR7;E.";NHUNVRI
XMSC&2:W0Q\,=-TYBO_M-JJ^F\;)=+_LL5^^09*]YU6Q=8KDDC39CY,SYGH!+K
XMS=)K&\.1+:BH,UX^6;L[&[^FVE"T38YRUE"6N[LNZ#3@?NU-$X$[/>Z3.+N.
XMA.0UL^V6D^V?B=>@0^U_]=OASMQB:]3Y?N]H/-?][LZX'O!'9^_USMM')7?^
XM#KO.#L--#E7*SNP>;6 /OU7'C(N(G3\=2ZE:_K>(V>6H:.+32,^&8SR=0],:
XM\Z'73)3&*ZW/W)DS<-UX@/(C;+AI9/+P*/(4.-IMA/-9<[2G-E]F"#8PS\\D
XM/HI;QO,GU4%HO)1QMV6F:N&[#NV[E5NA'M]Z2@.K/L>-!T1]>*+S%,)8'TZQ
XM\Z.' ^3BM)LK-)U':D3Y%/91VCGMM/4B]9/E](="2?5='V=*=MJ[WMV]CI=\
XM;;'BLJG#?'497^7(_B["00=#, 17T.P>SW3:9G8PCYX#N6N?#%2*[L)O9HVO
XMBS>2R>XLE]H)OTXI]K^?C8 ?'KPQ2N?U[*7%[=K<V/I)C4>\J<_[;M I+_#4
XM&.^-W4L9NOL@'OGYC#KL;''M5UZN2S+)[^/NVH<W4$VA3_9CG\#*+_OL//;.
XM(T^FT_:B4_W<%*/-/_>W \L/;#H"S#%]J*VHN?2\[LN [U^+W_B/'_%7-_^.
XMC_@BFS]S, ;BH?$"9,MUO"5WBJ1>!%%DZ0S%"1=:Q^.NDB#J' PPM4 RO/%,
XM3EB(XBZ@A0*=L/^C-A1/WF R;:2<,*SG ?:B%N:+?1F.=;6KA5-,GAOF$G<-
XMA 1FH-PGD-A;WZN!*VKDY1V!IW,D1U4B<'C@1#4T<J4T9!HY07!D+Y'@H!P 
XM_90<#+!!J /\83$@2 .6X'ZZ?B?/>*D-,A#K7@BA(WZRIN&!C_[W_PJ?$2*#
XMFDK_!3$GI!)HA+';> !G '*WEF8#%]XJ&VJ)!+C]P.%WC=P7S %+X(XK7; R
XMI=JR5,F!@4 0OFT>?+2Y%"$_2H$TL $ZDB*G\,#81$LDMTX2(@XE]=E 8'$3
XM2X,%=&R7-U1B/.$V4CS6I-3E+B?5P7J;(VD_](WY6"E]5_SPG!UL)/!O8OD7
XM;>$&S6"#<@.]\$%9N030T8P8QS. =0D90C,26/*$"_0;.M6$\UD[_0;P+F%#
XM\G+,I_19H!W7Z(J*\;)YRPG%5$,\Q'HF'1\\A#NP"G'"K)8(/5R *W3NS[_E
XMP=U6";G9"APJ>R>W7)F8=O1NH!4">1[/0 4C7V=) )NP^VC%L.(=MD:S$?# 
XM&PR QQ @$D!X> NU6T5L3V:JOKBD?80#\)AFT7,L2+-8,D=8,\Z4<)%+<@8<
XM-@V;ATA4(M)PB;$*)I(,F5C78AA-C$X4D8?<1(:!$M'23A1AU5"%\$.H)OEL
XM84"4B'.P;?T]76A[&J(F"6Q&R"FJP8OW+C@5E! #:@#R340ZZ.QDH(B*AX80
XMWZ6KKC6LTM7/4X#URKM %]QE@4!1L6*+..!>N2;0@5S.W0O)+34@GQ"R=#+]
XM_)L49& U")S />>23\C O.-[_HT&R,6;(@_G7:6+4O6*+I[%=W?%!A18S$D^
XM<&#EI/K5&$%8,E%!VB6&T,5>A5H0XX<#0*;1&G(?TR$7;T!06XMDS[JUD5C#
XM4CR+\\N $2?6X( #Y%YDAV[DC81Q&-%&LW>B%*-.,2*P<1J)/G]XML1@Q;**
XM;P K^L+K!0>N8E84AHD/7ER'_.>WXJ RS&N(Q!RJ$?$8ELAC.G&)7,3RU4'W
XMQ(5&R\S[;&7Q<)A#MX<WS-WE@1SS49[TM'I('R6A[%M?M,_J&8[;EYXB85K#
XM@/BP]W6S9P;\#H[P2X 7,9H%0>+TM&SC-)R"+^@V9@>=(OW WO>+ADGP[I&_
XM[6?DQ.$1C(SM[T2BEP]9_@ *^DN"ZZ^:0 YM>*ARX=O2:!5K_M4_J,@^MF/]
XM.W;[[UTT!3* $@"@V/&.2+&]2<,&DD:82* 2C3:D8E@KN^C;.IG8^$-TL2]>
XM'^.%@V; E,PH6-)*THTP^4* %^@ C$$0!ZFK,6GP&%Q$(9-E1$OB 2WD42YC
XMTG@;3Z9$01S>)[@0R$T":N#,%3Y![D,RL)5.HHPQ4$]2R:WX#Q-/&#(_9^-1
XM*D!U)#K&0+*Z >=$3MHJNK&?.F*(!"2W408 JE@S!KH?J.24LS$)HJ-RT@7=
XM%:"[/B^R7NG'3G9.9N2%A) 8,2DV#^=H289DD9R.; $.$,F-,!4;35V)$$92
XMI7$Y1EGBC"(TXR)A(*X1CW:4$8]39DI@2.O1+283M.-<GCN$,:HP7S%!"M29
XM6N"%I)/?<L7A26V9KU9,$%DA&$0,<,.P]"V-7CF2ET&1)GV8K+=P3->@8HXN
XMD.3$$ 1X8ZY?:6LX;#$M*13080.*U;SD/N0%>"FR0P:GT")Z07(&$[[\I$RG
XMR'+ "BD#4-".F$?D)1#1#4$,"E8!60++8YDO?ABU,!?90B5P"XL 'O""_U,+
XM9B)<C MS<2X68A.: W'B0;0$,V!A1.6%2I) A8(-#GXG#Q$@!AM@\*>M64P4
XM)@]YQV-<FCS&!#8P0XD""Q%IT9I.YAN>P/T3]'R+69H^Q<H^ K#')%YBR-D\
XM:L1D=<$AL)GD7&&/>9M=$[70S3O"1>A=+30ZXBJ?F($4\Y-JR@NDFV7@-HXU
XMNJG'#F<YD@%XC,DQRQX4_VP/T(P,:F%E#"&C@1"#9N8DFM@Q2!)#S_GDBB8.
XM.)K.DN@H3;W!-"VAPGR%4Y,<V@ZI6375W>N\(P=LB9RXXH9]/I^$_)IP,\C%
XM *X9Y(!GV5Q^Z.X%G<FTN=O"XQ81'7ZSSLF]3R@W'QC=C'&3:6_B3=JE-X-G
XMD4E*'T_@X "U<:+&F/";362/] $2\2?(J!IHBXVI<7P2P4CV('N9DCR9E_-!
XME,Y-PCD-3/ZD _L32*[!_SD'($)Q,)VH<STN0^ABG1#)TSR L9/YO0[:Z3HK
XM9 5U0%>3=69-[]D[]Z;4HINRJVP0STLF"=D7S0B0:ZVX?9;>B4+YX.4H;GW3
XM;7I/X!DWC]K<])XQ+H9ZS^%B-R'A-LI'.K0H&AU^MAMU"AZ33![L8$A!V3?6
XMMAA]DAU]:,^1O_C&S\:E>#FB$6MRXD_/64#3P 'EGU*.@!I0(XG,LB.4,*#E
XMS5,9S?*E0'6E#YV<XU!)AL\V*D=S(ARUB-!G=3Y)^X+4(F0W!(-G"VF23$&:
XM# DI 2R9!!!_N@\OFD8'3/^\.F>4D2H(,FKQ&@V1G -H((T:L36ZT@!IP+RC
XM?]./?E(W.D=%:1S=9_HPE>J4S?8=^V3JE*.MM  :4O X2P67QSN9ES233M+-
XM*>5RJ295B$",*B8 "A$F:L,O#8"<=%F24B%J2O$H*&V4=!1@EK%EB@-U4 >L
XM)NY%'E%3:-I,G=HKC7JU5)9^4Y)Y2RLG5"&F&X$,--*,]-'0J3'=I:%S#<H&
XM+QH#$"@;C61%5,U)3WPJQB;@/N4F_93,78TV$E CV1Z=@5^1GZ84?\I#BTM!
XMG2X#U:&JP'\J/:O+0Z6H#16@3M2,6BT3JD?-B,<SGSI _$A0-RI)E:C-Y7AR
XM5)':!R&J0M6G''6/_DN$2E%9ZN(XJ1H5II)4BVI2(VI.':D^]<5<5!XZ4S_J
XM076I/[6E8E0@$E!5*E/MJ2\5J"I4W(=4.ZI5/:HU=:CNU*1Z4X.J39U )W.>
XM&D9>.NQB T\8J_%4F(I5&6!/.VE-91XX%7E&LI7:VN*JQ0%4>I*FRAU!YSSQ
XM*5SUJG]U Q4LALHO7VA5O:L"M:@%5;J:/!EK_+*K@?6P1M:KZN8H*V!MK(65
XML ZCR>I8R]UEK5R)]1YJ5L4Z5S-K:'VKF/560E:KMB<M*TWMK$ACJ\K5J@I;
XM+T=8/:ML%8R6U;5:+)O0EEAL8K6M*E.%4VQL7.TKKL3DE%'5LF=<XQMRA6WQ
XM#5VYUL2U4)LK=/UPSY6Y.M= EEPGBO/H0UCU>%VE,9;:+BIY5:X%\KIJUP\G
XM7</K"LFNY;6Z=M?YBEVYJWJ5?>TUKU+7Y7I>CZM]7:_V4*GVUROR75OK=A&O
XM I;(^5?K"F"-%7]5L-$5O.K7(/A>_VM\?; ,5O;!5[.W8;VK)SV9OS6O!%?=
XM^M%"[!<8L0)4F-:!8R$S_P* ,0FQ2(V>SGOJ24]IK=(N<#*VJHS4V.["28K"
XM2:6R]GD^=3GY(ADH]$S2IFRTR@KD"&5C V%S5XRCEHRO1CR.K B).'&U9CS#
XM2I1/QEIHTREN2*N6,5/X#BTA.MPY^ L0@M:!A@>SUNZ\-INUN6U4PZ'"&&"-
XME*,G<\5J"[]P5V L6?UH>K;%]MG:T%L36Y'$ \?TE213.5A'?<N=^VP7,$$R
XM#XEV6:0ES0AG)&,_K4[?R5"V1H4-)[<)A(FM/"4[B*S(1&,C,Y366&<*<P!5
XM[L@G *XU#4X364;RB5$ M>WGY?&J$FDW^M"M;5Q,A+?8G;?Q:]W5S=*,Q;9X
XM'-NRT8=:DXJ[3H*3PL&-KA=M>U,;258 [O4QC#3'0[@M'A&VYP:.GDPV<&C7
XMZ<;Z:.2V(2;:,BHZTZVI<#?P9I/.6+>:%-F9C[EF+B;2.D%*JUTL;9M!6)H6
XMNB2KS])I+<>GQ9.R YNLD&0[E8@:T! #]<=]ZBE&)SM>DJU,2;$4XX8C6?MJ
XM2Y.H&RPIIJ/86DL69(^&KI65O)8$^5IY$FPE4P9-MB5WVR);[O>[,A^K>[:Y
XMJ=HZ.)M;:U6&M,4!V!;H(1!OFTB([E)ZF(@TKXW;0PMO_ZR!<;=YQ-Z\FT*;
XM/^S"BN404X'B(=-Y.URE*:MMM-QTMD1:G#1V"Q'#Q4EGM_;5M(N[-.%(LHU@
XM,$ NUC2JA\?XY53[5RR/>'2F-"(73^Y5DDF:Y56:#,OV:'$B"8(<#'1K0!?H
XM\H5N(PQ@O(_KWPX1/FI''R_EK6I_9?1D7*ZX:EM6ESN95K<JH(2LZW2O3NC%
XMNE2!ZJ(WJF 5PD3JE;$)M)M*R&T:2,?I!BF[]1#W;I"T*ZS8K@ME5K[WCMS=
XM<B:L(*^<@;R35_)6-6]V--2>48HXA'.5:L992[/&" +)+6(@^OZK:\G@H.3V
XMU8P-[J>]C10%+V\,^85'JRJR(%A$E%G J>T]I.%T]C!%J!(GW$#K);TDUL#4
XMW_O[>E-LHSF]+U:X,EJOZTVCZ2W<O%7(CBG0Q6E!T*<SQ0')L<+1VJ-C:K=;
XM0N-15*9;#IX_EYS<8<$-FSY-J>JIXJ0-_>["L8R5E_L^4URY@K4IV&V.6M2<
XM@@\ K"!*KQ&BP5I7T?C,5&(5I I)@KTTM@7;V,%2YFA:"\6$-A0M'>')RL(L
XM61/>H4Q8FRYA!U2$Q:D!/KQ9B'<9+OEI(!FJT6U_B_*.V !SJ.OJ(>VE:WJU
XMLAI6U3A7W>$:'L&\ Z^V5O#X>65PQ>K!6N4'.U(IAX=9R0_VOTVH#[N![@&$
XMZ>T+'J43K-G2-&RB31EQ,XJR;M9Q!B5(3 ]7824.*G+&$<= 13R$GVD9WEIB
XMXPLG,"BSD':5'0TAVI!?'*.1>(@=D**L;B\):UW&0[@<'6<:OKS/K@[/7_ A
XMB GQ'BZKO5CU)@!!;-+D;>SMO+/7:I8M"0Q3G]9R320B$&HZP-86C2%H,U9W
XML;!U'=G5N7X1,7-,OT(%VTC1#5H[U5:/461=]<G.Q-;Y3#^43$4@3.3(ODYY
XM7(U!<8URQQ-VFA5 77PC Q\QML$^XQ^GU49C![(**WF(BI;K#F#9JVU!%-I;
XMQ@@2PDU44EQ5UR$%="ZR0T")C?5"42='K*'(%;6ZD8R/G)&C;&\,JI/C)!_/
XM,24*!130 <E_%#<VL50L='$433Y&RNVSP>1C0A,1<+.\PG#4)Q<H?AR]P$=!
XMEBI/D9T:F*.L51 RNUV#3)F5B $!+)1+*3*.R6>X$V=E,\R3<7(UW,D9YR9S
XM98SLE?U/2[8I+[DDV^*+3#^5![O3R#Q++><NDHR21[)\J<MDN;+@9;W,EZLJ
XM@:RR&]GGBI3CHEE^XIWE92<S*KN!J9Q_KXYB9LR .)4HYF*LY19M56:F5]D%
XM$V +]!X]CEB>R>'D M;/O%R1C5=@;LMT(X/"9+A,3/"87'9-X7(UH]F,XIKW
XMLM\ /Z_Y2IUFB)H9[<99+AMIV2M3(;#LF;^R87:E0)F4)EU1E9@-\K$ R'!A
XM,@MCTD"5XR_G789RF*8^2"TLZQCJS5FLWUFP;ESO3 BAD46FJ&26,;+E\,=@
XMU;-,/GLT1'2$ 2>*N?IC(J-E5ZP_;DJPH8G=U1[QM[,M/W? \Q,Y.9O?(- "
XM.J7<MOH\H%/0"S3/6P9"@^?R7(@FAX1NPW9*#A=5!-F*8PM1KF$5BSHW9B,D
XMHB-S_K .BZT0=UV&_$959W;^J-N9'5MH44M;PS-O'L\3VJ!)V>^\6,AGZS",
XMSB4>QZA84P.^V)P<T@(E[V814(2D&UB!]B--^F"0@4P&.O1(.C%_Q /[?, 8
XM)7AK (P#5F"C2W]INN&$B;21%I6.XT<SDU,CH56JC<:H;WI'*[@<G0@O-!'6
XMB :L,&_F71F#=W'%0M%0K@A]-$ MC+<$8JC.[Y>6)NH,U3N8[P9I"#6W@? 3
XM*9G"FJV=G3[)JDXVD#Y!0ZJGP,$^4]J"<&K5=1FQCP.S(Q50\%)+?(A!3/5;
XM+$?I2&GEV%:-@WIG/L$@U')5TZ0;-(,F<,D8U0=#5^^3/F2K*9 80$=VKP/W
XM:N5K,J EEJ89E# P1D+C8B>79&;&A??3#EL20ZV'E?+5X=;"N$=0A21DC(/P
XM5B[ ++J/7NL4O*=;=(>NID+XZ[9K=1VOX?6Y3L;S>BRG:P_=I_OQ#R*W;B )
XM_>*/)JX#MC!VBDP 42=G6&J=%T[9O<RJ]IE>P /;F=>UO6;4+MDJUVM\'0-?
XM]&:\SO<:*Z-AZFI*(;85^M XTI(@;.B<%DP%'4C8 [D).<4AH+#W]<7.UTE/
XMJ" ](6RR\?$<!M ;6V2S+=',$AOV3V8[6/5H6VS)=GMS2S=VOPL[ZJ'LP#>S
XM67;5CMFIQ"E*@9J]M!MRR)9'0C%=F^R2H4?U]-CVQETQ8^OKKFVMZ5!K'<WR
XMVF;_7A4$?HXS._[:6=2-GDRM;;5=]M;&VB<:TDC=.S 'N';0ULQRFP7C;78M
XMMHTV-LQ.9?MM]\1%;843M[O&V7/;<D_3=ZT42>G)M [PMG"/:)\!N@>WZ#;1
XM0BQT&^[%?;,U]]G6RIS;:T<VS\<*$0A#6\<1Y_1([D+T+A>6K]Z#BCMV7^[&
XM3;DU;O'&:/VZ*%<L,Z"Z1S=<8-ZF.UPW[W)MB#&W[+;>P_M:O^ZX30V/"EH;
XM/)%V@NEN[>QSN+,Z-F<:FW4S[<--K]5W\,;>V!HQ:VL4( ::]\ V,/4[>@-N
XM(9:_)<WIKLP*>7NC:[9]MX5W 8??@\M="C1'Y*A/1B:$ 3YG?,/H\EV\ZIHW
XM!)2D5;0><.(=M0?I\7YVCAL536W_8@;Z][L1W??[6YMPPNTR>2;,_ _L@D#(
XM3(+@PJT%NCAO"8!,T 9"/+Z8#)+\X$I[X?CL6TS$>:)7^HX=\'%[UFM<#H]4
XM: S-$S9IKQ 5IL0I*A6GPK\[J%[QQZIV_>D6+UU)%(7%,A44<9E8'D';5?*"
XM%_'I:E6C2P)7QEC6P+YBXN$Q,0?!Q&W%170TZCPMQP<S!CTXZC$'"N8UOEWJ
XM>#A<VVQX!4[L*+YP*[9Q0]^;N(]O:+EC.)SO;+'DZ[OH<:A4&P8/]\G4X1O!
XM%\.%20T"T+01 N4<X8?I"C, 5L[*6"DK!>$^L 6WH%;82EP)IHUF#8B!&&O$
XM7MXQCGDK9)>K#"92''2*X"T#/D<NRH#]% :6X)#C/NNI4^*@90Y(G+E (2G1
XMO(W@(&0>3H1YQ"'FT.^8)_/*O4'$0-P!Y\;\2 5SN6@&F,A^5J*W<2^"C6SN
XM1ZRY'_E^SWR>H\IZ+O9$ASD?YK(IG*OS3B87<\#.?M]'(SYZ13Q0S,6+."?H
XM +U>%5XE.GVP^3X/UO8\J<9'>;Y.LKDZRNA"565HC(:>KA[ZQ?#F@\5)]KD/
XM_J&X^4EGY^C\;=P P1L]*\H> >D<79S$&HHI8"U9,Q<I^;RCXRDG/M!?>D27
X=T@*]Z8R7DZG+8RP5J0%.Y,KZC*:NO1A,>L@+"@!9
X 
Xend
END_OF_FILE
if test 15136 -ne `wc -c <'w_icons.c.Z.uu'`; then
    echo shar: \"'w_icons.c.Z.uu'\" unpacked with wrong size!
fi
# end of 'w_icons.c.Z.uu'
fi
echo shar: End of archive 12 \(of 25\).
cp /dev/null ark12isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 25 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
-- 
Molecular Simulations, Inc.             mail: dcmartin@msi.com
796 N. Pastoria Avenue                  uucp: uunet!dcmartin
Sunnyvale, California 94086             at&t: 408/522-9236
