Path: uunet!zaphod.mps.ohio-state.edu!mips!msi!dcmartin
From: envbvs@bea.lbl.gov (Brian V. Smith)
Newsgroups: comp.sources.x
Subject: v16i021: Xfig 2.1.3, Part16/25
Message-ID: <1992Feb4.150129.1142@msi.com>
Date: 4 Feb 92 15:01:29 GMT
References: <csx-16i006-xfig-2.1.3@uunet.UU.NET>
Sender: dcmartin@msi.com (David C. Martin - Moderator)
Organization: Molecular Simulations, Inc.
Lines: 1676
Approved: dcmartin@msi.com
Originator: dcmartin@fascet

Submitted-by: envbvs@bea.lbl.gov (Brian V. Smith)
Posting-number: Volume 16, Issue 21
Archive-name: xfig-2.1.3/part16

# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# If this archive is complete, you will see the following message at the end:
#		"End of archive 16 (of 25)."
# Contents:  Examples/arithmetic.fig.uu Examples/logic.fig.uu d_box.c
#   e_arrow.c u_drag.c u_geom.c
# Wrapped by dcmartin@fascet on Tue Feb  4 06:42:31 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'Examples/arithmetic.fig.uu' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Examples/arithmetic.fig.uu'\"
else
echo shar: Extracting \"'Examples/arithmetic.fig.uu'\" \(10155 characters\)
sed "s/^X//" >'Examples/arithmetic.fig.uu' <<'END_OF_FILE'
Xbegin 664 arithmetic.fig
XM(T9)1R`R+C`*.#`@,@HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,2`P"@DP(#`@
XM,2XP,#`@-"XP,#`@."XP,#`*"2`S,S4@,3<U(#,S-2`R,#(@.3DY.2`Y.3DY
XM"C(@,2`P(#$@,"`P(#`@,"`P+C`P,"`Q(#`*"3`@,"`Q+C`P,"`T+C`P,"`X
XM+C`P,`H)(#(W-B`Q-S4@,C<V(#(P,B`Y.3DY(#DY.3D*,B`R(#`@,2`P(#`@
XM,"`P(#`N,#`P(#`@,`H)(#(U-"`R,#4@,CDV(#(P-2`R.38@,C(R(#(U-"`R
XM,C(@,C4T(#(P-2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#$@
XM,`H),"`P(#$N,#`P(#0N,#`P(#@N,#`P"@D@,S8U(#8R,B`S-C4@-C4S(#DY
XM.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,2`P"@DP(#`@,2XP,#`@
XM-"XP,#`@."XP,#`*"2`S-38@-C(U(#,U-B`V-3,@.3DY.2`Y.3DY"C(@,2`P
XM(#$@,"`P(#`@,"`P+C`P,"`Q(#`*"3`@,"`Q+C`P,"`T+C`P,"`X+C`P,`H)
XM(#,T."`V,CD@,S0X(#8U,R`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N
XM,#`P(#`@,0H),"`P(#$N,#`P(#0N,#`P(#@N,#`P"@D@-3,V(#0T-2`U,S8@
XM-#<P(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`Q"@DP(#`@
XM,2XP,#`@-"XP,#`@."XP,#`*"2`U,S8@-#DW(#4S-B`W,#0@.3DY.2`Y.3DY
XM"C(@,B`P(#$@,"`P(#`@,"`P+C`P,"`P(#`*"2`T.3(@-#<P(#0Y,B`T.34@
XM-3@R(#0Y-2`U.#(@-#<P(#0Y,B`T-S`@.3DY.2`Y.3DY"C(@,2`P(#$@,"`P
XM(#`@,"`P+C`P,"`Q(#`*"3`@,"`Q+C`P,"`T+C`P,"`X+C`P,`H)(#0S-R`U
XM-C<@-#4Y(#4V-R`T-3D@-S`Q(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@
XM,"XP,#`@,2`P"@DP(#`@,2XP,#`@-"XP,#`@."XP,#`*"2`S.3`@-38U(#0P
XM.2`U-C4@.3DY.2`Y.3DY"C(@,B`P(#$@,"`P(#`@,"`P+C`P,"`P(#`*"2`T
XM,3(@-3,X(#0Q,B`U.30@-#,W(#4Y-"`T,S<@-3,X(#0Q,B`U,S@@.3DY.2`Y
XM.3DY"C(@,2`P(#$@,"`P(#`@,"`P+C`P,"`P(#$*"3`@,"`Q+C`P,"`T+C`P
XM,"`X+C`P,`H)(#,R,"`V,C0@,CDV(#8R-"`R.38@-S`T(#DY.3D@.3DY.0HR
XM(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,2`P"@DP(#`@,2XP,#`@-"XP,#`@."XP
XM,#`*"2`S-C4@-#8U(#,V-2`U,#4@.3DY.2`Y.3DY"C(@,2`P(#$@,"`P(#`@
XM,"`P+C`P,"`Q(#`*"3`@,"`Q+C`P,"`T+C`P,"`X+C`P,`H)(#,U-B`T-C4@
XM,S4V(#4P,B`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#$@,`H)
XM,"`P(#$N,#`P(#0N,#`P(#@N,#`P"@D@,S0X(#0V-2`S-#@@-#DX(#DY.3D@
XM.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`Q"@DP(#`@,2XP,#`@-"XP
XM,#`@."XP,#`*"2`S,SD@-#DS(#,S.2`T-C4@.3DY.2`Y.3DY"C(@,2`P(#$@
XM,"`P(#`@,"`P+C`P,"`P(#$*"3`@,"`Q+C`P,"`T+C`P,"`X+C`P,`H)(#(V
XM."`U,#@@,C4T(#4P."`R-30@-S`T(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P
XM(#`@,"XP,#`@,2`P"@DP(#`@,2XP,#`@-"XP,#`@."XP,#`*"2`R.38@-3`X
XM(#,R,"`U,#@@.3DY.2`Y.3DY"C(@,B`P(#$@,"`P(#`@,"`P+C`P,"`P(#`*
XM"2`R-S$@-#@R(#(Y-B`T.#(@,CDV(#4S-"`R-S$@-3,T(#(W,2`T.#(@.3DY
XM.2`Y.3DY"C(@,R`P(#$@,"`P(#`@,"`P+C`P,"`P(#`*"2`S,C,@-#@W(#,Y
XM,"`U,3<@,SDP(#8Q,"`S,C,@-C0P(#,R,R`V,#(@,S0X(#4X.2`S-#@@-3,X
XM(#,R,R`U,C4@,S(S(#0X-R`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N
XM,#`P(#`@,`H)(#4S-B`R,C(@-3(W(#(R-B`Y.3DY(#DY.3D*,B`Q(#`@,2`P
XM(#`@,"`P(#`N,#`P(#`@,0H),"`P(#$N,#`P(#0N,#`P(#@N,#`P"@D@-3,Q
XM(#(X,R`U,S$@,S`S(#4Y-2`S,#,@-3DU(#0P,2`U-CD@-#`Q(#DY.3D@.3DY
XM.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`Q"@DP(#`@,2XP,#`@-"XP,#`@
XM."XP,#`*"2`U,S$@,3<W(#4S,2`R-C0@.3DY.2`Y.3DY"C(@,B`P(#$@,"`P
XM(#`@,"`P+C`P,"`P(#`*"2`U,#$@,C8T(#4P,2`R.#$@-38Q(#(X,2`U-C$@
XM,C8T(#4P,2`R-C0@.3DY.2`Y.3DY"C(@,B`P(#$@,"`P(#`@,"`P+C`P,"`P
XM(#`*"2`U,#$@,S,S(#4P,2`T-#,@-38Y(#0T,R`U-CD@,S,S(#4P,2`S,S,@
XM.3DY.2`Y.3DY"C(@,2`P(#$@,"`P(#`@,"`P+C`P,"`P(#`*"2`T.#<@,S@V
XM(#4P,"`S.3D@-#@W(#0Q,B`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N
XM,#`P(#`@,`H)(#0T-2`T,#4@-#DR(#0P-2`Y.3DY(#DY.3D*,B`Q(#`@,2`P
XM(#`@,"`P(#`N,#`P(#`@,`H)(#0T-2`S.3,@-#DR(#,Y,R`Y.3DY(#DY.3D*
XM,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#,Y.2`S,S<@,SDP(#,T,2`Y
XM.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#,Y.2`R,C(@
XM,SDP(#(R-B`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#$@,`H)
XM,"`P(#$N,#`P(#0N,#`P(#@N,#`P"@D@,SDU(#,Y,R`S.34@,C@S(#DY.3D@
XM.3DY.0HR(#(@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,S8U(#(V-"`S-C4@
XM,C@Q(#0R-2`R.#$@-#(U(#(V-"`S-C4@,C8T(#DY.3D@.3DY.0HR(#$@,"`Q
XM(#`@,"`P(#`@,"XP,#`@,"`Q"@DP(#`@,2XP,#`@-"XP,#`@."XP,#`*"2`S
XM.34@,3<W(#,Y-2`R-C0@.3DY.2`Y.3DY"C(@,B`P(#$@,"`P(#`@,"`P+C`P
XM,"`P(#`*"2`T,CD@,S8W(#0R.2`T,S$@-#0U(#0S,2`T-#4@,S8W(#0R.2`S
XM-C<@.3DY.2`Y.3DY"C(@,2`P(#$@,"`P(#`@,"`P+C`P,"`P(#`*"2`Q,3,@
XM-#`U(#0R.2`T,#4@.3DY.2`Y.3DY"C(@,2`P(#$@,"`P(#`@,"`P+C`P,"`P
XM(#`*"2`Q,3,@,SDS(#0R.2`S.3,@.3DY.2`Y.3DY"C(@,2`P(#$@,"`P(#`@
XM,"`P+C`P,"`P(#`*"2`Q,#4@,3<U(#4W-"`Q-S4@.3DY.2`Y.3DY"C(@,2`P
XM(#$@,"`P(#`@,"`P+C`P,"`P(#`*"2`Q,#4@,38R(#4W-"`Q-C(@.3DY.2`Y
XM.3DY"C(@,2`P(#$@,"`P(#`@,"`P+C`P,"`Q(#`*"3`@,"`Q+C`P,"`T+C`P
XM,"`X+C`P,`H)(#$S,"`Q-S4@,3,P(#(P,B`Y.3DY(#DY.3D*,B`R(#`@,2`P
XM(#`@,"`P(#`N,#`P(#`@,`H)(#$P.2`R,#4@,34R(#(P-2`Q-3(@,C(R(#$P
XM.2`R,C(@,3`Y(#(P-2`Y.3DY(#DY.3D*,B`R(#`@,2`P(#`@,"`P(#`N,#`P
XM(#`@,`H)(#$V.2`R,#4@,C$Q(#(P-2`R,3$@,C(R(#$V.2`R,C(@,38Y(#(P
XM-2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#$@,`H),"`P(#$N
XM,#`P(#0N,#`P(#@N,#`P"@D@,3DP(#$W-2`Q.3`@,C`R(#DY.3D@.3DY.0HR
XM(#(@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,3,P(#(T-R`Q,S`@,S`W(#$Y
XM,"`S,#<@,3DP(#(T-R`Q,S`@,C0W(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P
XM(#`@,"XP,#`@,2`P"@DP(#`@,2XP,#`@-"XP,#`@."XP,#`*"2`Q,S`@,C(R
XM(#$T-B`R-#0@.3DY.2`Y.3DY"C(@,2`P(#$@,"`P(#`@,"`P+C`P,"`Q(#`*
XM"3`@,"`Q+C`P,"`T+C`P,"`X+C`P,`H)(#$Y,"`R,C(@,3<R(#(T-"`Y.3DY
XM(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#$S-2`Q.#,@,3(V
XM(#$X-R`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#$Y
XM-"`Q.#,@,3@V(#$X-R`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P
XM(#$@,`H),"`P(#$N,#`P(#0N,#`P(#@N,#`P"@D@,38P(#,P-R`Q-C`@,S,P
XM(#DY.3D@.3DY.0HR(#(@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,3,P(#,S
XM,R`Q,S`@,S4P(#$Y,"`S-3`@,3DP(#,S,R`Q,S`@,S,S(#DY.3D@.3DY.0HR
XM(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,2`P"@DP(#`@,2XP,#`@-"XP,#`@."XP
XM,#`*"2`Q-C`@,S4P(#$V,"`S.3`@.3DY.2`Y.3DY"C(@,2`P(#$@,"`P(#`@
XM,"`P+C`P,"`P(#`*"2`Q-C0@,S$V(#$U-B`S,C`@.3DY.2`Y.3DY"C(@,2`P
XM(#$@,"`P(#`@,"`P+C`P,"`P(#`*"2`Q-C0@,S8W(#$U-B`S-S$@.3DY.2`Y
XM.3DY"C(@,2`P(#$@,"`P(#`@,"`P+C`P,"`P(#`*"2`S,#D@,S8W(#,P,2`S
XM-S$@.3DY.2`Y.3DY"C(@,2`P(#$@,"`P(#`@,"`P+C`P,"`P(#`*"2`S,#D@
XM,S$V(#,P,2`S,C`@.3DY.2`Y.3DY"C(@,2`P(#$@,"`P(#`@,"`P+C`P,"`Q
XM(#`*"3`@,"`Q+C`P,"`T+C`P,"`X+C`P,`H)(#,P-2`S-3`@,S`U(#,Y,"`Y
XM.3DY(#DY.3D*,B`R(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#(W-B`S,S,@
XM,C<V(#,U,"`S,S4@,S4P(#,S-2`S,S,@,C<V(#,S,R`Y.3DY(#DY.3D*,B`Q
XM(#`@,2`P(#`@,"`P(#`N,#`P(#$@,`H),"`P(#$N,#`P(#0N,#`P(#@N,#`P
XM"@D@,S`U(#,P-R`S,#4@,S,S(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@
XM,"XP,#`@,"`P"@D@,S,Y(#$X,R`S,S$@,3@W(#DY.3D@.3DY.0HR(#$@,"`Q
XM(#`@,"`P(#`@,"XP,#`@,"`P"@D@,C<Y(#$X,R`R-S$@,3@W(#DY.3D@.3DY
XM.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,2`P"@DP(#`@,2XP,#`@-"XP,#`@
XM."XP,#`*"2`S,S4@,C(R(#,Q-R`R-#0@.3DY.2`Y.3DY"C(@,2`P(#$@,"`P
XM(#`@,"`P+C`P,"`Q(#`*"3`@,"`Q+C`P,"`T+C`P,"`X+C`P,`H)(#(W-B`R
XM,C(@,CDR(#(T-"`Y.3DY(#DY.3D*,B`R(#`@,2`P(#`@,"`P(#`N,#`P(#`@
XM,`H)(#(W-B`R-#<@,C<V(#,P-R`S,S4@,S`W(#,S-2`R-#<@,C<V(#(T-R`Y
XM.3DY(#DY.3D*,B`R(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#,Q,R`R,#4@
XM,S4V(#(P-2`S-38@,C(R(#,Q,R`R,C(@,S$S(#(P-2`Y.3DY(#DY.3D*,B`R
XM(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#$U,B`U-C<@,C$Y(#4V-R`R,3D@
XM-3@U(#$U,B`U.#4@,34R(#4V-R`Y.3DY(#DY.3D*,B`R(#`@,2`P(#`@,"`P
XM(#`N,#`P(#`@,`H)(#$U,B`U.#4@,C$Y(#4X-2`R,3D@-C`R(#$U,B`V,#(@
XM,34R(#4X-2`Y.3DY(#DY.3D*,B`R(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)
XM(#$U,B`V,#(@,C$Y(#8P,B`R,3D@-C$Y(#$U,B`V,3D@,34R(#8P,B`Y.3DY
XM(#DY.3D*,B`R(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#$U,B`V,3D@,C$Y
XM(#8Q.2`R,3D@-C,V(#$U,B`V,S8@,34R(#8Q.2`Y.3DY(#DY.3D*,B`Q(#`@
XM,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#$S-2`W,#0@-38Q(#<P-"`Y.3DY(#DY
XM.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#$S-2`W,3<@-38Q(#<Q
XM-R`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#4U-2`V
XM.3@@-38W(#<Q,"`U-34@-S(S(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@
XM,"XP,#`@,"`P"@D@,30Q(#8Y.2`Q,C<@-S$Q(#$T,2`W,C0@.3DY.2`Y.3DY
XM"C(@,2`P(#$@,"`P(#`@,"`P+C`P,"`Q(#$*"3`@,"`Q+C`P,"`T+C`P,"`X
XM+C`P,`H),"`P(#$N,#`P(#0N,#`P(#@N,#`P"@D@,3@V(#8S."`Q.#8@-S`Q
XM(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`Q"@DP(#`@,2XP
XM,#`@-"XP,#`@."XP,#`*"2`Q,#<@,C$T(#DR(#(Q-"`Y.3DY(#DY.3D*,B`Q
XM(#`@,2`P(#`@,"`P(#`N,#`P(#`@,0H),"`P(#$N,#`P(#0N,#`P(#@N,#`P
XM"@D@,C$S(#(Q-"`R,CD@,C$T(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@
XM,"XP,#`@,"`Q"@DP(#`@,2XP,#`@-"XP,#`@."XP,#`*"2`R-3$@,C$T(#(S
XM-R`R,30@.3DY.2`Y.3DY"C(@,2`P(#$@,"`P(#`@,"`P+C`P,"`P(#$*"3`@
XM,"`Q+C`P,"`T+C`P,"`X+C`P,`H)(#$Y,2`S-#$@,C`W(#,T,2`Y.3DY(#DY
XM.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,0H),"`P(#$N,#`P(#0N,#`P
XM(#@N,#`P"@D@,S,W(#,T,2`S-3(@,S0Q(#DY.3D@.3DY.0HR(#$@,"`Q(#`@
XM,"`P(#`@,"XP,#`@,"`Q"@DP(#`@,2XP,#`@-"XP,#`@."XP,#`*"2`S-3@@
XM,C$T(#,W,R`R,30@.3DY.2`Y.3DY"C(@,2`P(#(@,"`P(#`@,"`P+C`P,"`P
XM(#`*"2`Q-S$@,C@X(#$U,2`R-C@@.3DY.2`Y.3DY"C(@,2`P(#(@,"`P(#`@
XM,"`P+C`P,"`P(#`*"2`Q-S$@,C8X(#$U,2`R.#@@.3DY.2`Y.3DY"C(@,2`P
XM(#(@,"`P(#`@,"`P+C`P,"`P(#`*"2`S,#4@,C8X(#,P-2`R.#@@.3DY.2`Y
XM.3DY"C(@,2`P(#(@,"`P(#`@,"`P+C`P,"`P(#`*"2`S,34@,C<X(#(Y-2`R
XM-S@@.3DY.2`Y.3DY"C0@,"`P(#$R(#`@,"`P(#`N,#`P(#$@.2`Y,"`R-C,@
XM,30U($%2251(345424,@54Y)5`$*-"`P(#`@,3(@,"`P(#`@,"XP,#`@,2`Y
XM(#<R(#$Q-B`U,3@@041$4D534R!53DE4`0HT(#`@,"`Q,B`P(#`@,"`P+C`P
XM,"`Q(#D@-30@,S(V(#0U-R!/4$52051)3TX!"C0@,"`P(#$R(#`@,"`P(#`N
XM,#`P(#$@.2`S,"`T.3<@-3`X("A-05(I`0HT(#`@,"`Q,B`P(#`@,"`P+C`P
XM,"`Q(#D@-S(@,C4X(#<S."!!1$1215-3("!"55,!"C0@,"`P(#$R(#`@,"`P
XM(#`N,#`P(#$@.2`V-B`S,S4@-C<Q($-/3D0@($-/1$53`0HT(#`@,"`Q,B`P
XM(#`@,"`P+C`P,"`Q(#D@,3@@-#$R(#4S-"!/550!"C0@,"`P(#$R(#`@,"`P
XM(#`N,#`P(#$@.2`V-B`T.38@-#@W($U%32!!1%(@4D5'`0HT(#`@,"`Q,B`P
XM(#`@,"`P+C`P,"`Q(#D@,3@@,S4V(#4V-R!!3%4!"C0@,"`P(#$R(#`@,"`P
XM(#`N,#`P(#$@.2`Q,B`Q-S<@-C,R(%(P`0HT(#`@,"`Q,B`P(#`@,"`P+C`P
XM,"`Q(#D@,3(@,3<W(#8Q-"!2,0$*-"`P(#`@,3(@,"`P(#`@,"XP,#`@,2`Y
XM(#$R(#$W-R`U.3<@4C(!"C0@,"`P(#$R(#`@,"`P(#`N,#`P(#$@.2`Q,B`Q
XM-S<@-3@P(%(S`0HT(#`@,"`Q,B`P(#`@,"`P+C`P,"`Q(#D@,C0@,C8V(#0W
XM,R!414U0`0HT(#`@,"`Q,B`P(#`@,"`P+C`P,"`Q(#D@-#(@-3`Y(#0T,"!!
XM1$1215-3`0HT(#`@,"`Q,B`P(#`@,"`P+C`P,"`Q(#D@-#@@-3,V(#(V,"!$
XM051!($]55`$*-"`P(#`@,3(@,"`P(#`@,"XP,#`@,2`Y(#,V(#4S-B`R-#<@
XM345-3U)9`0HT(#`@,"`Q,B`P(#`@,"`P+C`P,"`Q(#D@,3@@-3$Y(#(W-R!-
XM1$\!"C0@,"`P(#$R(#`@,"`P(#`N,#`P(#$@.2`R-"`S-S@@,C<W(%E43T$!
XM"C0@,"`P(#$R(#`@,"`P(#`N,#`P(#$@.2`Q."`U,SD@-#`Q($]55`$*-"`P
XM(#`@,3(@,"`P(#`@,"XP,#`@,2`Y(#$R(#4P-B`T,#$@24X!"C0@,"`P(#$R
XM(#`@,"`P(#`N,#`P(#$@.2`Q."`U,3D@,S<V(%)!30$*-"`P(#`@,3(@,"`P
XM(#`@,"XP,#`@,2`Y(#(T(#4Q-"`S-3@@1$%400$*-"`P(#`@,3(@,"`P(#`@
XM,"XP,#`@,2`Y(#,V(#0R,"`S-3@@651/345-`0HT(#`@,"`Q,B`P(#`@,"`P
XM+C`P,"`Q(#D@,S`@,C`W(#,X."!9($)54P$*-"`P(#`@,3(@,"`P(#`@,"XP
XM,#`@,2`Y(#(T(#$S-2`Q-3@@04)54P$*-"`P(#`@,3(@,"`P(#`@,"XP,#`@
XM,2`Y(#(T(#$Q,R`R,3<@355,,`$*-"`P(#`@,3(@,"`P(#`@,"XP,#`@,2`Y
XM(#(T(#$W,B`R,3<@355,,0$*-"`P(#`@,3(@,"`P(#`@,"XP,#`@,2`Y(#,V
XM(#$S-2`S-#8@355,3U54`0HT(#`@,"`Q,B`P(#`@,"`P+C`P,"`Q(#D@,S8@
XM,C<Y(#,T-B!!1$1/550!"C0@,"`P(#$R(#`@,"`P(#`N,#`P(#$@.2`R-"`S
XM,3@@,C$W($%$1#$!"C0@,"`P(#$R(#`@,"`P(#`N,#`P(#$@.2`R-"`R-3@@
X*,C$W($%$1#`!"C$!
X`
Xend
END_OF_FILE
if test 10155 -ne `wc -c <'Examples/arithmetic.fig.uu'`; then
    echo shar: \"'Examples/arithmetic.fig.uu'\" unpacked with wrong size!
fi
# end of 'Examples/arithmetic.fig.uu'
fi
if test -f 'Examples/logic.fig.uu' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Examples/logic.fig.uu'\"
else
echo shar: Extracting \"'Examples/logic.fig.uu'\" \(9388 characters\)
sed "s/^X//" >'Examples/logic.fig.uu' <<'END_OF_FILE'
Xbegin 664 logic.fig
XM(T9)1R`R+C`*.#`@,@HQ(#0@,"`Q(#`@,"`P(#(Q(#`N,#`P(#$@,"XP,#`@
XM,C(T(#<Y(#,@,R`R,C(@-SD@,C(W(#<Y"C$@,R`P(#$@,"`P(#`@,"`P+C`P
XM,"`Q(#`N,#`P(#(Q.2`R-"`Q,"`Q,"`R,3D@,C0@,C(Y(#(T"C$@,R`P(#$@
XM,"`P(#`@,"`P+C`P,"`Q(#`N,#`P(#4S-"`Q,#0@-2`U(#4S-"`Q,#0@-3,Y
XM(#$P-`HQ(#,@,"`Q(#`@,"`P(#`@,"XP,#`@,2`P+C`P,"`T,S0@-#0@,3`@
XM,3`@-#,T(#0T(#0T-"`T-`HQ(#0@,"`Q(#`@,"`P(#(Q(#`N,#`P(#$@,"XP
XM,#`@-#<Y(#<Y(#,@,R`T-S<@-SD@-#@R(#<Y"C$@-"`P(#$@,"`P(#`@,C$@
XM,"XP,#`@,2`P+C`P,"`V.#D@-SD@,R`S(#8X-R`W.2`V.3(@-SD*,2`S(#`@
XM,2`P(#`@,"`P(#`N,#`P(#$@,"XP,#`@,S8T(#(T.2`Q,"`Q,"`S-C0@,C0Y
XM(#,W-"`R-#D*,2`T(#`@,2`P(#`@,"`R,2`P+C`P,"`Q(#`N,#`P(#0Q.2`R
XM,C0@,R`S(#0Q-R`R,C0@-#(R(#(R-`HQ(#0@,"`Q(#`@,"`P(#(Q(#`N,#`P
XM(#$@,"XP,#`@-#$Y(#,T.2`S(#,@-#$W(#,T.2`T,C(@,S0Y"C$@-"`P(#$@
XM,"`P(#`@,C$@,"XP,#`@,2`P+C`P,"`T-#D@,S0Y(#,@,R`T-#<@,S0Y(#0U
XM,B`S-#D*,2`S(#`@,2`P(#`@,"`P(#`N,#`P(#$@,"XP,#`@-C0@,C<X(#$P
XM(#$P(#8T(#(W."`W-"`R-S@*,2`T(#`@,2`P(#`@,"`R,2`P+C`P,"`Q(#`N
XM,#`P(#$Q.2`R-SD@,R`S(#$Q-R`R-SD@,3(R(#(W.0HQ(#0@,"`Q(#`@,"`P
XM(#(Q(#`N,#`P(#$@,"XP,#`@,C4Y(#(W.2`S(#,@,C4W(#(W.2`R-C(@,C<Y
XM"C$@,R`P(#$@,"`P(#`@,"`P+C`P,"`Q(#`N,#`P(#(R-"`R-C0@,3`@,3`@
XM,C(T(#(V-"`R,S0@,C8T"C$@-"`P(#$@,"`P(#`@,C$@,"XP,#`@,2`P+C`P
XM,"`U.3D@,SDT(#,@,R`U.3<@,SDT(#8P,B`S.30*,2`T(#`@,2`P(#`@,"`R
XM,2`P+C`P,"`Q(#`N,#`P(#8R.2`S.30@,R`S(#8R-R`S.30@-C,R(#,Y-`HQ
XM(#0@,"`Q(#`@,"`P(#(Q(#`N,#`P(#$@,"XP,#`@-3DY(#(R-"`S(#,@-3DW
XM(#(R-"`V,#(@,C(T"C$@,R`P(#$@,"`P(#`@,"`P+C`P,"`Q(#`N,#`P(#4V
XM-"`R,#,@,3`@,3`@-38T(#(P,R`U-S0@,C`S"C$@,R`P(#$@,"`P(#`@,"`P
XM+C`P,"`Q(#`N,#`P(#$T-"`U,SD@-"`T(#$T-"`U,SD@,30X(#4S.0HQ(#,@
XM,"`Q(#`@,"`P(#`@,"XP,#`@,2`P+C`P,"`Q-3D@-3,T(#4@-2`Q-3D@-3,T
XM(#$V-"`U,S0*,2`S(#`@,2`P(#`@,"`P(#`N,#`P(#$@,"XP,#`@,3<T(#4S
XM.2`T(#0@,3<T(#4S.2`Q-S@@-3,Y"C(@,2`P(#$@,"`P(#`@,"`P+C`P,"`P
XM(#`*"2`Q,C0@-3D@,34T(#4Y(#$X-"`T.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P
XM(#`@,"`P(#`N,#`P(#`@,`H)(#$R-"`Y.2`Q-30@.3D@,3@T(#@Y(#DY.3D@
XM.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,3@T(#4Y(#(R-"`U
XM.2`R,C0@.3D@,3@T(#DY(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP
XM,#`@,"`P"@D@,C(T(#<Y(#(U-"`W.2`R.#0@-CD@.3DY.2`Y.3DY"C(@,2`P
XM(#$@,"`P(#`@,"`P+C`P,"`P(#`*"2`R.#0@-SD@,S$Y(#<Y(#DY.3D@.3DY
XM.0HR(#,@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@-3`T(#@Y(#4P-"`Q,3D@
XM-3(Y(#$P-"`U,#0@.#D@.3DY.2`Y.3DY"C(@,2`P(#$@,"`P(#`@,"`P+C`P
XM,"`P(#`*"2`U,#0@,3`T(#0W.2`Q,#0@-#<Y(#4T(#4X-"`U-"`V,30@-#0@
XM.3DY.2`Y.3DY"C(@,2`P(#$@,"`P(#`@,"`P+C`P,"`P(#`*"2`U,SD@,3`T
XM(#4X-"`Q,#0@-C$T(#DT(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP
XM,#`@,"`P"@D@-C$T(#4T(#8X.2`U-"`V.#D@,3`T(#8Q-"`Q,#0@.3DY.2`Y
XM.3DY"C(@,2`P(#$@,"`P(#`@,"`P+C`P,"`P(#`*"2`V.#D@-SD@-S(Y(#<Y
XM(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@-#<Y(#<Y
XM(#0T.2`W.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)
XM(#4Y-R`X,B`V,#8@.#(@.3DY.2`Y.3DY"C(@,2`P(#$@,"`P(#`@,"`P+C`P
XM,"`P(#`*"2`T-#D@,S0Y(#0T.2`S,#0@-#4Y(#(W-"`Y.3DY(#DY.3D*,B`Q
XM(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#,X.2`S-#D@,S@Y(#,P-"`S.3D@
XM,C<T(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,S@Y
XM(#(W-"`S.#D@,C(T(#0T.2`R,C0@-#0Y(#(W-"`Y.3DY(#DY.3D*,B`Q(#`@
XM,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#0R-R`Q.3,@-#$R(#(P,R`Y.3DY(#DY
XM.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#0Q.2`Q.3D@-#$Y(#(R
XM-"`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#0P.2`T
XM,CD@-#(Y(#0R.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@
XM,`H)(#0Q-"`T,S0@-#(T(#0S-"`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P
XM(#`N,#`P(#`@,`H)(#0Q-B`T,SD@-#(Q(#0S.2`Y.3DY(#DY.3D*,B`Q(#`@
XM,2`P(#`@,"`P(#`N,#`P(#$@,`H),"`P(#$N,#`P(#0N,#`P(#@N,#`P"@D@
XM,S@Y(#,T.2`T.30@,S0Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP
XM,#`@,"`P"@D@-#$Y(#,T.2`T,3D@,S8Y(#0Q-"`S-S0@-#(T(#,W.2`T,30@
XM,S@T(#0R-"`S.#D@-#$T(#,Y-"`T,C0@,SDY(#0Q-"`T,#0@-#(T(#0P.2`T
XM,3D@-#$T(#0Q.2`T,CD@.3DY.2`Y.3DY"C(@,2`P(#$@,"`P(#`@,"`P+C`P
XM,"`P(#`*"2`Q,3D@-#(Y(#$Q.2`S.#0@,3(Y(#,U-"`Y.3DY(#DY.3D*,B`Q
XM(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#$Q.2`S-30@,3$Y(#,R-"`Q,CD@
XM,CDT(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,3$V
XM(#0S.2`Q,C$@-#,Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@
XM,"`P"@D@,3$T(#0S-"`Q,C0@-#,T(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P
XM(#`@,"XP,#`@,"`P"@D@,3`Y(#0R.2`Q,CD@-#(Y(#DY.3D@.3DY.0HR(#$@
XM,"`Q(#`@,"`P(#`@,"XP,#`@,2`P"@DP(#`@,2XP,#`@-"XP,#`@."XP,#`*
XM"2`Q,3D@,C<Y(#$U.2`R-SD@.3DY.2`Y.3DY"C(@,2`P(#$@,"`P(#`@,"`P
XM+C`P,"`P(#`*"2`Q,C<@,3DS(#$Q,B`R,#,@.3DY.2`Y.3DY"C(@,2`P(#$@
XM,"`P(#`@,"`P+C`P,"`P(#`*"2`Q,3D@,3DY(#$Q.2`R,30@.3DY.2`Y.3DY
XM"C(@,2`P(#$@,"`P(#`@,"`P+C`P,"`P(#`*"2`Q,3D@,C$T(#$Q.2`R,C0@
XM,3$T(#(R.2`Q,C0@,C,T(#$Q-"`R,SD@,3(T(#(T-"`Q,30@,C0Y(#$R-"`R
XM-30@,3$T(#(U.2`Q,C0@,C8T(#$Q.2`R-CD@,3$Y(#(Y-"`Y.3DY(#DY.3D*
XM,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#(T.2`T-#D@,C8Y(#0T.2`Y
XM.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#(U-"`T-30@
XM,C8T(#0U-"`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)
XM(#(U-B`T-3D@,C8Q(#0U.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N
XM,#`P(#`@,`H)(#(U.2`R.30@,C,T(#,Q.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P
XM(#`@,"`P(#`N,#`P(#`@,`H)(#(R-B`S,3(@,C$Y(#,S-"`Q.3D@,S4T(#DY
XM.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,C(V(#,Y-B`R
XM,3D@,S<T(#$Y.2`S-30@.3DY.2`Y.3DY"C(@,2`P(#$@,"`P(#`@,"`P+C`P
XM,"`P(#`*"2`R-3D@-#$T(#(S-"`S.#D@.3DY.2`Y.3DY"C(@,2`P(#$@,"`P
XM(#`@,"`P+C`P,"`P(#`*"2`R-3D@-#$T(#(X-"`S.#D@.3DY.2`Y.3DY"C(@
XM,2`P(#$@,"`P(#`@,"`P+C`P,"`P(#`*"2`R.3(@,SDV(#(Y.2`S-S0@,S$Y
XM(#,U-"`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#(Y
XM,B`S,3(@,CDY(#,S-"`S,3D@,S4T(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P
XM(#`@,"XP,#`@,"`P"@D@,C4Y(#(Y-"`R.#0@,S$Y(#DY.3D@.3DY.0HR(#$@
XM,"`Q(#`@,"`P(#`@,"XP,#`@,2`P"@DP(#`@,2XP,#`@-"XP,#`@."XP,#`*
XM"2`R-3D@,C<Y(#(Y.2`R-SD@.3DY.2`Y.3DY"C(@,2`P(#$@,"`P(#`@,"`P
XM+C`P,"`P(#`*"2`R-C<@,3DS(#(U,B`R,#,@.3DY.2`Y.3DY"C(@,2`P(#$@
XM,"`P(#`@,"`P+C`P,"`P(#`*"2`R-3D@,3DY(#(U.2`R,30@.3DY.2`Y.3DY
XM"C(@,2`P(#$@,"`P(#`@,"`P+C`P,"`P(#`*"2`R-3D@,C$T(#(U.2`R,C0@
XM,C4T(#(R.2`R-C0@,C,T(#(U-"`R,SD@,C8T(#(T-"`R-30@,C0Y(#(V-"`R
XM-30@,C4T(#(U.2`R-C0@,C8T(#(U.2`R-CD@,C4Y(#(Y-"`Y.3DY(#DY.3D*
XM,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#$Y.2`S-30@,C0T(#,U-"`R
XM-S0@,S0T(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@
XM,C<T(#,U-"`S,3D@,S4T(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP
XM,#`@,"`P"@D@,C4Y(#0Q-"`R-3D@-#0Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@
XM,"`P(#`@,"XP,#`@,"`P"@D@-3@Y(#0W-"`V,#D@-#<T(#DY.3D@.3DY.0HR
XM(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@-3DT(#0W.2`V,#0@-#<Y(#DY
XM.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@-3DV(#0X-"`V
XM,#$@-#@T(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,2`P"@DP
XM(#`@,2XP,#`@-"XP,#`@."XP,#`*"2`U-CD@,SDT(#8W-"`S.30@.3DY.2`Y
XM.3DY"C(@,2`P(#$@,"`P(#`@,"`P+C`P,"`P(#`*"2`U.3D@,SDT(#4Y.2`T
XM,30@-3DT(#0Q.2`V,#0@-#(T(#4Y-"`T,CD@-C`T(#0S-"`U.30@-#,Y(#8P
XM-"`T-#0@-3DT(#0T.2`V,#0@-#4T(#4Y.2`T-3D@-3DY(#0W-"`Y.3DY(#DY
XM.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#8R.2`S,S0@-C(Y(#,P
XM-"`V,3D@,C<T(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P
XM"@D@-C(Y(#,Y-"`V,CD@,S8T(#8Q.2`S,S0@.3DY.2`Y.3DY"C(@,2`P(#$@
XM,"`P(#`@,"`P+C`P,"`P(#`*"2`U-CD@,SDT(#4V.2`S-C0@-34Y(#,S-"`Y
XM.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#4V.2`S,S0@
XM-38Y(#,P-"`U-3D@,C<T(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP
XM,#`@,"`P"@D@-38Y(#(W-"`U-CD@,C(T(#8R.2`R,C0@-C(Y(#(W-"`Y.3DY
XM(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#4Y.2`Q.3D@-3DY
XM(#(R-"`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#8P
XM-R`Q.30@-3DR(#(P-"`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P
XM(#`@,`H)(#DY(#4S.2`Q-#0@-3,Y(#$W-"`U,CD@.3DY.2`Y.3DY"C(@,2`P
XM(#$@,"`P(#`@,"`P+C`P,"`P(#`*"2`Q-S0@-3,Y(#(Q,2`U,SD@.3DY.2`Y
XM.3DY"C(@,2`P(#$@,"`P(#`@,"`P+C`P,"`P(#`*"2`R-C0@-3,Y(#,P.2`U
XM,SD@,S,Y(#4R.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@
XM,`H)(#,S.2`U,SD@,S<V(#4S.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P
XM(#`N,#`P(#`@,`H)(#$U.2`U,S0@,34Y(#4U-"`Y.3DY(#DY.3D*,B`Q(#`@
XM,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#$U-"`U-3D@,34Y(#4U-"`Q-C0@-34Y
XM(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,C,T(#4T
XM-"`R-#D@-30T(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P
XM"@D@,C,T(#4S-"`R-#D@-3,T(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@
XM,"XP,#`@,"`P"@D@,C,T(#4S.2`R-#D@-3,Y(#DY.3D@.3DY.0HT(#`@,"`Q
XM,B`P(#`@,"`P+C`P,"`Q(#D@-B`Q,#D@-C0@00$*-"`P(#`@,3(@,"`P(#`@
XM,"XP,#`@,2`Y(#8@,38T(#0T($,!"C0@,"`P(#$R(#`@,"`P(#`N,#`P(#$@
XM.2`V(#$V.2`X-"!$`0HT(#`@,"`Q,B`P(#`@,"`P+C`P,"`Q(#D@-B`Q,#D@
XM,3`T($(!"C0@,"`P(#$R(#`@,"`P(#`N,#`P(#$@.2`V(#(V.2`V-"!%`0HT
XM(#`@,"`Q,B`P(#`@,"`P+C`P,"`Q(#8@-B`R,38@,C<@8P$*-"`P(#`@,3(@
XM,"`P(#`@,"XP,#`@,2`Y(#8@-#,T(#@T($$!"C0@,"`P(#$R(#`@,"`P(#`N
XM,#`P(#$@.2`V(#0S,B`T."!F`0HT(#`@,"`Q,B`P(#`@,"`P+C`P,"`Q(#D@
XM-B`U.30@,S0@0@$*-"`P(#`@,3(@,"`P(#`@,"XP,#`@,2`Y(#8@-3DY(#DT
XM($(!"C0@,"`P(#$R(#`@,"`P(#`N,#`P(#$@.2`V(#,V,B`R-3,@8@$*-"`P
XM(#`@,3(@,"`P(#`@,"XP,#`@,2`Y(#8@-#8T(#(Y-"!"`0HT(#`@,"`Q,B`P
XM(#`@,"`P+C`P,"`Q(#D@-B`S-CD@,CDT($$!"C0@,"`P(#$R(#`@,"`P(#`N
XM,#`P(#$@-B`V(#8Q(#(X,2!A`0HT(#`@,"`Q,B`P(#`@,"`P+C`P,"`Q(#D@
XM-B`Y.2`S-CD@0@$*-"`P(#`@,3(@,"`P(#`@,"XP,#`@,2`Y(#8@.3D@,S$T
XM($$!"C0@,"`P(#$R(#`@,"`P(#`N,#`P(#$@-B`V(#(R,2`R-C<@90$*-"`P
XM(#`@,3(@,"`P(#`@,"XP,#`@,2`Y(#8@,C`T(#,R-"!!`0HT(#`@,"`Q,B`P
XM(#`@,"`P+C`P,"`Q(#D@-B`S,#0@,S(T($(!"C0@,"`P(#$R(#`@,"`P(#`N
XM,#`P(#$@.2`V(#(U-"`S,SD@10$*-"`P(#`@,3(@,"`P(#`@,"XP,#`@,2`Y
XM(#8@,C`Y(#,Y-"!#`0HT(#`@,"`Q,B`P(#`@,"`P+C`P,"`Q(#D@-B`S,#0@
XM,SDT($0!"C0@,"`P(#$R(#`@,"`P(#`N,#`P(#$@.2`V(#4V,"`R,#<@9`$*
XM-"`P(#`@,3(@,"`P(#`@,"XP,#`@,2`Y(#8@-30T(#(Y-"!!`0HT(#`@,"`Q
XM,B`P(#`@,"`P+C`P,"`Q(#D@-B`V,#0@,CDT($,!"C0@,"`P(#$R(#`@,"`P
XM(#`N,#`P(#$@.2`V(#4T-"`S-3D@0@$*-"`P(#`@,3(@,"`P(#`@,"XP,#`@
XM,2`Y(#8@-C`T(#,U.2!$`0HT(#`@,"`Q,B`P(#`@,"`P+C`P,"`Q(#D@,S`@
XM.3D@-3$Y(&YO=&4Z`0HT(#`@,"`Q,B`P(#`@,"`P+C`P,"`Q(#D@-B`Q-30@
XM-38Y($$!"C0@,"`P(#$R(#`@,"`P(#`N,#`P(#$@.2`V(#,Q-"`U,CD@00$*
X`
Xend
END_OF_FILE
if test 9388 -ne `wc -c <'Examples/logic.fig.uu'`; then
    echo shar: \"'Examples/logic.fig.uu'\" unpacked with wrong size!
fi
# end of 'Examples/logic.fig.uu'
fi
if test -f 'd_box.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'d_box.c'\"
else
echo shar: Extracting \"'d_box.c'\" \(2896 characters\)
sed "s/^X//" >'d_box.c' <<'END_OF_FILE'
X/*
X * FIG : Facility for Interactive Generation of figures
X * Copyright (c) 1985 by Supoj Sutanthavibul
X *
X * "Permission to use, copy, modify, distribute, and sell this software and its
X * documentation for any purpose is hereby granted without fee, provided that
X * the above copyright notice appear in all copies and that both that
X * copyright notice and this permission notice appear in supporting
X * documentation, and that the name of M.I.T. not be used in advertising or
X * publicity pertaining to distribution of the software without specific,
X * written prior permission.  M.I.T. makes no representations about the
X * suitability of this software for any purpose.  It is provided "as is"
X * without express or implied warranty."
X *
X */
X
X#include "fig.h"
X#include "resources.h"
X#include "mode.h"
X#include "object.h"
X#include "paintop.h"
X#include "u_create.h"
X#include "u_elastic.h"
X#include "u_list.h"
X#include "w_canvas.h"
X#include "w_mousefun.h"
X
X/*************************** local declarations *********************/
X
Xint		init_box_drawing();
Xstatic		create_boxobject(), cancel_box();
X
Xbox_drawing_selected()
X{
X    set_mousefun("corner point", "", "");
X    canvas_kbd_proc = null_proc;
X    canvas_locmove_proc = null_proc;
X    canvas_leftbut_proc = init_box_drawing;
X    canvas_middlebut_proc = null_proc;
X    canvas_rightbut_proc = null_proc;
X    set_cursor(arrow_cursor);
X    reset_action_on();
X}
X
Xinit_box_drawing(x, y)
X    int		    x, y;
X{
X    cur_x = fix_x = x;
X    cur_y = fix_y = y;
X    set_mousefun("final point", "", "cancel");
X    draw_mousefun_canvas();
X    canvas_locmove_proc = resizing_box;
X    canvas_leftbut_proc = create_boxobject;
X    canvas_middlebut_proc = null_proc;
X    canvas_rightbut_proc = cancel_box;
X    elastic_box(fix_x, fix_y, cur_x, cur_y);
X    set_temp_cursor(null_cursor);
X    set_action_on();
X}
X
Xstatic
Xcancel_box()
X{
X    elastic_box(fix_x, fix_y, cur_x, cur_y);
X    box_drawing_selected();
X    draw_mousefun_canvas();
X}
X
Xstatic
Xcreate_boxobject(x, y)
X    int		    x, y;
X{
X    F_line	   *box;
X    F_point	   *point;
X
X    elastic_box(fix_x, fix_y, cur_x, cur_y);
X
X    if ((point = create_point()) == NULL)
X	return;
X
X    point->x = x;
X    point->y = y;
X    point->next = NULL;
X
X    if ((box = create_line()) == NULL) {
X	free((char *) point);
X	return;
X    }
X    box->type = T_BOX;
X    box->style = cur_linestyle;
X    box->thickness = cur_linewidth;
X    box->color = cur_color;
X    box->depth = 0;
X    box->pen = 0;
X    box->fill_style = cur_fillstyle;
X    /* scale dash length by line thickness */
X    box->style_val = cur_styleval * (cur_linewidth + 1) / 2;
X    box->radius = 0;
X    box->points = point;
X    append_point(x, fix_y, &point);
X    append_point(fix_x, fix_y, &point);
X    append_point(fix_x, y, &point);
X    append_point(x, y, &point);
X    draw_line(box, PAINT);
X    add_line(box);
X    box_drawing_selected();
X    draw_mousefun_canvas();
X}
END_OF_FILE
if test 2896 -ne `wc -c <'d_box.c'`; then
    echo shar: \"'d_box.c'\" unpacked with wrong size!
fi
# end of 'd_box.c'
fi
if test -f 'e_arrow.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'e_arrow.c'\"
else
echo shar: Extracting \"'e_arrow.c'\" \(9600 characters\)
sed "s/^X//" >'e_arrow.c' <<'END_OF_FILE'
X/*
X * FIG : Facility for Interactive Generation of figures
X * Copyright (c) 1985 by Supoj Sutanthavibul
X *
X * "Permission to use, copy, modify, distribute, and sell this software and its
X * documentation for any purpose is hereby granted without fee, provided that
X * the above copyright notice appear in all copies and that both that
X * copyright notice and this permission notice appear in supporting
X * documentation, and that the name of M.I.T. not be used in advertising or
X * publicity pertaining to distribution of the software without specific,
X * written prior permission.  M.I.T. makes no representations about the
X * suitability of this software for any purpose.  It is provided "as is"
X * without express or implied warranty."
X *
X */
X
X#include "fig.h"
X#include "resources.h"
X#include "mode.h"
X#include "object.h"
X#include "paintop.h"
X#include "u_create.h"
X#include "u_search.h"
X#include "w_canvas.h"
X#include "w_mousefun.h"
X
Xstatic		add_arrow_head();
Xstatic		delete_arrow_head();
X
Xarrow_head_selected()
X{
X    set_mousefun("add arrow", "delete arrow", "");
X    canvas_kbd_proc = null_proc;
X    canvas_locmove_proc = null_proc;
X    init_searchproc_left(add_arrow_head);
X    init_searchproc_middle(delete_arrow_head);
X    canvas_leftbut_proc = point_search_left;
X    canvas_middlebut_proc = point_search_middle;
X    canvas_rightbut_proc = null_proc;
X    set_cursor(pick9_cursor);
X}
X
Xstatic
Xadd_arrow_head(obj, type, x, y, p, q)
X    char	   *obj;
X    int		    type, x, y;
X    F_point	   *p, *q;
X{
X    switch (type) {
X    case O_POLYLINE:
X	cur_l = (F_line *) obj;
X	add_linearrow(cur_l, p, q);
X	break;
X    case O_SPLINE:
X	cur_s = (F_spline *) obj;
X	add_splinearrow(cur_s, p, q);
X	break;
X    case O_ARC:
X	cur_a = (F_arc *) obj;
X	/* dirty trick - arc point number is stored in p */
X	add_arcarrow(cur_a, (int) p);
X	break;
X    }
X}
X
Xstatic
Xdelete_arrow_head(obj, type, x, y, p, q)
X    char	   *obj;
X    int		    type, x, y;
X    F_point	   *p, *q;
X{
X    switch (type) {
X    case O_POLYLINE:
X	cur_l = (F_line *) obj;
X	delete_linearrow(cur_l, p, q);
X	break;
X    case O_SPLINE:
X	cur_s = (F_spline *) obj;
X	delete_splinearrow(cur_s, p, q);
X	break;
X    case O_ARC:
X	cur_a = (F_arc *) obj;
X	/* dirty trick - arc point number is stored in p */
X	delete_arcarrow(cur_a, (int) p);
X	break;
X    }
X}
X
Xadd_linearrow(line, prev_point, selected_point)
X    F_line	   *line;
X    F_point	   *prev_point, *selected_point;
X{
X    if (line->points->next == NULL)
X	return;			/* A single point line */
X
X    if (prev_point == NULL) {	/* selected_point is the first point */
X	if (line->back_arrow)
X	    return;
X	line->back_arrow = backward_arrow();
X	mask_toggle_linemarker(line);
X	draw_arrow(selected_point->next->x, selected_point->next->y,
X		   selected_point->x, selected_point->y, line->back_arrow,
X		   PAINT, line->color);
X	mask_toggle_linemarker(line);
X    } else if (selected_point->next == NULL) {	/* forward arrow */
X	if (line->for_arrow)
X	    return;
X	line->for_arrow = forward_arrow();
X	mask_toggle_linemarker(line);
X	draw_arrow(prev_point->x, prev_point->y, selected_point->x,
X		   selected_point->y, line->for_arrow, PAINT, line->color);
X	mask_toggle_linemarker(line);
X    } else
X	return;
X    clean_up();
X    set_last_prevpoint(prev_point);
X    set_last_selectedpoint(selected_point);
X    set_latestline(line);
X    set_action_object(F_ADD_ARROW_HEAD, O_POLYLINE);
X    set_modifiedflag();
X}
X
Xadd_arcarrow(arc, point_num)
X    F_arc	   *arc;
X    int		    point_num;
X{
X
X    if (point_num == 0) {	/* backward arrow  */
X	if (arc->back_arrow)
X	    return;
X	arc->back_arrow = backward_arrow();
X	mask_toggle_arcmarker(arc);
X	draw_arcarrows(arc, PAINT);
X	mask_toggle_arcmarker(arc);
X    } else if (point_num == 2) {/* for_arrow  */
X	if (arc->for_arrow)
X	    return;
X	arc->for_arrow = forward_arrow();
X	mask_toggle_arcmarker(arc);
X	draw_arcarrows(arc, PAINT);
X	mask_toggle_arcmarker(arc);
X    } else
X	return;
X    clean_up();
X    set_last_arcpointnum(point_num);
X    set_latestarc(arc);
X    set_action_object(F_ADD_ARROW_HEAD, O_ARC);
X    set_modifiedflag();
X}
X
Xadd_splinearrow(spline, prev_point, selected_point)
X    F_spline	   *spline;
X    F_point	   *prev_point, *selected_point;
X{
X    F_point	   *p;
X    F_control	   *c;
X
X    if (prev_point == NULL) {	/* add backward arrow */
X	if (spline->back_arrow)
X	    return;
X	p = selected_point->next;
X	spline->back_arrow = backward_arrow();
X	mask_toggle_splinemarker(spline);
X	if (normal_spline(spline)) {
X	    draw_arrow(p->x, p->y, selected_point->x,
X		       selected_point->y, spline->back_arrow, PAINT,
X		       spline->color);
X	} else {
X	    c = spline->controls;
X	    draw_arrow(round(c->rx), round(c->ry), selected_point->x,
X		       selected_point->y, spline->back_arrow, PAINT,
X		       spline->color);
X	}
X	mask_toggle_splinemarker(spline);
X    } else if (selected_point->next == NULL) {	/* add forward arrow */
X	if (spline->for_arrow)
X	    return;
X	spline->for_arrow = forward_arrow();
X	mask_toggle_splinemarker(spline);
X	if (normal_spline(spline)) {
X	    draw_arrow(prev_point->x, prev_point->y,
X		       selected_point->x, selected_point->y,
X		       spline->for_arrow, PAINT,
X		       spline->color);
X	} else {
X	    for (c = spline->controls; c->next != NULL; c = c->next);
X	    draw_arrow(round(c->lx), round(c->ly), selected_point->x,
X		       selected_point->y, spline->for_arrow, PAINT,
X		       spline->color);
X	}
X	mask_toggle_splinemarker(spline);
X    }
X    clean_up();
X    set_last_prevpoint(prev_point);
X    set_last_selectedpoint(selected_point);
X    set_latestspline(spline);
X    set_action_object(F_ADD_ARROW_HEAD, O_SPLINE);
X    set_modifiedflag();
X}
X
Xdelete_linearrow(line, prev_point, selected_point)
X    F_line	   *line;
X    F_point	   *prev_point, *selected_point;
X{
X    if (line->points->next == NULL)
X	return;			/* A single point line */
X
X    if (prev_point == NULL) {	/* selected_point is the first point */
X	if (!line->back_arrow)
X	    return;
X	mask_toggle_linemarker(line);
X	draw_arrow(selected_point->next->x, selected_point->next->y,
X	      selected_point->x, selected_point->y, line->back_arrow, ERASE,
X		   line->color);
X	free((char *) line->back_arrow);
X	line->back_arrow = NULL;
X	draw_line(line, PAINT);
X	mask_toggle_linemarker(line);
X    } else if (selected_point->next == NULL) {	/* forward arrow */
X	if (!line->for_arrow)
X	    return;
X	mask_toggle_linemarker(line);
X	draw_arrow(prev_point->x, prev_point->y, selected_point->x,
X		   selected_point->y, line->for_arrow, ERASE,
X		   line->color);
X	free((char *) line->for_arrow);
X	line->for_arrow = NULL;
X	draw_line(line, PAINT);
X	mask_toggle_linemarker(line);
X    } else
X	return;
X    clean_up();
X    set_last_prevpoint(prev_point);
X    set_last_selectedpoint(selected_point);
X    set_latestline(line);
X    set_action_object(F_DELETE_ARROW_HEAD, O_POLYLINE);
X    set_modifiedflag();
X}
X
Xdelete_arcarrow(arc, point_num)
X    F_arc	   *arc;
X    int		    point_num;
X{
X    if (point_num == 0) {	/* backward arrow  */
X	if (!arc->back_arrow)
X	    return;
X	mask_toggle_arcmarker(arc);
X	draw_arcarrows(arc, ERASE);
X	free((char *) arc->back_arrow);
X	arc->back_arrow = NULL;
X	draw_arc(arc, PAINT);
X	mask_toggle_arcmarker(arc);
X    } else if (point_num == 2) {/* for_arrow  */
X	if (!arc->for_arrow)
X	    return;
X	mask_toggle_arcmarker(arc);
X	draw_arcarrows(arc, ERASE);
X	free((char *) arc->for_arrow);
X	arc->for_arrow = NULL;
X	draw_arc(arc, PAINT);
X	mask_toggle_arcmarker(arc);
X    } else
X	return;
X    clean_up();
X    set_last_arcpointnum(point_num);
X    set_latestarc(arc);
X    set_action_object(F_DELETE_ARROW_HEAD, O_ARC);
X    set_modifiedflag();
X}
X
Xdelete_splinearrow(spline, prev_point, selected_point)
X    F_spline	   *spline;
X    F_point	   *prev_point, *selected_point;
X{
X    F_point	   *p;
X
X    if (closed_spline(spline))
X	return;
X    if (prev_point == NULL) {	/* selected_point is the first point */
X	if (!spline->back_arrow)
X	    return;
X	mask_toggle_splinemarker(spline);
X	p = selected_point->next;
X	if (normal_spline(spline)) {
X	    draw_arrow(p->x, p->y, selected_point->x,
X		       selected_point->y, spline->back_arrow, ERASE,
X		       spline->color);
X	    free((char *) spline->back_arrow);
X	    spline->back_arrow = NULL;
X	    draw_spline(spline, PAINT);
X	} else {
X	    F_control	   *a, *b;
X
X	    a = spline->controls;
X	    b = a->next;
X	    draw_arrow(round(a->rx), round(a->ry), selected_point->x,
X		       selected_point->y, spline->back_arrow, ERASE,
X		       spline->color);
X	    free((char *) spline->back_arrow);
X	    spline->back_arrow = NULL;
X	    draw_spline(spline, PAINT);
X	}
X	mask_toggle_splinemarker(spline);
X    } else if (selected_point->next == NULL) {	/* forward arrow */
X	if (!spline->for_arrow)
X	    return;
X	mask_toggle_splinemarker(spline);
X	if (normal_spline(spline)) {
X	    draw_arrow(prev_point->x, prev_point->y,
X		       selected_point->x, selected_point->y,
X		       spline->for_arrow, ERASE,
X		       spline->color);
X	    free((char *) spline->for_arrow);
X	    spline->for_arrow = NULL;
X	    draw_spline(spline, PAINT);
X	} else {
X	    F_control	   *a, *b;
X
X	    a = spline->controls;
X	    for (b = a->next; b->next != NULL; a = b, b = b->next);
X	    draw_arrow(round(b->lx), round(b->ly), selected_point->x,
X		       selected_point->y, spline->for_arrow, ERASE,
X		       spline->color);
X	    free((char *) spline->for_arrow);
X	    spline->for_arrow = NULL;
X	    draw_spline(spline, PAINT);
X	}
X	mask_toggle_splinemarker(spline);
X    } else
X	return;
X    clean_up();
X    set_last_prevpoint(prev_point);
X    set_last_selectedpoint(selected_point);
X    set_latestspline(spline);
X    set_action_object(F_DELETE_ARROW_HEAD, O_SPLINE);
X    set_modifiedflag();
X}
END_OF_FILE
if test 9600 -ne `wc -c <'e_arrow.c'`; then
    echo shar: \"'e_arrow.c'\" unpacked with wrong size!
fi
# end of 'e_arrow.c'
fi
if test -f 'u_drag.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'u_drag.c'\"
else
echo shar: Extracting \"'u_drag.c'\" \(10036 characters\)
sed "s/^X//" >'u_drag.c' <<'END_OF_FILE'
X/*
X * FIG : Facility for Interactive Generation of figures
X * Copyright (c) 1985 by Supoj Sutanthavibul
X *
X * "Permission to use, copy, modify, distribute, and sell this software and its
X * documentation for any purpose is hereby granted without fee, provided that
X * the above copyright notice appear in all copies and that both that
X * copyright notice and this permission notice appear in supporting
X * documentation, and that the name of M.I.T. not be used in advertising or
X * publicity pertaining to distribution of the software without specific,
X * written prior permission.  M.I.T. makes no representations about the
X * suitability of this software for any purpose.  It is provided "as is"
X * without express or implied warranty."
X *
X */
X
X#include "fig.h"
X#include "resources.h"
X#include "object.h"
X#include "paintop.h"
X#include "u_draw.h"
X#include "u_elastic.h"
X#include "u_list.h"
X#include "u_undo.h"
X#include "mode.h"
X#include "w_canvas.h"
X#include "w_drawprim.h"
X#include "w_zoom.h"
X
Xstatic int	place_line(), cancel_line();
Xstatic int	place_arc(), cancel_arc();
Xstatic int	place_spline(), cancel_spline();
Xstatic int	place_ellipse(), cancel_ellipse();
Xstatic int	place_text(), cancel_text();
Xstatic int	place_compound(), cancel_compound();
X
Xextern int	copy_selected();
X
X/***************************** ellipse section ************************/
X
Xinit_ellipsedragging(e, x, y)
X    F_ellipse	   *e;
X    int		    x, y;
X{
X    new_e = e;
X    fix_x = cur_x = x;
X    fix_y = cur_y = y;
X    x1off = (e->center.x - e->radiuses.x) - cur_x;
X    x2off = (e->center.x + e->radiuses.x) - cur_x;
X    y1off = (e->center.y - e->radiuses.y) - cur_y;
X    y2off = (e->center.y + e->radiuses.y) - cur_y;
X    canvas_locmove_proc = moving_ellipse;
X    canvas_leftbut_proc = place_ellipse;
X    canvas_rightbut_proc = cancel_ellipse;
X    set_action_on();
X    elastic_moveellipse();
X}
X
Xstatic
Xcancel_ellipse()
X{
X    elastic_moveellipse();
X    if (return_proc == copy_selected) {
X	free_ellipse(&new_e);
X    } else {
X	list_add_ellipse(&objects.ellipses, new_e);
X	redisplay_ellipse(new_e);
X    }
X    (*return_proc) ();
X    draw_mousefun_canvas();
X}
X
Xstatic
Xplace_ellipse(x, y)
X    int		    x, y;
X{
X    elastic_moveellipse();
X    adjust_pos(x, y, fix_x, fix_y, &x, &y);
X    translate_ellipse(new_e, x - fix_x, y - fix_y);
X    if (return_proc == copy_selected) {
X	add_ellipse(new_e);
X    } else {
X	list_add_ellipse(&objects.ellipses, new_e);
X	clean_up();
X	set_lastposition(fix_x, fix_y);
X	set_newposition(x, y);
X	set_action_object(F_MOVE, O_ELLIPSE);
X	set_latestellipse(new_e);
X	set_modifiedflag();
X    }
X    redisplay_ellipse(new_e);
X    (*return_proc) ();
X    draw_mousefun_canvas();
X}
X
X/*****************************	arc  section  *******************/
X
Xinit_arcdragging(a, x, y)
X    F_arc	   *a;
X    int		    x, y;
X{
X    new_a = a;
X    fix_x = cur_x = x;
X    fix_y = cur_y = y;
X    canvas_locmove_proc = moving_arc;
X    canvas_leftbut_proc = place_arc;
X    canvas_rightbut_proc = cancel_arc;
X    set_action_on();
X    elastic_movearc(new_a);
X}
X
Xstatic
Xcancel_arc()
X{
X    elastic_movearc(new_a);
X    if (return_proc == copy_selected) {
X	free_arc(&new_a);
X    } else {
X	list_add_arc(&objects.arcs, new_a);
X	redisplay_arc(new_a);
X    }
X    (*return_proc) ();
X    draw_mousefun_canvas();
X}
X
Xstatic
Xplace_arc(x, y)
X    int		    x, y;
X{
X    elastic_movearc(new_a);
X    adjust_pos(x, y, fix_x, fix_y, &x, &y);
X    translate_arc(new_a, x - fix_x, y - fix_y);
X    if (return_proc == copy_selected) {
X	add_arc(new_a);
X    } else {
X	list_add_arc(&objects.arcs, new_a);
X	clean_up();
X	set_lastposition(fix_x, fix_y);
X	set_newposition(x, y);
X	set_action_object(F_MOVE, O_ARC);
X	set_latestarc(new_a);
X	set_modifiedflag();
X    }
X    redisplay_arc(new_a);
X    (*return_proc) ();
X    draw_mousefun_canvas();
X}
X
X/*************************  line  section  **********************/
X
Xinit_linedragging(l, x, y)
X    F_line	   *l;
X    int		    x, y;
X{
X    int		    xmin, ymin, xmax, ymax;
X
X    new_l = l;
X    cur_x = fix_x = x;
X    cur_y = fix_y = y;
X    canvas_locmove_proc = moving_line;
X    canvas_leftbut_proc = place_line;
X    canvas_rightbut_proc = cancel_line;
X    set_action_on();
X    if (l->type == T_BOX || l->type == T_ARC_BOX || l->type == T_EPS_BOX) {
X	line_bound(l, &xmin, &ymin, &xmax, &ymax);
X	get_links(xmin, ymin, xmax, ymax);
X    }
X    elastic_moveline(new_l->points);
X}
X
Xstatic
Xcancel_line()
X{
X    elastic_moveline(new_l->points);
X    free_linkinfo(&cur_links);
X    if (return_proc == copy_selected) {
X	free_line(&new_l);
X    } else {
X	list_add_line(&objects.lines, new_l);
X	redisplay_line(new_l);
X    }
X    (*return_proc) ();
X    draw_mousefun_canvas();
X}
X
Xstatic
Xplace_line(x, y)
X    int		    x, y;
X{
X    int		    dx, dy;
X
X    elastic_moveline(new_l->points);
X    adjust_pos(x, y, fix_x, fix_y, &x, &y);
X    dx = x - fix_x;
X    dy = y - fix_y;
X    translate_line(new_l, dx, dy);
X    clean_up();
X    set_latestline(new_l);
X    if (return_proc == copy_selected) {
X	adjust_links(cur_linkmode, cur_links, dx, dy, 0, 0, 1.0, 1.0, 1);
X	tail(&objects, &object_tails);
X	append_objects(&objects, &saved_objects, &object_tails);
X	set_action_object(F_ADD, O_ALL_OBJECT);
X	free_linkinfo(&cur_links);
X    } else {
X	list_add_line(&objects.lines, new_l);
X	adjust_links(cur_linkmode, cur_links, dx, dy, 0, 0, 1.0, 1.0, 0);
X	set_lastposition(fix_x, fix_y);
X	set_newposition(x, y);
X	set_lastlinkinfo(cur_linkmode, cur_links);
X	cur_links = NULL;
X	set_action_object(F_MOVE, O_POLYLINE);
X    }
X    set_modifiedflag();
X    redisplay_line(new_l);
X    (*return_proc) ();
X    draw_mousefun_canvas();
X}
X
X/************************  text section	 **************************/
X
Xstatic PR_SIZE	txsize;
X
Xinit_textdragging(t, x, y)
X    F_text	   *t;
X    int		    x, y;
X{
X
X    new_t = t;
X    fix_x = cur_x = x;
X    fix_y = cur_y = y;
X    x1off = t->base_x - x;
X    y1off = t->base_y - y;
X    if (t->type == T_CENTER_JUSTIFIED || t->type == T_RIGHT_JUSTIFIED) {
X	txsize = pf_textwidth(t->font, psfont_text(t), t->size,
X			      strlen(t->cstring), t->cstring);
X	if (t->type == T_CENTER_JUSTIFIED)
X	    x1off -= txsize.x / 2 / zoomscale;
X	else
X	    x1off -= txsize.x / zoomscale;
X    }
X    canvas_locmove_proc = moving_text;
X    canvas_leftbut_proc = place_text;
X    canvas_rightbut_proc = cancel_text;
X    elastic_movetext();
X    set_action_on();
X}
X
Xstatic
Xcancel_text()
X{
X    elastic_movetext();
X    if (return_proc == copy_selected) {
X	free_text(&new_t);
X    } else {
X	list_add_text(&objects.texts, new_t);
X	redisplay_text(new_t);
X    }
X    (*return_proc) ();
X    draw_mousefun_canvas();
X}
X
Xstatic
Xplace_text(x, y)
X    int		    x, y;
X{
X    elastic_movetext();
X    adjust_pos(x, y, fix_x, fix_y, &x, &y);
X    translate_text(new_t, x - fix_x, y - fix_y);
X    if (return_proc == copy_selected) {
X	add_text(new_t);
X    } else {
X	list_add_text(&objects.texts, new_t);
X	clean_up();
X	set_lastposition(fix_x, fix_y);
X	set_newposition(x, y);
X	set_action_object(F_MOVE, O_TEXT);
X	set_latesttext(new_t);
X	set_modifiedflag();
X    }
X    redisplay_text(new_t);
X    (*return_proc) ();
X    draw_mousefun_canvas();
X}
X
X/*************************  spline  section  **********************/
X
Xinit_splinedragging(s, x, y)
X    F_spline	   *s;
X    int		    x, y;
X{
X    new_s = s;
X    cur_x = fix_x = x;
X    cur_y = fix_y = y;
X    canvas_locmove_proc = moving_spline;
X    canvas_leftbut_proc = place_spline;
X    canvas_rightbut_proc = cancel_spline;
X    set_action_on();
X    elastic_moveline(new_s->points);
X}
X
Xstatic
Xcancel_spline()
X{
X    elastic_moveline(new_s->points);
X    if (return_proc == copy_selected) {
X	free_spline(&new_s);
X    } else {
X	list_add_spline(&objects.splines, new_s);
X	redisplay_spline(new_s);
X    }
X    (*return_proc) ();
X    draw_mousefun_canvas();
X}
X
Xstatic
Xplace_spline(x, y)
X    int		    x, y;
X{
X    elastic_moveline(new_s->points);
X    adjust_pos(x, y, fix_x, fix_y, &x, &y);
X    translate_spline(new_s, x - fix_x, y - fix_y);
X    if (return_proc == copy_selected) {
X	add_spline(new_s);
X    } else {
X	list_add_spline(&objects.splines, new_s);
X	clean_up();
X	set_lastposition(fix_x, fix_y);
X	set_newposition(x, y);
X	set_action_object(F_MOVE, O_SPLINE);
X	set_latestspline(new_s);
X	set_modifiedflag();
X    }
X    redisplay_spline(new_s);
X    (*return_proc) ();
X    draw_mousefun_canvas();
X}
X
X/*****************************	Compound section  *******************/
X
Xinit_compounddragging(c, x, y)
X    F_compound	   *c;
X    int		    x, y;
X{
X    new_c = c;
X    fix_x = cur_x = x;
X    fix_y = cur_y = y;
X    x1off = c->nwcorner.x - x;
X    x2off = c->secorner.x - x;
X    y1off = c->nwcorner.y - y;
X    y2off = c->secorner.y - y;
X    canvas_locmove_proc = moving_box;
X    canvas_leftbut_proc = place_compound;
X    canvas_rightbut_proc = cancel_compound;
X    set_action_on();
X    get_links(c->nwcorner.x, c->nwcorner.y, c->secorner.x, c->secorner.y);
X    elastic_movebox();
X}
X
Xstatic
Xcancel_compound()
X{
X    elastic_movebox();
X    free_linkinfo(&cur_links);
X    if (return_proc == copy_selected) {
X	free_compound(&new_c);
X    } else {
X	list_add_compound(&objects.compounds, new_c);
X	redisplay_compound(new_c);
X    }
X    (*return_proc) ();
X    draw_mousefun_canvas();
X}
X
Xstatic
Xplace_compound(x, y)
X    int		    x, y;
X{
X    int		    dx, dy;
X
X    elastic_movebox();
X    adjust_pos(x, y, fix_x, fix_y, &x, &y);
X    dx = x - fix_x;
X    dy = y - fix_y;
X    translate_compound(new_c, dx, dy);
X    clean_up();
X    set_latestcompound(new_c);
X    if (return_proc == copy_selected) {
X	adjust_links(cur_linkmode, cur_links, dx, dy, 0, 0, 1.0, 1.0, 1);
X	tail(&objects, &object_tails);
X	append_objects(&objects, &saved_objects, &object_tails);
X	set_action_object(F_ADD, O_ALL_OBJECT);
X	free_linkinfo(&cur_links);
X    } else {
X	list_add_compound(&objects.compounds, new_c);
X	adjust_links(cur_linkmode, cur_links, dx, dy, 0, 0, 1.0, 1.0, 0);
X	set_lastposition(fix_x, fix_y);
X	set_newposition(x, y);
X	set_lastlinkinfo(cur_linkmode, cur_links);
X	cur_links = NULL;
X	set_action_object(F_MOVE, O_COMPOUND);
X    }
X    set_modifiedflag();
X    redisplay_compound(new_c);
X    (*return_proc) ();
X    draw_mousefun_canvas();
X}
END_OF_FILE
if test 10036 -ne `wc -c <'u_drag.c'`; then
    echo shar: \"'u_drag.c'\" unpacked with wrong size!
fi
# end of 'u_drag.c'
fi
if test -f 'u_geom.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'u_geom.c'\"
else
echo shar: Extracting \"'u_geom.c'\" \(9270 characters\)
sed "s/^X//" >'u_geom.c' <<'END_OF_FILE'
X/*
X * FIG : Facility for Interactive Generation of figures
X * Copyright (c) 1985 by Supoj Sutanthavibul
X *
X * "Permission to use, copy, modify, distribute, and sell this software and its
X * documentation for any purpose is hereby granted without fee, provided that
X * the above copyright notice appear in all copies and that both that
X * copyright notice and this permission notice appear in supporting
X * documentation, and that the name of M.I.T. not be used in advertising or
X * publicity pertaining to distribution of the software without specific,
X * written prior permission.  M.I.T. makes no representations about the
X * suitability of this software for any purpose.  It is provided "as is"
X * without express or implied warranty."
X *
X */
X
X/*
X * Routines dealing with geometry under the following headings:
X *	COMPUTE NORMAL, CLOSE TO VECTOR, COMPUTE ARC CENTER,
X *	COMPUTE ANGLE, COMPUTE DIRECTION, LATEX LINE ROUTINES.
X */
X
X#include "fig.h"
X#include "object.h"
X#include "math.h"
X
X#define			PI		3.14159
X
X/*************************** COMPUTE NORMAL **********************
X
XInput arguments :
X	(x1,y1)(x2,y2) : the vector
X	direction : direction of the normal vector to (x1,y1)(x2,y2)
XOutput arguments :
X	(*x,*y)(x2,y2) : a normal vector.
XReturn value : none
X
X******************************************************************/
X
Xcompute_normal(x1, y1, x2, y2, direction, x, y)
X    float	    x1, y1;
X    int		    x2, y2, direction, *x, *y;
X{
X    if (direction) {		/* counter clockwise  */
X	*x = round(x2 - (y2 - y1));
X	*y = round(y2 - (x1 - x2));
X    } else {
X	*x = round(x2 + (y2 - y1));
X	*y = round(y2 + (x1 - x2));
X    }
X}
X
X/******************** CLOSE TO VECTOR **************************
X
XInput arguments:
X	(x1,y1)(x2,y2) : the vector
X	(xp,yp) : the point
X	d : tolerance (max. allowable distance from the point to the vector)
X	dd : d * d
XOutput arguments:
X	(*px,*py) : a point on the vector which is not far from (xp,yp)
X		by more than d. Normally the vector (*px,*py)(xp,yp)
X		is normal to vector (x1,y1)(x2,y2) except when (xp,yp)
X		is within d from (x1,y1) or (x2,y2), in which cases,
X		(*px,*py) = (x1,y1) or (x2,y2) respectively.
XReturn value :
X	0 : No point on the vector is within d from (xp, yp)
X	1 : (*px, *py) is such a point.
X
X******************************************************************/
X
Xclose_to_vector(x1, y1, x2, y2, xp, yp, d, dd, px, py)
X    int		    x1, y1, x2, y2, xp, yp, d;
X    float	    dd;
X    int		   *px, *py;
X{
X    int		    xmin, ymin, xmax, ymax;
X    float	    x, y, slope, D2, dx, dy;
X
X    if (abs(xp - x1) <= d && abs(yp - y1) <= d) {
X	*px = x1;
X	*py = y1;
X	return (1);
X    }
X    if (abs(xp - x2) <= d && abs(yp - y2) <= d) {
X	*px = x2;
X	*py = y2;
X	return (1);
X    }
X    if (x1 < x2) {
X	xmin = x1 - d;
X	xmax = x2 + d;
X    } else {
X	xmin = x2 - d;
X	xmax = x1 + d;
X    }
X    if (xp < xmin || xmax < xp)
X	return (0);
X
X    if (y1 < y2) {
X	ymin = y1 - d;
X	ymax = y2 + d;
X    } else {
X	ymin = y2 - d;
X	ymax = y1 + d;
X    }
X    if (yp < ymin || ymax < yp)
X	return (0);
X
X    if (x2 == x1) {
X	x = x1;
X	y = yp;
X    } else if (y1 == y2) {
X	x = xp;
X	y = y1;
X    } else {
X	slope = ((float) (x2 - x1)) / ((float) (y2 - y1));
X	y = (slope * (xp - x1 + slope * y1) + yp) / (1 + slope * slope);
X	x = ((float) x1) + slope * (y - y1);
X    }
X    dx = ((float) xp) - x;
X    dy = ((float) yp) - y;
X    D2 = dx * dx + dy * dy;
X    if (D2 < dd) {
X	*px = (int) (x + .5);
X	*py = (int) (y + .5);
X	return (1);
X    }
X    return (0);
X}
X
X/********************* COMPUTE ARC CENTER ******************
X
XInput arguments :
X	p1, p2, p3 : 3 points on the arc
XOutput arguments :
X	(*x,*y) : Center of the arc
XReturn value :
X	0 : if p1, p2, p3 are co-linear.
X	1 : if they are not.
X
X*************************************************************/
X
Xint
Xcompute_arccenter(p1, p2, p3, x, y)
X    F_pos	    p1, p2, p3;
X    float	   *x, *y;
X{
X    float	    s12, s13, len1, len2, len3, dx12, dy12, dx13, dy13;
X
X    if (p1.x == p3.x && p1.y == p3.y)
X	return 0;
X
X    dx12 = p1.x - p2.x;
X    dy12 = p1.y - p2.y;
X    dx13 = p1.x - p3.x;
X    dy13 = p1.y - p3.y;
X
X    s12 = asin((double) (dy12 / sqrt((double) (dx12 * dx12 + dy12 * dy12))));
X    s13 = asin((double) (dy13 / sqrt((double) (dx13 * dx13 + dy13 * dy13))));
X    if (fabs(s12 - s13) < .01)
X	return 0;
X
X    len1 = p1.x * p1.x + p1.y * p1.y;
X    len2 = p2.x * p2.x + p2.y * p2.y;
X    len3 = p3.x * p3.x + p3.y * p3.y;
X    *y = (dx12 * (len3 - len1) - dx13 * (len2 - len1)) /
X	(2 * (dx13 * dy12 - dx12 * dy13));
X    if (p1.x != p3.x)
X	*x = (len3 + 2 * (*y) * dy13 - len1) / (2 * (-dx13));
X    else
X	*x = (len2 + 2 * (*y) * dy12 - len1) / (2 * (-dx12));
X    return 1;
X}
X
X/********************* COMPUTE ANGLE ************************
X
XInput arguments :
X	(dx,dy) : the vector (0,0)(dx,dy)
XOutput arguments : none
XReturn value : the angle of the vector in the range [0, 2PI)
X
X*************************************************************/
X
Xfloat
Xcompute_angle(dx, dy)		/* compute the angle between 0 to 2PI  */
X    float	    dx, dy;
X{
X    float	    alpha;
X
X    if (dx == 0) {
X	if (dy > 0)
X	    alpha = PI / 2;
X	else
X	    alpha = 3 * PI / 2;
X    } else if (dy == 0) {
X	if (dx > 0)
X	    alpha = 0;
X	else
X	    alpha = PI;
X    } else {
X	alpha = atan((double) (dy / dx));	/* range = -PI/2 to PI/2 */
X	if (dx < 0)
X	    alpha += PI;
X	else if (dy < 0)
X	    alpha += 2 * PI;
X    }
X    return (alpha);
X}
X
X
X/********************* COMPUTE DIRECTION ********************
X
XInput arguments :
X	p1, p2, p3 : 3 points of an arc with p1 the first and p3 the last.
XOutput arguments : none
XReturn value :
X	0 : if the arc passes p1, p2 and p3 (in that order) in
X		clockwise direction
X	1 : if direction is counterclockwise
X
X*************************************************************/
X
Xint
Xcompute_direction(p1, p2, p3)
X    F_pos	    p1, p2, p3;
X{
X    float	    diff, dx, dy, alpha, theta;
X
X    dx = p2.x - p1.x;
X    dy = p1.y - p2.y;		/* because origin of the screen is on the
X				 * upper left corner */
X
X    alpha = compute_angle(dx, dy);
X
X    dx = p3.x - p2.x;
X    dy = p2.y - p3.y;
X    theta = compute_angle(dx, dy);
X
X    diff = theta - alpha;
X    if ((0 < diff && diff < PI) || diff < -PI) {
X	return (1);		/* counterclockwise */
X    }
X    return (0);			/* clockwise */
X}
X
X/*********************** LATEX LINE ROUTINES ***************************/
X
Xint
Xpgcd(a, b)
X    int		    a, b;
X
X/*
X * compute greatest common divisor, assuming 0 < a <= b
X */
X{
X    b = b % a;
X    return (b) ? gcd(b, a) : a;
X}
X
Xint
Xgcd(a, b)
X    int		    a, b;
X
X/*
X * compute greatest common divisor
X */
X{
X    if (a < 0)
X	a = -a;
X    if (b < 0)
X	b = -b;
X    return (a <= b) ? pgcd(a, b) : pgcd(b, a);
X}
X
X
Xint
Xlcm(a, b)
X    int		    a, b;
X
X/*
X * compute least common multiple
X */
X{
X    return abs(a * b) / gcd(a, b);
X}
X
X
Xdouble		rad2deg = 57.295779513082320877;
X
Xstruct angle_table {
X    int		    x, y;
X    double	    angle;
X};
X
Xstruct angle_table line_angles[25] =
X{{0, 1, 90.0},
X{1, 0, 0.0},
X{1, 1, 45.0},
X{1, 2, 63.434948822922010648},
X{1, 3, 71.565051177077989351},
X{1, 4, 75.963756532073521417},
X{1, 5, 78.690067525979786913},
X{1, 6, 80.537677791974382609},
X{2, 1, 26.565051177077989351},
X{2, 3, 56.309932474020213086},
X{2, 5, 68.198590513648188229},
X{3, 1, 18.434948822922010648},
X{3, 2, 33.690067525979786913},
X{3, 4, 53.130102354155978703},
X{3, 5, 59.036243467926478582},
X{4, 1, 14.036243467926478588},
X{4, 3, 36.869897645844021297},
X{4, 5, 51.340191745909909396},
X{5, 1, 11.309932474020213086},
X{5, 2, 21.801409486351811770},
X{5, 3, 30.963756532073521417},
X{5, 4, 38.659808254090090604},
X{5, 6, 50.194428907734805993},
X{6, 1, 9.4623222080256173906},
X{6, 5, 39.805571092265194006}
X};
X
Xstruct angle_table arrow_angles[13] =
X{{0, 1, 90.0},
X{1, 0, 0.0},
X{1, 1, 45.0},
X{1, 2, 63.434948822922010648},
X{1, 3, 71.565051177077989351},
X{1, 4, 75.963756532073521417},
X{2, 1, 26.565051177077989351},
X{2, 3, 56.309932474020213086},
X{3, 1, 18.434948822922010648},
X{3, 2, 33.690067525979786913},
X{3, 4, 53.130102354155978703},
X{4, 1, 14.036243467926478588},
X{4, 3, 36.869897645844021297},
X};
X
Xget_slope(dx, dy, sxp, syp, arrow)
X    int		    dx, dy, *sxp, *syp, arrow;
X{
X    double	    angle;
X    int		    i, s, max;
X    double	    d, d1;
X    struct angle_table *st;
X
X    if (dx == 0) {
X	*sxp = 0;
X	*syp = signof(dy);
X	return;
X    }
X    angle = atan((double) abs(dy) / (double) abs(dx)) * rad2deg;
X    if (arrow) {
X	st = arrow_angles;
X	max = 13;
X    } else {
X	st = line_angles;
X	max = 25;
X    }
X    s = 0;
X    d = 9.9e9;
X    for (i = 0; i < max; i++) {
X	d1 = fabs(angle - st[i].angle);
X	if (d1 < d) {
X	    s = i;
X	    d = d1;
X	}
X    }
X    *sxp = st[s].x;
X    if (dx < 0)
X	*sxp = -*sxp;
X    *syp = st[s].y;
X    if (dy < 0)
X	*syp = -*syp;
X}
X
Xlatex_endpoint(x1, y1, x2, y2, xout, yout, arrow, magnet)
X    int		    x1, y1, x2, y2;
X    int		   *xout, *yout;
X    int		    arrow, magnet;
X{
X    int		    dx, dy, sx, sy, ds, dsx, dsy;
X
X    dx = x2 - x1;
X    dy = y2 - y1;
X    get_slope(dx, dy, &sx, &sy, arrow);
X    if (abs(sx) >= abs(sy)) {
X	ds = lcm(sx, magnet * gcd(sx, magnet));
X	dsx = (2 * abs(dx) / ds + 1) / 2;
X	dsx = (dx >= 0) ? dsx * ds : -dsx * ds;
X	*xout = x1 + dsx;
X	*yout = y1 + dsx * sy / sx;
X    } else {
X	ds = lcm(sy, magnet * gcd(sy, magnet));
X	dsy = (2 * abs(dy) / ds + 1) / 2;
X	dsy = (dy >= 0) ? dsy * ds : -dsy * ds;
X	*yout = y1 + dsy;
X	*xout = x1 + dsy * sx / sy;
X    }
X}
END_OF_FILE
if test 9270 -ne `wc -c <'u_geom.c'`; then
    echo shar: \"'u_geom.c'\" unpacked with wrong size!
fi
# end of 'u_geom.c'
fi
echo shar: End of archive 16 \(of 25\).
cp /dev/null ark16isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 25 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
-- 
Molecular Simulations, Inc.             mail: dcmartin@msi.com
796 N. Pastoria Avenue                  uucp: uunet!dcmartin
Sunnyvale, California 94086             at&t: 408/522-9236
