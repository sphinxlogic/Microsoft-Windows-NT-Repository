Path: uunet!zaphod.mps.ohio-state.edu!mips!msi!dcmartin
From: envbvs@bea.lbl.gov (Brian V. Smith)
Newsgroups: comp.sources.x
Subject: v16i018: Xfig 2.1.3, Part13/25
Message-ID: <1992Feb4.150032.965@msi.com>
Date: 4 Feb 92 15:00:32 GMT
References: <csx-16i006-xfig-2.1.3@uunet.UU.NET>
Sender: dcmartin@msi.com (David C. Martin - Moderator)
Organization: Molecular Simulations, Inc.
Lines: 1586
Approved: dcmartin@msi.com
Originator: dcmartin@fascet

Submitted-by: envbvs@bea.lbl.gov (Brian V. Smith)
Posting-number: Volume 16, Issue 18
Archive-name: xfig-2.1.3/part13

# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# If this archive is complete, you will see the following message at the end:
#		"End of archive 13 (of 25)."
# Contents:  Examples/bedroom2.fig.uu Examples/house_elev.fig.uu
#   Makefile u_bound.c w_modepanel.c
# Wrapped by dcmartin@fascet on Tue Feb  4 06:42:30 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'Examples/bedroom2.fig.uu' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Examples/bedroom2.fig.uu'\"
else
echo shar: Extracting \"'Examples/bedroom2.fig.uu'\" \(1807 characters\)
sed "s/^X//" >'Examples/bedroom2.fig.uu' <<'END_OF_FILE'
Xbegin 664 bedroom2.fig
XM(T9)1R`R+C`*.#`@,@HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@-C0T
XM(#$T-"`V,#D@,C,T(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@
XM,"`Q"@DP(#`@,2XP,#`@-"XP,#`@."XP,#`*"2`T-"`U,CD@-#0@,S(T(#DY
XM.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`Q"@DP(#`@,2XP,#`@
XM-"XP,#`@."XP,#`*"2`T-"`X-"`T-"`R.#D@.3DY.2`Y.3DY"C(@,2`P(#$@
XM,"`P(#`@,"`P+C`P,"`P(#$*"3`@,"`Q+C`P,"`T+C`P,"`X+C`P,`H)(#8R
XM.2`T-"`S-C0@-#0@.3DY.2`Y.3DY"C(@,2`P(#$@,"`P(#`@,"`P+C`P,"`P
XM(#$*"3`@,"`Q+C`P,"`T+C`P,"`X+C`P,`H)(#@T(#0T(#,Q-"`T-"`Y.3DY
XM(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#4T(#4S-"`S-"`U
XM,S0@.3DY.2`Y.3DY"C(@,2`P(#$@,"`P(#`@,"`P+C`P,"`P(#`*"2`U-"`W
XM.2`S-"`W.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)
XM(#8S-"`S-"`V,S0@-30@.3DY.2`Y.3DY"C(@,2`P(#$@,"`P(#`@,"`P+C`P
XM,"`P(#`*"2`W.2`S-"`W.2`U-"`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P
XM(#`N,#`P(#`@,`H)(#<S.2`U-#0@-C0T(#4Q-"`Y.3DY(#DY.3D*,B`S(#`@
XM,2`P(#`@,"`U(#`N,#`P(#`@,`H)(#<V.2`U-30@-S8Y(#,Y.2`V-30@,SDY
XM(#8U-"`R-#0@-C,T(#(T-"`V,S0@-#$Y(#<T.2`T,3D@-S0Y(#4S-"`W,SD@
XM-3,T(#<S.2`U-30@-S8Y(#4U-"`Y.3DY(#DY.3D*,B`S(#`@,2`P(#`@,"`U
XM(#`N,#`P(#`@,`H)(#4Y(#0Q-"`U.2`U-30@-C,Y(#4U-"`V,SD@-3,T(#<Y
XM(#4S-"`W.2`T,30@-3D@-#$T(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@
XM,"XP,#`@,"`P"@D@-CD@,3DT(#8Y(#0Q-"`Y.3DY(#DY.3D*,B`R(#`@,2`P
XM(#`@,"`P(#`N,#`P(#`@,`H)(#4Y(#$Y-"`W.2`Q.30@-SD@-#$T(#4Y(#0Q
XM-"`U.2`Q.30@.3DY.2`Y.3DY"C(@,R`P(#$@,"`P(#`@-2`P+C`P,"`P(#`*
XM"2`W-S0@-3D@-S<T(#,Q-"`V-30@,S$T(#8U-"`R.30@-S4T(#(Y-"`W-30@
XM-SD@-C4T(#<Y(#8U-"`Q-#0@-C,T(#$T-"`V,S0@-SD@-SD@-SD@-SD@,3DT
XM(#4Y(#$Y-"`U.2`U.2`W-S0@-3D@.3DY.2`Y.3DY"C0@,B`P(#$R(#`@,"`P
XM(#`N,#`P(#$@.2`S,R`W,#(@,3@Y($-L;W-E=`$*-"`Q(#`@,30@,"`P(#`@
XM,"XP,#`@,2`Q,"`V,R`S-#0@,C<Y($)E9')O;VT@,@$*-"`R(#`@,30@,"`P
XM(#`@,"XP,#`@,2`Q,"`S,2`U-"`S,#D@,3$G-"(!"C0@,2`P(#$T(#`@,"`P
X>(#`N,#`P(#$@,3`@,S@@,S,Y(#0Y(#$S)S$P(@$*
X`
Xend
END_OF_FILE
if test 1807 -ne `wc -c <'Examples/bedroom2.fig.uu'`; then
    echo shar: \"'Examples/bedroom2.fig.uu'\" unpacked with wrong size!
fi
# end of 'Examples/bedroom2.fig.uu'
fi
if test -f 'Examples/house_elev.fig.uu' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Examples/house_elev.fig.uu'\"
else
echo shar: Extracting \"'Examples/house_elev.fig.uu'\" \(12519 characters\)
sed "s/^X//" >'Examples/house_elev.fig.uu' <<'END_OF_FILE'
Xbegin 664 house_elev.fig
XM(T9)1R`R+C`*.#`@,@HQ(#,@,"`Q(#`@,"`P(#`@,"XP,#`@,2`P+C`P,"`S
XM-S<@-#4V(#,@,R`S-S<@-#4V(#,X,"`T-3<*,B`R(#`@,2`P(#`@,"`P(#`N
XM,#`P(#`@,`H)(#0Q,B`S.3<@-#$R(#0V,"`T,C4@-#8P(#0R-2`S.3<@-#$R
XM(#,Y-R`Y.3DY(#DY.3D*,B`R(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#(X
XM,B`S.3<@,C@R(#0V,"`R.34@-#8P(#(Y-2`S.3<@,C@R(#,Y-R`Y.3DY(#DY
XM.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#0U.2`T-3D@-3,Y(#0U
XM.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#0U.2`T
XM-#D@-3,Y(#0T.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@
XM,`H)(#0U.2`T,SD@-3,Y(#0S.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P
XM(#`N,#`P(#`@,`H)(#0U.2`T,CD@-3,Y(#0R.2`Y.3DY(#DY.3D*,B`Q(#`@
XM,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#0U.2`T,3D@-3,Y(#0Q.2`Y.3DY(#DY
XM.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#0U.2`T,#D@-3,Y(#0P
XM.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#0U.2`S
XM.3D@-3,Y(#,Y.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@
XM,`H)(#0R.2`T-3D@-#4Y(#0U.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P
XM(#`N,#`P(#`@,`H)(#0R.2`T-#D@-#4Y(#0T.2`Y.3DY(#DY.3D*,B`Q(#`@
XM,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#0R.2`T,SD@-#4Y(#0S.2`Y.3DY(#DY
XM.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#0R.2`T,CD@-#4Y(#0R
XM.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#0R.2`T
XM,3D@-#4Y(#0Q.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@
XM,`H)(#0R.2`T,#D@-#4Y(#0P.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P
XM(#`N,#`P(#`@,`H)(#,X.2`T-3D@-#`Y(#0U.2`Y.3DY(#DY.3D*,B`Q(#`@
XM,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#,X.2`T-#D@-#`Y(#0T.2`Y.3DY(#DY
XM.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#,X.2`T,SD@-#`Y(#0S
XM.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#,X.2`T
XM,CD@-#`Y(#0R.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@
XM,`H)(#,X.2`T,3D@-#`Y(#0Q.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P
XM(#`N,#`P(#`@,`H)(#,X.2`T,#D@-#`Y(#0P.2`Y.3DY(#DY.3D*,B`Q(#`@
XM,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#0R.2`S.3D@-#4Y(#,Y.2`Y.3DY(#DY
XM.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#,X.2`S.3D@-#`Y(#,Y
XM.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#(S.2`T
XM-3D@,C<Y(#0U.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@
XM,`H)(#(S.2`T-#D@,C<Y(#0T.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P
XM(#`N,#`P(#`@,`H)(#(S.2`T,SD@,C<Y(#0S.2`Y.3DY(#DY.3D*,B`Q(#`@
XM,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#(S.2`T,CD@,C<Y(#0R.2`Y.3DY(#DY
XM.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#(Y.2`T-3D@,S$Y(#0U
XM.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#(Y.2`T
XM-#D@,S$Y(#0T.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@
XM,`H)(#(Y.2`T,SD@,S$Y(#0S.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P
XM(#`N,#`P(#`@,`H)(#(Y.2`T,CD@,S$Y(#0R.2`Y.3DY(#DY.3D*,B`Q(#`@
XM,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#(Y.2`T,3D@,S$Y(#0Q.2`Y.3DY(#DY
XM.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#(S.2`T,3D@,C<Y(#0Q
XM.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#(Y.2`T
XM,#D@,S$Y(#0P.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@
XM,`H)(#(S.2`T,#D@,C<Y(#0P.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P
XM(#`N,#`P(#`@,`H)(#(Y.2`S.3D@,S$Y(#,Y.2`Y.3DY(#DY.3D*,B`Q(#`@
XM,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#(S.2`S.3D@,C<Y(#,Y.2`Y.3DY(#DY
XM.3D*,B`R(#`@,B`P(#`@,"`P(#`N,#`P(#`@,`H)(#0P.2`S.30@-#(Y(#,Y
XM-"`T,CD@-#8T(#0P.2`T-C0@-#`Y(#,Y-"`Y.3DY(#DY.3D*,B`R(#`@,B`P
XM(#`@,"`P(#`N,#`P(#`@,`H)(#(W.2`S.30@,CDY(#,Y-"`R.3D@-#8T(#(W
XM.2`T-C0@,C<Y(#,Y-"`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P
XM(#`@,`H)(#8V.2`S-SD@-#<T(#,W.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@
XM,"`P(#`N,#`P(#`@,`H)(#,S-"`S-3D@,S8Y(#,U.2`Y.3DY(#DY.3D*,B`Q
XM(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#(S.2`S-CD@,C4T(#,V.2`Y.3DY
XM(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#8V.2`S-CD@-#0Y
XM(#,V.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#(S
XM.2`S-#D@,S`Y(#,T.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@,"`P(#`N,#`P
XM(#`@,`H)(#8V.2`S-#D@,SDT(#,T.2`Y.3DY(#DY.3D*,B`Q(#`@,2`P(#`@
XM,"`P(#`N,#`P(#`@,`H)(#,V.2`S,SD@-C8Y(#,S.2`Y.3DY(#DY.3D*,B`Q
XM(#`@,2`P(#`@,"`P(#`N,#`P(#`@,`H)(#(S.2`S,SD@,S,Y(#,S.2`Y.3DY
XM(#DY.3D*,B`Q(#`@,B`P(#`@,"`P(#`N,#`P(#`@,`H)(#(S.2`S-3D@,C@T
XM(#,U.2`Y.3DY(#DY.3D*,B`Q(#`@,B`P(#`@,"`P(#`N,#`P(#`@,`H)(#8V
XM.2`S-3D@-#$Y(#,U.2`Y.3DY(#DY.3D*,B`Q(#`@,B`P(#`@,"`P(#`N,#`P
XM(#`@,`H)(#(S.2`S-S4@,C,Y(#(P.2`V-CD@,C`Y(#8V.2`U,3D@,C,Y(#4Q
XM.2`R,SD@,SDT(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P
XM"@D@-#@Y(#,X.2`U,SD@,S@Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@
XM,"XP,#`@,"`P"@D@,S@Y(#,X.2`T-3D@,S@Y(#DY.3D@.3DY.0HR(#$@,"`Q
XM(#`@,"`P(#`@,"XP,#`@,"`P"@D@,C0Y(#,X.2`S,3D@,S@Y(#DY.3D@.3DY
XM.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,S`T(#,V.2`S.3D@,S8Y
XM(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,C<Y(#,W
XM.2`T,CD@,S<Y(#DY.3D@.3DY.0HR(#$@,"`R(#`@,"`P(#`@,"XP,#`@,"`P
XM"@D@-#4Y(#,X.2`T-3D@-3$Y(#DY.3D@.3DY.0HR(#,@,"`R(#`@,"`P(#`@
XM,"XP,#`@,"`P"@D@,C$Y(#,Y.2`S-30@,S4R(#0X-"`S.3D@-#DQ(#,X-2`S
XM-30@,S,T(#(Q,R`S.#0@,C$Y(#,Y.2`Y.3DY(#DY.3D*,B`Q(#`@,B`P(#`@
XM,"`P(#`N,#`P(#`@,`H)(#,Q.2`U,3D@,S$Y(#,X-"`S.#D@,S@T(#,X.2`U
XM,3D@.3DY.2`Y.3DY"C(@,B`P(#(@,"`P(#`@,"`P+C`P,"`P(#`*"2`U,SD@
XM,S@T(#4S.2`T-CD@-C$Y(#0V.2`V,3D@,S@T(#4S.2`S.#0@.3DY.2`Y.3DY
XM"C(@,B`P(#(@,"`P(#`@,"`P+C`P,"`P(#`*"2`S,3D@,C0Y(#,Q.2`S,30@
XM,S@Y(#,Q-"`S.#D@,C0Y(#,Q.2`R-#D@.3DY.2`Y.3DY"C(@,B`P(#(@,"`P
XM(#`@,"`P+C`P,"`P(#`*"2`U,3D@,C0Y(#4Q.2`S,30@-3@Y(#,Q-"`U.#D@
XM,C0Y(#4Q.2`R-#D@.3DY.2`Y.3DY"C(@,R`P(#(@,"`P(#`@,"`P+C`P,"`P
XM(#`*"2`R,3D@,C$T(#(Q-"`Q.3@@-#4T(#$Q,2`V.34@,C`P(#8X.2`R,30@
XM-#4T(#$R.2`R,3D@,C$T(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP
XM,#`@,"`P"@D@-#8Y(#$U.2`U,S0@,34Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@
XM,"`P(#`@,"XP,#`@,"`P"@D@,S<T(#$U.2`T,SD@,34Y(#DY.3D@.3DY.0HR
XM(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@-#(Y(#$S.2`T-SD@,3,Y(#DY
XM.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,SDY(#$T.2`U
XM,#0@,30Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@
XM-#8Y(#$V.2`U-C0@,38Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP
XM,#`@,"`P"@D@,S0T(#$V.2`T,SD@,38Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@
XM,"`P(#`@,"XP,#`@,"`P"@D@-#8Y(#$W.2`U.#D@,3<Y(#DY.3D@.3DY.0HR
XM(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,S$T(#$W.2`T,SD@,3<Y(#DY
XM.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,C@Y(#$X.2`V
XM,3D@,3@Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@
XM,C4Y(#$Y.2`V-#D@,3DY(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP
XM,#`@,"`P"@D@,S@Y(#4P.2`V-CD@-3`Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@
XM,"`P(#`@,"XP,#`@,"`P"@D@,S@Y(#0Y.2`V-CD@-#DY(#DY.3D@.3DY.0HR
XM(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,S@Y(#0X.2`V-CD@-#@Y(#DY
XM.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,S@Y(#0W.2`V
XM-CD@-#<Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@
XM,S@Y(#0V.2`U,SD@-#8Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP
XM,#`@,"`P"@D@-C$Y(#0V.2`V-CD@-#8Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@
XM,"`P(#`@,"XP,#`@,"`P"@D@-C$Y(#0U.2`V-CD@-#4Y(#DY.3D@.3DY.0HR
XM(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@-C$Y(#0T.2`V-CD@-#0Y(#DY
XM.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@-C$Y(#0S.2`V
XM-CD@-#,Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@
XM-C$Y(#0R.2`V-CD@-#(Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP
XM,#`@,"`P"@D@-C$Y(#0Q.2`V-CD@-#$Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@
XM,"`P(#`@,"XP,#`@,"`P"@D@-C$Y(#0P.2`V-CD@-#`Y(#DY.3D@.3DY.0HR
XM(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@-C$Y(#,Y.2`V-CD@,SDY(#DY
XM.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@-C$Y(#,X.2`V
XM-CD@,S@Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@
XM,S@Y(#,P.2`U,3D@,S`Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP
XM,#`@,"`P"@D@,S@Y(#(Y.2`U,3D@,CDY(#DY.3D@.3DY.0HR(#$@,"`Q(#`@
XM,"`P(#`@,"XP,#`@,"`P"@D@,S@Y(#(X.2`U,3D@,C@Y(#DY.3D@.3DY.0HR
XM(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,S@Y(#(W.2`U,3D@,C<Y(#DY
XM.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,S@Y(#(V.2`U
XM,3D@,C8Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@
XM,S@Y(#(U.2`U,3D@,C4Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP
XM,#`@,"`P"@D@,C,Y(#(Q.2`V-CD@,C$Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@
XM,"`P(#`@,"XP,#`@,"`P"@D@,C,Y(#(R.2`V-CD@,C(Y(#DY.3D@.3DY.0HR
XM(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,C,Y(#(S.2`V-CD@,C,Y(#DY
XM.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,C,Y(#(T.2`V
XM-CD@,C0Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@
XM,C,Y(#,Q.2`V-CD@,S$Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP
XM,#`@,"`P"@D@,C,Y(#,R.2`V-CD@,S(Y(#DY.3D@.3DY.0HR(#(@,"`Q(#`@
XM,"`P(#`@,"XP,#`@,"`P"@D@,S(T(#,X.2`S,C0@-3$Y(#,X-"`U,3D@,S@T
XM(#,X.2`S,C0@,S@Y(#DY.3D@.3DY.0HR(#(@,"`Q(#`@,"`P(#`@,"XP,#`@
XM,"`P"@D@,C,Y(#4Q.2`V-CD@-3$Y(#8V.2`U-30@,C,Y(#4U-"`R,SD@-3$Y
XM(#DY.3D@.3DY.0HR(#(@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@-30T(#,X
XM.2`U-#0@-#(T(#8Q-"`T,C0@-C$T(#,X.2`U-#0@,S@Y(#DY.3D@.3DY.0HR
XM(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@-30T(#0P,"`V,30@-#`P(#DY
XM.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@-30T(#0Q,R`V
XM,30@-#$S(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@
XM-34X(#,X.2`U-3@@-#(T(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP
XM,#`@,"`P"@D@-3<R(#,X.2`U-S(@-#(T(#DY.3D@.3DY.0HR(#$@,"`Q(#`@
XM,"`P(#`@,"XP,#`@,"`P"@D@-3@V(#,X.2`U.#8@-#(T(#DY.3D@.3DY.0HR
XM(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@-C`P(#,X.2`V,#`@-#(T(#DY
XM.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@-C`P(#0R.2`V
XM,#`@-#8T(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@
XM-3@V(#0R.2`U.#8@-#8T(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP
XM,#`@,"`P"@D@-3<R(#0R.2`U-S(@-#8T(#DY.3D@.3DY.0HR(#$@,"`Q(#`@
XM,"`P(#`@,"XP,#`@,"`P"@D@-34X(#0R.2`U-3@@-#8T(#DY.3D@.3DY.0HR
XM(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@-30T(#0U,R`V,30@-#4S(#DY
XM.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@-30T(#0T,"`V
XM,30@-#0P(#DY.3D@.3DY.0HR(#(@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@
XM-30T(#0R.2`U-#0@-#8T(#8Q-"`T-C0@-C$T(#0R.2`U-#0@-#(Y(#DY.3D@
XM.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,S(T(#(Y-R`S.#0@
XM,CDW(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,S8Y
XM(#(X-"`S-CD@,S`Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@
XM,"`P"@D@,S,Y(#(X-"`S,SD@,S`Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P
XM(#`@,"XP,#`@,"`P"@D@,S4T(#(X-"`S-30@,S`Y(#DY.3D@.3DY.0HR(#(@
XM,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,S(T(#(X-"`S.#0@,C@T(#,X-"`S
XM,#D@,S(T(#,P.2`S,C0@,C@T(#DY.3D@.3DY.0HR(#(@,"`Q(#`@,"`P(#`@
XM,"XP,#`@,"`P"@D@,S(T(#(U-"`S.#0@,C4T(#,X-"`R-SD@,S(T(#(W.2`S
XM,C0@,C4T(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@
XM,S4T(#(U-"`S-30@,C<Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP
XM,#`@,"`P"@D@,S,Y(#(U-"`S,SD@,C<Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@
XM,"`P(#`@,"XP,#`@,"`P"@D@,S8Y(#(U-"`S-CD@,C<Y(#DY.3D@.3DY.0HR
XM(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,S(T(#(V-R`S.#0@,C8W(#DY
XM.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@-3(T(#(V-R`U
XM.#0@,C8W(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@
XM-38Y(#(U-"`U-CD@,C<Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP
XM,#`@,"`P"@D@-3,Y(#(U-"`U,SD@,C<Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@
XM,"`P(#`@,"XP,#`@,"`P"@D@-34T(#(U-"`U-30@,C<Y(#DY.3D@.3DY.0HR
XM(#(@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@-3(T(#(U-"`U.#0@,C4T(#4X
XM-"`R-SD@-3(T(#(W.2`U,C0@,C4T(#DY.3D@.3DY.0HR(#(@,"`Q(#`@,"`P
XM(#`@,"XP,#`@,"`P"@D@-3(T(#(X-"`U.#0@,C@T(#4X-"`S,#D@-3(T(#,P
XM.2`U,C0@,C@T(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P
XM"@D@-34T(#(X-"`U-30@,S`Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@
XM,"XP,#`@,"`P"@D@-3,Y(#(X-"`U,SD@,S`Y(#DY.3D@.3DY.0HR(#$@,"`Q
XM(#`@,"`P(#`@,"XP,#`@,"`P"@D@-38Y(#(X-"`U-CD@,S`Y(#DY.3D@.3DY
XM.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@-3(T(#(Y-R`U.#0@,CDW
XM(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@-3@Y(#(U
XM.2`V-CD@,C4Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P
XM"@D@-3@Y(#(V.2`V-CD@,C8Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@
XM,"XP,#`@,"`P"@D@-3@Y(#(W.2`V-CD@,C<Y(#DY.3D@.3DY.0HR(#$@,"`Q
XM(#`@,"`P(#`@,"XP,#`@,"`P"@D@-3@Y(#(X.2`V-CD@,C@Y(#DY.3D@.3DY
XM.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@-3@Y(#(Y.2`V-CD@,CDY
XM(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@-3@Y(#,P
XM.2`V-CD@,S`Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P
XM"@D@,C,Y(#0V.2`S,3D@-#8Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@
XM,"XP,#`@,"`P"@D@,C,Y(#0W.2`S,3D@-#<Y(#DY.3D@.3DY.0HR(#$@,"`Q
XM(#`@,"`P(#`@,"XP,#`@,"`P"@D@,C,Y(#0X.2`S,3D@-#@Y(#DY.3D@.3DY
XM.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,C,Y(#0Y.2`S,3D@-#DY
XM(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,C,Y(#4P
XM.2`S,3D@-3`Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P
XM"@D@,C,Y(#(U.2`S,3D@,C4Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@
XM,"XP,#`@,"`P"@D@,C,Y(#(V.2`S,3D@,C8Y(#DY.3D@.3DY.0HR(#$@,"`Q
XM(#`@,"`P(#`@,"XP,#`@,"`P"@D@,C,Y(#(W.2`S,3D@,C<Y(#DY.3D@.3DY
XM.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,C,Y(#(X.2`S,3D@,C@Y
XM(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@,C,Y(#(Y
XM.2`S,3D@,CDY(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P
XM"@D@,C,Y(#,P.2`S,3D@,S`Y(#DY.3D@.3DY.0HR(#(@,"`Q(#`@,"`P(#`@
XM,"XP,#`@,"`P"@D@-#,Y(#$U-"`T,SD@,3@T(#0V.2`Q.#0@-#8Y(#$U-"`T
XM,SD@,34T(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@
XM-#0T(#$U.2`T-C0@,34Y(#DY.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP
XM,#`@,"`P"@D@-#0T(#$V-"`T-C0@,38T(#DY.3D@.3DY.0HR(#$@,"`Q(#`@
XM,"`P(#`@,"XP,#`@,"`P"@D@-#0T(#$V.2`T-C0@,38Y(#DY.3D@.3DY.0HR
XM(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@-#0T(#$W-"`T-C0@,3<T(#DY
XM.3D@.3DY.0HR(#$@,"`Q(#`@,"`P(#`@,"XP,#`@,"`P"@D@-#0T(#$W.2`T
X1-C0@,3<Y(#DY.3D@.3DY.0H@
X`
Xend
END_OF_FILE
if test 12519 -ne `wc -c <'Examples/house_elev.fig.uu'`; then
    echo shar: \"'Examples/house_elev.fig.uu'\" unpacked with wrong size!
fi
# end of 'Examples/house_elev.fig.uu'
fi
if test -f 'Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Makefile'\"
else
echo shar: Extracting \"'Makefile'\" \(12410 characters\)
sed "s/^X//" >'Makefile' <<'END_OF_FILE'
X# Makefile generated by imake - do not edit!
X# $XConsortium: imake.c,v 1.65 91/07/25 17:50:17 rws Exp $
X#
X# The cpp used on this machine replaces all newlines and multiple tabs and
X# spaces in a macro expansion with a single space.  Imake tries to compensate
X# for this, but is not always successful.
X#
X
X# -------------------------------------------------------------------------
X# Makefile generated from "Imake.tmpl" and <Imakefile>
X# $XConsortium: Imake.tmpl,v 1.139 91/09/16 08:52:48 rws Exp $
X#
X# Platform-specific parameters may be set in the appropriate <vendor>.cf
X# configuration files.  Site-specific parameters should be set in the file
X# site.def.  Full rebuilds are recommended if any parameters are changed.
X#
X# If your C preprocessor does not define any unique symbols, you will need
X# to set BOOTSTRAPCFLAGS when rebuilding imake (usually when doing
X# "make World" the first time).
X#
X
X# -------------------------------------------------------------------------
X# site-specific configuration parameters that need to come before
X# the platform-specific parameters - edit site.def to change
X
X# site:  $XConsortium: site.def,v 1.2 91/07/30 20:26:44 rws Exp $
X
X# -------------------------------------------------------------------------
X# platform-specific configuration parameters - edit sun.cf to change
X
X# platform:  $XConsortium: sun.cf,v 1.68 91/07/30 11:34:39 rws Exp $
X
X# operating system:  SunOS 4.1.1
X
X# $XConsortium: sunLib.rules,v 1.6 91/03/24 17:55:58 rws Exp $
X
X# -------------------------------------------------------------------------
X# site-specific configuration parameters that go after
X# the platform-specific parameters - edit site.def to change
X
X# site:  $XConsortium: site.def,v 1.2 91/07/30 20:26:44 rws Exp $
X
X            SHELL = /bin/sh
X
X              TOP = .
X      CURRENT_DIR = .
X
X               AR = ar clq
X  BOOTSTRAPCFLAGS =
X               CC = cc
X               AS = as
X
X         COMPRESS = compress
X              CPP = /lib/cpp $(STD_CPP_DEFINES)
X    PREPROCESSCMD = cc -E $(STD_CPP_DEFINES)
X          INSTALL = install
X               LD = ld
X             LINT = lint
X      LINTLIBFLAG = -C
X         LINTOPTS = -axz
X               LN = ln -s
X             MAKE = make
X               MV = mv
X               CP = cp
X
X           RANLIB = ranlib
X  RANLIBINSTFLAGS =
X
X               RM = rm -f
X            TROFF = psroff
X         MSMACROS = -ms
X              TBL = tbl
X              EQN = eqn
X     STD_INCLUDES =
X  STD_CPP_DEFINES =
X      STD_DEFINES =
X EXTRA_LOAD_FLAGS =
X  EXTRA_LIBRARIES =
X             TAGS = ctags
X
X    SHAREDCODEDEF = -DSHAREDCODE
X         SHLIBDEF = -DSUNSHLIB
X
X    PROTO_DEFINES =
X
X     INSTPGMFLAGS =
X
X     INSTBINFLAGS = -m 0755
X     INSTUIDFLAGS = -m 4755
X     INSTLIBFLAGS = -m 0644
X     INSTINCFLAGS = -m 0444
X     INSTMANFLAGS = -m 0444
X     INSTDATFLAGS = -m 0444
X    INSTKMEMFLAGS = -m 4755
X
X      PROJECTROOT = /usr/X11/R5
X
X     TOP_INCLUDES = -I$(INCROOT)
X
X      CDEBUGFLAGS = -O
X        CCOPTIONS = -pipe
X
X      ALLINCLUDES = $(INCLUDES) $(EXTRA_INCLUDES) $(TOP_INCLUDES) $(STD_INCLUDES)
X       ALLDEFINES = $(ALLINCLUDES) $(STD_DEFINES) $(EXTRA_DEFINES) $(PROTO_DEFINES) $(DEFINES)
X           CFLAGS = $(CDEBUGFLAGS) $(CCOPTIONS) $(ALLDEFINES)
X        LINTFLAGS = $(LINTOPTS) -DLINT $(ALLDEFINES)
X
X           LDLIBS = $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)
X
X        LDOPTIONS = $(CDEBUGFLAGS) $(CCOPTIONS) $(LOCAL_LDFLAGS) -L$(USRLIBDIR)
X
X   LDCOMBINEFLAGS = -X -r
X      DEPENDFLAGS =
X
X        MACROFILE = sun.cf
X           RM_CMD = $(RM) *.CKP *.ln *.BAK *.bak *.o core errs ,* *~ *.a .emacs_* tags TAGS make.log MakeOut
X
X    IMAKE_DEFINES =
X
X         IRULESRC = $(CONFIGDIR)
X        IMAKE_CMD = $(IMAKE) -DUseInstalled -I$(IRULESRC) $(IMAKE_DEFINES)
X
X     ICONFIGFILES = $(IRULESRC)/Imake.tmpl $(IRULESRC)/Imake.rules \
X			$(IRULESRC)/Project.tmpl $(IRULESRC)/site.def \
X			$(IRULESRC)/$(MACROFILE) $(EXTRA_ICONFIGFILES)
X
X# -------------------------------------------------------------------------
X# X Window System Build Parameters
X# $XConsortium: Project.tmpl,v 1.138 91/09/10 09:02:12 rws Exp $
X
X# -------------------------------------------------------------------------
X# X Window System make variables; this need to be coordinated with rules
X
X          PATHSEP = /
X        USRLIBDIR = /usr/X11/R5/lib
X           BINDIR = /usr/X11/R5/bin
X          INCROOT = /usr/X11/R5/include
X     BUILDINCROOT = $(TOP)
X      BUILDINCDIR = $(BUILDINCROOT)/X11
X      BUILDINCTOP = ..
X           INCDIR = $(INCROOT)/X11
X           ADMDIR = /usr/adm
X           LIBDIR = $(USRLIBDIR)/X11
X        CONFIGDIR = $(LIBDIR)/config
X       LINTLIBDIR = $(USRLIBDIR)/lint
X
X          FONTDIR = $(LIBDIR)/fonts
X         XINITDIR = $(LIBDIR)/xinit
X           XDMDIR = $(LIBDIR)/xdm
X           TWMDIR = $(LIBDIR)/twm
X          MANPATH = /usr/X11/R5/man
X    MANSOURCEPATH = $(MANPATH)/man
X        MANSUFFIX = n
X     LIBMANSUFFIX = 3
X           MANDIR = $(MANSOURCEPATH)$(MANSUFFIX)
X        LIBMANDIR = $(MANSOURCEPATH)$(LIBMANSUFFIX)
X           NLSDIR = $(LIBDIR)/nls
X        PEXAPIDIR = $(LIBDIR)/PEX
X      XAPPLOADDIR = $(LIBDIR)/app-defaults
X       FONTCFLAGS = -t
X
X     INSTAPPFLAGS = $(INSTDATFLAGS)
X
X            IMAKE = imake
X           DEPEND = makedepend
X              RGB = rgb
X
X            FONTC = bdftopcf
X
X        MKFONTDIR = mkfontdir
X        MKDIRHIER = /bin/sh $(BINDIR)/mkdirhier
X
X        CONFIGSRC = $(TOP)/config
X       DOCUTILSRC = $(TOP)/doc/util
X        CLIENTSRC = $(TOP)/clients
X          DEMOSRC = $(TOP)/demos
X           LIBSRC = $(TOP)/lib
X          FONTSRC = $(TOP)/fonts
X       INCLUDESRC = $(TOP)/X11
X        SERVERSRC = $(TOP)/server
X          UTILSRC = $(TOP)/util
X        SCRIPTSRC = $(UTILSRC)/scripts
X       EXAMPLESRC = $(TOP)/examples
X       CONTRIBSRC = $(TOP)/../contrib
X           DOCSRC = $(TOP)/doc
X           RGBSRC = $(TOP)/rgb
X        DEPENDSRC = $(UTILSRC)/makedepend
X         IMAKESRC = $(CONFIGSRC)
X         XAUTHSRC = $(LIBSRC)/Xau
X          XLIBSRC = $(LIBSRC)/X
X           XMUSRC = $(LIBSRC)/Xmu
X       TOOLKITSRC = $(LIBSRC)/Xt
X       AWIDGETSRC = $(LIBSRC)/Xaw
X       OLDXLIBSRC = $(LIBSRC)/oldX
X      XDMCPLIBSRC = $(LIBSRC)/Xdmcp
X      BDFTOSNFSRC = $(FONTSRC)/bdftosnf
X      BDFTOSNFSRC = $(FONTSRC)/clients/bdftosnf
X      BDFTOPCFSRC = $(FONTSRC)/clients/bdftopcf
X     MKFONTDIRSRC = $(FONTSRC)/clients/mkfontdir
X         FSLIBSRC = $(FONTSRC)/lib/fs
X    FONTSERVERSRC = $(FONTSRC)/server
X     EXTENSIONSRC = $(TOP)/extensions
X         XILIBSRC = $(EXTENSIONSRC)/lib/xinput
X      PHIGSLIBSRC = $(EXTENSIONSRC)/lib/PEX
X
X# $XConsortium: sunLib.tmpl,v 1.11 91/07/31 11:32:08 rws Exp $
X
XSHLIBLDFLAGS = -assert pure-text
XPICFLAGS = -pic
X
X  DEPEXTENSIONLIB =
X     EXTENSIONLIB = -lXext
X
X          DEPXLIB = $(DEPEXTENSIONLIB)
X             XLIB = $(EXTENSIONLIB) -lX11
X
X        DEPXMULIB = $(USRLIBDIR)/libXmu.sa.$(SOXMUREV)
X           XMULIB = -lXmu
X
X       DEPOLDXLIB =
X          OLDXLIB = -loldX
X
X      DEPXTOOLLIB = $(USRLIBDIR)/libXt.sa.$(SOXTREV)
X         XTOOLLIB = -lXt
X
X        DEPXAWLIB = $(USRLIBDIR)/libXaw.sa.$(SOXAWREV)
X           XAWLIB = -lXaw
X
X        DEPXILIB =
X           XILIB = -lXi
X
X        SOXLIBREV = 4.10
X          SOXTREV = 4.10
X         SOXAWREV = 5.0
X        SOOLDXREV = 4.10
X         SOXMUREV = 4.10
X        SOXEXTREV = 4.10
X      SOXINPUTREV = 4.10
X
X      DEPXAUTHLIB = $(USRLIBDIR)/libXau.a
X         XAUTHLIB =  -lXau
X      DEPXDMCPLIB = $(USRLIBDIR)/libXdmcp.a
X         XDMCPLIB =  -lXdmcp
X
X        DEPPHIGSLIB = $(USRLIBDIR)/libphigs.a
X           PHIGSLIB =  -lphigs
X
X       DEPXBSDLIB = $(USRLIBDIR)/libXbsd.a
X          XBSDLIB =  -lXbsd
X
X LINTEXTENSIONLIB = $(LINTLIBDIR)/llib-lXext.ln
X         LINTXLIB = $(LINTLIBDIR)/llib-lX11.ln
X          LINTXMU = $(LINTLIBDIR)/llib-lXmu.ln
X        LINTXTOOL = $(LINTLIBDIR)/llib-lXt.ln
X          LINTXAW = $(LINTLIBDIR)/llib-lXaw.ln
X           LINTXI = $(LINTLIBDIR)/llib-lXi.ln
X        LINTPHIGS = $(LINTLIBDIR)/llib-lphigs.ln
X
X          DEPLIBS = $(DEPXAWLIB) $(DEPXMULIB) $(DEPXTOOLLIB) $(DEPXLIB)
X
X         DEPLIBS1 = $(DEPLIBS)
X         DEPLIBS2 = $(DEPLIBS)
X         DEPLIBS3 = $(DEPLIBS)
X
X# -------------------------------------------------------------------------
X# Imake rules for building libraries, programs, scripts, and data files
X# rules:  $XConsortium: Imake.rules,v 1.123 91/09/16 20:12:16 rws Exp $
X
X# -------------------------------------------------------------------------
X# start of Imakefile
X
XSYS_LIBRARIES= 		-lm
XDEPLIBS = 		$(DEPXAWLIB) $(DEPXMULIB) $(DEPXTOOLLIB) $(DEPXLIB)
XLOCAL_LIBRARIES = 	$(XAWLIB) $(XMULIB) $(XTOOLLIB) $(XLIB)
XCDEBUGFLAGS =		-O
XXFIGLIBDIR =		/usr/local/lib/xfig
XDEFINES =		-DXFIGLIBDIR=\"$(XFIGLIBDIR)\"
X
XXFIGSRC =	d_arc.c d_arcbox.c d_box.c d_ellipse.c d_epsobj.c\
X		d_intspline.c d_line.c d_regpoly.c d_spline.c d_text.c\
X		e_addpt.c e_align.c e_arrow.c e_break.c \
X		e_convert.c e_copy.c e_delete.c e_deletept.c\
X		e_edit.c e_flip.c e_glue.c e_move.c\
X		e_movept.c e_rotate.c e_scale.c e_update.c\
X		f_load.c f_read.c f_epsobj.c\
X		f_readold.c f_save.c f_util.c f_xbitmap.c\
X		main.c mode.c object.c resources.c\
X		u_bound.c u_create.c u_drag.c u_draw.c\
X		u_elastic.c u_error.c u_fonts.c u_free.c u_geom.c\
X		u_list.c u_markers.c u_pan.c u_print.c\
X		u_redraw.c u_search.c u_translate.c u_undo.c\
X		w_canvas.c w_cmdpanel.c w_cursor.c w_dir.c w_drawprim.c w_export.c\
X		w_file.c w_fontbits.c w_fontpanel.c w_grid.c w_icons.c\
X		w_indpanel.c w_modepanel.c w_mousefun.c w_msgpanel.c\
X		w_print.c w_rulers.c w_setup.c w_util.c w_zoom.c
X
XXFIGOBJ =	d_arc.o d_arcbox.o d_box.o d_ellipse.o d_epsobj.o\
X		d_intspline.o d_line.o d_regpoly.o d_spline.o d_text.o\
X		e_addpt.o e_align.o e_arrow.o e_break.o \
X		e_convert.o e_copy.o e_delete.o e_deletept.o\
X		e_edit.o e_flip.o e_glue.o e_move.o\
X		e_movept.o e_rotate.o e_scale.o e_update.o\
X		f_load.o f_read.o f_epsobj.o\
X		f_readold.o f_save.o f_util.o f_xbitmap.o\
X		main.o mode.o object.o resources.o\
X		u_bound.o u_create.o u_drag.o u_draw.o\
X		u_elastic.o u_error.o u_fonts.o u_free.o u_geom.o\
X		u_list.o u_markers.o u_pan.o u_print.o\
X		u_redraw.o u_search.o u_translate.o u_undo.o\
X		w_canvas.o w_cmdpanel.o w_cursor.o w_dir.o w_drawprim.o w_export.o\
X		w_file.o w_fontbits.o w_fontpanel.o w_grid.o w_icons.o\
X		w_indpanel.o w_modepanel.o w_mousefun.o w_msgpanel.o\
X		w_print.o w_rulers.o w_setup.o w_util.o w_zoom.o
X
XSRCS = $(XFIGSRC)
XOBJS = $(XFIGOBJ)
X
X PROGRAM = xfig
X
Xall:: xfig
X
Xxfig: $(OBJS) $(DEPLIBS)
X	$(RM) $@
X	$(CC) -o $@ $(OBJS) $(LDOPTIONS) $(LOCAL_LIBRARIES) $(LDLIBS) $(EXTRA_LOAD_FLAGS)
X
Xsaber_xfig:: $(SRCS)
X	# load $(ALLDEFINES) $(SRCS) $(LOCAL_LIBRARIES) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)
X
Xosaber_xfig:: $(OBJS)
X	# load $(ALLDEFINES) $(OBJS) $(LOCAL_LIBRARIES) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)
X
Xinstall:: xfig
X	@if [ -d $(DESTDIR)$(BINDIR) ]; then set +x; \
X	else (set -x; $(MKDIRHIER) $(DESTDIR)$(BINDIR)); fi
X	$(INSTALL) -c $(INSTPGMFLAGS)  xfig $(DESTDIR)$(BINDIR)
X
Xinstall.man:: Doc/xfig.man
X	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
X	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
X	$(INSTALL) -c $(INSTMANFLAGS) Doc/xfig.man $(DESTDIR)$(MANDIR)/xfig.$(MANSUFFIX)
X
Xdepend::
X	$(DEPEND) $(DEPENDFLAGS) -s "# DO NOT DELETE" -- $(ALLDEFINES) -- $(SRCS)
X
Xlint:
X	$(LINT) $(LINTFLAGS) $(SRCS) $(LINTLIBS)
Xlint1:
X	$(LINT) $(LINTFLAGS) $(FILE) $(LINTLIBS)
X
Xclean::
X	$(RM) $(PROGRAM)
X
Xinstall::
X	@case '${MFLAGS}' in *[i]*) set +e;; esac;
X	@for i in $(XFIGLIBDIR); do if [ -d $(DESTDIR)$$i ]; then \
X	set +x; else (set -x; $(MKDIRHIER) $(DESTDIR)$$i); fi \
X	done
X
Xinstall:: CompKeyDB
X	$(INSTALL) -c $(INSTDATFLAGS) CompKeyDB $(DESTDIR)$(XFIGLIBDIR)
X
X# -------------------------------------------------------------------------
X# common rules for all Makefiles - do not edit
X
Xemptyrule::
X
Xclean::
X	$(RM_CMD) "#"*
X
XMakefile::
X	-@if [ -f Makefile ]; then set -x; \
X	$(RM) Makefile.bak; $(MV) Makefile Makefile.bak; \
X	else exit 0; fi
X	$(IMAKE_CMD) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT_DIR)
X
Xtags::
X	$(TAGS) -w *.[ch]
X	$(TAGS) -xw *.[ch] > TAGS
X
Xsaber:
X	# load $(ALLDEFINES) $(SRCS)
X
Xosaber:
X	# load $(ALLDEFINES) $(OBJS)
X
X# -------------------------------------------------------------------------
X# empty rules for directories that do not have SUBDIRS - do not edit
X
Xinstall::
X	@echo "install in $(CURRENT_DIR) done"
X
Xinstall.man::
X	@echo "install.man in $(CURRENT_DIR) done"
X
XMakefiles::
X
Xincludes::
X
X# -------------------------------------------------------------------------
X# dependencies generated by makedepend
X
END_OF_FILE
if test 12410 -ne `wc -c <'Makefile'`; then
    echo shar: \"'Makefile'\" unpacked with wrong size!
fi
# end of 'Makefile'
fi
if test -f 'u_bound.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'u_bound.c'\"
else
echo shar: Extracting \"'u_bound.c'\" \(12276 characters\)
sed "s/^X//" >'u_bound.c' <<'END_OF_FILE'
X/*
X * FIG : Facility for Interactive Generation of figures
X * Copyright (c) 1985 by Supoj Sutanthavibul
X *
X * "Permission to use, copy, modify, distribute, and sell this software and its
X * documentation for any purpose is hereby granted without fee, provided that
X * the above copyright notice appear in all copies and that both that
X * copyright notice and this permission notice appear in supporting
X * documentation, and that the name of M.I.T. not be used in advertising or
X * publicity pertaining to distribution of the software without specific,
X * written prior permission.  M.I.T. makes no representations about the
X * suitability of this software for any purpose.  It is provided "as is"
X * without express or implied warranty."
X *
X */
X
X#include "fig.h"
X#include "object.h"
X#include "mode.h"
X#include "u_bound.h"
X
X#define		Ninety_deg		M_PI_2
X#define		One_eighty_deg		M_PI
X#define		Two_seventy_deg		(M_PI + M_PI_2)
X#define		Three_sixty_deg		(M_PI + M_PI)
X#define		half(z1 ,z2)		((z1+z2)/2.0)
X
X/* macro which rounds DOWN the coordinates depending on point positioning mode */
X#define		floor_coords(x) \
X    if (cur_pointposn != P_ANY) { \
X	    tmp_t = ((x) + 1) % posn_rnd[cur_pointposn]; \
X	    (x) = (x) - tmp_t; \
X	}
X
X/* macro which rounds UP the coordinates depending on point positioning mode */
X#define		ceil_coords(x) \
X    if (cur_pointposn != P_ANY) { \
X	    (x) = (x) + posn_rnd[cur_pointposn]; \
X	    tmp_t = (x)%posn_rnd[cur_pointposn]; \
X	    (x) = (x) - tmp_t - 1; \
X	}
X
Xstatic void	points_bound();
Xstatic void	int_spline_bound();
Xstatic void	normal_spline_bound();
Xstatic int	tmp_t;
X
Xarc_bound(arc, xmin, ymin, xmax, ymax)
X    F_arc	   *arc;
X    int		   *xmin, *ymin, *xmax, *ymax;
X{
X    float	    alpha, beta;
X    double	    dx, dy, radius;
X    int		    bx, by, sx, sy;
X    int		    half_wd;
X
X    dx = arc->point[0].x - arc->center.x;
X    dy = arc->center.y - arc->point[0].y;
X    alpha = atan2(dy, dx);
X    if (alpha < 0.0)
X	alpha += Three_sixty_deg;
X    /* compute_angle returns value between 0 to 2PI */
X
X    radius = sqrt((double) (dx * dx + dy * dy));
X
X    dx = arc->point[2].x - arc->center.x;
X    dy = arc->center.y - arc->point[2].y;
X    beta = atan2(dy, dx);
X    if (beta < 0.0)
X	beta += Three_sixty_deg;
X
X    bx = max2(arc->point[0].x, arc->point[1].x);
X    bx = max2(arc->point[2].x, bx);
X    by = max2(arc->point[0].y, arc->point[1].y);
X    by = max2(arc->point[2].y, by);
X    sx = min2(arc->point[0].x, arc->point[1].x);
X    sx = min2(arc->point[2].x, sx);
X    sy = min2(arc->point[0].y, arc->point[1].y);
X    sy = min2(arc->point[2].y, sy);
X
X    if (arc->direction == 1) {	/* counter clockwise */
X	if (alpha > beta) {
X	    if (alpha <= 0 || 0 <= beta)
X		bx = (int) (arc->center.x + radius + 1.0);
X	    if (alpha <= Ninety_deg || Ninety_deg <= beta)
X		sy = (int) (arc->center.y - radius - 1.0);
X	    if (alpha <= One_eighty_deg || One_eighty_deg <= beta)
X		sx = (int) (arc->center.x - radius - 1.0);
X	    if (alpha <= Two_seventy_deg || Two_seventy_deg <= beta)
X		by = (int) (arc->center.y + radius + 1.0);
X	} else {
X	    if (0 <= beta && alpha <= 0)
X		bx = (int) (arc->center.x + radius + 1.0);
X	    if (Ninety_deg <= beta && alpha <= Ninety_deg)
X		sy = (int) (arc->center.y - radius - 1.0);
X	    if (One_eighty_deg <= beta && alpha <= One_eighty_deg)
X		sx = (int) (arc->center.x - radius - 1.0);
X	    if (Two_seventy_deg <= beta && alpha <= Two_seventy_deg)
X		by = (int) (arc->center.y + radius + 1.0);
X	}
X    } else {			/* clockwise	 */
X	if (alpha > beta) {
X	    if (beta <= 0 && 0 <= alpha)
X		bx = (int) (arc->center.x + radius + 1.0);
X	    if (beta <= Ninety_deg && Ninety_deg <= alpha)
X		sy = (int) (arc->center.y - radius - 1.0);
X	    if (beta <= One_eighty_deg && One_eighty_deg <= alpha)
X		sx = (int) (arc->center.x - radius - 1.0);
X	    if (beta <= Two_seventy_deg && Two_seventy_deg <= alpha)
X		by = (int) (arc->center.y + radius + 1.0);
X	} else {
X	    if (0 <= alpha || beta <= 0)
X		bx = (int) (arc->center.x + radius + 1.0);
X	    if (Ninety_deg <= alpha || beta <= Ninety_deg)
X		sy = (int) (arc->center.y - radius - 1.0);
X	    if (One_eighty_deg <= alpha || beta <= One_eighty_deg)
X		sx = (int) (arc->center.x - radius - 1.0);
X	    if (Two_seventy_deg <= alpha || beta <= Two_seventy_deg)
X		by = (int) (arc->center.y + radius + 1.0);
X	}
X    }
X    half_wd = arc->thickness / 2;
X    *xmax = bx + half_wd;
X    *ymax = by + half_wd;
X    *xmin = sx - half_wd;
X    *ymin = sy - half_wd;
X}
X
Xcompound_bound(compound, xmin, ymin, xmax, ymax)
X    F_compound	   *compound;
X    int		   *xmin, *ymin, *xmax, *ymax;
X{
X    F_arc	   *a;
X    F_ellipse	   *e;
X    F_compound	   *c;
X    F_spline	   *s;
X    F_line	   *l;
X    F_text	   *t;
X    int		    bx, by, sx, sy, first = 1;
X    int		    llx, lly, urx, ury;
X
X    for (a = compound->arcs; a != NULL; a = a->next) {
X	arc_bound(a, &sx, &sy, &bx, &by);
X	if (first) {
X	    first = 0;
X	    llx = sx;
X	    lly = sy;
X	    urx = bx;
X	    ury = by;
X	} else {
X	    llx = min2(llx, sx);
X	    lly = min2(lly, sy);
X	    urx = max2(urx, bx);
X	    ury = max2(ury, by);
X	}
X    }
X
X    for (c = compound->compounds; c != NULL; c = c->next) {
X	sx = c->nwcorner.x;
X	sy = c->nwcorner.y;
X	bx = c->secorner.x;
X	by = c->secorner.y;
X	if (first) {
X	    first = 0;
X	    llx = sx;
X	    lly = sy;
X	    urx = bx;
X	    ury = by;
X	} else {
X	    llx = min2(llx, sx);
X	    lly = min2(lly, sy);
X	    urx = max2(urx, bx);
X	    ury = max2(ury, by);
X	}
X    }
X
X    for (e = compound->ellipses; e != NULL; e = e->next) {
X	ellipse_bound(e, &sx, &sy, &bx, &by);
X	if (first) {
X	    first = 0;
X	    llx = sx;
X	    lly = sy;
X	    urx = bx;
X	    ury = by;
X	} else {
X	    llx = min2(llx, sx);
X	    lly = min2(lly, sy);
X	    urx = max2(urx, bx);
X	    ury = max2(ury, by);
X	}
X    }
X
X    for (l = compound->lines; l != NULL; l = l->next) {
X	line_bound(l, &sx, &sy, &bx, &by);
X	if (first) {
X	    first = 0;
X	    llx = sx;
X	    lly = sy;
X	    urx = bx;
X	    ury = by;
X	} else {
X	    llx = min2(llx, sx);
X	    lly = min2(lly, sy);
X	    urx = max2(urx, bx);
X	    ury = max2(ury, by);
X	}
X    }
X
X    for (s = compound->splines; s != NULL; s = s->next) {
X	spline_bound(s, &sx, &sy, &bx, &by);
X	if (first) {
X	    first = 0;
X	    llx = sx;
X	    lly = sy;
X	    urx = bx;
X	    ury = by;
X	} else {
X	    llx = min2(llx, sx);
X	    lly = min2(lly, sy);
X	    urx = max2(urx, bx);
X	    ury = max2(ury, by);
X	}
X    }
X
X    for (t = compound->texts; t != NULL; t = t->next) {
X	text_bound(t, &sx, &sy, &bx, &by);
X	if (first) {
X	    first = 0;
X	    llx = sx;
X	    lly = sy;
X	    urx = bx;
X	    ury = by;
X	} else {
X	    llx = min2(llx, sx);
X	    lly = min2(lly, sy);
X	    urx = max2(urx, bx);
X	    ury = max2(ury, by);
X	}
X    }
X
X    /* round the corners to the current positioning grid */
X    floor_coords(llx);
X    floor_coords(lly);
X    ceil_coords(urx);
X    ceil_coords(ury);
X    *xmin = llx;
X    *ymin = lly;
X    *xmax = urx;
X    *ymax = ury;
X}
X
Xellipse_bound(e, xmin, ymin, xmax, ymax)
X    F_ellipse	   *e;
X    int		   *xmin, *ymin, *xmax, *ymax;
X{
X    int		    half_wd;
X
X    half_wd = e->thickness / 2;
X    *xmin = e->center.x - e->radiuses.x - half_wd;
X    *ymin = e->center.y - e->radiuses.y - half_wd;
X    *xmax = e->center.x + e->radiuses.x + half_wd;
X    *ymax = e->center.y + e->radiuses.y + half_wd;
X}
X
Xline_bound(l, xmin, ymin, xmax, ymax)
X    F_line	   *l;
X    int		   *xmin, *ymin, *xmax, *ymax;
X{
X    points_bound(l->points, (l->thickness / 2), xmin, ymin, xmax, ymax);
X}
X
Xspline_bound(s, xmin, ymin, xmax, ymax)
X    F_spline	   *s;
X    int		   *xmin, *ymin, *xmax, *ymax;
X{
X    if (int_spline(s)) {
X	int_spline_bound(s, xmin, ymin, xmax, ymax);
X    } else {
X	normal_spline_bound(s, xmin, ymin, xmax, ymax);
X    }
X}
X
Xstatic void
Xint_spline_bound(s, xmin, ymin, xmax, ymax)
X    F_spline	   *s;
X    int		   *xmin, *ymin, *xmax, *ymax;
X{
X    F_point	   *p1, *p2;
X    F_control	   *cp1, *cp2;
X    float	    x0, y0, x1, y1, x2, y2, x3, y3, sx1, sy1, sx2, sy2;
X    float	    tx, ty, tx1, ty1, tx2, ty2;
X    float	    sx, sy, bx, by;
X    int		    half_wd;
X
X    half_wd = s->thickness / 2;
X    p1 = s->points;
X    sx = bx = p1->x;
X    sy = by = p1->y;
X    cp1 = s->controls;
X    for (p2 = p1->next, cp2 = cp1->next; p2 != NULL;
X	 p1 = p2, cp1 = cp2, p2 = p2->next, cp2 = cp2->next) {
X	x0 = p1->x;
X	y0 = p1->y;
X	x1 = cp1->rx;
X	y1 = cp1->ry;
X	x2 = cp2->lx;
X	y2 = cp2->ly;
X	x3 = p2->x;
X	y3 = p2->y;
X	tx = half(x1, x2);
X	ty = half(y1, y2);
X	sx1 = half(x0, x1);
X	sy1 = half(y0, y1);
X	sx2 = half(sx1, tx);
X	sy2 = half(sy1, ty);
X	tx2 = half(x2, x3);
X	ty2 = half(y2, y3);
X	tx1 = half(tx2, tx);
X	ty1 = half(ty2, ty);
X
X	sx = min2(x0, sx);
X	sy = min2(y0, sy);
X	sx = min2(sx1, sx);
X	sy = min2(sy1, sy);
X	sx = min2(sx2, sx);
X	sy = min2(sy2, sy);
X	sx = min2(tx1, sx);
X	sy = min2(ty1, sy);
X	sx = min2(tx2, sx);
X	sy = min2(ty2, sy);
X	sx = min2(x3, sx);
X	sy = min2(y3, sy);
X
X	bx = max2(x0, bx);
X	by = max2(y0, by);
X	bx = max2(sx1, bx);
X	by = max2(sy1, by);
X	bx = max2(sx2, bx);
X	by = max2(sy2, by);
X	bx = max2(tx1, bx);
X	by = max2(ty1, by);
X	bx = max2(tx2, bx);
X	by = max2(ty2, by);
X	bx = max2(x3, bx);
X	by = max2(y3, by);
X    }
X    *xmin = round(sx) - half_wd;
X    *ymin = round(sy) - half_wd;
X    *xmax = round(bx) + half_wd;
X    *ymax = round(by) + half_wd;
X}
X
Xstatic void
Xnormal_spline_bound(s, xmin, ymin, xmax, ymax)
X    F_spline	   *s;
X    int		   *xmin, *ymin, *xmax, *ymax;
X{
X    F_point	   *p;
X    float	    cx1, cy1, cx2, cy2, cx3, cy3, cx4, cy4;
X    float	    x1, y1, x2, y2, sx, sy, bx, by;
X    float	    px, py, qx, qy;
X    int		    half_wd;
X
X    half_wd = s->thickness / 2;
X    p = s->points;
X    x1 = p->x;
X    y1 = p->y;
X    p = p->next;
X    x2 = p->x;
X    y2 = p->y;
X    cx1 = (x1 + x2) / 2.0;
X    cy1 = (y1 + y2) / 2.0;
X    cx2 = (cx1 + x2) / 2.0;
X    cy2 = (cy1 + y2) / 2.0;
X    if (closed_spline(s)) {
X	x1 = (cx1 + x1) / 2.0;
X	y1 = (cy1 + y1) / 2.0;
X    }
X    sx = min2(x1, cx2);
X    sy = min2(y1, cy2);
X    bx = max2(x1, cx2);
X    by = max2(y1, cy2);
X
X    for (p = p->next; p != NULL; p = p->next) {
X	x1 = x2;
X	y1 = y2;
X	x2 = p->x;
X	y2 = p->y;
X	cx4 = (x1 + x2) / 2.0;
X	cy4 = (y1 + y2) / 2.0;
X	cx3 = (x1 + cx4) / 2.0;
X	cy3 = (y1 + cy4) / 2.0;
X	cx2 = (cx4 + x2) / 2.0;
X	cy2 = (cy4 + y2) / 2.0;
X
X	px = min2(cx2, cx3);
X	py = min2(cy2, cy3);
X	qx = max2(cx2, cx3);
X	qy = max2(cy2, cy3);
X
X	sx = min2(sx, px);
X	sy = min2(sy, py);
X	bx = max2(bx, qx);
X	by = max2(by, qy);
X    }
X    if (closed_spline(s)) {
X	*xmin = round(sx) - half_wd;
X	*ymin = round(sy) - half_wd;
X	*xmax = round(bx) + half_wd;
X	*ymax = round(by) + half_wd;
X    } else {
X	*xmin = round(min2(sx, x2)) - half_wd;
X	*ymin = round(min2(sy, y2)) - half_wd;
X	*xmax = round(max2(bx, x2)) + half_wd;
X	*ymax = round(max2(by, y2)) + half_wd;
X    }
X}
X
Xtext_bound(t, xmin, ymin, xmax, ymax)
X    F_text	   *t;
X    int		   *xmin, *ymin, *xmax, *ymax;
X{
X    int		    length, dx, dy, mx, my;
X
X    /* adjust for text angle */
X    dy = (int) ((double) t->height * cos(t->angle));
X    dx = (int) ((double) t->height * sin(t->angle));
X    length = text_length(t);
X    *xmin = t->base_x;
X    *ymin = t->base_y - t->height;
X    *xmax = t->base_x + length;
X    *ymax = t->base_y;
X
X    if (t->type == T_RIGHT_JUSTIFIED) {
X	*xmin -= length;
X	*xmax -= length;
X    } else if (t->type == T_CENTER_JUSTIFIED) {
X	*xmin -= length / 2;
X	*xmax -= length / 2;
X    }
X    mx = t->base_x - dx;
X    my = t->base_y - dy;
X    *xmin = min2(*xmin, mx);
X    *xmax = max2(*xmax, mx);
X    *ymax = max2(*ymax, my);
X}
X
Xstatic void
Xpoints_bound(points, half_wd, xmin, ymin, xmax, ymax)
X    F_point	   *points;
X    int		    half_wd;
X    int		   *xmin, *ymin, *xmax, *ymax;
X{
X    int		    bx, by, sx, sy;
X    F_point	   *p;
X
X    bx = sx = points->x;
X    by = sy = points->y;
X    for (p = points->next; p != NULL; p = p->next) {
X	sx = min2(sx, p->x);
X	sy = min2(sy, p->y);
X	bx = max2(bx, p->x);
X	by = max2(by, p->y);
X    }
X    *xmin = sx - half_wd;
X    *ymin = sy - half_wd;
X    *xmax = bx + half_wd;
X    *ymax = by + half_wd;
X}
X
Xint
Xoverlapping(xmin1, ymin1, xmax1, ymax1, xmin2, ymin2, xmax2, ymax2)
X    int		    xmin1, ymin1, xmax1, ymax1, xmin2, ymin2, xmax2, ymax2;
X{
X    if (xmin1 < xmin2)
X	if (ymin1 < ymin2)
X	    return (xmax1 >= xmin2 && ymax1 >= ymin2);
X	else
X	    return (xmax1 >= xmin2 && ymin1 <= ymax2);
X    else if (ymin1 < ymin2)
X	return (xmin1 <= xmax2 && ymax1 >= ymin2);
X    else
X	return (xmin1 <= xmax2 && ymin1 <= ymax2);
X}
END_OF_FILE
if test 12276 -ne `wc -c <'u_bound.c'`; then
    echo shar: \"'u_bound.c'\" unpacked with wrong size!
fi
# end of 'u_bound.c'
fi
if test -f 'w_modepanel.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'w_modepanel.c'\"
else
echo shar: Extracting \"'w_modepanel.c'\" \(12708 characters\)
sed "s/^X//" >'w_modepanel.c' <<'END_OF_FILE'
X/*
X * FIG : Facility for Interactive Generation of figures
X * Copyright (c) 1985 by Supoj Sutanthavibul
X *
X * "Permission to use, copy, modify, distribute, and sell this software and its
X * documentation for any purpose is hereby granted without fee, provided that
X * the above copyright notice appear in all copies and that both that
X * copyright notice and this permission notice appear in supporting
X * documentation, and that the name of M.I.T. not be used in advertising or
X * publicity pertaining to distribution of the software without specific,
X * written prior permission.  M.I.T. makes no representations about the
X * suitability of this software for any purpose.  It is provided "as is"
X * without express or implied warranty."
X *
X */
X
X#include "fig.h"
X#include "resources.h"
X#include "mode.h"
X#include "object.h"
X#include "paintop.h"
X#include "w_drawprim.h"
X#include "w_icons.h"
X#include "w_indpanel.h"
X#include "w_util.h"
X#include "w_mousefun.h"
X#include "w_setup.h"
X
Xextern          finish_text_input();
Xextern          erase_objecthighlight();
X
Xextern          circlebyradius_drawing_selected();
Xextern          circlebydiameter_drawing_selected();
Xextern          ellipsebyradius_drawing_selected();
Xextern          ellipsebydiameter_drawing_selected();
Xextern          box_drawing_selected();
Xextern          arcbox_drawing_selected();
Xextern          line_drawing_selected();
Xextern          regpoly_drawing_selected();
Xextern          epsobj_drawing_selected();
Xextern          text_drawing_selected();
Xextern          arc_drawing_selected();
Xextern          spline_drawing_selected();
Xextern          intspline_drawing_selected();
Xextern          align_selected();
Xextern          compound_selected();
Xextern          break_selected();
Xextern          scale_selected();
Xextern          point_adding_selected();
Xextern          delete_point_selected();
Xextern          move_selected();
Xextern          move_point_selected();
Xextern          delete_selected();
Xextern          copy_selected();
Xextern          rotate_cw_selected();
Xextern          rotate_ccw_selected();
Xextern          flip_ud_selected();
Xextern          flip_lr_selected();
Xextern          convert_selected();
Xextern          arrow_head_selected();
Xextern          edit_item_selected();
Xextern          update_selected();
X
X/**************	    local variables and routines   **************/
X
X#define MAX_MODEMSG_LEN 80
Xtypedef struct mode_switch_struct {
X    PIXRECT         icon;
X    int             mode;
X    int             (*setmode_func) ();
X    int             objmask;
X    int             indmask;
X    char            modemsg[MAX_MODEMSG_LEN];
X    TOOL            widget;
X    Pixmap          normalPM, reversePM;
X}               mode_sw_info;
X
X#define		setmode_action(z)    (z->setmode_func)(z)
X
XDeclareStaticArgs(13);
X/* pointer to current mode switch */
Xstatic mode_sw_info *current = NULL;
X
X/* button selection event handler */
Xstatic void     sel_mode_but();
Xstatic void     turn_on();
X
Xstatic mode_sw_info mode_switches[] = {
X    {&cirrad_ic, F_CIRCLE_BY_RAD, circlebyradius_drawing_selected, M_NONE,
X    I_BOX, "CIRCLE drawing: specify RADIUS",},
X    {&cirdia_ic, F_CIRCLE_BY_DIA, circlebydiameter_drawing_selected, M_NONE,
X    I_BOX, "CIRCLE drawing: specify DIAMETER",},
X    {&ellrad_ic, F_ELLIPSE_BY_RAD, ellipsebyradius_drawing_selected, M_NONE,
X    I_BOX, "ELLIPSE drawing: specify RADIUSES",},
X    {&elldia_ic, F_ELLIPSE_BY_DIA, ellipsebydiameter_drawing_selected, M_NONE,
X    I_BOX, "ELLIPSE drawing: specify DIAMETERS",},
X    {&c_spl_ic, F_CLOSED_SPLINE, spline_drawing_selected, M_NONE,
X    I_CLOSED, "CLOSED SPLINE drawing: specify control points",},
X    {&spl_ic, F_SPLINE, spline_drawing_selected, M_NONE,
X    I_OPEN, "SPLINE drawing: specify control points",},
X    {&c_intspl_ic, F_CLOSED_INTSPLINE, intspline_drawing_selected, M_NONE,
X    I_CLOSED, "CLOSED INTERPOLATED SPLINE drawing",},
X    {&intspl_ic, F_INTSPLINE, intspline_drawing_selected, M_NONE,
X    I_OPEN, "INTERPOLATED SPLINE drawing",},
X    {&polygon_ic, F_POLYGON, line_drawing_selected, M_NONE,
X    I_CLOSED, "POLYGON drawing",},
X    {&line_ic, F_POLYLINE, line_drawing_selected, M_NONE,
X    I_OPEN, "POLYLINE drawing",},
X    {&box_ic, F_BOX, box_drawing_selected, M_NONE,
X    I_BOX, "Rectangular BOX drawing",},
X    {&arc_box_ic, F_ARC_BOX, arcbox_drawing_selected, M_NONE,
X    I_ARCBOX, "Rectangular BOX drawing with ROUNDED CORNERS",},
X    {&regpoly_ic, F_REGPOLY, regpoly_drawing_selected, M_NONE,
X    I_REGPOLY, "Regular Polygon",},
X    {&arc_ic, F_CIRCULAR_ARC, arc_drawing_selected, M_NONE,
X    I_ARC, "ARC drawing: specify three points on the arc",},
X    {&epsobj_ic, F_EPSOBJ, epsobj_drawing_selected, M_NONE,
X    I_MIN2, "Encapsulated Postscript Object",},
X    {&text_ic, F_TEXT, text_drawing_selected, M_TEXT_NORMAL,
X    I_TEXT, "TEXT input (from keyboard)",},
X    {&glue_ic, F_GLUE, compound_selected, M_ALL,
X    I_MIN2, "GLUE objects into COMPOUND object",},
X    {&break_ic, F_BREAK, break_selected, M_COMPOUND,
X    I_MIN1, "BREAK COMPOUND object",},
X    {&scale_ic, F_SCALE, scale_selected, M_NO_TEXT,
X    I_MIN2, "SCALE objects",},
X    {&align_ic, F_ALIGN, align_selected, M_COMPOUND,
X    I_ALIGN, "ALIGN objects within a COMPOUND",},
X    {&movept_ic, F_MOVE_POINT, move_point_selected, M_NO_TEXT,
X    I_MIN2, "MOVE POINTs",},
X    {&move_ic, F_MOVE, move_selected, M_ALL,
X    I_MIN3, "MOVE objects",},
X    {&addpt_ic, F_ADD_POINT, point_adding_selected, M_VARPTS_OBJECT,
X    I_MIN1, "ADD POINTs (to lines, polygons and splines)",},
X    {&copy_ic, F_COPY, copy_selected, M_ALL,
X    I_MIN3, "COPY objects",},
X    {&deletept_ic, F_DELETE_POINT, delete_point_selected, M_VARPTS_OBJECT,
X    I_MIN1, "DELETE POINTs (from lines, polygons and splines)",},
X    {&delete_ic, F_DELETE, delete_selected, M_ALL,
X    I_MIN1, "DELETE objects",},
X    {&update_ic, F_UPDATE, update_selected, M_ALL,
X    I_OBJECT, "UPDATE object <-> current settings",},
X    {&change_ic, F_EDIT, edit_item_selected, M_ALL,
X    I_MIN1, "CHANGE OBJECT via EDIT pane",},
X    {&flip_x_ic, F_FLIP, flip_ud_selected, M_NO_TEXT,
X    I_MIN1, "FLIP objects up or down",},
X    {&flip_y_ic, F_FLIP, flip_lr_selected, M_NO_TEXT,
X    I_MIN1, "FLIP objects left or right",},
X    {&rotCW_ic, F_ROTATE, rotate_cw_selected, M_ALL,
X    I_ROTATE, "ROTATE objects clockwise",},
X    {&rotCCW_ic, F_ROTATE, rotate_ccw_selected, M_ALL,
X    I_ROTATE, "ROTATE objects counter-clockwise",},
X    {&convert_ic, F_CONVERT, convert_selected,
X	(M_POLYLINE_LINE | M_POLYLINE_POLYGON | M_SPLINE_INTERP), I_MIN1,
X    "CONVERT lines (polygons) into splines (closed-splines) or vice versa",},
X    {&autoarrow_ic, F_AUTOARROW, arrow_head_selected, M_OPEN_OBJECT,
X    I_MIN1 | I_LINEWIDTH, "ADD/DELETE ARROWs",},
X};
X
X#define		NUM_MODE_SW	(sizeof(mode_switches) / sizeof(mode_sw_info))
X
Xstatic Arg      button_args[] =
X{
X     /* 0 */ {XtNlabel, (XtArgVal) "    "},
X     /* 1 */ {XtNwidth, (XtArgVal) 0},
X     /* 2 */ {XtNheight, (XtArgVal) 0},
X     /* 3 */ {XtNresizable, (XtArgVal) False},
X     /* 4 */ {XtNborderWidth, (XtArgVal) 0},
X     /* 5 */ {XtNresize, (XtArgVal) False},	/* keeps buttons from being
X						 * resized when there are not
X						 * a multiple of three of
X						 * them */
X     /* 6 */ {XtNbackgroundPixmap, (XtArgVal) NULL},
X};
X
Xstatic XtActionsRec mode_actions[] =
X{
X    {"EnterModeSw", (XtActionProc) draw_mousefun_mode},
X    {"LeaveModeSw", (XtActionProc) clear_mousefun},
X};
X
Xstatic String   mode_translations =
X"<EnterWindow>:EnterModeSw()highlight()\n\
X    <LeaveWindow>:LeaveModeSw()unhighlight()\n";
X
Xint
Xinit_mode_panel(tool)
X    TOOL            tool;
X{
X    register int    i;
X    register mode_sw_info *sw;
X
X    FirstArg(XtNwidth, MODEPANEL_WD);
X    NextArg(XtNhSpace, INTERNAL_BW);
X    NextArg(XtNvSpace, INTERNAL_BW);
X    NextArg(XtNtop, XtChainTop);
X    NextArg(XtNbottom, XtChainTop);
X    NextArg(XtNfromVert, msg_panel);
X    NextArg(XtNvertDistance, -INTERNAL_BW);
X    NextArg(XtNleft, XtChainLeft);
X    NextArg(XtNright, XtChainLeft);
X    NextArg(XtNresizable, False);
X    NextArg(XtNborderWidth, 0);
X    NextArg(XtNmappedWhenManaged, False);
X
X    mode_panel = XtCreateWidget("mode_panel", boxWidgetClass, tool,
X				Args, ArgCount);
X
X    XtAppAddActions(tool_app, mode_actions, XtNumber(mode_actions));
X
X    for (i = 0; i < NUM_MODE_SW; ++i) {
X	sw = &mode_switches[i];
X	if (sw->mode == FIRST_DRAW_MODE) {
X	    FirstArg(XtNwidth, MODE_SW_WD * SW_PER_ROW +
X		     INTERNAL_BW * (SW_PER_ROW - 1));
X	    NextArg(XtNborderWidth, 0);
X	    NextArg(XtNresize, False);
X	    NextArg(XtNheight, (MODEPANEL_SPACE + 1) / 2);
X	    NextArg(XtNlabel, "Drawing\n modes");
X	    d_label = XtCreateManagedWidget("label", labelWidgetClass,
X					    mode_panel, Args, ArgCount);
X	} else if (sw->mode == FIRST_EDIT_MODE) {
X	    /* assume Args still set up from d_label */
X	    ArgCount -= 2;
X	    NextArg(XtNheight, (MODEPANEL_SPACE) / 2);
X	    NextArg(XtNlabel, "Editing\n modes");
X	    e_label = XtCreateManagedWidget("label", labelWidgetClass,
X					    mode_panel, Args, ArgCount);
X	}
X	button_args[1].value = sw->icon->width;
X	button_args[2].value = sw->icon->height;
X	sw->widget = XtCreateManagedWidget("button", commandWidgetClass,
X			    mode_panel, button_args, XtNumber(button_args));
X
X	/* left button changes mode */
X	XtAddEventHandler(sw->widget, ButtonReleaseMask, (Boolean) 0,
X			  sel_mode_but, (caddr_t) sw);
X	XtOverrideTranslations(sw->widget,
X			       XtParseTranslationTable(mode_translations));
X    }
X    return;
X}
X
X/*
X * after panel widget is realized (in main) put some bitmaps etc. in it
X */
X
Xsetup_mode_panel()
X{
X    register int    i;
X    register mode_sw_info *msw;
X    register Display *d = tool_d;
X    register Screen *s = tool_s;
X
X    blank_gc = XCreateGC(tool_d, XtWindow(mode_panel), (unsigned long) 0, NULL);
X    button_gc = XCreateGC(tool_d, XtWindow(mode_panel), (unsigned long) 0, NULL);
X    FirstArg(XtNforeground, &but_fg);
X    NextArg(XtNbackground, &but_bg);
X    GetValues(mode_switches[0].widget);
X
X    XSetBackground(tool_d, blank_gc, but_bg);
X    XSetForeground(tool_d, blank_gc, but_bg);
X
X    FirstArg(XtNfont, button_font);
X    SetValues(d_label);
X    SetValues(e_label);
X
X    if (appres.INVERSE) {
X	FirstArg(XtNbackground, WhitePixelOfScreen(tool_s));
X    } else {
X	FirstArg(XtNbackground, BlackPixelOfScreen(tool_s));
X    }
X    SetValues(mode_panel);
X
X    for (i = 0; i < NUM_MODE_SW; ++i) {
X	msw = &mode_switches[i];
X	/* create normal bitmaps */
X	msw->normalPM = XCreatePixmapFromBitmapData(d, XtWindow(msw->widget),
X		       msw->icon->data, msw->icon->width, msw->icon->height,
X				   but_fg, but_bg, DefaultDepthOfScreen(s));
X
X	FirstArg(XtNbackgroundPixmap, msw->normalPM);
X	SetValues(msw->widget);
X
X	/* create reverse bitmaps */
X	msw->reversePM = XCreatePixmapFromBitmapData(d, XtWindow(msw->widget),
X		       msw->icon->data, msw->icon->width, msw->icon->height,
X				   but_bg, but_fg, DefaultDepthOfScreen(s));
X    }
X
X    XDefineCursor(d, XtWindow(mode_panel), arrow_cursor);
X    FirstArg(XtNmappedWhenManaged, True);
X    SetValues(mode_panel);
X}
X
X/* come here when a button is pressed in the mode panel */
X
Xstatic void
Xsel_mode_but(widget, msw, event)
X    Widget          widget;
X    mode_sw_info   *msw;
X    XButtonEvent   *event;
X{
X    int             new_objmask;
X
X    if (action_on) {
X	if (cur_mode == F_TEXT)
X	    finish_text_input();/* finish up any text input */
X	else {
X	    put_msg("Please finish (or cancel) the current operation before changing modes");
X	    return;
X	}
X    } else if (highlighting)
X	erase_objecthighlight();
X    if (event->button == Button1) {	/* left button */
X	turn_off_current();
X	turn_on(msw);
X	update_indpanel(msw->indmask);
X	put_msg(msw->modemsg);
X	if ((cur_mode == F_GLUE || cur_mode == F_BREAK) &&
X	    msw->mode != F_GLUE &&
X	    msw->mode != F_BREAK)
X	    /*
X	     * reset tagged items when changing modes, perhaps this is not
X	     * really necessary
X	     */
X	    set_tags(&objects, 0);
X	cur_mode = msw->mode;
X	anypointposn = !(msw->indmask & I_POINTPOSN);
X	new_objmask = msw->objmask;
X	if (cur_mode == F_ROTATE && cur_rotnangle != 90)
X	    new_objmask = M_ROTATE_ANGLE;
X	update_markers(new_objmask);
X	current = msw;
X	setmode_action(msw);
X    }
X}
X
Xvoid
Xforce_positioning()
X{
X    update_indpanel(current->indmask | I_POINTPOSN);
X    anypointposn = 0;
X}
X
Xvoid
Xforce_nopositioning()
X{
X    update_indpanel(current->indmask & ~I_POINTPOSN);
X    anypointposn = 1;
X}
X
Xstatic void
Xturn_on(msw)
X    mode_sw_info   *msw;
X{
X    FirstArg(XtNbackgroundPixmap, msw->reversePM);
X    SetValues(msw->widget);
X}
X
Xturn_on_current()
X{
X    if (current)
X	turn_on(current);
X}
X
Xturn_off_current()
X{
X    if (current) {
X	FirstArg(XtNbackgroundPixmap, current->normalPM);
X	SetValues(current->widget);
X    }
X}
END_OF_FILE
if test 12708 -ne `wc -c <'w_modepanel.c'`; then
    echo shar: \"'w_modepanel.c'\" unpacked with wrong size!
fi
# end of 'w_modepanel.c'
fi
echo shar: End of archive 13 \(of 25\).
cp /dev/null ark13isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 25 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
-- 
Molecular Simulations, Inc.             mail: dcmartin@msi.com
796 N. Pastoria Avenue                  uucp: uunet!dcmartin
Sunnyvale, California 94086             at&t: 408/522-9236
