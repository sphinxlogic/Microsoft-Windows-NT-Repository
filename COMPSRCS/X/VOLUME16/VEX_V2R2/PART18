Path: uunet!zaphod.mps.ohio-state.edu!mips!msi!dcmartin
From: dcc@Athena.MIT.EDU (David Carver)
Newsgroups: comp.sources.x
Subject: v16i069: Video Extension for X (v2r2), Part18/29
Message-ID: <1992Feb6.145759.727@msi.com>
Date: 6 Feb 92 14:57:59 GMT
References: <csx-16i052-vex.v2r2@uunet.UU.NET>
Sender: dcmartin@msi.com (David C. Martin - Moderator)
Organization: Molecular Simulations, Inc.
Lines: 1989
Approved: dcmartin@msi.com
Originator: dcmartin@fascet

Submitted-by: dcc@Athena.MIT.EDU (David Carver)
Posting-number: Volume 16, Issue 69
Archive-name: vex.v2r2/part18

# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# If this archive is complete, you will see the following message at the end:
#		"End of archive 18 (of 29)."
# Contents:  Makefile extensions/xv/Makefile
#   extensions/xv/test/Makefile extensions/xv/test/xvt7.c
#   server/ddx/cfb32/cfbblt.c
# Wrapped by dcmartin@fascet on Thu Feb  6 06:52:48 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Makefile'\"
else
echo shar: Extracting \"'Makefile'\" \(130 characters\)
sed "s/^X//" >'Makefile' <<'END_OF_FILE'
X
Xall::
X	@ cat install/README
X
Xinstall::
X	@ install/install.sh
X
Xuninstall::
X	@ install/uninstall.sh
X
Xcleanup::
X	@ install/clean.sh
END_OF_FILE
if test 130 -ne `wc -c <'Makefile'`; then
    echo shar: \"'Makefile'\" unpacked with wrong size!
fi
# end of 'Makefile'
fi
if test -f 'extensions/xv/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'extensions/xv/Makefile'\"
else
echo shar: Extracting \"'extensions/xv/Makefile'\" \(12744 characters\)
sed "s/^X//" >'extensions/xv/Makefile' <<'END_OF_FILE'
X# Makefile generated by imake - do not edit!
X# $XConsortium: imake.c,v 1.57 91/03/23 15:15:11 rws Exp $
X
X# -------------------------------------------------------------------------
X# Makefile generated from "Imake.tmpl" and <Imakefile>
X# $XConsortium: Imake.tmpl,v 1.108 91/03/25 10:50:20 rws Exp $
X#
X# Platform-specific parameters may be set in the appropriate .cf
X# configuration files.  Site-wide parameters may be set in the file
X# site.def.  Full rebuilds are recommended if any parameters are changed.
X#
X# If your C preprocessor does not define any unique symbols, you will need
X# to set BOOTSTRAPCFLAGS when rebuilding imake (usually when doing
X# "make Makefile", "make Makefiles", or "make World").
X#
X# If you absolutely cannot get imake to work, you will need to set the
X# variables at the top of each Makefile as well as the dependencies at the
X# bottom (makedepend will do this automatically).
X#
X
X# -------------------------------------------------------------------------
X# platform-specific configuration parameters - edit ultrix.cf to change
X
X# platform:  $XConsortium: ultrix.cf,v 1.30 91/03/25 22:16:21 rws Exp $
X# operating system:             Ultrix-32 4.1
X
X# -------------------------------------------------------------------------
X# site-specific configuration parameters - edit site.def to change
X
X# site:  $XConsortium: site.def,v 1.26 91/03/23 14:11:08 rws Exp $
X
X            SHELL = 	/bin/sh
X
X              TOP = ../../.
X      CURRENT_DIR = ./extensions/xv
X
X               AR = ar clq
X  BOOTSTRAPCFLAGS =
X               CC = cc
X
X         COMPRESS = compress
X              CPP = /lib/cpp $(STD_CPP_DEFINES)
X    PREPROCESSCMD = cc -E $(STD_CPP_DEFINES)
X          INSTALL = install
X               LD = ld
X             LINT = lint
X      LINTLIBFLAG = -o
X         LINTOPTS = -ax
X               LN = ln -s
X             MAKE = make
X               MV = mv
X               CP = cp
X
X           RANLIB = ranlib
X  RANLIBINSTFLAGS =
X
X               RM = rm -f
X     STD_INCLUDES =
X  STD_CPP_DEFINES =
X      STD_DEFINES =
X EXTRA_LOAD_FLAGS =
X  EXTRA_LIBRARIES =
X             TAGS = ctags
X
X    PROTO_DEFINES = -DFUNCPROTO
X
X     INSTPGMFLAGS =
X
X     INSTBINFLAGS = -m 0755
X     INSTUIDFLAGS = -m 4755
X     INSTLIBFLAGS = -m 0644
X     INSTINCFLAGS = -m 0444
X     INSTMANFLAGS = -m 0444
X     INSTDATFLAGS = -m 0444
X    INSTKMEMFLAGS = -m 4755
X
X     TOP_INCLUDES = -I$(TOP)
X
X      CDEBUGFLAGS = -O
X        CCOPTIONS =
X
X      ALLINCLUDES = $(STD_INCLUDES) $(INCLUDES) $(EXTRA_INCLUDES) $(TOP_INCLUDES)
X       ALLDEFINES = $(ALLINCLUDES) $(STD_DEFINES) $(PROTO_DEFINES) $(DEFINES)
X           CFLAGS = $(CDEBUGFLAGS) $(CCOPTIONS) $(ALLDEFINES)
X        LINTFLAGS = $(LINTOPTS) -DLINT $(ALLDEFINES)
X
X           LDLIBS = $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)
X
X        LDOPTIONS = $(CDEBUGFLAGS) $(CCOPTIONS) $(LOCAL_LDFLAGS)
X
X   LDCOMBINEFLAGS = -X -r
X      DEPENDFLAGS =
X
X        MACROFILE = ultrix.cf
X           RM_CMD = $(RM) *.CKP *.ln *.BAK *.bak *.o core errs ,* *~ *.a .emacs_* tags TAGS make.log MakeOut
X
X    IMAKE_DEFINES =
X
X         IRULESRC = $(CONFIGSRC)
X        IMAKE_CMD = $(NEWTOP)$(IMAKE) -I$(NEWTOP)$(IRULESRC) $(IMAKE_DEFINES)
X
X     ICONFIGFILES = $(IRULESRC)/Imake.tmpl $(IRULESRC)/Imake.rules \
X			$(IRULESRC)/Project.tmpl $(IRULESRC)/site.def \
X			$(IRULESRC)/$(MACROFILE) $(EXTRA_ICONFIGFILES)
X
X# -------------------------------------------------------------------------
X# X Window System Build Parameters
X# $XConsortium: Project.tmpl,v 1.104 91/03/25 10:48:17 rws Exp $
X
X# -------------------------------------------------------------------------
X# X Window System make variables; this need to be coordinated with rules
X# $XConsortium: Project.tmpl,v 1.104 91/03/25 10:48:17 rws Exp $
X
X          PATHSEP = /
X        USRLIBDIR = /usr/lib
X           BINDIR = /usr/bin/X11
X          INCROOT = /usr/include
X     BUILDINCROOT = $(TOP)
X      BUILDINCDIR = $(BUILDINCROOT)/X11
X      BUILDINCTOP = ..
X           INCDIR = $(INCROOT)/X11
X           ADMDIR = /usr/adm
X           LIBDIR = /mit/x11/lib
X        CONFIGDIR = $(LIBDIR)/config
X       LINTLIBDIR = $(USRLIBDIR)/lint
X
X          FONTDIR = $(LIBDIR)/fonts
X         XINITDIR = $(LIBDIR)/xinit
X           XDMDIR = $(LIBDIR)/xdm
X           TWMDIR = $(LIBDIR)/twm
X          MANPATH = /usr/man
X    MANSOURCEPATH = $(MANPATH)/man
X           MANDIR =  $(MANSOURCEPATH)n
X        LIBMANDIR =  $(MANSOURCEPATH)3
X           NLSDIR = $(LIBDIR)/nls
X      XAPPLOADDIR = $(LIBDIR)/app-defaults
X       FONTCFLAGS = -t
X
X     INSTAPPFLAGS = $(INSTDATFLAGS)
X
X            IMAKE = $(IMAKESRC)/imake
X           DEPEND = $(DEPENDSRC)/makedepend
X              RGB = $(RGBSRC)/rgb
X
X            FONTC = $(BDFTOPCFSRC)/bdftopcf
X
X        MKFONTDIR = $(MKFONTDIRSRC)/mkfontdir
X        MKDIRHIER = 	/bin/sh $(SCRIPTSRC)/mkdirhier.sh
X
X        CONFIGSRC = $(TOP)/config
X        CLIENTSRC = $(TOP)/clients
X          DEMOSRC = $(TOP)/demos
X           LIBSRC = $(TOP)/lib
X          FONTSRC = $(TOP)/fonts
X       INCLUDESRC = $(TOP)/X11
X        SERVERSRC = $(TOP)/server
X          UTILSRC = $(TOP)/util
X        SCRIPTSRC = $(UTILSRC)/scripts
X       EXAMPLESRC = $(TOP)/examples
X       CONTRIBSRC = $(TOP)/../contrib
X           DOCSRC = $(TOP)/doc
X           RGBSRC = $(TOP)/rgb
X        DEPENDSRC = $(UTILSRC)/makedepend
X         IMAKESRC = $(CONFIGSRC)
X         XAUTHSRC = $(LIBSRC)/Xau
X          XLIBSRC = $(LIBSRC)/X
X           XMUSRC = $(LIBSRC)/Xmu
X       TOOLKITSRC = $(LIBSRC)/Xt
X       AWIDGETSRC = $(LIBSRC)/Xaw
X       OLDXLIBSRC = $(LIBSRC)/oldX
X      XDMCPLIBSRC = $(LIBSRC)/Xdmcp
X      BDFTOSNFSRC = $(FONTSRC)/bdftosnf
X     MKFONTDIRSRC = $(FONTSRC)/mkfontdir
X      BDFTOSNFSRC = $(FONTSRC)/tools/bdftosnf
X      BDFTOPCFSRC = $(FONTSRC)/tools/bdftopcf
X     MKFONTDIRSRC = $(FONTSRC)/tools/mkfontdir
X    FONTSERVERSRC = $(FONTSRC)/tools/fontserver
X     EXTENSIONSRC = $(TOP)/extensions
X         XILIBSRC = $(EXTENSIONSRC)/lib/xinput
X      PHIGSLIBSRC = $(EXTENSIONSRC)/lib/PEX
X
X  DEPEXTENSIONLIB =  $(EXTENSIONSRC)/lib/libXext.a
X     EXTENSIONLIB = 			   $(DEPEXTENSIONLIB)
X
X          DEPXLIB = $(DEPEXTENSIONLIB)  $(XLIBSRC)/libX11.a
X             XLIB = $(EXTENSIONLIB) 			  $(XLIBSRC)/libX11.a
X
X      DEPXAUTHLIB =  $(XAUTHSRC)/libXau.a
X         XAUTHLIB = 			  $(DEPXAUTHLIB)
X      DEPXDMCPLIB =  $(XDMCPLIBSRC)/libXdmcp.a
X         XDMCPLIB = 			  $(DEPXDMCPLIB)
X
X        DEPXMULIB =  $(XMUSRC)/libXmu.a
X           XMULIB = 			  $(DEPXMULIB)
X
X       DEPOLDXLIB =  $(OLDXLIBSRC)/liboldX.a
X          OLDXLIB = 			  $(DEPOLDXLIB)
X
X      DEPXTOOLLIB =  $(TOOLKITSRC)/libXt.a
X         XTOOLLIB = 			  $(DEPXTOOLLIB)
X
X        DEPXAWLIB =  $(AWIDGETSRC)/libXaw.a
X           XAWLIB = 			  $(DEPXAWLIB)
X
X        DEPXILIB =  $(XILIBSRC)/libXi.a
X           XILIB = 			  $(DEPXILIB)
X
X        DEPPHIGSLIB =  $(PHIGSLIBSRC)/libphigs.a
X           PHIGSLIB = 			  $(DEPPHIGSLIB)
X
X LINTEXTENSIONLIB =  $(EXTENSIONSRC)/lib/llib-lXext.ln
X         LINTXLIB =  $(XLIBSRC)/llib-lX11.ln
X          LINTXMU =  $(XMUSRC)/llib-lXmu.ln
X        LINTXTOOL =  $(TOOLKITSRC)/llib-lXt.ln
X          LINTXAW =  $(AWIDGETSRC)/llib-lXaw.ln
X        LINTPHIGS =  $(PHIGSLIBSRC)/llib-lphigs.ln
X
X          DEPLIBS = $(LOCAL_LIBRARIES)
X
X         DEPLIBS1 = $(DEPLIBS)
X         DEPLIBS2 = $(DEPLIBS)
X         DEPLIBS3 = $(DEPLIBS)
X
X# -------------------------------------------------------------------------
X# Imake rules for building libraries, programs, scripts, and data files
X# rules:  $XConsortium: Imake.rules,v 1.102 91/03/26 14:28:35 rws Exp $
X
X# -------------------------------------------------------------------------
X# start of Imakefile
X
X  IMAKE_DEFINES = -DSHAPE -DMITSHM -DXINPUT -DXV -DSYNC
X
X  SERVERSUBDIRS = server
X
X        SUBDIRS = include lib test $(SERVERSUBDIRS)
X
Xall::
X	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
X	for i in $(SUBDIRS) ;\
X	do \
X		(cd $$i ; echo "making" all "in $(CURRENT_DIR)/$$i..."; \
X			$(MAKE) $(MFLAGS)  all); \
X	done
X
Xdepend::
X	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
X	for i in $(SUBDIRS) ;\
X	do \
X		(cd $$i ; echo "depending" "in $(CURRENT_DIR)/$$i..."; \
X			$(MAKE) $(MFLAGS)   depend); \
X	done
X
Xlintlib::
X	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
X	for i in lib ;\
X	do \
X		(cd $$i ; echo "linting" for lintlib and lintlib "in $(CURRENT_DIR)/$$i..."; \
X			$(MAKE) $(MFLAGS) DESTDIR='$(DESTDIR)' LINTOPTS='$(LINTOPTS)' lintlib); \
X	done
X
Xinstall.ln::
X	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
X	for i in lib ;\
X	do \
X		(cd $$i ; echo "linting" for install.ln and install.ln "in $(CURRENT_DIR)/$$i..."; \
X			$(MAKE) $(MFLAGS) DESTDIR='$(DESTDIR)' LINTOPTS='$(LINTOPTS)' install.ln); \
X	done
X
X# -------------------------------------------------------------------------
X# common rules for all Makefiles - do not edit
X
Xemptyrule::
X
Xclean::
X	$(RM_CMD) "#"*
X
XMakefile:: $(IMAKE)
X
X$(IMAKE):
X	@(cd $(IMAKESRC); if [ -f Makefile ]; then \
X	echo "checking $@ in $(IMAKESRC) first..."; $(MAKE) all; else \
X	echo "bootstrapping $@ from Makefile.ini in $(IMAKESRC) first..."; \
X	$(MAKE) -f Makefile.ini BOOTSTRAPCFLAGS=$(BOOTSTRAPCFLAGS); fi; \
X	echo "okay, continuing in $(CURRENT_DIR)")
X
XMakefile::
X	-@if [ -f Makefile ]; then set -x; \
X		$(RM) Makefile.bak; $(MV) Makefile Makefile.bak; \
X	else exit 0; fi
X	$(IMAKE_CMD) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT_DIR)
X
Xtags::
X	$(TAGS) -w *.[ch]
X	$(TAGS) -xw *.[ch] > TAGS
X
Xsaber:
X	# load $(ALLDEFINES) $(SRCS)
X
Xosaber:
X	# load $(ALLDEFINES) $(OBJS)
X
X# -------------------------------------------------------------------------
X# rules for building in SUBDIRS - do not edit
X
Xinstall::
X	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
X	for i in $(SUBDIRS) ;\
X	do \
X		(cd $$i ; echo "installing" "in $(CURRENT_DIR)/$$i..."; \
X			$(MAKE) $(MFLAGS) DESTDIR='$(DESTDIR)' install); \
X	done
X
Xinstall.man::
X	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
X	for i in $(SUBDIRS) ;\
X	do \
X		(cd $$i ; echo "installing man pages" "in $(CURRENT_DIR)/$$i..."; \
X			$(MAKE) $(MFLAGS) DESTDIR='$(DESTDIR)' install.man); \
X	done
X
Xclean::
X	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
X	for i in $(SUBDIRS) ;\
X	do \
X		(cd $$i ; echo "cleaning" "in $(CURRENT_DIR)/$$i..."; \
X			$(MAKE) $(MFLAGS) RM_CMD='$(RM_CMD)' clean); \
X	done
X
Xtags::
X	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
X	for i in $(SUBDIRS) ;\
X	do \
X		(cd $$i ; echo "tagging" "in $(CURRENT_DIR)/$$i..."; \
X			$(MAKE) $(MFLAGS) TAGS='$(TAGS)' tags); \
X	done
X
XMakefiles::
X	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
X	for i in $(SUBDIRS) ;\
X	do \
X		echo "making Makefiles in $(CURRENT_DIR)/$$i..."; \
X		case "$$i" in \
X		./?*/?*/?*/?*) newtop=../../../../ sub=subsubsubsub;; \
X		./?*/?*/?*) newtop=../../../ sub=subsubsub;; \
X		./?*/?*)    newtop=../../ sub=subsub;; \
X		./?*)       newtop=../ sub=sub;; \
X		*/?*/?*/?*)    newtop=../../../../ sub=subsubsubsub;; \
X		*/?*/?*)    newtop=../../../ sub=subsubsub;; \
X		*/?*)       newtop=../../ sub=subsub;; \
X		*)	    newtop=../ sub=sub;; \
X		esac; \
X		case "$(TOP)" in \
X		/?*) newtop=  upprefix=  ;; \
X		*) upprefix=../ ;; \
X		esac; \
X		$(MAKE) $${sub}dirMakefiles UPPREFIX=$$upprefix NEWTOP=$$newtop \
X		MAKEFILE_SUBDIR=$$i NEW_CURRENT_DIR=$(CURRENT_DIR)/$$i;\
X	done
X
XsubdirMakefiles:
X	$(RM) $(MAKEFILE_SUBDIR)/Makefile.bak
X	-@if [ -f $(MAKEFILE_SUBDIR)/Makefile ]; then set -x; \
X	$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak; \
X	else exit 0; fi
X	cd $(MAKEFILE_SUBDIR); $(IMAKE_CMD) -DTOPDIR=$(UPPREFIX)$(TOP) -DCURDIR=$(NEW_CURRENT_DIR); \
X	$(MAKE) $(MFLAGS) Makefiles
X
XsubsubdirMakefiles:
X	$(RM) $(MAKEFILE_SUBDIR)/Makefile.bak
X	-@if [ -f $(MAKEFILE_SUBDIR)/Makefile ]; then set -x; \
X	$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak; \
X	else exit 0; fi
X	cd $(MAKEFILE_SUBDIR); $(IMAKE_CMD) -DTOPDIR=$(UPPREFIX)$(UPPREFIX)$(TOP) -DCURDIR=$(NEW_CURRENT_DIR); \
X	$(MAKE) $(MFLAGS) Makefiles
X
XsubsubsubdirMakefiles:
X	$(RM) $(MAKEFILE_SUBDIR)/Makefile.bak
X	-@if [ -f $(MAKEFILE_SUBDIR)/Makefile ]; then set -x; \
X	$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak; \
X	else exit 0; fi
X	cd $(MAKEFILE_SUBDIR); $(IMAKE_CMD) -DTOPDIR=$(UPPREFIX)$(UPPREFIX)$(UPPREFIX)$(TOP) -DCURDIR=$(NEW_CURRENT_DIR); \
X	$(MAKE) $(MFLAGS) Makefiles
X
XsubsubsubsubdirMakefiles:
X	$(RM) $(MAKEFILE_SUBDIR)/Makefile.bak
X	-@if [ -f $(MAKEFILE_SUBDIR)/Makefile ]; then set -x; \
X	$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak; \
X	else exit 0; fi
X	cd $(MAKEFILE_SUBDIR); $(IMAKE_CMD) -DTOPDIR=$(UPPREFIX)$(UPPREFIX)$(UPPREFIX)$(UPPREFIX)$(TOP) -DCURDIR=$(NEW_CURRENT_DIR); \
X	$(MAKE) $(MFLAGS) Makefiles
X
Xincludes::
X	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
X	for i in $(SUBDIRS) ;\
X	do \
X		(cd $$i ; echo including "in $(CURRENT_DIR)/$$i..."; \
X			$(MAKE) $(MFLAGS)   includes); \
X	done
X
X# -------------------------------------------------------------------------
X# dependencies generated by makedepend
X
END_OF_FILE
if test 12744 -ne `wc -c <'extensions/xv/Makefile'`; then
    echo shar: \"'extensions/xv/Makefile'\" unpacked with wrong size!
fi
# end of 'extensions/xv/Makefile'
fi
if test -f 'extensions/xv/test/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'extensions/xv/test/Makefile'\"
else
echo shar: Extracting \"'extensions/xv/test/Makefile'\" \(12279 characters\)
sed "s/^X//" >'extensions/xv/test/Makefile' <<'END_OF_FILE'
X# Makefile generated by imake - do not edit!
X# $XConsortium: imake.c,v 1.51 89/12/12 12:37:30 jim Exp $
X
X###########################################################################
X# Makefile generated from "Imake.tmpl" and <Imakefile>
X# $XConsortium: Imake.tmpl,v 1.77 89/12/18 17:01:37 jim Exp $
X#
X# Platform-specific parameters may be set in the appropriate .cf
X# configuration files.  Site-wide parameters may be set in the file
X# site.def.  Full rebuilds are recommended if any parameters are changed.
X#
X# If your C preprocessor doesn't define any unique symbols, you'll need
X# to set BOOTSTRAPCFLAGS when rebuilding imake (usually when doing
X# "make Makefile", "make Makefiles", or "make World").
X#
X# If you absolutely can't get imake to work, you'll need to set the
X# variables at the top of each Makefile as well as the dependencies at the
X# bottom (makedepend will do this automatically).
X#
X
X###########################################################################
X# platform-specific configuration parameters - edit ultrix.cf to change
X
X# platform:  $XConsortium: ultrix.cf,v 1.20 89/12/22 15:56:14 rws Exp $
X# operating system:             Ultrix-32 4.0
X
X###########################################################################
X# site-specific configuration parameters - edit site.def to change
X
X# site:  $XConsortium: site.def,v 1.21 89/12/06 11:46:50 jim Exp $
X
XFONTC=	$(FONTSRC)/tools/bdftopcf/bdftopcf
X
X            SHELL = 	/bin/sh
X
X              TOP = ../../../.
X      CURRENT_DIR = ./extensions/xv/test
X
X               AR = ar cq
X  BOOTSTRAPCFLAGS =
X               CC = cc
X
X         COMPRESS = compress
X              CPP = /lib/cpp $(STD_CPP_DEFINES)
X    PREPROCESSCMD = cc -E $(STD_CPP_DEFINES)
X          INSTALL = install
X               LD = ld
X             LINT = lint
X      LINTLIBFLAG = -C
X         LINTOPTS = -axz
X               LN = ln -s
X             MAKE = make
X               MV = mv
X               CP = cp
X           RANLIB = ranlib
X  RANLIBINSTFLAGS =
X               RM = rm -f
X     STD_INCLUDES =
X  STD_CPP_DEFINES =
X      STD_DEFINES = -DUNIX
X EXTRA_LOAD_FLAGS =
X  EXTRA_LIBRARIES = -ldnet
X             TAGS = ctags
X
X    PROTO_DEFINES =
X
X     INSTPGMFLAGS =
X
X     INSTBINFLAGS = -m 0755
X     INSTUIDFLAGS = -m 4755
X     INSTLIBFLAGS = -m 0664
X     INSTINCFLAGS = -m 0444
X     INSTMANFLAGS = -m 0444
X     INSTDATFLAGS = -m 0444
X    INSTKMEMFLAGS = -m 4755
X
X          DESTDIR =
X
X     TOP_INCLUDES = -I$(TOP)
X
X      CDEBUGFLAGS = -O
X        CCOPTIONS = -Wf,-XNh2000 -Olimit 2000
X      COMPATFLAGS =
X
X      ALLINCLUDES = $(STD_INCLUDES) $(TOP_INCLUDES) $(INCLUDES) $(EXTRA_INCLUDES)
X       ALLDEFINES = $(ALLINCLUDES) $(STD_DEFINES) $(PROTO_DEFINES) $(DEFINES) $(COMPATFLAGS)
X           CFLAGS = $(CDEBUGFLAGS) $(CCOPTIONS) $(ALLDEFINES)
X        LINTFLAGS = $(LINTOPTS) -DLINT $(ALLDEFINES)
X           LDLIBS = $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)
X        LDOPTIONS = $(CDEBUGFLAGS) $(CCOPTIONS)
X   LDCOMBINEFLAGS = -X -r
X
X        MACROFILE = ultrix.cf
X           RM_CMD = $(RM) *.CKP *.ln *.BAK *.bak *.o core errs ,* *~ *.a .emacs_* tags TAGS make.log MakeOut
X
X    IMAKE_DEFINES =
X
X         IRULESRC = $(CONFIGSRC)
X        IMAKE_CMD = $(NEWTOP)$(IMAKE) -I$(NEWTOP)$(IRULESRC) $(IMAKE_DEFINES)
X
X     ICONFIGFILES = $(IRULESRC)/Imake.tmpl $(IRULESRC)/Imake.rules \
X			$(IRULESRC)/Project.tmpl $(IRULESRC)/site.def \
X			$(IRULESRC)/$(MACROFILE) $(EXTRA_ICONFIGFILES)
X
X###########################################################################
X# X Window System Build Parameters
X# $XConsortium: Project.tmpl,v 1.63 89/12/18 16:46:44 jim Exp $
X
X###########################################################################
X# X Window System make variables; this need to be coordinated with rules
X# $XConsortium: Project.tmpl,v 1.63 89/12/18 16:46:44 jim Exp $
X
X          PATHSEP = /
X        USRLIBDIR = $(DESTDIR)/usr/lib
X           BINDIR = $(TOP)/../bin
X          INCROOT = $(DESTDIR)/usr/include
X     BUILDINCROOT = $(TOP)
X      BUILDINCDIR = $(BUILDINCROOT)/X11
X      BUILDINCTOP = ..
X           INCDIR = $(INCROOT)/X11
X           ADMDIR = $(DESTDIR)/usr/adm
X           LIBDIR = $(USRLIBDIR)/X11
X        CONFIGDIR = $(LIBDIR)/config
X       LINTLIBDIR = $(USRLIBDIR)/lint
X
X          FONTDIR = $(LIBDIR)/fonts
X         XINITDIR = $(LIBDIR)/xinit
X           XDMDIR = $(LIBDIR)/xdm
X           AWMDIR = $(LIBDIR)/awm
X           TWMDIR = $(LIBDIR)/twm
X           GWMDIR = $(LIBDIR)/gwm
X          MANPATH = $(DESTDIR)/usr/man
X    MANSOURCEPATH = $(MANPATH)/man
X           MANDIR = $(MANSOURCEPATH)n
X        LIBMANDIR = $(MANSOURCEPATH)3
X      XAPPLOADDIR = /wsl/share/lib/X11/r4app-defaults
X
X       FONTCFLAGS = -t
X
X     INSTAPPFLAGS = $(INSTDATFLAGS)
X
X            IMAKE = $(IMAKESRC)/imake
X           DEPEND = $(DEPENDSRC)/makedepend
X              RGB = $(RGBSRC)/rgb
X            FONTC = $(BDFTOSNFSRC)/bdftosnf
X        MKFONTDIR = $(MKFONTDIRSRC)/mkfontdir
X        MKDIRHIER = 	/bin/sh $(SCRIPTSRC)/mkdirhier.sh
X
X        CONFIGSRC = $(TOP)/config
X        CLIENTSRC = $(TOP)/clients
X          DEMOSRC = $(TOP)/demos
X           LIBSRC = $(TOP)/lib
X          FONTSRC = $(TOP)/fonts
X       INCLUDESRC = $(TOP)/X11
X        SERVERSRC = $(TOP)/server
X          UTILSRC = $(TOP)/util
X        SCRIPTSRC = $(UTILSRC)/scripts
X       EXAMPLESRC = $(TOP)/examples
X       CONTRIBSRC = $(TOP)/../contrib
X           DOCSRC = $(TOP)/doc
X           RGBSRC = $(TOP)/rgb
X        DEPENDSRC = $(UTILSRC)/makedepend
X         IMAKESRC = $(CONFIGSRC)
X         XAUTHSRC = $(LIBSRC)/Xau
X          XLIBSRC = $(LIBSRC)/X
X           XMUSRC = $(LIBSRC)/Xmu
X       TOOLKITSRC = $(LIBSRC)/Xt
X       AWIDGETSRC = $(LIBSRC)/Xaw
X       OLDXLIBSRC = $(LIBSRC)/oldX
X      XDMCPLIBSRC = $(LIBSRC)/Xdmcp
X      BDFTOSNFSRC = $(FONTSRC)/bdftosnf
X     MKFONTDIRSRC = $(FONTSRC)/mkfontdir
X     EXTENSIONSRC = $(TOP)/extensions
X
X  DEPEXTENSIONLIB =  $(EXTENSIONSRC)/lib/libXext.a
X     EXTENSIONLIB = 			   $(DEPEXTENSIONLIB)
X
X          DEPXLIB = $(DEPEXTENSIONLIB)  $(XLIBSRC)/libX11.a
X             XLIB = $(EXTENSIONLIB) 			  $(XLIBSRC)/libX11.a
X
X      DEPXAUTHLIB =  $(XAUTHSRC)/libXau.a
X         XAUTHLIB = 			  $(DEPXAUTHLIB)
X
X        DEPXMULIB =  $(XMUSRC)/libXmu.a
X           XMULIB = 			  $(DEPXMULIB)
X
X       DEPOLDXLIB =  $(OLDXLIBSRC)/liboldX.a
X          OLDXLIB = 			  $(DEPOLDXLIB)
X
X      DEPXTOOLLIB =  $(TOOLKITSRC)/libXt.a
X         XTOOLLIB = 			  $(DEPXTOOLLIB)
X
X        DEPXAWLIB =  $(AWIDGETSRC)/libXaw.a
X           XAWLIB = 			  $(DEPXAWLIB)
X
X LINTEXTENSIONLIB =  $(EXTENSIONSRC)/lib/llib-lXext.ln
X         LINTXLIB =  $(XLIBSRC)/llib-lX11.ln
X          LINTXMU =  $(XMUSRC)/llib-lXmu.ln
X        LINTXTOOL =  $(TOOLKITSRC)/llib-lXt.ln
X          LINTXAW =  $(AWIDGETSRC)/llib-lXaw.ln
X
X          DEPLIBS = $(LOCAL_LIBRARIES)
X
X         DEPLIBS1 = $(DEPLIBS)
X         DEPLIBS2 = $(DEPLIBS)
X         DEPLIBS3 = $(DEPLIBS)
X
X###########################################################################
X# Imake rules for building libraries, programs, scripts, and data files
X# rules:  $XConsortium: Imake.rules,v 1.67 89/12/18 17:14:15 jim Exp $
X
X###########################################################################
X# start of Imakefile
X
X            DEFINES = -DSIG=void
X
X      IMAKE_DEFINES = $(DEFINES)
X
X  XVLIBPATH = -L$(XLIBSRC) -L$(EXTENSIONSRC)/lib/xv -L$(EXTENSIONSRC)/xv/lib
X
X   XVT1SRCS = xvt1.c
X   XVT1OBJS = xvt1.o
X
X   XVT2SRCS = xvt2.c
X   XVT2OBJS = xvt2.o
X
X   XVT3SRCS = xvt3.c
X   XVT3OBJS = xvt3.o
X
X   XVT4SRCS = xvt4.c
X   XVT4OBJS = xvt4.o
X
X   XVT5SRCS = xvt5.c
X   XVT5OBJS = xvt5.o
X
X   XVT6SRCS = xvt6.c
X   XVT6OBJS = xvt6.o
X
X   XVT7SRCS = xvt7.c
X   XVT7OBJS = xvt7.o
X
X       SRCS = $(XVT1SRCS) $(XVT2SRCS) $(XVT3SRCS) $(XVT4SRCS) $(XVT5SRCS) \
X	$(XVT6SRCS) $(XVT7SRCS) $(XVT8SRCS) $(XVT9SRCS) $(XVT10SRCS)
X       OBJS = $(XVT1OBJS) $(XVT2OBJS) $(XVT3OBJS) $(XVT4OBJS) $(XVT5OBJS) \
X	$(XVT6OBJS) $(XVT7OBJS) $(XVT8OBJS) $(XVT9OBJS) $(XVT10OBJS)
X
Xall:: xvt1 xvt2 xvt3 xvt4 xvt5 xvt6 xvt7
X
Xxvt1:  $(XVT1OBJS)
X	 $(RM) $@
X	$(CC) -o $@  $(XVT1OBJS) $(LDOPTIONS)  $(XVLIBPATH) $(LDLIBS)  -lXv -lX11 $(EXTRA_LOAD_FLAGS)
X
Xclean::
X	$(RM) xvt1
X
Xxvt2:  $(XVT2OBJS)
X	 $(RM) $@
X	$(CC) -o $@  $(XVT2OBJS) $(LDOPTIONS)  $(XVLIBPATH) $(LDLIBS)  -lXv -lX11 $(EXTRA_LOAD_FLAGS)
X
Xclean::
X	$(RM) xvt2
X
Xxvt3:  $(XVT3OBJS)
X	 $(RM) $@
X	$(CC) -o $@  $(XVT3OBJS) $(LDOPTIONS)  $(XVLIBPATH) $(LDLIBS)  -lXv -lX11 $(EXTRA_LOAD_FLAGS)
X
Xclean::
X	$(RM) xvt3
X
Xxvt4:  $(XVT4OBJS)
X	 $(RM) $@
X	$(CC) -o $@  $(XVT4OBJS) $(LDOPTIONS)  $(XVLIBPATH) $(LDLIBS)  -lXv -lX11 $(EXTRA_LOAD_FLAGS)
X
Xclean::
X	$(RM) xvt4
X
Xxvt5:  $(XVT5OBJS)
X	 $(RM) $@
X	$(CC) -o $@  $(XVT5OBJS) $(LDOPTIONS)  $(XVLIBPATH) $(LDLIBS)  -lXv -lX11 $(EXTRA_LOAD_FLAGS)
X
Xclean::
X	$(RM) xvt5
X
Xxvt6:  $(XVT6OBJS)
X	 $(RM) $@
X	$(CC) -o $@  $(XVT6OBJS) $(LDOPTIONS)  $(XVLIBPATH) $(LDLIBS)  -lXv -lX11 $(EXTRA_LOAD_FLAGS)
X
Xclean::
X	$(RM) xvt6
X
Xxvt7:  $(XVT7OBJS)
X	 $(RM) $@
X	$(CC) -o $@  $(XVT7OBJS) $(LDOPTIONS)  $(XVLIBPATH) $(LDLIBS)  -lXv -lX11 $(EXTRA_LOAD_FLAGS)
X
Xclean::
X	$(RM) xvt7
X
Xxvt1: $(XVT1LIBS)
Xxvt2: $(XVT2LIBS)
Xxvt3: $(XVT3LIBS)
Xxvt4: $(XVT4LIBS)
Xxvt5: $(XVT5LIBS)
Xxvt6: $(XVT6LIBS)
Xxvt7: $(XVT7LIBS)
X
Xdepend:: $(DEPEND)
X
X$(DEPEND):
X	@echo "checking $@ over in $(DEPENDSRC) first..."; \
X	cd $(DEPENDSRC); $(MAKE); \
X	echo "okay, continuing in $(CURRENT_DIR)"
X
Xdepend::
X	$(DEPEND) -s "# DO NOT DELETE" -- $(ALLDEFINES) -- $(SRCS)
X
X###########################################################################
X# common rules for all Makefiles - do not edit
X
Xemptyrule::
X
Xclean::
X	$(RM_CMD) \#*
X
XMakefile:: $(IMAKE)
X
X$(IMAKE):
X	@(cd $(IMAKESRC); if [ -f Makefile ]; then \
X	echo "checking $@ in $(IMAKESRC) first..."; $(MAKE) all; else \
X	echo "bootstrapping $@ from Makefile.ini in $(IMAKESRC) first..."; \
X	$(MAKE) -f Makefile.ini BOOTSTRAPCFLAGS=$(BOOTSTRAPCFLAGS); fi; \
X	echo "okay, continuing in $(CURRENT_DIR)")
X
XMakefile::
X	-@if [ -f Makefile ]; then \
X		echo "	$(RM) Makefile.bak; $(MV) Makefile Makefile.bak"; \
X		$(RM) Makefile.bak; $(MV) Makefile Makefile.bak; \
X	else exit 0; fi
X	$(IMAKE_CMD) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT_DIR)
X
Xtags::
X	$(TAGS) -w *.[ch]
X	$(TAGS) -xw *.[ch] > TAGS
X
X###########################################################################
X# empty rules for directories that do not have SUBDIRS - do not edit
X
Xinstall::
X	@echo "install in $(CURRENT_DIR) done"
X
Xinstall.man::
X	@echo "install.man in $(CURRENT_DIR) done"
X
XMakefiles::
X
Xincludes::
X
X###########################################################################
X# dependencies generated by makedepend
X
X# DO NOT DELETE
X
Xxvt1.o: /usr/include/stdio.h ../../.././X11/Xlib.h /usr/include/sys/types.h
Xxvt1.o: ../../.././X11/X.h /usr/include/sys/time.h
Xxvt1.o: /usr/include/sys/resource.h ../../.././X11/Xutil.h
Xxvt1.o: ../../.././X11/extensions/Xvlib.h ../../.././X11/extensions/Xv.h
Xxvt2.o: /usr/include/stdio.h ../../.././X11/Xlib.h /usr/include/sys/types.h
Xxvt2.o: ../../.././X11/X.h /usr/include/sys/time.h
Xxvt2.o: /usr/include/sys/resource.h ../../.././X11/Xutil.h
Xxvt2.o: ../../.././X11/extensions/Xvlib.h ../../.././X11/extensions/Xv.h
Xxvt3.o: /usr/include/stdio.h ../../.././X11/Xlib.h /usr/include/sys/types.h
Xxvt3.o: ../../.././X11/X.h /usr/include/sys/time.h
Xxvt3.o: /usr/include/sys/resource.h ../../.././X11/Xutil.h
Xxvt3.o: ../../.././X11/extensions/Xvlib.h ../../.././X11/extensions/Xv.h
Xxvt4.o: /usr/include/stdio.h ../../.././X11/Xlib.h /usr/include/sys/types.h
Xxvt4.o: ../../.././X11/X.h /usr/include/sys/time.h
Xxvt4.o: /usr/include/sys/resource.h ../../.././X11/Xutil.h
Xxvt4.o: ../../.././X11/extensions/Xvlib.h ../../.././X11/extensions/Xv.h
Xxvt5.o: /usr/include/stdio.h ../../.././X11/Xlib.h /usr/include/sys/types.h
Xxvt5.o: ../../.././X11/X.h /usr/include/sys/time.h
Xxvt5.o: /usr/include/sys/resource.h ../../.././X11/Xutil.h
Xxvt5.o: ../../.././X11/extensions/Xvlib.h ../../.././X11/extensions/Xv.h
Xxvt6.o: /usr/include/stdio.h ../../.././X11/Xlib.h /usr/include/sys/types.h
Xxvt6.o: ../../.././X11/X.h /usr/include/sys/time.h
Xxvt6.o: /usr/include/sys/resource.h ../../.././X11/Xutil.h
Xxvt6.o: ../../.././X11/extensions/Xvlib.h ../../.././X11/extensions/Xv.h
Xxvt7.o: /usr/include/stdio.h ../../.././X11/Xlib.h /usr/include/sys/types.h
Xxvt7.o: ../../.././X11/X.h /usr/include/sys/time.h
Xxvt7.o: /usr/include/sys/resource.h ../../.././X11/Xutil.h
Xxvt7.o: ../../.././X11/extensions/Xvlib.h ../../.././X11/extensions/Xv.h
END_OF_FILE
if test 12279 -ne `wc -c <'extensions/xv/test/Makefile'`; then
    echo shar: \"'extensions/xv/test/Makefile'\" unpacked with wrong size!
fi
# end of 'extensions/xv/test/Makefile'
fi
if test -f 'extensions/xv/test/xvt7.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'extensions/xv/test/xvt7.c'\"
else
echo shar: Extracting \"'extensions/xv/test/xvt7.c'\" \(12919 characters\)
sed "s/^X//" >'extensions/xv/test/xvt7.c' <<'END_OF_FILE'
X/***********************************************************
XCopyright 1991 by Digital Equipment Corporation, Maynard, Massachusetts,
Xand the Massachusetts Institute of Technology, Cambridge, Massachusetts.
X
X                        All Rights Reserved
X
XPermission to use, copy, modify, and distribute this software and its 
Xdocumentation for any purpose and without fee is hereby granted, 
Xprovided that the above copyright notice appear in all copies and that
Xboth that copyright notice and this permission notice appear in 
Xsupporting documentation, and that the names of Digital or MIT not be
Xused in advertising or publicity pertaining to distribution of the
Xsoftware without specific, written prior permission.  
X
XDIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
XALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
XDIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
XANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
XWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
XARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
XSOFTWARE.
X
X******************************************************************/
X/*
X** File: 
X**
X**   xvt7.c --- Xv test program 7
X**   
X** Author: 
X**
X**   David Carver (Digital Workstation Engineering/Project Athena)
X**
X** Revisions:
X**
X**   04.06.91 Carver
X**     - origional
X**       
X*/
X#include <stdio.h>
X#include <X11/Xlib.h>
X#include <X11/Xutil.h>
X#include <X11/extensions/Xvlib.h>
X
X
Xmain(argc, argv)
X     int         argc;
X     char        *argv[];
X{
X  char chr;
X  int ii, jj, status, in_motion;
X  unsigned int mask;
X  int screen;
X  int dx, dy, dw, dh, px, py, cx, cy, vx, vy, vw, vh;
X  int rx,ry,wx,wy;
X  int delta;
X
X  Display *dpy;
X  Visual *vis,*def_vis;
X  XVisualInfo *p_vis_info, vis_info_tmpl;
X  unsigned long vis_id;
X  unsigned long depth;
X  XGCValues gc_attr;
X  GC gc,stillgc;
X  XSetWindowAttributes win_attr;
X  Window root,main_win,child;
X  Pixmap mskpix;
X  Colormap cmap;
X  XEvent event;
X  XColor scolor,ecolor;
X
X  unsigned long version, revision;
X  unsigned int event_base;
X  unsigned int error_base;
X  unsigned int major_opcode;
X  unsigned long nAdaptors;
X  XvAdaptorInfo *pAdaptors, *pAdaptor;
X  XvEncodingInfo *pEncoding;
X  XvFormat *pFormat;
X  unsigned long port;
X  unsigned long enc_id;
X  XvEvent *pe;
X  float rate;
X  int video;
X
X  Atom hue_atom;
X  Atom saturation_atom;
X  Atom brightness_atom;
X  Atom contrast_atom;
X  int hue;
X  int saturation;
X  int brightness;
X  int contrast;
X
X  int shft;
X  int ctrl;
X
X  printf("\n  Welcome to Xv test program #7\n\n");
X  printf("  This program tests port adjustments.  When the video window\n");
X  printf("  appears, use h and H to decrease and increate hue, s and S\n");
X  printf("  to decrease and increase saturation, b and B to decrease and\n");
X  printf("  increase brightness, and c and C to decrease and increase\n");
X  printf("  contrast.  Hit r or R to reset values and ^c to exit\n");
X
X  printf("\n> Press return to continue...");
X  chr = getc(stdin);
X
X  dpy = XOpenDisplay(0);
X  if (!dpy)
X    {
X      printf("\n  Couldn't open display\n");
X      printf("\n  Xv test program #7 terminated\n");
X      exit();
X    }
X
X  root = XDefaultRootWindow(dpy);
X  screen = XDefaultScreen(dpy);
X
X  XSynchronize(dpy, True);
X
X  status = XvQueryExtension(dpy, &version, &revision,
X			    &major_opcode, &event_base, &error_base);
X
X  if (status != Success) 
X    {
X      printf("\n  Xv video extension not available\n");
X      printf("\n  Xv test program #7 terminated\n");
X      exit();
X    }
X
X  XvQueryAdaptors(dpy, root, &nAdaptors, &pAdaptors);
X
X  printf("\n  Xv V%01d.%d\n", version, revision);
X
X  if (!nAdaptors)
X    {
X      printf("\n  Your display has no video adaptors\n");
X      printf("\n  Xv test program #7 terminated\n");
X      exit();
X    }
X
X if (!Setup(argc, argv, nAdaptors, pAdaptors, &port, &depth, &vis_id))
X   {
X     printf("\n  Setup failed.\n");
X     printf("\n  Xv test program #7 terminated\n");
X     exit();
X   }
X
X
X  vis_info_tmpl.visualid = vis_id;
X  p_vis_info = XGetVisualInfo(dpy, VisualIDMask, &vis_info_tmpl, &ii);
X  if (!p_vis_info)
X    {
X      printf("      Error: Couldn't find visual ");
X      printf("#%x listed for adaptor.\n", pFormat->visual_id);
X      printf("\n  Xv test program #7 terminated\n");
X      return;
X    }
X
X  vis = p_vis_info->visual;
X  def_vis = XDefaultVisual(dpy,screen);
X
X  if (vis->visualid == def_vis->visualid)
X    cmap = XDefaultColormap(dpy,screen);
X  else
X    cmap = XCreateColormap(dpy, root, vis, AllocNone);
X  
X  XAllocNamedColor(dpy, cmap, "midnight blue", &scolor, &ecolor);
X
X  win_attr.colormap = cmap;
X  win_attr.background_pixel = scolor.pixel;
X  win_attr.event_mask = KeyPressMask | VisibilityChangeMask;  
X  win_attr.border_pixel = scolor.pixel;
X
X  main_win = XCreateWindow(dpy, root, 0, 0, 672, 512, 0, 
X			   depth, InputOutput, vis,
X			   CWColormap | CWBackPixel | CWEventMask |
X			   CWBorderPixel,
X			   &win_attr);
X
X  XMapWindow(dpy, main_win);
X
X  printf("\n  Waiting for window to become visible...\n");
X  while (1)
X    {
X      XNextEvent(dpy, &event);
X      if (event.type == VisibilityNotify) break;
X    }
X
X  printf("\n  SelectNotify on window\n");
X  XvSelectVideoNotify(dpy, main_win, True);
X
X  gc_attr.foreground = 0xffffff;
X  gc = XCreateGC(dpy, main_win, 
X		 GCForeground,
X		 &gc_attr);
X
X  hue_atom = XInternAtom(dpy,"XV_HUE",False);
X  saturation_atom = XInternAtom(dpy,"XV_SATURATION",False);
X  brightness_atom = XInternAtom(dpy,"XV_BRIGHTNESS",False);
X  contrast_atom = XInternAtom(dpy,"XV_CONTRAST",False);
X
X  XvGetPortAttribute(dpy, port, hue_atom, &hue);
X  XvGetPortAttribute(dpy, port, saturation_atom, &saturation);
X  XvGetPortAttribute(dpy, port, brightness_atom, &brightness);
X  XvGetPortAttribute(dpy, port, contrast_atom, &contrast);
X
X  printf("  Hue = %d on port %d\n", hue, port);
X  printf("  Saturation = %d on port %d\n", saturation, port);
X  printf("  Brightness = %d on port %d\n", brightness, port);
X  printf("  Contrast = %d on port %d\n", contrast, port);
X
X  XvSelectPortNotify(dpy, port, True);
X
X  printf("\n  PutVideo\n\n");
X  XvPutVideo(dpy, port, main_win, gc, 0, 0, 640, 480, 16, 16, 640, 480);
X
X  while (1)
X    {
X      XNextEvent(dpy, &event);
X
X      if (event.type == KeyPress)
X	{
X
X	  if (!video) 
X	    XvPutVideo(dpy, port, main_win, gc, 
X		       0, 0, 640, 480, 
X		       16, 16, 640, 480);
X
X	  ctrl = event.xkey.state & ControlMask;
X	  shft = event.xkey.state & (ShiftMask | LockMask);
X
X	  chr = XLookupKeysym(&event.xkey,0);
X	  if (chr=='c' && ctrl)
X	    {
X	      break;
X	    }
X	  else if (chr=='c' && !shft)
X	    {
X	      contrast -= 10;
X	      if (contrast < -1000) contrast = -1000;
X	      XvSetPortAttribute(dpy,port,contrast_atom,contrast);
X	    }
X	  else if (chr=='c' && shft)
X	    {
X	      contrast += 10;
X	      if (contrast > 1000) contrast = 1000;
X	      XvSetPortAttribute(dpy,port,contrast_atom,contrast);
X	    }
X	  else if (chr=='h' && !shft) 
X	    {
X	      hue -= 10;
X	      if (contrast < -1000) contrast = -1000;
X	      XvSetPortAttribute(dpy,port,hue_atom,hue);
X	    }
X	  else if (chr=='h' && shft) 
X	    {
X	      hue += 10;
X	      if (hue > 1000) hue = 1000;
X	      XvSetPortAttribute(dpy,port,hue_atom,hue);
X	    }
X	  else if (chr=='s' && !shft) 
X	    {
X	      saturation -= 10;
X	      if (saturation < -1000) saturation = -1000;
X	      XvSetPortAttribute(dpy,port,saturation_atom,saturation);
X	    }
X	  else if (chr=='s' && shft) 
X	    {
X	      saturation += 10;
X	      if (saturation > 1000) saturation = 1000;
X	      XvSetPortAttribute(dpy,port,saturation_atom,saturation);
X	    }
X	  else if (chr=='b' && !shft) 
X	    {
X	      brightness -= 10;
X	      if (brightness < -1000) brightness = -1000;
X	      XvSetPortAttribute(dpy,port,brightness_atom,brightness);
X	    }
X	  else if (chr=='b' && shft) 
X	    {
X	      brightness += 10;
X	      if (brightness > 1000) brightness = 1000;
X	      XvSetPortAttribute(dpy,port,brightness_atom,brightness);
X	    }
X	  else if (chr=='r')
X	    {
X	      hue = 0;
X	      saturation = 0;
X	      brightness = 0;
X	      contrast = 0;
X	      XvSetPortAttribute(dpy,port,hue_atom,hue);
X	      XvSetPortAttribute(dpy,port,saturation_atom,saturation);
X	      XvSetPortAttribute(dpy,port,brightness_atom,brightness);
X	      XvSetPortAttribute(dpy,port,contrast_atom,contrast);
X	    }
X	}
X      else if (event.type == event_base + XvVideoNotify)
X	{
X	  pe = (XvEvent *)&event;
X	  if (pe->xvvideo.drawable == main_win)
X	    {
X	      if (pe->xvvideo.reason == XvStarted)
X		{
X		  printf("  Video started on port %d\n", pe->xvvideo.port_id);
X		  video = True;
X		}
X	      if (pe->xvvideo.reason == XvStopped)
X		{
X		  printf("  Video stopped on port %d\n", pe->xvvideo.port_id);
X		  video = False;
X		}
X	      if (pe->xvvideo.reason == XvPreempted)
X		{
X		  printf("  Video preempted on port %d\n", pe->xvvideo.port_id);
X		  video = False;
X		}
X	      if (pe->xvvideo.reason == XvHardError)
X		{
X		  printf("  Video error on port %d\n", pe->xvvideo.port_id);
X		  video = False;
X		}
X	      if (pe->xvvideo.reason == XvBusy)
X		{
X		  printf("  Port %d is grabbed by another client\n", 
X			 pe->xvvideo.port_id);
X		  XBell(dpy, 100);
X		  if (pe->xvvideo.drawable == main_win)
X		    video = False;
X		}
X	    }
X	  else
X	    {
X	      printf("  Wrong video notify window!!!\n");
X	    }
X	}
X      else if (event.type == event_base + XvPortNotify)
X	{
X	  pe = (XvEvent *)&event;
X	  if (pe->xvport.attribute == hue_atom)
X	    {
X	      printf("  Hue = %d on port %d\n", pe->xvport.value, 
X		     pe->xvport.port_id);
X	    }
X	  if (pe->xvport.attribute == saturation_atom)
X	    {
X	      printf("  Saturation = %d on port %d\n", pe->xvport.value, 
X		     pe->xvport.port_id);
X	    }
X	  if (pe->xvport.attribute == brightness_atom)
X	    {
X	      printf("  Brightness = %d on port %d\n", pe->xvport.value, 
X		     pe->xvport.port_id);
X	    }
X	  if (pe->xvport.attribute == contrast_atom)
X	    {
X	      printf("  Contrast = %d on port %d\n", pe->xvport.value, 
X		     pe->xvport.port_id);
X	    }
X	}
X    }
X
X  printf("\n  Xv test program #7 finished\n");
X
X}
X
X
XSetup(argc, argv, nAdaptors, pAdaptors, p_port, p_depth, p_vis_id)
X     int         argc;
X     char        *argv[];
X     unsigned long nAdaptors;
X     XvAdaptorInfo *pAdaptors;
X     unsigned long *p_port;
X     unsigned long *p_depth;
X     unsigned long *p_vis_id;
X{
X  int ii, jj;
X  XvAdaptorInfo *pAdaptor;
X  XvFormat *pFormat;
X  int adaptor, port, depth, visual_id;
X
X  adaptor = port = depth = visual_id = -1;
X
X  /* LOOK THROUGH COMMAND LINE ARGUMENTS */
X
X  for ( ii = 1; ii < argc; ii++ )
X    {
X      if (strcmp( argv[ii], "-adaptor") == 0)
X	{
X	    if(++ii < argc)
X	      adaptor = atoi(argv[ii]);
X            else
X	      UseMsg(argv);
X	}
X      else if (strcmp( argv[ii], "-port") == 0)
X	{
X	    if(++ii < argc)
X	      port = atoi(argv[ii]);
X            else
X	      UseMsg(argv);
X	}
X      else if (strcmp( argv[ii], "-depth") == 0)
X	{
X	    if(++ii < argc)
X	      depth = atoi(argv[ii]);
X            else
X	      UseMsg(argv);
X	}
X      else if (strcmp( argv[ii], "-visual") == 0)
X	{
X	    if(++ii < argc)
X	      visual_id = atoi(argv[ii]);
X            else
X	      UseMsg(argv);
X	}
X      else if (strcmp( argv[ii], "-help") == 0)
X	{
X	  UseMsg(argv);
X	}
X    }
X
X  if (adaptor < 0)
X    {
X      pAdaptor = pAdaptors;
X    }
X  else
X    {
X      if (adaptor > nAdaptors)
X	{
X	  printf("\n  Adaptor #%d doesn't exist.\n", adaptor);
X	  return False;
X	}
X      pAdaptor = pAdaptors+(adaptor-1);
X    }
X
X  if (port < 0)
X    {
X      port = pAdaptor->base_id;
X    }
X  else
X    {
X      if (port > pAdaptor->num_ports)
X	{
X	  printf("\n  Port #%d doesn't exist for adaptor #%d.\n", 
X		 port, adaptor);
X	  return False;
X	}
X    }
X
X  pFormat = pAdaptor->formats;
X
X  if (depth < 0)
X    {
X      depth = pFormat->depth;
X    }
X  else
X    {
X      for (ii=0; ii<pAdaptor->num_formats; ii++)
X	{
X	  if (pFormat->depth == depth) break;
X	  pFormat++;
X	}
X
X      if (ii >= pAdaptor->num_formats)
X	{
X	  printf("\n  Depth %d not supported by adaptor.\n", depth);
X	  return False;
X	}
X    }
X
X  if (visual_id < 0)
X    {
X      visual_id = pFormat->visual_id;
X    }
X  else
X    {
X
X      pFormat = pAdaptor->formats;
X
X      for (ii=0; ii<pAdaptor->num_formats; ii++)
X	{
X	  if ((pFormat->visual_id == visual_id) && pFormat->depth == depth)
X	    break;
X	  pFormat++;
X	}
X
X      if (ii >= pAdaptor->num_formats)
X	{
X	  printf("\n  Visual-id %d at depth %d not supported by adaptor.\n", 
X		 depth, visual_id);
X	  return False;
X	}
X    }
X
X  *p_port = port;
X  *p_depth = depth;
X  *p_vis_id = visual_id;
X
X  return True;
X}
X
XUseMsg(argv)
X     char        *argv[];
X{
X
X  printf("use: %s [option]\n", argv[0]);
X  printf("\t-adaptor #                       adaptor number\n");
X  printf("\t-port #                          port (XID)\n");
X  printf("\t-depth #                         drawable depth (planes)\n");
X  printf("\t-visual #                        drawable visual (id)\n");
X  exit();
X}
END_OF_FILE
if test 12919 -ne `wc -c <'extensions/xv/test/xvt7.c'`; then
    echo shar: \"'extensions/xv/test/xvt7.c'\" unpacked with wrong size!
fi
# end of 'extensions/xv/test/xvt7.c'
fi
if test -f 'server/ddx/cfb32/cfbblt.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'server/ddx/cfb32/cfbblt.c'\"
else
echo shar: Extracting \"'server/ddx/cfb32/cfbblt.c'\" \(13401 characters\)
sed "s/^X//" >'server/ddx/cfb32/cfbblt.c' <<'END_OF_FILE'
X/*
X * cfb copy area
X */
X
X/*
XCopyright 1989 by the Massachusetts Institute of Technology
X
XPermission to use, copy, modify, and distribute this software and its
Xdocumentation for any purpose and without fee is hereby granted,
Xprovided that the above copyright notice appear in all copies and that
Xboth that copyright notice and this permission notice appear in
Xsupporting documentation, and that the name of M.I.T. not be used in
Xadvertising or publicity pertaining to distribution of the software
Xwithout specific, written prior permission.  M.I.T. makes no
Xrepresentations about the suitability of this software for any
Xpurpose.  It is provided "as is" without express or implied warranty.
X
XAuthor: Keith Packard
X
X*/
X/* $XConsortium: cfbblt.c,v 1.7 91/05/06 15:13:21 rws Exp $ */
X
X#include	"X.h"
X#include	"Xmd.h"
X#include	"Xproto.h"
X#include	"gcstruct.h"
X#include	"windowstr.h"
X#include	"scrnintstr.h"
X#include	"pixmapstr.h"
X#include	"regionstr.h"
X#include	"cfb.h"
X#include	"cfbmskbits.h"
X#include	"cfb8bit.h"
X#include	"fastblt.h"
X#include	"mergerop.h"
X
X#ifdef notdef /* XXX fails right now, walks off end of pixmaps */
X#if defined (FAST_UNALIGNED_READS) && (PPW == 4)
X#define DO_UNALIGNED_BITBLT
X#endif
X#endif
X
XMROP_NAME(cfbDoBitblt)(pSrc, pDst, alu, prgnDst, pptSrc, planemask)
X    DrawablePtr	    pSrc, pDst;
X    int		    alu;
X    RegionPtr	    prgnDst;
X    DDXPointPtr	    pptSrc;
X    unsigned long   planemask;
X{
X    unsigned long *psrcBase, *pdstBase;	
X				/* start of src and dst bitmaps */
X    int widthSrc, widthDst;	/* add to get to same position in next line */
X
X    BoxPtr pbox;
X    int nbox;
X
X    BoxPtr pboxTmp, pboxNext, pboxBase, pboxNew1, pboxNew2;
X				/* temporaries for shuffling rectangles */
X    DDXPointPtr pptTmp, pptNew1, pptNew2;
X				/* shuffling boxes entails shuffling the
X				   source points too */
X    int w, h;
X    int xdir;			/* 1 = left right, -1 = right left/ */
X    int ydir;			/* 1 = top down, -1 = bottom up */
X
X    unsigned long *psrcLine, *pdstLine;	
X				/* pointers to line with current src and dst */
X    register unsigned long *psrc;/* pointer to current src longword */
X    register unsigned long *pdst;/* pointer to current dst longword */
X
X    MROP_DECLARE_REG()
X
X				/* following used for looping through a line */
X    unsigned long startmask, endmask;	/* masks for writing ends of dst */
X    int nlMiddle;		/* whole longwords in dst */
X    int xoffSrc, xoffDst;
X    register int leftShift, rightShift;
X    register unsigned long bits;
X    register unsigned long bits1;
X    register int nl;		/* temp copy of nlMiddle */
X
X				/* place to store full source word */
X    int nstart;			/* number of ragged bits at start of dst */
X    int nend;			/* number of ragged bits at end of dst */
X    int srcStartOver;		/* pulling nstart bits from src
X				   overflows into the next word? */
X    int careful;
X    int tmpSrc;
X
X    MROP_INITIALIZE(alu,planemask);
X
X    cfbGetLongWidthAndPointer (pSrc, widthSrc, psrcBase)
X
X    cfbGetLongWidthAndPointer (pDst, widthDst, pdstBase)
X
X    /* XXX we have to err on the side of safety when both are windows,
X     * because we don't know if IncludeInferiors is being used.
X     */
X    careful = ((pSrc == pDst) ||
X	       ((pSrc->type == DRAWABLE_WINDOW) &&
X		(pDst->type == DRAWABLE_WINDOW)));
X
X    pbox = REGION_RECTS(prgnDst);
X    nbox = REGION_NUM_RECTS(prgnDst);
X
X    pboxNew1 = NULL;
X    pptNew1 = NULL;
X    pboxNew2 = NULL;
X    pptNew2 = NULL;
X    if (careful && (pptSrc->y < pbox->y1))
X    {
X        /* walk source botttom to top */
X	ydir = -1;
X	widthSrc = -widthSrc;
X	widthDst = -widthDst;
X
X	if (nbox > 1)
X	{
X	    /* keep ordering in each band, reverse order of bands */
X	    pboxNew1 = (BoxPtr)ALLOCATE_LOCAL(sizeof(BoxRec) * nbox);
X	    if(!pboxNew1)
X		return;
X	    pptNew1 = (DDXPointPtr)ALLOCATE_LOCAL(sizeof(DDXPointRec) * nbox);
X	    if(!pptNew1)
X	    {
X	        DEALLOCATE_LOCAL(pboxNew1);
X	        return;
X	    }
X	    pboxBase = pboxNext = pbox+nbox-1;
X	    while (pboxBase >= pbox)
X	    {
X	        while ((pboxNext >= pbox) &&
X		       (pboxBase->y1 == pboxNext->y1))
X		    pboxNext--;
X	        pboxTmp = pboxNext+1;
X	        pptTmp = pptSrc + (pboxTmp - pbox);
X	        while (pboxTmp <= pboxBase)
X	        {
X		    *pboxNew1++ = *pboxTmp++;
X		    *pptNew1++ = *pptTmp++;
X	        }
X	        pboxBase = pboxNext;
X	    }
X	    pboxNew1 -= nbox;
X	    pbox = pboxNew1;
X	    pptNew1 -= nbox;
X	    pptSrc = pptNew1;
X        }
X    }
X    else
X    {
X	/* walk source top to bottom */
X	ydir = 1;
X    }
X
X    if (careful && (pptSrc->x < pbox->x1))
X    {
X	/* walk source right to left */
X        xdir = -1;
X
X	if (nbox > 1)
X	{
X	    /* reverse order of rects in each band */
X	    pboxNew2 = (BoxPtr)ALLOCATE_LOCAL(sizeof(BoxRec) * nbox);
X	    pptNew2 = (DDXPointPtr)ALLOCATE_LOCAL(sizeof(DDXPointRec) * nbox);
X	    if(!pboxNew2 || !pptNew2)
X	    {
X		if (pptNew2) DEALLOCATE_LOCAL(pptNew2);
X		if (pboxNew2) DEALLOCATE_LOCAL(pboxNew2);
X		if (pboxNew1)
X		{
X		    DEALLOCATE_LOCAL(pptNew1);
X		    DEALLOCATE_LOCAL(pboxNew1);
X		}
X	        return;
X	    }
X	    pboxBase = pboxNext = pbox;
X	    while (pboxBase < pbox+nbox)
X	    {
X	        while ((pboxNext < pbox+nbox) &&
X		       (pboxNext->y1 == pboxBase->y1))
X		    pboxNext++;
X	        pboxTmp = pboxNext;
X	        pptTmp = pptSrc + (pboxTmp - pbox);
X	        while (pboxTmp != pboxBase)
X	        {
X		    *pboxNew2++ = *--pboxTmp;
X		    *pptNew2++ = *--pptTmp;
X	        }
X	        pboxBase = pboxNext;
X	    }
X	    pboxNew2 -= nbox;
X	    pbox = pboxNew2;
X	    pptNew2 -= nbox;
X	    pptSrc = pptNew2;
X	}
X    }
X    else
X    {
X	/* walk source left to right */
X        xdir = 1;
X    }
X
X    while(nbox--)
X    {
X	w = pbox->x2 - pbox->x1;
X	h = pbox->y2 - pbox->y1;
X
X	if (ydir == -1) /* start at last scanline of rectangle */
X	{
X	    psrcLine = psrcBase + ((pptSrc->y+h-1) * -widthSrc);
X	    pdstLine = pdstBase + ((pbox->y2-1) * -widthDst);
X	}
X	else /* start at first scanline */
X	{
X	    psrcLine = psrcBase + (pptSrc->y * widthSrc);
X	    pdstLine = pdstBase + (pbox->y1 * widthDst);
X	}
X	if ((pbox->x1 & PIM) + w <= PPW)
X	{
X	    maskpartialbits (pbox->x1, w, startmask);
X	    endmask = 0;
X	    nlMiddle = 0;
X	}
X	else
X	{
X	    maskbits(pbox->x1, w, startmask, endmask, nlMiddle);
X	}
X	if (xdir == 1)
X	{
X	    xoffSrc = pptSrc->x & PIM;
X	    xoffDst = pbox->x1 & PIM;
X	    pdstLine += (pbox->x1 >> PWSH);
X	    psrcLine += (pptSrc->x >> PWSH);
X#ifdef DO_UNALIGNED_BITBLT
X	    nl = xoffSrc - xoffDst;
X	    psrcLine = (unsigned long *)
X			(((unsigned char *) psrcLine) + nl);
X#else
X	    if (xoffSrc == xoffDst)
X#endif
X	    {
X		while (h--)
X		{
X		    psrc = psrcLine;
X		    pdst = pdstLine;
X		    pdstLine += widthDst;
X		    psrcLine += widthSrc;
X		    if (startmask)
X		    {
X			*pdst = MROP_MASK(*psrc, *pdst, startmask);
X			psrc++;
X			pdst++;
X		    }
X		    nl = nlMiddle;
X
X#ifdef LARGE_INSTRUCTION_CACHE
X#ifdef FAST_CONSTANT_OFFSET_MODE
X
X		    psrc += nl & (UNROLL-1);
X		    pdst += nl & (UNROLL-1);
X
X#define BodyOdd(n) pdst[-n] = MROP_SOLID (psrc[-n], pdst[-n]);
X#define BodyEven(n) pdst[-n] = MROP_SOLID (psrc[-n], pdst[-n]);
X
X#define LoopReset \
Xpdst += UNROLL; \
Xpsrc += UNROLL;
X
X#else
X
X#define BodyOdd(n)  *pdst = MROP_SOLID (*psrc, *pdst); pdst++; psrc++;
X#define BodyEven(n) BodyOdd(n)
X
X#define LoopReset   ;
X
X#endif
X		    PackedLoop
X
X#undef BodyOdd
X#undef BodyEven
X#undef LoopReset
X
X#else
X#ifdef NOTDEF
X		    /* you'd think this would be faster --
X		     * a single instruction instead of 6
X		     * but measurements show it to be ~15% slower
X		     */
X		    while ((nl -= 6) >= 0)
X		    {
X			asm ("moveml %1+,#0x0c0f;moveml#0x0c0f,%0"
X			     : "=m" (*(char *)pdst)
X			     : "m" (*(char *)psrc)
X			     : "d0", "d1", "d2", "d3",
X			       "a2", "a3");
X			pdst += 6;
X		    }
X		    nl += 6;
X		    while (nl--)
X			*pdst++ = *psrc++;
X#endif
X		    DuffL(nl, label1,
X			    *pdst = MROP_SOLID (*psrc, *pdst);
X			    pdst++; psrc++;)
X#endif
X
X		    if (endmask)
X			*pdst = MROP_MASK(*psrc, *pdst, endmask);
X		}
X	    }
X#ifndef DO_UNALIGNED_BITBLT
X	    else
X	    {
X		if (xoffSrc > xoffDst)
X		{
X		    leftShift = (xoffSrc - xoffDst) << (5 - PWSH);
X		    rightShift = 32 - leftShift;
X		}
X		else
X		{
X		    rightShift = (xoffDst - xoffSrc) << (5 - PWSH);
X		    leftShift = 32 - rightShift;
X		}
X		while (h--)
X		{
X		    psrc = psrcLine;
X		    pdst = pdstLine;
X		    pdstLine += widthDst;
X		    psrcLine += widthSrc;
X		    bits = 0;
X		    if (xoffSrc > xoffDst)
X			bits = *psrc++;
X		    if (startmask)
X		    {
X			bits1 = BitLeft(bits,leftShift);
X			bits = *psrc++;
X			bits1 |= BitRight(bits,rightShift);
X			*pdst = MROP_MASK(bits1, *pdst, startmask);
X			pdst++;
X		    }
X		    nl = nlMiddle;
X
X#ifdef LARGE_INSTRUCTION_CACHE
X		    bits1 = bits;
X
X#ifdef FAST_CONSTANT_OFFSET_MODE
X
X		    psrc += nl & (UNROLL-1);
X		    pdst += nl & (UNROLL-1);
X
X#define BodyOdd(n) \
Xbits = psrc[-n]; \
Xpdst[-n] = MROP_SOLID(BitLeft(bits1, leftShift) | BitRight(bits, rightShift), pdst[-n]);
X
X#define BodyEven(n) \
Xbits1 = psrc[-n]; \
Xpdst[-n] = MROP_SOLID(BitLeft(bits, leftShift) | BitRight(bits1, rightShift), pdst[-n]);
X
X#define LoopReset \
Xpdst += UNROLL; \
Xpsrc += UNROLL;
X
X#else
X
X#define BodyOdd(n) \
Xbits = *psrc++; \
X*pdst = MROP_SOLID(BitLeft(bits1, leftShift) | BitRight(bits, rightShift), *pdst); \
Xpdst++;
X		   
X#define BodyEven(n) \
Xbits1 = *psrc++; \
X*pdst = MROP_SOLID(BitLeft(bits, leftShift) | BitRight(bits1, rightShift), *pdst); \
Xpdst++;
X
X#define LoopReset   ;
X
X#endif	/* !FAST_CONSTANT_OFFSET_MODE */
X
X		    PackedLoop
X
X#undef BodyOdd
X#undef BodyEven
X#undef LoopReset
X
X#else
X		    DuffL (nl,label2,
X			bits1 = BitLeft(bits, leftShift);
X			bits = *psrc++;
X			*pdst = MROP_SOLID (bits1 | BitRight(bits, rightShift), *pdst);
X			pdst++;
X		    )
X#endif
X
X		    if (endmask)
X		    {
X			bits1 = BitLeft(bits, leftShift);
X			if (BitLeft(endmask, rightShift))
X			{
X			    bits = *psrc;
X			    bits1 |= BitRight(bits, rightShift);
X			}
X			*pdst = MROP_MASK (bits1, *pdst, endmask);
X		    }
X		}
X	    }
X#endif /* DO_UNALIGNED_BITBLT */
X	}
X	else	/* xdir == -1 */
X	{
X	    xoffSrc = (pptSrc->x + w - 1) & PIM;
X	    xoffDst = (pbox->x2 - 1) & PIM;
X	    pdstLine += ((pbox->x2-1) >> PWSH) + 1;
X	    psrcLine += ((pptSrc->x+w - 1) >> PWSH) + 1;
X#ifdef DO_UNALIGNED_BITBLT
X	    nl = xoffSrc - xoffDst;
X	    psrcLine = (unsigned long *)
X			(((unsigned char *) psrcLine) + nl);
X#else
X	    if (xoffSrc == xoffDst)
X#endif
X	    {
X		while (h--)
X		{
X		    psrc = psrcLine;
X		    pdst = pdstLine;
X		    pdstLine += widthDst;
X		    psrcLine += widthSrc;
X		    if (endmask)
X		    {
X			pdst--;
X			psrc--;
X			*pdst = MROP_MASK (*psrc, *pdst, endmask);
X		    }
X		    nl = nlMiddle;
X
X#ifdef LARGE_INSTRUCTION_CACHE
X#ifdef FAST_CONSTANT_OFFSET_MODE
X		    psrc -= nl & (UNROLL - 1);
X		    pdst -= nl & (UNROLL - 1);
X
X#define BodyOdd(n) pdst[n-1] = MROP_SOLID (psrc[n-1], pdst[n-1]);
X
X#define BodyEven(n) BodyOdd(n)
X
X#define LoopReset \
Xpdst -= UNROLL;\
Xpsrc -= UNROLL;
X
X#else
X
X#define BodyOdd(n)  --pdst; --psrc; *pdst = MROP_SOLID(*psrc, *pdst);
X#define BodyEven(n) BodyOdd(n)
X#define LoopReset   ;
X
X#endif
X		    PackedLoop
X
X#undef BodyOdd
X#undef BodyEven
X#undef LoopReset
X
X#else
X		    DuffL(nl,label3,
X			 --pdst; --psrc; *pdst = MROP_SOLID (*psrc, *pdst);)
X#endif
X
X		    if (startmask)
X		    {
X			--pdst;
X			--psrc;
X			*pdst = MROP_MASK(*psrc, *pdst, startmask);
X		    }
X		}
X	    }
X#ifndef DO_UNALIGNED_BITBLT
X	    else
X	    {
X		if (xoffDst > xoffSrc)
X		{
X		    rightShift = (xoffDst - xoffSrc) << (5 - PWSH);
X		    leftShift = 32 - rightShift;
X		}
X		else
X		{
X		    leftShift = (xoffSrc - xoffDst) << (5 - PWSH);
X		    rightShift = 32 - leftShift;
X		}
X		while (h--)
X		{
X		    psrc = psrcLine;
X		    pdst = pdstLine;
X		    pdstLine += widthDst;
X		    psrcLine += widthSrc;
X		    bits = 0;
X		    if (xoffDst > xoffSrc)
X			bits = *--psrc;
X		    if (endmask)
X		    {
X			bits1 = BitRight(bits, rightShift);
X			bits = *--psrc;
X			bits1 |= BitLeft(bits, leftShift);
X			pdst--;
X			*pdst = MROP_MASK(bits1, *pdst, endmask);
X		    }
X		    nl = nlMiddle;
X
X#ifdef LARGE_INSTRUCTION_CACHE
X		    bits1 = bits;
X#ifdef FAST_CONSTANT_OFFSET_MODE
X		    psrc -= nl & (UNROLL - 1);
X		    pdst -= nl & (UNROLL - 1);
X
X#define BodyOdd(n) \
Xbits = psrc[n-1]; \
Xpdst[n-1] = MROP_SOLID(BitRight(bits1, rightShift) | BitLeft(bits, leftShift),pdst[n-1]);
X
X#define BodyEven(n) \
Xbits1 = psrc[n-1]; \
Xpdst[n-1] = MROP_SOLID(BitRight(bits, rightShift) | BitLeft(bits1, leftShift),pdst[n-1]);
X
X#define LoopReset \
Xpdst -= UNROLL; \
Xpsrc -= UNROLL;
X
X#else
X
X#define BodyOdd(n) \
Xbits = *--psrc; --pdst; \
X*pdst = MROP_SOLID(BitRight(bits1, rightShift) | BitLeft(bits, leftShift),*pdst);
X
X#define BodyEven(n) \
Xbits1 = *--psrc; --pdst; \
X*pdst = MROP_SOLID(BitRight(bits, rightShift) | BitLeft(bits1, leftShift),*pdst);
X
X#define LoopReset   ;
X
X#endif
X
X		    PackedLoop
X
X#undef BodyOdd
X#undef BodyEven
X#undef LoopReset
X
X#else
X		    DuffL (nl, label4,
X			bits1 = BitRight(bits, rightShift);
X			bits = *--psrc;
X			--pdst;
X			*pdst = MROP_SOLID(bits1 | BitLeft(bits, leftShift),*pdst);
X		    )
X#endif
X
X		    if (startmask)
X		    {
X			bits1 = BitRight(bits, rightShift);
X			if (BitRight (startmask, leftShift))
X			{
X			    bits = *--psrc;
X			    bits1 |= BitLeft(bits, leftShift);
X			}
X			--pdst;
X			*pdst = MROP_MASK(bits1, *pdst, startmask);
X		    }
X		}
X	    }
X#endif
X	}
X	pbox++;
X	pptSrc++;
X    }
X    if (pboxNew2)
X    {
X	DEALLOCATE_LOCAL(pptNew2);
X	DEALLOCATE_LOCAL(pboxNew2);
X    }
X    if (pboxNew1)
X    {
X	DEALLOCATE_LOCAL(pptNew1);
X	DEALLOCATE_LOCAL(pboxNew1);
X    }
X}
END_OF_FILE
if test 13401 -ne `wc -c <'server/ddx/cfb32/cfbblt.c'`; then
    echo shar: \"'server/ddx/cfb32/cfbblt.c'\" unpacked with wrong size!
fi
# end of 'server/ddx/cfb32/cfbblt.c'
fi
echo shar: End of archive 18 \(of 29\).
cp /dev/null ark18isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 29 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
-- 
Molecular Simulations, Inc.             mail: dcmartin@msi.com
796 N. Pastoria Avenue                  uucp: uunet!dcmartin
Sunnyvale, California 94086             at&t: 408/522-9236
