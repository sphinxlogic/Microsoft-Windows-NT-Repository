Path: uunet!zaphod.mps.ohio-state.edu!mips!msi!dcmartin
From: dcc@Athena.MIT.EDU (David Carver)
Newsgroups: comp.sources.x
Subject: v16i072: Video Extension for X (v2r2), Part21/29
Message-ID: <1992Feb6.145854.904@msi.com>
Date: 6 Feb 92 14:58:54 GMT
References: <csx-16i052-vex.v2r2@uunet.UU.NET>
Sender: dcmartin@msi.com (David C. Martin - Moderator)
Organization: Molecular Simulations, Inc.
Lines: 3858
Approved: dcmartin@msi.com
Originator: dcmartin@fascet

Submitted-by: dcc@Athena.MIT.EDU (David Carver)
Posting-number: Volume 16, Issue 72
Archive-name: vex.v2r2/part21

# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# If this archive is complete, you will see the following message at the end:
#		"End of archive 21 (of 29)."
# Contents:  extensions/xv/doc/xv-lib-v2.PS.ac
#   extensions/xv/doc/xv-lib-v2.PS.ad
#   extensions/xv/doc/xv-lib-v2.PS.af extensions/xv/test/xvt3.c
#   server/ddx/cfb32/cfbtile32.c
# Wrapped by dcmartin@fascet on Thu Feb  6 06:52:49 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'extensions/xv/doc/xv-lib-v2.PS.ac' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'extensions/xv/doc/xv-lib-v2.PS.ac'\"
else
echo shar: Extracting \"'extensions/xv/doc/xv-lib-v2.PS.ac'\" \(10790 characters\)
sed "s/^X//" >'extensions/xv/doc/xv-lib-v2.PS.ac' <<'END_OF_FILE'
X4674(with)S
X4882(detail)S
X720 H
X6240 V
X900(XvBusy)S
X1258(is)S
X1355(generated)S
X1772(for)S
X1918(the)S
X2070(drawable.)S
X720 H
X6408 V
X9 B
X720(Examples)S
X720 H
X7680 V
X10 R
X5350(7)S
X7920 V
XEP
X%%Page: 8 8
XBP
X/slant 0 def
X/height 1.000000 def
X10 R
X10 R
X72 H
X120 V
X72(|--)S
X720 H
X600 V
X12 TB
X720(XvGetStill)S
X1310(\()S
X1370(3X)S
X1537(\))S
X720 H
X1080 V
X10 C
X1150(Example)S
X1630(between)S
X2110(.EX)S
X2350(and)S
X2590(.EE)S
X2830(will)S
X3130(show)S
X3430(in)S
X3610(monospace)S
X720 H
X1308 V
X9 B
X720(Returned)S
X1127(Values)S
X720 H
X1428 V
X10 B
X900([Success])S
X720 H
X1548 V
X10 R
X1300(Returned)S
X1696(if)S
X1787(XvGetStill\(3X\))S
X2439(completed)S
X2885(successfully.)S
X720 H
X1716 V
X10 B
X900([XvBadExtension])S
X720 H
X1836 V
X10 R
X1300(Returned)S
X1696(if)S
X1787(the)S
X1939(Xv)S
X2091(extension)S
X2504(is)S
X2601(unavailable.)S
X720 H
X2004 V
X10 B
X900([XvBadAlloc])S
X720 H
X2124 V
X10 R
X1300(Returned)S
X1696(if)S
X1787(XvGetStill\(3X\))S
X2439(failed)S
X2696(to)S
X2804(allocate)S
X3144(memory)S
X3507(to)S
X3615(process)S
X3944(the)S
X4096(request.)S
X720 H
X2292 V
X9 B
X720(Diagnostics)S
X720 H
X2412 V
X10 B
X900([XvBadPort])S
X720 H
X2532 V
X10 R
X1300(Generated)S
X1739(if)S
X1830(the)S
X1982(requested)S
X2394(port)S
X2585(does)S
X2798(not)S
X2956(exist.)S
X720 H
X2700 V
X10 B
X900([BadDrawable])S
X720 H
X2820 V
X10 R
X1300(Generated)S
X1739(if)S
X1830(the)S
X1982(requested)S
X2394(drawable)S
X2789(does)S
X3002(not)S
X3160(exist.)S
X720 H
X2988 V
X10 B
X900([BadGC])S
X720 H
X3108 V
X10 R
X1300(Generated)S
X1739(if)S
X1830(the)S
X1982(requested)S
X2394(graphics)S
X2762(context)S
X3086(does)S
X3299(not)S
X3457(exist.)S
X720 H
X3276 V
X10 B
X900([BadAlloc])S
X720 H
X3396 V
X10 R
X1300(Generated)S
X1739(if)S
X1830(there)S
X2059(were)S
X2282(insu)S
X2449 H
X	(f)show 10 -.5 mul h (\256)show
X10 R
X2533(cient)S
X2757(resources)S
X3163(to)S
X3271(process)S
X3600(the)S
X3752(request.)S
X720 H
X3564 V
X9 B
X720(See)S
X892(Also)S
X720 H
X3684 V
X10 R
X900(XvPutStill\(3X\),)S
X1567(XvGetVideo\(3X\),)S
X2320(XvPutVideo\(3X\),)S
X3063(XvVideoNotify\(3X\))S
X720 H
X7680 V
X720(8)S
X7920 V
XEP
X%%Page: 9 9
XBP
X/slant 0 def
X/height 1.000000 def
X10 R
X10 R
X72 H
X120 V
X72(|--)S
X720 H
X600 V
X12 HB
X4438(XvGetVideo)S
X5133(\()S
X5193(3X)S
X5360(\))S
X720 H
X1080 V
X9 B
X720(Name)S
X720 H
X1200 V
X10 R
X900(XvGetVideo)S
X1440(\261)S
X1520(capture)S
X1843(video)S
X2095(from)S
X2319(a)S
X2393(drawable)S
X720 H
X1368 V
X9 B
X720(Syntax)S
X720 H
X1488 V
X10 B
X900(include)S
X1242(Xvlib.h)S
X720 H
X1728 V
X900(XvGetVideo\(dpy,)S
X1677(port,)S
X1915(d,)S
X2026(gc,)S
X2175(vx,)S
X2330(vy,)S
X720 H
X1968 V
X900(register)S
X10 I
X1256(Display)S
X1597(*dpy;)S
X720 H
X2088 V
X10 B
X900(XvPortID)S
X10 I
X1351(port;)S
X720 H
X2208 V
X10 B
X900(Drawable)S
X10 I
X1346(d;)S
X720 H
X2328 V
X10 B
X900(GC)S
X10 I
X1080(gc;)S
X720 H
X2448 V
X10 B
X900(int)S
X10 I
X1047(vx,)S
X1190(vy,)S
X1333(dx,)S
X1482(dy;)S
X720 H
X2568 V
X10 R
X900(unsigned)S
X1291(int)S
X10 I
X1427(vw,)S
X1593(vh;)S
X720 H
X2688 V
X10 R
X900(unsigned)S
X1291(int)S
X10 I
X1427(dw,)S
X1599(dh;)S
X720 H
X2976 V
X9 B
X720(Arguments)S
X720 H
X3096 V
X10 I
X900(dpy)S
X10 R
X1650(Speci\256es)S
X2041(the)S
X2193(display)S
X2512(screen)S
X2796(on)S
X2926(which)S
X3200(the)S
X3352(Xv)S
X3504(Server)S
X3794(is)S
X3891(to)S
X3999(accept)S
X4283(requests)S
X4640(from)S
X4864(Xv)S
X5016(clients.)S
X720 H
X3216 V
X1650(If)S
X1746(the)S
X1898(display)S
X2217(option)S
X2503(is)S
X2600(not)S
X2758(speci\256ed,)S
X3168(Xv)S
X3320(uses)S
X3522(the)S
X3674(display)S
X3993(screen)S
X4277(speci\256ed)S
X4662(by)S
X4792(your)S
X720 H
X3336 V
X1650(DISPLAY)S
X2102(environment)S
X2637(variable.)S
X3043(The)S
X3228(display)S
X3547(option)S
X3833(has)S
X3996(the)S
X4148(format)S
X4444(hostname:number.)S
X720 H
X3456 V
X1650(Using)S
X1919(two)S
X2099(colons)S
X2390(\(::\))S
X2542(instead)S
X2855(of)S
X2968(one)S
X3142(\(:\))S
X3266(indicates)S
X3651(that)S
X3831(DECnet)S
X4183(is)S
X4280(to)S
X4388(be)S
X4512(used)S
X4725(for)S
X4871(transport.)S
X720 H
X3624 V
X10 I
X900(port)S
X10 R
X1650(De\256nes)S
X1985(the)S
X2137(port)S
X2328(to)S
X2436(which)S
X2710(video)S
X2962(output)S
X3248(is)S
X3345(sent.)S
X720 H
X3792 V
X10 I
X900(d)S
X10 R
X1650(De\256nes)S
X1985(the)S
X2137(drawable)S
X2532(from)S
X2756(which)S
X3030(video)S
X3282(output)S
X3568(is)S
X3665(to)S
X3773(be)S
X3897(obtained.)S
X720 H
X3960 V
X10 I
X900(gc)S
X10 R
X1650(De\256nes)S
X1985(the)S
X2137(graphical)S
X2538(context.)S
X2917(GC)S
X3086(components)S
X3599(are:)S
X10 I
X3778(subwindow-mode,)S
X4533(clip-x-origin,)S
X5093(clip-y-)S
X720 H
X4080 V
X1650(origin,)S
X10 R
X1950(and)S
X10 I
X2124(clip-mask.)S
X720 H
X4248 V
X900(vx,vy,vw,vh)S
X10 R
X1650(De\256ne)S
X1946(the)S
X2098(location)S
X2450(and)S
X2624(size)S
X2809(of)S
X2922(the)S
X3074(video)S
X3326(region)S
X3611(is)S
X3708(to)S
X3816(be)S
X3940(written.)S
X10 I
X4308(vx)S
X10 R
X4426(and)S
X10 I
X4600(vy)S
X10 R
X4718(de\256ne)S
X4992(the)S
X10 I
X5144(x)S
X5218(and)S
X720 H
X4368 V
X1650(y)S
X10 R
X1724(coordinates)S
X2214(of)S
X2327(the)S
X2479(upper-left)S
X2902(corner)S
X3186(of)S
X3299(the)S
X3451(video)S
X3703(region;)S
X10 I
X4016(vw)S
X4157(and)S
X4337(vh)S
X10 R
X4461(de\256ne)S
X4735(the)S
X4887(width)S
X5145(and)S
X720 H
X4488 V
X1650(height,)S
X1955(in)S
X2063(pixels,)S
X2357(of)S
X2470(the)S
X2622(video)S
X2874(region.)S
X720 H
X4656 V
X10 I
X900(dx,dy,dw,dh)S
X10 R
X1650(De\256ne)S
X1946(the)S
X2098(location)S
X2450(of)S
X2563(the)S
X2715(source)S
X3005(drawable)S
X3400(from)S
X3624(which)S
X3898(the)S
X4050(video)S
X4302(image)S
X4576(is)S
X4673(to)S
X4781(be)S
X4905(taken.)S
X10 I
X5176(dx)S
X720 H
X4776 V
X1650(and)S
X1830(dy)S
X10 R
X1954(de\256ne)S
X2228(the)S
X10 I
X2380(x)S
X2454(and)S
X2634(y)S
X10 R
X2708(coordinates)S
X3198(of)S
X3311(the)S
X3463(upper-left)S
X3886(corner)S
X4170(of)S
X4283(the)S
X4435(drawable)S
X4830(region;)S
X10 I
X5143(dw)S
X720 H
X4896 V
X1650(and)S
X1830(dh)S
X10 R
X1960(de\256ne)S
X2234(the)S
X2386(width)S
X2644(and)S
X2818(height,)S
X3123(in)S
X3231(pixels,)S
X3525(of)S
X3638(the)S
X3790(drawable)S
X4185(region.)S
X720 H
X5064 V
X9 B
X720(Description)S
X720 H
X5184 V
X10 TR
X916(XvGetVideo)S
X10 R
X1498(outputs)S
X1823(video)S
X2075(from)S
X2299(a)S
X2373(drawable.)S
X2823(The)S
X3008(position)S
X3361(and)S
X3535(size)S
X3720(of)S
X3833(the)S
X3985(destination)S
X4454(rectangle)S
X4849(is)S
X4946(speci\256ed)S
X720 H
X5304 V
X900(by)S
X10 I
X1030(vx,)S
X1173(vy,)S
X1316(vw,)S
X10 R
X1482(and)S
X10 I
X1656(vh.)S
X10 R
X1805(The)S
X1990(position)S
X2343(and)S
X2517(size)S
X2702(of)S
X2815(the)S
X2967(source)S
X3257(rectangle)S
X3652(is)S
X3749(speci\256ed)S
X4134(by)S
X10 I
X4264(dx,)S
X4413(dy,)S
X4562(dw,)S
X10 R
X4734(and)S
X10 I
X4908(dh.)S
X720 H
X5472 V
X10 R
X900(Drawable)S
X1317(data)S
X1513(is)S
X1610(clipped)S
X1934(to)S
X2042(the)S
X2194(bounds)S
X2513(of)S
X2626(the)S
X2778(drawable,)S
X3198(scaled)S
X3477(to)S
X3585(the)S
X3737(requested)S
X4149(video)S
X4401(region)S
X4686(size)S
X4871(\(or)S
X5017(the)S
X720 H
X5592 V
X900(closest)S
X1202(size)S
X1387(supported\))S
X1844(and)S
X2018(clipped)S
X2342(to)S
X2450(the)S
X2602(bounds)S
X2921(of)S
X3034(the)S
X3186(video)S
X3438(encoding.)S
X3889(The)S
X4074(contents)S
X4437(of)S
X4550(any)S
X4724(region)S
X5009(not)S
X720 H
X5712 V
X900(updated)S
X1246(with)S
X1454(drawable)S
X1849(data)S
X2045(is)S
X2142(unde\256ned.)S
X720 H
X5880 V
X900(If)S
X996(video)S
X1248(is)S
X1345(successfully)S
X1863(initiated,)S
X2246(an)S
X2370(XvVideoNotify)S
X3027(event)S
X3273(with)S
X3481(detail)S
X3733(XvStarted)S
X4168(is)S
X4265(generated)S
X4682(for)S
X4828(the)S
X4980(drawable.)S
X720 H
X6000 V
X900(If)S
X996(the)S
X1148(port)S
X1339(is)S
X1436(already)S
X1759(in)S
X1867(use,)S
X2055(its)S
X2180(video)S
X2432(is)S
X2529(preempted,)S
X3005(and)S
X3179(if)S
X3270(the)S
X3422(new)S
X3618(drawable)S
X4013(is)S
X4110(di)S
X4188 H
X	(f)show 10 -.5 mul h (f)show
X10 R
X4249(erent)S
X4478(than)S
X4680(the)S
X4832(old,)S
X5015(an)S
X5139(XvVi-)S
X720 H
X6120 V
X900(deoNotify)S
X1335(event)S
X1581(with)S
X1789(detail)S
X2041(XvPreempted)S
X2620(is)S
X2717(generated)S
X3134(for)S
X3280(the)S
X3432(old)S
X3590(drawable.)S
X4040(If)S
X4136(the)S
X4288(port)S
X4479(is)S
X4576(grabbed)S
X4927(by)S
X5057(another)S
X720 H
X6240 V
X900(client,)S
X1177(this)S
X1352(request)S
X1670(is)S
X1767(ignored,)S
X2127(and)S
X2301(an)S
X2425(XvVideoNotify)S
X3082(event)S
X3328(with)S
X3536(detail)S
X3788(XvBusy)S
X4146(is)S
X4243(generated)S
X4660(for)S
X4806(the)S
X4958(drawable.)S
X720 H
X6408 V
X9 B
X720(Examples)S
X720 H
X7680 V
X10 R
X5350(9)S
X7920 V
XEP
X%%Page: 10 10
XBP
X/slant 0 def
X/height 1.000000 def
X10 R
X10 R
X72 H
X120 V
X72(|--)S
X720 H
X600 V
X12 TB
X720(XvGetVideo)S
X1415(\()S
X1475(3X)S
X1642(\))S
X720 H
X1080 V
X10 C
X1150(Example)S
X1630(between)S
X2110(.EX)S
X2350(and)S
X2590(.EE)S
X2830(will)S
X3130(show)S
X3430(in)S
X3610(monospace)S
X720 H
X1308 V
X9 B
X720(Returned)S
X1127(Values)S
X720 H
X1428 V
X10 B
X900([Success])S
X720 H
X1548 V
X10 R
X1300(Returned)S
X1696(if)S
X1787(XvGetVideo\(3X\))S
X2515(completed)S
X2961(successfully.)S
X720 H
X1716 V
X10 B
X900([XvBadExtension])S
X720 H
X1836 V
X10 R
X1300(Returned)S
X1696(if)S
X1787(the)S
X1939(Xv)S
X2091(extension)S
X2504(is)S
X2601(unavailable.)S
X720 H
X2004 V
X10 B
X900([XvBadAlloc])S
X720 H
X2124 V
X10 R
X1300(Returned)S
X1696(if)S
X1787(XvGetVideo\(3X\))S
X2515(failed)S
X2772(to)S
X2880(allocate)S
X3220(memory)S
X3583(to)S
X3691(process)S
X4020(the)S
X4172(request.)S
X720 H
X2292 V
X9 B
X720(Diagnostics)S
X720 H
X2412 V
X10 B
X900([XvBadPort])S
X720 H
X2532 V
X10 R
X1300(Generated)S
X1739(if)S
X1830(the)S
X1982(requested)S
X2394(port)S
X2585(does)S
X2798(not)S
X2956(exist.)S
X720 H
X2700 V
X10 B
X900([BadGC])S
X720 H
X2820 V
X10 R
X1300(Generated)S
X1739(if)S
X1830(the)S
X1982(requested)S
X2394(graphics)S
X2762(context)S
X3086(does)S
X3299(not)S
X3457(exist.)S
X720 H
X2988 V
X10 B
X900([BadDrawable])S
X720 H
X3108 V
X10 R
X1300(Generated)S
X1739(if)S
X1830(the)S
X1982(requested)S
X2394(drawable)S
X2789(does)S
X3002(not)S
X3160(exist.)S
X720 H
X3276 V
X10 B
X900([BadAlloc])S
X720 H
X3396 V
X10 R
X1300(Generated)S
X1739(if)S
X1830(there)S
X2059(were)S
X2282(insu)S
X2449 H
X	(f)show 10 -.5 mul h (\256)show
X10 R
X2533(cient)S
X2757(resources)S
X3163(to)S
X3271(process)S
X3600(the)S
X3752(request.)S
X720 H
X3564 V
X9 B
X720(See)S
X892(Also)S
X720 H
X3684 V
X10 R
X900(XvGetStill\(3X\),)S
X1577(XvPutVideo\(3X\),)S
X2320(XvVideoNotify\(3X\))S
X720 H
X7680 V
X720(10)S
X7920 V
XEP
X%%Page: 11 11
XBP
X/slant 0 def
X/height 1.000000 def
X10 R
X10 R
X72 H
X120 V
X72(|--)S
X720 H
X600 V
X12 HB
X4445(XvGrabPort)S
X5133(\()S
X5193(3X)S
X5360(\))S
X720 H
X1080 V
X9 B
X720(Name)S
X720 H
X1200 V
X10 R
X900(XvGrabPort)S
X1418(\261)S
X1498(lock)S
X1700(port)S
X1891(for)S
X2037(exclusive)S
X2444(use)S
X2607(by)S
X2737(client)S
X720 H
X1368 V
X9 B
X720(Syntax)S
X720 H
X1488 V
X10 B
X900(#include)S
X1292(<X11/extensions/Xvlib.h>)S
X720 H
X1728 V
X900(XvGrabPort\()S
X10 I
X1471(dpy,)S
X1670(port,)S
X1892(time\))S
X720 H
X1968 V
X10 B
X900(Display)S
X10 I
X1253(*dpy;)S
X720 H
X2088 V
X10 B
X900(XvPortID)S
X10 I
X1351(port;)S
X720 H
X2208 V
X10 B
X900(Time)S
X10 I
X1152(time;)S
X720 H
X2376 V
X9 B
X720(Arguments)S
X720 H
X2496 V
X10 I
X900(dpy)S
X10 R
X1300(Speci\256es)S
X1691(the)S
X1843(display)S
X2162(screen)S
X2446(on)S
X2576(which)S
X2850(the)S
X3002(Xv)S
X3154(Server)S
X3444(is)S
X3541(to)S
X3649(accept)S
X3933(requests)S
X4290(from)S
X4514(Xv)S
X4666(clients.)S
X5012(If)S
X5108(the)S
X720 H
X2616 V
X1300(display)S
X1619(option)S
X1905(is)S
X2002(not)S
X2160(speci\256ed,)S
X2570(Xv)S
X2722(uses)S
X2924(the)S
X3076(display)S
X3395(screen)S
X3679(speci\256ed)S
END_OF_FILE
if test 10790 -ne `wc -c <'extensions/xv/doc/xv-lib-v2.PS.ac'`; then
    echo shar: \"'extensions/xv/doc/xv-lib-v2.PS.ac'\" unpacked with wrong size!
fi
# end of 'extensions/xv/doc/xv-lib-v2.PS.ac'
fi
if test -f 'extensions/xv/doc/xv-lib-v2.PS.ad' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'extensions/xv/doc/xv-lib-v2.PS.ad'\"
else
echo shar: Extracting \"'extensions/xv/doc/xv-lib-v2.PS.ad'\" \(10969 characters\)
sed "s/^X//" >'extensions/xv/doc/xv-lib-v2.PS.ad' <<'END_OF_FILE'
X4064(by)S
X4194(your)S
X4407(DISPLAY)S
X4859(environment)S
X720 H
X2736 V
X1300(variable.)S
X1706(The)S
X1891(display)S
X2210(option)S
X2496(has)S
X2659(the)S
X2811(format)S
X3107(hostname:number.)S
X3908(Using)S
X4177(two)S
X4357(colons)S
X4648(\(::\))S
X4800(instead)S
X5113(of)S
X5226(one)S
X720 H
X2856 V
X1300(\(:\))S
X1424(indicates)S
X1809(that)S
X1989(DECnet)S
X2341(is)S
X2438(to)S
X2546(be)S
X2670(used)S
X2883(for)S
X3029(transport.)S
X720 H
X3024 V
X10 I
X900(port)S
X10 R
X1300(De\256nes)S
X1635(the)S
X1787(port)S
X1978(to)S
X2086(be)S
X2210(grabbed.)S
X720 H
X3192 V
X10 I
X900(time)S
X10 R
X1300(Speci\256es)S
X1691(the)S
X1843(request)S
X2161(timestamp.)S
X720 H
X3360 V
X9 B
X720(Description)S
X720 H
X3480 V
X10 R
X900(XvGrabPort\(3X\))S
X1606(grabs)S
X1852(a)S
X1926(port.)S
X2172(Once)S
X2412(a)S
X2486(client)S
X2738(grabs)S
X2984(a)S
X3058(port,)S
X3274(only)S
X3482(that)S
X3662(client)S
X3914(can)S
X4082(make)S
X4328(video)S
X4580(requests)S
X4937(to)S
X5045(that)S
X720 H
X3600 V
X900(port.)S
X720 H
X3768 V
X900(If)S
X996(the)S
X1148(time)S
X1356(is)S
X1453(before)S
X1737(the)S
X1889(current)S
X2201(port)S
X2392(time,)S
X2625(the)S
X2777(XvGrabPort)S
X3295(request)S
X3613(is)S
X3710(ignored)S
X4045(and)S
X4219(XvInvalidTime)S
X4865(is)S
X4962(returned.)S
X720 H
X3888 V
X900(If)S
X996(the)S
X1148(port)S
X1339(is)S
X1436(already)S
X1759(grabbed)S
X2110(by)S
X2240(another)S
X2569(client,)S
X2846(XvAlreadyGrabbed)S
X3662(is)S
X3759(returned.)S
X4146(Otherwise)S
X4586(a)S
X4660(it)S
X4746(returns)S
X5053(a)S
X5127(status)S
X720 H
X4008 V
X900(of)S
X10 I
X1013(Success)S
X10 R
X1323(.)S
X1408(The)S
X1593(port)S
X1784(time)S
X1992(is)S
X2089(updated)S
X2435(when)S
X2681(the)S
X2833(following)S
X3252(requests)S
X3609(are)S
X3760(processed:)S
X4211(XvGrabPort\(3X\),)S
X720 H
X4128 V
X900(XvUngrabPort\(3X\),)S
X1731(XvPutVideo\(3X\),)S
X2474(XvPutStill\(3X\),)S
X3141(XvGetVideo\(3X\),)S
X3894(XvGetStill\(3X\).)S
X720 H
X4296 V
X900(If)S
X996(the)S
X1148(port)S
X1339(is)S
X1436(actively)S
X1782(processing)S
X2239(video)S
X2491(for)S
X2637(another)S
X2966(client,)S
X3243(the)S
X3395(video)S
X3647(is)S
X3744(preempted,)S
X4220(and)S
X4394(an)S
X4518(XvVideoNotify)S
X5175(event)S
X720 H
X4416 V
X900(with)S
X1108(detail)S
X1360(XvPreempted)S
X1939(is)S
X2036(generated)S
X2453(for)S
X2599(its)S
X2724(drawable.)S
X720 H
X4584 V
X9 B
X720(Examples)S
X720 H
X4704 V
X10 C
X1150(Example)S
X1630(between)S
X2110(.EX)S
X2350(and)S
X2590(.EE)S
X2830(will)S
X3130(show)S
X3430(in)S
X3610(monospace)S
X720 H
X4932 V
X9 B
X720(Returned)S
X1127(Values)S
X720 H
X5052 V
X10 B
X900([Success])S
X720 H
X5172 V
X10 R
X1300(Returned)S
X1696(if)S
X1787(XvGrabPort\(3X\))S
X2493(completed)S
X2939(successfully.)S
X720 H
X5340 V
X10 B
X900([XvInvalidTime])S
X720 H
X5460 V
X10 R
X1300(Returned)S
X1696(if)S
X1787(requested)S
X2199(time)S
X2407(is)S
X2504(older)S
X2739(than)S
X2941(the)S
X3093(current)S
X3405(port)S
X3596(time.)S
X720 H
X5628 V
X10 B
X900([XvAlreadyGrabbed])S
X720 H
X5748 V
X10 R
X1300(Returned)S
X1696(if)S
X1787(the)S
X1939(port)S
X2130(is)S
X2227(already)S
X2550(grabbed)S
X2901(by)S
X3031(another)S
X3360(client.)S
X720 H
X5916 V
X10 B
X900([XvBadExtension])S
X720 H
X6036 V
X10 R
X1300(Returned)S
X1696(if)S
X1787(the)S
X1939(Xv)S
X2091(extension)S
X2504(is)S
X2601(unavailable.)S
X720 H
X6204 V
X10 B
X900([XvBadAlloc])S
X720 H
X6324 V
X10 R
X1300(Returned)S
X1696(if)S
X1787(XvGrabPort\(3X\))S
X2493(failed)S
X2750(to)S
X2858(allocate)S
X3198(memory)S
X3561(to)S
X3669(process)S
X3998(the)S
X4150(request.)S
X720 H
X6492 V
X9 B
X720(Diagnostics)S
X720 H
X6612 V
X10 B
X900([XvBadPort])S
X10 R
X1650(Generated)S
X2089(if)S
X2180(the)S
X2332(requested)S
X2744(port)S
X2935(does)S
X3148(not)S
X3306(exist.)S
X720 H
X6780 V
X9 B
X720(See)S
X892(Also)S
X720 H
X6900 V
X10 R
X900(XvUngrabPort\(3X\))S
X1706(XvVideoNotify\(3X\))S
X720 H
X7680 V
X5300(11)S
X7920 V
XEP
X%%Page: 12 12
XBP
X/slant 0 def
X/height 1.000000 def
X10 R
X10 R
X72 H
X120 V
X72(|--)S
X720 H
X600 V
X12 HB
X720(XvPortNotify)S
X1467(\()S
X1527(3X)S
X1694(\))S
X720 H
X1080 V
X9 B
X720(Name)S
X720 H
X1200 V
X10 R
X900(XvPortNotify)S
X1480(\261)S
X1560(event)S
X1806(generated)S
X2223(when)S
X2469(port)S
X2660(attributes)S
X3062(change)S
X720 H
X1368 V
X9 B
X720(Syntax)S
X720 H
X1488 V
X10 B
X900(#include)S
X1292(<X11/extensions/Xvlib.h>)S
X720 H
X1908 V
X10 C
X1450(typedef)S
X1930(union)S
X2290({)S
X720 H
X2028 V
X1570(int)S
X1810(type;)S
X720 H
X2148 V
X1570(XvVideoNotifyEvent)S
X2710(xvvideo;)S
X720 H
X2268 V
X1570(XvPortNotifyEvent)S
X2650(xvport;)S
X720 H
X2388 V
X1450(})S
X1570(XvEvent;)S
X720 H
X2628 V
X1450(typedef)S
X1930(struct)S
X2350({)S
X720 H
X2748 V
X1570(int)S
X1810(type;)S
X720 H
X2868 V
X1570(unsigned)S
X2110(long)S
X2410(serial;)S
X720 H
X2988 V
X1570(Bool)S
X1870(send_event;)S
X720 H
X3108 V
X1570(Display)S
X2050(*display;)S
X720 H
X3228 V
X1570(XvPortID)S
X2110(port_id;)S
X720 H
X3348 V
X1570(Time)S
X1870(time;)S
X720 H
X3468 V
X1570(Atom)S
X1870(attribute;)S
X720 H
X3588 V
X1570(long)S
X1870(value;)S
X720 H
X3708 V
X1450(})S
X1570(XvPortNotifyEvent;)S
X720 H
X4056 V
X10 I
X900(type)S
X10 R
X1300(Speci\256es)S
X1691(the)S
X1843(type)S
X2045(of)S
X2158(event:)S
X2432(XvPortNotify.)S
X720 H
X4224 V
X10 I
X900(serial)S
X10 R
X1300(Number)S
X1657(of)S
X1770(the)S
X1922(last)S
X2091(request)S
X2409(processed)S
X2832(by)S
X2962(the)S
X3114(server.)S
X720 H
X4392 V
X10 I
X900(send_event)S
X720 H
X4512 V
X10 R
X1300(True)S
X1518(if)S
X1609(the)S
X1761(event)S
X2007(was)S
X2192(generated)S
X2609(by)S
X2739(a)S
X2813(SendEvent)S
X3276(request.)S
X720 H
X4680 V
X10 I
X900(display)S
X10 R
X1300(A)S
X1402(pointer)S
X1715(to)S
X1823(the)S
X1975(display)S
X2294(the)S
X2446(event)S
X2692(was)S
X2877(read)S
X3078(from.)S
X720 H
X4848 V
X10 I
X900(port_id)S
X10 R
X1300(The)S
X1485(port)S
X1676(whose)S
X1961(attribute)S
X2324(has)S
X2487(changed.)S
X720 H
X5016 V
X10 I
X900(attribute)S
X10 R
X1300(An)S
X1452(atom)S
X1682(specifying)S
X2128(the)S
X2280(attribute)S
X2643(that)S
X2823(changed.)S
X720 H
X5184 V
X10 I
X900(value)S
X10 R
X1300(The)S
X1485(new)S
X1681(value)S
X1927(of)S
X2040(the)S
X2192(attribute.)S
X720 H
X5352 V
X9 B
X720(Description)S
X720 H
X5472 V
X10 R
X900(XvPortNotify)S
X1480(events)S
X1765(are)S
X1916(generated)S
X2333(when)S
X2579(a)S
X2653(port)S
X2844(attribute)S
X3207(is)S
X3304(set)S
X3445(using)S
X3692(the)S
X3844(XvSetPortAttribute\(3X\))S
X4840(function.)S
X720 H
X5640 V
X9 B
X720(Examples)S
X720 H
X5760 V
X10 C
X1150(Example)S
X1630(between)S
X2110(.EX)S
X2350(and)S
X2590(.EE)S
X2830(will)S
X3130(show)S
X3430(in)S
X3610(monospace)S
X720 H
X5988 V
X9 B
X720(See)S
X892(Also)S
X720 H
X6108 V
X10 R
X900(XvSetPortAttribute\(3X\),)S
X1921(XvGetPortAttribute\(3X\),)S
X2958(XvSelectPortNotify\(3X\))S
X720 H
X7680 V
X720(12)S
X7920 V
XEP
X%%Page: 13 13
XBP
X/slant 0 def
X/height 1.000000 def
X10 R
X10 R
X72 H
X120 V
X72(|--)S
X720 H
X600 V
X12 HB
X4551(XvPutStill)S
X5133(\()S
X5193(3X)S
X5360(\))S
X720 H
X1080 V
X9 B
X720(Name)S
X720 H
X1200 V
X10 R
X900(XvPutStill)S
X1354(\261)S
X1434(write)S
X1669(a)S
X1743(single)S
X2012(frame)S
X2274(of)S
X2387(video)S
X2639(to)S
X2747(a)S
X2821(drawable)S
X720 H
X1368 V
X9 B
X720(Syntax)S
X720 H
X1488 V
X10 B
X900(#include)S
X1292(<X11/extensions/Xvlib.h>)S
X720 H
X1728 V
X900(XvPutStill\()S
X10 I
X1378(dpy,)S
X1577(port,)S
X1799(d,)S
X1904(gc,)S
X2053(vx,)S
X2196(vy,)S
X2339(vw,)S
X2505(vh,)S
X2654(dx,)S
X2803(dy,)S
X2952(dw,)S
X3124(dh)S
X10 R
X3224(\))S
X720 H
X1968 V
X10 B
X900(Display)S
X10 I
X1253(*dpy;)S
X720 H
X2088 V
X10 B
X900(XvPortID)S
X10 I
X1351(port;)S
X720 H
X2208 V
X10 B
X900(Drawable)S
X10 I
X1346(d;)S
X720 H
X2328 V
X10 B
X900(GC)S
X10 I
X1080(gc;)S
X720 H
X2448 V
X10 B
X900(int)S
X10 I
X1047(vx,)S
X1190(vy,)S
X1333(dx,)S
X1482(dy;)S
X720 H
X2568 V
X10 B
X900(unsigned)S
X1315(int)S
X10 I
X1462(vw,)S
X1628(vh;)S
X720 H
X2688 V
X10 B
X900(unsigned)S
X1315(int)S
X10 I
X1462(dw,)S
X1634(dh;)S
X720 H
X2976 V
X9 B
X720(Arguments)S
X720 H
X3096 V
X10 I
X900(dpy)S
X10 R
X1650(Speci\256es)S
X2041(the)S
X2193(display)S
X2512(screen)S
X2796(on)S
X2926(which)S
X3200(the)S
X3352(Xv)S
X3504(Server)S
X3794(is)S
X3891(to)S
X3999(accept)S
X4283(requests)S
X4640(from)S
X4864(Xv)S
X5016(clients.)S
X720 H
X3216 V
X1650(If)S
X1746(the)S
X1898(display)S
X2217(option)S
X2503(is)S
X2600(not)S
X2758(speci\256ed,)S
X3168(Xv)S
X3320(uses)S
X3522(the)S
X3674(display)S
X3993(screen)S
X4277(speci\256ed)S
X4662(by)S
X4792(your)S
X720 H
X3336 V
X1650(DISPLAY)S
X2102(environment)S
X2637(variable.)S
X3043(The)S
X3228(display)S
X3547(option)S
X3833(has)S
X3996(the)S
X4148(format)S
X4444(hostname:number.)S
X720 H
X3456 V
X1650(Using)S
X1919(two)S
X2099(colons)S
X2390(\(::\))S
X2542(instead)S
X2855(of)S
X2968(one)S
X3142(\(:\))S
X3266(indicates)S
X3651(that)S
X3831(DECnet)S
X4183(is)S
X4280(to)S
X4388(be)S
X4512(used)S
X4725(for)S
X4871(transport.)S
X720 H
X3624 V
X10 I
X900(port)S
X10 R
X1650(De\256nes)S
X1985(the)S
X2137(port)S
X2328(from)S
X2552(which)S
X2826(to)S
X2934(get)S
X3086(the)S
X3238(still.)S
X720 H
X3792 V
X10 I
X900(d)S
X10 R
X1650(De\256nes)S
X1985(the)S
X2137(drawable)S
X2532(into)S
X2718(which)S
X2992(the)S
X3144(still)S
X3325(is)S
X3422(to)S
X3530(be)S
X3654(written.)S
X720 H
X3960 V
X10 I
X900(gc)S
X10 R
X1650(De\256nes)S
X1985(the)S
X2137(graphical)S
X2538(context.)S
X2887(GC)S
X3056(components)S
X3569(are:)S
X10 I
X3748(subwindow-mode,)S
X4503(clip-x-origin,)S
X5063(clip-y-)S
X720 H
X4080 V
X1650(origin,)S
X10 R
X1950(and)S
X10 I
X2124(clip-mask.)S
X720 H
X4248 V
X900(vx,vy,vw,vh)S
X10 R
X1650(De\256ne)S
X1946(the)S
X2098(location)S
X2450(and)S
X2624(size)S
X2809(of)S
X2922(the)S
X3074(video)S
X3326(region)S
X3611(to)S
X3719(be)S
X3843(written.)S
X10 I
X4211(vx)S
X10 R
X4329(and)S
X10 I
X4503(vy)S
X10 R
X4621(de\256ne)S
X4895(the)S
X5047(upper-)S
X720 H
X4368 V
X1650(left)S
X1813(pixel)S
X2043(of)S
X2156(the)S
X2308(region.)S
X10 I
X2618(vw)S
X10 R
X2759(and)S
X10 I
X2933(vh)S
X10 R
X3057(de\256ne)S
X3331(the)S
X3483(width)S
X3741(and)S
X3915(height,)S
X4220(in)S
X4328(pixels,)S
X4622(of)S
X4735(the)S
X4887(region.)S
X720 H
X4536 V
X10 I
X900(dx,dy,dw,dh)S
X10 R
X1650(De\256ne)S
X1946(the)S
X2098(location)S
X2450(and)S
X2624(size)S
X2809(of)S
X2922(the)S
X3074(destination)S
X3543(region)S
X3828(into)S
X4014(which)S
X4288(the)S
X4440(still)S
X4621(image)S
X4895(is)S
X4992(written.)S
X720 H
X4656 V
X10 I
X1650(dx)S
X10 R
X1774(and)S
X10 I
X1948(dy)S
X10 R
X2072(de\256ne)S
X2346(the)S
X2498(upper-left)S
X2921(corner)S
X3205(of)S
X3318(the)S
X3470(region.)S
X10 I
X3780(dw)S
X10 R
X3927(and)S
X10 I
X4101(dh)S
X10 R
X4231(de\256ne)S
X4505(the)S
X4657(width)S
X4915(and)S
X5089(height,)S
X720 H
X4776 V
X1650(in)S
X1758(pixels,)S
X2052(of)S
X2165(the)S
X2317(region.)S
X720 H
X4944 V
X9 B
X720(Description)S
X720 H
X5064 V
X10 R
X900(XvPutStill\(3X\))S
X1542(writes)S
X1816(a)S
X1890(single)S
X2159(frame)S
X2421(of)S
X2534(video)S
X2786(to)S
X2894(a)S
X2968(drawable.)S
X3388(The)S
X3573(position)S
X3926(and)S
X4100(size)S
X4285(of)S
X4398(the)S
X4550(source)S
X4840(\(video\))S
X5158(rec-)S
X720 H
X5184 V
X900(tangle)S
X1174(is)S
X1271(speci\256ed)S
X1656(by)S
X10 I
X1786(vx,)S
X1929(vy,)S
X2072(vw)S
X10 R
X2183(,)S
X2238(and)S
X10 I
X2412(vh)S
X10 R
X2506(.)S
X2591(The)S
X2776(position)S
X3129(and)S
X3303(size)S
X3488(of)S
X3601(the)S
X3753(destination)S
X4222(\(drawable\))S
X4683(rectangle)S
X5078(is)S
X720 H
X5304 V
X900(speci\256ed)S
X1285(by)S
X10 I
X1415(dx,)S
X1564(dy,)S
X1713(dw)S
X10 R
X1830(,)S
X1885(and)S
X10 I
X2059(dh)S
X10 R
X2159(.)S
X720 H
X5472 V
X900(Video)S
X1174(data)S
X1370(is)S
X1467(clipped)S
X1791(to)S
X1899(the)S
X2051(bounds)S
X2370(of)S
X2483(the)S
X2635(video)S
X2887(encoding,)S
X3308(scaled)S
X3587(to)S
X3695(the)S
X3847(requested)S
X4259(drawable)S
X4654(region)S
X4939(size)S
X5124(\(or)S
X5270(the)S
X720 H
X5592 V
X900(closest)S
X1202(size)S
X1387(supported\))S
X1844(and)S
X2018(clipped)S
X2342(to)S
X2450(the)S
X2602(bounds)S
END_OF_FILE
if test 10969 -ne `wc -c <'extensions/xv/doc/xv-lib-v2.PS.ad'`; then
    echo shar: \"'extensions/xv/doc/xv-lib-v2.PS.ad'\" unpacked with wrong size!
fi
# end of 'extensions/xv/doc/xv-lib-v2.PS.ad'
fi
if test -f 'extensions/xv/doc/xv-lib-v2.PS.af' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'extensions/xv/doc/xv-lib-v2.PS.af'\"
else
echo shar: Extracting \"'extensions/xv/doc/xv-lib-v2.PS.af'\" \(10918 characters\)
sed "s/^X//" >'extensions/xv/doc/xv-lib-v2.PS.af' <<'END_OF_FILE'
X2364(;)S
X720 H
X2496 V
X9 B
X720(Arguments)S
X720 H
X2616 V
X10 I
X900(dpy)S
X10 R
X1300(Speci\256es)S
X1691(the)S
X1843(display)S
X2162(screen)S
X2446(on)S
X2576(which)S
X2850(the)S
X3002(Xv)S
X3154(Server)S
X3444(is)S
X3541(to)S
X3649(accept)S
X3933(requests)S
X4290(from)S
X4514(Xv)S
X4666(clients.)S
X5012(If)S
X5108(the)S
X720 H
X2736 V
X1300(display)S
X1619(option)S
X1905(is)S
X2002(not)S
X2160(speci\256ed,)S
X2570(Xv)S
X2722(uses)S
X2924(the)S
X3076(display)S
X3395(screen)S
X3679(speci\256ed)S
X4064(by)S
X4194(your)S
X4407(DISPLAY)S
X4859(environment)S
X720 H
X2856 V
X1300(variable.)S
X1706(The)S
X1891(display)S
X2210(option)S
X2496(has)S
X2659(the)S
X2811(format)S
X3107(hostname:number.)S
X3908(Using)S
X4177(two)S
X4357(colons)S
X4648(\(::\))S
X4800(instead)S
X5113(of)S
X5226(one)S
X720 H
X2976 V
X1300(\(:\))S
X1424(indicates)S
X1809(that)S
X1989(DECnet)S
X2341(is)S
X2438(to)S
X2546(be)S
X2670(used)S
X2883(for)S
X3029(transport.)S
X720 H
X3144 V
X10 I
X900(draw)S
X10 R
X1300(Speci\256es)S
X1691(a)S
X1765(drawable)S
X2160(of)S
X2273(the)S
X2425(screen)S
X2709(for)S
X2855(which)S
X3129(the)S
X3281(adaptor)S
X3610(information)S
X4112(is)S
X4209(desired.)S
X720 H
X3312 V
X10 I
X900(p_num_adaptors)S
X720 H
X3432 V
X10 R
X1300(A)S
X1402(pointer)S
X1715(to)S
X1823(where)S
X2096(the)S
X2248(numer)S
X2533(of)S
X2646(adaptors)S
X3014(for)S
X3160(the)S
X3312(speci\256ed)S
X3697(screen)S
X3981(is)S
X4078(returned.)S
X720 H
X3600 V
X10 I
X900(pp_adaptor_info)S
X720 H
X3720 V
X10 R
X1300(A)S
X1402(pointer)S
X1715(to)S
X1823(where)S
X2096(the)S
X2248(list)S
X2401(of)S
X2514(returned)S
X2876(adaptor)S
X3205(information)S
X3707(is)S
X3804(returned.)S
X720 H
X3888 V
X9 B
X720(Description)S
X720 H
X4008 V
X10 R
X900(XvQueryAdaptors\(3X\))S
X1855(returns)S
X2162(an)S
X2286(video)S
X2538(adaptor)S
X2867(information)S
X3369(for)S
X3515(the)S
X3667(screen)S
X3951(of)S
X4064(the)S
X4216(speci\256ed)S
X4601(drawable.)S
X5051(The)S
X720 H
X4128 V
X900(XvAdaptorInfo)S
X1545(structure)S
X1924(has)S
X2087(the)S
X2239(following)S
X2658(organization:)S
X720 H
X4428 V
X10 C
X1450(typedef)S
X1930(struct)S
X2350({)S
X720 H
X4548 V
X1570(XvPortID)S
X2110(base_id;)S
X720 H
X4668 V
X1570(unsigned)S
X2110(long)S
X2410(num_ports;)S
X720 H
X4788 V
X1570(char)S
X1870(type;)S
X720 H
X4908 V
X1570(char)S
X1870(*name;)S
X720 H
X5028 V
X1570(unsigned)S
X2110(long)S
X2410(num_formats;)S
X720 H
X5148 V
X1570(XvFormat)S
X2110(*formats;)S
X720 H
X5268 V
X1450(})S
X1570(XvAdaptorInfo;)S
X720 H
X5616 V
X10 I
X900(base_id)S
X10 R
X1300(The)S
X1485(resource)S
X1852(ID)S
X1987(of)S
X2100(the)S
X2252(\256rst)S
X2438(adaptor)S
X2767(port.)S
X720 H
X5784 V
X10 I
X900(num_ports)S
X720 H
X5904 V
X10 R
X1300(The)S
X1485(number)S
X1820(of)S
X1933(ports)S
X2163(supported)S
X2587(by)S
X2717(the)S
X2869(adaptor.)S
X720 H
X6072 V
X10 I
X900(type)S
X10 R
X1300(A)S
X1402(bit)S
X1538(mask)S
X1779(with)S
X1987(the)S
X2139(value)S
X2385(XvInputMask)S
X2970(asserted)S
X3321(if)S
X3412(the)S
X3564(adaptor)S
X3893(supports)S
X4262(video)S
X4514(input,)S
X4775(and)S
X4949(value)S
X720 H
X6192 V
X1300(XvOutputMask)S
X1952(asserted)S
X2303(if)S
X2394(the)S
X2546(adaptor)S
X2875(supports)S
X3244(video)S
X3496(output.)S
X720 H
X6360 V
X10 I
X900(name)S
X10 R
X1300(A)S
X1402(vendor)S
X1709(speci\256c)S
X2044(name)S
X2290(that)S
X2470(identi\256es)S
X2867(the)S
X3019(adaptor.)S
X720 H
X6528 V
X10 I
X900(num_formats)S
X720 H
X6648 V
X10 R
X1300(The)S
X1485(number)S
X1820(of)S
X1933(depth/visual)S
X2452(id)S
X2560(formats)S
X2895(supported)S
X3319(by)S
X3449(the)S
X3601(adaptor.)S
X720 H
X6816 V
X10 I
X900(formats)S
X10 R
X1300(A)S
X1402(pointer)S
X1715(to)S
X1823(an)S
X1947(array)S
X2181(of)S
X2294(XvFormat)S
X2735(structures.)S
X720 H
X6984 V
X900(The)S
X1085(XvFormat)S
X1526(structure)S
X1905(has)S
X2068(the)S
X2220(following)S
X2639(organization:)S
X720 H
X7680 V
X5300(17)S
X7920 V
XEP
X%%Page: 18 18
XBP
X/slant 0 def
X/height 1.000000 def
X10 R
X10 R
X72 H
X120 V
X72(|--)S
X720 H
X600 V
X12 HB
X720(XvQueryAdaptors)S
X1761(\()S
X1821(3X)S
X1988(\))S
X720 H
X1080 V
X10 C
X1450(typedef)S
X1930(struct)S
X2350({)S
X720 H
X1200 V
X1570(char)S
X1870(depth;)S
X720 H
X1320 V
X1570(unsigned)S
X2110(long)S
X2410(visual_id;)S
X720 H
X1440 V
X1450(})S
X1570(XvFormat;)S
X720 H
X1788 V
X10 I
X900(depth)S
X10 R
X1300(A)S
X1402(drawable)S
X1797(depth)S
X2049(supported)S
X2473(by)S
X2603(the)S
X2755(adaptor.)S
X720 H
X1956 V
X10 I
X900(visual_id)S
X10 R
X1300(A)S
X1402(visual-id)S
X1782(supported)S
X2206(for)S
X2352(the)S
X2504(given)S
X2756(depth)S
X3008(by)S
X3138(the)S
X3290(adaptor.)S
X720 H
X2124 V
X9 B
X720(Examples)S
X720 H
X2244 V
X10 C
X1150(Example)S
X1630(between)S
X2110(.EX)S
X2350(and)S
X2590(.EE)S
X2830(will)S
X3130(show)S
X3430(in)S
X3610(monospace)S
X720 H
X2472 V
X9 B
X720(Returned)S
X1127(Values)S
X720 H
X2592 V
X10 B
X900([Success])S
X720 H
X2712 V
X10 R
X1300(Returns)S
X1641(True)S
X1859(if)S
X1950(XvQueryAdaptors\(3X\))S
X2905(completed)S
X3351(successfully.)S
X720 H
X2880 V
X10 B
X900([XvBadExtension])S
X720 H
X3000 V
X10 R
X1300(Returned)S
X1696(if)S
X1787(the)S
X1939(Xv)S
X2091(extension)S
X2504(is)S
X2601(unavailable.)S
X720 H
X3168 V
X10 B
X900([XvBadAlloc])S
X720 H
X3288 V
X10 R
X1300(Returned)S
X1696(if)S
X1787(XvQueryAdaptors\(3X\))S
X2742(failed)S
X2999(to)S
X3107(allocate)S
X3447(memory)S
X3810(to)S
X3918(process)S
X4247(the)S
X4399(request.)S
X720 H
X3456 V
X9 B
X720(Diagnostics)S
X720 H
X3576 V
X10 B
X900([Drawable])S
X720 H
X3696 V
X10 R
X1300(Returned)S
X1696(if)S
X1787(the)S
X1939(requested)S
X2351(drawable)S
X2746(does)S
X2959(not)S
X3117(exist.)S
X720 H
X3864 V
X9 B
X720(See)S
X892(Also)S
X720 H
X3984 V
X10 R
X900(XvFreeAdaptorInfo\(3X\))S
X720 H
X7680 V
X720(18)S
X7920 V
XEP
X%%Page: 19 19
XBP
X/slant 0 def
X/height 1.000000 def
X10 R
X10 R
X72 H
X120 V
X72(|--)S
X720 H
X600 V
X12 HB
X4117(XvQueryBestSize)S
X5133(\()S
X5193(3X)S
X5360(\))S
X720 H
X1080 V
X9 B
X720(Name)S
X720 H
X1200 V
X10 R
X900(XvQueryBestSize)S
X1651(\261)S
X1731(determine)S
X2160(the)S
X2312(optimum)S
X2704(drawable)S
X3099(region)S
X3384(size)S
X720 H
X1368 V
X9 B
X720(Syntax)S
X720 H
X1488 V
X10 B
X900(#include)S
X1292(<X11/extensions/Xvlib.h>)S
X720 H
X1728 V
X900(XvQueryBestSize)S
X10 R
X1649(\()S
X10 I
X1682(dpy,)S
X1881(port,)S
X2103(motion,)S
X2436(vw,)S
X2602(vh,)S
X2751(dw,)S
X2923(dh,)S
X3078(p_dw,)S
X3350(p_dh)S
X10 R
X3550(\))S
X720 H
X1968 V
X10 B
X900(Display)S
X10 I
X1253(*dpy)S
X10 R
X1447(;)S
X720 H
X2088 V
X10 B
X900(XvPortID)S
X10 I
X1351(port)S
X10 R
X1518(;)S
X720 H
X2208 V
X10 B
X900(Bool)S
X10 I
X1125(motion)S
X10 R
X1403(;)S
X720 H
X2328 V
X10 B
X900(unsigned)S
X1315(int)S
X10 I
X1462(vw,)S
X1628(vh)S
X10 R
X1722(;)S
X720 H
X2448 V
X10 B
X900(unsigned)S
X1315(int)S
X10 I
X1462(dw,)S
X1634(dh;)S
X720 H
X2568 V
X10 B
X900(unsigned)S
X1315(int)S
X10 I
X1462(*p_dw,)S
X1784(*p_dh;)S
X720 H
X2736 V
X9 B
X720(Arguments)S
X720 H
X2856 V
X10 I
X900(dpy)S
X10 R
X1650(Speci\256es)S
X2041(the)S
X2193(display)S
X2512(screen)S
X2796(on)S
X2926(which)S
X3200(the)S
X3352(Xv)S
X3504(Server)S
X3794(is)S
X3891(to)S
X3999(accept)S
X4283(requests)S
X4640(from)S
X4864(Xv)S
X5016(clients.)S
X720 H
X2976 V
X1650(If)S
X1746(the)S
X1898(display)S
X2217(option)S
X2503(is)S
X2600(not)S
X2758(speci\256ed,)S
X3168(Xv)S
X3320(uses)S
X3522(the)S
X3674(display)S
X3993(screen)S
X4277(speci\256ed)S
X4662(by)S
X4792(your)S
X720 H
X3096 V
X1650(DISPLAY)S
X2102(environment)S
X2637(variable.)S
X3043(The)S
X3228(display)S
X3547(option)S
X3833(has)S
X3996(the)S
X4148(format)S
X4444(hostname:number.)S
X720 H
X3216 V
X1650(Using)S
X1919(two)S
X2099(colons)S
X2390(\(::\))S
X2542(instead)S
X2855(of)S
X2968(one)S
X3142(\(:\))S
X3266(indicates)S
X3651(that)S
X3831(DECnet)S
X4183(is)S
X4280(to)S
X4388(be)S
X4512(used)S
X4725(for)S
X4871(transport.)S
X720 H
X3384 V
X10 I
X900(port)S
X10 R
X1650(De\256nes)S
X1985(the)S
X2137(port)S
X2328(associated)S
X2768(with)S
X2976(the)S
X3128(display)S
X3447(and)S
X3621(adaptor)S
X3950(for)S
X4096(which)S
X4370(the)S
X4522(optimum)S
X4914(size)S
X5099(is)S
X5196(to)S
X5304(be)S
X720 H
X3504 V
X1650(calculated.)S
X720 H
X3672 V
X10 I
X900(motion)S
X10 R
X1650(Speci\256es)S
X10 I
X2041(True)S
X10 R
X2260(if)S
X2351(the)S
X2503(destination)S
X2972(size)S
X3157(needs)S
X3414(to)S
X3522(support)S
X3852(full)S
X4021(motion,)S
X4360(and)S
X10 I
X4534(False)S
X10 R
X4786(if)S
X4877(the)S
X5029(destina-)S
X720 H
X3792 V
X1650(tion)S
X1836(size)S
X2021(need)S
X2239(only)S
X2447(support)S
X2777(still)S
X2958(images.)S
X720 H
X3960 V
X10 I
X900(vw,vh)S
X10 R
X1650(Speci\256es)S
X2041(the)S
X2193(size)S
X2378(of)S
X2491(the)S
X2643(source)S
X2933(vide)S
X3135(region)S
X3420(desired.)S
X720 H
X4128 V
X10 I
X900(dw,dh)S
X10 R
X1650(Speci\256es)S
X2041(the)S
X2193(size)S
X2378(of)S
X2491(the)S
X2643(destination)S
X3112(drawable)S
X3507(region)S
X3792(desired.)S
X720 H
X4296 V
X10 I
X900(p_dw,p_dh)S
X10 R
X1650(Pointers)S
X2008(to)S
X2116(where)S
X2389(the)S
X2541(closest)S
X2843(destination)S
X3312(sizes)S
X3536(supported)S
X3960(by)S
X4090(the)S
X4242(server)S
X4515(are)S
X4666(retunred.)S
X720 H
X4464 V
X9 B
X720(Description)S
X720 H
X4584 V
X10 R
X900(Some)S
X1158(ports)S
X1388(may)S
X1590(be)S
X1714(able)S
X1910(to)S
X2018(scale)S
X2247(incoming)S
X2655(or)S
X2768(outgoing)S
X3154(video.)S
X3431(XvQueryBestSize\(3X\))S
X4370(returns)S
X4677(the)S
X4829(size)S
X5014(of)S
X5127(the)S
X720 H
X4704 V
X900(closest)S
X1202(destination)S
X1671(region)S
X1956(that)S
X2136(is)S
X2233(supported)S
X2657(by)S
X2787(the)S
X2939(adaptor.)S
X3323(The)S
X3508(returned)S
X3870(size)S
X4055(is)S
X4152(guaranteed)S
X4619(to)S
X4727(be)S
X4851(smaller)S
X5175(than)S
X720 H
X4824 V
X900(the)S
X1052(requested)S
X1464(size)S
X1649(if)S
X1740(a)S
X1814(smaller)S
X2138(size)S
X2323(is)S
X2420(supported.)S
X720 H
X4992 V
X9 B
X720(Examples)S
X720 H
X5112 V
X10 C
X1150(Example)S
X1630(between)S
X2110(.EX)S
X2350(and)S
X2590(.EE)S
X2830(will)S
X3130(show)S
X3430(in)S
X3610(monospace)S
X720 H
X5340 V
X9 B
X720(Returned)S
X1127(Values)S
X720 H
X5460 V
X10 B
X900([Success])S
X720 H
X5580 V
X10 R
X1300(Returned)S
X1696(if)S
X1787(XvQueryBestSize\(3X\))S
X2726(completed)S
X3172(successfully.)S
X720 H
X5748 V
X10 B
X900([XvBadExtension])S
X720 H
X5868 V
X10 R
X1300(Returned)S
X1696(if)S
X1787(the)S
X1939(Xv)S
X2091(extension)S
X2504(is)S
X2601(unavailable.)S
X720 H
X6036 V
X10 B
X900([XvBadAlloc])S
X720 H
X6156 V
X10 R
X1300(Returned)S
X1696(if)S
X1787(XvQueryBestSize\(3X\))S
X2726(failed)S
X2983(to)S
X3091(allocate)S
X3431(memory)S
X3794(to)S
X3902(process)S
X4231(the)S
X4383(request.)S
X720 H
X6324 V
X9 B
X720(Diagnostics)S
X720 H
X6444 V
X10 B
X900([XvBadPort])S
X720 H
X6564 V
X10 R
X1300(Generated)S
X1739(if)S
X1830(the)S
X1982(requested)S
X2394(port)S
X2585(does)S
X2798(not)S
X2956(exist.)S
X720 H
X7680 V
X5300(19)S
X7920 V
XEP
X%%Page: 20 20
XBP
X/slant 0 def
X/height 1.000000 def
X10 R
X10 R
X72 H
X120 V
X72(|--)S
X720 H
X600 V
X12 HB
X720(XvQueryEncodings)S
X1848(\()S
X1928(\))S
X720 H
X1080 V
X9 B
X720(Name)S
X720 H
X1200 V
X10 R
X900(XvQueryEncodings)S
X1723(\261)S
X1803(return)S
X2071(list)S
X2224(of)S
X2337(encodings)S
X2772(for)S
X2918(an)S
X3042(adaptor)S
X720 H
X1368 V
X9 B
X720(Syntax)S
X720 H
X1488 V
X10 B
X900(#include)S
X1292(<X11/extensions/Xvlib.h>)S
X720 H
X1728 V
X900(XvQueryEncodings\()S
X10 I
X1773(dpy,)S
X1972(port,)S
X2194(p_num_encodings,)S
X2976(pp_encoding_info\))S
X720 H
X1968 V
X10 B
X900(register)S
X1256(Display)S
X10 I
X1609(*dpy)S
X10 R
X1803(;)S
X720 H
X2088 V
X10 B
X900(XvPortID)S
X10 I
X1351(port)S
X10 R
X1518(;)S
X720 H
X2208 V
X10 B
X900(unsigned)S
X1315(long)S
X10 I
X1529(*p_num_encodings)S
X10 R
X2306(;)S
X720 H
X2328 V
X10 B
X900(XvEncodingInfo)S
X10 I
X1637(**pp_encoding_info)S
X10 R
X2459(;)S
X720 H
X2496 V
X9 B
X720(Arguments)S
X720 H
X2616 V
X10 I
X900(*dpy)S
X10 R
X1650(Speci\256es)S
X2041(the)S
X2193(display)S
X2512(screen)S
X2796(on)S
X2926(which)S
END_OF_FILE
if test 10918 -ne `wc -c <'extensions/xv/doc/xv-lib-v2.PS.af'`; then
    echo shar: \"'extensions/xv/doc/xv-lib-v2.PS.af'\" unpacked with wrong size!
fi
# end of 'extensions/xv/doc/xv-lib-v2.PS.af'
fi
if test -f 'extensions/xv/test/xvt3.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'extensions/xv/test/xvt3.c'\"
else
echo shar: Extracting \"'extensions/xv/test/xvt3.c'\" \(10260 characters\)
sed "s/^X//" >'extensions/xv/test/xvt3.c' <<'END_OF_FILE'
X/***********************************************************
XCopyright 1991 by Digital Equipment Corporation, Maynard, Massachusetts,
Xand the Massachusetts Institute of Technology, Cambridge, Massachusetts.
X
X                        All Rights Reserved
X
XPermission to use, copy, modify, and distribute this software and its 
Xdocumentation for any purpose and without fee is hereby granted, 
Xprovided that the above copyright notice appear in all copies and that
Xboth that copyright notice and this permission notice appear in 
Xsupporting documentation, and that the names of Digital or MIT not be
Xused in advertising or publicity pertaining to distribution of the
Xsoftware without specific, written prior permission.  
X
XDIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
XALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
XDIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
XANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
XWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
XARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
XSOFTWARE.
X
X******************************************************************/
X/*
X** File: 
X**
X**   xvt3.c --- Xv test program 3
X**   
X** Author: 
X**
X**   David Carver (Digital Workstation Engineering/Project Athena)
X**
X** Revisions:
X**
X**   05.15.91 Carver
X**     - version 2.0 upgrade
X**
X**   03.19.91 Carver
X**     - origional
X**       
X*/
X#include <stdio.h>
X#include <X11/Xlib.h>
X#include <X11/Xutil.h>
X#include <X11/extensions/Xvlib.h>
X
X
Xmain(argc, argv)
X     int         argc;
X     char        *argv[];
X{
X  char chr;
X  int ii, jj, status, mask;
X  int screen;
X
X  Display *dpy;
X  Visual *vis,*def_vis;
X  XVisualInfo *p_vis_info, vis_info_tmpl;
X  unsigned long vis_id;
X  unsigned long depth;
X  XGCValues gc_attr;
X  GC gc,stillgc;
X  XSetWindowAttributes win_attr;
X  Window root,main_win;
X  Pixmap mskpix;
X  Colormap cmap;
X  XEvent event;
X  XColor scolor,ecolor;
X
X  unsigned long version, revision;
X  unsigned int event_base;
X  unsigned int error_base;
X  unsigned int major_opcode;
X  unsigned long nAdaptors;
X  XvAdaptorInfo *pAdaptors, *pAdaptor;
X  XvEncodingInfo *pEncoding;
X  XvFormat *pFormat;
X  unsigned long port;
X  unsigned long enc_id;
X  XvEvent *pe;
X  float rate;
X  int video;
X
X  printf("\n  Welcome to Xv test program #3\n\n");
X  printf("  This program uses an oval clip mask for video and stills.\n");
X  printf("  After video appears press the left button in video window to\n");
X  printf("  capture a still.  Press ^c exit.\n");
X
X  printf("\n> Press return to continue...");
X  chr = getc(stdin);
X
X  dpy = XOpenDisplay(0);
X  if (!dpy)
X    {
X      printf("\n  Couldn't open display\n");
X      printf("\n  Xv test program #3 terminated\n");
X      exit();
X    }
X
X  root = XDefaultRootWindow(dpy);
X  screen = XDefaultScreen(dpy);
X
X  XSynchronize(dpy, True);
X
X  status = XvQueryExtension(dpy, &version, &revision,
X			    &major_opcode, &event_base, &error_base);
X
X  if (status != Success) 
X    {
X      printf("\n  Xv video extension not available\n");
X      printf("\n  Xv test program #3 terminated\n");
X      exit();
X    }
X
X  XvQueryAdaptors(dpy, root, &nAdaptors, &pAdaptors);
X
X  printf("\n  Xv V%01d.%d\n", version, revision);
X
X  if (!nAdaptors)
X    {
X      printf("\n  Your display has no video adaptors\n");
X      printf("\n  Xv test program #3 terminated\n");
X      exit();
X    }
X
X if (!Setup(argc, argv, nAdaptors, pAdaptors, &port, &depth, &vis_id))
X   {
X     printf("\n  Setup failed.\n");
X     printf("\n  Xv test program #3 terminated\n");
X     exit();
X   }
X
X
X  vis_info_tmpl.visualid = vis_id;
X  p_vis_info = XGetVisualInfo(dpy, VisualIDMask, &vis_info_tmpl, &ii);
X  if (!p_vis_info)
X    {
X      printf("      Error: Couldn't find visual ");
X      printf("#%x listed for adaptor.\n", pFormat->visual_id);
X      printf("\n  Xv test program #3 terminated\n");
X      return;
X    }
X
X  vis = p_vis_info->visual;
X  def_vis = XDefaultVisual(dpy,screen);
X
X  if (vis->visualid == def_vis->visualid)
X    cmap = XDefaultColormap(dpy,screen);
X  else
X    cmap = XCreateColormap(dpy, root, vis, AllocNone);
X  
X  XAllocNamedColor(dpy, cmap, "midnight blue", &scolor, &ecolor);
X
X  win_attr.colormap = cmap;
X  win_attr.background_pixel = scolor.pixel;
X  win_attr.event_mask = ExposureMask | VisibilityChangeMask | 
X    ButtonPressMask | KeyPressMask;
X  win_attr.backing_store = Always;
X  win_attr.border_pixel = scolor.pixel;
X
X  main_win = XCreateWindow(dpy, root, 0, 0, 672, 972, 0, 
X			   depth, InputOutput, vis,
X			   CWColormap | CWBackPixel | CWEventMask |
X			   CWBackingStore | CWBorderPixel,
X			   &win_attr);
X
X  XMapWindow(dpy, main_win);
X
X  printf("\n  Waiting for window to become visible...\n");
X  while (1)
X    {
X      XNextEvent(dpy, &event);
X      if (event.type == VisibilityNotify) break;
X    }
X
X  printf("\n  SelectNotify on window\n");
X  XvSelectVideoNotify(dpy, main_win, True);
X
X  mskpix = XCreatePixmap(dpy,root,640,480,1);
X  
X  gc_attr.foreground = 0;
X  gc = XCreateGC(dpy, mskpix, GCForeground, &gc_attr);
X  XFillRectangle(dpy, mskpix, gc, 0, 0, 640, 480);
X  gc_attr.foreground = 1;
X  XChangeGC(dpy, gc, GCForeground, &gc_attr);
X  XFillArc(dpy, mskpix, gc, 0, 0, 640, 480, 0, 360*64);
X  XFreeGC(dpy, gc);
X  
X  gc_attr.foreground = scolor.pixel;
X  gc_attr.clip_mask = mskpix;
X  gc_attr.clip_x_origin = 16;
X  gc_attr.clip_y_origin = 4;
X  gc = XCreateGC(dpy, main_win, 
X		 GCForeground | GCClipMask | GCClipXOrigin | GCClipYOrigin, 
X		 &gc_attr);
X  
X  gc_attr.foreground = scolor.pixel;
X  gc_attr.clip_mask = mskpix;
X  gc_attr.clip_x_origin = 16;
X  gc_attr.clip_y_origin = 488;
X  stillgc = XCreateGC(dpy, main_win, 
X		      GCForeground | GCClipMask |
X		      GCClipXOrigin | GCClipYOrigin,
X		      &gc_attr);
X
X
X  printf("\n  PutVideo\n\n");
X  XvPutVideo(dpy, port, main_win, gc, 0, 0, 
X	     640, 480, 16, 4, 640, 480);
X		  
X
X  while (1)
X    {
X      XNextEvent(dpy, &event);
X
X      if (event.type == KeyPress)
X	{
X	  if ((XLookupKeysym(&event.xkey,0) == 'c') && 
X	      (event.xkey.state & ControlMask))
X	    {
X	      break;
X	    }
X	}
X      else if (event.type == ButtonPress)
X	{
X	  if (event.xbutton.button == Button1)
X	    {
X	      if (video)
X		{
X		  XvPutStill(dpy, port, main_win, stillgc, 0, 0, 
X			     640, 480, 16, 488, 640, 480);
X		}
X	      XvPutVideo(dpy, port, main_win, gc, 0, 0, 
X			 640, 480, 16, 4, 640, 480);
X	    }
X	}
X      else if (event.type == event_base)
X	{
X	  pe = (XvEvent *)&event;
X	  if (pe->xvvideo.drawable == main_win)
X	    {
X	      if (pe->xvvideo.reason == XvStarted)
X		{
X		  printf("  Video started on port %d\n", pe->xvvideo.port_id);
X		  video = True;
X		}
X	      if (pe->xvvideo.reason == XvStopped)
X		{
X		  printf("  Video stopped on port %d\n", pe->xvvideo.port_id);
X		  video = False;
X		}
X	      if (pe->xvvideo.reason == XvPreempted)
X		{
X		  printf("  Video preempted on port %d\n", pe->xvvideo.port_id);
X		  video = False;
X		}
X	      if (pe->xvvideo.reason == XvHardError)
X		{
X		  printf("  Video error on port %d\n", pe->xvvideo.port_id);
X		  video = False;
X		}
X	      if (pe->xvvideo.reason == XvBusy)
X		{
X		  printf("  Port %d is grabbed by another client\n", 
X			 pe->xvvideo.port_id);
X		  XBell(dpy, 100);
X		  if (pe->xvvideo.drawable == main_win)
X		    video = False;
X		}
X	    }
X	  else
X	    {
X	      printf("  Wrong video notify window!!!\n");
X	    }
X	}
X    }
X
X  printf("\n  Xv test program #3 finished\n");
X
X}
X
X
XSetup(argc, argv, nAdaptors, pAdaptors, p_port, p_depth, p_vis_id)
X     int         argc;
X     char        *argv[];
X     unsigned long nAdaptors;
X     XvAdaptorInfo *pAdaptors;
X     unsigned long *p_port;
X     unsigned long *p_depth;
X     unsigned long *p_vis_id;
X{
X  int ii, jj;
X  XvAdaptorInfo *pAdaptor;
X  XvFormat *pFormat;
X  int adaptor, port, depth, visual_id;
X
X  adaptor = port = depth = visual_id = -1;
X
X  /* LOOK THROUGH COMMAND LINE ARGUMENTS */
X
X  for ( ii = 1; ii < argc; ii++ )
X    {
X      if (strcmp( argv[ii], "-adaptor") == 0)
X	{
X	    if(++ii < argc)
X	      adaptor = atoi(argv[ii]);
X            else
X	      UseMsg(argv);
X	}
X      else if (strcmp( argv[ii], "-port") == 0)
X	{
X	    if(++ii < argc)
X	      port = atoi(argv[ii]);
X            else
X	      UseMsg(argv);
X	}
X      else if (strcmp( argv[ii], "-depth") == 0)
X	{
X	    if(++ii < argc)
X	      depth = atoi(argv[ii]);
X            else
X	      UseMsg(argv);
X	}
X      else if (strcmp( argv[ii], "-visual") == 0)
X	{
X	    if(++ii < argc)
X	      visual_id = atoi(argv[ii]);
X            else
X	      UseMsg(argv);
X	}
X      else if (strcmp( argv[ii], "-help") == 0)
X	{
X	  UseMsg(argv);
X	}
X    }
X
X  if (adaptor < 0)
X    {
X      pAdaptor = pAdaptors;
X    }
X  else
X    {
X      if (adaptor > nAdaptors)
X	{
X	  printf("\n  Adaptor #%d doesn't exist.\n", adaptor);
X	  return False;
X	}
X      pAdaptor = pAdaptors+(adaptor-1);
X    }
X
X  if (port < 0)
X    {
X      port = pAdaptor->base_id;
X    }
X  else
X    {
X      if (port > pAdaptor->num_ports)
X	{
X	  printf("\n  Port #%d doesn't exist for adaptor #%d.\n", 
X		 port, adaptor);
X	  return False;
X	}
X    }
X
X  pFormat = pAdaptor->formats;
X
X  if (depth < 0)
X    {
X      depth = pFormat->depth;
X    }
X  else
X    {
X      for (ii=0; ii<pAdaptor->num_formats; ii++)
X	{
X	  if (pFormat->depth == depth) break;
X	  pFormat++;
X	}
X
X      if (ii >= pAdaptor->num_formats)
X	{
X	  printf("\n  Depth %d not supported by adaptor.\n", depth);
X	  return False;
X	}
X    }
X
X  if (visual_id < 0)
X    {
X      visual_id = pFormat->visual_id;
X    }
X  else
X    {
X
X      pFormat = pAdaptor->formats;
X
X      for (ii=0; ii<pAdaptor->num_formats; ii++)
X	{
X	  if ((pFormat->visual_id == visual_id) && pFormat->depth == depth)
X	    break;
X	  pFormat++;
X	}
X
X      if (ii >= pAdaptor->num_formats)
X	{
X	  printf("\n  Visual-id %d at depth %d not supported by adaptor.\n", 
X		 depth, visual_id);
X	  return False;
X	}
X    }
X
X  *p_port = port;
X  *p_depth = depth;
X  *p_vis_id = visual_id;
X
X  return True;
X}
X
XUseMsg(argv)
X     char        *argv[];
X{
X
X  printf("use: %s [option]\n", argv[0]);
X  printf("\t-adaptor #                       adaptor number\n");
X  printf("\t-port #                          port (XID)\n");
X  printf("\t-depth #                         drawable depth (planes)\n");
X  printf("\t-visual #                        drawable visual (id)\n");
X  exit();
X}
END_OF_FILE
if test 10260 -ne `wc -c <'extensions/xv/test/xvt3.c'`; then
    echo shar: \"'extensions/xv/test/xvt3.c'\" unpacked with wrong size!
fi
# end of 'extensions/xv/test/xvt3.c'
fi
if test -f 'server/ddx/cfb32/cfbtile32.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'server/ddx/cfb32/cfbtile32.c'\"
else
echo shar: Extracting \"'server/ddx/cfb32/cfbtile32.c'\" \(8390 characters\)
sed "s/^X//" >'server/ddx/cfb32/cfbtile32.c' <<'END_OF_FILE'
X/*
X * Fill 32 bit tiled rectangles.  Used by both PolyFillRect and PaintWindow.
X * no depth dependencies.
X */
X
X/*
XCopyright 1989 by the Massachusetts Institute of Technology
X
XPermission to use, copy, modify, and distribute this software and its
Xdocumentation for any purpose and without fee is hereby granted,
Xprovided that the above copyright notice appear in all copies and that
Xboth that copyright notice and this permission notice appear in
Xsupporting documentation, and that the name of M.I.T. not be used in
Xadvertising or publicity pertaining to distribution of the software
Xwithout specific, written prior permission.  M.I.T. makes no
Xrepresentations about the suitability of this software for any
Xpurpose.  It is provided "as is" without express or implied warranty.
X*/
X
X/* $XConsortium: cfbtile32.c,v 1.5 91/07/14 13:49:46 keith Exp $ */
X
X#include "X.h"
X#include "Xmd.h"
X#include "servermd.h"
X#include "gcstruct.h"
X#include "window.h"
X#include "pixmapstr.h"
X#include "scrnintstr.h"
X#include "windowstr.h"
X
X#include "cfb.h"
X#include "cfbmskbits.h"
X#include "cfb8bit.h"
X
X#include "mergerop.h"
X
X#ifdef sparc
X#define SHARED_IDCACHE
X#endif
X
X#define STORE(p)    (*(p) = MROP_PREBUILT_SOLID(srcpix,*(p)))
X
X#if (MROP == Mcopy) && defined(FAST_CONSTANT_OFFSET_MODE) && defined(SHARED_IDCACHE)
X# define Expand(left,right) {\
X    int part = nlwMiddle & 7; \
X    nlwMiddle >>= 3; \
X    while (h--) { \
X	srcpix = psrc[srcy]; \
X	MROP_PREBUILD(srcpix); \
X	++srcy; \
X	if (srcy == tileHeight) \
X	    srcy = 0; \
X	left \
X	p += part; \
X	switch (part) { \
X	case 7: \
X	    STORE(p - 7); \
X	case 6: \
X	    STORE(p - 6); \
X	case 5: \
X	    STORE(p - 5); \
X	case 4: \
X	    STORE(p - 4); \
X	case 3: \
X	    STORE(p - 3); \
X	case 2: \
X	    STORE(p - 2); \
X	case 1: \
X	    STORE(p - 1); \
X	} \
X	nlw = nlwMiddle; \
X	while (nlw) { \
X	    STORE (p + 0); \
X	    STORE (p + 1); \
X	    STORE (p + 2); \
X	    STORE (p + 3); \
X	    STORE (p + 4); \
X	    STORE (p + 5); \
X	    STORE (p + 6); \
X	    STORE (p + 7); \
X	    p += 8; \
X	    nlw--; \
X	} \
X	right \
X	p += nlwExtra; \
X    } \
X}
X#else
X#define Expand(left,right) {\
X    while (h--)	{ \
X	srcpix = psrc[srcy]; \
X	MROP_PREBUILD(srcpix); \
X	++srcy; \
X	if (srcy == tileHeight) \
X	    srcy = 0; \
X	left \
X	nlw = nlwMiddle; \
X	while (nlw--) \
X	{ \
X	    STORE(p); \
X	    p++; \
X	} \
X	right \
X	p += nlwExtra; \
X    } \
X}
X#endif
X
Xvoid
XMROP_NAME(cfbFillRectTile32) (pDrawable, pGC, nBox, pBox)
X    DrawablePtr	    pDrawable;
X    GCPtr	    pGC;
X    int		    nBox;	/* number of boxes to fill */
X    BoxPtr 	    pBox;	/* pointer to list of boxes to fill */
X{
X    register unsigned long srcpix;	
X    unsigned long *psrc;		/* pointer to bits in tile, if needed */
X    int tileHeight;	/* height of the tile */
X
X    int nlwDst;		/* width in longwords of the dest pixmap */
X    int w;		/* width of current box */
X    register int h;	/* height of current box */
X    register unsigned long startmask;
X    register unsigned long endmask; /* masks for reggedy bits at either end of line */
X    int nlwMiddle;	/* number of longwords between sides of boxes */
X    int nlwExtra;	/* to get from right of box to left of next span */
X    register int nlw;	/* loop version of nlwMiddle */
X    register unsigned long *p;	/* pointer to bits we're writing */
X    int y;		/* current scan line */
X    int srcy;		/* current tile position */
X
X    unsigned long *pbits;/* pointer to start of pixmap */
X    PixmapPtr	    tile;	/* rotated, expanded tile */
X    MROP_DECLARE_REG()
X    MROP_PREBUILT_DECLARE()
X
X    tile = ((cfbPrivGCPtr) (pGC->devPrivates[cfbGCPrivateIndex].ptr))->pRotatedPixmap;
X    tileHeight = tile->drawable.height;
X    psrc = (unsigned long *)tile->devPrivate.ptr;
X
X    MROP_INITIALIZE(pGC->alu, pGC->planemask);
X
X    cfbGetLongWidthAndPointer (pDrawable, nlwDst, pbits)
X
X    while (nBox--)
X    {
X	w = pBox->x2 - pBox->x1;
X	h = pBox->y2 - pBox->y1;
X	y = pBox->y1;
X	p = pbits + (y * nlwDst) + (pBox->x1 >> PWSH);
X	srcy = y % tileHeight;
X
X	if ( ((pBox->x1 & PIM) + w) <= PPW)
X	{
X	    maskpartialbits(pBox->x1, w, startmask);
X	    nlwExtra = nlwDst;
X	    while (h--)
X	    {
X		srcpix = psrc[srcy];
X		MROP_PREBUILD(srcpix);
X		++srcy;
X		if (srcy == tileHeight)
X		    srcy = 0;
X		*p = MROP_PREBUILT_MASK (srcpix, *p, startmask);
X		p += nlwExtra;
X	    }
X	}
X	else
X	{
X	    maskbits(pBox->x1, w, startmask, endmask, nlwMiddle);
X	    nlwExtra = nlwDst - nlwMiddle;
X
X	    if (startmask)
X	    {
X		nlwExtra -= 1;
X		if (endmask)
X		{
X		    Expand(*p = MROP_PREBUILT_MASK(srcpix, *p, startmask); p++;,
X			   *p = MROP_PREBUILT_MASK(srcpix, *p, endmask);)
X		}
X		else
X		{
X		    Expand(*p = MROP_PREBUILT_MASK(srcpix, *p, startmask); p++;,
X			   ;)
X		}
X	    }
X	    else
X	    {
X		if (endmask)
X		{
X		    Expand(;,
X			   *p = MROP_PREBUILT_MASK(srcpix, *p, endmask);)
X		}
X		else
X		{
X		    Expand(;,
X			   ;)
X		}
X	    }
X	}
X        pBox++;
X    }
X}
X
Xvoid
XMROP_NAME(cfbTile32FS)(pDrawable, pGC, nInit, pptInit, pwidthInit, fSorted)
X    DrawablePtr pDrawable;
X    GCPtr	pGC;
X    int		nInit;			/* number of spans to fill */
X    DDXPointPtr pptInit;		/* pointer to list of start points */
X    int		*pwidthInit;		/* pointer to list of n widths */
X    int 	fSorted;
X{
X				/* next three parameters are post-clip */
X    int			n;	/* number of spans to fill */
X    DDXPointPtr		ppt;	/* pointer to list of start points */
X    int			*pwidth;/* pointer to list of n widths */
X    unsigned long	*pbits;	/* pointer to start of bitmap */
X    int			nlwDst;	/* width in longwords of bitmap */
X    register unsigned long *p;	/* pointer to current longword in bitmap */
X    register int	w;	/* current span width */
X    register int	nlw;
X    register int	x;
X    register unsigned long startmask;
X    register unsigned long endmask;
X    register unsigned long  srcpix;
X    int			y;
X    int			*pwidthFree;/* copies of the pointers to free */
X    DDXPointPtr		pptFree;
X    PixmapPtr		tile;
X    unsigned long	*psrc;	/* pointer to bits in tile */
X    int			tileHeight;/* height of the tile */
X    MROP_DECLARE_REG ()
X    MROP_PREBUILT_DECLARE()
X
X    n = nInit * miFindMaxBand(((cfbPrivGC *)(pGC->devPrivates[cfbGCPrivateIndex].ptr))->pCompositeClip);
X    pwidthFree = (int *)ALLOCATE_LOCAL(n * sizeof(int));
X    pptFree = (DDXPointRec *)ALLOCATE_LOCAL(n * sizeof(DDXPointRec));
X    if(!pptFree || !pwidthFree)
X    {
X	if (pptFree) DEALLOCATE_LOCAL(pptFree);
X	if (pwidthFree) DEALLOCATE_LOCAL(pwidthFree);
X	return;
X    }
X    pwidth = pwidthFree;
X    ppt = pptFree;
X    n = miClipSpans(((cfbPrivGC *)(pGC->devPrivates[cfbGCPrivateIndex].ptr))->pCompositeClip,
X		     pptInit, pwidthInit, nInit,
X		     ppt, pwidth, fSorted);
X
X    tile = ((cfbPrivGCPtr) (pGC->devPrivates[cfbGCPrivateIndex].ptr))->pRotatedPixmap;
X    tileHeight = tile->drawable.height;
X    psrc = (unsigned long *)tile->devPrivate.ptr;
X
X    MROP_INITIALIZE(pGC->alu, pGC->planemask);
X
X    cfbGetLongWidthAndPointer (pDrawable, nlwDst, pbits)
X
X#if MROP == Mcopy
X    if (!(tileHeight & (tileHeight-1)))
X    {
X	tileHeight--;
X    	while (n--)
X    	{
X	    x = ppt->x;
X	    y = ppt->y;
X	    ++ppt;
X	    w = *pwidth++;
X	    p = pbits + (y * nlwDst) + (x >> PWSH);
X	    srcpix = psrc[y & tileHeight];
X	    MROP_PREBUILD(srcpix);
X    
X	    if ((x & PIM) + w < PPW)
X	    {
X	    	maskpartialbits(x, w, startmask);
X	    	*p = MROP_PREBUILT_MASK (srcpix, *p, startmask);
X	    }
X	    else
X	    {
X	    	maskbits(x, w, startmask, endmask, nlw);
X	    	if (startmask)
X	    	{
X		    *p = MROP_PREBUILT_MASK(srcpix, *p, startmask);
X		    p++;
X	    	}
X	    	while (nlw--)
X	    	{
X		    STORE(p);
X		    ++p;
X	    	}
X	    	if (endmask)
X	    	{
X		    *p = MROP_PREBUILT_MASK(srcpix, *p, endmask);
X	    	}
X	    }
X    	}
X    }
X    else
X#endif
X    {
X    	while (n--)
X    	{
X	    x = ppt->x;
X	    y = ppt->y;
X	    ++ppt;
X	    w = *pwidth++;
X	    p = pbits + (y * nlwDst) + (x >> PWSH);
X	    srcpix = psrc[y % tileHeight];
X	    MROP_PREBUILD(srcpix);
X    
X	    if ((x & PIM) + w < PPW)
X	    {
X	    	maskpartialbits(x, w, startmask);
X	    	*p = MROP_PREBUILT_MASK (srcpix, *p, startmask);
X	    }
X	    else
X	    {
X	    	maskbits(x, w, startmask, endmask, nlw);
X	    	if (startmask)
X	    	{
X		    *p = MROP_PREBUILT_MASK(srcpix, *p, startmask);
X		    p++;
X	    	}
X	    	while (nlw--)
X	    	{
X		    STORE(p);
X		    ++p;
X	    	}
X	    	if (endmask)
X	    	{
X		    *p = MROP_PREBUILT_MASK(srcpix, *p, endmask);
X	    	}
X	    }
X    	}
X    }
X    DEALLOCATE_LOCAL(pptFree);
X    DEALLOCATE_LOCAL(pwidthFree);
X}
END_OF_FILE
if test 8390 -ne `wc -c <'server/ddx/cfb32/cfbtile32.c'`; then
    echo shar: \"'server/ddx/cfb32/cfbtile32.c'\" unpacked with wrong size!
fi
# end of 'server/ddx/cfb32/cfbtile32.c'
fi
echo shar: End of archive 21 \(of 29\).
cp /dev/null ark21isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 29 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
-- 
Molecular Simulations, Inc.             mail: dcmartin@msi.com
796 N. Pastoria Avenue                  uucp: uunet!dcmartin
Sunnyvale, California 94086             at&t: 408/522-9236
