Newsgroups: comp.sources.x
Path: uunet!think.com!mips!msi!dcmartin
From: Chuck Musciano <chuck@trantor.harris-atd.com>
Subject: v16i102: contool 3.2A (Final Release), Part03/07
Message-ID: <1992Mar5.214752.9538@msi.com>
Originator: dcmartin@fascet
Sender: dcmartin@msi.com (David C. Martin - Moderator)
Organization: Molecular Simulations, Inc.
References: <csx-16i100-contool-3.2a@uunet.UU.NET>
Date: Thu, 5 Mar 1992 21:47:52 GMT
Approved: dcmartin@msi.com

Submitted-by: Chuck Musciano <chuck@trantor.harris-atd.com>
Posting-number: Volume 16, Issue 102
Archive-name: contool-3.2a/part03

#!/bin/sh
# this is Part.03 (part 3 of a multipart archive)
# do not concatenate these parts, unpack them in order with /bin/sh
# file contool_ui.c continued
#
if test ! -r _shar_seq_.tmp; then
	echo 'Please unpack part 1 first!'
	exit 1
fi
(read Scheck
 if test "$Scheck" != 3; then
	echo Please unpack part "$Scheck" next!
	exit 1
 else
	exit 0
 fi
) < _shar_seq_.tmp || exit 1
if test ! -f _shar_wnt_.tmp; then
	echo 'x - still skipping contool_ui.c'
else
echo 'x - continuing file contool_ui.c'
sed 's/^X//' << 'SHAR_EOF' >> 'contool_ui.c' &&
X		XV_HELP_DATA, "contool:comment",
X		XV_X, 49,
X		XV_Y, 395,
X		PANEL_VALUE_DISPLAY_LENGTH, 46,
X		PANEL_VALUE_STORED_LENGTH, 256,
X		PANEL_LABEL_STRING, "Comment:",
X		PANEL_LAYOUT, PANEL_HORIZONTAL,
X		PANEL_READ_ONLY, FALSE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `ignore' in the specified instance.
X */
XXv_opaque
contool_filters_ignore_create(ip, owner)
X	contool_filters_objects	*ip;
X	Xv_opaque		owner;
{
X	extern void		set_filter_action();
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_CHOICE,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:ignore",
X		XV_X, 14,
X		XV_Y, 431,
X		PANEL_CHOICE_NROWS, 1,
X		PANEL_LAYOUT, PANEL_HORIZONTAL,
X		PANEL_CHOOSE_NONE, FALSE,
X		PANEL_LABEL_STRING, "When matched:",
X		PANEL_NOTIFY_PROC, set_filter_action,
X		PANEL_CHOICE_STRINGS,
X			"Save message",
X			"Ignore message",
X			NULL,
X		PANEL_VALUE, 0,
X		NULL);
X	return obj;
}
X
/*
X * Create object `action' in the specified instance.
X */
XXv_opaque
contool_filters_action_create(ip, owner)
X	contool_filters_objects	*ip;
X	Xv_opaque		owner;
{
X	extern void		set_match_action();
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_TOGGLE,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:action",
X		XV_X, 32,
X		XV_Y, 459,
X		PANEL_CHOICE_NCOLS, 1,
X		PANEL_LAYOUT, PANEL_HORIZONTAL,
X		PANEL_LABEL_STRING, "When saved:",
X		PANEL_NOTIFY_PROC, set_match_action,
X		PANEL_CHOICE_STRINGS,
X			"Beep",
X			"Command",
X			"Flash icon",
X			"Log message",
X			"Open window",
X			"Timestamp",
X			NULL,
X		PANEL_VALUE, 0,
X		NULL);
X	return obj;
}
X
/*
X * Create object `filter_beep_count' in the specified instance.
X */
XXv_opaque
contool_filters_filter_beep_count_create(ip, owner)
X	contool_filters_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_NUMERIC_TEXT,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:filter_beep_count",
X		XV_X, 236,
X		XV_Y, 464,
X		PANEL_VALUE_DISPLAY_LENGTH, 2,
X		PANEL_VALUE_STORED_LENGTH, 2,
X		PANEL_LAYOUT, PANEL_HORIZONTAL,
X		PANEL_MAX_VALUE, 99,
X		PANEL_MIN_VALUE, 0,
X		PANEL_VALUE, 0,
X		PANEL_READ_ONLY, FALSE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `filter_beep_times' in the specified instance.
X */
XXv_opaque
contool_filters_filter_beep_times_create(ip, owner)
X	contool_filters_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_MESSAGE,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:filter_beep_times",
X		XV_X, 324,
X		XV_Y, 464,
X		PANEL_LABEL_STRING, "times",
X		PANEL_LABEL_BOLD, FALSE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `filter_command' in the specified instance.
X */
XXv_opaque
contool_filters_filter_command_create(ip, owner)
X	contool_filters_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_TEXT,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:filter_command",
X		XV_X, 236,
X		XV_Y, 493,
X		PANEL_VALUE_DISPLAY_LENGTH, 32,
X		PANEL_VALUE_STORED_LENGTH, 1024,
X		PANEL_LAYOUT, PANEL_HORIZONTAL,
X		PANEL_READ_ONLY, FALSE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `filters_apply' in the specified instance.
X */
XXv_opaque
contool_filters_filters_apply_create(ip, owner)
X	contool_filters_objects	*ip;
X	Xv_opaque		owner;
{
X	extern void		accept_filters();
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_BUTTON,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:filters_apply",
X		XV_X, 135,
X		XV_Y, 648,
X		PANEL_LABEL_STRING, "Apply",
X		PANEL_NOTIFY_PROC, accept_filters,
X		NULL);
X	return obj;
}
X
/*
X * Create object `filters_apply_and_save' in the specified instance.
X */
XXv_opaque
contool_filters_filters_apply_and_save_create(ip, owner)
X	contool_filters_objects	*ip;
X	Xv_opaque		owner;
{
X	extern void		accept_and_save_filters();
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_BUTTON,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:filters_apply_and_save",
X		XV_X, 200,
X		XV_Y, 648,
X		PANEL_LABEL_STRING, "Apply and Save",
X		PANEL_NOTIFY_PROC, accept_and_save_filters,
X		NULL);
X	return obj;
}
X
/*
X * Create object `filters_reset' in the specified instance.
X */
XXv_opaque
contool_filters_filters_reset_create(ip, owner)
X	contool_filters_objects	*ip;
X	Xv_opaque		owner;
{
X	extern void		reset_filters();
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_BUTTON,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:filters_reset",
X		XV_X, 324,
X		XV_Y, 648,
X		PANEL_LABEL_STRING, "Reset",
X		PANEL_NOTIFY_PROC, reset_filters,
X		NULL);
X	return obj;
}
X
/*
X * Initialize an instance of object `load'.
X */
contool_load_objects *
contool_load_objects_initialize(ip, owner)
X	contool_load_objects	*ip;
X	Xv_opaque	owner;
{
X	if (!ip && !(ip = (contool_load_objects *) calloc(1, sizeof (contool_load_objects))))
X		return (contool_load_objects *) NULL;
X	if (!ip->load)
X		ip->load = contool_load_load_create(ip, owner);
X	if (!ip->load_controls)
X		ip->load_controls = contool_load_load_controls_create(ip, ip->load);
X	if (!ip->load_type)
X		ip->load_type = contool_load_load_type_create(ip, ip->load_controls);
X	if (!ip->load_file)
X		ip->load_file = contool_load_load_file_create(ip, ip->load_controls);
X	if (!ip->accept_load)
X		ip->accept_load = contool_load_accept_load_create(ip, ip->load_controls);
X	return ip;
}
X
/*
X * Create object `load' in the specified instance.
X */
XXv_opaque
contool_load_load_create(ip, owner)
X	contool_load_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, FRAME_CMD,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_WIDTH, 444,
X		XV_HEIGHT, 146,
X		XV_LABEL, "Contool: Load Configuration",
X		XV_SHOW, FALSE,
X		FRAME_SHOW_FOOTER, FALSE,
X		FRAME_SHOW_RESIZE_CORNER, FALSE,
X		FRAME_CMD_PUSHPIN_IN, FALSE,
X		NULL);
X	xv_set(xv_get(obj, FRAME_CMD_PANEL), WIN_SHOW, FALSE, NULL);
X	return obj;
}
X
/*
X * Create object `load_controls' in the specified instance.
X */
XXv_opaque
contool_load_load_controls_create(ip, owner)
X	contool_load_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:load_controls",
X		XV_X, 0,
X		XV_Y, 0,
X		XV_WIDTH, WIN_EXTEND_TO_EDGE,
X		XV_HEIGHT, WIN_EXTEND_TO_EDGE,
X		WIN_BORDER, FALSE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `load_type' in the specified instance.
X */
XXv_opaque
contool_load_load_type_create(ip, owner)
X	contool_load_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_TOGGLE,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:load_type",
X		XV_X, 105,
X		XV_Y, 14,
X		PANEL_CHOICE_NCOLS, 1,
X		PANEL_LAYOUT, PANEL_HORIZONTAL,
X		PANEL_LABEL_STRING, "Load:",
X		PANEL_CHOICE_STRINGS,
X			"Tool properties",
X			"Filter definitions",
X			NULL,
X		PANEL_VALUE, 0,
X		NULL);
X	return obj;
}
X
/*
X * Create object `load_file' in the specified instance.
X */
XXv_opaque
contool_load_load_file_create(ip, owner)
X	contool_load_objects	*ip;
X	Xv_opaque		owner;
{
X	extern Panel_setting	filename_completion();
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_TEXT,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:load_file",
X		XV_X, 14,
X		XV_Y, 72,
X		PANEL_VALUE_DISPLAY_LENGTH, 35,
X		PANEL_VALUE_STORED_LENGTH, 256,
X		PANEL_LABEL_STRING, "Configuration file:",
X		PANEL_LAYOUT, PANEL_HORIZONTAL,
X		PANEL_READ_ONLY, FALSE,
X		PANEL_NOTIFY_PROC, filename_completion,
X		NULL);
X	return obj;
}
X
/*
X * Create object `accept_load' in the specified instance.
X */
XXv_opaque
contool_load_accept_load_create(ip, owner)
X	contool_load_objects	*ip;
X	Xv_opaque		owner;
{
X	extern void		load_filters();
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_BUTTON,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:accept_load",
X		XV_X, 199,
X		XV_Y, 107,
X		PANEL_LABEL_STRING, "Load",
X		PANEL_NOTIFY_PROC, load_filters,
X		NULL);
X	return obj;
}
X
/*
X * Initialize an instance of object `store'.
X */
contool_store_objects *
contool_store_objects_initialize(ip, owner)
X	contool_store_objects	*ip;
X	Xv_opaque	owner;
{
X	if (!ip && !(ip = (contool_store_objects *) calloc(1, sizeof (contool_store_objects))))
X		return (contool_store_objects *) NULL;
X	if (!ip->store)
X		ip->store = contool_store_store_create(ip, owner);
X	if (!ip->store_controls)
X		ip->store_controls = contool_store_store_controls_create(ip, ip->store);
X	if (!ip->store_type)
X		ip->store_type = contool_store_store_type_create(ip, ip->store_controls);
X	if (!ip->store_file)
X		ip->store_file = contool_store_store_file_create(ip, ip->store_controls);
X	if (!ip->accept_store)
X		ip->accept_store = contool_store_accept_store_create(ip, ip->store_controls);
X	return ip;
}
X
/*
X * Create object `store' in the specified instance.
X */
XXv_opaque
contool_store_store_create(ip, owner)
X	contool_store_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, FRAME_CMD,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_WIDTH, 444,
X		XV_HEIGHT, 146,
X		XV_LABEL, "Contool: Save Configuration",
X		XV_SHOW, FALSE,
X		FRAME_SHOW_FOOTER, FALSE,
X		FRAME_SHOW_RESIZE_CORNER, FALSE,
X		FRAME_CMD_PUSHPIN_IN, FALSE,
X		NULL);
X	xv_set(xv_get(obj, FRAME_CMD_PANEL), WIN_SHOW, FALSE, NULL);
X	return obj;
}
X
/*
X * Create object `store_controls' in the specified instance.
X */
XXv_opaque
contool_store_store_controls_create(ip, owner)
X	contool_store_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:store_controls",
X		XV_X, 0,
X		XV_Y, 0,
X		XV_WIDTH, WIN_EXTEND_TO_EDGE,
X		XV_HEIGHT, WIN_EXTEND_TO_EDGE,
X		WIN_BORDER, FALSE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `store_type' in the specified instance.
X */
XXv_opaque
contool_store_store_type_create(ip, owner)
X	contool_store_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_TOGGLE,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:store_type",
X		XV_X, 102,
X		XV_Y, 14,
X		PANEL_CHOICE_NCOLS, 1,
X		PANEL_LAYOUT, PANEL_HORIZONTAL,
X		PANEL_LABEL_STRING, "Store:",
X		PANEL_CHOICE_STRINGS,
X			"Tool properties",
X			"Filter definitions",
X			NULL,
X		PANEL_VALUE, 0,
X		NULL);
X	return obj;
}
X
/*
X * Create object `store_file' in the specified instance.
X */
XXv_opaque
contool_store_store_file_create(ip, owner)
X	contool_store_objects	*ip;
X	Xv_opaque		owner;
{
X	extern Panel_setting	filename_completion();
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_TEXT,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:store_file",
X		XV_X, 14,
X		XV_Y, 72,
X		PANEL_VALUE_DISPLAY_LENGTH, 35,
X		PANEL_VALUE_STORED_LENGTH, 256,
X		PANEL_LABEL_STRING, "Configuration file:",
X		PANEL_LAYOUT, PANEL_HORIZONTAL,
X		PANEL_READ_ONLY, FALSE,
X		PANEL_NOTIFY_PROC, filename_completion,
X		NULL);
X	return obj;
}
X
/*
X * Create object `accept_store' in the specified instance.
X */
XXv_opaque
contool_store_accept_store_create(ip, owner)
X	contool_store_objects	*ip;
X	Xv_opaque		owner;
{
X	extern void		store_filters();
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_BUTTON,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:accept_store",
X		XV_X, 197,
X		XV_Y, 107,
X		PANEL_LABEL_STRING, "Store",
X		PANEL_NOTIFY_PROC, store_filters,
X		NULL);
X	return obj;
}
X
/*
X * Initialize an instance of object `about'.
X */
contool_about_objects *
contool_about_objects_initialize(ip, owner)
X	contool_about_objects	*ip;
X	Xv_opaque	owner;
{
X	if (!ip && !(ip = (contool_about_objects *) calloc(1, sizeof (contool_about_objects))))
X		return (contool_about_objects *) NULL;
X	if (!ip->about)
X		ip->about = contool_about_about_create(ip, owner);
X	if (!ip->about_controls)
X		ip->about_controls = contool_about_about_controls_create(ip, ip->about);
X	if (!ip->message1)
X		ip->message1 = contool_about_message1_create(ip, ip->about_controls);
X	if (!ip->message5)
X		ip->message5 = contool_about_message5_create(ip, ip->about_controls);
X	if (!ip->message6)
X		ip->message6 = contool_about_message6_create(ip, ip->about_controls);
X	if (!ip->message7)
X		ip->message7 = contool_about_message7_create(ip, ip->about_controls);
X	if (!ip->message8)
X		ip->message8 = contool_about_message8_create(ip, ip->about_controls);
X	if (!ip->message9)
X		ip->message9 = contool_about_message9_create(ip, ip->about_controls);
X	if (!ip->message10)
X		ip->message10 = contool_about_message10_create(ip, ip->about_controls);
X	if (!ip->message11)
X		ip->message11 = contool_about_message11_create(ip, ip->about_controls);
X	if (!ip->message12)
X		ip->message12 = contool_about_message12_create(ip, ip->about_controls);
X	if (!ip->message13)
X		ip->message13 = contool_about_message13_create(ip, ip->about_controls);
X	if (!ip->message14)
X		ip->message14 = contool_about_message14_create(ip, ip->about_controls);
X	if (!ip->message16)
X		ip->message16 = contool_about_message16_create(ip, ip->about_controls);
X	if (!ip->message17)
X		ip->message17 = contool_about_message17_create(ip, ip->about_controls);
X	if (!ip->message18)
X		ip->message18 = contool_about_message18_create(ip, ip->about_controls);
X	if (!ip->message19)
X		ip->message19 = contool_about_message19_create(ip, ip->about_controls);
X	if (!ip->message20)
X		ip->message20 = contool_about_message20_create(ip, ip->about_controls);
X	if (!ip->send_mail)
X		ip->send_mail = contool_about_send_mail_create(ip, ip->about_controls);
X	return ip;
}
X
/*
X * Create object `about' in the specified instance.
X */
XXv_opaque
contool_about_about_create(ip, owner)
X	contool_about_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, FRAME_CMD,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_WIDTH, 509,
X		XV_HEIGHT, 376,
X		XV_LABEL, "Contool: About contool",
X		XV_SHOW, FALSE,
X		FRAME_SHOW_FOOTER, FALSE,
X		FRAME_SHOW_RESIZE_CORNER, FALSE,
X		FRAME_CMD_PUSHPIN_IN, TRUE,
X		NULL);
X	xv_set(xv_get(obj, FRAME_CMD_PANEL), WIN_SHOW, FALSE, NULL);
X	return obj;
}
X
/*
X * Create object `about_controls' in the specified instance.
X */
XXv_opaque
contool_about_about_controls_create(ip, owner)
X	contool_about_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:about_controls",
X		XV_X, 0,
X		XV_Y, 0,
X		XV_WIDTH, WIN_EXTEND_TO_EDGE,
X		XV_HEIGHT, WIN_EXTEND_TO_EDGE,
X		WIN_BORDER, FALSE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `message1' in the specified instance.
X */
XXv_opaque
contool_about_message1_create(ip, owner)
X	contool_about_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_MESSAGE,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:message1",
X		XV_X, 217,
X		XV_Y, 14,
X		PANEL_LABEL_STRING, "Contool 3.2a",
X		PANEL_LABEL_BOLD, TRUE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `message5' in the specified instance.
X */
XXv_opaque
contool_about_message5_create(ip, owner)
X	contool_about_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_MESSAGE,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:message5",
X		XV_X, 177,
X		XV_Y, 30,
X		PANEL_LABEL_STRING, "Copyright 1988 - 1992",
X		PANEL_LABEL_BOLD, TRUE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `message6' in the specified instance.
X */
XXv_opaque
contool_about_message6_create(ip, owner)
X	contool_about_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_MESSAGE,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:message6",
X		XV_X, 117,
X		XV_Y, 46,
X		PANEL_LABEL_STRING, "Chuck Musciano and Harris Corporation",
X		PANEL_LABEL_BOLD, TRUE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `message7' in the specified instance.
X */
XXv_opaque
contool_about_message7_create(ip, owner)
X	contool_about_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_MESSAGE,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:message7",
X		XV_X, 185,
X		XV_Y, 62,
X		PANEL_LABEL_STRING, "All Rights Reserved",
X		PANEL_LABEL_BOLD, TRUE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `message8' in the specified instance.
X */
XXv_opaque
contool_about_message8_create(ip, owner)
X	contool_about_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_MESSAGE,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:message8",
X		XV_X, 14,
X		XV_Y, 94,
X		PANEL_LABEL_STRING, "Contool was written using Sun's Devguide interface builder and the XView",
X		PANEL_LABEL_BOLD, FALSE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `message9' in the specified instance.
X */
XXv_opaque
contool_about_message9_create(ip, owner)
X	contool_about_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_MESSAGE,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:message9",
X		XV_X, 14,
X		XV_Y, 110,
X		PANEL_LABEL_STRING, "OPEN LOOK toolkit.  It originated as a SunView application in early 1987,",
X		PANEL_LABEL_BOLD, FALSE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `message10' in the specified instance.
X */
XXv_opaque
contool_about_message10_create(ip, owner)
X	contool_about_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_MESSAGE,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:message10",
X		XV_X, 14,
X		XV_Y, 126,
X		PANEL_LABEL_STRING, "was made freely available in 1988, and was ported to X Windows in 1990.",
X		PANEL_LABEL_BOLD, FALSE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `message11' in the specified instance.
X */
XXv_opaque
contool_about_message11_create(ip, owner)
X	contool_about_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_MESSAGE,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:message11",
X		XV_X, 14,
X		XV_Y, 158,
X		PANEL_LABEL_STRING, "I welcome comments, criticism, suggestions, and bug reports.  Almost every",
X		PANEL_LABEL_BOLD, FALSE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `message12' in the specified instance.
X */
XXv_opaque
contool_about_message12_create(ip, owner)
X	contool_about_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_MESSAGE,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:message12",
X		XV_X, 14,
X		XV_Y, 174,
X		PANEL_LABEL_STRING, "feature in this version of contool was added as the result of a user request. ",
X		PANEL_LABEL_BOLD, FALSE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `message13' in the specified instance.
X */
XXv_opaque
contool_about_message13_create(ip, owner)
X	contool_about_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_MESSAGE,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:message13",
X		XV_X, 14,
X		XV_Y, 190,
X		PANEL_LABEL_STRING, "User feedback is the single best driving force in the evolution of my tools.  I ",
X		PANEL_LABEL_BOLD, FALSE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `message14' in the specified instance.
X */
XXv_opaque
contool_about_message14_create(ip, owner)
X	contool_about_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_MESSAGE,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:message14",
X		XV_X, 14,
X		XV_Y, 206,
X		PANEL_LABEL_STRING, "look forward to hearing from you!",
X		PANEL_LABEL_BOLD, FALSE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `message16' in the specified instance.
X */
XXv_opaque
contool_about_message16_create(ip, owner)
X	contool_about_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_MESSAGE,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:message16",
X		XV_X, 14,
X		XV_Y, 238,
X		PANEL_LABEL_STRING, "Contool has been released for private, not-for-profit use, and the copyright",
X		PANEL_LABEL_BOLD, FALSE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `message17' in the specified instance.
X */
XXv_opaque
contool_about_message17_create(ip, owner)
X	contool_about_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_MESSAGE,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:message17",
X		XV_X, 14,
X		XV_Y, 254,
X		PANEL_LABEL_STRING, "on the source code is retained by myself and Harris Corporation, my employer.",
X		PANEL_LABEL_BOLD, FALSE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `message18' in the specified instance.
X */
XXv_opaque
contool_about_message18_create(ip, owner)
X	contool_about_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_MESSAGE,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:message18",
X		XV_X, 14,
X		XV_Y, 270,
X		PANEL_LABEL_STRING, "This means that you can give the source code to anyone but you cannot sell",
X		PANEL_LABEL_BOLD, FALSE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `message19' in the specified instance.
X */
XXv_opaque
contool_about_message19_create(ip, owner)
X	contool_about_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_MESSAGE,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:message19",
X		XV_X, 14,
X		XV_Y, 286,
X		PANEL_LABEL_STRING, "any part of the source code, nor can you incorporate any part of the source",
X		PANEL_LABEL_BOLD, FALSE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `message20' in the specified instance.
X */
XXv_opaque
contool_about_message20_create(ip, owner)
X	contool_about_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_MESSAGE,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:message20",
X		XV_X, 14,
X		XV_Y, 302,
X		PANEL_LABEL_STRING, "code into a product which is subsequently sold.",
X		PANEL_LABEL_BOLD, FALSE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `send_mail' in the specified instance.
X */
XXv_opaque
contool_about_send_mail_create(ip, owner)
X	contool_about_objects	*ip;
X	Xv_opaque		owner;
{
X	extern void		popup_send_mail();
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_BUTTON,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:send_mail",
X		XV_X, 210,
X		XV_Y, 336,
X		PANEL_LABEL_STRING, "Send Mail...",
X		PANEL_NOTIFY_PROC, popup_send_mail,
X		NULL);
X	return obj;
}
X
/*
X * Initialize an instance of object `mail'.
X */
contool_mail_objects *
contool_mail_objects_initialize(ip, owner)
X	contool_mail_objects	*ip;
X	Xv_opaque	owner;
{
X	if (!ip && !(ip = (contool_mail_objects *) calloc(1, sizeof (contool_mail_objects))))
X		return (contool_mail_objects *) NULL;
X	if (!ip->mail)
X		ip->mail = contool_mail_mail_create(ip, owner);
X	if (!ip->mail_controls)
X		ip->mail_controls = contool_mail_mail_controls_create(ip, ip->mail);
X	if (!ip->message21)
X		ip->message21 = contool_mail_message21_create(ip, ip->mail_controls);
X	if (!ip->message22)
X		ip->message22 = contool_mail_message22_create(ip, ip->mail_controls);
X	if (!ip->address)
X		ip->address = contool_mail_address_create(ip, ip->mail_controls);
X	if (!ip->fixed_address)
X		ip->fixed_address = contool_mail_fixed_address_create(ip, ip->mail_controls);
X	if (!ip->other_address)
X		ip->other_address = contool_mail_other_address_create(ip, ip->mail_controls);
X	if (!ip->message)
X		ip->message = contool_mail_message_create(ip, ip->mail);
X	if (!ip->mail_controls1)
X		ip->mail_controls1 = contool_mail_mail_controls1_create(ip, ip->mail);
X	if (!ip->accept_send)
X		ip->accept_send = contool_mail_accept_send_create(ip, ip->mail_controls1);
X	return ip;
}
X
/*
X * Create object `mail' in the specified instance.
X */
XXv_opaque
contool_mail_mail_create(ip, owner)
X	contool_mail_objects	*ip;
X	Xv_opaque		owner;
{
X	extern void	done_mail();
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, FRAME_CMD,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_WIDTH, 506,
X		XV_HEIGHT, 338,
X		XV_LABEL, "Contool: Send mail",
X		XV_SHOW, FALSE,
X		FRAME_SHOW_FOOTER, FALSE,
X		FRAME_SHOW_RESIZE_CORNER, FALSE,
X		FRAME_CMD_PUSHPIN_IN, FALSE,
X		FRAME_DONE_PROC, done_mail,
X		NULL);
X	xv_set(xv_get(obj, FRAME_CMD_PANEL), WIN_SHOW, FALSE, NULL);
X	return obj;
}
X
/*
X * Create object `mail_controls' in the specified instance.
X */
XXv_opaque
contool_mail_mail_controls_create(ip, owner)
X	contool_mail_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:mail_controls",
X		XV_X, 0,
X		XV_Y, 0,
X		XV_WIDTH, WIN_EXTEND_TO_EDGE,
X		XV_HEIGHT, 92,
X		WIN_BORDER, FALSE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `message21' in the specified instance.
X */
XXv_opaque
contool_mail_message21_create(ip, owner)
X	contool_mail_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_MESSAGE,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:message21",
X		XV_X, 14,
X		XV_Y, 14,
X		PANEL_LABEL_STRING, "Your feedback is appreciated.  To ensure that your message reaches me, check",
X		PANEL_LABEL_BOLD, FALSE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `message22' in the specified instance.
X */
XXv_opaque
contool_mail_message22_create(ip, owner)
X	contool_mail_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_MESSAGE,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:message22",
X		XV_X, 14,
X		XV_Y, 30,
X		PANEL_LABEL_STRING, "that the \"To\" address is valid for your site before clicking \"Send\".",
X		PANEL_LABEL_BOLD, FALSE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `address' in the specified instance.
X */
XXv_opaque
contool_mail_address_create(ip, owner)
X	contool_mail_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_ABBREV_MENU_BUTTON,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:address",
X		XV_X, 14,
X		XV_Y, 69,
X		PANEL_LABEL_STRING, "To:",
X		PANEL_ITEM_MENU, contool_address_menu_create((caddr_t *) ip, NULL),
X		NULL);
X	return obj;
}
X
/*
X * Create object `fixed_address' in the specified instance.
X */
XXv_opaque
contool_mail_fixed_address_create(ip, owner)
X	contool_mail_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_MESSAGE,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:fixed_address",
X		XV_X, 70,
X		XV_Y, 69,
X		PANEL_LABEL_STRING, "chuck@trantor.harris-atd.com",
X		PANEL_LABEL_BOLD, FALSE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `other_address' in the specified instance.
X */
XXv_opaque
contool_mail_other_address_create(ip, owner)
X	contool_mail_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_TEXT,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:other_address",
X		XV_X, 116,
X		XV_Y, 69,
X		PANEL_VALUE_DISPLAY_LENGTH, 46,
X		PANEL_VALUE_STORED_LENGTH, 256,
X		PANEL_LAYOUT, PANEL_HORIZONTAL,
X		PANEL_READ_ONLY, FALSE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `message' in the specified instance.
X */
XXv_opaque
contool_mail_message_create(ip, owner)
X	contool_mail_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, TEXTSW,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:message",
X		XV_X, 0,
X		XV_Y, (int)xv_get(ip->mail_controls, XV_Y) +
X		      (int)xv_get(ip->mail_controls, XV_HEIGHT),
X		XV_WIDTH, WIN_EXTEND_TO_EDGE,
X		XV_HEIGHT, 188,
X		OPENWIN_SHOW_BORDERS, TRUE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `mail_controls1' in the specified instance.
X */
XXv_opaque
contool_mail_mail_controls1_create(ip, owner)
X	contool_mail_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:mail_controls1",
X		XV_X, 0,
X		XV_Y, (int)xv_get(ip->message, XV_Y) +
X		      (int)xv_get(ip->message, XV_HEIGHT),
X		XV_WIDTH, WIN_EXTEND_TO_EDGE,
X		XV_HEIGHT, WIN_EXTEND_TO_EDGE,
X		WIN_BORDER, FALSE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `accept_send' in the specified instance.
X */
XXv_opaque
contool_mail_accept_send_create(ip, owner)
X	contool_mail_objects	*ip;
X	Xv_opaque		owner;
{
X	extern void		send_mail();
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_BUTTON,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:accept_send",
X		XV_X, 229,
X		XV_Y, 18,
X		PANEL_LABEL_STRING, "Send",
X		PANEL_NOTIFY_PROC, send_mail,
X		NULL);
X	return obj;
}
X
/*
X * Initialize an instance of object `message_archive'.
X */
contool_message_archive_objects *
contool_message_archive_objects_initialize(ip, owner)
X	contool_message_archive_objects	*ip;
X	Xv_opaque	owner;
{
X	if (!ip && !(ip = (contool_message_archive_objects *) calloc(1, sizeof (contool_message_archive_objects))))
X		return (contool_message_archive_objects *) NULL;
X	if (!ip->message_archive)
X		ip->message_archive = contool_message_archive_message_archive_create(ip, owner);
X	if (!ip->archive_controls)
X		ip->archive_controls = contool_message_archive_archive_controls_create(ip, ip->message_archive);
X	if (!ip->clear)
X		ip->clear = contool_message_archive_clear_create(ip, ip->archive_controls);
X	if (!ip->print)
X		ip->print = contool_message_archive_print_create(ip, ip->archive_controls);
X	if (!ip->archive)
X		ip->archive = contool_message_archive_archive_create(ip, ip->message_archive);
X	return ip;
}
X
/*
X * Create object `message_archive' in the specified instance.
X */
XXv_opaque
contool_message_archive_message_archive_create(ip, owner)
X	contool_message_archive_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, FRAME_CMD,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_WIDTH, 575,
X		XV_HEIGHT, 246,
X		XV_LABEL, "Contool: Message Archive",
X		XV_SHOW, FALSE,
X		FRAME_SHOW_FOOTER, TRUE,
X		FRAME_SHOW_RESIZE_CORNER, TRUE,
X		FRAME_CMD_PUSHPIN_IN, TRUE,
X		NULL);
X	xv_set(xv_get(obj, FRAME_CMD_PANEL), WIN_SHOW, FALSE, NULL);
X	return obj;
}
X
/*
X * Create object `archive_controls' in the specified instance.
X */
XXv_opaque
contool_message_archive_archive_controls_create(ip, owner)
X	contool_message_archive_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:archive_controls",
X		XV_X, 0,
X		XV_Y, 0,
X		XV_WIDTH, WIN_EXTEND_TO_EDGE,
X		XV_HEIGHT, 32,
X		WIN_BORDER, FALSE,
X		NULL);
X	return obj;
}
X
/*
X * Create object `clear' in the specified instance.
X */
XXv_opaque
contool_message_archive_clear_create(ip, owner)
X	contool_message_archive_objects	*ip;
X	Xv_opaque		owner;
{
X	extern void		clear_archive();
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_BUTTON,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:clear",
X		XV_X, 4,
X		XV_Y, 4,
X		PANEL_LABEL_STRING, "Clear",
X		PANEL_NOTIFY_PROC, clear_archive,
X		NULL);
X	return obj;
}
X
/*
X * Create object `print' in the specified instance.
X */
XXv_opaque
contool_message_archive_print_create(ip, owner)
X	contool_message_archive_objects	*ip;
X	Xv_opaque		owner;
{
X	extern void		print_archive();
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, PANEL_BUTTON,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:print",
X		XV_X, 63,
X		XV_Y, 4,
X		PANEL_LABEL_STRING, "Print",
X		PANEL_NOTIFY_PROC, print_archive,
X		NULL);
X	return obj;
}
X
/*
X * Create object `archive' in the specified instance.
X */
XXv_opaque
contool_message_archive_archive_create(ip, owner)
X	contool_message_archive_objects	*ip;
X	Xv_opaque		owner;
{
X	Xv_opaque	obj;
X	
X	obj = xv_create(owner, TEXTSW,
X		XV_KEY_DATA, INSTANCE, ip,
X		XV_HELP_DATA, "contool:archive",
X		XV_X, 0,
X		XV_Y, 27,
X		XV_WIDTH, WIN_EXTEND_TO_EDGE,
X		XV_HEIGHT, WIN_EXTEND_TO_EDGE,
X		OPENWIN_SHOW_BORDERS, TRUE,
X		NULL);
X	return obj;
}
X
SHAR_EOF
echo 'File contool_ui.c is complete' &&
chmod 0664 contool_ui.c ||
echo 'restore of contool_ui.c failed'
Wc_c="`wc -c < 'contool_ui.c'`"
test 62728 -eq "$Wc_c" ||
	echo 'contool_ui.c: original size 62728, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= error.c ==============
if test -f 'error.c' -a X"$1" != X"-c"; then
	echo 'x - skipping error.c (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting error.c (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'error.c' &&
/************************************************************************/
/*	Copyright 1987-1992 by Chuck Musciano and Harris Corporation 	*/
/*									*/
/*	Full ownership of this software, and all rights pertaining to 	*/
/*	the for-profit distribution of this software, are retained by 	*/
/*	Chuck Musciano and Harris Corporation.  You are permitted to 	*/
/*	use this software without fee.  This software is provided "as 	*/
/*	is" without express or implied warranty.  You may redistribute 	*/
/*	this software, provided that this copyright notice is retained,	*/
/*	and that the software is not distributed for profit.  If you 	*/
/*	wish to use this software in a profit-making venture, you must 	*/
/*	first license this code and its underlying technology from 	*/
/*	Harris Corporation. 						*/
/*									*/
/*	Bottom line: you can have this software, you can use it, you 	*/
/*	can give it away.  You just can't sell any or all parts of it 	*/
/*	without prior permission from Harris Corporation. 		*/
/************************************************************************/
X
/************************************************************************/
/*									*/
/*	error.c		handle error messages				*/
/*									*/
/************************************************************************/
X
#include	<stdio.h>
#include	<xview/xview.h>
#include	<xview/notice.h>
X
#include	"manifest.h"
#include	"contool_ui.h"
X
PUBLIC	contool_base_objects	*contool_base;
X
/************************************************************************/
EXPORT	void	error(a, b, c, d, e, f)
X
char	*a, *b, *c, *d, *e, *f;
X
{	char	buf[1024];
X
X	sprintf(buf, a, b, c, d, e, f);
X	notice_prompt(contool_base->base, NULL,
X		         NOTICE_MESSAGE_STRINGS, buf, 0,
X		         NOTICE_BUTTON_YES, "OK",
X		      0);
}
X
/************************************************************************/
EXPORT	void	abend(a, b, c, d, e, f)
X
char	*a, *b, *c, *d, *e, *f;
X
{	char	buf[1024];
X
X	fprintf(stderr, a, b, c, d, e, f);
X	fprintf(stderr, "\n");
X	exit(1);
}
SHAR_EOF
chmod 0644 error.c ||
echo 'restore of error.c failed'
Wc_c="`wc -c < 'error.c'`"
test 2036 -eq "$Wc_c" ||
	echo 'error.c: original size 2036, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= expand.c ==============
if test -f 'expand.c' -a X"$1" != X"-c"; then
	echo 'x - skipping expand.c (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting expand.c (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'expand.c' &&
/************************************************************************/
/*	Copyright 1987-1992 by Chuck Musciano and Harris Corporation 	*/
/*									*/
/*	Full ownership of this software, and all rights pertaining to 	*/
/*	the for-profit distribution of this software, are retained by 	*/
/*	Chuck Musciano and Harris Corporation.  You are permitted to 	*/
/*	use this software without fee.  This software is provided "as 	*/
/*	is" without express or implied warranty.  You may redistribute 	*/
/*	this software, provided that this copyright notice is retained,	*/
/*	and that the software is not distributed for profit.  If you 	*/
/*	wish to use this software in a profit-making venture, you must 	*/
/*	first license this code and its underlying technology from 	*/
/*	Harris Corporation. 						*/
/*									*/
/*	Bottom line: you can have this software, you can use it, you 	*/
/*	can give it away.  You just can't sell any or all parts of it 	*/
/*	without prior permission from Harris Corporation. 		*/
/************************************************************************/
X
#include	<sys/types.h>
#include	<sys/dir.h>
#include	<pwd.h>
X
#include	"manifest.h"
X
PUBLIC	char	*rindex(), *index();
X
/************************************************************************/
PRIVATE	char	*root_path(path)
X
char	*path;
X
{	char	*p;
X
X	if (p = rindex(path, '/'))
X	   if (p == path)
X	      p[1] = '\0';
X	   else
X	      *p = '\0';
X	else
X	   *path = '\0';
X	return(path);
}
X
/************************************************************************/
PRIVATE	char	*last_node(path)
X
char	*path;
X
{	char	*p;
X
X	return((p = rindex(path, '/'))? p + 1 : path);
}
X
/************************************************************************/
EXPORT	char	*expand_filename(path)
X
char	*path;
X
{	static	char	s[1024];
X	char	pattern[1024], candidate[1024], *p,*q;
X	DIR	*dir;
X	struct	direct *dp;
X	struct	passwd	*pw;
X
X	strcpy(s, path);
X	if (*path == '~')
X	   if (path[1] == '/' || path[1] == '\0') {
X	      strcpy(s, getenv("HOME"));
X	      strcat(s, path + 1);
X	      }
X	   else {
X	      if ((p = index(path, '/')) != NULL)
X	         *p = '\0';
X	      if ((pw = getpwnam(path + 1)) != NULL) {
X	         strcpy(s, pw->pw_dir);
X	         if (p != NULL) {
X	            strcat(s, "/");
X	            strcat(s, p + 1);
X	            }
X	         }
X	      else
X	         return(NULL);
X	      }
X	strcpy(pattern, last_node(s));
X	if (*pattern == '\0')
X	   return(s);
X	root_path(s);
X	candidate[0] = '\0';
X	if (*s == '\0')
X	   strcpy(s, ".");
X	if ((dir = opendir(s)) == NULL) {
X	   strcpy(s, path);
X	   return(s);
X	   }
X	while ((dp = readdir(dir)) != NULL)
X	   if (strncmp(dp->d_name, pattern, strlen(pattern)) == 0)
X	      if (*candidate == '\0')
X	         strcpy(candidate, dp->d_name);
X	      else {
X	         for (p = candidate, q = dp->d_name; *p == *q; p++, q++)
X	            ;
X	         *p = '\0';
X	         }
X	closedir(dir);
X	if (*candidate == '\0')
X	   return(NULL);
X	else {
X	   if (strcmp(s, ".") == 0)
X	      *s = '\0';
X	   else if (s[strlen(s) - 1] != '/')
X	      strcat(s, "/");
X	   strcat(s, candidate);
X	   }
X	return(s);
}
SHAR_EOF
chmod 0644 expand.c ||
echo 'restore of expand.c failed'
Wc_c="`wc -c < 'expand.c'`"
test 3112 -eq "$Wc_c" ||
	echo 'expand.c: original size 3112, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= filename_completion.c ==============
if test -f 'filename_completion.c' -a X"$1" != X"-c"; then
	echo 'x - skipping filename_completion.c (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting filename_completion.c (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'filename_completion.c' &&
/************************************************************************/
/*	Copyright 1987-1992 by Chuck Musciano and Harris Corporation 	*/
/*									*/
/*	Full ownership of this software, and all rights pertaining to 	*/
/*	the for-profit distribution of this software, are retained by 	*/
/*	Chuck Musciano and Harris Corporation.  You are permitted to 	*/
/*	use this software without fee.  This software is provided "as 	*/
/*	is" without express or implied warranty.  You may redistribute 	*/
/*	this software, provided that this copyright notice is retained,	*/
/*	and that the software is not distributed for profit.  If you 	*/
/*	wish to use this software in a profit-making venture, you must 	*/
/*	first license this code and its underlying technology from 	*/
/*	Harris Corporation. 						*/
/*									*/
/*	Bottom line: you can have this software, you can use it, you 	*/
/*	can give it away.  You just can't sell any or all parts of it 	*/
/*	without prior permission from Harris Corporation. 		*/
/************************************************************************/
X
/************************************************************************/
/*									*/
/*	filename_completion.c	completion handler for text items	*/
/*									*/
/************************************************************************/
X
#include	<stdio.h>
#include	<sys/param.h>
#include	<sys/types.h>
#include	<xview/xview.h>
#include	<xview/panel.h>
X
#include	"manifest.h"
X
/************************************************************************/
EXPORT	Panel_setting	filename_completion(item, event)
X
Panel_item	item;
Event		*event;
X
{	char	*p, *expand_filename();
X
X	switch (event_action(event)) {
X	   case '\n' :
X	   case '\r' : 
X	   case ' '  : if ((p = expand_filename((char *) xv_get(item, PANEL_VALUE))) == NULL)
X	   		  window_bell(xv_get(item, XV_OWNER));
X	   	       else
X	   	          xv_set(item, PANEL_VALUE, p, 0);
X	   	       event_set_id(event, '\n');
X	   	       return(PANEL_NONE);
X	   case '\t' : return(event_shift_is_down(event)? PANEL_PREVIOUS : PANEL_NEXT);
X	   default   : return(panel_text_notify(item, event));
X	   }
}
SHAR_EOF
chmod 0644 filename_completion.c ||
echo 'restore of filename_completion.c failed'
Wc_c="`wc -c < 'filename_completion.c'`"
test 2146 -eq "$Wc_c" ||
	echo 'filename_completion.c: original size 2146, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= filters.c ==============
if test -f 'filters.c' -a X"$1" != X"-c"; then
	echo 'x - skipping filters.c (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting filters.c (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'filters.c' &&
/************************************************************************/
/*	Copyright 1987-1992 by Chuck Musciano and Harris Corporation 	*/
/*									*/
/*	Full ownership of this software, and all rights pertaining to 	*/
/*	the for-profit distribution of this software, are retained by 	*/
/*	Chuck Musciano and Harris Corporation.  You are permitted to 	*/
/*	use this software without fee.  This software is provided "as 	*/
/*	is" without express or implied warranty.  You may redistribute 	*/
/*	this software, provided that this copyright notice is retained,	*/
/*	and that the software is not distributed for profit.  If you 	*/
/*	wish to use this software in a profit-making venture, you must 	*/
/*	first license this code and its underlying technology from 	*/
/*	Harris Corporation. 						*/
/*									*/
/*	Bottom line: you can have this software, you can use it, you 	*/
/*	can give it away.  You just can't sell any or all parts of it 	*/
/*	without prior permission from Harris Corporation. 		*/
/************************************************************************/
X
/************************************************************************/
/*									*/
/*	filters.c	contool filters dialog manager			*/
/*									*/
/************************************************************************/
X
#include	<stdio.h>
#include	<sys/param.h>
#include	<sys/types.h>
#include	<xview/xview.h>
#include	<xview/panel.h>
#include	<xview/notice.h>
#include	<xview/xv_xrect.h>
X
#include	"manifest.h"
#include	"contool.h"
#include	"contool_ui.h"
X
EXPORT	Filter	*filters = NULL;
X
PUBLIC	contool_base_objects	*contool_base;
X
PRIVATE	short	single_bits[] = {
#include	"images/single.icon"
X			  };
X
PRIVATE	short	range_bits[] = {
#include	"images/range.icon"
X			  };
X
PRIVATE	short	empty_bits[] = {
#include	"images/empty.icon"
X			  };
X
PRIVATE	Filter	*edit_set = NULL, *clipboard = NULL;
PRIVATE	contool_filters_objects	*contool_filters = NULL;
PRIVATE	Server_image	single, range, empty;
X
/************************************************************************/
PRIVATE	int	selection_count()
X
{	int	i, s, total;
X
X	total = (int) xv_get(contool_filters->filter_list, PANEL_LIST_NROWS);
X	for (i = s = 0; i < total; i++)
X	   if (xv_get(contool_filters->filter_list, PANEL_LIST_SELECTED, i))
X	      s++;
X	return(s);
}
X
/************************************************************************/
PRIVATE	int	curr_selection()
X
{	int	i, total;
X
X	for (i = 0, total = (int) xv_get(contool_filters->filter_list, PANEL_LIST_NROWS); i < total; i++)
X	   if (xv_get(contool_filters->filter_list, PANEL_LIST_SELECTED, i))
X	      break;
X	if (i >= total)
X	   fprintf(stderr, "No item selected!\n");
X	return(i);
}
X
/************************************************************************/
PRIVATE	Filter	*duplicate_filter(f)
X
Filter	*f;
X
{	Filter	*new;
X
X	new = (Filter *) malloc(sizeof(Filter));
X	*new = *f;
X	new->start = strsave(f->start);
X	new->stop = strsave(f->stop);
X	compile_exp(new, new->start, new->stop);
X	new->command = strsave(f->command);
X	new->comment = strsave(f->comment);
X	new->next = NULL;
X	return(new);
}
X
/************************************************************************/
PRIVATE	Filter	*duplicate_list(list)
X
Filter	*list;
X
{	Filter	*f, *head = NULL, *curr;
X
X	for (f = list; f; f = f->next)
X	   if (head == NULL)
X	      head = curr = duplicate_filter(f);
X	   else {
X	      curr->next = duplicate_filter(f);
X	      curr = curr->next;
X	      }
X	return(head);
}
X
/************************************************************************/
SHAR_EOF
true || echo 'restore of filters.c failed'
fi
echo 'End of  part 3'
echo 'File filters.c is continued in part 4'
echo 4 > _shar_seq_.tmp
exit 0
-- 
--
Molecular Simulations, Inc.			mail: dcmartin@msi.com
796 N. Pastoria Avenue				uucp: uunet!dcmartin
Sunnyvale, California 94086			at&t: 408/522-9236
