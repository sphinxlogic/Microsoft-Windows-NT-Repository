Newsgroups: comp.sources.x
From: MAP@BBN.com (Michael Patton)
Subject: v21i089:  xforward - X through a firewall, Part01/01
Message-ID: <1994Jan11.215408.28522@sparky.sterling.com>
X-Md4-Signature: 2427f9c50befb88cc8e23841f2e5ae8a
Sender: chris@sparky.sterling.com (Chris Olson)
Organization: Sterling Software
Date: Tue, 11 Jan 1994 21:54:08 GMT
Approved: chris@sterling.com

Submitted-by: MAP@BBN.com (Michael Patton)
Posting-number: Volume 21, Issue 89
Archive-name: xforward/part01
Environment: X11, Athena, OSF/Motif

This is a shar of Xforward, a program to allow controlled operation of
the X11 protocol through a firewall system.  This was principally
written at DEC's Cambridge Research Lab, but I have added several new
options, specifically the ability to build it with Athena widgets
rather than requiring Motif as the original did.  See the README and
manpage for more details.

	-MAP

---------------- Cut Here ----------------
#! /bin/sh
# To extract, remove mail header lines and type "sh filename"
echo x - README
sed -e 's/^X//' > README << '!FaR!OuT!'
XThis is version 1.0a of xforward, a program for relaying X11
Xconnections across network boundaries.  This version was modified at
XBolt Beranek and Newman from Version 1.0 obtained from DEC CRL.  While
Xit may be used to cross security boundaries, Digital Equipment
XCorporation and Bolt Beranek and Newman do not warrant this software
Xfor security or any other purpose.
X
XSee the file NOTICE included in this distribution for information about
Xcopying and using this software.
X
Xxforward can be built with the Motif user interface toolkit, if you
Xhave it.  It can be built with the Athena Widgets toolkit which should
Xhave come with your X11 release.
X
X
XWhere to Get Xforward
X---------------------
X
XThe current version of xforward can be copied by anonymous FTP from
Xcrl.dec.com:/pub/DEC/xforward.tar.Z.
X
XBug fixes, reports, and other changes should be sent to
Xtreese@crl.dec.com.
X
X
XInstallation with Motif
X-----------------------
X
X1. copy Makefile.Motif to Makefile
X
X2. Check the Makefile to make sure you like the paths and compiler
Xoptions.  Non-DEC platforms will probably require some changes for the
Xheader file and library file paths.  (Yes, an Imakefile would be nice.
XBut I have yet to see a way to make a portable Imakefile for using
XMotif.)
X
X3. Execute "make all"
X
X4. Execute "make install"
X
X
XInstallation with Athena Widgets
X--------------------------------
X
X1. Execute "xmkmf"
X
X2. Execute "make all"
X
X3. Execute "make install"
X
X
XReading About Xforward
X----------------------
X
XThe design and implementation of xforward are described in
X
X	Treese, G. Winfield and Alec Wolman
X	X Through the Firewall, and Other Application Relays
X	Proceedings of the USENIX Summer Conference, June, 1993
X
XA preprint of this paper is available as technical report 93/10 from
Xthe Cambridge Research Lab of Digital Equipment Corporation, which can
Xbe obtained by anonymous FTP from
Xcrl.dec.com:/pub/DEC/CRL/tech-reports/93.10.ps.Z, or by sending an
Xelectronic mail message with the word "help" in the body to
Xtechreports@crl.dec.com.
X
XAcknowledgements
X----------------
X
Xxforward is derived from a program originally written by John Kohl.
XWin Treese designed and Alec Wolman implemented the host access and
Xdialog box mechanisms.  Michael Patton added several useful options
Xand the Athena Widget code.
X
X
XWin Treese
XCambridge Research Lab
XDigital Equipment Corp.
Xtreese@crl.dec.com
X4 June 1993
X
X
X
X
!FaR!OuT!
echo x - NOTICE
sed -e 's/^X//' > NOTICE << '!FaR!OuT!'
X/*              Copyright 1992, 1993 Digital Equipment Corporation
X *                        All Rights Reserved
X *
X * Permission to use, copy, and modify this software and its documentation is
X * hereby granted only under the following terms and conditions.  Both the
X * above copyright notice and this permission notice must appear in all copies
X * of the software, derivative works or modified versions, and any portions
X * thereof, and both notices must appear in supporting documentation.
X *
X * Users of this software agree to the terms and conditions set forth herein,
X * and hereby grant back to Digital a non-exclusive, unrestricted, royalty-free
X * right and license under any changes, enhancements or extensions made to the
X * core functions of the software, including but not limited to those affording
X * compatibility with other hardware or software environments, but excluding
X * applications which incorporate this software.  Users further agree to use
X * their best efforts to return to Digital any such changes, enhancements or
X * extensions that they make and inform Digital of noteworthy uses of this
X * software.  Correspondence should be provided to Digital at:
X *
X *                      Director of Licensing
X *                      Cambridge Research Laboratory
X *                      Digital Equipment Corporation
X *                      One Kendall Square, Bld. 700
X *                      Cambridge, MA 02139  
X *
X * This software may be distributed (but not offered for sale or transferred 
X * for compensation except on systems manufactured by Digital Equipment 
X * Corporation) to third parties, provided such third parties agree to abide 
X * by the terms and conditions of this notice.  
X *
X * THE SOFTWARE IS PROVIDED "AS IS" AND DIGITAL EQUIPMENT CORP. DISCLAIMS ALL
X * WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF
X * MERCHANTABILITY AND FITNESS.   IN NO EVENT SHALL DIGITAL EQUIPMENT
X * CORPORATION BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
X * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
X * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
X * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
X * SOFTWARE.
X */
!FaR!OuT!
echo x - Imakefile
sed -e 's/^X//' > Imakefile << '!FaR!OuT!'
X        DEPLIBS = XawClientDepLibs
XLOCAL_LIBRARIES = XawClientLibs
X           SRCS = xforward.c
X           OBJS = xforward.o
X/* Other files included in distribution... */
X      OTHERDIST = README NOTICE Imakefile Makefile.Motif xforward.1
X
XAllTarget(xforward)
XNormalProgramTarget(xforward,$(OBJS),$(DEPLIBS),$(LOCAL_LIBRARIES), /**/)
XInstallProgramWithFlags(xforward, $(BINDIR), /**/)
XInstallManPage(xforward,$(MANDIR))
X
X/*InstallAppDefaults(XForward)*/
X
XDependTarget()
X
X/* Some personal hacks... */
XSHAR:	$(OTHERDIST) $(SRCS)
X	shar $(OTHERDIST) $(SRCS) > SHAR
!FaR!OuT!
echo x - Makefile.Motif
sed -e 's/^X//' > Makefile.Motif << '!FaR!OuT!'
X# This makefile is for xforward.
X# See the file NOTICE for distribution information.
X#
X#       Created: 	21 Oct 1990
X#
X#	Win Treese
X#	Cambridge Research Lab
X#	Digital Equipment Corporation
X#	treese@crl.dec.com
X#
X#	$Source: /usr/mpatton/Play/xforward/RCS/Makefile.Motif,v $
X#	$Header: Makefile.Motif,v 1.3 93/11/25 13:18:38 map Exp $
X#
X
X# Where to install things
X# DESTDIR is normally empty, unless you want an entirely different root.
X# BINDIR is where the executable will be installed.
X# MANDIR is where the manual page will be installed.
X
XDESTDIR=
XBINDIR=/usr/local/bin
XMANDIR=/usr/local/man/man1
X
X# Where to find things
X# INCFLAGS lists directories to search for header files
X# LDFLAGS lists directories to search for libraries
X# LIBS lists the necessary libraries (Motif, Xt, X11)
X
XXDIR=/usr/local/X11R5
X
XINCFLAGS= -I${XDIR}/include/X11 -I${XDIR}/lib/Xt
XLDFLAGS= -L${XDIR}/lib -L${XDIR}/lib/Xt
XLIBS= -lXm -lXt -lX11
X
XCFLAGS= ${INCFLAGS} -O -DUSE_MOTIF
X
X# For CenterLine CodeCenter
XCENTER_FLAGS= ${INCFLAGS}
X
XSRCS= xforward.c
XAUXFILES= README NOTICE Makefile xforward.1
X
XPROGS = xforward
X
Xall: ${PROGS}
X
Xxforward:	xforward.o
X	cc ${LDFLAGS} xforward.o -o xforward ${LIBS}
X
Xxforward.o:	xforward.c
X	cc -c ${CFLAGS} xforward.c
X
Xinstall: ${PROGS}
X	install -c xforward ${DESTDIR}${BINDIR}/xforward
X	install -c xforward.1 ${DESTDIR}${MANDIR}/xforward.1
Xclean: 	;
X	rm -f *~ *.o core ${PROGS}
X
Xcenter:
X	#load ${LDFLAGS} ${LIBS}
X	#load ${CENTER_FLAGS} xforward.c
X
Xshar:
X	shar ${AUXFILES} ${SRCS} > xforward.shar
X
Xdist:
X	tar cf - ${AUXFILES} ${SRCS} | compress -c > xforward.tar.Z
!FaR!OuT!
echo x - xforward.1
sed -e 's/^X//' > xforward.1 << '!FaR!OuT!'
X.TH xforward local
X.SH NAME
Xxforward \- provide user-level X forwarding service
X.SH SYNOPSIS
X.B xforward [options]
X.SH OVERVIEW
X.B xforward
Xprovides a user-level X11 forwarding service which can be useful if there
Xare IP network topologies which provide non-transitive routing (e.g. routers
Xwhich implement policy packet screening).  Clients request to display
Xon a fictitious display.  When the open request is received by 
X.B xforward
Xit pops up a query on the user's real display asking for confirmation
Xand if granted, 
X.B xforward
Xpasses data for that connection between the fictitious display and the
Xreal display.
X.SH OPTIONS
X.TP
X.B \-display \fIdisplay\fP
X.IP 
XSpecifies the destination display where the user wants applications to 
Xappear.  Without this argument, xforward will use the DISPLAY environment
Xvariable.
X.TP
X.B \-n \fIdisp-nbr\fP
X.IP
XSpecifies the number to use for the fictitious display.  If not
Xspecified, xforward uses the value 10.  If the given display number is
Xalready used, xforwaqrd will search incrementally for an available
Xvalue, the value chosen will be printed out.
X.TP
X.B \-t \fItimeout\fP
X.IP
XSpecifies a timeout in minutes for idle disconnect.  If no traffic
Xoccurs on any X connection for the specified number of minutes
X(default 90), then all connections are closed and xforward exits.
X.TP
X.B \-terse
X.IP
XOnly the display name is printed to standard out.  Without this, it
Xprints a (two word) explanation of the output.
X.TP
X.B \-allow \fIallowed-host1 [allowed-host2 ... allowed-host16] \fP
X.IP
XOnly connections from 
X.I allowed-hosts
Xare permitted, at most sixteen are allowed.  If this is not specified,
Xconnections are permitted from any host.  In either case, allowed
Xhosts still query the user for individual acknowledgement of each
Xconnection.
X.SH DESCRIPTION
X.PP
X.B xforward
Xwill choose an unused port for the local display, and listen for connections 
Xon the local host at that port.  
X.B xforward
Xinforms the user which port to use as the  display, when 
X.B xforward 
Xis first invoked.
XWhen it receives a connection, it will create a confirmation pop-up
Xon the destination.
XIf the user confirms the connection request, 
Xit will create a separate socket and
Xconnect it to the destination, and then commence data piping between
Xthe two connections.
X.B xforward
Xcan handle multiple simultaneous connections.
X.PP
XIf there is no activity on a connection for the timeout interval, the
Xconnection is closed. If the X server at the destination
Xdoes not have access control enabled, then xforward will report an error.
X.PP
XIf a connection is closed by either end, any buffered data is drained to
Xits destination before
X.B xforward
Xwill close the corresponding socket on the other end.
X.SH SEE ALSO
Xsocket(2), connect(2), listen(2), accept(2), bind(2), select(2)
X.SH BUGS
XOut-of-band data is ignored/thrown away.
X.PP
XIf the initial connection to the
Xdestination fails for some reason, the client who connected to the
Xlocal-display
Xwill get an open and immediately closed TCP connection, which may cause
Xindigestion to some programs which expect some sort of server response
Xor an error code indicating failure to connect.
X.SH AUTHORS
XJohn Kohl, MIT Project Athena and Digital Equipment Corporation
X.br
XModifications for X by Win Treese and Alec Wolman, Digital Equipment Corporation
X.br
XAddition of allow all, specified display number, and timeout by
XMichael Patton, Bolt Beranek and Newman
X.SH DISTRIBUTION
XThe file NOTICE in the
X.B xforward
Xdistribution specifies the terms for distributing
X.B xforward.
XThe original version of
X.B xforward
Xcan be found by anonymous FTP from crl.dec.com:/pub/DEC/xforward.tar.Z.
XThis is a modified version for use at BBN.
!FaR!OuT!
echo x - xforward.c
sed -e 's/^X//' > xforward.c << '!FaR!OuT!'
X/*
X * xforward.c
X *
X * Program that acts as a x relay
X */
X
X/*              Copyright 1992, 1993 Digital Equipment Corporation
X *		Copyright 1993 Bolt Beranek and Newman
X *                        All Rights Reserved
X *
X * Permission to use, copy, and modify this software and its documentation is
X * hereby granted only under the following terms and conditions.  Both the
X * above copyright notice and this permission notice must appear in all copies
X * of the software, derivative works or modified versions, and any portions
X * thereof, and both notices must appear in supporting documentation.
X *
X * Users of this software agree to the terms and conditions set forth herein,
X * and hereby grant back to Digital a non-exclusive, unrestricted, royalty-free
X * right and license under any changes, enhancements or extensions made to the
X * core functions of the software, including but not limited to those affording
X * compatibility with other hardware or software environments, but excluding
X * applications which incorporate this software.  Users further agree to use
X * their best efforts to return to Digital any such changes, enhancements or
X * extensions that they make and inform Digital of noteworthy uses of this
X * software.  Correspondence should be provided to Digital at:
X *
X *                      Director of Licensing
X *                      Cambridge Research Laboratory
X *                      Digital Equipment Corporation
X *                      One Kendall Square, Bld. 700
X *                      Cambridge, MA 02139  
X *
X * This software may be distributed (but not offered for sale or transferred 
X * for compensation except on systems manufactured by Digital Equipment 
X * Corporation) to third parties, provided such third parties agree to abide 
X * by the terms and conditions of this notice.  
X *
X * THE SOFTWARE IS PROVIDED "AS IS" AND DIGITAL EQUIPMENT CORP. DISCLAIMS ALL
X * WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF
X * MERCHANTABILITY AND FITNESS.   IN NO EVENT SHALL DIGITAL EQUIPMENT
X * CORPORATION BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
X * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
X * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
X * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
X * SOFTWARE.
X */
X
X#include <stdio.h>
X#include <stdlib.h>
X#include <string.h>
X#include <sys/types.h>
X#include <unistd.h>
X#include <netinet/in.h>
X#include <sys/socket.h>
X#include <sys/time.h>
X#include <sys/wait.h>
X#include <netdb.h>
X#include <signal.h>
X#include <errno.h>
X#include <sys/param.h>
X
X#include <X11/Xlib.h>
X#include <X11/Xatom.h>
X#include <X11/Intrinsic.h>
X#include <X11/StringDefs.h>
X#ifdef USE_MOTIF
X#include <Xm/Xm.h>
X#include <Xm/MessageB.h>
X#else
X/* USE_AW*/
X#include <X11/Xaw/Cardinals.h>
X#include <X11/Xaw/Paned.h>
X#include <X11/Xaw/Label.h>
X#include <X11/Xaw/Box.h>
X#include <X11/Xaw/Command.h>
X#endif
X
X#define BASE_PORT 6010
X
X#define TIME_GRAIN 3
X
Xextern int errno;
X
X#define min(a,b) ((a) < (b) ? (a) : (b))
X#define max(a,b) ((a) > (b) ? (a) : (b))
X
X#define TRUE 1
X#define FALSE 0
X
X#define CANCEL                  4
X#define OK                      7
X
Xvoid usage(), doxmit(), readwrite();
X
Xvoid sigchld();
X
Xvoid alert_user_CB();
X
Xstruct sockaddr_in forward_to;
X
Xstruct pend_conn {
X    pid_t child;
X    int newsock;
X    int done;
X    struct pend_conn *next;
X};
X
Xstruct rwbuf {
X    char readbuffer[BUFSIZ+5];
X    char writebuffer[BUFSIZ+5];
X    int rbytes;				/* #bytes active in readbuffer */
X    int wbytes;				/* #bytes active in wbytes */
X    int connto;				/* fd this one should be connected to */
X    int wclose;				/* if set, close after finished writing */
X};
X
Xfd_set rinit, winit;
X
Xint idlemax = 1800;			/* 1 hr 30 min timeout */
X
Xint AlertResponse = 0;
X 
Xstruct rwbuf *rwbuf;
X
Xmain(argc, argv)
Xint argc;
Xchar *argv[];
X{
X    struct hostent *hp;
X    char myhostname[MAXHOSTNAMELEN];
X    struct sockaddr_in local, dummy;
X    unsigned int okhosts[16];
X    char *okhost_names[16];
X    unsigned int nokhosts = 0;
X    unsigned short port = BASE_PORT;
X    register int i;
X    int lsock;
X    int dummylen;
X    int one = 1;
X    int nready, nfds;
X    fd_set readable, writable;
X    int dtsize;
X    Display *display;
X    int nhosts;
X    Bool state;
X    char *hname;
X    size_t len;
X    pid_t child_pid;
X    struct pend_conn *pend_head = NULL;
X    int tcount = 0;
X    char *disp_str = NULL;
X    int terse = 0;
X
X    /* Get the current hostname, and make sure it's fully qualifed.*/
X    gethostname(myhostname, MAXHOSTNAMELEN);
X    if ((hp = gethostbyname(myhostname)) == NULL) {
X	    fprintf(stderr, "Can't lookup up my own hostname %s\n",myhostname);
X	    exit(1);
X    }
X    strcpy(myhostname, hp->h_name);
X
X    for ( i = 1; i < argc; i++) {
X	if (strcmp(argv[i],"-display") == 0 && i+1 < argc) {
X	    disp_str = argv[i+1];
X	    i++;
X        } else if (strcmp(argv[i], "-n") == 0 && i+1 < argc) {
X	    port = 6000 + atoi(argv[i+1]);
X	    i++;
X        } else if (strcmp(argv[i], "-t") == 0 && i+1 < argc) {
X	    idlemax = (60/TIME_GRAIN) * atoi(argv[i+1]);
X	    i++;
X        } else if (strcmp(argv[i], "-DEBUG") == 0 && i+1 < argc) {
X	    do_query(argv[i+1]);
X	    i++;
X        } else if (strcmp(argv[i], "-terse") == 0) {
X            terse = 1;
X	} else if (strcmp(argv[i],"-allow") == 0 && i+1 < argc) {
X	    do {
X		if ((hp = gethostbyname(argv[i+1])) == NULL) {
X		    fprintf(stderr, "no such host %s\n",argv[i+1]);
X		    exit(1);
X		}	
X  	        len = strlen(argv[i+1]);
X	        okhost_names[nokhosts] = malloc(len + 1);
X	        strcpy(okhost_names[nokhosts],argv[i+1]);
X                bcopy(hp->h_addr, (char *)&okhosts[nokhosts], 4);
X		nokhosts++;
X		i++;
X	    } while (i+1 < argc && argv[i+1][0] != '-');
X	} else {
X	    usage();
X	}
X    }
X
X    /* if not set in argument list, get DISPLAY from environment variable */
X    if (disp_str == NULL) {
X	disp_str = getenv("DISPLAY");
X	if (disp_str == NULL) {
X	    fprintf(stderr,"display not specified\n");
X	    exit(1);
X	}
X    }
X    len = strcspn(disp_str,":");
X    if ( len > 0 ) {
X	hname = malloc(len+1); /* allocate space, including null */
X	(void)strncpy(hname,disp_str,len);
X	hname[len] = '\0';
X    } else {
X	/* No host name in DISPLAY, use local host's name */
X	hname = myhostname;
X    }
X    hp = gethostbyname(hname);
X    if (!hp) {
X	fprintf(stderr, "no such host %s\n",hname);
X	exit(1);
X    }
X    bzero(&local, sizeof(local));
X    bzero(&forward_to, sizeof(forward_to));
X
X    local.sin_port = htons(port);
X    local.sin_family = AF_INET;
X    /* assign a local display */
X    if ((lsock = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
X	perror("socket");
X	exit(1);
X    }
X    if (setsockopt(lsock, SOL_SOCKET, SO_REUSEADDR,
X		   &one, sizeof(one)) < 0) {
X	perror("SO_REUSEADDR:");
X	exit(1);
X    }
X    while ( bind(lsock, (struct sockaddr *)&local, sizeof(local)) < 0) {
X	if (errno == EADDRINUSE) {
X	    port++;
X	    if (port > 6100) {
X		fprintf(stderr,"all ports in use.\n");
X		exit(1);
X	    }
X	    local.sin_port = htons(port);
X	} else {
X	    perror("bind");
X	    exit(1);
X	}
X    }
X
X    if (listen(lsock, SOMAXCONN) < 0) {
X	perror("listen");
X	exit(1);
X    }
X
X    if (!terse)
X       printf("display is ");
X    printf("%s:%d\n", myhostname, port - 6000);
X    fflush(stdout);
X
X    port = atoi(disp_str+len+1);
X    if (port < 0) {
X	fprintf(stderr, "display must be a non-negative integer!\n");
X	exit(1);
X    }
X    port += 6000;
X    if (port < 6000 || port > 6100) {
X	fprintf(stderr, "display must be >= X11.0 and <= X11.100\n");
X	exit(1);
X    }
X
X    forward_to.sin_port = htons(port);
X    forward_to.sin_family = AF_INET;
X    bcopy(hp->h_addr, &forward_to.sin_addr, sizeof(forward_to.sin_addr));
X
X    /* Check that we can open the destination display. */
X
X    if ( (display = XOpenDisplay(disp_str)) == NULL) {
X	fprintf(stderr,"Unable to open display at destination.\n");
X	exit(1);
X    }
X
X    /* clean up to conserve descriptors */
X    close(0);
X    close(1);
X    /* close(2); -- leave open for stderr */
X
X    signal(SIGPIPE, SIG_IGN);
X
X    dtsize = getdtablesize();
X
X    /* set up buffers & sizes */
X    rwbuf = (struct rwbuf *)calloc(dtsize, sizeof *rwbuf);
X    if (!rwbuf) {
X	fprintf(stderr, "can't allocate buffers\n");
X	exit(1);
X    }
X    /* -1 means not connected/invalid */
X    while (dtsize--) {
X	rwbuf[dtsize].connto = -1;
X    }
X
X    FD_ZERO(&rinit);
X    FD_ZERO(&winit);
X    FD_SET(lsock, &rinit);
X    
X    nfds = lsock + 1;
X    while (1) {
X	struct timeval timeout;
X	struct pend_conn *cur,*prev;
X	pid_t temppid;
X	union wait wstatus;
X	int exitstat,wopts,newoutgoing;
X
X	/* for each entry, call waitpid */
X	for (cur = pend_head; cur != NULL; cur=cur->next ) {
X	    wopts = WNOHANG;
X	    temppid = waitpid(cur->child,&wstatus,wopts);
X	    /* if there's no status, try next one */
X	    if (temppid == 0) {
X		continue;
X	    }
X	    if (WIFSIGNALED(wstatus)) {
X		fprintf(stderr,"child died abnormally\n");
X		cur->done = TRUE;
X		continue;
X	    }
X	    if (WIFEXITED(wstatus)) {
X		exitstat = WEXITSTATUS(wstatus);
X		if (exitstat == OK) {
X		    if ((newoutgoing = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
X			perror("socket");
X			close(cur->newsock);
X			cur->done = TRUE;
X			continue;
X		    }
X		    if (connect(newoutgoing, (struct sockaddr *)&forward_to,
X				sizeof(forward_to)) < 0) {
X			perror("connect");
X			close(newoutgoing);
X			close(cur->newsock);
X			cur->done = TRUE;
X			continue;
X		    }
X		    
X		    nfds = max(nfds, (cur->newsock)+1);
X		    nfds = max(nfds, newoutgoing+1);
X		    
X		    rwbuf[(cur->newsock)].connto = newoutgoing;
X		    rwbuf[newoutgoing].connto = (cur->newsock);
X		    
X		    rwbuf[newoutgoing].rbytes = rwbuf[(cur->newsock)].rbytes = 0;
X		    rwbuf[newoutgoing].wbytes = rwbuf[(cur->newsock)].wbytes = 0;
X		    FD_SET(cur->newsock, &rinit);
X		    FD_SET(cur->newsock, &winit);
X		    FD_SET(newoutgoing, &rinit);
X		    FD_SET(newoutgoing, &winit);
X		    cur->done = TRUE;
X		} else if (exitstat == CANCEL) {
X		    close(cur->newsock);
X		    cur->done = TRUE;
X		} else {
X		    fprintf(stderr,"Unknown exit status of child\n");
X		    close(cur->newsock);
X		    cur->done = TRUE;
X		}
X	    }
X	}
X	/* clean up list */
X	prev = NULL;
X	cur = pend_head;
X	while (cur != NULL) {
X	    if (cur->done == TRUE) {
X		if (prev == NULL) {
X		    pend_head = cur->next;
X		    free(cur);
X		    cur = pend_head;
X		} else {
X		    prev->next = cur->next;
X		    free(cur);
X		    cur = prev->next;
X		}
X	    } else {
X		prev = cur;
X		cur = cur->next;
X	    }
X	}
X
X	for (i = 0; i < nfds; i++)
X	    if (rwbuf[i].wclose)
X		FD_SET(i, &winit);
X
X	timeout.tv_usec = 0;
X	timeout.tv_sec = TIME_GRAIN;
X
X	readable = rinit;
X	writable = winit;
X	if ((nready = select(nfds, &readable, &writable, 0, &timeout)) == -1) {
X	    if (errno == EINTR)
X		continue;
X	    perror("select");
X	    exit(1);
X	}
X	if (nready == 0) {
X	    /* each increment of tcount represents 3 seconds of idleness */
X	    tcount++;
X	    if (tcount > idlemax) {
X		fprintf(stderr, "connections timed out\n");
X	        exit(1);
X	    }
X	} else {
X	    /* reset timeout counter if there is some activity */
X	    tcount = 0;
X	}
X
X	for (i = 0; i < nfds && nready; i++) {
X	    /* loop through descriptors */
X	    if (FD_ISSET(i, &writable)) {
X		int cc, leftover, connto;
X		connto = rwbuf[i].connto;
X		nready--;
X		/* write what we can */
X		if (rwbuf[i].wbytes) {
X		    cc = write(i, rwbuf[i].writebuffer, rwbuf[i].wbytes);
X		    if (cc == -1) {
X			if (errno != EPIPE) {
X			    fprintf(stderr, "fd %d:", i);
X			    perror("write");
X			}
X			/* asynchrony on close probs? */
X			FD_CLR(i, &winit);
X			FD_CLR(i, &rinit);
X			close(i);
X			if (connto != -1) {
X			    FD_CLR(connto, &rinit);
X			    FD_CLR(connto, &winit);
X			    close(rwbuf[i].connto);
X			}
X			cc = rwbuf[i].connto;
X			rwbuf[i].connto = rwbuf[cc].connto = -1;
X			continue;
X		    } else {
X			leftover = rwbuf[i].wbytes - cc;
X			if (leftover) {
X			    /* didn't write it all */
X			    /* copy down */
X			    bcopy(rwbuf[i].writebuffer + cc,
X				  rwbuf[i].writebuffer,
X				  leftover);
X			    rwbuf[i].wbytes = leftover;
X			} else
X			    rwbuf[i].wbytes = 0; /* buffer empty */
X			if (connto != -1 && rwbuf[connto].rbytes) {
X			    /* more stuff to copy in */
X			    copyfromto(connto, i);
X			}
X			if (!rwbuf[i].wbytes) {
X			    /* nothing left to write */
X			    if (rwbuf[i].wclose) {
X				/* close after flushing */
X				FD_CLR(i, &rinit);
X				close(i);
X				rwbuf[i].connto = -1;
X				rwbuf[i].wclose = 0;
X			    }
X			    FD_CLR(i, &winit);
X			}
X			if (connto != -1)
X			/* since we wrote some, go look for more */
X			    FD_SET(connto, &rinit);
X		    }
X		} else {
X		    if (connto != -1 && rwbuf[connto].rbytes) {
X			    /* more stuff to copy in */
X			    copyfromto(connto, i);
X			    if (rwbuf[i].wbytes)
X				continue;
X		    }
X		    /* nothing to write at the moment */
X		    if (rwbuf[i].wclose) {
X			/* close after flushing */
X			FD_CLR(i, &rinit);
X			close(i);
X			rwbuf[i].connto = -1;
X			rwbuf[i].wclose = 0;
X		    }
X		    /* nothing to write, so clear */
X		    FD_CLR(i, &winit);
X		}
X	    }
X	    if (FD_ISSET(i, &readable)) {
X		nready--;
X		/* something is readable */
X		if (i == lsock) {
X		    int newsock, i;
X		    struct pend_conn *npc;
X		    Display *dpy;
X		    /* new connection ready */
X		    dummylen = sizeof(dummy);
X		    if ((newsock = accept(lsock, (struct sockaddr *)&dummy,
X					  &dummylen)) < 0) {
X			if (errno == EINTR)
X			    continue;
X			perror("accept");
X			exit(1);
X		    }
X		    if ( nokhosts > 0 ) {
X			for (i = 0; i < nokhosts; i++) {
X			    if (dummy.sin_addr.s_addr == okhosts[i])
X				break;
X			}
X			if (i == nokhosts) {
X			    hp = gethostbyaddr((char *) &dummy.sin_addr,
X					       sizeof(dummy.sin_addr),
X					       dummy.sin_family);
X			    fprintf(stderr,
X				    "bad host connect from %s (%s)\n",
X				    hp->h_name,
X				    inet_ntoa(dummy.sin_addr.s_addr));
X			    close(newsock);
X			    continue;
X			}
X			hname = okhost_names[i];
X		    } else {
X			hp = gethostbyaddr((char *) &dummy.sin_addr,
X					   sizeof(dummy.sin_addr),
X					   dummy.sin_family);
X			hname = hp->h_name;
X		    }
X		    /* after check of allowed hosts, create popup on
X		     * destination
X		     */
X		    /* fork here */
X		    child_pid = fork();
X		    if ( child_pid < 0) {
X			fprintf(stderr,"Fork of child failed.\n");
X			exit(1);
X		    }
X		    /* in the child: create pop-up */
X		    if ( child_pid == 0 ) {
X			char dialog_message[200];
X			sprintf(dialog_message,"Allow X connection from %s ?",
X									hname);
X			do_query(dialog_message); /* Never returns */
X		    }
X		    /* in the parent: add child to list of procs that
X		       parent must check exit status of */
X		    npc = (struct pend_conn *)malloc(sizeof(struct pend_conn));
X		    npc->child = child_pid;
X		    npc->newsock = newsock;
X		    npc->done = FALSE;
X		    npc->next = NULL;
X		    /* add npc to beginning of list */
X		    if (pend_head == NULL) {
X			pend_head = npc;
X		    } else {
X			npc->next = pend_head;
X			pend_head = npc;
X		    }
X		} else {
X		    int cc, connto;
X		    connto = rwbuf[i].connto;
X		    /* normal fd is readable */
X		    if (rwbuf[i].rbytes < BUFSIZ) {
X			/* read what we have room for */
X			cc = read(i, rwbuf[i].readbuffer + rwbuf[i].rbytes,
X				  BUFSIZ-rwbuf[i].rbytes);
X			if (cc == -1) {
X			    fprintf(stderr, "fd %d:", i);
X			    perror("read");
X			    /* asynchrony on close probs? */
X			    FD_CLR(i, &winit);
X			    FD_CLR(i, &rinit);
X			    FD_CLR(connto, &rinit);
X			    FD_CLR(connto, &winit);
X			    close(i);
X			    close(connto);
X			    rwbuf[i].connto = rwbuf[connto].connto = -1;
X			    continue;
X			} else if (cc == 0) {
X			    /* closedown */
X			    FD_CLR(i, &rinit);
X			    FD_CLR(i, &winit);
X			    close(i);
X			    if (connto != -1) {
X				/* set close after finishing write */
X				rwbuf[connto].wclose = 1;
X				rwbuf[connto].connto = -1;
X				/* force a write cycle to clean up */
X				FD_SET(connto, &winit);
X			    }
X			    rwbuf[i].rbytes = 0;
X			    rwbuf[i].wbytes = 0;
X			    rwbuf[i].connto = -1;
X			    /* XXX what else */
X			} else {
X			    rwbuf[i].rbytes += cc;
X			    /* try to put onto write buffer */
X
X			    if (connto != -1)
X				copyfromto(i, connto);
X			    if (rwbuf[i].rbytes >= BUFSIZ) {
X				/* buffer is full */
X				FD_CLR(i, &rinit);
X			    }
X			}
X		    }
X		}
X	    } 
X	} /* for loop through descriptors */
X    } /* while (1) */
X}
X
Xvoid
Xusage()
X{
X    fprintf(stderr,
X      "usage: xforward [-terse] [-display dispname] [-n dispnum] [-allow host1 ... host16]\n"
X	    );
X    exit(1);
X}
X
Xcopyfromto(from, to)
Xint from, to;
X{
X    int ncopy;
X    if (rwbuf[to].wbytes < BUFSIZ) {
X	ncopy = min(rwbuf[from].rbytes,
X		    BUFSIZ-rwbuf[to].wbytes);
X	
X	bcopy(rwbuf[from].readbuffer,
X	      rwbuf[to].writebuffer + rwbuf[to].wbytes,
X	      ncopy);
X	rwbuf[to].wbytes += ncopy;
X	FD_SET(to, &winit);
X	if (ncopy == rwbuf[from].rbytes)
X	    rwbuf[from].rbytes = 0;
X	else {
X	    bcopy(rwbuf[from].readbuffer + ncopy,
X		  rwbuf[from].readbuffer,
X		  rwbuf[from].rbytes - ncopy);
X	    rwbuf[from].rbytes -= ncopy;
X	}
X	/* we have room */
X	FD_SET(to, &rinit);
X    }
X}
X/****	Query popup (Motif version)	****/
X
X#ifdef USE_MOTIF
Xdo_query(msg)
Xchar *msg;
X{   int n=0;
X    Arg arg[4];
X    XtAppContext app_con;
X    Widget topshell,alert,help;
X    XmString msg_str,msg_str2,msg_str3;
X
X    XtToolkitInitialize();
X    app_con = XtCreateApplicationContext();
X    dpy = XtOpenDisplay(app_con,disp_str,NULL,"Xforward",
X			NULL,0,&argc,argv);
X    topshell = XtAppCreateShell(NULL,"Xforward",applicationShellWidgetClass, dpy, NULL,NULL);;
X    msg_str = XmStringCreateSimple(msg);
X    XtSetArg(arg[n],XmNmessageString,msg_str); n++;
X    msg_str2 = XmStringCreateSimple("Yes");
X    XtSetArg(arg[n],XmNokLabelString,msg_str2); n++;
X    msg_str3 = XmStringCreateSimple("No");
X    XtSetArg(arg[n],XmNcancelLabelString,msg_str3); n++;
X    XtSetArg(arg[n],XmNdefaultButtonType,XmDIALOG_CANCEL_BUTTON); n++;
X    alert = XmCreateWarningDialog(topshell,"alert",arg,n);
X    XmStringFree(msg_str); XmStringFree(msg_str2); XmStringFree(msg_str3);
X    XtAddCallback(alert,XmNokCallback,alert_user_CB,(caddr_t) OK);
X    XtAddCallback(alert,XmNcancelCallback,alert_user_CB,(caddr_t) CANCEL);
X    help = XmMessageBoxGetChild(alert,XmDIALOG_HELP_BUTTON);
X    XtUnmanageChild(help);
X    AlertResponse = -1;
X    XtManageChild(alert);
X    while(AlertResponse == -1)
X    {
X	XEvent event;
X	XtAppNextEvent(app_con,&event);
X	XtDispatchEvent(&event);
X    }
X    /* use value of AlertResponse as exit code */
X    exit(AlertResponse);
X}
X
X
X/* ARGSUSED */
Xvoid alert_user_CB(w,user_data,call_data)
XWidget w;
Xcaddr_t user_data, call_data;
X{
X	AlertResponse = (int) user_data;
X}
X#endif
X/****	Query popup (Xaw version)	****/
X
X#ifndef USE_MOTIF
Xdo_query(msg)
Xchar *msg;
X{   Widget toplevel,parent,label_wid,box_wid,ok_wid,cancel_wid;
X    int hack_argc = 1;
X    static char *hack_argv[] = { "xforward", NULL };
X    Arg args[2];
X
X    toplevel = XtInitialize(NULL, "Xforward", NULL, ZERO, &hack_argc, hack_argv);
X    parent = XtCreateManagedWidget ("paned", panedWidgetClass,
X				    toplevel, NULL, ZERO);
X    XtSetArg(args[0],XtNlabel,(XtArgVal)msg);
X    XtSetArg(args[1],XtNshowGrip,(XtArgVal)FALSE);
X    label_wid = XtCreateManagedWidget ("label", labelWidgetClass,
X				       parent, args, 2);
X    box_wid = XtCreateManagedWidget ("box", boxWidgetClass,
X				       parent, NULL, ZERO);
X    ok_wid = XtCreateManagedWidget ("ok",commandWidgetClass,
X				    box_wid, NULL, ZERO);
X    cancel_wid = XtCreateManagedWidget ("cancel",commandWidgetClass,
X					box_wid, NULL, ZERO);
X    XtAddCallback(ok_wid, XtNcallback,alert_user_CB,(caddr_t) OK);
X    XtAddCallback(cancel_wid, XtNcallback,alert_user_CB,(caddr_t) CANCEL);
X    AlertResponse = -1;
X    XtRealizeWidget(toplevel);
X    while(AlertResponse == -1)
X    {
X	XEvent event;
X	XtAppNextEvent(XtWidgetToApplicationContext(toplevel),&event);
X	XtDispatchEvent(&event);
X    }
X    /* use value of AlertResponse as exit code */
X    exit(AlertResponse);
X}
X
X
X/* ARGSUSED */
Xvoid alert_user_CB(w,user_data,call_data)
XWidget w;
Xcaddr_t user_data, call_data;
X{
X	AlertResponse = (int) user_data;
X}
X#endif
!FaR!OuT!
exit

exit 0 # Just in case...
-- 
  // chris@Sterling.COM           | Send comp.sources.x submissions to:
\X/  Amiga: The only way to fly!  |    sources-x@sterling.com
       "It's intuitively obvious to the most casual observer..."
 GCS d++(--) -p+ c++ !l u++ e+ m+(-) s++/++ n h--- f+ g+++ w+ t++ r+ y+
