Newsgroups: comp.sources.x
From: demaree@imec.be (Antoon Demaree)
Subject: v21i051:  xvig - XviG Graphics Library, Part04/10
Message-ID: <1993Nov23.172748.17090@sparky.sterling.com>
X-Md4-Signature: fc5560ac0ae710b83921678f5c54e48b
Sender: chris@sparky.sterling.com (Chris Olson)
Organization: Sterling Software
Date: Tue, 23 Nov 1993 17:27:48 GMT
Approved: chris@sterling.com

Submitted-by: demaree@imec.be (Antoon Demaree)
Posting-number: Volume 21, Issue 51
Archive-name: xvig/part04
Environment: X11

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# Contents:  version_1.1/src/cursor.c version_1.1/src/pattern.h
#   version_1.1/src/ptext.c
# Wrapped by chris@sparky on Tue Nov 23 11:17:57 1993
PATH=/bin:/usr/bin:/usr/ucb:/usr/local/bin:/usr/lbin:$PATH ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 4 (of 10)."'
if test -f 'version_1.1/src/cursor.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'version_1.1/src/cursor.c'\"
else
  echo shar: Extracting \"'version_1.1/src/cursor.c'\" \(7337 characters\)
  sed "s/^X//" >'version_1.1/src/cursor.c' <<'END_OF_FILE'
X/* File>>> cursor.c
X--
X-- %M% -- version %I% (IMEC)            last updated: %E%
X--
X-- Copyright (c) 1993
X-- IMEC vzw
X-- Kapeldreef 75
X-- B-3001 LEUVEN
X-- BELGIUM
X--
X-- Author   : A. Demaree
X--
X-- Date     : February 1, 1993
X--
X-- Function :
X--
X-- Comment  :
X--
X-- Review   :
X--
X*/
X
X
X/*------------------------------------------------------------------------------
X-- Global include files
X------------------------------------------------------------------------------*/
X
X#include <stdlib.h>
X#include <stdio.h>
X#include <string.h>
X#include <X11/Xlib.h>
X#include <X11/Xutil.h>
X
X/*------------------------------------------------------------------------------
X-- Local include files
X------------------------------------------------------------------------------*/
X
X#include "xviglocal.h"
X
X/*------------------------------------------------------------------------------
X-- Static variable declarations
X------------------------------------------------------------------------------*/
X
Xstatic CurItem cursor_item = (CurItem) NULL;
Xstatic Window save_window;
Xstatic Pixmap save_pixmap;
X
X/*------------------------------------------------------------------------------
X-- Local function declarations
X------------------------------------------------------------------------------*/
X
X
X/*------------------------------------------------------------------------------
X--
X--
X--
X------------------------------------------------------------------------------*/
X
Xvoid XviG_OpenCursor(unsigned int width,
X                     unsigned int height,
X                     int hot_x,
X                     int hot_y)
X{
X  GC gc;
X  Pixmap cursor_pixmap;
X  unsigned int loc_width, loc_height;
X
X  /*
X  -- If there is a cursor pixmap currently active, free it
X  */
X
X  if (cursor_item)
X    XFreePixmap(XviG_display, cursor_item->pixmap);
X
X  /*
X  -- Use the default graphical context to clear the cursor pixmap
X  */
X
X  gc = DefaultGC(XviG_display, XviG_screen_nr);
X
X  XSetFunction(XviG_display, gc, GXclear);
X  XSetFillStyle(XviG_display, gc, FillSolid);
X
X  /*
X  -- Create the cursor pixmap and clear it
X  -- (maximum size can be twice the screen size)
X  */
X
X  loc_width  = (width == 0)
X               ? 1 : MIN(width, 2*DisplayWidth(XviG_display, XviG_screen_nr));
X  loc_height = (height == 0)
X               ? 1 : MIN(height, 2*DisplayHeight(XviG_display, XviG_screen_nr));
X
X  cursor_pixmap = XCreatePixmap(XviG_display, XviG_dummy_window,
X                                loc_width, loc_height,
X                                DefaultDepth(XviG_display, XviG_screen_nr));
X  XFillRectangle(XviG_display, cursor_pixmap, gc, 0, 0, loc_width, loc_height);
X
X  /*
X  -- Update the cursor list
X  */
X
X  if (cursor_item)
X  {
X    cursor_item->pixmap = cursor_pixmap;
X    cursor_item->width = loc_width;
X    cursor_item->height = loc_height;
X    cursor_item->hot_x = hot_x;
X    cursor_item->hot_y = hot_y;
X  }
X  else
X    cursor_item = New_CurItem(cursor_pixmap,
X                              loc_width, loc_height, hot_x, hot_y);
X
X  /*
X  -- Set the current window and pixmap to draw to
X  */
X
X  save_window = XviG_window;
X  save_pixmap = XviG_pixmap;
X
X  XviG_window = XviG_dummy_window;
X  XviG_pixmap = cursor_pixmap;
X
X  XviG_cursor_mode = True;
X}
X
X/*------------------------------------------------------------------------------
X--
X--
X--
X------------------------------------------------------------------------------*/
X
Xlong XviG_CloseCursor(void)
X{
X  long cursor;
X
X  if (cursor_item == (CurItem) NULL)
X    return 0L;
X
X  cursor = (long) cursor_item;
X  cursor_item = (CurItem) NULL;
X
X  /*
X  -- Reset the current window and pixmap to draw to
X  */
X
X  XviG_window = save_window;
X  XviG_pixmap = save_pixmap;
X
X  XviG_cursor_mode = False;
X
X  /*
X  -- Return the cursor identifier
X  */
X
X  return cursor;
X}
X
X/*------------------------------------------------------------------------------
X--
X--
X--
X------------------------------------------------------------------------------*/
X
Xvoid XviG_DeleteCursor(long cursor)
X{
X  if (cursor)
X  {
X    XFreePixmap(XviG_display, ((CurItem) cursor)->pixmap);
X    Delete_CurItem((CurItem) cursor);
X  }
X}
X
X/*------------------------------------------------------------------------------
X--
X--
X--
X------------------------------------------------------------------------------*/
X
Xvoid XviG_SetCursor(long cursor)
X{
X  XviG_event.xclient.message_type = XviG_MESSAGE_CURSOR;
X  XviG_event.xclient.format = 32;
X  XviG_event.type = ClientMessage;
X
X  if (cursor == XviG_CURSOR_ARROW)
X    XviG_event.xclient.data.l[0] = DATA_CURSOR_ARROW;
X  else
X  if (cursor == XviG_CURSOR_XHAIR)
X  {
X    XviG_event.xclient.data.l[0] = DATA_CURSOR_XHAIR;
X    XviG_event.xclient.data.l[1] = (long) XviG_xhair_color;
X  }
X  else
X  {
X    XviG_event.xclient.data.l[0] = (long) ((CurItem) cursor)->pixmap;
X        /* Let's hope that the pixmap id never has the same value as the one */
X        /* that I have choosen for DATA_CURSOR_ARROW and DATA_CURSOR_XHAIR.  */
X    XviG_event.xclient.data.l[1] = (long) ((CurItem) cursor)->width;
X    XviG_event.xclient.data.l[2] = (long) ((CurItem) cursor)->height;
X    XviG_event.xclient.data.l[3] = (long) ((CurItem) cursor)->hot_x;
X    XviG_event.xclient.data.l[4] = (long) ((CurItem) cursor)->hot_y;
X  }
X
X  if (!XSendEvent(XviG_display, XviG_window, False, NoEventMask, &XviG_event))
X    fprintf(stderr, "ERROR : Cannot send ClientMessage 'cursor'.\n");
X}
X
X/*------------------------------------------------------------------------------
X--
X--
X--
X------------------------------------------------------------------------------*/
X
Xint XviG_GetCursor(int type,
X                   int *x_pos,
X                   int *y_pos)
X{
X  int character;
X  char tmpstr[8];
X
X  /*
X  -- First send the ClientMessage to set the event type to receive
X  */
X
X  switch (type)
X  {
X    case XviG_KEY:
X        XviG_event.xclient.message_type = XviG_MESSAGE_KEY;
X        break;
X    case XviG_BUTTON:
X        XviG_event.xclient.message_type = XviG_MESSAGE_BUTTON;
X        break;
X    case XviG_KEY_BUTTON:
X        XviG_event.xclient.message_type = XviG_MESSAGE_KEY_BUTTON;
X        break;
X  }
X  XviG_event.xclient.format = 8;
X  XviG_event.type = ClientMessage;
X
X  if (!XSendEvent(XviG_display, XviG_window, False, NoEventMask, &XviG_event))
X  {
X    fprintf(stderr, "ERROR : Cannot send ClientMessage 'key_button'.\n");
X    return 0;
X  }
X
X  /*
X  -- The event loop
X  */
X
X  while (1)
X  {
X    XNextEvent(XviG_display, &XviG_event);
X
X    if (XviG_event.type == ButtonPress)
X    {
X      *x_pos = XviG_event.xbutton.x;
X      *y_pos = XviG_event.xbutton.y;
X
X      switch (XviG_event.xbutton.button)
X      {
X        case Button1: character = XviG_BUTTON1; break;
X        case Button2: character = XviG_BUTTON2; break;
X        case Button3: character = XviG_BUTTON3; break;
X        case Button4: character = XviG_BUTTON4; break;
X        case Button5: character = XviG_BUTTON5; break;
X        default: character = 0;
X      }
X
X      break;
X    }
X    else
X    if (XviG_event.type == KeyPress)
X    {
X      *x_pos = XviG_event.xkey.x;
X      *y_pos = XviG_event.xkey.y;
X
X      if (XLookupString(&XviG_event.xkey, tmpstr, 8,
X                        (KeySym *) NULL, (XComposeStatus *) NULL) == 1)
X        character = tmpstr[0];
X      else
X        character = 0;
X
X      break;
X    }
X    /*
X    else
X      printf("WARNING : Other event received .....\n");
X    */
X  }
X
X  return character;
X}
END_OF_FILE
  if test 7337 -ne `wc -c <'version_1.1/src/cursor.c'`; then
    echo shar: \"'version_1.1/src/cursor.c'\" unpacked with wrong size!
  fi
  # end of 'version_1.1/src/cursor.c'
fi
if test -f 'version_1.1/src/pattern.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'version_1.1/src/pattern.h'\"
else
  echo shar: Extracting \"'version_1.1/src/pattern.h'\" \(38091 characters\)
  sed "s/^X//" >'version_1.1/src/pattern.h' <<'END_OF_FILE'
X/* File>>> pattern.h
X--
X-- %M% -- version %I% (IMEC)            last updated: %E%
X--
X-- Copyright (c) 1993
X-- IMEC vzw
X-- Kapeldreef 75
X-- B-3001 LEUVEN
X-- BELGIUM
X--
X-- Author   : A. Demaree
X--
X-- Date     : February 1, 1993
X--
X-- Function : Definition of the 42 fillpatterns and 8 linestyles.
X--
X-- Comment  :
X--
X-- Review   :
X--
X*/
X
X
X#ifndef __PATTERN_H
X#define __PATTERN_H
X
X
X/*
X-- The fillpatterns ....
X*/
X
X
X#define fill00_width 32
X#define fill00_height 32
Xstatic unsigned char fill00_bits[] = { /* This solid fillpattern is obsolete */
X 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
X 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
X 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
X 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
X 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
X 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
X 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
X 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
X 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
X 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
X 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
X
X
X#define fill01_width 32
X#define fill01_height 32
Xstatic unsigned char fill01_bits[] = {
X 0x00, 0x00, 0x00, 0x00, 0xaa, 0xaa, 0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00,
X 0xaa, 0xaa, 0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00, 0xaa, 0xaa, 0xaa, 0xaa,
X 0x00, 0x00, 0x00, 0x00, 0xaa, 0xaa, 0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00,
X 0xaa, 0xaa, 0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00, 0xaa, 0xaa, 0xaa, 0xaa,
X 0x00, 0x00, 0x00, 0x00, 0xaa, 0xaa, 0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00,
X 0xaa, 0xaa, 0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00, 0xaa, 0xaa, 0xaa, 0xaa,
X 0x00, 0x00, 0x00, 0x00, 0xaa, 0xaa, 0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00,
X 0xaa, 0xaa, 0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00, 0xaa, 0xaa, 0xaa, 0xaa,
X 0x00, 0x00, 0x00, 0x00, 0xaa, 0xaa, 0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00,
X 0xaa, 0xaa, 0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00, 0xaa, 0xaa, 0xaa, 0xaa,
X 0x00, 0x00, 0x00, 0x00, 0xaa, 0xaa, 0xaa, 0xaa };
X
X
X#define fill02_width 32
X#define fill02_height 32
Xstatic unsigned char fill02_bits[] = {
X 0x55, 0x55, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x55,
X 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00,
X 0x55, 0x55, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x55,
X 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00,
X 0x55, 0x55, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x55,
X 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00,
X 0x55, 0x55, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x55,
X 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00,
X 0x55, 0x55, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x55,
X 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00,
X 0x55, 0x55, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00 };
X
X
X#define fill03_width 32
X#define fill03_height 32
Xstatic unsigned char fill03_bits[] = {
X 0x22, 0x22, 0x22, 0x22, 0x11, 0x11, 0x11, 0x11, 0x88, 0x88, 0x88, 0x88,
X 0x44, 0x44, 0x44, 0x44, 0x22, 0x22, 0x22, 0x22, 0x11, 0x11, 0x11, 0x11,
X 0x88, 0x88, 0x88, 0x88, 0x44, 0x44, 0x44, 0x44, 0x22, 0x22, 0x22, 0x22,
X 0x11, 0x11, 0x11, 0x11, 0x88, 0x88, 0x88, 0x88, 0x44, 0x44, 0x44, 0x44,
X 0x22, 0x22, 0x22, 0x22, 0x11, 0x11, 0x11, 0x11, 0x88, 0x88, 0x88, 0x88,
X 0x44, 0x44, 0x44, 0x44, 0x22, 0x22, 0x22, 0x22, 0x11, 0x11, 0x11, 0x11,
X 0x88, 0x88, 0x88, 0x88, 0x44, 0x44, 0x44, 0x44, 0x22, 0x22, 0x22, 0x22,
X 0x11, 0x11, 0x11, 0x11, 0x88, 0x88, 0x88, 0x88, 0x44, 0x44, 0x44, 0x44,
X 0x22, 0x22, 0x22, 0x22, 0x11, 0x11, 0x11, 0x11, 0x88, 0x88, 0x88, 0x88,
X 0x44, 0x44, 0x44, 0x44, 0x22, 0x22, 0x22, 0x22, 0x11, 0x11, 0x11, 0x11,
X 0x88, 0x88, 0x88, 0x88, 0x44, 0x44, 0x44, 0x44 };
X
X
X#define fill04_width 32
X#define fill04_height 32
Xstatic unsigned char fill04_bits[] = {
X 0x88, 0x88, 0x88, 0x88, 0x44, 0x44, 0x44, 0x44, 0x22, 0x22, 0x22, 0x22,
X 0x11, 0x11, 0x11, 0x11, 0x88, 0x88, 0x88, 0x88, 0x44, 0x44, 0x44, 0x44,
X 0x22, 0x22, 0x22, 0x22, 0x11, 0x11, 0x11, 0x11, 0x88, 0x88, 0x88, 0x88,
X 0x44, 0x44, 0x44, 0x44, 0x22, 0x22, 0x22, 0x22, 0x11, 0x11, 0x11, 0x11,
X 0x88, 0x88, 0x88, 0x88, 0x44, 0x44, 0x44, 0x44, 0x22, 0x22, 0x22, 0x22,
X 0x11, 0x11, 0x11, 0x11, 0x88, 0x88, 0x88, 0x88, 0x44, 0x44, 0x44, 0x44,
X 0x22, 0x22, 0x22, 0x22, 0x11, 0x11, 0x11, 0x11, 0x88, 0x88, 0x88, 0x88,
X 0x44, 0x44, 0x44, 0x44, 0x22, 0x22, 0x22, 0x22, 0x11, 0x11, 0x11, 0x11,
X 0x88, 0x88, 0x88, 0x88, 0x44, 0x44, 0x44, 0x44, 0x22, 0x22, 0x22, 0x22,
X 0x11, 0x11, 0x11, 0x11, 0x88, 0x88, 0x88, 0x88, 0x44, 0x44, 0x44, 0x44,
X 0x22, 0x22, 0x22, 0x22, 0x11, 0x11, 0x11, 0x11 };
X
X
X#define fill05_width 32
X#define fill05_height 32
Xstatic unsigned char fill05_bits[] = {
X 0x22, 0x22, 0x22, 0x22, 0x44, 0x44, 0x44, 0x44, 0x88, 0x88, 0x88, 0x88,
X 0x11, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22, 0x44, 0x44, 0x44, 0x44,
X 0x88, 0x88, 0x88, 0x88, 0x11, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22,
X 0x44, 0x44, 0x44, 0x44, 0x88, 0x88, 0x88, 0x88, 0x11, 0x11, 0x11, 0x11,
X 0x22, 0x22, 0x22, 0x22, 0x44, 0x44, 0x44, 0x44, 0x88, 0x88, 0x88, 0x88,
X 0x11, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22, 0x44, 0x44, 0x44, 0x44,
X 0x88, 0x88, 0x88, 0x88, 0x11, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22,
X 0x44, 0x44, 0x44, 0x44, 0x88, 0x88, 0x88, 0x88, 0x11, 0x11, 0x11, 0x11,
X 0x22, 0x22, 0x22, 0x22, 0x44, 0x44, 0x44, 0x44, 0x88, 0x88, 0x88, 0x88,
X 0x11, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22, 0x44, 0x44, 0x44, 0x44,
X 0x88, 0x88, 0x88, 0x88, 0x11, 0x11, 0x11, 0x11 };
X
X
X#define fill06_width 32
X#define fill06_height 32
Xstatic unsigned char fill06_bits[] = {
X 0x88, 0x88, 0x88, 0x88, 0x11, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22,
X 0x44, 0x44, 0x44, 0x44, 0x88, 0x88, 0x88, 0x88, 0x11, 0x11, 0x11, 0x11,
X 0x22, 0x22, 0x22, 0x22, 0x44, 0x44, 0x44, 0x44, 0x88, 0x88, 0x88, 0x88,
X 0x11, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22, 0x44, 0x44, 0x44, 0x44,
X 0x88, 0x88, 0x88, 0x88, 0x11, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22,
X 0x44, 0x44, 0x44, 0x44, 0x88, 0x88, 0x88, 0x88, 0x11, 0x11, 0x11, 0x11,
X 0x22, 0x22, 0x22, 0x22, 0x44, 0x44, 0x44, 0x44, 0x88, 0x88, 0x88, 0x88,
X 0x11, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22, 0x44, 0x44, 0x44, 0x44,
X 0x88, 0x88, 0x88, 0x88, 0x11, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22,
X 0x44, 0x44, 0x44, 0x44, 0x88, 0x88, 0x88, 0x88, 0x11, 0x11, 0x11, 0x11,
X 0x22, 0x22, 0x22, 0x22, 0x44, 0x44, 0x44, 0x44 };
X
X
X#define fill07_width 32
X#define fill07_height 32
Xstatic unsigned char fill07_bits[] = {
X 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
X 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
X 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
X 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
X 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
X 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
X 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
X 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
X 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
X 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
X 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa };
X
X
X#define fill08_width 32
X#define fill08_height 32
Xstatic unsigned char fill08_bits[] = {
X 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
X 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
X 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
X 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
X 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
X 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
X 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
X 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
X 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
X 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
X 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55 };
X
X
X#define fill09_width 32
X#define fill09_height 32
Xstatic unsigned char fill09_bits[] = {
X 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
X 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
X 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
X 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
X 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
X 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
X 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
X 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
X 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
X 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
X 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 };
X
X
X#define fill10_width 32
X#define fill10_height 32
Xstatic unsigned char fill10_bits[] = {
X 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
X 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
X 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
X 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
X 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
X 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
X 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
X 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
X 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
X 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
X 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff };
X
X
X#define fill11_width 32
X#define fill11_height 32
Xstatic unsigned char fill11_bits[] = {
X 0x11, 0x11, 0x11, 0x11, 0xaa, 0xaa, 0xaa, 0xaa, 0x44, 0x44, 0x44, 0x44,
X 0xaa, 0xaa, 0xaa, 0xaa, 0x11, 0x11, 0x11, 0x11, 0xaa, 0xaa, 0xaa, 0xaa,
X 0x44, 0x44, 0x44, 0x44, 0xaa, 0xaa, 0xaa, 0xaa, 0x11, 0x11, 0x11, 0x11,
X 0xaa, 0xaa, 0xaa, 0xaa, 0x44, 0x44, 0x44, 0x44, 0xaa, 0xaa, 0xaa, 0xaa,
X 0x11, 0x11, 0x11, 0x11, 0xaa, 0xaa, 0xaa, 0xaa, 0x44, 0x44, 0x44, 0x44,
X 0xaa, 0xaa, 0xaa, 0xaa, 0x11, 0x11, 0x11, 0x11, 0xaa, 0xaa, 0xaa, 0xaa,
X 0x44, 0x44, 0x44, 0x44, 0xaa, 0xaa, 0xaa, 0xaa, 0x11, 0x11, 0x11, 0x11,
X 0xaa, 0xaa, 0xaa, 0xaa, 0x44, 0x44, 0x44, 0x44, 0xaa, 0xaa, 0xaa, 0xaa,
X 0x11, 0x11, 0x11, 0x11, 0xaa, 0xaa, 0xaa, 0xaa, 0x44, 0x44, 0x44, 0x44,
X 0xaa, 0xaa, 0xaa, 0xaa, 0x11, 0x11, 0x11, 0x11, 0xaa, 0xaa, 0xaa, 0xaa,
X 0x44, 0x44, 0x44, 0x44, 0xaa, 0xaa, 0xaa, 0xaa };
X
X
X#define fill12_width 32
X#define fill12_height 32
Xstatic unsigned char fill12_bits[] = {
X 0x44, 0x44, 0x44, 0x44, 0xaa, 0xaa, 0xaa, 0xaa, 0x11, 0x11, 0x11, 0x11,
X 0xaa, 0xaa, 0xaa, 0xaa, 0x44, 0x44, 0x44, 0x44, 0xaa, 0xaa, 0xaa, 0xaa,
X 0x11, 0x11, 0x11, 0x11, 0xaa, 0xaa, 0xaa, 0xaa, 0x44, 0x44, 0x44, 0x44,
X 0xaa, 0xaa, 0xaa, 0xaa, 0x11, 0x11, 0x11, 0x11, 0xaa, 0xaa, 0xaa, 0xaa,
X 0x44, 0x44, 0x44, 0x44, 0xaa, 0xaa, 0xaa, 0xaa, 0x11, 0x11, 0x11, 0x11,
X 0xaa, 0xaa, 0xaa, 0xaa, 0x44, 0x44, 0x44, 0x44, 0xaa, 0xaa, 0xaa, 0xaa,
X 0x11, 0x11, 0x11, 0x11, 0xaa, 0xaa, 0xaa, 0xaa, 0x44, 0x44, 0x44, 0x44,
X 0xaa, 0xaa, 0xaa, 0xaa, 0x11, 0x11, 0x11, 0x11, 0xaa, 0xaa, 0xaa, 0xaa,
X 0x44, 0x44, 0x44, 0x44, 0xaa, 0xaa, 0xaa, 0xaa, 0x11, 0x11, 0x11, 0x11,
X 0xaa, 0xaa, 0xaa, 0xaa, 0x44, 0x44, 0x44, 0x44, 0xaa, 0xaa, 0xaa, 0xaa,
X 0x11, 0x11, 0x11, 0x11, 0xaa, 0xaa, 0xaa, 0xaa };
X
X
X#define fill13_width 32
X#define fill13_height 32
Xstatic unsigned char fill13_bits[] = {
X 0x66, 0x66, 0x66, 0x66, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,
X 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x99, 0x99, 0x99, 0x99,
X 0x99, 0x99, 0x99, 0x99, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
X 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x66, 0x66, 0x66, 0x66,
X 0x66, 0x66, 0x66, 0x66, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,
X 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x99, 0x99, 0x99, 0x99,
X 0x99, 0x99, 0x99, 0x99, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
X 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x66, 0x66, 0x66, 0x66,
X 0x66, 0x66, 0x66, 0x66, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,
X 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x99, 0x99, 0x99, 0x99,
X 0x99, 0x99, 0x99, 0x99, 0x66, 0x66, 0x66, 0x66 };
X
X
X#define fill14_width 32
X#define fill14_height 32
Xstatic unsigned char fill14_bits[] = {
X 0x99, 0x99, 0x99, 0x99, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
X 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x66, 0x66, 0x66, 0x66,
X 0x66, 0x66, 0x66, 0x66, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,
X 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x99, 0x99, 0x99, 0x99,
X 0x99, 0x99, 0x99, 0x99, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
X 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x66, 0x66, 0x66, 0x66,
X 0x66, 0x66, 0x66, 0x66, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,
X 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x99, 0x99, 0x99, 0x99,
X 0x99, 0x99, 0x99, 0x99, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
X 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x66, 0x66, 0x66, 0x66,
X 0x66, 0x66, 0x66, 0x66, 0x99, 0x99, 0x99, 0x99 };
X
X
X#define fill15_width 32
X#define fill15_height 32
Xstatic unsigned char fill15_bits[] = {
X 0xff, 0xff, 0xff, 0xff, 0x55, 0x55, 0x55, 0x55, 0xff, 0xff, 0xff, 0xff,
X 0x55, 0x55, 0x55, 0x55, 0xff, 0xff, 0xff, 0xff, 0x55, 0x55, 0x55, 0x55,
X 0xff, 0xff, 0xff, 0xff, 0x55, 0x55, 0x55, 0x55, 0xff, 0xff, 0xff, 0xff,
X 0x55, 0x55, 0x55, 0x55, 0xff, 0xff, 0xff, 0xff, 0x55, 0x55, 0x55, 0x55,
X 0xff, 0xff, 0xff, 0xff, 0x55, 0x55, 0x55, 0x55, 0xff, 0xff, 0xff, 0xff,
X 0x55, 0x55, 0x55, 0x55, 0xff, 0xff, 0xff, 0xff, 0x55, 0x55, 0x55, 0x55,
X 0xff, 0xff, 0xff, 0xff, 0x55, 0x55, 0x55, 0x55, 0xff, 0xff, 0xff, 0xff,
X 0x55, 0x55, 0x55, 0x55, 0xff, 0xff, 0xff, 0xff, 0x55, 0x55, 0x55, 0x55,
X 0xff, 0xff, 0xff, 0xff, 0x55, 0x55, 0x55, 0x55, 0xff, 0xff, 0xff, 0xff,
X 0x55, 0x55, 0x55, 0x55, 0xff, 0xff, 0xff, 0xff, 0x55, 0x55, 0x55, 0x55,
X 0xff, 0xff, 0xff, 0xff, 0x55, 0x55, 0x55, 0x55 };
X
X
X#define fill16_width 32
X#define fill16_height 32
Xstatic unsigned char fill16_bits[] = {
X 0xaa, 0xaa, 0xaa, 0xaa, 0xff, 0xff, 0xff, 0xff, 0xaa, 0xaa, 0xaa, 0xaa,
X 0xff, 0xff, 0xff, 0xff, 0xaa, 0xaa, 0xaa, 0xaa, 0xff, 0xff, 0xff, 0xff,
X 0xaa, 0xaa, 0xaa, 0xaa, 0xff, 0xff, 0xff, 0xff, 0xaa, 0xaa, 0xaa, 0xaa,
X 0xff, 0xff, 0xff, 0xff, 0xaa, 0xaa, 0xaa, 0xaa, 0xff, 0xff, 0xff, 0xff,
X 0xaa, 0xaa, 0xaa, 0xaa, 0xff, 0xff, 0xff, 0xff, 0xaa, 0xaa, 0xaa, 0xaa,
X 0xff, 0xff, 0xff, 0xff, 0xaa, 0xaa, 0xaa, 0xaa, 0xff, 0xff, 0xff, 0xff,
X 0xaa, 0xaa, 0xaa, 0xaa, 0xff, 0xff, 0xff, 0xff, 0xaa, 0xaa, 0xaa, 0xaa,
X 0xff, 0xff, 0xff, 0xff, 0xaa, 0xaa, 0xaa, 0xaa, 0xff, 0xff, 0xff, 0xff,
X 0xaa, 0xaa, 0xaa, 0xaa, 0xff, 0xff, 0xff, 0xff, 0xaa, 0xaa, 0xaa, 0xaa,
X 0xff, 0xff, 0xff, 0xff, 0xaa, 0xaa, 0xaa, 0xaa, 0xff, 0xff, 0xff, 0xff,
X 0xaa, 0xaa, 0xaa, 0xaa, 0xff, 0xff, 0xff, 0xff };
X
X
X#define fill17_width 32
X#define fill17_height 32
Xstatic unsigned char fill17_bits[] = {
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05, 0x00,
X 0x00, 0x00, 0x05, 0x00, 0xf8, 0x81, 0x08, 0x00, 0x08, 0x81, 0x08, 0x00,
X 0x08, 0x41, 0x10, 0x00, 0x08, 0x41, 0x10, 0x00, 0x08, 0x21, 0x20, 0x00,
X 0xf8, 0xe1, 0x38, 0x00, 0x90, 0x80, 0x08, 0x00, 0x90, 0x80, 0x08, 0x00,
X 0x90, 0xfe, 0xf8, 0x03, 0x90, 0x82, 0x08, 0x02, 0x90, 0x82, 0x08, 0x02,
X 0x90, 0xf2, 0x78, 0x02, 0x90, 0x92, 0xc8, 0x07, 0xfc, 0xf3, 0x7f, 0x04,
X 0x04, 0x12, 0x40, 0x04, 0x04, 0x12, 0x40, 0x04, 0xfc, 0xf3, 0xff, 0x07,
X 0x90, 0x92, 0x48, 0x02, 0x90, 0x92, 0x48, 0x02, 0x90, 0x92, 0x4f, 0x02,
X 0x90, 0x92, 0x48, 0x02, 0x90, 0xff, 0x78, 0x1e, 0x10, 0x80, 0x48, 0x12,
X 0x10, 0x80, 0x48, 0x12, 0xf0, 0xff, 0x7f, 0x1e, 0x00, 0x12, 0x40, 0x02,
X 0x00, 0x1e, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x00 };
X
X
X#define fill18_width 32
X#define fill18_height 32
Xstatic unsigned char fill18_bits[] = {
X 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01,
X 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01,
X 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01,
X 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01,
X 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01,
X 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01,
X 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01,
X 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01,
X 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01,
X 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01,
X 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01 };
X
X
X#define fill19_width 32
X#define fill19_height 32
Xstatic unsigned char fill19_bits[] = {
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
X 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
X
X
X#define fill20_width 32
X#define fill20_height 32
Xstatic unsigned char fill20_bits[] = {
X 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00,
X 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00,
X 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00,
X 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00,
X 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00,
X 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00,
X 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00,
X 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00,
X 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00,
X 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00,
X 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00 };
X
X
X#define fill21_width 32
X#define fill21_height 32
Xstatic unsigned char fill21_bits[] = {
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
X
X
X#define fill22_width 32
X#define fill22_height 32
Xstatic unsigned char fill22_bits[] = {
X 0x01, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x04, 0x00, 0x04, 0x00,
X 0x08, 0x00, 0x08, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x00, 0x20, 0x00,
X 0x40, 0x00, 0x40, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x01, 0x00, 0x01,
X 0x00, 0x02, 0x00, 0x02, 0x00, 0x04, 0x00, 0x04, 0x00, 0x08, 0x00, 0x08,
X 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x00, 0x20, 0x00, 0x40, 0x00, 0x40,
X 0x00, 0x80, 0x00, 0x80, 0x01, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00,
X 0x04, 0x00, 0x04, 0x00, 0x08, 0x00, 0x08, 0x00, 0x10, 0x00, 0x10, 0x00,
X 0x20, 0x00, 0x20, 0x00, 0x40, 0x00, 0x40, 0x00, 0x80, 0x00, 0x80, 0x00,
X 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x04, 0x00, 0x04,
X 0x00, 0x08, 0x00, 0x08, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x00, 0x20,
X 0x00, 0x40, 0x00, 0x40, 0x00, 0x80, 0x00, 0x80 };
X
X
X#define fill23_width 32
X#define fill23_height 32
Xstatic unsigned char fill23_bits[] = {
X 0x00, 0x80, 0x00, 0x80, 0x00, 0x40, 0x00, 0x40, 0x00, 0x20, 0x00, 0x20,
X 0x00, 0x10, 0x00, 0x10, 0x00, 0x08, 0x00, 0x08, 0x00, 0x04, 0x00, 0x04,
X 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x80, 0x00, 0x80, 0x00,
X 0x40, 0x00, 0x40, 0x00, 0x20, 0x00, 0x20, 0x00, 0x10, 0x00, 0x10, 0x00,
X 0x08, 0x00, 0x08, 0x00, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x00,
X 0x01, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x40, 0x00, 0x40,
X 0x00, 0x20, 0x00, 0x20, 0x00, 0x10, 0x00, 0x10, 0x00, 0x08, 0x00, 0x08,
X 0x00, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01,
X 0x80, 0x00, 0x80, 0x00, 0x40, 0x00, 0x40, 0x00, 0x20, 0x00, 0x20, 0x00,
X 0x10, 0x00, 0x10, 0x00, 0x08, 0x00, 0x08, 0x00, 0x04, 0x00, 0x04, 0x00,
X 0x02, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x00 };
X
X
X#define fill24_width 32
X#define fill24_height 32
Xstatic unsigned char fill24_bits[] = {
X 0xff, 0xff, 0xff, 0xff, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80,
X 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80,
X 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80,
X 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80,
X 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80,
X 0x00, 0x80, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0x00, 0x80, 0x00, 0x80,
X 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80,
X 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80,
X 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80,
X 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80,
X 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80 };
X
X
X#define fill25_width 32
X#define fill25_height 32
Xstatic unsigned char fill25_bits[] = {
X 0x82, 0x00, 0x82, 0x00, 0x44, 0x00, 0x44, 0x00, 0x38, 0x00, 0x38, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x00, 0x82, 0x00, 0x44, 0x00, 0x44,
X 0x00, 0x28, 0x00, 0x28, 0x00, 0x10, 0x00, 0x10, 0x00, 0x28, 0x00, 0x28,
X 0x00, 0x44, 0x00, 0x44, 0x00, 0x82, 0x00, 0x82, 0x00, 0x00, 0x00, 0x00,
X 0x38, 0x00, 0x38, 0x00, 0x44, 0x00, 0x44, 0x00, 0x82, 0x00, 0x82, 0x00,
X 0x82, 0x00, 0x82, 0x00, 0x82, 0x00, 0x82, 0x00, 0x44, 0x00, 0x44, 0x00,
X 0x38, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x00, 0x82,
X 0x00, 0x44, 0x00, 0x44, 0x00, 0x28, 0x00, 0x28, 0x00, 0x10, 0x00, 0x10,
X 0x00, 0x28, 0x00, 0x28, 0x00, 0x44, 0x00, 0x44, 0x00, 0x82, 0x00, 0x82,
X 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x38, 0x00, 0x44, 0x00, 0x44, 0x00,
X 0x82, 0x00, 0x82, 0x00, 0x82, 0x00, 0x82, 0x00 };
X
X
X#define fill26_width 32
X#define fill26_height 32
Xstatic unsigned char fill26_bits[] = {
X 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80,
X 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80,
X 0x00, 0x80, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x80, 0x00,
X 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00,
X 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00,
X 0xff, 0xff, 0xff, 0xff, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80,
X 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80,
X 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff,
X 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00,
X 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00,
X 0x80, 0x00, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff };
X
X
X#define fill27_width 32
X#define fill27_height 32
Xstatic unsigned char fill27_bits[] = {
X 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00,
X 0x10, 0x08, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x04, 0x20,
X 0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00,
X 0x40, 0x02, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x10, 0x08,
X 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00,
X 0x10, 0x08, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x40, 0x02,
X 0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00,
X 0x04, 0x20, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x10, 0x08,
X 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00,
X 0x10, 0x08, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x04, 0x20,
X 0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x10, 0x08 };
X
X
X#define fill28_width 32
X#define fill28_height 32
Xstatic unsigned char fill28_bits[] = {
X 0x81, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x20, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40,
X 0x00, 0x00, 0x00, 0x00, 0x81, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00 };
X
X
X#define fill29_width 32
X#define fill29_height 32
Xstatic unsigned char fill29_bits[] = {
X 0x10, 0x08, 0x10, 0x08, 0x20, 0x10, 0x20, 0x10, 0x40, 0x20, 0x40, 0x20,
X 0x80, 0x40, 0x80, 0x40, 0x01, 0x81, 0x01, 0x81, 0x80, 0x40, 0x80, 0x40,
X 0x40, 0x20, 0x40, 0x20, 0x20, 0x10, 0x20, 0x10, 0x10, 0x08, 0x10, 0x08,
X 0x20, 0x10, 0x20, 0x10, 0x40, 0x20, 0x40, 0x20, 0x80, 0x40, 0x80, 0x40,
X 0x01, 0x81, 0x01, 0x81, 0x80, 0x40, 0x80, 0x40, 0x40, 0x20, 0x40, 0x20,
X 0x20, 0x10, 0x20, 0x10, 0x10, 0x08, 0x10, 0x08, 0x20, 0x10, 0x20, 0x10,
X 0x40, 0x20, 0x40, 0x20, 0x80, 0x40, 0x80, 0x40, 0x01, 0x81, 0x01, 0x81,
X 0x80, 0x40, 0x80, 0x40, 0x40, 0x20, 0x40, 0x20, 0x20, 0x10, 0x20, 0x10,
X 0x10, 0x08, 0x10, 0x08, 0x20, 0x10, 0x20, 0x10, 0x40, 0x20, 0x40, 0x20,
X 0x80, 0x40, 0x80, 0x40, 0x01, 0x81, 0x01, 0x81, 0x80, 0x40, 0x80, 0x40,
X 0x40, 0x20, 0x40, 0x20, 0x20, 0x10, 0x20, 0x10 };
X
X
X#define fill30_width 32
X#define fill30_height 32
Xstatic unsigned char fill30_bits[] = {
X 0x10, 0x10, 0x10, 0x10, 0x28, 0x00, 0x28, 0x00, 0x44, 0x00, 0x44, 0x00,
X 0x82, 0x00, 0x82, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x82, 0x00, 0x82,
X 0x00, 0x44, 0x00, 0x44, 0x10, 0x28, 0x10, 0x28, 0x28, 0x10, 0x28, 0x10,
X 0x44, 0x00, 0x44, 0x00, 0x82, 0x00, 0x82, 0x00, 0x01, 0x01, 0x01, 0x01,
X 0x00, 0x82, 0x00, 0x82, 0x00, 0x44, 0x00, 0x44, 0x00, 0x28, 0x00, 0x28,
X 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x28, 0x00, 0x28, 0x00,
X 0x44, 0x00, 0x44, 0x00, 0x82, 0x00, 0x82, 0x00, 0x01, 0x01, 0x01, 0x01,
X 0x00, 0x82, 0x00, 0x82, 0x00, 0x44, 0x00, 0x44, 0x10, 0x28, 0x10, 0x28,
X 0x28, 0x10, 0x28, 0x10, 0x44, 0x00, 0x44, 0x00, 0x82, 0x00, 0x82, 0x00,
X 0x01, 0x01, 0x01, 0x01, 0x00, 0x82, 0x00, 0x82, 0x00, 0x44, 0x00, 0x44,
X 0x00, 0x28, 0x00, 0x28, 0x10, 0x10, 0x10, 0x10 };
X
X
X#define fill31_width 32
X#define fill31_height 32
Xstatic unsigned char fill31_bits[] = {
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10,
X 0x38, 0x38, 0x38, 0x38, 0x7c, 0x7c, 0x7c, 0x7c, 0x38, 0x38, 0x38, 0x38,
X 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x38, 0x38, 0x38, 0x38,
X 0x7c, 0x7c, 0x7c, 0x7c, 0x38, 0x38, 0x38, 0x38, 0x10, 0x10, 0x10, 0x10,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x10, 0x10, 0x10, 0x10, 0x38, 0x38, 0x38, 0x38, 0x7c, 0x7c, 0x7c, 0x7c,
X 0x38, 0x38, 0x38, 0x38, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10,
X 0x38, 0x38, 0x38, 0x38, 0x7c, 0x7c, 0x7c, 0x7c, 0x38, 0x38, 0x38, 0x38,
X 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00 };
X
X
X#define fill32_width 32
X#define fill32_height 32
Xstatic unsigned char fill32_bits[] = {
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10,
X 0x28, 0x28, 0x28, 0x28, 0x44, 0x44, 0x44, 0x44, 0x28, 0x28, 0x28, 0x28,
X 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x28, 0x28, 0x28, 0x28,
X 0x44, 0x44, 0x44, 0x44, 0x28, 0x28, 0x28, 0x28, 0x10, 0x10, 0x10, 0x10,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x10, 0x10, 0x10, 0x10, 0x28, 0x28, 0x28, 0x28, 0x44, 0x44, 0x44, 0x44,
X 0x28, 0x28, 0x28, 0x28, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10,
X 0x28, 0x28, 0x28, 0x28, 0x44, 0x44, 0x44, 0x44, 0x28, 0x28, 0x28, 0x28,
X 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00 };
X
X
X#define fill33_width 32
X#define fill33_height 32
Xstatic unsigned char fill33_bits[] = {
X 0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x7e, 0x42, 0x42, 0x42, 0x42,
X 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42,
X 0x7e, 0x7e, 0x7e, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x7e, 0x7e, 0x7e, 0x7e, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42,
X 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x7e, 0x7e, 0x7e, 0x7e,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x7e,
X 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42,
X 0x42, 0x42, 0x42, 0x42, 0x7e, 0x7e, 0x7e, 0x7e, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x7e, 0x42, 0x42, 0x42, 0x42,
X 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42,
X 0x7e, 0x7e, 0x7e, 0x7e, 0x00, 0x00, 0x00, 0x00 };
X
X
X#define fill34_width 32
X#define fill34_height 32
Xstatic unsigned char fill34_bits[] = {
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x80, 0x01, 0xc0, 0x03, 0xc0, 0x03,
X 0xe0, 0x07, 0xe0, 0x07, 0xf0, 0x0f, 0xf0, 0x0f, 0xf0, 0x0f, 0xf0, 0x0f,
X 0xe0, 0x07, 0xe0, 0x07, 0xc0, 0x03, 0xc0, 0x03, 0x80, 0x01, 0x80, 0x01,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x80, 0x01,
X 0xc0, 0x03, 0xc0, 0x03, 0xe0, 0x07, 0xe0, 0x07, 0xf0, 0x0f, 0xf0, 0x0f,
X 0xf0, 0x0f, 0xf0, 0x0f, 0xe0, 0x07, 0xe0, 0x07, 0xc0, 0x03, 0xc0, 0x03,
X 0x80, 0x01, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
X
X
X#define fill35_width 32
X#define fill35_height 32
Xstatic unsigned char fill35_bits[] = {
X 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x22, 0x22, 0x22, 0x22, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x22, 0x22, 0x22, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x22, 0x22, 0x22,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x22, 0x22, 0x22, 0x22, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
X
X
X#define fill36_width 32
X#define fill36_height 32
Xstatic unsigned char fill36_bits[] = {
X 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x44,
X 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00,
X 0x44, 0x44, 0x44, 0x44, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11,
X 0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x44, 0x00, 0x00, 0x00, 0x00,
X 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x44,
X 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00,
X 0x44, 0x44, 0x44, 0x44, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11,
X 0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x44, 0x00, 0x00, 0x00, 0x00,
X 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x44,
X 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00,
X 0x44, 0x44, 0x44, 0x44, 0x00, 0x00, 0x00, 0x00 };
X
X
X#define fill37_width 32
X#define fill37_height 32
Xstatic unsigned char fill37_bits[] = {
X 0x02, 0x80, 0x02, 0x80, 0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x08, 0x20,
X 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40, 0x04, 0x40, 0x04,
X 0x80, 0x02, 0x80, 0x02, 0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x80, 0x02,
X 0x40, 0x04, 0x40, 0x04, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10,
X 0x08, 0x20, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00, 0x02, 0x80, 0x02, 0x80,
X 0x01, 0x00, 0x01, 0x00, 0x02, 0x80, 0x02, 0x80, 0x00, 0x00, 0x00, 0x00,
X 0x08, 0x20, 0x08, 0x20, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00,
X 0x40, 0x04, 0x40, 0x04, 0x80, 0x02, 0x80, 0x02, 0x00, 0x00, 0x00, 0x00,
X 0x80, 0x02, 0x80, 0x02, 0x40, 0x04, 0x40, 0x04, 0x00, 0x00, 0x00, 0x00,
X 0x10, 0x10, 0x10, 0x10, 0x08, 0x20, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00,
X 0x02, 0x80, 0x02, 0x80, 0x01, 0x00, 0x01, 0x00 };
X
X
X#define fill38_width 32
X#define fill38_height 32
Xstatic unsigned char fill38_bits[] = {
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x44, 0x44, 0x44, 0x44, 0x28, 0x28, 0x28, 0x28, 0x10, 0x10, 0x10, 0x10,
X 0x28, 0x28, 0x28, 0x28, 0x44, 0x44, 0x44, 0x44, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x44,
X 0x28, 0x28, 0x28, 0x28, 0x10, 0x10, 0x10, 0x10, 0x28, 0x28, 0x28, 0x28,
X 0x44, 0x44, 0x44, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x44, 0x28, 0x28, 0x28, 0x28,
X 0x10, 0x10, 0x10, 0x10, 0x28, 0x28, 0x28, 0x28, 0x44, 0x44, 0x44, 0x44,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x44, 0x44, 0x44, 0x44, 0x28, 0x28, 0x28, 0x28, 0x10, 0x10, 0x10, 0x10,
X 0x28, 0x28, 0x28, 0x28, 0x44, 0x44, 0x44, 0x44 };
X
X
X#define fill39_width 32
X#define fill39_height 32
Xstatic unsigned char fill39_bits[] = {
X 0x00, 0x80, 0x00, 0x80, 0x01, 0x40, 0x01, 0x40, 0x02, 0x20, 0x02, 0x20,
X 0x04, 0x10, 0x04, 0x10, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x08, 0x08, 0x08, 0x08, 0x04, 0x10, 0x04, 0x10, 0x02, 0x20, 0x02, 0x20,
X 0x01, 0x40, 0x01, 0x40, 0x00, 0x80, 0x00, 0x80, 0x01, 0x40, 0x01, 0x40,
X 0x02, 0x20, 0x02, 0x20, 0x04, 0x10, 0x04, 0x10, 0x08, 0x08, 0x08, 0x08,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
X 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x04, 0x10, 0x04, 0x10,
X 0x02, 0x20, 0x02, 0x20, 0x01, 0x40, 0x01, 0x40 };
X
X
X#define fill40_width 32
X#define fill40_height 32
Xstatic unsigned char fill40_bits[] = {
X 0x01, 0x00, 0x01, 0x00, 0x04, 0x00, 0x04, 0x00, 0x10, 0x00, 0x10, 0x00,
X 0x40, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x04, 0x00, 0x04,
X 0x00, 0x10, 0x00, 0x10, 0x00, 0x40, 0x00, 0x40, 0x01, 0x00, 0x01, 0x00,
X 0x04, 0x00, 0x04, 0x00, 0x10, 0x00, 0x10, 0x00, 0x40, 0x00, 0x40, 0x00,
X 0x00, 0x01, 0x00, 0x01, 0x00, 0x04, 0x00, 0x04, 0x00, 0x10, 0x00, 0x10,
X 0x00, 0x40, 0x00, 0x40, 0x01, 0x00, 0x01, 0x00, 0x04, 0x00, 0x04, 0x00,
X 0x10, 0x00, 0x10, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x01,
X 0x00, 0x04, 0x00, 0x04, 0x00, 0x10, 0x00, 0x10, 0x00, 0x40, 0x00, 0x40,
X 0x01, 0x00, 0x01, 0x00, 0x04, 0x00, 0x04, 0x00, 0x10, 0x00, 0x10, 0x00,
X 0x40, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x04, 0x00, 0x04,
X 0x00, 0x10, 0x00, 0x10, 0x00, 0x40, 0x00, 0x40 };
X
X
X#define fill41_width 32
X#define fill41_height 32
Xstatic unsigned char fill41_bits[] = {
X 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40,
X 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00,
X 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08,
X 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
X 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,
X 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00,
X 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20,
X 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00,
X 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x04,
X 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00,
X 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00 };
X
X
Xstatic Pixmap fillpattern[XviG_NR_OF_FILLPATTERNS];
X
X
X
X/*
X-- The linestyles ....
X--
X--       line 0 :    ----
X--       line 1 :    --..
X--       line 2 :    --------..--..
X--       line 3 :    ------..
X--       line 4 :    ------------....
X--       line 5 :    --..--..--..------------..--..--..------------..
X--       line 6 :    ------------------......------......
X--       line 7 :    ------......
X*/
X
X
Xstatic char linestyle[XviG_NR_OF_LINESTYLES][14] =
X                 { { 4 },                /* This solid linestyle is obsolete */
X                   { 2, 2 },
X                   { 8, 2, 2, 2 },
X                   { 6, 2 },
X                   { 12, 4 },
X                   { 2, 2, 2, 2, 2, 2, 12, 2, 2, 2, 2, 2, 12, 2 },
X                   { 18, 6, 6, 6 },
X                   { 6, 6 } };
X
Xstatic int linestyle_length[XviG_NR_OF_LINESTYLES] =
X                 { 1,
X                   2,
X                   4,
X                   2,
X                   2,
X                   14,
X                   4,
X                   2 };
X
X
X#endif  /* __PATTERN_H */
END_OF_FILE
  if test 38091 -ne `wc -c <'version_1.1/src/pattern.h'`; then
    echo shar: \"'version_1.1/src/pattern.h'\" unpacked with wrong size!
  fi
  # end of 'version_1.1/src/pattern.h'
fi
if test -f 'version_1.1/src/ptext.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'version_1.1/src/ptext.c'\"
else
  echo shar: Extracting \"'version_1.1/src/ptext.c'\" \(5777 characters\)
  sed "s/^X//" >'version_1.1/src/ptext.c' <<'END_OF_FILE'
X/* File>>> ptext.c
X--
X-- %M% -- version %I% (IMEC)            last updated: %E%
X--
X-- Copyright (c) 1993
X-- IMEC vzw
X-- Kapeldreef 75
X-- B-3001 LEUVEN
X-- BELGIUM
X--
X-- Author   : A. Demaree
X--
X-- Date     : June 23, 1993
X--
X-- Function : Routine to draw text by means of polylines.
X--
X-- Comment  :
X--
X-- Review   :
X--
X*/
X
X
X/*------------------------------------------------------------------------------
X-- Global include files
X------------------------------------------------------------------------------*/
X
X#include <stdlib.h>
X#include <stdio.h>
X#include <string.h>
X#include <math.h>
X#include <X11/Xlib.h>
X
X/*------------------------------------------------------------------------------
X-- Local include files
X------------------------------------------------------------------------------*/
X
X#include "xviglocal.h"
X#include "charcodes.h"
X
X/*------------------------------------------------------------------------------
X-- Some macro definitions
X------------------------------------------------------------------------------*/
X
X#define PI  ((double)3.14159265358979323846)
X#define ROUND(x)  ((int)floor((x) + 0.5))
X
X/*------------------------------------------------------------------------------
X-- Static variable declarations
X------------------------------------------------------------------------------*/
X
Xstatic double t_text[3][2];
Xstatic XPoint points[16];
X
X/*------------------------------------------------------------------------------
X-- Local function declarations
X------------------------------------------------------------------------------*/
X
Xstatic void get_charmatrix(int x_offset, int y_offset,
X                           unsigned int width, unsigned int height,
X                           int rotation);
Xstatic void transchar(int x, int y,
X                      int *xt, int *yt);
Xstatic void drawchar(int c, int offset);
X
X/*------------------------------------------------------------------------------
X--
X--
X--
X------------------------------------------------------------------------------*/
X
Xvoid XviG_PolyText(char *contents,
X                   int x,
X                   int y,
X                   unsigned int width,
X                   unsigned int height,
X                   int rotation)
X{
X  int len, newx, newy, offset, i;
X
X  if ((len = (int) strlen(contents)) == 0)
X    return;
X
X  rotation %= 360;
X  if (rotation < 0)
X    rotation += 360;
X
X  get_charmatrix(x, y, width, height, rotation);
X
X  if ((rotation > 90) && (rotation <= 270))
X  {
X    transchar(7*len, 4, &newx, &newy);
X    t_text[0][0] = newx * 1.0;
X    t_text[0][1] = newy * 1.0;
X    t_text[1][0] = -t_text[1][0];
X    t_text[1][1] = -t_text[1][1];
X    t_text[2][0] = -t_text[2][0];
X    t_text[2][1] = -t_text[2][1];
X  }
X
X  XSetLineAttributes(XviG_display, XviG_gc,
X                     XviG_save_linewidth, XviG_save_linestyle,
X                     CapRound, JoinRound);
X
X  for (i = 0, offset = 0; i < len; i++, offset += 7)
X    drawchar(contents[i], offset);
X
X  XSetLineAttributes(XviG_display, XviG_gc,
X                     XviG_save_linewidth, XviG_save_linestyle,
X                     CapButt, JoinMiter);
X}
X
X/*------------------------------------------------------------------------------
X--
X--
X--
X------------------------------------------------------------------------------*/
X
Xstatic void get_charmatrix(int x_offset, int y_offset,
X                           unsigned int width, unsigned int height,
X                           int rotation)
X{
X  double rcos,rsin;
X
X  if (rotation == 0)
X  {
X    rcos = 1.0;
X    rsin = 0.0;
X  }
X  else
X  if (rotation == 90)
X  {
X    rcos = 0.0;
X    rsin = 1.0;
X  }
X  else
X  if (rotation == 180)
X  {
X    rcos = -1.0;
X    rsin = 0.0;
X  }
X  else
X  if (rotation == 270)
X  {
X    rcos = 0.0;
X    rsin = -1.0;
X  }
X  else
X  {
X    rcos = cos((rotation*PI)/180.0);
X    rsin = sin((rotation*PI)/180.0);
X  }
X
X  t_text[0][0] = x_offset * 1.0;
X  t_text[0][1] = y_offset * 1.0;
X  t_text[1][0] =  rcos * (width/7.0);
X  t_text[1][1] =  rsin * (width/7.0);
X  t_text[2][0] = -rsin * (height/8.0);
X  t_text[2][1] =  rcos * (height/8.0);
X}
X
X/*------------------------------------------------------------------------------
X--
X--
X--
X------------------------------------------------------------------------------*/
X
Xstatic void transchar(int x, int y,
X                      int *xt, int *yt)
X{
X  *xt = ROUND(t_text[0][0] + t_text[1][0]*x + t_text[2][0]*y);
X  *yt = ROUND(t_text[0][1] - t_text[1][1]*x - t_text[2][1]*y);
X}
X
X/*------------------------------------------------------------------------------
X--
X--
X--
X------------------------------------------------------------------------------*/
X
Xstatic void drawchar(int c, int offset)
X{
X  int npolys, npoints, charpos, polypos, pointpos, xt, yt;
X
X  charpos = charpointer[((c < 32) || (c > 126)) ? 0 : c - 32];
X
X  for (npolys = 0, polypos = charpos + 1;
X       npolys < charcode[charpos];
X       npolys++, polypos = pointpos)
X  {
X    for (npoints = 0, pointpos = polypos + 1;
X         npoints < charcode[polypos];
X         npoints++, pointpos += 2)
X    {
X      transchar(charcode[pointpos]+offset, charcode[pointpos+1], &xt, &yt);
X
X      points[npoints].x = xt;
X      points[npoints].y = yt;
X    }
X
X    if (charcode[polypos] == 2)
X    {
X      XDrawLine(XviG_display, XviG_window, XviG_gc,
X                (int) points[0].x, (int) points[0].y,
X                (int) points[1].x, (int) points[1].y);
X      XDrawLine(XviG_display, XviG_pixmap, XviG_gc,
X                (int) points[0].x, (int) points[0].y,
X                (int) points[1].x, (int) points[1].y);
X    }
X    else
X    {
X      XDrawLines(XviG_display, XviG_window, XviG_gc,
X                 points, charcode[polypos], CoordModeOrigin);
X      XDrawLines(XviG_display, XviG_pixmap, XviG_gc,
X                 points, charcode[polypos], CoordModeOrigin);
X    }
X  }
X}
END_OF_FILE
  if test 5777 -ne `wc -c <'version_1.1/src/ptext.c'`; then
    echo shar: \"'version_1.1/src/ptext.c'\" unpacked with wrong size!
  fi
  # end of 'version_1.1/src/ptext.c'
fi
echo shar: End of archive 4 \(of 10\).
cp /dev/null ark4isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 10 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
    echo "Merging xvig.ps parts... "
    cat version_1.1/man/xvig.ps.? > version_1.1/man/xvig.ps
    rm version_1.1/man/xvig.ps.?
    echo "Done."
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0
exit 0 # Just in case...
-- 
  // chris@Sterling.COM           | Send comp.sources.x submissions to:
\X/  Amiga - The only way to fly! |    sources-x@sterling.com
 "It's intuitively obvious to the |
  most casual observer..."        | GCS d+/-- p+ c++ l+ m+ s++/+ g+ w+ t+ r+ x+
