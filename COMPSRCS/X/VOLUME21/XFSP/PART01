Newsgroups: comp.sources.x
From: Steff.Watkins@bristol.ac.uk ("S. Watkins")
Subject: v21i046:  xfsp - X based front-end for the FSP package, Part01/02
Message-ID: <csx-v21i046=xfsp.105140@sparky.Sterling.COM>
X-Md4-Signature: 1fffae776136c2d50c830e1171516d0e
Sender: chris@sparky.sterling.com (Chris Olson)
Organization: Sterling Software
Date: Tue, 23 Nov 1993 16:52:16 GMT
Approved: chris@sterling.com

Submitted-by: Steff.Watkins@bristol.ac.uk ("S. Watkins")
Posting-number: Volume 21, Issue 46
Archive-name: xfsp/part01
Environment: X11, FSP

The following code is an X based front-end for the FSP package. To use
this program, you will also have to have the FSP package installed and in
your search path.

================== CUT HERE =================================
#!/bin/sh
# to extract, remove the header and type "sh filename"
if `test ! -s ./logo.h`
then
echo "Writing ./logo.h"
cat > ./logo.h << '\Rogue\Monster\'
#define logo_width 240
#define logo_height 78
static char logo_bits[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x30, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xf0, 0xff, 0x0f, 0x00, 0xc0, 0x0c, 0x30, 
0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xf0, 0xff, 0x0f, 0x00, 0xc0, 0x0c, 0x30, 0x03, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x0c, 
0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 
0xff, 0xff, 0x03, 0x3f, 0x3f, 0x00, 0x03, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xc0, 0x0c, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 
0xff, 0x03, 0x3f, 0x3f, 0x00, 0x03, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x03, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 
0xff, 0xcf, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x03, 0x00, 
0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 
0xcf, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x3c, 0x00, 0x00, 0x0f, 0x03, 0x0c, 0x00, 0x00, 
0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 
0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 
0x00, 0x00, 0x0f, 0x03, 0x0c, 0x00, 0x00, 0x00, 
0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 
0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 
0xc0, 0x0f, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 
0x0f, 0x00, 0xff, 0xff, 0xff, 0xfc, 0xff, 0x3f, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0xc0, 
0x0f, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x0f, 
0x00, 0xff, 0xff, 0xff, 0xfc, 0xff, 0x3f, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xc0, 0xff, 0x03, 0x00, 0xf0, 0x3f, 
0x00, 0x0f, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 
0xf0, 0xff, 0x0f, 0xc3, 0xff, 0x0f, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xc0, 0xff, 0x03, 0x00, 0xf0, 0x3f, 0x00, 
0x0f, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xf0, 
0xff, 0x0f, 0xc3, 0xff, 0x0f, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x, 
0xf0, 0xff, 0x03, 0x00, 0xfc, 0xff, 0xff, 0x03, 
0x00, 0x00, 0x00, 0xc0, 0x00, 0x03, 0x00, 0x00, 
0xc0, 0x00, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 
0xff, 0x03, 0x00, 0xfc, 0xff, 0xff, 0x03, 0x00, 
0x00, 0x00, 0xc0, 0x00, 0x03, 0x00, 0x00, 0xc0, 
0x00, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 
0x0f, 0x00, 0xf3, 0xff, 0xff, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xff, 0x00, 0xc0, 0xff, 0x3c, 0x00, 
0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0x0f, 
0x00, 0xf3, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xff, 0x00, 0xc0, 0xff, 0x3c, 0x00, 0xfc, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0xfc, 0xff, 0x3f, 0x00, 
0x03, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xc0, 0xff, 0x3c, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xfc, 0xff, 0x3f, 0x00, 0x03, 
0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xc0, 0xff, 0x3c, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xfc, 0xff, 0xff, 0xc0, 0x30, 0x30, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xc0, 0xff, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x30, 0x00, 0x0c, 0x00, 0x03, 0xf0, 0x00, 0x00, 
0xfc, 0xff, 0xff, 0xc0, 0x30, 0x30, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 
0xff, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
0x00, 0x0c, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x, 
0x3c, 0xfc, 0xff, 0xc3, 0xc0, 0x30, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 
0x3c, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfc, 0x00, 
0x0c, 0xc0, 0x0f, 0xfc, 0x0f, 0x00, 0x3c, 
0xfc, 0xff, 0xc3, 0xc0, 0x30, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3c, 
0x00, 0x0c, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0c, 
0xc0, 0x0f, 0xfc, 0x0f, 0x00, 0x30, 0xf0, 
0xff, 0x0f, 0xc3, 0x0c, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0x3c, 0x00, 
0x30, 0x00, 0x00, 0xc0, 0xff, 0xff, 0x03, 0xf0, 
0x3f, 0xff, 0x3f, 0x00, 0x30, 0xf0, 0xff, 
0x0f, 0xc3, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xc0, 0xff, 0xff, 0x3c, 0x00, 0x30, 
0x00, 0x00, 0xc0, 0xff, 0xff, 0x03, 0xf0, 0x3f, 
0xff, 0x3f, 0x00, 0xc0, 0xc3, 0xff, 0x3f, 
0x3c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xf0, 0xff, 0xff, 0x3c, 0x00, 0x30, 0x00, 
0x00, 0xf0, 0xff, 0xff, 0x00, 0xfc, 0xff, 0xff, 
0xff, 0x00, 0xc0, 0xc3, 0xff, 0x3f, 0x3c, 
0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xf0, 0xff, 0xff, 0x3c, 0x00, 0x30, 0x00, 0x00, 
0xf0, 0xff, 0xff, 0x00, 0xfc, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x03, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
0xf0, 0xff, 0x3c, 0x00, 0x3c, 0x00, 0x00, 0xff, 
0xf0, 0x3f, 0xc0, 0xff, 0x3f, 0xf0, 0xff, 0x03, 
0x00, 0x00, 0xff, 0xff, 0x00, 0x03, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xf0, 
0xff, 0x3c, 0x00, 0x3c, 0x00, 0x00, 0xff, 0xf0, 
0x3f, 0xc0, 0xff, 0x3f, 0xf0, 0xff, 0x03, 0x, 
0x00, 0x00, 0xfc, 0xff, 0x03, 0x03, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0xc0, 0xff, 
0xfc, 0xff, 0x0f, 0x00, 0xfc, 0xff, 0x00, 0x00, 
0x00, 0xfc, 0x0f, 0xc0, 0xff, 0x00, 0x00, 
0x00, 0xfc, 0xff, 0x03, 0x03, 0x00, 0xf8, 0xff, 
0xff, 0xff, 0xff, 0x01, 0x0c, 0xc0, 0xff, 0xfc, 
0xff, 0x0f, 0x00, 0xfc, 0xff, 0x00, 0x00, 0x00, 
0xfc, 0x0f, 0xc0, 0xff, 0x00, 0x00, 0xf0, 
0xff, 0xff, 0xff, 0xff, 0x03, 0xf8, 0xff, 0xff, 
0xff, 0xff, 0x01, 0x00, 0xc0, 0xff, 0xfc, 0xff, 
0x0f, 0x00, 0xc0, 0xff, 0x00, 0x30, 0x00, 0xf0, 
0x0f, 0x00, 0xff, 0x00, 0x00, 0xf0, 0xff, 
0xff, 0xff, 0xff, 0x03, 0xf8, 0xff, 0xff, 0xff, 
0xff, 0x01, 0x00, 0xc0, 0xff, 0xfc, 0xff, 0x0f, 
0x00, 0xc0, 0xff, 0x00, 0x30, 0x00, 0xf0, 0x0f, 
0x00, 0xff, 0x00, 0x00, 0xf0, 0xff, 0xff, 
0xff, 0xff, 0x03, 0xf8, 0xff, 0xff, 0xff, 0xff, 
0x01, 0x00, 0xff, 0xff, 0x3c, 0x00, 0x3f, 0x00, 
0x00, 0xff, 0x00, 0xfc, 0x00, 0xf0, 0x0f, 0x00, 
0xff, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 
0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xff, 0xff, 0x3c, 0x00, 0x3f, 0x00, 0x00, 
0xff, 0x00, 0xfc, 0x00, 0xf0, 0x0f, 0x00, 0xff, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 
0xff, 0xff, 0x3c, 0x30, 0x0f, 0x00, 0x00, 0xff, 
0x00, 0xff, 0x03, 0xf0, 0x0f, 0x00, 0xff, 0x00, 
0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0xc0, 0xff, 
0xff, 0x3c, 0x30, 0x0f, 0x00, 0x00, 0xff, 0x00, 
0xff, 0x03, 0xf0, 0x0f, 0x00, 0xff, 0x00, 0x, 
0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0xf8, 
0xff, 0xff, 0xff, 0xff, 0x01, 0xf0, 0xff, 0xff, 
0x3c, 0xc0, 0x03, 0x00, 0xc0, 0xff, 0xc3, 0xff, 
0x3f, 0xf0, 0x0f, 0x00, 0xff, 0x00, 0x00, 
0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0x3c, 
0xc0, 0x03, 0x00, 0xc0, 0xff, 0xc3, 0xff, 0x3f, 
0xf0, 0x0f, 0x00, 0xff, 0x00, 0x00, 0x00, 
0x00, 0xf3, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x30, 0xf0, 0xff, 0x3c, 0x00, 
0x00, 0x00, 0xf0, 0xff, 0x3f, 0xff, 0x0f, 0xf0, 
0x0f, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 
0xf3, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x30, 0xf0, 0xff, 0x3c, 0x00, 0x00, 
0x00, 0xf0, 0xff, 0x3f, 0xff, 0x0f, 0xf0, 0x0f, 
0x00, 0xff, 0x00, 0x00, 0x00, 0xc0, 0xc0, 
0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0c, 0xc0, 0xff, 0x3c, 0x00, 0x00, 0x00, 
0x00, 0xfc, 0x0f, 0xfc, 0x03, 0xf0, 0x0f, 0x00, 
0xff, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xff, 
0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0c, 0xc0, 0xff, 0x3c, 0x00, 0x00, 0x00, 0x00, 
0xfc, 0x0f, 0xfc, 0x03, 0xf0, 0x0f, 0x00, 0xff, 
0x00, 0x00, 0x00, 0xc0, 0x00, 0xff, 0xff, 
0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xc0, 0xff, 0x3c, 0x00, 0x00, 0x00, 0x00, 0xf0, 
0x03, 0xfc, 0x03, 0xf0, 0x0f, 0x00, 0xff, 0x00, 
0x00, 0x00, 0xc0, 0x00, 0xff, 0xff, 0x00, 
0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 
0xff, 0x3c, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x03, 
0xfc, 0x03, 0xf0, 0x0f, 0x00, 0xff, 0x00, 0x, 
0x00, 0x00, 0x30, 0x3c, 0xfc, 0xff, 0xc3, 0x30, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 
0x3c, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0xfc, 
0x03, 0xf0, 0x0f, 0x00, 0xff, 0x03, 0x00, 
0x00, 0x30, 0x3c, 0xfc, 0xff, 0xc3, 0x30, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x3c, 
0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0xfc, 0x03, 
0xf0, 0x0f, 0x00, 0xff, 0x03, 0x00, 0x00, 
0x30, 0xc3, 0xf0, 0xff, 0x0f, 0x30, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x3c, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x03, 0xf0, 
0xff, 0x3f, 0x3f, 0x00, 0x00, 0x00, 0x30, 
0xc3, 0xf0, 0xff, 0x0f, 0x30, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0xc0, 0xff, 0x3c, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x03, 0xf0, 0xff, 
0x3f, 0x3f, 0x00, 0x00, 0x00, 0x0c, 0x03, 
0xc3, 0xff, 0x3f, 0x30, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xc0, 0xff, 0x3c, 0x00, 0x00, 0x00, 
0x00, 0xff, 0x3f, 0xfc, 0x03, 0xfc, 0xff, 0xff, 
0x0f, 0x00, 0x00, 0x00, 0x0c, 0x03, 0xc3, 
0xff, 0x3f, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xc0, 0xff, 0x3c, 0x00, 0x00, 0x00, 0x00, 
0xff, 0x3f, 0xfc, 0x03, 0xfc, 0xff, 0xff, 0x0f, 
0x00, 0x00, 0x00, 0x0c, 0x0c, 0x03, 0xff, 
0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xc0, 0xff, 0x3c, 0x00, 0x0f, 0x00, 0xc0, 0xff, 
0xff, 0x0f, 0x00, 0xff, 0xff, 0xff, 0x03, 0x00, 
0x00, 0x00, 0x0c, 0x0c, 0x03, 0xff, 0xff, 
0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 
0xff, 0x3c, 0x00, 0x0f, 0x00, 0xc0, 0xff, 0xff, 
0x0f, 0x00, 0xff, 0xff, 0xff, 0x03, 0x00, 0x, 
0x00, 0xf0, 0xff, 0xc0, 0x00, 0xfc, 0xff, 0x03, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 
0x3c, 0xc0, 0x30, 0x00, 0xf0, 0xff, 0xff, 0x03, 
0x00, 0xf0, 0x0f, 0xfc, 0x00, 0x00, 0x00, 
0xf0, 0xff, 0xc0, 0x00, 0xfc, 0xff, 0x03, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x3c, 
0xc0, 0x30, 0x00, 0xf0, 0xff, 0xff, 0x03, 0x00, 
0xf0, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0xff, 
0xff, 0xc3, 0x00, 0xf0, 0xff, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x3c, 0x00, 
0x30, 0x00, 0xfc, 0xc0, 0x3f, 0x00, 0x00, 0xf0, 
0x0f, 0x30, 0x00, 0x00, 0x00, 0xff, 0xff, 
0xc3, 0x00, 0xf0, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0xc0, 0xff, 0x3c, 0x00, 0x30, 
0x00, 0xfc, 0xc0, 0x3f, 0x00, 0x00, 0xf0, 0x0f, 
0x30, 0x00, 0x00, 0xc0, 0xff, 0xff, 0x3f, 
0x00, 0xc0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xc0, 0xff, 0x3c, 0x00, 0x0c, 0x00, 
0x3c, 0x00, 0x0c, 0x00, 0x00, 0xf0, 0x0f, 0x00, 
0x00, 0x00, 0xc0, 0xff, 0xff, 0x3f, 0x00, 
0xc0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xc0, 0xff, 0x3c, 0x00, 0x0c, 0x00, 0x3c, 
0x00, 0x0c, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 
0x00, 0xf0, 0x00, 0xfc, 0x0f, 0x00, 0x00, 
0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xfc, 0xff, 0xfc, 0xff, 0x03, 0x00, 0x0c, 0x00, 
0x00, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0x00, 
0xf0, 0x00, 0xfc, 0x0f, 0x00, 0x00, 0x0f, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 
0xff, 0xfc, 0xff, 0x03, 0x00, 0x0c, 0x00, 0x00, 
0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0x00, 0x, 
0x30, 0x00, 0xf0, 0x03, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x03, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 
0x00, 0xf0, 0x0f, 0x00, 0x00, 0x00, 0x30, 
0x00, 0xf0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x03, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 
0xf0, 0x0f, 0x00, 0x00, 0x00, 0x30, 0xc0, 
0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xfc, 0x03, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xf0, 
0x0f, 0x00, 0x00, 0x00, 0x30, 0xc0, 0xf0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xfc, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0f, 
0x00, 0x00, 0x00, 0xc0, 0x00, 0x33, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0f, 0x00, 
0x00, 0x00, 0xc0, 0x00, 0x33, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 
0x00, 0x00, 0xff, 0x30, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x00, 
0x00, 0xff, 0x30, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x00, 0x, 
0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0xc0, 0x30, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xc0, 0x30, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xc0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
\Rogue\Monster\
else
  echo "Will not over-write ./logo.h"
fi
chmod 644 ./logo.h
if `test ! -s ./maxdown.h`
then
echo "Writing ./maxdown.h"
cat > ./maxdown.h << '\Rogue\Monster\'
#define maxdown_width 16
#define maxdown_height 16
static char maxdown_bits[] = {
   0xff, 0xff, 0x01, 0x80, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
   0xfd, 0xbf, 0xf9, 0x9f, 0xf1, 0x8f, 0xe1, 0x87, 0xc1, 0x83, 0x81, 0x81,
   0xfd, 0xbf, 0xfd, 0xbf, 0x01, 0x80, 0xff, 0xff};
\Rogue\Monster\
else
  echo "Will not over-write ./maxdown.h"
fi
chmod 644 ./maxdown.h
if `test ! -s ./maxup.h`
then
echo "Writing ./maxup.h"
cat > ./maxup.h << '\Rogue\Monster\'
#define maxup_width 16
#define maxup_height 16
static char maxup_bits[] = {
   0xff, 0xff, 0x01, 0x80, 0xfd, 0xbf, 0xfd, 0xbf, 0x81, 0x81, 0xc1, 0x83,
   0xe1, 0x87, 0xf1, 0x8f, 0xf9, 0x9f, 0xfd, 0xbf, 0x81, 0x81, 0x81, 0x81,
   0x81, 0x81, 0x81, 0x81, 0x01, 0x80, 0xff, 0xff};
\Rogue\Monster\
else
  echo "Will not over-write ./maxup.h"
fi
chmod 644 ./maxup.h
if `test ! -s ./ops.c`
then
echo "Writing ./ops.c"
cat > ./ops.c << '\Rogue\Monster\'
#include "xfsp.h"
#include <sys/param.h>
#include <pwd.h>
#include <strings.h>
#include <stdio.h>
#include "config.h"

extern Display *dpy;
extern char hostname[40], portname[6], lfilname[30], rdirname[70];
extern char rfilname[30], currdir[70], tempname[L_tmpnam];
static char fsp_host[80], fsp_port[64], fsp_dir[200];
extern XFontStruct *font;
extern GC gc;
extern int dirlen, dirs[256], entries, topent, numhosts, tophost;
extern char dates[256][20], names[256][30], sizes[256][10];
extern char home[60], hostf[40];

char tempfile[MAXPATHLEN+10];
char Lhosts[50][40], Lports[50][6], Lcomments[50][30];

runend()
{
  XUnloadFont(dpy, font->fid);
  XFreeGC(dpy, gc);
  XCloseDisplay(dpy);
  exit(0);
}

int execute(s)
char *s;
{
  int status,pid,w;
  register int (*istat)(), (*qstat)();

#ifdef VFORK
   pid = vfork();
#else
   pid = fork();
#endif

  if (pid == 0) {
   signal(SIGINT, SIG_DFL);
   signal(SIGQUIT, SIG_DFL);
   signal(SIGHUP, SIG_DFL);
   execl("/bin/sh", "sh", "-c", s, 0);
   _exit(127);
  }
 istat = signal(SIGINT, SIG_IGN);
 qstat = signal(SIGQUIT, SIG_IGN);
 while ((w = wait(&status)) != pid && w != -1) ;
 if (w == -1) status = -1;
 signal(SIGINT, istat);
 signal(SIGQUIT, qstat);
 return(status);
}

flist()
{
FILE *lfile;
char line[30];
int i = -2;

 entries = 0;
 topent = 0;
 strcpy(tempfile,tempname);
 lfile = fopen(tempfile, "r");
 while ((fscanf(lfile, "%s", line) != EOF)) {
 i++;
 if (i == 1) dirs[entries] = (line[0] == 100);
 if (i == 4) strcpy(sizes[entries],line);
 if (i == 5) strcpy(dates[entries],line);
 if (i == 6 || i == 7){
  strcat(dates[entries]," ");
  strcat(dates[entries],line);
 }
 if (i == 8) {
  strcpy(names[entries],line);
  i = 0;
  entries++;
  }
 }
 fclose(lfile);
 showentries();
}

selfile(by)
int by;
{
 int i , s;
 char tempstr[60];

 i = (((by - 30) / 15) + topent);
 if (i <= entries) {
 if (dirs[i]) {
  strcpy(rdirname, currdir);
  if (strcmp(names[i],"..") != 0) {
   strcpy(tempstr, "");
   strncat(tempstr, rdirname, dirlen);
   if (dirlen != 1) strcat(tempstr,"/");
   strcat(tempstr, names[i]);
   strcpy(rdirname, tempstr);
   }
  else
  {
   s = 1;
   i = 1;
    while (i < dirlen) {
     if (rdirname[i] == 47) s = i;
     i++;
     }
    strcpy(tempstr,"");
    strncat(tempstr,rdirname,s);
    strcpy(rdirname,tempstr);
   }
  } 
 else
 {
  strcpy(rfilname,names[i]);
  strcpy(tempstr, "");
  strncat(tempstr, rdirname, dirlen);
  strcpy(rdirname, tempstr);
 }
 showstrings();
 }
}

make_env()
{
 strcpy(fsp_host,"FSP_HOST=");
 strcat(fsp_host, hostname);
 (void) putenv(fsp_host);
 strcpy(fsp_port,"FSP_PORT=");
 strcat(fsp_port, portname);
 (void) putenv(fsp_port);
 strcpy(fsp_dir,"FSP_DIR=");
 strcat(fsp_dir, rdirname);
 (void) putenv(fsp_dir);
}

char homedir()
{
struct passwd *pass;
uid_t uid;

 uid = getuid();
 pass = getpwuid(uid);
 strcpy(home, pass->pw_dir);
}

readhosts()
{
FILE *lfile;
char line[80];
int c = 0, end = 0;

 strcpy(tempfile, hostf);
 lfile = fopen(tempfile, "r");
 tophost = 0;
 numhosts = 0;
 if (lfile) {
  while ((fscanf(lfile, "%s", line) != EOF) && (numhosts < 51)) {
   c++;
   if (line[strlen(line)-1] == 42) {
     line[strlen(line)-1] = 0;
     end = 1;
   }
   if (c == 1) strcpy(Lhosts[numhosts],line);
   if (c == 2) {
    strcpy(Lports[numhosts],line);
    strcpy(Lcomments[numhosts],"");
    }
   if (c > 2) {
    if ((strlen(Lcomments[numhosts])+strlen(line)) < 29) {
    strcat(Lcomments[numhosts],line);
    strcat(Lcomments[numhosts]," ");
    }
   }
   if (end) {
    c = 0;
    numhosts++;
    end = 0;
   }
  }
 }
}

selhost(by)
int by;
{
 int i;

 i = (((by - 20) / 15) + tophost);
 strcpy(hostname,Lhosts[i]);
 strcpy(portname,Lports[i]);
 strcpy(rfilname,"");
 strcpy(lfilname,"");
 strcpy(rdirname,"/");
 entries = 0;
 showstrings();
}


\Rogue\Monster\
else
  echo "Will not over-write ./ops.c"
fi
chmod 755 ./ops.c
if `test ! -s ./output.c`
then
echo "Writing ./output.c"
cat > ./output.c << '\Rogue\Monster\'
#include "xfsp.h"

#include "maxup.h"
#include "up.h"
#include "down.h"
#include "maxdown.h"
#include "xfsp.xbm"

extern Display *dpy;
extern int screen_num;
extern char *dpy_name;
extern Window win, hostwin, aboutwin;
extern GC gc;
extern unsigned long bg, fg;
extern Pixmap down, up, maxdown, maxup,  logo;
extern int ddepth, litbutton, litstr, tophost, numhosts;
extern char hostname[40], portname[6], lfilname[30], rdirname[70];
extern char rfilname[30], hostf[40];
extern char dates[256][20], sizes[256][10], names[256][30];
extern char Lhosts[50][40], Lports[50][6], Lcomments[50][30];
extern dirlen, topent;
extern int dirs[256], entries, hoston;
extern XFontStruct *font;

mainscr()
{
  XDrawRectangle(dpy, win, gc, 10, 10, 480, 270);
  XDrawLine(dpy, win, gc, 10, 30, 490, 30);
  XDrawString(dpy, win, gc, 20, 25, "Name:", 5);
  XDrawString(dpy, win, gc, 250, 25, "Date:", 5);
  XDrawString(dpy, win, gc, 350, 25, "Size:", 5);
  XCopyArea(dpy, maxup, win, gc, 0, 0, maxup_width, maxup_height, 475, 30);
  XCopyArea(dpy,maxdown,win,gc,0,0, maxdown_width, maxdown_height, 475, 265);
  XCopyArea(dpy, up, win, gc, 0, 0, up_width, up_height, 475, 48);
  XCopyArea(dpy, down, win, gc, 0, 0, down_width, down_height, 475, 247);
  button(10,  290, "host", win, 0);
  button(380, 290, "port", win, 0);
  button(10,  310, "r-dir", win, 0);
  button(10,  330, "rfile",win, 0);
  button(250, 330, "lfile", win, 0);
  button(10,  370, "hosts", win, 0);
  button(60,  370, "fls",  win, 0);
  button(110, 370, "fget", win, 0);
  button(160, 370, "fput", win, 0);
  button(210, 370, "fcd", win, 0);
  button(260, 370, "about",win, 0);
  button(440, 370, "quit", win, 0);
  showstrings();
  showentries();
}

button(x, y, textstr, vwin, lit)
int x, y, lit;
Window vwin;
char *textstr;
{
  XPoint poly[9];
  int h, w, r, tx, tw;

  w = 40;
  h = 15;
  r = 3;
  poly [0].x = x;
  poly [0].y = y+r;
  poly [1].x = x;
  poly [1].y = y+h-r;
  poly [2].x = x+r;
  poly [2].y = y+h;
  poly [3].x = x+w-r;
  poly [3].y = y+h;
  poly [4].x = x+w;
  poly [4].y = y+h-r;
  poly [5].x = x+w;
  poly [5].y = y+r;
  poly [6].x = x+w-r;
  poly [6].y = y;
  poly [7].x = x+r;
  poly [7].y = y;
  poly [8].x = x;
  poly [8].y = y+r;
  if (!lit) XSetForeground (dpy, gc, bg);
  else XSetForeground (dpy, gc, fg);
  XFillPolygon (dpy, vwin, gc, poly, 9, Convex, CoordModeOrigin);
  XSetForeground(dpy, gc, fg);
  XDrawLines(dpy, vwin, gc, poly, 9, CoordModeOrigin);
  tw = (XTextWidth(font, textstr, strlen(textstr))) / 2;
  tx = ((x+(w/2))-tw);
  if (lit) XSetForeground (dpy, gc, bg);
  else XSetForeground (dpy, gc, fg);
  XDrawString(dpy, vwin, gc, tx, y+12, textstr, strlen(textstr));
}

showstrings()
{
char outstr[60];

  XSetForeground(dpy, gc, fg);
  XClearArea(dpy, win, 61, 291, 308, 13, False);
  XDrawRectangle(dpy, win, gc, 60, 290, 310, 15);
  strcpy(outstr, hostname);
  if (litstr == 1) strcat(outstr,"*");
  limstr(win, 63, 302, outstr, 310);
  XClearArea(dpy, win, 430, 290, 60, 15, False);
  XDrawRectangle(dpy, win, gc, 430, 290, 60, 15);
  strcpy(outstr, portname);
  if (litstr == 2) strcat(outstr,"*");
  limstr(win, 433, 302, outstr, 60);
  XClearArea(dpy, win, 60, 310, 430, 15, False);
  XDrawRectangle(dpy, win, gc, 60, 310, 430, 15);
  strcpy(outstr, rdirname);
  if (litstr == 3) strcat(outstr,"*");
  limstr(win, 63, 322, outstr, 430);
  XClearArea(dpy, win, 300, 330, 190, 15, False);
  XDrawRectangle(dpy, win, gc, 300, 330, 190, 15);
  strcpy(outstr, lfilname);
  if (litstr == 4) strcat(outstr,"*");
  limstr(win, 303, 342, outstr, 190);
  XClearArea(dpy, win, 60, 330, 170, 15, False);
  XDrawRectangle(dpy, win, gc, 60, 330, 170, 15);
  strcpy(outstr, rfilname);
  if (litstr == 5) strcat(outstr,"*");
  limstr(win, 63, 342, outstr, 170);
  if (hoston) hoststring();
}

showentries()
{
char entry[50];
int i, s, w, y = 45;

 XClearArea(dpy, win, 11, 31, 460, 248, False);
 if (entries == 0) {
  XDrawString(dpy, win, gc, 200, 150,"No entries available." , 21);
 }
 else
 {
  if (entries < 16) s = entries;
  else
  s = topent + 16;
  for (i = topent; i < s ; i ++) {
  strcpy(entry,names[i]);
  if (dirs[i]) strcat(entry,"/");
  limstr(win, 20, y, entry , 220);
  limstr(win, 250, y, dates[i], 100);
  limstr(win, 350, y, sizes[i] , 150);
  y = y + 15;
  }
 }
}

limstr(w, x, y, s, lim)
int x, y, lim;
Window w;
char *s;
{
 int width;
  width = strlen(s);
  while (XTextWidth(font, s, width) > lim) width = width - 1;
  XDrawString(dpy, w, gc, x, y, s , width);
}

makepix()
{
 up = XCreatePixmapFromBitmapData(dpy, win, up_bits,
         up_width,up_height, fg, bg, ddepth);
 down = XCreatePixmapFromBitmapData(dpy, win, down_bits,
         down_width,down_height, fg, bg, ddepth);
 maxup = XCreatePixmapFromBitmapData(dpy, win, maxup_bits,
         maxup_width,maxup_height, fg, bg, ddepth);
 maxdown = XCreatePixmapFromBitmapData(dpy, win, maxdown_bits,
         maxdown_width,maxdown_height, fg, bg, ddepth);
 logo = XCreatePixmapFromBitmapData(dpy, win, xfsp_bits,
         xfsp_width, xfsp_height, fg, bg, ddepth);

}

hosts()
{
 hostwin = XCreateSimpleWindow(dpy, win, 10, 10, 480, 270, 4, fg, bg);
 XSelectInput (dpy, hostwin, ExposureMask | ButtonPressMask |
               ButtonReleaseMask);
 XMapRaised (dpy, hostwin);
 hoston = 1;
 hostscr();
}

hostscr()
{
 XDrawLine(dpy, hostwin, gc, 0, 20, 480, 20);
 XDrawLine(dpy, hostwin, gc, 0, 240, 480, 240);
 XDrawString(dpy, hostwin, gc, 15, 15, "Host:", 5);
 XDrawString(dpy, hostwin, gc, 225, 15, "Port:", 5);
 XDrawString(dpy, hostwin, gc, 300, 15, "Comment:",8);
 XCopyArea(dpy, maxup, hostwin, gc, 0, 0, maxup_width, maxup_height, 465,20);
 XCopyArea(dpy, up, hostwin, gc, 0, 0, maxup_width, maxup_height, 465,38);
 XCopyArea(dpy, down, hostwin, gc, 0, 0, maxup_width, maxup_height, 465,207);
 XCopyArea(dpy, maxdown,hostwin, gc, 0, 0, maxup_width, maxup_height,465,225);
 button(420,250,"close", hostwin, 0);
 button(10,250,"hfile", hostwin, 0);
 hoststring();
 showhosts();
}

hoststring()
{
  char outstr[60];

  XSetForeground(dpy, gc, fg);
  XClearArea(dpy, hostwin, 61, 251, 290, 13, False);
  XDrawRectangle(dpy, hostwin, gc, 60, 250, 290, 15);
  strcpy(outstr, hostf);
  if (litstr == 6) strcat(outstr,"*");
  limstr(hostwin, 63, 263, outstr, 220);
}

showhosts()
{
int i, s, w, y = 35;

 XClearArea(dpy, hostwin, 0, 21, 460, 219, False);
 if (numhosts == 0)
  XDrawString(dpy, hostwin, gc, 200, 150,"No hosts available." , 19);
 else
 {
  if (s < 14) s = numhosts;
  else
  s = tophost + 14;
  for (i = tophost; i < s ; i ++) {
  limstr(hostwin, 5, y, Lhosts[i] , 210);
  limstr(hostwin, 225, y, Lports[i], 75);
  limstr(hostwin, 300, y, Lcomments[i] , 160);
  y = y + 15;
  }
 }
}

abouts()
{
 aboutwin = XCreateSimpleWindow(dpy, win, 0, 0, 490, 150, 4, fg, bg);
 XSelectInput (dpy, aboutwin, ExposureMask | ButtonPressMask);
 XMapRaised (dpy, aboutwin);
 aboutscr();
}

aboutscr()
{
 XCopyArea(dpy, logo, aboutwin, gc, 0, 0, xfsp_width, xfsp_height, 20, 35);
 XDrawString(dpy, aboutwin, gc, 305, 35, "X-FSP Version 1.00", 18);
 XDrawString(dpy, aboutwin, gc, 300, 70, "An X based front-end", 20);
 XDrawString(dpy, aboutwin, gc, 300, 90, "for the FSP package.", 20);
 XDrawString(dpy, aboutwin, gc, 250, 140,
    "E-Mail :- Steff.Watkins@bristol.ac.uk", 37);
}
\Rogue\Monster\
else
  echo "Will not over-write ./output.c"
fi
chmod 755 ./output.c
if `test ! -s ./patchlevel.h`
then
echo "Writing ./patchlevel.h"
cat > ./patchlevel.h << '\Rogue\Monster\'
#define PATCHLEVEL 0
#define VERSION "1.00"
\Rogue\Monster\
else
  echo "Will not over-write ./patchlevel.h"
fi
chmod 644 ./patchlevel.h
if `test ! -s ./up.h`
then
echo "Writing ./up.h"
cat > ./up.h << '\Rogue\Monster\'
#define up_width 16
#define up_height 16
static char up_bits[] = {
   0xff, 0xff, 0x01, 0x80, 0x81, 0x81, 0xc1, 0x83, 0xe1, 0x87, 0xf1, 0x8f,
   0xf9, 0x9f, 0xfd, 0xbf, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
   0x81, 0x81, 0x81, 0x81, 0x01, 0x80, 0xff, 0xff};
\Rogue\Monster\
else
  echo "Will not over-write ./up.h"
fi
chmod 644 ./up.h
if `test ! -s ./xfsp.c`
then
echo "Writing ./xfsp.c"
cat > ./xfsp.c << '\Rogue\Monster\'
#include "xfsp.h"
#include "patchlevel.h"

Display *dpy;
int screen_num;
static char *progname;
char *dpy_name = NULL;
char *geom = NULL;
char *fontname = "fixed";
char hostname[40], portname[6], lfilname[30], rdirname[70] ,rfilname[30];
char currdir[70], dates[256][20], sizes[256][10], names[256][50];
char home[60], hostf[40], vers[40];
int  dirs[256], dirlen = 1, entries, topent, hoston = 0, numhosts, tophost;

Window win, hostwin, aboutwin;
XEvent event;
XSetWindowAttributes xswa;
XTextProperty WinName, IconName;
XFontStruct *font;
GC gc;
unsigned long bg, fg;
XButtonEvent *buteven;
XExposeEvent *expose;
Pixmap down, up, maxdown, maxup, logo;
int ddepth, litbutton, litstr;

void makepix(), mainscr(), keyhandler(); 

int main(argc, argv)
int argc;
char **argv;
{
unsigned int dwidth, dheight, swidth, sheight, bwidth;
int x, y;

 progname = argv[0];
 while (*++argv) {
  if (!strncmp(*argv, "-disp", 5)) dpy_name = *++argv;
   else
  if (!strncmp(*argv, "-geo", 4)) geom = *++argv;
  }
 if ((dpy = XOpenDisplay(dpy_name)) == NULL) {
  printf("Can not connect to DISPLAY : %s\n", dpy_name);
  exit(-1);
 }
 screen_num = DefaultScreen(dpy);
 dwidth  = DisplayWidth(dpy, screen_num);
 dheight = DisplayHeight(dpy, screen_num);
 ddepth = DefaultDepth(dpy, screen_num);
 swidth = 500;
 sheight = 400;
 x = y = 0;
 bg = WhitePixel(dpy, screen_num);
 fg = BlackPixel(dpy, screen_num);
 if (geom) XParseGeometry(geom, &x, &y, &swidth, &sheight);
 xswa.event_mask =   ExposureMask | KeyPressMask |
                     ButtonPressMask | ButtonReleaseMask;
 xswa.background_pixel = bg;
 xswa.border_pixel = fg;
 win = XCreateWindow(dpy, DefaultRootWindow(dpy), 0, 0, swidth, sheight, 0,
       ddepth, InputOutput, DefaultVisual(dpy, DefaultScreen(dpy)),
       CWEventMask | CWBackPixel | CWBorderPixel, &xswa);
 strcpy(vers,"XFSP - Version ");
 strcat(vers,VERSION);
 XChangeProperty(dpy, win, XA_WM_NAME, XA_STRING, 8, PropModeReplace,
                 vers, strlen(vers));
 if ((font = XLoadQueryFont(dpy, fontname)) == NULL) {
  printf("Couldn't open the FIXED font.\n");
  exit(-1);
 }
 gc = XCreateGC(dpy, RootWindow(dpy, screen_num), 0, NULL);
 XSetForeground(dpy, gc, fg);
 XSetBackground(dpy, gc, bg);
 XMapWindow(dpy, win);
 makepix();
 homedir();
 strcpy(hostf,home);
 strcat(hostf,"/.fhosts");
 readhosts();
 strcpy(rdirname,"/");
 strcpy(currdir,"/");
 while (1) {
  XNextEvent(dpy, &event);
  switch (event.type) {
  case Expose:
    expose = (XExposeEvent *) &event;
    if (expose->window == win) mainscr();
    if (expose->window == hostwin) hostscr();
    if (expose->window == aboutwin) aboutscr();
    break;
  case ButtonPress:
    buttonhandler(event.xbutton.x, event.xbutton.y, event.xbutton.window, 1);
    break;
  case ButtonRelease:
    buttonhandler(event.xbutton.x, event.xbutton.y, event.xbutton.window, 0);
    break;
  case KeyPress:
    keyhandler();
    break;
  default:
    break;
  }
 }
}
\Rogue\Monster\
else
  echo "Will not over-write ./xfsp.c"
fi
chmod 755 ./xfsp.c
if `test ! -s ./xfsp.h`
then
echo "Writing ./xfsp.h"
cat > ./xfsp.h << '\Rogue\Monster\'
#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <X11/Xos.h>
#include <X11/Xatom.h>
#include <X11/keysym.h>
#include <stdio.h>
#include <signal.h>
#include <string.h>
#define FALSE 0
#define TRUE  1

\Rogue\Monster\
else
  echo "Will not over-write ./xfsp.h"
fi
chmod 644 ./xfsp.h
if `test ! -s ./xfsp.man`
then
echo "Writing ./xfsp.man"
cat > ./xfsp.man << '\Rogue\Monster\'
.TH XFSP 1 "25 October 1993" "X Version 11"
.SH NAME
xfsp - X11 front end for the FSP suite [Version 1.0]
.SH SYNOPSIS
.B xfsp  
[-display disp] [-geometry geom]
.SH DESCRIPTION
.I Xfsp
is a graphical front end for the FSP suite of programs.
.PP
.I Xfsp
currently only supports four FSP commands (fcd, fls, fget, fput). By using
the text boxes included, it is possible to alter several of the FSP
environment variables such as FSP_HOST, and FSP_PORT.

.I Xfsp
supports a "hosts" file, which is used to contain a list of FSP hosts, and
their ports.

See the file README for more information on how to use the "hosts" file
feature.

.SH OPTIONS
.I Xfsp
accepts the command line options listed below:
.PP
.TP 12
.B -display
Sets the display to the specified name (Resource name: display, Type: string,
Default: none).
.TP 12
.B -geometry
Specifies the
.I xfsp
position on the screen. You can't resize the window
(Resource name: geometry, Type: string, Default: none).
.SH DIAGNOSTICS
.I Xfsp
exits with EOF (-1) if a fatal error occurs, otherwise with zero (0).
.SH AUTHOR
Copyright (c) 1993 by
.PP
.I Steff Watkins
.br
Computing Service,
.br
University of Bristol,
.br
Tyndalls Avenue,
.br
Bristol BS8 1UD
.br
England
.PP
Access: Steff.Watkins@bristol.ac.uk
.SH BUGS
The access protections on some remote FSP directories can cause xfsp to fail.
\Rogue\Monster\
else
  echo "Will not over-write ./xfsp.man"
fi
chmod 755 ./xfsp.man
if `test ! -s ./xfsp.xbm`
then
echo "Writing ./xfsp.xbm"
cat > ./xfsp.xbm << '\Rogue\Monster\'
#define xfsp_width 236
#define xfsp_height 78
static char xfsp_bits[] = {
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,
 0x00,0x00,0x00,0x00,0xc0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,
 0x00,0x00,0x00,0x00,0xc0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,
 0x00,0x00,0x00,0x00,0x30,0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,
 0x0f,0x00,0xc0,0x0c,0x30,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,
 0x00,0x00,0x00,0x00,0x30,0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,
 0x0f,0x00,0xc0,0x0c,0x30,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,
 0x00,0x00,0x00,0x00,0xc0,0x0c,0xff,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0xff,
 0xff,0x03,0x3f,0x3f,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,
 0x00,0x00,0x00,0x00,0xc0,0x0c,0xff,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0xff,
 0xff,0x03,0x3f,0x3f,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,
 0x00,0x00,0x00,0x00,0x00,0xcc,0x00,0x03,0x00,0x00,0x00,0x00,0xfc,0xff,0xff,
 0xff,0xff,0xcf,0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,
 0x00,0x00,0x00,0x00,0x00,0xcc,0x00,0x03,0x00,0x00,0x00,0x00,0xfc,0xff,0xff,
 0xff,0xff,0xcf,0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,
 0x00,0x00,0x3c,0x00,0x00,0x0f,0x03,0x0c,0x00,0x00,0x00,0x00,0xff,0xff,0xff,
 0xff,0xff,0xf3,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,
 0x00,0x00,0x3c,0x00,0x00,0x0f,0x03,0x0c,0x00,0x00,0x00,0x00,0xff,0xff,0xff,
 0xff,0xff,0xf3,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,
 0x00,0x00,0x03,0x00,0xc0,0x0f,0x00,0x0c,0x00,0x00,0x00,0x00,0x0f,0x00,0xff,
 0xff,0xff,0xfc,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,
 0x00,0x00,0x03,0x00,0xc0,0x0f,0x00,0x0c,0x00,0x00,0x00,0x00,0x0f,0x00,0xff,
 0xff,0xff,0xfc,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,
 0xc0,0xff,0x03,0x00,0xf0,0x3f,0x00,0x0f,0x00,0x00,0x00,0xc0,0x00,0x00,0xf0,
 0xff,0x0f,0xc3,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,
 0xc0,0xff,0x03,0x00,0xf0,0x3f,0x00,0x0f,0x00,0x00,0x00,0xc0,0x00,0x00,0xf0,
 0xff,0x0f,0xc3,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,
 0xf0,0xff,0x03,0x00,0xfc,0xff,0xff,0x03,0x00,0x00,0x00,0xc0,0x00,0x03,0x00,
 0x00,0xc0,0x00,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,
 0xf0,0xff,0x03,0x00,0xfc,0xff,0xff,0x03,0x00,0x00,0x00,0xc0,0x00,0x03,0x00,
 0x00,0xc0,0x00,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,
 0xfc,0xff,0x0f,0x00,0xf3,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0xc0,
 0xff,0x3c,0x00,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,
 0xfc,0xff,0x0f,0x00,0xf3,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0xc0,
 0xff,0x3c,0x00,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,
 0xfc,0xff,0x3f,0x00,0x03,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,
 0xff,0x3c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,
 0xfc,0xff,0x3f,0x00,0x03,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,
 0xff,0x3c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,
 0xfc,0xff,0xff,0xc0,0x30,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,
 0xff,0x3c,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x0c,0x00,0x03,0xf0,0x00,0xf0,
 0xfc,0xff,0xff,0xc0,0x30,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,
 0xff,0x3c,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x0c,0x00,0x03,0xf0,0x00,0xf0,
 0x3c,0xfc,0xff,0xc3,0xc0,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,
 0xff,0x3c,0x00,0x0c,0x00,0x00,0x00,0xfc,0x00,0x0c,0xc0,0x0f,0xfc,0x0f,0xf0,
 0x3c,0xfc,0xff,0xc3,0xc0,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,
 0xff,0x3c,0x00,0x0c,0x00,0x00,0x00,0xfc,0x00,0x0c,0xc0,0x0f,0xfc,0x0f,0xf0,
 0x30,0xf0,0xff,0x0f,0xc3,0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,
 0xff,0x3c,0x00,0x30,0x00,0x00,0xc0,0xff,0xff,0x03,0xf0,0x3f,0xff,0x3f,0xf0,
 0x30,0xf0,0xff,0x0f,0xc3,0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,
 0xff,0x3c,0x00,0x30,0x00,0x00,0xc0,0xff,0xff,0x03,0xf0,0x3f,0xff,0x3f,0xf0,
 0xc0,0xc3,0xff,0x3f,0x3c,0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,
 0xff,0x3c,0x00,0x30,0x00,0x00,0xf0,0xff,0xff,0x00,0xfc,0xff,0xff,0xff,0xf0,
 0xc0,0xc3,0xff,0x3f,0x3c,0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,
 0xff,0x3c,0x00,0x30,0x00,0x00,0xf0,0xff,0xff,0x00,0xfc,0xff,0xff,0xff,0xf0,
 0x00,0x00,0xff,0xff,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0xf0,
 0xff,0x3c,0x00,0x3c,0x00,0x00,0xff,0xf0,0x3f,0xc0,0xff,0x3f,0xf0,0xff,0xf3,
 0x00,0x00,0xff,0xff,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0xf0,
 0xff,0x3c,0x00,0x3c,0x00,0x00,0xff,0xf0,0x3f,0xc0,0xff,0x3f,0xf0,0xff,0xf3,
 0x00,0x00,0xfc,0xff,0x03,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0xc0,
 0xff,0xfc,0xff,0x0f,0x00,0xfc,0xff,0x00,0x00,0x00,0xfc,0x0f,0xc0,0xff,0xf0,
 0x00,0x00,0xfc,0xff,0x03,0x03,0x00,0xf8,0xff,0xff,0xff,0xff,0x01,0x0c,0xc0,
 0xff,0xfc,0xff,0x0f,0x00,0xfc,0xff,0x00,0x00,0x00,0xfc,0x0f,0xc0,0xff,0xf0,
 0x00,0xf0,0xff,0xff,0xff,0xff,0x03,0xf8,0xff,0xff,0xff,0xff,0x01,0x00,0xc0,
 0xff,0xfc,0xff,0x0f,0x00,0xc0,0xff,0x00,0x30,0x00,0xf0,0x0f,0x00,0xff,0xf0,
 0x00,0xf0,0xff,0xff,0xff,0xff,0x03,0xf8,0xff,0xff,0xff,0xff,0x01,0x00,0xc0,
 0xff,0xfc,0xff,0x0f,0x00,0xc0,0xff,0x00,0x30,0x00,0xf0,0x0f,0x00,0xff,0xf0,
 0x00,0xf0,0xff,0xff,0xff,0xff,0x03,0xf8,0xff,0xff,0xff,0xff,0x01,0x00,0xff,
 0xff,0x3c,0x00,0x3f,0x00,0x00,0xff,0x00,0xfc,0x00,0xf0,0x0f,0x00,0xff,0xf0,
 0x00,0xf0,0xff,0xff,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,
 0xff,0x3c,0x00,0x3f,0x00,0x00,0xff,0x00,0xfc,0x00,0xf0,0x0f,0x00,0xff,0xf0,
 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,
 0xff,0x3c,0x30,0x0f,0x00,0x00,0xff,0x00,0xff,0x03,0xf0,0x0f,0x00,0xff,0xf0,
 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xf8,0xff,0xff,0xff,0xff,0x01,0xc0,0xff,
 0xff,0x3c,0x30,0x0f,0x00,0x00,0xff,0x00,0xff,0x03,0xf0,0x0f,0x00,0xff,0xf0,
 0x00,0xf0,0xff,0xff,0xff,0xff,0x03,0xf8,0xff,0xff,0xff,0xff,0x01,0xf0,0xff,
 0xff,0x3c,0xc0,0x03,0x00,0xc0,0xff,0xc3,0xff,0x3f,0xf0,0x0f,0x00,0xff,0xf0,
 0x00,0xf0,0xff,0xff,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,
 0xff,0x3c,0xc0,0x03,0x00,0xc0,0xff,0xc3,0xff,0x3f,0xf0,0x0f,0x00,0xff,0xf0,
 0x00,0x00,0x00,0xf3,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0xf0,
 0xff,0x3c,0x00,0x00,0x00,0xf0,0xff,0x3f,0xff,0x0f,0xf0,0x0f,0x00,0xff,0xf0,
 0x00,0x00,0x00,0xf3,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0xf0,
 0xff,0x3c,0x00,0x00,0x00,0xf0,0xff,0x3f,0xff,0x0f,0xf0,0x0f,0x00,0xff,0xf0,
 0x00,0x00,0xc0,0xc0,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0xc0,
 0xff,0x3c,0x00,0x00,0x00,0x00,0xfc,0x0f,0xfc,0x03,0xf0,0x0f,0x00,0xff,0xf0,
 0x00,0x00,0xc0,0xc0,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0xc0,
 0xff,0x3c,0x00,0x00,0x00,0x00,0xfc,0x0f,0xfc,0x03,0xf0,0x0f,0x00,0xff,0xf0,
 0x00,0x00,0xc0,0x00,0xff,0xff,0x00,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,
 0xff,0x3c,0x00,0x00,0x00,0x00,0xf0,0x03,0xfc,0x03,0xf0,0x0f,0x00,0xff,0xf0,
 0x00,0x00,0xc0,0x00,0xff,0xff,0x00,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,
 0xff,0x3c,0x00,0x00,0x00,0x00,0xf0,0x03,0xfc,0x03,0xf0,0x0f,0x00,0xff,0xf0,
 0x00,0x00,0x30,0x3c,0xfc,0xff,0xc3,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,
 0xff,0x3c,0x00,0x00,0x00,0x00,0xc0,0x00,0xfc,0x03,0xf0,0x0f,0x00,0xff,0xf3,
 0x00,0x00,0x30,0x3c,0xfc,0xff,0xc3,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,
 0xff,0x3c,0x00,0x00,0x00,0x00,0xc0,0x00,0xfc,0x03,0xf0,0x0f,0x00,0xff,0xf3,
 0x00,0x00,0x30,0xc3,0xf0,0xff,0x0f,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,
 0xff,0x3c,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x03,0xf0,0xff,0x3f,0x3f,0xf0,
 0x00,0x00,0x30,0xc3,0xf0,0xff,0x0f,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,
 0xff,0x3c,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x03,0xf0,0xff,0x3f,0x3f,0xf0,
 0x00,0x00,0x0c,0x03,0xc3,0xff,0x3f,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,
 0xff,0x3c,0x00,0x00,0x00,0x00,0xff,0x3f,0xfc,0x03,0xfc,0xff,0xff,0x0f,0xf0,
 0x00,0x00,0x0c,0x03,0xc3,0xff,0x3f,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,
 0xff,0x3c,0x00,0x00,0x00,0x00,0xff,0x3f,0xfc,0x03,0xfc,0xff,0xff,0x0f,0xf0,
 0x00,0x00,0x0c,0x0c,0x03,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,
 0xff,0x3c,0x00,0x0f,0x00,0xc0,0xff,0xff,0x0f,0x00,0xff,0xff,0xff,0x03,0xf0,
 0x00,0x00,0x0c,0x0c,0x03,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,
 0xff,0x3c,0x00,0x0f,0x00,0xc0,0xff,0xff,0x0f,0x00,0xff,0xff,0xff,0x03,0xf0,
 0x00,0xf0,0xff,0xc0,0x00,0xfc,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,
 0xff,0x3c,0xc0,0x30,0x00,0xf0,0xff,0xff,0x03,0x00,0xf0,0x0f,0xfc,0x00,0xf0,
 0x00,0xf0,0xff,0xc0,0x00,0xfc,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,
 0xff,0x3c,0xc0,0x30,0x00,0xf0,0xff,0xff,0x03,0x00,0xf0,0x0f,0xfc,0x00,0xf0,
 0x00,0xff,0xff,0xc3,0x00,0xf0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,
 0xff,0x3c,0x00,0x30,0x00,0xfc,0xc0,0x3f,0x00,0x00,0xf0,0x0f,0x30,0x00,0xf0,
 0x00,0xff,0xff,0xc3,0x00,0xf0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,
 0xff,0x3c,0x00,0x30,0x00,0xfc,0xc0,0x3f,0x00,0x00,0xf0,0x0f,0x30,0x00,0xf0,
 0xc0,0xff,0xff,0x3f,0x00,0xc0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,
 0xff,0x3c,0x00,0x0c,0x00,0x3c,0x00,0x0c,0x00,0x00,0xf0,0x0f,0x00,0x00,0xf0,
 0xc0,0xff,0xff,0x3f,0x00,0xc0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,
 0xff,0x3c,0x00,0x0c,0x00,0x3c,0x00,0x0c,0x00,0x00,0xf0,0x0f,0x00,0x00,0xf0,
 0xf0,0x00,0xfc,0x0f,0x00,0x00,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,
 0xff,0xfc,0xff,0x03,0x00,0x0c,0x00,0x00,0x00,0x00,0xf0,0x0f,0x00,0x00,0xf0,
 0xf0,0x00,0xfc,0x0f,0x00,0x00,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,
 0xff,0xfc,0xff,0x03,0x00,0x0c,0x00,0x00,0x00,0x00,0xf0,0x0f,0x00,0x00,0xf0,
 0x30,0x00,0xf0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x03,
 0x00,0x00,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x00,0xf0,0x0f,0x00,0x00,0xf0,
 0x30,0x00,0xf0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x03,
 0x00,0x00,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x00,0xf0,0x0f,0x00,0x00,0xf0,
 0x30,0xc0,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x03,0x00,
 0x00,0x00,0x00,0x00,0x00,0xf0,0x00,0x00,0x00,0x00,0xf0,0x0f,0x00,0x00,0xf0,
 0x30,0xc0,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x03,0x00,
 0x00,0x00,0x00,0x00,0x00,0xf0,0x00,0x00,0x00,0x00,0xf0,0x0f,0x00,0x00,0xf0,
 0xc0,0x00,0x33,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x0f,0x00,0x00,0xf0,
 0xc0,0x00,0x33,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x0f,0x00,0x00,0xf0,
 0x00,0xff,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x3f,0x00,0x00,0xf0,
 0x00,0xff,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x3f,0x00,0x00,0xf0,
 0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x30,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x0f,0x00,0x00,0xf0,
 0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x30,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x0f,0x00,0x00,0xf0,
 0x00,0x00,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0xf0,
 0x00,0x00,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0xf0,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8
 };
\Rogue\Monster\
else
  echo "Will not over-write ./xfsp.xbm"
fi
chmod 644 ./xfsp.xbm
echo "Finished archive 1 of 2"
exit

exit 0 # Just in case...
-- 
  // chris@Sterling.COM           | Send comp.sources.x submissions to:
\X/  Amiga - The only way to fly! |    sources-x@sterling.com
 "It's intuitively obvious to the |
  most casual observer..."        | GCS d+/-- p+ c++ l+ m+ s++/+ g+ w+ t+ r+ x+
