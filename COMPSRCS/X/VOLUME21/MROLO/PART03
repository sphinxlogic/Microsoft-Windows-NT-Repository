Newsgroups: comp.sources.x
From: gregor@kafka.saic.com (gregg hanna)
Subject: v21i010:  mrolo - Motif rolodex, Part03/03
Message-ID: <1993Oct9.012000.19282@sparky.sterling.com>
X-Md4-Signature: 720668ee0405075ba8e1bf34d587fe22
Sender: chris@sparky.sterling.com (Chris Olson)
Organization: Sterling Software
Date: Sat, 9 Oct 1993 01:20:00 GMT
Approved: chris@sterling.com

Submitted-by: gregor@kafka.saic.com (gregg hanna)
Posting-number: Volume 21, Issue 10
Archive-name: mrolo/part03
Environment: X11, OSF/Motif
Supersedes: mrolo: Volume 20, Issue 96-97

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 3 (of 3)."
# Contents:  mrolo13/creation.c
# Wrapped by gregor@kafka on Fri Sep  3 01:45:27 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'mrolo13/creation.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'mrolo13/creation.c'\"
else
echo shar: Extracting \"'mrolo13/creation.c'\" \(20608 characters\)
sed "s/^X//" >'mrolo13/creation.c' <<'END_OF_FILE'
X/* Copyright 1993 by gregg hanna */
X/*
X * Generated by the ICS builderXcessory (BX).
X *
X *
X * Builder Xcessory 1.0.1.
X *
X */
X
X/*
X * REQUIRED MOTIF INCLUDE FILES
X */
X#include <stdio.h>
X#include <ctype.h>
X#include <Xm/Xm.h>
X#include <X11/Shell.h>
X#include <Xm/Form.h>
X#include <Xm/Label.h>
X#include <Xm/List.h>
X#include <Xm/MessageB.h>
X#include <Xm/PushB.h>
X#include <Xm/RowColumn.h>
X#include <Xm/Separator.h>
X#include <Xm/Text.h>
X#include <Xm/ToggleB.h>
X
X#include "compat.h"
X
X/*
X * CALLBACK PROCEDURE DECLARATIONS
X */
Xextern void ActuallyDeleteCard();
Xextern void AddCard();
Xextern void CancelCard();
Xextern void DeleteCard();
Xextern void DontDeleteCard();
Xextern void OKCard();
Xextern void QuitProg();
Xextern void Selected();
Xextern void SpinRolo();
Xextern void ChangeFilter();
Xextern void ClearFilter();
Xextern void ReturnHit();
Xextern void PickChange();
Xextern void PickDone();
Xextern void ManageArgAtClick();
X
XWidget ListForRolo;
XWidget filterText;
X
XWidget picker;
XWidget pickerButton;
X
XWidget CreatePicker(p)
X     Widget p;
X{
X  Widget di, rc, t0, t1, t2, t3, bu, w;
X  Arg args[15];
X  XmString xstr;
X  int n;
X  Boolean bool;
X  extern int selectFilter;
X  extern int RoloSearch[4];
X
X  n = 0;
X  XtSetArg(args[n], XmNx, 0); n++;
X  XtSetArg(args[n], XmNy, 0); n++;
X  picker = di = XmCreateFormDialog(p,"PickDialog",args,n);
X
X  XtVaSetValues(XtParent(di),XmNtitle,"Search Fields",NULL);
X
X  n = 0;
X  XtSetArg(args[n],XmNleftAttachment,XmATTACH_FORM); n++;
X  XtSetArg(args[n],XmNrightAttachment,XmATTACH_FORM); n++;
X  XtSetArg(args[n],XmNbottomAttachment,XmATTACH_FORM); n++;
X  XtSetArg(args[n],XmNalignment,XmALIGNMENT_CENTER); n++;
X  bu = XmCreatePushButton(di,"Done",args,n);
X  XtManageChild(bu);
X  XtAddCallback(bu,XmNactivateCallback,PickDone,di);
X
X  n = 0;
X  XtSetArg(args[n],XmNtopAttachment,XmATTACH_FORM); n++;
X  XtSetArg(args[n],XmNleftAttachment,XmATTACH_FORM); n++;
X  XtSetArg(args[n],XmNrightAttachment,XmATTACH_FORM); n++;
X  XtSetArg(args[n],XmNbottomWidget,bu); n++;
X  XtSetArg(args[n],XmNbottomAttachment,XmATTACH_WIDGET); n++;
X  XtSetArg(args[n],XmNradioAlwaysOne,False); n++;
X  XtSetArg(args[n],XmNradioBehavior,False); n++;
X  XtSetArg(args[n],XmNorientation,XmVERTICAL); n++;
X  XtSetArg(args[n],XmNpacking,XmPACK_COLUMN); n++;
X  rc = XmCreateRowColumn(di,"PickRadio",args,n);
X  /*rc = XmCreateRadioBox(di,"PickRadio",args,n);*/
X  XtManageChild(rc);
X
X  w = XtNameToWidget(p,"*nameLabel");
X  if ( w == NULL )
X    xstr = XmStringCreateSimple("Name");
X  else
X    XtVaGetValues(w,XmNlabelString,&xstr,NULL);
X  n = 0;
X  XtSetArg(args[n],XmNlabelString,xstr); n++;
X  XtSetArg(args[n],XmNindicatorType,XmN_OF_MANY); n++;
X  t0 = XmCreateToggleButton(rc,"tbutton0",args,n);
X  XmStringFree(xstr);
X  XtManageChild(t0);
X  XtAddCallback(t0,XmNvalueChangedCallback,PickChange,(caddr_t)0);
X
X  w = XtNameToWidget(p,"*primaryLabel");
X  if ( w == NULL )
X    xstr = XmStringCreateSimple("Primary Index");
X  else
X    XtVaGetValues(w,XmNlabelString,&xstr,NULL);
X  n = 0;
X  XtSetArg(args[n],XmNlabelString,xstr); n++;
X  XtSetArg(args[n],XmNindicatorType,XmN_OF_MANY); n++;
X  t1 = XmCreateToggleButton(rc,"tbutton1",args,n);
X  XmStringFree(xstr);
X  XtManageChild(t1);
X  XtAddCallback(t1,XmNvalueChangedCallback,PickChange,(caddr_t)1);
X
X  w = XtNameToWidget(p,"*secondaryLabel");
X  if ( w == NULL )
X    xstr = XmStringCreateSimple("Secondary Index");
X  else
X    XtVaGetValues(w,XmNlabelString,&xstr,NULL);
X  n = 0;
X  XtSetArg(args[n],XmNlabelString,xstr); n++;
X  XtSetArg(args[n],XmNindicatorType,XmN_OF_MANY); n++;
X  t2 = XmCreateToggleButton(rc,"tbutton2",args,n);
X  XmStringFree(xstr);
X  XtManageChild(t2);
X  XtAddCallback(t2,XmNvalueChangedCallback,PickChange,(caddr_t)2);
X
X  xstr = XmStringCreateSimple("Other Text");
X  n = 0;
X  XtSetArg(args[n],XmNlabelString,xstr); n++;
X  XtSetArg(args[n],XmNindicatorType,XmN_OF_MANY); n++;
X  t3 = XmCreateToggleButton(rc,"tbutton3",args,n);
X  XmStringFree(xstr);
X  XtManageChild(t3);
X  XtAddCallback(t3,XmNvalueChangedCallback,PickChange,(caddr_t)3);
X
X  XtAddCallback(pickerButton, XmNactivateCallback, ManageArgAtClick, picker);
X
X  /* Init search flags to whatever the defaults were */
X  XtVaGetValues(t0,XmNset,&bool,NULL);
X  RoloSearch[0] = (bool?1:0);
X  XtVaGetValues(t1,XmNset,&bool,NULL);
X  RoloSearch[1] = (bool?1:0);
X  XtVaGetValues(t2,XmNset,&bool,NULL);
X  RoloSearch[2] = (bool?1:0);
X  XtVaGetValues(t3,XmNset,&bool,NULL);
X  RoloSearch[3] = (bool?1:0);
X
X  return di;
X}
X
XWidget
XCreateform(parent)
XWidget parent;
X{
X    extern String indexElements;
X    Arg    	args[20];
X    int    	argcnt;
X    Widget 	retval;
X    Widget	form;
X    Widget	indexList;
X    Widget	addressList;
X    Widget	rowColumn;
X    Widget	addCardButton;
X    Widget	quitButton;
X    Widget	clearButton;
X    Widget	button;
X    char        *s, *t, c;
X
X    XmRegisterConverters();
X 
X    argcnt = 0;
X    XtSetArg(args[argcnt], XmNx, 0); argcnt++;
X    XtSetArg(args[argcnt], XmNy, 0); argcnt++;
X    form = XtCreateWidget("form",
X		xmFormWidgetClass,
X		parent,
X		args,
X		argcnt);
X
X    retval = form;
X 
X    argcnt = 0;
X    XtSetArg(args[argcnt], XmNorientation, XmHORIZONTAL); argcnt++;
X    XtSetArg(args[argcnt], XmNentryAlignment, XmALIGNMENT_CENTER); argcnt++;
X    XtSetArg(args[argcnt], XmNadjustLast, False); argcnt++;
X    XtSetArg(args[argcnt], XmNadjustMargin, False); argcnt++;
X    XtSetArg(args[argcnt], XmNleftAttachment, XmATTACH_FORM); argcnt++;
X    XtSetArg(args[argcnt], XmNrightAttachment, XmATTACH_FORM); argcnt++;
X    XtSetArg(args[argcnt], XmNtopAttachment, XmATTACH_FORM); argcnt++;
X    XtSetArg(args[argcnt], XmNleftOffset, (int)2); argcnt++;
X    XtSetArg(args[argcnt], XmNrightOffset, (int)2); argcnt++;
X    XtSetArg(args[argcnt], XmNtopOffset, (int)2); argcnt++;
X    XtSetArg(args[argcnt], XmNx, 0); argcnt++;
X    XtSetArg(args[argcnt], XmNy, 0); argcnt++;
X    rowColumn = XtCreateWidget("rowColumn",
X		xmRowColumnWidgetClass,
X		form,
X		args,
X		argcnt);
X
X    XtManageChild(rowColumn);
X
X    argcnt = 0;
X    XtSetArg(args[argcnt], XmNspacing, (short)0); argcnt++;
X    XtSetArg(args[argcnt], XmNentryBorder, (short)0); argcnt++;
X    XtSetArg(args[argcnt], XmNentryAlignment, XmALIGNMENT_CENTER); argcnt++;
X    XtSetArg(args[argcnt], XmNisAligned, True); argcnt++;
X    XtSetArg(args[argcnt], XmNpacking, XmPACK_TIGHT); argcnt++;
X    XtSetArg(args[argcnt], XmNleftAttachment, XmATTACH_FORM); argcnt++;
X    XtSetArg(args[argcnt], XmNleftOffset, (int)2); argcnt++;
X    XtSetArg(args[argcnt], XmNtopAttachment, XmATTACH_WIDGET); argcnt++;
X    XtSetArg(args[argcnt], XmNtopOffset, (int)2); argcnt++;
X    XtSetArg(args[argcnt], XmNtopWidget, rowColumn); argcnt++;
X    XtSetArg(args[argcnt], XmNx, 2); argcnt++;
X    indexList = XtCreateWidget("indexList",
X		xmRowColumnWidgetClass,
X		form,
X		args,
X		argcnt);
X    XtManageChild(indexList);
X
X    argcnt = 0;
X    XtSetArg(args[argcnt], XmNhighlightThickness, 1); argcnt++;
X    XtSetArg(args[argcnt], XmNrecomputeSize, False); argcnt++;
X    XtSetArg(args[argcnt], XmNmarginHeight, 0); argcnt++;
X    XtSetArg(args[argcnt], XmNmarginWidth, 0); argcnt++;
X    XtSetArg(args[argcnt], XmNmarginTop, 0); argcnt++;
X    XtSetArg(args[argcnt], XmNmarginBottom, 0); argcnt++;
X    for ( s = indexElements; *s != '\0'; s = t ) {
X      while ( isspace(*s) ) s++;
X      for ( t = s; ! isspace(*t) && *t != '\0'; t++ );
X      c = *t;
X      *t = '\0';
X      button = XmCreatePushButton(indexList,s,args,argcnt);
X      XtAddCallback(button,XmNactivateCallback,SpinRolo,(caddr_t)mystrdup(s));
X      XtManageChild(button);
X      *t = c;
X    }
X 
X    argcnt = 0;
X    XtSetArg(args[argcnt], XmNtopWidget, rowColumn); argcnt++;
X    XtSetArg(args[argcnt], XmNtopAttachment, XmATTACH_WIDGET); argcnt++;
X    XtSetArg(args[argcnt], XmNbottomAttachment, XmATTACH_FORM); argcnt++;
X    XtSetArg(args[argcnt], XmNleftWidget, indexList); argcnt++;
X    XtSetArg(args[argcnt], XmNleftAttachment, XmATTACH_WIDGET); argcnt++;
X    XtSetArg(args[argcnt], XmNrightAttachment, XmATTACH_FORM); argcnt++;
X    XtSetArg(args[argcnt], XmNtopOffset, (int)2); argcnt++;
X    XtSetArg(args[argcnt], XmNbottomOffset, (int)2); argcnt++;
X    XtSetArg(args[argcnt], XmNleftOffset, (int)2); argcnt++;
X    XtSetArg(args[argcnt], XmNrightOffset, (int)2); argcnt++;
X    XtSetArg(args[argcnt], XmNscrollBarDisplayPolicy, XmSTATIC); argcnt++;
X    XtSetArg(args[argcnt], XmNselectionPolicy, XmSINGLE_SELECT); argcnt++;
X    addressList = XmCreateScrolledList(form,"addressList",
X		args,
X		argcnt);
X    ListForRolo = addressList;
X
X    XtAddCallback(addressList, XmNsingleSelectionCallback, Selected, (caddr_t)0);
X    XtManageChild(addressList);
X
X    argcnt = 0;
X    XtSetArg(args[argcnt], XmNalignment, XmALIGNMENT_CENTER); argcnt++;
X    addCardButton = XtCreateWidget("addCardButton",
X		xmPushButtonWidgetClass,
X		rowColumn,
X		args,
X		argcnt);
X
X    XtAddCallback(addCardButton, XmNactivateCallback, AddCard, (caddr_t)0);
X    XtManageChild(addCardButton);
X 
X    argcnt = 0;
X    XtSetArg(args[argcnt], XmNalignment, XmALIGNMENT_CENTER); argcnt++;
X    quitButton = XtCreateWidget("quitButton",
X		xmPushButtonWidgetClass,
X		rowColumn,
X		args,
X		argcnt);
X
X    XtAddCallback(quitButton, XmNactivateCallback, QuitProg, (caddr_t)0);
X    XtManageChild(quitButton);
X
X    argcnt = 0;
X    /*XtSetArg(args[argcnt], XmNcolumns, (short)12); argcnt++;*/
X    XtSetArg(args[argcnt], XmNrows, (short)1); argcnt++;
X    filterText = XtCreateWidget("filterText",
X		xmTextWidgetClass,
X		rowColumn,
X		args,
X		argcnt);
X
X    XtAddCallback(filterText, XmNactivateCallback, ChangeFilter, (caddr_t)0);
X    XtManageChild(filterText);
X
X    argcnt = 0;
X    XtSetArg(args[argcnt], XmNalignment, XmALIGNMENT_CENTER); argcnt++;
X    clearButton = XtCreateWidget("clearButton",
X		xmPushButtonWidgetClass,
X		rowColumn,
X		args,
X		argcnt);
X
X    XtAddCallback(clearButton, XmNactivateCallback, ClearFilter, (caddr_t)0);
X    XtManageChild(clearButton);
X
X    if ( selectFilter ) {
X      argcnt = 0;
X      XtSetArg(args[argcnt], XmNalignment, XmALIGNMENT_CENTER); argcnt++;
X      pickerButton = XtCreateWidget("pickerButton",
X				   xmPushButtonWidgetClass,
X				   rowColumn,
X				   args,
X				   argcnt);
X      XtManageChild(pickerButton);
X    }
X
X    return( retval );
X}
X
XWidget nameText, numberText, numberText2, commentText, deleteCardButton;
X
XWidget
XCreateFormDialog(parent)
XWidget parent;
X{
X    Arg    	args[512];
X    int    	argcnt;
X    Widget 	retval;
X    Widget	form1;
X    Widget	nameLabel;
X    Widget	primaryLabel;
X    Widget	secondaryLabel;
X    Widget	okButton;
X    Widget	cancelButton;
X    Widget	separator;
X    Widget	rowColumn1;
X    extern int selectFilter;
X
X    XmRegisterConverters();
X 
X    argcnt = 0;
X    XtSetArg(args[argcnt], XmNx, 0); argcnt++;
X    XtSetArg(args[argcnt], XmNy, 0); argcnt++;
X    form1 = XmCreateFormDialog(parent,"Card View", args, argcnt);
X    retval = form1;
X
X    XtVaSetValues(XtParent(form1),XmNtitle,"Card View",NULL);
X 
X    argcnt = 0;
X    XtSetArg(args[argcnt], XmNseparatorType, 6); argcnt++;
X    XtSetArg(args[argcnt], XmNtopAttachment, XmATTACH_NONE); argcnt++;
X    XtSetArg(args[argcnt], XmNbottomAttachment, XmATTACH_FORM); argcnt++;
X    XtSetArg(args[argcnt], XmNleftAttachment, XmATTACH_FORM); argcnt++;
X    XtSetArg(args[argcnt], XmNrightAttachment, XmATTACH_FORM); argcnt++;
X    XtSetArg(args[argcnt], XmNtopOffset, (int)0); argcnt++;
X    XtSetArg(args[argcnt], XmNbottomOffset, (int)0); argcnt++;
X    XtSetArg(args[argcnt], XmNleftOffset, (int)0); argcnt++;
X    XtSetArg(args[argcnt], XmNrightOffset, (int)0); argcnt++;
X    XtSetArg(args[argcnt], XmNheight, 10); argcnt++;
X    separator = XtCreateWidget("separator",
X		xmSeparatorWidgetClass,
X		form1,
X		args,
X		argcnt);
X
X    XtManageChild(separator);
X 
X    argcnt = 0;
X    XtSetArg(args[argcnt], XmNorientation, XmHORIZONTAL); argcnt++;
X    XtSetArg(args[argcnt], XmNentryAlignment, XmALIGNMENT_CENTER); argcnt++;
X    XtSetArg(args[argcnt], XmNleftAttachment, XmATTACH_FORM); argcnt++;
X    XtSetArg(args[argcnt], XmNrightAttachment, XmATTACH_FORM); argcnt++;
X    XtSetArg(args[argcnt], XmNbottomAttachment, XmATTACH_FORM); argcnt++;
X    XtSetArg(args[argcnt], XmNleftOffset, (int)2); argcnt++;
X    XtSetArg(args[argcnt], XmNrightOffset, (int)2); argcnt++;
X    XtSetArg(args[argcnt], XmNbottomOffset, (int)2); argcnt++;
X    rowColumn1 = XtCreateWidget("rowColumn1",
X		xmRowColumnWidgetClass,
X		form1,
X		args,
X		argcnt);
X
X    XtManageChild(rowColumn1);
X
X    argcnt = 0;
X    okButton = XtCreateWidget("okButton",
X		xmPushButtonWidgetClass,
X		rowColumn1,
X		args,
X		argcnt);
X
X    XtAddCallback(okButton, XmNactivateCallback, OKCard, (caddr_t)0);
X    XtManageChild(okButton);
X 
X    argcnt = 0;
X    deleteCardButton = XtCreateWidget("deleteCardButton",
X		xmPushButtonWidgetClass,
X		rowColumn1,
X		args,
X		argcnt);
X
X    XtAddCallback(deleteCardButton, XmNactivateCallback, DeleteCard, (caddr_t)0);
X    XtManageChild(deleteCardButton);
X 
X    argcnt = 0;
X    cancelButton = XtCreateWidget("cancelButton",
X		xmPushButtonWidgetClass,
X		rowColumn1,
X		args,
X		argcnt);
X
X    XtAddCallback(cancelButton, XmNactivateCallback, CancelCard, (caddr_t)0);
X    XtManageChild(cancelButton);
X 
X    argcnt = 0;
X    XtSetArg(args[argcnt], XmNrecomputeSize, False); argcnt++;
X    XtSetArg(args[argcnt], XmNtopAttachment, XmATTACH_FORM); argcnt++;
X    XtSetArg(args[argcnt], XmNleftAttachment, XmATTACH_FORM); argcnt++;
X    XtSetArg(args[argcnt], XmNtopOffset, (int)12); argcnt++;
X    XtSetArg(args[argcnt], XmNleftOffset, (int)2); argcnt++;
X    XtSetArg(args[argcnt], XmNwidth, 81); argcnt++;
X    primaryLabel = XtCreateWidget("primaryLabel",
X		xmLabelWidgetClass,
X		form1,
X		args,
X		argcnt);
X
X    XtManageChild(primaryLabel);
X 
X    argcnt = 0;
X    XtSetArg(args[argcnt], XmNmaxLength, (int)100); argcnt++;
X    XtSetArg(args[argcnt], XmNeditMode, XmSINGLE_LINE_EDIT); argcnt++;
X    XtSetArg(args[argcnt], XmNcolumns, (short)20); argcnt++;
X    XtSetArg(args[argcnt], XmNrows, (short)1); argcnt++;
X    XtSetArg(args[argcnt], XmNtopAttachment, XmATTACH_FORM); argcnt++;
X    XtSetArg(args[argcnt], XmNleftAttachment, XmATTACH_FORM); argcnt++;
X    XtSetArg(args[argcnt], XmNtopOffset, (int)-5); argcnt++;
X    XtSetArg(args[argcnt], XmNleftOffset, (int)0); argcnt++;
X    XtSetArg(args[argcnt], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); argcnt++;
X    XtSetArg(args[argcnt], XmNtopWidget, primaryLabel); argcnt++;
X    XtSetArg(args[argcnt], XmNleftAttachment, XmATTACH_WIDGET); argcnt++;
X    XtSetArg(args[argcnt], XmNleftWidget, primaryLabel); argcnt++;
X    numberText = XtCreateWidget("numberText",
X		xmTextWidgetClass,
X		form1,
X		args,
X		argcnt);
X
X    XtManageChild(numberText);
X    XtAddCallback(numberText, XmNactivateCallback, ReturnHit, (caddr_t)0);
X 
X    argcnt = 0;
X    XtSetArg(args[argcnt], XmNrecomputeSize, False); argcnt++;
X    XtSetArg(args[argcnt], XmNtopAttachment, XmATTACH_WIDGET); argcnt++;
X    XtSetArg(args[argcnt], XmNtopWidget, primaryLabel); argcnt++;
X    XtSetArg(args[argcnt], XmNleftAttachment, XmATTACH_FORM); argcnt++;
X    XtSetArg(args[argcnt], XmNtopOffset, (int)12); argcnt++;
X    XtSetArg(args[argcnt], XmNleftOffset, (int)2); argcnt++;
X    XtSetArg(args[argcnt], XmNwidth, 81); argcnt++;
X    secondaryLabel = XtCreateWidget("secondaryLabel",
X		xmLabelWidgetClass,
X		form1,
X		args,
X		argcnt);
X
X    XtManageChild(secondaryLabel);
X 
X    argcnt = 0;
X    XtSetArg(args[argcnt], XmNmaxLength, (int)100); argcnt++;
X    XtSetArg(args[argcnt], XmNeditMode, XmSINGLE_LINE_EDIT); argcnt++;
X    XtSetArg(args[argcnt], XmNcolumns, (short)20); argcnt++;
X    XtSetArg(args[argcnt], XmNrows, (short)1); argcnt++;
X    XtSetArg(args[argcnt], XmNtopAttachment, XmATTACH_FORM); argcnt++;
X    XtSetArg(args[argcnt], XmNleftAttachment, XmATTACH_FORM); argcnt++;
X    XtSetArg(args[argcnt], XmNtopOffset, (int)-5); argcnt++;
X    XtSetArg(args[argcnt], XmNleftOffset, (int)0); argcnt++;
X    XtSetArg(args[argcnt], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); argcnt++;
X    XtSetArg(args[argcnt], XmNtopWidget, secondaryLabel); argcnt++;
X    XtSetArg(args[argcnt], XmNleftAttachment, XmATTACH_WIDGET); argcnt++;
X    XtSetArg(args[argcnt], XmNleftWidget, primaryLabel); argcnt++;
X    numberText2 = XtCreateWidget("numberText",
X		xmTextWidgetClass,
X		form1,
X		args,
X		argcnt);
X
X    XtManageChild(numberText2);
X    XtAddCallback(numberText2, XmNactivateCallback, ReturnHit, (caddr_t)0);
X 
X    argcnt = 0;
X    XtSetArg(args[argcnt], XmNmaxLength, (int)100); argcnt++;
X    XtSetArg(args[argcnt], XmNeditMode, XmSINGLE_LINE_EDIT); argcnt++;
X    XtSetArg(args[argcnt], XmNcolumns, (short)35); argcnt++;
X    XtSetArg(args[argcnt], XmNrows, (short)1); argcnt++;
X    XtSetArg(args[argcnt], XmNtopAttachment, XmATTACH_FORM); argcnt++;
X    XtSetArg(args[argcnt], XmNleftAttachment, XmATTACH_FORM); argcnt++;
X    XtSetArg(args[argcnt], XmNtopOffset, (int)-5); argcnt++;
X    XtSetArg(args[argcnt], XmNleftOffset, (int)0); argcnt++;
X    nameText = XtCreateWidget("nameText",
X		xmTextWidgetClass,
X		form1,
X		args,
X		argcnt);
X    XtManageChild(nameText);
X    XtAddCallback(nameText, XmNactivateCallback, ReturnHit, (caddr_t)0);
X 
X    argcnt = 0;
X    XtSetArg(args[argcnt], XmNrecomputeSize, False); argcnt++;
X    XtSetArg(args[argcnt], XmNtopAttachment, XmATTACH_FORM); argcnt++;
X    XtSetArg(args[argcnt], XmNtopOffset, (int)12); argcnt++;
X    XtSetArg(args[argcnt], XmNleftOffset, (int)2); argcnt++;
X    XtSetArg(args[argcnt], XmNx, 2); argcnt++;
X    XtSetArg(args[argcnt], XmNy, 2); argcnt++;
X    XtSetArg(args[argcnt], XmNwidth, 81); argcnt++;
X    nameLabel = XtCreateWidget("nameLabel",
X		xmLabelWidgetClass,
X		form1,
X		args,
X		argcnt);
X    XtManageChild(nameLabel);
X
X    argcnt = 0;
X    XtSetArg(args[argcnt], XmNscrollingPolicy, XmAUTOMATIC); argcnt++;
X    XtSetArg(args[argcnt], XmNleftAttachment, XmATTACH_FORM); argcnt++;
X    XtSetArg(args[argcnt], XmNrightAttachment, XmATTACH_FORM); argcnt++;
X    XtSetArg(args[argcnt], XmNbottomOffset, (int)2); argcnt++;
X    XtSetArg(args[argcnt], XmNleftOffset, (int)2); argcnt++;
X    XtSetArg(args[argcnt], XmNrightOffset, (int)2); argcnt++;
X    XtSetArg(args[argcnt], XmNbottomAttachment, XmATTACH_WIDGET); argcnt++;
X    XtSetArg(args[argcnt], XmNbottomWidget, separator); argcnt++;
X    XtSetArg(args[argcnt], XmNeditMode, XmMULTI_LINE_EDIT); argcnt++;
X    XtSetArg(args[argcnt], XmNtopOffset, (int)12); argcnt++;
X    XtSetArg(args[argcnt], XmNtopAttachment, XmATTACH_WIDGET); argcnt++;
X    XtSetArg(args[argcnt], XmNtopWidget, secondaryLabel); argcnt++;
X    commentText = XmCreateScrolledText(form1,"commentText",
X		args,
X		argcnt);
X    XtManageChild(commentText);
X
X    argcnt = 0;
X    XtSetArg(args[argcnt], XmNtopOffset, (int)-5); argcnt++;
X    XtSetArg(args[argcnt], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); argcnt++;
X    XtSetArg(args[argcnt], XmNtopWidget, nameLabel); argcnt++;
X    XtSetArg(args[argcnt], XmNleftOffset, (int)0); argcnt++;
X    XtSetArg(args[argcnt], XmNleftAttachment, XmATTACH_WIDGET); argcnt++;
X    XtSetArg(args[argcnt], XmNleftWidget, nameLabel); argcnt++;
X    XtSetValues(nameText, args, argcnt);
X
X    argcnt = 0;
X    XtSetArg(args[argcnt], XmNtopOffset, (int)12); argcnt++;
X    XtSetArg(args[argcnt], XmNtopAttachment, XmATTACH_WIDGET); argcnt++;
X    XtSetArg(args[argcnt], XmNtopWidget, nameLabel); argcnt++;
X    XtSetArg(args[argcnt], XmNleftOffset, (int)0); argcnt++;
X    XtSetArg(args[argcnt], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); argcnt++;
X    XtSetArg(args[argcnt], XmNleftWidget, nameLabel); argcnt++;
X    XtSetValues(primaryLabel, args, argcnt);
X 
X    argcnt = 0;
X    XtSetArg(args[argcnt], XmNbottomOffset, (int)0); argcnt++;
X    XtSetArg(args[argcnt], XmNbottomAttachment, XmATTACH_WIDGET); argcnt++;
X    XtSetArg(args[argcnt], XmNbottomWidget, rowColumn1); argcnt++;
X    XtSetValues(separator, args, argcnt);
X
X    return( retval );
X}
X
XWidget
XCreateMessageDialog(parent)
XWidget parent;
X{
X    Arg    	args[20];
X    int    	argcnt;
X    XmString	xmstr[2];
X    Widget	messageBox, help;
X 
X    argcnt = 0;
X    XtSetArg(args[argcnt], XmNtitle, "Confirmation"); argcnt++;
X    XtSetArg(args[argcnt], XmNmessageString, (xmstr[0]=XmStringCreateLtoR(
X		"Save changes to this card?",
X		XmSTRING_DEFAULT_CHARSET))); argcnt++;
X    XtSetArg(args[argcnt], XmNmessageAlignment, XmALIGNMENT_CENTER); argcnt++;
X    XtSetArg(args[argcnt], XmNx, 0); argcnt++;
X    XtSetArg(args[argcnt], XmNy, 0); argcnt++;
X    messageBox = XmCreateQuestionDialog(parent,"messageBox",args,argcnt);
X    XmStringFree(xmstr[0]);
X    XtAddCallback(messageBox, XmNcancelCallback, DontDeleteCard, (caddr_t)0);
X    XtAddCallback(messageBox, XmNokCallback, ActuallyDeleteCard, (caddr_t)0);
X    help = XmMessageBoxGetChild(messageBox,XmDIALOG_HELP_BUTTON);
X    if ( help != NULL ) {
X      XtUnmanageChild(help);
X    }
X    return messageBox;
X}
END_OF_FILE
if test 20608 -ne `wc -c <'mrolo13/creation.c'`; then
    echo shar: \"'mrolo13/creation.c'\" unpacked with wrong size!
fi
# end of 'mrolo13/creation.c'
fi
echo shar: End of archive 3 \(of 3\).
cp /dev/null ark3isdone
MISSING=""
for I in 1 2 3 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 3 archives.
    rm -f ark[1-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0

exit 0 # Just in case...
-- 
  // chris@Sterling.COM           | Send comp.sources.x submissions to:
\X/  Amiga - The only way to fly! |    sources-x@sterling.com
 "It's intuitively obvious to the |
  most casual observer..."        | GCS d+/-- p+ c++ l+ m+ s++/+ g+ w+ t+ r+ x+
