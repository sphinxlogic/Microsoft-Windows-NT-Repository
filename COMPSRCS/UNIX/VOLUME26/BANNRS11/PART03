Newsgroups: comp.sources.unix
From: fkk@stasys.sta.sub.org (Frank Kaefer)
Subject: v26i143: banners - a collection of banner programs, V1.1, Part03/07
Sender: unix-sources-moderator@vix.com
Approved: paul@vix.com

Submitted-By: fkk@stasys.sta.sub.org (Frank Kaefer)
Posting-Number: Volume 26, Issue 143
Archive-Name: banners-1.1/part03

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 3 (of 7)."
# Contents:  banner-01/font.c banner-03/banr.c banner-05/block.c
#   banner-08/banner.c banner-08/banner.c-org banner-12/font.c
#   cursive-01/font.c cursive-02/font.c
# Wrapped by vixie@gw.home.vix.com on Sun Apr 11 23:19:20 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'banner-01/font.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-01/font.c'\"
else
echo shar: Extracting \"'banner-01/font.c'\" \(8960 characters\)
sed "s/^X//" >'banner-01/font.c' <<'END_OF_FILE'
unsigned char charset[] = {
X  0, 0, 0, 0, 0, 0, 0, 0,
X  126, 129, 165, 129, 189, 153, 129, 126,
X  126, 255, 219, 255, 195, 231, 255, 126,
X  108, 254, 254, 254, 124, 56, 16, 0,
X  16, 56, 124, 254, 124, 56, 16, 0,
X  56, 124, 56, 254, 254, 124, 56, 124,
X  16, 16, 56, 124, 254, 124, 56, 124,
X  0, 0, 24, 60, 60, 24, 0, 0,
X  255, 255, 231, 195, 195, 231, 255, 255,
X  0, 60, 102, 66, 66, 102, 60, 0,
X  255, 195, 153, 189, 189, 153, 195, 255,
X  15, 7, 15, 125, 204, 204, 204, 120,
X  60, 102, 102, 102, 60, 24, 126, 24,
X  63, 51, 63, 48, 48, 112, 240, 224,
X  127, 99, 127, 99, 99, 103, 230, 192,
X  153, 90, 60, 231, 231, 60, 90, 153,
X  128, 224, 248, 254, 248, 224, 128, 0,
X  2, 14, 62, 254, 62, 14, 2, 0,
X  24, 60, 126, 24, 24, 126, 60, 24,
X  102, 102, 102, 102, 102, 0, 102, 0,
X  127, 219, 219, 123, 27, 27, 27, 0,
X  62, 99, 56, 108, 108, 56, 204, 120,
X  0, 0, 0, 0, 126, 126, 126, 0,
X  24, 60, 126, 24, 126, 60, 24, 255,
X  24, 60, 126, 24, 24, 24, 24, 0,
X  24, 24, 24, 24, 126, 60, 24, 0,
X  0, 24, 12, 254, 12, 24, 0, 0,
X  0, 48, 96, 254, 96, 48, 0, 0,
X  0, 0, 192, 192, 192, 254, 0, 0,
X  0, 36, 102, 255, 102, 36, 0, 0,
X  0, 24, 60, 126, 255, 255, 0, 0,
X  0, 255, 255, 126, 60, 24, 0, 0,
X  0, 0, 0, 0, 0, 0, 0, 0,
X  48, 120, 120, 48, 48, 0, 48, 0,
X  108, 108, 108, 0, 0, 0, 0, 0,
X  108, 108, 254, 108, 254, 108, 108, 0,
X  48, 124, 192, 120, 12, 248, 48, 0,
X  0, 198, 204, 24, 48, 102, 198, 0,
X  56, 108, 56, 118, 220, 204, 118, 0,
X  96, 96, 192, 0, 0, 0, 0, 0,
X  24, 48, 96, 96, 96, 48, 24, 0,
X  96, 48, 24, 24, 24, 48, 96, 0,
X  0, 102, 60, 255, 60, 102, 0, 0,
X  0, 48, 48, 252, 48, 48, 0, 0,
X  0, 0, 0, 0, 0, 48, 48, 96,
X  0, 0, 0, 252, 0, 0, 0, 0,
X  0, 0, 0, 0, 0, 48, 48, 0,
X  6, 12, 24, 48, 96, 192, 128, 0,
X  124, 198, 206, 222, 246, 230, 124, 0,
X  48, 112, 48, 48, 48, 48, 252, 0,
X  120, 204, 12, 56, 96, 204, 252, 0,
X  120, 204, 12, 56, 12, 204, 120, 0,
X  28, 60, 108, 204, 254, 12, 30, 0,
X  252, 192, 248, 12, 12, 204, 120, 0,
X  56, 96, 192, 248, 204, 204, 120, 0,
X  252, 204, 12, 24, 48, 48, 48, 0,
X  120, 204, 204, 120, 204, 204, 120, 0,
X  120, 204, 204, 124, 12, 24, 112, 0,
X  0, 48, 48, 0, 0, 48, 48, 0,
X  0, 48, 48, 0, 0, 48, 48, 96,
X  24, 48, 96, 192, 96, 48, 24, 0,
X  0, 0, 252, 0, 0, 252, 0, 0,
X  96, 48, 24, 12, 24, 48, 96, 0,
X  120, 204, 12, 24, 48, 0, 48, 0,
X  124, 198, 222, 222, 222, 192, 120, 0,
X  48, 120, 204, 204, 252, 204, 204, 0,
X  252, 102, 102, 124, 102, 102, 252, 0,
X  60, 102, 192, 192, 192, 102, 60, 0,
X  248, 108, 102, 102, 102, 108, 248, 0,
X  254, 98, 104, 120, 104, 98, 254, 0,
X  254, 98, 104, 120, 104, 96, 240, 0,
X  60, 102, 192, 192, 206, 102, 62, 0,
X  204, 204, 204, 252, 204, 204, 204, 0,
X  120, 48, 48, 48, 48, 48, 120, 0,
X  30, 12, 12, 12, 204, 204, 120, 0,
X  230, 102, 108, 120, 108, 102, 230, 0,
X  240, 96, 96, 96, 98, 102, 254, 0,
X  198, 238, 254, 254, 214, 198, 198, 0,
X  198, 230, 246, 222, 206, 198, 198, 0,
X  56, 108, 198, 198, 198, 108, 56, 0,
X  252, 102, 102, 124, 96, 96, 240, 0,
X  120, 204, 204, 204, 220, 120, 28, 0,
X  252, 102, 102, 124, 108, 102, 230, 0,
X  120, 204, 224, 112, 28, 204, 120, 0,
X  252, 180, 48, 48, 48, 48, 120, 0,
X  204, 204, 204, 204, 204, 204, 252, 0,
X  204, 204, 204, 204, 204, 120, 48, 0,
X  198, 198, 198, 214, 254, 238, 198, 0,
X  198, 198, 108, 56, 56, 108, 198, 0,
X  204, 204, 204, 120, 48, 48, 120, 0,
X  254, 198, 140, 24, 50, 102, 254, 0,
X  120, 96, 96, 96, 96, 96, 120, 0,
X  192, 96, 48, 24, 12, 6, 2, 0,
X  120, 24, 24, 24, 24, 24, 120, 0,
X  16, 56, 108, 198, 0, 0, 0, 0,
X  0, 0, 0, 0, 0, 0, 0, 255,
X  48, 48, 24, 0, 0, 0, 0, 0,
X  0, 0, 120, 12, 124, 204, 118, 0,
X  224, 96, 96, 124, 102, 102, 220, 0,
X  0, 0, 120, 204, 192, 204, 120, 0,
X  28, 12, 12, 124, 204, 204, 118, 0,
X  0, 0, 120, 204, 252, 192, 120, 0,
X  56, 108, 96, 240, 96, 96, 240, 0,
X  0, 0, 118, 204, 204, 124, 12, 248,
X  224, 96, 108, 118, 102, 102, 230, 0,
X  48, 0, 112, 48, 48, 48, 120, 0,
X  12, 0, 12, 12, 12, 204, 204, 120,
X  224, 96, 102, 108, 120, 108, 230, 0,
X  112, 48, 48, 48, 48, 48, 120, 0,
X  0, 0, 204, 254, 254, 214, 198, 0,
X  0, 0, 248, 204, 204, 204, 204, 0,
X  0, 0, 120, 204, 204, 204, 120, 0,
X  0, 0, 220, 102, 102, 124, 96, 240,
X  0, 0, 118, 204, 204, 124, 12, 30,
X  0, 0, 220, 118, 102, 96, 240, 0,
X  0, 0, 124, 192, 120, 12, 248, 0,
X  16, 48, 124, 48, 48, 52, 24, 0,
X  0, 0, 204, 204, 204, 204, 118, 0,
X  0, 0, 204, 204, 204, 120, 48, 0,
X  0, 0, 198, 214, 254, 254, 108, 0,
X  0, 0, 198, 108, 56, 108, 198, 0,
X  0, 0, 204, 204, 204, 124, 12, 248,
X  0, 0, 252, 152, 48, 100, 252, 0,
X  28, 48, 48, 224, 48, 48, 28, 0,
X  24, 24, 24, 0, 24, 24, 24, 0,
X  224, 48, 48, 28, 48, 48, 224, 0,
X  118, 220, 0, 0, 0, 0, 0, 0,
X  0, 16, 56, 108, 198, 198, 254, 0,
X  120, 204, 192, 204, 120, 24, 12, 120,
X  0, 204, 0, 204, 204, 204, 126, 0,
X  28, 0, 120, 204, 252, 192, 120, 0,
X  126, 195, 60, 6, 62, 102, 63, 0,
X  204, 0, 120, 12, 124, 204, 126, 0,
X  224, 0, 120, 12, 124, 204, 126, 0,
X  48, 48, 120, 12, 124, 204, 126, 0,
X  0, 0, 120, 192, 192, 120, 12, 56,
X  126, 195, 60, 102, 126, 96, 60, 0,
X  204, 0, 120, 204, 252, 192, 120, 0,
X  224, 0, 120, 204, 252, 192, 120, 0,
X  204, 0, 112, 48, 48, 48, 120, 0,
X  124, 198, 56, 24, 24, 24, 60, 0,
X  224, 0, 112, 48, 48, 48, 120, 0,
X  198, 56, 108, 198, 254, 198, 198, 0,
X  48, 48, 0, 120, 204, 252, 204, 0,
X  28, 0, 252, 96, 120, 96, 252, 0,
X  0, 0, 127, 12, 127, 204, 127, 0,
X  62, 108, 204, 254, 204, 204, 206, 0,
X  120, 204, 0, 120, 204, 204, 120, 0,
X  0, 204, 0, 120, 204, 204, 120, 0,
X  0, 224, 0, 120, 204, 204, 120, 0,
X  120, 204, 0, 204, 204, 204, 126, 0,
X  0, 224, 0, 204, 204, 204, 126, 0,
X  0, 204, 0, 204, 204, 124, 12, 248,
X  195, 24, 60, 102, 102, 60, 24, 0,
X  204, 0, 204, 204, 204, 204, 120, 0,
X  24, 24, 126, 192, 192, 126, 24, 24,
X  56, 108, 100, 240, 96, 230, 252, 0,
X  204, 204, 120, 252, 48, 252, 48, 48,
X  248, 204, 204, 250, 198, 207, 198, 199,
X  14, 27, 24, 60, 24, 24, 216, 112,
X  28, 0, 120, 12, 124, 204, 126, 0,
X  56, 0, 112, 48, 48, 48, 120, 0,
X  0, 28, 0, 120, 204, 204, 120, 0,
X  0, 28, 0, 204, 204, 204, 126, 0,
X  0, 248, 0, 248, 204, 204, 204, 0,
X  252, 0, 204, 236, 252, 220, 204, 0,
X  60, 108, 108, 62, 0, 126, 0, 0,
X  56, 108, 108, 56, 0, 124, 0, 0,
X  48, 0, 48, 96, 192, 204, 120, 0,
X  0, 0, 0, 252, 192, 192, 0, 0,
X  0, 0, 0, 252, 12, 12, 0, 0,
X  195, 198, 204, 222, 51, 102, 204, 15,
X  195, 198, 204, 219, 55, 111, 207, 3,
X  24, 24, 0, 24, 24, 24, 24, 0,
X  0, 51, 102, 204, 102, 51, 0, 0,
X  0, 204, 102, 51, 102, 204, 0, 0,
X  34, 136, 34, 136, 34, 136, 34, 136,
X  85, 170, 85, 170, 85, 170, 85, 170,
X  219, 119, 219, 238, 219, 119, 219, 238,
X  24, 24, 24, 24, 24, 24, 24, 24,
X  24, 24, 24, 24, 248, 24, 24, 24,
X  24, 24, 248, 24, 248, 24, 24, 24,
X  54, 54, 54, 54, 246, 54, 54, 54,
X  0, 0, 0, 0, 254, 54, 54, 54,
X  0, 0, 248, 24, 248, 24, 24, 24,
X  54, 54, 246, 6, 246, 54, 54, 54,
X  54, 54, 54, 54, 54, 54, 54, 54,
X  0, 0, 254, 6, 246, 54, 54, 54,
X  54, 54, 246, 6, 254, 0, 0, 0,
X  54, 54, 54, 54, 254, 0, 0, 0,
X  24, 24, 248, 24, 248, 0, 0, 0,
X  0, 0, 0, 0, 248, 24, 24, 24,
X  24, 24, 24, 24, 31, 0, 0, 0,
X  24, 24, 24, 24, 255, 0, 0, 0,
X  0, 0, 0, 0, 255, 24, 24, 24,
X  24, 24, 24, 24, 31, 24, 24, 24,
X  0, 0, 0, 0, 255, 0, 0, 0,
X  24, 24, 24, 24, 255, 24, 24, 24,
X  24, 24, 31, 24, 31, 24, 24, 24,
X  54, 54, 54, 54, 55, 54, 54, 54,
X  54, 54, 55, 48, 63, 0, 0, 0,
X  0, 0, 63, 48, 55, 54, 54, 54,
X  54, 54, 247, 0, 255, 0, 0, 0,
X  0, 0, 255, 0, 247, 54, 54, 54,
X  54, 54, 55, 48, 55, 54, 54, 54,
X  0, 0, 255, 0, 255, 0, 0, 0,
X  54, 54, 247, 0, 247, 54, 54, 54,
X  24, 24, 255, 0, 255, 0, 0, 0,
X  54, 54, 54, 54, 255, 0, 0, 0,
X  0, 0, 255, 0, 255, 24, 24, 24,
X  0, 0, 0, 0, 255, 54, 54, 54,
X  54, 54, 54, 54, 63, 0, 0, 0,
X  24, 24, 31, 24, 31, 0, 0, 0,
X  0, 0, 31, 24, 31, 24, 24, 24,
X  0, 0, 0, 0, 63, 54, 54, 54,
X  54, 54, 54, 54, 255, 54, 54, 54,
X  24, 24, 255, 24, 255, 24, 24, 24,
X  24, 24, 24, 24, 248, 0, 0, 0,
X  0, 0, 0, 0, 31, 24, 24, 24,
X  255, 255, 255, 255, 255, 255, 255, 255,
X  0, 0, 0, 0, 255, 255, 255, 255,
X  240, 240, 240, 240, 240, 240, 240, 240,
X  15, 15, 15, 15, 15, 15, 15, 15,
X  255, 255, 255, 255, 0, 0, 0, 0,
X  0, 0, 118, 220, 200, 220, 118, 0,
X  0, 120, 204, 248, 204, 248, 192, 192,
X  0, 252, 204, 192, 192, 192, 192, 0,
X  0, 254, 108, 108, 108, 108, 108, 0,
X  252, 204, 96, 48, 96, 204, 252, 0,
X  0, 0, 126, 216, 216, 216, 112, 0,
X  0, 102, 102, 102, 102, 124, 96, 192,
X  0, 118, 220, 24, 24, 24, 24, 0,
X  252, 48, 120, 204, 204, 120, 48, 252,
X  56, 108, 198, 254, 198, 108, 56, 0,
X  56, 108, 198, 198, 108, 108, 238, 0,
X  28, 48, 24, 124, 204, 204, 120, 0,
X  0, 0, 126, 219, 219, 126, 0, 0,
X  6, 12, 126, 219, 219, 126, 96, 192,
X  56, 96, 192, 248, 192, 96, 56, 0,
X  120, 204, 204, 204, 204, 204, 204, 0,
X  0, 252, 0, 252, 0, 252, 0, 0,
X  48, 48, 252, 48, 48, 0, 252, 0,
X  96, 48, 24, 48, 96, 0, 252, 0,
X  24, 48, 96, 48, 24, 0, 252, 0,
X  14, 27, 27, 24, 24, 24, 24, 24,
X  24, 24, 24, 24, 24, 216, 216, 112,
X  48, 48, 0, 252, 0, 48, 48, 0,
X  0, 118, 220, 0, 118, 220, 0, 0,
X  56, 108, 108, 56, 0, 0, 0, 0,
X  0, 0, 0, 24, 24, 0, 0, 0,
X  0, 0, 0, 0, 24, 0, 0, 0,
X  15, 12, 12, 12, 236, 108, 60, 28 };
X
END_OF_FILE
if test 8960 -ne `wc -c <'banner-01/font.c'`; then
    echo shar: \"'banner-01/font.c'\" unpacked with wrong size!
fi
# end of 'banner-01/font.c'
fi
if test -f 'banner-03/banr.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-03/banr.c'\"
else
echo shar: Extracting \"'banner-03/banr.c'\" \(12385 characters\)
sed "s/^X//" >'banner-03/banr.c' <<'END_OF_FILE'
X/*
X
NAME
X     banr - print strings in large letters
X
SYNOPSIS
X     banr [-n]
X
DESCRIPTION
X     banr prints its standard input in large letters (but smaller than
X     banner(1)) on the standard output.
X
OPTIONS
X     -n  Forces no underlining to be used even if the capability exists.
X
SEE ALSO
X     banner(1)
X
AUTHOR
X     Art Messenger 10/22/87
X     art@wilbur.coyote.trw.com
X
X*/
X
X/* compile with -ltermcap */
X
X#include <stdio.h>
X
X#define	TRUE	1
X#define	FALSE	0
X#define when	break;case
X#define wlse	break;default
X
char usagem[] = "Usage: %s [-n]\n";
X
struct font {
X    struct {
X	char *line,*ulmask;
X    } c[4];
X} character[128] = {	/* the font file: variable width */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x00 */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x01 */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x02 */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x03 */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x04 */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x05 */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x06 */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x07 */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x08 */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x09 */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x0a */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x0b */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x0c */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x0d */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x0e */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x0f */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x10 */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x11 */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x12 */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x13 */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x14 */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x15 */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x16 */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x17 */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x18 */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x19 */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x1a */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x1b */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x1c */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x1d */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x1e */
X	{ {"",""},{"",""},{"",""},{"",""} },	/* 0x1f */
X	{ {"  ","  "},
X	  {"  ","  "},
X	  {"  ","  "},
X	  {"  ","  "} },		/* 0x20: ' ' */
X	{ {" "," "},
X	  {"|"," "},
X	  {"."," "},
X	  {" "," "} },			/* 0x21: ! */
X	{ {"  ","  "},
X	  {"//","  "},
X	  {"  ","  "},
X	  {"  ","  "} },		/* 0x22: " */
X	{ {"   ","   "},
X	  {"|_|","_ _"},
X	  {"|_|","_ _"},
X	  {"| |","   "} },		/* 0x23: # */
X	{ {" __", "   "},
X	  {"(| ", " _ "},
X	  {"_|)", " _ "},
X	  {"   ", "   "} },		/* 0x24: $ */
X	{ {"  ","  "},
X	  {"o/","  "},
X	  {"/o","  "},
X	  {"  ","  "} },		/* 0x25: % */
X	{ {"  ","  "},
X	  {"o ","  "},
X	  {"(X","  "},
X	  {"  ","  "} },		/* 0x26: & */
X	{ {" "," "},
X	  {"/"," "},
X	  {" "," "},
X	  {" "," "} },			/* 0x27: ' */
X	{ {" "," "},
X	  {"/"," "},
X	  {"\\"," "},
X	  {" "," "} },			/* 0x28: ( */
X	{ {" "," "},
X	  {"\\"," "},
X	  {"/"," "},
X	  {" "," "} },			/* 0x29: ) */
X	{ {"  ","  "},
X	  {"\\/","__"},
X	  {"/\\","  "},
X	  {"  ","  "} },		/* 0x2a: * */
X	{ {"   ","   "},
X	  {"_|_"," _ "},
X	  {" | ","   "},
X	  {"   ","   "} },		/* 0x2b: + */
X	{ {" "," "},
X	  {" "," "},
X	  {"o"," "},
X	  {"/"," "} },			/* 0x2c: , */
X	{ {"  ","  "},
X	  {"__","  "},
X	  {"  ","  "},
X	  {"  ","  "} },		/* 0x2d: - */
X	{ {" "," "},
X	  {" "," "},
X	  {"o"," "},
X	  {" "," "} },			/* 0x2e: . */
X	{ {"  ","  "},
X	  {" /","  "},
X	  {"/ ","  "},
X	  {"  ","  "} },		/* 0x2f: / */
X	{ {" _ ", "   "},
X	  {"/.\\", "   "},
X	  {"\\_/", "   "},
X	  {"   ", "   "} },		/* 0x30: 0 */
X	{ {" ", " "},
X	  {"|", " "},
X	  {"|", " "},
X	  {" ", " "} },			/* 0x31: 1 */
X	{ {"_ ", "  "},
X	  {" )", "  "},
X	  {"/_", "_ "},
X	  {"  ", "  "} },		/* 0x32: 2 */
X	{ {"_ ", "  "},
X	  {"_)", "  "},
X	  {"_)", "  "},
X	  {"  ", "  "} },		/* 0x33: 3 */
X	{ {"   ", "   "},
X	  {"/_|", "_  "},
X	  {"  |", "   "},
X	  {"   ", "   "} },		/* 0x34: 4 */
X	{ {" __", "   "},
X	  {"|_ ", "   "},
X	  {"._)", "   "},
X	  {"   ", "   "} },		/* 0x35: 5 */
X	{ {"   ", "   "},
X	  {" / ", " _ "},
X	  {"(_)", "   "},
X	  {"   ", "   "} },		/* 0x36: 6 */
X	{ {"__", "  "},
X	  {" /", "  "},
X	  {"/ ", "  "},
X	  {"  ", "  "} },		/* 0x37: 7 */
X	{ {" _ ", "   "},
X	  {"(_)", "   "},
X	  {"(_)", "   "},
X	  {"   ", "   "} },		/* 0x38: 8 */
X	{ {" _ ", "   "},
X	  {"(_)", "   "},
X	  {" / ", "   "},
X	  {"   ", "   "} },		/* 0x39: 9 */
X	{ {" ", " "},
X	  {"o", " "},
X	  {"o", " "},
X	  {" ", " "} },			/* 0x3a: : */
X	{ {" ", " "},
X	  {"o", " "},
X	  {"o", " "},
X	  {"/", " "} },			/* 0x3b: ; */
X	{ {" ", " "},
X	  {"/", " "},
X	  {"\\", " "},
X	  {" ", " "} },			/* 0x3c: < */
X	{ {"  ", "  "},
X	  {"__", "  "},
X	  {"__", "  "},
X	  {"  ", "  "} },		/* 0x3d: = */
X	{ {" ", " "},
X	  {"\\", " "},
X	  {"/", " "},
X	  {" ", " "} },			/* 0x3e: > */
X	{ {" _ ", "   "},
X	  {"' )", "   "},
X	  {" ! ", "   "},
X	  {"   ", "   "} },		/* 0x3f: ? */
X	{ {"   ", "   "},
X	  {" _ ", "   "},
X	  {"(Q)", " __"},
X	  {"   ", "   "} },		/* 0x40: @ */
X	{ {" _ ", "    "},
X	  {"/_\\", "   "},
X	  {"| |", "_ _"},
X	  {"   ", "   "} },		/* 0x41: A */
X	{ {"__ ", "   "},
X	  {"|_)", "   "},
X	  {"|_)", "_  "},
X	  {"   ", "   "} },		/* 0x42: B */
X	{ {" _ ", "   "},
X	  {"/ '", "   "},
X	  {"\\_,", "   "},
X	  {"   ", "   "} },		/* 0x43: C */
X	{ {"__ ", "   "},
X	  {"| \\", "   "},
X	  {"|_/", "_  "},
X	  {"   ", "   "} },		/* 0x44: D */
X	{ {"___", "   "},
X	  {"|_ ", "   "},
X	  {"|__", "_  "},
X	  {"   ", "   "} },		/* 0x45: E */
X	{ {"___", "   "},
X	  {"|_ ", "   "},
X	  {"|  ", "_  "},
X	  {"   ", "   "} },		/* 0x46: F */
X	{ {" _ ", "   "},
X	  {"/ _", "   "},
X	  {"\\_|", "   "},
X	  {"   ", "   "} },		/* 0x47: G */
X	{ {"_ _", "   "},
X	  {"|_|", "   "},
X	  {"| |", "_ _"},
X	  {"   ", "   "} },		/* 0x48: H */
X	{ {"_", " "},
X	  {"|", " "},
X	  {"|", "_"},
X	  {" ", " "} },			/* 0x49: I */
X	{ {" _", "  "},
X	  {" |", "  "},
X	  {"\\/", "  "},
X	  {"  ", "  "} },		/* 0x4a: J */
X	{ {"_ _", "   "},
X	  {"|_/", "   "},
X	  {"| \\", "_ _"},
X	  {"   ", "   "} },		/* 0x4b: K */
X	{ {"_  ", "   "},
X	  {"|  ", "   "},
X	  {"|__", "_  "},
X	  {"   ", "   "} },		/* 0x4c: L */
X	{ {"_  _", "    "},
X	  {"|\\/|", "    "},
X	  {"|  |", "_  _"},
X	  {"    ", "    "} },		/* 0x4d: M */
X	{ {"_  _", "    "},
X	  {"|\\ |", "    "},
X	  {"| \\|", "_  _"},
X	  {"    ", "    "} },		/* 0x4e: N */
X	{ {" _ ", "   "},
X	  {"/ \\", "   "},
X	  {"\\_/", "   "},
X	  {"   ", "   "} },		/* 0x4f: O */
X	{ {"__ ", "   "},
X	  {"|_)", "   "},
X	  {"|  ", "_  "},
X	  {"   ", "   "} },		/* 0x50: P */
X	{ {" _ ", "   "},
X	  {"/ \\", "   "},
X	  {"\\_X", "   "},
X	  {"   ", "   "} },		/* 0x51: Q */
X	{ {"__ ", "   "},
X	  {"|_)", "   "},
X	  {"| \\", "_ _"},
X	  {"   ", "   "} },		/* 0x52: R */
X	{ {" _ ", "   "},
X	  {"(_'", "   "},
X	  {",_)", "   "},
X	  {"   ", "   "} },		/* 0x53: S */
X	{ {"___", "   "},
X	  {" | ", "   "},
X	  {" | ", " _ "},
X	  {"   ", "   "} },		/* 0x54: T */
X	{ {"_ _", "   "},
X	  {"| |", "   "},
X	  {"\\_/", "   "},
X	  {"   ", "   "} },		/* 0x55: U */
X	{ {"_  _", "    "},
X	  {"\\  /", "    "},
X	  {" \\/ ", "    "},
X	  {"    ", "    "} },		/* 0x56: V */
X	{ {"_  _", "    "},
X	  {"|  |", "    "},
X	  {"\\/\\/", "    "},
X	  {"    ", "    "} },		/* 0x57: W */
X	{ {"_ _", "   "},
X	  {"\\_/", "   "},
X	  {"/ \\", "_ _"},
X	  {"   ", "   "} },		/* 0x58: X */
X	{ {"_ _", "   "},
X	  {"\\_/", "   "},
X	  {" | ", " _ "},
X	  {"   ", "   "} },		/* 0x59: Y */
X	{ {"__", "  "},
X	  {" /", "  "},
X	  {"/_", "_ "},
X	  {"  ", "  "} },		/* 0x5a: Z */
X	{ {"__","  "},
X	  {"| ","  "},
X	  {"|_","_ "},
X	  {"  ","  "} },		/* 0x5b: [ */
X	{ {"  ","  "},
X	  {"\\ ","  "},
X	  {" \\","  "},
X	  {"  ","  "} },		/* 0x5c: \ */
X	{ {"__","  "},
X	  {" |","  "},
X	  {"_|"," _"},
X	  {"  ","  "} },		/* 0x5d: ] */
X	{ {"  ","  "},
X	  {"/\\","  "},
X	  {"  ","  "},
X	  {"  ","  "} },		/* 0x5e: ^ */
X	{ {"  ","  "},
X	  {"  ","  "},
X	  {"__","  "},
X	  {"  ","  "} },		/* 0x5f: _ */
X	{ {" "," "},
X	  {"\\"," "},
X	  {" "," "},
X	  {" "," "} },			/* 0x60: ` */
X	{ {"   ", "   "},
X	  {" _.", "   "},
X	  {"(_|", "   "},
X	  {"   ", "   "} },		/* 0x61: a */
X	{ {"   ", "   "},
X	  {"|_ ", "   "},
X	  {"|_)", "   "},
X	  {"   ", "   "} },		/* 0x62: b */
X	{ {"  ", "  "},
X	  {" _", "  "},
X	  {"|_", "  "},
X	  {"  ", "  "} },		/* 0x63: c */
X	{ {"   ", "   "},
X	  {" _|", "   "},
X	  {"(_|", "   "},
X	  {"   ", "   "} },		/* 0x64: d */
X	{ {"   ", "   "},
X	  {" _ ", "   "},
X	  {"(-'", " _ "},
X	  {"   ", "   "} },		/* 0x65: e */
X	{ {" _", "  "},
X	  {"|_", "_ "},
X	  {"| ", "  "},
X	  {"  ", "  "} },		/* 0x66: f */
X	{ {"   ", "   "},
X	  {" _ ", "   "},
X	  {"(_|", "   "},
X	  {"._)", "   "} },		/* 0x67: g */
X	{ {"   ", "   "},
X	  {"|_ ", "   "},
X	  {"| |", "   "},
X	  {"   ", "   "} },		/* 0x68: h */
X	{ {" ", " "},
X	  {".", " "},
X	  {"|", " "},
X	  {" ", " "} },			/* 0x69: i */
X	{ {"  ", "  "},
X	  {" .", "  "},
X	  {" |", "  "},
X	  {"./", "  "} },		/* 0x6a: j */
X	{ {"  ", "  "},
X	  {"| ", "  "},
X	  {"|<", "  "},
X	  {"  ", "  "} },		/* 0x6b: k */
X	{ {" ", " "},
X	  {"|", " "},
X	  {"|", "_"},
X	  {" ", " "} },			/* 0x6c: l */
X	{ {"     ", "     "},
X	  {"._ _ ", "     "},
X	  {"| | |", "     "},
X	  {"     ", "     "} },		/* 0x6d: m */
X	{ {"   ", "   "},
X	  {"._ ", "   "},
X	  {"| |", "   "},
X	  {"   ", "   "} },		/* 0x6e: n */
X	{ {"   ", "   "},
X	  {" _ ", "   "},
X	  {"(_)", "   "},
X	  {"   ", "   "} },		/* 0x6f: o */
X	{ {"   ", "   "},
X	  {"._ ", "   "},
X	  {"|_)", "   "},
X	  {"|  ", "   "} },		/* 0x70: p */
X	{ {"   ", "   "},
X	  {" _.", "   "},
X	  {"(_|", "   "},
X	  {"  |", "   "} },		/* 0x71: q */
X	{ {"  ", "  "},
X	  {"._", "  "},
X	  {"| ", "  "},
X	  {"  ", "  "} },		/* 0x72: r */
X	{ {" ", " "},
X	  {"_", " "},
X	  {"\\", "_"},
X	  {" ", " "} },			/* 0x73: s */
X	{ {" ", " "},
X	  {"|", "_"},
X	  {"|", " "},
X	  {" ", " "} },			/* 0x74: t */
X	{ {"   ", "   "},
X	  {"   ", "   "},
X	  {"|_|", "   "},
X	  {"   ", "   "} },		/* 0x75: u */
X	{ {"  ", "  "},
X	  {"  ", "  "},
X	  {"\\/", "  "},
X	  {"  ", "  "} },		/* 0x76: v */
X	{ {"    ", "    "},
X	  {"    ", "    "},
X	  {"\\/\\/", "    "},
X	  {"    ", "    "} },		/* 0x77: w */
X	{ {"  ", "  "},
X	  {"  ", "  "},
X	  {"><", "  "},
X	  {"  ", "  "} },		/* 0x78: x */
X	{ {"   ", "   "},
X	  {"   ", "   "},
X	  {"\\_/", "   "},
X	  {"_/ ", "   "} },		/* 0x79: y */
X	{ {" ", " "},
X	  {"_", " "},
X	  {"/", "_"},
X	  {" ", " "} },			/* 0x7a: z */
X	{ {" "," "},
X	  {"("," "},
X	  {"("," "},
X	  {" "," "} },			/* 0x7b: { */
X	{ {" "," "},
X	  {"|"," "},
X	  {"|"," "},
X	  {" "," "} },			/* 0x7c: | */
X	{ {" "," "},
X	  {")"," "},
X	  {")"," "},
X	  {" "," "} },			/* 0x7d: } */
X	{ {"  ","  "},
X	  {"^v","  "},
X	  {"  ","  "},
X	  {"  ","  "} },		/* 0x7e: ~ */
X	{ {"",""},{"",""},{"",""},{"",""} }	/* 0x7f */
X};
X
char *rindex();
X
main(argc,argv)
X    int argc;
X    char *argv[];
X{
X    int
X	nflag=FALSE,		/* -n: don't underline */
X	uflag=FALSE,		/* do underlining */
X	i;
X    char
X	*arg0,			/* the name of this program */
X	line[BUFSIZ],		/* input line */
X	*tname,			/* name of TERM variable */
X	bp[BUFSIZ],		/* buffer used by termcap stuff */
X	buf[BUFSIZ],		/* buffer to place us and ue strings */
X	*area=buf,		/* pointer into buf */
X	*us,*ue,		/* underline start and end strings */
X	*s,
X	*tgetstr(),*getenv();
X
X    /* parse arguments */
X    arg0 = rindex(*argv,'/') ? rindex(*argv,'/')+1 : *argv;
X    while (*++argv)
X	if (**argv == '-')
X	    switch (*++*argv) {
X		when 'n':
X		    nflag=TRUE;
X		wlse:
X		    usage(arg0);
X	    }
X	else usage(arg0);
X
X    /* check for underline ability */
X    if (!nflag && (tname=getenv("TERM")) && tgetent(bp,tname)==1) {
X	/* only do if changing to underlining takes no space (I'm lazy) */
X	uflag= tgetnum("ug") <= 0
X		&& (us=tgetstr("us",&area))
X		&& (ue=tgetstr("ue",&area));
X    }
X
X    /* now portray the strings */
X    while (fgets(line,BUFSIZ,stdin))
X	for (i=0;i<4;i++)
X	    for (s= line; *s; s++) {
X		putouts(*s & 0177,i,uflag,us,ue);
X		if (s[1])
X		    putchar(' ');
X	    }
X    exit(0);
X}
X
putouts(ch,i,uflag,us,ue)
X    int ch,i,uflag;
X    char *us,*ue;
X{
X    int ul,putch();
X    char *l,*u;
X
X    if (ch == '\n')
X	putchar(ch);
X    else {
X	l = character[ch].c[i].line;
X	u = character[ch].c[i].ulmask;
X	while (*l) {
X	    if (ul = (uflag && (*l=='_' || *u=='_')))
X		tputs(us,1,putch);
X	    if (uflag && *l=='_')
X		putchar(' ');
X	    else
X		putchar(*l);
X	    if (ul)
X		tputs(ue,1,putch);
X	    
X	    ++l; ++u;
X	}
X    }
X}
X
putch(ch) { putchar(ch); }
X
X/* usage -- print usage message and exit */
usage(arg0)
X    char *arg0;
X{
X    fprintf(stderr,usagem,arg0);
X    exit(1);
X}
END_OF_FILE
if test 12385 -ne `wc -c <'banner-03/banr.c'`; then
    echo shar: \"'banner-03/banr.c'\" unpacked with wrong size!
fi
# end of 'banner-03/banr.c'
fi
if test -f 'banner-05/block.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-05/block.c'\"
else
echo shar: Extracting \"'banner-05/block.c'\" \(11573 characters\)
sed "s/^X//" >'banner-05/block.c' <<'END_OF_FILE'
X/*
X *	block - dispays block style banner one word at a time.
X *	Author:		Jae H. Lee, (Coyote on irc)
X *			State University of New York at Buffalo
X *			Department of Computer Science
X *	example:	block this is a test.
X *			block -i this is a test.  ("this" in italic)
X *			block -i this -i is -i a -i test. (all in italic)
X *			block this\ is a test.  ("this is" on same line)
X *
X */
X#include <stdio.h>
X#define	COLM	8
X#define MAXCHR	10
X#define HCHR    10
X#define WCHR    10
X#define MAXLINE 120
X#define ITALIC	1
X
X
static char *block_char[] = {
X"             !!       \"\" \"\"                 $$     %%%    %%  &&&&        ''    ",
X"             !!       \"\" \"\"     ##  ##   $$$$$$$$ %% %%  %%  &&  &&      ''     ",
X"             !!       \"\" \"\"     ##  ##  $$$$$$$$$$%% %% %%   &&  &&     ''      ",
X"             !!       \"\" \"\"   ##########$$  $$     %%% %%     && &&             ",
X"             !!                 ##  ##  $$$$$$$$$     %%       &&&              ",
X"             !!                 ##  ##   $$$$$$$$$   %%       && &&             ",
X"             !!               ##########    $$  $$  %%  %%%  &&   && &          ",
X"                                ##  ##  $$$$$$$$$$ %%  %% %%&&     &&&          ",
X"             !!                 ##  ##   $$$$$$$$ %%   %% %%&&     &&           ",
X"             !!                             $$    %     %%%  &&&&&& &           ",
X"       (    )                                                                  /",
X"     ((      ))                   ++                                          //",
X"    ((        ))     *  *  *      ++                                         // ",
X"   ((          ))     * * *       ++                                        //  ",
X"   ((          ))      ***    ++++++++++          ----------               //   ",
X"   ((          ))   ********* ++++++++++          ----------              //    ",
X"   ((          ))      ***        ++       ,,,                           //     ",
X"    ((        ))      * * *       ++      ,,,,,                  ...    //      ",
X"     ((      ))      *  *  *      ++       ,,,,                 .....  //       ",
X"       (    )                                ,                   ...   /        ",
X"   0000       11     22222222 3333333333     444  5555555555 66666666 7777777777",
X"  000000    1111    2222222222333333333     4444  555555555566666666667777777777",
X" 00    00  11 11    2       22      33     44 44  55        66       6       77 ",
X"00      00    11            22     33     44  44  55        66              77  ",
X"00      00    11           222    333    44   44  555555555 666666666      77   ",
X"00      00    11         222        333 444444444455555555556666666666    77    ",
X"00      00    11       222           33 4444444444        5566      66   77     ",
X" 00    00     11      222     3       33      44  5       5566      66  77      ",
X"  000000  111111111122222222223333333333      44  55555555556666666666 77       ",
X"   0000   11111111112222222222 33333333       44   55555555  66666666 77        ",
X" 88888888  99999999                                                    ???????? ",
X"88888888889999999999                          <<              >>      ??????????",
X"88      8899      99   :::       ;;;         <<                >>     ??      ??",
X"88      8899      99   :::       ;;;        <<    ==========    >>            ??",
X" 88888888 9999999999                       <<     ==========     >>        ???? ",
X" 88888888  999999999                      <<                      >>      ??    ",
X"88      88        99   :::       ;;;       <<     ==========     >>       ??    ",
X"88      88        99   :::       ;;;        <<    ==========    >>              ",
X"88888888889999999999              ;;         <<                >>         ??    ",
X" 88888888  99999999               ;           <<              >>          ??    ",
X" @@@@@@@@  AAAAAAAA BBBBBBBBB  CCCCCCCC DDDDDDDDD EEEEEEEEEEFFFFFFFFFF GGGGGGGG ",
X"@@@@@@@@@@AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGG",
X"@@      @@AA      AABB      BBCC       CDD      DDEE        FF        GG        ",
X"@@  @@@ @@AA      AABB      BBCC        DD      DDEE        FF        GG        ",
X"@@  @@@@@@AA      AABBBBBBBBB CC        DD      DDEEEEE     FFFFF     GG   GGGGG",
X"@@  @@@@@@AAAAAAAAAABBBBBBBBB CC        DD      DDEEEEE     FFFFF     GG   GGGGG",
X"@@   @@@@ AAAAAAAAAABB      BBCC        DD      DDEE        FF        GG      GG",
X"@@        AA      AABB      BBCC       CDD      DDEE        FF        GG      GG",
X"@@@@@@@@@@AA      AABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFF        GGGGGGGGGG",
X" @@@@@@@@ AA      AABBBBBBBBB  CCCCCCCC DDDDDDDDD EEEEEEEEEEFF         GGGGGGGGG",
X"HH      HHIIIIIIIIII  JJJJJJJJKK      KKLL        MM      MMNN      NN OOOOOOOO ",
X"HH      HHIIIIIIIIII  JJJJJJJJKK     KK LL        MMMM  MMMMNNN     NNOOOOOOOOOO",
X"HH      HH    II         JJ   KK   KK   LL        MM MMMM MMNNNN    NNOO     OOO",
X"HH      HH    II         JJ   KK KK     LL        MM  MM  MMNN NN   NNOO    O OO",
X"HHHHHHHHHH    II         JJ   KKKKK     LL        MM  MM  MMNN  NN  NNOO   O  OO",
X"HHHHHHHHHH    II         JJ   KK  KK    LL        MM      MMNN  NN  NNOO  O   OO",
X"HH      HH    II    JJ   JJ   KK   KK   LL        MM      MMNN   NN NNOO O    OO",
X"HH      HH    II    JJ   JJ   KK    KK  LL        MM      MMNN    NNNNOOO     OO",
X"HH      HHIIIIIIIIIIJJJJJJJ   KK     KK LLLLLLLLLLMM      MMNN     NNNOOOOOOOOOO",
X"HH      HHIIIIIIIIII JJJJJ    KK      KKLLLLLLLLLLMM      MMNN      NN OOOOOOOO ",
X"PPPPPPPPP  QQQQQQQQ RRRRRRRRR  SSSSSSSS TTTTTTTTTTUU      UUVV      VVWW      WW",
X"PPPPPPPPPPQQQQQQQQQQRRRRRRRRRRSSSSSSSSSSTTTTTTTTTTUU      UUVV      VVWW      WW",
X"PP      PPQQ      QQRR      RRSS       S    TT    UU      UU VV    VV WW      WW",
X"PP      PPQQ      QQRR      RRSS            TT    UU      UU VV    VV WW      WW",
X"PPPPPPPPPPQQ      QQRRRRRRRRRRSSSSSSSSS     TT    UU      UU VV    VV WW  WW  WW",
X"PPPPPPPPP QQ      QQRRRRRRRRR  SSSSSSSSS    TT    UU      UU VV    VV WW  WW  WW",
X"PP        QQ   QQ QQRR   RR           SS    TT    UU      UU  VV  VV  WW  WW  WW",
X"PP        QQ    QQQQRR    RR  S       SS    TT    UU      UU  VV  VV  WW WWWW WW",
X"PP        QQQQQQQQQ RR     RR SSSSSSSSSS    TT    UUUUUUUUUU   VVVV    WWW  WWW ",
X"PP         QQQQQQ QQRR      RR SSSSSSSS     TT     UUUUUUUU     VV     WW    WW ",
X"XX      XXYY      YYZZZZZZZZZZ  [[[[[    \\           ]]]]]                      ",
X" XX    XX  YY    YY ZZZZZZZZZ   [[       \\\\             ]]      ^^              ",
X"  XX  XX    YY  YY        ZZ    [[        \\\\            ]]     ^^^^             ",
X"   XXXX      YYYY        ZZ     [[         \\\\           ]]    ^^  ^^            ",
X"    XX        YY     ZZZZZZZZ   [[          \\\\          ]]   ^^    ^^           ",
X"   XXXX       YY     ZZZZZZZZ   [[           \\\\         ]]  ^^      ^^          ",
X"  XX  XX      YY       ZZ       [[            \\\\        ]]                      ",
X" XX    XX     YY      ZZ        [[             \\\\       ]]                      ",
X"XX      XX    YY     ZZZZZZZZZ  [[              \\\\      ]]            __________",
X"XX      XX    YY    ZZZZZZZZZZ  [[[[[            \\   ]]]]]            __________",
X"  ``       AAAAAAAA BBBBBBBBB  CCCCCCCC DDDDDDDDD EEEEEEEEEEFFFFFFFFFF GGGGGGGG ",
X"   ``     AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGG",
X"    ``    AA      AABB      BBCC       CDD      DDEE        FF        GG        ",
X"          AA      AABB      BBCC        DD      DDEE        FF        GG        ",
X"          AA      AABBBBBBBBB CC        DD      DDEEEEE     FFFFF     GG   GGGGG",
X"          AAAAAAAAAABBBBBBBBB CC        DD      DDEEEEE     FFFFF     GG   GGGGG",
X"          AAAAAAAAAABB      BBCC        DD      DDEE        FF        GG      GG",
X"          AA      AABB      BBCC       CDD      DDEE        FF        GG      GG",
X"          AA      AABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFF        GGGGGGGGGG",
X"          AA      AABBBBBBBBB  CCCCCCCC DDDDDDDDD EEEEEEEEEEFF         GGGGGGGGG",
X"HH      HHIIIIIIIIII  JJJJJJJJKK      KKLL        MM      MMNN      NN OOOOOOOO ",
X"HH      HHIIIIIIIIII  JJJJJJJJKK     KK LL        MMMM  MMMMNNN     NNOOOOOOOOOO",
X"HH      HH    II         JJ   KK   KK   LL        MM MMMM MMNNNN    NNOO     OOO",
X"HH      HH    II         JJ   KK KK     LL        MM  MM  MMNN NN   NNOO    O OO",
X"HHHHHHHHHH    II         JJ   KKKKK     LL        MM  MM  MMNN  NN  NNOO   O  OO",
X"HHHHHHHHHH    II         JJ   KK  KK    LL        MM      MMNN  NN  NNOO  O   OO",
X"HH      HH    II    JJ   JJ   KK   KK   LL        MM      MMNN   NN NNOO O    OO",
X"HH      HH    II    JJ   JJ   KK    KK  LL        MM      MMNN    NNNNOOO     OO",
X"HH      HHIIIIIIIIIIJJJJJJJ   KK     KK LLLLLLLLLLMM      MMNN     NNNOOOOOOOOOO",
X"HH      HHIIIIIIIIII JJJJJ    KK      KKLLLLLLLLLLMM      MMNN      NN OOOOOOOO ",
X"PPPPPPPPP  QQQQQQQQ RRRRRRRRR  SSSSSSSS TTTTTTTTTTUU      UUVV      VVWW      WW",
X"PPPPPPPPPPQQQQQQQQQQRRRRRRRRRRSSSSSSSSSSTTTTTTTTTTUU      UUVV      VVWW      WW",
X"PP      PPQQ      QQRR      RRSS       S    TT    UU      UU VV    VV WW      WW",
X"PP      PPQQ      QQRR      RRSS            TT    UU      UU VV    VV WW      WW",
X"PPPPPPPPPPQQ      QQRRRRRRRRRRSSSSSSSSS     TT    UU      UU VV    VV WW  WW  WW",
X"PPPPPPPPP QQ      QQRRRRRRRRR  SSSSSSSSS    TT    UU      UU VV    VV WW  WW  WW",
X"PP        QQ   QQ QQRR   RR           SS    TT    UU      UU  VV  VV  WW  WW  WW",
X"PP        QQ    QQQQRR    RR  S       SS    TT    UU      UU  VV  VV  WW WWWW WW",
X"PP        QQQQQQQQQ RR     RR SSSSSSSSSS    TT    UUUUUUUUUU   VVVV    WWW  WWW ",
X"PP         QQQQQQ QQRR      RR SSSSSSSS     TT     UUUUUUUU     VV     WW    WW ",
X"XX      XXYY      YYZZZZZZZZZZ   {{{{       ||      }}}}     ~~~                ",
X" XX    XX  YY    YY ZZZZZZZZZ   {{          ||         }}   ~~ ~~    ~          ",
X"  XX  XX    YY  YY        ZZ    {{          ||         }}   ~    ~~ ~~          ",
X"   XXXX      YYYY        ZZ     {{          ||         }}         ~~~           ",
X"    XX        YY     ZZZZZZZZ  {{                       }}                      ",
X"   XXXX       YY     ZZZZZZZZ  {{                       }}                      ",
X"  XX  XX      YY       ZZ       {{          ||         }}                       ",
X" XX    XX     YY      ZZ        {{          ||         }}                       ",
X"XX      XX    YY     ZZZZZZZZZ  {{          ||         }}                       ",
X"XX      XX    YY    ZZZZZZZZZZ   {{{{       ||      }}}}                        ",
X};
X
X#include <stdio.h>
X#define SPACE ' '
X
main   (argc, argv)
int	argc;
char	**argv;
X{
X	struct  {
X		int row;
X		int colm;
X	} pos[MAXCHR];
X        int	i, j, k;
X	int	wordlen;
X	int	c_type;
X	char   *word;
X	char	line[MAXLINE];
X
X	for (i = 1; --argc > 0; i++) {
X	if (!strcmp (argv[i], "-i")) {
X		c_type = ITALIC;
X		continue;
X	} 
X	word = argv[i];
X	wordlen = strlen (word);
X	for (j=0; j < wordlen && j < MAXCHR; j++) {
X		if (word[j] < SPACE) word[j] = '?';
X		pos[j].row  = (int)(word[j] - SPACE) / 8;
X		pos[j].colm = (int)(word[j] - SPACE) % 8;
X	}
X	for (k=0; k<HCHR; k++) {
X		bzero (line, MAXLINE);
X		wordlen = strlen (word);
X		if (c_type == ITALIC) strncat (line, "              ", HCHR-k-1);
X		for (j=0; j < wordlen && j < MAXCHR; j++) {
X			(void) strncat (line, &block_char[pos[j].row*HCHR+k][pos[j].colm*WCHR], WCHR);
X			(void) strcat (line, "  ");
X		}
X		(void) printf ("%s\n", line);
X	}
X	printf (" \n \n");
X	c_type--;
X	}
X}
END_OF_FILE
if test 11573 -ne `wc -c <'banner-05/block.c'`; then
    echo shar: \"'banner-05/block.c'\" unpacked with wrong size!
fi
# end of 'banner-05/block.c'
fi
if test -f 'banner-08/banner.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-08/banner.c'\"
else
echo shar: Extracting \"'banner-08/banner.c'\" \(9151 characters\)
sed "s/^X//" >'banner-08/banner.c' <<'END_OF_FILE'
X/* From: amos shapir <amos@cs.huji.ac.il> */
X/* modified by Frank Kaefer <fkk@stasys.sta.sub.org> */
X
X/*
X * small banner 8x8 matrix
X */
X
X#include <stdio.h>
extern char chrtab[][8];
X#ifdef HEBREW
extern char htab[][8];
X#endif HEBREW
X#define NMSG	80
X
main(argc, argv)
char **argv;
X{
X	register char *sp;
X	register int i, j, t, j1, t1;
X	static char msg[NMSG];
X	int hebrew = 0, shadow = 0;
X
X	while(argc > 1 && argv[1][0] == '-') {
X		argc--;
X		argv++;
X		switch(argv[0][1]) {
X#ifdef HEBREW
X		case 'h':
X			hebrew = 1;
X			break;
X#endif HEBREW
X		case 's':
X			shadow = 1;
X			break;
X		}
X	}
X	if(argc > 1)
X		strncpy(msg, *++argv, NMSG);
X	else {
X		fputs("Message: ", stderr);
X		for(sp=msg, i=0; (*sp++ = getchar())!='\n' && i<NMSG-1; i++)
X			;
X		*--sp = '\0';
X	}
X
X	for (i=0; i<8; i++) {
X		if(shadow)
X			for (j=i; j<7; j++)
X				putchar(' ');
X		for (sp = msg; *sp; sp++) {
X			if((t = *sp) == '\\') {
X				for(t=0,j=0;j<3 && *++sp>='0' && *sp<='7'; j++)
X					t = t*8 + *sp - '0';
X				if(j == 0) {
X					t = *sp;
X					if(t == 'h') {
X						hebrew = 1;
X						continue;
X					} else if(t == 'e') {
X						hebrew = 0;
X						continue;
X					}
X				} else if(j < 3)
X					sp--;
X			} else
X				t = *sp;
X			if(hebrew) {
X				if(shadow && i<7)
X#ifdef HEBREW
X					t1 = htab[t & 037][i+1];
X				t = htab[t & 037][i];
X#else HEBREW
X					;
X				;
X#endif HEBREW
X			} else {
X				if(shadow && i<7)
X					t1 = chrtab[t & 0177][i+1];
X				t = chrtab[t & 0177][i];
X			}
X			if(shadow) {
X				for (j1=0, j=0200; (j|j1)!=0; j1=j, j >>= 1)
X					putchar((j&t) ? (j&t1) ? ' ' : '_'
X					 : (j1&t) ? '/' : ' ');
X			} else {
X				for (j=0200; j!=0; j >>= 1)
X					putchar((j&t) ? '#' : ' ');
X			}
X		}
X		putchar('\n');
X	}
X}
X
X/* char generator table from IBM PC */
char chrtab[128][8] = {
X	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	/* 00 */
X	0x7E, 0x81, 0xA5, 0x81, 0xBD, 0x99, 0x81, 0x7E,	/* 01 */
X	0x7E, 0xFF, 0xDB, 0xFF, 0xC3, 0xE7, 0xFF, 0x7E,	/* 02 */
X	0x6C, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10, 0x00,	/* 03 */
X	0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x10, 0x00,	/* 04 */
X	0x38, 0x7C, 0x38, 0xFE, 0xFE, 0x7C, 0x38, 0x7C,	/* 05 */
X	0x10, 0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x7C,	/* 06 */
X	0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00,	/* 07 */
X	0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF,	/* 08 */
X	0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00,	/* 09 */
X	0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF,	/* 0A */
X	0x0F, 0x07, 0x0F, 0x7D, 0xCC, 0xCC, 0xCC, 0x78,	/* 0B */
X	0x3C, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18,	/* 0C */
X	0x3F, 0x33, 0x3F, 0x30, 0x30, 0x70, 0xF0, 0xE0,	/* 0D */
X	0x7F, 0x63, 0x7F, 0x63, 0x63, 0x67, 0xE6, 0xC0,	/* 0E */
X	0x99, 0x5A, 0x3C, 0xE7, 0xE7, 0x3C, 0x5A, 0x99,	/* 0F */
X	0x80, 0xE0, 0xF8, 0xFE, 0xF8, 0xE0, 0x80, 0x00,	/* 10 */
X	0x02, 0x0E, 0x3E, 0xFE, 0x3E, 0x0E, 0x02, 0x00,	/* 11 */
X	0x18, 0x3C, 0x7E, 0x18, 0x18, 0x7E, 0x3C, 0x18,	/* 12 */
X	0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,	/* 13 */
X	0x7F, 0xDB, 0xDB, 0x7B, 0x1B, 0x1B, 0x1B, 0x00,	/* 14 */
X	0x3E, 0x63, 0x38, 0x6C, 0x6C, 0x38, 0xCC, 0x78,	/* 15 */
X	0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x7E, 0x00,	/* 16 */
X	0x18, 0x3C, 0x7E, 0x18, 0x7E, 0x3C, 0x18, 0xFF,	/* 17 */
X	0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x00,	/* 18 */
X	0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00,	/* 19 */
X	0x00, 0x18, 0x0C, 0xFE, 0x0C, 0x18, 0x00, 0x00,	/* 1A */
X	0x00, 0x30, 0x60, 0xFE, 0x60, 0x30, 0x00, 0x00,	/* 1B */
X	0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xFE, 0x00, 0x00,	/* 1C */
X	0x00, 0x24, 0x66, 0xFF, 0x66, 0x24, 0x00, 0x00,	/* 1D */
X	0x00, 0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x00, 0x00,	/* 1E */
X	0x00, 0xFF, 0xFF, 0x7E, 0x3C, 0x18, 0x00, 0x00,	/* 1F */
X	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	/* 20 */
X	0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,	/* 21 */
X	0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00,	/* 22 */
X	0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00,	/* 23 */
X	0x30, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x30, 0x00,	/* 24 */
X	0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00,	/* 25 */
X	0x38, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0x76, 0x00,	/* 26 */
X	0x60, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,	/* 27 */
X	0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,	/* 28 */
X	0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,	/* 29 */
X	0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00,	/* 2A */
X	0x00, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x00, 0x00,	/* 2B */
X	0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,	/* 2C */
X	0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00,	/* 2D */
X	0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,	/* 2E */
X	0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00,	/* 2F */
X	0x7C, 0xC6, 0xCE, 0xDE, 0xF6, 0xE6, 0x7C, 0x00,	/* 30 */
X	0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xFC, 0x00,	/* 31 */
X	0x78, 0xCC, 0x0C, 0x38, 0x60, 0xCC, 0xFC, 0x00,	/* 32 */
X	0x78, 0xCC, 0x0C, 0x38, 0x0C, 0xCC, 0x78, 0x00,	/* 33 */
X	0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x1E, 0x00,	/* 34 */
X	0xFC, 0xC0, 0xF8, 0x0C, 0x0C, 0xCC, 0x78, 0x00,	/* 35 */
X	0x38, 0x60, 0xC0, 0xF8, 0xCC, 0xCC, 0x78, 0x00,	/* 36 */
X	0xFC, 0xCC, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00,	/* 37 */
X	0x78, 0xCC, 0xCC, 0x78, 0xCC, 0xCC, 0x78, 0x00,	/* 38 */
X	0x78, 0xCC, 0xCC, 0x7C, 0x0C, 0x18, 0x70, 0x00,	/* 39 */
X	0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,	/* 3A */
X	0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,	/* 3B */
X	0x18, 0x30, 0x60, 0xC0, 0x60, 0x30, 0x18, 0x00,	/* 3C */
X	0x00, 0x00, 0xFC, 0x00, 0x00, 0xFC, 0x00, 0x00,	/* 3D */
X	0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60, 0x00,	/* 3E */
X	0x78, 0xCC, 0x0C, 0x18, 0x30, 0x00, 0x30, 0x00,	/* 3F */
X	0x7C, 0xC6, 0xDE, 0xDE, 0xDE, 0xC0, 0x78, 0x00,	/* 40 */
X	0x30, 0x78, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0x00,	/* 41 */
X	0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66, 0xFC, 0x00,	/* 42 */
X	0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x00,	/* 43 */
X	0xF8, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00,	/* 44 */
X	0xFE, 0x62, 0x68, 0x78, 0x68, 0x62, 0xFE, 0x00,	/* 45 */
X	0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0xF0, 0x00,	/* 46 */
X	0x3C, 0x66, 0xC0, 0xC0, 0xCE, 0x66, 0x3E, 0x00,	/* 47 */
X	0xCC, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0xCC, 0x00,	/* 48 */
X	0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,	/* 49 */
X	0x1E, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x00,	/* 4A */
X	0xE6, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0xE6, 0x00,	/* 4B */
X	0xF0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00,	/* 4C */
X	0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00,	/* 4D */
X	0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00,	/* 4E */
X	0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00,	/* 4F */
X	0xFC, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00,	/* 50 */
X	0x78, 0xCC, 0xCC, 0xCC, 0xDC, 0x78, 0x1C, 0x00,	/* 51 */
X	0xFC, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0xE6, 0x00,	/* 52 */
X	0x78, 0xCC, 0xE0, 0x70, 0x1C, 0xCC, 0x78, 0x00,	/* 53 */
X	0xFC, 0xB4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,	/* 54 */
X	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00,	/* 55 */
X	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00,	/* 56 */
X	0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0xEE, 0xC6, 0x00,	/* 57 */
X	0xC6, 0xC6, 0x6C, 0x38, 0x38, 0x6C, 0xC6, 0x00,	/* 58 */
X	0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x30, 0x78, 0x00,	/* 59 */
X	0xFE, 0xC6, 0x8C, 0x18, 0x32, 0x66, 0xFE, 0x00,	/* 5A */
X	0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,	/* 5B */
X	0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00,	/* 5C */
X	0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,	/* 5D */
X	0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00,	/* 5E */
X	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,	/* 5F */
X	0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,	/* 60 */
X	0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,	/* 61 */
X	0xE0, 0x60, 0x60, 0x7C, 0x66, 0x66, 0xDC, 0x00,	/* 62 */
X	0x00, 0x00, 0x78, 0xCC, 0xC0, 0xCC, 0x78, 0x00,	/* 63 */
X	0x1C, 0x0C, 0x0C, 0x7C, 0xCC, 0xCC, 0x76, 0x00,	/* 64 */
X	0x00, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,	/* 65 */
X	0x38, 0x6C, 0x60, 0xF0, 0x60, 0x60, 0xF0, 0x00,	/* 66 */
X	0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8,	/* 67 */
X	0xE0, 0x60, 0x6C, 0x76, 0x66, 0x66, 0xE6, 0x00,	/* 68 */
X	0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,	/* 69 */
X	0x0C, 0x00, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78,	/* 6A */
X	0xE0, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0xE6, 0x00,	/* 6B */
X	0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,	/* 6C */
X	0x00, 0x00, 0xCC, 0xFE, 0xFE, 0xD6, 0xC6, 0x00,	/* 6D */
X	0x00, 0x00, 0xF8, 0xCC, 0xCC, 0xCC, 0xCC, 0x00,	/* 6E */
X	0x00, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0x78, 0x00,	/* 6F */
X	0x00, 0x00, 0xDC, 0x66, 0x66, 0x7C, 0x60, 0xF0,	/* 70 */
X	0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0x1E,	/* 71 */
X	0x00, 0x00, 0xDC, 0x76, 0x66, 0x60, 0xF0, 0x00,	/* 72 */
X	0x00, 0x00, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x00,	/* 73 */
X	0x10, 0x30, 0x7C, 0x30, 0x30, 0x34, 0x18, 0x00,	/* 74 */
X	0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00,	/* 75 */
X	0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00,	/* 76 */
X	0x00, 0x00, 0xC6, 0xD6, 0xFE, 0xFE, 0x6C, 0x00,	/* 77 */
X	0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00,	/* 78 */
X	0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8,	/* 79 */
X	0x00, 0x00, 0xFC, 0x98, 0x30, 0x64, 0xFC, 0x00,	/* 7A */
X	0x1C, 0x30, 0x30, 0xE0, 0x30, 0x30, 0x1C, 0x00,	/* 7B */
X	0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,	/* 7C */
X	0xE0, 0x30, 0x30, 0x1C, 0x30, 0x30, 0xE0, 0x00,	/* 7D */
X	0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	/* 7E */
X	0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0x00,	/* 7F */
X};
END_OF_FILE
if test 9151 -ne `wc -c <'banner-08/banner.c'`; then
    echo shar: \"'banner-08/banner.c'\" unpacked with wrong size!
fi
# end of 'banner-08/banner.c'
fi
if test -f 'banner-08/banner.c-org' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-08/banner.c-org'\"
else
echo shar: Extracting \"'banner-08/banner.c-org'\" \(8985 characters\)
sed "s/^X//" >'banner-08/banner.c-org' <<'END_OF_FILE'
X/* From: amos shapir <amos@cs.huji.ac.il> */
X
X/*
X * small banner 8x8 matrix
X */
X
X#include <stdio.h>
extern char chrtab[][8];
extern char htab[][8];
X#define NMSG	80
X
main(argc, argv)
char **argv;
X{
X	register char *sp;
X	register int i, j, t, j1, t1;
X	static char msg[NMSG];
X	int hebrew = 0, shadow = 0;
X
X	while(argc > 1 && argv[1][0] == '-') {
X		argc--;
X		argv++;
X		switch(argv[0][1]) {
X		case 'h':
X			hebrew = 1;
X			break;
X		case 's':
X			shadow = 1;
X			break;
X		}
X	}
X	if(argc > 1)
X		strncpy(msg, *++argv, NMSG);
X	else {
X		fputs("Message: ", stderr);
X		for(sp=msg, i=0; (*sp++ = getchar())!='\n' && i<NMSG-1; i++)
X			;
X		*--sp = '\0';
X	}
X
X	for (i=0; i<8; i++) {
X		if(shadow)
X			for (j=i; j<7; j++)
X				putchar(' ');
X		for (sp = msg; *sp; sp++) {
X			if((t = *sp) == '\\') {
X				for(t=0,j=0;j<3 && *++sp>='0' && *sp<='7'; j++)
X					t = t*8 + *sp - '0';
X				if(j == 0) {
X					t = *sp;
X					if(t == 'h') {
X						hebrew = 1;
X						continue;
X					} else if(t == 'e') {
X						hebrew = 0;
X						continue;
X					}
X				} else if(j < 3)
X					sp--;
X			} else
X				t = *sp;
X			if(hebrew) {
X				if(shadow && i<7)
X					t1 = htab[t & 037][i+1];
X				t = htab[t & 037][i];
X			} else {
X				if(shadow && i<7)
X					t1 = chrtab[t & 0177][i+1];
X				t = chrtab[t & 0177][i];
X			}
X			if(shadow) {
X				for (j1=0, j=0200; (j|j1)!=0; j1=j, j >>= 1)
X					putchar((j&t) ? (j&t1) ? ' ' : '_'
X					 : (j1&t) ? '/' : ' ');
X			} else {
X				for (j=0200; j!=0; j >>= 1)
X					putchar((j&t) ? '#' : ' ');
X			}
X		}
X		putchar('\n');
X	}
X}
X
X/* char generator table from IBM PC */
char chrtab[128][8] = {
X	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	/* 00 */
X	0x7E, 0x81, 0xA5, 0x81, 0xBD, 0x99, 0x81, 0x7E,	/* 01 */
X	0x7E, 0xFF, 0xDB, 0xFF, 0xC3, 0xE7, 0xFF, 0x7E,	/* 02 */
X	0x6C, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10, 0x00,	/* 03 */
X	0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x10, 0x00,	/* 04 */
X	0x38, 0x7C, 0x38, 0xFE, 0xFE, 0x7C, 0x38, 0x7C,	/* 05 */
X	0x10, 0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x7C,	/* 06 */
X	0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00,	/* 07 */
X	0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF,	/* 08 */
X	0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00,	/* 09 */
X	0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF,	/* 0A */
X	0x0F, 0x07, 0x0F, 0x7D, 0xCC, 0xCC, 0xCC, 0x78,	/* 0B */
X	0x3C, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18,	/* 0C */
X	0x3F, 0x33, 0x3F, 0x30, 0x30, 0x70, 0xF0, 0xE0,	/* 0D */
X	0x7F, 0x63, 0x7F, 0x63, 0x63, 0x67, 0xE6, 0xC0,	/* 0E */
X	0x99, 0x5A, 0x3C, 0xE7, 0xE7, 0x3C, 0x5A, 0x99,	/* 0F */
X	0x80, 0xE0, 0xF8, 0xFE, 0xF8, 0xE0, 0x80, 0x00,	/* 10 */
X	0x02, 0x0E, 0x3E, 0xFE, 0x3E, 0x0E, 0x02, 0x00,	/* 11 */
X	0x18, 0x3C, 0x7E, 0x18, 0x18, 0x7E, 0x3C, 0x18,	/* 12 */
X	0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,	/* 13 */
X	0x7F, 0xDB, 0xDB, 0x7B, 0x1B, 0x1B, 0x1B, 0x00,	/* 14 */
X	0x3E, 0x63, 0x38, 0x6C, 0x6C, 0x38, 0xCC, 0x78,	/* 15 */
X	0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x7E, 0x00,	/* 16 */
X	0x18, 0x3C, 0x7E, 0x18, 0x7E, 0x3C, 0x18, 0xFF,	/* 17 */
X	0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x00,	/* 18 */
X	0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00,	/* 19 */
X	0x00, 0x18, 0x0C, 0xFE, 0x0C, 0x18, 0x00, 0x00,	/* 1A */
X	0x00, 0x30, 0x60, 0xFE, 0x60, 0x30, 0x00, 0x00,	/* 1B */
X	0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xFE, 0x00, 0x00,	/* 1C */
X	0x00, 0x24, 0x66, 0xFF, 0x66, 0x24, 0x00, 0x00,	/* 1D */
X	0x00, 0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x00, 0x00,	/* 1E */
X	0x00, 0xFF, 0xFF, 0x7E, 0x3C, 0x18, 0x00, 0x00,	/* 1F */
X	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	/* 20 */
X	0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,	/* 21 */
X	0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00,	/* 22 */
X	0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00,	/* 23 */
X	0x30, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x30, 0x00,	/* 24 */
X	0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00,	/* 25 */
X	0x38, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0x76, 0x00,	/* 26 */
X	0x60, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,	/* 27 */
X	0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,	/* 28 */
X	0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,	/* 29 */
X	0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00,	/* 2A */
X	0x00, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x00, 0x00,	/* 2B */
X	0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,	/* 2C */
X	0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00,	/* 2D */
X	0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,	/* 2E */
X	0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00,	/* 2F */
X	0x7C, 0xC6, 0xCE, 0xDE, 0xF6, 0xE6, 0x7C, 0x00,	/* 30 */
X	0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xFC, 0x00,	/* 31 */
X	0x78, 0xCC, 0x0C, 0x38, 0x60, 0xCC, 0xFC, 0x00,	/* 32 */
X	0x78, 0xCC, 0x0C, 0x38, 0x0C, 0xCC, 0x78, 0x00,	/* 33 */
X	0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x1E, 0x00,	/* 34 */
X	0xFC, 0xC0, 0xF8, 0x0C, 0x0C, 0xCC, 0x78, 0x00,	/* 35 */
X	0x38, 0x60, 0xC0, 0xF8, 0xCC, 0xCC, 0x78, 0x00,	/* 36 */
X	0xFC, 0xCC, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00,	/* 37 */
X	0x78, 0xCC, 0xCC, 0x78, 0xCC, 0xCC, 0x78, 0x00,	/* 38 */
X	0x78, 0xCC, 0xCC, 0x7C, 0x0C, 0x18, 0x70, 0x00,	/* 39 */
X	0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,	/* 3A */
X	0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,	/* 3B */
X	0x18, 0x30, 0x60, 0xC0, 0x60, 0x30, 0x18, 0x00,	/* 3C */
X	0x00, 0x00, 0xFC, 0x00, 0x00, 0xFC, 0x00, 0x00,	/* 3D */
X	0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60, 0x00,	/* 3E */
X	0x78, 0xCC, 0x0C, 0x18, 0x30, 0x00, 0x30, 0x00,	/* 3F */
X	0x7C, 0xC6, 0xDE, 0xDE, 0xDE, 0xC0, 0x78, 0x00,	/* 40 */
X	0x30, 0x78, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0x00,	/* 41 */
X	0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66, 0xFC, 0x00,	/* 42 */
X	0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x00,	/* 43 */
X	0xF8, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00,	/* 44 */
X	0xFE, 0x62, 0x68, 0x78, 0x68, 0x62, 0xFE, 0x00,	/* 45 */
X	0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0xF0, 0x00,	/* 46 */
X	0x3C, 0x66, 0xC0, 0xC0, 0xCE, 0x66, 0x3E, 0x00,	/* 47 */
X	0xCC, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0xCC, 0x00,	/* 48 */
X	0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,	/* 49 */
X	0x1E, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x00,	/* 4A */
X	0xE6, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0xE6, 0x00,	/* 4B */
X	0xF0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00,	/* 4C */
X	0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00,	/* 4D */
X	0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00,	/* 4E */
X	0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00,	/* 4F */
X	0xFC, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00,	/* 50 */
X	0x78, 0xCC, 0xCC, 0xCC, 0xDC, 0x78, 0x1C, 0x00,	/* 51 */
X	0xFC, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0xE6, 0x00,	/* 52 */
X	0x78, 0xCC, 0xE0, 0x70, 0x1C, 0xCC, 0x78, 0x00,	/* 53 */
X	0xFC, 0xB4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,	/* 54 */
X	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00,	/* 55 */
X	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00,	/* 56 */
X	0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0xEE, 0xC6, 0x00,	/* 57 */
X	0xC6, 0xC6, 0x6C, 0x38, 0x38, 0x6C, 0xC6, 0x00,	/* 58 */
X	0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x30, 0x78, 0x00,	/* 59 */
X	0xFE, 0xC6, 0x8C, 0x18, 0x32, 0x66, 0xFE, 0x00,	/* 5A */
X	0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,	/* 5B */
X	0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00,	/* 5C */
X	0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,	/* 5D */
X	0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00,	/* 5E */
X	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,	/* 5F */
X	0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,	/* 60 */
X	0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,	/* 61 */
X	0xE0, 0x60, 0x60, 0x7C, 0x66, 0x66, 0xDC, 0x00,	/* 62 */
X	0x00, 0x00, 0x78, 0xCC, 0xC0, 0xCC, 0x78, 0x00,	/* 63 */
X	0x1C, 0x0C, 0x0C, 0x7C, 0xCC, 0xCC, 0x76, 0x00,	/* 64 */
X	0x00, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,	/* 65 */
X	0x38, 0x6C, 0x60, 0xF0, 0x60, 0x60, 0xF0, 0x00,	/* 66 */
X	0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8,	/* 67 */
X	0xE0, 0x60, 0x6C, 0x76, 0x66, 0x66, 0xE6, 0x00,	/* 68 */
X	0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,	/* 69 */
X	0x0C, 0x00, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78,	/* 6A */
X	0xE0, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0xE6, 0x00,	/* 6B */
X	0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,	/* 6C */
X	0x00, 0x00, 0xCC, 0xFE, 0xFE, 0xD6, 0xC6, 0x00,	/* 6D */
X	0x00, 0x00, 0xF8, 0xCC, 0xCC, 0xCC, 0xCC, 0x00,	/* 6E */
X	0x00, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0x78, 0x00,	/* 6F */
X	0x00, 0x00, 0xDC, 0x66, 0x66, 0x7C, 0x60, 0xF0,	/* 70 */
X	0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0x1E,	/* 71 */
X	0x00, 0x00, 0xDC, 0x76, 0x66, 0x60, 0xF0, 0x00,	/* 72 */
X	0x00, 0x00, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x00,	/* 73 */
X	0x10, 0x30, 0x7C, 0x30, 0x30, 0x34, 0x18, 0x00,	/* 74 */
X	0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00,	/* 75 */
X	0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00,	/* 76 */
X	0x00, 0x00, 0xC6, 0xD6, 0xFE, 0xFE, 0x6C, 0x00,	/* 77 */
X	0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00,	/* 78 */
X	0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8,	/* 79 */
X	0x00, 0x00, 0xFC, 0x98, 0x30, 0x64, 0xFC, 0x00,	/* 7A */
X	0x1C, 0x30, 0x30, 0xE0, 0x30, 0x30, 0x1C, 0x00,	/* 7B */
X	0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,	/* 7C */
X	0xE0, 0x30, 0x30, 0x1C, 0x30, 0x30, 0xE0, 0x00,	/* 7D */
X	0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	/* 7E */
X	0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0x00,	/* 7F */
X};
END_OF_FILE
if test 8985 -ne `wc -c <'banner-08/banner.c-org'`; then
    echo shar: \"'banner-08/banner.c-org'\" unpacked with wrong size!
fi
# end of 'banner-08/banner.c-org'
fi
if test -f 'banner-12/font.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-12/font.c'\"
else
echo shar: Extracting \"'banner-12/font.c'\" \(8959 characters\)
sed "s/^X//" >'banner-12/font.c' <<'END_OF_FILE'
unsigned char charset[] = {
X  0, 0, 0, 0, 0, 0, 0, 0,
X  126, 129, 165, 129, 189, 153, 129, 126,
X  126, 255, 219, 255, 195, 231, 255, 126,
X  108, 254, 254, 254, 124, 56, 16, 0,
X  16, 56, 124, 254, 124, 56, 16, 0,
X  56, 124, 56, 254, 254, 124, 56, 124,
X  16, 16, 56, 124, 254, 124, 56, 124,
X  0, 0, 24, 60, 60, 24, 0, 0,
X  255, 255, 231, 195, 195, 231, 255, 255,
X  0, 60, 102, 66, 66, 102, 60, 0,
X  255, 195, 153, 189, 189, 153, 195, 255,
X  15, 7, 15, 125, 204, 204, 204, 120,
X  60, 102, 102, 102, 60, 24, 126, 24,
X  63, 51, 63, 48, 48, 112, 240, 224,
X  127, 99, 127, 99, 99, 103, 230, 192,
X  153, 90, 60, 231, 231, 60, 90, 153,
X  128, 224, 248, 254, 248, 224, 128, 0,
X  2, 14, 62, 254, 62, 14, 2, 0,
X  24, 60, 126, 24, 24, 126, 60, 24,
X  102, 102, 102, 102, 102, 0, 102, 0,
X  127, 219, 219, 123, 27, 27, 27, 0,
X  62, 99, 56, 108, 108, 56, 204, 120,
X  0, 0, 0, 0, 126, 126, 126, 0,
X  24, 60, 126, 24, 126, 60, 24, 255,
X  24, 60, 126, 24, 24, 24, 24, 0,
X  24, 24, 24, 24, 126, 60, 24, 0,
X  0, 24, 12, 254, 12, 24, 0, 0,
X  0, 48, 96, 254, 96, 48, 0, 0,
X  0, 0, 192, 192, 192, 254, 0, 0,
X  0, 36, 102, 255, 102, 36, 0, 0,
X  0, 24, 60, 126, 255, 255, 0, 0,
X  0, 255, 255, 126, 60, 24, 0, 0,
X  0, 0, 0, 0, 0, 0, 0, 0,
X  48, 120, 120, 48, 48, 0, 48, 0,
X  108, 108, 108, 0, 0, 0, 0, 0,
X  108, 108, 254, 108, 254, 108, 108, 0,
X  48, 124, 192, 120, 12, 248, 48, 0,
X  0, 198, 204, 24, 48, 102, 198, 0,
X  56, 108, 56, 118, 220, 204, 118, 0,
X  96, 96, 192, 0, 0, 0, 0, 0,
X  24, 48, 96, 96, 96, 48, 24, 0,
X  96, 48, 24, 24, 24, 48, 96, 0,
X  0, 102, 60, 255, 60, 102, 0, 0,
X  0, 48, 48, 252, 48, 48, 0, 0,
X  0, 0, 0, 0, 0, 48, 48, 96,
X  0, 0, 0, 252, 0, 0, 0, 0,
X  0, 0, 0, 0, 0, 48, 48, 0,
X  6, 12, 24, 48, 96, 192, 128, 0,
X  124, 198, 206, 222, 246, 230, 124, 0,
X  48, 112, 48, 48, 48, 48, 252, 0,
X  120, 204, 12, 56, 96, 204, 252, 0,
X  120, 204, 12, 56, 12, 204, 120, 0,
X  28, 60, 108, 204, 254, 12, 30, 0,
X  252, 192, 248, 12, 12, 204, 120, 0,
X  56, 96, 192, 248, 204, 204, 120, 0,
X  252, 204, 12, 24, 48, 48, 48, 0,
X  120, 204, 204, 120, 204, 204, 120, 0,
X  120, 204, 204, 124, 12, 24, 112, 0,
X  0, 48, 48, 0, 0, 48, 48, 0,
X  0, 48, 48, 0, 0, 48, 48, 96,
X  24, 48, 96, 192, 96, 48, 24, 0,
X  0, 0, 252, 0, 0, 252, 0, 0,
X  96, 48, 24, 12, 24, 48, 96, 0,
X  120, 204, 12, 24, 48, 0, 48, 0,
X  124, 198, 222, 222, 222, 192, 120, 0,
X  48, 120, 204, 204, 252, 204, 204, 0,
X  252, 102, 102, 124, 102, 102, 252, 0,
X  60, 102, 192, 192, 192, 102, 60, 0,
X  248, 108, 102, 102, 102, 108, 248, 0,
X  254, 98, 104, 120, 104, 98, 254, 0,
X  254, 98, 104, 120, 104, 96, 240, 0,
X  60, 102, 192, 192, 206, 102, 62, 0,
X  204, 204, 204, 252, 204, 204, 204, 0,
X  120, 48, 48, 48, 48, 48, 120, 0,
X  30, 12, 12, 12, 204, 204, 120, 0,
X  230, 102, 108, 120, 108, 102, 230, 0,
X  240, 96, 96, 96, 98, 102, 254, 0,
X  198, 238, 254, 254, 214, 198, 198, 0,
X  198, 230, 246, 222, 206, 198, 198, 0,
X  56, 108, 198, 198, 198, 108, 56, 0,
X  252, 102, 102, 124, 96, 96, 240, 0,
X  120, 204, 204, 204, 220, 120, 28, 0,
X  252, 102, 102, 124, 108, 102, 230, 0,
X  120, 204, 224, 112, 28, 204, 120, 0,
X  252, 180, 48, 48, 48, 48, 120, 0,
X  204, 204, 204, 204, 204, 204, 252, 0,
X  204, 204, 204, 204, 204, 120, 48, 0,
X  198, 198, 198, 214, 254, 238, 198, 0,
X  198, 198, 108, 56, 56, 108, 198, 0,
X  204, 204, 204, 120, 48, 48, 120, 0,
X  254, 198, 140, 24, 50, 102, 254, 0,
X  120, 96, 96, 96, 96, 96, 120, 0,
X  192, 96, 48, 24, 12, 6, 2, 0,
X  120, 24, 24, 24, 24, 24, 120, 0,
X  16, 56, 108, 198, 0, 0, 0, 0,
X  0, 0, 0, 0, 0, 0, 0, 255,
X  48, 48, 24, 0, 0, 0, 0, 0,
X  0, 0, 120, 12, 124, 204, 118, 0,
X  224, 96, 96, 124, 102, 102, 220, 0,
X  0, 0, 120, 204, 192, 204, 120, 0,
X  28, 12, 12, 124, 204, 204, 118, 0,
X  0, 0, 120, 204, 252, 192, 120, 0,
X  56, 108, 96, 240, 96, 96, 240, 0,
X  0, 0, 118, 204, 204, 124, 12, 248,
X  224, 96, 108, 118, 102, 102, 230, 0,
X  48, 0, 112, 48, 48, 48, 120, 0,
X  12, 0, 12, 12, 12, 204, 204, 120,
X  224, 96, 102, 108, 120, 108, 230, 0,
X  112, 48, 48, 48, 48, 48, 120, 0,
X  0, 0, 204, 254, 254, 214, 198, 0,
X  0, 0, 248, 204, 204, 204, 204, 0,
X  0, 0, 120, 204, 204, 204, 120, 0,
X  0, 0, 220, 102, 102, 124, 96, 240,
X  0, 0, 118, 204, 204, 124, 12, 30,
X  0, 0, 220, 118, 102, 96, 240, 0,
X  0, 0, 124, 192, 120, 12, 248, 0,
X  16, 48, 124, 48, 48, 52, 24, 0,
X  0, 0, 204, 204, 204, 204, 118, 0,
X  0, 0, 204, 204, 204, 120, 48, 0,
X  0, 0, 198, 214, 254, 254, 108, 0,
X  0, 0, 198, 108, 56, 108, 198, 0,
X  0, 0, 204, 204, 204, 124, 12, 248,
X  0, 0, 252, 152, 48, 100, 252, 0,
X  28, 48, 48, 224, 48, 48, 28, 0,
X  24, 24, 24, 0, 24, 24, 24, 0,
X  224, 48, 48, 28, 48, 48, 224, 0,
X  118, 220, 0, 0, 0, 0, 0, 0,
X  0, 16, 56, 108, 198, 198, 254, 0,
X  120, 204, 192, 204, 120, 24, 12, 120,
X  0, 204, 0, 204, 204, 204, 126, 0,
X  28, 0, 120, 204, 252, 192, 120, 0,
X  126, 195, 60, 6, 62, 102, 63, 0,
X  204, 0, 120, 12, 124, 204, 126, 0,
X  224, 0, 120, 12, 124, 204, 126, 0,
X  48, 48, 120, 12, 124, 204, 126, 0,
X  0, 0, 120, 192, 192, 120, 12, 56,
X  126, 195, 60, 102, 126, 96, 60, 0,
X  204, 0, 120, 204, 252, 192, 120, 0,
X  224, 0, 120, 204, 252, 192, 120, 0,
X  204, 0, 112, 48, 48, 48, 120, 0,
X  124, 198, 56, 24, 24, 24, 60, 0,
X  224, 0, 112, 48, 48, 48, 120, 0,
X  198, 56, 108, 198, 254, 198, 198, 0,
X  48, 48, 0, 120, 204, 252, 204, 0,
X  28, 0, 252, 96, 120, 96, 252, 0,
X  0, 0, 127, 12, 127, 204, 127, 0,
X  62, 108, 204, 254, 204, 204, 206, 0,
X  120, 204, 0, 120, 204, 204, 120, 0,
X  0, 204, 0, 120, 204, 204, 120, 0,
X  0, 224, 0, 120, 204, 204, 120, 0,
X  120, 204, 0, 204, 204, 204, 126, 0,
X  0, 224, 0, 204, 204, 204, 126, 0,
X  0, 204, 0, 204, 204, 124, 12, 248,
X  195, 24, 60, 102, 102, 60, 24, 0,
X  204, 0, 204, 204, 204, 204, 120, 0,
X  24, 24, 126, 192, 192, 126, 24, 24,
X  56, 108, 100, 240, 96, 230, 252, 0,
X  204, 204, 120, 252, 48, 252, 48, 48,
X  248, 204, 204, 250, 198, 207, 198, 199,
X  14, 27, 24, 60, 24, 24, 216, 112,
X  28, 0, 120, 12, 124, 204, 126, 0,
X  56, 0, 112, 48, 48, 48, 120, 0,
X  0, 28, 0, 120, 204, 204, 120, 0,
X  0, 28, 0, 204, 204, 204, 126, 0,
X  0, 248, 0, 248, 204, 204, 204, 0,
X  252, 0, 204, 236, 252, 220, 204, 0,
X  60, 108, 108, 62, 0, 126, 0, 0,
X  56, 108, 108, 56, 0, 124, 0, 0,
X  48, 0, 48, 96, 192, 204, 120, 0,
X  0, 0, 0, 252, 192, 192, 0, 0,
X  0, 0, 0, 252, 12, 12, 0, 0,
X  195, 198, 204, 222, 51, 102, 204, 15,
X  195, 198, 204, 219, 55, 111, 207, 3,
X  24, 24, 0, 24, 24, 24, 24, 0,
X  0, 51, 102, 204, 102, 51, 0, 0,
X  0, 204, 102, 51, 102, 204, 0, 0,
X  34, 136, 34, 136, 34, 136, 34, 136,
X  85, 170, 85, 170, 85, 170, 85, 170,
X  219, 119, 219, 238, 219, 119, 219, 238,
X  24, 24, 24, 24, 24, 24, 24, 24,
X  24, 24, 24, 24, 248, 24, 24, 24,
X  24, 24, 248, 24, 248, 24, 24, 24,
X  54, 54, 54, 54, 246, 54, 54, 54,
X  0, 0, 0, 0, 254, 54, 54, 54,
X  0, 0, 248, 24, 248, 24, 24, 24,
X  54, 54, 246, 6, 246, 54, 54, 54,
X  54, 54, 54, 54, 54, 54, 54, 54,
X  0, 0, 254, 6, 246, 54, 54, 54,
X  54, 54, 246, 6, 254, 0, 0, 0,
X  54, 54, 54, 54, 254, 0, 0, 0,
X  24, 24, 248, 24, 248, 0, 0, 0,
X  0, 0, 0, 0, 248, 24, 24, 24,
X  24, 24, 24, 24, 31, 0, 0, 0,
X  24, 24, 24, 24, 255, 0, 0, 0,
X  0, 0, 0, 0, 255, 24, 24, 24,
X  24, 24, 24, 24, 31, 24, 24, 24,
X  0, 0, 0, 0, 255, 0, 0, 0,
X  24, 24, 24, 24, 255, 24, 24, 24,
X  24, 24, 31, 24, 31, 24, 24, 24,
X  54, 54, 54, 54, 55, 54, 54, 54,
X  54, 54, 55, 48, 63, 0, 0, 0,
X  0, 0, 63, 48, 55, 54, 54, 54,
X  54, 54, 247, 0, 255, 0, 0, 0,
X  0, 0, 255, 0, 247, 54, 54, 54,
X  54, 54, 55, 48, 55, 54, 54, 54,
X  0, 0, 255, 0, 255, 0, 0, 0,
X  54, 54, 247, 0, 247, 54, 54, 54,
X  24, 24, 255, 0, 255, 0, 0, 0,
X  54, 54, 54, 54, 255, 0, 0, 0,
X  0, 0, 255, 0, 255, 24, 24, 24,
X  0, 0, 0, 0, 255, 54, 54, 54,
X  54, 54, 54, 54, 63, 0, 0, 0,
X  24, 24, 31, 24, 31, 0, 0, 0,
X  0, 0, 31, 24, 31, 24, 24, 24,
X  0, 0, 0, 0, 63, 54, 54, 54,
X  54, 54, 54, 54, 255, 54, 54, 54,
X  24, 24, 255, 24, 255, 24, 24, 24,
X  24, 24, 24, 24, 248, 0, 0, 0,
X  0, 0, 0, 0, 31, 24, 24, 24,
X  255, 255, 255, 255, 255, 255, 255, 255,
X  0, 0, 0, 0, 255, 255, 255, 255,
X  240, 240, 240, 240, 240, 240, 240, 240,
X  15, 15, 15, 15, 15, 15, 15, 15,
X  255, 255, 255, 255, 0, 0, 0, 0,
X  0, 0, 118, 220, 200, 220, 118, 0,
X  0, 120, 204, 248, 204, 248, 192, 192,
X  0, 252, 204, 192, 192, 192, 192, 0,
X  0, 254, 108, 108, 108, 108, 108, 0,
X  252, 204, 96, 48, 96, 204, 252, 0,
X  0, 0, 126, 216, 216, 216, 112, 0,
X  0, 102, 102, 102, 102, 124, 96, 192,
X  0, 118, 220, 24, 24, 24, 24, 0,
X  252, 48, 120, 204, 204, 120, 48, 252,
X  56, 108, 198, 254, 198, 108, 56, 0,
X  56, 108, 198, 198, 108, 108, 238, 0,
X  28, 48, 24, 124, 204, 204, 120, 0,
X  0, 0, 126, 219, 219, 126, 0, 0,
X  6, 12, 126, 219, 219, 126, 96, 192,
X  56, 96, 192, 248, 192, 96, 56, 0,
X  120, 204, 204, 204, 204, 204, 204, 0,
X  0, 252, 0, 252, 0, 252, 0, 0,
X  48, 48, 252, 48, 48, 0, 252, 0,
X  96, 48, 24, 48, 96, 0, 252, 0,
X  24, 48, 96, 48, 24, 0, 252, 0,
X  14, 27, 27, 24, 24, 24, 24, 24,
X  24, 24, 24, 24, 24, 216, 216, 112,
X  48, 48, 0, 252, 0, 48, 48, 0,
X  0, 118, 220, 0, 118, 220, 0, 0,
X  56, 108, 108, 56, 0, 0, 0, 0,
X  0, 0, 0, 24, 24, 0, 0, 0,
X  0, 0, 0, 0, 24, 0, 0, 0,
X  15, 12, 12, 12, 236, 108, 60, 28 };
END_OF_FILE
if test 8959 -ne `wc -c <'banner-12/font.c'`; then
    echo shar: \"'banner-12/font.c'\" unpacked with wrong size!
fi
# end of 'banner-12/font.c'
fi
if test -f 'cursive-01/font.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'cursive-01/font.c'\"
else
echo shar: Extracting \"'cursive-01/font.c'\" \(11667 characters\)
sed "s/^X//" >'cursive-01/font.c' <<'END_OF_FILE'
X/* CURSIVE FONT FILE
X *
X * This font is copyrighted by Jan Wolter.  See notes in "cursive.c".
X *
X * Several of the letters are rather ugly, but the wonder is not how
X * well it sings.  A few uppercase letters are a bit too tall.  The
X * font has to some extent been chosen to make my name look good to me.
X * Those of you with different names will have to take pot luck, or fix
X * it to taste.  Editing this file must be done with some care.  The
X * numbers on the defines must match the index numbers of the letter
X * in the list[] structure.  The six numbers after the character are how
X * many blank spaces must be added to the beginning of each of the six
X * scan lines to make them line up.  The last two numbers are the scan
X * line numbers in which the character is connected to the preceeding and
X * succeeding characters.  -1 means it isn't.  There are two versions of
X * each lower case letter, one with the line coming in on line 2, and one
X * with the line coming in on line 3.
X */
X
X#include "cursive.h"
X
struct letter list[] = {
X
X#define LA  0		/* a type 1 */ 
X	{ {
X	"",
X	"",
X	 "__.",
X	"(_/|",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	3,3
X	},
X
X#define LB  1		/* b type 1 */
X	{ {
X	"",
X	  "/",
X 	 "/_",
X	"/_)",
X	"",
X	""
X	},
X	{0,2,1,0,0,0},
X	3,2
X	},
X
X#define LC  2		/* c type 1 */
X	{ {
X	"",
X	"",
X	 "_.",
X	"(_",
X	"",
X	""}
X	,
X	{0,0,1,0,0,0},
X	3,3
X	},
X
X#define LD  3		/* d type 1 */
X	{ {
X	"",
X	    "/",
X	 "__/",
X	"(_/",
X	"",
X	""
X	},
X	{0,4,1,0,0,0},
X	3,3
X	},
X
X#define LE  4		/* e type 1 */
X	{ {
X	"",
X	"",
X	 "_",
X	"</",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	3,3
X	},
X
X#define LF  5		/* f type 1 */
X	{ {
X	"",
X	    "/)",
X	   "// ",
X	  "//",
X	 "/>",
X	"</ "
X	},
X	{0,4,3,2,1,0},
X	3,3
X	},
X
X#define LG  6		/* g type 1 */
X	{ {
X	"",
X	"",
X	 "_,",
X	"(_)",
X	 "/|",
X	"|/"
X	},
X	{0,0,1,0,1,0},
X	3,3
X	},
X
X#define LH  7		/* h type 1 */
X	{ {
X	"",
X	  "/",
X	 "/_",
X	"/ /",
X	"",
X	""
X	},
X	{0,2,1,0,0,0},
X	3,3
X	},
X
X#define LI  8		/* i type 1 */
X	{ {
X	"",
X	"",
X	 "o",
X	"<",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	3,3
X	},
X
X#define LJ  9		/* j type 1 */
X	{ {
X	"",
X	"",
X	    "o",
X	   "/",
X	  "/",
X	"-'"
X	},
X	{0,0,4,3,2,0},
X	3,3
X	},
X
X#define LK 10		/* k type 1 */
X	{ {
X	"",
X	  "/",
X	 "/_ ",
X	"/ <",
X	"",
X	""
X	},
X	{0,2,1,0,0,0},
X	3,3
X	},
X
X#define LL 11		/* l type 1 */
X	{ {
X	   "_",
X	  "//",
X	 "//",
X	"</",
X	"",
X	""
X	},
X	{3,2,1,0,0,0},
X	3,3
X	},
X
X#define LM 12		/* m type 1 */
X	{ {
X	"",
X	"",
X	 "______",
X	"/ / / <",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	3,3
X	},
X
X#define LN 13		/* n type 1 */
X	{ {
X	"",
X	"",
X	 "____",
X	"/ / <",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	3,3
X	},
X
X#define LO 14		/* o type 1 */
X	{ {
X	"",
X	"",
X	 "_",
X	"(_)",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	3,2
X	},
X
X#define LP 15		/* p type 1 */
X	{ {
X	"",
X	"",
X	   "_",
X	  "/_)",
X	 "/",
X	"'"
X	},
X	{0,0,3,2,1,0},
X	3,3
X	},
X
X#define LQ 16		/* q type 1 */
X	{ {
X	"",
X	"",
X	 "_,",
X	"(_)",
X	 "/>",
X	"|/"
X	},
X	{0,0,1,0,1,0},
X	3,3
X	},
X
X#define LR 17		/* r type 1 */
X	{ {
X	"",
X	"",
X	 "__",
X	"/ (",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	3,3
X	},
X
X#define LS 18		/* s type 1 */
X	{ {
X	"",
X	"",
X	 "_",
X	"/_)",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	3,3
X	},
X
X#define LT 19		/* t type 1 */
X	{ {
X	"",
X	 "_/_",
X	 "/",
X	"<_",
X	"",
X	""
X	},
X	{0,1,1,0,0,0},
X	3,3
X	},
X
X#define LU 20		/* u type 1 */
X	{ {
X	"",
X	"",
X	 ". .",
X	"(_/",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	3,3
X	},
X
X#define LV 21		/* v type 1 */
X	{ {
X	"",
X	"",
X	", ",
X	"\\/",
X	"",
X	""
X	},
X	{0,0,0,0,0,0},
X	3,2
X	},
X
X#define LW 22		/* w type 1 */
X	{ {
X	"",
X	"",
X	 ", , ,",
X	"(_(_/",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	3,3
X	},
X
X#define LX 23		/* x type 1 */
X	{ {
X	"",
X	"",
X	 "_.,",
X	"/ /\\",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	3,3
X	},
X
X#define LY 24		/* y type 1 */
X	{ {
X	"",
X	"",
X	 "__  ,",
X	"/ (_/",
X	   "/",
X	  "'"
X	 },
X	{0,0,1,0,3,2},
X	3,3
X	},
X
X#define LZ 25		/* z type 1 */
X	{ {
X	"",
X	"",
X	 "__.",
X	"/  |",
X	  "(|",
X	""
X	},
X	{0,0,1,0,2,0},
X	3,3
X	},
X
X#define NA 26		/* a type 2 */
X	{ {
X	"",
X	"",
X	 "__.",
X	"(_/|",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	2,3
X	},
X
X#define NB 27		/* b type 2 */
X	{ {
X	"",
X	  "/",
X	 "/_",
X	"/_)",
X	"",
X	""
X	},
X	{0,2,1,0,0,0},
X	2,2
X	},
X
X#define NC 28		/* c type 2 */
X	{ {
X	"",
X	"",
X	"__.",
X	"(_",
X	"",
X	""
X	},
X	{0,0,0,0,0,0},
X	2,3
X	},
X
X#define ND 29		/* d type 2 */
X	{ {
X	"",
X	    "/",
X	"___/",
X	"(_/",
X	"",
X	""
X	},
X	{0,4,0,0,0,0},
X	2,3
X	},
X
X#define NE 30		/* e type 2 */
X	{ {
X	"",
X	"",
X	 "/>",
X	"(_",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	2,3
X	},
X
X#define NF 31		/* f type 2 */
X	{ {
X	"",
X	    "/)",
X	   "//",
X	  "/_",
X	 "/>",
X	"</"
X	},
X	{0,4,3,2,1,0},
X	2,3
X	},
X
X#define NG 32		/* g type 2 */
X	{ {
X	"",
X	"",
X	"__,",
X	"(_)",
X	 "/|",
X	"|/"
X	},
X	{0,0,0,0,1,0},
X	2,3
X	},
X
X#define NH 33		/* h type 2 */
X	{ {
X	"",
X	  "/",
X	 "/_",
X	"/ /",
X	"",
X	""
X	},
X	{0,2,1,0,0,0},
X	2,3
X	},
X
X#define NI 34		/* i type 2 */
X	{ {
X	"",
X	"",
X	 "o",
X	"<_",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	2,3
X	},
X
X#define NJ 35		/* j type 2 */
X	{ {
X	"",
X	"",
X	   "_o",
X	   "/_",
X	  "/",
X	"-'"
X	},
X	{0,0,3,3,2,0},
X	2,3
X	},
X
X#define NK 36		/* k type 2 */
X	{ {
X	"",
X	  "/",
X	 "/_",
X	"/ <",
X	"",
X	""
X	},
X	{0,2,1,0,0,0},
X	2,3
X	},
X
X#define NL 37		/* l type 2 */
X	{ {
X	  "_",
X	 "//",
X	"|/",
X	 "\\",
X	"",
X	""
X	},
X	{2,1,0,1,0,0},
X	2,3
X	},
X
X#define NM 38		/* m type 2 */
X	{ {
X	"",
X	"",
X	"_______",
X	"/ / / <",
X	"",
X	""
X	},
X	{0,0,0,0,0,0},
X	2,3
X	},
X
X#define NN 39		/* n type 2 */
X	{ {
X	"",
X	"",
X	"_____",
X	"/ / <",
X	"",
X	""
X	},
X	{0,0,0,0,0,0},
X	2,3
X	},
X
X#define NO 40		/* o type 2 */
X	{ {
X	"",
X	"",
X	"___",
X	"(_)",
X	"",
X	""
X	},
X	{0,0,0,0,0,0},
X	2,2
X	},
X
X#define NP 41		/* p type 2 */
X	{ {
X	"",
X	"",
X	  "__",
X	  "/_)",
X	 "/",
X	"'"
X	},
X	{0,0,2,2,1,0},
X	2,3
X	},
X
X#define NQ 42		/* q type 2 */
X	{ {
X	"",
X	"",
X	"__,",
X	"(_)",
X	 "/>",
X	"|/"
X	},
X	{0,0,0,0,1,0},
X	2,3
X	},
X
X#define NR 43		/* r type 2 */
X	{ {
X	"",
X	"",
X	",_",
X	 "(",
X	"",
X	""
X	},
X	{0,0,0,1,0,0},
X	2,3
X	},
X
X#define NS 44		/* s type 2 */
X	{ {
X	"",
X	"",
X	"___ ",
X	 "\\_)_",
X	"",
X	""
X	},
X	{0,0,0,1,0,0},
X	2,3
X	},
X
X#define NT 45		/* t type 2 */
X	{ {
X	"",
X	 "_/_",
X	"_/",
X	"(_",
X	"",
X	""
X	},
X	{0,1,0,0,0,0},
X	2,3
X	},
X
X#define NU 46		/* u type 2 */
X	{ {
X	"",
X	"",
X	"_. .",
X	"(_/",
X	"",
X	""
X	},
X	{0,0,0,0,0,0},
X	2,3
X	},
X
X#define NV 47		/* v type 2 */
X	{ {
X	"",
X	"",
X	"  .",
X	"\\/",
X	"",
X	""
X	},
X	{0,0,0,0,0,0},
X	2,3
X	},
X
X#define NW 48		/* w type 2 */
X	{ {
X	"",
X	"",
X	"_, , ,",
X	"(_(_/",
X	"",
X	""
X	},
X	{0,0,0,0,0,0},
X	2,3
X	},
X
X#define NX 49		/* x type 2 */
X	{ {
X	"",
X	"",
X	"_.,",
X	 "/\\",
X	"",
X	""
X	},
X	{0,0,0,1,0,0},
X	2,3
X	},
X
X#define NY 50		/* y type 2 */
X	{ {
X	"",
X	"",
X	"_  ,",
X	"(_/__",
X	 "/",
X	"'"
X	},
X	{0,0,0,0,1,0},
X	2,3
X	},
X
X#define NZ 51		/* z type 2 */
X	{ {
X	"",
X	"",
X	"__.",
X	  "|",
X	 "(|",
X	""
X	},
X	{0,0,0,2,1,0},
X	2,3
X	},
X
X#define UA 52		/* A */
X	{ {
X	   "__",
X	  "/  )",
X	 "/--/",
X	"/  (",
X	"",
X	""
X	},
X	{3,2,1,0,0,0},
X	3,3
X	},
X
X#define UB 53		/* B  */
X	{ {
X	   "__",
X	  "/  )",
X	 "/--<",
X	"/___/",
X	"",
X	""
X	},
X	{3,2,1,0,0,0},
X	3,3
X	},
X
X#define UC 54		/* C */
X	{ {
X	   "__",
X	  "/  )",
X	 "/",
X	"(__/",
X	"",
X	""
X	},
X	{3,2,1,0,0,0},
X	-1,-1
X	},
X
X#define UD 55		/* D  */
X	{ {
X	   "__",
X	  "/  )",
X	 "/  /",
X	"/__/",
X	"",
X	""
X	},
X	{3,2,1,0,0,0},
X	3,3
X	},
X
X#define UE 56		/* E */
X	{ {
X	   "__",
X	  "/  `",
X	 "/--",
X	"(___,",
X	"",
X	""
X	},
X	{3,2,1,0,0,0},
X	-1,-1
X	},
X
X#define UF 57		/* F */
X	{ {
X	   "_____",
X	   " /  '",
X	 ",-/-,",
X	"(_/",
X	"",
X	""
X	},
X	{3,3,1,0,0,0},
X	-1,-1
X	},
X
X#define UG 58		/* G */
X	{ {
X	  "()  ,",
X	  "/`-'|",
X	 "/   /",
X	"/__-<",
X	"",
X	""
X	},
X	{2,2,1,0,0,0},
X	-1,3
X	},
X
X#define UH 59		/* H */
X	{ {
X	 "_    ,",
X	"' )  /",
X	 "/--/",
X	"/  (",
X	"",
X	""
X	},
X	{1,0,1,0,0,0},
X	-1,3
X	},
X
X#define UI 60		/* I */
X	{ {
X	     "_",
X	    "| )",
X	",---|/",
X	 "\\_/ \\",
X	"",
X	""
X	},
X	{5,4,0,1,0,0},
X	-1,3
X	},
X
X#define UJ 61		/* J */
X	{ {
X	  "___",
X	 "(   >",
X	  "__/",
X	 "/ /",
X	"<_/",
X	""
X	},
X	{2,1,2,1,0,0},
X	-1,2
X	},
X
X#define UK 62		/* K */
X	{ {
X	 "_   ,",
X	"' ) /",
X	 "/-<",
X	"/   )",
X	"",
X	""
X	},
X	{1,0,1,0,0,0},
X	-1,-1
X	},
X
X#define UL 63		/* L */
X	{ {
X	   "_",
X	 "_//",
X	 "/",
X	"/___",
X	"",
X	""
X	},
X	{3,1,1,0,0,0},
X	-1,-1
X	},
X
X#define UM 64		/* M */
X	{ {
X	 "_ _ _",
X	"' ) ) )",
X	 "/ / /",
X	"/ ' (",
X	"",
X	""
X	},
X	{1,0,1,0,0,0},
X	-1,3
X	},
X
X#define UN 65		/* N */
X	{ {
X	 "_ __",
X	"' )  )",
X	 "/  /",
X	"/  (",
X	"",
X	""
X	},
X	{1,0,1,0,0,0},
X	-1,3
X	},
X
X#define UO 66		/* O */
X	{ {
X	   "__",
X	  "/ ')",
X	 "/  /",
X	"(__/",
X	"",
X	""
X	},
X	{3,2,1,0,0,0},
X	-1,-1
X	},
X
X#define UP 67		/* P */
X	{ {
X	 "_ __",
X	"' )  )",
X	 "/--'",
X	"/",
X	"",
X	""
X	},
X	{1,0,1,0,0,0},
X	-1,-1
X	},
X
X#define UQ 68		/* Q */
X	{ {
X	   "__",
X	  "/  )",
X	 "/  /",
X	"(_\\/",
X	   "`",
X	""
X	},
X	{3,2,1,0,3,0},
X	-1,-1
X	},
X
X#define UR 69		/* R */
X	{ {
X	 "_ __",
X	"' )  )",
X	 "/--'",
X	"/  \\",
X	"",
X	""
X	},
X	{1,0,1,0,0,0},
X	-1,3
X	},
X
X#define US 70		/* S */
X	{ {
X	  "()",
X	  "/\\",
X	 "/  )",
X	"/__/_",
X	"",
X	""
X	},
X	{2,2,1,0,0,0},
X	-1,3
X	},
X
X#define UT 71		/* T */
X	{ {
X	  "______",
X	    "/  ",
X	 "--/",
X	"(_/",
X	"",
X	""
X	},
X	{2,4,1,0,0,0},
X	-1,-1
X	},
X
X#define UU 72		/* U */
X	{ {
X	 "_    _",
X	"' )  /",
X	 "/  /",
X	"(__/",
X	"",
X	""
X	},
X	{1,0,1,0,0,0},
X	-1,0
X	},
X
X#define UV 73		/* V */
X	{ {
X	 "_    ",
X	"' )  /",
X	 "(  /",
X	  "\\/",
X	"",
X	""
X	},
X	{1,0,1,2,0,0},
X	-1,0
X	},
X
X#define UW 74		/* W */
X	{ {
X	 "_     ",
X	"' )   /",
X	 "/ / /",
X	"(_(_/",
X	"",
X	""
X	},
X	{1,0,1,0,0,0},
X	-1,0
X	},
X
X#define UX 75		/* X */
X	{ {
X	 "_   ,",
X	"' \\ /",
X	   "X",
X	  "/ \\",
X	"",
X	""
X	},
X	{1,0,3,2,0,0},
X	-1,3
X	},
X
X#define UY 76		/* Y */
X	{ {
X	 "_    ,",
X	"' )  /",
X	 "/  /",
X	"(__/",
X	 "//",
X	"(/"
X	},
X	{1,0,1,0,1,0},
X	-1,3
X	},
X
X#define UZ 77		/* Z */
X	{ {
X	"___",
X	  "/",
X	 "/",
X	"/__",
X	"",
X	""
X	},
X	{0,2,1,0,0,0},
X	-1,-1
X	},
X
X#define PE 78	 	/* ! */
X	{ {
X	   "/",
X	  "/",
X	 "'",
X	"o",
X	"",
X	""
X	},
X	{3,2,1,0,0,0},
X	-1,-1
X	},
X
X#define PU 79		/* " */
X	{ {
X	"o o",
X	"' '",
X	"",
X	"",
X	"",
X	""
X	},
X	{0,0,0,0,0,0},
X	-1,-1
X	},
X
X#define PX 80		/* # */
X	{ {
X	   "/ /",
X	 "-/-/-",
X	"-/-/-",
X	"/ /",
X	"",
X	""
X	},
X	{3,1,0,0,0,0},
X	-1,-1
X	},
X
X#define PK 81		/* $ */
X	{ {
X	  ",-/-",
X	 "(_/",
X	  "/ )",
X	"-/-'",
X	"",
X	""
X	},
X	{2,1,2,0,0,0},
X	-1,-1
X	},
X
X#define PF 82		/* ' */
X	{ {
X	"o",
X	"'",
X	"",
X	"",
X	"",
X	""
X	},
X	{0,0,0,0,0,0},
X	-1,-1
X	},
X
X#define PC 83		/* , */
X	{ {
X	"",
X	"",
X	"",
X	"o",
X	"'",
X	""
X	},
X	{0,0,0,0,0,0},
X	-1,-1
X	},
X
X#define PM 84		/* - */
X	{ {
X	"",
X	"",
X	"---",
X	"",
X	"",
X	""
X	},
X	{0,0,0,0,0,0},
X	-1,-1
X	},
X
X#define PP 85		/* . */
X	{ {
X	"",
X	"",
X	"",
X	"o",
X	"",
X	""
X	},
X	{0,0,0,0,0,0},
X	-1,-1
X	},
X
X#define PD 86		/* : */
X	{ {
X	"",
X	  "o",
X	"",
X	"o",
X	"",
X	""
X	},
X	{0,2,0,0,0,0},
X	-1,-1
X	},
X
X#define PS 87		/* ; */
X	{ {
X	"",
X	  "o",
X	"",
X	"o",
X	"'",
X	""
X	},
X	{0,2,0,0,0,0},
X	-1,-1
X	},
X
X#define PQ 88		/* ? */
X	{ {
X	  "__",
X	  "__)",
X	 "/",
X	"o",
X	"",
X	""
X	},
X	{2,2,1,0,0,0},
X	-1,-1
X	},
X
X#define PB 89		/* ` */
X	{ {
X	"o",
X	"`",
X	"",
X	"",
X	"",
X	""
X	},
X	{0,0,0,0,0,0},
X	-1,-1
X	}
X	};
X
short code1[] = {
X     /*  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15 */
X	XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX,
X	XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX,
X	SP, PE, PU, PX, PK, XX, XX, PF, XX, XX, XX, XX, PC, PM, PP, XX,
X	SN, SN, SN, SN, SN, SN, SN, SN, SN, SN, PD, PS, XX, XX, XX, PQ,
X	XX, UA, UB, UC, UD, UE, UF, UG, UH, UI, UJ, UK, UL, UM, UN, UO,
X	UP, UQ, UR, US, UT, UU, UV, UW, UX, UY, UZ, XX, XX, XX, XX, ST,
X	PB, LA, LB, LC, LD, LE, LF, LG, LH, LI, LJ, LK, LL, LM, LN, LO,
X	LP, LQ, LR, LS, LT, LU, LV, LW, LX, LY, LZ, XX, XX, XX, XX, XX };
X
short code2[] = {
X     /*  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15 */
X	XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX,
X	XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX,
X	SP, PE, PU, PX, PK, XX, XX, PF, XX, XX, XX, XX, PC, PM, PP, XX,
X	SN, SN, SN, SN, SN, SN, SN, SN, SN, SN, PD, PS, XX, XX, XX, PQ,
X	XX, UA, UB, UC, UD, UE, UF, UG, UH, UI, UJ, UK, UL, UM, UN, UO,
X	UP, UQ, UR, US, UT, UU, UV, UW, UX, UY, UZ, XX, XX, XX, XX, ST,
X	PB, NA, NB, NC, ND, NE, NF, NG, NH, NI, NJ, NK, NL, NM, NN, NO,
X	NP, NQ, NR, NS, NT, NU, NV, NW, NX, NY, NZ, XX, XX, XX, XX, XX };
END_OF_FILE
if test 11667 -ne `wc -c <'cursive-01/font.c'`; then
    echo shar: \"'cursive-01/font.c'\" unpacked with wrong size!
fi
# end of 'cursive-01/font.c'
fi
if test -f 'cursive-02/font.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'cursive-02/font.c'\"
else
echo shar: Extracting \"'cursive-02/font.c'\" \(11797 characters\)
sed "s/^X//" >'cursive-02/font.c' <<'END_OF_FILE'
X/* CURSIVE FONT FILE
X *
X * This font is copyrighted by Jan Wolter.  See notes in "cursive.c".
X *
X * Several of the letters are rather ugly, but the wonder is not how
X * well it sings.  A few uppercase letters are a bit too tall.  The
X * font has to some extent been chosen to make my name look good to me.
X * Those of you with different names will have to take pot luck, or fix
X * it to taste.  Editing this file must be done with some care.  The
X * numbers on the defines must match the index numbers of the letter
X * in the list[] structure.  The six numbers after the character are how
X * many blank spaces must be added to the beginning of each of the six
X * scan lines to make them line up.  The last two numbers are the scan
X * line numbers in which the character is connected to the preceeding and
X * succeeding characters.  -1 means it isn't.  There are two versions of
X * each lower case letter, one with the line coming in on line 2, and one
X * with the line coming in on line 3.
X */
X
X/*
X * $Log:	font.c,v $
X * Revision 1.2  87/12/05  09:19:30  hyc
X * Cleaned up some of the characters, made them nicer looking.
X * To me, anyway.
X * 
X */
X
X#include "cursive.h"
X
struct letter list[] = {
X
X#define LA  0		/* a type 1 */ 
X	{ {
X	"",
X	"",
X	 "__.",
X	"(_(",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	3,3
X	},
X
X#define LB  1		/* b type 1 */
X	{ {
X	"",
X	  "/",
X 	 "/_",
X	"/_)",
X	"",
X	""
X	},
X	{0,2,1,0,0,0},
X	3,2
X	},
X
X#define LC  2		/* c type 1 */
X	{ {
X	"",
X	"",
X	 "_.",
X	"(_",
X	"",
X	""}
X	,
X	{0,0,1,0,0,0},
X	3,3
X	},
X
X#define LD  3		/* d type 1 */
X	{ {
X	"",
X	    "/",
X	 "__/",
X	"(_(",
X	"",
X	""
X	},
X	{0,4,1,0,0,0},
X	3,3
X	},
X
X#define LE  4		/* e type 1 */
X	{ {
X	"",
X	"",
X	 "_",
X	"(<",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	3,3
X	},
X
X#define LF  5		/* f type 1 */
X	{ {
X	"",
X	    "/)",
X	   "// ",
X	  "//",
X	 "/>",
X	"</ "
X	},
X	{0,4,3,2,1,0},
X	3,3
X	},
X
X#define LG  6		/* g type 1 */
X	{ {
X	"",
X	"",
X	 "_,",
X	"(_)",
X	 "/|",
X	"|/"
X	},
X	{0,0,1,0,1,0},
X	3,3
X	},
X
X#define LH  7		/* h type 1 */
X	{ {
X	"",
X	  "/",
X	 "/_",
X	"/ /",
X	"",
X	""
X	},
X	{0,2,1,0,0,0},
X	3,3
X	},
X
X#define LI  8		/* i type 1 */
X	{ {
X	"",
X	"",
X	 "o",
X	"(",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	3,3
X	},
X
X#define LJ  9		/* j type 1 */
X	{ {
X	"",
X	"",
X	    "o",
X	   "/",
X	  "/",
X	"-'"
X	},
X	{0,0,4,3,2,0},
X	3,3
X	},
X
X#define LK 10		/* k type 1 */
X	{ {
X	"",
X	  "/",
X	 "/_ ",
X	"/ <",
X	"",
X	""
X	},
X	{0,2,1,0,0,0},
X	3,3
X	},
X
X#define LL 11		/* l type 1 */
X	{ {
X	"",
X	  "/)",
X	 "//",
X	"(/",
X	"",
X	""
X	},
X	{0,2,1,0,0,0},
X	3,3
X	},
X
X#define LM 12		/* m type 1 */
X	{ {
X	"",
X	"",
X	 "____",
X	"/) ) )",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	3,3
X	},
X
X#define LN 13		/* n type 1 */
X	{ {
X	"",
X	"",
X	 "__",
X	"/) )",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	3,3
X	},
X
X#define LO 14		/* o type 1 */
X	{ {
X	"",
X	"",
X	 "_",
X	"(_)",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	3,2
X	},
X
X#define LP 15		/* p type 1 */
X	{ {
X	"",
X	"",
X	   "_",
X	  "/_)",
X	 "/",
X	"'"
X	},
X	{0,0,3,2,1,0},
X	3,3
X	},
X
X#define LQ 16		/* q type 1 */
X	{ {
X	"",
X	"",
X	 "_,",
X	"(_)",
X	 "/>",
X	"|/"
X	},
X	{0,0,1,0,1,0},
X	3,3
X	},
X
X#define LR 17		/* r type 1 */
X	{ {
X	"",
X	"",
X	 "__",
X	"/ (",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	3,3
X	},
X
X#define LS 18		/* s type 1 */
X	{ {
X	"",
X	"",
X	 "_",
X	"/_)",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	3,3
X	},
X
X#define LT 19		/* t type 1 */
X	{ {
X	"",
X	 "_/_",
X	 "/",
X	"(_",
X	"",
X	""
X	},
X	{0,1,1,0,0,0},
X	3,3
X	},
X
X#define LU 20		/* u type 1 */
X	{ {
X	"",
X	"",
X	 ". .",
X	"(_/",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	3,3
X	},
X
X#define LV 21		/* v type 1 */
X	{ {
X	"",
X	"",
X	", ",
X	"\\/",
X	"",
X	""
X	},
X	{0,0,0,0,0,0},
X	3,2
X	},
X
X#define LW 22		/* w type 1 */
X	{ {
X	"",
X	"",
X	 ", , ,",
X	"(_(_/",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	3,3
X	},
X
X#define LX 23		/* x type 1 */
X	{ {
X	"",
X	"",
X	 "_.,",
X	"/ /\\",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	3,3
X	},
X
X#define LY 24		/* y type 1 */
X	{ {
X	"",
X	"",
X	 ", ,",
X	"(_/",
X	 "/",
X	"'"
X	 },
X	{0,0,1,0,1,0},
X	3,3
X	},
X
X#define LZ 25		/* z type 1 */
X	{ {
X	"",
X	"",
X	 "__.",
X	"/  |",
X	  "(|",
X	""
X	},
X	{0,0,1,0,2,0},
X	3,3
X	},
X
X#define NA 26		/* a type 2 */
X	{ {
X	"",
X	"",
X	 "__.",
X	"(_(",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	2,3
X	},
X
X#define NB 27		/* b type 2 */
X	{ {
X	"",
X	  "/",
X	 "/_",
X	"/_)",
X	"",
X	""
X	},
X	{0,2,1,0,0,0},
X	2,2
X	},
X
X#define NC 28		/* c type 2 */
X	{ {
X	"",
X	"",
X	"__.",
X	"(_",
X	"",
X	""
X	},
X	{0,0,0,0,0,0},
X	2,3
X	},
X
X#define ND 29		/* d type 2 */
X	{ {
X	"",
X	    "/",
X	"___/",
X	"(_(",
X	"",
X	""
X	},
X	{0,4,0,0,0,0},
X	2,3
X	},
X
X#define NE 30		/* e type 2 */
X	{ {
X	"",
X	"",
X	 "_",
X	"(<",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	2,3
X	},
X
X#define NF 31		/* f type 2 */
X	{ {
X	"",
X	    "/)",
X	   "//",
X	  "/_",
X	 "/>",
X	"</"
X	},
X	{0,4,3,2,1,0},
X	2,3
X	},
X
X#define NG 32		/* g type 2 */
X	{ {
X	"",
X	"",
X	"__,",
X	"(_)",
X	 "/|",
X	"|/"
X	},
X	{0,0,0,0,1,0},
X	2,3
X	},
X
X#define NH 33		/* h type 2 */
X	{ {
X	"",
X	  "/",
X	 "/_",
X	"/ /",
X	"",
X	""
X	},
X	{0,2,1,0,0,0},
X	2,3
X	},
X
X#define NI 34		/* i type 2 */
X	{ {
X	"",
X	"",
X	 "o",
X	"(_",
X	"",
X	""
X	},
X	{0,0,1,0,0,0},
X	2,3
X	},
X
X#define NJ 35		/* j type 2 */
X	{ {
X	"",
X	"",
X	   "_o",
X	   "/_",
X	  "/",
X	"-'"
X	},
X	{0,0,3,3,2,0},
X	2,3
X	},
X
X#define NK 36		/* k type 2 */
X	{ {
X	"",
X	  "/",
X	 "/_",
X	"/ <",
X	"",
X	""
X	},
X	{0,2,1,0,0,0},
X	2,3
X	},
X
X#define NL 37		/* l type 2 */
X	{ {
X	  "_",
X	 "//",
X	"|/",
X	 "\\",
X	"",
X	""
X	},
X	{2,1,0,1,0,0},
X	2,3
X	},
X
X#define NM 38		/* m type 2 */
X	{ {
X	"",
X	"",
X	"_____",
X	"/) ) )",
X	"",
X	""
X	},
X	{0,0,0,0,0,0},
X	2,3
X	},
X
X#define NN 39		/* n type 2 */
X	{ {
X	"",
X	"",
X	"___",
X	"/) )",
X	"",
X	""
X	},
X	{0,0,0,0,0,0},
X	2,3
X	},
X
X#define NO 40		/* o type 2 */
X	{ {
X	"",
X	"",
X	"___",
X	"(_)",
X	"",
X	""
X	},
X	{0,0,0,0,0,0},
X	2,2
X	},
X
X#define NP 41		/* p type 2 */
X	{ {
X	"",
X	"",
X	  "__",
X	  "/_)",
X	 "/",
X	"'"
X	},
X	{0,0,2,2,1,0},
X	2,3
X	},
X
X#define NQ 42		/* q type 2 */
X	{ {
X	"",
X	"",
X	"__,",
X	"(_)",
X	 "/>",
X	"|/"
X	},
X	{0,0,0,0,1,0},
X	2,3
X	},
X
X#define NR 43		/* r type 2 */
X	{ {
X	"",
X	"",
X	",_",
X	 "(",
X	"",
X	""
X	},
X	{0,0,0,1,0,0},
X	2,3
X	},
X
X#define NS 44		/* s type 2 */
X	{ {
X	"",
X	"",
X	"___ ",
X	 "\\_)_",
X	"",
X	""
X	},
X	{0,0,0,1,0,0},
X	2,3
X	},
X
X#define NT 45		/* t type 2 */
X	{ {
X	"",
X	 "_/_",
X	"_/",
X	"(_",
X	"",
X	""
X	},
X	{0,1,0,0,0,0},
X	2,3
X	},
X
X#define NU 46		/* u type 2 */
X	{ {
X	"",
X	"",
X	"_. .",
X	"(_/",
X	"",
X	""
X	},
X	{0,0,0,0,0,0},
X	2,3
X	},
X
X#define NV 47		/* v type 2 */
X	{ {
X	"",
X	"",
X	"  .",
X	"\\/",
X	"",
X	""
X	},
X	{0,0,0,0,0,0},
X	2,3
X	},
X
X#define NW 48		/* w type 2 */
X	{ {
X	"",
X	"",
X	"_, , ,",
X	"(_(_/",
X	"",
X	""
X	},
X	{0,0,0,0,0,0},
X	2,3
X	},
X
X#define NX 49		/* x type 2 */
X	{ {
X	"",
X	"",
X	"_.,",
X	 "/\\",
X	"",
X	""
X	},
X	{0,0,0,1,0,0},
X	2,3
X	},
X
X#define NY 50		/* y type 2 */
X	{ {
X	"",
X	"",
X	"_  ,",
X	"(_/__",
X	 "/",
X	"'"
X	},
X	{0,0,0,0,1,0},
X	2,3
X	},
X
X#define NZ 51		/* z type 2 */
X	{ {
X	"",
X	"",
X	"__.",
X	  "|",
X	 "(|",
X	""
X	},
X	{0,0,0,2,1,0},
X	2,3
X	},
X
X#define UA 52		/* A */
X	{ {
X	   "__",
X	  "/  )",
X	 "/--/",
X	"/  (",
X	"",
X	""
X	},
X	{3,2,1,0,0,0},
X	3,3
X	},
X
X#define UB 53		/* B  */
X	{ {
X	   "__",
X	  "/  )",
X	 "/--<",
X	"/___/",
X	"",
X	""
X	},
X	{3,2,1,0,0,0},
X	3,3
X	},
X
X#define UC 54		/* C */
X	{ {
X	   "__",
X	  "/  )",
X	 "/",
X	"(__/",
X	"",
X	""
X	},
X	{3,2,1,0,0,0},
X	-1,-1
X	},
X
X#define UD 55		/* D  */
X	{ {
X	   "__",
X	  "/  )",
X	 "/  /",
X	"/__/",
X	"",
X	""
X	},
X	{3,2,1,0,0,0},
X	3,3
X	},
X
X#define UE 56		/* E */
X	{ {
X	   "__",
X	  "/  `",
X	 "/--",
X	"(___,",
X	"",
X	""
X	},
X	{3,2,1,0,0,0},
X	-1,-1
X	},
X
X#define UF 57		/* F */
X	{ {
X	   "_____",
X	   " /  '",
X	 ",-/-,",
X	"(_/",
X	"",
X	""
X	},
X	{3,3,1,0,0,0},
X	-1,-1
X	},
X
X#define UG 58		/* G */
X	{ {
X	  "()  ,",
X	  "/`-'|",
X	 "/   /",
X	"/__-<",
X	"",
X	""
X	},
X	{2,2,1,0,0,0},
X	-1,3
X	},
X
X#define UH 59		/* H */
X	{ {
X	 "_    ,",
X	"' )  /",
X	 "/--/",
X	"/  (",
X	"",
X	""
X	},
X	{1,0,1,0,0,0},
X	-1,3
X	},
X
X#define UI 60		/* I */
X	{ {
X	  "__",
X	 "(  )",
X	   "/",
X	"\\_/",
X	"",
X	""
X	},
X	{2,1,3,0,0,0},
X	-1,-1
X	},
X
X#define UJ 61		/* J */
X	{ {
X	  "___",
X	 "(   )",
X	  "__/",
X	 "/ /",
X	"(_/",
X	""
X	},
X	{2,1,2,1,0,0},
X	-1,2
X	},
X
X#define UK 62		/* K */
X	{ {
X	 "_   ,",
X	"' ) /",
X	 "/-<",
X	"/   )",
X	"",
X	""
X	},
X	{1,0,1,0,0,0},
X	-1,-1
X	},
X
X#define UL 63		/* L */
X	{ {
X	   "_",
X	 "_//",
X	 "/",
X	"/___",
X	"",
X	""
X	},
X	{3,1,1,0,0,0},
X	-1,-1
X	},
X
X#define UM 64		/* M */
X	{ {
X	 "_ _ _",
X	"' ) ) )",
X	 "/ / /",
X	"/ ' (",
X	"",
X	""
X	},
X	{1,0,1,0,0,0},
X	-1,3
X	},
X
X#define UN 65		/* N */
X	{ {
X	 "_ __",
X	"' )  )",
X	 "/  /",
X	"/  (",
X	"",
X	""
X	},
X	{1,0,1,0,0,0},
X	-1,3
X	},
X
X#define UO 66		/* O */
X	{ {
X	   "__",
X	  "/ ')",
X	 "/  /",
X	"(__/",
X	"",
X	""
X	},
X	{3,2,1,0,0,0},
X	-1,-1
X	},
X
X#define UP 67		/* P */
X	{ {
X	 "_ __",
X	"' )  )",
X	 "/--'",
X	"/",
X	"",
X	""
X	},
X	{1,0,1,0,0,0},
X	-1,-1
X	},
X
X#define UQ 68		/* Q */
X	{ {
X	   "__",
X	  "/  )",
X	 "/  /",
X	"(_\\/",
X	   "`",
X	""
X	},
X	{3,2,1,0,3,0},
X	-1,-1
X	},
X
X#define UR 69		/* R */
X	{ {
X	 "_ __",
X	"' )  )",
X	 "/--'",
X	"/  \\",
X	"",
X	""
X	},
X	{1,0,1,0,0,0},
X	-1,3
X	},
X
X#define US 70		/* S */
X	{ {
X	  "()",
X	  "/\\",
X	 "/  )",
X	"/__/_",
X	"",
X	""
X	},
X	{2,2,1,0,0,0},
X	-1,3
X	},
X
X#define UT 71		/* T */
X	{ {
X	  "______",
X	    "/  ",
X	 "--/",
X	"(_/",
X	"",
X	""
X	},
X	{2,4,1,0,0,0},
X	-1,-1
X	},
X
X#define UU 72		/* U */
X	{ {
X	 "_    _",
X	"' )  /",
X	 "/  /",
X	"(__/",
X	"",
X	""
X	},
X	{1,0,1,0,0,0},
X	-1,0
X	},
X
X#define UV 73		/* V */
X	{ {
X	 "_    ",
X	"' )  /",
X	 "(  /",
X	  "\\/",
X	"",
X	""
X	},
X	{1,0,1,2,0,0},
X	-1,0
X	},
X
X#define UW 74		/* W */
X	{ {
X	 "_     ",
X	"' )   /",
X	 "/ / /",
X	"(_(_/",
X	"",
X	""
X	},
X	{1,0,1,0,0,0},
X	-1,0
X	},
X
X#define UX 75		/* X */
X	{ {
X	 "_   ,",
X	"' \\ /",
X	   "X",
X	  "/ \\",
X	"",
X	""
X	},
X	{1,0,3,2,0,0},
X	-1,3
X	},
X
X#define UY 76		/* Y */
X	{ {
X	 "_    ,",
X	"' )  /",
X	 "/  /",
X	"(__/",
X	 "//",
X	"(/"
X	},
X	{1,0,1,0,1,0},
X	-1,3
X	},
X
X#define UZ 77		/* Z */
X	{ {
X	"___",
X	  "/",
X	 "/",
X	"/__",
X	"",
X	""
X	},
X	{0,2,1,0,0,0},
X	-1,-1
X	},
X
X#define PE 78	 	/* ! */
X	{ {
X	   "/",
X	  "/",
X	 "'",
X	"o",
X	"",
X	""
X	},
X	{3,2,1,0,0,0},
X	-1,-1
X	},
X
X#define PU 79		/* " */
X	{ {
X	"o o",
X	"' '",
X	"",
X	 " ",
X	"",
X	""
X	},
X	{0,0,0,1,0,0},
X	-1,-1
X	},
X
X#define PX 80		/* # */
X	{ {
X	   "/ /",
X	 "-/-/-",
X	"-/-/-",
X	"/ /",
X	"",
X	""
X	},
X	{3,1,0,0,0,0},
X	-1,-1
X	},
X
X#define PK 81		/* $ */
X	{ {
X	  ",-/-",
X	 "(_/",
X	  "/ )",
X	"-/-'",
X	"",
X	""
X	},
X	{2,1,2,0,0,0},
X	-1,-1
X	},
X
X#define PF 82		/* ' */
X	{ {
X	 "o",
X	 "'",
X	"",
X	" ",
X	"",
X	""
X	},
X	{1,1,0,0,0,0},
X	-1,-1
X	},
X
X#define PC 83		/* , */
X	{ {
X	"",
X	"",
X	"",
X	"o",
X	"'",
X	""
X	},
X	{0,0,0,0,0,0},
X	-1,-1
X	},
X
X#define PM 84		/* - */
X	{ {
X	"",
X	"",
X	"---",
X	 " ",
X	"",
X	""
X	},
X	{0,0,0,1,0,0},
X	-1,-1
X	},
X
X#define PP 85		/* . */
X	{ {
X	"",
X	"",
X	"",
X	"o",
X	"",
X	""
X	},
X	{0,0,0,0,0,0},
X	-1,-1
X	},
X
X#define PD 86		/* : */
X	{ {
X	"",
X	  "o",
X	"",
X	"o",
X	"",
X	""
X	},
X	{0,2,0,0,0,0},
X	-1,-1
X	},
X
X#define PS 87		/* ; */
X	{ {
X	"",
X	  "o",
X	"",
X	"o",
X	"'",
X	""
X	},
X	{0,2,0,0,0,0},
X	-1,-1
X	},
X
X#define PQ 88		/* ? */
X	{ {
X	  "__",
X	  "__)",
X	 "/",
X	"o",
X	"",
X	""
X	},
X	{2,2,1,0,0,0},
X	-1,-1
X	},
X
X#define PB 89		/* ` */
X	{ {
X	  "o",
X	  "`",
X	"",
X	" ",
X	"",
X	""
X	},
X	{2,2,0,0,0,0},
X	-1,-1
X	}
X	};
X
short code1[] = {
X     /*  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15 */
X	XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX,
X	XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX,
X	SP, PE, PU, PX, PK, XX, XX, PF, XX, XX, XX, XX, PC, PM, PP, XX,
X	SN, SN, SN, SN, SN, SN, SN, SN, SN, SN, PD, PS, XX, XX, XX, PQ,
X	XX, UA, UB, UC, UD, UE, UF, UG, UH, UI, UJ, UK, UL, UM, UN, UO,
X	UP, UQ, UR, US, UT, UU, UV, UW, UX, UY, UZ, XX, XX, XX, XX, ST,
X	PB, LA, LB, LC, LD, LE, LF, LG, LH, LI, LJ, LK, LL, LM, LN, LO,
X	LP, LQ, LR, LS, LT, LU, LV, LW, LX, LY, LZ, XX, XX, XX, XX, XX };
X
short code2[] = {
X     /*  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15 */
X	XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX,
X	XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX,
X	SP, PE, PU, PX, PK, XX, XX, PF, XX, XX, XX, XX, PC, PM, PP, XX,
X	SN, SN, SN, SN, SN, SN, SN, SN, SN, SN, PD, PS, XX, XX, XX, PQ,
X	XX, UA, UB, UC, UD, UE, UF, UG, UH, UI, UJ, UK, UL, UM, UN, UO,
X	UP, UQ, UR, US, UT, UU, UV, UW, UX, UY, UZ, XX, XX, XX, XX, ST,
X	PB, NA, NB, NC, ND, NE, NF, NG, NH, NI, NJ, NK, NL, NM, NN, NO,
X	NP, NQ, NR, NS, NT, NU, NV, NW, NX, NY, NZ, XX, XX, XX, XX, XX };
END_OF_FILE
if test 11797 -ne `wc -c <'cursive-02/font.c'`; then
    echo shar: \"'cursive-02/font.c'\" unpacked with wrong size!
fi
# end of 'cursive-02/font.c'
fi
echo shar: End of archive 3 \(of 7\).
cp /dev/null ark3isdone
MISSING=""
for I in 1 2 3 4 5 6 7 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 7 archives.
    rm -f ark[1-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
