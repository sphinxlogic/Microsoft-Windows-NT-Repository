Newsgroups: comp.sources.unix
From: fkk@stasys.sta.sub.org (Frank Kaefer)
Subject: v26i141: banners - a collection of banner programs, V1.1, Part01/07
Sender: unix-sources-moderator@vix.com
Approved: paul@vix.com

Submitted-By: fkk@stasys.sta.sub.org (Frank Kaefer)
Posting-Number: Volume 26, Issue 141
Archive-Name: banners-1.1/part01

[ this is yet another last-minute author update, which caused me to cancel
  v26i{109,110,111,112,113} so that i could submit the updated version.  since
  this updated version won't fit into five issues, i am publishing it with the
  next available in-sequence issue numbers and abandoning 109-113.	--vix ]

[ banner is an unusual posting in that it contains no man pages.  i am
  publishing it anyway, since as a collection of related software (all
  are banner programs of one kind or another), i believe that it is
  useful even if it doesn't build up into a shiny package of binaries
  and man pages.  comments on this kind of posting are encouraged.  
  this kind of posting, in general, is discouraged.			--vix ]

I am sending you a 5 part shell archive and would like to ask you to post it
in comp.sources.unix. The shell archive contains a collection of banner
programs that might be interesting for many netters.

According to Paul A Vixie :
> 
> if you send me a banner update before volume 26 closes, i'll post it
> immediately.  otherwise it'll go at the end of volume 27.
>

Ok, I'll send it to you in a few moments - I didn't make manualpages but
I think there's now a nice README and a simple Makefile.

	Cheers,
	Frank
	-- 
	| Frank Kaefer | fkk@stasys.sta.sub.org | Starnberg, Germany |
	| Compuserve: 72427,2101  |  Internet: frank.kaefer@Sun.COM  |
	| unido!sunde!fkaefer     |      fkaefer@Germany.Sun.COM     |

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 1 (of 7)."
# Contents:  MANIFEST Makefile README banner-01 banner-01/makefile
#   banner-02 banner-03 banner-03/Makefile banner-03/README
#   banner-03/banr.f0 banner-03/banr.f1 banner-03/banr.f2.uu banner-04
#   banner-05 banner-05/3db.c banner-05/Banner.doc banner-05/kban.hlp
#   banner-05/lban.dat banner-05/leb.c banner-05/sban.dat
#   banner-05/seb.c banner-06 banner-06/banner.6 banner-07 banner-08
#   banner-09 banner-09/Makefile banner-09/TODO banner-09/block.c
#   banner-10 banner-10/scripto.alt banner-10/scripto.doc
#   banner-10/scripto.pas banner-10/scripto.set banner-11
#   banner-11/mb.6 banner-12 banner-12/Makefile banner-12/README
#   banner-12/banner.c banner-12/flags.h banner-12/main.c banner-13
#   cursive-01 cursive-01/Makefile cursive-01/README
#   cursive-01/cursive.6 cursive-01/cursive.h cursive-02
#   cursive-02/Makefile cursive-02/cursive.6 cursive-02/cursive.h
#   gothic
# Wrapped by vixie@gw.home.vix.com on Sun Apr 11 23:19:19 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'MANIFEST' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MANIFEST'\"
else
echo shar: Extracting \"'MANIFEST'\" \(2607 characters\)
sed "s/^X//" >'MANIFEST' <<'END_OF_FILE'
X   File Name		Archive #	Description
X-----------------------------------------------------------
X MANIFEST                   1	
X Makefile                   1	
X README                     1	
X banner-01                  1	
X banner-01/banner.c         2	
X banner-01/font.c           3	
X banner-01/makefile         1	
X banner-02                  1	
X banner-02/banner.c         4	
X banner-03                  1	
X banner-03/Makefile         1	
X banner-03/README           1	
X banner-03/banr.c           3	
X banner-03/banr.f0          1	
X banner-03/banr.f1          1	
X banner-03/banr.f2.uu       1	
X banner-04                  1	
X banner-04/sysvbanner.c     2	
X banner-05                  1	
X banner-05/3db.c            1	
X banner-05/Banner.doc       1	
X banner-05/block.c          3	
X banner-05/cursive.c        5	
X banner-05/kban.c           2	
X banner-05/kban.hlp         1	
X banner-05/kbandat.c        4	
X banner-05/lban.c           2	
X banner-05/lban.dat         1	
X banner-05/leb.c            1	
X banner-05/sban.c           2	
X banner-05/sban.dat         1	
X banner-05/seb.c            1	
X banner-05/vban.c           6	
X banner-06                  1	
X banner-06/banner.6         1	
X banner-06/banner.c         7	
X banner-07                  1	
X banner-07/banner.c         2	
X banner-08                  1	
X banner-08/banner.c         3	
X banner-08/banner.c-org     3	
X banner-09                  1	
X banner-09/Makefile         1	
X banner-09/TODO             1	
X banner-09/block.c          1	
X banner-09/data.c           4	
X banner-10                  1	
X banner-10/scripto.alt      1	
X banner-10/scripto.doc      1	
X banner-10/scripto.pas      1	
X banner-10/scripto.set      1	
X banner-11                  1	
X banner-11/MB_Font.uu       2	
X banner-11/Read.Me          2	
X banner-11/mb.6             1	
X banner-11/mb.c             2	
X banner-12                  1	
X banner-12/COPYING          4	
X banner-12/Makefile         1	
X banner-12/README           1	
X banner-12/banner.c         1	
X banner-12/flags.h          1	
X banner-12/font.c           3	
X banner-12/main.c           1	
X banner-13                  1	
X banner-13/cyrban.c         2	
X cursive-01                 1	
X cursive-01/Makefile        1	
X cursive-01/README          1	
X cursive-01/cursive.6       1	
X cursive-01/cursive.c       2	
X cursive-01/cursive.h       1	
X cursive-01/font.c          3	
X cursive-02                 1	
X cursive-02/Makefile        1	
X cursive-02/cursive.6       1	
X cursive-02/cursive.c       2	
X cursive-02/cursive.h       1	
X cursive-02/font.c          3	
X gothic                     1	
X gothic/gothic.c            4	
END_OF_FILE
if test 2607 -ne `wc -c <'MANIFEST'`; then
    echo shar: \"'MANIFEST'\" unpacked with wrong size!
fi
# end of 'MANIFEST'
fi
if test -f 'Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Makefile'\"
else
echo shar: Extracting \"'Makefile'\" \(3859 characters\)
sed "s/^X//" >'Makefile' <<'END_OF_FILE'
X#
X# simple Makefile for banners collection
X#
X
CC = cc
X
CFLAGS = -O
X
BANNERS = bin/banner-01 bin/banner-02 bin/banner-03 bin/banner-04 \
X          bin/banner-05 bin/banner-06 bin/banner-07 bin/banner-08 \
X          bin/banner-09 bin/banner-10 bin/banner-11 bin/banner-12 \
X          bin/banner-13 bin/cursive-01 bin/cursive-02 bin/gothic
X
all: bin $(BANNERS)
X	@echo
X	@echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
X	@echo "+        Now look into the bin directory for the executables and           +"
X	@echo "+        select the banner(s) you like most (and maybe install             +"
X	@echo "+        them in a place like /usr/local/bin).                             +"
X	@echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
X	@echo
X
clean:
X	rm -rf bin
X
bin:
X	mkdir bin
X
bin/banner-01: bin
X	cc -c $(CFLAGS) banner-01/banner.c -o bin/banner-01-1.o
X	cc -c $(CFLAGS) banner-01/font.c -o bin/banner-01-2.o
X	cc $(CFLAGS) bin/banner-01-1.o bin/banner-01-2.o -o bin/banner-01
X	rm -f bin/banner-01-1.o bin/banner-01-2.o
X
bin/banner-02: bin
X	cc $(CFLAGS) banner-02/banner.c -o bin/banner-02
X
bin/banner-03: bin
X	cc $(CFLAGS) banner-03/banr.c -o bin/banner-03 -ltermcap
X
bin/banner-04: bin
X	cc $(CFLAGS) banner-04/sysvbanner.c -o bin/banner-04
X
bin/banner-05: bin
X	cc $(CFLAGS) -Ibanner-05 banner-05/block.c -o bin/banner-05-1
X	cc $(CFLAGS) -Ibanner-05 banner-05/cursive.c -o bin/banner-05-2
X	cc $(CFLAGS) -Ibanner-05 banner-05/kban.c -o bin/banner-05-3
X	cc $(CFLAGS) -Ibanner-05 banner-05/lban.c -o bin/banner-05-4
X	cc $(CFLAGS) -Ibanner-05 banner-05/sban.c -o bin/banner-05-5
X	cc $(CFLAGS) -Ibanner-05 banner-05/vban.c -o bin/banner-05-6
X	cc $(CFLAGS) -Ibanner-05 banner-05/3db.c -o bin/banner-05-7
X	cc $(CFLAGS) -Ibanner-05 banner-05/leb.c -o bin/banner-05-8
X	cc $(CFLAGS) -Ibanner-05 banner-05/seb.c -o bin/banner-05-9
X	@touch bin/banner-05
X
bin/banner-06: bin
X	cc $(CFLAGS) banner-06/banner.c -o bin/banner-06
X
bin/banner-07: bin
X	cc $(CFLAGS) banner-07/banner.c -o bin/banner-07
X
bin/banner-08: bin
X	cc $(CFLAGS) banner-08/banner.c -o bin/banner-08
X
bin/banner-09: bin
X	cc -c $(CFLAGS) banner-09/block.c -o bin/banner-09-1.o
X	cc -c $(CFLAGS) banner-09/data.c -o bin/banner-09-2.o
X	cc $(CFLAGS) bin/banner-09-1.o bin/banner-09-2.o -o bin/banner-09
X	rm -f bin/banner-09-1.o bin/banner-09-2.o
X
bin/banner-10: bin
X	@echo "*** Please use your favourite pascal compiler to make banner-10. ***"
X	@touch bin/banner-10
X
bin/banner-11: bin
X	@cp banner-11/MB_Font.uu bin/MB_Font.uu
X	@cd bin ; uudecode MB_Font.uu ; rm -f MB_Font.uu ; mv MB_Font banner-11.font
X	cc $(CFLAGS) banner-11/mb.c -o bin/banner-11
X	@echo "*** Usage of banner-11: bin/banner-11 -o=bin/banner-11.font. ***"
X	@echo "Or alternatively copy bin/banner-11.font to /etc/MB_Font."
X
bin/banner-12: bin
X	cc -c $(CFLAGS) -Ibanner-12 banner-12/main.c -o bin/banner-12-1.o
X	cc -c $(CFLAGS) -Ibanner-12 banner-12/banner.c -o bin/banner-12-2.o
X	cc -c $(CFLAGS) -Ibanner-12 banner-12/font.c -o bin/banner-12-3.o
X	cc $(CFLAGS) bin/banner-12-1.o bin/banner-12-2.o bin/banner-12-3.o -o bin/banner-12
X	rm -f bin/banner-12-1.o bin/banner-12-2.o bin/banner-12-3.o
X
bin/banner-13: bin
X	cc $(CFLAGS) banner-13/cyrban.c -o bin/banner-13
X
bin/cursive-01: bin
X	cc -c $(CFLAGS) -Icursive-01 cursive-01/cursive.c -o bin/cursive-01-1.o
X	cc -c $(CFLAGS) -Icursive-01 cursive-01/font.c -o bin/cursive-01-2.o
X	cc $(CFLAGS) bin/cursive-01-1.o bin/cursive-01-2.o -o bin/cursive-01
X	rm -f bin/cursive-01-1.o bin/cursive-01-2.o
X
bin/cursive-02: bin
X	cc -c $(CFLAGS) -Icursive-02 cursive-02/cursive.c -o bin/cursive-02-1.o
X	cc -c $(CFLAGS) -Icursive-02 cursive-02/font.c -o bin/cursive-02-2.o
X	cc $(CFLAGS) bin/cursive-02-1.o bin/cursive-02-2.o -o bin/cursive-02
X	rm -f bin/cursive-02-1.o bin/cursive-02-2.o
X
bin/gothic: bin
X	cc $(CFLAGS) gothic/gothic.c -o bin/gothic
END_OF_FILE
if test 3859 -ne `wc -c <'Makefile'`; then
    echo shar: \"'Makefile'\" unpacked with wrong size!
fi
# end of 'Makefile'
fi
if test -f 'README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'README'\"
else
echo shar: Extracting \"'README'\" \(19994 characters\)
sed "s/^X//" >'README' <<'END_OF_FILE'
X
X            _-_ _,,
X               -/  )    _
X              ~||_<    < \, \\/\\ \\/\\  _-_  ,._-_  _-_,
X               || \\   /-|| || || || || || \\  ||   ||_.
X               ,/--|| (( || || || || || ||/    ||    ~ ||
X              _--_-'   \/\\ \\ \\ \\ \\ \\,/   \\,  ,-_-
X             (
X
X********************************************************************************
X*              BANNERS - the ultimative banner program collection              *
X*                   (created and maintained by Frank Kaefer)                   *
X********************************************************************************
X
This is banners version 1.1.
X
The sources you find in this directory tree are different from other
source packages: this directory holds the source to several different
X"banner" programs. These banner programms all serve the same purpose
as the "normal" unix banner(1) programm: print banners to stdout. But
there is a big difference between banner(1) and these banner programs.
The banner programs in this directory are far more flexible and have
many nice features. So if you allways wanted a better banner program,
this is what you have been waiting for!
X
History:
The idea of putting together a banner collection was born some years ago.
Several smaller collections were posted to alt.sources and a call for
contribution of banner programs was posted to many other groups.
Banners version 1.0 was posted to comp.sources.unix: v26i109 - v26i113.
Banners version 1.1 will also be submitted to comp.sources.unix.
X
In this package you should find the following files:
X
Makefile	a simple makefile to compile all banners
README		the file you are just reading
banner-01/	see below
banner-02/	see below
banner-03/	see below
banner-04/	see below
banner-05/	see below
banner-06/	see below
banner-07/	see below
banner-08/	see below
banner-09/	see below
banner-10/	see below
banner-11/	see below
banner-12/	see below
banner-13/	see below
cursive-01/	see below
cursive-02/	see below
gothic/		see below
X
Some of these banner programs do not contain any manual page, so I am giving
you a description of all these programs in this file.
X
If you have a nice banner program, please contact me. Also if you have
found a bug in these banner programs, I'd like to encourage you to send
me not only a note about the bug but also a fix for it (preferably in
context diff format).
X
XEmail: frank.kaefer@Germany.Sun.COM (<- please use this address)
X       (frank.kaefer@sta.sub.org, frank.kaefer@sta.com)
X
Here is a more detailed description of the banner programs:
X===========================================================
X
SYNOPSIS: how to start the banner program
OPTIONS: command line options of the banner
DESCRIPTION: some more info on this banner
HISTORY: some background information
XEXAMPLES: sample banner output
X
banner-01
X---------
SYNOPSIS: banner [<opts>] {<string>} [<opts>]
OPTIONS:
X          -i          prints italic 
X          -d          double size 
X          -c=<char>   character 
X          -s          use same character 
X          -z          read strings from standard input 
X          -z=<file>   read strings from <file> 
DESCRIPTION: This banner can be used as a drop in replacement of the standard
X             banner.
HISTORY: This was the very first banner on OS-9/68000 and it also compiled
X         fine on Unix, so it was one of the few programs that transitioned
X         with me from OS-9/68000 to Unix. Banner-12 is based on this banner.
XEXAMPLES:
X% bin/banner-01 Test
X
X******                     *    
X* ** *                    **    
X  **     ****    *****   *****  
X  **    **  **  **        **    
X  **    ******   ****     **    
X  **    **          **    ** *  
X ****    ****   *****      **   
X
X% bin/banner-01 -si Test
X
X       TTTTTT                     t    
X      T TT T                    tt    
X       TT     eeee    sssss   ttttt  
X      TT    ee  ee  ss        tt    
X     TT    eeeeee   ssss     tt    
X    TT    ee          ss    tt t  
X  TTTT    eeee   sssss      tt   
X
X% bin/banner-01 -d Test
X
X************                                          **        
X************                                          **        
X**  ****  **                                        ****        
X**  ****  **                                        ****        
X    ****          ********        **********      **********    
X    ****          ********        **********      **********    
X    ****        ****    ****    ****                ****        
X    ****        ****    ****    ****                ****        
X    ****        ************      ********          ****        
X    ****        ************      ********          ****        
X    ****        ****                    ****        ****  **    
X    ****        ****                    ****        ****  **    
X  ********        ********      **********            ****      
X  ********        ********      **********            ****      
X
X
banner-02
X---------
SYNOPSIS: banner /<option1> /<opt2> /<opt3> <text>
OPTIONS:
X /?          : Help text in German
X /h          : Help text in German
X /S:<breite> : Width of banner output, Default: 80
X /D:<path>   : Specify different font file
X /F:<path>   : banner the specified file
X /#          : Use same char for bannering a letter
X /P          : Read text from stdin
X /U          : Convert all to capital letters
X /R          : Reverse banner
X /I          : Italics
X /Cxy!z      : x = "Front-Color", y = "Background-Color" (optional)
X             : "!" = Enable shadowing (optional), x = Shadow char (optional)
DESCRIPTION: Although this banner uses a DOS-like option syntax it is one
X             of the most powerful banners in this collection.
HISTORY:
XEXAMPLES:
X% bin/banner-02 Test
X ######                   ##
X # ## #                   ##
X   ##     ####    ####   #####
X   ##    ##  ##  ##       ##
X   ##    ######   ####    ##
X   ##    ##          ##   ## ##
X  ####    ####   #####     ###
X
bin/banner-02 /c\+\_\!\` Test
X_++++++`__________________++`___
X_+`++`+`__________________++`___
X___++`____++++`___++++`__+++++`_
X___++`___++`_++`_++`______++`___
X___++`___++++++`__++++`___++`___
X___++`___++`_________++`__++`++`
X__++++`___++++`__+++++`____+++`_
X________________________________
X
X
banner-03
X---------
SYNOPSIS: banr [-n]
OPTIONS:
X          -n  Forces no underlining to be used even if the capability exists
DESCRIPTION: banr prints its standard input in large letters (but smaller than
X             banner(1)) on the standard output
HISTORY: Written by Art Messenger (art@wilbur.coyote.trw.com)
XEXAMPLES:
X% bin/banner-03 -n 
This is a test
X___                                    
X |  |_  . _    . _     _.    |  _  _ | 
X |  | | | \    | \    (_|    | (-' \ | 
X                                       
X
banner-04
X---------
SYNOPSIS: banner <text>
OPTIONS: none
DESCRIPTION: simple but also nice banner
HISTORY:
XEXAMPLES:
X% bin/banner-04 Test
X@@@@@@@
X   @     @@@@@@   @@@@    @@@@@
X   @     @       @          @
X   @     @@@@@    @@@@      @
X   @     @            @     @
X   @     @       @    @     @
X   @     @@@@@@   @@@@      @
X
X
banner-05
X---------
SYNOPSIS:
OPTIONS:
DESCRIPTION: This is a banner collection. Important notice: bin/banner-05 is
X             a zero length touched file, the executables are named
X             banner-05-[1-9]. Banner-05-2 is the same as cursive.
X             Please look at the files in banner-05 for more information.
HISTORY: A banner collection from Han YoonSoo KAIST
XEXAMPLES:
X% bin/banner-05-1 Test
TTTTTTTTTT  EEEEEEEEEE   SSSSSSSS   TTTTTTTTTT  
TTTTTTTTTT  EEEEEEEEEE  SSSSSSSSSS  TTTTTTTTTT  
X    TT      EE          SS       S      TT      
X    TT      EE          SS              TT      
X    TT      EEEEE       SSSSSSSSS       TT      
X    TT      EEEEE        SSSSSSSSS      TT      
X    TT      EE                  SS      TT      
X    TT      EE          S       SS      TT      
X    TT      EEEEEEEEEE  SSSSSSSSSS      TT      
X    TT      EEEEEEEEEE   SSSSSSSS       TT      
X 
X% bin/banner-05-2 Test
X  ______
X    /       _/_
X --/ _  _   /
X(_/ </_/_)_<__
X
X% bin/banner-05-3 Test
X |''||''|                  .  
X    ||      ....   ....  .||. 
X    ||    .|...|| ||. '   ||  
X    ||    ||      . '|..  ||  
X   .||.    '|...' |'..|'  '|.'
X                              
X '''''''' ''''''' '''''' '''''
X
X% bin/banner-05-7 Test
X _______________   __________      _____     _______________ 
X/______________/  /_________/    /____ / \  /______________/ 
X       | |       | |           /|      \ /         | |       
X       | |       | |______    |/ \ _____           | |       
X       | |       |/______/     \ /____ / \         | |       
X       | |       | |                   \ /|        | |       
X       | |       | |_________  / \ _____|/         | |       
X       |/        |/_________/  \ /_____/           |/      
X
X% bin/banner-05-8 Test
X _________   _______    _____    _________  
X|___   ___| |  _____|  / ____|  |___   ___| 
X    | |     | |___    | |____       | |     
X    | |     |  ___|    \____ \      | |     
X    | |     | |_____    ____| |     | |     
X    |_|     |_______|  |_____/      |_|     
X
bin/banner-05-9 Test
X ___         
X  |   _   _|_
X  |  (= S  |_
X
X
banner-06
X---------
SYNOPSIS: banner [-w#] [-d] [-t] message ...
OPTIONS:
DESCRIPTION:
X     Banner prints a large, high quality banner on  the  standard
X     output.  If the message is omitted, it prompts for and reads
X     one line of its standard input.  If -w is given, the  output
X     is  scrunched down from a width of 132 to n , suitable for a
X     narrow terminal.  If n is omitted, it defaults to 80.
X
X     The output should be printed on a hard-copy  device,  up  to
X     132  columns  wide,  with  no  breaks between the pages. The
X     volume is great enough that you may want a printer or a fast
X     hardcopy  terminal,  but  if you are patient, a decwriter or
X     other 300 baud terminal will do.
HISTORY: This is the BSD banner: "@(#)banner.c    4.3 (Berkeley) 6/1/90"
XEXAMPLES:
X% bin/banner-06 a
X                         ######## 
X                     ################ 
X                   #################### 
X                 ########################             ##### 
X                ##########################          ########## 
X               ############################        ############# 
X              ##############################       ############## 
X              #########            #########       ############### 
X             ########                ########       ############## 
X             #######                  #######         ####   ###### 
X             ######                    ######                 ##### 
X             ######                    ######                  #### 
X             ######                    ######                  #### 
X              #####                    #####                   #### 
X              #####                    #####                  ##### 
X               #####                  #####                  ###### 
X                #####                #####                  ####### 
X                 ######            ######                ######### 
X                  ################################################ 
X                ################################################# 
X               ################################################# 
X              ################################################# 
X             ################################################# 
X             ############################################### 
X             ############################################# 
X             ######################################### 
X             ###### 
X             #### 
X             ### 
X             ## 
X
X
banner-07
X---------
SYNOPSIS: banner <text>
OPTIONS: none
DESCRIPTION: And just another small banner variation.
HISTORY:
XEXAMPLES:
X% bin/banner-07 test
X _____  ___  __   _____
X   |   |__  |  \    |  
X   |   |     \__    |  
X   |   |___ \___|   |  
X
X
banner-08
X---------
SYNOPSIS: banner [-h] [-s] <text>
OPTIONS:  -h = convert to hebrew (compile with -DHEBREW)
X          -s = shadow mode on
DESCRIPTION: Nice shadow function.
HISTORY: Submitted by Amos Shapir <amos@cs.huji.ac.il>
XEXAMPLES:
X% ../bin/banner-08 Test
X######                     #    
X# ## #                    ##    
X  ##     ####    #####   #####  
X  ##    ##  ##  ##        ##    
X  ##    ######   ####     ##    
X  ##    ##          ##    ## #  
X ####    ####   #####      ##   
X                                
X% ../bin/banner-08 -s Test
X        _  _ /                        /    
X      _/  /_/                        /    
X         /      __ /     ____/   _  __/  
X        /      /   /  _ /          /    
X       /      ____/   ___ /       /    
X      /    _ /           _/    _ /_/  
X  ____/    ____/   _____/      __/   
X                                    
X
banner-09
X---------
SYNOPSIS: banner <text>
OPTIONS: none
DESCRIPTION: And another banner. Has also nice output.
HISTORY:
XEXAMPLES:
X% bin/banner-09 Test
X @@@@@@@@@                       
X     @                       @   
X     @  @@@@@@@   @@@@@@@ @@@@@@@
X     @ @       @ @           @   
X     @ @@@@@@@@@  @@@@@@@    @   
X     @ @                 @   @  @
X     @  @@@@@@@   @@@@@@@     @@ 
X
X
banner-10
X---------
SYNOPSIS: scripto <text >output
OPTIONS: none
DESCRIPTION: I didn't test this program because I have no pascal compiler,
X             it is included here only for completeness.
HISTORY:
XEXAMPLES: none
X
X
banner-11
X---------
SYNOPSIS:  mb [<opts>] [<text>] [<opts>]
OPTIONS: 
X     -o=<file>      use <file> instead of the default font file.
X     -l             use the 16x8 font instead of the  8x8  font  (producing
X                    larger banners).
X     -w=<num>       print banner with a larger width. Default is 1.
X     -h=<num>       print banner with a larger height. Default is 1.
X     -c             print the banner cursive.
X     -C             print the banner back cursive.
X     -i             invert the banner.
X
X     -f=<char>      use <char> as the foreground character. Default is `*'.
X     -b=<char>      use <char> as  the  background  character.  Default  is
X                    Space.
X     -s             use the character  as  foreground  which  is  currently
X                    printed.
DESCRIPTION: Also a very nice banner program. See also Read.Me.
HISTORY: This banner was written by a good friend of mine. This is
X         the latest version I got from him and although Read.Me says that
X         there is no manpage included, Ulli wrote a small manpage for me.
XEXAMPLES:
X
X% bin/banner-11 -o=bin/banner-11.font Test
X******                     *    
X* ** *                    **    
X  **     ****    *****   *****  
X  **    **  **  **        **    
X  **    ******   ****     **    
X  **    **          **    ** *  
X ****    ****   *****      **   
X                                
X% bin/banner-11 -o=bin/banner-11.font -l Test
X                                
X                                
X                                
X ******                         
X   **                     **    
X   **                     **    
X   **    *****   *****  ******  
X   **   **   ** **   **   **    
X   **   **   ** **        **    
X   **   *******  *****    **    
X   **   **           **   **    
X   **   **      **   **   **    
X   **    ******  *****     ***  
X                                
X                                
X                                
X% bin/banner-11 -o=bin/banner-11.font -C Test  
X******                     *           
X * ** *                    **          
X    **     ****    *****   *****       
X     **    **  **  **        **        
X      **    ******   ****     **       
X       **    **          **    ** *    
X       ****    ****   *****      **    
X                                       
X
banner-12
X---------
SYNOPSIS: banner [<opts>] {<string>} [<opts>]
OPTIONS:
X     -i         prints italic
X     -d         double size
X     -c=<char>  character
X     -s         use same character
X     -z         read strings from standard input
X     -z=<file>  read strings from <file>
DESCRIPTION: This banner program is based on banner-01.
HISTORY:
X1.00 -- Written in 1987 by Wolfgang Ocker, reccoware systems, Puchheim.
X1.01 -- Tested on OS-9/68000, SunOS, System V 3.2.
X1.02 -- Some cleanups by Frank Kaefer (fkk@stasys.sta.sub.org).
X1.10 -- Paul E. Black (paul@delfin.com):
X        - Added a C interface to the banner routine itself so it
X          can be linked with an application.  The user interface now
X          sets flags and calls the C interface.
X        - Letters can be any height, not just single or double.
X        - Multi-height italic are smoother: it shifts one column per
X          printed row rather than one double-column per double-row.
X        - Cleaned up and sped up some of the low level loops some what.
X1.11 -- Banner is now under the GNU GENERAL PUBLIC LICENSE,
X        Version 2, June 1991 (fkk)
XEXAMPLES:
X% bin/banner-12 -d Test
X************                                          **        
X************                                          **        
X**  ****  **                                        ****        
X**  ****  **                                        ****        
X    ****          ********        **********      **********    
X    ****          ********        **********      **********    
X    ****        ****    ****    ****                ****        
X    ****        ****    ****    ****                ****        
X    ****        ************      ********          ****        
X    ****        ************      ********          ****        
X    ****        ****                    ****        ****  **    
X    ****        ****                    ****        ****  **    
X  ********        ********      **********            ****      
X  ********        ********      **********            ****      
X
X
banner-13
X---------
SYNOPSIS: cyrban <text>
OPTIONS: none
DESCRIPTION: Print cyrillic banners.
HISTORY:
XEXAMPLES:
X% bin/banner-13 Test
X #####  #####   ####  ##### 
X   #    #      #        #   
X   #    ####   #        #   
X   #    #      #        #   
X   #    #####   ####    #   
X
X% bin/banner-13 abcdefg
X   #    ####   #   #  #####  #####    #    ##### 
X  # #    #     #   #   #  #  #       ###   #   # 
X #####   ####   ####   #  #  ####   # # #  #     
X #   #   #  #      #   ####  #       ###   #     
X #   #  #####      #  #    # #####    #    #     
X
X
cursive-01
X----------
SYNOPSIS: cursive [ -in ] [ -tn ] [message]
OPTIONS:
DESCRIPTION:
X     Cursive prints a line of text  in  a  rather  crude  cursive
X     script.  It is intended for use mainly for the generation of
X     decorative signatures for electronic mail.  If message  text
X     is  given on the command line, that text is used.  Otherwise
X     the text will be read from standard input up to  an  end  of
X     file.   The -i option sets the minimum spacing between adja-
X     cent characters.  The default is -i1 . The  -t  option  sets
X     the  length  of  the trailing lines on the end of each word.
X     The default is -t1 .
X
X     The '_' character is treated in a special way.   It  may  be
X     inserted  in  the  text anywhere you wish to lengthen a con-
X     necting line between two letters.
HISTORY: Written by Jan Wolter.
XEXAMPLES:
X% bin/cursive-01 Test
X  ______
X    /       _/_
X --/ _  _   /
X(_/ </_/_)_<__
X
X
cursive-02
X----------
SYNOPSIS: see cursive-01
OPTIONS: see cursive-01
DESCRIPTION: see cursive-01 (The difference to cursive-01 is a different
X             character set.)
HISTORY: see cursive-01
XEXAMPLES:
X% bin/cursive-02 Test
X  ______
X    /       _/_
X --/ _  _   /
X(_/ (<_/_)_(__
X
X
gothic
X------
SYNOPSIS: gothic
OPTIONS: none
DESCRIPTION: Print a line of text in Gothic (Black) Script.
HISTORY:
XEXAMPLES:
X% bin/gothic Test
X ___
X-   ---___-               ,
X   (' ||                 ||
X  ((  ||     _-_   _-_, =||=
X ((   ||    || \\ ||_.   ||
X  (( //     ||/    ~ ||  ||
X    -____-  \\,/  ,-_-   \\,
END_OF_FILE
if test 19994 -ne `wc -c <'README'`; then
    echo shar: \"'README'\" unpacked with wrong size!
fi
# end of 'README'
fi
if test ! -d 'banner-01' ; then
    echo shar: Creating directory \"'banner-01'\"
    mkdir 'banner-01'
fi
if test -f 'banner-01/makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-01/makefile'\"
else
echo shar: Extracting \"'banner-01/makefile'\" \(142 characters\)
sed "s/^X//" >'banner-01/makefile' <<'END_OF_FILE'
OBJECTS = banner.o font.o
X
Banner: $(OBJECTS)
X	cc $(OBJECTS) -o Banner
X
banner.o: banner.c
X	cc -c -O banner.c
font.o: font.c
X	cc -c -O font.c
END_OF_FILE
if test 142 -ne `wc -c <'banner-01/makefile'`; then
    echo shar: \"'banner-01/makefile'\" unpacked with wrong size!
fi
# end of 'banner-01/makefile'
fi
if test ! -d 'banner-02' ; then
    echo shar: Creating directory \"'banner-02'\"
    mkdir 'banner-02'
fi
if test ! -d 'banner-03' ; then
    echo shar: Creating directory \"'banner-03'\"
    mkdir 'banner-03'
fi
if test -f 'banner-03/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-03/Makefile'\"
else
echo shar: Extracting \"'banner-03/Makefile'\" \(70 characters\)
sed "s/^X//" >'banner-03/Makefile' <<'END_OF_FILE'
CFLAGS = -O -s
X
all: banr
X
banr:
X	cc $(CFLAGS) banr.c -o $@ -ltermcap
END_OF_FILE
if test 70 -ne `wc -c <'banner-03/Makefile'`; then
    echo shar: \"'banner-03/Makefile'\" unpacked with wrong size!
fi
# end of 'banner-03/Makefile'
fi
if test -f 'banner-03/README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-03/README'\"
else
echo shar: Extracting \"'banner-03/README'\" \(656 characters\)
sed "s/^X//" >'banner-03/README' <<'END_OF_FILE'
banr is a banner program with a relatively small (4 line) font.  It uses the
terminal's underline capability (from termcap) if found and not suppressed
X(with -n) to produce a more readable font.
X
This program is in the public domain.  Do whatever you want with/to it.
X
Installation:
X
X	Compile with "make".
X
X	It was successfully built on SunOS 3.5 - 4.1.1.
X
X	rindex() can be replaced by strrchr() [or throw it away -- it doesn't
X	do anything important].
X
Included are test/demonstration files produced by:
X
X	banr -n < banr.f0 > banr.f1
X	banr < banr.f0 > banr.f2	(on an xterm)
X
X _  __  ___ 
X/_\ |_)  |  
X| | | \  |  
X
Art Messenger
art@wilbur.coyote.trw.com
END_OF_FILE
if test 656 -ne `wc -c <'banner-03/README'`; then
    echo shar: \"'banner-03/README'\" unpacked with wrong size!
fi
# end of 'banner-03/README'
fi
if test -f 'banner-03/banr.f0' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-03/banr.f0'\"
else
echo shar: Extracting \"'banner-03/banr.f0'\" \(101 characters\)
sed "s/^X//" >'banner-03/banr.f0' <<'END_OF_FILE'
ABCDEFGHIJKLM
NOPQRSTUVWXYZ
abcdefghijklm
nopqrstuvwxyz
X0123456789
X!"#$%&'()*+;-./
X:;<=>?@[\]^_`{|}~
END_OF_FILE
if test 101 -ne `wc -c <'banner-03/banr.f0'`; then
    echo shar: \"'banner-03/banr.f0'\" unpacked with wrong size!
fi
# end of 'banner-03/banr.f0'
fi
if test -f 'banner-03/banr.f1' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-03/banr.f1'\"
else
echo shar: Extracting \"'banner-03/banr.f1'\" \(1292 characters\)
sed "s/^X//" >'banner-03/banr.f1' <<'END_OF_FILE'
X _  __   _  __  ___ ___  _  _ _ _  _ _ _ _   _  _ 
X/_\ |_) / ' | \ |_  |_  / _ |_| |  | |_/ |   |\/| 
X| | |_) \_, |_/ |__ |   \_| | | | \/ | \ |__ |  | 
X                                                  
X_  _  _  __   _  __   _  ___ _ _ _  _ _  _ _ _ _ _ __ 
X|\ | / \ |_) / \ |_) (_'  |  | | \  / |  | \_/ \_/  / 
X| \| \_/ |   \_X | \ ,_)  |  \_/  \/  \/\/ / \  |  /_ 
X                                                      
X                    _                         
X _. |_   _  _|  _  |_  _  |_  .  . |  | ._ _  
X(_| |_) |_ (_| (-' |  (_| | | |  | |< | | | | 
X                      ._)       ./            
X                                            
X._   _  ._   _. ._ _ |                    _ 
X| | (_) |_) (_| |  \ | |_| \/ \/\/ >< \_/ / 
X        |     |                       _/    
X _    _  _       __     __  _   _  
X/.\ |  ) _) /_| |_   /   / (_) (_) 
X\_/ | /_ _)   | ._) (_) /  (_)  /  
X                                   
X          __                              
X| // |_| (|  o/ o  / / \ \/ _|_ o __    / 
X.    |_| _|) /o (X   \ / /\  |  o    o /  
X     | |                        /         
X            _      __    __                  
o o / __ \ ' )  _  |  \   | /\    \ ( | ) ^v 
o o \ __ /  !  (Q) |_  \ _|    __   ( | )    
X  /                                          
END_OF_FILE
if test 1292 -ne `wc -c <'banner-03/banr.f1'`; then
    echo shar: \"'banner-03/banr.f1'\" unpacked with wrong size!
fi
# end of 'banner-03/banr.f1'
fi
if test -f 'banner-03/banr.f2.uu' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-03/banr.f2.uu'\"
else
echo shar: Extracting \"'banner-03/banr.f2.uu'\" \(3638 characters\)
sed "s/^X//" >'banner-03/banr.f2.uu' <<'END_OF_FILE'
begin 644 banr.f2
M(!M;-&T@&UMM(" ;6S1M(!M;;1M;-&T@&UMM(" @&ULT;2 ;6VT@(!M;-&T@
M&UMM&ULT;2 ;6VT@(!M;-&T@&UMM&ULT;2 ;6VT;6S1M(!M;;2 ;6S1M(!M;
M;1M;-&T@&UMM&ULT;2 ;6VT@(!M;-&T@&UMM(" ;6S1M(!M;;2 ;6S1M(!M;
M;2 ;6S1M(!M;;2 @&ULT;2 ;6VT@&ULT;2 ;6VT@&ULT;2 ;6VT@&ULT;2 ;
M6VT@(" ;6S1M(!M;;2 @&ULT;2 ;6VT@"B\;6S1M(!M;;5P@?!M;-&T@&UMM
M*2 O("<@?"!<('P;6S1M(!M;;2 @?!M;-&T@&UMM(" O(!M;-&T@&UMM('P;
M6S1M(!M;;7P@?" @?"!\&ULT;2 ;6VTO('P@("!\7"]\( H;6S1M?!M;;2 ;
M6S1M?!M;;2 ;6S1M?!M;;1M;-&T@&UMM*2!<&ULT;2 ;6VTL(!M;-&U\&UMM
M&ULT;2 ;6VTO(!M;-&U\&UMM&ULT;2 ;6VT;6S1M(!M;;2 ;6S1M?!M;;2 @
M(%P;6S1M(!M;;7P@&ULT;7P;6VT@&ULT;7P;6VT@&ULT;7P;6VT@7"\@&ULT
M;7P;6VT@&ULT;5P;6VT@&ULT;7P;6VT;6S1M(!M;;1M;-&T@&UMM(!M;-&U\
M&UMM(" ;6S1M?!M;;2 *(" @(" @(" @(" @(" @(" @(" @(" @(" @(" @
M(" @(" @(" @(" @(" @(" @(" *&ULT;2 ;6VT@(!M;-&T@&UMM(" ;6S1M
M(!M;;2 @&ULT;2 ;6VT;6S1M(!M;;2 @(!M;-&T@&UMM(" ;6S1M(!M;;1M;
M-&T@&UMM(" @&ULT;2 ;6VT@(!M;-&T@&UMM&ULT;2 ;6VT;6S1M(!M;;2 ;
M6S1M(!M;;2 ;6S1M(!M;;2 ;6S1M(!M;;2 @&ULT;2 ;6VT@&ULT;2 ;6VT@
M(!M;-&T@&UMM(!M;-&T@&UMM(!M;-&T@&UMM(!M;-&T@&UMM(!M;-&T@&UMM
M(!M;-&T@&UMM&ULT;2 ;6VT@"GQ<('P@+R!<('P;6S1M(!M;;2D@+R!<('P;
M6S1M(!M;;2D@*!M;-&T@&UMM)R @?" @?"!\(%P@("\@?" @?"!<&ULT;2 ;
M6VTO(%P;6S1M(!M;;2\@("\@"AM;-&U\&UMM(%P;6S1M?!M;;2!<&ULT;2 ;
M6VTO(!M;-&U\&UMM(" @7!M;-&T@&UMM6" ;6S1M?!M;;2 ;6S1M7!M;;2 L
M&ULT;2 ;6VTI(" ;6S1M?!M;;2 @7!M;-&T@&UMM+R @7"\@(%PO7"\@&ULT
M;2\;6VT@&ULT;5P;6VT@(!M;-&U\&UMM(" ;6S1M+QM;;1M;-&T@&UMM( H@
M(" @(" @(" @(" @(" @(" @(" @(" @(" @(" @(" @(" @(" @(" @(" @
M(" @(" @(" *(" @(" @(" @(" @(" @(" @(" ;6S1M(!M;;2 @(" @(" @
M(" @(" @(" @(" @(" @(" *(!M;-&T@&UMM+B!\&ULT;2 ;6VT@(" ;6S1M
M(!M;;2 @&ULT;2 ;6VU\(" ;6S1M(!M;;2 @&ULT;7P;6VT;6S1M(!M;;2 @
M&ULT;2 ;6VT@('P;6S1M(!M;;2 @+B @+B!\("!\("X;6S1M(!M;;2 ;6S1M
M(!M;;2 @"B@;6S1M(!M;;7P@?!M;-&T@&UMM*2!\&ULT;2 ;6VT@*!M;-&T@
M&UMM?" H&ULT;2T;6VTG('P@("@;6S1M(!M;;7P@?"!\('P@('P@?#P@&ULT
M;7P;6VT@?"!\('P@"B @(" @(" @(" @(" @(" @(" @(" N&ULT;2 ;6VTI
M(" @(" @("XO(" @(" @(" @(" @"B @(" @(" @(" @(" @(" @(" @(" @
M(" @(" @(" @(" @(" @(" @(" @"BX;6S1M(!M;;2 @(!M;-&T@&UMM(" N
M&ULT;2 ;6VT@(" ;6S1M(!M;;2X@+AM;-&T@&UMM(!M;-&T@&UMM(!M;-&U\
M&UMM(" @(" @(" @(" @(" @(" @(" ;6S1M(!M;;2 *?"!\("@;6S1M(!M;
M;2D@?!M;-&T@&UMM*2 H&ULT;2 ;6VU\('P@(!M;-&U<&UMM('P@?!M;-&T@
M&UMM?"!<+R!<+UPO(#X\(%P;6S1M(!M;;2\@&ULT;2\;6VT@"B @(" @(" @
M?" @(" @?" @(" @(" @(" @(" @(" @(" @(" @&ULT;2 ;6VTO(" @( H@
M&ULT;2 ;6VT@(" @&ULT;2 ;6VT@(!M;-&T@&UMM(" @(" @(!M;-&T@&UMM
M&ULT;2 ;6VT@(" @(!M;-&T@&UMM&ULT;2 ;6VT@(!M;-&T@&UMM(" @&ULT
M;2 ;6VT@( HO+EP@?" @*2 ;6S1M(!M;;2D@&ULT;2\;6VT;6S1M(!M;;7P@
M?!M;-&T@&UMM(" @&ULT;2\;6VT@(" O("@;6S1M(!M;;2D@*!M;-&T@&UMM
M*2 *7!M;-&T@&UMM+R!\(!M;-&TO&UMM&ULT;2 ;6VT@&ULT;2 ;6VTI(" @
M?" N&ULT;2 ;6VTI("@;6S1M(!M;;2D@+R @*!M;-&T@&UMM*2 @+R @"B @
M(" @(" @(" @(" @(" @(" @(" @(" @(" @(" @(" @"B @(" @(" @(" ;
M6S1M(!M;;1M;-&T@&UMM(" @(" @(" @(" @(" @(" @(" @(" @(" @(" @
M"GP@+R\@&ULT;7P;6VT;6S1M(!M;;1M;-&U\&UMM("@;6S1M?!M;;2 @;R\@
M;R @+R O(%P@&ULT;5P;6VT;6S1M+QM;;2 ;6S1M(!M;;1M;-&U\&UMM&ULT
M;2 ;6VT@;R ;6S1M(!M;;1M;-&T@&UMM(" @("\@"BX@(" @&ULT;7P;6VT;
M6S1M(!M;;1M;-&U\&UMM(!M;-&T@&UMM&ULT;7P;6VTI("]O("A8(" @7" O
M("]<("!\("!O(" @(&\@+R @"B @(" @?"!\(" @(" @(" @(" @(" @(" @
M(" @(" @+R @(" @(" @( H@(" @(" @(" @(" ;6S1M(!M;;2 @(" @(!M;
M-&T@&UMM&ULT;2 ;6VT@(" @&ULT;2 ;6VT;6S1M(!M;;2 @(" @(" @(" @
M(" @(" @( IO(&\@+R ;6S1M(!M;;1M;-&T@&UMM(%P@)R I(" ;6S1M(!M;
M;2 @?" @7" @('P@+UP@(" @7" H('P@*2!>=B *;R!O(%P@&ULT;2 ;6VT;
M6S1M(!M;;2 O(" A(" H&ULT;5$;6VT;6S1M*1M;;2 ;6S1M?!M;;1M;-&T@
M&UMM("!<(!M;-&T@&UMM&ULT;7P;6VT@(" @&ULT;2 ;6VT;6S1M(!M;;2 @
M("@@?" I(" @( H@("\@(" @(" @(" @(" @(" @(" @(" @(" @(" @(" @
X,(" @(" @(" @(" *
X 
end
END_OF_FILE
if test 3638 -ne `wc -c <'banner-03/banr.f2.uu'`; then
    echo shar: \"'banner-03/banr.f2.uu'\" unpacked with wrong size!
fi
# end of 'banner-03/banr.f2.uu'
fi
if test ! -d 'banner-04' ; then
    echo shar: Creating directory \"'banner-04'\"
    mkdir 'banner-04'
fi
if test ! -d 'banner-05' ; then
    echo shar: Creating directory \"'banner-05'\"
    mkdir 'banner-05'
fi
if test -f 'banner-05/3db.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-05/3db.c'\"
else
echo shar: Extracting \"'banner-05/3db.c'\" \(5167 characters\)
sed "s/^X//" >'banner-05/3db.c' <<'END_OF_FILE'
X/* 3db : three-dimensional banner
X *
X * Who the heck wrote original Pascal version?
X *
X * C version by Han, Yun-Su
X * 880505 KAIST undergraduate Dept of Life Science
X */
X
X#include <stdio.h>
X
main(argc, argv)
int argc;
char **argv;
X{
X	char line[256];
X
X	if (argc < 2)	{
X		fprintf(stderr, "&:^)\n");
X		exit(1);
X		}
X	getline(line, argc, argv);
X	lowerline(line);
X	putline(line);
X}
X
getline(s, n, v)
char *s;
int n;
char *v[];
X{
X	int i, j;
X
X	strcpy(s, "");
X	for (i = 1; i < n; i++, s++)	{
X		for (j = 0; v[i][j] != '\0'; j++, s++)
X			*s = v[i][j];
X		*s = ' ';
X		}
X	s--;
X	*s = '\0';
X}
X
lowerline(s)
char *s;
X{
X	char *p;
X
X	for (p = s; *p != '\0'; p++)
X		if (*p >= 'A' && *p <= 'Z')
X			*p = *p - 'A' + 'a';
X}
X
X#define	Height		8	/* Height of 3D Font */
X#define	Blank		"     "
putline(s)
char *s;
X{
X	static char *data[] = {
X		"     ____    ",
X		"   /____/ \\  ",
X		" /|     \\ /| ",
X		"| |______| | ",
X		"|/_______| | ",
X		"| |      | | ",
X		"| |      | | ",
X		"|/       |/  ",
X		"  _______    ",
X		" /______/ \\  ",
X		"| |     \\ /| ",
X		"| |______|/  ",
X		"|/______/ \\  ",
X		"| |     \\ /| ",
X		"| |______|/  ",
X		"|/______/    ",
X		"     _____    ",
X		"   /____ / \\  ",
X		" /|      \\ /| ",
X		"| |       |/  ",
X		"| |           ",
X		"| |        /| ",
X		"|/ \\______|/  ",
X		" \\ /_____/    ",
X		"  _______    ",
X		" /______/ \\  ",
X		"| |     \\ /| ",
X		"| |      | | ",
X		"| |      | | ",
X		"| |      | | ",
X		"| |______|/  ",
X		"|/______/    ",
X		"  __________ ",
X		" /_________/ ",
X		"| |          ",
X		"| |______    ",
X		"|/______/    ",
X		"| |          ",
X		"| |_________ ",
X		"|/_________/ ",
X		"  __________ ",
X		" /_________/ ",
X		"| |          ",
X		"| |______    ",
X		"|/______/    ",
X		"| |          ",
X		"| |          ",
X		"|/           ",
X		"     _____    ",
X		"   /____ / \\  ",
X		" /|      \\ /| ",
X		"| |       |/  ",
X		"| |       __  ",
X		"| |     /_ /| ",
X		"|/ \\______|/  ",
X		" \\ /_____/    ",
X		"             ",
X		" /|       /| ",
X		"| |      | | ",
X		"| |______| | ",
X		"|/_______| | ",
X		"| |      | | ",
X		"| |      | | ",
X		"|/       |/  ",
X		" _____ ",
X		"/____/ ",
X		"  | |  ",
X		"  | |  ",
X		"  | |  ",
X		"  | |  ",
X		" _| |_ ",
X		"/_|/_/ ",
X		"          ",
X		"       /| ",
X		"      | | ",
X		"      | | ",
X		"      | | ",
X		"      | | ",
X		"/ \\___|/  ",
X		"\\ /__/    ",
X		"            ",
X		" /|      /  ",
X		"| |    /    ",
X		"| |  /      ",
X		"| |/  \\     ",
X		"|/| \\   \\   ",
X		"| |   \\   \\ ",
X		"|/      \\ / ",
X		"           ",
X		" /|        ",
X		"| |        ",
X		"| |        ",
X		"| |        ",
X		"| |        ",
X		"| |_______ ",
X		"|/_______/ ",
X		"               ",
X		" / \\        /| ",
X		"|\\  \\      / | ",
X		"| \\  \\    /| | ",
X		"| |\\  \\  / | | ",
X		"| | \\  \\/  | | ",
X		"| |  \\ /   | | ",
X		"|/         |/  ",
X		"           ",
X		" / \\    /| ",
X		"|\\  \\  | | ",
X		"| \\  \\ | | ",
X		"| |\\  \\| | ",
X		"| | \\  | | ",
X		"| |  \\ | | ",
X		"|/    \\|/  ",
X		"     ____    ",
X		"   /___ / \\  ",
X		" /|     \\ /| ",
X		"| |      | | ",
X		"| |      | | ",
X		"| |      | | ",
X		"|/ \\ ____|/  ",
X		" \\ /____/    ",
X		"  _______    ",
X		" /______/ \\  ",
X		"| |     \\ /| ",
X		"| |______|/  ",
X		"|/______/    ",
X		"| |          ",
X		"| |          ",
X		"|/           ",
X		"     ____     ",
X		"   /___ / \\   ",
X		" /|     \\ /|  ",
X		"| |      | |  ",
X		"| |      | |  ",
X		"| |     /| |  ",
X		"|/ \\ ___\\|/ \\ ",
X		" \\ /____/ \\ / ",
X		"  _______    ",
X		" /______/ \\  ",
X		"| |     \\ /| ",
X		"| |______|/  ",
X		"|/______/    ",
X		"| | \\   \\    ",
X		"| |   \\   \\  ",
X		"|/      \\ /  ",
X		"     _____    ",
X		"   /____ / \\  ",
X		" /|      \\ /  ",
X		"|/ \\ _____    ",
X		" \\ /____ / \\  ",
X		"         \\ /| ",
X		" / \\ _____|/  ",
X		" \\ /_____/    ",
X		" _______________ ",
X		"/______________/ ",
X		"       | |       ",
X		"       | |       ",
X		"       | |       ",
X		"       | |       ",
X		"       | |       ",
X		"       |/        ",
X		"             ",
X		" /|       /| ",
X		"| |      | | ",
X		"| |      | | ",
X		"| |      | | ",
X		"| |      | | ",
X		"|/ \\ ____|/  ",
X		" \\ /____/    ",
X		"              ",
X		"/ \\         / ",
X		"\\  \\       /  ",
X		" \\  \\     /   ",
X		"  \\  \\   /    ",
X		"   \\  \\ /     ",
X		"    \\  /      ",
X		"     \\/       ",
X		"                     ",
X		"/ \\                / ",
X		"\\  \\              /  ",
X		" \\  \\     /\\     /   ",
X		"  \\  \\   /  \\   /    ",
X		"   \\  \\ / \\  \\ /     ",
X		"    \\  /   \\  /      ",
X		"     \\/     \\/       ",
X		"              ",
X		"/ \\         / ",
X		"\\   \\     /   ",
X		"  \\   \\ /     ",
X		"    \\ / \\     ",
X		"    / \\   \\   ",
X		"  /     \\   \\ ",
X		"/         \\ / ",
X		"              ",
X		"/ \\         / ",
X		"\\   \\     /   ",
X		"  \\   \\ /     ",
X		"    \\ /|      ",
X		"     | |      ",
X		"     | |      ",
X		"     |/       ",
X		" ____________ ",
X		"/___________/ ",
X		"          /   ",
X		"        /     ",
X		"      /       ",
X		"    /         ",
X		"  /__________ ",
X		"/___________/ ",
X		""
X		};
X	int i;
X	char *p;
X
X	for (i = 0; i < Height; i++)	{
X		for (p = s; *p != '\0'; p++)
X			if (*p < 'a' || *p > 'z')
X				printf(Blank);
X			else
X				printf("%s", data[(*p - 'a') * Height + i]);
X		printf("\n");
X		}
X}
END_OF_FILE
if test 5167 -ne `wc -c <'banner-05/3db.c'`; then
    echo shar: \"'banner-05/3db.c'\" unpacked with wrong size!
fi
# end of 'banner-05/3db.c'
fi
if test -f 'banner-05/Banner.doc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-05/Banner.doc'\"
else
echo shar: Extracting \"'banner-05/Banner.doc'\" \(854 characters\)
sed "s/^X//" >'banner-05/Banner.doc' <<'END_OF_FILE'
X===============================================================================
Banner : Collected by Han YoonSoo KAIST undergradute 880505
X===============================================================================
file name	: description
X===============================================================================
block.c		: block style banner (english)
cursive.c	: cursive (english)
kban.c		: semi's banner (korean and english)
kbandat.c	: data file for 'kban.c'
kban.hlp	: help file for 'kban'
lban.c		: large korean banner
lban.dat	: data file for 'lban.c'
sban.c		: small korean banner
sban.dat	: data file for 'sban.c'
vban.c		: vertical banner (english)
X3db.c		: three-dimensional banner (english)
leb.c		: large english banner
seb.c		: small english banner
X-------------------------------------------------------------------------------
END_OF_FILE
if test 854 -ne `wc -c <'banner-05/Banner.doc'`; then
    echo shar: \"'banner-05/Banner.doc'\" unpacked with wrong size!
fi
# end of 'banner-05/Banner.doc'
fi
if test -f 'banner-05/kban.hlp' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-05/kban.hlp'\"
else
echo shar: Extracting \"'banner-05/kban.hlp'\" \(1379 characters\)
sed "s/^X//" >'banner-05/kban.hlp' <<'END_OF_FILE'
X
X--#1	How to use
X
X   The character '/' has special power...called CMD_CHR.  By it alone, it can
X  toggle the Korean/English letter mode.  With '.' or '+' after it, it changes
X  output letter mode or writing-type.  Now, there is only one writing-type,
X  Roman, so '+' is useless in Ver1.21-.  If you want to know the power of trick
X  by '.' after '/', try followings :
X
X	kban /.0Hello
X	kban /.1Hello
X	kban /.2Hello
X	 :     :
X	kban /.5Hello
X
X  Now, there are 6 (0~5) letter modes and the initial value is 0 ( you can
X  change this at the line '#define CMODE 0' in kbandat.c ).
X
X   Here are some examples of usage :
X
X	kban /dkssud/____semi
X	kban Hello,,,,/.3/tpadl
X
X--#2	How to compile
X
X   First, you must change the line '#define DATFILE xxxxx' in kban.c to inform
X  where kbandat.c exists.
X   Then, just 'cc kban.c -o kban' is all.
X
X--#3	Info
X
X   This banner can cover Korean and English both.  Moreover, it has a special
X  function(/.# : # is number) and it's fonts are quite pretty.  But now, there
X  are no fonts for numbers and other letters though there will be soon.
X   All unknown characters are treated as 1 vertical space, so ',' and '_' can
X  be used as space in above examples.
X   Help option for this program is not ready yet.  I can support this help file
X  only now.  sorry.
X
X   If you have any question or any suggestion, e-mail to :
X
X	e910017@xserver.kaist.ac.kr
X
END_OF_FILE
if test 1379 -ne `wc -c <'banner-05/kban.hlp'`; then
    echo shar: \"'banner-05/kban.hlp'\" unpacked with wrong size!
fi
# end of 'banner-05/kban.hlp'
fi
if test -f 'banner-05/lban.dat' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-05/lban.dat'\"
else
echo shar: Extracting \"'banner-05/lban.dat'\" \(813 characters\)
sed "s/^X//" >'banner-05/lban.dat' <<'END_OF_FILE'
X .___.
X |   |
X +---+
X
X _____
X  | | 
X  | | 
X
X __|__
X  / \ 
X /   \
X
X  ___ 
X /   \
X \___/
X
X .____
X |    
X |____
X
X .___.
X .___|
X |___.
X
X __|__
X /   \
X \___/
X
X   |  
X --+--
X      
X
X |__  
X |__  
X |    
X
X   |  
X --|  
X   |  
X
X  |   
X  |-- 
X  |   
X
X  |   
X  |   
X  |   
X
X _____
X      
X      
X
X _____
X   |  
X      
X
X  | | 
X  |-| 
X  | | 
X
X  | | 
X -| | 
X  | | 
X
X .   .
X |___|
X |___|
X
X ----+
X     |
X     |
X
X .    
X |    
X +----
X
X   .  
X  / \ 
X /   \
X
X __|  
X __|  
X   |  
X
X _____
X  | | 
X -+-+-
X
X _____
X  / \ 
X /   \
X
X .____
X |____
X |____
X
X  | | 
X -+-+-
X      
X
X ----+
X ____|
X     |
X
X . . .
X |_|_|
X |_|_|
X
X _____
X  / / 
X /\/ \
X
X .____
X | |  
X |_|__
X
X ____.
X   | |
X   | |
X
X  ..  
X // \ 
X// \ \
X
X |_|  
X |_|  
X | |  
X
X _| | 
X _| | 
X  | | 
X
X .---.
X  .--'
X  @   
X
X  ||  
X  |   
X  @   
X
X      
X  @   
X
X      
X      
X @@   
X  /
X
X
X
END_OF_FILE
if test 813 -ne `wc -c <'banner-05/lban.dat'`; then
    echo shar: \"'banner-05/lban.dat'\" unpacked with wrong size!
fi
# end of 'banner-05/lban.dat'
fi
if test -f 'banner-05/leb.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-05/leb.c'\"
else
echo shar: Extracting \"'banner-05/leb.c'\" \(3633 characters\)
sed "s/^X//" >'banner-05/leb.c' <<'END_OF_FILE'
X/* leb : Large English Banner
X *
X * Who the heck wrote original Pascal version?
X *
X * C version by Han, Yun-Su
X * 880505 KAIST undergraduate Dept of Life Science
X */
X
X#include <stdio.h>
X
main(argc, argv)
int argc;
char **argv;
X{
X	char line[256];
X
X	if (argc < 2)	{
X		fprintf(stderr, "&:^)\n");
X		exit(1);
X		}
X	getline(line, argc, argv);
X	lowerline(line);
X	putline(line);
X}
X
getline(s, n, v)
char *s;
int n;
char *v[];
X{
X	int i, j;
X
X	strcpy(s, "");
X	for (i = 1; i < n; i++, s++)	{
X		for (j = 0; v[i][j] != '\0'; j++, s++)
X			*s = v[i][j];
X		*s = ' ';
X		}
X	s--;
X	*s = '\0';
X}
X
lowerline(s)
char *s;
X{
X	char *p;
X
X	for (p = s; *p != '\0'; p++)
X		if (*p >= 'A' && *p <= 'Z')
X			*p = *p - 'A' + 'a';
X}
X
X#define	Height		6	/* Height of 3D Font */
X#define	Blank		"     "
putline(s)
char *s;
X{
X	static char *data[] = {
X		"     __      ",
X		"    /  \\     ",
X		"   /    \\    ",
X		"  /  /\\  \\   ",
X		" /  ____  \\  ",
X		"/__/    \\__\\ ",
X		" ______   ",
X		"|  __  \\  ",
X		"| |__|  | ",
X		"|  __  <  ",
X		"| |__|  | ",
X		"|______/  ",
X		"  _____  ",
X		" / ____| ",
X		"| |      ",
X		"| |      ",
X		"| |____  ",
X		" \\_____| ",
X		" ______   ",
X		"|  ___ \\  ",
X		"| |   | | ",
X		"| |   | | ",
X		"| |___| | ",
X		"|______/  ",
X		" _______  ",
X		"|  _____| ",
X		"| |___    ",
X		"|  ___|   ",
X		"| |_____  ",
X		"|_______| ",
X		" _______  ",
X		"|  _____| ",
X		"| |___    ",
X		"|  ___|   ",
X		"| |       ",
X		"|_|       ",
X		"  ______   ",
X		" / _____|  ",
X		"| |   ___  ",
X		"| |  |_  | ",
X		"| |____| | ",
X		" \\______/  ",
X		" _     _  ",
X		"| |   | | ",
X		"| |___| | ",
X		"|  ___  | ",
X		"| |   | | ",
X		"|_|   |_| ",
X		" _  ",
X		"| | ",
X		"| | ",
X		"| | ",
X		"| | ",
X		"|_| ",
X		"     _  ",
X		"    | | ",
X		"    | | ",
X		" _  | | ",
X		"| |_| | ",
X		" \\___/  ",
X		" _   __ ",
X		"| | / / ",
X		"| |/ /  ",
X		"|   <   ",
X		"| |\\ \\  ",
X		"|_| \\_\\ ",
X		" _       ",
X		"| |      ",
X		"| |      ",
X		"| |      ",
X		"| |____  ",
X		"|______| ",
X		" ___    ___  ",
X		"|   \\  /   | ",
X		"| |\\ \\/ /| | ",
X		"| | \\__/ | | ",
X		"| |      | | ",
X		"|_|      |_| ",
X		" __    _  ",
X		"|  \\  | | ",
X		"|   \\ | | ",
X		"| |\\ \\| | ",
X		"| | \\   | ",
X		"|_|  \\__| ",
X		"  ______   ",
X		" / ____ \\  ",
X		"| |    | | ",
X		"| |    | | ",
X		"| |____| | ",
X		" \\______/  ",
X		" _____   ",
X		"|  __ \\  ",
X		"| |__| | ",
X		"|  ___/  ",
X		"| |      ",
X		"|_|      ",
X		"  ______    ",
X		" / ____ \\   ",
X		"| |    | |  ",
X		"| |    | |  ",
X		"| |___|  |  ",
X		" \\________| ",
X		" _____   ",
X		"|  __ \\  ",
X		"| |__| | ",
X		"|  _  /  ",
X		"| | \\ \\  ",
X		"|_|  \\_\\ ",
X		"  _____   ",
X		" / ____|  ",
X		"| |____   ",
X		" \\____ \\  ",
X		"  ____| | ",
X		" |_____/  ",
X		" _________  ",
X		"|___   ___| ",
X		"    | |     ",
X		"    | |     ",
X		"    | |     ",
X		"    |_|     ",
X		" _     _  ",
X		"| |   | | ",
X		"| |   | | ",
X		"| |   | | ",
X		"| |___| | ",
X		" \\_____/  ",
X		"__        __ ",
X		"\\ \\      / / ",
X		" \\ \\    / /  ",
X		"  \\ \\  / /   ",
X		"   \\ \\/ /    ",
X		"    \\__/     ",
X		"__            __ ",
X		"\\ \\          / / ",
X		" \\ \\        / /  ",
X		"  \\ \\  /\\  / /   ",
X		"   \\ \\/  \\/ /    ",
X		"    \\__/\\__/     ",
X		"__    __ ",
X		"\\ \\  / / ",
X		" \\ \\/ /  ",
X		"  >  <   ",
X		" / /\\ \\  ",
X		"/_/  \\_\\ ",
X		"__     __ ",
X		"\\ \\   / / ",
X		" \\ \\_/ /  ",
X		"  \\   /   ",
X		"   | |    ",
X		"   |_|    ",
X		" _______  ",
X		"|____  /  ",
X		"    / /   ",
X		"   / /    ",
X		"  / /___  ",
X		" /______| ",
X		};
X	int i;
X	char *p;
X
X	for (i = 0; i < Height; i++)	{
X		for (p = s; *p != '\0'; p++)
X			if (*p < 'a' || *p > 'z')
X				printf(Blank);
X			else
X				printf("%s", data[(*p - 'a') * Height + i]);
X		printf("\n");
X		}
X}
END_OF_FILE
if test 3633 -ne `wc -c <'banner-05/leb.c'`; then
    echo shar: \"'banner-05/leb.c'\" unpacked with wrong size!
fi
# end of 'banner-05/leb.c'
fi
if test -f 'banner-05/sban.dat' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-05/sban.dat'\"
else
echo shar: Extracting \"'banner-05/sban.dat'\" \(412 characters\)
sed "s/^X//" >'banner-05/sban.dat' <<'END_OF_FILE'
X_.
L|
X
TT
X  
X
X_L
X/\
X
X  
X()
X
r-
L_
X
X-)
X(_
X
X_L
X()
X
X_L
X  
X
X|_
X|-
X
X |
X-|
X
X|_
X| 
X
X| 
X| 
X
X  
X__
X
X-r
X  
X
X|J
X||
X
J|
X||
X
L|
L|
X
X_.
X |
X
X. 
X|_
X
X .
X/\
X
X_|
X-|
X
X__
JL
X
X__
X/\
X
X==
L_
X
JL
X  
X
X__
X-/
X
UU
UU
X
X__
X^^
X
X__
LL
X
X__
X//
X
X..
X^^
X
L|
r|
X
J|
T|
X
X?)
o 
X
X|7
o 
X
X  
o 
X
X  
X, 
X
o 
o 
X
AA
X  
X
oo
X\/
X
oo
X/\
X
X**
X\/
X
X**
X/\
X
X..
X\/
X
X..
X/\
X
X'`
X\/
X
X`'
X/\
X
X^^
X U
X
X^^
U 
X
X'|
X |
X
X')
X<_
X
X')
X_)
X
X||
X-+
X
X.-
X_)
X
X| 
X()
X
X->
X/ 
X
X()
X()
X
X()
X |
X
X/\
X\/
END_OF_FILE
if test 412 -ne `wc -c <'banner-05/sban.dat'`; then
    echo shar: \"'banner-05/sban.dat'\" unpacked with wrong size!
fi
# end of 'banner-05/sban.dat'
fi
if test -f 'banner-05/seb.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-05/seb.c'\"
else
echo shar: Extracting \"'banner-05/seb.c'\" \(3119 characters\)
sed "s/^X//" >'banner-05/seb.c' <<'END_OF_FILE'
X/* seb : Small English Banner
X *
X * Who the heck wrote original Pascal version?
X *
X * C version by Han, Yun-Su
X * 880505 KAIST undergraduate Dept of Life Science
X */
X
X#include <stdio.h>
X
main(argc, argv)
int argc;
char **argv;
X{
X	char line[256];
X
X	if (argc < 2)	{
X		fprintf(stderr, "&:^)\n");
X		exit(1);
X		}
X	getline(line, argc, argv);
X	putline(line);
X}
X
getline(s, n, v)
char *s;
int n;
char *v[];
X{
X	int i, j;
X
X	strcpy(s, "");
X	for (i = 1; i < n; i++, s++)	{
X		for (j = 0; v[i][j] != '\0'; j++, s++)
X			*s = v[i][j];
X		*s = ' ';
X		}
X	s--;
X	*s = '\0';
X}
X
X#define	Height		4	/* Height of Font */
X#define	Blank		"     "
putline(s)
char *s;
X{
X	static char *upper[] = {
X		"     ",
X		"  /\\ ",
X		" /--\\",
X		"     ",
X		"  _ ",
X		" |_)",
X		" |_)",
X		"    ",
X		"  __",
X		" /  ",
X		" \\__",
X		"    ",
X		"  _ ",
X		" | \\",
X		" |_/",
X		"    ",
X		"  __",
X		" |_ ",
X		" |__",
X		"    ",
X		"  __",
X		" |_ ",
X		" |  ",
X		"    ",
X		"  _ ",
X		" / _",
X		" \\_|",
X		"    ",
X		"    ",
X		" |_|",
X		" | |",
X		"    ",
X		"  ",
X		" |",
X		" |",
X		"  ",
X		"    ",
X		"   |",
X		" |_|",
X		"    ",
X		"    ",
X		" |_/",
X		" | \\",
X		"    ",
X		"    ",
X		" |  ",
X		" |__",
X		"    ",
X		"       ",
X		" |\\  /|",
X		" | \\/ |",
X		"       ",
X		"     ",
X		" |\\ |",
X		" | \\|",
X		"     ",
X		"  _ ",
X		" / \\",
X		" \\_/",
X		"    ",
X		"  _ ",
X		" |_)",
X		" |  ",
X		"    ",
X		"  _ ",
X		" / \\",
X		" \\_\\",
X		"    ",
X		"  _ ",
X		" |_)",
X		" | \\",
X		"    ",
X		"  _ ",
X		" (_ ",
X		"  _)",
X		"    ",
X		" ___",
X		"  | ",
X		"  | ",
X		"    ",
X		"     ",
X		" |  |",
X		" |__|",
X		"     ",
X		"     ",
X		" \\  /",
X		"  \\/ ",
X		"     ",
X		"       ",
X		" \\    /",
X		"  \\/\\/ ",
X		"       ",
X		"    ",
X		" \\_/",
X		" / \\",
X		"    ",
X		"    ",
X		" \\_/",
X		"  | ",
X		"    ",
X		" __",
X		"  /",
X		" /_",
X		"   ",
X		""
X		};
X	static char *lower[] = {
X		"    ",
X		"  _ ",
X		" (_|",
X		"    ",
X		"    ",
X		" |_ ",
X		" |_)",
X		"    ",
X		"   ",
X		"  _",
X		" (_",
X		"   ",
X		"    ",
X		"  _|",
X		" (_|",
X		"    ",
X		"   ",
X		"  _",
X		" (=",
X		"   ",
X		"   _",
X		" _|_",
X		"  | ",
X		"    ",
X		"    ",
X		"  _ ",
X		" (_|",
X		"  _/",
X		"    ",
X		" |_ ",
X		" | |",
X		"    ",
X		"  ",
X		" .",
X		" |",
X		"  ",
X		"   ",
X		"  .",
X		"  |",
X		" _/",
X		"   ",
X		" |_",
X		" |\\",
X		"   ",
X		"  ",
X		" |",
X		" |",
X		"  ",
X		"      ",
X		"  _ _ ",
X		" | | |",
X		"      ",
X		"    ",
X		"  _ ",
X		" | |",
X		"    ",
X		"    ",
X		"  _ ",
X		" (_)",
X		"    ",
X		"    ",
X		"  _ ",
X		" |_)",
X		" |  ",
X		"    ",
X		"  _ ",
X		" (_|",
X		"   |",
X		"   ",
X		"  _",
X		" | ",
X		"   ",
X		"  ",
X		"  ",
X		" S",
X		"  ",
X		"    ",
X		" _|_",
X		"  |_",
X		"    ",
X		"    ",
X		"    ",
X		" |_|",
X		"    ",
X		"    ",
X		"    ",
X		" \\_/",
X		"    ",
X		"      ",
X		"      ",
X		" \\_|_/",
X		"      ",
X		"   ",
X		"   ",
X		" ><",
X		"   ",
X		"    ",
X		"    ",
X		" \\_/",
X		" _/ ",
X		"   ",
X		" _ ",
X		" /_",
X		"   ",
X		"   ",
X		""
X		};
X	int i;
X	char *p;
X
X	for (i = 0; i < Height; i++)	{
X		for (p = s; *p != '\0'; p++)
X			if (*p >= 'a' && *p <= 'z')
X				printf("%s", lower[(*p - 'a') * Height + i]);
X			else if (*p >= 'A' && *p <= 'Z')
X				printf("%s", upper[(*p - 'A') * Height + i]);
X			else
X				printf(Blank);
X		printf("\n");
X		}
X}
END_OF_FILE
if test 3119 -ne `wc -c <'banner-05/seb.c'`; then
    echo shar: \"'banner-05/seb.c'\" unpacked with wrong size!
fi
# end of 'banner-05/seb.c'
fi
if test ! -d 'banner-06' ; then
    echo shar: Creating directory \"'banner-06'\"
    mkdir 'banner-06'
fi
if test -f 'banner-06/banner.6' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-06/banner.6'\"
else
echo shar: Extracting \"'banner-06/banner.6'\" \(2979 characters\)
sed "s/^X//" >'banner-06/banner.6' <<'END_OF_FILE'
X.\" Copyright (c) 1980 The Regents of the University of California.
X.\" All rights reserved.
X.\"
X.\" Redistribution and use in source and binary forms, with or without
X.\" modification, are permitted provided that the following conditions
X.\" are met:
X.\" 1. Redistributions of source code must retain the above copyright
X.\"    notice, this list of conditions and the following disclaimer.
X.\" 2. Redistributions in binary form must reproduce the above copyright
X.\"    notice, this list of conditions and the following disclaimer in the
X.\"    documentation and/or other materials provided with the distribution.
X.\" 3. All advertising materials mentioning features or use of this software
X.\"    must display the following acknowledgement:
X.\"	This product includes software developed by the University of
X.\"	California, Berkeley and its contributors.
X.\" 4. Neither the name of the University nor the names of its contributors
X.\"    may be used to endorse or promote products derived from this software
X.\"    without specific prior written permission.
X.\"
X.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
X.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
X.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
X.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
X.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
X.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
X.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
X.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
X.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
X.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
X.\" SUCH DAMAGE.
X.\"
X.\"	@(#)banner.6	6.4 (Berkeley) 6/23/90
X.\"
X.TH BANNER 6 "June 23, 1990"
X.UC
X.SH NAME
banner \- print large banner on printer
X.SH SYNOPSIS
X.B /usr/games/banner
X[
X.BI \-w n
X]
message ...
X.SH DESCRIPTION
X.I Banner
prints a large, high quality banner on the standard output.
If the message is omitted, it prompts for and
reads one line of its standard input.  If
X.B \-w
is given, the output is scrunched down from a width of 132 to
X.I n ,
suitable for a narrow terminal.  If
X.I n
is omitted, it defaults to 80.
X.PP
The output should be printed on a hard-copy device, up to 132 columns wide,
with no breaks between the pages. The volume is great enough that you 
may want
a printer or a fast hardcopy terminal, but if you are patient, a
decwriter or other 300 baud terminal will do.
X.SH BUGS
Several ASCII characters are not defined, notably <, >, [, ], \\,
X^, _, {, }, |, and ~.  Also, the characters ", ', and & are funny
looking (but in a useful way.)
X.PP
The
X.B \-w
option is implemented by skipping some rows and columns.
The smaller it gets, the grainier the output.
Sometimes it runs letters together.
X.SH AUTHOR
Mark Horton
END_OF_FILE
if test 2979 -ne `wc -c <'banner-06/banner.6'`; then
    echo shar: \"'banner-06/banner.6'\" unpacked with wrong size!
fi
# end of 'banner-06/banner.6'
fi
if test ! -d 'banner-07' ; then
    echo shar: Creating directory \"'banner-07'\"
    mkdir 'banner-07'
fi
if test ! -d 'banner-08' ; then
    echo shar: Creating directory \"'banner-08'\"
    mkdir 'banner-08'
fi
if test ! -d 'banner-09' ; then
    echo shar: Creating directory \"'banner-09'\"
    mkdir 'banner-09'
fi
if test -f 'banner-09/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-09/Makefile'\"
else
echo shar: Extracting \"'banner-09/Makefile'\" \(96 characters\)
sed "s/^X//" >'banner-09/Makefile' <<'END_OF_FILE'
block: block.o data.o
X	cc block.o data.o -o block
X
prtout: *.c TODO
X	pr TODO *.c | PRMAN -setup
END_OF_FILE
if test 96 -ne `wc -c <'banner-09/Makefile'`; then
    echo shar: \"'banner-09/Makefile'\" unpacked with wrong size!
fi
# end of 'banner-09/Makefile'
fi
if test -f 'banner-09/TODO' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-09/TODO'\"
else
echo shar: Extracting \"'banner-09/TODO'\" \(259 characters\)
sed "s/^X//" >'banner-09/TODO' <<'END_OF_FILE'
X8702.171220
X
X*	Set up with display buffer instead of stream to allow for adding
X	special features.
X	(added: 8702.201336)
X
X8702.201337
X
X*	Set up to use flag to set print width, possibly add feature to
X	use an environment variable.
X
X*	Modify to use font files.
END_OF_FILE
if test 259 -ne `wc -c <'banner-09/TODO'`; then
    echo shar: \"'banner-09/TODO'\" unpacked with wrong size!
fi
# end of 'banner-09/TODO'
fi
if test -f 'banner-09/block.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-09/block.c'\"
else
echo shar: Extracting \"'banner-09/block.c'\" \(1401 characters\)
sed "s/^X//" >'banner-09/block.c' <<'END_OF_FILE'
X#include <stdio.h>
X#include <string.h>
X
X#define LINES		  10
X#define BUFFERSIZE	1024
X
extern char	*data[][LINES];
X
char		buffer[LINES][BUFFERSIZE+1];
X
int min(a,b)
int	a,
X	b;
X{
X    if (a>b)
X	return(b);
X    return(a);
X}
X
main(argc,argv)
int	argc;
char	**argv;
X{
X    short	i,
X		j,
X		k,
X		l,
X		m,
X		idx,
X		idx2,
X		al,
X		sw,
X		tmp,
X		tmp2;
X    char	*p,
X		*ptr;
X
X    while (--argc) {
X	argv++;
X/*
X	for (i=0; i<LINES; i++) {
X	    p = *argv;
X	    while (*p != '\0')
X		printf("%s ",data[*p++][i]);
X	    printf("\n");
X	}
X*/
X	p = *argv;
X	idx = 0;
X	idx2 = 0;
X	for (i=0; i<LINES; i++)
X	    for (j=0; j<BUFFERSIZE; j++)
X		buffer[i][j] = ' ';
X	while (*p != '\0') {
X	    al = strlen(data[*p][0]);
X	    sw = al;
X	    l = 0; m = 0;
X	    for (i=0; i<LINES; i++) {
X		for (j=1; j<=idx2 && buffer[i][idx-j]==' '; j++);
X		for (k=0; *p!=' ' && k<al && data[*p][i][k]==' '; k++);
X		sw = min(sw,j+k);
X		if (i) {
X		    sw = min(sw,j+m);
X		    sw = min(sw,l+k);
X		}
X		l = j; m = k;
X	    }
X	    if (sw)
X		--sw;
X	    tmp = idx + al - sw;
X	    tmp2 = idx-sw+1;
X	    for (i=0; i<LINES; i++)
X		for (j=0; j<min(al,BUFFERSIZE-tmp); j++)
X		    if (data[*p][i][j]!=' ')
X			buffer[i][tmp2+j]=data[*p][i][j];
X	    idx2 = ( *p==' ' ? 0 : tmp);
X	    idx = tmp + 1;
X	    p++;
X	    if (idx>=BUFFERSIZE) {
X		idx = BUFFERSIZE;
X		*p = '\0';
X	    }
X	}
X	for (i=0; i<LINES; i++) {
X	    buffer[i][idx] = '\0';
X	    printf("%s\n",buffer[i]);
X	}
X    }
X}
END_OF_FILE
if test 1401 -ne `wc -c <'banner-09/block.c'`; then
    echo shar: \"'banner-09/block.c'\" unpacked with wrong size!
fi
# end of 'banner-09/block.c'
fi
if test ! -d 'banner-10' ; then
    echo shar: Creating directory \"'banner-10'\"
    mkdir 'banner-10'
fi
if test -f 'banner-10/scripto.alt' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-10/scripto.alt'\"
else
echo shar: Extracting \"'banner-10/scripto.alt'\" \(2652 characters\)
sed "s/^X//" >'banner-10/scripto.alt' <<'END_OF_FILE'
A
X .--.
X( / :
X /--+
X/   |
X
X
B
X .--.
X( / )
X /-<
X/___)
X
X
C
X   .-.
X  /  :
X /
X(__./ @
X
X
D
X .---.
X( /  |
X /   |
X/__,/
X
X
XE
X .----
X( /__
X /
X/___ @
X
X
XF
X .----
X( /__
X /
X/    @
X
X
G
X   .-.
X  /  '
X / -+-
X(__.:
X
X
H
X .-- --
X( /_ /
X /  /
X/  /  @
X
X
I
X   .---
X  ( /
X   /
X__/__ @
X
X
J
X
X    '|
X   / |
X  (__|_@
X  /  |
X (___'
K
X .--   ,
X( / . '
X /-<
X/   \_ @
X
X
L
X    .-.
X   /
X  /
X./____.
X
X
M
X .--..-.
X( ) )  |
X /  |  |
X/   :  | @
X
X
N
X .--.  --
X( ) )  /
X /  | /
X/   :/ @
X
X
O
X .---.
X( /   :
X /    |
X :__ /
X
X
P
X .---.
X( /   )
X /---'
X/      @
X
X
Q
X .---.
X( /   :
X /    |
X :_(><_
X
X
R
X .--.
X( /  )
X /--<
X/    \
X
X
S
X  .-.
X (   '
X  >.
X(___) @
X
X
T
X .-----
X(  /
X  /
X /   @
X
X
U
X .--  --
X( /  /
X /  /
X(_./ @
X
X
V
X .--  --
X( |   /
X  |  /
X  :_/ @
X
X
W
X .--   --
X( |    /
X  | : /
X  :/:/ @
X
X
XX
X .-.  ,-
X(   |/
X  ./|
X /  :__
X
X
Y
X .--  --
X( |   /
X  :_./
X    /  @
X ._/
X
Z
X .----.-
X(   .'
X  ,'
X.'____/
X
X
a
X
X __
X __)
X(__(_
X
X
b
X   /
X  /_
X /  )
X(__/
X
X
c
X
X  ___
X /
X(___
X
X
d
X      /
X  __ /
X /  /
X(__(_ @
X
X
e
X
X  __
X /__)
X(___
X
X  
f
X     .-
X    /
X   /
X__/_ @
X /
X/
g
X
X   __ ,
X  /  /
X (__/_ @
X   /
X(_/
h
X   /
X  /_
X /  )
X/   (_
X
X
i
X
X  *
X /
X(_
X
X
j
X
X     *
X    /
X   / @
X(_/
X
k
X   /
X  /__
X /<
X/  \_
X
X
l
X   /)
X  //
X /
X(_
X
X
m
X
X  _  _
X )' |' )
X/;  :  (_
X
X
n
X
X   _
X )' )
X/;  (_
X
X
o
X
X  __
X /  )
X(__/
X
X
p
X
X    __
X   /  )
X  /_./
X /
X/
q
X
X  __
X /  /
X(_./ @
X  /
X (_
r
X
X  ,__.
X /  /
X/  (__
X
X
s
X
X  __
X (_
X___)
X
X
t
X
X __/_
X  /
X (__
X
X
u
X
X  .  .
X /  /
X(_.(_
X
X
v
X
X .  _
X |  )
X :_/
X
X
w
X
X .     _
X |  .  )
X :_/|_/
X
X
x
X
X  : /
X .+'
X/ :__
X
X
y
X
X .   .
X |  /
X :_/ @
X  /
X-'
z
X
X  __
X  ./
X /__
X
X
X.
X
X
X
X@ @
X
X
X,
X
X
X
X@ @
X'
X
X(
X  /
X,'
X:
X \ @
X
X
X)
X  \
X   :
X  ,'
X / @
X
X
X-
X
X____
X
X     @
X
X
X&
X    |)
X   /|
X /  |)
X(___/\
X
X
X!
X   /
X  /
X /
X@  @
X
X
X/
X   /
X  /
X /
X/  @
X
X
X?
X  .-.
X (   )
X   /
X  .  @
X
X
X'
X  @
X  '
X
X  @
X
X
X:
X
X  @
X
X @ @
X
X
X;
X
X  @
X
X @ @
X '
X
X%
X() /
X  /
X /
X/ ()
X
X
X*
X
X_\|/_
X /|\
X     @
X
X
X$
X  .-/-
X (_/_
X  /  )
X-/--'
X
X
X0
X   __
X  /  :
X /  /
X:__/
X
X
X1
X   _
X   /
X  /
X_/_
X
X
X2
X  __
X    )
X .--'
X(___
X
X
X3
X  __
X    )
X  -<
X.___)
X
X
X4
X  . .
X / /
X'-/-
X /  @
X
X
X5
X  __
X /
X'--.
X___)
X
X
X6
X   __
X  /
X /-.
X(__)
X
X
X7
X ___
X   /
X  /
X :  @
X
X
X8
X  __
X (  )
X /-<
X(___)
X
X
X9
X  __
X /  )
X '-/
X_./ @
X
X
X=
X     .---
X    ( /
X_    /
X(___/  @
X
X
END_OF_FILE
if test 2652 -ne `wc -c <'banner-10/scripto.alt'`; then
    echo shar: \"'banner-10/scripto.alt'\" unpacked with wrong size!
fi
# end of 'banner-10/scripto.alt'
fi
if test -f 'banner-10/scripto.doc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-10/scripto.doc'\"
else
echo shar: Extracting \"'banner-10/scripto.doc'\" \(1223 characters\)
sed "s/^X//" >'banner-10/scripto.doc' <<'END_OF_FILE'
X
X  .-.
X (   '   ___  ,_.    *    __  __/_  __ 
X  >.    /    /  :   /    /  )  /   /  )
X(___)  (___ /   :_ (_   /_./  (__ (__/ 
X                       /               
X                      /                
X
Scripto is a program for building cursive writing from text.  To run scripto,
the file scripto.set must be in the current directory.  You may run scripto
interactively by starting the program and entering any readable text.  The
cursive equivalent will appear on the screen.  Of course, input and output may
be redirected so it is possible to type cursive to disk by running this way:
X"scripto >cursive.txt" or disk to disk using "scripto <input.txt >output.txt"
or to printer with "scripto >prn" (note: when writing to printer - dot matrix
only - compressed mode is recommended).
X
If you wish, you may add or change the "font" dataset: scripto.set. After
looking at a few examples, it should become obvious how a font is stored.
XEach character uses the same number of lines.  The "@" sometimes found on the
X"base" line marks where the next cursive letter would be written.  It is a
primitive form of proportional spacing.
X
XEnjoy!
X
manny juan
manny@wet.UUCP or manny@tcomeng.COM
X5/22/91
END_OF_FILE
if test 1223 -ne `wc -c <'banner-10/scripto.doc'`; then
    echo shar: \"'banner-10/scripto.doc'\" unpacked with wrong size!
fi
# end of 'banner-10/scripto.doc'
fi
if test -f 'banner-10/scripto.pas' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-10/scripto.pas'\"
else
echo shar: Extracting \"'banner-10/scripto.pas'\" \(1677 characters\)
sed "s/^X//" >'banner-10/scripto.pas' <<'END_OF_FILE'
program cursive;
type
X  line=array[0..255]of char;
X  str255=string[255];
X  str80=string[80];
X  fontch=array[-3..2,1..11]of char;
X  fontrec=record
X    width:byte;
X    def:fontch;
X  end;
X
var
X  A:string[255];
X  fonts:array[0..255]of fontrec;
X  Inp:str80;
X  Buf:array[1..6]of str255;
X  Oup:array[-3..2]of line absolute Buf;
X
procedure loadfont;
var
X  f:text;
X  Ltr:byte;
X  S:string[12];
X  i,j,
X  m:integer;
begin
X  assign(f,'scripto.set');
X  reset(f);
X  A:='';
X  fillchar(fonts,sizeof(fonts),#0);
X  while not(eof(f)) do
X    begin
X    readln(f,S);
X    A:=A+S;
X    Ltr:=ord(S[1]);
X    for i:=-3 to 2 do
X      begin
X      readln(f,S);
X      if(i=0)then
X        begin
X        if(copy(S,length(S),1)='@')then
X          delete(S,length(S),1);
X        fonts[Ltr].width:=length(S);
X        end;
X      for j:=1 to length(S) do
X        begin
X        fonts[Ltr].def[i,j]:=S[j];
X        end;
X      end;
X    end;
X  {make blank 6 chars wide}
X  fonts[ord(' ')].width:=6;
end; {loadfont}
X
procedure scripto(Inp:str80);
var
X  ch:char;
X  Ltr:byte;
X  i,j,n,c:integer;
begin
X  fillchar(Oup,sizeof(Oup),' ');
X  c:=0;
X  for n:=1 to length(Inp) do
X    begin
X    Ltr:=ord(Inp[n]);
X    for i:=-3 to 2 do
X      begin
X      for j:=1 to 11 do
X        begin
X        ch:=fonts[Ltr].def[i,j];
X        if(ch>' ')then
X          Oup[i,c+j]:=ch;
X        end;
X      end;
X      c:=c+fonts[Ltr].width+1;
X    end;
X  for i:=1 to 6 do
X    begin
X    Buf[i][0]:=chr(c);
X    writeln(Buf[i]);
X    end;
end; {scripto}
X
begin
X  loadfont;
X  readln(Inp);
X  while not(Inp='') do
X    begin
X    scripto(Inp);
X    readln(Inp);
X    end;
end.
END_OF_FILE
if test 1677 -ne `wc -c <'banner-10/scripto.pas'`; then
    echo shar: \"'banner-10/scripto.pas'\" unpacked with wrong size!
fi
# end of 'banner-10/scripto.pas'
fi
if test -f 'banner-10/scripto.set' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-10/scripto.set'\"
else
echo shar: Extracting \"'banner-10/scripto.set'\" \(2604 characters\)
sed "s/^X//" >'banner-10/scripto.set' <<'END_OF_FILE'
A
X .--.
X( / :
X /--+
X/   |
X
X
B
X .--.
X( / )
X /-<
X/___)
X
X
C
X   .-.
X  /  :
X /
X(__./ @
X
X
D
X .---.
X( /  |
X /   |
X/__,/
X
X
XE
X .----
X( /__
X /
X/___ @
X
X
XF
X .----
X( /__
X /
X/    @
X
X
G
X   .-.
X  /  '
X / -+
X(__.:
X
X
H
X .-- --
X( /_ /
X /  /
X/  /  @
X
X
I
X   .---
X  ( /
X   /
X__/__ @
X
X
J
X     .---
X    ( /
X_    /
X(___/  @
X
X
K
X .--   ,
X( / . '
X /-<
X/   \_ @
X
X
L
X    .-.
X   /
X  /
X./____.
X
X
M
X .--..-.
X( / |  |
X /  |  |
X/   :  | @
X
X
N
X .--.  --
X( / |  /
X /  | /
X/   :/ @
X
X
O
X .---.
X( /   :
X /    |
X :__ /
X
X
P
X .---.
X( /   )
X /---'
X/      @
X
X
Q
X .---.
X( /   :
X /    |
X :_(><_
X
X
R
X .--.
X( /  )
X /--<
X/    \
X
X
S
X  .-.
X (   '
X  >.
X(___) @
X
X
T
X .-----
X(  /
X  /
X /   @
X
X
U
X .--  --
X( /  /
X /  /
X(_./ @
X
X
V
X .--  --
X( |   /
X  |  /
X  :_/ @
X
X
W
X .--   --
X( |    /
X  | : /
X  :/:/ @
X
X
XX
X .-.  ,-
X(   |/
X  ./|
X /  :__
X
X
Y
X .--  --
X( |   /
X  :_./
X    /  @
X ._/
X
Z
X .----.-
X(   .'
X  ,'
X.'____/
X
X
a
X
X __
X __)
X(__(_
X
X
b
X   /
X  /_
X /  )
X(__/
X
X
c
X
X  ___
X /
X(___
X
X
d
X      /
X  __ /
X /  /
X(__(_ @
X
X
e
X
X  __
X /__)
X(___
X
X  
f
X     .-
X    /
X   /
X__/_ @
X /
X/
g
X
X   __ ,
X  /  /
X (__/_ @
X   /
X(_/
h
X   /
X  /_
X /  )
X/   (_
X
X
i
X
X  *
X /
X(_
X
X
j
X
X     *
X    /
X   / @
X(_/
X
k
X   /
X  /__
X /<
X/  \_
X
X
l
X   /)
X  //
X /
X(_
X
X
m
X
X   _  _
X )' |' )
X/   :  (_
X
X
n
X
X   _
X )' )
X/   (_
X
X
o
X
X  __
X /  )
X(__/
X
X
p
X
X    __
X   /  )
X  /_./
X /
X/
q
X
X  __
X /  /
X(_./ @
X  /
X (_
r
X
X  ,_.
X /  :
X/   :_
X
X
s
X
X  __
X (_
X___)
X
X
t
X
X __/_
X  /
X (__
X
X
u
X
X  .  .
X /  /
X(_.(_
X
X
v
X
X .  _
X |  )
X :_/
X
X
w
X
X .     _
X |  .  )
X :_/|_/
X
X
x
X
X  : /
X .+'
X/ :__
X
X
y
X
X .   .
X |  /
X :_/ @
X  /
X-'
z
X
X  __
X  ./
X /__
X
X
X.
X
X
X
X@ @
X
X
X,
X
X
X
X@ @
X'
X
X(
X  /
X,'
X:
X \ @
X
X
X)
X  \
X   :
X  ,'
X / @
X
X
X-
X
X____
X
X     @
X
X
X&
X    |)
X   /|
X /  |)
X(___/\
X
X
X!
X   /
X  /
X /
X@  @
X
X
X/
X   /
X  /
X /
X/  @
X
X
X?
X  .-.
X (   )
X   /
X  .  @
X
X
X'
X  @
X  '
X
X  @
X
X
X:
X
X  @
X
X @ @
X
X
X;
X
X  @
X
X @ @
X '
X
X%
X() /
X  /
X /
X/ ()
X
X
X*
X
X_\|/_
X /|\
X     @
X
X
X$
X  .-/-
X (_/_
X  /  )
X-/--'
X
X
X0
X   __
X  /  :
X /  /
X:__/
X
X
X1
X   _
X   /
X  /
X_/_
X
X
X2
X  __
X    )
X .--'
X(___
X
X
X3
X  __
X    )
X  -<
X.___)
X
X
X4
X  . .
X / /
X'-/-
X /  @
X
X
X5
X  __
X /
X'--.
X___)
X
X
X6
X   __
X  /
X /-.
X(__)
X
X
X7
X ___
X   /
X  /
X :  @
X
X
X8
X  __
X (  )
X /-<
X(___)
X
X
X9
X  __
X /  )
X '-/
X_./ @
X
X
END_OF_FILE
if test 2604 -ne `wc -c <'banner-10/scripto.set'`; then
    echo shar: \"'banner-10/scripto.set'\" unpacked with wrong size!
fi
# end of 'banner-10/scripto.set'
fi
if test ! -d 'banner-11' ; then
    echo shar: Creating directory \"'banner-11'\"
    mkdir 'banner-11'
fi
if test -f 'banner-11/mb.6' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-11/mb.6'\"
else
echo shar: Extracting \"'banner-11/mb.6'\" \(1389 characters\)
sed "s/^X//" >'banner-11/mb.6' <<'END_OF_FILE'
X.TH MB 6L
X.SH NAME
mb \- a banner program with external font file
X.SH SYNOPSIS
mb [<opts>] [<text>] [<opts>]
X.SH DESCRIPTION
mb is just another banner program. The difference to other programs of
this kind is the use of an external font file. So you can design your
own fonts to use with mb. The format of these font files can be found
in the
X.BR Read.Me .
X.PP
Several options are supported. 
X.IP \-o=<file>
use <file> instead of the default font file.
X.IP \-l
use the 16x8 font instead of the 8x8 font (producing larger banners).
X.IP \-w=<num>
print banner with a larger width. Default is 1.
X.IP \-h=<num>
print banner with a larger height. Default is 1.
X.IP \-c
print the banner cursive.
X.IP \-C
print the banner back cursive.
X.IP \-i
invert the banner.
X.IP \-f=<char>
use <char> as the foreground character. Default is `*'.
X.IP \-b=<char>
use <char> as the background character. Default is Space.
X.IP \-s
use the character as foreground which is currently printed.
X.SH HISTORY
mb had been developed for OS-9/68000 and had then be adapted to Unix(tm).
So there is another font format only useful on OS-9/68000 systems which
describes a data module containing the font data. It
X.B may
also run on MS-DOS and Atari\ ST but this hasn't been tested.
X.SH FILES
The default fontfile is /dd/SYS/MB_Font on OS-9/68000 systems,
X/etc/MB_Font on Unix systems and \\MB_FONT on MS-ODS style systems.
END_OF_FILE
if test 1389 -ne `wc -c <'banner-11/mb.6'`; then
    echo shar: \"'banner-11/mb.6'\" unpacked with wrong size!
fi
# end of 'banner-11/mb.6'
fi
if test ! -d 'banner-12' ; then
    echo shar: Creating directory \"'banner-12'\"
    mkdir 'banner-12'
fi
if test -f 'banner-12/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-12/Makefile'\"
else
echo shar: Extracting \"'banner-12/Makefile'\" \(629 characters\)
sed "s/^X//" >'banner-12/Makefile' <<'END_OF_FILE'
X################################################################################
X#                             Makefile for "banner"                            #
X################################################################################
X
X#CFLAGS = -g
CFLAGS = -O
LFLAGS =
X
INSTALL_BANNER = /usr/local/bin/Banner
X
OBJ = main.o banner.o font.o
X
all: banner
X
install: banner
X	cp banner $(INSTALL_BANNER)
X	strip $(INSTALL_BANNER)
X	chmod 755 $(INSTALL_BANNER)
X
clean:
X	rm -f $(OBJ) banner
X
banner: $(OBJ)
X	cc $(LFLAGS) $(OBJ) -o banner
X
lint:
X	lint -bchux *.c
X
main.o: main.c flags.h
X
banner.o: banner.c flags.h
X
font.o: font.c
END_OF_FILE
if test 629 -ne `wc -c <'banner-12/Makefile'`; then
    echo shar: \"'banner-12/Makefile'\" unpacked with wrong size!
fi
# end of 'banner-12/Makefile'
fi
if test -f 'banner-12/README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-12/README'\"
else
echo shar: Extracting \"'banner-12/README'\" \(908 characters\)
sed "s/^X//" >'banner-12/README' <<'END_OF_FILE'
X                         Banner: The ultimative banner
X                         =============================
X
Revision history:
X
X1.00 -- Written in 1987 by Wolfgang Ocker, reccoware systems, Puchheim.
X1.01 -- Tested on OS-9/68000, SunOS, System V 3.2.
X1.02 -- Some cleanups by Frank Kaefer (fkk@stasys.sta.sub.org).
X1.10 -- Paul E. Black (paul@delfin.com):
X        - Added a C interface to the banner routine itself so it
X          can be linked with an application.  The user interface now
X          sets flags and calls the C interface.
X        - Letters can be any height, not just single or double.
X        - Multi-height italic are smoother: it shifts one column per
X          printed row rather than one double-column per double-row.
X        - Cleaned up and sped up some of the low level loops some what.
X1.11 -- Banner is now under the GNU GENERAL PUBLIC LICENSE,
X        Version 2, June 1991 (fkk)
END_OF_FILE
if test 908 -ne `wc -c <'banner-12/README'`; then
    echo shar: \"'banner-12/README'\" unpacked with wrong size!
fi
# end of 'banner-12/README'
fi
if test -f 'banner-12/banner.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-12/banner.c'\"
else
echo shar: Extracting \"'banner-12/banner.c'\" \(1512 characters\)
sed "s/^X//" >'banner-12/banner.c' <<'END_OF_FILE'
X#include <stdio.h>
X#include "flags.h"
X
banflags banFlagDefault = {
X	0,	/* not italic */
X	0,	/* single width */
X	0,	/* no leading half space */
X	1,	/* single height */
X	'*'	/* use asterisk */
X	};
X
extern unsigned char charset[];	/* Zeichensatz */
X
X#define ROWSPERCH (8)
X#define COLSPERCH (8)
X
X/*
X * b a n n e r   f u n c t i o n
X */
X
banner(fp, str, flagsp)
XFILE		*fp;
char		*str;
banflags	*flagsp;
X{
X	int	linenum, chnum, j, k;
X	int	ch_off;
X	char	ch, *space;
X
X	if (flagsp->dblwidth) {
X		space = "  ";
X	} else {
X		space = " ";
X	}
X
X	for (linenum = 0; linenum < ROWSPERCH; linenum++) {
X		for (j = 0; j < flagsp->height; j++) {
X			if (flagsp->halfspace) {
X				for (k = 0; k < COLSPERCH/2; k++)
X					(void)fputs(space, fp);
X			}
X
X			if (flagsp->italic) {
X				/* shift for italics */
X				for (k = flagsp->height * (ROWSPERCH - linenum) - (j + 1);
X					k > 0; k--)
X					(void)putc(' ', fp);
X			}
X
X			for (chnum = 0; chnum < strlen(str); chnum++) {
X				ch	= str[chnum];
X				ch_off	= (int) ch * 8;
X				outline(fp, (flagsp->bannerch == '\0') ? ch : flagsp->bannerch,
X				charset[ch_off + linenum],
X				(int)flagsp->dblwidth);
X			}
X
X			(void)putc('\n', fp);
X		}
X	}
X}
X
X
X/*
X * o u t l i n e
X */
X
static outline(fp, outchar, outbyte, dblsize)
XFILE 		*fp;
char 		outchar;
unsigned char 	outbyte;
int		dblsize;
X{
X	int bc;
X	char ch;
X
X	for (bc = ROWSPERCH-1; bc >= 0; bc--) {
X		ch = (outbyte & (0x01 << bc)) ? outchar : ' ';
X		(void)putc(ch, fp);
X		if (dblsize) {
X			/* if double size, repeat it */
X			(void)putc(ch, fp);
X		}
X	}
X}
END_OF_FILE
if test 1512 -ne `wc -c <'banner-12/banner.c'`; then
    echo shar: \"'banner-12/banner.c'\" unpacked with wrong size!
fi
# end of 'banner-12/banner.c'
fi
if test -f 'banner-12/flags.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-12/flags.h'\"
else
echo shar: Extracting \"'banner-12/flags.h'\" \(472 characters\)
sed "s/^X//" >'banner-12/flags.h' <<'END_OF_FILE'
X/* flag structure for banner routine */
X
typedef struct {
unsigned int	italic:1,	/* true - letters tilted right */
X		dblwidth:1,	/* true - letters 2x as wide */
X		halfspace:1;	/* true - add leading half space (centering) */
int		height;		/* number of lines per 'pixel' */
X				/* (2 gives double height, 1 gives normal) */
char		bannerch;	/* char. to use for 'pixel.'  0 - print each */
X				/* letter with the letter itself. */
X} banflags;
X
extern banflags banFlagDefault;
END_OF_FILE
if test 472 -ne `wc -c <'banner-12/flags.h'`; then
    echo shar: \"'banner-12/flags.h'\" unpacked with wrong size!
fi
# end of 'banner-12/flags.h'
fi
if test -f 'banner-12/main.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'banner-12/main.c'\"
else
echo shar: Extracting \"'banner-12/main.c'\" \(3287 characters\)
sed "s/^X//" >'banner-12/main.c' <<'END_OF_FILE'
X#include <stdio.h>
X#ifdef OSK
X#include <modes.h>
X#else
X#define S_IREAD 0
X#endif
X#include "flags.h"
X
X#define TRUE  1
X#define FALSE 0
X
extern int	errno;
extern void	exit();
X
X#ifdef OSK
int sighandler() {}
X#endif
X
X/*
X * m a i n
X */
X
main(argc, argv)
int	argc;
char	*argv[];
X{
X	char		*str, strbuf[200];
X	int		i, j, strnum;
X	FILE		*infp;
X	char		*from;
X#ifdef OSK
X	char		*plife;
X#endif
X	banflags	flags;
X
X	flags		= banFlagDefault;
X	strnum		= 0;
X	from		= NULL;
X#ifdef OSK
X	plife		= NULL;
X#endif
X
for (i = 1; i < argc; i++)
X	if (argv[i][0] == '-')
X		for (j = 1; j < strlen(argv[i]); j++)
X			switch(tolower(argv[i][j])) {
X			case '?':
X				usage();
X				exit(1);
X
X			case 'i':	/* italic printing */
X				flags.italic = TRUE;
X				break;
X
X			case 'd':	/* double sized characters */
X				flags.height = 2;
X				flags.dblwidth = TRUE;
X				break;
X#ifdef OSK
X			case 'l':	/* secret option for OSK */
X				plife = argv[i] + j + (argv[i][j+1] == '=' ? 2 : 1);
X				j = strlen(argv[i]);
X				break;
X#endif
X			case 'c':	/* character for banner */
X				j += argv[i][j+1] == '=' ? 2 : 1;
X				flags.bannerch = argv[i][j];
X				break;
X
X			case 's':	/* use character */
X				flags.bannerch = '\0';
X				break;
X
X			case 'z':	/* get text from */
X				if (from) {
X					usage();
X					(void)fputs("multiple 'z' options not allowed\n", stderr);
X					exit(1);
X				}
X				from = argv[i] + j + (argv[i][j+1] == '=' ? 2 : 1);
X				j = strlen(argv[i]);
X				break;
X
X			default:
X				usage();
X				(void)fprintf(stderr, "unknown option '%c'\n", argv[i][j]);
X				exit(1);
X				}
X	else
X		strnum++;     /* count number of strings */
X
X	if (strnum == 0 && from == NULL) {
X		usage();
X#ifdef OSK
X		exit(_errmsg(1, "no string given\n"));
X#else
X		(void)fputs("no string given\n", stderr);
X		exit(1);
X#endif
X	}
X
X	if (strnum && from) {
X		usage();
X#ifdef OSK
X		exit(_errmsg(1, "'z' option not allowed if string(s) given\n"));
X#else
X		(void)fputs("'z' option not allowed if string(s) given\n", stderr);
X		exit(1);
X#endif
X	}
X
X	if (from) {
X		if (from[0]) {
X			if ((infp = fopen(from, "r")) == NULL) {
X#ifdef OSK
X				exit(_errmsg(errno, "can't open '%s'\n", from));
X#else
X				(void)fprintf(stderr, "can't open '%s'\n", from);
X				exit(errno);
X#endif
X			}
X		}
X		else
X			infp = stdin;
X	}
X
X#ifdef OSK
X	if (plife && !strcmp(plife, "dont_kill_me"))
X		intercept(sighandler);
X#endif
X
X	str	= strbuf;
X	i	= 1;
X	while (TRUE) {
X		if (from) {	/* read strings from file/stdin */
X			if (fgets(strbuf, sizeof(strbuf)-1, infp) == NULL)
X				break;
X			strbuf[strlen(strbuf)-1] = '\0';
X		}
X		else {		/* get strings from argument line */
X			if ((str = argv[i++]) == NULL)
X				break;
X			if (str[0] == '-')
X				continue;
X		}
X		/* call the banner subroutine */
X		banner(stdout, str, &flags);
X	}
X	return 0;
X}
X
X/*
X * u s a g e
X */
X
usage()
X{
X	(void)fputs("Syntax: banner [<opts>] {<string>} [<opts>]\n", stderr);
X	(void)fputs("Function: prints a banner to stdout\n", stderr);
X	(void)fputs("Options:\n", stderr);
X	(void)fputs("     -i         prints italic\n", stderr);
X	(void)fputs("     -d         double size\n", stderr);
X	(void)fputs("     -c=<char>  character\n", stderr);
X	(void)fputs("     -s         use same character\n", stderr);
X	(void)fputs("     -z         read strings from standard input\n", stderr);
X	(void)fputs("     -z=<file>  read strings from <file>\n", stderr);
X}
END_OF_FILE
if test 3287 -ne `wc -c <'banner-12/main.c'`; then
    echo shar: \"'banner-12/main.c'\" unpacked with wrong size!
fi
# end of 'banner-12/main.c'
fi
if test ! -d 'banner-13' ; then
    echo shar: Creating directory \"'banner-13'\"
    mkdir 'banner-13'
fi
if test ! -d 'cursive-01' ; then
    echo shar: Creating directory \"'cursive-01'\"
    mkdir 'cursive-01'
fi
if test -f 'cursive-01/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'cursive-01/Makefile'\"
else
echo shar: Extracting \"'cursive-01/Makefile'\" \(466 characters\)
sed "s/^X//" >'cursive-01/Makefile' <<'END_OF_FILE'
CFLAGS = -g
X
cursive: cursive.o x.o xs.o
X	cc -g -o cursive cursive.o x.o xs.o
X
x.o: x.c
X
xs.o: xs.c
X
x.c: font.c
X	xstr font.c
X
xs.c: font.c
X	xstr font.c
X
X# This is for use if you haven't got the xstr command.  The program works
X# the same, but is slightly bigger.
X
lcursive: cursive.o font.o
X	cc -g -o lcursive cursive.o font.o
X
cursive.shar: cursive.c font.c cursive.h cursive.6 Makefile shar
X	shar cursive.c font.c cursive.h cursive.6 Makefile shar > cursive.shar
END_OF_FILE
if test 466 -ne `wc -c <'cursive-01/Makefile'`; then
    echo shar: \"'cursive-01/Makefile'\" unpacked with wrong size!
fi
# end of 'cursive-01/Makefile'
fi
if test -f 'cursive-01/README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'cursive-01/README'\"
else
echo shar: Extracting \"'cursive-01/README'\" \(424 characters\)
sed "s/^X//" >'cursive-01/README' <<'END_OF_FILE'
This is a program for generating horizontal cursive banners.  It's main
use is for generating cute signatures for email.  It is copyrighted by
Jan Wolter, but may be distributed freely.  Have what fun you can...
X
X				  ___                _     __  _
X				 (   >              ' )   /   // _/_
X				  __/___.  ____      / / / __|/  /  _  __
X				 / / (_/|_/ / <__   (_(_/ (_) \_<__</_/ (__
X				<_/
X					janc@crim.eecs.umich.edu
X
END_OF_FILE
if test 424 -ne `wc -c <'cursive-01/README'`; then
    echo shar: \"'cursive-01/README'\" unpacked with wrong size!
fi
# end of 'cursive-01/README'
fi
if test -f 'cursive-01/cursive.6' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'cursive-01/cursive.6'\"
else
echo shar: Extracting \"'cursive-01/cursive.6'\" \(1300 characters\)
sed "s/^X//" >'cursive-01/cursive.6' <<'END_OF_FILE'
X.TH CURSIVE 6 "24 July 1985"
X.UC
X.SH NAME
cursive \- print text in cursive script
X.SH SYNOPSIS
X.B /usr/games/cursive
X[
X.BI \-i n
X]
X[
X.BI \-t n
X]
X[message]
X.SH DESCRIPTION
X.I Cursive
prints a line of text in a rather crude cursive script.
It is intended for use mainly for the generation of decorative signatures
for electronic mail.
If message text is given on the command line, that text is used.
Otherwise the text will be read from standard input up to an end of file.
The
X.B \-i
option sets the minimum spacing between adjacent characters.
The default is
X.B \-i1 .
The
X.B \-t
option sets the length of the trailing lines on the end of each word.
The default is
X.B \-t1 .
X.PP
The '_' character is treated in a special way.  It may be inserted in
the text anywhere you wish to lengthen a connecting line between two
letters.
X.SH BUGS
Many ASCII characters are not defined, notably the numbers and symbols.
Punctuation is mostly available.
Some characters are rather ugly.
The author has lousy handwriting.
X.SH AUTHOR
Jan Wolter.  UUCP mail to janc@crim.eecs.umich.edu
X.SH COPYRIGHT
This program and the cursive font it generates are copyrighted by Jan Wolter.
Both may be freely used and distributed in any way whatsoever, so long as
the author's name is left in the source code and documentation.
END_OF_FILE
if test 1300 -ne `wc -c <'cursive-01/cursive.6'`; then
    echo shar: \"'cursive-01/cursive.6'\" unpacked with wrong size!
fi
# end of 'cursive-01/cursive.6'
fi
if test -f 'cursive-01/cursive.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'cursive-01/cursive.h'\"
else
echo shar: Extracting \"'cursive-01/cursive.h'\" \(544 characters\)
sed "s/^X//" >'cursive-01/cursive.h' <<'END_OF_FILE'
struct letter {
X	char *line[6];			/* What's on each of the six lines */
X	char spcs[6];			/* Number of leading spaces for each */
X	short tailin,tailout;		/* Where the lines in and out go */
X	};
X
X/* Special Codes for Character Table */
X
X#define XX  -1		/* Ignore character */
X#define SP  -2          /* Space */
X#define ST  -3          /* Extend trailer */
X#define SA  -4		/* Alternate font number */	/* Not used */
X#define SN  -5		/* Numbers */			/* Not used */
X
X#define CHARWIDTH 10
X
extern struct letter list[];
extern short code1[], code2[];
END_OF_FILE
if test 544 -ne `wc -c <'cursive-01/cursive.h'`; then
    echo shar: \"'cursive-01/cursive.h'\" unpacked with wrong size!
fi
# end of 'cursive-01/cursive.h'
fi
if test ! -d 'cursive-02' ; then
    echo shar: Creating directory \"'cursive-02'\"
    mkdir 'cursive-02'
fi
if test -f 'cursive-02/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'cursive-02/Makefile'\"
else
echo shar: Extracting \"'cursive-02/Makefile'\" \(466 characters\)
sed "s/^X//" >'cursive-02/Makefile' <<'END_OF_FILE'
CFLAGS = -O
X
cursive: cursive.o x.o xs.o
X	cc -g -o cursive cursive.o x.o xs.o
X
x.o: x.c
X
xs.o: xs.c
X
x.c: font.c
X	xstr font.c
X
xs.c: font.c
X	xstr font.c
X
X# This is for use if you haven't got the xstr command.  The program works
X# the same, but is slightly bigger.
X
lcursive: cursive.o font.o
X	cc -g -o lcursive cursive.o font.o
X
cursive.shar: cursive.c font.c cursive.h cursive.6 Makefile shar
X	shar cursive.c font.c cursive.h cursive.6 Makefile shar > cursive.shar
END_OF_FILE
if test 466 -ne `wc -c <'cursive-02/Makefile'`; then
    echo shar: \"'cursive-02/Makefile'\" unpacked with wrong size!
fi
# end of 'cursive-02/Makefile'
fi
if test -f 'cursive-02/cursive.6' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'cursive-02/cursive.6'\"
else
echo shar: Extracting \"'cursive-02/cursive.6'\" \(1300 characters\)
sed "s/^X//" >'cursive-02/cursive.6' <<'END_OF_FILE'
X.TH CURSIVE 6 "24 July 1985"
X.UC
X.SH NAME
cursive \- print text in cursive script
X.SH SYNOPSIS
X.B /usr/games/cursive
X[
X.BI \-i n
X]
X[
X.BI \-t n
X]
X[message]
X.SH DESCRIPTION
X.I Cursive
prints a line of text in a rather crude cursive script.
It is intended for use mainly for the generation of decorative signatures
for electronic mail.
If message text is given on the command line, that text is used.
Otherwise the text will be read from standard input up to an end of file.
The
X.B \-i
option sets the minimum spacing between adjacent characters.
The default is
X.B \-i1 .
The
X.B \-t
option sets the length of the trailing lines on the end of each word.
The default is
X.B \-t1 .
X.PP
The '_' character is treated in a special way.  It may be inserted in
the text anywhere you wish to lengthen a connecting line between two
letters.
X.SH BUGS
Many ASCII characters are not defined, notably the numbers and symbols.
Punctuation is mostly available.
Some characters are rather ugly.
The author has lousy handwriting.
X.SH AUTHOR
Jan Wolter.  UUCP mail to janc@crim.eecs.umich.edu
X.SH COPYRIGHT
This program and the cursive font it generates are copyrighted by Jan Wolter.
Both may be freely used and distributed in any way whatsoever, so long as
the author's name is left in the source code and documentation.
END_OF_FILE
if test 1300 -ne `wc -c <'cursive-02/cursive.6'`; then
    echo shar: \"'cursive-02/cursive.6'\" unpacked with wrong size!
fi
# end of 'cursive-02/cursive.6'
fi
if test -f 'cursive-02/cursive.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'cursive-02/cursive.h'\"
else
echo shar: Extracting \"'cursive-02/cursive.h'\" \(544 characters\)
sed "s/^X//" >'cursive-02/cursive.h' <<'END_OF_FILE'
struct letter {
X	char *line[6];			/* What's on each of the six lines */
X	char spcs[6];			/* Number of leading spaces for each */
X	short tailin,tailout;		/* Where the lines in and out go */
X	};
X
X/* Special Codes for Character Table */
X
X#define XX  -1		/* Ignore character */
X#define SP  -2          /* Space */
X#define ST  -3          /* Extend trailer */
X#define SA  -4		/* Alternate font number */	/* Not used */
X#define SN  -5		/* Numbers */			/* Not used */
X
X#define CHARWIDTH 10
X
extern struct letter list[];
extern short code1[], code2[];
END_OF_FILE
if test 544 -ne `wc -c <'cursive-02/cursive.h'`; then
    echo shar: \"'cursive-02/cursive.h'\" unpacked with wrong size!
fi
# end of 'cursive-02/cursive.h'
fi
if test ! -d 'gothic' ; then
    echo shar: Creating directory \"'gothic'\"
    mkdir 'gothic'
fi
echo shar: End of archive 1 \(of 7\).
cp /dev/null ark1isdone
MISSING=""
for I in 1 2 3 4 5 6 7 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 7 archives.
    rm -f ark[1-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
