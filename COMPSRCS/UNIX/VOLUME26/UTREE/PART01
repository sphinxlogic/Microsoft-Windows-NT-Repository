Newsgroups: comp.sources.unix
From: klin@iat.uni-paderborn.de (Peter Klingebiel)
Subject: v26i064: utree - screen oriented filesystem utility (V3.03b-um), Part01/08
Sender: unix-sources-moderator@pa.dec.com
Approved: vixie@pa.dec.com

Submitted-By: klin@iat.uni-paderborn.de (Peter Klingebiel)
Posting-Number: Volume 26, Issue 64
Archive-Name: utree/part01

[ I edited the Makefile to add "clean" targets and make "install" more
  portable.  I also edited README to explain some packaging changes.

  This is a highly portable UNIX version of the popular DOS "xtree"
  program.  It won't make you want to abandon your shell, but for fast
  dired-like functionality without the overhead of GNU Emacs, this is
  the best thing I've seen.					--vix ]

Utree is a screen oriented filesystem utility for navigation thru fileystems
and doing some default and user defined commands on directories and files.

For usage and documentation see the manual pages utree and utree.prlist.

For copyright notice, warranty and distribution conditions see COPYRIGHT.

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 1 (of 8)."
# Contents:  BUGS README TODO bin bin/qtree bin/utree.backup
#   bin/utree.mklist bin/xtree doc doc/utree.prlist.1 lib
#   lib/utree.binding lib/utree.startup src src/help.h src/hist.h
#   src/patchlevel.h sup sup/README sup/getopt.c sys sys/Makefile.286
#   sys/Makefile.AIX sys/Makefile.APP sys/Makefile.BSD
#   sys/Makefile.CON sys/Makefile.M16 sys/Makefile.M32
#   sys/Makefile.MIPS sys/Makefile.RCU sys/Makefile.SCO
#   sys/Makefile.SEQ sys/Makefile.SGI sys/Makefile.SUN
#   sys/Makefile.ULT sys/Makefile.V.2 sys/Makefile.V.3
#   sys/Makefile.VAX sys/Makefile.X23 sys/conf.h.BSD sys/conf.h.CON
#   sys/conf.h.SUN sys/conf.h.V.2 sys/conf.h.V.3 sys/conf.h.VAX tst
#   tst/fionread.c tst/sigwinch.c
# Wrapped by vixie@cognition.pa.dec.com on Mon Sep  7 14:39:53 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'BUGS' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'BUGS'\"
else
echo shar: Extracting \"'BUGS'\" \(1770 characters\)
sed "s/^X//" >'BUGS' <<'END_OF_FILE'
X
BUGS, bugs, bug fixes and extensions for utree 3.03-um, klin
X
X==============================================================================
X
patchlevel a: utree 3.03a-um, klin, Sun Mar 15 19:08:25 1992
X
X------------------------------------------------------------------------------
X
Bug:    Window resizing has no effect for utree
XFix:    Handling of 8 bit characters changed (keys.h, term.c, bind.c)
X
Bug:    Bad video attributes after clearing to end of line or display
X	on some terminal types
XFix:    Handle ms/msgr attribute (term.c)
X
Bug:    No visible cursor if entering a key to bind.
XFix:    Turned on cursor before getchar() (bind.c)
X
Bug:    If defining a filetype command the definition is regarded if
X	no comment is given.
XFix:    Handle empty comment (vars.c)
X
Bug:    If creating a new directory at bottom of the tree window a
X	following change to this directory is out of tree window.
XFix:    Check in gotree() if cdlist is on tree window (tree.c)
X
Bug:    No graphic characters on AIX 3.2.
XFix:    Used f1 for as and f0 for ae (term.c, utree.prlist.c)
X
X------------------------------------------------------------------------------
X
XExt:    Search in history list by number (!num) or string (!string) (hist.c)
X
X==============================================================================
X
patchlevel b: utree 3.03b-um, klin, Thu Mar 19 10:58:09 1992
X
X------------------------------------------------------------------------------
X
Bug:    Core dump when entering C-u in line editor
XFix:    Catch unhandled key symbols K_UP, K_STR, K_INV in editline() (edit.c)
X
Bug:    Utree hangs if defining a not pre-defined command variable
XFix:    Don't free empty strings (vars.c)
X
X------------------------------------------------------------------------------
END_OF_FILE
if test 1770 -ne `wc -c <'BUGS'`; then
    echo shar: \"'BUGS'\" unpacked with wrong size!
fi
# end of 'BUGS'
fi
if test -f 'README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'README'\"
else
echo shar: Extracting \"'README'\" \(11659 characters\)
sed "s/^X//" >'README' <<'END_OF_FILE'
X
X           UTREE - screen oriented filesystem utility
X             README, klin, Mon Feb 24 20:02:52 1992
X
X------------------------------------------------------------------------------
X
Utree is a screen oriented filesystem utility for navigation thru fileystems
and doing some default and user defined commands on directories and files.
X
XFor usage and documentation see the manual pages utree and utree.prlist.
X
XFor copyright notice, warranty and distribution conditions see COPYRIGHT.
X
X------------------------------------------------------------------------------
X
Utree is first implemented and tested on a PCS CADMUS 9230 (Motorola MC68010)
running MUNIX V.2/07 (System V.2) and then ported to, compiled and tested on
some others machines running UNIX System V.3, BSD4.2 and BSD4.3 or look alikes.
The release utree 3.03-um is developed on a MIPS RC3230 running RISC/os 4.51.
X
X    + MIPS RC3230, RISC/os 4.51 (System V.3, MIPS R3000)
X    + PCS Cadmus 9600, MUNIX V.3M3.2 (System V.3, MC68020)
X    + PCS Cadmus 9900, MUNIX V.3R3.2 (RISC/os 4.0 like System V.3, MIPS R[23]000)
X    + SUN SPARCstation2, SunOS 4.1.1 (BSD4.3, SPARC)
X    + Silicon Graphics 4D, IRIX V.3.2.2 (System V.3, MIPS R[23]000)
X    + IBM 520, AIX 3.1 (System V.3, RS/6000)
X    + HP Vectra, SCO UNIX/386 V.3.2 (System V.3, i486)
X    + NoName-AT386, SCO XENIX SysV 2.3.2 386 GT (by Rolf Gebhardt)
X    + Sequent Symmetrie, Dynix i386 2.0v2 (BSD 4.2, 10 x i386)
X    + Convex C120, ConvexOS 8.1 (BSD 4.2)
X    + Nixdorf TARGON/35, TOS 3.2-03 (BSD 4.2)
X    + DEC Decstation 5000/200, Ultrix-32 1.3 (Rev. 54) (BSD 4.3, MIPS R3000)
X    + DEC Vaxstation 3100, Ultrix-32 1.3 (Rev. 9) (BSD 4.3, VAX)
X    + Apollo Domain DN4500, DomainIX 9.5 (BSD4.2 and System V)
X    + DEC VAX/750, 4.3 BSD UNIX
X
Other known ports are done to a lot of other boxes and UNIXes.
X
X------------------------------------------------------------------------------
X
X    If you wish to install utree on your system do the following steps:
X
X    1 CHECK if you have all source files. The file MANIFEST contains a
X      list of all distributed files with a short description.
X
X    2 CHECK AND CHANGE Makefile AND src/Makefile FOR YOUR SYSTEM IF NEEDED.
X      The Makefiles should be self explanatory enough for changes you have
X      to do. There are some example Makefiles for different systems contained
X      in the directory sys. For a complete list of defines and some hints
X      see below.
X
X	[ for comp.sources.unix, there is no default Makefile.  you must
X	  select one from sys/Makefile.* and either copy or link it to
X	  src/Makefile.  the author's Makefile is shipped as sys/Makefile.SCO.
X									--vix ]
X
X    3 CHECK AND CHANGE src/conf.h FOR YOUR SYSTEM IF NEEDED.
X      See below for the meaning of some defines in conf.h you may have to
X      change for your system. There are some example configuration files
X      conf.h for different systems contained in the directory sys.
X      If your system doesn't support vsprintf(3) for formatted output to
X      a string with variable number of arguments (most BSD systems don't)
X      and you wish to use this function look at directory sup containing
X      a public domain version of vsprintf(3) and vfprintf(3).
X      Copy vsprintf.c to directory src and change your Makefile for
X      compiling vsprintf and linking vsprintf into utree. For a complete
X      list of defines in conf.h and some hints see below.
X
X	[ for comp.sources.unix, there is no default conf.h.  you must
X	  select one from sys/conf.h.* and either copy or link it to
X	  src/conf.h.  the author's conf.h is shipped as sys/conf.h.SCO.
X									--vix ]
X
X    4 Call 'make all' or 'make' to compile and link utree and utree.prlist.
X
X    5 Call 'bin/utree .' for testing utree.
X
X    6 Check and edit bin/utree.backup if you wish to allow filesystem or
X      directory backups from within utree. Check and edit bin/utree.mklist
X      for creating directory tree lists from without utree (this is normally
X      not needed).
X
X    7 See the example startup file lib/utree.startup and the example
X      key binding file lib/utree.binding for usage of startup files
X      and key binding files.
X
X    8 Call 'make install' to install the utree executables into a public bin
X      directory defined in the Makefile. May be you have to login as root
X      before.
X
X    9 Have fun and enjoy.
X
X------------------------------------------------------------------------------
X
X    Currently distributed Makefiles and configuration files conf.h in sys are
X
X    sys/*.286  - UNIX V/286/386 compatibility mode (MSC under SCO)
X    sys/*.AIX  - AIX 3.1 (IBM 520, RS/6000)
X    sys/*.APP  - DomainIX 9.5 (Apollo Domain DN4500)
X    sys/*.BSD  - Generic BSD4.2 and BSD4.3
X    sys/*.CON  - ConvexOS 8.1 (Convex C120)
X    sys/*.M16  - MUNIX V2/07 (PCS Cadmus 9230, MC68010)
X    sys/*.M32  - MUNIX V3.2 (PCS Cadmus 9600, MC68020)
X    sys/*.MIPS - RISC/os 4.51 (MIPS RC3230, R3000)
X    sys/*.RCU  - MUNIX V3.2 (PCS Cadmus 99xx, MIPS R2000/3000)
X    sys/*.SCO  - SCO UNIX System V/386 3.2 (HP Vectra)
X    sys/*.SEQ  - Dynix i386 (Sequent Symmetrie, 10xi386)
X    sys/*.SGI  - IRIX V.3.2 (Silicon Graphics 4D, MIPS R3000)
X    sys/*.SUN  - SunOS 4.1.1 (SUN4, SPARC)
X    sys/*.ULT  - Ultrix-32 3.1 (DECstation, VAXstation)
X    sys/*.V.2  - Generic System V.2
X    sys/*.V.3  - Generic System V.3
X    sys/*.VAX  - 4.3 BSD UNIX (DEC VAX/750)
X    sys/*.X23  - SCO XENIX SysV 2.3.2 386GT (NoName-AT386)
X
X------------------------------------------------------------------------------
X
X    Utree is written in standard K&R C, not in ANSI C. If you are using an
X    ANSI C compiler check and set the appropiate compiler option for accepting
X    standard C code. The other compile and link options in the Makefile are
X
X    CFLAGS   normal compiler flags and defines (for utree and utree.prlist)
X    MFLAGS   floating point compiler flag (for utree.prlist)
X    LFLAGS   loader flags (for utree and utree.prlist)
X    LIBS     needed libraries (for utree and utree.prlist)
X    MLIBS    floating point library (for utree.prlist)
X    LLIBS    local libraries (i.e. shared libraries)
X    CC       the C compiler command
X    SRCS     list of utree source files
X    OBJS     list of utree object files
X
X    If your system is BSD or BSD-like and doesn't support the getopt(3)
X    commandline parser function, copy getopt.c from directory sup to the
X    source directory sys and add getopt.c and getopt.o to the SRCS and
X    OBJS variables in src/Makefile. See sys/Makefile.BSD for and example.
X    The tree list program utree.prlist also uses getopt().
X
X    Possible defines in the makefile src/Makefile
X
X    define BSD for BSD systems (default: SYSV)
X    define AIX for IBMs UNIX version AIX
X    define XENIX for XENIX system
X    define APOLLO for adding some special stuff for APOLLO networks
X    define VOID=int if your compiler doen't support void
X    define UTLIB=libdir if not defined in conf.h (see below)
X
X------------------------------------------------------------------------------
X
X    Meaning of some defines in the system configuration file conf.h:
X
X    #define HASVPRINTF if your system is BSD or BSD-like and supports
X      the varargs vsprintf(3) function. Some BSD systems need additional
X      libraries at link time for vsprintf(). The directory sup contains
X      a public domain version of vsprintf() which you can compile and
X      link into utree. If you want to use this function copy vsprintf.c
X      from directory sup to src and change the makefile to include
X      vsprintf.c and vsprintf.o in SRCS and OBJS. But you should test
X      vsprintf before because usage vsprintf may not work or result in
X      core dumps! SYSV needs not to define HASVPRINTF.
X
X    #define HASFIONREAD if your system is SYSV and supports the FIONREAD
X      call to ioctl(2) to get the number of characters to read i.e. for
X      typeahead(). Check if ioctl(0, FIONREAD, &n) sets n to the correct
X      number of characters already typed in. My own system (MUNIX V.2/07)
X      i.e. fails, but most SYSV, especially those which support sockets,
X      return the correct result in n. The directory tst contains a simple
X      test program fionread.c for testing the ioctl-call. BSD needs not
X      to define HASFIONREAD.
X
X    #define HASVFORK if your system is SYSV and supports the vfork(2)
X      systemcall. My own system i.e. supports the vfork(2) systemcall.
X      AIX otherwise supports vfork(2) when linking in the BSD compatibility
X      library libbsd.a (-lbsd) but in this case the signal handling
X      is also BSD-like and resizing the screen may not work correctly.
X      BSD needs not to define HASVFORK.
X
X    #define NODIRENT if your system is SYSV or another older system
X      and doesn't support the directory type struct dirent and the
X      directory access functions opendir(3), closedir(3) and readdir(3).
X      Check the include file /usr/sys/dirent.h for struct dirent or
X      the manual pages for the directory access functions. If your
X      system doesn't support struct dirent utree assumes a standard
X      UNIX filesystem with struct direct and filename length of at least
X      14 characters and emulates the directory functions with file
X      access functions. BSD needs not to define NODIRENT.
X
X    #undefine NOWINCHG to permit resizing of the screen at runtime, i.e.
X      after resizing a xterm under X. Your system has to support the
X      signal SIGWINCH after resizing the screen and the ioctl(2) call
X      TIOCGWINSZ to get the new screen size in a record winsize. Not
X      all systems defining SIGWINCH and TIOCGWINSZ fill the winsize
X      record in a correct manner, i.e. SCO UNIX V.3.2/386. Check the
X      include files /usr/signal.h or /usr/sys/signal.h for SIGWINCH
X      and /usr/include/sys/ioctl.h, /usr/include/termio.h or
X      /usr/include/sys/termio.h for TIOCGWINSZ and struct winsize.
X      The directory tst contains a simple test program winsize.c
X      for testing resizing and properly signal and winsize handling.
X
X    #define STRUCTCOPY(from, to) to an appropiate memory copy function
X      if your compiler doesn't support assignments of a struct variables
X      like struct_variable_to = struct_variable_from. On SYSV define as
X      memcpy(to, from, sizeof(from)), on BSD as bcopy(from, to, sizeof(from)).
X      (See conf.h).
X
X    #define UTCLOCK to allow clock display/update every second.
X
X    #define UTLIB as a directory containing utree startup files for
X      global definitions (utree), key bindings (utree-$TERM) and the
X      tree help pages (utree.help). The default name of this global
X      library directory is defined as /usr/local/lib. But this directory
X      may also be set in the environment variable $UTLIB.
X
X      Last but not least check the pre-defined system commands defined
X      in cmds.h and change them to your preferred commands, for example
X      the editor, pager or hexdumper. But all these commands may also be
X      set in the global startup file $UTLIB/utree or in user's startupfile
X      $HOME/.utree.
X
X------------------------------------------------------------------------------
X
If you find bugs (there are some bugs - i'm sure) or make changes to utree
please send me bug reports (and bug fixes) and/or your changes. The file TODO
denotes some extensions to utree which should be done in the next time.
If you have questions about utree feel free to send me your questions.
I hope I have the time to answer to you.
X
My address:     Peter Klingebiel
X               Busdorfwall 18
X               D-4790 Paderborn
Internet:       klin@iat.uni-paderborn.de
X
X------------------------------------------------------------------------------
END_OF_FILE
if test 11659 -ne `wc -c <'README'`; then
    echo shar: \"'README'\" unpacked with wrong size!
fi
# end of 'README'
fi
if test -f 'TODO' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'TODO'\"
else
echo shar: Extracting \"'TODO'\" \(804 characters\)
sed "s/^X//" >'TODO' <<'END_OF_FILE'
X
X           UTREE - screen oriented filesystem utility
X              TODO, klin, Mon Feb 24 20:05:49 1992
X
X->      The system configuration file conf.h and the Makefiles could be
X       configured automatically!
X
X->      Instead of really removing files use save-remove with possibility
X       to restore so save-removed files, i.e.
X               'mv filename .#filename' (instead of 'rm filename')
X               'rm .#filename' before exiting utree
X
X->      Extend file patterns, i.e. file mode ...
X
X->      More sophisticated removing of subtrees
X
X->      More sophisticated menu handling
X
X->      Use colors instead of video attributes on color terminals
X
X->      Use of the curses library for screen dependent functions
X       instead of own coded functions (???)
X
X->      Port to X11/Motif (???)
X
END_OF_FILE
if test 804 -ne `wc -c <'TODO'`; then
    echo shar: \"'TODO'\" unpacked with wrong size!
fi
# end of 'TODO'
fi
if test ! -d 'bin' ; then
    echo shar: Creating directory \"'bin'\"
    mkdir 'bin'
fi
if test -f 'bin/qtree' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bin/qtree'\"
else
echo shar: Extracting \"'bin/qtree'\" \(345 characters\)
sed "s/^X//" >'bin/qtree' <<'END_OF_FILE'
X:
X#
X#       QTREE.SH
X#       Quick startup utree
X#       3.03-um klin, Sun Feb 16 16:07:25 1992
X#       Usage:          like utree
X#       Options:        like utree
X#       Directory:      /usr/local/bin
X#
X#       SCCSID = @(#) utree 3.03-um (klin) Feb 16 1992 bin/qtree.sh
X#       USAGE  = @(#) Usage: qtree [utree_options]
X
exec utree -q $@
X
END_OF_FILE
if test 345 -ne `wc -c <'bin/qtree'`; then
    echo shar: \"'bin/qtree'\" unpacked with wrong size!
fi
chmod +x 'bin/qtree'
# end of 'bin/qtree'
fi
if test -f 'bin/utree.backup' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bin/utree.backup'\"
else
echo shar: Extracting \"'bin/utree.backup'\" \(1321 characters\)
sed "s/^X//" >'bin/utree.backup' <<'END_OF_FILE'
X:
X#
X#       UTREE.BACKUP.SH
X#       UTREE backup directories and/or filesystems
X#       3.03-um klin, Sun Feb 16 16:07:46 1992
X#       Usage:          utree.backup backup_listfile
X#       Directory:      /usr/local/bin
X#       Version:        CADMUS MUNIX V.xx and RISC/os 4.xx
X#
X#       Copyright (c) 1991/92 by Peter Klingebiel & UNIX Magazin Muenchen.
X#       For copying and distribution information see the file COPYRIGHT.
X#
X#       SCCSID = @(#) utree 3.03-um (klin) Feb 16 1992 bin/utree.backup.sh
X#       USAGE  = @(#) Usage: utree.backup backup_listfile
X
if    test -w /dev/ris0         # Backup device on MUNIX V.3
then
X  DEVICE=/dev/ris0
X  OPTION=DS
X  isctrl -i
X  isctrl -N
elif test -w /dev/rst1          # Backup device on SunOs 4.x.x
then
X  DEVICE=/dev/rst1
X  OPTION=
elif test -w /dev/rst0          # Backup device on MUNIX V.2
then
X  DEVICE=/dev/rst0
X  OPTION=DS
elif test -w /dev/rmt/ctape0    # Backup device on RISC/os 4.xx
then
X  DEVICE=/dev/rmt/ctape0
X  OPTION=
else
X  echo "utree.backup: No tape device found"
X  exit 1
fi
X
if test $# -eq 1
then
X  LIST=$1
else
X  echo "Usage: utree.backup backup_listfile"
X  exit 1
fi
X
echo
echo "UTREE.BACKUP from file $LIST to $DEVICE"
echo
X<$DEVICE                        # Rewind
if [ $? -ne 0 ]
then
X  exit 1
fi
cpio -ov$OPTION >$DEVICE <$LIST # Backup
exit $?
X
END_OF_FILE
if test 1321 -ne `wc -c <'bin/utree.backup'`; then
    echo shar: \"'bin/utree.backup'\" unpacked with wrong size!
fi
chmod +x 'bin/utree.backup'
# end of 'bin/utree.backup'
fi
if test -f 'bin/utree.mklist' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bin/utree.mklist'\"
else
echo shar: Extracting \"'bin/utree.mklist'\" \(1176 characters\)
sed "s/^X//" >'bin/utree.mklist' <<'END_OF_FILE'
X:
X#
X#       UTREE.MKLIST.SH
X#       UTREE create tree directory list for quicker startup
X#       3.03-um klin, Sun Feb 16 16:08:03 1992
X#       Usage:          utree.mklist [-a] [root_directory list_file]
X#       Options:        -a      Read in all (including hidden) directories
X#       Directory:      /usr/local/bin
X#
X#       Copyright (c) 1991/92 by Peter Klingebiel & UNIX Magazin Muenchen.
X#       For copying and distribution information see the file COPYRIGHT.
X#
X#       SCCSID = @(#) utree 3.03-um (klin) Feb 16 1992 bin/utree.mklist.sh
X#       USAGE  = @(#) Usage: utree.mklist [-a] [root_directory list_file]
X
if test $# -ne 0 -a "$1" = "-a" # Option given ?
then
X  AFLAG=-a
X  shift
else
X  AFLAG=
fi
X
if   test $# -eq 2              # Rootdirectory given ?
then
X  ROOT=$1
X  LIST=$2
elif test $# -eq 0              # Rootdirectory is homedirectory
then
X  ROOT=$HOME
X  LIST=$HOME/.utreelist
else
X  echo "Usage: utree.mklist [-a] [root_directory list_file]"
X  exit 1
fi
X
echo "# UTREE tree list created at `date`" >$LIST
if test "$AFLAG" = "-a"
then
X  find $ROOT -type d -print | sort >>$LIST
else
X  find $ROOT -type d -print | grep -v "/\." | sort >>$LIST
fi
exit 0
X
END_OF_FILE
if test 1176 -ne `wc -c <'bin/utree.mklist'`; then
    echo shar: \"'bin/utree.mklist'\" unpacked with wrong size!
fi
chmod +x 'bin/utree.mklist'
# end of 'bin/utree.mklist'
fi
if test -f 'bin/xtree' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bin/xtree'\"
else
echo shar: Extracting \"'bin/xtree'\" \(486 characters\)
sed "s/^X//" >'bin/xtree' <<'END_OF_FILE'
X:
X#
X#       XTREE.SH
X#       Start utree on x terminal if possible
X#       3.03-um klin, Sun Feb 16 16:08:16 1992
X#       Usage:          like utree
X#       Options:        like utree
X#       Directory:      /usr/local/bin
X#
X#       SCCSID = @(#) utree 3.03-um (klin) Feb 16 1992 bin/xtree.sh
X#       USAGE  = @(#) Usage: xtree [utree_options]
X
if test ! -z "$DISPLAY" -a -x /usr/bin/X11/xterm
then exec /usr/bin/X11/xterm -g 80x24 -bw 2 -n "utree" -e utree $@ &
else exec utree $@
fi
X
END_OF_FILE
if test 486 -ne `wc -c <'bin/xtree'`; then
    echo shar: \"'bin/xtree'\" unpacked with wrong size!
fi
chmod +x 'bin/xtree'
# end of 'bin/xtree'
fi
if test ! -d 'doc' ; then
    echo shar: Creating directory \"'doc'\"
    mkdir 'doc'
fi
if test -f 'doc/utree.prlist.1' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'doc/utree.prlist.1'\"
else
echo shar: Extracting \"'doc/utree.prlist.1'\" \(2308 characters\)
sed "s/^X//" >'doc/utree.prlist.1' <<'END_OF_FILE'
X'''\"
X'''\"   utree.prlist.man
X'''\"   klin, Fri Mar  6 11:21:41 1992
X'''\"
X'''\"   [x]roff -man utree.prlist.man
X'''\"   groff   -man [-Tdevice] utree.prlist.man
X'''\"
X'''\"   SCCSID = @(#) utree.prlist..man 3.03-um Mar  6 1992
X'''\"
X.TH UTREE.PRLIST 1L "UTREE Version 3.03-um" "March 6 1992"
X.SH NAME
X.LP
X\fButree.prlist\fR \- Filter \fButree\fR tree list files
X.SH SYNOPSIS
X.LP
utree.prlist [options] listfile
X.SH DESCRIPTION
X.LP
X\fButree.prlist\fR reads a
formatted directory tree list file \fBlistfile\fR
previously created from within \fButree\fR
on the \fItree screen\fR with
the out-command (\fBo\fR) and the list-option (\fBl\fR).
The tree list can be converted to various output formats
for different output devices and printers (see below).
The converted tree list is written to stdout.
X.SH OPTIONS
X.LP
The following command line options are interpreted by \fButree.prlist\fR:
X.sp
X.TP 16
X\fB-T dev\fR
Create output for device \fBdev\fR.
Currently supported devices see below.
X.TP
X\fB-V\fR
Display program version and exit.
X.TP
X\fB-d dev\fR
Create output for device \fBdev\fR.
Currently supported devices see below.
X.TP
X\fB-f fnt\fR
Use font \fBfnt\fR.
This option is meaningful only for postscript (default: Courier-Bold).
X.TP
X\fB-h\fR
Display some help about usage and options.
X.TP
X\fB-i ind\fR
Set tree indention to \fBind\fR columns (3 .. 9, default: 6).
X.TP
X\fB-s siz\fR
Use font size \fBsiz\fR.
This option is meaningful only for postscript (default: 10).
X.SH OUTPUT FORMATS
X.LP
Currently supported output formats or devices are:
X.sp
X.TP 16
X\fBascii\fR
ASCII using graphical meta characters (-|+).
X.TP
X\fB850\fR
Printers supporting the IBM international character set PC850.
X.TP
X\fBps\fR
ADOBE POSTSCRIPT printers or previewers.
X.TP
X\fBterm\fR
Terminals using graphical characters if defined (default).
X.PP
X.SH SEE ALSO
X.LP
utree(1L)
X.SH AUTHOR
X.LP
Peter Klingebiel
X.SH COPYRIGHT
X.LP
X\(co 1991/92 Peter Klingebiel & UNIX Magazin Munich
X.sp
Permission is granted to copy and distribute \fButree\fR in modified
or unmodified form, for noncommercial use, provided (a) this copyright
notice is preserved, (b) no attempt is made to restrict redistribution
of this file, and (c) this file is not distributed as part of any
collection whose redistribution is restricted by a compilation copyright.
X
END_OF_FILE
if test 2308 -ne `wc -c <'doc/utree.prlist.1'`; then
    echo shar: \"'doc/utree.prlist.1'\" unpacked with wrong size!
fi
# end of 'doc/utree.prlist.1'
fi
if test ! -d 'lib' ; then
    echo shar: Creating directory \"'lib'\"
    mkdir 'lib'
fi
if test -f 'lib/utree.binding' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lib/utree.binding'\"
else
echo shar: Extracting \"'lib/utree.binding'\" \(1063 characters\)
sed "s/^X//" >'lib/utree.binding' <<'END_OF_FILE'
X#
X#       $HOME/.utree-$TERM or $UTLIB/utree-$TERM
X#       Example keybinding file for terminal type $TERM=xterm
X#       klin, Sun Feb 23 23:31:11 1992
X#       Directory:      user's home directory  ($HOME)
X#                       or a library directory ($UTLIB)
X#
X#       SCCSID = @(#) utree 3.03-um (klin) Feb 23 1992 lib/utree.binding
X#
X
X# Key bindings: key_sequence=utree_key_name     #Keyname
X#               key_sequence="string_to_insert" #Keyname
X
X# Example bindings for keypad keys (xterm)
X\eOp=DOWN                               #Keypad-0
X\eOn=INSERT                             #Keypad-.
X\eOo=PREVPAGE                           #Keypad-/
X\eOx=NEXTPAGE                           #Keypad-8
X\eOj=UP                                 #Keypad-*
X\eOy=DOWN                               #Keypad-9
X
X# Example bindings for functions keys (xterm)
X\e[21~=EXIT                             #FunctionKey 10
X
X# Example bindings for inserting strings (xterm)
X\e[11~="/y"                             #FunctionKey 1
X\e[12~="!ps -ef|more\n"                 #FunctionKey 2
X
END_OF_FILE
if test 1063 -ne `wc -c <'lib/utree.binding'`; then
    echo shar: \"'lib/utree.binding'\" unpacked with wrong size!
fi
# end of 'lib/utree.binding'
fi
if test -f 'lib/utree.startup' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lib/utree.startup'\"
else
echo shar: Extracting \"'lib/utree.startup'\" \(1994 characters\)
sed "s/^X//" >'lib/utree.startup' <<'END_OF_FILE'
X#
X#       $HOME/.utree or $UTLIB/utree
X#       Example startup file for UTREE 3.03-um
X#       klin, Sun Feb 16 16:12:30 1992
X#       Directory:      user's home directory  ($HOME)
X#                       or a library directory ($UTLIB)
X#
X#       SCCSID = @(#) utree 3.03-um (klin) Feb 16 1992 lib/utree.startup
X
X# General variables: variable=value
HISTSIZE=16                             #Size of history list
SHELL=ksh
XED=mg
XEO=-s
PG=less
PO=-e
X# User defined tree commands: variable=value #Menuitem
TREECMD1=whodo                          #Whodo
T2=ps -ef                               #Procs
T3=df -t                                #Space
T4=rwho                                 #Rwho
T5=ruptime                              #Ruptime
X# User defined file commands: variable=value #Menuitem
XFILECMD1=whodo                          #Whodo
XF2=ps -ef                               #Procs
XF3=df -t                                #Space
XF4=rwho                                 #Rwho
XF5=ruptime                              #Ruptime
XF6=wc -l %F                             #Lines
XF7=make %F                              #Make
X# Filetype dependent commands: filetype:commandline #Comment
X*.c:cc -c -O %F                         #Compile C
X*.f:f77 -c %F                           #Compile fortran
X*.p:pc -c -O %F                         #Compile pascal
X*.sc:sc %F                              #Spreadsheet calculator
X*.mk:make -f %F %s                      #Call make for file.mk
X[Mm]akefile:make %s                     #Call make for Makefile or makefile
X*.[1-9]:nroff -man %F|pg -cen           #View manual page
X*.z:pcat %F|pg -cen                     #View packed files
X*.Z:zcat %F|pg -cen                     #View compressed file
X*.a:ar tv %F|pg -cen                    #Table of ar archive
X*.tar:tar tvf %F|pg -cen                #Table of tar archive
X*.tar.Z:zcat %F|tar -tvf -|pg -cen      #Table of compressed tar archive
X*.[1-9].Z:zcat %F|nroff -man|pg -cen    #View compressed manual page
X
END_OF_FILE
if test 1994 -ne `wc -c <'lib/utree.startup'`; then
    echo shar: \"'lib/utree.startup'\" unpacked with wrong size!
fi
# end of 'lib/utree.startup'
fi
if test ! -d 'src' ; then
    echo shar: Creating directory \"'src'\"
    mkdir 'src'
fi
if test -f 'src/help.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'src/help.h'\"
else
echo shar: Extracting \"'src/help.h'\" \(1985 characters\)
sed "s/^X//" >'src/help.h' <<'END_OF_FILE'
X/*
X *      HELP.H
X *      UTREE help definitions.
X *      3.01-um klin, Sat Apr 20 11:02:33 1991
X *      3.03-um klin, Sat Feb 15 18:33:14 1992, Minor changes
X *
X *      Copyright (c) 1991/92 by Peter Klingebiel & UNIX Magazin Muenchen.
X *      For copying and distribution information see the file COPYRIGHT.
X */
X#if     defined(_MAIN_) && !defined(lint)
static char sccsid_help[] = "@(#) utree 3.03-um (klin) Feb 15 1992 help.h";
X#endif  /* _MAIN_ && !lint */
X
X/* Max length of a menu item in the help menuline                       */
X#define ITEMLEN 16
X
X/*
X *      Utree help pages are hold in a dynamically linked list of the
X *      following data structure _hlist which is built up at runtime.
X *      The record contains information about help items from a help
X *      file, i.e. a menu title or item, the starting position of a help
X *      page about this item in the help file and the number of lines
X *      of this help page. Displaying a help page about an item is
X *      therefore searching this item in the help page list, positioning
X *      to the starting position in the help file and putting as many
X *      lines from the helpfile to screen as this help page has.
X */
X
typedef struct _hlist {
X  char item[ITEMLEN];           /* Menu line item                       */
X  char hotkey;                  /* Menu hot key                         */
X  int nlines;                   /* Number of lines in help file         */
X  long position;                /* Start position in help file          */
X  struct _hlist *next;          /* Pointer to next help page            */
X} hlist;
X
X#define HNULL   ((hlist *) 0)   /* The hlist NIL pointer                */
X
X/*
X *      Access to items of hlist record is done with macros
X *      to hide this record and for abbreviation.
X */
X
X#define HITEM(p)        ((p)->item)
X#define HHKEY(p)        ((p)->hotkey)
X#define HNLIN(p)        ((p)->nlines)
X#define HSPOS(p)        ((p)->position)
X#define HNEXT(p)        ((p)->next)
X
END_OF_FILE
if test 1985 -ne `wc -c <'src/help.h'`; then
    echo shar: \"'src/help.h'\" unpacked with wrong size!
fi
# end of 'src/help.h'
fi
if test -f 'src/hist.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'src/hist.h'\"
else
echo shar: Extracting \"'src/hist.h'\" \(1352 characters\)
sed "s/^X//" >'src/hist.h' <<'END_OF_FILE'
X/*
X *      HIST.H
X *      UTREE history list definitions.
X *      3.03-um klin, Tue Feb 11 22:35:29 1992, Shell command history added
X *
X *      Copyright (c) 1991/92 by Peter Klingebiel & UNIX Magazin Muenchen.
X *      For copying and distribution information see the file COPYRIGHT.
X */
X#if     defined(_MAIN_) && !defined(lint)
static char sccsid_hist[] = "@(#) utree 3.03-um (klin) Feb 11 1992 hist.h";
X#endif  /* _MAIN_ && !lint */
X
X/*
X *      Shell commands are hold in a dynamically lined list of
X *      struct _clist.
X */
X
typedef struct _clist {
X  glist list;                   /* Containing command and pointers      */
X  int length;                   /* Length of current command            */
X  int number;                   /* Event number                         */
X  int counter;                  /* Event counter                        */
X} clist;
X
X#define CHNULL  ((clist *) 0)   /* The clist NIL pointer                */
X
X/*
X *      Access to entries in the command history list is done
X *      with macros to hide this record and for abbreviation.
X */
X
X#define CHLST(p)        (&(p)->list)
X#define CHCMD(p)        ((p)->list.string)
X#define CHPRV(p)        ((p)->list.prev)
X#define CHNXT(p)        ((p)->list.next)
X#define CHLEN(p)        ((p)->length)
X#define CHNUM(p)        ((p)->number)
X#define CHCNT(p)        ((p)->counter)
X
END_OF_FILE
if test 1352 -ne `wc -c <'src/hist.h'`; then
    echo shar: \"'src/hist.h'\" unpacked with wrong size!
fi
# end of 'src/hist.h'
fi
if test -f 'src/patchlevel.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'src/patchlevel.h'\"
else
echo shar: Extracting \"'src/patchlevel.h'\" \(30 characters\)
sed "s/^X//" >'src/patchlevel.h' <<'END_OF_FILE'
X#define PATCHLEVEL "3.03b-um"
END_OF_FILE
if test 30 -ne `wc -c <'src/patchlevel.h'`; then
    echo shar: \"'src/patchlevel.h'\" unpacked with wrong size!
fi
# end of 'src/patchlevel.h'
fi
if test ! -d 'sup' ; then
    echo shar: Creating directory \"'sup'\"
    mkdir 'sup'
fi
if test -f 'sup/README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sup/README'\"
else
echo shar: Extracting \"'sup/README'\" \(1785 characters\)
sed "s/^X//" >'sup/README' <<'END_OF_FILE'
Portable vsprintf, vfprintf, and vprintf  by Robert A. Larson
X       <blarson@skat.usc.edu>
X
Copyright 1989 Robert A. Larson.
Distribution in any form is allowed as long as the author
retains credit, changes are noted by their author and the
copyright message remains intact.  This program comes as-is
with no warentee of fitness for any purpouse.
X
Thanks to Doug Gwen, Chris Torek, and others who helped clarify
the ansi printf specs.
X
Please send any bug fixes and improvments to blarson@skat.usc.edu .
The use of goto is NOT a bug.
X
X
XFeb  9, 1989           blarson         First usenet release
X
This code implements the vsprintf function, without relying on
the existance of _doprint or other system specific code.
X
Define NOVOID if void * is not a supported type.
X
Two compile options are available for efficency:
X       INTSPRINTF      should be defined if sprintf is int and returns
X                       the number of chacters formated.
X       LONGINT         should be defined if sizeof(long) == sizeof(int)
X
X       They only make the code smaller and faster, they need not be
X       defined.
X
UNSIGNEDSPECIAL should be defined if unsigned is treated differently
than int in argument passing.  If this is definded, and LONGINT is not,
the compiler must support the type unsigned long.
X
Most quirks and bugs of the available sprintf and fprintf fuction are
duplicated, however * in the width and precision fields will work
correctly even if sprintf does not support this, and the %n format
will always work in vsprintf.  %n and return count will work properly
in vfprintf and vprintf only if fprintf returns the number of
characters formatted.
X
Bad format strings, or those with very long width and precision
fields (including expanded * fields) will cause undesired results.
X
END_OF_FILE
if test 1785 -ne `wc -c <'sup/README'`; then
    echo shar: \"'sup/README'\" unpacked with wrong size!
fi
# end of 'sup/README'
fi
if test -f 'sup/getopt.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sup/getopt.c'\"
else
echo shar: Extracting \"'sup/getopt.c'\" \(1974 characters\)
sed "s/^X//" >'sup/getopt.c' <<'END_OF_FILE'
X/*
X *      GETOPT.C
X *      System V like command line option parser
X */
X
X/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
X/* !  This function is a modified version of getopt() `stolen' from   ! */
X/* !  the public domain electronic mail system ELM version 2.3        ! */
X/* !    (C) Copyright 1986, 1987, by Dave Taylor                      ! */
X/* !    (C) Copyright 1988, 1989, 1990, USENET Community Trust        ! */
X/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
X
X#include <stdio.h>
X
X#ifdef  SYSV
X#define index(s, c)  strchr(s, c)
extern char *strchr();
X#else
extern char *index();
X#endif
X
int  opterr = 1;                /* Error handling flag  */
int  optind = 1;                /* Index in argv        */
int  optopt;                    /* Current option       */
char *optarg;                   /* Option argument      */
X
getopt(argc, argv, opts)
X  register int argc;
X  register char **argv, *opts;
X{
X  static int sp = 1;
X  register char *cp;
X  register int c;
X
X  if(sp == 1)
X    if(optind >= argc || argv[optind][0] != '-' || argv[optind][1] == '\0')
X      return(EOF);
X    else if( !strcmp(argv[optind], "--")) {
X      optind++;
X      return(EOF);
X    }
X  optopt = c = argv[optind][sp];
X  if(c == ':' || (cp = index(opts, c)) == NULL) {
X    if(opterr)
X      (void) fprintf(stderr, "%s: illegal option -- %c\n", argv[0], c);
X    else if(argv[optind][++sp] == '\0') {
X      optind++;
X      sp = 1;
X    }
X    return('?');
X  }
X  if(*++cp == ':') {
X    if(argv[optind][sp+1] != '\0')
X      optarg = &argv[optind++][sp+1];
X    else if(++optind >= argc) {
X      if(opterr)
X       (void) fprintf(stderr, "%s: option requires an argument -- %c\n",
X                      argv[0], c);
X      sp = 1;
X      return('?');
X    }
X    else
X      optarg = argv[optind++];
X    sp = 1;
X  }
X  else {
X    if(argv[optind][++sp] == '\0') {
X      sp = 1;
X      optind++;
X    }
X    optarg = NULL;
X  }
X  return(c);
X
X} /* getopt() */
X
END_OF_FILE
if test 1974 -ne `wc -c <'sup/getopt.c'`; then
    echo shar: \"'sup/getopt.c'\" unpacked with wrong size!
fi
# end of 'sup/getopt.c'
fi
if test ! -d 'sys' ; then
    echo shar: Creating directory \"'sys'\"
    mkdir 'sys'
fi
if test -f 'sys/Makefile.286' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/Makefile.286'\"
else
echo shar: Extracting \"'sys/Makefile.286'\" \(1758 characters\)
sed "s/^X//" >'sys/Makefile.286' <<'END_OF_FILE'
X#
X#       Makefile for UTREE
X#       klin, Mon Feb 24 00:02:38 1992
X#
X#       @(#) utree 3.03-um (klin) Feb 23 1992 Makefile
X#
X#       Version: UNIX V/286 compatible (for MSC on SCO UNIX/386)
X
X# Compiler flags, loader flags and libraries
CFLAGS= -compat -O -M2l
MFLAGS=
LFLAGS=
LIBS=   -ltermcap
MLIBS=
X# Additional local libraries
LLIBS=
X
X# --------------------------------------------------------------------- #
X
X# Some needed commands to create utree
CC=     cc
CP=     cp
STRIP=  strip
X
X# --------------------------------------------------------------------- #
X
X# Utree executables
UTREE=  ../bin/utree
UTPRL=  ../bin/utree.prlist
X
X# --------------------------------------------------------------------- #
X
X# Utree header files
DEFS=   conf.h cmds.h defs.h help.h hist.h keys.h list.h term.h vars.h
X
X# Utree sources and objects
SRCS=   main.c bind.c comm.c echo.c edit.c file.c help.c hist.c list.c \
X	stat.c term.c tree.c util.c vars.c vers.c
OBJS=   main.o bind.o comm.o echo.o edit.o file.o help.o hist.o list.o \
X	stat.o term.o tree.o util.o vars.o vers.o
X
X# --------------------------------------------------------------------- #
X
all:    utree utree.prlist
X
utree:  $(UTREE)
X
strip:  $(UTREE)
X	$(CP) $(UTREE) $(UTREE)+sym
X	$(STRIP) $(UTREE)
X
utree.prlist:   $(UTPRL)
X
X# Compile and link utree
X$(UTREE):       $(OBJS)
X	$(CC) $(CFLAGS) $(LFLAGS) $(OBJS) -o $@ $(LIBS) $(LLIBS)
X
X# Compile and link utree.prlist
X$(UTPRL):       utree.prlist.c
X	$(CC) -s $(CFLAGS) $(MFLAGS) $(LFLAGS) $? -o $@ $(MLIBS) $(LIBS) $(LLIBS)
X
X# Clean up
clean:
X	rm -f core *.o
X
X# --------------------------------------------------------------------- #
X
X$(OBJS):        $(DEFS)
X	$(CC) $(CFLAGS) -c $<
X
X# --------------------------------------------------------------------- #
X
END_OF_FILE
if test 1758 -ne `wc -c <'sys/Makefile.286'`; then
    echo shar: \"'sys/Makefile.286'\" unpacked with wrong size!
fi
# end of 'sys/Makefile.286'
fi
if test -f 'sys/Makefile.AIX' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/Makefile.AIX'\"
else
echo shar: Extracting \"'sys/Makefile.AIX'\" \(1742 characters\)
sed "s/^X//" >'sys/Makefile.AIX' <<'END_OF_FILE'
X#
X#       Makefile for UTREE
X#       klin, Mon Feb 24 00:02:38 1992
X#
X#       @(#) utree 3.03-um (klin) Feb 23 1992 Makefile
X#
X#       Version: IBM 520 (RS/6000),  AIX 3.1
X
X# Compiler flags, loader flags and libraries
CFLAGS= -DAIX -D_NO_PROTO -O
MFLAGS=
LFLAGS=
LIBS=   -lcurses
MLIBS=
X# Additional local libraries
LLIBS=
X
X# --------------------------------------------------------------------- #
X
X# Some needed commands to create utree
CC=     cc
CP=     cp
STRIP=  strip
X
X# --------------------------------------------------------------------- #
X
X# Utree executables
UTREE=  ../bin/utree
UTPRL=  ../bin/utree.prlist
X
X# --------------------------------------------------------------------- #
X
X# Utree header files
DEFS=   conf.h cmds.h defs.h help.h hist.h keys.h list.h term.h vars.h
X
X# Utree sources and objects
SRCS=   main.c bind.c comm.c echo.c edit.c file.c help.c hist.c list.c \
X	stat.c term.c tree.c util.c vars.c vers.c
OBJS=   main.o bind.o comm.o echo.o edit.o file.o help.o hist.o list.o \
X	stat.o term.o tree.o util.o vars.o vers.o
X
X# --------------------------------------------------------------------- #
X
all:    utree utree.prlist
X
utree:  $(UTREE)
X
strip:  $(UTREE)
X	$(CP) $(UTREE) $(UTREE)+sym
X	$(STRIP) $(UTREE)
X
utree.prlist:   $(UTPRL)
X
X# Compile and link utree
X$(UTREE):       $(OBJS)
X	$(CC) $(CFLAGS) $(LFLAGS) $(OBJS) -o $@ $(LIBS) $(LLIBS)
X
X# Compile and link utree.prlist
X$(UTPRL):       utree.prlist.c
X	$(CC) -s $(CFLAGS) $(MFLAGS) $(LFLAGS) $? -o $@ $(MLIBS) $(LIBS) $(LLIBS)
X
X# Clean up
clean:
X	rm -f core *.o
X
X# --------------------------------------------------------------------- #
X
X$(OBJS):        $(DEFS)
X	$(CC) $(CFLAGS) -c $<
X
X# --------------------------------------------------------------------- #
X
END_OF_FILE
if test 1742 -ne `wc -c <'sys/Makefile.AIX'`; then
    echo shar: \"'sys/Makefile.AIX'\" unpacked with wrong size!
fi
# end of 'sys/Makefile.AIX'
fi
if test -f 'sys/Makefile.APP' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/Makefile.APP'\"
else
echo shar: Extracting \"'sys/Makefile.APP'\" \(1790 characters\)
sed "s/^X//" >'sys/Makefile.APP' <<'END_OF_FILE'
X#
X#       Makefile for UTREE
X#       klin, Mon Feb 24 00:02:38 1992
X#
X#       @(#) utree 3.03-um (klin) Feb 23 1992 Makefile
X#
X#       Version: Apollo Domain DN4500, DomainIX 9.5 (BSD4.2 + SYSV)
X
X# Compiler flags, loader flags and libraries
CFLAGS= -DBSD -DAPOLLO -O
MFLAGS=
LFLAGS=
LIBS=   -ltermcap
MLIBS=
X# Additional local libraries
LLIBS=
X
X# --------------------------------------------------------------------- #
X
X# Some needed commands to create utree
CC=     cc
CP=     cp
STRIP=  strip
X
X# --------------------------------------------------------------------- #
X
X# Utree executables
UTREE=  ../bin/utree
UTPRL=  ../bin/utree.prlist
X
X# --------------------------------------------------------------------- #
X
X# Utree header files
DEFS=   conf.h cmds.h defs.h help.h hist.h keys.h list.h term.h vars.h
X
X# Utree sources and objects
SRCS=   main.c bind.c comm.c echo.c edit.c file.c help.c hist.c list.c \
X	stat.c term.c tree.c util.c vars.c vers.c getopt.c
OBJS=   main.o bind.o comm.o echo.o edit.o file.o help.o hist.o list.o \
X	stat.o term.o tree.o util.o vars.o vers.o getopt.o
X
X# --------------------------------------------------------------------- #
X
all:    utree utree.prlist
X
utree:  $(UTREE)
X
strip:  $(UTREE)
X	$(CP) $(UTREE) $(UTREE)+sym
X	$(STRIP) $(UTREE)
X
utree.prlist:   $(UTPRL)
X
X# Compile and link utree
X$(UTREE):       $(OBJS)
X	$(CC) $(CFLAGS) $(LFLAGS) $(OBJS) -o $@ $(LIBS) $(LLIBS)
X
X# Compile and link utree.prlist
X$(UTPRL):       utree.prlist.c getopt.o
X	$(CC) -s $(CFLAGS) $(MFLAGS) $(LFLAGS) $? -o $@ $(MLIBS) $(LIBS) $(LLIBS)
X
X# Clean up
clean:
X	rm -f core *.o
X
X# --------------------------------------------------------------------- #
X
X$(OBJS):        $(DEFS)
X	$(CC) $(CFLAGS) -c $<
X
X# --------------------------------------------------------------------- #
X
END_OF_FILE
if test 1790 -ne `wc -c <'sys/Makefile.APP'`; then
    echo shar: \"'sys/Makefile.APP'\" unpacked with wrong size!
fi
# end of 'sys/Makefile.APP'
fi
if test -f 'sys/Makefile.BSD' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/Makefile.BSD'\"
else
echo shar: Extracting \"'sys/Makefile.BSD'\" \(1786 characters\)
sed "s/^X//" >'sys/Makefile.BSD' <<'END_OF_FILE'
X#
X#       Makefile for UTREE
X#       klin, Mon Feb 24 00:02:38 1992
X#
X#       @(#) utree 3.03-um (klin) Feb 23 1992 Makefile
X#
X#       Version:        Generic for BSD 4.2 or 4.3
X
X# Compiler flags, loader flags and libraries
CFLAGS= -DBSD -O
MFLAGS=
LFLAGS=
LIBS=   -ltermcap
MLIBS=
X# Additional local libraries
LLIBS=
X
X# --------------------------------------------------------------------- #
X
X# Some needed commands to create utree
CC=     cc
CP=     cp
STRIP=  strip
X
X# --------------------------------------------------------------------- #
X
X# Utree executables
UTREE=  ../bin/utree
UTPRL=  ../bin/utree.prlist
X
X# --------------------------------------------------------------------- #
X
X# Utree header files
DEFS=   conf.h cmds.h defs.h help.h hist.h keys.h list.h term.h vars.h
X
X# Utree sources and objects
SRCS=   main.c bind.c comm.c echo.c edit.c file.c help.c hist.c list.c \
X	stat.c term.c tree.c util.c vars.c vers.c getopt.c vsprintf.c
OBJS=   main.o bind.o comm.o echo.o edit.o file.o help.o hist.o list.o \
X	stat.o term.o tree.o util.o vars.o vers.o getopt.o vsprintf.o
X
X# --------------------------------------------------------------------- #
X
all:    utree utree.prlist
X
utree:  $(UTREE)
X
strip:  $(UTREE)
X	$(CP) $(UTREE) $(UTREE)+sym
X	$(STRIP) $(UTREE)
X
utree.prlist:   $(UTPRL)
X
X# Compile and link utree
X$(UTREE):       $(OBJS)
X	$(CC) $(CFLAGS) $(LFLAGS) $(OBJS) -o $@ $(LIBS) $(LLIBS)
X
X# Compile and link utree.prlist
X$(UTPRL):       utree.prlist.c getopt.o
X	$(CC) -s $(CFLAGS) $(MFLAGS) $(LFLAGS) $? -o $@ $(MLIBS) $(LIBS) $(LLIBS)
X
X# Clean up
clean:
X	rm -f core *.o
X
X# --------------------------------------------------------------------- #
X
X$(OBJS):        $(DEFS)
X	$(CC) $(CFLAGS) -c $<
X
X# --------------------------------------------------------------------- #
X
END_OF_FILE
if test 1786 -ne `wc -c <'sys/Makefile.BSD'`; then
    echo shar: \"'sys/Makefile.BSD'\" unpacked with wrong size!
fi
# end of 'sys/Makefile.BSD'
fi
if test -f 'sys/Makefile.CON' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/Makefile.CON'\"
else
echo shar: Extracting \"'sys/Makefile.CON'\" \(1741 characters\)
sed "s/^X//" >'sys/Makefile.CON' <<'END_OF_FILE'
X#
X#       Makefile for UTREE
X#       klin, Mon Feb 24 00:02:38 1992
X#
X#       @(#) utree 3.03-um (klin) Feb 23 1992 Makefile
X#
X#       Version:        Convex C120, ConvexOS 8.1
X
X# Compiler flags, loader flags and libraries
CFLAGS= -pcc -DBSD -O
MFLAGS=
LFLAGS=
LIBS=   -ltermcap
MLIBS=
X# Additional local libraries
LLIBS=
X
X# --------------------------------------------------------------------- #
X
X# Some needed commands to create utree
CC=     cc
CP=     cp
STRIP=  strip
X
X# --------------------------------------------------------------------- #
X
X# Utree executables
UTREE=  ../bin/utree
UTPRL=  ../bin/utree.prlist
X
X# --------------------------------------------------------------------- #
X
X# Utree header files
DEFS=   conf.h cmds.h defs.h help.h hist.h keys.h list.h term.h vars.h
X
X# Utree sources and objects
SRCS=   main.c bind.c comm.c echo.c edit.c file.c help.c hist.c list.c \
X	stat.c term.c tree.c util.c vars.c vers.c
OBJS=   main.o bind.o comm.o echo.o edit.o file.o help.o hist.o list.o \
X	stat.o term.o tree.o util.o vars.o vers.o
X
X# --------------------------------------------------------------------- #
X
all:    utree utree.prlist
X
utree:  $(UTREE)
X
strip:  $(UTREE)
X	$(CP) $(UTREE) $(UTREE)+sym
X	$(STRIP) $(UTREE)
X
utree.prlist:   $(UTPRL)
X
X# Compile and link utree
X$(UTREE):       $(OBJS)
X	$(CC) $(CFLAGS) $(LFLAGS) $(OBJS) -o $@ $(LIBS) $(LLIBS)
X
X# Compile and link utree.prlist
X$(UTPRL):       utree.prlist.c
X	$(CC) -s $(CFLAGS) $(MFLAGS) $(LFLAGS) $? -o $@ $(MLIBS) $(LIBS) $(LLIBS)
X
X# Clean up
clean:
X	rm -f core *.o
X
X# --------------------------------------------------------------------- #
X
X$(OBJS):        $(DEFS)
X	$(CC) $(CFLAGS) -c $<
X
X# --------------------------------------------------------------------- #
X
END_OF_FILE
if test 1741 -ne `wc -c <'sys/Makefile.CON'`; then
    echo shar: \"'sys/Makefile.CON'\" unpacked with wrong size!
fi
# end of 'sys/Makefile.CON'
fi
if test -f 'sys/Makefile.M16' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/Makefile.M16'\"
else
echo shar: Extracting \"'sys/Makefile.M16'\" \(1743 characters\)
sed "s/^X//" >'sys/Makefile.M16' <<'END_OF_FILE'
X#
X#       Makefile for UTREE
X#       klin, Mon Feb 24 00:02:38 1992
X#
X#       @(#) utree 3.03-um (klin) Feb 23 1992 Makefile
X#
X#       Version: PCS Cadmus 9230, MUNIX V.2/07 (SYSV 2)
X
X# Compiler flags, loader flags and libraries
CFLAGS= -O
MFLAGS= -f
LFLAGS=
LIBS=   -lcurses
MLIBS=  -lm
X# Additional local libraries
LLIBS=
X
X# --------------------------------------------------------------------- #
X
X# Some needed commands to create utree
CC=     cc
CP=     cp
STRIP=  strip
X
X# --------------------------------------------------------------------- #
X
X# Utree executables
UTREE=  ../bin/utree
UTPRL=  ../bin/utree.prlist
X
X# --------------------------------------------------------------------- #
X
X# Utree header files
DEFS=   conf.h cmds.h defs.h help.h hist.h keys.h list.h term.h vars.h
X
X# Utree sources and objects
SRCS=   main.c bind.c comm.c echo.c edit.c file.c help.c hist.c list.c \
X	stat.c term.c tree.c util.c vars.c vers.c
OBJS=   main.o bind.o comm.o echo.o edit.o file.o help.o hist.o list.o \
X	stat.o term.o tree.o util.o vars.o vers.o
X
X# --------------------------------------------------------------------- #
X
all:    utree utree.prlist
X
utree:  $(UTREE)
X
strip:  $(UTREE)
X	$(CP) $(UTREE) $(UTREE)+sym
X	$(STRIP) $(UTREE)
X
utree.prlist:   $(UTPRL)
X
X# Compile and link utree
X$(UTREE):       $(OBJS)
X	$(CC) $(CFLAGS) $(LFLAGS) $(OBJS) -o $@ $(LIBS) $(LLIBS)
X
X# Compile and link utree.prlist
X$(UTPRL):       utree.prlist.c
X	$(CC) -s $(CFLAGS) $(MFLAGS) $(LFLAGS) $? -o $@ $(MLIBS) $(LIBS) $(LLIBS)
X
X# Clean up
clean:
X	rm -f core *.o
X
X# --------------------------------------------------------------------- #
X
X$(OBJS):        $(DEFS)
X	$(CC) $(CFLAGS) -c $<
X
X# --------------------------------------------------------------------- #
X
END_OF_FILE
if test 1743 -ne `wc -c <'sys/Makefile.M16'`; then
    echo shar: \"'sys/Makefile.M16'\" unpacked with wrong size!
fi
# end of 'sys/Makefile.M16'
fi
if test -f 'sys/Makefile.M32' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/Makefile.M32'\"
else
echo shar: Extracting \"'sys/Makefile.M32'\" \(1769 characters\)
sed "s/^X//" >'sys/Makefile.M32' <<'END_OF_FILE'
X#
X#       Makefile for UTREE
X#       klin, Mon Feb 24 00:02:38 1992
X#
X#       @(#) utree 3.03-um (klin) Feb 23 1992 Makefile
X#
X#       Version: PCS Cadmus 9600 (MC68020), MUNIX V3M3.2 (SYSV.3)
X
X# Compiler flags, loader flags and libraries
CFLAGS= -O
MFLAGS= -fH
LFLAGS=
LIBS=   -lcurses_s
MLIBS=  -lm
X# Additional local libraries
LLIBS=  -lc_s -lbsd
X
X# --------------------------------------------------------------------- #
X
X# Some needed commands to create utree
CC=     cc
CP=     cp
STRIP=  strip
X
X# --------------------------------------------------------------------- #
X
X# Utree executables
UTREE=  ../bin/utree
UTPRL=  ../bin/utree.prlist
X
X# --------------------------------------------------------------------- #
X
X# Utree header files
DEFS=   conf.h cmds.h defs.h help.h hist.h keys.h list.h term.h vars.h
X
X# Utree sources and objects
SRCS=   main.c bind.c comm.c echo.c edit.c file.c help.c hist.c list.c \
X	stat.c term.c tree.c util.c vars.c vers.c
OBJS=   main.o bind.o comm.o echo.o edit.o file.o help.o hist.o list.o \
X	stat.o term.o tree.o util.o vars.o vers.o
X
X# --------------------------------------------------------------------- #
X
all:    utree utree.prlist
X
utree:  $(UTREE)
X
strip:  $(UTREE)
X	$(CP) $(UTREE) $(UTREE)+sym
X	$(STRIP) $(UTREE)
X
utree.prlist:   $(UTPRL)
X
X# Compile and link utree
X$(UTREE):       $(OBJS)
X	$(CC) $(CFLAGS) $(LFLAGS) $(OBJS) -o $@ $(LIBS) $(LLIBS)
X
X# Compile and link utree.prlist
X$(UTPRL):       utree.prlist.c
X	$(CC) -s $(CFLAGS) $(MFLAGS) $(LFLAGS) $? -o $@ $(MLIBS) $(LIBS) $(LLIBS)
X
X# Clean up
clean:
X	rm -f core *.o
X
X# --------------------------------------------------------------------- #
X
X$(OBJS):        $(DEFS)
X	$(CC) $(CFLAGS) -c $<
X
X# --------------------------------------------------------------------- #
X
END_OF_FILE
if test 1769 -ne `wc -c <'sys/Makefile.M32'`; then
    echo shar: \"'sys/Makefile.M32'\" unpacked with wrong size!
fi
# end of 'sys/Makefile.M32'
fi
if test -f 'sys/Makefile.MIPS' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/Makefile.MIPS'\"
else
echo shar: Extracting \"'sys/Makefile.MIPS'\" \(1761 characters\)
sed "s/^X//" >'sys/Makefile.MIPS' <<'END_OF_FILE'
X#
X#       Makefile for UTREE
X#       klin, Mon Feb 24 00:02:38 1992
X#
X#       @(#) utree 3.03-um (klin) Feb 23 1992 Makefile
X#
X#       Version:        MIPS RC3230 RISC/os 4.51 (SystemV.3 + BSD4.3)
X
X# Compiler flags, loader flags and libraries
CFLAGS= -O -Olimit 800
MFLAGS=
LFLAGS=
LIBS=   -lcurses
MLIBS=
X# Additional local libraries
LLIBS=
X
X# --------------------------------------------------------------------- #
X
X# Some needed commands to create utree
CC=     cc
CP=     cp
STRIP=  strip
X
X# --------------------------------------------------------------------- #
X
X# Utree executables
UTREE=  ../bin/utree
UTPRL=  ../bin/utree.prlist
X
X# --------------------------------------------------------------------- #
X
X# Utree header files
DEFS=   conf.h cmds.h defs.h help.h hist.h keys.h list.h term.h vars.h
X
X# Utree sources and objects
SRCS=   main.c bind.c comm.c echo.c edit.c file.c help.c hist.c list.c \
X	stat.c term.c tree.c util.c vars.c vers.c
OBJS=   main.o bind.o comm.o echo.o edit.o file.o help.o hist.o list.o \
X	stat.o term.o tree.o util.o vars.o vers.o
X
X# --------------------------------------------------------------------- #
X
all:    utree utree.prlist
X
utree:  $(UTREE)
X
strip:  $(UTREE)
X	$(CP) $(UTREE) $(UTREE)+sym
X	$(STRIP) $(UTREE)
X
utree.prlist:   $(UTPRL)
X
X# Compile and link utree
X$(UTREE):       $(OBJS)
X	$(CC) $(CFLAGS) $(LFLAGS) $(OBJS) -o $@ $(LIBS) $(LLIBS)
X
X# Compile and link utree.prlist
X$(UTPRL):       utree.prlist.c
X	$(CC) -s $(CFLAGS) $(MFLAGS) $(LFLAGS) $? -o $@ $(MLIBS) $(LIBS) $(LLIBS)
X
X# Clean up
clean:
X	rm -f core *.o
X
X# --------------------------------------------------------------------- #
X
X$(OBJS):        $(DEFS)
X	$(CC) $(CFLAGS) -c $<
X
X# --------------------------------------------------------------------- #
X
END_OF_FILE
if test 1761 -ne `wc -c <'sys/Makefile.MIPS'`; then
    echo shar: \"'sys/Makefile.MIPS'\" unpacked with wrong size!
fi
# end of 'sys/Makefile.MIPS'
fi
if test -f 'sys/Makefile.RCU' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/Makefile.RCU'\"
else
echo shar: Extracting \"'sys/Makefile.RCU'\" \(1769 characters\)
sed "s/^X//" >'sys/Makefile.RCU' <<'END_OF_FILE'
X#
X#       Makefile for UTREE
X#       klin, Mon Feb 24 00:02:38 1992
X#
X#       @(#) utree 3.03-um (klin) Feb 23 1992 Makefile
X#
X#       Version: PCS Cadmus 9900 (MIPS R2000/3000), MUNIX V3R3.2A (SYSV.3)
X
X# Compiler flags, loader flags and libraries
CFLAGS= -O
MFLAGS=
LFLAGS=
LIBS=   -lcurses_s
MLIBS=
X# Additional local libraries
LLIBS=  -lc_s -lbsd
X
X# --------------------------------------------------------------------- #
X
X# Some needed commands to create utree
CC=     cc
CP=     cp
STRIP=  strip
X
X# --------------------------------------------------------------------- #
X
X# Utree executables
UTREE=  ../bin/utree
UTPRL=  ../bin/utree.prlist
X
X# --------------------------------------------------------------------- #
X
X# Utree header files
DEFS=   conf.h cmds.h defs.h help.h hist.h keys.h list.h term.h vars.h
X
X# Utree sources and objects
SRCS=   main.c bind.c comm.c echo.c edit.c file.c help.c hist.c list.c \
X	stat.c term.c tree.c util.c vars.c vers.c
OBJS=   main.o bind.o comm.o echo.o edit.o file.o help.o hist.o list.o \
X	stat.o term.o tree.o util.o vars.o vers.o
X
X# --------------------------------------------------------------------- #
X
all:    utree utree.prlist
X
utree:  $(UTREE)
X
strip:  $(UTREE)
X	$(CP) $(UTREE) $(UTREE)+sym
X	$(STRIP) $(UTREE)
X
utree.prlist:   $(UTPRL)
X
X# Compile and link utree
X$(UTREE):       $(OBJS)
X	$(CC) $(CFLAGS) $(LFLAGS) $(OBJS) -o $@ $(LIBS) $(LLIBS)
X
X# Compile and link utree.prlist
X$(UTPRL):       utree.prlist.c
X	$(CC) -s $(CFLAGS) $(MFLAGS) $(LFLAGS) $? -o $@ $(MLIBS) $(LIBS) $(LLIBS)
X
X# Clean up
clean:
X	rm -f core *.o
X
X# --------------------------------------------------------------------- #
X
X$(OBJS):        $(DEFS)
X	$(CC) $(CFLAGS) -c $<
X
X# --------------------------------------------------------------------- #
X
END_OF_FILE
if test 1769 -ne `wc -c <'sys/Makefile.RCU'`; then
    echo shar: \"'sys/Makefile.RCU'\" unpacked with wrong size!
fi
# end of 'sys/Makefile.RCU'
fi
if test -f 'sys/Makefile.SCO' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/Makefile.SCO'\"
else
echo shar: Extracting \"'sys/Makefile.SCO'\" \(1754 characters\)
sed "s/^X//" >'sys/Makefile.SCO' <<'END_OF_FILE'
X#
X#       Makefile for UTREE
X#       klin, Mon Feb 24 00:02:38 1992
X#
X#       @(#) utree 3.03-um (klin) Feb 23 1992 Makefile
X#
X#       Version: HP Vectra (i486), SCO UNIX System V/386 3.2
X
X# Compiler flags, loader flags and libraries
CFLAGS= -Ox
MFLAGS=
LFLAGS=
LIBS=   -lcurses
MLIBS=
X# Additional local libraries
LLIBS=        -lc_s
X
X# --------------------------------------------------------------------- #
X
X# Some needed commands to create utree
CC=     cc
CP=     cp
STRIP=  strip
X
X# --------------------------------------------------------------------- #
X
X# Utree executables
UTREE=  ../bin/utree
UTPRL=  ../bin/utree.prlist
X
X# --------------------------------------------------------------------- #
X
X# Utree header files
DEFS=   conf.h cmds.h defs.h help.h hist.h keys.h list.h term.h vars.h
X
X# Utree sources and objects
SRCS=   main.c bind.c comm.c echo.c edit.c file.c help.c hist.c list.c \
X	stat.c term.c tree.c util.c vars.c vers.c
OBJS=   main.o bind.o comm.o echo.o edit.o file.o help.o hist.o list.o \
X	stat.o term.o tree.o util.o vars.o vers.o
X
X# --------------------------------------------------------------------- #
X
all:    utree utree.prlist
X
utree:  $(UTREE)
X
strip:  $(UTREE)
X	$(CP) $(UTREE) $(UTREE)+sym
X	$(STRIP) $(UTREE)
X
utree.prlist:   $(UTPRL)
X
X# Compile and link utree
X$(UTREE):       $(OBJS)
X	$(CC) $(CFLAGS) $(LFLAGS) $(OBJS) -o $@ $(LIBS) $(LLIBS)
X
X# Compile and link utree.prlist
X$(UTPRL):       utree.prlist.c
X	$(CC) -s $(CFLAGS) $(MFLAGS) $(LFLAGS) $? -o $@ $(MLIBS) $(LIBS) $(LLIBS)
X
X# Clean up
clean:
X	rm -f core *.o
X
X# --------------------------------------------------------------------- #
X
X$(OBJS):        $(DEFS)
X	$(CC) $(CFLAGS) -c $<
X
X# --------------------------------------------------------------------- #
X
END_OF_FILE
if test 1754 -ne `wc -c <'sys/Makefile.SCO'`; then
    echo shar: \"'sys/Makefile.SCO'\" unpacked with wrong size!
fi
# end of 'sys/Makefile.SCO'
fi
if test -f 'sys/Makefile.SEQ' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/Makefile.SEQ'\"
else
echo shar: Extracting \"'sys/Makefile.SEQ'\" \(1772 characters\)
sed "s/^X//" >'sys/Makefile.SEQ' <<'END_OF_FILE'
X#
X#       Makefile for UTREE
X#       klin, Mon Feb 24 00:02:38 1992
X#
X#       @(#) utree 3.03-um (klin) Feb 23 1992 Makefile
X#
X#       Version: Sequent Symmetrie, DYNIX i386 (BSD 4.2)
X
X# Compiler flags, loader flags and libraries
CFLAGS= -DBSD -O
MFLAGS=
LFLAGS=
LIBS=   -ltermcap
MLIBS=
X# Additional local libraries
LLIBS=  -lseq
X
X# --------------------------------------------------------------------- #
X
X# Some needed commands to create utree
CC=     cc
CP=     cp
STRIP=  strip
X
X# --------------------------------------------------------------------- #
X
X# Utree executables
UTREE=  ../bin/utree
UTPRL=  ../bin/utree.prlist
X
X# --------------------------------------------------------------------- #
X
X# Utree header files
DEFS=   conf.h cmds.h defs.h help.h hist.h keys.h list.h term.h vars.h
X
X# Utree sources and objects
SRCS=   main.c bind.c comm.c echo.c edit.c file.c help.c hist.c list.c \
X	stat.c term.c tree.c util.c vars.c vers.c vsprintf.c
OBJS=   main.o bind.o comm.o echo.o edit.o file.o help.o hist.o list.o \
X	stat.o term.o tree.o util.o vars.o vers.o vsprintf.o
X
X# --------------------------------------------------------------------- #
X
all:    utree utree.prlist
X
utree:  $(UTREE)
X
strip:  $(UTREE)
X	$(CP) $(UTREE) $(UTREE)+sym
X	$(STRIP) $(UTREE)
X
utree.prlist:   $(UTPRL)
X
X# Compile and link utree
X$(UTREE):       $(OBJS)
X	$(CC) $(CFLAGS) $(LFLAGS) $(OBJS) -o $@ $(LIBS) $(LLIBS)
X
X# Compile and link utree.prlist
X$(UTPRL):       utree.prlist.c
X	$(CC) -s $(CFLAGS) $(MFLAGS) $(LFLAGS) $? -o $@ $(MLIBS) $(LIBS) $(LLIBS)
X
X# Clean up
clean:
X	rm -f core *.o
X
X# --------------------------------------------------------------------- #
X
X$(OBJS):        $(DEFS)
X	$(CC) $(CFLAGS) -c $<
X
X# --------------------------------------------------------------------- #
X
END_OF_FILE
if test 1772 -ne `wc -c <'sys/Makefile.SEQ'`; then
    echo shar: \"'sys/Makefile.SEQ'\" unpacked with wrong size!
fi
# end of 'sys/Makefile.SEQ'
fi
if test -f 'sys/Makefile.SGI' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/Makefile.SGI'\"
else
echo shar: Extracting \"'sys/Makefile.SGI'\" \(1746 characters\)
sed "s/^X//" >'sys/Makefile.SGI' <<'END_OF_FILE'
X#
X#       Makefile for UTREE
X#       klin, Mon Feb 24 00:02:38 1992
X#
X#       @(#) utree 3.03-um (klin) Feb 23 1992 Makefile
X#
X#       Version: Silicon Graphics 4D, IRIX V.3.3.2 (SYSV 3)
X
X# Compiler flags, loader flags and libraries
CFLAGS= -O
MFLAGS=
LFLAGS=
LIBS=   -lcurses
MLIBS=
X# Additional local libraries
LLIBS=  -lbsd
X
X# --------------------------------------------------------------------- #
X
X# Some needed commands to create utree
CC=     cc
CP=     cp
STRIP=  strip
X
X# --------------------------------------------------------------------- #
X
X# Utree executables
UTREE=  ../bin/utree
UTPRL=  ../bin/utree.prlist
X
X# --------------------------------------------------------------------- #
X
X# Utree header files
DEFS=   conf.h cmds.h defs.h help.h hist.h keys.h list.h term.h vars.h
X
X# Utree sources and objects
SRCS=   main.c bind.c comm.c echo.c edit.c file.c help.c hist.c list.c \
X	stat.c term.c tree.c util.c vars.c vers.c
OBJS=   main.o bind.o comm.o echo.o edit.o file.o help.o hist.o list.o \
X	stat.o term.o tree.o util.o vars.o vers.o
X
X# --------------------------------------------------------------------- #
X
all:    utree utree.prlist
X
utree:  $(UTREE)
X
strip:  $(UTREE)
X	$(CP) $(UTREE) $(UTREE)+sym
X	$(STRIP) $(UTREE)
X
utree.prlist:   $(UTPRL)
X
X# Compile and link utree
X$(UTREE):       $(OBJS)
X	$(CC) $(CFLAGS) $(LFLAGS) $(OBJS) -o $@ $(LIBS) $(LLIBS)
X
X# Compile and link utree.prlist
X$(UTPRL):       utree.prlist.c
X	$(CC) -s $(CFLAGS) $(MFLAGS) $(LFLAGS) $? -o $@ $(MLIBS) $(LIBS) $(LLIBS)
X
X# Clean up
clean:
X	rm -f core *.o
X
X# --------------------------------------------------------------------- #
X
X$(OBJS):        $(DEFS)
X	$(CC) $(CFLAGS) -c $<
X
X# --------------------------------------------------------------------- #
X
END_OF_FILE
if test 1746 -ne `wc -c <'sys/Makefile.SGI'`; then
    echo shar: \"'sys/Makefile.SGI'\" unpacked with wrong size!
fi
# end of 'sys/Makefile.SGI'
fi
if test -f 'sys/Makefile.SUN' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/Makefile.SUN'\"
else
echo shar: Extracting \"'sys/Makefile.SUN'\" \(1766 characters\)
sed "s/^X//" >'sys/Makefile.SUN' <<'END_OF_FILE'
X#
X#       Makefile for UTREE
X#       klin, Mon Feb 24 00:02:38 1992
X#
X#       @(#) utree 3.03-um (klin) Feb 23 1992 Makefile
X#
X#       Version:        SUN4 (SPARC) SunOs 4.1.x
X
X# Compiler flags, loader flags and libraries
CFLAGS= -DBSD   # -O -> coredump in token() ???
MFLAGS=
LFLAGS=
LIBS=   -ltermcap
MLIBS=
X# Additional local libraries
LLIBS=
X
X# --------------------------------------------------------------------- #
X
X# Some needed commands to create utree
CC=     cc
CP=     cp
STRIP=  strip
X
X# --------------------------------------------------------------------- #
X
X# Utree executables
UTREE=  ../bin/utree
UTPRL=  ../bin/utree.prlist
X
X# --------------------------------------------------------------------- #
X
X# Utree header files
DEFS=   conf.h cmds.h defs.h help.h hist.h keys.h list.h term.h vars.h
X
X# Utree sources and objects
SRCS=   main.c bind.c comm.c echo.c edit.c file.c help.c hist.c list.c \
X	stat.c term.c tree.c util.c vars.c vers.c
OBJS=   main.o bind.o comm.o echo.o edit.o file.o help.o hist.o list.o \
X	stat.o term.o tree.o util.o vars.o vers.o
X
X# --------------------------------------------------------------------- #
X
all:    utree utree.prlist
X
utree:  $(UTREE)
X
strip:  $(UTREE)
X	$(CP) $(UTREE) $(UTREE)+sym
X	$(STRIP) $(UTREE)
X
utree.prlist:   $(UTPRL)
X
X# Compile and link utree
X$(UTREE):       $(OBJS)
X	$(CC) $(CFLAGS) $(LFLAGS) $(OBJS) -o $@ $(LIBS) $(LLIBS)
X
X# Compile and link utree.prlist
X$(UTPRL):       utree.prlist.c
X	$(CC) -s $(CFLAGS) $(MFLAGS) $(LFLAGS) $? -o $@ $(MLIBS) $(LIBS) $(LLIBS)
X
X# Clean up
clean:
X	rm -f core *.o
X
X# --------------------------------------------------------------------- #
X
X$(OBJS):        $(DEFS)
X	$(CC) $(CFLAGS) -c $<
X
X# --------------------------------------------------------------------- #
X
END_OF_FILE
if test 1766 -ne `wc -c <'sys/Makefile.SUN'`; then
    echo shar: \"'sys/Makefile.SUN'\" unpacked with wrong size!
fi
# end of 'sys/Makefile.SUN'
fi
if test -f 'sys/Makefile.ULT' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/Makefile.ULT'\"
else
echo shar: Extracting \"'sys/Makefile.ULT'\" \(1757 characters\)
sed "s/^X//" >'sys/Makefile.ULT' <<'END_OF_FILE'
X#
X#       Makefile for UTREE
X#       klin, Mon Feb 24 00:02:38 1992
X#
X#       @(#) utree 3.03-um (klin) Feb 23 1992 Makefile
X#
X#       Version:        DECstation/VAXstation, ULTRIX-32 3.1 (BSD 4.3)
X
X# Compiler flags, loader flags and libraries
CFLAGS= -DBSD -O
MFLAGS=
LFLAGS=
LIBS=   -ltermcap
MLIBS=
X# Additional local libraries
LLIBS=
X
X# --------------------------------------------------------------------- #
X
X# Some needed commands to create utree
CC=     cc
CP=     cp
STRIP=  strip
X
X# --------------------------------------------------------------------- #
X
X# Utree executables
UTREE=  ../bin/utree
UTPRL=  ../bin/utree.prlist
X
X# --------------------------------------------------------------------- #
X
X# Utree header files
DEFS=   conf.h cmds.h defs.h help.h hist.h keys.h list.h term.h vars.h
X
X# Utree sources and objects
SRCS=   main.c bind.c comm.c echo.c edit.c file.c help.c hist.c list.c \
X	stat.c term.c tree.c util.c vars.c vers.c
OBJS=   main.o bind.o comm.o echo.o edit.o file.o help.o hist.o list.o \
X	stat.o term.o tree.o util.o vars.o vers.o
X
X# --------------------------------------------------------------------- #
X
all:    utree utree.prlist
X
utree:  $(UTREE)
X
strip:  $(UTREE)
X	$(CP) $(UTREE) $(UTREE)+sym
X	$(STRIP) $(UTREE)
X
utree.prlist:   $(UTPRL)
X
X# Compile and link utree
X$(UTREE):       $(OBJS)
X	$(CC) $(CFLAGS) $(LFLAGS) $(OBJS) -o $@ $(LIBS) $(LLIBS)
X
X# Compile and link utree.prlist
X$(UTPRL):       utree.prlist.c
X	$(CC) -s $(CFLAGS) $(MFLAGS) $(LFLAGS) $? -o $@ $(MLIBS) $(LIBS) $(LLIBS)
X
X# Clean up
clean:
X	rm -f core *.o
X
X# --------------------------------------------------------------------- #
X
X$(OBJS):        $(DEFS)
X	$(CC) $(CFLAGS) -c $<
X
X# --------------------------------------------------------------------- #
X
END_OF_FILE
if test 1757 -ne `wc -c <'sys/Makefile.ULT'`; then
    echo shar: \"'sys/Makefile.ULT'\" unpacked with wrong size!
fi
# end of 'sys/Makefile.ULT'
fi
if test -f 'sys/Makefile.V.2' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/Makefile.V.2'\"
else
echo shar: Extracting \"'sys/Makefile.V.2'\" \(1727 characters\)
sed "s/^X//" >'sys/Makefile.V.2' <<'END_OF_FILE'
X#
X#       Makefile for UTREE
X#       klin, Mon Feb 24 00:02:38 1992
X#
X#       @(#) utree 3.03-um (klin) Feb 23 1992 Makefile
X#
X#       Version: Generic for System V.2
X
X# Compiler flags, loader flags and libraries
CFLAGS= -O
MFLAGS= -f
LFLAGS=
LIBS=   -lcurses
MLIBS=  -lm
X# Additional local libraries
LLIBS=
X
X# --------------------------------------------------------------------- #
X
X# Some needed commands to create utree
CC=     cc
CP=     cp
STRIP=  strip
X
X# --------------------------------------------------------------------- #
X
X# Utree executables
UTREE=  ../bin/utree
UTPRL=  ../bin/utree.prlist
X
X# --------------------------------------------------------------------- #
X
X# Utree header files
DEFS=   conf.h cmds.h defs.h help.h hist.h keys.h list.h term.h vars.h
X
X# Utree sources and objects
SRCS=   main.c bind.c comm.c echo.c edit.c file.c help.c hist.c list.c \
X	stat.c term.c tree.c util.c vars.c vers.c
OBJS=   main.o bind.o comm.o echo.o edit.o file.o help.o hist.o list.o \
X	stat.o term.o tree.o util.o vars.o vers.o
X
X# --------------------------------------------------------------------- #
X
all:    utree utree.prlist
X
utree:  $(UTREE)
X
strip:  $(UTREE)
X	$(CP) $(UTREE) $(UTREE)+sym
X	$(STRIP) $(UTREE)
X
utree.prlist:   $(UTPRL)
X
X# Compile and link utree
X$(UTREE):       $(OBJS)
X	$(CC) $(CFLAGS) $(LFLAGS) $(OBJS) -o $@ $(LIBS) $(LLIBS)
X
X# Compile and link utree.prlist
X$(UTPRL):       utree.prlist.c
X	$(CC) -s $(CFLAGS) $(MFLAGS) $(LFLAGS) $? -o $@ $(MLIBS) $(LIBS) $(LLIBS)
X
X# Clean up
clean:
X	rm -f core *.o
X
X# --------------------------------------------------------------------- #
X
X$(OBJS):        $(DEFS)
X	$(CC) $(CFLAGS) -c $<
X
X# --------------------------------------------------------------------- #
X
END_OF_FILE
if test 1727 -ne `wc -c <'sys/Makefile.V.2'`; then
    echo shar: \"'sys/Makefile.V.2'\" unpacked with wrong size!
fi
# end of 'sys/Makefile.V.2'
fi
if test -f 'sys/Makefile.V.3' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/Makefile.V.3'\"
else
echo shar: Extracting \"'sys/Makefile.V.3'\" \(1727 characters\)
sed "s/^X//" >'sys/Makefile.V.3' <<'END_OF_FILE'
X#
X#       Makefile for UTREE
X#       klin, Mon Feb 24 00:02:38 1992
X#
X#       @(#) utree 3.03-um (klin) Feb 23 1992 Makefile
X#
X#       Version: Generic for System V.3
X
X# Compiler flags, loader flags and libraries
CFLAGS= -O
MFLAGS= -f
LFLAGS=
LIBS=   -lcurses
MLIBS=  -lm
X# Additional local libraries
LLIBS=
X
X# --------------------------------------------------------------------- #
X
X# Some needed commands to create utree
CC=     cc
CP=     cp
STRIP=  strip
X
X# --------------------------------------------------------------------- #
X
X# Utree executables
UTREE=  ../bin/utree
UTPRL=  ../bin/utree.prlist
X
X# --------------------------------------------------------------------- #
X
X# Utree header files
DEFS=   conf.h cmds.h defs.h help.h hist.h keys.h list.h term.h vars.h
X
X# Utree sources and objects
SRCS=   main.c bind.c comm.c echo.c edit.c file.c help.c hist.c list.c \
X	stat.c term.c tree.c util.c vars.c vers.c
OBJS=   main.o bind.o comm.o echo.o edit.o file.o help.o hist.o list.o \
X	stat.o term.o tree.o util.o vars.o vers.o
X
X# --------------------------------------------------------------------- #
X
all:    utree utree.prlist
X
utree:  $(UTREE)
X
strip:  $(UTREE)
X	$(CP) $(UTREE) $(UTREE)+sym
X	$(STRIP) $(UTREE)
X
utree.prlist:   $(UTPRL)
X
X# Compile and link utree
X$(UTREE):       $(OBJS)
X	$(CC) $(CFLAGS) $(LFLAGS) $(OBJS) -o $@ $(LIBS) $(LLIBS)
X
X# Compile and link utree.prlist
X$(UTPRL):       utree.prlist.c
X	$(CC) -s $(CFLAGS) $(MFLAGS) $(LFLAGS) $? -o $@ $(MLIBS) $(LIBS) $(LLIBS)
X
X# Clean up
clean:
X	rm -f core *.o
X
X# --------------------------------------------------------------------- #
X
X$(OBJS):        $(DEFS)
X	$(CC) $(CFLAGS) -c $<
X
X# --------------------------------------------------------------------- #
X
END_OF_FILE
if test 1727 -ne `wc -c <'sys/Makefile.V.3'`; then
    echo shar: \"'sys/Makefile.V.3'\" unpacked with wrong size!
fi
# end of 'sys/Makefile.V.3'
fi
if test -f 'sys/Makefile.VAX' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/Makefile.VAX'\"
else
echo shar: Extracting \"'sys/Makefile.VAX'\" \(1735 characters\)
sed "s/^X//" >'sys/Makefile.VAX' <<'END_OF_FILE'
X#
X#       Makefile for UTREE
X#       klin, Mon Feb 24 00:02:38 1992
X#
X#       @(#) utree 3.03-um (klin) Feb 23 1992 Makefile
X#
X#       Version:        DEC VAX/750, BSD4.3 UNIX
X
X# Compiler flags, loader flags and libraries
CFLAGS= -DBSD -O
MFLAGS=
LFLAGS=
LIBS=   -ltermcap
MLIBS=
X# Additional local libraries
LLIBS=
X
X# --------------------------------------------------------------------- #
X
X# Some needed commands to create utree
CC=     cc
CP=     cp
STRIP=  strip
X
X# --------------------------------------------------------------------- #
X
X# Utree executables
UTREE=  ../bin/utree
UTPRL=  ../bin/utree.prlist
X
X# --------------------------------------------------------------------- #
X
X# Utree header files
DEFS=   conf.h cmds.h defs.h help.h hist.h keys.h list.h term.h vars.h
X
X# Utree sources and objects
SRCS=   main.c bind.c comm.c echo.c edit.c file.c help.c hist.c list.c \
X	stat.c term.c tree.c util.c vars.c vers.c
OBJS=   main.o bind.o comm.o echo.o edit.o file.o help.o hist.o list.o \
X	stat.o term.o tree.o util.o vars.o vers.o
X
X# --------------------------------------------------------------------- #
X
all:    utree utree.prlist
X
utree:  $(UTREE)
X
strip:  $(UTREE)
X	$(CP) $(UTREE) $(UTREE)+sym
X	$(STRIP) $(UTREE)
X
utree.prlist:   $(UTPRL)
X
X# Compile and link utree
X$(UTREE):       $(OBJS)
X	$(CC) $(CFLAGS) $(LFLAGS) $(OBJS) -o $@ $(LIBS) $(LLIBS)
X
X# Compile and link utree.prlist
X$(UTPRL):       utree.prlist.c
X	$(CC) -s $(CFLAGS) $(MFLAGS) $(LFLAGS) $? -o $@ $(MLIBS) $(LIBS) $(LLIBS)
X
X# Clean up
clean:
X	rm -f core *.o
X
X# --------------------------------------------------------------------- #
X
X$(OBJS):        $(DEFS)
X	$(CC) $(CFLAGS) -c $<
X
X# --------------------------------------------------------------------- #
X
END_OF_FILE
if test 1735 -ne `wc -c <'sys/Makefile.VAX'`; then
    echo shar: \"'sys/Makefile.VAX'\" unpacked with wrong size!
fi
# end of 'sys/Makefile.VAX'
fi
if test -f 'sys/Makefile.X23' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/Makefile.X23'\"
else
echo shar: Extracting \"'sys/Makefile.X23'\" \(1745 characters\)
sed "s/^X//" >'sys/Makefile.X23' <<'END_OF_FILE'
X#
X#       Makefile for UTREE
X#       klin, Mon Feb 24 00:02:38 1992
X#
X#       @(#) utree 3.03-um (klin) Feb 23 1992 Makefile
X#
X#       Version: SCO XENIX SysV 2.3.2 386 GT
X
X# Compiler flags, loader flags and libraries
CFLAGS= -x2.3 -O -DXENIX
MFLAGS=
LFLAGS=
LIBS=   -ltermcap -ldir
MLIBS=
X# Additional local libraries
LLIBS=
X
X# --------------------------------------------------------------------- #
X
X# Some needed commands to create utree
CC=     cc
CP=     cp
STRIP=  strip
X
X# --------------------------------------------------------------------- #
X
X# Utree executables
UTREE=  ../bin/utree
UTPRL=  ../bin/utree.prlist
X
X# --------------------------------------------------------------------- #
X
X# Utree header files
DEFS=   conf.h cmds.h defs.h help.h hist.h keys.h list.h term.h vars.h
X
X# Utree sources and objects
SRCS=   main.c bind.c comm.c echo.c edit.c file.c help.c hist.c list.c \
X	stat.c term.c tree.c util.c vars.c vers.c
OBJS=   main.o bind.o comm.o echo.o edit.o file.o help.o hist.o list.o \
X	stat.o term.o tree.o util.o vars.o vers.o
X
X# --------------------------------------------------------------------- #
X
all:    utree utree.prlist
X
utree:  $(UTREE)
X
strip:  $(UTREE)
X	$(CP) $(UTREE) $(UTREE)+sym
X	$(STRIP) $(UTREE)
X
utree.prlist:   $(UTPRL)
X
X# Compile and link utree
X$(UTREE):       $(OBJS)
X	$(CC) $(CFLAGS) $(LFLAGS) $(OBJS) -o $@ $(LIBS) $(LLIBS)
X
X# Compile and link utree.prlist
X$(UTPRL):       utree.prlist.c
X	$(CC) -s $(CFLAGS) $(MFLAGS) $(LFLAGS) $? -o $@ $(MLIBS) $(LIBS) $(LLIBS)
X
X# Clean up
clean:
X	rm -f core *.o
X
X# --------------------------------------------------------------------- #
X
X$(OBJS):        $(DEFS)
X	$(CC) $(CFLAGS) -c $<
X
X# --------------------------------------------------------------------- #
X
END_OF_FILE
if test 1745 -ne `wc -c <'sys/Makefile.X23'`; then
    echo shar: \"'sys/Makefile.X23'\" unpacked with wrong size!
fi
# end of 'sys/Makefile.X23'
fi
if test -f 'sys/conf.h.BSD' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/conf.h.BSD'\"
else
echo shar: Extracting \"'sys/conf.h.BSD'\" \(2340 characters\)
sed "s/^X//" >'sys/conf.h.BSD' <<'END_OF_FILE'
X/*
X *      CONF.H
X *      UTREE system dependent configurable definitions.
X *      3.03-um klin, Sat Feb 15 19:23:58 1992
X *
X *      Copyright (c) 1991/92 by Peter Klingebiel & UNIX Magazin Muenchen.
X *      For copying and distribution information see the file COPYRIGHT.
X *
X *      Version:        Generic BSD4.2/BSD4.3
X */
X#if     defined(_MAIN_) && !defined(lint)
static char sccsid_conf[] = "@(#) utree 3.03-um (klin) Feb 15 1992 conf.h";
X#endif  /* _MAIN_ && !lint */
X
X/*
X *      This file contains definitions you can change for your needs.
X */
X
X/*
X *      SOME UTREE DEPENDENT DEFINITIONS.
X */
X
X/* BSD: define HASVSPRINTF if your system supports vsprintf(3)          */
X#define HASVSPRINTF             /* Not needed for SYSV!                 */
X
X/* SYSV: define HASFIONREAD if your system supports the FIONREAD        */
X/*       ioctl(2) system call to check how many chars are typed ahead   */
X/*#define HASFIONREAD             /* Not needed for BSD!                  */
X
X/* SYSV: define HASVFORK if your system supports vfork(2)               */
X/*#define HASVFORK                /* Not needed for BSD!                  */
X
X/* SYSV: define NODIRENT if your system not supports the directory type */
X/*       struct dirent with opendir(3), closedir(3) and readdir(3)      */
X/*#define NODIRENT                /* Needed only for older SYSVs          */
X
X/* ALL: define NOWINCHG to ignore sreen resizing on window systems. The */
X/*      handling of screen resizing is intended as a little bit support */
X/*      for window systems like X, but it may not run on your system.   */
X/*      ATTENTION: Resizing may be confusing for utree anyway!          */
X/*#define NOWINCHG                /* No screen resizing allowed           */
X
X/* ALL: define STRUCTCOPY if your compiler doesn't support assignment   */
X/*      of struct variables, i.e. t[o] = f[rom].                        */
X/*#define STRUCTCOPY(f, t) memcpy(t, f, sizeof(f))        /* For SYSV     */
X/*#define STRUCTCOPY(f, t) bcopy(f, t, sizeof(f))         /* For BSD      */
X
X/* ALL: define UTCLOCK for a clock updated in echo line every second    */
X#define UTCLOCK                 /* Show/update clock                    */
X
X/* ALL: directory for utree startup file and help pages                 */
X#ifndef UTLIB
X# define UTLIB "/usr/local/lib"
X#endif  /* !UTLIB */
X
END_OF_FILE
if test 2340 -ne `wc -c <'sys/conf.h.BSD'`; then
    echo shar: \"'sys/conf.h.BSD'\" unpacked with wrong size!
fi
# end of 'sys/conf.h.BSD'
fi
if test -f 'sys/conf.h.CON' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/conf.h.CON'\"
else
echo shar: Extracting \"'sys/conf.h.CON'\" \(2344 characters\)
sed "s/^X//" >'sys/conf.h.CON' <<'END_OF_FILE'
X/*
X *      CONF.H
X *      UTREE system dependent configurable definitions.
X *      3.03-um klin, Sat Feb 15 19:23:58 1992
X *
X *      Copyright (c) 1991/92 by Peter Klingebiel & UNIX Magazin Muenchen.
X *      For copying and distribution information see the file COPYRIGHT.
X *
X *      Version:        Convex C120, ConvexOS 8.1
X */
X#if     defined(_MAIN_) && !defined(lint)
static char sccsid_conf[] = "@(#) utree 3.03-um (klin) Feb 15 1992 conf.h";
X#endif  /* _MAIN_ && !lint */
X
X/*
X *      This file contains definitions you can change for your needs.
X */
X
X/*
X *      SOME UTREE DEPENDENT DEFINITIONS.
X */
X
X/* BSD: define HASVSPRINTF if your system supports vsprintf(3)          */
X#define HASVSPRINTF             /* Not needed for SYSV!                 */
X
X/* SYSV: define HASFIONREAD if your system supports the FIONREAD        */
X/*       ioctl(2) system call to check how many chars are typed ahead   */
X/*#define HASFIONREAD             /* Not needed for BSD!                  */
X
X/* SYSV: define HASVFORK if your system supports vfork(2)               */
X/*#define HASVFORK                /* Not needed for BSD!                  */
X
X/* SYSV: define NODIRENT if your system not supports the directory type */
X/*       struct dirent with opendir(3), closedir(3) and readdir(3)      */
X/*#define NODIRENT                /* Needed only for older SYSVs          */
X
X/* ALL: define NOWINCHG to ignore sreen resizing on window systems. The */
X/*      handling of screen resizing is intended as a little bit support */
X/*      for window systems like X, but it may not run on your system.   */
X/*      ATTENTION: Resizing may be confusing for utree anyway!          */
X/*#define NOWINCHG                /* No screen resizing allowed           */
X
X/* ALL: define STRUCTCOPY if your compiler doesn't support assignment   */
X/*      of struct variables, i.e. t[o] = f[rom].                        */
X/*#define STRUCTCOPY(f, t) memcpy(t, f, sizeof(f))        /* For SYSV     */
X/*#define STRUCTCOPY(f, t) bcopy(f, t, sizeof(f))         /* For BSD      */
X
X/* ALL: define UTCLOCK for a clock updated in echo line every second    */
X#define UTCLOCK                 /* Show/update clock                    */
X
X/* ALL: directory for utree startup file and help pages                 */
X#ifndef UTLIB
X# define UTLIB "/usr/local/lib"
X#endif  /* !UTLIB */
X
END_OF_FILE
if test 2344 -ne `wc -c <'sys/conf.h.CON'`; then
    echo shar: \"'sys/conf.h.CON'\" unpacked with wrong size!
fi
# end of 'sys/conf.h.CON'
fi
if test -f 'sys/conf.h.SUN' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/conf.h.SUN'\"
else
echo shar: Extracting \"'sys/conf.h.SUN'\" \(2343 characters\)
sed "s/^X//" >'sys/conf.h.SUN' <<'END_OF_FILE'
X/*
X *      CONF.H
X *      UTREE system dependent configurable definitions.
X *      3.03-um klin, Sat Feb 15 19:23:58 1992
X *
X *      Copyright (c) 1991/92 by Peter Klingebiel & UNIX Magazin Muenchen.
X *      For copying and distribution information see the file COPYRIGHT.
X *
X *      Version:        SUN4 (SPARC) SunOs 4.1.x
X */
X#if     defined(_MAIN_) && !defined(lint)
static char sccsid_conf[] = "@(#) utree 3.03-um (klin) Feb 15 1992 conf.h";
X#endif  /* _MAIN_ && !lint */
X
X/*
X *      This file contains definitions you can change for your needs.
X */
X
X/*
X *      SOME UTREE DEPENDENT DEFINITIONS.
X */
X
X/* BSD: define HASVSPRINTF if your system supports vsprintf(3)          */
X#define HASVSPRINTF             /* Not needed for SYSV!                 */
X
X/* SYSV: define HASFIONREAD if your system supports the FIONREAD        */
X/*       ioctl(2) system call to check how many chars are typed ahead   */
X/*#define HASFIONREAD             /* Not needed for BSD!                  */
X
X/* SYSV: define HASVFORK if your system supports vfork(2)               */
X/*#define HASVFORK                /* Not needed for BSD!                  */
X
X/* SYSV: define NODIRENT if your system not supports the directory type */
X/*       struct dirent with opendir(3), closedir(3) and readdir(3)      */
X/*#define NODIRENT                /* Needed only for older SYSVs          */
X
X/* ALL: define NOWINCHG to ignore sreen resizing on window systems. The */
X/*      handling of screen resizing is intended as a little bit support */
X/*      for window systems like X, but it may not run on your system.   */
X/*      ATTENTION: Resizing may be confusing for utree anyway!          */
X/*#define NOWINCHG                /* No screen resizing allowed           */
X
X/* ALL: define STRUCTCOPY if your compiler doesn't support assignment   */
X/*      of struct variables, i.e. t[o] = f[rom].                        */
X/*#define STRUCTCOPY(f, t) memcpy(t, f, sizeof(f))        /* For SYSV     */
X/*#define STRUCTCOPY(f, t) bcopy(f, t, sizeof(f))         /* For BSD      */
X
X/* ALL: define UTCLOCK for a clock updated in echo line every second    */
X#define UTCLOCK                 /* Show/update clock                    */
X
X/* ALL: directory for utree startup file and help pages                 */
X#ifndef UTLIB
X# define UTLIB "/usr/local/lib"
X#endif  /* !UTLIB */
X
END_OF_FILE
if test 2343 -ne `wc -c <'sys/conf.h.SUN'`; then
    echo shar: \"'sys/conf.h.SUN'\" unpacked with wrong size!
fi
# end of 'sys/conf.h.SUN'
fi
if test -f 'sys/conf.h.V.2' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/conf.h.V.2'\"
else
echo shar: Extracting \"'sys/conf.h.V.2'\" \(2341 characters\)
sed "s/^X//" >'sys/conf.h.V.2' <<'END_OF_FILE'
X/*
X *      CONF.H
X *      UTREE system dependent configurable definitions.
X *      3.03-um klin, Sat Feb 15 19:23:58 1992
X *
X *      Copyright (c) 1991/92 by Peter Klingebiel & UNIX Magazin Muenchen.
X *      For copying and distribution information see the file COPYRIGHT.
X *
X *      Version:        Generic for System V.2
X */
X#if     defined(_MAIN_) && !defined(lint)
static char sccsid_conf[] = "@(#) utree 3.03-um (klin) Feb 15 1992 conf.h";
X#endif  /* _MAIN_ && !lint */
X
X/*
X *      This file contains definitions you can change for your needs.
X */
X
X/*
X *      SOME UTREE DEPENDENT DEFINITIONS.
X */
X
X/* BSD: define HASVSPRINTF if your system supports vsprintf(3)          */
X/*#define HASVSPRINTF             /* Not needed for SYSV!                 */
X
X/* SYSV: define HASFIONREAD if your system supports the FIONREAD        */
X/*       ioctl(2) system call to check how many chars are typed ahead   */
X/*#define HASFIONREAD             /* Not needed for BSD!                  */
X
X/* SYSV: define HASVFORK if your system supports vfork(2)               */
X/*#define HASVFORK                /* Not needed for BSD!                  */
X
X/* SYSV: define NODIRENT if your system not supports the directory type */
X/*       struct dirent with opendir(3), closedir(3) and readdir(3)      */
X/*#define NODIRENT                /* Needed only for older SYSVs          */
X
X/* ALL: define NOWINCHG to ignore sreen resizing on window systems. The */
X/*      handling of screen resizing is intended as a little bit support */
X/*      for window systems like X, but it may not run on your system.   */
X/*      ATTENTION: Resizing may be confusing for utree anyway!          */
X#define NOWINCHG                /* No screen resizing allowed           */
X
X/* ALL: define STRUCTCOPY if your compiler doesn't support assignment   */
X/*      of struct variables, i.e. t[o] = f[rom].                        */
X/*#define STRUCTCOPY(f, t) memcpy(t, f, sizeof(f))        /* For SYSV     */
X/*#define STRUCTCOPY(f, t) bcopy(f, t, sizeof(f))         /* For BSD      */
X
X/* ALL: define UTCLOCK for a clock updated in echo line every second    */
X#define UTCLOCK                 /* Show/update clock                    */
X
X/* ALL: directory for utree startup file and help pages                 */
X#ifndef UTLIB
X# define UTLIB "/usr/local/lib"
X#endif  /* !UTLIB */
X
END_OF_FILE
if test 2341 -ne `wc -c <'sys/conf.h.V.2'`; then
    echo shar: \"'sys/conf.h.V.2'\" unpacked with wrong size!
fi
# end of 'sys/conf.h.V.2'
fi
if test -f 'sys/conf.h.V.3' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/conf.h.V.3'\"
else
echo shar: Extracting \"'sys/conf.h.V.3'\" \(2341 characters\)
sed "s/^X//" >'sys/conf.h.V.3' <<'END_OF_FILE'
X/*
X *      CONF.H
X *      UTREE system dependent configurable definitions.
X *      3.03-um klin, Sat Feb 15 19:23:58 1992
X *
X *      Copyright (c) 1991/92 by Peter Klingebiel & UNIX Magazin Muenchen.
X *      For copying and distribution information see the file COPYRIGHT.
X *
X *      Version:        Generic for System V.3
X */
X#if     defined(_MAIN_) && !defined(lint)
static char sccsid_conf[] = "@(#) utree 3.03-um (klin) Feb 15 1992 conf.h";
X#endif  /* _MAIN_ && !lint */
X
X/*
X *      This file contains definitions you can change for your needs.
X */
X
X/*
X *      SOME UTREE DEPENDENT DEFINITIONS.
X */
X
X/* BSD: define HASVSPRINTF if your system supports vsprintf(3)          */
X/*#define HASVSPRINTF             /* Not needed for SYSV!                 */
X
X/* SYSV: define HASFIONREAD if your system supports the FIONREAD        */
X/*       ioctl(2) system call to check how many chars are typed ahead   */
X/*#define HASFIONREAD             /* Not needed for BSD!                  */
X
X/* SYSV: define HASVFORK if your system supports vfork(2)               */
X/*#define HASVFORK                /* Not needed for BSD!                  */
X
X/* SYSV: define NODIRENT if your system not supports the directory type */
X/*       struct dirent with opendir(3), closedir(3) and readdir(3)      */
X/*#define NODIRENT                /* Needed only for older SYSVs          */
X
X/* ALL: define NOWINCHG to ignore sreen resizing on window systems. The */
X/*      handling of screen resizing is intended as a little bit support */
X/*      for window systems like X, but it may not run on your system.   */
X/*      ATTENTION: Resizing may be confusing for utree anyway!          */
X#define NOWINCHG                /* No screen resizing allowed           */
X
X/* ALL: define STRUCTCOPY if your compiler doesn't support assignment   */
X/*      of struct variables, i.e. t[o] = f[rom].                        */
X/*#define STRUCTCOPY(f, t) memcpy(t, f, sizeof(f))        /* For SYSV     */
X/*#define STRUCTCOPY(f, t) bcopy(f, t, sizeof(f))         /* For BSD      */
X
X/* ALL: define UTCLOCK for a clock updated in echo line every second    */
X#define UTCLOCK                 /* Show/update clock                    */
X
X/* ALL: directory for utree startup file and help pages                 */
X#ifndef UTLIB
X# define UTLIB "/usr/local/lib"
X#endif  /* !UTLIB */
X
END_OF_FILE
if test 2341 -ne `wc -c <'sys/conf.h.V.3'`; then
    echo shar: \"'sys/conf.h.V.3'\" unpacked with wrong size!
fi
# end of 'sys/conf.h.V.3'
fi
if test -f 'sys/conf.h.VAX' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/conf.h.VAX'\"
else
echo shar: Extracting \"'sys/conf.h.VAX'\" \(2339 characters\)
sed "s/^X//" >'sys/conf.h.VAX' <<'END_OF_FILE'
X/*
X *      CONF.H
X *      UTREE system dependent configurable definitions.
X *      3.03-um klin, Sat Feb 15 19:23:58 1992
X *
X *      Copyright (c) 1991/92 by Peter Klingebiel & UNIX Magazin Muenchen.
X *      For copying and distribution information see the file COPYRIGHT.
X *
X *      Version:        DEC VAX/750 BSD4.3
X */
X#if     defined(_MAIN_) && !defined(lint)
static char sccsid_conf[] = "@(#) utree 3.03-um (klin) Feb 15 1992 conf.h";
X#endif  /* _MAIN_ && !lint */
X
X/*
X *      This file contains definitions you can change for your needs.
X */
X
X/*
X *      SOME UTREE DEPENDENT DEFINITIONS.
X */
X
X/* BSD: define HASVSPRINTF if your system supports vsprintf(3)          */
X/*#define HASVSPRINTF             /* Not needed for SYSV!                 */
X
X/* SYSV: define HASFIONREAD if your system supports the FIONREAD        */
X/*       ioctl(2) system call to check how many chars are typed ahead   */
X/*#define HASFIONREAD             /* Not needed for BSD!                  */
X
X/* SYSV: define HASVFORK if your system supports vfork(2)               */
X/*#define HASVFORK                /* Not needed for BSD!                  */
X
X/* SYSV: define NODIRENT if your system not supports the directory type */
X/*       struct dirent with opendir(3), closedir(3) and readdir(3)      */
X/*#define NODIRENT                /* Needed only for older SYSVs          */
X
X/* ALL: define NOWINCHG to ignore sreen resizing on window systems. The */
X/*      handling of screen resizing is intended as a little bit support */
X/*      for window systems like X, but it may not run on your system.   */
X/*      ATTENTION: Resizing may be confusing for utree anyway!          */
X/*#define NOWINCHG                /* No screen resizing allowed           */
X
X/* ALL: define STRUCTCOPY if your compiler doesn't support assignment   */
X/*      of struct variables, i.e. t[o] = f[rom].                        */
X/*#define STRUCTCOPY(f, t) memcpy(t, f, sizeof(f))        /* For SYSV     */
X/*#define STRUCTCOPY(f, t) bcopy(f, t, sizeof(f))         /* For BSD      */
X
X/* ALL: define UTCLOCK for a clock updated in echo line every second    */
X#define UTCLOCK                 /* Show/update clock                    */
X
X/* ALL: directory for utree startup file and help pages                 */
X#ifndef UTLIB
X# define UTLIB "/usr/local/lib"
X#endif  /* !UTLIB */
X
END_OF_FILE
if test 2339 -ne `wc -c <'sys/conf.h.VAX'`; then
    echo shar: \"'sys/conf.h.VAX'\" unpacked with wrong size!
fi
# end of 'sys/conf.h.VAX'
fi
if test ! -d 'tst' ; then
    echo shar: Creating directory \"'tst'\"
    mkdir 'tst'
fi
if test -f 'tst/fionread.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tst/fionread.c'\"
else
echo shar: Extracting \"'tst/fionread.c'\" \(1207 characters\)
sed "s/^X//" >'tst/fionread.c' <<'END_OF_FILE'
X/*
X *      FIONREAD.C
X *      Test the FIONREAD ioctl system call
X *      klin, Mon Feb 24 20:29:50 1992
X *
X *      Defs:   Define BSD for BSD systems.
X *      Test:   Enter some chars (don't forget <RETURN> !)
X *              and see the result from ioctl(FIONREAD).
X *              If some characters were entered, there should be
X *              displayed a message with the number of entered chars
X *              and the entered string!
X */
X
X#include <stdio.h>
X#ifndef BSD
X#include <sys/termio.h>         /* FIONREAD may be defined here */
X#endif
X#include <sys/ioctl.h>          /*          or here (like BSD)  */
X
X/*
X *      Main routine
X */
main()
X{
X  char buf[256];
X  int rv, nc;
X
X  /* Terminate with BREAK ! */
X  while(1) {
X    printf("\nWAITING FOR INPUT ...\n");
X    fflush(stdout);
X    /* Wait 5 seconds for entering input */
X    sleep(5);
X    rv = ioctl(0, FIONREAD, &nc);
X    printf("\nIOCTL(FIONREAD) rv=%d nc=%d ", rv, nc);
X    /* OK: chars read! */
X    if(nc > 0) {
X      /* Fill and display read characters */
X      gets(buf);
X      printf("buf=[%s]\n", buf);
X    }
X    else
X      /* Should not happen on input if ioctl(FIONREAD) works! */
X      printf("NO INPUT\n");
X  }
X
X} /* main() */
X
END_OF_FILE
if test 1207 -ne `wc -c <'tst/fionread.c'`; then
    echo shar: \"'tst/fionread.c'\" unpacked with wrong size!
fi
# end of 'tst/fionread.c'
fi
if test -f 'tst/sigwinch.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tst/sigwinch.c'\"
else
echo shar: Extracting \"'tst/sigwinch.c'\" \(1159 characters\)
sed "s/^X//" >'tst/sigwinch.c' <<'END_OF_FILE'
X/*
X *      SIGWINCH.C
X *      Test signal SIGWINCH and TIOCGWINSZ ioctl system call
X *      klin, Mon Feb 24 20:35:53 1992
X *
X *      Defs:   Define BSD for BSD systems.
X *      Test:   Start sigwinch under X in a xterm window and resize
X *              the window sometimes. After resizing there should be
X *              sent a signal SIGWINCH from the kernel which is catched
X *              by the sigwinch signal handler. The ioctl(TIOCGWINSZ)
X *              systemcalls should return the new size of the window.
X */
X
X#include <stdio.h>
X#include <signal.h>
X#include <sys/types.h>
X#ifndef BSD
X#include <sys/termio.h>         /* struct winsize may be defined here */
X#endif
X#include <sys/ioctl.h>          /*                or here (like BSD)  */
X
X/*
X *      Signal handler for signal SIGWINCH
X */
sigwinch(sig)
X  int sig;
X{
X  struct winsize ws;
X  int rv;
X
X  signal(SIGWINCH, sigwinch);
X  if(sig)
X    printf("SIGWINCH-HANDLER: sig=%d\n", sig);
X  rv = ioctl(0, TIOCGWINSZ, &ws);
X  printf("IOCTL: rv=%d rows=%d cols=%d\n", rv, ws.ws_row, ws.ws_col);
X
X} /* sigwinch() */
X
X/*
X *      Main routine
X */
main()
X{
X  sigwinch(0);
X  while(1)
X    ;
X
X} /* main() */
X
END_OF_FILE
if test 1159 -ne `wc -c <'tst/sigwinch.c'`; then
    echo shar: \"'tst/sigwinch.c'\" unpacked with wrong size!
fi
# end of 'tst/sigwinch.c'
fi
echo shar: End of archive 1 \(of 8\).
cp /dev/null ark1isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 8 archives.
    rm -f ark[1-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
