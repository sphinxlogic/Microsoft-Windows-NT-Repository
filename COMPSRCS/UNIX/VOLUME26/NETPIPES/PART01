Newsgroups: comp.sources.unix
From: thoth@lightning.cis.ufl.edu (Robert H. Forsman, Jr)
Subject: v26i076: netpipes -- BSD network pipe tools, Part01/01
Sender: unix-sources-moderator@pa.dec.com
Approved: vixie@pa.dec.com

Submitted-By: thoth@lightning.cis.ufl.edu (Robert H. Forsman, Jr)
Posting-Number: Volume 26, Issue 76
Archive-Name: netpipes/part01


faucet and hose:
  These two utilities are useful for connecting arbitrary programs
over sockets.  The power of the '|' character in the shell can now be
used over the network.

[ Compiled and tested on Ultrix 4.2 and SunOS 4.1.*.  Faucet and hose
are interesting utilities for working across the network, but remember
that there is no provision for security in these tools. Also, you make
want to change the destination directory for "make install" to be
something like /usr/local/bin.]


#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 1 (of 1)."
# Contents:  COPYING Makefile README faucet.1 faucet.c hose.1 hose.c
#   portname.c
# Wrapped by tp@cognition.pa.dec.com on Wed Sep  9 16:49:24 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'COPYING' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'COPYING'\"
else
echo shar: Extracting \"'COPYING'\" \(17981 characters\)
sed "s/^X//" >'COPYING' <<'END_OF_FILE'
X		    GNU GENERAL PUBLIC LICENSE
X		       Version 2, June 1991
X
X Copyright (C) 1989, 1991 Free Software Foundation, Inc.
X                          675 Mass Ave, Cambridge, MA 02139, USA
X Everyone is permitted to copy and distribute verbatim copies
X of this license document, but changing it is not allowed.
X
X			    Preamble
X
X  The licenses for most software are designed to take away your
Xfreedom to share and change it.  By contrast, the GNU General Public
XLicense is intended to guarantee your freedom to share and change free
Xsoftware--to make sure the software is free for all its users.  This
XGeneral Public License applies to most of the Free Software
XFoundation's software and to any other program whose authors commit to
Xusing it.  (Some other Free Software Foundation software is covered by
Xhe GNU Library General Public License instead.)  You can apply it to
Xyour programs, too.
X
X  When we speak of free software, we are referring to freedom, not
Xprice.  Our General Public Licenses are designed to make sure that you
Xhave the freedom to distribute copies of free software (and charge for
Xthis service if you wish), that you receive source code or can get it
Xif you want it, that you can change the software or use pieces of it
Xin new free programs; and that you know you can do these things.
X
X  To protect your rights, we need to make restrictions that forbid
Xanyone to deny you these rights or to ask you to surrender the rights.
XThese restrictions translate to certain responsibilities for you if you
Xdistribute copies of the software, or if you modify it.
X
X  For example, if you distribute copies of such a program, whether
Xgratis or for a fee, you must give the recipients all the rights that
Xyou have.  You must make sure that they, too, receive or can get the
Xsource code.  And you must show them these terms so they know their
Xrights.
X
X  We protect your rights with two steps: (1) copyright the software, and
X(2) offer you this license which gives you legal permission to copy,
Xdistribute and/or modify the software.
X
X  Also, for each author's protection and ours, we want to make certain
Xthat everyone understands that there is no warranty for this free
Xsoftware.  If the software is modified by someone else and passed on, we
Xwant its recipients to know that what they have is not the original, so
Xthat any problems introduced by others will not reflect on the original
Xauthors' reputations.
X
X  Finally, any free program is threatened constantly by software
Xpatents.  We wish to avoid the danger that redistributors of a free
Xprogram will individually obtain patent licenses, in effect making the
Xprogram proprietary.  To prevent this, we have made it clear that any
Xpatent must be licensed for everyone's free use or not licensed at all.
X
X  The precise terms and conditions for copying, distribution and
Xmodification follow.
X
X		    GNU GENERAL PUBLIC LICENSE
X   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
X
X  0. This License applies to any program or other work which contains
Xa notice placed by the copyright holder saying it may be distributed
Xunder the terms of this General Public License.  The "Program", below,
Xrefers to any such program or work, and a "work based on the Program"
Xmeans either the Program or any derivative work under copyright law:
Xthat is to say, a work containing the Program or a portion of it,
Xeither verbatim or with modifications and/or translated into another
Xlanguage.  (Hereinafter, translation is included without limitation in
Xthe term "modification".)  Each licensee is addressed as "you".
X
XActivities other than copying, distribution and modification are not
Xcovered by this License; they are outside its scope.  The act of
Xrunning the Program is not restricted, and the output from the Program
Xis covered only if its contents constitute a work based on the
XProgram (independent of having been made by running the Program).
XWhether that is true depends on what the Program does.
X
X  1. You may copy and distribute verbatim copies of the Program's
Xsource code as you receive it, in any medium, provided that you
Xconspicuously and appropriately publish on each copy an appropriate
Xcopyright notice and disclaimer of warranty; keep intact all the
Xnotices that refer to this License and to the absence of any warranty;
Xand give any other recipients of the Program a copy of this License
Xalong with the Program.
X
XYou may charge a fee for the physical act of transferring a copy, and
Xyou may at your option offer warranty protection in exchange for a fee.
X
X  2. You may modify your copy or copies of the Program or any portion
Xof it, thus forming a work based on the Program, and copy and
Xdistribute such modifications or work under the terms of Section 1
Xabove, provided that you also meet all of these conditions:
X
X    a) You must cause the modified files to carry prominent notices
X    stating that you changed the files and the date of any change.
X
X    b) You must cause any work that you distribute or publish, that in
X    whole or in part contains or is derived from the Program or any
X    part thereof, to be licensed as a whole at no charge to all third
X    parties under the terms of this License.
X
X    c) If the modified program normally reads commands interactively
X    when run, you must cause it, when started running for such
X    interactive use in the most ordinary way, to print or display an
X    announcement including an appropriate copyright notice and a
X    notice that there is no warranty (or else, saying that you provide
X    a warranty) and that users may redistribute the program under
X    these conditions, and telling the user how to view a copy of this
X    License.  (Exception: if the Program itself is interactive but
X    does not normally print such an announcement, your work based on
X    the Program is not required to print an announcement.)
X
XThese requirements apply to the modified work as a whole.  If
Xidentifiable sections of that work are not derived from the Program,
Xand can be reasonably considered independent and separate works in
Xthemselves, then this License, and its terms, do not apply to those
Xsections when you distribute them as separate works.  But when you
Xdistribute the same sections as part of a whole which is a work based
Xon the Program, the distribution of the whole must be on the terms of
Xthis License, whose permissions for other licensees extend to the
Xentire whole, and thus to each and every part regardless of who wrote it.
X
XThus, it is not the intent of this section to claim rights or contest
Xyour rights to work written entirely by you; rather, the intent is to
Xexercise the right to control the distribution of derivative or
Xcollective works based on the Program.
X
XIn addition, mere aggregation of another work not based on the Program
Xwith the Program (or with a work based on the Program) on a volume of
Xa storage or distribution medium does not bring the other work under
Xthe scope of this License.
X
X  3. You may copy and distribute the Program (or a work based on it,
Xunder Section 2) in object code or executable form under the terms of
XSections 1 and 2 above provided that you also do one of the following:
X
X    a) Accompany it with the complete corresponding machine-readable
X    source code, which must be distributed under the terms of Sections
X    1 and 2 above on a medium customarily used for software interchange; or,
X
X    b) Accompany it with a written offer, valid for at least three
X    years, to give any third party, for a charge no more than your
X    cost of physically performing source distribution, a complete
X    machine-readable copy of the corresponding source code, to be
X    distributed under the terms of Sections 1 and 2 above on a medium
X    customarily used for software interchange; or,
X
X    c) Accompany it with the information you received as to the offer
X    to distribute corresponding source code.  (This alternative is
X    allowed only for noncommercial distribution and only if you
X    received the program in object code or executable form with such
X    an offer, in accord with Subsection b above.)
X
XThe source code for a work means the preferred form of the work for
Xmaking modifications to it.  For an executable work, complete source
Xcode means all the source code for all modules it contains, plus any
Xassociated interface definition files, plus the scripts used to
Xcontrol compilation and installation of the executable.  However, as a
Xspecial exception, the source code distributed need not include
Xanything that is normally distributed (in either source or binary
Xform) with the major components (compiler, kernel, and so on) of the
Xoperating system on which the executable runs, unless that component
Xitself accompanies the executable.
X
XIf distribution of executable or object code is made by offering
Xaccess to copy from a designated place, then offering equivalent
Xaccess to copy the source code from the same place counts as
Xdistribution of the source code, even though third parties are not
Xcompelled to copy the source along with the object code.
X
X  4. You may not copy, modify, sublicense, or distribute the Program
Xexcept as expressly provided under this License.  Any attempt
Xotherwise to copy, modify, sublicense or distribute the Program is
Xvoid, and will automatically terminate your rights under this License.
XHowever, parties who have received copies, or rights, from you under
Xthis License will not have their licenses terminated so long as such
Xparties remain in full compliance.
X
X  5. You are not required to accept this License, since you have not
Xsigned it.  However, nothing else grants you permission to modify or
Xdistribute the Program or its derivative works.  These actions are
Xprohibited by law if you do not accept this License.  Therefore, by
Xmodifying or distributing the Program (or any work based on the
XProgram), you indicate your acceptance of this License to do so, and
Xall its terms and conditions for copying, distributing or modifying
Xthe Program or works based on it.
X
X  6. Each time you redistribute the Program (or any work based on the
XProgram), the recipient automatically receives a license from the
Xoriginal licensor to copy, distribute or modify the Program subject to
Xthese terms and conditions.  You may not impose any further
Xrestrictions on the recipients' exercise of the rights granted herein.
XYou are not responsible for enforcing compliance by third parties to
Xthis License.
X
X  7. If, as a consequence of a court judgment or allegation of patent
Xinfringement or for any other reason (not limited to patent issues),
Xconditions are imposed on you (whether by court order, agreement or
Xotherwise) that contradict the conditions of this License, they do not
Xexcuse you from the conditions of this License.  If you cannot
Xdistribute so as to satisfy simultaneously your obligations under this
XLicense and any other pertinent obligations, then as a consequence you
Xmay not distribute the Program at all.  For example, if a patent
Xlicense would not permit royalty-free redistribution of the Program by
Xall those who receive copies directly or indirectly through you, then
Xthe only way you could satisfy both it and this License would be to
Xrefrain entirely from distribution of the Program.
X
XIf any portion of this section is held invalid or unenforceable under
Xany particular circumstance, the balance of the section is intended to
Xapply and the section as a whole is intended to apply in other
Xcircumstances.
X
XIt is not the purpose of this section to induce you to infringe any
Xpatents or other property right claims or to contest validity of any
Xsuch claims; this section has the sole purpose of protecting the
Xintegrity of the free software distribution system, which is
Ximplemented by public license practices.  Many people have made
Xgenerous contributions to the wide range of software distributed
Xthrough that system in reliance on consistent application of that
Xsystem; it is up to the author/donor to decide if he or she is willing
Xto distribute software through any other system and a licensee cannot
Ximpose that choice.
X
XThis section is intended to make thoroughly clear what is believed to
Xbe a consequence of the rest of this License.
X
X  8. If the distribution and/or use of the Program is restricted in
Xcertain countries either by patents or by copyrighted interfaces, the
Xoriginal copyright holder who places the Program under this License
Xmay add an explicit geographical distribution limitation excluding
Xthose countries, so that distribution is permitted only in or among
Xcountries not thus excluded.  In such case, this License incorporates
Xthe limitation as if written in the body of this License.
X
X  9. The Free Software Foundation may publish revised and/or new versions
Xof the General Public License from time to time.  Such new versions will
Xbe similar in spirit to the present version, but may differ in detail to
Xaddress new problems or concerns.
X
XEach version is given a distinguishing version number.  If the Program
Xspecifies a version number of this License which applies to it and "any
Xlater version", you have the option of following the terms and conditions
Xeither of that version or of any later version published by the Free
XSoftware Foundation.  If the Program does not specify a version number of
Xthis License, you may choose any version ever published by the Free Software
XFoundation.
X
X  10. If you wish to incorporate parts of the Program into other free
Xprograms whose distribution conditions are different, write to the author
Xto ask for permission.  For software which is copyrighted by the Free
XSoftware Foundation, write to the Free Software Foundation; we sometimes
Xmake exceptions for this.  Our decision will be guided by the two goals
Xof preserving the free status of all derivatives of our free software and
Xof promoting the sharing and reuse of software generally.
X
X			    NO WARRANTY
X
X  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
XFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
XOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
XPROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
XOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
XMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
XTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
XPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
XREPAIR OR CORRECTION.
X
X  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
XWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
XREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
XINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
XOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
XTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
XYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
XPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
XPOSSIBILITY OF SUCH DAMAGES.
X
X		     END OF TERMS AND CONDITIONS
X
X	Appendix: How to Apply These Terms to Your New Programs
X
X  If you develop a new program, and you want it to be of the greatest
Xpossible use to the public, the best way to achieve this is to make it
Xfree software which everyone can redistribute and change under these terms.
X
X  To do so, attach the following notices to the program.  It is safest
Xto attach them to the start of each source file to most effectively
Xconvey the exclusion of warranty; and each file should have at least
Xthe "copyright" line and a pointer to where the full notice is found.
X
X    <one line to give the program's name and a brief idea of what it does.>
X    Copyright (C) 19yy  <name of author>
X
X    This program is free software; you can redistribute it and/or modify
X    it under the terms of the GNU General Public License as published by
X    the Free Software Foundation; either version 2 of the License, or
X    (at your option) any later version.
X
X    This program is distributed in the hope that it will be useful,
X    but WITHOUT ANY WARRANTY; without even the implied warranty of
X    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X    GNU General Public License for more details.
X
X    You should have received a copy of the GNU General Public License
X    along with this program; if not, write to the Free Software
X    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
XAlso add information on how to contact you by electronic and paper mail.
X
XIf the program is interactive, make it output a short notice like this
Xwhen it starts in an interactive mode:
X
X    Gnomovision version 69, Copyright (C) 19yy name of author
X    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
X    This is free software, and you are welcome to redistribute it
X    under certain conditions; type `show c' for details.
X
XThe hypothetical commands `show w' and `show c' should show the appropriate
Xparts of the General Public License.  Of course, the commands you use may
Xbe called something other than `show w' and `show c'; they could even be
Xmouse-clicks or menu items--whatever suits your program.
X
XYou should also get your employer (if you work as a programmer) or your
Xschool, if any, to sign a "copyright disclaimer" for the program, if
Xnecessary.  Here is a sample; alter the names:
X
X  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
X  `Gnomovision' (which makes passes at compilers) written by James Hacker.
X
X  <signature of Ty Coon>, 1 April 1989
X  Ty Coon, President of Vice
X
XThis General Public License does not permit incorporating your program into
Xproprietary programs.  If your program is a subroutine library, you may
Xconsider it more useful to permit linking proprietary applications with the
Xlibrary.  If this is what you want to do, use the GNU Library General
XPublic License instead of this License.
END_OF_FILE
if test 17981 -ne `wc -c <'COPYING'`; then
    echo shar: \"'COPYING'\" unpacked with wrong size!
fi
# end of 'COPYING'
fi
if test -f 'Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Makefile'\"
else
echo shar: Extracting \"'Makefile'\" \(1244 characters\)
sed "s/^X//" >'Makefile' <<'END_OF_FILE'
X#    faucet and hose: network pipe utilities
X#    Copyright (C) 1992 Robert Forsman
X#
X#    This program is free software; you can redistribute it and/or modify
X#    it under the terms of the GNU General Public License as published by
X#    the Free Software Foundation; either version 2 of the License, or
X#    (at your option) any later version.
X#
X#    This program is distributed in the hope that it will be useful,
X#    but WITHOUT ANY WARRANTY; without even the implied warranty of
X#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X#    GNU General Public License for more details.
X#
X#    You should have received a copy of the GNU General Public License
X#    along with this program; if not, write to the Free Software
X#    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
X#
X# under HPUX you will probably have to make using LDLIBS=-lBSD
X#
X
XCFLAGS = 
X
XFOBJS = faucet.o portname.o
XHOBJS = hose.o portname.o
X
Xall	: faucet hose
X
Xfaucet	: ${FOBJS}
X	${CC} ${CFLAGS} -o $@ ${FOBJS} ${LDLIBS}
X
Xhose	: ${HOBJS}
X	${CC} ${CFLAGS} -o $@ ${HOBJS} ${LDLIBS}
X
Xinstall : all
X	cp faucet hose ${HOME}/bin/`mach`
X	cp faucet.1 hose.1 ${HOME}/man/man1
X
Xclean	:
X	rm -f ${FOBJS}  ${HOBJS} 
X
Xspotless: clean
X	rm -f *~ core  hose faucet
END_OF_FILE
if test 1244 -ne `wc -c <'Makefile'`; then
    echo shar: \"'Makefile'\" unpacked with wrong size!
fi
# end of 'Makefile'
fi
if test -f 'README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'README'\"
else
echo shar: Extracting \"'README'\" \(6701 characters\)
sed "s/^X//" >'README' <<'END_OF_FILE'
X
X"Mutant" Bob Forsman and his amazing 43 burner stove present
X------------------------------------------------------------
X			"stuff"
X------------------------------------------------------------
X
X  This directory contains faucet and hose.
X
X
X
Xfaucet and hose:
X
X  These two utilities are useful for connecting arbitrary programs
Xover sockets.  The power of the '|' characeter in the shell can now be
Xused over the network.
X  As an example of what they can do, compile them and on one machine
Xtype
X
Xlightning:21 % ./faucet 3000 "tar cf - ." out
X
X and on another type
X
Xsprings:3 % ./hose lightning 3000 "tar tvf -" in
X
X  You will get output (from machine springs) that looks like this.
X
Xrwxr-xr-x771/50      0 Jul  7 11:53 1990 ./
Xrw-r-----771/50   9266 Jun 30 21:41 1990 ./faucet.c~
Xrw-r--r--771/50   6086 Mar  6 21:40 1990 ./server.cc
Xrw-r--r--771/50   1203 Jul  7 11:49 1990 ./Makefile
Xrw-r-----771/50   9757 Jul  7 11:49 1990 ./faucet.c
Xrw-r--r--771/50   4241 Jun 23 04:09 1990 ./hose.c~
Xrwxr-xr-x771/50  24576 Jul  7 11:50 1990 ./hose
Xrw-r--r--771/50   4041 Jul  7 11:50 1990 ./hose.c
Xrw-r-----771/50    592 Jul  7 11:48 1990 ./portname.c
Xrw-r--r--771/50    317 Jul  7 11:48 1990 ./portname.o
Xrwxr-xr-x771/50  24576 Jul  7 11:50 1990 ./faucet
Xrw-r--r--771/50   3378 Jul  7 11:50 1990 ./hose.o
Xrw-r--r--771/50   1069 Jun 23 02:42 1990 ./Makefile~
Xrw-r--r--771/50   4662 Jul  7 11:50 1990 ./faucet.o
Xrw-r-----771/50    377 Jul  7 11:53 1990 ./#README#
Xrw-r-----771/50    371 Jul  7 11:53 1990 ./README
Xrw-r--r--771/50   2917 Mar  6 22:13 1990 ./client.cc
X
X  The 3000 is the port number to connect to.  Normal users can use any
Xnumber over 1023.  You can also specify a service name in place of a
Xnumber since the program can look it up from the services database.
X  The argument in ""s (argv[2] for faucet, argv[3] for hose) is the
Xcommand to be connected to the socket.  The flags in, out and err
Xgovorn which file descriptors get connected to the socket after the
Xconnection is successful.
X  hose is a one-shot program.  It connects to the foreign server
Xsocket and execs the command.  faucet is an undying server.  Every
Xtime it recieves a connection on its socket it forks and execs a "csh
X-c".  faucet can be limited to one-shot by the "once" flag.
X
XSYNTAX
X
X   faucet <port> <command> (in|out|err)+ [once] [verb(|ose)] [quiet]
X		[unix] [foreignport <port>] [foreignhost <host>]
X
X   hose <hostname> <port> <command> (in|out|err)+ [unix] [localport <port>]}
X
X  Host names can be be the name of the machine or (if no name is
Xfound) the internet number.  The individual numbers are sscanfed with
X%i so 0x or 0 prefixes mean hex or octal instead of decimal for that
Xone byte.
X  You must chose at least one of in, out, and err.  The other flags
Xare optional and listed below
X   unix.........causes the program to go into unix-domain socket mode.
X		hose can also be forced into unix-domain operation by
X		specifying -unix- as the hostname (those dashes are
X		part of the arg) or by being run with argv[0] as the
X		string "uhose" (possible by hardlinking the binary).
X		Port names are then treated as unix domain socket
X		addresses (filenames) as opposed to internet port
X		numbers.
X   localport....(only on hose) asks hose to bind to a specific local
X		port.
X   once.........(only on faucet) the faucet command will not fork, but
X		will exec the command, and when the command exits
X		you're done.
X   verbose|quiet (only on faucet) enables|disables the printing of
X		extra information such as what host and port faucet is
X		getting connections from.
X   foreignport..(only on faucet) causes faucet to refuse (close
X		immediately) any connection from a machine that hasn't
X		bound its socket to the port specified immediately
X		after the foreignport flag.  This can be used with the
X		localport option of hose to perform crude
X		authentication.  If the foreignport is <1024 then only
X		a foreign root user will be able to connect to your
X		faucet because only root can bind to a port number
X		below 1024.
X   foreignhost..(only on faucet) causes faucet to refuse (close
X		immediately) any connection from any machine other
X		than the host specified immediately after the
X		foreignhost flag.
X
X  Be aware that addresses and ports can be spoofed if your network
Xisn't secure (yours probably isn't).  If you have PCs or other
Xnon-UNIX boxes connected to the network, then it's DISGUSTINGLY easy
Xfor ANYONE to spoof the network.
X
X
X
XEXAMPLES
X
X	FAUCET					HOSE
X
Xreef:100 % ./faucet chat "echo send
X$14M and 2 airline stewardesses or
Xyou'll never see Hoffa alive"
Xforeignhost azalea verbose out
X
X				reef:40 % ./hose reef chat cat in
X
Xrefusing connection from host 128.
X227.224.61(reef.cis.ufl.edu).
X
X				azalea:20 % ./hose reef chat cat in
X
X./faucet: Got connection from 128.
X227.224.55(azalea.cis.ufl.edu) port
X1687
XUnmatched '.
X				/* darn, screwed up the shell quoting */
X^C
X
Xreef:107 % ./faucet /tmp/blah 'echo
Xsend '\'\$14M\'' and 2 airline
Xstewardesses or you'\\\''ll never
Xsee Hoffa alive' foreignhost azalea
Xverbose out foreignport /tmp/auth unix
X./faucet: foreignhost parameter makes no
Xsense with UNIX domain sockets, ignoring.
X				/* %#@)*, bite me */
X
X				reef:41 % ./hose -unix- /tmp/blah cat in
X
X./faucet: refusing connection from port
X
X				reef:43 % ./hose -unix- /tmp/blah cat in
X				localport /tmp/auth
X
X./faucet: Got connection from /tmp/auth
X
X				send $14M and 2 airline stewardesses or
X				you'll never see Hoffa alive
X
X
X  Notice the elaborate quoting on that one.  faucet+hose fork a "csh
X-c " to interpret the command.  The echo command had to be quoted so
Xthat faucet saw:
X
Xecho send '$14M' and 2 airline stewardesses or you\'ll never see Hoffa alive
X
X  faucet then performed this system call
X
Xexecl("/bin/csh","csh","-c",argv[2],NULL);
X
X  and the "$14M" and "you'll" were properly quoted to survive THAT csh
Xas well.  Commands to hose must be similarly protected.
X
X  Why use csh?
X   1) This allows you to have pipelines and other fancy stuff inside
X	the command, and
X   2) I don't have to write code to parse the command!
X
X
X
XBUGS
X
X  Hoohoohoo, god knows what sort of bugs are waiting to rip your
Xankles off.  I'm the only one who's extensively used these.  They were
Xdeveloped on Sun3s and Sun4s.  They have been compiled (but not
Xextensively tested) on Sonys, DECstations and HPs.  If your machine
Xneeds different include files, start grepping and mail me the results.
X
X  If anything is not crystal clear, check the source and mail me.
XI'll try to put it in the README.
X
X
XAUTHOR
X
X  Robert H. Forsman Jr.		<thoth@lightning.cis.ufl.edu>
X  former underpaid Systems Programmer
X  now piddly underpaid Research Assistant
X  University of Florida
X  Department of Computer
X  and Information Science
END_OF_FILE
if test 6701 -ne `wc -c <'README'`; then
    echo shar: \"'README'\" unpacked with wrong size!
fi
# end of 'README'
fi
if test -f 'faucet.1' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'faucet.1'\"
else
echo shar: Extracting \"'faucet.1'\" \(4160 characters\)
sed "s/^X//" >'faucet.1' <<'END_OF_FILE'
X.\" faucet.1 Copyright 3/30/1992 by Robert Forsman
X.TH FAUCET 1 "Mar 30 1992"
X.SH NAME
Xfaucet - a fixture for a BSD network pipe
X.SH SYNOPSIS
X\fBfaucet\fP \fIport\fP \fIcommand\fP (\fBin\fP|\fBout\fP|\fBerr\fP)
X[\fBonce\fP] [\fBverbose\fP] [\fBquiet\fP] [\fBunix\fP]
X[\fBforeignhost\fP \fIhost\fP] [\fBforeignport\fP \fIport\fP]
X
X.SH DESCRIPTION
X.LP
X.B faucet
Xattempts to provide the functionality of pipes over the network.
XIt behaves as the server end of a server\-client connection.
XWhen used with
X.B hose(1)
Xit can function as a replacement for
X.IP
Xtar \-cf \- . | rsh other "cd destdir; tar -xf -"
X.LP
X.B faucet
Xand
X.B hose
Xare especially useful when you don't have easy access to the
Xdestination machine.
X
X.LP
X.B faucet
Xcreates a BSD socket, binds it to the
X.I port
Xspecified on the command line, and listens for connections.
XEvery time
X.B faucet
Xgets a connection it forks the
X.I command
Xwith stdin, stdout, and/or stderr redirected according to the 
X.B in out err
Xflags.  If the
X.B once
Xflag is specified,
X.B faucet
Xwill exec(2) the
X.I command
Xinstead of fork(2)ing and exec(2)ing.  
X.B once
Xmeans that the network pipe
Xis only good for one shot.
XThe
X.B verbose
Xflag specifies that
X.B faucet
Xshould print information about connecting hosts .  This information
Xincludes the numeric host address, host names, and foreign port numbers.
XThe
X.B quiet
Xflag specifies that
X.B faucet
Xshould NOT print such info.
X.B quiet
Xis the default. The
X.B unix
Xflag specifies that the
X.I port
Xis not an internet port number or service name, but instead it is a
Xfilename for a UNIX domain socket.  The
X.B foreignhost
Xoption specifies that faucet should reject all connections that do not
Xcome from the
X.I host
Xmachine.  Similarly
X.B foreignport
Xspecifies that faucet should reject all connections that are not bound
Xon their local machine to the
X.I port
Xargument.  The above two options allow a crude form of authentication.
XNote that on most systems only root can bind a socket to a port number
Xbelow 1024.
X
X.SH "EXAMPLES"
X.LP
XThis creates a TCP\-IP socket on the local machine bound to port 3000.
X.IP
Xexample% faucet 3000 "tar -cf - ." out verbose
X.LP
XEvery time some process (from any machine) attempts to connect to
Xport 3000 on this machine the
X.B faucet
Xprogram will fork(2) a process and the child will exec(2) a
X.IP
X/bin/csh -c "tar -cf - ."
X.LP
XThe
X.B out
Xoption means that the output of the child process will have been
Xredirected into the new socket retrieved by the accept(2) call.
X.B verbose
Xmeans that faucet will print information about each new connection.
X
X.LP
XThis creates a UNIX domain socket in the current directory
X.IP
Xexample% faucet u-socket "dd if=angio.pgm" out err once
X.LP
XThe
X.B out err
Xoption means that stdout and stderr will be redirected in the child
Xprocess.  The
X.B once
Xoption means that the faucet will not fork(2), but exec(2) the process
Xso that only the first process can connect to the u-socket before the
Xfaucet becomes unavailable.
X
X.SH "SEE ALSO"
X.BR hose (1),
X.BR socket (2),
X.BR bind (2),
X.BR listen (2),
X.BR accept (2),
X.BR services (5),
X.BR gethostbyaddr (3)
X
X.SH "NOTES"
X.LP
XDoubtless there are bugs in this program, especially in the unix domain
Xsocket portions.  I welcome problem reports and would like to make
Xthese programs as "clean" (no leftover files, sockets) as possible.
X
X.SH "COPYRIGHT"
XCopyright (C) 1992 Robert Forsman
X
XThis program is free software; you can redistribute it and/or modify
Xit under the terms of the GNU General Public License as published by
Xthe Free Software Foundation; either version 2 of the License, or
X(at your option) any later version.
X
XThis program is distributed in the hope that it will be useful,
Xbut WITHOUT ANY WARRANTY; without even the implied warranty of
XMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
XGNU General Public License for more details.
X
XYou should have received a copy of the GNU General Public License
Xalong with this program; if not, write to the Free Software
XFoundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
X.SH "AUTHOR"
X Robert Forsman
X thoth@lightning.cis.ufl.edu
X University of Florida
X Department of Computer and Information Science
END_OF_FILE
if test 4160 -ne `wc -c <'faucet.1'`; then
    echo shar: \"'faucet.1'\" unpacked with wrong size!
fi
# end of 'faucet.1'
fi
if test -f 'faucet.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'faucet.c'\"
else
echo shar: Extracting \"'faucet.c'\" \(9476 characters\)
sed "s/^X//" >'faucet.c' <<'END_OF_FILE'
X/*
X
X    faucet.c, part of
X    faucet and hose: network pipe utilities
X    Copyright (C) 1992 Robert Forsman
X
X    This program is free software; you can redistribute it and/or modify
X    it under the terms of the GNU General Public License as published by
X    the Free Software Foundation; either version 2 of the License, or
X    (at your option) any later version.
X
X    This program is distributed in the hope that it will be useful,
X    but WITHOUT ANY WARRANTY; without even the implied warranty of
X    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X    GNU General Public License for more details.
X
X    You should have received a copy of the GNU General Public License
X    along with this program; if not, write to the Free Software
X    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
X    */
X
Xstatic char info[] = "faucet: a network utility for sockets\nWritten 1992 by Robert Forsman <thoth@ufl.edu>\n";
X#include	<stdio.h>
X#include	<fcntl.h>
X#include	<errno.h>
X#ifdef hpux
X#include	<signal.h>
X#include	<sgtty.h>
X#endif
X#include	<sys/wait.h>
X#include	<sys/param.h>
X#include	<sys/file.h>
X#include	<sys/ioctl.h>
X#include	<sys/socket.h>
X#include	<sys/un.h>
X#include	<netinet/in.h>
X#include	<netdb.h>
X
Xint	mastersocket;
X#define	DOSTDOUT	(1<<0)
X#define	DOSTDIN		(1<<1)
X#define	DOSTDERR	(1<<2)
X#define	DOONCE		(1<<3)
X#define	DOVERBOSE	(1<<4)
X#define	DOUNIX		(1<<5)
Xlong	doflags=0;
Xint	running=1;
X
Xchar	*foreignhost=NULL,*foreignport=NULL;
Xint	foreignPORT;
Xstruct in_addr	foreignHOST;
X
Xchar	*programname;
Xextern int errno;
Xextern char *sys_errlist[];
X
X
Xint name_to_inet_port();
X
Xvoid nice_shutdown()
X/* This procedure gets called when we are killed with one of the reasonable
X   signals (TERM, HUP, that kind of thing).  The main while loop then
X   terminates and we get a chance to clean up. */
X{
X  running = 0;
X}
X
X
X/* print an internet host address prettily */
Xprinthost(addr)
X     struct in_addr	*addr;
X{
X  struct hostent	*h;
X  char	*s,**p;
X  int	i;
X
X  h = gethostbyaddr(addr, sizeof(*addr),AF_INET);
X  s = (h==NULL) ? NULL : h->h_name;
X
X  printf("%d", ((u_char*)addr)[0]);
X  for (i=1; i<sizeof(*addr); i++)
X    printf(".%d",((u_char*)addr)[i]);
X
X  printf("(%s",s?s:"name unknown");
X  if (s)
X    for (p=h->h_aliases; *p; p++)
X      printf(",%s",*p);
X  printf(")");
X}
X
Xint setup_socket(name)
Xchar *name;
X/* This procedure creates a socket and handles retries on the inet domain.
X   Sockets seem to "stick" on my system (SunOS [43].x) */
X{
X  int	sock;
X
X  sock = socket((doflags&DOUNIX)?AF_UNIX:AF_INET, SOCK_STREAM, 0);
X  /* I need a real value for the protocol eventually.  IPPROTO_TCP sounds
X     like a good value, but what about AF_UNIX sockets?  It seems to have
X     worked so far... */
X
X  if (sock <0) {
X      perror("opening stream socket");
X      exit(1);
X    }
X
X  if (!bindlocal(sock, name, (doflags&DOUNIX)?AF_UNIX:AF_INET)) {
X      fprintf(stderr,"%s: error binding stream socket %s (%s)",
X	      programname,name,sys_errlist[errno]);
X      exit(1);
X    }
X
X  listen(sock,NOFILE);
X
X  return(sock);
X}
X
X
Xvoid waitonchild()
X
X{
X  union wait status;
X#if 0
X  unsigned char	reason,signal,rval;
X  char	buf[32];
X#endif
X  int	childpid;
X  
X  childpid = wait3(&status,WNOHANG,NULL);
X  /* What a pity I can't easily print out child statuses */
X#if 0
X  if (childpid==-1) {
X    fputs(stderr,programname);
X    fputs(stderr,": error in wait3 while handling SIGCHLD (");
X    fputs(stderr,sys_errlist[errno]);
X    fputs(stderr,")\n");
X    return;
X  }
X  reason = status.w_status & 0xff;
X  if (reason==0) {
X    rval = reason >> 8;
X    if (rval!=0) {
X      fputs(stderr,programname);
X      fputs(stderr,": Child ");
X      sprintf(buf,"%d",childpid);	fputs(stderr,buf);
X      fputs(stderr," gave abnormal exit code ");
X      sprintf(buf,"%d",rval);	fputs(stderr,buf);
X      fputs(stderr,"\n");
X    }
X  } else if (reason!=0177) {
X    signal = reason & 0x7f;
X    fputs(stderr,programname);
X    fputs(stderr,": Child ");
X    sprintf(buf,"%d",childpid);	fputs(stderr,buf);
X    fputs(stderr," killed by signal ");
X    sprintf(buf,"%d",signal);		fputs(stderr,buf);
X    fputs(stderr," (");
X    fputs(stderr,(signal<=SIGUSR2)?signames[signal]:"bogus signal number");
X    fputs(stderr,")\n");
X  }
X#endif
X}
X
X
Xint
Xauthorize_address(sin)
X     struct sockaddr	*sin;
X{
X  if (doflags&DOUNIX) {
X    struct sockaddr_un 	*srv = (struct sockaddr_un*)sin;
X    
X    if (foreignport != NULL && 0!=strcmp(foreignport, srv->sun_path)) {
X      if (doflags&DOVERBOSE) {
X	printf("%s: refusing connection from port %s\n",
X	       programname, srv->sun_path);
X      }
X      return 0;
X    }
X  } else {
X    struct sockaddr_in	*srv = (struct sockaddr_in*)sin;
X    
X    if (foreignhost!=NULL &&
X	0!=bcmp(&srv->sin_addr,
X		&foreignHOST, sizeof(foreignHOST))) {
X      if (doflags&DOVERBOSE) {
X	printf("refusing connection from host ");
X	printhost(&srv->sin_addr);
X	printf(".\n");
X      }
X      return 0;
X    }
X    
X    if (foreignport!=NULL && foreignPORT != srv->sin_port) {
X      if (doflags&DOVERBOSE) {
X	printf("refusing connection from port %d.\n",
X	       ntohs(srv->sin_port));
X      }
X      return 0;
X    }
X  }
X  
X  return 1;
X}
X
X
Xmain (argc,argv)
Xint argc;
Xchar ** argv;
X
X{
X  int	rval,length;
X  struct sockaddr	saddr;
X  struct sockaddr_in	*sinp = (struct sockaddr_in*)&saddr;
X  struct sockaddr_un	*sunp = (struct sockaddr_un*)&saddr;
X  
X  programname = argv[0];
X  
X  if (argc<3) {
X    fprintf(stderr,"Usage : %s <port> <command> (in|out|err)+ [once] [verb(|ose)] [quiet] [unix] [foreignport <port>] [foreignhost <host>]\n", programname);
X    exit(1);
X  }
X  
X  /* parse trailing args */
X  for (length=3; length<argc; length++) {
X    if (strcmp(argv[length],"in")==0)
X      doflags |= DOSTDIN;
X    else if (strcmp(argv[length],"out")==0)
X      doflags |= DOSTDOUT;
X    else if (strcmp(argv[length],"err")==0)
X      doflags |= DOSTDERR;
X    else if (strcmp(argv[length],"once")==0)
X      doflags |= DOONCE;
X    else if (strcmp(argv[length],"verbose")==0
X	     || strcmp(argv[length],"verb")==0)
X      doflags |= DOVERBOSE;
X    else if (strcmp(argv[length],"quiet")==0)
X      doflags &= ~DOVERBOSE;
X    else if (strcmp(argv[length],"unix")==0)
X      doflags |= DOUNIX;
X    else if (strcmp(argv[length],"foreignport")==0) {
X      if (length+1<argc)
X	foreignport=argv[++length];
X      else
X	fprintf(stderr,"%s: foreignport requires port name or number.\n",
X		programname);
X    } else if (strcmp(argv[length],"foreignhost")==0) {
X      if (length+1<argc)
X	foreignhost=argv[++length];
X      else
X	fprintf(stderr,"%s: foreignhost requires host name or number.\n",
X		programname);
X    } else
X      fprintf(stderr,"%s: Bogus extra command line flag \"%s\".\n",
X	      programname,argv[length]);
X  }
X  
X  if ( ! (doflags&(DOSTDIN|DOSTDERR|DOSTDOUT)) ) {
X    fprintf(stderr,"%s: Need at least one {in|out|err}.\n",programname);
X    exit(1);
X  }
X  
X  if ( (doflags&DOUNIX) && foreignhost!=NULL ) {
X    fprintf(stderr, "%s: foreignhost parameter makes no sense with UNIX domain sockets, ignoring.\n", programname);
X    foreignhost = NULL;
X  }
X  
X  signal(SIGCHLD,waitonchild);
X  
X  mastersocket = setup_socket(argv[1]);
X  
X  signal(SIGHUP, nice_shutdown);
X  signal(SIGINT, nice_shutdown);
X  signal(SIGPIPE, nice_shutdown);
X  signal(SIGALRM, nice_shutdown);
X  signal(SIGTERM, nice_shutdown);
X  
X  if (foreignhost != NULL && !convert_hostname(foreignhost, &foreignHOST)) {
X    fprintf(stderr, "%s: could not translate %s to a host address\n",
X	    programname, foreignhost);
X    exit(1);
X  }
X  
X  if (foreignport!=NULL && !(doflags&DOUNIX) &&
X      0 == (foreignPORT = name_to_inet_port(foreignport)) ) {
X    fprintf(stderr,"%s: port %s unknown.\n",programname,foreignport);
X    exit(1);
X  }
X  
X  while (running) {
X    
X    length = sizeof(saddr);
X    
X    rval = accept(mastersocket,&saddr,&length);
X    
X    if (rval<0) {
X      if (errno==EWOULDBLOCK) {
X	printf("%s: No more connections to talk to.\n",programname);
X      } else if (errno!=EINTR) {
X	fprintf(stderr,"%s: error in accept (%s).",
X		programname,sys_errlist[errno]);
X	exit(1);
X      }
X      continue;
X    }
X    
X    if (!authorize_address(&saddr)) {
X      close(rval);
X      continue;
X    }
X    
X    if ( doflags&DOVERBOSE ) {
X      printf("%s: Got connection from ",programname);
X      if ( doflags&DOUNIX ) {
X	printf("%s\n", sunp->sun_path);
X      } else {
X	printhost(&sinp->sin_addr);
X	printf(" port %d\n",ntohs(sinp->sin_port));
X      }
X    }
X    
X    fflush(stdout);
X    
X    if ( doflags&DOONCE || fork()==0 ) {
X      /* child process: frob descriptors and exec */
X      char	*s;
X      
X      if ( (doflags&(DOONCE|DOUNIX)) == (DOONCE|DOUNIX) )
X	unlink(argv[1]);
X      /* We don't want the unix domain socket anymore */
X      
X      dup2(fileno(stderr),mastersocket);
X      ioctl(mastersocket,FIOCLEX,NULL);
X      /* We don't need old stderr hanging around after an exec.
X	 The mastersocket has been closed by the dup2 */
X      
X      if (doflags & DOSTDIN)
X	dup2(rval,fileno(stdin));
X      if (doflags & DOSTDOUT)
X	dup2(rval,fileno(stdout));
X      if (doflags & DOSTDERR)
X	dup2(rval,fileno(stderr));
X      
X      close(rval); /* rval has been properly duplicated */
X      
X      execl("/bin/csh","csh","-c",argv[2],NULL);
X      s ="exec failed\n";
X      write(mastersocket,s,strlen(s));
X      exit(0);
X    } else {
X      /* parent: close socket.
X	 Signal will arrive upon death of child. */
X      close(rval);
X    }
X  }
X  
X  /* clean up the socket when we're done */
X  if (doflags&DOUNIX)
X    unlink(argv[1]);
X  close(mastersocket);
X  
X}
END_OF_FILE
if test 9476 -ne `wc -c <'faucet.c'`; then
    echo shar: \"'faucet.c'\" unpacked with wrong size!
fi
# end of 'faucet.c'
fi
if test -f 'hose.1' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'hose.1'\"
else
echo shar: Extracting \"'hose.1'\" \(3029 characters\)
sed "s/^X//" >'hose.1' <<'END_OF_FILE'
X.\" hose.1 Copyright 3/30/1992 by Robert Forsman
X.TH HOSE 1 "Mar 30 1992"
X.SH NAME
Xhose - the client end of a BSD network pipe
X.SH SYNOPSIS
X\fBhose\fP \fIhostname\fP \fIport\fP \fIcommand\fP
X(\fBin\fP|\fBout\fP|\fBerr\fP) [\fBunix\fP] [\fBlocalport\fP \fIport\fP]
X
X.SH DESCRIPTION
X.LP
X.B hose
Xattempts to provide the functionality of pipes over the network.
XIt behaves as the client end of a server\-client connection.
XWhen used with
X.B faucet(1)
Xit can function as a replacement for
X.IP
Xtar \-cf \- . | rsh other "cd destdir; tar -xf -"
X.LP
X.B faucet
Xand
X.B hose
Xare especially useful when you don't have easy access to the
Xdestination machine.
X
X.LP
X.B hose
Xcreates a BSD socket and, if the
X.B localport
Xoption is used, binds it to the port number (or service name)
Xspecified immediately afterwards.
X.B hose
Xthen tries to connect to the foreign machine
X.I hostname
Xwith foreign port
X.I port
X .  If successful
X.B hose
Xredirects stdin, stdout, and/or stderr
Xaccording to the
X.B in out err
Xflags.
X.B hose
Xthen exec(2)s a csh -f "\fIcommand\fP".
XThe
X.B unix
Xflag specifies that the
X.I port
Xis not an internet port number or service name, but instead it is a
Xfilename for a UNIX domain socket.  This option may be simulated by
Xusing 
X.B -unix-
Xas the host name to connect to, or by renaming the
X.B hose
Xprogram to \fBuhose\fP.
X
X.SH "EXAMPLES"
X.LP
XThis will connect to port 3000 on the machine reef and connect the socket
Xto the stdin of a tar command.
X.IP
Xexample% hose reef 3000 "tar -xf - ." in
X.LP
XThe command actually exec(2)ed by the
X.B hose
Xprogram is
X.IP
X/bin/csh -c "tar -xf - ."
X.LP
XThe
X.B in
Xoption means that the input of the child process will have been
Xredirected into the socket connected to reef.
X
X.LP
XThis connects to a UNIX domain socket in the current directory
X.IP
Xexample% hose u-socket "dd of=sample.pgm" in
X.LP
X
X.SH "SEE ALSO"
X.BR faucet (1),
X.BR socket (2),
X.BR bind (2),
X.BR listen (2),
X.BR accept (2),
X.BR services (5),
X.BR gethostbyaddr (3)
X
X.SH "NOTES"
X.LP
XDoubtless there are bugs in this program, especially in the unix domain
Xsocket portions.  I welcome problem reports and would like to make
Xthese programs as "clean" (no leftover files, sockets) as possible.
X
X.SH "COPYRIGHT"
XCopyright (C) 1992 Robert Forsman
X
XThis program is free software; you can redistribute it and/or modify
Xit under the terms of the GNU General Public License as published by
Xthe Free Software Foundation; either version 2 of the License, or
X(at your option) any later version.
X
XThis program is distributed in the hope that it will be useful,
Xbut WITHOUT ANY WARRANTY; without even the implied warranty of
XMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
XGNU General Public License for more details.
X
XYou should have received a copy of the GNU General Public License
Xalong with this program; if not, write to the Free Software
XFoundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
X.SH "AUTHOR"
X Robert Forsman
X thoth@lightning.cis.ufl.edu
X University of Florida
X Department of Computer and Information Science
END_OF_FILE
if test 3029 -ne `wc -c <'hose.1'`; then
    echo shar: \"'hose.1'\" unpacked with wrong size!
fi
# end of 'hose.1'
fi
if test -f 'hose.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'hose.c'\"
else
echo shar: Extracting \"'hose.c'\" \(5611 characters\)
sed "s/^X//" >'hose.c' <<'END_OF_FILE'
X/*
X
X    hose.c, part of
X    faucet and hose: network pipe utilities
X    Copyright (C) 1992 Robert Forsman
X
X    This program is free software; you can redistribute it and/or modify
X    it under the terms of the GNU General Public License as published by
X    the Free Software Foundation; either version 2 of the License, or
X    (at your option) any later version.
X
X    This program is distributed in the hope that it will be useful,
X    but WITHOUT ANY WARRANTY; without even the implied warranty of
X    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X    GNU General Public License for more details.
X
X    You should have received a copy of the GNU General Public License
X    along with this program; if not, write to the Free Software
X    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
X    */
X
Xstatic char info[] = "hose: a network utility for sockets\nWritten 1992 by Robert Forsman <thoth@ufl.edu>\n";
X#include	<stdio.h>
X#include	<fcntl.h>
X#ifdef hpux
X#include	<sgtty.h>
X#endif
X#include	<signal.h>
X#include	<sys/errno.h>
X#include	<sys/param.h>
X#include	<sys/file.h>
X#include	<sys/ioctl.h>
X#include	<sys/socket.h>
X#include	<sys/un.h>
X#include	<netinet/in.h>
X#include	<netdb.h>
X
X#define	DOSTDOUT	(1<<0)
X#define	DOSTDIN		(1<<1)
X#define	DOSTDERR	(1<<2)
X#define	DOUNIX		(1<<3)
X#define	DOJAM		(1<<4)
Xint	doflags=0;
Xchar	*localport=NULL;
Xchar	*programname;
Xextern int	errno;
Xextern char *sys_errlist[];
X
X
Xint name_to_inet_port();
X
X
Xint setup_socket(hostname,portname)
Xchar	*hostname;
Xchar	*portname;
X
X{
X  int	sock;
X  struct sockaddr	server;
X  int length;
X  
X  sock = socket((doflags&DOUNIX)?AF_UNIX:AF_INET, SOCK_STREAM, 0);
X  if (sock <0) {
X    perror("opening stream socket");
X    exit(1);
X  }
X  
X  length = sizeof(server);
X  
X  if (localport != NULL &&
X      !bindlocal(sock, localport, (doflags&DOUNIX)?AF_UNIX:AF_INET) ) {
X    fprintf(stderr,"%s: error binding stream socket %s (%s)",
X	    programname,localport,sys_errlist[errno]);
X    exit(1);
X  }
X  
X  if (doflags&DOUNIX) {
X    /* ignore the hostname parameter */
X    ((struct sockaddr_un*)&server)->sun_family = AF_UNIX;
X    strcpy( ((struct sockaddr_un*)&server)->sun_path, portname);
X  } else {
X    struct sockaddr_in *svr=(struct sockaddr_in *)&server;
X    
X    ((struct sockaddr_in*)&server)->sin_family = AF_INET;
X    
X    if (!convert_hostname(hostname, &svr->sin_addr)) {
X      fprintf(stderr, "%s: could not translate %s to a host address\n",
X	      programname, hostname);
X      exit(1);
X    }
X    
X    svr->sin_port = name_to_inet_port(portname);
X    if (svr->sin_port==0) {
X      fprintf(stderr,"%s: bogus port number %s\n",programname,portname);
X      exit(1);
X    }
X  }
X  
X  if (connect(sock,(struct sockaddr*)&server,sizeof(server)) < 0) {
X    perror("connecting");
X    exit(1);
X  }
X  
X  return(sock);
X}
X
X
Xvoid endjam()
X{
X  doflags &= ~DOJAM;
X}
X
X
Xmain (argc,argv)
X     int argc;
X     char ** argv;
X     
X{
X  int	rval,length;
X  int	jampipe[2];
X  
X  programname=argv[0];
X  
X  if (argc<4) {
X    fprintf(stderr,"Usage : %s <hostname> <port> <command> (in|out|err)+ [unix] [localport <port>]}\n",programname);
X    exit(1);
X  }
X  if (strcmp(argv[1],"-unix-")==0 || strcmp(programname,"uhose")==0 )
X    doflags |= DOUNIX;
X  for (length=4; length<argc; length++) {
X    if (strcmp(argv[length],"in")==0)
X      doflags |= DOSTDIN;
X    else if (strcmp(argv[length],"out")==0)
X      doflags |= DOSTDOUT;
X    else if (strcmp(argv[length],"err")==0)
X      doflags |= DOSTDERR;
X    else if (strcmp(argv[length],"unix")==0)
X      doflags |= DOUNIX;
X    else if (strcmp(argv[length],"jam")==0)
X      doflags |= DOJAM;
X    else if (strcmp(argv[length],"localport")==0) {
X      if (length+1<argc)
X	localport=argv[++length];
X      else
X	fprintf(stderr,"%s: localport requires port name or number after.\n",
X		programname);
X    } else
X      fprintf(stderr,"%s: Bogus extra command line flag \"%s\".\n",
X	      programname,argv[length]);
X  }
X  
X  if ( ! (doflags&(DOSTDIN|DOSTDERR|DOSTDOUT)) ) {
X    fprintf(stderr,"%s: Need at least one {in|out|err}.\n",programname);
X    exit(1);
X  }
X
X  /* this wierd setup is to flood a socket with connections */
X  if (doflags&DOJAM) {
X    signal(SIGCHLD, endjam);
X    if (0>pipe(jampipe)) {
X      perror("opening jampipe");
X      exit(1);
X    }
X  }
X
X  while ( (doflags & DOJAM) && fork() ) {
X    char	ch;
X    close (jampipe[1]);
X    while (1==read(jampipe[0], &ch, 1))
X      ;
X    close (jampipe[0]);
X    jampipe[0] = -1;
X    if (0>pipe(jampipe)) {
X      perror("opening jampipe");
X      exit(1);
X    }
X  }
X
X  if (doflags&DOJAM)
X    close (jampipe[0]);
X
X  rval = setup_socket(argv[1],argv[2]);
X  
X  if (doflags&DOUNIX && localport!=NULL)
X    unlink(localport);
X  
X#if 0
X  if (!fork()) {
X    int sparefd;
X    char *s;
X    
X    sparefd = dup(fileno(stderr));
X    ioctl(sparefd,FIOCLEX,NULL);
X    
X    if (!(doflags & DOSTDIN))
X      dup2(rval,fileno(stdin));
X    if (!(doflags & DOSTDOUT))
X      dup2(rval,fileno(stdin));
X    if (!(doflags & DOSTDERR))
X      dup2(rval,fileno(stderr));
X    close(rval);
X    
X    execl("/bin/cat",NULL);
X    s ="exec failed\n";
X    write(sparefd,s,strlen(s));
X    exit(1);
X  }
X#endif
X  {
X    int sparefd;
X    char *s;
X    
X    sparefd = dup(fileno(stderr));
X    ioctl(sparefd,FIOCLEX,NULL);
X    
X    if (doflags & DOSTDIN)
X      dup2(rval,fileno(stdin));
X    if (doflags & DOSTDOUT)
X      dup2(rval,fileno(stdout));
X    if (doflags & DOSTDERR)
X      dup2(rval,fileno(stderr));
X    close(rval);
X    
X    if (doflags&DOJAM)
X      close (jampipe[1]);
X
X    execl("/bin/csh","csh","-c",argv[3],NULL);
X    s ="exec failed\n";
X    write(sparefd,s,strlen(s));
X    exit(1);
X  }
X}
END_OF_FILE
if test 5611 -ne `wc -c <'hose.c'`; then
    echo shar: \"'hose.c'\" unpacked with wrong size!
fi
# end of 'hose.c'
fi
if test -f 'portname.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'portname.c'\"
else
echo shar: Extracting \"'portname.c'\" \(2973 characters\)
sed "s/^X//" >'portname.c' <<'END_OF_FILE'
X/*
X
X    portname.c, part of
X    faucet and hose: network pipe utilities
X    Copyright (C) 1992 Robert Forsman
X
X    This program is free software; you can redistribute it and/or modify
X    it under the terms of the GNU General Public License as published by
X    the Free Software Foundation; either version 2 of the License, or
X    (at your option) any later version.
X
X    This program is distributed in the hope that it will be useful,
X    but WITHOUT ANY WARRANTY; without even the implied warranty of
X    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X    GNU General Public License for more details.
X
X    You should have received a copy of the GNU General Public License
X    along with this program; if not, write to the Free Software
X    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
X    */
X
X#include	<stdio.h>
X#include	<fcntl.h>
X#include	<errno.h>
X#include	<sys/socket.h>
X#include	<sys/un.h>
X#include	<netdb.h>
X#include	<netinet/in.h>
X
Xint name_to_inet_port(portname)
Xchar *portname;
X/* This procedure converts a character string to a port number.  It looks
X   up the service by name and if there is none, then it converts the string
X   to a number with sscanf */
X{
X  struct servent	*p;
X
X  if (portname==NULL)
X    return 0;
X
X  p = getservbyname(portname,"tcp");
X  if (p!=NULL)
X    {
X      return p->s_port;
X    }
X  else
X    {
X      int	port;
X      if (sscanf(portname,"%i",&port)!=1)
X	{
X	  return 0;
X	}
X      else
X	return htons(port);
X    }
X}
X
Xint
Xconvert_hostname(name, addr)
X     char	*name;
X     struct in_addr	*addr;
X{
X  struct hostent	*hp;
X  int		len;
X
X  hp = gethostbyname(name);
X  if (hp != NULL)
X    bcopy(hp->h_addr,addr,hp->h_length);
X  else
X    {
X      int	count;
X      unsigned int	a1,a2,a3,a4;
X      count = sscanf(name,"%i.%i.%i.%i%n", &a1, &a2, &a3, &a4, &len);
X      if (4!=count || 0!=name[len] )
X	return 0;
X      addr->S_un.S_un_b.s_b1 = a1;
X      addr->S_un.S_un_b.s_b2 = a2;
X      addr->S_un.S_un_b.s_b3 = a3;
X      addr->S_un.S_un_b.s_b4 = a4;
X    }
X  return 1;
X}
X
X
Xint
Xbindlocal(fd, name, domain)
X     int	fd, domain;
X     char	*name;
X{
X  struct sockaddr	laddr;
X  int	countdown;
X  int	rval;
X  
X  if (domain==AF_INET)
X    {
X      struct sockaddr_in	*srv = (struct sockaddr_in*)&laddr;
X      
X      srv->sin_family = AF_INET;
X      srv->sin_addr.s_addr = INADDR_ANY;
X      
X      srv->sin_port = name_to_inet_port(name);
X      
X      if (srv->sin_port==0)
X	{
X	  fprintf(stderr, "port %s unknown\n", name);
X	  return 0;
X	}
X    }
X  else
X    {
X      struct sockaddr_un	*srv = (struct sockaddr_un *)&laddr;
X      
X      srv->sun_family = AF_UNIX;
X      strcpy(srv->sun_path, name);
X    }
X  
X  countdown= (domain==AF_UNIX)?1:10;
X  do {
X    rval = bind(fd, &laddr, sizeof(laddr));
X    if (rval)
X      if (errno==EADDRINUSE && --countdown>0)
X	{
X	  fprintf(stderr,"Address %s in use, sleeping 10.\n",
X		  name);
X	  sleep (10);
X	  fprintf(stderr,"Trying again . . .\n");
X	}
X      else
X	return 0;
X  } while (rval);
X
X  return 1;
X}
END_OF_FILE
if test 2973 -ne `wc -c <'portname.c'`; then
    echo shar: \"'portname.c'\" unpacked with wrong size!
fi
# end of 'portname.c'
fi
echo shar: End of archive 1 \(of 1\).
cp /dev/null ark1isdone
MISSING=""
for I in 1 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have the archive.
    rm -f ark[1-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
