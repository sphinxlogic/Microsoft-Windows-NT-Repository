Newsgroups: comp.sources.unix
From: mlschroe@immd4.informatik.uni-erlangen.de (Michael Schroeder)
Subject: v26i309: screen-3.5 - screen manager with VT100/ANSI terminal emulation, V3.5, Part10/10
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: mlschroe@immd4.informatik.uni-erlangen.de (Michael Schroeder)
Posting-Number: Volume 26, Issue 309
Archive-Name: screen-3.5/part10

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 10 (of 10)."
# Contents:  doc/screen.texinfo
# Wrapped by vixie@gw.home.vix.com on Sun Jul 25 12:57:27 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'doc/screen.texinfo' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'doc/screen.texinfo'\"
else
echo shar: Extracting \"'doc/screen.texinfo'\" \(119116 characters\)
sed "s/^X//" >'doc/screen.texinfo' <<'END_OF_FILE'
X\input texinfo @c -*-texinfo-*-
X@c %**start of header
X@setfilename screen.info
X@settitle Screen User's Manual
X@finalout
X@setchapternewpage odd
X@c %**end of header
X@set version 3.3
X
X@c For examples, use a literal escape in info.
X@ifinfo
X@set esc 
X@end ifinfo
X@iftex
X@set esc <ESC>
X@end iftex
X
X@ifinfo
XThis file documents the the @code{Screen} virtual terminal manager.
X
XCopyright (c) 1993 Free Software Foundation, Inc.
X
XPermission is granted to make and distribute verbatim copies of
Xthis manual provided the copyright notice and this permission notice
Xare preserved on all copies.
X
X@ignore
XPermission is granted to process this file through TeX and print the
Xresults, provided the printed document carries copying permission
Xnotice identical to this one except for the removal of this paragraph
X(this paragraph not being relevant to the printed manual).
X
X@end ignore
XPermission is granted to copy and distribute modified versions of this
Xmanual under the conditions for verbatim copying, provided that the entire
Xresulting derived work is distributed under the terms of a permission
Xnotice identical to this one.
X
XPermission is granted to copy and distribute translations of this manual
Xinto another language, under the above conditions for modified versions,
Xexcept that this permission notice may be stated in a translation approved
Xby the Foundation.
X@end ifinfo
X
X@titlepage
X@title Screen
X@subtitle The virtual terminal manager
X@subtitle for Version @value{version}
X@subtitle May 1993
X
X@page
X@vskip 0pt plus 1filll
XCopyright @copyright{} 1993 Free Software Foundation, Inc.
X
XPermission is granted to make and distribute verbatim copies of
Xthis manual provided the copyright notice and this permission notice
Xare preserved on all copies.
X
XPermission is granted to copy and distribute modified versions of this
Xmanual under the conditions for verbatim copying, provided that the entire
Xresulting derived work is distributed under the terms of a permission
Xnotice identical to this one.
X
XPermission is granted to copy and distribute translations of this manual
Xinto another language, under the above conditions for modified versions,
Xexcept that this permission notice may be stated in a translation approved
Xby the Foundation.
X@end titlepage
X
X@node Top, Overview, (dir), (dir)
X
X@ifinfo
X@top Screen
XThis file documents the @code{Screen} virtual terminal manager, version
X@value{version}.
X@end ifinfo
X
X@menu
X* Overview::                    Preliminary information.
X* Getting Started::             An introduction to @code{screen}.
X* Invoking Screen::             Command line options for @code{screen}.
X* Customization::               The @file{.screenrc} file.
X* Commands::                    List all of the commands.
X* New Window::                  Running a program in a new window.
X* Selecting::                   Selecting a window to display.
X* Session Management::          Suspending or detaching a session.
X* Window Settings::             a.k.a., logging, etc.
X* Virtual Terminal::            Controlling the @code{screen} VT100 emulation.
X* Copy and Paste::              Exchanging text between windows and sessions.
X* Subprocess Execution::	I/O filtering with @code{exec}.
X* Key Binding::                 Binding commands to keys.
X* Flow Control::                Trap or pass flow control characters.
X* Termcap::                     Tweaking your terminal's termcap entry.
X* Message Line::                The @code{screen} message line.
X* Logging::                     Keeping a record of your session.
X* Startup::                     Functions only useful at @code{screen} startup.
X* Miscellaneous::               Various other commands.
X* Environment::                 Environment variables used by @code{screen}.
X* Files::                       Files used by @code{screen}.
X* Credits::                     Who's who of @code{screen}.
X* Bugs::                        What to do if you find a bug.
X* Installation::                Getting @code{screen} running on your system.
X* Concept Index::               Index of concepts.
X* Command Index::               Index of all @code{screen} commands.
X* Keystroke Index::             Index of default key bindings.
X@end menu
X
X@node Overview, Getting Started, Top, Top
X@chapter Overview
X@cindex overview
X
XScreen is a full-screen window manager that multiplexes a physical
Xterminal between several processes, typically interactive shells.  Each
Xvirtual terminal provides the functions of the DEC VT100 terminal and,
Xin addition, several control functions from the ANSI X3.64 (ISO 6429)
Xand ISO 2022 standards (e.g. insert/delete line and support for multiple
Xcharacter sets).  There is a scrollback history buffer for each virtual
Xterminal and a copy-and-paste mechanism that allows the user to move
Xtext regions between windows.
X 
XWhen @code{screen} is called, it creates a single window with a shell in
Xit (or the specified command) and then gets out of your way so that you
Xcan use the program as you normally would.  Then, at any time, you can
Xcreate new (full-screen) windows with other programs in them (including
Xmore shells), kill the current window, view a list of the active
Xwindows, turn output logging on and off, copy text between windows, view
Xthe scrollback history, switch between windows, etc.  When a program
Xterminates, @code{screen} kills the window that contained it.  If this
Xwindow was in the foreground, the display switches to the previously
Xdisplayed window; if none are left, @code{screen} exits.
X
XEverything you type is sent to the program running in the current
Xwindow.  The only exception to this is the one keystroke that is used to
Xinitiate a command to the window manager.  By default, each command
Xbegins with a control-a (abbreviated @kbd{C-a} from now on), and is
Xfollowed by one other keystroke.  The command character (@pxref{Command
XCharacter}) and all the key bindings (@pxref{Key Binding}) can be fully
Xcustomized to be anything you like, though they are always two
Xcharacters in length.
X
XThe standard way to create a new window is to type @kbd{C-a c}.  This
Xcreates a new window running a shell and switches to that window
Ximmediately, regardless of the state of the process running in the
Xcurrent window.  Similarly, you can create a new window with a custom
Xcommand in it by first binding the command to a keystroke (in your
X@file{.screenrc} file) and then using it just like the @kbd{C-a c}
Xcommand.  In addition, new windows can be created by running a command
Xlike:
X
X@example
Xscreen emacs prog.c
X@end example
X
X@noindent
Xfrom a shell prompt within a previously created window.  This will not
Xrun another copy of @code{screen}, but will instead supply the command
Xname and its arguments to the window manager who will use it to create
Xthe new window.  The above example would start the @code{emacs} editor
X(editing @file{prog.c}) and switch to its window.
X
XIf @file{/etc/utmp} is writable by @code{screen}, an appropriate record
Xwill be written to this file for each window, and removed when the
Xwindow is closed.  This is useful for working with @code{talk},
X@code{script}, @code{shutdown}, @code{rsend}, @code{sccs} and other
Xsimilar programs that use the utmp file to determine who you are. As
Xlong as @code{screen} is active on your terminal, the terminal's own
Xrecord is removed from the utmp file.  @xref{Login}.
X
X@node Getting Started, Invoking Screen, Overview, Top
X@chapter Getting Started
X@cindex introduction
X
XBefore you begin to use @code{screen} you'll need to make sure you have
Xcorrectly selected your terminal type, just as you would for any other
Xtermcap/terminfo program.  (You can do this by using @code{tset},
X@code{qterm}, or just @code{set term=mytermtype}, for example.)
X
XIf you're impatient and want to get started without doing a lot more
Xreading, you should remember this one command: @kbd{C-a ?} (@pxref{Key
XBinding}).  Typing these two characters will display a list of the
Xavailable @code{screen} commands and their bindings. Each keystroke is
Xdiscussed in the section on keystrokes (@pxref{Default Key Bindings}).
XAnother section (@pxref{Customization}) deals with the contents of your
X@file{.screenrc}.
X
XIf possible, choose a version of your terminal's termcap that has
Xautomatic margins turned @emph{off}.  This will ensure an accurate and
Xoptimal update of the screen in all circumstances.  The next best thing
Xis an auto-margin terminal that allows the last position on the screen
Xto be updated without scrolling the screen (such as a vt100).  This also
Xallows the entire screen to be updated.  If all you've got is a
X``true'' auto-margin terminal, @code{screen} will be content to use it,
Xbut updating a character put into the last position on the screen may
Xnot be possible until the screen scrolls or the character is moved into
Xa safe position in some other way.  This delay can be shortened by using
Xa terminal with insert-character capability.
X
XIf your terminal is of the second type (firm-margined @samp{am}), you will
Xwant to let @code{screen} know about this, since a normal termcap
Xdoesn't distinguish this type of automatic margins from a ``true'' @samp{am}
Xterminal.  You do this by specifying the @samp{xn} capability in your termcap
X(@pxref{Termcap,@code{termcap} command}), or by using the @samp{-L}
Xcommand-line option.  @code{screen} needs this information to correctly
Xupdate the screen.  You don't need to worry about this if your terminal
Xtype starts with @samp{vt}, as @code{screen} assumes @samp{xn} in that case.
X
XIf you are using a ``true'' auto-margin terminal (no @samp{xn}) at low baud
Xrates, you may want to turn on a more optimal output mode by including
Xthe flag @samp{OP} in your termcap entry, or by specifying the @samp{-O}
Xcommand-line option.  The trade-off is that @code{screen} will no-longer
Xaccurately emulate the vt100's line-end quirks (e.g. the screen will
Xscroll after putting @emph{one} character in the last screen position).
X
X@xref{Special Capabilities}, for more information about telling
X@code{screen} what kind of terminal you have.
X
X@node Invoking Screen, Customization, Getting Started, Top
X@chapter Invoking @code{Screen}
X@cindex invoking
X@cindex options
X@cindex command line options
X
XScreen has the following command-line options:
X
X@table @samp
X@item -a
XInclude @emph{all} capabilities (with some minor exceptions) in each
Xwindow's termcap, even if @code{screen} must redraw parts of the display
Xin order to implement a function.
X
X@item -A
XAdapt the sizes of all windows to the size of the display.  By default,
X@code{screen} may try to restore its old window sizes when attaching to
Xresizeable terminals (those with @samp{WS} in their descriptions, e.g.
X@code{suncmd} or some varieties of @code{xterm}).
X
X@item -c @var{file}
XUse @var{file} as the user's configuration file instead of the default
Xof @file{$HOME/.screenrc}.
X
X@item -d [@var{pid.sessionname}]
X@itemx -D [@var{pid.sessionname}]
XDo not start @samp{screen}, but instead detach a @code{screen} session
Xrunning elsewhere (@pxref{Detach}).  @samp{-d} has the same effect as
Xtyping @kbd{C-a d} from the controlling terminal for the session.
X@samp{-D} is the equivalent to the power detach key.  If no session can
Xbe detached, this option is ignored.  The combination @code{screen -D
X-r} can be used to log out from a remote terminal and transport the
Xsession running there to your current terminal. 
X@emph{Note}: It is a good idea to check the status of your sessions
Xwith @code{screen -list} before using this option.
X
X@item -e @var{xy}
XSet the command character to @var{x}, and the character generating a
Xliteral command character (when typed after the command character) to
X@var{y}.  The defaults are @kbd{C-a} and @kbd{a}, which can be specified
Xas @samp{-e^Aa}.  This option is equivalent to the @code{escape} command
X(@pxref{Command Character}).
X
X@item -f
X@itemx -fn
X@itemx -fa
XSet flow-control to on, off, or automatic switching mode, respectively.
XThis option is equivalent to the @code{defflow} command (@pxref{Flow
XControl}).
X
X@item -h @var{num}
XSet the history scrollback buffer to be @var{num} lines high.
XEquivalent to the @code{defscrollback} command (@pxref{Copy}).
X
X@item -i
XCause the interrupt key (usually @kbd{C-c}) to interrupt the display
Ximmediately when flow control is on.  This option is equivalent to the
X@code{interrupt} argument to the @code{defflow} command (@pxref{Flow
XControl}). Its use is discouraged.
X
X@item -l
X@itemx -ln
XTurn login mode on or off (for @file{/etc/utmp} updating).  This option
Xis equivalent to the @code{deflogin} command (@pxref{Login}).
X
X@item -ls
X@itemx -list
XDo not start @code{screen}, but instead print a list of session
Xidentification strings (usually of the form @var{pid.tty.host};
X@pxref{Session Name}).  Sessions marked @samp{detached} can be resumed
Xwith @code{screen -r}.  Those marked @samp{attached} are running and
Xhave a controlling terminal.  Sessions marked as @samp{dead} should be
Xthoroughly checked and removed.  Ask your system administrator if you are
Xnot sure why they died. Remove sessions with the @samp{-wipe} option.
X
X@item -L
XTell @code{screen} that your auto-margin terminal allows programs to
Xwrite to the last column of the last row of the screen without
Xscrolling.  This can also be set in your @file{.screenrc} by specifying
X@samp{xn} in a @code{termcap} command (@pxref{Termcap}).
X
X@item -m
XTell @code{screen} to ignore the @code{$STY} environment variable.  When
Xthis option is used, a new session will always be created, regardless of
Xwhether @code{screen} is being called from within another @code{screen}
Xsession or not.
X
X@item -O
XSelect an output mode for your terminal which is more optimal than true
Xvt100 emulation (only affects auto-margin terminals without @samp{xn}).
XThis can also be set in your @file{.screenrc} by specifying @samp{OP} in a
X@code{termcap} command (@pxref{Termcap}).
X
X@item -r [@var{pid.sessionname}]
XResume a detached @code{screen} session.  No other options (except
X@samp{-d} or @samp{-D}) may be specified, though the session name
X(@pxref{Session Name}) may be needed to distinguish between multiple
Xdetached @code{screen} sessions.
X
X@item -R
XResume the first appropriate detached @code{screen} session.  If
Xsuccessful, all other command-line options are ignored.  If no detached
Xsession exists, start a new session using the specified options, just as
Xif @samp{-R} had not been specified.  This option is set by default if
Xscreen is run as a login-shell.
X
X@item -s @var{program}
XSet the default shell to be @var{program}.  By default, @code{screen}
Xuses the value of the environment variable @code{$SHELL}, or
X@file{/bin/sh} if it is not defined.  This option is equivalent to the
X@code{shell} command (@pxref{Shell}).
X
X@item -S @var{sessionname}
XSet the name of the new session to @var{sessionname}.  This option can
Xbe used to specify a meaningful name for the session in place of the
Xdefault @var{tty.host} suffix.  This name identifies the session for the
X@code{screen -list} and @code{screen -r} commands.  This option is
Xequivalent to the @code{sessionname} command (@pxref{Session Name}).
X
X@item -t @var{name}
XSet the title (a.k.a.) for the default shell or specified program.
XThis option is equivalent to the @code{shellaka} command
X(@pxref{Shell}).
X
X@item -v
XPrint the version number.
X
X@item -wipe
XList available screens like @code{screen -ls}, but remove destroyed
Xsessions instead of marking them as @samp{dead}.
X
X@item -x
XAttach to a session which is already attached elsewhere (multi-display
Xmode).
X@end table
X
X@node Customization, Commands, Invoking Screen, Top
X@chapter Customizing @code{Screen}
X@cindex customization
X
XYou can modify the default settings for @code{screen} to fit your tastes
Xeither through a personal @file{.screenrc} file which contains commands
Xto be executed at startup, or on the fly using the @code{colon} command.
X
X@menu
X* Startup Files::               The @file{.screenrc} file.
X* Colon::                       Entering customization commands interactively.
X@end menu
X
X@node Startup Files, Colon,  , Customization
X@section The @file{.screenrc} file
X@cindex .screenrc
X@cindex screenrc
XWhen @code{screen} is invoked, it executes initialization commands from
Xthe files @file{/local/etc/screenrc} and @file{.screenrc} in the user's
Xhome directory.  These defaults can be overridden in the following ways:
XFor the global screenrc file @code{screen} searches for the environment
Xvariable @code{$SYSSCREENRC}.  The user specific screenrc file is
Xsearched for in @code{$ISCREENRC}, then @code{$SCREENRC}, then
X@file{@code{$HOME}/.iscreenrc} and finally defaults to
X@file{@code{$HOME}/.screenrc}.  The command line option @samp{-c}
Xspecifies which file to use (@pxref{Invoking Screen}.  Commands in these
Xfiles are used to set options, bind commands to keys, and to
Xautomatically establish one or more extra windows at the beginning of
Xyour @code{screen} session.  Commands are listed one per line, with
Xempty lines being ignored.  A command's arguments are separated by tabs
Xor spaces, and may be surrounded by single or double quotes.  A @samp{#}
Xturns the rest of the line into a comment, except in quotes.
XUnintelligible lines are warned about and ignored.  Commands may contain
Xreferences to environment variables.  The syntax is the shell-like
X@code{$VAR} or @code{$@{VAR@}}.  Note that this causes incompatibilities
Xwith previous @code{screen} versions, as now the '$'-sign has to be
Xprotected with '\' if no variable substitution is intended.
X
X@node Colon,  , Startup Files, Customization
X@section Colon
XCustomization can also be done online, with this command:
X
X@kindex :
X@deffn Command colon
X(@kbd{C-a :})@* 
XAllows you to enter @file{.screenrc} command lines.  Useful for
Xon-the-fly modification of key bindings, specific window creation and
Xchanging settings.  Note that the @code{set} keyword no longer exists,
Xas of version 3.3.  Change default settings with commands starting with
X@samp{def}.  You might think of this as the @code{ex} command mode of
X@code{screen}, with @code{copy} as its @code{vi} command mode
X(@pxref{Copy and Paste}).
X@end deffn
X
X@node Commands, New Window, Customization, Top
X@chapter Commands
X
XA command in @code{screen} can either be bound to a key, invoked from a
Xscreenrc file, or called from the @code{colon} prompt
X(@pxref{Customization}).  As of version 3.3, all commands can be bound
Xto keys, although some may be less useful than others.
X
XIn this manual, a command definition looks like this:
X
X@table @asis
X@item -- Command: command [-n] ARG1 [ARG2] @dots{}
X(@var{keybindings})@*
XThis command does something, but I can't remember what.
X@end table
X
XAn argument in square brackets (@samp{[]}) is optional.  Many commands
Xtake an argument of @samp{on} or @samp{off}, which is indicated as
X@var{state} in the definition.
X
X@menu
X* Default Key Bindings::	@code{screen} keyboard commands.
X* Command Summary::             List of all commands.
X@end menu
X
X@node Default Key Bindings, Command Summary,  , Commands
X@section Default Key Bindings
X
XAs mentioned previously, each keyboard command consists of a
X@kbd{C-a} followed by one other character.  For your convenience, all
Xcommands that are bound to lower-case letters are also bound to their
Xcontrol character counterparts (with the exception of @kbd{C-a a}; see
Xbelow).  Thus, both @kbd{C-a c} and @kbd{C-a C-c} can be used to create
Xa window.
X
XThe following table shows the default key bindings:
X
X@table @asis
X@item @kbd{C-a '}
X@itemx @kbd{C-a "}
X(select)@*
XPrompt for a window identifier and switch.
X@xref{Selecting}.
X
X@item @kbd{C-a 0@dots{}9}
X(select 0@dots{}select 9)@*
XSwitch to window number 0@dots{}9.  @xref{Selecting}.
X
X@item @kbd{C-a C-a}
X(other)@*
XToggle to the window displayed previously.  @xref{Selecting}.
X
X@item @kbd{C-a a}
X(meta)@*
XSend the command character (C-a) to window. See @code{escape} command.
X@xref{Command Character}. 
X
X@item @kbd{C-a A}
X(aka)@*
XAllow the user to enter an a.k.a (also-known-as) for the current window.
X@xref{Also Known As}.
X
X@item @kbd{C-a c}
X@itemx @kbd{C-a C-c}
X(screen)@*
XCreate a new window with a shell and switch to that window.
X@xref{Screen Command}.
X
X@item @kbd{C-a C}
X(clear)@*
XClear the screen.  @xref{Clear}.
X
X@item @kbd{C-a d}
X@itemx @kbd{C-a C-d}
X(detach)@*
XDetach @code{screen} from this terminal.  @xref{Detach}.
X
X@item @kbd{C-a D D}
X(pow_detach)@*
XDetach and logout.  @xref{Power Detach}.
X
X@item @kbd{C-a f}
X@itemx @kbd{C-a C-f}
X(flow)@*
XCycle flow among @samp{on}, @samp{off} or @samp{auto}.  @xref{Flow}.
X
X@item @kbd{C-a C-g}
X(vbell)@*
XToggle visual bell mode.  @xref{Bell}.
X
X@item @kbd{C-a h}
X@itemx @kbd{C-a C-h}
X(hardcopy)@*
XWrite a hardcopy of the current window to the file ``hardcopy.@var{n}''.
X@xref{Hardcopy}.
X
X@item @kbd{C-a H}
X(log)@* 
XToggle logging of the current window to the file ``screenlog.@var{n}''.
X@xref{Log}.
X
X@item @kbd{C-a i}
X@itemx @kbd{C-a C-i}
X(info)@*
XShow info about the current window.  @xref{Info}.
X
X@item @kbd{C-a k}
X@itemx @kbd{C-a C-k}
X(kill)@*
XDestroy the current window.  @xref{Kill}.
X
X@item @kbd{C-a l}
X@itemx @kbd{C-a C-l}
X(redisplay)@*
XFully refresh the current window.  @xref{Redisplay}.
X
X@item @kbd{C-a L}
X(login)@*
XToggle the current window's login state.  @xref{Login}.
X
X@item @kbd{C-a m}
X@itemx @kbd{C-a C-m}
X(lastmsg)@*
XRepeat the last message displayed in the message line.
X@xref{Last Message}.
X
X@item @kbd{C-a M}
X(monitor)
XToggle monitoring of the current window.  @xref{Monitor}.
X
X@item @kbd{C-a @key{SPC}}
X@itemx @kbd{C-a n}
X@itemx @kbd{C-a C-n}
X(next)@*
XSwitch to the next window.  @xref{Selecting}.
X
X@item @kbd{C-a p}
X@itemx @kbd{C-a C-p}
X(prev)@*
XSwitch to the previous window (opposite of @kbd{C-a n}).
X@xref{Selecting}.
X
X@item @kbd{C-a q}
X@itemx @kbd{C-a C-q}
X(xon)@*
XSend a ^Q (ASCII XON) to the current window.  @xref{XON/XOFF}.
X
X@item @kbd{C-a r}
X@itemx @kbd{C-a C-r}
X(wrap)@*
XToggle the current window's line-wrap setting (turn the current window's
Xautomatic margins on or off).  @xref{Wrap}.
X
X@item @kbd{C-a s}
X@itemx @kbd{C-a C-s}
X(xoff)@*
XSend a ^S (ASCII XOFF) to the current window.  @xref{XON/XOFF}.
X
X@item @kbd{C-a t}
X@itemx @kbd{C-a C-t}
X(time)@*
XShow the load average and xref.  @xref{Time}.
X
X@item @kbd{C-a v}
X@itemx @kbd{C-a C-v}
X(version)@*
XDisplay the version and compilation date.  @xref{Version}.
X
X@item @kbd{C-a w}
X@itemx @kbd{C-a C-w}
X(windows)@*
XShow a list of active windows.  @xref{Windows}.
X
X@item @kbd{C-a W}
X(width)@*
XToggle between 80 and 132 columns.  @xref{Width}.
X
X@item @kbd{C-a x}
X@itemx @kbd{C-a C-x}
X(lockscreen)@*
XLock your terminal.  @xref{Lock}.
X
X@item @kbd{C-a z}
X@itemx @kbd{C-a C-z}
X(suspend)@*
XSuspend @code{screen}.  @xref{Suspend}.
X
X@item @kbd{C-a Z}
X(reset)@*
XReset the virtual terminal to its ``power-on'' values.  
X@xref{Reset}.
X
X@item @kbd{C-a .}
X(dumptermcap)@*
XWrite out a @file{.termcap} file.  @xref{Dump Termcap}.
X
X@item @kbd{C-a ?}
X(help)@*
XShow key bindings.  @xref{Help}.
X
X@item @kbd{C-a C-\}
X(quit)@*
XKill all windows and terminate @code{screen}.  @xref{Quit}.
X
X@item @kbd{C-a :}
X(colon)@*
XEnter a command line.  @xref{Colon}.
X
X@item @kbd{C-a [}
X@itemx @kbd{C-a C-[}
X@itemx @kbd{C-a @key{ESC}}
X(copy)@*
XEnter copy/scrollback mode.  @xref{Copy}.
X
X@item @kbd{C-a ]}
X@itemx @kbd{C-a C-]}
X(paste)@*
XWrite the contents of the paste buffer to the stdin queue of the
Xcurrent window.  @xref{Paste}.
X
X@item @kbd{C-a @{}
X(history)@*
XCopy and paste a previous (command) line.  @xref{History}.
X
X@item @kbd{C-a >}
X(writebuf)@*
XWrite the pastebuffer out to the screen-exchange file.
X@xref{Screen-Exchange}.
X
X@item @kbd{C-a <}
X(readbuf)@*
XRead the screen-exchange file into the pastebuffer.
X@xref{Screen-Exchange}.
X
X@item @kbd{C-a =}
X(removebuf)@*
XDelete the screen-exchange file.  @xref{Screen-Exchange}.
X@end table
X
X@node Command Summary,  , Default Key Bindings, Commands
X@section Command Summary
X@cindex command summary 
X
X@table @code
X@item acladd @var{username}
XAllow other user in this session.  @xref{Multiuser}.
X@item acldel @var{username}
XDisallow other user in this session.  @xref{Multiuser}.
X@item activity @var{message}
XSet the activity notification message.  @xref{Monitor}.
X@item aka @var{[windowalias]}
XSet the name of the current window.  @xref{AKA Command}.
X@item allpartial @var{state}
XSet all windows to partial refresh.  @xref{Redisplay}.
X@item autodetach @var{state}
XAutomatically detach the session on SIGHUP.  @xref{Detach}.
X@item autonuke @var{state}
XEnable a clear screen to discard unwritten output.  @xref{Autonuke}.
X@item bell @var{message}
XSet the bell notification message.  @xref{Bell}.
X@item bind @var{key [command [args]]}
XBind a command to a key.  @xref{Bind}.
X@item break @var{[duration]}
XSend a break signal to the current window.  @xref{Break}.
X@item bufferfile @var{[exchange-file]}
XSelect a file for screen-exchange.  @xref{Screen-Exchange}.
X@item chdir @var{[directory]}
XChange the current directory for future windows.  @xref{Chdir}.
X@item clear
XClear the window screen.  @xref{Clear}.
X@item colon
XEnter a @code{screen} command.  @xref{Colon}.
X@item console @var{[state]}
XGrab or ungrab console output.  @xref{Console}.
X@item copy
XEnter copy mode.  @xref{Copy}.
X@item copy_reg @var{[key]}
XStore the copy buffer to a register.  @xref{Registers}.
X@item crlf @var{state}
XSelect line break behavior for copying.  @xref{Line Termination}.
X@item defautonuke @var{state}
XSelect default autonuke behavior.  @xref{Autonuke}.
X@item defflow @var{fstate}
XSelect default flow control behavior.  @xref{Flow}.
X@item deflogin @var{state}
XSelect default utmp logging behavior.  @xref{Login}.
X@item defmode @var{mode}
XSelect default file mode for ptys.  @xref{Mode}.
X@item defmonitor @var{state}
XSelect default activity monitoring behavior.  @xref{Monitor}.
X@item defobuflimit @var{limit}
XSelect default output buffer limit.  @xref{Obuflimit}.
X@item defscrollback @var{num}
XSet default lines of scrollback.  @xref{Scrollback}.
X@item defwrap @var{state}
XSet default line-wrapping behavior.  @xref{Wrap}.
X@item detach
XDisconnect @code{screen} from the terminal.  @xref{Detach}.
X@item dumptermcap
XWrite the window's termcap entry to a file.  @xref{Dump Termcap}.
X@item echo [-n] @var{message}
XDisplay a message on startup.  @xref{Startup}.
X@item escape @var{xy}
XSet the command and @code{meta} characters.  @xref{Command Character}.
X@item exec @var{[[fdpat] command [args ...]]}
XRun a subprocess (filter).  @xref{Exec}.
X@item flow @var{[fstate]}
XSet flow control behavior.  @xref{Flow}.
X@item hardcopy
XWrite out the contents of the current window.  @xref{Hardcopy}.
X@item hardcopy_append @var{state}
XAppend to hardcopy files.  @xref{Hardcopy}.
X@item hardcopydir @var{directory}
XPlace, where to dump hardcopy files.  @xref{Hardcopy}.
X@item hardstatus @var{[state]}
XUse the hardware status line.  @xref{Hardware Status Line}.
X@item height @var{[lines]}
XSet display height.  @xref{Height}.
X@item help
XDisplay current key bindings.  @xref{Help}.
X@item history
XFind previous command beginning @dots{}.  @xref{History}.
X@item info
XDisplay terminal settings.  @xref{Info}.
X@item ins_reg @var{[key]}
XPaste the contents of a register.  @xref{Registers}.
X@item kill
XDestroy the current window.  @xref{Kill}.
X@item lastmsg
XRedisplay the last message.  @xref{Last Message}.
X@item license
XDisplay licensing information.  @xref{Startup}.
X@item lockscreen
XLock the controlling terminal.  @xref{Lock}.
X@item log @var{[state]}
XLog all output in the current window.  @xref{Log}.
X@item logdir @var{directory}
XPlace where to collect logfiles.  @xref{Log}.
X@item login @var{[state]}
XLog the window in @file{/etc/utmp}.  @xref{Login}.
X@item markkeys @var{string}
XRebind keys in copy mode.  @xref{Copy Mode Keys}.
X@item meta
XInsert the command character.  @xref{Command Character}.
X@item monitor @var{[state]}
XMonitor activity in window.  @xref{Monitor}.
X@item msgminwait @var{sec}
XSet minimum message wait.  @xref{Message Wait}.
X@item msgwait @var{sec}
XSet default message wait.  @xref{Message Wait}.
X@item multiuser @var{state}
XGo into single or multi user mode. @xref{Multiuser}.
X@item nethack @var{state}
XUse @code{nethack}-like error messages.  @xref{Nethack}.
X@item next
XSwitch to the next window.  @xref{Selecting}.
X@item obuflimit @var{[limit]}
XSelect output buffer limit.  @xref{Obuflimit}.
X@item other
XSwitch to the window you were in last.  @xref{Selecting}.
X@item partial @var{state}
XSet window to partial refresh.  @xref{Redisplay}.
X@item password @var{[crypted_pw]}
XSet reattach password.  @xref{Detach}.
X@item paste
XPaste contents of copy buffer.  @xref{Paste}.
X@item pow_break
XClose and Reopen the window's terminal.  @xref{Break}.
X@item pow_detach
XDetach and hang up.  @xref{Power Detach}.
X@item pow_detach_msg @var{message}
XSet message displayed on @code{pow_detach}.  @xref{Power Detach}.
X@item prev
XSwitch to the previous window.  @xref{Selecting}.
X@item process @var{[key]}
XTreat a register as input to @code{screen}.  @xref{Registers}.
X@item quit
XKill all windows and exit.  @xref{Quit}.
X@item readbuf
XRead the copy buffer from the screen-exchange file.  @xref{Screen-Exchange}.
X@item redisplay
XRedisplay the current window.  @xref{Redisplay}.
X@item register @var{key string}
XStore a string to a register.  @xref{Registers}.
X@item removebuf
XDelete the screen-exchange file.  @xref{Screen-Exchange}.
X@item reset
XReset the terminal settings for the window.  @xref{Reset}.
X@item screen @var{[opts] [n] [cmd [args]]}
XCreate a new window.  @xref{Screen Command}.
X@item scrollback @var{num}
XSet size of scrollback buffer.  @xref{Scrollback}.
X@item select @var{[n]}
XSwitch to a specified window.  @xref{Selecting}.
X@item sessionname @var{[name]}
XName this session.  @xref{Session Name}.
X@item setenv @var{var string}
XSet an environment variable for new windows.  @xref{Setenv}.
X@item shell @var{command}
XSet the default program for new windows.  @xref{Shell}.
X@item shellaka @var{a.k.a.}
XSet the default name for new windows.  @xref{Shell}.
X@item silence @var{[state|seconds]}
XMonitor window for inactivity.  @xref{Silence}.
X@item silencewait @var{seconds}
XDefault timeout to trigger an inactivity notify.  @xref{Silence}.
X@item sleep @var{num}
XPause during startup.  @xref{Startup}.
X@item slowpaste @var{msec}
XSlow down pasting.  @xref{Paste}.
X@item startup_message @var{state}
XDisplay copyright notice on startup.  @xref{Startup}.
X@item suspend
XPut session in background.  @xref{Suspend}.
X@item term @var{term}
XSet @code{$TERM} for new windows.  @xref{Term}.
X@item termcap @var{term terminal-tweaks [window-tweaks]}
XTweak termcap entries for best performance.  @xref{Termcap Syntax}.
X@item terminfo @var{term terminal-tweaks [window-tweaks]}
XDitto, for terminfo systems.  @xref{Termcap Syntax}.
X@item time
XDisplay time and load average.  @xref{Time}.
X@item unsetenv @var{var}
XUnset environment variable for new windows.  @xref{Setenv}.
X@item vbell @var{[state]}
XUse visual bell.  @xref{Bell}.
X@item vbell_msg @var{message}
XSet vbell message.  @xref{Bell}.
X@item vbellwait @var{sec}
XSet delay for vbell message.  @xref{Bell}.
X@item version
XDisplay @code{screen} version.  @xref{Version}.
X@item width @var{[num]}
XSet the width of the window.  @xref{Width}.
X@item windows
XList active windows.  @xref{Windows}.
X@item wrap @var{[state]}
XControl line-wrap behavior.  @xref{Wrap}.
X@item writebuf
XWrite copy buffer to screen-exchange file.  @xref{Screen-Exchange}.
X@item xoff
XSend an XOFF character.  @xref{XON/XOFF}.
X@item xon
XSend an XON character.  @xref{XON/XOFF}.
X@end table
X
X@node New Window, Selecting, Commands, Top
X@chapter New Window
X
XThis section describes the commands for creating a new window for
Xrunning programs.  When a new window is created, the first available
Xnumber from the range 0@dots{}9 is assigned to it.  There can be no more
Xthan 10 windows active at any one time.
X
X@menu
X* Chdir::                       Change the working directory for new windows.
X* Screen Command::              Create a new window.
X* Setenv::                      Set environment variables for new windows.
X* Shell::                       Parameters for shell windows.
X* Term::                        Set the terminal type for new windows.
X@end menu
X
X@node Chdir, Screen Command,  , New Window
X@section Chdir
X@deffn Command chdir [directory]
X(none)@*
XChange the current directory of @code{screen} to the specified directory
Xor, if called without an argument, to your home directory (the value of
Xthe environment variable @code{$HOME}).  All windows that are created by means
Xof the @code{screen} command from within @file{.screenrc} or by means of
X@kbd{C-a : screen @dots{}} or @kbd{C-a c} use this as their default
Xdirectory.  Without a @code{chdir} command, this would be the directory
Xfrom which @code{screen} was invoked.  Hardcopy and log files are always
Xwritten to the @emph{window's} default directory, @emph{not} the current
Xdirectory of the process running in the window.  You can use this
Xcommand multiple times in your @file{.screenrc} to start various windows
Xin different default directories, but the last @code{chdir} value will
Xaffect all the windows you create interactively.
X@end deffn
X
X@node Screen Command, Setenv, Chdir, New Window
X@section Screen Command
X@kindex c
X@kindex C-c
X@deffn Command screen [opts] [n] [cmd [args]]
X(@kbd{C-a c}, @kbd{C-a C-c})@*
XEstablish a new window.  The flow-control options (@samp{-f}, @samp{-fn}
Xand @samp{-fa}), title (a.k.a.) option (@samp{-t}), login options
X(@samp{-l} and @samp{-ln}) , terminal type option (@samp{-T @var{term}})
Xand scrollback option (@samp{-h @var{num}}) may be specified for each
Xcommand.  If an optional number @var{n} in the range 0@dots{}9 is given,
Xthe window number @var{n} is assigned to the newly created window (or,
Xif this number is already in-use, the next available number).  If a
Xcommand is specified after @code{screen}, this command (with the given
Xarguments) is started in the window; otherwise, a shell is created.
X@end deffn
X
XThus, if your @file{.screenrc} contains the lines
X
X@example
X# example for .screenrc:
Xscreen 1
Xscreen -fn -t foobar 2 telnet foobar
X@end example
X
X@noindent
X@code{screen} creates a shell window (in window #1) and a window with a
XTELNET connection to the machine foobar (with no flow-control using the
Xa.k.a. @samp{foobar} in window #2).  If you do not include any
X@code{screen} commands in your @file{.screenrc} file, then @code{screen}
Xdefaults to creating a single shell window, number zero.  When the
Xinitialization is completed, @code{screen} switches to the last window
Xspecified in your .screenrc file or, if none, it opens default window
X#0.
X
X@node Setenv, Shell, Screen Command, New Window
X@section Setenv
X@deffn Command setenv var string
X(none)@*
XSet the environment variable @var{var} to value @var{string}.
XThe environment is inherited by all subsequently forked shells.
X@end deffn
X
X@deffn Command unsetenv var
X(none)@*
XUnset an environment variable.
X@end deffn
X
X@node Shell, Term, Setenv, New Window
X@section Shell
X@deffn Command shell command
X(none)@*
XSet the command to be used to create a new shell.  This overrides the
Xvalue of the environment variable @code{$SHELL}.  This is useful if
Xyou'd like to run a tty-enhancer which is expecting to execute the
Xprogram specified in @code{$SHELL}.  If the command begins with
Xa @samp{-} character, the shell will be started as a login-shell.
X@end deffn
X
X@deffn Command shellaka a.k.a.
X(none)@*
XSet the a.k.a. for all shells created during startup or by the C-a C-c
Xcommand.  @xref{Also Known As}, for details about what a.k.a.'s are.
X@end deffn
X
X@node Term,  , Shell, New Window
X@section Term
X@deffn Command term term
X(none)@*
XIn each window @code{screen} opens, it sets the @code{$TERM}
Xvariable to @samp{screen} by default, unless no description for
X@samp{screen} is installed in the local termcap or terminfo data base.
XIn that case it pretends that the terminal emulator is @samp{vt100}.
XThis won't do much harm, as @code{screen} is VT100/ANSI compatible.  The
Xuse of the @code{term} command is discouraged for non-default purpose.
XThat is, one may want to specify special @code{$TERM} settings (e.g. vt100) for
Xthe next @code{screen rlogin othermachine} command. Use the command
X@code{screen -T vt100 rlogin othermachine} rather than setting
X(@code{term vt100}) and resetting (@code{term screen}) the default
Xbefore and after the @code{screen} command.
X@end deffn
X
X@node Selecting, Session Management, New Window, Top
X@chapter Selecting a Window
X
XThis section describes the commands for switching between windows in an
X@code{screen} session.  The windows are numbered from 0 to 9, and are created
Xin that order by default (@pxref{New Window}).
X
X@menu
X* Next and Previous::           Forward or back one window.
X* Other Window::                Switch back and forth between two windows.
X* Select::                      Specify a particular window.
X@end menu
X
X@node Next and Previous, Other Window,  , Selecting
X@section Moving Back and Forth
X@kindex SPC
X@kindex n
X@kindex C-n
X@deffn Command next
X(@kbd{C-a @key{SPC}}, @kbd{C-a n}, @kbd{C-a C-n})@*
XSwitch to the next window.  This command can be used repeatedly to
Xcycle through the list of windows.  (On some terminals, C-@key{SPC}
Xgenerates a NUL character, so you must release the control key before
Xpressing space.)
X@end deffn
X
X@kindex p
X@kindex C-p
X@deffn Command prev
X(@kbd{C-a p}, @kbd{C-a C-p})@*
XSwitch to the previous window (the opposite of @kbd{C-a n}).
X@end deffn
X
X@node Other Window, Select, Next and Previous, Selecting
X@section Other Window
X@kindex C-a
X@deffn Command other
X(@kbd{C-a C-a})@*
XSwitch to the last window displayed.  Note that this command
Xdefaults to the command character typed twice, unless overridden; for
Xinstance, if you use the option @samp{-e]x}, this command becomes
X@kbd{]]}, not @kbd{]C-a} (@pxref{Command Character}).  On the other
Xhand, if you use the option @samp{-e``}, this command remains @kbd{`
XC-a}, since @kbd{``} is bound to @code{meta}.
X@end deffn
X
X@node Select,  , Other Window, Selecting
X@section Select
X@kindex 0@dots{}9
X@kindex '
X@kindex "
X@deffn Command select [n]
X(@kbd{C-a @var{n}}, @kbd{C-a '}, @kbd{C-a "})@*
XSwitch to the window with the number @var{n}.
XIf no window number is specified, you get prompted for an 
Xidentifier. This can be an a.k.a. or a number.
X@end deffn
X
X@node Session Management, Window Settings, Selecting, Top
X@chapter Session Management Commands
X
XPerhaps the most useful feature of @code{screen} is the way it allows
Xthe user to move a session between terminals, by detaching and
Xreattaching.  This also makes life easier for modem users who have to
Xdeal with unexpected loss of carrier.
X
X@menu
X* Detach::                      Disconnect @code{screen} from your terminal.
X* Power Detach::                Detach and log out.
X* Lock::                        Lock your terminal temporarily.
X* Multiuser Session::		Changing number of allowed users.
X* Session Name::                Rename your session for later reattachment.
X* Suspend::                     Suspend your session.
X* Quit::                        Terminate your session.
X@end menu
X
X@node Detach, Power Detach,  , Session Management
X@section Detach
X
X@deffn Command autodetach state
X(none)@*
XSets whether @code{screen} will automatically detach upon hangup, which
Xsaves all your running programs until they are resumed with a
X@code{screen -r} command.  When turned off, a hangup signal will
Xterminate @code{screen} and all the processes it contains. Autodetach is
Xon by default.
X@end deffn
X
X@kindex d
X@kindex C-d
X@deffn Command detach
X(@kbd{C-a d}, @kbd{C-a C-d})@*
XDetach the @code{screen} session (disconnect it from the terminal and
Xput it into the background).  A detached @code{screen} can be resumed by
Xinvoking @code{screen} with the @code{-r} option. (@pxref{Invoking
XScreen})
X@end deffn
X
X@deffn Command password [crypted_pw]
X(none)@*
XPresent a crypted password in your @file{.screenrc} file and screen will
Xask for it, whenever someone attempts to resume a detached session. This
Xis useful, if you have privileged programs running under @code{screen}
Xand you want to protect your session from reattach attempts by users
Xthat managed to assume your uid. (I.e. any superuser.)  If no crypted
Xpassword is specified, screen prompts twice a password and places its
Xencryption in the copybuffer.  Default is `none', which disables
Xpassword checking.
X@end deffn
X
X@node Power Detach, Lock, Detach, Session Management
X@section Power Detach
X
X@kindex D
X@deffn Command pow_detach
X(@kbd{C-a D})@*
XMainly the same as @code{detach}, but also sends a HANGUP signal
Xto the parent process of @code{screen}.@*
X@emph{Caution}: This will result in a
Xlogout if @code{screen} was started from your login shell.
X@end deffn
X
X@deffn Command pow_detach_msg message
X(none)@*
XThe @var{message} specified here is output whenever a power detach is
Xperformed. It may be used as a replacement for a logout message or to reset 
Xbaud rate, etc.
X@end deffn
X
X@node Lock, Multiuser Session, Power Detach, Session Management
X@section Lock
X@kindex x
X@kindex C-x
X@deffn Command lockscreen
X(@kbd{C-a x}, @kbd{C-a C-x})@*
XCall a screenlock program (@file{/local/bin/lck} or @file{/usr/bin/lock}
Xor a builtin, if no other is available). Screen does not accept any
Xcommand keys until this program terminates. Meanwhile processes in the
Xwindows may continue, as the windows are in the detached state.
XThe screenlock program may be changed through the environment variable
X@code{$LOCKPRG} (which must be set in the shell from which @code{screen}
Xis started) and is executed with the user's uid and gid.
X@end deffn
X
X@node Multiuser Session, Session Name, Lock, Session Management
X@section Multiuser Session
X@cindex multiuser session 
X
XThese commands allow other users to gain access to one single @code{screen}
Xsession. When attaching to a multiuser @code{screen} the sessionname is 
Xspecified as @code{username/sessionname}.
X
X@menu
X* Multiuser::			Enable / Disable multiuser mode
X* Acladd::			Enable a specific user
X* Acldel::			Disable a specific user
X@end menu
X
X@node Multiuser, AclAdd,  , Multiuser Session
X@subsection Multiuser
X@deffn Command multiuser @var{state}
X(none)@*
XSwitch between single-user and multi-user mode. Standard screen operation is 
Xsingle-user. In multi-user mode the commands @code{acladd} and @code{acldel}
Xcan be used to enable (and disable) other users accessing this @code{screen}.
X@end deffn
X
X@node Acladd, Acldel, Multiuser, Multiuser Session
X@subsection Acladd
X@deffn Command acladd @var{username}
X(none)@*
XEnable a user to access this screen session. Multi-user mode only.
X@end deffn
X
X@node Acldel,  , Acladd, Multiuser Session
X@subsection Acldel
X@deffn Command acldel @var{username}
X(none)@*
XRemove a user from screens access control list. Multi-user mode only.
X@end deffn
X
X@node Session Name, Suspend, Multiuser Session, Session Management
X@section Session Name
X@deffn Command sessionname [name]
X(none)@*
XRename the current session. Note that for @code{screen -list} the name
Xshows up with the process-id prepended. If the argument @var{name} is
Xomitted, the name of this session is displayed.@*
X@emph{Caution}: The @code{$STY}
Xenvironment variable still reflects the old name. This may result in
Xconfusion.  The default is constructed from the tty and host names.
X@end deffn
X
X@node Suspend, Quit, Session Name, Session Management
X@section Suspend
X@kindex z
X@kindex C-z
X@deffn Command suspend
X(@kbd{C-a z}, @kbd{C-a C-z})@*
XSuspend @code{screen}.  The windows are in the detached state while
X@code{screen} is suspended.  This feature relies on the parent shell
Xbeing able to do job control.
X@end deffn
X
X@node Quit,  , Suspend, Session Management
X@section Quit
X@kindex C-\
X@deffn Command quit
X(@kbd{C-a C-\})@*
XKill all windows and terminate @code{screen}.  Note that on vt100-style
Xterminals the keys @kbd{C-4} and @kbd{C-\} are identical.  So be careful
Xnot to type @kbd{C-a C-4} when selecting window no. 4.  Use the empty
Xbind command (as in @code{bind "^\"}) to remove a key binding
X(@pxref{Key Binding}).
X@end deffn
X
X@node Window Settings, Virtual Terminal, Session Management, Top
X@chapter Window Settings
X
XThese commands control the way @code{screen} treats individual windows
Xin a session.  @xref{Virtual Terminal}, for comands to control the
Xterminal emulation itself.
X
X@menu
X* Also Known As::               Control the name of the window
X* Autonuke::			Flush unseen output
X* Console::			See the host's console messages
X* Kill::                        Destroy an unwanted window
X* Login::                       Control @file{/etc/utmp} logging
X* Mode::                        Control the file mode of the pty
X* Monitor::                     Watch for activity in a window
X* Obuflimit::			Allow pending output when reading more
X* Windows::                     List the active windows
X@end menu
X
X@node Also Known As, Autonuke,  , Window Settings
X@section Also Known As (A.K.A.s)
X@cindex a.k.a
X
XYou can customize each window's name in the window display (viewed with
Xthe @code{windows} command (@pxref{Windows}) by setting it with
Xone of the a.k.a. commands.  Normally the name displayed is the actual
Xcommand name of the program created in the window.  However, it is
Xsometimes useful to distinguish various programs of the same name or to
Xchange the name on-the-fly to reflect the current state of the window.
X
XThe default name for all shell windows can be set with the
X@code{shellaka} command (@pxref{Shell}).  You can specify the name you
Xwant for a window with the @samp{-t} option to the @code{screen} command
Xwhen the window is created (@pxref{Screen Command}).  To change the name after
Xthe window has been created you can use the AKA-string escape-sequence
X(@kbd{@key{ESC} k @var{name} @key{ESC} \}) and the @code{aka} command
X(C-a A).  The former can be output from an application to control the
Xwindow's name under software control, and the latter will prompt for a
Xname when typed.  You can also bind predefined names to keys with the
X@code{aka} command to set things quickly without prompting.
X
X@menu
X* AKA Command::                 The @code{aka} command.
X* Dynamic AKAs::                Make shell windows change AKAs dynamically.
X* AKA Prompts::                 Set up your shell prompt for dynamic AKAs.
X* AKA Screenrc::                Set up AKAs in your @file{.screenrc}.
X@end menu
X
X@node AKA Command, Dynamic AKAs,  , Also Known As
X@subsection AKA Command
X@kindex A
X@deffn Command aka [windowalias]
X(@kbd{C-a A})@*
XSet the name of the current window to @var{windowalias}. If no name is 
Xspecified, screen prompts for one.
X@end deffn
X
X@node Dynamic AKAs, AKA Prompts, AKA Command, Also Known As
X@subsection Dynamic AKAs
X@code{screen} has a shell-specific heuristic that is enabled by
Xsetting the window's name to @var{search|name} and arranging to have a
Xnull aka escape-sequence output as a part of your prompt.  The
X@var{search} portion specifies an end-of-prompt search string, while the
X@var{name} portion specifies the default shell name for the window.  If
Xthe @var{name} ends in a @samp{:} @code{screen} will add what it
Xbelieves to be the current command running in the window to the end of
Xthe specified name (e.g. @var{name:cmd}).  Otherwise the current
Xcommand name supersedes the shell name while it is running.
X
XHere's how it works: you must modify your shell prompt to output a null
Xaka escape-sequence (@key{ESC} k @key{ESC} \) as a part of your prompt.
XThe last part of your prompt must be the same as the string you
Xspecified for the @var{search} portion of the a.k.a.  Once this is set
Xup, @code{screen} will use the aka escape-sequence to clear the previous
Xcommand name and get ready for the next command.  Then, when a newline
Xis received from the shell, a search is made for the end of the prompt.
XIf found, it will grab the first word after the matched string and use
Xit as the command name.  If the command name begins with @samp{!},
X@samp{%}, or @samp{^}, @code{screen} will use the first word on the
Xfollowing line (if found) in preference to the just-found name.  This
Xhelps csh users get more accurate AKA's when using job control or
Xhistory recall commands.
X
X@node AKA Prompts, AKA Screenrc, Dynamic AKAs, Also Known As
X@subsection Setting up your prompt for shell AKA's
XOne thing to keep in mind when adding a null aka escape-sequence to your
Xprompt is that some shells (like the csh) count all the non-control
Xcharacters as part of the prompt's length.  If these invisible
Xcharacters aren't a multiple of 8 then backspacing over a tab will
Xresult in an incorrect display.  One way to get around this is to use a
Xprompt like this:
X
X@example
Xset prompt='@value{esc}[0000m@value{esc}k@value{esc}\% '
X@end example
X
XThe escape-sequence @samp{@value{esc}[0000m} not only normalizes the
Xcharacter attributes, but all the zeros round the length of the
Xinvisible characters up to 8.
X
XTcsh handles escape codes in the prompt more intelligently, so you can
Xspecify your prompt like this:
X
X@example
Xset prompt="%@{\ek\e\\%@}\% "
X@end example
X
XBash users will probably want to echo the escape sequence in the
XPROMPT_COMMAND:
X
X@example
XPROMPT_COMMAND='echo -n -e "\033k\033\134"'
X@end example
X
X(I used @samp{\134} to output a @samp{\} because of a bug in v1.04).
X
X@node AKA Screenrc,  , AKA Prompts, Also Known As
X@subsection Setting up shell AKAs in your @file{.screenrc}
XHere are some .screenrc examples:
X
X@example
Xscreen -t top 2 nice top
X@end example
X
XAdding this line to your .screenrc would start a niced version of the
X@code{top} command in window 2 name @samp{top} rather than @samp{nice}.
X
X@example
Xshellaka '> |csh'
Xscreen 1
X@end example
X
XThis file would start a shell using the given shellaka.  The a.k.a.
Xspecified is an auto-aka that would expect the prompt and the typed
Xcommand to look something like the following:
X
X@example
X/usr/joe/src/dir> trn
X@end example
X
X(it looks after the '> ' for the command name).
XThe window status would show the name @samp{trn} while the command was
Xrunning, and revert to @samp{csh} upon completion.
X
X@example
Xbind R screen -t '% |root:' su
X@end example
X
XHaving this command in your .screenrc would bind the key sequence
X@kbd{C-a R} to the @code{su} command and give it an auto-aka name of
X@samp{root:}.  For this auto-aka to work, the screen could look
Xsomething like this:
X
X@example
X% !em
Xemacs file.c
X@end example
X
XHere the user typed the csh history command @code{!em} which ran the
Xpreviously entered @code{emacs} command.  The window status would show
X@samp{root:emacs} during the execution of the command, and revert to
Xsimply @samp{root:} at its completion.
X
X@example
Xbind o aka
Xbind E aka ""
Xbind u aka (unknown)
X@end example
X
XThe first binding doesn't have any arguments, so it would prompt you for
Xan a.k.a. when you type @kbd{C-a o}.  The second binding would clear an
Xauto-aka's current setting (C-a E).  The third binding would set the
Xcurrent window's a.k.a. to @samp{(unknown)} (C-a u).
X
X@node Autonuke, Console, Also Known As, Window Settings
X@section Autonuke
X@deffn Command autonuke @var{state}
X(none)@*
XSets whether a clear screen sequence should nuke all the output
Xthat has not been written to the terminal. @xref{Obuflimit}.
X@end deffn
X
X@deffn Command defautonuke @var{state}
X(none)@*
XSame as the @code{autonuke} command except that the default setting for
Xnew displays is changed. Initial setting is @code{off}. 
XNote that you can use the special @code{AN} terminal capability if you
Xwant to have a terminal type dependant setting.
X@end deffn
X
X@node Console, Kill, Autonuke, Window Settings
X@section Console
X@deffn Command console @var{[state]}
X(none)@*
XGrabs or ungrabs the machines console output to a window. When the argument
Xis ommitted the current state is displayed.
X@end deffn
X
X@node Kill, Login, Console, Window Settings
X@section Kill
X
X@kindex k
X@kindex C-k
X@deffn Command kill
X(@kbd{C-a k}, @kbd{C-a C-k})@*
XKill the current window.@*
XIf there is an @code{exec} command running (@pxref{Exec}) then it is killed.
XOtherwise the process (e.g. shell) running in the window receives a 
X@code{HANGUP} condition, 
Xthe window structure is removed and screen switches to the previously 
Xdisplayed window. When the last window is destroyed, @code{screen} exits.
X@* 
X@emph{Caution}: @code{emacs} users may find themselves killing their
X@code{emacs} session when trying to delete the current line.  For this
Xreason, it is probably wise to use a different command character
X(@pxref{Command Character}) or rebind @code{kill} to another key
Xsequence, such as @kbd{C-a K} (@pxref{Key Binding}).
X@end deffn
X
X@node Login, Mode, Kill, Window Settings
X@section Login
X
X@deffn Command deflogin state
X(none)@*
XSame as the @code{login} command except that the default setting for new
Xwindows is changed.  This defaults to `on' unless otherwise specified at
Xcompile time (@pxref{Installation}).
X@end deffn
X
X@kindex L
X@deffn Command login [state]
X(@kbd{C-a L})@*
XAdds or removes the entry in @file{/etc/utmp} for the current window.
XThis controls whether or not the window is @dfn{logged in}.  In addition
Xto this toggle, it is convenient to have ``log in'' and ``log out''
Xkeys.  For instance, @code{bind I login on} and @code{bind O 
Xlogin off} will map these keys to be @kbd{C-a I} and @kbd{C-a O}
X(@pxref{Key Binding}).
X@end deffn
X
X@node Mode, Monitor, Login, Window Settings
X@section Mode
X@deffn Command defmode mode
X(none)@*
XThe mode of each newly allocated pseudo-tty is set to @var{mode}.
X@var{mode} is an octal number as used by chmod(1).  Defaults to 0622 for
Xwindows which are logged in, 0600 for others (e.g. when @code{-ln} was 
Xspecified for creation. @pxref{Screen Command}).
X@end deffn
X
X@node Monitor, Obuflimit, Mode, Window Settings
X@section Monitoring
X
X@deffn Command activity message
X(none)@*
XWhen any activity occurs in a background window that is being monitored,
X@code{screen} displays a notification in the message line.  The
Xnotification message can be redefined by means of the @code{activity}
Xcommand.  Each occurrence of @samp{%} in @var{message} is replaced by
Xthe number of the window in which activity has occurred, and each
Xoccurrence of @samp{~} is replaced by the definition for bell in your
Xtermcap (usually an audible bell).  The default message is
X
X@example
X'Activity in window %'
X@end example
X
XNote that monitoring is off for all windows by default, but can be altered
Xby use of the @code{monitor} command (@kbd{C-a M}).
X@end deffn
X
X@deffn Command defmonitor state
X(none)@*
XSame as the @code{monitor} command except that the default setting for
Xnew windows is changed.  Initial setting is `off'.
X@end deffn
X
X@kindex M
X@deffn Command monitor [state]
X(@kbd{C-a M})@*
XToggles monitoring of the current window.  When monitoring is turned on
Xand the affected window is switched into the background, the activity
Xnotification message will be displayed in the status line at the first
Xsign of output, and the window will also be marked with an @samp{@@} in
Xthe window-status display (@pxref{Windows}).  Monitoring defaults to
X@samp{off} for all windows.
X@end deffn
X
X@node Obuflimit, Windows, Monitor, Window Settings
X@section Obuflimit
X@deffn Command obuflimit @var{[limit]}
X(none)@*
XIf the output buffer contains more bytes than the specified limit, no
Xmore data will be read from the windows. The default value is 256. If
Xyou have a fast display (like @code{xterm}), you can set it to some 
Xhigher value. If no argument is specified, the current setting is displayed.
X@end deffn
X
X@deffn Command defobuflimit @var{limit}
X(none)@*
XSame as the @code{obuflimit} command except that the default setting for new
Xdisplays is changed. Initial setting is 256 bytes. Note that you can use
Xthe special @code{OL} terminal capability if you want to have a terminal
Xtype dependant limit.
X@end deffn
X
X@node Windows,  , Obuflimit, Window Settings
X@section Windows
X@kindex w
X@kindex C-w
X@deffn Command windows
X(@kbd{C-a w}, @kbd{C-a C-w})@*
XUses the message line to display a list of all the windows.  Each
Xwindow is listed by number with the name of the program running in the
Xwindow (or its a.k.a.); the current window is marked with a @samp{*};
Xthe previous window is marked with a @samp{-}; all the windows that are
Xlogged in are marked with a @samp{$} (@pxref{Login}); a background
Xwindow that has received a bell is marked with a @samp{!}; a background
Xwindow that is being monitored and has had activity occur is marked with
Xan @samp{@@} (@pxref{Monitor}); a window which has output logging turned
Xon is marked with @samp{(L)}.
X@end deffn
X
X@node Virtual Terminal, Copy and Paste, Window Settings, Top
X@chapter Virtual Terminal
X
XEach window in a @code{screen} session emulates a VT100 terminal, with
Xsome extra functions added.  The commands described here modify the
Xterminal emulation.
X
X@menu
X* Control Sequences::           Details of the internal VT100 emulation.
X* Bell::                        Getting your attention.
X* Clear::                       Clear the window display.
X* Height::			Changing the height of your terminal.
X* Info::                        Terminal emulation statistics.
X* Redisplay::                   When the display gets confusing.
X* Wrap::                        Automatic margins.
X* Reset::                       Recovering from ill-behaved applications.
X* Width::                       Changing the width of your terminal.
X@end menu
X
X@node Control Sequences, Bell,  , Virtual Terminal
X@section Control Sequences
X@cindex control sequences
XThe following is a list of control sequences recognized by
X@code{screen}.  @samp{(V)} and @samp{(A)} indicate VT100-specific and
XANSI- or ISO-specific functions, respectively.
X
X@example
XESC E                           Next Line
XESC D                           Index
XESC M                           Reverse Index
XESC H                           Horizontal Tab Set
XESC Z                           Send VT100 Identification String
XESC 7                   (V)     Save Cursor and Attributes
XESC 8                   (V)     Restore Cursor and Attributes
XESC [s                  (A)     Save Cursor and Attributes
XESC [u                  (A)     Restore Cursor and Attributes
XESC c                           Reset to Initial State
XESC =                   (V)     Application Keypad Mode
XESC >                   (V)     Numeric Keypad Mode
XESC # 8                 (V)     Fill Screen with E's
XESC \                   (A)     String Terminator
XESC ^                   (A)     Privacy Message String (Message Line)
XESC !                           Global Message String (Message Line)
XESC k                           A.k.a. Definition String
XESC P                   (A)     Device Control String
X                                Outputs a string directly to the host
X                                terminal without interpretation.
XESC _                   (A)     Application Program Command (not used)
XESC ]                   (A)     Operating System Command (not used)
XControl-N               (A)     Lock Shift G1 (SO)
XControl-O               (A)     Lock Shift G0 (SI)
XESC n                   (A)     Lock Shift G2
XESC o                   (A)     Lock Shift G3
XESC N                   (A)     Single Shift G2
XESC O                   (A)     Single Shift G3
XESC ( Pcs               (A)     Designate character set as G0
XESC ) Pcs               (A)     Designate character set as G1
XESC * Pcs               (A)     Designate character set as G2
XESC + Pcs               (A)     Designate character set as G3
XESC [ Pn ; Pn H                 Direct Cursor Addressing
XESC [ Pn ; Pn f                 Direct Cursor Addressing
XESC [ Pn J                      Erase in Display
X      Pn = None or 0            From Cursor to End of Screen
X           1                    From Beginning of Screen to Cursor
X           2                    Entire Screen
XESC [ Pn K                      Erase in Line
X      Pn = None or 0            From Cursor to End of Line
X           1                    From Beginning of Line to Cursor
X           2                    Entire Line
XESC [ Pn A                      Cursor Up
XESC [ Pn B                      Cursor Down
XESC [ Pn C                      Cursor Right
XESC [ Pn D                      Cursor Left
XESC [ Ps ;...; Ps m             Select Graphic Rendition
X      Ps = None or 0            Default Rendition
X           1                    Bold
X           2            (A)     Faint
X           3            (A)     @i{Standout} Mode (ANSI: Italicized)
X           4                    Underlined
X           5                    Blinking
X           7                    Negative Image
X           22           (A)     Normal Intensity
X           23           (A)     @i{Standout} Mode off (ANSI: Italicized off)
X           24           (A)     Not Underlined
X           25           (A)     Not Blinking
X           27           (A)     Positive Image
XESC [ Pn g                      Tab Clear
X      Pn = None or 0            Clear Tab at Current Position
X           3                    Clear All Tabs
XESC [ Pn ; Pn r         (V)     Set Scrolling Region
XESC [ Pn I              (A)     Horizontal Tab
XESC [ Pn Z              (A)     Backward Tab
XESC [ Pn L              (A)     Insert Line
XESC [ Pn M              (A)     Delete Line
XESC [ Pn @@              (A)     Insert Character
XESC [ Pn P              (A)     Delete Character
XESC [ Ps ;...; Ps h             Set Mode
XESC [ Ps ;...; Ps l             Reset Mode
X      Ps = 4            (A)     Insert Mode
X           ?1           (V)     Application Cursor Keys
X           ?3           (V)     Change Terminal Width to 132 columns
X           ?5           (V)     Visible Bell (@samp{On} followed by @samp{Off})
X           ?6           (V)     @samp{Origin} Mode
X           ?7           (V)     @samp{Wrap} Mode
XESC [ 5 i               (A)     Start relay to printer (ANSI Media Copy)
XESC [ 4 i               (A)     Stop relay to printer (ANSI Media Copy)
XESC [ 8 ; Ph ; Pw t             Resize the window to @samp{Ph} lines and
X                                @samp{Pw} columns (SunView special)
XESC [ c                         Send VT100 Identification String
XESC [ 6 n                       Send Cursor Position Report
X@end example
X
X@node Bell, Clear, Control Sequences, Virtual Terminal
X@section Bell
X
X@deffn Command bell message
X(none)@*
XWhen a bell character is sent to a background window, @code{screen}
Xdisplays a notification in the message line.  The notification message
Xcan be re-defined by means of the @code{bell} command.  Each occurrence
Xof @samp{%} in @var{message} is replaced by the number of the window to
Xwhich a bell has been sent, and each occurrence of @samp{~} is replaced
Xby the definition for bell in your termcap (usually an audible bell).
XThe default message is
X
X@example
X'Bell in window %'
X@end example
X
XAn empty message can be supplied to the @code{bell} command to suppress
Xoutput of a message line (@code{bell ""}).
X@end deffn
X
X@kindex C-g
X@deffn Command vbell [state]
X(@kbd{C-a C-g})@*
XSets or toggles the visual bell setting for the current window. If your
Xterminal does not support a visual bell, the visual bell message is
Xdisplayed in the status line.  @xref{Bell, , Visual Bell, termcap, The
XTermcap Manual}, for more information on visual bells.  The equivalent
Xterminfo capability is @code{flash}.
X@end deffn
X
X@deffn Command vbell_msg message
X(none)@*
XSets the visual bell message. @var{message} is printed to the status
Xline if the window receives a bell character (^G) and @code{vbell} is
Xset to @samp{on}.  The default message is @samp{Wuff, Wuff!!}.
X@end deffn
X
X@deffn Command vbellwait sec
X(none)@*
XDefine a delay in seconds after each display of @code{screen} 's visual
Xbell message. The default is 1 second.
X@end deffn
X
X@node Clear, Height, Bell, Virtual Terminal
X@section Clear
X@kindex C
X@deffn Command clear
X(@kbd{C-a C})@*
XClears the screen and saves its contents to the scrollback buffer.
X@end deffn
X
X@node Height, Info, Clear, Virtual Terminal
X@section Height
X@deffn Command height @var{[lines]}
X(none)@*
XSet the display height to a specified number of lines. When no
Xargument is given it toggles between 24 and 42 lines display.
X@end deffn
X
X@node Info, Redisplay, Height, Virtual Terminal
X@section Info
X@kindex i
X@kindex C-i
X@deffn Command info
X(@kbd{C-a i}, @kbd{C-a C-i})@*
XUses the message line to display some information about the current
Xwindow: the cursor position in the form @samp{(@var{column},@var{row})}
Xstarting with @samp{(1,1)}, the terminal width and height plus the size
Xof the scrollback buffer in lines, like in @samp{(80,24)+50}, various
Xflag settings (flow-control, insert mode, origin mode, wrap mode,
Xapplication-keypad mode, output logging, activity monitoring, and redraw
X(@samp{+} indicates enabled, @samp{-} not)), the currently active
Xcharacter set (@samp{G0}, @samp{G1}, @samp{G2}, or @samp{G3}), and in
Xsquare brackets the terminal character sets that are currently
Xdesignated as @samp{G0} through @samp{G3}.  For system information use
X@code{time}.
X@end deffn
X
X@node Redisplay, Wrap, Info, Virtual Terminal
X@section Redisplay
X
X@deffn Command allpartial state
X(none)@*
XIf set to on, only the current cursor line is refreshed on window change.
XThis affects all windows and is useful for slow terminal lines. The 
Xprevious setting of full/partial refresh for each window is restored
Xwith @code{allpartial off}.
X@end deffn
X
X@deffn Command partial state
X(none)@*
XDefines whether the display should be refreshed (as with
X@code{redisplay}) after switching to the current window. This command
Xonly affects the current window.  To affect all windows use the
X@code{allpartial} command.  Default is @samp{off}, of course.
X@end deffn
X
X@kindex l
X@kindex C-l
X@deffn Command redisplay
X(@kbd{C-a l}, @kbd{C-a C-l})@*
XRedisplay the current window.  Needed to get a full redisplay in
Xpartial redraw mode.
X@end deffn
X
X@node Wrap, Reset, Redisplay, Virtual Terminal
X@section Wrap
X
X@kindex r
X@kindex C-r
X@deffn Command wrap state
X(@kbd{C-a r}, @kbd{C-a C-r}) @*
XSets the line-wrap setting for the current window.  When line-wrap is
Xon, the second consecutive printable character output at the last column
Xof a line will wrap to the start of the following line.  As an added
Xfeature, backspace (^H) will also wrap through the left margin to the
Xprevious line.  Default is @samp{on}.
X@end deffn
X
X@deffn Command defwrap state
X(none) @*
XSame as the @code{wrap} command except that the default setting for new 
Xwindows is changed. Initially line-wrap is on and can be toggled with the 
X@code{wrap} command (@kbd{C-a r}) or by means of "C-a : wrap on|off".
X@end deffn
X
X@node Reset, Width, Wrap, Virtual Terminal
X@section Reset
X@kindex Z
X@deffn Command reset
X(@kbd{C-a Z})@*
XReset the virtual terminal to its ``power-on'' values. Useful when strange
Xsettings (like scroll regions or graphics character set) are left over from
Xan application.
X@end deffn
X
X@node Width,  , Reset, Virtual Terminal
X@section Width
X@kindex W
X@deffn Command width [num]
X(@kbd{C-a W})@*
XToggle the window width between 80 and 132 columns, or set it to
X@var{num} columns if an argument is specified.  This requires a
Xcapable terminal and the termcap entries @samp{Z0} and @samp{Z1}.  See
Xthe @code{termcap} command (@pxref{Termcap}), for more information.
X@end deffn
X
X@node Copy and Paste, Subprocess Execution, Virtual Terminal, Top
X@chapter Copy and Paste
X@cindex copy and paste
X
XFor those confined to a hardware terminal, these commands provide a cut
Xand paste facility more powerful than those provided by most windowing
Xsystems.
X
X@menu
X* Copy::                        Copy from scrollback to buffer
X* Paste::                       Paste from buffer into window
X* Registers::                   Longer-term storage
X* Screen-Exchange::             Sharing data between screen users
X* History::                     Recalling previous input
X@end menu
X
X@node Copy, Paste,  , Copy and Paste
X@section Copying
X@cindex marking
X@cindex scrollback
X@kindex [
X@kindex C-[
X@kindex ESC
X@deffn Command copy
X(@kbd{C-a [}, @kbd{C-a C-[}, @kbd{C-a @key{ESC}})@*
XEnter copy/scrollback mode. This allows you to copy text from the
Xcurrent window and its history into the paste buffer. In this mode a
X@code{vi}-like full screen editor is active, with controls as
Xoutlined below.
X@end deffn
X
X@menu
X* Line Termination::            End copied lines with CR/LF
X* Scrollback::                  Set the size of the scrollback buffer
X* Copy Mode Keys::              Remap keys in copy mode
X* Movement::                    Move around in the scrollback buffer
X* Marking::                     Select the text you want
X* Repeat count::                Repeat a command
X* Searching::                   Find the text you want
X* Specials::                    Other random keys
X@end menu
X
X@node Line Termination, Scrollback,  , Copy
X@subsection CR/LF
X@deffn Command crlf state
X(none)@*
XThis affects the copying of text regions with the @kbd{C-a [} command.
XIf it is set to @samp{on}, lines will be separated by the two character
Xsequence @samp{CR}/@samp{LF}.  Otherwise only @samp{LF} is used.
X@code{crlf} is off by default.
X@end deffn
X
X@node Scrollback, Copy Mode Keys, Line Termination, Copy
X@subsection Scrollback
X@deffn Command defscrollback num
X(none)@*
XSame as the @code{scrollback} command except that the default setting
Xfor new windows is changed.  Defaults to 100.
X@end deffn
X
X@deffn Command scrollback num
X(none)@*
XSet the size of the scrollback buffer for new windows to @var{num}
Xlines.  The default scrollback is 100 lines.  Use @kbd{C-a i} to view
Xthe current setting.
X@end deffn
X
X@node Copy Mode Keys, Movement, Scrollback, Copy
X@subsection markkeys
X@deffn Command markkeys string
X(none)@*
XThis is a method of changing the keymap used for copy/history mode.  The
Xstring is made up of @var{oldchar}=@var{newchar} pairs which are
Xseparated by @samp{:}. Example: The command @code{markkeys
Xh=^B:l=^F:$=^E} would set some keys to be more familiar to @code{emacs}
Xusers.
X@end deffn
X
X@node Movement, Marking, Copy Mode Keys, Copy
X@subsection Movement Keys
X
X@noindent
X@kbd{h}, @kbd{j}, @kbd{k}, @kbd{l} move the cursor line by line or
Xcolumn by column.
X
X@noindent
X@kbd{0}, @kbd{^} and @kbd{$} move to the leftmost column or to the first
Xor last non-whitespace character on the line.
X
X@noindent
X@kbd{H}, @kbd{M} and @kbd{L} move the cursor to the leftmost column
Xof the top, center or bottom line of the window. 
X
X@noindent
X@kbd{+} and @kbd{-} move the cursor to the leftmost column of the next
Xor previous line.
X
X@noindent
X@kbd{G} moves to the specified absolute line (default: end of buffer).
X 
X@noindent
X@kbd{|} moves to the specified absolute column.
X
X@noindent
X@kbd{w}, @kbd{b}, @kbd{e} move the cursor word by word.
X 
X@noindent
X@kbd{C-u} and @kbd{C-d} scroll the display up/down by the specified
Xamount of lines while preserving the cursor position. (Default: half
Xscreenfull).
X
X@noindent
X@kbd{C-b} and @kbd{C-f} move the cursor up/down a full screen.
X
X@noindent
X@kbd{g} moves to the beginning of the buffer.
X
X@noindent
X@kbd{%} jumps to the specified percentage of the buffer.
X
XNote that Emacs-style movement keys can be specified by a .screenrc
Xcommand. (@code{markkeys "h=^B:l=^F:$=^E"}) There is no simple method for
Xa full emacs-style keymap, however, as this involves multi-character codes.
X
X@node Marking, Repeat count, Movement, Copy
X@subsection Marking
X
XThe copy range is specified by setting two marks. The text between these
Xmarks will be highlighted. Press @kbd{space} to set the first or second
Xmark respectively.
X
X@noindent
X@kbd{Y} and @kbd{y} can be used to mark one whole line or to mark from 
Xstart of line.
X
X@noindent
X@kbd{W} marks exactly one word. 
X 
X@node Repeat count, Searching, Marking, Copy
X@subsection Repeat Count
X
XAny command in copy mode can be prefixed with a number (by pressing
Xdigits @kbd{0@dots{}9}) which is taken as a repeat count. Example:
X@kbd{C-a C-[ H 10 j 5 Y} will copy lines 11 to 15 into the pastebuffer.
X
X@node Searching, Specials, Repeat count, Copy
X@subsection Searching
X
X@noindent
X@kbd{/} @code{vi}-like search forward.
X
X@noindent
X@kbd{?} @code{vi}-like search backward.
X
X@noindent
X@kbd{C-a s} @code{emacs} style incremental search forward.
X
X@noindent
X@kbd{C-r} @code{emacs} style reverse i-search.
X
X@node Specials,  , Searching, Copy
X@subsection Specials
X
XThere are, however, some keys that act differently here from in
X@code{vi}.  @code{Vi} does not allow to yank rectangular blocks of text,
Xbut @code{screen} does. Press
X
X@noindent
X@kbd{c} or @kbd{C} to set the left or right margin respectively. If no
Xrepeat count is given, both default to the current cursor position.@*
XExample: Try this on a rather full text screen: 
X@kbd{C-a [ M 20 l SPACE c 10 l 5 j C SPACE}.
X
X@noindent
XThis moves one to the middle line of the screen, moves in 20 columns left,
Xmarks the beginning of the copybuffer, sets the left column, moves 5 columns
Xdown, sets the right column, and then marks the end of
Xthe copybuffer. Now try:@*
X@kbd{C-a [ M 20 l SPACE 10 l 5 j SPACE}
X
X@noindent
Xand notice the difference in the amount of text copied.
X
X@noindent
X@kbd{J} joins lines. It toggles between 3 modes: lines separated by a
Xnewline character (012), lines glued seamless, or lines separated by a
Xsingle space. Note that you can prepend the newline character with
Xa carriage return character, by issuing a @code{set crlf on}.
X
X@noindent
X@kbd{v} is for all the @code{vi} users who use @code{:set numbers} - it
Xtoggles the left margin between column 9 and 1.
X
X@noindent
X@kbd{a} before the final space key turns on append mode. Thus
Xthe contents of the pastebuffer will not be overwritten, but appended to.
X
X@noindent
X@kbd{A} turns on append mode and sets a (second) mark.
X
X@noindent
X@kbd{>} sets the (second) mark and writes the contents of the copybuffer
Xto the screen-exchange file (@file{/tmp/screen-exchange} per default)
Xonce copy-mode is finished.  @xref{Screen-Exchange}.@*
XThis example demonstrates how to dump the
Xwhole scrollback buffer to that file: @*@kbd{C-a [ g SPACE G $ >}.
X
X@noindent
X@kbd{C-g} gives information about the current line and column.
X
X@noindent
X@kbd{@@} does nothing.  Absolutely nothing.  Does not even exit copy
Xmode.
X
X@node Paste, Registers, Copy, Copy and Paste
X@section Paste
X
X@kindex ]
X@kindex C-]
X@deffn Command paste
X(@kbd{C-a ]}, @kbd{C-a C-]})@*
XWrite the contents of the paste buffer to the stdin stream of the
Xcurrent window.  The paste buffer can be filled with the @code{copy},
X@code{history} and @code{readbuf} commands.
X@end deffn
X
X@deffn Command slowpaste msec
X(none)@*
XDefine the speed text is inserted by the @code{paste} command.
XFor each 80 characters (IOSIZE) pasted, @code{screen} will pause for
X@var{msec} milliseconds to allow the application to process the
Xinput. Use @code{slowpaste} if your underlying system chokes on large
Xpastes (i.e. a VAX).
X@end deffn
X
X@node Registers, Screen-Exchange, Paste, Copy and Paste
X@section Registers
X
X@deffn Command copy_reg [key]
X(none)@*
XStore the current copybuffer contents in a register referenced by @var{key}.
XIf the name is omitted you will be prompted to press the key.
X@end deffn
X
X@deffn Command ins_reg [key]
X(none)@*
XPaste contents of register @var{key} into the current window's input
Xstream.
X@end deffn
X
X@deffn Command process [key]
X(none)@*
XStuff the contents of the specified register into the @code{screen}
Xinput queue. If no argument is given you are prompted for a
Xregister name. This command can be used to bind multiple actions
Xto a single key.
X@end deffn
X
X@deffn Command register key string
X(none)@*
XSave the specified @var{string} to the register @var{key}.
X@end deffn
X
X@node Screen-Exchange, History, Registers, Copy and Paste
X@section Screen-Exchange
X
X@deffn Command bufferfile [exchange-file]
X(none)@*
XChange the filename used for reading and writing with the copybuffer.
XIf the @var{exchange-file} parameter is omitted, @code{screen} reverts
Xto the default of @file{/tmp/screen-exchange}.  The following example
Xwill paste the system's password file into the screen window:
X
X@example
XC-a : bufferfile /etc/passwd
XC-a < C-a ]
X@end example
X@end deffn
X
X@kindex <
X@deffn Command readbuf
X(@kbd{C-a <})@*
XReads the contents of the current screen-exchange file into the copy buffer. 
X@end deffn
X
X@kindex =
X@deffn Command removebuf
X(@kbd{C-a =})@*
XUnlinks the screen-exchange file.
X@end deffn
X
X@kindex >
X@deffn Command writebuf
X(@kbd{C-a >})@*
XWrites the contents of the paste buffer to a public accessible
Xscreen-exchange file. This is thought of as a primitive means of
Xcommunication between @code{screen} users on the same host. See also
X@kbd{C-a @key{ESC}} (@pxref{Copy}).
X@end deffn
X
X@node History,  , Screen-Exchange, Copy and Paste
X@section History
X
X@kindex @{
X@deffn Command history
X(@kbd{C-a @{})@*
XUsually users work with a shell that allows easy access to previous
Xcommands.  For example, @code{csh} has the command @code{!!} to repeat
Xthe last command executed.  @code{screen} provides a primitive way of
Xrecalling ``the command that started @dots{}'': You just type the first
Xletter of that command, then hit @kbd{C-a @{} and @code{screen} tries to
Xfind a previous line that matches with the prompt character to the left
Xof the cursor. This line is pasted into this window's input queue.  Thus
Xyou have a crude command history (made up by the visible window and its
Xscrollback buffer).
X@end deffn
X
X@node Subprocess Execution, Key Binding, Copy and Paste, Top
X@chapter Subprocess Execution
XControl Input or Output of a window by another filter process.
XUse with care!
X
X@menu
X* Exec::                        The @code{exec} command syntax.
X* Using Exec::                  Weird things that filters can do.
X@end menu
X
X@node Exec, Using Exec,  , Subprocess Execution
X@section Exec
X@deffn Command exec @var{[[fdpat] newcommand [args ... ]]}
X(none)@*
XRun a unix subprocess (specified by an executable path @var{newcommand} and 
Xits optional arguments) in the current window. The flow of data between
Xnewcommands stdin/stdout/stderr, the process already running (shell) and 
Xscreen itself (window) is controlled by the filedescriptor pattern @var{fdpat}.
XThis pattern is basically a three character sequence representing stdin, stdout
Xand stderr of newcommand. A dot (@code{.}) connects the file descriptor
Xto screen. An exclamation mark (@code{!}) causes the file descriptor to be
Xconnected to the already running process. A colon (@code{:}) combines both.
X@*
XUser input will go to newcommand unless newcommand requests the old process'
Xoutput (@var{fdpat}s first character is @samp{!} or @samp{:}) or a pipe symbol
X(@samp{|}) is added to the end of @var{fdpat}.
X@*
XInvoking @code{exec} without arguments shows name and arguments of the currently
Xrunning subprocess in this window.
X@*
XWhen a subprocess is running the @code{kill} command will affect it instead of 
Xthe windows process.
X@*
XRefer to the postscript file @file{doc/fdpat.ps} for illustration of all 21 
Xpossible combinations. Each drawing shows the numbers 210 representing the three
Xfile descriptors of newcommand. The box marked `W' is usual pty that has 
Xthe old process (shell) on its slave side. The box marked `P' is the 
Xsecondary pty that now has screen at its master side.
X@end deffn
X
X@node Using Exec,  , Exec, Subprocess Execution
X@section Using Exec
X@noindent 
XAbbreviations:
X
X@itemize @bullet
X@item
XWhitespace between the word @samp{exec} and @var{fdpat} and the command name
Xcan be omitted. 
X
X@item
XTrailing dots and a @var{fdpat} consisting only of dots can be omitted. 
X
X@item 
XA simple @samp{|} is synonymous for the @samp{!..|} pattern.
X
X@item
XThe word @samp{exec} can be ommitted when the @samp{|} abbreviation is used.
X
X@item
XThe word @samp{exec} can always be replaced by leading @samp{!}.
X@end itemize
X
X@noindent 
XExamples:
X
X@table @code
X@item !/bin/sh
X@itemx exec /bin/sh
X@itemx exec ... /bin/sh
XCreates another shell in the same window, while the orignal shell is still 
Xrunning. Output of both shells is displayed and user input is sent to the new
X@file{/bin/sh}.
X
X@item !!stty 19200
X@itemx exec!stty 19200
X@itemx exec !.. stty 19200
XSet the speed of the windows tty. If your stty command operates on stdout, then
Xadd another @samp{!}. This is a useful command, when a screen window is 
Xdirectly connected to a serial line that needs to be configured.
X
X@item |less
X@itemx exec !..| less
XThis adds a pager to the window output. The special character @samp{|} is 
Xneeded to give the user control over the pager although it gets its input from 
Xthe windows process. This works, because @samp{less} listens on stderr 
X(a behavior that @code{screen} would not expect without the @samp{|}) 
Xwhen its stdin is not a tty.
X
X@item !:sed -n s/.*Error.*/\007/p
XSends window output to both, the user and the sed command. The sed inserts an
Xadditional bell character (oct. 007) to the window output seen by screen.
XThis will cause 'Bell in window x' messages, whenever the string @samp{Error}
Xappears in the window.
X@end table
X
X@node Key Binding, Flow Control, Subprocess Execution, Top
X@chapter Key Binding
X@cindex key binding
X@cindex binding
X
XYou may disagree with some of the default bindings (I know I do).  The
X@code{bind} command allows you to redefine them to suit your
Xpreferences.
X
X@menu
X* Bind::                        @code{bind} syntax.
X* Bind Examples::               Using @code{bind}.
X* Command Character::           The character used to start keyboard commands.
X* Help::                        Show current key bindings.
X@end menu
X
X@node Bind, Bind Examples,  , Key Binding
X@section The @code{bind} command
X@deffn Command bind key [command [args]]
X(none)@*
XBind a command to a key.  The @var{key} argument is either a single
Xcharacter, a two-character sequence of the form @samp{^x} (meaning
X@kbd{C-x}), a backslash followed by an octal number (specifying the
XASCII code of the character), or a backslash followed by a second
Xcharacter, such as @samp{\^} or @samp{\\}.  The argument can also be
Xquoted, if you like.  If no further argument is given, any previously
Xestablished binding for this key is removed.  The @var{command}
Xargument can be any command (@pxref{Command Index}).
X
XBy default, most suitable commands are bound to one or more keys
X(@pxref{Default Key Bindings}; for instance, the command to create a
Xnew window is bound to @kbd{C-c} and @kbd{c}.  The @code{bind} command
Xcan be used to redefine the key bindings and to define new bindings.
X@end deffn
X
X@node Bind Examples, Command Character, Bind, Key Binding
X@section Examples of the @code{bind} command
X@noindent
XSome examples:
X
X@example
Xbind ' ' windows
Xbind ^f screen telnet foobar
Xbind \033 screen -ln -t root -h 1000 9 su
X@end example
X
X@noindent
Xwould bind the space key to the command that displays a list of windows
X(so that the command usually invoked by @kbd{C-a C-w} would also be
Xavailable as @kbd{C-a space}), bind @kbd{C-f} to the command
X``create a window with a TELNET connection to foobar'', and bind
X@key{ESC} to the command that creates an non-login window with a.k.a.
X@samp{root} in slot #9, with a super-user shell and a scrollbackbuffer
Xof 1000 lines.
X
X@node Command Character, Help, Bind Examples, Key Binding
X@section Command Character
X
X@deffn Command escape xy
X(none)@*
XSet the command character to @var{x} and the character generating a
Xliteral command character to @var{y} (just like with the @samp{-e}
Xoption).  Each argument is either a single character, a two-character
Xsequence of the form @samp{^x} (meaning @kbd{C-x}), a backslash followed
Xby an octal number (specifying the ASCII code of the character), or a
Xbackslash followed by a second character, such as @samp{\^} or
X@samp{\\}.  The default is @samp{^Aa}, but @samp{``} is recommended by
Xone of the authors.
X@end deffn
X
X@kindex a
X@deffn Command meta
X(@kbd{C-a a})@*
XSend the command character (@kbd{C-a}) to the process in the current
Xwindow.  The keystroke for this command is the second parameter to the
X@samp{-e} command line switch (@pxref{Invoking Screen}), or the
X@code{escape} .screenrc directive.
X@end deffn
X
X@node Help,  , Command Character, Key Binding
X@section Help
X@kindex ?
X@deffn Command help
X(@kbd{C-a ?})@*
XDisplays a help screen showing you all the key bindings.  The first
Xpages list all the internal commands followed by their bindings.
XSubsequent pages will display the custom commands, one command per key.
XPress space when you're done reading each page, or return to exit early.
XAll other characters are ignored, except for the command character,
Xwhich will exit the help display and begin a command.  
X@xref{Default Key Bindings}.
X@end deffn
X
X@node Flow Control, Termcap, Key Binding, Top
X@chapter Flow Control
X@cindex flow control
X
X@code{screen} can trap flow control characters or pass them to the
Xprogram, as you see fit.  This is useful when your terminal wants to use
XXON/XOFF flow control and you are running a program which wants to use
X^S/^Q for other purposes (i.e. @code{emacs}).
X
X@menu
X* Flow Control Summary::        The effect of @code{screen} flow control
X* Flow::                        Setting the flow control behavior
X* XON/XOFF::                    Sending XON or XOFF to the window
X@end menu
X
X@node Flow Control Summary, Flow,  , Flow Control
X@section About @code{screen} flow control settings
XEach window has a flow-control setting that determines how screen deals
Xwith the XON and XOFF characters (and perhaps the interrupt character).
XWhen flow-control is turned off, screen ignores the XON and XOFF
Xcharacters, which allows the user to send them to the current program by
Xsimply typing them (useful for the @code{emacs} editor, for instance).
XThe trade-off is that it will take longer for output from a
X``normal'' program to pause in response to an XOFF.  With
Xflow-control turned on, XON and XOFF characters are used to immediately
Xpause the output of the current window.  You can still send these
Xcharacters to the current program, but you must use the appropriate
Xtwo-character screen commands (typically @kbd{C-a q} (xon) and @kbd{C-a
Xs} (xoff)).  The xon/xoff commands are also useful for typing C-s and
XC-q past a terminal that intercepts these characters.
X
XEach window has an initial flow-control value set with either the
X@samp{-f} option or the @code{defflow} command.  By default the
Xwindows are set to automatic flow-switching.  It can then be toggled
Xbetween the three states 'fixed on', 'fixed off' and 'automatic'
Xinteractively with the @code{flow} command bound to @kbd{C-a f}.
X
XThe automatic flow-switching mode deals with flow control using the
XTIOCPKT mode (like @code{rlogin} does). If the tty driver does not
Xsupport TIOCPKT, screen tries to determine the right mode based on the
Xcurrent setting of the application keypad --- when it is enabled,
Xflow-control is turned off and visa versa.  Of course, you can still
Xmanipulate flow-control manually when needed.
X
XIf you're running with flow-control enabled and find that pressing the
Xinterrupt key (usually C-c) does not interrupt the display until another
X6-8 lines have scrolled by, try running screen with the @samp{interrupt}
Xoption (add the @samp{interrupt} flag to the @code{flow} command in your
X.screenrc, or use the @samp{-i} command-line option).  This causes the
Xoutput that @code{screen} has accumulated from the interrupted program
Xto be flushed.  One disadvantage is that the virtual terminal's memory
Xcontains the non-flushed version of the output, which in rare cases can
Xcause minor inaccuracies in the output.  For example, if you switch
Xscreens and return, or update the screen with @kbd{C-a l} you would see
Xthe version of the output you would have gotten without @samp{interrupt}
Xbeing on.  Also, you might need to turn off flow-control (or use
Xauto-flow mode to turn it off automatically) when running a program that
Xexpects you to type the interrupt character as input, as the
X@samp{interrupt} parameter only takes effect when flow-control is
Xenabled.  If your program's output is interrupted by mistake, a simple
Xrefresh of the screen with @kbd{C-a l} will restore it.  Give each mode
Xa try, and use whichever mode you find more comfortable.
X
X@node Flow, XON/XOFF, Flow Control Summary, Flow Control
X@section Flow
X@deffn Command defflow fstate [interrupt]
X(none)@*
XSame as the @code{flow} command except that the default setting for new
Xwindows is changed. Initial setting is `auto'.
XSpecifying @code{flow auto
Xinterrupt} has the same effect as the command-line options @samp{-fa}
Xand @samp{-i}.
X@end deffn
X
X@kindex f
X@kindex C-f
X@deffn Command flow [fstate]
X(@kbd{C-a f}, @kbd{C-a C-f})@*
XSets the flow-control mode for this window to @var{fstate}, which can be
X@samp{on}, @samp{off} or @samp{auto}.
XWithout parameters it cycles the current window's
Xflow-control setting.  Default is set by `defflow'.
X@end deffn
X
X@node XON/XOFF,  , Flow, Flow Control
X@section XON and XOFF
X@kindex q
X@kindex C-q
X@deffn Command xon
X(@kbd{C-a q}, @kbd{C-a C-q})@*
XSend a ^Q (ASCII XON) to the program in the current window.  Redundant
Xif flow control is set to @samp{off} or @samp{auto}.
X@end deffn
X
X@kindex s
X@kindex C-s
X@deffn Command xoff
X(@kbd{C-a s}, @kbd{C-a C-s})@*
XSend a ^S (ASCII XOFF) to the program in the current window.
X@end deffn
X
X@node Termcap, Message Line, Flow Control, Top
X@chapter Termcap
X
X@code{screen} demands the most out of your terminal so that it can
Xperform its VT100 emulation most efficiently.  These functions provide
Xmeans for tweaking the termcap entries for both your physical terminal
Xand the one simulated by @code{screen}.
X
X@menu
X* Window Termcap::              Choosing a termcap entry for the window.
X* Dump Termcap::                Write out a termcap entry for the window.
X* Termcap Syntax::              The @code{termcap} and @code{terminfo} commands.
X* Termcap Examples::            Uses for @code{termcap}.
X* Special Capabilities::        Non-standard capabilities used by @code{screen}.
X@end menu
X
X@node Window Termcap, Dump Termcap,  , Termcap
X@section Choosing the termcap entry for a window
XUsually @code{screen} tries to emulate as much of the VT100/ANSI
Xstandard as possible. But if your terminal lacks certain capabilities
Xthe emulation may not be complete. In these cases @code{screen} has to
Xtell the applications that some of the features are missing. This is no
Xproblem on machines using termcap, because @code{screen} can use the
X@code{$TERMCAP} variable to customize the standard screen termcap.
X
XBut if you do a rlogin on another machine or your machine supports only
Xterminfo this method fails. Because of this @code{screen} offers a way
Xto deal with these cases. Here is how it works:
X
XWhen @code{screen} tries to figure out a terminal name for itself, it
Xfirst looks for an entry named @samp{screen.@var{term}}, where
X@var{term} is the contents of your @code{$TERM} variable.  If no such entry
Xexists, @code{screen} tries @samp{screen} (or @samp{screen-w}, if the
Xterminal is wide (132 cols or more)).  If even this entry cannot be
Xfound, @samp{vt100} is used as a substitute.
X
XThe idea is that if you have a terminal which doesn't support an
Ximportant feature (e.g. delete char or clear to EOS) you can build a new
Xtermcap/terminfo entry for @code{screen} (named
X@samp{screen.@var{dumbterm}}) in which this capability has been
Xdisabled.  If this entry is installed on your machines you are able to
Xdo a rlogin and still keep the correct termcap/terminfo entry.  The
Xterminal name is put in the @code{$TERM} variable of all new windows.
X@code{screen} also sets the @code{$TERMCAP} variable reflecting the
Xcapabilities of the virtual terminal emulated. 
XFurthermore, the variable @code{$WINDOW} is set to the window number of each
Xwindow.
X
XThe actual set of capabilities supported by the virtual terminal depends
Xon the capabilities supported by the physical terminal.  If, for
Xinstance, the physical terminal does not support underscore mode,
X@code{screen} does not put the @samp{us} and @samp{ue} capabilities into
Xthe window's @code{$TERMCAP} variable, accordingly.  However, a minimum number
Xof capabilities must be supported by a terminal in order to run
X@code{screen}; namely scrolling, clear screen, and direct cursor
Xaddressing (in addition, @code{screen} does not run on hardcopy
Xterminals or on terminals that over-strike).
X
XAlso, you can customize the @code{$TERMCAP} value used by @code{screen} by
Xusing the @code{termcap} command, or by defining the variable
X@code{$SCREENCAP} prior to startup.  When the latter defined, its value will be
Xcopied verbatim into each window's @code{$TERMCAP} variable.  This can either
Xbe the full terminal definition, or a filename where the terminal
X@samp{screen} (and/or @samp{screen-w}) is defined.
X
XNote that @code{screen} honors the @code{terminfo} command if the system
Xuses the terminfo database rather than termcap.  On such machines the
X@code{$TERMCAP} variable has no effect and you must use the
X@code{dumptermcap} command (@pxref{Dump Termcap}) and the @code{tic}
Xprogram to generate terminfo entries for @code{screen} windows.
X
XWhen the boolean @samp{G0} capability is present in the termcap entry
Xfor the terminal on which @code{screen} has been called, the terminal
Xemulation of @code{screen} supports multiple character sets.  This
Xallows an application to make use of, for instance, the VT100 graphics
Xcharacter set or national character sets.  The following control
Xfunctions from ISO 2022 are supported: @samp{lock shift G0} (@samp{SI}),
X@samp{lock shift G1} (@samp{SO}), @samp{lock shift G2}, @samp{lock shift
XG3}, @samp{single shift G2}, and @samp{single shift G3}.  When a virtual
Xterminal is created or reset, the ASCII character set is designated as
X@samp{G0} through @samp{G3}.  When the @samp{G0} capability is present,
Xscreen evaluates the capabilities @samp{S0}, @samp{E0}, and @samp{C0} if
Xpresent. @samp{S0} is the sequence the terminal uses to enable and start
Xthe graphics character set rather than @samp{SI}.  @samp{E0} is the
Xcorresponding replacement for @samp{SO}. @samp{C0} gives a character by
Xcharacter translation string that is used during semi-graphics mode.
XThis string is built like the @samp{acsc} terminfo capability.
X
XWhen the @samp{po} and @samp{pf} capabilities are present in the
Xterminal's termcap entry, applications running in a @code{screen} window
Xcan send output to the printer port of the terminal.  This allows a user
Xto have an application in one window sending output to a printer
Xconnected to the terminal, while all other windows are still active (the
Xprinter port is enabled and disabled again for each chunk of output).
XAs a side-effect, programs running in different windows can send output
Xto the printer simultaneously.  Data sent to the printer is not
Xdisplayed in the window.
X
XSome capabilities are only put into the @code{$TERMCAP} variable of the virtual
Xterminal if they can be efficiently implemented by the physical
Xterminal.  For instance, @samp{dl} (delete line) is only put into the
X@code{$TERMCAP} variable if the terminal supports either delete line itself or
Xscrolling regions. Note that this may provoke confusion, when the
Xsession is reattached on a different terminal, as the value of @code{$TERMCAP}
Xcannot be modified by parent processes.  You can force @code{screen} to
Xinclude all capabilities in @code{$TERMCAP} with the @samp{-a}
Xcommand-line option (@pxref{Invoking Screen}).
X
X@node Dump Termcap, Termcap Syntax, Window Termcap, Termcap
X@section Write out the window's termcap entry
X@kindex .
X@deffn Command dumptermcap
X(@kbd{C-a .})@*
XWrite the termcap entry for the virtual terminal optimized for the
Xcurrently active window to the file @file{.termcap} in the user's
X@file{$HOME/.screen} directory (or wherever @code{screen} stores its
Xsockets. @pxref{Files}).  This termcap entry is identical to
Xthe value of the environment variable @code{$TERMCAP} that is set up by
X@code{screen} for each window. For terminfo based systems you will need
Xto run a converter like @code{captoinfo} and then compile the entry with
X@code{tic}.
X@end deffn
X
X@node Termcap Syntax, Termcap Examples, Dump Termcap, Termcap
X@section The @code{termcap} command
X@deffn Command termcap term terminal-tweaks [window-tweaks]
X@deffnx Command terminfo term terminal-tweaks [window-tweaks]
X(none)@*
XUse this command to modify your terminal's termcap entry without going
Xthrough all the hassles involved in creating a custom termcap entry.
XPlus, you can optionally customize the termcap generated for the
Xwindows.  If your system uses the terminfo database rather than
Xtermcap, @code{screen} will understand the @code{terminfo} command which
Xhas the same effects as the @code{termcap} command. Thus users can write
Xone .screenrc file that handles both cases, although terminfo syntax is
Xslightly different from termcap syntax.
X@end deffn
X
XThe first argument specifies which terminal(s) should be affected by
Xthis definition.  You can specify multiple terminal names by separating
Xthem with @samp{|}s.  Use @samp{*} to match all terminals and @samp{vt*}
Xto match all terminals that begin with @samp{vt}.
X
XEach @var{tweak} argument contains one or more termcap defines
X(separated by @samp{:}s) to be inserted at the start of the appropriate
Xtermcap entry, enhancing it or overriding existing values.  The first
Xtweak modifies your terminal's termcap, and contains definitions that
Xyour terminal uses to perform certain functions.  Specify a null string
Xto leave this unchanged (e.g. "").  The second (optional) tweak modifies
Xall the window termcaps, and should contain definitions that screen
Xunderstands (@pxref{Virtual Terminal}).
X
X@node Termcap Examples, Special Capabilities, Termcap Syntax, Termcap
X@section Termcap Examples
XSome examples:
X
X@example
Xtermcap xterm*  xn:hs@@
X@end example
X
X@noindent
XInforms @code{screen} that all terminals that begin with @samp{xterm}
Xhave firm auto-margins that allow the last position on the screen to be
Xupdated (xn), but they don't really have a status line (no 'hs' --
Xappend @samp{@@} to turn entries off).  Note that we assume @samp{xn} for
Xall terminal names that start with @samp{vt}, but only if you don't
Xspecify a termcap command for that terminal.
X
X@example
Xtermcap vt*  xn
Xtermcap vt102|vt220  Z0=\E[?3h:Z1=\E[?3l
X@end example
X
X@noindent
XSpecifies the firm-margined @samp{xn} capability for all terminals that
Xbegin with @samp{vt}, and the second line will also add the
Xescape-sequences to switch into (Z0) and back out of (Z1)
X132-character-per-line mode if this is a vt102 or vt220.  (You must
Xspecify Z0 and Z1 in your termcap to use the width-changing commands.)
X
X@example
Xtermcap vt100  ""  l0=PF1:l1=PF2:l2=PF3:l3=PF4
X@end example
X
X@noindent
XThis leaves your vt100 termcap alone and adds the function key labels to
Xeach window's termcap entry.
X
X@example
Xtermcap h19|z19  am@@:im=\E@@:ei=\EO  dc=\E[P
X@end example
X
X@noindent
XTakes a h19 or z19 termcap and turns off auto-margins (am@@) and enables
Xthe insert mode (im) and end-insert (ei) capabilities (the @samp{@@} in
Xthe @samp{im} string is after the @samp{=}, so it is part of the
Xstring).  Having the @samp{im} and @samp{ei} definitions put into your
Xterminal's termcap will cause screen to automatically advertise the
Xcharacter-insert capability in each window's termcap.  Each window will
Xalso get the delete-character capability (dc) added to its termcap,
Xwhich screen will translate into a line-update for the terminal (we're
Xpretending it doesn't support character deletion).
X
XIf you would like to fully specify each window's termcap entry, you
Xshould instead set the @code{$SCREENCAP} variable prior to running
X@code{screen}.  @xref{Virtual Terminal}, for the details of the
X@code{screen} terminal emulation.  @xref{Top, , Termcap, termcap, The
XTermcap Manual}, for more information on termcap definitions.
X
X@node Special Capabilities,  , Termcap Examples, Termcap
X@section Special Terminal Capabilities
X@cindex terminal capabilities
X@cindex capabilities 
XThe following table describes all terminal capabilities that are
Xrecognized by @code{screen} and are not in the termcap manual
X(@pxref{Top, , Termcap, termcap, The Termcap Manual}).
X
X@table @samp
X@item LP
X(bool)@*
XTerminal has vt100 style margins (`magic margins'). Note that
Xthis capability is obsolete --- @code{screen} now uses @samp{xn}
Xinstead.
X
X@item Z0
X(str)@*
XChange width to 132 columns.
X
X@item Z1
X(str)@*
XChange width to 80 columns.
X
X@item WS
X(str)@*
XResize display. This capability has the desired width and height as
Xarguments.  SunView(tm) example: @samp{\E[8;%d;%dt}.
X
X@item B8
X(str)@*
XTell @code{screen} to look out for characters with 8th bit set. If such
Xa character is found @code{screen} processes the specified string
Xand than outputs the character with the 8th bit stripped off.
XNote that the string can contain any esc-sequences known to
X@code{screen}, too. (Example: Single Shift G2 = \EN.)
X
X@item OP
X(bool)@*
XDon't do full vt100-style margin emulation. Same as the -O option.
X
X@item NF
X(bool)@*
XTerminal doesn't need flow control. Send ^S and ^Q direct to
Xthe application. Same as @code{flow off}. The opposite of this
Xcapability is @samp{xo}.
X
X@item G0
X(bool)@*
XTerminal can deal with ISO2022 font selection sequences.
X
X@item S0
X(str)@*
XSwitch charset @samp{G0} to the specified charset. Default
Xis @samp{\E(%d}.
X
X@item E0
X(str)@*
XSwitch charset @samp{G0} back to standard charset. Default
Xis @samp{\E(B}.
X
X@item C0
X(str)@*
XUse the string as a conversion table for font 0. See
Xthe @samp{ac} capability for more details.
X
X@item CS
X(str)@*
XSwitch cursor keys to application mode.
X
X@item CE
X(str)@*
XSwitch cursor keys to cursor mode.
X@end table
X
X@node Message Line, Logging, Termcap, Top
X@chapter The Message Line
X@cindex message line
X
X@code{screen} displays informational messages and other diagnostics in a
X@dfn{message line} at the bottom of the screen.  If your terminal has a
Xstatus line defined in its termcap, screen will use this for displaying
Xits messages, otherwise the last line of the screen will be temporarily
Xoverwritten and output will be momentarily interrupted.  The message
Xline is automatically removed after a few seconds delay, but it can also
Xbe removed early (on terminals without a status line) by beginning to
Xtype.
X
X@menu
X* Privacy Message::             Using the message line from your program.
X* Hardware Status Line::        Use the terminal's hardware status line.
X* Last Message::                Redisplay the last message.
X* Message Wait::                Control how long messages are displayed.
X@end menu
X
X@node Privacy Message, Hardware Status Line,  , Message Line
X@section Using the message line from your program
XThe message line facility can be used by an application running in the
Xcurrent window by means of the ANSI @dfn{Privacy message} control
Xsequence.  For instance, from within the shell, try something like:
X
X@example
Xecho "@value{esc}^Hello world from window $WINDOW@value{esc}\"
X@end example
X
Xwhere @samp{@value{esc}} is ASCII ESC and @samp{^} is a literal caret or
Xup-arrow.
X
X@node Hardware Status Line, Last Message, Privacy Message, Message Line
X@section Hardware Status Line
X@deffn Command hardstatus [state]
X(none)@*
XToggles the use of the terminal's hardware status line. If @samp{on},
X@code{screen} will use this facility to display one line messages.
XOtherwise these messages are overlayed in reverse video mode at the
Xdisplay line. Note that the hardstatus feature can only be used if the
Xtermcap/terminfo capabilities "hs", "ts", "fs" and "ds" are set
Xproperly.  Default is @samp{on}.
X@end deffn
X
X@node Last Message, Message Wait, Hardware Status Line, Message Line
X@section Display Last Message
X@kindex m
X@kindex C-m
X@deffn Command lastmsg
X(@kbd{C-a m}, @kbd{C-a C-m})@*
XRepeat the last message displayed in the message line.  Useful if you're
Xtyping when a message appears, because (unless your terminal has a
Xhardware status line) the message goes away when you press a key.
X@end deffn
X
X@node Message Wait,  , Last Message, Message Line
X@section Message Wait
X@deffn Command msgminwait sec
X(none)@*
XDefines the time @code{screen} delays a new message when another is
Xcurrently displayed.  Defaults to 1 second.
X@end deffn
X
X@deffn Command msgwait sec
X(none)@*
XDefines the time a message is displayed, if @code{screen} is not
Xdisturbed by other activity.  Defaults to 5 seconds.
X@end deffn
X
X@node Logging, Startup, Message Line, Top
X@chapter Logging
X
XThis section describes the commands for keeping a record of your session.
X
X@menu
X* Hardcopy::                    Dump the current screen to a file
X* Log::                         Log the output of a window to a file
X@end menu
X
X@node Hardcopy, Log,  , Logging
X@section hardcopy
X@kindex h
X@kindex C-h
X@deffn Command hardcopy
X(@kbd{C-a h}, @kbd{C-a C-h})@*
XWrites out the current display contents to the file @file{hardcopy.@var{n}}
Xin the window's default directory, where @var{n} is the number of the
Xcurrent window.  This either appends or overwrites the file if it
Xexists, as determined by the @code{hardcopy_append} command.
X@end deffn
X
X@deffn Command hardcopy_append state
X(none)@*
XIf set to @samp{on}, @code{screen} will append to the
X@file{hardcopy.@var{n}} files created by the command @code{hardcopy};
Xotherwise, these files are overwritten each time.
X@end deffn
X
X@deffn Comand hardcopydir directory
X(none)@*
XDefines a directory where hardcopy files will be placed.
XIf unset hardcopys are dumped in screens current working
Xdirectory.
X@end deffn
X
X@node Log,  , Hardcopy, Logging
X@section log
X@kindex H
X@deffn Command log [state]
X(@kbd{C-a H})@*
XBegins/ends logging of the current window to the file
X@file{screenlog.@var{n}} in the window's default directory, where
X@var{n} is the number of the current window.  If no parameter is given,
Xthe logging state is toggled.  The session log is
Xappended to the previous contents of the file if it already exists.  The
Xcurrent contents and the contents of the scrollback history are not
Xincluded in the session log.  Default is @samp{off}.
X@end deffn
X
X@deffn Comand logdir directory
X(none)@*
XDefines a directory where logfiles will be placed. If unset logfiles
Xare written in @code{screen}s current working directory.
X@end deffn
X
X@node Startup, Miscellaneous, Logging, Top
X@chapter Startup
X
XThis section describes commands which are only useful in the
X@file{.screenrc} file, for use at startup.
X
X@menu
X* echo::                        Display a message.
X* sleep::                       Pause execution of the @file{.screenrc}.
X* Startup Message::             Control display of the copyright notice.
X@end menu
X
X@node echo, sleep,  , Startup
X@section echo
X@deffn Command echo [@t{-n}] message
X(none)@*
XThe echo command may be used to annoy @code{screen} users with a
X'message of the day'. Typically installed in a global screenrc. See also
X@code{sleep}.  Echo is also useful for online checking of environment
Xvariables.
X@end deffn
X
X@node sleep, Startup Message, echo, Startup
X@section sleep
X@deffn Command sleep num
X(none)@*
XThis command will pause the execution of a .screenrc file for @var{num}
Xseconds.  Keyboard activity will end the sleep.  It may be used to give
Xusers a chance to read the messages output by @code{echo}.
X@end deffn
X
X@node Startup Message,  , sleep, Startup
X@section Startup Message
X@deffn Command startup_message state
X(none)@*
XSelect whether you want to see the copyright notice during startup.
XDefault is @samp{on}, as you probably noticed.
X@end deffn
X
X@node Miscellaneous, Environment, Startup, Top
X@chapter Miscellaneous commands
X
XThe commands described here do not fit well under any of the other
Xcategories.
X
X@menu
X* Break::                       Send a break signal to the window.
X* License::                     Display the disclaimer page.
X* Nethack::                     Use @code{nethack}-like error messages.
X* Silence::			Notify on inactivity.
X* Time::                        Display the time and load average.
X* Version::                     Display the version of @code{screen}.
X@end menu
X
X@node Break, License,  , Miscellaneous
X@section Break
X@deffn Command break [duration]
X(none)@*
XSend a break signal for @var{duration}*0.25 seconds to this window.
XMost useful if a character device is attached to the window rather than
Xa shell process.
X@end deffn
X
X@deffn Command pow_break
X(none)@*
XReopen the window's terminal line and send a break condition.
X@end deffn
X
X@node License, Nethack, Break, Miscellaneous
X@section License
X@deffn Command license
X(none)@*
XDisplay the disclaimer page. This is done whenever @code{screen} is
Xstarted without options, which should be often enough.
X@end deffn
X
X@node Nethack, Silence, License, Miscellaneous
X@section Nethack
X@deffn Command nethack state
X(none)@*
XChanges the kind of error messages used by @code{screen}.  When you are
Xfamiliar with the game @code{nethack}, you may enjoy the nethack-style
Xmessages which will often blur the facts a little, but are much funnier
Xto read. Anyway, standard messages often tend to be unclear as well.
X
XThis option is only available if @code{screen} was compiled with the
XNETHACK flag defined (@pxref{Installation}). The default setting is then
Xdetermined by the presence of the environment variable
X@code{$NETHACKOPTIONS}.
X@end deffn
X
X@node Silence, Time, Nethack, Miscellaneous
X@section Silence
X@deffn Command silence @var{[state|sec]}
X(none)@*
XToggles silence monitoring of windows. When silence is turned on and an 
Xaffected window is switched into the background, you will receive the
Xsilence notification message in the status line after a specified period
Xof inactivity (silence). The default timeout can be changed with the
X@code{silencewait} command or by specifying a number of seconds instead of
X@code{on} or @code{off}. Silence is initially off for all windows.
X@end deffn
X
X@deffn Command silencewait @var{seconds}
X(none)@*
XDefine the time that all windows monitored for silence should wait
Xbefore displaying a message. Default is 30 seconds.
X@end deffn
X
X@node Time, Version, Silence, Miscellaneous
X@section Time
X@kindex t
X@kindex C-t
X@deffn Command time
X(@kbd{C-a t}, @kbd{C-a C-t})@*
XUses the message line to display the time of day, the host name, and the
Xload averages over 1, 5, and 15 minutes (if this is available on your
Xsystem).  For window-specific information use @code{info} (@pxref{Info}).
X@end deffn
X
X@node Version,  , Time, Miscellaneous
X@section Version
X@kindex v
X@kindex C-v
X@deffn Command version
X(@kbd{C-a v}, @kbd{C-a C-v})@*
XDisplay the version and modification date in the message line.
X@end deffn
X
X@node Environment, Files, Miscellaneous, Top
X@chapter Environment Variables
X@cindex environment
X
X@table @code
X@item COLUMNS
XNumber of columns on the terminal (overrides termcap entry).
X
X@item HOME
XDirectory in which to look for .screenrc.
X
X@item ISCREENRC
XAlternate user screenrc file.
X
X@item LINES
XNumber of lines on the terminal (overrides termcap entry).
X
X@item LOCKPRG
XScreen lock program.
X
X@item NETHACKOPTIONS
XTurns on @code{nethack} option.
X
X@item PATH
XUsed for locating programs to run.
X
X@item SCREENCAP
XFor customizing a terminal's @code{TERMCAP} value.
X
X@item SCREENDIR
XAlternate socket directory.
X
X@item SCREENRC
XAlternate user screenrc file.
X
X@item SHELL
XDefault shell program for opening windows (default @file{/bin/sh}).
X
X@item STY
XAlternate socket name. If @code{screen} is invoked, and the environment variable
X@code{STY} is set, then it creates only a window in the running @code{screen}
Xsession rather than starting a new session.
X
X@item SYSSCREENRC
XAlternate system screenrc file.
X
X@item TERM
XTerminal name.
X
X@item TERMCAP
XTerminal description.
X@end table
X
X@node Files, Credits, Environment, Top
X@chapter Files Referenced
X@cindex files
X
X@table @file
X@item @code{$SYSSCREENRC}
X@itemx /local/etc/screenrc
X@code{screen} initialization commands
X
X@item @code{$ISCREENRC}
X@itemx @code{$SCREENRC}
X@itemx @code{$HOME}/.iscreenrc
X@itemx @code{$HOME}/.screenrc
XRead in after /local/etc/screenrc
X
X@item @code{$ISCREENDIR}/S-@var{login}
X@itemx @code{$SCREENDIR}/S-@var{login}
X
X@item /local/screens/S-@var{login}
XSocket directories (default)
X
X@item /usr/tmp/screens/S-@var{login}
XAlternate socket directories.
X
X@item @var{socket directory}/.termcap
XWritten by the @code{dumptermcap} command
X
X@item /usr/tmp/screens/screen-exchange or
X@itemx /tmp/screen-exchange
X@code{screen} interprocess communication buffer
X
X@item hardcopy.[0-9]
XScreen images created by the hardcopy command
X
X@item screenlog.[0-9]
XOutput log files created by the log command
X
X@item /usr/lib/terminfo/?/* or
X@itemx /etc/termcap
XTerminal capability databases
X
X@item /etc/utmp
XLogin records
X
X@item @code{$LOCKPRG}
XProgram for locking the terminal.
X@end table
X
X@node Credits, Bugs, Files, Top
X@chapter Credits
X
X@noindent
XAuthors @*
X=======
X
XOriginally created by Oliver Laumann, this latest version was
Xproduced by Wayne Davison, Juergen Weigert and Michael Schroeder.
X
X@noindent
XContributors @*
X============
X
X@example
X     Ken Beal (kbeal@@amber.ssd.csd.harris.com),
X     Rudolf Koenig (rfkoenig@@informatik.uni-erlangen.de),
X     Toerless Eckert (eckert@@informatik.uni-erlangen.de),
X     Wayne Davison (davison@@borland.com),
X     Patrick Wolfe (pat@@kai.com, kailand!pat),
X     Bart Schaefer (schaefer@@cse.ogi.edu),
X     Nathan Glasser (nathan@@brokaw.lcs.mit.edu),
X     Larry W. Virden (lvirden@@cas.org),
X     Howard Chu (hyc@@hanauma.jpl.nasa.gov),
X     Tim MacKenzie (tym@@dibbler.cs.monash.edu.au),
X     Markku Jarvinen (mta@@@{cc,cs,ee@}.tut.fi),
X     Marc Boucher (marc@@CAM.ORG),
X     Doug Siebert (dsiebert@@isca.uiowa.edu),
X     Ken Stillson (stillson@@tsfsrv.mitre.org),
X     Ian Frechett (frechett@@spot.Colorado.EDU),
X     Brian Koehmstedt (bpk@@gnu.ai.mit.edu),
X     Don Smith (djs6015@@ultb.isc.rit.edu),
X     Frank van der Linden (vdlinden@@fwi.uva.nl),
X     Martin Schweikert (schweik@@cpp.ob.open.de),
X     David Vrona (dave@@sashimi.lcu.com),
X     E. Tye McQueen (tye%spillman.UUCP@@uunet.uu.net),
X     Matthew Green (phone@@coombs.anu.edu.au),
X     Christopher Williams (cgw@@unt.edu),
X     Matt Mosley (mattm@@access.digex.net),
X     Gregory Neil Shapiro (gshapiro@@wpi.WPI.EDU),
X     Jason Merrill (jason@@jarthur.Claremont.EDU).
X@end example
X
X@noindent
XVersion @*
X=======
X
XThis is version @value{version}. Its roots are a merge of a custom
Xversion 2.3PR7 by Wayne Davison and several enhancements to Oliver
XLaumann's version 2.0. Note that all versions numbered 2.x are copyright
Xby Oliver Laumann.
X
X@node Bugs, Installation, Credits, Top
X@chapter Bugs
X@cindex bugs
X
XJust like any other significant piece of software, @code{screen} has a
Xfew bugs and missing features.  Please send in a bug report if you have
Xfound a bug not mentioned here.
X
X@menu
X* Known Bugs::                  Problems we know about.
X* Reporting Bugs::              How to contact the maintainers.
X@end menu
X
X@node Known Bugs, Reporting Bugs,  , Bugs
X@section Known Bugs
X
X@itemize @bullet
X@item
X@samp{dm} (delete mode) and @samp{xs} are not handled correctly (they
Xare ignored).  @samp{xn} is treated as a magic-margin indicator.
X
X@item
XThe @samp{GR} set of ISO 2022 is not supported.
X
X@item
XThere is no keyboard input translation to VT100 sequences.
X
X@item
XIt is not possible to change the environment variable @code{$TERMCAP}
Xwhen reattaching under a different terminal type.
X
X@item
XThe support of terminfo based systems is very limited. Adding extra
Xcapabilities to @code{$TERMCAP} may not have any effects.
X
X@item
X@code{screen} does not make use of hardware tabs.
X
X@item
X@code{screen} must be installed setuid root in order to be able to
Xcorrectly change the owner of the tty device file for each window.
XSpecial permission may also be required to write the file
X@file{/etc/utmp}.
X
X@item
XEntries in @file{/etc/utmp} are not removed when @code{screen} is killed
Xwith SIGKILL.  This will cause some programs (like "w" or "rwho") to
Xadvertise that a user is logged on who really isn't.
X
X@item
X@code{screen} may give a strange warning when your tty has no utmp
Xentry.
X@end itemize
X
X@node Reporting Bugs,  , Known Bugs, Bugs
X@section Reporting Bugs
X@cindex bug report
X
XIf you find a bug in @code{Screen}, please send electronic mail to
X@w{@samp{screen@@uni-erlangen.de}}, and also to
X@w{@samp{bug-gnu-utils@@prep.ai.mit.edu}}.  Include the version number
Xof @code{Screen} which you are using.  Also include in your message the
Xhardware and operating system, the compiler used to compile, a
Xdescription of the bug behavior, and the conditions that triggered the
Xbug. Please recompile @code{screen} with the @samp{-DDEBUG -DTMPTEST} options
Xenabled, reproduce the bug, and have a look at the debug output written to
Xthe directory @file{/tmp/debug}. If necessary quote suspect passages from the
Xdebug output and show the contents of your @file{config.h} if it matters.
X
X@node Installation, Concept Index, Bugs, Top
X@chapter Installation
X@cindex installation
X
XSince @code{screen} uses pseudo-ttys, the select system call, and
XUNIX-domain sockets, it will not run under a system that does not
Xinclude these features of 4.2 and 4.3 BSD UNIX.
X
X@menu
X* Socket Directory::		Where screen stores its handle.
X* Compiling Screen::
X@end menu
X
X@node Socket Directory,
X@section Socket Directory
X@cindex socket directory
X
XThe socket directory defaults either to @file{$HOME/.screen} or
Xpreferably to @file{/local/screens}. If @code{screen} is installed
Xsetuid root, then the administrator should compile screen with an
Xadequate (not NFS mounted) @code{SOCKDIR}. If @code{screen} is not
Xrunning setuid-root, the user can specify any mode 777 directory in the
Xenvironment variable @code{$SCREENDIR}.
X
X@node Compiling Screen,  , Socket Directory, Installation
X@section Compiling Screen
X@cindex compiling screen
X
XTo compile and install screen:
X
XThe @code{screen} package comes with a @code{GNU Autoconf} configuration 
Xscript. Before you compile the package run 
X
X@center @code{sh ./configure}
X
XThis will create a @file{config.h} and @file{Makefile} for your machine.
XIf @code{configure} fails for some reason, then look at the examples and
Xcomments found in the @file{Makefile.in} and @file{config.h.in} templates.
XRename @file{config.status} to @file{config.status.@var{machine}} when
Xyou want to keep configuration data for multiple architectures. Runing
X@code{sh ./config.status.@var{machine}} recreates your configuration 
Xsignificantly faster than rerunning @code{configure}. 
X@*
XRead through the "User Configuration" section of @file{config.h}, and verify
Xthat it suits your needs.
XA comment near the top of this section explains why it's best to
Xinstall screen setuid to root.
XCheck for the place for the global @file{screenrc}-file and for the socket
Xdirectory.
X@*
XCheck the compiler used in @file{Makefile}, the prefix path where to install
X@code{screen}. Then run
X
X@center @code{make}
X
XIf @code{make} fails to produce one of the files @file{term.h}, @file{comm.h}
Xor @file{tty.c}, then use @code{@var{filename.x}.dist} instead.
XFor additional information about installation of @code{screen} refer to the
Xfile @file{INSTALLATION}, coming with this package.
X
X@node Concept Index, Command Index, Installation, Top
X@unnumbered Concept Index
X
X@printindex cp
X
X@node Command Index, Keystroke Index, Concept Index, Top
X@unnumbered Command Index
X
XThis is a list of all the commands supported by @code{screen}.
X
X@printindex fn
X
X@node Keystroke Index,  , Command Index, Top
X@unnumbered Keystroke Index
X
XThis is a list of the default key bindings.
X
XThe escape character has been omitted from the key sequences, since it
Xis the same for all bindings.
X
X@printindex ky
X
X@shortcontents
X@contents
X@bye
X
X
END_OF_FILE
echo shar: 1 control character may be missing from \"'doc/screen.texinfo'\"
if test 119116 -ne `wc -c <'doc/screen.texinfo'`; then
    echo shar: \"'doc/screen.texinfo'\" unpacked with wrong size!
fi
# end of 'doc/screen.texinfo'
fi
echo shar: End of archive 10 \(of 10\).
cp /dev/null ark10isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 10 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
