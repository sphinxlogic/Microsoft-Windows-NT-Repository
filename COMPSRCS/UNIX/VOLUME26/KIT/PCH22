Newsgroups: comp.sources.unix
From: ram@acri.fr (Raphael Manfredi)
Subject: v26i232: kit - the ultimate mailing kit, Patch22
Sender: unix-sources-moderator@efficacy.home.vix.com
Approved: WhoAmI@efficacy.home.vix.com

Submitted-By: ram@acri.fr (Raphael Manfredi)
Posting-Number: Volume 26, Issue 232
Archive-Name: kit/pch22

[The latest patch for kit version 2.0 is #28.]

System: kit version 2.0
Patch #: 22
Priority: VERY LOW
Subject: new getopt target
Subject: created
Subject: now uses external getopt script for option parsing
Subject: fixed some typos in the help message
Subject: manual page now carries version number and patchlevel
Subject: added OPTIONS section for quick reference
Subject: sorting done numerically with -n option
Subject: new getopt.SH script
Date: Mon Jan 11 18:09:41 PST 1993
From: Raphael Manfredi <ram@eiffel.com>

Description:
	Created getopt script in order to avoid code duplication for
	option parsing.

	Fixed some typos in the help message of unkit.

	The manual page now carries version number and patchlevel and
	has a new OPTIONS section for quick reference (requested by
	Christian Bertin <bertin@acri.fr>).

	New getopt.SH script

Fix:	From rn, say "| patch -p -N -d DIR", where DIR is your kit source
	directory.  Outside of rn, say "cd DIR; patch -p -N <thisarticle".
	If you don't have the patch program, apply the following by hand,
	or get patch (version 2.0, latest patchlevel).

	After patching:
		Configure -d
		make
		make install

	If patch indicates that patchlevel is the wrong version, you may need
	to apply one or more previous patches, or the patch may already
	have been applied.  See the patchlevel.h file to find out what has or
	has not been applied.  In any event, don't continue with the patch.

	If you are missing previous patches they can be obtained from me:

		Raphael Manfredi <ram@eiffel.com>

	If you send a mail message of the following form it will greatly speed
	processing:

		Subject: Command
		@SH mailpatch PATH kit 2.0 LIST
			   ^ note the c

	where PATH is a return path FROM ME TO YOU either in Internet notation,
	or in bang notation from some well-known host, and LIST is the number
	of one or more patches you need, separated by spaces, commas, and/or
	hyphens.  Saying 35- says everything from 35 to the end.

	To get some more detailed instructions, send me the following mail:

		Subject: Command
		@SH mailhelp PATH


Index: patchlevel.h
Prereq: 21
2c2
< #define PATCHLEVEL 21
---
> #define PATCHLEVEL 22

Index: kit/kit.SH
Prereq: 2.0.1.12
*** kit/kit.SH.old	Mon Jan 11 18:09:19 1993
--- kit/kit.SH	Mon Jan 11 18:09:20 1993
***************
*** 26,34 ****
  !GROK!THIS!
  $spitshell >>kit <<'!NO!SUBS!'
  
! # $Id: kit.SH,v 2.0.1.12 92/11/03 10:12:34 ram Exp $
  #
  # $Log:	kit.SH,v $
  # Revision 2.0.1.12  92/11/03  10:12:34  ram
  # patch21: option parsing can now deal with embeded spaces in arguments
  # 
--- 26,37 ----
  !GROK!THIS!
  $spitshell >>kit <<'!NO!SUBS!'
  
! # $Id: kit.SH,v 2.0.1.13 93/01/11 18:06:46 ram Exp $
  #
  # $Log:	kit.SH,v $
+ # Revision 2.0.1.13  93/01/11  18:06:46  ram
+ # patch22: now uses external getopt script for option parsing
+ # 
  # Revision 2.0.1.12  92/11/03  10:12:34  ram
  # patch21: option parsing can now deal with embeded spaces in arguments
  # 
***************
*** 132,184 ****
  '
  
  # Process the command line options
! set X `for arg in "$@"; do echo $arg; done | awk '
! BEGIN {
! 	optstr = "BEFHMVXefhpxS:a:d:k:l:m:n:s:";	# getopt-style specification
! 
! 	len = length(optstr);
! 	for (i = 1; i <= len; i++) {
! 		c = substr(optstr, i, 1);
! 		if (i < len) a = substr(optstr, i + 1, 1); else a = "";
! 		if (a == ":") {
! 			arg[c] = 1;
! 			i++;
! 		}
! 		opt[c] = 1;
! 	}
! }
! {
! 	expect = 0;
! 	str = $0;
! 	if (substr(str, 1, 1) != "-") {
! 		printf("'"'%s'"'\n", str);
! 		next;
! 	}
! 	len = length($0);
! 	for (i = 2; i <= len; i++) {
! 		c = substr(str, i, 1);
! 		if (!opt[c]) {
! 			printf("-%s\n", substr(str, i));
! 			next;
! 		}
! 		printf("-%s\n", c);
! 		if (arg[c]) {
! 			if (i < len)
! 				printf("'"'%s'"'\n", substr(str, i + 1));
! 			else
! 				expect = 1;
! 			next;
! 		}
! 	}
! }
! END {
! 	if (expect)
! 		print "?";
! }
! '`
! eval "set $*"
! shift
! 
  while test $# -gt 0
  do
  	case "$1" in 
--- 135,141 ----
  '
  
  # Process the command line options
! eval "set X "`$libdir/getopt BEFHMVXefhpxS:a:d:k:l:m:n:s: "$@"`; shift
  while test $# -gt 0
  do
  	case "$1" in 

Index: man/kit.SH
Prereq: 2.0.1.10
*** man/kit.SH.old	Mon Jan 11 18:09:32 1993
--- man/kit.SH	Mon Jan 11 18:09:34 1993
***************
*** 15,26 ****
  echo "Extracting man/kit.$manext (with variable substitutions)"
  $rm -f kit.$manext
  $spitshell >kit.$manext <<!GROK!THIS!
! .TH KIT $manext ram
  ''' @(#) Manual page for mailing kit -- (c) ram July 1990
  '''
! ''' $Id: kit.SH,v 2.0.1.10 92/08/17 18:01:16 ram Exp $
  '''
  ''' $Log:	kit.SH,v $
  ''' Revision 2.0.1.10  92/08/17  18:01:16  ram
  ''' patch18: documents new -k option for unkit
  ''' patch18: unkit can now deal with multiple kit parts in a single file
--- 15,30 ----
  echo "Extracting man/kit.$manext (with variable substitutions)"
  $rm -f kit.$manext
  $spitshell >kit.$manext <<!GROK!THIS!
! .TH KIT $manext "Version $VERSION PL$PATCHLEVEL"
  ''' @(#) Manual page for mailing kit -- (c) ram July 1990
  '''
! ''' $Id: kit.SH,v 2.0.1.11 93/01/11 18:08:33 ram Exp $
  '''
  ''' $Log:	kit.SH,v $
+ ''' Revision 2.0.1.11  93/01/11  18:08:33  ram
+ ''' patch22: manual page now carries version number and patchlevel
+ ''' patch22: added OPTIONS section for quick reference
+ ''' 
  ''' Revision 2.0.1.10  92/08/17  18:01:16  ram
  ''' patch18: documents new -k option for unkit
  ''' patch18: unkit can now deal with multiple kit parts in a single file
***************
*** 83,88 ****
--- 87,95 ----
  .sp
  \fBunkit\fR [ \fB\-bhlprV\fR ] [ \fB\-k\fI key\fR ] [ \fIfiles\fR ]
  .SH DESCRIPTION
+ '''
+ ''' Kit
+ '''
  \fIKit\fR is the ultimate mailing tool. It enables you to mail
  data without any consideration of possible escape sequences or
  control characters.
***************
*** 146,151 ****
--- 153,161 ----
  argument. It can be given in bytes (e.g. \fI\-S 40000\fR to set the maximum
  part size to 40000 bytes) or in kbytes by appending a \fIk\fR at the end
  (i.e. \fI-S 60k\fR would produce parts with size ranging up to 61440 bytes).
+ '''
+ ''' Mailkit
+ '''
  .PP
  \fIMailkit\fR takes "Kit*" files and sends them to a list of addresses.
  The \fB\-n\fR option can be used to change that base name, if necessary.
***************
*** 199,204 ****
--- 209,217 ----
  1, 4 trough 7 and 10. Finally, \fI-5,8-\fR would send parts 1 through 5 and
  8 up to the end. If you introduce spaces in your range list specification,
  do not forget to quote the whole list for the shell...
+ '''
+ ''' Unkit
+ '''
  .PP
  \fIUnkit\fR is used to restore the original files. The argument is
  a list of archive files (or mail files, as \fIunshar\fR(1), which
***************
*** 234,239 ****
--- 247,415 ----
  For all of these commands, option \fB\-V\fR prints the version
  number with the current patch level and exits, while \fB\-h\fR gives
  a little help message with the syntax and the meaning of the options.
+ .SH OPTIONS
+ This section summarizes the different options. All the options may be specified
+ separately (e.g. \fB\-a \-b \fIfoo\fR \-c) or grouped together, along with
+ optional arguments (e.g. \fB\-ac\fR \fB\-b\fIfoo\fR). Option parsing stops
+ when \-\- is encountered.
+ '''
+ ''' Kit
+ '''
+ .PP
+ \fIKit\fR has the following options:
+ .TP 15
+ .B \-B
+ Use \fIbtoa\fR encoding (default), as opposed to hexadecimal encoding.
+ .TP
+ .B \-E
+ Edit instructions which will be sent as part #0.
+ .TP
+ .B \-F
+ Get instructions to be sent as part #0 from standard input.
+ .TP
+ .B \-H
+ Use hexadecimal encoding, as opposed to the default \fIbtoa\fR. This is an
+ obsolete feature, kept for compatibility with \fIkit\fR 1.0.
+ .TP
+ .B \-M
+ Include \fIminikit\fR in the distribution, in order to allow unkiting
+ by the recipient, should \fIkit\fR be missing at the remote site. Note that
+ \fIminikit\fR will only be able to unkit plain \fIbtoa\fR-encoded packages
+ (i.e. encryption is not supported, although automatic acknowledgment is).
+ .TP
+ .B \-V
+ Print version number and patchlevel.
+ .TP
+ .B \-S\fI size
+ Set each part size in bytes or kbytes (by appending a single \fIk\fR after
+ the size figure). The actual size of each part may be slightly bigger than
+ the maximum stated (a few hundred bytes at most).
+ .TP
+ .B \-X
+ Encryption with DES Electronic Code Block algorithm.
+ You will be prompted for a key, unless you specify one on the command line via
+ the \fB\-k\fR option.
+ .TP
+ .B \-a\fI address
+ Ask the unkiting process to send an acknowldgment to the specified e-mail
+ address upon successful extraction.
+ .TP
+ .B \-d\fI dir
+ Put temporary files in the specified directory. This is useful if you do not
+ have writing permission in the current directory. If you specify a common
+ directory like \fI/tmp\fR, be sure to use the \fB\-n\fR option or your kit
+ might be clobbered if somebody else is doing the same thing.
+ .TP
+ .B \-e
+ Edit instructions to be sent at the top of each part.
+ .TP
+ .B \-f
+ Get instructions to be sent at the top of each part from standard input.
+ .TP
+ .B \-h
+ Print usage and option summary.
+ .TP
+ .B \-k\fI key
+ Set the key to be used for encryption. The \fB\-x\fR option will be assumed,
+ unless \fB\-X\fR is explicitely given to override the default.
+ .TP
+ .B \-m\fI address
+ Invoke \fImailkit\fR to send all the parts at the given address. Several
+ \fB\-m\fR may be specifed to send the package to more than one recipient. The
+ kit parts will be removed at the end, unless \fB\-p\fR is given. When sending
+ large files to multiple recipients, it is wise to use this option in case one
+ part gets lost.
+ .TP
+ .B \-l\fI file
+ Send the kit parts to the recipients held in the file (one recipient per line).
+ .TP
+ .B \-n\fI basename
+ Set the basename of the generated parts. The default is \fIKit\fR. You should
+ use this option when a kit is already present in the current directory, or when
+ you use something like \fB\-d /tmp\fR.
+ .TP
+ .B \-p
+ Preserve file sent. This option is meaningful only when \fB\-m\fR or \fB-l\fR
+ is given.
+ .TP
+ .B \-s\fI name
+ Set the kit name, which will be copied as-is into the Subject of messages
+ sent by \fImailkit\fR (provided \fB\-m\fR or \fB\-l\fR is specified), and also
+ in the automatic acknowledgment. By default, the name of the first directory
+ or file specified on the command line will be used.
+ .TP
+ .B \-x
+ Use DES Cipher Block Chaining encryption algorithm.
+ You will be prompted for a key, unless you specify one on the command line via
+ the \fB\-k\fR option.
+ '''
+ ''' Mailkit
+ '''
+ .PP
+ \fIMailkit\fR recognizes the following options:
+ .TP 15
+ .B \-E
+ Edit instructions which will be sent as part #0.
+ .TP
+ .B \-F
+ Get instructions to be sent as part #0 from standard input.
+ .TP
+ .B \-V
+ Print version number and patchlevel.
+ .TP
+ .B \-c
+ Clean up after each part sent: all the parts successfully sent will be
+ removed from the disk.
+ .TP
+ .B \-e
+ Edit instructions to be sent at the top of each part.
+ .TP
+ .B \-f
+ Get instructions to be sent at the top of each part from standard input.
+ .TP
+ .B \-h
+ Print usage and option summary.
+ .TP
+ .B \-l\fI file
+ Get the recipient list from a file (one recipient per line).
+ .TP
+ .B \-n\fI basename
+ Set the basename of the generated parts. The default is \fIKit\fR. You should
+ use this option when more than one kit is present in the current directory,
+ or when you used the \fIkit\fR's \fB\-n\fR option to change the default
+ basename.
+ .TP
+ .B \-p
+ Preserve files sent. This is the default, unless \fB\-c\fR is specified.
+ .TP
+ .B \-r\fI range
+ Specify which parts are to be sent. For instance, \fB\-r\fI 1,4-7\fR would
+ send part #1 and then parts #4 through #7.
+ '''
+ ''' Unkit
+ '''
+ .PP
+ \fIUnkit\fR uses the following options:
+ .TP 15
+ .B \-V
+ Print version number and patchlevel.
+ .TP
+ .B \-b
+ Force usage of \fIbadtar\fR.
+ .TP
+ .B \-h
+ Print usage and option summary.
+ .TP
+ .B \-k\fI key
+ Set the key to be used for data decryption. \fIUnkit\fR is able to determine
+ automatically whether decryption is needed or not and will prompt you for the
+ key unless this option is used.
+ .TP
+ .B \-l
+ Lists the files contained in the kit package without extracting them.
+ .TP
+ .B \-r
+ Remove input files if unshar succeeds.
  .SH FILES
  .PD 0
  .TP 15

Index: kit/unkit.SH
Prereq: 2.0.1.14
*** kit/unkit.SH.old	Mon Jan 11 18:09:28 1993
--- kit/unkit.SH	Mon Jan 11 18:09:29 1993
***************
*** 19,27 ****
  # @(#) (c) E. Mogenet April 1990
  # @(#) (c) R. Manfredi, 1990 1991
  
! # $Id: unkit.SH,v 2.0.1.14 92/11/03 10:12:44 ram Exp $
  #
  # $Log:	unkit.SH,v $
  # Revision 2.0.1.14  92/11/03  10:12:44  ram
  # patch21: option parsing can now deal with embeded spaces in arguments
  # 
--- 19,31 ----
  # @(#) (c) E. Mogenet April 1990
  # @(#) (c) R. Manfredi, 1990 1991
  
! # $Id: unkit.SH,v 2.0.1.15 93/01/11 18:07:29 ram Exp $
  #
  # $Log:	unkit.SH,v $
+ # Revision 2.0.1.15  93/01/11  18:07:29  ram
+ # patch22: now uses external getopt script for option parsing
+ # patch22: fixed some typos in the help message
+ # 
  # Revision 2.0.1.14  92/11/03  10:12:44  ram
  # patch21: option parsing can now deal with embeded spaces in arguments
  # 
***************
*** 85,90 ****
--- 89,95 ----
  # Which patch-level is it ?
  pl='$PATCHLEVEL'
  version='$VERSION'
+ libdir='$privlib'
  
  # Tar options to be used
  badtar='$needbtar'
***************
*** 126,133 ****
  echo "Usage: unkit [-bhlprV] [-k key] [file1 ... filen]";
  echo " "" -b : force use of badtar ($badtar by default).";
  echo " "" -h : give this help message.";
! echo " "" -k : sets the key used for data decryption.";
! echo " "" -l : list the contents of a the kit files.";
  echo " "" -p : preserve input files (default).";
  echo " "" -r : remove input files if unshar succeeds.";
  echo " "" -V : print current version and patch-level.";
--- 131,138 ----
  echo "Usage: unkit [-bhlprV] [-k key] [file1 ... filen]";
  echo " "" -b : force use of badtar ($badtar by default).";
  echo " "" -h : give this help message.";
! echo " "" -k : set the key used for data decryption.";
! echo " "" -l : list files held in the kit parts.";
  echo " "" -p : preserve input files (default).";
  echo " "" -r : remove input files if unshar succeeds.";
  echo " "" -V : print current version and patch-level.";
***************
*** 135,188 ****
  '
  
  # Process the command line options
! set X `for arg in "$@"; do echo $arg; done | awk '
! BEGIN {
! 	optstr = "bhlprVk:";	# getopt-style specification
! 
! 	len = length(optstr);
! 	for (i = 1; i <= len; i++) {
! 		c = substr(optstr, i, 1);
! 		if (i < len) a = substr(optstr, i + 1, 1); else a = "";
! 		if (a == ":") {
! 			arg[c] = 1;
! 			i++;
! 		}
! 		opt[c] = 1;
! 	}
! }
! {
! 	expect = 0;
! 	str = $0;
! 	if (substr(str, 1, 1) != "-") {
! 		printf("'"'%s'"'\n", str);
! 		next;
! 	}
! 	len = length($0);
! 	for (i = 2; i <= len; i++) {
! 		c = substr(str, i, 1);
! 		if (!opt[c]) {
! 			printf("-%s\n", substr(str, i));
! 			next;
! 		}
! 		printf("-%s\n", c);
! 		if (arg[c]) {
! 			if (i < len)
! 				printf("'"'%s'"'\n", substr(str, i + 1));
! 			else
! 				expect = 1;
! 			next;
! 		}
! 	}
! }
! END {
! 	if (expect)
! 		print "?";
! }
! '`
! eval "set $*"
! shift
! 
! # Option parsing
  while test $# -gt 0
  do
  	case "$1" in
--- 140,146 ----
  '
  
  # Process the command line options
! eval "set X "`$libdir/getopt bhlprVk: "$@"`; shift
  while test $# -gt 0
  do
  	case "$1" in

Index: kit/getopt.SH
*** kit/getopt.SH.old	Mon Jan 11 18:09:15 1993
--- kit/getopt.SH	Mon Jan 11 18:09:15 1993
***************
*** 0 ****
--- 1,93 ----
+ case $CONFIG in
+ '')
+ 	if test ! -f config.sh; then
+ 		ln ../config.sh . || \
+ 		ln ../../config.sh . || \
+ 		ln ../../../config.sh . || \
+ 		ln ../../../../config.sh . || \
+ 		(echo "Can't find config.sh."; exit 1)
+ 	fi 2>/dev/null
+ 	. ./config.sh
+ 	;;
+ esac
+ case "$0" in
+ */*) cd `expr X$0 : 'X\(.*\)/'` ;;
+ esac
+ echo "Extracting kit/getopt (with variable substitutions)"
+ $spitshell >getopt <<!GROK!THIS!
+ $startsh
+ !GROK!THIS!
+ $spitshell >>getopt <<'!NO!SUBS!'
+ 
+ # Usage: getopt optstr [options]
+ #
+ # Here is a typical use inside a script:
+ #	eval "set X "`getopt optstr "$@"`
+ #	shift
+ #
+ # Then the $* array can then be parsed as usual, with all the options up to
+ # any optional '--' split up, for instance '-lfoo' becomes '-l foo' if l: is
+ # given in optstr, and '-lf' becomes '-l -f' if only lf is given as optstr.
+ 
+ # $Id: getopt.SH,v 2.0.1.1 93/01/11 18:04:27 ram Exp $
+ #
+ # $Log:	getopt.SH,v $
+ # Revision 2.0.1.1  93/01/11  18:04:27  ram
+ # patch22: created
+ # 
+ 
+ # Options specification (getopt style)
+ optstr=$1; shift
+ 
+ # Process the command line options
+ set X `for arg in "$@"; do echo $arg; done | awk '
+ BEGIN {
+ 	optstr = "'$optstr'";	# getopt-style specification
+ 
+ 	len = length(optstr);
+ 	for (i = 1; i <= len; i++) {
+ 		c = substr(optstr, i, 1);
+ 		if (i < len) a = substr(optstr, i + 1, 1); else a = "";
+ 		if (a == ":") {
+ 			arg[c] = 1;
+ 			i++;
+ 		}
+ 		opt[c] = 1;
+ 	}
+ }
+ {
+ 	expect = 0;
+ 	str = $0;
+ 	if (str == "--")
+ 		ended = 1;
+ 	if (ended || substr(str, 1, 1) != "-") {
+ 		printf("'"'%s'"'\n", str);
+ 		next;
+ 	}
+ 	len = length($0);
+ 	for (i = 2; i <= len; i++) {
+ 		c = substr(str, i, 1);
+ 		if (!opt[c]) {
+ 			printf("-%s\n", substr(str, i));
+ 			next;
+ 		}
+ 		printf("-%s\n", c);
+ 		if (arg[c]) {
+ 			if (i < len)
+ 				printf("'"'%s'"'\n", substr(str, i + 1));
+ 			else
+ 				expect = 1;
+ 			next;
+ 		}
+ 	}
+ }
+ END {
+ 	if (expect)
+ 		print "?";
+ }
+ '`
+ shift
+ echo $@
+ !NO!SUBS!
+ chmod 755 getopt
+ $eunicefix getopt

Index: kit/mailkit.SH
Prereq: 2.0.1.11
*** kit/mailkit.SH.old	Mon Jan 11 18:09:23 1993
--- kit/mailkit.SH	Mon Jan 11 18:09:24 1993
***************
*** 18,26 ****
  # @(#) Mailer for kit files
  # @(#) (c) R. Manfredi, 1990 1991
  
! # $Id: mailkit.SH,v 2.0.1.11 92/11/03 10:12:40 ram Exp $
  #
  # $Log:	mailkit.SH,v $
  # Revision 2.0.1.11  92/11/03  10:12:40  ram
  # patch21: option parsing can now deal with embeded spaces in arguments
  # 
--- 18,29 ----
  # @(#) Mailer for kit files
  # @(#) (c) R. Manfredi, 1990 1991
  
! # $Id: mailkit.SH,v 2.0.1.12 93/01/11 18:06:55 ram Exp $
  #
  # $Log:	mailkit.SH,v $
+ # Revision 2.0.1.12  93/01/11  18:06:55  ram
+ # patch22: now uses external getopt script for option parsing
+ # 
  # Revision 2.0.1.11  92/11/03  10:12:40  ram
  # patch21: option parsing can now deal with embeded spaces in arguments
  # 
***************
*** 127,180 ****
  '
  
  # Process the command line options
! set X `for arg in "$@"; do echo $arg; done | awk '
! BEGIN {
! 	optstr = "EFVcefhpn:l:r:";	# getopt-style specification
! 
! 	len = length(optstr);
! 	for (i = 1; i <= len; i++) {
! 		c = substr(optstr, i, 1);
! 		if (i < len) a = substr(optstr, i + 1, 1); else a = "";
! 		if (a == ":") {
! 			arg[c] = 1;
! 			i++;
! 		}
! 		opt[c] = 1;
! 	}
! }
! {
! 	expect = 0;
! 	str = $0;
! 	if (substr(str, 1, 1) != "-") {
! 		printf("'"'%s'"'\n", str);
! 		next;
! 	}
! 	len = length($0);
! 	for (i = 2; i <= len; i++) {
! 		c = substr(str, i, 1);
! 		if (!opt[c]) {
! 			printf("-%s\n", substr(str, i));
! 			next;
! 		}
! 		printf("-%s\n", c);
! 		if (arg[c]) {
! 			if (i < len)
! 				printf("'"'%s'"'\n", substr(str, i + 1));
! 			else
! 				expect = 1;
! 			next;
! 		}
! 	}
! }
! END {
! 	if (expect)
! 		print "?";
! }
! '`
! eval "set $*"
! shift
! 
! # Argument parsing
  while test $# -gt 0
  do
  	case "$1" in
--- 130,136 ----
  '
  
  # Process the command line options
! eval "set X "`$libdir/getopt EFVcefhpn:l:r: "$@"`; shift
  while test $# -gt 0
  do
  	case "$1" in

Index: shar/makeshar.SH
Prereq: 2.0.1.4
*** shar/makeshar.SH.old	Mon Jan 11 18:09:36 1993
--- shar/makeshar.SH	Mon Jan 11 18:09:36 1993
***************
*** 17,25 ****
  $startsh
  # (c) Raphael Manfredi, December 25th 1991
  
! # $Id: makeshar.SH,v 2.0.1.4 92/05/02 14:19:45 ram Exp $
  #
  # $Log:	makeshar.SH,v $
  # Revision 2.0.1.4  92/05/02  14:19:45  ram
  # patch16: maximum part size can now be specified via -s
  # 
--- 17,28 ----
  $startsh
  # (c) Raphael Manfredi, December 25th 1991
  
! # $Id: makeshar.SH,v 2.0.1.5 93/01/11 18:08:54 ram Exp $
  #
  # $Log:	makeshar.SH,v $
+ # Revision 2.0.1.5  93/01/11  18:08:54  ram
+ # patch22: sorting done numerically with -n option
+ # 
  # Revision 2.0.1.4  92/05/02  14:19:45  ram
  # patch16: maximum part size can now be specified via -s
  # 
***************
*** 81,87 ****
  			echo "`wc -c < $i` $i"
  		fi
  	done
! ) | sort -r | awk '
  # Awk is fed with a list of sizes and filenames, sorted in reverse order,
  # i.e. the biggest files come first. Its output is a list of files to be
  # put in the archives, each line counting for one part. The first line is
--- 84,90 ----
  			echo "`wc -c < $i` $i"
  		fi
  	done
! ) | sort -n -r | awk '
  # Awk is fed with a list of sizes and filenames, sorted in reverse order,
  # i.e. the biggest files come first. Its output is a list of files to be
  # put in the archives, each line counting for one part. The first line is

Index: kit/Makefile.SH
Prereq: 2.0.1.6
*** kit/Makefile.SH.old	Mon Jan 11 18:09:12 1993
--- kit/Makefile.SH	Mon Jan 11 18:09:13 1993
***************
*** 18,26 ****
  # Makefile for kit (sub-directory kit)
  #
  
! # $Id: Makefile.SH,v 2.0.1.6 92/09/04 19:22:28 ram Exp $
  #
  # $Log:	Makefile.SH,v $
  # Revision 2.0.1.6  92/09/04  19:22:28  ram
  # patch19: forgot the 'range' target
  # 
--- 18,29 ----
  # Makefile for kit (sub-directory kit)
  #
  
! # $Id: Makefile.SH,v 2.0.1.7 93/01/11 18:04:13 ram Exp $
  #
  # $Log:	Makefile.SH,v $
+ # Revision 2.0.1.7  93/01/11  18:04:13  ram
+ # patch22: new getopt target
+ # 
  # Revision 2.0.1.6  92/09/04  19:22:28  ram
  # patch19: forgot the 'range' target
  # 
***************
*** 53,59 ****
  !GROK!THIS!
  $spitshell >>Makefile <<'!NO!SUBS!'
  bin = kit mailkit unkit
! lib = minikit range
  scripts = $(bin) $(lib)
  scriptsh = kit.SH mailkit.SH unkit.SH minikit.SH
  added = Makefile config.sh
--- 56,62 ----
  !GROK!THIS!
  $spitshell >>Makefile <<'!NO!SUBS!'
  bin = kit mailkit unkit
! lib = minikit range getopt
  scripts = $(bin) $(lib)
  scriptsh = kit.SH mailkit.SH unkit.SH minikit.SH
  added = Makefile config.sh
***************
*** 73,78 ****
--- 76,84 ----
  	sh $@.SH
  
  range: range.SH
+ 	sh $@.SH
+ 
+ getopt: getopt.SH
  	sh $@.SH
  
  install: $(scripts)

Index: MANIFEST
*** MANIFEST.old	Mon Jan 11 18:09:39 1993
--- MANIFEST	Mon Jan 11 18:09:39 1993
***************
*** 25,30 ****
--- 25,31 ----
  des/testdata               A set of tests to certify the des
  install.SH                 BSD-like installation script
  kit/Makefile.SH            Makefile for scripts
+ kit/getopt.SH              Option parsing library
  kit/kit.SH                 The main script-shell
  kit/mailkit.SH             Mails parts generated by "kit"
  kit/minikit.SH             The minikit script for kit extraction

*** End of Patch 22 ***
