Newsgroups: comp.sources.unix
From: pleierc@informatik.tu-muenchen.de (Christoph Pleier)
Subject: v27i177: distributed-c-2.1 - Distributed C Development Environment, V2.1, Part03/18
References: <1.756634932.28500@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: pleierc@informatik.tu-muenchen.de (Christoph Pleier)
Posting-Number: Volume 27, Issue 177
Archive-Name: distributed-c-2.1/part03

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 3 (of 18)."
# Contents:  config/Makefile dcadmin/CheckAcOrTer.c dcadmin/Kill.c
#   dcadmin/Makefile dcadmin/configure.l dcadmin/error.c dcc/Malloc.c
#   dcc/help.c dcc/usage.c dcinstall/Usage.c dclocate/Usage.c
#   examples/travel/germany.c include/analyse.h include/dcinstall.h
#   include/extern.h include/ipc_socket.h ipc/p3.c ipc/pa.c ipc/pb.c
#   lib/RuntimeError.c macros.README
# Wrapped by vixie@gw.home.vix.com on Thu Dec 23 00:11:57 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'config/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'config/Makefile'\"
else
echo shar: Extracting \"'config/Makefile'\" \(3577 characters\)
sed "s/^X//" >'config/Makefile' <<'END_OF_FILE'
X#***************************************************************************
X#*                                                                         *
X#* @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X#* @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X#* @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X#* @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X#* @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X#*                                                                         *
X#*              A compiler for distributed programming with C              *
X#*                                                                         *
X#*                             M a k e f i l e                             *
X#*                                                                         *
X#*                            Package : Configuration Files Parsers        *
X#*                            Version : 1.0                                *
X#*                       CreationDate : 26.02.92                           *
X#*                         LastUpDate : 26.02.92                           *
X#*                                                                         *
X#*  The makefile to generate the configuration files parsers object files. *
X#*                                                                         *
X#*      Copyright (C) 1992-1994 by Franz Distler and Christoph Pleier.     *
X#*                          All rights reserved!                           *
X#***************************************************************************/
X
X#.SILENT
X
X# Some utility programs
X  SHELL = /bin/sh
X   MAKE = make
X   YACC = yacc
X YFLAGS = -vd
X   LINT = /usr/bin/lint
X
X# The path of the include files
XINCLUDEDIR = ../include
X
X# Include target system specific macros
Xinclude ../macros
X
X# Set appropriate macros
X     CC = $(CC_CFGFP)
X CFLAGS = $(CFLAGS_CFGFP) -I$(INCLUDEDIR) -DYYDEBUG
X
X# All needed source files 
XSRCS = 	debug.c symb_general.c symb_program.c symb_system.c util.c \
X	pars_program.c pars_system.c scanner.c yyfuncts.c \
X	SaveSymbtab.c ReadSymbtab.c
X
X# All object files needed to build the library
XOBJS = $(SRCS:.c=.o)
X
X.c.o:
X	@echo "***** Compiling $<"
X	$(CC) $(CFLAGS) -c $<
X
Xall:
X	@echo ""
X	@echo "GENERATING THE CONFIGURATION FILES PARSERS OBJECT FILES..."
X	$(MAKE) $(OBJS)
X	@echo DONE!
X
Xscanner.c: scanner.l
X	@echo "***** Generating the configuration files scanner"
X	$(LEX) $(LFLAGS) scanner.l
X	mv lex.yy.c scanner.c
X
Xpars_system.c: system.y ../include/cfgparsers.h
X	@echo "***** Generating the system configuration file parser"
X	$(YACC) $(YFLAGS) system.y
X	mv y.tab.c $@
X
Xpars_program.c: program.y ../include/cfgparsers.h
X	@echo "***** Generating the program configuration file parser"
X	$(YACC) $(YFLAGS) program.y
X	mv y.tab.c $@
X
Xpars_system.o: pars_system.c
X	@echo "***** Compiling $<"
X	$(CC) $(CFLAGS) -Dyyparse=parse_system -c $<
X
Xpars_program.o: pars_program.c
X	@echo "***** Compiling $<"
X	$(CC) $(CFLAGS) -Dyyparse=parse_program -DSECOND_PARSER -c $<
X#	$(CC) $(CFLAGS) -Dyyparse=parse_program -Dyymaxdepth=pyymaxdepth -c $<
X
Xnew:
X	@touch *.c
X	$(MAKE) all
X
Xcheck:
X	@echo "checking $(SRCS)"
X	$(LINT) $(CFLAGS) $(SRCS) | more
X
Xdepend: 
X	@echo "creating dependencies in Makefile"
X	makedepend $(CFLAGS) $(SRCS)
X
Xclean:
X	@echo "Cleaning the directory..."
X	-\rm -f *.o pars_system.c pars_program.c y.tab.h y.output scanner.c
X	@echo done!
X
X# Other dependencies 
Xy.tab.h: y.tab.c
X$(OBJS): ../include/cfgparsers.h
END_OF_FILE
if test 3577 -ne `wc -c <'config/Makefile'`; then
    echo shar: \"'config/Makefile'\" unpacked with wrong size!
fi
# end of 'config/Makefile'
fi
if test -f 'dcadmin/CheckAcOrTer.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dcadmin/CheckAcOrTer.c'\"
else
echo shar: Extracting \"'dcadmin/CheckAcOrTer.c'\" \(4004 characters\)
sed "s/^X//" >'dcadmin/CheckAcOrTer.c' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                       C h e c k A c O r T e r . c                       *
X *                                                                         *
X *                            Package : Administration Process             *
X *                            Version : 1.0                                *
X *                       CreationDate : 16.09.90                           *
X *                         LastUpDate : 02.03.92                           *
X *                                                                         *
X * The routine 'CheckAcceptOrTerminate' which checks if all processes are  *
X * in accept or terminste state.                                           *
X *                                                                         *
X *                  Portions Copyright 1990 Franz Distler                  *
X *               Copyright (C) 1990-1994 by Christoph Pleier               *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#include <stdio.h>
X#include <sys/types.h>
X#ifdef HETEROGENEOUS
X# include <rpc/rpc.h>
X#endif
X#include "ipc.h"
X#include "dcc.h"
X#include "run_Errno.h"
X#include "timeout.h"
X#include "dcadmin.h"
X
X#ifdef ADMINDEBUG
X# define DEBUGPUTS(str)		fprintf(dfile,"[dbg] %s %s\n", _processprefix, str)
X# define DEBUGFPRINTF(f, a)	fprintf(dfile, f, a)
X#else
X# define DEBUGPUTS(str)		/* nothing */
X# define DEBUGFPRINTF(f, a)	/* nothing */
X#endif /* ADMINDEBUG /**/
X
X#define EXIT(v)			fprintf(stderr, "dcadmin: Terminating!\n"); \
X				exit(v)
X
X/******************************************************************************
X * CheckAcceptOrTerminate()                                                   *
X *                                                                            *
X * Check if all processes of the 'process data list' have the process state   *
X * 'accept or terminate'. Sets the global flag 'shutdown' if all processes    *
X * have the state accept or terminate.                                        *
X *                                                                            *
X * Retuen values: OK upon success / ERROR upon error                          *
X ******************************************************************************/
Xint
XCheckAcceptOrTerminate()
X{
X    register struct pdat_list *aptr;
X
X    DEBUGPUTS("CHECKING status of the remaining processes");
X
X    if (!pdat_first)
X	return(0);
X
X    for(aptr = pdat_first; aptr; aptr = aptr->next) {
X	if (aptr->status == RUNNING) {
X		DEBUGPUTS("STILL some processes running");
X		return(OK);
X	}
X    } /* for */
X
X    DEBUGPUTS("ALL processes in accept or terminate state");
X
X    /* return result via global variable */
X    shutdown = 1;
X} /* CheckAcceptOrTerminate */
END_OF_FILE
if test 4004 -ne `wc -c <'dcadmin/CheckAcOrTer.c'`; then
    echo shar: \"'dcadmin/CheckAcOrTer.c'\" unpacked with wrong size!
fi
# end of 'dcadmin/CheckAcOrTer.c'
fi
if test -f 'dcadmin/Kill.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dcadmin/Kill.c'\"
else
echo shar: Extracting \"'dcadmin/Kill.c'\" \(4207 characters\)
sed "s/^X//" >'dcadmin/Kill.c' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                               K i l l . c                               *
X *                                                                         *
X *                            Package : Administration Process             *
X *                            Version : 1.0                                *
X *                       CreationDate : 16.09.90                           *
X *                         LastUpDate : 02.03.92                           *
X *                                                                         *
X * The routine 'KillProcesses' which forces all created processes to end   *
X * execution.                                                              *
X *                                                                         *
X *                  Portions Copyright 1990 Franz Distler                  *
X *               Copyright (C) 1990-1994 by Christoph Pleier               *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#include <stdio.h>
X#include <sys/types.h>
X#ifdef HETEROGENEOUS
X# include <rpc/rpc.h>
X#endif
X#include <signal.h>
X#include <errno.h>
X#include "ipc.h"
X#include "dcc.h"
X#include "run_Errno.h"
X#include "timeout.h"
X#include "dcadmin.h"
X
X#ifdef ADMINDEBUG
X# define DEBUGPUTS(str)		fprintf(dfile,"[dbg] %s %s\n", _processprefix, str)
X# define DEBUGFPRINTF(f, a)	fprintf(dfile, f, a)
X#else
X# define DEBUGPUTS(str)		/* nothing */
X# define DEBUGFPRINTF(f, a)	/* nothing */
X#endif /* ADMINDEBUG /**/
X
X#define EXIT(v)			fprintf(stderr, "dcadmin: Terminating!\n"); \
X				exit(v)
X
X/******************************************************************************
X * KillProcesses()                                                            *
X *                                                                            *
X * Force all processes of the 'process data list' to terminate and exit.      *
X *                                                                            *
X * Return values: None                                                        *
X ******************************************************************************/
Xint
XKillProcesses()
X{
X    register struct pdat_list *ptr;
X	
X    fprintf(stderr, "***** REMOVING GENERATED PROCESSES *****\n");
X    for(ptr = pdat_first; ptr; ptr = ptr->next) {
X#ifdef ADMINDEBUG
X# ifdef iPSC
X	fprintf(stderr, "PROCESS: %s, NODE: %ld, PID: %ld\n", 
X	    ptr->p_descr.processname, ptr->p_descr.port.node, 
X	    ptr->p_descr.pid);
X# else
X#  ifdef SINGLE
X	fprintf(stderr, "PROCESS: %s, PID: %d\n",
X	    ptr->p_descr.processname, ptr->p_descr.pid);
X#  else /* HOMOGENEOUS || HETEROGENEOUS */
X	fprintf(stderr, "PROCESS: %s, HOST: %s, PID: %d\n", 
X	    ptr->p_descr.processname, ptr->p_descr.port.hostname, 
X	    ptr->p_descr.pid);
X#  endif /* SINGLE /**/
X# endif /* iPSC /**/
X#endif /* ADMINDEBUG /**/
X	_destroy_process(ptr->p_descr, SIGKILL);
X    } /* for */
X    EXIT(ERROR);
X} /* KillProcesses */
END_OF_FILE
if test 4207 -ne `wc -c <'dcadmin/Kill.c'`; then
    echo shar: \"'dcadmin/Kill.c'\" unpacked with wrong size!
fi
# end of 'dcadmin/Kill.c'
fi
if test -f 'dcadmin/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dcadmin/Makefile'\"
else
echo shar: Extracting \"'dcadmin/Makefile'\" \(4454 characters\)
sed "s/^X//" >'dcadmin/Makefile' <<'END_OF_FILE'
X#***************************************************************************
X#*                                                                         *
X#* @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X#* @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X#* @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X#* @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X#* @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X#*                                                                         *
X#*              A compiler for distributed programming with C              *
X#*                                                                         *
X#*                             M a k e f i l e                             *
X#*                                                                         *
X#*                            Package : Administration Process             *
X#*                            Version : 1.0                                *
X#*                       CreationDate : 11.10.90                           *
X#*                         LastUpDate : 02.03.92                           *
X#*                                                                         *
X#*          The makefile to generate the administration process.           *
X#*                                                                         *
X#*     Copyright (C) 1990-1994 by Franz Distler and Christoph Pleier.      *
X#*                          All rights reserved!                           *
X#***************************************************************************/
X
X#.SILENT
X
X# Some utility programs
X  SHELL = /bin/sh
X   MAKE = make
X   YACC = yacc 
X YFLAGS = -vd
X#   YACC = bison 
X# YFLAGS = -yvd
X    LEX = lex
X LFLAGS =
X
X# The path of the include files
XINCLUDEDIR = ../include
X
X# The runtime library
X RUNLIB = ../lib/dcc.a
X
X# Include target system specific macros
Xinclude ../macros
X
X# Set appropriate macros
X     CC = $(CC_DCA)
X CFLAGS = $(CFLAGS_DCA) -DDCADMIN -I$(INCLUDEDIR) -DUSE_MAPFILE 
X#CFLAGS = $(CFLAGS_DCA) -DDCADMIN -I$(INCLUDEDIR) -DADMINDEBUG
X     LD = $(LD_DCA)
XLDFLAGS = $(LDFLAGS_DCA)
X   LIBS = $(LIBS_DCA)
X
X# The name of the administration process
XADMINNAME = dcadmin
X
X# All source files needed to build the administration process
XSRCS = 	CheckAcOrTer.c configure.c debug.c error.c GetCfgFile.c \
X	Kill.c Location.c main.c ProcessList.c Shutdown.c signals.c \
X	Status.c Usage.c
X
X# All object files needed to build the administration process
XOBJS = $(SRCS:.c=.o)
X
X# The object files for parsing and managing the symbol table
XPARSOBJS = ../config/debug.o ../config/symb_general.o ../config/util.o \
X	   ../config/symb_system.o ../config/symb_program.o \
X	   ../config/ReadSymbtab.o
X
X# All include files needed to build the administration process
XINCLFILES = $(INCLUDEDIR)/config.h $(INCLUDEDIR)/extern.h \
X	    $(INCLUDEDIR)/ipc.h $(INCLUDEDIR)/dcc.h \
X	    $(INCLUDEDIR)/run_Errno.h $(INCLUDEDIR)/timeout.h \
X	    $(INCLUDEDIR)/version.h
X
X.c.o:
X	@echo "***** Compiling $<"
X	$(CC) $(CFLAGS) -c $<
X
Xall: $(INCLUDEDIR)/ipc.h
X	@echo ""
X	@echo "BUILDING THE ADMINISTRATION PROCESS..."
X	$(MAKE) $(ADMINNAME)
X	@echo DONE!
X
X$(ADMINNAME): $(INCLFILES) $(OBJS) $(PARSOBJS)
X	@echo "***** Loading"
X	$(LD) -o $(ADMINNAME) $(LDFLAGS) $(OBJS) $(PARSOBJS) $(RUNLIB) $(LIBS)
X
X$(PARSOBJS):
X	( cd ../config ; $(MAKE) )
X
Xlex.yy.c: configure.l
X	@echo "***** Generating the configuration file scanner"
X	$(LEX) $(LFLAGS) configure.l
X
Xlextest: ../dcc/lex.dummy.o lex.yy.c
X	@echo "***** Building the test scanner lextest"
X	$(CC) -o lextest $(CFLAGS) -DDEBUGLEX ../dcc/lex.dummy.o lex.yy.c -ll
X
Xconfigure.c: configure.y
X	@echo "***** Generating the configuration file parser"
X	$(YACC) $(YFLAGS) configure.y
X	mv y.tab.c configure.c
X
X$(INCLUDEDIR)/ipc.h:
X	( cd ../lib ; $(MAKE) )
X
Xdepend: $(INCLUDEDIR)/ipc.h lex.yy.c configure.c
X	@echo "creating dependencies in Makefile"
X	makedepend $(CFLAGS) $(SRCS)
X
Xclean:
X	@echo "Cleaning the directory..."
X	-\rm -f *.o $(ADMINNAME) y.output y.tab.h lex.yy.c configure.c
X	@echo done!
X
X# Other dependencies 
Xconfigure.o: ../include/ipc.h ../include/dcc.h ../include/dcadmin.h lex.yy.c
X$(OBJS): ../include/config.h ../include/extern.h ../include/ipc.h
X$(OBJS): ../include/dcc.h ../include/run_Errno.h ../include/run_errlist.h
X$(OBJS): ../include/timeout.h ../include/version.h ../include/dcadmin.h
END_OF_FILE
if test 4454 -ne `wc -c <'dcadmin/Makefile'`; then
    echo shar: \"'dcadmin/Makefile'\" unpacked with wrong size!
fi
# end of 'dcadmin/Makefile'
fi
if test -f 'dcadmin/configure.l' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dcadmin/configure.l'\"
else
echo shar: Extracting \"'dcadmin/configure.l'\" \(3561 characters\)
sed "s/^X//" >'dcadmin/configure.l' <<'END_OF_FILE'
X%{
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                          c o n f i g u r e . l                          *
X *                                                                         *
X *                            Package : Administration Process             *
X *                            Version : 1.0                                *
X *                       CreationDate : 23.10.90                           *
X *                         LastUpDate : 02.12.93                           *
X *                                                                         *
X * The input file to build the scanner to interpret the configuration file.*
X *                                                                         *
X *               Copyright (C) 1990-1994 by Christoph Pleier               *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#ifdef DEBUGLEX
X
X# include <assert.h>
X
Xmain()
X{
X	char *p;
X
X	assert(sizeof(int) >= sizeof(char *));
X	while(p = (char *) yylex())
X		printf("%-10.10s is \"%s\"\n", p, yytext);
X}
X
Xint yynerrs = 0;
X	
X# define token(x)	(int) "x"
X
X#else 
X
X# define token(x)	x
X
X#endif /* DEBUGLEX /**/
X
Xstatic char *strsave();
X
X%}
X
Xnum		[0-9]*
Xat		"at"
Xname		[0-9a-zA-Z_,&!\$\%\.\-]*
Xwhitespace	[ \t\n]
Xcomment		[#][^\n]*
Xother		[^\n]
X
X%%
X
X{comment}	;
X{whitespace}	;
X{at}		{ return(token(AT)); }
X{num}		{ yylval.y_int = atoi(yytext); return(token(NUM)); }
X{name}		{ yylval.y_str = strsave(yytext); return(token(NAME)); }
X{other}		{ return(token(yytext[0])); }
X
X%%
X
X/******************************************************************************
X * strsave()                                                                  *
X *                                                                            *
X * Allocates appropriate memory and stores the string s.                      *
X *                                                                            *
X * Return values: pointer to stored string                                    *
X ******************************************************************************/
Xstatic char *strsave(s)
Xchar *s;
X{
X	char *ptr;
X
X	ptr = (char *) malloc(strlen(s)+1);
X	if (ptr == NULL) {
X		fputs("Panic: malloc() doesn't get heap space\n", stderr);
X		exit(-1);
X	} else {
X		strcpy(ptr, s);
X		return(ptr);
X	}
X} /* strsave */
END_OF_FILE
if test 3561 -ne `wc -c <'dcadmin/configure.l'`; then
    echo shar: \"'dcadmin/configure.l'\" unpacked with wrong size!
fi
# end of 'dcadmin/configure.l'
fi
if test -f 'dcadmin/error.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dcadmin/error.c'\"
else
echo shar: Extracting \"'dcadmin/error.c'\" \(4019 characters\)
sed "s/^X//" >'dcadmin/error.c' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                              e r r o r . c                              *
X *                                                                         *
X *                            Package : Administration Process             *
X *                            Version : 1.0                                *
X *                       CreationDate : 16.09.90                           *
X *                         LastUpDate : 07.12.93                           *
X *                                                                         *
X *          The routine 'error' which displays an error message.           *
X *                                                                         *
X *                  Portions Copyright 1990 Franz Distler                  *
X *               Copyright (C) 1990-1994 by Christoph Pleier               *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#include <stdio.h>
X#include <sys/types.h>
X#ifdef HETEROGENEOUS
X# include <rpc/rpc.h>
X#endif
X#include <errno.h>
X#include "ipc.h"
X#include "dcc.h"
X#include "run_Errno.h"
X#include "dcadmin.h"
X
X/******************************************************************************
X * error()                                                                    *
X *                                                                            *
X * Displays an error message.                                                 *
X *                                                                            *
X * Return values: None                                                        *
X ******************************************************************************/
Xint
Xerror(msg)
Xchar *msg;
X{
X    extern int        Errno,
X                      errno;
X    extern char      *sys_errlist[],
X                     *_programname,
X                     *_processname;
X    extern PORTDESCR  _own_port,
X                      _admin_port;
X    extern char *runtime_errlist[];
X
X    fputs("***** RUNTIME ERROR IN ADMINISTRATION PROCESS *****\n", stderr);
X
X    if (msg)
X        fprintf(stderr, "%s: ", msg);
X    if (strlen(msg)+strlen(runtime_errlist[Errno])+2 >= 80)
X        fputs("\n", stderr);
X
X    if (Errno != -1)
X        fprintf(stderr, "%s\n", runtime_errlist[Errno]);
X
X    fprintf(stderr, "reason: %s\n", sys_errlist[errno]);
X
X#ifdef ADMINDEBUG
X    if (dfile != stderr) {
X        fputs("***** RUNTIME ERROR IN ADMINISTRATION PROCESS *****\n", dfile);
X        if (msg)
X            fprintf(dfile, "%s: ", msg);
X        if (Errno != -1)
X            fprintf(dfile, "%s\n", runtime_errlist[Errno]);
X        fprintf(dfile, "reason: %s\n", sys_errlist[errno]);
X        if (_debugflush)
X	    fflush(dfile);
X    }
X#endif /* ADMINDEBUG /**/
X
X} /* error */
END_OF_FILE
if test 4019 -ne `wc -c <'dcadmin/error.c'`; then
    echo shar: \"'dcadmin/error.c'\" unpacked with wrong size!
fi
# end of 'dcadmin/error.c'
fi
if test -f 'dcc/Malloc.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dcc/Malloc.c'\"
else
echo shar: Extracting \"'dcc/Malloc.c'\" \(3695 characters\)
sed "s/^X//" >'dcc/Malloc.c' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                           M a l l o c . c                               *
X *                                                                         *
X *                            Package : Compiler                           *
X *                            Version : 1.0                                *
X *                       CreationDate : 21.08.90                           *
X *                         LastUpDate : 08.11.91                           *
X *                                                                         *
X *                The routines to allocate and free memory.                *
X *                                                                         *
X *                  Portions Copyright 1990 Franz Distler                  *
X *               Copyright (C) 1990-1994 by Christoph Pleier               *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#include <stdio.h>
X#ifdef CONVEX
X# include <stdlib.h>
X#else
X# include <malloc.h>
X#endif
X#include "config.h"
X
X/******************************************************************************
X * Malloc()                                                                   *
X *                                                                            *
X * Allocates memory of size 'size' and checks for error.                      *
X *                                                                            *
X * Return values: pointer to the allocated memory upon success                *
X ******************************************************************************/
Xchar *
XMalloc(size)
Xunsigned size;
X{
X    register char *ptr;
X
X    if (ptr = (char *) malloc(size + MALLOCADDVAL))
X	return(ptr);
X    Panic("can't get heap space in malloc()");
X} /* Malloc */
X
X/******************************************************************************
X * Free()                                                                     *
X *                                                                            *
X * Frees the allocated memory pointed to by specified by the pointer 'ptr'.   *
X *                                                                            *
X * Return values: none!                                                       *
X ******************************************************************************/
Xint
XFree(ptr)
Xchar *ptr;
X{
X    if (ptr) {
X	/* free(ptr); */
X    }
X} /* Free */
END_OF_FILE
if test 3695 -ne `wc -c <'dcc/Malloc.c'`; then
    echo shar: \"'dcc/Malloc.c'\" unpacked with wrong size!
fi
# end of 'dcc/Malloc.c'
fi
if test -f 'dcc/help.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dcc/help.c'\"
else
echo shar: Extracting \"'dcc/help.c'\" \(4341 characters\)
sed "s/^X//" >'dcc/help.c' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                              h e l p . c                                *
X *                                                                         *
X *                            Package : Compiler                           *
X *                            Version : 1.0                                *
X *                       CreationDate : 11.07.91                           *
X *                         LastUpDate : 11.07.91                           *
X *                                                                         *
X *                   Writes the help message to stdout.                    *
X *                                                                         *
X *               Copyright (C) 1991-1994 by Christoph Pleier               *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#include <stdio.h>
X#include "config.h"
X#include "extern.h"
X#include "functions.h"
X
X/******************************************************************************
X * display_help()                                                             *
X *                                                                            *
X * Displays the help message on stdout.                                       *
X *                                                                            *
X * Return values: none!                                                       *
X ******************************************************************************/
Xint
Xdisplay_help()
X{
X    puts("Description:");
X    puts("   dcc is a compiler for distributed programming with C");
X    puts("   and was implemented at Technische Universitaet Muenchen.");
X
X    puts("   The compiler converts source files written in the language DISTRIBUTED C");
X    puts("   to several Standard C code files. These generated files are then compiled");
X    puts("   and linked to executable programs by a Standard C compiler.");
X    puts("   The language DISTRIBUTED C consists of Standard C and additional constructs");
X    puts("   for distributed, parallel programming.");
X    puts("   These constructs are conceptual modelled like ADA and are statements");
X    puts("   for process specification, creation, synchronisation, communication and");
X    puts("   termination.\n");
X
X    (void) display_usage();
X
X    puts("Some of the default settings may be overwritten by environment variables:");
X    printf("   name        - meaning                      [default value]\n");
X    printf("   DCC_MAKE    - the make command to use      [make]\n");
X    printf("   DCC_CFLAGS  - the compiler flags           []\n");
X    printf("   DCC_LFLAGS  - the loader flags             []\n");
X    printf("   DCC_LIBS    - additional libraries         []\n");
X    printf("   DCC_CB      - the beautifier               []\n");
X    printf("   DCC_CBFLAGS - the beautifier flags         []\n");
X    printf("   DCC_TARGETS - availible target systems     [-target %s]\n",
X#ifdef SINGLE
X	"local"
X#else
X	"all"
X#endif
X	);
X    puts("");
X
X    (void) display_version();
X} /* display_help */
END_OF_FILE
if test 4341 -ne `wc -c <'dcc/help.c'`; then
    echo shar: \"'dcc/help.c'\" unpacked with wrong size!
fi
# end of 'dcc/help.c'
fi
if test -f 'dcc/usage.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dcc/usage.c'\"
else
echo shar: Extracting \"'dcc/usage.c'\" \(4221 characters\)
sed "s/^X//" >'dcc/usage.c' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                              u s a g e . c                              *
X *                                                                         *
X *                            Package : Compiler                           *
X *                            Version : 1.0                                *
X *                       CreationDate : 11.07.91                           *
X *                         LastUpDate : 18.02.92                           *
X *                                                                         *
X *                   Writes the usage message to stdout.                   *
X *                                                                         *
X *               Copyright (C) 1990-1994 by Christoph Pleier               *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#include <stdio.h>
X#include "config.h"
X#include "extern.h"
X#include "functions.h"
X
X/******************************************************************************
X * display_usage()                                                            *
X *                                                                            *
X * Displays the usage message on stdout.                                      *
X *                                                                            *
X * Return values: none!                                                       *
X ******************************************************************************/
Xint
Xdisplay_usage()
X{
X    puts("Usage: dcc [options] file");
X    puts("Options:");
X    puts("   -a             build all (compile, link and distribute files as well)");
X    puts("   -b             beautify generated files");
X    puts("   -e xxxx.xx     write the error messages to file 'xxxx.xx'");
X#ifdef HETEROGENEOUS
X    puts("   -f bufsize     use fixed value bufsize as encode/decode buffer size");
X#endif /* HETEROGENEOUS /**/
X    puts("   -h             display the help message");
X    puts("   -i             display informations about compiler actions");
X    puts("   -v             display the compiler configuration");
X    puts("   -Dname[=def]   define name with value def as if by a #define");
X    puts("   -E             preprocess source to stdout");
X    puts("   -I pathname    search for #include files in pathname too");
X    puts("   -A \"string\"    pass string as additional libraries to makefile");
X    puts("   -C \"string\"    pass string as compiler flags to makefile");
X    puts("   -L \"string\"    pass string as loader flags to makefile");
X#ifdef DEBUGFLAG
X    puts("   -S             write debug information to stdout");
X#endif /* DEBUGFLAG /**/
X#ifdef YYDEBUG
X    puts("   -Y             enable the parser debug mode");
X#endif /* YYDEBUG /**/
X    puts("");
X    puts("Some of the default settings may be overwritten by environment variables.");
X    puts("Type 'dcc -h' for more information.");
X    puts("");
X} /* display_usage */ 
END_OF_FILE
if test 4221 -ne `wc -c <'dcc/usage.c'`; then
    echo shar: \"'dcc/usage.c'\" unpacked with wrong size!
fi
# end of 'dcc/usage.c'
fi
if test -f 'dcinstall/Usage.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dcinstall/Usage.c'\"
else
echo shar: Extracting \"'dcinstall/Usage.c'\" \(3811 characters\)
sed "s/^X//" >'dcinstall/Usage.c' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                              U s a g e . c                              *
X *                                                                         *
X *                            Package : Installer Program                  *
X *                            Version : 1.0                                *
X *                       CreationDate : 20.11.91                           *
X *                         LastUpDate : 24.11.91                           *
X *                                                                         *
X *  The routine 'DisplayUsage' which writes the usage message to stdout.   *
X *                                                                         *
X *               Copyright (C) 1991-1994 by Christoph Pleier               *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#include <stdio.h>
X#include "cfgparsers.h"
X#include "dcinstall.h"
X
X/******************************************************************************
X * DisplayUsage()                                                             *
X *                                                                            *
X * Displays the usage message on stdout.                                      *
X *                                                                            *
X * Return values: none!                                                       *
X ******************************************************************************/
Xint
XDisplayUsage()
X{
X    puts("Usage: dcinstall [options] files...");
X    puts("Options:");
X    puts("   -f filename        use filename as configuration file");
X    printf("                      [default filename is \"~/%s\"]\n", CFGFILENAME);
X    puts("   -target local      target is local host");
X    puts("   -target all        targets are all hosts specified in configuration file");
X    puts("   -target hostname   target is hostname");
X    puts("   -prepare           prepare targets for remote compilation");
X    puts("   -clean             clean targets' remote compilation directory");
X    puts("   -crosscompile      use cross compilation at local host if possible");
X    /* puts("   -checkfile         check system configuration file"); */
X    puts("   -checktargets      check targets"); 
X    puts("   -verbose           print executed commands");
X    puts("   -noexecute         do not execute commands");
X#ifdef YYDEBUG
X    puts("   -yydebug           write infos about parsing to stdout");
X#endif /* YYDEBUG /**/
X    puts("");
X} /* DisplayUsage */ 
END_OF_FILE
if test 3811 -ne `wc -c <'dcinstall/Usage.c'`; then
    echo shar: \"'dcinstall/Usage.c'\" unpacked with wrong size!
fi
# end of 'dcinstall/Usage.c'
fi
if test -f 'dclocate/Usage.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dclocate/Usage.c'\"
else
echo shar: Extracting \"'dclocate/Usage.c'\" \(3906 characters\)
sed "s/^X//" >'dclocate/Usage.c' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                              U s a g e . c                              *
X *                                                                         *
X *                            Package : Locator Program                    *
X *                            Version : 1.0                                *
X *                       CreationDate : 26.02.92                           *
X *                         LastUpDate : 08.03.92                           *
X *                                                                         *
X *  The routine 'DisplayUsage' which writes the usage message to stdout.   *
X *                                                                         *
X *               Copyright (C) 1992-1994 by Christoph Pleier               *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#include <stdio.h>
X#include "cfgparsers.h"
X#include "dclocate.h"
X
X/******************************************************************************
X * DisplayUsage()                                                             *
X *                                                                            *
X * Displays the usage message on stdout.                                      *
X *                                                                            *
X * Return values: none!                                                       *
X ******************************************************************************/
Xint
XDisplayUsage()
X{
X    puts("Usage: dclocate [options] [filename]");
X    puts("Options:");
X    puts("   -pf filename  use filename as program configuration file");
X    puts("   -sf filename  use filename as system configuration file");
X    puts("   -porder crit  create priority lists with regard to crit.");
X    puts("                 crit may be a combination of ");
X    puts("                   p [preferred hosts]");
X    puts("                   w [accomplished wished ressources]");
X    puts("                   l [minimal probably load without regard of created procs.]");
X    puts("                   o [minimal probably load with regard of created processes]");
X    puts("                   c [minimal process creation costs]");
X    puts("                   i [minimal interprocess communication costs].");
X    puts("                 Sort the letters by criterion importance.");
X    puts("   -verbose      display infos about performed actions");
X    puts("   -show_result  display result on stdout, too");
X#ifdef YYDEBUG
X    puts("   -yydebug           write infos about parsing to stdout");
X#endif /* YYDEBUG /**/
X    puts("");
X} /* DisplayUsage */ 
END_OF_FILE
if test 3906 -ne `wc -c <'dclocate/Usage.c'`; then
    echo shar: \"'dclocate/Usage.c'\" unpacked with wrong size!
fi
# end of 'dclocate/Usage.c'
fi
if test -f 'examples/travel/germany.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'examples/travel/germany.c'\"
else
echo shar: Extracting \"'examples/travel/germany.c'\" \(4120 characters\)
sed "s/^X//" >'examples/travel/germany.c' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                          g e r m a n y . c                              *
X *                                                                         *
X *                 Version 1.0      CreationDate: 27.07.91                 *
X *                                    LastUpDate: 27.07.91                 *
X *                                                                         *
X *                     The traveling salesman problem.                     *
X *        The data for a large example with sixteen german cities.         *
X *                                                                         *
X *                Copyright (C) 1991 by Christoph Pleier.                  *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X#include "config.h"
X
X/* table relating real city names to intern city names and vice versa */
XNAMEINFO data_cities[CITYNUM] = {
X	{ "Hamburg",      0 },
X	{ "Hannover",     1 },
X	{ "Koeln",        2 },
X	{ "Koblenz",      3 },
X	{ "Frankfurt",    4 },
X	{ "Oldenburg",    5 },
X	{ "Muenchen",     6 },
X	{ "Saarbruecken", 7 },
X	{ "Stuttgart",    8 },
X	{ "Berlin",       9 },
X	{ "Freiburg",    10 },
X	{ "Giessen",     11 },
X	{ "Wuerzburg",   12 },
X	{ "Kassel",      13 },
X	{ "Bielefeld",   14 },
X	{ "Siegen",      15 }
X};
X
X/* unity of distance data */
Xchar *unity = "km";
X
X/* distance table:
X *
X * |          | Hamburg | Hannover | Koeln | Koblenz |.....| Siegen |
X * |----------|---------|----------|-------|---------|.....|--------|
X * | Hamburg  |    0    |    180   |  463  |   550   |  .  |  470   |
X * | Hannover |         |     0    |  309  |   401   |  .  |  282   |
X * | Koeln    |         |          |   0   |    93   |  .  |  119   |
X * | Koblenz  |         |          |       |    0    |  .  |  116   |
X * |    .     |    .    |     .    |   .   |    .    |  .  |   .    |
X * |    .     |    .    |     .    |   .   |    .    |  .  |   .    |
X * |    .     |    .    |     .    |   .   |    .    |  .  |   .    |
X * | Siegen   |         |          |       |         |.....|   0    |
X * ---------------------------------------------------.....---------|
X */
Xint d_tab[CITYNUM][CITYNUM] = {  
X	{  0,180,463,550,539,160,820,743,727,300,814,467,543,353,291,470 },
X	{180,  0,309,401,357,158,650,575,545,290,694,290,362,172,110,282 },
X	{ -1, -1,  0, 93,222,333,634,277,397,580,458,200,359,284,199,119 },
X	{ -1, -1, -1,  0,130,425,544,200,305,612,360,108,265,251,290,116 },
X	{ -1, -1, -1, -1,  0,480,423,204,207,560,278, 68,136,200,421,125 },
X	{ -1, -1, -1, -1, -1,  0,792,630,643,435,750,406,510,315,150,330 },
X	{ -1, -1, -1, -1, -1, -1,  0,485,240,589,388,475,281,508,749,552 },
X	{ -1, -1, -1, -1, -1, -1, -1,  0,245,775,329,308,329,413,476,320 },
X	{ -1, -1, -1, -1, -1, -1, -1, -1,  0,642,227,270,180,406,596,345 },
X	{ -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,783,515,550,388,391,566 },
X	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,340,347,481,636,413 },
X	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,142,116,197, 82 },
X	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,227,472,209 },
X	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,155,163 },
X	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,185 },
X	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0 }
X};
END_OF_FILE
if test 4120 -ne `wc -c <'examples/travel/germany.c'`; then
    echo shar: \"'examples/travel/germany.c'\" unpacked with wrong size!
fi
# end of 'examples/travel/germany.c'
fi
if test -f 'include/analyse.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'include/analyse.h'\"
else
echo shar: Extracting \"'include/analyse.h'\" \(4438 characters\)
sed "s/^X//" >'include/analyse.h' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                            a n a l y s e . h                            *
X *                                                                         *
X *                            Package : Include files                      *
X *                            Version : 1.0                                *
X *                       CreationDate : 05.03.92                           *
X *                         LastUpDate : 08.03.92                           *
X *                                                                         *
X *    The configuration include file for building the system analyser.     *
X *                                                                         *
X *               Copyright (C) 1992-1994 by Christoph Pleier               *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X/* NOTE: Do not change the filename to 'dcanalyse.h'.
X *       An include file with that name will be generated in directory
X *       dcanalyse!
X */
X
X#ifndef __dcanalyse_h
X#define __dcanalyse_h
X
X/* #define DEBUG /**/
X
X/* general return codes */
X#define OK	0
X#define ERROR	-1
X
X/* boolean constants */
X#ifndef TRUE
X# define TRUE	1
X# define FALSE	0
X#endif 
X
X/* maximal length of a path name */
X#define MAXPATHNAMELEN	256
X
X/* name of system configuration file */
X#define CFGFILENAME   "system.config"
X
X/* maximum length of a hostname */
X#define MAXHOSTNAMELEN  256
X
X/* communication test num */
X#define COMMUNICNUM	10
X
X/* package size for communication test */
X#define PACKAGESIZE	1000
X
X/* job codes */
X#define DO_MEASURING 0
X#define DO_TERMINATE 1
X
X/* transmitting data structure between 'main' and process 'measure' */
Xstruct order_t {
X    int  code;
X    char hostname[MAXHOSTNAMELEN]; 	/* name of host */
X    int  crea_time;     		/* creation time */
X    int  comm_time;     		/* communication time */
X};
X
X/* transmitting data structure between process 'measure' and process 'tester' */
Xstruct trans_data_t {
X    char data[PACKAGESIZE];
X};
X
X/* list storing target hostnames */
Xstruct targetlist_t {
X    char *hostname;
X    struct targetlist_t *next;
X};
X
X/*
X * external declarations
X */
X
Xextern int
X      append,
X      alltargets,
X      no_measure,
X      trial_num,
X      verbose;
Xextern char
X    * outputfilename,
X      cfgfilename[];
Xextern SYMBTABEL
X    * symbtab,
X    * last_symb;
Xextern FILE 
X    * yyin,
X    * yyout;
Xextern struct targetlist_t 
X    * first_target,
X    * last_target;
X
X#if defined(__STDC__) && !defined(NO_PROTOTYPE)
X# define FUNCPROTO(type,id,args)	extern type id args
X#else
X# define FUNCPROTO(type,id,args)	extern type id()
X#endif /* __STDC__ /**/
X
XFUNCPROTO(int          , DisplaySymbolTable, ());
XFUNCPROTO(int          , DisplaySymbtabel, (SYMBTABEL *));
XFUNCPROTO(int          , DisplayUsage, ());
XFUNCPROTO(char        *, Malloc, (unsigned));
XFUNCPROTO(int          , ParseOptions, (int, char **));
XFUNCPROTO(char        *, gethomedir, (char *));
X#ifdef SCO_UNIX
XFUNCPROTO(int          , gethostname, (char *, int));
XFUNCPROTO(char        *, getlogin, ());
X#endif
XFUNCPROTO(SYMBTABEL   *, lookup_symbtabel, (char *));
XFUNCPROTO(char        *, strsave, (char *));
X
X#endif /* !__dcanalyse_h /**/
END_OF_FILE
if test 4438 -ne `wc -c <'include/analyse.h'`; then
    echo shar: \"'include/analyse.h'\" unpacked with wrong size!
fi
# end of 'include/analyse.h'
fi
if test -f 'include/dcinstall.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'include/dcinstall.h'\"
else
echo shar: Extracting \"'include/dcinstall.h'\" \(3590 characters\)
sed "s/^X//" >'include/dcinstall.h' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                          d c i n s t a l l . h                          *
X *                                                                         *
X *                            Package : Include files                      *
X *                            Version : 2.0                                *
X *                       CreationDate : 20.11.91                           *
X *                         LastUpDate : 06.12.93                           *
X *                                                                         *
X *   The configuration include file for building the installer program.    *
X *                                                                         *
X *               Copyright (C) 1991-1994 by Christoph Pleier               *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#ifndef __dcinstall_h
X#define __dcinstall_h
X
X/* #define DEBUG /**/
X
X/* general return codes */
X#define OK	0
X#define ERROR	-1
X
X/* boolean constants */
X#ifndef TRUE
X# define TRUE	1
X# define FALSE	0
X#endif 
X
X/* maximal length of a path name */
X#define MAXPATHNAMELEN	256
X
X/* name of system configuration file */
X#define CFGFILENAME     "system.config"
X
X/* maximum length of a hostname */
X#define MAXHOSTNAMELEN  256
X
X/* the name of the remote shell */
X#ifdef UNICOS 
X# define RSH		"remsh"
X#else
X# define RSH		"rsh"
X#endif
X
X/*
X * external declarations
X */
X
Xextern int 
X    alltargets,
X    checkfile,
X    checktargets,
X    c_flag,
X    clean,
X    crosscompile,
X    localtarget,
X    noexecute, 
X    o_flag, 
X    prepare, 
X    verbose;
Xextern char
X      cfgfilename[],
X    * targetname;
Xextern FILENAMELIST 
X    * first_file,
X    * last_file,
X    * first_incl_file,
X    * last_incl_file;
Xextern OPTIONLIST 
X    * first_opt,
X    * last_opt;
Xextern SYMBTABEL
X    * symbtab,
X    * last_symb;
Xextern FILE 
X    *yyin,
X    *yyout;
X
X#if defined(__STDC__) && !defined(NO_PROTOTYPE)
X# define FUNCPROTO(type,id,args)	extern type id args
X#else
X# define FUNCPROTO(type,id,args)	extern type id()
X#endif /* __STDC__ /**/
X
XFUNCPROTO(int,    CompileFiles, (SYMBTABEL *, SYMBTABEL *));
XFUNCPROTO(int,    DisplayUsage, ());
XFUNCPROTO(char *, getLogin, ());
XFUNCPROTO(int,    ParseOptions, (int, char **));
XFUNCPROTO(int,    TransferFiles, (SYMBTABEL *, SYMBTABEL *));
X
X#endif /* !__dcinstall_h /**/
END_OF_FILE
if test 3590 -ne `wc -c <'include/dcinstall.h'`; then
    echo shar: \"'include/dcinstall.h'\" unpacked with wrong size!
fi
# end of 'include/dcinstall.h'
fi
if test -f 'include/extern.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'include/extern.h'\"
else
echo shar: Extracting \"'include/extern.h'\" \(4002 characters\)
sed "s/^X//" >'include/extern.h' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                           e x t e r n . h                               *
X *                                                                         *
X *                            Package : Include files                      *
X *                            Version : 1.0                                *
X *                       CreationDate : 14.08.90                           *
X *                         LastUpDate : 06.12.93                           *
X *                                                                         *
X *                        The extern declarations.                         *
X *                                                                         *
X *      Copyright (C) 1990-1994 by Franz Distler and Christoph Pleier.     *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#ifndef __extern_h
X#define __extern_h
X
Xextern short
X	errflag,
X	specerr,
X	outcodeflag,
X	bodyflag,
X	mainflag,
X	sysinclflag,
X	allflag,
X	beautyflag,
X	cppflag,
X	infoflag,
X	funcflag,
X#if defined(HETEROGENEOUS) || defined(CHECK_XDR)
X	xdrflag,
X	determine_dcc_buf_size,
X	encode_warning,
X#endif
X	specflag;
X
Xextern int 
X	Errno,
X	blknum,
X	processnum,
X	transnum,
X	phase,
X#ifndef UNICOS
X	yydebug,
X	yynerrs,
X#endif
X	yylineno,
X	yynwarns,
X	translabel;
X
X#ifdef UNICOS
Xextern long
X	yydebug,
X	yynerrs;
X#endif
X
Xextern char  
X	*crextstr,
X	*trextstr,
X#if defined(HETEROGENEOUS) || defined(CHECK_XDR)
X	*xdrextstr,
X#endif 
X	*fnextstr,
X	*libsstr,
X	*cflagsstr,
X	*lflagsstr,
X	*includefiles[], 
X	*inputfilename,
X	*yyerrfilename,
X	*errormesg,
X	 outputfilename[],
X	 funcfilename[],
X	 inclfilename[],
X	 creatfilename[],
X#if defined(HETEROGENEOUS) || defined(CHECK_XDR)
X         xdrfilename[],
X#endif
X	 makefilename[],
X	 filenameprefix[],
X	*version,
X	*copyright,
X	*headerstr[],
X	*convert_buffer,
X#if defined(HETEROGENEOUS) || defined(CHECK_XDR)
X	*encode_decode_buf_size,
X         xdrfilename[],
X#endif
X	*infoprefix;
X
X#if defined(HPUX) || defined(AIX)
Xextern unsigned char
X	 yytext[];
X#else
X# ifdef LINUX
Xextern char 
X	*yytext;
X# else
Xextern char
X	 yytext[];
X# endif /* LINUX /**/
X#endif /* HPUX || AIX /**/
X
Xextern FILE 
X	*yyerrfile, 
X	*outfile,
X	*funcfile,
X	*inclfile,
X	*creatfile,
X#if defined(HETEROGENEOUS) || defined(CHECK_XDR)
X	*xdrfile,
X#endif
X	*makefile,
X	*debugfile;
X
Xextern struct process_list 
X	*first_processname,
X	*last_processname;
X
Xextern struct include_list 
X	*first_includename,
X	*last_includename;
X
Xextern struct include_path_list 
X	*first_inclpathname,
X	*last_inclpathname;
X
Xextern struct cpp_def_list 
X	*first_cppdef,
X	*last_cppdef;
X
Xextern struct struct_type_list 
X	*first_structtype,
X        *last_structtype;
X
Xextern SYMBTAB
X	 symbtab;
X
Xextern SYMBTABEL
X	*processptr;
X
X#endif /* !__extern_h /**/
END_OF_FILE
if test 4002 -ne `wc -c <'include/extern.h'`; then
    echo shar: \"'include/extern.h'\" unpacked with wrong size!
fi
# end of 'include/extern.h'
fi
if test -f 'include/ipc_socket.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'include/ipc_socket.h'\"
else
echo shar: Extracting \"'include/ipc_socket.h'\" \(4128 characters\)
sed "s/^X//" >'include/ipc_socket.h' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                        i p c _ s o c k e t . h                          *
X *                                                                         *
X *                            Package : Include files                      *
X *                            Version : 1.0                                *
X *                       CreationDate : 10.07.90                           *
X *                         LastUpDate : 16.03.92                           *
X *                                                                         *
X *      Macro, structure and type definitions used in ipc_socket.c         *
X *                                                                         *
X *               Copyright (C) 1990-1994 by Christoph Pleier.              *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#ifndef __ipc_h
X#define __ipc_h
X
X/* return codes */
X#define OK		0
X#define ERROR		-1
X
X/* boolean constants */
X#ifndef TRUE
X# define TRUE		1
X# define FALSE		0
X#endif
X
X/* maximum length of a hostname */
X#ifndef MAXHOSTNAMELEN
X# define MAXHOSTNAMELEN	256
X#endif
X
X/* the range of availible portnumbers */
X#define STARTPORT	htons(10000)
X#define ENDPORT		htons(65535)
X
X/* the maxiumum number of stored open connections */
X#define MAXOPENCONS	40
X
X/* the number of connections to be closed to get free descriptors */
X#define CLOSECONNUM	10
X
X/* time in seconds trying to deliver unsent data during deletion of port */
X#define LINGERTIME	5
X
X/* define this for use under Apollo Domain/ix */
X#ifdef APOLLO
X# define htons(x)	(x)
X# define ntohs(x)	(x)
X#endif
X
X/* the messages for the rendezvous */
X#define CON_REQUEST	"REQUEST "    /* request message */
X#define CON_ACCEPTED	"ACCEPTED"    /* reply message (connection accepted) */
X#define CON_MSGLEN	9             /* the length of this messages */
X
X/* states a port can be */
X#define CONNECTIONLESS	 0
X#define CONNECTED	 1
X#define SELECTING	 2
X#define ACCEPTING	 3
X#define CONNECTING	 4
X#define SEND_REQ	 5
X#define RECV_REQ	 6
X#define SEND_REP	 7
X#define RECV_REP	 8
X#define SEND_ADDR	 9
X#define RECV_ADDR	10
X#define SENDING		11
X#define RECEIVING	12
X#define CLOSING		13
X
X/* the type of a port */
Xstruct PORTDESCR { 
X	int     state;
X	int     acc_sock;
X	u_short portnum;
X	char    hostname[MAXHOSTNAMELEN];
X	int     con_sock;
X};
X
X#ifndef RPC_XDR
Xtypedef struct PORTDESCR PORTDESCR;
X
X/* the type of a connection port */
Xstruct CONNECTIONDESCR { 
X	int        state;
X	int        con_sock;
X	PORTDESCR *own_port;
X	PORTDESCR *other_port;
X};
X
Xtypedef struct CONNECTIONDESCR CONNECTIONDESCR;
X
X/* The structure '_con' stores established TCP/IP connections. 
X * Port 'own_port' is connected to port 'other_port' by 'con_sock'
X */
Xstruct _con {
X	int       con_sock;
X	PORTDESCR own_port;
X	PORTDESCR other_port;
X        struct _con *next;
X};
X
X#endif /* !RPC_XDR /**/
X
X#endif /* !__ipc_h /**/
END_OF_FILE
if test 4128 -ne `wc -c <'include/ipc_socket.h'`; then
    echo shar: \"'include/ipc_socket.h'\" unpacked with wrong size!
fi
# end of 'include/ipc_socket.h'
fi
if test -f 'ipc/p3.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'ipc/p3.c'\"
else
echo shar: Extracting \"'ipc/p3.c'\" \(3551 characters\)
sed "s/^X//" >'ipc/p3.c' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *            A precompiler for distributed programming with C             *
X *                                                                         *
X *                                p 3 . c                                  *
X *                                                                         *
X *                 Version 1.0      CreationDate: 15.07.90                 *
X *                                    LastUpDate: 24.09.90                 *
X *                                                                         *
X *           Process 3 for testing the communication primitives.           *
X *                                                                         *
X *        Copyright (C) 1990 by Franz Distler and Christoph Pleier.        *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#include <stdio.h>
X#include <sys/types.h>
X#include "ipc.h"
X#include "run_Errno.h"
X
X#ifdef SYSTEM_V
X# define u_short	int
X#endif /* SYSTEM_V /**/
X
Xint		Errno;
XPORTDESCR 	own_port,
X		P1_port;
XCONNECTIONDESCR	con_port;
X
X/* global variables needed for the library functions! */
Xchar            *_programname = "p3",
X                *_processname = "P3";
XPORTDESCR 	 _own_port, 
X                 _creator_port,	/* unused, but needed! */
X                 _admin_port;	/* unused, but needed! */
XCONNECTIONDESCR	 _con_port;
X
Xmain()
X{
X	char buffer[100];
X
X	puts("dcc - distributed c compiler");
X	puts("Copyright (C) 1990 by Franz Distler and Christoph Pleier\n");
X	puts("Process p3 used for testing the communication primitives");
X	puts("Remark: the starting order is: p1, p2, p3");
X	if (_create_port(&own_port))
X		_RuntimeError("P3: Error creating own port");
X#ifndef iPSC
X	_display_port_info("P3: port", own_port);
X
X	puts("\nP3: Enter port information of port 1 of process P1:");
X	_input_port_info(&P1_port);
X#else
X	P1_port.node = 5;
X	P1_port.pid  = 100;
X#endif /* iPSC /**/
X
X	puts("P3: Test 3: accept_connection(...,'P3',0)");
X	if (_accept_connection(&con_port, own_port, 0))
X		_RuntimeError("P3: Error accepting connection");
X	puts("P3: Test 3: close_connection()");
X	puts("P3: Test 3: make_connection(...,'P3','P1',10)");
X	if (_make_connection(&con_port, own_port, P1_port, 10)) {
X	    if (Errno == ETIMEOUT) {
X		_delete_port(own_port);
X		puts("\nP3: Done!");
X		exit(0);
X	    } else
X		_RuntimeError("P3: Error making connection");
X	}
X	puts("Error: mutual exclusion not present!");
X	exit(-1);
X}
END_OF_FILE
if test 3551 -ne `wc -c <'ipc/p3.c'`; then
    echo shar: \"'ipc/p3.c'\" unpacked with wrong size!
fi
# end of 'ipc/p3.c'
fi
if test -f 'ipc/pa.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'ipc/pa.c'\"
else
echo shar: Extracting \"'ipc/pa.c'\" \(4101 characters\)
sed "s/^X//" >'ipc/pa.c' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *            A precompiler for distributed programming with C             *
X *                                                                         *
X *                                p a . c                                  *
X *                                                                         *
X *                 Version 1.0      CreationDate: 15.07.90                 *
X *                                    LastUpDate: 24.09.90                 *
X *                                                                         *
X *           Process 1 for testing the communication primitives.           *
X *                                                                         *
X *        Copyright (C) 1990 by Franz Distler and Christoph Pleier.        *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#include <stdio.h>
X#include <sys/types.h>
X#include "run_Errno.h"
X#include "ipc.h"
X
X#ifdef SYSTEM_V
X# define u_short	int
X#endif /* SYSTEM_V /**/
X
X#define DELAY		10
X#define MSGNUM		100
X
X#define NUM	10
X
Xint		 Errno;
XPORTDESCR 	 own_port1,
X		 Pb_port,
X		 P2_port;
XCONNECTIONDESCR	 con_port1,
X		 con_port2;
X
X/* global variables needed for the library functions! */
Xchar            *_programname = "pa",
X                *_processname = "Pa";
XPORTDESCR 	 _own_port, 
X                 _creator_port,	/* unused, but needed! */
X                 _admin_port;	/* unused, but needed! */
XCONNECTIONDESCR	 _con_port;
X
Xmain()
X{
X    int  i, res, num;
X    char buffer[100], buffer2[100];
X
X    puts("Process pa used for testing the communication primitives");
X    if (_create_port(&_own_port))
X	_RuntimeError("P1: Error creating own port");
X    _display_port_info("Pa: port", _own_port);
X
X    for(num = 1; num <= NUM; num++) {
X	printf("Pa: run %d\n", num);
X	if (_accept_connection(&_con_port, _own_port, 0))
X		_RuntimeError("Pa: Error accepting connection");
X	if (_recv_data(_con_port, buffer, 18, 0) < 0)
X		_RuntimeError("Pa: Error in recv_data 1");
X        if (strcmp(buffer, "Test 1: Message 1")) {
X		puts("Pa: Error: wrong message received!");
X		_close_connection(_con_port);
X		_delete_port(_own_port);
X		exit(-1);
X	}
X	if (_recv_data(_con_port, buffer, 18, 0) < 0)
X		_RuntimeError("Pa: Error in recv_data 2");
X        if (strcmp(buffer, "Test 1: Message 2")) {
X		puts("Pa: Error: wrong message received!");
X		_close_connection(_con_port);
X		_delete_port(_own_port);
X		exit(-1);
X	}
X	strcpy(buffer, "Test 1: Message 3");
X	if (_send_data(_con_port, buffer, 18, 10) < 0)
X		_RuntimeError("Pa: Error in send_data 1");
X	if (_recv_data(_con_port, buffer, 18, 10) < 0)
X		_RuntimeError("Pa: Error in recv_data 3");
X        if (strcmp(buffer, "Test 1: Message 4")) {
X		puts("Pa: Error: wrong message received!");
X		_close_connection(_con_port);
X		_delete_port(_own_port);
X		exit(-1);
X	}
X	if (_close_connection(_con_port))
X		_RuntimeError("Pa: Error closing connection");
X/*
X        printf("Pa: sleeping 10 seconds\n");
X        sleep(10);
X*/
X    }
X    sleep(60);
X}
END_OF_FILE
if test 4101 -ne `wc -c <'ipc/pa.c'`; then
    echo shar: \"'ipc/pa.c'\" unpacked with wrong size!
fi
# end of 'ipc/pa.c'
fi
if test -f 'ipc/pb.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'ipc/pb.c'\"
else
echo shar: Extracting \"'ipc/pb.c'\" \(3896 characters\)
sed "s/^X//" >'ipc/pb.c' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *            A precompiler for distributed programming with C             *
X *                                                                         *
X *                                p b . c                                  *
X *                                                                         *
X *                 Version 1.0      CreationDate: 15.07.90                 *
X *                                    LastUpDate: 24.09.90                 *
X *                                                                         *
X *           Process 2 for testing the communication primitives.           *
X *                                                                         *
X *        Copyright (C) 1990 by Franz Distler and Christoph Pleier.        *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#include <stdio.h>
X#include <sys/types.h>
X#include "ipc.h"
X#include "run_Errno.h"
X
X#ifdef SYSTEM_V
X# define u_short	int
X#endif /* SYSTEM_V /**/
X
X#define DELAY		10
X#define MSGNUM		100
X
X#define NUM 	10
X
Xint		Errno;
XPORTDESCR 	own_port,
X		Pa_port,
X		P3_port;
XCONNECTIONDESCR	con_port1,
X		con_port2;
X
X/* global variables needed for the library functions! */
Xchar            *_programname = "pb",
X                *_processname = "Pb";
XPORTDESCR 	 _own_port, 
X                 _creator_port,	/* unused, but needed! */
X                 _admin_port;	/* unused, but needed! */
XCONNECTIONDESCR	 _con_port;
X
Xmain()
X{
X    int i, num;
X    char buffer[100];
X
X    puts("Process pb used for testing the communication primitives");
X    if (_create_port(&_own_port))
X	_RuntimeError("Pb: Error creating own port 1");
X    _display_port_info("Pb: port", _own_port);
X
X    puts("Pb: Enter port information of port of process Pa:");
X    _input_port_info(&Pa_port);
X
X    for(num = 1; num <= NUM; num++) { 
X        printf("Pb: run %d\n", num);
X	if (_make_connection(&_con_port, _own_port, Pa_port, 0))
X		_RuntimeError("Pb: Error making connection");
X	strcpy(buffer, "Test 1: Message 1");
X	if (_send_data(_con_port, buffer, 18, 0) < 0)
X		_RuntimeError("Pb: Error in send_data 1");
X	strcpy(buffer, "Test 1: Message 2");
X	if (_send_data(_con_port, buffer, 18, 0) < 0)
X		_RuntimeError("Pb: Error in send_data 2");
X	if (_recv_data(_con_port, buffer, 18, 0) < 0)
X		_RuntimeError("Pb: Error in recv_data 1");
X	if (strcmp(buffer, "Test 1: Message 3")) {
X		puts("Pb: Error: wrong message received!");
X		_close_connection(_con_port);
X		_delete_port(_own_port);
X		exit(-1);
X	}
X	strcpy(buffer, "Test 1: Message 4");
X	if (_send_data(_con_port, buffer, 18, 0) < 0)
X		_RuntimeError("Pb: Error in send_data 3");
X	if (_close_connection(_con_port))
X		_RuntimeError("Pb: Error closing connection");
X/*
X	printf("Pb: sleeping 10 seconds\n");
X	sleep(10);
X*/
X    }
X    sleep(60);
X}
END_OF_FILE
if test 3896 -ne `wc -c <'ipc/pb.c'`; then
    echo shar: \"'ipc/pb.c'\" unpacked with wrong size!
fi
# end of 'ipc/pb.c'
fi
if test -f 'lib/RuntimeError.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lib/RuntimeError.c'\"
else
echo shar: Extracting \"'lib/RuntimeError.c'\" \(4058 characters\)
sed "s/^X//" >'lib/RuntimeError.c' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                       R u n t i m e E r r o r . c                       *
X *                                                                         *
X *                            Package : Runtime Library                    *
X *                            Version : 1.0                                *
X *                       CreationDate : 18.08.90                           *
X *                         LastUpDate : 12.09.91                           *
X *                                                                         *
X *       The routine '_RuntimeError' used to display runtime errors.       *
X *                                                                         *
X *     Copyright (C) 1990-1994 by Franz Distler and Christoph Pleier.      *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#include <stdio.h>
X#include <sys/types.h>
X#ifdef HETEROGENEOUS
X# include <rpc/rpc.h>
X#endif
X#include "run_Errno.h"
X#include "run_errlist.h"
X#include "ipc.h"
X#include "dcc.h"
X
X/******************************************************************************
X * _RuntimeError()                                                            *
X *                                                                            *
X * Produces an error message on the standard error describing the last error  *
X * encountered during a function or system call.                              *
X *                                                                            *
X * Return values: none!                                                       *
X ******************************************************************************/
Xint
X_RuntimeError(s)
Xchar *s;
X{
X	extern int        Errno,
X	                  errno;
X	extern char      *sys_errlist[],
X	                 *_programname,
X	                 *_processname;
X	extern PORTDESCR  _own_port,
X	                  _admin_port;
X
X	fputs("***** RUNTIME ERROR *****\n", stderr);
X#ifdef iPSC
X	fprintf(stderr, "PROGRAM: %s, PROCESS: %s, NODE: %ld, PID: %ld\n", 
X	    _programname, _processname, mynode(), mypid());
X#else
X# ifdef SINGLE
X	fprintf(stderr, "PROGRAM: %s, PROCESS: %s, PID: %d\n",
X	    _programname, _processname, getpid());
X# else /* HOMOGENEOUS || HETEROGENEOUS */
X	fprintf(stderr, "PROGRAM: %s, PROCESS: %s, HOST: %s, PID: %d\n", 
X	    _programname, _processname, _own_port.hostname, getpid());
X# endif /* SINGLE /**/
X#endif /* iPSC /**/
X	if (s)
X		fprintf(stderr, "%s: ", s);
X	if (strlen(s)+strlen(runtime_errlist[Errno])+2 >= 80)
X		fputs("\n", stderr);
X	if (Errno != -1)
X		fprintf(stderr, "%s\n", runtime_errlist[Errno]);
X	fprintf(stderr, "reason: %s\n", sys_errlist[errno]);
X	/* Send message to administration process! */
X	_notify_admin_process(NOTIFY_ERROR);
X	exit(ERROR);
X} /* _RuntimeError */
END_OF_FILE
if test 4058 -ne `wc -c <'lib/RuntimeError.c'`; then
    echo shar: \"'lib/RuntimeError.c'\" unpacked with wrong size!
fi
# end of 'lib/RuntimeError.c'
fi
if test -f 'macros.README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'macros.README'\"
else
echo shar: Extracting \"'macros.README'\" \(3585 characters\)
sed "s/^X//" >'macros.README' <<'END_OF_FILE'
XFollowing is an explanation how to define macros in the macro files:
X
XFirst define the operating system. The following systems are already availible:
X    iPSC      - Intel Hypercube
X    AIX       - AIX on IBM Workstations
X    CONVEX    - ConvexOs on Convex Supercomputers
X    HPUX      - HpUx on Hewlett Packard Machines
X    SPARC     - SunOs 4.1 or greater on Sun Sparc Stations
X    ULTRIX    - Ultrix on Vaxes
X    UNICOS    - UNICOS on Cray Supercomputers
X    SCO_XENIX - SCO Xenix Version 2.3 on IBM PCs
X    SCO_UNIX  - SCO Unix Version 3.2 on IBM PCs
Xe.g. define 'OS = SPARC'
X
XSecond define the system type to one of the following:
X    BSD      - BSD Unix Version 4.3
X    SYSTEM_V - Unix System V
Xe.g. define 'SYSTEM = BSD'
X
XThird define the type of the inter process communication routines you want to
Xuse. Availible are
X    CUBE   - intel hypercube communication primitives
X    SOCKET - stream sockets
X    MSGSEM - message queues and semaphores
Xe.g. define 'IPC = SOCKET'
X
XFourthly define the type of network you want to distribute the processes in.
X    SINGLE        - one machine only, no distribution of processes
X    HOMOGENEOUS   - distribution of processes in a homogenous network
X    HETEROGENEOUS - distribution of processes in a heterogenous network
XChoose 'SINGLE' to use the compiler on a single computer, particular on a 
Xmultiprocessor workstation, where all processes are created "local", i.e. no
Xdistribution of processes will be performed. Choose 'HOMOGENEOUS' to use the 
Xcompiler on a network of binary compatible machines, i.e. the processes will
Xbe distributed in a homogenous network. Choose 'HETEROGENEOUS' to use the
Xcompiler on a network of various different Unix machines, i.e. the processes 
Xwill be distributed in a heterogenous network. 
XNote: HOMOGENEOUS provides faster, HETEROGENEOUS provides more powerful inter 
X      process communications!
X      If the operating system equals iPSC this step is not required!
Xe.g. define 'NETWORK = HETEROGENEOUS'
X
XNext define some directory names.
X    MAKEDIRS      - the directories you want to make by the root Makefile
X    INSTALLDIR    - where to install needed files 
Xe.g. define 
X    MAKEDIRS      = lib dcc dcadmin dckill
X    INSTALLDIR    = /usr/local/Distributed_C
X
XAt least define the name of the compiler, name of the loader, the compiler and 
Xloader flags and so on for generation of the runtime library, the compiler,
Xthe administration process and the process killer process.
X
XThe common compiler, compiler flags and loader flags:
Xe.g. define
X        COMCC = cc
X    COMCFLAGS = -D$(OS) -D$(SYSTEM) -D$(IPC) -D$(NETWORK) -g 
X   COMLDFLAGS = -Me -g
X
XThe name of the compiler used for building the library and the appropriate
Xcompiler flags:
Xe.g. define
X       CC_LIB = cc
X   CFLAGS_LIB = $(COMCFLAGS)
X
XThe Names of the compiler and loader used for building the compiler, the 
Xappropriate compiler and loader flags and special yacc flags:
Xe.g. define
X       CC_DCC = cc
X   CFLAGS_DCC = $(COMCFLAGS)
X       LD_DCC = cc
X  LDFLAGS_DCC = $(COMLDFLAGS)
X     LIBS_DCC = -lmalloc
X   YFLAGS_DCC = -Sr1000 -Ss1000 -Sa6000 -Sm10000
X
XThe Names of the compiler and loader used for building the administration
Xprocess, the appropriate compiler and loader flags:
X       CC_DCA = cc
X   CFLAGS_DCA = $(COMCFLAGS)
X       LD_DCA = cc
X  LDFLAGS_DCA = $(COMLDFLAGS)
X     LIBS_DCA = -lx
X
XThe Names of the compiler and loader used for building the process killer
Xprocess, the appropriate compiler and loader flags:
X     CC_DCK = cc
X CFLAGS_DCK = $(COMCFLAGS)
X     LD_DCK = cc
XLDFLAGS_DCK = $(COMLDFLAGS) -g
X   LIBS_DCK =
END_OF_FILE
if test 3585 -ne `wc -c <'macros.README'`; then
    echo shar: \"'macros.README'\" unpacked with wrong size!
fi
# end of 'macros.README'
fi
echo shar: End of archive 3 \(of 18\).
cp /dev/null ark3isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 18 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
