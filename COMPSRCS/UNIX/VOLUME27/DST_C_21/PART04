Newsgroups: comp.sources.unix
From: pleierc@informatik.tu-muenchen.de (Christoph Pleier)
Subject: v27i178: distributed-c-2.1 - Distributed C Development Environment, V2.1, Part04/18
References: <1.756634932.28500@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: pleierc@informatik.tu-muenchen.de (Christoph Pleier)
Posting-Number: Volume 27, Issue 178
Archive-Name: distributed-c-2.1/part04

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 4 (of 18)."
# Contents:  Makefile dcadmin/GetCfgFile.c dcadmin/Shutdown.c
#   dcadmin/signals.c dcanalyse/Makefile dcanalyse/ParseOptions.c
#   dcc/String.c dcc/attr_debug.c dcc/code_decl.c dcc/signal.c
#   dcc/version.c dcinstall/Clean.c dclocate/ParseOptions.c
#   examples/buffer/buffer.dc include/version.h lib/Makefile
#   lib/destruction.c
# Wrapped by vixie@gw.home.vix.com on Thu Dec 23 00:11:57 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Makefile'\"
else
echo shar: Extracting \"'Makefile'\" \(5106 characters\)
sed "s/^X//" >'Makefile' <<'END_OF_FILE'
X#***************************************************************************
X#*                                                                         *
X#* @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X#* @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X#* @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X#* @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X#* @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X#*                                                                         *
X#*              A compiler for distributed programming with C              *
X#*                                                                         *
X#*                           M a k e f i l e                               *
X#*                                                                         *
X#*                 Version 1.0      CreationDate: 05.07.90                 *
X#*                                    LastUpDate: 06.12.93                 *
X#*                                                                         *
X#*                     The main makefile to build all.                     *
X#*                                                                         *
X#*              Copyright (C) 1990-1994 by Christoph Pleier.               *
X#*                          All rights reserved!                           *
X#***************************************************************************/
X
XSHELL = /bin/sh
XMAKE  = make
XRM    = \rm
X
X# The makros for archiving the source
XCOMPRESS    = gzip -f
XUNCOMPRESS  = gzip -d
XCOMPRESSEXT = .gz
XARCFILE     = dcde.tar
XARCDIR      = DISTRIBUTED_C
XBACKUPDEV   = /dev/fd0
X
X# The directories that have to be cleaned
XCLEANDIRS = dcadmin dcc dckill dcinstall dclocate dcanalyse examples ipc \
X	    lib config
X
X# Include target system specific macros
Xinclude macros
X
Xdefault:
X	@cat Makefile.msg Makefile.doc
X
XiPSC:
X	-$(RM) -f macros
X	@ln macros.iPSC macros
X	@touch include/config.h
X	$(MAKE) all
X
XAIX:
X	-$(RM) -f macros
X	@ln macros.AIX macros
X	@touch include/config.h
X	$(MAKE) all
X
XCONVEX:
X	-$(RM) -f macros
X	@ln macros.CONVEX macros
X	@touch include/config.h
X	$(MAKE) all
X
XUNICOS:
X	-$(RM) -f macros
X	@ln macros.UNICOS macros
X	@touch include/config.h
X	$(MAKE) all
X
XHPUX:
X	-$(RM) -f macros
X	@ln macros.HPUX macros
X	@touch include/config.h
X	$(MAKE) all
X
XLINUX:
X	-$(RM) -f macros
X	@ln macros.LINUX macros
X	@touch include/config.h
X	$(MAKE) all
X
XSPARC:
X	-$(RM) -f macros
X	@ln macros.SPARC macros
X	@touch include/config.h
X	$(MAKE) all
X
XULTRIX:
X	-$(RM) -f macros
X	@ln macros.ULTRIX macros
X	@touch include/config.h
X	$(MAKE) all
X
XUNIX:
X	-$(RM) -f macros
X	@ln macros.UNIX macros
X	@touch include/config.h
X	$(MAKE) all
X
XXENIX:
X	-$(RM) -f macros
X	@ln macros.XENIX macros
X	@touch include/config.h
X	$(MAKE) all
X
Xall:
X	@cat Makefile.msg
X	@echo "Generating all ($(MAKEDIRS))..."
X	for name in $(MAKEDIRS); \
X	do \
X	    echo ""; \
X	    cd $${name}; \
X	    $(MAKE);\
X	    cd ..; \
X	done 
X	@echo ""
X	@echo all done!
X
Xinstall:
X	@cat Makefile.msg
X	@echo "Installing the Distributed C Package ..."
X	-mkdir $(INSTALLDIR)
X	-mkdir $(INSTALLDIR)/include
X	-mkdir $(INSTALLDIR)/lib
X	-mkdir $(INSTALLDIR)/bin
X	cp include/*.h $(INSTALLDIR)/include
X	chmod a+r $(INSTALLDIR)/include/*
X	cp lib/*.c $(INSTALLDIR)/lib
X	chmod a+r $(INSTALLDIR)/lib/*
X	-\rm -f $(INSTALLDIR)/bin/dcc \
X		$(INSTALLDIR)/bin/dcadmin \
X		$(INSTALLDIR)/bin/dcinstall \
X		$(INSTALLDIR)/bin/killdcadmins \
X		$(INSTALLDIR)/bin/dckill
X	cp dcc/dcc $(INSTALLDIR)/bin/dcc 
X	cp dcadmin/dcadmin $(INSTALLDIR)/bin/dcadmin
X	cp dcinstall/dcinstall $(INSTALLDIR)/bin/dcinstall
X	cp bin/killdcadmins $(INSTALLDIR)/bin/killdcadmins
X	-cp dckill/dckill $(INSTALLDIR)/bin/dckill
X	chmod a+r $(INSTALLDIR)/bin/*
X	chmod a-w $(INSTALLDIR)/bin/*
X	@echo package installed!
X
Xcontents:
X	@echo "Building the CONTENTS file ..."
X	-$(RM) -f CONTENTS
X	echo "The Distributed C package consists of the following files:" > CONTENTS
X	echo " " >> CONTENTS
X	ls -lR * >> CONTENTS
X	@echo CONTENTS file built!
X
Xclean:
X	@echo "Cleaning the subdirectories ..."
X	for name in $(CLEANDIRS); \
X	do \
X	    echo "***** Cleaning the directory '$${name}'"; \
X	    cd $${name}; \
X	    $(MAKE) -s clean; \
X	    cd ..; \
X	done 
X	@echo directories cleaned!
X	-find . -name core -exec rm {} \;
X	-find . -name "*.bak" -exec rm -f {} \;
X	-find . -name "*.BAK" -exec rm -f {} \;
X	-find . -name "*.debug" -exec rm -f {} \;
X
Xarchive:
X	$(MAKE) clean
X	$(MAKE) contents
X	@echo ""
X	@echo "Archiving the Distributed C Package..."
X	-\mv ../$(ARCFILE)$(COMPRESSEXT) ../$(ARCFILE)$(COMPRESSEXT).bak
X	( cd .. ; tar cf $(ARCFILE) $(ARCDIR) ; $(COMPRESS) $(ARCFILE) )
X	@echo "Checking archive file for errors..."
X	( cd .. ; cat $(ARCFILE)$(COMPRESSEXT) | $(UNCOMPRESS) | tar tvf - )
X	@echo Package correctly archived!
X
Xbackup:
X	$(MAKE) archive
X	@echo "Insert a disk in device $(BACKUPDEV) and press RETURN!"
X	@read $dummy
X	@echo "Backing data up..."
X	( cd .. ; tar cvf $(BACKUPDEV) $(ARCFILE)$(COMPRESSEXT); tar tvf $(BACKUPDEV) )
X	@echo data backup completed!
END_OF_FILE
if test 5106 -ne `wc -c <'Makefile'`; then
    echo shar: \"'Makefile'\" unpacked with wrong size!
fi
# end of 'Makefile'
fi
if test -f 'dcadmin/GetCfgFile.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dcadmin/GetCfgFile.c'\"
else
echo shar: Extracting \"'dcadmin/GetCfgFile.c'\" \(4895 characters\)
sed "s/^X//" >'dcadmin/GetCfgFile.c' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                         G e t C f g F i l e . c                         *
X *                                                                         *
X *                            Package : Administration Process             *
X *                            Version : 1.0                                *
X *                       CreationDate : 16.09.90                           *
X *                         LastUpDate : 09.08.91                           *
X *                                                                         *
X * The routine 'GetConfigFilename' which receives the name of the cfg file *
X * from the creator process.                                               *
X *                                                                         *
X *                  Portions Copyright 1990 Franz Distler                  *
X *               Copyright (C) 1990-1994 by Christoph Pleier               *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#include <stdio.h>
X#include <sys/types.h>
X#ifdef HETEROGENEOUS
X# include <rpc/rpc.h>
X#endif
X#include "ipc.h"
X#include "dcc.h"
X#include "run_Errno.h"
X#include "timeout.h"
X#include "dcadmin.h"
X
X#ifdef ADMINDEBUG
X# define DEBUGPUTS(str)		fprintf(dfile,"[dbg] %s %s\n", _processprefix, str)
X# define DEBUGFPRINTF(f, a)	fprintf(dfile, f, a)
X#else
X# define DEBUGPUTS(str)		/* nothing */
X# define DEBUGFPRINTF(f, a)	/* nothing */
X#endif /* ADMINDEBUG /**/
X
X#define EXIT(v)			fprintf(stderr, "dcadmin: Terminating!\n"); \
X				exit(v)
X
X/******************************************************************************
X * GetConfigFilename()                                                        *
X *                                                                            *
X * Receives the name of the configuration file from the creator process and   *
X * stores it in the char array pointed to by filename.                        *
X *                                                                            *
X * Return values: OK upon success / ERROR upon error                          *
X ******************************************************************************/
Xint
XGetConfigFilename(filename)
Xchar *filename;
X{
X    ADMINCFGINFO    cfgfile;
X    CONNECTIONDESCR con_port;
X
X    DEBUGPUTS("GETTING filename of configuration file");
X
X    /* Accept connection from creator process */
X    if (_accept_connection(&con_port, &_own_port, ADMINFNATIME)) {
X	if (Errno == ETIMEOUT)
X	    Errno = ETCAPTOCPACC;
X	error("getting filename of configuration file");
X	return(ERROR);
X    }
X
X    /* Receive the filename of the configuration file */
X#if defined(SINGLE) || defined(HOMOGENEOUS)
X    if (_recv_data(&con_port, (char *) &cfgfile, sizeof(ADMINCFGINFO), ADMINFNRTIME) < 0) {
X#else /* HETEROGENEOUS */
X    if (_recv_data_encoded(&con_port, (char *) &cfgfile, xdr_ADMINCFGINFO, ADMINFNRTIME)) {
X#endif /* SINGLE || HOMOGENEOUS /**/
X	if (Errno == ETIMEOUT)
X	    Errno = ETCAPTOCPRCV;
X	error("getting filename of configuration file");
X	if (_close_connection(&con_port)) {
X	    error("getting filename of configuration file");
X	    EXIT(ERROR);
X	}
X	return(ERROR);
X    }
X
X    /* Terminate connection with creator process */
X    if (_close_connection(&con_port)) {
X	error("getting filename of configuration file");
X	EXIT(ERROR);
X    }
X
X    /* Store result in string */
X    (void) strcpy(filename, cfgfile.filename);
X
X#ifdef ADMINDEBUG
X    fprintf(dfile, "%s filename of configuration file is \"%s\"\n",
X	_processprefix, filename);
X    if (_debugflush)
X	fflush(dfile);
X#endif /* ADMINDEBUG /**/
X
X    return(OK);
X} /* GetConfigFilename */
END_OF_FILE
if test 4895 -ne `wc -c <'dcadmin/GetCfgFile.c'`; then
    echo shar: \"'dcadmin/GetCfgFile.c'\" unpacked with wrong size!
fi
# end of 'dcadmin/GetCfgFile.c'
fi
if test -f 'dcadmin/Shutdown.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dcadmin/Shutdown.c'\"
else
echo shar: Extracting \"'dcadmin/Shutdown.c'\" \(4637 characters\)
sed "s/^X//" >'dcadmin/Shutdown.c' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                           S h u t d o w n . c                           *
X *                                                                         *
X *                            Package : Administration Process             *
X *                            Version : 1.0                                *
X *                       CreationDate : 16.09.90                           *
X *                         LastUpDate : 02.03.92                           *
X *                                                                         *
X * The routine 'ShutdownProcesses' which orders all processes to terminate.*
X *                                                                         *
X *                  Portions Copyright 1990 Franz Distler                  *
X *               Copyright (C) 1990-1994 by Christoph Pleier               *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#include <stdio.h>
X#include <sys/types.h>
X#ifdef HETEROGENEOUS
X# include <rpc/rpc.h>
X#endif
X#include <errno.h>
X#include "ipc.h"
X#include "dcc.h"
X#include "run_Errno.h"
X#include "timeout.h"
X#include "dcadmin.h"
X
X#ifdef ADMINDEBUG
X# define DEBUGPUTS(str)		fprintf(dfile,"[dbg] %s %s\n", _processprefix, str)
X# define DEBUGFPRINTF(f, a)	fprintf(dfile, f, a)
X#else
X# define DEBUGPUTS(str)		/* nothing */
X# define DEBUGFPRINTF(f, a)	/* nothing */
X#endif /* ADMINDEBUG /**/
X
X/******************************************************************************
X * ShutdownProcesses()                                                        *
X *                                                                            *
X * Orders all processes of the 'process data list' to terminate.              *
X * (Note: There is no return from KillProcesses())                            *
X *                                                                            *
X * Return values: OK upon success / ERROR upon error                          *
X ******************************************************************************/
Xint
XShutdownProcesses()
X{
X    register struct pdat_list *aptr;
X    static TRANSDATA transdata;
X
X    DEBUGPUTS("INFORMING processes to terminate");
X    (void) strcpy(transdata.request, "TRANS_TERMINATE");
X    for(aptr = pdat_first; aptr; aptr = aptr->next) {
X	if (_make_connection(&_con_port, &_own_port, &(aptr->p_descr.port), 0)){
X	    error("shutting processes down");
X	    KillProcesses();
X	}
X        if (_send_connection_type_or_answer(TRANSACTION_CONNECTION)) {
X	    error("shutting processes down");
X	    KillProcesses();
X        }
X        if (_receive_connection_type_or_answer() != ACCEPT_CONNECTION) {
X	    error("shutting processes down");
X	    KillProcesses();
X        }
X#if defined(SINGLE) || defined(HOMOGENEOUS)
X        if (_send_data(&_con_port, (char *) &transdata, sizeof(TRANSDATA), TRANSREQTIME)<0){
X#else /* HETEROGENEOUS */
X        if (_send_data_encoded(&_con_port, (char *) &transdata, xdr_TRANSDATA, TRANSREQTIME)){
X#endif /* SINGLE || HOMOGENEOUS /**/
X	    error("shutting processes down");
X	    KillProcesses();
X	}
X        if (_close_connection(&_con_port)){
X	    error("shutting processes down");
X	    KillProcesses();
X	}
X    } /* for */
X    /* Note: Don't put an exit() here! We must return from this function, so
X     *       the remainding processes can connect to us!
X     */
X} /* ShutdownProcesses */
END_OF_FILE
if test 4637 -ne `wc -c <'dcadmin/Shutdown.c'`; then
    echo shar: \"'dcadmin/Shutdown.c'\" unpacked with wrong size!
fi
# end of 'dcadmin/Shutdown.c'
fi
if test -f 'dcadmin/signals.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dcadmin/signals.c'\"
else
echo shar: Extracting \"'dcadmin/signals.c'\" \(4631 characters\)
sed "s/^X//" >'dcadmin/signals.c' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                            s i g n a l s . c                            *
X *                                                                         *
X *                            Package : Administration Process             *
X *                            Version : 1.0                                *
X *                       CreationDate : 16.09.90                           *
X *                         LastUpDate : 06.12.93                           *
X *                                                                         *
X *                All routines needed for handling signals.                *
X *                                                                         *
X *                  Portions Copyright 1990 Franz Distler                  *
X *               Copyright (C) 1990-1994 by Christoph Pleier               *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#include <stdio.h>
X#include <sys/types.h>
X#ifdef HETEROGENEOUS
X# include <rpc/rpc.h>
X#endif
X#include <signal.h>
X#include <time.h>
X#ifndef UNICOS
X# include <sys/timeb.h>
X#endif
X#include <errno.h>
X#ifdef BSD
X# include <sys/wait.h>
X#endif /* BSD /**/
X#include "ipc.h"
X#include "dcc.h"
X#include "timeout.h"
X#include "dcadmin.h"
X
X#ifdef ADMINDEBUG
X# define DEBUGPUTS(str)		fprintf(dfile,"[dbg] %s %s\n", _processprefix, str)
X# define DEBUGFPRINTF(f, a)	fprintf(dfile, f, a)
X#else
X# define DEBUGPUTS(str)		/* nothing */
X# define DEBUGFPRINTF(f, a)	/* nothing */
X#endif /* ADMINDEBUG /**/
X
X/******************************************************************************
X * CatchSignals()                                                             *
X *                                                                            *
X * 'CatchSignals' will be called when a signal occurs. It then displays the   *
X * signal type on stdout, removes all generated processes and finally         *
X * terminates the program.                                                    *
X *                                                                            *
X * Return value: none!                                                        *
X ******************************************************************************/
X#if defined(HPUX) || defined(UNICOS) || defined(LINUX)
Xvoid
X#else
Xint
X#endif
XCatchSignals(sig)
Xint sig;
X{
X    register int i;
X
X    signal(sig, SIG_IGN);
X    for(i = 1; i <= NSIG; ++i)
X	signal(i, SIG_IGN);
X    fprintf(stdout, "***** ADMINISTRATION PROCESS TERMINATED BY SIGNAL %d ******\n",
X	sig);
X    KillProcesses();
X} /* CatchSignals */
X
X/******************************************************************************
X * SetSignals()                                                               *
X *                                                                            *
X * Catches all signals which default action is to terminate the program using *
X * 'CatchSignals'.                                                            *
X *                                                                            *
X * Return value: none!                                                        *
X ******************************************************************************/
Xint
XSetSignals()
X{
X    register int i;
X	
X    DEBUGPUTS("catching signals");
X    for(i = 1; i <= NSIG; ++i)
X	signal(i, CatchSignals);
X} /* SetSignals */
END_OF_FILE
if test 4631 -ne `wc -c <'dcadmin/signals.c'`; then
    echo shar: \"'dcadmin/signals.c'\" unpacked with wrong size!
fi
# end of 'dcadmin/signals.c'
fi
if test -f 'dcanalyse/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dcanalyse/Makefile'\"
else
echo shar: Extracting \"'dcanalyse/Makefile'\" \(4654 characters\)
sed "s/^X//" >'dcanalyse/Makefile' <<'END_OF_FILE'
X#***************************************************************************
X#*                                                                         *
X#* @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X#* @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X#* @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X#* @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X#* @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X#*                                                                         *
X#*              A compiler for distributed programming with C              *
X#*                                                                         *
X#*                             M a k e f i l e                             *
X#*                                                                         *
X#*                            Package : System Analyser                    *
X#*                            Version : 1.0                                *
X#*                       CreationDate : 05.03.92                           *
X#*                         LastUpDate : 08.03.92                           *
X#*                                                                         *
X#*              The makefile to generate the system analyser.              *
X#*                                                                         *
X#*                 Copyright (C) 1992 by Christoph Pleier                  *
X#*                          All rights reserved!                           *
X#***************************************************************************/
X
X     MAKE = @make
X     ECHO = @echo
X    TOUCH = @touch
X      DCC = dcc
X DCCFLAGS = -I../include
X       CC = dcinstall
X   CFLAGS = $(TARGETS) -I../include -DDCANALYSE -g
X       LD = dcinstall 
X   LFLAGS = $(TARGETS) -g  
X     LIBS =  
X       CB = /usr/bin/cb
X  CBFLAGS = -l 78
X
X  TARGETS = -target local -verbose 
X
XBIN =	dcanalyse  dcanalys_p01 dcanalys_p02
X
XFILES = dcanalyse.h \
X        dcanalyse_dc.c \
X        dcanalyse_sr.c \
X        dcanalys_p01.c \
X        dcanalys_p02.c \
X        dcanalyse_dc.c
X
XMAINOBJS = $(OBJS) dcanalyse_dc.o \
X	   Usage.o ParseOptions.o symb_general.o symb_system.o \
X	   pars_system.o util.o scanner.o yyfuncts.o debug.o
X
XOBJS = dcanalyse_sr.o dcanalys_xdr.o
X
XPARSFILES = ../include/analyse.h ../include/cfgparsers.h ../config/y.tab.h \
X	    ../config/symb_general.c ../config/symb_system.c \
X	    ../config/pars_system.c ../config/util.c ../config/scanner.c \
X	    ../config/yyfuncts.c ../config/debug.c
X
X.c.o:
X	$(ECHO) ""
X	$(ECHO) "***** Compiling $<"
X	$(CC) $(CFLAGS) -c $<
X	$(TOUCH) $@
X
Xall: PREPARED
X	$(MAKE) $(BIN)
X	$(ECHO) ""
X	$(ECHO) all stuff done for 'dcanalyse.dc'!
X
XPREPARED:
X	$(ECHO) Installing Distributed C compiler and runtime library...
X	-( cd .. ; make install )
X	$(ECHO) Preparing local host for compilation...
X	$(CC) -prepare -target local
X	$(TOUCH) PREPARED
X
Xdcanalyse: files dcanalyse.h $(MAINOBJS) 
X	$(ECHO) "***** Building $@"
X	$(LD) -o dcanalyse $(LFLAGS) $(MAINOBJS) $(LIBS)
X	$(TOUCH) $@
X
Xdcanalys_p01: files $(OBJS) dcanalys_p01.o
X	$(ECHO) "***** Building $@"
X	$(LD) -o dcanalys_p01 $(LFLAGS) $(OBJS) dcanalys_p01.o $(LIBS)
X	$(TOUCH) $@
X
Xdcanalys_p02: files $(OBJS) dcanalys_p02.o
X	$(ECHO) "***** Building $@"
X	$(LD) -o dcanalys_p02 $(LFLAGS) $(OBJS) dcanalys_p02.o $(LIBS)
X	$(TOUCH) $@
X
Xdcanalyse.h: ../include/cfgparsers.h ../include/version.h dcanalyse.dc
X	$(ECHO) ""
X	$(ECHO) "***** Compiling dcanalyse.dc to standard code"
X	$(DCC) $(DCCFLAGS) dcanalyse.dc
X	\rm -f dcanalyse.mf
X
Xfiles: dcanalyse.h ../include/analyse.h ../include/cfgparsers.h $(PARSFILES)
X	cp $(PARSFILES) .
X	$(CC) $(CFLAGS) dcanalyse.h cfgparsers.h analyse.h y.tab.h
X	$(TOUCH) $@
X
X$(PARSFILES):
X	( cd ../config ; make )
X
Xdcanalyse_sr.o: dcanalyse.h dcanalyse_sr.c
X#dcanalys_xdr.o: dcanalyse.h dcanalys_xdr.c
Xdcanalys_p01.o: dcanalyse.h dcanalys_p01.c
Xdcanalys_p02.o: dcanalyse.h dcanalys_p02.c
Xdcanalyse_dc.o: dcanalyse.h dcanalyse_dc.c
X
Xnew:
X	touch dcanalyse.h
X	$(MAKE) all
X
Xbeautify:
X	$(ECHO) "beautifying the generated files of 'dcanalyse.dc'"
X	for name in $(FILES); \
X	do \
X	    mv $${name} cb.tmp; $(CB) $(CBFLAGS) cb.tmp > $${name}; \
X	done
X	-@\rm cb.tmp
X	$(ECHO) done!
X
Xclean:
X	@echo "Cleaning the directory..."
X	-\rm -f dcanalyse.h dcanalyse_sr.c dcanalyse_dc.c dcanalys_p01.c \
X		dcanalys_p02.c dcanalyse dcanalys_p01 dcanalys_p02 \
X		y.tab.h analyse.h cfgparsers.h symb_general.c symb_system.c \
X		pars_system.c util.c scanner.c yyfuncts.c files dcc.debug \
X		dcanalys_xdr.c debug.c
X	-\rm -f *.o PREPARED
X	@echo done!
END_OF_FILE
if test 4654 -ne `wc -c <'dcanalyse/Makefile'`; then
    echo shar: \"'dcanalyse/Makefile'\" unpacked with wrong size!
fi
# end of 'dcanalyse/Makefile'
fi
if test -f 'dcanalyse/ParseOptions.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dcanalyse/ParseOptions.c'\"
else
echo shar: Extracting \"'dcanalyse/ParseOptions.c'\" \(4957 characters\)
sed "s/^X//" >'dcanalyse/ParseOptions.c' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                       P a r s e O p t i o n s . c                       *
X *                                                                         *
X *                            Package : System Analyser                    *
X *                            Version : 1.0                                *
X *                       CreationDate : 05.03.92                           *
X *                         LastUpDate : 08.03.92                           *
X *                                                                         *
X *             Parses and interprets the command line options.             *
X *                                                                         *
X *                 Copyright (C) 1992 by Christoph Pleier                  *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#include <stdio.h>
X#include <stdlib.h>
X#include <string.h>
X#include <sys/types.h>
X#include "cfgparsers.h"
X#include "analyse.h"
X
X/******************************************************************************
X * ParseOptions()                                                             *
X *                                                                            *
X * Parses and interprets the command line options.                            *
X *                                                                            *
X * Return values: OK upon success / ERROR upon error                          *
X ******************************************************************************/
Xint
XParseOptions(argc, argv)
Xint   argc;
Xchar *argv[];
X{
X    register int i;
X    struct targetlist_t *ptr;
X
X    for(i = 1; i < argc; i++) {
X
X	if (!strcmp(argv[i], "-append")) {
X            /* Option: "-append" */
X	    append = TRUE;
X#ifdef DEBUG
X            printf("Option recognized: \"-append\"\n");
X#endif /* DEBUG /**/
X	    continue;
X        }
X
X	if (!strcmp(argv[i], "-f")) {
X            /* Option: "-f filename" */
X            strcpy(cfgfilename, argv[++i]);
X#ifdef DEBUG
X            printf("Option recognized: \"-f %s\"\n", cfgfilename);
X#endif /* DEBUG /**/
X	    continue;
X        }
X
X	if (!strcmp(argv[i], "-n")) {
X            /* Option: "-n number" */
X            trial_num = atoi(argv[++i]);
X#ifdef DEBUG
X            printf("Option recognized: \"-n %d\"\n", trial_num);
X#endif /* DEBUG /**/
X	    continue;
X        }
X
X        if (!strcmp(argv[i], "-target")) {
X            if (!strcmp(argv[++i], "all")) {
X                /* Option: "-target all" */
X                alltargets = TRUE;
X#ifdef DEBUG
X                printf("Option recognized: \"-target all\"\n");
X#endif /* DEBUG /**/
X	    } else {
X		/* Option: "-target hostname" */
X		ptr = (struct targetlist_t *) Malloc(sizeof(struct targetlist_t));
X		ptr->hostname = argv[i];
X		ptr->next     = NULL;
X		if (!first_target)
X		    first_target = last_target = ptr;
X		else {
X		    last_target->next = ptr;
X		    last_target = ptr;
X		}
X#ifdef DEBUG
X                printf("Option recognized: \"-target %s\"\n", argv[i]);
X#endif /* DEBUG /**/
X	    }
X	    continue;
X	}
X
X	if (!strcmp(argv[i], "-verbose")) {
X            /* Option: "-verbose" */
X	    verbose = TRUE;
X#ifdef DEBUG
X            printf("Option recognized: \"-verbose\"\n");
X#endif /* DEBUG /**/
X	    continue;
X        }
X
X	if (!strcmp(argv[i], "-no_measure")) {
X            /* Option: "-no_measure" */
X	    no_measure = TRUE;
X#ifdef DEBUG
X            printf("Option recognized: \"-no_measure\"\n");
X#endif /* DEBUG /**/
X	    continue;
X        }
X
X	outputfilename = argv[i];
X#ifdef DEBUG
X        printf("Option recognized: \"%s\" is outputfilename\n", argv[i]);
X#endif /* DEBUG /**/
X
X    } /* for(i) */
X
X    return(OK);
X} /* ParseOptions */
END_OF_FILE
if test 4957 -ne `wc -c <'dcanalyse/ParseOptions.c'`; then
    echo shar: \"'dcanalyse/ParseOptions.c'\" unpacked with wrong size!
fi
# end of 'dcanalyse/ParseOptions.c'
fi
if test -f 'dcc/String.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dcc/String.c'\"
else
echo shar: Extracting \"'dcc/String.c'\" \(5087 characters\)
sed "s/^X//" >'dcc/String.c' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                            S t r i n g . c                              *
X *                                                                         *
X *                            Package : Compiler                           *
X *                            Version : 1.0                                *
X *                       CreationDate : 11.08.90                           *
X *                         LastUpDate : 08.11.91                           *
X *                                                                         *
X *                   Special string handling routines.                     *
X *                                                                         *
X *     Copyright (C) 1990-1994 by Franz Distler and Christoph Pleier.      *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#include <stdio.h>
X#include <string.h>
X#include <varargs.h>
X#include "config.h"
X#include "extern.h"
X#include "functions.h"
X
X/******************************************************************************
X * strmalloc()                                                                *
X *                                                                            *
X * Allocates memory for a string of size CODESTRLEN and initializes this      *
X * string with 's'.                                                           *
X *                                                                            *
X * Return values: pointer to the new string upon success / NULL upon error    *
X ******************************************************************************/
Xchar *
Xstrmalloc(s)
Xchar *s;
X{
X    static char *ptr;
X
X    ptr = Malloc(CODESTRLEN);
X    if (sysinclflag)
X	*ptr = 0;
X    else 
X	strcpy(ptr, s);
X    return(ptr);
X} /* strmalloc */
X
X/******************************************************************************
X * Strcat()                                                                   *
X *                                                                            *
X * Appends 's2' to 's1' after reallocating memory if required.                *
X *                                                                            *
X * Return values: pointer to the concatenated string                          *
X ******************************************************************************/
Xchar *
XStrcat(s1, s2)
Xchar *s1, *s2;
X{
X    unsigned long s1len, s2len, s1maxlen, s2maxlen;
X    char *ptr;
X
X    if (sysinclflag || outcodeflag || !s1 || !s2)
X	return(s1);
X    s1len = strlen(s1);
X    s2len = strlen(s2);
X    s1maxlen = CODESTRLEN;
X    s2maxlen = CODESTRLEN;
X    while(s1len > s1maxlen)
X        s1maxlen += CODESTRLEN;
X    while(s2len > s2maxlen)
X        s2maxlen += CODESTRLEN;
X    if ((s1len + s2len) > s1maxlen) {
X        if (!(s1 = (char *) realloc(s1, s1maxlen + s2maxlen)))
X            Panic("can't get heap space in realloc()");
X    }
X    strcat(s1, s2);
X    return(s1);
X} /* Strcat */
X
X/******************************************************************************
X * Strcatmany()                                                               *
X *                                                                            *
X * Concatenates 'num' strings and appends the result at string 'dest'.        *
X *                                                                            *
X * Return values: pointer to the concatenated string                          *
X ******************************************************************************/
Xchar *
XStrcatmany(dest, num, va_alist)
Xchar *dest;
Xint num;
Xva_dcl
X{
X    int i;
X    va_list ap;
X
X    if (sysinclflag || outcodeflag)
X	return(dest);
X    va_start(ap);
X    for(i = 0; i < num; ++i)
X        dest = Strcat(dest, va_arg(ap, char *));
X    va_end(ap);
X    return(dest);
X} /* Strcatmany */
END_OF_FILE
if test 5087 -ne `wc -c <'dcc/String.c'`; then
    echo shar: \"'dcc/String.c'\" unpacked with wrong size!
fi
# end of 'dcc/String.c'
fi
if test -f 'dcc/attr_debug.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dcc/attr_debug.c'\"
else
echo shar: Extracting \"'dcc/attr_debug.c'\" \(4658 characters\)
sed "s/^X//" >'dcc/attr_debug.c' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                        a t t r _ d e b u g . c                          *
X *                                                                         *
X *                            Package : Compiler                           *
X *                            Version : 1.0                                *
X *                       CreationDate : 28.07.90                           *
X *                         LastUpDate : 08.11.91                           *
X *                                                                         *
X *      Special routines used for displaying debug informations only.      *
X *                                                                         *
X *               Copyright (C) 1990-1994 by Christoph Pleier               *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#include <stdio.h>
X#include "config.h"
X#include "extern.h"
X#include "functions.h"
X
X#ifdef DEBUGFLAG
X
X/******************************************************************************
X * display_comp_attribute()                                                   *
X *                                                                            *
X * Writes the components of a compound statement attribute to 'debugfile'.    *
X *                                                                            *
X * Return values: always OK for success                                       *
X ******************************************************************************/
Xint
Xdisplay_comp_attribute(attr)
XCOMPATTR *attr;
X{
X    if (!attr) /* error handling! */
X	return(ERROR);
X#ifdef ATTRDEBUG
X    fputs("[attr] ***** display_comp_attribute():\n", debugfile);
X#endif /* ATTRDEBUG /**/
X    fprintf(debugfile, "[attr] declarations:\n%s\n", attr->decls);
X    fprintf(debugfile, "[attr] statements:\n%s\n", attr->stats);
X    fflush(debugfile);
X    return(OK);
X} /* display_comp_attribute */
X
X/******************************************************************************
X * display_select_attribute()                                                 *
X *                                                                            *
X * Writes the components of a select statement attribute to 'debugfile'.      *
X *                                                                            *
X * Return values: always OK for success                                       *
X ******************************************************************************/
Xint
Xdisplay_select_attribute(attr)
XSELECTATTR *attr;
X{
X    int i = 1;
X    SELECTATTR *hptr;
X
X    if (!attr) /* error handling! */
X	return(ERROR);
X#ifdef ATTRDEBUG
X    fputs("[attr] ***** display_select_attribute():\n", debugfile);
X#endif /* ATTRDEBUG /**/
X    for(hptr = attr; hptr; hptr = hptr->next) {
X	fprintf(debugfile, "[attr] select part %d:\n", i++);
X	fprintf(debugfile, "[attr]     guard = '%s'\n", hptr->guard);
X	fprintf(debugfile, "[attr]     type  = '");
X	switch(hptr->type) {
X	case ALT_ACCEPT:
X	    fputs("accept", debugfile);
X	    break;
X	case ALT_TERMINATE:
X	    fputs("terminate", debugfile);
X	    break;
X	case ALT_IMMEDIATE:
X	    fputs("immediate", debugfile);
X	    break;
X	default:
X	    fputs("unknown", debugfile);
X	} /* switch */
X	fputs(" - alternative'\n", debugfile);
X    } /* for */
X    fflush(debugfile);
X    return(OK);
X} /* display_select_attribute */
X
X#endif /* DEBUGFLAG /**/
END_OF_FILE
if test 4658 -ne `wc -c <'dcc/attr_debug.c'`; then
    echo shar: \"'dcc/attr_debug.c'\" unpacked with wrong size!
fi
# end of 'dcc/attr_debug.c'
fi
if test -f 'dcc/code_decl.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dcc/code_decl.c'\"
else
echo shar: Extracting \"'dcc/code_decl.c'\" \(4720 characters\)
sed "s/^X//" >'dcc/code_decl.c' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                          c o d e _ d e c l . c                          *
X *                                                                         *
X *                            Package : Compiler                           *
X *                            Version : 1.0                                *
X *                       CreationDate : 16.09.91                           *
X *                         LastUpDate : 16.09.91                           *
X *                                                                         *
X *       The routine to generate code for declarations if required.        *
X *                                                                         *
X *               Copyright (C) 1991-1994 by Christoph Pleier.              *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#include <stdio.h>
X#include <sys/types.h>
X#include "config.h"
X#include "extern.h"
X#include "functions.h"
X
X/******************************************************************************
X * evaluate_declaration()                                                     *
X *                                                                            *
X * Checks if a declaration is a type definition.                              *
X * If true, the corresponding symbol table entry is marked as a type          *
X * definition and a new element pointing to this symbol table entry is        *
X * chained in the list 'struct_type_list'.                                    *
X * Otherwise the declaration is converted to a string and returned as result. *
X *                                                                            *
X * Return values: pointer to generated code string upon success /             *
X *                NULL during error handling                                  *
X ******************************************************************************/
Xchar *
Xevaluate_declaration(decl_spec, id_list)
XDS_ATTR  *decl_spec;
XIDL_ATTR *id_list;
X{
X    char *result;
X    DS_ATTR *ds_attr;
X
X#ifdef DECLDEBUG
X    fprintf(debugfile, "[decl] ***** evaluate_declaration()\n");
X#endif /* DECLDEBUG /**/
X
X    if (decl_spec->scs && decl_spec->scs->type == SCS_ATTR_TYPEDEF) {
X	/* 
X	 * declaration is a type definition! 
X	 */
X	(void) make_typedef_name(decl_spec, id_list);
X#ifdef DECLDEBUG
X        *convert_buffer = 0;
X        convert_buffer = convert_ds_to_string(convert_buffer, decl_spec);
X        convert_buffer = convert_idl_to_string(convert_buffer, id_list);
X        convert_buffer = Strcat(convert_buffer, ";\n");
X	fprintf(debugfile, "[decl]       type definition: %s\n", convert_buffer);
X#endif /* DECLDEBUG /**/
X        result = strmalloc("");
X    } else {
X	/* 
X	 * declaration is NOT a type definition! 
X	 */
X        *convert_buffer = 0;
X	for(ds_attr = decl_spec; ds_attr;  ds_attr = ds_attr->ds) {
X	    if (ds_attr->scs)
X		convert_buffer = convert_scs_to_string(convert_buffer, ds_attr->scs);
X	    else if (ds_attr->tq)
X		convert_buffer = convert_tq_to_string(convert_buffer, ds_attr->tq);
X	    else if (ds_attr->ts)
X		convert_buffer = convert_ts_to_string(convert_buffer, ds_attr->ts, FALSE);
X	} /* for */
X        convert_buffer = convert_idl_to_string(convert_buffer, id_list);
X	convert_buffer = Strcat(convert_buffer, ";\n");
X	result = strmalloc(convert_buffer);
X    }
X
X    return(result);
X} /* evaluate_declaration */
X
X/* to avoid a stupid error under SCO UNIX */
Xstatic int dummy()
X{}
X
X
END_OF_FILE
if test 4720 -ne `wc -c <'dcc/code_decl.c'`; then
    echo shar: \"'dcc/code_decl.c'\" unpacked with wrong size!
fi
# end of 'dcc/code_decl.c'
fi
if test -f 'dcc/signal.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dcc/signal.c'\"
else
echo shar: Extracting \"'dcc/signal.c'\" \(4995 characters\)
sed "s/^X//" >'dcc/signal.c' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                            s i g n a l . c                              *
X *                                                                         *
X *                            Package : Compiler                           *
X *                            Version : 1.0                                *
X *                       CreationDate : 31.08.91                           *
X *                         LastUpDate : 06.12.93                           *
X *                                                                         *
X *                 All routines used for signal handling.                  *
X *                                                                         *
X *               Copyright (C) 1991-1994 by Christoph Pleier               *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#include <stdio.h>
X#include <signal.h>
X#include <sys/types.h>
X#include <sys/stat.h>
X#include "config.h"
X#include "extern.h"
X#include "functions.h"
X#include "com_Errno.h"
X
X/******************************************************************************
X * CatchSignal()                                                              *
X *                                                                            *
X * 'CatchsIgnal' will be called when a signal occurs. If the signal is a      *
X * segmentation violation or a bus error and some errors occured during       *
X * compilation, the program is aborted because of an fatal error. Otherwise   *
X * It displays the signal type on stderr, deletes all generated files and     *
X * finally calles the signal by itsself to perform the default action.        *
X *                                                                            *
X * Return value: none!                                                        *
X ******************************************************************************/
X#if defined(HPUX) || defined(UNICOS) || defined(LINUX)
Xstatic void
X#else
Xstatic int
X#endif
XCatchSignal(sig)
Xint sig;
X{
X#ifdef UNICOS
X    extern long yynerrs;
X#else
X    extern int yynerrs;
X#endif
X    extern char _progname[];
X
X    /* signal(sig, SIG_IGN); */
X    if (yynerrs > 0 && (sig == SIGBUS || sig == SIGSEGV)) {
X	Errno = FCANTRECOVER;
X	FatalError("");
X	/* Note: there is no return from FatalError()! */
X    }
X    fputs("Signal received: ", stderr);
X    switch(sig) {
X    case SIGHUP:
X	fputs("Hangup", stderr);
X	break;
X    case SIGINT:
X	fputs("Interrupt", stderr);
X	break;
X    case SIGQUIT:
X	fputs("Quit", stderr);
X	break;
X    case SIGTERM:
X	fputs("Software termination", stderr);
X	break;
X    case SIGBUS:
X	fputs("bus error", stderr);
X	break;
X    case SIGSEGV:
X	fputs("segmentation violation", stderr);
X	break;
X    default:
X	fputs("unknown kind", stderr);
X    } /* switch */
X    fputs("\n", stderr);
X    close_files();
X    remove_files();
X    signal(sig, SIG_DFL);
X    (void) kill(getpid(), sig);
X} /* CatchSignal */
X
X/******************************************************************************
X * SetSignals()                                                               *
X *                                                                            *
X * Sets the signal vectors to handle various signals.                         *
X *                                                                            *
X * Return value: none!                                                        *
X ******************************************************************************/
Xint
XSetSignals()
X{
X    signal(SIGHUP,  CatchSignal);
X    signal(SIGINT,  CatchSignal);
X    signal(SIGQUIT, CatchSignal);
X    signal(SIGTERM, CatchSignal);
X    signal(SIGBUS,  CatchSignal);
X    signal(SIGSEGV, CatchSignal);
X} /* SetSignals */
X
END_OF_FILE
if test 4995 -ne `wc -c <'dcc/signal.c'`; then
    echo shar: \"'dcc/signal.c'\" unpacked with wrong size!
fi
# end of 'dcc/signal.c'
fi
if test -f 'dcc/version.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dcc/version.c'\"
else
echo shar: Extracting \"'dcc/version.c'\" \(5140 characters\)
sed "s/^X//" >'dcc/version.c' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                            v e r s i o n . c                            *
X *                                                                         *
X *                            Package : Compiler                           *
X *                            Version : 1.0                                *
X *                       CreationDate : 25.09.91                           *
X *                         LastUpDate : 06.12.93                           *
X *                                                                         *
X *              Writes the compiler configuration to stdout.               *
X *                                                                         *
X *               Copyright (C) 1991-1994 by Christoph Pleier               *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#include <stdio.h>
X#include <signal.h>
X#include "config.h"
X#include "extern.h"
X#include "functions.h"
X
X/******************************************************************************
X * display_version()                                                          *
X *                                                                            *
X * Displays the compiler configuration message to stdout.                     *
X *                                                                            *
X * Return values: none!                                                       *
X ******************************************************************************/
Xint
Xdisplay_version()
X{
X    printf("Compiler configuration:\n");
X    printf("   Operating system name  : ");
X#ifdef iPSC
X    puts("Intel Hypercube Simulator on SCO Unix");
X#endif 
X#ifdef AIX
X    puts("AIX for IBM Workstations");
X#endif
X#ifdef CONVEX
X    puts("ConvexOs for CONVEX Supercomputers");
X#endif
X#ifdef HPUX
X    puts("HP/UX for Hewlett Packard Workstations");
X#endif
X#ifdef LINUX
X    puts("LINUX for AT386/486");
X#endif
X#ifdef SPARC
X    puts("SunOs for Sun Sparc Stations");
X#endif
X#ifdef SCO_XENIX
X    puts("SCO Xenix Release 2.3.1 or greater for AT i386");
X#endif
X#ifdef SCO_UNIX
X    puts("SCO Unix Release 3.2 or greater for AT i386");
X#endif
X#ifdef ULTRIX
X    puts("Ultrix for Vaxes");
X#endif
X#ifdef UNICOS
X    puts("UNICOS for Cray Supercomputers");
X#endif
X
X    printf("   Operating system class : ");
X#ifdef SYSTEM_V
X    printf("System V\n");
X#else
X# ifdef BSD
X    printf("BSD\n");
X# else
X    printf("unknown\n");
X# endif
X#endif
X
X    printf("   Communication routines : ");
X#ifdef CUBE
X    printf("iPSC primitives\n");
X#else
X# ifdef MSGSEM
X    printf("message queues and semaphores\n");
X# else
X#  ifdef SOCKET
X    printf("stream sockets\n");
X#  else
X    printf("unknown\n");
X#  endif
X# endif
X#endif
X
X    printf("   Supported network type : ");
X#ifdef SINGLE
X    printf("single machine (no network use possible!)\n");
X#else
X# ifdef HOMOGENEOUS
X    printf("homogeneous\n");
X# else
X#  ifdef HETEROGENEOUS
X    printf("heterogeneous\n");
X#  else
X    printf("unknown\n");
X#  endif
X# endif
X#endif
X
X#ifdef DEBUGFLAG
X    printf("\nOutput of additional compilation information enabled for:\n");
X# ifdef ATTRDEBUG
X    printf("   attributes handling        [attr]\n");
X# endif
X# ifdef CODEDEBUG
X    printf("   code generation            [code]\n");
X# endif
X# ifdef DECLDEBUG
X    printf("   declaration administration [decl]\n");
X# endif
X# ifdef DEBUG
X    printf("   general compiler actions   [debg]\n");
X# endif
X# ifdef STRUCTDEBUG
X    printf("   structure handling         [type]\n");
X# endif
X# ifdef SYMBDEBUG
X    printf("   symbol table managing      [symb]\n");
X# endif
X# ifdef LEXDEBUG
X    printf("   scanning\n");
X# endif
X# ifdef YYDEBUG
X    printf("   parsing\n");
X# endif
X#endif /* DEBUGFLAG /**/
X
X#if defined(__DATE__) && defined(__TIME__)
X    printf("\nLast build at %s %s.\n", __DATE__, __TIME__);
X#endif
X    puts("");
X} /* display_version */ 
END_OF_FILE
if test 5140 -ne `wc -c <'dcc/version.c'`; then
    echo shar: \"'dcc/version.c'\" unpacked with wrong size!
fi
# end of 'dcc/version.c'
fi
if test -f 'dcinstall/Clean.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dcinstall/Clean.c'\"
else
echo shar: Extracting \"'dcinstall/Clean.c'\" \(4822 characters\)
sed "s/^X//" >'dcinstall/Clean.c' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                              C l e a n . c                              *
X *                                                                         *
X *                            Package : Installer Program                  *
X *                            Version : 1.1                                *
X *                       CreationDate : 25.11.91                           *
X *                         LastUpDate : 03.12.93                           *
X *                                                                         *
X * The routine 'CleanTarget' which cleans target hosts' remote compilation *
X * directories.                                                            *
X *                                                                         *
X *               Copyright (C) 1991-1994 by Christoph Pleier               *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#include <stdio.h>
X#include <pwd.h>
X#include "cfgparsers.h"
X#include "dcinstall.h"
X
X/******************************************************************************
X * CleanTarget()                                                              *
X *                                                                            *
X * Cleans the compilation directory of host 'dest' if required.               *
X *                                                                            *
X * Return values: OK upon success / ERROR upon error                          *
X ******************************************************************************/
Xint
XCleanTarget(src, dest)
XSYMBTABEL *src;		/* source host */
XSYMBTABEL *dest;	/* destination host */
X{
X    int mounted;		/* src and dest share one filesystem or not */
X    static char cmd[1000];	/* to store the command */
X    SYMBTABEL *symbol, *symbol2, *class;
X
X    if (!dest->info.Host.istarget || dest->info.Host.ex_storage->info.disk.wascleaned) 
X	return(OK);
X
X#ifndef DEBUG
X    printf("Cleaning     disk %s\n", dest->info.Host.ex_storage->name);
X#endif /* Not DEBUG /**/
X
X    /* Determine access mode:
X     * If source-host equals destination host or source and dest host
X     * share one disk the access mode is mounted. Otherwise if dest is
X     * accessed via network, it is not mounted!
X     */
X    if (src == dest || src->info.Host.ex_storage->info.disk.location == dest->info.Host.ex_storage->info.disk.location)
X        mounted = TRUE;
X    else
X        mounted = FALSE;
X
X    if (mounted)
X	sprintf(cmd, "cd %s/dcc/compile ; \\", gethomedir(getLogin()));
X    else
X	sprintf(cmd, "%s %s cd dcc/compile \";\" \\\\", RSH, dest->name);
X    strcat(cmd, "rm -rf *");
X
X    if (verbose)
X	printf("Cleaning     command: %s\n", cmd);
X
X    if (!noexecute)
X        if (system(cmd)) {
X            fprintf(stderr, "\nError cleaning compilation dir at host \"%s\"\n", dest->name);
X	    fprintf(stderr, "The following command caused the error:\n");
X	    fprintf(stderr, "\"%s\"\n", cmd);
X	    exit(ERROR);
X	}
X
X    dest->info.Host.ex_storage->info.disk.wascleaned = TRUE; 
X
X    /* mark all hosts of this filesystem as cleaned */
X    for(symbol = symbtab; symbol; symbol = symbol->next) {
X	if (symbol->type == S_HOST 
X		   && symbol->info.Host.ex_storage == dest->info.Host.ex_storage
X		   && !symbol->info.Host.ex_storage->info.disk.wascleaned) {
X#ifdef DEBUG
X            printf("Marking disk %s as cleaned\n", symbol->info.Host.ex_storage->name);
X#endif /* DEBUG /**/
X	    symbol->info.Host.ex_storage->info.disk.wascleaned = TRUE;
X	}
X    } /* for */
X
X    return(OK);
X
X} /* CleanTarget */
END_OF_FILE
if test 4822 -ne `wc -c <'dcinstall/Clean.c'`; then
    echo shar: \"'dcinstall/Clean.c'\" unpacked with wrong size!
fi
# end of 'dcinstall/Clean.c'
fi
if test -f 'dclocate/ParseOptions.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dclocate/ParseOptions.c'\"
else
echo shar: Extracting \"'dclocate/ParseOptions.c'\" \(5067 characters\)
sed "s/^X//" >'dclocate/ParseOptions.c' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                       P a r s e O p t i o n s . c                       *
X *                                                                         *
X *                            Package : Locator Program                    *
X *                            Version : 1.1                                *
X *                       CreationDate : 05.03.92                           *
X *                         LastUpDate : 05.03.92                           *
X *                                                                         *
X *             Parses and interprets the command line options.             *
X *                                                                         *
X *               Copyright (C) 1992-1994 by Christoph Pleier               *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#include <stdio.h>
X#include <string.h>
X#include <sys/types.h>
X#include "cfgparsers.h"
X#include "dclocate.h"
X#include "location.h"
X
X/******************************************************************************
X * ParseOptions()                                                             *
X *                                                                            *
X * Parses and interprets the command line options.                            *
X *                                                                            *
X * Return values: OK upon success / ERROR upon error                          *
X ******************************************************************************/
Xint
XParseOptions(argc, argv)
Xint   argc;
Xchar *argv[];
X{
X    register int i, pos;
X    char *crit;
X
X    for(i = 1; i < argc; i++) {
X
X	if (!strcmp(argv[i], "-pf")) {
X            /* Option: "-pf filename" */
X            strcpy(p_cfgfilename, argv[++i]);
X#ifdef DEBUG
X            printf("Option recognized: \"-pf %s\"\n", p_cfgfilename);
X#endif /* DEBUG /**/
X	    continue;
X        }
X
X        if (!strcmp(argv[i], "-sf")) {
X            /* Option: "-sf filename" */
X            strcpy(s_cfgfilename, argv[++i]);
X#ifdef DEBUG
X            printf("Option recognized: \"-sf %s\"\n", s_cfgfilename);
X#endif /* DEBUG /**/
X	    continue;
X        }
X
X	if (!strcmp(argv[i], "-porder")) {
X	    crit = argv[++i];
X	    critprio_preferred = critprio_wished = critprio_load = 0;
X	    critprio_cload = critprio_crea = critprio_ipc = 0;
X
X	    for(pos=0; pos <6 && *crit != 0; pos++) {
X	        switch(*crit++) {
X		case 'p':
X		    critprio_preferred = prio_tab[pos];
X		    break;
X		case 'w':
X		    critprio_wished = prio_tab[pos];
X		    break;
X		case 'l':
X		    critprio_load = prio_tab[pos];
X		    break;
X		case 'o':
X		    critprio_cload = prio_tab[pos];
X		    break;
X		case 'c':
X		    critprio_crea = prio_tab[pos];
X		    break;
X		case 'i':
X		    critprio_ipc = prio_tab[pos];
X		    break;
X		default:
X		    return(ERROR);
X		} /* switch */
X	    }
X#ifdef DEBUG
X	    printf("Option recognized: \"-porder %s\"\n", argv[i]);
X#endif /* DEBUG /**/
X	    continue;
X	}
X
X	if (!strcmp(argv[i], "-verbose")) {
X	    /* Option: "-verbose" */
X	    verbose = TRUE;
X#ifdef DEBUG
X	    printf("Option recognized: \"-verbose\"\n");
X#endif /* DEBUG /**/
X	    continue;
X	}
X
X	if (!strcmp(argv[i], "-show_result")) {
X	    /* Option: "-show_result" */
X	    show_result = TRUE;
X#ifdef DEBUG
X	    printf("Option recognized: \"-show_result\"\n");
X#endif /* DEBUG /**/
X	    continue;
X	}
X
X#ifdef YYDEBUG
X	if (!strcmp(argv[i], "-yydebug")) {
X	    /* Option: "-yydebug" */
X# ifdef DEBUG
X	    printf("Option recognized: \"-yydebug\"\n");
X# endif /* DEBUG /**/
X	    yydebug = 1;
X	    continue;
X	}
X#endif /* YYDEBUG /**/
X
X	targetfilename = argv[i];
X#ifdef DEBUG
X        printf("Option recognized: \"%s\" is targetfilename\n", argv[i]);
X#endif /* DEBUG /**/
X
X    } /* for(i) */
X
X    return(OK);
X} /* ParseOptions */
END_OF_FILE
if test 5067 -ne `wc -c <'dclocate/ParseOptions.c'`; then
    echo shar: \"'dclocate/ParseOptions.c'\" unpacked with wrong size!
fi
# end of 'dclocate/ParseOptions.c'
fi
if test -f 'examples/buffer/buffer.dc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'examples/buffer/buffer.dc'\"
else
echo shar: Extracting \"'examples/buffer/buffer.dc'\" \(4906 characters\)
sed "s/^X//" >'examples/buffer/buffer.dc' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                           b u f f e r . d c                             *
X *                                                                         *
X *                 Version 1.0      CreationDate: 22.07.90                 *
X *                                    LastUpDate: 22.10.90                 *
X *                                                                         *
X *    A simple example: the realisation of a FIFO buffer as a process.     *
X *                                                                         *
X ***************************************************************************/
X
X/****************************************************************************
X *         name : buffer                                                    *
X *         type : process specification                                     *
X *   returntype : none                                                      *
X *   parameters : int max                                                   *
X *  description : Specification of the buffer process with the transactions *
X *                put (put char into buffer) and get (get char from buffer).*
X ****************************************************************************/
Xprocess spec buffer(int max) /* buffer holds max chars */
X{
X    /* put c into buffer; wait if full */
X    trans void put(char c); 
X
X    /* return next char; wait if empty */
X    trans char get();
X} /* process spec buffer */
X
X/****************************************************************************
X *         name : buffer                                                    *
X *         type : process definition                                        *
X *   returntype : none                                                      *
X *   parameters : max                                                       *
X *  description : Definition of the body of the buffer process including    *
X *                the bodies of the transactions (accept statements).       *
X ****************************************************************************/
Xprocess body buffer(max)
X{
X    int   n   = 0, 
X          in  = 0, 
X          out = 0;
X    char *buf;
X
X    buf = (char *) malloc(max + 1);
X#ifdef SYSTEM_V
X    memset(buf, '\0', max + 1);
X#endif
X    while(1) {
X        select {
X	    (n < max):
X	        accept put(c) { 
X		    buf[in] = c; 
X		}
X	        n++;
X	        in = (in + 1) % max;
X	or (n > 0):
X	        accept get() { 
X		    treturn(buf[out]); 
X		}
X	        n--;
X	        out = (out + 1) % max;
X	or
X		terminate
X        } /* select */
X    } /* while */
X} /* process body buffer */
X		
X/****************************************************************************
X *         name : main                                                      *
X *         type : function definition                                       *
X *   returntype : int                                                       *
X *   parameters : none                                                      *
X *  description : Definition of the main function building the main program.*
X ****************************************************************************/
Xmain()
X{
X    int     size, op, erg;
X    char    c, tmp, bufferhost[256];
X    process buffer b;
X
X    /* display start message */
X    puts("This program simulates a FIFO buffer:");
X
X    /* read buffer size in 'size' */
X    printf("buffer size? ");
X    scanf("%d%c", &size, &tmp);
X
X    printf("location to create buffer? ");
X    scanf("%s", bufferhost);
X    /*  start new buffer process and save id in variable b */
X    b = create buffer(size) at host(bufferhost);
X
X    /* do it! */
X    while(1) {
X	printf("\nOperation (0 = end, 1 = put, 2 = get) ? ");
X	scanf("%d%c", &op, &tmp);
X	switch(op) {
X	case 0:
X		/* destroy(b); */
X		exit(0);
X		/* break; */
X	case 1:
X		printf("character to put into buffer? ");
X		scanf("%c%c", &c, &tmp);
X		within 5 ? (b@put(c) : puts("buffer is full!"));
X		break;
X	case 2:
X		erg = within 5 ? (b@get() : -1);
X		if (erg == -1)
X			puts("buffer is empty!");
X		else
X			printf("result = %c\n", erg);
X		break;
X	}
X    } /* while */
X} /* main */
END_OF_FILE
if test 4906 -ne `wc -c <'examples/buffer/buffer.dc'`; then
    echo shar: \"'examples/buffer/buffer.dc'\" unpacked with wrong size!
fi
# end of 'examples/buffer/buffer.dc'
fi
if test -f 'include/version.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'include/version.h'\"
else
echo shar: Extracting \"'include/version.h'\" \(4594 characters\)
sed "s/^X//" >'include/version.h' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                          v e r s i o n . h                              *
X *                                                                         *
X *                            Package : Include files                      *
X *                            Version : 1.1                                *
X *                       CreationDate : 05.09.90                           *
X *                         LastUpDate : 02.12.93                           *
X *                                                                         *
X *  Global strings storing the name, version, copyright and header infos.  *
X *                                                                         *
X *     Copyright (C) 1990-1994 by Franz Distler and Christoph Pleier.      *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X/*
X * compiler
X */
X
X#ifdef DCC
Xchar *progname  = "\ndcc - a compiler for distributed programming with C";
Xchar *version   = "Version 2.0";
X# ifndef iPSC
Xchar *copyright = "Copyright (c) 1990-1994 by Christoph Pleier\nCopyright (c) 1990-1994 by Technische Universitaet Muenchen, Germany";
X# else
Xchar *copyright = "Copyright (c) 1990-1994 by C. and M. Pleier, Ultrasoft Munich";
X# endif /* Not iPSC /**/
X#endif /* DCC /**/
X
X/*
X * administration process
X */
X
X#ifdef DCADMIN	
Xchar *progname  = "\ndcadmin - the Distributed C administration process";
X# ifdef USE_MAPFILE
Xchar *version   = "Version 2.0 (process allocation by mapfile)";
X# else
Xchar *version   = "Version 2.0 (software aided process allocation)";
X# endif /* USE_MAPFILE /**/
X# ifndef iPSC
Xchar *copyright = "Copyright (c) 1990-1994 by Christoph Pleier\nCopyright (c) 1990-1994 by Technische Universitaet Muenchen, Germany";
X# else
Xchar *copyright = "Copyright (c) 1990-1994 by C. and M. Pleier, Ultrasoft Munich";
X# endif /* Not iPSC /**/
X#endif /* DCADMIN /**/
X
X/*
X * installer program
X */
X
X#ifdef DCINSTALL
Xchar *progname = "\ndcinstall - the Distributed C installer program";
Xchar *version  = "Version 2.0";
Xchar *copyright = "Copyright (c) 1991-1994 by Christoph Pleier\nCopyright (c) 1991-1994 by Technische Universitaet Muenchen, Germany";
X#endif /* DCINSTALL /**/
X
X/*
X * locator program
X */
X
X#ifdef DCLOCATE	
Xchar *progname = "\ndclocate - the Distributed C locator program";
Xchar *version  = "Version 1.0 beta";
Xchar *copyright = "Copyright (c) 1992-1994 by Christoph Pleier\nCopyright (c) 1992-1994 by Technische Universitaet Muenchen, Germany";
X#endif /* DCLOCATE /**/
X
X/*
X * analyzer program
X */
X
X#ifdef DCANALYSE
Xchar *progname = "\ndcanalyse - the Distributed C system analyser";
Xchar *version  = "Version 1.0 beta";
Xchar *copyright = "Copyright (c) 1992-1994 by Christoph Pleier\nCopyright (c) 1992-1994 by Technische Universitaet Muenchen, Germany";
X#endif /* DCANALYSE /**/
X
X/*
X * header text for generated C source files
X */
X
Xchar *headerstr[] = {
X    "this file was created by dcc.",
X    "dcc is a compiler for distributed programming with C, ",
X    "original designed and implemented by F. Distler and C. Pleier 1990, ",
X#ifdef iPSC
X    "with special assistance for the Intel Hypercube by M. Pleier,",
X#endif /* iPSC /**/
X    "tested, evaluated, reworked and extended by C. Pleier 1991-1994.",
X    "at the chair of Professor Dr. J. Eickel",
X    "Technische Universitaet Muenchen (TUM)",
X    ""
X};
END_OF_FILE
if test 4594 -ne `wc -c <'include/version.h'`; then
    echo shar: \"'include/version.h'\" unpacked with wrong size!
fi
# end of 'include/version.h'
fi
if test -f 'lib/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lib/Makefile'\"
else
echo shar: Extracting \"'lib/Makefile'\" \(4475 characters\)
sed "s/^X//" >'lib/Makefile' <<'END_OF_FILE'
X#***************************************************************************
X#*                                                                         *
X#* @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X#* @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X#* @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X#* @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X#* @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X#*                                                                         *
X#*              A compiler for distributed programming with C              *
X#*                                                                         *
X#*                             M a k e f i l e                             *
X#*                                                                         *
X#*                            Package : Runtime Library                    *
X#*                            Version : 1.0                                *
X#*                       CreationDate : 05.07.90                           *
X#*                         LastUpDate : 13.09.91                           *
X#*                                                                         *
X#*              The makefile to generate the runtime library.              *
X#*                                                                         *
X#*     Copyright (C) 1990-1994 by Franz Distler and Christoph Pleier.      *
X#*                          All rights reserved!                           *
X#***************************************************************************/
X
X#.SILENT
X
X# Some utility programs
X  SHELL = /bin/sh
X   MAKE = make
X   LINT = /usr/bin/lint
X
X# The path of the include files
XINCLUDEDIR = ../include
X
X# Include target system specific macros
Xinclude ../macros
X
X# Set appropriate macros
X     CC = $(CC_LIB)
X CFLAGS = $(CFLAGS_LIB) -I$(INCLUDEDIR)
X
X# The library name
XLIBNAME = dcc.a
X
X# All source files needed to build the library
XLIBSRCS = control.c convert.c creation.c destruction.c ipc.c \
X	  debug.c RuntimeError.c transaction.c 
X
X# All object files needed to build the library
XLIBOBJS = $(LIBSRCS:.c=.o)
X
X.c.o:
X	@echo "***** Compiling $<"
X	$(CC) $(CFLAGS) -c $<
X
Xall:
X	@echo ""
X	@echo "GENERATING THE RUNTIME LIBRARY..."
X	$(MAKE) $(IPC)
X	$(MAKE) $(LIBNAME) $(NETWORK)
X	@echo DONE!
X
X$(LIBNAME): $(LIBOBJS)
X	-\rm -f $(LIBNAME)
X	ar q $(LIBNAME) $(LIBOBJS)
X	-ranlib $(LIBNAME)
X
XCUBE: $(INCLUDEDIR)/ipc_iPSC.h ipc_iPSC.c
X	-\rm -f $(INCLUDEDIR)/ipc.h ipc.c SOCKET MSGSEM
X	cp $(INCLUDEDIR)/ipc_iPSC.h $(INCLUDEDIR)/ipc.h
X	cp ipc_iPSC.c ipc.c
X	touch $@
X
XSOCKET: $(INCLUDEDIR)/ipc_socket.h ipc_socket.c
X	-\rm -f $(INCLUDEDIR)/ipc.h ipc.c CUBE MSGSEM
X	cp $(INCLUDEDIR)/ipc_socket.h $(INCLUDEDIR)/ipc.h
X	cp ipc_socket.c ipc.c
X	touch $@
X
XMSGSEM: $(INCLUDEDIR)/ipc_msgsem.h ipc_msgsem.c
X	-\rm -f $(INCLUDEDIR)/ipc.h ipc.c CUBE SOCKET
X	cp $(INCLUDEDIR)/ipc_msgsem.h $(INCLUDEDIR)/ipc.h
X	cp ipc_msgsem.c ipc.c
X	touch $@
X
XSINGLE HOMOGENEOUS:
X	-\rm -f SINGLE HOMOGENEOUS HETEROGENEOUS
X	touch $@
X
XHETEROGENEOUS: $(LIBNAME) transfer.c
X	-\rm -f SINGLE HOMOGENEOUS
X	@echo "***** Compiling transfer.c"
X	$(CC) $(CFLAGS) -c transfer.c
X	ar q $(LIBNAME) transfer.o
X	-ranlib $(LIBNAME)
X	touch $@
X
Xtransfer.c: $(INCLUDEDIR)/dcc.h $(INCLUDEDIR)/ipc.h
X	rpcgen -c -o transfer.c $(INCLUDEDIR)/dcc.h
X
Xnew:
X	@touch *.c
X	$(MAKE) all
X
Xcheck:
X	@echo "checking $(LIBSRCS)"
X	$(LINT) $(CFLAGS) $(LIBSRCS) | more
X
Xdepend: $(IPC)
X	@echo "creating dependencies in Makefile"
X	makedepend $(CFLAGS) $(LIBSRCS)
X
Xclean:
X	@echo "Cleaning the directory..."
X	-\rm -f *.o $(INCLUDEDIR)/ipc.h \
X		ipc.c \
X		transfer.c \
X		$(LIBNAME) \
X		CUBE SOCKET MSGSEM \
X		SINGLE HOMOGENEOUS HETEROGENEOUS
X	
X	@echo done!
X
X# Other dependencies generated by make depend
Xcontrol.o: ../include/ipc.h ../include/dcc.h
Xconvert.o: ../include/ipc.h ../include/dcc.h ../include/run_Errno.h
Xcreation.o: ../include/ipc.h ../include/dcc.h ../include/run_Errno.h
Xcreation.o: ../include/timeout.h ../include/config.h
Xdestruction.o: ../include/ipc.h ../include/dcc.h ../include/run_Errno.h
Xipc.o: ../include/run_Errno.h
Xdebug.o: ../include/ipc.h ../include/dcc.h ../include/run_Errno.h
XRuntimeError.o: ../include/run_Errno.h ../include/run_errlist.h
XRuntimeError.o: ../include/ipc.h ../include/dcc.h
Xtransaction.o: ../include/ipc.h ../include/dcc.h ../include/run_Errno.h
Xtransaction.o: ../include/timeout.h
END_OF_FILE
if test 4475 -ne `wc -c <'lib/Makefile'`; then
    echo shar: \"'lib/Makefile'\" unpacked with wrong size!
fi
# end of 'lib/Makefile'
fi
if test -f 'lib/destruction.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lib/destruction.c'\"
else
echo shar: Extracting \"'lib/destruction.c'\" \(4967 characters\)
sed "s/^X//" >'lib/destruction.c' <<'END_OF_FILE'
X/***************************************************************************
X *                                                                         *
X * @@@@  @@@ @@@@@ @@@@@ @@@@@ @@@ @@@@  @   @ @@@@@ @@@@@ @@@@       @@@  *
X * @   @  @  @       @   @   @  @  @   @ @   @   @   @     @   @     @   @ *
X * @   @  @  @@@@@   @   @@@@@  @  @@@@@ @   @   @   @@@@@ @   @     @     *
X * @   @  @      @   @   @ @    @  @   @ @   @   @   @     @   @     @   @ *
X * @@@@  @@@ @@@@@   @   @  @  @@@ @@@@  @@@@@   @   @@@@@ @@@@       @@@  *
X *                                                                         *
X *              A compiler for distributed programming with C              *
X *                                                                         *
X *                        d e s t r u c t i o n . c                        *
X *                                                                         *
X *                            Package : Runtime Library                    *
X *                            Version : 1.0                                *
X *                       CreationDate : 05.09.90                           *
X *                         LastUpDate : 12.09.91                           *
X *                                                                         *
X *         All library routines needed during process destruction.         *
X *                                                                         *
X *                  Portions Copyright 1990 Franz Distler                  *
X *                  Portions Copyright 1990 Markus Pleier                  *
X *               Copyright (C) 1990-1994 by Christoph Pleier               *
X *                          All rights reserved!                           *
X ***************************************************************************/
X
X/*
X * This file is part of the Distributed C Development Environment (DCDE).
X * DCDE is free software; you can redistribute it and/or modify
X * it under the terms written in the README-file. 
X * DCDE is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
X * See the file README for more details.
X */
X
X#include <stdio.h>
X#include <sys/types.h>
X#ifdef HETEROGENEOUS
X# include <rpc/rpc.h>
X#endif
X#include <signal.h>
X#include "ipc.h"
X#include "dcc.h"
X#include "run_Errno.h"
X
X#define DEBUG_KILL /**/
X
X#ifdef DEBUG_KILL
X/* the flag to control the debug messages output */
Xint _debug_kill = 0;
X#endif /* DEBUG_KILL /**/
X
X#ifdef DEBUG_KILL
X# define DEBUGPUTS(msg)		if (_debug_kill) { \
X				    fprintf(_debugout, "[kil] %s %s\n", \
X				        _processprefix, msg); \
X				    if (_debugflush) \
X				        fflush(_debugout); \
X				}
X# define DEBUGDISPERR(msg)	if (_debug_kill) { \
X				    fprintf(_debugout, "[kil] %s error: %s\n", \
X				        _processprefix, msg); \
X				    fprintf(_debugout, "[kil] %s reason: %s\n",\
X				        _processprefix, sys_errlist[errno]); \
X				    if (_debugflush) \
X				        fflush(_debugout); \
X				}
X#else
X# define DEBUGPUTS(msg)		{ /* nothing */ }
X# define DEBUGDISPERR(msg)	{ /* nothing */ }
X#endif
X
X/******************************************************************************
X * _destroy_process()                                                         *
X *                                                                            *
X * This routine performs all operations to force termination of the process   *
X * specified by the process descriptor 'p_descr'.                             *
X *                                                                            *
X * Return value: OK upon success / ERROR upon error                           *
X ******************************************************************************/
Xint
X_destroy_process(p_descr, sig)
XPROCESSDESCR p_descr;
Xint sig;
X{
X#if !defined(iPSC) && !defined(SINGLE)
X    char cmd[100];
X#endif 
X
X#ifdef DEBUG_KILL
X    if (_debug_kill) {
X        fprintf(_debugout, "[kil] %s ***** _destroy_process():\n", 
X	    _processprefix);
X        _display_processdescr_info("[kil]", "killing process with data:", 
X	    p_descr);
X    }
X#endif /* DEBUG_KILL /**/
X#ifdef iPSC
X    killproc(p_descr.port.node, p_descr.port.pid);
X#else
X# ifdef SINGLE
X    kill(p_descr.pid, sig);
X# else /* HOMOGENEOUS || HETEROGENEOUS */
X    if (!strcmp(p_descr.port.hostname, _own_port.hostname)) {
X	/* process runs at local host! */
X        kill(p_descr.pid, sig);
X    } else {
X	/* process runs at remote host! */
X/*
X        sprintf(cmd, "rsh %s -n bin/dckill %d %d", p_descr.port.hostname, 
X		sig, p_descr.pid);
X*/
X        sprintf(cmd, "rsh %s -n kill -%d %d", p_descr.port.hostname, 
X		sig, p_descr.pid);
Xprintf("Killing command: %s\n", cmd); fflush(stdout);
X	if (system(cmd)) {
X		Errno = EPROCESSKILL;
X		return(ERROR);
X	}
X    }
X# endif /* SINGLE /**/
X#endif /* iPSC /**/
X    return(OK);
X} /* _destroy_process */
END_OF_FILE
if test 4967 -ne `wc -c <'lib/destruction.c'`; then
    echo shar: \"'lib/destruction.c'\" unpacked with wrong size!
fi
# end of 'lib/destruction.c'
fi
echo shar: End of archive 4 \(of 18\).
cp /dev/null ark4isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 18 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
