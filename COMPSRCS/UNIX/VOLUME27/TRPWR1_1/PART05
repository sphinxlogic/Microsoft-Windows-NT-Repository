Newsgroups: comp.sources.unix
From: spaf@cs.purdue.edu (Gene Spafford)
Subject: v27i151: tripwire-1.1 - security integrity monitor, V1.1, Part05/26
References: <1.756157401.21864@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: spaf@cs.purdue.edu (Gene Spafford)
Posting-Number: Volume 27, Issue 151
Archive-Name: tripwire-1.1/part05

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 5 (of 25)."
# Contents:  tripwire-1.1 tripwire-1.1/contrib tripwire-1.1/include
#   tripwire-1.1/README tripwire-1.1/contrib/README.CheckConfig
#   tripwire-1.1/include/patchlevel.h
# Wrapped by spaf@uther.cs.purdue.edu on Thu Dec 16 11:42:42 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test ! -d 'tripwire-1.1' ; then
    echo shar: Creating directory \"'tripwire-1.1'\"
    mkdir 'tripwire-1.1'
fi
if test ! -d 'tripwire-1.1/contrib' ; then
    echo shar: Creating directory \"'tripwire-1.1/contrib'\"
    mkdir 'tripwire-1.1/contrib'
fi
if test ! -d 'tripwire-1.1/include' ; then
    echo shar: Creating directory \"'tripwire-1.1/include'\"
    mkdir 'tripwire-1.1/include'
fi
if test -f 'tripwire-1.1/README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tripwire-1.1/README'\"
else
echo shar: Extracting \"'tripwire-1.1/README'\" \(33651 characters\)
sed "s/^X//" >'tripwire-1.1/README' <<'END_OF_FILE'
X## $Id: README,v 1.19 1993/12/15 23:03:37 genek Exp $
X##
X## README for Tripwire
X##
X## Gene Kim  & Gene Spafford
X## The COAST Project
X## Department of Computer Sciences
X## Purdue University
X##
X
X##  All files in the distribution of Tripwire are Copyright 1992, 1993 by 
X##  the Purdue Research Foundation of Purdue University.  All rights
X##  reserved.  Some individual files in this distribution may be covered
X##  by other copyrights, as noted in their embedded comments.
X##  
X##  Redistribution and use in source and binary forms are permitted
X##  provided that this entire copyright notice is duplicated in all such
X##  copies, and that any documentation, announcements, and other
X##  materials related to such distribution and use acknowledge that the
X##  software was developed at Purdue University, W. Lafayette, IN by
X##  Gene Kim and Eugene Spafford.  No charge, other than an "at-cost"
X##  distribution fee, may be charged for copies, derivations, or
X##  distributions of this material without the express written consent
X##  of the copyright holder.  Neither the name of the University nor the
X##  names of the authors may be used to endorse or promote products
X##  derived from this material without specific prior written
X##  permission.  THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY
X##  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE
X##  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ANY PARTICULAR
X##  PURPOSE.
X
X    This README file serves as a quick-and-dirty primer on Tripwire.
XA Postscript formatted paper that fully describes the design and
Xrationale is also included in the ./docs directory.  The design
Xdocument is also available as a technical report.  Tripwire.  This
Xdocument will be referenced throughout the Tripwire distribution as
Xthe Tripwire design document or the comprehensive Tripwire paper.
X
X    This README file contains information needed to build, test,
Xand run Tripwire.  A table of contents follow:
X
X
X	    0.0.  If you were running Tripwire v1.0
X	    1.0.  Background
X	    1.1.  Goals of Tripwire
X	    2.0.  How to build Tripwire
X	    2.1.  Common Tripwire compilation problems
X	    2.2.  The siggen utility
X	    3.0.  Getting Tripwire up and running
X	    3.1.  Creating your tw.config file
X	    3.2.  A caveat about your Tripwire database
X	    3.3.  Testing Tripwire
X	    3.4.  Running Tripwire as an integrity checker
X	    3.5.  Keeping your database up-to-date
X	    3.5.1.	Running Tripwire in Interactive mode
X	    3.5.2.	Running Tripwire in Database Update mode
X	    3.6.  A quick-checking mode
X	    4.0.  Some Tripwire scaling hints for using Tripwire 
X		    in large sites
X	    4.1.  The tw.config grammar
X	    4.2.  How you might use these directives
X	    5.0.  Notes on signature routines
X	    5.1.  Performance vs. security
X	    6.0.  Signature routines
X	    6.1.  MD5
X	    6.2.  Snefru
X	    6.3.  CRC-32
X	    6.4.  CRC-16
X	    6.5.  MD4
X	    6.6.  MD2
X	    6.7.  SHA/SHS
X	    6.8.  null signature
X	    7.0.  Feedback and bug-reports
X	    8.0.  User contributions
X	    9.0.  Acknowledgements
X
X0.0.  If you were running Tripwire v1.0
X=======================================
X
X    If you have been running an older version of Tripwire, please also
Xread the WHATSNEW file for information on new functionalities.  Also
Xnote that you will need to run `twconvert' to convert your databases
Xto the new format.
X
X    If you were running a beta version of Tripwire v1.1, you still
Xneed to convert your database.  (Beta versions of Tripwire v1.1 used
Xdatabase format 2.  You need to convert to format 3.)
X
X
X1.0.  Background
X================
X
X    With the advent of increasingly sophisticated and subtle
Xaccount break-ins on Unix systems, the need for tools to aid in
Xthe detection of unauthorized modification of files becomes
Xclear.  Tripwire is a tool that aids system administrators and
Xusers in monitoring a designated set of files for any changes.
XUsed with system files on a regular (e.g., daily) basis, Tripwire
Xcan notify system administrators of corrupted or tampered files,
Xso damage control measures can be taken in a timely manner.
X
X1.1.  Goals of Tripwire
X=======================
X
X    Tripwire is a file integrity checker, a utility that compares a
Xdesignated set of files against information stored in a previously
Xgenerated database.  Any differences are flagged and logged.  When run
Xagainst system files on a regular basis, any changes in critical
Xsystem files will be spotted -- and appropriate damage control
Xmeasures can be taken immediately.  With Tripwire, system
Xadministrators can conclude with a high degree of certainty that a
Xgiven set of files remain free of unauthorized modifications if
XTripwire reports no changes.
X
X
X2.0.  How to build Tripwire
X===========================
X
X    As of this writing, Tripwire has run successfully on (at least)
XBSD, OSF/1, Mach, Xenix, and late System V variants of Unix.  Tripwire
Xwas built and tested on a wide variety of Unix variants.
X
X    The file 'Ported' contains a list of platforms and operating
Xsystems where Tripwire has already been successfully ported.  If you
Xfind your system in the list, note the system settings that were used
Xto build Tripwire.
X
X    Second, look through the Makefile and make sure that the C
Xcompiler and all flag settings are reasonable for your configuration.
XMost of the potentially tricky system settings should be listed in the
X'Ported' file.
X
X    Next, look in the './configs' directory to find a predefined
X'conf-<os>.h' file that matches closest to your operating system.
XNote this file, because you will be inserting this filename in the
X'./include/config.h' file.  If no such file exists, pick one "near"
Xyour system type and modify appropriately (then mail it back to us for
Xa future release).
X
X    ** Don't do anything with this file yet!  In particular, don't copy
X    ** it over the config.h file!  (Instead, keep reading...)
X
X    Now that you have chosen your operating system header file, edit
Xthe './include/config.h' file to tailor Tripwire to your system.
XInclude the name of the predefined header file closest to your system
Xat the appropriate line in config.h
X
X    Paths and names of Tripwire configuration files are also set
Xin the config.h file.  Make sure you note the locations that
XTripwire looks for its configuration and database files; change them
Xfor your system, as appropriate.
X
X    NOTE: We *strongly* urge you to locate the Tripwire
Xconfiguration files on a disk that can be made read-only with a
Xhardware setting.  This will prevent the files from being altered
Xby an attacker.  The run-time version of Tripwire should be
Xlocated in the same place.  If you are unable to mark a disk (or
Xdiskette) as read-only, you might also consider putting it on a
Xremote partition of a more secure machine, and import it
Xread-only.  See the design document for the rationale behind this
Xnote if the concept is not obvious.
X
X    Last, look in the './configs' directory again to find a tw.config
Xfile that matches your operating system.  These files were
Xcustom-tailored to match the file layouts of various vendor supplied
Xoperating system.  If no file in this subdirectory matches your
Xsystem, choose the one that is closest in nature (e.g., BSD4.3 or
XSysV.4).  Edit this file to include additional files you want to
Xmonitor (e.g., local bins and critical databases), to correct paths if
Xyou have moved things or if they are mounted from a remote location
X(check them only on the server!), and to exclude locally-active files
Xfrom the check.  You should probably add the Tripwire binary itself to
Xthis file.  See the next section for further details.
X
X    After you have customized your tw.config file, copy it to the
Xlocation that you specified in your config.h file.
X
X    Next, simply type 'make' at the top level.  Note that all
XMakefiles in the subdirectories are driven by the top-level Makefile.
X(i.e., typing 'make' in the ./src directory will probably not work.)
X
X2.1.  Common Tripwire compilation problems
X==========================================
X
X    Tripwire was originally written using ANSI C.  However,
XTripwire now compiles with K&R, too.  All of the prototypes
Xremain embedded between "#ifdef __STDC__" directives.  Sadly,
Xcompiling under ANSI is sometimes noisier than with K&R.
XTherefore, go ahead and compile with K&R unless religion dictates
XANSI.  (The code lints completely clean, excepting the malloc()
Xand exit() return values.)
X
X    Common compilation trouble-spots are the dirent(S5)/direct(BSD) 
Xfunkiness and #defines that changed for POSIX compliance.
X
X    If the Tripwire test suite fails, consider trying the following:
X
X	- double check that you're including the correct conf-*.h file
X		in your ./include/config.h file.
X	- change the CFLAGS definition in the Makefile so no optimization
X		is done (i.e., remove the "-O" option).
X	- do a "make clean".
X	- try again.
X
X    If this fails, try a different C compiler (e.g., GCC).
X
X
X2.2.  The siggen utility
X==========================
X
X    The siggen utility is provided so users can get signatures of
Xfiles without having to run Tripwire.  The syntax of siggen is
Xsimple.
X
X	siggen [-0123456789aqv] [ file ... ]
X
X    By default, siggen prints out all ten signatures.  However,
Xthe signatures can be printed selectively by specifying the
Xsignature number on the command line.
X
X    See the manual page for details.
X
X3.0.  Getting Tripwire up and running
X=====================================
X
X    Tripwire runs in either of four modes: Database Generation,
XIntegrity Checking, Database Update, and Interactive Update mode.  In
Xorder to run Integrity Checking, Tripwire must have a database to
Xcompare against.  To do that, you must first specify the set of files
Xfor Tripwire to monitor.  This list is stored in 'tw.config'.
X
X3.1.  Creating your tw.config file
X==================================
X
X    Edit your 'tw.config' file, or whatever filename you defined for
Xthe Tripwire config file, and add all the directories that contain
Xfiles that you want monitored.  The format of the config file is
Xdescribed in its header and in the man page.  Pay especially close
Xattention to the select-flags and omit-lists, which can significantly
Xreduce the amount of uninteresting output generated by Tripwire.  For
Xexample, you will probably want to omit files like mount tables that
Xare constantly changed by the operating system.
X
X    Next, run Tripwire with 'tripwire -initialize'.  This will create
Xa file called 'tw.db_[hostname]' in the directory you specified to
Xhold your databases (where [hostname] will be replaced with your
Xmachine hostname).
X
X3.2.  A caveat about your Tripwire database
X===========================================
X
X    NOTE: Tripwire will detect changes made to files from this
Xpoint on.  You *must* be certain that the system on which you
Xgenerate the initial database is clean, however --- Tripwire
Xcannot detect unauthorized modifications that have already been
Xmade.  One way to do this would be to take the machine to
Xsingle-user mode, reinstall all system binaries, and run Tripwire
Xin initialization mode before returning to multi-user operation.
X
X    This database must be moved someplace where it cannot be
Xmodified.  Because data from Tripwire is only as trustworthy as
Xits database, choose this with care.  We recommend placing all
Xthe system databases on a read-only  disk, or exporting it
Xvia read-only NFS from a "secure-server."  (This pathname is
Xhardcoded into Tripwire.  Any time you change the pathname to the
Xdatabase repository, you must recompile Tripwire.  This prevents
Xa malicious intruder from spoofing Tripwire into giving a false
X"okay" message.)
X
X    We also recommend that you make a hardcopy printout of the
Xdatabase contents right away.  In the event that you become
Xsuspicious of the integrity of the database, you will be able to
Xmanually compare information against this hardcopy.  We have yet
Xto hear of a way for  "crackers" to alter an old piece of
Xprintout made before they penetrated the system!
X
X3.3.  Testing Tripwire
X======================
X
X    Tripwire includes a script-driven test suite that checks the
Xtop-level build directory against the distribution package.  
X
X    In the ./tests directory, there is a Tripwire database of the
Xentire Tripwire source distribution and a tw.config file.  The
Xtest script automatically converts the pathnames in these
XTripwire files to match those of your system.  After converting
Xthe files, it then runs Tripwire in Integrity Checking mode.
X
X    To run the test, simply type 'make test' at the top level.
XThis will invoke the script, and if all goes well, the output of
XTripwire matches the expected values that the script provides.
X
X    In addition to checking all the files in the Tripwire
Xdistribution, a number of signature and functional tests are runs to
Xensure the correct operation of the compiled program.
X
X
X3.4.  Running Tripwire as an integrity checker
X==============================================
X
X    Once you have your database set up, you can run Tripwire
Xin Integrity Checking mode by 'tripwire'.  
X
X3.5.  Keeping your database up-to-date
X======================================
X
X    A common setup for running Tripwire would mail the system
Xadministrator any output that it generates.  However, some files on
Xyour system may change during normal operation, and this necessitates
Xupdate of the Tripwire database.
X
X    There are now two ways to update your Tripwire database.  The first
Xmethod is interactive, where Tripwire ask the user whether each changed
Xentry should be updated to reflect the current state of the file, while the
Xsecond method is a command-line driven mode where specific files/entries
Xare specified at run-time.
X
X3.5.1.  Running Tripwire in Interactive mode
X============================================
X
X    Running Tripwire in Interactive mode is similar to the Integrity
XChecking mode.  However, when a file or directory is encountered that has
Xbeen added, deleted, or changed from what was recorded in the database, 
XTripwire asks the user whehter the database entry should be updated.
X
X    For example, if Tripwire were run in Interactive mode and a file's
Xtimestamps changed, Tripwire would print out what it expected the file 
Xto look like, what it actually found, and then prompt the user whether
Xthe file should b updated:
X
X	/homes/genek/research/tw/src/preen.c
X	      st_mtime: Wed May  5 15:30:37 1993      Wed May  5 15:24:09 1993      
X	      st_ctime: Wed May  5 15:30:37 1993      Wed May  5 15:24:09 1993      
X	---> File: '/homes/genek/research/tw/src/preen.c
X	---> Update entry?  [YN(y)nh?] y
X
X    You could answer yes or no, where a capital 'Y' or 'N' tells Tripwire
Xuse your answer for the rest of the files.  (The 'h' and '?' choices give
Xyou help and descriptions of the various inode fields.)
X
X    While this mode may be the most convenient way of keeping your database
Xup-to-date, it requires that the user be "at the keyboard".  A more
Xconventional command-line driven interface exists, and is described next.
X
X3.5.2.  Running Tripwire in Database Update mode 
X================================================
X
X    Tripwire supports incremental updates of its database on a
Xper-file/directory or tw.config entry basis.  Tripwire stores
Xinformation in the database so it can associate any file in the
Xdatabase with the tw.config entry that generated it when the
Xdatabase was created.
X
X    Therefore, if a single file has changed, you can:
X
X	tripwire -update /etc/newly.installed.file
X
X    Or, if an entire set of files that made up an entry in
Xthe tw.config file changed, you can:
X
X	tripwire -update /usr/local/bin/Local_Package_Dir
X
X    In either case, Tripwire regenerates the database entries
Xfor every specified file.  A backup of the old database is
Xcreated in the ./databases directory.
X
X    Note that Tripwire can now handle arbitrary numbers of
Xarguments in Database Update mode.  This was added in version 1.0.1.
X
X3.6.  A quick-checking mode
X===========================
X
X    Tripwire allows you to selectively skip certain signatures at
Xrun-time through a command-line option.  For example, if you wish
Xto run Tripwire on an hourly basis, even performing only MD5
Xchecks might be computationally prohibitive.  For this
Xapplication, checking only the CRC32 signature might be
Xdesirable.  To do this, assuming that only MD5, Snefru, and CRC32
Xwere used when the database was initialized, you would type:
X
X	tripwire -i 1 -i 2
X
X   This tells tripwire to ignore signature 1 and signature 2.
XFurthermore, for daily Tripwire runs, you could specify using
Xonly MD5 and CRC32.  Finally, for weekly runs, you could run
XTripwire with all three signatures.
X
X   To find added or deleted files, with no signature checking, use:
X
X	tripwire -i all
X
X
X4.0.  Some Tripwire scaling hints for using Tripwire in large sites
X===================================================================
X
X    The tw.config.5 manual page describes in detail the syntax
Xsupported by the tw.config file.  Tripwire includes features that
Xoffer similar functionality to the C-preprocessor, and offer other
Xdirectives that assist in the use of Tripwire at sites consisting of
Xhundreds of workstations with local disk.
X
X4.1.  The tw.config grammar
X===========================
X
X    These commands are briefly described below:
X
X	@@define VAR VALUE
X	@@undef VAR
X
X	@@ifhost HOSTNAME
X	@@ifnhost HOSTNAME
X	@@ifdef VAR
X	@@ifndef VAR
X	@@else
X	@@endif
X
X	@@include FILENAME
X
X    Furthermore, the tw.config grammar also supports logical
Xexpressions.  For example, you could have something like this
Xin your tw.config file:
X
X	@@ifhost spam.cc.purdue.edu || weiner.cc.purdue.edu
X	...entries...
X	@@endif
X
X    Besides the obvious cpp-like functionality, you can use
X@@define to create strings that are interpreted at run-time.
XFor example:
X
X	@@ifhost mentor.cc.purdue.edu
X	@@ define TEMPLATE_S	+pinug-cas0123456789
X	@@else
X	@@ define TEMPLATE_S	+pinug012-cas3456789
X	@@endif
X
X	/etc/tw.loginfo		@@TEMPLATE_S
X
X4.2.  How you might use these directives
X========================================
X
X    Because Tripwire allows run-time interpretation of the
Xtw.config file, it becomes possible for many different hosts to
Xshare the same tw.config file.  This allows the maintenance of
XTripwire configuration files to still be manageable in a large,
Xheterogeneous environment.  Although each host must still have
Xdifferent database file, this has few consequences except for
Xdisk space.
X
X5.0.  Notes on signature routines
X=================================
X
X    The RSA Data Security, Inc. MD5, MD4, and MD2 Message Digesting
XAlgorithm, Snefru (the Xerox Secure Hash Function) and SHA (the Secure
XHash Algorithm) code have been changed to eliminate big-endian and
Xlittle-endian run-time specific routines.  These changes have been
Xsent back to the authors, but we are not aware of any buy-backs yet.
XUntil then, there will remain some differences between the code in
Xthis package and their respective virgin distributions.
X
X5.1.  Performance vs. security
X==============================
X
X    Normally, only one checksum per file would be enough to
Xdetect changes.  For purposes of speed, an easy to calculate
Xchecksum would be preferred.  However, most easy-to-calculate
Xsignatures are also easy to defeat if a determined attacker
Xwished to do so (see the chart in the design document to see how
Xeasy this is to do with random comparisons).
X
X    Tripwire includes five very difficult-to-forge signature
Xalgorithms, as well as two more conventional CRC routines.  Using
Xthe default setup of recording two signatures (MD5 and Snefru)
Xfor each database entry gives very, very strong assurance that a
Xfile has not been tampered with.  For tampering to have
Xsucceeded, the attacker would have had to have changed the file
Xand added appropriate padding characters to recreate *both*
Xchecksums without also altering the size of the file.  To do this
Xat random might not even be possible with the MD5 and Snefru
Xchecksums used.  Those two algorithms have not been exhaustively
Xanalyzed, but both are known to be fairly strong.
X
X    This added assurance is at a heavy price, however.  The two
Xalgorithms, and Snefru in particular, are expensive to
Xcalculate.  To run the MD5 and Snefru algorithms against every
Xfile is likely to be overkill for almost all systems (unless you
Xhave cpu cycles to spare!).  Both checksums should be run over
Xonly the most critical files...like the Tripwire database and
Xprogram, and perhaps each setuid and setgid file on your system.
XAll other files can be checked with MD5 alone for much faster
Xoperation and a high level of assurance. The task of altering a
Xfile and recreating the original MD5 checksum is also very
Xdifficult, and it is unlikely that any but the most determined,
Xsophisticated, and well-equipped attacker would be able to do it
Xin finite time.
X
X    To decrease the execution run-times of Tripwire, consider
Xmodifying your tripwire.config entries to ignore the Snefru
X(signature 2) attribute on files that do not need such stringent
Xmonitoring.  This will skip the computationally-expensive Snefru
Xsignature collection entirely.  Balancing this equation of
Xsecurity vs.  speed is a decision best made by the administrator,
Xmost closely tailored to his/her site needs.
X
X    For the extremely paranoid, Tripwire includes the MD2, MD4, and
XSHA signature algorithms, as well as the 16 and 32-bit CRC algorithms
Xin its arsenal.  Be forewarned, however, that MD2 is an order of
Xmagnitude slower than even Snefru, and probably guarantees no greater
Xintegrity checking.  We include all these routines, however, so you
Xcan pick what you feel to be most appropriate for your site.
X
X    You may wish to add other routines as checksum/signature
Xgenerators.  For instance, if you have a fast DES implementation
X(including chip-based generation), you might wish to encrypt the file
Xusing CBC mode and some fixed key, saving the final 128 bits of output
Xas the signature.  The configuration file routines have several
Xsignature flags that are currently bound to a null function, so there
Xis room for this expansion if you wish.
X
X    Clearly, with seven different signature algorithms at your
Xdisposal, Tripwire offers considerable flexibility in ensuring
Xdata security.  Tripwire makes maintaining a trivial CRC
Xdatabase equally easy to administer and check as a full (but
Xperhaps less practical) seven-signature database.
X
X    The following section describes each of the seven signature
Xalgorithms.
X
X6.0.  Signature routines
X========================
X
X    Tripwire ships with seven signature routines.  This section
Xbriefly describes each signature routine.  This is by no means an
Xauthoratative list, but it does attempt to give some background
Xon each of the signature routines provided:
X
X    MD5, Snefru, MD4, MD2, and SHA are all examples of
Xmessage-digest algorithms (also known as one-way hash functions,
Xfingerprinting routines, or manipulation detection codes).  They
Xemploy cryptographic techniques to ensure that any small change
Xin the input stream results in immediate and widely diverging
Xoutput.  This way, even a small change in the input results in
Xlarge change in the output.  Therefore, any unauthorized,
Xmalicious, or accidental change will be evident.  Furthermore,
Xbecause these algorithms use a 128-bit or larger signature, using
Xa brute-force attack to introduce a deliberate change in the file
Xwhile trying to keep the same signature becomes a computationally
Xinfeasible task.
X
X    The CRC algorithms, on the other hand, use simple polynomial
Xdivision to generate the checksums.  While this technique is very
Xfast, the mathematics of this technique is well-understood.
XAdditionally, since the signature space is so small (usually 16
Xor 32 bits), a brute-force search for a CRC collision is well
Xwithin the capabilities of most workstations.  There are
Xcurrently several programs in the public domain that can, for any
Xgiven input file, provide a different output file with the same
XCRC signature in 30 seconds or less.
X
X    All observed timing measures provided for the signature
Xroutines were performed on a Sequent Symmetry with ten 16 Mhz
X80386 processors.  The numbers provided are simply an informal
Xgauge of throughput, rather than any authoratative metric.
X
X6.1.  MD5
X=========
X
X    MD5 is the RSA Data Security Inc. Message-Digest Algorithm, a
Xproposed data authentication standard.  The Internet Draft
Xsubmission can be found as Internet Working Draft RFC 1321,
Xavailable via anonymous FTP from NIC.DDN.MIL or from RSA.COM as
X~/pub/md5.doc.
X
X    MD5 attempts to address potential security risks found in the
Xspeedier, but less secure MD4, also by RSA Data Security Inc.
XMD5 was designed as a more conservative algorithm that backs
X"away from the edge" in terms of risks from successful
Xcryptanalytic attack.
X
X    MD5 generates a 128-bit signature, and uses four rounds to
Xensure pseudo-random output.  Observed throughput is about 70
XKbytes/second.
X
X    Currently, MD5 is considered by many to be the
Xstate-of-the-art signature algorithm.
X
X6.2.  Snefru
X============
X
X    Snefru, the Xerox Secure Hash Function, was developed by
XRalph Merkle at Xerox PARC.  As an incentive to find a Snefru
Xcrack, there is a $1000 cash prize promised to anyone who can
Xfind two sets of input that map to the same signature.
X
X    This reward has remained unclaimed since April 1990, when the
X2-pass version of Snefru was broken by Eli Biham, a Ph.D. student
Xof Adi Shamir.  Currently, Ralph Merkle recommends using only the
X4-pass version of Snefru, if not the 8-pass version.  The Snefru
XREADME states, "Further study of the security of Snefru is
Xrequired before production use is advisable."
X
X    As shipped with Tripwire, Snefru is configured to run in
X4-passes.  Version 2.5 is the latest version available, and is
Xthe version included with Tripwire.
X
X    Snefru is slower than MD5, but is recommended as a backup for
XMD5 as a primary signature.  As configured, Snefru runs at about
X31 Kbytes/second.
X
X    Snefru can be obtained via anonymous FTP from arisia.xerox.com 
Xin directory /pub/hash.
X
X6.3.  CRC-32
X============
X
X    Cyclic Redundancy Checks have been the long been the de facto
Xerror detection algorithm standard.  These algorithms are fast,
Xrobust, and provides reliable detection of errors associated with
Xdata transmission.  It has been shown that CRC-32 has a minimum
Xdistance of 5 for block lengths of less than 4K.  However, this
Xdecreases as the size of the blocks increases.
X
X    Therefore, using CRC-32 on long files is certainly a
Xmisapplication of this signature algorithm.  However, CRC-32 is
Xprovided as a fast and speedy alternative to the slower
Xmessage-digest algorithms.
X
X    The version of CRC-32 included with Tripwire was written by 
XGary S. Brown.
X
X    This CRC-32 implementation runs at about 111 Kbytes/second.
X
X6.4.  CRC-16
X============
X
X    CRC-16 is the predecessor to CRC-32, using only 16 bits to
Xstore to the remainder of the data and the generator polynomial.
XCRC-16 is typically at the link level, usually done in hardware
Xto detect transmission errors.
X
X    This CRC-16 implementation runs at abut 131 Kbytes/second.
X
X
X6.5.  MD4
X=========
X
X    MD4, the RSA Data Security Inc. Message-Digest Algorithm, is
Xthe predecessor to MD5 described above.  It was also sumbitted as
Xa standard data authentication algorithm, and is described in the
XInternet Working Draft 1320.
X
X    The MD4 algorithm was designed to exploit 32-bit RISC
Xarchitectures to maximize throughput.  On a Sun SparcStation,
Xthroughput rates of over 1.4 Mbytes/second are achieved.
X
X    MD4 can be obtained via anonymous FTP from RSA.COM in ~/pub.
X
X    On a Sequent, MD4 throughput is about 332 Kbytes/second.
X
X
X6.6.  MD2
X==========
X
X    The RSA Data Security, Inc. MD2 Message-Digest Algorithm was
Xcreated as part of the Privacy Enhanced Mail package -- a package
Xdesigned to authenticate and increase the security of electronic
Xmail.  Like the other algorithms by RSA Data Security, Inc
Xpresented here, MD2 generates a 128-bit signature.
X
X    The MD2 algorithm is quite slow.  On a 16 Mhz 80386, expect
Xonly 3 Kbytes/second.  It is not clear that using this slower
Xalgorithm instead of MD5 brings any comparative advantage.
X
X    The license for MD2 specifically states its use is exclusive
Xto the Privancy Enhanced Mail package.  Provisions have been made
Xwith RSA Data Security, Inc. for its inclusion and use in
XTripwire in its present form.  Note that MD2 is not in the
Xpublic-domain.
X
X
X6.7.  SHA/SHS
X=============
X
X    SHS is the proposed NIST Digital Signature Standard, called the
XSecure Hash Standard.  As the standard has not officially been
Xadopted, SHS is properly referred to as SHA.  
X
X    SHA is about one-half as fast as MD5.  However, and if SHS is
Xofficially adopted as a standard, expect many optimized and
Xarchitecture-dependent implementations that will close this
Xspeed difference.
X
X   It has been noted that SHS appears to be largely based on MD4 with
Xseveral key enhancements, not all implemented in MD5.
X
X
X6.8.  (null)
X============
X
X    Well, sig_null_get() is not really a signature algorithm.
XInstead, it is a place holder for unused slots in the signature
Xarray.  It will always return a single character, ``0''.
X
X
X7.0.  Feedback and bug-reports
X==============================
X
X    Please send any bug-reports, questions, feedback, or any comments
Xto (tripwire-request@cs.purdue.edu).  One or both Genes will try to
Xanswer questions as expeditiously as possible.
X
X
X8.0.  User contributions
X========================
X
X    The ./contrib directory contains several programs contributed
Xby users during the beta-test period.  Each program is accompanied 
Xby a README file written by the program author.
X
X    Both Genes are willing to serve as clearinghouses for utilities
Xthat augment the Tripwire package.  If you have something that you
Xwould like included in the Tripwire package, please contact either
XGene Kim or Gene Spafford at the email addresses listed in the
Xprevious section.
X
X
X9.0  Acknowledgements
X=====================
X
X    Dan Farmer of Sun Microsystems, Inc. for providing answers to
Xquestions of taste, and providing some impetus to finish this
Xproject during the summer of 1992.  (Dan.Farmer@Sun.COM).
X
X    Shabbir Safdar for actually running early versions of
XTripwire that popped up on an hourly basis.  We also thank him
Xfor trying this on a few of the more exotic architectures around
XPurdue.  (shabby@mentor.cc.purdue.edu)
X
X    Steve Weeber of Lawrence Livermore National Laboratory for
Xinsight into what sort of tools the Dept. of Energy has developed
Xfor in-house use, and comparisons of their functionality with
XTripwire.  (weeber@llnl.gov).
X
X    Ralph Merkle of Xerox PARC for information on the Snefru
Xone-way hash function.  (merkle@parc.xerox.com).
X
X    One of the directory printing routine in utils.c comes from
Xthe COPS package.  It was from crc_check.c by Jon Zeeff
X(zeeff@b-tech.ann-arbor.mi.us).
X
X    Eugene Zaustinsky for helping GeneK finally get all the
Xsignature routines right.  It took three iterations and two
Xpatches, but things are finally kosher.  This provided
Xmotivation for a more rigorous signature test suite, beyond just
Xchecking the signatures against the distribution build.
X
X    Sam Gassel, Edward DeHart, Drew Gonczi, Rik Farrow, Jim Napier,
XDrew Jolliffe, John Rouillard, Alain Brossard, Eric Bergren, Patrick
XSullivan, Nora Hermida, Juergen Schmidt, Debbie Pomerance, Michael
XHines, Tim Ramsey, Georges Tomazi, Mitchell Marks, Philip Cox, Kevin
XDupre', Chris Kern, and Eugene Zaustinsky helped in getting the
XTripwire v1.1 release in shape for our December 1993 release.
X
X    The 125 helpful beta testers that stuck with us during the
Xsix-week testing period.  They put up with bugs, ever-changing
Xinterfaces and database file formats, and in one case, a flurry
Xof conflicting patches in a thirty-minute period while GeneK and
XSpaf took turns saying, "Uh, oh."
X
X    We appreciate the heroic effort of the Tripwire beta testers who
Xsuggested functional additions to Tripwire, found and hunted down
Xbugs, and refined Tripwire beyond the authors' expectations.  Special
Xthanks go to:
X
X    Walker Aumann, Lance R. Bailey, Michael Barnett, David Barr,
X    Greg Black, Adrian P. van Bloois, J. Dean Brock, Kurt
X    Cockrum, John Cristy, Jim Duncan, David S. Goldberg,
X    Johannes Gronvall, Tom Gutnick, Michaela Harlander, Andreas
X    Haug, Bill Henderson, Jim Hendrick, Norman Hill, Paul Joslin,
X    Poul-Henning Kamp, Leslie Kordas, Simon Leinen, Philip Yzarn
X    de Louraille, Stephen Mahler, Fletcher Mattox, Ken McDonell,
X    Wes Morgan, Phil Moyer, Dan O'Neill, Joe Polcari, Phillip
X    Porch, Brad Powell, W. Purvis, Daniel Ray, Dean Rich, Bill
X    Romine, John P. Rouillard, Rich Salz, Christopher Samuel,
X    Pete Shipley., David W. Smith, Harlan Stenn, Margarita
X    Suarez, John G. Sutton, Tim Tessin, John Wagner, David
X    Wiseman, Irving Wolfe, Stephen M. Youndt
X
X    Extra kudos go to Ken McDonnell and Rich Salz for "raising
Xthe bar" of code quality through their wonderfully meticulous and
Xinsightful code-reviews during the beta-test period.
X
X    E. Clinton Arbaugh provided extremely helpful advice and bug
Xreports for the third patch release.  He contributed greatly towards
Xrefinement in v1.0.4.
X
X    GeneK and Spaf want to apologize in advance to anyone who sent us
Xpatches, comments or configuration info and whose name doesn't appear
X(but should).  Please write to us and so we can correct the situation!
X
X
X
XGene & Gene 
XKim  & Spafford
X
XNovember 2, 1992
X(gkim@cs.purdue.edu)
X(spaf@cs.purdue.edu)
X
XLast updated 
XDecember 15, 1993
X
X
END_OF_FILE
if test 33651 -ne `wc -c <'tripwire-1.1/README'`; then
    echo shar: \"'tripwire-1.1/README'\" unpacked with wrong size!
fi
# end of 'tripwire-1.1/README'
fi
if test -f 'tripwire-1.1/contrib/README.CheckConfig' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tripwire-1.1/contrib/README.CheckConfig'\"
else
echo shar: Extracting \"'tripwire-1.1/contrib/README.CheckConfig'\" \(1216 characters\)
sed "s/^X//" >'tripwire-1.1/contrib/README.CheckConfig' <<'END_OF_FILE'
XCheckConfig
X
XArguably THE most important step in using tripwire on your system is the
Xcreation of a config file for the host.  The config file for you machine must
Xreflect vendor as well as local file structure conventions.
X
XFor example on suns, /var and /usr are functionally equivelent, except with
Xtripwire which cares that one is a symlink to the other.  Some vendors (NeXT)
Xput network tools such as nslookup in /usr/etc while other vendors (HP) put
Xthem in /usr/bin
X
XOn some installations, the convention is to fill /usr/local with new code, on
Xsome locations /usr/local is full of symlinks which point to new code, some
Xlocations might decide to put new code in /Local.
X
XSince the config file MUST match the flavour of your system, CheckConfig was
Xcreated to parse the tripwire.config file and report anomilies.
X
Xusage::  CheckConfig [-v] file
X
XIn non-verbose mode, CheckConfig reports merely on the existance of symbolic
Xlinks in the file.  This warns you that a symlink instead of a directory
Xhierarchy or file is being monitored by tripwire.
X
XIn verbose mode, CheckConfig also shouts about non-existant files and lists
Xall other entries as either directories or files.
X
XLance Bailey <lrb@ctrg.rri.uwo.ca>
X
END_OF_FILE
if test 1216 -ne `wc -c <'tripwire-1.1/contrib/README.CheckConfig'`; then
    echo shar: \"'tripwire-1.1/contrib/README.CheckConfig'\" unpacked with wrong size!
fi
# end of 'tripwire-1.1/contrib/README.CheckConfig'
fi
if test -f 'tripwire-1.1/include/patchlevel.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tripwire-1.1/include/patchlevel.h'\"
else
echo shar: Extracting \"'tripwire-1.1/include/patchlevel.h'\" \(84 characters\)
sed "s/^X//" >'tripwire-1.1/include/patchlevel.h' <<'END_OF_FILE'
X/* $Id: patchlevel.h,v 1.9 1993/12/13 04:03:17 genek Exp $ */
X
X#define	PATCHLEVEL	0
END_OF_FILE
if test 84 -ne `wc -c <'tripwire-1.1/include/patchlevel.h'`; then
    echo shar: \"'tripwire-1.1/include/patchlevel.h'\" unpacked with wrong size!
fi
# end of 'tripwire-1.1/include/patchlevel.h'
fi
echo shar: End of archive 5 \(of 25\).
cp /dev/null ark5isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 25 archives.
    echo "Now read tripwire-1.1/README.kits"
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
