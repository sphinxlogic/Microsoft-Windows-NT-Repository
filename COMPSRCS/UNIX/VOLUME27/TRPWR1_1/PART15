Newsgroups: comp.sources.unix
From: spaf@cs.purdue.edu (Gene Spafford)
Subject: v27i161: tripwire-1.1 - security integrity monitor, V1.1, Part15/26
References: <1.756157401.21864@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: spaf@cs.purdue.edu (Gene Spafford)
Posting-Number: Volume 27, Issue 161
Archive-Name: tripwire-1.1/part15

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 15 (of 25)."
# Contents:  tripwire-1.1 tripwire-1.1/man tripwire-1.1/sigs
#   tripwire-1.1/sigs/crc32 tripwire-1.1/sigs/md5
#   tripwire-1.1/sigs/md5/md5.doc tripwire-1.1/man/tripwire.8
#   tripwire-1.1/sigs/md5/README.md5 tripwire-1.1/sigs/crc32/Makefile
# Wrapped by spaf@uther.cs.purdue.edu on Thu Dec 16 11:42:45 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test ! -d 'tripwire-1.1' ; then
    echo shar: Creating directory \"'tripwire-1.1'\"
    mkdir 'tripwire-1.1'
fi
if test ! -d 'tripwire-1.1/man' ; then
    echo shar: Creating directory \"'tripwire-1.1/man'\"
    mkdir 'tripwire-1.1/man'
fi
if test ! -d 'tripwire-1.1/sigs' ; then
    echo shar: Creating directory \"'tripwire-1.1/sigs'\"
    mkdir 'tripwire-1.1/sigs'
fi
if test ! -d 'tripwire-1.1/sigs/crc32' ; then
    echo shar: Creating directory \"'tripwire-1.1/sigs/crc32'\"
    mkdir 'tripwire-1.1/sigs/crc32'
fi
if test ! -d 'tripwire-1.1/sigs/md5' ; then
    echo shar: Creating directory \"'tripwire-1.1/sigs/md5'\"
    mkdir 'tripwire-1.1/sigs/md5'
fi
if test -f 'tripwire-1.1/sigs/md5/md5.doc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tripwire-1.1/sigs/md5/md5.doc'\"
else
echo shar: Extracting \"'tripwire-1.1/sigs/md5/md5.doc'\" \(19119 characters\)
sed "s/^X//" >'tripwire-1.1/sigs/md5/md5.doc' <<'END_OF_FILE'
X## $Id: md5.doc,v 1.3 1993/08/19 05:28:05 genek Exp $
X
X
X
XNetwork Working Group                                          R. Rivest
XINTERNET-DRAFT                       MIT Laboratory for Computer Science
X                                                                S. Dusse
X                                                 RSA Data Security, Inc.
X                                                            10 July 1991
X
X
X                    The MD5 Message-Digest Algorithm
X
X
XSTATUS OF THIS MEMO
X
X   This draft document will be submitted to the RFC editor as a protocol
X   specification. Comments should be sent to <pem-dev@tis.com> or to the
X   authors. Distribution of this memo is unlimited.
X
X
XACKNOWLEDGEMENT
X
X   We would like to thank Don Coppersmith, Burt Kaliski, Ralph Merkle,
X   David Chaum, and Noam Nisan for numerous helpful comments and
X   suggestions.
X
X
XTable of Contents
X
X   1. Executive Summary                                                1
X   2. Terminology and Notation                                         2
X   3. MD5 Algorithm Description                                        3
X   4. Summary                                                          7
X   5. Summary of Differences Between MD4 and MD5                       7
X   6. Security Considerations                                          7
X   References                                                          8
X   Authors' Addresses                                                  8
X   APPENDIX - Reference Implementation                                 9
X
X
X
X1. Executive Summary
X
X   This document describes the MD5 message-digest algorithm. The
X   algorithm takes as input an input message of arbitrary length and
X   produces as output a 128-bit "fingerprint" or "message digest" of the
X   input. It is conjectured that it is computationally infeasible to
X   produce two messages having the same message digest, or to produce
X   any message having a given prespecified target message digest. The
X   MD5 algorithm is intended for digital signature applications, where a
X   large file must be "compressed" in a secure manner before being
X   encrypted with a private (secret) key under a public-key cryptosystem
X   such as RSA.
X
X
X
X
XRivest and Dusse                                                [Page 1]
XINTERNET-DRAFT      The MD5 Message-Digest Algorithm        10 July 1991
X
X
X   The MD5 algorithm is designed to be quite fast on 32-bit machines. In
X   addition, the MD5 algorithm does not require any large substitution
X   tables; the algorithm can be coded quite compactly.
X
X   The MD5 algorithm is an extension of the MD4 message digest algorithm
X   [1,2]. MD5 is slightly slower than MD4, but is more "conservative" in
X   design. MD5 was designed because it was felt that MD4 was perhaps
X   being adopted for use more quickly than justified by the existing
X   critical review; because MD4 was designed to be exceptionally fast,
X   it is "at the edge" in terms of risking successful cryptanalytic
X   attack. MD5 backs off a bit, giving up a little in speed for a much
X   greater likelihood of ultimate security. It incorporates some
X   suggestions made by various reviewers, and contains additional
X   optimizations.
X
X   The MD5 algorithm is being placed in the public domain for review and
X   possible adoption as a standard.
X
X   A version of this document including the C source code in the
X   appendix is available by FTP from RSA.COM in the file "pub/md5.doc".
X
X   This document may be referred to, unofficially, as Internet draft
X   [MD5-A].
X
X   For OSI-based applications, MD5's object identifier is
X
X   md5 OBJECT IDENTIFIER ::=
X     {iso(1) member-body(2) US(840) rsadsi(113549) digestAlgorithm(2) 5}
X
X   In the X.509 type AlgorithmIdentifier [3], the parameters for MD5
X   should have type NULL.
X
X
X2. Terminology and Notation
X
X   In this document a "word" is a 32-bit quantity and a "byte" is an
X   eight-bit quantity. A sequence of bits can be interpreted in a
X   natural manner as a sequence of bytes, where each consecutive group
X   of eight bits is interpreted as a byte with the high-order (most
X   significant) bit of each byte listed first. Similarly, a sequence of
X   bytes can be interpreted as a sequence of 32-bit words, where each
X   consecutive group of four bytes is interpreted as a word with the
X   low-order (least significant) byte given first.
X
X   Let x_i denote "x sub i". If the subscript is an expression, we
X   surround it in braces, as in x_{i+1}. Similarly, we use ^ for
X   superscripts (exponentiation), so that x^i denotes x to the i-th
X   power.
X
X   Let the symbol "+" denote addition of words (i.e., modulo-2^32
X   addition). Let X <<< s denote the 32-bit value obtained by circularly
X   shifting (rotating) X left by s bit positions. Let not(X) denote the
X
X
XRivest and Dusse                                                [Page 2]
XINTERNET-DRAFT      The MD5 Message-Digest Algorithm        10 July 1991
X
X
X   bit-wise complement of X, and let X v Y denote the bit-wise OR of X
X   and Y. Let X xor Y denote the bit-wise XOR of X and Y, and let XY
X   denote the bit-wise AND of X and Y.
X
X
X3. MD5 Algorithm Description
X
X   We begin by supposing that we have a b-bit message as input, and that
X   we wish to find its message digest. Here b is an arbitrary
X   nonnegative integer; b may be zero, it need not be a multiple of
X   eight, and it may be arbitrarily large. We imagine the bits of the
X   message written down as follows:
X
X                            m_0 m_1 ... m_{b-1}
X
X   The following five steps are performed to compute the message digest
X   of the message.
X
X
X3.1 Step 1. Append Padding Bits
X
X   The message is "padded" (extended) so that its length (in bits) is
X   congruent to 448, modulo 512. That is, the message is extended so
X   that it is just 64 bits shy of being a multiple of 512 bits long.
X   Padding is always performed, even if the length of the message is
X   already congruent to 448, modulo 512 (in which case 512 bits of
X   padding are added).
X
X   Padding is performed as follows: a single "1" bit is appended to the
X   message, and then enough zero bits are appended so that the length in
X   bits of the padded message becomes congruent to 448, modulo 512.
X
X
X3.2 Step 2. Append Length
X
X   A 64-bit representation of b (the length of the message before the
X   padding bits were added) is appended to the result of the previous
X   step. In the unlikely event that b is greater than 2^64, then only
X   the low-order 64 bits of b are used. (These bits are appended as two
X   32-bit words and appended low-order word first in accordance with the
X   previous conventions.)
X
X   At this point the resulting message (after padding with bits and with
X   b) has a length that is an exact multiple of 512 bits. Equivalently,
X   this message has a length that is an exact multiple of 16 (32-bit)
X   words. Let M[0 ... N-1] denote the words of the resulting message,
X   where N is a multiple of 16.
X
X
X
X
X
X
X
XRivest and Dusse                                                [Page 3]
XINTERNET-DRAFT      The MD5 Message-Digest Algorithm        10 July 1991
X
X
X3.3 Step 3. Initialize MD Buffer
X
X   A four-word buffer (A,B,C,D) is used to compute the message digest.
X   Here each of A, B, C, D is a 32-bit register. These registers are
X   initialized to the following values in hexadecimal, low-order bytes
X   first):
X
X                            word A: 01 23 45 67
X                            word B: 89 ab cd ef
X                            word C: fe dc ba 98
X                            word D: 76 54 32 10
X
X
X3.4 Step 4. Process Message in 16-Word Blocks
X
X   We first define four auxiliary functions that each take as input
X   three 32-bit words and produce as output one 32-bit word.
X
X                         F(X,Y,Z) = XY v not(X) Z
X                         G(X,Y,Z) = XZ v Y not(Z)
X                         H(X,Y,Z) = X xor Y xor Z
X                       I(X,Y,Z) = Y xor (X v not(Z))
X
X   In each bit position F acts as a conditional: if X then Y else Z.
X   (The function F could have been defined using + instead of v since XY
X   and not(X)Z will never have 1's in the same bit position.) It is
X   interesting to note that if the bits of X, Y, and Z are independent
X   and unbiased, the each bit of F(X,Y,Z) will be independent and
X   unbiased.
X
X   The functions G, H, and I are similar to the function F, in that they
X   act in "bitwise parallel" to produce their output from the bits of X,
X   Y, and Z, in such a manner that if the corresponding bits of X, Y,
X   and Z are independent and unbiased, then each bit of G(X,Y,Z),
X   H(X,Y,Z), and I(X,Y,Z) will be independent and unbiased. Note that
X   the function H is the bit-wise "xor" or "parity" function of its
X   inputs.
X
X   Do the following:
X
X   /* Process each 16-word block. */
X   For i = 0 to N/16-1 do
X
X       /* Copy block i into X. */
X       For j = 0 to 15 do
X           Set X[j] to M[i*16+j].
X       end /* of loop on j */
X
X       /* Save A as AA, B as BB, C as CC, and D as DD. */
X       AA = A
X       BB = B
X       CC = C
X
X
XRivest and Dusse                                                [Page 4]
XINTERNET-DRAFT      The MD5 Message-Digest Algorithm        10 July 1991
X
X
X       DD = D
X
X       /* Round 1. */
X       /* Let FF(a,b,c,d,X[k],s,t) denote the operation
X           a = b + ((a + F(b,c,d) + X[k] + t) <<< s). */
X       /* Here the additive constants t are chosen as follows:
X          In step i, the additive constant is the integer part of
X          4294967296 times abs(sin(i)), where i is in radians. */
X       /* Let S11 = 7, S12 = 12, S13 = 17, and S14 = 22. */
X       /* Do the following 16 operations. */
X       FF (a, b, c, d, X[ 0], S11, 3614090360); /* Step 1 */
X       FF (d, a, b, c, X[ 1], S12, 3905402710); /* 2 */
X       FF (c, d, a, b, X[ 2], S13,  606105819); /* 3 */
X       FF (b, c, d, a, X[ 3], S14, 3250441966); /* 4 */
X       FF (a, b, c, d, X[ 4], S11, 4118548399); /* 5 */
X       FF (d, a, b, c, X[ 5], S12, 1200080426); /* 6 */
X       FF (c, d, a, b, X[ 6], S13, 2821735955); /* 7 */
X       FF (b, c, d, a, X[ 7], S14, 4249261313); /* 8 */
X       FF (a, b, c, d, X[ 8], S11, 1770035416); /* 9 */
X       FF (d, a, b, c, X[ 9], S12, 2336552879); /* 10 */
X       FF (c, d, a, b, X[10], S13, 4294925233); /* 11 */
X       FF (b, c, d, a, X[11], S14, 2304563134); /* 12 */
X       FF (a, b, c, d, X[12], S11, 1804603682); /* 13 */
X       FF (d, a, b, c, X[13], S12, 4254626195); /* 14 */
X       FF (c, d, a, b, X[14], S13, 2792965006); /* 15 */
X       FF (b, c, d, a, X[15], S14, 1236535329); /* 16 */
X
X       /* Round 2. */
X       /* Let GG(a,b,c,d,X[k],s,t) denote the operation
X           a = b + ((a + G(b,c,d) + X[k] + t) <<< s). */
X       /* Let S21 = 5, S22 = 9, S23 = 14, and S24 = 20. */
X
X       /* Do the following 16 operations. */
X       GG (a, b, c, d, X[ 1], S21, 4129170786); /* 17 */
X       GG (d, a, b, c, X[ 6], S22, 3225465664); /* 18 */
X       GG (c, d, a, b, X[11], S23,  643717713); /* 19 */
X       GG (b, c, d, a, X[ 0], S24, 3921069994); /* 20 */
X       GG (a, b, c, d, X[ 5], S21, 3593408605); /* 21 */
X       GG (d, a, b, c, X[10], S22,   38016083); /* 22 */
X       GG (c, d, a, b, X[15], S23, 3634488961); /* 23 */
X       GG (b, c, d, a, X[ 4], S24, 3889429448); /* 24 */
X       GG (a, b, c, d, X[ 9], S21,  568446438); /* 25 */
X       GG (d, a, b, c, X[14], S22, 3275163606); /* 26 */
X       GG (c, d, a, b, X[ 3], S23, 4107603335); /* 27 */
X       GG (b, c, d, a, X[ 8], S24, 1163531501); /* 28 */
X       GG (a, b, c, d, X[13], S21, 2850285829); /* 29 */
X       GG (d, a, b, c, X[ 2], S22, 4243563512); /* 30 */
X       GG (c, d, a, b, X[ 7], S23, 1735328473); /* 31 */
X       GG (b, c, d, a, X[12], S24, 2368359562); /* 32 */
X
X       /* Round 3. */
X       /* Let HH(a,b,c,d,X[k],s,t) denote the operation
X
X
XRivest and Dusse                                                [Page 5]
XINTERNET-DRAFT      The MD5 Message-Digest Algorithm        10 July 1991
X
X
X           a = b + ((a + H(b,c,d) + X[k] + t) <<< s). */
X       /* Let S31 = 4, S32 = 11, S33 = 16, and S34 = 23. */
X
X       /* Do the following 16 operations. */
X       HH (a, b, c, d, X[ 5], S31, 4294588738); /* 33 */
X       HH (d, a, b, c, X[ 8], S32, 2272392833); /* 34 */
X       HH (c, d, a, b, X[11], S33, 1839030562); /* 35 */
X       HH (b, c, d, a, X[14], S34, 4259657740); /* 36 */
X       HH (a, b, c, d, X[ 1], S31, 2763975236); /* 37 */
X       HH (d, a, b, c, X[ 4], S32, 1272893353); /* 38 */
X       HH (c, d, a, b, X[ 7], S33, 4139469664); /* 39 */
X       HH (b, c, d, a, X[10], S34, 3200236656); /* 40 */
X       HH (a, b, c, d, X[13], S31,  681279174); /* 41 */
X       HH (d, a, b, c, X[ 0], S32, 3936430074); /* 42 */
X       HH (c, d, a, b, X[ 3], S33, 3572445317); /* 43 */
X       HH (b, c, d, a, X[ 6], S34,   76029189); /* 44 */
X       HH (a, b, c, d, X[ 9], S31, 3654602809); /* 45 */
X       HH (d, a, b, c, X[12], S32, 3873151461); /* 46 */
X       HH (c, d, a, b, X[15], S33,  530742520); /* 47 */
X       HH (b, c, d, a, X[ 2], S34, 3299628645); /* 48 */
X
X       /* Round 4. */
X       /* Let II(a,b,c,d,X[k],s,t) denote the operation
X           a = b + ((a + I(b,c,d) + X[k] + t) <<< s). */
X       /* Let S41 = 6, S42 = 10, S43 = 15, and S44 = 21. */
X
X       /* Do the following 16 operations. */
X       II (a, b, c, d, X[ 0], S41, 4096336452); /* 49 */
X       II (d, a, b, c, X[ 7], S42, 1126891415); /* 50 */
X       II (c, d, a, b, X[14], S43, 2878612391); /* 51 */
X       II (b, c, d, a, X[ 5], S44, 4237533241); /* 52 */
X       II (a, b, c, d, X[12], S41, 1700485571); /* 53 */
X       II (d, a, b, c, X[ 3], S42, 2399980690); /* 54 */
X       II (c, d, a, b, X[10], S43, 4293915773); /* 55 */
X       II (b, c, d, a, X[ 1], S44, 2240044497); /* 56 */
X       II (a, b, c, d, X[ 8], S41, 1873313359); /* 57 */
X       II (d, a, b, c, X[15], S42, 4264355552); /* 58 */
X       II (c, d, a, b, X[ 6], S43, 2734768916); /* 59 */
X       II (b, c, d, a, X[13], S44, 1309151649); /* 60 */
X       II (a, b, c, d, X[ 4], S41, 4149444226); /* 61 */
X       II (d, a, b, c, X[11], S42, 3174756917); /* 62 */
X       II (c, d, a, b, X[ 2], S43,  718787259); /* 63 */
X       II (b, c, d, a, X[ 9], S44, 3951481745); /* 64 */
X
X       /* Then perform the following additions. (That is, increment each
X          of the four registers by the value it had before this block
X          was started.) */
X       A = A + AA
X       B = B + BB
X       C = C + CC
X       D = D + DD
X
X
X
XRivest and Dusse                                                [Page 6]
XINTERNET-DRAFT      The MD5 Message-Digest Algorithm        10 July 1991
X
X
X
X   end /* of loop on i */
X
X
X3.5 Step 5. Output
X
X   The message digest produced as output is A, B, C, D. That is, we
X   begin with the low-order byte of A, and end with the high-order byte
X   of D.
X
X   This completes the description of MD5. A reference implementation in
X   C is given in the Appendix.
X
X
X4. Summary
X
X   The MD5 message-digest algorithm is simple to implement, and provides
X   a "fingerprint" or message digest of a message of arbitrary length.
X   It is conjectured that the difficulty of coming up with two messages
X   having the same message digest is on the order of 2^64 operations,
X   and that the difficulty of coming up with any message having a given
X   message digest is on the order of 2^128 operations. The MD5 algorithm
X   has been carefully scrutinized for weaknesses. It is, however, a
X   relatively new algorithm and further security analysis is of course
X   justified, as is the case with any new proposal of this sort.
X
X
X5. Summary of Differences Between MD4 and MD5
X
X   The following are the differences between MD4 and MD5:
X
X     --   A fourth round has been added.
X
X     --   Each step now has a unique additive constant.
X
X     --   The function g in round 2 was changed from (XY v XZ v YZ)
X          to (XZ v Y not(Z)) to make g less symmetric.
X
X     --   Each step now adds in the result of the previous step.
X          This promotes a faster "avalanche effect".
X
X     --   The order in which input words are accessed in rounds 2
X          and 3 is changed, to make these patterns less like each
X          other.
X
X     --   The shift amounts in each round have been approximately
X          optimized, to yield a faster "avalanche effect". The
X          shifts in different rounds are distinct.
X
X
X
X
X
X
XRivest and Dusse                                                [Page 7]
XINTERNET-DRAFT      The MD5 Message-Digest Algorithm        10 July 1991
X
X
X6. Security Considerations
X
X   The level of security discussed in this memo is considered to be
X   sufficient for implementing very high security hybrid digital-
X   signature schemes based on MD5 and a public-key cryptosystem.
X
X
XReferences
X
X     [1]  Rivest, R.L., The MD4 Message Digest Algorithm (RFC 1186),
X          October 1990.
X
X     [2]  Rivest, R.L., The MD4 message digest algorithm, presented at
X          CRYPTO '90 (Santa Barbara, CA, August 11-15, 1990).
X
X     [3]  CCITT, The Directory---Authentication Framework
X          (Recommendation X.509), 1988.
X
X
X
X
XAuthors' Addresses
X
X   Ronald L. Rivest
X   Massachusetts Institute of Technology
X   Laboratory for Computer Science
X   NE43-324
X   545 Technology Square
X   Cambridge, MA  02139-1986
X   Phone: (617) 253-5880
X   EMail: rivest@theory.lcs.mit.edu
X
X   Steve Dusse
X   RSA Data Security, Inc.
X   10 Twin Dolphin Drive
X   Redwood City, CA  94065
X   Phone: (415) 595-8782
X   EMail: dusse@rsa.com
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
XRivest and Dusse                                                [Page 8]
XINTERNET-DRAFT      The MD5 Message-Digest Algorithm        10 July 1991
X
X
X
XAPPENDIX - Reference Implementation
X
X   This appendix contains the following files:
X
X     md5.h -- header file for implementation of MD5
X
X     md5.c -- the source code for MD5 routines
X
X     md5driver.c -- sample test routines
X
X     session -- sample results of running md5driver
X
X   It is not difficult to improve this implementation on particular
X   platforms, an exercise left to the reader. Following are some
X   suggestions:
X
X     1.   Change MD5Update so that the context is not used at all
X          if it is empty (mdi == 0) and 64 or more bytes remain
X          (inLen >= 64). In other words, call Transform with inBuf
X          in this case. (This requires that byte ordering is
X          correct in inBuf.)
X
X     2.   Implement a procedure MD5UpdateLong modeled after
X          MD5Update where inBuf is UINT4 * instead of unsigned char
X          *. MD5UpdateLong would call Transform directly with 16-
X          word blocks from inBuf. Call this instead of MD5Update in
X          general. This works well if you have an I/O procedure
X          that can read long words from a file.
X
X     3.   On "little-endian" platforms where the lowest-address
X          byte in a long word is the least significant (and there
X          are no alignment restrictions), change MD5Update to call
X          Transform directly with 64-byte blocks from inBuf
X          (typecast to a UINT4 *).
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
XRivest and Dusse                                                [Page 9]
XINTERNET-DRAFT      The MD5 Message-Digest Algorithm        10 July 1991
X
X
END_OF_FILE
if test 19119 -ne `wc -c <'tripwire-1.1/sigs/md5/md5.doc'`; then
    echo shar: \"'tripwire-1.1/sigs/md5/md5.doc'\" unpacked with wrong size!
fi
# end of 'tripwire-1.1/sigs/md5/md5.doc'
fi
if test -f 'tripwire-1.1/man/tripwire.8' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tripwire-1.1/man/tripwire.8'\"
else
echo shar: Extracting \"'tripwire-1.1/man/tripwire.8'\" \(13045 characters\)
sed "s/^X//" >'tripwire-1.1/man/tripwire.8' <<'END_OF_FILE'
X.\" $Id: tripwire.8,v 1.12 1993/12/13 16:38:29 genek Exp $
X.\"
X.TH TRIPWIRE 8 "October 14, 1992"
X.SH NAME
Xtripwire \- a file integrity checker for UNIX systems
X.SH SYNOPSIS
X.B tripwire
X[ 
X.I options \fP...\fI
X] 
X.SH DESCRIPTION
X.LP
XTripwire is a file integrity checker \- a utility that compares a
Xdesignated set of files and directories against information stored in
Xa previously generated database.  Added or deleted files are flagged
Xand reported, as are any files that have changed from their previously
Xrecorded state in the database.  When run against system files on a
Xregular basis, any file changes would be spotted when Tripwire is next
Xrun, giving system administrators information to enact damage control
Xmeasures immediately.
X.LP
XUsing Tripwire, system administrators can conclude with an
Xextremely high degree of certainty that a given set of files
Xremain untouched from unauthorized modifications, provided the
Xprogram and database are appropriately protected (e.g., stored on
Xread-only media).  Note that reports of changed files indicate a 
Xchange from the time of the last Tripwire database installation or
Xupdate.  For best effect, the files being monitored should be
Xreinstalled from known good sources.  (See the Tripwire design
Xdocument for further details.)
X.LP
XTripwire uses message-digest algorithms (one-way hash functions)
Xto detect changes in a hard-to-spoof manner.  This should be able
Xto detect significant changes to critical files, including those
Xcaused by insertion of backdoors or viruses.  Tripwire also
Xmonitors changes to file permissions, modification times, and
Xother significant changes to inodes as selected by the system
Xadministrator on a per-file/directory basis.
X.LP
XTripwire runs in one of four modes: Database Generation,
XDatabase Update, Integrity Checking, or Interactive Update mode.  In
XDatabase Generation mode, Tripwire initializes the database based upon
Xthe entries enumerated in the \fItw.config\fP file.  Database
XUpdate mode provides incremental database update functionality on a
Xper-file/directory basis.  This obviates having to regenerate the entire
Xdatabase every time a file or set of files change.  The Integrity
XChecking mode generates a report of added, deleted, or changed files,
Xcomparing all the files described by the \fItw.config\fP file against
Xthe files residing on the filesystem.  Lastly, the Interactive Update mode
Xreports added, deleted, and changed files and prompts the user
Xwhether those database entries should be updated.
X.LP
XThe Interactive Update mode provides a simple and thorough method for
Xsystem administrators to keep Tripwire databases ``in sync'' with 
Xfilesystems that change.
X.SH OPTIONS
X.LP
XWhen run without any arguments, \fItripwire\fP runs in Integrity
XChecking mode.
X.TP 20
X.B \-initialize
XDatabase Generation mode.  Creates the database which is used for
Xall subsequent Integrity Checking runs.
X.TP
X.B -update pathname/entry ...
XDatabase Update mode.  This mode updates the specified \fIpathname\fP or
X\fIentry\fP in the database.  If the argument provided is a file, only
Xthat file is updated.  If the argument is a directory, that directory
Xand all of its children are updated.  If the argument is an \fPentry\fP
Xin the \fItw.config\fP file, the entire entry in the database is
Xupdated.
X.TP
X.B \-interactive
XInteractive Integrity Checking.  Tripwire first reports all added,
Xdeleted, and changed files, then prompting the user whether the entry
Xshould be updated in the database.
X.sp 0
XNote that Tripwire opens up /dev/tty instead of using \fIstdin\fP.
XThis prevents automating interactive updates, reducing the chance of
Xsystem administrators inadvertently updating entries.  Updating the
Xdatabase should always be done with care and deliberation.
X.TP
X.B \-loosedir
XLoosens checking rules for directories in Integrity Checking modes so
Xchanges in size, nlink, modification and creation times no longer are
Xreported.  This significantly quiets Tripwire reports.  Using this
Xoption is recommended.
X.TP
X.B \-d dbasefile
XReads the database information from the specified file
X\fIdbasefile\fP.  \fIstdin\fP can specified by ``-d -''.
X.TP
X.B \-c configfile
XRead the configuration information from the specified file
X\fIconfigfile\fP.  \fIstdin\fP can specified by ``-c -''.
X.TP
X.B \-cfd openfd
XRead the configuration information from the open file descriptor
X\fIopenfd\fP.  This option allows programs outside of Tripwire to
Xsupply services such as networking, compression, and encryption.
X.TP
X.B \-dfd openfd
XRead the database file from the open file descriptor
X\fIopenfd\fP.  This option allows programs outside of Tripwire to
Xsupply services such as networking, compression, and encryption.
X.TP
X.B \-D\fIvar\fP=\fIvalue\fP
XDefines the \fItw.config\fP variable \fIvar\fP to \fIvalue\fP.  (As if
X\fI@@define\fP were used.)
X.TP
X.B \-U\fIvar\fP
XUndefine the \fItw.config\fP variable \fIvar\fP.  (As if \fI@@undef\fP
Xwere used.)
X.TP
X.B \-i [#|all]
XIgnore the specified signature, and skip it when comparing against
Xdatabase entries.  If \fIall\fP is specified, no signatures are
Xcollected or compared.
X.TP
X.B \-E
XPrints out preprocessed \fItw.config\fP file to \fIstdout\fP.
X.TP
X.B \-preprocess
XSame as -E option.
X.TP
X.B \-q
XQuiet mode.  In this mode, Tripwire prints only one line reports for
Xeach added, changed, or deleted file.  Phase 5 is skipped, which prints
Xall the pairs of expected and observed file attribute values.
X.TP
X.B \-v
XVerbose mode.  Prints out filenames as they are being scanned during
Xsignature computation.
X.TP
X.B \-help
XPrint out inode interpretation message (for parsing messages when
Xfiles have changed).
X.TP
X.B \-version
XPrints out version information.
X.SH DATABASE GENERATION MODE
X.LP
XIn Database Generation mode, \fItripwire\fP creates the
Xdatabase file based upon the entries in \fItw.config\fP.  The
Xname of this database file is defined at compile-time in
X\fIconfig.h\fP \- it defaults to \fItw.db_[hostname]\fP.  The
Xgenerated database is placed in the \fB./databases\fP directory, and
Xmust be moved to the target directory manually.
X.LP
XNote that you must manually move this file to your database
Xdirectory.  This is because the default database directory should
Xbe a read-only file system.  
X.SH DATABASE UPDATE MODE
X.LP
XIn Database Update mode, \fItripwire\fP updates the specified files,
Xdirectories, or entries in the database.  The old database is saved in
Xthe \fB./databases\fP directory with the \fI.old\fP suffix.  The new,
Xupdated database is also written to the \fB./databases\fP directory.
XAs in the Database Generation mode, the new database must be manually
Xmoved to the Tripwire database directory.
X.LP
X\fItripwire\fP in Database Update mode requires at least one argument,
Xwhich is used as an \fIentry\fP.  The \fIentry\fP argument specifies
Xwhich file or directory is to be updated, and is interpreted similar
Xto \fItw.config\fP entries.  If the argument is a filename, only that
Xfile is updated in the database.  Similarly, if the argument is a
Xdirectory name, the directory and its children are updated.  If the
Xargument is also an entry in the \fItw.config\fP file, the entire
Xentry is updated.
X.LP
XDatabase updates yield a new database file with added, deleted, or
Xchanged entries.  This functionality is provided to allow Tripwire
Xdatabases to be updated in a controlled manner to reflect filesystem
Xchanges, obviating the need to regenerate the entire database again.
X.SH INTEGRITY CHECKING MODE
X.LP
XIn Integrity Checking mode, \fItripwire\fP reads in the
X\fItw.config\fP file, and rebuilds a new database to reflect the
Xcurrent files.  Tripwire then compares the new database with the
Xexisting Tripwire database stored on the filesystem, reporting added
Xor deleted files, as well as those files that have changed.
X.LP
XThe \fItw.config\fP file, in addition to the list of files and
Xdirectories, also lists which attributes can change and be safely
Xignored by Tripwire.  Tripwire applies these \fIselect-flags\fP to 
Xdecide which changes can be safely unreported.
X.LP
XEach file that differs from the information stored in the database
Xis considered ``changed.''  However, only the changes that remain 
Xafter the \fIselect-flags\fP are applied are displayed.  For each change,
Xthe expected and actual information is printed.  For instance:
X.LP
X.RS
X.nf
X.ps -2
X.vs -2
X2:30am (mentor) 985 % tripwire
X### Phase 1:   Reading configuration file
X### Phase 2:   Generating file list
X### Phase 3:   Creating file information database
X### Phase 4:   Searching for inconsistencies
X###
X###                     Total files scanned:            82
X###                           Files added:              0
X###                           Files deleted:            0
X###                           Files changed:            80
X###
X###                     After applying rules:
X###                           Changes discarded:        79
X###                           Changes remaining:        1
X###
Xchanged: -rw------- genek        4433 Oct 13 02:30:34 1992 /tmp/genek/tripwire-0.92/config.h
X### Phase 5:   Generating observed/expected pairs for changed files
X###
X### Attr        Observed (what it is)         Expected (what it should be)
X### =========== ============================= =============================
X/tmp/genek/tripwire-0.92/config.h
X       st_size: 4441                          4433
X    md5 (sig1): 0aqL1O06C3Fj1YBXz3.CPdcb      0cPX1H.DYS.s1vZdKD.ELMDR
X snefru (sig2): 0PcgcK/MZvEm.8pIWe.Gbnn/      /8VoJv1JcoUA0NvoGN.k3P6E
X  crc32 (sig3): .EHA6x                        /OuGNV
X  crc16 (sig4): ...9/q                        ...6yu
X    md4 (sig5): /hQ0sU.UEbJo.UR4VZ/mNG/h      .UR4VZ/mNG/h/VSG/W/Z643k
X    md2 (sig6): .hLwjb.VRA0O.Z72y90xTYqA      1LR0Gg1l.vqB0.1g330Pi8/p
X.ps
X.vs
X.RE
X.fi
X.LP
XTripwire in 
XInteractive Update mode will look similar.  However, for each added,
Xdeleted, or changed file, the user is prompted whether the entry
Xcorresponding to the file or directory should be updated.  The user
Xcan answer with either ``y'', ``n'', ``Y'', or ``N''.  The first two
Xanswers are simply ``yes, update the specified file'' and ``no, don't
Xupdate the file'' respectively. 
X.LP
XAnswering ``Y'' not only updates the specified file or directory, but
Xall other files or directories that share the same \fIentry\fP in the
X\fItw.config\fP file.  For example, if ``Y'' were answered for /etc,
Xthen all the files generated by the /etc entry will also be updated.
XAnswering ``N'' is similar, but skips all files and directories
Xcorresponding to the specified entry.
X.LP
XA possible Tripwire session running in Interactive Update mode may
Xlook like:
X.RS
X.nf
X.ps -2
X.vs -2
X3:34pm (flounder) tw/src 5 %%% tripwire -interactive
X### Phase 1:   Reading configuration file
X### Phase 2:   Generating file list
X### Phase 3:   Creating file information database
X### Phase 4:   Searching for inconsistencies
X###
X###			Total files scanned:		49
X###			      Files added:		0
X###			      Files deleted:		0
X###			      Files changed:		49
X###
X###			After applying rules:
X###			      Changes discarded:	48
X###			      Changes remaining:	1
X###
Xchanged: -rw------- genek        7893 May  5 15:30:37 1993 /homes/genek/research/tw/src/databases/tw.db_flounder.Eng.Sun.COM.old
X### Phase 5:   Generating observed/expected pairs for changed files
X###
X### Attr        Observed (what it is)	      Expected (what it should be)
X### =========== ============================= =============================
X/homes/genek/research/tw/src/databases/tw.db_flounder.Eng.Sun.COM.old
X      st_mtime: Wed May  5 15:30:37 1993      Wed May  5 15:24:09 1993
X      st_ctime: Wed May  5 15:30:37 1993      Wed May  5 15:24:09 1993
X---> File: '/homes/genek/research/tw/src/databases/tw.db_flounder.Eng.Sun.COM.old'
X---> Update entry?  [YN(y)nh?] y
X
X### Updating database...
X###
X### Phase 1:   Reading configuration file
X### Phase 2:   Generating file list
X### Phase 3:   Updating file information database
X### Phase 3:   Updating file information database
X###
X### Old database file will be moved to `tw.db_barnum.cs.purdue.edu.old'
X###            in ./databases.
X###
X### Updated database will be stored in './databases/tw.db_barnum.cs.purdue.edu'
X###            (Tripwire expects it to be moved to '/tmp/genek'.)
X###
X3:34pm (flounder) tw/src 6 %%% 
X.ps
X.vs
X.RE
X.fi
X.SH DIAGNOSTICS
XTripwire exit status is 1 for any error condition.  Otherwise, the exit
Xstatus is the logical OR'ing of the following:  2 for files added, 4 for
Xfiles deleted, and 8 for files changed.  (e.g., if Tripwire exits with
Xstatus code 10, then files were added and change.  8 + 2 = 10.)
X.SH ENVIRONMENT
XNone.
X.SH BUGS
XThis manual page is not self-contained \- users are referred to the
XTripwire design document to better understand the issues of integrity
Xchecking.
X.SH SEE ALSO
Xtw.config(5)
X.sp
X.IR "The Design and Implementation of Tripwire: A UNIX File Integrity Checker"
Xby Gene Kim and Eugene Spafford.  Purdue Technical Report CSD-TR-93-071.
X.SH AUTHORS
X.nf
XGene Kim
XPurdue University
Xgkim@cs.purdue.edu
X
XEugene Spafford
XPurdue University
Xspaf@cs.purdue.edu
X.fi
X
END_OF_FILE
if test 13045 -ne `wc -c <'tripwire-1.1/man/tripwire.8'`; then
    echo shar: \"'tripwire-1.1/man/tripwire.8'\" unpacked with wrong size!
fi
# end of 'tripwire-1.1/man/tripwire.8'
fi
if test -f 'tripwire-1.1/sigs/md5/README.md5' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tripwire-1.1/sigs/md5/README.md5'\"
else
echo shar: Extracting \"'tripwire-1.1/sigs/md5/README.md5'\" \(2575 characters\)
sed "s/^X//" >'tripwire-1.1/sigs/md5/README.md5' <<'END_OF_FILE'
X# $Id: README.md5,v 1.2 1993/08/19 05:28:03 genek Exp $ 
X
X/***********************************************************************
X ** md5.c -- the source code for MD5 routines                         **
X ** RSA Data Security, Inc. MD5 Message-Digest Algorithm              **
X ** Created: 2/17/90 RLR                                              **
X ** Revised: 1/91 SRD,AJ,BSK,JT Reference C Version                   **
X ** Revised (for MD5): RLR 4/27/91                                    **
X ***********************************************************************
X ** Copyright (C) 1990, RSA Data Security, Inc. All rights reserved.  **
X ** License to copy and use this software is granted provided that    **
X ** it is identified as the "RSA Data Security, Inc. MD5 Message-     **
X ** Digest Algorithm" in all material mentioning or referencing this  **
X ** software or this function.                                        **
X ** License is also granted to make and use derivative works          **
X ** provided that such works are identified as "derived from the RSA  **
X ** Data Security, Inc. MD5 Message-Digest Algorithm" in all          **
X ** material mentioning or referencing the derived work.              **
X ** RSA Data Security, Inc. makes no representations concerning       **
X ** either the merchantability of this software or the suitability    **
X ** of this software for any particular purpose.  It is provided "as  **
X ** is" without express or implied warranty of any kind.              **
X ** These notices must be retained in any copies of any part of this  **
X ***********************************************************************/
X
X    The MD5 message-digesting package is copyrighted by RSA Data
XSecurity, Inc.  The disclaimer from the C code has been retained,
Xand is shown above.
X
X    All big-endian/little-endian specific code in md5.c has been
Xreplaced by code that can resolve this automatically at
Xcompile-time.  Tripwire specific code is in md5wrapper.c, which
Xcontains the routine 'sig_md5_get' to minimize the amount of
Xoverhead in collecting signatures from within Tripwire.  (We
Xcertainly don't want to fork() for every file we need to scan!)
X
X    Because of this, these files is no longer identical to the
XMD5 virgin distribution.  I have sent my changes to the MD5
Xauthor, but I am not aware of any buybacks at this time.
X
X    The original MD5 code can be found in the Internet Working 
XDraft RFC 1321.  This can be obtained via anonymous FTP (user =
Xanonymous, password = guest) from NIC.DDN.MIL.
X
X
XGene Kim
XSeptember 7, 1992
END_OF_FILE
if test 2575 -ne `wc -c <'tripwire-1.1/sigs/md5/README.md5'`; then
    echo shar: \"'tripwire-1.1/sigs/md5/README.md5'\" unpacked with wrong size!
fi
# end of 'tripwire-1.1/sigs/md5/README.md5'
fi
if test -f 'tripwire-1.1/sigs/crc32/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tripwire-1.1/sigs/crc32/Makefile'\"
else
echo shar: Extracting \"'tripwire-1.1/sigs/crc32/Makefile'\" \(245 characters\)
sed "s/^X//" >'tripwire-1.1/sigs/crc32/Makefile' <<'END_OF_FILE'
X# $Id: Makefile,v 1.4 1993/12/13 04:02:30 genek Exp $
X#
X# Makefile for crc32 wrapper
X#
X# Gene Kim
X# Purdue University
X# October 18, 1992
X#
X
Xall:	crc32.o
X
X.c.o:
X	$(CC) $(CFLAGS) -c $<
X
Xclean:
X	-rm -f *.o .pure
X
Xcrc32.o: ../../include/byteorder.h
END_OF_FILE
if test 245 -ne `wc -c <'tripwire-1.1/sigs/crc32/Makefile'`; then
    echo shar: \"'tripwire-1.1/sigs/crc32/Makefile'\" unpacked with wrong size!
fi
# end of 'tripwire-1.1/sigs/crc32/Makefile'
fi
echo shar: End of archive 15 \(of 25\).
cp /dev/null ark15isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 25 archives.
    echo "Now read tripwire-1.1/README.kits"
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
