Newsgroups: comp.sources.unix
From: spaf@cs.purdue.edu (Gene Spafford)
Subject: v27i159: tripwire-1.1 - security integrity monitor, V1.1, Part13/26
References: <1.756157401.21864@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: spaf@cs.purdue.edu (Gene Spafford)
Posting-Number: Volume 27, Issue 159
Archive-Name: tripwire-1.1/part13

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 13 (of 25)."
# Contents:  tripwire-1.1 tripwire-1.1/aux tripwire-1.1/sigs
#   tripwire-1.1/sigs/sha tripwire-1.1/src
#   tripwire-1.1/src/preen.report.c tripwire-1.1/sigs/sha/sha.c
#   tripwire-1.1/aux/ntohl.h
# Wrapped by spaf@uther.cs.purdue.edu on Thu Dec 16 11:42:44 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test ! -d 'tripwire-1.1' ; then
    echo shar: Creating directory \"'tripwire-1.1'\"
    mkdir 'tripwire-1.1'
fi
if test ! -d 'tripwire-1.1/aux' ; then
    echo shar: Creating directory \"'tripwire-1.1/aux'\"
    mkdir 'tripwire-1.1/aux'
fi
if test ! -d 'tripwire-1.1/sigs' ; then
    echo shar: Creating directory \"'tripwire-1.1/sigs'\"
    mkdir 'tripwire-1.1/sigs'
fi
if test ! -d 'tripwire-1.1/sigs/sha' ; then
    echo shar: Creating directory \"'tripwire-1.1/sigs/sha'\"
    mkdir 'tripwire-1.1/sigs/sha'
fi
if test ! -d 'tripwire-1.1/src' ; then
    echo shar: Creating directory \"'tripwire-1.1/src'\"
    mkdir 'tripwire-1.1/src'
fi
if test -f 'tripwire-1.1/src/preen.report.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tripwire-1.1/src/preen.report.c'\"
else
echo shar: Extracting \"'tripwire-1.1/src/preen.report.c'\" \(22837 characters\)
sed "s/^X//" >'tripwire-1.1/src/preen.report.c' <<'END_OF_FILE'
X#ifndef lint
Xstatic char rcsid[] = "$Id: preen.report.c,v 1.14 1993/12/02 18:03:25 genek Exp $";
X#endif
X
X/*
X * preen.report.c
X *
X *	report generation given the data from preening
X *
X * Gene Kim
X * Purdue University
X */
X
X#include "../include/config.h"
X#include <stdio.h>
X#ifdef STDLIBH
X#include <stdlib.h>
X#include <unistd.h>
X#endif
X#include <fcntl.h>
X#include <sys/param.h>
X#include <sys/types.h>
X#include <sys/stat.h>
X#ifdef STRINGH
X#include <string.h>
X#else
X#include <strings.h>
X#endif
X#include <time.h>
X#ifdef MALLOCH
X# include <malloc.h>
X#endif
X#include "../include/list.h"
X#include "../include/tripwire.h"
X
Xstatic void preen_report_changed_enum();
Xstatic int preen_change_count();
Xstatic char *structstat_fill();
Xstatic void pair_print_ss();
Xstatic void pair_print_ll();
Xstatic void pair_print_llo();
Xstatic char **pp_update = (char **) NULL;
Xstatic void updateentry_prompt();
Xstatic void updateentry_menu();
Xstatic void updateentry_help();
X
X/*
X * preen_report()
X *
X *	report on:
X *		which files have been ADDED
X *		which files have been DELETED
X *		which files have been CHANGED
X *			what attribute changed?
X *
X *	remember that (olddbase_list) is composed of filenames that
X *	have not been expanded.
X */
X
Xvoid
Xpreen_report(interactive, ppp_updateentries)
X    int interactive;
X    char ***ppp_updateentries;
X{
X    struct list_elem *p;
X    struct stat statnew, statold;
X    char sigsnew[NUM_SIGS][SIG_MAX_LEN], sigsold[NUM_SIGS][SIG_MAX_LEN];
X    char *s;
X    int unignored;
X    FILE *fttyin = NULL, *fttyout = NULL;
X
X    /* we'll use a local variable for this */
X    /*
X    pp_update = *ppp_updateentries;
X    */
X
X    /* if we're in interactive mode, open tty for input */
X    if (interactive) {
X	if ((fttyin = fopen("/dev/tty", "r")) == NULL) {
X	    char err[256];
X	    sprintf(err, "%s: cannot fopen() /dev/tty", progname);
X	    perror(err);
X	    exit(1);
X	}
X	if ((fttyout = fopen("/dev/tty", "w")) == NULL) {
X	    char err[256];
X	    sprintf(err, "%s: cannot fopen() /dev/tty", progname);
X	    perror(err);
X	    exit(1);
X	}
X    }
X
X    unignored = preen_change_count();
X
X    if (!quietmode) {
X    fprintf(stderr, "###\n");
X    fprintf(stderr, "###\t\t\tTotal files scanned:\t\t%d\n", files_scanned_num);
X    fprintf(stderr, "###\t\t\t      Files added:\t\t%d\n", diff_added_num);
X    fprintf(stderr, "###\t\t\t      Files deleted:\t\t%d\n", diff_deleted_num);
X    fprintf(stderr, "###\t\t\t      Files changed:\t\t%d\n", diff_changed_num);
X    fprintf(stderr, "###\n");
X    fprintf(stderr, "###\t\t\tAfter applying rules:\n");
X    fprintf(stderr, "###\t\t\t      Changes discarded:\t%d\n",
X			diff_added_num + diff_deleted_num + diff_changed_num -
X	      		(unignored) );
X    fprintf(stderr, "###\t\t\t      Changes remaining:\t%d\n",
X		        unignored + diff_added_num + diff_deleted_num);
X    fprintf(stderr, "###\n");
X    }
X
X    /****** added ******/
X
X    /* open each of the three lists, using &diff_xxxx_list as keys */
X    if (list_open(&diff_added_list) < 0) {
X	fprintf(stderr, "preen_report: list_open() failed!\n");
X	exit(1);
X    }
X
X    /* print out each added file in sequence */
X    while ((p = list_get(&diff_added_list)) != NULL) {
X	static int firsttime = 1;
X	char filename[2048];
X
X	strcpy(filename, p->varname);
X	filename_escape_expand(filename);
X
X	(void) structstat_fill(p->varvalue, &statnew, sigsnew, filename);
X
X	direntry_print(filename, statnew, DIFF_ADDED);
X
X	/* XXX: Why are some people seeing files in the added and deleted
X	 * list.  Abort if this happens.
X	 */
X	if (list_isthere(filename, &diff_deleted_list)) {
X	    printf("### Why is this file also marked as DELETED?  Please mail this output to (genek@cc.purdue.edu)!\n");
X	}
X	if (list_isthere(filename, &diff_changed_list)) {
X	    printf("### Why is this file also marked as CHANGED?  Please mail this output to (genek@cc.purdue.edu)!\n");
X	}
X
X	if (interactive) {
X	    updateentry_prompt(fttyin, fttyout, filename, firsttime);
X	    firsttime = 0;
X	}
X    }
X
X    if (list_close(&diff_added_list) < 0) {
X	fprintf(stderr, "preen_report: list_close() failed!\n");
X	exit(1);
X    }
X
X    /****** deleted ******/
X
X    /* now print out the files that were deleted */
X    if (list_open(&diff_deleted_list) < 0) {
X	fprintf(stderr, "preen_report: list_open() failed!\n");
X	exit(1);
X    }
X
X    /* print out each added file in sequence */
X    while ((p = list_get(&diff_deleted_list)) != NULL) {
X	static int firsttime = 1;
X	char filename[2048];
X
X	strcpy(filename, p->varname);
X	filename_escape_expand(filename);
X
X	(void) structstat_fill(p->varvalue, &statnew, sigsnew, filename);
X
X	direntry_print(filename, statnew, DIFF_DELETED);
X	if (interactive) {
X	    updateentry_prompt(fttyin, fttyout, filename, firsttime);
X	    firsttime = 0;
X	}
X    }
X
X    if (list_close(&diff_deleted_list) < 0) {
X	fprintf(stderr, "preen_report: list_close() failed!\n");
X	exit(1);
X    }
X
X    /***** changed ******/
X
X    /*
X     * interate through the list
X     *		get the ignore vector
X     *		foreach each (attribute) {
X     *			if (attribute != attribute')
X     *				if (!ignored) { flag it; }
X     *		}
X     */
X    /*
X    list_print(&diff_changed_list);
X    */
X    if (list_open(&diff_changed_list) < 0) {
X	fprintf(stderr, "preen_report: list_open() failed!\n");
X	exit(1);
X    }
X
X    /* print out each added file in sequence */
X    while ((p = list_get(&diff_changed_list)) != NULL) {
X	char filename[2048];
X
X
X	/* copy the filename and expand any escaped characters */
X	strcpy(filename, p->varname);
X	filename_escape_expand(filename);
X
X	/* filename, ignore, mode, inode, nlinks, uid, gid, size, access,
X	 * modify, ctime, sig1, sig2
X	 */
X
X	/* read in the new value from the changed_list
X	 *		throw away the new ignorevector -- we use the old one!
X	 */
X	(void) structstat_fill(p->varvalue, &statnew, sigsnew, filename);
X
X	/* read in the list1 value form the hash table */
X	if ((s = list_lookup(p->varname, &olddbase_list)) == NULL) {
X	    fprintf(stderr, "preen_report: list_lookup(%s) failed!\n",
X		p->varname);
X	    exit(1);
X	}
X
X	/* check for unchanged flag */
X	if (list_getflag(p->varname, &diff_changed_list) & FLAG_UNCHANGE) {
X	    SPDEBUG(6) printf("--(skipping unchanged entry %s)--\n",
X					p->varname);
X	    continue;
X	}
X
X	(void) structstat_fill(s, &statold, sigsold, filename);
X
X	/* is this file to be ignored? */
X	if (!(list_getflag(p->varname, &diff_changed_list) & FLAG_CHANGED))
X	    continue;
X
X	/* print out the report for this file */
X	direntry_print(filename, statnew, DIFF_CHANGED);
X
X    }
X
X    if (list_close(&diff_changed_list) < 0) {
X	fprintf(stderr, "preen_report: list_close() failed!\n");
X	exit(1);
X    }
X
X    /* enumerate specifics of changed files, if long output specified */
X    if (interactive || (!quietmode && unignored != 0)) {
X	preen_report_changed_enum(interactive, fttyin, fttyout);
X    }
X
X    /* close up the tty streams */
X    if (interactive) {
X	fclose(fttyin);
X	fclose(fttyout);
X    }
X
X    *ppp_updateentries = pp_update;
X    diff_unignored_num = unignored;
X    return;
X}
X
X/*
X * preen_report_changed_enum(int interactive, fttyin, fttyout)
X *
X *	enumerate each changed attributed for each of the changed files.
X *	this is treated as yet another pass in the checking process.
X *
X *	(interactive) indicates whether we should be asking the user to 
X *	update this file later.  (fttyin) and (fttyout) are the streams
X *	we talk through.
X */
X
Xstatic void
Xpreen_report_changed_enum(interactive, fttyin, fttyout)
X    int interactive;
X    FILE *fttyin, *fttyout;
X{
X    struct list_elem *p;
X    char *ignorevec;
X    char sigsold[NUM_SIGS][SIG_MAX_LEN], sigsnew[NUM_SIGS][SIG_MAX_LEN];
X    struct stat statnew, statold;
X    char *s;
X    char stime1[64], stime2[64];
X    int ignoremask;
X    int i;
X    char label[50];
X
X    (void) fflush(stdout);
X    if (!quietmode) {
X	fprintf(stderr, "### Phase 5:   Generating observed/expected pairs for changed files\n");
X	fprintf(stderr, "###\n");
X	(void) fflush(stderr);
X    }
X
Xprintf("### Attr        Observed (what it is)	      Expected (what it should be)\n");
Xprintf("### =========== ============================= =============================\n");
X    /****
X    st_atime: Mon Aug 31 16:48:57 1992         Mon Aug 31 14:05:49 1992
X    ****/
X
X    /* open the list of changed files */
X    if (list_open(&diff_changed_list) < 0) {
X	fprintf(stderr, "preen_report: list_open() failed!\n");
X	exit(1);
X    }
X
X    /* print out each added file in sequence */
X    while ((p = list_get(&diff_changed_list)) != NULL) {
X        static int firsttime = 1;
X	char filename[2048];
X
X	strcpy(filename, p->varname);
X	filename_escape_expand(filename);
X
X	/* filename, ignore, mode, inode, nlinks, uid, gid, size, access,
X	 * modify, ctime, sig1, sig2 .. sign
X	 */
X
X	/* read in the list2 value from the changed_list
X	 *		throw away the new ignorevector -- we use the old one!
X	 */
X	(void) structstat_fill(p->varvalue, &statnew, sigsnew, filename);
X
X	/* read in the list1 value form the hash table */
X	if ((s = list_lookup(p->varname, &olddbase_list)) == NULL) {
X	    fprintf(stderr, "preen_report_changed_enum: list_lookup(%s) failed!\n", p->varname);
X	    exit(1);
X	}
X
X	ignorevec = structstat_fill(s, &statold, sigsold, filename);
X
X	/* get the ignoremask */
X	ignoremask = ignore_vec_to_scalar(ignorevec);
X
X	/* is this file to be ignored? */
X	if (!(list_getflag(p->varname, &diff_changed_list) & FLAG_CHANGED))
X	    continue;
X
X	printf("%s\n", filename);
X	/* and then the {expected, received} pairs */
X
X#define STATEQ(x) (statnew.x != statold.x)
X
X	/* if we're reporting growing files, report size */
X	if (ignoremask & IGNORE_GROW) {
X	    ignoremask = ignoremask & ~(IGNORE_S);
X	}
X
X	if (!(ignoremask & IGNORE_P))
X	    if (STATEQ(st_mode)) {
X		pair_print_llo("st_mode:", (long) statnew.st_mode,
X			(long) statold.st_mode);
X	    }
X	
X	if (!(ignoremask & IGNORE_I))
X	    if (STATEQ(st_ino)) {
X		pair_print_ll("st_ino:", (long) statnew.st_ino,
X			(long) statold.st_ino);
X	    }
X	
X	if (!(ignoremask & IGNORE_N))
X	    if (STATEQ(st_nlink)) {
X		pair_print_ll("st_nlink:", (long) statnew.st_nlink,
X			(long) statold.st_nlink);
X	    }
X
X	if (!(ignoremask & IGNORE_U))
X	    if (STATEQ(st_uid)) {
X		pair_print_ll("st_uid:", (long) statnew.st_uid,
X			(long) statold.st_uid);
X	    }
X
X	if (!(ignoremask & IGNORE_G))
X	    if (STATEQ(st_gid)) {
X		pair_print_ll("st_gid:", (long) statnew.st_gid,
X			(long) statold.st_gid);
X	    }
X
X	if (!(ignoremask & IGNORE_S))
X	    if (STATEQ(st_size)) {
X		pair_print_ll("st_size:", (long) statnew.st_size,
X			(long) statold.st_size);
X	    }
X
X	if (!(ignoremask & IGNORE_A))
X	    if (STATEQ(st_atime)) {
X		(void) strcpy(stime1, ctime(&statnew.st_atime));
X		(void) strcpy(stime2, ctime(&statold.st_atime));
X		chop(stime1);
X		chop(stime2);
X		pair_print_ss("st_atime:", stime1, stime2);
X	    }
X
X	if (!(ignoremask & IGNORE_M))
X	    if (STATEQ(st_mtime)) {
X		(void) strcpy(stime1, ctime(&statnew.st_mtime));
X		(void) strcpy(stime2, ctime(&statold.st_mtime));
X		chop(stime1);
X		chop(stime2);
X		pair_print_ss("st_mtime:", stime1, stime2);
X	    }
X
X	if (!(ignoremask & IGNORE_C))
X	    if (STATEQ(st_ctime)) {
X		(void) strcpy(stime1, ctime(&statnew.st_ctime));
X		(void) strcpy(stime2, ctime(&statold.st_ctime));
X		chop(stime1);
X		chop(stime2);
X		pair_print_ss("st_ctime:", stime1, stime2);
X	    }
X
X	for (i = 0; i < NUM_SIGS; i++) {
X	    if (!(runtimeignore & (IGNORE_0 << i)) &&
X					!(ignoremask & (IGNORE_0 << i)))
X		if (strcmp(sigsnew[i], sigsold[i]) != 0) {
X		    (void) sprintf(label, "%s (sig%d):", signames[i], i);
X		    pair_print_ss(label, sigsnew[i], sigsold[i]);
X		}
X
X	}
X
X	/* quiz the user if this entry should be updated */
X	if (interactive) {
X	    updateentry_prompt(fttyin, fttyout, filename, firsttime);
X	    firsttime = 0;
X	}
X
X	/* separate entries by a space */
X	printf("\n");
X
X    }
X
X    if (list_close(&diff_changed_list) < 0) {
X	fprintf(stderr, "preen_report_changed_enum: list_close() failed!\n");
X	exit(1);
X    }
X}
X
X/*
X * preen_change_count()
X *
X *	return the number of files that are changed, according to their
X *	ignore vectors.
X */
X
Xstatic int
Xpreen_change_count()
X{
X    int changed = 0;
X    struct list_elem *p;
X    char sigsold[NUM_SIGS][SIG_MAX_LEN], sigsnew[NUM_SIGS][SIG_MAX_LEN];
X    char vec64_a[50], vec64_m[50], vec64_c[50];
X    char trash[512];
X    struct stat statnew, statold;
X    char *s;
X    int ignoremask;
X    char ignorevec[512];
X    unsigned long mode, ino, nlink, uid, gid, size;
X    int entrynum;
X    int nfields;
X
X    /***** changed ******/
X
X    /*
X     * interate through the list
X     *		get the ignore vector
X     *		foreach each (attribute) {
X     *			if (attribute != attribute')
X     *				if (!ignored) { flag it; }
X     *		}
X     */
X    if (list_open(&diff_changed_list) < 0) {
X	fprintf(stderr, "preen_report: list_open(diff_changed_list) failed!\n");
X	exit(1);
X    }
X
X    /* print out each added file in sequence */
X    while ((p = list_get(&diff_changed_list)) != NULL) {
X
X	int isdir = 0;
X	char filename[2048];
X	int reallychanged = 0;
X
X	strcpy(filename, p->varname);
X	filename_escape_expand(filename);
X
X	/* filename, ignore, mode, inode, nlinks, uid, gid, size, access,
X	 * modify, ctime, sig1, sig2
X	 */
X
X	/* read in the list2 value from the changed_list
X	 *		throw away the new ignorevector -- we use the old one!
X	 */
X
X	if ((nfields = sscanf(p->varvalue, db_record_format,
X		&entrynum, trash,
X		&mode, &ino, &nlink, &uid, &gid, &size,
X		vec64_a, vec64_m, vec64_c,
X		sigsnew[0], sigsnew[1], sigsnew[2], sigsnew[3], sigsnew[4],
X		sigsnew[5], sigsnew[6], sigsnew[7], sigsnew[8], sigsnew[9]))
X				!= DB_RECORD_FIELDS) {
X	    fprintf(stderr, "preen_change_count: %s: illegal database record (nfields == %d).   Aborting...\n", 
X				 filename, nfields);
X	    fprintf(stderr, "	'%s'\n", p->varvalue);
X	    exit(1);
X	}
X	if ((mode & S_IFMT) == S_IFDIR)
X	    isdir = 1;
X
X        statnew.st_mode = (mode_t)mode;
X        statnew.st_ino = (ino_t)ino;
X        statnew.st_nlink = (nlink_t)nlink;
X        statnew.st_uid = (uid_t)uid;
X        statnew.st_gid = (gid_t)gid;
X        statnew.st_size = (off_t)size;
X
X	/* convert from base64 to int */
X	statnew.st_atime = b64tol(vec64_a);
X	statnew.st_mtime = b64tol(vec64_m);
X	statnew.st_ctime = b64tol(vec64_c);
X
X	/* read in the list1 value form the hash table */
X	if ((s = list_lookup(p->varname, &olddbase_list)) == NULL) {
X	    fprintf(stderr, "preen_change_count: list_lookup(%s) failed!\n",
X			p->varname);
X	    exit(1);
X	}
X
X	if ((nfields = sscanf(s, db_record_format,
X		&entrynum, ignorevec,
X		&mode, &ino, &nlink, &uid, &gid, &size,
X		vec64_a, vec64_m, vec64_c,
X		sigsold[0], sigsold[1], sigsold[2], sigsold[3], sigsold[4],
X		sigsold[5], sigsold[6], sigsold[7], sigsold[8], sigsold[9]))
X				!= DB_RECORD_FIELDS) {
X	    fprintf(stderr, "preen_change_count: %s: illegal database record! Aborting...  (nfields=%d)\n", filename, nfields);
X	    fprintf(stderr, "	'%s'\n", s);
X	    exit(1);
X	}
X        statold.st_mode = (mode_t)mode;
X        statold.st_ino = (ino_t)ino;
X        statold.st_nlink = (nlink_t)nlink;
X        statold.st_uid = (uid_t)uid;
X        statold.st_gid = (gid_t)gid;
X        statold.st_size = (off_t)size;
X
X	/* convert from base64 to int */
X	statold.st_atime = b64tol(vec64_a);
X	statold.st_mtime = b64tol(vec64_m);
X	statold.st_ctime = b64tol(vec64_c);
X
X	/* get the ignoremask */
X	ignoremask = ignore_vec_to_scalar(ignorevec);
X
X	/* and then the {expected, received} pairs */
X
X#define FLAGIT(x) changed++; reallychanged = 1; SPDEBUG(3) {printf("--(FLAGGING %s: unignored change in <%s>)--\n", filename, (x)); } list_setflag(p->varname, FLAG_CHANGED, &diff_changed_list); continue
X#define SIGEQ(x) if (strcmp(sigsnew[(x)], sigsold[(x)]) != 0)
X
X	/* allow for loose directory interpretations by ignoring nlink,
X	 * ctime, and mtime, and size.
X	 */
X	if (isdir && loosedir) {
X	    ignoremask |= IGNORE_N | IGNORE_M | IGNORE_C | IGNORE_S;
X	}
X
X	/* note the pain we go through to avoid dangling else's */
X	if (!(ignoremask & IGNORE_P)) { if (STATEQ(st_mode)) {FLAGIT("p");}}
X	if (!(ignoremask & IGNORE_I)) { if (STATEQ(st_ino)) {FLAGIT("i");}}
X	if (!(ignoremask & IGNORE_N)) { if (STATEQ(st_nlink)) {FLAGIT("n");}}
X	if (!(ignoremask & IGNORE_U)) { if (STATEQ(st_uid)) {FLAGIT("u");}}
X	if (!(ignoremask & IGNORE_G)) { if (STATEQ(st_gid)) {FLAGIT("g");}}
X	if ((ignoremask & IGNORE_GROW)) { if (statnew.st_size < statold.st_size) { ignoremask = ignoremask & ~(IGNORE_S); FLAGIT(">"); ;}}
X	if (!(ignoremask & IGNORE_S)) { if (STATEQ(st_size)) {FLAGIT("s");}}
X	if (!(ignoremask & IGNORE_A)) { if (STATEQ(st_atime)) {FLAGIT("a");}}
X	if (!(ignoremask & IGNORE_M)) { if (STATEQ(st_mtime)) {FLAGIT("m");}}
X	if (!(ignoremask & IGNORE_C)) { if (STATEQ(st_ctime)) {FLAGIT("c");}}
X	if (!(runtimeignore & IGNORE_0) && !(ignoremask & IGNORE_0))
X					{ SIGEQ(0) {FLAGIT("0");}}
X	if (!(runtimeignore & IGNORE_1) && !(ignoremask & IGNORE_1))
X					{ SIGEQ(1) {FLAGIT("1");}}
X	if (!(runtimeignore & IGNORE_2) && !(ignoremask & IGNORE_2))
X					{ SIGEQ(2) {FLAGIT("2");}}
X	if (!(runtimeignore & IGNORE_3) && !(ignoremask & IGNORE_3))
X					{ SIGEQ(3) {FLAGIT("3");}}
X	if (!(runtimeignore & IGNORE_4) && !(ignoremask & IGNORE_4))
X					{ SIGEQ(4) {FLAGIT("4");}}
X	if (!(runtimeignore & IGNORE_5) && !(ignoremask & IGNORE_5))
X					{ SIGEQ(5) {FLAGIT("5");}}
X	if (!(runtimeignore & IGNORE_6) && !(ignoremask & IGNORE_6))
X					{ SIGEQ(6) {FLAGIT("6");}}
X	if (!(runtimeignore & IGNORE_7) && !(ignoremask & IGNORE_7))
X					{ SIGEQ(7) {FLAGIT("7");}}
X	if (!(runtimeignore & IGNORE_8) && !(ignoremask & IGNORE_8))
X					{ SIGEQ(8) {FLAGIT("8");}}
X	if (!(runtimeignore & IGNORE_9) && !(ignoremask & IGNORE_9))
X					{ SIGEQ(9) {FLAGIT("9");}}
X	if (!reallychanged) {
X	     list_setflag(p->varname, FLAG_UNCHANGE, &diff_changed_list);
X	}
X
X    }
X
X    /* clean up */
X    if (list_close(&diff_changed_list) < 0) {
X	fprintf(stderr, "preen_report: list_close(diff_changed_list) failed!\n");
X	exit(1);
X    }
X
X    return changed;
X}
X
X/*
X * structstat_fill(char *string, struct stat *statbuf, char *filename)
X *
X *	given a string from the database, fill in the statbuf structure.
X *	(filename) is provided for error reporting.
X *	
X *	return the ignore vector (a static system structure)
X */
X
Xstatic char *
Xstructstat_fill (string, statbuf, sigs, recordkey)
X    char *string;
X    struct stat *statbuf;
X    char sigs[NUM_SIGS][SIG_MAX_LEN];
X    char *recordkey;
X{
X    char *ignorevec;
X    static char structstat_fill_string[512];
X    unsigned long        mode, ino, nlink, uid, gid, size;
X    int entrynum;
X    char vec64_a[50], vec64_m[50], vec64_c[50];
X
X    (void) strcpy(structstat_fill_string, string);
X    ignorevec = structstat_fill_string;
X
X    if (sscanf(string, db_record_format,
X		&entrynum, ignorevec,
X		&mode, &ino, &nlink, &uid, &gid, &size,
X		vec64_a, vec64_m, vec64_c,
X		sigs[0], sigs[1], sigs[2], sigs[3], sigs[4],
X		sigs[5], sigs[6], sigs[7], sigs[8], sigs[9])
X				!= DB_RECORD_FIELDS) {
X	fprintf(stderr, "structstat_fill: %s: illegal database record!  Aborting...\n", recordkey);
X	fprintf(stderr, "	'%s'\n", string);
X	exit(1);
X    }
X    statbuf->st_mode = (mode_t)mode;
X    statbuf->st_ino = (ino_t)ino;
X    statbuf->st_nlink = (nlink_t)nlink;
X    statbuf->st_uid = (uid_t)uid;
X    statbuf->st_gid = (gid_t)gid;
X    statbuf->st_size = (off_t)size;
X
X    /* convert from base64 to int */
X    statbuf->st_atime = b64tol(vec64_a);
X    statbuf->st_mtime = b64tol(vec64_m);
X    statbuf->st_ctime = b64tol(vec64_c);
X
X    return ignorevec;
X}
X
X/*
X * pair_print_ss(char *label, char *s1, char *s2)
X *
X *	print {expected,received} table with strings
X */
X
Xstatic void
Xpair_print_ss (label, s1, s2)
X    char *label;
X    char *s1;
X    char *s2;
X{
X    printf("%15s %-30s%-30s\n", label, s1, s2);
X    return;
X}
X
X/*
X * pair_print_ll(char *label, long l1, long l2)
X *
X *	print {expected,received} table with longs
X */
X
Xstatic void
Xpair_print_ll (label, l1, l2)
X    char *label;
X    long l1;
X    long l2;
X{
X    printf("%15s %-30ld%-30ld\n", label, l1, l2);
X    return;
X}
X
X/*
X * pair_print_llo(char *label, long l1, long l2)
X *
X *	print {expected,received} table with longs in octal
X */
X
Xstatic void
Xpair_print_llo (label, l1, l2)
X    char *label;
X    long l1;
X    long l2;
X{
X    printf("%15s %-30lo%-30lo\n", label, l1, l2);
X    return;
X}
X
Xstatic void
Xupdateentry_list_add(filename)
X    char *filename;
X{
X    char *pc;
X    static int numinterupdated = 0;		
X
X    pc = (char *) malloc((unsigned) strlen(filename) + 1);
X    (void) strcpy(pc, filename);
X
X    /* make sure we don't realloc() a null pointer */
X    if (!pp_update) {
X	if (!(pp_update = (char **) malloc(sizeof(char *))))
X	    die_with_err("main: realloc() failed!\n", NULL);
X    } 
X    if ((pp_update = (char **) realloc(pp_update,
X	    (numinterupdated+2) * sizeof(char *))) == NULL) {
X	die_with_err("main: realloc() failed!\n", NULL);
X    }
X    pp_update[numinterupdated++] = pc;
X    pp_update[numinterupdated] = NULL;
X}
X
Xstatic void
Xupdateentry_prompt(fttyin, fttyout, filename, reset)
X    FILE *fttyin, *fttyout;
X    char *filename;
X    int reset;
X{
X    static int firsttime = 1;
X    static int lastanswer = 0;
X    char answer[100], *pc;
X
X#define LASTANSWER_ALLYES 	1
X#define LASTANSWER_ALLNO 	2
X#define LASTANSWER_QUIT 	3
X
X    if (reset) {
X        firsttime = 1;
X	lastanswer = 0;
X    }
X
XAGAIN:
X    if (lastanswer == LASTANSWER_ALLNO) {
X        return;
X    }
X    if (lastanswer == LASTANSWER_ALLYES || test_interactive) {
X	updateentry_list_add(filename); 
X	if (!test_interactive) {
X	    fprintf(fttyout, "---> Updating '%s'\n", filename);
X	    fflush(fttyout);
X	}
X	return;
X    }
X
X    if (!test_interactive) {
X	fprintf(fttyout, "---> File: '%s'\n", filename);
X	fprintf(fttyout, "---> Update entry?  [YN(y)nh?] ");
X	fflush(fttyout);
X	(void) fgets(answer, sizeof(answer), fttyin);
X	pc = answer;
X    } 
X    /* we're in interactive testing mode */
X    else {
X	pc = "Y";
X    }
X    switch(*pc) {
X    case '\n':
X    case 'y': 	updateentry_list_add(filename); 
X    		break;
X    case 'Y': 	updateentry_list_add(filename); 
X    		lastanswer = LASTANSWER_ALLYES;
X		break;
X    case 'n':	break;
X    case 'N': 	lastanswer = LASTANSWER_ALLNO;
X    		break;
X    case 'h':   updateentry_help(fttyout);
X    		break;
X    case '?':	updateentry_menu(fttyout);
X    		goto AGAIN;
X    		break;
X    default: 	fprintf(fttyout, 
X		    "I don't understand your choice '%c'.  Try again.\n", 
X		    *pc);
X		goto AGAIN;
X    }
X
X    firsttime = 0;
X}
X
Xstatic void
Xupdateentry_menu(fpout)
X    FILE *fpout;
X{
X    fprintf(fpout, "\n");
X    fprintf(fpout, "	y:  Yes, update the database entry to match current file\n");
X    fprintf(fpout, "	n:  No, leave database entry alone\n");
X    fprintf(fpout, "	Y:  Yes, and change all other files in this entry\n");
X    fprintf(fpout, "	N:  No, and leave all other entries alone\n");
X    fprintf(fpout, "	h:  Print inode information help message\n");
X    fprintf(fpout, "	?:  Print this help message\n");
X    fprintf(fpout, "\n");
X}
X
Xstatic void
Xupdateentry_help(fpout)
X    FILE *fpout;
X{
X    (void) tw_help_print(fpout);
X}
END_OF_FILE
if test 22837 -ne `wc -c <'tripwire-1.1/src/preen.report.c'`; then
    echo shar: \"'tripwire-1.1/src/preen.report.c'\" unpacked with wrong size!
fi
# end of 'tripwire-1.1/src/preen.report.c'
fi
if test -f 'tripwire-1.1/sigs/sha/sha.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tripwire-1.1/sigs/sha/sha.c'\"
else
echo shar: Extracting \"'tripwire-1.1/sigs/sha/sha.c'\" \(11410 characters\)
sed "s/^X//" >'tripwire-1.1/sigs/sha/sha.c' <<'END_OF_FILE'
X#ifndef lint
Xstatic char rcsid[] = "$Id: sha.c,v 1.4 1993/12/13 04:02:32 genek Exp $";
X#endif
X
X/*
X * sha.c
X *
X *	signature function hook for SHA.
X *
X * Gene Kim
X * Purdue University
X * August 10, 1993
X */
X
X/* --------------------------------- SHS.H ------------------------------- */
X
X/* NIST proposed Secure Hash Standard.
X
X   Written 2 September 1992, Peter C. Gutmann.
X   This implementation placed in the public domain.
X
X   Comments to pgut1@cs.aukuni.ac.nz */
X
X
X/* --------------------------------- SHS.C ------------------------------- */
X
X/* NIST proposed Secure Hash Standard.
X
X   Written 2 September 1992, Peter C. Gutmann.
X   This implementation placed in the public domain.
X
X   Comments to pgut1@cs.aukuni.ac.nz */
X
X#include "../../include/config.h"
X#include <stdio.h>
X#include <sys/types.h>
X#ifdef STDLIBH
X#include <stdlib.h>
X#include <string.h>
X#endif
X#ifdef TEST
X#include <time.h>
X#endif
X#include "../../include/sigs.h"
X#include "../../include/byteorder.h"
X
X#include "sha.h"
X
X#if BYTEORDER == 0x1234
X#define LITTLE_ENDIAN
X#endif
X
X
X/* The SHS f()-functions */
X
X#define f1(x,y,z)   ( ( x & y ) | ( ~x & z ) )              /* Rounds  0-19 */
X#define f2(x,y,z)   ( x ^ y ^ z )                           /* Rounds 20-39 */
X#define f3(x,y,z)   ( ( x & y ) | ( x & z ) | ( y & z ) )   /* Rounds 40-59 */
X#define f4(x,y,z)   ( x ^ y ^ z )                           /* Rounds 60-79 */
X
X/* The SHS Mysterious Constants */
X
X#define K1  0x5A827999L     /* Rounds  0-19 */
X#define K2  0x6ED9EBA1L     /* Rounds 20-39 */
X#define K3  0x8F1BBCDCL     /* Rounds 40-59 */
X#define K4  0xCA62C1D6L     /* Rounds 60-79 */
X
X/* SHS initial values */
X
X#define h0init  0x67452301L
X#define h1init  0xEFCDAB89L
X#define h2init  0x98BADCFEL
X#define h3init  0x10325476L
X#define h4init  0xC3D2E1F0L
X
X/* 32-bit rotate - kludged with shifts */
X
X#define S(n,X)  ( ( X << n ) | ( X >> ( 32 - n ) ) )
X
X/* The initial expanding function */
X
X#define expand(count)   W[ count ] = W[ count - 3 ] ^ W[ count - 8 ] ^ W[ count - 14 ] ^ W[ count - 16 ]
X
X/* The four SHS sub-rounds */
X
X#define subRound1(count)    \
X    { \
X    temp = S( 5, A ) + f1( B, C, D ) + E + W[ count ] + K1; \
X    E = D; \
X    D = C; \
X    C = S( 30, B ); \
X    B = A; \
X    A = temp; \
X    }
X
X#define subRound2(count)    \
X    { \
X    temp = S( 5, A ) + f2( B, C, D ) + E + W[ count ] + K2; \
X    E = D; \
X    D = C; \
X    C = S( 30, B ); \
X    B = A; \
X    A = temp; \
X    }
X
X#define subRound3(count)    \
X    { \
X    temp = S( 5, A ) + f3( B, C, D ) + E + W[ count ] + K3; \
X    E = D; \
X    D = C; \
X    C = S( 30, B ); \
X    B = A; \
X    A = temp; \
X    }
X
X#define subRound4(count)    \
X    { \
X    temp = S( 5, A ) + f4( B, C, D ) + E + W[ count ] + K4; \
X    E = D; \
X    D = C; \
X    C = S( 30, B ); \
X    B = A; \
X    A = temp; \
X    }
X
X/* The two buffers of 5 32-bit words */
X
XLONG h0, h1, h2, h3, h4;
XLONG A, B, C, D, E;
X
X/* Initialize the SHS values */
X
Xvoid shsInit(shsInfo)
X    SHS_INFO *shsInfo;
X    {
X    /* Set the h-vars to their initial values */
X    shsInfo->digest[ 0 ] = h0init;
X    shsInfo->digest[ 1 ] = h1init;
X    shsInfo->digest[ 2 ] = h2init;
X    shsInfo->digest[ 3 ] = h3init;
X    shsInfo->digest[ 4 ] = h4init;
X
X    /* Initialise bit count */
X    shsInfo->countLo = shsInfo->countHi = 0L;
X    }
X
X/* Perform the SHS transformation.  Note that this code, like MD5, seems to
X   break some optimizing compilers - it may be necessary to split it into
X   sections, eg based on the four subrounds */
X
Xvoid shsTransform(shsInfo)
X    SHS_INFO *shsInfo;
X    {
X    LONG W[ 80 ], temp;
X    int i;
X
X    /* Step A.  Copy the data buffer into the local work buffer */
X    for( i = 0; i < 16; i++ )
X	W[ i ] = shsInfo->data[ i ];
X
X    /* Step B.  Expand the 16 words into 64 temporary data words */
X    expand( 16 ); expand( 17 ); expand( 18 ); expand( 19 ); expand( 20 );
X    expand( 21 ); expand( 22 ); expand( 23 ); expand( 24 ); expand( 25 );
X    expand( 26 ); expand( 27 ); expand( 28 ); expand( 29 ); expand( 30 );
X    expand( 31 ); expand( 32 ); expand( 33 ); expand( 34 ); expand( 35 );
X    expand( 36 ); expand( 37 ); expand( 38 ); expand( 39 ); expand( 40 );
X    expand( 41 ); expand( 42 ); expand( 43 ); expand( 44 ); expand( 45 );
X    expand( 46 ); expand( 47 ); expand( 48 ); expand( 49 ); expand( 50 );
X    expand( 51 ); expand( 52 ); expand( 53 ); expand( 54 ); expand( 55 );
X    expand( 56 ); expand( 57 ); expand( 58 ); expand( 59 ); expand( 60 );
X    expand( 61 ); expand( 62 ); expand( 63 ); expand( 64 ); expand( 65 );
X    expand( 66 ); expand( 67 ); expand( 68 ); expand( 69 ); expand( 70 );
X    expand( 71 ); expand( 72 ); expand( 73 ); expand( 74 ); expand( 75 );
X    expand( 76 ); expand( 77 ); expand( 78 ); expand( 79 );
X
X    /* Step C.  Set up first buffer */
X    A = shsInfo->digest[ 0 ];
X    B = shsInfo->digest[ 1 ];
X    C = shsInfo->digest[ 2 ];
X    D = shsInfo->digest[ 3 ];
X    E = shsInfo->digest[ 4 ];
X
X    /* Step D.  Serious mangling, divided into four sub-rounds */
X    subRound1( 0 ); subRound1( 1 ); subRound1( 2 ); subRound1( 3 );
X    subRound1( 4 ); subRound1( 5 ); subRound1( 6 ); subRound1( 7 );
X    subRound1( 8 ); subRound1( 9 ); subRound1( 10 ); subRound1( 11 );
X    subRound1( 12 ); subRound1( 13 ); subRound1( 14 ); subRound1( 15 );
X    subRound1( 16 ); subRound1( 17 ); subRound1( 18 ); subRound1( 19 );
X    subRound2( 20 ); subRound2( 21 ); subRound2( 22 ); subRound2( 23 );
X    subRound2( 24 ); subRound2( 25 ); subRound2( 26 ); subRound2( 27 );
X    subRound2( 28 ); subRound2( 29 ); subRound2( 30 ); subRound2( 31 );
X    subRound2( 32 ); subRound2( 33 ); subRound2( 34 ); subRound2( 35 );
X    subRound2( 36 ); subRound2( 37 ); subRound2( 38 ); subRound2( 39 );
X    subRound3( 40 ); subRound3( 41 ); subRound3( 42 ); subRound3( 43 );
X    subRound3( 44 ); subRound3( 45 ); subRound3( 46 ); subRound3( 47 );
X    subRound3( 48 ); subRound3( 49 ); subRound3( 50 ); subRound3( 51 );
X    subRound3( 52 ); subRound3( 53 ); subRound3( 54 ); subRound3( 55 );
X    subRound3( 56 ); subRound3( 57 ); subRound3( 58 ); subRound3( 59 );
X    subRound4( 60 ); subRound4( 61 ); subRound4( 62 ); subRound4( 63 );
X    subRound4( 64 ); subRound4( 65 ); subRound4( 66 ); subRound4( 67 );
X    subRound4( 68 ); subRound4( 69 ); subRound4( 70 ); subRound4( 71 );
X    subRound4( 72 ); subRound4( 73 ); subRound4( 74 ); subRound4( 75 );
X    subRound4( 76 ); subRound4( 77 ); subRound4( 78 ); subRound4( 79 );
X
X    /* Step E.  Build message digest */
X    shsInfo->digest[ 0 ] += A;
X    shsInfo->digest[ 1 ] += B;
X    shsInfo->digest[ 2 ] += C;
X    shsInfo->digest[ 3 ] += D;
X    shsInfo->digest[ 4 ] += E;
X    }
X
X#ifdef LITTLE_ENDIAN
X
X/* When run on a little-endian CPU we need to perform byte reversal on an
X   array of longwords.  It is possible to make the code endianness-
X   independant by fiddling around with data at the byte level, but this
X   makes for very slow code, so we rely on the user to sort out endianness
X   at compile time */
X
Xstatic void byteReverse(buffer, byteCount)
X    LONG *buffer;
X    int byteCount;
X    {
X    LONG value;
X    int count;
X
X    byteCount /= sizeof( LONG );
X    for( count = 0; count < byteCount; count++ )
X	{
X	value = ( buffer[ count ] << 16 ) | ( buffer[ count ] >> 16 );
X	buffer[ count ] = ( ( value & 0xFF00FF00L ) >> 8 ) | ( ( value & 0x00FF00FFL ) << 8 );
X	}
X    }
X#endif /* LITTLE_ENDIAN */
X
X/* Update SHS for a block of data.  This code assumes that the buffer size
X   is a multiple of SHS_BLOCKSIZE bytes long, which makes the code a lot
X   more efficient since it does away with the need to handle partial blocks
X   between calls to shsUpdate() */
X
Xvoid shsUpdate(shsInfo, buffer, count)
X    SHS_INFO *shsInfo;
X    BYTE *buffer; 
X    int count;
X    {
X    /* Update bitcount */
X    if( ( shsInfo->countLo + ( ( LONG ) count << 3 ) ) < shsInfo->countLo )
X	shsInfo->countHi++; /* Carry from low to high bitCount */
X    shsInfo->countLo += ( ( LONG ) count << 3 );
X    shsInfo->countHi += ( ( LONG ) count >> 29 );
X
X    /* Process data in SHS_BLOCKSIZE chunks */
X    while( count >= SHS_BLOCKSIZE )
X	{
X	memcpy( (char *) shsInfo->data, (char *) buffer, SHS_BLOCKSIZE );
X#ifdef LITTLE_ENDIAN
X	byteReverse( shsInfo->data, SHS_BLOCKSIZE );
X#endif /* LITTLE_ENDIAN */
X	shsTransform( shsInfo );
X	buffer += SHS_BLOCKSIZE;
X	count -= SHS_BLOCKSIZE;
X	}
X
X    /* Handle any remaining bytes of data.  This should only happen once
X       on the final lot of data */
X    memcpy( (char *) shsInfo->data, (char *) buffer, count );
X    }
X
Xvoid shsFinal(shsInfo)
X    SHS_INFO *shsInfo;
X    {
X    int count;
X    LONG lowBitcount = shsInfo->countLo, highBitcount = shsInfo->countHi;
X
X    /* Compute number of bytes mod 64 */
X    count = ( int ) ( ( shsInfo->countLo >> 3 ) & 0x3F );
X
X    /* Set the first char of padding to 0x80.  This is safe since there is
X       always at least one byte free */
X    ( ( BYTE * ) shsInfo->data )[ count++ ] = 0x80;
X
X    /* Pad out to 56 mod 64 */
X    if( count > 56 )
X	{
X	/* Two lots of padding:  Pad the first block to 64 bytes */
X	memset( ( char * ) shsInfo->data + count, 0, 64 - count );
X#ifdef LITTLE_ENDIAN
X	byteReverse( shsInfo->data, SHS_BLOCKSIZE );
X#endif /* LITTLE_ENDIAN */
X	shsTransform( shsInfo );
X
X	/* Now fill the next block with 56 bytes */
X	memset( (char *) shsInfo->data, 0, 56 );
X	}
X    else
X	/* Pad block to 56 bytes */
X	memset( ( char * ) shsInfo->data + count, 0, 56 - count );
X#ifdef LITTLE_ENDIAN
X    byteReverse( shsInfo->data, SHS_BLOCKSIZE );
X#endif /* LITTLE_ENDIAN */
X
X    /* Append length in bits and transform */
X    shsInfo->data[ 14 ] = highBitcount;
X    shsInfo->data[ 15 ] = lowBitcount;
X
X    shsTransform( shsInfo );
X#ifdef LITTLE_ENDIAN
X    byteReverse( shsInfo->data, SHS_DIGESTSIZE );
X#endif /* LITTLE_ENDIAN */
X    }
X
X#ifdef TEST
X
X/* ----------------------------- SHS Test code --------------------------- */
X
X/* Size of buffer for SHS speed test data */
X
X#define TEST_BLOCK_SIZE     ( SHS_DIGESTSIZE * 100 )
X
X/* Number of bytes of test data to process */
X
X#define TEST_BYTES          10000000L
X#define TEST_BLOCKS         ( TEST_BYTES / TEST_BLOCK_SIZE )
X
Xvoid main()
X    {
X    SHS_INFO shsInfo;
X    time_t endTime, startTime;
X    BYTE data[ TEST_BLOCK_SIZE ];
X    long i;
X
X    /* Test output data (this is the only test data given in the SHS
X       document, but chances are if it works for this it'll work for
X       anything) */
X    shsInit( &shsInfo );
X    shsUpdate( &shsInfo, ( BYTE * ) "abc", 3 );
X    shsFinal( &shsInfo );
X    if( shsInfo.digest[ 0 ] != 0x0164B8A9L ||
X	shsInfo.digest[ 1 ] != 0x14CD2A5EL ||
X	shsInfo.digest[ 2 ] != 0x74C4F7FFL ||
X	shsInfo.digest[ 3 ] != 0x082C4D97L ||
X	shsInfo.digest[ 4 ] != 0xF1EDF880L )
X	{
X	puts( "Error in SHS implementation" );
X	exit( -1 );
X	}
X
X    /* Now perform time trial, generating MD for 10MB of data.  First,
X       initialize the test data */
X    memset( data, 0, TEST_BLOCK_SIZE );
X
X    /* Get start time */
X    printf( "SHS time trial.  Processing %ld characters...\n", TEST_BYTES );
X    time( &startTime );
X
X    /* Calculate SHS message digest in TEST_BLOCK_SIZE byte blocks */
X    shsInit( &shsInfo );
X    for( i = TEST_BLOCKS; i > 0; i-- )
X	shsUpdate( &shsInfo, data, TEST_BLOCK_SIZE );
X    shsFinal( &shsInfo );
X
X    /* Get finish time and time difference */
X    time( &endTime );
X    printf( "Seconds to process test input: %ld\n", endTime - startTime );
X    printf( "Characters processed per second: %ld\n", TEST_BYTES / ( endTime - startTime ) );
X    }
X
X#endif
END_OF_FILE
if test 11410 -ne `wc -c <'tripwire-1.1/sigs/sha/sha.c'`; then
    echo shar: \"'tripwire-1.1/sigs/sha/sha.c'\" unpacked with wrong size!
fi
# end of 'tripwire-1.1/sigs/sha/sha.c'
fi
if test -f 'tripwire-1.1/aux/ntohl.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tripwire-1.1/aux/ntohl.h'\"
else
echo shar: Extracting \"'tripwire-1.1/aux/ntohl.h'\" \(743 characters\)
sed "s/^X//" >'tripwire-1.1/aux/ntohl.h' <<'END_OF_FILE'
X#if BYTEORDER == 0x4321
X
X#define ntohl(x)
X#define htonl(x)
X#else
X#if ((BYTEORDER - 0x1111) & 0x444) || !(BYTEORDER & 0xf)
X#define ntohl(x)    fatal("Unknown BYTEORDER\n")
X#define htonl(x)    fatal("Unknown BYTEORDER\n")
X#else
X#define BYTEREVERSE(x)  {register unsigned char __t, \
X		*__c = (unsigned char *) &(x); \
X	__t = __c[3]; __c[3] = *__c; *__c++ = __t; \
X	__t = *__c; *__c = __c[1]; *++__c = __t; }
X#define ntohl(x) BYTEREVERSE(x)
X#define htonl(x) BYTEREVERSE(x)
X#endif
X#endif
X
X
X/* $Id: ntohl.h,v 1.2 1993/08/19 05:26:36 genek Exp $
X
XThen, wherever you use the value, replace:
X
Xi = ntohl(j);
X -with-
Xi = j;
Xntohl(i);
X
XThe resulting code will be faster that using a subroutine,
X especially if these routines are called often.
X
X--spaf
X*/
END_OF_FILE
if test 743 -ne `wc -c <'tripwire-1.1/aux/ntohl.h'`; then
    echo shar: \"'tripwire-1.1/aux/ntohl.h'\" unpacked with wrong size!
fi
# end of 'tripwire-1.1/aux/ntohl.h'
fi
echo shar: End of archive 13 \(of 25\).
cp /dev/null ark13isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 25 archives.
    echo "Now read tripwire-1.1/README.kits"
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
