Newsgroups: comp.sources.unix
From: screen@uni-erlangen.de (Juergen & Michael)
Subject: v27i016: screen-3.5.1 - full-screen window manager/multiplexor, Part03/10
References: <1.744844979.5722@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: screen@uni-erlangen.de (Juergen & Michael)
Posting-Number: Volume 27, Issue 16
Archive-Name: screen-3.5.1/part03

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 3 (of 10)."
# Contents:  COPYING attacher.c configure.in fileio.c tty.sh utmp.c
# Wrapped by vixie@gw.home.vix.com on Sun Aug  8 14:19:00 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'COPYING' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'COPYING'\"
else
echo shar: Extracting \"'COPYING'\" \(17982 characters\)
sed "s/^X//" >'COPYING' <<'END_OF_FILE'
X		    GNU GENERAL PUBLIC LICENSE
X		       Version 2, June 1991
X
X Copyright (C) 1989, 1991 Free Software Foundation, Inc.
X                          675 Mass Ave, Cambridge, MA 02139, USA
X Everyone is permitted to copy and distribute verbatim copies
X of this license document, but changing it is not allowed.
X
X			    Preamble
X
X  The licenses for most software are designed to take away your
Xfreedom to share and change it.  By contrast, the GNU General Public
XLicense is intended to guarantee your freedom to share and change free
Xsoftware--to make sure the software is free for all its users.  This
XGeneral Public License applies to most of the Free Software
XFoundation's software and to any other program whose authors commit to
Xusing it.  (Some other Free Software Foundation software is covered by
Xthe GNU Library General Public License instead.)  You can apply it to
Xyour programs, too.
X
X  When we speak of free software, we are referring to freedom, not
Xprice.  Our General Public Licenses are designed to make sure that you
Xhave the freedom to distribute copies of free software (and charge for
Xthis service if you wish), that you receive source code or can get it
Xif you want it, that you can change the software or use pieces of it
Xin new free programs; and that you know you can do these things.
X
X  To protect your rights, we need to make restrictions that forbid
Xanyone to deny you these rights or to ask you to surrender the rights.
XThese restrictions translate to certain responsibilities for you if you
Xdistribute copies of the software, or if you modify it.
X
X  For example, if you distribute copies of such a program, whether
Xgratis or for a fee, you must give the recipients all the rights that
Xyou have.  You must make sure that they, too, receive or can get the
Xsource code.  And you must show them these terms so they know their
Xrights.
X
X  We protect your rights with two steps: (1) copyright the software, and
X(2) offer you this license which gives you legal permission to copy,
Xdistribute and/or modify the software.
X
X  Also, for each author's protection and ours, we want to make certain
Xthat everyone understands that there is no warranty for this free
Xsoftware.  If the software is modified by someone else and passed on, we
Xwant its recipients to know that what they have is not the original, so
Xthat any problems introduced by others will not reflect on the original
Xauthors' reputations.
X
X  Finally, any free program is threatened constantly by software
Xpatents.  We wish to avoid the danger that redistributors of a free
Xprogram will individually obtain patent licenses, in effect making the
Xprogram proprietary.  To prevent this, we have made it clear that any
Xpatent must be licensed for everyone's free use or not licensed at all.
X
X  The precise terms and conditions for copying, distribution and
Xmodification follow.
X
X		    GNU GENERAL PUBLIC LICENSE
X   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
X
X  0. This License applies to any program or other work which contains
Xa notice placed by the copyright holder saying it may be distributed
Xunder the terms of this General Public License.  The "Program", below,
Xrefers to any such program or work, and a "work based on the Program"
Xmeans either the Program or any derivative work under copyright law:
Xthat is to say, a work containing the Program or a portion of it,
Xeither verbatim or with modifications and/or translated into another
Xlanguage.  (Hereinafter, translation is included without limitation in
Xthe term "modification".)  Each licensee is addressed as "you".
X
XActivities other than copying, distribution and modification are not
Xcovered by this License; they are outside its scope.  The act of
Xrunning the Program is not restricted, and the output from the Program
Xis covered only if its contents constitute a work based on the
XProgram (independent of having been made by running the Program).
XWhether that is true depends on what the Program does.
X
X  1. You may copy and distribute verbatim copies of the Program's
Xsource code as you receive it, in any medium, provided that you
Xconspicuously and appropriately publish on each copy an appropriate
Xcopyright notice and disclaimer of warranty; keep intact all the
Xnotices that refer to this License and to the absence of any warranty;
Xand give any other recipients of the Program a copy of this License
Xalong with the Program.
X
XYou may charge a fee for the physical act of transferring a copy, and
Xyou may at your option offer warranty protection in exchange for a fee.
X
X  2. You may modify your copy or copies of the Program or any portion
Xof it, thus forming a work based on the Program, and copy and
Xdistribute such modifications or work under the terms of Section 1
Xabove, provided that you also meet all of these conditions:
X
X    a) You must cause the modified files to carry prominent notices
X    stating that you changed the files and the date of any change.
X
X    b) You must cause any work that you distribute or publish, that in
X    whole or in part contains or is derived from the Program or any
X    part thereof, to be licensed as a whole at no charge to all third
X    parties under the terms of this License.
X
X    c) If the modified program normally reads commands interactively
X    when run, you must cause it, when started running for such
X    interactive use in the most ordinary way, to print or display an
X    announcement including an appropriate copyright notice and a
X    notice that there is no warranty (or else, saying that you provide
X    a warranty) and that users may redistribute the program under
X    these conditions, and telling the user how to view a copy of this
X    License.  (Exception: if the Program itself is interactive but
X    does not normally print such an announcement, your work based on
X    the Program is not required to print an announcement.)
X
XThese requirements apply to the modified work as a whole.  If
Xidentifiable sections of that work are not derived from the Program,
Xand can be reasonably considered independent and separate works in
Xthemselves, then this License, and its terms, do not apply to those
Xsections when you distribute them as separate works.  But when you
Xdistribute the same sections as part of a whole which is a work based
Xon the Program, the distribution of the whole must be on the terms of
Xthis License, whose permissions for other licensees extend to the
Xentire whole, and thus to each and every part regardless of who wrote it.
X
XThus, it is not the intent of this section to claim rights or contest
Xyour rights to work written entirely by you; rather, the intent is to
Xexercise the right to control the distribution of derivative or
Xcollective works based on the Program.
X
XIn addition, mere aggregation of another work not based on the Program
Xwith the Program (or with a work based on the Program) on a volume of
Xa storage or distribution medium does not bring the other work under
Xthe scope of this License.
X
X  3. You may copy and distribute the Program (or a work based on it,
Xunder Section 2) in object code or executable form under the terms of
XSections 1 and 2 above provided that you also do one of the following:
X
X    a) Accompany it with the complete corresponding machine-readable
X    source code, which must be distributed under the terms of Sections
X    1 and 2 above on a medium customarily used for software interchange; or,
X
X    b) Accompany it with a written offer, valid for at least three
X    years, to give any third party, for a charge no more than your
X    cost of physically performing source distribution, a complete
X    machine-readable copy of the corresponding source code, to be
X    distributed under the terms of Sections 1 and 2 above on a medium
X    customarily used for software interchange; or,
X
X    c) Accompany it with the information you received as to the offer
X    to distribute corresponding source code.  (This alternative is
X    allowed only for noncommercial distribution and only if you
X    received the program in object code or executable form with such
X    an offer, in accord with Subsection b above.)
X
XThe source code for a work means the preferred form of the work for
Xmaking modifications to it.  For an executable work, complete source
Xcode means all the source code for all modules it contains, plus any
Xassociated interface definition files, plus the scripts used to
Xcontrol compilation and installation of the executable.  However, as a
Xspecial exception, the source code distributed need not include
Xanything that is normally distributed (in either source or binary
Xform) with the major components (compiler, kernel, and so on) of the
Xoperating system on which the executable runs, unless that component
Xitself accompanies the executable.
X
XIf distribution of executable or object code is made by offering
Xaccess to copy from a designated place, then offering equivalent
Xaccess to copy the source code from the same place counts as
Xdistribution of the source code, even though third parties are not
Xcompelled to copy the source along with the object code.
X
X  4. You may not copy, modify, sublicense, or distribute the Program
Xexcept as expressly provided under this License.  Any attempt
Xotherwise to copy, modify, sublicense or distribute the Program is
Xvoid, and will automatically terminate your rights under this License.
XHowever, parties who have received copies, or rights, from you under
Xthis License will not have their licenses terminated so long as such
Xparties remain in full compliance.
X
X  5. You are not required to accept this License, since you have not
Xsigned it.  However, nothing else grants you permission to modify or
Xdistribute the Program or its derivative works.  These actions are
Xprohibited by law if you do not accept this License.  Therefore, by
Xmodifying or distributing the Program (or any work based on the
XProgram), you indicate your acceptance of this License to do so, and
Xall its terms and conditions for copying, distributing or modifying
Xthe Program or works based on it.
X
X  6. Each time you redistribute the Program (or any work based on the
XProgram), the recipient automatically receives a license from the
Xoriginal licensor to copy, distribute or modify the Program subject to
Xthese terms and conditions.  You may not impose any further
Xrestrictions on the recipients' exercise of the rights granted herein.
XYou are not responsible for enforcing compliance by third parties to
Xthis License.
X
X  7. If, as a consequence of a court judgment or allegation of patent
Xinfringement or for any other reason (not limited to patent issues),
Xconditions are imposed on you (whether by court order, agreement or
Xotherwise) that contradict the conditions of this License, they do not
Xexcuse you from the conditions of this License.  If you cannot
Xdistribute so as to satisfy simultaneously your obligations under this
XLicense and any other pertinent obligations, then as a consequence you
Xmay not distribute the Program at all.  For example, if a patent
Xlicense would not permit royalty-free redistribution of the Program by
Xall those who receive copies directly or indirectly through you, then
Xthe only way you could satisfy both it and this License would be to
Xrefrain entirely from distribution of the Program.
X
XIf any portion of this section is held invalid or unenforceable under
Xany particular circumstance, the balance of the section is intended to
Xapply and the section as a whole is intended to apply in other
Xcircumstances.
X
XIt is not the purpose of this section to induce you to infringe any
Xpatents or other property right claims or to contest validity of any
Xsuch claims; this section has the sole purpose of protecting the
Xintegrity of the free software distribution system, which is
Ximplemented by public license practices.  Many people have made
Xgenerous contributions to the wide range of software distributed
Xthrough that system in reliance on consistent application of that
Xsystem; it is up to the author/donor to decide if he or she is willing
Xto distribute software through any other system and a licensee cannot
Ximpose that choice.
X
XThis section is intended to make thoroughly clear what is believed to
Xbe a consequence of the rest of this License.
X
X  8. If the distribution and/or use of the Program is restricted in
Xcertain countries either by patents or by copyrighted interfaces, the
Xoriginal copyright holder who places the Program under this License
Xmay add an explicit geographical distribution limitation excluding
Xthose countries, so that distribution is permitted only in or among
Xcountries not thus excluded.  In such case, this License incorporates
Xthe limitation as if written in the body of this License.
X
X  9. The Free Software Foundation may publish revised and/or new versions
Xof the General Public License from time to time.  Such new versions will
Xbe similar in spirit to the present version, but may differ in detail to
Xaddress new problems or concerns.
X
XEach version is given a distinguishing version number.  If the Program
Xspecifies a version number of this License which applies to it and "any
Xlater version", you have the option of following the terms and conditions
Xeither of that version or of any later version published by the Free
XSoftware Foundation.  If the Program does not specify a version number of
Xthis License, you may choose any version ever published by the Free Software
XFoundation.
X
X  10. If you wish to incorporate parts of the Program into other free
Xprograms whose distribution conditions are different, write to the author
Xto ask for permission.  For software which is copyrighted by the Free
XSoftware Foundation, write to the Free Software Foundation; we sometimes
Xmake exceptions for this.  Our decision will be guided by the two goals
Xof preserving the free status of all derivatives of our free software and
Xof promoting the sharing and reuse of software generally.
X
X			    NO WARRANTY
X
X  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
XFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
XOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
XPROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
XOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
XMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
XTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
XPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
XREPAIR OR CORRECTION.
X
X  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
XWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
XREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
XINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
XOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
XTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
XYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
XPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
XPOSSIBILITY OF SUCH DAMAGES.
X
X		     END OF TERMS AND CONDITIONS
X
X	Appendix: How to Apply These Terms to Your New Programs
X
X  If you develop a new program, and you want it to be of the greatest
Xpossible use to the public, the best way to achieve this is to make it
Xfree software which everyone can redistribute and change under these terms.
X
X  To do so, attach the following notices to the program.  It is safest
Xto attach them to the start of each source file to most effectively
Xconvey the exclusion of warranty; and each file should have at least
Xthe "copyright" line and a pointer to where the full notice is found.
X
X    <one line to give the program's name and a brief idea of what it does.>
X    Copyright (C) 19yy  <name of author>
X
X    This program is free software; you can redistribute it and/or modify
X    it under the terms of the GNU General Public License as published by
X    the Free Software Foundation; either version 2 of the License, or
X    (at your option) any later version.
X
X    This program is distributed in the hope that it will be useful,
X    but WITHOUT ANY WARRANTY; without even the implied warranty of
X    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X    GNU General Public License for more details.
X
X    You should have received a copy of the GNU General Public License
X    along with this program; if not, write to the Free Software
X    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
XAlso add information on how to contact you by electronic and paper mail.
X
XIf the program is interactive, make it output a short notice like this
Xwhen it starts in an interactive mode:
X
X    Gnomovision version 69, Copyright (C) 19yy name of author
X    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
X    This is free software, and you are welcome to redistribute it
X    under certain conditions; type `show c' for details.
X
XThe hypothetical commands `show w' and `show c' should show the appropriate
Xparts of the General Public License.  Of course, the commands you use may
Xbe called something other than `show w' and `show c'; they could even be
Xmouse-clicks or menu items--whatever suits your program.
X
XYou should also get your employer (if you work as a programmer) or your
Xschool, if any, to sign a "copyright disclaimer" for the program, if
Xnecessary.  Here is a sample; alter the names:
X
X  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
X  `Gnomovision' (which makes passes at compilers) written by James Hacker.
X
X  <signature of Ty Coon>, 1 April 1989
X  Ty Coon, President of Vice
X
XThis General Public License does not permit incorporating your program into
Xproprietary programs.  If your program is a subroutine library, you may
Xconsider it more useful to permit linking proprietary applications with the
Xlibrary.  If this is what you want to do, use the GNU Library General
XPublic License instead of this License.
END_OF_FILE
if test 17982 -ne `wc -c <'COPYING'`; then
    echo shar: \"'COPYING'\" unpacked with wrong size!
fi
# end of 'COPYING'
fi
if test -f 'attacher.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'attacher.c'\"
else
echo shar: Extracting \"'attacher.c'\" \(18776 characters\)
sed "s/^X//" >'attacher.c' <<'END_OF_FILE'
X/* Copyright (c) 1993
X *      Juergen Weigert (jnweiger@immd4.informatik.uni-erlangen.de)
X *      Michael Schroeder (mlschroe@immd4.informatik.uni-erlangen.de)
X * Copyright (c) 1987 Oliver Laumann
X *
X * This program is free software; you can redistribute it and/or modify
X * it under the terms of the GNU General Public License as published by
X * the Free Software Foundation; either version 2, or (at your option)
X * any later version.
X *
X * This program is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X * GNU General Public License for more details.
X *
X * You should have received a copy of the GNU General Public License
X * along with this program (see the file COPYING); if not, write to the
X * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X ****************************************************************
X */
X
X#include "rcs.h"
XRCS_ID("$Id: attacher.c,v 1.5 1993/08/03 22:22:37 jnweiger Exp $ FAU")
X
X#include <sys/types.h>
X#include <sys/stat.h>
X#include <fcntl.h>
X#include <signal.h>
X#include <pwd.h>
X#include "config.h"
X#include "screen.h"
X#include "extern.h"
X
X#ifdef SHADOWPW
X# include <shadow.h>
X#endif /* SHADOWPW */
X
Xstatic sig_t AttacherSigInt __P(SIGPROTOARG);
X#ifdef PASSWORD
Xstatic void  trysend __P((int, struct msg *, char *));
X#endif
X#if defined(SIGWINCH) && defined(TIOCGWINSZ)
Xstatic sig_t AttacherWinch __P(SIGPROTOARG);
X#endif
X#ifdef LOCK
Xstatic sig_t DoLock __P(SIGPROTOARG);
Xstatic void  LockTerminal __P((void));
Xstatic sig_t LockHup __P(SIGPROTOARG);
Xstatic void  screen_builtin_lck __P((void));
X#endif
X#ifdef DEBUG
Xstatic sig_t AttacherChld __P(SIGPROTOARG);
X#endif
X
Xextern int real_uid, real_gid, eff_uid, eff_gid;
Xextern char *SockName, *SockNamePtr, SockPath[];
Xextern struct passwd *ppp;
Xextern char *attach_tty, *attach_term, *LoginName;
Xextern int xflag, dflag, rflag, quietflag, adaptflag;
Xextern struct mode attach_Mode;
Xextern int MasterPid;
Xextern int nethackflag;
X
X#ifdef MULTIUSER
Xextern char *multi;
Xextern int multiattach, multi_uid, own_uid;
Xextern int tty_mode, tty_oldmode;
X# ifdef NOREUID
Xstatic int multipipe[2];
X# endif
X#endif
X
X
X
X/*
X *  Send message to a screen backend.
X *  returns 1 if we could attach one, or 0 if none.
X */
X
Xint
XAttach(how)
Xint how;
X{
X  int lasts;
X  struct msg m;
X  struct stat st;
X  char *s;
X
X  debug2("Attach: how=%d, tty=%s\n", how, attach_tty);
X#ifdef MULTIUSER
X# ifdef NOREUID
X  while ((how == MSG_ATTACH || how == MSG_CONT) && multiattach)
X    {
X      int ret;
X
X      if (pipe(multipipe))
X	Panic(errno, "pipe");
X      eff_uid = -1;	/* make UserContext fork */
X      real_uid = multi_uid;
X      if ((ret = UserContext()) <= 0)
X	{
X	  char dummy;
X          eff_uid = 0;
X	  real_uid = own_uid;
X	  if (ret < 0)
X	    Panic(errno, "UserContext");
X	  close(multipipe[1]);
X	  read(multipipe[0], &dummy, 1);
X	  if (tty_oldmode >= 0)
X	    {
X	      chmod(attach_tty, tty_oldmode);
X	      tty_oldmode = -1;
X	    }
X	  ret = UserStatus();
X#ifdef LOCK
X	  if (ret == SIG_LOCK)
X	    LockTerminal();
X	  else
X#endif
X#ifdef SIGTSTP
X	  if (ret == SIG_STOP)
X	    kill(getpid(), SIGTSTP);
X	  else
X#endif
X	  if (ret == SIG_POWER_BYE)
X	    {
X	      int ppid;
X	      setuid(real_uid);
X	      setgid(real_gid);
X	      if ((ppid = getppid()) > 1)
X		Kill(ppid, SIGHUP);
X	      exit(0);
X	    }
X	  else
X            exit(ret);
X	  dflag = 0;
X#ifdef MULTI
X	  xflag = 1;
X#endif
X	  how = MSG_ATTACH;
X	  continue;
X	}
X      close(multipipe[0]);
X      eff_uid  = real_uid;
X      break;
X    }
X# else /* NOREUID */
X  if ((how == MSG_ATTACH || how == MSG_CONT) && multiattach)
X    {
X      real_uid = multi_uid;
X      eff_uid  = own_uid;
X      setreuid(real_uid, eff_uid);
X      if (chmod(attach_tty, 0666))
X	Panic(errno, "chmod %s", attach_tty);
X      tty_oldmode = tty_mode;
X    }
X# endif /* NOREUID */
X#endif /* MULTIUSER */
X
X  bzero((char *) &m, sizeof(m));
X  m.type = how;
X  strcpy(m.m_tty, attach_tty);
X
X  if (how == MSG_WINCH)
X    {
X      if ((lasts = MakeClientSocket(0, SockName)) >= 0)
X	{
X          write(lasts, (char *)&m, sizeof(m));
X          close(lasts);
X	}
X      return 0;
X    }
X
X  if (how == MSG_CONT)
X    {
X      if ((lasts = MakeClientSocket(0, SockName)) < 0)
X        {
X          Panic(0, "Sorry, cannot contact session \"%s\" again\r\n",
X                 SockName ? SockName : "<NULL>");
X        }
X    }
X  else
X    {
X      switch (FindSocket(how, &lasts))
X	{
X	case 0:
X	  if (rflag == 2)
X	    return 0;
X	  if (quietflag)
X	    eexit(10);
X	  Panic(0, SockName && *SockName ? "There is no screen to be %sed matching %s." : "There is no screen to be %sed.",
X		xflag ? "attach" :
X		dflag ? "detach" :
X                        "resum", SockName);
X	  /* NOTREACHED */
X	case 1:
X	  break;
X	default:
X	  Panic(0, "Type \"screen [-d] -r [pid.]tty.host\" to resume one of them.");
X	  /* NOTREACHED */
X	}
X    }
X  /*
X   * Go in UserContext. Advantage is, you can kill your attacher
X   * when things go wrong. Any disadvantages? jw.
X   * Do this before the attach to prevent races!
X   */
X#ifdef MULTIUSER
X  if (!multiattach)
X#endif
X    setuid(real_uid);
X#if defined(MULTIUSER) && !defined(NOREUID)
X  else
X    setreuid(eff_uid, real_uid);
X#endif
X  setgid(real_gid);
X
X  debug2("Attach: uid %d euid %d\n", getuid(), geteuid());
X  SockName = SockNamePtr;
X  MasterPid = 0;
X  while (*SockName)
X    {
X      if (*SockName > '9' || *SockName < '0')
X	break;
X      MasterPid = 10 * MasterPid + *SockName - '0';
X      SockName++;
X    }
X  SockName = SockNamePtr;
X  debug1("Attach decided, it is '%s'\n", SockPath);
X  debug1("Attach found MasterPid == %d\n", MasterPid);
X  if (stat(SockPath, &st) == -1)
X    Panic(errno, "stat %s", SockPath);
X  if ((st.st_mode & 0600) != 0600)
X    Panic(0, "Socket is in wrong mode (%03o)", st.st_mode);
X  if ((dflag || !xflag) && (st.st_mode & 0700) != (dflag ? 0700 : 0600))
X    Panic(0, "That screen is %sdetached.", dflag ? "already " : "not ");
X#ifdef REMOTE_DETACH
X  if (dflag &&
X      (how == MSG_ATTACH || how == MSG_DETACH || how == MSG_POW_DETACH))
X    {
X      m.m.detach.dpid = getpid();
X      strncpy(m.m.detach.duser, LoginName, sizeof(m.m.detach.duser) - 1); 
X      m.m.detach.duser[sizeof(m.m.detach.duser) - 1] = 0;
X# ifdef POW_DETACH
X      if (dflag == 2)
X	m.type = MSG_POW_DETACH;
X      else
X# endif
X	m.type = MSG_DETACH;
X      if (write(lasts, (char *) &m, sizeof(m)) != sizeof(m))
X	Panic(errno, "write");
X      close(lasts);
X      if (how != MSG_ATTACH)
X	return 0;	/* we detached it. jw. */
X      sleep(1);	/* we dont want to overrun our poor backend. jw. */
X      if ((lasts = MakeClientSocket(0, SockName)) == -1)
X	Panic(0, "Cannot contact screen again. Shit.");
X      m.type = how;
X    }
X#endif
X  strcpy(m.m.attach.envterm, attach_term);
X  debug1("attach: sending %d bytes... ", sizeof m);
X
X  strncpy(m.m.attach.auser, LoginName, sizeof(m.m.attach.auser) - 1); 
X  m.m.attach.auser[sizeof(m.m.attach.auser) - 1] = 0;
X  m.m.attach.apid = getpid();
X  m.m.attach.adaptflag = adaptflag;
X  m.m.attach.lines = m.m.attach.columns = 0;
X  if ((s = getenv("LINES")))
X    m.m.attach.lines = atoi(s);
X  if ((s = getenv("COLUMNS")))
X    m.m.attach.columns = atoi(s);
X
X#ifdef PASSWORD
X  if (how == MSG_ATTACH || how == MSG_CONT)
X    trysend(lasts, &m, m.m.attach.password);
X  else
X#endif
X    {
X      if (write(lasts, (char *) &m, sizeof(m)) != sizeof(m))
X	Panic(errno, "write");
X      close(lasts);
X    }
X  debug1("Attach(%d): sent\n", m.type);
X#ifdef MULTIUSER
X  if (multi && (how == MSG_ATTACH || how == MSG_CONT))
X    {
X# ifndef PASSWORD
X      pause();
X# endif
X# ifdef NOREUID
X      close(multipipe[1]);
X# else
X      setreuid(real_uid, eff_uid);
X      if (tty_oldmode >= 0)
X        if (chmod(attach_tty, tty_oldmode))
X          Panic(errno, "chmod %s", attach_tty);
X      tty_oldmode = -1;
X      setreuid(eff_uid, real_uid);
X# endif
X    }
X#endif
X  rflag = 0;
X  return 1;
X}
X
X
X#ifdef PASSWORD
X
Xstatic trysendstatok, trysendstatfail;
X
Xstatic sig_t
Xtrysendok(SIGDEFARG)
X{
X  trysendstatok = 1;
X}
X
Xstatic sig_t
Xtrysendfail(SIGDEFARG)
X{
X# ifdef SYSVSIGS
X  signal(SIG_PW_FAIL, trysendfail);
X# endif /* SYSVSIGS */
X  trysendstatfail = 1;
X}
X
Xstatic char screenpw[9];
X
Xstatic void
Xtrysend(fd, m, pwto)
Xint fd;
Xstruct msg *m;
Xchar *pwto;
X{
X  char *npw = NULL;
X  sig_t (*sighup)__P(SIGPROTOARG);
X  sig_t (*sigusr1)__P(SIGPROTOARG);
X  int tries;
X
X  sigusr1 = signal(SIG_PW_OK, trysendok);
X  sighup = signal(SIG_PW_FAIL, trysendfail);
X  for (tries = 0; ; )
X    {
X      strcpy(pwto, screenpw);
X      trysendstatok = trysendstatfail = 0;
X      if (write(fd, (char *) m, sizeof(*m)) != sizeof(*m))
X	Panic(errno, "write");
X      close(fd);
X      while (trysendstatok == 0 && trysendstatfail == 0)
X	pause();
X      if (trysendstatok)
X	{
X	  signal(SIG_PW_OK, sigusr1);
X	  signal(SIG_PW_FAIL, sighup);
X	  if (trysendstatfail)
X	    kill(getpid(), SIG_PW_FAIL);
X	  return;
X	}
X      if (++tries > 1 || (npw = getpass("Screen Password:")) == 0 || *npw == 0)
X	{
X#ifdef NETHACK
X	  if (nethackflag)
X	    Panic(0, "The guard slams the door in your face.");
X	  else
X#endif
X	  Panic(0, "Password incorrect.");
X	}
X      strncpy(screenpw, npw, 8);
X      if ((fd = MakeClientSocket(0, SockName)) == -1)
X	Panic(0, "Cannot contact screen again. Shit.");
X    }
X}
X#endif /* PASSWORD */
X
X
X#ifdef DEBUG
Xstatic int AttacherPanic;
X
Xstatic sig_t
XAttacherChld(SIGDEFARG)
X{
X  AttacherPanic=1;
X#ifndef SIGVOID
X  return((sig_t) 0);
X#endif
X}
X#endif
X
X/*
X * the frontend's Interrupt handler
X * we forward SIGINT to the poor backend
X */
Xstatic sig_t 
XAttacherSigInt(SIGDEFARG)
X{
X  signal(SIGINT, AttacherSigInt);
X  Kill(MasterPid, SIGINT);
X# ifndef SIGVOID
X  return (sig_t) 0;
X# endif
X}
X
X/*
X * Unfortunatelly this is also the SIGHUP handler, so we have to
X * check, if the backend is already detached.
X */
X
Xsig_t
XAttacherFinit(SIGDEFARG)
X{
X  struct stat statb;
X  struct msg m;
X  int s;
X
X  debug("AttacherFinit();\n");
X  signal(SIGHUP, SIG_IGN);
X  /* Check if signal comes from backend */
X  if (SockName)
X    {
X      strcpy(SockNamePtr, SockName);
X      if (stat(SockPath, &statb) == 0 && (statb.st_mode & 0777) != 0600)
X	{
X	  debug("Detaching backend!\n");
X	  bzero((char *) &m, sizeof(m));
X	  strcpy(m.m_tty, attach_tty);
X          debug1("attach_tty is %s\n", attach_tty);
X	  m.m.detach.dpid = getpid();
X	  m.type = MSG_HANGUP;
X	  if ((s = MakeClientSocket(0, SockName)) >= 0)
X	    {
X	      write(s, (char *)&m, sizeof(m));
X	      close(s);
X	    }
X	}
X    }
X#ifdef MULTIUSER
X  if (tty_oldmode >= 0)
X    {
X      setuid(own_uid);
X      chmod(attach_tty, tty_oldmode);
X    }
X#endif
X  exit(0);
X#ifndef SIGVOID
X  return((sig_t) 0);
X#endif
X}
X
X#ifdef POW_DETACH
Xstatic sig_t
XAttacherFinitBye(SIGDEFARG)
X{
X  int ppid;
X  debug("AttacherFintBye()\n");
X#if defined(MULTIUSER) && defined(NOREUID)
X  if (multiattach)
X    exit(SIG_POWER_BYE);
X#endif
X#ifdef MULTIUSER
X  setuid(own_uid);
X#else
X  setuid(real_uid);
X#endif
X  setgid(real_gid);
X  /* we don't want to disturb init (even if we were root), eh? jw */
X  if ((ppid = getppid()) > 1)
X    Kill(ppid, SIGHUP);		/* carefully say good bye. jw. */
X  exit(0);
X#ifndef SIGVOID
X  return((sig_t) 0);
X#endif
X}
X#endif
X
Xstatic int SuspendPlease;
X
Xstatic sig_t
XSigStop(SIGDEFARG)
X{
X  debug("SigStop()\n");
X  SuspendPlease = 1;
X#ifndef SIGVOID
X  return((sig_t) 0);
X#endif
X}
X
X#ifdef LOCK
Xstatic int LockPlease;
X
Xstatic sig_t
XDoLock(SIGDEFARG)
X{
X# ifdef SYSVSIGS
X  signal(SIG_LOCK, DoLock);
X# endif
X  debug("DoLock()\n");
X  LockPlease = 1;
X# ifndef SIGVOID
X  return((sig_t) 0);
X# endif
X}
X#endif
X
X#if defined(SIGWINCH) && defined(TIOCGWINSZ)
Xstatic int SigWinchPlease;
X
Xstatic sig_t
XAttacherWinch(SIGDEFARG)
X{
X  debug("AttacherWinch()\n");
X  SigWinchPlease = 1;
X# ifndef SIGVOID
X  return((sig_t) 0);
X# endif
X}
X#endif
X
X
X/*
X *  Attacher loop - no return
X */
X
Xvoid
XAttacher()
X{
X  signal(SIGHUP, AttacherFinit);
X  signal(SIG_BYE, AttacherFinit);
X#ifdef POW_DETACH
X  signal(SIG_POWER_BYE, AttacherFinitBye);
X#endif
X#ifdef LOCK
X  signal(SIG_LOCK, DoLock);
X#endif
X  signal(SIGINT, AttacherSigInt);
X#ifdef BSDJOBS
X  signal(SIG_STOP, SigStop);
X#endif
X#if defined(SIGWINCH) && defined(TIOCGWINSZ)
X  signal(SIGWINCH, AttacherWinch);
X#endif
X#ifdef DEBUG
X  signal(SIGCHLD, AttacherChld);
X#endif
X  debug("attacher: going for a nap.\n");
X  dflag = 0;
X#ifdef MULTI
X  xflag = 1;
X#endif
X  for (;;)
X    {
X#ifdef DEBUG
X      sleep(30);
X      if (kill(MasterPid, 0) < 0 && errno != EPERM)
X        {
X	  debug1("attacher: Panic! MasterPid %d does not exist.\n", MasterPid);
X	  AttacherPanic++;
X	}
X#else
X      pause();
X#endif
X/*
X      debug("attacher: ding!\n");
X*/
X#ifdef DEBUG
X      if (AttacherPanic)
X        {
X	  fcntl(0, F_SETFL, 0);
X	  SetTTY(0, &attach_Mode);
X	  printf("\nSuddenly the Dungeon collapses!! - You die...\n");
X	  eexit(1);
X        }
X#endif
X#ifdef BSDJOBS
X      if (SuspendPlease)
X	{
X	  SuspendPlease = 0;
X#if defined(MULTIUSER) && defined(NOREUID)
X	  if (multiattach)
X	    exit(SIG_STOP);
X#endif
X	  signal(SIGTSTP, SIG_DFL);
X	  debug("attacher: killing myself SIGTSTP\n");
X	  kill(getpid(), SIGTSTP);
X	  debug("attacher: continuing from stop\n");
X	  signal(SIG_STOP, SigStop);
X	  (void) Attach(MSG_CONT);
X	}
X#endif
X#ifdef LOCK
X      if (LockPlease)
X	{
X	  LockPlease = 0;
X#if defined(MULTIUSER) && defined(NOREUID)
X	  if (multiattach)
X	    exit(SIG_LOCK);
X#endif
X	  LockTerminal();
X# ifdef SYSVSIGS
X	  signal(SIG_LOCK, DoLock);
X# endif
X	  (void) Attach(MSG_CONT);
X	}
X#endif	/* LOCK */
X#if defined(SIGWINCH) && defined(TIOCGWINSZ)
X      if (SigWinchPlease)
X	{
X	  SigWinchPlease = 0;
X# ifdef SYSVSIGS
X	  signal(SIGWINCH, AttacherWinch);
X# endif
X	  (void) Attach(MSG_WINCH);
X	}
X#endif	/* SIGWINCH */
X    }
X}
X
X#ifdef LOCK
X
X/* ADDED by Rainer Pruy 10/15/87 */
X/* POLISHED by mls. 03/10/91 */
X
Xstatic char LockEnd[] = "Welcome back to screen !!\n";
X
Xstatic sig_t
XLockHup(SIGDEFARG)
X{
X  int ppid = getppid();
X  setuid(real_uid);
X  setgid(real_gid);
X  if (ppid > 1)
X    Kill(ppid, SIGHUP);
X  exit(0);
X}
X
Xstatic void
XLockTerminal()
X{
X  char *prg;
X  int sig, pid;
X  sig_t (*sigs[NSIG])__P(SIGPROTOARG);
X
X  for (sig = 1; sig < NSIG; sig++)
X    {
X      sigs[sig] = signal(sig, SIG_IGN);
X    }
X  signal(SIGHUP, LockHup);
X  printf("\n");
X
X  prg = getenv("LOCKPRG");
X  if (prg && strcmp(prg, "builtin") && !access(prg, X_OK))
X    {
X      signal(SIGCHLD, SIG_DFL);
X      debug1("lockterminal: '%s' seems executable, execl it!\n", prg);
X      if ((pid = fork()) == 0)
X        {
X          /* Child */
X          setuid(real_uid);	/* this should be done already */
X          setgid(real_gid);
X          closeallfiles(0);	/* important: /etc/shadow may be open */
X          execl(prg, "SCREEN-LOCK", NULL);
X          exit(errno);
X        }
X      if (pid == -1)
X        {
X#ifdef NETHACK
X          if (nethackflag)
X            Msg(errno, "Cannot fork terminal - lock failed");
X          else
X#endif
X          Msg(errno, "Cannot lock terminal - fork failed");
X        }
X      else
X        {
X#ifdef BSDWAIT
X          union wait wstat;
X#else
X          int wstat;
X#endif
X          int wret;
X
X#ifdef hpux
X          signal(SIGCHLD, SIG_DFL);
X#endif
X          errno = 0;
X          while (((wret = wait(&wstat)) != pid) ||
X	         ((wret == -1) && (errno == EINTR))
X	         )
X	    errno = 0;
X    
X          if (errno)
X	    {
X	      Msg(errno, "Lock");
X	      sleep(2);
X	    }
X	  else if (WTERMSIG(wstat) != 0)
X	    {
X	      fprintf(stderr, "Lock: %s: Killed by signal: %d%s\n", prg,
X		      WTERMSIG(wstat), WIFCORESIG(wstat) ? " (Core dumped)" : "");
X	      sleep(2);
X	    }
X	  else if (WEXITSTATUS(wstat))
X	    {
X	      debug2("Lock: %s: return code %d\n", prg, WEXITSTATUS(wstat));
X	    }
X          else
X	    printf(LockEnd);
X        }
X    }
X  else
X    {
X      if (prg)
X	{
X          debug1("lockterminal: '%s' seems NOT executable, we use our builtin\n", prg);
X	}
X      else
X	{
X	  debug("lockterminal: using buitin.\n");
X	}
X      screen_builtin_lck();
X    }
X  /* reset signals */
X  for (sig = 1; sig < NSIG; sig++)
X    {
X      if (sigs[sig] != (sig_t(*)__P(SIGPROTOARG)) -1)
X	signal(sig, sigs[sig]);
X    }
X}				/* LockTerminal */
X
X/* -- original copyright by Luigi Cannelloni 1985 (luigi@faui70.UUCP) -- */
Xstatic void
Xscreen_builtin_lck()
X{
X  char fullname[100], *cp1, message[BUFSIZ];
X  char c, *pass, mypass[9];
X#ifdef SHADOWPW
X  struct spwd *sss = NULL;
X#endif
X  int t;
X
X#ifdef undef
X  /* get password entry */
X  if ((ppp = getpwuid(real_uid)) == NULL)
X    {
X      fprintf(stderr, "screen_builtin_lck: No passwd entry.\007\n");
X      sleep(2);
X      return;
X    }
X  if (!isatty(0))
X    {
X      fprintf(stderr, "screen_builtin_lck: Not a tty.\007\n");
X      sleep(2);
X      return;
X    }
X#endif
X  pass = ppp->pw_passwd;
X#ifdef SHADOWPW
Xrealpw:
X#endif /* SHADOWPW */
X  for (t = 0; t < 13; t++)
X    {
X      c = pass[t];
X      if (!(c == '.' || c == '/' ||
X            (c >= '0' && c <= '9') || 
X            (c >= 'a' && c <= 'z') || 
X            (c >= 'A' && c <= 'Z'))) 
X        break;
X    }
X  if (t < 13)
X    {
X      debug("builtin_lock: ppp->pw_passwd bad, has it a shadow?\n");
X#ifdef SHADOWPW
X      setspent(); /* rewind shadow file */
X      if ((sss == NULL) && (sss = getspnam(ppp->pw_name)))
X        {
X          pass = sss->sp_pwdp;
X          goto realpw;
X        }
X#endif /* SHADOWPW */
X      if ((pass = getpass("Key:   ")))
X        {
X          strncpy(mypass, pass, 8);
X          mypass[8] = 0;
X          if (*mypass == 0)
X            return;
X          if ((pass = getpass("Again: ")))
X            {
X              if (strcmp(mypass, pass))
X                {
X                  fprintf(stderr, "Passwords don't match.\007\n");
X                  sleep(2);
X                  return;
X                }
X            }
X        }
X      if (pass == 0)
X        {
X          fprintf(stderr, "Getpass error.\007\n");
X          sleep(2);
X          return;
X        }
X      pass = 0;
X    }
X
X  debug("screen_builtin_lck looking in gcos field\n");
X  strcpy(fullname, ppp->pw_gecos);
X  if ((cp1 = index(fullname, ',')) != NULL)
X    *cp1 = '\0';
X  if ((cp1 = index(fullname, '&')) != NULL)
X    {
X      sprintf(cp1, "%s", ppp->pw_name);
X      if (*cp1 >= 'a' && *cp1 <= 'z')
X	*cp1 -= 'a' - 'A';
X    }
X
X  sprintf(message, "Screen used by %s <%s>.\nPassword:\007",
X          fullname, ppp->pw_name);
X
X  /* loop here to wait for correct password */
X  for (;;)
X    {
X      debug("screen_builtin_lck awaiting password\n");
X      errno = 0;
X      if ((cp1 = getpass(message)) == NULL)
X        {
X          AttacherFinit(SIGARG);
X          /* NOTREACHED */
X        }
X      debug3("getpass(%d): %x == %s\n", errno, (unsigned int)cp1, cp1);
X      if (pass)
X        {
X          if (!strcmp(crypt(cp1, pass), pass))
X            break;
X        }
X      else
X        {
X          if (!strcmp(cp1, mypass))
X            break;
X        }
X      debug("screen_builtin_lck: NO!!!!!\n");
X    }
X  debug("password ok.\n");
X}
X
X#endif	/* LOCK */
END_OF_FILE
if test 18776 -ne `wc -c <'attacher.c'`; then
    echo shar: \"'attacher.c'\" unpacked with wrong size!
fi
# end of 'attacher.c'
fi
if test -f 'configure.in' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'configure.in'\"
else
echo shar: Extracting \"'configure.in'\" \(18694 characters\)
sed "s/^X//" >'configure.in' <<'END_OF_FILE'
Xdnl Process this file with autoconf to produce a configure script.
Xdnl
Xdnl $Id: configure.in,v 1.8 1993/08/05 14:23:43 mlschroe Exp $ FAU
Xdnl
Xdnl Many thanks to David MacKenzie for writing autoconf and
Xdnl providing a sample configure.in file for screen.
Xdnl
XAC_INIT(screen.c)
XAC_CONFIG_HEADER(config.h)
X
Xdnl
Xdnl Define some useful macros
Xdnl
Xdefine(AC_PROGRAM_SOURCE,
X[AC_REQUIRE([AC_PROG_CPP])AC_PROVIDE([$0])cat > conftest.c <<EOF
X[$1]
X_CUT_HERE_
X[$2]
XEOF
Xeval "$CPP $DEFS conftest.c 2>/dev/null | sed -e '1,/_CUT_HERE_/d' > conftest.out"
X. ./conftest.out
Xrm -f conftest*
X])dnl
X
Xrev=`sed < ${srcdir}/patchlevel.h -n -e '/#define REV/s/#define REV  *//p'`
Xvers=`sed < ${srcdir}/patchlevel.h -n -e '/#define VERS/s/#define VERS  *//p'`
Xpat=`sed < ${srcdir}/patchlevel.h -n -e '/#define PATCHLEVEL/s/#define PATCHLEVEL  *//p'`
XVERSION="$rev.$vers.$pat"
Xecho "this is screen version $VERSION"
XAC_SUBST(VERSION)
X
XAC_PROG_CC
XAC_PROG_CPP
XAC_GCC_TRADITIONAL
XAC_ISC_POSIX
X
X
XAC_TEST_PROGRAM(main(){exit(0);},,echo "Can't run the compiler - sorry";exit)
XAC_PROG_AWK
X
XAC_PROG_INSTALL
X
Xdnl
Xdnl    ****  special unix variants  ****
Xdnl
Xif test -n "$ISC"; then
X  AC_DEFINE(ISC) LIBS="$LIBS -linet"
Xfi
X
Xecho checking for OSF1
Xif test -f /bin/uname ; then
Xif test `/bin/uname` = OSF1 || test -f /osf_boot; then
XAC_DEFINE(OSF1)	# this disables MIPS again....
Xfi
Xfi
X
Xecho checking for MIPS
Xif test -f /lib/libmld.a || test -f /usr/lib/libmld.a || test -f /usr/lib/cmplrs/cc/libmld.a; then
XLIBS="$LIBS -lmld" # for nlist.
Xif test -c /dev/ptc; then
XAC_DEFINE(MIPS)
XAC_COMPILE_CHECK(wait3, , [wait3();], ,
XAC_COMPILE_CHECK(wait2, , [wait2();],
Xdnl John Rouillard (rouilj@sni-usa.com):
Xdnl need -I/usr/include/bsd in RISCOS otherwise sockets are broken, no
Xdnl job control etc.
Xdnl Detect RISCOS if wait2 is present, but not wait3.
XAC_DEFINE(USE_WAIT2) LIBS="$LIBS -lbsd" ; CC="$CC -I/usr/include/bsd"
X))
Xfi
Xfi
X
Xecho checking for Ultrix
XAC_PROGRAM_EGREP(yes,
X[#if defined(ultrix) || defined(__ultrix)
X  yes
X#endif
X], ULTRIX=1)
X
Xdnl ghazi@caip.rutgers.edu (Kaveh R. Ghazi):
Xdnl BBN butterfly is not POSIX, but a MACH BSD system.
Xdnl Do not define POSIX and TERMIO.
Xecho checking for butterfly
XAC_PROGRAM_EGREP(yes,
X[#if defined(butterfly)
X  yes
X#endif
X], butterfly=1)
X
Xif test -z "$butterfly"; then
Xif test -n "$ULTRIX"; then
X  test -z "$GCC" && CC="$CC -YBSD"
Xfi
Xecho checking for POSIX.1
XAC_PROGRAM_EGREP(yes,
X[#include <sys/types.h>
X#include <unistd.h>
Xmain () {
X#ifdef _POSIX_VERSION
X  yes
X#endif
X], echo "- you have a POSIX system";AC_DEFINE(POSIX))
Xfi
X
XAC_COMPILE_CHECK([System V],
X[#include <sys/types.h>
X#include <signal.h>
X#include <fcntl.h>], [int x = SIGCHLD | FNDELAY;], , AC_DEFINE(SYSV))
X
Xecho checking for sequent/ptx
XAC_PROGRAM_EGREP(yes,
X[#ifdef _SEQUENT_
X  yes
X#endif
X], LIBS="$LIBS -lsocket -linet";seqptx=1)
X
Xoldlibs="$LIBS"
XLIBS="$LIBS -lelf"
XAC_COMPILE_CHECK(SVR4,,,
XAC_HEADER_CHECK(dwarf.h, AC_DEFINE(SVR4) AC_DEFINE(BUGGYGETLOGIN) LIBS="$LIBS -lelf",
XAC_HEADER_CHECK(elf.h, AC_DEFINE(SVR4) AC_DEFINE(BUGGYGETLOGIN) LIBS="$LIBS -lelf"))
X,LIBS="$oldlibs")
X
X
Xdnl
Xdnl    ****  typedefs ****
Xdnl
Xecho checking for pid_t
XAC_PROGRAM_EGREP(pid_t,[#include <sys/types.h>
X],AC_DEFINE(PID_T_DEFINED))
X
Xecho checking for sig_t
XAC_PROGRAM_EGREP(sig_t,[#include <sys/types.h>
X#include <signal.h>
X],AC_DEFINE(SIG_T_DEFINED))
X
Xecho checking for uid_t
XAC_PROGRAM_EGREP(uid_t,[#include <sys/types.h>
X],AC_DEFINE(UID_T_DEFINED))
X
Xdnl
Xdnl   ****     Job control     ****
Xdnl
X
XAC_COMPILE_CHECK([BSD job control], 
X[#include <sys/types.h>
X#include <sys/ioctl.h>
X], [
X#ifdef POSIX
Xtcsetpgrp(0, 0);
X#else
Xint x = TIOCSPGRP;
X#ifdef SYSV
Xsetpgrp();
X#else
Xint y = TIOCNOTTY;
X#endif
X#endif
X], echo "- you have jobcontrol" AC_DEFINE(BSDJOBS), echo "- you don't have jobcontrol")
X
Xdnl
Xdnl    ****  setreuid()  ****
Xdnl
XAC_COMPILE_CHECK(setreuid, , 
X[
X#ifdef hpux
Xsetresuid(0, 0, 0);
X#else
Xsetreuid(0, 0);
X#endif
X], , AC_DEFINE(NOREUID))
X
X
Xdnl    ****  select()  ****
Xdnl
X
XAC_COMPILE_CHECK(select,,[select(0, 0, 0, 0, 0);],, 
XLIBS="$LIBS -lnet -lnsl"
XAC_COMPILE_CHECK(select with $LIBS,,[select(0, 0, 0, 0, 0);],, 
Xecho '!!! no select - no screen';exit)
X)
Xdnl
Xdnl    ****  FIFO tests  ****
Xdnl
X
Xecho checking fifos
XAC_TEST_PROGRAM([
X#include <sys/types.h>
X#include <sys/stat.h>
X#include <fcntl.h>
X
X#ifndef O_NDELAY
X#define O_NDELAY O_NONBLOCK
X#endif
X#ifndef S_IFIFO
X#define S_IFIFO 0010000
X#endif
X
Xchar *fin = "/tmp/conftest$$";
X
Xmain()
X{
X  struct stat stb;
X  int f;
X
X  (void)alarm(5);
X  if (mknod(fin, S_IFIFO|0777, 0))
X    exit(1);
X  if (stat(fin, &stb) || (stb.st_mode & S_IFIFO) != S_IFIFO)
X    exit(1);
X  close(0);
X  if (open(fin, O_RDWR | O_NDELAY))
X    exit(1);
X  if (write(0, "TEST", 4) == -1)
X    exit(1);
X  f = 1;
X  if (select(1, &f, 0, 0, 0) == -1)
X    exit(1);
X  exit(0);
X}
X], echo "- your fifos are usable"; fifo=1, echo "- your fifos are not usable")
Xrm -f /tmp/conftest*
X
Xif test -n "$fifo"; then
Xecho "checking for broken fifo implementation"
XAC_TEST_PROGRAM([
X#include <sys/types.h>
X#include <fcntl.h>
X#include <sys/time.h>
X#include <sys/stat.h>
X
X#ifndef O_NDELAY
X#define O_NDELAY O_NONBLOCK
X#endif
X#ifndef S_IFIFO
X#define S_IFIFO 0010000
X#endif
X
Xchar *fin = "/tmp/conftest$$";
X
Xmain()
X{
X  struct timeval tv;
X  int r, x;
X
X  if (mknod(fin, S_IFIFO|0600, 0))
X    exit(1);
X  close(0);
X  if (open(fin, O_RDONLY|O_NDELAY))
X    exit(1);
X  r = 1;
X  tv.tv_sec = 1;
X  tv.tv_usec = 0;
X  if (select(1, &r, 0, 0, &tv))
X    exit(1);
X  exit(0);
X}
X], echo "- your implementation is ok", 
Xecho "- you have a broken implementation" AC_DEFINE(BROKEN_PIPE) fifobr=1)
Xrm -f /tmp/conftest*
Xfi
X
Xdnl
Xdnl    ****  SOCKET tests  ****
Xdnl 
Xdnl 	may need  	LIBS="$LIBS -lsocket" 	here
Xdnl
X
Xecho checking sockets
XAC_TEST_PROGRAM([
X#include <sys/types.h>
X#include <sys/socket.h>
X#include <sys/un.h>
X#include <fcntl.h>
X
X#ifndef O_NDELAY
X#define O_NDELAY O_NONBLOCK
X#endif
X#ifndef FNDELAY
X#define FNDELAY O_NDELAY
X#endif
X
Xchar *son = "/tmp/conftest$$";
X
Xmain()
X{
X  int s1, s2, s3, l;
X  struct sockaddr_un a;
X
X  (void)alarm(5);
X  if ((s1 = socket(AF_UNIX, SOCK_STREAM, 0)) == -1)
X    exit(1);
X  a.sun_family = AF_UNIX;
X  strcpy(a.sun_path, son);
X  (void) unlink(son);
X  if (bind(s1, (struct sockaddr *) &a, strlen(son)+2) == -1)
X    exit(1);
X  if (listen(s1, 2))
X    exit(1);
X  if (fork() == 0)
X    {
X      if ((s2 = socket(AF_UNIX, SOCK_STREAM, 0)) == -1)
X	kill(getppid(), 3);
X      (void)connect(s2, (struct sockaddr *)&a, strlen(son) + 2);
X      if (write(s2, "HELLO", 5) == -1)
X	kill(getppid(), 3);
X      exit(0);
X    }
X  l = sizeof(a);
X  close(0);
X  if (accept(s1, &a, &l))
X    exit(1);
X  l = 1;
X  if (select(1, &l, 0, 0, 0) == -1)
X    exit(1);
X  exit(0);
X}
X], echo "- your sockets are usable"; sock=1, echo "- your sockets are not usable")
Xrm -f /tmp/conftest*
X
Xif test -n "$sock"; then
Xecho "checking socket implementation"
XAC_TEST_PROGRAM([
X#include <sys/types.h>
X#include <sys/stat.h>
X#include <sys/socket.h>
X#include <sys/un.h>
X
Xchar *son = "/tmp/conftest$$";
X
Xmain()
X{
X  int s;
X  struct stat stb;
X  struct sockaddr_un a;
X  if ((s = socket(AF_UNIX, SOCK_STREAM, 0)) == -1)
X    exit(0);
X  a.sun_family = AF_UNIX;
X  strcpy(a.sun_path, son);
X  (void) unlink(son);
X  if (bind(s, (struct sockaddr *) &a, strlen(son)+2) == -1)
X    exit(0);
X  if (stat(son, &stb))
X    exit(1);
X  close(s);
X  exit(0);
X}
X],echo "- you are normal",
Xecho "- unix domain sockets are not kept in the filesystem"
XAC_DEFINE(SOCK_NOT_IN_FS) socknofs=1)
Xrm -f /tmp/conftest*
Xfi
X
X
Xdnl
Xdnl    ****  choose sockets or fifos  ****
Xdnl
Xif test -n "$fifo"; then
X  if test -n "$sock"; then
X    if test -n "$nore"; then
X      echo "- hmmm... better take the fifos"
X      AC_DEFINE(NAMEDPIPE)
X    elif test -n "$fifobr"; then
X      echo "- as your fifos are broken lets use the sockets."
X    else
X      echo "- both sockets and fifos usable. let's take fifos."
X      AC_DEFINE(NAMEDPIPE)
X    fi
X  else
X    echo "- using named pipes, of course"
X    AC_DEFINE(NAMEDPIPE)
X  fi
Xelif test -n "$sock"; then
X  echo "- using unix-domain sockets, of course"
Xelse
X  echo "!!! you have neither usable sockets nor usable pipes -> no screen"
X  exit
Xfi
X
Xdnl
Xdnl    ****  check the select implementation ****
Xdnl
X
Xecho "checking select return value"
XAC_TEST_PROGRAM([
X#include <sys/types.h>
X#include <sys/stat.h>
X#include <fcntl.h>
X
Xchar *nam = "/tmp/conftest$$";
X
X#ifdef NAMEDPIPE
X
X#ifndef O_NDELAY
X#define O_NDELAY O_NONBLOCK
X#endif
X#ifndef S_IFIFO
X#define S_IFIFO 0010000
X#endif
X
X
Xmain()
X{
X  int l;
X
X  (void)alarm(5);
X  if (mknod(nam, S_IFIFO|0777, 0))
X    exit(1);
X  close(0);
X  if (open(nam, O_RDWR | O_NDELAY))
X    exit(1);
X  if (write(0, "TEST", 4) == -1)
X    exit(1);
X
X#else
X
X#include <sys/types.h>
X#include <sys/socket.h>
X#include <sys/un.h>
X
Xmain()
X{
X  int s1, s2, s3, l;
X  struct sockaddr_un a;
X
X  (void)alarm(5);
X  if ((s1 = socket(AF_UNIX, SOCK_STREAM, 0)) == -1)
X    exit(1);
X  a.sun_family = AF_UNIX;
X  strcpy(a.sun_path, nam);
X  (void) unlink(nam);
X  if (bind(s1, (struct sockaddr *) &a, strlen(nam)+2) == -1)
X    exit(1);
X  if (listen(s1, 2))
X    exit(1);
X  if (fork() == 0)
X    {
X      if ((s2 = socket(AF_UNIX, SOCK_STREAM, 0)) == -1)
X	kill(getppid(), 3);
X      (void)connect(s2, (struct sockaddr *)&a, strlen(nam) + 2);
X      if (write(s2, "HELLO", 5) == -1)
X	kill(getppid(), 3);
X      exit(0);
X    }
X  l = sizeof(a);
X  close(0);
X  if (accept(s1, (struct sockaddr *)&a, &l))
X    exit(1);
X#endif
X
X
X  l = 1;
X  if (select(1, &l, 0, 0, 0) == -1)
X    exit(1);
X  if (select(1, &l, &l, 0, 0) != 2)
X    exit(1);
X  exit(0);
X}
X],echo "- select is ok",echo "- it is not usable"
XAC_DEFINE(SELECT_BROKEN))
X
Xdnl
Xdnl    ****  termcap or terminfo  ****
Xdnl
Xecho searching for tgetent
Xolibs="$LIBS"
XLIBS="-ltermcap $LIBS"
XAC_COMPILE_CHECK(libtermcap,,tgetent((char *)0, (char *)0);,,
XLIBS="-lcurses $olibs"
XAC_COMPILE_CHECK(libcurses,,tgetent((char *)0, (char *)0);,,
Xecho "!!! no tgetent - no screen";exit)
X)
XTERMCAP="xx|scrdumm:xx:"
XTERM=scrdumm
Xexport TERMCAP
Xexport TERM
XAC_TEST_PROGRAM([
Xmain()
X{
X  char buf[1024];
X  if (tgetent(buf, "scrdumm") != 1)
X    exit(1);
X  exit(0);
X}], echo "- you use the termcap database", echo "- you use the terminfo database"
XAC_DEFINE(TERMINFO))
XAC_COMPILE_CHECK(ospeed,extern short ospeed;,ospeed=5;,,AC_DEFINE(NEED_OSPEED))
X
Xdnl
Xdnl    ****  PTY ranges  ****
Xdnl
Xecho checking for ptyranges
Xif test -d /dev/ptym ; then
Xpdir='/dev/ptym'
Xelse
Xpdir='/dev'
Xfi
Xptys=`echo $pdir/pty??`
Xif test "$ptys" != "$pdir/pty??" ; then
Xp0=`echo $ptys | tr ' ' '\012' | sed -e 's/^.*\(.\).$/\1/g' | tr ' ' '\012' | sort -u | sed -n -e H -e g -e 's/\n//g' -e '$p'`
Xp1=`echo $ptys | tr ' ' '\012' | sed -e 's/^.*\(.\)$/\1/g' | tr ' ' '\012' | sort -u | sed -n -e H -e g -e 's/\n//g' -e '$p'`
XAC_DEFINE_UNQUOTED(PTYRANGE0,\"$p0\")
XAC_DEFINE_UNQUOTED(PTYRANGE1,\"$p1\")
Xfi
X
X
Xdnl
Xdnl    ****  utmp handling  ****
Xdnl
Xdnl linux has a void pututline, grrr, gcc will error when evaluating it.
XAC_COMPILE_CHECK(getutent, [#include <time.h> /* to get time_t on SCO */
X#include <sys/types.h>
X#ifdef SVR4
X#include <utmpx.h>
X#else
X#include <utmp.h>
X#endif
X#ifdef hpux
X#define pututline _pututline
X#endif
X],
X[int x = DEAD_PROCESS; struct utmp *y = pututline((struct utmp *)0); getutent();], AC_DEFINE(GETUTENT))
XAC_COMPILE_CHECK(ut_host, [#include <time.h>
X#include <sys/types.h>
X#ifdef SVR4
X#include <utmpx.h>
X#else
X#include <utmp.h>
X#endif
X],[struct utmp u; u.ut_host[0] = 0;], AC_DEFINE(UTHOST))
X
X
Xdnl
Xdnl    ****  loadav  ****
Xdnl
Xecho "checking for libutil(s)"
Xtest -f /usr/lib/libutils.a && LIBS="$LIBS -lutils"
Xtest -f /usr/lib/libutil.a && LIBS="$LIBS -lutil"
X
XAC_COMPILE_CHECK(getloadavg, , [getloadavg((double *)0, 0);],
XAC_DEFINE(LOADAV_GETLOADAVG) load=1)
Xif test -z "$load" ; then
XAC_PROGRAM_EGREP(yes,
X[#if defined(NeXT) || defined(apollo) || defined(linux)
X  yes
X#endif
X], load=1)
Xfi
Xif test -z "$load" ; then
Xecho "searching for kernelfile"
Xfor core in /unix /vmunix /dynix /hp-ux /xelos /386bsd /kernel/unix ; do
X  if test -f $core ; then
X    break
X  fi
Xdone
Xif test ! -f $core ; then
X  echo "- no kernelfile found"
Xelse
X  echo "- using kernelfile '$core'"
X  AC_DEFINE_UNQUOTED(LOADAV_UNIX,\"$core\")
X  AC_HEADER_CHECK(nlist.h,
X    [AC_DEFINE(NLIST_STRUCT)
X     AC_COMPILE_CHECK(n_un in struct nlist, [#include <nlist.h>],
X       [struct nlist n; n.n_un.n_name = 0;],
X        AC_DEFINE(NLIST_NAME_UNION))])
X
X  echo checking for nlist declaration
X  AC_PROGRAM_EGREP([nlist( |	|\()],[
X#ifdef NLIST_STRUCT
X# include <nlist.h>
X#else
X# include <a.out.h>
X#endif
X],AC_DEFINE(NLIST_DECLARED))
X
X  echo searching for avenrun symbol
X  for av in avenrun _avenrun _Loadavg ; do
X  AC_TEST_PROGRAM([
X#include <sys/types.h>
X#ifdef NLIST_STRUCT
X#include <nlist.h>
X#else
X#include <a.out.h>
X#endif
X
Xstruct nlist nl[2];
X
Xmain()
X{
X#ifdef NLIST_NAME_UNION
X  nl[0].n_un.n_name = "$av";
X#else
X  nl[0].n_name = "$av";
X#endif
X  nlist(LOADAV_UNIX, nl);
X  if (nl[0].n_value == 0)
X    exit(1);
X  exit(0);
X}
X  ],avensym=$av;break)
X  done
X  if test -z "$avensym" ; then
X    echo "- no avenrun symbol found"
X  else
X    echo "- using avenrun symbol '$avensym'"
X    AC_DEFINE_UNQUOTED(LOADAV_AVENRUN,\"$avensym\")
X    load=1
X  fi
Xfi
Xfi
X
XAC_PROGRAM_SOURCE([
X#include <sys/types.h>
X#include <sys/param.h>
X],[
X#if ((defined(hp300) && !defined(hpux)) || defined(sun) || (defined(ultrix) && defined(mips)) || defined(_SEQUENT_) || defined(sgi) || defined(SVR4) || defined(sony_news) || defined(__alpha))
Xloadtype=long
X# ifdef apollo
Xloadscale=65536
X# else
X#  ifdef FSCALE
X#   undef FSCALE
Xloadscale=FSCALE
X#  else
X#   ifdef sgi
Xloadscale=1024
X#   else
X#    if defined(MIPS) || defined(SVR4)
Xloadscale=256
X#    else /* not MIPS */
Xloadscale=1000 	/* our default value */
X#    endif /* MIPS */
X#   endif /* sgi */
X#  endif /* not FSCALE */
X# endif /* not apollo */
X#else
Xloadtype=double
Xloadscale=1
X#endif
X#ifdef alliant
Xloadnum=4
X#else
Xloadnum=3
X#endif
X])
X
Xif test -n "$load" ; then AC_DEFINE(LOADAV) fi
Xif test -n "$loadtype" ; then AC_DEFINE_UNQUOTED(LOADAV_TYPE,$loadtype) fi
Xif test -n "$loadnum" ; then AC_DEFINE_UNQUOTED(LOADAV_NUM,$loadnum) fi
Xif test -n "$loadscale" ; then AC_DEFINE_UNQUOTED(LOADAV_SCALE,$loadscale) fi
X
X
Xdnl
Xdnl    ****  signal handling  ****
Xdnl
XAC_HEADER_EGREP([(void|sighandler_t).*signal], signal.h, 
X  AC_DEFINE(SIGVOID))
XAC_COMPILE_CHECK(sigset, [
X#include <sys/types.h>
X#include <signal.h>
X], [
X#ifdef SIGVOID
Xsigset(0, (void (*)())0);
X#else
Xsigset(0, (int (*)())0);
X#endif
X], AC_DEFINE(USESIGSET))
Xecho checking signal implementation
XAC_TEST_PROGRAM([
X#include <sys/types.h>
X#include <signal.h>
X
X#ifndef SIGCHLD
X#define SIGCHLD SIGCLD
X#endif
X#ifdef USESIGSET
X#define signal sigset
X#endif
X
Xint got;
X
X#ifdef SIGVOID
Xvoid
X#endif
Xhand()
X{
X  got++;
X}
X
Xmain()
X{
X  (void)signal(SIGCHLD, hand);
X  kill(getpid(), SIGCHLD);
X  kill(getpid(), SIGCHLD);
X  if (got < 2)
X    exit(1);
X  exit(0);
X}
X],,AC_DEFINE(SYSVSIGS))
X
Xdnl
Xdnl    ****  libraries  ****
Xdnl
X
Xecho checking for crypt and sec libraries
Xtest -f /lib/libcrypt_d.a || test -f /usr/lib/libcrypt_d.a && LIBS="$LIBS -lcrypt_d"
Xtest -f /lib/libcrypt.a || test -f /usr/lib/libcrypt.a && LIBS="$LIBS -lcrypt"
Xtest -f /lib/libsec.a || test -f /usr/lib/libsec.a && LIBS="$LIBS -lsec"
X
Xoldlibs="$LIBS"
XLIBS="$LIBS -lsun"
XAC_COMPILE_CHECK(IRIX sun library,,,,LIBS="$oldlibs")
X
X
Xdnl
Xdnl    ****  misc things  ****
Xdnl
XAC_COMPILE_CHECK(wait union,[#include <sys/types.h>
X#include <sys/wait.h>
X],[
X  union wait x;
X  int y;
X#ifdef WEXITSTATUS
X  y = WEXITSTATUS(x);
X#endif
X],AC_DEFINE(BSDWAIT))
X
Xif test -z "$butterfly"; then
Xecho checking for termio or termios
XAC_TEST_CPP([#include <termios.h>], AC_DEFINE(TERMIO),
X            AC_TEST_CPP([#include <termio.h>], AC_DEFINE(TERMIO)))
Xfi
X
Xdnl AC_HEADER_CHECK(shadow.h, AC_DEFINE(SHADOWPW))
XAC_COMPILE_CHECK(getspnam, [#include <shadow.h>], [getspnam("x");],
X		 AC_DEFINE(SHADOWPW))
X
XAC_COMPILE_CHECK(getttyent, , [getttyent();], AC_DEFINE(GETTTYENT))
X
Xecho checking whether memcpy/memmove/bcopy handles overlapping arguments
XAC_TEST_PROGRAM([
Xmain() {
X  char buf[10];
X  strcpy(buf, "abcdefghi");
X  bcopy(buf, buf + 2, 3);
X  if (strncmp(buf, "ababcf", 6))
X    exit(1);
X  strcpy(buf, "abcdefghi");
X  bcopy(buf + 2, buf, 3);
X  if (strncmp(buf, "cdedef", 6))
X    exit(1);
X  exit(0); /* libc version works properly.  */
X}], AC_DEFINE(USEBCOPY))
X
XAC_TEST_PROGRAM([
X#define bcopy(s,d,l) memmove(d,s,l)
Xmain() {
X  char buf[10];
X  strcpy(buf, "abcdefghi");
X  bcopy(buf, buf + 2, 3);
X  if (strncmp(buf, "ababcf", 6))
X    exit(1);
X  strcpy(buf, "abcdefghi");
X  bcopy(buf + 2, buf, 3);
X  if (strncmp(buf, "cdedef", 6))
X    exit(1);
X  exit(0); /* libc version works properly.  */
X}], AC_DEFINE(USEMEMMOVE))
X
X
XAC_TEST_PROGRAM([
X#define bcopy(s,d,l) memcpy(d,s,l)
Xmain() {
X  char buf[10];
X  strcpy(buf, "abcdefghi");
X  bcopy(buf, buf + 2, 3);
X  if (strncmp(buf, "ababcf", 6))
X    exit(1);
X  strcpy(buf, "abcdefghi");
X  bcopy(buf + 2, buf, 3);
X  if (strncmp(buf, "cdedef", 6))
X    exit(1);
X  exit(0); /* libc version works properly.  */
X}], AC_DEFINE(USEMEMCPY))
X
Xecho checking for long file names
X(echo 1 > /tmp/conftest9012345) 2>/dev/null
X(echo 2 > /tmp/conftest9012346) 2>/dev/null
Xval=`cat /tmp/conftest9012345 2>/dev/null`
Xif test -f /tmp/conftest9012345 && test "$val" = 1; then :
Xelse AC_DEFINE(NAME_MAX, 14)
Xfi
Xrm -f /tmp/conftest*
X
XAC_COMPILE_CHECK(vsprintf, [#include <varargs.h>
X#include <stdio.h>], [vsprintf();], AC_DEFINE(USEVARARGS))
X
XAC_DIR_HEADER
XAC_XENIX_DIR
X
XAC_COMPILE_CHECK(setenv, , [setenv((char *)0,(char *)0);unsetenv((char *)0);], AC_DEFINE(USESETENV),
XAC_COMPILE_CHECK(putenv, , [putenv((char *)0);unsetenv((char *)0);], ,
XAC_DEFINE(NEEDPUTENV)
X))
X
Xdnl
Xdnl    ****  the end  ****
Xdnl
Xdnl Ptx bug workaround -- insert -lc after -ltermcap
Xtest -n "$seqptx" && LIBS="-ltermcap -lc -lsocket -linet -lsec -lseq"
X
XAC_TEST_PROGRAM(main(){exit(0);},,echo "Can't run the compiler - internal error. Sorry.";exit)
Xif test -n "$prefix"; then
XAC_DEFINE_UNQUOTED(ETCSCREENRC,\"$prefix/etc/screenrc\")
Xfi
X
XAC_OUTPUT(Makefile doc/Makefile)
X
X# a hook for preserving undef directive in config.h
Xif test -z "$no_create" ; then
Xmv config.h conftest
Xsed -e 's@^\(.*\)defin.\( .*\) .*/\*\(.*KEEP_UNDEF_HERE\)@\1undef\2	/\*\3@' < conftest > config.h
Xrm -f conftest
Xfi
Xcat >> config.status << EOF
Xmv config.h conftest
Xsed -e 's@^\(.*\)defin.\( .*\) .*/\*\(.*KEEP_UNDEF_HERE\)@\1undef\2	/\*\3@' < conftest > config.h
Xrm -f conftest
XEOF
X
Xecho ""
Xif test -z "$AWK"; then
Xecho "!!! Since you have no awk you must copy the files 'comm.h.dist'"
Xecho "!!! and 'term.h.dist' to 'comm.h' and 'term.h'."
Xecho "!!! Do _not_ change the user configuration section in config.h!"
Xecho "Please check the pathnames in the Makefile."
Xelse
Xecho "Now please check the pathnames in the Makefile and the user"
Xecho "configuration section in config.h."
Xfi
Xecho "Then type 'make' to make screen. Good luck."
Xecho ""
END_OF_FILE
if test 18694 -ne `wc -c <'configure.in'`; then
    echo shar: \"'configure.in'\" unpacked with wrong size!
fi
# end of 'configure.in'
fi
if test -f 'fileio.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'fileio.c'\"
else
echo shar: Extracting \"'fileio.c'\" \(15600 characters\)
sed "s/^X//" >'fileio.c' <<'END_OF_FILE'
X/* Copyright (c) 1993
X *      Juergen Weigert (jnweiger@immd4.informatik.uni-erlangen.de)
X *      Michael Schroeder (mlschroe@immd4.informatik.uni-erlangen.de)
X * Copyright (c) 1987 Oliver Laumann
X *
X * This program is free software; you can redistribute it and/or modify
X * it under the terms of the GNU General Public License as published by
X * the Free Software Foundation; either version 2, or (at your option)
X * any later version.
X *
X * This program is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X * GNU General Public License for more details.
X *
X * You should have received a copy of the GNU General Public License
X * along with this program (see the file COPYING); if not, write to the
X * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X ****************************************************************
X */
X
X#include "rcs.h"
XRCS_ID("$Id: fileio.c,v 1.4 1993/08/03 18:10:46 jnweiger Exp $ FAU")
X
X
X#include <sys/types.h>
X#ifndef sgi
X# include <sys/file.h>
X#endif /* sgi */
X#include <sys/stat.h>
X#include <fcntl.h>
X
X#include <signal.h>
X
X#include "config.h" 
X#include "screen.h"
X#include "extern.h"
X
X#ifdef NETHACK
Xextern nethackflag;
X#endif
X
Xextern struct display *display;
Xextern struct win *fore;
Xextern int real_uid, eff_uid;
Xextern int real_gid, eff_gid;
Xextern char *extra_incap, *extra_outcap;
Xextern char *home, *RcFileName;
Xextern char SockPath[], *SockNamePtr;
X#ifdef COPY_PASTE
Xextern char *BufferFile;
X#endif
Xextern int hardcopy_append;
Xextern char *hardcopydir;
X
Xstatic char *CatExtra __P((char *, char *));
X
X
Xstatic FILE *fp = NULL;
Xchar *rc_name;
X
Xstatic char *
XCatExtra(str1, str2)
Xregister char *str1, *str2;
X{
X  register char *cp;
X  register int len1, len2, add_colon;
X
X  len1 = strlen(str1);
X  if (len1 == 0)
X    return(str2);
X  add_colon = (str1[len1 - 1] != ':');
X  if (str2)
X    {
X      len2 = strlen(str2);
X      if ((cp = realloc(str2, (unsigned) len1 + len2 + add_colon + 1)) == NULL)
X	Panic(0, strnomem);
X      bcopy(cp, cp + len1 + add_colon, len2 + 1);
X    }
X  else
X    {
X      if (len1 == 0)
X	return 0;
X      if ((cp = malloc((unsigned) len1 + add_colon + 1)) == NULL)
X	Panic(0, strnomem);
X      cp[len1 + add_colon] = '\0'; 
X    }
X  bcopy(str1, cp, len1);
X  if (add_colon)
X    cp[len1] = ':';
X
X  return cp;
X}
X
Xstatic char *
Xfindrcfile(rcfile)
Xchar *rcfile;
X{
X  static char buf[256];
X  char *rc, *p;
X
X  if (rcfile)
X    {
X      rc = SaveStr(rcfile);
X      debug1("findrcfile: you specified '%s'\n", rcfile);
X    }
X  else
X    {
X      debug("findrcfile: you specified nothing...\n");
X      if ((p = getenv("ISCREENRC")) != NULL && *p != '\0')
X	{
X	  debug1("  ... but $ISCREENRC has: '%s'\n", p);
X	  rc = SaveStr(p);
X	}
X      else if ((p = getenv("SCREENRC")) != NULL && *p != '\0')
X	{
X	  debug1("  ... but $SCREENRC has: '%s'\n", p);
X	  rc = SaveStr(p);
X	}
X      else
X	{
X	  debug("  ...nothing in $SCREENRC, defaulting $HOME/.screenrc\n");
X	  if (strlen(home) > 244)
X	    Panic(0, "Rc: home too large");
X	  sprintf(buf, "%s/.iscreenrc", home);
X          if (access(buf, R_OK))
X	    sprintf(buf, "%s/.screenrc", home);
X	  rc = SaveStr(buf);
X	}
X    }
X  return rc;
X}
X
X/*
X * this will be called twice:
X * 1) rcfilename = "/etc/screenrc"
X * 2) rcfilename = RcFileName
X */
Xvoid
XStartRc(rcfilename)
Xchar *rcfilename;
X{
X  register int argc, len;
X  register char *p, *cp;
X  char buf[256];
X  char *args[MAXARGS];
X
X  rc_name = findrcfile(rcfilename);
X
X  if ((fp = secfopen(rc_name, "r")) == NULL)
X    {
X      if (RcFileName && strcmp(RcFileName, rc_name) == 0)
X	{
X          /*
X           * User explicitly gave us that name,
X           * this is the only case, where we get angry, if we can't read
X           * the file.
X           */
X	  debug3("StartRc: '%s','%s', '%s'\n", RcFileName, rc_name, rcfilename);
X          Panic(0, "Unable to open \"%s\".", rc_name);
X	  /* NOTREACHED */
X	}
X      debug1("StartRc: '%s' no good. ignored\n", rc_name);
X      Free(rc_name);
X      rc_name = "";
X      return;
X    }
X  while (fgets(buf, sizeof buf, fp) != NULL)
X    {
X      if ((p = rindex(buf, '\n')) != NULL)
X	*p = '\0';
X      if ((argc = Parse(buf, args)) == 0)
X	continue;
X      if (strcmp(args[0], "echo") == 0)
X	{
X	  if (!display)
X	    continue;
X	  if (argc < 2 || (argc == 3 && strcmp(args[1], "-n")) || argc > 3)
X	    {
X	      Msg(0, "%s: 'echo [-n] \"string\"' expected.", rc_name);
X	      continue;
X	    }
X	  AddStr(args[argc - 1]);
X	  if (argc != 3)
X	    {
X	      AddStr("\r\n");
X	      Flush();
X	    }
X	}
X      else if (strcmp(args[0], "sleep") == 0)
X	{
X	  if (!display)
X	    continue;
X	  debug("sleeeeeeep\n");
X	  if (argc != 2)
X	    {
X	      Msg(0, "%s: sleep: one numeric argument expected.", rc_name);
X	      continue;
X	    }
X	  DisplaySleep(atoi(args[1]));
X	}
X#ifdef TERMINFO
X      else if (strcmp(args[0], "terminfo") == 0)
X#else
X      else if (strcmp(args[0], "termcap") == 0)
X#endif
X	{
X	  if (!display)
X	    continue;
X	  if (argc < 3 || argc > 4)
X	    {
X	      Msg(0, "%s: %s: incorrect number of arguments.", rc_name, args[0]);
X	      continue;
X	    }
X	  for (p = args[1]; p && *p; p = cp)
X	    {
X	      if ((cp = index(p, '|')) != 0)
X		*cp++ = '\0';
X	      len = strlen(p);
X	      if (p[len - 1] == '*')
X		{
X		  if (!(len - 1) || !strncmp(p, d_termname, len - 1))
X		    break;
X		}
X	      else if (!strcmp(p, d_termname))
X		break;
X	    }
X	  if (!(p && *p))
X	    continue;
X	  extra_incap = CatExtra(args[2], extra_incap);
X	  if (argc == 4)
X	    extra_outcap = CatExtra(args[3], extra_outcap);
X	}
X    }
X  fclose(fp);
X  Free(rc_name);
X  rc_name = "";
X}
X
Xvoid
XFinishRc(rcfilename)
Xchar *rcfilename;
X{
X  char buf[256];
X
X  rc_name = findrcfile(rcfilename);
X
X  if ((fp = secfopen(rc_name, "r")) == NULL)
X    {
X      if (RcFileName && strcmp(RcFileName, rc_name) == 0)
X	{
X    	  /*
X 	   * User explicitly gave us that name, 
X	   * this is the only case, where we get angry, if we can't read
X	   * the file.
X	   */
X  	  debug3("FinishRc:'%s','%s','%s'\n", RcFileName, rc_name, rcfilename);
X          Panic(0, "Unable to open \"%s\".", rc_name);
X	  /* NOTREACHED */
X	}
X      debug1("FinishRc: '%s' no good. ignored\n", rc_name);
X      Free(rc_name);
X      rc_name = "";
X      return;
X    }
X
X  debug("finishrc is going...\n");
X  while (fgets(buf, sizeof buf, fp) != NULL)
X    {
X      RcLine(buf);
X    }
X  (void) fclose(fp);
X  Free(rc_name);
X  rc_name = "";
X}
X
X/*
X *	"$HOST blafoo"   	-> "localhost blafoo"
X *	"${HOST}blafoo"	  	-> "localhostblafoo"
X *	"\$HOST blafoo" 	-> "$HOST blafoo"
X *	"\\$HOST blafoo"	-> "\localhost blafoo"
X *	"'$HOST ${HOST}'"	-> "'$HOST ${HOST}'" 
X *	"'\$HOST'"       	-> "'\$HOST'"
X *	"\'$HOST' $HOST"   	-> "'localhost' $HOST"
X *
X *	"$:termcapname:"	-> "termcapvalue"
X *	"$:terminfoname:"	-> "termcapvalue"
X *
X *	"\101"			-> "A"
X */
Xchar *
Xexpand_vars(ss)
Xchar *ss;
X{
X  static char ebuf[2048];
X  register int esize = 2047, vtype, quofl = 0;
X  register char *e = ebuf;
X  register char *s = ss;
X  register char *v;
X  char xbuf[11];
X
X  while (*s && *s != '\0' && *s != '\n' && esize > 0)
X    {
X      if (*s == '\'')
X	quofl ^= 1;
X      if (*s == '$' && !quofl)
X	{
X	  char *p, c;
X
X	  p = ++s;
X	  switch (*s)
X	    {
X	    case '{':
X	      p = ++s;
X	      while (*p != '}')
X	        if (*p++ == '\0')
X	          return ss;
X	      vtype = 0;		/* env var */
X	      break;
X	    case ':':
X	      p = ++s;
X	      while (*p != ':')
X		if (*p++ == '\0')
X		  return ss;
X	      vtype = 1;		/* termcap string */
X	      break;
X	    default:
X	      while (*p != ' ' && *p != '\0' && *p != '\n')
X		p++;
X	      vtype = 0;		/* env var */
X	    }
X	  c = *p;
X	  debug1("exp: c='%c'\n", c);
X	  *p = '\0';
X	  if (vtype == 0)
X	    {
X	      v = xbuf;
X	      if (strcmp(s, "TERM") == 0)
X		v = display ? d_termname : "unknown";
X	      else if (strcmp(s, "COLUMNS") == 0)
X		sprintf(xbuf, "%d", display ? d_width : -1);
X	      else if (strcmp(s, "LINES") == 0)
X		sprintf(xbuf, "%d", display ? d_height : -1);
X	      else
X		v = getenv(s);
X	    }
X	  else
X	    v = gettermcapstring(s);
X	  if (v)
X	    {
X	      debug2("exp: $'%s'='%s'\n", s, v);
X	      while (*v && esize-- > 0)
X	        *e++ = *v++;
X	    }
X	  else 
X	    debug1("exp: '%s' not env\n", s);  /* '{'-: */
X	  if ((*p = c) == '}' || c == ':')
X	    p++;
X	  s = p;
X	}
X      else
X	{
X	  /*
X	   * \$, \\$, \\, \\\, \012 are reduced here, 
X	   * d_other sequences starting whith \ are passed through.
X	   */
X	  if (s[0] == '\\' && !quofl)
X	    {
X	      if (s[1] >= '0' && s[1] <= '7')
X		{
X		  int i;
X
X		  s++;
X		  i = *s - '0';
X		  s++;
X		  if (*s >= '0' && *s <= '7')
X		    {
X		      i = i * 8 + *s - '0';
X		      s++;
X		      if (*s >= '0' && *s <= '7')
X			{
X			  i = i * 8 + *s - '0';
X			  s++;
X			}
X		    }
X		  debug2("expandvars: octal coded character %o (%d)\n", i, i);
X		  *e++ = i;
X		}
X	      else
X		{
X		  if (s[1] == '$' || 
X		      (s[1] == '\\' && s[2] == '$') ||
X		      s[1] == '\'' || 
X		      (s[1] == '\\' && s[2] == '\''))
X		    s++;
X		}
X	    }
X	  *e++ = *s++;
X	  esize--;
X	}
X    }
X  if (esize <= 0)
X    Msg(0, "expand_vars: buffer overflow\n");
X  *e = '\0';
X  return ebuf;
X}
X
Xvoid
XRcLine(ubuf)
Xchar *ubuf;
X{
X  char *args[MAXARGS], *buf;
X
X  buf = expand_vars(ubuf); 
X  if (Parse(buf, args) <= 0)
X    return;
X  DoCommand(args);
X}
X
Xvoid
XWriteFile(dump)
Xint dump;
X{
X  /* dump==0:	create .termcap,
X   * dump==1:	hardcopy,
X   * #ifdef COPY_PASTE
X   * dump==2:	BUFFERFILE
X   * #endif COPY_PASTE 
X   */
X  register int i, j, k;
X  register char *p;
X  register FILE *f;
X  char fn[1024];
X  char *mode = "w";
X
X  switch (dump)
X    {
X    case DUMP_TERMCAP:
X      i = SockNamePtr - SockPath;
X      strncpy(fn, SockPath, i);
X      strcpy(fn + i, ".termcap");
X      break;
X    case DUMP_HARDCOPY:
X      if (hardcopydir)
X	sprintf(fn, "%s/hardcopy.%d", hardcopydir, fore->w_number);
X      else
X        sprintf(fn, "hardcopy.%d", fore->w_number);
X      if (hardcopy_append && !access(fn, W_OK))
X	mode = "a";
X      break;
X#ifdef COPY_PASTE
X    case DUMP_EXCHANGE:
X      sprintf(fn, "%s", BufferFile);
X      umask(0);
X      break;
X#endif
X    }
X
X  debug2("WriteFile(%d) %s\n", dump, fn);
X  if (UserContext() > 0)
X    {
X      debug("Writefile: usercontext\n");
X      if ((f = fopen(fn, mode)) == NULL)
X	{
X	  debug2("WriteFile: fopen(%s,\"%s\") failed\n", fn, mode);
X	  UserReturn(0);
X	}
X      else
X	{
X	  switch (dump)
X	    {
X	    case DUMP_HARDCOPY:
X	      if (*mode == 'a')
X		{
X		  putc('>', f);
X		  for (j = d_width - 2; j > 0; j--)
X		    putc('=', f);
X		  fputs("<\n", f);
X		}
X	      for (i = 0; i < d_height; i++)
X		{
X		  p = fore->w_image[i];
X		  for (k = d_width - 1; k >= 0 && p[k] == ' '; k--)
X		    ;
X		  for (j = 0; j <= k; j++)
X		    putc(p[j], f);
X		  putc('\n', f);
X		}
X	      break;
X	    case DUMP_TERMCAP:
X	      if ((p = index(MakeTermcap(fore->w_aflag), '=')) != NULL)
X		{
X		  fputs(++p, f);
X		  putc('\n', f);
X		}
X	      break;
X#ifdef COPY_PASTE
X	    case DUMP_EXCHANGE:
X	      p = d_user->u_copybuffer;
X	      for (i = 0; i < d_user->u_copylen; i++)
X		putc(*p++, f);
X	      break;
X#endif
X	    }
X	  (void) fclose(f);
X	  UserReturn(1);
X	}
X    }
X  if (UserStatus() <= 0)
X    Msg(0, "Cannot open \"%s\"", fn);
X  else
X    {
X      switch (dump)
X	{
X	case DUMP_TERMCAP:
X	  Msg(0, "Termcap entry written to \"%s\".", fn);
X	  break;
X	case DUMP_HARDCOPY:
X	  Msg(0, "Screen image %s to \"%s\".",
X	      (*mode == 'a') ? "appended" : "written", fn);
X	  break;
X#ifdef COPY_PASTE
X	case DUMP_EXCHANGE:
X	  Msg(0, "Copybuffer written to \"%s\".", fn);
X#endif
X	}
X    }
X}
X
X#ifdef COPY_PASTE
X
Xvoid
XReadFile()
X{
X  int i, l, size;
X  char fn[1024], c;
X  struct stat stb;
X
X  sprintf(fn, "%s", BufferFile);
X  debug1("ReadFile(%s)\n", fn);
X  if ((i = secopen(fn, O_RDONLY, 0)) < 0)
X    {
X      Msg(errno, "no %s -- no slurp", fn);
X      return;
X    }
X  if (fstat(i, &stb))
X    {
X      Msg(errno, "no good %s -- no slurp", fn);
X      close(i);
X      return;
X    }
X  size = stb.st_size;
X  if (d_user->u_copybuffer)
X    UserFreeCopyBuffer(d_user);
X  d_user->u_copylen = 0;
X  if ((d_user->u_copybuffer = malloc(size)) == NULL)
X    {
X      close(i);
X      Msg(0, strnomem);
X      return;
X    }
X  errno = 0;
X  if ((l = read(i, d_user->u_copybuffer, size)) != size)
X    {
X      d_user->u_copylen = (l > 0) ? l : 0;
X#ifdef NETHACK
X      if (nethackflag)
X        Msg(errno, "You choke on your food: %d bytes from %s", 
X	    d_user->u_copylen, fn);
X      else
X#endif
X      Msg(errno, "Got only %d bytes from %s", d_user->u_copylen, fn);
X      close(i);
X      return;
X    }
X  d_user->u_copylen = l;
X  if (read(i, &c, 1) > 0)
X    Msg(0, "Slurped only %d characters into buffer - try again", d_user->u_copylen);
X  else
X    Msg(0, "Slurped %d characters into buffer", d_user->u_copylen);
X  close(i);
X  return;
X}
X
Xvoid
XKillBuffers()
X{
X  char fn[1024];
X  sprintf(fn, "%s", BufferFile);
X  errno = 0;
X#ifndef NOREUID
X  setreuid(eff_uid, real_uid);
X  setregid(eff_gid, real_gid);
X#else
X  if (access(fn, W_OK) == -1)
X    {
X      Msg(errno, "%s not removed", fn);
X      return;
X    }
X#endif
X  unlink(fn);
X  Msg(errno, "%s removed", fn);
X#ifndef NOREUID
X  setreuid(real_uid, eff_uid);
X  setregid(real_gid, eff_gid);
X#endif
X}
X#endif	/* COPY_PASTE */
X
X
X/*
X * (Almost) secure open and fopen...
X */
X
XFILE *
Xsecfopen(name, mode)
Xchar *name;
Xchar *mode;
X{
X  FILE *fi;
X#ifdef NOREUID
X  int flags, fd;
X#endif
X
X  debug2("secfopen(%s, %s)\n", name, mode);
X#ifndef NOREUID
X  setreuid(eff_uid, real_uid);
X  setregid(eff_gid, real_gid);
X  fi = fopen(name, mode);
X  setreuid(real_uid, eff_uid);
X  setregid(real_gid, eff_gid);
X  return fi;
X#else
X  if (eff_uid == real_uid)
X    return(fopen(name, mode));
X  if (mode[0] && mode[1] == '+')
X    flags = O_RDWR;
X  else
X    flags = (mode[0] == 'r') ? O_RDONLY : O_WRONLY;
X  if (mode[0] == 'w')
X    flags |= O_CREAT | O_TRUNC;
X  else if (mode[0] == 'a')
X    flags |= O_CREAT | O_APPEND;
X  else if (mode[0] != 'r')
X    {
X      errno = EINVAL;
X      return(0);
X    }
X  if ((fd = secopen(name, flags, 0666)) < 0)
X    return(0);
X  if ((fi = fdopen(fd, mode)) == 0)
X    {
X      close(fd);
X      return(0);
X    }
X  return(fi);
X#endif
X}
X
X
Xint
Xsecopen(name, flags, mode)
Xchar *name;
Xint flags;
Xint mode;
X{
X  int fd;
X#ifdef NOREUID
X  int q;
X  struct stat stb;
X#endif
X
X  debug3("secopen(%s, 0x%x, 0%03o)\n", name, flags, mode);
X#ifndef NOREUID
X  setreuid(eff_uid, real_uid);
X  setregid(eff_gid, real_gid);
X  fd = open(name, flags, mode);
X  setreuid(real_uid, eff_uid);
X  setregid(real_gid, eff_gid);
X  return fd;
X#else
X  if (eff_uid == real_uid)
X    return(open(name, flags, mode));
X  /* Truncation/creation is done in UserContext */
X  if ((flags & O_TRUNC) || ((flags & O_CREAT) && access(name, F_OK)))
X    {
X      if (UserContext() > 0)
X	{
X          if ((fd = open(name, flags, mode)) >= 0)
X	    {
X	      close(fd);
X	      UserReturn(0);
X            }
X	  if (errno == 0)
X	    errno = EACCES;
X	  UserReturn(errno);
X	}
X      if (q = UserStatus())
X	{
X	  if (q > 0)
X	    errno = q;
X          return(-1);
X	}
X    }
X  if (access(name, F_OK))
X    return(-1);
X  if ((fd = open(name, flags & ~(O_TRUNC | O_CREAT), 0)) < 0)
X    return(-1);
X  debug("open successful\n");
X  if (fstat(fd, &stb))
X    {
X      close(fd);
X      return(-1);
X    }
X  debug("fstat successful\n");
X  if (stb.st_uid != real_uid)
X    {
X      switch (flags & (O_RDONLY | O_WRONLY | O_RDWR))
X        {
X	case O_RDONLY:
X	  q = 0004;
X	  break;
X	case O_WRONLY:
X	  q = 0002;
X	  break;
X	default:
X	  q = 0006;
X	  break;
X        }
X      if ((stb.st_mode & q) != q)
X	{
X          debug("secopen: permission denied\n");
X	  close(fd);
X	  errno = EACCES;
X	  return(-1);
X	}
X    }
X  debug1("secopen ok - returning %d\n", fd);
X  return(fd);
X#endif
X}
END_OF_FILE
if test 15600 -ne `wc -c <'fileio.c'`; then
    echo shar: \"'fileio.c'\" unpacked with wrong size!
fi
# end of 'fileio.c'
fi
if test -f 'tty.sh' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tty.sh'\"
else
echo shar: Extracting \"'tty.sh'\" \(19709 characters\)
sed "s/^X//" >'tty.sh' <<'END_OF_FILE'
X#!/bin/sh
X# sh tty.sh tty.c
X# This inserts all the needed #ifdefs for IF{} statements
X# and generates tty.c
X
Xrm -f $1
Xsed -e '1,17d' \
X-e 's%^IF{\(.*\)}\(.*\)%#if defined(\1)\
X  \2\
X#endif /* \1 */%' \
X-e 's%^XIF{\(.*\)}\(.*\)%#if defined(\1) \&\& \1 < MAXCC\
X  \2\
X#endif /* \1 */%' \
X < $0 > $1
Xchmod -w $1
Xexit 0
X
X/* Copyright (c) 1993
X *      Juergen Weigert (jnweiger@immd4.informatik.uni-erlangen.de)
X *      Michael Schroeder (mlschroe@immd4.informatik.uni-erlangen.de)
X * Copyright (c) 1987 Oliver Laumann
X *
X * This program is free software; you can redistribute it and/or modify
X * it under the terms of the GNU General Public License as published by
X * the Free Software Foundation; either version 2, or (at your option)
X * any later version.
X *  
X * This program is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X * GNU General Public License for more details.
X *
X * You should have received a copy of the GNU General Public License
X * along with this program (see the file COPYING); if not, write to the
X * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X ****************************************************************
X */
X
X/*
X * NOTICE: tty.c is automatically generated from tty.sh
X * Do not change anything here. If you then change tty.sh.
X */
X
X#include "rcs.h"
XRCS_ID("$Id: tty.sh,v 1.7 1993/08/05 14:24:09 mlschroe Exp $ FAU")
X
X#include <stdio.h>
X#include <sys/types.h>
X#include <signal.h>
X#include <fcntl.h>
X#if !defined(sun) || defined(SUNOS3)
X# include <sys/ioctl.h> /* collosions with termios.h */
X#else
X# ifndef TIOCEXCL
X#  include <sys/ttold.h>	/* needed for TIOCEXCL */
X# endif
X#endif
X
X#ifdef ISC
X# include <sys/tty.h>
X# include <sys/sioctl.h>
X# include <sys/pty.h>
X#endif
X
X#include "config.h"
X#include "screen.h"
X#include "extern.h"
X
Xextern struct display *display, *displays;
Xextern int iflag;
X
X
Xstatic sig_t
XSigAlrmDummy(SIGDEFARG)
X{
X  debug("SigAlrmDummy()\n");
X#ifndef SIGVOID
X  return (sig_t)0;
X#endif
X}
X
X/*
X *  Carefully open a charcter device. Not used to open ttys.
X */
X
Xint
XOpenTTY(line)
Xchar *line;
X{
X  int f;
X  sig_t (*sigalrm)__P(SIGPROTOARG);
X
X  sigalrm = signal(SIGALRM, SigAlrmDummy);
X  alarm(2);
X  /* this open only succeeds, if real uid is allowed */
X  if ((f = secopen(line, O_RDWR | O_NDELAY, 0)) == -1)
X    {
X      Msg(errno, "Cannot open line '%s' for R/W", line);
X      alarm(0);
X      signal(SIGALRM, sigalrm);
X      return -1;
X    }
X#ifdef I_POP
X  debug("OpenTTY I_POP\n");
X  while (ioctl(f, I_POP, (char *)0) >= 0)
X    ;
X#endif
X  /*
X   * We come here exclusively. This is to stop all kermit and cu type things
X   * accessing the same tty line.
X   * Perhaps we should better create a lock in some /usr/spool/locks directory?
X   */
X#ifdef TIOCEXCL
X errno = 0;
X ioctl(f, TIOCEXCL, (char *) 0);
X debug3("%d %d %d\n", getuid(), geteuid(), getpid());
X debug2("%s TIOCEXCL errno %d\n", line, errno);
X#endif  /* TIOCEXCL */
X  /*
X   * We create a sane tty mode. We do not copy things from the display tty
X   */
X#if WE_REALLY_WANT_TO_COPY_THE_TTY_MODE
X  if (display)
X    {
X      debug1("OpenTTY: using mode of display for %s\n", line);
X      SetTTY(f, &d_NewMode);
X#ifdef DEBUG
X      DebugTTY(&d_NewMode);
X#endif
X    }
X  else
X#endif 
X    {
X      struct mode Mode;
X
X      InitTTY(&Mode, TTY_FLAG_PLAIN);
X#ifdef DEBUG
X      DebugTTY(&Mode);
X#endif
X      SetTTY(f, &Mode);
X    }
X  brktty(f);
X  alarm(0);
X  signal(SIGALRM, sigalrm);
X  debug2("'%s' CONNECT fd=%d.\n", line, f);
X  return f;
X}
X
X
X/*
X *  Tty mode handling
X */
X
X#if defined(TERMIO) || defined(POSIX)
Xint intrc, origintrc = VDISABLE;        /* display? */
X#else
Xint intrc, origintrc = -1;		/* display? */
X#endif
Xstatic startc, stopc;                   /* display? */
X
X
Xvoid
XInitTTY(m, ttyflag)
Xstruct mode *m;
Xint ttyflag;
X{
X  bzero((char *)m, sizeof(*m));
X#ifdef POSIX
X  /* struct termios tio 
X   * defaults, as seen on SunOS 4.1.3
X   */
X  debug1("InitTTY: POSIX: termios defaults a la SunOS 4.1.3 (%d)\n", ttyflag);
XIF{BRKINT}	m->tio.c_iflag |= BRKINT;
XIF{IGNPAR}	m->tio.c_iflag |= IGNPAR;
XIF{ISTRIP}	m->tio.c_iflag |= ISTRIP;
XIF{IXON}	m->tio.c_iflag |= IXON;
XIF{IMAXBEL}	m->tio.c_iflag |= IMAXBEL; 
X
X  if (!ttyflag)	/* may not even be good for ptys.. */
X    {
XIF{ICRNL}	m->tio.c_iflag |= ICRNL;
XIF{ONLCR}	m->tio.c_oflag |= ONLCR; 
XIF{TAB3}	m->tio.c_oflag |= TAB3; 
XIF{PARENB}	m->tio.c_cflag |= PARENB;
X    }
X
XIF{OPOST}	m->tio.c_oflag |= OPOST;
X
XIF{B9600}	m->tio.c_cflag |= B9600;
XIF{CS8} 	m->tio.c_cflag |= CS8;
XIF{CREAD}	m->tio.c_cflag |= CREAD;
XIF{IBSHIFT) && defined(B9600}	m->tio.c_cflag |= B9600 << IBSHIFT;
X/* IF{CLOCAL}	m->tio.c_cflag |= CLOCAL; */
X
XIF{ECHOCTL}	m->tio.c_lflag |= ECHOCTL;
XIF{ECHOKE}	m->tio.c_lflag |= ECHOKE;
X
X  if (!ttyflag)
X    {
XIF{ISIG}	m->tio.c_lflag |= ISIG;
XIF{ICANON}	m->tio.c_lflag |= ICANON;
XIF{ECHO}	m->tio.c_lflag |= ECHO;
X    }
XIF{ECHOE}	m->tio.c_lflag |= ECHOE;
XIF{ECHOK}	m->tio.c_lflag |= ECHOK;
XIF{IEXTEN}	m->tio.c_lflag |= IEXTEN;
X
XXIF{VINTR}	m->tio.c_cc[VINTR]    = Ctrl('C');
XXIF{VQUIT}	m->tio.c_cc[VQUIT]    = Ctrl('\\');
XXIF{VERASE}	m->tio.c_cc[VERASE]   = 0x7f; /* DEL */
XXIF{VKILL}	m->tio.c_cc[VKILL]    = Ctrl('H');
XXIF{VEOF}	m->tio.c_cc[VEOF]     = Ctrl('D');
XXIF{VEOL}	m->tio.c_cc[VEOL]     = 0000;
XXIF{VEOL2}	m->tio.c_cc[VEOL2]    = 0000;
XXIF{VSWTCH}	m->tio.c_cc[VSWTCH]   = 0000;
XXIF{VSTART}	m->tio.c_cc[VSTART]   = Ctrl('Q');
XXIF{VSTOP}	m->tio.c_cc[VSTOP]    = Ctrl('S');
XXIF{VSUSP}	m->tio.c_cc[VSUSP]    = Ctrl('Z');
XXIF{VDSUSP}	m->tio.c_cc[VDSUSP]   = Ctrl('Y');
XXIF{VREPRINT}	m->tio.c_cc[VREPRINT] = Ctrl('R');
XXIF{VDISCARD}	m->tio.c_cc[VDISCARD] = Ctrl('O');
XXIF{VWERASE}	m->tio.c_cc[VWERASE]  = Ctrl('W');
XXIF{VLNEXT}	m->tio.c_cc[VLNEXT]   = Ctrl('V');
XXIF{VSTATUS}	m->tio.c_cc[VSTATUS]  = Ctrl('T');
X
X# ifdef hpux
X  m->m_ltchars.t_suspc =  Ctrl('Z');
X  m->m_ltchars.t_dsuspc = Ctrl('Y');
X  m->m_ltchars.t_rprntc = Ctrl('R');
X  m->m_ltchars.t_flushc = Ctrl('O');
X  m->m_ltchars.t_werasc = Ctrl('W');
X  m->m_ltchars.t_lnextc = Ctrl('V');
X# endif /* hpux */
X
X#else /* POSIX */
X
X# ifdef TERMIO
X  debug1("InitTTY: nonPOSIX, struct termio a la Motorola SYSV68 (%d)\n", ttyflag);
X  /* struct termio tio 
X   * defaults, as seen on Mototola SYSV68:
X   * input: 7bit, CR->NL, ^S/^Q flow control 
X   * output: POSTprocessing: NL->NL-CR, Tabs to spaces
X   * control: 9600baud, 8bit CSIZE, enable input
X   * local: enable signals, erase/kill processing, echo on.
X   */
XIF{ISTRIP}	m->tio.c_iflag |= ISTRIP;
XIF{IXON}	m->tio.c_iflag |= IXON;
X
XIF{OPOST}	m->tio.c_oflag |= OPOST;
X
X  if (!ttyflag)	/* may not even be good for ptys.. */
X    {
XIF{ICRNL}	m->tio.c_iflag |= ICRNL;
XIF{ONLCR}	m->tio.c_oflag |= ONLCR;
XIF{TAB3}	m->tio.c_oflag |= TAB3;
X    }
X
XIF{B9600}	m->tio.c_cflag  = B9600;
XIF{CS8} 	m->tio.c_cflag |= CS8;
XIF{CREAD}	m->tio.c_cflag |= CREAD;
X
X  if (!ttyflag)
X    {
XIF{ISIG}	m->tio.c_lflag |= ISIG;
XIF{ICANON}	m->tio.c_lflag |= ICANON;
XIF{ECHO}	m->tio.c_lflag |= ECHO;
X    }
XIF{ECHOE}	m->tio.c_lflag |= ECHOE;
XIF{ECHOK}	m->tio.c_lflag |= ECHOK;
X
XXIF{VINTR}	m->tio.c_cc[VINTR]  = Ctrl('C');
XXIF{VQUIT}	m->tio.c_cc[VQUIT]  = Ctrl('\\');
XXIF{VERASE}	m->tio.c_cc[VERASE] = 0177; /* DEL */
XXIF{VKILL}	m->tio.c_cc[VKILL]  = Ctrl('H');
XXIF{VEOF}	m->tio.c_cc[VEOF]   = Ctrl('D');
XXIF{VEOL}	m->tio.c_cc[VEOL]   = 0377;
XXIF{VEOL2}	m->tio.c_cc[VEOL2]  = 0377;
XXIF{VSWTCH}	m->tio.c_cc[VSWTCH] = 0000;
X# else /* TERMIO */
X  debug1("InitTTY: BSD: defaults a la SunOS 4.1.3 (%d)\n", ttyflag);
X  m->m_ttyb.sg_ispeed = B9600;
X  m->m_ttyb.sg_ospeed = B9600;
X  m->m_ttyb.sg_erase  = 0177; /*DEL */
X  m->m_ttyb.sg_kill   = Ctrl('H');
X  if (!ttyflag)
X    m->m_ttyb.sg_flags = CRMOD | ECHO
XIF{ANYP}	| ANYP
X    ;
X  else
X    m->m_ttyb.sg_flags = CBREAK
XIF{ANYP}	| ANYP
X    ;
X
X  m->m_tchars.t_intrc   = Ctrl('C');
X  m->m_tchars.t_quitc   = Ctrl('\\');
X  m->m_tchars.t_startc  = Ctrl('Q');
X  m->m_tchars.t_stopc   = Ctrl('S');
X  m->m_tchars.t_eofc    = Ctrl('D');
X  m->m_tchars.t_brkc    = -1;
X
X  m->m_ltchars.t_suspc  = Ctrl('Z');
X  m->m_ltchars.t_dsuspc = Ctrl('Y');
X  m->m_ltchars.t_rprntc = Ctrl('R');
X  m->m_ltchars.t_flushc = Ctrl('O');
X  m->m_ltchars.t_werasc = Ctrl('W');
X  m->m_ltchars.t_lnextc = Ctrl('V');
X
XIF{NTTYDISC}	m->m_ldisc = NTTYDISC;
X
X  m->m_lmode = 0
XIF{LDECCTQ}	| LDECCTQ
XIF{LCTLECH}	| LCTLECH
XIF{LPASS8}	| LPASS8
XIF{LCRTKIL}	| LCRTKIL
XIF{LCRTERA}	| LCRTERA
XIF{LCRTBS}	| LCRTBS
X;
X# endif /* TERMIO */
X#endif /* POSIX */
X}
X
Xvoid 
XSetTTY(fd, mp)
Xint fd;
Xstruct mode *mp;
X{
X  errno = 0;
X#ifdef POSIX
X  tcsetattr(fd, TCSADRAIN, &mp->tio);
X# ifdef hpux
X  ioctl(fd, TIOCSLTC, (char *)&mp->m_ltchars);
X# endif
X#else
X# ifdef TERMIO
X  ioctl(fd, TCSETAW, (char *)&mp->tio);
X# else
X  /* ioctl(fd, TIOCSETP, (char *)&mp->m_ttyb); */
X  ioctl(fd, TIOCSETC, (char *)&mp->m_tchars);
X  ioctl(fd, TIOCLSET, (char *)&mp->m_lmode);
X  ioctl(fd, TIOCSETD, (char *)&mp->m_ldisc);
X  ioctl(fd, TIOCSETP, (char *)&mp->m_ttyb);
X  ioctl(fd, TIOCSLTC, (char *)&mp->m_ltchars); /* moved here for apollo. jw */
X# endif
X#endif
X  if (errno)
X    Msg(errno, "SetTTY (fd %d): ioctl failed", fd);
X}
X
Xvoid
XGetTTY(fd, mp)
Xint fd;
Xstruct mode *mp;
X{
X  errno = 0;
X#ifdef POSIX
X  tcgetattr(fd, &mp->tio);
X# ifdef hpux
X  ioctl(fd, TIOCGLTC, (char *)&mp->m_ltchars);
X# endif
X#else
X# ifdef TERMIO
X  ioctl(fd, TCGETA, (char *)&mp->tio);
X# else
X  ioctl(fd, TIOCGETP, (char *)&mp->m_ttyb);
X  ioctl(fd, TIOCGETC, (char *)&mp->m_tchars);
X  ioctl(fd, TIOCGLTC, (char *)&mp->m_ltchars);
X  ioctl(fd, TIOCLGET, (char *)&mp->m_lmode);
X  ioctl(fd, TIOCGETD, (char *)&mp->m_ldisc);
X# endif
X#endif
X  if (errno)
X    Msg(errno, "GetTTY (fd %d): ioctl failed", fd);
X}
X
Xvoid
XSetMode(op, np)
Xstruct mode *op, *np;
X{
X  *np = *op;
X
X#if defined(TERMIO) || defined(POSIX)
X  np->tio.c_iflag &= ~ICRNL;
X# ifdef ONLCR
X  np->tio.c_oflag &= ~ONLCR;
X# endif
X  np->tio.c_lflag &= ~(ICANON | ECHO);
X#ifdef OSF1
X  /*
X   * From Andrew Myers (andru@tonic.lcs.mit.edu)
X   */
X  np->tio.c_lflag &= ~IEXTEN;
X#endif
X
X  /*
X   * Unfortunately, the master process never will get SIGINT if the real
X   * terminal is different from the one on which it was originaly started
X   * (process group membership has not been restored or the new tty could not
X   * be made controlling again). In my solution, it is the attacher who
X   * receives SIGINT (because it is always correctly associated with the real
X   * tty) and forwards it to the master [kill(MasterPid, SIGINT)]. 
X   * Marc Boucher (marc@CAM.ORG)
X   */
X  if (iflag)
X    np->tio.c_lflag |= ISIG;
X  else
X    np->tio.c_lflag &= ~ISIG;
X  /* 
X   * careful, careful catche monkey..
X   * never set VMIN and VTIME to zero, if you want blocking io.
X   */
X  np->tio.c_cc[VMIN] = 1;
X  np->tio.c_cc[VTIME] = 0;
X  startc = op->tio.c_cc[VSTART];
X  stopc = op->tio.c_cc[VSTOP];
X  if (iflag)
X    origintrc = intrc = op->tio.c_cc[VINTR];
X  else
X    {
X      origintrc = op->tio.c_cc[VINTR];
X      intrc = np->tio.c_cc[VINTR] = VDISABLE;
X    }
X  np->tio.c_cc[VQUIT] = VDISABLE;
X  if (d_flow == 0)
X    {
X      np->tio.c_cc[VINTR] = VDISABLE;
X      np->tio.c_cc[VSTART] = VDISABLE;
X      np->tio.c_cc[VSTOP] = VDISABLE;
X      np->tio.c_iflag &= ~IXON;
X    }
XXIF{VDISCARD}	np->tio.c_cc[VDISCARD] = VDISABLE;
XXIF{VSUSP}	np->tio.c_cc[VSUSP] = VDISABLE;
X# ifdef hpux
X  np->m_ltchars.t_suspc  = VDISABLE;
X  np->m_ltchars.t_dsuspc = VDISABLE;
X  np->m_ltchars.t_rprntc = VDISABLE;
X  np->m_ltchars.t_flushc = VDISABLE;
X  np->m_ltchars.t_werasc = VDISABLE;
X  np->m_ltchars.t_lnextc = VDISABLE;
X# else /* hpux */
XXIF{VDSUSP}	np->tio.c_cc[VDSUSP] = VDISABLE;
X# endif /* hpux */
X#else /* TERMIO || POSIX */
X  startc = op->m_tchars.t_startc;
X  stopc = op->m_tchars.t_stopc;
X  if (iflag)
X    origintrc = intrc = op->m_tchars.t_intrc;
X  else
X    {
X      origintrc = op->m_tchars.t_intrc;
X      intrc = np->m_tchars.t_intrc = -1;
X    }
X  np->m_ttyb.sg_flags &= ~(CRMOD | ECHO);
X  np->m_ttyb.sg_flags |= CBREAK;
X  np->m_tchars.t_quitc = -1;
X  if (d_flow == 0)
X    {
X      np->m_tchars.t_intrc = -1;
X      np->m_tchars.t_startc = -1;
X      np->m_tchars.t_stopc = -1;
X    }
X  np->m_ltchars.t_suspc = -1;
X  np->m_ltchars.t_dsuspc = -1;
X  np->m_ltchars.t_flushc = -1;
X  np->m_ltchars.t_lnextc = -1;
X#endif /* defined(TERMIO) || defined(POSIX) */
X}
X
Xvoid
XSetFlow(on)
Xint on;
X{
X  ASSERT(display);
X  if (d_flow == on)
X    return;
X#if defined(TERMIO) || defined(POSIX)
X  if (on)
X    {
X      d_NewMode.tio.c_cc[VINTR] = intrc;
X      d_NewMode.tio.c_cc[VSTART] = startc;
X      d_NewMode.tio.c_cc[VSTOP] = stopc;
X      d_NewMode.tio.c_iflag |= IXON;
X    }
X  else
X    {
X      d_NewMode.tio.c_cc[VINTR] = VDISABLE;
X      d_NewMode.tio.c_cc[VSTART] = VDISABLE;
X      d_NewMode.tio.c_cc[VSTOP] = VDISABLE;
X      d_NewMode.tio.c_iflag &= ~IXON;
X    }
X# ifdef POSIX
X  if (tcsetattr(d_userfd, TCSANOW, &d_NewMode.tio))
X# else
X  if (ioctl(d_userfd, TCSETAW, (char *)&d_NewMode.tio) != 0)
X# endif
X    debug1("SetFlow: ioctl errno %d\n", errno);
X#else /* POSIX || TERMIO */
X  if (on)
X    {
X      d_NewMode.m_tchars.t_intrc = intrc;
X      d_NewMode.m_tchars.t_startc = startc;
X      d_NewMode.m_tchars.t_stopc = stopc;
X    }
X  else
X    {
X      d_NewMode.m_tchars.t_intrc = -1;
X      d_NewMode.m_tchars.t_startc = -1;
X      d_NewMode.m_tchars.t_stopc = -1;
X    }
X  if (ioctl(d_userfd, TIOCSETC, (char *)&d_NewMode.m_tchars) != 0)
X    debug1("SetFlow: ioctl errno %d\n", errno);
X#endif /* POSIX || TERMIO */
X  d_flow = on;
X}
X
X
X/*
X *  Job control handling
X */
X
X/*ARGSUSED*/
Xvoid
Xbrktty(fd)
Xint fd;
X{
X#ifdef POSIX
X  setsid();		/* will break terminal affiliation */
X# ifdef BSD
X  ioctl(fd, TIOCSCTTY, (char *)0);
X# endif /* BSD */
X#else /* POSIX */
X# ifdef SYSV
X  setpgrp();		/* will break terminal affiliation */
X# else /* SYSV */
X#  ifdef BSDJOBS
X  int devtty;
X
X  if ((devtty = open("/dev/tty", O_RDWR | O_NDELAY)) >= 0)
X    {
X      if (ioctl(devtty, TIOCNOTTY, (char *)0))
X        debug2("brktty: ioctl(devtty=%d, TIOCNOTTY, 0) = %d\n", devtty, errno);
X      close(devtty);
X    }
X#  endif /* BSDJOBS */
X# endif /* SYSV */
X#endif /* POSIX */
X}
X
Xint
Xfgtty(fd)
Xint fd;
X{
X#ifdef BSDJOBS
X  int mypid;
X
X  mypid = getpid();
X
X# if defined(BSDI) || defined(__386BSD__) || defined(__osf__)
X  setsid();	/* should be already done */
X  ioctl(fd, TIOCSCTTY, (char *)0);
X# endif /* BSDI || __386BSD__ */
X
X# ifdef POSIX
X  if (tcsetpgrp(fd, mypid))
X    {
X      debug1("fgtty: tcsetpgrp: %d\n", errno);
X      return -1;
X    }
X# else /* POSIX */
X  if (ioctl(fd, TIOCSPGRP, (char *)&mypid) != 0)
X    debug1("fgtty: TIOSETPGRP: %d\n", errno);
X#  ifndef SYSV	/* Already done in brktty():setpgrp() */
X  if (setpgrp(fd, mypid))
X    debug1("fgtty: setpgrp: %d\n", errno);
X#  endif
X# endif /* POSIX */
X#endif /* BSDJOBS */
X  return 0;
X}
X
X
X/* 
X * Send a break for n * 0.25 seconds. Tty must be PLAIN.
X */
X
Xvoid SendBreak(wp, n, closeopen)
Xstruct win *wp;
Xint n, closeopen;
X{
X  if ((wp->w_t.flags & TTY_FLAG_PLAIN) == 0)
X    return;
X
X  debug3("break(%d, %d) fd %d\n", n, closeopen, wp->w_ptyfd);
X#ifdef POSIX
X  (void) tcflush(wp->w_ptyfd, TCIOFLUSH);
X#else
X# ifdef TIOCFLUSH
X  (void) ioctl(wp->w_ptyfd, TIOCFLUSH, (char *)0);
X# endif /* TIOCFLUSH */
X#endif /* POSIX */
X  if (closeopen)
X    {
X      close(wp->w_ptyfd);
X      sleep((n + 3) / 4);
X      if ((wp->w_ptyfd = OpenTTY(wp->w_tty)) < 1)
X	{
X	  Msg(0, "Ouch, cannot reopen line %s, please try harder", wp->w_tty);
X	  return;
X	}
X      (void) fcntl(wp->w_ptyfd, F_SETFL, FNDELAY);
X    }
X  else
X    {
X#ifdef POSIX 
X      debug("tcsendbreak\n");
X      if (tcsendbreak(wp->w_ptyfd, n) < 0)
X	{
X	  Msg(errno, "cannot send BREAK");
X	  return;
X	}
X#else
X      if (!n)
X	n++;
X# ifdef TCSBRK
X      debug("TCSBRK\n");
X	{
X	  int i;
X	  for (i = 0; i < n; i++)
X	    if (ioctl(wp->w_ptyfd, TCSBRK, (char *)0) < 0)
X	      {
X		Msg(errno, "Cannot send BREAK");
X		return;
X	      }
X	}
X# else /* TCSBRK */
X#  if defined(TIOCSBRK) && defined(TIOCCBRK)
X      debug("TIOCSBRK TIOCCBRK\n");
X      if (ioctl(wp->w_ptyfd, TIOCSBRK, (char *)0) < 0)
X	{
X	  Msg(errno, "Can't send BREAK");
X	  return;
X	}
X      sleep((n + 3) / 4);
X      if (ioctl(wp->w_ptyfd, TIOCCBRK, (char *)0) < 0)
X	{
X	  Msg(errno, "BREAK stuck!!! -- HELP!");
X	  return;
X	}
X#  else /* TIOCSBRK && TIOCCBRK */
X      Msg(0, "Break not simulated yet"); 
X      return;
X#  endif /* TIOCSBRK && TIOCCBRK */
X# endif /* TCSBRK */
X#endif /* POSIX */
X      debug("            broken\n");
X    }
X}
X
X
X/*
X *  Console grabbing
X */
X
X/*ARGSUSED*/
Xint
XTtyGrabConsole(fd, on, rc_name)
Xint fd, on;
Xchar *rc_name;
X{
X#ifdef TIOCCONS
X  char *slave;
X  int sfd = -1, ret = 0;
X  struct display *d;
X
X  if (!on)
X    {
X      if ((fd = OpenPTY(&slave)) < 0)
X	{
X	  Msg(errno, "%s: could not open detach pty master", rc_name);
X	  return -1;
X	}
X      if ((sfd = open(slave, O_RDWR)) < 0)
X	{
X	  Msg(errno, "%s: could not open detach pty slave", rc_name);
X	  close(fd);
X	  return -1;
X	}
X    }
X  else
X    {
X      if (displays == 0)
X	{
X	  Msg(0, "I need a display");
X	  return -1;
X	}
X      for (d = displays; d; d = d->_d_next)
X	if (strcmp(d->_d_usertty, "/dev/console") == 0)
X	  break;
X      if (d)
X	{
X	  Msg(0, "too dangerous - screen is running on /dev/console");
X	  return -1;
X	}
X    }
X  if (UserContext() == 1)
X    UserReturn(ioctl(fd, TIOCCONS, (char *)&on));
X  ret = UserStatus();
X  if (ret)
X    Msg(errno, "%s: ioctl TIOCCONS failed", rc_name);
X  if (!on)
X    {
X      close(sfd);
X      close(fd);
X    }
X  return ret;
X#else /* TIOCCONS */
X  Msg(0, "%s: no TIOCCONS on this machine", rc_name);
X  return -1;
X#endif /* TIOCCONS */
X}
X
X
X/*
X *  Write out the mode struct in a readable form
X */
X
X#ifdef DEBUG
Xvoid
XDebugTTY(m)
Xstruct mode *m;
X{
X  int i;
X
X#ifdef POSIX
X  debug("struct termios tio:\n");
X  debug1("c_iflag = %#x\n", m->tio.c_iflag);
X  debug1("c_oflag = %#x\n", m->tio.c_oflag);
X  debug1("c_cflag = %#x\n", m->tio.c_cflag);
X  debug1("c_lflag = %#x\n", m->tio.c_lflag);
X  for (i = 0; i < sizeof(m->tio.c_cc)/sizeof(*m->tio.c_cc); i++)
X    {
X      debug2("c_cc[%d] = %#x\n", i, m->tio.c_cc[i]);
X    }
X# ifdef hpux
X  debug1("suspc     = %#02x\n", m->m_ltchars.t_suspc);
X  debug1("dsuspc    = %#02x\n", m->m_ltchars.t_dsuspc);
X  debug1("rprntc    = %#02x\n", m->m_ltchars.t_rprntc);
X  debug1("flushc    = %#02x\n", m->m_ltchars.t_flushc);
X  debug1("werasc    = %#02x\n", m->m_ltchars.t_werasc);
X  debug1("lnextc    = %#02x\n", m->m_ltchars.t_lnextc);
X# endif /* hpux */
X#else /* POSIX */
X# ifdef TERMIO
X  debug("struct termio tio:\n");
X  debug1("c_iflag = %04o\n", m->tio.c_iflag);
X  debug1("c_oflag = %04o\n", m->tio.c_oflag);
X  debug1("c_cflag = %04o\n", m->tio.c_cflag);
X  debug1("c_lflag = %04o\n", m->tio.c_lflag);
X  for (i = 0; i < sizeof(m->tio.c_cc)/sizeof(*m->tio.c_cc); i++)
X    {
X      debug2("c_cc[%d] = %04o\n", i, m->tio.c_cc[i]);
X    }
X# else /* TERMIO */
X  debug1("sg_ispeed = %d\n",    m->m_ttyb.sg_ispeed);
X  debug1("sg_ospeed = %d\n",    m->m_ttyb.sg_ospeed);
X  debug1("sg_erase  = %#02x\n", m->m_ttyb.sg_erase);
X  debug1("sg_kill   = %#02x\n", m->m_ttyb.sg_kill);
X  debug1("sg_flags  = %#04x\n", (unsigned short)m->m_ttyb.sg_flags);
X  debug1("intrc     = %#02x\n", m->m_tchars.t_intrc);
X  debug1("quitc     = %#02x\n", m->m_tchars.t_quitc);
X  debug1("startc    = %#02x\n", m->m_tchars.t_startc);
X  debug1("stopc     = %#02x\n", m->m_tchars.t_stopc);
X  debug1("eofc      = %#02x\n", m->m_tchars.t_eofc);
X  debug1("brkc      = %#02x\n", m->m_tchars.t_brkc);
X  debug1("suspc     = %#02x\n", m->m_ltchars.t_suspc);
X  debug1("dsuspc    = %#02x\n", m->m_ltchars.t_dsuspc);
X  debug1("rprntc    = %#02x\n", m->m_ltchars.t_rprntc);
X  debug1("flushc    = %#02x\n", m->m_ltchars.t_flushc);
X  debug1("werasc    = %#02x\n", m->m_ltchars.t_werasc);
X  debug1("lnextc    = %#02x\n", m->m_ltchars.t_lnextc);
X  debug1("ldisc     = %d\n",    m->m_ldisc);
X  debug1("lmode     = %#x\n",   m->m_lmode);
X# endif /* TERMIO */
X#endif /* POSIX */
X}
X#endif /* DEBUG */
END_OF_FILE
if test 19709 -ne `wc -c <'tty.sh'`; then
    echo shar: \"'tty.sh'\" unpacked with wrong size!
fi
# end of 'tty.sh'
fi
if test -f 'utmp.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'utmp.c'\"
else
echo shar: Extracting \"'utmp.c'\" \(18975 characters\)
sed "s/^X//" >'utmp.c' <<'END_OF_FILE'
X/* Copyright (c) 1993
X *      Juergen Weigert (jnweiger@immd4.informatik.uni-erlangen.de)
X *      Michael Schroeder (mlschroe@immd4.informatik.uni-erlangen.de)
X * Copyright (c) 1987 Oliver Laumann
X *
X * This program is free software; you can redistribute it and/or modify
X * it under the terms of the GNU General Public License as published by
X * the Free Software Foundation; either version 2, or (at your option)
X * any later version.
X *
X * This program is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X * GNU General Public License for more details.
X *
X * You should have received a copy of the GNU General Public License
X * along with this program (see the file COPYING); if not, write to the
X * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X ****************************************************************
X */
X
X#include "rcs.h"
XRCS_ID("$Id: utmp.c,v 1.6 1993/08/05 14:24:12 mlschroe Exp $ FAU")
X
X
X/*
X * An explanation of some weird things:
X *
X *  linux should have GETUTENT, but their pututline() doesn't have
X *  a return value.
X * 
X *  UTNOKEEP: A (ugly) hack for apollo, that does two things:
X *    1) Always close and reopen the utmp file descriptor. (I don't know
X *       for what reason this is done...)
X *    2) Implement an unsortet utmp file much like GETUTENT.
X *  (IMHO these two features should be split!)
X */
X
X
X#include <sys/types.h>
X#include <sys/stat.h>
X#include <fcntl.h>
X
X#include "config.h"
X#include "screen.h"
X#include "extern.h"
X
X
Xextern struct display *display;
Xextern struct win *fore;
Xextern char *LoginName;
X#ifdef NETHACK
Xextern nethackflag;
X#endif
X
X#ifdef UTMPOK
X
Xstatic slot_t TtyNameSlot __P((char *));
Xstatic int utmpok, utmpfd = -1;
Xstatic char UtmpName[] = UTMPFILE;
X
X
X# if defined(GETUTENT) && !defined(SVR4)
X#  if defined(hpux) /* cruel hpux release 8.0 */
X#   define pututline _pututline
X#  endif /* hpux */
Xextern struct utmp *getutline(), *pututline();
X#  if defined(_SEQUENT_)
Xextern struct utmp *ut_add_user(), *ut_delete_user();
Xextern char *ut_find_host();
X#   define UTHOST		/* _SEQUENT_ has got ut_find_host() */
X#  endif /* _SEQUENT_ */
X# endif /* GETUTENT && !SVR4 */
X
X# if defined (GETTTYENT) && !defined(GETUTENT)
X#   include <ttyent.h>
X# endif /* GETUTENT */
X
X# if !defined(GETTTYENT) && !defined(GETUTENT) && !defined(UTNOKEEP)
Xstruct ttyent
X{
X  char *ty_name;
X};
Xstatic void setttyent __P((void));
Xstatic struct ttyent *getttyent __P((void));
Xstatic char *tt, *ttnext;
Xstatic char ttys[] = "/etc/ttys";
X# endif /* !GETTTYENT && !GETUTENT && !UTNOKEEP */
X
X#endif /* UTMPOK */
X
X
X
X/*
X * SlotToggle - modify the utmp slot of the fore window.
X *
X * how > 0	do try to set a utmp slot.
X * how = 0	try to withdraw a utmp slot.
X *
X * w_slot = -1  window not logged in.
X * w_slot = 0   window not logged in, but should be logged in. 
X *              (unable to write utmp, or detached).
X */
Xvoid
XSlotToggle(how)
Xint how;
X{
X  debug1("SlotToggle %d\n", how);
X#ifdef UTMPOK
X  if (how)
X    {
X      debug(" try to log in\n");
X      if ((fore->w_slot == (slot_t) -1) || (fore->w_slot == (slot_t) 0))
X	{
X# ifdef USRLIMIT
X          if (CountUsers() >= USRLIMIT)
X            Msg(0, "User limit reached.");
X          else
X# endif
X            {
X              if (SetUtmp(fore) == 0)
X                Msg(0, "This window is now logged in.");
X              else
X                Msg(0, "This window should now be logged in.");
X            }
X	}
X      else
X	Msg(0, "This window is already logged in.");
X    }
X  else
X    {
X      debug(" try to log out\n");
X      if (fore->w_slot == (slot_t) -1)
X	Msg(0, "This window is already logged out\n");
X      else if (fore->w_slot == (slot_t) 0)
X	{
X	  debug("What a relief! In fact, it was not logged in\n");
X	  Msg(0, "This window is not logged in.");
X	  fore->w_slot = (slot_t) -1;
X	}
X      else
X	{
X	  RemoveUtmp(fore);
X	  if (fore->w_slot != (slot_t) -1)
X	    Msg(0, "What? Cannot remove Utmp slot?");
X	  else
X	    Msg(0, "This window is no longer logged in.");
X	}
X    }
X#else	/* !UTMPOK */
X  Msg(0, "Unable to modify %s.\n", UTMPFILE);
X#endif
X}
X
X
X#ifdef UTMPOK
X
X
Xvoid
XInitUtmp()
X{
X  debug1("InitUtmp testing '%s'...\n", UtmpName);
X  if ((utmpfd = open(UtmpName, O_RDWR)) == -1)
X    {
X      if (errno != EACCES)
X	Msg(errno, UtmpName);
X      debug("InitUtmp failed.\n");
X      utmpok = 0;
X      return;
X    }
X# ifdef GETUTENT
X  close(utmpfd);	/* it was just a test */
X  utmpfd = -1;
X# endif /* GETUTENT */
X  utmpok = 1;
X}
X
X
X#ifdef USRLIMIT
Xint
XCountUsers()
X{
X# ifdef GETUTENT
X  struct utmp *ut, *getutent();
X# else /* GETUTENT */
X  struct utmp utmpbuf;
X# endif /* GETUTENT */
X  int UserCount;
X
X# ifdef UTNOKEEP
X  InitUtmp();
X# endif /* UTNOKEEP */
X  debug1("CountUsers() - utmpok=%d\n", utmpok);
X  if (!utmpok)
X    return(0);
X  UserCount = 0;
X# ifdef GETUTENT
X  setutent();
X  while (ut = getutent())
X    if (ut->ut_type == USER_PROCESS)
X      UserCount++;
X# else /* GETUTENT */
X  (void) lseek(utmpfd, (off_t) 0, 0);
X  while (read(utmpfd, &utmpbuf, sizeof(struct utmp)) > 0)
X    {
X      if (utmpbuf.ut_name[0] != '\0')
X       UserCount++;
X    }
X# endif /* GETUTENT */
X# ifdef UTNOKEEP
X  close(utmpfd);
X# endif /* UTNOKEEP */
X  return(UserCount);
X}
X#endif /* USRLIMIT */
X
X
X
X/*
X * the utmp entry for tty is located and removed.
X * it is stored in d_utmp_logintty.
X */
Xvoid
XRemoveLoginSlot()
X{
X# ifdef GETUTENT
X  struct utmp *uu;
X# endif /* GETUTENT */
X  struct utmp u;	/* 'empty' slot that we write back */
X# ifdef _SEQUENT_
X  char *p;
X# endif /* _SEQUENT_ */
X
X  ASSERT(display);
X  debug("RemoveLoginSlot: removing your logintty\n");
X  d_loginslot = TtyNameSlot(d_usertty);
X# ifdef UTNOKEEP
X  InitUtmp();
X# endif /* UTNOKEEP */
X  if (!utmpok)
X    {
X      debug("RemoveLoginSlot: utmpok == 0\n");
X      return;
X    }
X  if (d_loginslot == (slot_t)0 || d_loginslot == (slot_t)-1)
X    {
X      return;
X    }
X# ifdef _SEQUENT_
X  if (p = ut_find_host(d_loginslot))
X    strncpy(d_loginhost, p, sizeof(d_loginhost) - 1);
X  d_loginhost[sizeof(d_loginhost) - 1] = 0;
X# endif /* _SEQUENT_ */
X
X  bzero((char *) &u, sizeof u);
X
X# ifdef GETUTENT
X  setutent();
X  strncpy(u.ut_line, d_loginslot, sizeof(u.ut_line));
X  if ((uu = getutline(&u)) == 0)
X    {
X      Msg(0, "Utmp slot not found -> not removed");
X      return;
X    }
X  d_utmp_logintty = *uu;
X#  ifdef _SEQUENT_
X  if (ut_delete_user(d_loginslot, uu->ut_pid, 0, 0) == 0)
X#  else /* _SEQUENT_ */
X  u = *uu;
X  u.ut_type = DEAD_PROCESS;
X  u.ut_exit.e_termination = 0;
X  u.ut_exit.e_exit= 0;
X  if (pututline(&u) == 0)
X#  endif /* _SEQUENT_ */
X
X# else /* GETUTENT */
X
X  (void) lseek(utmpfd, (off_t) (d_loginslot * sizeof u), 0);
X  bzero((char *)&d_utmp_logintty, sizeof u);
X  if (read(utmpfd, (char *) &d_utmp_logintty, sizeof u) != sizeof u)
X    {
X      Msg(errno, "cannot read %s ??", UTMPFILE);
X      sleep(1);
X    }
X  (void) lseek(utmpfd, (off_t) (d_loginslot * sizeof u), 0);
X#  ifdef UTNOKEEP
X  /* 
X   * as the utmp file is not sorted, we want to mark this slot occupied,
X   * as RestoreLoginSlot() will write exactly here.
X   */
X  bcopy((char *)&d_utmp_logintty, (char *)&u, sizeof u);
X  bzero(u.ut_name, sizeof(u.ut_name));
X  bzero(u.ut_host, sizeof(u.ut_host));
X#  endif /* UTNOKEEP */
X  if (write(utmpfd, (char *) &u, sizeof u) != sizeof u)
X
X# endif /* GETUTENT */
X
X    {
X# ifdef NETHACK
X      if (nethackflag)
X	{
X	  Msg(errno, "%s is too hard to dig in", UTMPFILE); 
X	}
X      else
X# endif /* NETHACK */
X	{
X	  Msg(errno, "Could not write %s", UTMPFILE);
X	}
X    }
X# ifdef UTNOKEEP
X  close(utmpfd);
X# endif /* UTNOKEEP */
X  debug1(" slot %d zapped\n", (int)d_loginslot);
X}
X
X/*
X * d_utmp_logintty is reinserted into utmp
X */
Xvoid
XRestoreLoginSlot()
X{
X  debug("RestoreLoginSlot()\n");
X  ASSERT(display);
X# ifdef UTNOKEEP
X  InitUtmp();
X# endif /* UTNOKEEP */
X  if (utmpok && d_loginslot != (slot_t)0 && d_loginslot != (slot_t)-1)
X    {
X# ifdef GETUTENT
X#  ifdef _SEQUENT_
X      int fail;
X      debug1(" logging you in again (slot %s)\n", d_loginslot);
X/*
X * We have problems if we add the console and use ut_add_user()
X * because the id will be 'scon' instead of 'co'. So we
X * restore it with pututline(). The reason why we don't use
X * pututline all the time is that we want to set the host field.
X * Unfortunatelly this can only be done with ut_add_user().
X */
X      if (*d_loginhost)
X        {
X          fail = (ut_add_user(d_utmp_logintty.ut_name, d_loginslot, d_utmp_logintty.ut_pid,
X                              *d_loginhost ? d_loginhost : (char *)0) == 0);
X        }
X      else
X        {
X          setutent();
X          fail = (pututline(&d_utmp_logintty) == 0);
X        }
X      if (fail)
X#  else	/* _SEQUENT_ */
X      debug1(" logging you in again (slot %s)\n", d_loginslot);
X      setutent();
X      if (pututline(&d_utmp_logintty)==0)
X#  endif	/* _SEQUENT */
X# else	/* GETUTENT */
X      debug1(" logging you in again (slot %d)\n", d_loginslot);
X#  ifdef sequent
X      /* 
X       * call sequent undocumented routine to count logins 
X       * and add utmp entry if possible 
X       */
X      if (add_utmp(d_loginslot, &d_utmp_logintty) == -1)
X#  else /* sequent */
X      (void) lseek(utmpfd, (off_t) (d_loginslot * sizeof(struct utmp)), 0);
X      if (write(utmpfd, (char *) &d_utmp_logintty, sizeof(struct utmp))
X	  != sizeof(struct utmp))
X#  endif /* sequent */
X# endif	/* GETUTENT */
X        {
X# ifdef NETHACK
X          if (nethackflag)
X            Msg(errno, "%s is too hard to dig in", UTMPFILE);
X	  else
X# endif /* NETHACK */
X          Msg(errno,"Could not write %s", UTMPFILE);
X        }
X    }
X# ifdef UTNOKEEP
X  close(utmpfd);
X# endif /* UTNOKEEP */
X  d_loginslot = (slot_t) 0;
X}
X
X
X
X/*
X * Construct a utmp entry for window wi.
X * the hostname field reflects what we know about the d_user (i.e. display)
X * location. If d_loginhost is not set, then he is local and we write
X * down the name of his terminal line; else he is remote and we keep
X * the hostname here. The letter S and the window id will be appended.
X * A saved utmp entry in wi->w_savut serves as a template, usually.
X */ 
X
Xint
XSetUtmp(wi)
Xstruct win *wi;
X{
X  register char *p;
X  register slot_t slot;
X# ifndef _SEQUENT_
X  char *line;
X# endif
X  struct utmp u;
X  int saved_ut;
X# ifdef UTHOST
X#  ifdef _SEQUENT_
X  char host[100+5];
X#  else /* _SEQUENT_ */
X  char host[sizeof(d_utmp_logintty.ut_host)+5];
X#  endif /* _SEQUENT_ */
X# endif /* UTHOST */
X
X  wi->w_slot = (slot_t) 0;
X  if (!utmpok)
X    return -1;
X  if ((slot = TtyNameSlot(wi->w_tty)) == (slot_t) NULL)
X    {
X      debug1("SetUtmp failed (tty %s).\n",wi->w_tty);
X      return -1;
X    }
X  debug2("SetUtmp %d will get slot %d...\n", wi->w_number, (int)slot);
X# ifdef UTNOKEEP
X  /* open here, as TtyNameSlot used (and closed) our filedescriptor */
X  InitUtmp();
X# endif /* UTNOKEEP */
X
X  bzero((char *) &u, sizeof u);
X  if ((saved_ut = bcmp((char *) &wi->w_savut, (char *) &u, sizeof u)))
X    /* restore original, of which we will adopt all fields but ut_host */
X    bcopy((char *) &wi->w_savut, (char *) &u, sizeof u);
X
X# ifdef UTHOST
X  host[sizeof(host)-5] = '\0';
X  if (display)
X    {
X#  ifdef _SEQUENT_
X      strncpy(host, d_loginhost, sizeof(host) - 5);
X#  else /* _SEQUENT */
X      strncpy(host, d_utmp_logintty.ut_host, sizeof(host) - 5);
X#  endif /* _SEQUENT */
X      if (d_loginslot != (slot_t)0 && d_loginslot != (slot_t)-1 && host[0] != '\0')
X	{
X	  /*
X	   * we want to set our ut_host field to something like
X	   * ":ttyhf:s.0" or
X	   * "faui45:s.0" or
X	   * "132.199.81.4:s.0" (even this may hurt..), but not
X	   * "faui45.informati"......:s.0
X	   */
X	  for (p = host; *p; p++)
X	    if ((*p < '0' || *p > '9') && (*p != '.'))
X	      break;
X	  if (*p)
X	    {
X	      for (p = host; *p; p++)
X		if (*p == '.')
X		  {
X		    *p = '\0';
X		    break;
X		  }
X	    }
X	}
X      else
X	{
X	  strncpy(host + 1, stripdev(d_usertty), sizeof(host) - 6);
X	  host[0] = ':';
X	}
X    }
X  else
X    strncpy(host, "local", sizeof(host) - 5);
X  sprintf(host + strlen(host), ":S.%c", '0' + wi->w_number);
X  debug1("rlogin hostname: '%s'\n", host);
X#  if !defined(_SEQUENT_) && !defined(sequent)
X  strncpy(u.ut_host, host, sizeof(u.ut_host));
X#  endif
X# endif /* UTHOST */
X
X# ifdef _SEQUENT_
X  if (ut_add_user(saved_ut ? u.ut_user : LoginName, slot, saved_ut ? u.ut_pid : wi->w_pid, host) == 0)
X# else /* _SEQUENT_ */
X  if (!saved_ut)
X    { /* make new utmp from scratch */
X      line = stripdev(wi->w_tty);
X#  ifdef GETUTENT
X      strncpy(u.ut_user, LoginName, sizeof(u.ut_user));
X#   ifdef sgi
X      strncpy(u.ut_id, line + 3, sizeof(u.ut_id));
X#   else /* sgi */
X      strncpy(u.ut_id, line + strlen(line) - 2, sizeof(u.ut_id));
X#   endif /* sgi */
X      strncpy(u.ut_line, line, sizeof(u.ut_line));
X      u.ut_pid = wi->w_pid;
X      u.ut_type = USER_PROCESS;
X      (void) time((time_t *)&u.ut_time);
X    } /* !saved_ut {-: */
X  setutent();
X  if (pututline(&u) == 0)
X#  else	/* GETUTENT */
X      strncpy(u.ut_line, line, sizeof(u.ut_line));
X      strncpy(u.ut_name, LoginName, sizeof(u.ut_name));
X#   if defined(linux)	/* should have GETUTENT */
X      u.ut_type = USER_PROCESS;
X      u.ut_pid = wi->w_pid;
X      strncpy(u.ut_id, line + 3, sizeof(u.ut_id));
X#   endif /* linux */
X      (void) time((time_t *)&u.ut_time); /* cast needed for ultrix */
X    } /* !saved_ut */
X#   ifdef sequent
X  /*
X   * call sequent undocumented routine to count logins and 
X   * add utmp entry if possible 
X   */
X  if (add_utmp(slot, &u) == -1)
X#   else /* sequent */
X  (void) lseek(utmpfd, (off_t) (slot * sizeof u), 0);
X  if (write(utmpfd, (char *) &u, sizeof u) != sizeof u)
X#   endif /* sequent */
X#  endif /* GETUTENT */
X# endif /* _SEQUENT_ */
X
X    {
X# ifdef NETHACK
X      if (nethackflag)
X        Msg(errno, "%s is too hard to dig in", UTMPFILE);
X      else
X# endif /* NETHACK */
X      Msg(errno,"Could not write %s", UTMPFILE);
X# ifdef UTNOKEEP
X      close(utmpfd);
X# endif /* UTNOKEEP */
X      return -1;
X    }
X  debug("SetUtmp successful\n");
X  wi->w_slot = slot;
X# ifdef UTNOKEEP
X  close(utmpfd);
X# endif /* UTNOKEEP */
X  bcopy((char *) &u, (char *) &wi->w_savut, sizeof u);
X  return 0;
X}
X
X
X
X/*
X * if slot could be removed or was 0,  wi->w_slot = -1;
X * else not changed.
X */
X
Xint
XRemoveUtmp(wi)
Xstruct win *wi;
X{
X# ifdef GETUTENT
X  struct utmp *uu;
X# endif /* GETUTENT */
X  struct utmp u;
X  slot_t slot;
X
X  slot = wi->w_slot;
X# ifdef GETUTENT
X  debug1("RemoveUtmp(%s)\n", (slot == (slot_t) 0) ?
X         "no slot (0)":((slot == (slot_t) -1) ? "no slot (-1)" : slot));
X# else /* GETUTENT */
X  debug1("RemoveUtmp(wi.slot: %d)\n", slot);
X# endif /* GETUTENT */
X# ifdef UTNOKEEP
X  InitUtmp();
X# endif /* UTNOKEEP */
X  if (!utmpok)
X    return -1;
X  if (slot == (slot_t) 0 || slot == (slot_t) -1)
X    {
X      debug1("There is no utmp-slot to be removed(%d)\n", (int)slot);
X      wi->w_slot = (slot_t) -1;
X      return 0;
X    }
X  bzero((char *) &u, sizeof u);
X# ifdef GETUTENT
X  setutent();
X#  ifdef sgi
X  bcopy((char *) &wi->w_savut, (char *) &u, sizeof u);
X  uu  = &u;
X#  else
X  strncpy(u.ut_line, slot, sizeof(u.ut_line));
X  if ((uu = getutline(&u)) == 0)
X    {
X      Msg(0, "Utmp slot not found -> not removed");
X      return -1;
X    }
X  bcopy((char *)uu, (char *)&wi->w_savut, sizeof(wi->w_savut));
X#  endif
X#  ifdef _SEQUENT_
X  if (ut_delete_user(slot, uu->ut_pid, 0, 0) == 0)
X#  else /* _SEQUENT_ */
X  u = *uu;
X  u.ut_type = DEAD_PROCESS;
X  u.ut_exit.e_termination = 0;
X  u.ut_exit.e_exit= 0;
X  if (pututline(&u) == 0)
X#  endif /* _SEQUENT_ */
X# else /* GETUTENT */
X  (void) lseek(utmpfd, (off_t) (slot * sizeof(u)), 0);
X  if (read(utmpfd, (char *) &wi->w_savut, sizeof(wi->w_savut)) != sizeof u)
X    {
X      bzero((char *)&wi->w_savut, sizeof(wi->w_savut));
X      Msg(errno, "cannot read %s?", UTMPFILE);
X      sleep(1);
X    }
X  (void) lseek(utmpfd, (off_t) (slot * sizeof(u)), 0);
X#  ifdef UTNOKEEP
X  bcopy((char *)&wi->w_savut, (char *)&u, sizeof(u));
X  bzero(u.ut_name, sizeof(u.ut_name));
X  bzero(u.ut_host, sizeof(u.ut_host));
X#  endif /* UTNOKEEP */
X  if (write(utmpfd, (char *) &u, sizeof(u)) != sizeof(u))
X# endif /* GETUTENT */
X    {
X# ifdef NETHACK
X      if (nethackflag)
X        Msg(errno, "%s is too hard to dig in", UTMPFILE);
X      else
X# endif /* NETHACK */
X      Msg(errno,"Could not write %s", UTMPFILE);
X# ifdef UTNOKEEP
X      close(utmpfd);
X# endif /* UTNOKEEP */
X      return -1;
X    }
X  debug("RemoveUtmp successfull\n");
X  wi->w_slot = (slot_t) -1;
X# ifdef UTNOKEEP
X  close(utmpfd);
X# endif /* UTNOKEEP */
X  return 0;
X}
X
X
X
X/*
X * TtyNameSlot:
X * return an index, where the named tty is found in utmp.
X */
X
Xstatic slot_t 
XTtyNameSlot(nam)
Xchar *nam;
X{
X  char *name;
X  register slot_t slot;
X# ifdef UTNOKEEP
X  struct utmp u;
X# else
X#  ifndef GETUTENT
X  register struct ttyent *tp;
X#  endif /* GETUTENT */
X# endif /* UTNOKEEP */
X
X  debug1("TtyNameSlot(%s)\n", nam);
X# ifdef UTNOKEEP
X  InitUtmp();
X# endif /* UTNOKEEP */
X  if (!utmpok || nam == NULL)
X    return (slot_t)0;
X  name = stripdev(nam);
X# ifdef GETUTENT
X  slot = name;
X# else /* GETUTENT */
X#  ifdef UTNOKEEP
X  slot = 0;
X  while ((read(utmpfd, (char *)&u, sizeof(u)) == sizeof(u))
X         && (strcmp(u.ut_line, name)))
X    slot++;
X  close(utmpfd);
X#  else /* UTNOKEEP */
X  slot = 1;
X  setttyent();
X  while ((tp = getttyent()) != NULL && strcmp(name, tp->ty_name) != 0)
X    slot++;
X#  endif /* UTNOKEEP */
X# endif /* GETUTENT */
X  return slot;
X}
X
X
X
X# if !defined(GETTTYENT) && !defined(GETUTENT) && !defined(UTNOKEEP)
X
Xstatic void
Xsetttyent()
X{
X  struct stat s;
X  register int f;
X  register char *p, *ep;
X
X  if (ttnext)
X    {
X      ttnext = tt;
X      return;
X    }
X  if ((f = open(ttys, O_RDONLY)) == -1 || fstat(f, &s) == -1)
X    Panic(errno, ttys);
X  if ((tt = malloc((unsigned) s.st_size + 1)) == 0)
X    Panic(0, strnomem);
X  if (read(f, tt, s.st_size) != s.st_size)
X    Panic(errno, ttys);
X  close(f);
X  for (p = tt, ep = p + s.st_size; p < ep; ++p)
X    if (*p == '\n')
X      *p = '\0';
X  *p = '\0';
X  ttnext = tt;
X}
X
Xstatic struct ttyent *
Xgetttyent()
X{
X  static struct ttyent t;
X
X  if (*ttnext == '\0')
X    return NULL;
X  t.ty_name = ttnext + 2;
X  ttnext += strlen(ttnext) + 1;
X  return &t;
X}
X
X# endif	/* !GETTTYENT && !GETUTENT && !UTNOKEEP */
X
X
X#endif /* UTMPOK */
X
X
X
X/*********************************************************************
X *
X *  getlogin() replacement (for SVR4 machines)
X */
X
X# if defined(BUGGYGETLOGIN)
Xchar *
Xgetlogin()
X{
X  char *tty;
X#ifdef utmp
X# undef utmp
X#endif
X  struct utmp u;
X  static char retbuf[sizeof(u.ut_user)+1];
X  int fd;
X
X  for (fd = 0; fd <= 2 && (tty = ttyname(fd)) == NULL; fd++)
X    ;
X  if ((tty == NULL) || ((fd = open(UTMP_FILE, O_RDONLY)) < 0))
X    return NULL;
X  tty = stripdev(tty);
X  retbuf[0] = '\0';
X  while (read(fd, (char *)&u, sizeof(struct utmp)) == sizeof(struct utmp))
X    {
X      if (!strncmp(tty, u.ut_line, sizeof(u.ut_line)))
X	{
X	  strncpy(retbuf, u.ut_user, sizeof(u.ut_user));
X	  retbuf[sizeof(u.ut_user)] = '\0';
X	  if (u.ut_type == USER_PROCESS)
X	    break;
X	}
X    }
X  close(fd);
X
X  return *retbuf ? retbuf : NULL;
X}
X# endif /* BUGGYGETLOGIN */
X
END_OF_FILE
if test 18975 -ne `wc -c <'utmp.c'`; then
    echo shar: \"'utmp.c'\" unpacked with wrong size!
fi
# end of 'utmp.c'
fi
echo shar: End of archive 3 \(of 10\).
cp /dev/null ark3isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 10 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
