Newsgroups: comp.sources.unix
From: screen@uni-erlangen.de (Juergen & Michael)
Subject: v27i018: screen-3.5.1 - full-screen window manager/multiplexor, Part05/10
References: <1.744844979.5722@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: screen@uni-erlangen.de (Juergen & Michael)
Posting-Number: Volume 27, Issue 18
Archive-Name: screen-3.5.1/part05

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 5 (of 10)."
# Contents:  ansi.c terminfo/test.txt
# Wrapped by vixie@gw.home.vix.com on Sun Aug  8 14:19:05 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'ansi.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'ansi.c'\"
else
echo shar: Extracting \"'ansi.c'\" \(40936 characters\)
sed "s/^X//" >'ansi.c' <<'END_OF_FILE'
X/* Copyright (c) 1993
X *      Juergen Weigert (jnweiger@immd4.informatik.uni-erlangen.de)
X *      Michael Schroeder (mlschroe@immd4.informatik.uni-erlangen.de)
X * Copyright (c) 1987 Oliver Laumann
X *
X * This program is free software; you can redistribute it and/or modify
X * it under the terms of the GNU General Public License as published by
X * the Free Software Foundation; either version 2, or (at your option)
X * any later version.
X *  
X * This program is distributed in the hope that it will be useful,
X * but WITHOUT ANY WARRANTY; without even the implied warranty of
X * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X * GNU General Public License for more details.
X *
X * You should have received a copy of the GNU General Public License
X * along with this program (see the file COPYING); if not, write to the
X * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X ****************************************************************
X */
X
X#include "rcs.h"
XRCS_ID("$Id: ansi.c,v 1.16 1993/08/05 14:23:28 mlschroe Exp $ FAU")
X
X#include <stdio.h>
X#include <sys/types.h>
X#include <fcntl.h>
X#ifndef sun	/* we want to know about TIOCPKT. */
X# include <sys/ioctl.h>
X#endif
X#include "config.h"
X#include "screen.h"
X#include "extern.h"
X
Xextern char *getenv(), *tgetstr(), *tgoto();
X#ifndef __STDC__
Xextern char *malloc();
X#endif
X
Xextern struct win *windows;	/* linked list of all windows */
Xextern struct win *fore;
Xextern struct display *display, *displays;
X
Xextern int  force_vt;
Xextern int  all_norefresh;	/* => display */
Xextern int  ZombieKey;
Xextern time_t Now;
X
Xint maxwidth;			/* maximum of all widths so far */
X
Xint Z0width, Z1width;		/* widths for Z0/Z1 switching */
X
Xstatic struct win *curr;	/* window we are working on */
Xstatic int rows, cols;		/* window size of the curr window */
X
Xint default_wrap = 1;		/* default: wrap on */
Xint default_monitor = 0; 
X
Xint visual_bell = 0;
Xint use_hardstatus = 1;
X
Xchar *blank;			/* line filled with spaces */
Xchar *null;			/* line filled with '\0' */
Xchar *OldImage, *OldAttr, *OldFont;	/* temporary buffers */
X
Xstatic void WinProcess __P((char **, int *));
Xstatic void WinRedisplayLine __P((int, int, int, int));
Xstatic void WinClearLine __P((int, int, int));
Xstatic int  WinRewrite __P((int, int, int, int));
Xstatic void WinSetCursor __P((void));
Xstatic int  WinResize __P((int, int));
Xstatic void WinRestore __P((void));
Xstatic int  Special __P((int));
Xstatic void DoESC __P((int, int ));
Xstatic void DoCSI __P((int, int ));
Xstatic void SetChar __P((int));
Xstatic void StartString __P((enum string_t));
Xstatic void SaveChar __P((int ));
Xstatic void PrintChar __P((int ));
Xstatic void PrintFlush __P((void));
Xstatic void DesignateCharset __P((int, int ));
Xstatic void MapCharset __P((int));
Xstatic void SaveCursor __P((void));
Xstatic void RestoreCursor __P((void));
Xstatic void BackSpace __P((void));
Xstatic void Return __P((void));
Xstatic void LineFeed __P((int));
Xstatic void ReverseLineFeed __P((void));
Xstatic void InsertAChar __P((int));
Xstatic void InsertChar __P((int));
Xstatic void DeleteChar __P((int));
Xstatic void DeleteLine __P((int));
Xstatic void InsertLine __P((int));
Xstatic void ScrollUpMap __P((int));
Xstatic void ScrollDownMap __P((int));
Xstatic void Scroll __P((char *, int, int, char *));
Xstatic void ForwardTab __P((void));
Xstatic void BackwardTab __P((void));
Xstatic void ClearScreen __P((void));
Xstatic void ClearFromBOS __P((void));
Xstatic void ClearToEOS __P((void));
Xstatic void ClearFullLine __P((void));
Xstatic void ClearToEOL __P((void));
Xstatic void ClearFromBOL __P((void));
Xstatic void ClearInLine __P((int, int, int));
Xstatic void CursorRight __P((int));
Xstatic void CursorUp __P((int));
Xstatic void CursorDown __P((int));
Xstatic void CursorLeft __P((int));
Xstatic void ASetMode __P((int));
Xstatic void SelectRendition __P((void));
Xstatic void RestorePosAttrFont __P((void));
Xstatic void FillWithEs __P((void));
Xstatic void UpdateLine __P((char *, char *, char *, int, int, int ));
Xstatic void FindAKA __P((void));
Xstatic void Report __P((char *, int, int));
X
X
X/*
X *  The window layer functions
X */
X
Xstruct LayFuncs WinLf =
X{
X  WinProcess,
X  0,
X  WinRedisplayLine,
X  WinClearLine,
X  WinRewrite,
X  WinSetCursor,
X  WinResize,
X  WinRestore
X};
X
Xstatic void
XWinProcess(bufpp, lenp)
Xchar **bufpp;
Xint *lenp;
X{
X  int f, *ilen, l = *lenp;
X  char *ibuf;
X  
X  fore = d_fore;
X  /* if w_wlock is set, only one user may write, else we check acls */
X  if (fore->w_ptyfd < 0)
X    {
X      SetCurr(fore);
X      Special('\007');
X      while ((*lenp)-- > 0)
X        {
X	  if (*(*bufpp)++ == ZombieKey)
X	    {
X	      debug2("Turning undead: %d(%s)\n", fore->w_number, fore->w_title);
X	      KillWindow(fore);
X	      break;
X	    }
X	}
X      *bufpp += *lenp;
X      *lenp = 0;
X      return;
X    }
X#ifdef MULTIUSER
X  if ((fore->w_wlock == WLOCK_OFF) ? 
X      AclCheckPermWin(d_user, ACL_WRITE, fore) :
X      (d_user != fore->w_wlockuser))
X    {
X      SetCurr(fore);
X      Special('\007');
X      *bufpp += *lenp;
X      *lenp = 0;
X      return;
X    }
X#endif /* MULTIUSER */
X#ifdef PSEUDOS
X  if (W_UWP(fore))
X    {
X      /* we send the user input to our pseudowin */
X      ibuf = fore->w_pwin->p_inbuf; ilen = &fore->w_pwin->p_inlen;
X      f = sizeof(fore->w_pwin->p_inbuf) - *ilen;
X    }
X  else
X#endif /* PSEUDOS */
X    {
X      /* we send the user input to the window */
X      ibuf = fore->w_inbuf; ilen = &fore->w_inlen;
X      f = sizeof(fore->w_inbuf) - *ilen;
X    }
X  if (l > f)
X    {
X      debug1("Yuck! pty buffer full (%d chars missing). lets beep\n", l - f);
X      SetCurr(fore);
X      Special('\007');
X      l = f;
X    }
X  if (l > 0)
X    {
X      bcopy(*bufpp, ibuf + *ilen, l);
X      *ilen += l;
X    }
X  *bufpp += *lenp;
X  *lenp = 0;
X}
X
Xstatic void
XWinRedisplayLine(y, from, to, isblank)
Xint y, from, to, isblank;
X{
X  if (y < 0)
X    return;
X  fore = d_fore;
X  DisplayLine(isblank ? blank: null, null, null, fore->w_image[y],
X              fore->w_attr[y], fore->w_font[y], y, from, to);
X}
X
Xstatic int
XWinRewrite(y, x1, x2, doit)
Xint y, x1, x2, doit;
X{
X  register int cost, dx;
X  register char *p, *f, *i;
X
X  fore = d_fore;
X  dx = x2 - x1;
X  if (doit)
X    {
X      i = fore->w_image[y] + x1;
X      while (dx-- > 0)
X	PUTCHAR(*i++);
X      return(0);
X    }
X  p = fore->w_attr[y] + x1;
X  f = fore->w_font[y] + x1;
X
X  cost = dx = x2 - x1;
X  if (d_insert)
X    cost += d_EIcost + d_IMcost;
X  while(dx-- > 0)
X    {
X      if (*p++ != d_attr || *f++ != d_font)
X	return EXPENSIVE;
X    }
X  return cost;
X}
X
Xstatic void
XWinClearLine(y, xs, xe)
Xint y, xs, xe;
X{
X  fore = d_fore;
X  DisplayLine(fore->w_image[y], fore->w_attr[y], fore->w_font[y],
X	      blank, null, null, y, xs, xe);
X}
X
Xstatic void
XWinSetCursor()
X{
X  fore = d_fore;
X  GotoPos(fore->w_x, fore->w_y);
X}
X
Xstatic int
XWinResize(wi, he)
Xint wi, he;
X{
X  fore = d_fore;
X  if (fore)
X    ChangeWindowSize(fore, wi, he);
X  return 0;
X}
X
Xstatic void
XWinRestore()
X{
X  fore = d_fore;
X  ChangeScrollRegion(fore->w_top, fore->w_bot);
X  KeypadMode(fore->w_keypad);
X  CursorkeysMode(fore->w_cursorkeys);
X  SetFlow(fore->w_flow & FLOW_NOW);
X  InsertMode(fore->w_insert);
X  fore->w_active = 1;
X}
X
X/* 
X *  Activate - make fore window active
X *  norefresh = -1 forces a refresh, disregard all_norefresh then.
X */
Xvoid
XActivate(norefresh)
Xint norefresh;
X{
X  debug1("Activate(%d)\n", norefresh);
X  if (display == 0)
X    return;
X  RemoveStatus();
X  fore = d_fore;
X  if (fore)
X    {
X      ASSERT(fore->w_display == display);
X      fore->w_active = d_layfn == &WinLf;
X      if (fore->w_monitor != MON_OFF)
X	fore->w_monitor = MON_ON;
X      fore->w_bell = BELL_OFF;
X      if (ResizeDisplay(fore->w_width, fore->w_height))
X	{
X	  debug2("Cannot resize from (%d,%d)", d_width, d_height);
X	  debug2(" to (%d,%d) -> resize window\n", fore->w_width, fore->w_height);
X	  DoResize(d_width, d_height);
X	}
X    }
X  Redisplay(norefresh + all_norefresh);
X}
X
Xvoid
XResetWindow(p)
Xregister struct win *p;
X{
X  register int i;
X
X  p->w_wrap = default_wrap;
X  p->w_origin = 0;
X  p->w_insert = 0;
X  p->w_vbwait = 0;
X  p->w_keypad = 0;
X  p->w_cursorkeys = 0;
X  p->w_top = 0;
X  p->w_bot = p->w_height - 1;
X  p->w_saved = 0;
X  p->w_Attr = 0;
X  p->w_Font = 0;
X  p->w_x = p->w_y = 0;
X  p->w_state = LIT;
X  p->w_StringType = NONE;
X  p->w_ss = 0;
X  p->w_Charset = G0;
X  bzero(p->w_tabs, p->w_width);
X  for (i = 8; i < p->w_width; i += 8)
X    p->w_tabs[i] = 1;
X  for (i = G0; i <= G3; i++)
X    p->w_charsets[i] = ASCII;
X}
X
X
X/*
X *  Here comes the vt100 emulator
X */
Xvoid
XWriteString(wp, buf, len)
Xstruct win *wp;
Xregister char *buf;
Xregister int len;
X{
X  register int c;
X
X  if (!len)
X    return;
X  if (wp->w_logfp != NULL)
X    if ((int)fwrite(buf, len, 1, wp->w_logfp) < 1)
X      {
X	Msg(errno, "Error writing logfile");
X	fclose(wp->w_logfp);
X	wp->w_logfp = NULL;
X      }
X  /*
X   * SetCurr() here may prevent output, as it may set display = 0
X   */
X  SetCurr(wp);
X  if (display)
X    {
X      if (d_status && !(use_hardstatus && HS))
X	RemoveStatus();
X    }
X  else
X    {
X      if (curr->w_tstamp.seconds)
X        curr->w_tstamp.lastio = Now;
X
X      if (curr->w_monitor == MON_ON || curr->w_monitor == MON_DONE)
X	{
X          debug2("ACTIVITY %d %d\n", curr->w_monitor, curr->w_bell);
X          curr->w_monitor = MON_FOUND;
X	}
X    }
X  do
X    {
X      if (curr->w_Attr && curr->w_attr[curr->w_y] == null)
X	{
X	  if ((curr->w_attr[curr->w_y] = (char *)malloc(curr->w_width + 1)) == 0)
X	    {
X	      curr->w_attr[curr->w_y] = null;
X	      curr->w_Attr = 0;
X	      Msg(0, "Warning: no space for attr - turned off");
X	    }
X	  else
X	    bzero(curr->w_attr[curr->w_y], curr->w_width + 1);
X	}
X      if (curr->w_Font && curr->w_font[curr->w_y] == null)
X	{
X	  if ((curr->w_font[curr->w_y] = (char *)malloc(curr->w_width + 1)) == 0)
X	    {
X	      curr->w_font[curr->w_y] = null;
X              curr->w_Font = curr->w_charsets[curr->w_ss ? curr->w_ss : curr->w_Charset] = 0;
X	      Msg(0, "Warning: no space for font - turned off");
X	    }
X	  else
X	    bzero(curr->w_font[curr->w_y], curr->w_width + 1);
X	}
X
X      c = (unsigned char)*buf++;
X      if (c == '\177')
X	continue;
X
X      /* The next part is only for speedup */
X      if (curr->w_state == LIT &&
X          c >= ' ' && ((c & 0x80) == 0 || display == 0 || !CB8) &&
X          !curr->w_insert && !curr->w_ss && curr->w_x < cols - 1)
X	{
X	  register int currx;
X	  register char *imp, *atp, *fop, at, fo;
X
X	  currx = curr->w_x;
X	  imp = curr->w_image[curr->w_y] + currx;
X	  atp = curr->w_attr[curr->w_y] + currx;
X	  fop = curr->w_font[curr->w_y] + currx;
X	  at = curr->w_Attr;
X	  fo = curr->w_Font;
X	  if (display)
X	    {
X	      if (d_x != currx || d_y != curr->w_y)
X		GotoPos(currx, curr->w_y);
X	      if (at != d_attr)
X		SetAttr(at);
X	      if (fo != d_font)
X		SetFont(fo);
X	      if (d_insert)
X		InsertMode(0);
X	    }
X	  while (currx < cols - 1)
X	    {
X	      if (display)
X		AddChar(d_font != '0' ? c : d_c0_tab[c]);
X	      *imp++ = c;
X	      *atp++ = at;
X	      *fop++ = fo;
X	      currx++;
Xskip:	      if (--len == 0)
X		break;
X              c = (unsigned char)*buf++;
X	      if (c == '\177')
X		goto skip;
X	      if (c < ' ' || ((c & 0x80) && display && CB8))
X		break;
X	    }
X	  curr->w_x = currx;
X	  if (display)
X	    d_x = currx;
X	  if (len == 0)
X	    break;
X	}
X      /* end of speedup code */
X
X      if ((c & 0x80) && display && CB8)
X	{
X	  FILE *logfp = wp->w_logfp;
X	  char *cb8 = CB8;
X	
X	  wp->w_logfp = NULL;	/* a little hack */
X	  CB8 = NULL;		/* dito */
X	  WriteString(wp, cb8, (int)strlen(cb8));
X	  wp->w_logfp = logfp;
X	  CB8 = cb8;
X	  c &= 0x7f;
X	}
X    tryagain:
X      switch (curr->w_state)
X	{
X	case PRIN:
X	  switch (c)
X	    {
X	    case '\033':
X	      curr->w_state = PRINESC;
X	      break;
X	    default:
X	      PrintChar(c);
X	    }
X	  break;
X	case PRINESC:
X	  switch (c)
X	    {
X	    case '[':
X	      curr->w_state = PRINCSI;
X	      break;
X	    default:
X	      PrintChar('\033');
X	      PrintChar(c);
X	      curr->w_state = PRIN;
X	    }
X	  break;
X	case PRINCSI:
X	  switch (c)
X	    {
X	    case '4':
X	      curr->w_state = PRIN4;
X	      break;
X	    default:
X	      PrintChar('\033');
X	      PrintChar('[');
X	      PrintChar(c);
X	      curr->w_state = PRIN;
X	    }
X	  break;
X	case PRIN4:
X	  switch (c)
X	    {
X	    case 'i':
X	      curr->w_state = LIT;
X	      PrintFlush();
X	      break;
X	    default:
X	      PrintChar('\033');
X	      PrintChar('[');
X	      PrintChar('4');
X	      PrintChar(c);
X	      curr->w_state = PRIN;
X	    }
X	  break;
X	case STRESC:
X	  switch (c)
X	    {
X	    case '\\':
X	      curr->w_state = LIT;
X	      *(curr->w_stringp) = '\0';
X	      switch (curr->w_StringType)
X		{
X		case GM:
X		    {
X		      struct display *old = display;
X		      for (display = displays; display; display = display->_d_next)
X			if (display != old)
X			  MakeStatus(curr->w_string);
X		      display = old;
X		    }
X		  /*FALLTHROUGH*/
X		case PM:
X		  if (!display)
X		    break;
X		  MakeStatus(curr->w_string);
X		  if (d_status && !(use_hardstatus && HS) && len > 1)
X		    {
X		      curr->w_outlen = len - 1;
X		      bcopy(buf, curr->w_outbuf, curr->w_outlen);
X		      return;
X		    }
X		  break;
X		case DCS:
X		  if (display)
X		    AddStr(curr->w_string);
X		  break;
X		case AKA:
X		  if (curr->w_title == curr->w_akabuf && !*curr->w_string)
X		    break;
X		  ChangeAKA(curr, curr->w_string, 20);
X		  if (!*curr->w_string)
X		    curr->w_autoaka = curr->w_y + 1;
X		  break;
X		default:
X		  break;
X		}
X	      break;
X	    default:
X	      curr->w_state = ASTR;
X	      SaveChar('\033');
X	      SaveChar(c);
X	    }
X	  break;
X	case ASTR:
X	  switch (c)
X	    {
X	    case '\0':
X	      break;
X	    case '\033':
X	      curr->w_state = STRESC;
X	      break;
X	    default:
X	      SaveChar(c);
X	    }
X	  break;
X	case ESC:
X	  switch (c)
X	    {
X	    case '[':
X	      curr->w_NumArgs = 0;
X	      curr->w_intermediate = 0;
X	      bzero((char *) curr->w_args, MAXARGS * sizeof(int));
X	      curr->w_state = CSI;
X	      break;
X	    case ']':
X	      StartString(OSC);
X	      break;
X	    case '_':
X	      StartString(APC);
X	      break;
X	    case 'P':
X	      StartString(DCS);
X	      break;
X	    case '^':
X	      StartString(PM);
X	      break;
X	    case '!':
X	      StartString(GM);
X	      break;
X	    case '"':
X	    case 'k':
X	      StartString(AKA);
X	      break;
X	    default:
X	      if (Special(c))
X		break;
X	      debug1("not special. c = %x\n", c);
X	      if (c >= ' ' && c <= '/')
X		curr->w_intermediate = curr->w_intermediate ? -1 : c;
X	      else if (c >= '0' && c <= '~')
X		{
X		  DoESC(c, curr->w_intermediate);
X		  curr->w_state = LIT;
X		}
X	      else
X		{
X		  curr->w_state = LIT;
X		  goto tryagain;
X		}
X	    }
X	  break;
X	case CSI:
X	  switch (c)
X	    {
X	    case '0':
X	    case '1':
X	    case '2':
X	    case '3':
X	    case '4':
X	    case '5':
X	    case '6':
X	    case '7':
X	    case '8':
X	    case '9':
X	      if (curr->w_NumArgs < MAXARGS)
X		{
X		  curr->w_args[curr->w_NumArgs] =
X		    10 * curr->w_args[curr->w_NumArgs] + c - '0';
X		}
X	      break;
X	    case ';':
X	    case ':':
X	      curr->w_NumArgs++;
X	      break;
X	    default:
X	      if (Special(c))
X		break;
X	      if (c >= '@' && c <= '~')
X		{
X		  curr->w_NumArgs++;
X		  DoCSI(c, curr->w_intermediate);
X		  if (curr->w_state != PRIN)
X		    curr->w_state = LIT;
X		}
X	      else if ((c >= ' ' && c <= '/') || (c >= '<' && c <= '?'))
X		curr->w_intermediate = curr->w_intermediate ? -1 : c;
X	      else
X		{
X		  curr->w_state = LIT;
X		  goto tryagain;
X		}
X	    }
X	  break;
X	case LIT:
X	default:
X	  if (c < ' ')
X	    {
X	      if (c == '\033')
X		{
X		  curr->w_intermediate = 0;
X		  curr->w_state = ESC;
X		  if (display && d_lp_missing && (CIC || IC || IM))
X		    UpdateLine(blank, null, null, d_bot, cols - 2, cols - 1);
X		  if (curr->w_autoaka < 0)
X		    curr->w_autoaka = 0;
X		}
X	      else
X		Special(c);
X	      break;
X	    }
X	  if (display)
X	    {
X	      if (d_attr != curr->w_Attr)
X		SetAttr(curr->w_Attr);
X	      if (d_font != curr->w_Font)
X		SetFont(curr->w_Font);
X	    }
X	  if (curr->w_x < cols - 1)
X	    {
X	      if (curr->w_insert)
X		InsertAChar(c);
X	      else
X		{
X		  if (display)
X		    PUTCHAR(c);
X		  SetChar(c);
X		  curr->w_x++;
X		}
X	    }
X	  else if (curr->w_x == cols - 1)
X	    {
X	      if (display && curr->w_wrap && (CLP || !force_vt || COP))
X		{
X		  RAW_PUTCHAR(c);	/* don't care about d_insert */
X		  SetChar(c);
X		  if (AM && !CLP)
X		    LineFeed(0);	/* terminal auto-wrapped */
X		  else
X		    curr->w_x++;
X		}
X	      else
X		{
X		  if (display)
X		    {
X		      if (CLP || curr->w_y != d_bot)
X			{
X			  RAW_PUTCHAR(c);
X			  GotoPos(curr->w_x, curr->w_y);
X			}
X		      else
X			CheckLP(c);
X		    }
X		  SetChar(c);
X		  if (curr->w_wrap)
X		    curr->w_x++;
X		}
X	    }
X	  else /* curr->w_x > cols - 1 */
X	    {
X              SetChar(0);		/* we wrapped */
X	      if (curr->w_insert)
X		{
X		  LineFeed(2);		/* cr+lf, handle LP */
X		  InsertAChar(c);
X		}
X	      else
X		{
X		  if (display && d_x != cols)	/* write char again */
X		    {
X		      SetAttrFont(curr->w_attr[curr->w_y][cols - 1],
X                                  curr->w_font[curr->w_y][cols - 1]);
X		      RAW_PUTCHAR(curr->w_image[curr->w_y][cols - 1]);
X		      SetAttrFont(curr->w_Attr, curr->w_Font);
X		      if (curr->w_y == d_bot)
X			d_lp_missing = 0;	/* just wrote it */
X		    }
X		  LineFeed((display == 0 || AM) ? 0 : 2);
X		  if (display)
X		    PUTCHAR(c);
X		  SetChar(c);
X		  curr->w_x = 1;
X		}
X	    }
X	  if (curr->w_ss)
X	    {
X	      SetFont(curr->w_Font = curr->w_charsets[curr->w_Charset]);
X	      curr->w_ss = 0;
X	    }
X	  break;
X	}
X    }
X  while (--len);
X  curr->w_outlen = 0;
X  if (curr->w_state == PRIN)
X    PrintFlush();
X}
X
Xstatic int
XSpecial(c)
Xregister int c;
X{
X  switch (c)
X    {
X    case '\b':
X      BackSpace();
X      return 1;
X    case '\r':
X      Return();
X      return 1;
X    case '\n':
X      if (curr->w_autoaka)
X	FindAKA();
X      LineFeed(1);
X      return 1;
X    case '\007':
X      if (display == 0)
X	curr->w_bell = BELL_ON;
X      else
X	{
X	  if (!visual_bell)
X	    PutStr(BL);
X	  else
X	    {
X	      if (!VB)
X		curr->w_bell = BELL_VISUAL;
X	      else
X		PutStr(VB);
X	    }
X	}
X      return 1;
X    case '\t':
X      ForwardTab();
X      return 1;
X    case '\017':		/* SI */
X      MapCharset(G0);
X      return 1;
X    case '\016':		/* SO */
X      MapCharset(G1);
X      return 1;
X    }
X  return 0;
X}
X
Xstatic void
XDoESC(c, intermediate)
Xint c, intermediate;
X{
X  debug2("DoESC: %x - inter = %x\n", c, intermediate);
X  switch (intermediate)
X    {
X    case 0:
X      switch (c)
X	{
X	case 'E':
X	  LineFeed(2);
X	  break;
X	case 'D':
X	  LineFeed(1);
X	  break;
X	case 'M':
X	  ReverseLineFeed();
X	  break;
X	case 'H':
X	  curr->w_tabs[curr->w_x] = 1;
X	  break;
X	case 'Z':		/* jph: Identify as VT100 */
X	  Report("\033[?%d;%dc", 1, 2);
X	  break;
X	case '7':
X	  SaveCursor();
X	  break;
X	case '8':
X	  RestoreCursor();
X	  break;
X	case 'c':
X	  ClearScreen();
X	  ResetWindow(curr);
X	  SetAttrFont(0, ASCII);
X	  InsertMode(0);
X	  KeypadMode(0);
X	  CursorkeysMode(0);
X	  ChangeScrollRegion(0, rows - 1);
X	  break;
X	case '=':
X	  KeypadMode(curr->w_keypad = 1);
X#ifndef TIOCPKT
X	  NewAutoFlow(curr, 0);
X#endif /* !TIOCPKT */
X	  break;
X	case '>':
X	  KeypadMode(curr->w_keypad = 0);
X#ifndef TIOCPKT
X	  NewAutoFlow(curr, 1);
X#endif /* !TIOCPKT */
X	  break;
X	case 'n':		/* LS2 */
X	  MapCharset(G2);
X	  break;
X	case 'o':		/* LS3 */
X	  MapCharset(G3);
X	  break;
X	case 'N':		/* SS2 */
X	  if (curr->w_charsets[curr->w_Charset] != curr->w_charsets[G2])
X	    curr->w_Font = curr->w_charsets[curr->w_ss = G2];
X	  else
X	    curr->w_ss = 0;
X	  break;
X	case 'O':		/* SS3 */
X	  if (curr->w_charsets[curr->w_Charset] != curr->w_charsets[G3])
X	    curr->w_Font = curr->w_charsets[curr->w_ss = G3];
X	  else
X	    curr->w_ss = 0;
X	  break;
X	}
X      break;
X    case '#':
X      switch (c)
X	{
X	case '8':
X	  FillWithEs();
X	  break;
X	}
X      break;
X    case '(':
X      DesignateCharset(c, G0);
X      break;
X    case ')':
X      DesignateCharset(c, G1);
X      break;
X    case '*':
X      DesignateCharset(c, G2);
X      break;
X    case '+':
X      DesignateCharset(c, G3);
X      break;
X    }
X}
X
Xstatic void
XDoCSI(c, intermediate)
Xint c, intermediate;
X{
X  register int i, a1 = curr->w_args[0], a2 = curr->w_args[1];
X
X  if (curr->w_NumArgs > MAXARGS)
X    curr->w_NumArgs = MAXARGS;
X  switch (intermediate)
X    {
X    case 0:
X      switch (c)
X	{
X	case 'H':
X	case 'f':
X	  if (a1 < 1)
X	    a1 = 1;
X	  if (curr->w_origin)
X	    a1 += curr->w_top;
X	  if (a1 > rows)
X	    a1 = rows;
X	  if (a2 < 1)
X	    a2 = 1;
X	  if (a2 > cols)
X	    a2 = cols;
X	  GotoPos(--a2, --a1);
X	  curr->w_x = a2;
X	  curr->w_y = a1;
X	  if (curr->w_autoaka)
X	    curr->w_autoaka = a1 + 1;
X	  break;
X	case 'J':
X	  if (a1 < 0 || a1 > 2)
X	    a1 = 0;
X	  switch (a1)
X	    {
X	    case 0:
X	      ClearToEOS();
X	      break;
X	    case 1:
X	      ClearFromBOS();
X	      break;
X	    case 2:
X	      ClearScreen();
X	      GotoPos(curr->w_x, curr->w_y);
X	      break;
X	    }
X	  break;
X	case 'K':
X	  if (a1 < 0 || a1 > 2)
X	    a1 %= 3;
X	  switch (a1)
X	    {
X	    case 0:
X	      ClearToEOL();
X	      break;
X	    case 1:
X	      ClearFromBOL();
X	      break;
X	    case 2:
X	      ClearFullLine();
X	      break;
X	    }
X	  break;
X	case 'A':
X	  CursorUp(a1 ? a1 : 1);
X	  break;
X	case 'B':
X	  CursorDown(a1 ? a1 : 1);
X	  break;
X	case 'C':
X	  CursorRight(a1 ? a1 : 1);
X	  break;
X	case 'D':
X	  CursorLeft(a1 ? a1 : 1);
X	  break;
X	case 'm':
X	  SelectRendition();
X	  break;
X	case 'g':
X	  if (a1 == 0)
X	    curr->w_tabs[curr->w_x] = 0;
X	  else if (a1 == 3)
X	    bzero(curr->w_tabs, cols);
X	  break;
X	case 'r':
X	  if (!a1)
X	    a1 = 1;
X	  if (!a2)
X	    a2 = rows;
X	  if (a1 < 1 || a2 > rows || a1 >= a2)
X	    break;
X	  curr->w_top = a1 - 1;
X	  curr->w_bot = a2 - 1;
X	  ChangeScrollRegion(curr->w_top, curr->w_bot);
X	  if (curr->w_origin)
X	    {
X	      GotoPos(0, curr->w_top);
X	      curr->w_y = curr->w_top;
X	      curr->w_x = 0;
X	    }
X	  else
X	    {
X	      GotoPos(0, 0);
X	      curr->w_y = curr->w_x = 0;
X	    }
X	  break;
X	case 's':
X	  SaveCursor();
X	  break;
X	case 't':
X	  if (a1 != 8)
X	    break;
X	  a1 = curr->w_args[2];
X	  if (a1 < 1)
X	    a1 = curr->w_width;
X	  if (a2 < 1)
X	    a2 = curr->w_height;
X	  if (display && CWS == NULL)
X	    {
X	      a2 = curr->w_height;
X	      if (CZ0 == NULL || (a1 != Z0width && a1 != Z1width))
X	        a1 = curr->w_width;
X 	    }
X	  if (a1 == curr->w_width && a2 == curr->w_height)
X	    break;
X          ChangeWindowSize(curr, a1, a2);
X	  SetCurr(curr);
X	  if (display)
X	    Activate(0);
X	  break;
X	case 'u':
X	  RestoreCursor();
X	  break;
X	case 'I':
X	  if (!a1)
X	    a1 = 1;
X	  while (a1--)
X	    ForwardTab();
X	  break;
X	case 'Z':
X	  if (!a1)
X	    a1 = 1;
X	  while (a1--)
X	    BackwardTab();
X	  break;
X	case 'L':
X	  InsertLine(a1 ? a1 : 1);
X	  break;
X	case 'M':
X	  DeleteLine(a1 ? a1 : 1);
X	  break;
X	case 'P':
X	  DeleteChar(a1 ? a1 : 1);
X	  break;
X	case '@':
X	  InsertChar(a1 ? a1 : 1);
X	  break;
X	case 'h':
X	  ASetMode(1);
X	  break;
X	case 'l':
X	  ASetMode(0);
X	  break;
X	case 'i':
X	  if (display && PO && a1 == 5)
X	    {
X	      curr->w_stringp = curr->w_string;
X	      curr->w_state = PRIN;
X	    }
X	  break;
X	case 'n':
X	  if (a1 == 5)		/* Report terminal status */
X	    Report("\033[0n", 0, 0);
X	  else if (a1 == 6)		/* Report cursor position */
X	    Report("\033[%d;%dR", curr->w_y + 1, curr->w_x + 1);
X	  break;
X	case 'c':		/* Identify as VT100 */
X	  Report("\033[?%d;%dc", 1, 2);
X	  break;
X	}
X      break;
X    case '?':
X      for (a2 = 0; a2 < curr->w_NumArgs; a2++)
X	{
X	  a1 = curr->w_args[a2];
X	  debug2("\\E[?%d%c\n",a1,c);
X	  if (c != 'h' && c != 'l')
X	    break;
X	  i = (c == 'h');
X	  switch (a1)
X	    {
X	    case 1:
X	      CursorkeysMode(curr->w_cursorkeys = i);
X    #ifndef TIOCPKT
X	      NewAutoFlow(curr, !i);
X    #endif /* !TIOCPKT */
X	      break;
X	    case 3:
X	      i = (i ? Z0width : Z1width);
X	      if (curr->w_width != i && (display == 0 || (CZ0 || CWS)))
X		{
X		  ChangeWindowSize(curr, i, curr->w_height);
X		  SetCurr(curr);	/* update rows/cols */
X		  if (display)
X		    Activate(0);
X		}
X	      break;
X	    case 5:
X	      if (i)
X		curr->w_vbwait = 1;
X	      else
X		{
X		  if (display && curr->w_vbwait)
X		    PutStr(VB);
X		  curr->w_vbwait = 0;
X		}
X	      break;
X	    case 6:
X	      if ((curr->w_origin = i) != 0)
X		{
X		  curr->w_y = curr->w_top;
X		  curr->w_x = 0;
X		}
X	      else
X		curr->w_y = curr->w_x = 0;
X	      if (display)
X		GotoPos(curr->w_x, curr->w_y);
X	      break;
X	    case 7:
X	      curr->w_wrap = i;
X	      break;
X	    case 35:
X	      debug1("Cursor %svisible\n", i ? "in" : "");
X	      curr->w_cursor_invisible = i;
X	      break;
X	    }
X	}
X      break;
X    }
X}
X
X
Xstatic void
XSetChar(c)
Xregister int c;
X{
X  register struct win *p = curr;
X
X  p->w_image[p->w_y][p->w_x] = c;
X  p->w_attr[p->w_y][p->w_x] = p->w_Attr;
X  p->w_font[p->w_y][p->w_x] = p->w_Font;
X}
X
Xstatic void
XStartString(type)
Xenum string_t type;
X{
X  curr->w_StringType = type;
X  curr->w_stringp = curr->w_string;
X  curr->w_state = ASTR;
X}
X
Xstatic void
XSaveChar(c)
Xint c;
X{
X  if (curr->w_stringp >= curr->w_string + MAXSTR - 1)
X    curr->w_state = LIT;
X  else
X    *(curr->w_stringp)++ = c;
X}
X
Xstatic void
XPrintChar(c)
Xint c;
X{
X  if (curr->w_stringp >= curr->w_string + MAXSTR - 1)
X    PrintFlush();
X  *(curr->w_stringp)++ = c;
X}
X
Xstatic void
XPrintFlush()
X{
X  if (display && curr->w_stringp > curr->w_string)
X    {
X      PutStr(PO);
X      AddStrn(curr->w_string, curr->w_stringp - curr->w_string);
X      PutStr(PF);
X      Flush();
X    }
X  curr->w_stringp = curr->w_string;
X}
X
X
Xvoid
XNewAutoFlow(win, on)
Xstruct win *win;
Xint on;
X{
X  debug1("NewAutoFlow: %d\n", on);
X  SetCurr(win);
X  if (win->w_flow & FLOW_AUTOFLAG)
X    win->w_flow = FLOW_AUTOFLAG | (FLOW_AUTO|FLOW_NOW) * on;
X  else
X    win->w_flow = (win->w_flow & ~FLOW_AUTO) | FLOW_AUTO * on;
X  if (display)
X    SetFlow(win->w_flow & FLOW_NOW);
X}
X
Xstatic void
XDesignateCharset(c, n)
Xint c, n;
X{
X  curr->w_ss = 0;
X  if (c == 'B')
X    c = ASCII;
X  if (curr->w_charsets[n] != c)
X    {
X      curr->w_charsets[n] = c;
X      if (curr->w_Charset == n)
X	SetFont(curr->w_Font = c);
X    }
X}
X
Xstatic void
XMapCharset(n)
Xint n;
X{
X  curr->w_ss = 0;
X  if (curr->w_Charset != n)
X    {
X      curr->w_Charset = n;
X      SetFont(curr->w_Font = curr->w_charsets[n]);
X    }
X}
X
Xstatic void
XSaveCursor()
X{
X  curr->w_saved = 1;
X  curr->w_Saved_x = curr->w_x;
X  curr->w_Saved_y = curr->w_y;
X  curr->w_SavedAttr = curr->w_Attr;
X  curr->w_SavedCharset = curr->w_Charset;
X  bcopy((char *) curr->w_charsets, (char *) curr->w_SavedCharsets,
X	4 * sizeof(int));
X}
X
Xstatic void
XRestoreCursor()
X{
X  if (curr->w_saved)
X    {
X      GotoPos(curr->w_Saved_x, curr->w_Saved_y);
X      curr->w_x = curr->w_Saved_x;
X      curr->w_y = curr->w_Saved_y;
X      curr->w_Attr = curr->w_SavedAttr;
X      SetAttr(curr->w_Attr);
X      bcopy((char *) curr->w_SavedCharsets, (char *) curr->w_charsets,
X	    4 * sizeof(int));
X      curr->w_Charset = curr->w_SavedCharset;
X      curr->w_ss = 0;
X      SetFont(curr->w_Font = curr->w_charsets[curr->w_Charset]);
X    }
X}
X
Xstatic void
XBackSpace()
X{
X  if (curr->w_x > 0)
X    {
X      curr->w_x--;
X    }
X  else if (curr->w_wrap && curr->w_y > 0)
X    {
X      curr->w_x = cols - 1;
X      curr->w_y--;
X    }
X  if (display)
X    GotoPos(curr->w_x, curr->w_y);
X}
X
Xstatic void
XReturn()
X{
X  if (curr->w_x > 0)
X    {
X      curr->w_x = 0;
X      if (display)
X        GotoPos(curr->w_x, curr->w_y);
X    }
X}
X
Xstatic void
XLineFeed(out_mode)
Xint out_mode;
X{
X  /* out_mode: 0=cr+lf no-output, 1=lf, 2=cr+lf */
X  if (out_mode != 1)
X    curr->w_x = 0;
X  if (curr->w_y != curr->w_bot)		/* Don't scroll */
X    {
X      if (curr->w_y < rows-1)
X	curr->w_y++;
X      if (out_mode && display)
X	GotoPos(curr->w_x, curr->w_y);
X      return;
X    }
X  ScrollUpMap(1);
X  if (curr->w_autoaka > 1)
X    curr->w_autoaka--;
X  if (out_mode && display)
X    {
X      ScrollRegion(curr->w_top, curr->w_bot, 1);
X      GotoPos(curr->w_x, curr->w_y);
X    }
X}
X
Xstatic void
XReverseLineFeed()
X{
X  if (curr->w_y == curr->w_top)
X    {
X      ScrollDownMap(1);
X      if (!display)
X	return;
X      ScrollRegion(curr->w_top, curr->w_bot, -1);
X      GotoPos(curr->w_x, curr->w_y);
X    }
X  else if (curr->w_y > 0)
X    CursorUp(1);
X}
X
Xstatic void
XInsertAChar(c)
Xint c;
X{
X  register int y = curr->w_y, x = curr->w_x;
X
X  if (x == cols)
X    x--;
X  bcopy(curr->w_image[y], OldImage, cols);
X  bcopy(curr->w_attr[y], OldAttr, cols);
X  bcopy(curr->w_font[y], OldFont, cols);
X  bcopy(curr->w_image[y] + x, curr->w_image[y] + x + 1, cols - x - 1);
X  bcopy(curr->w_attr[y] + x, curr->w_attr[y] + x + 1, cols - x - 1);
X  bcopy(curr->w_font[y] + x, curr->w_font[y] + x + 1, cols - x - 1);
X  SetChar(c);
X  curr->w_x = x + 1;
X  if (!display)
X    return;
X  if (CIC || IC || IM)
X    {
X      InsertMode(curr->w_insert);
X      INSERTCHAR(c);
X      if (y == d_bot)
X	d_lp_missing = 0;
X    }
X  else
X    UpdateLine(OldImage, OldAttr, OldFont, y, x, cols - 1);
X}
X
Xstatic void
XInsertChar(n)
Xint n;
X{
X  register int i, y = curr->w_y, x = curr->w_x;
X
X  if (n <= 0)
X    return;
X  /* Hack to be compatible with the old screen versions */
X  if (curr->w_insert)
X    return;
X  if (x == cols)
X    x--;
X  bcopy(curr->w_image[y], OldImage, cols);
X  bcopy(curr->w_attr[y], OldAttr, cols);
X  bcopy(curr->w_font[y], OldFont, cols);
X  if (n > cols - x)
X    n = cols - x;
X  bcopy(curr->w_image[y] + x, curr->w_image[y] + x + n, cols - x - n);
X  bcopy(curr->w_attr[y] + x, curr->w_attr[y] + x + n, cols - x - n);
X  bcopy(curr->w_font[y] + x, curr->w_font[y] + x + n, cols - x - n);
X  ClearInLine(y, x, x + n - 1);
X  if (!display)
X    return;
X  if (IC || CIC || IM)
X    {
X      if (y == d_bot)
X	d_lp_missing = 0;
X      if (!d_insert)
X	{
X	  if (n == 1 && IC)
X	    {
X	      PutStr(IC);
X	      return;
X            }
X	  if (CIC)
X	    {
X	      CPutStr(CIC, n);
X	      return;
X            }
X	}
X      InsertMode(1);
X      for (i = n; i--; )
X	INSERTCHAR(' ');
X      GotoPos(x, y);
X    }
X  else
X    UpdateLine(OldImage, OldAttr, OldFont, y, x, cols - 1);
X}
X
Xstatic void
XDeleteChar(n)
Xint n;
X{
X  register int i, y = curr->w_y, x = curr->w_x;
X
X  if (x == cols)
X    x--;
X  bcopy(curr->w_image[y], OldImage, cols);
X  bcopy(curr->w_attr[y], OldAttr, cols);
X  bcopy(curr->w_font[y], OldFont, cols);
X  if (n > cols - x)
X    n = cols - x;
X  bcopy(curr->w_image[y] + x + n, curr->w_image[y] + x, cols - x - n);
X  bcopy(curr->w_attr[y] + x + n, curr->w_attr[y] + x, cols - x - n);
X  bcopy(curr->w_font[y] + x + n, curr->w_font[y] + x, cols - x - n);
X  ClearInLine(y, cols - n, cols - 1);
X  if (!display)
X    return;
X  if (CDC && !(n == 1 && DC))
X    {
X      CPutStr(CDC, n);
X      if (d_lp_missing && y == d_bot)
X	{
X	  FixLP(cols - 1 - n, y);
X          GotoPos(x, y);
X	}
X    }
X  else if (DC)
X    {
X      for (i = n; i; i--)
X	PutStr(DC);
X      if (d_lp_missing && y == d_bot)
X	{
X	  FixLP(cols - 1 - n, y);
X          GotoPos(x, y);
X	}
X    }
X  else
X    UpdateLine(OldImage, OldAttr, OldFont, y, x, cols - 1);
X}
X
Xstatic void
XDeleteLine(n)
Xint n;
X{
X  register int old = curr->w_top;
X  
X  if (curr->w_y < curr->w_top || curr->w_y > curr->w_bot)
X    return;
X  if (n > curr->w_bot - curr->w_y + 1)
X    n = curr->w_bot - curr->w_y + 1;
X  curr->w_top = curr->w_y;
X  ScrollUpMap(n);
X  curr->w_top = old;
X  if (!display)
X    return;
X  ScrollRegion(curr->w_y, curr->w_bot, n);
X  GotoPos(curr->w_x, curr->w_y);
X}
X
Xstatic void
XInsertLine(n)
Xint n;
X{
X  register int old = curr->w_top;
X
X  if (curr->w_y < curr->w_top || curr->w_y > curr->w_bot)
X    return;
X  if (n > curr->w_bot - curr->w_y + 1)
X    n = curr->w_bot - curr->w_y + 1;
X  curr->w_top = curr->w_y;
X  ScrollDownMap(n);
X  curr->w_top = old;
X  if (!display)
X    return;
X  ScrollRegion(curr->w_y, curr->w_bot, -n);
X  GotoPos(curr->w_x, curr->w_y);
X}
X
X
Xstatic void
XScrollUpMap(n)
Xint n;
X{
X  char tmp[256 * sizeof(char *)];
X  register int i, cnt1, cnt2;
X  register char **ppi, **ppa, **ppf;
X#ifdef COPY_PASTE
X  register int ii;
X#endif
X
X  i = curr->w_top + n;
X  cnt1 = n * sizeof(char *);
X  cnt2 = (curr->w_bot - i + 1) * sizeof(char *);
X  ppi = curr->w_image + i;
X  ppa = curr->w_attr + i;
X  ppf = curr->w_font + i;
X#ifdef COPY_PASTE
X  for(ii = curr->w_top; ii < i; ii++)
X     AddLineToHist(curr, &curr->w_image[ii], &curr->w_attr[ii], &curr->w_font[ii]);
X#endif
X  for (i = n; i; --i)
X    {
X      bclear(*--ppi, cols + 1);
X      bzero(*--ppa, cols + 1);
X      bzero(*--ppf, cols + 1);
X    }
X  Scroll((char *) ppi, cnt1, cnt2, tmp);
X  Scroll((char *) ppa, cnt1, cnt2, tmp);
X  Scroll((char *) ppf, cnt1, cnt2, tmp);
X}
X
Xstatic void
XScrollDownMap(n)
Xint n;
X{
X  char tmp[256 * sizeof(char *)];
X  register int i, cnt1, cnt2;
X  register char **ppi, **ppa, **ppf;
X
X  i = curr->w_top;
X  cnt1 = (curr->w_bot - i - n + 1) * sizeof(char *);
X  cnt2 = n * sizeof(char *);
X  Scroll((char *) (ppi = curr->w_image + i), cnt1, cnt2, tmp);
X  Scroll((char *) (ppa = curr->w_attr + i), cnt1, cnt2, tmp);
X  Scroll((char *) (ppf = curr->w_font + i), cnt1, cnt2, tmp);
X  for (i = n; i; --i)
X    {
X      bclear(*ppi++, cols + 1);
X      bzero(*ppa++, cols + 1);
X      bzero(*ppf++, cols + 1);
X    }
X}
X
Xstatic void
XScroll(cp, cnt1, cnt2, tmp)
Xchar *cp, *tmp;
Xint cnt1, cnt2;
X{
X  if (!cnt1 || !cnt2)
X    return;
X  if (cnt1 <= cnt2)
X    {
X      bcopy(cp, tmp, cnt1);
X      bcopy(cp + cnt1, cp, cnt2);
X      bcopy(tmp, cp + cnt2, cnt1);
X    }
X  else
X    {
X      bcopy(cp + cnt1, tmp, cnt2);
X      bcopy(cp, cp + cnt2, cnt1);
X      bcopy(tmp, cp, cnt2);
X    }
X}
X
Xstatic void
XForwardTab()
X{
X  register int x = curr->w_x;
X
X  if (x == cols)
X    {
X      LineFeed(2);
X      x = 0;
X    }
X  if (curr->w_tabs[x] && x < cols - 1)
X    x++;
X  while (x < cols - 1 && !curr->w_tabs[x])
X    x++;
X  GotoPos(x, curr->w_y);
X  curr->w_x = x;
X}
X
Xstatic void
XBackwardTab()
X{
X  register int x = curr->w_x;
X
X  if (curr->w_tabs[x] && x > 0)
X    x--;
X  while (x > 0 && !curr->w_tabs[x])
X    x--;
X  GotoPos(x, curr->w_y);
X  curr->w_x = x;
X}
X
Xstatic void
XClearScreen()
X{
X  register int i;
X  register char **ppi = curr->w_image, **ppa = curr->w_attr, **ppf = curr->w_font;
X
X  for (i = 0; i < rows; ++i)
X    {
X#ifdef COPY_PASTE
X      AddLineToHist(curr, ppi, ppa, ppf);
X#endif
X      bclear(*ppi++, cols + 1);
X      bzero(*ppa++, cols + 1);
X      bzero(*ppf++, cols + 1);
X    }
X  if (display)
X    ClearDisplay();
X}
X
Xstatic void
XClearFromBOS()
X{
X  register int n, y = curr->w_y, x = curr->w_x;
X
X  if (display)
X    Clear(0, 0, x, y);
X  for (n = 0; n < y; ++n)
X    ClearInLine(n, 0, cols - 1);
X  ClearInLine(y, 0, x);
X  RestorePosAttrFont();
X}
X
Xstatic void
XClearToEOS()
X{
X  register int n, y = curr->w_y, x = curr->w_x;
X
X  if (x == 0 && y == 0)
X    {
X      ClearScreen();
X      return;
X    }
X  if (display)
X    Clear(x, y, d_width - 1, d_height - 1);
X  ClearInLine(y, x, cols - 1);
X  for (n = y + 1; n < rows; n++)
X    ClearInLine(n, 0, cols - 1);
X  RestorePosAttrFont();
X}
X
Xstatic void
XClearFullLine()
X{
X  register int y = curr->w_y;
X
X  if (display)
X    Clear(0, y, d_width - 1, y);
X  ClearInLine(y, 0, cols - 1);
X  RestorePosAttrFont();
X}
X
Xstatic void
XClearToEOL()
X{
X  register int y = curr->w_y, x = curr->w_x;
X
X  if (display)
X    Clear(x, y, d_width - 1, y);
X  ClearInLine(y, x, cols - 1);
X  RestorePosAttrFont();
X}
X
Xstatic void
XClearFromBOL()
X{
X  register int y = curr->w_y, x = curr->w_x;
X
X  if (display)
X    Clear(0, y, x, y);
X  ClearInLine(y, 0, x);
X  RestorePosAttrFont();
X}
X
Xstatic void
XClearInLine(y, x1, x2)
Xint y, x1, x2;
X{
X  register int n;
X
X  if (x1 == cols)
X    x1--;
X  if (x2 == cols - 1)
X    x2++;
X  if ((n = x2 - x1 + 1) != 0)
X    {
X      bclear(curr->w_image[y] + x1, n);
X      bzero(curr->w_attr[y] + x1, n);
X      bzero(curr->w_font[y] + x1, n);
X    }
X}
X
Xstatic void
XCursorRight(n)
Xregister int n;
X{
X  register int x = curr->w_x;
X
X  if (x == cols)
X    {
X      LineFeed(2);
X      x = 0;
X    }
X  if ((curr->w_x += n) >= cols)
X    curr->w_x = cols - 1;
X  GotoPos(curr->w_x, curr->w_y);
X}
X
Xstatic void
XCursorUp(n)
Xregister int n;
X{
X  if (curr->w_y < curr->w_top)		/* if above scrolling rgn, */
X    {
X      if ((curr->w_y -= n) < 0)		/* ignore its limits      */
X         curr->w_y = 0;
X    }
X  else
X    if ((curr->w_y -= n) < curr->w_top)
X      curr->w_y = curr->w_top;
X  GotoPos(curr->w_x, curr->w_y);
X}
X
Xstatic void
XCursorDown(n)
Xregister int n;
X{
X  if (curr->w_y > curr->w_bot)		/* if below scrolling rgn, */
X    {
X      if ((curr->w_y += n) > rows - 1)	/* ignore its limits      */
X        curr->w_y = rows - 1;
X    }
X  else
X    if ((curr->w_y += n) > curr->w_bot)
X      curr->w_y = curr->w_bot;
X  GotoPos(curr->w_x, curr->w_y);
X}
X
Xstatic void
XCursorLeft(n)
Xregister int n;
X{
X  if ((curr->w_x -= n) < 0)
X    curr->w_x = 0;
X  GotoPos(curr->w_x, curr->w_y);
X}
X
Xstatic void
XASetMode(on)
Xint on;
X{
X  register int i;
X
X  for (i = 0; i < curr->w_NumArgs; ++i)
X    {
X      switch (curr->w_args[i])
X	{
X	case 4:
X	  curr->w_insert = on;
X	  InsertMode(on);
X	  break;
X	}
X    }
X}
X
Xstatic char rendlist[] =
X{
X  (1 << NATTR), A_BD, A_DI, A_SO, A_US, A_BL, 0, A_RV, 0, 0,
X  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
X  0, 0, ~(A_BD|A_SO|A_DI), ~A_SO, ~A_US, ~A_BL, 0, ~A_RV
X};
X
Xstatic void
XSelectRendition()
X{
X  register int j, i = 0, a = curr->w_Attr;
X
X  do
X    {
X      j = curr->w_args[i];
X      if (j < 0 || j >= (sizeof(rendlist)/sizeof(*rendlist)))
X	continue;
X      j = rendlist[j];
X      if (j & (1 << NATTR))
X        a &= j;
X      else
X        a |= j;
X    }
X  while (++i < curr->w_NumArgs);
X  SetAttr(curr->w_Attr = a);
X}
X
Xstatic void
XFillWithEs()
X{
X  register int i;
X  register char *p, *ep;
X
X  curr->w_y = curr->w_x = 0;
X  for (i = 0; i < rows; ++i)
X    {
X      bzero(curr->w_attr[i], cols);
X      bzero(curr->w_font[i], cols);
X      p = curr->w_image[i];
X      ep = p + cols;
X      while (p < ep)
X	*p++ = 'E';
X    }
X  if (display)
X    Redisplay(0);
X}
X
X
Xstatic void
XUpdateLine(os, oa, of, y, from, to)
Xint from, to, y;
Xchar *os, *oa, *of;
X{
X  ASSERT(display);
X  DisplayLine(os, oa, of, curr->w_image[y], curr->w_attr[y],
X	      curr->w_font[y], y, from, to);
X  RestorePosAttrFont();
X}
X
Xvoid
XCheckLP(n_ch)
Xchar n_ch;
X{
X  register int y, x;
X  register char n_at, n_fo, o_ch, o_at, o_fo;
X
X  ASSERT(display);
X  x = cols - 1;
X  y = d_bot;
X  o_ch = curr->w_image[y][x];
X  o_at = curr->w_attr[y][x];
X  o_fo = curr->w_font[y][x];
X
X  n_at = curr->w_Attr;
X  n_fo = curr->w_Font;
X
X  d_lp_image = n_ch;
X  d_lp_attr = n_at;
X  d_lp_font = n_fo;
X  d_lp_missing = 0;
X  if (n_ch == o_ch && n_at == o_at && n_fo == o_fo)
X    return;
X  if (n_ch != ' ' || n_at || n_fo)
X    d_lp_missing = 1;
X  if (o_ch != ' ' || o_at || o_fo)
X    {
X      if (DC)
X	PutStr(DC);
X      else if (CDC)
X	CPutStr(CDC, 1);
X      else if (CE)
X	PutStr(CE);
X      else
X	d_lp_missing = 1;
X    }
X}
X
X/*
X *  Ugly autoaka hack support:
X *    ChangeAKA() sets a new aka
X *    FindAKA() searches for an autoaka match
X */
X
Xvoid
XChangeAKA(p, s, l)
Xstruct win *p;
Xchar *s;
Xint l;
X{
X  if (l > 20)
X    l = 20;
X  strncpy(p->w_akachange, s, l);
X  p->w_akachange[l] = 0;
X  p->w_title = p->w_akachange;
X  if (p->w_akachange != p->w_akabuf)
X    if (p->w_akachange[0] == 0 || p->w_akachange[-1] == ':')
X      p->w_title = p->w_akabuf + strlen(p->w_akabuf) + 1;
X}
X
Xstatic void
XFindAKA()
X{
X  register char *cp, *line;
X  register struct win *wp = curr;
X  register int len = strlen(wp->w_akabuf);
X  int y;
X
X  y = (wp->w_autoaka > 0 && wp->w_autoaka <= wp->w_height) ? wp->w_autoaka - 1 : wp->w_y;
X  cols = wp->w_width;
X try_line:
X  cp = line = wp->w_image[y];
X  if (wp->w_autoaka > 0 &&  *wp->w_akabuf != '\0')
X    {
X      for (;;)
X	{
X	  if (cp - line >= cols - len)
X	    {
X	      if (++y == wp->w_autoaka && y < rows)
X		goto try_line;
X	      return;
X	    }
X	  if (strncmp(cp, wp->w_akabuf, len) == 0)
X	    break;
X	  cp++;
X	}
X      cp += len;
X    }
X  for (len = cols - (cp - line); len && *cp == ' '; len--, cp++)
X    ;
X  if (len)
X    {
X      if (wp->w_autoaka > 0 && (*cp == '!' || *cp == '%' || *cp == '^'))
X	wp->w_autoaka = -1;
X      else
X	wp->w_autoaka = 0;
X      line = cp;
X      while (len && *cp != ' ')
X	{
X	  if (*cp++ == '/')
X	    line = cp;
X	  len--;
X	}
X      ChangeAKA(wp, line, cp - line);
X    }
X  else
X    wp->w_autoaka = 0;
X}
X
Xvoid
XMakeBlankLine(p, n)
Xregister char *p;
Xregister int n;
X{
X  while (n--)
X    *p++ = ' ';
X}
X
Xvoid
XSetCurr(wp)
Xstruct win *wp;
X{
X  curr = wp;
X  if (curr == 0)
X    return;
X  cols = curr->w_width;
X  rows = curr->w_height;
X  display = curr->w_active ? curr->w_display : 0;
X}
X
Xstatic void
XRestorePosAttrFont()
X{
X  GotoPos(curr->w_x, curr->w_y);
X  SetAttr(curr->w_Attr);
X  SetFont(curr->w_Font);
X}
X
X/* Send a terminal report as if it were typed. */ 
Xstatic void
XReport(fmt, n1, n2)
Xchar *fmt;
Xint n1, n2;
X{
X  register int len;
X  char rbuf[40];
X
X  sprintf(rbuf, fmt, n1, n2);
X  len = strlen(rbuf);
X
X  if ((unsigned)(curr->w_inlen + len) <= sizeof(curr->w_inbuf))
X    {
X      bcopy(rbuf, curr->w_inbuf + curr->w_inlen, len);
X      curr->w_inlen += len;
X    }
X}
X
X#ifdef COPY_PASTE
Xvoid
XAddLineToHist(wp, pi, pa, pf)
Xstruct win *wp;
Xchar **pi, **pa, **pf;
X{
X  register char *q, *o;
X
X  if (wp->w_histheight == 0)
X    return;
X  q = *pi; *pi = wp->w_ihist[wp->w_histidx]; wp->w_ihist[wp->w_histidx] = q;
X  q = *pa; o = wp->w_ahist[wp->w_histidx]; wp->w_ahist[wp->w_histidx] = q;
X  if (o != null)
X    free(o);
X 
X  q = *pf; o = wp->w_fhist[wp->w_histidx]; wp->w_fhist[wp->w_histidx] = q;
X  if (o != null)
X    free(o);
X  *pa = *pf = null;
X  if (++wp->w_histidx >= wp->w_histheight)
X    wp->w_histidx = 0;
X}
X#endif
END_OF_FILE
if test 40936 -ne `wc -c <'ansi.c'`; then
    echo shar: \"'ansi.c'\" unpacked with wrong size!
fi
# end of 'ansi.c'
fi
if test -f 'terminfo/test.txt' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'terminfo/test.txt'\"
else
echo shar: Extracting \"'terminfo/test.txt'\" \(38899 characters\)
sed "s/^X//" >'terminfo/test.txt' <<'END_OF_FILE'
X
X<[H[J(A)0[?4h[?5l[m
X 
X 
X 
X 
X 
X 
X 
X 
X 
X    lqqqqqqqqqwwwqqqqqqqqqk                sssssssssssssssssssssssssssss
X    x[1mMerry Chr[mx[1mx[mx[1mmas * Mer[mx                \                           /
X    xry Christx[1mx[mx * Merry x                 pr                       rp
X    x[1mChristmas[mx[1mx[mx[1mMerry Chr[mx                   oqrs               srqo
X    xistmas * x[1mx[mxry Christx                       ooppqqwqwqqppoo
X    tqqqqqqqqqj[1mx[mmqqqqqqqqqu                             x x
X    t[1mqqqqqqqqqq`qqqqqqqqqq[mu                             x x
X    tqqqqqqqqqk[1mx[mlqqqqqqqqqu                             x x
X    xry Christx[1mx[mx * Merry x                             x x
X    x[1mChristmas[mx[1mx[mx[1mMerry Chr[mx                             x x
X    xistmas * x[1mx[mxry Christx                             x x
X    x[1mmas * Mer[mx[1mx[mx[1mChristmas[mx                         srqqj mqqrs
X    mqqqqqqqqqvvvqqqqqqqqqj                    [4m rqpo           opqr [m[1;10r
X[5;79Hl[8;79Hm[6;79Hx[7;79Hx
X[5;78Hlq[8;78Hmq[6;78Hx [7;78Hx 
X[5;77Hlqw[8;77Hmqv[6;77Hx x[7;77Hx x
X[5;76Hlqwq[8;76Hmqvq[6;76Hx x [7;76Hx x 
X[5;75Hlqwq[8;75Hmqvq[6;75Hx x [7;75Hx x 
X[5;74Hlqwq[8;74Hmqvq[6;74Hx x [7;74Hx x 
X[5;73Hlqwq[8;73Hmqvq[6;73Hx x [7;73Hx x 
X[5;72Hlqwq[8;72Hmqvq[6;72Hx x [7;72Hx x 
X[5;71Hlqwq[8;71Hmqvq[6;71Hx x [7;71Hx x 
X[5;70Hlqwq[8;70Hmqvq[6;70Hx x [7;70Hx x 
X[8;69H/[7;69H/
X[9;69H/[8;68H/ 
X[10;69H/[9;68H[1m/[m [8;68H /[7;69H [6;69H/
X[11;69H[1;4m/[m[10;68H/ [9;68H [1m/[m[8;68H /[7;68H[1m/[m/
X[12;69H[1m/[m[11;68H[1;4m/ [m[10;68H /[9;69H[1m/[m[8;68H/[7;68H[1m/[m 
X[13;69H/[12;68H/ [11;68H[4m /[m[10;69H[1m/[m[9;68H[1m/[m/[7;68H /[6;69H[1m/[m
X[13;68H[1m/[m [12;68H [1m/[m[10;68H//[9;68H/[8;68H [7;68H[1m/[m [6;69H/
X[13;68H /[11;68H[4m/[m[9;68H [8;68H/ [7;68H//[6;69H 
X[13;68H/[12;68H[1m/[m[10;68H [9;68H[1m/[m  [8;68H/[1m/[m[7;68H [6;69H[1m/[m
X[13;68H[1m/[m[12;68H/[11;68Hs[10;68H[1m/[m [9;68H//[8;69H [6;69H 
X[14;53Hsssssssssss
X[13;68H/[12;68H [11;68H[1;4m/ [m[10;68H//[9;69H [8;68H [1m/[m[7;68H/ [6;69H[1m/[m
X[14;52Hs[14;64Hs
X[13;68H [12;68H/ [11;68H[4m/[1m/[m[10;69H [9;68H /[8;68H/ [7;68H [1m/[m[6;69H/
X[14;53Hrrrrrrrrrrr
X[13;68H[1m/[m [12;69H/[11;69Hs[10;68H [1m/[m[9;68H[1m/[m [8;68H /[7;69H/
X[14;54Hqqqqqqqqq
X[13;68H/[1m/[m[12;69H [11;68H[4m /[m[10;68H/ [9;68H /[7;68H[1m/[m
X[14;52Hsrqqqqqqqqqrs
X[13;69H [12;68H [1m/[m[11;68H[4m/ [m[10;68H [1m/[m[8;68H[1m/[m[7;68H/
X[14;51Hsr[14;64Hrs
X[13;69H/[12;68H/ [11;68H[4m /[m[10;69H[1m/[m[9;68H[1m/[m/[7;68H /[6;69H[1m/[m
X[14;51Hrrqq[14;62Hqqrr
X[13;68H[1m/[m [12;68H [1m/[m[10;68H//[9;68H/[8;68H [7;68H[1m/[m [6;69H/
X[14;55Hppppppp
X[13;68H /[11;68H[4m/[m[9;68H [8;68H/ [7;68H//[6;69H 
X[14;51Hrrq[14;63Hqrr
X[13;68H/[12;68H[1m/[m[10;68H [9;68H[1m/[m  [8;68H/[1m/[m[7;68H [6;69H[1m/[m
X[14;51Hrqpp[14;62Hppqr
X[13;68H[1m/[m[12;68H/[11;68Hs[10;68H[1m/[m [9;68H//[8;69H [6;69H 
X 
X[14;50H[4mr[mqpppooooooopppq[4mr[m
X[13;68H/[12;68H [11;68H[1;4m/ [m[10;68H//[9;69H [8;68H [1m/[m[7;68H/ [6;69H[1m/[m
X[14;50H[4mq[mppooooooooooopp[4mq[m
X[13;68H [12;68H/ [11;68H[4m/[1m/[m[10;69H [9;68H /[8;68H/ [7;68H [1m/[m[6;69H/
X 
X 
X 
X[13;55Hsssssss[14;52Hooo       ooo[14;57H. o f
X 
X[13;68H[1m/[m [12;69H/[11;69Hs[10;68H [1m/[m[9;68H[1m/[m [8;68H /[7;69H/[14;56H.f    
X 
X[13;53Hss[13;62Hss[14;53H  .f       
X 
X[13;68H/[1m/[m[12;69H [11;68H[4m /[m[10;68H/ [9;68H /[7;68H[1m/[m[14;53H       f
X 
X[13;48Hssssrrrrqqqqqrrrrssss[14;50Hs               s
X 
X[13;69H [12;68H [1m/[m[11;68H[4m/ [m[10;68H [1m/[m[8;68H[1m/[m[7;68H/[14;51H.    .      .
X 
X[13;47Hsssrrrrqqqqqqqqqrrrrsss[14;51Hf    f  .   f
X 
X[13;69H[4m/[m[12;68H/ [11;68H[4m /[m[10;69H[1m/[m[9;68H[1m/[m/[7;68H /[6;69H[14;51H        f .  
X 
X[13;47Hrrrqqqqpppppppppqqqqrss[14;52H.    . o f
X 
X[13;68H[1;4m/[m [12;68H [1m/[m[10;68H//[9;68H/[8;68H [7;68H[1m/[m [6;69H/[14;52Hf   .f    
X 
X[13;47Hqqqppppooooooooopppqrss[14;52H   .f       .
X 
X[13;68Hs/[11;68H[4m/[m[9;68H [8;68H/ [7;68H//[6;69H [14;55Hf        f
X 
X[12;54Hsssssssss[13;47Hqppoooo         oopqrss[13;54H.o      .[14;55H          
X 
X[13;68H[4m/[m[12;68H[1m/[m[10;68H [9;68H[1m/[m  [8;68H/[1m/[m[7;68H [6;69H[1m/[m[13;54Hf       f[14;51H.    .    
X 
X[12;52Hssrrrrrrrrrs[13;47Hqpooo            opqrss[13;53Hf [14;51Hf    f  .   f
X 
X[13;68H[1;4m/[m[12;68H/[11;68Hs[10;68H[1m/[m [9;68H//[8;69H [13;53Hf  o      o[14;51H        f .  
X 
X[12;46Hssssssrr[12;63Hrrssssss[13;47H     [13;64H      [6;69H [13;47Hf     o           o  .[14;52H.    . o f
X 
X[12;68Hs[11;68H[4m/ [m[10;68H//[9;69H [8;68H [1m/[m[7;69H [13;47H  .         o o      f[14;52Hf   .f    
X 
X[12;45Hsrrrrrrqqqqqqqqqqqqqqrrssrq[13;49Hf  o    o     .     [14;52H   .f       .
X 
X[12;68H[4m/ [11;68H/[1m/[m[10;69H [9;68H /[8;69H  mqvqqqqqq[5;70H lqwqqqqqq[7;70H x x[6;70H x x[13;49H .     o      f
X 
X[12;45Hrqqqqqqppppppppppppppq[8;71H mqvqqqqq[5;71H lqwqqqqq[7;71H x x[6;71H x x[13;50Hf   .o      . o[14;55H          
X 
X[12;69H[4m/[m[11;69Hs[10;68H [1m/[m[9;69H [8;72H mqvqqqq[5;72H lqwqqqq[7;72H x x[6;72H x x[13;50H    f       f  [14;51
X 
X[12;45Hqppppppoooooooooooooo[8;73H mqvqqq[5;73H lqwqqq[7;73H x x[6;73H x x[13;53Hf [13;62H   .[14;51Hf    f  .   f
X 
X[12;69Hs[11;68H[4m /[m[10;69H [8;74H mqvqq[5;74H lqwqq[7;74H x x[6;74H x x[13;47H.   o f  o      o f[14;51H        f 
X 
X[12;45Hpoooooo             [8;75H mqvq[5;75H lqwq[7;75H x x[6;75H x x[12;49H  o    o      o[13;47Hf     o           o  .
X 
X[11;44H[4mrrrrrrrrrrrrrrrrrrrrrrrrrrrrr[m[12;45H       [12;64H        [8;76H mqv[5;76H lqw[7;76H x x[6;76H x x[12;47Ho   
X[8;77H mq[5;77H lq[7;77H x [6;77H x [12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[8;78H m[5;78H l[7;78H x[6;78H x[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[8;79H [5;79H [7;79H [6;79H [12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[1;7m[5;25H#3 Cheers! 
X[6;25H#4 Cheers! [m
X 
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X 
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X 
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X 
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X 
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X 
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X 
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[5;1H[K#5
X[6;1H[K#5
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[10;1H       /ooooooooooooooo\
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[10;1H      /   sss     sss   \
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[10;1H      x  ([4msOs[m)   ([4msOs[m)  x
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[10;1H      x        `        x
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[10;1H       \  \sssssssss/  /
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[10;1H        \             /
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[10;1H         \sssssssssss/
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[10;1H          ooppqqrrsss
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[10;1H          ooppqqrrsss
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[10;1H          ooppqqrrsss
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[10;1H          ooppqqrrsss
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[10;1H          ooppqqrrsss
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[10;1H          ooppqqrrsss
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[10;1H          ooppqqrrsss[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[HM      x        `        x
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[HM      x  ([4msOs[m)   ([4msOs[m)  x
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[HM      /   sss     sss   \
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[HM       /ooooooooooooooo\ 
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[HM
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[HM
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[HM
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[HM
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[10;1H        \             /
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[10;1H         \sssssssssss/
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[10;1H          ooppqqrrsss
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[10;1H          ooppqqrrsss
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[10;1H          ooppqqrrsss
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[10;1H          ooppqqrrsss
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[10;1H          ooppqqrrsss[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[HM      /   sss     sss   \
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[HM       /ooooooooooooooo\ 
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[HM
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[HM
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[10;1H          ooppqqrrsss
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[10;1H          ooppqqrrsss
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[10;1H          ooppqqrrsss
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[10;1H          ooppqqrrsss[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[HM       /ooooooooooooooo\ 
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[HM
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[HM
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[HM
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[10;1H         \sssssssssss/
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[10;1H          ooppqqrrsss
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[10;1H          ooppqqrrsss[r
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X 
X[4;45HJin
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[4;48Hgle
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[4;52HBells,
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[4;59HJin
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[4;62Hgle
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[4;66HBells,
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[5;45HJin
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[5;48Hgle
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[5;52Hall
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[5;56Hthe
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[5;60Hway,
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[6;45HOh!
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[6;50HWhat
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[6;55Hfun
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[6;59Hit
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[6;62His
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[6;65Hto
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[6;68Hride,
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[7;45HOn
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[7;48Ha
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[7;50Hone-
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[7;54Hhorse
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[7;60Hop
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[7;62Hen
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[7;65Hsleigh.
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf    f    
X 
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf    f    
X 
X[12;47H            o o      o[13;49Hf  o    o           [14;52H             
X[12;45H.   o  o    o             [13;49H               [14;55H          
X[12;45Hf          o      o       [13;50H               [14;55H          
X[12;45H                   
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf    f    
X 
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf    f    
X 
X[12;47H            o o      o[13;49Hf  o    o           [14;52H             
X[12;45H.   o  o    o             [13;49H               [14;55H          
X[12;45Hf          o      o       [13;50H               [14;55H          
X[12;45H                   
X 
X[4;45H[K[4;55HMerry Christmas
X[5;45H[K
X[6;45H[K[6;60H-
X[7;45H[K
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf    f    
X 
X[12;47H            o o      o[13;49Hf  o    o           [14;52H             
X[12;45H.   o  o    o             [13;49H               [14;55H          
X[12;45Hf          o      o       [13;50H               [14;55H          
X[12;45H                   
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf    f    
X 
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf   .f    
X[12;47H       .    o o      o[13;49Hf  o    o     .     [14;52H   .f       .
X[12;45H.   o  o f  o        .   .[13;49H .     o      f[14;55Hf        f
X[12;45Hf          o      o  f . f[13;50Hf   .o      . o[14;55H          
X[12;45H  .  o    o    .   o   f  [13;50H    f       f  [14;51H.    .      .
X[12;47Hf .    o  .  f o     f[13;53Hf [13;62H   .[14;51Hf    f  .   f
X[12;47H  f       f  f        [13;47H.   o f  o      o f[14;51H        f .  
X[12;49H  o    o      o[13;47Hf     o           o  .[14;52H.    . o f
X[12;47Ho     o           o[13;47H  .         o o      f[14;52Hf    f    
X 
X[12;47H            o o      o[13;49Hf  o    o           [14;52H             
X[12;45H.   o  o    o             [13;49H               [14;55H          
X[12;45Hf          o      o       [13;50H               [14;55H          
X[12;45H                   
X[22;1H[?4l
X
END_OF_FILE
echo shar: 3589 control characters may be missing from \"'terminfo/test.txt'\"
if test 38899 -ne `wc -c <'terminfo/test.txt'`; then
    echo shar: \"'terminfo/test.txt'\" unpacked with wrong size!
fi
# end of 'terminfo/test.txt'
fi
echo shar: End of archive 5 \(of 10\).
cp /dev/null ark5isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 10 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
