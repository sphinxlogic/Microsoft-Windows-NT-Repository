Newsgroups: comp.sources.unix
From: pmiller@bmr.gov.au (Peter Miller)
Subject: v27i046: aegis - project change supervisor (V2.1), Part11/19
References: <1.748951883.12788@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: pmiller@bmr.gov.au (Peter Miller)
Posting-Number: Volume 27, Issue 46
Archive-Name: aegis-2.1/part11

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 11 (of 19)."
# Contents:  BUILDING LICENSE aegis/aecp.c aegis/aeip.c aegis/col.c
#   aegis/main.c aegis/version.c
# Wrapped by vixie@gw.home.vix.com on Sat Sep 25 03:00:45 1993
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'BUILDING' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'BUILDING'\"
else
echo shar: Extracting \"'BUILDING'\" \(21192 characters\)
sed "s/^X//" >'BUILDING' <<'END_OF_FILE'
X
X
X
Xbuild(aegis)					     build(aegis)
X
X
XNAME
X	aegis -	project	change supervisor
X	Copyright (C) 1990, 1991, 1992,	1993 Peter Miller.
X	All rights reserved.
X
X	The aegis program is distributed under the terms of the
X	GNU General Public License.  See the LICENSE section,
X	below, for more	details.
X
X	aegis (ee.j.iz)	n., a protection, a defence.
X
XSPACE REQUIREMENTS
X	You will need up to 10MB to unpack and build the aegis
X	program.  (This	is the worst case seen so far, most
X	systems	have binaries about 60%	as big as this,	6MB is
X	more typical.)	Your mileage may vary.
X
XSITE CONFIGURATION
X	The file common/conf.h needs to	be created to match your
X	site.  Select an appropriate file from the conf
X	directory.  The	files in this directory	are named for the
X	various	systems	encountered to date by the author.  The
X	file most closely resembling your system should	be copied
X	into the common/conf.h file.  You can copy it or use a
X	symbolic link; copying is recommended because you may
X	need to	edit.
X
X	The common/conf.h file is extensively commented.  Read
X	the comments and change	what you need to.  Please read
X	this file carefully.
X
X	Be careful in changing the settings if you are using a
X	conf file accurately named for your system; aegis
X	exersizes functionality	unfamiliar to many.  There are
X	known cases where systems have the necessary facilities,
X	but they are nowhere documented.  If you are unsure, try
X	it unchanged first, and	then edit if you find that there
X	are problems.
X
X	Another	file which may require editing is the Makefile
X	file.  The first few lines contain comments describing
X	what may require changing.  In general these changes will
X	relate to the name of your favorite C compiler,	and where
X	it keeps its include files.
X
X	The top	of the Makefile	file is	arranged as macro
X	definitions, with alternatives for each	known system in
X	comments.  Search for your system's name, editing the
X	macro definition as required.
X
X
X
X
X
X
X
X
X								1
X
X
X
X
X
Xbuild(aegis)					     build(aegis)
X
X
XKNOWN SYSTEMS
X	This distribution of aegis is known to build on	the
X	following systems:
X
X	SunOS 4.1
X		The native cc(1) and also gcc(1) are known to
X		work for Sun4s.	 The appropriate configuration is
X		contained in the conf/SunOS-4.1	file.  Sun seem
X		to be having chronic problems with locking; you
X		may need to get	the very latest	set of locking
X		patches	and apply them.	 See also the tmpfs note,
X		below.
X
X	ConvexOS 10.0
X		The native cc(1) works just fine.  The
X		appropriate configuration is contained in the
X		conf/ConvexOS-10 file.	Note that there	is no
X		"bin" user on ConvexOS,	so the owner of	aegis '
X		library	files is "daemon"; you will need to map
X		user and group "bin" to	"daemon" in the
X		instructions below.
X
X	DG/UX 5.4.1
X		The native cc(1) works just fine.  The
X		appropriate configuration is contained in the
X		conf/dgux-5.4.1	file.
X
X	ULTRIX 4.2
X		It has the seteuid and setegid calls, but the
X		shell has no functions!	 Complain to your vendor.
X		You will need to change	the SHELL macro
X		definition in the Makefile file	to use sh5(1)
X		instead.  The appropriate configuration	is
X		contained in the conf/ULTRIX-4.2 file.
X
X	Pyramid	SMP DC/OSx 1.0-92b023
X		This system is pretty horrendous.  The native cc
X		is known to work, but gives a staggering number
X		of warnings, just ignore them.	Gcc is also known
X		to work, and gives far fewer stupid warnings.
X		The appropriate	configuration is contained in the
X		conf/dcosx file.
X
X	HP-UX A.08.07
X		The author has been advised that the aegis
X		program	works on this system.  Could another
X		person confirm this, please.  The appropriate
X		configuration is contained in the conf/hpux-8.07
X		file.
X
X	SCO 2.4
X		The author has been advised that the aegis
X		program	works on this system.  Could another
X		person confirm this, please.  The appropriate
X
X
X
X								2
X
X
X
X
X
Xbuild(aegis)					     build(aegis)
X
X
X		configuration is contained in the conf/SCO-2.4
X		file.
X
X	Sun Solaris 2.1
X		The author has been advised that the aegis
X		program	works on this system.  Could another
X		person confirm this, please; and tell the author
X		how they did it, there seems to	be some	black
X		magic involved.	 The appropriate configuration is
X		contained in the conf/SunOS-5.1	file.
X
X	Linux 0.99
X		The author has been advised that the aegis
X		programs works on this system.	Could another
X		person confirm this, please.  The appropriate
X		configuration is contained in the conf/Linux-0.99
X		file.
X
X	Silicon	Graphics IRIX 4.0.5G
X		The author has been advised that the aegis
X		programs works on this system.	Could another
X		person confirm this, please.  The appropriate
X		configuration is contained in the conf/IRIX-4.0
X		file.
X
X	If the instructions for	any of the above systems do not
X	work, after you	have double-checked everything,	the
X	author would like to know.
X
XUNKNOWN	SYSTEMS
X	Please let the author know of any other	systems	you get
X	aegis working on, and the modifications	necessary.
X	Please include the differences to the Makefile file, and
X	the whole common/conf.h	file you used.	Included any
X	other files you	edited or added.  Include the output of
X	the "uname -rs"	command, if your flavour of UNIX has such
X	a command.
X
X	While the aegis	program	was developed using gcc, this is
X	not the	default	in the Makefile	file.  The code	uses ANSI
X	C features without compromising	the ability to be
X	compiled on older C compilers.	Functions mandated by the
X	ANSI C standard	are used, because many systems provided
X	them, one way or another.  Please let the author know of
X	any others you think should be added to	the common/ansi.c
X	file.
X
X	You may	need to	use some ANSI C	header files which the
X	aegis code uses, but which some	systems	(as yet) fail to
X	provide.  You will find	lines at the top of the	Makefile
X	file similar to
X		H = -I/usr/include -Ih
X	Change this to suit your system	and your compiler.  The
X	"h" directory must be searched last as it is intended to
X
X
X
X								3
X
X
X
X
X
Xbuild(aegis)					     build(aegis)
X
X
X	supplement your	system,	not replace it.
X
X	You will need to check the include files in the	"h"
X	directory to see that they are suitable	for your system.
X	You may	want to	delete any that	your system already has.
X
XBUILDING AEGIS
X	All you	should need to do is use the
X		% make
X		...lots	of output...
X		%
X	command	and wait.  When	this finishes you should see a
X	directory called bin containing	two files: aegis and
X	fmtgen.	 The fmtgen file is a program used in
X	constructing aegis and is not for general consumption.
X
XOTHER USEFUL SOFTWARE
X	Before describing how to test aegis, you may need to grab
X	some other free	software, because the tests require it in
X	some cases, and	because	it is generally	useful in others.
X
X	cook
X		This is	a dependency maintenance tool (DMT).  An
X		example	of a well-known	DMT is make(1),	however
X		this old faithful is not sufficiently capable to
X		meet the demands placed	on it by the aegis
X		program, but cook certainly is.	 The cook package
X		is written by the same author as aegis.	 The cook
X		package	is necessary for test 11 to pass.  It is
X		also used in the documentation.	 The cook program
X		may be found at	the same archive site as the
X		aegis program, and in the same directory.  The
X		cook program is	available under	the terms of the
X		GNU General Public License.
X
X	RCS
X		This is	a source control package, and is
X		available from any of the GNU archives.	 The
X		tests use RCS as the history mechanism,	so it is
X		necessary to have RCS for most of the tests to
X		pass.
X
X	GNU diff
X		If the diff(1) utility supplied	by your	flavor of
X		unix does not have the -c option, you will need
X		GNU diff to make patch files, if you want to
X		publish	software for FTP or on USENET.	Context
X		differences are	also helpful for reviewing
X		changes.
X
X	groff
X		This GNU software replaces the documentation
X		tools which (sometimes)	come with UNIX.	 They
X		produce	superior error messages, and support a
X
X
X
X								4
X
X
X
X
X
Xbuild(aegis)					     build(aegis)
X
X
X		wider range of functionality and fonts.	 The
X		aegis User Guide was prepared with groff.
X
X	bison
X		This GNU software is a replacement for yacc(1).
X		Some systems have very sick yaccs, and this may
X		be necessary if	your system include files
X		disagree strongly with your system's yacc.  The
X		Makefile has bison setup in comments.
X
X	fhist
X		This software, available under the terms of the
X		GNU General Public License, is a set of	file
X		history	and comparison utilities.  It was
X		originally written by David I. Bell, and is based
X		on the minimal difference algorithm by Eugene W.
X		Myers.	This copy is enhanced and maintained by
X		the same author	as aegis, and may be found at the
X		same archive site, in the same directory.
X
XTESTING	AEGIS
X	The aegis program comes	with a test suite.  To run this
X	test suite, use	the command
X		% make sure
X		...lots	of output...
X		Passed All Tests
X		%
X
X	The tests take a minute	or two each, with a few	very
X	fast, and a couple very	slow, but it varies greatly
X	depending on your CPU.
X
X	The tests assume that the RCS commands "ci", "co", "rlog"
X	and "rcs" are somewhere	in the command search PATH.
X
X	The test/00/t0011a.sh file assumes the cook(1) command by
X	the author is somewhere	in the command search path.  This
X	test reproduces	the example used in Chapter 3 of the User
X	Guide.
X
X	If you are using Sun's tmpfs file system as your /tmp
X	directory, the tests will fail.	 This is because the
X	tmpfs file system does not support file	locking.  Set the
X	AEGIS_TMP environment variable to somewhere else before
X	running	the tests.  Something like
X		% setenv AEGIS_TMP /usr/tmp
X		%
X	is usually sufficient if you are using C shell,	or
X		$ AEGIS_TMP=/usr/tmp
X		$ export AEGIS_TMP
X		$
X	if you are using Bourne	shell.	Remember, this must be
X	done before running the	tests.
X
X
X
X
X								5
X
X
X
X
X
Xbuild(aegis)					     build(aegis)
X
X
X	If the tests fail due to errors	complaining of "user too
X	privileged" you	will need to adjust the	AEGIS_MIN_UID
X	define in the common/conf.h file.  Similarly for "group
X	too privileged", although this is rarer.  This error
X	message	will also occur	if you run the tests as	root: the
X	tests must be run as a mortal each time.
X
XTESTING	SET-UID-ROOT
X	If the aegis program is	not set-uid-root then it runs in
X	"test" mode which gives	you some confidence that aegis is
X	working	before being tested again when it is set-uid-
X	root.  Two pass	testing	like this means	that you need not
X	trust your system to a set-uid-root program which is not
X	known to work.
X
X	You will need to do a little of	the install, to	create
X	the directory which will contain aegis'	lock file.
X		# mkdir	/usr/local/lib/aegis
X		# chmod	755 /usr/local/lib/aegis
X		# chown	bin /usr/local/lib/aegis
X		# chgrp	bin /usr/local/lib/aegis
X		#
X	You will need to change	aegis to be set-uid-root.  This
X	may be done with the following commands:
X		# chown	root bin/aegis
X		# chmod	u+s bin/aegis
X		#
X	Once aegis is set-uid-root, it is tested again,	in the
X	same manner as before.
X		% make sure
X		...lots	of output...
X		Passed All Tests
X		%
X
X	You should test	aegis as a mortal in both passes, rather
X	than as	root, to be sure the set-uid-root functionality
X	is working correctly.
X
X	It is required that aegis run set-uid-root for all of its
X	functionality to be available.	It is NOT possible to
X	create an "aegis" account and make aegis run set-uid-
X	aegis.	This is	because	aegis does things as various
X	different user IDs, sometimes as many as 3 in the one
X	command.  This allows aegis to use UNIX	security rather
X	than inventing its own,	and also allows	aegis to work
X	across NFS.  To	be able	to do these things, aegis must be
X	set-uid-root.  Believe me, folks, if I could have done it
X	without	set-uid-root, I	would have!
X
XINSTALLING AEGIS
X	Put the	aegis program somewhere	where users will
X	automatically pick it up, such as in the /usr/local/bin
X	directory.  Use	the command
X		# cp bin/aegis /usr/local/bin
X
X
X
X								6
X
X
X
X
X
Xbuild(aegis)					     build(aegis)
X
X
X		#
X	Don't forget to	make sure that the copy	is set-uid-root,
X	some versions of cp do not transfer the	set-uid	bit of
X	the mode.
X
X	The manuals can	be installed using the commands
X		# sh man1/install.sh /usr/local/man/man1
X		# sh man5/install.sh /usr/local/man/man5
X		#
X	but this is very site specific.	 You can select	a
X	different path by changing the last argument.
X
X	By default, aegis is configured	to use
X	/usr/local/lib/aegis as	the place it stores the	table
X	containing the mapping from project name to project
X	directory, and indexes into this table.	 The aegis
X	program	also has example .cshrc	and .profile files, and
X	generic	notification scripts.  These can be copied to
X	this library as	follows:
X		# mkdir	/usr/local/lib/aegis
X		# chmod	755 /usr/local/lib/aegis
X		# chown	bin /usr/local/lib/aegis
X		# chgrp	bin /usr/local/lib/aegis
X		# cp lib/* /usr/local/lib/aegis
X		# chmod	a+r /usr/local/lib/aegis/*
X		# chmod	a+x /usr/local/lib/aegis/*.sh
X		#
X	This is	only an	example, and you may want to place this
X	somewhere else.	 Control of the	placement of this
X	directory may be found in the first few	lines of the
X	Makefile file.
X
X	All of the above install can be	done automatically, using
X	the "make install" command as root.  Control of	the
X	directories used may be	found in the first few lines of
X	the Makefile file.
X
XUSER CONFIGURATION
X	The aegis command is assumed to	be in a	generally
X	accessible place, otherwise users will need to add the
X	relevant directory to their PATH.  Users should	add
X		source /usr/local/lib/aegis/cshrc
X	to the end of their .cshrc file	for the	recommended
X	aliases.
X
X	There is also a	profile	for users of the Bourne	shell (it
X	assumes	you have a version of the Bourne shell which has
X	functions).  Users should add
X		. /usr/local/lib/aegis/profile
X	to the end of their .profile file for the recommended
X	aliases.
X
X	The /usr/local/lib/aegis/state file contains pointers to
X	"system" projects.  Users may add their	own project
X
X
X
X								7
X
X
X
X
X
Xbuild(aegis)					     build(aegis)
X
X
X	pointers (to their own projects) by putting a search path
X	into the AEGIS environment variable.  The system part is
X	always automatically appended by aegis.	 The default,
X	already	set by the /usr/local/lib/aegis/cshrc file, is
X	$HOME/lib/aegis.  Do not create	this directory,	aegis is
X	finicky	and wants to do	this itself.
X
X	Where projects reside is completely flexible, be they
X	system projects	or user	projects.  They	are not	kept
X	under the /usr/local/lib/aegis directory, this directory
X	only contains pointers.
X
XPRINTED	MANUALS
X	This distribution contains the sources to all of the
X	documentation for aegis.  The author used the GNU groff
X	package	and a postscript printer to prepare the
X	documentation.	If you do not have this	software, you
X	will need to substitute	commands appropriate to	your
X	site.
X
X	To print copies	of the README and BUILDING files, the
X	following commands may be used
X		% groff	-t -man	aux/*.man | lpr
X		%
X	This will produce about	12 pages.  The "-t" flag means
X	preprocess with	tbl(1).
X
X	To print copies	of the manual entries, the following
X	commands may be	used
X		% cd man1
X		% groff	-s -t -man *.1 | lpr
X		% cd ../man5
X		% groff	-s -t -man *.5 | lpr
X		% cd ..
X		%
X	This will produce about	60 pages.  The "-s" flag means
X	preprocess with	soelim(1), and the "-t"	flag means
X	preprocess with	tbl(1).
X
X	To print a copy	of the User Guide, the following commands
X	may be used
X		% cd doc
X		% groff	-s -t -p -ms aegis.ms |	lpr
X		% cd ..
X		%
X	This will produce about	90 pages.  The "-s" flag means
X	preprocess with	soelim(1), the "-t" flag means preprocess
X	with tbl(1), and the "-p" flag means preprocess	with
X	pic(1).	 Alternatively,	you could get a	PostScript copy
X	of the User Guide from the archive site.
X
X	Please note the	the User Guide is still	in the process of
X	being written.	Some sections of the User Guide	are
X	incomplete.  Feedback on the form and content of this
X
X
X
X								8
X
X
X
X
X
Xbuild(aegis)					     build(aegis)
X
X
X	document would be most welcome.
X
XTIME SYNCHRONIZATION
X	The aegis program uses time stamps to remember whether
X	various	events have happened and when.	If you are using
X	aegis in a networked environment, typically a server and
X	dataless workstations, you need	to make	absolutely sure
X	that all of the	machines agree about the time.
X
X	If possible, use the time daemon.  Otherwise, use
X	rdate(8) via cron(8) every hour	or so.
X
XGETTING	HELP
X	If you need assistance with the	aegis program, please do
X	not hesitate to	contact	the author at
X		Peter Miller <pmiller@bmr.gov.au>
X	Any and	all feedback is	welcome.
X
X	When reporting problems, please	include	the version
X	number given by	the
X		% aegis	-version
X		aegis version a.b.cccc
X		...
X		%
X	command.
X
X   Runtime Checking
X	In the common/main.h file, the is a define of DEBUG in
X	comments.  If the comments are removed,	extensive
X	debugging is turned on.	 This causes some performance
X	loss, but performs much	run-time checking and adds the
X	-TRace command line option.
X
X	When the -TRace	command	line option is followed	by one or
X	more file names, it turns on execution traces in those
X	source files.  It is usually best to place this	on the
X	end of the command line	so that	names of the files to be
X	traced are not confused	with other file	names or strings
X	on the command line.
X
X   Problem Reports
X	If you send email to the author, please	include	the
X	following information:
X
X	1. The type of UNIX
X		The author will	need to	know the brand and
X		version	of UNIX	you are	using, or if it	is not
X		UNIX but something else.  The output of	"uname
X		-sr" is	usually	sufficient (but	not all	systems
X		have it).
X
X	2. The Version Number
X		In any information you send, please include the
X		version	number reported	in the
X
X
X
X								9
X
X
X
X
X
Xbuild(aegis)					     build(aegis)
X
X
X		common/patchlevel.h file, or `aegis -vers` if you
X		can get	it to compile.
X
X	3. The Archive Site
X		When and where you obtained this version of
X		aegis.	If you tell me nothing else, tell me this
X		(and, hopefully, why you did nothing else).
X
X	4. Unpacking
X		Did you	have problems unpacking	aegis?	This
X		probably isn't a problem with the .tar.Z
X		distribution, but you could have obtained a shar
X		format copy.
X
X	5. Building
X		Did you	have problems building aegis?  This could
X		have been the instructions included, it	could
X		have been the Makefile,	it could have been
X		problems configuring it, or anything else.
X
X	6. Testing, Non-Set-Uid
X		Did you	have problems with the tests?  You could
X		have had problems running them,	or some	of them
X		could have failed.  If some tests fail but not
X		others,	please let me know which ones failed.
X		(The -k	option to make can be usful in this
X		case.)
X
X	7. Testing, Set-Uid-Root
X		Did you	have problems with the tests when aegis
X		was set-uid-root?  You could have had problems
X		running	them, or some of them could have failed.
X		If some	tests fail but not others, please let me
X		know which ones	failed,	and include the	fact that
X		aegis was set-uid-root at the time.
X
X	8. Installation
X		Did you	have problems installing aegis?	 This
X		could have been	the instructions, or anything
X		else.
X
X	At this	point it would probably	be a very good idea to
X	print out the manual entries and read them carefully.
X	You will also want to print a copy of the User Guide; if
X	you don't gave groff, there should be a	PostScript copy
X	at the archive site.  It is a known flaw that the User
X	Guide is incomplete, it	is something the author	is
X	working	on "at this moment".
X
X	9. The Example Project
X		After reading the User Guide, it is often useful
X		to manually run	through	the example in chapter 3.
X		You will need to do more than one change,
X		hopefully several; the first change is not
X
X
X
X							       10
X
X
X
X
X
Xbuild(aegis)					     build(aegis)
X
X
X		representative of the system.  Did you manually
X		do the example?	 Did you find flaws in the User
X		Guide or manual	entries?
X
X	10. Using Aegis
X		Did you	have problems using aegis?  This is a
X		whole can of worms.  If	possible, include a shell
X		script similar to the tests which accompany
X		aegis, which reproduces	the bug.  Exit code 1 on
X		failure	(bug), exit code 0 on success (for when
X		bug is fixed).
X
X	11. The	Source Code
X		Did you	read the code?	Did you	write some code?
X		If you read the	code and found problems, fixed
X		them, or extended aegis, these contributions are
X		most welcome.  I reserve the right to modify or
X		reject such contributions.
X
X	The above list is inclusive, not exclusive.  Any and all
X	feedback is greatly appreciated, as is the effort and
X	interest required to produce it.
X
XLICENSE
X	The aegis program is free software; you	can redistribute
X	it and/or modify it under the terms of the GNU General
X	Public License as published by the Free	Software
X	Foundation; either version 2 of	the License, or	(at your
X	option)	any later version.
X
X	The aegis program is distributed in the	hope that it will
X	be useful, but WITHOUT ANY WARRANTY; without even the
X	implied	warranty of MERCHANTABILITY or FITNESS FOR A
X	PARTICULAR PURPOSE.  See the GNU General Public	License
X	for more details.
X
X	It should be in	the LICENSE file included in this
X	distribution.
X
XAUTHOR
X	Peter Miller   UUCP	  uunet!munnari!bmr.gov.au!pmiller
X	/\/\*	       Internet	  pmiller@bmr.gov.au
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X							       11
X
X
END_OF_FILE
if test 21192 -ne `wc -c <'BUILDING'`; then
    echo shar: \"'BUILDING'\" unpacked with wrong size!
fi
# end of 'BUILDING'
fi
if test -f 'LICENSE' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'LICENSE'\"
else
echo shar: Extracting \"'LICENSE'\" \(17982 characters\)
sed "s/^X//" >'LICENSE' <<'END_OF_FILE'
X		    GNU GENERAL PUBLIC LICENSE
X		       Version 2, June 1991
X
X Copyright (C) 1989, 1991 Free Software Foundation, Inc.
X                          675 Mass Ave, Cambridge, MA 02139, USA
X Everyone is permitted to copy and distribute verbatim copies
X of this license document, but changing it is not allowed.
X
X			    Preamble
X
X  The licenses for most software are designed to take away your
Xfreedom to share and change it.  By contrast, the GNU General Public
XLicense is intended to guarantee your freedom to share and change free
Xsoftware--to make sure the software is free for all its users.  This
XGeneral Public License applies to most of the Free Software
XFoundation's software and to any other program whose authors commit to
Xusing it.  (Some other Free Software Foundation software is covered by
Xthe GNU Library General Public License instead.)  You can apply it to
Xyour programs, too.
X
X  When we speak of free software, we are referring to freedom, not
Xprice.  Our General Public Licenses are designed to make sure that you
Xhave the freedom to distribute copies of free software (and charge for
Xthis service if you wish), that you receive source code or can get it
Xif you want it, that you can change the software or use pieces of it
Xin new free programs; and that you know you can do these things.
X
X  To protect your rights, we need to make restrictions that forbid
Xanyone to deny you these rights or to ask you to surrender the rights.
XThese restrictions translate to certain responsibilities for you if you
Xdistribute copies of the software, or if you modify it.
X
X  For example, if you distribute copies of such a program, whether
Xgratis or for a fee, you must give the recipients all the rights that
Xyou have.  You must make sure that they, too, receive or can get the
Xsource code.  And you must show them these terms so they know their
Xrights.
X
X  We protect your rights with two steps: (1) copyright the software, and
X(2) offer you this license which gives you legal permission to copy,
Xdistribute and/or modify the software.
X
X  Also, for each author's protection and ours, we want to make certain
Xthat everyone understands that there is no warranty for this free
Xsoftware.  If the software is modified by someone else and passed on, we
Xwant its recipients to know that what they have is not the original, so
Xthat any problems introduced by others will not reflect on the original
Xauthors' reputations.
X
X  Finally, any free program is threatened constantly by software
Xpatents.  We wish to avoid the danger that redistributors of a free
Xprogram will individually obtain patent licenses, in effect making the
Xprogram proprietary.  To prevent this, we have made it clear that any
Xpatent must be licensed for everyone's free use or not licensed at all.
X
X  The precise terms and conditions for copying, distribution and
Xmodification follow.
X
X		    GNU GENERAL PUBLIC LICENSE
X   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
X
X  0. This License applies to any program or other work which contains
Xa notice placed by the copyright holder saying it may be distributed
Xunder the terms of this General Public License.  The "Program", below,
Xrefers to any such program or work, and a "work based on the Program"
Xmeans either the Program or any derivative work under copyright law:
Xthat is to say, a work containing the Program or a portion of it,
Xeither verbatim or with modifications and/or translated into another
Xlanguage.  (Hereinafter, translation is included without limitation in
Xthe term "modification".)  Each licensee is addressed as "you".
X
XActivities other than copying, distribution and modification are not
Xcovered by this License; they are outside its scope.  The act of
Xrunning the Program is not restricted, and the output from the Program
Xis covered only if its contents constitute a work based on the
XProgram (independent of having been made by running the Program).
XWhether that is true depends on what the Program does.
X
X  1. You may copy and distribute verbatim copies of the Program's
Xsource code as you receive it, in any medium, provided that you
Xconspicuously and appropriately publish on each copy an appropriate
Xcopyright notice and disclaimer of warranty; keep intact all the
Xnotices that refer to this License and to the absence of any warranty;
Xand give any other recipients of the Program a copy of this License
Xalong with the Program.
X
XYou may charge a fee for the physical act of transferring a copy, and
Xyou may at your option offer warranty protection in exchange for a fee.
X
X  2. You may modify your copy or copies of the Program or any portion
Xof it, thus forming a work based on the Program, and copy and
Xdistribute such modifications or work under the terms of Section 1
Xabove, provided that you also meet all of these conditions:
X
X    a) You must cause the modified files to carry prominent notices
X    stating that you changed the files and the date of any change.
X
X    b) You must cause any work that you distribute or publish, that in
X    whole or in part contains or is derived from the Program or any
X    part thereof, to be licensed as a whole at no charge to all third
X    parties under the terms of this License.
X
X    c) If the modified program normally reads commands interactively
X    when run, you must cause it, when started running for such
X    interactive use in the most ordinary way, to print or display an
X    announcement including an appropriate copyright notice and a
X    notice that there is no warranty (or else, saying that you provide
X    a warranty) and that users may redistribute the program under
X    these conditions, and telling the user how to view a copy of this
X    License.  (Exception: if the Program itself is interactive but
X    does not normally print such an announcement, your work based on
X    the Program is not required to print an announcement.)
X
XThese requirements apply to the modified work as a whole.  If
Xidentifiable sections of that work are not derived from the Program,
Xand can be reasonably considered independent and separate works in
Xthemselves, then this License, and its terms, do not apply to those
Xsections when you distribute them as separate works.  But when you
Xdistribute the same sections as part of a whole which is a work based
Xon the Program, the distribution of the whole must be on the terms of
Xthis License, whose permissions for other licensees extend to the
Xentire whole, and thus to each and every part regardless of who wrote it.
X
XThus, it is not the intent of this section to claim rights or contest
Xyour rights to work written entirely by you; rather, the intent is to
Xexercise the right to control the distribution of derivative or
Xcollective works based on the Program.
X
XIn addition, mere aggregation of another work not based on the Program
Xwith the Program (or with a work based on the Program) on a volume of
Xa storage or distribution medium does not bring the other work under
Xthe scope of this License.
X
X  3. You may copy and distribute the Program (or a work based on it,
Xunder Section 2) in object code or executable form under the terms of
XSections 1 and 2 above provided that you also do one of the following:
X
X    a) Accompany it with the complete corresponding machine-readable
X    source code, which must be distributed under the terms of Sections
X    1 and 2 above on a medium customarily used for software interchange; or,
X
X    b) Accompany it with a written offer, valid for at least three
X    years, to give any third party, for a charge no more than your
X    cost of physically performing source distribution, a complete
X    machine-readable copy of the corresponding source code, to be
X    distributed under the terms of Sections 1 and 2 above on a medium
X    customarily used for software interchange; or,
X
X    c) Accompany it with the information you received as to the offer
X    to distribute corresponding source code.  (This alternative is
X    allowed only for noncommercial distribution and only if you
X    received the program in object code or executable form with such
X    an offer, in accord with Subsection b above.)
X
XThe source code for a work means the preferred form of the work for
Xmaking modifications to it.  For an executable work, complete source
Xcode means all the source code for all modules it contains, plus any
Xassociated interface definition files, plus the scripts used to
Xcontrol compilation and installation of the executable.  However, as a
Xspecial exception, the source code distributed need not include
Xanything that is normally distributed (in either source or binary
Xform) with the major components (compiler, kernel, and so on) of the
Xoperating system on which the executable runs, unless that component
Xitself accompanies the executable.
X
XIf distribution of executable or object code is made by offering
Xaccess to copy from a designated place, then offering equivalent
Xaccess to copy the source code from the same place counts as
Xdistribution of the source code, even though third parties are not
Xcompelled to copy the source along with the object code.
X
X  4. You may not copy, modify, sublicense, or distribute the Program
Xexcept as expressly provided under this License.  Any attempt
Xotherwise to copy, modify, sublicense or distribute the Program is
Xvoid, and will automatically terminate your rights under this License.
XHowever, parties who have received copies, or rights, from you under
Xthis License will not have their licenses terminated so long as such
Xparties remain in full compliance.
X
X  5. You are not required to accept this License, since you have not
Xsigned it.  However, nothing else grants you permission to modify or
Xdistribute the Program or its derivative works.  These actions are
Xprohibited by law if you do not accept this License.  Therefore, by
Xmodifying or distributing the Program (or any work based on the
XProgram), you indicate your acceptance of this License to do so, and
Xall its terms and conditions for copying, distributing or modifying
Xthe Program or works based on it.
X
X  6. Each time you redistribute the Program (or any work based on the
XProgram), the recipient automatically receives a license from the
Xoriginal licensor to copy, distribute or modify the Program subject to
Xthese terms and conditions.  You may not impose any further
Xrestrictions on the recipients' exercise of the rights granted herein.
XYou are not responsible for enforcing compliance by third parties to
Xthis License.
X
X  7. If, as a consequence of a court judgment or allegation of patent
Xinfringement or for any other reason (not limited to patent issues),
Xconditions are imposed on you (whether by court order, agreement or
Xotherwise) that contradict the conditions of this License, they do not
Xexcuse you from the conditions of this License.  If you cannot
Xdistribute so as to satisfy simultaneously your obligations under this
XLicense and any other pertinent obligations, then as a consequence you
Xmay not distribute the Program at all.  For example, if a patent
Xlicense would not permit royalty-free redistribution of the Program by
Xall those who receive copies directly or indirectly through you, then
Xthe only way you could satisfy both it and this License would be to
Xrefrain entirely from distribution of the Program.
X
XIf any portion of this section is held invalid or unenforceable under
Xany particular circumstance, the balance of the section is intended to
Xapply and the section as a whole is intended to apply in other
Xcircumstances.
X
XIt is not the purpose of this section to induce you to infringe any
Xpatents or other property right claims or to contest validity of any
Xsuch claims; this section has the sole purpose of protecting the
Xintegrity of the free software distribution system, which is
Ximplemented by public license practices.  Many people have made
Xgenerous contributions to the wide range of software distributed
Xthrough that system in reliance on consistent application of that
Xsystem; it is up to the author/donor to decide if he or she is willing
Xto distribute software through any other system and a licensee cannot
Ximpose that choice.
X
XThis section is intended to make thoroughly clear what is believed to
Xbe a consequence of the rest of this License.
X
X  8. If the distribution and/or use of the Program is restricted in
Xcertain countries either by patents or by copyrighted interfaces, the
Xoriginal copyright holder who places the Program under this License
Xmay add an explicit geographical distribution limitation excluding
Xthose countries, so that distribution is permitted only in or among
Xcountries not thus excluded.  In such case, this License incorporates
Xthe limitation as if written in the body of this License.
X
X  9. The Free Software Foundation may publish revised and/or new versions
Xof the General Public License from time to time.  Such new versions will
Xbe similar in spirit to the present version, but may differ in detail to
Xaddress new problems or concerns.
X
XEach version is given a distinguishing version number.  If the Program
Xspecifies a version number of this License which applies to it and "any
Xlater version", you have the option of following the terms and conditions
Xeither of that version or of any later version published by the Free
XSoftware Foundation.  If the Program does not specify a version number of
Xthis License, you may choose any version ever published by the Free Software
XFoundation.
X
X  10. If you wish to incorporate parts of the Program into other free
Xprograms whose distribution conditions are different, write to the author
Xto ask for permission.  For software which is copyrighted by the Free
XSoftware Foundation, write to the Free Software Foundation; we sometimes
Xmake exceptions for this.  Our decision will be guided by the two goals
Xof preserving the free status of all derivatives of our free software and
Xof promoting the sharing and reuse of software generally.
X
X			    NO WARRANTY
X
X  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
XFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
XOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
XPROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
XOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
XMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
XTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
XPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
XREPAIR OR CORRECTION.
X
X  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
XWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
XREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
XINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
XOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
XTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
XYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
XPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
XPOSSIBILITY OF SUCH DAMAGES.
X
X		     END OF TERMS AND CONDITIONS
X
X	Appendix: How to Apply These Terms to Your New Programs
X
X  If you develop a new program, and you want it to be of the greatest
Xpossible use to the public, the best way to achieve this is to make it
Xfree software which everyone can redistribute and change under these terms.
X
X  To do so, attach the following notices to the program.  It is safest
Xto attach them to the start of each source file to most effectively
Xconvey the exclusion of warranty; and each file should have at least
Xthe "copyright" line and a pointer to where the full notice is found.
X
X    <one line to give the program's name and a brief idea of what it does.>
X    Copyright (C) 19yy  <name of author>
X
X    This program is free software; you can redistribute it and/or modify
X    it under the terms of the GNU General Public License as published by
X    the Free Software Foundation; either version 2 of the License, or
X    (at your option) any later version.
X
X    This program is distributed in the hope that it will be useful,
X    but WITHOUT ANY WARRANTY; without even the implied warranty of
X    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X    GNU General Public License for more details.
X
X    You should have received a copy of the GNU General Public License
X    along with this program; if not, write to the Free Software
X    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
XAlso add information on how to contact you by electronic and paper mail.
X
XIf the program is interactive, make it output a short notice like this
Xwhen it starts in an interactive mode:
X
X    Gnomovision version 69, Copyright (C) 19yy name of author
X    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
X    This is free software, and you are welcome to redistribute it
X    under certain conditions; type `show c' for details.
X
XThe hypothetical commands `show w' and `show c' should show the appropriate
Xparts of the General Public License.  Of course, the commands you use may
Xbe called something other than `show w' and `show c'; they could even be
Xmouse-clicks or menu items--whatever suits your program.
X
XYou should also get your employer (if you work as a programmer) or your
Xschool, if any, to sign a "copyright disclaimer" for the program, if
Xnecessary.  Here is a sample; alter the names:
X
X  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
X  `Gnomovision' (which makes passes at compilers) written by James Hacker.
X
X  <signature of Ty Coon>, 1 April 1989
X  Ty Coon, President of Vice
X
XThis General Public License does not permit incorporating your program into
Xproprietary programs.  If your program is a subroutine library, you may
Xconsider it more useful to permit linking proprietary applications with the
Xlibrary.  If this is what you want to do, use the GNU Library General
XPublic License instead of this License.
END_OF_FILE
if test 17982 -ne `wc -c <'LICENSE'`; then
    echo shar: \"'LICENSE'\" unpacked with wrong size!
fi
# end of 'LICENSE'
fi
if test -f 'aegis/aecp.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'aegis/aecp.c'\"
else
echo shar: Extracting \"'aegis/aecp.c'\" \(18892 characters\)
sed "s/^X//" >'aegis/aecp.c' <<'END_OF_FILE'
X/*
X *	aegis - project change supervisor
X *	Copyright (C) 1991, 1992, 1993 Peter Miller.
X *	All rights reserved.
X *
X *	This program is free software; you can redistribute it and/or modify
X *	it under the terms of the GNU General Public License as published by
X *	the Free Software Foundation; either version 2 of the License, or
X *	(at your option) any later version.
X *
X *	This program is distributed in the hope that it will be useful,
X *	but WITHOUT ANY WARRANTY; without even the implied warranty of
X *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X *	GNU General Public License for more details.
X *
X *	You should have received a copy of the GNU General Public License
X *	along with this program; if not, write to the Free Software
X *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X * MANIFEST: copy files into a change, and undo
X */
X
X#include <stdio.h>
X#include <stdlib.h>
X#include <unistd.h>
X
X#include <aecp.h>
X#include <ael.h>
X#include <arglex2.h>
X#include <commit.h>
X#include <change.h>
X#include <error.h>
X#include <file.h>
X#include <help.h>
X#include <lock.h>
X#include <log.h>
X#include <option.h>
X#include <os.h>
X#include <project.h>
X#include <trace.h>
X#include <undo.h>
X#include <user.h>
X#include <word.h>
X
X
Xstatic void copy_file_usage _((void));
X
Xstatic void
Xcopy_file_usage()
X{
X	char		*progname;
X
X	progname = option_progname_get();
X	fprintf
X	(
X		stderr,
X		"usage: %s -CoPy_file [ <option>... ] <filename>...\n",
X		progname
X	);
X	fprintf
X	(
X		stderr,
X		"       %s -CoPy_file -List [ <option>... ]\n",
X		progname
X	);
X	fprintf(stderr, "       %s -CoPy_file -Help\n", progname);
X	quit(1);
X}
X
X
Xstatic void copy_file_help _((void));
X
Xstatic void
Xcopy_file_help()
X{
X	static char *text[] =
X	{
X"NAME",
X"	%s -CoPy_file - copy a file into a change",
X"",
X"SYNOPSIS",
X"	%s -CoPy_file [ <option>... ] <filename>...",
X"	%s -CoPy_file -List [ <option>... ]",
X"	%s -CoPy_file -Help",
X"",
X"DESCRIPTION",
X"	The %s -CoPy_file command is used to copy a file into",
X"	a change.",
X"",
X"	The %s program will attempt to intuit the file names",
X"	intended.  All file names are stored within %s as",
X"	relative to the root of the baseline directory tree.  The",
X"	development directory and the integration directory are",
X"	shadows of the baseline directory, and so these relative",
X"	names aply there, too.	Files named on the command line",
X"	are first converted to absolute paths if necessary.  They",
X"	are then compared with the baseline path, and the",
X"	development directory path, and the integration directory",
X"	path, to determine a root-relative name.  It is an error",
X"	if the file named is outside one of these directory",
X"	trees.",
X"",
X"	The named files will be copied from the baseline into the",
X"	development directory, and added to the list of files in",
X"	the change.",
X"",
X"	This command will cancel any build or test registrations,",
X"	because adding another file logically invalidates them.  If",
X"	the config file was added, any diff registration will also",
X"	be cancelled.",
X"",
X"	This command may be used to copy tests into a change, not",
X"	just source files.  Tests are treated just like	any other",
X"	source file, and are subject to	the same process.",
X"",
X"OPTIONS",
X"	The following options are understood:",
X"",
X"	-Change <number>",
X"		This option may be used to specify a particular",
X"		change within a project.  When no -Change option is",
X"		specified, the AEGIS_CHANGE environment variable is",
X"		consulted.  If that does not exist, the user's",
X"		$HOME/.aegisrc file is examined for a default change",
X"		field (see aeuconf(5) for more information).  If",
X"		that does not exist, when the user is only working",
X"		on one change within a project, that is the default",
X"		change number.  Otherwise, it is an error.",
X"",
X"	-Delta <number>",
X"		This optioon may be used to specify a particular",
X"		delta in the project's history to copy the file",
X"		from, rather than the most current version.  It is",
X"		an error if the delta specified does not exist.",
X"",
X"	-Help",
X"		This option may be used to obtain more",
X"		information about how to use the %s program.",
X"",
X"	-List",
X"		This option may be used to obtain a list of",
X"		suitable subjects for this command.  The list may",
X"		be more general than expected.",
X"",
X"	-Output <filename>",
X"		This option may be used to specify an output file of",
X"		a file being copied from the baseline.  Only one",
X"		baseline file may be named when this option is used.",
X"		The file name \"-\" is understood to mean the standard",
X"		output.",
X"",
X"	-OverWriting",
X"		This option may be used to force overwriting of",
X"		files.	The deafult action is to give and error",
X"		if an existing file would be overwritten.",
X"",
X"	-Project <name>",
X"		This option may be used to select the project of",
X"		interest.  When no -Project option is specified, the",
X"		AEGIS_PROJECT environment variable is consulted.  If",
X"		that does not exist, the user's $HOME/.aegisrc file",
X"		is examined for a default project field (see",
X"		aeuconf(5) for more information).  If that does not",
X"		exist, when the user is only working on changes",
X"		within a single project, the project name defaults",
X"		to that project.  Otherwise, it is an error.",
X"",
X"	-TERse",
X"		This option may be used to cause listings to",
X"		produce the bare minimum of information.  It is",
X"		usually useful for shell scripts.",
X"",
X"	-Verbose",
X"		This option may be used to cause %s to produce",
X"		more output.  By default %s only produces",
X"		output on errors.  When used with the -List",
X"		option this option causes column headings to be",
X"		added.",
X"",
X"	All options may be abbreviated; the abbreviation is",
X"	documented as the upper case letters, all lower case",
X"	letters and underscores (_) are optional.  You must use",
X"	consecutive sequences of optional letters.",
X"",
X"	All options are case insensitive, you may type them in",
X"	upper case or lower case or a combination of both, case",
X"	is not important.",
X"",
X"	For example: the arguments \"-project, \"-PROJ\" and \"-p\"",
X"	are all interpreted to mean the -Project option.  The",
X"	argument \"-prj\" will not be understood, because",
X"	consecutive optional characters were not supplied.",
X"",
X"	Options and other command line arguments may be mixed",
X"	arbitrarily on the command line, after the function",
X"	selectors.",
X"",
X"	The GNU long option names are understood.  Since all",
X"	option names for aegis are long, this means ignoring the",
X"	extra leading '-'.  The \"--option=value\" convention is",
X"	also understood.",
X"",
X"RECOMMENDED ALIAS",
X"	The recommended alias for this command is",
X"	csh%%	alias aecp '%s -cp \\!* -v'",
X"	sh$	aecp(){%s -cp $* -v}",
X"",
X"ERRORS",
X"	It is an error if the change is not in the",
X"	'being_developed' state.",
X"	It is an error if the change is not assigned to the",
X"	current user.",
X"	It is an error if the file is already in the change and",
X"	the -OverWrite option is not specified.",
X"",
X"EXIT STATUS",
X"	The %s command will exit with a status of 1 on any",
X"	error.	The %s command will only exit with a status of",
X"	0 if there are no errors.",
X"",
X"COPYRIGHT",
X"	%C",
X"",
X"AUTHOR",
X"	%A",
X	};
X
X	help(text, SIZEOF(text), copy_file_usage);
X}
X
X
Xstatic void copy_file_list _((void));
X
Xstatic void
Xcopy_file_list()
X{
X	string_ty	*project_name;
X	long		change_number;
X
X	trace(("copy_file_list()\n{\n"/*}*/));
X	arglex();
X	project_name = 0;
X	change_number = 0;
X	while (arglex_token != arglex_token_eoln)
X	{
X		switch (arglex_token)
X		{
X		default:
X			generic_argument(copy_file_usage);
X			continue;
X
X		case arglex_token_change:
X			if (arglex() != arglex_token_number)
X				copy_file_usage();
X			/* fall through... */
X
X		case arglex_token_number:
X			if (change_number)
X				fatal("duplicate -Change option");
X			change_number = arglex_value.alv_number;
X			if (change_number < 1)
X				fatal("change %ld out of range", change_number);
X			break;
X
X		case arglex_token_project:
X			if (arglex() != arglex_token_string)
X				copy_file_usage();
X			if (project_name)
X				fatal("duplicate -Project option");
X			project_name = str_from_c(arglex_value.alv_string);
X			break;
X		}
X		arglex();
X	}
X	list_project_files(project_name, change_number);
X	if (project_name)
X		str_free(project_name);
X	trace((/*{*/"}\n"));
X}
X
X
Xstatic void copy_file_main _((void));
X
Xstatic void
Xcopy_file_main()
X{
X	string_ty	*id;
X	string_ty	*dd;
X	string_ty	*bl;
X	wlist		wl;
X	string_ty	*s1;
X	string_ty	*s2;
X	int		stomp;
X	cstate		cstate_data;
X	pstate		pstate_data;
X	int		j;
X	pconf		pconf_data;
X	string_ty	*project_name;
X	project_ty	*pp;
X	long		change_number;
X	change_ty	*cp;
X	int		nolog;
X	user_ty		*up;
X	char		*output;
X	long		delta_number;
X	string_ty	*delta_number_implies_edit_number = 0;
X	int		config_seen;
X	string_ty	*config_name;
X
X	trace(("copy_file_main()\n{\n"/*}*/));
X	wl_zero(&wl);
X	stomp = 0;
X	project_name = 0;
X	change_number = 0;
X	nolog = 0;
X	output = 0;
X	delta_number = 0;
X	while (arglex_token != arglex_token_eoln)
X	{
X		switch (arglex_token)
X		{
X		default:
X			generic_argument(copy_file_usage);
X			continue;
X
X		case arglex_token_overwriting:
X			if (stomp)
X			{
X				duplicate:
X				fatal
X				(
X					"duplicate %s option",
X					arglex_value.alv_string
X				);
X			}
X			stomp = 1;
X			break;
X
X		case arglex_token_string:
X			s1 = str_from_c(arglex_value.alv_string);
X			os_become_orig();
X			s2 = os_pathname(s1, 1);
X			os_become_undo();
X			str_free(s1);
X			if (wl_member(&wl, s2))
X			{
X				fatal
X				(
X					"file \"%s\" named more then once",
X					s2->str_text
X				);
X			}
X			wl_append(&wl, s2);
X			str_free(s2);
X			break;
X
X		case arglex_token_change:
X			if (arglex() != arglex_token_number)
X				copy_file_usage();
X			/* fall through... */
X
X		case arglex_token_number:
X			if (change_number)
X				fatal("duplicate -Change option");
X			change_number = arglex_value.alv_number;
X			if (change_number < 1)
X				fatal("change %ld out of range", change_number);
X			break;
X
X		case arglex_token_project:
X			if (arglex() != arglex_token_string)
X				copy_file_usage();
X			if (project_name)
X				fatal("duplicate -Project option");
X			project_name = str_from_c(arglex_value.alv_string);
X			break;
X
X		case arglex_token_nolog:
X			if (nolog)
X				goto duplicate;
X			nolog = 1;
X			break;
X
X		case arglex_token_delta:
X			if (delta_number)
X				goto duplicate;
X			if (arglex() != arglex_token_number)
X				copy_file_usage();
X			delta_number = arglex_value.alv_number;
X			if (delta_number < 1)
X			{
X				fatal
X				(
X					"delta %ld is out of range",
X					delta_number
X				);
X			}
X			break;
X
X		case arglex_token_output:
X			if (output)
X				goto duplicate;
X			switch (arglex())
X			{
X			default:
X				copy_file_usage();
X
X			case arglex_token_stdio:
X				output = "";
X				break;
X
X			case arglex_token_string:
X				output = arglex_value.alv_string;
X				break;
X			}
X			break;
X		}
X		arglex();
X	}
X	if (!wl.wl_nwords)
X		fatal("no files named");
X
X	/*
X	 * make sure output is unambiguous
X	 */
X	if (output)
X	{
X		if (wl.wl_nwords != 1)
X		{
X			fatal
X			(
X		"only one file may be specifed when the -Output option is used"
X			);
X		}
X		stomp = 1;
X	}
X
X	/*
X	 * locate project data
X	 */
X	if (!project_name)
X		project_name = user_default_project();
X	pp = project_alloc(project_name);
X	str_free(project_name);
X	project_bind_existing(pp);
X
X	/*
X	 * locate user data
X	 */
X	up = user_executing(pp);
X
X	/*
X	 * locate change data
X	 */
X	if (!change_number)
X		change_number = user_default_change(up);
X	cp = change_alloc(pp, change_number);
X	change_bind_existing(cp);
X
X	/*
X	 * lock the change file
X	 */
X	if (!output)
X	{
X		change_cstate_lock_prepare(cp);
X		lock_take();
X	}
X	cstate_data = change_cstate_get(cp);
X	pstate_data = project_pstate_get(pp);
X	pconf_data = change_pconf_get(cp);
X
X	/*
X	 * When there is no explicit output file:
X	 * It is an error if the change is not in the in_development state.
X	 * It is an error if the change is not assigned to the current user.
X	 */
X	if (output)
X	{
X		switch (cstate_data->state)
X		{
X		case cstate_state_being_developed:
X		case cstate_state_being_reviewed:
X		case cstate_state_awaiting_integration:
X		case cstate_state_being_integrated:
X			break;
X
X		default:
X			change_fatal(cp, "not in a suitable state");
X		}
X	}
X	else
X	{
X		if (cstate_data->state != cstate_state_being_developed)
X			change_fatal(cp, "not in 'being_developed' state");
X		if (!str_equal(change_developer_name(cp), user_name(up)))
X		{
X			change_fatal
X			(
X				cp,
X				"user \"%S\" is not the developer",
X				user_name(up)
X			);
X		}
X	}
X
X	/*
X	 * it is an error if the delta does not exist
X	 */
X	if (delta_number)
X	{
X		switch (project_delta_exists(pp, delta_number))
X		{
X		case 0:
X			project_fatal(pp, "delta %ld unknown", delta_number);
X
X		case -1:
X			/*
X			 * the delta given was the current baseline,
X			 * don't bother with history
X			 *
X			 * Except when integrating,
X			 * in which case the integration copy may differ.
X			 */
X			if (cstate_data->state != cstate_state_being_integrated)
X				delta_number = 0;
X			break;
X		}
X	}
X
X	/*
X	 * resolve the path of each file
X	 * 1. the absolute path of the file name is obtained
X	 * 2. if the file is inside the development directory, ok
X	 * 3. if the file is inside the baseline, ok
X	 * 4. if neither, error
X	 *
X	 * To cope with automounters, directories are stored as given,
X	 * or are derived from the home directory in the passwd file.
X	 * Within aegis, pathnames have their symbolic links resolved,
X	 * and any comparison of paths is done on this "system idea"
X	 * of the pathname.
X	 */
X	config_seen = 0;
X	config_name = str_from_c(THE_CONFIG_FILE);
X	dd = change_development_directory_get(cp, 1);
X	if (cstate_data->state == cstate_state_being_integrated)
X		id = change_integration_directory_get(cp, 1);
X	else
X		id = 0;
X	bl = project_baseline_path_get(pp, 1);
X	for (j = 0; j < wl.wl_nwords; ++j)
X	{
X		s1 = wl.wl_word[j];
X		assert(s1->str_text[0] == '/');
X		s2 = os_below_dir(dd, s1);
X		if (!s2)
X			s2 = os_below_dir(bl, s1);
X		if (!s2 && id)
X			s2 = os_below_dir(id, s1);
X		if (!s2)
X			change_fatal(cp, "path \"%S\" unrelated", s1);
X		str_free(s1);
X		wl.wl_word[j] = s2;
X		if (str_equal(s2, config_name))
X			config_seen++;
X	}
X	str_free(config_name);
X
X	/*
X	 * ensure that each file
X	 * 1. is not already part of the change
X	 * 2. is in the baseline
X	 */
X	for (j = 0; j < wl.wl_nwords; ++j)
X	{
X		pstate_src	src_data;
X
X		s1 = wl.wl_word[j];
X		if (change_src_find(cp, s1) && !stomp && !output)
X			change_fatal(cp, "file \"%S\": will not overwrite", s1);
X		if (output)
X		{
X			cstate_src	c_src_data;
X
X			/*
X			 * OK to use a file that "almost" exists
X			 */
X			c_src_data = change_src_find(cp, s1);
X			if
X			(
X				c_src_data
X			&&
X				c_src_data->action == file_action_create
X			)
X				continue;
X		}
X		src_data = project_src_find(pp, s1);
X		if
X		(
X			!src_data
X		||
X			src_data->about_to_be_created_by
X		||
X			src_data->deleted_by
X		)
X			project_fatal(pp, "file \"%S\" unknown", s1);
X		if (src_data && src_data->usage == file_usage_build && !output)
X		{
X			change_fatal
X			(
X				cp,
X				"file \"%S\" is built, may not copy",
X				s1
X			);
X		}
X	}
X
X	/*
X	 * Copy each file into the development directory.
X	 * Create any necessary directories along the way.
X	 */
X	for (j = 0; j < wl.wl_nwords; ++j)
X	{
X		string_ty	*from;
X		string_ty	*to;
X
X		s1 = wl.wl_word[j];
X		if (delta_number)
X		{
X			/*
X			 * find the edit number,
X			 * given fie file name and delta number
X			 *
X			 * NULL returned means that the file
X			 * does not exist at the given delta.
X			 */
X			delta_number_implies_edit_number =
X				project_delta_to_edit(pp, delta_number, s1);
X			if (delta_number_implies_edit_number)
X			{
X				/*
X				 * make a temporary file
X				 */
X				from = os_edit_filename();
X				user_become(up);
X				undo_unlink_errok(from);
X				user_become_undo();
X
X				/* 
X				 * get the file from history
X				 */
X				change_run_history_get_command
X				(
X					cp,
X					s1,
X					delta_number_implies_edit_number,
X					from,
X					up
X				);
X			}
X			else
X				from = str_from_c("/dev/null");
X
X			/*
X			 * figure where to send it
X			 */
X			if (output)
X				to = str_from_c(output);
X			else
X				to = str_format("%S/%S", dd, s1);
X
X			/*
X			 * copy the file
X			 */
X			user_become(up);
X			if (!output)
X				os_mkdir_between(dd, s1, 02755);
X			copy_whole_file(from, to, 0);
X
X			/*
X			 * clean up afterwards
X			 */
X			if (delta_number_implies_edit_number)
X				os_unlink_errok(from);
X			user_become_undo();
X			str_free(from);
X			str_free(to);
X		}
X		else
X		{
X			if (id)
X				from = str_format("%S/%S", id, s1);
X			else
X				from = str_format("%S/%S", bl, s1);
X			if (output)
X				to = str_from_c(output);
X			else
X				to = str_format("%S/%S", dd, s1);
X
X			/*
X			 * copy the file
X			 */
X			user_become(up);
X			if (!output)
X				os_mkdir_between(dd, s1, 02755);
X			copy_whole_file(from, to, 0);
X			user_become_undo();
X
X			/* 
X			 * clean up afterwards
X			 */
X			str_free(from);
X			str_free(to);
X		}
X	}
X
X	/*
X	 * Add each file to the change file,
X	 * or update the edit number.
X	 */
X	if (!output)
X	{
X		for (j = 0; j < wl.wl_nwords; ++j)
X		{
X			cstate_src	c_src_data;
X			pstate_src	p_src_data;
X	
X			s1 = wl.wl_word[j];
X			p_src_data = project_src_find(pp, s1);
X			assert(p_src_data);
X			c_src_data = change_src_find(cp, s1);
X			if (!c_src_data)
X			{
X				c_src_data = change_src_new(cp);
X				c_src_data->file_name = str_copy(s1);
X				c_src_data->action = file_action_modify;
X				c_src_data->usage = p_src_data->usage;
X	
X				/*
X				 * The change now has at least one test,
X				 * so cancel any testing exemption.
X				 * (But test_baseline_exempt is still viable.)
X				 */
X				if
X				(
X					c_src_data->usage == file_usage_test 
X				||
X					c_src_data->usage == file_usage_manual_test
X				)
X					cstate_data->test_exempt = 0;
X			}
X			else
X				str_free(c_src_data->edit_number);
X			assert(p_src_data->edit_number);
X			if (delta_number_implies_edit_number)
X				c_src_data->edit_number =
X					delta_number_implies_edit_number;
X			else
X				c_src_data->edit_number =
X					str_copy(p_src_data->edit_number);
X			if (config_seen)
X				c_src_data->diff_time = 0;
X		}
X
X		/*
X		 * the number of files changed,
X		 * so stomp on the validation fields.
X		 */
X		cstate_data->build_time = 0;
X		cstate_data->test_time = 0;
X		cstate_data->test_baseline_time = 0;
X		cstate_data->regression_test_time = 0;
X	}
X
X	/*
X	 * release the locks
X	 */
X	if (!output)
X	{
X		change_cstate_write(cp);
X		commit();
X		lock_release();
X	}
X
X	/*
X	 * verbose success message
X	 */
X	for (j = 0; j < wl.wl_nwords; ++j)
X		change_verbose(cp, "file \"%S\" copied", wl.wl_word[j]);
X
X	/*
X	 * run the change file command
X	 */
X	if (!output)
X	{
X		if (!nolog)
X			log_open(change_logfile_get(cp), up);
X		change_run_change_file_command(cp, &wl, up);
X	}
X	wl_free(&wl);
X	project_free(pp);
X	change_free(cp);
X	user_free(up);
X	trace((/*{*/"}\n"));
X}
X
X
Xvoid
Xcopy_file()
X{
X	trace(("copy_file()\n{\n"/*}*/));
X	switch (arglex())
X	{
X	default:
X		copy_file_main();
X		break;
X
X	case arglex_token_help:
X		copy_file_help();
X		break;
X
X	case arglex_token_list:
X		copy_file_list();
X		break;
X	}
X	trace((/*{*/"}\n"));
X}
END_OF_FILE
if test 18892 -ne `wc -c <'aegis/aecp.c'`; then
    echo shar: \"'aegis/aecp.c'\" unpacked with wrong size!
fi
# end of 'aegis/aecp.c'
fi
if test -f 'aegis/aeip.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'aegis/aeip.c'\"
else
echo shar: Extracting \"'aegis/aeip.c'\" \(17377 characters\)
sed "s/^X//" >'aegis/aeip.c' <<'END_OF_FILE'
X/*
X *	aegis - project change supervisor
X *	Copyright (C) 1991, 1992, 1993 Peter Miller.
X *	All rights reserved.
X *
X *	This program is free software; you can redistribute it and/or modify
X *	it under the terms of the GNU General Public License as published by
X *	the Free Software Foundation; either version 2 of the License, or
X *	(at your option) any later version.
X *
X *	This program is distributed in the hope that it will be useful,
X *	but WITHOUT ANY WARRANTY; without even the implied warranty of
X *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X *	GNU General Public License for more details.
X *
X *	You should have received a copy of the GNU General Public License
X *	along with this program; if not, write to the Free Software
X *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X * MANIFEST: functions for implementing integrate pass
X */
X
X#include <stdio.h>
X#include <stdlib.h>
X#include <string.h>
X#include <sys/types.h>
X#include <sys/stat.h>
X
X#include <aeip.h>
X#include <ael.h>
X#include <arglex2.h>
X#include <commit.h>
X#include <change.h>
X#include <dir.h>
X#include <error.h>
X#include <file.h>
X#include <help.h>
X#include <lock.h>
X#include <log.h>
X#include <option.h>
X#include <os.h>
X#include <project.h>
X#include <sub.h>
X#include <trace.h>
X#include <undo.h>
X#include <user.h>
X
X
Xstatic void integrate_pass_usage _((void));
X
Xstatic void
Xintegrate_pass_usage()
X{
X	char		*progname;
X
X	progname = option_progname_get();
X	fprintf(stderr, "usage: %s -Integrate_PASS [ <option>... ]\n", progname);
X	fprintf(stderr, "       %s -Integrate_PASS -List [ <option>... ]\n", progname);
X	fprintf(stderr, "       %s -Integrate_PASS -Help\n", progname);
X	quit(1);
X}
X
X
Xstatic void integrate_pass_help _((void));
X
Xstatic void
Xintegrate_pass_help()
X{
X	static char *text[] =
X	{
X"NAME",
X"	%s -Integrate_PASS - pass a change integration",
X"",
X"SYNOPSIS",
X"	%s -Integrate_PASS [ <option>... ]",
X"	%s -Integrate_PASS -List [ <option>... ]",
X"	%s -Integrate_PASS -Help",
X"",
X"DESCRIPTION",
X"	The %s -Integrate_PASS command is used to notify %s",
X"	that a change has passed integration.",
X"",
X"	The change is advanced from the 'being_integrated' state",
X"	to the 'completed' state.  The integration directory is",
X"	renamed as the baseline directory, and the baseline",
X"	directory is deleted.  The change is no longer assigned",
X"	to the current user.",
X"",
X"	While there is a build in progress for any change in a",
X"	project, an integrate pass for the project will wait until",
X"	all the builds are completed before starting.  This is to",
X"	ensure that the baseline is consistent for the entire build.",
X"	Similarly, while an integrate pass is in progress for a",
X"	project, any builds will wait until it is completed before",
X"	starting.",
X"",
X"OPTIONS",
X"	The following options are understood:",
X"",
X"	-Change <number>",
X"		This option may be used to specify a particular",
X"		change within a project.  When no -Change option is",
X"		specified, the AEGIS_CHANGE environment variable is",
X"		consulted.  If that does not exist, the user's",
X"		$HOME/.aegisrc file is examined for a default change",
X"		field (see aeuconf(5) for more information).  If",
X"		that does not exist, when the user is only working",
X"		on one change within a project, that is the default",
X"		change number.  Otherwise, it is an error.",
X"",
X"	-Help",
X"		This option may be used to obtain more",
X"		information about how to use the %s program.",
X"",
X"	-List",
X"		This option may be used to obtain a list of",
X"		suitable subjects for this command.  The list may",
X"		be more general than expected.",
X"",
X"	-Project <name>",
X"		This option may be used to select the project of",
X"		interest.  When no -Project option is specified, the",
X"		AEGIS_PROJECT environment variable is consulted.  If",
X"		that does not exist, the user's $HOME/.aegisrc file",
X"		is examined for a default project field (see",
X"		aeuconf(5) for more information).  If that does not",
X"		exist, when the user is only working on changes",
X"		within a single project, the project name defaults",
X"		to that project.  Otherwise, it is an error.",
X"",
X"	-TERse",
X"		This option may be used to cause listings to",
X"		produce the bare minimum of information.  It is",
X"		usually useful for shell scripts.",
X"",
X"	-Verbose",
X"		This option may be used to cause %s to produce",
X"		more output.  By default %s only produces",
X"		output on errors.  When used with the -List",
X"		option this option causes column headings to be",
X"		added.",
X"",
X"	All options may be abbreviated; the abbreviation is",
X"	documented as the upper case letters, all lower case",
X"	letters and underscores (_) are optional.  You must use",
X"	consecutive sequences of optional letters.",
X"",
X"	All options are case insensitive, you may type them in",
X"	upper case or lower case or a combination of both, case",
X"	is not important.",
X"",
X"	For example: the arguments \"-project, \"-PROJ\" and \"-p\"",
X"	are all interpreted to mean the -Project option.  The",
X"	argument \"-prj\" will not be understood, because",
X"	consecutive optional characters were not supplied.",
X"",
X"	Options and other command line arguments may be mixed",
X"	arbitrarily on the command line, after the function",
X"	selectors.",
X"",
X"	The GNU long option names are understood.  Since all",
X"	option names for aegis are long, this means ignoring the",
X"	extra leading '-'.  The \"--option=value\" convention is",
X"	also understood.",
X"",
X"RECOMMENDED ALIAS",
X"	The recommended alias for this command is",
X"	csh%%	alias aeip '%s -ip \\!* -v'",
X"	sh$	aeip(){%s -ip $* -v}",
X"",
X"ERRORS",
X"	It is an error if the change is not assigned to the",
X"	current user.",
X"	It is an error if The change is not in the",
X"	'being_integrated' state.",
X"	It is an error if there has been no successful '%s",
X"	-Build' command for the integration.",
X"	It is an error if there has been no successful '%s",
X"	-Test' command for the integration.",
X"	It is an error if there has been no successful '%s",
X"	-Test -BaseLine' command for the integration.",
X"",
X"EXIT STATUS",
X"	The %s command will exit with a status of 1 on any",
X"	error.	The %s command will only exit with a status of",
X"	0 if there are no errors.",
X"",
X"COPYRIGHT",
X"	%C",
X"",
X"AUTHOR",
X"	%A",
X	};
X
X	help(text, SIZEOF(text), integrate_pass_usage);
X}
X
X
Xstatic void integrate_pass_list _((void (*)(void)));
X
Xstatic void
Xintegrate_pass_list(usage)
X	void		(*usage)_((void));
X{
X	string_ty	*project_name;
X
X	trace(("integrate_pass_list()\n{\n"/*}*/));
X	arglex();
X	project_name = 0;
X	while (arglex_token != arglex_token_eoln)
X	{
X		switch (arglex_token)
X		{
X		default:
X			generic_argument(usage);
X			continue;
X
X		case arglex_token_project:
X			if (arglex() != arglex_token_string)
X				usage();
X			if (project_name)
X				fatal("duplicate -Project option");
X			project_name = str_from_c(arglex_value.alv_string);
X			break;
X		}
X		arglex();
X	}
X	list_changes_in_state_mask
X	(
X		project_name,
X		1 << cstate_state_being_integrated
X	);
X	if (project_name)
X		str_free(project_name);
X	trace((/*{*/"}\n"));
X}
X
X
Xstatic void integrate_pass_main _((void));
X
Xstatic void
Xintegrate_pass_main()
X{
X	string_ty	*hp;
X	string_ty	*id;
X	string_ty	*cwd;
X	pstate		pstate_data;
X	cstate		cstate_data;
X	string_ty	*old_baseline;
X	string_ty	*new_baseline;
X	string_ty	*dev_dir;
X	string_ty	*int_name;
X	string_ty	*rev_name;
X	string_ty	*dev_name;
X	cstate_history	history_data;
X	pstate_history	phistory_data;
X	int		j;
X	int		ncmds;
X	pconf		pconf_data;
X	string_ty	*project_name;
X	project_ty	*pp;
X	long		change_number;
X	change_ty	*cp;
X	int		nolog;
X	user_ty		*up;
X	user_ty		*devup;
X	int		nerr;
X
X	trace(("integrate_pass_main()\n{\n"/*}*/));
X	project_name = 0;
X	change_number = 0;
X	nolog = 0;
X	nerr = 0;
X	while (arglex_token != arglex_token_eoln)
X	{
X		switch (arglex_token)
X		{
X		default:
X			generic_argument(integrate_pass_usage);
X			continue;
X
X		case arglex_token_change:
X			if (arglex() != arglex_token_number)
X				integrate_pass_usage();
X			/* fall through... */
X
X		case arglex_token_number:
X			if (change_number)
X				fatal("duplicate -Change option");
X			change_number = arglex_value.alv_number;
X			if (change_number < 1)
X				fatal("change %ld out of range", change_number);
X			break;
X
X		case arglex_token_project:
X			if (arglex() != arglex_token_string)
X				integrate_pass_usage();
X			/* fall through... */
X	
X		case arglex_token_string:
X			if (project_name)
X				fatal("duplicate -Project option");
X			project_name = str_from_c(arglex_value.alv_string);
X			break;
X
X		case arglex_token_nolog:
X			if (nolog)
X				fatal("duplicate %s option", arglex_value.alv_string);
X			nolog = 1;
X			break;
X		}
X		arglex();
X	}
X
X	/*
X	 * locate project data
X	 */
X	if (!project_name)
X		project_name = user_default_project();
X	pp = project_alloc(project_name);
X	str_free(project_name);
X	project_bind_existing(pp);
X
X	/*
X	 * locate user data
X	 */
X	up = user_executing(pp);
X
X	/*
X	 * locate change data
X	 */
X	if (!change_number)
X		change_number = user_default_change(up);
X	cp = change_alloc(pp, change_number);
X	change_bind_existing(cp);
X
X	/*
X	 * Take an advisory write lock on the appropriate row of the change
X	 * table.  Take an advisory write lock on the appropriate row of the
X	 * user table.  Block until can get both simultaneously.
X	 */
X	project_pstate_lock_prepare(pp);
X	change_cstate_lock_prepare(cp);
X	user_ustate_lock_prepare(up);
X	project_build_write_lock_prepare(pp);
X	lock_take();
X	cstate_data = change_cstate_get(cp);
X	pstate_data = project_pstate_get(pp);
X	pconf_data = change_pconf_get(cp);
X
X	/*
X	 * It is an error if the change is not in the being_integrated state.
X	 * It is an error if the change is not assigned to the current user.
X	 * It is an error if the change has no current build.
X	 * It is an error if the change has no current test pass.
X	 * It is an error if the change has no current baseline test pass.
X	 */
X	if (cstate_data->state != cstate_state_being_integrated)
X		change_fatal(cp, "not in 'being_integrated' state");
X	nerr = 0;
X	if (!str_equal(change_integrator_name(cp), user_name(up)))
X	{
X		change_fatal
X		(
X			cp,
X			"user \"%S\" is not the integrator",
X			user_name(up)
X		);
X	}
X	if (!cstate_data->build_time)
X	{
X		change_error
X		(
X			cp,
X			"no current '%s -Build' registration",
X			option_progname_get()
X		);
X		++nerr;
X	}
X	if (!cstate_data->test_exempt && !cstate_data->test_time)
X	{
X		change_error
X		(
X			cp,
X			"no current '%s -Test' registration",
X			option_progname_get()
X		);
X		++nerr;
X	}
X	if
X	(
X		!cstate_data->test_baseline_exempt
X	&&
X		!cstate_data->test_baseline_time
X	)
X	{
X		change_error
X		(
X			cp,
X			"no current '%s -Test -BaseLine' registration",
X			option_progname_get()
X		);
X		++nerr;
X	}
X	if
X	(
X		!cstate_data->regression_test_exempt
X	&&
X		!cstate_data->regression_test_time
X	)
X	{
X		change_error
X		(
X			cp,
X			"no current '%s -Test -REGression' registration",
X			option_progname_get()
X		);
X		++nerr;
X	}
X	if (nerr)
X		quit(1);
X
X	/*
X	 * Make sure they aren't in a nuisance place.
X	 * (Many systems can't delete a directory if any process has
X	 * its current directory within it.)
X	 */
X	os_become_orig();
X	cwd = os_curdir();
X	os_become_undo();
X	if (os_below_dir(change_development_directory_get(cp, 1), cwd))
X		change_fatal(cp, "please leave development directory");
X	id = change_integration_directory_get(cp, 1);
X	if (os_below_dir(id, cwd))
X		change_fatal(cp, "please leave integration directory");
X	if (os_below_dir(project_baseline_path_get(pp, 1), cwd))
X		project_fatal(pp, "please leave baseline directory");
X
X	/*
X	 * add to history for state change
X	 */
X	history_data = change_history_new(cp, up);
X	history_data->what = cstate_history_what_integrate_pass;
X	phistory_data = project_history_new(pp);
X	phistory_data->delta_number = cstate_data->delta_number;
X	phistory_data->change_number = change_number;
X
X	/*
X	 * note that the project has no current integration
X	 */
X	pstate_data->currently_integrating_change = 0;
X
X	/*
X	 * Clear the default-change field of the user row.
X	 * Remove the change from the list of assigned changes in the user
X	 * change table (in the user row).
X	 */
X	user_own_remove(up, project_name_get(pp), change_number);
X
X	/*
X	 * add all of the generated files in the project to this change
X	 * so that their history is remembered
X	 */
X	for (j = 0; j < pstate_data->src->length; ++j)
X	{
X		cstate_src	c_src_data;
X		pstate_src	p_src_data;
X
X		p_src_data = pstate_data->src->list[j];
X		if (p_src_data->usage != file_usage_build)
X			continue;
X		if (p_src_data->deleted_by)
X			continue;
X		if (p_src_data->about_to_be_created_by)
X			continue;
X		c_src_data = change_src_find(cp, p_src_data->file_name);
X		if (c_src_data)
X			continue;
X		c_src_data = change_src_new(cp);
X		c_src_data->file_name = str_copy(p_src_data->file_name);
X		c_src_data->edit_number = str_copy(p_src_data->edit_number);
X		c_src_data->action = file_action_modify;
X		c_src_data->usage = p_src_data->usage;
X	}
X
X	/*
X	 * Update the edit history of each changed file.
X	 * Update the edit number of each file.
X	 * Unlock each file.
X	 */
X	if (!nolog)
X	{
X		user_ty	*pup;
X
X		pup = project_user(pp);
X		log_open(change_logfile_get(cp), pup);
X		user_free(pup);
X	}
X	ncmds = 0;
X	hp = project_history_path_get(pp);
X	trace(("mark\n"));
X	for (j = 0; j < cstate_data->src->length; ++j)
X	{
X		cstate_src	c_src_data;
X		pstate_src	p_src_data;
X		string_ty	*src_file;
X		string_ty	*dst_file;
X
X		c_src_data = cstate_data->src->list[j];
X		c_src_data->diff_time = 0;
X		c_src_data->diff_file_time = 0;
X
X		p_src_data = project_src_find(pp, c_src_data->file_name);
X		if (!p_src_data)
X			project_fatal(pp, "corrupted src field");
X		p_src_data->locked_by = 0;
X		switch (c_src_data->action)
X		{
X		case file_action_create:
X			/*
X			 * because history is never thrown away,
X			 * we could be reusing an existing history file
X			 */
X			if (p_src_data->edit_number)
X			{
X				assert(p_src_data->deleted_by);
X				p_src_data->deleted_by = 0;
X				goto reusing_an_old_file;
X			}
X
X			/*
X			 * it exists, now
X			 */
X			trace(("create\n"));
X			p_src_data->about_to_be_created_by = 0;
X
X			/*
X			 * create the history
X			 */
X			change_run_history_create_command
X			(
X				cp,
X				c_src_data->file_name
X			);
X			p_src_data->edit_number =
X				change_run_history_query_command
X				(
X					cp,
X					c_src_data->file_name
X				);
X			c_src_data->edit_number =
X				str_copy(p_src_data->edit_number);
X			break;
X
X		case file_action_modify:
X			reusing_an_old_file:
X			trace(("modify\n"));
X			assert(str_equal(p_src_data->edit_number,
X				c_src_data->edit_number));
X
X			/*
X			 * prepare for the history commands
X			 */
X			src_file =
X				str_format("%S/%S", id, c_src_data->file_name);
X			dst_file =
X				str_format("%S/%S", hp, c_src_data->file_name);
X
X			/*
X			 * update the history
X			 */
X			change_run_history_put_command
X			(
X				cp,
X				c_src_data->file_name
X			);
X			p_src_data->edit_number =
X				change_run_history_query_command
X				(
X					cp,
X					c_src_data->file_name
X				);
X			c_src_data->edit_number =
X				str_copy(p_src_data->edit_number);
X			break;
X
X		case file_action_remove:
X			/*
X			 * don't need to do much for deletions.
X			 * Note that we never throw the history file away.
X			 */
X			trace(("remove\n"));
X			assert(str_equal(p_src_data->edit_number,
X				c_src_data->edit_number));
X			p_src_data->deleted_by = change_number;
X			break;
X		}
X	}
X
X	/*
X	 * Advance the change to the 'completed' state.
X	 * Clear the build-time field.
X	 * Clear the test-time field.
X	 * Clear the test-baseline-time field.
X	 */
X	cstate_data->state = cstate_state_completed;
X	cstate_data->build_time = 0;
X	cstate_data->test_time = 0;
X	cstate_data->test_baseline_time = 0;
X	cstate_data->regression_test_time = 0;
X	dev_dir = str_copy(change_development_directory_get(cp, 1));
X	change_development_directory_clear(cp);
X	new_baseline = str_copy(change_integration_directory_get(cp, 1));
X	change_integration_directory_clear(cp);
X	int_name = change_integrator_name(cp);
X	rev_name = change_reviewer_name(cp);
X	dev_name = change_developer_name(cp);
X
X	/*
X	 * we are going to keep the delta,
X	 * and throw away the old baseline
X	 */
X	old_baseline =
X		str_format
X		(
X			"%S.D%3.3ld",
X			project_baseline_path_get(pp, 1),
X			cstate_data->delta_number - 1
X		);
X	new_baseline = change_integration_directory_get(cp, 1);
X	project_become(pp);
X	commit_rename(project_baseline_path_get(pp, 1), old_baseline);
X	commit_rename(new_baseline, project_baseline_path_get(pp, 1));
X	commit_rmdir_tree_errok(old_baseline);
X	project_become_undo();
X	str_free(old_baseline);
X
X	/*
X	 * throw away the development directory
X	 */
X	change_verbose(cp, "discard old directories");
X	devup = user_symbolic(pp, dev_name);
X	user_become(devup);
X	commit_rmdir_tree_errok(dev_dir);
X	user_become_undo();
X	str_free(dev_dir);
X	user_free(devup);
X
X	/*
X	 * Write the change table row.
X	 * Write the user table row.
X	 * Release advisory locks.
X	 */
X	change_cstate_write(cp);
X	user_ustate_write(up);
X	project_pstate_write(pp);
X	commit();
X	lock_release();
X
X	/*
X	 * run the notify command
X	 */
X	change_run_integrate_pass_notify_command(cp);
X
X	/*
X	 * verbose success message
X	 */
X	change_verbose(cp, "integrate pass");
X	change_free(cp);
X	project_free(pp);
X	user_free(up);
X	trace((/*{*/"}\n"));
X}
X
X
Xvoid
Xintegrate_pass()
X{
X	trace(("integrate_pass()\n{\n"/*}*/));
X	switch (arglex())
X	{
X	default:
X		integrate_pass_main();
X		break;
X
X	case arglex_token_help:
X		integrate_pass_help();
X		break;
X
X	case arglex_token_list:
X		integrate_pass_list(integrate_pass_usage);
X		break;
X	}
X	trace((/*{*/"}\n"));
X}
END_OF_FILE
if test 17377 -ne `wc -c <'aegis/aeip.c'`; then
    echo shar: \"'aegis/aeip.c'\" unpacked with wrong size!
fi
# end of 'aegis/aeip.c'
fi
if test -f 'aegis/col.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'aegis/col.c'\"
else
echo shar: Extracting \"'aegis/col.c'\" \(20909 characters\)
sed "s/^X//" >'aegis/col.c' <<'END_OF_FILE'
X/*
X *	aegis - project change supervisor
X *	Copyright (C) 1991, 1992, 1993 Peter Miller.
X *	All rights reserved.
X *
X *	This program is free software; you can redistribute it and/or modify
X *	it under the terms of the GNU General Public License as published by
X *	the Free Software Foundation; either version 2 of the License, or
X *	(at your option) any later version.
X *
X *	This program is distributed in the hope that it will be useful,
X *	but WITHOUT ANY WARRANTY; without even the implied warranty of
X *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X *	GNU General Public License for more details.
X *
X *	You should have received a copy of the GNU General Public License
X *	along with this program; if not, write to the Free Software
X *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X * MANIFEST: functions for columnized output
X */
X
X#include <stdio.h>
X#include <stddef.h>
X#include <string.h>
X#include <ctype.h>
X
X#include <col.h>
X#include <error.h>
X#include <glue.h>
X#include <mem.h>
X#include <option.h>
X#include <os.h>
X#include <pager.h>
X#include <s-v-arg.h>
X#include <trace.h>
X
X
X#define PRINTER_THRESHOLD 33
X
X
Xtypedef struct col_ty col_ty;
Xstruct col_ty
X{
X	int	icol;
X	int	ocol;
X	size_t	text_length_max;
X	size_t	text_length;
X	char	*text;
X	char	*current;
X	int	min;
X	int	max;
X	char	*heading;
X	int	heading_required;
X	char	*top_of_page_diverted;
X};
X
Xstatic	size_t	ncols;
Xstatic	col_ty	**col;
Xstatic	char	*filename;
Xstatic	FILE	*fp;
Xstatic	char	pager[] = "PAGER";
Xstatic	long	page_number;
Xstatic	long	page_line;
Xstatic	int	top_of_page;
Xstatic	int	page_width;
Xstatic	int	page_length;
Xstatic	int	is_a_printer;
Xstatic	char	*title1;
Xstatic	char	*title2;
Xstatic	long	page_time;
Xstatic	int	unf;
X
X
X/*
X * NAME
X *	col_open
X *
X * SYNOPSIS
X *	void col_open(char *pathname);
X *
X * DESCRIPTION
X *	The col_open function is used to
X *	open a file for outputting columnar data.
X *
X * ARGUMENTS
X *	pathname	- name of file to write,
X *			pager is used if NULL pointer given.
X *
X * CAVEAT
X *	All other calls to col_ functions must be bracketed
X *	by col_open and col_close calls.
X */
X
Xvoid
Xcol_open(s)
X	char	*s;
X{
X	trace(("col_open(s = %08lX)\n{\n"/*}*/, s));
X	os_become_must_not_be_active();
X	trace_string(s);
X	assert(!filename);
X	assert(!fp);
X	assert(!ncols);
X	if (s)
X	{
X		filename = mem_copy_string(s);
X		os_become_orig();
X		fp = glue_fopen(filename, "w");
X		if (!fp)
X			nfatal("open(\"%s\")", filename);
X		os_become_undo();
X	}
X	else
X	{
X		fp = pager_open();
X		filename = pager;
X	}
X	page_number = 0;
X	page_line = 0;
X	top_of_page = 1;
X	/* don't use the last column, many terminals are dumb */
X	page_width = option_page_width_get() - 1;
X	page_length = option_page_length_get();
X	is_a_printer = (page_length > PRINTER_THRESHOLD);
X	if (is_a_printer)
X	{
X		/* bottom margin, avoid the perforation */
X		page_length -= 3;
X	}
X	else
X	{
X		/* leave the last line for the pager */
X		page_length--;
X	}
X	time(&page_time);
X	unf = option_unformatted_get();
X	trace((/*{*/"}\n"));
X}
X
X
X/*
X * NAME
X *	col_error
X *
X * SYNOPSIS
X *	void col_error(void);
X *
X * DESCRIPTION
X *	The col_error function is used to
X *	report errors when they occur.
X *
X *	The error will either be on a file with a known name,
X *	or should be reported via the pager subsystem.
X */
X
Xstatic void col_error _((void));
X
Xstatic void
Xcol_error()
X{
X	if (filename == pager)
X		pager_error(fp);
X	else
X		nfatal("write \"%s\"", filename);
X}
X
X
X/*
X * NAME
X *	col_close
X *
X * SYNOPSIS
X *	void col_close(void);
X *
X * DESCRIPTION
X *	The col_close function is used to
X *	terminate columnar output.
X *
X *	All dynamic memory consumed will be released.
X *
X * CAVEAT
X *	All other calls to col_ functions must be bracketed
X *	by col_open and col_close calls.
X */
X
Xvoid
Xcol_close()
X{
X	int	j;
X	col_ty	*cp;
X
X	/*
X	 * free the memory consumed by the columns
X	 */
X	trace(("col_close()\n{\n"/*}*/));
X	if (ncols)
X	{
X		for (j = 0; j < ncols; ++j)
X		{
X			cp = col[j];
X
X			if (cp->text_length_max)
X				mem_free(cp->text);
X			if (cp->heading)
X				mem_free(cp->heading);
X		}
X		mem_free((char *)col);
X		ncols = 0;
X		col = 0;
X	}
X	if (title1)
X	{
X		mem_free(title1);
X		title1 = 0;
X	}
X	if (title2)
X	{
X		mem_free(title2);
X		title2 = 0;
X	}
X
X	/*
X	 * write the last of the output
X	 */
X	if (filename != pager)
X	{
X		if (glue_fflush(fp))
X			col_error();
X	}
X	else
X	{
X		if (fflush(fp))
X			col_error();
X	}
X
X	/*
X	 * close the output
X	 */
X	if (filename != pager)
X	{
X		if (glue_fclose(fp))
X			nfatal("close(\"%s\")", filename);
X		mem_free(filename);
X	}
X	else
X		pager_close(fp);
X	fp = 0;
X	filename = 0;
X	trace((/*{*/"}\n"));
X}
X
X
X/*
X * NAME
X *	col_create
X *
X * SYNOPSIS
X *	void col_create(void);
X *
X * DESCRIPTION
X *	The col_create function is used to
X *	specify a range of locations for an output column.
X *
X * ARGUMENTS
X *	min	- the left-hand edge of the column
X *	max	- the right-hand edge of the column, plus one
X *		  zero means the rest of the line
X *
X * RETURNS
X *	int; a small non-negative integer, as a unique column identifier
X */
X
Xint 
Xcol_create(min, max)
X	int	min;
X	int	max;
X{
X	col_ty	*cp;
X
X	trace(("col_create(min = %d, max = %d)\n{\n"/*}*/, min, max));
X	if (!max)
X	{
X		max = page_width;
X		if (max <= min)
X			max = min + 8;
X	}
X
X	/*
X	 * try to get sensable behaviour out of narrow windows
X	 */
X	if (max > page_width)
X		page_width = max;
X
X	assert(min < max);
X	cp = (col_ty *)mem_alloc(sizeof(col_ty));
X	*(col_ty **)enlarge(&ncols, (char **)&col, sizeof(col_ty *)) = cp;
X	cp->min = min;
X	cp->max = max;
X	cp->text_length_max = 0;
X	cp->text_length = 0;
X	cp->text = 0;
X	cp->icol = 0;
X	cp->ocol = 0;
X	cp->heading = 0;
X	cp->heading_required = 0;
X	cp->top_of_page_diverted = 0;
X	trace(("return %d;\n", ncols - 1));
X	trace((/*{*/"}\n"));
X	return (ncols - 1);
X}
X
X
X/*
X * NAME
X *	col_save_char
X *
X * SYNOPSIS
X *	void col_save_char(col_ty *cp, int c);
X *
X * DESCRIPTION
X *	The col_save_char function is used to
X *	append a character to the output buffered for a specified column.
X *
X * ARGUMENTS
X *	cp	- pointer to the column
X *	c	- the character to append
X */
X
Xstatic void col_save_char _((col_ty *, int));
X
Xstatic void
Xcol_save_char(cp, c)
X	col_ty	*cp;
X	int	c;
X{
X	if (cp->text_length >= cp->text_length_max)
X	{
X		/*
X		 * always alloc one too large
X		 * so col_eoln can put NUL on the end.
X		 */
X		if (!cp->text_length_max)
X		{
X			cp->text_length_max = 50;
X			cp->text = mem_alloc(cp->text_length_max + 1);
X		}
X		else
X		{
X			cp->text_length_max += 100;
X			mem_change_size(&cp->text, cp->text_length_max + 1);
X		}
X	}
X	cp->text[cp->text_length++] = c;
X}
X
X
X/*
X * NAME
X *	col_putchar
X *
X * SYNOPSIS
X *	void col_putchar(col_ty *cp, int c);
X *
X * DESCRIPTION
X *	The col_putchar function is used to
X *	append a character to the buffer stored for a specified column.
X *
X *	This function filters tab characters in order to expand them,
X *	and preserve the visual nature of 8-character spaces within a column,
X *	irrespective of the actual screen location of the column when output.
X *
X * ARGUMENTS
X *	cp	- pointer to the column
X *	c	- the character to append
X */
X
Xstatic void col_putchar _((col_ty *, int));
X
Xstatic void
Xcol_putchar(cp, c)
X	col_ty	*cp;
X	int	c;
X{
X	switch (c)
X	{ 
X	case ' ':
X		col_save_char(cp, c);
X		cp->icol++;
X		break;
X
X	case '\t':
X		for (;;)
X		{
X			col_save_char(cp, ' ');
X			cp->icol++;
X			if (!(cp->icol & 7))
X				break;
X		}
X		break;
X
X	case '\n':
X		col_save_char(cp, c);
X		cp->icol = 0;
X		break;
X
X	default:
X		if (isprint(c))
X		{
X			col_save_char(cp, c);
X			cp->icol++;
X		}
X		else
X		{
X			col_save_char(cp, '\\');
X			col_save_char(cp, '0' + ((c >> 6) & 3));
X			col_save_char(cp, '0' + ((c >> 3) & 7));
X			col_save_char(cp, '0' + (c & 7));
X			cp->icol += 4;
X		}
X		break;
X	}
X}
X
X
X/*
X * NAME
X *	col_puts
X *
X * SYNOPSIS
X *	void col_puts(int cid, char *s);
X *
X * DESCRIPTION
X *	The col_puts function is used to append strings
X *	to columns for later output.
X *
X * ARGUMENTS
X *	cid	- column identifier
X *	s	- string to be appended
X *
X * CAVEAT
X *	This is the external user interface for placing characters in a column.
X */
X
Xvoid
Xcol_puts(cid, s)
X	int		cid;
X	char		*s;
X{
X	col_ty		*cp;
X
X	trace(("col_puts(cid = %d, s = %08lX)\n{\n"/*}*/, cid, s));
X	assert(cid >= 0 && cid < ncols);
X	cp = col[cid];
X	while (*s)
X		col_putchar(cp, *s++);
X	trace((/*{*/"}\n"));
X}
X
X
X/*
X * NAME
X *	col_printf
X *
X * SYNOPSIS
X *	void col_printf(int cid, char *format, ...);
X *
X * DESCRIPTION
X *	The col_printf function is used to
X *	format strings for appending to columns for later output.
X *
X *	The format is that used by printf et al.
X *
X * ARGUMENTS
X *	cid	- column identifier
X *	format	- format string, a la printf
X *	...	- additional arguments as required by the format
X *
X * CAVEAT
X *	This is the external user interface for placing characters in a column.
X */
X
Xvoid
Xcol_printf(cid, s sva_last)
X	int		cid;
X	char		*s;
X	sva_last_decl
X{
X	va_list		ap;
X	char		buffer[1 << 12];
X
X	trace(("col_printf(cid = %d, s = %08lX, ...)\n{\n"/*}*/, cid, s));
X	sva_init(ap, s);
X	trace_string(s);
X	vsprintf(buffer, s, ap);
X	va_end(ap);
X	col_puts(cid, buffer);
X	trace((/*{*/"}\n"));
X}
X
X
X/*
X * NAME
X *	top_of_page_mark
X *
X * SYNOPSIS
X *	void top_of_page_mark(void);
X *
X * DESCRIPTION
X *	The top_of_page_mark function is used to
X *	mark that the top of page has occurred,
X *	and that top-of-page processing should be performed
X *	when next there is output.
X */
X
Xstatic void top_of_page_mark _((void));
X
Xstatic void
Xtop_of_page_mark()
X{
X	int	j;
X	col_ty	*cp;
X
X	top_of_page = 1;
X	for (j = 0; j < ncols; ++j)
X	{
X		cp = col[j];
X		if (cp->heading)
X			cp->heading_required = 1;
X	}
X}
X
X
X#define INDENT 8
X
Xstatic int	in_col;
Xstatic int	out_col;
X
Xstatic void top_of_page_processing _((void)); /* forward */
X
X
X/*
X * NAME
X *	col_emit_char
X *
X * SYNOPSIS
X *	void col_emit_char(int c);
X *
X * DESCRIPTION
X *	The col_emit_char function is used to
X *	emit on character to the output file or pager.
X *
X *	White space optimization is performed, raplacing
X *	sequences of blanks with horizontal tabs whenever possible.
X *
X *	This function is also responsible for tracking when end-of-page
X *	is reached and notifying that top-of-page processing is required.
X *
X * ARGUMENTS
X *	c	- character to emit
X */
X
Xstatic void col_emit_char _((int));
X
Xstatic void
Xcol_emit_char(c)
X	int	c;
X{
X	assert(fp);
X	if (top_of_page)
X		top_of_page_processing();
X	switch (c)
X	{
X	case '\n':
X		if (filename != pager)
X			glue_fputc('\n', fp);
X		else
X			putc('\n', fp);
X#ifdef DEBUG
X		if (filename != pager)
X			glue_fflush(fp);
X		else
X			fflush(fp);
X#endif
X		in_col = 0;
X		out_col = 0;
X		page_line++;
X		if (page_line >= page_length)
X			top_of_page_mark();
X		break;
X
X	case ' ':
X		++in_col;
X		break;
X
X	case '\t':
X		in_col = (in_col + 8) & -8;
X		break;
X
X	default:
X		if (!unf)
X		{
X			while
X			(
X				((out_col + 8) & ~7) <= in_col
X			&&
X				out_col + 1 < in_col
X			)
X			{
X				if (filename != pager)
X					glue_fputc('\t', fp);
X				else
X					putc('\t', fp);
X				out_col = (out_col + 8) & -8;
X			}
X		}
X		while (out_col < in_col)
X		{
X			if (filename != pager)
X				glue_fputc(' ', fp);
X			else
X				putc(' ', fp);
X			++out_col;
X		}
X		if (filename != pager)
X			glue_fputc(c, fp);
X		else
X			putc(c, fp);
X		in_col++;
X		out_col++;
X		break;
X	}
X	if (filename != pager)
X	{
X		if (glue_ferror(fp))
X			col_error();
X	}
X	else
X	{
X		if (ferror(fp))
X			col_error();
X	}
X}
X
X
X/*
X * NAME
X *	col_emit_str
X *
X * SYNOPSIS
X *	void col_emit_str(char *s);
X *
X * DESCRIPTION
X *	The col_emit_str function is used to
X *	send a string through the col_emit_char function,
X *	one character at a time.
X *
X * ARGUMENTS
X *	s	- pointer to NUL terminated string
X *		  to be sent.
X */
X
Xstatic void col_emit_str _((char *));
X
Xstatic void
Xcol_emit_str(s)
X	char	*s;
X{
X	while (*s)
X		col_emit_char(*s++);
X}
X
X
X/*
X * NAME
X *	col_eoln_sub
X *
X * SYNOPSIS
X *	void col_eoln_sub(void);
X *
X * DESCRIPTION
X *	The col_eoln_sub function is used to
X *	send the buffered contents of the columns to the
X *	output file or pager.
X *
X *	Columns are wrapped as needed, and thus may emit
X *	more than one line out output.
X *
X *	This function is also usd to emit the column headers.
X */
X
Xstatic void col_eoln_sub _((void));
X
Xstatic void
Xcol_eoln_sub()
X{
X	int	more;
X	int	j;
X	col_ty	*cp;
X
X	trace(("col_eoln_sub()\n{\n"/*}*/));
X	for (;;)
X	{
X		more = 0;
X		for (j = 0; j < ncols; ++j)
X		{
X			int	width;
X			char	*s;
X
X			cp = col[j];
X			if (!cp->current)
X				continue;
X			if (in_col > cp->min)
X			{
X				more = 1;
X				break;
X			}
X			while (in_col < cp->min)
X				col_emit_char(' ');
X			width = cp->max - cp->min;
X			for
X			(
X				s = cp->current;
X				s < cp->current + width && *s && *s != '\n';
X				++s
X			)
X				;
X			if (!*s)
X			{
X				while (cp->current < s)
X					col_emit_char(*cp->current++);
X				cp->current = 0;
X				continue;
X			}
X			if (*s == '\n')
X			{
X				while (cp->current < s)
X					col_emit_char(*cp->current++);
X				cp->current++;
X				for (s = cp->current; isspace(*s); ++s)
X					;
X				if (*s)
X					more = 1;
X				else
X					cp->current = 0;
X				continue;
X			}
X
X			/*
X			 * the line must be wrapped
X			 */
X			while (s > cp->current && !strchr("-_ /", s[-1]))
X				--s;
X			if (s == cp->current)
X			{
X				/*
X				 * no nice place to break it
X				 */
X				while (width > 0)
X				{
X					col_emit_char(*cp->current++);
X					--width;
X				}
X				more = 1;
X				continue;
X			}
X
X			while (cp->current < s)
X				col_emit_char(*cp->current++);
X			while (isspace(*cp->current))
X				cp->current++;
X			if (*cp->current)
X				more = 1;
X			else
X				cp->current = 0;
X		}
X		col_emit_char('\n');
X		if (!more)
X			break;
X	}
X	trace((/*{*/"}\n"));
X}
X
X
X/*
X * NAME
X *	top_of_page_processing
X *
X * SYNOPSIS
X *	void top_of_page_processing(void);
X *
X * DESCRIPTION
X *	The top_of_page_processing function is used to
X *	emit the various titles and headings required at the top of a page.
X *
X * ARGUMENTS
X *
X * RETURNS
X */
X
Xstatic void
Xtop_of_page_processing()
X{
X	int	heading_required;
X	int	j;
X	col_ty	*cp;
X	char	tmp1[50];
X	char	*tmp2;
X	int	frac;
X	char	*check;
X
X	/*
X	 * setup
X	 */
X	top_of_page = 0;
X	page_number++;
X	page_line = 0;
X	if (unf)
X		return;
X
X	/*
X	 * seek to next page
X	 * and emit top margin
X	 */
X	if (is_a_printer)
X	{
X		if (page_number > 1)
X			col_emit_char('\f');
X		col_emit_char('\n');
X		col_emit_char('\n');
X	}
X	col_emit_char('\n');
X
X	/*
X	 * first line of titles
X	 */
X	sprintf(tmp1, "Page %ld", page_number);
X	tmp2 = mem_alloc(page_width + 1);
X	frac = page_width - 2 - strlen(tmp1);
X	if (!title1)
X		title1 = mem_copy_string("");
X	sprintf(tmp2, "%-*.*s  %s", frac, frac, title1, tmp1);
X	for (check = tmp2; *check; ++check)
X		if (!isprint(*check))
X			*check = ' ';
X	col_emit_str(tmp2);
X	col_emit_char('\n');
X
X	/*
X	 * second line of titles
X	 */
X	sprintf(tmp1, "%.24s", ctime(&page_time));
X	frac = page_width - 2 - strlen(tmp1);
X	if (!title2)
X		title2 = mem_copy_string("");
X	sprintf(tmp2, "%-*.*s  %s", frac, frac, title2, tmp1);
X	for (check = tmp2; *check; ++check)
X		if (!isprint(*check))
X			*check = ' ';
X	col_emit_str(tmp2);
X	mem_free(tmp2);
X	col_emit_char('\n');
X
X	/*
X	 * blank line between titles and columns
X	 */
X	col_emit_char('\n');
X
X	/*
X	 * in weird cases where the terminal is too narrow,
X	 * the headings can try to span pages.
X	 * If we are already top-of-page diverted, don't do it again.
X	 */
X	heading_required = 0;
X	for (j = 0; j < ncols; ++j)
X	{
X		if (col[j]->top_of_page_diverted)
X			heading_required--;
X	}
X	if (heading_required < 0)
X	{
X		for (j = 0; j < ncols; ++j)
X			col[j]->heading_required = 0;
X		return;
X	}
X
X	/*
X	 * divert for headings
X	 */
X	heading_required = 0;
X	for (j = 0; j < ncols; ++j)
X	{
X		cp = col[j];
X		assert(!cp->top_of_page_diverted);
X		cp->top_of_page_diverted = cp->current;
X		if (cp->heading && cp->heading_required)
X		{
X			heading_required++;
X			cp->current = cp->heading;
X		}
X		else
X			cp->current = 0;
X		cp->heading_required = 0;
X	}
X
X	/*
X	 * do the headings as necessary
X	 */
X	if (heading_required)
X		col_eoln_sub();
X
X	/*
X	 * undivert from headings
X	 */
X	for (j = 0; j < ncols; ++j)
X	{
X		cp = col[j];
X		cp->current = cp->top_of_page_diverted;
X		cp->heading_required = 0;
X		cp->top_of_page_diverted = 0;
X	}
X}
X
X
X/*
X * NAME
X *	col_eoln
X *
X * SYNOPSIS
X *	void col_eoln(void);
X *
X * DESCRIPTION
X *	The col_eoln function is used to
X *	signal that an entire line of columns has been assembled
X *	and that it should be emitted to the output file or pager.
X *
X *	This is the interface used by clients of this subsystem.
X */
X
Xvoid
Xcol_eoln()
X{
X	int	j;
X	col_ty	*cp;
X	int	heading_required;
X
X	/*
X	 * terminate text fields
X	 */
X	trace(("col_eoln()\n{\n"/*}*/));
X	for (j = 0; j < ncols; ++j)
X	{
X		cp = col[j];
X		if (cp->text_length && cp->text)
X			cp->text[cp->text_length] = 0;
X	}
X
X	/*
X	 * the unformatted variant emits each column
X	 * with a single space between.
X	 * Width specifications will be ignored.
X	 * This is for the convenience of shell scripts.
X	 *
X	 * If a column is wider than 80 characters, it will be trimmed.
X	 * If a column spans several lines, only the first will be printed.
X	 */
X	if (unf)
X	{
X		for (j = 0; j < ncols; ++j)
X		{
X			char	*ep;
X			char	*sp;
X
X			cp = col[j];
X			if (!cp->text || !cp->text_length)
X				continue;
X			sp = cp->text;
X			ep = strchr(sp, '\n');
X			if (!ep)
X				ep = sp + cp->text_length;
X			if (ep - sp > 80)
X				ep = sp + 80;
X			while (sp < ep && isspace(*sp))
X				++sp;
X			while (sp < ep && isspace(ep[-1]))
X				--ep;
X			if (ep <= sp)
X				continue;
X			if (in_col)
X				col_emit_char(' ');
X			while (sp < ep)
X				col_emit_char(*sp++);
X		}
X		col_emit_char('\n');
X		goto cleanup;
X	}
X
X	/*
X	 * do headings if required
X	 *
X	 * Top of page is not enough,
X	 * there could be mid-page changes of heading.
X	 */
X	heading_required = 0;
X	for (j = 0; j < ncols; ++j)
X	{
X		cp = col[j];
X		if (cp->heading && cp->heading_required)
X		{
X			heading_required++;
X			cp->current = cp->heading;
X		}
X		else
X			cp->current = 0;
X		cp->heading_required = 0;
X	}
X	if (heading_required)
X		col_eoln_sub();
X
X	/*
X	 * do the text body
X	 */
X	for (j = 0; j < ncols; ++j)
X	{
X		cp = col[j];
X		if (cp->text_length)
X			cp->current = cp->text;
X		else
X			cp->current = 0;
X	}
X	col_eoln_sub();
X
X	/*
X	 * clean up for next time
X	 */
X	cleanup:
X	for (j = 0; j < ncols; ++j)
X	{
X		cp = col[j];
X		cp->text_length = 0;
X		cp->icol = 0;
X		cp->ocol = 0;
X	}
X	trace((/*{*/"}\n"));
X}
X
X
X/*
X * NAME
X *	col_bol
X *
X * SYNOPSIS
X *	void col_bol(int cid);
X *
X * DESCRIPTION
X *	The col_bol function is used to
X *	ensure that the buffer accumulating a specified column
X *	is at the beginning of a line.
X *
X * ARGUMENTS
X *	cid	- column identifier
X */
X
Xvoid
Xcol_bol(cid)
X	int	cid;
X{
X	col_ty	*cp;
X
X	trace(("col_bol(cid = %d)\n{\n"/*}*/, cid));
X	assert(cid >= 0 && cid < ncols);
X	cp = col[cid];
X	if (cp->icol)
X		col_putchar(cp, '\n');
X	trace((/*{*/"}\n"));
X}
X
X
X/*
X * NAME
X *	col_heading
X *
X * SYNOPSIS
X *	void col_heading(int cid, char *s);
X *
X * DESCRIPTION
X *	The col_heading function is used to
X *	set the heading of a specified column
X *
X * ARGUMENTS
X *	cid	- column identifier
X *	s	- heading to be set
X */
X
Xvoid
Xcol_heading(cid, s)
X	int	cid;
X	char	*s;
X{
X	col_ty	*cp;
X
X	trace(("col_heading(cid = %d, s = %08lX)\n{\n"/*}*/, cid, s));
X	assert(cid >= 0 && cid < ncols);
X	cp = col[cid];
X	if (cp->heading)
X		mem_free(cp->heading);
X	if (s && *s)
X	{
X		/*
X		 * tthe heading_required flag is used
X		 * when a heading is created in the middle of a page,
X		 * and should be output at that time.
X		 */
X		cp->heading = mem_copy_string(s);
X		cp->heading_required = 1;
X	}
X	else
X	{
X		cp->heading = 0;
X		cp->heading_required = 0;
X	}
X	trace((/*{*/"}\n"));
X}
X
X
X/*
X * NAME
X *	col_title
X *
X * SYNOPSIS
X *	void col_title(char *s1, char *s2);
X *
X * DESCRIPTION
X *	The col_title function is used to
X *	set the two lines of page headings.
X *
X * ARGUMENTS
X *	s1	- first line of heading, NULL means blank
X *	s2	- second line of heading, NULL means blank
X */
X
Xvoid
Xcol_title(s1, s2)
X	char		*s1;
X	char		*s2;
X{
X	trace(("col_title(s1 = %08lX, s2 = %08lX)\n{\n"/*}*/, s1, s2));
X	if (!s1)
X		s1 = "";
X	trace_string(s1);
X	if (title1)
X		mem_free(title1);
X	title1 = mem_copy_string(s1);
X
X	if (!s2)
X		s2 = "";
X	trace_string(s2);
X	if (title2)
X		mem_free(title2);
X	title2 = mem_copy_string(s2);
X	trace((/*{*/"}\n"));
X}
X
X
X/*
X * NAME
X *	col_eject
X *
X * SYNOPSIS
X *	void col_eject(void);
X *
X * DESCRIPTION
X *	The col_eject function is used to move to the top of the next page,
X *	if we aren't there already.
X */
X
Xvoid
Xcol_eject()
X{
X	trace(("col_eject()\n{\n"/*}*/));
X	if (!top_of_page)
X	{
X		if (is_a_printer)
X			top_of_page_mark();
X		else
X		{
X			for (;;)
X			{
X				col_emit_char('\n');
X				if (top_of_page)
X					break;
X			}
X		}
X	}
X	trace((/*{*/"}\n"));
X}
X
X
X/*
X * NAME
X *	col_need
X *
X * SYNOPSIS
X *	void col_need(int n);
X *
X * DESCRIPTION
X *	The col_need function is used to numinate that
X *	a number of lines is needed before the end of the page.
X *	If the lines are available, a blank line is emitted,
X *	otherwise a new page is thrown.
X *
X * ARGUMENTS
X *	n	- the number of lines,
X *		  not counting the blank line.
X */
X
Xvoid
Xcol_need(n)
X	int	n;
X{
X	trace(("col_need(n = %d)\n{\n"/*}*/, n));
X	assert(n < page_length);
X	if (page_line + n >= page_length)
X		col_eject();
X	else
X		if (!top_of_page)
X			col_eoln();
X	trace((/*{*/"}\n"));
X}
END_OF_FILE
if test 20909 -ne `wc -c <'aegis/col.c'`; then
    echo shar: \"'aegis/col.c'\" unpacked with wrong size!
fi
# end of 'aegis/col.c'
fi
if test -f 'aegis/main.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'aegis/main.c'\"
else
echo shar: Extracting \"'aegis/main.c'\" \(20552 characters\)
sed "s/^X//" >'aegis/main.c' <<'END_OF_FILE'
X/*
X *	aegis - project change supervisor
X *	Copyright (C) 1991, 1992, 1993 Peter Miller.
X *	All rights reserved.
X *
X *	This program is free software; you can redistribute it and/or modify
X *	it under the terms of the GNU General Public License as published by
X *	the Free Software Foundation; either version 2 of the License, or
X *	(at your option) any later version.
X *
X *	This program is distributed in the hope that it will be useful,
X *	but WITHOUT ANY WARRANTY; without even the implied warranty of
X *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X *	GNU General Public License for more details.
X *
X *	You should have received a copy of the GNU General Public License
X *	along with this program; if not, write to the Free Software
X *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X * MANIFEST: the operating system start-up point
X */
X
X#include <stdio.h>
X#include <stdio.h>
X#include <stdlib.h>
X#include <unistd.h>
X
X#include <aeb.h>
X#include <aeca.h>
X#include <aecd.h>
X#include <aecp.h>
X#include <aecpu.h>
X#include <aed.h>
X#include <aedb.h>
X#include <aedbu.h>
X#include <aede.h>
X#include <aedeu.h>
X#include <aeib.h>
X#include <aeibu.h>
X#include <aeif.h>
X#include <aeip.h>
X#include <ael.h>
X#include <aemv.h>
X#include <aena.h>
X#include <aenc.h>
X#include <aencu.h>
X#include <aend.h>
X#include <aenf.h>
X#include <aenfu.h>
X#include <aeni.h>
X#include <aenpr.h>
X#include <aenrls.h>
X#include <aenrv.h>
X#include <aent.h>
X#include <aentu.h>
X#include <aepa.h>
X#include <aera.h>
X#include <aerd.h>
X#include <aerf.h>
X#include <aeri.h>
X#include <aerm.h>
X#include <aermpr.h>
X#include <aermu.h>
X#include <aerp.h>
X#include <aerpu.h>
X#include <aerrv.h>
X#include <aet.h>
X#include <arglex2.h>
X#include <error.h>
X#include <help.h>
X#include <log.h>
X#include <option.h>
X#include <os.h>
X#include <str.h>
X#include <trace.h>
X#include <undo.h>
X#include <version.h>
X
Xstatic arglex_table_ty argtab[] =
X{
X	{
X		"-ANticipate",
X		(arglex_token_ty)arglex_token_anticipate,
X	},
X	{
X		"-AUTOmatic",
X		(arglex_token_ty)arglex_token_automatic,
X	},
X	{
X		"-BaseLine",
X		(arglex_token_ty)arglex_token_baseline,
X	},
X	{
X		"-Build",
X		(arglex_token_ty)arglex_token_build,
X	},
X	{
X		"-Change",
X		(arglex_token_ty)arglex_token_change,
X	},
X	{
X		"-Change_Attributes",
X		(arglex_token_ty)arglex_token_change_attributes,
X	},
X	{
X		"-Change_Directory",
X		(arglex_token_ty)arglex_token_change_directory,
X	},
X	{
X		"-CoPy_file",
X		(arglex_token_ty)arglex_token_copy_file,
X	},
X	{
X		"-CoPy_file_Undo",
X		(arglex_token_ty)arglex_token_copy_file_undo,
X	},
X	{
X		"-DIFference",
X		(arglex_token_ty)arglex_token_difference,
X	},
X	{
X		"-DIRectory",
X		(arglex_token_ty)arglex_token_directory,
X	},
X	{
X		"-DELta",
X		(arglex_token_ty)arglex_token_delta,
X	},
X	{
X		"-Develop_Begin",
X		(arglex_token_ty)arglex_token_develop_begin,
X	},
X	{
X		"-Develop_Begin_Undo",
X		(arglex_token_ty)arglex_token_develop_begin_undo,
X	},
X	{
X		"-Develop_End",
X		(arglex_token_ty)arglex_token_develop_end,
X	},
X	{
X		"-Develop_End_Undo",
X		(arglex_token_ty)arglex_token_develop_end_undo,
X	},
X	{
X		"-Development_Directory",
X		(arglex_token_ty)arglex_token_development_directory,
X	},
X	{
X		"-Edit",
X		(arglex_token_ty)arglex_token_edit,
X	},
X	{
X		"-Force",
X		(arglex_token_ty)arglex_token_force,
X	},
X	{
X		"-INDependent",
X		(arglex_token_ty)arglex_token_independent,
X	},
X	{
X		"-Integrate_Begin",
X		(arglex_token_ty)arglex_token_integrate_begin,
X	},
X	{
X		"-Integrate_Begin_Undo",
X		(arglex_token_ty)arglex_token_integrate_begin_undo,
X	},
X	{
X		"-Integrate_FAIL",
X		(arglex_token_ty)arglex_token_integrate_fail,
X	},
X	{
X		"-Integrate_PASS",
X		(arglex_token_ty)arglex_token_integrate_pass,
X	},
X	{
X		"-Keep",
X		(arglex_token_ty)arglex_token_keep,
X	},
X	{
X		"-LIBrary",
X		(arglex_token_ty)arglex_token_library,
X	},
X	{
X		"-LOg",
X		(arglex_token_ty)arglex_token_log,
X	},
X	{
X		"-List",
X		(arglex_token_ty)arglex_token_list,
X	},
X	{
X		"-MAJor",
X		(arglex_token_ty)arglex_token_major,
X	},
X	{
X		"-MANual",
X		(arglex_token_ty)arglex_token_manual,
X	},
X	{
X		"-MINImum",
X		(arglex_token_ty)arglex_token_minimum,
X	},
X	{
X		"-MINOr",
X		(arglex_token_ty)arglex_token_minor,
X	},
X	{
X		"-MoVe_file",
X		(arglex_token_ty)arglex_token_move_file,
X	},
X	{
X		"-New_Administrator",
X		(arglex_token_ty)arglex_token_new_administrator,
X	},
X	{
X		"-New_Change",
X		(arglex_token_ty)arglex_token_new_change,
X	},
X	{
X		"-New_Change_Undo",
X		(arglex_token_ty)arglex_token_new_change_undo,
X	},
X	{
X		"-New_Developer",
X		(arglex_token_ty)arglex_token_new_developer,
X	},
X	{
X		"-New_File",
X		(arglex_token_ty)arglex_token_new_file,
X	},
X	{
X		"-New_File_Undo",
X		(arglex_token_ty)arglex_token_new_file_undo,
X	},
X	{
X		"-New_Integrator",
X		(arglex_token_ty)arglex_token_new_integrator,
X	},
X	{
X		"-New_Project",
X		(arglex_token_ty)arglex_token_new_project,
X	},
X	{
X		"-New_ReLeaSe",
X		(arglex_token_ty)arglex_token_new_release,
X	},
X	{
X		"-New_ReViewer",
X		(arglex_token_ty)arglex_token_new_reviewer,
X	},
X	{
X		"-New_Test",
X		(arglex_token_ty)arglex_token_new_test,
X	},
X	{
X		"-New_Test_Undo",
X		(arglex_token_ty)arglex_token_new_test_undo,
X	},
X	{
X		"-Not_Logging",
X		(arglex_token_ty)arglex_token_nolog,
X	},
X	{
X		"-Output",
X		(arglex_token_ty)arglex_token_output,
X	},
X	{
X		"-OverWriting",
X		(arglex_token_ty)arglex_token_overwriting,
X	},
X	{
X		"-Page_Length",
X		(arglex_token_ty)arglex_token_page_length,
X	},
X	{
X		"-Page_Width",
X		(arglex_token_ty)arglex_token_page_width,
X	},
X	{
X		"-Project",
X		(arglex_token_ty)arglex_token_project,
X	},
X	{
X		"-Project_Attributes",
X		(arglex_token_ty)arglex_token_project_attributes,
X	},
X	{
X		"-REGression",
X		(arglex_token_ty)arglex_token_regression,
X	},
X	{
X		"-ReMove_file",
X		(arglex_token_ty)arglex_token_remove_file,
X	},
X	{
X		"-ReMove_file_Undo",
X		(arglex_token_ty)arglex_token_remove_file_undo,
X	},
X	{
X		"-Remove_Administrator",
X		(arglex_token_ty)arglex_token_remove_administrator,
X	},
X	{
X		"-Remove_Developer",
X		(arglex_token_ty)arglex_token_remove_developer,
X	},
X	{
X		"-Remove_Integrator",
X		(arglex_token_ty)arglex_token_remove_integrator,
X	},
X	{
X		"-ReMove_PRoject",
X		(arglex_token_ty)arglex_token_remove_project,
X	},
X	{
X		"-Remove_ReViewer",
X		(arglex_token_ty)arglex_token_remove_reviewer,
X	},
X	{
X		"-Review_FAIL",
X		(arglex_token_ty)arglex_token_review_fail,
X	},
X	{
X		"-Review_PASS",
X		(arglex_token_ty)arglex_token_review_pass,
X	},
X	{
X		"-Review_Pass_Undo",
X		(arglex_token_ty)arglex_token_review_pass_undo,
X	},
X	{
X		"-TERse",
X		(arglex_token_ty)arglex_token_terse,
X	},
X	{
X		"-Test",
X		(arglex_token_ty)arglex_token_test,
X	},
X	{
X		"-UNFormatted",
X		(arglex_token_ty)arglex_token_unformatted,
X	},
X	{
X		"-Verbose",
X		(arglex_token_ty)arglex_token_verbose,
X	},
X
X	/* end marker */
X	{ 0, (arglex_token_ty)0, },
X};
X
X
Xstatic void usage _((void));
X
Xstatic void
Xusage()
X{
X	char	*progname;
X
X	progname = option_progname_get();
X	fprintf(stderr, "usage: %s <function> [ <option>... ]\n", progname);
X	fprintf(stderr, "       %s -Help\n", progname);
X	quit(1);
X}
X
X
Xstatic void main_help _((void));
X
Xstatic void
Xmain_help()
X{
X	static char *text[] =
X	{
X"NAME",
X"	%s - project change supervisor",
X"",
X"SYNOPSIS",
X"	%s <function> [ <option>...  ]",
X"	%s -Help",
X"",
X"DESCRIPTION",
X"	The %s program is used to supervise the development",
X"	and integration of changes into projects.",
X"",
X"FUNCTIONS",
X"	The following functions are available:",
X"",
X"	-Build",
X"		The %s -Build command is used to build a",
X"		project.  See aeb(1) for more information.",
X"",
X"	-Change_Attributes",
X"		The %s -Change_Attributes command is used to",
X"		modify the attributes of a change.  See aeca(1)",
X"		for more information.",
X"",
X"	-Change_Directory",
X"		The %s -Change_Directory command is used to",
X"		change directory.  See aecd(1) for more",
X"		information.",
X"",
X"	-CoPy_file",
X"		The %s -CoPy_file command is used to copy a",
X"		file into a change.  See aecp(1) for more",
X"		information.",
X"",
X"	-CoPy_file_Undo",
X"		The %s -Copy_File_Undo command is used to",
X"		remove a copy of a file from a change.	See",
X"		aecpu(1) for more information.",
X"",
X"	-Develop_Begin",
X"		The %s -Develop_Begin command is used to begin",
X"		development of a change.  See aedb(1) for more",
X"		information.",
X"",
X"	-Develop_Begin_Undo",
X"		The %s -Develop_Begin_Undo command is used to",
X"		cease development of a change.	aedbu(1) for more",
X"		information.",
X"",
X"	-Develop_End",
X"		The %s -Develop_End command is used to",
X"		complete development of a change.  See aede(1)",
X"		for more information.",
X"",
X"	-Develop_End_Undo",
X"		The %s -Develop_End_Undo command is used to",
X"		recall a change for further deveopment.	 See",
X"		aedeu(1) for more information.",
X"",
X"	-DIFFerence",
X"		The %s -DIFFerence command is used to find",
X"		differences between development directory and",
X"		baseline.  See aed(1) for more information.",
X"",
X"	-Help",
X"		This option may be used to obtain more",
X"		information about how to use the %s program.",
X"",
X"	-Integrate_Begin",
X"		The %s -Integrate_Begin command is used to",
X"		being integrating a change.  See aeib(1) for more",
X"		information.",
X"",
X"	-Integrate_Begin_Undo",
X"		The %s -Integrate_Begin_Undo command is used",
X"		to cease integrating a change.	See aeibu(1) for",
X"		more information.",
X"",
X"	-Integrate_Fail",
X"		The %s -Integrate_Fail command is used to fail",
X"		a change integration.  See aeif(1) for more",
X"		information.",
X"",
X"	-Integrate_Pass",
X"		The %s -Integrate_Pass command is used to pass",
X"		a change integration.  See aeip(1) for more",
X"		information.",
X"",
X"	-List",
X"		The %s -List command is used to list",
X"		interesting things.  See ael(1) for more",
X"		information.",
X"",
X"	-MoVe_file",
X"		The aegis -MoVe_file command is	used to	change",
X"		the name of a file as part of a	change.	 See",
X"		aemv(1)	for more information.",
X"",
X"	-New_Administrator",
X"		The %s -New_Administrator command is used to",
X"		add new administrators to a project.  See aena(1)",
X"		for more information.",
X"",
X"	-New_Change",
X"		The %s -New_Change command is used to add a",
X"		new change to a project.  See aenc(1) for more",
X"		information.",
X"",
X"	-New_Change_Undo",
X"		The %s -New_Change_Undo command is used to",
X"		remove a new change from a project.  See aencu(1)",
X"		for more information.",
X"",
X"	-New_Developer",
X"		The %s -New_Developer command is used to add",
X"		new developers to a project.  See aend(1) for",
X"		more information.",
X"",
X"	-New_File",
X"		The %s -New_File command is used to add new",
X"		files to a change.  See aenf(1) for more",
X"		information.",
X"",
X"	-New_File_Undo",
X"		The %s -New_File_Undo command is used to",
X"		remove new files from a change.	 See aenfu(1) for",
X"		more information.",
X"",
X"	-New_Integrator",
X"		The %s -New_Integrator command is used to add",
X"		new integrators to a project.  See aeni(1) for",
X"		more information.",
X"",
X"	-New_Project",
X"		The %s -New_Project command is used to create",
X"		a new project to be watched over by %s.  See",
X"		aenp(1) for more information.",
X"",
X"	-New_ReLeaSe",
X"		The %s -New_ReLeaSe command is used to create",
X"		a new project from an existing project.	 See",
X"		aenrls(1) for more information.",
X"",
X"	-New_ReViewer",
X"		The %s -New_ReViewer command is used to add",
X"		new reviewers to a project.  See aenrv(1) for",
X"		more information.",
X"",
X"	-New_Test",
X"		The %s -New_Test command is used to add a new",
X"		test to a change See aent(1) for more",
X"		information.",
X"",
X"	-New_Test_Undo",
X"		The %s -New_Test_Undo command is used to",
X"		remove new tests from a change.	 See aentu(1) for",
X"		more information.",
X"",
X"	-Project_Attributes",
X"		The %s -Project_Attributes command is used to",
X"		modify the attributes of a project.",
X"",
X"	-Remove_Administrator",
X"		The %s -Remove_Administrator command is used",
X"		to remove administrators from a project.  See",
X"		aera(1) for more information.",
X"",
X"	-Remove_Developer",
X"		The %s -Remove_Developer command is used to",
X"		remove developers from a project.  See aerd(1)",
X"		for more information.",
X"",
X"	-ReMove_file",
X"		The %s -ReMove_file command is used to add",
X"		files to be deleted to a change.  See aerm(1) for",
X"		more information.",
X"",
X"	-ReMove_file_Undo",
X"		The %s -Remove_File_Undo command is used to",
X"		remove files to be deleted from a change.  See",
X"		aermu(1) for more information.",
X"",
X"	-Remove_Integrator",
X"		The %s -Remove_Integrator command is used to",
X"		remove integrators from a project.  See aeri(1)",
X"		for more information.",
X"",
X"	-ReMove_PRoject",
X"		The %s -ReMove_PRoject command is used to",
X"		remove a project.  See aermpr(1) for more information.",
X"",
X"	-Remove_ReViewer",
X"		The %s -Remove_ReViewer command is used to",
X"		remove reviewers from a project.  See aerrv(1)",
X"		for more information.",
X"",
X"	-Review_Fail",
X"		The %s -Review_Fail command is used to fail a",
X"		change review.	See aerf(1) for more information.",
X"",
X"	-Review_Pass",
X"		The %s -Review_Pass command is used to pass a",
X"		change review.	See aerp(1) for more information.",
X"",
X"	-Review_Pass_Undo",
X"		The %s -Review_Pass_Undo command is used to rescind",
X"		a change review pass.  See aerpu(1) for more information.",
X"",
X"	-Test",
X"		The %s -Test command is used to run tests.",
X"		See aet(1) for more information.",
X"",
X"	-User_Attributes",
X"		The %s -User_Attributes command is used to",
X"		modify the attributes of a user.  See aeua(1) for",
X"		more information.",
X"",
X"	-VERSion",
X"		The %s -VERsion command is used to get",
X"		copyright and version details.	See aev(1) for",
X"		more information.",
X"",
X"	All options may be abbreviated; the abbreviation is",
X"	documented as the upper case letters, all lower case",
X"	letters and underscores (_) are optional.  You must use",
X"	consecutive sequences of optional letters.",
X"",
X"	All options are case insensitive, you may type them in",
X"	upper case or lower case or a combination of both, case",
X"	is not important.",
X"",
X"	For example: the arguments \"-project, \"-PROJ\" and \"-p\"",
X"	are all interpreted to mean the -Project option.  The",
X"	argument \"-prj\" will not be understood, because",
X"	consecutive optional characters were not supplied.",
X"",
X"	Options and other command line arguments may be mixed",
X"	arbitrarily on the command line, after the function",
X"	selectors.",
X"",
X"	The GNU long option names are understood.  Since all",
X"	option names for aegis are long, this means ignoring the",
X"	extra leading '-'.  The \"--option=value\" convention is",
X"	also understood.",
X"",
X"OPTIONS",
X"	The following options are available to all functions.  These",
X"	options may appear anywhere on the command line following",
X"	the function selector.",
X"",
X"	-LIBrary <abspath>",
X"		This option may be used to specify a directory to be",
X"		searched for global state files and user state",
X"		files.  (See aegstate(5) and aeustate(5) for more",
X"		information.) Several library options may be present",
X"		on the command line, and are search in the order",
X"		given.  Appended to this explicit search path are",
X"		the directories specified by the AEGIS enviroment",
X"		variable (colon separated), and finally,",
X"		/usr/local/lib/aegis is always searched.  All paths",
X"		specified, either on the command line or in the",
X"		AEGIS environment variable, must be absolute.",
X"",
X"	-Page_Length <number>",
X"		This option may be used to set the page length of",
X"		listings.  The default, in order of preference, is",
X"		obtained from the system, from the LINES environment",
X"		variable, or set to 24 lines.",
X"",
X"	-Page_Width <number>",
X"		This option may be used to set the page width of",
X"		listings and error messages.  The default, in order",
X"		of preference, is obtained from the system, from the",
X"		COLS environment variable, or set to 79 characters.",
X"",
X"	-TERse",
X"		This option may be used to cause listings to",
X"		produce the bare minimum of information.  It is",
X"		usually useful for shell scripts.",
X"",
X"	-UNFormatted",
X"		This option may be used with most listings to",
X"		specify that the column formatting is not to be",
X"		performed.  This is useful for shell scripts.",
X"",
X"	-Verbose",
X"		This option may be used to cause aegis to produce",
X"		more output.  By default aegis only produces",
X"		output on errors.  When used with the -List",
X"		option this option causes column headings to be",
X"		added.",
X"",
X"	All options may be abbreviated; the abbreviation is",
X"	documented as the upper case letters, all lower case",
X"	letters and underscores (_) are optional.  You must use",
X"	consecutive sequences of optional letters.",
X"",
X"	All options are case insensitive, you may type them in",
X"	upper case or lower case or a combination of both, case",
X"	is not important.",
X"",
X"	For example: the arguments \"-project, \"-PROJ\" and \"-p\"",
X"	are all interpreted to mean the -Project option.  The",
X"	argument \"-prj\" will not be understood, because",
X"	consecutive optional characters were not supplied.",
X"",
X"	Options and other command line arguments may be mixed",
X"	arbitrarily on the command line, after the function",
X"	selectors.",
X"",
X"	The GNU long option names are understood.  Since all",
X"	option names for aegis are long, this means ignoring the",
X"	extra leading '-'.  The \"--option=value\" convention is",
X"	also understood.",
X"",
X"EXIT STATUS",
X"	The %s command will exit with a status of 1 on any",
X"	error.	The %s command will only exit with a status of",
X"	0 if there are no errors.",
X"",
X"COPYRIGHT",
X"	%C",
X"",
X"AUTHOR",
X"	%A",
X	};
X
X	trace(("main_help()\n{\n"/*}*/));
X	help(text, SIZEOF(text), usage);
X	trace((/*{*/"}\n"));
X}
X
X
Xint main _((int, char **));
X
Xint
Xmain(argc, argv)
X	int		argc;
X	char		**argv;
X{
X	os_become_init();
X	str_initialize();
X	arglex_init(argc, argv, argtab);
X	quit_register(log_quitter);
X	quit_register(undo_quitter);
X	arglex();
X	for (;;)
X	{
X		switch (arglex_token)
X		{
X		default:
X			generic_argument(usage);
X			continue;
X
X		case arglex_token_build:
X			build();
X			break;
X
X		case arglex_token_change_attributes:
X			change_attributes();
X			break;
X
X		case arglex_token_change_directory:
X			change_directory();
X			break;
X
X		case arglex_token_copy_file:
X			copy_file();
X			break;
X
X		case arglex_token_copy_file_undo:
X			copy_file_undo();
X			break;
X
X		case arglex_token_develop_begin:
X			develop_begin();
X			break;
X
X		case arglex_token_develop_begin_undo:
X			develop_begin_undo();
X			break;
X
X		case arglex_token_develop_end:
X			develop_end();
X			break;
X
X		case arglex_token_develop_end_undo:
X			develop_end_undo();
X			break;
X
X		case arglex_token_difference:
X			difference();
X			break;
X
X		case arglex_token_help:
X			main_help();
X			break;
X
X		case arglex_token_integrate_begin:
X			integrate_begin();
X			break;
X
X		case arglex_token_integrate_begin_undo:
X			integrate_begin_undo();
X			break;
X
X		case arglex_token_integrate_fail:
X			integrate_fail();
X			break;
X
X		case arglex_token_integrate_pass:
X			integrate_pass();
X			break;
X
X		case arglex_token_list:
X			list();
X			break;
X
X		case arglex_token_move_file:
X			move_file();
X			break;
X
X		case arglex_token_new_administrator:
X			new_administrator();
X			break;
X
X		case arglex_token_new_change:
X			new_change();
X			break;
X
X		case arglex_token_new_change_undo:
X			new_change_undo();
X			break;
X
X		case arglex_token_new_developer:
X			new_developer();
X			break;
X
X		case arglex_token_new_file:
X			new_file();
X			break;
X
X		case arglex_token_new_file_undo:
X			new_file_undo();
X			break;
X
X		case arglex_token_new_integrator:
X			new_integrator();
X			break;
X
X		case arglex_token_new_project:
X			new_project();
X			break;
X
X		case arglex_token_new_release:
X			new_release();
X			break;
X
X		case arglex_token_new_reviewer:
X			new_reviewer();
X			break;
X
X		case arglex_token_new_test:
X			new_test();
X			break;
X
X		case arglex_token_new_test_undo:
X			new_test_undo();
X			break;
X
X		case arglex_token_project_attributes:
X			project_attributes();
X			break;
X
X		case arglex_token_remove_administrator:
X			remove_administrator();
X			break;
X
X		case arglex_token_remove_developer:
X			remove_developer();
X			break;
X
X		case arglex_token_remove_file:
X			remove_file();
X			break;
X
X		case arglex_token_remove_file_undo:
X			remove_file_undo();
X			break;
X
X		case arglex_token_remove_project:
X			remove_project();
X			break;
X
X		case arglex_token_remove_integrator:
X			remove_integrator();
X			break;
X
X		case arglex_token_remove_reviewer:
X			remove_reviewer();
X			break;
X
X		case arglex_token_review_fail:
X			review_fail();
X			break;
X
X		case arglex_token_review_pass:
X			review_pass();
X			break;
X
X		case arglex_token_review_pass_undo:
X			review_pass_undo();
X			break;
X
X		case arglex_token_test:
X			test();
X			break;
X
X		case arglex_token_version:
X			version();
X			break;
X		}
X		break;
X	}
X	quit(0);
X	return 0;
X}
END_OF_FILE
if test 20552 -ne `wc -c <'aegis/main.c'`; then
    echo shar: \"'aegis/main.c'\" unpacked with wrong size!
fi
# end of 'aegis/main.c'
fi
if test -f 'aegis/version.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'aegis/version.c'\"
else
echo shar: Extracting \"'aegis/version.c'\" \(18591 characters\)
sed "s/^X//" >'aegis/version.c' <<'END_OF_FILE'
X/*
X *	aegis - project change supervisor
X *	Copyright (C) 1991, 1992, 1993 Peter Miller.
X *	All rights reserved.
X *
X *	This program is free software; you can redistribute it and/or modify
X *	it under the terms of the GNU General Public License as published by
X *	the Free Software Foundation; either version 2 of the License, or
X *	(at your option) any later version.
X *
X *	This program is distributed in the hope that it will be useful,
X *	but WITHOUT ANY WARRANTY; without even the implied warranty of
X *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X *	GNU General Public License for more details.
X *
X *	You should have received a copy of the GNU General Public License
X *	along with this program; if not, write to the Free Software
X *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X * MANIFEST: give version information
X */
X
X#include <stdio.h>
X#include <stdlib.h>
X
X#include <arglex2.h>
X#include <error.h>
X#include <help.h>
X#include <option.h>
X#include <str.h>
X#include <trace.h>
X#include <version.h>
X
X
Xstatic void version_copyright _((void));
X
Xstatic void
Xversion_copyright()
X{
X	static char *text[] =
X	{
X		"%C",
X	};
X	help(text, SIZEOF(text), (void (*)_((void)))0);
X}
X
X
Xstatic void version_redistribution _((void));
X
Xstatic void
Xversion_redistribution()
X{
X	static char *text[] =
X	{
X"		    GNU GENERAL PUBLIC LICENSE",
X"   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION",
X"",
X"  0. This License applies to any program or other work which contains",
X"a notice placed by the copyright holder saying it may be distributed",
X"under the terms of this General Public License.  The \"Program\", below,",
X"refers to any such program or work, and a \"work based on the Program\"",
X"means either the Program or any derivative work under copyright law:",
X"that is to say, a work containing the Program or a portion of it,",
X"either verbatim or with modifications and/or translated into another",
X"language.  (Hereinafter, translation is included without limitation in",
X"the term \"modification\".)  Each licensee is addressed as \"you\".",
X"",
X"Activities other than copying, distribution and modification are not",
X"covered by this License; they are outside its scope.  The act of",
X"running the Program is not restricted, and the output from the Program",
X"is covered only if its contents constitute a work based on the",
X"Program (independent of having been made by running the Program).",
X"Whether that is true depends on what the Program does.",
X"",
X"  1. You may copy and distribute verbatim copies of the Program's",
X"source code as you receive it, in any medium, provided that you",
X"conspicuously and appropriately publish on each copy an appropriate",
X"copyright notice and disclaimer of warranty; keep intact all the",
X"notices that refer to this License and to the absence of any warranty;",
X"and give any other recipients of the Program a copy of this License",
X"along with the Program.",
X"",
X"You may charge a fee for the physical act of transferring a copy, and",
X"you may at your option offer warranty protection in exchange for a fee.",
X"",
X"  2. You may modify your copy or copies of the Program or any portion",
X"of it, thus forming a work based on the Program, and copy and",
X"distribute such modifications or work under the terms of Section 1",
X"above, provided that you also meet all of these conditions:",
X"",
X"    a) You must cause the modified files to carry prominent notices",
X"    stating that you changed the files and the date of any change.",
X"",
X"    b) You must cause any work that you distribute or publish, that in",
X"    whole or in part contains or is derived from the Program or any",
X"    part thereof, to be licensed as a whole at no charge to all third",
X"    parties under the terms of this License.",
X"",
X"    c) If the modified program normally reads commands interactively",
X"    when run, you must cause it, when started running for such",
X"    interactive use in the most ordinary way, to print or display an",
X"    announcement including an appropriate copyright notice and a",
X"    notice that there is no warranty (or else, saying that you provide",
X"    a warranty) and that users may redistribute the program under",
X"    these conditions, and telling the user how to view a copy of this",
X"    License.  (Exception: if the Program itself is interactive but",
X"    does not normally print such an announcement, your work based on",
X"    the Program is not required to print an announcement.)",
X"",
X"These requirements apply to the modified work as a whole.  If",
X"identifiable sections of that work are not derived from the Program,",
X"and can be reasonably considered independent and separate works in",
X"themselves, then this License, and its terms, do not apply to those",
X"sections when you distribute them as separate works.  But when you",
X"distribute the same sections as part of a whole which is a work based",
X"on the Program, the distribution of the whole must be on the terms of",
X"this License, whose permissions for other licensees extend to the",
X"entire whole, and thus to each and every part regardless of who wrote it.",
X"",
X"Thus, it is not the intent of this section to claim rights or contest",
X"your rights to work written entirely by you; rather, the intent is to",
X"exercise the right to control the distribution of derivative or",
X"collective works based on the Program.",
X"",
X"In addition, mere aggregation of another work not based on the Program",
X"with the Program (or with a work based on the Program) on a volume of",
X"a storage or distribution medium does not bring the other work under",
X"the scope of this License.",
X"",
X"  3. You may copy and distribute the Program (or a work based on it,",
X"under Section 2) in object code or executable form under the terms of",
X"Sections 1 and 2 above provided that you also do one of the following:",
X"",
X"    a) Accompany it with the complete corresponding machine-readable",
X"    source code, which must be distributed under the terms of Sections",
X"    1 and 2 above on a medium customarily used for software interchange; or,",
X"",
X"    b) Accompany it with a written offer, valid for at least three",
X"    years, to give any third party, for a charge no more than your",
X"    cost of physically performing source distribution, a complete",
X"    machine-readable copy of the corresponding source code, to be",
X"    distributed under the terms of Sections 1 and 2 above on a medium",
X"    customarily used for software interchange; or,",
X"",
X"    c) Accompany it with the information you received as to the offer",
X"    to distribute corresponding source code.  (This alternative is",
X"    allowed only for noncommercial distribution and only if you",
X"    received the program in object code or executable form with such",
X"    an offer, in accord with Subsection b above.)",
X"",
X"The source code for a work means the preferred form of the work for",
X"making modifications to it.  For an executable work, complete source",
X"code means all the source code for all modules it contains, plus any",
X"associated interface definition files, plus the scripts used to",
X"control compilation and installation of the executable.  However, as a",
X"special exception, the source code distributed need not include",
X"anything that is normally distributed (in either source or binary",
X"form) with the major components (compiler, kernel, and so on) of the",
X"operating system on which the executable runs, unless that component",
X"itself accompanies the executable.",
X"",
X"If distribution of executable or object code is made by offering",
X"access to copy from a designated place, then offering equivalent",
X"access to copy the source code from the same place counts as",
X"distribution of the source code, even though third parties are not",
X"compelled to copy the source along with the object code.",
X"",
X"  4. You may not copy, modify, sublicense, or distribute the Program",
X"except as expressly provided under this License.  Any attempt",
X"otherwise to copy, modify, sublicense or distribute the Program is",
X"void, and will automatically terminate your rights under this License.",
X"However, parties who have received copies, or rights, from you under",
X"this License will not have their licenses terminated so long as such",
X"parties remain in full compliance.",
X"",
X"  5. You are not required to accept this License, since you have not",
X"signed it.  However, nothing else grants you permission to modify or",
X"distribute the Program or its derivative works.  These actions are",
X"prohibited by law if you do not accept this License.  Therefore, by",
X"modifying or distributing the Program (or any work based on the",
X"Program), you indicate your acceptance of this License to do so, and",
X"all its terms and conditions for copying, distributing or modifying",
X"the Program or works based on it.",
X"",
X"  6. Each time you redistribute the Program (or any work based on the",
X"Program), the recipient automatically receives a license from the",
X"original licensor to copy, distribute or modify the Program subject to",
X"these terms and conditions.  You may not impose any further",
X"restrictions on the recipients' exercise of the rights granted herein.",
X"You are not responsible for enforcing compliance by third parties to",
X"this License.",
X"",
X"  7. If, as a consequence of a court judgment or allegation of patent",
X"infringement or for any other reason (not limited to patent issues),",
X"conditions are imposed on you (whether by court order, agreement or",
X"otherwise) that contradict the conditions of this License, they do not",
X"excuse you from the conditions of this License.  If you cannot",
X"distribute so as to satisfy simultaneously your obligations under this",
X"License and any other pertinent obligations, then as a consequence you",
X"may not distribute the Program at all.  For example, if a patent",
X"license would not permit royalty-free redistribution of the Program by",
X"all those who receive copies directly or indirectly through you, then",
X"the only way you could satisfy both it and this License would be to",
X"refrain entirely from distribution of the Program.",
X"",
X"If any portion of this section is held invalid or unenforceable under",
X"any particular circumstance, the balance of the section is intended to",
X"apply and the section as a whole is intended to apply in other",
X"circumstances.",
X"",
X"It is not the purpose of this section to induce you to infringe any",
X"patents or other property right claims or to contest validity of any",
X"such claims; this section has the sole purpose of protecting the",
X"integrity of the free software distribution system, which is",
X"implemented by public license practices.  Many people have made",
X"generous contributions to the wide range of software distributed",
X"through that system in reliance on consistent application of that",
X"system; it is up to the author/donor to decide if he or she is willing",
X"to distribute software through any other system and a licensee cannot",
X"impose that choice.",
X"",
X"This section is intended to make thoroughly clear what is believed to",
X"be a consequence of the rest of this License.",
X"",
X"  8. If the distribution and/or use of the Program is restricted in",
X"certain countries either by patents or by copyrighted interfaces, the",
X"original copyright holder who places the Program under this License",
X"may add an explicit geographical distribution limitation excluding",
X"those countries, so that distribution is permitted only in or among",
X"countries not thus excluded.  In such case, this License incorporates",
X"the limitation as if written in the body of this License.",
X"",
X"  9. The Free Software Foundation may publish revised and/or new versions",
X"of the General Public License from time to time.  Such new versions will",
X"be similar in spirit to the present version, but may differ in detail to",
X"address new problems or concerns.",
X"",
X"Each version is given a distinguishing version number.  If the Program",
X"specifies a version number of this License which applies to it and \"any",
X"later version\", you have the option of following the terms and conditions",
X"either of that version or of any later version published by the Free",
X"Software Foundation.  If the Program does not specify a version number of",
X"this License, you may choose any version ever published by the Free Software",
X"Foundation.",
X"",
X"  10. If you wish to incorporate parts of the Program into other free",
X"programs whose distribution conditions are different, write to the author",
X"to ask for permission.  For software which is copyrighted by the Free",
X"Software Foundation, write to the Free Software Foundation; we sometimes",
X"make exceptions for this.  Our decision will be guided by the two goals",
X"of preserving the free status of all derivatives of our free software and",
X"of promoting the sharing and reuse of software generally.",
X	};
X	help(text, SIZEOF(text), (void (*)_((void)))0);
X}
X
X
Xstatic void version_warranty _((void));
X
Xstatic void
Xversion_warranty()
X{
X	static char *text[] =
X	{
X"			    NO WARRANTY",
X"",
X"  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY",
X"FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN",
X"OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES",
X"PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED",
X"OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF",
X"MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS",
X"TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE",
X"PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,",
X"REPAIR OR CORRECTION.",
X"",
X"  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING",
X"WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR",
X"REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,",
X"INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING",
X"OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED",
X"TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY",
X"YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER",
X"PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE",
X"POSSIBILITY OF SUCH DAMAGES.",
X	};
X
X	help(text, SIZEOF(text), (void (*)_((void)))0);
X}
X
X
Xstatic void version_usage _((void));
X
Xstatic void
Xversion_usage()
X{
X	char	*progname;
X
X	progname = option_progname_get();
X	fprintf(stderr, "usage: %s -VERSion [ <info-name> ]\n", progname);
X	fprintf(stderr, "       %s -VERSion -Help\n", progname);
X	quit(1);
X}
X
X
Xtypedef struct table_ty table_ty;
Xstruct table_ty
X{
X	char	*name;
X	void	(*func)_((void));
X};
X
X
Xstatic	table_ty	table[] =
X{
X	{ "Copyright",		version_copyright,	},
X	{ "Redistribution",	version_redistribution,	},
X	{ "Warranty",		version_warranty,	},
X};
X
X
Xstatic void version_main _((void));
X
Xstatic void
Xversion_main()
X{
X	void	(*func)_((void));
X	char	*name;
X
X	trace(("version_main()\n{\n"/*}*/));
X	name = 0;
X	while (arglex_token != arglex_token_eoln)
X	{
X		switch (arglex_token)
X		{
X		default:
X			generic_argument(version_usage);
X			continue;
X
X		case arglex_token_string:
X			if (name)
X			      fatal("too many version information names given");
X			name = arglex_value.alv_string;
X			break;
X		}
X		arglex();
X	}
X
X	if (name)
X	{
X		int		nhit;
X		table_ty	*tp;
X		string_ty	*s1;
X		string_ty	*s2;
X		table_ty	*hit[SIZEOF(table)];
X		int		j;
X
X		nhit = 0;
X		for (tp = table; tp < ENDOF(table); ++tp)
X		{
X			if (arglex_compare(tp->name, name))
X				hit[nhit++] = tp;
X		}
X		switch (nhit)
X		{
X		case 0:
X			fatal("version information name \"%s\" unknown", name);
X
X		case 1:
X			break;
X
X		default:
X			s1 = str_from_c(hit[0]->name);
X			for (j = 1; j < nhit; ++j)
X			{
X				s2 = str_format("%S, %s", s1, hit[j]->name);
X				str_free(s1);
X				s1 = s2;
X			}
X			fatal
X			(
X			       "version information name \"%s\" ambiguous (%s)",
X				name,
X				s1->str_text
X			);
X		}
X		arglex();
X		func = hit[0]->func;
X	}
X	else
X		func = version_copyright;
X
X	func();
X	trace((/*{*/"}\n"));
X}
X
X
Xstatic void version_help _((void));
X
Xstatic void
Xversion_help()
X{
X	static char *text[] =
X	{
X"NAME",
X"	%s -VERSion - give version information",
X"",
X"SYNOPSIS",
X"	%s -VERSion [ info-name ]",
X"	%s -VERSion -Help",
X"",
X"DESCRIPTION",
X"	The %s -VERSion command is used to give version",
X"	information and conditions of use.",
X"",
X"	There are a number of possible info-names, as follow",
X"	(abbreviations as for command line options):",
X"",
X"	Copyright",
X"		The copyright notice for the %s program.  Version",
X"		information will also be printed.",
X"		This is the default.",
X"",
X"	Redistribution",
X"		Print the conditions of use and redistribution.",
X"",
X"	Warranty",
X"		Print the limited warranty.",
X"",
X"OPTIONS",
X"	The following options are understood:",
X"",
X"	-Help	This option may be used to obtain more",
X"		information about how to use the %s program.",
X"",
X"	All options may be abbreviated; the abbreviation is",
X"	documented as the upper case letters, all lower case",
X"	letters and underscores (_) are optional.  You must use",
X"	consecutive sequences of optional letters.",
X"",
X"	All options are case insensitive, you may type them in",
X"	upper case or lower case or a combination of both, case",
X"	is not important.",
X"",
X"	For example: the arguments \"-project, \"-PROJ\" and \"-p\"",
X"	are all interpreted to mean the -Project option.  The",
X"	argument \"-prj\" will not be understood, because",
X"	consecutive optional characters were not supplied.",
X"",
X"	Options and other command line arguments may be mixed",
X"	arbitrarily on the command line, after the function",
X"	selectors.",
X"",
X"	The GNU long option names are understood.  Since all",
X"	option names for aegis are long, this means ignoring the",
X"	extra leading '-'.  The \"--option=value\" convention is",
X"	also understood.",
X"",
X"RECOMMENDED ALIAS",
X"	The recommended alias for this command is",
X"	csh%%	alias aev '%s -vers \\!*'",
X"	sh$	aev(){%s -vers $*}",
X"",
X"ERRORS",
X"	It is an error if the info-name given is unknown.",
X"",
X"EXIT STATUS",
X"	The %s command will exit with a status of 1 on any",
X"	error.	The %s command will only exit with a status of",
X"	0 if there are no errors.",
X"",
X"COPYRIGHT",
X"	%C",
X"",
X"AUTHOR",
X"	%A",
X	};
X
X	help(text, SIZEOF(text), version_usage);
X}
X
X
Xvoid
Xversion()
X{
X	trace(("version()\n{\n"/*}*/));
X	switch (arglex())
X	{
X	default:
X		version_main();
X		break;
X
X	case arglex_token_help:
X		version_help();
X		break;
X	}
X	trace((/*{*/"}\n"));
X}
END_OF_FILE
if test 18591 -ne `wc -c <'aegis/version.c'`; then
    echo shar: \"'aegis/version.c'\" unpacked with wrong size!
fi
# end of 'aegis/version.c'
fi
echo shar: End of archive 11 \(of 19\).
cp /dev/null ark11isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 19 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
