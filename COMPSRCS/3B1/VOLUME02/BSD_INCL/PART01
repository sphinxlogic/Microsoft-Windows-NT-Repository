Path: comp-sources-3b1
From: dave@galaxia.network23.com (David H. Brierley)
Subject:  v02i016:  More include files for BSD compatibility stuff, Part01/01
Newsgroups: comp.sources.3b1
Approved: dave@galaxia.network23.com
X-Checksum-Snefru: 4a38bf28 95dcda3e 43c4c316 8293522d

Submitted-by: dave@galaxia.network23.com (David H. Brierley)
Posting-number: Volume 2, Issue 16
Archive-name: bsd-incl/part01

Here are some more include files that you might need in conjunction with
the BSD compatibility stuff that I posted.  Included in this set is
"sys/statfs.h" and a copy of the "uipc" include files.  The uipc include
files can be used to compile the network related routines and the
statfs.h file is needed to compile "statfs.c".

Happy hacking!
- Dave

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of shell archive."
# Contents:  sys/statfs.h sys/socket.h sys/un.h uipc/conf.h
#   uipc/domain.h uipc/fproto.h uipc/mbuf.h uipc/number-ptys.h
#   uipc/protosw.h uipc/pty.h uipc/socket.h uipc/socketvar.h uipc/un.h
#   uipc/unpcb.h
# Wrapped by dave@galaxia on Tue Jun 30 23:06:09 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'sys/statfs.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/statfs.h'\"
else
echo shar: Extracting \"'sys/statfs.h'\" \(151 characters\)
sed "s/^X//" >'sys/statfs.h' <<'END_OF_FILE'
X/*
X * statfs emulation by Dave Brierley (dave@galaxia.network23.com)
X */
X
Xstruct statfs {
X    int             f_files;
X    int             f_bsize;
X};
END_OF_FILE
if test 151 -ne `wc -c <'sys/statfs.h'`; then
    echo shar: \"'sys/statfs.h'\" unpacked with wrong size!
fi
# end of 'sys/statfs.h'
fi
if test -f 'sys/socket.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/socket.h'\"
else
echo shar: Extracting \"'sys/socket.h'\" \(25 characters\)
sed "s/^X//" >'sys/socket.h' <<'END_OF_FILE'
X#include <uipc/socket.h>
END_OF_FILE
if test 25 -ne `wc -c <'sys/socket.h'`; then
    echo shar: \"'sys/socket.h'\" unpacked with wrong size!
fi
# end of 'sys/socket.h'
fi
if test -f 'sys/un.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'sys/un.h'\"
else
echo shar: Extracting \"'sys/un.h'\" \(21 characters\)
sed "s/^X//" >'sys/un.h' <<'END_OF_FILE'
X#include <uipc/un.h>
END_OF_FILE
if test 21 -ne `wc -c <'sys/un.h'`; then
    echo shar: \"'sys/un.h'\" unpacked with wrong size!
fi
# end of 'sys/un.h'
fi
if test -f 'uipc/conf.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'uipc/conf.h'\"
else
echo shar: Extracting \"'uipc/conf.h'\" \(1587 characters\)
sed "s/^X//" >'uipc/conf.h' <<'END_OF_FILE'
X/*
X *	@(#)conf.h	1.1	(Alex Crain)	6/20/89
X *
X *  conf.h - 3b1 specifics for the uipc driver.
X *
X *  (C) Copyright 1989 Alex Crain
X *
X */
X
X#ifndef _conf_h_
X#define _conf_h_
X
X/*
X *  Useful spls. 
X */
X
X#define splimp	spl7
X#define splnet	spl5
X
X/*
X *  Useful macros
X */
X
X#define MIN(x, y) ((x) < (y) ? (x) : (y))
X#define MAX(x, y) ((x) > (y) ? (x) : (y))
X
X/*
X *  stdata is a pointer to a streams structure, and is referenced in 
X *  sys/inode.h. We rename it here and use it for a socket pointer.
X */
X
X#define stdata socket
X#define i_sptr i_socket
X
X#ifdef	NEED_U_LONG
X/*
X *  I never understood why at&t doesn't offer a complete set of these.
X *  ushort and uint are found in types.h, but uchar() is a kernel function,
X *  so we invent a complete set from scratch.
X */
X
Xtypedef unsigned long	u_long;
Xtypedef unsigned int	u_int;
Xtypedef unsigned short	u_short;
Xtypedef unsigned char	u_char;
X#endif
X
X/*
X *  The number of available mbufs
X */
X
X#define NMBUF 512
X
X/*
X *  New signals. The signal numbers are not the same as BSD.
X */
X
X#define SIGURG		22
X#define SIGIO		23
X
X/*
X *  New flags for (struct file *)->i_flag
X */
X
X#define FMARK		00040
X#define FDEFER		00100
X
X/*
X *  Flags for iomove (addr, len, flag)
X */
X
X#define IO_WRITE	0		/* u.u_base -> addr	*/
X#define IO_READ		1		/* addr -> u.u_base	*/
X
X/*
X *  Flags for useracc (addr, len, flag)
X */
X
X#define UACC_READ	0
X#define UACC_WRITE	1
X
X/*
X *  define the relationship between file structures and sockets
X */
X
X#define filesock(FP)	mtod (ptom ((FP)->f_offset), struct socket *)
X#define sockoffset(SO)	mtop (dtom (SO), off_t)
X
X#endif /* _conf_h_ */
END_OF_FILE
if test 1587 -ne `wc -c <'uipc/conf.h'`; then
    echo shar: \"'uipc/conf.h'\" unpacked with wrong size!
fi
# end of 'uipc/conf.h'
fi
if test -f 'uipc/domain.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'uipc/domain.h'\"
else
echo shar: Extracting \"'uipc/domain.h'\" \(1217 characters\)
sed "s/^X//" >'uipc/domain.h' <<'END_OF_FILE'
X/*
X *	@(#)domain.h	1.1	(Alex Crain)	6/20/89
X *
X *  domain.h - domain stucture definitions.
X *
X *  Written by Alex Crain.
X *
X *  This file is based in the Berkeley header file of the same
X *  name, but is *not* guarenteed to be in any way compatable. It is
X *  close enough to the berkeley code that the following applies...
X *
X *  Copyright (c) 1982, 1986, 1988 Regents of the University of California.
X *  All rights reserved.
X * 
X *  Redistribution and use in source and binary forms are permitted
X *  provided that this notice is preserved and that due credit is given
X *  to the University of California at Berkeley. The name of the University
X *  may not be used to endorse or promote products derived from this
X *  software without specific prior written permission. This software
X *  is provided "as is" without express or implied warranty.
X *
X */
X
X#ifndef _domain_h_
X#define _domain_h_
X
X#include <uipc/conf.h>
X
Xstruct domain {
X   int 		dom_family;
X   char 	* dom_name;
X   int		(* dom_init) ();
X   int		(* dom_externalize) ();
X   int		(* dom_dispose) ();
X   struct	protosw * dom_protosw, * dom_protoswNPROTOSW;
X   struct 	domain * dom_next;
X};
X
X#ifdef KERNEL
Xstruct domain * domains;
X#endif
X
X#endif _domain_h_
END_OF_FILE
if test 1217 -ne `wc -c <'uipc/domain.h'`; then
    echo shar: \"'uipc/domain.h'\" unpacked with wrong size!
fi
# end of 'uipc/domain.h'
fi
if test -f 'uipc/fproto.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'uipc/fproto.h'\"
else
echo shar: Extracting \"'uipc/fproto.h'\" \(8439 characters\)
sed "s/^X//" >'uipc/fproto.h' <<'END_OF_FILE'
X/*
X *	@(#)fproto.h	1.1	(Alex Crain)	6/20/89
X *
X *  fproto.h - function prototypes for uipc driver.
X *
X *  Written by Alex Crain.
X *
X *  This file contains ANSI function prototypes for the entire uipc 
X *  package and many of the existing system entry points. The prototypes 
X *  are blocked within a "#ifdef __STDC__" construct, the with an alternate
X *  "#else" block of old-style function declarations.
X */
X
X#ifndef _fproto_h_
X#define _fproto_h_
X
X#ifdef __STDC__
X/*
X *  Declarations from debug.c
X */
X
Xvoid dump_mbuf (struct mbuf *m, char *func);
X
X/*
X *  Declarations from domain.c
X */
X
Xvoid domaininit (void);
Xstruct protosw *pffindtype (int family, int type);
Xstruct protosw *pffindproto (int family, int protocol, int type);
X
X/*
X *  Declarations from interface.c
X */
X
Xvoid uipcinit (void);
Xvoid dosyscall(void);
Xint uipcrelease (void);
Xvoid uipc_write (void);
Xvoid uipc_read (void);
Xvoid uipc_close (off_t sp);
Xvoid bzero (char *s, int n);
Xint ufavail (void);
X
X/*
X *  Declarations from mbuf.c
X */
X
Xvoid mbinit(void);
Xstruct mbuf *m_get (int canwait, int type);
Xstruct mbuf *m_getclr (int canwait, int type);
Xstruct mbuf *m_free (struct mbuf *m);
Xstruct mbuf *m_more (int canwait, int type);
Xvoid m_freem (struct mbuf *m);
Xstruct mbuf *m_copy (struct mbuf *m, int off, int len);
X
X/*
X *  Declarations from socket.c
X */
X
Xint socreate (int domain, struct socket ** sop, int type, int proto);
Xint sobind (struct socket *so, struct mbuf *nam);
Xint solisten (struct socket *so, int backlog);
Xvoid sofree (struct socket *so);
Xint soclose (struct socket *so);
Xint soabort (struct socket *so);
Xint soaccept (struct socket *so, struct mbuf *nam);
Xint soconnect (struct socket *so, struct mbuf *nam);
Xint soconnect2 (struct socket *so1, struct socket *so2);
Xint sodisconnect (struct socket *so);
Xint sosend (struct socket *so, struct mbuf *nam, int flags, struct mbuf *rights);
Xint soreceive (struct socket *so, struct mbuf **nam, int flags, struct mbuf **rights);
Xvoid sorflush (struct socket *so);
Xint sosetopt (struct socket *so, int level, int optname, struct mbuf *m0);
Xint sogetopt (struct socket *so, int level, int optname, struct mbuf **mp);
Xvoid sohasoutofband (struct socket *so);
X
X/*
X *  Declarations from socket2.c
X */
X
X
Xvoid soisconnecting (struct socket *so);
Xvoid soisconnected (struct socket *so);
Xvoid soisdisconnecting (struct socket *so);
Xvoid soisdisconnected (struct socket *so);
Xstruct socket *sonewconn (struct socket *head);
Xvoid soinsque (struct socket *head, struct socket *so, int q);
Xint soqremque (struct socket *so, int q);
Xvoid socantsendmore (struct socket *so);
Xvoid socantrcvmore (struct socket *so);
Xvoid sbselqueue (struct sockbuf *sb);
Xvoid sbwait (struct sockbuf *sb);
Xvoid sbwakeup (struct sockbuf *sb);
Xvoid sowakeup (struct socket *so, struct sockbuf *sb);
Xint soreserve (struct socket *so, int sndcc, int rcvcc);
Xint sbreserve (struct sockbuf *sb, int cc);
Xvoid sbrelease (struct sockbuf *sb);
Xvoid sbappend (struct sockbuf *sb, struct mbuf *m);
Xvoid sbappendrecord (struct sockbuf *sb, struct mbuf *m0);
Xint sbappendaddr (struct sockbuf *sb, struct sockaddr *asa, struct mbuf *m0, struct mbuf *rights0);
Xint sbappendrights (struct sockbuf *sb, struct mbuf *m0, struct mbuf *rights);
Xvoid sbcompress (struct sockbuf *sb, struct mbuf *m, struct mbuf *n);
Xvoid sbflush (struct sockbuf *sb);
Xvoid sbdrop (struct sockbuf *sb, int len);
Xvoid sbdroprecord (struct sockbuf *sb);
X
X/*
X *  Declarations from syscalls.c
X */
X
Xint sosetup(void);	/* setup window stuff needed */
Xint select (void);
Xint socket (void);
Xint bind (void);
Xint listen (void);
Xint accept (void);
Xint connect (void);
Xint socketpair (void);
Xint sendto (void);
Xint send (void);
Xint sendmsg (void);
Xvoid sendit (int s, struct msghdr * mp, int flags);
Xint recvfrom (void);
Xint recv (void);
Xint recvmsg (void);
Xvoid recvit (int s, struct msghdr * mp, int flags, caddr_t np, caddr_t rp);
Xint setsockopt (void);
Xint getsockopt (void);
Xint sockpipe (void);
Xvoid getsockname (void);
Xint sockargs (struct mbuf **aname, caddr_t name, int namelen, int type);
Xstruct file *getsock (int fd);
X
X/*
X *  Declarations from usrreq.c
X */
X
Xint uipc_usrreq (struct socket *so, int req, struct mbuf *m, struct mbuf *nam, struct mbuf *rights);
Xint unp_attach (struct socket *so);
Xvoid unp_detach (struct unpcb *unp);
Xint unp_bind (struct unpcb *unp, struct mbuf *nam);
Xint unp_connect (struct socket *so, struct mbuf *nam);
Xint unp_connect2 (struct socket *so1, struct socket *so2);
Xvoid unp_disconnect (struct unpcb *unp);
Xvoid unp_usrclosed (struct unpcb *unp);
Xint unp_externalize (struct mbuf *rights);
Xint unp_internalize (struct mbuf *rights);
Xvoid unp_gc (void);
Xvoid unp_dispose (struct mbuf *m);
Xvoid unp_scan (struct mbuf *m0, int (*op)());
Xvoid unp_mark (struct file *fp);
Xvoid unp_discard (struct file *fp);
Xvoid unp_drop (struct unpcb *unp, int errno);
X
X/*
X * declarations for linesw.c
X */
Xint so_linesw_read(struct tty *tp);
Xint so_linesw_write(struct tty  *tp);
Xint so_linesw_setup(void);
X
X/* Misc stuff from -bes
X */
X
X
X/*
X *  declarations left out of systm.h
X */
X
Xint suser (void);
Xint fuword (int * addr);
Xint useracc (caddr_t address, int length, int flag);
X
Xshort spl7 (void);
Xshort spl6 (void);
Xshort spl5 (void);
Xshort spl4 (void);
Xshort spl3 (void);
Xshort spl2 (void);
Xshort spl1 (void);
Xshort splx (short sp);
X
Xint sleep (caddr_t addr, int p);
Xint wakeup (caddr_t addr);
Xvoid signal (int pgrp, int sig);
Xvoid psignal (struct proc * p, int sig);
Xint setjmp (label_t env);
Xvoid longjmp (label_t env, int val);
X
Xvoid panic (caddr_t msg);
Xvoid printf();
Xvoid eprintf();
X
Xint access (struct inode * ip, int mode);
Xextern struct inode * iget ();
Xvoid iput (struct inode * ip);
Xvoid prele (struct inode * ip);
Xint ufalloc (int fp);
Xvoid closef (struct file * fp);
Xvoid locsys ();
X
X#else ! __STDC__
X
X/*
X *  Declarations from debug.c
X */
X
Xvoid dump_mbuf ();
X
X/*
X *  Declarations from domain.c
X */
X
Xvoid domaininit ();
Xstruct protosw *pffindtype ();
Xstruct protosw *pffindproto ();
X
X/*
X *  Declarations from interface.c
X */
X
Xvoid uipcinit ();
Xvoid dosyscall();
Xint uipcrelease ();
Xvoid uipc_write ();
Xvoid uipc_read ();
Xvoid uipc_close ();
Xvoid bzero ();
Xint ufavail ();
X
X/*
X *  Declarations from mbuf.c
X */
X
Xvoid mbinit();
Xstruct mbuf *m_get ();
Xstruct mbuf *m_getclr ();
Xstruct mbuf *m_free ();
Xstruct mbuf *m_more ();
Xvoid m_freem ();
Xstruct mbuf *m_copy ();
X
X/*
X *  Declarations from socket.c
X */
X
Xint socreate ();
Xint sobind ();
Xint solisten ();
Xvoid sofree ();
Xint soclose ();
Xint soabort ();
Xint soaccept ();
Xint soconnect ();
Xint soconnect2 ();
Xint sodisconnect ();
Xint sosend ();
Xint soreceive ();
Xvoid sorflush ();
Xint sosetopt ();
Xint sogetopt ();
Xvoid sohasoutofband ();
X
X/*
X *  Declarations from socket2.c
X */
X
X
Xvoid soisconnecting ();
Xvoid soisconnected ();
Xvoid soisdisconnecting ();
Xvoid soisdisconnected ();
Xstruct socket *sonewconn ();
Xvoid soinsque ();
Xint soqremque ();
Xvoid socantsendmore ();
Xvoid socantrcvmore ();
Xvoid sbselqueue ();
Xvoid sbwait ();
Xvoid sbwakeup ();
Xvoid sowakeup ();
Xint soreserve ();
Xint sbreserve ();
Xvoid sbrelease ();
Xvoid sbappend ();
Xvoid sbappendrecord ();
Xint sbappendaddr ();
Xint sbappendrights ();
Xvoid sbcompress ();
Xvoid sbflush ();
Xvoid sbdrop ();
Xvoid sbdroprecord ();
X
X/*
X *  Declarations from syscalls.c
X */
X
Xint sosetup();	/* setup window stuff needed */
Xint select ();
Xint socket ();
Xint bind ();
Xint listen ();
Xint accept ();
Xint connect ();
Xint socketpair ();
Xint sockpipe ();
Xint sendto();
Xint send();
Xint recvfrom();
Xint recv ();
Xint setsockopt();
Xint getsockopt();
Xvoid sendit ();
Xint sockpipe ();
Xvoid getsockname ();
Xvoid recvit ();
Xint sockargs ();
Xstruct file *getsock ();
X
X/*
X *  Declarations from usrreq.c
X */
X
Xint uipc_usrreq ();
Xint unp_attach ();
Xvoid unp_detach ();
Xint unp_bind ();
Xint unp_connect ();
Xint unp_connect2 ();
Xvoid unp_disconnect ();
Xvoid unp_usrclosed ();
Xvoid unp_drop ();
Xint unp_externalize ();
Xint unp_internalize ();
Xvoid unp_gc ();
Xvoid unp_dispose ();
Xvoid unp_scan ();
Xvoid unp_mark ();
Xvoid unp_discard ();
X
X/*
X * declarations for linesw.c
X */
Xint so_linesw_read();
Xint so_linesw_write();
Xint so_linesw_setup();
X
X/*
X *  declarations left out of systm.h
X */
X
Xshort spl7 ();
Xshort spl6 ();
Xshort spl5 ();
Xshort spl4 ();
Xshort spl3 ();
Xshort spl2 ();
Xshort spl1 ();
Xshort splx ();
X
Xint sleep ();
Xint wakeup ();
X
Xvoid panic ();
Xvoid eprintf();
Xvoid signal ();
Xvoid psignal ();
X
Xint setjmp ();
Xvoid longjmp ();
X
Xint suser ();
X
X#endif __STDC__
X#endif _fproto_h_
END_OF_FILE
if test 8439 -ne `wc -c <'uipc/fproto.h'`; then
    echo shar: \"'uipc/fproto.h'\" unpacked with wrong size!
fi
# end of 'uipc/fproto.h'
fi
if test -f 'uipc/mbuf.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'uipc/mbuf.h'\"
else
echo shar: Extracting \"'uipc/mbuf.h'\" \(2484 characters\)
sed "s/^X//" >'uipc/mbuf.h' <<'END_OF_FILE'
X/*
X *	@(#)mbuf.h	1.1	(Alex Crain)	6/20/89
X *
X *  mbuf.h - mbuf description macros
X *
X *  Written by Alex Crain.
X *
X *  This file is loosly based in the Berkeley header file of the 
X *  same name, but is *not* guarenteed to be in any way compatable. It is
X *  close enough to the berkeley code that the following applies...
X *
X *  Copyright (c) 1982, 1986, 1988 Regents of the University of California.
X *  All rights reserved.
X * 
X *  Redistribution and use in source and binary forms are permitted
X *  provided that this notice is preserved and that due credit is given
X *  to the University of California at Berkeley. The name of the University
X *  may not be used to endorse or promote products derived from this
X *  software without specific prior written permission. This software
X *  is provided "as is" without express or implied warranty.
X *
X */
X
X#ifndef _mbuf_h_
X#define _mbuf_h_
X
X#include <uipc/conf.h>
X
X#define MSIZE		128
X
X#define MMINOFF		12
X#define MTAIL		4
X#define MMAXOFF		(MSIZE - MTAIL)
X#define MLEN		(MSIZE - MMINOFF - MTAIL)
X
X#define dtom(x)		((struct mbuf *)((int)(x) & ~(MSIZE - 1)))
X#define mtod(m, t)	((t)((int)(m) + (m)->m_off))
X
X#define ptom(x)		((struct mbuf *)(((int)(x) << 7) | mbmask))
X#define mtop(x, t)	((t)(((int)(x) >> 7) & 0xFFFF))
X
Xstruct mbuf {
X   struct	mbuf * m_next;
X   u_long	m_off;
X   short	m_len;
X   short	m_type;
X   u_char	m_dat[MLEN];
X   struct	mbuf * m_act;
X};
X
X#define MT_FREE		0
X#define MT_DATA		1
X#define MT_HEADER	2
X#define MT_SOCKET	3
X#define MT_PCB		4
X#define MT_SONAME	8
X#define MT_SOOPTS	10
X#define MT_RIGHTS	12
X
X/* flags to mget */
X#define M_DONTWAIT	0
X#define M_WAIT		1
X
X/* length to m_copy to copy all */
X#define M_COPYALL	10000000
X
X#define MGET(m, i, t)	\
X{  int _s = splimp ();		\
X   if ((m) = mfree)	\
X    {  if ((m)->m_type != MT_FREE) panic("mget"); (m)->m_type = t; \
X       mfree = (m)->m_next; (m)->m_next = (struct mbuf *) 0; \
X       (m)->m_off = MMINOFF; } \
X   else \
X       (m) = m_more (i, t); \
X   splx (_s); }
X
X#define MFREE(m, n) \
X{  int _s = splimp (); \
X   if ((m)->m_type == MT_FREE) panic ("mfree"); \
X   (m)->m_type = MT_FREE; \
X   (n) = (m)->m_next; (m)->m_next = mfree; mfree = (m); \
X   (m)->m_off = 0; (m)->m_act = 0;\
X   splx (_s); \
X   if (m_want) \
X    { m_want = 0; \
X      wakeup((caddr_t)&mfree); }}
X
X#ifdef KERNEL
Xstruct mbuf * mfree, * mbmem;
Xunsigned int mbmask;
Xint m_want;
Xstruct mbuf * m_get (), * m_getclr(), *m_free (), * m_more (), * m_copy ();
Xvoid m_freem ();
X#endif
X
X#endif _mbuf_h_
END_OF_FILE
if test 2484 -ne `wc -c <'uipc/mbuf.h'`; then
    echo shar: \"'uipc/mbuf.h'\" unpacked with wrong size!
fi
# end of 'uipc/mbuf.h'
fi
if test -f 'uipc/number-ptys.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'uipc/number-ptys.h'\"
else
echo shar: Extracting \"'uipc/number-ptys.h'\" \(175 characters\)
sed "s/^X//" >'uipc/number-ptys.h' <<'END_OF_FILE'
X/* number-ptys.h - Eric H. Herrin II
X *
X * define the number of ptys here so the actual number only has to be in
X * one place.
X * 
X * Version 2.1
X */
X#define NUMBER_OF_PTYS 8
END_OF_FILE
if test 175 -ne `wc -c <'uipc/number-ptys.h'`; then
    echo shar: \"'uipc/number-ptys.h'\" unpacked with wrong size!
fi
# end of 'uipc/number-ptys.h'
fi
if test -f 'uipc/protosw.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'uipc/protosw.h'\"
else
echo shar: Extracting \"'uipc/protosw.h'\" \(2264 characters\)
sed "s/^X//" >'uipc/protosw.h' <<'END_OF_FILE'
X/*
X *	@(#)protosw.h	1.1	(Alex Crain)	6/20/89
X *
X *  protosw.h - protocol switch definition
X *
X *  Written by Alex Crain.
X *
X *  This file is based in the Berkeley header file of the 
X *  same name, but is *not* guarenteed to be in any way compatable. It is
X *  close enough to the berkeley code that the following applies...
X *
X *  Copyright (c) 1982, 1986, 1988 Regents of the University of California.
X *  All rights reserved.
X * 
X *  Redistribution and use in source and binary forms are permitted
X *  provided that this notice is preserved and that due credit is given
X *  to the University of California at Berkeley. The name of the University
X *  may not be used to endorse or promote products derived from this
X *  software without specific prior written permission. This software
X *  is provided "as is" without express or implied warranty.
X *
X */
X
X#ifndef _proto_h_
X#define _proto_h_
X
X#include <uipc/conf.h>
X
Xstruct protosw {
X   short	pr_type;
X   struct	domain * pr_domain;
X   short	pr_protocol;
X   short	pr_flags;
X   int 		(* pr_input) ();
X   int		(* pr_output) ();
X   int		(* pr_ctlinput) ();
X   int		(* pr_ctloutput) ();
X   int		(* pr_usrreq) ();
X   int		(* pr_init) ();
X   int		(* pr_fasttimo) ();
X   int		(* pr_slowtimo) ();
X   int		(* pr_drain) ();
X};
X
X#define PR_SLOWHZ	2
X#define PR_FASTHZ	5
X
X/*
X *  values for pr_flags
X */
X
X#define PR_ATOMIC	0x01		/* exchange atomic messages only     */
X#define PR_ADDR		0x02		/* addresses given w/ messages	     */
X#define PR_CONNREQUIRED	0x04		/* connection reuired by protocol    */
X#define PR_WANTRCVD	0x08		/* want PRU_RCVD calls		     */
X#define PR_RIGHTS	0x10		/* passes capabilities		     */
X
X/*
X *  arguments to usrreq
X */
X
X#define PRU_ATTACH	0
X#define PRU_DETACH	1
X#define PRU_BIND	2
X#define PRU_LISTEN	3
X#define PRU_CONNECT	4
X#define PRU_ACCEPT	5
X#define PRU_DISCONNECT	6
X#define PRU_SHUTDOWN	7
X#define PRU_RCVD	8
X#define PRU_SEND	9
X#define PRU_ABORT	10
X#define PRU_CONTROL	11
X#define PRU_SENSE	12
X#define PRU_RCVOOB	13
X#define PRU_SENDOOB	14
X#define PRU_SOCKADDR	15
X#define PRU_PEERADDR	16
X#define PRU_CONNECT2	17
X#define PRU_FASTTIMO	18
X#define PRU_SLOWTIMO	19
X#define PRU_PROTORCV	20
X#define PRU_PROTOSEND	21
X
X#define PRE_NREQ	21
X
X#define PRCO_GETOPT	0
X#define PRCO_SETOPT	1
X
X#endif /* _proto_h_ */
END_OF_FILE
if test 2264 -ne `wc -c <'uipc/protosw.h'`; then
    echo shar: \"'uipc/protosw.h'\" unpacked with wrong size!
fi
# end of 'uipc/protosw.h'
fi
if test -f 'uipc/pty.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'uipc/pty.h'\"
else
echo shar: Extracting \"'uipc/pty.h'\" \(983 characters\)
sed "s/^X//" >'uipc/pty.h' <<'END_OF_FILE'
X/* pty.h - Eric H. Herrin II (eric@ms.uky.edu)
X * 
X * some elementary definitions for the pty driver (UnixPC version)
X *
X * Version 2.1
X */
X
Xextern int ptsproc();
Xextern int ptyopen();
X
X#define True  (1 == 1)
X#define False (0 == 1)
X
X/*  This is the total number of ptys.  Note the maximum number here is
X *  currently 64 for the UnixPC (128 minor devices/2 minor devices per pty
X *  yields 64 total ptys).  I really don't see the need for more than 32
X *  on the 3B1, however, if someone does, then (s)he can change it.
X */
X#include <uipc/number-ptys.h>
X#define PTYCNT (dev_t)NUMBER_OF_PTYS
X
X/* some definitions to include kernel info from system header files.
X */
X#define KERNEL 1
X#define defined_io 1
X#define NOSTREAMS 1
X
X#define UNIXPC 1
X
X/* This macro returns True if the parameter is a master minor device number,
X * False otherwise.
X */
X#define Master( dev )	(minor(dev) >= PTYCNT)
X
Xextern struct tty pts_tty[];
Xextern int pts_cnt;
Xextern int ptystate[];
Xextern int pty_major;
END_OF_FILE
if test 983 -ne `wc -c <'uipc/pty.h'`; then
    echo shar: \"'uipc/pty.h'\" unpacked with wrong size!
fi
# end of 'uipc/pty.h'
fi
if test -f 'uipc/socket.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'uipc/socket.h'\"
else
echo shar: Extracting \"'uipc/socket.h'\" \(2554 characters\)
sed "s/^X//" >'uipc/socket.h' <<'END_OF_FILE'
X/*
X *	@(#)socket.h	1.1	(Alex Crain)	6/20/89
X *
X *  socket.h - socket related definitions
X *
X *  Written by Alex Crain.
X *
X *  This file is loosly based in the Berkeley header file of the 
X *  same name, but is *not* guarenteed to be in any way compatable. It is
X *  close enough to the berkeley code that the following applies...
X *
X *  Copyright (c) 1982, 1986, 1988 Regents of the University of California.
X *  All rights reserved.
X * 
X *  Redistribution and use in source and binary forms are permitted
X *  provided that this notice is preserved and that due credit is given
X *  to the University of California at Berkeley. The name of the University
X *  may not be used to endorse or promote products derived from this
X *  software without specific prior written permission. This software
X *  is provided "as is" without express or implied warranty.
X *
X */
X
X#ifndef _socket_h_
X#define _socket_h_
X
X#include <uipc/conf.h>
X
X/*
X *  Socket types
X */
X
X#define SOCK_STREAM	1		/* stream socket	*/
X#define SOCK_DGRAM	2		/* datagram socket	*/
X#ifdef notdef
X#define SOCK_RAW	3		/* raw socket		*/
X#endif
X
X/*
X *  Socket option flags
X */
X
X#define SO_DEBUG	0x0001
X#define SO_ACCEPTCONN	0x0002
X#define SO_REUSEADDR	0x0004
X#define SO_KEEPALIVE	0x0008
X#define SO_DONTROUTE	0x0010
X#define SO_BROADCAST	0x0020
X#define SO_USELOOPBACK	0x0040
X#define SO_LINGER	0x0080
X#define SO_OOBINLINE	0x0100
X/*
X *  Extra socket options
X */
X
X#define SO_SNDBUF	0x1001
X#define SO_RCVBUF	0x1002
X#define SO_SNDLOWAT	0x1003
X#define SO_RCVLOWAT	0x1004
X#define SO_SNDTIMEO	0x1005
X#define SO_RCVTIMEO	0x1006
X#define SO_ERROR	0x1007
X#define SO_TYPE		0x1008
X
X/*
X *  Linger structure
X */
X
Xstruct linger {
X   int	l_onoff;
X   int	l_linger;
X};
X
X#define SOL_SOCKET	0xffff
X
X/*
X *  Address families
X */
X
X#define AF_UNSPEC	0
X#define AF_UNIX		1
X#define AF_INET		2
X
X#define AF_MAX		3
X
X/*
X *  Structure for address specs.
X */
X
Xstruct sockaddr {
X   u_short	sa_family;		/* address family	*/
X   char		sa_data[14];		/* address spec		*/
X};
X
X/*
X *  Protocol families
X */
X
X#define PF_UNSPEC	AF_UNSPEC
X#define PF_UNIX		AF_UNIX
X#define PF_INET		AF_INET
X
X#define PF_MAX		AF_MAX
X
X/*
X *  maximum queue length for listen ()
X */
X
X#define SOMAXCONN	5
X
X
X/*
X *  message header for recvmsg and sendmsg calls.
X */
X
Xstruct msghdr {
X   caddr_t	msg_name;
X   int		msg_namelen;
X   caddr_t	msg_accrights;
X   int		msg_accrightslen;
X};
X
X#define MSG_OOB		0x01		/* flag for out-of-band data	*/
X#define MSG_PEEK	0x02		/* peek at incomming message	*/
X#define MSG_DONTROUTE	0x04		/* send without routing tables	*/
X
X#endif /* _socket_h_ */
END_OF_FILE
if test 2554 -ne `wc -c <'uipc/socket.h'`; then
    echo shar: \"'uipc/socket.h'\" unpacked with wrong size!
fi
# end of 'uipc/socket.h'
fi
if test -f 'uipc/socketvar.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'uipc/socketvar.h'\"
else
echo shar: Extracting \"'uipc/socketvar.h'\" \(3629 characters\)
sed "s/^X//" >'uipc/socketvar.h' <<'END_OF_FILE'
X/*
X *	@(#)socketvar.h	1.1	(Alex Crain)	6/20/89
X *
X *  socketvar.h - socket related definitions
X *
X *  Written by Alex Crain.
X *
X *  This file is loosly based in the Berkeley header file of the 
X *  same name, but is *not* guarenteed to be in any way compatable. It is
X *  close enough to the berkeley code that the following applies...
X *
X *  Copyright (c) 1982, 1986, 1988 Regents of the University of California.
X *  All rights reserved.
X * 
X *  Redistribution and use in source and binary forms are permitted
X *  provided that this notice is preserved and that due credit is given
X *  to the University of California at Berkeley. The name of the University
X *  may not be used to endorse or promote products derived from this
X *  software without specific prior written permission. This software
X *  is provided "as is" without express or implied warranty.
X *
X */
X
X#ifndef _socketvar_h_
X#define _socketvar_h_
X
X#include <uipc/conf.h>
X
X/*
X *  structure describing a socket.
X */
X
Xtypedef ushort socketptr;
X
Xstruct socket {
X   short	so_type;
X   short	so_options;
X   short	so_linger;
X   short	so_state;
X   caddr_t	so_pcb;
X   struct	protosw * so_proto;
X
X   struct	socket * so_head;
X   struct	socket * so_q0;
X   struct	socket * so_q;
X   short	so_q0len;
X   short	so_qlen;
X   short	so_qlimit;
X   short	so_timeo;
X   ushort	so_error;
X   short	so_pgrp;
X   u_long	so_oobmark;
X
X   struct	sockbuf {
X      u_long	sb_cc;
X      u_long	sb_hiwat;
X      u_long	sb_mbcnt;
X      u_long	sb_mbmax;
X      u_long	sb_lowat;
X      struct	mbuf * sb_mb;
X      struct	proc * sb_sel;
X      short	sb_timeo;
X      short	sb_flags;
X   } so_rcv, so_snd;
X
X#define SB_MAX		(64 * 1024)
X#define SB_LOCK		0x01
X#define SB_WANT		0x02
X#define SB_WAIT		0x04
X#define SB_SEL		0x08
X#ifdef notdef
X#define SB_COLL		0x10
X#endif
X};
X
X/*
X *  Socket states
X */
X#define SS_NOFDREF		0x001
X#define SS_ISCONNECTED		0x002
X#define SS_ISCONNECTING		0x004
X#define SS_ISDISCONNECTING	0x008
X#define SS_CANTSENDMORE		0x010
X#define SS_CANTRCVMORE		0x020
X#define SS_RCVATMARK		0x040
X
X#define SS_PRIV			0x080
X#define SS_NBIO			0x100
X#define SS_ASYNC		0x200
X
X/*
X *  Socket macros
X */
X   
X#define sbspace(sb) \
X (MIN ((long) ((sb)->sb_hiwat - (sb)->sb_cc), \
X       (long) ((sb)->sb_mbmax - (sb)->sb_mbcnt)))
X
X#define sendallatonce(so) \
X ((so)->so_proto->pr_flags & PR_ATOMIC)
X
X#define soreadable(so) \
X ((so)->so_rcv.sb_cc || ((so)->so_state & SS_CANTRCVMORE) || \
X  (so)->so_qlen || (so)->so_error)
X
X#define sowriteable(so) \
X (sbspace (&(so)->so_snd) > 0 && \
X  (((so)->so_state & SS_ISCONNECTED) || \
X   ((so)->so_proto->pr_flags & PR_CONNREQUIRED) == 0) || \
X  ((so)->so_state & SS_CANTSENDMORE) || \
X  (so)->so_error)
X
X#define sballoc(sb, m) \
X{  (sb)->sb_cc += (m)->m_len; \
X   (sb)->sb_mbcnt += MSIZE; }
X
X#define sbfree(sb, m) \
X{  (sb)->sb_cc -= (m)->m_len; \
X   (sb)->sb_mbcnt -= MSIZE; }
X
X#define sblock(sb) \
X{   while ((sb)->sb_flags & SB_LOCK) \
X     {  (sb)->sb_flags |= SB_WANT; \
X	 (void) sleep ((caddr_t) &(sb)->sb_flags, PZERO+1); } \
X    (sb)->sb_flags |= SB_LOCK; }
X
X#define sbunlock(sb) \
X{  (sb)->sb_flags &= ~SB_LOCK; \
X   if ((sb)->sb_flags & SB_WANT) \
X    {  (sb)->sb_flags &= ~SB_WANT; \
X       wakeup ((caddr_t) &(sb)->sb_flags); }}
X
X#define sorwakeup(so)	sowakeup (so, &(so)->so_rcv)
X#define sowwakeup(so)	sowakeup (so, &(so)->so_snd)
X
X#ifdef KERNEL
X#ifdef __STDC__
Xstruct socket * sonewconn (struct socket *);
X#else  /* __STDC__ */
Xstruct socket * sonewconn ();
X#endif /* __STDC__ */
X
Xextern int	select_sleep; /* value to say if we need to wakeup */
Xextern int	select_sleep_addr; /* address we select on if wait in select */
X#endif KERNAL
X
X#endif /* _socketvar_h_ */
END_OF_FILE
if test 3629 -ne `wc -c <'uipc/socketvar.h'`; then
    echo shar: \"'uipc/socketvar.h'\" unpacked with wrong size!
fi
# end of 'uipc/socketvar.h'
fi
if test -f 'uipc/un.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'uipc/un.h'\"
else
echo shar: Extracting \"'uipc/un.h'\" \(255 characters\)
sed "s/^X//" >'uipc/un.h' <<'END_OF_FILE'
X/*
X *	@(#)un.h	1.1	(Alex Crain)	6/20/89
X *
X *  UNIX Domain definitions
X */
X
X#ifndef _un_h_
X#define _un_h_
X
X#include <uipc/conf.h>
X
Xstruct sockaddr_un {
X   short	sun_family;		/* AF_UNIX		*/
X   char		sun_path[108];		/* path name		*/
X};
X
X#endif /* _un_h_ */
END_OF_FILE
if test 255 -ne `wc -c <'uipc/un.h'`; then
    echo shar: \"'uipc/un.h'\" unpacked with wrong size!
fi
# end of 'uipc/un.h'
fi
if test -f 'uipc/unpcb.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'uipc/unpcb.h'\"
else
echo shar: Extracting \"'uipc/unpcb.h'\" \(1543 characters\)
sed "s/^X//" >'uipc/unpcb.h' <<'END_OF_FILE'
X/*
X *	@(#)unpcb.h	1.1	(Alex Crain)	6/20/89
X *
X *  unpcb.h - unix intern protocol control block.
X *
X *  Written by Alex Crain.
X *
X *  This file is loosly based in the Berkeley file unpcb.h,
X *  but is *not* guarenteed to be in any way compatable. It is
X *  close enough to the Berkeley code that the following applies...
X *
X *  Copyright (c) 1982, 1986, 1988 Regents of the University of California.
X *  All rights reserved.
X * 
X *  Redistribution and use in source and binary forms are permitted
X *  provided that this notice is preserved and that due credit is given
X *  to the University of California at Berkeley. The name of the University
X *  may not be used to endorse or promote products derived from this
X *  software without specific prior written permission. This software
X *  is provided "as is" without express or implied warranty.
X *
X */
X
X#ifndef _unpcb_h_
X#define _unpcb_h_
X
X#include <uipc/conf.h>
X
Xstruct unpcb {
X   struct	socket * unp_socket;	/* backpointer to socket	     */
X   struct	inode * unp_inode;	/* file reference		     */
X   ino_t	unp_ino;		/* fake inode number		     */
X   struct	unpcb * unp_conn;	/* control block of connected socket */
X   struct	unpcb * unp_refs;	/* referencing socket liked list     */
X   struct	unpcb * unp_nextref;	/* link in unp_refs list	     */
X   struct	mbuf * unp_addr;	/* bound address of socket	     */
X   int		unp_cc;			/* copy of rcv.sb_cc		     */
X   int		unp_mbcnt;		/* copy of rcv.sb_mbcnt		     */
X};
X
X#define sotounpcb(so)	((struct unpcb *)((so)->so_pcb))
X
X#endif /* _unpcb_h_ */
END_OF_FILE
if test 1543 -ne `wc -c <'uipc/unpcb.h'`; then
    echo shar: \"'uipc/unpcb.h'\" unpacked with wrong size!
fi
# end of 'uipc/unpcb.h'
fi
echo shar: End of shell archive.
exit 0

-- 
David H. Brierley
Home: dave@galaxia.network23.com; Work: dhb@quahog.ssd.ray.com
Send comp.sources.3b1 submissions to comp-sources-3b1@galaxia.network23.com
%% Can I be excused, my brain is full. **
