From: Mike Lijewski <lijewski@theory.tc.cornell.edu>
Subject: v02i012: dired - directory editor in C++, Part05/05
Newsgroups: comp.sources.reviewed
Approved: csr@calvin.dgbt.doc.ca

Submitted-by: Mike Lijewski <lijewski@theory.tc.cornell.edu>
Posting-number: Volume 2, Issue 12
Archive-name: dired/part05

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 5 (of 5)."
# Contents:  patchlevel.C utilities.C
# Wrapped by mjlx@eagle on Mon Mar  9 21:23:57 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'patchlevel.C' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'patchlevel.C'\"
else
echo shar: Extracting \"'patchlevel.C'\" \(1216 characters\)
sed "s/^X//" >'patchlevel.C' <<'END_OF_FILE'
X/*
X** version.C - where our version number is defined
X**
X** patchlevel.C 1.9   Delta'd: 10:29:46 2/28/92   Mike Lijewski, CNSF
X**
X** Copyright (c) 1991 Cornell University
X** All rights reserved.
X**
X** Redistribution and use in source and binary forms are permitted
X** provided that: (1) source distributions retain this entire copyright
X** notice and comment, and (2) distributions including binaries display
X** the following acknowledgement:  ``This product includes software
X** developed by Cornell University'' in the documentation or other
X** materials provided with the distribution and in all advertising
X** materials mentioning features or use of this software. Neither the
X** name of the University nor the names of its contributors may be used
X** to endorse or promote products derived from this software without
X** specific prior written permission.
X**
X** THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
X** IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
X** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
X*/
X
X#include "dired.h"
X
X//
X// this is really global due to extern declaration in "dired.h"
X//
Xextern const char *const version = "Dired Version 1.5";
END_OF_FILE
if test 1216 -ne `wc -c <'patchlevel.C'`; then
    echo shar: \"'patchlevel.C'\" unpacked with wrong size!
fi
# end of 'patchlevel.C'
fi
if test -f 'utilities.C' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'utilities.C'\"
else
echo shar: Extracting \"'utilities.C'\" \(22173 characters\)
sed "s/^X//" >'utilities.C' <<'END_OF_FILE'
X/*
X** utilities.C - utility functions
X**
X** utilities.C 1.55   Delta'd: 14:56:16 2/28/92   Mike Lijewski, CNSF
X**
X** Copyright (c) 1991 Cornell University
X** All rights reserved.
X**
X** Redistribution and use in source and binary forms are permitted
X** provided that: (1) source distributions retain this entire copyright
X** notice and comment, and (2) distributions including binaries display
X** the following acknowledgement:  ``This product includes software
X** developed by Cornell University'' in the documentation or other
X** materials provided with the distribution and in all advertising
X** materials mentioning features or use of this software. Neither the
X** name of the University nor the names of its contributors may be used
X** to endorse or promote products derived from this software without
X** specific prior written permission.
X**
X** THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
X** IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
X** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
X*/
X
X
X#include <ctype.h>
X#ifndef _IBMR2
X#include <libc.h>
X#endif
X#include <osfcn.h>
X#include <pwd.h>
X#include <signal.h>
X#include <stdarg.h>
X#ifdef _IBMR2
X#include <sys/access.h>
X#endif
X#include <sys/stat.h>
X#include <sys/types.h>
X#include <string.h>
X#include <sys/errno.h>
X#include <termio.h>
X#include <unistd.h>
X
X#include "classes.h"
X#include "dired.h"
X#include "display.h"
X#include "keys.h"
X
X/*
X** expand_tilde - expects a string of the form "~ ...", which must
X**                have been allocated via new().  Returns a new string
X**                with the user's home directory in place of the `~'.
X**                The passed string is deleted and a new()'d string is
X**                returned.  The user's home directory is always appended
X**                in the form: "/usr/staff/mjlx"; a slash is not added to
X**                the end of the home directory string.  If we cannot get
X**                the user's home directory, we simply return the passed
X**                string.
X*/
Xchar *expand_tilde(char *str)
X{
X    char *home = getenv("HOME");
X
X    if (home == NULL) {
X        struct passwd *user = getpwuid(getuid());
X        if (user == NULL) return str;
X        home = user->pw_dir;
X    }
X
X    char *newstr = new char[strlen(str) + strlen(home)];
X    (void)strcpy(newstr, home);
X    (void)strcat(newstr, str+1);
X    delete str;
X    return newstr;
X} 
X
X/*
X** fgetline(FILE *f) - returns a pointer to the start of a line read
X**	     	       from fp, or the null pointer if we hit eof or get
X**                     an error from fgets(). Exits if new() fails.
X**                     Strips the newline from the line.
X**		       Caller should free memory if desired.
X*/
X
Xstatic const int FGETLINE_BUFSIZE = 80; // chunksize for calls to new()
X
Xchar *fgetline(FILE *fp)
X{
X    char *buffer = new char[FGETLINE_BUFSIZE];
X
X    char *result= fgets(buffer, FGETLINE_BUFSIZE, fp);
X    if (result == 0) return 0; // either error or at eof
X
X    if (buffer[strlen(buffer)-1] != '\n' && !feof(fp)) {
X        //
X        // longer line than buffer can hold
X        //
X        char *restofline = fgetline(fp);
X        if (restofline == 0) return 0; // eof or error
X
X        char *longline = new char[strlen(buffer)+strlen(restofline)+1];
X        (void)strcat(strcpy(longline, buffer), restofline);
X
X        delete restofline;
X        delete buffer;
X
X        if (longline[strlen(longline)-1] == '\n')
X            longline[strlen(longline)-1] = '\0';
X
X        return longline;
X    }
X    else {
X        if (buffer[strlen(buffer)-1] == '\n')
X            buffer[strlen(buffer)-1] = '\0';
X        return buffer;
X    }
X}
X
X/*
X** This routine tries to determine the full pathname of the current
X** directory. The pointer points to volatile storage.
X*/
X
Xchar *get_current_directory(void)
X{
X    int size = 50;
X    char *dir = getcwd(0, size);
X    while (dir == 0)
X        if (errno == ERANGE) {
X            size *= 2;
X            dir = getcwd(0, size);
X            continue;
X        }
X        else
X            //
X            // We must not be able to read the current
X            // directory.  That is, we probably got an EACCES.
X            //
X            return 0;
X    return dir;
X}
X
X/*
X** display_string - prints a string to the given the display, guaranteeing not
X**                  to print more than columns() characters.  If the string
X**                  exceeds the width of the window, a `!' is placed in
X**                  the final column.  Can be called with or without the
X**                  length of the string to be printed.  In most places in
X**                  the code we know the exact length of the strings we
X**                  wish to print.  Note that `len' has a default value
X**                  of zero defined by the declaration in "dired.h".
X**                  We never call this when trying to write to the last
X**                  row on the screen.  That is the dominion of message().
X*/
X
Xvoid display_string(const char *str, size_t len)
X{
X    size_t string_length;
X    
X    len == 0 ? string_length = strlen(str) : (string_length = len);
X    
X    if (string_length < columns()) {
X        (void)printf("%s", str);
X        cursor_wrap();
X    }
X    else if (string_length > columns()) {
X        (void)printf("%*.*s%c", columns()-1, columns()-1, str, '!');
X        if (!AM || XN) cursor_wrap();
X    }
X    else {
X        (void)printf("%s", str);
X        if (!AM || XN) cursor_wrap();
X    }
X}
X
X/*
X** Get a long listing of the given directory.  Returns 0 if we got other
X** than a "memory exhausted" error.  Exits via _new_handler if new() fails
X** in fgetline();  Dirname is possible modified here because we may choose
X** to strip off the head.  Returns 0 for other errors.
X*/
XDirList *get_directory_listing(char *dirname)
X{
X    const char *cmd = ls_cmd[the_sort_order()];
X    char *popen_cmd = new char[strlen(cmd) + strlen(dirname) + 1];
X
X    message("Reading directory ... ");
X
X    (void)strcpy(popen_cmd, cmd);
X    (void)strcat(popen_cmd, dirname);
X
X    FILE *fp = popen(popen_cmd, "r");
X    if (fp == 0) return 0;
X    
X    DirList *directory = new DirList(dirname);
X
X    //
X    // discard lines of the form:
X    //
X    //      total 1116
X    //
X
X    char *line = fgetline(fp);  // read and discard the `total' line
X    if (fp == 0) return 0;
X    
X    while((line = fgetline(fp)) != 0) {
X        DirLine *entry = new DirLine(line);
X        directory->add(entry);
X    }
X
X    message("Reading directory ... done");
X
X    if (feof(fp) && !ferror(fp)) {
X        (void)pclose(fp);
X        return directory;
X    }
X    else
X        return 0;
X}
X
X/*
X** error - Prints error message so it can be read.  This is the error
X**         function we call once we've initialized the display.
X*/
X
Xvoid error(const char *format, ...)
X{
X    va_list ap;
X    va_start(ap, format);
X    clear_display();
X    move_cursor(rows()-1, 0);
X    (void) vfprintf(stdout, format, ap);
X    cursor_wrap();
X    va_end(ap);
X    synch_display();
X    term_display();
X    exit(EXIT_FAILURE);
X}
X
X/*
X** update_modeline - this routine concatenates the two strings
X**                   into the modeline.  The modeline
X**                   is displayed in standout mode if possible.
X**                   We never put more than columns() characters into
X**                   the modeline.  The modeline is the penultimate
X**                   line on the terminal screen.  It does not
X**                   synch the display.
X*/
Xvoid update_modeline(const char *head, const char *tail)
X{
X    move_to_modeline();
X    enter_standout_mode();
X
X    int len = (int)strlen(head);
X
X    if (len < columns())
X        (void)printf("%s", head);
X    else {
X        (void)printf("%*.*s", columns(), columns(), head);
X        return;
X    }
X    
X    //
X    // write exactly columns() characters to modeline
X    //
X    for (int i = len; i < columns()-1 && *tail != '\0'; i++, tail++)
X        putchar(*tail);
X
X    if (i < columns()-1) {
X        putchar(' ');
X        for (i = columns()-i-1; i > 0; i--) putchar('-');
X    }
X    else if (*tail != '\0')
X        //
X        // The string was overly long.  Put a '!' in the last space
X        // on the modeline to signify truncation.
X        //
X        putchar('!');
X    else
X        //
X        // Here len == columns()-1 && *tail == '\0'.
X        //
X        putchar(' ');
X
X    end_standout_mode();
X}
X
X/*
X** is_directory - returns non-zero if a directory, otherwise 0.
X**                Also returns zero on error.
X*/
X
Xint is_directory(const char *dir)
X{
X    struct stat stbuf;
X
X    if (stat(dir, &stbuf) < 0) return 0;
X
X    return S_ISDIR(stbuf.st_mode);
X}
X
X/*
X** is_regular_file - returns non-zero if a regular file, otherwise 0.
X**                   Also returns zero on error.
X*/
X
Xint is_regular_file(const char *file)
X{
X    struct stat stbuf;
X    
X    if (stat(file, &stbuf) < 0) return 0;
X
X    return S_ISREG(stbuf.st_mode);
X}
X
X/*
X** read_and_exec_perm - returns non-zero if we have read and execute
X**                      permission on the directory, otherwise 0.
X**                      Returns 0 on error.
X*/
X
Xint read_and_exec_perm(const char *dir)
X{
X    return access(dir, R_OK | X_OK) == -1 ? 0 : 1;
X}
X
X/*
X** Find the column position of the first character of the filename
X** in the current line of the given DirList.
X**
X** The straight-forward way to do this is to walk the string from it's
X** tail to it's head until we hit some whitespace.  This presumes
X** that filenames don't contain whitespace.  The one special case
X** to worry about is if the file is a symbolic link.  In that case we'll
X** have a filename field entry of the form
X**
X**       Xm -> /usr/lpp/include/Xm
X*/
X
Xint goal_column(DirList *l)
X{
X    DirLine *line = l->currLine();
X
X    const char *tmp;
X
X#ifndef NO_SYMLINKS
X    if ((tmp = strstr(line->line(), " -> ")) != 0)
X        //
X        // we have a symbolic link
X        //
X        --tmp;
X    else
X#endif
X        tmp = line->line() + line->length() - 1;
X
X    while(!isspace(*tmp)) --tmp;
X
X    return tmp - line->line() + 1;
X}
X
X/*
X** get_file_name - returns the filename of the current line of the DirList.
X**
X**                 We always allocate the filename in `new' space which
X**                 should be `delete'd by the caller.
X**
X**                 If we have a symbolic link, we return the link not
X**                 the file pointed to.
X*/
Xchar *get_file_name(DirList *dl)
X{
X    const char *tmp = &(dl->currLine()->line())[goal_column(dl)];
X
X    //
X    // This `new' allocates more space than we need in the case
X    // we have a symbolic link, but if we're that low on space,
X    // we'll be crashing soon enough anyway :-).
X    //
X    char *file = new char[strlen(tmp)+1];
X    (void)strcpy(file, tmp);
X
X    //
X    // do we have a symbolic link?
X    //
X    char *result = strstr(file, " -> ");
X    if (result) *result = '\0';
X
X    return file;
X}
X
X/*
X** redisplay - this routine redisplays the DirList at the top
X**             of our stack.  It assumes that the physical screen 
X**             has become corrupted, clears it and then repaints it.
X*/
X
Xvoid redisplay()
X{
X    DirList *dl = dir_stack->top();
X
X    clear_display();
X
X    DirLine *ln = dl->firstLine();
X    for (int i = 0; i < rows()-2 && ln != 0; i++, ln = ln->next())
X        display_string(ln->line(), ln->length());
X
X    update_modeline(modeline_prefix, dl->name());
X
X    if (dl->currLine()->length() > columns())
X        leftshift_current_line(dl);
X    else
X        move_cursor(dl->savedYPos(), dl->savedXPos());
X
X    synch_display();
X}
X
X/*
X** exec_command - execute the passed command using system(3).
X**                If prompt == 1, which is the default, we prompt for
X**                a key before returning.
X*/
X
Xvoid exec_command(char *cmd, int prompt)
X{
X    unsetraw();
X    unset_signals();
X    system(cmd);
X    set_signals();
X    setraw();
X
X    if (prompt) {
X        enter_standout_mode();
X        message("Press Any Key to Continue");
X        end_standout_mode();
X        getchar();
X    }
X}
X
X#ifdef SIGWINCH
X/*
X** adjust_window - called to adjust our window after getting a SIGWINCH
X*/
X
Xstatic void adjust_window()
X{
X#ifdef TIOCGWINSZ
X    struct winsize w;
X    if (ioctl(1, TIOCGWINSZ, (char *)&w) == 0 && w.ws_row > 0) LI = w.ws_row;
X    if (ioctl(1, TIOCGWINSZ, (char *)&w) == 0 && w.ws_col > 0) CO = w.ws_col;
X    //
X    // is current line still on the screen?
X    //
X    if (dir_stack->top()->savedYPos() >= rows()-2) {
X        dir_stack->top()->setCurrLine(dir_stack->top()->firstLine());
X        dir_stack->top()->saveYXPos(0, goal_column(dir_stack->top()));
X    }
X    //
X    // need to adjust lastLine()
X    //
X    DirLine *ln = dir_stack->top()->firstLine();
X    for (int i = 0; i < rows()-2 && ln; i++, ln = ln->next()) ;
X    ln ? dir_stack->top()->setLast(ln->prev()) :
X         dir_stack->top()->setLast(dir_stack->top()->tail());
X#endif
X}
X#endif
X
X/*
X** prompt - displays `msg' prompt and then collects the response.
X**          The keys of the response are echoed as they're collected.  
X**          The response should be delete'd when no longer needed.
X**          A response of 0 indicates that the command was aborted.
X**          A response can contain any graphical character.
X**          C-G will abort out of a prompt.  Keyboard-generated signals
X**          are ignored while in a prompt. Backspace works as expected.
X**          Carriage return indicates the end of response.
X**          Non-graphical characters are ignored.
X*/
Xchar *prompt(const char *msg)
X{
X    (void)signal(SIGINT,  SIG_IGN);
X    (void)signal(SIGQUIT, SIG_IGN);
X    (void)signal(SIGTSTP, SIG_IGN);
X
X    size_t len = strlen(msg);
X
X    message(msg);
X
X    //
X    // We never echo into the last position in the message window.
X    // This means that we can allocate exactly enough char's to just
X    // fill the window, reserving the final position for the `null'.
X    //
X    long space_available = columns()-len-1;
X    int pos = 0;
X
X    char *response = new char[space_available+1];
X
X    char key;
X    for (;;) {
X
X#ifdef SIGWINCH
X        if (win_size_changed) {
X            win_size_changed = 0;
X            adjust_window();
X            redisplay();
X            message(msg);
X            for (int i = 0; i < pos; i++) putchar(response[i]);
X            synch_display();
X        }
X#endif
X        key = getchar();
X        if (isprint(key)) {
X            //
X            // echo character to message window and wait for another
X            //
X            response[pos++] = key;
X            putchar(key);
X            synch_display();
X            
X            if (pos == space_available) {
X                //
X                // need to allocate more room for the response
X                // note that strlen(response) == pos
X                //
X                char *long_response = new char[pos+columns()/2+1];
X                response[pos] = 0;  // stringify response
X                (void)strcpy(long_response, response);
X
X                delete response;
X                response = long_response;
X
X                //
X                // Shift prompt in message window so we
X                // always have the end in view where we are
X                // adding characters as they're typed.
X                //
X                move_to_message_line();
X                display_string(&response[pos-columns()/2+1], columns()/2-1);
X                synch_display();
X                space_available += columns()/2;
X            }
X        }
X        else
X            switch (key) {
X              case KEY_CR:
X                //
X                // we have the complete response
X                //
X                response[pos] = 0;
X                clear_message_line();
X                synch_display();
X                set_signals();
X                return response;
X              case KEY_ABORT  :
X                //                       
X                // abort the command and reset cursor to previous position
X                //
X                message("Aborted");
X                move_cursor(dir_stack->top()->savedYPos(),
X                            dir_stack->top()->savedXPos());
X
X                delete response;
X                set_signals();
X                return 0;
X              case KEY_BKSP:
X                //
X                // back up one character
X                //
X                if (pos == 0)
X                    break;
X                else {
X                    backspace();
X                    DC ? delete_char_at_cursor() : clear_to_end_of_line();
X                    --pos;
X                    synch_display();
X                }
X                break;
X              default:
X                //
X                // ignore other characters
X                //
X                break;
X            }
X    }
X}
X
X/*
X** lines_displayed - returns the number of lines in the DirList
X**                   currently displayed on the screen.
X*/
X
Xint lines_displayed(DirList *dl)
X{
X    DirLine *ln = dl->firstLine();
X    for (int i = 1; ln != dl->lastLine(); i++, ln = ln->next()) ;
X    return i;
X}
X
X/*
X** message - prints a message on the last line of the screen.
X**           It is up to the calling process to put the cursor
X**           back where it belongs.  Synchs the display.
X*/
X
Xstatic char message_window_dirty = 0;
X
Xvoid message(const char *msg)
X{
X    clear_message_line();
X    int len = int(strlen(msg));
X    if (len < columns())
X        (void)printf("%s", msg);
X    else
X        (void)printf("%*.*s", columns()-1, columns()-1, msg);
X    synch_display();
X    message_window_dirty = 1;
X}
X
X/*
X** get_key - reads a key using getch() and then clears the message window,
X**           if it needs to be cleared. Used only by read_commands in the
X**           main switch statement so that message() doesn't need to sleep()
X**           and clear() on the messages that get written.  This way, the
X**           message window is cleared after each keypress within the main
X**           loop, when necessary.  We also check for and deal with window
X**           size changes here.
X*/
X
Xint get_key(DirList *dl)
X{
X
X#ifdef SIGWINCH
X    if (win_size_changed) {
X        win_size_changed = 0;
X        adjust_window();
X        redisplay();
X    }
X#endif
X
X    int key = getchar();
X    if (message_window_dirty) {
X        clear_message_line();
X        move_cursor(dl->savedYPos(), dl->savedXPos());
X        synch_display();
X        message_window_dirty = 0;
X    }
X    return key;
X}
X    
X/*
X** cleanup - cleanup and exit after a SIGHUP, SIGTERM, SIGQUIT or SIGINT
X*/
X
Xvoid cleanup(int)
X{
X    term_display();
X    exit(0);
X}
X
X/*
X** initial_listing - prints the initial listing screen.  Called  by dired()
X**                   and read_commands() when rereading the current directory.
X**                   Adjusts firstLine(), lastLine() and currLine().
X*/
X
Xvoid initial_listing(DirList *dl)
X{
X    clear_listing();
X
X    DirLine *ln = dl->head();
X    dl->setFirst(ln);
X    dl->setCurrLine(ln);
X    for (int i = 0; i < rows()-2 && ln; ln = ln->next(), i++)
X        display_string(ln->line(), ln->length());
X
X    ln ? dl->setLast(ln->prev()) : dl->setLast(dl->tail());
X}
X
X#ifdef SIGWINCH
X
Xint win_size_changed;
X
X/*
X** winch - set flag indicating window size changed.
X*/
X
Xvoid winch(int)
X{
X    (void)signal(SIGWINCH, winch);
X    win_size_changed = 1;
X}
X
X#endif    
X
X/*
X** set_signals - set up our signal handlers
X*/
X
Xvoid set_signals()
X{
X    (void)signal(SIGHUP,  cleanup);
X    (void)signal(SIGINT,  cleanup);
X    (void)signal(SIGQUIT, cleanup);
X    (void)signal(SIGTERM, cleanup);
X    (void)signal(SIGTSTP, termstop);
X#ifdef SIGWINCH
X    (void)signal(SIGWINCH, winch);
X#endif
X}
X
X/*
X** ignore_signals - set signals back to defaults
X*/
X
Xvoid unset_signals()
X{
X    (void)signal(SIGHUP,  SIG_DFL);
X    (void)signal(SIGINT,  SIG_DFL);
X    (void)signal(SIGQUIT, SIG_DFL);
X    (void)signal(SIGTERM, SIG_DFL);
X    (void)signal(SIGTSTP, SIG_DFL);
X#ifdef SIGWINCH
X    (void)signal(SIGWINCH, SIG_DFL);
X#endif
X}
X
X/*
X** leftshift_current_line - shifts the current line in DirList left until
X**                          its tail is visible.
X*/
Xvoid leftshift_current_line(DirList *dl)
X{
X        int inc = dl->currLine()->length()-columns()+1;
X        move_cursor(dl->savedYPos(), 0);
X        clear_to_end_of_line();
X        display_string(&(dl->currLine()->line())[inc],columns()-1);
X        dl->saveYXPos(dl->savedYPos(), max(goal_column(dl)-inc, 0));
X        move_cursor(dl->savedYPos(), dl->savedXPos());
X}
X
X/*
X** rightshift_current_line - rightshifts current line to "natural" position.
X*/
Xvoid rightshift_current_line(DirList *dl)
X{
X    move_cursor(dl->savedYPos(), 0);
X    clear_to_end_of_line();
X    display_string(dl->currLine()->line(), dl->currLine()->length());
X    dl->saveYXPos(dl->savedYPos(), goal_column(dl));
X    move_cursor(dl->savedYPos(), dl->savedXPos());
X}
X
X#ifdef NO_STRSTR
X/*
X** strstr - from Henry Spencers ANSI C library suite
X*/
X
Xchar *strstr(const char *s, const char *wanted)
X{
X	register const char *scan;
X	register size_t len;
X	register char firstc;
X
X	/*
X	 * The odd placement of the two tests is so "" is findable.
X	 * Also, we inline the first char for speed.
X	 * The ++ on scan has been moved down for optimization.
X	 */
X	firstc = *wanted;
X	len = strlen(wanted);
X	for (scan = s; *scan != firstc || strncmp(scan, wanted, len) != 0; )
X		if (*scan++ == '\0') return NULL;
X	return (char *)scan;
X}
X
X#endif /* NO_STRSTR */
X
X#ifdef NO_STRCHR
X/*
X** strchr - find first occurrence of a character in a string.  From Henry
X**          Spencer's string(3) implementation.
X*/
X
Xchar *strchr(const char *s, char charwanted)
X{
X    register const char *scan;
X    
X    /*
X     * The odd placement of the two tests is so NULL is findable.
X     */
X    for (scan = s; *scan != charwanted;)	/* ++ moved down for opt. */
X        if (*scan++ == '\0') return 0;
X    return (char *)scan;
X}
X
X/*
X** strrchr - find last occurrence of a character in a string. From Henry
X**           Spencer's string(3) implementation. 
X*/
X
Xchar *strrchr(const char *s, char charwanted)
X{
X	register const char *scan;
X	register const char *place;
X
X	place = NULL;
X	for (scan = s; *scan != '\0'; scan++)
X		if (*scan == charwanted) place = scan;
X	if (charwanted == '\0') return (char *)scan;
X	return (char *)place;
X}
X
X#endif /* NO_STRCHR */
END_OF_FILE
if test 22173 -ne `wc -c <'utilities.C'`; then
    echo shar: \"'utilities.C'\" unpacked with wrong size!
fi
# end of 'utilities.C'
fi
echo shar: End of archive 5 \(of 5\).
cp /dev/null ark5isdone
MISSING=""
for I in 1 2 3 4 5 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 5 archives.
    rm -f ark[1-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
exit 0 # Just in case...
