From: Mike Lijewski <lijewski@theory.tc.cornell.edu>
Subject: v02i007: dired - directory editor in C++, Part00/05
Newsgroups: comp.sources.reviewed
Approved: csr@calvin.dgbt.doc.ca

Submitted-by: Mike Lijewski <lijewski@theory.tc.cornell.edu>
Posting-number: Volume 2, Issue 7
Archive-name: dired/part00

Environment: UNIX (requires C++ compiler)

Tested Environments:
	HP9000/425s, HP-UX 7.05, CC version A.02.11 (C++ ATT 2.1).
	HP9000/720, HP-UX 8.05, CC version A.02.11 (C++ ATT 2.1).
	HP400, HPUX 7.05/8.0x, C++ ATT 2.1
	HP710, HPUX 8.0x, C++ ATT 2.1
	Sun3/4, SunOs 4.0/4.1, C++ ATT 2.0/2.1, Gnu g++ 1.37

Dates:
	Submission Received: Dec 10 1991
	Reviews Returned: Dec 23 1991
	Revised Submission Received: Jan 6 1991
	Reviews Returned: Jan 25 1992
	Revised Submission Received: Feb 4 1992
	Reviews Returned: March 3 1992
	Revised Submission Received: March 10 1992
	Accepted: April 2 1992
	
	
Author's Summary:
-----------------

Dired is a directory editor modelled after Dired Mode of GNU Emacs,
but targetted for non-emacs users.  It implements a window into the
current directory consisting of lines of the form:

    -rw------- 1 mjlx     staff        2002 Apr 11 15:17 c++-motif
    -rw------- 1 mjlx     staff       51399 Aug 11 1990  c++browser.tar.Z
    -rw------- 1 mjlx     staff         970 Mar 14 18:44 callback
    drwx--x--x 2 mjlx     staff         384 Jun 21 16:32 cfront
    -rw------- 1 mjlx     staff        2152 Dec 17 1990  cfront-sun4.1.bug.Z
    drwx------ 3 mjlx     staff        2048 Aug  1 13:04 dired
    -rw------- 1 mjlx     staff        2033 Jan 25 1991  link-bug.C.Z

The filename in the line containing the cursor is known as the current
file.  There are numerous of commands available for operating on the
current file.  These include copy, delete, edit, view, chmod, chgrp,
compress, rename and uncompress.  Hence by simply positioning the
cursor on the appropriate filename, one can do many of the "usual"
UNIX operations on the files in a directory without bothering to
spelling out the command and filename each time.  If you edit a
directory, you get a directory listing of that directory.  In this
manner it is possible to walk up and down a directory tree from within
dired.

Unfortunately, from experience, it appears that C++ code is much more
difficult to port than C code.  The main problem seems to be header
files.  Since every function must be prototyped before it is used,
this necessitates the use of many system include files to properly
prototype functions, especially in an application such as dired which
uses a fair number of system services and library functions.  When
using many include files, their inconsistencies become apparent.  The
most common "bug" is when two different include files prototype a
function differently.  C++ compilers consider this a hard error.  The
only thing to be done in this situation is to fix the header file(s)
and continue with the build process.

Another common problem is a header file which doesn't prototype a
function when in fact it should.  In this case your best bet is to
manually add the prototype to 'dired.h'. 

A more fundamental problem with include files is that they are
incompletely or inconsistently standardized.  ANSI C dictates the
contents of only fifteen include files which are meant to cover the C
library.  In order to use a function not covered by ANSI C, which, by
necessity, will include all operating system specific functions, one
must have some other scheme for deciding what file(s) to include.
Where ANSI C stops, dired development has followed the rules proposed
by POSIX 1003.1.  Not all systems follow or even purport to follow the
POSIX standard.

The one place where this POSIX strategy may bite you are the S_ISREG
and S_ISDIR macros.  These are an attempt by POSIX to hide the
machinations traditionally done with the stat structure in order to
decide upon the type of a file.  If your machine doesn't have these
macros, you'll need to modify two functions in utilities.C in a manner
appropriate to you machine/OS combination.  Please send me any diffs
so I can incorporate them into the base release.

If nothing else, attempting to compile dired will probably point out a
number of deficiencies in the implementation of your header files.
Persevere and report all bugs to your vendor.


Reviewers' Comments:
--------------------

Dired is a useful directory browsing tool.  Its compatibility with
standard GNU Emacs dired gives a casual user a flying start.
...
I found dired useful when I didn't have access to GNU Emacs, for
example on remote machines that I don't use too often.  I really liked
the compatibility with GNU Emacs "classic" dired, so I didn't have to
re-learn too much.  The ability to sort by date was liked when I was
browsing non-familiar directory structures looking for files.

--------------------------------------------------------------------------

'dired' is a directory editor similar to the 'dired mode' of emacs.

The overall submission is good. It unpacks correctly, the documentation and
manual are good. 
...
Once compiled (it is not so easy), 'dired' works (almost) fine, and does
efficiently what the author claims.

--------------------------------------------------------------------------

Dired provides a useful, consolidated front-end for common file
manipulations, and could almost replace a shell for significant amounts
of daily work.  The interface is not unfamiliar to people familiar with
interactive unix tools such as rn or vi (to say nothing of emacs ;-):
i.e., some odd or arbitrary behaviours, but nothing completely
unreasonable.  I don't automatically recommend people use emacs unless
there is a need for such a tool (e.g., the casual user who reads mail
and news and plays games has no need for emacs), and for those users
this appears to be a nice tool.  The only unfortunate choice here is
that dired matches "classic" emacs dired.

The built-in help commands make it useful for fairly novice users with
little training; the man page is clear, concise and informative (much
better than most UNIX man pages, but that is damning with faint praise
;-).  The selection of built-in commands (move, copy, delete, compress,
view, edit, print, chmod, chgrp, link, etc.) seems well chosen.  Error
messages for failed actions are generally clear, if terse.

exit 0 # Just in case...
