This is Info file ../info/emacs, produced by Makeinfo-1.54 from the
input file emacs.texi.


File: emacs,  Node: Rmail Inbox,  Next: Rmail Files,  Prev: Rmail Deletion,  Up: Rmail

Rmail Files and Inboxes
=======================

   Unix places incoming mail for you in a file that we call your
"inbox".  When you start up Rmail, it copies the new messages from your
inbox into your primary mail file, an Rmail file, which also contains
other messages saved from previous Rmail sessions.  It is in this file
that you actually read the mail with Rmail.  This operation is called
"getting new mail".  It can be repeated at any time using the `g' key
in Rmail.  The inbox file name is `/usr/spool/mail/USERNAME' on some
systems (typically Berkeley-derived ones) and `/usr/mail/USERNAME' on
other systems.

   There are three reason for having separate Rmail files and inboxes.

  1. The inbox file format varies between operating systems and
     according to the other mail software in use.  Only one part of
     Rmail needs to know about the alternatives, and it need only
     understand how to convert all of them to Rmail's own format.

  2. The inbox file format usually doesn't provide a place for all the
     information that Rmail records.

  3. It is very cumbersome to access an inbox file without danger of
     losing mail, because it is necessary to interlock with mail
     delivery.  Moreover, different operating systems use different
     interlocking techniques.  The strategy of moving mail out of the
     inbox once and for all into a separate Rmail file avoids the need
     for interlocking in all the rest of Rmail, since only Rmail
     operates on the Rmail file.

   When getting new mail, Rmail first copies the new mail from the inbox
file to the Rmail file; then it saves the Rmail file; then it truncates
the inbox file.  This way, a system crash may cause duplication of mail
between the inbox and the Rmail file, but cannot lose mail.

   Copying mail from an inbox in the system's mailer directory actually
puts it in an intermediate file `~/.newmail'.  This is because the
interlocking is done by a C program that copies to another file.
`~/.newmail' is deleted after mail merging is successful.  If there is
a crash at the wrong time, this file continues to exist and will be
used as an inbox the next time you get new mail.


File: emacs,  Node: Rmail Files,  Next: Rmail Output,  Prev: Rmail Inbox,  Up: Rmail

Multiple Mail Files
===================

   Rmail operates by default on your "primary mail file", which is named
`~/RMAIL' and receives your incoming mail from your system inbox file.
But you can also have other mail files and edit them with Rmail.  These
files can receive mail through their own inboxes, or you can move
messages into them with explicit Rmail commands (*note Rmail Output::.).

`i FILE RET'
     Read FILE into Emacs and run Rmail on it (`rmail-input').

`M-x set-rmail-inbox-list RET FILES RET'
     Specify inbox file names for current Rmail file to get mail from.

`g'
     Merge new mail from current Rmail file's inboxes
     (`rmail-get-new-mail').

`C-u g FILE RET'
     Merge new mail from inbox file FILE.

   To run Rmail on a file other than your primary mail file, you may use
the `i' (`rmail-input') command in Rmail.  This visits the file, puts
it in Rmail mode, and then gets new mail from the file's inboxes if
any.  The file should be in Rmail format.  You can use `M-x
rmail-input' even when not in Rmail.

   The file you read with `i' should usually be a valid Rmail file.  If
it is not, then Rmail tries to decompose it into a stream of messages
in various known formats.  If it succeeds, it converts the whole file to
an Rmail file.

   Each Rmail file can contain a list of inbox file names; you can
specify this list with `M-x set-rmail-inbox-list RET FILES RET'.  The
argument can contain any number of file names, separated by commas.  It
can also be empty, which specifies that this file should have no
inboxes.  Once a list of inboxes is specified, the Rmail file remembers
it permanently until it is explicitly changed.

   If an Rmail file has inboxes, new mail is merged in from the inboxes
when the Rmail file is brought into Rmail, and when you use the `g'
(`rmail-get-new-mail') command.  If the Rmail file specifies no
inboxes, then no new mail is merged in at these times.  As a special
exception, if your primary mail file does not specify any inbox files,
it uses the standard system inbox.

   To merge mail from a file that is not the usual inbox, give the `g'
key a numeric argument, as in `C-u g'.  Then it reads a file name and
merges mail from that file.  The inbox file is not deleted or changed
in any way when `g' with an argument is used.  This is, therefore, a
general way of merging one file of messages into another.


File: emacs,  Node: Rmail Output,  Next: Rmail Labels,  Prev: Rmail Files,  Up: Rmail

Copying Messages Out to Files
=============================

`o FILE RET'
     Append a copy of the current message to the file FILE, writing it
     in Rmail file format by default (`rmail-output-to-rmail-file').

`C-o FILE RET'
     Append a copy of the current message to the file FILE, writing it
     in Unix mail file format by default (`rmail-output').

   If an Rmail file has no inboxes, the only way messages get into it is
by means of explicit `o' commands.

   `o' (`rmail-output-to-rmail-file') appends the current message in
Rmail format to the end of the specified file.  This is the best command
to use to move messages between Rmail files.  If the other Rmail file is
currently visited, the copying is done into the other file's Emacs
buffer instead.  You should eventually save it on disk.

   The `C-o' (`rmail-output') command in Rmail appends a copy of the
current message to a specified file, in inbox file format.  This is
useful for moving messages into files to be read by other mail
processors that do not understand Rmail format.

   The `o' and `C-o' commands are actually equivalent (aside from
having separate file name defaults) when you specify an existing file;
both commands check the file's contents to determine which format to use
(Rmail or inbox).  But it does matter which command you use when you
specify a nonexistent file; `o' starts it in Rmail format, while `C-o'
starts it in inbox format.

   Copying a message with `o' or `C-o' gives the original copy of the
message the `filed' attribute, so that `filed' appears in the mode line
when such a message is current.  If you like to keep just a single copy
of every mail message, set the variable `rmail-delete-after-output' to
`t'; then the `o' and `C-o' commands delete the original message after
copying it.  (You can undelete the original afterward.)

   Copying messages in Unix format copies the header fields that are
displayed in Rmail at the time.  Thus, if you use the `t' command to
view the entire header and then copy the message, the entire header is
copied.

   The variable `rmail-output-file-alist' lets you specify intelligent
defaults for the output file, based on the contents of the current
message.  The value should be a list whose elements have this form:

     (REGEXP . FILENAME)

If there's a match for REGEXP in the current message, then the default
file name for output is FILENAME.  If multiple elements match the
message, the first matching element decides the default file name.


File: emacs,  Node: Rmail Labels,  Next: Rmail Reply,  Prev: Rmail Output,  Up: Rmail

Labels
======

   Each message can have various "labels" assigned to it as a means of
classification.  A label has a name; different names mean different
labels.  Any given label is either present or absent on a particular
message.  A few label names have standard meanings and are given to
messages automatically by Rmail when appropriate; these special labels
are called "attributes".  All other labels are assigned only by users.

`a LABEL RET'
     Assign the label LABEL to the current message (`rmail-add-label').

`k LABEL RET'
     Remove the label LABEL from the current message
     (`rmail-kill-label').

`C-M-n LABELS RET'
     Move to the next message that has one of the labels LABELS
     (`rmail-next-labeled-message').

`C-M-p LABELS RET'
     Move to the previous message that has one of the labels LABELS
     (`rmail-previous-labeled-message').

`C-M-l LABELS RET'
     Make a summary of all messages containing any of the labels LABELS
     (`rmail-summary-by-labels').

Specifying an empty string for one these commands means to use the last
label specified for any of these commands.

   The `a' (`rmail-add-label') and `k' (`rmail-kill-label') commands
allow you to assign or remove any label on the current message.  If the
LABEL argument is empty, it means to assign or remove the same label
most recently assigned or removed.

   Once you have given messages labels to classify them as you wish,
there are two ways to use the labels: in moving and in summaries.

   The command `C-M-n LABELS RET' (`rmail-next-labeled-message') moves
to the next message that has one of the labels LABELS.  The argument
LABELS specifies one or more label names, separated by commas.  `C-M-p'
(`rmail-previous-labeled-message') is similar, but moves backwards to
previous messages.  A preceding numeric argument to either one serves
as a repeat count.

   The command `C-M-l LABELS RET' (`rmail-summary-by-labels') displays
a summary containing only the messages that have at least one of a
specified set of messages.  The argument LABELS is one or more label
names, separated by commas.  *Note Rmail Summary::, for information on
summaries.

   If the LABELS argument to `C-M-n', `C-M-p' or `C-M-l' is empty, it
means to use the last set of labels specified for any of these commands.

   Some labels such as `deleted' and `filed' have built-in meanings and
are assigned to or removed from messages automatically at appropriate
times; these labels are called "attributes".  Here is a list of Rmail
attributes:

`unseen'
     Means the message has never been current.  Assigned to messages
     when they come from an inbox file, and removed when a message is
     made current.  When you start Rmail, it initially shows the first
     message that has this attribute.

`deleted'
     Means the message is deleted.  Assigned by deletion commands and
     removed by undeletion commands (*note Rmail Deletion::.).

`filed'
     Means the message has been copied to some other file.  Assigned by
     the file output commands (*note Rmail Files::.).

`answered'
     Means you have mailed an answer to the message.  Assigned by the
     `r' command (`rmail-reply').  *Note Rmail Reply::.

`forwarded'
     Means you have forwarded the message to other users.  Assigned by
     the `f' command (`rmail-forward').  *Note Rmail Reply::.

`edited'
     Means you have edited the text of the message within Rmail.  *Note
     Rmail Editing::.

`resent'
     Means you have resent the message to other users.  Assigned by the
     command `M-x rmail-resend'.  *Note Rmail Reply::.

   All other labels are assigned or removed only by the user, and have
no standard meaning.


File: emacs,  Node: Rmail Reply,  Next: Rmail Summary,  Prev: Rmail Labels,  Up: Rmail

Sending Replies
===============

   Rmail has several commands that use Mail mode to send outgoing mail.
*Note Sending Mail::, for information on using Mail mode.  What are
documented here are the special commands of Rmail for entering Mail
mode.  Note that the usual keys for sending mail, `C-x m' and `C-x 4 m',
are available in Rmail mode and work just as they usually do.

`m'
     Send a message (`rmail-mail').

`c'
     Continue editing already started outgoing message
     (`rmail-continue').

`r'
     Send a reply to the current Rmail message (`rmail-reply').

`f'
     Forward current message to other users (`rmail-forward').

`C-u f'
     Resend the current message to other users (`rmail-resend').

`M-m'
     Try sending a bounced message a second time
     (`rmail-retry-failure').

   The most common reason to send a message while in Rmail is to reply
to the message you are reading.  To do this, type `r' (`rmail-reply').
This displays the `*mail*' buffer in another window, much like `C-x 4
m', but preinitializes the `Subject', `To', `CC' and `In-reply-to'
header fields based on the message you are replying to.  The `To' field
is starts out as the address of the person who sent the message you
received, and the `CC' field starts out with all the other recipients
of that message.

   You can exclude certain recipients from being placed automatically in
the `CC', using the variable `rmail-dont-reply-to-names'.  Its value
should be a regular expression (as a string); any recipient that the
regular expression matches, is excluded from the `CC' field.  The
default value matches your own name, and any name starting with
`info-'.  (Those names are excluded because there is a convention of
using them for large mailing lists to broadcast announcements.)

   To omit the `CC' field completely for a particular reply, enter the
reply command with a prefix argument: `C-u r'.

   Once the `*mail*' buffer has been initialized, editing and sending
the mail goes as usual (*note Sending Mail::.).  You can edit the
presupplied header fields if they are not right for you.  You can also
use the commands of Mail mode, including `C-c C-y' to yank in the
message that you are replying to, and `C-c C-q' to fill what was thus
yanked.  You can also switch to the Rmail buffer, select a different
message, switch back, and yank the new current message.

   Sometimes a message does not reach its destination.  Mailers usually
send the failed message back to you, enclosed in a "failure message".
The Rmail command `M-m' (`rmail-retry-failure') prepares to send the
same message a second time: it sets up a `*mail*' buffer with the same
text and header fields as before.  If you type `C-c C-c' right away,
you send the message again exactly the same as the first time.
Alternatively, you can edit the text or headers and then send it.

   Another frequent reason to send mail in Rmail is to "forward" the
current message to other users.  `f' (`rmail-forward') makes this easy
by preinitializing the `*mail*' buffer with the current message as the
text, and a subject designating a forwarded message.  All you have to
do is fill in the recipients and send.  When you forward a message,
recipients get a message which is "from" you, and which has the
original message in its contents.

   "Resending" is an alternative similar to forwarding; the difference
is that resending sends a message that is "from" the original sender,
just as it reached you--with a few added header fields `Resent-from'
and `Resent-to' to indicate that it came via you.  To resend a message
in Rmail, use `C-u f'.  (`f' runs `rmail-forward', which is programmed
to invoke `rmail-resend' if you provide a numeric argument.)

   The `m' (`rmail-mail') command is used to start editing an outgoing
message that is not a reply.  It leaves the header fields empty.  Its
only difference from `C-x 4 m' is that it makes the Rmail buffer
accessible for `C-c C-y', just as `r' does.  Thus, `m' can be used to
reply to or forward a message; it can do anything `r' or `f' can do.

   The `c' (`rmail-continue') command resumes editing the `*mail*'
buffer, to finish editing an outgoing message you were already
composing, or to alter a message you have sent.

   If you set the variable `rmail-mail-new-frame' to a non-`nil' value,
then all the Rmail commands to start sending a message create a new
frame to edit it in.  This frame is deleted when you send the message,
or when you use the `Don't Send' item in the `Mail' menu.


File: emacs,  Node: Rmail Summary,  Next: Rmail Editing,  Prev: Rmail Reply,  Up: Rmail

Summaries
=========

   A "summary" is a buffer containing one line per message to give you
an overview of the mail in an Rmail file.  Each line shows the message
number, the sender, the labels, and the subject.  When the summary
buffer is selected, you can use almost all Rmail commands; these apply
to the message described by the current line of the summary.  Moving
point in the summary buffer selects messages as you move to their
summary lines.

   A summary buffer applies to a single Rmail file only; if you are
editing multiple Rmail files, each one has its own summary buffer (if
you have asked for one).  The summary buffer name is made by appending
`-summary' to the Rmail buffer's name.  Normally only one summary
buffer is displayed at a time.

* Menu:

* Rmail Make Summary::  Making various sorts of summaries.
* Rmail Summary Edit::  Manipulating messages from the summary.


File: emacs,  Node: Rmail Make Summary,  Next: Rmail Summary Edit,  Up: Rmail Summary

Making Summaries
----------------

   Here are the commands to create a summary for the current Rmail file.
Once the Rmail file has a summary buffer, changes in the Rmail file
(such as deleting or expunging messages, and getting new mail)
automatically update the summary.

`h'
`C-M-h'
     Summarize all messages (`rmail-summary').

`l LABELS RET'
`C-M-l LABELS RET'
     Summarize message that have one or more of the specified labels
     (`rmail-summary-by-labels').

`C-M-r RCPTS RET'
     Summarize messages that have one or more of the specified
     recipients (`rmail-summary-by-recipients').

`C-M-t TOPIC RET'
     Summarize messages that have a match for the specified regexp
     TOPIC in their subjects (`rmail-summary-by-topic').

   The `h' or `C-M-h' (`rmail-summary') command fills the summary buffer
for the current Rmail file with a summary of all the messages in the
file.  It then displays and selects the summary buffer in another
window.

   `C-M-l LABELS RET' (`rmail-summary-by-labels') makes a partial
summary mentioning only the messages that have one or more of the
labels LABELS.  LABELS should contain label names separated by commas.

   `C-M-r RCPTS RET' (`rmail-summary-by-recipients') makes a partial
summary mentioning only the messages that have one or more of the
recipients RCPTS.  RCPTS should contain mailing addresses separated by
commas.

   `C-M-t TOPIC RET' (`rmail-summary-by-topic') makes a partial summary
mentioning only the messages whose subjects have a match for the
regular expression TOPIC.

   Note that there is only one summary buffer for any Rmail file;
making one kind of summary discards any previously made summary.


File: emacs,  Node: Rmail Summary Edit,  Prev: Rmail Make Summary,  Up: Rmail Summary

Editing in Summaries
--------------------

   You can use the Rmail summary buffer to do almost anything you can do
in the Rmail buffer itself.  In fact, once you have a summary buffer,
there's no need to switch back to the Rmail buffer.

   You can select and display various messages in the Rmail buffer, from
the summary buffer, just by moving point in the summary buffer to
different lines.  It doesn't matter what Emacs command you use to move
point; whichever line point is on at the end of the command, that
message is selected in the Rmail buffer.

   Almost all Rmail commands work in the summary buffer as well as in
the Rmail buffer.  Thus, `d' in the summary buffer deletes the current
message, `u' undeletes, and `x' expunges.  `o' and `C-o' output the
current message to a file; `r' starts a reply to it.  You can scroll
the current message while remaining in the summary buffer using SPC and
DEL.

   The Rmail commands to move between messages also work in the summary
buffer, but with a twist: they move through the set of messages included
in the summary.  They also redisplay the Rmail buffer on the screen
(unlike cursor motion commands, which update the contents of the Rmail
buffer but don't display it in a window unless it already appears).
Here is a list of these commands:

`n'
     Move to next line, skipping lines saying `deleted', and select its
     message.

`p'
     Move to previous line, skipping lines saying `deleted', and select
     its message.

`M-n'
     Move to next line and select its message.

`M-p'
     Move to previous line and select its message.

`>'
     Move to the last line, and select its message.

`<'
     Move to the first line, and select its message.

`M-s PATTERN RET'
     Search through messages for PATTERN starting with the current
     message; select the message found, and move point in the summary
     buffer to that message's line.

   Deletion, undeletion, and getting new mail, and even selection of a
different message all update the summary buffer when you do them in the
Rmail buffer.  If the variable `rmail-redisplay-summary' is non-`nil',
these actions also bring the summary buffer back onto the screen.

   When you are finished using the summary, type `w'
(`rmail-summary-wipe') to kill the summary buffer's window.  You can
also exit Rmail while in the summary.  `q' (`rmail-summary-quit') kills
the summary window, then saves the Rmail file and switches to another
buffer.


File: emacs,  Node: Rmail Editing,  Next: Rmail Digest,  Prev: Rmail Summary,  Up: Rmail

Editing Within a Message
========================

   Rmail mode provides a few special commands for moving within and
editing the current message.  In addition, the usual Emacs commands are
available (except for a few, such as `C-M-n' and `C-M-h', that are
redefined by Rmail for other purposes).  However, the Rmail buffer is
normally read-only, and to alter it you must use the Rmail command `e'
described below.

`t'
     Toggle display of original headers (`rmail-toggle-headers').

`e'
     Edit current message (`rmail-edit-current-message').

   Rmail reformats the header of each message before displaying it.
Normally this involves deleting most header fields, on the grounds that
they are not interesting.  The variable `rmail-ignored-headers'
specifies a regexp that matches the header fields to discard in this
way.  The original headers are saved permanently, and to see what they
look like, use the `t' command (`rmail-toggle-headers').  This discards
the reformatted headers of the current message and displays it with the
original headers.  Repeating `t' reformats the message again.
Selecting the message again also reformats.

   The Rmail buffer is normally read only, and most of the characters
you would type to modify it (including most letters) are redefined as
Rmail commands.  This is usually not a problem since it is rare to want
to change the text of a message.  When you do want to do this, the way
is to type `e' (`rmail-edit-current-message'), which changes from Rmail
mode into Rmail Edit mode, another major mode which is nearly the same
as Text mode.  The mode line indicates this change.

   In Rmail Edit mode, letters insert themselves as usual and the Rmail
commands are not available.  When you are finished editing the message
and are ready to go back to Rmail, type `C-c C-c', which switches back
to Rmail mode.  Alternatively, you can return to Rmail mode but cancel
all the editing that you have done by typing `C-c C-]'.

   Entering Rmail Edit mode runs the hook `text-mode-hook'; then it
runs the hook `rmail-edit-mode-hook' (*note Hooks::.).  It adds the
attribute `edited' to the message.


File: emacs,  Node: Rmail Digest,  Next: Out of Rmail,  Prev: Rmail Editing,  Up: Rmail

Digest Messages
===============

   A "digest message" is a message which exists to contain and carry
several other messages.  Digests are used on some moderated mailing
lists; all the messages that arrive for the list during a period of time
such as one day are put inside a single digest which is then sent to the
subscribers.  Transmitting the single digest uses much less computer
time than transmitting the individual messages even though the total
size is the same, because the per-message overhead in network mail
transmission is considerable.

   When you receive a digest message, the most convenient way to read
it is to "undigestify" it: to turn it back into many individual
messages.  Then you can read and delete the individual messages as it
suits you.

   To do this, type `M-x undigestify-rmail-message' after selecting the
digest message.  This extracts the submessages as separate Rmail
messages, and inserts them following the digest.  The digest message
itself is flagged as deleted.


File: emacs,  Node: Out of Rmail,  Next: Rmail Rot13,  Prev: Rmail Digest,  Up: Rmail

Converting an Rmail File to Mailbox Format
==========================================

   The command `M-x unrmail' converts a file in Rmail format to
ordinary system mailbox format, so that you can use it with other
mail-editing tools.  You must specify two arguments, the name of the
Rmail file and the name to use for the converted file.  `M-x unrmail'
does not alter the Rmail file itself.


File: emacs,  Node: Rmail Rot13,  Prev: Out of Rmail,  Up: Rmail

Reading Rot13 Messages
======================

   Mailing list messages that might offend some readers are sometimes
encoded in a simple code called "rot13"--so named because it rotates
the alphabet by 13 letters.  This code is not for secrecy, as it
provides none; rather, it enables those who might be offended to avoid
ever seeing the real text of the message.

   To view a buffer using the rot13 code, use the command `M-x
rot13-other-window'.  This displays the current buffer in another window
which applies the code when displaying the text.


File: emacs,  Node: Dired,  Next: Calendar/Diary,  Prev: Rmail,  Up: Top

Dired, the Directory Editor
***************************

   Dired makes an Emacs buffer containing a listing of a directory, and
optionally some of its subdirectories as well.  You can use the normal
Emacs commands to move around in this buffer, and special Dired commands
to operate on the files listed.

* Menu:

* Enter: Dired Enter.         How to invoke Dired.
* Commands: Dired Commands.   Commands in the Dired buffer.
* Deletion: Dired Deletion.   Deleting files with Dired.
* Visit: Dired Visiting.      Other file operations through Dired.
* Marks vs Flags::	      Flagging for deletion vs marking.
* Operating on Files::	      How to copy, rename, print, compress, etc.
			        either one file or several files.
* Shell Commands in Dired::   Running a shell command on the marked files.
* Transforming File Names::   Using patterns to rename multiple files.
* Comparison in Dired::	      Running `diff' by way of Dired.
* Subdirectories in Dired::   Adding subdirectories to the Dired buffer.
* Subdirectory Motion::	      Moving across subdirectories, and up and down.
* Hiding Subdirectories::     Making subdirectories visible or invisible.
* Updating: Dired Updating.   Discarding lines for files of no interest.
* Find: Dired and Find.	      Using `find' to choose the files for Dired.


File: emacs,  Node: Dired Enter,  Next: Dired Commands,  Up: Dired

Entering Dired
==============

   To invoke Dired, do `C-x d' or `M-x dired'.  The command reads a
directory name or wildcard file name pattern as a minibuffer argument
to specify which files to list.  Where `dired' differs from
`list-directory' is in putting the buffer into Dired mode so that the
special commands of Dired are available.

   The variable `dired-listing-switches' specifies the options to give
to `ls' for listing directory; this string *must* contain `-l'.  If you
use a numeric prefix argument with the `dired' command, you can specify
the `ls' switches with the minibuffer after you finish entering the
directory specification.

   To display the Dired buffer in another window rather than in the
selected window, use `C-x 4 d' (`dired-other-window)' instead of `C-x
d'.


File: emacs,  Node: Dired Commands,  Next: Dired Deletion,  Prev: Dired Enter,  Up: Dired

Commands in the Dired Buffer
============================

   The Dired buffer is "read-only", and inserting text in it is not
useful, so ordinary printing characters such as `d' and `x' are used
for special Dired commands.  Some Dired commands "mark" or "flag" the
"current file" (that is, the file on the current line); other commands
operate on the marked files or on the flagged files.

   All the usual Emacs cursor motion commands are available in Dired
buffers.  Some special purpose cursor motion commands are also
provided.  The keys `C-n' and `C-p' are redefined to put the cursor at
the beginning of the file name on the line, rather than at the
beginning of the line.

   For extra convenience, SPC and `n' in Dired are equivalent to `C-n'.
`p' is equivalent to `C-p'.  (Moving by lines is so common in Dired
that it deserves to be easy to type.)  DEL (move up and unflag) is
often useful simply for moving up.


File: emacs,  Node: Dired Deletion,  Next: Dired Visiting,  Prev: Dired Commands,  Up: Dired

Deleting Files with Dired
=========================

   The primary use of Dired is to "flag" files for deletion and then
delete the files previously flagged.

`d'
     Flag this file for deletion.

`u'
     Remove deletion flag on this line.

`DEL'
     Move point to previous line and remove the deletion flag on that
     line.

`x'
     Delete the files that are flagged for deletion.

`#'
     Flag all auto-save files (files whose names start and end with `#')
     for deletion (*note Auto Save::.).

`~'
     Flag all backup files (files whose names end with `~') for deletion
     (*note Backup::.).

`. (Period)'
     Flag excess numeric backup files for deletion.  The oldest and
     newest few backup files of any one file are exempt; the middle
     ones are flagged.

`% d REGEXP RET'
     Flag for deletion all files whose names match the regular
     expression REGEXP (`dired-flag-files-regexp').  This is just like
     `% m' except that it uses `D' instead of `*' to mark the files.

     Only the non-directory part of the file name is used in matching.
     Use `^' and `$' to anchor matches.  Exclude subdirectories by
     hiding them (*note Hiding Subdirectories::.).

   You can flag a file for deletion by moving to the line describing the
file and typing `d'.  The deletion flag is visible as a `D' at the
beginning of the line.  This command moves point to the beginning of
the next line, so that repeated `d' commands flag successive files.

   The files are flagged for deletion rather than deleted immediately to
reduce the danger of deleting a file accidentally.  Until you direct
Dired to expunge the flagged files, you can remove deletion flags using
the commands `u' and DEL.  `u' works just like `d', but removes flags
rather than making flags.  DEL moves upward, removing flags; it is like
`u' with numeric argument automatically negated.

   To delete the flagged files, type `x' (`dired-expunge').  This
command first displays a list of all the file names flagged for
deletion, and requests confirmation with `yes'.  Once you confirm, `x'
deletes all the flagged files, then deletes their lines from the text
of the Dired buffer.  The shortened Dired buffer remains selected.

   If you answer `no' or quit with `C-g' when asked to confirm, you
return immediately to Dired, with the deletion flags still present in
the buffer, and no files actually deleted.

   The `#', `~' and `.' commands flag many files for deletion, based on
their file names.  These commands are useful precisely because they do
not actually delete any files; you can remove the deletion flags from
any flagged files that you really wish to keep.

   `#' flags for deletion all files whose names look like auto-save
files (*note Auto Save::.)--that is, files whose names begin and end
with `#'.  `~' flags for deletion all files whose names say they are
backup files (*note Backup::.)--that is, whose names end in `~'.

   `.' (Period) flags just some of the backup files for deletion: all
but the oldest few and newest few backups of any one file.  Normally
`dired-kept-versions' (*not* `kept-new-versions'; that applies only
when saving) specifies the number of newest versions of each file to
keep, and `kept-old-versions' specifies the number of oldest versions
to keep.

   Period with a positive numeric argument, as in `C-u 3 .', specifies
the number of newest versions to keep, overriding
`dired-kept-versions'.  A negative numeric argument overrides
`kept-old-versions', using minus the value of the argument to specify
the number of oldest versions of each file to keep.

   The `% d' command flags all files whose names match a specified
regular expression (`dired-flag-files-regexp').  Only the non-directory
part of the file name is used in matching.  You can use `^' and `$' to
anchor matches.  You can exclude subdirectories by hiding them (*note
Hiding Subdirectories::.).


File: emacs,  Node: Dired Visiting,  Next: Marks vs Flags,  Prev: Dired Deletion,  Up: Dired

Visiting Files in Dired
=======================

   There are several Dired commands for visiting or examining the files
listed in the Dired buffer.  All of them apply to the current line's
file; if that file is really a directory, these commands invoke Dired on
that subdirectory (using a separate Dired buffer).

`f'
     Visit the file described on the current line, like typing `C-x C-f'
     and supplying that file name (`dired-find-file').  *Note
     Visiting::.

`o'
     Like `f', but uses another window to display the file's buffer
     (`dired-find-file-other-window').  The Dired buffer remains visible
     in the first window.  This is like using `C-x 4 C-f' to visit the
     file.  *Note Windows::.

`C-o'
     Visit the file described on the current line, and display the
     buffer in another window, but do not select that window
     (`dired-display-file').

`v'
     View the file described on the current line, using `M-x view-file'
     (`dired-view-file').

     Viewing a file is like visiting it, but is slanted toward moving
     around in the file conveniently and does not allow changing the
     file.  *Note View File: Misc File Ops.


File: emacs,  Node: Marks vs Flags,  Next: Operating on Files,  Prev: Dired Visiting,  Up: Dired

Dired Marks vs. Flags
=====================

   Instead of flagging a file with `D', you can "mark" the file with
some other character (usually `*').  Most Dired commands other than
"expunge" (`x') operate on files marked with `*'.

   Here are some commands for marking with `*' (and also for
unmarking).  (*Note Dired Deletion::, for commands to flag and unflag
files.)

`m'
     Mark the current file with `*' (`dired-mark').  With a numeric
     argument N, mark the next N files starting with the current file.
     (If N is negative, mark the previous -N files.)

`*'
     Mark all executable files with `*' (`dired-mark-executables').
     With a prefix argument, unmark all those files.

`@'
     Mark all symbolic links with `*' (`dired-mark-symlinks').  With a
     prefix argument, unmark all those files.

`/'
     Mark with `*' all files which are actually directories, except for
     `.' and `..' (`dired-mark-directories').  With a prefix argument,
     unmark all those files.

`M-DEL MARKCHAR'
     Remove all marks that use the character MARKCHAR
     (`dired-unmark-all-files').  If you specify RET as MARKCHAR, this
     command removes all marks, no matter what the marker character is.

     With a numeric argument, this command queries about each marked
     file, asking whether to remove its mark.  You can answer `y'
     meaning yes, `n' meaning no, `!' to remove the marks from the
     remaining files without asking about them.

`c OLD NEW'
     Replace all marks that use the character OLD with marks that use
     the character NEW (`dired-change-marks').  This command is the
     only way to create or use marks other than `*' or `D'.  The
     arguments are single characters--do not use RET to terminate them.

     You can use almost any character as a mark character by means of
     this command, to distinguish various classes of files.  If OLD is a
     space (` '), then the command operates on all unmarked files; if
     NEW is a space, then the command unmarks the files it acts on.

     To illustrate the power of this command, here is how to put `*'
     marks on all the files that are unmarked, while unmarking all
     those that have `*' marks:

          c * t  c SPC *  c t SPC

`% m REGEXP RET'
     Mark (with `*') all files whose names match the regular expression
     REGEXP (`dired-mark-files-regexp').

     Only the non-directory part of the file name is used in matching.
     Use `^' and `$' to anchor matches.  Exclude subdirectories by
     hiding them (*note Hiding Subdirectories::.).


File: emacs,  Node: Operating on Files,  Next: Shell Commands in Dired,  Prev: Marks vs Flags,  Up: Dired

Operating on Files
==================

   This section describes the basic Dired commands to operate on one
file or several files.  All of these commands are capital letters; all
of them use the minibuffer, either to read an argument or to ask for
confirmation, before they act.  All use the following convention to
decide which files to manipulate:

   * If you give the command a numeric prefix argument N, it operates
     on the next N files, starting with the current file.  (If N is
     negative, the command operates on the -N files preceding the
     current line.)

   * Otherwise, if some files are marked with `*', the command operates
     on all those files.

   * Otherwise, the command operates on the current file only.

   Here are the commands that operate on files in this way:

`C NEW RET'
     Copy the specified files (`dired-do-copy').  The argument NEW is
     the directory to copy into, or (if copying a single file) the new
     name.

     If `dired-copy-preserve-time' is non-`nil', then copying with this
     command sets the modification time of the new file to be the same
     as that of the old file.

`R NEW RET'
     Rename the specified files (`dired-do-rename').  The argument NEW
     is the directory to rename into, or (if renaming a single file)
     the new name.

     Dired automatically changes the visited file name of buffers
     associated with renamed files so that they refer to the new names.

`H NEW RET'
     Make hard links to the specified files (`dired-do-hardlink').  The
     argument NEW is the directory to make the links in, or (if making
     just one link) the name to give the link.

`S NEW RET'
     Make symbolic links to the specified files (`dired-do-symlink').
     The argument NEW is the directory to make the links in, or (if
     making just one link) the name to give the link.

`M MODESPEC RET'
     Change the mode (also called "permission bits") of the specified
     files (`dired-do-chmod').  This calls the `chmod' program, so
     MODESPEC can be any argument that `chmod' can handle.

`G NEWGROUP RET'
     Change the group of the specified files to NEWGROUP
     (`dired-do-chgrp').

`O NEWOWNER RET'
     Change the owner of the specified files to NEWOWNER
     (`dired-do-chown').  (On most systems, only the superuser can do
     this.)

     The variable `dired-chown-program' specifies the name of the
     program to use to do the work (different systems put `chown' in
     different places).

`P COMMAND RET'
     Print the specified files (`dired-do-print').  You must specify the
     command to print them with, but the minibuffer starts out with a
     suitable guess made using the variables `lpr-command' and
     `lpr-switches' (the same variables that `lpr-file' uses; *note
     Hardcopy::.).

`Z'
     Compress or uncompress the specified files (`dired-do-compress').
     If the file appears to be a compressed file, it is uncompressed;
     otherwise, it is compressed.

`L'
     Load the specified Emacs Lisp files (`dired-do-load').  *Note Lisp
     Libraries::.

`B'
     Byte compile the specified Emacs Lisp files
     (`dired-do-byte-compile').  *Note Byte Compilation: (elisp)Byte
     Compilation.


File: emacs,  Node: Shell Commands in Dired,  Next: Transforming File Names,  Prev: Operating on Files,  Up: Dired

Shell Commands in Dired
=======================

   The dired command `!' (`dired-do-shell-command') reads a shell
command string in the minibuffer and runs the shell command on all the
specified files.  There are two ways of applying a shell command to
multiple files:

   * If you use `*' in the shell command, then it runs just once, with
     the list of file names substituted for the `*'.  The order of file
     names is the order of appearance in the Dired buffer.

     Thus, `! tar cf foo.tar * RET' runs `tar' on the entire list of
     file names, putting them into one tar file `foo.tar'.

   * If the command string doesn't contain `*', then it runs once *for
     each file*, with the file name added at the end.

     For example, `! uudecode RET' runs `uudecode' on each file.

   What if you want to run the shell command once for each file but with
the file name inserted in the middle?  Or if you want to use the file
names in a more complicated fashion?  Use a shell loop.  For example,
this shell command would run `uuencode' on each of the specified files,
writing the output into a corresponding `.uu' file:

     for file in *; uuencode $file $file >$file.uu; done

   The working directory for the shell command is the top level
directory of the Dired buffer.

   The `!' command does not attempt to update the Dired buffer to show
new or modified files, because it doesn't really understand shell
commands, and does not know what files the shell command changed.  Use
the `g' command to update the Dired buffer (*note Dired Updating::.).


File: emacs,  Node: Transforming File Names,  Next: Comparison in Dired,  Prev: Shell Commands in Dired,  Up: Dired

Transforming File Names in Dired
================================

   Here are commands that alter file names in a systematic way:

`% u'
     Rename each of the selected files to an upper case name
     (`dired-upcase').  If the old file names are `Foo' and `bar', the
     new names are `FOO' and `BAR'.

`% l'
     Rename each of the selected files to a lower case name
     (`dired-downcase').  If the old file names are `Foo' and `bar',
     the new names are `foo' and `bar'.

`% R FROM RET TO RET'
`% C FROM RET TO RET'
`% H FROM RET TO RET'
`% S FROM RET TO RET'
     These four commands rename, copy, make hard links and make soft
     links, in each case computing the new name by regular expression
     substitution from the name of the old file.

   The four regular expression substitution commands effectively perform
`query-replace-regexp' on the selected file names in the Dired buffer.
They read two arguments: a regular expression FROM, and a substitution
pattern TO.

   The commands match each "old" file name against the regular
expression FROM, and then replace the matching part with TO.  You can
use `\&' and `\DIGIT' in TO to refer to all or part of the old file
name, as in `query-replace' (*note Query Replace::.).

   For example, `% R ^.*$ RET x-\& RET' renames each selected file by
prepending `x-' to its name.  The inverse of this, removing `x-' from
the front of each file name, is also possible: one method is `% R
^x-.*$ RET \& RET'; another is `% R ^x- RET RET'.  (Use `^' and `$' to
anchor matches that should span the whole filename.)

   If the regular expression matches more than once in a file name, only
the first match is replaced.

   Normally, the replacement process does not consider the files'
directory names; it operates on the file name within the directory.  If
you specify a prefix argument of zero, then replacement affects the
entire absolute file name including directory name.

   Often you will want to apply the command to all files matching the
same REGEXP that you use in the command.  To do this, mark those files
with `% m REGEXP RET', then use the same regular expression in the
command to operate on the files.  To make this easier, the commands to
operate use the last regular expression specified in a `%' command as a
default.


File: emacs,  Node: Comparison in Dired,  Next: Subdirectories in Dired,  Prev: Transforming File Names,  Up: Dired

File Comparison with Dired
==========================

   Here are two Dired commands that compare specified files using
`diff'.

`='
     Compare the current file (the file at point) with another file
     (the file at the mark) using the `diff' program (`dired-diff').
     The file at the mark is the first argument of `diff', and the file
     at point is the second argument.

`M-='
     Compare the current file with its latest backup file
     (`dired-backup-diff').  If the current file is itself a backup,
     compare it with the file it is a backup of; this way, you can
     compare a file with any backup version of your choice.

     The backup file is the first file given to `diff'.


File: emacs,  Node: Subdirectories in Dired,  Next: Subdirectory Motion,  Prev: Comparison in Dired,  Up: Dired

Subdirectories in Dired
=======================

   A Dired buffer displays just one directory in the normal case; but
you can optionally include its subdirectories as well.

   The simplest way to include multiple directories in one Dired buffer
is to specify the options `-lR' for running `ls'.  (If you give a
numeric argument when you run Dired, then you can specify these options
in the minibuffer.)  That produces a recursive directory listing showing
all subdirectories at all levels.

   But usually all the subdirectories are too many; usually you will
prefer to include specific subdirectories only.  You can do this with
the `i' command:

`i'
     Insert the contents of a subdirectory later in the buffer.

     Use the `i' (`dired-maybe-insert-subdir') command on a line that
     describes a file which is a directory.  It inserts the contents of
     that directory into the same Dired buffer, and moves there.
     Inserted subdirectory contents follow the top-level directory of
     the Dired buffer, just as they do in `ls -lR' output.

     If the subdirectory's contents are already present in the buffer,
     the `i' command just moves to it.

     In either case, `i' sets the Emacs mark before moving, so `C-x
     C-x' takes you back to the old position in the buffer (the line
     describing that subdirectory).

     Use the `l' command (`dired-do-redisplay') to update the
     subdirectory's contents.  Use `k' to delete the subdirectory.
     *Note Dired Updating::.


File: emacs,  Node: Subdirectory Motion,  Next: Hiding Subdirectories,  Prev: Subdirectories in Dired,  Up: Dired

Moving Over Subdirectories
==========================

   When a Dired buffer lists subdirectories, you can use the page motion
commands `C-x [' and `C-x ]' to move by entire directories.

   The following commands move across, up and down in the tree of
directories within one Dired buffer.  They move to "directory header
lines", which are the lines that give a directory's name, at the
beginning of the directory's contents.

`C-M-n'
     Go to next subdirectory header line, regardless of level
     (`dired-next-subdir').

`C-M-p'
     Go to previous subdirectory header line, regardless of level
     (`dired-prev-subdir').

`C-M-u'
     Go up to the parent directory's header line (`dired-tree-up').

`C-M-d'
     Go down in the directory tree, to the first subdirectory's header
     line (`dired-tree-down').


File: emacs,  Node: Hiding Subdirectories,  Next: Dired Updating,  Prev: Subdirectory Motion,  Up: Dired

Hiding Subdirectories
=====================

   "Hiding" a subdirectory means to make it invisible, except for its
header line, via selective display (*note Selective Display::.).

`$'
     Hide or reveal the subdirectory that point is in, and move point
     to the next subdirectory (`dired-hide-subdir').  A numeric
     argument serves as a repeat count.

`M-$'
     Hide all subdirectories in this Dired buffer, leaving only their
     header lines (`dired-hide-all').  Or, if any subdirectory is
     currently hidden, make all subdirectories visible again.  You can
     use this command to get an overview in very deep directory trees
     or to move quickly to subdirectories far away.

   Ordinary Dired commands never consider files inside a hidden
subdirectory.  For example, the commands to operate on marked files
ignore files in hidden directories even if they are marked.  Thus you
can use hiding to temporarily exclude subdirectories from operations
without having to remove the markers.

   The subdirectory hiding commands toggle; that is they unhide what was
hidden and vice versa.

