


BASH(1)                  USER COMMANDS                    BASH(1)



NNNNAAAAMMMMEEEE
     bash - GNU Bourne-Again SHell

SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
     bbbbaaaasssshhhh [options] [file]

CCCCOOOOPPPPYYYYRRRRIIIIGGGGHHHHTTTT
     Bash is Copyright (C) 1989, 1991 by the Free Software  Foun-
     dation, Inc.

DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
     BBBBaaaasssshhhh is an sssshhhh-compatible command language  interpreter  that
     executes  commands  read  from  the standard input or from a
     file.  BBBBaaaasssshhhh also incorporates useful features from the  _K_o_r_n
     and _C shells (kkkksssshhhh and ccccsssshhhh).

     BBBBaaaasssshhhh is ultimately intended to be a faithful  implementation
     of  the IEEE Posix Shell and Tools specification (IEEE Work-
     ing Group 1003.2).

OOOOPPPPTTTTIIIIOOOONNNNSSSS
     In addition to the single-character shell options documented
     in  the  description of the sssseeeetttt builtin command, bbbbaaaasssshhhh inter-
     prets the following flags when it is invoked:

     ----cccc _s_t_r_i_n_g If the ----cccc flag is present, then commands are  read
               from _s_t_r_i_n_g.
     ----iiii        If the ----iiii flag is present, the shell  is  _i_n_t_e_r_a_c_-
               _t_i_v_e.
     ----ssss        If the ----ssss flag is  present,  or  if  no  arguments
               remain  after option processing, then commands are
               read from the standard input.  This option  allows
               the  positional parameters to be set when invoking
               an interactive shell.
     ----         A single ---- signals the end of options and disables
               further  option  processing.   Any arguments after
               the ---- are treated as filenames and arguments.   An
               argument of -------- is equivalent to an argument of ----.

     BBBBaaaasssshhhh also interprets a number  of  multi-character  options.
     These  options  must  appear  on the command line before the
     single-character options to be recognized.

     ----nnnnoooorrrrcccc     Do  not  load  the  personal  initialization  file
               ~/._b_a_s_h_r_c  if  the  shell is interactive.  This is
               the default if the shell is invoked as sssshhhh.
     ----nnnnoooopppprrrrooooffffiiiilllleeee
               Do not read either the  system-wide  startup  file
               /_e_t_c/_p_r_o_f_i_l_e or any of the personal initialization
               files ~/._b_a_s_h__p_r_o_f_i_l_e, ~/._b_a_s_h__l_o_g_i_n,  or  ~/._p_r_o_-
               _f_i_l_e.  By default, bbbbaaaasssshhhh normally reads these files
               when it is invoked as a login shell.



GNU                Last change: 1993 August 9                   1






BASH(1)                  USER COMMANDS                    BASH(1)



     ----rrrrccccffffiiiilllleeee _f_i_l_e
               Execute commands from _f_i_l_e instead of the standard
               personal  initialization  file  ~/._b_a_s_h_r_c,  if the
               shell is interactive.
     ----vvvveeeerrrrssssiiiioooonnnn  Show the version number of this instance  of  bbbbaaaasssshhhh
               when starting.
     ----qqqquuuuiiiieeeetttt    Do not be verbose when starting up  (do  not  show
               the shell version or any other information).
     ----llllooooggggiiiinnnn    Make bbbbaaaasssshhhh act as if it had been invoked as a login
               shell.
     ----nnnnoooobbbbrrrraaaacccceeeeeeeexxxxppppaaaannnnssssiiiioooonnnn
               Do not perform curly brace  expansion  (see  BBBBrrrraaaacccceeee
               EEEExxxxppppaaaannnnssssiiiioooonnnn below).
     ----nnnnoooolllliiiinnnneeeeeeeeddddiiiittttiiiinnnngggg
               Do not use the GNU _r_e_a_d_l_i_n_e library to  read  com-
               mand lines if interactive.
     ----ppppoooossssiiiixxxx    Change the behavior  of  bash  where  the  default
               operation  differs  from  the  1003.2  standard to
               match the standard

AAAARRRRGGGGUUUUMMMMEEEENNNNTTTTSSSS
     If arguments remain after option processing, and neither the
     ----cccc  nor  the ----ssss option has been supplied, the first argument
     is assumed to be the name of a file  containing  shell  com-
     mands.  If bbbbaaaasssshhhh is invoked in this fashion, $$$$0000 is set to the
     name of the file, and the positional parameters are  set  to
     the  remaining  arguments.  BBBBaaaasssshhhh reads and executes commands
     from this file, then exits.

DDDDEEEEFFFFIIIINNNNIIIITTTTIIIIOOOONNNNSSSS
     bbbbllllaaaannnnkkkk
          A space or tab.
     wwwwoooorrrrdddd A sequence of characters considered as a single unit by
          the shell.  Also known as a ttttooookkkkeeeennnn.
     nnnnaaaammmmeeee A _w_o_r_d consisting only of alphanumeric  characters  and
          underscores, and beginning with an alphabetic character
          or an underscore.  Also referred to as an iiiiddddeeeennnnttttiiiiffffiiiieeeerrrr.
     mmmmeeeettttaaaacccchhhhaaaarrrraaaacccctttteeeerrrr
          A character that, when unquoted, separates words.   One
          of the following:
          ||||  &&&& ;;;; (((( )))) <<<< >>>> <<<<ssssppppaaaacccceeee>>>> <<<<ttttaaaabbbb>>>>
     ccccoooonnnnttttrrrroooollll ooooppppeeeerrrraaaattttoooorrrr
          A _t_o_k_e_n that performs a control function.  It is one of
          the following symbols:
          |||||||| &&&& &&&&&&&& ;;;; ;;;;;;;; (((( )))) |||| <<<<nnnneeeewwwwlllliiiinnnneeee>>>>

RRRREEEESSSSEEEERRRRVVVVEEEEDDDD WWWWOOOORRRRDDDDSSSS
     _R_e_s_e_r_v_e_d _w_o_r_d_s are words that have a special meaning to  the
     shell.   The following words are recognized as reserved when
     unquoted and either the first word of a simple command  (see
     SSSSHHHHEEEELLLLLLLL GGGGRRRRAAAAMMMMMMMMAAAARRRR below) or the third word of a ccccaaaasssseeee or ffffoooorrrr com-
     mand:



GNU                Last change: 1993 August 9                   2






BASH(1)                  USER COMMANDS                    BASH(1)



     !!!! ccccaaaasssseeee  ddddoooo ddddoooonnnneeee eeeelllliiiiffff eeeellllsssseeee eeeessssaaaacccc ffffiiii ffffoooorrrr ffffuuuunnnnccccttttiiiioooonnnn  iiiiffff  iiiinnnn  tttthhhheeeennnn
     uuuunnnnttttiiiillll wwwwhhhhiiiilllleeee {{{{ }}}}

SSSSHHHHEEEELLLLLLLL GGGGRRRRAAAAMMMMMMMMAAAARRRR
  SSSSiiiimmmmpppplllleeee CCCCoooommmmmmmmaaaannnnddddssss
     A _s_i_m_p_l_e _c_o_m_m_a_n_d is a sequence of optional variable  assign-
     ments  followed  by  _b_l_a_n_k-separated words and redirections,
     and terminated by a _c_o_n_t_r_o_l _o_p_e_r_a_t_o_r.  The first word speci-
     fies  the  command  to be executed.  The remaining words are
     passed as arguments to the invoked command.

     The return value of a _s_i_m_p_l_e _c_o_m_m_a_n_d is its exit status,  or
     128+_n if the command is terminated by signal _n.

  PPPPiiiippppeeeelllliiiinnnneeeessss
     A _p_i_p_e_l_i_n_e is a sequence of one or more  commands  separated
     by the character ||||.  The format for a pipeline is:

          [ ! ] _c_o_m_m_a_n_d [ |||| _c_o_m_m_a_n_d_2 ... ]

     The standard output of _c_o_m_m_a_n_d is connected to the  standard
     input  of _c_o_m_m_a_n_d_2.  This connection is performed before any
     redirections  specified  by  the  command  (see  RRRREEEEDDDDIIIIRRRREEEECCCCTTTTIIIIOOOONNNN
     below).

     If the reserved word !!!! precedes a pipeline, the exit  status
     of  that  pipeline  is the logical NOT of the exit status of
     the last command.  Otherwise, the status of the pipeline  is
     the  exit  status  of the last command.  The shell waits for
     all commands in the pipeline to terminate before returning a
     value.

     Each command in a pipeline is executed as a separate process
     (i.e., in a subshell).

  LLLLiiiissssttttssss
     A _l_i_s_t is a sequence of one or more pipelines  separated  by
     one  of the operators ;;;;, &&&&, &&&&&&&&, or ||||||||, and terminated by one
     of ;;;;, &&&&, or <<<<nnnneeeewwwwlllliiiinnnneeee>>>>.

     Of these list operators, &&&&&&&& and |||||||| have  equal  precendence,
     followed by ;;;; and &&&&,,,, which have equal precedence.

     If a command is terminated by the control  operator  &&&&,  the
     shell  executes the command in the _b_a_c_k_g_r_o_u_n_d in a subshell.
     The shell does not wait for the command to finish,  and  the
     return  status is 0.  Commands separated by a ;;;; are executed
     sequentially; the shell waits for each command to  terminate
     in  turn.   The return status is the exit status of the last
     command executed.





GNU                Last change: 1993 August 9                   3






BASH(1)                  USER COMMANDS                    BASH(1)



     The control operators &&&&&&&& and ||||||||  denote  AND  lists  and  OR
     lists, respectively.  An AND list has the form

          _c_o_m_m_a_n_d &&&&&&&& _c_o_m_m_a_n_d_2

     _c_o_m_m_a_n_d_2 is executed if, and only  if,  _c_o_m_m_a_n_d  returns  an
     exit status of zero.

     An OR list has the form

          _c_o_m_m_a_n_d |||||||| _c_o_m_m_a_n_d_2

     _c_o_m_m_a_n_d_2 is executed if and only if _c_o_m_m_a_n_d returns  a  non-
     zero  exit status.  The return status of AND and OR lists is
     the exit status of the last command executed in the list.

  CCCCoooommmmppppoooouuuunnnndddd CCCCoooommmmmmmmaaaannnnddddssss
     A _c_o_m_p_o_u_n_d _c_o_m_m_a_n_d is one of the following:

     (_l_i_s_t)
          _l_i_s_t is executed in a subshell.   Variable  assignments
          and  builtin  commands that affect the shell's environ-
          ment do not remain in effect  after  the  command  com-
          pletes.  The return status is the exit status of _l_i_s_t.

     { _l_i_s_t; }
          _l_i_s_t is simply executed in the current  shell  environ-
          ment.   This  is  known as a _g_r_o_u_p _c_o_m_m_a_n_d.  The return
          status is the exit status of _l_i_s_t.

     ffffoooorrrr _n_a_m_e [ iiiinnnn _w_o_r_d; ] ddddoooo _l_i_s_t ; ddddoooonnnneeee
          The list of words following iiiinnnn is expanded,  generating
          a list of items.  The variable _n_a_m_e is set to each ele-
          ment of this list in turn, and _l_i_s_t  is  executed  each
          time.   If the iiiinnnn _w_o_r_d is omitted, the ffffoooorrrr command exe-
          cutes _l_i_s_t once for each positional parameter  that  is
          set  (see  PPPPAAAARRRRAAAAMMMMEEEETTTTEEEERRRRSSSS  below).   The exit status is the
          exit status of the last command, or zero if no commands
          were executed.

     ccccaaaasssseeee _w_o_r_d iiiinnnn [ _p_a_t_t_e_r_n [ |||| _p_a_t_t_e_r_n ] ... ) _l_i_s_t ;; ] ... eeeessssaaaacccc
          A  ccccaaaasssseeee  command first expands _w_o_r_d, and tries to match
          it against each _p_a_t_t_e_r_n in turn, using the same  match-
          ing  rules  as  for  pathname  expansion  (see PPPPaaaatttthhhhnnnnaaaammmmeeee
          EEEExxxxppppaaaannnnssssiiiioooonnnn  below).   When  a  match   is   found,   the
          corresponding _l_i_s_t is executed.  After the first match,
          no subsequent matches are attempted.  The  exit  status
          is  zero  if no patterns are matches.  Otherwise, it is
          the exit status of the last command executed in _l_i_s_t.

     iiiiffff _l_i_s_t tttthhhheeeennnn _l_i_s_t [ eeeelllliiiiffff _l_i_s_t tttthhhheeeennnn _l_i_s_t ] ... [ eeeellllsssseeee _l_i_s_t ] ffffiiii
          The  iiiiffff  _l_i_s_t is executed.  If its exit status is zero,



GNU                Last change: 1993 August 9                   4






BASH(1)                  USER COMMANDS                    BASH(1)



          the tttthhhheeeennnn _l_i_s_t is executed.  Otherwise, each  eeeelllliiiiffff  _l_i_s_t
          is  executed  in  turn, and if its exit status is zero,
          the corresponding tttthhhheeeennnn _l_i_s_t is executed and the command
          completes.   Otherwise,  the  eeeellllsssseeee _l_i_s_t is executed, if
          present.  The exit status is the  exit  status  of  the
          last  command  executed, or zero if no condition tested
          true.

     wwwwhhhhiiiilllleeee _l_i_s_t ddddoooo _l_i_s_t ddddoooonnnneeee
     uuuunnnnttttiiiillll _l_i_s_t ddddoooo _l_i_s_t ddddoooonnnneeee
          The wwwwhhhhiiiilllleeee command continuously executes the ddddoooo _l_i_s_t  as
          long as the last command in _l_i_s_t returns an exit status
          of zero.  The uuuunnnnttttiiiillll command is identical to  the  wwwwhhhhiiiilllleeee
          command,  except  that the test is negated; the ddddoooo _l_i_s_t
          is executed as long as the last command in _l_i_s_t returns
          a  non-zero  exit status.  The exit status of the wwwwhhhhiiiilllleeee
          and uuuunnnnttttiiiillll commands is the exit status of  the  last  ddddoooo
          _l_i_s_t command executed, or zero if none was executed.

     [ ffffuuuunnnnccccttttiiiioooonnnn ] _n_a_m_e () { _l_i_s_t; }
          This defines a function named _n_a_m_e.  The  _b_o_d_y  of  the
          function is the _l_i_s_t of commands between { and }.  This
          list is executed whenever _n_a_m_e is specified as the name
          of  a simple command.  The exit status of a function is
          the exit status of the last  command  executed  in  the
          body.  (See FFFFUUUUNNNNCCCCTTTTIIIIOOOONNNNSSSS below.)

CCCCOOOOMMMMMMMMEEEENNNNTTTTSSSS
     In a non-interactive shell, or an interactive shell in which
     the  ----oooo  iiiinnnntttteeeerrrraaaaccccttttiiiivvvveeee----ccccoooommmmmmmmeeeennnnttttssss  option  to the sssseeeetttt builtin is
     enabled, a word beginning with #### causes that  word  and  all
     remaining  characters  on  that  line  to  be  ignored.   An
     interactive shell without the ----oooo iiiinnnntttteeeerrrraaaaccccttttiiiivvvveeee----ccccoooommmmmmmmeeeennnnttttssss option
     enabled does not allow comments.

QQQQUUUUOOOOTTTTIIIINNNNGGGG
     _Q_u_o_t_i_n_g is used to remove the  special  meaning  of  certain
     characters  or  words  to the shell.  Quoting can be used to
     disable special treatment for special characters, to prevent
     reserved words from being recognized as such, and to prevent
     parameter expansion.

     Each of the _m_e_t_a_c_h_a_r_a_c_t_e_r_s listed  above  under  DDDDEEEEFFFFIIIINNNNIIIITTTTIIIIOOOONNNNSSSS
     has  special meaning to the shell and must be quoted if they
     are  to  represent  themselves.   There  are  three  quoting
     mechanisms:  the _e_s_c_a_p_e _c_h_a_r_a_c_t_e_r, single quotes, and double
     quotes.

     A non-quoted backslash (\\\\)  is  the  _e_s_c_a_p_e  _c_h_a_r_a_c_t_e_r.   It
     preserves  the literal value of the next character that fol-
     lows, with the exception of <newline>.  If a \\\\<newline> pair
     appears,  and the backslash is not quoted, the \\\\<newline> is



GNU                Last change: 1993 August 9                   5






BASH(1)                  USER COMMANDS                    BASH(1)



     treated as a line continuation (that is, it  is  effectively
     ignored).

     Enclosing characters in single quotes preserves the  literal
     value  of  each character within the quotes.  A single quote
     may not occur between single quotes, even when preceded by a
     backslash.

     Enclosing characters in double quotes preserves the  literal
     value  of  all characters within the quotes, with the excep-
     tion of $$$$, ````, and \\\\.  The characters $$$$ and  ````  retain  their
     special meaning within double quotes.  The backslash retains
     its special meaning only when followed by one of the follow-
     ing  characters:   $$$$, ````, """", \\\\, or <<<<nnnneeeewwwwlllliiiinnnneeee>>>>.  A double quote
     may be quoted within double quotes by preceding  it  with  a
     backslash.

     The special parameters **** and @@@@ have special meaning when  in
     double quotes (see PPPPAAAARRRRAAAAMMMMEEEETTTTEEEERRRRSSSS below).

PPPPAAAARRRRAAAAMMMMEEEETTTTEEEERRRRSSSS
     A _p_a_r_a_m_e_t_e_r is an entity that stores values, somewhat like a
     variable  in a conventional programming language.  It can be
     a _n_a_m_e, a number, or one of the  special  characters  listed
     below under SSSSppppeeeecccciiiiaaaallll PPPPaaaarrrraaaammmmeeeetttteeeerrrrssss.  For the shell's purposes, a
     _v_a_r_i_a_b_l_e is a parameter denoted by a _n_a_m_e.

     A parameter is set if it has been  assigned  a  value.   The
     null  string  is  a valid value.  Once a variable is set, it
     may be unset only by using the uuuunnnnsssseeeetttt  builtin  command  (see
     SSSSHHHHEEEELLLLLLLL BBBBUUUUIIIILLLLTTTTIIIINNNN CCCCOOOOMMMMMMMMAAAANNNNDDDDSSSS below).

     A _v_a_r_i_a_b_l_e may be assigned to by a statement of the form

          _n_a_m_e=[_v_a_l_u_e]

     If _v_a_l_u_e is not given, the variable  is  assigned  the  null
     string.   All  _v_a_l_u_e_s undergo tilde expansion, parameter and
     variable expansion, command substitution, arithmetic  expan-
     sion,  and quote removal.  If the variable has its ----iiii attri-
     bute set (see ddddeeeeccccllllaaaarrrreeee below in SSSSHHHHEEEELLLLLLLL BBBBUUUUIIIILLLLTTTTIIIINNNN CCCCOOOOMMMMMMMMAAAANNNNDDDDSSSS)  then
     _v_a_l_u_e  is subject to arithmetic expansion even if the $[...]
     syntax does not appear.  Word splitting  is  not  performed,
     with  the exception of """"$$$$@@@@"""" as explained below under SSSSppppeeeecccciiiiaaaallll
     PPPPaaaarrrraaaammmmeeeetttteeeerrrrssss.  Pathname expansion is not performed.

  PPPPoooossssiiiittttiiiioooonnnnaaaallll PPPPaaaarrrraaaammmmeeeetttteeeerrrrssss
     A _p_o_s_i_t_i_o_n_a_l _p_a_r_a_m_e_t_e_r is a parameter denoted by one or more
     digits,  other  than the single digit 0.  Positional parame-
     ters are assigned from the  shell's  arguments  when  it  is
     invoked,  and  may  be reassigned using the sssseeeetttt builtin com-
     mand.  Positional parameters may not  be  assigned  to  with



GNU                Last change: 1993 August 9                   6






BASH(1)                  USER COMMANDS                    BASH(1)



     assignment  statements.   The positional parameters are tem-
     porarily replaced when a shell  function  is  executed  (see
     FFFFUUUUNNNNCCCCTTTTIIIIOOOONNNNSSSS below).

     When a positional parameter consisting of more than a single
     digit is expanded, it must be enclosed in braces (see EEEEXXXXPPPPAAAANNNN----
     SSSSIIIIOOOONNNN below).

  SSSSppppeeeecccciiiiaaaallll PPPPaaaarrrraaaammmmeeeetttteeeerrrrssss
     The shell treats several parameters specially.  These param-
     eters  may  only  be  referenced;  assignment to them is not
     allowed.
     ****    Expands to the  positional  parameters,  starting  from
          one.   When  the expansion occurs within double quotes,
          it expands to a single word  with  the  value  of  each
          parameter  separated  by the first character of the IIIIFFFFSSSS
          special variable.  That is,  ``$$$$****''  is  equivalent  to
          ``$$$$1111_c$$$$2222_c............'',  where  _c  is the first character of the
          value of the IIIIFFFFSSSS variable.  If IIIIFFFFSSSS is  null  or  unset,
          the parameters are separated by spaces.
     @@@@    Expands to the  positional  parameters,  starting  from
          one.   When  the expansion occurs within double quotes,
          each parameter expands as a separate word.  That is, ``
          $$$$@@@@'' is equivalent to ``$$$$1111'' ``$$$$2222'' ...  When there are
          no positional parameters, ``$$$$@@@@'' and $$$$@@@@ expand to noth-
          ing (i.e., they are removed).
     ####    Expands to  the  number  of  positional  parameters  in
          decimal.
     ????    Expands to the status of  the  most  recently  executed
          foreground pipeline.
     ----    Expands to the current option flags as  specified  upon
          invocation, by the sssseeeetttt builtin command, or those set by
          the shell itself (such as the ----iiii flag).
     $$$$    Expands to the process ID of the shell.  In a  ()  sub-
          shell,  it  expands  to  the  process ID of the current
          shell, not the subshell.
     !!!!    Expands to the process ID of the most recently executed
          background (asynchronous) command.
     0000    Expands to the name of the shell or shell script.  This
          is  set  at  shell  initialization.  If bbbbaaaasssshhhh is invoked
          with a file of commands, $$$$0000 is set to the name of  that
          file.   Otherwise,  it  is  set to the pathname used to
          invoke bbbbaaaasssshhhh, as given by argument zero.
     ____    Expands to the last argument to the  previous  command,
          after expansion.  Also set to the full pathname of each
          command executed and placed in the environment exported
          to that command.

  SSSShhhheeeellllllll VVVVaaaarrrriiiiaaaabbbblllleeeessss
     The following variables are set by the shell:





GNU                Last change: 1993 August 9                   7






BASH(1)                  USER COMMANDS                    BASH(1)



     PPPPPPPPIIIIDDDD The process ID of the shell's parent.
     PPPPWWWWDDDD  The current working directory as set by the ccccdddd command.
     OOOOLLLLDDDDPPPPWWWWDDDD
          The previous working directory as set by  the  ccccdddd  com-
          mand.
     RRRREEEEPPPPLLLLYYYY
          Set to the line of input read by the rrrreeeeaaaadddd builtin  com-
          mand when no arguments are supplied.
     UUUUIIIIDDDD  Expands to the user ID of the current user, initialized
          at shell startup.
     EEEEUUUUIIIIDDDD Expands to the effective user ID of the  current  user,
          initialized at shell startup.
     BBBBAAAASSSSHHHH Expands to  the  full  pathname  used  to  invoke  this
          instance of bbbbaaaasssshhhh.
     BBBBAAAASSSSHHHH____VVVVEEEERRRRSSSSIIIIOOOONNNN
          Expands to the version number of this instance of bbbbaaaasssshhhh.
     SSSSHHHHLLLLVVVVLLLL
          Incremented by one each time an  instance  of  bbbbaaaasssshhhh  is
          started.
     RRRRAAAANNNNDDDDOOOOMMMM
          Each  time  this  parameter  is  referenced,  a  random
          integer  is  generated.  The sequence of random numbers
          may be initialized by assigning a value to RRRRAAAANNNNDDDDOOOOMMMM.   If
          RRRRAAAANNNNDDDDOOOOMMMM  is unset, it loses its special properties, even
          if it is subsequently reset.
     SSSSEEEECCCCOOOONNNNDDDDSSSS
          Each time this parameter is referenced, the  number  of
          seconds since shell invocation is returned.  If a value
          is assigned to SSSSEEEECCCCOOOONNNNDDDDSSSS, the value returned upon  subse-
          quent  references  is  the  number of seconds since the
          assignment plus the  value  assigned.   If  SSSSEEEECCCCOOOONNNNDDDDSSSS  is
          unset,  it  loses its special properties, even if it is
          subsequently reset.
     LLLLIIIINNNNEEEENNNNOOOO
          Each time this parameter is referenced, the shell  sub-
          stitutes  a  decimal  number  representing  the current
          sequential line  number  (starting  with  1)  within  a
          script  or function.  When not in a script or function,
          the value substituted is not guaranteed to be  meaning-
          ful.   When  in a function, the value is not the number
          of the source line that the command  appears  on  (that
          information  has  been lost by the time the function is
          executed), but is an approximation  of  the  number  of
          _s_i_m_p_l_e  _c_o_m_m_a_n_d_s  executed in the current function.  If
          LLLLIIIINNNNEEEENNNNOOOO is unset, it loses its special properties,  even
          if it is subsequently reset.
     OOOOPPPPTTTTAAAARRRRGGGG
          The value of the last option argument processed by  the
          ggggeeeettttooooppppttttssss  builtin  command  (see  SSSSHHHHEEEELLLLLLLL BBBBUUUUIIIILLLLTTTTIIIINNNN CCCCOOOOMMMMMMMMAAAANNNNDDDDSSSS
          below).
     OOOOPPPPTTTTIIIINNNNDDDD
          The index of the last option processed by  the  ggggeeeettttooooppppttttssss



GNU                Last change: 1993 August 9                   8






BASH(1)                  USER COMMANDS                    BASH(1)



          builtin command (see SSSSHHHHEEEELLLLLLLL BBBBUUUUIIIILLLLTTTTIIIINNNN CCCCOOOOMMMMMMMMAAAANNNNDDDDSSSS below).

     The following variables are used  by  the  shell.   In  some
     cases,  bbbbaaaasssshhhh  assigns  a  default value to a variable; these
     cases are noted below.

     IIIIFFFFSSSS  The _I_n_t_e_r_n_a_l _F_i_e_l_d _S_e_p_a_r_a_t_o_r  that  is  used  for  word
          splitting after expansion and to split lines into words
          with the rrrreeeeaaaadddd builtin command.  The  default  value  is
          ``<space><tab><newline>''.
     PPPPAAAATTTTHHHH The search path for commands.  It is a  colon-separated
          list  of  directories in which the shell looks for com-
          mands (see CCCCOOOOMMMMMMMMAAAANNNNDDDD EEEEXXXXEEEECCCCUUUUTTTTIIIIOOOONNNN below).  The default  path
          is  system-dependent,  and  is set by the administrator
          who    installs    bbbbaaaasssshhhh.     A    common    value    is
          ``.:/usr/gnu/bin:/usr/local/bin:/usr/ucb:/bin:/usr/bin:/etc:/usr/etc''.
          Note that in some circumstances, however, a leading `.'
          in PPPPAAAATTTTHHHH can be a security hazard.
     HHHHOOOOMMMMEEEE The home directory of the  current  user;  the  default
          argument for the ccccdddd builtin command.
     CCCCDDDDPPPPAAAATTTTHHHH
          The search path for the ccccdddd command.  This is  a  colon-
          separated  list of directories in which the shell looks
          for destination directories specified by  the  ccccdddd  com-
          mand.  A sample value is ``.:~:/usr''.
     EEEENNNNVVVV  If this parameter is set when bbbbaaaasssshhhh is executing a shell
          script, its value is interpreted as a filename contain-
          ing commands to initialize the shell,  as  in  ._b_a_s_h_r_c.
          The  value  of EEEENNNNVVVV is subjected to parameter expansion,
          command substitution, and arithmetic  expansion  before
          being  interpreted  as a pathname.  PPPPAAAATTTTHHHH is not used to
          search for the resultant pathname.
     MMMMAAAAIIIILLLL If this parameter is set to a filename and the MMMMAAAAIIIILLLLPPPPAAAATTTTHHHH
          variable  is  not  set,  bbbbaaaasssshhhh  informs  the user of the
          arrival of mail in the specified file.
     MMMMAAAAIIIILLLLCCCCHHHHEEEECCCCKKKK
          Specifies how often (in seconds) bbbbaaaasssshhhh checks for  mail.
          The  default  is  60 seconds.  When it is time to check
          for mail, the shell does so before prompting.  If  this
          variable is unset, the shell disables mail checking.
     MMMMAAAAIIIILLLLPPPPAAAATTTTHHHH
          A colon-separated list of pathnames to be  checked  for
          mail.  The  message  to  be printed may be specified by
          separating the pathname from the message  with  a  `?'.
          $_  stands  for the name of the current mailfile. Exam-
          ple:
          MMMMAAAAIIIILLLLPPPPAAAATTTTHHHH='/usr/spool/mail/bfox?"You                have
          mail":~/shell-mail?"$_ has mail!"'
          BBBBaaaasssshhhh supplies a default value for  this  variable,  but
          the  location  of  the  user mail files that it uses is
          system dependent (e.g., /usr/spool/mail/$$$$UUUUSSSSEEEERRRR).
     MMMMAAAAIIIILLLL____WWWWAAAARRRRNNNNIIIINNNNGGGG



GNU                Last change: 1993 August 9                   9






BASH(1)                  USER COMMANDS                    BASH(1)



          If set, and a file that bbbbaaaasssshhhh is checking for  mail  has
          been  accessed  since the last time it was checked, the
          message ``The mail  in  _m_a_i_l_f_i_l_e  has  been  read''  is
          printed.
     PPPPSSSS1111  The value of this parameter is expanded (see  PPPPRRRROOOOMMMMPPPPTTTTIIIINNNNGGGG
          below)  and  used  as  the  primary prompt string.  The
          default value is ``bbbbaaaasssshhhh\\\\$$$$ ''.
     PPPPSSSS2222  The value of this parameter is expanded  like  PPPPSSSS1111  and
          used  as  the  secondary prompt string.  The default is
          ``>>>> ''.
     PPPPSSSS4444  The value of this parameter is expanded  like  PPPPSSSS1111  and
          the  value is printed before each command bbbbaaaasssshhhh displays
          during an execution trace.  The first character of  PPPPSSSS4444
          is replicated multiple times, as necessary, to indicate
          multiple levels of indirection.  The default is ``++++ ''.
     NNNNOOOO____PPPPRRRROOOOMMMMPPPPTTTT____VVVVAAAARRRRSSSS
          If set,  a  decoded  prompt  string  does  not  undergo
          further expansion (see PPPPRRRROOOOMMMMPPPPTTTTIIIINNNNGGGG below).
     HHHHIIIISSSSTTTTSSSSIIIIZZZZEEEE
          The number of commands to remember in the command  his-
          tory (see HHHHIIIISSSSTTTTOOOORRRRYYYY below).  The default value is 500.
     HHHHIIIISSSSTTTTFFFFIIIILLLLEEEE
          The name of the file in which command history is saved.
          (See    HHHHIIIISSSSTTTTOOOORRRRYYYY   below.)    The   default   value   is
          ~/._b_a_s_h__h_i_s_t_o_r_y.  If unset, the command history is  not
          saved when an interactive shell exits.
     HHHHIIIISSSSTTTTFFFFIIIILLLLEEEESSSSIIIIZZZZEEEE
          The maximum number of lines contained  in  the  history
          file.  When this variable is assigned a value, the his-
          tory file is truncated, if  necessary,  to  contain  no
          more  than  that number of lines.  The default value is
          500.
     OOOOPPPPTTTTEEEERRRRRRRR
          If set to the value 1,  bbbbaaaasssshhhh  displays  error  messages
          generated  by  the  ggggeeeettttooooppppttttssss  builtin command (see SSSSHHHHEEEELLLLLLLL
          BBBBUUUUIIIILLLLTTTTIIIINNNN CCCCOOOOMMMMMMMMAAAANNNNDDDDSSSS below).  OOOOPPPPTTTTEEEERRRRRRRR is  initialized  to  1
          each  time  the  shell  is invoked or a shell script is
          executed.
     PPPPRRRROOOOMMMMPPPPTTTT____CCCCOOOOMMMMMMMMAAAANNNNDDDD
          If set, the value is executed as  a  command  prior  to
          issuing each primary prompt.
     IIIIGGGGNNNNOOOORRRREEEEEEEEOOOOFFFF
     iiiiggggnnnnoooorrrreeeeeeeeooooffff
          Controls the action of the shell on receipt of  an  EEEEOOOOFFFF
          character  as the sole input.  If set, the value is the
          number of consecutive EEEEOOOOFFFF characters typed before  bbbbaaaasssshhhh
          exits.   If  the  variable  exists  but does not have a
          numeric value, or has no value, the  default  value  is
          10.   If  it  does  not exist, EEEEOOOOFFFF signifies the end of
          input to  the  shell.   This  is  only  in  effect  for
          interactive shells.
     HHHHOOOOSSSSTTTTTTTTYYYYPPPPEEEE



GNU                Last change: 1993 August 9                  10






BASH(1)                  USER COMMANDS                    BASH(1)



          Automatically set to a string that  uniquely  describes
          the  type  of  machine on which bbbbaaaasssshhhh is executing.  The
          default is system-dependent.
     TTTTMMMMOOOOUUUUTTTT
          If set to a value  greater  than  zero,  the  value  is
          interpreted  as the number of seconds to wait for input
          after issuing  the  primary  prompt.   BBBBaaaasssshhhh  terminates
          after  waiting for that number of seconds if input does
          not arrive.
     FFFFCCCCEEEEDDDDIIIITTTT
          The default editor for the ffffcccc builtin command.
     FFFFIIIIGGGGNNNNOOOORRRREEEE
          A colon-separated list of suffixes to ignore when  per-
          forming  filename  completion  (see RRRREEEEAAAADDDDLLLLIIIINNNNEEEE below).  A
          filename whose suffix matches one  of  the  entries  in
          FFFFIIIIGGGGNNNNOOOORRRREEEE is excluded from the list of matched filenames.
          A sample value is ``.o:~''.
     nnnnoooottttiiiiffffyyyy
          If set, bbbbaaaasssshhhh reports terminated background jobs immedi-
          ately,  rather  than  waiting until before printing the
          next primary prompt (see also the ----bbbb option to the  sssseeeetttt
          builtin command).
     hhhhiiiissssttttoooorrrryyyy____ccccoooonnnnttttrrrroooollll
          If set to a value of  _i_g_n_o_r_e_s_p_a_c_e,  lines  which  begin
          with a <<<<ssssppppaaaacccceeee>>>> are not entered on the history list.  If
          set to a value of _i_g_n_o_r_e_d_u_p_s, lines matching  the  last
          history  line  are not entered.  If unset, or if set to
          any other value than those above, all lines read by the
          parser are saved on the history list.
     ccccoooommmmmmmmaaaannnndddd____oooorrrriiiieeeennnntttteeeedddd____hhhhiiiissssttttoooorrrryyyy
          If  set,  bbbbaaaasssshhhh  attempts  to  save  all  lines   of   a
          multiple-line  command in the same history entry.  This
          allows easy re-editing of multi-line commands.
     gggglllloooobbbb____ddddooootttt____ffffiiiilllleeeennnnaaaammmmeeeessss
          If set, bbbbaaaasssshhhh includes filenames beginning with a `.' in
          the results of pathname expansion.
     aaaalllllllloooowwww____nnnnuuuullllllll____gggglllloooobbbb____eeeexxxxppppaaaannnnssssiiiioooonnnn
          If set, bbbbaaaasssshhhh allows pathname patterns  which  match  no
          files  (see  PPPPaaaatttthhhhnnnnaaaammmmeeee  EEEExxxxppppaaaannnnssssiiiioooonnnn  below) to expand to a
          null string, rather than themselves.
     hhhhiiiissssttttcccchhhhaaaarrrrssss
          The two  or  three  characters  which  control  history
          expansion   and  tokenization  (see  HHHHIIIISSSSTTTTOOOORRRRYYYY  EEEEXXXXPPPPAAAANNNNSSSSIIIIOOOONNNN
          below).  The first character is the  _h_i_s_t_o_r_y  _e_x_p_a_n_s_i_o_n
          _c_h_a_r_a_c_t_e_r,  that  is,  the  character which signals the
          start of a history expansion, normally `!!!!'.  The second
          character is the _q_u_i_c_k _s_u_b_s_t_i_t_u_t_i_o_n character, which is
          used as shorthand for re-running the  previous  command
          entered,  substituting  one  string  for another in the
          command.  The default is `^^^^'.  The optional third char-
          acter   is  the  character  which  signifies  that  the
          remainder of the line is a comment, when found  as  the



GNU                Last change: 1993 August 9                  11






BASH(1)                  USER COMMANDS                    BASH(1)



          first  character  of a word, normally `####'.  The history
          comment character causes  history  substitution  to  be
          skipped  for  the remaining words on the line.  It does
          not necessarily cause the shell  parser  to  treat  the
          rest of the line as a comment.
     nnnnoooolllliiiinnnnkkkkssss
          If set, the shell does not follow symbolic  links  when
          executing  commands  that  change  the  current working
          directory.  It uses the  physical  directory  structure
          instead.  By default, bbbbaaaasssshhhh follows the logical chain of
          directories when performing commands such as ccccdddd.
     hhhhoooossssttttnnnnaaaammmmeeee____ccccoooommmmpppplllleeeettttiiiioooonnnn____ffffiiiilllleeee
          Contains the name of a  file  in  the  same  format  as
          /_e_t_c/_h_o_s_t_s  that should be read when the shell needs to
          complete a hostname.  You can change the file  interac-
          tively;  the  next time you want to complete a hostname
          bbbbaaaasssshhhh adds the contents of the new file to  the  already
          existing database.
     nnnnoooocccclllloooobbbbbbbbeeeerrrr
          If set, bbbbaaaasssshhhh does not overwrite an existing  file  with
          the >>>>, >>>>&&&&, and <<<<>>>> redirection operators.  This variable
          may be overridden when creating output files  by  using
          the  redirection operator >>>>|||| instead of >>>> (see also the
          ----CCCC option to the sssseeeetttt builtin command).
     aaaauuuuttttoooo____rrrreeeessssuuuummmmeeee
          This variable controls how the shell interacts with the
          user  and job control.  If this variable is set, single
          word simple commands without redirections  are  treated
          as  candidates  for  resumption  of an existing stopped
          job.  There is no ambiguity allowed; if there  is  more
          than  one  job beginning with the string typed, the job
          most recently accessed is selected.
     nnnnoooo____eeeexxxxiiiitttt____oooonnnn____ffffaaaaiiiilllleeeedddd____eeeexxxxeeeecccc
          If this variable exists, a non-interactive  shell  will
          not exit if it cannot execute the file specified in the
          eeeexxxxeeeecccc builtin command.  An interactive  shell  does  not
          exit if eeeexxxxeeeecccc fails.
     ccccddddaaaabbbblllleeee____vvvvaaaarrrrssss
          If this is set, an argument to the ccccdddd  builtin  command
          that  is not a directory is assumed to be the name of a
          variable whose value is the directory to change to.

EEEEXXXXPPPPAAAANNNNSSSSIIIIOOOONNNN
     Expansion is performed on the command line after it has been
     split  into  words.  There are seven kinds of expansion per-
     formed:  _b_r_a_c_e _e_x_p_a_n_s_i_o_n,  _t_i_l_d_e  _e_x_p_a_n_s_i_o_n,  _p_a_r_a_m_e_t_e_r  _a_n_d
     _v_a_r_i_a_b_l_e  _e_x_p_a_n_s_i_o_n, _c_o_m_m_a_n_d _s_u_b_s_t_i_t_u_t_i_o_n, _a_r_i_t_h_m_e_t_i_c _e_x_p_a_n_-
     _s_i_o_n, _w_o_r_d _s_p_l_i_t_t_i_n_g, and _p_a_t_h_n_a_m_e _e_x_p_a_n_s_i_o_n.

     The order of expansions is: brace  expansion,  tilde  expan-
     sion, parameter, variable, command, and arithmetic substitu-
     tion (done in a left-to-right fashion), word splitting,  and



GNU                Last change: 1993 August 9                  12






BASH(1)                  USER COMMANDS                    BASH(1)



     pathname expansion.

     On systems that can  support  it,  there  is  an  additional
     expansion available: _p_r_o_c_e_s_s _s_u_b_s_t_i_t_u_t_i_o_n.

     Only brace expansion, word splitting, and pathname expansion
     can  change  the  number  of  words  of the expansion; other
     expansions expand a single word to a single word.  The  sin-
     gle  exception  to  this  is  the  expansion  of  ``$$$$@@@@''  as
     explained above (see PPPPAAAARRRRAAAAMMMMEEEETTTTEEEERRRRSSSS).

  BBBBrrrraaaacccceeee EEEExxxxppppaaaannnnssssiiiioooonnnn
     _B_r_a_c_e _e_x_p_a_n_s_i_o_n is a mechanism by  which  arbitrary  strings
     may  be  generated.   This  mechanism is similar to _p_a_t_h_n_a_m_e
     _e_x_p_a_n_s_i_o_n, but the filenames generated need not exist.  Pat-
     terns  to  be  brace  expanded  take the form of an optional
     _p_r_e_a_m_b_l_e, followed by a series  of  comma-separated  strings
     between a pair of braces, followed by an optional _p_o_s_t_a_m_b_l_e.
     The preamble is prepended to each  string  contained  within
     the  braces,  and  the  postamble  is  then appended to each
     resulting string, expanding left to right.

     Brace  expansions  may  be  nested.   The  results  of  each
     expanded  string  are  not  sorted;  left  to right order is
     preserved.  For example, a{{{{d,c,b}}}}e  expands  into  `ade  ace
     abe'.

     Brace expansion is performed before  any  other  expansions,
     and any characters special to other expansions are preserved
     in the result.  It is strictly textual.  BBBBaaaasssshhhh does not apply
     any syntactic interpretation to the context of the expansion
     or the text between the braces.

     A correctly-formed brace  expansion  must  contain  unquoted
     opening and closing braces, and at least one unquoted comma.
     Any incorrectly formed brace expansion is left unchanged.

     This construct is typically used as shorthand when the  com-
     mon  prefix of the strings to be generated is longer than in
     the above example:

          mkdir /usr/local/src/bash/{old,new,dist,bugs}
     or
          chown root /usr/{ucb/{ex,edit},lib/{ex?.?*,how_ex}}

     Brace expansion introduces  a  slight  incompatibility  with
     traditional  versions  of sssshhhh, the Bourne shell.  sssshhhh does not
     treat opening or closing braces specially when  they  appear
     as  part  of a word, and preserves them in the output.  BBBBaaaasssshhhh
     removes braces from words as a consequence of  brace  expan-
     sion.   For  example,  a  word  entered  to  sssshhhh as _f_i_l_e{_1,_2}
     appears identically in the output.  The same word is  output



GNU                Last change: 1993 August 9                  13






BASH(1)                  USER COMMANDS                    BASH(1)



     as  _f_i_l_e_1 _f_i_l_e_2 after expansion by bbbbaaaasssshhhh.  If strict compati-
     bility with sssshhhh is desired, start bbbbaaaasssshhhh with  the  ----nnnnoooobbbbrrrraaaacccceeeeeeeexxxx----
     ppppaaaannnnssssiiiioooonnnn  flag (see OOOOPPPPTTTTIIIIOOOONNNNSSSS above) or disable brace expansion
     with the ++++oooo bbbbrrrraaaacccceeeeeeeexxxxppppaaaannnndddd option to the sssseeeetttt command (see SSSSHHHHEEEELLLLLLLL
     BBBBUUUUIIIILLLLTTTTIIIINNNN CCCCOOOOMMMMMMMMAAAANNNNDDDDSSSS below).

  TTTTiiiillllddddeeee EEEExxxxppppaaaannnnssssiiiioooonnnn
     If a word begins with a tilde character (`~~~~'),  all  of  the
     characters  preceding the first slash (or all characters, if
     there is no slash) are treated as a possible _l_o_g_i_n _n_a_m_e.  If
     this  _l_o_g_i_n  _n_a_m_e  is the null string, the tilde is replaced
     with the value of the parameter HHHHOOOOMMMMEEEE.  If HHHHOOOOMMMMEEEE is unset, the
     home  directory  of  the user executing the shell is substi-
     tuted instead.

     If a `+' follows the tilde, the value of  PPPPWWWWDDDD  replaces  the
     tilde  and  `+'.   If  a `-' follows, the value of OOOOLLLLDDDDPPPPWWWWDDDD is
     substituted.  If the value following the tilde  is  a  valid
     _l_o_g_i_n  _n_a_m_e,  the tilde and _l_o_g_i_n _n_a_m_e are replaced with the
     home directory associated with that name.  If  the  name  is
     invalid,   or   the  tilde  expansion  fails,  the  word  is
     unchanged.

     Each variable assignment is checked for  unquoted  instances
     of tildes following a :::: or ====.  In these cases, tilde substi-
     tution is also performed.  Consequently, one may  use  path-
     names  with  tildes  in  assignments  to PPPPAAAATTTTHHHH, MMMMAAAAIIIILLLLPPPPAAAATTTTHHHH, and
     CCCCDDDDPPPPAAAATTTTHHHH, and the shell assigns the expanded value.

  PPPPaaaarrrraaaammmmeeeetttteeeerrrr EEEExxxxppppaaaannnnssssiiiioooonnnn
     The `$$$$' character introduces  parameter  expansion,  command
     substitution,  or  arithmetic expansion.  The parameter name
     or symbol to be expanded may be enclosed  in  braces,  which
     are  optional  but  serve  to  protect  the  variable  to be
     expanded from  characters  immediately  following  it  which
     could be interpreted as part of the name.

     ${_p_a_r_a_m_e_t_e_r}
          The value of _p_a_r_a_m_e_t_e_r is substituted.  The braces  are
          required  when _p_a_r_a_m_e_t_e_r is a positional parameter with
          more than one digit, or when _p_a_r_a_m_e_t_e_r is followed by a
          character which is not to be interpreted as part of its
          name.

     In each of the cases below, _w_o_r_d is subject to tilde  expan-
     sion,  parameter expansion, command substitution, and arith-
     metic expansion.  BBBBaaaasssshhhh tests for a parameter that  is  unset
     or  null;  omitting  the  colon results in a test only for a
     parameter that is unset.

     ${_p_a_r_a_m_e_t_e_r::::----_w_o_r_d}
          UUUUsssseeee DDDDeeeeffffaaaauuuulllltttt VVVVaaaalllluuuueeeessss.  If _p_a_r_a_m_e_t_e_r is unset or null, the



GNU                Last change: 1993 August 9                  14






BASH(1)                  USER COMMANDS                    BASH(1)



          expansion of _w_o_r_d is substituted.  Otherwise, the value
          of _p_a_r_a_m_e_t_e_r is substituted.
     ${_p_a_r_a_m_e_t_e_r::::====_w_o_r_d}
          AAAAssssssssiiiiggggnnnn DDDDeeeeffffaaaauuuulllltttt VVVVaaaalllluuuueeeessss.  If _p_a_r_a_m_e_t_e_r is unset or  null,
          the  expansion  of  _w_o_r_d is assigned to _p_a_r_a_m_e_t_e_r.  The
          value of _p_a_r_a_m_e_t_e_r  is  then  substituted.   Positional
          parameters  and  special parameters may not be assigned
          to in this way.
     ${_p_a_r_a_m_e_t_e_r::::????_w_o_r_d}
          DDDDiiiissssppppllllaaaayyyy EEEErrrrrrrroooorrrr iiiiffff NNNNuuuullllllll oooorrrr UUUUnnnnsssseeeetttt.  If _p_a_r_a_m_e_t_e_r  is  null
          or  unset,  the expansion of _w_o_r_d (or a message to that
          effect if _w_o_r_d is not present) is written to the  stan-
          dard  error  and  the  shell, if it is not interactive,
          exits.  Otherwise, the value of  _p_a_r_a_m_e_t_e_r  is  substi-
          tuted.
     ${_p_a_r_a_m_e_t_e_r::::++++_w_o_r_d}
          UUUUsssseeee AAAAlllltttteeeerrrrnnnnaaaatttteeee VVVVaaaalllluuuueeee.  If _p_a_r_a_m_e_t_e_r is  null  or  unset,
          nothing is substituted, otherwise the expansion of _w_o_r_d
          is substituted.
     ${####_p_a_r_a_m_e_t_e_r}
          The length in characters of the value of  _p_a_r_a_m_e_t_e_r  is
          substituted.   If  _p_a_r_a_m_e_t_e_r is **** or @@@@, the length sub-
          stituted is the length  of  ****  expanded  within  double
          quotes.
     ${_p_a_r_a_m_e_t_e_r####_w_o_r_d}
     ${_p_a_r_a_m_e_t_e_r########_w_o_r_d}
          The _w_o_r_d is expanded to produce a pattern  just  as  in
          pathname  expansion.  If the pattern matches the begin-
          ning of the value of _p_a_r_a_m_e_t_e_r, then the  expansion  is
          the  value of _p_a_r_a_m_e_t_e_r with the shortest matching pat-
          tern deleted (the ``####'' case) or the  longest  matching
          pattern deleted (the ``########'' case).

     ${_p_a_r_a_m_e_t_e_r%%%%_w_o_r_d}
     ${_p_a_r_a_m_e_t_e_r%%%%%%%%_w_o_r_d}
          The _w_o_r_d is expanded to produce a pattern  just  as  in
          pathname  expansion.  If the pattern matches a trailing
          portion of the value of _p_a_r_a_m_e_t_e_r, then  the  expansion
          is  the  value  of _p_a_r_a_m_e_t_e_r with the shortest matching
          pattern deleted (the ``%%%%'' case) or the longest  match-
          ing pattern deleted (the ``%%%%%%%%'' case).

  CCCCoooommmmmmmmaaaannnndddd SSSSuuuubbbbssssttttiiiittttuuuuttttiiiioooonnnn
     _C_o_m_m_a_n_d _s_u_b_s_t_i_t_u_t_i_o_n allows  the  output  of  a  command  to
     replace the command name.  There are two forms:

          $$$$((((_c_o_m_m_a_n_d))))
     or
          ````_c_o_m_m_a_n_d````

     BBBBaaaasssshhhh performs the expansion by executing _c_o_m_m_a_n_d and replac-
     ing the command substitution with the standard output of the



GNU                Last change: 1993 August 9                  15






BASH(1)                  USER COMMANDS                    BASH(1)



     command, with any trailing newlines deleted.

     When the old-style backquote form of substitution  is  used,
     backslash  retains  its literal meaning except when followed
     by $$$$, ````, or \\\\.  When using the $(_c_o_m_m_a_n_d) form, all  charac-
     ters  between  the parentheses make up the command; none are
     treated specially.

     Command substitutions may be nested.  To nest when using the
     old form, escape the inner backquotes with backslashes.

     If the  substitution  appears  within  double  quotes,  word
     splitting  and  pathname  expansion are not performed on the
     results.

  AAAArrrriiiitttthhhhmmmmeeeettttiiiicccc EEEExxxxppppaaaannnnssssiiiioooonnnn
     Arithmetic expansion allows the evaluation of an  arithmetic
     expression  and  the substitution of the result.  The format
     for arithmetic expansion is:

          $$$$[[[[_e_x_p_r_e_s_s_i_o_n]]]]

     The _e_x_p_r_e_s_s_i_o_n is  treated  as  if  it  were  within  double
     quotes,  but a double quote inside the braces is not treated
     specially.  All tokens in the expression  undergo  parameter
     expansion,  command substitution, and quote removal.  Arith-
     metic substitutions may be nested.

     The evaluation is performed according to  the  rules  listed
     below   under   AAAARRRRIIIITTTTHHHHMMMMEEEETTTTIIIICCCC  EEEEVVVVAAAALLLLUUUUAAAATTTTIIIIOOOONNNN.   If  _e_x_p_r_e_s_s_i_o_n  is
     invalid, bbbbaaaasssshhhh prints a message  indicating  failure  and  no
     substitution occurs.

  PPPPrrrroooocccceeeessssssss SSSSuuuubbbbssssttttiiiittttuuuuttttiiiioooonnnn
     _P_r_o_c_e_s_s _s_u_b_s_t_i_t_u_t_i_o_n is supported on  systems  that  support
     named  pipes  (_F_I_F_O_s)  or  the ////ddddeeeevvvv////ffffdddd method of naming open
     files.  It takes the form of <<<<((((_l_i_s_t)))) or >>>>((((_l_i_s_t)))).   The  pro-
     cess  _l_i_s_t  is  run  with its input or output connected to a
     _F_I_F_O or some file in ////ddddeeeevvvv////ffffdddd.  The  name  of  this  file  is
     passed  as  an argument to the current command as the result
     of the expansion.  If the >>>>((((_l_i_s_t)))) form is used,  writing  to
     the  file  will provide input for _l_i_s_t.  If the <<<<((((_l_i_s_t)))) form
     is used, the file passed as an argument should  be  read  to
     obtain the output of _l_i_s_t.

     On systems that support it,  _p_r_o_c_e_s_s  _s_u_b_s_t_i_t_u_t_i_o_n  is  per-
     formed simultaneously with _p_a_r_a_m_e_t_e_r _a_n_d _v_a_r_i_a_b_l_e _e_x_p_a_n_s_i_o_n,
     _c_o_m_m_a_n_d _s_u_b_s_t_i_t_u_t_i_o_n, and _a_r_i_t_h_m_e_t_i_c _e_x_p_a_n_s_i_o_n.

  WWWWoooorrrrdddd SSSSpppplllliiiittttttttiiiinnnngggg
     The shell scans the results of parameter expansion,  command
     substitution,  and  arithmetic  expansion that did not occur



GNU                Last change: 1993 August 9                  16






BASH(1)                  USER COMMANDS                    BASH(1)



     within double quotes for _w_o_r_d _s_p_l_i_t_t_i_n_g.

     The shell treats each character of IIIIFFFFSSSS as a  delimiter,  and
     splits  the  results  of  the other expansions into words on
     these  characters.   If  the  value  of   IIIIFFFFSSSS   is   exactly
     <<<<ssssppppaaaacccceeee>>>><<<<ttttaaaabbbb>>>><<<<nnnneeeewwwwlllliiiinnnneeee>>>>, the default, then any sequence of IIIIFFFFSSSS
     characters  serves  to   delimit   words;   otherwise   each
     occurrence  of  an  IIIIFFFFSSSS character is treated as a delimiter.
     If the value of IIIIFFFFSSSS is null, no word splitting occurs.   IIIIFFFFSSSS
     cannot be unset.

     Explicit null arguments ("""""""" or '''''''') are  retained.   Implicit
     null  arguments,  resulting from the expansion of _p_a_r_a_m_e_t_e_r_s
     that have no values, are removed.

     Note that if no expansion occurs, no splitting is performed.

  PPPPaaaatttthhhhnnnnaaaammmmeeee EEEExxxxppppaaaannnnssssiiiioooonnnn
     After word splitting, unless the ----ffff  option  has  been  set,
     bbbbaaaasssshhhh scans each _w_o_r_d for the characters ****, ????, and [[[[.  If one
     of these characters appears, then the word is regarded as  a
     _p_a_t_t_e_r_n,  and replaced with an alphabetically sorted list of
     pathnames matching the pattern.  If  no  matching  pathnames
     are  found, and the shell variable aaaalllllllloooowwww____nnnnuuuullllllll____gggglllloooobbbb____eeeexxxxppppaaaannnnssssiiiioooonnnn
     is unset, the word is left unchanged.  If  the  variable  is
     set,  and no matches are found, the word is removed.  When a
     pattern is used for pathname generation, the character ````````....''''''''
     at the start of a name or immediately following a slash must
     be   matched   explicitly,   unless   the   shell   variable
     gggglllloooobbbb____ddddooootttt____ffffiiiilllleeeennnnaaaammmmeeeessss  is set.  The slash character must always
     be matched explicitly.  In other cases, the ````````....''''''''  character
     is not treated specially.

     The special pattern characters have the following meanings:

     ****    Matches any string, including the null string.
     ????    Matches any single character.
     [[[[............]]]]
          Matches any one of the enclosed characters.  A pair  of
          characters  separated  by a minus sign denotes a _r_a_n_g_e;
          any character lexically between those  two  characters,
          inclusive,  is matched.  If the first character follow-
          ing the [[[[ is a !!!! or a ^^^^ then any character not enclosed
          is matched.  A ---- or ]]]] may be matched by including it as
          the first or last character in the set.

  QQQQuuuuooootttteeee RRRReeeemmmmoooovvvvaaaallll
     After the preceding expansions, all unquoted occurrences  of
     the characters \\\\, ````, and """" are removed.

RRRREEEEDDDDIIIIRRRREEEECCCCTTTTIIIIOOOONNNN
     Before a command is executed, its input and  output  may  be



GNU                Last change: 1993 August 9                  17






BASH(1)                  USER COMMANDS                    BASH(1)



     _r_e_d_i_r_e_c_t_e_d  using  a  special  notation  interpreted  by the
     shell.  Redirection may also be used to open and close files
     for  the current shell execution environment.  The following
     redirection operators may appear anywhere in a  _s_i_m_p_l_e  _c_o_m_-
     _m_a_n_d  or  may precede or follow a _c_o_m_m_a_n_d.  Redirections are
     processed in the order they appear, from left to right.

     In the following descriptions, if the file descriptor number
     is  omitted,  and  the  first  character  of the redirection
     operator is <<<<, the redirection refers to the standard  input
     (file descriptor 0).  If the first character of the redirec-
     tion operator is >>>>, the redirection refers to  the  standard
     output (file descriptor 1).

     The word that follows the redirection operator in  the  fol-
     lowing  descriptions  is subjected to brace expansion, tilde
     expansion, parameter expansion, command substitution, arith-
     metic  expansion, quote removal, and pathname expansion.  If
     it expands to more than one word, bbbbaaaasssshhhh reports an error.

     Note that the order of  redirections  is  significant.   For
     example, the command

          ls >>>> dirlist 2>>>>&&&&1

     directs both standard output and standard error to the  file
     _d_i_r_l_i_s_t, while the command

          ls 2>>>>&&&&1 >>>> dirlist

     directs only the standard output to  file  _d_i_r_l_i_s_t,  because
     the  standard error was duplicated as standard output before
     the standard output was redirected to _d_i_r_l_i_s_t.

  RRRReeeeddddiiiirrrreeeeccccttttiiiinnnngggg IIIInnnnppppuuuutttt
     Redirection of input causes the file whose name results from
     the  expansion  of  _w_o_r_d  to  be  opened for reading on file
     descriptor _n, or the standard input (file descriptor 0) if _n
     is not specified.

     The general format for redirecting input is:

          [_n]<<<<_w_o_r_d

  RRRReeeeddddiiiirrrreeeeccccttttiiiinnnngggg OOOOuuuuttttppppuuuutttt
     Redirection of output causes the  file  whose  name  results
     from  the expansion of _w_o_r_d to be opened for writing on file
     descriptor _n, or the standard output (file descriptor 1)  if
     _n  is  not  specified.   If  the  file  does not exist it is
     created; if it does exist it is truncated to zero size.





GNU                Last change: 1993 August 9                  18






BASH(1)                  USER COMMANDS                    BASH(1)



     The general format for redirecting output is:

          [_n]>>>>_w_o_r_d

     If  the  redirection  operator  is  >>>>||||,  then  the  variable
     nnnnoooocccclllloooobbbbbbbbeeeerrrr  is not consulted, and the file is created regard-
     less of the value of nnnnoooocccclllloooobbbbbbbbeeeerrrr (see  SSSShhhheeeellllllll  VVVVaaaarrrriiiiaaaabbbblllleeeessss  above
     and the ----CCCC option to the sssseeeetttt builtin command).

  AAAAppppppppeeeennnnddddiiiinnnngggg RRRReeeeddddiiiirrrreeeecccctttteeeedddd OOOOuuuuttttppppuuuutttt
     Redirection of output in this fashion causes the file  whose
     name  results  from  the  expansion of _w_o_r_d to be opened for
     appending on file descriptor _n, or the standard output (file
     descriptor  1)  if _n is not specified.  If the file does not
     exist it is created.

     The general format for appending output is:

          [_n]>>>>>>>>_w_o_r_d

  RRRReeeeddddiiiirrrreeeeccccttttiiiinnnngggg SSSSttttaaaannnnddddaaaarrrrdddd OOOOuuuuttttppppuuuutttt aaaannnndddd SSSSttttaaaannnnddddaaaarrrrdddd EEEErrrrrrrroooorrrr
     BBBBaaaasssshhhh allows both the standard output (file descriptor 1) and
     the   standard  error  output  (file  descriptor  2)  to  be
     redirected to the file whose name is the expansion  of  _w_o_r_d
     with this construct.

     There are two formats for redirecting  standard  output  and
     standard error:

          &&&&>>>>_w_o_r_d
     and
          >>>>&&&&_w_o_r_d

     Of the two forms, the first is preferred.  This is  semanti-
     cally equivalent to

          >>>>_w_o_r_d 2>>>>&&&&1

  HHHHeeeerrrreeee DDDDooooccccuuuummmmeeeennnnttttssss
     This type of redirection instructs the shell to  read  input
     from  the  current  source until a line containing only _w_o_r_d
     (with no trailing blanks) is seen.  All of the lines read up
     to that point are then used as the standard input for a com-
     mand.

     The format of here-documents is as follows:

          <<<<<<<<[----]_w_o_r_d
                  _h_e_r_e-_d_o_c_u_m_e_n_t
          _d_e_l_i_m_i_t_e_r





GNU                Last change: 1993 August 9                  19






BASH(1)                  USER COMMANDS                    BASH(1)



     No  parameter  expansion,  command  substitution,   pathname
     expansion, or arithmetic expansion is performed on _w_o_r_d.  If
     any characters in _w_o_r_d are  quoted,  the  _d_e_l_i_m_i_t_e_r  is  the
     result  of quote removal on _w_o_r_d, and the lines in the here-
     document are not expanded.   Otherwise,  all  lines  of  the
     here-document  are subjected to parameter expansion, command
     substitution, and arithmetic expansion.  In the latter case,
     the  pair \\\\<<<<nnnneeeewwwwlllliiiinnnneeee>>>> is ignored, and \\\\ must be used to quote
     the characters \\\\, $$$$, and ````.

     If the redirection operator is <<<<<<<<----,  then  all  leading  tab
     characters  are  stripped from input lines and the line con-
     taining _d_e_l_i_m_i_t_e_r.  This allows here-documents within  shell
     scripts to be indented in a natural fashion.

  DDDDuuuupppplllliiiiccccaaaattttiiiinnnngggg FFFFiiiilllleeee DDDDeeeessssccccrrrriiiippppttttoooorrrrssss
     The redirection operator

          [_n]<<<<&&&&_w_o_r_d

     is used  to  duplicate  input  file  descriptors.   If  _w_o_r_d
     expands  to  one or more digits, the file descriptor denoted
     by _n is made to be a copy of that file descriptor.  If  _w_o_r_d
     evaluates  to  ----,  file descriptor _n is closed.  If _n is not
     specified, the standard input (file descriptor 0) is used.

     The operator

          [_n]>>>>&&&&_w_o_r_d

     is used similarly to duplicate output file descriptors.   If
     _n  is not specified, the standard output (file descriptor 1)
     is used.  As a special case, if _n is omitted, and _w_o_r_d  does
     not  expand  to  one or more digits, the standard output and
     standard error are redirected as described previously.

  OOOOppppeeeennnniiiinnnngggg FFFFiiiilllleeee DDDDeeeessssccccrrrriiiippppttttoooorrrrssss ffffoooorrrr RRRReeeeaaaaddddiiiinnnngggg aaaannnndddd WWWWrrrriiiittttiiiinnnngggg
     The redirection operator

          [_n]<<<<>>>>_w_o_r_d

     causes the file whose name is the expansion of  _w_o_r_d  to  be
     opened for both reading and writing on file descriptor _n, or
     as the standard input and standard output if _n is not speci-
     fied.  If the file does not exist, it is created.

FFFFUUUUNNNNCCCCTTTTIIIIOOOONNNNSSSS
     A shell function, defined as  described  above  under  SSSSHHHHEEEELLLLLLLL
     GGGGRRRRAAAAMMMMMMMMAAAARRRR,  stores  a  series of commands for later execution.
     Functions are executed in the context of the current  shell;
     no  new  process is created to interpret them (contrast this
     with the execution of a shell script).  When a  function  is



GNU                Last change: 1993 August 9                  20






BASH(1)                  USER COMMANDS                    BASH(1)



     executed,  the  arguments  to  the function become the posi-
     tional parameters during its execution.  The special parame-
     ter  #### is updated to reflect the change.  Positional parame-
     ter 0 is unchanged.

     Variables local to the function may  be  declared  with  the
     llllooooccccaaaallll  builtin  command.   Ordinarily,  variables  and their
     values are shared between the function and its caller.

     If the builtin command rrrreeeettttuuuurrrrnnnn is executed in a function, the
     function  completes and execution resumes with the next com-
     mand after the function call.  When  a  function  completes,
     the  values  of  the  positional  parameters and the special
     parameter #### are restored to the values  they  had  prior  to
     function execution.

     Function names may be listed  with  the  ----ffff  option  to  the
     ddddeeeeccccllllaaaarrrreeee  or  ttttyyyyppppeeeesssseeeetttt  builtin  commands.   Functions  may be
     exported so that subshells automatically have  them  defined
     with the ----ffff option to the eeeexxxxppppoooorrrrtttt builtin.

     Functions may be recursive.  No  limit  is  imposed  on  the
     number of recursive calls.

AAAALLLLIIIIAAAASSSSEEEESSSS
     The shell maintains a list of _a_l_i_a_s_e_s that may  be  set  and
     unset with the aaaalllliiiiaaaassss and uuuunnnnaaaalllliiiiaaaassss builtin commands (see SSSSHHHHEEEELLLLLLLL
     BBBBUUUUIIIILLLLTTTTIIIINNNN CCCCOOOOMMMMMMMMAAAANNNNDDDDSSSS below).  The first word of each command, if
     unquoted, is checked to see if it has an alias.  If so, that
     word is replaced by the text of the alias.  The  alias  name
     and  the replacement text may contain any valid shell input,
     including the _m_e_t_a_c_h_a_r_a_c_t_e_r_s listed above.  The  first  word
     of  the  replacement  text is tested for aliases, but a word
     that is identical to an alias being expanded is not expanded
     a  second  time.  This means that one may alias llllssss to llllssss ----FFFF,
     for instance, and bbbbaaaasssshhhh does not try  to  recursively  expand
     the  replacement  text.   If the last character of the alias
     value is a _b_l_a_n_k, then the next command word  following  the
     alias is also checked for alias expansion.

     Aliases are created and listed with the aaaalllliiiiaaaassss  command,  and
     removed with the uuuunnnnaaaalllliiiiaaaassss command.

     There is no mechanism for using arguments in the replacement
     text,  a  la ccccsssshhhh.  If arguments are needed, a shell function
     should be used.

     Aliases are not expanded when the shell is not interactive.

     The rules concerning the definition and use of  aliases  are
     somewhat confusing.  BBBBaaaasssshhhh always reads at least one complete
     line of input before executing any of the commands  on  that



GNU                Last change: 1993 August 9                  21






BASH(1)                  USER COMMANDS                    BASH(1)



     line.  Aliases are expanded when a command is read, not when
     it is executed.  Therefore, an alias definition appearing on
     the  same line as another command does not take effect until
     the next line of input is read.  This means  that  the  com-
     mands  following  the  alias definition on that line are not
     affected by the new alias.  This behavior is also  an  issue
     when  functions are executed.  Aliases are expanded when the
     function definition is read, not when the function  is  exe-
     cuted,  because  a  function definition is itself a compound
     command.  As a consequence, aliases defined  in  a  function
     are not available until after that function is executed.  To
     be safe, always put alias definitions on  a  separate  line,
     and do not use aaaalllliiiiaaaassss in compound commands.

     Note that for almost every purpose, aliases  are  superseded
     by shell functions.

JJJJOOOOBBBB CCCCOOOONNNNTTTTRRRROOOOLLLL
     _J_o_b _c_o_n_t_r_o_l  refers  to  the  ability  to  selectively  stop
     (_s_u_s_p_e_n_d)  the  execution of processes and continue (_r_e_s_u_m_e)
     their execution at a later point.  A user typically  employs
     this  facility via an interactive interface supplied jointly
     by the system's terminal driver and bbbbaaaasssshhhh.

     The shell associates a _j_o_b with each pipeline.  It  keeps  a
     table  of currently executing jobs, which may be listed with
     the jjjjoooobbbbssss command.  When bbbbaaaasssshhhh starts a job asynchronously (in
     the _b_a_c_k_g_r_o_u_n_d), it prints a line that looks like:

          [1] 25647

     indicating that this job is job number 1 and that  the  pro-
     cess  ID of the last process in the pipeline associated with
     this job is 25647.  All of the processes in a  single  pipe-
     line  are  members  of  the  same  job.   BBBBaaaasssshhhh  uses the _j_o_b
     abstraction as the basis for job control.

     To facilitate the implementation of the  user  interface  to
     job  control,  the  system maintains the notion of a _c_u_r_r_e_n_t
     _t_e_r_m_i_n_a_l _p_r_o_c_e_s_s _g_r_o_u_p _I_D.  Members of  this  process  group
     (processes  whose  process  group ID is equal to the current
     terminal process group ID) receive  keyboard-generated  sig-
     nals  such as SSSSIIIIGGGGIIIINNNNTTTT.  These processes are said to be in the
     _f_o_r_e_g_r_o_u_n_d.  _B_a_c_k_g_r_o_u_n_d processes are  those  whose  process
     group  ID  differs  from  the terminal's; such processes are
     immune  to  keyboard-generated  signals.   Only   foreground
     processes are allowed to read from or write to the terminal.
     Background processes which attempt to read from  (write  to)
     the terminal are sent a SSSSIIIIGGGGTTTTTTTTIIIINNNN ((((SSSSIIIIGGGGTTTTTTTTOOOOUUUU)))) signal by the ter-
     minal driver, which, unless caught, suspends the process.





GNU                Last change: 1993 August 9                  22






BASH(1)                  USER COMMANDS                    BASH(1)



     If the operating system on which bbbbaaaasssshhhh  is  running  supports
     job  control, bbbbaaaasssshhhh allows you to use it.  Typing the _s_u_s_p_e_n_d
     character (typically ^^^^ZZZZ, Control-Z) while a process is  run-
     ning  causes  that  process to be stopped and returns you to
     bbbbaaaasssshhhh.  Typing the _d_e_l_a_y_e_d _s_u_s_p_e_n_d character  (typically  ^^^^YYYY,
     Control-Y) causes the process to be stopped when it attempts
     to read input from the terminal, and control to be  returned
     to  bbbbaaaasssshhhh.   You  may  then manipulate the state of this job,
     using the bbbbgggg command to continue it in the  background,  the
     ffffgggg  command  to  continue  it in the foreground, or the kkkkiiiillllllll
     command to kill it.  A ^^^^ZZZZ takes effect immediately, and  has
     the  additional  side  effect  of causing pending output and
     typeahead to be discarded.

     There are a number of ways to refer to a job in  the  shell.
     The  character %%%% introduces a job name.  Job number _n may be
     referred to as %%%%nnnn.  A job may also be referred  to  using  a
     prefix  of  the  name used to start it, or using a substring
     that appears in its command line.  For example,  %%%%cccceeee  refers
     to a stopped cccceeee job.  If a prefix matches more than one job,
     bbbbaaaasssshhhh reports an error.   Using  %%%%????cccceeee,  on  the  other  hand,
     refers  to  any  job containing the string cccceeee in its command
     line.  If the substring matches  more  than  one  job,  bbbbaaaasssshhhh
     reports  an  error.   The  symbols  %%%%%%%%  and  %%%%++++ refer to the
     shell's notion of the _c_u_r_r_e_n_t _j_o_b, which  is  the  last  job
     stopped  while  it  was in the foreground.  The _p_r_e_v_i_o_u_s _j_o_b
     may be referenced using %%%%----.  In output  pertaining  to  jobs
     (e.g.,  the  output of the jjjjoooobbbbssss command), the current job is
     always flagged with a ++++, and the previous job with a ----.

     Simply naming a job can be used to bring it into  the  fore-
     ground:   %%%%1111 is a synonym for ````````ffffgggg %%%%1111'''''''', bringing job 1 from
     the background into the  foreground.   Similarly,  ````````%%%%1111  &&&&''''''''
     resumes job 1 in the background, equivalent to ````````bbbbgggg %%%%1111''''''''.

     The shell learns immediately whenever a job  changes  state.
     Normally,  bbbbaaaasssshhhh  waits  until  it is about to print a prompt
     before reporting changes in a job's  status  so  as  to  not
     interrupt  any other output.  If the variable nnnnoooottttiiiiffffyyyy is set,
     bbbbaaaasssshhhh reports such changes immediately.   (See  also  the  ----bbbb
     option to the sssseeeetttt builtin command.)

     If you attempt to exit bbbbaaaasssshhhh  while  jobs  are  stopped,  the
     shell  prints  a  message warning you.  You may then use the
     jjjjoooobbbbssss command to inspect their status.  If you  do  this,  or
     try to exit again immediately, you are not warned again, and
     the stopped jobs are terminated.

SSSSIIIIGGGGNNNNAAAALLLLSSSS
     When bbbbaaaasssshhhh is interactive, it ignores SSSSIIIIGGGGTTTTEEEERRRRMMMM (so that kkkkiiiillllllll 0000
     does  not  kill  an interactive shell), and SSSSIIIIGGGGIIIINNNNTTTT is caught
     and handled (so that the wwwwaaaaiiiitttt builtin is interruptible).  In



GNU                Last change: 1993 August 9                  23






BASH(1)                  USER COMMANDS                    BASH(1)



     all  cases,  bbbbaaaasssshhhh  ignores  SSSSIIIIGGGGQQQQUUUUIIIITTTT.   If  job control is in
     effect, bbbbaaaasssshhhh ignores SSSSIIIIGGGGTTTTTTTTIIIINNNN, SSSSIIIIGGGGTTTTTTTTOOOOUUUU, and SSSSIIIIGGGGTTTTSSSSTTTTPPPP.

     Synchronous jobs started by bbbbaaaasssshhhh have  signals  set  to  the
     values  inherited  by  the  shell from its parent.  When job
     control is not in effect, background jobs (jobs started with
     &&&&)  ignore  SSSSIIIIGGGGIIIINNNNTTTT and SSSSIIIIGGGGQQQQUUUUIIIITTTT.  Commands run as a result of
     command substitution ignore the keyboard-generated job  con-
     trol signals SSSSIIIIGGGGTTTTTTTTIIIINNNN, SSSSIIIIGGGGTTTTTTTTOOOOUUUU, and SSSSIIIIGGGGTTTTSSSSTTTTPPPP.

CCCCOOOOMMMMMMMMAAAANNNNDDDD EEEEXXXXEEEECCCCUUUUTTTTIIIIOOOONNNN
     After a command has been split into words, if it results  in
     a simple command and an optional list of arguments, the fol-
     lowing actions are taken.

     If the command name contains no slashes, the shell  attempts
     to  locate  it.   If  there  exists a shell function by that
     name, that function is invoked as described above  in  FFFFUUUUNNNNCCCC----
     TTTTIIIIOOOONNNNSSSS.   If  the  name  does not match a function, the shell
     searches for it in the list of shell builtins.  If  a  match
     is found, that builtin is invoked.

     If the name is neither a shell function nor a  builtin,  and
     contains  no slashes, bbbbaaaasssshhhh searches each element of the PPPPAAAATTTTHHHH
     for a directory containing an executable file by that  name.
     If  the  search  is  unsuccessful, the shell prints an error
     message and returns a nonzero exit status.

     If the search is successful, or if the command name contains
     one  or  more slashes, the shell executes the named program.
     Argument 0 is set to the name given, and the remaining argu-
     ments to the command are set to the arguments given, if any.

     If this execution fails because the file is not  in  execut-
     able  format, and the file is not a directory, it is assumed
     to be a _s_h_e_l_l _s_c_r_i_p_t, a file containing shell  commands.   A
     subshell is spawned to execute it.  This subshell reinitial-
     izes itself, so that the effect is as if  a  new  shell  had
     been  invoked  to handle the script, with the exception that
     the locations of commands remembered by the parent (see hhhhaaaasssshhhh
     below  under  SSSSHHHHEEEELLLLLLLL  BBBBUUUUIIIILLLLTTTTIIIINNNN  CCCCOOOOMMMMMMMMAAAANNNNDDDDSSSS)  are retained by the
     child.

     If the program is a file beginning with ####!!!!, the remainder of
     the  first  line  specifies  an interpreter for the program.
     The shell executes the specified  interpreter  on  operating
     systems  that  do  not  handle  this executable format them-
     selves.  The arguments to the interpreter consist of a  sin-
     gle  optional argument following the interpreter name on the
     first line of the program, followed by the name of the  pro-
     gram, followed by the command arguments, if any.




GNU                Last change: 1993 August 9                  24






BASH(1)                  USER COMMANDS                    BASH(1)



EEEENNNNVVVVIIIIRRRROOOONNNNMMMMEEEENNNNTTTT
     When a program is invoked it is given an  array  of  strings
     called the _e_n_v_i_r_o_n_m_e_n_t.  This is a list of _n_a_m_e-_v_a_l_u_e pairs,
     of the form _n_a_m_e=_v_a_l_u_e.

     The shell  allows  you  to  manipulate  the  environment  in
     several  ways.   On  invocation,  the  shell  scans  its own
     environment and creates a parameter  for  each  name  found,
     automatically  marking  it  for  _e_x_p_o_r_t  to child processes.
     Executed commands inherit the environment.  The  eeeexxxxppppoooorrrrtttt  and
     ddddeeeeccccllllaaaarrrreeee  ----xxxx  commands  allow  parameters and functions to be
     added to and deleted from the environment.  If the value  of
     a  parameter  in  the environment is modified, the new value
     becomes part of the environment,  replacing  the  old.   The
     environment  inherited  by  any executed command consists of
     the shell's initial environment, whose values may  be  modi-
     fied  in the shell, less any pairs removed by the uuuunnnnsssseeeetttt com-
     mand, plus any additions via the eeeexxxxppppoooorrrrtttt and ddddeeeeccccllllaaaarrrreeee ----xxxx  com-
     mands.

     The environment for any _s_i_m_p_l_e _c_o_m_m_a_n_d or  function  may  be
     augmented temporarily by prefixing it with parameter assign-
     ments, as described above in PPPPAAAARRRRAAAAMMMMEEEETTTTEEEERRRRSSSS.   These  assignment
     statements affect only the environment seen by that command.

     If the ----kkkk flag is set (see the sssseeeetttt builtin  command  below),
     then _a_l_l parameter assignments are placed in the environment
     for a command, not just those that precede the command name.

     When bbbbaaaasssshhhh invokes an external command, the variable ____ is set
     to the full path name of the command and passed to that com-
     mand in its environment.

EEEEXXXXIIIITTTT SSSSTTTTAAAATTTTUUUUSSSS
     For the purposes of the shell, a command which exits with  a
     zero  exit  status  has  succeeded.   An exit status of zero
     indicates  success.   A  non-zero  exit   status   indicates
     failure.   When a command terminates on a fatal signal, bbbbaaaasssshhhh
     uses the value of 128+ssssiiiiggggnnnnaaaallll as the exit status.

     BBBBaaaasssshhhh itself returns the exit status of the last command exe-
     cuted,  unless a syntax error occurs, in which case it exits
     with a non-zero value.  See also the  eeeexxxxiiiitttt  builtin  command
     below.

PPPPRRRROOOOMMMMPPPPTTTTIIIINNNNGGGG
     When executing  interactively,  bbbbaaaasssshhhh  displays  the  primary
     prompt  PPPPSSSS1111  when  it  is  ready  to read a command, and the
     secondary prompt PPPPSSSS2222 when it needs more input to complete  a
     command.   BBBBaaaasssshhhh allows these prompt strings to be customized
     by inserting a number of backslash-escaped  special  charac-
     ters that are decoded as follows:



GNU                Last change: 1993 August 9                  25






BASH(1)                  USER COMMANDS                    BASH(1)



          \\\\tttt   the current time in HH:MM:SS format
          \\\\dddd   the date in "Weekday  Month  Date"  format  (e.g.,
               "Tue May 26")
          \\\\nnnn   CRLF
          \\\\ssss   the name of the shell, the  basename  of  $$$$0000  (the
               portion following the final slash)
          \\\\wwww   the current working directory
          \\\\WWWW   the basename of the current working directory
          \\\\uuuu   the username of the current user
          \\\\hhhh   the hostname
          \\\\####   the command number of this command
          \\\\!!!!   the history number of this command
          \\\\$$$$   if the effective UID is 0, a ####, otherwise a $$$$
          \\\\nnnnnnnnnnnn character code in octal
          \\\\\\\\   a backslash

     After the string is decoded, if the variable  NNNNOOOO____PPPPRRRROOOOMMMMPPPPTTTT____VVVVAAAARRRRSSSS
     is  not set, it is expanded via parameter expansion, command
     substitution, arithmetic expansion, and word splitting.

RRRREEEEAAAADDDDLLLLIIIINNNNEEEE
     This is the library that handles reading input when using an
     interactive  shell,  unless  the  ----nnnnoooolllliiiinnnneeeeeeeeddddiiiittttiiiinnnngggg  option  is
     given.  By default, the line editing commands are similar to
     those  of  emacs.  A vi-style line editing interface is also
     available.

     In this section, the emacs-style notation is used to  denote
     keystrokes.   Control  keys  are denoted by C-_k_e_y, e.g., C-n
     means Control-N.  Similarly, _m_e_t_a keys are denoted by M-_k_e_y,
     so  M-x means Meta-X.  (On keyboards without a _m_e_t_a key, M-_x
     means ESC _x, i.e., press the Escape  key  then  the  _x  key.
     This makes ESC the _m_e_t_a _p_r_e_f_i_x.  The combination M-C-_x means
     ESC-Control-_x, or press the Escape key then hold the Control
     key while pressing the _x key.)

     The default key-bindings may be changed with  an  ~/._i_n_p_u_t_r_c
     file.   Other  programs  that use this library may add their
     own commands and bindings.

     For example, placing

          M-Control-u: universal-argument
     or
          C-Meta-u: universal-argument
     into the ~/._i_n_p_u_t_r_c would make M-C-u  execute  the  readline
     command _u_n_i_v_e_r_s_a_l-_a_r_g_u_m_e_n_t.

     The  following  symbolic  character  names  are  recognized:
     _R_U_B_O_U_T, _D_E_L, _E_S_C, _L_F_D, _N_E_W_L_I_N_E, _R_E_T, _R_E_T_U_R_N, _S_P_C, _S_P_A_C_E, and
     _T_A_B.  In addition to command names, readline allows keys  to
     be  bound  to  a  string  that  is  inserted when the key is



GNU                Last change: 1993 August 9                  26






BASH(1)                  USER COMMANDS                    BASH(1)



     pressed (a _m_a_c_r_o).  See the  readline  documentation  for  a
     precise definition of the syntax of key bindings.

     BBBBaaaasssshhhh  allows  the  current  readline  key  bindings  to   be
     displayed  or  modified  with the bbbbiiiinnnndddd builtin command.  The
     editing mode may be switched during interactive use by using
     the  ----oooo option to the sssseeeetttt builtin command (see SSSSHHHHEEEELLLLLLLL BBBBUUUUIIIILLLLTTTTIIIINNNN
     CCCCOOOOMMMMMMMMAAAANNNNDDDDSSSS below).

     Readline has variables that can be used to further customize
     its  behavior.   A  variable  may be set in ~/_i_n_p_u_t_r_c with a
     statement of the form

          sssseeeetttt _v_a_r_i_a_b_l_e-_n_a_m_e _v_a_l_u_e

     Except where noted, readline variables can take  the  values
     OOOOnnnn or OOOOffffffff.  The variables and their default values are:

     hhhhoooorrrriiiizzzzoooonnnnttttaaaallll----ssssccccrrrroooollllllll----mmmmooooddddeeee ((((OOOOffffffff))))
          When set to OOOOnnnn, makes readline use a  single  line  for
          display,  scrolling  the input horizontally on a screen
          line when it  becomes  longer  than  the  screen  width
          rather than wrapping to a new line.
     eeeeddddiiiittttiiiinnnngggg----mmmmooooddddeeee ((((eeeemmmmaaaaccccssss))))
          Controls whether readline begins  with  a  set  of  key
          bindings  similar  to _e_m_a_c_s or _v_i.  eeeeddddiiiittttiiiinnnngggg----mmmmooooddddeeee can be
          set to either eeeemmmmaaaaccccssss or vvvviiii.
     mmmmaaaarrrrkkkk----mmmmooooddddiiiiffffiiiieeeedddd----lllliiiinnnneeeessss ((((OOOOffffffff))))
          If set to OOOOnnnn, history lines that have been modified are
          displayed with a preceding asterisk (****).
     pppprrrreeeeffffeeeerrrr----vvvviiiissssiiiibbbblllleeee----bbbbeeeellllllll ((((OOOOffffffff))))
          If set to OOOOnnnn, readline uses a visible bell  if  one  is
          available rather than simply ringing the terminal bell.
     ccccoooommmmmmmmeeeennnntttt----bbbbeeeeggggiiiinnnn ((((````````:::: ''''''''))))
          The string  that  is  inserted  in  vvvviiii  mode  when  the
          vvvviiii----ccccoooommmmmmmmeeeennnntttt command is executed.
     mmmmeeeettttaaaa----ffffllllaaaagggg ((((OOOOffffffff))))
          If set to OOOOnnnn,  readline  will  enable  eight-bit  input
          (that is, it will not strip the high bit from the char-
          acters it  reads),  regardless  of  what  the  terminal
          claims it can support.
     ccccoooonnnnvvvveeeerrrrtttt----mmmmeeeettttaaaa ((((OOOOnnnn))))
          If set to OOOOnnnn, readline will convert characters with the
          eighth  bit  set  to an ascii key sequence by stripping
          the eighth bit and prepending an escape  character  (in
          effect, using escape as the _m_e_t_a _p_r_e_f_i_x).
     ccccoooommmmpppplllleeeettttiiiioooonnnn----qqqquuuueeeerrrryyyy----iiiitttteeeemmmmssss ((((111100000000))))
          This controls when the user is  queried  about  viewing
          the  number  of  possible  completions generated by the
          ppppoooossssssssiiiibbbblllleeee----ccccoooommmmpppplllleeeettttiiiioooonnnnssss command.  It may  be  set  to  any
          integer  value  greater  than or equal to zero.  If the
          number of possible completions is greater than or equal



GNU                Last change: 1993 August 9                  27






BASH(1)                  USER COMMANDS                    BASH(1)



          to  the  value  of  this  variable,  the  user is asked
          whether or not he wishes to view them;  otherwise  they
          are simply listed on the terminal.

     Readline commands may be given numeric _a_r_g_u_m_e_n_t_s, which nor-
     mally  act as a repeat count.  Sometimes, however, it is the
     sign of the argument that is significant.  Passing  a  nega-
     tive  argument  to a command that acts in the forward direc-
     tion (e.g., kkkkiiiillllllll----lllliiiinnnneeee) causes that command to act in a back-
     ward  direction.   Commands  whose  behavior  with arguments
     deviates from this are noted.

     When a command  is  described  as  _k_i_l_l_i_n_g  text,  the  text
     deleted  is  saved  for possible future retrieval (_y_a_n_k_i_n_g).
     The killed text is saved in a _k_i_l_l-_r_i_n_g.  Consecutive  kills
     cause the text to be accumulated into one unit, which can be
     yanked all at once. Commands which do not kill text separate
     the chunks of text on the kill-ring.

     The following is a list of the names of the commands and the
     default key sequences to which they are bound.

  CCCCoooommmmmmmmaaaannnnddddssss ffffoooorrrr MMMMoooovvvviiiinnnngggg
     bbbbeeeeggggiiiinnnnnnnniiiinnnngggg----ooooffff----lllliiiinnnneeee ((((CCCC----aaaa))))
          Move to the start of the current line.
     eeeennnndddd----ooooffff----lllliiiinnnneeee ((((CCCC----eeee))))
          Move to the end of the line.
     ffffoooorrrrwwwwaaaarrrrdddd----cccchhhhaaaarrrr ((((CCCC----ffff))))
          Move forward a character.
     bbbbaaaacccckkkkwwwwaaaarrrrdddd----cccchhhhaaaarrrr ((((CCCC----bbbb))))
          Move back a character.
     ffffoooorrrrwwwwaaaarrrrdddd----wwwwoooorrrrdddd ((((MMMM----ffff))))
          Move forward to the end of the next  word.   Words  are
          composed   of   alphanumeric  characters  (letters  and
          digits).
     bbbbaaaacccckkkkwwwwaaaarrrrdddd----wwwwoooorrrrdddd ((((MMMM----bbbb))))
          Move back to the start of this, or the previous,  word.
          Words  are composed of alphanumeric characters (letters
          and digits).
     cccclllleeeeaaaarrrr----ssssccccrrrreeeeeeeennnn ((((CCCC----llll))))
          Clear the screen leaving the current line at the top of
          the screen.  With an argument, refresh the current line
          without clearing the screen.

  CCCCoooommmmmmmmaaaannnnddddssss ffffoooorrrr MMMMaaaannnniiiippppuuuullllaaaattttiiiinnnngggg tttthhhheeee HHHHiiiissssttttoooorrrryyyy
     aaaacccccccceeeepppptttt----lllliiiinnnneeee ((((NNNNeeeewwwwlllliiiinnnneeee,,,, RRRReeeettttuuuurrrrnnnn))))
          Accept the line regardless of where the cursor is.   If
          this  line  is  non-empty,  add  it to the history list
          according to the state of the hhhhiiiissssttttoooorrrryyyy____ccccoooonnnnttttrrrroooollll variable.
          If  the  line  is a modified history line, then restore
          the history line to its original state.
     pppprrrreeeevvvviiiioooouuuussss----hhhhiiiissssttttoooorrrryyyy ((((CCCC----pppp))))



GNU                Last change: 1993 August 9                  28






BASH(1)                  USER COMMANDS                    BASH(1)



          Fetch the previous command from the history list,  mov-
          ing back in the list.
     nnnneeeexxxxtttt----hhhhiiiissssttttoooorrrryyyy ((((CCCC----nnnn))))
          Fetch the next command from the  history  list,  moving
          forward in the list.
     bbbbeeeeggggiiiinnnnnnnniiiinnnngggg----ooooffff----hhhhiiiissssttttoooorrrryyyy ((((MMMM----<<<<))))
          Move to the first line in the history.
     eeeennnndddd----ooooffff----hhhhiiiissssttttoooorrrryyyy ((((MMMM---->>>>))))
          Move to the end of the input history,  i.e.,  the  line
          currently being entered.
     rrrreeeevvvveeeerrrrsssseeee----sssseeeeaaaarrrrcccchhhh----hhhhiiiissssttttoooorrrryyyy ((((CCCC----rrrr))))
          Search backward starting at the current line and moving
          `up'  through  the  history  as  necessary.  This is an
          incremental search.
     ffffoooorrrrwwwwaaaarrrrdddd----sssseeeeaaaarrrrcccchhhh----hhhhiiiissssttttoooorrrryyyy ((((CCCC----ssss))))
          Search forward starting at the current line and  moving
          `down'  through  the  history as necessary.  This is an
          incremental search.
     nnnnoooonnnn----iiiinnnnccccrrrreeeemmmmeeeennnnttttaaaallll----rrrreeeevvvveeeerrrrsssseeee----sssseeeeaaaarrrrcccchhhh----hhhhiiiissssttttoooorrrryyyy ((((MMMM----NNNN))))
          Search backward through the  history  starting  at  the
          current line using a non-incremental search.
     nnnnoooonnnn----iiiinnnnccccrrrreeeemmmmeeeennnnttttaaaallll----ffffoooorrrrwwwwaaaarrrrdddd----sssseeeeaaaarrrrcccchhhh----hhhhiiiissssttttoooorrrryyyy ((((MMMM----PPPP))))
          Search   forward   through   the   history   using    a
          non-incremental search.
     sssshhhheeeellllllll----eeeexxxxppppaaaannnndddd----lllliiiinnnneeee ((((MMMM----CCCC----eeee))))
          Expand the line the way the shell does  when  it  reads
          it.   This performs alias and history expansion as well
          as all of  the  shell  word  expansions.   See  HHHHIIIISSSSTTTTOOOORRRRYYYY
          EEEEXXXXPPPPAAAANNNNSSSSIIIIOOOONNNN below for a description of history expansion.
     iiiinnnnsssseeeerrrrtttt----llllaaaasssstttt----aaaarrrrgggguuuummmmeeeennnntttt ((((MMMM----....,,,, MMMM----____))))
          Insert the last argument to the previous  command  (the
          last  word  on the previous line).  With an argument _n,
          insert the _nth word  from  the  previous  command  (the
          words  in  the  previous command begin with word 0).  A
          negative argument inserts the _nth word from the end  of
          the previous command.
     ooooppppeeeerrrraaaatttteeee----aaaannnndddd----ggggeeeetttt----nnnneeeexxxxtttt ((((CCCC----oooo))))
          Accept the current line for  execution  and  fetch  the
          next line relative to the current line from the history
          for editing.  Any argument is ignored.

  CCCCoooommmmmmmmaaaannnnddddssss ffffoooorrrr CCCChhhhaaaannnnggggiiiinnnngggg TTTTeeeexxxxtttt
     ddddeeeelllleeeetttteeee----cccchhhhaaaarrrr ((((CCCC----dddd))))
          Delete the character under the cursor.  If  the  cursor
          is at the beginning of the line, and there are no char-
          acters in the line, and the last  character  typed  was
          not CCCC----dddd, then return EEEEOOOOFFFF.
     bbbbaaaacccckkkkwwwwaaaarrrrdddd----ddddeeeelllleeeetttteeee----cccchhhhaaaarrrr ((((RRRRuuuubbbboooouuuutttt))))
          Delete the character behind the cursor.  When  given  a
          numeric   argument,   save  the  deleted  text  on  the
          kill-ring.
     qqqquuuuooootttteeeedddd----iiiinnnnsssseeeerrrrtttt ((((CCCC----qqqq,,,, CCCC----vvvv))))



GNU                Last change: 1993 August 9                  29






BASH(1)                  USER COMMANDS                    BASH(1)



          Add the next character that you type to the line verba-
          tim.   This  is  how to insert characters like C-q, for
          example.
     ttttaaaabbbb----iiiinnnnsssseeeerrrrtttt ((((CCCC----vvvv TTTTAAAABBBB))))
          Insert a tab character.
     sssseeeellllffff----iiiinnnnsssseeeerrrrtttt ((((aaaa,,,, bbbb,,,, AAAA,,,, 1111,,,, !!!!,,,, ............))))
          Insert the character typed.
     ttttrrrraaaannnnssssppppoooosssseeee----cccchhhhaaaarrrrssss ((((CCCC----tttt))))
          Drag the character before point forward over the  char-
          acter at point.  Point moves forward as well.  If point
          is at the end of the line, then transpose the two char-
          acters before point.  Negative arguments don't work.
     ttttrrrraaaannnnssssppppoooosssseeee----wwwwoooorrrrddddssss ((((MMMM----tttt))))
          Drag the word behind the cursor past the word in  front
          of the cursor moving the cursor over that word as well.
     uuuuppppccccaaaasssseeee----wwwwoooorrrrdddd ((((MMMM----uuuu))))
          Uppercase the current  (or  following)  word.   With  a
          negative  argument,  do  the  previous word, but do not
          move point.
     ddddoooowwwwnnnnccccaaaasssseeee----wwwwoooorrrrdddd ((((MMMM----llll))))
          Lowercase the current  (or  following)  word.   With  a
          negative  argument,  do  the  previous word, but do not
          move point.
     ccccaaaappppiiiittttaaaalllliiiizzzzeeee----wwwwoooorrrrdddd ((((MMMM----cccc))))
          Capitalize the current (or  following)  word.   With  a
          negative  argument,  do  the  previous word, but do not
          move point.

  KKKKiiiilllllllliiiinnnngggg aaaannnndddd YYYYaaaannnnkkkkiiiinnnngggg
     kkkkiiiillllllll----lllliiiinnnneeee ((((CCCC----kkkk))))
          Kill the text from the current cursor position  to  the
          end of the line.
     bbbbaaaacccckkkkwwwwaaaarrrrdddd----kkkkiiiillllllll----lllliiiinnnneeee
          Kill backward to the beginning of the  line.   This  is
          normally unbound.
     kkkkiiiillllllll----wwwwoooorrrrdddd ((((MMMM----dddd))))
          Kill from the cursor to the end of the current word, or
          if  between  words,  to the end of the next word.  Word
          boundaries are the same as those used by ffffoooorrrrwwwwaaaarrrrdddd----wwwwoooorrrrdddd.
     bbbbaaaacccckkkkwwwwaaaarrrrdddd----kkkkiiiillllllll----wwwwoooorrrrdddd ((((MMMM----RRRRuuuubbbboooouuuutttt))))
          Kill the word behind the cursor.  Word  boundaries  are
          the same as those used by bbbbaaaacccckkkkwwwwaaaarrrrdddd----wwwwoooorrrrdddd.
     uuuunnnniiiixxxx----lllliiiinnnneeee----ddddiiiissssccccaaaarrrrdddd ((((CCCC----uuuu))))
          Kill backward from point to the beginning of the line.
     uuuunnnniiiixxxx----wwwwoooorrrrdddd----rrrruuuubbbboooouuuutttt ((((CCCC----wwww))))
          Kill the word behind the cursor, using white space as a
          word  boundary.  The word boundaries are different from
          backward-kill-word.
     yyyyaaaannnnkkkk ((((CCCC----yyyy))))
          Yank the top of the kill ring into the  buffer  at  the
          cursor.
     yyyyaaaannnnkkkk----ppppoooopppp ((((MMMM----yyyy))))



GNU                Last change: 1993 August 9                  30






BASH(1)                  USER COMMANDS                    BASH(1)



          Rotate the kill-ring, and yank the new top.  Only works
          following yyyyaaaannnnkkkk or yyyyaaaannnnkkkk----ppppoooopppp.

  NNNNuuuummmmeeeerrrriiiicccc AAAArrrrgggguuuummmmeeeennnnttttssss
     ddddiiiiggggiiiitttt----aaaarrrrgggguuuummmmeeeennnntttt ((((MMMM----0000,,,, MMMM----1111,,,, ............,,,, MMMM--------))))
          Add this digit to the argument already accumulating, or
          start a new argument.  M-- starts a negative argument.
     uuuunnnniiiivvvveeeerrrrssssaaaallll----aaaarrrrgggguuuummmmeeeennnntttt
          Each time this is executed, the argument count is  mul-
          tiplied  by four.  The argument count is initially one,
          so executing this function the  first  time  makes  the
          argument  count four.  By default, this is not bound to
          a key.

  CCCCoooommmmpppplllleeeettttiiiinnnngggg
     ccccoooommmmpppplllleeeetttteeee ((((TTTTAAAABBBB))))
          Attempt to perform completion on the text before point.
          BBBBaaaasssshhhh  attempts  completion treating the text as a vari-
          able (if the text begins with $$$$), username (if the text
          begins  with  ~~~~), hostname (if the text begins with @@@@),
          or command (including aliases and functions)  in  turn.
          If  none of these produces a match, filename completion
          is attempted.
     ppppoooossssssssiiiibbbblllleeee----ccccoooommmmpppplllleeeettttiiiioooonnnnssss ((((MMMM----????))))
          List the possible completions of the text before point.
     iiiinnnnsssseeeerrrrtttt----ccccoooommmmpppplllleeeettttiiiioooonnnnssss
          Insert all completions of the text  before  point  that
          would  have been generated by ppppoooossssssssiiiibbbblllleeee----ccccoooommmmpppplllleeeettttiiiioooonnnnssss.  By
          default, this is not bound to a key.
     ccccoooommmmpppplllleeeetttteeee----ffffiiiilllleeeennnnaaaammmmeeee ((((MMMM----////))))
          Attempt filename completion on the text before point.
     ppppoooossssssssiiiibbbblllleeee----ffffiiiilllleeeennnnaaaammmmeeee----ccccoooommmmpppplllleeeettttiiiioooonnnnssss ((((CCCC----xxxx ////))))
          List the possible completions of the text before point,
          treating it as a filename.
     ccccoooommmmpppplllleeeetttteeee----uuuusssseeeerrrrnnnnaaaammmmeeee ((((MMMM----~~~~))))
          Attempt completion on the text before  point,  treating
          it as a username.
     ppppoooossssssssiiiibbbblllleeee----uuuusssseeeerrrrnnnnaaaammmmeeee----ccccoooommmmpppplllleeeettttiiiioooonnnnssss ((((CCCC----xxxx ~~~~))))
          List the possible completions of the text before point,
          treating it as a username.
     ccccoooommmmpppplllleeeetttteeee----vvvvaaaarrrriiiiaaaabbbblllleeee ((((MMMM----$$$$))))
          Attempt completion on the text before  point,  treating
          it as a shell variable.
     ppppoooossssssssiiiibbbblllleeee----vvvvaaaarrrriiiiaaaabbbblllleeee----ccccoooommmmpppplllleeeettttiiiioooonnnnssss ((((CCCC----xxxx $$$$))))
          List the possible completions of the text before point,
          treating it as a shell variable.
     ccccoooommmmpppplllleeeetttteeee----hhhhoooossssttttnnnnaaaammmmeeee ((((MMMM----@@@@))))
          Attempt completion on the text before  point,  treating
          it as a hostname.
     ppppoooossssssssiiiibbbblllleeee----hhhhoooossssttttnnnnaaaammmmeeee----ccccoooommmmpppplllleeeettttiiiioooonnnnssss ((((CCCC----xxxx @@@@))))
          List the possible completions of the text before point,
          treating it as a hostname.



GNU                Last change: 1993 August 9                  31






BASH(1)                  USER COMMANDS                    BASH(1)



     ccccoooommmmpppplllleeeetttteeee----ccccoooommmmmmmmaaaannnndddd ((((MMMM----!!!!))))
          Attempt completion on the text before  point,  treating
          it  as  a command name.  Command completion attempts to
          match the text against aliases, reserved  words,  shell
          functions,  builtins, and finally executable filenames,
          in that order.
     ppppoooossssssssiiiibbbblllleeee----ccccoooommmmmmmmaaaannnndddd----ccccoooommmmpppplllleeeettttiiiioooonnnnssss ((((CCCC----xxxx !!!!))))
          List the possible completions of the text before point,
          treating it as a command name.
     ddddyyyynnnnaaaammmmiiiicccc----ccccoooommmmpppplllleeeetttteeee----hhhhiiiissssttttoooorrrryyyy ((((MMMM----TTTTAAAABBBB))))
          Attempt completion on the text before point,  comparing
          the text against lines from the history list for possi-
          ble completion matches.
     ccccoooommmmpppplllleeeetttteeee----iiiinnnnttttoooo----bbbbrrrraaaacccceeeessss ((((MMMM----{{{{))))
          Perform filename completion and return the list of pos-
          sible completions enclosed within braces so the list is
          available to the shell (see BBBBrrrraaaacccceeee EEEExxxxppppaaaannnnssssiiiioooonnnn above).

  MMMMiiiisssscccceeeellllllllaaaannnneeeeoooouuuussss
     aaaabbbboooorrrrtttt ((((CCCC----gggg))))
          Abort  the  current  editing  command  and   ring   the
          terminal's    bell   (subject   to   the   setting   of
          pppprrrreeeeffffeeeerrrr----vvvviiiissssiiiibbbblllleeee----bbbbeeeellllllll).
     ddddoooo----uuuuppppppppeeeerrrrccccaaaasssseeee----vvvveeeerrrrssssiiiioooonnnn ((((MMMM----aaaa,,,, MMMM----bbbb,,,, ............))))
          Run the command that is bound to the uppercased key.
     pppprrrreeeeffffiiiixxxx----mmmmeeeettttaaaa ((((EEEESSSSCCCC))))
          Metafy the next character typed.  EEEESSSSCCCC f  is  equivalent
          to MMMMeeeettttaaaa----ffff.
     uuuunnnnddddoooo ((((CCCC----____,,,, CCCC----xxxx CCCC----uuuu))))
          Incremental undo, separately remembered for each line.
     rrrreeeevvvveeeerrrrtttt----lllliiiinnnneeee ((((MMMM----rrrr))))
          Undo all changes made to this line.  This is like  typ-
          ing the uuuunnnnddddoooo command enough times to return the line to
          its initial state.
     ddddiiiissssppppllllaaaayyyy----sssshhhheeeellllllll----vvvveeeerrrrssssiiiioooonnnn ((((CCCC----xxxx CCCC----vvvv))))
          Display version information about the current  instance
          of bbbbaaaasssshhhh.
     eeeemmmmaaaaccccssss----eeeeddddiiiittttiiiinnnngggg----mmmmooooddddeeee ((((CCCC----eeee))))
          When in vvvviiii editing mode, this causes a switch to  eeeemmmmaaaaccccssss
          editing mode.

HHHHIIIISSSSTTTTOOOORRRRYYYY
     When interactive, the shell provides access to  the  _c_o_m_m_a_n_d
     _h_i_s_t_o_r_y, the list of commands previously typed.  The text of
     the last HHHHIIIISSSSTTTTSSSSIIIIZZZZEEEE commands (default 500) is saved in a  his-
     tory  list.   The  shell  stores each command in the history
     list prior to parameter and variable expansion  (see  EEEEXXXXPPPPAAAANNNN----
     SSSSIIIIOOOONNNN  above)  but after history expansion is performed, sub-
     ject   to   the    values    of    the    shell    variables
     ccccoooommmmmmmmaaaannnndddd____oooorrrriiiieeeennnntttteeeedddd____hhhhiiiissssttttoooorrrryyyy  and  hhhhiiiissssttttoooorrrryyyy____ccccoooonnnnttttrrrroooollll.  On startup,
     the history is initialized from the file named by the  vari-
     able   HHHHIIIISSSSTTTTFFFFIIIILLLLEEEE   (default  ~/._b_a_s_h__h_i_s_t_o_r_y).   HHHHIIIISSSSTTTTFFFFIIIILLLLEEEE  is



GNU                Last change: 1993 August 9                  32






BASH(1)                  USER COMMANDS                    BASH(1)



     truncated, if necessary,  to  contain  no  more  than  HHHHIIIISSSSTTTT----
     FFFFIIIILLLLEEEESSSSIIIIZZZZEEEE  lines.   The builtin command ffffcccc (see SSSSHHHHEEEELLLLLLLL BBBBUUUUIIIILLLLTTTTIIIINNNN
     CCCCOOOOMMMMMMMMAAAANNNNDDDDSSSS below) may be used to list or edit and re-execute a
     portion  of  the  history  list.  The hhhhiiiissssttttoooorrrryyyy builtin can be
     used to display the history list and manipulate the  history
     file.   When using the command-line editing, search commands
     are available in each editing mode that  provide  access  to
     the history list.  When an interactive shell exits, the last
     HHHHIIIISSSSTTTTSSSSIIIIZZZZEEEE lines are copied from the history list to HHHHIIIISSSSTTTTFFFFIIIILLLLEEEE.
     If  HHHHIIIISSSSTTTTFFFFIIIILLLLEEEE is unset, or if the history file is unwritable,
     the history is not saved.

HHHHIIIISSSSTTTTOOOORRRRYYYY EEEEXXXXPPPPAAAANNNNSSSSIIIIOOOONNNN
     The shell supports a history expansion feature that is simi-
     lar to the history expansion in ccccsssshhhh....  This section describes
     what syntax features are available.  This feature is enabled
     by default for interactive shells, and can be disabled using
     the ++++HHHH option to the sssseeeetttt builtin command (see SSSSHHHHEEEELLLLLLLL  BBBBUUUUIIIILLLLTTTTIIIINNNN
     CCCCOOOOMMMMMMMMAAAANNNNDDDDSSSS below).  Non-interactive shells do not perform his-
     tory expansion.

     History expansion is performed immediately after a  complete
     line  is  read,  before  the shell breaks it into words.  It
     takes place in two parts.  The first is to  determine  which
     line  from  the previous history to use during substitution.
     The second is to select portions of that line for  inclusion
     into  the  current one.  The line selected from the previous
     history is the _e_v_e_n_t, and the portions of that line that are
     acted  upon are _w_o_r_d_s.  The line is broken into words in the
     same  fashion  as  when  reading  input,  so  that   several
     _m_e_t_a_c_h_a_r_a_c_t_e_r-separated  words surrounded by quotes are con-
     sidered as one word.  Only backslash (\\\\) can quote the  his-
     tory escape character, which is !!!! by default.

     The shell allows control of the various characters  used  by
     the  history  expansion  mechanism  (see  the description of
     hhhhiiiissssttttcccchhhhaaaarrrrssss above under SSSShhhheeeellllllll VVVVaaaarrrriiiiaaaabbbblllleeeessss).

  EEEEvvvveeeennnntttt DDDDeeeessssiiiiggggnnnnaaaattttoooorrrrssss
     An event designator is a reference to a command  line  entry
     in the history list.

     !!!!    Start a history substitution, except when followed by a
          <space>, <tab>, <newline>, = or (.
     !!!!!!!!   Refer to the previous command.  This is a  synonym  for
          `!-1'.
     !!!!_n   Refer to command line _n.
     !!!!----_n  Refer to the current command line minus _n.
     !!!!_s_t_r_i_n_g
          Refer to the most recent command starting with _s_t_r_i_n_g.
     !!!!????_s_t_r_i_n_g[[[[????]]]]
          Refer to the most recent command containing _s_t_r_i_n_g.



GNU                Last change: 1993 August 9                  33






BASH(1)                  USER COMMANDS                    BASH(1)



9     ^^^^8_s_t_r_i_n_g_19^^^^8_s_t_r_i_n_g_29^^^^
8          Quick substitution.  Repeat the last command, replacing
          _s_t_r_i_n_g_1      with      _s_t_r_i_n_g_2.       Equivalent     to
          ``!!:s9^8_s_t_r_i_n_g_19^8_s_t_r_i_n_g_29^8'' (see MMMMooooddddiiiiffffiiiieeeerrrrssss below).
     !!!!####   The entire command line typed so far.

  WWWWoooorrrrdddd DDDDeeeessssiiiiggggnnnnaaaattttoooorrrrssss
     A :::: separates the event specification from the word designa-
     tor.  It can be omitted if the word designator begins with a
     ^^^^, $$$$, ****, or %%%%.  Words are numbered from the beginning of the
     line, with the first word being denoted by a 0 (zero).

     0000 ((((zzzzeeeerrrroooo))))
          The zeroth word.  For the shell, this  is  the  command
          word.
     _n    The _nth word.
     ^^^^    The first argument.  That is, word 1.
     $$$$    The last argument.
     %%%%    The word matched by the most recent `?_s_t_r_i_n_g?' search.
     _x----_y  A range of words; `-_y' abbreviates `0-_y'.
     ****    All of the words but the zeroth.  This is a synonym for
          `1-$$$$'.   It  is  not an error to use **** if there is just
          one word in the event; the empty string is returned  in
          that case.

  MMMMooooddddiiiiffffiiiieeeerrrrssss
     After the optional word designator, you can add  a  sequence
     of  one or more of the following modifiers, each preceded by
     a `:'.

     hhhh    Remove a trailing pathname component, leaving only  the
          head.
     rrrr    Remove a trailing suffix of the  form  ".xxx",  leaving
          the basename.
     eeee    Remove all but the suffix.
     tttt    Remove all leading  pathname  components,  leaving  the
          tail.
     pppp    Print the new command but  do  not  execute  it.   This
          takes  effect  immediately,  so  it  should be the last
          specifier on the line.
     ssss////_o_l_d////_n_e_w////
          Substitute _n_e_w for the first occurrence of _o_l_d  in  the
          event  line.   Any delimiter can be used in place of /.
          The final delimiter is optional if it is the last char-
          acter of the event line.
     gggg    Cause changes to be applied over the entire event line.
          This  is  used in conjunction with `::::ssss'.  Any delimiter
          can be used in place of  /.   The  final  delimiter  is
          optional if it is the last character of the event line.

AAAARRRRIIIITTTTHHHHMMMMEEEETTTTIIIICCCC EEEEVVVVAAAALLLLUUUUAAAATTTTIIIIOOOONNNN
     The shell allows arithmetic  expressions  to  be  evaluated,



GNU                Last change: 1993 August 9                  34






BASH(1)                  USER COMMANDS                    BASH(1)



     under certain circumstances (see the lllleeeetttt builtin command and
     AAAArrrriiiitttthhhhmmmmeeeettttiiiicccc EEEExxxxppppaaaannnnssssiiiioooonnnn).  Evaluation is done in long  integers
     with  no check for overflow, though division by 0 is trapped
     and flagged as an error.  The following list of operators is
     grouped into levels of equal-precedence operators.  The lev-
     els are listed in order of decreasing precedence.

     ---- ++++  unary minus and plus
     !!!! ~~~~  logical and bitwise negation
     **** //// %%%%
          multiplication, division, remainder
     ++++ ----  addition, subtraction
     <<<<<<<< >>>>>>>>
          left and right bitwise shifts
     <<<<==== >>>>==== <<<< >>>>
          comparison
     ======== !!!!====
          equality and inequality
     &&&&    bitwise AND
     ^^^^    bitwise exclusive OR
     ||||    bitwise OR
     &&&&&&&&   logical AND
     ||||||||   logical OR
     ==== ****==== ////==== %%%%==== ++++==== ----====
          assignment

     Shell variables are allowed as operands; parameter expansion
     is  performed  before the expression is evaluated. The value
     of a parameter is  coerced  to  a  long  integer  within  an
     expression.   A  shell  variable  need  not have its integer
     attribute turned on to be used in an expression.

     Operators  are  evaluated  in  order  of  precedence.   Sub-
     expressions in parentheses are evaluated first and may over-
     ride the precedence rules above.

SSSSHHHHEEEELLLLLLLL BBBBUUUUIIIILLLLTTTTIIIINNNN CCCCOOOOMMMMMMMMAAAANNNNDDDDSSSS
     :::: [_a_r_g_u_m_e_n_t_s]
          No effect; the command does  nothing  beyond  expanding
          _a_r_g_u_m_e_n_t_s and performing any specified redirections.  A
          zero exit code is returned.

      ....  _f_i_l_e_n_a_m_e [_a_r_g_u_m_e_n_t_s]
     ssssoooouuuurrrrcccceeee _f_i_l_e_n_a_m_e [_a_r_g_u_m_e_n_t_s]
          Read and execute commands from _f_i_l_e_n_a_m_e in the  current
          shell  environment  and  return  the exit status of the
          last command executed from _f_i_l_e_n_a_m_e.  If _f_i_l_e_n_a_m_e  does
          not contain a slash, pathnames in PPPPAAAATTTTHHHH are used to find
          the directory containing _f_i_l_e_n_a_m_e.  The  file  searched
          for in PPPPAAAATTTTHHHH need not be executable.  The current direc-
          tory is searched if no file is found in PPPPAAAATTTTHHHH.   If  any
          _a_r_g_u_m_e_n_t_s  are  supplied,  they  become  the positional



GNU                Last change: 1993 August 9                  35






BASH(1)                  USER COMMANDS                    BASH(1)



          parameters when _f_i_l_e is executed.  Otherwise the  posi-
          tional  parameters are unchanged.  The return status is
          the status of the last command exited within the script
          (0  if no commands are executed), and false if _f_i_l_e_n_a_m_e
          is not found.

     aaaalllliiiiaaaassss [_n_a_m_e[=_v_a_l_u_e] ...]
          AAAAlllliiiiaaaassss with no arguments prints the list of  aliases  in
          the form _n_a_m_e=_v_a_l_u_e on standard output.  When arguments
          are supplied, an alias is defined for each  _n_a_m_e  whose
          _v_a_l_u_e  is  given.  A trailing space in _v_a_l_u_e causes the
          next word to be checked for alias substitution when the
          alias  is expanded.  For each _n_a_m_e in the argument list
          for which no _v_a_l_u_e is supplied, the name and  value  of
          the alias is printed.  AAAAlllliiiiaaaassss returns true unless a _n_a_m_e
          is given for which no alias has been defined.

     bbbbgggg [_j_o_b_s_p_e_c]
          Place _j_o_b_s_p_e_c in the background,  as  if  it  had  been
          started with &&&&.  If _j_o_b_s_p_e_c is not present, the shell's
          notion of the _c_u_r_r_e_n_t _j_o_b is used.  bbbbgggg _j_o_b_s_p_e_c  returns
          0  unless run when job control is disabled or, when run
          with job control enabled, if _j_o_b_s_p_e_c was not  found  or
          started without job control.

     bbbbiiiinnnndddd [----mmmm _k_e_y_m_a_p] [----llllvvvvdddd] [----qqqq _n_a_m_e]
     bbbbiiiinnnndddd [----mmmm _k_e_y_m_a_p] ----ffff _f_i_l_e_n_a_m_e
     bbbbiiiinnnndddd [----mmmm _k_e_y_m_a_p] _k_e_y_s_e_q:_f_u_n_c_t_i_o_n-_n_a_m_e
          Display current rrrreeeeaaaaddddlllliiiinnnneeee key and function bindings,  or
          bind  a  key  sequence to a rrrreeeeaaaaddddlllliiiinnnneeee function or macro.
          The binding syntax accepted is  identical  to  that  of
          ._i_n_p_u_t_r_c, but each binding must be passed as a separate
          argument;   e.g.,   '"\C-x\C-r":    re-read-init-file'.
          Options, if supplied, have the following meanings:
          ----mmmm _k_e_y_m_a_p
               Use _k_e_y_m_a_p as the keymap to  be  affected  by  the
               subsequent  bindings.  Acceptable _k_e_y_m_a_p names are
               _e_m_a_c_s, _e_m_a_c_s-_s_t_a_n_d_a_r_d, _e_m_a_c_s-_m_e_t_a, _e_m_a_c_s-_c_t_l_x, _v_i,
               _v_i-_m_o_v_e,   _v_i-_c_o_m_m_a_n_d,   and   _v_i-_i_n_s_e_r_t.   _v_i  is
               equivalent to _v_i-_c_o_m_m_a_n_d.
          ----llll   List the names of all rrrreeeeaaaaddddlllliiiinnnneeee functions
          ----vvvv   List current function names and bindings
          ----dddd   Dump function names and bindings  in  such  a  way
               that they can be re-read
          ----ffff _f_i_l_e_n_a_m_e
               Read key bindings from _f_i_l_e_n_a_m_e
          ----qqqq _f_u_n_c_t_i_o_n
               Query about which keys invoke the named _f_u_n_c_t_i_o_n

          The return value is 0 unless an unrecognized option  is
          given or an error occurred.




GNU                Last change: 1993 August 9                  36






BASH(1)                  USER COMMANDS                    BASH(1)



     bbbbrrrreeeeaaaakkkk [_n]
          Exit from within a ffffoooorrrr, wwwwhhhhiiiilllleeee, or uuuunnnnttttiiiillll loop.  If _n  is
          specified,  break  _n  levels.   _n must be _> 1.  If _n is
          greater than the number of enclosing loops, all enclos-
          ing loops are exited.  The return value is 0 unless the
          shell is not executing a loop when bbbbrrrreeeeaaaakkkk is executed.

     bbbbuuuuiiiillllttttiiiinnnn _s_h_e_l_l-_b_u_i_l_t_i_n [_a_r_g_u_m_e_n_t_s]
          Execute the specified shell builtin, passing  it  _a_r_g_u_-
          _m_e_n_t_s, and return its exit status.  This is useful when
          you wish to define a function whose name is the same as
          a  shell  builtin,  but  need  the functionality of the
          builtin within the function itself.  The ccccdddd builtin  is
          commonly  redefined  this  way.   The  return status is
          false if _s_h_e_l_l-_b_u_i_l_t_i_n is not a shell builtin command.

     ccccdddd [_d_i_r]
          Change the current directory to _d_i_r.  The variable HHHHOOOOMMMMEEEE
          is  the  default  _d_i_r.  The variable CCCCDDDDPPPPAAAATTTTHHHH defines the
          search path for the directory containing _d_i_r.  Alterna-
          tive  directory  names are separated by a colon (:).  A
          null directory name  in  CCCCDDDDPPPPAAAATTTTHHHH  is  the  same  as  the
          current  directory,  i.e., ``....''.  If _d_i_r begins with a
          slash (/), then CCCCDDDDPPPPAAAATTTTHHHH is not used.  An argument  of  ----
          is  equivalent to $$$$OOOOLLLLDDDDPPPPWWWWDDDD.  The return value is true if
          the directory was successfully  changed;  false  other-
          wise.

     ccccoooommmmmmmmaaaannnndddd [----ppppVVVVvvvv] _c_o_m_m_a_n_d [_a_r_g ...]
          Run _c_o_m_m_a_n_d with  _a_r_g_s  suppressing  the  normal  shell
          function  lookup.  Only  builtin  commands  or commands
          found in the PPPPAAAATTTTHHHH are executed.  If the  ----pppp  option  is
          given,  the  search  for  _c_o_m_m_a_n_d  is performed using a
          default value for PPPPAAAATTTTHHHH that is guaranteed to  find  all
          of  the  standard  utilities.   If  either the ----VVVV or ----vvvv
          option  is  supplied,  a  description  of  _c_o_m_m_a_n_d   is
          printed.  The ----vvvv option causes a single word indicating
          the command or pathname used to invoke  _c_o_m_m_a_n_d  to  be
          printed; the ----VVVV option produces a more verbose descrip-
          tion.  An argument of -------- disables option  checking  for
          the  rest  of the arguments.  If the ----VVVV or ----vvvv option is
          supplied, the exit status is 0 if  _c_o_m_m_a_n_d  was  found,
          and  1  if  not.   If neither option is supplied and an
          error occurred or _c_o_m_m_a_n_d cannot  be  found,  the  exit
          status  is 127.  Otherwise, the exit status of the ccccoooommmm----
          mmmmaaaannnndddd builtin is the exit status of _c_o_m_m_a_n_d.

     ccccoooonnnnttttiiiinnnnuuuueeee [_n]
          Resume the next iteration of the enclosing ffffoooorrrr,  wwwwhhhhiiiilllleeee,
          or  uuuunnnnttttiiiillll  loop.   If _n is specified, resume at the _nth
          enclosing loop.  _n must be _> 1.  If _n is  greater  than
          the  number of enclosing loops, the last enclosing loop



GNU                Last change: 1993 August 9                  37






BASH(1)                  USER COMMANDS                    BASH(1)



          (the `top-level' loop) is resumed.  The return value is
          0  unless  the  shell is not executing a loop when ccccoooonnnn----
          ttttiiiinnnnuuuueeee is executed.

     ddddeeeeccccllllaaaarrrreeee [----ffffrrrrxxxxiiii] [_n_a_m_e[=_v_a_l_u_e]]
     ttttyyyyppppeeeesssseeeetttt [----ffffrrrrxxxxiiii] [_n_a_m_e[=_v_a_l_u_e]]
          Declare variables and/or give them attributes.   If  no
          _n_a_m_es  are  given, then display the values of variables
          instead.  The options can be used to restrict output to
          variables with the specified attribute.
          ----ffff   Use function names only
          ----rrrr   Make _n_a_m_es readonly.  These names cannot  then  be
               assigned  values  by  subsequent assignment state-
               ments.
          ----xxxx   Mark _n_a_m_es for export to subsequent  commands  via
               the environment.
          ----iiii   The variable is treated as an integer;  arithmetic
               evaluation  (see  AAAARRRRIIIITTTTHHHHMMMMEEEETTTTIIIICCCC  EEEEVVVVAAAALLLLUUUUAAAATTTTIIIIOOOONNNN )))) is per-
               formed when the variable is assigned a value.

          Using `+'  instead  of  `-'  turns  off  the  attribute
          instead.   When  used in a function, makes _n_a_m_es local,
          as with the llllooooccccaaaallll  command.   The  return  value  is  0
          unless  an illegal option is encountered, an attempt is
          made to  define  a  function  using  "-f  foo=bar",  an
          attempt  is  made  to  turn  off  readonly status for a
          readonly variable, or an attempt is made to  display  a
          non-existant function with -f.

     ddddiiiirrrrssss [[[[----llll]]]]
          Display the list of currently  remembered  directories.
          Directories  are  added to the list with the ppppuuuusssshhhhdddd com-
          mand; the ppppooooppppdddd command moves back up through the  list.
          The  ----llll  option  produces a longer listing; the default
          listing format uses a tilde to denote the  home  direc-
          tory.   The  return value is 0 unless an illegal option
          is supplied.

     eeeecccchhhhoooo [----nnnneeeeEEEE] [_a_r_g ...]
          Output the  _a_r_gs,  separated  by  spaces.   The  return
          status  is  always 0.  If ----nnnn is specified, the trailing
          newline is suppressed.  If  the  ----eeee  option  is  given,
          interpretation of the following backslash-escaped char-
          acters  is  enabled.   The  ----EEEE  option   disables   the
          interpretation of these escape characters, even on sys-
          tems where they are interpreted by default.
          \\\\aaaa   alert (bell)
          \\\\bbbb   backspace
          \\\\cccc   suppress trailing newline
          \\\\ffff   form feed
          \\\\nnnn   new line
          \\\\rrrr   carriage return



GNU                Last change: 1993 August 9                  38






BASH(1)                  USER COMMANDS                    BASH(1)



          \\\\tttt   horizontal tab
          \\\\vvvv   vertical tab
          \\\\\\\\   backslash
          \\\\nnnnnnnnnnnn the character whose ASCII code is _n_n_n (octal)

     eeeennnnaaaabbbblllleeee [----nnnn] [----aaaallllllll] [_n_a_m_e ...]
          Enable and disable builtin shell commands.  This allows
          the execution of a disk command which has the same name
          as a shell builtin without specifying a full  pathname.
          If  ----nnnn is used, each _n_a_m_e is disabled; otherwise, _n_a_m_e_s
          are enabled.  For example, to use  the  tttteeeesssstttt  found  in
          PPPPAAAATTTTHHHH   instead  of  the  shell  builtin  version,  type
          ``enable -n test''.  If no arguments are given, a  list
          of  all  enabled shell builtins is printed.  If only ----nnnn
          is  supplied,  a  list  of  all  disabled  builtins  is
          printed.   If  only  ----aaaallllllll is supplied, the list printed
          includes all builtins, with an indication of whether or
          not  each  is  enabled.  eeeennnnaaaabbbblllleeee accepts ----aaaa as a synonym
          for ----aaaallllllll.  The return value is 0 unless a _n_a_m_e is not a
          shell builtin.

     eeeevvvvaaaallll [_a_r_g ...]
          The _a_r_gs are read and concatenated together into a sin-
          gle command.  This command is then read and executed by
          the shell, and its exit status is returned as the value
          of  the  eeeevvvvaaaallll  command.   If there are no _a_r_g_s, or only
          null arguments, eeeevvvvaaaallll returns true.

     eeeexxxxeeeecccc [[----] _c_o_m_m_a_n_d [_a_r_g_u_m_e_n_t_s]]
          If _c_o_m_m_a_n_d is specified, it replaces the shell.  No new
          process is created.  The _a_r_g_u_m_e_n_t_s become the arguments
          to _c_o_m_m_a_n_d.  If the first  argument  is  ----,  the  shell
          places  a  dash  in  the  zeroth arg passed to _c_o_m_m_a_n_d.
          This is what login does.  If the file  cannot  be  exe-
          cuted  for  some reason, a non-interactive shell exits,
          unless  the   shell   variable   nnnnoooo____eeeexxxxiiiitttt____oooonnnn____ffffaaaaiiiilllleeeedddd____eeeexxxxeeeecccc
          exists,  in which case it returns failure.  An interac-
          tive shell returns failure if the file cannot  be  exe-
          cuted.   If  _c_o_m_m_a_n_d is not specified, any redirections
          take effect in the current shell, and the return status
          is 0.

     eeeexxxxiiiitttt [_n]
     bbbbyyyyeeee [_n]
          Cause the shell to exit with a status of _n.   If  _n  is
          omitted,  the  exit  status is that of the last command
          executed.  A trap on EEEEXXXXIIIITTTT is executed before the  shell
          terminates.

     eeeexxxxppppoooorrrrtttt [----nnnnffff] [_n_a_m_e[=_w_o_r_d]] ...
     eeeexxxxppppoooorrrrtttt ----pppp
          The supplied _n_a_m_e_s are marked for automatic  export  to



GNU                Last change: 1993 August 9                  39






BASH(1)                  USER COMMANDS                    BASH(1)



          the  environment of subsequently executed commands.  If
          the ----ffff option is given, the _n_a_m_e_s refer  to  functions.
          If no _n_a_m_e_s are given, or if the ----pppp option is supplied,
          a list of all names that are exported in this shell  is
          printed.   The  ----nnnn option causes the export property to
          be removed from the named variables.  An argument of --------
          disables option checking for the rest of the arguments.
          eeeexxxxppppoooorrrrtttt returns an exit status of true unless an illegal
          option  is  encountered  or  ----ffff is supplied with a _n_a_m_e
          that is not a function.

     ffffcccc [----eeee _e_n_a_m_e] [----nnnnllllrrrr] [_f_i_r_s_t] [_l_a_s_t]
     ffffcccc ----ssss [_p_a_t=_r_e_p] [_c_m_d]
          Fix Command.  In the first form, a  range  of  commands
          from  _f_i_r_s_t  to _l_a_s_t is selected from the history list.
          _F_i_r_s_t and _l_a_s_t may be specified as a string (to  locate
          the  last  command  beginning with that string) or as a
          number (an index into the history list, where  a  nega-
          tive  number is used as an offset from the current com-
          mand number).  If _l_a_s_t is not specified it  is  set  to
          the  current  command  for  listing  (so that ffffcccc ----llll ----11110000
          prints the last 10 commands) and  to  _f_i_r_s_t  otherwise.
          If  _f_i_r_s_t  is  not  specified it is set to the previous
          command for editing and -16 for listing.

          The ----nnnn flag suppresses the command numbers  when  list-
          ing.   The  ----rrrr flag reverses the order of the commands.
          If the ----llll flag is given, the  commands  are  listed  on
          standard  output.  Otherwise, the editor given by _e_n_a_m_e
          is invoked on a file  containing  those  commands.   If
          _e_n_a_m_e is not given, the value of the FFFFCCCCEEEEDDDDIIIITTTT variable is
          used, and the value of EEEEDDDDIIIITTTTOOOORRRR if FFFFCCCCEEEEDDDDIIIITTTT is not set.  If
          neither  variable  is set, _v_i is used.  When editing is
          complete, the edited commands are echoed and executed.

          In the second form, the command  is  re-executed  after
          the  substitution _o_l_d=_n_e_w is performed.  A useful alias
          to use with this is ``r=fc -s'',  so  that  typing  ``r
          cc''  runs  the  last command beginning with ``cc'' and
          typing ``r'' re-executes the last command.

          If the first form is used, the return value is 0 unless
          an  illegal  option  is  encountered  or  _f_i_r_s_t or _l_a_s_t
          specify history lines out of range.  If the  ----eeee  option
          is  supplied, the return value is the value of the last
          command executed or failure if an error occurs with the
          temporary  file  of  commands.   If  the second form is
          used, the return status is  that  of  the  command  re-
          executed,  unless  _c_m_d does not specify a valid history
          line, in which case ffffcccc returns failure.

     ffffgggg [_j_o_b_s_p_e_c]



GNU                Last change: 1993 August 9                  40






BASH(1)                  USER COMMANDS                    BASH(1)



          Place _j_o_b_s_p_e_c  in  the  foreground,  and  make  it  the
          current  job.   If  _j_o_b_s_p_e_c is not present, the shell's
          notion of the _c_u_r_r_e_n_t _j_o_b is used.  The return value is
          that  of  the  command  placed  into the foreground, or
          failure if run when job control is  disabled  or,  when
          run  with  job  control  enabled,  if  _j_o_b_s_p_e_c does not
          specify a valid job or _j_o_b_s_p_e_c specifies a job that was
          started without job control.

     ggggeeeettttooooppppttttssss _o_p_t_s_t_r_i_n_g _n_a_m_e [_a_r_g_s]
          ggggeeeettttooooppppttttssss is used by shell procedures to parse positional
          parameters.   _o_p_t_s_t_r_i_n_g  contains the option letters to
          be recognized; if a letter is followed by a colon,  the
          option is expected to have an argument, which should be
          separated from it by white  space.   Each  time  it  is
          invoked,  ggggeeeettttooooppppttttssss  places  the next option in the shell
          variable _n_a_m_e, initializing _n_a_m_e if it does not  exist,
          and the index of the next argument to be processed into
          the variable OOOOPPPPTTTTIIIINNNNDDDD.  OOOOPPPPTTTTIIIINNNNDDDD is initialized to  1  each
          time  the  shell or a shell script is invoked.  When an
          option requires an argument, ggggeeeettttooooppppttttssss places that  argu-
          ment  into  the  variable  OOOOPPPPTTTTAAAARRRRGGGG.   The shell does not
          reset OOOOPPPPTTTTIIIINNNNDDDD automatically; it must be  manually  reset
          between multiple calls to ggggeeeettttooooppppttttssss within the same shell
          invocation if a new set of parameters is to be used.

          ggggeeeettttooooppppttttssss can report errors in two ways.   If  the  first
          character of _o_p_t_s_t_r_i_n_g is a colon, _s_i_l_e_n_t error report-
          ing is used.  In normal operation  diagnostic  messages
          are  printed  when  illegal  options  or missing option
          arguments are encountered.  If the variable  OOOOPPPPTTTTEEEERRRRRRRR  is
          set  to  0, no error message will be displayed, even if
          the first character of _o_p_t_s_t_r_i_n_g is not a colon.

          If an illegal option is seen,  ggggeeeettttooooppppttttssss  places  ?  into
          _n_a_m_e  and,  if  not silent, prints an error message and
          unsets OOOOPPPPTTTTAAAARRRRGGGG.  If ggggeeeettttooooppppttttssss is silent, the option  char-
          acter  found is placed in OOOOPPPPTTTTAAAARRRRGGGG and no diagnostic mes-
          sage is printed.

          If a required argument is not found, and ggggeeeettttooooppppttttssss is not
          silent,  a  question mark (????) is placed in _n_a_m_e, OOOOPPPPTTTTAAAARRRRGGGG
          is unset, and a  diagnostic  message  is  printed.   If
          ggggeeeettttooooppppttttssss  is  silent, then a colon (::::) is placed in _n_a_m_e
          and OOOOPPPPTTTTAAAARRRRGGGG is set to the option character found.

          ggggeeeettttooooppppttttssss normally parses the positional parameters,  but
          if  more  arguments  are  given in _a_r_g_s, ggggeeeettttooooppppttttssss parses
          those instead.  ggggeeeettttooooppppttttssss  returns  true  if  an  option,
          specified  or  unspecified, is found.  It returns false
          if the end  of  options  is  encountered  or  an  error
          occurs.



GNU                Last change: 1993 August 9                  41






BASH(1)                  USER COMMANDS                    BASH(1)



     hhhhaaaasssshhhh [----rrrr] [_n_a_m_e]
          For each _n_a_m_e, the full  pathname  of  the  command  is
          determined  and  remembered.   The ----rrrr option causes the
          shell to forget all remembered locations.  If no  argu-
          ments  are given, information about remembered commands
          is printed.  An argument of -------- disables option checking
          for  the  rest  of the arguments.  The return status is
          true unless a _n_a_m_e is not found or an illegal option is
          supplied.

     hhhheeeellllpppp [_p_a_t_t_e_r_n]
          Display helpful information about builtin commands.  If
          _p_a_t_t_e_r_n  is  specified, hhhheeeellllpppp gives detailed help on all
          commands matching _p_a_t_t_e_r_n;  otherwise  a  list  of  the
          builtins  is printed.  The return status is 0 unless no
          command matches _p_a_t_t_e_r_n.

     hhhhiiiissssttttoooorrrryyyy [_n]
     hhhhiiiissssttttoooorrrryyyy ----rrrrwwwwaaaannnn [_f_i_l_e_n_a_m_e]
          With no options, display the command history list  with
          line  numbers.   Lines  listed  with with a **** have been
          modified.  An argument of  _n  lists  only  the  last  _n
          lines.   If  a  non-option  argument is supplied, it is
          used as the name of the history file; if not, the value
          of  HHHHIIIISSSSTTTTFFFFIIIILLLLEEEE  is  used.  Options, if supplied, have the
          following meanings:
          ----aaaa   Append the ``new'' history  lines  (history  lines
               entered  since  the  beginning of the current bash
               session) to the history file
          ----nnnn   Read the history lines not already read  from  the
               history file into the current history list.  These
               are lines appended to the history file  since  the
               beginning of the current bash session.
          ----rrrr   read the contents of the history file and use them
               as the current history
          ----wwww   write the current history  to  the  history  file,
               overwriting the history file's contents.

          The return value is  0  unless  an  illegal  option  is
          encountered or an error occurs while reading or writing
          the history file.

     jjjjoooobbbbssss [----llllnnnnpppp] [ _j_o_b_s_p_e_c ... ]
     jjjjoooobbbbssss ----xxxx _c_o_m_m_a_n_d [ _a_r_g_s ... ]
          The first form lists the active jobs.   The  ----llll  option
          lists  process  IDs  in addition to the normal informa-
          tion; the ----pppp option lists only the process  ID  of  the
          job's  process  group  leader.   The ----nnnn option displays
          only jobs that have changed status since last  notfied.
          If  _j_o_b_s_p_e_c  is given, output is restricted to informa-
          tion about that job.  The return status is 0 unless  an
          illegal  option is encountered or an illegal _j_o_b_s_p_e_c is



GNU                Last change: 1993 August 9                  42






BASH(1)                  USER COMMANDS                    BASH(1)



          supplied.

          If the ----xxxx option is supplied, jjjjoooobbbbssss replaces any _j_o_b_s_p_e_c
          found in _c_o_m_m_a_n_d or _a_r_g_s with the corresponding process
          group ID, and executes _c_o_m_m_a_n_d passing it _a_r_g_s, return-
          ing its exit status.

     kkkkiiiillllllll [----ssss ssssiiiiggggssssppppeeeecccc | ----ssssiiiiggggssssppppeeeecccc] [_p_i_d | _j_o_b_s_p_e_c] ...
     kkkkiiiillllllll ----llll [_s_i_g_n_u_m]
          Send the signal named by _s_i_g_s_p_e_c to the processes named
          by  _p_i_d  or  _j_o_b_s_p_e_c.   _s_i_g_s_p_e_c is either a signal name
          such as SSSSIIIIGGGGKKKKIIIILLLLLLLL or a signal number.  If  _s_i_g_s_p_e_c  is  a
          signal  name,  the  name is case insensitive and may be
          given with or without the SSSSIIIIGGGG prefix.   If  _s_i_g_s_p_e_c  is
          not  present,  then SSSSIIIIGGGGTTTTEEEERRRRMMMM is assumed.  An argument of
          ----llll lists the signal names.  If any arguments  are  sup-
          plied when ----llll is given, the names of the specified sig-
          nals are listed, and the return status is 0.  An  argu-
          ment of -------- disables option checking for the rest of the
          arguments.  kkkkiiiillllllll returns true if at  least  one  signal
          was  successfully  sent, or false if an error occurs or
          an illegal option is encountered.

     lllleeeetttt _a_r_g [_a_r_g ...]
          Each _a_r_g is an arithmetic expression  to  be  evaluated
          (see AAAARRRRIIIITTTTHHHHMMMMEEEETTTTIIIICCCC EEEEVVVVAAAALLLLUUUUAAAATTTTIIIIOOOONNNN).  If the last _a_r_g evaluates
          to 0, lllleeeetttt returns 1; 0 is returned otherwise.

     llllooooccccaaaallll [_n_a_m_e[=_v_a_l_u_e]]
          Create a local  variable  named  _n_a_m_e,  and  assign  it
          _v_a_l_u_e.  When llllooooccccaaaallll is used within a function, it causes
          the variable _n_a_m_e to have a visible scope restricted to
          that  function  and  its  children.   With no operands,
          llllooooccccaaaallll writes a list of local variables to the  standard
          output.   It is an error to use llllooooccccaaaallll when not within a
          function.  The return status is 0 unless llllooooccccaaaallll is  used
          outside a function, or an illegal _n_a_m_e is supplied.

     llllooooggggoooouuuutttt
          Exit a login shell.

     ppppooooppppdddd [++++////----nnnn]
          Removes entries from  the  directory  stack.   With  no
          arguments,  removes  the  top directory from the stack,
          and performs a ccccdddd to the new top directory.
          ++++nnnn   removes the _nth entry counting from  the  left  of
               the  list  shown by ddddiiiirrrrssss, starting with zero.  For
               example: ``popd +0'' removes the first  directory,
               ``popd +1'' the second.
          ----nnnn   removes the _nth entry counting from the  right  of
               the  list  shown by ddddiiiirrrrssss, starting with zero.  For
               example: ``popd -0'' removes the  last  directory,



GNU                Last change: 1993 August 9                  43






BASH(1)                  USER COMMANDS                    BASH(1)



               ``popd -1'' the next to last.

          If the ppppooooppppdddd command is successful, a ddddiiiirrrrssss is  performed
          as  well,  and  the  return  status is 0.  ppppooooppppdddd returns
          false if an illegal option is encountered,  the  direc-
          tory  stack  is  empty,  a non-existant directory stack
          entry is specified, or the directory change fails.

     ppppuuuusssshhhhdddd _d_i_r
     ppppuuuusssshhhhdddd ++++////----nnnn
          Adds a directory to the top of the directory stack,  or
          rotates  the stack, making the new top of the stack the
          current  working   directory.    With   no   arguments,
          exchanges the top two directories and returns 0, unless
          the directory stack is empty.
          ++++nnnn   Rotates  the  stack  so  that  the  _nth  directory
               (counting from the left of the list shown by ddddiiiirrrrssss)
               is at the top.
          ----nnnn   Rotates  the  stack  so  that  the  _nth  directory
               (counting from the right) is at the top.
          ddddiiiirrrr  adds _d_i_r to the directory stack at the top, making
               it the new current working directory.

          If the ppppuuuusssshhhhdddd command is successful, a ddddiiiirrrrssss is performed
          as  well.   If  the first form is used, ppppuuuusssshhhhdddd returns 0
          unless the cd to _d_i_r  fails.   With  the  second  form,
          ppppuuuusssshhhhdddd  returns 0 unless the directory stack is empty, a
          non-existant directory stack element is  specified,  or
          the  directory  change  to  the  specified  new current
          directory fails.

     ppppwwwwdddd  Print the absolute  pathname  of  the  current  working
          directory.  The path printed contains no symbolic links
          (but see the description of nnnnoooolllliiiinnnnkkkkssss under  SSSShhhheeeellllllll  VVVVaaaarrrriiii----
          aaaabbbblllleeeessss  above).   The return status is 0 unless an error
          occurs while reading the pathname of the current direc-
          tory.

     rrrreeeeaaaadddd [----rrrr] [_n_a_m_e ...]
          One line is read from the standard input, and the first
          word  is assigned to the first _n_a_m_e, the second word to
          the  second  _n_a_m_e,  and  so  on,  with  leftover  words
          assigned  to the last _n_a_m_e.  Only the characters in IIIIFFFFSSSS
          are recognized as word delimiters.   If  no  _n_a_m_e_s  are
          supplied,  the  line  read  is assigned to the variable
          RRRREEEEPPPPLLLLYYYY.  The return code is zero, unless end-of-file  is
          encountered.   If  the ----rrrr option is given, a backslash-
          newline pair is not ignored, and the backslash is  con-
          sidered to be part of the line.

     rrrreeeeaaaaddddoooonnnnllllyyyy [----ffff] [_n_a_m_e ...]
     rrrreeeeaaaaddddoooonnnnllllyyyy ----pppp



GNU                Last change: 1993 August 9                  44






BASH(1)                  USER COMMANDS                    BASH(1)



          The given _n_a_m_e_s are marked readonly and the  values  of
          these  _n_a_m_e_s  may  not be changed by subsequent assign-
          ment.  If the ----ffff  option  is  supplied,  the  functions
          corresponding  to the _n_a_m_e_s are so marked.  If no argu-
          ments are given, or if the ----pppp  option  is  supplied,  a
          list  of all readonly names is printed.  An argument of
          -------- disables option checking for the rest of  the  argu-
          ments.  The return status is 0 unless an illegal option
          is encountered or ----ffff is supplied with a  _n_a_m_e  that  is
          not a function.

     rrrreeeettttuuuurrrrnnnn [_n]
          Causes a function to exit with the return value  speci-
          fied  by _n.  If _n is omitted, the return status is that
          of the last command executed in the function body.   If
          used  outside  a  function,  but  during execution of a
          script by the .... (ssssoooouuuurrrrcccceeee) command, it causes  the  shell
          to  stop  executing  that script and return either _n or
          the exit status of the last command executed within the
          script  as the exit status of the script.  If used out-
          side a function and not during execution of a script by
          ...., the return status is false.

     sssseeeetttt [--------aaaaeeeeffffhhhhkkkknnnnooooppppttttuuuuvvvvxxxxllllddddCCCCHHHH] [_a_r_g ...]
          ----aaaa      Automatically mark variables which are modified
                  or  created  for  export  to the environment of
                  subsequent commands.
          ----bbbb      Cause the status of terminated background  jobs
                  to  be reported immediately, rather than before
                  the next  primary  prompt.   (Also  see  nnnnoooottttiiiiffffyyyy
                  under SSSShhhheeeellllllll VVVVaaaarrrriiiiaaaabbbblllleeeessss above).
          ----eeee      Exit immediately if a _s_i_m_p_l_e-_c_o_m_m_a_n_d (see SSSSHHHHEEEELLLLLLLL
                  GGGGRRRRAAAAMMMMMMMMAAAARRRR  above)  exits  with a non-zero status.
                  The shell does not exit  if  the  command  that
                  fails  is  part of an _u_n_t_i_l or _w_h_i_l_e loop, part
                  of an _i_f statement, part of a &&&&&&&& or |||||||| list, or
                  if the command's return value is being inverted
                  via !!!!.
          ----ffff      Disable pathname expansion.
          ----hhhh      Locate and remember function commands as  func-
                  tions  are defined.  Function commands are nor-
                  mally looked up when the function is executed.
          ----kkkk      All  keyword  arguments  are  placed   in   the
                  environment  for a command, not just those that
                  precede the command name.
          ----mmmm      Monitor mode.  Job control  is  enabled.   This
                  flag is on by default for interactive shells on
                  systems  that  support  it  (see  JJJJOOOOBBBB   CCCCOOOONNNNTTTTRRRROOOOLLLL
                  above).  Background processes run in a separate
                  process group and a line containing their  exit
                  status is printed upon their completion.
          ----nnnn      Read commands but do not  execute  them.   This



GNU                Last change: 1993 August 9                  45






BASH(1)                  USER COMMANDS                    BASH(1)



                  may  be used to check a shell script for syntax
                  errors.   This  is  ignored   for   interactive
                  shells.
          ----oooo _o_p_t_i_o_n-_n_a_m_e
                  The _o_p_t_i_o_n-_n_a_m_e can be one of the following:
                  aaaalllllllleeeexxxxppppoooorrrrtttt
                          Same as ----aaaa.
                  bbbbrrrraaaacccceeeeeeeexxxxppppaaaannnndddd
                          The shell performs brace expansion (see
                          BBBBrrrraaaacccceeee  EEEExxxxppppaaaannnnssssiiiioooonnnn above).  This is on by
                          default.
                  eeeemmmmaaaaccccssss   Use an emacs-style command line editing
                          interface.   This is enabled by default
                          when the shell is  interactive,  unless
                          the  shell  is  started  with the ----nnnnoooollll----
                          iiiinnnneeeeeeeeddddiiiittttiiiinnnngggg option.
                  eeeerrrrrrrreeeexxxxiiiitttt Same as ----eeee.
                  hhhhiiiisssstttteeeexxxxppppaaaannnndddd
                          Same as ----HHHH.
                  iiiiggggnnnnoooorrrreeeeeeeeooooffff
                          The effect is as if the  shell  command
                          `IGNOREEOF=10'  had  been executed (see
                          SSSShhhheeeellllllll VVVVaaaarrrriiiiaaaabbbblllleeeessss above).
                  iiiinnnntttteeeerrrraaaaccccttttiiiivvvveeee----ccccoooommmmmmmmeeeennnnttttssss
                          Allow a word beginning with #### to  cause
                          that  word and all remaining characters
                          on  that  line  to  be  ignored  in  an
                          interactive shell (see CCCCOOOOMMMMMMMMEEEENNNNTTTTSSSS above).
                  mmmmoooonnnniiiittttoooorrrr Same as ----mmmm.
                  nnnnoooocccclllloooobbbbbbbbeeeerrrr
                          Same as ----CCCC.
                  nnnnooooeeeexxxxeeeecccc  Same as ----nnnn.
                  nnnnoooogggglllloooobbbb  Same as ----ffff.
                  nnnnoooohhhhaaaasssshhhh  Same as ----dddd.
                  nnnnoooottttiiiiffffyyyy  Same as ----bbbb.
                  nnnnoooouuuunnnnsssseeeetttt Same as ----uuuu.
                  pppprrrriiiivvvviiiilllleeeeggggeeeedddd
                          Same as ----pppp.
                  vvvveeeerrrrbbbboooosssseeee Same as ----vvvv.
                  vvvviiii      Use a  vi-style  command  line  editing
                          interface.
                  xxxxttttrrrraaaacccceeee  Same as ----xxxx.
                  If no _o_p_t_i_o_n-_n_a_m_e is supplied,  the  values  of
                  the current options are printed.
          ----pppp      Turn on _p_r_i_v_i_l_e_g_e_d mode.   In  this  mode,  the
                  $$$$EEEENNNNVVVV  file  is not processed by non-interactive
                  shells, and shell functions are  not  inherited
                  from the environment.  This is enabled automat-
                  ically on startup if the effective user (group)
                  id  is  not  equal to the real user (group) id.
                  Turning this option off  causes  the  effective
                  user  and  group ids to be set to the real user



GNU                Last change: 1993 August 9                  46






BASH(1)                  USER COMMANDS                    BASH(1)



                  and group ids.
          ----tttt      Exit after reading and executing one command.
          ----uuuu      Treat unset variables as an error when perform-
                  ing   parameter  expansion.   If  expansion  is
                  attempted  on  an  unset  variable,  the  shell
                  prints  an  error message, and, if not interac-
                  tive, exits with a non-zero status.
          ----vvvv      Print shell input lines as they are read.
          ----xxxx      After  expanding  each   _s_i_m_p_l_e-_c_o_m_m_a_n_d,   bbbbaaaasssshhhh
                  displays the expanded value of PPPPSSSS4444, followed by
                  the command and its expanded arguments.
          ----llll      Save and restore the binding of _n_a_m_e in  a  ffffoooorrrr
                  _n_a_m_e  [in  wwwwoooorrrrdddd]  command  (see  SSSSHHHHEEEELLLLLLLL  GGGGRRRRAAAAMMMMMMMMAAAARRRR
                  above).
          ----dddd      Disable the hashing of commands that are looked
                  up   for  execution.   Normally,  commands  are
                  remembered in a hash table, and once found,  do
                  not have to be looked up again.
          ----CCCC      The  effect  is  as  if   the   shell   command
                  `noclobber=' had been executed (see SSSShhhheeeellllllll VVVVaaaarrrriiii----
                  aaaabbbblllleeeessss above).
          ----HHHH      Enable !!!! style history substitution.  This flag
                  is  on by by default when the shell is interac-
                  tive.
          --------      If no arguments  follow  this  flag,  then  the
                  positional  parameters  are  unset.  Otherwise,
                  the positional parameters are set to the  _a_r_gs,
                  even if some of them begin with a ----.
          ----       Signal the end of options, cause all  remaining
                  _a_r_gs  to  be assigned to the positional parame-
                  ters.  The ----xxxx and ----vvvv options  are  turned  off.
                  If there are no _a_r_gs, the positional parameters
                  remain unchanged.

          The flags are off by default  unless  otherwise  noted.
          Using  +  rather than - causes these flags to be turned
          off.  The flags can also be specified as options to  an
          invocation  of the shell.  The current set of flags may
          be found in $$$$----.  After the option  arguments  are  pro-
          cessed,  the remaining _n _a_r_gs are treated as values for
          the positional parameters and are assigned,  in  order,
          to $$$$1111, $$$$2222, ............ $$$$_n.  If no options or _a_r_gs are supplied,
          all shell variables are printed.  The return status  is
          always true unless an illegal option is encountered.

     sssshhhhiiiifffftttt [_n]
          The positional parameters from _n+1 ... are  renamed  to
          $$$$1111  ................ If _n is not given, it is assumed to be 1.  The
          exit status is 1 if _n is greater than $$$$####; otherwise 0.

     ssssuuuussssppppeeeennnndddd [----ffff]
          Suspend the execution of this shell until it receives a



GNU                Last change: 1993 August 9                  47






BASH(1)                  USER COMMANDS                    BASH(1)



          SSSSIIIIGGGGCCCCOOOONNNNTTTT  signal.  The ----ffff option says not to complain if
          this is a login shell; just suspend anyway.  The return
          status is 0 unless the shell is a login shell and ----ffff is
          not supplied, or if job control is not enabled.

     tttteeeesssstttt _e_x_p_r
     [[[[ _e_x_p_r ]]]]
          Return a status of 0 (true) or 1 (false)  depending  on
          the  evaluation  of  the  conditional  expression _e_x_p_r.
          Expressions may be unary or binary.  Unary  expressions
          are  often used to examine the status of a file.  There
          are string operators and numeric  comparison  operators
          as  well.  Each operator and operand must be a separate
          argument.
          ----bbbb _f_i_l_e
               True if _f_i_l_e exists and is block special.
          ----cccc _f_i_l_e
               True if _f_i_l_e exists and is character special.
          ----dddd _f_i_l_e
               True if _f_i_l_e exists and is a directory.
          ----eeee _f_i_l_e
               True if _f_i_l_e exists.
          ----ffff _f_i_l_e
               True if _f_i_l_e exists and is a regular file.
          ----gggg _f_i_l_e
               True if _f_i_l_e exists and is set-group-id.
          ----kkkk _f_i_l_e
               True if _f_i_l_e has its ``sticky'' bit set.
          ----LLLL _f_i_l_e
               True if _f_i_l_e exists and is a symbolic link.
          ----pppp _f_i_l_e
               True if _f_i_l_e exists and is a named pipe.
          ----rrrr _f_i_l_e
               True if _f_i_l_e exists and is readable.
          ----ssss _f_i_l_e
               True if _f_i_l_e exists and has a  size  greater  than
               zero.
          ----SSSS _f_i_l_e
               True if _f_i_l_e exists and is a socket.
          ----tttt _f_d
               True if _f_d is opened on a terminal.
          ----uuuu _f_i_l_e
               True if _f_i_l_e exists and  its  set-user-id  bit  is
               set.
          ----wwww _f_i_l_e
               True if _f_i_l_e exists and is writable.
          ----xxxx _f_i_l_e
               True if _f_i_l_e exists and is executable.
          ----OOOO _f_i_l_e
               True if _f_i_l_e exists and is owned by the  effective
               user id.
          ----GGGG _f_i_l_e



GNU                Last change: 1993 August 9                  48






BASH(1)                  USER COMMANDS                    BASH(1)



               True if _f_i_l_e exists and is owned by the  effective
               group id.
          _f_i_l_e_1 -nnnntttt _f_i_l_e_2
               True if _f_i_l_e_1 is newer (according to  modification
               date) than _f_i_l_e_2.
          _f_i_l_e_1 -ooootttt _f_i_l_e_2
               True if _f_i_l_e_1 is older than file2.
          _f_i_l_e_1 ----eeeeffff _f_i_l_e
               True if _f_i_l_e_1 and _f_i_l_e_2 have the same  device  and
               inode numbers.
          ----zzzz _s_t_r_i_n_g
               True if the length of _s_t_r_i_n_g is zero.
          ----nnnn _s_t_r_i_n_g
          _s_t_r_i_n_g
               True if the length of _s_t_r_i_n_g is non-zero.
          _s_t_r_i_n_g_1 ==== _s_t_r_i_n_g_2
               True if the strings are equal.
          _s_t_r_i_n_g_1 !!!!==== _s_t_r_i_n_g_2
               True if the strings are not equal.
          !!!! _e_x_p_r
               True if _e_x_p_r is false.
          _e_x_p_r_1 -aaaa _e_x_p_r_2
               True if both _e_x_p_r_1 AND _e_x_p_r_2 are true.
          _e_x_p_r_1 -oooo _e_x_p_r_2
               True if either _e_x_p_r_1 OR _e_x_p_r_2 is true.
          _a_r_g_1 OOOOPPPP _a_r_g_2
               OOOOPPPP is one of ----eeeeqqqq, ----nnnneeee,  ----lllltttt,  ----lllleeee,  ----ggggtttt,  or  ----ggggeeee.
               These  arithmetic  binary operators return true if
               _a_r_g_1 is equal,  not-equal,  less-than,  less-than-
               or-equal,  greater-than,  or greater-than-or-equal
               than _a_r_g_2, respectively.  _A_r_g_1  and  _a_r_g_2  may  be
               positive  integers, negative integers, or the spe-
               cial expression ----llll _s_t_r_i_n_g, which evaluates to  the
               length of _s_t_r_i_n_g.

     ttttiiiimmmmeeeessss
          Print the accumulated user and  system  times  for  the
          shell and for processes run from the shell.  The return
          status is 0.

     ttttrrrraaaapppp [_a_r_g] [_s_i_g_s_p_e_c]
          The command _a_r_g is to be read  and  executed  when  the
          shell  receives signal(s) _s_i_g_s_p_e_c.  If _a_r_g is absent or
          ----, all specified signals are are reset to their  origi-
          nal  values  (the  values they had upon entrance to the
          shell).  If _a_r_g is  the  null  string  this  signal  is
          ignored  by  the  shell and by the commands it invokes.
          _s_i_g_s_p_e_c is either a signal name  in  <signal.h>,  or  a
          signal  number.  If _s_i_g_s_p_e_c is EEEEXXXXIIIITTTT (0) the command _a_r_g
          is executed on exit from the shell.  With no arguments,
          ttttrrrraaaapppp  prints  the list of commands associated with each
          signal number.  The ----llll option causes the shell to print



GNU                Last change: 1993 August 9                  49






BASH(1)                  USER COMMANDS                    BASH(1)



          a list of signal names and their corresponding numbers.
          An argument of -------- disables option checking for the rest
          of  the  arguments.   Signals ignored upon entry to the
          shell cannot be trapped or reset.  Trapped signals  are
          reset  to their original values in a child process when
          it is created.  The return status is  false  if  either
          the  trap  name  or  number  is invalid; otherwise ttttrrrraaaapppp
          returns true.

     ttttyyyyppppeeee [----aaaallllllll] [----ttttyyyyppppeeee | ----ppppaaaatttthhhh] _n_a_m_e [_n_a_m_e ...]
          With no options, indicate how each _n_a_m_e would be inter-
          preted if used as a command name.  If the ----ttttyyyyppppeeee flag is
          used, ttttyyyyppppeeee prints a phrase which is one of _a_l_i_a_s,  _k_e_y_-
          _w_o_r_d,  _f_u_n_c_t_i_o_n,  _b_u_i_l_t_i_n, or _f_i_l_e if _n_a_m_e is an alias,
          shell reserved word, function, builtin, or  disk  file,
          respectively. If the name is not found, then nothing is
          printed, and an exit status of false is  returned.   If
          the ----ppppaaaatttthhhh flag is used, ttttyyyyppppeeee either returns the name of
          the disk file that  would  be  executed  if  _n_a_m_e  were
          specified  as a command name, or nothing if ----ttttyyyyppppeeee would
          not return _f_i_l_e.  If a command is hashed, ----ppppaaaatttthhhh  prints
          the hashed value, not necessarily the file that appears
          first in PPPPAAAATTTTHHHH.  If the ----aaaallllllll flag is used,  ttttyyyyppppeeee  prints
          all  of  the  places  that  contain an executable named
          _n_a_m_e.  This includes aliases and functions, if and only
          if  the  ----ppppaaaatttthhhh  flag  is  not  also used.  The table of
          hashed commands is not consulted when using ----aaaallllllll.  ttttyyyyppppeeee
          accepts  ----aaaa,  ----tttt,  and  ----pppp in place of ----aaaallllllll, ----ttttyyyyppppeeee, and
          ----ppppaaaatttthhhh, respectively.  An argument of -------- disables option
          checking  for  the rest of the arguments.  ttttyyyyppppeeee returns
          true if any of the arguments are found, false  if  none
          are found.

     uuuulllliiiimmmmiiiitttt [----SSSSHHHHaaaaccccddddffffmmmmssssttttppppnnnn [_l_i_m_i_t]]
          UUUUlllliiiimmmmiiiitttt provides control over the resources available to
          the  shell  and  to processes started by it, on systems
          that allow such control.  The value of _l_i_m_i_t can  be  a
          number  in  the unit specified for the resource, or the
          value uuuunnnnlllliiiimmmmiiiitttteeeedddd.  The HHHH and SSSS options specify that  the
          hard  or  soft  limit is set for the given resource.  A
          hard limit cannot be increased once it is set;  a  soft
          limit  may  be  increased  up  to the value of the hard
          limit.  If neither HHHH nor SSSS is  specified,  the  command
          applies  to  the  soft limit.  If _l_i_m_i_t is omitted, the
          current value of the soft  limit  of  the  resource  is
          printed,  unless the HHHH option is given.  When more than
          one resource is specified, the limit name and  unit  is
          printed  before  the  value.   Other options are inter-
          preted as follows:
          ----aaaa   all current limits are reported
          ----cccc   the maximum size of core files created
          ----dddd   the maximum size of a process's data segment



GNU                Last change: 1993 August 9                  50






BASH(1)                  USER COMMANDS                    BASH(1)



          ----ffff   the maximum size of files created by the shell
          ----mmmm   the maximum resident set size
          ----ssss   the maximum stack size
          ----tttt   the maximum amount of cpu time in seconds
          ----pppp   the pipe size in 512-byte blocks (this may not  be
               set)
          ----nnnn   the maximum number of open file descriptors  (most
               systems  do  not  allow this value to be set, only
               displayed)
          ----uuuu   the maximum number of  processes  available  to  a
               single user
          ----vvvv   The maximum amount of virtual memory available  to
               the shell

          An argument of -------- disables option checking for the rest
          of  the  arguments.   If  _l_i_m_i_t is given, it is the new
          value of the  specified  resource  (the  ----aaaa  option  is
          display  only).   If  no  option  is  given, then ----ffff is
          assumed.  Values are in  1024-byte  increments,  except
          for  ----tttt, which is in seconds, and ----pppp, which is in units
          of 512-byte blocks.  The return status is 0  unless  an
          illegal  option  is encountered, a non-numeric argument
          other than uuuunnnnlllliiiimmmmiiiitttteeeedddd is supplied as _l_i_m_i_t, or an  error
          occurs while setting a new limit.

     uuuummmmaaaasssskkkk [----SSSS] [_m_o_d_e]
          The user file-creation mask is set to  _m_o_d_e.   If  _m_o_d_e
          begins  with  a  digit,  it  is interpreted as an octal
          number; otherwise it is interpreted as a symbolic  mode
          mask  similar to that accepted by _c_h_m_o_d(1).  If _m_o_d_e is
          omitted, or if the ----SSSS option is supplied,  the  current
          value of the mask is printed.  The ----SSSS option causes the
          mask to be printed in symbolic form; the default output
          is  an octal number.  An argument of -------- disables option
          checking for the rest of  the  arguments.   The  return
          status  is 0 if the mode was successfully changed or if
          no _m_o_d_e argument was supplied, and false otherwise.

     uuuunnnnaaaalllliiiiaaaassss [_n_a_m_e ...]
          Remove _n_a_m_es from the list  of  defined  aliases.   The
          return  value  is  true unless a supplied _n_a_m_e is not a
          defined alias.

     uuuunnnnsssseeeetttt [-ffffvvvv] [_n_a_m_e ...]
          For each _n_a_m_e, remove the  corresponding  variable  or,
          given  the ----ffff option, function.  An argument of -------- dis-
          ables option checking for the rest  of  the  arguments.
          Note that PPPPAAAATTTTHHHH, IIIIFFFFSSSS, PPPPPPPPIIIIDDDD, PPPPSSSS1111, PPPPSSSS2222, UUUUIIIIDDDD, and EEEEUUUUIIIIDDDD can-
          not be unset.  If any of RRRRAAAANNNNDDDDOOOOMMMM, SSSSEEEECCCCOOOONNNNDDDDSSSS, or LLLLIIIINNNNEEEENNNNOOOO are
          unset, they lose their special properties, even if they
          are subsequently reset.  The exit status is true unless
          a _n_a_m_e does not exist or is non-unsettable.



GNU                Last change: 1993 August 9                  51






BASH(1)                  USER COMMANDS                    BASH(1)



     wwwwaaaaiiiitttt [_n]
          Wait for the specified process and return its  termina-
          tion status.  _n may be a process ID or a job specifica-
          tion; if a job spec is given,  all  processes  in  that
          job's  pipeline are waited for.  If _n is not given, all
          currently active child processes are  waited  for,  and
          the  return  status  is  zero.   If  _n specifies a non-
          existant process or job,  the  return  status  is  127.
          Otherwise,  the return status is the exit status of the
          last process or job waited for.

IIIINNNNVVVVOOOOCCCCAAAATTTTIIIIOOOONNNN
     A _l_o_g_i_n _s_h_e_l_l is one whose first character of argument  zero
     is a ----, or one started with the ----llllooooggggiiiinnnn flag.

     An _i_n_t_e_r_a_c_t_i_v_e shell is one whose standard input and  output
     are   both   connected   to   terminals  (as  determined  by
     _i_s_a_t_t_y(3)), or one started with the ----iiii option.  PPPPSSSS1111  is  set
     and  $$$$----  includes iiii if bbbbaaaasssshhhh is interactive, allowing a shell
     script or a startup file to test this state.

     Login shells:
       On login:
             if /_e_t_c/_p_r_o_f_i_l_e exists, source it.

             if ~/._b_a_s_h__p_r_o_f_i_l_e exists, source it,
               else if ~/._b_a_s_h__l_o_g_i_n exists, source it,
                 else if ~/._p_r_o_f_i_l_e exists, source it.

       On exit:
             if ~/._b_a_s_h__l_o_g_o_u_t exists, source it.

     Non-login interactive shells:
       On startup:
             if ~/._b_a_s_h_r_c exists, source it.

     Non-interactive shells:
       On startup:
             if the environment variable EEEENNNNVVVV is non-null, expand
             it and source the file it names, as if the command
                     if [ "$ENV" ]; then . $ENV; fi
             had been executed, but do not use PPPPAAAATTTTHHHH to search
             for the pathname.

SSSSEEEEEEEE AAAALLLLSSSSOOOO
     _T_h_e _G_n_u _R_e_a_d_l_i_n_e _L_i_b_r_a_r_y, Brian Fox
     _T_h_e _G_n_u _H_i_s_t_o_r_y _L_i_b_r_a_r_y, Brian Fox
Lennert
     _A _S_y_s_t_e_m _V _C_o_m_p_a_t_i_b_l_e _I_m_p_l_e_m_e_n_t_a_t_i_o_n _o_f _4._2_B_S_D _J_o_b _C_o_n_t_r_o_l, David
_U_t_i_l_i_t_i_e_s, IEEE
     _P_o_r_t_a_b_l_e  _O_p_e_r_a_t_i_n_g  _S_y_s_t_e_m  _I_n_t_e_r_f_a_c_e  (_P_O_S_I_X) _P_a_r_t _2: _S_h_e_l_l _a_n_d
     _H_o_w _t_o _w_e_a_r _w_e_i_r_d _p_a_n_t_s _f_o_r _f_u_n _a_n_d _p_r_o_f_i_t, Brian Fox



GNU                Last change: 1993 August 9                  52






BASH(1)                  USER COMMANDS                    BASH(1)



     _s_h(1), _k_s_h(1), _c_s_h(1)
     _e_m_a_c_s(1), _v_i(1)

FFFFIIIILLLLEEEESSSS
     /_b_i_n/_b_a_s_h
          The bbbbaaaasssshhhh executable
     /_e_t_c/_p_r_o_f_i_l_e
          The systemwide initialization file, executed for  login
          shells
     ~/._b_a_s_h__p_r_o_f_i_l_e
          The personal initialization file,  executed  for  login
          shells
     ~/._b_a_s_h_r_c
          The individual per-interactive-shell startup file
     ~/._i_n_p_u_t_r_c
          Individual _R_e_a_d_l_i_n_e initialization file

AAAAUUUUTTTTHHHHOOOORRRRSSSS
          Brian Fox, Free Software Foundation (primary author)
          bfox@ai.MIT.Edu

          Chet Ramey, Case Western Reserve University
          chet@ins.CWRU.Edu

BBBBUUUUGGGG RRRREEEEPPPPOOOORRRRTTTTSSSS
     If you find a bug in bbbbaaaasssshhhh,,,, you should report it.  But first,
     you  should  make  sure that it really is a bug, and that it
     appears in the latest version of bbbbaaaasssshhhh that you have.

     Once you have determined that a bug actually exists, mail  a
     bug  report  to  _b_a_s_h-_m_a_i_n_t_a_i_n_e_r_s@_a_i._M_I_T._E_d_u.  If you have a
     fix, you are welcome to mail that as well!  Suggestions  and
     `philosophical'   bug   reports   may   be  mailed  to  _b_u_g-
     _b_a_s_h@_a_i._M_I_T._E_d_u  or   posted   to   the   Usenet   newsgroup
     ggggnnnnuuuu....bbbbaaaasssshhhh....bbbbuuuugggg.

     ALL bug reports should include:

     The version number of bbbbaaaasssshhhh
     The hardware and operating system
     The compiler used to compile
     A description of the bug behaviour
     A short script or `recipe' which exercises the bug

     Comments and bug reports concerning this manual page  should
     be directed to _c_h_e_t@_i_n_s._C_W_R_U._E_d_u.

BBBBUUUUGGGGSSSS
     It's too big and too slow.

     There are some subtle differences between  bbbbaaaasssshhhh  and  tradi-
     tional   versions   of  sssshhhh,  mostly  because  of  the  PPPPOOOOSSSSIIIIXXXX



GNU                Last change: 1993 August 9                  53






BASH(1)                  USER COMMANDS                    BASH(1)



     specification.

     Aliases are confusing in some uses.




















































GNU                Last change: 1993 August 9                  54



