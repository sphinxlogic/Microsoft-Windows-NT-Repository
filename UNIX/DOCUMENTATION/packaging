From root Thu Apr  8 18:30 MST 1993
>From uel.co.uk!andrew  Thu Apr  8 08:45:05 1993 remote from unido
Message-Id: <199304080814.EA00444@mail.Germany.EU.net>
Received: by mail.Germany.EU.net(EUnetD-2.2.5.b) via EUnet
	id EA00444; Thu, 8 Apr 1993 10:14:46 +0200
Received: from eros.uknet.ac.uk by ben.uknet.ac.uk via UKIP with SMTP (PP) 
          id <sg.02087-0@ben.uknet.ac.uk>; Thu, 8 Apr 1993 09:15:16 +0100
Received: from uel.co.uk by eros.uknet.ac.uk with UUCP 
          id <20751-0@eros.uknet.ac.uk>; Thu, 8 Apr 1993 09:15:09 +0100
From: unido!uel.co.uk!andrew (Andrew Josey)
Date: Thu, 8 Apr 1993 07:45:05 +0100
Reply-To: andrew@uel.co.uk (Andrew Josey)
Content-Length: 6718
Content-Type: text
X-Mailer: Mail User's Shell (7.2.5 10/14/92)
To: lemis.de!grog (Greg Lehey)
Received: from uel by uel.co.uk; Thu, 8 Apr 93 07:47 BST
Subject: pkging
Status: RO


Greg
Here's some info.  this is just some guidelines we use internally
(of course that does not mean we follow them 100%)
Much of the X stuff I have been installing in the /usr/X hierarchy.


Andrew
----

Guidelines for Add-on Software

All add-on software  installed should be organised into an 
SVR4 package using pkgmk(AS_CMD).
For further details refer to the UNIX SVR4 Programmer's Guide: System Services
and Application Packaging Tools Manual. The Generic Application Binary
Interface (gABI) specification is also a good reference for this material.

This will allow the system to track all installed software thus
ensuring its integrity.

Applications should only install or create files in designated places
within the file tree as noted below.


			root or "/"
			/    |    \   \
                       /     |     \   \
                     opt    usr    etc  var
                   / | \     |      |   /  \
                 bin man lib bin   opt opt  tmp
                        / \         / \
                      pkg1 pkgn   pkg1 pkgn

/opt, /var/opt and /etc/opt\f1 are reserved in the file
tree for the installation of application software packages. Each
add-on package should adhere to the following rules.

Static package objects should be installed in /opt/lib/pkg, where
pkg is the package abbreviation.

Package objects that change in normal operations (for example,
log and spool files) should be installed in /var/opt/pkg

Machine-specific configuration files should be installed in 
/etc/opt/pkg.

Executables that are directly invoked by users should be installed
in /opt/bin

Only package objects that must reside in specific locations within the
system file tree in order to function properly (for example,
special files in /dev) should be installed in those locations.

A simple example - The mush Package
-----------------------------------

To create an SVR4 package the following files should be created

copyright

pkginfo

prototype

postinstall


copyright
---------

This contains the copyright notice for the package. For example:



Mush is copyright (c) 1986, 1987, 1988, 1989, 1990, 1991 by Dan Heller.
All Rights Reserved.   This software is not in the public domain.

Redistribution of the unmodified source code is permitted as long as all
copyright notices remain intact and all other identifying notices remain
in the code and in the binary.  This includes message headers on outgoing
mail and the startup message.  Future releases may extract the release
version from the message headers of mush-originated messages to aid in
implementing features and providing backwards compatibility with previous
versions.  Modification of the source for personal use is permitted.
Modifications sent to the authors are humbly accepted and it is their
prerogative to make the mods official.  Only the "official" sources may be
redistributed and no sale of the code or any part thereof is permitted
without written consent from the authors.  Further, no part of the code
may be used in any other product, free or otherwise, without consent from
the authors.  Distribution of sources containing adaptations of the SunView
interface to XView or to any X11-based interface is expressly prohibited.

MUSH IS PROVIDED AS IS, WITHOUT WARRANTY.  AUTHORS HEREBY DISCLAIM
ALL WARRANTIES INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES
OF FITNESS FOR A PARTICULAR PURPOSE.

pkginfo
-------

pkginfo is an ASCII file that describes the characteristics
of the package along with information that helps control the
flow of installation.  It is created by the software package
developer.

Each entry in the pkginfo file is a line that establishes
the value of a parameter in the following form:

PARAM="value"

An example follows:


$ cat pkginfo
PKG="mush"
VERSION="7.2.5"
NAME="Mail Users Shell"
CATEGORY="application"
CLASSES="none"
PREDEPEND=mush
VENDOR="(c) 1989 Dan Heller"



For more information see pkginfo(4).

prototype - package information file
--------------------------------------

prototype is an ASCII file used to specify package
information.  Each entry in the file describes a single
deliverable object.  An object may be a data file,
directory, source file, executable object, etc.  This file
is generated by the package developer (most often using the
pkgproto command).

Entries in a prototype file consist of several fields of
information separated by white space.  Comment lines begin
with a ``#'' and are ignored.

An example follows:


$ cat prototype
i pkginfo
i copyright
i postinstall
d none /opt ? ? ?
d none /opt/bin ? ? ?
d none /etc ? ? ?
d none /etc/mail ? ? ?
f none /opt/bin/mush 0755 bin bin
d none /etc/mail/mush 0755 bin bin
d none /opt/man 0755 bin bin
d none /opt/man/man1 0755 bin bin
f none /opt/man/man1/mush.1 0644 bin bin
f none /etc/mail/mush/Mushrc 0644 bin bin
f none /etc/mail/mush/cmd_help 0644 bin bin
f none /etc/mail/mush/Mailrc 0644 bin bin
f none /etc/mail/mush/Gnurc 0644 bin bin
f none /etc/mail/mush/advanced.mushrc 0644 bin bin
f none /etc/mail/mush/sample.mushrc 0644 bin bin



For more information see prototype(4).

postinstall - postinstallation commands
-------------------------------------------

This script is run with root privilege after the installation (note
that a preinstall file can be created to run commands before the
installation).

An example follows:


$ cat postinstall

echo "\n\t*** NOTE: To setup your From: address line edit /etc/mail/mush/Mushrc"
echo "\tAttempting to set this up. If not setup the From: line will default"
echo "\tto the system name. Its best to use a domain address i.e. site.domain"
echo "\talthough you must be registered."
echo "\tEnter your domain address --->\c"
read address
if [ "${address}" = "" ]
then
     echo "\tYou did not enter an address so /etc/mail/mush/Mushrc not setup."
else
	echo "\tYou entered \"$address\" as your domain name"
	echo "\tThis will now be entered in the /etc/mail/mush/Mushrc file."
	echo "\tIf you made a mistake edit the file by hand."
fi
sleep 2
echo "set hostname=\"$address\"" >>/etc/mail/mush/Mushrc


pkgmk - produce an installable package
---------------------------------------

To build the package use pkgmk. 

NOTE: pkgmk requires root privilege.

For example to create the package in /var/spool/pkg.

Ensure you are the same directory as the packaging commands,
and that the target package files are installed  in the correct
locations (this simplifies things a lot).



# pkgmk -ai386 -r /



If you want to overwrite an existing package in the /var/spool/pkg
directory use the "-o" flag to pkgmk; \f2pkgmk -ai386 -o -r /\fP.

Creating a floppy copy
----------------------

To create a floppy copy:


# pkgtrans spool diskette1 xman

