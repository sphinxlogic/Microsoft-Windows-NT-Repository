%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 14 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
3 0 /Times-Italic FMFONTDEFINE
4 0 /Helvetica FMFONTDEFINE
5 0 /Courier FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(1) 511.94 668.33 T
103.5 660.6 517.5 660.6 2 L
0.25 H
0 Z
N
103.5 90 517.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 203.4 101.33 T
103.5 135 517.5 639 R
7 X
V
2 14 Q
0 X
(Chapter 27) 103.5 629.67 T
(Philosophy) 238.5 629.67 T
(257) 315.47 629.67 T
2 10 Q
(27.1) 212.01 612.33 T
(C vs. T) 238.5 612.33 T
(cl: primitives) 266.95 612.33 T
(257) 329.98 612.33 T
(27.2) 212.01 596.33 T
(Object names) 238.5 596.33 T
(259) 303.17 596.33 T
(27.3) 212.01 580.33 T
(Commands: action-oriented vs. object-oriented) 238.5 580.33 T
(260) 436.7 580.33 T
(27.4) 212.01 564.33 T
(Application pre\336xes) 238.5 564.33 T
(261) 329.83 564.33 T
(27.5) 212.01 548.33 T
(Representing information) 238.5 548.33 T
(262) 350.93 548.33 T
2 14 Q
(Chapter 28) 103.5 511.67 T
(Interpreters and Script Evaluation) 238.5 511.67 T
(263) 441.74 511.67 T
2 10 Q
(28.1) 212.01 494.33 T
(Interpreters) 238.5 494.33 T
(263) 294.56 494.33 T
(28.2) 212.01 478.33 T
(A simple T) 238.5 478.33 T
(cl application) 282.78 478.33 T
(263) 346.9 478.33 T
(28.3) 212.01 462.33 T
(Other evaluation procedures) 238.5 462.33 T
(266) 361.73 462.33 T
(28.4) 212.01 446.33 T
(Deleting interpreters) 238.5 446.33 T
(266) 330.93 446.33 T
2 14 Q
(Chapter 29) 103.5 409.67 T
(Creating New Tcl Commands) 238.5 409.67 T
(269) 419.99 409.67 T
2 10 Q
(29.1) 212.01 392.33 T
(Command procedures) 238.5 392.33 T
(269) 336.49 392.33 T
(29.2) 212.01 376.33 T
(Registering commands) 238.5 376.33 T
(271) 340.38 376.33 T
(29.3) 212.01 360.33 T
(The result protocol) 238.5 360.33 T
(272) 324.55 360.33 T
(29.4) 212.01 344.33 T
(Procedures for managing the result) 238.5 344.33 T
(273) 388.39 344.33 T
(29.5) 212.01 328.33 T
(ClientData and deletion callbacks) 238.5 328.33 T
(275) 383.12 328.33 T
(29.6) 212.01 312.33 T
(Deleting commands) 238.5 312.33 T
(278) 328.72 312.33 T
2 14 Q
(Chapter 30) 103.5 275.67 T
(Parsing) 238.5 275.67 T
(279) 294.47 275.67 T
2 10 Q
(30.1) 212.01 258.33 T
(Numbers and booleans) 238.5 258.33 T
(279) 340.09 258.33 T
(30.2) 212.01 242.33 T
(Expression evaluation) 238.5 242.33 T
(282) 337.05 242.33 T
(30.3) 212.01 226.33 T
(Manipulating lists) 238.5 226.33 T
(283) 320.96 226.33 T
2 14 Q
(Chapter 31) 103.5 189.67 T
(Exceptions) 238.5 189.67 T
(285) 314.67 189.67 T
2 10 Q
(31.1) 212.01 172.33 T
(Completion codes.) 238.5 172.33 T
(285) 323.45 172.33 T
(31.2) 212.01 156.33 T
(Augmenting the stack trace in errorInfo) 238.5 156.33 T
(288) 406.98 156.33 T
(31.3) 212.01 140.33 T
(Setting errorCode) 238.5 140.33 T
(290) 319.83 140.33 T
FMENDPAGE
%%EndPage: "1" 2
%%Page: "2" 2
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(2) 94.5 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
2 14 Q
0 X
(Chapter 32) 94.5 629.67 T
(Accessing Tcl Variables) 229.5 629.67 T
(291) 380.27 629.67 T
2 10 Q
(32.1) 203.01 612.33 T
(Naming variables) 229.5 612.33 T
(291) 310.28 612.33 T
(32.2) 203.01 596.33 T
(Setting variable values) 229.5 596.33 T
(293) 330.54 596.33 T
(32.3) 203.01 580.33 T
(Reading variables) 229.5 580.33 T
(295) 311.39 580.33 T
(32.4) 203.01 564.33 T
(Unsetting variables) 229.5 564.33 T
(296) 316.94 564.33 T
(32.5) 203.01 548.33 T
(Setting and unsetting variable traces) 229.5 548.33 T
(296) 384.39 548.33 T
(32.6) 203.01 532.33 T
(T) 229.5 532.33 T
(race callbacks) 235.26 532.33 T
(297) 301.58 532.33 T
(32.7) 203.01 516.33 T
(Whole-array traces) 229.5 516.33 T
(299) 315.8 516.33 T
(32.8) 203.01 500.33 T
(Multiple traces) 229.5 500.33 T
(299) 299.73 500.33 T
(32.9) 203.01 484.33 T
(Unset callbacks) 229.5 484.33 T
(299) 302.5 484.33 T
(32.10) 198.01 468.33 T
(Non-existent variables) 229.5 468.33 T
(300) 329.7 468.33 T
(32.1) 198.38 452.33 T
(1) 215.5 452.33 T
(Querying trace information) 229.5 452.33 T
(300) 348.85 452.33 T
2 14 Q
(Chapter 33) 94.5 415.67 T
(Hash Tables) 229.5 415.67 T
(301) 313.05 415.67 T
2 10 Q
(33.1) 203.01 398.33 T
(Keys and values) 229.5 398.33 T
(303) 305 398.33 T
(33.2) 203.01 382.33 T
(Creating and deleting hash tables) 229.5 382.33 T
(303) 372.18 382.33 T
(33.3) 203.01 366.33 T
(Creating entries) 229.5 366.33 T
(304) 303.06 366.33 T
(33.4) 203.01 350.33 T
(Finding existing entries) 229.5 350.33 T
(305) 333.89 350.33 T
(33.5) 203.01 334.33 T
(Searching) 229.5 334.33 T
(306) 279.46 334.33 T
(33.6) 203.01 318.33 T
(Deleting entries) 229.5 318.33 T
(307) 303.06 318.33 T
(33.7) 203.01 302.33 T
(Statistics) 229.5 302.33 T
(307) 275.6 302.33 T
2 14 Q
(Chapter 34) 94.5 265.67 T
(String Utilities) 229.5 265.67 T
(309) 326.3 265.67 T
2 10 Q
(34.1) 203.01 248.33 T
(Dynamic strings) 229.5 248.33 T
(309) 305.29 248.33 T
(34.2) 203.01 232.33 T
(Command completeness) 229.5 232.33 T
(312) 337.49 232.33 T
(34.3) 203.01 216.33 T
(String matching) 229.5 216.33 T
(313) 303.63 216.33 T
2 14 Q
(Chapter 35) 94.5 179.67 T
(POSIX Utilities) 229.5 179.67 T
(315) 332.51 179.67 T
2 10 Q
(35.1) 203.01 162.33 T
(T) 229.5 162.33 T
(ilde expansion) 235.26 162.33 T
(315) 303.27 162.33 T
(35.2) 203.01 146.33 T
(Generating messages) 229.5 146.33 T
(317) 324.15 146.33 T
FMENDPAGE
%%EndPage: "2" 3
%%Page: "3" 3
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(3) 511.94 668.33 T
103.5 660.6 517.5 660.6 2 L
0.25 H
0 Z
N
103.5 90 517.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 203.4 101.33 T
103.5 135 517.5 639 R
7 X
V
2 10 Q
0 X
(35.3) 212.01 632.33 T
(Creating subprocesses) 238.5 632.33 T
(318) 337.6 632.33 T
(35.4) 212.01 616.33 T
(Background processes) 238.5 616.33 T
(319) 338.14 616.33 T
FMENDPAGE
%%EndPage: "3" 4
%%Page: "4" 4
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(4) 94.5 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
FMENDPAGE
%%EndPage: "4" 5
%%Page: "255" 5
612 792 0 FMBEGINPAGE
103.5 675 517.5 675 2 L
7 X
0 K
V
2 H
2 Z
0 X
N
103.5 135 517.5 135 2 L
7 X
V
0 X
N
103.5 162 517.5 576 R
7 X
V
1 36 Q
0 X
-0.72 (Part III:) 248.26 552 S
-0.72 (W) 129.11 468 S
-0.72 (riting T) 163.74 468 S
-0.72 (cl Applications) 273.67 468 S
-0.72 ( in C) 275.29 426 S
FMENDPAGE
%%EndPage: "255" 6
%%Page: "256" 6
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(256) 94.5 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
FMENDPAGE
%%EndPage: "256" 7
%%Page: "257" 7
612 792 0 FMBEGINPAGE
103.5 675 517.5 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
103.5 450 517.5 450 2 L
7 X
V
2 Z
0 X
N
103.5 108 517.5 126 R
7 X
V
0 10 Q
0 X
(257) 500.83 119.33 T
103.5 54 517.5 108 R
7 X
V
2 9 Q
0 X
(Copyright \251 1993 Addison-W) 157.5 102 T
(esley Publishing Company) 266.71 102 T
(, Inc.) 362.5 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 157.5 91 T
(. Any) 491.17 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 157.5 80 T
-0.34 (lisher) 157.5 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 176.98 69 P
(does not of) 157.5 58 T
(fer warranties in regard to this draft.) 197.28 58 T
1 24 Q
(Chapter 27) 157.5 605 T
-0.48 (Philosophy) 157.5 575 S
103.5 135 517.5 423 R
7 X
V
2 10 Q
0 X
(This part of the book describes how to write C applications based on T) 157.5 416.33 T
(cl. Since the T) 439.67 416.33 T
(cl) 496.7 416.33 T
(interpreter is implemented as a C library package, it can be linked into any C or C++ pro-) 157.5 404.33 T
(gram. The enclosing application invokes procedures in the T) 157.5 392.33 T
(cl library to create interpret-) 399.13 392.33 T
(ers, evaluate T) 157.5 380.33 T
(cl scripts, and extend the built-in command set with new application-) 215.36 380.33 T
-0.14 (speci\336c commands. T) 157.5 368.33 P
-0.14 (cl also provides a number of utility procedures for use in implement-) 243.96 368.33 P
(ing new commands; these procedures can be used to access T) 157.5 356.33 T
(cl variables, parse ar) 402.71 356.33 T
(gu-) 484.68 356.33 T
(ments, manipulate T) 157.5 344.33 T
(cl lists, evaluate T) 238.7 344.33 T
(cl expressions, and so on. This chapter discusses) 310.73 344.33 T
(several high-level issues to consider when designing a T) 157.5 332.33 T
(cl application, such as what new) 382.2 332.33 T
(T) 157.5 320.33 T
(cl commands to implement, how to name objects, and what form to use for command) 162.91 320.33 T
(results. The following chapters present the speci\336c C interfaces provided by the T) 157.5 308.33 T
(cl) 484.06 308.33 T
(library) 157.5 296.33 T
(.) 183.5 296.33 T
3 F
(Note:) 124.49 281.33 T
(The interfaces described in Part III ar) 157.5 281.33 T
(e those that will be available in T) 309.81 281.33 T
(cl 7.0, which had) 442.43 281.33 T
(not been r) 157.5 271.33 T
(eleased at the timex this draft was pr) 197.66 271.33 T
(epar) 344.71 271.33 T
(ed. Thus ther) 362.66 271.33 T
(e may some differ) 414.76 271.33 T
(ences) 485.17 271.33 T
(between what you r) 157.5 261.33 T
(ead her) 235.14 261.33 T
(e and what you can do with your curr) 265.02 261.33 T
(ent version of T) 415.12 261.33 T
(cl. Ther) 476.67 261.33 T
(e) 507.39 261.33 T
(ar) 157.5 251.33 T
(e almost no differ) 166.01 251.33 T
(ences in functionality; the differ) 235.89 251.33 T
(ences mostly have to do with the) 363.22 251.33 T
(interfaces. Be sur) 157.5 241.33 T
(e to consult your manual entries when you actually write C code.) 227.36 241.33 T
103.5 199.98 517.5 203 C
157.5 201.49 517.5 201.49 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 201.49 148.5 201.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(27.1) 123.36 207 T
(C vs. T) 157.5 207 T
(cl: primitives) 195.94 207 T
2 10 Q
(In order to make a T) 157.5 183.31 T
(cl application as \337exible and powerful as possible, you should or) 238.68 183.31 T
(ga-) 497.49 183.31 T
(nize its C code as a set of new T) 157.5 171.31 T
(cl commands that provide a clean set of) 285.87 171.31 T
3 F
(primitive opera-) 446.86 171.31 T
(tions) 157.5 159.31 T
2 F
(. Y) 176.94 159.31 T
(ou need not implement every imaginable feature in C, since new features can) 188.15 159.31 T
(always be implemented later as T) 157.5 147.31 T
(cl scripts. The purpose of the C code is to provide basic) 290.87 147.31 T
49.5 351 103.5 423 C
40.5 360 202.5 414 R
7 X
0 K
V
1 9 Q
0 X
(FIGURE  27) 40.5 408 T
(T) 40.5 387 T
(ABLE  27) 45.83 387 T
31.5 351 130.5 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "257" 8
%%Page: "258" 8
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(258) 94.5 668.33 T
4 F
(Philosophy) 459.62 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
2 10 Q
0 X
(operations that make it easy to implement a wide variety of useful scripts. If your C code) 148.5 632.33 T
(lumps several functions together into a single command then it won\325) 148.5 620.27 T
(t be possible to write) 422.59 620.27 T
(scripts that use the functions separately and your application won\325) 148.5 608.2 T
(t be very \337exible or) 412.86 608.2 T
-0 (extensible. Instead, each command should provide a single function, and you should com-) 148.5 596.14 P
(bine them together with T) 148.5 584.08 T
(cl scripts. Y) 251.62 584.08 T
(ou\325ll probably \336nd that many of your application\325) 298.65 584.08 T
(s) 497.14 584.08 T
(essential features are implemented as scripts.) 148.5 572.01 T
(Given a choice between implementing a particular piece of functionality as a T) 166.5 560.01 T
(cl) 481.67 560.01 T
-0 (script or as C code, it\325) 148.5 547.95 P
-0 (s generally better to implement it as a script. Scripts are usually eas-) 236.21 547.95 P
(ier to write, they can be modi\336ed dynamically) 148.5 535.88 T
(, and you can debug them more quickly) 332.17 535.88 T
(because you don\325) 148.5 523.82 T
(t have to recompile after each bug \336x. However) 218.26 523.82 T
(, there are three reasons) 408.54 523.82 T
(why it is sometimes better to implement a new function in C. First, you may need to) 148.5 511.75 T
(access low-level machine facilities that aren\325) 148.5 499.69 T
(t accessible in T) 327.89 499.69 T
(cl scripts. For example, the) 391.87 499.69 T
(T) 148.5 487.62 T
(cl built-in commands don\325) 153.91 487.62 T
(t provide access to network sockets, so if you want to use the) 259.5 487.62 T
(network you\325ll have to write C code to do it. Second, you may be concerned about ef) 148.5 475.56 T
(\336-) 488.07 475.56 T
(ciency) 148.5 463.49 T
(. For example, if you need to carry out intensive numerical calculations, or if you) 173.94 463.49 T
-0.07 (need to operate on lar) 148.5 451.43 P
-0.07 (ge arrays of data, you\325ll be able to do it more ef) 234.65 451.43 P
-0.07 (\336ciently in C than in) 424.15 451.43 P
(T) 148.5 439.37 T
(cl. The third reason for implementing in C is complexity) 153.91 439.37 T
(. If you are manipulating com-) 379.23 439.37 T
(plex data structures, or if you\325re writing a lar) 148.5 427.3 T
(ge amount of code, the task will probably be) 327.9 427.3 T
(more manageable in C than in T) 148.5 415.24 T
(cl. T) 276.6 415.24 T
(cl provides very little structure; this makes it easy to) 294.22 415.24 T
(connect dif) 148.5 403.17 T
(ferent things together but hard to manage lar) 193.01 403.17 T
(ge complex scripts. C provides) 370.75 403.17 T
(more structure, which is cumbersome when you\325re implementing small things but indis-) 148.5 391.11 T
(pensable when you\325re implementing big complicated things.) 148.5 379.04 T
-0.23 (As an example, consider a program to manipulate weather reports. Suppose that infor-) 166.5 367.04 P
-0.4 (mation about current weather is available for a lar) 148.5 354.98 P
-0.4 (ge number of measurement stations from) 344.37 354.98 P
-0 (one or more network sites using a well-de\336ned network protocol, and you want to write a) 148.5 342.91 P
(T) 148.5 330.85 T
(cl application to manipulate this data. Users of your application might wish to answer) 153.91 330.85 T
(questions like:) 148.5 318.79 T
2 12 Q
(\245) 148.5 303.79 T
2 10 Q
(What is the complete weather situation at station X?) 159.3 303.79 T
2 12 Q
(\245) 148.5 288.79 T
2 10 Q
(What is the current temperature at station X?) 159.3 288.79 T
2 12 Q
(\245) 148.5 273.78 T
2 10 Q
(Which station in the country has the highest current temperature?) 159.3 273.78 T
2 12 Q
(\245) 148.5 258.78 T
2 10 Q
(At which stations is it currently raining?) 159.3 258.78 T
(Y) 148.5 246.78 T
(ou\325ll need to write some C code for this application in order to retrieve weather reports) 154.72 246.78 T
(over the network. What form should these new commands take?) 148.5 234.72 T
-0.09 (One approach is to implement each of the above functions in C as a separate T) 166.5 222.72 P
-0.09 (cl com-) 478.34 222.72 P
(mand. For example, you might provide a command that retrieves the weather report from) 148.5 210.66 T
(a station, formats it into prose, and prints it on standard output. Unfortunately this com-) 148.5 198.59 T
(mand can only be used for one purpose; you\325d have to provide a second command for sit-) 148.5 186.53 T
(uations where you want to retrieve a report without printing it out \050e.g. to \336nd all the) 148.5 174.46 T
(station where it is raining\051.) 148.5 162.4 T
(Instead, I\325d suggest providing just two commands in C: a) 166.5 150.4 T
5 F
(wthr_stations) 397.75 150.4 T
2 F
( com-) 475.71 150.4 T
(mand that returns a list of all the stations for which weather reports are available, and a) 148.5 138.33 T
FMENDPAGE
%%EndPage: "258" 9
%%Page: "259" 9
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(27.2 Object names) 103.5 668.33 T
0 F
(259) 500.83 668.33 T
103.5 660.6 517.5 660.6 2 L
0.25 H
0 Z
N
103.5 90 517.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 203.4 101.33 T
103.5 135 517.5 639 R
7 X
V
5 10 Q
0 X
(wthr_report) 157.5 632.33 T
2 F
( command that returns a complete weather report for a particular station.) 223.46 632.33 T
(These commands don\325) 157.5 620.28 T
(t implement any of the above features directly) 247.81 620.28 T
(, but they make it) 431.19 620.28 T
-0.09 (easy to implement all of the features. For example, T) 157.5 608.22 P
-0.09 (cl already has a) 367.82 608.22 P
5 F
-0.21 (puts) 431.86 608.22 P
2 F
-0.09 ( command that) 455.85 608.22 P
-0.17 (can be used to print information on standard output, so the \336rst feature \050printing a weather) 157.5 596.16 P
(report for a station\051 can be implemented with a script that calls) 157.5 584.1 T
5 F
(wthr_report) 410.65 584.1 T
2 F
(, formats) 476.61 584.1 T
-0.05 (the report, and prints it with) 157.5 572.04 P
5 F
-0.11 (puts) 271.32 572.04 P
2 F
-0.05 (. The second feature \050printing just the temperature\051 can) 295.31 572.04 P
-0.08 (be implemented by extracing the temperature from the result of) 157.5 559.98 P
5 F
-0.19 (wthr_report) 412.63 559.98 P
2 F
-0.08 ( and then) 478.6 559.98 P
(printing it alone. The third and fourth features \050\336nding the hottest station and \336nding all) 157.5 547.93 T
(stations where it is raining\051 can be implemented with scripts that invoke) 157.5 535.87 T
5 F
(wthr_report) 447.87 535.87 T
2 F
-0.16 (for each station and extract and print relevant information. Many other features could also) 157.5 523.81 P
(be implemented, such as printing a sorted list of the ten stations with the highest tempera-) 157.5 511.75 T
(tures.) 157.5 499.69 T
(The preceding paragraph suggests that lower) 175.5 487.69 T
(-level commands are better than higher) 354.32 487.69 T
(-) 510.39 487.69 T
(level ones. However) 157.5 475.64 T
(, if you make the commands too low level then T) 238.98 475.64 T
(cl scripts will) 434.54 475.64 T
-0.23 (become unnecessarily complicated and you may lose opportunities for ef) 157.5 463.58 P
-0.23 (\336cient implemen-) 446.94 463.58 P
-0.4 (tation. For example, instead of providing a single command that retrieves a weather report,) 157.5 451.52 P
(you might provide separate T) 157.5 439.46 T
(cl commands for each step of the protocol that retrieves a) 274.5 439.46 T
(report: one command to connect to a server) 157.5 427.4 T
(, one command to select a particular station,) 330.58 427.4 T
(one command to request a report for the selected station, and so on. Although this results) 157.5 415.35 T
-0.13 (in more primitive commands, it is probably a mistake. The extra commands don\325) 157.5 403.29 P
-0.13 (t provide) 479.45 403.29 P
(any additional functionality and they make it more tedious to write T) 157.5 391.23 T
(cl scripts. Further-) 432.46 391.23 T
-0.05 (more, suppose that network communication delays are high, so that it takes a long time to) 157.5 379.17 P
(get a response from a weather server) 157.5 367.11 T
(, but the server allows you to request reports for sev-) 303.63 367.11 T
-0.17 (eral stations at once and get them all back in about the same time as a single report. In this) 157.5 355.05 P
-0.23 (situation you might want an even higher level interface, perhaps a T) 157.5 343 P
-0.23 (cl command that takes) 426.27 343 P
(any number of stations as ar) 157.5 330.94 T
(guments and retrieves reports for all of them at once. This) 269.74 330.94 T
(would allow the C code to amortize the communication delays across several report) 157.5 318.88 T
-0.05 (retrievals and it might permit a much more ef) 157.5 306.82 P
-0.05 (\336cient implementation of operations such as) 338.46 306.82 P
(\336nding the station with the highest temperature.) 157.5 294.77 T
-0.14 (T) 175.5 282.77 P
-0.14 (o summarize, you should pick commands that are primitive enough so that all of the) 180.91 282.77 P
-0.31 (application\325) 157.5 270.71 P
-0.31 (s key functions are available individually through T) 204.69 270.71 P
-0.31 (cl commands. On the other) 408.6 270.71 P
(hand, you should pick commands that are high-level enough to hide unimportant details) 157.5 258.65 T
(and capitalize on opportunities for ef) 157.5 246.59 T
(\336cient implementation.) 304.71 246.59 T
103.5 203.23 517.5 206.26 C
157.5 204.74 517.5 204.74 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 204.74 148.5 204.74 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(27.2) 123.36 210.26 T
(Object names) 157.5 210.26 T
2 10 Q
(The easiest way to think about your C code is in terms of) 157.5 186.57 T
3 F
(objects) 388.18 186.57 T
2 F
(. The C code in a T) 416.5 186.57 T
(cl) 492.69 186.57 T
(application typically implements a few new kinds of objects, which are manipulated by) 157.5 174.51 T
(the application\325) 157.5 162.45 T
(s new T) 219.41 162.45 T
(cl commands. In the C code of your application you\325ll probably) 250.35 162.45 T
(refer to the objects using pointers to the C structures that represent the objects, but you) 157.5 150.39 T
-0.3 (can\325) 157.5 138.33 P
-0.3 (t use pointers in T) 174.52 138.33 P
-0.3 (cl scripts. Strings of some sort will have to be used in the T) 244.8 138.33 P
-0.3 (cl scripts,) 477.29 138.33 P
FMENDPAGE
%%EndPage: "259" 10
%%Page: "260" 10
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(260) 94.5 668.33 T
4 F
(Philosophy) 459.62 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
2 10 Q
0 X
(and the C code that implements your commands will have to translate from those strings) 148.5 632.33 T
(to internal pointers. For example, the objects in the weather application are weather sta-) 148.5 620.27 T
(tions; the) 148.5 608.21 T
5 F
(wthr_stations) 187.93 608.21 T
2 F
( command returns a list of station names, and the) 265.89 608.21 T
5 F
(wthr_report) 148.5 596.15 T
2 F
( command takes a station name as an ar) 214.46 596.15 T
(gument.) 372.5 596.15 T
(A simple but dangerous way to name objects is to use their internal addresses. For) 166.5 584.15 T
(example, in the weather application you could name each station with a hexadecimal) 148.5 572.09 T
(string giving the internal address of the C structure for that station: the command that) 148.5 560.03 T
(returns a list of stations would return a list of hexadecimal strings, and the command to) 148.5 547.97 T
(retrieve a weather report would take one of these hexadecimal strings as ar) 148.5 535.91 T
(gument. When) 446.96 535.91 T
-0.34 (the C code receives one of these strings, it could produce a pointer by converting the string) 148.5 523.85 P
-0.33 (to a binary number) 148.5 511.79 P
-0.33 (. I don\325) 222.73 511.79 P
-0.33 (t recommend using this approach in practice because it is hard to) 251.02 511.79 P
(verify that a hexadecimal string refers to a valid object. If a user speci\336es a bad address it) 148.5 499.73 T
-0.2 (might cause the C code to make wild memory accesses, which could cause the application) 148.5 487.67 P
-0.12 (to crash. In addition, hexadecimal strings don\325) 148.5 475.61 P
-0.12 (t convey any meaningful information to the) 333.05 475.61 P
(user) 148.5 463.55 T
(.) 164.6 463.55 T
(Instead, I recommend using names that can be veri\336ed and that convey meaningful) 166.5 451.55 T
-0.09 (information. One simple approach is to keep a hash table in your C code that maps from a) 148.5 439.49 P
(string name to the internal pointer for the object; a name is only valid if it appears in the) 148.5 427.43 T
(hash table. The T) 148.5 415.38 T
(cl library implements \337exible hash tables to make it easy for you to use) 217.19 415.38 T
(this approach \050see Chapter 33\051. If you use a hash table then you can use any strings what-) 148.5 403.32 T
(soever for names, so you might as well pick ones that convey information. For example,) 148.5 391.26 T
(Tk uses hierarchical path names like) 148.5 379.2 T
5 F
(.menu.help) 296.72 379.2 T
2 F
( for windows in order to indicate the) 356.69 379.2 T
(window\325) 148.5 367.14 T
(s position in the window hierarchy) 183.48 367.14 T
(. T) 321.36 367.14 T
(cl uses names like) 331.76 367.14 T
5 F
(f) 406.71 367.14 T
(ile3) 412.7 367.14 T
2 F
( or) 436.69 367.14 T
5 F
(f) 450.01 367.14 T
(ile4) 456.01 367.14 T
2 F
( for) 480 367.14 T
(open \336les; these names don\325) 148.5 355.08 T
(t convey a lot of information, but they at least include the let-) 261.58 355.08 T
(ters \322) 148.5 343.02 T
5 F
(f) 169.87 343.02 T
(ile) 175.87 343.02 T
2 F
(\323 to suggest that they\325re used for \336le access, and the number is the POSIX \336le) 193.85 343.02 T
(descriptor number for the open \336le. For the weather application I\325d recommend using sta-) 148.5 330.96 T
-0.35 (tion names such as the city where the station is located. Or) 148.5 318.9 P
-0.35 (, if the U.S. W) 378.53 318.9 P
-0.35 (eather Service has) 434.34 318.9 P
(well-de\336ned names for its stations then I\325d suggest using those names.) 148.5 306.84 T
94.5 263.48 508.5 266.5 C
148.5 264.99 508.5 264.99 2 L
0.5 H
2 Z
0 X
0 K
N
94.5 264.99 139.5 264.99 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(27.3) 114.36 270.5 T
(Commands: action-oriented vs. object-oriented) 148.5 270.5 T
2 10 Q
(There are two approaches you can use when de\336ning commands in your application,) 148.5 246.81 T
(which I call) 148.5 234.75 T
3 F
(action-oriented) 198.18 234.75 T
2 F
( and) 259.81 234.75 T
3 F
(object-oriented) 279.24 234.75 T
2 F
(. In the action-oriented approach there is) 340.3 234.75 T
(one command for each action that can be taken on an object, and the command takes an) 148.5 222.69 T
(object name as an ar) 148.5 210.63 T
(gument. The weather application is action-oriented: the) 229.91 210.63 T
5 F
(wthr_re-) 453.64 210.63 T
(port) 148.5 198.57 T
2 F
( command corresponds to an action \050retrieve weather report\051 and it takes a weather) 172.49 198.57 T
(station name as an ar) 148.5 186.51 T
(gument. T) 232.14 186.51 T
(cl\325) 272.53 186.51 T
(s \336le commands are also action-oriented: there are sepa-) 282.53 186.51 T
(rate commands for opening \336les, reading, writing, closing, etc.) 148.5 174.45 T
(In the object-oriented approach there is one command for each object, and the name) 166.5 162.45 T
(of the command is the name of the object. When the command is invoked its \336rst ar) 148.5 150.39 T
(gu-) 483.38 150.39 T
-0.18 (ment speci\336es the operation to perform on the object. Tk\325) 148.5 138.33 P
-0.18 (s widgets work this way: if there) 376.76 138.33 P
FMENDPAGE
%%EndPage: "260" 11
%%Page: "261" 11
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(27.4 Application pre\336xes) 103.5 668.33 T
0 F
(261) 500.83 668.33 T
103.5 660.6 517.5 660.6 2 L
0.25 H
0 Z
N
103.5 90 517.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 203.4 101.33 T
103.5 135 517.5 639 R
7 X
V
2 10 Q
0 X
(is a button widget) 157.5 632.33 T
5 F
(.b) 231.35 632.33 T
2 F
( then there is also a command named) 243.34 632.33 T
5 F
(.b) 393.79 632.33 T
2 F
(; you can invoke) 405.78 632.33 T
(\322) 157.5 620.33 T
5 F
(.b) 161.94 620.33 T
(f) 179.93 620.33 T
(lash) 185.92 620.33 T
2 F
(\323 to \337ash the widget or \322) 209.91 620.33 T
5 F
(.b) 308.18 620.33 T
(invoke) 326.17 620.33 T
2 F
(\323 to invoke its action.) 362.15 620.33 T
(The action-oriented approach is best when there are a great many objects or the) 175.5 608.33 T
(objects are unpredictable or short-lived. For example, it wouldn\325) 157.5 596.33 T
(t make sense to imple-) 415.47 596.33 T
(ment string operations using an object-oriented approach because there would have to be) 157.5 584.33 T
(one command for each string, and in practice T) 157.5 572.33 T
(cl applications have lar) 345.82 572.33 T
(ge numbers of) 438.07 572.33 T
(strings that are created and deleted on a command-by-command basis. The weather appli-) 157.5 560.33 T
(cation uses the action-oriented approach because there are only a few actions and and) 157.5 548.33 T
-0.39 (potentially a lar) 157.5 536.33 P
-0.39 (ge number of stations. In addition, the application probably doesn\325) 219.27 536.33 P
-0.39 (t need to) 481.76 536.33 P
(keep around state for each station all the time; it just uses the station name to look up) 157.5 524.33 T
(weather information when requested.) 157.5 512.33 T
(The object-oriented approach works well when the number of objects isn\325) 175.5 500.33 T
(t too great) 470.65 500.33 T
(\050e.g. a few tens or hundreds\051 and the objects are well-de\336ned and exist for at least moder-) 157.5 488.33 T
(ate amounts of time. Tk\325) 157.5 476.33 T
(s widgets \336t this description. The object-oriented approach has) 255.5 476.33 T
(the advantage that it doesn\325) 157.5 464.33 T
(t pollute the command name space with lots of commands for) 267.24 464.33 T
(individual actions. For example in the action-oriented approach the command \322delete\323) 157.5 452.33 T
(might be de\336ned for one kind of object, thereby preventing its use for any other kind of) 157.5 440.33 T
-0.2 (object. In the object-oriented approach you only have to make sure that your object names) 157.5 428.33 P
(don\325) 157.5 416.33 T
(t con\337ict with existing commands or other object names. For example, Tk claims all) 175.64 416.33 T
-0.07 (command names starting with \322.\323 for its widget commands. The object-oriented approach) 157.5 404.33 P
-0.29 (also makes it possible for dif) 157.5 392.33 P
-0.29 (ferent objects to implement the same action in dif) 271.06 392.33 P
-0.29 (ferent ways.) 466.74 392.33 P
(For example, if) 157.5 380.33 T
5 F
(.t) 221.35 380.33 T
2 F
( is a text widget and) 233.34 380.33 T
5 F
(.l) 316.06 380.33 T
2 F
( is a listbox widget in Tk, the) 328.06 380.33 T
5 F
(commands) 447.16 380.33 T
(\322.t) 157.5 368.33 T
(yview 0) 181.49 368.33 T
2 F
(\323 and \322) 223.46 368.33 T
5 F
(.l yview 0) 251.77 368.33 T
2 F
(\323 are implemented in very dif) 311.73 368.33 T
(ferent ways even) 429.52 368.33 T
(though they produce the same logical ef) 157.5 356.33 T
(fect \050adjust the view to make the topmost line vis-) 317.2 356.33 T
(ible at the top of the window\051.) 157.5 344.33 T
3 F
(Note:) 124.49 329.33 T
(Although Tk\325) 157.5 329.33 T
(s \336le commands ar) 208.68 329.33 T
(e implemented using the action-oriented appr) 283.54 329.33 T
(oach, in) 465.55 329.33 T
-0.01 (r) 157.5 319.33 P
-0.01 (etr) 161.02 319.33 P
-0.01 (ospect I wish that I had used the object-oriented fashion, since open \336les \336t the object-) 171.75 319.33 P
(oriented model nicely) 157.5 309.33 T
(.) 243.55 309.33 T
103.5 267.98 517.5 271 C
157.5 269.49 517.5 269.49 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 269.49 148.5 269.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(27.4) 123.36 275 T
(Application pre\336xes) 157.5 275 T
2 10 Q
(If you use the action-oriented approach, I strongly recommend that you add a unique pre-) 157.5 251.31 T
(\336x to each of your command names. For example, I used the pre\336x \322) 157.5 239.31 T
5 F
(wthr_) 432.58 239.31 T
2 F
(\323 for the) 462.56 239.31 T
(weather commands. This guarantees that your commands won\325) 157.5 227.31 T
(t con\337ict with other com-) 409.91 227.31 T
-0.08 (mands as long as your pre\336x is unique, and it makes it possible to mer) 157.5 215.31 P
-0.08 (ge dif) 436.81 215.31 P
-0.08 (ferent applica-) 459.59 215.31 P
-0.1 (tions together without name con\337icts. I also recommend using pre\336xes for T) 157.5 203.31 P
-0.1 (cl procedures) 461.64 203.31 P
(that you de\336ne and for global variables, again so that multiple packages can be used) 157.5 191.31 T
(together) 157.5 179.31 T
(.) 189.7 179.31 T
FMENDPAGE
%%EndPage: "261" 12
%%Page: "262" 12
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(262) 94.5 668.33 T
4 F
(Philosophy) 459.62 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
94.5 623.98 508.5 627 C
148.5 625.49 508.5 625.49 2 L
0.5 H
2 Z
0 X
0 K
N
94.5 625.49 139.5 625.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(27.5) 114.36 631 T
(Representing information) 148.5 631 T
2 10 Q
(The information passed into and out of your T) 166.5 607.31 T
(cl commands should be formatted for) 350.68 607.31 T
-0.14 (easy processing by T) 148.5 595.31 P
-0.14 (cl scripts, not necessarily for maximum human readability) 231.47 595.31 P
-0.14 (. For exam-) 462.43 595.31 P
-0.26 (ple, the command that retrieves a weather report shouldn\325) 148.5 583.31 P
-0.26 (t return English prose describing) 376.86 583.31 P
(the weather) 148.5 571.31 T
(. Instead, it should return the information in a structured form that makes it) 194.29 571.31 T
-0.26 (easy to extract the dif) 148.5 559.31 P
-0.26 (ferent components under the control of a T) 233.3 559.31 P
-0.26 (cl script. Y) 402 559.31 P
-0.26 (ou might return) 444.61 559.31 P
-0.01 (the report as a list consisting of pairs of elements, where the \336rst element of each pair is a) 148.5 547.31 P
(keyword and the second element is a value associated with that keyword, such as:) 148.5 535.31 T
5 F
(temp 53 hi 68 lo 37 precip .02 sky part) 175.5 520.31 T
2 F
-0.34 (This indicates that the current temperature at the station is 53 degrees, the high and low for) 148.5 506.31 P
-0.08 (the last 24 hours were 68 and 37 degrees, .02 inches of rain has fallen in the last 24 hours,) 148.5 494.31 P
(and the sky is partly cloudy) 148.5 482.31 T
(. Or) 258.06 482.31 T
(, the command might store the report in an associative) 273.2 482.31 T
(array where each keyword is used as the name of an array element and the corresponding) 148.5 470.31 T
(value is stored in that element. Either of these approaches would make it easy to extract) 148.5 458.31 T
(components of the report. Y) 148.5 446.31 T
(ou can always reformat the information to make it more read-) 259.92 446.31 T
(able just before displaying it to the user) 148.5 434.31 T
(.) 305.9 434.31 T
-0.34 (Although machine readability is more important than human readability) 166.5 422.31 P
-0.34 (, you need not) 450.73 422.31 P
(gratuitously sacri\336ce readability) 148.5 410.31 T
(. For example, the above list could have been encoded as) 276.65 410.31 T
5 F
(18 53 7 68 9 37 5 .02 17 4) 175.5 395.31 T
2 F
(where) 148.5 381.31 T
5 F
(18) 175.41 381.31 T
2 F
( is a keyword for current temperature,) 187.41 381.31 T
5 F
(7) 341.16 381.31 T
2 F
( for 24-hour high, and so on. This is) 347.16 381.31 T
(unnecessarily confusing and will not make your scripts any more ef) 148.5 369.31 T
(\336cient, since T) 418.68 369.31 T
(cl han-) 477.11 369.31 T
(dles strings at least as ef) 148.5 357.31 T
(\336ciently as numbers.) 245.2 357.31 T
FMENDPAGE
%%EndPage: "262" 13
%%Page: "263" 13
612 792 0 FMBEGINPAGE
103.5 675 517.5 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
103.5 450 517.5 450 2 L
7 X
V
2 Z
0 X
N
103.5 108 517.5 126 R
7 X
V
0 10 Q
0 X
(263) 500.83 119.33 T
103.5 54 517.5 108 R
7 X
V
2 9 Q
0 X
(Copyright \251 1993 Addison-W) 157.5 102 T
(esley Publishing Company) 266.71 102 T
(, Inc.) 362.5 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 157.5 91 T
(. Any) 491.17 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 157.5 80 T
-0.34 (lisher) 157.5 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 176.98 69 P
(does not of) 157.5 58 T
(fer warranties in regard to this draft.) 197.28 58 T
1 24 Q
(Chapter 28) 157.5 605 T
-0.48 (Interpr) 157.5 575 S
-0.48 (eters and Script Evaluation) 229.65 575 S
103.5 135 517.5 423 R
7 X
V
2 10 Q
0 X
(This chapter describes how to create and delete interpreters and how to use them to evalu-) 157.5 416.33 T
(ate T) 157.5 404.25 T
(cl scripts. T) 177.06 404.25 T
(able 28.1 summarizes the library procedures that are discussed in the) 223.27 404.25 T
(chapter) 157.5 392.17 T
(.) 186.36 392.17 T
103.5 348.82 517.5 351.84 C
157.5 350.33 517.5 350.33 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 350.33 148.5 350.33 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(28.1) 123.36 355.84 T
(Interpreters) 157.5 355.84 T
2 10 Q
-0.2 (The central data structure manipulated by the T) 157.5 332.15 P
-0.2 (cl library is a C structure of type) 344.98 332.15 P
5 F
-0.48 (Tcl_In-) 475.52 332.15 P
(terp) 157.5 320.07 T
2 F
(. I\325ll refer to these structures \050or pointers to them\051 as) 181.49 320.07 T
3 F
(interpr) 392.99 320.07 T
(eters) 420.39 320.07 T
2 F
(. Almost all of the) 439.82 320.07 T
(T) 157.5 307.99 T
(cl library procedures take a pointer to a) 162.91 307.99 T
5 F
(Tcl_Interp) 322.22 307.99 T
2 F
( structure as an ar) 382.19 307.99 T
(gument. An) 452.5 307.99 T
-0.22 (interpreter embodies the execution state of a T) 157.5 295.91 P
-0.22 (cl script, including commands implemented) 340.94 295.91 P
(in C, T) 157.5 283.83 T
(cl procedures, variables, and an execution stack that re\337ects partially-evaluated) 184.85 283.83 T
-0.11 (commands and T) 157.5 271.75 P
-0.11 (cl procedures. Most T) 225.42 271.75 P
-0.11 (cl applications use only a single interpreter but it is) 312.09 271.75 P
(possible for a single process to manage several independent interpreters.) 157.5 259.67 T
103.5 216.32 517.5 219.34 C
157.5 217.83 517.5 217.83 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 217.83 148.5 217.83 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(28.2) 123.36 223.34 T
(A simple T) 157.5 223.34 T
(cl application) 217.26 223.34 T
2 10 Q
(The program below illustrates how to create and use an interpreter) 157.5 199.65 T
(. It is a simple but com-) 422.29 199.65 T
-0.09 (plete T) 157.5 187.57 P
-0.09 (cl application that evaluates a T) 184.74 187.57 P
-0.09 (cl script stored in a \336le and prints the result or error) 310.43 187.57 P
(message, if any) 157.5 175.49 T
(.) 218.75 175.49 T
5 F
(#include <stdio.h>) 184.5 160.49 T
(#include <tcl.h>) 184.5 149.41 T
49.5 351 103.5 423 C
40.5 360 202.5 414 R
7 X
0 K
V
1 9 Q
0 X
(FIGURE  28) 40.5 408 T
(T) 40.5 387 T
(ABLE  28) 45.83 387 T
31.5 351 130.5 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "263" 14
%%Page: "264" 14
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(264) 94.5 668.33 T
4 F
(Interpreters and Script Evaluation) 360.18 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
5 10 Q
0 X
(main\050int argc, char *argv[]\051 {) 175.5 321.14 T
(Tcl_Interp *interp;) 198.32 309.71 T
(int code;) 198.32 298.29 T
(if \050argc != 2\051 {) 198.32 275.43 T
(fprintf\050stderr, "Wrong # arguments: "\051;) 221.15 264.01 T
(fprintf\050"should be \134"%s f) 221.15 252.58 T
(ileName\134"\134n",) 371.07 252.58 T
(argv[0]\051;) 266.8 241.16 T
(exit\0501\051;) 221.15 229.73 T
(}) 198.32 218.31 T
(interp = Tcl_CreateInterp\050\051;) 198.32 195.46 T
(code = Tcl_EvalFile\050interp, argv[1]\051;) 198.32 184.03 T
(if \050*interp->result != 0\051 {) 198.32 172.61 T
(printf\050"%s\134n", interp->result\051;) 221.15 161.18 T
(}) 198.32 149.76 T
(if \050code != TCL_OK\051 {) 198.32 138.33 T
94.5 135 508.5 639 C
94.5 327.8 508.5 639 C
94.5 363.4 508.5 381.4 C
94.5 363.4 508.5 381.4 R
7 X
0 K
V
94.5 372.4 508.5 372.4 2 L
V
0.5 H
2 Z
0 X
N
94.5 327.8 508.5 639 C
1 9 Q
0 X
0 K
(T) 148.5 357.4 T
(able  28.1.) 153.67 357.4 T
2 F
(T) 196.61 357.4 T
(cl library procedures for creating and deleting interpreters and for evaluating T) 201.47 357.4 T
(cl) 484.12 357.4 T
5 F
(Tcl_Interp *Tcl_CreateInterp\050void\051) 127.5 619.4 T
2 F
(Create a new interpreter and return a token for it.) 199.5 610.4 T
5 F
(Tcl_DeleteInterp\050Tcl_Interp *interp) 127.5 601.4 T
2 F
(\051) 316.23 601.4 T
(Delete an interpreter) 199.5 592.4 T
(.) 272.87 592.4 T
5 F
(int Tcl_Eval\050Tcl_Interp *interp, char *script\051) 127.5 573.4 T
2 F
(Evaluate) 199.5 564.4 T
5 F
(script) 233.19 564.4 T
2 F
( in) 265.55 564.4 T
5 F
(interp) 277.03 564.4 T
2 F
( and return its completion code. The result or) 309.39 564.4 T
(error string will be in) 199.5 555.4 T
5 F
(interp->result) 278.13 555.4 T
2 F
(.) 353.62 555.4 T
5 F
(int Tcl_EvalFile\050Tcl_Interp *interp, char *f) 127.5 546.4 T
(ileName\051) 364.77 546.4 T
2 F
(Evaluate the contents of \336le) 199.5 537.4 T
5 F
(f) 302.09 537.4 T
(ileName) 307.48 537.4 T
2 F
( in) 345.23 537.4 T
5 F
(interp) 356.72 537.4 T
2 F
( and return its comple-) 389.07 537.4 T
(tion code. The result or error string will be in) 199.5 528.4 T
5 F
(interp->result) 364 528.4 T
2 F
(.) 439.49 528.4 T
5 F
(int Tcl_GlobalEval\050Tcl_Interp *interp, char *script\051) 127.5 519.4 T
2 F
-0.26 (Evaluate) 199.5 510.4 P
5 F
-0.63 (script) 232.93 510.4 P
2 F
-0.26 ( in) 265.29 510.4 P
5 F
-0.63 (interp) 276.25 510.4 P
2 F
-0.26 ( at global level and return its completion code.) 308.61 510.4 P
(The result or error string will be in) 199.5 501.4 T
5 F
(interp->result) 326.3 501.4 T
2 F
(.) 401.8 501.4 T
5 F
(int Tcl_VarEval\050Tcl_Interp *interp, char *string, char *string,) 127.5 492.4 T
(... \050char *\051 NULL\051) 149.07 483.4 T
2 F
(Concatenate all of the) 199.5 474.4 T
5 F
(string) 280.37 474.4 T
2 F
( ar) 312.72 474.4 T
(guments into a single string, evaluate the) 321.79 474.4 T
(resulting script in) 199.5 465.4 T
5 F
(interp) 264.66 465.4 T
2 F
(, and return its completion code. The result or) 297.01 465.4 T
(error string will be in) 199.5 456.4 T
5 F
(interp->result) 278.13 456.4 T
2 F
(.) 353.62 456.4 T
5 F
(int Tcl_RecordAndEval\050Tcl_Interp *interp, char *script, int) 127.5 447.4 T
(f) 199.5 438.4 T
(lags\051) 204.89 438.4 T
2 F
(Records) 199.5 429.4 T
5 F
(script) 231.2 429.4 T
2 F
( as an event in) 263.55 429.4 T
5 F
(interp) 317.22 429.4 T
2 F
(\325) 349.57 429.4 T
(s history list and evaluates it if) 352.07 429.4 T
5 F
-1 (eval) 199.5 420.4 P
2 F
-0.42 ( is non-zero \050) 221.07 420.4 P
5 F
-1 (TCL_NO_EVAL) 267.49 420.4 P
2 F
-0.42 ( means don\325) 326.81 420.4 P
-0.42 (t evaluate the script\051. Returns) 369.75 420.4 P
(a completion code such as) 199.5 411.4 T
5 F
(TCL_OK) 296.1 411.4 T
2 F
( and leaves result or error message in) 328.45 411.4 T
5 F
(interp-) 199.5 402.4 T
(>result) 237.25 402.4 T
2 F
(.) 274.99 402.4 T
121.5 631.15 121.5 395.65 2 L
V
0.5 H
0 Z
N
481.5 631.15 481.5 395.65 2 L
V
N
121.25 631.4 481.75 631.4 2 L
V
N
121.25 585.4 481.75 585.4 2 L
V
N
121.25 395.4 481.75 395.4 2 L
V
N
94.5 135 508.5 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "264" 15
%%Page: "265" 15
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(28.2 A simple T) 103.5 668.33 T
(cl application) 171.82 668.33 T
0 F
(265) 500.83 668.33 T
103.5 660.6 517.5 660.6 2 L
0.25 H
0 Z
N
103.5 90 517.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 203.4 101.33 T
103.5 135 517.5 639 R
7 X
V
5 10 Q
0 X
(exit\0501\051;) 230.15 632.33 T
(}) 207.32 621.33 T
(exit\0500\051;) 207.32 610.33 T
(}) 184.5 599.33 T
2 F
(If T) 157.5 585.33 T
(cl has been installed properly at your site you can copy the C code into a \336le named) 172.06 585.33 T
5 F
(simple.c) 157.5 573.33 T
2 F
( and compile it with the following shell command:) 205.47 573.33 T
5 F
(cc simple.c -ltcl -lm) 184.5 558.33 T
2 F
(Once you\325ve compiled the program you can evaluate a script \336le) 157.5 544.33 T
5 F
(test.tcl) 418.69 544.33 T
2 F
( by typing) 466.66 544.33 T
(the following command to your shell:) 157.5 532.33 T
5 F
(a.out test.tcl) 184.5 517.33 T
2 F
(The code for) 175.5 503.33 T
5 F
(simple.c) 229.06 503.33 T
2 F
( starts out with) 277.03 503.33 T
5 F
(#include) 338.67 503.33 T
2 F
( statements for) 386.64 503.33 T
5 F
(stdio.h) 447.99 503.33 T
2 F
( and) 489.97 503.33 T
5 F
-0.35 (tcl.h) 157.5 491.33 P
2 F
-0.15 (. Y) 187.48 491.33 P
-0.15 (ou\325ll need to include) 198.55 491.33 P
5 F
-0.35 (tcl.h) 282.9 491.33 P
2 F
-0.15 ( in every \336le that uses T) 312.89 491.33 P
-0.15 (cl structures or procedures,) 407.35 491.33 P
(since it de\336nes structures like) 157.5 479.33 T
5 F
(Tcl_Interp) 278.25 479.33 T
2 F
( and declares the T) 338.22 479.33 T
(cl library procedures.) 413.01 479.33 T
-0.12 (After checking to be sure that a \336le name was speci\336ed on the command line, the pro-) 175.5 467.33 P
-0.27 (gram invokes) 157.5 455.33 P
5 F
-0.65 (Tcl_CreateInterp) 213.59 455.33 P
2 F
-0.27 ( to create a new interpreter) 309.54 455.33 P
-0.27 (. The new interpreter will) 414.48 455.33 P
-0.27 (contain all of the built-in commands described in Part I but no T) 157.5 443.33 P
-0.27 (cl procedures or variables.) 410.62 443.33 P
(It will have an empty execution stack.) 157.5 431.33 T
5 F
(Tcl_CreateInterp) 311.83 431.33 T
2 F
( returns a pointer to the) 407.78 431.33 T
5 F
(Tcl_Interp) 157.5 419.33 T
2 F
( structure for the interpreter) 217.47 419.33 T
(, which is used as a token for the interpreter) 327.53 419.33 T
(when calling other T) 157.5 407.33 T
(cl procedures. Most of the \336elds of the) 239.79 407.33 T
5 F
(Tcl_Interp) 396.63 407.33 T
2 F
( structure are) 456.6 407.33 T
(hidden so that they cannot be accessed outside the T) 157.5 395.33 T
(cl library) 365.82 395.33 T
(. The only accessible \336elds) 401.53 395.33 T
(are those that describe the result of the last script evaluation; they\325ll be discussed later) 157.5 383.33 T
(.) 500.59 383.33 T
(Next) 175.5 371.33 T
5 F
(simple.c) 197.43 371.33 T
2 F
( calls) 245.4 371.33 T
5 F
(Tcl_EvalFile) 268.72 371.33 T
2 F
( with the interpreter and the name of the) 340.68 371.33 T
-0.17 (script \336le as ar) 157.5 359.33 P
-0.17 (guments.) 215.38 359.33 P
5 F
-0.41 (Tcl_EvalFile) 254.08 359.33 P
2 F
-0.17 ( reads the \336le and evaluates its contents as a T) 326.04 359.33 P
-0.17 (cl) 507.95 359.33 P
-0.06 (script, just as if you had invoked the T) 157.5 347.33 P
-0.06 (cl) 309.85 347.33 P
5 F
-0.14 (source) 319.51 347.33 P
2 F
-0.06 ( command with the \336le name as an ar) 355.49 347.33 P
-0.06 (gu-) 504.18 347.33 P
(ment. When) 157.5 335.33 T
5 F
(Tcl_EvalFile) 208.85 335.33 T
2 F
( returns the execution stack for the interpreter will once) 280.81 335.33 T
(again be empty) 157.5 323.33 T
(.) 217.92 323.33 T
5 F
(Tcl_EvalFile) 175.5 311.33 T
2 F
( returns two pieces of information: an integer) 247.46 311.33 T
3 F
(completion code) 430.66 311.33 T
2 F
( and) 496.44 311.33 T
(a string. The completion code is returned as the result of the procedure. It will be either) 157.5 299.33 T
5 F
-0.43 (TCL_OK) 157.5 287.33 P
2 F
-0.18 (, which means that the script completed normally) 193.48 287.33 P
-0.18 (, or) 388.66 287.33 P
5 F
-0.43 (TCL_ERROR) 404.11 287.33 P
2 F
-0.18 (, which means) 458.08 287.33 P
-0.31 (that an error of some sort occurred \050e.g. the script \336le couldn\325) 157.5 275.33 P
-0.31 (t be read or the script aborted) 400.07 275.33 P
-0.39 (with an error\051. The second piece of information returned by) 157.5 263.33 P
5 F
-0.94 (Tcl_EvalFile) 394.2 263.33 P
2 F
-0.39 ( is a string, a) 466.17 263.33 P
(pointer to which is returned in) 157.5 251.33 T
5 F
(interp->result) 280.75 251.33 T
2 F
(. If the completion code is) 364.71 251.33 T
5 F
(TCL_OK) 471.58 251.33 T
2 F
-0.02 (then) 157.5 239.33 P
5 F
-0.05 (interp->result) 177.19 239.33 P
2 F
-0.02 ( points to the script\325) 261.14 239.33 P
-0.02 (s result; if the completion code is) 340.47 239.33 P
5 F
-0.05 (TCL_ER-) 475.52 239.33 P
(ROR) 157.5 227.33 T
2 F
( then) 175.49 227.33 T
5 F
(interp->result) 197.7 227.33 T
2 F
( points to a message describing the error) 281.65 227.33 T
(.) 442.37 227.33 T
3 F
(Note:) 124.49 212.33 T
-0.15 (The r) 157.5 212.33 P
-0.15 (esult string belongs to T) 178.36 212.33 P
-0.15 (cl. It may or may not be dynamically allocated. Y) 273.49 212.33 P
-0.15 (ou can r) 468.07 212.33 P
-0.15 (ead) 500.71 212.33 P
-0.03 (it and copy it, but you should not modify it and you should not save pointers to it. T) 157.5 202.33 P
-0.03 (cl may) 488.69 202.33 P
(overwrite the string or r) 157.5 192.33 T
(eallocate its memory during the next call to) 253.75 192.33 T
5 F
(Tcl_EvalFile) 430.3 192.33 T
3 F
( or) 502.26 192.33 T
-0.1 (any of the other pr) 157.5 182.33 P
-0.1 (ocedur) 231.14 182.33 P
-0.1 (es that evaluate scripts. Chapter 29 discusses the r) 258.52 182.33 P
-0.1 (esult string in) 460.31 182.33 P
(mor) 157.5 172.33 T
(e detail.) 173.23 172.33 T
FMENDPAGE
%%EndPage: "265" 16
%%Page: "266" 16
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(266) 94.5 668.33 T
4 F
(Interpreters and Script Evaluation) 360.18 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
2 10 Q
0 X
(If the result string is non-empty then) 166.5 632.33 T
5 F
(simple.c) 315.02 632.33 T
2 F
( prints it, regardless of whether it is) 362.99 632.33 T
(an error message or a normal result. Then the program exits. It follows the UNIX style of) 148.5 620.2 T
(exiting with a status of 1 if an error occurred and 0 if it completed successfully) 148.5 608.07 T
(.) 462.9 608.07 T
(When the script \336le is evaluated only the built-in T) 166.5 596.07 T
(cl commands are available: no Tk) 369.84 596.07 T
(commands will be available in this application and no application-speci\336c commands) 148.5 583.93 T
(have been de\336ned.) 148.5 571.8 T
94.5 528.44 508.5 531.46 C
148.5 529.95 508.5 529.95 2 L
0.5 H
2 Z
0 X
0 K
N
94.5 529.95 139.5 529.95 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(28.3) 114.36 535.46 T
(Other evaluation procedures) 148.5 535.46 T
2 10 Q
-0.19 (T) 148.5 511.77 P
-0.19 (cl provides three other procedures besides) 153.91 511.77 P
5 F
-0.47 (Tcl_EvalFile) 323.16 511.77 P
2 F
-0.19 ( for evaluating scripts. Each) 395.12 511.77 P
-0.17 (of these procedures takes an interpreter as its \336rst ar) 148.5 499.64 P
-0.17 (gument and each returns a completion) 354.65 499.64 P
(code and string, just like) 148.5 487.5 T
5 F
(Tcl_EvalFile) 248.99 487.5 T
2 F
(.) 320.95 487.5 T
5 F
(Tcl_Eval) 325.95 487.5 T
2 F
( is similar to) 373.93 487.5 T
5 F
(Tcl_EvalFile) 426.13 487.5 T
2 F
(except that its second ar) 148.5 475.37 T
(gument is a T) 244.36 475.37 T
(cl script rather than a \336le name:) 298.35 475.37 T
5 F
(code = Tcl_Eval\050interp, "set a 44"\051;) 175.5 460.37 T
(Tcl_VarEval) 148.5 446.37 T
2 F
( takes a variable number of string ar) 214.46 446.37 T
(guments terminated with a) 358.33 446.37 T
5 F
(NULL) 467.15 446.37 T
2 F
(ar) 148.5 434.24 T
(gument. It concatenates the strings and evaluates the result as a T) 156.09 434.24 T
(cl script. For example,) 416.3 434.24 T
(the statement below has the same ef) 148.5 422.1 T
(fect as the one above:) 292.1 422.1 T
5 F
(code = Tcl_VarEval\050interp, "set a ", "44",) 175.5 407.1 T
(\050char *\051 NULL\051;) 221.15 395.97 T
(Tcl_GlobalEval) 148.5 381.97 T
2 F
( is similar to) 232.45 381.97 T
5 F
(Tcl_Eval) 284.65 381.97 T
2 F
( except that it evaluates the script at global) 332.63 381.97 T
-0.35 (variable context \050as if the execution stack were empty\051 even when procedures are active. It) 148.5 369.83 P
(is used in special cases such as the) 148.5 357.7 T
5 F
(uplevel) 288.95 357.7 T
2 F
( command and Tk\325) 330.93 357.7 T
(s event bindings.) 406.16 357.7 T
(If you want a script to be recorded on the T) 166.5 345.7 T
(cl history list, call) 338.99 345.7 T
5 F
(Tcl_RecordAndE-) 413.12 345.7 T
(val) 148.5 333.57 T
2 F
( instead of) 166.49 333.57 T
5 F
(Tcl_Eval) 210.63 333.57 T
2 F
(:) 258.6 333.57 T
5 F
(char *script;) 175.5 318.57 T
(int code;) 175.5 307.43 T
(...) 175.5 296.3 T
(code = Tcl_RecordAndEval\050interp, script, 0\051;) 175.5 285.16 T
(Tcl_RecordAndEval) 148.5 271.16 T
2 F
( is identical to) 250.44 271.16 T
5 F
(Tcl_Eval) 309.3 271.16 T
2 F
( except that it records the script as a) 357.27 271.16 T
(new entry on the history list before invoking it. T) 148.5 259.03 T
(cl only records the scripts passed to) 344.9 259.03 T
5 F
-0.1 (Tcl_RecordAndEval) 148.5 246.89 P
2 F
-0.04 (, so you can select which ones to record. T) 250.44 246.89 P
-0.04 (ypically you\325ll record) 419.52 246.89 P
(only commands that were typed interactively) 148.5 234.76 T
(. The last ar) 328 234.76 T
(gument to) 375.01 234.76 T
5 F
(Tcl_RecordAndE-) 417.76 234.76 T
(val) 148.5 222.63 T
2 F
( is normally) 166.49 222.63 T
5 F
(0) 216.74 222.63 T
2 F
(; if you specify) 222.74 222.63 T
5 F
(TCL_NO_EVAL) 285.48 222.63 T
2 F
( instead, then T) 351.44 222.63 T
(cl will record the script) 412.36 222.63 T
(without actually evaluating it.) 148.5 210.49 T
94.5 167.13 508.5 170.16 C
148.5 168.65 508.5 168.65 2 L
0.5 H
2 Z
0 X
0 K
N
94.5 168.65 139.5 168.65 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(28.4) 114.36 174.16 T
(Deleting interpreters) 148.5 174.16 T
2 10 Q
(The procedure) 148.5 150.47 T
5 F
(Tcl_DeleteInterp) 209 150.47 T
2 F
( may be called to destroy an interpreter and all its) 304.94 150.47 T
(associated state. It is invoked with an interpreter as ar) 148.5 138.33 T
(gument:) 362.6 138.33 T
FMENDPAGE
%%EndPage: "266" 17
%%Page: "267" 17
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(28.4 Deleting interpreters) 103.5 668.33 T
0 F
(267) 500.83 668.33 T
103.5 660.6 517.5 660.6 2 L
0.25 H
0 Z
N
103.5 90 517.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 203.4 101.33 T
103.5 135 517.5 639 R
7 X
V
5 10 Q
0 X
(Tcl_DeleteInterp\050interp\051;) 184.5 632.33 T
2 F
(Once) 157.5 618.33 T
5 F
(Tcl_DeleteInterp) 181.09 618.33 T
2 F
( returns you should never use the interpreter again. In appli-) 277.03 618.33 T
(cations like) 157.5 606.33 T
5 F
(simple.c) 205.8 606.33 T
2 F
(, which use a single interpreter throughout their lifetime, there\325) 253.78 606.33 T
(s) 504.99 606.33 T
(no need to delete the interpreter) 157.5 594.33 T
(.) 283.79 594.33 T
FMENDPAGE
%%EndPage: "267" 18
%%Page: "268" 18
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(268) 94.5 668.33 T
4 F
(Interpreters and Script Evaluation) 360.18 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
FMENDPAGE
%%EndPage: "268" 19
%%Page: "269" 19
612 792 0 FMBEGINPAGE
103.5 675 517.5 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
103.5 450 517.5 450 2 L
7 X
V
2 Z
0 X
N
103.5 108 517.5 126 R
7 X
V
0 10 Q
0 X
(269) 500.83 119.33 T
103.5 54 517.5 108 R
7 X
V
2 9 Q
0 X
(Copyright \251 1993 Addison-W) 157.5 102 T
(esley Publishing Company) 266.71 102 T
(, Inc.) 362.5 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 157.5 91 T
(. Any) 491.17 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 157.5 80 T
-0.34 (lisher) 157.5 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 176.98 69 P
(does not of) 157.5 58 T
(fer warranties in regard to this draft.) 197.28 58 T
1 24 Q
(Chapter 29) 157.5 605 T
-0.48 (Cr) 157.5 575 S
-0.48 (eating New T) 184.08 575 S
-0.48 (cl Commands) 312.03 575 S
103.5 135 517.5 423 R
7 X
V
2 10 Q
0 X
(Each T) 157.5 416.33 T
(cl command is represented by a) 185.38 416.33 T
3 F
(command pr) 314.17 416.33 T
(ocedur) 364.05 416.33 T
(e) 391.43 416.33 T
2 F
( written in C. When the com-) 395.87 416.33 T
-0.27 (mand is invoked during script evaluation, T) 157.5 404.33 P
-0.27 (cl calls its command procedure to carry out the) 329.79 404.33 P
-0.21 (command. This chapter provides basic information on how to write command procedures,) 157.5 392.33 P
(how to register command procedures in an interpreter , and how to manage the interpret-) 157.5 380.33 T
(er) 157.5 368.33 T
(\325) 165.64 368.33 T
(s result string. T) 168.41 368.33 T
(able 29.1 summarizes the T) 232.68 368.33 T
(cl library procedures that are discussed in) 342.18 368.33 T
(the chapter) 157.5 356.33 T
(.) 201.08 356.33 T
103.5 312.98 517.5 316 C
157.5 314.49 517.5 314.49 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 314.49 148.5 314.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(29.1) 123.36 320 T
(Command procedures) 157.5 320 T
2 10 Q
-0.06 (The interface to a command procedure is de\336ned by the) 157.5 296.31 P
5 F
-0.14 (Tcl_CmdProc) 382.27 296.31 P
2 F
-0.06 ( procedure proto-) 448.24 296.31 P
(type:) 157.5 284.31 T
5 F
(typedef int Tcl_CmdProc\050ClientData clientData,) 184.5 269.31 T
(Tcl_Interp *interp, int argc,) 230.15 258.31 T
(char *argv[]\051;) 230.15 247.31 T
2 F
(Each command procedure takes four ar) 157.5 233.31 T
(guments. The \336rst,) 314.12 233.31 T
5 F
(clientData) 391.58 233.31 T
2 F
(, will be dis-) 451.55 233.31 T
(cussed in Section 29.5 below) 157.5 221.31 T
(. The second,) 273.17 221.31 T
5 F
(interp) 328.96 221.31 T
2 F
(, is the interpreter in which the com-) 364.94 221.31 T
(mand was invoked. The third and fourth ar) 157.5 209.31 T
(guments have the same meaning as the) 328.31 209.31 T
5 F
(argc) 486.25 209.31 T
2 F
(and) 157.5 197.31 T
5 F
(argv) 174.43 197.31 T
2 F
( ar) 198.42 197.31 T
(guments to a C main program:) 208.5 197.31 T
5 F
(argc) 332.87 197.31 T
2 F
( speci\336es the total number of words in) 356.86 197.31 T
(the T) 157.5 185.31 T
(cl command and) 177.62 185.31 T
5 F
(argv) 246.18 185.31 T
2 F
( is an array of pointers to the values of the words. T) 270.17 185.31 T
(cl pro-) 475.7 185.31 T
(cesses all the special characters such as) 157.5 173.31 T
5 F
($) 317.08 173.31 T
2 F
( and) 323.08 173.31 T
5 F
( []) 340.01 173.31 T
2 F
( before invoking command procedures,) 358 173.31 T
(so the values in) 157.5 161.31 T
5 F
(argc) 221.9 161.31 T
2 F
( re\337ect any substitutions that were speci\336ed for the command. The) 245.89 161.31 T
-0.05 (command name is included in) 157.5 149.31 P
5 F
-0.12 (argc) 279.68 149.31 P
2 F
-0.05 ( and) 303.67 149.31 P
5 F
-0.12 (argv) 323 149.31 P
2 F
-0.05 (, and) 346.33 149.31 P
5 F
-0.12 (argv[argc) 368.17 149.31 P
2 F
-0.05 (] is) 422.14 149.31 P
5 F
-0.12 (NULL) 437.03 149.31 P
2 F
-0.05 (. A command) 461.02 149.31 P
49.5 351 103.5 423 C
40.5 360 202.5 414 R
7 X
0 K
V
1 9 Q
0 X
(FIGURE  29) 40.5 408 T
(T) 40.5 387 T
(ABLE  29) 45.83 387 T
31.5 351 130.5 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "269" 20
%%Page: "270" 20
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(270) 94.5 668.33 T
4 F
(Creating New T) 379.1 668.33 T
(cl Commands) 447.41 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
2 10 Q
0 X
(procedure returns two values just like) 148.5 328.3 T
5 F
(Tcl_Eval) 301.17 328.3 T
2 F
( and) 349.14 328.3 T
5 F
(Tcl_EvalFile) 368.57 328.3 T
2 F
(. It returns an) 440.53 328.3 T
-0 (integer completion code as its result \050e.g.) 148.5 316.3 P
5 F
-0 (TCL_OK) 315.31 316.3 P
2 F
-0 ( or) 351.29 316.3 P
5 F
-0 (TCL_ERROR) 364.61 316.3 P
2 F
-0 (\051 and it leaves a result) 418.58 316.3 P
(string or error message in) 148.5 304.3 T
5 F
(interp->result) 253.14 304.3 T
2 F
(.) 337.1 304.3 T
(Here is the command procedure for a new command called) 166.5 292.3 T
5 F
(eq) 405.19 292.3 T
2 F
( that compares its two) 417.18 292.3 T
(ar) 148.5 280.3 T
(guments for equality:) 156.09 280.3 T
5 F
(int EqCmd\050ClientData clientData, Tcl_Interp *interp,) 175.5 265.3 T
(int argc, char *argv[]\051 {) 221.15 254.3 T
(if \050argc != 3\051 {) 198.32 243.3 T
(interp->result = "wrong # args";) 221.15 232.3 T
(return TCL_ERROR;) 221.15 221.3 T
(}) 198.32 210.3 T
(if \050strcmp\050argv[1], argv[2]\051 == 0\051 {) 198.32 199.3 T
(interp->result = "1";) 221.15 188.3 T
(} else {) 198.32 177.3 T
(interp->result = "0";) 221.15 166.3 T
(}) 198.32 155.3 T
94.5 135 508.5 639 C
94.5 334.97 508.5 639 C
94.5 372.4 508.5 390.4 C
94.5 372.4 508.5 390.4 R
7 X
0 K
V
94.5 381.4 508.5 381.4 2 L
V
0.5 H
2 Z
0 X
N
94.5 334.97 508.5 639 C
1 9 Q
0 X
0 K
(T) 148.5 366.4 T
(able  29.1.) 153.67 366.4 T
2 F
(T) 196.61 366.4 T
(cl library procedures for creating and deleting commands and for manipulating the) 201.47 366.4 T
5 F
(Tcl_CreateCommand\050Tcl_Interp *interp, char *cmdName,) 127.5 619.4 T
(    Tcl_CmdProc *cmdProc, ClientData clientData,) 127.5 610.4 T
(    Tcl_CmdDeleteProc *deleteProc\051) 127.5 601.4 T
2 F
(De\336nes a new command in) 199.5 592.4 T
5 F
(interp) 299.59 592.4 T
2 F
( with name) 331.95 592.4 T
5 F
(cmdName) 374.13 592.4 T
2 F
(. When the com-) 411.88 592.4 T
(mand is invoked) 199.5 583.4 T
5 F
(cmdProc) 261.16 583.4 T
2 F
( will be called; if the command is ever deleted) 298.91 583.4 T
(then) 199.5 574.4 T
5 F
(deleteProc) 217.22 574.4 T
2 F
( will be called.) 271.15 574.4 T
5 F
(int Tcl_DeleteCommand\050Tcl_Interp *interp, char *cmdName\051) 127.5 565.4 T
2 F
(If) 199.5 556.4 T
5 F
(cmdName) 207.73 556.4 T
2 F
( is a command or procedure in) 245.48 556.4 T
5 F
(interp) 357.05 556.4 T
2 F
( then deletes it and) 389.4 556.4 T
(returns 0. Otherwise returns -1.) 199.5 547.4 T
5 F
(Tcl_SetResult\050Tcl_Interp *interp, char *string,Tcl_FreeProc) 127.5 528.4 T
(*freeProc\051) 199.5 519.4 T
2 F
(Arrange for) 199.5 510.4 T
5 F
(string) 243.91 510.4 T
2 F
( \050or a copy of it\051 to become the result for) 276.27 510.4 T
5 F
(interp) 424.78 510.4 T
2 F
(.) 457.13 510.4 T
5 F
(FreeProc) 199.5 501.4 T
2 F
( identi\336es a procedure to call to eventually free the result, or it) 242.64 501.4 T
(may be) 199.5 492.4 T
5 F
(TCL_STATIC) 227.95 492.4 T
2 F
(,) 281.88 492.4 T
5 F
(TCL_DYNAMIC) 286.37 492.4 T
2 F
(, or) 345.69 492.4 T
5 F
(TCL_VOLATILE) 359.92 492.4 T
2 F
(.) 424.62 492.4 T
5 F
(Tcl_AppendResult\050Tcl_Interp *interp, char *string,) 127.5 483.4 T
(    char *string, ... \050char *\051 NULL\051) 127.5 474.4 T
2 F
(Appends each of the) 199.5 465.4 T
5 F
(string) 275.37 465.4 T
2 F
( ar) 307.73 465.4 T
(guments to the result string in) 316.79 465.4 T
5 F
(interp) 426.14 465.4 T
2 F
(.) 458.5 465.4 T
5 F
(Tcl_AppendElement\050Tcl_Interp *interp, char *string\051) 127.5 456.4 T
2 F
(Formats) 199.5 447.4 T
5 F
(string) 231.21 447.4 T
2 F
( as a T) 263.56 447.4 T
(cl list element and appends it to the result string in) 286.64 447.4 T
5 F
(interp) 199.5 438.4 T
2 F
(, with a preceding separator space if needed.) 231.85 438.4 T
5 F
(Tcl_ResetResult\050Tcl_Interp *interp\051) 127.5 429.4 T
2 F
(Resets) 199.5 420.4 T
5 F
(interp) 225.21 420.4 T
2 F
(\325) 257.57 420.4 T
(s result to the default empty state, freeing up any dynami-) 260.07 420.4 T
(cally-allocated memory associated with it.) 199.5 411.4 T
121.5 631.15 121.5 404.65 2 L
V
0.5 H
0 Z
N
481.5 631.15 481.5 404.65 2 L
V
N
121.25 631.4 481.75 631.4 2 L
V
N
121.25 540.4 481.75 540.4 2 L
V
N
121.25 404.4 481.75 404.4 2 L
V
N
94.5 135 508.5 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "270" 21
%%Page: "271" 21
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(29.2 Registering commands) 103.5 668.33 T
0 F
(271) 500.83 668.33 T
103.5 660.6 517.5 660.6 2 L
0.25 H
0 Z
N
103.5 90 517.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 203.4 101.33 T
103.5 135 517.5 639 R
7 X
V
5 10 Q
0 X
(return TCL_OK;) 207.32 632.33 T
(}) 184.5 620.92 T
(EqCmd) 157.5 606.92 T
2 F
( checks to see that was called with exactly two ar) 187.48 606.92 T
(guments \050three words, including) 383.82 606.92 T
(the command name\051, and if not it stores an error message in) 157.5 594.52 T
5 F
(interp->result) 399.27 594.52 T
2 F
( and) 483.22 594.52 T
-0.4 (returns) 157.5 582.11 P
5 F
-0.95 (TCL_ERROR) 187.36 582.11 P
2 F
-0.4 (. Otherwise it compares its two ar) 241.33 582.11 P
-0.4 (gument strings and stores a string in) 373.4 582.11 P
5 F
(interp-) 157.5 569.7 T
(>result) 199.48 569.7 T
2 F
( to indicate whether or not they were equal; then it returns) 241.45 569.7 T
5 F
(TCL_OK) 475.73 569.7 T
2 F
(to indicate that the command completed normally) 157.5 557.29 T
(.) 355.61 557.29 T
103.5 513.94 517.5 516.96 C
157.5 515.45 517.5 515.45 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 515.45 148.5 515.45 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(29.2) 123.36 520.96 T
(Registering commands) 157.5 520.96 T
2 10 Q
(In order for a command procedure to be invoked by T) 157.5 497.27 T
(cl, you must register it by calling) 372.18 497.27 T
5 F
(Tcl_CreateCommand) 157.5 484.86 T
2 F
(. For example,) 259.44 484.86 T
5 F
(EqCmd) 319.68 484.86 T
2 F
( could be registered with the following) 349.66 484.86 T
(statement:) 157.5 472.45 T
5 F
(Tcl_CreateCommand\050interp, "eq", EqCmd,) 184.5 457.45 T
(\050ClientData *\051 NULL,) 230.15 446.05 T
(\050Tcl_CmdDeleteProc *\051 NULL\051;) 230.15 434.64 T
2 F
-0.12 (The \336rst ar) 157.5 420.64 P
-0.12 (gument to) 200.94 420.64 P
5 F
-0.29 (Tcl_CreateCommand) 243.46 420.64 P
2 F
-0.12 ( identi\336es the interpreter in which the com-) 345.4 420.64 P
-0.37 (mand will be used. The second ar) 157.5 408.23 P
-0.37 (gument speci\336es the name for the command and the third) 289.16 408.23 P
(ar) 157.5 395.82 T
(gument speci\336es its command procedure. The fourth and \336fth ar) 165.09 395.82 T
(guments are discussed) 421.95 395.82 T
(in Section 29.5 below; they can be speci\336ed as) 157.5 383.41 T
5 F
(NULL) 346.82 383.41 T
2 F
( for simple commands like this one.) 370.8 383.41 T
5 F
(Tcl_CreateCommand) 157.5 371.01 T
2 F
( will create a new command for) 259.44 371.01 T
5 F
(interp) 388.5 371.01 T
2 F
( named) 424.48 371.01 T
5 F
(eq) 456.13 371.01 T
2 F
(; if there) 468.12 371.01 T
(already existed a command by that name then it is deleted. Whenever) 157.5 358.6 T
5 F
(eq) 437.57 358.6 T
2 F
( is invoked in) 449.56 358.6 T
5 F
(interp) 157.5 346.19 T
2 F
( T) 193.48 346.19 T
(cl will call) 201.39 346.19 T
5 F
(EqCmd) 246.08 346.19 T
2 F
( to carry out its function.) 276.07 346.19 T
(After the above call to) 175.5 334.19 T
5 F
(Tcl_CreateCommand) 267.37 334.19 T
2 F
(,) 369.31 334.19 T
5 F
(eq) 374.31 334.19 T
2 F
( can be used in scripts just like) 386.3 334.19 T
(any other command:) 157.5 321.78 T
5 F
(eq abc def) 184.5 306.78 T
190.5 291.96 184.5 291.96 2 L
V
0.4 H
0 Z
N
(0) 184.5 292.78 T
(eq 1 1) 184.5 278.78 T
190.5 263.96 184.5 263.96 2 L
V
N
(1) 184.5 264.78 T
(set w .dlg) 184.5 250.78 T
(set w2 .dlg.ok) 184.5 239.37 T
(eq $w.ok $w2) 184.5 227.97 T
190.5 213.15 184.5 213.15 2 L
V
N
(1) 184.5 213.97 T
2 F
(When processing scripts, T) 157.5 199.97 T
(cl carries out all of the command-line substitutions before call-) 265.61 199.97 T
(ing the command procedure, so when) 157.5 187.56 T
5 F
(EqCmd) 309.89 187.56 T
2 F
( is called for the last) 339.87 187.56 T
5 F
(eq) 423.14 187.56 T
2 F
( command above) 435.14 187.56 T
(both) 157.5 175.15 T
5 F
(argv[1]) 177.77 175.15 T
2 F
( and) 219.75 175.15 T
5 F
(argv[2]) 239.18 175.15 T
2 F
( are \322) 281.15 175.15 T
5 F
(.dlg.ok) 302.79 175.15 T
2 F
(\323.) 344.77 175.15 T
5 F
-0.17 (Tcl_CreateCommand) 175.5 163.15 P
2 F
-0.07 ( is usually called by applications during initialization to reg-) 277.44 163.15 P
(ister application-speci\336c commands. However) 157.5 150.74 T
(, new commands can also be created at any) 342.52 150.74 T
(time while an application is running. For example, the) 157.5 138.33 T
5 F
(proc) 376.53 138.33 T
2 F
( command creates a new) 400.52 138.33 T
FMENDPAGE
%%EndPage: "271" 22
%%Page: "272" 22
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(272) 94.5 668.33 T
4 F
(Creating New T) 379.1 668.33 T
(cl Commands) 447.41 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
2 10 Q
0 X
(command for each T) 148.5 632.33 T
(cl procedure that is de\336ned, and Tk creates a widget command for) 230.79 632.33 T
-0.37 (each new widget. In Section 29.5 you\325ll see an example where the command procedure for) 148.5 620.3 P
(one command creates a new command.) 148.5 608.27 T
(Commands created by) 166.5 596.27 T
5 F
(Tcl_CreateCommand) 258.38 596.27 T
2 F
( are indistinguishable from T) 360.32 596.27 T
(cl\325) 475.66 596.27 T
(s) 485.65 596.27 T
-0.28 (built-in commands. Each built-in command has a command procedure with the same form) 148.5 584.24 P
(as EqCmd, and you can rede\336ne a built-in command by calling) 148.5 572.2 T
5 F
(Tcl_CreateCommand) 403.33 572.2 T
2 F
(with the name of the command and a new command procedure.) 148.5 560.17 T
94.5 516.81 508.5 519.84 C
148.5 518.33 508.5 518.33 2 L
0.5 H
2 Z
0 X
0 K
N
94.5 518.33 139.5 518.33 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(29.3) 114.36 523.84 T
(The result protocol) 148.5 523.84 T
2 10 Q
(The) 148.5 500.15 T
5 F
(EqCmd) 166.54 500.15 T
2 F
( procedure returns a result by setting) 196.52 500.15 T
5 F
(interp-) 345.02 500.15 T
(>result) 387 500.15 T
2 F
( to point to one of) 428.98 500.15 T
(several static strings. However) 148.5 488.11 T
(, the result string can also be managed in several other) 270.78 488.11 T
-0.21 (ways. T) 148.5 476.08 P
-0.21 (cl de\336nes a protocol for setting and using the result, which allows for dynamically-) 179.23 476.08 P
-0.13 (allocated results and provides a small static area to avoid memory-allocation overheads in) 148.5 464.05 P
(simple cases.) 148.5 452.02 T
-0.18 (The full de\336nition of the) 166.5 440.02 P
5 F
-0.44 (Tcl_Interp) 266.36 440.02 P
2 F
-0.18 ( structure, as visible outside the T) 326.33 440.02 P
-0.18 (cl library) 459.17 440.02 P
-0.18 (, is) 494.7 440.02 P
(as follows:) 148.5 427.98 T
5 F
(typedef struct Tcl_Interp {) 175.5 412.98 T
(char *result;) 198.32 401.95 T
(Tcl_FreeProc *freeProc;) 198.32 390.92 T
(int errorLine;) 198.32 379.89 T
(} Tcl_Interp;) 175.5 368.85 T
2 F
(The \336rst \336eld,) 148.5 354.85 T
5 F
(result) 207.36 354.85 T
2 F
(, points to the interpreter) 243.34 354.85 T
(\325) 342.25 354.85 T
(s current result. The second \336eld,) 345.03 354.85 T
5 F
(freeProc) 148.5 342.82 T
2 F
(, is used when freeing dynamically-allocated results; it will be discussed) 196.47 342.82 T
(below) 148.5 330.79 T
(. The third \336eld,) 172.28 330.79 T
5 F
(errorLine) 239.46 330.79 T
2 F
(, is related to error handling and is described in Sec-) 293.43 330.79 T
(tion XXX.) 148.5 318.76 T
(When T) 166.5 306.76 T
(cl invokes a command procedure the) 198.27 306.76 T
5 F
(result) 347.6 306.76 T
2 F
( and) 383.58 306.76 T
5 F
(freeProc) 403.01 306.76 T
2 F
( \336elds always) 450.98 306.76 T
(have well-de\336ned values.) 148.5 294.72 T
5 F
(Interp->result) 252.86 294.72 T
2 F
( points to a small character array that is) 336.82 294.72 T
(part of the interpreter structure and the array has been initialized to hold an empty string) 148.5 282.69 T
(\050the \336rst character of the array is zero\051.) 148.5 270.66 T
5 F
(Interp->freeProc) 306.96 270.66 T
2 F
( is always zero. This state) 402.91 270.66 T
(is referred to as the) 148.5 258.63 T
3 F
(initialized state) 227.6 258.63 T
2 F
( for the result. Not only is this the state of the result) 288.96 258.63 T
(when command procedures are invoked, but many T) 148.5 246.59 T
(cl library procedures also expect the) 358.2 246.59 T
(interpreter) 148.5 234.56 T
(\325) 190.5 234.56 T
(s result to be in the initialized state when they are invoked. If a command pro-) 193.27 234.56 T
(cedure wishes to return an empty string as its result, it simply returns without modifying) 148.5 222.53 T
5 F
(interp-) 148.5 210.5 T
(>result) 190.48 210.5 T
2 F
( or) 232.45 210.5 T
5 F
(interp->freeProc) 245.78 210.5 T
2 F
(.) 341.72 210.5 T
-0.27 (There are three ways that a command procedure can specify a non-empty result. First,) 166.5 198.5 P
-0.06 (it can modify) 148.5 186.46 P
5 F
-0.14 (interp->result) 204.12 186.46 P
2 F
-0.06 ( to point to a static string as in) 288.08 186.46 P
5 F
-0.14 (EqCmd) 410.53 186.46 P
2 F
-0.06 (. A string can be) 440.52 186.46 P
(considered to be static as long as its value will not change before the next T) 148.5 174.43 T
(cl command) 450.08 174.43 T
(procedure is invoked. For example, Tk stores the name of each widget in a dynamically-) 148.5 162.4 T
(allocated record associated with the widget, and it returns widget names by setting) 148.5 150.37 T
5 F
(interp->result) 148.5 138.33 T
2 F
( to the name string in the widget record. This string is dynamically) 232.45 138.33 T
FMENDPAGE
%%EndPage: "272" 23
%%Page: "273" 23
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(29.4 Procedures for managing the result) 103.5 668.33 T
0 F
(273) 500.83 668.33 T
103.5 660.6 517.5 660.6 2 L
0.25 H
0 Z
N
103.5 90 517.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 203.4 101.33 T
103.5 135 517.5 639 R
7 X
V
2 10 Q
0 X
(allocated, but widgets are deleted by T) 157.5 632.33 T
(cl commands so the string is guaranteed not to be) 311.4 632.33 T
(recycled before the next T) 157.5 620.16 T
(cl command executes. If a string is stored in automatic storage) 261.7 620.16 T
(associated with a procedure it cannot be treated as static, since its value will change as) 157.5 607.98 T
(soon as some other procedure re-uses the stack space.) 157.5 595.8 T
(The second way to set a result is to use the pre-allocated space in the) 175.5 583.8 T
5 F
(Tcl_Interp) 452.79 583.8 T
2 F
(structure. In its initialized state) 157.5 571.62 T
5 F
(interp->result) 283.53 571.62 T
2 F
( points to this space. If a command) 367.48 571.62 T
(procedure wishes to return a small result it can copy it to the location pointed to by) 157.5 559.45 T
5 F
(interp-) 157.5 547.27 T
(>result) 199.48 547.27 T
2 F
(. For example, the procedure below implements a command) 241.45 547.27 T
5 F
(numwords) 157.5 535.09 T
2 F
( that returns a decimal string giving a count of its ar) 205.47 535.09 T
(guments:) 412.1 535.09 T
5 F
(int NumwordsCmd\050ClientData clientData,) 184.5 520.09 T
(Tcl_Interp *interp, int argc, char *argv[]\051 {) 230.15 508.91 T
(sprintf\050interp->result, "%d", argc\051;) 207.32 497.73 T
(return TCL_OK;) 207.32 486.56 T
(}) 184.5 475.38 T
2 F
(The size of the pre-allocated space is guaranteed to be at least 200 bytes; you can retrieve) 157.5 461.38 T
(the exact size with the symbol) 157.5 449.2 T
5 F
(TCL_RESULT_SIZE) 280.75 449.2 T
2 F
( de\336ned by) 370.7 449.2 T
5 F
(tcl.h) 417.62 449.2 T
2 F
(. It\325) 447.6 449.2 T
(s generally) 461.48 449.2 T
(safe to use this area for printing a few numbers and/or short strings, but it is) 157.5 437.02 T
3 F
(not) 462.57 437.02 T
2 F
( safe to) 475.35 437.02 T
(copy strings of unbounded length to the pre-allocated space.) 157.5 424.85 T
(The third way to set a result is to allocate memory with a storage allocator such as) 175.5 412.85 T
5 F
(malloc) 157.5 400.67 T
2 F
(, store the result string there, and set) 193.48 400.67 T
5 F
(interp->result) 340.6 400.67 T
2 F
( to the address of the) 424.55 400.67 T
(memory) 157.5 388.49 T
(. In order to ensure that the memory is eventually freed, you must also set) 190.16 388.49 T
5 F
-0.43 (interp->freeProc) 157.5 376.31 P
2 F
-0.18 ( to the address of a procedure that T) 253.45 376.31 P
-0.18 (cl can call to free the memory) 395.07 376.31 P
-0.18 (,) 512.68 376.31 P
(such as) 157.5 364.13 T
5 F
(free) 189.14 364.13 T
2 F
(. In this case the dynamically-allocated memory becomes the property of) 213.13 364.13 T
(T) 157.5 351.96 T
(cl. Once T) 162.91 351.96 T
(cl has \336nished using the result it will free it by invoking the procedure speci-) 204.11 351.96 T
(\336ed by) 157.5 339.78 T
5 F
(interp->freeProc) 187.48 339.78 T
2 F
(. This procedure must match the following procedure pro-) 283.43 339.78 T
(totype:) 157.5 327.6 T
5 F
(typedef void Tcl_FreeProc\050char *blockPtr\051;) 184.5 312.6 T
2 F
(The procedure will be invoked with a single ar) 157.5 298.6 T
(gument containing the address that you) 343.85 298.6 T
(stored in) 157.5 286.42 T
5 F
(interp->result) 194.7 286.42 T
2 F
(. In most cases you\325ll use) 278.65 286.42 T
5 F
(malloc) 382.2 286.42 T
2 F
( for dynamic allocation) 418.18 286.42 T
(and thus set) 157.5 274.25 T
5 F
(interp->freeProc) 207.19 274.25 T
2 F
( to) 303.14 274.25 T
5 F
(free) 315.91 274.25 T
2 F
(, but the mechanism is general enough to) 339.9 274.25 T
(support other storage allocators too.) 157.5 262.07 T
103.5 218.71 517.5 221.73 C
157.5 220.22 517.5 220.22 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 220.22 148.5 220.22 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(29.4) 123.36 225.73 T
(Procedures for managing the result) 157.5 225.73 T
2 10 Q
-0.03 (T) 175.5 202.04 P
-0.03 (cl provides several library procedures for manipulating the result. These procedures) 180.91 202.04 P
(all obey the protocol described in the previous section, and you may \336nd them more con-) 157.5 189.87 T
(venient than setting) 157.5 177.69 T
5 F
(interp->result) 238.29 177.69 T
2 F
( and) 322.24 177.69 T
5 F
(interp->freeProc) 341.67 177.69 T
2 F
( directly) 437.62 177.69 T
(. The \336rst) 470 177.69 T
-0.05 (procedure is) 157.5 165.51 P
5 F
-0.13 (Tcl_SetResult) 209.01 165.51 P
2 F
-0.05 (, which simply implements the protocol described above.) 286.97 165.51 P
(For example,) 157.5 153.33 T
5 F
(EqCmd) 212.74 153.33 T
2 F
( could have replaced the statement) 242.72 153.33 T
5 F
(interp->result = "wrong # args";) 184.5 138.33 T
FMENDPAGE
%%EndPage: "273" 24
%%Page: "274" 24
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(274) 94.5 668.33 T
4 F
(Creating New T) 379.1 668.33 T
(cl Commands) 447.41 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
2 10 Q
0 X
(with a call to) 148.5 632.33 T
5 F
(Tcl_SetResult) 202.91 632.33 T
2 F
( as follows:) 280.87 632.33 T
5 F
(Tcl_SetResult\050interp, "wrong # args", TCL_STATIC\051;) 175.5 617.33 T
2 F
-0.27 (The \336rst ar) 148.5 603.33 P
-0.27 (gument to) 191.63 603.33 P
5 F
-0.65 (Tcl_SetResult) 233.85 603.33 P
2 F
-0.27 ( is an interpreter) 311.81 603.33 P
-0.27 (. The second ar) 375.67 603.33 P
-0.27 (gument is a string) 435.73 603.33 P
(to use as result, and the third ar) 148.5 590.86 T
(gument gives additional information about the string.) 273.23 590.86 T
5 F
-0.41 (TCL_STATIC) 148.5 578.39 P
2 F
-0.17 ( means that the string is static, so) 208.47 578.39 P
5 F
-0.41 (Tcl_SetResult) 341.73 578.39 P
2 F
-0.17 ( just stores its address) 419.69 578.39 P
-0.17 (into) 148.5 565.92 P
5 F
-0.4 (interp->result) 166.38 565.92 P
2 F
-0.17 (. A value of) 250.34 565.92 P
5 F
-0.4 (TCL_VOLATILE) 299.36 565.92 P
2 F
-0.17 ( for the third ar) 371.32 565.92 P
-0.17 (gument means that) 430.99 565.92 P
-0.29 (the string is about to change \050e.g. it\325) 148.5 553.45 P
-0.29 (s stored in the procedure\325) 289.96 553.45 P
-0.29 (s stack frame\051 so a copy must) 389.82 553.45 P
-0.34 (be made for the result.) 148.5 540.98 P
5 F
-0.8 (Tcl_SetResult) 238.97 540.98 P
2 F
-0.34 ( will copy the string into the pre-allocated space) 316.93 540.98 P
(if it \336ts, otherwise it will allocate new memory to use for the result and copy the string) 148.5 528.51 T
(there \050setting) 148.5 516.04 T
5 F
(interp->freeProc) 203.46 516.04 T
2 F
( appropriately\051. If the third ar) 299.41 516.04 T
(gument is) 416.35 516.04 T
5 F
(TCL_DY-) 458 516.04 T
(NAMIC) 148.5 503.57 T
2 F
( it means that the string was allocated with) 178.48 503.57 T
5 F
(malloc) 351.43 503.57 T
2 F
( and is now the property of) 387.41 503.57 T
(T) 148.5 491.1 T
(cl:) 153.91 491.1 T
5 F
(Tcl_SetResult) 166.4 491.1 T
2 F
( will set) 244.36 491.1 T
5 F
(interp-) 278.51 491.1 T
(>freeProc) 320.48 491.1 T
2 F
( to) 374.46 491.1 T
5 F
(free) 387.23 491.1 T
2 F
( as described above.) 411.22 491.1 T
(Finally) 148.5 478.63 T
(, the third ar) 176.18 478.63 T
(gument may be the address of a procedure suitable for use in) 224.85 478.63 T
5 F
-0.2 (interp-) 148.5 466.16 P
-0.2 (>freeProc) 190.48 466.16 P
2 F
-0.08 (; in this case the string is dynamically-allocated and T) 244.45 466.16 P
-0.08 (cl will even-) 458.7 466.16 P
(tually call the speci\336ed procedure to free it.) 148.5 453.69 T
5 F
(Tcl_AppendResult) 166.5 441.69 T
2 F
( makes it easy to build up results in pieces. It takes any num-) 262.45 441.69 T
(ber of strings as ar) 148.5 429.22 T
(guments and appends them to the interpreter) 222.15 429.22 T
(\325) 400.17 429.22 T
(s result in order) 402.95 429.22 T
(. As the) 464.86 429.22 T
(result grows in length) 148.5 416.74 T
5 F
(Tcl_AppendResult) 237.89 416.74 T
2 F
( allocates new memory for it.) 333.84 416.74 T
5 F
(Tcl_Ap-) 453.47 416.74 T
-0.75 (pendResult) 148.5 404.27 P
2 F
-0.31 ( may be called repeatedly to build up long results incrementally) 208.47 404.27 P
-0.31 (, and it does) 458.95 404.27 P
-0.13 (this ef) 148.5 391.8 P
-0.13 (\336ciently even if the result becomes very lar) 172.89 391.8 P
-0.13 (ge \050e.g. it allocates extra memory so that) 344.7 391.8 P
-0.1 (it doesn\325) 148.5 379.33 P
-0.1 (t have to copy the existing result into a lar) 182.92 379.33 P
-0.1 (ger area on each call\051. Here is an imple-) 349.76 379.33 P
(mentation of the) 148.5 366.86 T
5 F
(concat) 216.51 366.86 T
2 F
( command that uses) 252.49 366.86 T
5 F
(Tcl_AppendResult) 334.11 366.86 T
2 F
(:) 430.05 366.86 T
5 F
(int ConcatCmd\050ClientData clientData,) 175.5 351.86 T
(Tcl_Interp *interp, int argc, char *argv[]\051 {) 221.15 340.39 T
(int i;) 198.32 328.92 T
(if \050argc == 1\051 {) 198.32 317.45 T
(return TCL_OK;) 221.15 305.98 T
(}) 198.32 294.51 T
(Tcl_AppendResult\050interp, argv[1], \050char *\051 NULL\051;) 198.32 283.04 T
(for \050i = 2; i < argc; i++\051 {) 198.32 271.57 T
(Tcl_AppendResult\050interp, " ", argv[i],) 221.15 260.1 T
(\050char *\051 NULL\051;) 243.97 248.63 T
(}) 198.32 237.16 T
(return TCL_OK;) 198.32 225.69 T
(}) 175.5 214.22 T
2 F
-0.32 (The) 148.5 200.22 P
5 F
-0.78 (NULL) 166.22 200.22 P
2 F
-0.32 ( ar) 190.2 200.22 P
-0.32 (gument in each call to) 199.96 200.22 P
5 F
-0.78 (Tcl_AppendResult) 289.11 200.22 P
2 F
-0.32 ( marks the end of the strings to) 385.06 200.22 P
-0.21 (append. Since the result is initially empty) 148.5 187.74 P
-0.21 (, the \336rst call to) 312.33 187.74 P
5 F
-0.5 (Tcl_AppendResult) 376.25 187.74 P
2 F
-0.21 ( just sets) 472.2 187.74 P
(the result to) 148.5 175.28 T
5 F
(argv[1]) 198.19 175.28 T
2 F
(; each additional call appends one more ar) 240.17 175.28 T
(gument preceded by a) 408.47 175.28 T
(separator space.) 148.5 162.8 T
5 F
(Tcl_AppendElement) 166.5 150.8 T
2 F
( is similar to) 268.44 150.8 T
5 F
(Tcl_AppendResult) 320.64 150.8 T
2 F
( except that it only) 416.59 150.8 T
(adds one string to the result at a time and it appends it as a list element instead of a raw) 148.5 138.33 T
FMENDPAGE
%%EndPage: "274" 25
%%Page: "275" 25
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(29.5 ClientData and deletion callbacks) 103.5 668.33 T
0 F
(275) 500.83 668.33 T
103.5 660.6 517.5 660.6 2 L
0.25 H
0 Z
N
103.5 90 517.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 203.4 101.33 T
103.5 135 517.5 639 R
7 X
V
2 10 Q
0 X
(string. It\325) 157.5 632.33 T
(s useful for creating lists. For example, here is a simple implementation of the) 194.15 632.33 T
5 F
(list) 157.5 619.96 T
2 F
( command:) 181.49 619.96 T
5 F
(int ListCmd\050ClientData clientData, Tcl_Interp *interp,) 184.5 604.96 T
(int argc, char **argv\051 {) 230.15 593.58 T
(int i;) 207.32 582.2 T
(for \050i = 1; i < argc; i++\051 {) 207.32 570.82 T
(Tcl_AppendElement\050interp, argv[i]\051;) 230.15 559.44 T
(}) 207.32 548.06 T
(return TCL_OK;) 207.32 536.68 T
(}) 184.5 525.31 T
2 F
(Each call to) 157.5 511.31 T
5 F
(Tcl_AppendElement) 207.18 511.31 T
2 F
( adds one ar) 309.13 511.31 T
(gument to the result. The ar) 356.96 511.31 T
(gument is) 467.26 511.31 T
(converted to a proper list element before appending it to the result \050e.g. it is enclosed in) 157.5 498.93 T
(braces if it contains space characters\051.) 157.5 486.55 T
5 F
(Tcl_AppendElement) 311.52 486.55 T
2 F
( also adds a separator) 413.47 486.55 T
(space if it\325) 157.5 474.17 T
(s needed before the new element \050no space is added if the result is currently) 199.14 474.17 T
-0.03 (empty or if its characters are \322) 157.5 461.79 P
5 F
-0.08 ( {) 278.31 461.79 P
2 F
-0.03 (\322, which means that the new element will be the \336rst ele-) 290.23 461.79 P
(ment of a sub-list\051. For example, if) 157.5 449.41 T
5 F
(ListCmd) 299.35 449.41 T
2 F
( is invoked with four ar) 341.33 449.41 T
(guments, \322) 434.7 449.41 T
5 F
(list) 478 449.41 T
2 F
(\323,) 501.99 449.41 T
(\322) 157.5 437.04 T
5 F
(abc) 161.94 437.04 T
2 F
(\323, \322) 179.93 437.04 T
5 F
(x y) 193.8 437.04 T
2 F
(\323, and \322) 211.79 437.04 T
5 F
(}) 242.59 437.04 T
2 F
(\323, it produces the following result:) 248.59 437.04 T
5 F
(abc {x y} \134}) 184.5 422.04 T
2 F
(Like) 157.5 408.04 T
5 F
(Tcl_AppendResult) 178.32 408.04 T
2 F
(,) 274.27 408.04 T
5 F
(Tcl_AppendElement) 279.26 408.04 T
2 F
( grows the result space if needed) 381.21 408.04 T
(and does it in a way that is ef) 157.5 395.66 T
(\336cient even for lar) 273.91 395.66 T
(ge results and repeated calls.) 347.28 395.66 T
(If you set the result for an interpreter and then decide that you want to discard it \050e.g.) 175.5 383.66 T
-0.19 (because an error has occurred and you want to replace the current result with an error mes-) 157.5 371.28 P
(sage\051, you should call the procedure) 157.5 358.9 T
5 F
(Tcl_ResetResult) 304.33 358.9 T
2 F
(. It will invoke) 394.28 358.9 T
5 F
(interp-) 157.5 346.52 T
(>freeProc) 199.48 346.52 T
2 F
( if needed and then restore the interpreter) 253.45 346.52 T
(\325) 418.4 346.52 T
(s result to its initialized) 421.17 346.52 T
(state. Y) 157.5 334.14 T
(ou can then store a new value in the result in any of the usual ways. Y) 187.03 334.14 T
(ou need not) 465.55 334.14 T
(call) 157.5 321.76 T
5 F
(Tcl_ResetResult) 174.43 321.76 T
2 F
( if you\325re going to use) 264.38 321.76 T
5 F
(Tcl_SetResult) 355.43 321.76 T
2 F
( to store the new) 433.39 321.76 T
(result, since) 157.5 309.39 T
5 F
(Tcl_SetResult) 207.74 309.39 T
2 F
( takes care of freeing any existing result.) 285.7 309.39 T
103.5 266.03 517.5 269.05 C
157.5 267.54 517.5 267.54 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 267.54 148.5 267.54 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(29.5) 123.36 273.05 T
(ClientData and deletion callbacks) 157.5 273.05 T
2 10 Q
(The fourth and \336fth ar) 157.5 249.36 T
(guments to) 246.14 249.36 T
5 F
(Tcl_CreateCommand) 292.79 249.36 T
2 F
(,) 394.73 249.36 T
5 F
(clientData) 399.73 249.36 T
2 F
( and) 459.69 249.36 T
5 F
(deleteProc) 157.5 236.98 T
2 F
(, were not discussed in Section 29.2 but they are useful when commands) 217.47 236.98 T
-0.31 (are associated with objects. The) 157.5 224.6 P
5 F
-0.73 (clientData) 285.87 224.6 P
2 F
-0.31 ( ar) 345.84 224.6 P
-0.31 (gument is used to pass a one-word value) 355.62 224.6 P
(to a command procedure. T) 157.5 212.23 T
(cl saves the) 266.99 212.23 T
5 F
(clientData) 315.56 212.23 T
2 F
( value that is passed to) 375.53 212.23 T
5 F
(Tcl_Cre-) 468.25 212.23 T
(ateCommand) 157.5 199.85 T
2 F
( and uses it as the \336rst ar) 217.47 199.85 T
(gument to the command procedure. The type) 315.83 199.85 T
5 F
-0.41 (ClientData) 157.5 187.47 P
2 F
-0.17 ( is lar) 217.47 187.47 P
-0.17 (ge enough to hold either an integer or a pointer value. It is usually the) 239.15 187.47 P
(address of a C data structure for the command to manipulate.) 157.5 175.09 T
(T) 175.5 163.09 T
(cl and Tk use) 180.91 163.09 T
3 F
(callback pr) 236.98 163.09 T
(ocedur) 281.85 163.09 T
(es) 309.24 163.09 T
2 F
( in many places. A callback is a procedure whose) 317.56 163.09 T
-0.2 (address is passed to a library procedure and saved in a data structure. Later) 157.5 150.71 P
-0.2 (, at some signif-) 453.7 150.71 P
-0.04 (icant time, the address is used to invoke the procedure \050\322call it back\323\051. A command proce-) 157.5 138.33 P
FMENDPAGE
%%EndPage: "275" 26
%%Page: "276" 26
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(276) 94.5 668.33 T
4 F
(Creating New T) 379.1 668.33 T
(cl Commands) 447.41 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
2 10 Q
0 X
-0.35 (dure is an example of a callback: T) 148.5 632.33 P
-0.35 (cl associates the procedure address with a T) 285.54 632.33 P
-0.35 (cl command) 457.56 632.33 P
-0.2 (name and calls the procedure whenever the command is invoked. When a callback is spec-) 148.5 619.91 P
-0.02 (i\336ed in T) 148.5 607.48 P
-0.02 (cl or Tk a) 184.41 607.48 P
5 F
-0.04 (ClientData) 225.42 607.48 P
2 F
-0.02 ( ar) 285.39 607.48 P
-0.02 (gument is usually provided along with the procedure) 295.45 607.48 P
(address and the) 148.5 595.05 T
5 F
(ClientData) 212.62 595.05 T
2 F
( value is passed to the callback as its \336rst ar) 272.58 595.05 T
(gument.) 446.73 595.05 T
(The) 166.5 583.05 T
5 F
(deleteProc) 184.54 583.05 T
2 F
( ar) 244.51 583.05 T
(gument to) 254.59 583.05 T
5 F
(Tcl_CreateCommand) 297.35 583.05 T
2 F
( speci\336es a deletion call-) 399.29 583.05 T
(back. If its value isn\325) 148.5 570.62 T
(t) 232.42 570.62 T
5 F
(NULL) 237.7 570.62 T
2 F
( then it is the address of a procedure for T) 261.69 570.62 T
(cl to invoke when) 428.08 570.62 T
(the command is deleted. The procedure must match the following prototype:) 148.5 558.19 T
5 F
(typedef void Tcl_CmdDeleteProc\050ClientData clientData\051;) 175.5 543.19 T
2 F
(The deletion callback takes a single ar) 148.5 529.19 T
(gument, which is the ClientData value speci\336ed) 300.98 529.19 T
(when the command was created. Deletion callbacks are used for purposes such as freeing) 148.5 516.76 T
(the object associated with a command.) 148.5 504.33 T
-0.02 (Figure 29.1 shows how) 166.5 492.33 P
5 F
-0.06 (clientData) 262.18 492.33 P
2 F
-0.02 ( and) 322.15 492.33 P
5 F
-0.06 (deleteProc) 341.53 492.33 P
2 F
-0.02 ( can be used to implement) 401.49 492.33 P
-0.27 (counter objects. The application containing this code must register) 148.5 479.9 P
5 F
-0.65 (CounterCmd) 414.23 479.9 P
2 F
-0.27 ( as a T) 474.2 479.9 P
-0.27 (cl) 499.05 479.9 P
(command using the following call:) 148.5 467.48 T
5 F
(Tcl_CreateCommand\050interp, "counter", CounterCmd,) 175.5 452.48 T
(\050ClientData\051 NULL, \050Tcl_CmdDeleteProc\051 NULL\051;) 221.15 441.05 T
2 F
(New counters can then be created by invoking the) 148.5 427.05 T
5 F
(counter) 350.84 427.05 T
2 F
( T) 392.82 427.05 T
(cl command; each invoca-) 400.72 427.05 T
(tion creates a new object and returns a name for that object:) 148.5 414.62 T
5 F
(counter) 175.5 399.62 T
199.49 384.8 175.5 384.8 2 L
V
0.4 H
N
(ctr0) 175.5 385.62 T
(counter) 175.5 371.62 T
199.49 356.8 175.5 356.8 2 L
V
N
(ctr1) 175.5 357.62 T
(CounterCmd) 148.5 343.62 T
2 F
( is the command procedure for) 208.47 343.62 T
5 F
(counter) 333.37 343.62 T
2 F
(. It allocates a structure for the) 374.8 343.62 T
(new counter and initializes its value to zero. Then it creates a name for the counter using) 148.5 331.19 T
(the static variable) 148.5 318.76 T
5 F
(id) 221.5 318.76 T
2 F
(, arranges for that name to be returned as the command\325) 233.49 318.76 T
(s result, and) 456.37 318.76 T
(increments) 148.5 306.33 T
5 F
(id) 194.85 306.33 T
2 F
( so that the next new counter will get a dif) 206.85 306.33 T
(ferent name.) 374.89 306.33 T
(This example uses the object-oriented style described in Section 27.3, where there is) 166.5 294.33 T
(one command for each counter object. As part of creating a new counter) 148.5 281.9 T
5 F
(CounterCmd) 439.92 281.9 T
2 F
(creates a new T) 148.5 269.48 T
(cl command named after the counter) 210.24 269.48 T
(. It uses the address of the) 355.96 269.48 T
5 F
(Counter) 461.99 269.48 T
2 F
(structure as the) 148.5 257.05 T
5 F
(ClientData) 211.51 257.05 T
2 F
( for the command and speci\336es) 271.47 257.05 T
5 F
(DeleteCounter) 398.6 257.05 T
2 F
( as the) 476.56 257.05 T
(deletion callback for the new command.) 148.5 244.62 T
(Counters can be manipulated by invoking the commands named after them. Each) 166.5 232.62 T
-0.04 (counter supports two options to its command:) 148.5 220.19 P
5 F
-0.09 (get) 333.42 220.19 P
2 F
-0.04 (, which returns the current value of the) 351.42 220.19 P
(counter) 148.5 207.76 T
(, and) 178.07 207.76 T
5 F
(next) 200 207.76 T
2 F
(, which increments the counter) 223.99 207.76 T
(\325) 347.32 207.76 T
(s value. Once) 350.1 207.76 T
5 F
(ctr0) 406.72 207.76 T
2 F
( and) 430.7 207.76 T
5 F
(ctr1) 450.13 207.76 T
2 F
( were) 474.12 207.76 T
(created above, the following T) 148.5 195.33 T
(cl commands could be invoked:) 270.2 195.33 T
5 F
(ctr0 next; ctr0 next; ctr0 get) 175.5 180.33 T
181.5 165.51 175.5 165.51 2 L
V
N
(2) 175.5 166.33 T
(ctr1 get) 175.5 152.33 T
181.5 137.51 175.5 137.51 2 L
V
N
(0) 175.5 138.33 T
FMENDPAGE
%%EndPage: "276" 27
%%Page: "277" 27
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(29.5 ClientData and deletion callbacks) 103.5 668.33 T
0 F
(277) 500.83 668.33 T
103.5 660.6 517.5 660.6 2 L
0.25 H
0 Z
N
103.5 90 517.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 203.4 101.33 T
103.5 135 517.5 639 R
7 X
V
103.5 135 517.5 639 C
103.5 135 517.5 639 C
103.5 138.6 517.5 639 R
7 X
0 K
V
5 9 Q
0 X
(typedef struct {) 184.5 633 T
(int value;) 207.32 623 T
(} Counter;) 184.5 613 T
(int CounterCmd\050ClientData clientData, Tcl_Interp *interp,) 184.5 593 T
(int argc, char *argv[]\051 {) 227.05 583 T
(Counter *counterPtr;) 207.32 573 T
(static int id = 0;) 207.32 563 T
(if \050argc != 1\051 {) 207.32 553 T
(interp->result = "wrong # args";) 227.05 543 T
(return TCL_ERROR;) 227.05 533 T
(}) 207.32 523 T
(counterPtr = \050Counter *\051 malloc\050sizeof\050Counter\051\051;) 207.32 513 T
(counterPtr->value = 0;) 207.32 503 T
(sprintf\050interp->result, "ctr%d", id\051;) 207.32 493 T
(id++;) 207.32 483 T
(Tcl_CreateCommand\050interp, interp->result, ObjectCmd,) 207.32 473 T
(\050ClientData\051 counterPtr, DeleteCounter\051;) 246.78 463 T
(return TCL_OK;) 207.32 453 T
(}) 184.5 443 T
(int ObjectCmd\050ClientData clientData, Tcl_Interp *interp,) 184.5 423 T
(int argc, char *argv[]\051 {) 227.05 413 T
(CounterPtr *counterPtr = \050Counter *\051 clientData;) 207.32 403 T
(if \050argc != 2\051 {) 207.32 393 T
(interp->result = "wrong # args";) 227.05 383 T
(return TCL_ERROR;) 227.05 373 T
(}) 207.32 363 T
(if \050strcmp\050argv[1], "get"\051 == 0\051 {) 207.32 353 T
(sprintf\050interp->result, "%d", counterPtr->value\051;) 227.05 343 T
(} else if \050strcmp\050argv[1], "next"\051 == 0\051 {) 207.32 333 T
(counterPtr->value++;) 227.05 323 T
(} else {) 207.32 313 T
(Tcl_AppendResult\050interp, "bad counter command \134"",) 227.05 303 T
(argv[1], "\134": should be get or next",) 266.51 293 T
(\050char *\051 NULL\051;) 266.51 283 T
(return TCL_ERROR;) 227.05 273 T
(}) 207.32 263 T
(return TCL_OK;) 207.32 253 T
(}) 184.5 243 T
(void DeleteCounter\050ClientData clientData\051 {) 184.5 223 T
(free\050\050char *\051 clientData\051;) 207.32 213 T
(}) 184.5 203 T
103.5 169 517.5 187 C
103.5 169 517.5 187 R
7 X
0 K
V
103.5 178 517.5 178 2 L
V
0.5 H
2 Z
0 X
N
103.5 135 517.5 639 C
103.5 142 517.5 160 C
103.5 142 517.5 160 R
7 X
0 K
V
103.5 151 517.5 151 2 L
V
0.5 H
2 Z
0 X
N
103.5 135 517.5 639 C
1 9 Q
0 X
0 K
(Figur) 157.5 163 T
(e  29.1.) 178.81 163 T
2 F
(An implementation of counter objects.) 209.76 163 T
103.5 135 517.5 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "277" 28
%%Page: "278" 28
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(278) 94.5 668.33 T
4 F
(Creating New T) 379.1 668.33 T
(cl Commands) 447.41 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
5 10 Q
0 X
(ctr0 clear) 175.5 632.33 T
475.33 617.51 175.5 617.51 2 L
V
0.4 H
N
(bad counter command "clear": should be get or next) 175.5 618.33 T
2 F
(The procedure) 148.5 604.33 T
5 F
(ObjectCmd) 209 604.33 T
2 F
( implements the T) 262.97 604.33 T
(cl commands for all existing counters. It is) 334.73 604.33 T
-0.3 (passed a dif) 148.5 592.33 P
-0.3 (ferent) 194.9 592.33 P
5 F
-0.72 (ClientData) 220.41 592.33 P
2 F
-0.3 ( ar) 280.38 592.33 P
-0.3 (gument for each counter) 290.16 592.33 P
-0.3 (, which it casts back to a value) 386.27 592.33 P
-0.16 (of type) 148.5 580.33 P
5 F
-0.38 (Counter *) 178.72 580.33 P
2 F
-0.16 (.) 232.31 580.33 P
5 F
-0.38 (ObjectCmd) 237.15 580.33 P
2 F
-0.16 ( then checks) 291.12 580.33 P
5 F
-0.38 (argv[1]) 342.55 580.33 P
2 F
-0.16 ( to see which command option) 384.52 580.33 P
-0.11 (was invoked. If it was) 148.5 568.33 P
5 F
-0.25 (get) 238.46 568.33 P
2 F
-0.11 ( then it returns the counter) 256.45 568.33 P
-0.11 (\325) 361.49 568.33 P
-0.11 (s value as a decimal string; if it was) 364.27 568.33 P
5 F
(next) 148.5 556.33 T
2 F
( then it increments the counter) 172.49 556.33 T
(\325) 294.16 556.33 T
(s value and leaves) 296.94 556.33 T
5 F
(interp->result) 371.88 556.33 T
2 F
( untouched) 455.83 556.33 T
(so that the result is an empty string. If an unknown command was invoked then) 148.5 544.33 T
5 F
(ObjectCmd) 148.5 532.33 T
2 F
( calls) 202.47 532.33 T
5 F
(Tcl_AppendResult) 225.79 532.33 T
2 F
( to create a useful error message.) 321.73 532.33 T
3 F
(Note:) 115.49 517.33 T
(It is not safe to cr) 148.5 517.33 T
(eate the err) 218.37 517.33 T
(or message with a statement like) 264.08 517.33 T
5 F
(sprintf\050interp->result, "bad counter command \134"%s\134": ") 175.5 504.33 T
("should be get or next", argv[1]\051;) 198.32 493.33 T
3 F
-0.07 (This is unsafe because) 148.5 479.33 P
5 F
-0.16 (argv[1]) 240.4 479.33 P
3 F
-0.07 ( has unknown length. It could be so long that) 282.37 479.33 P
5 F
-0.16 (sprintf) 464.09 479.33 P
3 F
(over\337ows the space allocated in the interpr) 148.5 469.33 T
(eter and corrupts memory .) 321.36 469.33 T
5 F
(Tcl_AppendResult) 148.5 459.33 T
3 F
( is safe because it checks the lengths of its ar) 244.45 459.33 T
(guments and) 423.41 459.33 T
(allocates as much space as needed for the r) 148.5 449.33 T
(esult.) 322.45 449.33 T
2 F
(T) 166.5 436.33 T
(o destroy a counter you can delete its T) 171.91 436.33 T
(cl command, for example:) 328.31 436.33 T
5 F
(rename ctr0 {}) 175.5 421.33 T
2 F
-0.07 (As part of deleting the command T) 148.5 407.33 P
-0.07 (cl will invoke) 287.27 407.33 P
5 F
-0.17 (DeleteProc) 344.53 407.33 P
2 F
-0.07 (, which frees up the mem-) 404.49 407.33 P
(ory associated with the counter) 148.5 395.33 T
(.) 272.3 395.33 T
-0.11 (This object-oriented implementation of counter objects is similar to Tk\325) 166.5 383.33 P
-0.11 (s implementa-) 451.7 383.33 P
(tion of widgets: there is one T) 148.5 371.33 T
(cl command to create new instances of each counter or wid-) 267.72 371.33 T
(get, and one T) 148.5 359.33 T
(cl command for each existing counter or widget. A single command) 204.98 359.33 T
(procedure implements all of the counter or widget commands for a particular type of) 148.5 347.33 T
(object, receiving a ClientData ar) 148.5 335.33 T
(gument that identi\336es a speci\336c counter or widget. A dif-) 277.94 335.33 T
(ferent mechanism is used to delete Tk widgets than for counters above, but in both cases) 148.5 323.33 T
(the command corresponding to the object is deleted at the same time as the object.) 148.5 311.33 T
94.5 267.98 508.5 271 C
148.5 269.49 508.5 269.49 2 L
0.5 H
2 Z
0 X
0 K
N
94.5 269.49 139.5 269.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(29.6) 114.36 275 T
(Deleting commands) 148.5 275 T
2 10 Q
(T) 148.5 251.31 T
(cl commands can be removed from an interpreter by calling) 153.91 251.31 T
5 F
(Tcl_DeleteCommand) 395.38 251.31 T
2 F
(.) 497.33 251.31 T
(For example, the statement below will delete the) 148.5 239.31 T
5 F
(ctr0) 345.31 239.31 T
2 F
( command in the same way as the) 369.3 239.31 T
5 F
(rename) 148.5 227.31 T
2 F
( command above:) 184.48 227.31 T
5 F
(Tcl_DeleteCommand\050interp, "ctr0"\051;) 175.5 212.31 T
2 F
(If the command has a deletion callback then it will be invoked before the command is) 148.5 198.31 T
(removed. Any command may be deleted, including built-in commands, application-spe-) 148.5 186.31 T
(ci\336c commands, and T) 148.5 174.31 T
(cl procedures.) 238.85 174.31 T
FMENDPAGE
%%EndPage: "278" 29
%%Page: "279" 29
612 792 0 FMBEGINPAGE
103.5 675 517.5 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
103.5 450 517.5 450 2 L
7 X
V
2 Z
0 X
N
103.5 108 517.5 126 R
7 X
V
0 10 Q
0 X
(279) 500.83 119.33 T
103.5 54 517.5 108 R
7 X
V
2 9 Q
0 X
(Copyright \251 1993 Addison-W) 157.5 102 T
(esley Publishing Company) 266.71 102 T
(, Inc.) 362.5 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 157.5 91 T
(. Any) 491.17 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 157.5 80 T
-0.34 (lisher) 157.5 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 176.98 69 P
(does not of) 157.5 58 T
(fer warranties in regard to this draft.) 197.28 58 T
1 24 Q
(Chapter 30) 157.5 605 T
-0.48 (Parsing) 157.5 575 S
103.5 135 517.5 423 R
7 X
V
2 10 Q
0 X
-0.08 (This chapter describes T) 157.5 416.33 P
-0.08 (cl library procedures for parsing and evaluating strings in various) 254.55 416.33 P
-0 (forms such as integers, expressions and lists. These procedures are typically used by com-) 157.5 403.86 P
-0.17 (mand procedures to process the words of T) 157.5 391.39 P
-0.17 (cl commands. See T) 327.95 391.39 P
-0.17 (able 30.1 for a summary of) 407.79 391.39 P
(the procedures.) 157.5 378.93 T
103.5 335.57 517.5 338.59 C
157.5 337.08 517.5 337.08 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 337.08 148.5 337.08 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(30.1) 123.36 342.59 T
(Numbers and booleans) 157.5 342.59 T
2 10 Q
(T) 157.5 318.9 T
(cl provides three procedures for parsing numbers and boolean values:) 162.91 318.9 T
5 F
(Tcl_GetInt) 443.24 318.9 T
2 F
(,) 503.21 318.9 T
5 F
(Tcl_GetDouble) 157.5 306.43 T
2 F
(, and) 235.46 306.43 T
5 F
(Tcl_GetBoolean) 257.39 306.43 T
2 F
(. Each of these procedures takes three ar) 341.34 306.43 T
(gu-) 502.12 306.43 T
-0.23 (ments: an interpreter) 157.5 293.96 P
-0.23 (, a string, and a pointer to a place to store the value of the string. Each) 239.36 293.96 P
(of the procedures returns) 157.5 281.49 T
5 F
(TCL_OK) 259.63 281.49 T
2 F
( or) 295.61 281.49 T
5 F
(TCL_ERROR) 308.94 281.49 T
2 F
( to indicate whether the string was) 362.91 281.49 T
(parsed successfully) 157.5 269.03 T
(. For example, the command procedure below uses) 234.29 269.03 T
5 F
(Tcl_GetInt) 440.24 269.03 T
2 F
( to) 500.21 269.03 T
(implement a) 157.5 256.56 T
5 F
(sum) 209.69 256.56 T
2 F
( command:) 227.68 256.56 T
5 F
(int SumCmd\050ClientData clientData, Tcl_Interp *interp,) 184.5 241.56 T
(int argc, char *argv[]\051 {) 230.15 230.09 T
(int num1, num2;) 207.32 218.62 T
(if \050argc != 3\051 {) 207.32 207.15 T
(interp->result = "wrong # args";) 230.15 195.68 T
(return TCL_ERROR;) 230.15 184.21 T
(}) 207.32 172.74 T
(if \050Tcl_GetInt\050interp, argv[1], &num1\051 != TCL_OK\051 {) 207.32 161.27 T
(return TCL_ERROR;) 230.15 149.8 T
(}) 207.32 138.33 T
49.5 351 103.5 423 C
40.5 360 202.5 414 R
7 X
0 K
V
1 9 Q
0 X
(FIGURE  30) 40.5 408 T
(T) 40.5 387 T
(ABLE  30) 45.83 387 T
31.5 351 130.5 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "279" 30
%%Page: "280" 30
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(280) 94.5 668.33 T
4 F
(Parsing) 474.62 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
5 10 Q
0 X
(if \050Tcl_GetInt\050interp, argv[2], &num2\051 != TCL_OK\051 {) 198.32 189.53 T
(return TCL_ERROR;) 221.15 178.53 T
(}) 198.32 167.53 T
(sprintf\050interp->result, "%d", num1+num2\051;) 198.32 156.53 T
94.5 135 508.5 639 C
94.5 196.2 508.5 639 C
5 9 Q
0 X
0 K
(int Tcl_GetInt\050Tcl_Interp *interp, char *string, int *intPtr\051) 127.5 615.8 T
2 F
(Parses) 199.5 606.8 T
5 F
(string) 224.71 606.8 T
2 F
( as an integer) 257.06 606.8 T
(, stores value at) 304.37 606.8 T
5 F
(*intPtr) 362.53 606.8 T
2 F
(, and returns) 399.92 606.8 T
5 F
(TCL_OK) 199.5 597.8 T
2 F
(. If an error occurs while parsing, returns) 231.85 597.8 T
5 F
(TCL_ERROR) 381.1 597.8 T
2 F
( and stores) 429.63 597.8 T
(an error message in) 199.5 588.8 T
5 F
(interp->result) 271.88 588.8 T
2 F
(.) 347.37 588.8 T
5 F
(int Tcl_GetDouble\050Tcl_Interp *interp, char *string, double *dou-) 127.5 579.8 T
(blePtr) 199.5 570.8 T
2 F
(\051) 231.85 570.8 T
-0.11 (Same as) 199.5 561.8 P
5 F
-0.27 (Tcl_GetInt) 231.23 561.8 P
2 F
-0.11 ( except parses) 285.15 561.8 P
5 F
-0.27 (string) 337.47 561.8 P
2 F
-0.11 ( as a \337oating-point value and) 369.83 561.8 P
(stores value at) 199.5 552.8 T
5 F
(*doublePtr) 253.16 552.8 T
2 F
(.) 306.59 552.8 T
5 F
-0.42 (int Tcl_GetBoolean\050Tcl_Interp *interp, char *string, int *intPtr\051) 127.5 543.8 P
2 F
(Same as) 199.5 534.8 T
5 F
(Tcl_GetInt) 231.45 534.8 T
2 F
( except parses) 285.37 534.8 T
5 F
(string) 338.03 534.8 T
2 F
( as a boolean and stores 0/1) 370.39 534.8 T
(value at) 199.5 525.8 T
5 F
(*intPtr) 229.95 525.8 T
2 F
(. See T) 267.2 525.8 T
(able 30.2 for legal values for) 291.78 525.8 T
5 F
(string) 397.36 525.8 T
2 F
(.) 429.71 525.8 T
5 F
(int Tcl_ExprString\050Tcl_Interp *interp, char *string\051) 127.5 506.8 T
2 F
(Evaluates) 199.5 497.8 T
5 F
(string) 236.69 497.8 T
2 F
( as an expression, stores value as string in) 269.04 497.8 T
5 F
(interp-) 199.5 488.8 T
(>result) 237.25 488.8 T
2 F
(, and returns) 274.99 488.8 T
5 F
(TCL_OK) 321.92 488.8 T
2 F
(. If an error occurs during evalua-) 354.27 488.8 T
(tion, returns) 199.5 479.8 T
5 F
(TCL_ERROR) 245.18 479.8 T
2 F
( and stores an error message in) 293.71 479.8 T
5 F
(interp-) 406.78 479.8 T
(>result) 199.5 470.8 T
2 F
(.) 237.25 470.8 T
5 F
-0.42 (int Tcl_ExprLong\050Tcl_Interp *interp, char *string, long *longPtr\051) 127.5 461.8 P
2 F
(Same as) 199.5 452.8 T
5 F
(Tcl_ExprString) 231.45 452.8 T
2 F
( except stores value as a long integer at) 306.94 452.8 T
5 F
(*longPtr) 199.5 443.8 T
2 F
(. An error occurs if the value can\325) 242.15 443.8 T
(t be converted to an integer) 363.27 443.8 T
(.) 460.86 443.8 T
5 F
(int Tcl_ExprDouble\050Tcl_Interp *interp, char *string,) 127.5 434.8 T
(    double *doublePtr\051) 127.5 425.8 T
2 F
(Same as) 199.5 416.8 T
5 F
(Tcl_ExprString) 231.45 416.8 T
2 F
( except stores value as double-precision \337oat-) 306.94 416.8 T
(ing-point value at) 199.5 407.8 T
5 F
(*doublePtr) 265.15 407.8 T
2 F
(. An error occurs if the value can\325) 318.58 407.8 T
(t be con-) 439.71 407.8 T
(verted to a \337oating-point number) 199.5 398.8 T
(.) 317.83 398.8 T
5 F
(int Tcl_ExprBoolean\050Tcl_Interp *interp, char *string, int) 127.5 389.8 T
(*intPtr\051) 199.5 380.8 T
2 F
(Same as) 199.5 371.8 T
5 F
(Tcl_ExprString) 231.45 371.8 T
2 F
( except stores value as 0/1 integer at) 306.94 371.8 T
5 F
(*intPtr) 199.5 362.8 T
2 F
(. An error occurs if the value can\325) 236.75 362.8 T
(t be converted to a boolean) 357.88 362.8 T
(value.) 199.5 353.8 T
5 F
(int Tcl_SplitList\050Tcl_Interp *interp, char *list, int *argcPtr,) 127.5 334.8 T
(char ***argvPtr\051) 149.07 325.8 T
2 F
-0.16 (Parses) 199.5 316.8 P
5 F
-0.38 (list) 224.55 316.8 P
2 F
-0.16 ( as a T) 246.12 316.8 P
-0.16 (cl list and creates an array of strings whose values are the) 268.73 316.8 P
(elements of list. Stores count of number of list elements at) 199.5 307.8 T
5 F
(*argcPtr) 411.19 307.8 T
2 F
( and) 454.33 307.8 T
(pointer to array at) 199.5 298.8 T
5 F
(*argvPtr) 265.89 298.8 T
2 F
(. Returns) 308.54 298.8 T
5 F
(TCL_OK) 343.23 298.8 T
2 F
(. If an error occurs while) 375.59 298.8 T
(parsing) 199.5 289.8 T
5 F
(list) 228.21 289.8 T
2 F
(, returns) 249.77 289.8 T
5 F
(TCL_ERROR) 281.47 289.8 T
2 F
( and stores an error message in) 330.01 289.8 T
5 F
(interp-) 199.5 280.8 T
(>result) 237.25 280.8 T
2 F
(. Space for string array is dynamically allocated; caller) 274.99 280.8 T
(must eventually pass) 199.5 271.8 T
5 F
(*argvPtr) 276.64 271.8 T
2 F
( to) 319.78 271.8 T
5 F
(free) 331.26 271.8 T
2 F
(.) 352.83 271.8 T
5 F
(char *Tcl_Merge\050int argc, char **argv\051) 127.5 262.8 T
2 F
-0.33 (Inverse of) 199.5 253.8 P
5 F
-0.8 (Tcl_SplitList) 237.27 253.8 P
2 F
-0.33 (. Returns pointer to T) 307.37 253.8 P
-0.33 (cl list whose elements are) 382.55 253.8 P
(the members of) 199.5 244.8 T
5 F
(argv) 257.66 244.8 T
2 F
(. Result is dynamically-allocated; caller must eventu-) 278.64 244.8 T
(ally pass it to) 199.5 235.8 T
5 F
(free) 249.43 235.8 T
2 F
(.) 271 235.8 T
121.5 627.55 121.5 229.05 2 L
V
0.5 H
0 Z
N
481.5 627.55 481.5 229.05 2 L
V
N
121.25 627.8 481.75 627.8 2 L
V
N
121.25 518.8 481.75 518.8 2 L
V
N
121.25 346.8 481.75 346.8 2 L
V
N
121.25 228.8 481.75 228.8 2 L
V
N
94.5 135 508.5 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "280" 31
%%Page: "281" 31
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(30.1 Numbers and booleans) 103.5 668.33 T
0 F
(281) 500.83 668.33 T
103.5 660.6 517.5 660.6 2 L
0.25 H
0 Z
N
103.5 90 517.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 203.4 101.33 T
103.5 135 517.5 639 R
7 X
V
5 10 Q
0 X
(return TCL_OK;) 207.32 632.33 T
(}) 184.5 621.33 T
(SumCmd) 157.5 607.33 T
2 F
( expects each of the command\325) 193.48 607.33 T
(s two ar) 316.99 607.33 T
(guments to be an integer) 348.45 607.33 T
(. It calls) 446.17 607.33 T
5 F
(Tcl_GetInt) 157.5 595.33 T
2 F
( to convert them from strings to integers, then it sums the values and con-) 217.47 595.33 T
(verts the result back to a decimal string in) 157.5 583.33 T
5 F
(interp->result) 327.11 583.33 T
2 F
(.) 411.06 583.33 T
5 F
(Tcl_GetInt) 416.06 583.33 T
2 F
( accepts) 476.02 583.33 T
(strings in decimal \050e.g. \322) 157.5 571.33 T
5 F
(492) 255.77 571.33 T
2 F
(\323\051, hexadecimal \050e.g. \322) 273.76 571.33 T
5 F
(0x1ae) 364.23 571.33 T
2 F
(\323\051 or octal \050e.g. \322) 394.21 571.33 T
5 F
(017) 461.92 571.33 T
2 F
(\323\051, and) 479.91 571.33 T
(allows them to be signed and preceded by white space. If the string is in one of these for-) 157.5 559.33 T
-0.29 (mats then) 157.5 547.33 P
5 F
-0.7 (Tcl_GetInt) 198 547.33 P
2 F
-0.29 ( returns) 257.97 547.33 P
5 F
-0.7 (TCL_OK) 290.14 547.33 P
2 F
-0.29 ( and stores the value of the string in the location) 326.12 547.33 P
(pointed to by its last ar) 157.5 535.33 T
(gument. If the string can\325) 248.66 535.33 T
(t be parsed correctly then) 349.79 535.33 T
5 F
(Tcl_GetInt) 453.32 535.33 T
2 F
(stores an error message in) 157.5 523.33 T
5 F
(interp->result) 263.8 523.33 T
2 F
( and returns) 347.76 523.33 T
5 F
(TCL_ERROR) 397.44 523.33 T
2 F
(;) 451.41 523.33 T
5 F
(SumCmd) 456.69 523.33 T
2 F
( then) 492.67 523.33 T
-0 (returns) 157.5 511.33 P
5 F
-0 (TCL_ERROR) 187.75 511.33 P
2 F
-0 ( to its caller with) 241.72 511.33 P
5 F
-0 (interp->result) 311.4 511.33 P
2 F
-0 ( still pointing to the error mes-) 395.35 511.33 P
(sage from) 157.5 499.33 T
5 F
(Tcl_GetInt) 199.69 499.33 T
2 F
(.) 259.65 499.33 T
(Here are some examples of invoking the) 175.5 487.33 T
5 F
(sum) 339.54 487.33 T
2 F
( command in T) 357.53 487.33 T
(cl scripts:) 417.63 487.33 T
5 F
(sum 2 3) 184.5 472.33 T
190.5 457.51 184.5 457.51 2 L
V
0.4 H
N
(5) 184.5 458.33 T
(sum 011 0x14) 184.5 444.33 T
196.49 429.51 184.5 429.51 2 L
V
N
(29) 184.5 430.33 T
(sum 3 6z) 184.5 416.33 T
358.4 401.51 184.5 401.51 2 L
V
N
(expected integer but got "6z") 184.5 402.33 T
(Tcl_GetDouble) 175.5 388.33 T
2 F
( is similar to) 253.46 388.33 T
5 F
(Tcl_GetInt) 305.66 388.33 T
2 F
( except that it expects the string to) 365.63 388.33 T
-0.09 (consist of a \337oating-point number such as \322) 157.5 376.33 P
5 F
-0.21 (-2.2) 330.95 376.33 P
2 F
-0.09 (\323 or \322) 354.93 376.33 P
5 F
-0.21 (3.0e-6) 376.96 376.33 P
2 F
-0.09 (\323 or \322) 412.94 376.33 P
5 F
-0.21 (7) 434.96 376.33 P
2 F
-0.09 (\323. It stores the dou-) 440.96 376.33 P
(ble-precision value of the number at the location given by its last ar) 157.5 364.33 T
(gument or returns an) 427.13 364.33 T
-0.2 (error in the same way as) 157.5 352.33 P
5 F
-0.49 (Tcl_GetInt) 256.19 352.33 P
2 F
-0.2 (.) 316.16 352.33 P
5 F
-0.49 (Tcl_GetBoolean) 320.95 352.33 P
2 F
-0.2 ( is similar except that it con-) 404.91 352.33 P
(verts the string to a 0 or 1 integer value, which it stores at the location given by its last) 157.5 340.33 T
-0.18 (ar) 157.5 328.33 P
-0.18 (gument. Any of the true values listed in T) 165.09 328.33 P
-0.18 (able 30.2 converts to 1 and any of the false val-) 329.76 328.33 P
(ues converts to 0.) 157.5 316.33 T
103.5 135 517.5 639 C
103.5 135 515.7 289.8 C
103.5 174.2 513.9 192.2 C
103.5 174.2 513.9 192.2 R
7 X
0 K
V
103.5 183.2 517.5 183.2 2 L
V
0.5 H
2 Z
0 X
N
103.5 135 515.7 289.8 C
1 9 Q
0 X
0 K
(T) 157.5 168.2 T
(able  30.2.) 162.67 168.2 T
2 F
(Legal values for boolean strings parsed by) 205.61 168.2 T
5 F
(Tcl_GetBoolean) 360.11 168.2 T
2 F
(. Any of the values) 435.61 168.2 T
103.5 138.2 513.9 156.2 C
103.5 138.2 513.9 156.2 R
7 X
0 K
V
103.5 147.2 517.5 147.2 2 L
V
0.5 H
2 Z
0 X
N
103.5 135 515.7 289.8 C
2 9 Q
0 X
0 K
(may be abbreviated or capitalized.) 157.5 159.2 T
2 10 Q
-0.16 (T) 253.91 271.53 P
-0.16 (rue V) 259.67 271.53 P
-0.16 (alues) 280.87 271.53 P
-0.16 (False V) 313.41 271.53 P
-0.16 (alues) 342.95 271.53 P
(1) 275.16 253.53 T
(0) 335.95 253.53 T
(true) 269.89 239.53 T
(false) 329.02 239.53 T
(on) 272.66 225.53 T
(of) 332.71 225.53 T
(f) 340.86 225.53 T
(yes) 271 211.53 T
(no) 333.45 211.53 T
247.91 281.95 247.91 206.45 2 L
V
0.5 H
0 Z
N
307.41 282.45 307.41 205.95 2 L
V
N
369.49 281.95 369.49 206.45 2 L
V
N
247.66 282.2 369.74 282.2 2 L
V
N
248.16 265.45 369.24 265.45 2 L
V
N
248.16 262.95 369.24 262.95 2 L
V
N
247.66 206.2 369.74 206.2 2 L
V
N
103.5 135 517.5 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "281" 32
%%Page: "282" 32
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(282) 94.5 668.33 T
4 F
(Parsing) 474.62 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
2 10 Q
0 X
(Many other T) 166.5 632.33 T
(cl and Tk library procedures are similar to) 220.76 632.33 T
5 F
(Tcl_GetInt) 391.74 632.33 T
2 F
( in the way) 451.7 632.33 T
(they use an) 148.5 620.33 T
5 F
(interp) 195.96 620.33 T
2 F
( ar) 231.94 620.33 T
(gument for error reporting. These procedures all expect the inter-) 242.03 620.33 T
(preter) 148.5 608.33 T
(\325) 172.18 608.33 T
(s result to be in its initialized state when they are called. If they complete success-) 174.96 608.33 T
-0.32 (fully then they usually leave the result in that state; if an error occurs then they put an error) 148.5 596.33 P
-0.21 (message in the result. The procedures\325 return values indicate whether they succeeded, usu-) 148.5 584.33 P
-0.08 (ally as a) 148.5 572.33 P
5 F
-0.19 (TCL_OK) 183.52 572.33 P
2 F
-0.08 ( or) 219.5 572.33 P
5 F
-0.19 (TCL_ERROR) 232.67 572.33 P
2 F
-0.08 ( completion code but sometimes in other forms such as) 286.64 572.33 P
-0.21 (a) 148.5 560.33 P
5 F
-0.5 (NULL) 155.23 560.33 P
2 F
-0.21 ( string pointer) 179.21 560.33 P
-0.21 (. When an error occurs, all the caller needs to do is to return a failure) 234.32 560.33 P
(itself, leaving the error message in the interpreter) 148.5 548.33 T
(\325) 345.38 548.33 T
(s result.) 348.16 548.33 T
94.5 504.98 508.5 508 C
148.5 506.49 508.5 506.49 2 L
0.5 H
2 Z
0 X
0 K
N
94.5 506.49 139.5 506.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(30.2) 114.36 512 T
(Expression evaluation) 148.5 512 T
2 10 Q
(T) 148.5 488.31 T
(cl provides four library procedures that evaluate expressions of the form described in) 153.91 488.31 T
(Chapter XXX:) 148.5 476.31 T
5 F
(Tcl_ExprString) 209.57 476.31 T
2 F
(,) 293.52 476.31 T
5 F
(Tcl_ExprLong) 298.52 476.31 T
2 F
(,) 370.48 476.31 T
5 F
(Tcl_ExprDouble) 375.48 476.31 T
2 F
(, and) 459.43 476.31 T
5 F
(Tcl_ExprBoolean) 148.5 464.31 T
2 F
(. These procedures are similar except that they return the result of) 238.45 464.31 T
(the expression in dif) 148.5 452.31 T
(ferent forms as indicated by their names. Here is a slightly simpli\336ed) 229.65 452.31 T
(implementation of the) 148.5 440.31 T
5 F
(expr) 239.28 440.31 T
2 F
( command, which uses) 263.27 440.31 T
5 F
(Tcl_ExprString) 356.82 440.31 T
2 F
(:) 440.77 440.31 T
5 F
(int ExprCmd\050ClientData clientData, TclInterp *interp,) 175.5 425.31 T
(int argc, char *argv[]\051 {) 221.15 414.31 T
(if \050argc != 2\051 {) 198.32 403.31 T
(interp->result = "wrong # args";) 221.15 392.31 T
(return TCL_ERROR;) 221.15 381.31 T
(}) 198.32 370.31 T
(return Tcl_ExprString\050interp, argv[1]\051;) 198.32 359.31 T
(}) 175.5 348.31 T
2 F
(All) 148.5 334.31 T
5 F
(ExprCmd) 163.77 334.31 T
2 F
( does is to check its ar) 205.75 334.31 T
(gument count and then call) 293.84 334.31 T
5 F
(Tcl_ExprString) 404.6 334.31 T
2 F
(.) 488.55 334.31 T
5 F
(Tcl_ExprString) 148.5 322.31 T
2 F
( evaluates its second ar) 232.45 322.31 T
(gument as a T) 324.42 322.31 T
(cl expression and returns the) 380.07 322.31 T
(value as a string in) 148.5 310.31 T
5 F
(interp->result) 225.95 310.31 T
2 F
(. Like) 309.9 310.31 T
5 F
(Tcl_GetInt) 335.72 310.31 T
2 F
(, it returns) 395.68 310.31 T
5 F
(TCL_OK) 438.99 310.31 T
2 F
( if it) 474.97 310.31 T
(evaluated the expression successfully; if an error occurs it leaves an error message in) 148.5 298.31 T
5 F
(interp->result) 148.5 286.31 T
2 F
( and returns) 232.45 286.31 T
5 F
(TCL_ERROR) 282.14 286.31 T
2 F
(.) 336.11 286.31 T
5 F
(Tcl_ExprLong) 166.5 274.31 T
2 F
(,) 238.46 274.31 T
5 F
(Tcl_ExprDouble) 243.46 274.31 T
2 F
(, and) 327.41 274.31 T
5 F
(Tcl_ExprBoolean) 349.34 274.31 T
2 F
( are similar to) 439.29 274.31 T
5 F
(Tcl_ExprString) 148.5 262.31 T
2 F
( except that they return the expression\325) 232.45 262.31 T
(s result as a long integer) 387.34 262.31 T
(, dou-) 483.82 262.31 T
(ble-precision \337oating-point number) 148.5 250.31 T
(, or 0/1 integer) 290.23 250.31 T
(, respectively) 348.68 250.31 T
(. Each of the procedures) 401.32 250.31 T
-0.16 (takes an additional ar) 148.5 238.31 P
-0.16 (gument that points to a place to store the result. For these procedures) 233.04 238.31 P
(the result must be convertible to the requested type. For example, if \322) 148.5 226.31 T
5 F
(abc) 425.53 226.31 T
2 F
(\323 is passed to) 443.52 226.31 T
5 F
(Tcl_ExprLong) 148.5 214.31 T
2 F
( then it will return an error because \322) 220.46 214.31 T
5 F
(abc) 367.56 214.31 T
2 F
(\323 has no integer value. If the) 385.55 214.31 T
(string \322) 148.5 202.31 T
5 F
(40) 178.2 202.31 T
2 F
(\323 is passed to) 190.2 202.31 T
5 F
(Tcl_ExprBoolean) 245.72 202.31 T
2 F
( it will succeed and store 1 in the value) 335.67 202.31 T
(word \050any non-zero integer is considered to be true\051.) 148.5 190.31 T
FMENDPAGE
%%EndPage: "282" 33
%%Page: "283" 33
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(30.3 Manipulating lists) 103.5 668.33 T
0 F
(283) 500.83 668.33 T
103.5 660.6 517.5 660.6 2 L
0.25 H
0 Z
N
103.5 90 517.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 203.4 101.33 T
103.5 135 517.5 639 R
7 X
V
103.5 623.98 517.5 627 C
157.5 625.49 517.5 625.49 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 625.49 148.5 625.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(30.3) 123.36 631 T
(Manipulating lists) 157.5 631 T
2 10 Q
(T) 157.5 607.31 T
(cl provides several procedures for manipulating lists, of which the most useful are) 162.91 607.31 T
5 F
(Tcl_SplitList) 157.5 595.17 T
2 F
( and) 235.46 595.17 T
5 F
(Tcl_Merge) 254.89 595.17 T
2 F
(. Given a string in the form of a T) 308.86 595.17 T
(cl list,) 443.06 595.17 T
5 F
(Tcl_SplitList) 157.5 583.04 T
2 F
( extracts the elements and returns them as an array of string pointers.) 235.46 583.04 T
(For example, here is an implementation of T) 157.5 570.91 T
(cl\325) 335.01 570.91 T
(s) 345.01 570.91 T
5 F
(lindex) 351.39 570.91 T
2 F
( command that uses) 387.37 570.91 T
5 F
(Tcl_SplitList) 157.5 558.77 T
2 F
(:) 235.46 558.77 T
5 F
(int LindexCmd\050ClientData clientData,) 184.5 543.77 T
(Tcl_Interp *interp, int argc, char *argv[]\051 {) 230.15 532.64 T
(int index, listArgc;) 207.32 521.5 T
(char **listArgv;) 207.32 510.37 T
(if \050argc != 3\051 {) 207.32 499.23 T
(interp->result = "wrong # args";) 230.15 488.1 T
(return TCL_ERROR;) 230.15 476.96 T
(}) 207.32 465.83 T
-0.28 (if \050Tcl_GetInt\050interp, argv[2], &index\051 != TCL_OK\051 {) 207.32 454.7 P
(return TCL_ERROR;) 230.15 443.56 T
(}) 207.32 432.43 T
(if \050Tcl_SplitList\050interp, argv[1], &listArgc,) 207.32 421.29 T
(&listArgv\051 != TCL_OK\051 {) 252.97 410.16 T
(return TCL_ERROR;) 230.15 399.02 T
(}) 207.32 387.89 T
(if \050\050index >= 0\051 && \050index < listArgc\051\051 {) 207.32 376.75 T
(Tcl_SetResult\050interp, listArgv[index],) 230.15 365.62 T
(TCL_VOLATILE\051;) 275.8 354.48 T
(}) 207.32 343.35 T
(free\050\050char *\051 listArgv\051;) 207.32 332.22 T
(return TCL_OK;) 207.32 321.08 T
(}) 184.5 309.95 T
(LindexCmd) 157.5 295.95 T
2 F
( checks its ar) 211.47 295.95 T
(gument count, calls) 263.19 295.95 T
5 F
(Tcl_GetInt) 343.7 295.95 T
2 F
( to convert) 403.67 295.95 T
5 F
(argv[2]) 448.91 295.95 T
2 F
( \050the) 490.89 295.95 T
(index\051 into an integer) 157.5 283.81 T
(, then calls) 242.87 283.81 T
5 F
(Tcl_SplitList) 288.4 283.81 T
2 F
( to parse the list.) 366.36 283.81 T
5 F
(Tcl_SplitList) 434.65 283.81 T
2 F
-0.26 (returns a count of the number of elements in the list to) 157.5 271.68 P
5 F
-0.62 (listArgc) 373.68 271.68 P
2 F
-0.26 (. It also creates an array) 421.65 271.68 P
-0.29 (of pointers to the values of the elements and stores a pointer to that array in) 157.5 259.54 P
5 F
-0.69 (listArgv) 456.6 259.54 P
2 F
-0.29 (. If) 503.92 259.54 P
5 F
(Tcl_SplitList) 157.5 247.41 T
2 F
( encounters an error in parsing the list \050e.g. unmatched braces\051 then it) 235.46 247.41 T
(returns) 157.5 235.28 T
5 F
(TCL_ERROR) 187.75 235.28 T
2 F
( and leaves an error message in) 241.72 235.28 T
5 F
(interp-) 369.11 235.28 T
(>result) 411.09 235.28 T
2 F
(; otherwise it) 453.07 235.28 T
(returns) 157.5 223.14 T
5 F
(TCL_OK) 187.75 223.14 T
2 F
(.) 223.73 223.14 T
5 F
(Tcl_SplitList) 178 211.14 T
2 F
( calls) 255.96 211.14 T
5 F
(malloc) 279.27 211.14 T
2 F
( to allocate space for the array of pointers and for) 315.25 211.14 T
-0.21 (the string values of the elements; the caller must free up this space by passing) 157.5 199.01 P
5 F
-0.5 (listArgv) 467.23 199.01 P
2 F
(to) 157.5 186.87 T
5 F
(free) 167.77 186.87 T
2 F
(. The space for both pointers and strings is allocated in a single block of memory) 191.76 186.87 T
-0.38 (so only a single call to) 157.5 174.74 P
5 F
-0.93 (free) 247.36 174.74 P
2 F
-0.38 ( is needed.) 271.34 174.74 P
5 F
-0.93 (LindexCmd) 315.15 174.74 P
2 F
-0.38 ( calls) 369.12 174.74 P
5 F
-0.93 (Tcl_SetResult) 391.67 174.74 P
2 F
-0.38 ( to copy the) 469.63 174.74 P
(desired element into the interpreter) 157.5 162.6 T
(\325) 297.76 162.6 T
(s result. It speci\336es) 300.54 162.6 T
5 F
(TCL_VOLATILE) 379.66 162.6 T
2 F
( to indicate that) 451.62 162.6 T
(the string value is about to be destroyed \050its memory will be freed\051;) 157.5 150.47 T
5 F
(Tcl_SetResult) 429.26 150.47 T
2 F
-0.15 (will make a copy of the) 157.5 138.33 P
5 F
-0.37 (listArgv[index]) 253.18 138.33 P
2 F
-0.15 ( for) 343.13 138.33 P
5 F
-0.37 (interp) 359.47 138.33 P
2 F
-0.15 (\325) 395.45 138.33 P
-0.15 (s result. If the speci\336ed index) 398.23 138.33 P
FMENDPAGE
%%EndPage: "283" 34
%%Page: "284" 34
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(284) 94.5 668.33 T
4 F
(Parsing) 474.62 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
2 10 Q
0 X
(is outside the range of elements in the list then) 148.5 632.33 T
5 F
(LindexCmd) 336.72 632.33 T
2 F
( leaves) 390.69 632.33 T
5 F
(interp->result) 420.66 632.33 T
2 F
(in its initialized state, which returns an empty string.) 148.5 620.33 T
5 F
(Tcl_Merge) 166.5 608.33 T
2 F
( is the inverse of) 220.47 608.33 T
5 F
(Tcl_SplitList) 289.03 608.33 T
2 F
(. Given) 366.99 608.33 T
5 F
(argc) 398.91 608.33 T
2 F
( and) 422.9 608.33 T
5 F
(argv) 442.33 608.33 T
2 F
( informa-) 466.32 608.33 T
(tion describing the elements of a list, it returns a) 148.5 596.33 T
5 F
(malloc) 343.65 596.33 T
2 F
(\325ed string containing the list.) 379.63 596.33 T
5 F
-1.01 (Tcl_Merge) 148.5 584.33 P
2 F
-0.42 ( always succeeds so it doesn\325) 202.47 584.33 P
-0.42 (t need an) 317.04 584.33 P
5 F
-1.01 (interp) 354.35 584.33 P
2 F
-0.42 ( ar) 390.33 584.33 P
-0.42 (gument for error reporting.) 400 584.33 P
(Here\325) 148.5 572.33 T
(s another implementation of the) 170.7 572.33 T
5 F
(list) 300.34 572.33 T
2 F
( command, which uses) 324.32 572.33 T
5 F
(Tcl_Merge) 417.87 572.33 T
2 F
(:) 471.84 572.33 T
5 F
(int ListCmd2\050ClientData clientData, Tcl_Interp *interp,) 175.5 557.33 T
(int argc, char *argv[]\051 {) 221.15 546.33 T
(interp->result = Tcl_Merge\050argc-1, argv+1\051;) 198.32 535.33 T
(interp->freeProc = \050Tcl_FreeProc *\051 free;) 198.32 524.33 T
(return TCL_OK;) 198.32 513.33 T
(}) 175.5 502.33 T
(ListCmd2) 148.5 488.33 T
2 F
( takes the result from) 196.47 488.33 T
5 F
(Tcl_Merge) 283.36 488.33 T
2 F
( and stores it in the interpreter) 337.33 488.33 T
(\325) 457.61 488.33 T
(s result.) 460.39 488.33 T
(Since the list string is dynamically allocated) 148.5 476.33 T
5 F
(ListCmd2) 327.56 476.33 T
2 F
( sets) 375.54 476.33 T
5 F
(interp->freeProc) 395.52 476.33 T
2 F
( to) 491.47 476.33 T
5 F
(free) 148.5 464.33 T
2 F
( so that T) 172.49 464.33 T
(cl will call) 209.27 464.33 T
5 F
(free) 253.96 464.33 T
2 F
( to release the storage for the list when it is no longer) 277.95 464.33 T
(needed.) 148.5 452.33 T
FMENDPAGE
%%EndPage: "284" 35
%%Page: "285" 35
612 792 0 FMBEGINPAGE
103.5 675 517.5 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
103.5 450 517.5 450 2 L
7 X
V
2 Z
0 X
N
103.5 108 517.5 126 R
7 X
V
0 10 Q
0 X
(285) 500.83 119.33 T
103.5 54 517.5 108 R
7 X
V
2 9 Q
0 X
(Copyright \251 1993 Addison-W) 157.5 102 T
(esley Publishing Company) 266.71 102 T
(, Inc.) 362.5 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 157.5 91 T
(. Any) 491.17 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 157.5 80 T
-0.34 (lisher) 157.5 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 176.98 69 P
(does not of) 157.5 58 T
(fer warranties in regard to this draft.) 197.28 58 T
1 24 Q
(Chapter 31) 157.5 605 T
-0.48 (Exceptions) 157.5 575 S
103.5 135 517.5 423 R
7 X
V
2 10 Q
0 X
(Many T) 157.5 416.33 T
(cl commands, such as) 188.72 416.33 T
5 F
(if) 278.38 416.33 T
2 F
( and) 290.38 416.33 T
5 F
(while) 309.81 416.33 T
2 F
(, have ar) 339.79 416.33 T
(guments that are T) 373.74 416.33 T
(cl scripts. The) 447.71 416.33 T
(command procedures for these commands invoke) 157.5 404.33 T
5 F
(Tcl_Eval) 358.46 404.33 T
2 F
( recursively to evaluate the) 406.43 404.33 T
(scripts. If) 157.5 392.33 T
5 F
(Tcl_Eval) 197.75 392.33 T
2 F
( returns a completion code other than) 245.72 392.33 T
5 F
(TCL_OK) 397 392.33 T
2 F
( then an) 432.98 392.33 T
3 F
(exception) 467.12 392.33 T
2 F
( is) 505.42 392.33 T
(said to have occurred. Exceptions include) 157.5 380.33 T
5 F
(TCL_ERROR) 326.54 380.33 T
2 F
(, which was described in Chapter) 380.51 380.33 T
(31, plus several others that have not been mentioned before. This chapter introduces the) 157.5 368.33 T
(full set of exceptions and describes how to unwind nested evaluations and leave useful) 157.5 356.33 T
(information in the) 157.5 344.33 T
5 F
(errorInfo) 232.18 344.33 T
2 F
( and) 286.15 344.33 T
5 F
(errorCode) 305.58 344.33 T
2 F
( variables. See T) 359.55 344.33 T
(able 31.1 for a sum-) 425.46 344.33 T
(mary of procedures related to exception handling.) 157.5 332.33 T
103.5 288.98 517.5 292 C
157.5 290.49 517.5 290.49 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 290.49 148.5 290.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(31.1) 123.36 296 T
(Completion codes.) 157.5 296 T
2 10 Q
-0.16 (T) 157.5 272.31 P
-0.16 (able 31.2 lists the full set of T) 162.91 272.31 P
-0.16 (cl completion codes that may be returned by command pro-) 280.48 272.31 P
-0.1 (cedures. If a command procedure returns anything other than) 157.5 260.31 P
5 F
-0.24 (TCL_OK) 403.06 260.31 P
2 F
-0.1 ( then T) 439.04 260.31 P
-0.1 (cl aborts the) 466.45 260.31 P
-0.02 (evaluation of the script containing the command and returns the same completion code as) 157.5 248.31 P
(the result of) 157.5 236.31 T
5 F
(Tcl_Eval) 207.74 236.31 T
2 F
( \050or) 255.72 236.31 T
5 F
(Tcl_EvalFile) 272.37 236.31 T
2 F
(, etc\051.) 344.33 236.31 T
5 F
(TCL_OK) 369.3 236.31 T
2 F
( and) 405.28 236.31 T
5 F
(TCL_ERROR) 424.71 236.31 T
2 F
( have) 478.68 236.31 T
(already been discussed; they are used for normal returns and errors, respectively) 157.5 224.31 T
(. The) 477.69 224.31 T
-0.21 (completion codes) 157.5 212.31 P
5 F
-0.5 (TCL_BREAK) 229.81 212.31 P
2 F
-0.21 ( or) 283.78 212.31 P
5 F
-0.5 (TCL_CONTINUE) 296.68 212.31 P
2 F
-0.21 ( occur if) 368.64 212.31 P
5 F
-0.5 (break) 403.81 212.31 P
2 F
-0.21 ( or) 433.8 212.31 P
5 F
-0.5 (continue) 446.7 212.31 P
2 F
-0.21 ( com-) 494.67 212.31 P
(mands are invoked by a script; in both of these cases the interpreter) 157.5 200.31 T
(\325) 427.11 200.31 T
(s result will be an) 429.89 200.31 T
(empty string. The) 157.5 188.31 T
5 F
(TCL_RETURN) 230.79 188.31 T
2 F
( completion code occurs if) 290.76 188.31 T
5 F
(return) 399.29 188.31 T
2 F
( is invoked; in this) 435.27 188.31 T
(case the interpreter) 157.5 176.31 T
(\325) 233.91 176.31 T
(s result will be the intended result of the enclosing procedure.) 236.69 176.31 T
(As an example of how to generate a) 175.5 164.31 T
5 F
(TCL_BREAK) 321.49 164.31 T
2 F
( completion code, here is the com-) 375.46 164.31 T
(mand procedure for the) 157.5 152.31 T
5 F
(break) 253.53 152.31 T
2 F
( command:) 283.51 152.31 T
49.5 351 103.5 423 C
40.5 360 202.5 414 R
7 X
0 K
V
1 9 Q
0 X
(FIGURE  31) 40.5 408 T
(T) 40.5 387 T
(ABLE  31) 45.83 387 T
31.5 351 130.5 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "285" 36
%%Page: "286" 36
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(286) 94.5 668.33 T
4 F
(Exceptions) 459.62 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
5 10 Q
0 X
(int BreakCmd\050ClientData clientData, Tcl_Interp *interp,) 175.5 302.83 T
(int argc, char *argv[]\051 {) 221.15 291.72 T
(if \050argc != 2\051 {) 198.32 280.6 T
(interp->result = "wrong # args";) 221.15 269.49 T
(return TCL_ERROR;) 221.15 258.37 T
(}) 198.32 247.26 T
(return TCL_BREAK;) 198.32 236.14 T
(}) 175.5 225.03 T
(TCL_BREAK) 169 211.03 T
2 F
(,) 222.97 211.03 T
5 F
(TCL_CONTINUE) 227.97 211.03 T
2 F
(, and) 299.93 211.03 T
5 F
(TCL_RETURN) 321.86 211.03 T
2 F
( are used to unwind nested) 381.82 211.03 T
-0 (script evaluations back to an enclosing looping command or procedure invocation. Under) 148.5 198.91 P
(most circumstances, any procedure that receives a completion code other than) 148.5 186.79 T
5 F
(TCL_OK) 462.7 186.79 T
2 F
(from) 148.5 174.68 T
5 F
(Tcl_Eval) 170.43 174.68 T
2 F
( should immediately return that same completion code to its caller with-) 218.4 174.68 T
-0.17 (out modifying the interpreter) 148.5 162.56 P
-0.17 (\325) 264.12 162.56 P
-0.17 (s result. However) 266.9 162.56 P
-0.17 (, a few commands process some of the spe-) 336.38 162.56 P
(cial completion codes without returning them upward. For example, here is an) 148.5 150.45 T
(implementation of the) 148.5 138.33 T
5 F
(while) 239.28 138.33 T
2 F
( command:) 269.26 138.33 T
94.5 135 508.5 639 C
94.5 484.2 508.5 639 C
94.5 531.8 508.5 549.8 C
94.5 531.8 508.5 549.8 R
7 X
0 K
V
94.5 540.8 508.5 540.8 2 L
V
0.5 H
2 Z
0 X
N
94.5 484.2 508.5 639 C
94.5 504.8 508.5 522.8 C
94.5 504.8 508.5 522.8 R
7 X
0 K
V
94.5 513.8 508.5 513.8 2 L
V
0.5 H
2 Z
0 X
N
94.5 484.2 508.5 639 C
1 9 Q
0 X
0 K
(T) 148.5 525.8 T
(able  31.1.) 153.67 525.8 T
2 F
(A summary of T) 196.61 525.8 T
(cl library procedures for setting) 255.64 525.8 T
5 F
(errorInfo) 371.2 525.8 T
2 F
( and) 419.73 525.8 T
5 F
(errorCode) 437.2 525.8 T
2 F
(.) 485.73 525.8 T
5 F
(Tcl_AddErrorInfo\050Tcl_Interp *interp, char *message\051) 127.5 615.8 T
2 F
(Adds) 199.5 606.8 T
5 F
(message) 220.72 606.8 T
2 F
( to stack trace being formed in) 258.47 606.8 T
5 F
(the errorInfo) 370.04 606.8 T
2 F
( variable.) 440.14 606.8 T
5 F
(Tcl_SetErrorCode\050Tcl_Interp *interp, char *f) 127.5 597.8 T
(ield, char *f) 364.77 597.8 T
(ield,) 434.87 597.8 T
(... \050char *\051 NULL\051) 149.07 588.8 T
2 F
(Creates a list whose elements are the) 199.5 579.8 T
5 F
(f) 334.03 579.8 T
(ield) 339.42 579.8 T
2 F
( ar) 360.99 579.8 T
(guments, and sets the) 370.06 579.8 T
5 F
(errorCode) 199.5 570.8 T
2 F
( variable to the contents of the list.) 248.03 570.8 T
121.5 627.55 121.5 564.05 2 L
V
0.5 H
0 Z
N
481.5 627.55 481.5 564.05 2 L
V
N
121.25 627.8 481.75 627.8 2 L
V
N
121.25 563.8 481.75 563.8 2 L
V
N
94.5 135 508.5 639 C
40.5 63 571.5 729 C
94.5 135 508.5 639 C
94.5 309.5 508.5 484.2 C
94.5 354.6 508.5 372.6 C
94.5 354.6 508.5 372.6 R
7 X
0 K
V
94.5 363.6 508.5 363.6 2 L
V
0.5 H
2 Z
0 X
N
94.5 309.5 508.5 484.2 C
1 9 Q
0 X
0 K
(T) 148.5 348.6 T
(able  31.2.) 153.67 348.6 T
2 F
(Completion codes that may be returned by command procedures and procedures that) 196.61 348.6 T
94.5 318.6 508.5 336.6 C
94.5 318.6 508.5 336.6 R
7 X
0 K
V
94.5 327.6 508.5 327.6 2 L
V
0.5 H
2 Z
0 X
N
94.5 309.5 508.5 484.2 C
2 9 Q
0 X
0 K
(evaluate scripts, such as) 148.5 339.6 T
5 F
(Tcl_Eval) 237.11 339.6 T
2 F
(.) 280.25 339.6 T
2 10 Q
(Completion Code) 187.5 465.93 T
(Meaning) 357.67 465.93 T
(TCL_OK) 154.96 447.93 T
(Command completed normally) 302.84 447.93 T
(.) 426.56 447.93 T
(TCL_ERROR) 154.96 433.93 T
(Unrecoverable error occurred.) 302.84 433.93 T
(TCL_BREAK) 154.96 419.93 T
5 F
(Break) 302.84 419.93 T
2 F
( command was invoked.) 332.83 419.93 T
(TCL_CONTINUE) 154.96 405.93 T
5 F
(Continue) 302.84 405.93 T
2 F
( command was invoked.) 350.82 405.93 T
(TCL_RETURN) 154.96 391.93 T
5 F
(Return) 302.84 391.93 T
2 F
( command was invoked.) 338.82 391.93 T
148.96 476.35 148.96 386.85 2 L
V
0.5 H
0 Z
N
296.84 476.85 296.84 386.35 2 L
V
N
454.04 476.35 454.04 386.85 2 L
V
N
148.71 476.6 454.29 476.6 2 L
V
N
149.21 459.85 453.79 459.85 2 L
V
N
149.21 457.35 453.79 457.35 2 L
V
N
148.71 442.6 454.29 442.6 2 L
V
N
148.71 428.6 454.29 428.6 2 L
V
N
148.71 414.6 454.29 414.6 2 L
V
N
148.71 400.6 454.29 400.6 2 L
V
N
148.71 386.6 454.29 386.6 2 L
V
N
94.5 135 508.5 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "286" 37
%%Page: "287" 37
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(31.1 Completion codes.) 103.5 668.33 T
0 F
(287) 500.83 668.33 T
103.5 660.6 517.5 660.6 2 L
0.25 H
0 Z
N
103.5 90 517.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 203.4 101.33 T
103.5 135 517.5 639 R
7 X
V
5 10 Q
0 X
(int WhileCmd\050ClientData clientData, Tcl_Interp *interp,) 184.5 632.33 T
(int argc, char *argv[]\051 {) 230.15 620.98 T
(int bool;) 207.32 609.63 T
(int code;) 207.32 598.28 T
(if \050argc != 3\051 {) 207.32 586.93 T
(interp->result = "wrong # args";) 230.15 575.58 T
(return TCL_ERROR;) 230.15 564.23 T
(}) 207.32 552.88 T
(while \0501\051 {) 207.32 541.53 T
(Tcl_ResetResult\050interp\051;) 230.15 530.18 T
(if \050Tcl_ExprBoolean\050interp, argv[1], &bool\051) 230.15 518.83 T
(!= TCL_OK\051 {) 275.8 507.48 T
(return TCL_ERROR;) 252.97 496.13 T
(}) 230.15 484.78 T
(if \050bool == 0\051 {) 230.15 473.43 T
(return TCL_OK;) 252.97 462.08 T
(}) 230.15 450.73 T
(code = Tcl_Eval\050interp, argv[2]\051;) 230.15 439.38 T
(if \050code == TCL_CONTINUE\051 {) 230.15 428.03 T
(continue;) 252.97 416.68 T
(} else if \050code == TCL_BREAK\051 {) 230.15 405.33 T
(return TCL_OK;) 252.97 393.98 T
(} else if \050code != TCL_OK\051 {) 230.15 382.63 T
(return code;) 252.97 371.28 T
(}) 230.15 359.93 T
(}) 207.32 348.58 T
(}) 184.5 337.23 T
2 F
(After checking its ar) 157.5 323.23 T
(gument count,) 239.2 323.23 T
5 F
(WhileCmd) 298.88 323.23 T
2 F
( enters a loop where each iteration evalu-) 346.86 323.23 T
-0.05 (ates the command\325) 157.5 310.88 P
-0.05 (s \336rst ar) 232.35 310.88 P
-0.05 (gument as an expression and its second ar) 264.28 310.88 P
-0.05 (gument as a script. If) 431.14 310.88 P
(an error occurs while evaluating the expression then) 157.5 298.53 T
5 F
(WhileCmd) 368.44 298.53 T
2 F
( returns the error) 416.42 298.53 T
(. If the) 482.75 298.53 T
(expression evaluates successfully but its value is 0, then the command terminates with a) 157.5 286.18 T
(normal return. Otherwise it evaluates the script ar) 157.5 273.83 T
(gument. If the completion code is) 355.5 273.83 T
5 F
(TCL_CONTINUE) 157.5 261.48 T
2 F
( then) 229.46 261.48 T
5 F
(WhileCmd) 251.67 261.48 T
2 F
( goes on to the next loop iteration. If the code is) 299.64 261.48 T
5 F
(TCL_BREAK) 157.5 249.13 T
2 F
( then) 211.47 249.13 T
5 F
(WhileCmd) 233.68 249.13 T
2 F
( ends the execution of the command and returns) 281.65 249.13 T
5 F
(TCL_OK) 475.67 249.13 T
2 F
-0.13 (to its caller) 157.5 236.78 P
-0.13 (. If) 201.11 236.78 P
5 F
-0.31 (Tcl_Eval) 215.01 236.78 P
2 F
-0.13 ( returns any other completion code besides) 262.98 236.78 P
5 F
-0.31 (TCL_OK) 435.58 236.78 P
2 F
-0.13 ( then) 471.56 236.78 P
5 F
-0.31 (Whi-) 493.51 236.78 P
(leCmd) 157.5 224.43 T
2 F
( simply re\337ects that code upwards. This causes the proper unwinding to occur on) 187.48 224.43 T
5 F
(TCL_ERROR) 157.5 212.08 T
2 F
( or) 211.47 212.08 T
5 F
(TCL_RETURN) 224.79 212.08 T
2 F
( codes, and it will also unwind if any new completion) 284.76 212.08 T
(codes are added in the future.) 157.5 199.73 T
-0.15 (If an exceptional return unwinds all the way through the outermost script being evalu-) 175.5 187.73 P
(ated then T) 157.5 175.38 T
(cl checks the completion code to be sure it is either) 201.77 175.38 T
5 F
(TCL_OK) 408.56 175.38 T
2 F
( or) 444.54 175.38 T
5 F
(TCL_ERROR) 457.86 175.38 T
2 F
(.) 511.83 175.38 T
(If not then T) 157.5 163.03 T
(cl turns the return into an error with an appropriate error message. Further-) 207.04 163.03 T
(more, if a) 157.5 150.68 T
5 F
(TCL_BREAK) 198.58 150.68 T
2 F
( or) 252.55 150.68 T
5 F
(TCL_CONTINUE) 265.87 150.68 T
2 F
( exception unwinds all the way out of a pro-) 337.83 150.68 T
(cedure then T) 157.5 138.33 T
(cl also turns it into an error) 211.75 138.33 T
(. For example:) 319.46 138.33 T
FMENDPAGE
%%EndPage: "287" 38
%%Page: "288" 38
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(288) 94.5 668.33 T
4 F
(Exceptions) 459.62 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
5 10 Q
0 X
(break) 175.5 632.33 T
373.39 617.51 175.5 617.51 2 L
V
0.4 H
N
(invoked "break" outside of a loop) 175.5 618.33 T
(proc badbreak {} {break}) 175.5 604.33 T
(badbreak) 175.5 593.33 T
373.39 578.51 175.5 578.51 2 L
V
N
(invoked "break" outside of a loop) 175.5 579.33 T
2 F
(Thus applications need not worry about completion codes other then) 148.5 565.33 T
5 F
(TCL_OK) 424.98 565.33 T
2 F
( and) 460.96 565.33 T
5 F
(TCL_ERROR) 148.5 553.33 T
2 F
( when they evaluate scripts from the outermost level.) 202.47 553.33 T
94.5 509.98 508.5 513 C
148.5 511.49 508.5 511.49 2 L
0.5 H
2 Z
0 X
0 K
N
94.5 511.49 139.5 511.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(31.2) 114.36 517 T
(Augmenting the stack trace in errorInfo) 148.5 517 T
2 10 Q
(When an error occurs, T) 148.5 493.31 T
(cl modi\336es the) 245.21 493.31 T
5 F
(errorInfo) 306.56 493.31 T
2 F
( global variable to hold a stack trace) 360.53 493.31 T
(of the commands that were being evaluated at the time of the error) 148.5 481.31 T
(. It does this by calling) 413.85 481.31 T
(the procedure) 148.5 469.31 T
5 F
(Tcl_AddErrorInfo) 205.67 469.31 T
2 F
(, which has the following prototype:) 301.62 469.31 T
5 F
(void Tcl_AddErrorInfo\050Tcl_Interp *interp,) 175.5 454.31 T
(char *message\051) 221.15 443.31 T
2 F
(The \336rst call to) 148.5 429.31 T
5 F
(Tcl_AddErrorInfo) 211.79 429.31 T
2 F
( after an error sets) 307.74 429.31 T
5 F
(errorInfo) 382.39 429.31 T
2 F
( to the error mes-) 436.36 429.31 T
-0.27 (sage stored in) 148.5 417.31 P
5 F
-0.65 (interp-) 205.15 417.31 P
-0.65 (>result) 247.12 417.31 P
2 F
-0.27 ( and then appends) 289.1 417.31 P
5 F
-0.65 (message) 362.4 417.31 P
2 F
-0.27 (. Each subsubsequent call) 404.38 417.31 P
(for the same error appends) 148.5 405.31 T
5 F
(message) 257.57 405.31 T
2 F
( to) 299.55 405.31 T
5 F
(errorInfo) 312.32 405.31 T
2 F
(\325) 366.29 405.31 T
(s current value. Whenever a com-) 369.07 405.31 T
(mand procedure returns) 148.5 393.31 T
5 F
(TCL_ERROR) 245.92 393.31 T
(Tcl_Eval) 302.39 393.31 T
2 F
( calls) 350.36 393.31 T
5 F
(Tcl_AddErrorInfo) 373.68 393.31 T
2 F
( to log) 469.62 393.31 T
(information about the command that was being executed. If there are nested calls to) 148.5 381.31 T
5 F
(Tcl_Eval) 148.5 369.31 T
2 F
( then each one adds information about its command as it unwinds, so that a) 196.47 369.31 T
(stack trace forms in) 148.5 357.31 T
5 F
(errorInfo) 229.54 357.31 T
2 F
(.) 283.52 357.31 T
(Command procedures can call) 166.5 345.31 T
5 F
(Tcl_AddErrorInfo) 290.29 345.31 T
2 F
( themselves to provide addi-) 386.24 345.31 T
(tional information about the context of the error) 148.5 333.31 T
(. This is particularly useful for command) 339.2 333.31 T
(procedures tha invoke) 148.5 321.31 T
5 F
(Tcl_Eval) 239.26 321.31 T
2 F
( recursively) 287.23 321.31 T
(. For example, consider the following T) 333.49 321.31 T
(cl) 491.57 321.31 T
(procedure, which is a buggy attempt to \336nd the length of the longest element in a list:) 148.5 309.31 T
5 F
(proc longest list {) 175.5 294.31 T
(set i [llength $list]) 198.32 283.31 T
(while {$i >= 0} {) 198.32 272.31 T
(set length [string length [lindex $list $i]]) 221.15 261.31 T
(if {$length > $max} {) 221.15 250.31 T
(set max $length) 243.97 239.31 T
(}) 221.15 228.31 T
(incr i) 221.15 217.31 T
(}) 198.32 206.31 T
(return $max) 198.32 195.31 T
(}) 175.5 184.31 T
2 F
(This procedure is buggy because it never initializes the variable) 148.5 170.31 T
5 F
(max) 405.53 170.31 T
2 F
(, so an error will) 423.52 170.31 T
-0.16 (occur when the) 148.5 158.31 P
5 F
-0.39 (if) 211.57 158.31 P
2 F
-0.16 ( command attempts to read it. If the procedure is invoked with the com-) 223.57 158.31 P
FMENDPAGE
%%EndPage: "288" 39
%%Page: "289" 39
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(31.2 Augmenting the stack trace in errorInfo) 103.5 668.33 T
0 F
(289) 500.83 668.33 T
103.5 660.6 517.5 660.6 2 L
0.25 H
0 Z
N
103.5 90 517.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 203.4 101.33 T
103.5 135 517.5 639 R
7 X
V
2 10 Q
0 X
(mand \322) 157.5 632.33 T
5 F
(longest {a 12345 xyz}) 186.64 632.33 T
2 F
(\323, then the following stack trace will be stored in) 312.58 632.33 T
5 F
(errorInfo) 157.5 619.85 T
2 F
( after the error:) 211.47 619.85 T
5 F
(can\325t read "max": no such variable) 184.5 604.85 T
(while executing) 207.32 593.36 T
("if {$length > $max} {) 184.5 581.87 T
(set max $length) 252.97 570.39 T
(}") 230.15 558.9 T
(\050"while" body line 3\051) 207.32 547.41 T
(invoked from within) 207.32 535.93 T
("while {$i >= 0} {) 184.5 524.44 T
(set length [string length [lindex $list $i]]) 230.15 512.95 T
(if {$length > $max} {) 230.15 501.47 T
(set max $length) 252.97 489.98 T
(}) 230.15 478.5 T
(incr i) 230.15 467.01 T
(}") 207.32 455.52 T
(\050procedure "longest" line 3\051) 207.32 444.04 T
(invoked from within) 207.32 432.55 T
("longest {a 12345 xyz}") 184.5 421.06 T
2 F
-0.05 (All of the information is provided by) 157.5 407.06 P
5 F
-0.13 (Tcl_Eval) 307.3 407.06 P
2 F
-0.05 ( except for the two lines with comments) 355.27 407.06 P
(in parentheses. The \336rst of these lines was generated by the command procedure for) 157.5 394.58 T
5 F
(while) 157.5 382.09 T
2 F
(, and the second was generated by the T) 187.48 382.09 T
(cl code that evaluates procedure bodies. If) 346.38 382.09 T
(you used the implementation of) 157.5 369.6 T
5 F
(while) 286.59 369.6 T
2 F
( on page 287 instead of the built-in T) 316.57 369.6 T
(cl implemen-) 464.11 369.6 T
(tation then the \336rst parenthesized message would be missing. The C code below is a) 157.5 357.12 T
(replacement for the last) 157.5 344.63 T
5 F
(else) 254.09 344.63 T
2 F
( clause in) 278.07 344.63 T
5 F
(WhileCmd) 318.32 344.63 T
2 F
(; it uses) 366.3 344.63 T
5 F
(Tcl_AppendResult) 399.34 344.63 T
2 F
( to) 495.28 344.63 T
(add the parenthetical remark.) 157.5 332.14 T
5 F
(...) 184.5 317.14 T
(} else if \050code != TCL_OK\051 {) 184.5 305.66 T
(if \050code == TCL_ERROR\051 {) 207.32 294.17 T
(char msg[50];) 230.15 282.68 T
(sprintf\050msg, "\134n) 230.15 271.2 T
(\050\134"while\134" body line %d\051",) 350.08 271.2 T
(interp->errorLine\051;) 275.8 259.71 T
(Tcl_AddErrorInfo\050interp, msg\051;) 230.15 248.22 T
(}) 207.32 236.74 T
(return code;) 207.32 225.25 T
(}) 184.5 213.77 T
(...) 184.5 202.28 T
2 F
-0.19 (The) 157.5 188.28 P
5 F
-0.46 (errorLine) 175.35 188.28 P
2 F
-0.19 ( \336eld of) 229.32 188.28 P
5 F
-0.46 (interp) 262.34 188.28 P
2 F
-0.19 ( is set by) 298.32 188.28 P
5 F
-0.46 (Tcl_Eval) 335.32 188.28 P
2 F
-0.19 ( whenever a command procedure) 383.29 188.28 P
(returns an error; it gives the line number of the command that produced the error) 157.5 175.79 T
(, within) 479.63 175.79 T
-0.29 (the script being executed. A line number of 1 corresponds to the \336rst line, which is the line) 157.5 163.31 P
-0 (containing the open brace in this example; the) 157.5 150.82 P
5 F
-0.01 (if) 344 150.82 P
2 F
-0 ( command that generated the error is on) 355.99 150.82 P
(line 3.) 157.5 138.33 T
FMENDPAGE
%%EndPage: "289" 40
%%Page: "290" 40
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(290) 94.5 668.33 T
4 F
(Exceptions) 459.62 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
2 10 Q
0 X
(For simple T) 166.5 632.33 T
(cl commands you shouldn\325) 217.44 632.33 T
(t need to invoke) 325.25 632.33 T
5 F
(Tcl_AddErrorInfo) 391.88 632.33 T
2 F
(: the) 487.82 632.33 T
(information provided by) 148.5 620.33 T
5 F
(Tcl_Eval) 248.71 620.33 T
2 F
( will be suf) 296.69 620.33 T
(\336cient. However) 341.2 620.33 T
(, if you write code that) 407.42 620.33 T
(calls) 148.5 608.33 T
5 F
(Tcl_Eval) 169.32 608.33 T
2 F
( then I recommend calling) 217.29 608.33 T
5 F
(Tcl_AddErrorInfo) 324.71 608.33 T
2 F
( whenever) 420.66 608.33 T
5 F
(Tcl_Eval) 148.5 596.33 T
2 F
( returns an error) 196.47 596.33 T
(, to provide information about why) 260.18 596.33 T
5 F
(Tcl_Eval) 402.59 596.33 T
2 F
( was invoked) 450.56 596.33 T
(and also to include the line number of the error) 148.5 584.33 T
(.) 335.87 584.33 T
3 F
(Note:) 115.49 569.33 T
(Y) 148.5 569.33 T
(ou must call) 153.14 569.33 T
5 F
(Tcl_AddErrorInfo) 204.5 569.33 T
3 F
( rather than trying to set the) 300.45 569.33 T
5 F
(errorInfo) 415.66 569.33 T
3 F
( variable) 469.63 569.33 T
-0.38 (dir) 148.5 559.33 P
-0.38 (ectly) 159.79 559.33 P
-0.38 (, because) 178.11 559.33 P
5 F
-0.91 (Tcl_AddErrorInfo) 217.04 559.33 P
3 F
-0.38 ( contains special code to detect the \336rst call after) 312.99 559.33 P
(an err) 148.5 549.33 T
(or and clear out the old contents of) 172.84 549.33 T
5 F
(errorInfo) 316.09 549.33 T
3 F
(.) 370.06 549.33 T
94.5 507.98 508.5 511 C
148.5 509.49 508.5 509.49 2 L
0.5 H
2 Z
0 X
0 K
N
94.5 509.49 139.5 509.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(31.3) 114.36 515 T
(Setting errorCode) 148.5 515 T
2 10 Q
(The last piece of information set after an error is the) 148.5 491.31 T
5 F
(errorCode) 359.16 491.31 T
2 F
( variable, which pro-) 413.14 491.31 T
(vides information about the error in a form that\325) 148.5 479.31 T
(s easy to process with T) 340.04 479.31 T
(cl scripts. It\325) 435.1 479.31 T
(s) 484.8 479.31 T
(intended for use in situations where a script is likely to catch the error) 148.5 467.31 T
(, determine exactly) 427.07 467.31 T
(what went wrong, and attempt to recover from it if possible. If a command procedure) 148.5 455.31 T
-0.34 (returns an error to T) 148.5 443.31 P
-0.34 (cl without setting) 226.92 443.31 P
5 F
-0.82 (errorCode) 297.8 443.31 P
2 F
-0.34 ( then T) 351.77 443.31 P
-0.34 (cl sets it to) 378.71 443.31 P
5 F
-0.82 (NONE) 422.87 443.31 P
2 F
-0.34 (. If a command) 446.86 443.31 P
-0.05 (procedure wishes to provide information in) 148.5 431.31 P
5 F
-0.11 (errorCode) 323.66 431.31 P
2 F
-0.05 ( then it should invoke) 377.63 431.31 P
5 F
-0.11 (Tcl_Se-) 466.52 431.31 P
(tErrorCode) 148.5 419.31 T
2 F
( before returning) 208.47 419.31 T
5 F
(TCL_ERROR) 278.13 419.31 T
2 F
(.) 332.1 419.31 T
5 F
(Tcl_SetErrorCode) 166.5 407.31 T
2 F
( takes as ar) 262.45 407.31 T
(guments an interpreter and any number of string) 306.39 407.31 T
(ar) 148.5 395.31 T
(guments ending with a null pointer) 156.09 395.31 T
(. It forms the strings into a list and stores the list as) 295.18 395.31 T
-0.18 (the value of) 148.5 383.31 P
5 F
-0.44 (errorCode) 197.64 383.31 P
2 F
-0.18 (. For example, suppose that you have written several commands) 251.61 383.31 P
(to implement gizmo objects, and that there are several errors that could occur in com-) 148.5 371.31 T
(mands that manipulate the objects, such as an attempt to use a non-existent object. If one) 148.5 359.31 T
-0.3 (of your command procedures detects a non-existent object error) 148.5 347.31 P
-0.3 (, it might set) 401.05 347.31 P
5 F
-0.72 (errorCode) 452.33 347.31 P
2 F
(as follows:) 148.5 335.31 T
5 F
(Tcl_SetErrorCode\050interp, "GIZMO", "EXIST",) 175.5 320.31 T
("no object by that name", \050char *\051 NULL\051;) 221.15 309.31 T
2 F
(This will leave the value \322) 148.5 295.31 T
5 F
(GIZMO EXIST {no object by that name}) 253.7 295.31 T
2 F
(\323 in) 469.58 295.31 T
5 F
(errorCode) 148.5 283.31 T
2 F
(.) 202.47 283.31 T
5 F
(GIZMO) 207.47 283.31 T
2 F
( identi\336es a general class of errors \050those associated with gizmo) 237.45 283.31 T
(objects\051,) 148.5 271.31 T
5 F
(EXIST) 185.14 271.31 T
2 F
( is the symbolic name for the particular error that occurred, and the last) 215.12 271.31 T
-0.25 (element of the list is a human-readable error message. Y) 148.5 259.31 P
-0.25 (ou can store whatever you want in) 370.63 259.31 P
5 F
(errorCode) 148.5 247.31 T
2 F
( as long as the \336rst list element doesn\325) 202.47 247.31 T
(t con\337ict with other values already in) 354.98 247.31 T
-0.31 (use, but the overall idea is to provide symbolic information that can easily be processed by) 148.5 235.31 P
(a T) 148.5 223.31 T
(cl script. For example, a script that accesses gizmos might catch errors and if the error) 160.84 223.31 T
(is a non-existent gizmo it might automatically create a new gizmo.) 148.5 211.31 T
3 F
(Note:) 115.49 196.31 T
(It\325) 148.5 196.31 T
(s important to call) 156.65 196.31 T
5 F
(Tcl_SetErrorCode) 232.72 196.31 T
3 F
( rather than setting) 328.67 196.31 T
5 F
(errorCode) 408.08 196.31 T
3 F
( dir) 462.05 196.31 T
(ectly) 475.84 196.31 T
-0.15 (with) 148.5 186.31 P
5 F
-0.37 (Tcl_SetVar) 168.07 186.31 P
3 F
-0.15 (. This is because) 226.92 186.31 P
5 F
-0.37 (Tcl_SetErrrorCode) 294.88 186.31 P
3 F
-0.15 ( also sets other information) 396.82 186.31 P
(in the interpr) 148.5 176.31 T
(eter so that) 200.88 176.31 T
5 F
(errorCode) 248.35 176.31 T
3 F
( isn\325) 302.33 176.31 T
(t later set to its default value; if you set) 318.71 176.31 T
5 F
(errorCode) 148.5 166.31 T
3 F
( dir) 202.47 166.31 T
(ectly) 216.26 166.31 T
(, then T) 234.58 166.31 T
(cl will override your value with the default value) 263.93 166.31 T
5 F
(NONE) 461.31 166.31 T
3 F
(.) 485.3 166.31 T
FMENDPAGE
%%EndPage: "290" 41
%%Page: "291" 41
612 792 0 FMBEGINPAGE
103.5 675 517.5 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
103.5 450 517.5 450 2 L
7 X
V
2 Z
0 X
N
103.5 108 517.5 126 R
7 X
V
0 10 Q
0 X
(291) 500.83 119.33 T
103.5 54 517.5 108 R
7 X
V
2 9 Q
0 X
(Copyright \251 1993 Addison-W) 157.5 102 T
(esley Publishing Company) 266.71 102 T
(, Inc.) 362.5 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 157.5 91 T
(. Any) 491.17 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 157.5 80 T
-0.34 (lisher) 157.5 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 176.98 69 P
(does not of) 157.5 58 T
(fer warranties in regard to this draft.) 197.28 58 T
1 24 Q
(Chapter 32) 157.5 605 T
-0.48 (Accessing T) 157.5 575 S
-0.48 (cl V) 271.95 575 S
-0.48 (ariables) 308.45 575 S
103.5 135 517.5 423 R
7 X
V
2 10 Q
0 X
-0.22 (This chapter describes how you can access T) 157.5 416.33 P
-0.22 (cl variables from C code. T) 334.83 416.33 P
-0.22 (cl provides library) 442.38 416.33 P
(procedures to set variables, read their values, and unset them. It also provides a tracing) 157.5 404.22 T
(mechanism that you can use to monitor and restrict variable accesses. T) 157.5 392.1 T
(able 32.1 summa-) 443.25 392.1 T
(rizes the library procedures that are discussed in the chapter) 157.5 379.98 T
(.) 395.92 379.98 T
103.5 336.63 517.5 339.65 C
157.5 338.14 517.5 338.14 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 338.14 148.5 338.14 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(32.1) 123.36 343.65 T
(Naming variables) 157.5 343.65 T
2 10 Q
(The procedures related to variables come in pairs such as) 157.5 319.96 T
5 F
(Tcl_SetVar) 388.42 319.96 T
2 F
( and) 448.39 319.96 T
5 F
(Tcl_Set-) 467.82 319.96 T
-0.38 (Var2) 157.5 307.84 P
2 F
-0.16 (. The two procedures in each pair dif) 181.49 307.84 P
-0.16 (fer only in the way they name a T) 327.3 307.84 P
-0.16 (cl variable. In) 460.24 307.84 P
-0.28 (the \336rst procedure of each pair) 157.5 295.73 P
-0.28 (, such as) 278.09 295.73 P
5 F
-0.67 (Tcl_SetVar) 313.89 295.73 P
2 F
-0.28 (, the variable is named with a single) 373.45 295.73 P
(string ar) 157.5 283.61 T
(gument,) 190.35 283.61 T
5 F
(varName) 225.33 283.61 T
2 F
(. This form is typically used when a variable name has been) 267.31 283.61 T
-0.33 (speci\336ed as an ar) 157.5 271.5 P
-0.33 (gument to a T) 224.87 271.5 P
-0.33 (cl command. The string can name a scalar variable, e.g. \322) 278.98 271.5 P
5 F
-0.8 (x) 504.9 271.5 P
2 F
-0.33 (\323) 510.9 271.5 P
(or \322) 157.5 259.38 T
5 F
(f) 172.76 259.38 T
(ieldName) 178.76 259.38 T
2 F
(\323, or it can name an element of an array) 226.73 259.38 T
(, e.g. \322) 384.27 259.38 T
5 F
(a\05042\051) 410.64 259.38 T
2 F
(\323 or) 440.62 259.38 T
(\322) 157.5 247.26 T
5 F
(area\050South America\051) 161.94 247.26 T
2 F
(\323. No substitutions or modi\336cations are performed on the) 275.88 247.26 T
(name. For example, if) 157.5 235.15 T
5 F
(varName) 247.99 235.15 T
2 F
( is \322) 289.97 235.15 T
5 F
(a\050$i\051) 306.07 235.15 T
2 F
(\323 T) 336.05 235.15 T
(cl will not use the value of variable) 348.39 235.15 T
5 F
(i) 491.63 235.15 T
2 F
( as) 497.62 235.15 T
(the element name within array) 157.5 223.03 T
5 F
(a) 281.57 223.03 T
2 F
(; it will use the string \322) 287.57 223.03 T
5 F
($i) 379.19 223.03 T
2 F
(\323 literally as the element name.) 391.18 223.03 T
-0.26 (The second procedure of each pair has a name ending in \322) 175.5 211.03 P
5 F
-0.62 (2) 404.39 211.03 P
2 F
-0.26 (\323, e.g.) 410.39 211.03 P
5 F
-0.62 (Tcl_SetVar2) 436.23 211.03 P
2 F
-0.26 (. In) 502.2 211.03 P
(these procedures the variable name is separated into two ar) 157.5 198.91 T
(guments:) 392.96 198.91 T
5 F
(name1) 432.11 198.91 T
2 F
( and) 462.09 198.91 T
5 F
(name2) 481.52 198.91 T
2 F
(.) 511.51 198.91 T
(If the variable is a scalar then) 157.5 186.8 T
5 F
(name1) 277.67 186.8 T
2 F
( is the name of the variable and) 307.66 186.8 T
5 F
(name2) 435.34 186.8 T
2 F
( is) 465.32 186.8 T
5 F
(NULL) 476.98 186.8 T
2 F
(. If) 500.97 186.8 T
(the variable is an array element then) 157.5 174.68 T
5 F
(name1) 304.88 174.68 T
2 F
( is the name of the array and) 334.86 174.68 T
5 F
(name2) 450.88 174.68 T
2 F
( is the) 480.86 174.68 T
-0.18 (name of the element within the array) 157.5 162.57 P
-0.18 (. This form of procedure is less commonly used but it) 302.9 162.57 P
(is slightly faster than the \336rst form \050procedures like) 157.5 150.45 T
5 F
(Tcl_SetVar) 365.42 150.45 T
2 F
( are implemented by) 425.38 150.45 T
(calling procedures like) 157.5 138.33 T
5 F
(Tcl_SetVar2) 251.04 138.33 T
2 F
(\051.) 317 138.33 T
49.5 351 103.5 423 C
40.5 360 202.5 414 R
7 X
0 K
V
1 9 Q
0 X
(FIGURE  32) 40.5 408 T
(T) 40.5 387 T
(ABLE  32) 45.83 387 T
31.5 351 130.5 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "291" 42
%%Page: "292" 42
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(292) 94.5 668.33 T
4 F
(Accessing T) 404.27 668.33 T
(cl V) 457.59 668.33 T
(ariables) 473.51 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
94.5 135 508.5 639 C
94.5 138.6 508.5 639 C
94.5 210.4 508.5 228.4 C
94.5 210.4 508.5 228.4 R
7 X
0 K
V
94.5 219.4 508.5 219.4 2 L
V
0.5 H
2 Z
0 X
N
94.5 138.6 508.5 639 C
1 9 Q
0 X
0 K
-0.26 (T) 148.5 204.4 P
-0.26 (able  32.1.) 153.67 204.4 P
2 F
-0.26 (T) 195.56 204.4 P
-0.26 (cl library procedures for manipulating variables. The procedures come in pairs; in one) 200.42 204.4 P
(procedure the variable is named with a single string \050which may specify either a scalar or an array) 148.5 195.4 T
(element\051 and in the other procedure the variable is named with separate array and element names) 148.5 186.4 T
94.5 156.4 508.5 174.4 C
94.5 156.4 508.5 174.4 R
7 X
0 K
V
94.5 165.4 508.5 165.4 2 L
V
0.5 H
2 Z
0 X
N
94.5 138.6 508.5 639 C
2 9 Q
0 X
0 K
(\050) 148.5 177.4 T
5 F
(name1) 151.49 177.4 T
2 F
( and) 178.46 177.4 T
5 F
(name2) 195.93 177.4 T
2 F
(, respectively\051. If) 222.89 177.4 T
5 F
(name2) 286.53 177.4 T
2 F
( is) 313.49 177.4 T
5 F
(NULL) 323.98 177.4 T
2 F
( then the variable must be a scalar) 345.55 177.4 T
(.) 467.1 177.4 T
5 F
(char *Tcl_SetVar\050Tcl_Interp *interp, char *varName,) 127.5 619.4 T
(char *newValue, int f) 149.07 610.4 T
(lags\051) 262.31 610.4 T
(char *Tcl_SetVar2\050Tcl_Interp *interp, char *name1, char *name2,) 127.5 601.4 T
(char *newValue, int f) 149.07 592.4 T
(lags\051) 262.31 592.4 T
2 F
-0.1 (Sets the value of the variable to) 199.5 583.4 P
5 F
-0.23 (newValue) 314.39 583.4 P
2 F
-0.1 (, creating the variable if it didn\325) 357.53 583.4 P
-0.1 (t) 470.85 583.4 P
-0.01 (already exist. Returns the new value of the variable or) 199.5 574.4 P
5 F
-0.03 (NULL) 395.82 574.4 P
2 F
-0.01 ( in case of error) 417.39 574.4 P
-0.01 (.) 473.25 574.4 P
5 F
(char *Tcl_GetVar\050Tcl_Interp *interp, char *varName,) 127.5 565.4 T
(int f) 149.07 556.4 T
(lags\051) 176.03 556.4 T
(char *Tcl_GetVar2\050Tcl_Interp *interp, char *name1, char *name2,) 127.5 547.4 T
(int f) 149.07 538.4 T
(lags\051) 176.03 538.4 T
2 F
(Returns the current value of the variable, or) 199.5 529.4 T
5 F
(NULL) 358.49 529.4 T
2 F
( in case of error) 380.06 529.4 T
(.) 435.96 529.4 T
5 F
(int Tcl_UnsetVar\050Tcl_Interp *interp, char *varName,) 127.5 520.4 T
(int f) 149.07 511.4 T
(lags\051) 176.03 511.4 T
(int Tcl_UnsetVar2\050Tcl_Interp *interp, char *name1, char *name2,) 127.5 502.4 T
(int f) 149.07 493.4 T
(lags\051) 176.03 493.4 T
2 F
(Removes the variable from) 199.5 484.4 T
5 F
(interp) 299.34 484.4 T
2 F
( and returns) 331.7 484.4 T
5 F
(TCL_OK) 376.37 484.4 T
2 F
(. If the variable) 408.73 484.4 T
(doesn\325) 199.5 475.4 T
(t exist or has an active trace then it can\325) 223.3 475.4 T
(t be removed and) 365.65 475.4 T
5 F
(TCL_ERROR) 199.5 466.4 T
2 F
( is returned.) 248.03 466.4 T
5 F
(int Tcl_TraceVar\050Tcl_Interp *interp, char *varName,) 127.5 447.4 T
(int f) 149.07 438.4 T
(lags, Tcl_VarTraceProc *proc, ClientData clientData\051) 176.03 438.4 T
(int Tcl_TraceVar2\050Tcl_Interp *interp, char *name1, char *name2,) 127.5 429.4 T
(int f) 149.07 420.4 T
(lags, Tcl_VarTraceProc *proc, ClientData clientData\051) 176.03 420.4 T
2 F
-0.3 (Arrange for) 199.5 411.4 P
5 F
-0.72 (proc) 243.32 411.4 P
2 F
-0.3 ( to be invoked whenever one of the operations speci\336ed by) 264.89 411.4 P
5 F
(f) 199.5 402.4 T
(lags) 204.89 402.4 T
2 F
( is performed on the variable. Returns) 226.46 402.4 T
5 F
(TCL_OK) 364.74 402.4 T
2 F
( or) 397.1 402.4 T
5 F
(TCL_ERROR) 409.08 402.4 T
2 F
(.) 457.61 402.4 T
5 F
(Tcl_UntraceVar\050Tcl_Interp *interp, char *varName,) 127.5 393.4 T
(int f) 149.07 384.4 T
(lags, Tcl_VarTraceProc *proc, ClientData clientData\051) 176.03 384.4 T
(Tcl_UntraceVar2\050Tcl_Interp *interp, char *name1, char *name2,) 127.5 375.4 T
(int f) 149.07 366.4 T
(lags, Tcl_VarTraceProc *proc, ClientData clientData\051) 176.03 366.4 T
2 F
(Removes the trace on the variable that matches) 199.5 357.4 T
5 F
(proc) 371.22 357.4 T
2 F
(,) 392.79 357.4 T
5 F
(clientData) 397.29 357.4 T
2 F
(, and) 451.21 357.4 T
5 F
(f) 199.5 348.4 T
(lags) 204.89 348.4 T
2 F
(, if there is one.) 226.46 348.4 T
5 F
(ClientData Tcl_VarTraceInfo\050Tcl_Interp *interp, char *varName,) 127.5 339.4 T
-0.5 (int f) 149.07 330.4 P
-0.5 (lags, Tcl_VarTraceProc *proc, ClientData prevClientData\051) 175.53 330.4 P
(ClientData Tcl_VarTraceInfo2\050Tcl_Interp *interp, char *name1,) 127.5 321.4 T
(char *name2, int f) 149.07 312.4 T
(lags, Tcl_VarTraceProc *proc,) 246.13 312.4 T
(ClientData prevclientData\051) 149.07 303.4 T
2 F
(If) 199.5 294.4 T
5 F
(prevClientData) 207.73 294.4 T
2 F
( is) 283.23 294.4 T
5 F
(NULL) 293.71 294.4 T
2 F
(, returns the ClientData associated with the) 315.28 294.4 T
(\336rst trace on the variable that matches) 199.5 285.4 T
5 F
(f) 338.53 285.4 T
(lags) 343.92 285.4 T
2 F
( and) 365.49 285.4 T
5 F
(proc) 382.96 285.4 T
2 F
( \050only the) 404.53 285.4 T
5 F
(TCL_GLOBAL_ONLY) 199.5 276.4 T
2 F
( bit of) 280.39 276.4 T
5 F
(f) 304.1 276.4 T
(lags) 309.5 276.4 T
2 F
( is used\051; otherwise returns the) 331.07 276.4 T
5 F
(Cli-) 443.39 276.4 T
-0.68 (entData) 199.5 267.4 P
2 F
-0.28 ( for the next trace matching) 237.25 267.4 P
5 F
-0.68 (f) 336.87 267.4 P
-0.68 (lags) 342.26 267.4 P
2 F
-0.28 ( and) 363.83 267.4 P
5 F
-0.68 (proc) 380.73 267.4 P
2 F
-0.28 ( after the one whose) 402.3 267.4 P
5 F
-0.37 (ClientData) 199.5 258.4 P
2 F
-0.15 ( is) 253.42 258.4 P
5 F
-0.37 (prevClientData) 263.61 258.4 P
2 F
-0.15 (. Returns) 339.1 258.4 P
5 F
-0.37 (NULL) 373.49 258.4 P
2 F
-0.15 ( if there are no \050more\051) 395.06 258.4 P
(matching traces.) 199.5 249.4 T
121.5 631.15 121.5 242.65 2 L
V
0.5 H
0 Z
N
481.5 631.15 481.5 242.65 2 L
V
N
121.25 631.4 481.75 631.4 2 L
V
N
121.25 459.4 481.75 459.4 2 L
V
N
121.25 242.4 481.75 242.4 2 L
V
N
94.5 135 508.5 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "292" 43
%%Page: "293" 43
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(32.2 Setting variable values) 103.5 668.33 T
0 F
(293) 500.83 668.33 T
103.5 660.6 517.5 660.6 2 L
0.25 H
0 Z
N
103.5 90 517.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 203.4 101.33 T
103.5 135 517.5 639 R
7 X
V
103.5 415.18 517.5 418.2 C
157.5 416.69 517.5 416.69 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 416.69 148.5 416.69 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(32.2) 123.36 422.2 T
(Setting variable values) 157.5 422.2 T
5 10 Q
(Tcl_SetVar) 157.5 398.51 T
2 F
( and) 217.47 398.51 T
5 F
(Tcl_SetVar2) 236.9 398.51 T
2 F
( are used to set the value of a variable. For example,) 302.86 398.51 T
5 F
(Tcl_SetVar\050interp, "a", "44", 0\051;) 184.5 383.51 T
2 F
-0.01 (will set the value of variable) 157.5 369.51 P
5 F
-0.02 (a) 273.48 369.51 P
2 F
-0.01 ( in) 279.48 369.51 P
5 F
-0.02 (interp) 292.24 369.51 P
2 F
-0.01 ( to the string \322) 328.22 369.51 P
5 F
-0.02 (44) 385.38 369.51 P
2 F
-0.01 (\323. If there does not yet exist a) 397.37 369.51 P
(variable named) 157.5 357.32 T
5 F
(a) 221.34 357.32 T
2 F
( then a new one will be created. The variable is set in the current execu-) 227.33 357.32 T
-0.24 (tion context: if a T) 157.5 345.14 P
-0.24 (cl procedure is currently being executed, the variable will be a local one) 230.25 345.14 P
(for that procedure; if no procedure is currently being executed then the variable will be a) 157.5 332.95 T
(global variable. If the operation completed successfully then the return value from) 157.5 320.76 T
5 F
(Tcl_SetVar) 157.5 308.58 T
2 F
( is a pointer to the variable\325) 217.47 308.58 T
(s new value as stored in the variable table \050this) 326.84 308.58 T
(value is static enough to be used as an interpreter) 157.5 296.39 T
(\325) 354.11 296.39 T
(s result\051. If an error occurred, such as) 356.89 296.39 T
(specifying the name of an array without also specifying an element name, then) 157.5 284.2 T
5 F
(NULL) 474.49 284.2 T
2 F
( is) 498.47 284.2 T
(returned.) 157.5 272.02 T
(The last ar) 175.5 260.02 T
(gument to) 217.51 260.02 T
5 F
(Tcl_SetVar) 260.26 260.02 T
2 F
( or) 320.23 260.02 T
5 F
(Tcl_SetVar2) 333.55 260.02 T
2 F
( consists of an OR\325ed combi-) 399.52 260.02 T
(nation of \337ag bits. T) 157.5 247.83 T
(able 32.2 lists the symbolic values for the \337ags. If the) 238.15 247.83 T
5 F
(TCL_GLOBA-) 454.4 247.83 T
(L_ONLY) 157.5 235.64 T
2 F
( \337ag is speci\336ed then the operation always applies to a global variable, even if a) 193.48 235.64 T
(T) 157.5 223.46 T
(cl procedure is currently being executed.) 162.91 223.46 T
5 F
(TCL_LEAVE_ERR_MSG) 328.05 223.46 T
2 F
( controls how errors) 429.99 223.46 T
(are reported. Normally) 157.5 211.27 T
(,) 248.16 211.27 T
5 F
(Tcl_SetVar) 253.16 211.27 T
2 F
( and) 313.12 211.27 T
5 F
(Tcl_SetVar2) 332.55 211.27 T
2 F
( just return) 398.52 211.27 T
5 F
(NULL) 444.32 211.27 T
2 F
( if an error) 468.31 211.27 T
(occurs. However) 157.5 199.08 T
(, if) 224.81 199.08 T
5 F
(TCL_LEAVE_ERR_MSG) 238.42 199.08 T
2 F
( has been speci\336ed then the procedures will) 340.36 199.08 T
(also store an error message in the interpreter) 157.5 186.89 T
(\325) 335.22 186.89 T
(s result. This last form is useful when the) 338 186.89 T
(procedure is invoked from a command procedure that plans to abort if the variable access) 157.5 174.71 T
(fails.) 157.5 162.52 T
-0.18 (The \337ag) 175.5 150.52 P
5 F
-0.44 (TCL_APPEND_VALUE) 210.66 150.52 P
2 F
-0.18 ( means that the new value should be appended to the) 306.61 150.52 P
(variable\325) 157.5 138.33 T
(s current value instead of replacing it. T) 192.47 138.33 T
(cl implements the append operation in a) 351.09 138.33 T
103.5 135 517.5 639 C
103.5 430.2 515.7 639 C
103.5 483.4 513.9 501.4 C
103.5 483.4 513.9 501.4 R
7 X
0 K
V
103.5 492.4 517.5 492.4 2 L
V
0.5 H
2 Z
0 X
N
103.5 430.2 515.7 639 C
1 9 Q
0 X
0 K
(T) 157.5 477.4 T
(able  32.2.) 162.67 477.4 T
2 F
(V) 205.61 477.4 T
(alues that may be OR\325ed together in the \337ags ar) 211.1 477.4 T
(guments to) 382.42 477.4 T
5 F
(Tcl_SetVar) 424.36 477.4 T
2 F
( and) 478.29 477.4 T
103.5 447.4 513.9 465.4 C
103.5 447.4 513.9 465.4 R
7 X
0 K
V
103.5 456.4 517.5 456.4 2 L
V
0.5 H
2 Z
0 X
N
103.5 430.2 515.7 639 C
5 9 Q
0 X
0 K
(Tcl_SetVar2) 157.5 468.4 T
2 F
(. Other procedures use a subset of these \337ags.) 216.82 468.4 T
2 10 Q
(Flag Name) 196.63 620.73 T
(Meaning) 350.17 620.73 T
(TCL_GLOBAL_ONL) 165.46 602.73 T
(Y) 254.4 602.73 T
(Reference global variable, regardless of) 283.94 602.73 T
(current execution context.) 283.94 592.73 T
(TCL_LEA) 165.46 578.73 T
(VE_ERR_MSG) 207.48 578.73 T
(If operation fails, leave error message in) 283.94 578.73 T
5 F
(interp->result) 283.94 568.73 T
2 F
(.) 367.89 568.73 T
(TCL_APPEND_V) 165.46 554.73 T
(ALUE) 239.13 554.73 T
(Append new value to existing value) 283.94 554.73 T
(instead of overwriting.) 283.94 544.73 T
(TCL_LIST_ELEMENT) 165.46 530.73 T
-0.51 (Convert new value to a list element before) 283.94 530.73 P
(setting or appending.) 283.94 520.73 T
159.46 631.15 159.46 515.65 2 L
V
0.5 H
0 Z
N
277.94 631.65 277.94 515.15 2 L
V
N
457.94 631.15 457.94 515.65 2 L
V
N
159.21 631.4 458.19 631.4 2 L
V
N
159.71 614.65 457.69 614.65 2 L
V
N
159.71 612.15 457.69 612.15 2 L
V
N
159.21 587.4 458.19 587.4 2 L
V
N
159.21 563.4 458.19 563.4 2 L
V
N
159.21 539.4 458.19 539.4 2 L
V
N
159.21 515.4 458.19 515.4 2 L
V
N
103.5 135 517.5 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "293" 44
%%Page: "294" 44
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(294) 94.5 668.33 T
4 F
(Accessing T) 404.27 668.33 T
(cl V) 457.59 668.33 T
(ariables) 473.51 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
2 10 Q
0 X
-0.35 (way that is relatively ef) 148.5 632.33 P
-0.35 (\336cient, even in the face of repeated appends to the same variable. If) 240.75 632.33 P
(the variable doesn\325) 148.5 620.33 T
(t yet exist then) 224.37 620.33 T
5 F
(TCL_APPEND_VALUE) 285.45 620.33 T
2 F
( has no ef) 381.39 620.33 T
(fect.) 419.79 620.33 T
(The last \337ag,) 166.5 608.33 T
5 F
(TCL_LIST_ELEMENT) 220.91 608.33 T
2 F
(, means that the new value should be converted) 316.12 608.33 T
(to a proper list element \050e.g. by enclosing in braces if necessary\051 before setting or append-) 148.5 596.33 T
-0.15 (ing. If both) 148.5 584.33 P
5 F
-0.36 (TCL_LIST_ELEMENT) 195.25 584.33 P
2 F
-0.15 ( and) 291.2 584.33 P
5 F
-0.36 (TCL_APPEND_VALUE) 310.33 584.33 P
2 F
-0.15 ( are speci\336ed then a sepa-) 406.28 584.33 P
(rator space is also added before the new element if it\325) 148.5 572.33 T
(s needed.) 361.66 572.33 T
(Here is an implementation of the) 166.5 560.33 T
5 F
(lappend) 300.3 560.33 T
2 F
( command that uses) 342.27 560.33 T
5 F
(Tcl_SetVar) 423.89 560.33 T
2 F
(:) 483.86 560.33 T
5 F
(int LappendCmd\050ClientData clientData,) 175.5 545.33 T
(Tcl_Interp *interp, int argc, char *argv[]\051 {) 221.15 534.33 T
(int i;) 198.32 523.33 T
(char *newValue;) 198.32 512.33 T
(if \050argc < 3\051 {) 198.32 501.33 T
(interp->result = "wrong # args";) 221.15 490.33 T
(return TCL_ERROR;) 221.15 479.33 T
(}) 198.32 468.33 T
(for \050i = 2; i < argc; i++\051 {) 198.32 457.33 T
(newValue = Tcl_SetVar\050interp, argv[1], argv[i],) 221.15 446.33 T
(TCL_LIST_ELEMENT|TCL_APPEND_VALUE) 266.8 435.33 T
(|TCL_LEAVE_ERR_MSG\051;) 266.8 424.33 T
(if \050newValue == NULL\051 {) 221.15 413.33 T
(return TCL_ERROR;) 243.97 402.33 T
(}) 221.15 391.33 T
(}) 198.32 380.33 T
(interp->result = newValue;) 198.32 369.33 T
(return TCL_OK;) 198.32 358.33 T
(}) 175.5 347.33 T
2 F
(It simply calls) 148.5 333.33 T
5 F
(Tcl_SetVar) 207.64 333.33 T
2 F
( once for each ar) 267.61 333.33 T
(gument and lets) 334.02 333.33 T
5 F
(Tcl_SetVar) 399.81 333.33 T
2 F
( do all the) 459.78 333.33 T
-0.24 (work of converting the ar) 148.5 321.33 P
-0.24 (gument to a list value and appending it to the variable. If an error) 248.96 321.33 P
(occurs then) 148.5 309.33 T
5 F
(Tcl_SetVar) 196.79 309.33 T
2 F
( leaves an error message in) 256.76 309.33 T
5 F
(interp->result) 367.22 309.33 T
2 F
( and) 451.17 309.33 T
5 F
(Lap-) 470.6 309.33 T
-0.51 (pendCmd) 148.5 297.33 P
2 F
-0.21 ( returns the message back to T) 190.48 297.33 P
-0.21 (cl. If the command completes successfully then it) 310.07 297.33 P
-0.17 (returns the variable\325) 148.5 285.33 P
-0.17 (s \336nal value as its result. For example, suppose the following T) 228.09 285.33 P
-0.17 (cl com-) 478.42 285.33 P
(mand is invoked:) 148.5 273.33 T
5 F
(set a 44) 175.5 258.33 T
(lappend a x {b c}) 175.5 247.33 T
235.47 232.51 175.5 232.51 2 L
V
0.4 H
N
(44 x {b c}) 175.5 233.33 T
2 F
(When) 148.5 219.33 T
5 F
(LappendCmd) 174.87 219.33 T
2 F
( is invoked) 234.83 219.33 T
5 F
(argc) 281.2 219.33 T
2 F
( will be 4.) 305.18 219.33 T
5 F
(Argv[2]) 347.66 219.33 T
2 F
( will be \322) 389.64 219.33 T
5 F
(x) 426.56 219.33 T
2 F
(\323 and) 432.55 219.33 T
5 F
(argv[3]) 456.42 219.33 T
2 F
-0.08 (will be \322) 148.5 207.33 P
5 F
-0.2 (b c) 182.75 207.33 P
2 F
-0.08 (\323 \050the braces are removed by the T) 200.54 207.33 P
-0.08 (cl parser\051.) 337.74 207.33 P
5 F
-0.2 (LappendCmd) 380.03 207.33 P
2 F
-0.08 ( makes two calls) 439.99 207.33 P
(to) 148.5 195.33 T
5 F
(Tcl_SetVar) 158.77 195.33 T
2 F
(; during the \336rst call no conversion is necessary to produce a proper list) 218.74 195.33 T
-0.18 (element, but during the second call) 148.5 183.33 P
5 F
-0.42 (Tcl_SetVar) 289.84 183.33 P
2 F
-0.18 ( adds braces back around \322) 349.81 183.33 P
5 F
-0.42 (b c) 456.33 183.33 P
2 F
-0.18 (\323 before) 473.89 183.33 P
(appending it the variable.) 148.5 171.33 T
FMENDPAGE
%%EndPage: "294" 45
%%Page: "295" 45
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(32.3 Reading variables) 103.5 668.33 T
0 F
(295) 500.83 668.33 T
103.5 660.6 517.5 660.6 2 L
0.25 H
0 Z
N
103.5 90 517.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 203.4 101.33 T
103.5 135 517.5 639 R
7 X
V
103.5 623.98 517.5 627 C
157.5 625.49 517.5 625.49 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 625.49 148.5 625.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(32.3) 123.36 631 T
(Reading variables) 157.5 631 T
2 10 Q
(The procedures) 157.5 607.31 T
5 F
(Tcl_GetVar) 221.88 607.31 T
2 F
( and) 281.85 607.31 T
5 F
(Tcl_GetVar2) 301.28 607.31 T
2 F
( may be used to retrieve variable val-) 367.24 607.31 T
(ues. For example,) 157.5 595.06 T
5 F
(char *value;) 184.5 580.06 T
(...) 184.5 568.81 T
(value = Tcl_GetVar\050interp, "a", 0\051;) 184.5 557.56 T
2 F
(will store in) 157.5 543.56 T
5 F
(value) 207.75 543.56 T
2 F
( a pointer to the current value of variable) 237.74 543.56 T
5 F
(a) 403.43 543.56 T
2 F
(. If the variable doesn\325) 409.43 543.56 T
(t) 499.45 543.56 T
(exist or some other error occurs then) 157.5 531.31 T
5 F
(NULL) 306.55 531.31 T
2 F
( is returned.) 330.54 531.31 T
5 F
(Tcl_GetVar) 380.5 531.31 T
2 F
( and) 440.46 531.31 T
5 F
(Tcl_Get-) 459.89 531.31 T
(Var2) 157.5 519.06 T
2 F
( support the) 181.49 519.06 T
5 F
(TCL_GLOBAL_ONLY) 231.18 519.06 T
2 F
( and) 321.13 519.06 T
5 F
(TCL_LEAVE_ERR_MSG) 340.56 519.06 T
2 F
( \337ags in the same) 442.5 519.06 T
(way as) 157.5 506.81 T
5 F
(Tcl_SetVar) 187.47 506.81 T
2 F
(. The following command procedure uses) 246.89 506.81 T
5 F
(Tcl_GetVar) 415.38 506.81 T
2 F
( and) 475.35 506.81 T
5 F
(Tcl_SetVar) 157.5 494.56 T
2 F
( to implement the) 217.47 494.56 T
5 F
(incr) 290.21 494.56 T
2 F
( command:) 314.19 494.56 T
5 F
(int IncrCmd\050ClientData clientData, Tcl_Interp *interp,) 184.5 479.56 T
(int argc, char *argv[]\051 {) 230.15 468.32 T
(int value, inc;) 207.32 457.07 T
(char *string;) 207.32 445.82 T
(if \050\050argc != 2\051 && \050argc != 3\051\051 {) 207.32 434.57 T
(interp->result = "wrong # args";) 230.15 423.32 T
(return TCL_ERROR;) 230.15 412.07 T
(}) 207.32 400.82 T
(if \050argc == 2\051 {) 207.32 389.57 T
(inc = 1;) 230.15 378.32 T
(} else if \050Tcl_GetInt\050interp, argv[2], &inc\051) 207.32 367.07 T
(!= TCL_OK\051 {) 252.97 355.82 T
(return TCL_ERROR;) 230.15 344.57 T
(}) 207.32 333.32 T
(string = Tcl_GetVar\050interp, argv[1],) 207.32 322.07 T
(TCL_LEAVE_ERR_MSG\051;) 252.97 310.82 T
(if \050string == NULL\051 {) 207.32 299.58 T
(return TCL_ERROR;) 230.15 288.33 T
(}) 207.32 277.08 T
(if \050Tcl_GetInt\050interp, string, &value\051 != TCL_OK\051 {) 207.32 265.83 T
(return TCL_ERROR;) 230.15 254.58 T
(}) 207.32 243.33 T
(sprintf\050interp->result, "%d", value + inc\051;) 207.32 232.08 T
(if \050Tcl_SetVar\050interp, argv[1], interp->result,) 207.32 220.83 T
(TCL_LEAVE_ERR_MSG\051 == NULL\051 {) 252.97 209.58 T
(return TCL_ERROR;) 230.15 198.33 T
(}) 207.32 187.08 T
(return TCL_OK;) 207.32 175.83 T
(}) 184.5 164.58 T
(IncrCmd) 157.5 150.58 T
2 F
( does very little work itself. It just calls library procedures and aborts if errors) 199.48 150.58 T
(occur) 157.5 138.33 T
(. The \336rst call to) 179.15 138.33 T
5 F
(Tcl_GetInt) 247.44 138.33 T
2 F
( converts the increment from text to binary) 307.41 138.33 T
(.) 478.02 138.33 T
FMENDPAGE
%%EndPage: "295" 46
%%Page: "296" 46
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(296) 94.5 668.33 T
4 F
(Accessing T) 404.27 668.33 T
(cl V) 457.59 668.33 T
(ariables) 473.51 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
5 10 Q
0 X
(Tcl_GetVar) 148.5 632.33 T
2 F
( retrieves the original value of the variable, and another call to) 208.47 632.33 T
5 F
(Tcl_Get-) 459.66 632.33 T
(Int) 148.5 620.33 T
2 F
( converts that value to binary) 166.49 620.33 T
(.) 282.15 620.33 T
5 F
(IncrCmd) 287.14 620.33 T
2 F
( then adds the increment to the variable\325) 329.12 620.33 T
(s) 489.28 620.33 T
(value and calls) 148.5 608.33 T
5 F
(sprintf) 210.4 608.33 T
2 F
( to convert the result back to text.) 252.37 608.33 T
5 F
(Tcl_SetVar) 388.67 608.33 T
2 F
( stores this) 448.64 608.33 T
(value in the variable, and) 148.5 596.33 T
5 F
(IncrCmd) 251.75 596.33 T
2 F
( then returns the new value as its result.) 293.73 596.33 T
94.5 552.98 508.5 556 C
148.5 554.49 508.5 554.49 2 L
0.5 H
2 Z
0 X
0 K
N
94.5 554.49 139.5 554.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(32.4) 114.36 560 T
(Unsetting variables) 148.5 560 T
2 10 Q
(T) 148.5 536.31 T
(o remove a variable, call) 153.91 536.31 T
5 F
(Tcl_UnsetVar) 254.93 536.31 T
2 F
( or) 326.89 536.31 T
5 F
(Tcl_UnsetVar2) 340.21 536.31 T
2 F
(. For example,) 418.17 536.31 T
5 F
(Tcl_UnsetVar2\050interp, "population", "Michigan", 0\051;) 175.5 521.31 T
2 F
(will remove the element) 148.5 507.31 T
5 F
(Michigan) 247.88 507.31 T
2 F
( from the array) 295.85 507.31 T
5 F
(population) 358.02 507.31 T
2 F
(. This statement has) 417.98 507.31 T
(the same ef) 148.5 495.31 T
(fect as the T) 193.84 495.31 T
(cl command) 242.26 495.31 T
5 F
(unset population\050Michigan\051) 175.5 480.31 T
-0.98 (Tcl_UnsetVar) 148.5 466.31 P
2 F
-0.41 ( and) 220.46 466.31 P
5 F
-0.98 (Tcl_UnsetVar2) 239.07 466.31 P
2 F
-0.41 ( return) 317.03 466.31 P
5 F
-0.98 (TCL_OK) 345.08 466.31 P
2 F
-0.41 ( if the variable was successfully) 381.05 466.31 P
(removed and) 148.5 454.31 T
5 F
(TCL_ERROR) 202.9 454.31 T
2 F
( if the variable didn\325) 256.87 454.31 T
(t exist or couldn\325) 338.3 454.31 T
(t be removed for some) 406.13 454.31 T
(other reason.) 148.5 442.31 T
5 F
(TCL_GLOBAL_ONLY) 202.62 442.31 T
2 F
( and) 292.57 442.31 T
5 F
(TCL_LEAVE_ERR_MSG) 312 442.31 T
2 F
( may be speci\336ed as) 413.94 442.31 T
(\337ags to these procedures. If an array name is given without an element name then the) 148.5 430.31 T
(entire array is removed.) 148.5 418.31 T
94.5 374.95 508.5 377.98 C
148.5 376.46 508.5 376.46 2 L
0.5 H
2 Z
0 X
0 K
N
94.5 376.46 139.5 376.46 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(32.5) 114.36 381.98 T
(Setting and unsetting variable traces) 148.5 381.98 T
2 10 Q
(V) 148.5 358.29 T
(ariable traces allow you to specify a C procedure to be invoked whenever a variable is) 154.61 358.29 T
-0.16 (read, written, or unset. T) 148.5 346.29 P
-0.16 (races can be used for many purposes. For example, in Tk you can) 246.05 346.29 P
-0.09 (con\336gure a button widget so that it displays the value of a variable and updates itself auto-) 148.5 334.29 P
-0.05 (matically when the variable is modi\336ed. This feature is implemented with variable traces.) 148.5 322.29 P
(Y) 148.5 310.29 T
(ou can also use traces for debugging, to create read-only variables, and for many other) 154.72 310.29 T
(purposes.) 148.5 298.29 T
-0.47 (The procedures) 166.5 286.29 P
5 F
-1.12 (Tcl_TraceVar) 229.95 286.29 P
2 F
-0.47 ( and) 301.91 286.29 P
5 F
-1.12 (Tcl_TraceVar2) 320.4 286.29 P
2 F
-0.47 ( create variable traces, as in) 398.36 286.29 P
(the following example:) 148.5 274.29 T
5 F
(Tcl_TraceVar\050interp, "x", TCL_TRACE_WRITES, WriteProc,) 175.5 259.29 T
(\050ClientData\051 NULL\051;) 221.15 248.29 T
2 F
(This creates a write trace on variable) 148.5 234.29 T
5 F
(x) 298.09 234.29 T
2 F
( in) 304.08 234.29 T
5 F
(interp) 316.86 234.29 T
2 F
(:) 352.84 234.29 T
5 F
(WriteProc) 358.11 234.29 T
2 F
( will be invoked when-) 412.08 234.29 T
(ever) 148.5 222.29 T
5 F
(x) 168.2 222.29 T
2 F
( is modi\336ed. The third ar) 174.2 222.29 T
(gument to) 273.4 222.29 T
5 F
(Tcl_TraceVar) 316.16 222.29 T
2 F
( is an OR\325ed combination of) 388.12 222.29 T
(\337ag bits that select the operations to trace:) 148.5 210.29 T
5 F
(TCL_TRACE_READS) 319.5 210.29 T
2 F
( for reads,) 409.45 210.29 T
5 F
(TCL_TRACE_WRITES) 148.5 198.29 T
2 F
( for writes, and) 244.45 198.29 T
5 F
(TCL_TRACE_UNSETS) 307.45 198.29 T
2 F
( for unsets. In addition,) 403.4 198.29 T
(the \337ag) 148.5 186.29 T
5 F
(TCL_GLOBAL_ONLY) 180.7 186.29 T
2 F
( may be speci\336ed to force the variable name to be inter-) 270.65 186.29 T
(preted as global.) 148.5 174.29 T
5 F
(Tcl_TraceVar) 216.78 174.29 T
2 F
( and) 288.74 174.29 T
5 F
(Tcl_TraceVar2) 308.17 174.29 T
2 F
( normally return) 386.13 174.29 T
5 F
(TCL_OK) 453.58 174.29 T
2 F
(; if) 489.56 174.29 T
(an error occurs then they leave an error message in) 148.5 162.29 T
5 F
(interp->result) 354.43 162.29 T
2 F
( and return) 438.38 162.29 T
5 F
(TCL_ERROR) 148.5 150.29 T
2 F
(.) 202.47 150.29 T
FMENDPAGE
%%EndPage: "296" 47
%%Page: "297" 47
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(32.6 T) 103.5 668.33 T
(race callbacks) 131.46 668.33 T
0 F
(297) 500.83 668.33 T
103.5 660.6 517.5 660.6 2 L
0.25 H
0 Z
N
103.5 90 517.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 203.4 101.33 T
103.5 135 517.5 639 R
7 X
V
2 10 Q
0 X
(The library procedures) 175.5 632.33 T
5 F
(Tcl_UntraceVar) 269.03 632.33 T
2 F
( and) 352.98 632.33 T
5 F
(Tcl_UntraceVar2) 372.41 632.33 T
2 F
( remove vari-) 462.36 632.33 T
(able traces. For example, the following call will remove the trace set above:) 157.5 620.09 T
5 F
(Tcl_UntraceVar\050interp, "x", TCL_TRACE_WRITES,) 184.5 605.09 T
(WriteProc, \050ClientData\051 NULL\051;) 230.15 593.85 T
(Tcl_UntraceVar) 157.5 579.85 T
2 F
( \336nds the speci\336ed variable, looks for a trace that matches the \337ags,) 241.45 579.85 T
(trace procedure, and ClientData speci\336ed by its ar) 157.5 567.61 T
(guments, and removes the trace if it) 357.16 567.61 T
(exists. If no matching trace exists then) 157.5 555.37 T
5 F
(Tcl_UntraceVar) 313.5 555.37 T
2 F
( does nothing.) 397.46 555.37 T
5 F
(Tcl_Un-) 456.32 555.37 T
(traceVar) 157.5 543.13 T
2 F
( and) 205.47 543.13 T
5 F
(Tcl_UntraceVar2) 224.9 543.13 T
2 F
( accept the same \337ag bits as) 314.85 543.13 T
5 F
(Tcl_TraceVar) 428.38 543.13 T
2 F
(.) 499.79 543.13 T
103.5 499.77 517.5 502.8 C
157.5 501.29 517.5 501.29 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 501.29 148.5 501.29 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(32.6) 123.36 506.8 T
(T) 157.5 506.8 T
(race callbacks) 164.17 506.8 T
2 10 Q
(T) 157.5 483.11 T
(race callback procedures such as) 163.26 483.11 T
5 F
(WriteProc) 296.18 483.11 T
2 F
( in the previous section must match the) 350.15 483.11 T
(following prototype:) 157.5 470.87 T
5 F
(typedef char *Tcl_VarTraceProc\050ClientData clientData,) 184.5 455.87 T
(Tcl_Interp *interp, char *name1, char *name2,) 230.15 444.63 T
(int f) 230.15 433.39 T
(lags\051;) 260.13 433.39 T
2 F
(The) 157.5 419.39 T
5 F
(clientData) 175.54 419.39 T
2 F
( and) 235.51 419.39 T
5 F
(interp) 254.94 419.39 T
2 F
( ar) 290.92 419.39 T
(guments will be the same as the corresponding ar) 301 419.39 T
(gu-) 497.9 419.39 T
-0.1 (ments passed to) 157.5 407.14 P
5 F
-0.24 (Tcl_TraceVar) 222.99 407.14 P
2 F
-0.1 ( or) 294.95 407.14 P
5 F
-0.24 (Tcl_TraceVar2) 308.07 407.14 P
2 F
-0.1 (.) 386.03 407.14 P
5 F
-0.24 (ClientData) 390.92 407.14 P
2 F
-0.1 ( typically points) 450.89 407.14 P
(to a structure containing information needed by the trace callback.) 157.5 394.9 T
5 F
(Name1) 424.79 394.9 T
2 F
( and) 454.78 394.9 T
5 F
(name2) 474.21 394.9 T
2 F
(give the name of the variable in the same form as the ar) 157.5 382.66 T
(guments to) 379.37 382.66 T
5 F
(Tcl_SetVar2) 426.01 382.66 T
2 F
(.) 491.98 382.66 T
5 F
(Flags) 157.5 370.42 T
2 F
( consists of an OR\325ed combination of bits. One of) 187.48 370.42 T
5 F
(TCL_TRACE_READS) 388.74 370.42 T
2 F
(,) 478.69 370.42 T
5 F
-0.47 (TCL_TRACE_WRITES) 157.5 358.18 P
2 F
-0.2 (, or) 253.45 358.18 P
5 F
-0.47 (TCL_TRACE_UNSETS) 268.87 358.18 P
2 F
-0.2 ( is set to indicate which operation trig-) 364.82 358.18 P
(gered the trace, and) 157.5 345.94 T
5 F
(TCL_GLOBAL_ONLY) 238.26 345.94 T
2 F
( is set if the variable is a global variable that) 328.21 345.94 T
(isn\325) 157.5 333.7 T
(t accessible from the current execution context; the trace callback must pass this \337ag) 172.31 333.7 T
(back into procedures like) 157.5 321.46 T
5 F
(Tcl_GetVar2) 260.75 321.46 T
2 F
( if it wishes to access the variable. The bits) 326.72 321.46 T
5 F
(TCL_TRACE_DESTROYED) 157.5 309.22 T
2 F
( and) 271.44 309.22 T
5 F
(TCL_INTERP_DESTROYED) 290.87 309.22 T
2 F
( are set in special circum-) 410.8 309.22 T
(stances described below) 157.5 296.98 T
(.) 253.44 296.98 T
-0.29 (For read traces, the callback is invoked just before) 175.5 284.98 P
5 F
-0.7 (Tcl_GetVar) 376.62 284.98 P
2 F
-0.29 ( or) 436.58 284.98 P
5 F
-0.7 (Tcl_GetVar2) 449.33 284.98 P
2 F
-0.19 (returns the variable\325) 157.5 272.74 P
-0.19 (s value to whomever requested it; if the callback modi\336es the value of) 237.06 272.74 P
(the variable then the modi\336ed value will be returned. For write traces the callback is) 157.5 260.5 T
-0.16 (invoked after the variable\325) 157.5 248.26 P
-0.16 (s value has been changed. The callback can modify the variable) 262.22 248.26 P
(to override the change, and this modi\336ed value will be returned as the result of) 157.5 236.02 T
5 F
(Tcl_SetVar) 157.5 223.78 T
2 F
( or) 217.47 223.78 T
5 F
(Tcl_SetVar2) 230.79 223.78 T
2 F
(. For unset traces the callback is invoked after the vari-) 296.75 223.78 T
(able has been unset, so the callback cannot access the variable. Unset callbacks can occur) 157.5 211.54 T
(when a variable is explicitly unset, when a procedure returns \050thereby deleting all of its) 157.5 199.3 T
-0.19 (local variables\051 or when an interpreter is destroyed \050thereby deleting all of the variables in) 157.5 187.05 P
(the interpreter\051.) 157.5 174.81 T
(A trace callback procedure can invoke) 175.5 162.81 T
5 F
(Tcl_GetVar2) 331.46 162.81 T
2 F
( and) 397.43 162.81 T
5 F
(Tcl_SetVar2) 416.86 162.81 T
2 F
( to read) 482.82 162.81 T
(and write the value of the traced variable. All traces on the variable are temporarily dis-) 157.5 150.57 T
(abled while the callback executes so calls to) 157.5 138.33 T
5 F
(Tcl_GetVar2) 336.25 138.33 T
2 F
( and) 402.21 138.33 T
5 F
(Tcl_SetVar2) 421.64 138.33 T
2 F
( will) 487.61 138.33 T
FMENDPAGE
%%EndPage: "297" 48
%%Page: "298" 48
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(298) 94.5 668.33 T
4 F
(Accessing T) 404.27 668.33 T
(cl V) 457.59 668.33 T
(ariables) 473.51 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
2 10 Q
0 X
(not trigger additional trace callbacks. As mentioned above, unset traces aren\325) 148.5 632.33 T
(t invoked) 456.41 632.33 T
(until after the variable has been deleted, so attempts to read the variable during unset call-) 148.5 620.3 T
(backs will fail. However) 148.5 608.28 T
(, it is possible for an unset callback procedure to write the vari-) 246.36 608.28 T
(able, in which case a new variable will be created.) 148.5 596.25 T
-0.27 (The code below sets a write trace that prints out the new value of variable) 166.5 584.25 P
5 F
-0.64 (x) 459.73 584.25 P
2 F
-0.27 ( each time) 465.73 584.25 P
(it is modi\336ed:) 148.5 572.22 T
5 F
(Tcl_TraceVar\050interp, "x", TCL_TRACE_WRITES, Print,) 175.5 557.22 T
(\050ClientData\051 NULL\051;) 221.15 546.19 T
(...) 175.5 535.16 T
(char *Print\050ClientData clientData,) 175.5 524.13 T
(Tcl_Interp *interp, char *name1, char *name2,) 221.15 513.1 T
(int f) 221.15 502.08 T
(lags\051 {) 251.13 502.08 T
(char *value;) 198.32 491.05 T
(value = Tcl_GetVar2\050interp, name1, name2,) 198.32 480.02 T
(f) 243.97 468.99 T
(lags & TCL_GLOBAL_ONLY\051;) 249.97 468.99 T
(if \050value != NULL\051 {) 198.32 457.96 T
(printf\050"new value is %s\134n", value\051;) 221.15 446.93 T
(}) 198.32 435.9 T
(return NULL;) 198.32 424.88 T
(}) 175.5 413.85 T
(PrintProc) 148.5 399.85 T
2 F
( must pass the) 202.47 399.85 T
5 F
(TCL_GLOBAL_ONLY) 261.33 399.85 T
2 F
( bit of its) 351.28 399.85 T
5 F
(f) 389.6 399.85 T
(lags) 395.59 399.85 T
2 F
( ar) 419.58 399.85 T
(gument on to) 429.67 399.85 T
5 F
(Tcl_GetVar2) 148.5 387.82 T
2 F
( in order to make sure that the variable can be accessed properly) 214.46 387.82 T
(.) 470.26 387.82 T
5 F
(Tcl_GetVar2) 148.5 375.79 T
2 F
( should never return an error) 214.46 375.79 T
(, but) 328.13 375.79 T
5 F
(PrintProc) 348.4 375.79 T
2 F
( checks for one anyway) 402.37 375.79 T
(and doesn\325) 148.5 363.76 T
(t try to print the variable\325) 191.9 363.76 T
(s value if an error occurs.) 292.11 363.76 T
(T) 166.5 351.76 T
(race callbacks normally return) 172.26 351.76 T
5 F
(NULL) 296.04 351.76 T
2 F
( values; a non-) 320.03 351.76 T
5 F
(NULL) 378.59 351.76 T
2 F
( value signals an error) 402.58 351.76 T
(. In) 490.29 351.76 T
(this case the return value must be a pointer to a static string containing an error message.) 148.5 339.73 T
(The traced access will abort and the error message will be returned to whomever initiated) 148.5 327.7 T
(that access. For example, if the access was invoked by a) 148.5 315.68 T
5 F
(set) 375.27 315.68 T
2 F
( command or) 393.26 315.68 T
5 F
($) 448.49 315.68 T
2 F
(-substitution) 454.49 315.68 T
(then a T) 148.5 303.65 T
(cl error will result; if the access was invoked via) 180.55 303.65 T
5 F
(Tcl_GetVar) 376.52 303.65 T
2 F
(,) 436.08 303.65 T
5 F
(Tcl_GetVar) 441.08 303.65 T
2 F
(will return) 148.5 291.62 T
5 F
(NULL) 192.92 291.62 T
2 F
( and also leave the error message in) 216.9 291.62 T
5 F
(interp->result) 361.78 291.62 T
2 F
( if the) 445.74 291.62 T
5 F
(TCL_LEAVE_ERR_MSG) 148.5 279.59 T
2 F
( \337ag was speci\336ed.) 250.44 279.59 T
(The code below uses a trace to make variable) 166.5 267.59 T
5 F
(x) 350.51 267.59 T
2 F
( read-only with value) 356.51 267.59 T
5 F
(192) 444.22 267.59 T
2 F
(:) 462.21 267.59 T
5 F
(Tcl_TraceVar\050interp, "x", TCL_TRACE_WRITES, Reject,) 175.5 252.59 T
(\050ClientData\051 "192"\051;) 221.15 241.56 T
(char *Reject\050ClientData clientData, Tcl_Interp *interp,) 175.5 230.53 T
(char *name1, char *name2, int f) 221.15 219.51 T
(lags\051 {) 407.05 219.51 T
(char *correct = \050char *\051 ClientData;) 198.32 208.48 T
(Tcl_SetVar2\050interp, name1, name2, correct,) 198.32 197.45 T
(f) 266.8 186.42 T
(lags & TCL_GLOBAL_ONLY\051;) 272.79 186.42 T
(return "variable is read-only";) 198.32 175.39 T
(};) 175.5 164.36 T
(Reject) 148.5 150.36 T
2 F
( is a trace callback that\325) 184.48 150.36 T
(s invoked whenever) 278.57 150.36 T
5 F
(x) 361 150.36 T
2 F
( is written. It returns an error mes-) 367 150.36 T
(sage to abort the write access. Since) 148.5 138.33 T
5 F
(x) 295.05 138.33 T
2 F
( has already been modi\336ed before) 301.05 138.33 T
5 F
(Reject) 438.71 138.33 T
2 F
( is) 474.69 138.33 T
FMENDPAGE
%%EndPage: "298" 49
%%Page: "299" 49
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(32.7 Whole-array traces) 103.5 668.33 T
0 F
(299) 500.83 668.33 T
103.5 660.6 517.5 660.6 2 L
0.25 H
0 Z
N
103.5 90 517.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 203.4 101.33 T
103.5 135 517.5 639 R
7 X
V
2 10 Q
0 X
(invoked,) 157.5 632.33 T
5 F
(Reject) 194.7 632.33 T
2 F
( must undo the write by restoring the variable\325) 230.68 632.33 T
(s correct value. The cor-) 415.56 632.33 T
(rect value is passed to the trace callback using its) 157.5 620.33 T
5 F
(clientData) 356.24 620.33 T
2 F
( ar) 416.21 620.33 T
(gument. This imple-) 426.29 620.33 T
(mentation allows the same procedure to be used as the write callback for many dif) 157.5 608.33 T
(ferent) 485.96 608.33 T
(read-only variables; a dif) 157.5 596.33 T
(ferent correct value can be passed to) 257.52 596.33 T
5 F
(Reject) 405.43 596.33 T
2 F
( for each variable.) 441.41 596.33 T
103.5 552.98 517.5 556 C
157.5 554.49 517.5 554.49 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 554.49 148.5 554.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(32.7) 123.36 560 T
(Whole-array traces) 157.5 560 T
2 10 Q
-0.22 (Y) 157.5 536.31 P
-0.22 (ou can create a trace on an entire array by specifying an array name to) 163.72 536.31 P
5 F
-0.52 (Tcl_TraceVar) 443.26 536.31 P
2 F
-0.2 (or) 157.5 524.31 P
5 F
-0.49 (Tcl_TraceVar2) 168.12 524.31 P
2 F
-0.2 ( without an element name. This creates a whole-array trace: the call-) 246.08 524.31 P
(back procedure will be invoked whenever any of the speci\336ed operations is invoked on) 157.5 512.31 T
(any element of the array) 157.5 500.31 T
(. If the entire array is unset then the callback will be invoked just) 253.99 500.31 T
(once, with) 157.5 488.31 T
5 F
(name1) 201.64 488.31 T
2 F
( containing the array name and) 231.62 488.31 T
5 F
(name2) 357.63 488.31 T
(NULL) 390.11 488.31 T
2 F
(.) 414.1 488.31 T
103.5 444.95 517.5 447.98 C
157.5 446.46 517.5 446.46 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 446.46 148.5 446.46 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(32.8) 123.36 451.98 T
(Multiple traces) 157.5 451.98 T
2 10 Q
(Multiple traces can exist for the same variable. When this happens, each of the relevant) 157.5 428.29 T
(callbacks is invoked on each variable access. The callbacks are invoked in order from) 157.5 416.29 T
(most-recently-created to oldest. If there are both whole-array traces and individual ele-) 157.5 404.29 T
(ment traces, then the whole-array callbacks are invoked before element callbacks. If an) 157.5 392.29 T
(error is returned by one of the callbacks then no subsequent callbacks are invoked.) 157.5 380.29 T
103.5 336.93 517.5 339.95 C
157.5 338.44 517.5 338.44 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 338.44 148.5 338.44 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(32.9) 123.36 343.95 T
(Unset callbacks) 157.5 343.95 T
2 10 Q
(Unset callbacks are dif) 157.5 320.26 T
(ferent from read and write callbacks in several ways. First of all,) 248.63 320.26 T
(unset callbacks cannot return an error condition; they must always succeed. Second, two) 157.5 308.26 T
(extra \337ags are de\336ned for unset callbacks:) 157.5 296.26 T
5 F
(TCL_TRACE_DELETED) 328.2 296.26 T
2 F
( and) 430.14 296.26 T
5 F
(TCL_INTERP_DESTROYED) 157.5 284.26 T
2 F
(. When a variable is unset all of its traces are deleted; unset) 277.43 284.26 T
(traces on the variable will still be invoked, but they will be passed the) 157.5 272.26 T
5 F
(TCL_TRACE_DE-) 438.7 272.26 T
-0.89 (LETED) 157.5 260.26 P
2 F
-0.37 ( \337ag to indicate that the trace has now been deleted and won\325) 187.48 260.26 P
-0.37 (t be invoked anymore.) 427.11 260.26 P
(If an array element is unset and there is a whole-array unset trace for the element\325) 157.5 248.26 T
(s array) 483.61 248.26 T
(,) 509.88 248.26 T
(then the unset trace is not deleted and the callback will be invoked without the) 157.5 236.26 T
5 F
(TCL_TRACE_DELETED) 157.5 224.26 T
2 F
( \337ag set.) 259.44 224.26 T
(If the) 175.5 212.26 T
5 F
(TCL_INTERP_DESTROYED) 199.37 212.26 T
2 F
( \337ag is set during an unset callback it means that) 319.3 212.26 T
-0.39 (the interpreter containing the variable has been destroyed. In this case the callback must be) 157.5 200.26 P
(careful not to use the interpreter at all, since the interpreter) 157.5 188.26 T
(\325) 392.4 188.26 T
(s state is in the process of) 395.18 188.26 T
(being deleted. All that the callback should do is to clean up its own internal data struc-) 157.5 176.26 T
(tures.) 157.5 164.26 T
FMENDPAGE
%%EndPage: "299" 50
%%Page: "300" 50
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(300) 94.5 668.33 T
4 F
(Accessing T) 404.27 668.33 T
(cl V) 457.59 668.33 T
(ariables) 473.51 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
94.5 623.98 508.5 627 C
148.5 625.49 508.5 625.49 2 L
0.5 H
2 Z
0 X
0 K
N
94.5 625.49 139.5 625.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(32.10) 107.69 631 T
(Non-existent variables) 148.5 631 T
2 10 Q
(It is legal to set a trace on a variable that does not yet exist. The variable will continue to) 148.5 607.31 T
(appear not to exist \050e.g. attempts to read it will fail\051, but the trace\325) 148.5 595.31 T
(s callback will be) 411.1 595.31 T
(invoked during operations on the variable. For example, you can set a read trace on an) 148.5 583.31 T
(unde\336ned variable and then, on the \336rst access to the variable, assign it a default value.) 148.5 571.31 T
94.5 527.95 508.5 530.98 C
148.5 529.46 508.5 529.46 2 L
0.5 H
2 Z
0 X
0 K
N
94.5 529.46 139.5 529.46 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(32.1) 108.35 534.98 T
(1) 131.03 534.98 T
(Querying trace information) 148.5 534.98 T
2 10 Q
-0.17 (The procedures) 148.5 511.29 P
5 F
-0.4 (Tcl_VarTraceInfo) 212.55 511.29 P
2 F
-0.17 ( and) 308.5 511.29 P
5 F
-0.4 (Tcl_VarTraceInfo2) 327.6 511.29 P
2 F
-0.17 ( can be used to \336nd) 429.55 511.29 P
(out if a particular kind of trace has been set on a variable and if so to retrieve its Client-) 148.5 499.29 T
(Data value. For example, consider the following code:) 148.5 487.29 T
5 F
(ClientData clientData;) 175.5 472.29 T
(...) 175.5 461.29 T
(clientData = Tcl_VarTraceInfo\050interp, "x", 0, Reject,) 175.5 450.29 T
(\050ClientData\051 NULL\051;) 221.15 439.29 T
(Tcl_VarTraceInfo) 148.5 425.29 T
2 F
( will see if there is a trace on variable) 244.45 425.29 T
5 F
(x) 396.54 425.29 T
2 F
( that has) 402.54 425.29 T
5 F
(Reject) 438.35 425.29 T
2 F
( as its) 474.33 425.29 T
(trace callback. If so, it will return the ClientData value associated with the \336rst \050most) 148.5 413.29 T
(recently created\051 such trace; if not it will return) 148.5 401.29 T
5 F
(NULL) 339.73 401.29 T
2 F
(. Given the code in Section 32.6) 363.72 401.29 T
-0.22 (above, this call will tell whether) 148.5 389.29 P
5 F
-0.54 (x) 277.9 389.29 P
2 F
-0.22 ( is read-only; if so, it will return the variable\325) 283.9 389.29 P
-0.22 (s read-only) 461.76 389.29 P
(value. If there are multiple traces on a variable with the same callback, you can step) 148.5 377.29 T
(through them all in order by making multiple calls to) 148.5 365.29 T
5 F
(Tcl_VarTraceInfo) 362.82 365.29 T
2 F
(, as in the) 458.77 365.29 T
(following code:) 148.5 353.29 T
5 F
(ClientData clientData;) 175.5 338.29 T
(...) 175.5 327.29 T
(clientData = NULL;) 175.5 316.29 T
(while \0501\051 {) 175.5 305.29 T
(clientData = Tcl_VarTraceInfo\050interp, "x", 0,) 198.32 294.29 T
(Reject, clientData\051;) 243.97 283.29 T
(if \050clientData == NULL\051 {) 198.32 272.29 T
(break;) 221.15 261.29 T
(}) 198.32 250.29 T
3 F
(... pr) 198.32 239.29 T
(ocess trace ...) 216.83 239.29 T
5 F
(}) 175.5 228.29 T
2 F
(In each call to) 148.5 214.29 T
5 F
(Tcl_VarTraceInfo) 207.34 214.29 T
2 F
( after the \336rst, the previous ClientData value is) 303.29 214.29 T
-0.32 (passed in as the last ar) 148.5 202.29 P
-0.32 (gument.) 235.82 202.29 P
5 F
-0.77 (Tcl_VarTraceInfo) 270.48 202.29 P
2 F
-0.32 ( \336nds the trace with this value, then) 366.43 202.29 P
(returns the ClientData for the next trace. When it reaches the last trace it returns) 148.5 190.29 T
5 F
(NULL) 470.46 190.29 T
2 F
(.) 494.45 190.29 T
FMENDPAGE
%%EndPage: "300" 51
%%Page: "301" 51
612 792 0 FMBEGINPAGE
103.5 675 517.5 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
103.5 450 517.5 450 2 L
7 X
V
2 Z
0 X
N
103.5 108 517.5 126 R
7 X
V
0 10 Q
0 X
(301) 500.83 119.33 T
103.5 54 517.5 108 R
7 X
V
2 9 Q
0 X
(Copyright \251 1993 Addison-W) 157.5 102 T
(esley Publishing Company) 266.71 102 T
(, Inc.) 362.5 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 157.5 91 T
(. Any) 491.17 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 157.5 80 T
-0.34 (lisher) 157.5 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 176.98 69 P
(does not of) 157.5 58 T
(fer warranties in regard to this draft.) 197.28 58 T
1 24 Q
(Chapter 33) 157.5 605 T
-0.48 (Hash T) 157.5 575 S
-0.48 (ables) 227.74 575 S
103.5 135 517.5 423 R
7 X
V
2 10 Q
0 X
(A) 157.5 416.33 T
3 F
(hash table) 167.21 416.33 T
2 F
( is a collection of) 208.58 416.33 T
3 F
(entries) 279.92 416.33 T
2 F
(, where each entry consists of a) 307.13 416.33 T
3 F
(key) 434.8 416.33 T
2 F
( and a) 448.11 416.33 T
3 F
(value) 474.48 416.33 T
2 F
(. No) 496.12 416.33 T
(two entries have the same key) 157.5 404.28 T
(. Given a key) 277.03 404.28 T
(, a hash table can very quickly locate its entry) 329.67 404.28 T
(and hence the associated value. T) 157.5 392.23 T
(cl contains a general-purpose hash table package that it) 290.58 392.23 T
(uses in several places internally) 157.5 380.18 T
(. For example, all of the commands in an interpreter are) 283.42 380.18 T
(stored in a hash table where the key for each entry is a command name and the value is a) 157.5 368.13 T
-0.39 (pointer to information about the command. All of the global variables are stored in another) 157.5 356.08 P
-0.12 (hash table where the key for each entry is the name of a variable and the value is a pointer) 157.5 344.03 P
(to information about the variable.) 157.5 331.98 T
(T) 175.5 319.98 T
(cl exports its hash table facilities through a set of library procedures so that applica-) 180.91 319.98 T
(tions can use them too \050see T) 157.5 307.93 T
(able 33.1 for a summary\051. The most common use for hash) 273.39 307.93 T
(tables is to associate names with objects. In order for an application to implement a new) 157.5 295.88 T
(kind of object it must give the objects textual names for use in T) 157.5 283.83 T
(cl commands. When a) 414.14 283.83 T
(command procedure receives an object name as an ar) 157.5 271.78 T
(gument it must locate the C data) 370.46 271.78 T
(structure for the object. T) 157.5 259.73 T
(ypically there will be one hash table for each type of object,) 258.66 259.73 T
(where the key for an entry is an object name and the value is a pointer to the C data struc-) 157.5 247.68 T
-0.31 (ture that represents the object. When a command procedure needs to \336nd an object it looks) 157.5 235.63 P
-0.37 (up its name in the hash table. If there is no entry for the name then the command procedure) 157.5 223.58 P
(returns an error) 157.5 211.53 T
(.) 218.56 211.53 T
(For the examples in this chapter I\325ll use a hypothetical application that implements) 175.5 199.53 T
(objects called \322gizmos\323. Each gizmo is represented internally with a structure declared) 157.5 187.48 T
(like this:) 157.5 175.43 T
5 F
(typedef struct Gizmo {) 184.5 160.43 T
3 F
(... \336elds of gizmo object ...) 207.32 149.38 T
5 F
(} Gizmo;) 184.5 138.33 T
49.5 351 103.5 423 C
40.5 360 202.5 414 R
7 X
0 K
V
1 9 Q
0 X
(FIGURE  33) 40.5 408 T
(T) 40.5 387 T
(ABLE  33) 45.83 387 T
31.5 351 130.5 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "301" 52
%%Page: "302" 52
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(302) 94.5 668.33 T
4 F
(Hash T) 453.51 668.33 T
(ables) 484.61 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
2 10 Q
0 X
(The application uses names like \322) 148.5 203.93 T
5 F
(gizmo42) 283.13 203.93 T
2 F
(\323 to refer to gizmos in T) 325.1 203.93 T
(cl commands, where) 421 203.93 T
(each gizmo has a dif) 148.5 191.93 T
(ferent number at the end of its name. The application follows the) 230.48 191.93 T
(action-oriented approach described in Section 27.3 by providing a collection of T) 148.5 179.93 T
(cl com-) 473.12 179.93 T
(mands to manipulate the objects, such as) 148.5 167.93 T
5 F
(gcreate) 313.95 167.93 T
2 F
( to create a new gizmo,) 355.93 167.93 T
5 F
(gdelete) 451.12 167.93 T
2 F
( to) 493.1 167.93 T
(delete an existing gizmo,) 148.5 155.93 T
5 F
(gsearch) 250.93 155.93 T
2 F
( to \336nd gizmos with certain characteristics, and so on.) 292.91 155.93 T
94.5 135 508.5 639 C
94.5 210.6 508.5 639 C
5 9 Q
0 X
0 K
(Tcl_InitHashTable\050Tcl_HashTable *tablePtr, int keyType\051) 127.5 615.8 T
2 F
(Creates a new hash table and stores information about the table at) 199.5 606.8 T
5 F
(*tablePtr) 199.5 597.8 T
2 F
(.) 247.54 597.8 T
5 F
(KeyType) 252.03 597.8 T
2 F
( is either) 289.78 597.8 T
5 F
(TCL_STRING_KEYS) 322.98 597.8 T
2 F
(,) 403.86 597.8 T
5 F
(TCL_ONE_WORD_KEYS) 199.5 588.8 T
2 F
(, or an integer greater than 1.) 291.17 588.8 T
5 F
(Tcl_DeleteHashTable\050Tcl_HashTable *tablePtr\051) 127.5 579.8 T
2 F
(Deletes all the entries in the hash table and frees up related storage.) 199.5 570.8 T
5 F
(Tcl_HashEntry *Tcl_CreateHashEntry\050Tcl_HashTable *tablePtr,) 127.5 551.8 T
(char *key,) 199.5 542.8 T
(int *newPtr\051) 149.07 533.8 T
2 F
(Returns a pointer to the entry in) 199.5 524.8 T
5 F
(tablePtr) 316.08 524.8 T
2 F
( whose key is) 359.21 524.8 T
5 F
(key) 410.14 524.8 T
2 F
(, creating a) 425.73 524.8 T
(new entry if needed.) 199.5 515.8 T
5 F
(*NewPtr) 275.12 515.8 T
2 F
( is set to 1 if a new entry was created or 0 if) 312.87 515.8 T
(the entry already existed.) 199.5 506.8 T
5 F
(Tcl_HashEntry *Tcl_FindHashEntry\050Tcl_HashTable *tablePtr, char) 127.5 497.8 T
(*key\051) 199.5 488.8 T
2 F
(Returns a pointer to the entry in) 199.5 479.8 T
5 F
(tablePtr) 316.08 479.8 T
2 F
( whose key is) 359.21 479.8 T
5 F
(key) 410.14 479.8 T
2 F
(, or) 425.73 479.8 T
5 F
(NULL) 439.96 479.8 T
2 F
( if) 461.53 479.8 T
(no such entry exists.) 199.5 470.8 T
5 F
(Tcl_DeleteHashEntry\050Tcl_HashEntry *entryPtr\051) 127.5 461.8 T
2 F
(Deletes an entry from its hash table.) 199.5 452.8 T
5 F
(ClientData Tcl_GetHashValue\050Tcl_HashEntry *entryPtr\051) 127.5 433.8 T
2 F
(Returns the value associated with a hash table entry) 199.5 424.8 T
(.) 384.62 424.8 T
5 F
(Tcl_SetHashValue\050Tcl_HashEntry *entryPtr, ClientData value\051) 127.5 415.8 T
2 F
(Sets the value associated with a hash table entry) 199.5 406.8 T
(.) 371.64 406.8 T
5 F
(char *Tcl_GetHashKey\050Tcl_HashEntry *entryPtr\051) 127.5 397.8 T
2 F
(Returns the key associated with a hash table entry) 199.5 388.8 T
(.) 378.13 388.8 T
5 F
(Tcl_HashEntry *Tcl_FirstHashEntry\050Tcl_HashTable *tablePtr,) 127.5 369.8 T
(Tcl_HashSearch *searchPtr\051) 149.07 360.8 T
2 F
(Starts a search through all the elements of a hash table. Stores information) 199.5 351.8 T
(about the search at) 199.5 342.8 T
5 F
(*searchPtr) 268.88 342.8 T
2 F
( and returns the hash table\325) 322.81 342.8 T
(s \336rst entry or) 419.4 342.8 T
5 F
(NULL) 199.5 333.8 T
2 F
( if it has no entries.) 221.07 333.8 T
5 F
(Tcl_HashEntry *Tcl_NextHashEntry\050Tcl_HashSearch *searchPtr\051) 127.5 324.8 T
2 F
-0.31 (Returns the next entry in the search identi\336ed by) 199.5 315.8 P
5 F
-0.73 (searchPtr) 373.73 315.8 P
2 F
-0.31 ( or) 422.26 315.8 P
5 F
-0.73 (NULL) 433.63 315.8 P
2 F
-0.31 ( if all) 455.2 315.8 P
(entries in the table have been returned.) 199.5 306.8 T
5 F
(char *Tcl_HashStats\050Tcl_HashTable *tablePtr\051) 127.5 287.8 T
2 F
(Returns a string giving usage statistics for) 199.5 278.8 T
5 F
(tablePtr) 352.53 278.8 T
2 F
(. The string is dynam-) 395.17 278.8 T
(ically allocated and must be freed by the caller) 199.5 269.8 T
(.) 366.73 269.8 T
121.5 627.55 121.5 263.05 2 L
V
0.5 H
0 Z
N
481.5 627.55 481.5 263.05 2 L
V
N
121.25 627.8 481.75 627.8 2 L
V
N
121.25 563.8 481.75 563.8 2 L
V
N
121.25 445.8 481.75 445.8 2 L
V
N
121.25 381.8 481.75 381.8 2 L
V
N
121.25 299.8 481.75 299.8 2 L
V
N
121.25 262.8 481.75 262.8 2 L
V
N
94.5 135 508.5 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "302" 53
%%Page: "303" 53
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(33.1 Keys and values) 103.5 668.33 T
0 F
(303) 500.83 668.33 T
103.5 660.6 517.5 660.6 2 L
0.25 H
0 Z
N
103.5 90 517.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 203.4 101.33 T
103.5 135 517.5 639 R
7 X
V
103.5 623.98 517.5 627 C
157.5 625.49 517.5 625.49 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 625.49 148.5 625.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(33.1) 123.36 631 T
(Keys and values) 157.5 631 T
2 10 Q
(T) 157.5 607.31 T
(cl hash tables support three dif) 162.91 607.31 T
(ferent kinds of keys. All of the entries in a single hash) 285.14 607.31 T
-0.24 (table must use the same kind of key) 157.5 595.31 P
-0.24 (, but dif) 298.16 595.31 P
-0.24 (ferent tables may use dif) 328.88 595.31 P
-0.24 (ferent kinds. The most) 426.01 595.31 P
(common form of key is a string. In this case each key is a) 157.5 583.31 T
5 F
(NULL) 389.83 583.31 T
2 F
(-terminated string of arbi-) 413.82 583.31 T
(trary length, such as \322) 157.5 571.31 T
5 F
(gizmo18) 244.93 571.31 T
2 F
(\323 or \322) 286.91 571.31 T
5 F
(Waste not want not) 309.11 571.31 T
2 F
(\323. Dif) 417.05 571.31 T
(ferent entries in a) 439.62 571.31 T
(table may have keys of dif) 157.5 559.31 T
(ferent length. The gizmo implementation uses strings as keys.) 263.07 559.31 T
(The second form of key is a one-word value. In this case each key may be any value) 175.5 547.31 T
(that \336ts in a single word, such as an integer) 157.5 535.31 T
(. One-word keys are passed into T) 329.61 535.31 T
(cl using val-) 465.75 535.31 T
(ues of type \322) 157.5 523.31 T
5 F
(char *) 208.29 523.31 T
2 F
(\323 so the keys are limited to the size of a character pointer) 244.27 523.31 T
(.) 471.32 523.31 T
(The last form of key is an array) 175.5 511.31 T
(. In this case each key is an array of integers \050C) 300.58 511.31 T
5 F
(int) 492.37 511.31 T
2 F
(type\051. All keys in the table must be the same size.) 157.5 499.31 T
(The values for hash table entries are items of type) 175.5 487.31 T
5 F
(ClientData) 377.01 487.31 T
2 F
(, which are lar) 436.98 487.31 T
(ge) 493.96 487.31 T
(enough to hold either an integer or a pointer) 157.5 475.31 T
(. In most applications, such as the gizmo) 332.93 475.31 T
-0.04 (example, hash table values are pointers to records for objects. These pointers are cast into) 157.5 463.31 P
5 F
-0.14 (ClientData) 157.5 451.31 P
2 F
-0.06 ( items when storing them in hash table entries, and they are cast back from) 217.47 451.31 P
5 F
(ClientData) 157.5 439.31 T
2 F
( to object pointers when retrieved from the hash table.) 217.47 439.31 T
103.5 395.95 517.5 398.98 C
157.5 397.46 517.5 397.46 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 397.46 148.5 397.46 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(33.2) 123.36 402.98 T
(Creating and deleting hash tables) 157.5 402.98 T
2 10 Q
(Each hash table is represented by a C structure of type) 157.5 379.29 T
5 F
(Tcl_HashTable) 377.05 379.29 T
2 F
(. Space for this) 455.01 379.29 T
(structure is allocated by the client, not by T) 157.5 367.29 T
(cl; typically these structures are global vari-) 330.3 367.29 T
(ables or elements of other structures. When calling hash table procedures you pass in a) 157.5 355.29 T
(pointer to a) 157.5 343.29 T
5 F
(Tcl_HashTable) 205.52 343.29 T
2 F
( structure as a token for the hash table. Y) 283.48 343.29 T
(ou should never) 446.24 343.29 T
-0.02 (use or modify any of the \336elds of a) 157.5 331.29 P
5 F
-0.05 (Tcl_HashTable) 299.73 331.29 P
2 F
-0.02 ( directly) 377.69 331.29 P
-0.02 (. Use the T) 410.05 331.29 P
-0.02 (cl library proce-) 453.15 331.29 P
(dures and macros for this.) 157.5 319.29 T
(Here is how a hash table might be created for the gizmo application:) 175.5 307.29 T
5 F
(Tcl_HashTable gizmoTable;) 184.5 292.29 T
(...) 184.5 281.29 T
(Tcl_InitHashTable\050&gizmoTable, TCL_STRING_KEYS\051;) 184.5 270.29 T
2 F
(The \336rst ar) 157.5 256.29 T
(gument to) 201.18 256.29 T
5 F
(Tcl_InitHashTable) 243.93 256.29 T
2 F
( is a) 345.88 256.29 T
5 F
(Tcl_HashTable) 364.48 256.29 T
2 F
( pointer and the) 442.43 256.29 T
-0.08 (second ar) 157.5 244.29 P
-0.08 (gument is an integer that speci\336es the sort of keys that will be used for the table.) 195.26 244.29 P
5 F
(TCL_STRING_KEYS) 157.5 232.29 T
2 F
( means that strings will be used in the table;) 247.45 232.29 T
5 F
(TCL_ONE_WORD_VALUES) 157.5 220.29 T
2 F
( speci\336es one-word keys; and an integer value greater than) 271.44 220.29 T
(one means that keys are arrays with the given number of int\325) 157.5 208.29 T
(s in each array) 399.27 208.29 T
(.) 456.62 208.29 T
5 F
(Tcl_InitHashTable) 157.5 196.29 T
2 F
( ignores the current contents of the table it is passed and re-ini-) 259.44 196.29 T
(tializes the structure to refer to an empty hash table with keys as speci\336ed.) 157.5 184.29 T
5 F
(Tcl_DeleteHashTable) 175.5 172.29 T
2 F
( removes all the entries from a hash table and frees up) 289.44 172.29 T
(any memory that was allocated for the table \050except space for the) 157.5 160.29 T
5 F
(Tcl_HashTable) 420.61 160.29 T
FMENDPAGE
%%EndPage: "303" 54
%%Page: "304" 54
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(304) 94.5 668.33 T
4 F
(Hash T) 453.51 668.33 T
(ables) 484.61 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
2 10 Q
0 X
(structure itself, which is the property of the client\051. For example, the following statement) 148.5 632.33 T
(could be used to delete the hash table initialized above:) 148.5 620.33 T
5 F
(Tcl_DeleteHashTable\050&gizmoTable\051;) 175.5 605.33 T
94.5 562.98 508.5 566 C
148.5 564.49 508.5 564.49 2 L
0.5 H
2 Z
0 X
0 K
N
94.5 564.49 139.5 564.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(33.3) 114.36 570 T
(Creating entries) 148.5 570 T
2 10 Q
(The procedure) 148.5 546.31 T
5 F
(Tcl_CreateHashEntry) 209 546.31 T
2 F
( creates an entry with a given key and) 322.93 546.31 T
5 F
(Tcl_SetHashValue) 148.5 534.31 T
2 F
( sets the value associated with the entry) 244.45 534.31 T
(. For example, the code) 401.74 534.31 T
(below might be used to implement the) 148.5 522.31 T
5 F
(gcreate) 304.24 522.31 T
2 F
( command, which makes a new gizmo) 346.22 522.31 T
(object:) 148.5 510.31 T
5 F
(int GcreateCmd\050ClientData clientData,) 175.5 495.31 T
(Tcl_Interp *interp, int argc, char *argv[]\051 {) 221.15 484.31 T
(static int id = 1;) 198.32 473.31 T
(int new;) 198.32 462.31 T
(Tcl_HashEntry *entryPtr;) 198.32 451.31 T
(Gizmo *gizmoPtr;) 198.32 440.31 T
3 F
(... check ar) 198.32 429.31 T
(gc, etc ...) 242.08 429.31 T
5 F
(do {) 198.32 418.31 T
(sprintf\050interp->result, "gizmo%d", id\051;) 221.15 407.31 T
(id++;) 221.15 396.31 T
(entryPtr = Tcl_CreateHashEntry\050&gizmoTable,) 221.15 385.31 T
(interp->result, &new\051;) 266.8 374.31 T
(} while \050!new\051;) 198.32 363.31 T
(gizmoPtr = \050Gizmo *\051 malloc\050sizeof\050Gizmo\051\051;) 198.32 352.31 T
(Tcl_SetHashValue\050entryPtr, gizmoPtr\051;) 198.32 341.31 T
3 F
(... initialize *gizmoPtr) 198.32 330.31 T
(, etc ...) 286.35 330.31 T
5 F
(return TCL_OK;) 198.32 319.31 T
(}) 175.5 308.31 T
2 F
(This code creates a name for the object by concatenating \322) 148.5 294.31 T
5 F
(gizmo) 382.19 294.31 T
2 F
(\323 with the value of the) 412.17 294.31 T
-0.15 (static variable) 148.5 282.31 P
5 F
-0.37 (id) 206.48 282.31 P
2 F
-0.15 (. It stores the name in) 218.47 282.31 P
5 F
-0.37 (interp->result) 306.1 282.31 P
2 F
-0.15 ( so that the command\325) 390.05 282.31 P
-0.15 (s result) 477.72 282.31 P
(will be the name of the new object.) 148.5 270.31 T
5 F
(GcreateCmd) 291.45 270.31 T
2 F
( then increments) 351.42 270.31 T
5 F
(id) 419.98 270.31 T
2 F
( so that each new) 431.97 270.31 T
(object will have a unique name.) 148.5 258.31 T
5 F
(Tcl_CreateHashEntry) 278.13 258.31 T
2 F
( is called to create a new) 392.07 258.31 T
(entry with a key equal to the object\325) 148.5 246.31 T
(s name; it returns a token for the entry) 292.01 246.31 T
(. Under normal) 444.03 246.31 T
(conditions there will not already exist an entry with the given key) 148.5 234.31 T
(, in which case) 410.18 234.31 T
5 F
-0.98 (Tcl_CreateHashEntry) 148.5 222.31 P
2 F
-0.41 ( sets) 262.44 222.31 P
5 F
-0.98 (new) 281.61 222.31 P
2 F
-0.41 ( to 1 to indicate that it created a new entry) 299.6 222.31 P
-0.41 (. However) 463.09 222.31 P
-0.41 (,) 503.91 222.31 P
-0.05 (it is possible for) 148.5 210.31 P
5 F
-0.12 (Tcl_CreateHashEntry) 214.94 210.31 P
2 F
-0.05 ( to be called with a key that already exists in) 328.88 210.31 P
-0.02 (the table. In) 148.5 198.31 P
5 F
-0.06 (GcreateCmd) 198.39 198.31 P
2 F
-0.02 ( this can only happen if a very lar) 258.36 198.31 P
-0.02 (ge number of objects are cre-) 391.78 198.31 P
-0.1 (ated, so that) 148.5 186.31 P
5 F
-0.23 (id) 198.73 186.31 P
2 F
-0.1 ( wraps around to zero again. If this happens then) 210.73 186.31 P
5 F
-0.23 (Tcl_CreateHashEn-) 406.56 186.31 P
-0.53 (try) 148.5 174.31 P
2 F
-0.22 ( sets new to 0;) 166.49 174.31 P
5 F
-0.53 (GcreateCmd) 225.07 174.31 P
2 F
-0.22 ( will try again with the next lar) 285.04 174.31 P
-0.22 (ger) 406.83 174.31 P
5 F
-0.53 (id) 421.88 174.31 P
2 F
-0.22 ( until it eventually) 433.87 174.31 P
(\336nds a name that isn\325) 148.5 162.31 T
(t already in use.) 233.82 162.31 T
FMENDPAGE
%%EndPage: "304" 55
%%Page: "305" 55
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(33.4 Finding existing entries) 103.5 668.33 T
0 F
(305) 500.83 668.33 T
103.5 660.6 517.5 660.6 2 L
0.25 H
0 Z
N
103.5 90 517.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 203.4 101.33 T
103.5 135 517.5 639 R
7 X
V
2 10 Q
0 X
(After creating the hash table entry) 175.5 632.33 T
5 F
(GcreateCmd) 314.27 632.33 T
2 F
( allocates memory for the object\325) 374.24 632.33 T
(s) 506.09 632.33 T
(record and invokes) 157.5 619.98 T
5 F
(Tcl_SetHashValue) 236.05 619.98 T
2 F
( to store the record address as the value of the) 331.99 619.98 T
(hash table entry) 157.5 607.62 T
(.) 220.14 607.62 T
5 F
(Tcl_SetHashValue) 225.13 607.62 T
2 F
( is actually a macro, not a procedure; its \336rst) 321.08 607.62 T
(ar) 157.5 595.27 T
(gument is a token for a hash table entry and its second ar) 165.09 595.27 T
(gument, the new value for the) 391.96 595.27 T
(entry) 157.5 582.92 T
(, can be anything that \336ts in the space of a) 177.39 582.92 T
5 F
(ClientData) 347.83 582.92 T
2 F
( value. After setting the) 407.79 582.92 T
(value of the hash table entry) 157.5 570.56 T
5 F
(GcreateCmd) 272.97 570.56 T
2 F
( initializes the new object\325) 332.93 570.56 T
(s record.) 437.87 570.56 T
3 F
(Note:) 124.49 555.56 T
(T) 157.5 555.56 T
(cl\325) 162.14 555.56 T
(s hash tables r) 171.39 555.56 T
(estructur) 229.05 555.56 T
(e themselves as you add entries. A table won\325) 264.77 555.56 T
(t use much) 445.48 555.56 T
(memory for the hash buckets when it has only a small number of entries, but it will) 157.5 545.21 T
(incr) 157.5 534.85 T
(ease the size of the bucket array as the number of entries incr) 173.23 534.85 T
(eases. T) 418.81 534.85 T
(cl\325) 450.09 534.85 T
(s hash tables) 459.34 534.85 T
(should operate ef\336ciently even with very lar) 157.5 524.5 T
(ge numbers of entries.) 332.56 524.5 T
103.5 483.14 517.5 486.17 C
157.5 484.66 517.5 484.66 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 484.66 148.5 484.66 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(33.4) 123.36 490.17 T
(Finding existing entries) 157.5 490.17 T
2 10 Q
-0.18 (The procedure) 157.5 466.48 P
5 F
-0.43 (Tcl_FindHashEntry) 217.64 466.48 P
2 F
-0.18 ( locates an existing entry in a hash table. It is sim-) 319.58 466.48 P
(ilar to) 157.5 454.12 T
5 F
(Tcl_CreateHashEntry) 183.6 454.12 T
2 F
( except that it won\325) 297.53 454.12 T
(t create a new entry if the key) 374.52 454.12 T
(doesn\325) 157.5 441.77 T
(t already exist in the hash table.) 183.96 441.77 T
5 F
(Tcl_FindHashEntry) 312.77 441.77 T
2 F
( is typically used to \336nd) 414.71 441.77 T
(an object given its name. For example, the gizmo implementation might contain a utility) 157.5 429.42 T
(procedure called) 157.5 417.06 T
5 F
(GetGizmo) 226.32 417.06 T
2 F
(, which is something like) 274.3 417.06 T
5 F
(Tcl_GetInt) 377.02 417.06 T
2 F
( except that it trans-) 436.99 417.06 T
(lates its string ar) 157.5 404.71 T
(gument to a) 223.11 404.71 T
5 F
(Gizmo) 272.81 404.71 T
2 F
( pointer instead of an integer:) 302.79 404.71 T
5 F
(Gizmo *GetGizmo\050Tcl_Interp *interp, char *string\051 {) 184.5 389.71 T
(Tcl_HashEntry *entryPtr;) 207.32 378.35 T
(entryPtr = Tcl_FindHashEntry\050&gizmoTable, string\051;) 207.32 367 T
(if \050entryPtr == NULL\051 {) 207.32 355.64 T
(Tcl_AppendResult\050interp, "no gizmo named \134",) 230.15 344.29 T
(string, "\134", \050char *\051 NULL\051;) 275.8 332.94 T
(return TCL_ERROR;) 230.15 321.58 T
(}) 207.32 310.23 T
(return \050Gizmo *\051 Tcl_GetHashValue\050entryPtr\051;) 207.32 298.87 T
(}) 184.5 287.52 T
-0.06 (GetGizmo) 157.5 273.52 P
2 F
-0.02 ( looks up a gizmo name in the gizmo hash table. If the name exists then) 205.47 273.52 P
5 F
-0.06 (Get-) 493.51 273.52 P
(Gizmo) 157.5 261.17 T
2 F
( extracts the value from the entry using the macro) 187.48 261.17 T
5 F
(Tcl_GetHashValue) 388.44 261.17 T
2 F
(, con-) 484.39 261.17 T
(verts it to a) 157.5 248.81 T
5 F
(Gizmo) 204.69 248.81 T
2 F
( pointer) 234.68 248.81 T
(, and returns it. If the name doesn\325) 265.09 248.81 T
(t exist then) 402.3 248.81 T
5 F
(GetGizmo) 448.67 248.81 T
2 F
(stores an error message in) 157.5 236.46 T
5 F
(interp->result) 263.8 236.46 T
2 F
( and returns) 347.76 236.46 T
5 F
(NULL) 397.44 236.46 T
2 F
(.) 421.42 236.46 T
5 F
(GetGizmo) 175.5 224.46 T
2 F
( can be invoked from any command procedure that needs to look up a) 223.47 224.46 T
(gizmo object. For example, suppose there is a command) 157.5 212.1 T
5 F
(gtwist) 384.85 212.1 T
2 F
( that performs a \322twist\323) 420.83 212.1 T
(operation on gizmos, and that it takes a gizmo name as its \336rst ar) 157.5 199.75 T
(gument. The command) 416.6 199.75 T
(might be implemented like this:) 157.5 187.4 T
5 F
(int GtwistCmd\050ClientData clientData,) 184.5 172.4 T
(Tcl_Interp *interp, int argc, char *argv[]\051 {) 230.15 161.04 T
(Gizmo *gizmoPtr;) 207.32 149.69 T
3 F
(... check ar) 207.32 138.33 T
(gc, etc ...) 251.08 138.33 T
FMENDPAGE
%%EndPage: "305" 56
%%Page: "306" 56
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(306) 94.5 668.33 T
4 F
(Hash T) 453.51 668.33 T
(ables) 484.61 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
5 10 Q
0 X
(gizmoPtr = GetGizmo\050interp, argv[1]\051;) 198.32 632.33 T
(if \050gizmoPtr == NULL\051 {) 198.32 621.13 T
(return TCL_ERROR;) 221.15 609.93 T
(}) 198.32 598.73 T
3 F
(... perform twist operation ...) 198.32 587.54 T
5 F
(}) 175.5 576.34 T
94.5 533.98 508.5 537 C
148.5 535.49 508.5 535.49 2 L
0.5 H
2 Z
0 X
0 K
N
94.5 535.49 139.5 535.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(33.5) 114.36 541 T
(Searching) 148.5 541 T
2 10 Q
-0.01 (T) 148.5 517.31 P
-0.01 (cl provides two procedures that you can use to search through all of the entries in a hash) 153.91 517.31 P
(table.) 148.5 505.11 T
5 F
(Tcl_FirstHashEntry) 172.93 505.11 T
2 F
( starts a search and returns the \336rst entry) 280.87 505.11 T
(, and) 441.76 505.11 T
5 F
(Tcl_N-) 463.69 505.11 T
(extHashEntry) 148.5 492.91 T
2 F
( returns successive entries until the search is complete. For example,) 220.46 492.91 T
(suppose that there is a) 148.5 480.71 T
5 F
(gsearch) 239.27 480.71 T
2 F
( command that searches through all existing gizmos and) 281.25 480.71 T
(returns a list of the names of the gizmos that meet a certain set of criteria. This command) 148.5 468.52 T
(might be implemented as follows:) 148.5 456.32 T
5 F
(int GsearchCmd\050ClientData clientData,) 175.5 441.32 T
(Tcl_Interp *interp, int argc, char *argv[]\051 {) 221.15 430.12 T
(Tcl_HashEntry *entryPtr;) 198.32 418.92 T
(Tcl_HashSearch search;) 198.32 407.72 T
(Gizmo *gizmoPtr;) 198.32 396.52 T
3 F
(... pr) 198.32 385.32 T
(ocess ar) 216.83 385.32 T
(guments to choose sear) 249.5 385.32 T
(ch criteria ...) 342.67 385.32 T
5 F
(for \050entryPtr = Tcl_FirstHashEntry\050&gizmoTable,) 198.32 374.12 T
(&search\051; entryPtr != NULL;) 243.97 362.92 T
(entryPtr = Tcl_NextHashEntry\050&search\051\051 {) 243.97 351.72 T
-0.12 (gizmoPtr = \050Gizmo *\051 Tcl_GetHashValue\050entryPtr\051;) 221.15 340.52 P
(if \050) 221.15 329.32 T
3 F
(...object satis\336es sear) 245.13 329.32 T
(ch criteria...) 330.55 329.32 T
5 F
(\051 {) 379.96 329.32 T
(Tcl_AppendElement\050interp,) 243.97 318.12 T
(Tcl_GetHashKey\050entryPtr\051\051;) 289.62 306.92 T
(}) 221.15 295.73 T
(}) 198.32 284.53 T
(return TCL_OK;) 198.32 273.33 T
(}) 175.5 262.13 T
2 F
(A structure of type) 148.5 248.13 T
5 F
(Tcl_HashSearch) 226.22 248.13 T
2 F
( is used to keep track of the search.) 310.17 248.13 T
5 F
-0.6 (Tcl_FirstHashEntry) 148.5 235.93 P
2 F
-0.25 ( initializes this structure and) 256.44 235.93 P
5 F
-0.6 (Tcl_NextHashEntry) 370.39 235.93 P
2 F
-0.25 ( uses the) 472.33 235.93 P
(information in the structure to step through successive entries in the table. It\325) 148.5 223.73 T
(s possible to) 455.24 223.73 T
-0.03 (have multiple searches underway simultaneously on the same hash table by using a dif) 148.5 211.53 P
-0.03 (fer-) 494.08 211.53 P
(ent) 148.5 199.33 T
5 F
(Tcl_HashSearch) 163.21 199.33 T
2 F
( structure for each search.) 247.17 199.33 T
5 F
(Tcl_FirstHashEntry) 352.62 199.33 T
2 F
( returns a) 460.56 199.33 T
-0.14 (token for the \336rst entry in the table \050or) 148.5 187.13 P
5 F
-0.35 (NULL) 302.92 187.13 P
2 F
-0.14 ( if the table is empty\051 and) 326.91 187.13 P
5 F
-0.35 (Tcl_NextHash-) 430.54 187.13 P
-0.08 (Entry) 148.5 174.93 P
2 F
-0.03 ( returns pointers to successive entries, eventually returning) 178.48 174.93 P
5 F
-0.08 (NULL) 415.56 174.93 P
2 F
-0.03 ( when the end of) 439.55 174.93 P
(the table is reached. For each entry) 148.5 162.73 T
5 F
(GsearchCmd) 290.6 162.73 T
2 F
( extracts the value from the entry) 350.57 162.73 T
(, con-) 482.04 162.73 T
(verts it to a) 148.5 150.53 T
5 F
(Gizmo) 195.69 150.53 T
2 F
( pointer) 225.68 150.53 T
(, and sees if that object meets the criteria speci\336ed in the com-) 256.09 150.53 T
(mand\325) 148.5 138.33 T
(s ar) 173.49 138.33 T
(guments. If so, then) 187.46 138.33 T
5 F
(GsearchCmd) 269.07 138.33 T
2 F
( uses the) 329.04 138.33 T
5 F
(Tcl_GetHashKey) 365.96 138.33 T
2 F
( macro to get) 449.91 138.33 T
FMENDPAGE
%%EndPage: "306" 57
%%Page: "307" 57
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(33.6 Deleting entries) 103.5 668.33 T
0 F
(307) 500.83 668.33 T
103.5 660.6 517.5 660.6 2 L
0.25 H
0 Z
N
103.5 90 517.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 203.4 101.33 T
103.5 135 517.5 639 R
7 X
V
2 10 Q
0 X
(the name of the object \050i.e. the entry\325) 157.5 632.33 T
(s key\051 and invokes) 304.89 632.33 T
5 F
(Tcl_AppendElement) 382.06 632.33 T
2 F
( to) 484 632.33 T
(append the name to the interpreter) 157.5 620.33 T
(\325) 294.7 620.33 T
(s result as a list element.) 297.48 620.33 T
3 F
(Note:) 124.49 605.33 T
-0.22 (It is not safe to modify the structur) 157.5 605.33 P
-0.22 (e of a hash table during a sear) 293.54 605.33 P
-0.22 (ch. If you cr) 414.03 605.33 P
-0.22 (eate or delete) 461.28 605.33 P
(entries then you should terminate any sear) 157.5 595.33 T
(ches in pr) 327.58 595.33 T
(ogr) 366.62 595.33 T
(ess.) 380.14 595.33 T
103.5 553.98 517.5 557 C
157.5 555.49 517.5 555.49 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 555.49 148.5 555.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(33.6) 123.36 561 T
(Deleting entries) 157.5 561 T
2 10 Q
(The procedure) 157.5 537.31 T
5 F
(Tcl_DeleteHashEntry) 218 537.31 T
2 F
( will delete an entry from a hash table. For) 331.93 537.31 T
(example, the following procedure uses) 157.5 525.31 T
5 F
(Tcl_DeleteHashEntry) 314.6 525.31 T
2 F
( to implement a) 428.54 525.31 T
5 F
(gde-) 493.51 525.31 T
-0.94 (lete) 157.5 513.31 P
2 F
-0.39 ( command, which takes any number of ar) 181.49 513.31 P
-0.39 (guments and deletes the gizmo objects they) 343.98 513.31 P
(name:) 157.5 501.31 T
5 F
(int GdeleteCmd\050ClientData clientData,) 184.5 486.31 T
(Tcl_Interp *interp, int argc, char *argv[]\051 {) 230.15 475.31 T
(Tcl_HashEntry *entryPtr;) 207.32 464.31 T
(Gizmo *gizmoPtr;) 207.32 453.31 T
(int i;) 207.32 442.31 T
(for \050i = 1; i < argc; i++\051 {) 207.32 431.31 T
(entryPtr = Tcl_FindHashEntry\050&gizmoTable,) 230.15 420.31 T
(argv[i]\051;) 275.8 409.31 T
(if \050entryPtr == NULL\051 {) 230.15 398.31 T
(continue;) 252.97 387.31 T
(}) 230.15 376.31 T
-0.12 (gizmoPtr = \050Gizmo *\051 Tcl_HashGetValue\050entryPtr\051;) 230.15 365.31 P
(Tcl_DeleteHashEntry\050entryPtr\051;) 230.15 354.31 T
3 F
(... clean up *gizmoPtr) 230.15 343.31 T
(...) 324.43 343.31 T
5 F
(free\050\050char *\051 gizmoPtr\051;) 230.15 332.31 T
(}) 207.32 321.31 T
(return TCL_OK;) 207.32 310.31 T
(}) 184.5 299.31 T
(GdeleteCmd) 157.5 285.31 T
2 F
( checks each of its ar) 217.47 285.31 T
(guments to see if it is the name of a gizmo object. If) 300.82 285.31 T
-0.29 (not, then the ar) 157.5 273.31 P
-0.29 (gument is ignored. Otherwise) 216.41 273.31 P
5 F
-0.69 (GdeleteCmd) 336.02 273.31 P
2 F
-0.29 ( extracts a gizmo pointer from) 395.98 273.31 P
(the hash table entry and then calls) 157.5 261.31 T
5 F
(Tcl_DeleteHashEntry) 295.45 261.31 T
2 F
( to remove the entry from) 409.39 261.31 T
(the hash table. Then it performs internal cleanup on the gizmo object if needed and frees) 157.5 249.31 T
(the object\325) 157.5 237.31 T
(s record.) 199.42 237.31 T
103.5 193.95 517.5 196.98 C
157.5 195.46 517.5 195.46 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 195.46 148.5 195.46 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(33.7) 123.36 200.98 T
(Statistics) 157.5 200.98 T
2 10 Q
(The procedure) 157.5 177.29 T
5 F
(Tcl_HashStats) 218 177.29 T
2 F
( returns a string containing various statistics about the) 295.95 177.29 T
(structure of a hash table. For example, it might be used to implement a) 157.5 165.29 T
5 F
(gstat) 442.31 165.29 T
2 F
( command) 472.3 165.29 T
(for gizmos:) 157.5 153.29 T
FMENDPAGE
%%EndPage: "307" 58
%%Page: "308" 58
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(308) 94.5 668.33 T
4 F
(Hash T) 453.51 668.33 T
(ables) 484.61 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
5 10 Q
0 X
(int GstatCmd\050ClientData clientData, Tcl_Interp *interp,) 175.5 632.33 T
(int argc, char *argv[]\051 {) 221.15 621.33 T
(if \050argc != 1\051 {) 198.32 610.33 T
(interp->result = "wrong # args";) 221.15 599.33 T
(return TCL_ERROR;) 221.15 588.33 T
(}) 198.32 577.33 T
(interp->result = Tcl_HashStats\050&gizmoTable\051;) 198.32 566.33 T
(interp->freeProc = free;) 198.32 555.33 T
(return TCL_OK;) 198.32 544.33 T
(}) 175.5 533.33 T
2 F
-0.15 (The string returned by) 148.5 519.33 P
5 F
-0.36 (Tcl_HashStats) 239.51 519.33 P
2 F
-0.15 ( is dynamically allocated and must be passed to) 317.46 519.33 P
(free;) 148.5 507.33 T
5 F
(GstatCmd) 169.31 507.33 T
2 F
( uses this string as the command\325) 217.28 507.33 T
(s result, and then sets) 349.43 507.33 T
5 F
(interp-) 148.5 495.33 T
(>freeProc) 190.48 495.33 T
2 F
( so that T) 244.45 495.33 T
(cl will free the string.) 281.23 495.33 T
(The string returned by) 166.5 483.33 T
5 F
(Tcl_HashStats) 258.1 483.33 T
2 F
( contains information like the following:) 336.06 483.33 T
5 F
(1416 entries in table, 1024 buckets) 175.5 468.33 T
(number of buckets with 0 entries: 60) 175.5 457.33 T
(number of buckets with 1 entries: 591) 175.5 446.33 T
(number of buckets with 2 entries: 302) 175.5 435.33 T
(number of buckets with 3 entries: 67) 175.5 424.33 T
(number of buckets with 4 entries: 5) 175.5 413.33 T
(number of buckets with 5 entries: 0) 175.5 402.33 T
(number of buckets with 6 entries: 0) 175.5 391.33 T
(number of buckets with 7 entries: 0) 175.5 380.33 T
(number of buckets with 8 entries: 0) 175.5 369.33 T
(number of buckets with 9 entries: 0) 175.5 358.33 T
(number of buckets with more than 10 entries: 0) 175.5 347.33 T
(average search distance for entry: 1.4) 175.5 336.33 T
2 F
-0.08 (Y) 148.5 322.33 P
-0.08 (ou can use this information to see how ef) 154.72 322.33 P
-0.08 (\336ciently the entries are stored in the hash table.) 318.23 322.33 P
(For example, the last line indicates the average number of entries that T) 148.5 310.33 T
(cl will have to) 434.53 310.33 T
(check during hash table lookups, assuming that all entries are accessed with equal proba-) 148.5 298.33 T
(bility) 148.5 286.33 T
(.) 168.96 286.33 T
FMENDPAGE
%%EndPage: "308" 59
%%Page: "309" 59
612 792 0 FMBEGINPAGE
103.5 675 517.5 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
103.5 450 517.5 450 2 L
7 X
V
2 Z
0 X
N
103.5 108 517.5 126 R
7 X
V
0 10 Q
0 X
(309) 500.83 119.33 T
103.5 54 517.5 108 R
7 X
V
2 9 Q
0 X
(Copyright \251 1993 Addison-W) 157.5 102 T
(esley Publishing Company) 266.71 102 T
(, Inc.) 362.5 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 157.5 91 T
(. Any) 491.17 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 157.5 80 T
-0.34 (lisher) 157.5 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 176.98 69 P
(does not of) 157.5 58 T
(fer warranties in regard to this draft.) 197.28 58 T
1 24 Q
(Chapter 34) 157.5 605 T
-0.48 (String Utilities) 157.5 575 S
103.5 135 517.5 423 R
7 X
V
2 10 Q
0 X
(This chapter describes T) 157.5 416.33 T
(cl\325) 254.78 416.33 T
(s library procedures for manipulating strings, including a) 264.77 416.33 T
-0.24 (dynamic string mechanism that allows you to build up arbitrarily long strings, a procedure) 157.5 404.33 P
(for testing whether a command is complete, and a procedure for doing simple string) 157.5 392.33 T
(matching. T) 157.5 380.33 T
(able 34.1 summarizes these procedures.) 205.1 380.33 T
3 F
(Note:) 124.49 365.33 T
(None of the dynamic string facilities ar) 157.5 365.33 T
(e available in versions of T) 313.71 365.33 T
(cl earlier than 7.0.) 421.35 365.33 T
103.5 323.98 517.5 327 C
157.5 325.49 517.5 325.49 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 325.49 148.5 325.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(34.1) 123.36 331 T
(Dynamic strings) 157.5 331 T
2 10 Q
(A) 157.5 307.31 T
3 F
(dynamic string) 167.21 307.31 T
2 F
( is a string that can be appended to without bound. As you append infor-) 226.9 307.31 T
(mation to a dynamic string, T) 157.5 295.31 T
(cl automatically grows the memory area allocated for it. If) 275.07 295.31 T
(the string is short then T) 157.5 283.31 T
(cl avoids dynamic memory allocation altogether by using a small) 254.25 283.31 T
(static buf) 157.5 271.31 T
(fer to hold the string. T) 194.24 271.31 T
(cl provides \336ve procedures for manipulating dynamic) 286.26 271.31 T
(strings:) 157.5 259.31 T
5 F
(Tcl_DStringInit) 168.3 244.31 T
2 F
( creates a new empty string;) 258.25 244.31 T
5 F
(Tcl_DStringAppend) 168.3 229.31 T
2 F
( adds characters to a dynamic string;) 270.24 229.31 T
5 F
(Tcl_DStringAppendElement) 168.3 214.31 T
2 F
( adds a new list element to a dynamic string;) 312.22 214.31 T
5 F
(Tcl_DStringFree) 168.3 199.31 T
2 F
( releases any storage allocated for a dynamic string and reinitial-) 258.25 199.31 T
(izes the string;) 168.3 187.31 T
(and) 168.3 172.31 T
5 F
(Tcl_DStringResult) 185.23 172.31 T
2 F
( moves the value of a dynamic string to the result string) 287.17 172.31 T
(for an interpreter and reinitializes the dynamic string.) 168.3 160.31 T
49.5 351 103.5 423 C
40.5 360 202.5 414 R
7 X
0 K
V
1 9 Q
0 X
(FIGURE  34) 40.5 408 T
(T) 40.5 387 T
(ABLE  34) 45.83 387 T
31.5 351 130.5 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "309" 60
%%Page: "310" 60
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(310) 94.5 668.33 T
4 F
(String Utilities) 447.41 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
2 10 Q
0 X
(The code below uses all of these procedures to implement a) 166.5 332.4 T
5 F
(map) 407.71 332.4 T
2 F
( command, which) 425.7 332.4 T
(takes a list and generates a new list by applying some operation to each element of the) 148.5 320.06 T
(original list.) 148.5 307.72 T
5 F
(Map) 199.31 307.72 T
2 F
( takes two ar) 217.3 307.72 T
(guments: a list and a T) 267.91 307.72 T
(cl command. For each element in the) 357.99 307.72 T
(list, it executes the given command with the list element appended as an additional ar) 148.5 295.38 T
(gu-) 489.48 295.38 T
(ment. It takes the results of all the commands and generates a new list out of them, and) 148.5 283.04 T
(then returns this list as its result. Here are some exmples of how you might use the) 148.5 270.7 T
5 F
(map) 480.51 270.7 T
2 F
(command:) 148.5 258.36 T
5 F
(proc inc x {expr $x+1}) 175.5 243.36 T
(map {4 18 16 19 -7} inc) 175.5 232.02 T
253.46 217.2 175.5 217.2 2 L
V
0.4 H
N
(5 19 17 20 -6) 175.5 218.02 T
(proc addz x {return "$x z"}) 175.5 204.02 T
(map {a b {a b c}} addz) 175.5 192.67 T
301.43 177.85 175.5 177.85 2 L
V
N
({a z} {b z} {a b c z}) 175.5 178.67 T
2 F
(Here is the command procedure that implements) 166.5 164.67 T
5 F
(map) 363.3 164.67 T
2 F
(:) 381.29 164.67 T
5 F
(int MapCmd\050ClientData clientData, Tcl_Interp *interp,) 175.5 149.67 T
(int argc, char *argv[]\051 {) 221.15 138.33 T
94.5 135 508.5 639 C
94.5 339.07 508.5 639 C
5 9 Q
0 X
0 K
(Tcl_DStringInit\050Tcl_DString *dsPtr\051) 127.5 619.4 T
2 F
(Initializes) 199.5 610.4 T
5 F
(*dsPtr) 237.19 610.4 T
2 F
( to an empty string \050previous contents of) 269.55 610.4 T
5 F
(*dsPtr) 417.33 610.4 T
2 F
( are) 449.68 610.4 T
(discarded without cleanup\051.) 199.5 601.4 T
5 F
(char *Tcl_DStringAppend\050Tcl_DString *dsPtr, char *string, int) 127.5 592.4 T
(length\051) 199.5 583.4 T
2 F
(Appends) 199.5 574.4 T
5 F
(length) 233.7 574.4 T
2 F
( bytes from) 266.05 574.4 T
5 F
(string) 309.24 574.4 T
2 F
( to) 341.59 574.4 T
5 F
(dsPtr) 353.08 574.4 T
2 F
(\325) 380.37 574.4 T
(s value and returns new) 382.87 574.4 T
(value of) 199.5 565.4 T
5 F
(dsPtr) 230.95 565.4 T
2 F
(. If) 257.41 565.4 T
5 F
(length) 270.14 565.4 T
2 F
( is less than zero, appends all of) 302.49 565.4 T
5 F
(string) 419.06 565.4 T
2 F
( up to) 451.42 565.4 T
(terminating) 199.5 556.4 T
5 F
(NULL) 243.19 556.4 T
2 F
( character) 264.76 556.4 T
(.) 299.44 556.4 T
5 F
(char *Tcl_DStringAppendElement\050Tcl_DString *dsPtr, char *string\051) 127.5 547.4 T
2 F
(Converts) 199.5 538.4 T
5 F
(string) 234.2 538.4 T
2 F
( to proper list element and appends to) 266.55 538.4 T
5 F
(dsPtr) 403.85 538.4 T
2 F
(\325) 431.14 538.4 T
(s value) 433.64 538.4 T
(\050with separator space if needed\051. Returns new value of) 199.5 529.4 T
5 F
(dsPtr) 397.66 529.4 T
2 F
(.) 424.13 529.4 T
5 F
(Tcl_DStringFree\050Tcl_DString *dsPtr\051) 127.5 520.4 T
2 F
(Frees up any memory allocated for) 199.5 511.4 T
5 F
(dsPtr) 327.29 511.4 T
2 F
( and reinitializes) 354.25 511.4 T
5 F
(*dsPtr) 415.91 511.4 T
2 F
( to an) 448.26 511.4 T
(empty string.) 199.5 502.4 T
5 F
(Tcl_DStringResult\050Tcl_Interp *interp, Tcl_DString *dsPtr\051) 127.5 493.4 T
2 F
(Moves the value of) 199.5 484.4 T
5 F
(dsPtr) 270.89 484.4 T
2 F
( to) 297.85 484.4 T
5 F
(interp->result) 309.33 484.4 T
2 F
( and reinitializes) 384.83 484.4 T
5 F
(dsP-) 446.48 484.4 T
(tr) 199.5 475.4 T
2 F
(\325) 210.62 475.4 T
(s value to an empty string.) 213.12 475.4 T
5 F
(int Tcl_CommandComplete\050char *cmd\051) 127.5 456.4 T
2 F
(Returns) 199.5 447.4 T
5 F
(1) 229.71 447.4 T
2 F
( if) 235.1 447.4 T
5 F
(cmd) 245.08 447.4 T
2 F
( holds one or more complete commands,) 261.26 447.4 T
5 F
(0) 409.54 447.4 T
2 F
( if the last com-) 414.93 447.4 T
(mand in) 199.5 438.4 T
5 F
(cmd) 230.96 438.4 T
2 F
( is incomplete due to open braces etc.) 247.13 438.4 T
5 F
(int Tcl_StringMatch\050char *string, char *pattern\051) 127.5 419.4 T
2 F
(Returns) 199.5 410.4 T
5 F
(1) 229.71 410.4 T
2 F
( if) 235.1 410.4 T
5 F
(string) 245.08 410.4 T
2 F
( matches) 277.44 410.4 T
5 F
(pattern) 311.38 410.4 T
2 F
( using glob-style rules for pattern) 349.13 410.4 T
(matching,) 199.5 401.4 T
5 F
(0) 237.44 401.4 T
2 F
( otherwise.) 242.84 401.4 T
121.5 631.15 121.5 394.65 2 L
V
0.5 H
0 Z
N
481.5 631.15 481.5 394.65 2 L
V
N
121.25 631.4 481.75 631.4 2 L
V
N
121.25 468.4 481.75 468.4 2 L
V
N
121.25 431.4 481.75 431.4 2 L
V
N
121.25 394.4 481.75 394.4 2 L
V
N
94.5 135 508.5 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "310" 61
%%Page: "311" 61
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(34.1 Dynamic strings) 103.5 668.33 T
0 F
(31) 501.38 668.33 T
(1) 511.94 668.33 T
103.5 660.6 517.5 660.6 2 L
0.25 H
0 Z
N
103.5 90 517.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 203.4 101.33 T
103.5 135 517.5 639 R
7 X
V
5 10 Q
0 X
(Tcl_DString command, newList;) 207.32 632.33 T
(int listArgc, i, result;) 207.32 621.19 T
(char **listArgv;) 207.32 610.04 T
(if \050argc != 3\051 {) 207.32 598.89 T
(interp->result = "wrong # args";) 230.15 587.75 T
(return TCL_ERROR;) 230.15 576.6 T
(}) 207.32 565.46 T
(if \050Tcl_SplitList\050interp, argv[1], &listArgc,) 207.32 554.31 T
(&listArgv\051 != TCL_OK\051 {) 252.97 543.16 T
(return TCL_ERROR;) 230.15 532.02 T
(}) 207.32 520.87 T
(Tcl_DStringInit\050&newList\051;) 207.32 509.72 T
(Tcl_DStringInit\050&command\051;) 207.32 498.58 T
(for \050i = 0; i < listArgc; i++\051 {) 207.32 487.43 T
(Tcl_DStringAppend\050&command, argv[2], -1\051;) 230.15 476.29 T
(Tcl_DStringAppendElement\050&command,) 230.15 465.14 T
(listArgv[i]\051;) 275.8 453.99 T
(result = Tcl_Eval\050interp, command.string\051;) 230.15 442.85 T
(Tcl_DStringFree\050&command\051;) 230.15 431.7 T
(if \050result != TCL_OK\051 {) 230.15 420.55 T
(Tcl_DStringFree\050&newList\051;) 252.97 409.41 T
(free\050\050char *\051 listArgv\051;) 252.97 398.26 T
(return result;) 252.97 387.11 T
(}) 230.15 375.97 T
(Tcl_DStringAppendElement\050&newList,) 230.15 364.82 T
(interp->result\051;) 275.8 353.67 T
(}) 207.32 342.53 T
(Tcl_DStringResult\050interp, &newList\051;) 207.32 331.38 T
(free\050\050char *\051 listArgv\051;) 207.32 320.24 T
(return TCL_OK;) 207.32 309.09 T
(}) 184.5 297.94 T
(MapCmd) 157.5 283.94 T
2 F
( uses two dynamic strings. One holds the result list and the other holds the com-) 193.48 283.94 T
-0.02 (mand to execute in each step. The \336rst dynamic string is needed because the length of the) 157.5 271.8 P
-0.08 (command is unpredictable, and the second one is needed to store the result list as it builds) 157.5 259.65 P
(up \050this information can\325) 157.5 247.5 T
(t be placed immediately in) 256.98 247.5 T
5 F
(interp->result) 365.52 247.5 T
2 F
( because the) 449.47 247.5 T
-0.41 (interpreter) 157.5 235.36 P
-0.41 (\325) 199.5 235.36 P
-0.41 (s result will be overwritten by the command that\325) 202.27 235.36 P
-0.41 (s evaluated to process the next) 395.58 235.36 P
(list element\051. Each dynamic string is represented by a structure of type) 157.5 223.21 T
5 F
(Tcl_DString) 442.01 223.21 T
2 F
(.) 507.98 223.21 T
(The structure holds information about the string such as a pointer to its current value, a) 157.5 211.07 T
(small array to use for small strings, and a length. The only \336eld that you should ever) 157.5 198.92 T
(access is the) 157.5 186.77 T
5 F
(string) 209.4 186.77 T
2 F
( \336eld, which is a pointer to the current value. T) 245.38 186.77 T
(cl doesn\325) 432.33 186.77 T
(t allocate) 468.51 186.77 T
5 F
-0.25 (Tcl_DString) 157.5 174.63 P
2 F
-0.1 ( structures; it\325) 223.46 174.63 P
-0.1 (s up to you to allocate the structure \050e.g. as a local variable\051) 278.22 174.63 P
(and pass its address to the dynamic string library procedures.) 157.5 162.48 T
(After checking its ar) 175.5 150.48 T
(gument count, extracting all of the elements from the initial list,) 257.2 150.48 T
(and initializing its dynamic strings,) 157.5 138.33 T
5 F
(MapCmd) 300.76 138.33 T
2 F
( enters a loop to process the elements of the) 336.74 138.33 T
FMENDPAGE
%%EndPage: "311" 62
%%Page: "312" 62
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(312) 94.5 668.33 T
4 F
(String Utilities) 447.41 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
2 10 Q
0 X
(list. For each element it \336rst creates the command to execute for that element. It does this) 148.5 632.33 T
(by calling) 148.5 619.97 T
5 F
(Tcl_DStringAppend) 190.7 619.97 T
2 F
( to append the part of the command provided in) 292.64 619.97 T
5 F
(argv[2]) 148.5 607.6 T
2 F
(, then it calls) 190.48 607.6 T
5 F
(Tcl_DStringAppendElement) 244.06 607.6 T
2 F
( to append the list element as) 387.98 607.6 T
(an additional ar) 148.5 595.24 T
(gument. These procedures are similar in that both add new information to) 210.5 595.24 T
(the dynamic string. However) 148.5 582.87 T
(,) 264.13 582.87 T
5 F
(Tcl_DStringAppend) 269.12 582.87 T
2 F
( adds the information as raw text) 371.07 582.87 T
(whereas) 148.5 570.5 T
5 F
(Tcl_DStringAppendElement) 183.74 570.5 T
2 F
( converts its string ar) 327.66 570.5 T
(gument to a proper list) 411.32 570.5 T
(element and adds that list element to the dynamic string \050with a separator space, if) 148.5 558.14 T
(needed\051. It\325) 148.5 545.77 T
(s important to use) 194.01 545.77 T
5 F
(Tcl_DStringAppendElement) 267.86 545.77 T
2 F
( for the list element so) 411.79 545.77 T
(that it becomes a single word of the T) 148.5 533.41 T
(cl command being formed. If) 298.81 533.41 T
5 F
(Tcl_DStringAp-) 418.16 533.41 T
(pend) 148.5 521.04 T
2 F
( were used instead and the element were \322) 172.49 521.04 T
5 F
(a b c) 340.67 521.04 T
2 F
(\323 as in the example on page 310,) 370.66 521.04 T
-0.05 (then the command passed to) 148.5 508.67 P
5 F
-0.13 (Tcl_Eval) 263.98 508.67 P
2 F
-0.05 ( would be \322) 311.96 508.67 P
5 F
-0.13 (addz a b c) 358.15 508.67 P
2 F
-0.05 (\323 , which would result) 417.72 508.67 P
(in an error \050too many ar) 148.5 496.31 T
(guments to the) 243.52 496.31 T
5 F
(addz) 304.87 496.31 T
2 F
( procedure\051. When) 328.86 496.31 T
5 F
(Tcl_DStringAppen-) 406.01 496.31 T
(dElement) 148.5 483.94 T
2 F
( is used the command is \322) 196.47 483.94 T
5 F
(addz {a b c}) 299.19 483.94 T
2 F
(\323, which parses correctly) 371.15 483.94 T
(.) 469.85 483.94 T
(Once) 166.5 471.94 T
5 F
(MapCmd) 190.09 471.94 T
2 F
( has created the command to execute for an element, it invokes) 226.07 471.94 T
5 F
(Tcl_Eval) 148.5 459.58 T
2 F
( to evaluate the command. The) 196.47 459.58 T
5 F
(Tcl_DStringFree) 322.21 459.58 T
2 F
( call frees up any mem-) 412.17 459.58 T
(ory that was allocated for the command string and resets the dynamic string to an empty) 148.5 447.21 T
(value for use in the next command. If the command returned an error then) 148.5 434.85 T
5 F
(MapCmd) 446.88 434.85 T
2 F
(returns that same error; otherwise it uses) 148.5 422.48 T
5 F
(Tcl_DStringAppendElement) 313.1 422.48 T
2 F
( to add the) 457.02 422.48 T
(result of the command to the result list as a new list element.) 148.5 410.11 T
5 F
(MapCmd) 166.5 398.11 T
2 F
( calls) 202.48 398.11 T
5 F
(Tcl_DStringResult) 225.8 398.11 T
2 F
( after all of the list elements have been pro-) 327.74 398.11 T
(cessed. This transfers the value of the string to the interpreter) 148.5 385.75 T
(\325) 393.4 385.75 T
(s result in an ef) 396.18 385.75 T
(\336cient way) 457.07 385.75 T
(\050e.g. if the dynamic string uses dynamically allocated memory then) 148.5 373.38 T
5 F
(Tcl_DStringRe-) 419.98 373.38 T
-0.38 (sult) 148.5 361.02 P
2 F
-0.16 ( just copies a pointer to the result to) 172.49 361.02 P
5 F
-0.38 (interp->result) 316.26 361.02 P
2 F
-0.16 ( rather than allocating new) 400.21 361.02 P
(memory and copying the string\051.) 148.5 348.65 T
(Before returning,) 166.5 336.65 T
5 F
(MapCmd) 237.83 336.65 T
2 F
( must be sure to free up any memory allocated for the) 273.81 336.65 T
(dynamic strings. It turns out that this has already been done by) 148.5 324.28 T
5 F
(Tcl_DStringFree) 401.39 324.28 T
2 F
( for) 491.34 324.28 T
5 F
(command) 148.5 311.92 T
2 F
( and by) 190.48 311.92 T
5 F
(Tcl_DStringResult) 222.4 311.92 T
2 F
( for) 324.34 311.92 T
5 F
(newList) 340.99 311.92 T
2 F
(.) 382.97 311.92 T
94.5 268.56 508.5 271.59 C
148.5 270.07 508.5 270.07 2 L
0.5 H
2 Z
0 X
0 K
N
94.5 270.07 139.5 270.07 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(34.2) 114.36 275.59 T
(Command completeness) 148.5 275.59 T
2 10 Q
-0.39 (When an application is reading commands typed interactively) 148.5 251.9 P
-0.39 (, it\325) 392.42 251.9 P
-0.39 (s important to wait until a) 405.36 251.9 P
(complete command has been entered before evaluating it. For example, suppose an appli-) 148.5 239.53 T
(cation is reading commands from standard input and the user types the following three) 148.5 227.16 T
(lines:) 148.5 214.8 T
5 F
(foreach i {1 2 3 4 5} {) 175.5 199.8 T
(puts "$i*$i is [expr $i*$i]") 198.32 188.43 T
(}) 175.5 177.07 T
2 F
(If the application reads each line separately and passes it to) 148.5 163.07 T
5 F
(Tcl_Eval) 387.48 163.07 T
2 F
(, a \322) 435.45 163.07 T
5 F
(missing) 451.82 163.07 T
(close-brace) 148.5 150.7 T
2 F
(\323 error will be generated by the \336rst line. Instead, the application should) 214.46 150.7 T
-0.26 (collect input until all the commands read are complete \050e.g. there are no unmatched braces) 148.5 138.33 P
FMENDPAGE
%%EndPage: "312" 63
%%Page: "313" 63
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(34.3 String matching) 103.5 668.33 T
0 F
(313) 500.83 668.33 T
103.5 660.6 517.5 660.6 2 L
0.25 H
0 Z
N
103.5 90 517.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 203.4 101.33 T
103.5 135 517.5 639 R
7 X
V
2 10 Q
0 X
-0.03 (or quotes\051 then execute all of the input as a single script. The procedure) 157.5 632.33 P
5 F
-0.06 (Tcl_Command-) 445.54 632.33 P
(Complete) 157.5 620.24 T
2 F
( makes this possible. It takes a string as ar) 205.47 620.24 T
(gument and returns 1 if the string) 372.96 620.24 T
(contains syntactically complete commands, 0 if the last command isn\325) 157.5 608.15 T
(t yet complete.) 437.7 608.15 T
-0.34 (The C procedure below uses dynamic strings and) 175.5 596.15 P
5 F
-0.81 (Tcl_CommandComplete) 372.1 596.15 P
2 F
-0.34 ( to read) 486.04 596.15 P
(and evaluate a command typed on standard input. It collects input until all the commands) 157.5 584.06 T
-0.24 (read are complete, then it evaluates the command\050s\051 and returns the completion code from) 157.5 571.97 P
-0.08 (the evaluation. It uses) 157.5 559.88 P
5 F
-0.19 (Tcl_RecordAndEval) 246.85 559.88 P
2 F
-0.08 ( to evaluate the command so that the com-) 348.79 559.88 P
(mand is recorded on the history list.) 157.5 547.79 T
5 F
(int DoOneCmd\050Tcl_Interp *interp\051 {) 184.5 532.79 T
(char line[200];) 207.32 521.7 T
(Tcl_DString cmd;) 207.32 510.61 T
(int result;) 207.32 499.52 T
(Tcl_DStringInit\050&cmd\051;) 207.32 488.43 T
(while \0501\051 {) 207.32 477.34 T
(if \050fgets\050line, 200, stdin\051 == NULL\051 {) 230.15 466.25 T
(break;) 252.97 455.16 T
(}) 230.15 444.07 T
(Tcl_DStringAppend\050&cmd, line, -1\051;) 230.15 432.98 T
(if \050Tcl_CommandComplete\050cmd.string\051\051 {) 230.15 421.89 T
(break;) 252.97 410.8 T
(}) 230.15 399.71 T
(}) 207.32 388.62 T
(result = Tcl_RecordAndEval\050interp, cmd.string, 0\051;) 207.32 377.53 T
(Tcl_DStringFree\050&cmd\051;) 207.32 366.44 T
(return result;) 207.32 355.35 T
(}) 184.5 344.26 T
2 F
(In the example of the previous page) 157.5 330.26 T
5 F
(DoOneCmd) 303.22 330.26 T
2 F
( will collect all three lines before evaluat-) 351.19 330.26 T
(ing them. If an end-of-\336le occurs) 157.5 318.17 T
5 F
(fgets) 292.12 318.17 T
2 F
( will return) 322.1 318.17 T
5 F
(NULL) 369.01 318.17 T
2 F
( and) 393 318.17 T
5 F
(DoOneCmd) 412.43 318.17 T
2 F
( will evaluate) 460.4 318.17 T
(the command even if it isn\325) 157.5 306.08 T
(t complete yet.) 266.97 306.08 T
103.5 262.72 517.5 265.75 C
157.5 264.23 517.5 264.23 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 264.23 148.5 264.23 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(34.3) 123.36 269.75 T
(String matching) 157.5 269.75 T
2 10 Q
(The procedure) 157.5 246.05 T
5 F
(Tcl_StringMatch) 218 246.05 T
2 F
( provides the same functionality as the \322) 307.95 246.05 T
5 F
(string) 468.67 246.05 T
(match) 157.5 233.97 T
2 F
(\323 T) 187.48 233.97 T
(cl command. Given a string and a pattern, it returns) 199.83 233.97 T
5 F
(1) 408.01 233.97 T
2 F
( if the string matches the) 414.01 233.97 T
(pattern using glob-style matching and) 157.5 221.88 T
5 F
(0) 311.02 221.88 T
2 F
( otherwise. For example, here is a command pro-) 317.01 221.88 T
-0.39 (cedure that uses) 157.5 209.78 P
5 F
-0.94 (Tcl_StringMatch) 222.66 209.78 P
2 F
-0.39 ( to implement) 312.61 209.78 P
5 F
-0.94 (lsearch) 369.46 209.78 P
2 F
-0.39 (. It returns the index of the) 411.43 209.78 P
(\336rst element in a list that matches a pattern, or) 157.5 197.69 T
5 F
(-1) 344.88 197.69 T
2 F
( if no element matches:) 356.87 197.69 T
5 F
(int LsearchCmd\050ClientData clientData,) 184.5 182.69 T
(Tcl_Interp *interp, int argc, char *argv[]\051 {) 230.15 171.6 T
(int listArgc, i, result;) 207.32 160.51 T
(char **listArgv;) 207.32 149.42 T
(if \050argc != 3\051 {) 207.32 138.33 T
FMENDPAGE
%%EndPage: "313" 64
%%Page: "314" 64
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(314) 94.5 668.33 T
4 F
(String Utilities) 447.41 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
5 10 Q
0 X
(interp->result = "wrong # args";) 221.15 632.33 T
(return TCL_ERROR;) 221.15 621.33 T
(}) 198.32 610.33 T
(if \050Tcl_SplitList\050interp, argv[1], &listArgc,) 198.32 599.33 T
(&listArgv\051 != TCL_OK\051 {) 243.97 588.33 T
(return TCL_ERROR;) 221.15 577.33 T
(}) 198.32 566.33 T
(result = -1;) 198.32 555.33 T
(for \050i = 0; i < listArgc; i++\051 {) 198.32 544.33 T
(if \050Tcl_StringMatch\050listArgv[i], argv[2]\051\051 {) 221.15 533.33 T
(result = i;) 243.97 522.33 T
(break;) 243.97 511.33 T
(}) 221.15 500.33 T
(}) 198.32 489.33 T
(sprintf\050interp->result, "%d", result\051;) 198.32 478.33 T
(free\050\050char *\051 listArgv\051;) 198.32 467.33 T
(return TCL_OK;) 198.32 456.33 T
(}) 175.5 445.33 T
FMENDPAGE
%%EndPage: "314" 65
%%Page: "315" 65
612 792 0 FMBEGINPAGE
103.5 675 517.5 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
103.5 450 517.5 450 2 L
7 X
V
2 Z
0 X
N
103.5 108 517.5 126 R
7 X
V
0 10 Q
0 X
(315) 500.83 119.33 T
103.5 54 517.5 108 R
7 X
V
2 9 Q
0 X
(Copyright \251 1993 Addison-W) 157.5 102 T
(esley Publishing Company) 266.71 102 T
(, Inc.) 362.5 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 157.5 91 T
(. Any) 491.17 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 157.5 80 T
-0.34 (lisher) 157.5 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 176.98 69 P
(does not of) 157.5 58 T
(fer warranties in regard to this draft.) 197.28 58 T
1 24 Q
(Chapter 35) 157.5 605 T
-0.48 (POSIX Utilities) 157.5 575 S
103.5 135 517.5 423 R
7 X
V
2 10 Q
0 X
(This chapter describes several utilities that you may \336nd useful if you use POSIX system) 157.5 416.33 T
(calls in your C code. The procedures can be used to expand \322) 157.5 404.33 T
5 F
(~) 402.03 404.33 T
2 F
(\323 notation in \336le names, to) 408.02 404.33 T
-0.03 (generate messages for POSIX errors and signals, and to manage sub-processes. See T) 157.5 392.33 P
-0.03 (able) 498.38 392.33 P
(35.1 for a summary of the procedure.) 157.5 380.33 T
103.5 336.98 517.5 340 C
157.5 338.49 517.5 338.49 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 338.49 148.5 338.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(35.1) 123.36 344 T
(T) 157.5 344 T
(ilde expansion) 164.61 344 T
2 10 Q
(T) 157.5 320.31 T
(cl and Tk allow you to use) 162.91 320.31 T
5 F
(~) 271.45 320.31 T
2 F
( notation when specifying \336le names, and if you write new) 277.44 320.31 T
(commands that manipulate \336les then you should support tildes also. For example, the) 157.5 308.31 T
(command) 157.5 296.31 T
5 F
(open ~ouster/.login) 184.5 281.31 T
2 F
(opens the \336le named) 157.5 267.31 T
5 F
(.login) 242.44 267.31 T
2 F
( in the home directory of user) 278.42 267.31 T
5 F
(ouster) 399.17 267.31 T
2 F
(, and) 434.75 267.31 T
5 F
(open ~/.login) 184.5 252.31 T
2 F
(opens a \336le named) 157.5 238.31 T
5 F
(.login) 234.67 238.31 T
2 F
( in the home directory of the current user \050as given by the) 270.65 238.31 T
5 F
(HOME) 157.5 226.31 T
2 F
( environment variable\051. Unfortunately) 181.49 226.31 T
(, tildes are not supported by the POSIX sys-) 332.94 226.31 T
-0.34 (tem calls that actually open \336les. For example, in the \336rst) 157.5 214.31 P
5 F
-0.81 (open) 385.57 214.31 P
2 F
-0.34 ( command above the name) 409.56 214.31 P
(actually presented to the) 157.5 202.31 T
5 F
(open) 257.42 202.31 T
2 F
( system call must be something like) 281.41 202.31 T
5 F
(/users/ouster/.login) 184.5 187.31 T
2 F
(where) 157.5 173.31 T
5 F
(~ouster) 184.41 173.31 T
2 F
( has been replaced by) 226.39 173.31 T
(the home directory for) 318.42 173.31 T
5 F
(ouster) 410.57 173.31 T
2 F
(.) 446 173.31 T
5 F
(Tcl_TildeS-) 451 173.31 T
-0.12 (ubst) 157.5 161.31 P
2 F
-0.05 ( is the procedure that carries out this substitution. It is used internally by T) 181.49 161.31 P
-0.05 (cl and Tk) 477.4 161.31 P
49.5 351 103.5 423 C
40.5 360 202.5 414 R
7 X
0 K
V
1 9 Q
0 X
(FIGURE  35) 40.5 408 T
(T) 40.5 387 T
(ABLE  35) 45.83 387 T
31.5 351 130.5 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "315" 66
%%Page: "316" 66
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(316) 94.5 668.33 T
4 F
(POSIX Utilities) 442.97 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
2 10 Q
0 X
(to process \336le names before using them in system calls, and you may \336nd it useful if you) 148.5 226.64 T
(write C code that deals with POSIX \336les.) 148.5 214.64 T
(For example, the implementation of the) 166.5 202.64 T
5 F
(open) 327.23 202.64 T
2 F
( command contains code something) 351.22 202.64 T
(like the following:) 148.5 190.64 T
5 F
(int fd;) 175.5 175.64 T
(Tcl_DString buffer;) 175.5 164.64 T
(char *fullName;) 175.5 153.64 T
(...) 175.5 142.64 T
94.5 135 508.5 639 C
94.5 233.3 508.5 639 C
5 9 Q
0 X
0 K
(char *Tcl_TildeSubst\050Tcl_Interp *interp, char *name,) 127.5 619.4 T
(Tcl_DString *resultPtr\051) 149.07 610.4 T
2 F
(If) 199.5 601.4 T
5 F
(name) 207.73 601.4 T
2 F
( starts with) 229.3 601.4 T
5 F
(~) 270.99 601.4 T
2 F
(, returns a new name with the) 276.39 601.4 T
5 F
(~) 384.71 601.4 T
2 F
( and following charac-) 390.11 601.4 T
(ters replaced with the corresponding home directory name. If) 199.5 592.4 T
5 F
(name) 421.63 592.4 T
2 F
( doesn\325) 443.2 592.4 T
(t) 469.25 592.4 T
-0.06 (start with) 199.5 583.4 P
5 F
-0.15 (~) 235.32 583.4 P
2 F
-0.06 (, returns) 240.71 583.4 P
5 F
-0.15 (name) 272.28 583.4 P
2 F
-0.06 (. Uses) 293.85 583.4 P
5 F
-0.15 (*resultPtr) 317.94 583.4 P
2 F
-0.06 ( if needed to hold new name) 371.86 583.4 P
-0.1 (\050caller need not initialize) 199.5 574.4 P
5 F
-0.25 (*resultPtr) 290.94 574.4 P
2 F
-0.1 (, but must free it by calling) 344.51 574.4 P
5 F
-0.25 (Tcl_D-) 443.14 574.4 P
(StringFree) 199.5 565.4 T
2 F
(\051. If an error occurs, returns) 253.42 565.4 T
5 F
(NULL) 354.74 565.4 T
2 F
( and leaves an error mes-) 376.31 565.4 T
(sage in) 199.5 556.4 T
5 F
(interp-) 226.96 556.4 T
(>result.) 264.7 556.4 T
(char *Tcl_PosixError\050Tcl_Interp *interp\051) 127.5 537.4 T
2 F
(Sets the) 199.5 528.4 T
5 F
(errorCode) 229.96 528.4 T
2 F
( variable in) 278.49 528.4 T
5 F
(interp) 321.17 528.4 T
2 F
( based on the current value of) 353.53 528.4 T
5 F
(errno) 199.5 519.4 T
2 F
(, and returns a string identifying the error) 226.46 519.4 T
(.) 374.23 519.4 T
5 F
(char *Tcl_ErrnoId\050void\051) 127.5 510.4 T
2 F
-0.23 (Returns a symbolic name corresponding to the current value of) 199.5 501.4 P
5 F
-0.56 (errno) 425.79 501.4 P
2 F
-0.23 (, such) 452.75 501.4 P
(as) 199.5 492.4 T
5 F
(ENOENT) 209.23 492.4 T
2 F
(.) 240.92 492.4 T
5 F
(char *Tcl_SignalId\050int sig\051) 127.5 483.4 T
2 F
(Returns the symbolic name for) 199.5 474.4 T
5 F
(sig) 312.58 474.4 T
2 F
(, such as) 328.76 474.4 T
5 F
(SIGINT) 361.7 474.4 T
2 F
(.) 393.39 474.4 T
5 F
(char *Tcl_SignalMsg\050int sig\051) 127.5 465.4 T
2 F
(Returns a human-readable message describing signal) 199.5 456.4 T
5 F
(sig) 392.19 456.4 T
2 F
(.) 408.37 456.4 T
5 F
(int Tcl_CreatePipeline\050Tcl_Interp *interp, int argc, char) 127.5 437.4 T
(*argv[],) 199.5 428.4 T
(int **pidPtr, int *inPipePtr, int *outPipePtr, int *errFi-) 149.07 419.4 T
(lePtr\051) 199.5 410.4 T
2 F
(Creates a process pipeline, returns a count of the number of processes cre-) 199.5 401.4 T
(ated, and stores at) 199.5 392.4 T
5 F
(*pidPtr) 266.14 392.4 T
2 F
( the address of a) 303.89 392.4 T
5 F
(malloc) 364.54 392.4 T
2 F
(-ed array of process) 396.89 392.4 T
(identi\336ers. If an error occurs, returns) 199.5 383.4 T
5 F
(-1) 333.77 383.4 T
2 F
( and leaves an error message in) 344.56 383.4 T
5 F
(interp->result) 199.5 374.4 T
2 F
(.) 274.99 374.4 T
5 F
(InPipePtr) 279.49 374.4 T
2 F
(,) 327.66 374.4 T
5 F
(outPipePtr) 332.15 374.4 T
2 F
(, and) 385.72 374.4 T
5 F
(errFilePtr) 405.44 374.4 T
2 F
( are) 459.36 374.4 T
(used to control default I/O redirection \050see text for details\051.) 199.5 365.4 T
5 F
(Tcl_DetachPids\050int numPids, int *pidPtr\051) 127.5 346.4 T
2 F
(Passes responsibility for) 199.5 337.4 T
5 F
(numPids) 289.12 337.4 T
2 F
( at) 326.87 337.4 T
5 F
(*pidPtr) 337.85 337.4 T
2 F
( to T) 375.6 337.4 T
(cl: T) 391.95 337.4 T
(cl will allow them) 408.04 337.4 T
(to run in backround and reap them in some future call to) 199.5 328.4 T
5 F
(Tcl_ReapDe-) 404.18 328.4 T
(tachedProcs) 199.5 319.4 T
2 F
(.) 258.82 319.4 T
5 F
(Tcl_ReapDetachedProcs\050void\051) 127.5 310.4 T
2 F
(Checks to see if any detached processes have exited; if so, cleans up their) 199.5 301.4 T
(state.) 199.5 292.4 T
121.5 631.15 121.5 285.65 2 L
V
0.5 H
0 Z
N
481.5 631.15 481.5 285.65 2 L
V
N
121.25 631.4 481.75 631.4 2 L
V
N
121.25 549.4 481.75 549.4 2 L
V
N
121.25 449.4 481.75 449.4 2 L
V
N
121.25 358.4 481.75 358.4 2 L
V
N
121.25 285.4 481.75 285.4 2 L
V
N
94.5 135 508.5 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "316" 67
%%Page: "317" 67
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(35.2 Generating messages) 103.5 668.33 T
0 F
(317) 500.83 668.33 T
103.5 660.6 517.5 660.6 2 L
0.25 H
0 Z
N
103.5 90 517.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 203.4 101.33 T
103.5 135 517.5 639 R
7 X
V
5 10 Q
0 X
(fullName = Tcl_TildeSubst\050interp, argv[1], &buffer\051;) 184.5 632.33 T
(if \050fullName == NULL\051 {) 184.5 620.96 T
(return TCL_ERROR;) 207.32 609.59 T
(}) 184.5 598.21 T
(fd = open\050fullName, ...\051;) 184.5 586.84 T
(Tcl_DStringFree\050fullName\051;) 184.5 575.46 T
(...) 184.5 564.09 T
(Tcl_TildeSubst) 157.5 550.09 T
2 F
( takes as ar) 241.45 550.09 T
(guments an interpreter) 285.4 550.09 T
(, a \336le name that may start with a) 374.93 550.09 T
-0.22 (tilde, and a dynamic string. It returns a new \336le name, which is either the original name \050if) 157.5 537.71 P
-0.25 (it didn\325) 157.5 525.34 P
-0.25 (t start with) 186.22 525.34 P
5 F
-0.61 (~) 230.72 525.34 P
2 F
-0.25 (\051, a new tilde-expanded name, or) 236.71 525.34 P
5 F
-0.61 (NULL) 368.98 525.34 P
2 F
-0.25 ( if an error occurred; in the last) 392.96 525.34 P
(case an error message is left in the interpreter) 157.5 512.96 T
(\325) 339.38 512.96 T
(s result.) 342.16 512.96 T
(If) 175.5 500.96 T
5 F
(Tcl_TildeSubst) 184.65 500.96 T
2 F
( has to generate a new name, it uses the dynamic string given) 268.61 500.96 T
(by its \336nal ar) 157.5 488.59 T
(gument to store the name. When) 209.79 488.59 T
5 F
(Tcl_TildeSubst) 342.2 488.59 T
2 F
( is called the dynamic) 426.15 488.59 T
(string should either be uninitialized or empty) 157.5 476.22 T
(.) 336.74 476.22 T
5 F
(Tcl_TildeSubst) 341.74 476.22 T
2 F
( initializes it and then) 425.69 476.22 T
-0.01 (uses it for the new name if needed. Once the caller has \336nished using the new \336le name it) 157.5 463.84 P
(must invoke) 157.5 451.47 T
5 F
(Tcl_DStringFree) 209.14 451.47 T
2 F
( to release any memory that was allocated for the) 299.09 451.47 T
(dynamic string.) 157.5 439.09 T
103.5 395.74 517.5 398.76 C
157.5 397.25 517.5 397.25 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 397.25 148.5 397.25 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(35.2) 123.36 402.76 T
(Generating messages) 157.5 402.76 T
2 10 Q
(When an error or signal occurs in the C code of a T) 157.5 379.07 T
(cl application, the application should) 362.19 379.07 T
-0.33 (report the error or signal back to the T) 157.5 366.7 P
-0.33 (cl script that triggered it, usually as a T) 306.85 366.7 P
-0.33 (cl error) 459.83 366.7 P
-0.33 (. T) 488.08 366.7 P
-0.33 (o do) 498.16 366.7 P
-0.07 (this, information about the error or signal must be converted from the binary form used in) 157.5 354.32 P
(C to a string form for use in T) 157.5 341.95 T
(cl scripts. T) 276.72 341.95 T
(cl provides four procedures to do this:) 322.94 341.95 T
5 F
(Tcl_PosixError) 157.5 329.57 T
2 F
(,) 241.05 329.57 T
5 F
(Tcl_ErronId) 246.05 329.57 T
2 F
(,) 312.02 329.57 T
5 F
(Tcl_SignalId) 317.01 329.57 T
2 F
(, and) 388.97 329.57 T
5 F
(Tcl_SignalMsg) 410.9 329.57 T
2 F
(.) 488.86 329.57 T
5 F
-0.69 (Tcl_PosixError) 175.5 317.57 P
2 F
-0.29 ( provides a simple \322all in one\323 mechanism for reporting errors in) 259.45 317.57 P
(system calls.) 157.5 305.2 T
5 F
(Tcl_PosixError) 211.08 305.2 T
2 F
( examines the C variable) 295.03 305.2 T
5 F
(errno) 396.35 305.2 T
2 F
( to determine what) 426.33 305.2 T
(kind of error occurred, then it calls) 157.5 292.82 T
5 F
(Tcl_SetErrorCode) 299.05 292.82 T
2 F
( to set the) 395 292.82 T
5 F
(errorCode) 436.09 292.82 T
2 F
( vari-) 490.06 292.82 T
(able appropriately and it returns a human-readable string suitable for use in an error mes-) 157.5 280.45 T
(sage. For example, consider the following fragment of code, which might be part of a) 157.5 268.08 T
(command procedure:) 157.5 255.7 T
5 F
(FILE *f;) 184.5 240.7 T
(...) 184.5 229.33 T
(f = fopen\050"prolog.ps", "r"\051;) 184.5 217.95 T
(if \050f == NULL\051 {) 184.5 206.58 T
(char *msg = Tcl_PosixError\050interp\051;) 207.32 195.21 T
(Tcl_AppendResult\050interp,) 207.32 183.83 T
("couldn\325t open prolog.ps: ", msg,) 252.97 172.46 T
(\050char *\051 NULL\051;) 252.97 161.08 T
(return TCL_ERROR;) 207.32 149.71 T
(}) 184.5 138.33 T
FMENDPAGE
%%EndPage: "317" 68
%%Page: "318" 68
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(318) 94.5 668.33 T
4 F
(POSIX Utilities) 442.97 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
2 10 Q
0 X
(If the \336le doesn\325) 148.5 632.33 T
(t exist or isn\325) 214.1 632.33 T
(t readable then an error will occur when) 266.39 632.33 T
5 F
(fopen) 428.48 632.33 T
2 F
( invokes a) 458.46 632.33 T
(system call to open the \336le. An integer code will be stored in the) 148.5 620 T
5 F
(errno) 408.61 620 T
2 F
( variable to iden-) 438.59 620 T
-0.25 (tify the error and) 148.5 607.67 P
5 F
-0.59 (fopen) 217.46 607.67 P
2 F
-0.25 ( will return a null pointer) 247.44 607.67 P
-0.25 (. The above code detects such errors and) 345.88 607.67 P
(invokes) 148.5 595.34 T
5 F
(Tcl_PosixError) 182.09 595.34 T
2 F
(. If the \336le didn\325) 265.5 595.34 T
(t exist then) 330.55 595.34 T
5 F
(Tcl_PosixError) 376.91 595.34 T
2 F
( will set) 460.87 595.34 T
5 F
(errorCode) 148.5 583 T
2 F
( to) 202.47 583 T
5 F
(POSIX ENOENT {no such f) 175.5 568 T
(ile or directory}) 313.42 568 T
2 F
-0.25 (and return the string \322) 148.5 554 P
5 F
-0.61 (no such f) 235.19 554 P
-0.61 (ile or directory) 287.94 554 P
2 F
-0.25 (\323. The code above incorporates) 382.66 554 P
5 F
(Tcl_PosixError) 148.5 541.67 T
2 F
(\325) 232.82 541.67 T
(s return value into its own error message, which it stores in) 235.6 541.67 T
5 F
(interp->result) 148.5 529.34 T
2 F
(. In the case of an non-existent \336le, the code above will return) 232.45 529.34 T
(\322) 148.5 517.01 T
5 F
(couldn\325t open prolog.ps: no such f) 152.94 517.01 T
(ile or directory) 356.83 517.01 T
2 F
(\323 as its error) 452.77 517.01 T
(message.) 148.5 504.67 T
5 F
-0.88 (Tcl_ErrnoId) 166.5 492.67 P
2 F
-0.37 ( takes no ar) 232.46 492.67 P
-0.37 (guments and returns the of) 276.98 492.67 P
-0.37 (\336cial POSIX name for the error) 381.92 492.67 P
(indicated by) 148.5 480.34 T
5 F
(errno) 200.13 480.34 T
2 F
(. The names are the symbolic ones de\336ned in the header \336le) 230.12 480.34 T
5 F
(errno.h) 148.5 468.01 T
2 F
(. For example, if) 190.48 468.01 T
5 F
(errno) 259.32 468.01 T
2 F
(\325) 289.3 468.01 T
(s value is) 292.08 468.01 T
5 F
(ENOENT) 331.78 468.01 T
2 F
( then) 367.76 468.01 T
5 F
(Tcl_ErrnoId) 389.97 468.01 T
2 F
( will return) 455.93 468.01 T
-0.19 (the string \322) 148.5 455.68 P
5 F
-0.46 (ENOENT) 192.53 455.68 P
2 F
-0.19 (\323. The return value from) 228.51 455.68 P
5 F
-0.46 (Tcl_ErrnoId) 327.48 455.68 P
2 F
-0.19 ( is the same as the value that) 393.44 455.68 P
5 F
(Tcl_PosixError) 148.5 443.35 T
2 F
( will store in the second element of) 232.45 443.35 T
5 F
(errorCode) 375.14 443.35 T
2 F
(.) 429.11 443.35 T
5 F
(Tcl_SignalId) 166.5 431.35 T
2 F
( and) 238.46 431.35 T
5 F
(Tcl_SignalMsg) 257.89 431.35 T
2 F
( each take a POSIX signal number as ar) 335.85 431.35 T
(gu-) 494.43 431.35 T
-0.23 (ment, and each returns a string describing the signal.) 148.5 419.01 P
5 F
-0.55 (Tcl_SignalId) 359.35 419.01 P
2 F
-0.23 ( returns the of) 431.31 419.01 P
-0.23 (\336cial) 486.24 419.01 P
(POSIX name for the signal as de\336ned in) 148.5 406.68 T
5 F
(signal.h) 312.28 406.68 T
2 F
(, and) 360.25 406.68 T
5 F
(Tcl_SignalMsg) 382.18 406.68 T
2 F
( returns a) 460.14 406.68 T
(human-readable message describing the signal. For example,) 148.5 394.35 T
5 F
(Tcl_SignalId\050SIGILL\051) 175.5 379.35 T
2 F
(returns the string \322) 148.5 365.35 T
5 F
(SIGILL) 223.17 365.35 T
2 F
(\323, and) 259.15 365.35 T
5 F
(Tcl_SignalMsg\050SIGILL\051) 175.5 350.35 T
2 F
(returns \322) 148.5 336.35 T
5 F
(illegal instruction) 183.19 336.35 T
2 F
(\323.) 297.13 336.35 T
94.5 292.99 508.5 296.02 C
148.5 294.5 508.5 294.5 2 L
0.5 H
2 Z
0 X
0 K
N
94.5 294.5 139.5 294.5 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(35.3) 114.36 300.02 T
(Creating subprocesses) 148.5 300.02 T
5 10 Q
(Tcl_CreatePipeline) 166.5 276.32 T
2 F
( is the procedure that does most of the work of creating) 274.44 276.32 T
(subprocesses for) 148.5 263.99 T
5 F
(exec) 217.33 263.99 T
2 F
( and) 241.32 263.99 T
5 F
(open) 260.75 263.99 T
2 F
(. It creates one or more subprocesses in a pipeline con-) 284.73 263.99 T
(\336guration. It has the following ar) 148.5 251.66 T
(guments and result:) 280.46 251.66 T
5 F
(int Tcl_CreatePipeline\050Tcl_Interp *interp, int argc,) 175.5 236.66 T
(char *argv[], int **pidPtr, int *inPipePtr,) 221.15 225.33 T
(int *outPipePtr, int *errFilePtr\051) 221.15 213.99 T
2 F
(The) 148.5 199.99 T
5 F
(argc) 166.54 199.99 T
2 F
( and) 190.53 199.99 T
5 F
(argv) 209.96 199.99 T
2 F
( ar) 233.94 199.99 T
(guments describe the commands for the subprocesses in the same) 244.03 199.99 T
(form they would be speci\336ed to) 148.5 187.66 T
5 F
(exec) 277.86 187.66 T
2 F
(. Each string in) 301.85 187.66 T
5 F
(argv) 364.86 187.66 T
2 F
( becomes one word of one) 388.85 187.66 T
-0.09 (command, except for special strings like \322) 148.5 175.33 P
5 F
-0.22 (>) 316.45 175.33 P
2 F
-0.09 (\323 and \322) 322.45 175.33 P
5 F
-0.22 (|) 350.57 175.33 P
2 F
-0.09 (\323 that are used for I/O redirection and) 356.57 175.33 P
-0.36 (separators between commands.) 148.5 163 P
5 F
-0.86 (Tcl_CreatePipeline) 274.55 163 P
2 F
-0.36 ( normally returns a count of the) 382.49 163 P
-0.34 (number of subprocesses created, and it stores at) 148.5 150.67 P
5 F
-0.81 (*pidPtr) 338.7 150.67 P
2 F
-0.34 ( a pointer to an array containing) 380.68 150.67 P
-0.04 (the process identi\336ers for the new processes. The array is dynamically allocated and must) 148.5 138.33 P
FMENDPAGE
%%EndPage: "318" 69
%%Page: "319" 69
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(35.4 Background processes) 103.5 668.33 T
0 F
(319) 500.83 668.33 T
103.5 660.6 517.5 660.6 2 L
0.25 H
0 Z
N
103.5 90 517.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 203.4 101.33 T
103.5 135 517.5 639 R
7 X
V
2 10 Q
0 X
(be freed by the caller by passing it to) 157.5 632.33 T
5 F
(free) 307.67 632.33 T
2 F
(. If an error occurred while spawning the sub-) 331.65 632.33 T
-0.03 (processes \050e.g.) 157.5 620.27 P
5 F
-0.08 (argc) 218.49 620.27 P
2 F
-0.03 ( and) 242.48 620.27 P
5 F
-0.08 (argv) 261.84 620.27 P
2 F
-0.03 ( speci\336ed that output should be redirected to a \336le but the) 285.83 620.27 P
(\336le couldn\325) 157.5 608.21 T
(t be opened\051 then) 203.12 608.21 T
5 F
(Tcl_CreatePipeline) 274.74 608.21 T
2 F
( returns) 382.68 608.21 T
5 F
(-1) 415.43 608.21 T
2 F
( and leaves an error) 427.42 608.21 T
(message in) 157.5 596.15 T
5 F
(interp-) 204.13 596.15 T
(>result) 246.11 596.15 T
2 F
(.) 288.09 596.15 T
(The last three ar) 175.5 584.15 T
(guments to) 239.99 584.15 T
5 F
(Tcl_CreatePipeline) 286.63 584.15 T
2 F
( are used to control I/O to and) 394.57 584.15 T
(from the pipeline if) 157.5 572.09 T
5 F
(argv) 237.45 572.09 T
2 F
( and) 261.43 572.09 T
5 F
(argc) 280.86 572.09 T
2 F
( don\325) 304.85 572.09 T
(t specify I/O redirection. If these ar) 325.49 572.09 T
(guments are) 466.02 572.09 T
5 F
(NULL) 157.5 560.03 T
2 F
( then the \336rst process in the pipeline will takes its standard input from the standard) 181.49 560.03 T
(input of the parent, the last process will write its standard output to the standard output of) 157.5 547.97 T
(the parent, and all of the processes will use the parent\325) 157.5 535.91 T
(s standard error channel for their) 374.28 535.91 T
(error message. If) 157.5 523.85 T
5 F
(inPipePtr) 227.43 523.85 T
2 F
( is not) 281.4 523.85 T
5 F
(NULL) 308.34 523.85 T
2 F
( then it points to an integer;) 332.32 523.85 T
5 F
(Tcl_Cre-) 444.76 523.85 T
-0.12 (atePipeline) 157.5 511.79 P
2 F
-0.05 ( will create a pipe, connect its output to the standard input of the \336rst sub-) 223.46 511.79 P
(process, and store a writable \336le descriptor for its input at) 157.5 499.73 T
5 F
(*inPipePtr) 390.11 499.73 T
2 F
(. If) 449.53 499.73 T
5 F
(outPipePtr) 157.5 487.67 T
2 F
(  is not) 217.47 487.67 T
5 F
(NULL) 246.9 487.67 T
2 F
( then standard output goes to a pipe and a read descriptor for) 270.89 487.67 T
(the pipe is stored at) 157.5 475.61 T
5 F
(*outPipePtr) 237.73 475.61 T
2 F
(. If) 303.14 475.61 T
5 F
(errFilePtr) 317.29 475.61 T
2 F
(  is not) 377.26 475.61 T
5 F
(NULL) 406.69 475.61 T
2 F
( then) 430.68 475.61 T
5 F
(Tcl_Cre-) 452.89 475.61 T
-0.51 (atePipeline) 157.5 463.55 P
2 F
-0.22 ( creates a temporary \336le and connects the standard error \336les for all of the) 223.46 463.55 P
(subprocesses to that \336le; a readable descriptor for the \336le will be stored at) 157.5 451.49 T
5 F
(*errFi-) 454.51 451.49 T
(lePtr) 157.5 439.43 T
2 F
(.) 186.93 439.43 T
5 F
(Tcl_CreatePipeline) 191.93 439.43 T
2 F
( removes the \336le before it returns, so the \336le will only) 299.87 439.43 T
(exist as long as it is open.) 157.5 427.38 T
(If) 175.5 415.38 T
5 F
(argv) 184.65 415.38 T
2 F
( speci\336es input or output redirection then this overrides the requests made in) 208.64 415.38 T
(the ar) 157.5 403.32 T
(guments to) 179.8 403.32 T
5 F
(Tcl_CreatePipeline) 226.44 403.32 T
2 F
(. For example, if) 334.38 403.32 T
5 F
(argv) 403.23 403.32 T
2 F
( redirects standard) 427.21 403.32 T
(input then no pipe is created for standard input; if) 157.5 391.26 T
5 F
(inPipePtr) 357.92 391.26 T
2 F
( is not) 411.89 391.26 T
5 F
(NULL) 438.83 391.26 T
2 F
( then) 462.81 391.26 T
5 F
(-1) 485.02 391.26 T
2 F
( is) 497.01 391.26 T
(stored at) 157.5 379.2 T
5 F
(*inPipePtr) 194.14 379.2 T
2 F
( to indicate that standard input was redirected. If) 254.11 379.2 T
5 F
(argv) 450.07 379.2 T
2 F
( redirects) 474.06 379.2 T
(standard output then no pipe is created for it; if) 157.5 367.14 T
5 F
(outPipePtr) 347.92 367.14 T
2 F
( is not) 407.89 367.14 T
5 F
(NULL) 434.83 367.14 T
2 F
( then) 458.81 367.14 T
5 F
(-1) 481.02 367.14 T
2 F
( is) 493.02 367.14 T
(stored at) 157.5 355.08 T
5 F
(*outPipePtr) 194.14 355.08 T
2 F
(. If) 259.55 355.08 T
5 F
(argv) 273.71 355.08 T
2 F
( redirects some or all of the standard error output and) 297.69 355.08 T
5 F
(errFilePtr) 157.5 343.02 T
2 F
( is not) 217.47 343.02 T
5 F
(NULL) 244.4 343.02 T
2 F
(, the \336le will still be created and a descriptor will be returned,) 268.39 343.02 T
(even though it\325) 157.5 330.96 T
(s possible that no messages will actually appear in the \336le.) 217.47 330.96 T
103.5 287.6 517.5 290.62 C
157.5 289.11 517.5 289.11 2 L
0.5 H
2 Z
0 X
0 K
N
103.5 289.11 148.5 289.11 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(35.4) 123.36 294.62 T
(Background processes) 157.5 294.62 T
5 10 Q
(Tcl_DetachPids) 175.5 270.93 T
2 F
( and) 259.45 270.93 T
5 F
(Tcl_ReapDetachedProcs) 278.88 270.93 T
2 F
( are used to keep track of) 404.81 270.93 T
(processes executing in the background. If an application creates a subprocess and aban-) 157.5 258.87 T
(dons it \050i.e. the parent never invokes a system call to wait for the child to exit\051, then the) 157.5 246.81 T
(child executes in background and when it exits it becomes a \322zombie\323. It remains a zom-) 157.5 234.75 T
-0.17 (bie until its parent of) 157.5 222.69 P
-0.17 (\336cially waits for it or until the parent exits. Zombie processes occupy) 239.94 222.69 P
-0.05 (space in the system\325) 157.5 210.63 P
-0.05 (s process table, so if you create enough of them you will over\337ow the) 237.57 210.63 P
(process table and make it impossible for anyone to create more processes. T) 157.5 198.57 T
(o keep this) 460.73 198.57 T
(from happening, you must invoke a system call such as) 157.5 186.51 T
5 F
(waitpid) 380.97 186.51 T
2 F
(, which will return the) 422.94 186.51 T
(exit status of the zombie process. Once the status has been returned the zombie relin-) 157.5 174.45 T
(quishes its slot in the process table.) 157.5 162.39 T
(In order to prevent zombies from over\337owing the process table you should pass the) 175.5 150.39 T
(process identi\336ers for background processes to) 157.5 138.33 T
5 F
(Tcl_DetachPids) 347.36 138.33 T
2 F
(:) 431.31 138.33 T
FMENDPAGE
%%EndPage: "319" 70
%%Page: "320" 70
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(320) 94.5 668.33 T
4 F
(POSIX Utilities) 442.97 668.33 T
94.5 660.6 508.5 660.6 2 L
0.25 H
0 Z
N
94.5 90 508.5 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0504/16/93\051: Distribution Restricted) 194.4 101.33 T
94.5 135 508.5 639 R
7 X
V
5 10 Q
0 X
(Tcl_DetachPids\050int numPids, int *pidPtr\051) 175.5 632.33 T
2 F
(The) 148.5 618.33 T
5 F
(pidPtr) 166.54 618.33 T
2 F
( ar) 202.52 618.33 T
(gument points to an array of process identi\336ers and) 212.6 618.33 T
5 F
(numPids) 419.96 618.33 T
2 F
( gives the) 461.94 618.33 T
(size of the array) 148.5 606.33 T
(. Each of these processes now becomes the property of T) 211.96 606.33 T
(cl and the caller) 438.57 606.33 T
-0.23 (should not refer to them again. T) 148.5 594.33 P
-0.23 (cl will assume responsibility for waiting for the processes) 277.7 594.33 P
(after they exit.) 148.5 582.33 T
(In order for T) 166.5 570.33 T
(cl to clean up background processes you may need to call) 220.47 570.33 T
5 F
(Tcl_Reap-) 452.79 570.33 T
(DetachedProcs) 148.5 558.33 T
2 F
( from time to time.) 226.46 558.33 T
5 F
(Tcl_ReapDetachedProcs) 304.19 558.33 T
2 F
( invokes the) 430.12 558.33 T
5 F
-0.08 (waitpid) 148.5 546.33 P
2 F
-0.03 ( kernel call on each detached process so that its state can be cleaned up if it has) 190.48 546.33 P
-0.16 (exited. If some of the detached processes are still executing then) 148.5 534.33 P
5 F
-0.38 (Tcl_ReapDetached-) 406.56 534.33 P
(Procs) 148.5 522.33 T
2 F
( doesn\325) 178.48 522.33 T
(t actually wait for them to exit; it only cleans up the processes that have) 207.45 522.33 T
(already exited. T) 148.5 510.33 T
(cl automatically invokes) 215.24 510.33 T
5 F
(Tcl_ReapDetachedProcs) 315.46 510.33 T
2 F
( each time) 441.39 510.33 T
5 F
(Tcl_CreatePipeline) 148.5 498.33 T
2 F
( is invoked, so under normal circumstances you won\325) 256.44 498.33 T
(t ever) 469.72 498.33 T
(need to invoke it. However) 148.5 486.33 T
(, if you create processes without calling) 256.63 486.33 T
5 F
(Tcl_CreatePipe-) 417.62 486.33 T
(line) 148.5 474.33 T
2 F
( \050e.g. by invoking the) 172.49 474.33 T
5 F
(fork) 260.49 474.33 T
2 F
( system call\051 and subsequently pass the processes to) 284.48 474.33 T
5 F
(Tcl_DetachPids) 148.5 462.33 T
2 F
(, then you should also invoke) 232.45 462.33 T
5 F
(Tcl_ReapDetachedProcs) 352.11 462.33 T
2 F
( from) 478.04 462.33 T
(time to time. For example, a good place to call) 148.5 450.33 T
5 F
(Tcl_ReapDetachedProcs) 337.27 450.33 T
2 F
( is in the) 463.2 450.33 T
(code that creates new subprocesses.) 148.5 438.33 T
FMENDPAGE
%%EndPage: "320" 71
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 70 1
%%DocumentFonts: Helvetica-Bold
%%+ Times-Bold
%%+ Times-Roman
%%+ Times-Italic
%%+ Helvetica
%%+ Courier
