%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 18 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
3 0 /Helvetica FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
5 0 /Times-Italic FMFONTDEFINE
6 0 /Courier-Oblique FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(1) 506.54 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 14 Q
0 X
(Chapter 36) 98.1 629.67 T
(Introduction) 233.1 629.67 T
(323) 316.27 629.67 T
2 10 Q
(36.1) 206.61 612.33 T
(What\325) 233.1 612.33 T
(s in a widget?) 257.53 612.33 T
(324) 322.76 612.33 T
(36.2) 206.61 596.33 T
(W) 233.1 596.33 T
(idgets are event-driven) 242.13 596.33 T
(325) 343.72 596.33 T
(36.3) 206.61 580.33 T
(Tk vs. Xlib) 233.1 580.33 T
(325) 288.35 580.33 T
(36.4) 206.61 564.33 T
(Square: an example widget) 233.1 564.33 T
(326) 351.62 564.33 T
(36.5) 206.61 548.33 T
(Design for re-usability) 233.1 548.33 T
(328) 333.58 548.33 T
2 14 Q
(Chapter 37) 98.1 511.67 T
(Creating Windows) 233.1 511.67 T
(329) 352.41 511.67 T
2 10 Q
(37.1) 206.61 494.33 T
(Tk_W) 233.1 494.33 T
(indow structures) 258.24 494.33 T
(329) 334.57 494.33 T
(37.2) 206.61 478.33 T
(Creating Tk_W) 233.1 478.33 T
(indows) 295.16 478.33 T
(329) 334.02 478.33 T
(37.3) 206.61 462.33 T
(Setting a window\325) 233.1 462.33 T
(s class) 305.84 462.33 T
(331) 341.65 462.33 T
(37.4) 206.61 446.33 T
(Deleting windows) 233.1 446.33 T
(332) 316.1 446.33 T
(37.5) 206.61 430.33 T
(Basic operations on Tk_W) 233.1 430.33 T
(indows) 339.57 430.33 T
(332) 378.44 430.33 T
(37.6) 206.61 414.33 T
(Create procedures) 233.1 414.33 T
(333) 315.52 414.33 T
(37.7) 206.61 398.33 T
(Delayed window creation) 233.1 398.33 T
(336) 345.79 398.33 T
2 14 Q
(Chapter 38) 98.1 361.67 T
(Configuring Widgets) 233.1 361.67 T
(337) 365.64 361.67 T
2 10 Q
(38.1) 206.61 344.33 T
(Tk_Con\336gureW) 233.1 344.33 T
(idget) 298.21 344.33 T
(337) 328.2 344.33 T
3 8 Q
(38.1.1) 233.1 331.67 T
(Tk_Con\336gSpec tables) 257.08 331.67 T
(339) 343.29 331.67 T
(38.1.2) 233.1 321.67 T
(Invoking Tk_Con\336gureWidget) 257.08 321.67 T
(341) 369.94 321.67 T
(38.1.3) 233.1 311.67 T
(Errors) 257.08 311.67 T
(342) 286.84 311.67 T
(38.1.4) 233.1 301.67 T
(Recon\336guring) 257.08 301.67 T
(342) 314.4 301.67 T
(38.1.5) 233.1 291.67 T
(Tk_Con\336gureInfo) 257.08 291.67 T
(342) 326.4 291.67 T
(38.1.6) 233.1 281.67 T
(Tk_FreeOptions) 257.08 281.67 T
(343) 322.39 281.67 T
(38.1.7) 233.1 271.67 T
(Other uses for con\336guration tables) 257.08 271.67 T
(343) 387.28 271.67 T
2 10 Q
(38.2) 206.61 258.33 T
(Resource caches) 233.1 258.33 T
(343) 309.42 258.33 T
3 8 Q
(38.2.1) 233.1 245.67 T
(Graphics contexts) 257.08 245.67 T
(344) 329.06 245.67 T
(38.2.2) 233.1 235.67 T
(Other resources) 257.08 235.67 T
(345) 322.39 235.67 T
2 10 Q
(38.3) 206.61 222.33 T
(Tk_Uids) 233.1 222.33 T
(346) 278.08 222.33 T
(38.4) 206.61 206.33 T
(Other translators) 233.1 206.33 T
(346) 309.99 206.33 T
(38.5) 206.61 190.33 T
(Changing window attributes) 233.1 190.33 T
(347) 356.36 190.33 T
(38.6) 206.61 174.33 T
(The square con\336gure procedure) 233.1 174.33 T
(348) 369.92 174.33 T
(38.7) 206.61 158.33 T
(The square widget command procedure) 233.1 158.33 T
(349) 401.3 158.33 T
FMENDPAGE
%%EndPage: "1" 2
%%Page: "2" 2
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(2) 98.1 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 14 Q
0 X
(Chapter 39) 98.1 629.67 T
(Events) 233.1 629.67 T
(353) 285.18 629.67 T
2 10 Q
(39.1) 206.61 612.33 T
(X events) 233.1 612.33 T
(353) 278.35 612.33 T
(39.2) 206.61 596.33 T
(File events) 233.1 596.33 T
(357) 286.68 596.33 T
(39.3) 206.61 580.33 T
(T) 233.1 580.33 T
(imer events) 238.86 580.33 T
(359) 295.21 580.33 T
(39.4) 206.61 564.33 T
(Idle callbacks) 233.1 564.33 T
(360) 298.32 564.33 T
(39.5) 206.61 548.33 T
(Generic event handlers) 233.1 548.33 T
(361) 335.23 548.33 T
(39.6) 206.61 532.33 T
(Invoking the event dispatcher) 233.1 532.33 T
(362) 361.62 532.33 T
2 14 Q
(Chapter 40) 98.1 495.67 T
(Displaying Widgets) 233.1 495.67 T
(365) 358.64 495.67 T
2 10 Q
(40.1) 206.61 478.33 T
(Delayed redisplay) 233.1 478.33 T
(365) 315.54 478.33 T
(40.2) 206.61 462.33 T
(Double-buf) 233.1 462.33 T
(fering with pixmaps) 278.99 462.33 T
(367) 369.49 462.33 T
(40.3) 206.61 446.33 T
(Drawing procedures) 233.1 446.33 T
(367) 324.41 446.33 T
2 14 Q
(Chapter 41) 98.1 409.67 T
(Destroying Widgets) 233.1 409.67 T
(371) 359.41 409.67 T
2 10 Q
(41.1) 206.61 392.33 T
(Basics) 233.1 392.33 T
(371) 269.19 392.33 T
(41.2) 206.61 376.33 T
(Delayed cleanup) 233.1 376.33 T
(372) 309.98 376.33 T
2 14 Q
(Chapter 42) 98.1 339.67 T
(Managing the Selection) 233.1 339.67 T
(377) 380.01 339.67 T
2 10 Q
(42.1) 206.61 322.33 T
(Selection handlers) 233.1 322.33 T
(377) 316.65 322.33 T
(42.2) 206.61 306.33 T
(Claiming the selection) 233.1 306.33 T
(380) 333.05 306.33 T
(42.3) 206.61 290.33 T
(Retrieving the selection) 233.1 290.33 T
(381) 338.03 290.33 T
2 14 Q
(Chapter 43) 98.1 253.67 T
(Geometry Management) 233.1 253.67 T
(383) 379.6 253.67 T
2 10 Q
(43.1) 206.61 236.33 T
(Requesting a size for a widget) 233.1 236.33 T
(383) 363.84 236.33 T
(43.2) 206.61 220.33 T
(Internal borders) 233.1 220.33 T
(385) 306.65 220.33 T
(43.3) 206.61 204.33 T
(Grids) 233.1 204.33 T
(386) 265.3 204.33 T
(43.4) 206.61 188.33 T
(Geometry managers) 233.1 188.33 T
(387) 323.86 188.33 T
(43.5) 206.61 172.33 T
(Claiming ownership) 233.1 172.33 T
(388) 324.44 172.33 T
(43.6) 206.61 156.33 T
(Retrieving geometry information) 233.1 156.33 T
(388) 375.23 156.33 T
(43.7) 206.61 140.33 T
(Mapping and setting geometry) 233.1 140.33 T
(389) 365.52 140.33 T
FMENDPAGE
%%EndPage: "2" 3
%%Page: "321" 3
612 792 0 FMBEGINPAGE
103.5 675 517.5 675 2 L
7 X
0 K
V
2 H
2 Z
0 X
N
103.5 135 517.5 135 2 L
7 X
V
0 X
N
98.1 162 512.1 576 R
7 X
V
1 36 Q
0 X
-0.72 (Part IV) 245.16 552 S
-0.72 (:) 353.77 552 S
-0.72 (Tk\325) 177.92 468 S
-0.72 (s C Interfaces) 230.44 468 S
FMENDPAGE
%%EndPage: "321" 4
%%Page: "322" 4
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(322) 98.1 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
FMENDPAGE
%%EndPage: "322" 5
%%Page: "323" 5
612 792 0 FMBEGINPAGE
98.1 675 512.1 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
98.1 450 512.1 450 2 L
7 X
V
2 Z
0 X
N
98.1 108 512.1 126 R
7 X
V
0 10 Q
0 X
(323) 495.43 119.33 T
98.1 54 512.1 108 R
7 X
V
2 9 Q
0 X
(Copyright \251 1993 Addison-W) 152.1 102 T
(esley Publishing Company) 261.32 102 T
(, Inc.) 357.1 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 152.1 91 T
(. Any) 485.77 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 152.1 80 T
-0.34 (lisher) 152.1 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 171.58 69 P
(does not of) 152.1 58 T
(fer warranties in regard to this draft.) 191.88 58 T
1 24 Q
(Chapter 36) 152.1 605 T
-0.48 (Intr) 152.1 575 S
-0.48 (oduction) 191.06 575 S
98.1 135 512.1 423 R
7 X
V
2 10 Q
0 X
(Like T) 152.1 416.33 T
(cl, Tk is a C library package that is linked with applications, and it provides a col-) 178.33 416.33 T
-0.32 (lection of library procedures that you can invoke from C code in the enclosing application.) 152.1 404.33 P
-0.04 (Although you can do many interesting things with Tk without writing any C code, just by) 152.1 392.33 P
-0.31 (writing T) 152.1 380.33 P
-0.31 (cl scripts for) 188.57 380.33 P
4 F
-0.73 (wish) 240.12 380.33 P
2 F
-0.31 (, you\325ll probably \336nd that most lar) 264.11 380.33 P
-0.31 (ge GUI applications require) 399.52 380.33 P
(some C code too. The most common reason for using Tk\325) 152.1 368.33 T
(s C interfaces is to build new) 382.23 368.33 T
(kinds of widgets. For example, if you write a Tk-based spreadsheet you\325ll probably need) 152.1 356.33 T
-0.02 (to implement a new widget to display the contents of the spreadsheet; if you write a chart-) 152.1 344.33 P
-0.02 (ing package you\325ll probably build one or two new widgets to display charts and graphs in) 152.1 332.33 P
(various forms; and so on. Some of these widgets could probably be implemented with) 152.1 320.33 T
-0.19 (existing Tk widgets such as canvases or texts, but for big jobs a new widget tailored to the) 152.1 308.33 P
-0.04 (needs of your application can probably do the job more simply and ef) 152.1 296.33 P
-0.04 (\336ciently than any of) 429.55 296.33 P
-0.18 (Tk\325) 152.1 284.33 P
-0.18 (s general-purpose widgets. T) 165.98 284.33 P
-0.18 (ypically you\325ll build one or two new widget classes to dis-) 280.2 284.33 P
-0.11 (play your application\325) 152.1 272.33 P
-0.11 (s new objects, then combine your custom widgets with Tk\325) 239.6 272.33 P
-0.11 (s built-in) 474 272.33 P
(widgets to create the full user interface of the application.) 152.1 260.33 T
(The main focus of this part of the book is on building new widgets. Most of Tk\325) 170.1 248.33 T
(s) 489.08 248.33 T
-0.19 (library procedures exist for this purpose, and most of the text in this part of the book is ori-) 152.1 236.33 P
-0.27 (ented towards widget builders. However) 152.1 224.33 P
-0.27 (, you can also use Tk\325) 312.44 224.33 P
-0.27 (s library procedures to build) 398.25 224.33 P
(new geometry managers; this is described in Chapter 43. Or) 152.1 212.33 T
(, you may simply need to pro-) 391.53 212.33 T
(vide access to some window system feature that isn\325) 152.1 200.33 T
(t supported by the existing T) 361.21 200.33 T
(cl com-) 475.17 200.33 T
(mands, such as the ability to set the border width of a top-level window) 152.1 188.33 T
(. In any event, the) 437.37 188.33 T
(new features you implement should appear as T) 152.1 176.33 T
(cl commands so that you can use them in) 342.64 176.33 T
-0.32 (scripts. Both the philosophical issues and the library procedures discussed in Part III apply) 152.1 164.33 P
(to this part of the book also.) 152.1 152.33 T
44.1 351 98.1 423 C
35.1 360 197.1 414 R
7 X
0 K
V
1 9 Q
0 X
(FIGURE  36) 35.1 408 T
(T) 35.1 387 T
(ABLE  36) 40.43 387 T
26.1 351 125.1 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "323" 6
%%Page: "324" 6
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(324) 98.1 668.33 T
3 F
(Introduction) 459.88 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 623.98 512.1 627 C
152.1 625.2 512.1 625.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 625.49 143.1 625.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(36.1) 117.96 631 T
(What\325) 152.1 631 T
(s in a widget?) 184.3 631 T
2 10 Q
(All widget classes have the same basic structure, consisting of a widget record and six C) 152.1 607.31 T
(procedures that implement the widget\325) 152.1 595.28 T
(s look and feel. More complex widgets may have) 305.89 595.28 T
-0.28 (additional data structures and procedures besides theses, but all widgets have at least these) 152.1 583.25 P
(basic components.) 152.1 571.22 T
( A) 170.1 559.22 T
5 F
(widget r) 182.31 559.22 T
(ecor) 214.99 559.22 T
(d) 232.38 559.22 T
2 F
( is the C data structure that represents the state of a widget. It) 237.37 559.22 T
(includes all of the widget\325) 152.1 547.19 T
(s con\336guration options plus anything else the widget needs for) 255.92 547.19 T
-0.16 (its own internal use. For example, the widget record for a label widget contains the label\325) 152.1 535.16 P
-0.16 (s) 505.87 535.16 P
-0.37 (text or bitmap, its background and foreground colors, its relief, and so on. Each instance of) 152.1 523.13 P
(a widget has its own widget record, but all widgets of the same class have widget records) 152.1 511.1 T
(with the same structure. One of the \336rst things you will do when designing a new widget) 152.1 499.07 T
(class is to design the widget record for that class.) 152.1 487.04 T
(Of the widget\325) 170.1 475.04 T
(s six core procedures, two are T) 227.84 475.04 T
(cl command procedures. The \336rst of) 354.53 475.04 T
(these is called the) 152.1 463.01 T
5 F
(cr) 225.38 463.01 T
(eate pr) 233.34 463.01 T
(ocedur) 261 463.01 T
(e) 288.39 463.01 T
2 F
(; it implements the T) 292.82 463.01 T
(cl command that creates widgets) 375.42 463.01 T
(of this class. The command\325) 152.1 450.98 T
(s name is the same as the class name, and the command) 264.53 450.98 T
-0.11 (should have the standard syntax described in Section XXX for creating widgets. The com-) 152.1 438.95 P
(mand procedure initializes a new widget record, creates the window for the widget, and) 152.1 426.92 T
(creates the widget command for the widget. It is described in more detail in Chapters 37) 152.1 414.89 T
(and 38.) 152.1 402.87 T
-0.22 (The second command procedure is the) 170.1 390.87 P
5 F
-0.22 (widget command pr) 325.35 390.87 P
-0.22 (ocedur) 403.95 390.87 P
-0.22 (e) 431.33 390.87 P
2 F
-0.22 (; it implements the) 435.77 390.87 P
(widget commands for all widgets of this class. When the widget command is invoked its) 152.1 378.84 T
4 F
(clientData) 152.1 366.81 T
2 F
( ar) 212.07 366.81 T
(gument points to the widget record for a particular widget; this allows) 222.15 366.81 T
-0.17 (the same C procedure to implement the widget commands for many dif) 152.1 354.78 P
-0.17 (ferent widgets \050the) 435.16 354.78 P
(counter objects described in Section XXX used a similar approach\051.) 152.1 342.75 T
(The third core procedure for a widget class is its) 170.1 330.75 T
5 F
(con\336gur) 365.5 330.75 T
(e pr) 398.44 330.75 T
(ocedur) 413.9 330.75 T
(e) 441.28 330.75 T
2 F
(. Given one or) 445.72 330.75 T
(more options in string form, such as \322) 152.1 318.72 T
4 F
(-background red) 303.12 318.72 T
2 F
(\323, it parses the options and) 393.07 318.72 T
(\336lls in the widget record with corresponding internal representations such as an) 152.1 306.69 T
4 F
(XColor) 471.87 306.69 T
2 F
-0.19 (structure. The con\336gure procedure is invoked by the create procedure and the widget com-) 152.1 294.66 P
(mand procedure to handle con\336guration options speci\336ed on their command lines. Chap-) 152.1 282.63 T
(ter 38 describes the facilities provided by Tk to make con\336gure procedures easy to write.) 152.1 270.6 T
(The fourth core procedure is the) 170.1 258.6 T
5 F
(event pr) 301.1 258.6 T
(ocedur) 333.2 258.6 T
(e) 360.58 258.6 T
2 F
(. It is invoked by Tk\325) 365.02 258.6 T
(s event dis-) 448.87 258.6 T
(patcher and typically handles exposures \050part of the window needs to be redrawn\051, win-) 152.1 246.57 T
-0.11 (dow size changes, focus changes, and the destruction of the window) 152.1 234.54 P
-0.11 (. The event procedure) 422.9 234.54 P
(does not normally deal with user interactions such as mouse motions and key presses;) 152.1 222.51 T
(these are usually handled with class bindings created with the) 152.1 210.48 T
4 F
(bind) 400.81 210.48 T
2 F
( command as) 424.8 210.48 T
(described in Chapter XXX. Chapter 39 describes the Tk event dispatcher) 152.1 198.45 T
(, including its) 443.42 198.45 T
(facilities for managing X events plus additional features for timers, event-driven \336le I/O,) 152.1 186.42 T
(and idle callbacks) 152.1 174.39 T
-0.18 (The \336fth core procedure is the) 170.1 162.39 P
5 F
-0.18 (display pr) 292.23 162.39 P
-0.18 (ocedur) 331.94 162.39 P
-0.18 (e) 359.33 162.39 P
2 F
-0.18 (. It is invoked to redraw part or all of) 363.76 162.39 P
(the widget on the screen. Redisplays can be triggered by many things, including window) 152.1 150.36 T
(exposures, changes in con\336guration options, and changes in the input focus. Chapter 40) 152.1 138.33 T
FMENDPAGE
%%EndPage: "324" 7
%%Page: "325" 7
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
(36.2 Widgets are event-driven) 98.1 668.33 T
0 F
(325) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(discusses several issues related to redisplay) 152.1 494.5 T
(, such as deferred redisplay) 324.93 494.5 T
(, double-buf) 433.36 494.5 T
(fering) 482.03 494.5 T
(with pixmaps, and Tk\325) 152.1 482.05 T
(s support for drawing 3-D ef) 242.05 482.05 T
(fects.) 355.95 482.05 T
(The last of a widget\325) 170.1 470.05 T
(s core procedures is its) 252.26 470.05 T
5 F
(destr) 345.8 470.05 T
(oy pr) 365.42 470.05 T
(ocedur) 385.87 470.05 T
(e) 413.26 470.05 T
2 F
(. This procedure is) 417.69 470.05 T
(called when the widget is destroyed and is responsible for freeing up all of the resources) 152.1 457.6 T
-0.26 (allocated for the widget such as the memory for the widget record and X resources such as) 152.1 445.15 P
-0.12 (colors and pixmaps. W) 152.1 432.7 P
-0.12 (idget destruction is tricky because the widget could be in use at the) 243.51 432.7 P
-0.06 (time it is destroyed; Chapter 41 describes how deferred destruction is used to avoid poten-) 152.1 420.24 P
(tial problems.) 152.1 407.79 T
98.1 364.44 512.1 367.46 C
152.1 365.66 512.1 365.66 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 365.95 143.1 365.95 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(36.2) 117.96 371.46 T
(W) 152.1 371.46 T
(idgets are event-driven) 163.31 371.46 T
2 10 Q
-0.05 (Part II described how the T) 152.1 347.77 P
-0.05 (cl scripts for Tk applications are event-driven, in that they con-) 260.25 347.77 P
-0.09 (sist mostly of short responses to user interactions and other events. The C code that imple-) 152.1 335.32 P
(ments widgets is also event-driven. Each of the core procedures described in the previous) 152.1 322.87 T
(section responds to events of some sort. The create, widget command, and con\336gure pro-) 152.1 310.42 T
(cedures all respond to T) 152.1 297.97 T
(cl commands. The event procedure responds to X events, and the) 247.44 297.97 T
(display and destroy procedures respond to things that occur either in X or in T) 152.1 285.52 T
(cl scripts.) 463.96 285.52 T
98.1 242.16 512.1 245.18 C
152.1 243.38 512.1 243.38 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 243.67 143.1 243.67 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(36.3) 117.96 249.18 T
(Tk vs. Xlib) 152.1 249.18 T
2 10 Q
(Xlib is the C library package that provides the lowest level of access to the X W) 152.1 225.49 T
(indow) 472.02 225.49 T
-0.18 (System. Tk is implemented using Xlib but it hides most of the Xlib procedures from the C) 152.1 213.04 P
-0.02 (code in widgets, as shown in Figure 36.1. For example, Xlib provides a procedure) 152.1 200.59 P
4 F
-0.05 (XCre-) 482.12 200.59 P
(ateWindow) 152.1 188.14 T
2 F
( to create a new windows, but you should not use it; instead, call) 206.07 188.14 T
4 F
(Tk_Cre-) 466.46 188.14 T
(ateWindowFromPath) 152.1 175.69 T
2 F
( or one of the other procedures provided by Tk for this purpose.) 254.04 175.69 T
(Tk\325) 152.1 163.23 T
(s procedures call the Xlib procedures but also do additional things such as associating) 165.98 163.23 T
(a textual name with the window) 152.1 150.78 T
(. Similarly) 279.42 150.78 T
(, you shouldn\325) 320.98 150.78 T
(t normally call Xlib procedures) 378.27 150.78 T
-0.11 (like) 152.1 138.33 P
4 F
-0.26 (XAllocColor) 169.48 138.33 P
2 F
-0.11 ( to allocate colors and other resources; call the corresponding Tk pro-) 235.45 138.33 P
98.1 135 512.1 639 C
98.1 501.17 512.1 639 C
245.7 570.6 360.9 585 R
7 X
0 K
V
1 H
0 Z
0 X
N
2 10 Q
(Xlib) 294.41 574.39 T
252.5 585 328.5 613.8 R
7 X
V
0 X
N
(Tk) 284.95 595.99 T
263.63 613.8 263.63 635.4 353.7 635.4 353.7 585 4 L
2 Z
N
(W) 294.17 621.11 T
(idget) 303.21 621.11 T
98.1 552.6 512.1 567 C
98.1 552.6 512.1 567 R
7 X
0 K
V
152.1 560.52 512.1 560.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 501.17 512.1 639 C
1 9 Q
0 X
0 K
(Figur) 152.1 546.6 T
(e  36.1.) 173.41 546.6 T
2 F
(Tk hides many of the Xlib interfaces from widgets, but widgets still invoke Xlib) 204.36 546.6 T
98.1 520.2 512.1 534.6 C
98.1 520.2 512.1 534.6 R
7 X
0 K
V
152.1 528.12 512.1 528.12 2 L
V
0.5 H
2 Z
0 X
N
98.1 501.17 512.1 639 C
2 9 Q
0 X
0 K
(directly for a few purposes such as drawing on the screen.) 152.1 537.6 T
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "325" 8
%%Page: "326" 8
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(326) 98.1 668.33 T
3 F
(Introduction) 459.88 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(cedures like) 152.1 632.33 T
4 F
(Tk_GetColor) 202.61 632.33 T
2 F
( instead. In the case of colors, Tk calls Xlib to allocate the) 268.58 632.33 T
(color) 152.1 620.33 T
(, but it also remembers the colors that are allocated; if you use the same color in) 172.24 620.33 T
(many dif) 152.1 608.33 T
(ferent places, Tk will only communicate with the X server once.) 187.73 608.33 T
-0.38 (However) 170.1 596.33 P
-0.38 (, Tk does not totally hide Xlib from you. When widgets redisplay themselves) 206.33 596.33 P
-0 (they make direct calls to Xlib procedures such as) 152.1 584.33 P
4 F
-0.01 (XDrawLine) 350.54 584.33 P
2 F
-0 ( and) 404.51 584.33 P
4 F
-0.01 (XDrawString) 423.93 584.33 P
2 F
-0 (. Fur-) 489.89 584.33 P
(thermore, many of the structures manipulated by Tk are the same as the structures pro-) 152.1 572.33 T
-0.19 (vided by Xlib, such as graphics contexts and window attributes. Thus you\325ll need to know) 152.1 560.33 P
(quite a bit about Xlib in order to write new widgets with Tk. This book assumes that you) 152.1 548.33 T
(are familiar with the following concepts from Xlib:) 152.1 536.33 T
2 12 Q
(\245) 152.1 521.33 T
2 10 Q
(W) 162.9 521.33 T
(indow attributes such as) 171.93 521.33 T
4 F
(background_pixel) 270.76 521.33 T
2 F
(, which are stored in) 366.71 521.33 T
4 F
(XSetWindo-) 450.53 521.33 T
(wAttributes) 162.9 509.33 T
2 F
( structures.) 228.86 509.33 T
2 12 Q
(\245) 152.1 494.33 T
2 10 Q
(Resources related to graphics, such as pixmaps, colors, graphics contexts, and fonts.) 162.9 494.33 T
2 12 Q
(\245) 152.1 479.33 T
2 10 Q
(Procedures for redisplaying, such as) 162.9 479.33 T
4 F
(XDrawLine) 310.01 479.33 T
2 F
( and) 363.98 479.33 T
4 F
(XDrawString) 383.41 479.33 T
2 F
(.) 449.37 479.33 T
2 12 Q
(\245) 152.1 464.33 T
2 10 Q
(Event types and the) 162.9 464.33 T
4 F
(XEvent) 243.96 464.33 T
2 F
( structure.) 279.94 464.33 T
-0.3 (Y) 152.1 449.33 P
-0.3 (ou\325ll probably \336nd it useful to keep a book on Xlib nearby when reading this book and to) 158.32 449.33 P
(refer to the Xlib documentation for speci\336cs about the Xlib structures and procedures. If) 152.1 437.33 T
(you haven\325) 152.1 425.33 T
(t used Xlib before I\325d suggest waiting to read about Xlib until you need the) 196.61 425.33 T
(information. That way you can focus on just the information you need and avoid learning) 152.1 413.33 T
(about the parts of Xlib that are hidden by Tk.) 152.1 401.33 T
(Besides Xlib, you shouldn\325) 170.1 389.33 T
(t need to know anything about any other X toolkit or) 278.75 389.33 T
(library) 152.1 377.33 T
(. For example, Tk is completely independent from the Xt toolkit so you don\325) 178.1 377.33 T
(t need) 484.12 377.33 T
-0.05 (to know anything about Xt. For that matter) 152.1 365.33 P
-0.05 (, if you\325re using Tk you) 322.95 365.33 P
5 F
-0.05 (can\325) 420.12 365.33 P
-0.05 (t) 436.77 365.33 P
2 F
-0.05 ( use Xt: their wid-) 439.55 365.33 P
(gets are incompatible and can\325) 152.1 353.33 T
(t be mixed together) 274.04 353.33 T
(.) 350.94 353.33 T
98.1 309.98 512.1 313 C
152.1 311.2 512.1 311.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 311.49 143.1 311.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(36.4) 117.96 317 T
(Square: an example widget) 152.1 317 T
2 10 Q
(I\325ll use a simple widget called \322square\323 for examples throughout Part IV) 152.1 293.31 T
(. The square wid-) 440.87 293.31 T
(get displays a colored square on a background as shown in Figure 36.2. The widget sup-) 152.1 281.31 T
-0.3 (ports several con\336guration options, such as colors for the background and for the square, a) 152.1 269.31 P
(relief for the widget, and a border width used for both the widget and the square. It also) 152.1 257.31 T
(provides three widget commands:) 152.1 245.31 T
4 F
(conf) 289.78 245.31 T
(igure) 313.77 245.31 T
2 F
(, which is used in the standard way to) 343.76 245.31 T
(query and change options;) 152.1 233.31 T
4 F
(position) 259.8 233.31 T
2 F
(, which sets the position of the square\325) 307.77 233.31 T
(s upper) 461.01 233.31 T
(-left) 489.95 233.31 T
(corner relative to the upper) 152.1 221.31 T
(-left corner of the window) 260.14 221.31 T
(, and) 364.4 221.31 T
4 F
(size) 386.33 221.31 T
2 F
(, which sets the square\325) 410.32 221.31 T
(s) 503.31 221.31 T
(size. Figure 36.2 illustrates the) 152.1 209.31 T
4 F
(position) 277.3 209.31 T
2 F
( and) 325.27 209.31 T
4 F
(size) 344.7 209.31 T
2 F
( commands.) 368.69 209.31 T
(Given these simple commands many other features can be written as T) 170.1 197.31 T
(cl scripts. For) 452.24 197.31 T
-0.28 (example, the following script arranges for the square to center itself over the mouse cursor) 152.1 185.31 P
(on Button-1 presses and to track the mouse as long as Button-1 is held down. It assumes) 152.1 173.31 T
(that the square widget is named \322) 152.1 161.31 T
4 F
(.s) 285.34 161.31 T
2 F
(\323.) 297.33 161.31 T
FMENDPAGE
%%EndPage: "326" 9
%%Page: "327" 9
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
(36.4 Square: an example widget) 98.1 668.33 T
0 F
(327) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
4 9 Q
0 X
(proc center {x y} {) 179.1 240.6 T
(set a [.s size]) 201.92 230.6 T
(.s position [expr $x-\050$a/2\051] [expr $y-\050$a/2\051]) 201.92 220.6 T
(}) 179.1 210.6 T
(bind .s <1> {center %x %y}) 179.1 200.6 T
(bind .s <B1-Motion> {center %x %y}) 179.1 190.6 T
5 10 Q
(Note:) 119.09 176.93 T
-0.33 (For this particular widget it would pr) 152.1 176.93 P
-0.33 (obably make mor) 300.25 176.93 P
-0.33 (e sense to use con\336guration options) 368.61 176.93 P
(instead of the) 152.1 166.93 T
4 F
(position) 208.46 166.93 T
5 F
( and) 256.43 166.93 T
4 F
(size) 276.42 166.93 T
5 F
( commands; I made them widget commands just to) 300.41 166.93 T
(illustrate how to write widget commands.) 152.1 156.93 T
98.1 135 512.1 639 C
98.1 246.6 510.3 639 C
98.1 297 504.9 311.4 C
94.5 297 504.9 311.4 R
7 X
0 K
V
148.5 304.92 508.5 304.92 2 L
V
0.5 H
2 Z
0 X
N
98.1 246.6 510.3 639 C
1 9 Q
0 X
0 K
(Figur) 148.5 291 T
(e  36.2.) 169.81 291 T
2 F
(A sequence of scripts and the displays that they produce. Figure \050a\051 creates a square) 200.76 291 T
(widget, Figure \050b\051 invokes the) 148.5 282 T
4 F
(position) 259.33 282 T
2 F
( widget command to move the square within its widget,) 302.47 282 T
98.1 255.6 504.9 270 C
94.5 255.6 504.9 270 R
7 X
0 K
V
148.5 263.52 508.5 263.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 246.6 510.3 639 C
2 9 Q
0 X
0 K
(and Figure \050c\051 changes the size of the square.) 148.5 273 T
4 F
(square .s) 124.6 510.98 T
(pack .s) 124.6 501.98 T
(wm title .s "Square widget example") 124.6 492.98 T
(.s position 100 75) 345.97 510.98 T
(.s size 40) 276.34 334.58 T
0 0 0 218 185 130.8 111 146.7 524.4 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-2.0%%BoundingBox: 0 0 218 185%%Creator: xgrabsc%%Title: cIntroF2a%%CreationDate: Wed Apr 21 11:34:43 1993%%EndComments%%%%EndProlog%%Page: 1 1/inch {72 mul} def/rlebuffer 2 string def/samples 256 string def/plotimage{218 185 8 [218 0 0 -185 0 185]% run-length decoding block  { currentfile rlebuffer readhexstring pop pop    rlebuffer 0 get 1 add       %% number of copies of the sample    /nsamples exch store        %% save it away    /lum rlebuffer 1 get store  %% the sample itself    0 1 nsamples 1 sub { samples exch lum put } for    samples 0 nsamples getinterval %% leave the pixels on the stack  }  image} defgsave218 185 scaleplotimagef2fa0083a4fa008318fa008301fa16da008300faa3da008300fa16da018301fa16da008300faa3da008300fa16da018301fa16da008300faa3da008300fa16da018301fa16da008300faa3da008300fa16da018301fa16da008300faa3da008300fa16da018301fa04da128300faa48300fa118304da018301fa04da0083cafa04da018301fa04da008300fa0fda008300fa08da000087da008300fa0fda008300fa0fda008300fa04da018301fa04da008300fa0fda008300fa91da008300fa0fda008300fa0fda008300fa04da018301fa04da008300fa0fda008300fa91da008300fa0fda008300fa0fda008300fa04da018301fa04da008300fa0fda008300fa05da040031da010004da01000fda01002cda01000ada008300fa0fda008300fa02da09fa02da008300fa04da018301fa04da008300fa0fda008300fa04da010002da010037da01000fda01002cda01000ada008300fa0fda008300fa02da00fa07da008302da008300fa04da018301fa04da008300fa0fda008300fa04da010002da010001da020000da000000da010001da010001da030001da010000da010000da030005da010001da010001da010000da010001da010000da010001da010000da010001da030001da030005da030001da010001da010001da030001da000000da020000da020001da010000da010001da010001da030004da008300fa0fda008300fa02da00fa07da008302da008300fa04da018301fa04da008300fa02da09fa02da008300fa05da020003da010000da020000da010001da010000da010001da010000da060001da010004da010001da010001da010000da010000da010000da020000da010000da020000da010001da010001da010005da010001da010000da010001da010000da010001da010000da010001da010001da010000da020000da010000da010000da010001da010003da008300fa05da03fa05da008300fa02da00fa07da008302da008300fa04da018301fa04da008300fa02da00fa07da008302da008300fa07da020001da010001da010000da010001da010004da010000da020001da010001da010005da010000da010000da010001da010000da010001da010000da010001da010000da010001da010001da010005da010001da010001da030005da010000da010001da010001da010000da010001da010000da010000da010001da010003da008300fa05da00fa01da008305da008300fa02da00fa07da008302da008300fa04da018301fa04da008300fa02da00fa07da008302da008300fa08da020000da010001da010000da010001da010001da040000da010002da050005da010000da010000da010001da010000da010001da010000da010001da010000da050001da010005da050002da010003da040000da010001da010001da010000da010001da010000da010000da050003da008300fa05da00fa01da008305da008300fa02da00fa07da008302da008300fa04da018301fa04da008300fa02da00fa088302da008300fa04da010002da010000da010001da010000da010001da010000da010001da010000da010002da010009da010000da010000da010001da010000da010001da010000da010001da010000da010005da010005da010005da030001da010001da010000da010001da010001da010000da010001da010000da010000da010007da008300fa05da00fa028305da008300fa02da00fa07da008302da008300fa04da018301fa04da008300fa0fda008300fa04da010002da010000da010000da020000da010000da020000da010001da010000da010002da010001da010006da010001da010002da010000da010000da020000da010000da020000da010001da010001da010000da000003da010001da010000da010001da010000da010001da010000da010001da010001da010000da020000da010000da010000da010001da010003da008300fa0fda008300fa02da00fa07da008302da008300fa04da018301fa04da008300fa0fda008300fa05da040002da010000da010001da010000da010001da020000da030003da030007da010001da010002da010001da010000da010001da010000da010001da030003da010005da030001da010001da010001da020000da030001da010001da010000da010000da010001da010001da030004da008300fa0fda008300fa02da00fa07da008302da008300fa04da018301fa04da008300fa0fda008300fa10da010037da010030da010011da008300fa0fda008300fa02da00fa088302da008300fa04da018301fa04da008300fa0fda008300fa10da010033da010001da010030da010011da008300fa0fda008300fa0fda008300fa04da018301fa04da008300fa0fda008300fa10da010034da030031da010011da008300fa0fda008300fa0fda008300fa04da018301fa04da008300fa108300fa928300fa108300fa108300fa04da018300fad08300fa068307fa00831380b3e907fa008301fa04da018312800036b3e901fa04da018301fa04da018301800f5c0136b3e901fa04da018301fa04da018301800f5c0136b3e901fa04da018301fa04da018301800f5c0136b3e901fa04da018301fa04da018301800f5c0136b3e901fa04da018301fa04da018301800f5c0136b3e901fa04da018301fa04da018301800f5c0136b3e901fa04da018301fa04da018301800f5c0136b3e901fa04da018301fa04da018301800f5c0136b3e901fa04da018301fa04da018301800f5c0136b3e901fa04da018301fa04da018301800f5c0136b3e901fa04da018301fa04da018301800f5c0136b3e901fa04da018301fa04da018301800f5c0136b3e901fa04da018301fa04da018301800f5c0136b3e901fa04da018301fa04da018301800f5c0136b3e901fa04da018301fa04da018301800f5c0136b3e901fa04da018301fa04da018301800f5c0136b3e901fa04da018301fa04da018301801136b3e901fa04da018301fa04da018300801236b3e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018300fa0783c7e901fa068307fa0083c7e907fa008301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c9fa04da018301fa04da0083cafa04da018301fa16da008300faa3da008300fa16da018301fa16da008300faa3da008300fa16da018301fa16da008300faa3da008300fa16da018301fa16da008300faa3da008300fa16da018301fa16da008300faa3da008300fa16da018301fa178300faa48300fa188300fad883%% Run-length encoding savings =  89.8%%grestoreshowpage
%%EndDocument
FMENDEPSF
0 0 0 218 185 130.8 111 329.1 524.4 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-2.0%%BoundingBox: 0 0 218 185%%Creator: xgrabsc%%Title: cIntroF2b%%CreationDate: Wed Apr 21 11:34:40 1993%%EndComments%%%%EndProlog%%Page: 1 1/inch {72 mul} def/rlebuffer 2 string def/samples 256 string def/plotimage{218 185 8 [218 0 0 -185 0 185]% run-length decoding block  { currentfile rlebuffer readhexstring pop pop    rlebuffer 0 get 1 add       %% number of copies of the sample    /nsamples exch store        %% save it away    /lum rlebuffer 1 get store  %% the sample itself    0 1 nsamples 1 sub { samples exch lum put } for    samples 0 nsamples getinterval %% leave the pixels on the stack  }  image} defgsave218 185 scaleplotimagef2fa0083a4fa008318fa008301fa16da008300faa3da008300fa16da018301fa16da008300faa3da008300fa16da018301fa16da008300faa3da008300fa16da018301fa16da008300faa3da008300fa16da018301fa16da008300faa3da008300fa16da018301fa04da128300faa48300fa118304da018301fa04da0083cafa04da018301fa04da008300fa0fda008300fa08da000087da008300fa0fda008300fa0fda008300fa04da018301fa04da008300fa0fda008300fa91da008300fa0fda008300fa0fda008300fa04da018301fa04da008300fa0fda008300fa91da008300fa0fda008300fa0fda008300fa04da018301fa04da008300fa0fda008300fa05da040031da010004da01000fda01002cda01000ada008300fa0fda008300fa02da09fa02da008300fa04da018301fa04da008300fa0fda008300fa04da010002da010037da01000fda01002cda01000ada008300fa0fda008300fa02da00fa07da008302da008300fa04da018301fa04da008300fa0fda008300fa04da010002da010001da020000da000000da010001da010001da030001da010000da010000da030005da010001da010001da010000da010001da010000da010001da010000da010001da030001da030005da030001da010001da010001da030001da000000da020000da020001da010000da010001da010001da030004da008300fa0fda008300fa02da00fa07da008302da008300fa04da018301fa04da008300fa02da09fa02da008300fa05da020003da010000da020000da010001da010000da010001da010000da060001da010004da010001da010001da010000da010000da010000da020000da010000da020000da010001da010001da010005da010001da010000da010001da010000da010001da010000da010001da010001da010000da020000da010000da010000da010001da010003da008300fa05da03fa05da008300fa02da00fa07da008302da008300fa04da018301fa04da008300fa02da00fa07da008302da008300fa07da020001da010001da010000da010001da010004da010000da020001da010001da010005da010000da010000da010001da010000da010001da010000da010001da010000da010001da010001da010005da010001da010001da030005da010000da010001da010001da010000da010001da010000da010000da010001da010003da008300fa05da00fa01da008305da008300fa02da00fa07da008302da008300fa04da018301fa04da008300fa02da00fa07da008302da008300fa08da020000da010001da010000da010001da010001da040000da010002da050005da010000da010000da010001da010000da010001da010000da010001da010000da050001da010005da050002da010003da040000da010001da010001da010000da010001da010000da010000da050003da008300fa05da00fa01da008305da008300fa02da00fa07da008302da008300fa04da018301fa04da008300fa02da00fa088302da008300fa04da010002da010000da010001da010000da010001da010000da010001da010000da010002da010009da010000da010000da010001da010000da010001da010000da010001da010000da010005da010005da010005da030001da010001da010000da010001da010001da010000da010001da010000da010000da010007da008300fa05da00fa028305da008300fa02da00fa07da008302da008300fa04da018301fa04da008300fa0fda008300fa04da010002da010000da010000da020000da010000da020000da010001da010000da010002da010001da010006da010001da010002da010000da010000da020000da010000da020000da010001da010001da010000da000003da010001da010000da010001da010000da010001da010000da010001da010001da010000da020000da010000da010000da010001da010003da008300fa0fda008300fa02da00fa07da008302da008300fa04da018301fa04da008300fa0fda008300fa05da040002da010000da010001da010000da010001da020000da030003da030007da010001da010002da010001da010000da010001da010000da010001da030003da010005da030001da010001da010001da020000da030001da010001da010000da010000da010001da010001da030004da008300fa0fda008300fa02da00fa07da008302da008300fa04da018301fa04da008300fa0fda008300fa10da010037da010030da010011da008300fa0fda008300fa02da00fa088302da008300fa04da018301fa04da008300fa0fda008300fa10da010033da010001da010030da010011da008300fa0fda008300fa0fda008300fa04da018301fa04da008300fa0fda008300fa10da010034da030031da010011da008300fa0fda008300fa0fda008300fa04da018301fa04da008300fa108300fa928300fa108300fa108300fa04da018300fad08300fa068307fa0083c7e907fa008301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da018363e913804fe901fa04da018301fa04da018363e9128000364fe901fa04da018301fa04da018363e901800f5c01364fe901fa04da018301fa04da018363e901800f5c01364fe901fa04da018301fa04da018363e901800f5c01364fe901fa04da018301fa04da018363e901800f5c01364fe901fa04da018301fa04da018363e901800f5c01364fe901fa04da018301fa04da018363e901800f5c01364fe901fa04da018301fa04da018363e901800f5c01364fe901fa04da018301fa04da018363e901800f5c01364fe901fa04da018301fa04da018363e901800f5c01364fe901fa04da018301fa04da018363e901800f5c01364fe901fa04da018301fa04da018363e901800f5c01364fe901fa04da018301fa04da018363e901800f5c01364fe901fa04da018301fa04da018363e901800f5c01364fe901fa04da018301fa04da018363e901800f5c01364fe901fa04da018301fa04da018363e901800f5c01364fe901fa04da018301fa04da018363e901800f5c01364fe901fa04da018301fa04da018363e9018011364fe901fa04da018301fa04da018363e9008012364fe901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018300fa0783c7e901fa068307fa0083c7e907fa008301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c9fa04da018301fa04da0083cafa04da018301fa16da008300faa3da008300fa16da018301fa16da008300faa3da008300fa16da018301fa16da008300faa3da008300fa16da018301fa16da008300faa3da008300fa16da018301fa16da008300faa3da008300fa16da018301fa178300faa48300fa188300fad883%% Run-length encoding savings =  89.7%%grestoreshowpage
%%EndDocument
FMENDEPSF
0 0 0 218 185 130.8 111 237.9 348 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-2.0%%BoundingBox: 0 0 218 185%%Creator: xgrabsc%%Title: cIntroF2c%%CreationDate: Wed Apr 21 11:34:38 1993%%EndComments%%%%EndProlog%%Page: 1 1/inch {72 mul} def/rlebuffer 2 string def/samples 256 string def/plotimage{218 185 8 [218 0 0 -185 0 185]% run-length decoding block  { currentfile rlebuffer readhexstring pop pop    rlebuffer 0 get 1 add       %% number of copies of the sample    /nsamples exch store        %% save it away    /lum rlebuffer 1 get store  %% the sample itself    0 1 nsamples 1 sub { samples exch lum put } for    samples 0 nsamples getinterval %% leave the pixels on the stack  }  image} defgsave218 185 scaleplotimagef2fa0083a4fa008318fa008301fa16da008300faa3da008300fa16da018301fa16da008300faa3da008300fa16da018301fa16da008300faa3da008300fa16da018301fa16da008300faa3da008300fa16da018301fa16da008300faa3da008300fa16da018301fa04da128300faa48300fa118304da018301fa04da0083cafa04da018301fa04da008300fa0fda008300fa08da000087da008300fa0fda008300fa0fda008300fa04da018301fa04da008300fa0fda008300fa91da008300fa0fda008300fa0fda008300fa04da018301fa04da008300fa0fda008300fa91da008300fa0fda008300fa0fda008300fa04da018301fa04da008300fa0fda008300fa05da040031da010004da01000fda01002cda01000ada008300fa0fda008300fa02da09fa02da008300fa04da018301fa04da008300fa0fda008300fa04da010002da010037da01000fda01002cda01000ada008300fa0fda008300fa02da00fa07da008302da008300fa04da018301fa04da008300fa0fda008300fa04da010002da010001da020000da000000da010001da010001da030001da010000da010000da030005da010001da010001da010000da010001da010000da010001da010000da010001da030001da030005da030001da010001da010001da030001da000000da020000da020001da010000da010001da010001da030004da008300fa0fda008300fa02da00fa07da008302da008300fa04da018301fa04da008300fa02da09fa02da008300fa05da020003da010000da020000da010001da010000da010001da010000da060001da010004da010001da010001da010000da010000da010000da020000da010000da020000da010001da010001da010005da010001da010000da010001da010000da010001da010000da010001da010001da010000da020000da010000da010000da010001da010003da008300fa05da03fa05da008300fa02da00fa07da008302da008300fa04da018301fa04da008300fa02da00fa07da008302da008300fa07da020001da010001da010000da010001da010004da010000da020001da010001da010005da010000da010000da010001da010000da010001da010000da010001da010000da010001da010001da010005da010001da010001da030005da010000da010001da010001da010000da010001da010000da010000da010001da010003da008300fa05da00fa01da008305da008300fa02da00fa07da008302da008300fa04da018301fa04da008300fa02da00fa07da008302da008300fa08da020000da010001da010000da010001da010001da040000da010002da050005da010000da010000da010001da010000da010001da010000da010001da010000da050001da010005da050002da010003da040000da010001da010001da010000da010001da010000da010000da050003da008300fa05da00fa01da008305da008300fa02da00fa07da008302da008300fa04da018301fa04da008300fa02da00fa088302da008300fa04da010002da010000da010001da010000da010001da010000da010001da010000da010002da010009da010000da010000da010001da010000da010001da010000da010001da010000da010005da010005da010005da030001da010001da010000da010001da010001da010000da010001da010000da010000da010007da008300fa05da00fa028305da008300fa02da00fa07da008302da008300fa04da018301fa04da008300fa0fda008300fa04da010002da010000da010000da020000da010000da020000da010001da010000da010002da010001da010006da010001da010002da010000da010000da020000da010000da020000da010001da010001da010000da000003da010001da010000da010001da010000da010001da010000da010001da010001da010000da020000da010000da010000da010001da010003da008300fa0fda008300fa02da00fa07da008302da008300fa04da018301fa04da008300fa0fda008300fa05da040002da010000da010001da010000da010001da020000da030003da030007da010001da010002da010001da010000da010001da010000da010001da030003da010005da030001da010001da010001da020000da030001da010001da010000da010000da010001da010001da030004da008300fa0fda008300fa02da00fa07da008302da008300fa04da018301fa04da008300fa0fda008300fa10da010037da010030da010011da008300fa0fda008300fa02da00fa088302da008300fa04da018301fa04da008300fa0fda008300fa10da010033da010001da010030da010011da008300fa0fda008300fa0fda008300fa04da018301fa04da008300fa0fda008300fa10da010034da030031da010011da008300fa0fda008300fa0fda008300fa04da018301fa04da008300fa108300fa928300fa108300fa108300fa04da018300fad08300fa068307fa0083c7e907fa008301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da018363e927803be901fa04da018301fa04da018363e9268000363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e90180235c01363be901fa04da018301fa04da018363e9018025363be901fa04da018301fa04da018363e9008026363be901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018300fa0783c7e901fa068307fa0083c7e907fa008301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c7e901fa04da018301fa04da0183c9fa04da018301fa04da0083cafa04da018301fa16da008300faa3da008300fa16da018301fa16da008300faa3da008300fa16da018301fa16da008300faa3da008300fa16da018301fa16da008300faa3da008300fa16da018301fa16da008300faa3da008300fa16da018301fa178300faa48300fa188300fad883%% Run-length encoding savings =  89.3%%grestoreshowpage
%%EndDocument
FMENDEPSF
2 10 Q
(\050a\051) 206.55 477.38 T
(\050b\051) 388.67 477.38 T
(\050c\051) 297.75 317.17 T
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "327" 10
%%Page: "328" 10
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(328) 98.1 668.33 T
3 F
(Introduction) 459.88 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(The implementation of the square widget requires about 320 lines of C code exclud-) 170.1 632.33 T
(ing comments, or about 750 lines in a copiously-commented version. The square widget) 152.1 620.33 T
-0.11 (doesn\325) 152.1 608.33 P
-0.11 (t use all of the features of Tk but it illustrates the basic things you must do to create) 178.57 608.33 P
-0.12 (a new widget. For examples of more complex widgets you can look at the source code for) 152.1 596.33 P
(some of Tk\325) 152.1 584.33 T
(s widgets; they have the same basic structure as the square widget and they) 200.4 584.33 T
(use the same library procedures that you\325ll read about in the chapters that follow) 152.1 572.33 T
(.) 473.15 572.33 T
98.1 528.98 512.1 532 C
152.1 530.2 512.1 530.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 530.49 143.1 530.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(36.5) 117.96 536 T
(Design for re-usability) 152.1 536 T
2 10 Q
-0.09 (When building a new widget, try to make it as \337exible and general-purpose as possible. If) 152.1 512.31 P
(you do this then it may be possible for you or someone else to use your widget in new) 152.1 500.31 T
(ways that you didn\325) 152.1 488.31 T
(t foresee when you created it. Here are a few speci\336c things to think) 231.04 488.31 T
(about:) 152.1 476.31 T
1 F
(1.) 152.1 461.31 T
2 F
(Store all the information about the widget in its widget record. If you use static or glo-) 162.9 461.31 T
(bal variables to hold widget state then it may not be possible to have more than one) 162.9 449.31 T
(instance of the widget in any given application. Even if you don\325) 162.9 437.31 T
(t envision using more) 421.99 437.31 T
(than one instance per application, don\325) 162.9 425.31 T
(t do anything to rule this out.) 317.61 425.31 T
1 F
(2.) 152.1 410.31 T
2 F
(Make sure that all of the primitive operations on your widget are available through its) 162.9 410.31 T
(widget command. Don\325) 162.9 398.31 T
(t hard-wire the widget\325) 257.38 398.31 T
(s behavior in C. Instead, de\336ne the) 348.7 398.31 T
-0.01 (behavior as a set of class bindings using the) 162.9 386.31 P
4 F
-0.02 (bind) 340.21 386.31 P
2 F
-0.01 ( command. This will make it easy to) 364.2 386.31 P
(change the widget\325) 162.9 374.31 T
(s behavior) 238.4 374.31 T
(.) 279.21 374.31 T
1 F
(3.) 152.1 359.31 T
2 F
-0.4 (Provide escapes to T) 162.9 359.31 P
-0.4 (cl. Think about interesting ways that you can embed T) 244.01 359.31 P
-0.4 (cl commands) 457.37 359.31 P
-0.13 (in your widget and invoke them in response to various events. For example, the actions) 162.9 347.31 P
(for button widgets and menu items are stored as a T) 162.9 335.31 T
(cl commands that are evaluated) 369.28 335.31 T
(when the widgets are invoked, and canvases and texts allow you to associate T) 162.9 323.31 T
(cl com-) 476.97 323.31 T
(mands with their internal objects in order to give them behaviors.) 162.9 311.31 T
1 F
(4.) 152.1 296.31 T
2 F
(Or) 162.9 296.31 T
(ganize the code for your widget in one or a few \336les that can easily be linked into) 173.26 296.31 T
(other applications besides the one you\325re writing.) 162.9 284.31 T
FMENDPAGE
%%EndPage: "328" 11
%%Page: "329" 11
612 792 0 FMBEGINPAGE
98.1 675 512.1 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
98.1 450 512.1 450 2 L
7 X
V
2 Z
0 X
N
98.1 108 512.1 126 R
7 X
V
0 10 Q
0 X
(329) 495.43 119.33 T
98.1 54 512.1 108 R
7 X
V
2 9 Q
0 X
(Copyright \251 1993 Addison-W) 152.1 102 T
(esley Publishing Company) 261.32 102 T
(, Inc.) 357.1 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 152.1 91 T
(. Any) 485.77 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 152.1 80 T
-0.34 (lisher) 152.1 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 171.58 69 P
(does not of) 152.1 58 T
(fer warranties in regard to this draft.) 191.88 58 T
1 24 Q
(Chapter 37) 152.1 605 T
-0.48 (Cr) 152.1 575 S
-0.48 (eating W) 178.68 575 S
-0.48 (indows) 267.02 575 S
98.1 135 512.1 423 R
7 X
V
2 10 Q
0 X
(This chapter presents Tk\325) 152.1 416.33 T
(s basic library procedures for creating windows. It describes the) 253.41 416.33 T
4 F
(Tk_Window) 152.1 404.18 T
2 F
( type, which is used as a token for windows, then introduces the Tk proce-) 206.07 404.18 T
(dures for creating and deleting windows. Tk provides several macros for retrieving infor-) 152.1 392.03 T
(mation about windows, which are introduced next. Then the chapter discusses what) 152.1 379.88 T
-0.29 (should be in the create procedure for a widget, using the square widget as an example. The) 152.1 367.73 P
(chapter closes with a discussion of delayed window creation. See T) 152.1 355.58 T
(able 37.1 for a sum-) 420.92 355.58 T
(mary of the procedures discussed in the chapter) 152.1 343.43 T
(.) 341.68 343.43 T
98.1 300.08 512.1 303.1 C
152.1 301.3 512.1 301.3 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 301.59 143.1 301.59 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(37.1) 117.96 307.1 T
(Tk_W) 152.1 307.1 T
(indow structures) 183.98 307.1 T
2 10 Q
(Tk uses a token of type) 152.1 283.41 T
4 F
(Tk_Window) 247.59 283.41 T
2 F
( to represent each window) 301.56 283.41 T
(. When you create a new) 405.82 283.41 T
(window Tk returns a) 152.1 271.26 T
4 F
(Tk_Window) 237.59 271.26 T
2 F
( token, and you must pass this token back to Tk when) 291.56 271.26 T
(invoking procedures to manipulate the window) 152.1 259.11 T
(. A) 339.94 259.11 T
4 F
(Tk_Window) 354.65 259.11 T
2 F
( is actually a pointer to a) 408.62 259.11 T
-0.22 (record containing information about the window) 152.1 246.96 P
-0.22 (, such as its name and current size, but Tk) 344.4 246.96 P
(hides the contents of this structure and you may not read or write its \336elds directly) 152.1 234.81 T
(. The) 480.4 234.81 T
-0.39 (only way you can manipulate a) 152.1 222.66 P
4 F
-0.93 (Tk_Window) 276.91 222.66 P
2 F
-0.39 ( is to invoke procedures and macros provided) 330.88 222.66 P
(by Tk.) 152.1 210.51 T
98.1 167.15 512.1 170.17 C
152.1 168.37 512.1 168.37 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 168.66 143.1 168.66 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(37.2) 117.96 174.17 T
(Creating Tk_W) 152.1 174.17 T
(indows) 235.96 174.17 T
2 10 Q
(Tk applications typically use two procedures for creating windows:) 152.1 150.48 T
4 F
(Tk_CreateMain-) 423.85 150.48 T
(Window) 152.1 138.33 T
2 F
( and) 188.08 138.33 T
4 F
(Tk_CreateWindowFromPath) 207.51 138.33 T
2 F
(.) 345.43 138.33 T
4 F
( Tk_CreateMainWindow) 347.93 138.33 T
2 F
( creates a) 467.87 138.33 T
44.1 351 98.1 423 C
35.1 360 197.1 414 R
7 X
0 K
V
1 9 Q
0 X
(FIGURE  37) 35.1 408 T
(T) 35.1 387 T
(ABLE  37) 40.43 387 T
26.1 351 125.1 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "329" 12
%%Page: "330" 12
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(330) 98.1 668.33 T
3 F
(Creating Windows) 431.02 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
-0.11 (new application; it\325) 152.1 290.33 P
-0.11 (s usually invoked in the main program of an application. Before invok-) 229.06 290.33 P
(ing) 152.1 278.34 T
4 F
(Tk_CreateMainWindow) 167.37 278.34 T
2 F
( you should create a T) 281.31 278.34 T
(cl interpreter to use for the applica-) 369.15 278.34 T
-0.08 (tion.) 152.1 266.34 P
4 F
-0.19 (Tk_CreateMainWindow) 172.57 266.34 P
2 F
-0.08 ( takes three ar) 286.51 266.34 P
-0.08 (guments, consisting of the interpreter plus) 341.86 266.34 P
(two strings:) 152.1 254.34 T
4 9 Q
(Tk_Window Tk_CreateMainWindow\050Tcl_Interp *interp,) 179.1 240 T
(char *screenName, char *appName\051) 201.92 230 T
2 10 Q
(The) 152.1 216.34 T
4 F
(screenName) 170.14 216.34 T
2 F
( ar) 230.11 216.34 T
(gument gives the name of the screen on which to create the main) 240.19 216.34 T
(window) 152.1 204.34 T
(. It can have any form acceptable to your X server) 183.65 204.34 T
(. For example, on most UNIX-) 383.2 204.34 T
(like systems \322) 152.1 192.34 T
4 F
(unix:0) 208.18 192.34 T
2 F
(\323 selects the default screen of display 0 on the local machine, or) 244.16 192.34 T
(\322) 152.1 180.34 T
4 F
(ginger.cs.berkeley.edu:0.0) 156.54 180.34 T
2 F
(\323 selects screen 0 of display 0 on the machine) 312.45 180.34 T
(whose network address is \322) 152.1 168.34 T
4 F
(ginger.cs.berkeley.edu) 261.46 168.34 T
2 F
(\323.) 393.39 168.34 T
4 F
(ScreenName) 402.82 168.34 T
2 F
( may be) 462.79 168.34 T
(speci\336ed as) 152.1 156.34 T
4 F
(NULL) 200.95 156.34 T
2 F
(, in which case Tk picks a default server) 224.94 156.34 T
(. On UNIX-like systems the) 385.09 156.34 T
(default server is normally determined by the) 152.1 144.34 T
4 F
(DISPLAY) 331.69 144.34 T
2 F
( environment variable.) 373.67 144.34 T
98.1 135 512.1 639 C
98.1 297 512.1 639 C
98.1 336.4 508.5 350.8 C
98.1 336.4 508.5 350.8 R
7 X
0 K
V
152.1 344.32 512.1 344.32 2 L
V
0.5 H
2 Z
0 X
N
98.1 297 512.1 639 C
98.1 313 508.5 327.4 C
98.1 313 508.5 327.4 R
7 X
0 K
V
152.1 320.92 512.1 320.92 2 L
V
0.5 H
2 Z
0 X
N
98.1 297 512.1 639 C
1 9 Q
0 X
0 K
(T) 152.1 330.4 T
(able  37.1.) 157.27 330.4 T
2 F
(A summary of basic procedures for window creation and deletion.) 200.21 330.4 T
4 F
(Tk_Window Tk_CreateMainWindow\050Tcl_Interp *interp,) 156.3 621.8 T
(char *screenName, char *appName\051) 177.87 612.8 T
2 F
-0.05 (Creates a new application and returns a token for the application\325) 228.3 603.8 P
-0.05 (s main win-) 461.95 603.8 P
-0.23 (dow) 228.3 594.8 P
-0.23 (.) 243.19 594.8 P
4 F
-0.55 (ScreenName) 247.46 594.8 P
2 F
-0.23 ( gives the screen on which to create the main window \050if) 301.38 594.8 P
4 F
-0.18 (NULL) 228.3 585.8 P
2 F
-0.07 ( then Tk picks default\051, and) 249.87 585.8 P
4 F
-0.18 (appName) 350.51 585.8 P
2 F
-0.07 ( gives a base name for the appli-) 388.26 585.8 P
(cation. If an error occurs, returns) 228.3 576.8 T
4 F
(NULL) 348.59 576.8 T
2 F
( and stores an error message in) 370.16 576.8 T
4 F
(interp->result) 228.3 567.8 T
2 F
(.) 303.79 567.8 T
4 F
(Tk_Window Tk_CreateWindowFromPath\050Tcl_Interp *interp,) 156.3 558.8 T
(Tk_Window tkwin, char *pathName, char *screenName\051) 174.27 549.8 T
2 F
(Creates a new window in) 228.3 540.8 T
4 F
(tkwin) 321.4 540.8 T
2 F
(\325) 348.36 540.8 T
(s application whose path name is) 350.86 540.8 T
4 F
(path-) 471.68 540.8 T
(Name) 228.3 531.8 T
2 F
(. If) 249.87 531.8 T
4 F
(screenName) 262.6 531.8 T
2 F
( is) 316.52 531.8 T
4 F
(NULL) 327.01 531.8 T
2 F
( the new window will be an internal win-) 348.58 531.8 T
(dow; otherwise it will be a top-level window on) 228.3 522.8 T
4 F
(screenName) 402.79 522.8 T
2 F
(. Returns a) 456.71 522.8 T
(token for the new window) 228.3 513.8 T
(. If an error occurs, returns) 322.07 513.8 T
4 F
(NULL) 420.39 513.8 T
2 F
( and stores an) 441.96 513.8 T
(error message in) 228.3 504.8 T
4 F
(interp->result) 289.94 504.8 T
2 F
(.) 365.44 504.8 T
4 F
(Tk_SetClass\050Tk_Window tkwin, char *class\051) 156.3 485.8 T
2 F
(Sets) 228.3 476.8 T
4 F
(tkwin) 245.53 476.8 T
2 F
(\325) 272.49 476.8 T
(s class to) 274.99 476.8 T
4 F
(class) 309.69 476.8 T
2 F
(.) 336.65 476.8 T
4 F
(Tk_DestroyWindow\050TkWindow tkwin\051) 156.3 457.8 T
2 F
(Destroy) 228.3 448.8 T
4 F
(tkwin) 259 448.8 T
2 F
( and all of its descendants in the window hierarchy) 285.96 448.8 T
(.) 467.84 448.8 T
4 F
(Tk_Window Tk_NameToWindow\050Tcl_Interp *interp, char *pathName,) 156.3 429.8 T
(Tk_Window tkwin\051) 177.87 420.8 T
2 F
(Returns the token for the window whose path name is) 228.3 411.8 T
4 F
(pathName) 424 411.8 T
2 F
( in the) 467.14 411.8 T
(same application as) 228.3 402.8 T
4 F
(tkwin) 300.94 402.8 T
2 F
(. If no such name exists then returns) 327.9 402.8 T
4 F
(NULL) 459.94 402.8 T
2 F
( and) 481.51 402.8 T
(stores an error message in) 228.3 393.8 T
4 F
(interp-) 323.89 393.8 T
(>result) 361.64 393.8 T
2 F
(.) 399.38 393.8 T
4 F
(Tk_MakeWindowExist\050TkWindow tkwin\051) 156.3 374.8 T
2 F
(Force the creation of the X window for) 228.3 365.8 T
4 F
(tkwin) 371.07 365.8 T
2 F
(, if it didn\325) 398.03 365.8 T
(t already exist.) 436.31 365.8 T
150.3 633.55 150.3 359.05 2 L
V
0.5 H
0 Z
N
510.3 633.55 510.3 359.05 2 L
V
N
150.05 633.8 510.55 633.8 2 L
V
N
150.05 497.8 510.55 497.8 2 L
V
0.25 H
N
150.05 469.8 510.55 469.8 2 L
V
N
150.05 441.8 510.55 441.8 2 L
V
N
150.05 386.8 510.55 386.8 2 L
V
N
150.05 358.8 510.55 358.8 2 L
V
0.5 H
N
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "330" 13
%%Page: "331" 13
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
(37.3 Setting a window\325) 98.1 668.33 T
(s class) 197.91 668.33 T
0 F
(331) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
-0.29 (The last ar) 170.1 632.33 P
-0.29 (gument to) 211.52 632.33 P
4 F
-0.7 (Tk_CreateMainWindow) 253.69 632.33 P
2 F
-0.29 ( is a name to use for the application,) 367.62 632.33 P
(such as \322) 152.1 620.05 T
4 F
(clock) 188.18 620.05 T
2 F
(\323 for a clock program or \322) 218.16 620.05 T
4 F
(mx foo.c) 321.96 620.05 T
2 F
(\323 for an editor named) 369.93 620.05 T
4 F
(mx) 457.91 620.05 T
2 F
( editing a) 469.9 620.05 T
-0 (\336le named) 152.1 607.76 P
4 F
-0.01 (foo.c) 196.51 607.76 P
2 F
-0 (. This is the name that other applications will use to send commands to) 226.49 607.76 P
-0.26 (the new application. Each application must have a unique name; if) 152.1 595.48 P
4 F
-0.63 (appName) 417.33 595.48 P
2 F
-0.26 ( is already in) 459.31 595.48 P
-0.02 (use by some other application then Tk adds a suf) 152.1 583.19 P
-0.02 (\336x like \322) 346.9 583.19 P
4 F
-0.04 ( #2) 381.84 583.19 P
2 F
-0.02 (\323 to make the name unique.) 399.79 583.19 P
(Thus the actual name of the application may be something like \322) 152.1 570.91 T
4 F
(clock #3) 409.98 570.91 T
2 F
(\323 or \322) 457.95 570.91 T
4 F
(mx) 480.15 570.91 T
(foo.c #4) 152.1 558.62 T
2 F
(\323. Y) 200.07 558.62 T
(ou can \336nd out the actual name for the application using the) 215.73 558.62 T
4 F
(Tk_Name) 457.78 558.62 T
2 F
(macro or by invoking the T) 152.1 546.34 T
(cl command \322) 261.05 546.34 T
4 F
(winfo name .) 317.12 546.34 T
2 F
(\323.) 389.08 546.34 T
4 F
-1.19 (Tk_CreateMainWindow) 170.1 534.34 P
2 F
-0.5 ( creates the application\325) 284.04 534.34 P
-0.5 (s main window) 377.2 534.34 P
-0.5 (, registers its name) 436.63 534.34 P
(so that other applications can send commands to it, and adds all of Tk\325) 152.1 522.05 T
(s commands to the) 433.58 522.05 T
-0.04 (interpreter) 152.1 509.77 P
-0.04 (. It returns the) 193.18 509.77 P
4 F
-0.09 (Tk_Window) 251.59 509.77 P
2 F
-0.04 ( token for the main window) 305.56 509.77 P
-0.04 (. If an error occurs \050e.g.) 415.48 509.77 P
4 F
(screenName) 152.1 497.48 T
2 F
( doesn\325) 212.07 497.48 T
(t exist or the X server refused to accept a connection\051 then) 241.03 497.48 T
4 F
(Tk_CreateMainWindow) 152.1 485.2 T
2 F
( returns) 266.04 485.2 T
4 F
(NULL) 298.79 485.2 T
2 F
( and leaves an error message in) 322.78 485.2 T
4 F
(interp-) 152.1 472.92 T
(>result) 194.08 472.92 T
2 F
(.) 236.05 472.92 T
4 F
-0.26 (Tk_CreateWindowFromPath) 170.1 460.92 P
2 F
-0.11 ( adds a new window to an existing application. It\325) 308.02 460.92 P
-0.11 (s) 505.82 460.92 P
(the procedure that\325) 152.1 448.63 T
(s usually called when creating new widgets and it has the following) 227.04 448.63 T
(prototype:) 152.1 436.35 T
4 9 Q
(Tk_Window Tk_CreateWindowFromPath\050Tcl_Interp *interp,) 179.1 422.01 T
(Tk_Window tkwin, char *pathName, char *screenName\051;) 201.92 411.73 T
2 10 Q
-0.19 (The) 152.1 398.06 P
4 F
-0.45 (tkwin) 169.95 398.06 P
2 F
-0.19 ( ar) 199.93 398.06 P
-0.19 (gument is a token for an existing window; its only purpose is to identify the) 209.83 398.06 P
(application in which to create the new window) 152.1 385.78 T
(.) 338.26 385.78 T
4 F
(PathName) 343.26 385.78 T
2 F
( gives the full name for the) 391.23 385.78 T
(new window) 152.1 373.49 T
(, such as \322) 202.8 373.49 T
4 F
(.a.b.c) 243.88 373.49 T
2 F
(\323. There must not already exist a window by this name,) 279.86 373.49 T
(but its parent \050for example, \322) 152.1 361.21 T
4 F
(.a.b) 267.57 361.21 T
2 F
(\323\051 must exist. If) 291.55 361.21 T
4 F
(screenName) 356.79 361.21 T
2 F
( is) 416.76 361.21 T
4 F
(NULL) 428.42 361.21 T
2 F
( then the new) 452.4 361.21 T
(window is an internal window; otherwise the new window will be a top-level window on) 152.1 348.92 T
(the indicated screen.) 152.1 336.64 T
4 F
(Tk_CreateWindowFromPath) 236.47 336.64 T
2 F
( returns a token for the new win-) 374.4 336.64 T
(dow unless an error occurs, in which case it returns) 152.1 324.35 T
4 F
(NULL) 359.44 324.35 T
2 F
( and leaves an error message in) 383.42 324.35 T
4 F
(interp-) 152.1 312.07 T
(>result) 194.08 312.07 T
2 F
(.) 236.05 312.07 T
(Tk also provides a third window-creation procedure called) 170.1 300.07 T
4 F
(Tk_CreateWindow) 406.58 300.07 T
2 F
(.) 495.88 300.07 T
(This procedure is similar to) 152.1 287.78 T
4 F
(Tk_CreateWindowFromPath) 264.53 287.78 T
2 F
( except that the new win-) 402.45 287.78 T
(dow\325) 152.1 275.5 T
(s name is speci\336ed a bit dif) 172.09 275.5 T
(ferently) 280.73 275.5 T
(. See the reference documentation for details.) 311.16 275.5 T
98.1 232.14 512.1 235.16 C
152.1 233.36 512.1 233.36 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 233.65 143.1 233.65 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(37.3) 117.96 239.16 T
(Setting a window\325) 152.1 239.16 T
(s class) 252.95 239.16 T
2 10 Q
-0.05 (The procedure) 152.1 215.47 P
4 F
-0.13 (Tk_SetClass) 212.49 215.47 P
2 F
-0.05 ( assigns a particular class name to a window) 278.45 215.47 P
-0.05 (. For example,) 454.47 215.47 P
4 9 Q
(Tk_SetClass\050tkwin, "Foo"\051;) 179.1 201.14 T
2 10 Q
(sets the class of window) 152.1 187.47 T
4 F
(tkwin) 251.76 187.47 T
2 F
( to \322) 281.74 187.47 T
4 F
(Foo) 298.95 187.47 T
2 F
(\323. Class names are used by Tk for several pur-) 316.94 187.47 T
(poses such as \336nding options in the option database and event bindings. Y) 152.1 175.19 T
(ou can use any) 447.87 175.19 T
-0.39 (string whatsoever as a class name when you invoke) 152.1 162.9 P
4 F
-0.94 (Tk_SetClass) 357.03 162.9 P
2 F
-0.39 (, but you should make) 423 162.9 P
(sure the \336rst letter is capitalized: Tk assumes in several places that uncapitalized names) 152.1 150.62 T
(are window names and capitalized names are classes.) 152.1 138.33 T
FMENDPAGE
%%EndPage: "331" 14
%%Page: "332" 14
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(332) 98.1 668.33 T
3 F
(Creating Windows) 431.02 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 623.98 512.1 627 C
152.1 625.2 512.1 625.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 625.49 143.1 625.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(37.4) 117.96 631 T
(Deleting windows) 152.1 631 T
2 10 Q
(The procedure) 152.1 607.31 T
4 F
(Tk_DestroyWindow) 212.6 607.31 T
2 F
( takes a) 308.54 607.31 T
4 F
(Tk_Window) 341.02 607.31 T
2 F
( as ar) 394.99 607.31 T
(gument and deletes the) 415.89 607.31 T
(window) 152.1 595.31 T
(. It also deletes all of the window\325) 183.65 595.31 T
(s children recursively) 319.12 595.31 T
(. Deleting the main win-) 404.51 595.31 T
(dow of an application will delete all of the windows in the application and usually causes) 152.1 583.31 T
(the application to exit.) 152.1 571.31 T
98.1 527.95 512.1 530.98 C
152.1 529.18 512.1 529.18 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 529.46 143.1 529.46 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(37.5) 117.96 534.98 T
(Basic operations on Tk_W) 152.1 534.98 T
(indows) 301.95 534.98 T
2 10 Q
(Given a textual path name for a window) 152.1 511.29 T
(,) 312.16 511.29 T
4 F
(Tk_NameToWindow) 317.16 511.29 T
2 F
( may be used to \336nd the) 407.11 511.29 T
4 F
(Tk_Window) 152.1 499.29 T
2 F
( token for the window:) 206.07 499.29 T
4 9 Q
(Tk_Window Tk_NameToWindow\050Tcl_Interp *interp, char *pathName,) 179.1 484.95 T
(Tk_Window tkwin\051;) 224.75 474.95 T
4 10 Q
-0.55 (PathName) 152.1 461.29 P
2 F
-0.23 ( is the name of the desired window) 200.07 461.29 P
-0.23 (, such as \322) 337.45 461.29 P
4 F
-0.55 (.a.b.c) 377.84 461.29 P
2 F
-0.23 (\323, and) 413.82 461.29 P
4 F
-0.55 (tkwin) 439.73 461.29 P
2 F
-0.23 ( is a token) 469.71 461.29 P
-0.01 (for any window in the application of interest \050it isn\325) 152.1 449.29 P
-0.01 (t used except to select a speci\336c appli-) 358.66 449.29 P
(cation\051. Normally) 152.1 437.29 T
4 F
(Tk_NameToWindow) 225.66 437.29 T
2 F
( returns a token for the given window) 315.61 437.29 T
(, but if no) 465.13 437.29 T
(such window exists it returns) 152.1 425.29 T
4 F
(NULL) 271.2 425.29 T
2 F
( and leaves an error message in) 295.18 425.29 T
4 F
(interp->result) 422.57 425.29 T
2 F
(.) 506.52 425.29 T
-0.2 (Tk maintains several pieces of information about each) 170.1 413.29 P
4 F
-0.48 (Tk_Window) 387.79 413.29 P
2 F
-0.2 ( and it provides a) 441.76 413.29 P
-0.07 (set of macros that you can use to access the information. See T) 152.1 401.29 P
-0.07 (able 37.2 for a summary of) 401.77 401.29 P
(all the macros. Each macro takes a) 152.1 389.29 T
4 F
(Tk_Window) 293.09 389.29 T
2 F
( as an ar) 347.06 389.29 T
(gument and returns the corre-) 379.9 389.29 T
(sponding piece of information for the window) 152.1 377.29 T
(. For example if) 335.77 377.29 T
4 F
(tkwin) 402.11 377.29 T
2 F
( is a) 432.1 377.29 T
4 F
(Tk_Window) 450.7 377.29 T
2 F
(then) 152.1 365.29 T
4 9 Q
(Tk_Width\050tkwin\051) 179.1 350.95 T
2 10 Q
-0.25 (returns an integer value giving the current width of) 152.1 337.29 P
4 F
-0.59 (tkwin) 356.12 337.29 P
2 F
-0.25 ( in pixels. Here are a few of the) 386.1 337.29 P
(more commonly used macros:) 152.1 325.29 T
2 12 Q
(\245) 152.1 310.29 T
4 10 Q
-0.99 (Tk_Width) 162.9 310.29 P
2 F
-0.41 ( and) 210.87 310.29 P
4 F
-0.99 (Tk_Height) 229.48 310.29 P
2 F
-0.41 ( return the window\325) 283.45 310.29 P
-0.41 (s dimensions; this information is used) 360.76 310.29 P
(during redisplay for purposes such as centering text.) 162.9 298.29 T
2 12 Q
(\245) 152.1 283.29 T
4 10 Q
(Tk_WindowId) 165.4 283.29 T
2 F
( returns the X identi\336er for the window; it is needed when invoking) 231.36 283.29 T
(Xlib procedures during redisplay) 162.9 271.29 T
(.) 294.1 271.29 T
2 12 Q
(\245) 152.1 256.29 T
4 10 Q
(Tk_Display) 162.9 256.29 T
2 F
( returns a pointer to Xlib\325) 222.87 256.29 T
(s) 324.19 256.29 T
4 F
(Display) 330.58 256.29 T
2 F
( structure corresponding to the) 372.55 256.29 T
(window; it is also needed when invoking Xlib procedures.) 162.9 244.29 T
(Some of the macros, like) 152.1 229.29 T
4 F
(Tk_InternalBorderWidth) 254.25 229.29 T
2 F
( and) 386.18 229.29 T
4 F
(Tk_ReqWidth) 405.61 229.29 T
2 F
(, are only) 471.57 229.29 T
(used by geometry managers \050see Chapter 43\051 and others such as) 152.1 217.29 T
4 F
(Tk_Visual) 410.51 217.29 T
2 F
( are rarely) 464.48 217.29 T
(used by anyone.) 152.1 205.29 T
FMENDPAGE
%%EndPage: "332" 15
%%Page: "333" 15
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
(37.6 Create procedures) 98.1 668.33 T
0 F
(333) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 202.78 512.1 205.8 C
152.1 204 512.1 204 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 204.29 143.1 204.29 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(37.6) 117.96 209.8 T
(Create procedures) 152.1 209.8 T
2 10 Q
(The create procedure for a widget must do \336ve things: create a new) 152.1 186.11 T
4 F
(Tk_Window) 423.82 186.11 T
2 F
(; create) 477.79 186.11 T
-0.22 (and initialize a widget record; set up event handlers; create a widget command for the wid-) 152.1 174.11 P
(get; and process con\336guration options for the widget. The create procedure should be the) 152.1 162.11 T
(command procedure for a T) 152.1 150.11 T
(cl command named after the widget\325) 262.97 150.11 T
(s class, and its) 409.25 150.11 T
4 F
(client-) 468.94 150.11 T
98.1 135 512.1 639 C
98.1 217.8 512.1 639 C
98.1 278.6 512.1 293 C
98.1 278.6 512.1 293 R
7 X
0 K
V
152.1 286.52 512.1 286.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 217.8 512.1 639 C
1 9 Q
0 X
0 K
-0.22 (T) 152.1 272.6 P
-0.22 (able  37.2.) 157.27 272.6 P
2 F
-0.22 (Macros de\336ned by Tk for retrieving window state. Each macro takes a) 199.33 272.6 P
4 F
-0.53 (Tk_Window) 452.03 272.6 P
2 F
-0.22 ( as) 500.56 272.6 P
-0.12 (ar) 152.1 263.6 P
-0.12 (gument and returns a result whose type is given in the second column. All of these macros are fast) 158.92 263.6 P
-0.08 (\050they simply return \336elds from Tk\325) 152.1 254.6 P
-0.08 (s internal structures and don\325) 276.77 254.6 P
-0.08 (t require any interactions with the X) 380.62 254.6 P
98.1 228.2 512.1 242.6 C
98.1 228.2 512.1 242.6 R
7 X
0 K
V
152.1 236.12 512.1 236.12 2 L
V
0.5 H
2 Z
0 X
N
98.1 217.8 512.1 639 C
2 9 Q
0 X
0 K
(server\051.) 152.1 245.6 T
(Macro Name) 105.58 627 T
(Result T) 236.22 627 T
(ype) 266.3 627 T
(Meaning) 358.22 627 T
4 F
(Tk_Attributes) 105.58 614 T
(XSetWindowAttributes) 236.22 614 T
( *) 308.22 605 T
2 F
(W) 358.22 612 T
(indow attributes such as border pixel) 366.34 612 T
(and cursor) 358.22 603 T
(.) 395.41 603 T
4 F
(Tk_Changes) 105.58 590 T
(XWindowChanges *) 236.22 590 T
2 F
(W) 358.22 590 T
(indow position, size, stacking order) 366.34 590 T
(.) 493.66 590 T
4 F
(Tk_Class) 105.58 577 T
(Tk_Uid) 236.22 577 T
2 F
(Name of window\325) 358.22 577 T
(s class.) 423.11 577 T
4 F
(Tk_Colormap) 105.58 564 T
(Colormap) 236.22 564 T
2 F
(Colormap for window) 358.22 564 T
(.) 437.51 564 T
4 F
(Tk_Depth) 105.58 551 T
(int) 236.22 551 T
2 F
(Bits per pixel.) 358.22 551 T
4 F
(Tk_Display) 105.58 538 T
(Display) 236.22 538 T
2 F
(X display for window) 358.22 538 T
(.) 436.26 538 T
4 F
(Tk_Height) 105.58 525 T
(int) 236.22 525 T
2 F
(Current height of window in pixels.) 358.22 525 T
4 F
(Tk_InternalBorderWidth) 105.58 512 T
(int) 236.22 512 T
2 F
(W) 358.22 512 T
(idth of internal border in pixels.) 366.34 512 T
4 F
(Tk_IsMapped) 105.58 499 T
(int) 236.22 499 T
2 F
(1 if window mapped, 0 otherwise.) 358.22 499 T
4 F
(Tk_IsTopLevel) 105.58 486 T
(int) 236.22 486 T
2 F
(1 if top-level, 0 if internal.) 358.22 486 T
4 F
(Tk_Name) 105.58 473 T
(Tk_Uid) 236.22 473 T
2 F
(Name within parent. For main window) 358.22 473 T
(,) 497.42 473 T
(returns application name.) 358.22 464 T
4 F
(Tk_Parent) 105.58 451 T
(Tk_Window) 236.22 451 T
2 F
(Parent, or) 358.22 451 T
4 F
(NULL) 395.41 451 T
2 F
( for main window) 416.98 451 T
(.) 480.54 451 T
4 F
(Tk_PathName) 105.58 438 T
(char *) 236.22 438 T
2 F
(Full path name of window) 358.22 438 T
(.) 452.49 438 T
4 F
(Tk_ReqWidth) 105.58 425 T
(int) 236.22 425 T
2 F
(Requested width in pixels.) 358.22 425 T
4 F
(Tk_ReqHeight) 105.58 412 T
(int) 236.22 412 T
2 F
(Requested height in pixels.) 358.22 412 T
4 F
(Tk_Screen) 105.58 399 T
(Screen *) 236.22 399 T
2 F
(X Screen for window) 358.22 399 T
(.) 434.75 399 T
4 F
(Tk_ScreenNumber) 105.58 386 T
(int) 236.22 386 T
2 F
(Index of window\325) 358.22 386 T
(s screen.) 422.12 386 T
4 F
(Tk_Visual) 105.58 373 T
(Visual *) 236.22 373 T
2 F
-0.09 (Information about window\325) 358.22 373 P
-0.09 (s visual char-) 456.88 373 P
(acteristics.) 358.22 364 T
4 F
(Tk_Width) 105.58 351 T
(int) 236.22 351 T
2 F
(Current width of window in pixels.) 358.22 351 T
4 F
(Tk_WindowId) 105.58 338 T
(Window) 236.22 338 T
2 F
(X identi\336er for window) 358.22 338 T
(.) 442.75 338 T
4 F
(Tk_X) 105.58 325 T
(int) 236.22 325 T
2 F
(X-coordinate within parent window) 358.22 325 T
(.) 486.18 325 T
4 F
(Tk_Y) 105.58 312 T
(int) 236.22 312 T
2 F
(Y) 358.22 312 T
(-coordinate within parent window) 363.71 312 T
(.) 485.18 312 T
99.58 634.75 99.58 307.25 2 L
V
0.5 H
0 Z
N
230.22 635.25 230.22 306.75 2 L
V
0.25 H
N
352.22 635.25 352.22 306.75 2 L
V
N
510.62 634.75 510.62 307.25 2 L
V
0.5 H
N
99.33 635 510.87 635 2 L
V
N
99.83 623.25 510.37 623.25 2 L
V
N
99.83 620.75 510.37 620.75 2 L
V
N
99.33 598 510.87 598 2 L
V
0.25 H
N
99.33 585 510.87 585 2 L
V
N
99.33 572 510.87 572 2 L
V
N
99.33 559 510.87 559 2 L
V
N
99.33 546 510.87 546 2 L
V
N
99.33 533 510.87 533 2 L
V
N
99.33 520 510.87 520 2 L
V
N
99.33 507 510.87 507 2 L
V
N
99.33 494 510.87 494 2 L
V
N
99.33 481 510.87 481 2 L
V
N
99.33 459 510.87 459 2 L
V
N
99.33 446 510.87 446 2 L
V
N
99.33 433 510.87 433 2 L
V
N
99.33 420 510.87 420 2 L
V
N
99.33 407 510.87 407 2 L
V
N
99.33 394 510.87 394 2 L
V
N
99.33 381 510.87 381 2 L
V
N
99.33 359 510.87 359 2 L
V
N
99.33 346 510.87 346 2 L
V
N
99.33 333 510.87 333 2 L
V
N
99.33 320 510.87 320 2 L
V
N
99.33 307 510.87 307 2 L
V
0.5 H
N
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "333" 16
%%Page: "334" 16
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(334) 98.1 668.33 T
3 F
(Creating Windows) 431.02 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
4 10 Q
0 X
-0.35 (Data) 152.1 632.33 P
2 F
-0.14 ( ar) 176.09 632.33 P
-0.14 (gument should be the) 186.03 632.33 P
4 F
-0.35 (Tk_Window) 273.73 632.33 P
2 F
-0.14 ( token for the main window of the application) 327.7 632.33 P
(\050this is needed in order to create a new) 152.1 620.33 T
4 F
(Tk_Window) 308.91 620.33 T
2 F
( in the application\051.) 362.88 620.33 T
-0.4 (Figure 37.1 shows the code for) 170.1 608.33 P
4 F
-0.96 (SquareCmd) 293.99 608.33 P
2 F
-0.4 (, which is the create procedure for square) 347.96 608.33 P
(widgets. After checking its ar) 152.1 596.33 T
(gument count,) 269.89 596.33 T
4 F
(SquareCmd) 329.57 596.33 T
2 F
( creates a new window for the) 383.54 596.33 T
-0.08 (widget and invokes) 152.1 584.33 P
4 F
-0.19 (Tk_SetClass) 232.08 584.33 P
2 F
-0.08 ( to assign it a class of \322) 298.05 584.33 P
4 F
-0.19 (Square) 389.92 584.33 P
2 F
-0.08 (\323. The middle part of) 425.9 584.33 P
4 F
(SquareCmd) 152.1 572.33 T
2 F
( allocates a widget record for the new widget and initializes it. The widget) 206.07 572.33 T
(record for squares has the following de\336nition:) 152.1 560.33 T
4 9 Q
(typedef struct {) 179.1 546 T
(Tk_Window tkwin;) 201.92 536 T
(Display *display;) 201.92 526 T
(Tcl_Interp *interp;) 201.92 516 T
(int x, y;) 201.92 506 T
(int size;) 201.92 496 T
(int borderWidth;) 201.92 486 T
(Tk_3DBorder bgBorder;) 201.92 476 T
(Tk_3DBorder fgBorder;) 201.92 466 T
(int relief;) 201.92 456 T
(GC gc;) 201.92 446 T
(int updatePending;) 201.92 436 T
(} Square;) 179.1 426 T
2 10 Q
(The \336rst \336eld of the record is the) 152.1 412.33 T
4 F
(Tk_Window) 285.9 412.33 T
2 F
( for the widget. The next \336eld,) 339.87 412.33 T
4 F
(display) 463.95 412.33 T
2 F
(,) 505.28 412.33 T
(identi\336es the X display for the widget \050it\325) 152.1 400.33 T
(s needed during cleanup after the widget is) 317.28 400.33 T
-0.07 (deleted\051.) 152.1 388.33 P
4 F
-0.16 (Interp) 189.22 388.33 P
2 F
-0.07 ( holds a pointer to the interpreter for the application. The) 225.2 388.33 P
4 F
-0.16 (x) 454.29 388.33 P
2 F
-0.07 ( and) 460.29 388.33 P
4 F
-0.16 (y) 479.58 388.33 P
2 F
-0.07 ( \336elds) 485.58 388.33 P
(give the position of the upper) 152.1 376.33 T
(-left corner of the square relative to the upper) 269.33 376.33 T
(-left corner of) 450.64 376.33 T
-0.07 (the window) 152.1 364.33 P
-0.07 (, and the) 198.3 364.33 P
4 F
-0.17 (size) 234.73 364.33 P
2 F
-0.07 ( \336eld speci\336es the square\325) 258.71 364.33 P
-0.07 (s size in pixels. The last six \336elds are) 361.7 364.33 P
(used for displaying the widget; they\325ll be discussed in Chapters 38 and 40.) 152.1 352.33 T
(After initializing the new widget record) 170.1 340.33 T
4 F
(SquareCmd) 331.09 340.33 T
2 F
( calls) 385.06 340.33 T
4 F
(Tk_Cre-) 408.38 340.33 T
(ateEventHandler) 152.1 328.33 T
2 F
(; this arranges for) 242.05 328.33 T
4 F
(SquareEventProc) 314.77 328.33 T
2 F
( to be called whenever the) 404.72 328.33 T
(widget needs to be redrawn or when various other events occur) 152.1 316.33 T
(, such as deleting its win-) 404.27 316.33 T
(dow or changing its size; events will be discussed in more detail in Chapter 39. Next) 152.1 304.33 T
4 F
(SquareCmd) 152.1 292.33 T
2 F
( calls) 206.07 292.33 T
4 F
(Tcl_CreateCommand) 229.39 292.33 T
2 F
( to create the widget command for the wid-) 331.33 292.33 T
(get. The widget\325) 152.1 280.33 T
(s name is the name of the command,) 217.33 280.33 T
4 F
(SquareWidgetCmd) 365.84 280.33 T
2 F
( is the com-) 455.79 280.33 T
-0.28 (mand procedure, and a pointer to the widget record is the) 152.1 268.33 P
4 F
-0.67 (clientData) 379.97 268.33 P
2 F
-0.28 ( for the command) 439.93 268.33 P
(\050using a pointer to the widget record as) 152.1 256.33 T
4 F
(clientData) 310.87 256.33 T
2 F
( allows a single C procedure to) 370.84 256.33 T
-0.16 (implement the widget commands for all square widgets;) 152.1 244.33 P
4 F
-0.38 (SquareWidgetCommand) 377.93 244.33 P
2 F
-0.16 ( will) 491.86 244.33 P
(receive a dif) 152.1 232.33 T
(ferent) 201.31 232.33 T
4 F
(clientData) 227.12 232.33 T
2 F
( ar) 287.09 232.33 T
(gument depending on which widget command was) 297.17 232.33 T
(invoked\051. Then) 152.1 220.33 T
4 F
(SquareCmd) 215.66 220.33 T
2 F
( calls) 269.64 220.33 T
4 F
(Conf) 292.95 220.33 T
(igureSquare) 316.94 220.33 T
2 F
( to process any con\336guration) 382.9 220.33 T
(options speci\336ed as ar) 152.1 208.33 T
(guments to the command; Chapter 38 describes how the con\336gura-) 240.47 208.33 T
(tion options are handled. If an error occurs in processing the con\336guration options then) 152.1 196.33 T
4 F
(SquareCmd) 152.1 184.33 T
2 F
( destroys the window and returns an error) 206.07 184.33 T
(. Otherwise it returns success with) 371.78 184.33 T
(the widget\325) 152.1 172.33 T
(s path name as result.) 196.79 172.33 T
FMENDPAGE
%%EndPage: "334" 17
%%Page: "335" 17
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
(37.6 Create procedures) 98.1 668.33 T
0 F
(335) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 135 512.1 639 C
98.1 135 512.1 639 C
98.1 117 512.1 639 R
7 X
0 K
V
4 9 Q
0 X
(int SquareCmd\050ClientData clientData, Tcl_Interp *interp,) 152.1 633 T
(int argc, char *argv[]\051 {) 192.35 623 T
(Tk_Window main = \050Tk_Window\051 clientData;) 172.19 613 T
(Square *squarePtr;) 172.19 603 T
(Tk_Window tkwin;) 172.19 593 T
(if \050argc < 2\051 {) 172.19 573 T
(Tcl_AppendResult\050interp, "wrong # args: should be \134"",) 192.35 563 T
(argv[0], " pathName ?options?\134"", \050char *\051 NULL\051;) 232.52 553 T
(return TCL_ERROR;) 192.35 543 T
(}) 172.19 533 T
(tkwin = Tk_CreateWindowFromPath\050interp, main, argv[1],) 172.19 513 T
(\050char *\051 NULL\051;) 212.44 503 T
(if \050tkwin == NULL\051 {) 172.19 493 T
(return TCL_ERROR;) 192.35 483 T
(}) 172.19 473 T
(Tk_SetClass\050tkwin, "Square"\051;) 172.19 463 T
(squarePtr = \050Square *\051 malloc\050sizeof\050Square\051\051;) 172.19 443 T
(squarePtr->tkwin = tkwin;) 172.19 433 T
(squarePtr->display = Tk_Display\050tkwin\051;) 172.19 423 T
(squarePtr->interp = interp;) 172.19 413 T
(squarePtr->x = 0;) 172.19 403 T
(squarePtr->y = 0;) 172.19 393 T
(squarePtr->size = 20;) 172.19 383 T
(squarePtr->bgBorder = NULL;) 172.19 373 T
(squarePtr->fgBorder = NULL;) 172.19 363 T
(squarePtr->gc = None;) 172.19 353 T
(squarePtr->updatePending = 0;) 172.19 343 T
(Tk_CreateEventHandler\050tkwin,) 172.19 323 T
(ExposureMask|StructureNotifyMask, SquareEventProc,) 212.44 313 T
(\050ClientData\051 squarePtr\051;) 212.44 303 T
(Tcl_CreateCommand\050interp, Tk_PathName\050tkwin\051,) 172.19 293 T
(SquareWidgetCmd, \050ClientData squarePtr\051,) 192.35 283 T
(\050Tcl_CmdDeleteProc *\051 NULL\051;) 192.35 273 T
(if \050Conf) 172.19 263 T
(igureSquare\050interp, squarePtr, argc-2, argv+2, 0\051) 215.33 263 T
(!= TCL_OK\051 {) 212.44 253 T
(Tk_DestroyWindow\050squarePtr->tkwin\051;) 192.35 243 T
(return TCL_ERROR;) 192.35 233 T
(}) 172.19 223 T
(interp->result = Tk_PathName\050tkwin\051;) 172.19 213 T
(return TCL_OK;) 172.19 203 T
(}) 152.1 193 T
98.1 171.6 512.1 186 C
98.1 171.6 512.1 186 R
7 X
0 K
V
152.1 179.52 512.1 179.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 135 512.1 639 C
1 9 Q
0 X
0 K
(Figur) 152.1 165.6 T
(e  37.1.) 173.41 165.6 T
2 F
(The create procedure for square widgets. This procedure is the command procedure) 204.36 165.6 T
98.1 139.2 512.1 153.6 C
98.1 139.2 512.1 153.6 R
7 X
0 K
V
152.1 147.12 512.1 147.12 2 L
V
0.5 H
2 Z
0 X
N
98.1 135 512.1 639 C
2 9 Q
0 X
0 K
(for the) 152.1 156.6 T
4 F
(square) 178.06 156.6 T
2 F
( command.) 210.41 156.6 T
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "335" 18
%%Page: "336" 18
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(336) 98.1 668.33 T
3 F
(Creating Windows) 431.02 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 623.98 512.1 627 C
152.1 625.2 512.1 625.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 625.49 143.1 625.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(37.7) 117.96 631 T
(Delayed window creation) 152.1 631 T
4 10 Q
(Tk_CreateMainWindow) 152.1 607.31 T
2 F
( and) 266.04 607.31 T
4 F
(Tk_CreateWindowFromPath) 285.47 607.31 T
2 F
( create the Tk data) 423.39 607.31 T
-0.27 (structures for a window) 152.1 595.31 P
-0.27 (, but they do not communicate with the X server to create an actual) 245.28 595.31 P
(X window) 152.1 583.31 T
(. If you create a) 193.37 583.31 T
4 F
(Tk_Window) 258.3 583.31 T
2 F
( and immediately fetch its X window identi\336er) 312.27 583.31 T
-0.21 (using) 152.1 571.31 P
4 F
-0.5 (Tk_WindowId) 176.05 571.31 P
2 F
-0.21 (, the result will be) 242.01 571.31 P
4 F
-0.5 (None) 315.37 571.31 P
2 F
-0.21 (. Tk doesn\325) 339.36 571.31 P
-0.21 (t normally create the X window) 384 571.31 P
(for a) 152.1 559.31 T
4 F
(Tk_Window) 173.19 559.31 T
2 F
( until the window is mapped, which is normally done by a geometry) 227.16 559.31 T
(manager \050see Chapter 43\051. The reason for delaying window creation is performance.) 152.1 547.31 T
(When a) 152.1 535.31 T
4 F
(Tk_Window) 185.4 535.31 T
2 F
( is initially created, all of its attributes are set to default values.) 239.37 535.31 T
-0.13 (Many of these attributes will be modi\336ed almost immediately when the widget con\336gures) 152.1 523.31 P
-0.13 (itself. It\325) 152.1 511.31 P
-0.13 (s more ef) 185.84 511.31 P
-0.13 (\336cient to delay the window\325) 222.59 511.31 P
-0.13 (s creation until all of its attributes have been) 333.67 511.31 P
(set, rather than \336rst creating the window and then asking the X server to modify the) 152.1 499.31 T
(attributes later) 152.1 487.31 T
(.) 209.01 487.31 T
(Delayed window creation is normally invisible to widgets, since the only time a wid-) 170.1 475.31 T
-0.04 (get needs to know the X identi\336er for a window is when it invokes Xlib procedures to dis-) 152.1 463.31 P
(play it. This doesn\325) 152.1 451.31 T
(t happen until after the window has been mapped, so the X window) 229.1 451.31 T
(will have been created by then. If for some reason you should need the X window identi-) 152.1 439.31 T
(\336er before a) 152.1 427.31 T
4 F
(Tk_Window) 202.88 427.31 T
2 F
( has been mapped, you can invoke) 256.85 427.31 T
4 F
(Tk_MakeWindowExist) 396.75 427.31 T
2 F
(:) 504.69 427.31 T
4 9 Q
(void Tk_MakeWindowExist\050tkwin\051;) 179.1 412.98 T
2 10 Q
(This forces the X window for) 152.1 399.31 T
4 F
(tkwin) 272.56 399.31 T
2 F
( to be created immediately if it hasn\325) 302.55 399.31 T
(t been created) 449.21 399.31 T
(yet. Once) 152.1 387.31 T
4 F
(Tk_MakeWindowExist) 192.9 387.31 T
2 F
( returns,) 300.84 387.31 T
4 F
(Tk_WindowId) 336.09 387.31 T
2 F
( can be used to retrieve the) 402.05 387.31 T
4 F
(Window) 152.1 375.31 T
2 F
( token for it.) 188.08 375.31 T
FMENDPAGE
%%EndPage: "336" 19
%%Page: "337" 19
612 792 0 FMBEGINPAGE
98.1 675 512.1 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
98.1 450 512.1 450 2 L
7 X
V
2 Z
0 X
N
98.1 108 512.1 126 R
7 X
V
0 10 Q
0 X
(337) 495.43 119.33 T
98.1 54 512.1 108 R
7 X
V
2 9 Q
0 X
(Copyright \251 1993 Addison-W) 152.1 102 T
(esley Publishing Company) 261.32 102 T
(, Inc.) 357.1 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 152.1 91 T
(. Any) 485.77 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 152.1 80 T
-0.34 (lisher) 152.1 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 171.58 69 P
(does not of) 152.1 58 T
(fer warranties in regard to this draft.) 191.88 58 T
1 24 Q
(Chapter 38) 152.1 605 T
-0.48 (Con\336guring W) 152.1 575 S
-0.48 (idgets) 299.86 575 S
98.1 135 512.1 423 R
7 X
V
2 10 Q
0 X
-0.2 (The phrase \322con\336guring a widget\323 refers to all of the setup that must be done prior to actu-) 152.1 416.33 P
-0.28 (ally drawing the widget\325) 152.1 404.22 P
-0.28 (s contents on the screen. A widget is con\336gured initially as part of) 248.7 404.22 P
-0.32 (creating it, and it may be recon\336gured by invoking its widget command. One of the lar) 152.1 392.1 P
-0.32 (gest) 493.82 392.1 P
(components of con\336guring a widget is processing con\336guration options such as) 152.1 379.98 T
(\322) 152.1 367.87 T
4 F
(-) 156.54 367.87 T
(borderwidth 1m) 162.53 367.87 T
2 F
(\323. For each option the textual value must be translated to an inter-) 246.49 367.87 T
(nal form suitable for use in the widget. For example, distances speci\336ed in \337oating-point) 152.1 355.75 T
(millimeters must be translated to integer pixel values and font names must be mapped to) 152.1 343.64 T
(corresponding) 152.1 331.52 T
4 F
(XFontStruct) 211.78 331.52 T
2 F
( structures. Con\336guring a widget also includes other tasks) 277.74 331.52 T
(such as preparing X graphics contexts to use when drawing the widget and setting) 152.1 319.4 T
(attributes of the widget\325) 152.1 307.29 T
(s window) 247.32 307.29 T
(, such as its background color) 285.26 307.29 T
(.) 403.51 307.29 T
(This chapter describes the Tk library procedures for con\336guring widgets, and it pre-) 170.1 295.29 T
-0.42 (sents the square widget\325) 152.1 283.17 P
-0.42 (s con\336gure procedure and widget command procedure. Chapter 40) 246.62 283.17 P
(will show how to draw a widget once con\336guration is complete.) 152.1 271.05 T
98.1 227.7 512.1 230.72 C
152.1 228.92 512.1 228.92 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 229.21 143.1 229.21 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(38.1) 117.96 234.72 T
(Tk_Con\336gureW) 152.1 234.72 T
(idget) 240.61 234.72 T
2 10 Q
(Tk provides three library procedures,) 152.1 211.03 T
4 F
(Tk_Conf) 303.09 211.03 T
(igureWidget) 345.06 211.03 T
2 F
(,) 411.03 211.03 T
4 F
(Tk_Conf) 416.02 211.03 T
(igure-) 458 211.03 T
(Info) 152.1 198.91 T
2 F
(, and) 176.09 198.91 T
4 F
(Tk_FreeOptions) 198.01 198.91 T
2 F
(, that do most of the work of processing con\336guration) 281.97 198.91 T
-0.28 (options \050see T) 152.1 186.8 P
-0.28 (able 38.1\051. T) 207.47 186.8 P
-0.28 (o use these procedures you \336rst create a) 257.29 186.8 P
5 F
-0.28 (con\336guration table) 416.6 186.8 P
2 F
-0.28 ( that) 492.67 186.8 P
-0.24 (describes all of the con\336guration options supported by your new widget class. When creat-) 152.1 174.68 P
(ing a new widget, you pass this table to) 152.1 162.57 T
4 F
(Tk_Conf) 312 162.57 T
(igureWidget) 353.98 162.57 T
2 F
( along with) 419.94 162.57 T
4 F
(argc) 467.42 162.57 T
2 F
(/) 491.4 162.57 T
4 F
(argv) 152.1 150.45 T
2 F
( information describing the con\336guration options \050i.e. all the ar) 176.09 150.45 T
(guments in the cre-) 427.69 150.45 T
-0.09 (ation command after the widget name\051. Y) 152.1 138.33 P
-0.09 (ou also pass in a pointer to the widget record for) 317.39 138.33 P
44.1 351 98.1 423 C
35.1 360 197.1 414 R
7 X
0 K
V
1 9 Q
0 X
(FIGURE  38) 35.1 408 T
(T) 35.1 387 T
(ABLE  38) 40.43 387 T
26.1 351 125.1 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "337" 20
%%Page: "338" 20
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(338) 98.1 668.33 T
3 F
(Con\336guring Widgets) 422.12 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
-0.37 (the widget.) 152.1 297.54 P
4 F
-0.89 (Tk_Conf) 198.27 297.54 P
-0.89 (igureWidget) 240.25 297.54 P
2 F
-0.37 ( processes each option speci\336ed in) 306.21 297.54 P
4 F
-0.89 (argv) 444.45 297.54 P
2 F
-0.37 ( according) 468.43 297.54 P
(to the information in the con\336guration table, converting string values to appropriate inter-) 152.1 285.54 T
-0.37 (nal forms, allocating resources such as fonts and colors if necessary) 152.1 273.53 P
-0.37 (, and storing the results) 418.42 273.53 P
-0.11 (into the widget record. For options that aren\325) 152.1 261.53 P
-0.11 (t explicitly speci\336ed in) 330.49 261.53 P
4 F
-0.26 (argv) 423.9 261.53 P
2 F
-0.11 (,) 447.24 261.53 P
4 F
-0.26 (Tk_Conf) 452.13 261.53 P
-0.26 (ig-) 494.11 261.53 P
(ureWidget) 152.1 249.53 T
2 F
( checks the option database to see if a value is speci\336ed there. For options) 206.07 249.53 T
(that still haven\325) 152.1 237.53 T
(t been set,) 214.11 237.53 T
4 F
(Tk_Conf) 256.85 237.53 T
(igureWidget) 298.83 237.53 T
2 F
( uses default values speci\336ed in the) 364.79 237.53 T
(table.) 152.1 225.53 T
(When the) 170.1 213.53 T
4 F
(conf) 211.18 213.53 T
(igure) 235.16 213.53 T
2 F
( widget command is invoked to change options, you call) 265.15 213.53 T
4 F
(Tk_Conf) 152.1 201.53 T
(igureWidget) 194.08 201.53 T
2 F
( again with the) 260.04 201.53 T
4 F
(argc) 321.67 201.53 T
2 F
(/) 345.65 201.53 T
4 F
(argv) 348.43 201.53 T
2 F
( information describing the new) 372.42 201.53 T
(option values.) 152.1 189.53 T
4 F
(Tk_Conf) 210.68 189.53 T
(igureWidget) 252.65 189.53 T
2 F
( will process the ar) 318.62 189.53 T
(guments according to the) 393.94 189.53 T
(table and modify the information in the widget record accordingly) 152.1 177.53 T
(. When the) 415.98 177.53 T
4 F
(conf) 462.06 177.53 T
(ig-) 486.05 177.53 T
(ure) 152.1 165.53 T
2 F
( widget command is invoked to read out the current settings of options, you call) 170.09 165.53 T
4 F
(Tk_Conf) 152.1 153.53 T
(igureInfo) 194.08 153.53 T
2 F
(. It generates a T) 248.05 153.53 T
(cl result describing one or all of the widget\325) 314.23 153.53 T
(s) 488.55 153.53 T
98.1 135 512.1 639 C
98.1 304.2 512.1 639 C
98.1 341 508.5 355.4 C
98.1 341 508.5 355.4 R
7 X
0 K
V
152.1 348.92 512.1 348.92 2 L
V
0.5 H
2 Z
0 X
N
98.1 304.2 512.1 639 C
98.1 317.6 508.5 332 C
98.1 317.6 508.5 332 R
7 X
0 K
V
152.1 325.52 512.1 325.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 304.2 512.1 639 C
1 9 Q
0 X
0 K
(T) 152.1 335 T
(able  38.1.) 157.27 335 T
2 F
(A summary of) 200.21 335 T
4 F
(Tk_Conf) 254.38 335 T
(igureWidget) 292.12 335 T
2 F
( and related procedures and macros.) 351.44 335 T
4 F
(int Tk_Conf) 156.3 625.4 T
(igureWidget\050Tcl_Interp *interp, Tk_Window tkwin,) 215.62 625.4 T
(Tk_Conf) 177.87 616.4 T
(igSpec *specs, int argc, char *argv[], char *widgRec,) 215.62 616.4 T
(int f) 177.87 607.4 T
(lags\051) 204.83 607.4 T
2 F
-0.21 (Processes a set of ar) 228.3 598.4 P
-0.21 (guments from a T) 299.67 598.4 P
-0.21 (cl command \050) 362.55 598.4 P
4 F
-0.51 (argc) 411.55 598.4 P
2 F
-0.21 ( and) 433.12 598.4 P
4 F
-0.51 (argv) 450.17 598.4 P
2 F
-0.21 (\051 using a) 471.74 598.4 P
(table of allowable con\336guration options \050) 228.3 589.4 T
4 F
(specs) 376.83 589.4 T
2 F
(\051 and sets the appropriate) 403.79 589.4 T
(\336els of a widget record \050) 228.3 580.4 T
4 F
(widgRec) 316.4 580.4 T
2 F
(\051.) 354.15 580.4 T
4 F
(Tkwin) 361.64 580.4 T
2 F
( is the widget\325) 388.6 580.4 T
(s window) 439.28 580.4 T
(. Nor-) 473.4 580.4 T
(mally returns) 228.3 571.4 T
4 F
(TCL_OK) 278.23 571.4 T
2 F
(; if an error occurs, returns) 310.58 571.4 T
4 F
(TCL_ERROR) 408.66 571.4 T
2 F
( and leaves) 457.19 571.4 T
(an error message in) 228.3 562.4 T
4 F
(interp->result) 300.67 562.4 T
2 F
(. Flags is normally 0 or) 376.17 562.4 T
4 F
(TK_CON-) 461.8 562.4 T
(FIG_ARGV_ONLY) 228.3 553.4 T
2 F
( \050see reference documentation for other possibilities\051.) 298.4 553.4 T
4 F
(int Tk_Conf) 156.3 534.4 T
(igureInfo\050Tcl_Interp *interp, Tk_Window tkwin,) 215.62 534.4 T
(Tk_Conf) 177.87 525.4 T
(igSpec *specs, char *widgRec, char * argvName, f) 215.62 525.4 T
(lags\051) 474.45 525.4 T
2 F
(Finds the con\336guration option in) 228.3 516.4 T
4 F
(specs) 348.39 516.4 T
2 F
( whose command-line name is) 375.35 516.4 T
4 F
(argvName) 228.3 507.4 T
2 F
(, locates the value of that option in) 271.44 507.4 T
4 F
(widgRec) 398 507.4 T
2 F
(, and generates in) 435.75 507.4 T
4 F
(interp->result) 228.3 498.4 T
2 F
( a list describing that con\336guration option. If) 303.79 498.4 T
4 F
(argvName) 228.3 489.4 T
2 F
( is) 271.44 489.4 T
4 F
(NULL) 281.93 489.4 T
2 F
(, generates a list of lists describing all of the options in) 303.5 489.4 T
4 F
-0.14 (specs) 228.3 480.4 P
2 F
-0.06 (. Normally returns) 255.26 480.4 P
4 F
-0.14 (TCL_OK) 323.48 480.4 P
2 F
-0.06 (; if an error occurs, returns) 355.84 480.4 P
4 F
-0.14 (TCL_ERROR) 453.58 480.4 P
2 F
(and leaves an error message in) 228.3 471.4 T
4 F
(interp->result) 340.61 471.4 T
2 F
(.) 416.1 471.4 T
4 F
(Flags) 420.6 471.4 T
2 F
( is normally 0) 447.56 471.4 T
(\050see the reference documentation for other possibilities\051.) 228.3 462.4 T
4 F
(Tk_FreeOptions\050Tk_Conf) 156.3 443.4 T
(igSpec *specs, char *widgRec,) 274.93 443.4 T
(Display *display, int f) 177.87 434.4 T
(lags\051) 301.9 434.4 T
2 F
(Frees up any resources in) 228.3 425.4 T
4 F
(widgRec) 321.89 425.4 T
2 F
( that are used by) 359.64 425.4 T
4 F
(specs) 420.79 425.4 T
2 F
(.) 447.76 425.4 T
4 F
(Display) 452.25 425.4 T
2 F
(must be the widget\325) 228.3 416.4 T
(s display) 298.95 416.4 T
(.) 330.07 416.4 T
4 F
(Flags) 334.57 416.4 T
2 F
( is normally 0 but can be used to select) 361.53 416.4 T
(particular entries in) 228.3 407.4 T
4 F
(specs) 300.43 407.4 T
2 F
( \050see reference documentation for details\051.) 327.39 407.4 T
4 F
(int Tk_Offset\050type, f) 156.3 388.4 T
(ield\051) 269.54 388.4 T
2 F
-0.11 (This is a macro that returns the of) 228.3 379.4 P
-0.11 (fset of a \336eld named) 348.42 379.4 P
4 F
-0.26 (f) 423.5 379.4 P
-0.26 (ield) 428.89 379.4 P
2 F
-0.11 ( within a struc-) 450.46 379.4 P
(ture whose type is) 228.3 370.4 T
4 F
(type) 295.7 370.4 T
2 F
(. Used when creating con\336guration tables.) 317.27 370.4 T
150.3 637.15 150.3 363.65 2 L
V
0.5 H
0 Z
N
510.3 637.15 510.3 363.65 2 L
V
N
150.05 637.4 510.55 637.4 2 L
V
N
150.05 546.4 510.55 546.4 2 L
V
0.25 H
N
150.05 455.4 510.55 455.4 2 L
V
N
150.05 400.4 510.55 400.4 2 L
V
N
150.05 363.4 510.55 363.4 2 L
V
0.5 H
N
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "338" 21
%%Page: "339" 21
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
(38.1 Tk_Con\336gureWidget) 98.1 668.33 T
0 F
(339) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
-0.16 (options in exactly the right form, so all you have to do is return this result from the widget) 152.1 632.33 P
(command procedure.) 152.1 620.27 T
-0.01 (Finally) 170.1 608.27 P
-0.01 (, when a widget is deleted you invoke) 197.77 608.27 P
4 F
-0.03 (Tcl_FreeOptions) 351.2 608.27 P
2 F
-0.01 (.) 441.15 608.27 P
4 F
-0.03 (Tcl_FreeOp-) 446.14 608.27 P
(tions) 152.1 596.2 T
2 F
( scans through the table to \336nd options for which resources have been allocated,) 182.08 596.2 T
-0.08 (such as fonts and colors. For each such option it uses the information in the widget record) 152.1 584.13 P
(to free up the resource.) 152.1 572.07 T
0 F
(38.1.1) 113.51 542.07 T
(Tk_Con\336gSpec tables) 152.1 542.07 T
2 F
(Most of the work in processing options is in creating the con\336guration table. The table is) 152.1 526.07 T
(an array of records, each with the following structure:) 152.1 514 T
4 9 Q
(typedef struct {) 179.1 499.67 T
(int type;) 201.92 489.6 T
(char *argvName;) 201.92 479.53 T
(char *dbName;) 201.92 469.47 T
(char *dbClass;) 201.92 459.4 T
(char *defValue;) 201.92 449.33 T
(int offset;) 201.92 439.27 T
(int specFlags;) 201.92 429.2 T
(Tk_CustomOption *customPtr;) 201.92 419.13 T
(} Tk_Conf) 179.1 409.07 T
(igSpec;) 227.63 409.07 T
2 10 Q
(The) 152.1 395.4 T
4 F
(type) 170.14 395.4 T
2 F
( \336eld speci\336es the internal form into which the option\325) 194.13 395.4 T
(s string value should be) 411.5 395.4 T
-0.43 (converted. For example,) 152.1 383.33 P
4 F
-1.02 (TK_CONFIG_INT) 250.46 383.33 P
2 F
-0.43 ( means the option\325) 328.42 383.33 P
-0.43 (s value should be converted) 400.71 383.33 P
-0.3 (to an integer and) 152.1 371.27 P
4 F
-0.73 (TK_CONFIG_COLOR) 220.28 371.27 P
2 F
-0.3 ( means that the option\325) 310.23 371.27 P
-0.3 (s value should be converted) 400.08 371.27 P
-0.17 (to a pointer to an) 152.1 359.2 P
4 F
-0.41 (XColor) 221.48 359.2 P
2 F
-0.17 ( structure. For) 257.46 359.2 P
4 F
-0.41 (TK_CONFIG_INT) 315.79 359.2 P
2 F
-0.17 ( the option\325) 393.75 359.2 P
-0.17 (s value must have) 438.94 359.2 P
(the syntax of a decimal, hexadecimal, or octal integer and for) 152.1 347.13 T
4 F
(TK_CONFIG_COLOR) 399.4 347.13 T
2 F
( the) 489.36 347.13 T
(option\325) 152.1 335.07 T
(s value must have one of the forms for colors described in Section XXX. For) 180.42 335.07 T
4 F
(TK_CONFIG_COLOR) 152.1 323 T
2 F
( Tk will allocate an) 242.05 323 T
4 F
(XColor) 321.72 323 T
2 F
( structure, which must later be freed) 357.7 323 T
(\050e.g. by calling) 152.1 310.93 T
4 F
(Tk_FreeOptions) 214.56 310.93 T
2 F
(\051. More than 20 dif) 298.51 310.93 T
(ferent option types are de\336ned by) 374.11 310.93 T
(Tk; see the reference documentation for details on each of the supported types.) 152.1 298.87 T
4 F
(ArgvName) 170.1 286.87 T
2 F
( is the option\325) 218.07 286.87 T
(s name as speci\336ed on command lines, e.g.) 272.77 286.87 T
(\322) 152.1 274.8 T
4 F
(-) 156.54 274.8 T
(background) 162.53 274.8 T
2 F
(\323 or \322) 222.5 274.8 T
4 F
(-font) 244.7 274.8 T
2 F
(\323. The) 274.68 274.8 T
4 F
(dbName) 302.16 274.8 T
2 F
( and) 338.14 274.8 T
4 F
(dbClass) 357.57 274.8 T
2 F
( \336elds give the option\325) 399.54 274.8 T
(s) 488.95 274.8 T
(name and class in the option database. The) 152.1 262.73 T
4 F
(defValue) 325.58 262.73 T
2 F
( \336eld gives a default value to use) 373.56 262.73 T
(for the option if it isn\325) 152.1 250.67 T
(t speci\336ed on the command line and there isn\325) 240.48 250.67 T
(t a value for it in the) 424.62 250.67 T
(option database;) 152.1 238.6 T
4 F
(NULL) 219.83 238.6 T
2 F
( means there is no default for the option.) 243.82 238.6 T
-0.13 (The) 170.1 226.6 P
4 F
-0.31 (offset) 188.01 226.6 P
2 F
-0.13 ( \336eld tells where in the widget record to store the converted value of the) 223.99 226.6 P
-0.13 (option. It is speci\336ed as a byte displacement from the beginning of the record. Y) 152.1 214.53 P
-0.13 (ou should) 470.71 214.53 P
(use the) 152.1 202.47 T
4 F
(Tk_Offset) 182.63 202.47 T
2 F
( macro to generate values for this \336eld. For example,) 236.6 202.47 T
4 9 Q
(Tk_Offset\050Square, relief\051) 179.1 188.13 T
2 10 Q
(produces an appropriate of) 152.1 174.47 T
(fset for the) 258.77 174.47 T
4 F
(relief) 304.57 174.47 T
2 F
( \336eld of a record whose type is) 340.55 174.47 T
4 F
(Square) 466.01 174.47 T
2 F
(.) 501.99 174.47 T
(The) 170.1 162.47 T
4 F
(specFlags) 188.14 162.47 T
2 F
( \336eld contains an OR-ed combination of \337ag bits that provide addi-) 242.11 162.47 T
(tional control over the handling of the option. A few of the \337ags will be discussed below;) 152.1 150.4 T
-0.21 (see the reference documentation for a complete listing. Finally) 152.1 138.33 P
-0.21 (, the) 399.85 138.33 P
4 F
-0.51 (customPtr) 419.13 138.33 P
2 F
-0.21 ( \336eld pro-) 473.11 138.33 P
FMENDPAGE
%%EndPage: "339" 22
%%Page: "340" 22
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(340) 98.1 668.33 T
3 F
(Con\336guring Widgets) 422.12 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(vides additional information for application-de\336ned options. It\325) 152.1 632.33 T
(s only used when the type) 405 632.33 T
-0.23 (is) 152.1 620.14 P
4 F
-0.56 (TK_CONFIG_CUSTOM) 161.03 620.14 P
2 F
-0.23 ( and should be) 256.98 620.14 P
4 F
-0.56 (NULL) 316.57 620.14 P
2 F
-0.23 ( in other cases. See the reference documen-) 340.55 620.14 P
(tation for details on de\336ning custom option types.) 152.1 607.95 T
(Here is the option table for square widgets:) 170.1 595.95 T
4 9 Q
(Tk_Conf) 179.1 581.62 T
(igSpec conf) 216.85 581.62 T
(igSpecs[] = {) 276.16 581.62 T
({TK_CONFIG_BORDER, "-background", "background",) 201.92 571.43 T
("Background",) 179.1 561.24 T
("#cdb79e", Tk_Offset\050Square, bgBorder\051,) 221.65 551.05 T
(TK_CONFIG_COLOR_ONLY, \050Tk_CustomOption *\051 NULL},) 221.65 540.86 T
({TK_CONFIG_BORDER, "-background", "background",) 201.92 530.67 T
("Background", "white", Tk_Offset\050Square, bgBorder\051,) 221.65 520.48 T
(TK_CONFIG_MONO_ONLY, \050Tk_CustomOption *\051 NULL},) 221.65 510.29 T
({TK_CONFIG_SYNONYM, "-bd", "borderWidth", \050char *\051 NULL,) 201.92 500.1 T
(\050char *\051 NULL, 0, 0, \050Tk_CustomOption *\051 NULL},) 221.65 489.9 T
({TK_CONFIG_SYNONYM, "-bg", "background", \050char *\051 NULL,) 201.92 479.71 T
(\050char *\051 NULL, 0, 0, \050Tk_CustomOption *\051 NULL},) 221.65 469.52 T
({TK_CONFIG_PIXELS, "-borderwidth", "borderWidth",) 201.92 459.33 T
("BorderWidth", "1m", Tk_Offset\050Square, borderWidth\051,) 221.65 449.14 T
(0, \050Tk_CustomOption *\051 NULL},) 221.65 438.95 T
(TK_CONFIG_SYNONYM, "-fg", "foreground", \050char *\051 NULL,) 201.92 428.76 T
(\050char *\051 NULL, 0, 0, \050Tk_CustomOption *\051 NULL},) 221.65 418.57 T
({TK_CONFIG_BORDER, "-foreground", "foreground",) 201.92 408.38 T
("Foreground", "#b03060", Tk_Offset\050Square, fgBorder\051,) 221.65 398.19 T
(TK_CONFIG_COLOR_ONLY, \050Tk_CustomOption *\051 NULL},) 221.65 388 T
({TK_CONFIG_BORDER, "-foreground", "foreground",) 201.92 377.81 T
("Foreground", "black", Tk_Offset\050Square, fgBorder\051,) 221.65 367.62 T
(TK_CONFIG_MONO_ONLY, \050Tk_CustomOption *\051 NULL},) 221.65 357.43 T
({TK_CONFIG_RELIEF, "-relief", "relief", "Relief",) 201.92 347.24 T
("raised", Tk_Offset\050Square, relief\051, 0,) 221.65 337.05 T
(\050Tk_CustomOption *\051 NULL},) 221.65 326.86 T
({TK_CONFIG_END, \050char *\051 NULL, \050char *\051 NULL, ,) 201.92 316.67 T
(\050char *\051 NULL, \050char *\051 NULL, 0, 0,) 221.65 306.48 T
(\050Tk_CustomOption *\051 NULL}) 221.65 296.29 T
(};) 179.1 286.1 T
2 10 Q
(This table illustrates three additional features of) 152.1 272.43 T
4 F
(Tk_Conf) 345.57 272.43 T
(igSpecs) 387.55 272.43 T
2 F
( structures. First,) 429.53 272.43 T
(there are two entries each for the) 152.1 260.24 T
4 F
(-background) 285.59 260.24 T
2 F
( and) 351.55 260.24 T
4 F
(-foreground) 370.98 260.24 T
2 F
( options. The \336rst) 436.94 260.24 T
(entry for each option has the) 152.1 248.05 T
4 F
(TK_CONFIG_COLOR_ONLY) 268.68 248.05 T
2 F
( \337ag set, which causes Tk to) 388.61 248.05 T
(use that option if the display is a color display and to ignore it if the display is mono-) 152.1 235.86 T
-0.12 (chrome. The second entry speci\336es the) 152.1 223.67 P
4 F
-0.29 (TK_CONFIG_MONO_ONLY) 309.32 223.67 P
2 F
-0.12 ( \337ag so it is only used) 423.26 223.67 P
(for monochrome displays. This feature allows dif) 152.1 211.48 T
(ferent default values to be speci\336ed for) 349.28 211.48 T
(color and mono displays \050the current color model for the window determines whether the) 152.1 199.29 T
(it considered to be color or monochrome; see Section XXX\051. Second, the options) 152.1 187.09 T
4 F
(-bd) 478.82 187.09 T
2 F
(,) 496.81 187.09 T
4 F
(-) 501.81 187.09 T
-0.68 (bg) 152.1 174.91 P
2 F
-0.28 (, and) 164.09 174.91 P
4 F
-0.68 (-fg) 185.45 174.91 P
2 F
-0.28 ( have type) 203.44 174.91 P
4 F
-0.68 (TK_CONFIG_SYNONYM) 246.16 174.91 P
2 F
-0.28 (. This means that each of these options is) 348.11 174.91 P
(a synonym for some other option; the) 152.1 162.72 T
4 F
(dbName) 304.51 162.72 T
2 F
( \336eld identi\336es the other option and the) 340.49 162.72 T
-0.06 (other \336elds are ignored. For example, if the) 152.1 150.52 P
4 F
-0.14 ( -bd) 325.19 150.52 P
2 F
-0.06 ( option is speci\336ed with the above table,) 349.04 150.52 P
(Tk will actually use the table entry for the) 152.1 138.33 T
4 F
(-) 322.26 138.33 T
(borderwidth) 328.25 138.33 T
2 F
( option. Third, the last entry) 394.22 138.33 T
FMENDPAGE
%%EndPage: "340" 23
%%Page: "341" 23
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
(38.1 Tk_Con\336gureWidget) 98.1 668.33 T
0 F
(341) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
-0.31 (in the table must have type) 152.1 632.33 P
4 F
-0.74 (TK_CONFIG_END) 260.17 632.33 P
2 F
-0.31 (; Tk depends on this to locate the end of the) 338.13 632.33 P
(table.) 152.1 620.03 T
0 F
(38.1.2) 113.51 590.03 T
(Invoking Tk_Con\336gureW) 152.1 590.03 T
(idget) 269.73 590.03 T
2 F
(Suppose that) 152.1 574.03 T
4 F
(Tk_Conf) 205.96 574.03 T
(igureWidget) 247.94 574.03 T
2 F
( is invoked as follows:) 313.9 574.03 T
4 9 Q
(Tcl_Interp *interp;) 179.1 559.7 T
(Tk_Window tkwin;) 179.1 549.4 T
(char *argv[] = {"-relief", "sunken", "-bg", "blue"};) 179.1 539.1 T
(Square *squarePtr;) 179.1 528.8 T
(int code;) 179.1 518.5 T
(...) 179.1 508.2 T
(code = Tk_Conf) 179.1 497.9 T
(igureWidget\050interp, tkwin, conf) 254.59 497.9 T
(igSpecs,) 421.76 497.9 T
(4, argv, \050char *\051 squarePtr, 0\051;) 224.75 487.6 T
2 10 Q
(A call much like this will occur if a square widget is created with the T) 152.1 473.93 T
(cl command) 435.36 473.93 T
4 9 Q
(square .s -relief sunken -bg blue) 179.1 459.6 T
2 10 Q
-0.13 (The) 152.1 445.93 P
4 F
-0.31 (-relief) 170.01 445.93 P
2 F
-0.13 ( option will be processed according to type) 211.99 445.93 P
4 F
-0.31 (TK_CONFIG_RELIEF) 385.29 445.93 P
2 F
-0.13 (, which) 480.43 445.93 P
-0.25 (dictates that the option\325) 152.1 433.63 P
-0.25 (s value must be a valid relief, such as \322) 244.91 433.63 P
4 F
-0.6 (raised) 398.67 433.63 P
2 F
-0.25 (\323 or \322) 434.65 433.63 P
4 F
-0.6 (sunken) 456.36 433.63 P
2 F
-0.25 (\323. In) 492.34 433.63 P
(this case the value speci\336ed is) 152.1 421.33 T
4 F
(sunken) 274.79 421.33 T
2 F
(;) 310.77 421.33 T
4 F
(Tk_Conf) 316.05 421.33 T
(igureWidget) 358.03 421.33 T
2 F
( converts this string) 423.99 421.33 T
(value to the integer value) 152.1 409.03 T
4 F
(TK_RELIEF_SUNKEN) 255.63 409.03 T
2 F
( and stores that value in) 351.58 409.03 T
4 F
(squarePtr-) 152.1 396.73 T
(>relief) 212.07 396.73 T
2 F
(. The) 254.04 396.73 T
4 F
(-bg) 277.08 396.73 T
2 F
( option will be processed according to the) 295.07 396.73 T
4 F
(conf) 464.4 396.73 T
(ig-) 488.39 396.73 T
(Specs) 152.1 384.43 T
2 F
( entry for) 182.08 384.43 T
4 F
(-background) 221.77 384.43 T
2 F
(, which has type) 287.73 384.43 T
4 F
(TK_CONFIG_BORDER) 355.19 384.43 T
2 F
(. This type) 451.14 384.43 T
(requires that the option\325) 152.1 372.13 T
(s value be a valid color name; Tk creates a data structure suitable) 247.32 372.13 T
(for drawing graphics in that color in) 152.1 359.83 T
4 F
(tkwin) 298.94 359.83 T
2 F
(, and it computes additional colors for draw-) 328.92 359.83 T
(ing light and dark shadows to produce 3-dimensional ef) 152.1 347.53 T
(fects. All of this information is) 374.55 347.53 T
(stored in the new structure and a token for that structure is stored in the) 152.1 335.23 T
4 F
(bgBorder) 439.39 335.23 T
2 F
( \336eld) 487.37 335.23 T
(of) 152.1 322.93 T
4 F
(squarePtr) 162.92 322.93 T
2 F
(. In Chapter 40 you\325ll see how this token is used to draw the widget.) 216.35 322.93 T
(Since the) 170.1 310.93 T
4 F
(-borderwidth) 209.52 310.93 T
2 F
( and) 281.48 310.93 T
4 F
(-foreground) 300.91 310.93 T
2 F
( options weren\325) 366.87 310.93 T
(t speci\336ed in) 428.87 310.93 T
4 F
(argv) 482.45 310.93 T
2 F
(,) 505.79 310.93 T
4 F
-0.45 (Tk_Conf) 152.1 298.63 P
-0.45 (igureWidget) 194.08 298.63 P
2 F
-0.19 ( looks them up in the option database using the information for) 260.04 298.63 P
(those options in) 152.1 286.33 T
4 F
(conf) 217.9 286.33 T
(igSpecs) 241.89 286.33 T
2 F
(. If it \336nds values in the option database then it will use) 283.87 286.33 T
(them in the same way as if they had been supplied in) 152.1 274.03 T
4 F
(argv) 365.84 274.03 T
2 F
(.) 389.18 274.03 T
-0.42 (If an option isn\325) 170.1 262.03 P
-0.42 (t speci\336ed in the option database then) 232.78 262.03 P
4 F
-1.01 (Tk_Conf) 382.79 262.03 P
-1.01 (igureWidget) 424.77 262.03 P
2 F
-0.42 ( uses) 490.73 262.03 P
-0.13 (the default value speci\336ed in its table entry) 152.1 249.73 P
-0.13 (. For example, for) 322.36 249.73 P
4 F
-0.31 (-borderwidth) 396.23 249.73 P
2 F
-0.13 ( it will use) 468.19 249.73 P
-0.23 (the default value \322) 152.1 237.43 P
4 F
-0.56 (1m) 224.94 237.43 P
2 F
-0.23 (\323. Since the option has type) 236.94 237.43 P
4 F
-0.56 (TK_CONFIG_PIXELS) 347.95 237.43 P
2 F
-0.23 (, this string must) 443.9 237.43 P
(specify a screen distance in one of the forms described in Section XXX. \322) 152.1 225.13 T
4 F
(1m) 446.87 225.13 T
2 F
(\323 speci\336es a) 458.86 225.13 T
(distance of one millimeter; Tk converts this to the corresponding number of pixels and) 152.1 212.83 T
(stores the result as an integer in) 152.1 200.53 T
4 F
(squarePtr->borderWidth) 280.62 200.53 T
2 F
(. If the default value for) 412.55 200.53 T
(an option is) 152.1 188.23 T
4 F
(NULL) 201.24 188.23 T
2 F
( then) 225.23 188.23 T
4 F
(Tk_Conf) 247.44 188.23 T
(igureWidget) 289.42 188.23 T
2 F
( does nothing at all if there is no value) 355.38 188.23 T
(in either) 152.1 175.93 T
4 F
(argv) 187.63 175.93 T
2 F
( or the option database; the value in the widget record will retain whatever) 211.62 175.93 T
(value it had when) 152.1 163.63 T
4 F
(Tk_Conf) 225.38 163.63 T
(igureWidget) 267.36 163.63 T
2 F
( is invoked.) 333.32 163.63 T
5 F
(Note:) 119.09 148.63 T
(If an entry in the con\336guration table has no default value then you must initialize the) 152.1 148.63 T
(corr) 152.1 138.33 T
(esponding \336eld of the widget r) 168.94 138.33 T
(ecor) 289.89 138.33 T
(d befor) 307.29 138.33 T
(e invoking) 335.51 138.33 T
4 F
(Tk_Conf) 379.36 138.33 T
(igureWidget) 421.34 138.33 T
5 F
(. If) 487.31 138.33 T
FMENDPAGE
%%EndPage: "341" 24
%%Page: "342" 24
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(342) 98.1 668.33 T
3 F
(Con\336guring Widgets) 422.12 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
5 10 Q
0 X
(ther) 152.1 632.33 T
(e is a default value then you need not initialize the \336eld in the widget r) 167.83 632.33 T
(ecor) 448.69 632.33 T
(d since) 466.08 632.33 T
4 F
(Tk_Conf) 152.1 622.11 T
(igureWidget) 194.08 622.11 T
5 F
( will always stor) 260.04 622.11 T
(e a pr) 325.48 622.11 T
(oper value ther) 348.43 622.11 T
(e.) 409.13 622.11 T
0 F
(38.1.3) 113.51 594.11 T
(Errors) 152.1 594.11 T
4 F
(Tk_Conf) 152.1 578.11 T
(igureWidget) 194.08 578.11 T
2 F
( normally returns) 260.04 578.11 T
4 F
(TCL_OK) 331.38 578.11 T
2 F
(. If an error occurs then it returns) 367.36 578.11 T
4 F
(TCL_ERROR) 152.1 565.88 T
2 F
( and leaves an error message in) 206.07 565.88 T
4 F
(interp->result) 333.46 565.88 T
2 F
(. The most common) 417.41 565.88 T
-0.08 (form of error is a value that doesn\325) 152.1 553.65 P
-0.08 (t make sense for the option type, such as \322) 290.45 553.65 P
4 F
-0.18 (abc) 458.54 553.65 P
2 F
-0.08 (\323 for the) 476.52 553.65 P
4 F
(-bd) 152.1 541.42 T
2 F
( option.) 170.09 541.42 T
4 F
(Tk_Conf) 203.13 541.42 T
(igureWidget) 245.11 541.42 T
2 F
( returns as soon as it encounters an error) 311.07 541.42 T
(, which) 471.65 541.42 T
-0.03 (means that some of the \336elds of the widget record  may not have been set yet; these \336elds) 152.1 529.2 P
(will be left in an initialized state \050such as) 152.1 516.97 T
4 F
(NULL) 318.38 516.97 T
2 F
( for pointers,) 342.36 516.97 T
4 F
(0) 396.22 516.97 T
2 F
( for integers,) 402.21 516.97 T
4 F
(None) 455.5 516.97 T
2 F
( for X) 479.49 516.97 T
(resources, etc.\051.) 152.1 504.74 T
0 F
(38.1.4) 113.51 474.74 T
(Recon\336guring) 152.1 474.74 T
4 F
-0.56 (Tk_Conf) 152.1 458.74 P
-0.56 (igureWidget) 194.08 458.74 P
2 F
-0.23 ( gets invoked not only when a widget is created but also during) 260.04 458.74 P
(the) 152.1 446.52 T
4 F
(conf) 166.81 446.52 T
(igure) 190.8 446.52 T
2 F
( widget command. When recon\336guring you probably won\325) 220.78 446.52 T
(t want to con-) 455.99 446.52 T
-0.29 (sider the option database or default values. Y) 152.1 434.29 P
-0.29 (ou\325ll want to process only the options that are) 329.52 434.29 P
-0.35 (speci\336ed explicitly in) 152.1 422.06 P
4 F
-0.83 (argv) 239.62 422.06 P
2 F
-0.35 (, leaving all the unspeci\336ed options with their previous values.) 262.95 422.06 P
-0.24 (T) 152.1 409.83 P
-0.24 (o accomplish this, specify) 157.51 409.83 P
4 F
-0.58 (TK_CONFIG_ARGV_ONLY) 262.87 409.83 P
2 F
-0.24 ( as the last ar) 376.8 409.83 P
-0.24 (gument to) 427.85 409.83 P
4 F
-0.58 (Tk_Con-) 470.12 409.83 P
(f) 152.1 397.61 T
(igureWidget) 158.1 397.61 T
2 F
(:) 224.06 397.61 T
4 9 Q
(code = Tk_Conf) 179.1 383.27 T
(igureWidget\050interp, tkwin, conf) 254.59 383.27 T
(igSpecs,) 421.76 383.27 T
(argc, argv, \050char *\051 squarePtr,) 224.75 373.05 T
(TK_CONFIG_ARGV_ONLY\051;) 224.75 362.82 T
0 10 Q
(38.1.5) 113.51 334.15 T
(Tk_Con\336gureInfo) 152.1 334.15 T
2 F
(If a) 152.1 318.15 T
4 F
(conf) 168.19 318.15 T
(igure) 192.18 318.15 T
2 F
( widget command is invoked with a single ar) 222.16 318.15 T
(gument, or with no ar) 401.31 318.15 T
(gu-) 487.47 318.15 T
(ments, then it returns con\336guration information. For example, if) 152.1 305.92 T
4 F
(.s) 410.83 305.92 T
2 F
( is a square widget) 422.82 305.92 T
(then) 152.1 293.7 T
4 9 Q
(.s conf) 179.1 279.36 T
(igure -background) 216.85 279.36 T
2 10 Q
(should return a list of information about the) 152.1 265.7 T
4 F
(-background) 329.21 265.7 T
2 F
( option and) 395.18 265.7 T
4 9 Q
(.s conf) 179.1 251.36 T
(igure) 216.85 251.36 T
2 10 Q
(should return a list of lists describing all the options, as described in Section XXX.) 152.1 237.7 T
4 F
-0.04 (Tk_Conf) 152.1 225.47 P
-0.04 (igureInfo) 194.08 225.47 P
2 F
-0.02 ( does all the work of generating this information in the proper for-) 248.05 225.47 P
(mat. For the square widget it might be invoked as follows:) 152.1 213.24 T
4 9 Q
(code = Tk_Conf) 179.1 198.91 T
(igureInfo\050interp, tkwin, conf) 254.59 198.91 T
(igSpecs,) 410.98 198.91 T
(\050char *\051 squarePtr, argv[2], 0\051;) 224.75 188.68 T
4 10 Q
(Argv[2]) 152.1 175.02 T
2 F
( speci\336es the name of a particular option \050e.g.) 194.08 175.02 T
4 F
(-background) 379.21 175.02 T
2 F
( in the \336rst) 445.18 175.02 T
(example above\051. If information is to be returned about all options, as in the second exam-) 152.1 162.79 T
-0.39 (ple above, then) 152.1 150.56 P
4 F
-0.93 (NULL) 214.22 150.56 P
2 F
-0.39 ( should be speci\336ed as the option name.) 238.21 150.56 P
4 F
-0.93 (Tk_Conf) 396.94 150.56 P
-0.93 (igureInfo) 438.92 150.56 P
2 F
-0.39 ( sets) 492.89 150.56 P
4 F
(interp->result) 152.1 138.33 T
2 F
( to hold the proper value and returns) 236.05 138.33 T
4 F
(TCL_OK) 383.72 138.33 T
2 F
(. If an error occurs) 419.7 138.33 T
FMENDPAGE
%%EndPage: "342" 25
%%Page: "343" 25
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
(38.2 Resource caches) 98.1 668.33 T
0 F
(343) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(\050because a bad option name was speci\336ed, for example\051 then) 152.1 632.33 T
4 F
(Tk_Conf) 397.73 632.33 T
(igureInfo) 439.71 632.33 T
2 F
(stores an error message in) 152.1 620.33 T
4 F
(interp->result) 258.4 620.33 T
2 F
( and returns) 342.36 620.33 T
4 F
(TCL_ERROR) 392.04 620.33 T
2 F
(. In either case,) 446.01 620.33 T
-0.28 (the widget command procedure can leave) 152.1 608.33 P
4 F
-0.66 (interp->result) 319.2 608.33 P
2 F
-0.28 ( as it is and return) 403.15 608.33 P
4 F
-0.66 (code) 475.34 608.33 P
2 F
-0.28 ( as) 499.33 608.33 P
(its completion code.) 152.1 596.33 T
0 F
(38.1.6) 113.51 566.33 T
(Tk_FreeOptions) 152.1 566.33 T
2 F
(The library procedure) 152.1 550.33 T
4 F
(Tk_FreeOptions) 241.74 550.33 T
2 F
( is usually invoked after a widget is deleted in) 325.7 550.33 T
(order to clean up its widget record. For some option types, such as) 152.1 538.33 T
4 F
(TK_CONFIG_BOR-) 419.97 538.33 T
(DER) 152.1 526.33 T
2 F
(,) 170.09 526.33 T
4 F
(Tk_Conf) 175.09 526.33 T
(igureWidget) 217.06 526.33 T
2 F
( allocates resources which must eventually be freed.) 283.03 526.33 T
4 F
(Tk_FreeOptions) 152.1 514.33 T
2 F
( takes care of this:) 236.05 514.33 T
4 9 Q
(void Tk_FreeOptions\050Tk_Conf) 179.1 500 T
(igSpec *specs, char *widgRec,) 324.7 500 T
(Display *display, int f) 224.75 490 T
(lags\051;) 348.77 490 T
4 10 Q
-0.5 (Specs) 152.1 476.33 P
2 F
-0.21 ( and) 182.08 476.33 P
4 F
-0.5 (widgRec) 201.1 476.33 P
2 F
-0.21 (should be the same as in calls to Tk_Con\336gureW) 248.57 476.33 P
-0.21 (idget.) 443.05 476.33 P
4 F
-0.5 (Display) 467.83 476.33 P
2 F
(identi\336es the X display containing the widget \050it\325) 152.1 464.33 T
(s needed for freeing certain options\051 and) 347.82 464.33 T
4 F
(f) 152.1 452.33 T
(lags) 158.1 452.33 T
2 F
( should normally be 0 \050see the reference documentation for other possibilities\051.) 182.08 452.33 T
4 F
-0.88 (Tk_FreeOptions) 152.1 440.33 P
2 F
-0.37 ( will scan) 236.05 440.33 P
4 F
-0.88 (specs) 275.76 440.33 P
2 F
-0.37 ( looking for entries such as) 305.74 440.33 P
4 F
-0.88 (TK_CONFIG_BORDER) 414.02 440.33 P
2 F
-0.01 (whose resources must be freed. For each such entry it checks the widget record to be sure) 152.1 428.33 P
(a resource is actually allocated \050for example, if the value of a string resource is) 152.1 416.33 T
4 F
(NULL) 469.61 416.33 T
2 F
( it) 493.6 416.33 T
(means that no memory is allocated\051. If there is a resource allocated then) 152.1 404.33 T
4 F
(Tk_FreeOp-) 441.87 404.33 T
-0.29 (tions) 152.1 392.33 P
2 F
-0.12 ( passes the value from the widget record to an appropriate procedure to free up the) 182.08 392.33 P
-0.33 (resource and resets the value in the widget record to a state such as) 152.1 380.33 P
4 F
-0.79 (NULL) 417.29 380.33 P
2 F
-0.33 ( to indicate that it) 441.28 380.33 P
(has been freed.) 152.1 368.33 T
0 F
(38.1.7) 113.51 338.33 T
(Other uses for con\336guration tables) 152.1 338.33 T
2 F
(Con\336guration tables can be used for other things besides widgets. They are suitable for) 152.1 322.33 T
(any situation where textual information must be converted to an internal form and stored) 152.1 310.33 T
(in \336elds of a structure, particularly if the information is speci\336ed in the same form as for) 152.1 298.33 T
(widget options, e.g.) 152.1 286.33 T
4 9 Q
(-background blue -width 1m) 179.1 272 T
2 10 Q
(Tk uses con\336guration tables internally for con\336guring menu entries, for con\336guring can-) 152.1 258.33 T
(vas items, and for con\336guring display attributes of tags in text widgets.) 152.1 246.33 T
98.1 202.98 512.1 206 C
152.1 204.2 512.1 204.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 204.49 143.1 204.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(38.2) 117.96 210 T
(Resource caches) 152.1 210 T
2 10 Q
(The X window system provides a number of dif) 152.1 186.31 T
(ferent resources for applications to use.) 343.45 186.31 T
(W) 152.1 174.31 T
(indows are one example of a resource; other examples are graphics contexts, fonts, pix-) 161.13 174.31 T
(maps, colors, and cursors. An application must allocate resources before using them and) 152.1 162.31 T
-0.31 (free them when they\325re no longer needed. X was designed to make resource allocation and) 152.1 150.31 P
FMENDPAGE
%%EndPage: "343" 26
%%Page: "344" 26
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(344) 98.1 668.33 T
3 F
(Con\336guring Widgets) 422.12 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(deallocation as cheap as possible, but it is still expensive in many situations because it) 152.1 632.33 T
(requires communication with the X server \050for example, font allocation requires commu-) 152.1 620.27 T
(nication with the server to make sure the font exists\051. If an application uses the same) 152.1 608.21 T
(resource in several dif) 152.1 596.15 T
(ferent places \050e.g. the same font in many dif) 240.45 596.15 T
(ferent windows\051 it is) 416.24 596.15 T
-0.04 (wasteful to allocate separate resources for each use: this wastes time communicating with) 152.1 584.08 P
(the server and it wastes space in the X server to keep track of the copies of the resource.) 152.1 572.02 T
(Tk provides a collection of) 170.1 560.02 T
5 F
(r) 280.3 560.02 T
(esour) 283.82 560.02 T
(ce caches) 305.65 560.02 T
2 F
( in order to reduce the costs of resource) 344.22 560.02 T
-0.35 (management. When your application needs a particular resource you shouldn\325) 152.1 547.96 P
-0.35 (t call Xlib to) 460.75 547.96 P
-0.31 (allocate it; call the corresponding Tk procedure instead. Tk keeps track of all the resources) 152.1 535.9 P
-0.25 (used by the application and allows them to be shared. If you use the same font in many dif-) 152.1 523.83 P
(ferent widgets, Tk will call X to allocate a font for the \336rst widget, but it will re-use this) 152.1 511.77 T
(font for all the other widgets. When the resource is no longer needed anywhere in the) 152.1 499.71 T
(application \050e.g. all the widgets using the font have been destroyed\051 then Tk will invoke) 152.1 487.65 T
-0.18 (the Xlib procedure to free up the resource. This approach saves time as well as memory in) 152.1 475.58 P
(the X server) 152.1 463.52 T
(.) 200.39 463.52 T
(If you allocate a resource through Tk you must treat it as read-only since it may be) 170.1 451.52 T
(shared. For example, if you allocate a graphics context with) 152.1 439.46 T
4 F
(Tk_GetGC) 393.59 439.46 T
2 F
( you must not) 441.56 439.46 T
-0.3 (change the background color of the graphics context, since this would af) 152.1 427.4 P
-0.3 (fect the other uses) 438.37 427.4 P
(of the graphics context. If you need to modify a resource after creating it then you should) 152.1 415.33 T
(not use Tk\325) 152.1 403.27 T
(s resource caches; call Xlib directly to allocate the resource so that you can) 197.07 403.27 T
(have a private copy) 152.1 391.21 T
(.) 229.44 391.21 T
(Most of the resources for a widget are allocated automatically by) 170.1 379.21 T
4 F
(Tk_Conf) 432.4 379.21 T
(igure-) 474.37 379.21 T
-0.23 (Widget) 152.1 367.15 P
2 F
-0.1 (, and) 188.08 367.15 P
4 F
-0.23 (Tk_Conf) 209.81 367.15 P
-0.23 (igureWidget) 251.79 367.15 P
2 F
-0.1 ( uses the Tk resource caches. The following sub-) 317.75 367.15 P
(sections describe how to use the Tk resource caches directly) 152.1 355.08 T
(, without going through) 392.09 355.08 T
4 F
(Tk_Conf) 152.1 343.02 T
(igureWidget) 194.08 343.02 T
2 F
(.) 260.04 343.02 T
0 F
(38.2.1) 113.51 313.02 T
(Graphics contexts) 152.1 313.02 T
2 F
(Graphics contexts are the resource that you are most likely to allocate directly) 152.1 297.02 T
(. They are) 462.88 297.02 T
(needed whenever you draw information on the screen and) 152.1 284.96 T
4 F
(Tk_Conf) 386.07 284.96 T
(igureWidget) 428.05 284.96 T
2 F
(does not provide facilities for allocating them. Thus most widgets will need to allocate a) 152.1 272.9 T
-0.43 (few graphics contexts in their con\336gure procedures. The procedure) 152.1 260.83 P
4 F
-1.04 (Tk_GetGC) 418.52 260.83 P
2 F
-0.43 ( allocates a) 466.5 260.83 P
(graphics context and is similar to the Xlib procedure) 152.1 248.77 T
4 F
(XCreateGC) 364.45 248.77 T
2 F
(:) 418.42 248.77 T
4 9 Q
(GC Tk_GetGC\050Tk_Window tkwin, unsigned long valueMask,) 179.1 234.44 T
(XGCValues *valuePtr\051) 224.75 224.38 T
2 10 Q
(The) 152.1 210.71 T
4 F
(tkwin) 170.14 210.71 T
2 F
( ar) 200.12 210.71 T
(gument speci\336es the window in which the graphics context will be used.) 210.21 210.71 T
4 F
(ValueMask) 152.1 198.65 T
2 F
( and) 206.07 198.65 T
4 F
(ValuePtr) 225.5 198.65 T
2 F
( specify the \336elds of the graphics context.) 273.47 198.65 T
4 F
(ValueMask) 442.52 198.65 T
2 F
( is) 496.49 198.65 T
(an OR-ed combination of bits such as) 152.1 186.58 T
4 F
(GCForeground) 305.06 186.58 T
2 F
( or) 377.02 186.58 T
4 F
(GCFont) 390.34 186.58 T
2 F
( that indicate which) 426.32 186.58 T
(\336elds of) 152.1 174.52 T
4 F
(valuePtr) 187.08 174.52 T
2 F
( are signi\336cant.) 235.05 174.52 T
4 F
(ValuePtr) 298.9 174.52 T
2 F
( speci\336es values of the selected \336elds.) 346.87 174.52 T
4 F
(Tk_GetGC) 152.1 162.46 T
2 F
( returns the X resource identi\336er for a graphics context that matches) 200.07 162.46 T
4 F
(value-) 474.3 162.46 T
-0.54 (Mask) 152.1 150.4 P
2 F
-0.22 ( and) 176.09 150.4 P
4 F
-0.54 (valuePtr) 195.07 150.4 P
2 F
-0.22 (. The graphics context will have default values for all of the unspec-) 242.49 150.4 P
(i\336ed \336elds.) 152.1 138.33 T
FMENDPAGE
%%EndPage: "344" 27
%%Page: "345" 27
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
(38.2 Resource caches) 98.1 668.33 T
0 F
(345) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(When you\325re \336nished with a graphics context you must free it by calling) 170.1 632.33 T
4 F
(Tk_FreeGC) 152.1 620.33 T
2 F
(:) 206.07 620.33 T
4 9 Q
(Tk_FreeGC\050Display *display, GC gc\051) 179.1 606 T
2 10 Q
(The) 152.1 592.33 T
4 F
(display) 170.14 592.33 T
2 F
( ar) 212.12 592.33 T
(gument indicates the display for which the graphics context was allo-) 222.2 592.33 T
(cated and the) 152.1 580.33 T
4 F
(gc) 207.33 580.33 T
2 F
( ar) 219.32 580.33 T
(gument identi\336es the graphics context \050) 229.41 580.33 T
4 F
(gc) 387.36 580.33 T
2 F
( must have been the return) 399.35 580.33 T
(value from some previous call to) 152.1 568.33 T
4 F
(Tk_GetGC) 285.9 568.33 T
2 F
(\051. There must be exactly one call to) 333.87 568.33 T
4 F
(Tk_FreeGC) 152.1 556.33 T
2 F
( for each call to) 206.07 556.33 T
4 F
(Tk_GetGC) 270.73 556.33 T
2 F
(.) 318.71 556.33 T
0 F
(38.2.2) 113.51 526.33 T
(Other resources) 152.1 526.33 T
2 F
(Although resources other than graphics contexts are normally allocated and deallocated) 152.1 510.33 T
(automatically by) 152.1 498.33 T
4 F
(Tk_Conf) 221.5 498.33 T
(igureWidget) 263.48 498.33 T
2 F
( and) 329.44 498.33 T
4 F
(Tk_FreeOptions) 348.87 498.33 T
2 F
(, you can also allo-) 432.83 498.33 T
(cate them explicitly using Tk library procedures. For each resource there are three proce-) 152.1 486.33 T
(dures. The \336rst procedure \050such as) 152.1 474.33 T
4 F
(Tk_GetColor) 292.26 474.33 T
2 F
(\051 takes a textual description of the) 358.23 474.33 T
-0.05 (resource in the same way it might be speci\336ed as a con\336guration option and returns a suit-) 152.1 462.33 P
(able resource or an error) 152.1 450.33 T
(. The second procedure \050such as) 249.23 450.33 T
4 F
(Tk_FreeColor) 379.95 450.33 T
2 F
(\051 takes a) 451.9 450.33 T
-0.02 (resource allocated by the \336rst procedure and frees it. The third procedure takes a resource) 152.1 438.33 P
-0.24 (and returns the textual description that was used to allocate it. The following resources are) 152.1 426.33 P
(supported in this way:) 152.1 414.33 T
1 F
(Bitmaps) 162.9 399.33 T
2 F
(: the procedures) 198.44 399.33 T
4 F
(Tk_GetBitmap) 264.77 399.33 T
2 F
(,) 336.73 399.33 T
4 F
(Tk_FreeBitmap) 341.73 399.33 T
2 F
(, and) 419.69 399.33 T
4 F
(Tk_NameOf-) 441.62 399.33 T
(Bitmap) 162.9 387.33 T
2 F
( manage) 198.88 387.33 T
4 F
(Pixmap) 234.96 387.33 T
2 F
( resources with depth one. Y) 270.94 387.33 T
(ou can also invoke) 384.3 387.33 T
4 F
(Tk_De-) 461.47 387.33 T
(f) 162.9 375.33 T
(ineBitmap) 168.9 375.33 T
2 F
( to create new internally-de\336ned bitmaps, and) 222.87 375.33 T
4 F
(Tk_SizeOfBitmap) 408.29 375.33 T
2 F
(returns the dimensions of a bitmap.) 162.9 363.33 T
1 F
(Colors) 162.9 348.33 T
2 F
( : the procedures) 191.21 348.33 T
4 F
(Tk_GetColor) 260.05 348.33 T
2 F
(,) 325.61 348.33 T
4 F
(Tk_FreeColor) 330.61 348.33 T
2 F
(, and) 402.17 348.33 T
4 F
(Tk_NameOfColor) 424.1 348.33 T
2 F
-0.22 (manage) 162.9 336.33 P
4 F
-0.52 (XColor) 196.26 336.33 P
2 F
-0.22 ( structures. Y) 232.24 336.33 P
-0.22 (ou can also invoke) 284.38 336.33 P
4 F
-0.52 (Tk_GetColorByValue) 360.68 336.33 P
2 F
-0.22 ( to specify) 468.62 336.33 P
(a color with integer intensities rather than a string.) 162.9 324.33 T
1 F
(Cursors) 162.9 309.33 T
2 F
(: the procedures) 197.32 309.33 T
4 F
(Tk_GetCursor) 263.65 309.33 T
2 F
(,) 335.21 309.33 T
4 F
(Tk_FreeCursor) 340.21 309.33 T
2 F
(, and) 417.77 309.33 T
4 F
-0.42 (Tk_NameOfCursor) 162.9 297.33 P
2 F
-0.17 ( manage) 252.85 297.33 P
4 F
-0.42 (Cursor) 288.58 297.33 P
2 F
-0.17 ( resources. Y) 324.56 297.33 P
-0.17 (ou can also invoke) 375.66 297.33 P
4 F
-0.42 (Tk_GetCur-) 452.13 297.33 P
(sorFromData) 162.9 285.33 T
2 F
( to de\336ne a cursor based on binary data in the application.) 228.86 285.33 T
1 F
(Fonts) 162.9 270.33 T
2 F
(: the procedures) 186.78 270.33 T
4 F
(Tk_GetFontStruct) 253.11 270.33 T
2 F
(,) 349.06 270.33 T
4 F
(Tk_NameOfFontStruct) 354.05 270.33 T
2 F
(, and) 467.99 270.33 T
4 F
(Tk_FreeFontStruct) 162.9 258.33 T
2 F
( manage) 264.84 258.33 T
4 F
(XFontStruct) 300.92 258.33 T
2 F
( structures.) 366.89 258.33 T
1 F
(3-D borders) 162.9 243.33 T
2 F
(: the procedures) 214.25 243.33 T
4 F
(Tk_Get3DBorder) 280.58 243.33 T
2 F
(,) 364.14 243.33 T
4 F
(Tk_Free3DBorder) 369.14 243.33 T
2 F
(, and) 458.69 243.33 T
4 F
(Tk_NameOf3DBorder) 162.9 231.33 T
2 F
( manage) 264.84 231.33 T
4 F
(Tk_3DBorder) 300.92 231.33 T
2 F
( resources, which are used to draw) 366.89 231.33 T
(objects with beveled edges that produce 3-D ef) 162.9 219.33 T
(fects. Associated with these procedures) 350.63 219.33 T
-0.25 (are other procedures such as) 162.9 207.33 P
4 F
-0.6 (Tk_Draw3DRectangle) 277.39 207.33 P
2 F
-0.25 ( that draw objects on the screen) 385.33 207.33 P
(\050see Section 40.3\051. In addition you can invoke) 162.9 195.33 T
4 F
(Tk_3DBorderColor) 349.44 195.33 T
2 F
( to retrieve the) 445.39 195.33 T
4 F
(XColor) 162.9 183.33 T
2 F
( structure for the border) 198.88 183.33 T
(\325) 294.17 183.33 T
(s base color) 296.95 183.33 T
(.) 343.58 183.33 T
FMENDPAGE
%%EndPage: "345" 28
%%Page: "346" 28
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(346) 98.1 668.33 T
3 F
(Con\336guring Widgets) 422.12 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 623.98 512.1 627 C
152.1 625.2 512.1 625.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 625.49 143.1 625.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(38.3) 117.96 631 T
(Tk_Uids) 152.1 631 T
2 10 Q
(When invoking procedures like) 152.1 607.31 T
4 F
(Tk_GetColor) 280.34 607.31 T
2 F
( you pass in a textual description of the) 346.3 607.31 T
(resource to allocate, such as \322) 152.1 595.31 T
4 F
(red) 270.89 595.31 T
2 F
(\323 for a color) 288.88 595.31 T
(. However) 336.89 595.31 T
(, this textual description is not a) 378.12 595.31 T
-0.12 (normal C string but rather a) 152.1 583.31 P
5 F
-0.12 (unique identi\336er) 264.61 583.31 P
2 F
-0.12 (, which is represented with the type) 329.88 583.31 P
4 F
-0.3 (Tk_Uid) 473.34 583.31 P
2 F
-0.12 (:) 509.32 583.31 P
4 9 Q
(typedef char *Tk_Uid;) 179.1 568.98 T
2 10 Q
(A) 152.1 555.31 T
4 F
(Tk_Uid) 161.82 555.31 T
2 F
( is like an atom in Lisp. It is actually a pointer to a character array) 197.79 555.31 T
(, just like a) 460.28 555.31 T
-0.18 (normal C string, and a) 152.1 543.31 P
4 F
-0.44 (Tk_Uid) 242.8 543.31 P
2 F
-0.18 ( can be used anywhere that a string can be used. However) 278.78 543.31 P
-0.18 (,) 507.29 543.31 P
4 F
-0.33 (Tk_Uid) 152.1 531.31 P
2 F
-0.14 (\325) 188.08 531.31 P
-0.14 (s have the property that any two) 190.86 531.31 P
4 F
-0.33 (Tk_Uid) 320.64 531.31 P
2 F
-0.14 (\325) 356.62 531.31 P
-0.14 (s with the same string value also have) 359.4 531.31 P
(the same pointer value: if) 152.1 519.31 T
4 F
(a) 256.19 519.31 T
2 F
( and) 262.19 519.31 T
4 F
(b) 281.62 519.31 T
2 F
( are) 287.62 519.31 T
4 F
(Tk_Uid) 304.82 519.31 T
2 F
(\325) 340.8 519.31 T
(s and) 343.58 519.31 T
4 9 Q
(\050strcmp\050a,b\051) 179.1 504.98 T
(==) 249.2 504.98 T
(0\051) 265.38 504.98 T
2 10 Q
(then) 152.1 491.31 T
4 9 Q
(\050a) 179.1 476.98 T
(==) 195.28 476.98 T
(b\051) 211.46 476.98 T
2 10 Q
-0.08 (Tk uses) 152.1 463.31 P
4 F
-0.18 (Tk_Uid) 185.26 463.31 P
2 F
-0.08 (\325) 221.24 463.31 P
-0.08 (s to specify resources because they permit fast comparisons for equality) 224.02 463.31 P
-0.08 (.) 509.6 463.31 P
(If you use) 170.1 451.31 T
4 F
(Tk_Conf) 212.57 451.31 T
(igureWidget) 254.54 451.31 T
2 F
( to allocate resources then you won\325) 320.51 451.31 T
(t have to) 464.66 451.31 T
(worry about) 152.1 439.31 T
4 F
(Tk_Uid) 203.17 439.31 T
2 F
(\325) 239.15 439.31 T
(s \050Tk automatically translates strings from the con\336guration table) 241.93 439.31 T
-0.14 (into) 152.1 427.31 P
4 F
-0.33 (Tk_Uid) 170.01 427.31 P
2 F
-0.14 (\325) 205.99 427.31 P
-0.14 (s\051. But if you call procedures like) 208.77 427.31 P
4 F
-0.33 (Tk_GetColor) 343.83 427.31 P
2 F
-0.14 ( directly then you\325ll need) 409.8 427.31 P
(to use) 152.1 415.31 T
4 F
(Tk_GetUid) 178.2 415.31 T
2 F
( to turn strings into unique identi\336ers:) 232.17 415.31 T
4 9 Q
(Tk_Uid Tk_GetUid\050char *string\051) 179.1 400.98 T
2 10 Q
-0.12 (Given a string ar) 152.1 387.31 P
-0.12 (gument,) 218.46 387.31 P
4 F
-0.28 (Tk_GetUid) 253.33 387.31 P
2 F
-0.12 ( returns the corresponding) 307.3 387.31 P
4 F
-0.28 (Tk_Uid) 413.97 387.31 P
2 F
-0.12 (. It just keeps a) 449.95 387.31 P
(hash table of all unique identi\336ers that have been used so far and returns a pointer to the) 152.1 375.31 T
(key stored in the hash table.) 152.1 363.31 T
5 F
(Note:) 119.09 348.31 T
-0.04 (If you pass strings dir) 152.1 348.31 P
-0.04 (ectly to pr) 238.76 348.31 P
-0.04 (ocedur) 278.83 348.31 P
-0.04 (es like) 306.22 348.31 P
4 F
-0.09 (Tk_GetColor) 333.89 348.31 P
5 F
-0.04 ( without converting them to) 399.86 348.31 P
-0.39 (unique identi\336ers then you will get unpr) 152.1 338.31 P
-0.39 (edictable r) 309.32 338.31 P
-0.39 (esults. One common symptom is that the) 351.58 338.31 P
(application uses the same r) 152.1 328.31 T
(esour) 261.11 328.31 T
(ce over and over even though you think you\325ve speci\336ed) 282.95 328.31 T
(differ) 152.1 318.31 T
(ent values for each use. T) 173.39 318.31 T
(ypically what happens is that the same string buffer was) 274.8 318.31 T
-0.1 (used to stor) 152.1 308.31 P
-0.1 (e all of the differ) 198.18 308.31 P
-0.1 (ent values. Tk just compar) 264.05 308.31 P
-0.1 (es the string addr) 368.5 308.31 P
-0.1 (ess rather than its) 438.08 308.31 P
(contents, so the values appear to Tk to be the same.) 152.1 298.31 T
98.1 256.95 512.1 259.98 C
152.1 258.18 512.1 258.18 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 258.46 143.1 258.46 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(38.4) 117.96 263.98 T
(Other translators) 152.1 263.98 T
2 10 Q
-0.22 (Tk provides several other library procedures that translate from strings in various forms to) 152.1 240.29 P
-0.09 (internal representations. These procedures are similar to the resource managers in Section) 152.1 228.29 P
-0.19 (38.2 except that the internal forms are not resources that require freeing, so typically there) 152.1 216.29 P
(is just a \322get\323 procedure and a \322name of\323 procedure with no \322free\323 procedure. Below is a) 152.1 204.29 T
(quick summary of the availabile translators \050see the reference documentation for details\051:) 152.1 192.29 T
1 F
(Anchors) 162.9 177.29 T
2 F
(:) 198.99 177.29 T
4 F
(Tk_GetAnchor) 204.27 177.29 T
2 F
( and) 276.23 177.29 T
4 F
(Tk_NameOfAnchor) 295.66 177.29 T
2 F
( translate between strings con-) 385.61 177.29 T
(taining an anchor positions such as \322) 162.9 165.29 T
4 F
(center) 309.47 165.29 T
2 F
(\323 or \322) 345.45 165.29 T
4 F
(ne) 367.65 165.29 T
2 F
(\323 and integers with values) 379.64 165.29 T
(de\336ned by symbols such as) 162.9 153.29 T
4 F
(TK_ANCHOR_CENTER) 274.78 153.29 T
2 F
( or) 370.73 153.29 T
4 F
(TK_ANCHOR_NE) 384.05 153.29 T
2 F
(.) 456.01 153.29 T
FMENDPAGE
%%EndPage: "346" 29
%%Page: "347" 29
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
(38.5 Changing window attributes) 98.1 668.33 T
0 F
(347) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(Cap styles) 162.9 632.33 T
2 F
(:) 206.49 632.33 T
4 F
(Tk_GetCapStyle) 211.76 632.33 T
2 F
( and) 295.72 632.33 T
4 F
(Tk_NameOfCapStyle) 315.15 632.33 T
2 F
( translate betwen) 417.09 632.33 T
(strings containing X cap styles \050\322) 162.9 620.33 T
4 F
(butt) 295.87 620.33 T
2 F
(\323, \322) 319.85 620.33 T
4 F
(projecting) 333.73 620.33 T
2 F
(\323, or \322) 393.69 620.33 T
4 F
(round) 418.39 620.33 T
2 F
(\323\051 and integers) 448.37 620.33 T
-0.11 (with values de\336ned by the X symbols) 162.9 608.33 P
4 F
-0.26 (CapButt) 315.1 608.33 P
2 F
-0.11 (,) 357.07 608.33 P
4 F
-0.26 (CapProjecting) 361.96 608.33 P
2 F
-0.11 (, and) 439.92 608.33 P
4 F
-0.26 (CapRound) 461.63 608.33 P
2 F
-0.11 (.) 509.6 608.33 P
1 F
-0.42 (Join styles) 162.9 593.33 P
2 F
-0.42 (:) 206.62 593.33 P
4 F
-1.01 (Tk_JoinStyle) 211.48 593.33 P
2 F
-0.42 ( and) 283.44 593.33 P
4 F
-1.01 (Tk_NameOfJoinStyle) 302.03 593.33 P
2 F
-0.42 ( translate between strings) 409.97 593.33 P
(containing X join styles \050\322) 162.9 581.33 T
4 F
(bevel) 268.39 581.33 T
2 F
(\323, \322) 298.38 581.33 T
4 F
(miter) 312.25 581.33 T
2 F
(\323, or \322) 342.23 581.33 T
4 F
(round) 366.93 581.33 T
2 F
(\323\051 and integers with values) 396.91 581.33 T
(de\336ned by the X symbols) 162.9 569.33 T
4 F
(JoinBevel) 267.56 569.33 T
2 F
(,) 321.53 569.33 T
4 F
(JoinMiter) 326.53 569.33 T
2 F
(, and) 380.1 569.33 T
4 F
(JoinRound) 402.03 569.33 T
2 F
(.) 456 569.33 T
1 F
(Justify styles) 162.9 554.33 T
2 F
(:) 217.59 554.33 T
4 F
(Tk_GetJustify) 222.87 554.33 T
2 F
( and) 300.82 554.33 T
4 F
(Tk_NameOfJustify) 320.25 554.33 T
2 F
( translate between) 416.2 554.33 T
(strings containing styles of justi\336cation \050\322) 162.9 542.33 T
4 F
(left) 330.31 542.33 T
2 F
(\323, \322) 354.3 542.33 T
4 F
(right) 368.17 542.33 T
2 F
(\323, \322) 398.15 542.33 T
4 F
(center) 412.02 542.33 T
2 F
(\323, or \322) 448 542.33 T
4 F
(f) 472.7 542.33 T
(ill) 478.7 542.33 T
2 F
(\323\051) 496.69 542.33 T
(and integers with values de\336ned by the symbols) 162.9 530.33 T
4 F
(TK_JUSTIFY_LEFT) 357.22 530.33 T
2 F
(,) 446.43 530.33 T
4 F
(TK_JUSTI-) 451.43 530.33 T
(FY_RIGHT) 162.9 518.33 T
2 F
(,) 210.13 518.33 T
4 F
(TK_JUSTIFY_CENTER) 215.13 518.33 T
2 F
(, and) 317.08 518.33 T
4 F
(TK_JUSTIFY_FILL) 339 518.33 T
2 F
(.) 428.95 518.33 T
1 F
(Reliefs) 162.9 503.33 T
2 F
(:) 191.76 503.33 T
4 F
(Tk_GetRelief) 197.04 503.33 T
2 F
( and) 269 503.33 T
4 F
(Tk_NameOfRelief) 288.43 503.33 T
2 F
( translate between strings con-) 378.38 503.33 T
(taining relief names \050\322) 162.9 491.33 T
4 F
(raised) 252.55 491.33 T
2 F
(\323, \322) 288.53 491.33 T
4 F
(sunken) 302.4 491.33 T
2 F
(\323, \322) 338.38 491.33 T
4 F
(f) 352.26 491.33 T
(lat) 358.25 491.33 T
2 F
(\323, \322) 376.24 491.33 T
4 F
(groove) 390.11 491.33 T
2 F
(\323, or \322) 426.1 491.33 T
4 F
(ridge) 450.79 491.33 T
2 F
(\323\051 and) 480.77 491.33 T
(integers with values de\336ned by the symbols) 162.9 479.33 T
4 F
(TK_RELIEF_RAISED) 340.29 479.33 T
2 F
(,) 436.24 479.33 T
4 F
(TK_RELIEF_-) 441.24 479.33 T
(SUNKEN) 162.9 467.33 T
2 F
(, etc.) 198.88 467.33 T
1 F
-0.11 (Scr) 162.9 452.33 P
-0.11 (een distances) 177.15 452.33 P
2 F
-0.11 (:) 232.85 452.33 P
4 F
-0.25 (Tk_GetPixels) 238.02 452.33 P
2 F
-0.11 ( and) 309.98 452.33 P
4 F
-0.25 (Tk_GetScreenMM) 329.2 452.33 P
2 F
-0.11 ( process strings that con-) 413.15 452.33 P
-0.13 (tain screen distances in any of the forms described in Section XXX, such as \322) 162.9 440.33 P
4 F
-0.31 (1.5m) 470.61 440.33 P
2 F
-0.13 (\323 or) 494.59 440.33 P
-0.26 (\322) 162.9 428.33 P
4 F
-0.62 (2) 167.34 428.33 P
2 F
-0.26 (\323.) 173.33 428.33 P
4 F
-0.62 (Tk_GetPixels) 182.51 428.33 P
2 F
-0.26 ( returns an integer result in pixel units, and) 254.47 428.33 P
4 F
-0.62 (Tk_GetScreenMM) 425.91 428.33 P
2 F
(returns a real result whose units are millimeters.) 162.9 416.33 T
1 F
(W) 162.9 401.33 T
(indow names) 172.71 401.33 T
2 F
(:) 228.52 401.33 T
4 F
(Tk_NameToWindow) 233.8 401.33 T
2 F
( translates from a string containing a window) 323.75 401.33 T
(path name such as \322) 162.9 389.33 T
4 F
(.dlg.quit) 242.84 389.33 T
2 F
(\323 to the) 296.81 389.33 T
4 F
(Tk_Window) 328.73 389.33 T
2 F
( token for the corresponding) 382.7 389.33 T
(window) 162.9 377.33 T
(.) 194.45 377.33 T
1 F
(X atoms) 162.9 362.33 T
2 F
(:) 198.15 362.33 T
4 F
(Tk_InternAtom) 203.43 362.33 T
2 F
( and) 281.39 362.33 T
4 F
(Tk_GetAtomName) 300.81 362.33 T
2 F
( translate between strings con-) 384.77 362.33 T
(taining the names of X atoms \050e.g. \322RESOURCE_MANAGER\323\051 and X) 162.9 350.33 T
4 F
(Atom) 452.15 350.33 T
2 F
( tokens.) 476.14 350.33 T
(Tk keeps a cache of atom names to avoid communication with the X server) 162.9 338.33 T
(.) 463.52 338.33 T
98.1 294.98 512.1 298 C
152.1 296.2 512.1 296.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 296.49 143.1 296.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(38.5) 117.96 302 T
(Changing window attributes) 152.1 302 T
2 10 Q
(Tk provides a collection of procedures for modifying a window\325) 152.1 278.31 T
(s attributes \050e.g. back-) 408.86 278.31 T
(ground color or cursor\051 and con\336guration \050e.g. position or size\051. These procedures are) 152.1 266.31 T
(summarized in T) 152.1 254.31 T
(able 38.2. The procedures have the same ar) 219.13 254.31 T
(guments as the Xlib proce-) 391.86 254.31 T
-0.15 (dures with corresponding names. They perform the same functions as the Xlib procedures) 152.1 242.31 P
(except that they also retain a local copy of the new information so that it can be returned) 152.1 230.31 T
-0.15 (by the macros described in Section 37.5. For example,) 152.1 218.31 P
4 F
-0.37 (Tk_ResizeWindow) 370.56 218.31 P
2 F
-0.15 ( is similar to) 460.51 218.31 P
(the Xlib procedure) 152.1 206.31 T
4 F
(XResizeWindow) 229.54 206.31 T
2 F
( in that it modi\336es the dimensions of a window) 307.49 206.31 T
(.) 494.8 206.31 T
(However) 152.1 194.31 T
(, it also remembers the new dimensions so they can be accessed with the) 188.33 194.31 T
4 F
(Tk_Width) 152.1 182.31 T
2 F
( and) 200.07 182.31 T
4 F
(Tk_Height) 219.5 182.31 T
2 F
( macros.) 273.47 182.31 T
-0.22 (Only a few of the procedures in T) 170.1 170.31 P
-0.22 (able 38.2, such as) 303.01 170.31 P
4 F
-0.53 (Tk_SetWindowBackground) 375.4 170.31 P
2 F
-0.22 (,) 507.33 170.31 P
(are normally invoked by widgets. W) 152.1 158.31 T
(idgets should de\336nitely) 297.71 158.31 T
5 F
(not) 393.5 158.31 T
2 F
( invoke procedures like) 406.27 158.31 T
FMENDPAGE
%%EndPage: "347" 30
%%Page: "348" 30
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(348) 98.1 668.33 T
3 F
(Con\336guring Widgets) 422.12 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
4 10 Q
0 X
-0.66 (Tk_MoveWindow) 152.1 243.53 P
2 F
-0.28 ( or) 230.06 243.53 P
4 F
-0.66 (Tk_ResizeWindow) 242.83 243.53 P
2 F
-0.28 (: only geometry managers should change the) 332.78 243.53 P
(size or location of a window) 152.1 231.53 T
(.) 264.98 231.53 T
98.1 188.18 512.1 191.2 C
152.1 189.4 512.1 189.4 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 189.69 143.1 189.69 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(38.6) 117.96 195.2 T
(The square con\336gure procedure) 152.1 195.2 T
2 10 Q
(Figure 38.1 contains the code for the square widget\325) 152.1 171.51 T
(s con\336gure procedure. Its) 360.01 171.51 T
4 F
(argv) 464.09 171.51 T
2 F
( ar) 488.08 171.51 T
(gu-) 498.16 171.51 T
(ment contains pairs of strings that specify con\336guration options.Most of the work is done) 152.1 159.51 T
(by) 152.1 147.51 T
4 F
(Tk_Conf) 164.59 147.51 T
(igureWidget) 206.57 147.51 T
2 F
(. Once) 272.53 147.51 T
4 F
(Tk_Conf) 301.12 147.51 T
(igureWidget) 343.1 147.51 T
2 F
( returns,) 409.06 147.51 T
4 F
(Conf) 444.31 147.51 T
(igur-) 468.3 147.51 T
98.1 135 512.1 639 C
98.1 250.2 512.1 639 C
98.1 323 512.1 337.4 C
98.1 323 512.1 337.4 R
7 X
0 K
V
152.1 330.92 512.1 330.92 2 L
V
0.5 H
2 Z
0 X
N
98.1 250.2 512.1 639 C
1 9 Q
0 X
0 K
(T) 152.1 317 T
(able  38.2.) 157.27 317 T
2 F
(Tk procedures for modifying attributes and window con\336guration information.) 200.21 317 T
4 F
(Tk_ChangeWindowAttributes) 152.1 308 T
2 F
( and) 286.91 308 T
4 F
(Tk_Conf) 304.38 308 T
(igureWindow) 342.13 308 T
2 F
( allow any or all of the) 401.45 308 T
(attributes or con\336guration to be set at once \050) 152.1 299 T
4 F
(valueMask) 310.85 299 T
2 F
( selects which values should be set\051; the) 359.39 299 T
98.1 272.6 512.1 287 C
98.1 272.6 512.1 287 R
7 X
0 K
V
152.1 280.52 512.1 280.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 250.2 512.1 639 C
2 9 Q
0 X
0 K
(other procedures set selected \336elds individually) 152.1 290 T
(.) 322.5 290 T
4 F
(Tk_ChangeWindowAttributes\050Tk_Window tkwin, unsigned int value-) 158.1 625.4 T
(Mask,) 230.1 616.4 T
(XSetWindowAttributes *attsPtr\051) 179.67 607.4 T
(Tk_Conf) 158.1 588.4 T
(igureWindow\050Tk_Window tkwin, unsigned int valueMask,) 195.85 588.4 T
(XWindowChanges *valuePtr\051) 179.67 579.4 T
(Tk_Def) 158.1 560.4 T
(ineCursor\050Tk_Window tkwin, Cursor cursor\051) 190.45 560.4 T
(Tk_MoveWindow\050Tk_Window tkwin, int x, int y\051) 158.1 541.4 T
(Tk_MoveResizeWindow\050Tk_Window tkwin, int x, int y,) 158.1 522.4 T
(unsigned int width, unsigned int height\051) 179.67 513.4 T
(Tk_ResizeWindow\050Tk_Window tkwin, unsgined int width,) 158.1 494.4 T
(unsigned int height\051) 179.67 485.4 T
(Tk_SetWindowBackground\050Tk_Window tkwin, unsigned long pixel\051) 158.1 466.4 T
(Tk_SetWindowBackgroundPixmap\050Tk_Window tkwin, Pixmap pixmap\051) 158.1 447.4 T
(Tk_SetWindowBorder\050Tk_Window tkwin, unsigned long pixel\051) 158.1 428.4 T
(Tk_SetWindowBorderPixmap\050Tk_Window tkwin, Pixmap pixmap\051) 158.1 409.4 T
(Tk_SetWindowBorderWidth\050Tk_Window tkwin, int width\051) 158.1 390.4 T
(Tk_SetWindowColormap\050Tk_Window tkwin, Colormap colormap\051) 158.1 371.4 T
(Tk_Undef) 158.1 352.4 T
(ineCursor\050Tk_Window tkwin\051) 201.24 352.4 T
152.1 637.15 152.1 345.65 2 L
V
0.5 H
0 Z
N
512.1 637.15 512.1 345.65 2 L
V
N
151.85 637.4 512.35 637.4 2 L
V
N
151.85 600.4 512.35 600.4 2 L
V
0.25 H
N
151.85 572.4 512.35 572.4 2 L
V
N
151.85 553.4 512.35 553.4 2 L
V
N
151.85 534.4 512.35 534.4 2 L
V
N
151.85 506.4 512.35 506.4 2 L
V
N
151.85 478.4 512.35 478.4 2 L
V
N
151.85 459.4 512.35 459.4 2 L
V
N
151.85 440.4 512.35 440.4 2 L
V
N
151.85 421.4 512.35 421.4 2 L
V
N
151.85 402.4 512.35 402.4 2 L
V
N
151.85 383.4 512.35 383.4 2 L
V
N
151.85 364.4 512.35 364.4 2 L
V
N
151.85 345.4 512.35 345.4 2 L
V
0.5 H
N
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "348" 31
%%Page: "349" 31
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
(38.7 The square widget command procedure) 98.1 668.33 T
0 F
(349) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
4 10 Q
0 X
(eSquare) 152.1 333.53 T
2 F
( extracts the color associated with the) 194.08 333.53 T
4 F
(-background) 346.46 333.53 T
2 F
( option and calls) 412.43 333.53 T
4 F
(Tk_SetWindowBackground) 152.1 321.53 T
2 F
( to use it as the background color for the widget\325) 284.03 321.53 T
(s win-) 477.78 321.53 T
(dow) 152.1 309.53 T
(. Then it allocates a graphics context that will be used during redisplay to copy bits) 168.66 309.53 T
(from an of) 152.1 297.53 T
(f-screen pixmap into the window \050unless some previous call to the procedure) 194.11 297.53 T
(has already allocated the graphics context\051. Next) 152.1 285.53 T
4 F
(Conf) 349.16 285.53 T
(igureSquare) 373.15 285.53 T
2 F
( calls) 439.11 285.53 T
4 F
(Tk_Geom-) 462.43 285.53 T
(etryRequest) 152.1 273.53 T
2 F
( and) 218.06 273.53 T
4 F
(Tk_SetInternalBorderWidth) 237.49 273.53 T
2 F
( to provide information to its) 387.41 273.53 T
(geometry manager \050this will be discussed in Chapter 43\051. Finally) 152.1 261.53 T
(, it arranges for the wid-) 410.73 261.53 T
(get to be redisplayed; this will be discussed in Chapter 40.) 152.1 249.53 T
98.1 206.18 512.1 209.2 C
152.1 207.4 512.1 207.4 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 207.69 143.1 207.69 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(38.7) 117.96 213.2 T
(The square widget command procedure) 152.1 213.2 T
2 10 Q
(Figures 38.2 and 38.3 contain the C code for) 170.1 189.51 T
4 F
(SquareWidgetCommand) 350.81 189.51 T
2 F
(, which) 464.75 189.51 T
-0.09 (implements widget commands for square widgets. The main portion of the procedure con-) 152.1 177.51 P
-0.17 (sists of a series of) 152.1 165.51 P
4 F
-0.41 (if) 224.81 165.51 P
2 F
-0.17 ( statements that compare) 236.81 165.51 P
4 F
-0.41 (argv[1]) 337.72 165.51 P
2 F
-0.17 ( successively to \322) 379.7 165.51 P
4 F
-0.41 (conf) 448.86 165.51 P
-0.41 (igure) 472.85 165.51 P
2 F
-0.17 (\323,) 502.83 165.51 P
-0.09 (\322) 152.1 153.51 P
4 F
-0.21 (position) 156.54 153.51 P
2 F
-0.09 (\323, and \322) 204.51 153.51 P
4 F
-0.21 (size) 235.14 153.51 P
2 F
-0.09 (\323, which are the three widget commands de\336ned for squares. If) 259.12 153.51 P
98.1 135 512.1 639 C
98.1 340.2 512.1 639 C
4 9 Q
0 X
0 K
(int Conf) 152.1 633 T
(igureSquare\050Tcl_Interp *interp, Square *squarePtr,) 195.24 633 T
(int argc, char *argv[], int f) 192.35 623 T
(lags\051 {) 348.73 623 T
(if \050Tk_Conf) 172.19 613 T
(igureWidget\050interp, squarePtr->tkwin, conf) 231.51 613 T
(igSpecs,) 457.99 613 T
(argc, argv, \050char *\051 squarePtr, f) 212.44 603 T
(lags\051 != TCL_OK\051 {) 390.39 603 T
(return TCL_ERROR;) 192.35 593 T
(}) 172.19 583 T
(Tk_SetWindowBackground\050squarePtr->tkwin,) 172.19 573 T
(Tk_3DBorderColor\050squarePtr->bgBorder\051\051;) 212.44 563 T
(if \050squarePtr->gc == None\051 {) 172.19 553 T
(XGCValues gcValues;) 192.35 543 T
(gcValues.function = GXcopy;) 192.35 533 T
(gcValues.graphics_exposures = False;) 192.35 523 T
(squarePtr->gc = Tk_GetGC\050squarePtr->tkwin,) 192.35 513 T
(GCFunction|GCGraphicsExposures, &gcValues\051;) 232.52 503 T
(}) 172.19 493 T
(Tk_GeometryRequest\050squarePtr->tkwin, 200, 150\051;) 172.19 483 T
(Tk_SetInternalBorder\050squarePtr->tkwin,) 172.19 473 T
(squarePtr->borderWidth\051;) 212.44 463 T
(if \050!squarePtr->updatePending\051 {) 172.19 453 T
(Tk_DoWhenIdle\050DisplaySquare, \050ClientData\051 squarePtr\051;) 192.35 443 T
(squarePtr->updatePending = 1;) 192.35 433 T
(}) 172.19 423 T
(return TCL_OK;) 172.19 413 T
(}) 152.1 403 T
98.1 381.6 512.1 396 C
98.1 381.6 512.1 396 R
7 X
0 K
V
152.1 389.52 512.1 389.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 340.2 512.1 639 C
1 9 Q
0 X
0 K
(Figur) 152.1 375.6 T
(e  38.1.) 173.41 375.6 T
2 F
(The con\336gure procedure for square widgets. It is invoked by the creation procedure) 204.36 375.6 T
98.1 349.2 512.1 363.6 C
98.1 349.2 512.1 363.6 R
7 X
0 K
V
152.1 357.12 512.1 357.12 2 L
V
0.5 H
2 Z
0 X
N
98.1 340.2 512.1 639 C
2 9 Q
0 X
0 K
(and by the widget command procedure to set and modify con\336guration options.) 152.1 366.6 T
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "349" 32
%%Page: "350" 32
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(350) 98.1 668.33 T
3 F
(Con\336guring Widgets) 422.12 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 135 512.1 639 C
98.1 135 512.1 639 C
4 9 Q
0 X
0 K
(int SquareWidgetCmd\050ClientData clientData, Tcl_Interp *interp,) 152.1 633 T
(int argc, char *argv[]\051 {) 192.35 623 T
(Square *squarePtr = \050Square *\051 clientData;) 172.19 613 T
(int result = TCL_OK;) 172.19 603 T
(if \050argc < 2\051 {) 172.19 583 T
(Tcl_AppendResult\050interp, "wrong # args: should be \134"",) 192.35 573 T
(argv[0], " option ?arg arg ...?\134"",) 232.52 563 T
(\050char *\051 NULL\051;) 232.52 553 T
(return TCL_ERROR;) 192.35 543 T
(}) 172.19 533 T
(Tk_Preserve\050\050ClientData\051 squarePtr\051;) 172.19 513 T
(if \050strcmp\050argv[1], "conf) 172.19 503 T
(igure"\051 == 0\051 {) 307 503 T
(if \050argc == 2\051 {) 192.35 493 T
(result = Tk_Conf) 212.44 483 T
(igureInfo\050interp, squarePtr->tkwin,) 298.71 483 T
(\050char *\051 squarePtr, \050char *\051 NULL, 0\051;) 252.68 473 T
(} else if \050argc == 3\051 {) 192.35 463 T
(result = Tk_Conf) 212.44 453 T
(igureInfo\050interp, squarePtr->tkwin,) 298.71 453 T
(\050char *\051 squarePtr, argv[2], 0\051;) 252.68 443 T
(} else {) 192.35 433 T
(result = Conf) 212.44 423 T
(igureSquare\050interp, squarePtr,) 282.54 423 T
(argc-2, argv+2, TK_CONFIG_ARGV_ONLY\051;) 252.68 413 T
(}) 192.35 403 T
(} else if \050strcmp\050argv[1], "position"\051 == 0\051 {) 172.19 393 T
(if \050\050argc != 2\051 && \050argc != 4\051\051 {) 192.35 383 T
(Tcl_AppendResult\050interp,"wrong # args: should be \134"",) 212.44 373 T
(argv[0], " position ?x y?\134"", \050char *\051 NULL\051;) 252.68 363 T
(goto error;) 212.44 353 T
(}) 192.35 343 T
(if \050argc == 4\051 {) 192.35 333 T
(if \050\050Tk_GetPixels\050interp, squarePtr->tkwin,) 212.44 323 T
(argv[2], &squarePtr->x\051 != TCL_OK\051 ||) 252.68 313 T
(\050Tk_GetPixels\050interp, squarePtr->tkwin,) 252.68 303 T
(argv[3], &squarePtr->y\051 != TCL_OK\051\051 {) 252.68 293 T
(goto error;) 232.52 283 T
(}) 212.44 273 T
(KeepInWindow\050squarePtr\051;) 212.44 263 T
(}) 192.35 253 T
(sprintf\050interp->result, "%d %d", squarePtr->x,) 192.35 243 T
(squarePtr->y\051;) 232.52 233 T
(} else if \050strcmp\050argv[1], "size"\051 == 0\051 {) 172.19 223 T
98.1 201.6 512.1 216 C
98.1 201.6 512.1 216 R
7 X
0 K
V
152.1 209.52 512.1 209.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 135 512.1 639 C
98.1 178.2 512.1 192.6 C
98.1 178.2 512.1 192.6 R
7 X
0 K
V
152.1 186.12 512.1 186.12 2 L
V
0.5 H
2 Z
0 X
N
98.1 135 512.1 639 C
1 9 Q
0 X
0 K
(Figur) 152.1 195.6 T
(e  38.2.) 173.41 195.6 T
2 F
(The widget command procedure for square widgets. Continued in Figure 38.3.) 204.36 195.6 T
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "350" 33
%%Page: "351" 33
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
(38.7 The square widget command procedure) 98.1 668.33 T
0 F
(351) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
4 10 Q
0 X
(argv[1]) 152.1 207.53 T
2 F
( matches one of these strings then the corresponding code is executed; other-) 194.08 207.53 T
(wise an error is generated.) 152.1 195.53 T
(The) 170.1 183.53 T
4 F
(conf) 188.14 183.53 T
(igure) 212.13 183.53 T
2 F
( widget command is handled in one three ways, depending on how) 242.11 183.53 T
-0.29 (many additional ar) 152.1 171.53 P
-0.29 (guments it receives. If at most one additional ar) 226.28 171.53 P
-0.29 (gument is provided then) 413.89 171.53 P
4 F
(SquareWidgetCmd) 152.1 159.53 T
2 F
( calls) 242.05 159.53 T
4 F
(Tk_Conf) 265.37 159.53 T
(igureInfo) 307.35 159.53 T
2 F
( to create descriptive information for) 361.32 159.53 T
(one or all of the widget\325) 152.1 147.53 T
(s con\336guration options. If two or more additional ar) 247.87 147.53 T
(guments are) 455.05 147.53 T
98.1 135 512.1 639 C
98.1 214.2 510.3 639 C
4 9 Q
0 X
0 K
(if \050\050argc != 2\051 && \050argc != 3\051\051 {) 172.19 633 T
(Tcl_AppendResult\050interp, "wrong # args: should be \134"",) 212.44 623 T
(argv[0], " size ?amount?\134"", \050char *\051 NULL\051;) 252.68 613 T
(goto error;) 212.44 603 T
(}) 192.35 593 T
(if \050argc == 3\051 {) 192.35 583 T
(int i;) 212.44 573 T
(if \050Tk_GetPixels\050interp, squarePtr->tkwin, argv[2],) 212.44 563 T
(&i\051 != TCL_OK\051 {) 252.68 553 T
(goto error;) 232.52 543 T
(}) 212.44 533 T
(if \050\050i <= 0\051 || \050i > 100\051\051 {) 212.44 523 T
(Tcl_AppendResult\050interp, "bad size \134"", argv[2],) 232.52 513 T
("\134"", \050char *\051 NULL\051;) 272.77 503 T
(goto error;) 232.52 493 T
(}) 212.44 483 T
(squarePtr->size = i;) 212.44 473 T
(KeepInWindow\050squarePtr\051;) 212.44 463 T
(}) 192.35 453 T
(sprintf\050interp->result, "%d", squarePtr->size\051;) 192.35 443 T
(} else {) 172.19 433 T
(Tcl_AppendResult\050interp, "bad option \134"", argv[1],) 192.35 423 T
("\134": must be conf) 232.52 413 T
(igure, position, or size",) 324.2 413 T
(\050char *\051 NULL\051;) 232.52 403 T
(goto error;) 192.35 393 T
(}) 172.19 383 T
(if \050!squarePtr->updatePending\051 {) 172.19 373 T
(Tk_DoWhenIdle\050DisplaySquare, \050ClientData\051 squarePtr\051;) 192.35 363 T
(squarePtr->updatePending = 1;) 192.35 353 T
(}) 172.19 343 T
(Tk_Release\050\050ClientData\051 squarePtr\051;) 172.19 333 T
(return result;) 172.19 323 T
(error:) 172.19 303 T
(Tk_Release\050\050ClientData\051 squarePtr\051;) 172.19 293 T
(return TCL_ERROR;) 172.19 283 T
(}) 152.1 273 T
98.1 251.6 508.5 266 C
98.1 251.6 508.5 266 R
7 X
0 K
V
152.1 259.52 512.1 259.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 214.2 510.3 639 C
98.1 228.2 508.5 242.6 C
98.1 228.2 508.5 242.6 R
7 X
0 K
V
152.1 236.12 512.1 236.12 2 L
V
0.5 H
2 Z
0 X
N
98.1 214.2 510.3 639 C
1 9 Q
0 X
0 K
(Figur) 152.1 245.6 T
(e  38.3.) 173.41 245.6 T
2 F
(The widget command procedure for square widgets, continued from Figure 38.2.) 204.36 245.6 T
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "351" 34
%%Page: "352" 34
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(352) 98.1 668.33 T
3 F
(Con\336guring Widgets) 422.12 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(provided then) 152.1 333.53 T
4 F
(SquareWidgetCmd) 209.84 333.53 T
2 F
( passes the additional ar) 299.79 333.53 T
(guments to) 395.1 333.53 T
4 F
(Conf) 441.74 333.53 T
(igur-) 465.73 333.53 T
(eSquare) 152.1 321.3 T
2 F
( for processing;) 194.08 321.3 T
4 F
(SquareWidgetCmd) 258.75 321.3 T
2 F
( speci\336es the) 348.7 321.3 T
4 F
(TK_CONFIG_ARGV_ONLY) 152.1 309.08 T
2 F
( \337ag, which) 266.04 309.08 T
4 F
(Conf) 315.45 309.08 T
(igureSquare) 339.44 309.08 T
2 F
( passes on to) 405.4 309.08 T
4 F
(Tk_Con-) 458.7 309.08 T
(f) 152.1 296.85 T
(igureWidget) 158.1 296.85 T
2 F
( so that options not speci\336ed explicitly by) 224.06 296.85 T
4 F
(argv) 393.42 296.85 T
2 F
( are left as-is.) 417.4 296.85 T
-0.03 (The) 170.1 284.85 P
4 F
-0.06 (position) 188.11 284.85 P
2 F
-0.03 ( and) 236.09 284.85 P
4 F
-0.06 (size) 255.46 284.85 P
2 F
-0.03 ( widget commands change the geometry of the square dis-) 279.45 284.85 P
-0.1 (played in the widget, and they have similar implementations. If new values for the geome-) 152.1 272.62 P
-0.18 (try are speci\336ed then each command calls) 152.1 260.39 P
4 F
-0.44 (Tk_GetPixels) 320.4 260.39 P
2 F
-0.18 ( to convert the ar) 392.36 260.39 P
-0.18 (gument\050s\051 to) 459.17 260.39 P
-0.04 (pixel distances. The) 152.1 248.16 P
4 F
-0.1 (size) 234.13 248.16 P
2 F
-0.04 ( widget command also checks to make sure that the new size is) 258.12 248.16 P
-0.32 (within a particular range of values. Then both commands invoke) 152.1 235.93 P
4 F
-0.78 (KeepInWindow) 409.51 235.93 P
2 F
-0.32 (, which) 480.82 235.93 P
(adjusts the position of the square if necessary to ensure that it is fully visible in the wid-) 152.1 223.71 T
(get\325) 152.1 211.48 T
(s window \050see Figure 38.4\051. Finally) 167.09 211.48 T
(, the commands print the current values into) 308.85 211.48 T
4 F
(interp->result) 152.1 199.25 T
2 F
( to return them as result.) 236.05 199.25 T
4 F
-1.13 (SquareWidgetCmd) 170.1 187.25 P
2 F
-0.47 ( invokes the procedures) 260.05 187.25 P
4 F
-1.13 (Tk_Preserve) 355.31 187.25 P
2 F
-0.47 ( and) 421.27 187.25 P
4 F
-1.13 (Tk_Release) 439.76 187.25 P
2 F
-0.47 ( as) 499.72 187.25 P
-0.19 (a way of preventing the widget record from being destroyed while the widget command is) 152.1 175.02 P
(executing. Chapter 41 will discuss these procedures in more detail. The square widget is) 152.1 162.79 T
(so simple that the calls aren\325) 152.1 150.56 T
(t actually needed, but virtually all real widgets do need them) 266.01 150.56 T
(so I put them in) 152.1 138.33 T
4 F
(SquareWidgetCmd) 217.34 138.33 T
2 F
( too.) 307.3 138.33 T
98.1 135 512.1 639 C
98.1 340.2 512.1 639 C
4 9 Q
0 X
0 K
(void KeepInWindow\050Square *squarePtr\051 {) 152.1 633 T
(int i, bd;) 172.19 623 T
(bd = 0;) 172.19 613 T
(if \050squarePtr->relief != TK_RELIEF_FLAT\051 {) 172.19 603 T
(bd = squarePtr->borderWidth;) 192.35 593 T
(}) 172.19 583 T
(i = \050Tk_Width\050squarePtr->tkwin\051 - bd\051) 172.19 573 T
(- \050squarePtr->x + squarePtr->size\051;) 212.44 563 T
(if \050i < 0\051 {) 172.19 553 T
(squarePtr->x += i;) 192.35 543 T
(}) 172.19 533 T
(i = \050Tk_Height\050squarePtr->tkwin\051 - bd\051) 172.19 523 T
(- \050squarePtr->y + squarePtr->size\051;) 212.44 513 T
(if \050i < 0\051 {) 172.19 503 T
(squarePtr->y += i;) 192.35 493 T
(}) 172.19 483 T
(if \050squarePtr->x < bd\051 {) 172.19 473 T
(squarePtr->x = bd;) 192.35 463 T
(}) 172.19 453 T
(if \050squarePtr->y < bd\051 {) 172.19 443 T
(squarePtr->y = bd;) 192.35 433 T
(}) 172.19 423 T
(}) 152.1 413 T
98.1 391.6 512.1 406 C
98.1 391.6 512.1 406 R
7 X
0 K
V
152.1 399.52 512.1 399.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 340.2 512.1 639 C
1 9 Q
0 X
0 K
-0.28 (Figur) 152.1 385.6 P
-0.28 (e  38.4.) 173.41 385.6 P
2 F
-0.28 (The) 203.23 385.6 P
4 F
-0.68 (KeepInWindow) 219.17 385.6 P
2 F
-0.28 ( procedure adjusts the location of the square to make sure that it) 283.88 385.6 P
98.1 359.2 512.1 373.6 C
98.1 359.2 512.1 373.6 R
7 X
0 K
V
152.1 367.12 512.1 367.12 2 L
V
0.5 H
2 Z
0 X
N
98.1 340.2 512.1 639 C
2 9 Q
0 X
0 K
(is visible in the widget\325) 152.1 376.6 T
(s window) 235.99 376.6 T
(.) 270.11 376.6 T
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "352" 35
%%Page: "353" 35
612 792 0 FMBEGINPAGE
98.1 675 512.1 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
98.1 450 512.1 450 2 L
7 X
V
2 Z
0 X
N
98.1 108 512.1 126 R
7 X
V
0 10 Q
0 X
(353) 495.43 119.33 T
98.1 54 512.1 108 R
7 X
V
2 9 Q
0 X
(Copyright \251 1993 Addison-W) 152.1 102 T
(esley Publishing Company) 261.32 102 T
(, Inc.) 357.1 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 152.1 91 T
(. Any) 485.77 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 152.1 80 T
-0.34 (lisher) 152.1 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 171.58 69 P
(does not of) 152.1 58 T
(fer warranties in regard to this draft.) 191.88 58 T
1 24 Q
(Chapter 39) 152.1 605 T
-0.48 (Events) 152.1 575 S
98.1 135 512.1 423 R
7 X
V
2 10 Q
0 X
(This chapter describes Tk\325) 152.1 416.33 T
(s library procedures for event handling. The code you\325ll write) 257.85 416.33 T
-0.28 (for event handling divides into three parts. The \336rst part consists of code that creates event) 152.1 404.33 P
-0.34 (handlers: it informs Tk that certain callback procedures should be invoked when particular) 152.1 392.33 P
-0.1 (events occur) 152.1 380.33 P
-0.1 (. The second part consists of the callbacks themselves. The third part consists) 201.68 380.33 P
(of top-level code that invokes the Tk event dispatcher to process events.) 152.1 368.33 T
(Tk supports three kinds of events: X events, \336le events \050e.g. a particular \336le has just) 170.1 356.33 T
(become readable\051, and timer events. Tk also allows you to create) 152.1 344.33 T
5 F
(idle callbacks) 413.84 344.33 T
2 F
(, which) 469.08 344.33 T
(cause procedures to be invoked when Tk runs out of other things to do; idle callbacks are) 152.1 332.33 T
(used to defer redisplays and other computations until all pending events have been pro-) 152.1 320.33 T
(cessed. Tk\325) 152.1 308.33 T
(s procedures for event handling are summarized in T) 197.07 308.33 T
(able 39.1.) 407.31 308.33 T
(If you are not already familiar with X events, I recommend reading about them in) 170.1 296.33 T
(your favorite Xlib documentation before reading this chapter) 152.1 284.33 T
(.) 394.98 284.33 T
98.1 240.98 512.1 244 C
152.1 242.2 512.1 242.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 242.49 143.1 242.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(39.1) 117.96 248 T
(X events) 152.1 248 T
2 10 Q
(The X window server generates a number of dif) 152.1 224.31 T
(ferent events to report interesting things) 343.42 224.31 T
(that occur in the window system, such as mouse presses or changes in a window\325) 152.1 212.31 T
(s size.) 476.04 212.31 T
(Chapter XXX showed how you can use Tk\325) 152.1 200.31 T
(s) 326.69 200.31 T
4 F
(bind) 333.08 200.31 T
2 F
( command to write event handlers as) 357.07 200.31 T
(T) 152.1 188.31 T
(cl scripts. This section describes how to write event handlers in C. T) 157.51 188.31 T
(ypically you\325ll only) 429.96 188.31 T
(use C handlers for four kinds of X events:) 152.1 176.31 T
4 F
-0.07 (Expose) 162.9 161.31 P
2 F
-0.03 (: these events notify the widget that part or all of its window needs to be redis-) 198.88 161.31 P
(played.) 162.9 149.31 T
44.1 351 98.1 423 C
35.1 360 197.1 414 R
7 X
0 K
V
1 9 Q
0 X
(FIGURE  39) 35.1 408 T
(T) 35.1 387 T
(ABLE  39) 40.43 387 T
26.1 351 125.1 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "353" 36
%%Page: "354" 36
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(354) 98.1 668.33 T
3 F
(Events) 481.55 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 135 512.1 639 C
98.1 138.6 512.1 639 C
98.1 213 512.1 227.4 C
98.1 213 512.1 227.4 R
7 X
0 K
V
152.1 220.92 512.1 220.92 2 L
V
0.5 H
2 Z
0 X
N
98.1 138.6 512.1 639 C
98.1 189.6 512.1 204 C
98.1 189.6 512.1 204 R
7 X
0 K
V
152.1 197.52 512.1 197.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 138.6 512.1 639 C
1 9 Q
0 X
0 K
(T) 152.1 207 T
(able  39.1.) 157.27 207 T
2 F
(A summary of the Tk library procedures for event handling.) 200.21 207 T
4 F
(void Tk_CreateEventHandler\050Tk_Window tkwin, unsigned long mask,) 158.1 625.4 T
(Tk_EventProc *proc, ClientData clientData\051) 179.67 616.4 T
2 F
(Arranges for) 230.1 607.4 T
4 F
(proc) 278.01 607.4 T
2 F
( to be invoked whenever any of the events selected by) 299.58 607.4 T
4 F
(mask) 230.1 598.4 T
2 F
( occurs for) 251.67 598.4 T
4 F
(tkwin) 292.35 598.4 T
2 F
(.) 319.31 598.4 T
4 F
(void Tk_DeleteEventHandler\050Tk_Window tkwin, unsigned long mask,) 158.1 589.4 T
(Tk_EventProc *proc, ClientData clientData\051) 179.67 580.4 T
2 F
(Deletes the event handler that matches) 230.1 571.4 T
4 F
(mask) 370.87 571.4 T
2 F
(,) 392.44 571.4 T
4 F
(proc) 396.93 571.4 T
2 F
(, and) 418.5 571.4 T
4 F
(clientData) 438.22 571.4 T
2 F
(, if) 492.15 571.4 T
(such a handler exists.) 230.1 562.4 T
4 F
(void Tk_CreateFileHandler\050int fd, int mask, Tk_FileProc *proc,) 158.1 543.4 T
(ClientData clientData\051) 179.67 534.4 T
2 F
-0.34 (Arranges for) 230.1 525.4 P
4 F
-0.81 (proc) 277.33 525.4 P
2 F
-0.34 ( to be invoked whenver one of the conditions indicated by) 298.9 525.4 P
4 F
(mask) 230.1 516.4 T
2 F
( occurs for the \336le whose descriptor number is) 251.67 516.4 T
4 F
(fd) 420.65 516.4 T
2 F
(.) 431.44 516.4 T
4 F
(void Tk_DeleteFileHandler\050int fd\051) 158.1 507.4 T
2 F
(Deletes the \336le handler for) 230.1 498.4 T
4 F
(fd) 328.19 498.4 T
2 F
(, if one exists.) 338.97 498.4 T
4 F
(Tk_TimerToken Tk_CreateTimerHandler\050int milliseconds,) 158.1 479.4 T
(Tk_TimerProc *proc, ClientData clientData\051) 179.67 470.4 T
2 F
(Arranges for) 230.1 461.4 T
4 F
(proc) 278.01 461.4 T
2 F
( to be invoked after) 299.58 461.4 T
4 F
(milliseconds) 371.71 461.4 T
2 F
( have elapsed.) 436.42 461.4 T
(Returns a token that can be used to cancel the callback.) 230.1 452.4 T
4 F
(void Tk_DeleteTimerHandler\050Tk_TimerToken token\051) 158.1 443.4 T
2 F
(Cancels the timer callback indicated by) 230.1 434.4 T
4 F
(token) 373.87 434.4 T
2 F
(, if it hasn\325) 400.83 434.4 T
(t yet triggered.) 439.61 434.4 T
4 F
(void Tk_DoWhenIdle\050Tk_IdleProc *proc, ClientData clientData\051) 158.1 415.4 T
2 F
(Arranges for) 230.1 406.4 T
4 F
(proc) 278.01 406.4 T
2 F
( to be invoked when Tk has nothing else to do.) 299.58 406.4 T
4 F
(void Tk_CancelIdleCall\050Tk_IdleProc *proc, ClientData clientData\051) 158.1 397.4 T
2 F
(Deletes any existing idle callbacks for) 230.1 388.4 T
4 F
(idleProc) 369.38 388.4 T
2 F
( and) 412.52 388.4 T
4 F
(clientData) 429.99 388.4 T
2 F
(.) 483.91 388.4 T
4 F
(void Tk_CreateGenericHandler\050Tk_GenericProc *proc,) 158.1 369.4 T
(ClientData clientData\051) 179.67 360.4 T
2 F
(Arranges for) 230.1 351.4 T
4 F
(proc) 278.01 351.4 T
2 F
( to be invoked whenever any X event is received by this) 299.58 351.4 T
(process.) 230.1 342.4 T
4 F
(void Tk_DeleteGenericHandler\050Tk_GenericProc *proc,) 158.1 333.4 T
(ClientData clientData\051) 179.67 324.4 T
2 F
(Deletes the generic handler given by) 230.1 315.4 T
4 F
(proc) 363.88 315.4 T
2 F
( and) 385.45 315.4 T
4 F
(clientData) 402.92 315.4 T
2 F
(, if such a) 456.84 315.4 T
(handler exists.) 230.1 306.4 T
4 F
(void Tk_MainLoop\050void\051) 158.1 287.4 T
2 F
(Processes events until there are no more windows left in this process.) 230.1 278.4 T
4 F
(int Tk_DoOneEvent\050int f) 158.1 269.4 T
(lags\051) 282.13 269.4 T
2 F
(Processes a single event of any sort and then returns.) 230.1 260.4 T
4 F
(Flags) 422.04 260.4 T
2 F
( is normally 0) 449.01 260.4 T
(but may be used to restrict the events that will be processed or to return) 230.1 251.4 T
(immediately if there are no pending events.) 230.1 242.4 T
152.1 637.15 152.1 235.65 2 L
V
0.5 H
0 Z
N
512.1 637.15 512.1 235.65 2 L
V
N
151.85 637.4 512.35 637.4 2 L
V
N
151.85 555.4 512.35 555.4 2 L
V
0.25 H
N
151.85 491.4 512.35 491.4 2 L
V
N
151.85 427.4 512.35 427.4 2 L
V
N
151.85 381.4 512.35 381.4 2 L
V
N
151.85 299.4 512.35 299.4 2 L
V
N
151.85 235.4 512.35 235.4 2 L
V
0.5 H
N
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "354" 37
%%Page: "355" 37
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
(39.1 X events) 98.1 668.33 T
0 F
(355) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
4 10 Q
0 X
-0.06 (Conf) 162.9 632.33 P
-0.06 (igureNotify) 186.89 632.33 P
2 F
-0.03 (: these events occur when the window\325) 252.85 632.33 P
-0.03 (s size or position changes) 407.58 632.33 P
(so that it can adjust its layout accordingly \050e.g. centered text may have to be reposi-) 162.9 620.33 T
(tioned\051.) 162.9 608.33 T
4 F
(FocusIn) 162.9 593.33 T
2 F
( and) 204.88 593.33 T
4 F
(FocusOut) 224.31 593.33 T
2 F
(: these events notify the widget that it has gotten or lost the) 272.28 593.33 T
(input focus, so it can turn on or of) 162.9 581.33 T
(f its insertion cursor) 298.46 581.33 T
(.) 378.14 581.33 T
4 F
-0.22 (DestroyNotify) 162.9 566.33 P
2 F
-0.09 (: these events notify the widget that its window has been destroyed,) 240.86 566.33 P
(so it should free up the widget record and any associated resources.) 162.9 554.33 T
(The responses to these events are all relatively obvious and it is unlikely that a user or) 152.1 539.33 T
(application developer would want to deal with the events so it makes sense to hard-code) 152.1 527.33 T
(the responses in C. For most other events, such as key presses and mouse actions, it\325) 152.1 515.33 T
(s bet-) 489.11 515.33 T
(ter to de\336ne the handlers in T) 152.1 503.33 T
(cl with the) 269.1 503.33 T
4 F
(bind) 313.79 503.33 T
2 F
( command. As a widget writer you can cre-) 337.78 503.33 T
(ate class bindings to give the widget its default behavior) 152.1 491.33 T
(, then users can modify the class) 376.28 491.33 T
-0.14 (bindings or augment them with additional widget-speci\336c bindings. By using T) 152.1 479.33 P
-0.14 (cl as much) 467.29 479.33 P
(as possible you\325ll make your widgets more \337exible.) 152.1 467.33 T
(The procedure) 170.1 455.33 T
4 F
(Tk_CreateEventHandler) 230.6 455.33 T
2 F
( is used by widgets to register interest) 356.53 455.33 T
(in X events:) 152.1 443.33 T
4 9 Q
(void Tk_CreateEventHandler\050Tk_Window tkwin, unsigned long) 179.1 429 T
(mask,) 179.1 419 T
(Tk_EventProc *proc, ClientData clientData\051;) 224.75 409 T
2 10 Q
(The) 152.1 395.33 T
4 F
(tkwin) 170.14 395.33 T
2 F
( ar) 200.12 395.33 T
(gument identi\336es a particular window and) 210.21 395.33 T
4 F
(mask) 381.2 395.33 T
2 F
( is an OR\325ed combination) 405.19 395.33 T
(of bits like) 152.1 383.33 T
4 F
(KeyPressMask) 197.35 383.33 T
2 F
( and) 269.32 383.33 T
4 F
(StructureNotifyMask) 288.74 383.33 T
2 F
( that select the events of) 402.68 383.33 T
(interest \050refer to Xlib documentation for details on the mask values that are available\051.) 152.1 371.33 T
(When one of the requested events occurs for) 152.1 359.33 T
4 F
(tkwin) 332.5 359.33 T
2 F
( Tk will invoke) 362.48 359.33 T
4 F
(proc) 426.34 359.33 T
2 F
( to handle the) 450.33 359.33 T
(event.) 152.1 347.33 T
4 F
(Proc) 178.74 347.33 T
2 F
( must match the following prototype:) 202.73 347.33 T
4 9 Q
(typedef void Tk_EventProc\050ClientData clientData, XEvent) 179.1 333 T
(*eventPtr\051;) 179.1 323 T
2 10 Q
(Its \336rst ar) 152.1 309.33 T
(gument will be the same as the) 190.23 309.33 T
4 F
(clientData) 315.98 309.33 T
2 F
( value that was passed to) 375.95 309.33 T
4 F
(Tk_CreateEventHandler) 152.1 297.33 T
2 F
( and the second ar) 278.03 297.33 T
(gument will be a pointer to a structure) 350.01 297.33 T
(containing information about the event \050see your Xlib documentation for details on the) 152.1 285.33 T
(contents of an) 152.1 273.33 T
4 F
(XEvent) 210.67 273.33 T
2 F
( structure\051. There can exist any number of event handlers for a) 246.65 273.33 T
-0.17 (given window and mask but there can be only one event handler with a particular) 152.1 261.33 P
4 F
-0.42 (tkwin) 477.29 261.33 P
2 F
-0.17 (,) 507.28 261.33 P
4 F
-0.16 (mask) 152.1 249.33 P
2 F
-0.06 (,) 176.09 249.33 P
4 F
-0.16 (proc) 181.02 249.33 P
2 F
-0.06 (, and) 205.01 249.33 P
4 F
-0.16 (clientData) 226.8 249.33 P
2 F
-0.06 (. If a particular event matches the) 286.77 249.33 P
4 F
-0.16 (tkwin) 422.31 249.33 P
2 F
-0.06 ( and) 452.29 249.33 P
4 F
-0.16 (mask) 471.59 249.33 P
2 F
-0.06 ( for) 495.58 249.33 P
-0.21 (more than one handler then all of the matching handlers are invoked, in the order in which) 152.1 237.33 P
(they were created.) 152.1 225.33 T
-0.16 (For example, the C code for the square widget deals with) 170.1 213.33 P
4 F
-0.38 (Expose) 399.32 213.33 P
2 F
-0.16 (,) 435.3 213.33 P
4 F
-0.38 (Conf) 440.14 213.33 P
-0.38 (igureNo-) 464.13 213.33 P
(tify) 152.1 201.33 T
2 F
(, and) 175.44 201.33 T
4 F
(DestroyNotify) 197.37 201.33 T
2 F
( events. T) 275.32 201.33 T
(o process these events, the following code is) 313.76 201.33 T
(present in the create procedure for squares \050see Figure 37.1 on page 335\051:) 152.1 189.33 T
4 9 Q
(Tk_CreateEventHandler\050squarePtr->tkwin,) 179.1 175 T
(ExposureMask|StructureNotifyMask,) 224.75 165 T
(SquareEventProc, \050ClientData\051 squarePtr\051;) 224.75 155 T
FMENDPAGE
%%EndPage: "355" 38
%%Page: "356" 38
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(356) 98.1 668.33 T
3 F
(Events) 481.55 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
-0.41 (The) 152.1 329.93 P
4 F
-0.99 (ExposureMask) 169.73 329.93 P
2 F
-0.41 ( bit selects) 241.69 329.93 P
4 F
-0.99 (Expose) 285.14 329.93 P
2 F
-0.41 ( events and) 321.12 329.93 P
4 F
-0.99 (StructureNotifyMask) 367.35 329.93 P
2 F
-0.41 ( selects) 481.28 329.93 P
(both) 152.1 317.93 T
4 F
(Conf) 172.37 317.93 T
(igureNotify) 196.36 317.93 T
2 F
( and) 262.32 317.93 T
4 F
(DestroyNotify) 281.75 317.93 T
2 F
( events, plus several other types of) 359.71 317.93 T
(events. The address of the widget\325) 152.1 305.93 T
(s record is used as the) 288.67 305.93 T
4 F
(ClientData) 378.6 305.93 T
2 F
( for the callback,) 438.56 305.93 T
(so it will be passed to) 152.1 293.93 T
4 F
(SquareEventProc) 240.94 293.93 T
2 F
( as its \336rst ar) 330.89 293.93 T
(gument.) 381.79 293.93 T
(Figure 39.1 contains the code for) 170.1 281.93 T
4 F
(SquareEventProc) 304.73 281.93 T
2 F
(, the event procedure for) 394.68 281.93 T
(square widgets. Whenever an event occurs that matches) 152.1 269.93 T
4 F
(ExposureMask) 377.75 269.93 T
2 F
( or) 449.71 269.93 T
4 F
(Struc-) 463.03 269.93 T
(tureNotifyMask) 152.1 257.93 T
2 F
( Tk will invoke) 236.05 257.93 T
4 F
(SquareEventProc) 299.91 257.93 T
2 F
(.) 389.86 257.93 T
4 F
(SquareEventProc) 394.86 257.93 T
2 F
( casts) 484.81 257.93 T
-0.08 (its) 152.1 245.93 P
4 F
-0.2 (clientData) 163.96 245.93 P
2 F
-0.08 ( ar) 223.93 245.93 P
-0.08 (gument back into a) 233.93 245.93 P
4 F
-0.2 (Square *) 312.44 245.93 P
2 F
-0.08 ( pointer) 360.21 245.93 P
-0.08 (, then checks to see what kind) 390.54 245.93 P
(of event occurred. For) 152.1 233.93 T
4 F
(Expose) 243.41 233.93 T
2 F
( events) 279.39 233.93 T
4 F
(SquareEventProc) 309.92 233.93 T
2 F
( arranges for the widget to) 399.87 233.93 T
(be redisplayed. For) 152.1 221.93 T
4 F
(Conf) 231.49 221.93 T
(igureNotify) 255.47 221.93 T
2 F
( events,) 321.44 221.93 T
4 F
(SquareEventProc) 354.47 221.93 T
2 F
( calls) 444.42 221.93 T
4 F
(KeepIn-) 467.74 221.93 T
(Window) 152.1 209.93 T
2 F
( to make sure that the square is still visible in the window \050see Figure 38.4 on) 188.08 209.93 T
(page 352\051, then) 152.1 197.93 T
4 F
(SquareEventProc) 216.49 197.93 T
2 F
( arranges for the widget to be redrawn. For) 306.45 197.93 T
4 F
-0.07 (DestroyNotify) 152.1 185.93 P
2 F
-0.03 ( events) 230.06 185.93 P
4 F
-0.07 (SquareEventProc) 260.53 185.93 P
2 F
-0.03 ( starts the process of destroying the wid-) 350.48 185.93 P
(get and freeing its widget record; this process will be discussed in more detail in Chapter) 152.1 173.93 T
(41.) 152.1 161.93 T
98.1 135 512.1 639 C
98.1 336.6 510.3 639 C
4 9 Q
0 X
0 K
(void SquareEventProc\050ClientData clientData, XEvent *eventPtr\051 {) 152.1 633 T
(Square *squarePtr = \050Square *\051 clientData;) 172.19 623 T
(if \050eventPtr->type == Expose\051 {) 172.19 613 T
(if \050\050eventPtr->xexpose.count == 0\051) 192.35 603 T
(&& !squarePtr->updatePending\051 {) 232.52 593 T
(Tk_DoWhenIdle\050DisplaySquare, \050ClientData\051 squarePtr\051;) 212.44 583 T
(squarePtr->updatePending = 1;) 212.44 573 T
(}) 192.35 563 T
(} else if \050eventPtr->type == Conf) 172.19 553 T
(igureNotify\051 {) 350.14 553 T
(KeepInWindow\050squarePtr\051;) 192.35 543 T
(if \050!squarePtr->updatePending\051 {) 192.35 533 T
(Tk_DoWhenIdle\050DisplaySquare, \050ClientData\051 squarePtr\051;) 212.44 523 T
(squarePtr->updatePending = 1;) 212.44 513 T
(}) 192.35 503 T
(} else if \050eventPtr->type == DestroyNotify\051 {) 172.19 493 T
(Tcl_DeleteCommand\050squarePtr->interp,) 192.35 483 T
(Tk_PathName\050squarePtr->tkwin\051\051;) 232.52 473 T
(squarePtr->tkwin = NULL;) 192.35 463 T
(if \050squarePtr->f) 192.35 453 T
(lags & REDRAW_PENDING\051 {) 278.63 453 T
(Tk_CancelIdleCall\050DisplaySquare,) 212.44 443 T
(\050ClientData\051 squarePtr\051;) 252.68 433 T
(}) 192.35 423 T
(Tk_EventuallyFree\050\050ClientData\051 squarePtr, DestroySquare\051;) 192.35 413 T
(}) 172.19 403 T
(}) 152.1 393 T
98.1 371.6 508.5 386 C
98.1 371.6 508.5 386 R
7 X
0 K
V
152.1 379.52 512.1 379.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 336.6 510.3 639 C
98.1 348.2 508.5 362.6 C
98.1 348.2 508.5 362.6 R
7 X
0 K
V
152.1 356.12 512.1 356.12 2 L
V
0.5 H
2 Z
0 X
N
98.1 336.6 510.3 639 C
1 9 Q
0 X
0 K
(Figur) 152.1 365.6 T
(e  39.1.) 173.41 365.6 T
2 F
(The event procedure for square widgets.) 204.36 365.6 T
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "356" 39
%%Page: "357" 39
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
(39.2 File events) 98.1 668.33 T
0 F
(357) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(If you should need to cancel an existing X event handler you can invoke) 170.1 632.33 T
4 F
(Tk_Dele-) 461.55 632.33 T
(teEventHandler) 152.1 620.33 T
2 F
( with the same ar) 236.05 620.33 T
(guments that you passed to) 304.16 620.33 T
4 F
(Tk_Cre-) 414.93 620.33 T
(ateEventHandler) 152.1 608.33 T
2 F
( when you created the handler:) 242.05 608.33 T
4 9 Q
(void Tk_DeleteEventHandler\050Tk_Window tkwin, unsigned long) 179.1 594 T
(mask,) 179.1 584 T
(Tk_EventProc *proc, ClientData clientData\051;) 224.75 574 T
2 10 Q
(This deletes the handler corresponding to) 152.1 560.33 T
4 F
(tkwin) 319.76 560.33 T
2 F
(,) 349.74 560.33 T
4 F
(mask) 354.74 560.33 T
2 F
(,) 378.73 560.33 T
4 F
(proc) 383.72 560.33 T
2 F
(, and) 407.71 560.33 T
4 F
(clientData) 429.64 560.33 T
2 F
( so) 489.6 560.33 T
-0.14 (that its callback will not be invoked anymore. If no such handler exists then the procedure) 152.1 548.33 P
(does nothing. Tk automatically deletes all of the event handlers for a window when the) 152.1 536.33 T
(window is destroyed, so most widgets never need to call) 152.1 524.33 T
4 F
(Tk_DeleteEventHandler) 380.01 524.33 T
2 F
(.) 505.39 524.33 T
98.1 480.98 512.1 484 C
152.1 482.2 512.1 482.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 482.49 143.1 482.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(39.2) 117.96 488 T
(File events) 152.1 488 T
2 10 Q
(Event-driven programs like Tk applications should not block for long periods of time) 152.1 464.31 T
(while executing any one operation, since this prevents other events from being serviced.) 152.1 452.31 T
(For example, suppose that a Tk application attempts to read from its standard input at a) 152.1 440.31 T
-0.34 (time when no input is available. The application will block until input appears. During this) 152.1 428.31 P
(time the process will be suspended by the operating system so it cannot service X events.) 152.1 416.31 T
-0.09 (This means, for example, that the application will not be able to respond to mouse actions) 152.1 404.31 P
-0.22 (nor will it be able to redraw itself. Such behavior is likely to be annoying to the user) 152.1 392.31 P
-0.22 (, since) 484.49 392.31 P
(he or she expects to be able to interact with the application at any time.) 152.1 380.31 T
5 F
(File handlers) 170.1 368.31 T
2 F
( provide an event-driven mechanism for reading and writing \336les that) 223.68 368.31 T
-0.19 (may have long I/O delays. The procedure) 152.1 356.31 P
4 F
-0.45 (Tk_CreateFileHandler) 319 356.31 P
2 F
-0.19 ( creates a new \336le) 438.93 356.31 P
(handler:) 152.1 344.31 T
4 9 Q
-0.22 (void Tk_CreateFileHandler\050int fd, int mask, Tk_FileProc *proc,) 179.1 329.98 P
(ClientData clientData\051;) 224.75 319.98 T
2 10 Q
-0.12 (The) 152.1 306.31 P
4 F
-0.3 (fd) 170.01 306.31 P
2 F
-0.12 ( ar) 182.01 306.31 P
-0.12 (gument gives the number of a POSIX \336le descriptor \050e.g. 0 for standard input, 1) 191.97 306.31 P
(for standard output, and so on\051.) 152.1 294.31 T
4 F
(Mask) 279.79 294.31 T
2 F
( indicates when) 303.78 294.31 T
4 F
(proc) 368.45 294.31 T
2 F
( should be invoked. It is an) 392.44 294.31 T
(OR\325ed combination of the following bits:) 152.1 282.31 T
4 F
-0.19 (TK_READABLE) 165.32 267.31 P
2 F
-0.08 ( means that Tk should invoke) 231.28 267.31 P
4 F
-0.19 (proc) 351.28 267.31 P
2 F
-0.08 ( whenever there is data waiting to) 375.27 267.31 P
(be read on) 162.9 255.31 T
4 F
(fd) 207.03 255.31 T
2 F
(;) 219.02 255.31 T
4 F
-0.29 (TK_WRITABLE) 162.9 240.31 P
2 F
-0.12 ( means that Tk should invoke) 228.86 240.31 P
4 F
-0.29 (proc) 348.63 240.31 P
2 F
-0.12 ( whenever) 372.62 240.31 P
4 F
-0.29 (fd) 416.22 240.31 P
2 F
-0.12 ( is capable of accept-) 428.21 240.31 P
(ing more output data;) 162.9 228.31 T
4 F
(TK_EXCEPTION) 162.9 213.31 T
2 F
( means that Tk should invoke) 234.86 213.31 T
4 F
(proc) 355.34 213.31 T
2 F
( whenever an exceptional condi-) 379.33 213.31 T
(tion is present for) 162.9 201.31 T
4 F
(fd) 235.63 201.31 T
2 F
(.) 247.62 201.31 T
(The callback procedure for \336le handlers must match the following prototype:) 152.1 186.31 T
4 9 Q
(typedef void Tk_FileProc\050ClientData clientData,) 179.1 171.98 T
(int mask\051;) 224.75 161.98 T
FMENDPAGE
%%EndPage: "357" 40
%%Page: "358" 40
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(358) 98.1 668.33 T
3 F
(Events) 481.55 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(The) 152.1 632.33 T
4 F
(clientData) 170.14 632.33 T
2 F
( ar) 230.11 632.33 T
(gument will be the same as the) 240.19 632.33 T
4 F
(clientData) 365.94 632.33 T
2 F
( ar) 425.91 632.33 T
(gument to) 435.99 632.33 T
4 F
(Tk_CreateFileHandler) 152.1 620.21 T
2 F
( and) 272.03 620.21 T
4 F
(mask) 291.46 620.21 T
2 F
( will contain a combination of the bits) 315.45 620.21 T
4 F
-0.76 (TK_READABLE) 152.1 608.09 P
2 F
-0.31 (,) 218.06 608.09 P
4 F
-0.76 (TK_WRITABLE) 222.75 608.09 P
2 F
-0.31 (, and) 288.71 608.09 P
4 F
-0.76 (TK_EXCEPTION) 310.01 608.09 P
2 F
-0.31 ( to indicate the state of the \336le at) 381.97 608.09 P
(the time of the callback. There can exist only one \336le handler for a given \336le at a time; if) 152.1 595.97 T
(you call) 152.1 583.85 T
4 F
(Tk_CreateFileHandler) 186.52 583.85 T
2 F
( at a time when there exists a handler for) 306.45 583.85 T
4 F
(fd) 471.33 583.85 T
2 F
( then) 483.32 583.85 T
(the new handler replaces the old one.) 152.1 571.73 T
5 F
(Note:) 119.09 556.73 T
-0.04 (Y) 152.1 556.73 P
-0.04 (ou can temporarily disable a \336le handler by setting its mask to 0. Y) 156.74 556.73 P
-0.04 (ou can r) 423.54 556.73 P
-0.04 (eset the mask) 456.42 556.73 P
(later when you want to r) 152.1 546.61 T
(e-enable the handler) 249.74 546.61 T
(.) 331.34 546.61 T
2 F
(T) 170.1 533.61 T
(o delete a \336le handler) 175.51 533.61 T
(, call) 261.15 533.61 T
4 F
(Tk_DeleteFileHandler) 283.08 533.61 T
2 F
( with the same) 403.01 533.61 T
4 F
(fd) 463.53 533.61 T
2 F
( ar) 475.52 533.61 T
(gu-) 485.61 533.61 T
(ment that was used to create the handler:) 152.1 521.48 T
4 9 Q
(void Tk_DeleteFileHandler\050int fd\051;) 179.1 507.15 T
2 10 Q
(This removes the handler for) 152.1 493.48 T
4 F
(fd) 270.07 493.48 T
2 F
( so that its callback will not be invoked again.) 282.06 493.48 T
-0.36 (W) 170.1 481.48 P
-0.36 (ith \336le handlers you can do event-driven \336le I/O. Rather than opening a \336le, reading) 179.13 481.48 P
-0.27 (it from start to \336nish, and then closing the \336le, you open the \336le, create a \336le handler for it,) 152.1 469.36 P
(and then return. When the \336le is readable the callback will be invoked. It issues exactly) 152.1 457.24 T
(one read request for the \336le, processes the data returned by the read, and then returns.) 152.1 445.12 T
(When the \336le becomes readable again \050perhaps immediately\051 then the callback will be) 152.1 433 T
-0.38 (invoked again. Eventually) 152.1 420.88 P
-0.38 (, when the entire \336le has been read, the \336le will become readable) 255.34 420.88 P
(and the read call will return an end-of-\336le condition. At this point the \336le can be closed) 152.1 408.76 T
(and the \336le handler deleted. W) 152.1 396.64 T
(ith this approach, your application will still be able to) 274.38 396.64 T
(respond to X events even if there are long delays in reading the \336le.) 152.1 384.52 T
-0.25 (For example,) 170.1 372.52 P
4 F
-0.59 (wish) 224.85 372.52 P
2 F
-0.25 ( uses a \336le handler to read commands from its standard input. The) 248.83 372.52 P
-0.3 (main program for) 152.1 360.39 P
4 F
-0.73 (wish) 224.19 360.39 P
2 F
-0.3 ( creates a \336le handler for standard input \050\336le descriptor 0\051 with the) 248.18 360.39 P
(following statement:) 152.1 348.27 T
4 9 Q
(...) 179.1 333.94 T
(Tk_CreateFileHandler\0500, TK_READABLE, StdinProc, \050ClientData\051) 179.1 323.82 T
(NULL\051;) 179.1 313.7 T
(Tcl_DStringInit\050&command\051;) 179.1 303.58 T
(...) 179.1 293.45 T
2 10 Q
-0.07 (In addition to creating the callback, this code initializes a dynamic string that will be used) 152.1 279.79 P
(to buf) 152.1 267.67 T
(fer lines of input until a complete T) 175.52 267.67 T
(cl command is ready for evaluation. Then the) 316.67 267.67 T
(main program enters the event loop as will be described in Section 39.6. When data) 152.1 255.55 T
(becomes available on standard input) 152.1 243.42 T
4 F
(StdinProc) 300.05 243.42 T
2 F
( will be invoked. Its code is as follows:) 354.02 243.42 T
4 9 Q
(void StdinProc\050ClientData clientData, int mask\051 {) 179.1 229.09 T
(int count, code;) 201.92 218.97 T
(char input[1000];) 201.92 208.85 T
(count = read\0500, input, 1000\051;) 201.92 198.73 T
(if \050count <= 0\051 {) 201.92 188.61 T
5 F
(... handle err) 224.75 178.48 T
(ors and end of \336le ..) 271.1 178.48 T
4 F
(.) 342.74 178.48 T
(}) 201.92 168.36 T
(Tcl_DStringAppend\050&command, input, count\051;) 201.92 158.24 T
(if \050Tcl_CmdComplete\050Tcl_DStringValue\050&command\051\051 {) 201.92 148.12 T
(code = Tcl_Eval\050interp,) 224.75 138 T
FMENDPAGE
%%EndPage: "358" 41
%%Page: "359" 41
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
(39.3 T) 98.1 668.33 T
(imer events) 126.07 668.33 T
0 F
(359) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
4 9 Q
0 X
(Tcl_DStringValue\050&command\051\051;) 270.4 633 T
(Tcl_DStringFree\050&command\051;) 224.75 622.7 T
5 F
(...) 224.75 612.4 T
4 F
(}) 201.92 602.1 T
5 F
(...) 201.92 591.8 T
4 F
(}) 179.1 581.5 T
2 10 Q
(After reading from standard input and checking for errors and end-of \336le,) 152.1 567.84 T
4 F
(StdinProc) 448.25 567.84 T
2 F
(adds the new data to the dynamic string\325) 152.1 555.54 T
(s current contents. Then it checks to see if the) 313.38 555.54 T
(dynamic string contains a complete T) 152.1 543.24 T
(cl command \050it won\325) 301.58 543.24 T
(t, for example, if a line such as) 384.95 543.24 T
(\322) 152.1 530.94 T
4 F
(foreach i $x {) 156.54 530.94 T
2 F
(\322 has been entered but the body of the) 240.49 530.94 T
4 F
(foreach) 394.54 530.94 T
2 F
( loop hasn\325) 436.51 530.94 T
(t yet) 480.75 530.94 T
(been typed\051. If the command is complete then) 152.1 518.64 T
4 F
(StdinProc) 337.8 518.64 T
2 F
( evaluates the command and) 391.77 518.64 T
(clears the dynamic string for the next command.) 152.1 506.34 T
5 F
(Note:) 119.09 491.34 T
(It is usually best to use non-blocking I/O with \336le handlers, just to be absolutely sur) 152.1 491.34 T
(e that) 486.55 491.34 T
-0.2 (I/O operations don\325) 152.1 481.04 P
-0.2 (t block. T) 229.98 481.04 P
-0.2 (o r) 266.13 481.04 P
-0.2 (equest non-blocking I/O, specify the \337ag) 276.94 481.04 P
4 F
-0.49 (O_NONBLOCK) 439.77 481.04 P
5 F
-0.2 ( to) 499.73 481.04 P
-0.15 (the) 152.1 470.74 P
4 F
-0.36 (fcntl) 166.66 470.74 P
5 F
-0.15 ( POSIX system call. If you use \336le handlers for writing to \336les with long output) 196.64 470.74 P
-0.32 (delays, such as pipes and network sockets, it\325) 152.1 460.44 P
-0.32 (s essential that you use use non-blocking I/O;) 329.81 460.44 P
(otherwise if you supply too much data in a) 152.1 450.14 T
6 F
(write) 324.51 450.14 T
5 F
( system call the output buffers will \336ll) 354.49 450.14 T
(and the pr) 152.1 439.85 T
(ocess will be put to sleep.) 192.82 439.85 T
(Note:) 119.09 426.85 T
-0.21 (For or) 152.1 426.85 P
-0.21 (dinary disk \336les it isn\325) 177.89 426.85 P
-0.21 (t necessary to use the event-driven appr) 264.77 426.85 P
-0.21 (oach described in this) 422.45 426.85 P
-0.38 (section, since r) 152.1 416.55 P
-0.38 (eading and writing these \336les rar) 211.22 416.55 P
-0.38 (ely incurs noticeable delays. File handlers) 341.96 416.55 P
(ar) 152.1 406.25 T
(e useful primarily for \336les like terminals, pipes, and network connections, which can) 160.62 406.25 T
(block for inde\336nite periods of time.) 152.1 395.95 T
98.1 354.59 512.1 357.61 C
152.1 355.81 512.1 355.81 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 356.1 143.1 356.1 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(39.3) 117.96 361.61 T
(T) 152.1 361.61 T
(imer events) 159.21 361.61 T
2 10 Q
(T) 152.1 337.92 T
(imer events trigger callbacks after particular time intervals. For example, widgets use) 157.86 337.92 T
(timer events to display blinking insertion cursors. When the cursor is \336rst displayed in a) 152.1 325.62 T
-0.36 (widget \050e.g. because it just got the input focus\051 the widget creates a timer callback that will) 152.1 313.33 P
(trigger in a few tenths of a second. When the timer callback is invoked it turns the cursor) 152.1 301.03 T
-0.05 (of) 152.1 288.73 P
-0.05 (f if it was on, or on if it was of) 160.25 288.73 P
-0.05 (f, and then reschedules itself by creating a new timer call-) 281.41 288.73 P
-0.17 (back that will trigger after a few tenths of a second more. This process repeats inde\336nitely) 152.1 276.43 P
-0.01 (so that the cursor blinks on and of) 152.1 264.13 P
-0.01 (f. When the widget wishes to stop displaying the cursor) 287.61 264.13 P
-0.23 (altogether \050e.g. because it has lost the input focus\051 it cancels the callback and turns the cur-) 152.1 251.83 P
(sor of) 152.1 239.53 T
(f.) 174.96 239.53 T
(The procedure) 170.1 227.53 T
4 F
(Tk_CreateTimerHandler) 230.6 227.53 T
2 F
( creates a timer callback:) 356.53 227.53 T
4 9 Q
(Tk_TimerToken Tk_CreateTimerHandler\050int milliseconds,) 179.1 213.2 T
(Tk_TimerProc *proc, ClientData clientData\051;) 224.75 202.9 T
2 10 Q
(The) 152.1 189.23 T
4 F
(milliseconds) 170.14 189.23 T
2 F
( ar) 242.1 189.23 T
(gument speci\336es how many milliseconds should elapse before) 252.18 189.23 T
(the callback is invoked.) 152.1 176.93 T
4 F
(Tk_CreateTimerHandler) 248.98 176.93 T
2 F
( returns immediately) 374.91 176.93 T
(, and its) 456.98 176.93 T
-0.06 (return value is a token that can be used to cancel the callback. After the given interval has) 152.1 164.63 P
(elapsed Tk will invoke) 152.1 152.33 T
4 F
(proc) 245.93 152.33 T
2 F
(.) 269.92 152.33 T
4 F
(Proc) 274.91 152.33 T
2 F
( must match the following prototype:) 298.9 152.33 T
4 9 Q
(void Tk_TimerProc\050ClientData clientData\051;) 179.1 138 T
FMENDPAGE
%%EndPage: "359" 42
%%Page: "360" 42
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(360) 98.1 668.33 T
3 F
(Events) 481.55 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(Its ar) 152.1 632.33 T
(gument will be the same as the) 172.18 632.33 T
4 F
(clientData) 297.93 632.33 T
2 F
( ar) 357.9 632.33 T
(gument passed to) 367.98 632.33 T
4 F
(Tk_Cre-) 439.88 632.33 T
(ateTimerHandler) 152.1 620.25 T
2 F
(.) 241.5 620.25 T
4 F
(Proc) 246.5 620.25 T
2 F
( is only called once, then Tk deletes the callback automati-) 270.48 620.25 T
(cally) 152.1 608.16 T
(. If you want) 170.88 608.16 T
4 F
(proc) 224.45 608.16 T
2 F
( to be called over and over at regular intervals then) 248.44 608.16 T
4 F
(proc) 454.1 608.16 T
2 F
( should) 478.09 608.16 T
(reschedule itself by calling) 152.1 596.08 T
4 F
(Tk_CreateTimerHandler) 262.02 596.08 T
2 F
( each time it is invoked.) 387.95 596.08 T
5 F
(Note:) 119.09 581.08 T
(Ther) 152.1 581.08 T
(e is no guarantee that) 170.61 581.08 T
4 F
(proc) 260.28 581.08 T
5 F
( will be invoked at exactly the speci\336ed time. If the) 284.27 581.08 T
(application is busy pr) 152.1 570.99 T
(ocessing other events when the speci\336ed time occurs then) 238.63 570.99 T
4 F
(proc) 470.96 570.99 T
5 F
(won\325) 152.1 560.9 T
(t be invoked until the next time the application invokes the event dispatcher) 170.98 560.9 T
(, as) 470.77 560.9 T
(described in Section 39.6.) 152.1 550.82 T
4 F
(Tk_DeleteTimerHandler) 170.1 537.82 T
2 F
( cancels a timer callback:) 296.03 537.82 T
4 9 Q
(void Tk_DeleteTimerHandler\050Tk_TimerToken token\051;) 179.1 523.48 T
2 10 Q
(It takes a single ar) 152.1 509.82 T
(gument, which is a token returned by a previous call to) 224.64 509.82 T
4 F
(Tk_Cre-) 446.71 509.82 T
(ateTimerHandler) 152.1 497.73 T
2 F
(, and deletes the callback so that it will never be invoked. It is safe) 241.65 497.73 T
(to invoke) 152.1 485.65 T
4 F
(Tk_DeleteTimerHandler) 192.08 485.65 T
2 F
( even if the callback has already been invoked;) 318.01 485.65 T
(in this case the procedure has no ef) 152.1 473.56 T
(fect.) 292.08 473.56 T
98.1 430.2 512.1 433.23 C
152.1 431.43 512.1 431.43 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 431.71 143.1 431.71 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(39.4) 117.96 437.23 T
(Idle callbacks) 152.1 437.23 T
2 10 Q
(The procedure) 152.1 413.54 T
4 F
(Tk_DoWhenIdle) 212.6 413.54 T
2 F
( creates an) 290.55 413.54 T
5 F
(idle callback) 335.23 413.54 T
2 F
(:) 386.58 413.54 T
4 9 Q
(void Tk_DoWhenIdle\050Tk_IdleProc *proc, ClientData clientData\051;) 179.1 399.2 T
2 10 Q
(This arranges for) 152.1 385.54 T
4 F
(proc) 222.87 385.54 T
2 F
( to be invoked the next time the application becomes idle. The) 246.86 385.54 T
(application is idle when Tk\325) 152.1 373.45 T
(s main event-processing procedure,) 263.7 373.45 T
4 F
(Tk_DoOneEvent) 407.75 373.45 T
2 F
(, is) 485.71 373.45 T
(called and no X events, \336le events, or timer events are ready) 152.1 361.36 T
(. Normally when this occurs) 392.65 361.36 T
4 F
-0.38 (Tk_DoOneEvent) 152.1 349.28 P
2 F
-0.16 ( will suspend the process until an event occurs. However) 230.06 349.28 P
-0.16 (, if there exist) 455.28 349.28 P
(idle callbacks then all of them are invoked. Idle callbacks are also invoked when the) 152.1 337.19 T
4 F
(update) 152.1 325.11 T
2 F
( T) 188.08 325.11 T
(cl command is invoked. The) 195.99 325.11 T
4 F
(proc) 312.02 325.11 T
2 F
( for an idle callback must match the follow-) 336.01 325.11 T
(ing prototype:) 152.1 313.02 T
4 9 Q
(typedef void Tk_IdleProc\050ClientData clientData\051;) 179.1 298.69 T
2 10 Q
(It returns no result and takes a single ar) 152.1 285.02 T
(gument, which will be the same as the) 309.02 285.02 T
4 F
(client-) 464.2 285.02 T
(Data) 152.1 272.93 T
2 F
( ar) 176.09 272.93 T
(gument passed to) 186.17 272.93 T
4 F
(Tk_DoWhenIdle) 258.07 272.93 T
2 F
(.) 336.03 272.93 T
4 F
-0.14 (Tk_CancelIdleCall) 170.1 260.93 P
2 F
-0.06 ( deletes an idle callback so that it won\325) 272.04 260.93 P
-0.06 (t be invoked after all:) 426.84 260.93 P
4 9 Q
(void Tk_CancelIdleCall\050Tk_IdleProc *proc, ClientData) 179.1 246.6 T
(clientData\051;) 179.1 236.52 T
4 10 Q
(Tk_CancelIdleCall) 152.1 222.85 T
2 F
( deletes all of the idle callbacks that match) 254.04 222.85 T
4 F
(idleProc) 426.42 222.85 T
2 F
( and) 474.39 222.85 T
4 F
(clientData) 152.1 210.76 T
2 F
( \050there can be more than one\051. If there are no matching idle callbacks then) 212.07 210.76 T
(the procedure has no ef) 152.1 198.68 T
(fect.) 245.17 198.68 T
(Idle callbacks are used to implement the delayed operations described in Section) 170.1 186.68 T
-0.03 (XXX. The most common use of idle callbacks in widgets is for redisplay) 152.1 174.59 P
-0.03 (. It is generally a) 442.85 174.59 P
-0.14 (bad idea to redisplay a widget immediately when its state is modi\336ed, since this can result) 152.1 162.51 P
(in multiple redisplays. For example, suppose the following set of T) 152.1 150.42 T
(cl commands is) 419.57 150.42 T
(invoked to change the color) 152.1 138.33 T
(, size, and location of a square widget) 262.73 138.33 T
4 F
(.s) 415.95 138.33 T
2 F
(:) 427.94 138.33 T
FMENDPAGE
%%EndPage: "360" 43
%%Page: "361" 43
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
(39.5 Generic event handlers) 98.1 668.33 T
0 F
(361) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
4 9 Q
0 X
(.s conf) 179.1 633 T
(igure -foreground purple) 216.85 633 T
(.s size 2c) 179.1 623 T
(.s position 1.2c 3.1c) 179.1 613 T
2 10 Q
(Each of these commands modi\336es the widget in a way that requires it to be redisplayed,) 152.1 599.33 T
(but it would be a bad idea for each command to redraw the widget. This would result in) 152.1 587.33 T
(three redisplays, which are unnecessary and can cause the widget to \337ash as it steps) 152.1 575.33 T
(through a series of changes. It is much better to wait until all of the commands have been) 152.1 563.33 T
(executed and then redisplay the widget once. Idle callbacks provide a way of knowing) 152.1 551.33 T
(when all of the changes have been made: they won\325) 152.1 539.33 T
(t be invoked until all available events) 358.7 539.33 T
(have been fully processed.) 152.1 527.33 T
(For example, the square widget uses idle callbacks for redisplaying itself. Whenever) 170.1 515.33 T
(it notices that it needs to be redrawn it invokes the following code:) 152.1 503.33 T
4 9 Q
(if \050!squarePtr->updatePending\051 {) 179.1 489 T
(Tk_DoWhenIdle\050DisplaySquare, \050ClientData\051 squarePtr\051;) 201.92 479 T
(squarePtr->updatePending = 1;) 201.92 469 T
(}) 179.1 459 T
2 10 Q
(This arranges for) 152.1 445.33 T
4 F
(DisplaySquare) 222.87 445.33 T
2 F
( to be invoked as an idle handler to redraw the wid-) 300.83 445.33 T
-0.04 (get. The) 152.1 433.33 P
4 F
-0.09 (updatePending) 187.27 433.33 P
2 F
-0.04 ( \336eld of the widget record keeps track of whether) 265.23 433.33 P
4 F
-0.09 (Display-) 464.13 433.33 P
(Square) 152.1 421.33 T
2 F
( has already been scheduled, so that it will only be scheduled once. When) 188.08 421.33 T
4 F
(DisplaySquare) 152.1 409.33 T
2 F
( is \336nally invoked it resets) 230.06 409.33 T
4 F
(updatePending) 337.78 409.33 T
2 F
( to zero.) 415.73 409.33 T
98.1 365.98 512.1 369 C
152.1 367.2 512.1 367.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 367.49 143.1 367.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(39.5) 117.96 373 T
(Generic event handlers) 152.1 373 T
2 10 Q
(The X event handlers described in Section 39.1 only trigger when particular events occur) 152.1 349.31 T
(for a particular window managed by Tk. Generic event handlers provide access to events) 152.1 337.31 T
-0.08 (that aren\325) 152.1 325.31 P
-0.08 (t associated with a particular window) 189.86 325.31 P
-0.08 (, such as) 337.85 325.31 P
4 F
-0.2 (MappingNotify) 374.24 325.31 P
2 F
-0.08 ( events, and to) 452.2 325.31 P
(events for windows not managed by Tk \050such as those in other applications\051. Generic) 152.1 313.31 T
(event handlers are rarely needed and should be used sparingly) 152.1 301.31 T
(.) 399.3 301.31 T
(T) 170.1 289.31 T
(o create a generic event handler) 175.51 289.31 T
(, call) 301.93 289.31 T
4 F
(Tk_CreateGenericHandler) 323.86 289.31 T
2 F
(:) 461.78 289.31 T
4 9 Q
(void Tk_CreateGenericHandler\050Tk_GenericProc *proc,) 179.1 274.98 T
(ClientData clientData\051;) 224.75 264.98 T
2 10 Q
(This will arrange for) 152.1 251.31 T
4 F
(proc) 237.03 251.31 T
2 F
( to be invoked whenever any X event is received by the appli-) 261.02 251.31 T
(cation.) 152.1 239.31 T
4 F
(Proc) 181.52 239.31 T
2 F
( must match the following prototype:) 205.51 239.31 T
4 9 Q
(typedef int Tk_GenericProc\050ClientData clientData,) 179.1 224.98 T
(XEvent *eventPtr\051;) 224.75 214.98 T
2 10 Q
(Its) 152.1 201.31 T
4 F
(clientData) 164.59 201.31 T
2 F
( ar) 224.56 201.31 T
(gument will be the same as the) 234.65 201.31 T
4 F
(clientData) 360.4 201.31 T
2 F
( passed to) 420.36 201.31 T
4 F
(Tk_Cre-) 462.28 201.31 T
(ateGenericHandler) 152.1 189.31 T
2 F
( and) 254.04 189.31 T
4 F
(eventPtr) 273.47 189.31 T
2 F
( will be a pointer to the X event. Generic han-) 321.45 189.31 T
(dlers are invoked before normal event handlers, and if there are multiple generic handlers) 152.1 177.31 T
(then they are called in the order in which they were created. Each generic handler returns) 152.1 165.31 T
(an integer result. If the result is non-zero it indicates that the handler has completely pro-) 152.1 153.31 T
FMENDPAGE
%%EndPage: "361" 44
%%Page: "362" 44
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(362) 98.1 668.33 T
3 F
(Events) 481.55 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(cessed the event and no further handlers, either generic or normal, should be invoked for) 152.1 632.33 T
(the event.) 152.1 620.33 T
(The procedure) 170.1 608.33 T
4 F
(Tk_DeleteGenericHandler) 230.6 608.33 T
2 F
( deletes generic handlers:) 368.52 608.33 T
4 9 Q
(Tk_DeleteGenericHandler\050Tk_GenericProc *proc,) 179.1 594 T
(ClientData clientData\051;) 224.75 584 T
2 10 Q
(Any generic handlers that match) 152.1 570.33 T
4 F
(proc) 284.5 570.33 T
2 F
( and) 308.48 570.33 T
4 F
(clientData) 327.91 570.33 T
2 F
( are removed, so that) 387.88 570.33 T
4 F
(proc) 473.92 570.33 T
2 F
(will not be invoked anymore.) 152.1 558.33 T
5 F
(Note:) 119.09 543.33 T
4 F
(Tk_CreateGenericHandler) 152.1 543.33 T
5 F
( does nothing to ensur) 290.02 543.33 T
(e that the desir) 378.5 543.33 T
(ed events ar) 437.81 543.33 T
(e) 485.74 543.33 T
-0.31 (actually sent to the application. For example, if an application wishes to r) 152.1 533.33 P
-0.31 (espond to events) 444.48 533.33 P
-0.18 (for a window in some other application then it must invoke) 152.1 523.33 P
4 F
-0.42 (XSelectInput) 388.09 523.33 P
5 F
-0.18 ( to notify the) 460.05 523.33 P
(X server that it wants to r) 152.1 513.33 T
(eceive the events. Once the events arrive, Tk will dispatch them) 253.9 513.33 T
-0.33 (to the generic handler) 152.1 503.33 P
-0.33 (. However) 238.54 503.33 P
-0.33 (, an application should never invoke) 278.18 503.33 P
4 F
-0.8 (XSelectInput) 424.14 503.33 P
5 F
-0.33 ( for) 496.1 503.33 P
(a window managed by Tk, since this will interfer) 152.1 493.33 T
(e with Tk\325) 346.35 493.33 T
(s event management.) 385.04 493.33 T
98.1 451.98 512.1 455 C
152.1 453.2 512.1 453.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 453.49 143.1 453.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(39.6) 117.96 459 T
(Invoking the event dispatcher) 152.1 459 T
2 10 Q
(The preceding sections described the \336rst two parts of event management: creating event) 152.1 435.31 T
-0.24 (handlers and writing callback procedures. The \336nal part of event management is to invoke) 152.1 423.31 P
(the Tk event dispatcher) 152.1 411.31 T
(, which waits for events to occur and invokes the appropriate call-) 245.24 411.31 T
(backs. If you don\325) 152.1 399.31 T
(t invoke the dispatcher then no events will be processed and no call-) 224.64 399.31 T
(backs will be invoked.) 152.1 387.31 T
(Tk provides two procedures for event dispatching:) 170.1 375.31 T
4 F
(Tk_MainLoop) 374.12 375.31 T
2 F
( and) 440.08 375.31 T
4 F
(Tk_DoOneEvent) 152.1 363.31 T
2 F
(. Most applications only use) 230.06 363.31 T
4 F
(Tk_MainLoop) 344.99 363.31 T
2 F
(. It takes no ar) 410.96 363.31 T
(guments) 467.68 363.31 T
(and returns no result and it is typically invoked once, in the main program after initializa-) 152.1 351.31 T
-0.16 (tion.) 152.1 339.31 P
4 F
-0.39 (Tk_MainLoop) 172.49 339.31 P
2 F
-0.16 ( calls the Tk event dispatcher repeatedly to process events. When all) 238.45 339.31 P
-0.05 (available events have been processed it suspends the process until more events occur) 152.1 327.31 P
-0.05 (, and) 490.27 327.31 P
(it repeats this over and over) 152.1 315.31 T
(. It returns only when every) 262.3 315.31 T
4 F
(Tk_Window) 375.27 315.31 T
2 F
( created by the pro-) 429.24 315.31 T
-0.02 (cess has been deleted \050e.g. after the \322) 152.1 303.31 P
4 F
-0.06 (destroy .) 299.85 303.31 P
2 F
-0.02 (\323 command has been executed\051. A typi-) 353.76 303.31 P
(cal main program for a Tk application will create a T) 152.1 291.31 T
(cl interpreter) 363.45 291.31 T
(, call) 414.4 291.31 T
4 F
(Tk_CreateMainWindow) 152.1 279.31 T
2 F
( to create a Tk application plus its main window) 266.04 279.31 T
(, perform) 457.76 279.31 T
(other application-speci\336c initialization \050such as evaluating a T) 152.1 267.31 T
(cl script to create the appli-) 400.39 267.31 T
-0.34 (cation\325) 152.1 255.31 P
-0.34 (s interface\051, and then call) 179.3 255.31 P
4 F
-0.81 (Tk_MainLoop) 280.87 255.31 P
2 F
-0.34 (. When) 346.83 255.31 P
4 F
-0.81 (Tk_MainLoop) 377.53 255.31 P
2 F
-0.34 ( returns the main) 443.49 255.31 P
-0.11 (program exits. Thus Tk provides top-level control over the application\325) 152.1 243.31 P
-0.11 (s execution and all) 435.37 243.31 P
(of the application\325) 152.1 231.31 T
(s useful work is carried out by event handlers invoked via) 224.83 231.31 T
4 F
(Tk_Main-) 458.27 231.31 T
(Loop) 152.1 219.31 T
2 F
(.) 176.09 219.31 T
(The second procedure for event dispatching is) 170.1 207.31 T
4 F
(Tk_DoOneEvent) 356.9 207.31 T
2 F
(, which provides a) 434.85 207.31 T
(lower level interface to the event dispatcher:) 152.1 195.31 T
4 9 Q
(int Tk_DoOneEvent\050int f) 179.1 180.98 T
(lags\051) 303.13 180.98 T
2 10 Q
(The) 152.1 167.31 T
4 F
(f) 170.14 167.31 T
(lags) 176.14 167.31 T
2 F
( ar) 200.12 167.31 T
(gument is normally 0 \050or) 210.21 167.31 T
(, equivalently) 309.19 167.31 T
(,) 362.95 167.31 T
4 F
(TK_ALL_EVENTS) 367.95 167.31 T
2 F
(\051. In this case) 445.91 167.31 T
4 F
(Tk_DoOneEvent) 152.1 155.31 T
2 F
( processes a single event and then returns 1. If no events are pending) 230.06 155.31 T
FMENDPAGE
%%EndPage: "362" 45
%%Page: "363" 45
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
(39.6 Invoking the event dispatcher) 98.1 668.33 T
0 F
(363) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(then) 152.1 632.33 T
4 F
(Tk_DoOneEvent) 171.81 632.33 T
2 F
( suspends the process until an event arrives, processes that event,) 249.77 632.33 T
(and then returns 1.) 152.1 620.28 T
(For example,) 170.1 608.28 T
4 F
(Tk_MainLoop) 225.34 608.28 T
2 F
( is implemented using) 291.3 608.28 T
4 F
(Tk_DoOneEvent) 381.81 608.28 T
2 F
(:) 459.77 608.28 T
4 9 Q
(void Tk_MainLoop\050void\051 {) 179.1 593.94 T
(while \050tk_NumMainWindows > 0\051 {) 201.92 583.88 T
(Tk_DoOneEvent\0500\051;) 224.75 573.82 T
(}) 201.92 563.77 T
(}) 179.1 553.71 T
2 10 Q
(The variable) 152.1 540.04 T
4 F
(tk_NumMainWindows) 204.83 540.04 T
2 F
( is maintained by Tk to count the total number of) 306.77 540.04 T
(main windows \050i.e. applications\051 managed by this process.) 152.1 527.98 T
4 F
(Tk_MainLoop) 388.33 527.98 T
2 F
( just calls) 454.29 527.98 T
4 F
(Tk_DoOneEvent) 152.1 515.92 T
2 F
( over and over until all the main windows have been deleted.) 230.06 515.92 T
4 F
(Tk_DoOneEvent) 170.1 503.92 T
2 F
( is also used by commands such as) 248.06 503.92 T
4 F
(tkwait) 389.08 503.92 T
2 F
( that want to process) 425.06 503.92 T
(events while waiting for something to happen. For example, the \322) 152.1 491.86 T
4 F
(tkwait window) 414.15 491.86 T
2 F
(\323) 492.1 491.86 T
-0.04 (command processes events until a given window has been deleted, then it returns. Here is) 152.1 479.8 P
(the C code that implements this command:) 152.1 467.74 T
4 9 Q
(int done;) 179.1 453.41 T
(...) 179.1 443.35 T
(Tk_CreateEventHandler\050tkwin, StructureNotifyMask,) 179.1 433.29 T
(WaitWindowProc,) 179.1 423.23 T
(\050ClientData\051 &done\051;) 224.75 413.18 T
(done = 0;) 179.1 403.12 T
(while \050!done\051 {) 179.1 393.06 T
(Tk_DoOneEvent\0500\051;) 201.92 383 T
(}) 179.1 372.94 T
(...) 179.1 362.88 T
2 10 Q
-0.24 (The variable) 152.1 349.22 P
4 F
-0.57 (tkwin) 204.35 349.22 P
2 F
-0.24 ( identi\336es the window whose deletion is awaited. The code creates an) 234.34 349.22 P
(event handler that will be invoked when the window is deleted, then invokes) 152.1 337.16 T
4 F
(Tk_DoOneEvent) 152.1 325.1 T
2 F
( over and over until the) 230.06 325.1 T
4 F
(done) 325.55 325.1 T
2 F
( \337ag is set to indicate that) 349.53 325.1 T
4 F
(tkwin) 454.19 325.1 T
2 F
( has) 484.18 325.1 T
(been deleted. The callback for the event handler is as follows:) 152.1 313.04 T
4 9 Q
-0.27 (void WaitWindowProc\050ClientData clientData, XEvent *eventPtr\051 {) 179.1 298.71 P
(int *donePtr = \050int *\051 clientData;) 201.92 288.65 T
(if \050eventPtr->type == DestroyNotify\051 {) 201.92 278.59 T
(*donePtr = 1;) 224.75 268.53 T
(}) 201.92 258.47 T
(}) 179.1 248.41 T
2 10 Q
-0.28 (The) 152.1 234.74 P
4 F
-0.66 (clientData) 169.87 234.74 P
2 F
-0.28 ( ar) 229.83 234.74 P
-0.28 (gument is a pointer to the \337ag variable.) 239.64 234.74 P
4 F
-0.66 (WaitWindowProc) 396.5 234.74 P
2 F
-0.28 ( checks) 480.46 234.74 P
(to make sure the event is a) 152.1 222.69 T
4 F
(DestroyNotify) 260.63 222.69 T
2 F
( event \050) 338.59 222.69 T
4 F
(StructureNotifyMask) 368.56 222.69 T
2 F
( also) 482.5 222.69 T
(selects several other kinds of events, such as) 152.1 210.63 T
4 F
(Conf) 332.24 210.63 T
(igureNotify) 356.23 210.63 T
2 F
(\051 and if so it sets the) 422.19 210.63 T
(\337ag variable to one.) 152.1 198.57 T
(The) 170.1 186.57 T
4 F
(f) 188.14 186.57 T
(lags) 194.14 186.57 T
2 F
( ar) 218.12 186.57 T
(gument to) 228.21 186.57 T
4 F
(Tk_DoOneEvent) 270.96 186.57 T
2 F
( can be used to restrict the kinds of) 348.92 186.57 T
-0.37 (events it will consider) 152.1 174.51 P
-0.37 (. If it contains any of the bits) 238.45 174.51 P
4 F
-0.88 (TK_X_EVENTS) 352.92 174.51 P
2 F
-0.37 (,) 418.89 174.51 P
4 F
-0.88 (TK_FILE_EVENTS) 423.52 174.51 P
2 F
-0.37 (,) 507.47 174.51 P
4 F
(TK_TIMER_EVENTS) 152.1 162.45 T
2 F
(, or) 242.05 162.45 T
4 F
(TK_IDLE_EVENTS) 257.87 162.45 T
2 F
(, then only the events indicated by the) 341.83 162.45 T
(speci\336ed bits will be considered. Furthermore, if) 152.1 150.39 T
4 F
(f) 348.91 150.39 T
(lags) 354.91 150.39 T
2 F
( includes the bit) 378.89 150.39 T
4 F
(TK_DONT_-) 444.97 150.39 T
(WAIT) 152.1 138.33 T
2 F
(, or if no X, \336le, or timer events are requested, then) 175.35 138.33 T
4 F
(Tk_DoOneEvent) 382.41 138.33 T
2 F
( won\325) 460.37 138.33 T
(t sus-) 483.23 138.33 T
FMENDPAGE
%%EndPage: "363" 46
%%Page: "364" 46
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(364) 98.1 668.33 T
3 F
(Events) 481.55 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
-0 (pend the process; if no event is ready to be processed then it will return immediately with) 152.1 632.33 P
-0.09 (a 0 result to indicate that it had nothing to do. For example, the \322) 152.1 620.33 P
4 F
-0.22 (update idletasks) 409.53 620.33 P
2 F
-0.09 (\323) 505.26 620.33 P
(command is implemented with the following code, which uses the) 152.1 608.33 T
4 F
(TK_IDLE_EVENTS) 419.43 608.33 T
2 F
(\337ag:) 152.1 596.33 T
4 9 Q
(while \050Tk_DoOneEvent\050TK_IDLE_EVENTS\051 != 0\051 {) 179.1 582 T
(/* empty loop body */) 201.92 572 T
(}) 179.1 562 T
FMENDPAGE
%%EndPage: "364" 47
%%Page: "365" 47
612 792 0 FMBEGINPAGE
98.1 675 512.1 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
98.1 450 512.1 450 2 L
7 X
V
2 Z
0 X
N
98.1 108 512.1 126 R
7 X
V
0 10 Q
0 X
(365) 495.43 119.33 T
98.1 54 512.1 108 R
7 X
V
2 9 Q
0 X
(Copyright \251 1993 Addison-W) 152.1 102 T
(esley Publishing Company) 261.32 102 T
(, Inc.) 357.1 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 152.1 91 T
(. Any) 485.77 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 152.1 80 T
-0.34 (lisher) 152.1 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 171.58 69 P
(does not of) 152.1 58 T
(fer warranties in regard to this draft.) 191.88 58 T
1 24 Q
(Chapter 40) 152.1 605 T
-0.48 (Displaying W) 152.1 575 S
-0.48 (idgets) 285.21 575 S
98.1 135 512.1 423 R
7 X
V
2 10 Q
0 X
-0.35 (Tk provides relatively little support for actually drawing things on the screen. For the most) 152.1 416.33 P
(part you just use Xlib functions like) 152.1 404.21 T
4 F
(XDrawLine) 297.85 404.21 T
2 F
( and) 351.82 404.21 T
4 F
(XDrawString) 371.25 404.21 T
2 F
(. The only proce-) 437.21 404.21 T
-0.25 (dures provided by Tk are those summarized in T) 152.1 392.09 P
-0.25 (able 40.1, which create three-dimensional) 343.74 392.09 P
(ef) 152.1 379.96 T
(fects by drawing light and dark shadows around objects \050they will be discussed more in) 159.69 379.96 T
(Section 40.3\051. This chapter consists mostly of a discussion of techniques for delaying) 152.1 367.84 T
(redisplays and for using pixmaps to double-buf) 152.1 355.72 T
(fer redisplays. These techniques reduce) 340.69 355.72 T
(redisplay overheads and help produce smooth visual ef) 152.1 343.59 T
(fects with mimimum \337ashing.) 371.48 343.59 T
98.1 300.24 512.1 303.26 C
152.1 301.46 512.1 301.46 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 301.75 143.1 301.75 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(40.1) 117.96 307.26 T
(Delayed redisplay) 152.1 307.26 T
2 10 Q
-0.09 (The idea of delayed redisplay was already introduced in Section 39.4. Rather than redraw-) 152.1 283.57 P
(ing the widget every time its state is modi\336ed, you should use) 152.1 271.45 T
4 F
(Tk_DoWhenIdle) 401.68 271.45 T
2 F
( to) 479.64 271.45 T
(schedule the widget\325) 152.1 259.32 T
(s display procedure for execution later) 234.26 259.32 T
(, when the application has \336n-) 387.35 259.32 T
-0.24 (ished processing all available events. This allows any other pending changes to the widget) 152.1 247.2 P
(to be completed before it\325) 152.1 235.07 T
(s redrawn.) 254.8 235.07 T
(Delayed redisplay requires you to keep track of what to redraw) 170.1 223.07 T
(. For simple widgets) 421.46 223.07 T
-0.31 (such as the square widget or buttons or labels or entries, I recommend the simple approach) 152.1 210.95 P
(of redrawing the entire widget whenever you redraw any part of it. This eliminates the) 152.1 198.83 T
-0.26 (need to remember which parts to redraw and it will have \336ne performance for widgets like) 152.1 186.7 P
(the ones mentioned above.) 152.1 174.58 T
-0.25 (For lar) 170.1 162.58 P
-0.25 (ger and more complex widgets like texts or canvases it isn\325) 196.59 162.58 P
-0.25 (t practical to redraw) 430.4 162.58 P
(the whole widget after each change. This can take a substantial amount of time and cause) 152.1 150.46 T
(annoying delays, particularly for operations like dragging where redisplays happen many) 152.1 138.33 T
44.1 351 98.1 423 C
35.1 360 197.1 414 R
7 X
0 K
V
1 9 Q
0 X
(FIGURE  40) 35.1 408 T
(T) 35.1 387 T
(ABLE  40) 40.43 387 T
26.1 351 125.1 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "365" 48
%%Page: "366" 48
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(366) 98.1 668.33 T
3 F
(Displaying Widgets) 427.13 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(times per second. For these widgets you should keep information in the widget record) 152.1 311.93 T
(about which parts of the widget need to be redrawn. The display procedure can then use) 152.1 299.5 T
(this information to redraw only the af) 152.1 287.07 T
(fected parts.) 301.82 287.07 T
(I recommend recording what to redraw in the simplest \050coarsest\051 way that gives ade-) 170.1 275.07 T
(quate performance. Keeping redisplay information on a very \336ne grain is likely to add) 152.1 262.64 T
(complexity to your widgets and probably won\325) 152.1 250.21 T
(t improve performance noticeably over a) 339.58 250.21 T
(coarser mechanism. For example, the Tk text widget does not record what to redraw on a) 152.1 237.78 T
-0.3 (character) 152.1 225.35 P
-0.3 (-by-character basis; instead, it keeps track of which lines on the screen need to be) 188.52 225.35 P
(redrawn. The minimum amount that is ever redrawn is one whole line. Most redisplays) 152.1 212.92 T
(only involve one or two lines, and today\325) 152.1 200.49 T
(s workstations are fast enough to redraw hun-) 315.89 200.49 T
(dreds of lines per second, so the widget can keep up with the user even if redraws are) 152.1 188.06 T
(occurring dozens of times a second \050such as when the user is dragging one end of the) 152.1 175.63 T
(selection\051. Tk\325) 152.1 163.2 T
(s canvases optimize redisplay by keeping a rectangular bounding box that) 209.84 163.2 T
-0.31 (includes all of the modi\336ed objects. If two small objects at opposite corners of the window) 152.1 150.76 P
(are modi\336ed simultaneously then the redisplay area will include the entire window) 152.1 138.33 T
(, but) 482.06 138.33 T
98.1 135 512.1 639 C
98.1 318.6 512.1 639 C
98.1 348.4 512.1 362.8 C
98.1 348.4 512.1 362.8 R
7 X
0 K
V
152.1 356.32 512.1 356.32 2 L
V
0.5 H
2 Z
0 X
N
98.1 318.6 512.1 639 C
98.1 325 512.1 339.4 C
98.1 325 512.1 339.4 R
7 X
0 K
V
152.1 332.92 512.1 332.92 2 L
V
0.5 H
2 Z
0 X
N
98.1 318.6 512.1 639 C
1 9 Q
0 X
0 K
(T) 152.1 342.4 T
(able  40.1.) 157.27 342.4 T
2 F
(A summary of Tk\325) 200.21 342.4 T
(s procedures for drawing 3-D ef) 266.86 342.4 T
(fects.) 381.75 342.4 T
4 F
(void Tk_Fill3DRectangle\050Display *display, Drawable drawable,) 158.1 621.8 T
(Tk_3DBorder border, int x, int y, int width, int height,) 179.67 612.8 T
(int borderWidth, int relief\051) 179.67 603.8 T
2 F
(Fills the area of) 230.1 594.8 T
4 F
(drawable) 288.51 594.8 T
2 F
( given by) 331.65 594.8 T
4 F
(x) 367.35 594.8 T
2 F
(,) 372.74 594.8 T
4 F
(y) 377.23 594.8 T
2 F
(,) 382.04 594.8 T
4 F
(width) 386.53 594.8 T
2 F
(, and) 413.5 594.8 T
4 F
(height) 433.21 594.8 T
2 F
( with the) 465.57 594.8 T
(background color from) 230.1 585.8 T
4 F
(border) 315.21 585.8 T
2 F
(, then draws a 3-D border) 347.2 585.8 T
4 F
(borderWidth) 441.3 585.8 T
2 F
-0.1 (pixels wide around \050but just inside\051 the rectangle.) 230.1 576.8 P
4 F
-0.25 (Relief) 409.26 576.8 P
2 F
-0.1 ( speci\336es the 3-D) 441.61 576.8 P
(appearance of the border) 230.1 567.8 T
(.) 318.69 567.8 T
4 F
(void Tk_Draw3DRectangle\050Display *display, Drawable drawable,) 158.1 558.8 T
(Tk_3DBorder border, int x, int y, int width, int height,) 179.67 549.8 T
(int borderWidth, int relief\051) 179.67 540.8 T
2 F
(Same as) 230.1 531.8 T
4 F
(Tk_Fill3DRectangle) 262.05 531.8 T
2 F
( except only draws the border) 359.11 531.8 T
(.) 465.19 531.8 T
4 F
(void Tk_Fill3DPolygon\050Display *display, Drawable drawable,) 158.1 512.8 T
(Tk_3DBorder border, XPoint *pointPtr, int numPoints,) 179.67 503.8 T
(int borderWidth, int leftRelief\051) 179.67 494.8 T
2 F
(Fills the area of a polygon in) 230.1 485.8 T
4 F
(drawable) 335.69 485.8 T
2 F
( with the background color from) 378.83 485.8 T
4 F
(border) 230.1 476.8 T
2 F
(. The polygon is speci\336ed by) 261.96 476.8 T
4 F
(pointPtr) 368.06 476.8 T
2 F
( and) 411.2 476.8 T
4 F
(numPoints) 428.67 476.8 T
2 F
( and) 477.2 476.8 T
(need not be closed. Also draws a 3-D border around the polygon.) 230.1 467.8 T
4 F
(Border-) 466.72 467.8 T
-0.35 (Width) 230.1 458.8 P
2 F
-0.15 ( speci\336es the width of the border) 257.06 458.8 P
-0.15 (, measured in pixels to the left of the) 373.63 458.8 P
(polygon\325) 230.1 449.8 T
(s trajectory \050if negative then the border is drawn on the right\051.) 262.06 449.8 T
4 F
-0.24 (LeftRelief) 230.1 440.8 P
2 F
-0.1 ( speci\336es the 3-D appearance of the border \050e.g.) 284.02 440.8 P
4 F
-0.24 (TK_RELIE-) 457.57 440.8 P
(F_RAISED) 230.1 431.8 T
2 F
( means the left side of the trajectory appears higher than the) 273.24 431.8 T
(right\051.) 230.1 422.8 T
4 F
(void Tk_Fill3DPolygon\050Display *display, Drawable drawable,) 158.1 413.8 T
(Tk_3DBorder border, XPoint *pointPtr, int numPoints,) 179.67 404.8 T
(int borderWidth, int leftRelief\051) 179.67 395.8 T
2 F
(Same as) 230.1 386.8 T
4 F
(Tk_Fill3DPolygon) 262.05 386.8 T
2 F
(, except only draws the border without \336ll-) 348.33 386.8 T
(ing the interior of the polygon.) 230.1 377.8 T
152.1 633.55 152.1 371.05 2 L
V
0.5 H
0 Z
N
512.1 633.55 512.1 371.05 2 L
V
N
151.85 633.8 512.35 633.8 2 L
V
N
151.85 524.8 512.35 524.8 2 L
V
0.25 H
N
151.85 370.8 512.35 370.8 2 L
V
0.5 H
N
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "366" 49
%%Page: "367" 49
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
(40.2 Double-buf) 98.1 668.33 T
(fering with pixmaps) 169.03 668.33 T
0 F
(367) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(this doesn\325) 152.1 632.33 T
(t happen very often. In more common cases, such as dragging a single small) 195.51 632.33 T
(object, the bounding box approach requires only a small fraction of the window\325) 152.1 619.89 T
(s area to) 473.26 619.89 T
(be redrawn.) 152.1 607.44 T
98.1 564.08 512.1 567.11 C
152.1 565.31 512.1 565.31 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 565.59 143.1 565.59 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(40.2) 117.96 571.11 T
(Double-buffering with pixmaps) 152.1 571.11 T
2 10 Q
-0.08 (If you want to achieve smooth dragging and other visual ef) 152.1 547.42 P
-0.08 (fects then you should not draw) 387.09 547.42 P
-0.22 (graphics directly onto the screen, because this tends to cause annoying \337ashes. The reason) 152.1 534.97 P
(for the \337ashes is that widgets usually redisplay themselves by \336rst clearing an area to its) 152.1 522.52 T
(background color and then drawing the foreground objects. While you\325re redrawing the) 152.1 510.08 T
(widget the monitor is continuously refreshing itself from display memory) 152.1 497.63 T
(. Sometimes the) 445.44 497.63 T
-0.13 (widget will be refreshed on the screen after it has been cleared but before the objects have) 152.1 485.18 P
(been redrawn. For this one screen refresh the widget will appear to be empty; by the time) 152.1 472.74 T
-0.25 (of the next refresh you\325ll have redrawn all the objects so they\325ll appear again. The result is) 152.1 460.29 P
(that the objects in the widget will appear to \337ash of) 152.1 447.84 T
(f, then on. This \337ashing is particularly) 356.79 447.84 T
-0.35 (noticeable during dynamic actions such as dragging or animation where redisplays happen) 152.1 435.4 P
(frequently) 152.1 422.95 T
(.) 192.53 422.95 T
-0.25 (T) 170.1 410.95 P
-0.25 (o avoid \337ashing it\325) 175.51 410.95 P
-0.25 (s best to use a technique called) 249.46 410.95 P
5 F
-0.25 (double-buffering) 373.49 410.95 P
2 F
-0.25 (, where you redis-) 440.67 410.95 P
(play in two phases using an of) 152.1 398.5 T
(f-screen pixmap. The display procedure for the square wid-) 272.95 398.5 T
(get, shown in Figure 40.1, uses this approach. It calls) 152.1 386.06 T
4 F
(XCreatePixmap) 366.96 386.06 T
2 F
( to allocate a) 444.92 386.06 T
-0.41 (pixmap the size of the window) 152.1 373.61 P
-0.41 (, then it calls) 272.38 373.61 P
4 F
-0.98 (Tk_Fill3DRectangle) 324.33 373.61 P
2 F
-0.41 ( twice to redraw the) 432.27 373.61 P
(widget in the pixmap. Once the widget has been drawn in the pixmap, the contents are) 152.1 361.16 T
(copied to the screen by calling) 152.1 348.72 T
4 F
(XCopyArea) 276.45 348.72 T
2 F
(. W) 330.42 348.72 T
(ith this approach the screen makes a) 344.45 348.72 T
-0.28 (smooth transition from the widget\325) 152.1 336.27 P
-0.28 (s previous state to its new state. It\325) 289.78 336.27 P
-0.28 (s still possible for the) 425.5 336.27 P
-0.29 (screen to refresh itself during the copy from pixmap to screen but each pixel will be drawn) 152.1 323.82 P
(in either its correct old value or its correct new value.) 152.1 311.38 T
5 F
(Note:) 119.09 296.38 T
(If you compile the squar) 152.1 296.38 T
(e widget into) 248.89 296.38 T
4 F
(wish) 303.03 296.38 T
5 F
( you can use the dragging script fr) 327.01 296.38 T
(om Section) 464.62 296.38 T
(36.4 to compar) 152.1 285.93 T
(e double-buffering with drawing dir) 212.53 285.93 T
(ectly on the scr) 355.98 285.93 T
(een. T) 416.39 285.93 T
(o make a version) 439.9 285.93 T
(of the squar) 152.1 275.48 T
(e widget that draws dir) 199.48 275.48 T
(ectly on the scr) 291.85 275.48 T
(een, just delete the calls to) 352.27 275.48 T
4 F
(XCreatePixmap) 152.1 265.04 T
5 F
(,) 230.06 265.04 T
4 F
(XCopyArea) 235.05 265.04 T
5 F
(, and) 289.02 265.04 T
4 F
(XFreePixmap) 311.51 265.04 T
5 F
( in) 377.48 265.04 T
4 F
(DisplaySquare) 390.25 265.04 T
5 F
( and) 468.21 265.04 T
(r) 152.1 254.59 T
(eplace the) 155.62 254.59 T
4 F
(pm) 198.91 254.59 T
5 F
( ar) 210.91 254.59 T
(guments to) 221.92 254.59 T
4 F
(Tk_Fill3DRectangle) 268.01 254.59 T
5 F
( with) 375.95 254.59 T
4 F
(TkWindowId\050tkwin\051) 398.17 254.59 T
5 F
(.) 500.11 254.59 T
-0.23 (Or) 152.1 244.14 P
-0.23 (, you can use the version of the squar) 162.09 244.14 P
-0.23 (e widget that comes with the Tk distribution; it has) 308.95 244.14 P
(a) 152.1 233.7 T
4 F
(-dbl) 159.6 233.7 T
5 F
( option that you can use to turn double-buffering on and off dynamically) 183.58 233.7 T
(.) 472.31 233.7 T
98.1 192.34 512.1 195.36 C
152.1 193.56 512.1 193.56 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 193.85 143.1 193.85 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(40.3) 117.96 199.36 T
(Drawing procedures) 152.1 199.36 T
2 10 Q
(Tk provides only four procedures for actually drawing graphics on the screen, which are) 152.1 175.67 T
(summarized in T) 152.1 163.23 T
(able 40.1. These procedures make it easy to produce the three-dimen-) 219.13 163.23 T
-0.07 (sional ef) 152.1 150.78 P
-0.07 (fects required for Motif widgets, where light and dark shadows are drawn around) 185.99 150.78 P
(objects to make them look raised or sunken.) 152.1 138.33 T
FMENDPAGE
%%EndPage: "367" 50
%%Page: "368" 50
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(368) 98.1 668.33 T
3 F
(Displaying Widgets) 427.13 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
-0.28 (Before using any of the procedures in T) 170.1 326.33 P
-0.28 (able 40.1 you must allocate a) 326.5 326.33 P
4 F
-0.67 (Tk_3DBorder) 443.92 326.33 P
2 F
(object. A) 152.1 314.33 T
4 F
(Tk_3DBorder) 191.24 314.33 T
2 F
( records three colors \050a base color for \322\337at\323 background sur-) 257.2 314.33 T
(faces and lighter and darker colors for shadows\051 plus X graphics contexts for displaying) 152.1 302.33 T
(objects using those colors. Chapter 38 described how to allocate) 152.1 290.33 T
4 F
(Tk_3DBorders) 411.09 290.33 T
2 F
(, for) 483.05 290.33 T
-0.21 (example by using a con\336guration table entry of type) 152.1 278.33 P
4 F
-0.5 (TK_CONFIG_BORDER) 361.47 278.33 P
2 F
-0.21 ( or by calling) 457.41 278.33 P
4 F
(Tk_Get3DBorder) 152.1 266.33 T
2 F
(.) 235.5 266.33 T
(Once you\325ve created a) 170.1 254.33 T
4 F
(Tk_3DBorder) 262.23 254.33 T
2 F
( you can call) 328.19 254.33 T
4 F
(Tk_Fill3DRectangle) 381.48 254.33 T
2 F
( to) 489.42 254.33 T
(draw rectangular shapes with any of the standard reliefs:) 152.1 242.33 T
4 9 Q
(void Tk_Fill3DRectangle\050Display *display, Drawable drawable,) 179.1 228 T
(Tk_3DBorder border, int x, int y,int width, int) 224.75 218 T
(height,) 179.1 208 T
(int borderWidth, int relief\051;) 224.75 198 T
2 10 Q
(The) 152.1 184.33 T
4 F
(display) 170.14 184.33 T
2 F
( and) 212.12 184.33 T
4 F
(drawable) 231.55 184.33 T
2 F
( ar) 279.52 184.33 T
(guments specify the pixmap or window where the rect-) 289.6 184.33 T
(angle will be drawn.) 152.1 172.33 T
4 F
(Display) 236.2 172.33 T
2 F
( is usually speci\336ed as) 278.18 172.33 T
4 F
(Tk_Display\050tkwin\051) 370.07 172.33 T
2 F
( where) 472.01 172.33 T
4 F
(tkwin) 152.1 160.33 T
2 F
( is the window being redrawn.) 182.08 160.33 T
4 F
(Drawable) 305.61 160.33 T
2 F
( is usually the of) 353.58 160.33 T
(f-screen pixmap being) 419.47 160.33 T
(used for display) 152.1 148.33 T
(, but it can also be) 215.29 148.33 T
4 F
(Tk_WindowId\050tkwin\051) 290.52 148.33 T
2 F
(.) 398.46 148.33 T
4 F
(Border) 403.46 148.33 T
2 F
( speci\336es the col-) 439.44 148.33 T
98.1 135 512.1 639 C
98.1 333 512.1 639 C
4 9 Q
0 X
0 K
(void DisplaySquare\050ClientData clientData\051 {) 152.1 633 T
(Square *squarePtr = \050Square *\051 clientData;) 172.19 623 T
(Tk_Window tkwin = squarePtr->tkwin;) 172.19 613 T
(Pixmap pm;) 172.19 603 T
(squarePtr->updatePending = 0;) 172.19 593 T
(if \050!Tk_IsMapped\050tkwin\051\051 {) 172.19 583 T
(return;) 192.35 573 T
(}) 172.19 563 T
(pm = XCreatePixmap\050Tk_Display\050tkwin\051, Tk_WindowId\050tkwin\051,) 172.19 553 T
(Tk_Width\050tkwin\051, Tk_Height\050tkwin\051, Tk_Depth\050tkwin\051\051;) 212.44 543 T
(Tk_Fill3DRectangle\050Tk_Display\050tkwin\051, pm, squarePtr->bgBorder) 172.19 533 T
( 0, 0, Tk_Width\050tkwin\051, Tk_Height\050tkwin\051,) 192.35 523 T
(squarePtr->borderWidth, squarePtr->relief\051;) 192.35 513 T
(Tk_Fill3DRectangle\050Tk_Display\050tkwin\051, pm, squarePtr->fgBorder,) 172.19 503 T
(squarePtr->x, squarePtr->y, squarePtr->size, squarePtr-) 192.35 493 T
(>size,) 152.1 483 T
(squarePtr->borderWidth, squarePtr->relief\051;) 192.35 473 T
(XCopyArea\050Tk_Display\050tkwin\051, pm, Tk_WindowId\050tkwin\051,) 172.19 463 T
(squarePtr->copyGC, 0, 0, Tk_Width\050tkwin\051, Tk_Height\050tkwin\051,) 192.35 453 T
(0, 0\051;) 192.35 443 T
(XFreePixmap\050Tk_Display\050tkwin\051, pm\051;) 172.19 433 T
(}) 152.1 423 T
98.1 401.6 512.1 416 C
98.1 401.6 512.1 416 R
7 X
0 K
V
152.1 409.52 512.1 409.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 333 512.1 639 C
1 9 Q
0 X
0 K
(Figur) 152.1 395.6 T
(e  40.1.) 173.41 395.6 T
2 F
(The display procedure for square widgets. It \336rst clears) 204.36 395.6 T
4 F
(squarePtr-) 152.1 386.6 T
(>updatePending) 206.02 386.6 T
2 F
( to indicate that there is no longer an idle callback for) 281.52 386.6 T
4 F
(DisplaySquare) 152.1 377.6 T
2 F
( scheduled, then it makes sure that the window is mapped \050if not then there\325) 222.2 377.6 T
(s no) 494.04 377.6 T
(need to redisplay\051. It then redraws the widget in an of) 152.1 368.6 T
(f-screen pixmap and copies the pixmap onto) 344.38 368.6 T
98.1 342.2 512.1 356.6 C
98.1 342.2 512.1 356.6 R
7 X
0 K
V
152.1 350.12 512.1 350.12 2 L
V
0.5 H
2 Z
0 X
N
98.1 333 512.1 639 C
2 9 Q
0 X
0 K
(the screen when done.) 152.1 359.6 T
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "368" 51
%%Page: "369" 51
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
(40.3 Drawing procedures) 98.1 668.33 T
0 F
(369) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(ors to be used for drawing the rectangle.) 152.1 337.13 T
4 F
(X) 315.58 337.13 T
2 F
(,) 321.58 337.13 T
4 F
(y) 326.57 337.13 T
2 F
(,) 331.92 337.13 T
4 F
(width) 336.92 337.13 T
2 F
(,) 366.9 337.13 T
4 F
(height) 371.9 337.13 T
2 F
(, and) 407.88 337.13 T
4 F
(borderWidth) 429.81 337.13 T
2 F
(specify the geometry of the rectangle and its border) 152.1 325.13 T
(, all in pixel units \050see Figure 40.2\051.) 357.65 325.13 T
(Lastly) 152.1 313.13 T
(,) 176.44 313.13 T
4 F
(relief) 181.43 313.13 T
2 F
( speci\336es the desired 3D ef) 217.41 313.13 T
(fect, such as) 325.2 313.13 T
4 F
(TK_RELIEF_RAISED) 376.83 313.13 T
2 F
( or) 472.77 313.13 T
4 F
-1.13 (TK_RELIEF_RIDGE) 152.1 301.13 P
2 F
-0.47 (.) 242.05 301.13 P
4 F
-1.13 (Tk_Fill3DRectangle) 246.58 301.13 P
2 F
-0.47 ( \336rst \336lls the entire area of the rectangle) 354.52 301.13 P
-0.01 (with the \322\337at\323 color from) 152.1 289.13 P
4 F
-0.02 (border) 256.16 289.13 P
2 F
-0.01 ( then it draws light and dark shadows) 292.14 289.13 P
4 F
-0.02 (borderWidth) 443.64 289.13 P
2 F
(pixels wide around the edge of the rectangle to produce the ef) 152.1 277.13 T
(fect speci\336ed by) 398.66 277.13 T
4 F
(relief) 466.67 277.13 T
2 F
(.) 502.65 277.13 T
4 F
-0.96 (Tk_Fill3DPolygon) 170.1 265.13 P
2 F
-0.4 ( is similar to) 266.05 265.13 P
4 F
-0.96 (Tk_Fill3DRectangle) 316.64 265.13 P
2 F
-0.4 ( except that it draws a) 424.58 265.13 P
(polygon instead of a rectangle:) 152.1 253.13 T
4 9 Q
(void Tk_Fill3DPolygon\050Display *display, Drawable drawable,) 179.1 238.8 T
(Tk_3DBorder border, XPoint *pointPtr, int numPoints,) 224.75 228.8 T
(int borderWidth, int leftRelief\051;) 224.75 218.8 T
4 10 Q
(Display) 152.1 205.13 T
2 F
(,) 193.43 205.13 T
4 F
(drawable) 198.43 205.13 T
2 F
(, and) 246.4 205.13 T
4 F
(border) 268.33 205.13 T
2 F
( all have the same meaning as for) 304.31 205.13 T
4 F
(Tk_Fill3-) 440.31 205.13 T
(DRectangle) 152.1 193.13 T
2 F
(.) 212.07 193.13 T
4 F
(PointPtr) 217.06 193.13 T
2 F
( and) 265.04 193.13 T
4 F
(numPoints) 284.47 193.13 T
2 F
( de\336ne the polygon\325) 338.44 193.13 T
(s shape \050see your Xlib) 418.11 193.13 T
(documentation for information about) 152.1 181.13 T
4 F
(XPoint) 302.56 181.13 T
2 F
( structures\051 and) 338.54 181.13 T
4 F
(borderWidth) 402.65 181.13 T
2 F
( gives the) 468.62 181.13 T
(width of the border) 152.1 169.13 T
(, all in pixel units.) 228.59 169.13 T
4 F
(LeftRelief) 303.28 169.13 T
2 F
( de\336nes the relief of the left side of) 363.24 169.13 T
(the polygon\325) 152.1 157.13 T
(s trajectory relative to its right side. For example, if) 202.35 157.13 T
4 F
(leftRelief) 410.55 157.13 T
2 F
( is speci-) 470.52 157.13 T
(\336ed as) 152.1 145.13 T
4 F
(TK_RELIEF_RAISED) 180.41 145.13 T
2 F
( then the left side of the trajectory will appear higher than) 276.36 145.13 T
98.1 135 512.1 639 C
98.1 343.8 512.1 639 C
98.1 419.4 512.1 433.8 C
98.1 419.4 512.1 433.8 R
7 X
0 K
V
152.1 427.32 512.1 427.32 2 L
V
0.5 H
2 Z
0 X
N
98.1 343.8 512.1 639 C
1 9 Q
0 X
0 K
(Figur) 152.1 413.4 T
(e  40.2.) 173.41 413.4 T
2 F
( Figure \050a\051 shows a call to) 204.36 413.4 T
4 F
(Tk_Fill3DRectangle) 299.96 413.4 T
2 F
( and the graphic that is) 397.02 413.4 T
(produced; the border is drawn entirely inside the rectangular area. Figure \050b\051 shows a call to) 152.1 404.4 T
4 F
(Tk_Fill3DPolygon) 152.1 395.4 T
2 F
( and the resulting graphic. The relief) 238.38 395.4 T
4 F
(TK_RELIEF_RAISED) 371.66 395.4 T
2 F
( speci\336es that) 457.94 395.4 T
(the left side of the path should appear higher than the right, and that the border should be drawn) 152.1 386.4 T
98.1 360 512.1 374.4 C
98.1 360 512.1 374.4 R
7 X
0 K
V
152.1 367.92 512.1 367.92 2 L
V
0.5 H
2 Z
0 X
N
98.1 343.8 512.1 639 C
2 9 Q
0 X
0 K
(entirely on the left side of the path if) 152.1 377.4 T
4 F
(borderWidth) 285.64 377.4 T
2 F
( is positive.) 344.96 377.4 T
0 204 338 408 455 204 117 101.7 518.4 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Tk Canvas Widget%%For: John Ousterhout,525E,0865,5476132%%Title: Window .c1%%CreationDate: Mon May 17 10:43:12 1993%%BoundingBox: 204 338 408 455%%Pages: 1%%DocumentData: Clean7Bit%%Orientation: Portrait%%DocumentNeededResources: font Courier%%EndComments% This file contains the standard Postscript prolog used when% generating Postscript from canvas widgets.%% $Header: /user6/ouster/wish/library/RCS/prolog.ps,v 1.6 93/04/01 14:03:52 ouster Exp $ SPRITE (Berkeley);%%BeginProlog50 dict begin% The definitions below just define all of the variables used in% any of the procedures here.  This is needed for obscure reasons% explained on p. 716 of the Postscript manual (Section H.2.7,% "Initializing Variables," in the section on Encapsulated Postscript)./baseline 0 def/stipimage 0 def/height 0 def/justify 0 def/maxwidth 0 def/spacing 0 def/stipple 0 def/strings 0 def/xoffset 0 def/yoffset 0 def/tmpstip null def/encoding {ISOLatin1Encoding} def% Override setfont to automatically encode the font in the style defined by % by 'encoding' (ISO Latin1 by default).systemdict /encodefont known {    /realsetfont /setfont load def    /setfont {	encoding encodefont realsetfont    } def} if% desiredSize EvenPixels closestSize%% The procedure below is used for stippling.  Given the optimal size% of a dot in a stipple pattern in the current user coordinate system,% compute the closest size that is an exact multiple of the device's% pixel size.  This allows stipple patterns to be displayed without% aliasing effects./EvenPixels {    % Compute exact number of device pixels per stipple dot.    dup 0 matrix currentmatrix dtransform    dup mul exch dup mul add sqrt    % Round to an integer, make sure the number is at least 1, and compute    % user coord distance corresponding to this.    dup round dup 1 lt {pop 1} if    exch div mul} bind def% width height string filled StippleFill --%% Given a path and other graphics information already set up, this% procedure will fill the current path in a stippled fashion.  "String"% contains a proper image description of the stipple pattern and% "width" and "height" give its dimensions.  If "filled" is true then% it means that the area to be stippled is gotten by filling the% current path (e.g. the interior of a polygon); if it's false, the% area is gotten by stroking the current path (e.g. a wide line).% Each stipple dot is assumed to be about one unit across in the% current user coordinate system./StippleFill {    % Turn the path into a clip region that we can then cover with    % lots of images corresponding to the stipple pattern.  Warning:    % some Postscript interpreters get errors during strokepath for    % dashed lines.  If this happens, turn off dashes and try again.    1 index /tmpstip exch def %% Works around NeWSprint bug    gsave    {eoclip}    {{strokepath} stopped {grestore gsave [] 0 setdash strokepath} if clip}    ifelse    % Change the scaling so that one user unit in user coordinates    % corresponds to the size of one stipple dot.    1 EvenPixels dup scale    % Compute the bounding box occupied by the path (which is now    % the clipping region), and round the lower coordinates down    % to the nearest starting point for the stipple pattern.    pathbbox    4 2 roll    5 index div cvi 5 index mul 4 1 roll    6 index div cvi 6 index mul 3 2 roll    % Stack now: width height string y1 y2 x1 x2    % Below is a doubly-nested for loop to iterate across this area    % in units of the stipple pattern size, going up columns then    % across rows, blasting out a stipple-pattern-sized rectangle at    % each position    6 index exch {	2 index 5 index 3 index {	    % Stack now: width height string y1 y2 x y	    gsave	    1 index exch translate	    5 index 5 index true matrix tmpstip imagemask	    grestore	} for	pop    } for    pop pop pop pop pop    grestore    newpath} bind def% -- AdjustColor --% Given a color value already set for output by the caller, adjusts% that value to a grayscale or mono value if requested by the CL% variable./AdjustColor {    CL 2 lt {	currentgray	CL 0 eq {	    .5 lt {0} {1} ifelse	} if	setgray    } if} bind def% x y strings spacing xoffset yoffset justify stipple stipimage DrawText --% This procedure does all of the real work of drawing text.  The% color and font must already have been set by the caller, and the% following arguments must be on the stack:%% x, y -	Coordinates at which to draw text.% strings -	An array of strings, one for each line of the text item,%		in order from top to bottom.% spacing -	Spacing between lines.% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.% yoffset -	Vertical offset for text bbox relative to x and y: 0 for%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.% justify -	0 for left justification, 0.5 for center, 1 for right justify.% stipple -	Boolean value indicating whether or not text is to be%		drawn in stippled fashion.% stipimage -	Image for stippling, if stipple is True.%% Also, when this procedure is invoked, the color and font must already% have been set for the text./DrawText {    /stipimage exch def    /stipple exch def    /justify exch def    /yoffset exch def    /xoffset exch def    /spacing exch def    /strings exch def    % First scan through all of the text to find the widest line.    /maxwidth 0 def    strings {	stringwidth pop	dup maxwidth gt {/maxwidth exch def} {pop} ifelse	newpath    } forall    % Compute the baseline offset and the actual font height.    0 0 moveto (TXygqPZ) false charpath    pathbbox dup /baseline exch def    exch pop exch sub /height exch def pop    newpath    % Translate coordinates first so that the origin is at the upper-left    % corner of the text's bounding box. Remember that x and y for    % positioning are still on the stack.    translate    maxwidth xoffset mul    strings length 1 sub spacing mul height add yoffset mul translate    % Now use the baseline and justification information to translate so    % that the origin is at the baseline and positioning point for the    % first line of text.    justify maxwidth mul baseline neg translate    % Iterate over each of the lines to output it.  For each line,    % compute its width again so it can be properly justified, then    % display it.    strings {	dup stringwidth pop	justify neg mul 0 moveto	show	0 spacing neg translate    } forall} bind def%%EndProlog%%BeginSetup/CL 2 def%%IncludeResource: font Courier%%EndSetup%%Page: 1 1save306.0 396.0 translate0.9218 0.9218 scale-150 -62 translate40 125 moveto 260 125 lineto 260 0 lineto 40 0 lineto closepath clip newpathgsave100 95 moveto 100 0 rlineto 0 -70 rlineto -100 0 rlineto closepath0.898 0.804 0.690 setrgbcolor AdjustColorfillgrestoregsave100 95 moveto200 95 lineto194 89 lineto106 89 lineto106 31 lineto100 25 lineto100 95 lineto1.000 0.973 0.941 setrgbcolor AdjustColoreofillgrestoregsave100 25 moveto106 31 lineto194 31 lineto194 89 lineto200 95 lineto200 25 lineto100 25 lineto0.600 0.537 0.463 setrgbcolor AdjustColoreofillgrestoregsavematrix currentmatrix100 95 translate 2 2 scale 1 0 moveto 0 0 1 0 360 arcsetmatrix0.000 0.000 0.000 setrgbcolor AdjustColorfillgrestoregsave/Courier findfont 9 scalefont setfont0.000 0.000 0.000 setrgbcolor AdjustColor96 99 [    (\050120,80\051)] 10 -1 1 0 () false DrawTextgrestoregsave103.8 19 moveto196.2 19 lineto0.5 setlinewidth0 setlinecap1 setlinejoin0.000 0.000 0.000 setrgbcolor AdjustColorstroke100 19 moveto107 16.5 lineto106.2 18.5 lineto106.2 19.5 lineto107 21.5 lineto100 19 linetofill200 19 moveto193 21.5 lineto193.8 19.5 lineto193.8 18.5 lineto193 16.5 lineto200 19 linetofillgrestoregsave/Courier findfont 9 scalefont setfont0.000 0.000 0.000 setrgbcolor AdjustColor150 15 [    (100)] 10 -0.5 0 0 () false DrawTextgrestoregsave206 91.2 moveto206 28.8 lineto0.5 setlinewidth0 setlinecap1 setlinejoin0.000 0.000 0.000 setrgbcolor AdjustColorstroke206 95 moveto203.5 88 lineto205.5 88.8 lineto206.5 88.8 lineto208.5 88 lineto206 95 linetofill206 25 moveto208.5 32 lineto206.5 31.2 lineto205.5 31.2 lineto203.5 32 lineto206 25 linetofillgrestoregsave/Courier findfont 9 scalefont setfont0.000 0.000 0.000 setrgbcolor AdjustColor210 60 [    (70)] 10 0 0.5 0 () false DrawTextgrestoregsave150 107 moveto150 98.8 lineto0.5 setlinewidth0 setlinecap1 setlinejoin0.000 0.000 0.000 setrgbcolor AdjustColorstroke150 95 moveto152.5 102 lineto150.5 101.2 lineto149.5 101.2 lineto147.5 102 lineto150 95 linetofillgrestoregsave150 77 moveto150 85.2 lineto0.5 setlinewidth0 setlinecap1 setlinejoin0.000 0.000 0.000 setrgbcolor AdjustColorstroke150 89 moveto147.5 82 lineto149.5 82.8 lineto150.5 82.8 lineto152.5 82 lineto150 89 linetofillgrestoregsave/Courier findfont 9 scalefont setfont0.000 0.000 0.000 setrgbcolor AdjustColor150 109 [    (borderWidth)] 10 -0.5 1 0 () false DrawTextgrestorerestore showpage%%Trailerend%%EOF
%%EndDocument
FMENDEPSF
0 195 336 417 456 222 120 300.9 515.4 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Tk Canvas Widget%%For: John Ousterhout,525E,0865,5476132%%Title: Window .c2%%CreationDate: Mon May 17 10:43:12 1993%%BoundingBox: 195 336 417 456%%Pages: 1%%DocumentData: Clean7Bit%%Orientation: Portrait%%DocumentNeededResources: font Courier%%EndComments% This file contains the standard Postscript prolog used when% generating Postscript from canvas widgets.%% $Header: /user6/ouster/wish/library/RCS/prolog.ps,v 1.6 93/04/01 14:03:52 ouster Exp $ SPRITE (Berkeley);%%BeginProlog50 dict begin% The definitions below just define all of the variables used in% any of the procedures here.  This is needed for obscure reasons% explained on p. 716 of the Postscript manual (Section H.2.7,% "Initializing Variables," in the section on Encapsulated Postscript)./baseline 0 def/stipimage 0 def/height 0 def/justify 0 def/maxwidth 0 def/spacing 0 def/stipple 0 def/strings 0 def/xoffset 0 def/yoffset 0 def/tmpstip null def/encoding {ISOLatin1Encoding} def% Override setfont to automatically encode the font in the style defined by % by 'encoding' (ISO Latin1 by default).systemdict /encodefont known {    /realsetfont /setfont load def    /setfont {	encoding encodefont realsetfont    } def} if% desiredSize EvenPixels closestSize%% The procedure below is used for stippling.  Given the optimal size% of a dot in a stipple pattern in the current user coordinate system,% compute the closest size that is an exact multiple of the device's% pixel size.  This allows stipple patterns to be displayed without% aliasing effects./EvenPixels {    % Compute exact number of device pixels per stipple dot.    dup 0 matrix currentmatrix dtransform    dup mul exch dup mul add sqrt    % Round to an integer, make sure the number is at least 1, and compute    % user coord distance corresponding to this.    dup round dup 1 lt {pop 1} if    exch div mul} bind def% width height string filled StippleFill --%% Given a path and other graphics information already set up, this% procedure will fill the current path in a stippled fashion.  "String"% contains a proper image description of the stipple pattern and% "width" and "height" give its dimensions.  If "filled" is true then% it means that the area to be stippled is gotten by filling the% current path (e.g. the interior of a polygon); if it's false, the% area is gotten by stroking the current path (e.g. a wide line).% Each stipple dot is assumed to be about one unit across in the% current user coordinate system./StippleFill {    % Turn the path into a clip region that we can then cover with    % lots of images corresponding to the stipple pattern.  Warning:    % some Postscript interpreters get errors during strokepath for    % dashed lines.  If this happens, turn off dashes and try again.    1 index /tmpstip exch def %% Works around NeWSprint bug    gsave    {eoclip}    {{strokepath} stopped {grestore gsave [] 0 setdash strokepath} if clip}    ifelse    % Change the scaling so that one user unit in user coordinates    % corresponds to the size of one stipple dot.    1 EvenPixels dup scale    % Compute the bounding box occupied by the path (which is now    % the clipping region), and round the lower coordinates down    % to the nearest starting point for the stipple pattern.    pathbbox    4 2 roll    5 index div cvi 5 index mul 4 1 roll    6 index div cvi 6 index mul 3 2 roll    % Stack now: width height string y1 y2 x1 x2    % Below is a doubly-nested for loop to iterate across this area    % in units of the stipple pattern size, going up columns then    % across rows, blasting out a stipple-pattern-sized rectangle at    % each position    6 index exch {	2 index 5 index 3 index {	    % Stack now: width height string y1 y2 x y	    gsave	    1 index exch translate	    5 index 5 index true matrix tmpstip imagemask	    grestore	} for	pop    } for    pop pop pop pop pop    grestore    newpath} bind def% -- AdjustColor --% Given a color value already set for output by the caller, adjusts% that value to a grayscale or mono value if requested by the CL% variable./AdjustColor {    CL 2 lt {	currentgray	CL 0 eq {	    .5 lt {0} {1} ifelse	} if	setgray    } if} bind def% x y strings spacing xoffset yoffset justify stipple stipimage DrawText --% This procedure does all of the real work of drawing text.  The% color and font must already have been set by the caller, and the% following arguments must be on the stack:%% x, y -	Coordinates at which to draw text.% strings -	An array of strings, one for each line of the text item,%		in order from top to bottom.% spacing -	Spacing between lines.% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.% yoffset -	Vertical offset for text bbox relative to x and y: 0 for%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.% justify -	0 for left justification, 0.5 for center, 1 for right justify.% stipple -	Boolean value indicating whether or not text is to be%		drawn in stippled fashion.% stipimage -	Image for stippling, if stipple is True.%% Also, when this procedure is invoked, the color and font must already% have been set for the text./DrawText {    /stipimage exch def    /stipple exch def    /justify exch def    /yoffset exch def    /xoffset exch def    /spacing exch def    /strings exch def    % First scan through all of the text to find the widest line.    /maxwidth 0 def    strings {	stringwidth pop	dup maxwidth gt {/maxwidth exch def} {pop} ifelse	newpath    } forall    % Compute the baseline offset and the actual font height.    0 0 moveto (TXygqPZ) false charpath    pathbbox dup /baseline exch def    exch pop exch sub /height exch def pop    newpath    % Translate coordinates first so that the origin is at the upper-left    % corner of the text's bounding box. Remember that x and y for    % positioning are still on the stack.    translate    maxwidth xoffset mul    strings length 1 sub spacing mul height add yoffset mul translate    % Now use the baseline and justification information to translate so    % that the origin is at the baseline and positioning point for the    % first line of text.    justify maxwidth mul baseline neg translate    % Iterate over each of the lines to output it.  For each line,    % compute its width again so it can be properly justified, then    % display it.    strings {	dup stringwidth pop	justify neg mul 0 moveto	show	0 spacing neg translate    } forall} bind def%%EndProlog%%BeginSetup/CL 2 def%%IncludeResource: font Courier%%EndSetup%%Page: 1 1save306.0 396.0 translate0.9218 0.9218 scale-150 -65 translate30 130 moveto 270 130 lineto 270 0 lineto 30 0 lineto closepath clip newpathgsave200 30 moveto150 110 lineto100 30 lineto200 30 lineto0.898 0.804 0.690 setrgbcolor AdjustColoreofillgrestoregsave100 30 moveto110.8 36 lineto150 99 lineto150 110 lineto100 30 lineto1.000 0.973 0.941 setrgbcolor AdjustColoreofillgrestoregsave100 30 moveto110.8 36 lineto189.2 36 lineto150 99 lineto150 110 lineto200 30 lineto100 30 lineto0.600 0.537 0.463 setrgbcolor AdjustColoreofillgrestoregsavematrix currentmatrix100 30 translate 2 2 scale 1 0 moveto 0 0 1 0 360 arcsetmatrix0.000 0.000 0.000 setrgbcolor AdjustColorfillgrestoregsave/Courier findfont 9 scalefont setfont0.000 0.000 0.000 setrgbcolor AdjustColor96 26 [    (\050100,150\051)] 10 -1 0 0 () false DrawTextgrestoregsavematrix currentmatrix150 110 translate 2 2 scale 1 0 moveto 0 0 1 0 360 arcsetmatrix0.000 0.000 0.000 setrgbcolor AdjustColorfillgrestoregsave/Courier findfont 9 scalefont setfont0.000 0.000 0.000 setrgbcolor AdjustColor150 114 [    (\050150,70\051)] 10 -0.5 1 0 () false DrawTextgrestoregsavematrix currentmatrix200 30 translate 2 2 scale 1 0 moveto 0 0 1 0 360 arcsetmatrix0.000 0.000 0.000 setrgbcolor AdjustColorfillgrestoregsave/Courier findfont 9 scalefont setfont0.000 0.000 0.000 setrgbcolor AdjustColor204 26 [    (\050200,150\051)] 10 0 0 0 () false DrawTextgrestoregsave150 48 moveto150 39.8 lineto0.5 setlinewidth0 setlinecap1 setlinejoin0.000 0.000 0.000 setrgbcolor AdjustColorstroke150 36 moveto152.5 43 lineto150.5 42.2 lineto149.5 42.2 lineto147.5 43 lineto150 36 linetofillgrestoregsave150 18 moveto150 26.2 lineto0.5 setlinewidth0 setlinecap1 setlinejoin0.000 0.000 0.000 setrgbcolor AdjustColorstroke150 30 moveto147.5 23 lineto149.5 23.8 lineto150.5 23.8 lineto152.5 23 lineto150 30 linetofillgrestoregsave/Courier findfont 9 scalefont setfont0.000 0.000 0.000 setrgbcolor AdjustColor150 16 [    (borderWidth)] 10 -0.5 0 0 () false DrawTextgrestorerestore showpage%%Trailerend%%EOF
%%EndDocument
FMENDEPSF
109.8 451.8 297.6 505.8 R
7 X
V
4 F
0 X
(Tk_Fill3DRectangle\050display,) 109.8 499.8 T
(drawable,) 109.8 489.8 T
(border, 120, 80, 100, 70,) 131.37 479.8 T
(borderWidth,) 131.37 469.8 T
(TK_RELIEF_RAISED\051;) 109.8 459.8 T
321.3 451.8 502.5 505.8 R
7 X
V
0 X
(static XPoint points[] =) 321.3 499.8 T
({{200,150},) 321.3 489.8 T
({150,70}, {100,150}};) 342.87 479.8 T
(Tk_Fill3DPolygon\050display,) 321.3 469.8 T
(drawable,) 321.3 459.8 T
2 10 Q
(\050a\051) 198.15 441.38 T
(\050b\051) 406.07 441.38 T
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "369" 52
%%Page: "370" 52
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(370) 98.1 668.33 T
3 F
(Displaying Widgets) 427.13 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(the right side. If) 152.1 632.33 T
4 F
(leftRelief) 218.44 632.33 T
2 F
( is) 278.41 632.33 T
4 F
(TK_RELIEF_RIDGE) 290.07 632.33 T
2 F
( or) 380.02 632.33 T
4 F
(TK_RELIEF_GROOVE) 393.35 632.33 T
2 F
( then) 489.3 632.33 T
(the border  will be centered on the polygon\325) 152.1 620.33 T
(s trajectory; otherwise it will be drawn on the) 326.97 620.33 T
(left side of the polygon\325) 152.1 608.33 T
(s trajectory if) 247.6 608.33 T
4 F
(borderWidth) 303.39 608.33 T
2 F
( is positive and on the right side if) 369.35 608.33 T
4 F
(borderWidth) 152.1 596.33 T
2 F
( is negative. See Figure 40.2 for an example.) 218.06 596.33 T
-0.43 (The procedures) 170.1 584.33 P
4 F
-1.03 (Tk_Draw3DRectangle) 233.62 584.33 P
2 F
-0.43 ( and) 341.57 584.33 P
4 F
-1.03 (Tk_Draw3DPolygon) 360.13 584.33 P
2 F
-0.43 ( are similar to) 456.08 584.33 P
4 F
(Tk_Fill3DRectangle) 152.1 572.33 T
2 F
( and) 260.04 572.33 T
4 F
(Tk_Fill3DPolygon) 279.47 572.33 T
2 F
( except that they only draw the) 375.42 572.33 T
(border without \336lling the interior of the rectangle or polygon.) 152.1 560.33 T
FMENDPAGE
%%EndPage: "370" 53
%%Page: "371" 53
612 792 0 FMBEGINPAGE
98.1 675 512.1 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
98.1 450 512.1 450 2 L
7 X
V
2 Z
0 X
N
98.1 108 512.1 126 R
7 X
V
0 10 Q
0 X
(371) 495.43 119.33 T
98.1 54 512.1 108 R
7 X
V
2 9 Q
0 X
(Copyright \251 1993 Addison-W) 152.1 102 T
(esley Publishing Company) 261.32 102 T
(, Inc.) 357.1 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 152.1 91 T
(. Any) 485.77 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 152.1 80 T
-0.34 (lisher) 152.1 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 171.58 69 P
(does not of) 152.1 58 T
(fer warranties in regard to this draft.) 191.88 58 T
1 24 Q
(Chapter 41) 152.1 605 T
-0.48 (Destr) 152.1 575 S
-0.48 (oying W) 205.21 575 S
-0.48 (idgets) 287.39 575 S
98.1 135 512.1 423 R
7 X
V
2 10 Q
0 X
(This chapter describes how widgets should clean themselves up when they are destroyed.) 152.1 416.33 T
(For the most part widget destruction is fairly straightforward: it\325) 152.1 404.33 T
(s just a matter of freeing) 408.33 404.33 T
-0.1 (all of the resources associated with the widget. However) 152.1 392.33 P
-0.1 (, there is one complicating factor) 376.54 392.33 P
-0.1 (,) 507.2 392.33 P
-0.2 (which is that a widget might be in use at the time it is destroyed. This leads to a two-phase) 152.1 380.33 P
(approach to destruction where some of the cleanup may have to be delayed until the wid-) 152.1 368.33 T
-0.1 (get is no longer in use. Tk\325) 152.1 356.33 P
-0.1 (s procedures for window destruction, most of which have to do) 258.38 356.33 P
(with delayed cleanup, are summarized in T) 152.1 344.33 T
(able 41.1.) 323.77 344.33 T
98.1 300.98 512.1 304 C
152.1 302.2 512.1 302.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 302.49 143.1 302.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(41.1) 117.96 308 T
(Basics) 152.1 308 T
2 10 Q
(W) 152.1 284.31 T
(idgets can be destroyed in three dif) 161.13 284.31 T
(ferent ways. First, the) 300.85 284.31 T
4 F
(destroy) 390.23 284.31 T
2 F
( T) 432.21 284.31 T
(cl command can) 440.11 284.31 T
(be invoked; it destroys one or more widgets and all of their descendants in the window) 152.1 272.31 T
(hierarchy) 152.1 260.31 T
(. Second, C code in the application can invoke) 189.19 260.31 T
4 F
(Tk_DestroyWindow) 377.12 260.31 T
2 F
(, which) 472.41 260.31 T
(has the same ef) 152.1 248.31 T
(fect as the) 213.26 248.31 T
4 F
(destroy) 256.27 248.31 T
2 F
( command:) 298.25 248.31 T
4 9 Q
(void Tk_DestroyWindow\050Tk_Window tkwin\051;) 179.1 233.98 T
4 10 Q
(Tk_DestroyWindow) 152.1 220.31 T
2 F
( is not invoked very often but it is used, for example, to destroy a) 248.05 220.31 T
-0.35 (new widget immediately if an error is encountered while con\336guring it \050see Figure 37.1 on) 152.1 208.31 P
-0.37 (page 373\051. The last way for a widget to be destroyed is for someone to delete its X window) 152.1 196.31 P
-0.37 (directly) 152.1 184.31 P
-0.37 (. This does not occur very often, and is not generally a good idea, but in some cases) 181.98 184.31 P
(it may make sense for a top-level window to be deleted externally \050by the window man-) 152.1 172.31 T
(ager) 152.1 160.31 T
(, for example\051.) 168.9 160.31 T
44.1 351 98.1 423 C
35.1 360 197.1 414 R
7 X
0 K
V
1 9 Q
0 X
(FIGURE  41) 35.1 408 T
(T) 35.1 387 T
(ABLE  41) 40.43 387 T
26.1 351 125.1 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "371" 54
%%Page: "372" 54
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(372) 98.1 668.33 T
3 F
(Destroying Widgets) 425.46 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(A widget should handle all of these forms of window destruction in the same way) 170.1 423.54 T
(using a handler for) 152.1 411.54 T
4 F
(DestroyNotify) 229.82 411.54 T
2 F
( events. Tk makes sure that a) 307.77 411.54 T
4 F
(DestroyNotify) 426.02 411.54 T
2 F
(event is generated for each window that is destroyed and doesn\325) 152.1 399.54 T
(t free up its) 407.83 399.54 T
4 F
(Tk_Window) 455.57 399.54 T
2 F
-0.09 (structure until after the handlers for the event have been invoked. When a widget receives) 152.1 387.54 P
(a) 152.1 375.54 T
4 F
(DestroyNotify) 159.04 375.54 T
2 F
( event it typically does four things to clean itself up:) 236.99 375.54 T
1 F
(1.) 152.1 360.54 T
2 F
(It deletes the widget command for the widget by calling) 162.9 360.54 T
4 F
(Tcl_DeleteCommand) 388.86 360.54 T
2 F
(.) 490.8 360.54 T
1 F
(2.) 152.1 345.54 T
2 F
-0.19 (It cancels any idle callbacks and timer handlers for the widget, such as the idle callback) 162.9 345.54 P
(to redisplay the widget.) 162.9 333.54 T
1 F
(3.) 152.1 318.54 T
2 F
(It frees any resources allocated for the widget. Most of this can be done by calling) 162.9 318.54 T
4 F
(Tk_FreeOptions) 162.9 306.54 T
2 F
(, but widgets usually have a few resources such as graphics con-) 246.85 306.54 T
(texts that are not directly associated with con\336guration options.) 162.9 294.54 T
1 F
(4.) 152.1 279.53 T
2 F
(It frees the widget record.) 162.9 279.53 T
-0.28 (For square widgets the \336rst two of these actions are carried out in the event procedure, and) 152.1 264.53 P
(the third and fourth actions are carried out in a separate procedure called) 152.1 252.53 T
4 F
(DestroySquare) 152.1 240.53 T
2 F
(.) 230.06 240.53 T
4 F
(DestroySquare) 235.05 240.53 T
2 F
( is the) 313.01 240.53 T
5 F
(destr) 339.39 240.53 T
(oy pr) 359.01 240.53 T
(ocedur) 379.45 240.53 T
(e) 406.84 240.53 T
2 F
( for square widgets; it is) 411.28 240.53 T
(invoked indirectly from the event procedure using the mechanism discussed in Section) 152.1 228.53 T
(41.2 below) 152.1 216.53 T
(. Its code is shown in Figure 41.1.) 195.87 216.53 T
98.1 173.18 512.1 176.2 C
152.1 174.4 512.1 174.4 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 174.69 143.1 174.69 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(41.2) 117.96 180.2 T
(Delayed cleanup) 152.1 180.2 T
2 10 Q
(The most delicate aspect of widget destruction is that the widget could be in use at the) 152.1 156.51 T
-0.23 (time it is destroyed; special precautions must be taken to delay most of the widget cleanup) 152.1 144.51 P
98.1 135 512.1 639 C
98.1 430.2 512.1 639 C
98.1 478 512.1 492.4 C
98.1 478 512.1 492.4 R
7 X
0 K
V
152.1 485.92 512.1 485.92 2 L
V
0.5 H
2 Z
0 X
N
98.1 430.2 512.1 639 C
1 9 Q
0 X
0 K
(T) 152.1 472 T
(able  41.1.) 157.27 472 T
2 F
(A summary of the Tk library procedures for destroying widgets and delaying object) 200.21 472 T
98.1 445.6 512.1 460 C
98.1 445.6 512.1 460 R
7 X
0 K
V
152.1 453.52 512.1 453.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 430.2 512.1 639 C
2 9 Q
0 X
0 K
(cleanup.) 152.1 463 T
4 F
(void Tk_DestroyWindow\050Tk_Window tkwin\051) 158.1 625.4 T
2 F
(Destroys) 230.1 616.4 T
4 F
(tkwin) 264.3 616.4 T
2 F
( and all of its descendants in the widget hierarchy) 291.26 616.4 T
(.) 468.64 616.4 T
4 F
(void Tk_Preserve\050ClientData clientData\051) 158.1 597.4 T
2 F
(Makes sure that) 230.1 588.4 T
4 F
(clientData) 289.26 588.4 T
2 F
( will not be freed until a matching call to) 343.18 588.4 T
4 F
(Tk_Release) 230.1 579.4 T
2 F
( has been made.) 284.02 579.4 T
4 F
(void Tk_Release\050ClientData clientData\051) 158.1 570.4 T
2 F
(Cancels a previous) 230.1 561.4 T
4 F
(Tk_Preserve) 300.24 561.4 T
2 F
( call for) 359.55 561.4 T
4 F
(clientData) 389.75 561.4 T
2 F
(. May cause) 443.68 561.4 T
4 F
(clientData) 230.1 552.4 T
2 F
( to be freed.) 284.02 552.4 T
4 F
(void Tk_EventuallyFree\050ClientData clientData Tk_FreeProc) 158.1 543.4 T
(*freeProc\051) 230.1 534.4 T
2 F
(Invokes) 230.1 525.4 T
4 F
(freeProc) 260.8 525.4 T
2 F
( to free up) 303.94 525.4 T
4 F
(clientData) 342.87 525.4 T
2 F
( unless) 396.8 525.4 T
4 F
(Tk_Preserve) 423.76 525.4 T
2 F
( has) 483.08 525.4 T
(been called for it; in this case) 230.1 516.4 T
4 F
(freeProc) 337.68 516.4 T
2 F
( won\325) 380.82 516.4 T
(t be invoked until each) 401.37 516.4 T
4 F
(Tk_Preserve) 230.1 507.4 T
2 F
( call has been cancelled with a call to) 289.42 507.4 T
4 F
(Tk_Release) 425.44 507.4 T
2 F
(.) 479.37 507.4 T
152.1 637.15 152.1 500.65 2 L
V
0.5 H
0 Z
N
512.1 637.15 512.1 500.65 2 L
V
N
151.85 637.4 512.35 637.4 2 L
V
N
151.85 609.4 512.35 609.4 2 L
V
0.25 H
N
151.85 500.4 512.35 500.4 2 L
V
0.5 H
N
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "372" 55
%%Page: "373" 55
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
(41.2 Delayed cleanup) 98.1 668.33 T
0 F
(373) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
-0.3 (until the widget is no longer in use. For example, suppose that a dialog box) 152.1 484.73 P
4 F
-0.73 (.dlg) 450.41 484.73 P
2 F
-0.3 ( contains) 474.4 484.73 P
(a button that is created with the following command:) 152.1 472.71 T
4 9 Q
(button .dlg.quit -text Quit -command "destroy .dlg") 179.1 458.38 T
2 10 Q
(The purpose of this button is to destroy the dialog box. Now suppose that the user clicks) 152.1 444.71 T
(on the button with the mouse. The binding for) 152.1 432.7 T
4 F
(<ButtonRelease-1>) 338.66 432.7 T
2 F
( invokes the but-) 440.6 432.7 T
(ton\325) 152.1 420.68 T
(s) 167.65 420.68 T
4 F
(invoke) 174.04 420.68 T
2 F
( widget command:) 210.02 420.68 T
4 9 Q
(.dlg.quit invoke) 179.1 406.34 T
2 10 Q
(The) 152.1 392.68 T
4 F
(invoke) 170.14 392.68 T
2 F
( widget command evaluates the button\325) 206.12 392.68 T
(s) 362.96 392.68 T
4 F
(-command) 369.35 392.68 T
2 F
( option as a T) 417.32 392.68 T
(cl script,) 471.04 392.68 T
(which destroys the dialog and all its descendants, including the button itself. When the) 152.1 380.66 T
(button is destroyed a) 152.1 368.64 T
4 F
(DestroyNotify) 237.6 368.64 T
2 F
( event is generated, which causes the button\325) 315.56 368.64 T
(s) 493.76 368.64 T
(event procedure to be invoked to clean up the destroyed widget. Unfortunately it is not) 152.1 356.62 T
(safe for the event procedure to free the button\325) 152.1 344.6 T
(s widget record because the) 337.5 344.6 T
4 F
(invoke) 450.46 344.6 T
2 F
( wid-) 486.44 344.6 T
(get command is still pending on the call stack: when the event procedure returns, control) 152.1 332.58 T
(will eventually return back to the widget command procedure, which may need to refer-) 152.1 320.56 T
(ence the widget record. If the event procedure frees the widget record then the widget) 152.1 308.54 T
(command procedure will make wild references into memory) 152.1 296.52 T
(. Thus in this situation it is) 393.21 296.52 T
(important to wait until the widget command procedure completes before freeing the wid-) 152.1 284.51 T
(get record.) 152.1 272.49 T
(However) 170.1 260.49 T
(, a button widget might also be deleted at a time when there is no) 206.33 260.49 T
4 F
(invoke) 468.94 260.49 T
2 F
-0.04 (widget command pending \050e.g. the user might click on some other button, which destroys) 152.1 248.47 P
-0.07 (the entire application\051. In this case the cleanup must be done by the event procedure since) 152.1 236.45 P
(there won\325) 152.1 224.43 T
(t be any other opportunity for the widget to clean itself up. In other cases there) 194.94 224.43 T
-0.33 (could be several nested procedures each of which is using the widget record, so it won\325) 152.1 212.41 P
-0.33 (t be) 495.55 212.41 P
(safe to clean up the widget record until the last of these procedures \336nishes.) 152.1 200.39 T
(In order to handle all of these cases cleanly Tk provides a mechanism for keeping) 170.1 188.39 T
(track of whether an object is in use and delaying its cleanup until it is no longer being) 152.1 176.37 T
(used.) 152.1 164.35 T
4 F
(Tk_Preserve) 175.42 164.35 T
2 F
( is invoked to indicate that an object is in use and should not be) 241.38 164.35 T
(freed:) 152.1 152.33 T
4 9 Q
(void Tk_Preserve\050ClientData clientData\051;) 179.1 138 T
98.1 135 512.1 639 C
98.1 491.4 512.1 639 C
4 9 Q
0 X
0 K
(void DestroySquare\050ClientData clientData\051 {) 152.1 633 T
(Square *squarePtr = \050Square *\051 clientData;) 172.19 623 T
(Tk_FreeOptions\050conf) 172.19 613 T
(igSpecs, \050char *\051 squarePtr,) 274.64 613 T
(squarePtr->display, 0\051;) 212.44 603 T
(if \050squarePtr->gc != None\051 {) 172.19 593 T
(Tk_FreeGC\050squarePtr->display, squarePtr->gc\051;) 192.35 583 T
(}) 172.19 573 T
(free\050\050char *\051 squarePtr\051;) 172.19 563 T
(}) 152.1 553 T
98.1 531.6 508.5 546 C
98.1 531.6 508.5 546 R
7 X
0 K
V
152.1 539.52 512.1 539.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 491.4 512.1 639 C
98.1 508.2 508.5 522.6 C
98.1 508.2 508.5 522.6 R
7 X
0 K
V
152.1 516.12 512.1 516.12 2 L
V
0.5 H
2 Z
0 X
N
98.1 491.4 512.1 639 C
1 9 Q
0 X
0 K
(Figur) 152.1 525.6 T
(e  41.1.) 173.41 525.6 T
2 F
(The destroy procedure for square widgets.) 204.36 525.6 T
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "373" 56
%%Page: "374" 56
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(374) 98.1 668.33 T
3 F
(Destroying Widgets) 425.46 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(The) 152.1 632.33 T
4 F
(clientData) 170.14 632.33 T
2 F
( ar) 230.11 632.33 T
(gument is a token for an object that might potentially be freed; typi-) 240.19 632.33 T
-0.24 (cally it is the address of a widget record. For each call to) 152.1 620.2 P
4 F
-0.57 (Tk_Preserve) 377.73 620.2 P
2 F
-0.24 ( there must even-) 443.7 620.2 P
(tually be a call to) 152.1 608.08 T
4 F
(Tk_Release) 223.44 608.08 T
2 F
(:) 283.41 608.08 T
4 9 Q
(void Tk_Release\050ClientData clientData\051;) 179.1 593.74 T
2 10 Q
(The) 152.1 580.08 T
4 F
(clientData) 170.14 580.08 T
2 F
( ar) 230.11 580.08 T
(gument should be the same as the corresponding ar) 240.19 580.08 T
(gument to) 444.31 580.08 T
4 F
(Tk_Preserve) 152.1 567.95 T
2 F
(. Each call to) 218.06 567.95 T
4 F
(Tk_Release) 272.74 567.95 T
2 F
( cancels a call to) 332.71 567.95 T
4 F
(Tk_Preserve) 401.26 567.95 T
2 F
( for the) 467.23 567.95 T
(object; once all calls to) 152.1 555.82 T
4 F
(Tk_Preserve) 246.76 555.82 T
2 F
( have been cancelled it is safe to free the object.) 312.72 555.82 T
(When) 170.1 543.82 T
4 F
(Tk_Preserve) 196.46 543.82 T
2 F
( and) 262.43 543.82 T
4 F
(Tk_Release) 281.86 543.82 T
2 F
( are being used to manage an object you) 341.83 543.82 T
(should call) 152.1 531.69 T
4 F
(Tk_EventuallyFree) 198.18 531.69 T
2 F
( to free the object:) 300.13 531.69 T
4 9 Q
(void Tk_EventuallyFree\050ClientData clientData,) 179.1 517.35 T
(Tk_FreeProc *freeProc\051;) 224.75 507.23 T
4 10 Q
(ClientData) 152.1 493.56 T
2 F
( must be the same as the) 212.07 493.56 T
4 F
(clientData) 311.72 493.56 T
2 F
( ar) 371.69 493.56 T
(gument used in calls to) 381.77 493.56 T
4 F
-0.92 (Tk_Preserve) 152.1 481.43 P
2 F
-0.38 ( and) 218.06 481.43 P
4 F
-0.92 (Tk_Release) 236.73 481.43 P
2 F
-0.38 (, and) 296.7 481.43 P
4 F
-0.92 (freeProc) 317.86 481.43 P
2 F
-0.38 ( is a procedure that actually frees the) 365.83 481.43 P
(object.) 152.1 469.3 T
4 F
(FreeProc) 181.52 469.3 T
2 F
( must match the following prototype:) 229.5 469.3 T
4 9 Q
(typedef void Tk_FreeProc\050ClientData clientData\051;) 179.1 454.97 T
2 10 Q
(Its) 152.1 441.3 T
4 F
(clientData) 164.59 441.3 T
2 F
( ar) 224.56 441.3 T
(gument will be the same as the) 234.65 441.3 T
4 F
(clientData) 360.4 441.3 T
2 F
( ar) 420.36 441.3 T
(gument to) 430.45 441.3 T
4 F
(Tk_EventuallyFree) 152.1 429.17 T
2 F
(. If the object hasn\325) 254.04 429.17 T
(t been protected with calls to) 331.3 429.17 T
4 F
(Tk_Pre-) 449 429.17 T
-0.09 (serve) 152.1 417.04 P
2 F
-0.04 ( then) 182.08 417.04 P
4 F
-0.09 (Tk_EventuallyFree) 204.21 417.04 P
2 F
-0.04 ( will invoke) 306.16 417.04 P
4 F
-0.09 (freeProc) 356.29 417.04 P
2 F
-0.04 ( immediately) 404.27 417.04 P
-0.04 (. If) 456.05 417.04 P
4 F
-0.09 (Tk_Pre-) 470.12 417.04 P
(serve) 152.1 404.91 T
2 F
( has been called for the object then) 182.08 404.91 T
4 F
(freeProc) 323.64 404.91 T
2 F
( won\325) 371.61 404.91 T
(t be invoked immediately;) 394.47 404.91 T
-0.23 (instead it will be invoked later when) 152.1 392.79 P
4 F
-0.56 (Tk_Release) 298.43 392.79 P
2 F
-0.23 ( is called. If) 358.39 392.79 P
4 F
-0.56 (Tk_Preserve) 407.15 392.79 P
2 F
-0.23 ( has been) 473.11 392.79 P
(called multiple times then) 152.1 380.66 T
4 F
(freeProc) 258.15 380.66 T
2 F
( won\325) 306.12 380.66 T
(t be invoked until each of the calls to) 328.98 380.66 T
4 F
(Tk_Preserve) 152.1 368.53 T
2 F
( has been cancelled by a separate call to) 218.06 368.53 T
4 F
(Tk_Release) 379.86 368.53 T
2 F
(.) 439.83 368.53 T
(I recommend that you use these procedures in the same way as in the square widget.) 170.1 356.53 T
(Place a call to) 152.1 344.4 T
4 F
(Tk_Preserve) 210.39 344.4 T
2 F
( at the beginning of the widget command procedure and a) 276.35 344.4 T
(call to) 152.1 332.27 T
4 F
(Tk_Release) 179.3 332.27 T
2 F
( at the end of the widget command procedure, and be sure that you) 239.27 332.27 T
(don\325) 152.1 320.14 T
(t accidentally return from the widget command procedure without calling) 170.24 320.14 T
4 F
(Tk_Re-) 466.14 320.14 T
(lease) 152.1 308.01 T
2 F
(, since this would prevent the widget from ever being freed. Then divide the wid-) 182.08 308.01 T
(get cleanup code into two parts. Put the code to delete the widget command, idle) 152.1 295.88 T
(callbacks, and timer handlers directly into the event procedure; this code can be executed) 152.1 283.75 T
(immediately without danger) 152.1 271.62 T
(, and it prevents any new invocations of widget code. Put all) 264.41 271.62 T
(the code to cleanup the widget record into a separate delete procedure like) 152.1 259.49 T
4 F
(DestroySquare) 152.1 247.37 T
2 F
(, and call) 230.06 247.37 T
4 F
(Tk_EventuallyFree) 268.92 247.37 T
2 F
( from the event procedure with the) 370.86 247.37 T
(delete procedure as its) 152.1 235.24 T
4 F
(freeProc) 243.69 235.24 T
2 F
( ar) 291.66 235.24 T
(gument.) 301.75 235.24 T
(This approach is a bit conservative but it\325) 170.1 223.24 T
(s simple and safe. For example, most wid-) 335.27 223.24 T
(gets have only one or two widget commands that could cause the widget to be destroyed,) 152.1 211.11 T
-0.07 (such as the) 152.1 198.98 P
4 F
-0.16 (invoke) 198.25 198.98 P
2 F
-0.07 ( widget command for buttons. Y) 234.23 198.98 P
-0.07 (ou could move the calls to) 362.82 198.98 P
4 F
-0.16 (Tk_Pre-) 470.12 198.98 P
(serve) 152.1 186.85 T
2 F
( and) 182.08 186.85 T
4 F
(Tk_Release) 201.51 186.85 T
2 F
( so that they only occur around code that might destroy the) 261.48 186.85 T
-0.38 (widget, such as a) 152.1 174.72 P
4 F
-0.91 (Tcl_GlobalEval) 221.36 174.72 P
2 F
-0.38 ( call. This will save a bit of overhead by eliminating) 305.31 174.72 P
(calls to) 152.1 162.59 T
4 F
(Tk_Preserve) 183.19 162.59 T
2 F
( and) 249.16 162.59 T
4 F
(Tk_Release) 268.59 162.59 T
2 F
( where they\325re not needed. However) 328.55 162.59 T
(,) 473.57 162.59 T
4 F
(Tk_Preserve) 152.1 150.46 T
2 F
( and) 218.06 150.46 T
4 F
(Tk_Release) 237.49 150.46 T
2 F
( are fast enough that this optimization won\325) 297.46 150.46 T
(t save) 471.33 150.46 T
(much time and it means you\325ll constantly have to be on the lookout to add more calls to) 152.1 138.33 T
FMENDPAGE
%%EndPage: "374" 57
%%Page: "375" 57
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
(41.2 Delayed cleanup) 98.1 668.33 T
0 F
(375) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
4 10 Q
0 X
-0.65 (Tk_Preserve) 152.1 632.33 P
2 F
-0.27 ( and) 218.06 632.33 P
4 F
-0.65 (Tk_Release) 236.95 632.33 P
2 F
-0.27 ( if you modify the widget command procedure. If you) 296.92 632.33 P
(place the calls the beginning and end of the procedure you can make any modi\336cations) 152.1 620.33 T
-0.26 (you wish to the procedure without having to worry about issues of widget cleanup. In fact,) 152.1 608.33 P
(the square widget doesn\325) 152.1 596.33 T
(t need calls to) 251.57 596.33 T
4 F
(Tk_Preserve) 309.3 596.33 T
2 F
( and) 375.27 596.33 T
4 F
(Tk_Release) 394.7 596.33 T
2 F
( at all, but I) 454.66 596.33 T
(put them in anyway so that I won\325) 152.1 584.33 T
(t have to remember to add them later if I modify the) 288.77 584.33 T
(widget command procedure.) 152.1 572.33 T
(For most widgets the only place you\325ll need calls to) 170.1 560.33 T
4 F
(Tk_Preserve) 379.42 560.33 T
2 F
( and) 445.38 560.33 T
4 F
(Tk_Re-) 464.81 560.33 T
(lease) 152.1 548.33 T
2 F
( is in the widget command procedure. However) 182.08 548.33 T
(, if you invoke procedures like) 371.54 548.33 T
4 F
(Tcl_Eval) 152.1 536.33 T
2 F
( anywhere else in the widget\325) 200.07 536.33 T
(s code then you\325ll need additional) 316.93 536.33 T
4 F
(Tk_Pre-) 454.61 536.33 T
(serve) 152.1 524.33 T
2 F
( and) 182.08 524.33 T
4 F
(Tk_Release) 201.51 524.33 T
2 F
( calls there too. For example, widgets like canvases and texts) 261.48 524.33 T
(implement their own event binding mechanisms in C code; these widgets must invoke) 152.1 512.33 T
4 F
(Tk_Preserve) 152.1 500.33 T
2 F
( and) 218.06 500.33 T
4 F
(Tk_Release) 237.49 500.33 T
2 F
( around the calls to event handlers.) 297.46 500.33 T
(The problem of freeing objects while they\325re in use occurs in many contexts in Tk) 170.1 488.33 T
(applications. For example, it\325) 152.1 476.33 T
(s possible for the) 268.98 476.33 T
4 F
( -command) 336.99 476.33 T
2 F
( option for a button to change) 390.96 476.33 T
(the button\325) 152.1 464.33 T
(s) 195.14 464.33 T
4 F
(-command) 201.52 464.33 T
2 F
( option. This could cause the memory for the old value of the) 249.5 464.33 T
(option to be freed while it\325) 152.1 452.33 T
(s still being evaluated by the T) 258.42 452.33 T
(cl interpreter) 380.42 452.33 T
(. T) 431.22 452.33 T
(o eliminate this) 441.62 452.33 T
-0.38 (problem the button widget evaluates a copy of the script rather than the original. In general) 152.1 440.33 P
(whenever you make a call whose behavior isn\325) 152.1 428.33 T
(t completely predictable, such as a call to) 339.27 428.33 T
4 F
(Tcl_Eval) 152.1 416.33 T
2 F
( and its cousins, you should think about all the objects that are in use at the) 200.07 416.33 T
(time of the call and take steps to protect them. In some simple cases making local copies) 152.1 404.33 T
(may be the simplest solution, as with the) 152.1 392.33 T
4 F
(-command) 317.29 392.33 T
2 F
( option; in more complex cases I\325d) 365.26 392.33 T
(suggest using) 152.1 380.33 T
4 F
(Tk_Preserve) 208.74 380.33 T
2 F
( and) 274.7 380.33 T
4 F
(Tk_Release) 294.13 380.33 T
2 F
(; they can be used for objects of any) 354.1 380.33 T
(sort, not just widget records.) 152.1 368.33 T
5 F
(Note:) 119.09 353.33 T
4 F
(Tk_Preserve) 152.1 353.33 T
5 F
( and) 218.06 353.33 T
4 F
(Tk_Release) 238.05 353.33 T
5 F
( implement a form of short-term r) 298.02 353.33 T
(efer) 432.02 353.33 T
(ence counts.) 447.19 353.33 T
(They ar) 152.1 343.33 T
(e implemented under the assumption that objects ar) 182.54 343.33 T
(e only in use for short periods) 388.99 343.33 T
(of time such as the duration of a particular pr) 152.1 333.33 T
(ocedur) 335.25 333.33 T
(e call, so that ther) 362.63 333.33 T
(e ar) 434.73 333.33 T
(e only a few) 450.18 333.33 T
(pr) 152.1 323.33 T
(otected objects at any given time. Y) 160.62 323.33 T
(ou should not use them for long-term r) 300.99 323.33 T
(efer) 455.25 323.33 T
(ence) 470.42 323.33 T
-0.32 (counts wher) 152.1 313.33 P
-0.32 (e ther) 199.99 313.33 P
-0.32 (e might be hundr) 222.34 313.33 P
-0.32 (eds or thousands of objects that ar) 289.02 313.33 P
-0.32 (e pr) 424.98 313.33 P
-0.32 (otected at a given) 440.11 313.33 P
(time, since they will be very slow in these cases.) 152.1 303.33 T
FMENDPAGE
%%EndPage: "375" 58
%%Page: "376" 58
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(376) 98.1 668.33 T
3 F
(Destroying Widgets) 425.46 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
FMENDPAGE
%%EndPage: "376" 59
%%Page: "377" 59
612 792 0 FMBEGINPAGE
98.1 675 512.1 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
98.1 450 512.1 450 2 L
7 X
V
2 Z
0 X
N
98.1 108 512.1 126 R
7 X
V
0 10 Q
0 X
(377) 495.43 119.33 T
98.1 54 512.1 108 R
7 X
V
2 9 Q
0 X
(Copyright \251 1993 Addison-W) 152.1 102 T
(esley Publishing Company) 261.32 102 T
(, Inc.) 357.1 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 152.1 91 T
(. Any) 485.77 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 152.1 80 T
-0.34 (lisher) 152.1 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 171.58 69 P
(does not of) 152.1 58 T
(fer warranties in regard to this draft.) 191.88 58 T
1 24 Q
(Chapter 42) 152.1 605 T
-0.48 (Managing the Selection) 152.1 575 S
98.1 135 512.1 423 R
7 X
V
2 10 Q
0 X
-0.08 (This chapter describes how to manipulate the X selection from C code. The low-level pro-) 152.1 416.33 P
(tocols for claiming the selection and transmitting it between applications are de\336ned by) 152.1 404.18 T
(X\325) 152.1 392.03 T
(s Inter) 162.09 392.03 T
(-Client Communications Convention Manual \050ICCCM\051 and are very compli-) 187.15 392.03 T
-0.2 (cated. Fortunately Tk takes care of all the low-level details for you and provides three sim-) 152.1 379.88 P
(pler operations that you can perform on the selection:) 152.1 367.73 T
2 12 Q
(\245) 152.1 352.73 T
2 10 Q
(Create a) 162.9 352.73 T
5 F
(selection handler) 198.42 352.73 T
2 F
(, which is a callback procedure that can supply the selection) 267.14 352.73 T
(when it is owned in a particular window and retrieved with a particular tar) 162.9 340.57 T
(get.) 459.44 340.57 T
2 12 Q
(\245) 152.1 325.57 T
2 10 Q
(Claim ownership of the selection for a particular window) 162.9 325.57 T
(.) 390.98 325.57 T
2 12 Q
(\245) 152.1 310.57 T
2 10 Q
(Retrieve the selection from its current owner in a particular tar) 162.9 310.57 T
(get form.) 412.52 310.57 T
(Each of these three operations can be performed either using T) 152.1 295.57 T
(cl scripts or by writing C) 402.3 295.57 T
(code. Chapter XXX described how to manipulate the selection with T) 152.1 283.42 T
(cl scripts and much) 430.37 283.42 T
-0.29 (of that information applies here as well, such as the use of tar) 152.1 271.27 P
-0.29 (gets to specify dif) 393.54 271.27 P
-0.29 (ferent ways) 463.83 271.27 P
-0.06 (to retrieve the selection. T) 152.1 259.12 P
-0.06 (cl scripts usually just retrieve the selection; claiming ownership) 255.82 259.12 P
(and supplying the selection are rarely done from T) 152.1 246.97 T
(cl. In contrast, it\325) 353.47 246.97 T
(s common to create) 421.48 246.97 T
(selection handlers and claim ownership of the selection from C code but rare to retrieve) 152.1 234.81 T
(the selection. See T) 152.1 222.66 T
(able 42.1 for a summary of the Tk library procedures related to the) 229.68 222.66 T
(selection.) 152.1 210.51 T
98.1 167.15 512.1 170.18 C
152.1 168.38 512.1 168.38 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 168.66 143.1 168.66 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(42.1) 117.96 174.18 T
(Selection handlers) 152.1 174.18 T
2 10 Q
-0.26 (Each widget that supports the selection, such as an entry or text, must provide one or more) 152.1 150.48 P
5 F
(selection handlers) 152.1 138.33 T
2 F
( to supply the selection on demand when the widget owns it. Each han-) 225.11 138.33 T
44.1 351 98.1 423 C
35.1 360 197.1 414 R
7 X
0 K
V
1 9 Q
0 X
(FIGURE  42) 35.1 408 T
(T) 35.1 387 T
(ABLE  42) 40.43 387 T
26.1 351 125.1 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "377" 60
%%Page: "378" 60
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(378) 98.1 668.33 T
3 F
(Managing the Selection) 407.66 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(dler returns the selection in a particular tar) 152.1 355.13 T
(get form. The procedure) 321.51 355.13 T
4 F
(Tk_Create-) 421.14 355.13 T
(SelHandler) 152.1 343.13 T
2 F
( creates a new selection handler:) 212.07 343.13 T
4 9 Q
(void Tk_CreateSelHandler\050Tk_Window tkwin, Atom target,) 179.1 328.8 T
(Tk_SelectionProc *proc, ClientData clientData,) 224.75 318.8 T
(Atom format\051;) 224.75 308.8 T
4 10 Q
-0.13 (Tkwin) 152.1 295.13 P
2 F
-0.05 ( is the window from which the selection will be provided; the handler will only be) 182.08 295.13 P
(asked to supply the selection when the selection is owned by) 152.1 283.13 T
4 F
(tkwin) 397.21 283.13 T
2 F
(.) 427.2 283.13 T
4 F
(Target) 432.2 283.13 T
2 F
( speci\336es) 468.18 283.13 T
(the tar) 152.1 271.13 T
(get form in which the handler can supply the selection; the handler will only be) 177.18 271.13 T
-0.31 (invoked when the selection is retrieved with that tar) 152.1 259.13 P
-0.31 (get.) 356.52 259.13 P
4 F
-0.74 (Proc) 373.42 259.13 P
2 F
-0.31 ( is the address of the handler) 397.41 259.13 P
(callback, and) 152.1 247.13 T
4 F
(clientData) 207.33 247.13 T
2 F
( is a one-word value to pass to) 267.3 247.13 T
4 F
(proc) 391.1 247.13 T
2 F
(.) 415.08 247.13 T
4 F
(Format) 420.08 247.13 T
2 F
( tells Tk how) 456.06 247.13 T
(to transmit the selection to the requestor and is usually) 152.1 235.13 T
4 F
(XA_STRING) 372.52 235.13 T
2 F
( \050see the reference) 426.49 235.13 T
(documentation for other possibilities\051.) 152.1 223.13 T
(The callback procedure for a selection handler must match the following prototype:) 170.1 211.13 T
4 9 Q
(typedef int Tk_SelectionProc\050ClientData clientData,) 179.1 196.8 T
(int offset, char *buffer, int maxBytes\051;) 224.75 186.8 T
2 10 Q
(The) 152.1 173.13 T
4 F
(clientData) 170.14 173.13 T
2 F
( ar) 230.11 173.13 T
(gument will be the same as the) 240.19 173.13 T
4 F
(clientData) 365.94 173.13 T
2 F
( ar) 425.91 173.13 T
(gument passed to) 435.99 173.13 T
4 F
(Tk_CreateSelHandler) 152.1 161.13 T
2 F
(; it is usually the address of a widget record.) 266.04 161.13 T
4 F
(Proc) 445.08 161.13 T
2 F
( should) 469.07 161.13 T
(place a null-terminated string at) 152.1 149.13 T
4 F
(buffer) 281.73 149.13 T
2 F
( containing up to) 317.71 149.13 T
4 F
(maxBytes) 387.67 149.13 T
2 F
( of the selection) 435.64 149.13 T
98.1 135 512.1 639 C
98.1 361.8 512.1 639 C
98.1 396 512.1 410.4 C
98.1 396 512.1 410.4 R
7 X
0 K
V
152.1 403.92 512.1 403.92 2 L
V
0.5 H
2 Z
0 X
N
98.1 361.8 512.1 639 C
98.1 372.6 512.1 387 C
98.1 372.6 512.1 387 R
7 X
0 K
V
152.1 380.52 512.1 380.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 361.8 512.1 639 C
1 9 Q
0 X
0 K
(T) 152.1 390 T
(able  42.1.) 157.27 390 T
2 F
(A summary of Tk\325) 200.21 390 T
(s procedures for managing the selection.) 266.86 390 T
4 F
(Tk_CreateSelHandler\050Tk_Window tkwin, Atom target,) 158.1 625.4 T
(Tk_SelectionProc *proc, ClientData clientData, Atom format\051) 179.67 616.4 T
2 F
(Arranges for) 230.1 607.4 T
4 F
(proc) 278.01 607.4 T
2 F
( to be invoked whenever the selection is owned by) 299.58 607.4 T
4 F
-0.81 (tkwin) 230.1 598.4 P
2 F
-0.34 ( and is retrieved in the form given by) 257.06 598.4 P
4 F
-0.81 (target) 389.57 598.4 P
2 F
-0.34 (.) 421.92 598.4 P
4 F
-0.81 (Format) 426.08 598.4 P
2 F
-0.34 ( speci\336es the) 458.43 598.4 P
(form in which Tk should transmit the selection to the requestor) 230.1 589.4 T
(, and is usu-) 456.4 589.4 T
(ally) 230.1 580.4 T
4 F
(XA_STRING) 245.83 580.4 T
2 F
(.) 294.36 580.4 T
4 F
(Tk_DeleteSelHandler\050Tk_Window tkwin, Atom target\051) 158.1 571.4 T
2 F
(Removes the handler for) 230.1 562.4 T
4 F
(tkwin) 320.95 562.4 T
2 F
( and) 347.92 562.4 T
4 F
(target) 365.39 562.4 T
2 F
(, if one exists.) 397.74 562.4 T
4 F
(Tk_OwnSelection\050Tk_Window tkwin, Tk_LostSelProc *proc,) 158.1 543.4 T
(ClientData clientData\051) 179.67 534.4 T
2 F
(Claims ownership of the selection for) 230.1 525.4 T
4 F
(tkwin) 367.39 525.4 T
2 F
( and noti\336es the previous) 394.35 525.4 T
(owner) 230.1 516.4 T
(, if any) 252.2 516.4 T
(, that it has lost the selection.) 276.83 516.4 T
4 F
(Proc) 383.42 516.4 T
2 F
( will be invoked later when) 404.99 516.4 T
4 F
(tkwin) 230.1 507.4 T
2 F
( loses the selection.) 257.06 507.4 T
4 F
(Tk_ClearSelection\050Tk_Window tkwin\051) 158.1 498.4 T
2 F
(Cancels any existing selection for the display containing) 230.1 489.4 T
4 F
(tkwin) 435.29 489.4 T
2 F
(.) 462.25 489.4 T
4 F
(int Tk_GetSelection\050Tcl_Interp *interp, Tk_Window tkwin,) 158.1 470.4 T
(Atom target, Tk_GetSelProc *proc, ClientData clientData\051) 179.67 461.4 T
2 F
(Retrieves the selection for) 230.1 452.4 T
4 F
(tkwin) 326.44 452.4 T
2 F
(\325) 353.41 452.4 T
(s display in the format speci\336ed by) 355.9 452.4 T
4 F
(tar-) 483.97 452.4 T
(get) 230.1 443.4 T
2 F
( and passes it to) 246.28 443.4 T
4 F
(proc) 305.44 443.4 T
2 F
( in one or more pieces. Returns) 327.01 443.4 T
4 F
(TCL_OK) 441.33 443.4 T
2 F
( or) 473.69 443.4 T
4 F
-0.66 (TCL_ERROR) 230.1 434.4 P
2 F
-0.27 ( and leaves an error message in) 278.63 434.4 P
4 F
-0.66 (interp->result) 391.27 434.4 P
2 F
-0.27 ( if an error) 466.77 434.4 P
(occurs.) 230.1 425.4 T
152.1 637.15 152.1 418.65 2 L
V
0.5 H
0 Z
N
512.1 637.15 512.1 418.65 2 L
V
N
151.85 637.4 512.35 637.4 2 L
V
N
151.85 555.4 512.35 555.4 2 L
V
0.25 H
N
151.85 482.4 512.35 482.4 2 L
V
N
151.85 418.4 512.35 418.4 2 L
V
0.5 H
N
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "378" 61
%%Page: "379" 61
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
(42.1 Selection handlers) 98.1 668.33 T
0 F
(379) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(starting at byte) 152.1 632.33 T
4 F
(offset) 214.01 632.33 T
2 F
( within the selection. The procedure should return a count of the) 249.99 632.33 T
(number of non-null bytes copied, which must be) 152.1 620.21 T
4 F
(maxBytes) 348.36 620.21 T
2 F
( unless there are fewer than) 396.34 620.21 T
4 F
(maxBytes) 152.1 608.09 T
2 F
( left in the selection. If the widget no longer has a selection \050because, for) 200.07 608.09 T
(example, the user deleted the selected range of characters\051 the selection handler should) 152.1 595.97 T
(return -1.) 152.1 583.85 T
(Usually the entire selection will be retrieved in a single request: of) 170.1 571.85 T
(fset will be 0 and) 435.56 571.85 T
4 F
(maxBytes) 152.1 559.73 T
2 F
( will be lar) 200.07 559.73 T
(ge enough to accommodate the entire selection. However) 242.92 559.73 T
(, very) 471.78 559.73 T
-0.09 (lar) 152.1 547.61 P
-0.09 (ge selections will be retrieved in transfers of a few thousand bytes each. Tk will invoke) 162.46 547.61 P
-0.01 (the callback several times using successively higher values of) 152.1 535.48 P
4 F
-0.04 (offset) 400.95 535.48 P
2 F
-0.01 ( to retrieve succes-) 436.93 535.48 P
-0.29 (sive portions of the selection. If the callback returns a value less than) 152.1 523.36 P
4 F
-0.7 (maxBytes) 426.42 523.36 P
2 F
-0.29 ( it means) 474.39 523.36 P
(that the entire remainder of the selection has been returned. If its return value is) 152.1 511.24 T
4 F
(max-) 472.4 511.24 T
-0.48 (Bytes) 152.1 499.12 P
2 F
-0.2 ( it means that there may be additional information in the selection so Tk will call it) 182.08 499.12 P
-0.09 (again to retrieve the next portion. Y) 152.1 487 P
-0.09 (ou can assume that) 293.5 487 P
4 F
-0.22 (maxBytes) 371.41 487 P
2 F
-0.09 ( will always be at least) 419.38 487 P
(a few thousand.) 152.1 474.88 T
(For example, Tk\325) 170.1 462.88 T
(s entry widgets have a widget record of type) 239.22 462.88 T
4 F
(Entry) 418.8 462.88 T
2 F
( with three) 448.79 462.88 T
(\336elds that are used to manage the selection:) 152.1 450.76 T
4 F
(string) 162.9 435.76 T
2 F
( points to a null-terminated string containing the text in the entry;) 198.88 435.76 T
4 F
(selectFirst) 162.9 420.76 T
2 F
( is the index in) 228.86 420.76 T
4 F
(string) 290.22 420.76 T
2 F
( of the \336rst selected byte \050or -1 if nothing is) 326.2 420.76 T
(selected\051;) 162.9 408.64 T
4 F
(selectLast) 162.9 393.64 T
2 F
( is the index of the last selected byte.) 222.87 393.64 T
-0.34 (An entry will supply the selection in only one tar) 152.1 378.64 P
-0.34 (get form \050) 344.56 378.64 P
4 F
-0.82 (STRING) 383.84 378.64 P
2 F
-0.34 (\051 so it only has a single) 419.82 378.64 P
(selection handler) 152.1 366.52 T
(. The create procedure for entries contains a statement like the following) 219.55 366.52 T
(to create the selection handler) 152.1 354.39 T
(, where) 271.05 354.39 T
4 F
(entryPtr) 302.96 354.39 T
2 F
( is a pointer to the widget record for the) 350.93 354.39 T
(new widget:) 152.1 342.27 T
4 9 Q
(Tk_CreateSelHandler\050entryPtr->tkwin, XA_STRING,) 179.1 327.94 T
(EntryFetchSelection, \050ClientData\051 entryPtr,) 224.75 317.82 T
(XA_STRING\051;) 224.75 307.7 T
2 10 Q
(The callback for the selection handler is de\336ned as follows:) 152.1 294.03 T
4 9 Q
(int EntryFetchSelection\050ClientData clientData, int offset,) 179.1 279.7 T
(char *buffer, int maxBytes\051 {) 224.75 269.58 T
(Entry *entryPtr = \050Entry *\051 clientData;) 201.92 259.46 T
(int count;) 201.92 249.33 T
(if \050entryPtr->selectFirst < 0\051 {) 201.92 239.21 T
(return -1;) 224.75 229.09 T
(}) 201.92 218.97 T
(count = entryPtr->selectLast + 1 - entryPtr->selectFirst) 201.92 208.85 T
(- offset;) 224.75 198.73 T
(if \050count > maxBytes\051 {) 201.92 188.61 T
(count = maxBytes;) 224.75 178.48 T
(}) 201.92 168.36 T
(if \050count <= 0\051 {) 201.92 158.24 T
(count = 0;) 224.75 148.12 T
(} else {) 201.92 138 T
FMENDPAGE
%%EndPage: "379" 62
%%Page: "380" 62
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(380) 98.1 668.33 T
3 F
(Managing the Selection) 407.66 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
4 9 Q
0 X
(strncpy\050buffer, entryPtr->string) 224.75 633 T
(+ entryPtr->selectFirst + offset, count\051;) 224.75 623 T
(}) 201.92 613 T
(buffer[count] = 0;) 201.92 603 T
(return count;) 201.92 593 T
(}) 179.1 583 T
2 10 Q
(If a widget wishes to supply the selection in several dif) 170.1 569.33 T
(ferent tar) 389.77 569.33 T
(get forms it should) 425.94 569.33 T
(create a selection handler for each tar) 152.1 557.33 T
(get. When the selection is retrieved, Tk will invoke) 301.22 557.33 T
(the handler for the tar) 152.1 545.33 T
(get speci\336ed by the retriever) 238.51 545.33 T
(.) 351.76 545.33 T
(Tk automatically provides handlers for the following tar) 170.1 533.33 T
(gets:) 394.49 533.33 T
4 F
(APPLICATION) 162.9 518.33 T
2 F
(: returns the name of the application, which can be used to) 228.86 518.33 T
4 F
(send) 464.52 518.33 T
2 F
( com-) 488.51 518.33 T
(mands to the application containing the selection.) 162.9 506.33 T
4 F
(MULTIPLE) 162.9 491.33 T
2 F
(: used to retrieve the selection in multiple tar) 210.87 491.33 T
(get forms simultaneously) 389.46 491.33 T
(.) 489.87 491.33 T
(Refer to ICCCM documenation for details.) 162.9 479.33 T
4 F
(TARGETS) 162.9 464.33 T
2 F
(: returns a list of all the tar) 204.88 464.33 T
(gets supported by the current selection owner) 310.46 464.33 T
(\050including all the tar) 162.9 452.33 T
(gets supported by Tk\051.) 244.05 452.33 T
4 F
(TIMESTAMP) 162.9 437.33 T
2 F
(: returns the time at which the selection was claimed by its current owner) 216.87 437.33 T
(.) 508.61 437.33 T
4 F
(WINDOW_NAME) 162.9 422.33 T
2 F
(: returns the path name of the window that owns the selection.) 228.86 422.33 T
(A widget can override any of these default handlers by creating a handler of its own.) 152.1 407.33 T
98.1 363.98 512.1 367 C
152.1 365.2 512.1 365.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 365.49 143.1 365.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(42.2) 117.96 371 T
(Claiming the selection) 152.1 371 T
2 10 Q
(The previous section showed how a widget can supply the selection to a retriever) 152.1 347.31 T
(. How-) 476.03 347.31 T
-0.09 (ever) 152.1 335.31 P
-0.09 (, before a widget will be asked to supply the selection it must \336rst claim ownership of) 168.9 335.31 P
(the selection. This usually happens during widget commands that select something in the) 152.1 323.31 T
(widget, such as the) 152.1 311.31 T
4 F
(select) 230.66 311.31 T
2 F
( widget command for entries and listboxes. T) 266.64 311.31 T
(o claim owner-) 446.93 311.31 T
(ship of the selection a widget should call) 152.1 299.31 T
4 F
(Tk_OwnSelection) 317.55 299.31 T
2 F
(:) 407.5 299.31 T
4 9 Q
(void Tk_OwnSelection\050Tk_Window tkwin, Tk_LostSelProc *proc,) 179.1 284.98 T
(\050ClientData\051 clientData\051;) 224.75 274.98 T
4 10 Q
(Tk_OwnSelection) 152.1 261.31 T
2 F
( will communicate with the X server to claim the selection for) 242.05 261.31 T
4 F
(tkwin) 152.1 249.31 T
2 F
(; as part of this process the previous owner of the selection will be noti\336ed so that) 182.08 249.31 T
(it can deselect itself.) 152.1 237.31 T
4 F
(Tkwin) 236.2 237.31 T
2 F
( will remain the selection owner until either some other win-) 266.19 237.31 T
-0.01 (dow claims ownership,) 152.1 225.31 P
4 F
-0.02 (tkwin) 247.01 225.31 P
2 F
-0.01 ( is destroyed, or) 276.99 225.31 P
4 F
-0.02 (Tk_ClearSelection) 343.3 225.31 P
2 F
-0.01 ( is called. When) 445.24 225.31 P
4 F
(tkwin) 152.1 213.31 T
2 F
( loses the selection Tk will invoke) 182.08 213.31 T
4 F
(proc) 321.17 213.31 T
2 F
( so that the widget can deselect itself and) 345.15 213.31 T
(display itself accordingly) 152.1 201.31 T
(.) 252.49 201.31 T
4 F
(Proc) 257.49 201.31 T
2 F
( must match the following prototype:) 281.48 201.31 T
4 9 Q
(typedef void Tk_LostSelProc\050ClientData clientData\051;) 179.1 186.98 T
2 10 Q
(The) 152.1 173.31 T
4 F
(clientData) 170.14 173.31 T
2 F
( ar) 230.11 173.31 T
(gument will be the same as the) 240.19 173.31 T
4 F
(clientData) 365.94 173.31 T
2 F
( ar) 425.91 173.31 T
(gument to) 435.99 173.31 T
4 F
(Tk_OwnSelection) 152.1 161.31 T
2 F
(; it is usually a pointer to the widget\325) 242.05 161.31 T
(s record.) 388.64 161.31 T
FMENDPAGE
%%EndPage: "380" 63
%%Page: "381" 63
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
(42.3 Retrieving the selection) 98.1 668.33 T
0 F
(381) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
5 10 Q
0 X
(Note:) 119.09 632.33 T
4 F
(Proc) 152.1 632.33 T
5 F
( will only be called if some other window claims the selection or if) 176.09 632.33 T
4 F
(Tk_ClearSelection) 152.1 622.3 T
5 F
( is invoked. It will not be called if the owning widget is) 254.04 622.3 T
(destr) 152.1 612.27 T
(oyed.) 171.72 612.27 T
2 F
(If a widget claims the selection and then eliminates its selection \050for example, the) 170.1 599.27 T
(selected text is deleted\051 the widget has three options. First, it can continue to service the) 152.1 587.23 T
(selection and return 0 from its selection handlers; anyone who retrieves the selection will) 152.1 575.2 T
(receive an empty string. Second, the widget can continue to service the selection and) 152.1 563.16 T
(return -1 from its selection handlers; this will return an error \050\322no selection\323\051 to anyone) 152.1 551.13 T
(who attempts to retrieve it. Third, the widget can call) 152.1 539.1 T
4 F
(Tk_ClearSelection) 366.95 539.1 T
2 F
(:) 468.9 539.1 T
4 9 Q
(void Tk_ClearSelection\050Tk_Window tkwin\051;) 179.1 524.77 T
2 10 Q
-0.26 (The) 152.1 511.1 P
4 F
-0.62 (tkwin) 169.88 511.1 P
2 F
-0.26 ( ar) 199.86 511.1 P
-0.26 (gument identi\336es a display) 209.69 511.1 P
-0.26 (. Tk will claim the selection away from whatever) 315.7 511.1 P
(window owned it \050either in this application or any other application on) 152.1 499.06 T
4 F
(tkwin) 436.91 499.06 T
2 F
(\325) 466.9 499.06 T
(s display\051) 469.67 499.06 T
(and leave the selection unclaimed, so that all attempts to retrieve it will result in errors.) 152.1 487.03 T
(This approach will have the same ef) 152.1 475 T
(fect returning -1 from the selection handlers except) 296.25 475 T
(that the selection handlers will never be invoked at all.) 152.1 462.96 T
98.1 419.61 512.1 422.63 C
152.1 420.83 512.1 420.83 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 421.12 143.1 421.12 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(42.3) 117.96 426.63 T
(Retrieving the selection) 152.1 426.63 T
2 10 Q
(If an application wishes to retrieve the selection, for example to insert the selected text) 152.1 402.94 T
-0.09 (into an entry) 152.1 390.91 P
-0.09 (, it usually does so with the \322) 201.8 390.91 P
4 F
-0.21 (selection get) 317.23 390.91 P
2 F
-0.09 (\323 T) 394.98 390.91 P
-0.09 (cl command. This section) 407.24 390.91 P
(describes how to retrieve the selection at C level, but this facility is rarely needed. The) 152.1 378.87 T
(only situation where I recommend writing C code to retrieve the selection is in cases) 152.1 366.84 T
-0.16 (where the selection may be very lar) 152.1 354.8 P
-0.16 (ge and a T) 293.09 354.8 P
-0.16 (cl script may be noticeably slow) 333.83 354.8 P
-0.16 (. This might) 461.48 354.8 P
(occur in a text widget, for example, where a user might select a whole \336le in one window) 152.1 342.77 T
(and then copy it into another window) 152.1 330.74 T
(. If the selection has hundreds of thousands of bytes) 300.8 330.74 T
(then a C implementation of the retrieval will be noticeably faster than a T) 152.1 318.7 T
(cl implementa-) 445.36 318.7 T
(tion.) 152.1 306.67 T
(T) 170.1 294.67 T
(o retrieve the selection from C code, invoke the procedure) 175.51 294.67 T
4 F
(Tk_GetSelection) 410.6 294.67 T
2 F
(:) 500.55 294.67 T
4 9 Q
(typedef int Tk_GetSelection\050Tcl_Interp *interp,) 179.1 280.34 T
(Tk_Window tkwin, Atom target, Tk_GetSelProc *proc,) 224.75 270.3 T
(ClientData clientData\051;) 224.75 260.27 T
2 10 Q
-0.26 (The) 152.1 246.6 P
4 F
-0.62 (interp) 169.88 246.6 P
2 F
-0.26 ( ar) 205.86 246.6 P
-0.26 (gument is used for error reporting.) 215.69 246.6 P
4 F
-0.62 (Tkwin) 354.31 246.6 P
2 F
-0.26 ( speci\336es the window on whose) 384.29 246.6 P
(behalf the selection is being retrieved \050it selects a display to use for retrieval\051, and) 152.1 234.57 T
4 F
(tar-) 481.85 234.57 T
(get) 152.1 222.54 T
2 F
( speci\336es the tar) 170.09 222.54 T
(get form for the retrieval.) 234.59 222.54 T
4 F
(Tk_GetSelection) 338.39 222.54 T
2 F
( doesn\325) 428.34 222.54 T
(t return the) 457.3 222.54 T
(selection directly to its caller) 152.1 210.5 T
(. Instead, it invokes) 267.03 210.5 T
4 F
(proc) 347.53 210.5 T
2 F
( and passes it the selection. This) 371.52 210.5 T
(makes retrieval a bit more complicated but it allows Tk to buf) 152.1 198.47 T
(fer data more ef) 399.25 198.47 T
(\336ciently) 462.62 198.47 T
(.) 494.73 198.47 T
(Lar) 152.1 186.43 T
(ge selections will be retrieved in several pieces, with one call to) 165.79 186.43 T
4 F
(proc) 423.1 186.43 T
2 F
( for each piece.) 447.09 186.43 T
4 F
(Tk_GetSelection) 152.1 174.4 T
2 F
( normally returns) 242.05 174.4 T
4 F
(TCL_OK) 313.39 174.4 T
2 F
( to indicate that the selection was suc-) 349.37 174.4 T
-0.17 (cessfully retrieved. If an error occurs then it returns) 152.1 162.37 P
4 F
-0.4 (TCL_ERROR) 358.77 162.37 P
2 F
-0.17 ( and leaves an error mes-) 412.74 162.37 P
(sage in) 152.1 150.33 T
4 F
(interp->result) 182.63 150.33 T
2 F
(.) 266.59 150.33 T
4 F
(Proc) 170.1 138.33 T
2 F
( must match the following prototype:) 194.09 138.33 T
FMENDPAGE
%%EndPage: "381" 64
%%Page: "382" 64
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(382) 98.1 668.33 T
3 F
(Managing the Selection) 407.66 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
4 9 Q
0 X
(typedef int Tk_GetSelProc\050ClientData clientData,) 179.1 633 T
(Tcl_Interp *interp, char *portion\051;) 224.75 623 T
2 10 Q
(The) 152.1 609.33 T
4 F
(clientData) 170.14 609.33 T
2 F
( and) 230.11 609.33 T
4 F
(interp) 249.54 609.33 T
2 F
( ar) 285.52 609.33 T
(guments will be the same as the corresponding ar) 295.6 609.33 T
(gu-) 492.5 609.33 T
(ments to) 152.1 597.33 T
4 F
(Tk_GetSelection) 188.75 597.33 T
2 F
(.) 278.7 597.33 T
4 F
(Portion) 283.7 597.33 T
2 F
( points to a null-terminated ASCII string con-) 325.67 597.33 T
-0.07 (taining part or all of the selection. For small selections a single call will be made to) 152.1 585.33 P
4 F
-0.17 (proc) 485.68 585.33 P
2 F
(with the entire contents of the selection. For lar) 152.1 573.33 T
(ge selections two or more calls will be) 340.96 573.33 T
-0.07 (made with successive portions of the selection.) 152.1 561.33 P
4 F
-0.16 (Proc) 342.06 561.33 P
2 F
-0.07 ( should return) 366.04 561.33 P
4 F
-0.16 (TCL_OK) 423.86 561.33 P
2 F
-0.07 ( if it success-) 459.84 561.33 P
(fully processes the current portion of the selection. If it encounters an error then it should) 152.1 549.33 T
(return) 152.1 537.33 T
4 F
(TCL_ERROR) 178.46 537.33 T
2 F
( and leave an error message in) 232.44 537.33 T
4 F
(interp->result) 355.94 537.33 T
2 F
(; the selection) 439.89 537.33 T
(retrieval will be aborted and this same error will be returned to) 152.1 525.33 T
4 F
(Tk_GetSelection) 405.24 525.33 T
2 F
(\325) 495.19 525.33 T
(s) 497.97 525.33 T
(caller) 152.1 513.33 T
(.) 173.75 513.33 T
(For example, here is code that retrieves the selection in tar) 170.1 501.33 T
(get form) 403.35 501.33 T
4 F
(STRING) 439.99 501.33 T
2 F
( and) 475.97 501.33 T
(prints it on standard output:) 152.1 489.33 T
4 9 Q
(...) 201.92 475 T
(if \050Tk_GetSelection\050interp, tkwin,) 201.92 465 T
(Tk_InternAtom\050tkwin, "STRING"\051, PrintSel,) 247.57 455 T
(\050ClientData\051 stdout\051 != TCL_OK\051 {) 247.57 445 T
(...) 224.75 435 T
(}) 201.92 425 T
(...) 201.92 415 T
(int PrintSel\050ClientData clientData, Tcl_Interp *interp,) 179.1 405 T
(char *portion\051 {) 224.75 395 T
(FILE *f = \050FILE *\051 clientData;) 201.92 385 T
(fputs\050portion, f\051;) 201.92 375 T
(return TCL_OK;) 201.92 365 T
(}) 179.1 355 T
2 10 Q
(The call to) 152.1 341.33 T
4 F
(Tk_GetSelection) 197.35 341.33 T
2 F
( could be made, for example, in the widget command) 287.3 341.33 T
(procedure for a widget, where) 152.1 329.33 T
4 F
(tkwin) 274.76 329.33 T
2 F
( is the) 304.75 329.33 T
4 F
(Tk_Window) 331.12 329.33 T
2 F
( for the widget and) 385.09 329.33 T
4 F
(interp) 463.09 329.33 T
2 F
( is) 499.07 329.33 T
-0.17 (the interpreter in which the widget command is being processed. The) 152.1 317.33 P
4 F
-0.41 (clientData) 428.9 317.33 P
2 F
-0.17 ( ar) 488.86 317.33 P
-0.17 (gu-) 498.78 317.33 P
(ment is used to pass a) 152.1 305.33 T
4 F
(FILE) 241.49 305.33 T
2 F
( pointer to) 265.48 305.33 T
4 F
(PrintSel) 309.06 305.33 T
2 F
(. The output could be written to a dif-) 357.04 305.33 T
(ferent \336le by specifying a dif) 152.1 293.33 T
(ferent) 267.67 293.33 T
4 F
(clientData) 293.47 293.33 T
2 F
( value.) 353.44 293.33 T
FMENDPAGE
%%EndPage: "382" 65
%%Page: "383" 65
612 792 0 FMBEGINPAGE
98.1 675 512.1 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
98.1 450 512.1 450 2 L
7 X
V
2 Z
0 X
N
98.1 108 512.1 126 R
7 X
V
0 10 Q
0 X
(383) 495.43 119.33 T
98.1 54 512.1 108 R
7 X
V
2 9 Q
0 X
(Copyright \251 1993 Addison-W) 152.1 102 T
(esley Publishing Company) 261.32 102 T
(, Inc.) 357.1 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 152.1 91 T
(. Any) 485.77 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 152.1 80 T
-0.34 (lisher) 152.1 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 171.58 69 P
(does not of) 152.1 58 T
(fer warranties in regard to this draft.) 191.88 58 T
1 24 Q
(Chapter 43) 152.1 605 T
-0.48 (Geometry Management) 152.1 575 S
98.1 135 512.1 423 R
7 X
V
2 10 Q
0 X
(Tk provides two groups of library procedures for geometry management. The \336rst group) 152.1 416.33 T
(of procedures implements a communication protocol between slave windows and their) 152.1 404.33 T
(geometry managers. Each widget calls Tk to provide geometry information such as the) 152.1 392.33 T
(widget\325) 152.1 380.33 T
(s preferred size and whether or not it has an internal grid. Tk then noti\336es the rele-) 182.08 380.33 T
(vant geometry manager) 152.1 368.33 T
(, so that the widget does not have to know which geometry man-) 246.07 368.33 T
-0.24 (ager is responsible for it. Each geometry manager calls Tk to identify the slave windows it) 152.1 356.33 P
(will manage, so that Tk will know who to notify when geometry information changes for) 152.1 344.33 T
(the slaves. The second group of procedures is used by geometry managers to place slave) 152.1 332.33 T
(windows. It includes facilities for mapping and unmapping windows and for setting their) 152.1 320.33 T
(sizes and locations. All of these procedures are summarized in T) 152.1 308.33 T
(able 43.1.) 409.26 308.33 T
98.1 264.98 512.1 268 C
152.1 266.2 512.1 266.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 266.49 143.1 266.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(43.1) 117.96 272 T
(Requesting a size for a widget) 152.1 272 T
2 10 Q
-0.19 (Each widget is responsible for informing Tk of its geometry needs; Tk will make sure that) 152.1 248.31 P
(this information is forwarded to any relevant geometry managers. There are three pieces) 152.1 236.31 T
(of information that the slave can provide: requested size, internal border) 152.1 224.31 T
(, and grid. The) 440.09 224.31 T
(\336rst piece of information is provided by calling) 152.1 212.31 T
4 F
(Tk_GeometryRequest) 343.64 212.31 T
2 F
(:) 451.58 212.31 T
4 9 Q
(void Tk_GeometryRequest\050Tk_Window tkwin, int width, height\051;) 179.1 197.98 T
2 10 Q
(This indicates that the ideal dimensions for) 152.1 184.31 T
4 F
(tkwin) 326.71 184.31 T
2 F
( are) 356.7 184.31 T
4 F
(width) 373.9 184.31 T
2 F
( and) 403.88 184.31 T
4 F
(height) 423.31 184.31 T
2 F
(, both speci-) 459.29 184.31 T
(\336ed in pixels. Each widget should call) 152.1 172.31 T
4 F
(Tk_GeometryRequest) 307.01 172.31 T
2 F
( once when it is created) 414.95 172.31 T
(and again whenever its preferred size changes \050such as when its font changes\051; normally) 152.1 160.31 T
(the calls to) 152.1 148.31 T
4 F
(Tk_GeometryRequest) 197.9 148.31 T
2 F
( are made by the widget\325) 305.85 148.31 T
(s con\336gure procedure. In) 404.38 148.31 T
44.1 351 98.1 423 C
35.1 360 197.1 414 R
7 X
0 K
V
1 9 Q
0 X
(FIGURE  43) 35.1 408 T
(T) 35.1 387 T
(ABLE  43) 40.43 387 T
26.1 351 125.1 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "383" 66
%%Page: "384" 66
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(384) 98.1 668.33 T
3 F
(Geometry Management) 407.12 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 135 512.1 639 C
98.1 138.6 512.1 639 C
98.1 178 512.1 192.4 C
98.1 178 512.1 192.4 R
7 X
0 K
V
152.1 185.92 512.1 185.92 2 L
V
0.5 H
2 Z
0 X
N
98.1 138.6 512.1 639 C
98.1 154.6 512.1 169 C
98.1 154.6 512.1 169 R
7 X
0 K
V
152.1 162.52 512.1 162.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 138.6 512.1 639 C
1 9 Q
0 X
0 K
(T) 152.1 172 T
(able  43.1.) 157.27 172 T
2 F
(A summary of Tk\325) 200.21 172 T
(s procedures for geometry management.) 266.86 172 T
4 F
(Tk_GeometryRequest\050Tk_Window tkwin, int width, int height\051) 158.1 625.4 T
2 F
(Informs the geometry manager for tkwin that the preferred dimensions for) 230.1 616.4 T
4 F
(tkwin) 230.1 607.4 T
2 F
( are) 257.06 607.4 T
4 F
(width) 272.53 607.4 T
2 F
( and) 299.49 607.4 T
4 F
(height) 316.96 607.4 T
2 F
(.) 349.32 607.4 T
4 F
(Tk_SetInternalBorder\050Tk_Window tkwin, int width\051) 158.1 598.4 T
2 F
(Informs any relevant geometry managers that) 230.1 589.4 T
4 F
(tkwin) 395.83 589.4 T
2 F
( has an internal border) 422.79 589.4 T
4 F
(width) 230.1 580.4 T
2 F
( pixels wide and that slave windows should not be placed in this bor-) 257.06 580.4 T
(der region.) 230.1 571.4 T
4 F
(Tk_SetGrid\050Tk_Window tkwin, int reqWidth, int reqHeight,) 158.1 562.4 T
(int widthInc, int heightInc\051) 176.07 553.4 T
2 F
-0.08 (T) 230.1 544.4 P
-0.08 (urns on gridded geometry management for) 235.28 544.4 P
4 F
-0.18 (tkwin) 390.57 544.4 P
2 F
-0.08 (\325) 417.54 544.4 P
-0.08 (s top-level window and) 420.03 544.4 P
(speci\336es the grid geometry) 230.1 535.4 T
(. The dimensions requested by) 326.61 535.4 T
4 F
(Tk_Geome-) 438.45 535.4 T
(tryRequest) 230.1 526.4 T
2 F
( correspond to grid dimensions of) 284.02 526.4 T
4 F
(reqWidth) 407.34 526.4 T
2 F
( and) 450.48 526.4 T
4 F
-1.02 (reqHeight) 230.1 517.4 P
2 F
-0.42 (, and) 278.63 517.4 P
4 F
-1.02 (widthInc) 297.5 517.4 P
2 F
-0.42 ( and) 340.64 517.4 P
4 F
-1.02 (heightInc) 357.27 517.4 P
2 F
-0.42 ( specify the dimensions of a) 405.8 517.4 P
(single grid cell.) 230.1 508.4 T
4 F
(Tk_ManageGeometry\050Tk_Window tkwin, Tk_GeometryProc *proc,) 158.1 489.4 T
(ClientData clientData\051) 176.07 480.4 T
2 F
(Arranges for) 230.1 471.4 T
4 F
(proc) 278.01 471.4 T
2 F
( to be invoked whenever) 299.58 471.4 T
4 F
(Tk_GeometryRequest) 390.18 471.4 T
2 F
( is) 487.25 471.4 T
(invoked for) 230.1 462.4 T
4 F
(tkwin) 274.03 462.4 T
2 F
(. Used by geometry managers to claim ownership of a) 300.99 462.4 T
(slave window) 230.1 453.4 T
(.) 279.19 453.4 T
4 F
(int Tk_ReqHeight\050Tk_Window tkwin\051) 158.1 434.4 T
2 F
(Returns the height speci\336ed in the most recent call to) 230.1 425.4 T
4 F
(Tk_GeometryRe-) 423.31 425.4 T
(quest) 230.1 416.4 T
2 F
( for) 257.06 416.4 T
4 F
(tkwin) 272.04 416.4 T
2 F
( \050this is a macro, not a procedure\051.) 299 416.4 T
4 F
(int Tk_ReqWidth\050Tk_Window tkwin\051) 158.1 407.4 T
2 F
(Returns the width speci\336ed in the most recent call to) 230.1 398.4 T
4 F
(Tk_GeometryRe-) 421.32 398.4 T
(quest) 230.1 389.4 T
2 F
( for) 257.06 389.4 T
4 F
(tkwin) 272.04 389.4 T
2 F
( \050this is a macro, not a procedure\051.) 299 389.4 T
4 F
(int Tk_InternalBorderWidth\050Tk_Window tkwin\051) 158.1 380.4 T
2 F
(Returns the border width speci\336ed in the most recent call to) 230.1 371.4 T
4 F
(Tk_Inter-) 447.02 371.4 T
(nalBorderWidth) 230.1 362.4 T
2 F
( for) 305.59 362.4 T
4 F
(tkwin) 320.57 362.4 T
2 F
( \050this is a macro, not a procedure\051.) 347.53 362.4 T
4 F
(Tk_MapWindow\050Tk_Window tkwin\051) 158.1 343.4 T
2 F
-0.33 (Arranges for) 230.1 334.4 P
4 F
-0.79 (tkwin) 277.35 334.4 P
2 F
-0.33 ( to be displayed on the screen whenever its ancestors are) 304.32 334.4 P
(mapped.) 230.1 325.4 T
4 F
(Tk_UnmapWindow\050Tk_Window tkwin\051) 158.1 316.4 T
2 F
(Prevents) 230.1 307.4 T
4 F
(tkwin) 263.3 307.4 T
2 F
( and its descendants from appearing on the screen.) 290.26 307.4 T
4 F
(Tk_MoveWindow\050Tk_Window tkwin, int x, int y\051) 158.1 288.4 T
2 F
(Positions) 230.1 279.4 T
4 F
(tkwin) 265.31 279.4 T
2 F
( so that its upper) 292.27 279.4 T
(-left pixel \050including any borders\051 appears) 351.51 279.4 T
(at coordinates) 230.1 270.4 T
4 F
(x) 282.51 270.4 T
2 F
( and) 287.91 270.4 T
4 F
(y) 305.38 270.4 T
2 F
( in its parent.) 310.77 270.4 T
4 F
(Tk_MoveResizeWindow\050Tk_Window tkwin, int x, int y,) 158.1 261.4 T
(unsigned int width, unsigned int height\051) 176.07 252.4 T
2 F
(Changes) 230.1 243.4 T
4 F
(tkwin) 263.3 243.4 T
2 F
(\325) 290.26 243.4 T
(s position within its parent and also its size.) 292.76 243.4 T
4 F
(Tk_ResizeWindow\050Tk_Window tkwin, unsigned int width,) 158.1 234.4 T
(unsigned int height\051) 176.07 225.4 T
2 F
(Sets the inside dimensions of) 230.1 216.4 T
4 F
(tkwin) 337.2 216.4 T
2 F
( \050not including its external border) 364.17 216.4 T
(, if) 484.37 216.4 T
(any\051 to) 230.1 207.4 T
4 F
(width) 257.56 207.4 T
2 F
( and) 284.52 207.4 T
4 F
(height) 301.99 207.4 T
2 F
(.) 334.34 207.4 T
152.1 637.15 152.1 200.65 2 L
V
0.5 H
0 Z
N
512.1 637.15 512.1 200.65 2 L
V
N
151.85 637.4 512.35 637.4 2 L
V
N
151.85 501.4 512.35 501.4 2 L
V
0.25 H
N
151.85 446.4 512.35 446.4 2 L
V
N
151.85 355.4 512.35 355.4 2 L
V
N
151.85 300.4 512.35 300.4 2 L
V
N
151.85 200.4 512.35 200.4 2 L
V
0.5 H
N
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "384" 67
%%Page: "385" 67
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
(43.2 Internal borders) 98.1 668.33 T
0 F
(385) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(addition, geometry managers will sometimes call) 152.1 409.13 T
4 F
(Tk_GeometryRequest) 351.14 409.13 T
2 F
( on a win-) 459.08 409.13 T
(dow\325) 152.1 396.71 T
(s behalf. For example, the packer resets the requested size for each master window) 172.09 396.71 T
-0.16 (that it manages to match the needs of all of its slaves. This overrides the requested size set) 152.1 384.29 P
(by the widget and results in the shrink-wrap ef) 152.1 371.86 T
(fects shown in Chapter XXX.) 337.9 371.86 T
98.1 328.51 512.1 331.53 C
152.1 329.73 512.1 329.73 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 330.02 143.1 330.02 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(43.2) 117.96 335.53 T
(Internal borders) 152.1 335.53 T
2 10 Q
(The X window system allows each window to have a border that appears just outside the) 152.1 311.84 T
(window) 152.1 299.42 T
(. The of) 183.65 299.42 T
(\336cial height and width of a window are the inside dimensions, which) 214.84 299.42 T
(describe the usable area of the window and don\325) 152.1 286.99 T
(t include the border) 345.09 286.99 T
(. Unfortunately) 422.54 286.99 T
(,) 482.96 286.99 T
(though, X requires the entire border of a window to be drawn with a single solid color or) 152.1 274.57 T
-0.04 (stipple. T) 152.1 262.15 P
-0.04 (o achieve the Motif three-dimensional ef) 189.12 262.15 P
-0.04 (fects, the upper and left parts of the bor-) 351.69 262.15 P
-0.07 (der have to be drawn dif) 152.1 249.72 P
-0.07 (ferently than the lower and right parts. This means that X borders) 248.98 249.72 P
(can\325) 152.1 237.3 T
(t be used for Motif widgets. Instead, Motif widgets draw their own borders, typically) 169.12 237.3 T
-0.04 (using Tk procedures such as) 152.1 224.88 P
4 F
-0.1 (Tk_Draw3DRectangle) 267.64 224.88 P
2 F
-0.04 (. The border for a Motif widget is) 375.58 224.88 P
-0.14 (drawn around the perimeter of the widget but inside the of) 152.1 212.45 P
-0.14 (\336cial X area of the widget. This) 383.71 212.45 P
(kind of border is called an) 152.1 200.03 T
5 F
(internal bor) 259.24 200.03 T
(der) 306.9 200.03 T
2 F
(. Figure 43.1 shows the dif) 319.68 200.03 T
(ference between) 426.38 200.03 T
(external and internal borders.) 152.1 187.6 T
-0.31 (If a widget has an internal border then its usable area \050the part that\325) 170.1 175.6 P
-0.31 (s inside the border\051) 433.94 175.6 P
(is smaller than its of) 152.1 163.18 T
(\336cial X area. This complicates geometry management in two ways.) 232.99 163.18 T
-0.05 (First, each widget has to include the border width \050actually) 152.1 150.76 P
-0.05 (, twice the border width\051 in the) 386.41 150.76 P
(width and height that it requests via) 152.1 138.33 T
4 F
(Tk_GeometryRequest) 297.29 138.33 T
2 F
(. Second, if a master win-) 405.23 138.33 T
98.1 135 512.1 639 C
98.1 415.8 512.1 639 C
350.1 549 436.5 621 R
4 X
0 K
V
0.5 H
0 Z
0 X
N
357.3 556.2 429.3 613.8 R
7 X
V
202.5 541.8 303.3 628.2 R
4 X
V
209.7 549 296.1 621 R
7 X
V
0 X
N
4 10 Q
(width) 237.91 603.38 T
(height) 260.11 581.88 T
288.41 608.8 296.1 606.6 288.41 604.4 289.21 606.6 4 Y
V
270.9 606.6 289.21 606.6 2 L
7 X
V
2 Z
0 X
N
217.39 604.4 209.7 606.6 217.39 608.8 216.59 606.6 4 Y
V
216.59 606.6 234.9 606.6 2 L
7 X
V
0 X
N
280.3 556.69 278.1 549 275.89 556.69 278.1 555.89 4 Y
V
278.1 577.8 278.1 555.89 2 L
7 X
V
0 X
N
275.89 613.31 278.1 621 280.3 613.31 278.1 614.11 4 Y
V
278.1 614.11 278.1 592.2 2 L
7 X
V
0 X
N
2 F
(X border) 206.29 516.98 T
221.9 537.71 224.1 545.4 226.3 537.71 224.1 538.51 4 Y
V
224.1 527.4 224.1 538.51 2 L
7 X
V
0 X
N
4 F
(width) 378.31 624.98 T
428.81 630.41 436.5 628.2 428.81 625.99 429.61 628.2 4 Y
V
411.3 628.2 429.61 628.2 2 L
7 X
V
0 X
N
357.79 625.99 350.1 628.2 357.79 630.41 356.99 628.2 4 Y
V
356.99 628.2 375.3 628.2 2 L
7 X
V
0 X
N
(height) 440.31 581.88 T
460.51 556.69 458.3 549 456.1 556.69 458.3 555.89 4 Y
V
458.3 577.8 458.3 555.89 2 L
7 X
V
0 X
N
456.1 613.31 458.3 621 460.51 613.31 458.3 614.11 4 Y
V
458.3 614.11 458.3 592.2 2 L
7 X
V
0 X
N
368.45 544.91 370.66 552.6 372.86 544.91 370.66 545.71 4 Y
V
370.66 534.6 370.66 545.71 2 L
7 X
V
0 X
N
2 F
(Internal border) 340.83 524.18 T
(\050a\051) 247.35 502.58 T
(\050b\051) 387.47 502.58 T
98.1 477 512.1 491.4 C
98.1 477 512.1 491.4 R
7 X
0 K
V
152.1 484.92 512.1 484.92 2 L
V
0.5 H
2 Z
0 X
N
98.1 415.8 512.1 639 C
1 9 Q
0 X
0 K
(Figur) 152.1 471 T
(e  43.1.) 173.41 471 T
2 F
(X borders and internal borders. \050a\051 shows an of) 204.36 471 T
(\336cial X border) 373.67 471 T
(, which is drawn by X) 425.72 471 T
(outside the area of the window) 152.1 462 T
(. \050b\051 shows an internal border drawn by a widget, where the area) 262.09 462 T
(occupied by the border is part of the window\325) 152.1 453 T
(s of) 315.84 453 T
(\336cial area. In both \336gures) 328.91 453 T
4 10 Q
(width) 423.26 453 T
2 9 Q
( and) 453.24 453 T
4 10 Q
(height) 470.71 453 T
98.1 426.6 512.1 441 C
98.1 426.6 512.1 441 R
7 X
0 K
V
152.1 434.52 512.1 434.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 415.8 512.1 639 C
2 9 Q
0 X
0 K
(are the of) 152.1 444 T
(\336cial X dimensions of the window) 185.88 444 T
(.) 309.36 444 T
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "385" 68
%%Page: "386" 68
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(386) 98.1 668.33 T
3 F
(Geometry Management) 407.12 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(dow has an internal border then geometry managers should not place slave windows on) 152.1 632.33 T
-0.15 (top of the border; the usable area for arranging slaves should be the area inside the border) 152.1 620.33 P
-0.15 (.) 507.25 620.33 P
(In order for this to happen the geometry managers must know about the presence of the) 152.1 608.33 T
(internal border) 152.1 596.33 T
(. The procedure) 210.67 596.33 T
4 F
(Tk_SetInternalBorder) 276.16 596.33 T
2 F
( is provided for this purpose:) 396.1 596.33 T
4 9 Q
(void Tk_SetInternalBorder\050Tk_Window tkwin, int width\051;) 179.1 582 T
2 10 Q
(This tells geometry managers that) 152.1 568.33 T
4 F
(tkwin) 290.06 568.33 T
2 F
( has an internal border that is) 320.05 568.33 T
4 F
(width) 438.57 568.33 T
2 F
( pixels) 468.56 568.33 T
(wide and that slave widgets should not overlap the internal border) 152.1 556.33 T
(. W) 415.26 556.33 T
(idgets with internal) 429.29 556.33 T
(borders normally call) 152.1 544.33 T
4 F
(Tk_SetInternalBorder) 240.09 544.33 T
2 F
( in their con\336gure procedures at the) 360.03 544.33 T
-0.32 (same time that they call) 152.1 532.33 P
4 F
-0.78 (Tk_GeometryRequest) 247.92 532.33 P
2 F
-0.32 (. If a widget uses a normal X border) 355.86 532.33 P
-0.32 (, or) 496.92 532.33 P
(if it has an internal border but doesn\325) 152.1 520.33 T
(t mind slaves being placed on top of the border) 299.87 520.33 T
(, then) 487.39 520.33 T
(it need not call) 152.1 508.33 T
4 F
(Tk_SetInternalBorder) 213.73 508.33 T
2 F
(, or it can call it with a) 333.26 508.33 T
4 F
(width) 425.7 508.33 T
2 F
( of 0.) 455.68 508.33 T
98.1 464.98 512.1 468 C
152.1 466.2 512.1 466.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 466.49 143.1 466.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(43.3) 117.96 472 T
(Grids) 152.1 472 T
2 10 Q
(Gridded geometry management was introduced in Section XXX. The goal is to allow the) 152.1 448.31 T
(user to resize a top-level window interactively) 152.1 436.31 T
(, but to constrain the resizing so that the) 336.31 436.31 T
(window\325) 152.1 424.31 T
(s dimensions always lie on a grid. T) 187.08 424.31 T
(ypically this means that a particular subwin-) 330.18 424.31 T
-0.19 (dow displaying \336xed-width text always has a width and height that are an integral number) 152.1 412.31 P
(of characters. The window manager implements constrained resizes, but the application) 152.1 400.31 T
(must supply it with the geometry of the grid. In order for this to happen, the widget that) 152.1 388.31 T
(determines the grid geometry must call) 152.1 376.31 T
4 F
(Tk_SetGrid) 310.88 376.31 T
2 F
(:) 370.85 376.31 T
4 9 Q
(void Tk_SetGrid\050Tk_Window tkwin, int gridWidth, int) 179.1 361.98 T
(gridHeight,) 179.1 351.98 T
(int widthInc, int heightInc\051;) 224.75 341.98 T
2 10 Q
(The) 152.1 328.31 T
4 F
(gridWidth) 170.14 328.31 T
2 F
( and) 224.11 328.31 T
4 F
(gridHeight) 243.54 328.31 T
2 F
( ar) 303.51 328.31 T
(guments specify the number of grid units corre-) 313.59 328.31 T
-0.04 (sponding to the pixel dimensions requested in the most recent call to) 152.1 316.31 P
4 F
-0.09 (Tk_GeometryRe-) 428.15 316.31 P
(quest) 152.1 304.31 T
2 F
(. They allow the window manager to display the window\325) 182.08 304.31 T
(s current size in grid) 412.49 304.31 T
-0.11 (units rather than pixels. The) 152.1 292.31 P
4 F
-0.26 (widthInc) 265.92 292.31 P
2 F
-0.11 ( and) 313.9 292.31 P
4 F
-0.26 (heightInc) 333.11 292.31 P
2 F
-0.11 ( ar) 387.08 292.31 P
-0.11 (guments specify the number) 397.06 292.31 P
-0.07 (of pixels in a grid unit. Tk passes all of this information on to the window manager) 152.1 280.31 P
-0.07 (, and it) 482.33 280.31 P
(will then constrain interactive resizes so that) 152.1 268.31 T
4 F
(tkwin) 332.25 268.31 T
2 F
(\325) 362.23 268.31 T
(s top-level window always has) 365.01 268.31 T
-0.09 (dimensions that lie on a grid de\336ned by its requested geometry) 152.1 256.31 P
-0.09 (,) 401.49 256.31 P
4 F
-0.22 (gridWidth) 406.4 256.31 P
2 F
-0.09 (, and) 460.37 256.31 P
4 F
-0.22 (grid-) 482.12 256.31 P
(Height) 152.1 244.31 T
2 F
(.) 188.08 244.31 T
(W) 170.1 232.31 T
(idgets that support gridding, such as texts, normally have a) 179.13 232.31 T
4 F
(-setgrid) 416.76 232.31 T
2 F
( option . If) 464.74 232.31 T
4 F
(-) 152.1 220.31 T
(setgrid) 158.1 220.31 T
2 F
( is 0 then the widget doesn\325) 200.07 220.31 T
(t call) 309.82 220.31 T
4 F
(Tk_SetGrid) 332.03 220.31 T
2 F
(; this is done if gridded resiz-) 392 220.31 T
-0.09 (ing isn\325) 152.1 208.31 P
-0.09 (t wanted \050e.g. the widget uses a variable-width font\051 or if some other widget in the) 182.1 208.31 P
(top-level window is to be the one that determines the grid. If) 152.1 196.31 T
4 F
(-setgrid) 396.66 196.31 T
2 F
( is 1 then the) 444.63 196.31 T
-0.05 (widget calls) 152.1 184.31 P
4 F
-0.11 (Tk_SetGrid) 202.53 184.31 P
2 F
-0.05 (; typically this happens in the con\336gure procedure at the same) 262.5 184.31 P
-0.36 (time that other geometry-related calls are made. If the widget\325) 152.1 172.31 P
-0.36 (s grid geometry changes \050for) 396.48 172.31 P
(example, its font might change\051 then the widget calls) 152.1 160.31 T
4 F
(Tk_SetGrid) 366.4 160.31 T
2 F
( again.) 426.37 160.31 T
FMENDPAGE
%%EndPage: "386" 69
%%Page: "387" 69
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
(43.4 Geometry managers) 98.1 668.33 T
0 F
(387) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 623.98 512.1 627 C
152.1 625.2 512.1 625.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 625.49 143.1 625.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(43.4) 117.96 631 T
(Geometry managers) 152.1 631 T
2 10 Q
(The remainder of this chapter describes the Tk library procedures that are used by geome-) 152.1 607.31 T
(try managers. It is intended to provide the basic information that you need to write a new) 152.1 595.28 T
-0.02 (geometry manager) 152.1 583.25 P
-0.02 (. This section provides an overview of the structure of a geometry man-) 226.19 583.25 P
(ager and the following sections describe the Tk library procedures.) 152.1 571.22 T
(A typical geometry manager contains four main procedures. The \336rst procedure is a) 170.1 559.22 T
(command procedure that implements the geometry manager) 152.1 547.2 T
(\325) 392.85 547.2 T
(s T) 395.63 547.2 T
(cl command. T) 407.42 547.2 T
(ypically) 466.96 547.2 T
(each geometry manager provides a single command that is used by the application) 152.1 535.17 T
(designer to provide information to the geometry manager:) 152.1 523.14 T
4 F
(pack) 386.38 523.14 T
2 F
( for the packer) 410.37 523.14 T
(,) 467.97 523.14 T
4 F
(place) 472.96 523.14 T
2 F
(for the placer) 152.1 511.11 T
(, and so on. The command procedure collects information about each slave) 204.98 511.11 T
(and master window managed by the geometry manager and allocates a C structure for) 152.1 499.08 T
(each window to hold the information. For example, the packer uses a structure with two) 152.1 487.05 T
-0.08 (parts. The \336rst part is used if the window is a master; it includes information such as a list) 152.1 475.02 P
-0.19 (of slaves for that master) 152.1 462.99 P
-0.19 (. The second part is used if the window is a slave; it includes infor-) 246.84 462.99 P
(mation such as the side against which the slave is to be packed and padding and \336lling) 152.1 450.96 T
-0.2 (information. If a window is both a master and a slave then both parts are used. Each geom-) 152.1 438.94 P
(etry manager maintains a hash table \050using T) 152.1 426.91 T
(cl\325) 330.99 426.91 T
(s hash table facilities\051 that maps from wid-) 340.99 426.91 T
(get names to the C structure for geometry management.) 152.1 414.88 T
-0.28 (The second procedure for a geometry manager is its) 170.1 402.88 P
5 F
-0.28 (layout pr) 377.68 402.88 P
-0.28 (ocedur) 413.4 402.88 P
-0.28 (e) 440.78 402.88 P
2 F
-0.28 (. This procedure) 445.22 402.88 P
(contains all of the actual geometry calculations. It uses the information in the structures) 152.1 390.85 T
(created by the command procedure, plus geometry information provided by all of the) 152.1 378.82 T
-0.09 (slaves, plus information about the current dimensions of the master) 152.1 366.79 P
-0.09 (. The layout procedure) 419.47 366.79 P
-0.09 (typically has two phases. In the \336rst phase it scans all of the slaves for a master) 152.1 354.76 P
-0.09 (, computes) 466.47 354.76 P
(the ideal size for the master based on the needs of its slaves, and calls) 152.1 342.73 T
4 F
(Tk_Geome-) 432.45 342.73 T
(tryRequest) 152.1 330.71 T
2 F
( to set the requested size of the master to the ideal size. This phase only) 212.07 330.71 T
(exists for geometry managers like the packer that re\337ect geometry information upwards) 152.1 318.68 T
(through the widget hierarchy) 152.1 306.65 T
(. For geometry managers like the placer) 267.2 306.65 T
(, the \336rst phase is) 425.84 306.65 T
-0.24 (skipped. In the second phase the layout procedure recomputes the geometries for all of the) 152.1 294.62 P
(slaves of the master) 152.1 282.59 T
(.) 230.66 282.59 T
(The third procedure is a) 170.1 270.59 T
5 F
(r) 268.08 270.59 T
(equest callback) 271.59 270.59 T
2 F
( that Tk invokes whenever a slave managed) 333.49 270.59 T
(by the geometry manager calls) 152.1 258.56 T
4 F
(Tk_GeometryRequest) 277.28 258.56 T
2 F
(. The callback arranges for the) 385.22 258.56 T
(layout procedure to be executed, as will be described below) 152.1 246.53 T
(.) 390.15 246.53 T
(The \336nal procedure is an event procedure that is invoked when a master window is) 170.1 234.53 T
-0.18 (resized or when a master or slave window is destroyed. If a master window is resized then) 152.1 222.51 P
(the event procedure arranges for the layout procedure to be executed to recompute the) 152.1 210.48 T
-0.08 (geometries of all of its slaves. If a master or slave window is destroyed then the event pro-) 152.1 198.45 P
(cedure deletes all the information maintained by the geometry manager for that window) 152.1 186.42 T
(.) 502.86 186.42 T
(The command procedure creates event handlers that cause the event procedure to be) 152.1 174.39 T
(invoked.) 152.1 162.36 T
(The layout procedure must be invoked after each call to the command procedure, the) 170.1 150.36 T
-0.17 (request callback, or the event procedure. Usually this is done with an idle callback, so that) 152.1 138.33 P
FMENDPAGE
%%EndPage: "387" 70
%%Page: "388" 70
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(388) 98.1 668.33 T
3 F
(Geometry Management) 407.12 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(the layout procedure doesn\325) 152.1 632.33 T
(t actually execute until all pending work is completed. Using) 263.22 632.33 T
-0.29 (an idle callback can save a lot of time in situations such as the initial creation of a complex) 152.1 619.9 P
(panel. In this case the command procedure will be invoked once for each of many slave) 152.1 607.46 T
(windows, but there won\325) 152.1 595.02 T
(t be enough information to compute the \336nal layout until all of) 251.29 595.02 T
-0.14 (the invocations have been made for all of the slaves. If the layout procedure were invoked) 152.1 582.58 P
(immediately it would just waste time computing layouts that will be discarded almost) 152.1 570.14 T
-0.08 (immediately) 152.1 557.71 P
-0.08 (. W) 201.42 557.71 P
-0.08 (ith the idle callback, layout is deferred until complete information is avail-) 215.38 557.71 P
(able for all of the slaves.) 152.1 545.27 T
98.1 501.91 512.1 504.93 C
152.1 503.13 512.1 503.13 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 503.42 143.1 503.42 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(43.5) 117.96 508.93 T
(Claiming ownership) 152.1 508.93 T
2 10 Q
(A geometry manager uses the procedure) 152.1 485.24 T
4 F
(Tk_ManageGeometry) 315.85 485.24 T
2 F
( to indicate that it) 417.79 485.24 T
(wishes to manage the geometry for a given slave window:) 152.1 472.8 T
4 9 Q
-0.33 (void Tk_ManageGeometry\050Tk_Window tkwin, Tk_GeometryProc *proc,) 179.1 458.47 P
(ClientData clientData\051;) 224.75 448.03 T
2 10 Q
(From this point on, whenever) 152.1 434.37 T
4 F
(Tk_GeometryRequest) 272.58 434.37 T
2 F
( is invoked for) 380.52 434.37 T
4 F
(tkwin) 441.04 434.37 T
2 F
(, Tk will) 471.02 434.37 T
-0.21 (invoke) 152.1 421.93 P
4 F
-0.5 (proc) 181.6 421.93 P
2 F
-0.21 (. There can be only one geometry manager for a slave at a given time, so any) 205.58 421.93 P
-0.12 (previous geometry manager is cancelled. A geometry manager can also disown a slave by) 152.1 409.49 P
(calling) 152.1 397.05 T
4 F
(Tk_ManageGeometry) 181.8 397.05 T
2 F
( with a null value for) 283.75 397.05 T
4 F
(proc) 369.8 397.05 T
2 F
(.) 393.79 397.05 T
4 F
(Proc) 398.78 397.05 T
2 F
( must match the fol-) 422.77 397.05 T
(lowing prototype:) 152.1 384.61 T
4 9 Q
(typedef void Tk_GeometryProc\050ClientData clientData,) 179.1 370.28 T
(Tk_Window tkwin\051;) 224.75 359.84 T
2 10 Q
(The) 152.1 346.18 T
4 F
(clientData) 170.14 346.18 T
2 F
( and) 230.11 346.18 T
4 F
(tkwin) 249.54 346.18 T
2 F
( ar) 279.52 346.18 T
(guments will be the same as those passed to) 289.6 346.18 T
4 F
(Tk_Man-) 467.55 346.18 T
-1.01 (ageGeometry) 152.1 333.74 P
2 F
-0.42 (. Usually) 217.41 333.74 P
4 F
-1.01 (Tk_ManageGeometry) 255.16 333.74 P
2 F
-0.42 ( is invoked by the command procedure) 357.11 333.74 P
(for a geometry manager) 152.1 321.3 T
(, and usually) 247.45 321.3 T
4 F
(clientData) 300.75 321.3 T
2 F
( is a pointer to the structure holding) 360.71 321.3 T
(the geometry manager) 152.1 308.86 T
(\325) 241.84 308.86 T
(s information about) 244.62 308.86 T
4 F
(tkwin) 325.4 308.86 T
2 F
(.) 355.39 308.86 T
98.1 265.51 512.1 268.53 C
152.1 266.73 512.1 266.73 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 267.02 143.1 267.02 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(43.6) 117.96 272.53 T
(Retrieving geometry information) 152.1 272.53 T
2 10 Q
(When a widget calls) 152.1 248.84 T
4 F
(Tk_GeometryRequest) 235.92 248.84 T
2 F
( or) 343.86 248.84 T
4 F
(Tk_SetInternalBorder) 357.19 248.84 T
2 F
( Tk) 477.12 248.84 T
(saves the geometry information in its data structure for the widget. The geometry manag-) 152.1 236.4 T
(er) 152.1 223.96 T
(\325) 160.24 223.96 T
(s layout procedure can retrieve the requested dimensions of a slave with the macros) 163.01 223.96 T
4 F
-0.68 (Tk_ReqWidth) 152.1 211.52 P
2 F
-0.28 ( and) 218.06 211.52 P
4 F
-0.68 (Tk_ReqHeight) 236.93 211.52 P
2 F
-0.28 (, and it can retrieve the width of a master) 308.89 211.52 P
-0.28 (\325) 470.47 211.52 P
-0.28 (s internal) 473.25 211.52 P
(border with the macro) 152.1 199.09 T
4 F
(Tk_InternalBorderWidth) 243.14 199.09 T
2 F
(. It can also retrieve the master) 375.07 199.09 T
(\325) 498.39 199.09 T
(s) 501.17 199.09 T
(actual dimensions with the) 152.1 186.65 T
4 F
(Tk_Width) 261.48 186.65 T
2 F
( and) 309.45 186.65 T
4 F
(Tk_Height) 328.88 186.65 T
2 F
( macros, which were originally) 382.85 186.65 T
(described in Section 37.5.) 152.1 174.21 T
5 F
(Note:) 119.09 159.21 T
(Geometry managers need not worry about the gridding information pr) 152.1 159.21 T
(ovided with the) 434.07 159.21 T
4 F
(Tk_SetGrid) 152.1 148.77 T
5 F
( pr) 212.07 148.77 T
(ocedur) 223.08 148.77 T
(e. This information doesn\325) 250.47 148.77 T
(t affect geometry managers at all. It is) 354.86 148.77 T
(simply passed on to the window manager for use in contr) 152.1 138.33 T
(olling interactive r) 380.49 138.33 T
(esizes.) 455.08 138.33 T
FMENDPAGE
%%EndPage: "388" 71
%%Page: "389" 71
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
(43.7 Mapping and setting geometry) 98.1 668.33 T
0 F
(389) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 623.98 512.1 627 C
152.1 625.2 512.1 625.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 625.49 143.1 625.49 2 L
0 Z
N
40.5 63 571.5 729 C
0 12 Q
0 X
0 K
(43.7) 117.96 631 T
(Mapping and setting geometry) 152.1 631 T
2 10 Q
-0.01 (A geometry manager does two things to control the placement of a slave window) 152.1 607.31 P
-0.01 (. First, it) 475.76 607.31 P
-0.15 (determines whether the slave window is mapped or unmapped, and second, it sets the size) 152.1 595.21 P
(and location of the window) 152.1 583.1 T
(.) 260.82 583.1 T
-0.12 (X allows a window to exist without appearing on the screen. Such a window is called) 170.1 571.1 P
5 F
(unmapped) 152.1 559 T
2 F
(: neither it nor any of its descendants will appear on the screen. In order for a) 193.74 559 T
(window to appear) 152.1 546.9 T
(, it and all of its ancestors \050up through the nearest top-level window\051) 223.31 546.9 T
(must be) 152.1 534.8 T
5 F
(mapped) 185.97 534.8 T
2 F
(. All windows are initially unmapped. When a geometry manager takes) 217.61 534.8 T
(responsibility for a window it must map it by calling) 152.1 522.69 T
4 F
(Tk_MapWindow) 364.76 522.69 T
2 F
(:) 436.72 522.69 T
4 9 Q
(void Tk_MapWindow\050Tk_Window tkwin\051;) 179.1 508.36 T
2 10 Q
(Usually the geometry manager will call) 152.1 494.69 T
4 F
(Tk_MapWindow) 312.54 494.69 T
2 F
( in its layout procedure once it) 384.5 494.69 T
(has decided where the window will appear) 152.1 482.59 T
(. If a geometry manager decides not to manage) 321.97 482.59 T
(a window anymore \050e.g. in the \322) 152.1 470.49 T
4 F
(pack forget) 280.89 470.49 T
2 F
(\323 command\051 then it must unmap the win-) 346.85 470.49 T
(dow to remove it from the screen:) 152.1 458.39 T
4 9 Q
(void Tk_UnmapWindow\050Tk_Window tkwin\051;) 179.1 444.05 T
2 10 Q
-0.18 (Some geometry managers may temporarily unmap windows during normal operation. For) 152.1 430.39 P
-0.36 (example, the packer unmaps a slave if there isn\325) 152.1 418.28 P
-0.36 (t enough space in its master to display it; if) 341.37 418.28 P
(the master is enlar) 152.1 406.18 T
(ged later then the slave will be mapped again.) 224.92 406.18 T
(Tk provides three procedures that a geometry manager) 170.1 394.18 T
(\325) 388.9 394.18 T
(s layout procedure can use to) 391.68 394.18 T
(position slave windows:) 152.1 382.08 T
4 9 Q
(void Tk_MoveWindow\050Tk_Window tkwin, int x, int y\051;) 179.1 367.74 T
(void Tk_ResizeWindow\050Tk_Window tkwin, unsigned int width,) 179.1 357.64 T
(unsigned int height\051;) 224.75 347.54 T
(void Tk_MoveResizeWindow\050Tk_Window tkwin, int x, int y,) 179.1 337.44 T
(unsigned int width, unsigned int height\051;) 224.75 327.33 T
4 10 Q
-0.47 (Tk_MoveWindow) 152.1 313.67 P
2 F
-0.2 ( moves a window so that its upper left corner appears at the given loca-) 230.06 313.67 P
-0.14 (tion in its parent;) 152.1 301.57 P
4 F
-0.32 (Tk_ResizeWindow) 222.08 301.57 P
2 F
-0.14 ( sets the dimensions of a window without moving) 312.03 301.57 P
(it; and) 152.1 289.46 T
4 F
(Tk_MoveResize) 179.87 289.46 T
2 F
( both moves a window and changes its dimensions.) 257.82 289.46 T
(The position speci\336ed to) 170.1 277.46 T
4 F
(Tk_MoveWindow) 271.15 277.46 T
2 F
( or) 349.11 277.46 T
4 F
(Tk_MoveResizeWindow) 362.43 277.46 T
2 F
( is a) 476.37 277.46 T
(position in the slave\325) 152.1 265.36 T
(s parent. However) 235.11 265.36 T
(, most geometry managers allow the master for a) 307.7 265.36 T
-0.17 (slave to be not only its parent but any descendant of the parent. T) 152.1 253.26 P
-0.17 (ypically the layout proce-) 410.17 253.26 P
(dure will compute the slave\325) 152.1 241.15 T
(s location relative to its master; before calling) 265.36 241.15 T
4 F
(Tk_MoveWindow) 152.1 229.05 T
2 F
( or) 230.06 229.05 T
4 F
(Tk_MoveResizeWindow) 243.38 229.05 T
2 F
( it must translate these coordinates to) 357.32 229.05 T
(the coordinate system of the slave\325) 152.1 216.95 T
(s parent. The following code shows how to transform) 290.61 216.95 T
(coordinates) 152.1 204.85 T
4 F
(x) 200.67 204.85 T
2 F
( and) 206.67 204.85 T
4 F
(y) 226.1 204.85 T
2 F
( from the master to the parent, assuming that) 232.1 204.85 T
4 F
(slave) 413.09 204.85 T
2 F
( is the slave win-) 443.07 204.85 T
(dow and) 152.1 192.74 T
4 F
(master) 188.74 192.74 T
2 F
( is its master:) 224.72 192.74 T
4 9 Q
(int x, y;) 179.1 178.41 T
(Tk_Window slave, master, parent, ancestor;) 179.1 168.31 T
(...) 179.1 158.21 T
(for \050ancestor = master; ancestor != Tk_Parent\050slave\051;) 179.1 148.1 T
(ancestor = Tk_Parent\050ancestor\051\051 {) 224.75 138 T
FMENDPAGE
%%EndPage: "389" 72
%%Page: "390" 72
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(390) 98.1 668.33 T
3 F
(Geometry Management) 407.12 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
1 12 Q
0 X
(DRAFT \0507/10/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
4 9 Q
0 X
(x += Tk_X\050ancestor\051 + Tk_Changes\050ancestor\051->border_width;) 201.92 633 T
(y += Tk_Y\050ancestor\051 + Tk_Changes\050ancestor\051->border_width;) 201.92 623 T
(}) 179.1 613 T
FMENDPAGE
%%EndPage: "390" 73
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 72 1
%%DocumentFonts: Helvetica-Bold
%%+ Times-Bold
%%+ Times-Roman
%%+ Helvetica
%%+ Courier
%%+ Times-Italic
%%+ Courier-Oblique
