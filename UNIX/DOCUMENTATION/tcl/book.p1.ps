%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
/newdict /Courier findfont length 1 add dict def
/Courier findfont {
	1 index /FID ne
		{newdict 3 1 roll put}
		{pop pop}
	ifelse
} forall
newdict /StrokeWidth 55 put
/Courier newdict definefont pop
/newdict /Courier-Oblique findfont length 1 add dict def
/Courier-Oblique findfont {
	1 index /FID ne
		{newdict 3 1 roll put}
		{pop pop}
	ifelse
} forall
newdict /StrokeWidth 55 put
1 1 612 792 0 1 22 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
2 0 /Times-Italic FMFONTDEFINE
3 0 /Courier FMFONTDEFINE
4 0 /Helvetica-Bold FMFONTDEFINE
5 0 /Helvetica FMFONTDEFINE
6 1 /Symbol FMFONTDEFINE
7 0 /Courier-Oblique FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
99 126 513 630 R
7 X
0 K
V
0 24 Q
0 X
(T) 192.24 590 T
(cl and the Tk T) 206.04 590 T
(oolkit) 361.11 590 T
1 14 Q
(John K. Ousterhout) 251.4 528.67 T
(Computer Science Division) 228.66 512.67 T
(Department of Electrical Engineering and Computer Sciences) 133.08 496.67 T
(University of California) 238.77 480.67 T
(Berkeley) 248.74 464.67 T
(, CA 94720) 298.35 464.67 T
1 10 Q
(Copyright \251 1993 Addison-W) 135 427.33 T
(esley Publishing Company) 256.45 427.33 T
(, Inc.) 362.98 427.33 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal) 135 415.33 T
-0.11 (use only) 135 403.33 P
-0.11 (. Any other form of duplication or reproduction requires prior written permis-) 167.84 403.33 P
(sion of the author or publisher) 135 391.33 T
(. This statement must be easily visible on the \336rst page) 255.2 391.33 T
(of any reproduced copies. The publisher does not of) 135 379.33 T
(fer warranties in regard to this) 342.72 379.33 T
(draft.) 135 367.33 T
2 F
(Note to r) 135 343.33 T
(eaders:) 170.17 343.33 T
1 F
(This manuscript is a partial draft of a book to be published in early 1994 by Addison-) 135 331.33 T
(W) 135 319.33 T
(esley \050ISBN 0-201-63337-X\051. Addison-W) 143.63 319.33 T
(esley has given me permission to make) 311.6 319.33 T
(drafts of the book available to the T) 135 307.33 T
(cl community to help meet the need for introduc-) 277.25 307.33 T
(tory documentation on T) 135 295.33 T
(cl and Tk until the book becomes available. Please observe) 233.41 295.33 T
(the restrictions set forth in the copyright notice above: you\325re welcome to make a) 135 283.33 T
(copy for yourself or a friend but any sort of lar) 135 271.33 T
(ge-scale reproduction or reproduction) 321.34 271.33 T
(for pro\336t requires advance permission from Addison-W) 135 259.33 T
(esley) 357.37 259.33 T
(.) 377.26 259.33 T
-0.25 (I would be happy to receive any comments you might have on this draft; send them to) 135 235.33 P
-0.34 (me via electronic mail at) 135 223.33 P
3 F
-0.83 (ouster@cs.berkeley.edu) 234.59 223.33 P
1 F
-0.34 (. I\325m particularly interested) 366.52 223.33 P
(in hearing about things that you found dif) 135 211.33 T
(\336cult to learn or that weren\325) 301.11 211.33 T
(t adequately) 412.79 211.33 T
(explained in this document, but I\325m also interested in hearing about inaccuracies,) 135 199.33 T
(typos, or any other constructive criticism you might have.) 135 187.33 T
FMENDPAGE
%%EndPage: "1" 2
%%Page: "2" 2
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(2) 99 659.33 T
99 651.6 513 651.6 2 L
0.25 H
0 Z
N
99 81 513 99 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.9 92.33 T
99 126 513 630 R
7 X
V
FMENDPAGE
%%EndPage: "2" 3
%%Page: "1" 3
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(1) 506.54 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 14 Q
0 X
(Chapter 1) 98.1 629.67 T
(Introduction) 233.1 629.67 T
(1) 316.27 629.67 T
1 10 Q
(1.1) 211.61 612.33 T
(Introduction) 233.1 612.33 T
(1) 292.51 612.33 T
(1.2) 211.61 596.33 T
(Or) 233.1 596.33 T
(ganization of the book) 243.46 596.33 T
(3) 343.12 596.33 T
(1.3) 211.61 580.33 T
(Notation) 233.1 580.33 T
(4) 278.08 580.33 T
1 14 Q
(Chapter 2) 98.1 543.67 T
(An Overview of Tcl and Tk) 233.1 543.67 T
(5) 402.91 543.67 T
1 10 Q
(2.1) 211.61 526.33 T
(Getting started) 233.1 526.33 T
(5) 302.22 526.33 T
(2.2) 211.61 510.33 T
(Hello world with Tk) 233.1 510.33 T
(7) 324.99 510.33 T
(2.3) 211.61 494.33 T
(Script \336les) 233.1 494.33 T
(9) 286.13 494.33 T
(2.4) 211.61 478.33 T
(V) 233.1 478.33 T
(ariables and substitutions) 239.21 478.33 T
(10) 350.26 478.33 T
(2.5) 211.61 462.33 T
(Control structures) 233.1 462.33 T
(1) 314.99 462.33 T
(1) 319.62 462.33 T
(2.6) 211.61 446.33 T
(Event bindings) 233.1 446.33 T
(13) 303.34 446.33 T
(2.7) 211.61 430.33 T
(Subprocesses) 233.1 430.33 T
(15) 296.95 430.33 T
(2.8) 211.61 414.33 T
(Additional features of T) 233.1 414.33 T
(cl and Tk) 328.72 414.33 T
(18) 376.46 414.33 T
(2.9) 211.61 398.33 T
(Extensions and applications) 233.1 398.33 T
(18) 354.69 398.33 T
5 8 Q
(2.9.1) 233.1 385.67 T
(Expect) 257.08 385.67 T
(19) 289.51 385.67 T
(2.9.2) 233.1 375.67 T
(Extended T) 257.08 375.67 T
(cl) 297.08 375.67 T
(19) 310.85 375.67 T
(2.9.3) 233.1 365.67 T
(XF) 257.08 365.67 T
(20) 275.29 365.67 T
(2.9.4) 233.1 355.67 T
(Distributed programming) 257.08 355.67 T
(20) 352.6 355.67 T
(2.9.5) 233.1 345.67 T
(Ak) 257.08 345.67 T
(22) 274.4 345.67 T
1 14 Q
(Chapter 3) 98.1 311.67 T
(Tcl Language Syntax) 233.1 311.67 T
(25) 366.78 311.67 T
1 10 Q
(3.1) 211.61 294.33 T
(Scripts, commands, and words) 233.1 294.33 T
(25) 365.52 294.33 T
(3.2) 211.61 278.33 T
(Evaluating a command) 233.1 278.33 T
(26) 335.25 278.33 T
(3.3) 211.61 262.33 T
(V) 233.1 262.33 T
(ariable substitution) 239.21 262.33 T
(28) 325.55 262.33 T
(3.4) 211.61 246.33 T
(Command substitution) 233.1 246.33 T
(29) 333.89 246.33 T
(3.5) 211.61 230.33 T
(Backslash substitution) 233.1 230.33 T
(30) 332.77 230.33 T
(3.6) 211.61 214.33 T
(Quoting with double-quotes) 233.1 214.33 T
(30) 355.25 214.33 T
(3.7) 211.61 198.33 T
(Quoting with braces) 233.1 198.33 T
(32) 324.15 198.33 T
(3.8) 211.61 182.33 T
(Comments) 233.1 182.33 T
(33) 286.41 182.33 T
(3.9) 211.61 166.33 T
(Normal and exceptional returns) 233.1 166.33 T
(33) 369.39 166.33 T
(3.10) 206.61 150.33 T
(More on substitutions) 233.1 150.33 T
(34) 330.28 150.33 T
FMENDPAGE
%%EndPage: "1" 4
%%Page: "2" 4
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(2) 98.1 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 14 Q
0 X
(Chapter 4) 98.1 629.67 T
(Variables) 233.1 629.67 T
(37) 300.71 629.67 T
1 10 Q
(4.1) 211.61 612.33 T
(Simple variables and the set command) 233.1 612.33 T
(37) 397.16 612.33 T
(4.2) 211.61 596.33 T
(Arrays) 233.1 596.33 T
(38) 270.29 596.33 T
(4.3) 211.61 580.33 T
(V) 233.1 580.33 T
(ariable substitution) 239.21 580.33 T
(39) 325.55 580.33 T
(4.4) 211.61 564.33 T
(Removing variables: unset) 233.1 564.33 T
(40) 349.7 564.33 T
(4.5) 211.61 548.33 T
(Multi-dimensional arrays) 233.1 548.33 T
(41) 344.42 548.33 T
(4.6) 211.61 532.33 T
(The incr and append commands) 233.1 532.33 T
(41) 370.77 532.33 T
(4.7) 211.61 516.33 T
(Preview of other variable facilities) 233.1 516.33 T
(42) 381.32 516.33 T
1 14 Q
(Chapter 5) 98.1 479.67 T
(Expressions) 233.1 479.67 T
(43) 314.72 479.67 T
1 10 Q
(5.1) 211.61 462.33 T
(Numeric operands) 233.1 462.33 T
(43) 316.64 462.33 T
(5.2) 211.61 446.33 T
(Operators and precedence) 233.1 446.33 T
(44) 346.88 446.33 T
5 8 Q
(5.2.1) 233.1 433.67 T
(Arithmetic operators) 257.08 433.67 T
(44) 336.61 433.67 T
(5.2.2) 233.1 423.67 T
(Relational operators) 257.08 423.67 T
(46) 336.62 423.67 T
(5.2.3) 233.1 413.67 T
(Logical operators) 257.08 413.67 T
(46) 326.4 413.67 T
(5.2.4) 233.1 403.67 T
(Bitwise operators) 257.08 403.67 T
(46) 326.39 403.67 T
(5.2.5) 233.1 393.67 T
(Choice operator) 257.08 393.67 T
(46) 321.95 393.67 T
1 10 Q
(5.3) 211.61 380.33 T
(Math functions) 233.1 380.33 T
(47) 303.89 380.33 T
(5.4) 211.61 364.33 T
(Substitutions) 233.1 364.33 T
(47) 295.31 364.33 T
(5.5) 211.61 348.33 T
(String manipulation) 233.1 348.33 T
(49) 322.78 348.33 T
(5.6) 211.61 332.33 T
(T) 233.1 332.33 T
(ypes and conversions) 238.51 332.33 T
(49) 333.99 332.33 T
(5.7) 211.61 316.33 T
(Precision) 233.1 316.33 T
(50) 280.29 316.33 T
1 14 Q
(Chapter 6) 98.1 279.67 T
(Lists) 233.1 279.67 T
(51) 274.31 279.67 T
1 10 Q
(6.1) 211.61 262.33 T
(Basic list structure and the lindex command) 233.1 262.33 T
(51) 418.54 262.33 T
(6.2) 211.61 246.33 T
(Creating lists: concat, list, and llength) 233.1 246.33 T
(53) 394.4 246.33 T
(6.3) 211.61 230.33 T
(Modifying lists: linsert, lreplace, lrange, and lappend) 233.1 230.33 T
(54) 454.9 230.33 T
(6.4) 211.61 214.33 T
(Searching lists: lsearch) 233.1 214.33 T
(56) 335.25 214.33 T
(6.5) 211.61 198.33 T
(Sorting lists: lsort) 233.1 198.33 T
(56) 314.18 198.33 T
(6.6) 211.61 182.33 T
(Converting between strings and lists: split and join) 233.1 182.33 T
(57) 446.04 182.33 T
(6.7) 211.61 166.33 T
(Lists and commands) 233.1 166.33 T
(58) 325.27 166.33 T
FMENDPAGE
%%EndPage: "2" 5
%%Page: "3" 5
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(3) 506.54 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 14 Q
0 X
(Chapter 7) 98.1 629.67 T
(Control Flow) 233.1 629.67 T
(61) 322.12 629.67 T
1 10 Q
(7.1) 211.61 612.33 T
(The if command) 233.1 612.33 T
(61) 309.16 612.33 T
(7.2) 211.61 596.33 T
(Looping commands: while, for) 233.1 596.33 T
(, and foreach) 356.51 596.33 T
(63) 418.4 596.33 T
(7.3) 211.61 580.33 T
(Loop control: break and continue) 233.1 580.33 T
(65) 376.33 580.33 T
(7.4) 211.61 564.33 T
(The switch command) 233.1 564.33 T
(65) 329.15 564.33 T
(7.5) 211.61 548.33 T
(Eval) 233.1 548.33 T
(67) 261.41 548.33 T
(7.6) 211.61 532.33 T
(Executing from \336les: source) 233.1 532.33 T
(68) 356.07 532.33 T
1 14 Q
(Chapter 8) 98.1 495.67 T
(Procedures) 233.1 495.67 T
(69) 309.26 495.67 T
1 10 Q
(8.1) 211.61 478.33 T
(Procedure basics: proc and return) 233.1 478.33 T
(69) 376.87 478.33 T
(8.2) 211.61 462.33 T
(Local and global variables) 233.1 462.33 T
(71) 348.85 462.33 T
(8.3) 211.61 446.33 T
(Defaults and variable numbers of ar) 233.1 446.33 T
(guments) 376.41 446.33 T
(72) 420.28 446.33 T
(8.4) 211.61 430.33 T
(Call by reference: upvar) 233.1 430.33 T
(73) 339.95 430.33 T
(8.5) 211.61 414.33 T
(Creating new control structures: uplevel) 233.1 414.33 T
(74) 403.54 414.33 T
1 14 Q
(Chapter 9) 98.1 377.67 T
(Errors and Exceptions) 233.1 377.67 T
(77) 371.44 377.67 T
1 10 Q
(9.1) 211.61 360.33 T
(What happens after an error?) 233.1 360.33 T
(77) 359.09 360.33 T
(9.2) 211.61 344.33 T
(Generating errors from T) 233.1 344.33 T
(cl scripts) 333.14 344.33 T
(79) 378.95 344.33 T
(9.3) 211.61 328.33 T
(T) 233.1 328.33 T
(rapping errors with catch) 238.86 328.33 T
(80) 349.05 328.33 T
(9.4) 211.61 312.33 T
(Exceptions in general) 233.1 312.33 T
(81) 329.7 312.33 T
1 14 Q
(Chapter 10) 98.1 275.67 T
(String Manipulation) 233.1 275.67 T
(85) 360.21 275.67 T
1 10 Q
(10.1) 206.61 258.33 T
(Glob-style pattern matching) 233.1 258.33 T
(85) 355.24 258.33 T
(10.2) 206.61 242.33 T
(Pattern matching with regular expressions) 233.1 242.33 T
(88) 411.31 242.33 T
(10.3) 206.61 226.33 T
(Using regular expressions for substitutions) 233.1 226.33 T
(90) 414.1 226.33 T
(10.4) 206.61 210.33 T
(Generating strings with format) 233.1 210.33 T
(91) 366.07 210.33 T
(10.5) 206.61 194.33 T
(Parsing strings with scan) 233.1 194.33 T
(93) 342.76 194.33 T
(10.6) 206.61 178.33 T
(Extracting characters: string index and string range) 233.1 178.33 T
(94) 447.38 178.33 T
(10.7) 206.61 162.33 T
(Searching and comparison) 233.1 162.33 T
(94) 349.13 162.33 T
(10.8) 206.61 146.33 T
(Length, case conversion, and trimming) 233.1 146.33 T
(95) 399.1 146.33 T
FMENDPAGE
%%EndPage: "3" 6
%%Page: "4" 6
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(4) 98.1 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 14 Q
0 X
(Chapter 11) 98.1 629.67 T
(Accessing Files) 233.1 629.67 T
(97) 335.31 629.67 T
1 10 Q
(1) 206.98 612.33 T
(1.1) 211.61 612.33 T
(File names) 233.1 612.33 T
(97) 286.68 612.33 T
(1) 206.98 596.33 T
(1.2) 211.61 596.33 T
(Basic \336le I/O) 233.1 596.33 T
(99) 296.39 596.33 T
(1) 206.98 580.33 T
(1.3) 211.61 580.33 T
(Output buf) 233.1 580.33 T
(fering) 276.51 580.33 T
(101) 310.37 580.33 T
(1) 206.98 564.33 T
(1.4) 211.61 564.33 T
(Random access to \336les) 233.1 564.33 T
(101) 334.42 564.33 T
(1) 206.98 548.33 T
(1.5) 211.61 548.33 T
(The current working directory) 233.1 548.33 T
(102) 363.83 548.33 T
(1) 206.98 532.33 T
(1.6) 211.61 532.33 T
(Manipulating \336le names: glob and \336le) 233.1 532.33 T
(102) 395.51 532.33 T
(1) 206.98 516.33 T
(1.7) 211.61 516.33 T
(File information commands) 233.1 516.33 T
(105) 354.14 516.33 T
(1) 206.98 500.33 T
(1.8) 211.61 500.33 T
(Errors in system calls) 233.1 500.33 T
(107) 329.43 500.33 T
1 14 Q
(Chapter 12) 98.1 463.67 T
(Processes) 233.1 463.67 T
(109) 301.49 463.67 T
1 10 Q
(12.1) 206.61 446.33 T
(Invoking subprocesses with exec) 233.1 446.33 T
(109) 374.94 446.33 T
(12.2) 206.61 430.33 T
(I/O to and from a command pipeline) 233.1 430.33 T
(1) 389.1 430.33 T
(12) 393.73 430.33 T
(12.3) 206.61 414.33 T
(Process ids) 233.1 414.33 T
(1) 287.79 414.33 T
(13) 292.42 414.33 T
(12.4) 206.61 398.33 T
(Environment variables) 233.1 398.33 T
(1) 333.86 398.33 T
(13) 338.49 398.33 T
(12.5) 206.61 382.33 T
(T) 233.1 382.33 T
(erminating the T) 238.51 382.33 T
(cl process with exit) 304.43 382.33 T
(1) 391.87 382.33 T
(13) 396.5 382.33 T
1 14 Q
(Chapter 13) 98.1 345.67 T
(Managing Tcl Internals) 233.1 345.67 T
(115) 378.44 345.67 T
1 10 Q
(13.1) 206.61 328.33 T
(Querying the elements of an array) 233.1 328.33 T
(1) 379.37 328.33 T
(15) 384 328.33 T
(13.2) 206.61 312.33 T
(The info command) 233.1 312.33 T
(1) 319.15 312.33 T
(17) 323.78 312.33 T
5 8 Q
(13.2.1) 233.1 299.67 T
(Information about variables) 257.08 299.67 T
(1) 361.51 299.67 T
(17) 365.36 299.67 T
(13.2.2) 233.1 289.67 T
(Information about procedures) 257.08 289.67 T
(120) 369.51 289.67 T
(13.2.3) 233.1 279.67 T
(Information about commands) 257.08 279.67 T
(121) 368.61 279.67 T
(13.2.4) 233.1 269.67 T
(T) 257.08 269.67 T
(clversion and library) 261.07 269.67 T
(122) 340.16 269.67 T
1 10 Q
(13.3) 206.61 256.33 T
(T) 233.1 256.33 T
(iming command execution) 238.86 256.33 T
(122) 355.45 256.33 T
(13.4) 206.61 240.33 T
(T) 233.1 240.33 T
(racing operations on variables) 238.86 240.33 T
(123) 369.04 240.33 T
(13.5) 206.61 224.33 T
(Renaming and deleting commands) 233.1 224.33 T
(125) 381.62 224.33 T
(13.6) 206.61 208.33 T
(Unknown commands) 233.1 208.33 T
(126) 328.32 208.33 T
(13.7) 206.61 192.33 T
(Auto-loading) 233.1 192.33 T
(128) 296.39 192.33 T
1 14 Q
(Chapter 14) 98.1 155.67 T
(History) 233.1 155.67 T
(131) 289.07 155.67 T
1 10 Q
(14.1) 206.61 138.33 T
(The history list) 233.1 138.33 T
(131) 303.62 138.33 T
FMENDPAGE
%%EndPage: "4" 7
%%Page: "5" 7
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(5) 506.54 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(14.2) 206.61 632.33 T
(Specifying events) 233.1 632.33 T
(133) 314.43 632.33 T
(14.3) 206.61 616.33 T
(Re-executing commands from the history list) 233.1 616.33 T
(133) 423.82 616.33 T
(14.4) 206.61 600.33 T
(Shortcuts implemented by unknown) 233.1 600.33 T
(134) 387.73 600.33 T
(14.5) 206.61 584.33 T
(Current event number: history nextid) 233.1 584.33 T
(134) 391.33 584.33 T
FMENDPAGE
%%EndPage: "5" 8
%%Page: "6" 8
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(6) 98.1 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
FMENDPAGE
%%EndPage: "6" 9
%%Page: "1" 9
612 792 0 FMBEGINPAGE
98.1 675 512.1 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
98.1 450 512.1 450 2 L
7 X
V
2 Z
0 X
N
98.1 108 512.1 126 R
7 X
V
4 10 Q
0 X
(1) 506.54 119.33 T
98.1 54 512.1 108 R
7 X
V
1 9 Q
0 X
(Copyright \251 1993 Addison-W) 152.1 102 T
(esley Publishing Company) 261.32 102 T
(, Inc.) 357.1 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 152.1 91 T
(. Any) 485.77 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 152.1 80 T
-0.34 (lisher) 152.1 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 171.58 69 P
(does not of) 152.1 58 T
(fer warranties in regard to this draft.) 191.88 58 T
0 24 Q
(Chapter 1) 152.1 605 T
-0.48 (Intr) 152.1 575 S
-0.48 (oduction) 191.06 575 S
98.1 135 512.1 423 R
7 X
V
98.1 407.98 512.1 411 C
152.1 409.2 512.1 409.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 409.49 143.1 409.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(1.1) 124.63 415 T
(Introduction) 152.1 415 T
1 10 Q
-0.15 (This book is about two packages called T) 152.1 391.31 P
-0.15 (cl and Tk. T) 316.08 391.31 P
-0.15 (ogether they provide a programming) 363.79 391.31 P
(system for developing and using graphical user interface \050GUI\051 applications. T) 152.1 379.31 T
(cl stands) 466.44 379.31 T
(for \322tool command language\323 and is pronounced \322tickle\323; is a simple scripting language) 152.1 367.31 T
-0.13 (for controlling and extending applications. It provides generic programming facilities that) 152.1 355.31 P
(are useful for a variety of applications, such as variables and loops and procedures. Fur-) 152.1 343.31 T
(thermore, T) 152.1 331.31 T
(cl is) 198.58 331.31 T
2 F
(embeddable) 217.46 331.31 T
1 F
(: its interpreter is implemented as a library of C procedures) 265.76 331.31 T
-0.04 (that can easily be incorporated into applications, and each application can extend the core) 152.1 319.31 P
(T) 152.1 307.31 T
(cl features with additional commands speci\336c to that application.) 157.51 307.31 T
(One of the most useful extensions to T) 170.1 295.31 T
(cl is Tk. It is a toolkit for the X W) 324.02 295.31 T
(indow Sys-) 459.93 295.31 T
(tem, and its name is pronounced \322tee-kay\323. Tk extends the core T) 152.1 283.31 T
(cl facilities with addi-) 413.7 283.31 T
(tional commands for building user interfaces, so that you can construct Motif user) 152.1 271.31 T
-0.38 (interfaces by writing T) 152.1 259.31 P
-0.38 (cl scripts instead of C code. Like T) 241.59 259.31 P
-0.38 (cl, Tk is implemented as a library) 378.16 259.31 P
(of C procedures so it too can be used in many dif) 152.1 247.31 T
(ferent applications. Individual applica-) 348.17 247.31 T
(tions can also extend the base Tk features with new user) 152.1 235.31 T
(-interface widgets and geometry) 376.73 235.31 T
(managers written in C.) 152.1 223.31 T
(T) 170.1 211.31 T
(ogether) 175.51 211.31 T
(, T) 205.08 211.31 T
(cl and Tk provide four bene\336ts to application developers and users. First,) 215.49 211.31 T
(T) 152.1 199.31 T
(cl makes it easy for any application to have a powerful scripting language. All that an) 157.51 199.31 T
(application needs to do is to implement a few new T) 152.1 187.31 T
(cl commands that provide the basic) 360.7 187.31 T
(features of that application. Then the application can be linked with the T) 152.1 175.31 T
(cl interpreter to) 444.8 175.31 T
(produce a full-function scripting language that includes both the commands provided by) 152.1 163.31 T
(T) 152.1 151.31 T
(cl \050called the) 157.51 151.31 T
2 F
(T) 211.63 151.31 T
(cl cor) 216.26 151.31 T
(e) 238.93 151.31 T
1 F
(\051 and those implemented by the application \050see Figure 1.1\051.) 243.37 151.31 T
44.1 351 98.1 423 C
35.1 360 197.1 414 R
7 X
0 K
V
0 9 Q
0 X
(FIGURE  1) 35.1 408 T
(T) 35.1 387 T
(ABLE  1) 40.43 387 T
26.1 351 125.1 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "1" 10
%%Page: "2" 10
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(2) 98.1 668.33 T
5 F
(Introduction) 459.88 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(For example, an application for reading electronic bulletin boards might contain C) 170.1 452.33 T
(code that implements one T) 152.1 440.25 T
(cl command to query a bulletin board for new messages and) 262.44 440.25 T
-0.24 (another T) 152.1 428.17 P
-0.24 (cl command to retrieve a given message. Once these commands exist, T) 189.74 428.17 P
-0.24 (cl scripts) 474.27 428.17 P
-0.02 (can be written to cycle through the new messages from all the bulletin boards and display) 152.1 416.08 P
(them one at a time, or keep a record in disk \336les of which messages have been read and) 152.1 404 T
(which haven\325) 152.1 391.92 T
(t, or search one or more bulletin boards for messages on a particular topic.) 206.04 391.92 T
(The bulletin board application would not have to implement any of these additional func-) 152.1 379.83 T
-0.06 (tions in C; they could all be written as T) 152.1 367.75 P
-0.06 (cl scripts, and users of the application could write) 311.64 367.75 P
(additional T) 152.1 355.67 T
(cl scripts to add more functions to the application.) 199.98 355.67 T
(The second bene\336t of T) 170.1 343.67 T
(cl and Tk is rapid development. For example, many interest-) 264.33 343.67 T
(ing windowing applications can be written entirely as T) 152.1 331.58 T
(cl scripts with no C code at all,) 374.03 331.58 T
(using a windowing shell called) 152.1 319.5 T
3 F
(wish) 278.41 319.5 T
1 F
(. This allows you to program at a much higher level) 302.4 319.5 T
-0.29 (than you would in C or C++, and many of the details that C programmers must address are) 152.1 307.42 P
(hidden from you. Compared to toolkits where you program entirely in C, such as Xt/) 152.1 295.33 T
(Motif, there is much less to learn in order to use T) 152.1 283.25 T
(cl and Tk and much less code to write.) 351.82 283.25 T
(New T) 152.1 271.17 T
(cl/Tk users can often create interesting user interfaces after just a few hours of) 178.88 271.17 T
-0.36 (learning, and many people have reported ten-fold reductions in code size and development) 152.1 259.08 P
(time when they switched from other toolkits to T) 152.1 247 T
(cl and Tk.) 347.39 247 T
-0.22 (Another reason for rapid development with T) 170.1 235 P
-0.22 (cl and Tk is that T) 349.61 235 P
-0.22 (cl is an interpreted lan-) 420.83 235 P
(guage. When you use a T) 152.1 222.92 T
(cl application such as) 252.99 222.92 T
3 F
(wish) 341.26 222.92 T
1 F
( you can generate and execute new) 365.24 222.92 T
-0.2 (scripts on-the-\337y without recompiling or restarting the application. This allows you to test) 152.1 210.83 P
(out new ideas and \336x bugs very rapidly) 152.1 198.75 T
(. Since T) 308.84 198.75 T
(cl is interpreted it executes more slowly) 343.95 198.75 T
-0.15 (than compiled C code, of course, but modern workstations are surprisingly fast. For exam-) 152.1 186.67 P
(ple, you can execute scripts with hundreds or even thousands of T) 152.1 174.58 T
(cl commands on each) 415.1 174.58 T
(movement of the mouse with no perceptible delay) 152.1 162.5 T
(. In the rare cases where performance) 351.59 162.5 T
(becomes an issue, you can re-implement the most performance-critical parts of your T) 152.1 150.42 T
(cl) 496.41 150.42 T
(scripts in C.) 152.1 138.33 T
98.1 135 512.1 639 C
98.1 459 512.1 639 C
206.1 549 314.1 621 R
0 X
0 K
V
202.5 552.6 310.5 624.6 R
7 X
V
0.5 H
0 Z
0 X
N
229.5 586.8 287.1 612 R
V
227.7 588.6 285.3 613.8 R
7 X
V
0 X
N
1 10 Q
(Tcl) 249.84 604.88 T
(Interpreter) 235.41 592.88 T
218.34 570.6 224.1 576.36 R
V
216.9 572.04 222.66 577.8 R
7 X
V
0 X
N
232.74 570.6 238.5 576.36 R
V
231.3 572.04 237.06 577.8 R
7 X
V
0 X
N
247.14 570.6 252.9 576.36 R
V
245.7 572.04 251.46 577.8 R
7 X
V
0 X
N
261.54 570.6 267.3 576.36 R
V
260.1 572.04 265.86 577.8 R
7 X
V
0 X
N
275.94 570.6 281.7 576.36 R
V
274.5 572.04 280.26 577.8 R
7 X
V
0 X
N
290.34 570.6 296.1 576.36 R
V
288.9 572.04 294.66 577.8 R
7 X
V
0 X
N
(Built-in Commands) 216.93 559.8 T
353.7 549 461.7 621 R
V
350.1 552.6 458.1 624.6 R
7 X
V
0 X
N
369.9 586.8 441.9 612 R
V
368.1 588.6 440.1 613.8 R
7 X
V
0 X
N
(Application) 380.5 604.88 T
(Data Structures) 373.15 592.88 T
380.34 570.6 386.1 576.36 R
V
378.9 572.04 384.66 577.8 R
7 X
V
0 X
N
394.74 570.6 400.5 576.36 R
V
393.3 572.04 399.06 577.8 R
7 X
V
0 X
N
409.14 570.6 414.9 576.36 R
V
407.7 572.04 413.46 577.8 R
7 X
V
0 X
N
423.54 570.6 429.3 576.36 R
V
422.1 572.04 427.86 577.8 R
7 X
V
0 X
N
(Application Commands) 356.48 559.8 T
98.1 523.8 512.1 538.2 C
98.1 523.8 512.1 538.2 R
7 X
0 K
V
152.1 531.72 512.1 531.72 2 L
V
0.5 H
2 Z
0 X
N
98.1 459 512.1 639 C
0 9 Q
0 X
0 K
-0.05 (Figur) 152.1 517.8 P
-0.05 (e  1.1.) 173.41 517.8 P
1 F
-0.05 (T) 199.66 517.8 P
-0.05 (o create a new application based on T) 204.52 517.8 P
-0.05 (cl, an application developer designs new C data) 339.04 517.8 P
-0.19 (structures speci\336c to that application and writes C code to implement a few new T) 152.1 508.8 P
-0.19 (cl commands. The) 444.29 508.8 P
(T) 152.1 499.8 T
(cl library provides everything else that is needed to produce a fully programmable command) 156.96 499.8 T
98.1 473.4 512.1 487.8 C
98.1 473.4 512.1 487.8 R
7 X
0 K
V
152.1 481.32 512.1 481.32 2 L
V
0.5 H
2 Z
0 X
N
98.1 459 512.1 639 C
1 9 Q
0 X
0 K
(language. The application can then be modi\336ed and extended by writing T) 152.1 490.8 T
(cl scripts.) 419.05 490.8 T
1 10 Q
(Tcl Library) 233.6 628.58 T
(Application) 380.5 628.58 T
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "2" 11
%%Page: "3" 11
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(1.2 Organization of the book) 98.1 668.33 T
4 F
(3) 506.54 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(The third bene\336t of T) 170.1 632.33 T
(cl is that it makes an excellent \322glue language\323. Because it is) 255.45 632.33 T
-0.15 (embeddable, it can be used for many dif) 152.1 619.93 P
-0.15 (ferent purposes in many dif) 311.29 619.93 P
-0.15 (ferent programs. Once) 420.42 619.93 P
(this happens, it becomes possible to write T) 152.1 607.52 T
(cl scripts that combine the features of all the) 326.29 607.52 T
(programs. For example, any windowing application based on Tk can issue a T) 152.1 595.11 T
(cl script to) 463.96 595.11 T
(any other Tk application. This feature makes multi-media ef) 152.1 582.71 T
(fects much more accessible:) 392.58 582.71 T
(once audio and video applications have been built with Tk \050and there exist several) 152.1 570.3 T
(already\051, any Tk application can issue \322record\323 and \322play\323 commands to them. In addi-) 152.1 557.89 T
(tion, spreadsheets can update themselves from database applications, user) 152.1 545.49 T
(-interface edi-) 446.68 545.49 T
(tors can modify the appearance and behavior of live applications as they run, and so on.) 152.1 533.08 T
(T) 152.1 520.67 T
(cl provides the) 157.51 520.67 T
2 F
(lingua franca) 218.85 520.67 T
1 F
( that allows application to work together) 272.99 520.67 T
(.) 434.01 520.67 T
-0.26 (The fourth bene\336t of T) 170.1 508.67 P
-0.26 (cl is user convenience. Once a user learns T) 259.97 508.67 P
-0.26 (cl and Tk, he or she) 432.32 508.67 P
(can write scripts for any T) 152.1 496.27 T
(cl and Tk application merely by learning the few application-) 256.59 496.27 T
-0.24 (speci\336c commands for the new application. This should make it possible for more users to) 152.1 483.86 P
(personalize and enhance their applications.) 152.1 471.45 T
98.1 428.1 512.1 431.12 C
152.1 429.32 512.1 429.32 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 429.61 143.1 429.61 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(1.2) 124.63 435.12 T
(Organization of the book) 152.1 435.12 T
1 10 Q
(Chapter 2 uses several simple scripts to provide a quick overview of the most important) 152.1 411.43 T
(features of T) 152.1 399.02 T
(cl and Tk. It is intended to give you the \337avor of the systems and convince) 202.46 399.02 T
(you that they are useful without explaining anything in detail. The remainder of the book) 152.1 386.62 T
(goes through everything again in a more comprehensive fashion. It is divided into four) 152.1 374.21 T
(parts:) 152.1 361.8 T
1 12 Q
(\245) 152.1 346.8 T
0 10 Q
-0.1 (Part I) 162.9 346.8 P
1 F
-0.1 ( introduces the T) 188.05 346.8 P
-0.1 (cl scripting language. After reading this section you will be able) 254.51 346.8 P
(to write scripts for T) 162.9 334.4 T
(cl applications.) 244.37 334.4 T
1 12 Q
(\245) 152.1 319.4 T
0 10 Q
-0.13 (Part II) 162.9 319.4 P
1 F
-0.13 ( describes the additional T) 191.92 319.4 P
-0.13 (cl commands provided by Tk, which allow you to cre-) 296.18 319.4 P
-0.3 (ate user) 162.9 306.99 P
-0.3 (-interface widgets such as menus and scrollbars and arrange them in windowing) 193.2 306.99 P
-0.07 (applications. After reading this section you\325ll be able to create new windowing applica-) 162.9 294.59 P
(tion as) 162.9 282.18 T
3 F
(wish) 191.77 282.18 T
1 F
( scripts and write scripts to enhance existing Tk applications.) 215.76 282.18 T
1 12 Q
(\245) 152.1 267.18 T
0 10 Q
-0.36 (Part III) 162.9 267.18 P
1 F
-0.36 ( discusses the C procedures in the T) 195.57 267.18 P
-0.36 (cl library and how to use them to create new) 335.85 267.18 P
(T) 162.9 254.77 T
(cl commands. After reading this section you\325ll be able to write new T) 168.31 254.77 T
(cl packages and) 445.46 254.77 T
(applications in C.) 162.9 242.37 T
1 12 Q
(\245) 152.1 227.37 T
0 10 Q
(Part IV) 162.9 227.37 T
1 F
( describes Tk\325) 195.37 227.37 T
(s library procedures. After reading this section you\325ll be able to) 251.44 227.37 T
(create new widgets and geometry managers in C.) 162.9 214.96 T
-0.17 (Each of these major parts contains about ten short chapters. Each chapter is intended to be) 152.1 199.96 P
-0.31 (a self-contained description of a piece of the system, and you need not necessarily read the) 152.1 187.55 P
(chapters in order) 152.1 175.15 T
(. I recommend that you start by reading through Chapters 3-9 quickly) 218.71 175.15 T
(,) 495.65 175.15 T
(then skip to Chapters XXX-YYY) 152.1 162.74 T
(, then read other chapters as you need them.) 284.61 162.74 T
-0.24 (Not every feature of T) 170.1 150.74 P
-0.24 (cl and Tk is covered here, and the explanations are or) 257.82 150.74 P
-0.24 (ganized to) 468.71 150.74 P
(provide a smooth introduction rather than a terse reference source. A separate set of refer-) 152.1 138.33 T
FMENDPAGE
%%EndPage: "3" 12
%%Page: "4" 12
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(4) 98.1 668.33 T
5 F
(Introduction) 459.88 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(ence manual entries is available with the T) 152.1 632.33 T
(cl and Tk distributions. These are much more) 322.11 632.33 T
(terse but they cover absolutely every feature of both systems.) 152.1 620.33 T
-0.2 (This book assumes that you are familiar with the C programming language as de\336ned) 170.1 608.33 P
-0.27 (by the ANSI C standard, and that you have some experience with UNIX and X1) 152.1 596.33 P
-0.27 (1. In order) 468.51 596.33 P
(to understand Part IV you will need to understand many of the features provided by the) 152.1 584.33 T
-0.27 (Xlib interface, such as graphics contexts and window attributes; however) 152.1 572.33 P
-0.27 (, these details are) 441.84 572.33 P
-0.2 (not necessary except in Part IV) 152.1 560.33 P
-0.2 (. Y) 274.43 560.33 P
-0.2 (ou need not know anything about either T) 285.45 560.33 P
-0.2 (cl or Tk before) 450.73 560.33 P
(reading this book; both of them will be introduced from scratch.) 152.1 548.33 T
98.1 504.98 512.1 508 C
152.1 506.2 512.1 506.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 506.49 143.1 506.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(1.3) 124.63 512 T
(Notation) 152.1 512 T
1 10 Q
(Throughout the book I use a) 152.1 488.31 T
3 F
(Courier) 267.58 488.31 T
1 F
( font for anything that might be typed to a com-) 309.55 488.31 T
(puter) 152.1 476.31 T
(, such as variable names, procedure and command names, T) 172.24 476.31 T
(cl scripts, and C code.) 411.35 476.31 T
(The examples of T) 152.1 464.31 T
(cl scripts use notation like the following:) 226.62 464.31 T
3 9 Q
(set a 44) 179.1 449.98 T
6 F
(\336) 162.9 436.98 T
7 F
(44) 179.1 436.98 T
1 10 Q
(T) 152.1 423.31 T
(cl commands such as \322) 157.51 423.31 T
3 F
(set a 44) 249.11 423.31 T
1 F
(\323 is the example appear in Courier and their results,) 297.08 423.31 T
(such as \322) 152.1 411.31 T
7 F
(44) 188.18 411.31 T
1 F
(\323 in the example, appear in Courier oblique. The) 200.17 411.31 T
6 F
(\336) 396.42 411.31 T
1 F
( symbol before the result) 406.28 411.31 T
(indicates that this is a normal return value. If an error occurs in a T) 152.1 399.31 T
(cl command then the) 418.69 399.31 T
(error message appears in Courier oblique, preceded by a) 152.1 387.31 T
6 F
(\306) 379.68 387.31 T
1 F
( symbol to indicate that this is) 387.91 387.31 T
(an error rather than a normal return) 152.1 375.31 T
6 F
(:) 293.08 375.31 T
3 9 Q
(set a 44 55) 179.1 360.98 T
6 F
(\306) 162.9 347.98 T
7 F
(wrong # args: should be "set varName ?newValue?") 179.1 347.98 T
1 10 Q
(When describing the syntax of T) 170.1 334.31 T
(cl commands, Courier oblique is used for formal) 300.14 334.31 T
(ar) 152.1 322.31 T
(gument names. If an ar) 159.69 322.31 T
(gument or group of ar) 251.38 322.31 T
(guments is enclosed in question marks it) 338.91 322.31 T
-0.2 (means that the ar) 152.1 310.31 P
-0.2 (guments are optional. For example, the syntax of the) 219.34 310.31 P
3 F
-0.47 (set) 430.49 310.31 P
1 F
-0.2 ( command is as) 448.48 310.31 P
(follows:) 152.1 298.31 T
3 9 Q
(set) 179.1 283.98 T
7 F
(varName) 200.67 283.98 T
1 10 Q
(?) 243.81 283.98 T
7 9 Q
(newValue) 248.25 283.98 T
1 10 Q
(?) 291.39 283.98 T
(This means that the word) 152.1 270.31 T
3 F
(set) 255.64 270.31 T
1 F
( would be entered verbatim to invoke the command, while) 273.63 270.31 T
7 F
(varName) 152.1 258.31 T
1 F
( and) 194.08 258.31 T
7 F
(newValue) 213.51 258.31 T
1 F
( are the names of) 261.48 258.31 T
3 F
(set) 332.25 258.31 T
1 F
(\325) 350.24 258.31 T
(s ar) 353.02 258.31 T
(guments; when invoking the com-) 366.99 258.31 T
(mand you would type a variable name instead of) 152.1 246.31 T
7 F
(varName) 348.9 246.31 T
1 F
( and a new value for the vari-) 390.88 246.31 T
(able instead of) 152.1 234.31 T
7 F
(newValue) 212.89 234.31 T
1 F
(. The) 260.86 234.31 T
7 F
(newValue) 283.9 234.31 T
1 F
( ar) 331.87 234.31 T
(gument is optional.) 341.96 234.31 T
FMENDPAGE
%%EndPage: "4" 13
%%Page: "5" 13
612 792 0 FMBEGINPAGE
98.1 675 512.1 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
98.1 450 512.1 450 2 L
7 X
V
2 Z
0 X
N
98.1 108 512.1 126 R
7 X
V
4 10 Q
0 X
(5) 506.54 119.33 T
98.1 54 512.1 108 R
7 X
V
1 9 Q
0 X
(Copyright \251 1993 Addison-W) 152.1 102 T
(esley Publishing Company) 261.32 102 T
(, Inc.) 357.1 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 152.1 91 T
(. Any) 485.77 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 152.1 80 T
-0.34 (lisher) 152.1 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 171.58 69 P
(does not of) 152.1 58 T
(fer warranties in regard to this draft.) 191.88 58 T
0 24 Q
(Chapter 2) 152.1 605 T
-0.48 (An Overview of T) 152.1 575 S
-0.48 (cl and Tk) 325.43 575 S
98.1 135 512.1 423 R
7 X
V
1 10 Q
0 X
-0.01 (This chapter introduces T) 152.1 416.33 P
-0.01 (cl and Tk with a series of scripts that illustrate the main features) 253.79 416.33 P
(of the systems. Although you should be able to start writing simple scripts after reading) 152.1 403.87 T
(this chapter) 152.1 391.41 T
(, the explanations here are not intended to be complete. All of the information) 198.05 391.41 T
(in this chapter will be revisited in more detail in later chapters, and several important) 152.1 378.95 T
(aspects of the systems, such as their C interfaces, are not discussed at all in this chapter) 152.1 366.49 T
(.) 500.19 366.49 T
(The purpose of this chapter is to show you the overall structure of T) 152.1 354.04 T
(cl and Tk and the) 423.15 354.04 T
-0 (kinds of things they can do, so that when individual features are discussed in detail you\325ll) 152.1 341.58 P
(be able to see why they are useful.) 152.1 329.12 T
98.1 285.76 512.1 288.78 C
152.1 286.98 512.1 286.98 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 287.27 143.1 287.27 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(2.1) 124.63 292.78 T
(Getting started) 152.1 292.78 T
1 10 Q
-0.22 (In order to invoke T) 152.1 269.09 P
-0.22 (cl scripts you must run a T) 231 269.09 P
-0.22 (cl application. If T) 335.55 269.09 P
-0.22 (cl is installed on your sys-) 408.56 269.09 P
(tem then there should exist a simple T) 152.1 256.63 T
(cl shell application called) 303.81 256.63 T
3 F
(tclsh) 408.18 256.63 T
1 F
(, which you can) 438.16 256.63 T
(use to try out some of the examples in this chapter \050if T) 152.1 244.17 T
(cl has not been installed on your) 372.92 244.17 T
-0.11 (system then refer to Appendix A for information on how to obtain and install it\051. T) 152.1 231.71 P
-0.11 (ype the) 480.67 231.71 P
(command) 152.1 219.25 T
3 9 Q
(tclsh) 179.1 204.92 T
1 10 Q
-0.05 (to your shell to invoke) 152.1 191.25 P
3 F
-0.12 (tclsh) 244.3 191.25 P
1 F
-0.05 (;) 274.29 191.25 P
3 F
-0.12 (tclsh) 279.51 191.25 P
1 F
-0.05 ( will start up in interactive mode, reading T) 309.5 191.25 P
-0.05 (cl com-) 481.9 191.25 P
(mands from its standard input and passing them to the T) 152.1 178.79 T
(cl interpreter for evaluation. For) 376.27 178.79 T
(starters, type the following command to) 152.1 166.33 T
3 F
(tclsh) 313.94 166.33 T
1 F
(:) 343.92 166.33 T
3 9 Q
(expr 2 + 2) 179.1 152 T
3 10 Q
(Tclsh) 152.1 138.33 T
1 F
( will print the result \322) 182.08 138.33 T
3 F
(4) 267.87 138.33 T
1 F
(\323 and prompt you for another command.) 273.86 138.33 T
44.1 351 98.1 423 C
35.1 360 197.1 414 R
7 X
0 K
V
0 9 Q
0 X
(FIGURE  2) 35.1 408 T
(T) 35.1 387 T
(ABLE  2) 40.43 387 T
26.1 351 125.1 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "5" 14
%%Page: "6" 14
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(6) 98.1 668.33 T
5 F
(An Overview of T) 396.01 668.33 T
(cl and Tk) 471.55 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(This example illustrates several features of T) 170.1 632.33 T
(cl. First, T) 349.26 632.33 T
(cl commands are similar in) 390.21 632.33 T
(form to shell commands. Each command consists of one or more) 152.1 620.33 T
2 F
(wor) 414.15 620.33 T
(ds) 429.33 620.33 T
1 F
( separated by) 438.21 620.33 T
(spaces or tabs. In the example there are four words:) 152.1 608.33 T
3 F
(expr) 360.54 608.33 T
1 F
(,) 384.12 608.33 T
3 F
(2) 389.12 608.33 T
1 F
(,) 395.12 608.33 T
3 F
(+) 400.11 608.33 T
1 F
(, and) 406.11 608.33 T
3 F
(2) 428.04 608.33 T
1 F
(. The \336rst word of) 434.04 608.33 T
(each command is its name: the name selects a C procedure in the application that will) 152.1 596.33 T
(carry out the function of the command. The other words are) 152.1 584.33 T
2 F
(ar) 393.58 584.33 T
(guments) 402.09 584.33 T
1 F
( that are passed to) 435.4 584.33 T
(the C procedure.) 152.1 572.33 T
3 F
(Expr) 220.93 572.33 T
1 F
( is one of the core commands built into the T) 244.92 572.33 T
(cl interpreter) 423.55 572.33 T
(, so it) 474.49 572.33 T
-0.1 (exists in every T) 152.1 560.33 P
-0.1 (cl application. It concatenates its ar) 217.45 560.33 P
-0.1 (guments into a single string and evalu-) 357.78 560.33 P
(ates the string as an arithmetic expression.) 152.1 548.33 T
(Each T) 170.1 536.33 T
(cl command returns a result string. For the) 197.99 536.33 T
3 F
(expr) 370.37 536.33 T
1 F
( command the result is the) 394.36 536.33 T
(value of the expression. Results are always returned as strings, so) 152.1 524.33 T
3 F
(expr) 416.08 524.33 T
1 F
( converts its) 440.06 524.33 T
(numerical result back to a string in order to return it. If a command has no meaningful) 152.1 512.33 T
(result then it returns an empty string.) 152.1 500.33 T
(From now on I will use notation like the following to describe examples:) 170.1 488.33 T
3 9 Q
(expr 2 + 2) 179.1 474 T
6 F
(\336) 162.9 461 T
7 F
(4) 179.1 461 T
1 10 Q
(The \336rst line is the command you type and the second line is the result returned by the) 152.1 447.33 T
(command. The) 152.1 435.33 T
6 F
(\336) 214.56 435.33 T
1 F
( symbol indicates that the line contains a return value; the) 224.42 435.33 T
6 F
(\336) 457.32 435.33 T
1 F
( will not) 467.19 435.33 T
(actually be printed out by) 152.1 423.33 T
3 F
(tclsh) 256.75 423.33 T
1 F
(. I will omit return values in cases where they aren\325) 286.74 423.33 T
(t) 491.67 423.33 T
(important, such as sequences of commands where only the last command\325) 152.1 411.33 T
(s result matters.) 447.73 411.33 T
(Commands are normally terminated by newlines, so when you are typing to) 170.1 399.33 T
3 F
(tclsh) 475.73 399.33 T
1 F
(each line normally becomes a separate command. Semi-colons also act as command sepa-) 152.1 387.33 T
-0.14 (rators, in case you wish to enter multiple commands on a single line. It is also possible for) 152.1 375.33 P
(a single command to span multiple lines; you\325ll see how to do this later) 152.1 363.33 T
(.) 436.66 363.33 T
(The) 170.1 351.33 T
3 F
(expr) 188.14 351.33 T
1 F
( command supports an expression syntax similar to that of expressions in) 212.13 351.33 T
-0.1 (ANSI C, including the same precedence rules and most of the C operators. Here are a few) 152.1 339.33 P
(examples that you could type to) 152.1 327.33 T
3 F
(tclsh) 282.02 327.33 T
1 F
(:) 312 327.33 T
3 9 Q
(expr 3 << 2) 179.1 313 T
6 F
(\336) 162.9 300 T
7 F
(12) 179.1 300 T
3 F
(expr 14.1*6) 179.1 287 T
6 F
(\336) 162.9 274 T
7 F
(84.6) 179.1 274 T
3 F
(expr \0503 > 4\051 || \0506 <= 7\051) 179.1 261 T
6 F
(\336) 162.9 248 T
7 F
(1) 179.1 248 T
1 10 Q
-0.14 (The \336rst example illustrates the bitwise left-shift operator) 152.1 234.33 P
3 F
-0.32 (<<) 383.64 234.33 P
1 F
-0.14 (. The second example shows) 395.64 234.33 P
-0.06 (that expressions can contain real values as well as integer values. The last example shows) 152.1 222.33 P
(the use of relational operators) 152.1 210.33 T
3 F
(>) 273.39 210.33 T
1 F
( and) 279.39 210.33 T
3 F
(<=) 298.82 210.33 T
1 F
( and the logical or operator) 310.81 210.33 T
3 F
(||) 421.28 210.33 T
1 F
(. As in C, boolean) 433.27 210.33 T
(results are represented numerically with 1 for true and 0 for false.) 152.1 198.33 T
(T) 170.1 186.33 T
(o leave) 175.51 186.33 T
3 F
(tclsh) 206.59 186.33 T
1 F
(, invoke the) 236.57 186.33 T
3 F
(exit) 285.99 186.33 T
1 F
( command:) 309.97 186.33 T
3 9 Q
(exit) 179.1 172 T
1 10 Q
(This command will terminate the application and return you to your shell.) 152.1 158.33 T
FMENDPAGE
%%EndPage: "6" 15
%%Page: "7" 15
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(2.2 Hello world with Tk) 98.1 668.33 T
4 F
(7) 506.54 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 505.18 512.1 508.2 C
152.1 506.4 512.1 506.4 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 506.69 143.1 506.69 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(2.2) 124.63 512.2 T
(Hello world with Tk) 152.1 512.2 T
1 10 Q
(Although T) 152.1 488.51 T
(cl provides a full set of programming features such as variables, loops, and) 197.76 488.51 T
(procedures, it is not intended to be a stand-alone programming environment. T) 152.1 476.51 T
(cl is) 465.91 476.51 T
(intended to be used as part of applications that provide their own T) 152.1 464.51 T
(cl commands in addi-) 418.99 464.51 T
(tion to those in the T) 152.1 452.51 T
(cl core. The application-speci\336c commands provide interesting prim-) 234.41 452.51 T
(itives and T) 152.1 440.51 T
(cl is used to assemble the primitives into useful functions. T) 198.59 440.51 T
(cl by itself isn\325) 438.03 440.51 T
(t) 497.54 440.51 T
(very interesting and it is hard to motivate all of T) 152.1 428.51 T
(cl\325) 347.94 428.51 T
(s facilities until you have seen some) 357.94 428.51 T
(interesting application-speci\336c commands to use them with.) 152.1 416.51 T
-0.31 (Tk provides a particularly interesting set of commands to use with T) 170.1 404.51 P
-0.31 (cl\325) 439.43 404.51 P
-0.31 (s programming) 449.42 404.51 P
-0.17 (tools. Most of the examples in the book will use an application called) 152.1 392.51 P
3 F
-0.4 (wish) 429.76 392.51 P
1 F
-0.17 (, which is sim-) 453.74 392.51 P
(ilar to) 152.1 380.51 T
3 F
(tclsh) 178.2 380.51 T
1 F
( except that it also includes the commands de\336ned by Tk. Tk\325) 208.18 380.51 T
(s commands) 454.13 380.51 T
(allow you to create graphical user interfaces. If T) 152.1 368.51 T
(cl and Tk have been installed on your) 348.17 368.51 T
-0.14 (system then you can invoke) 152.1 356.51 P
3 F
-0.34 (wish) 264.93 356.51 P
1 F
-0.14 ( from your shell just like) 288.92 356.51 P
3 F
-0.34 (tclsh) 389.12 356.51 P
1 F
-0.14 (; it will display a small) 419.1 356.51 P
(empty window on your screen and then read commands from standard input. Here is a) 152.1 344.51 T
(simple) 152.1 332.51 T
3 F
(wish) 181.25 332.51 T
1 F
( script:) 205.24 332.51 T
3 9 Q
(button .b -text "Hello, world!" -command exit) 179.1 318.18 T
(pack .b) 179.1 308.18 T
1 10 Q
(If you type these two T) 152.1 294.51 T
(cl commands to) 244.39 294.51 T
3 F
(wish) 310.18 294.51 T
1 F
( the window\325) 334.17 294.51 T
(s appearance will change to) 386.36 294.51 T
(what is shown in Figure 2.1. If you then move the pointer over the window and click) 152.1 282.51 T
(mouse button 1, the window will disappear and) 152.1 270.51 T
3 F
(wish) 343.92 270.51 T
1 F
( will exit.) 367.91 270.51 T
(There are several things to explain about this example. First let us deal with the syn-) 170.1 258.51 T
(tactic issues. The example contains two commands,) 152.1 246.51 T
3 F
(button) 361.12 246.51 T
1 F
( and) 397.11 246.51 T
3 F
(pack) 416.54 246.51 T
1 F
(, both of which) 440.52 246.51 T
(are implemented by Tk. Although these commands look dif) 152.1 234.51 T
(ferent than the) 390.38 234.51 T
3 F
(expr) 450.61 234.51 T
1 F
( com-) 474.59 234.51 T
(mand in the previous section, they have the same basic structure as all T) 152.1 222.51 T
(cl commands,) 440.08 222.51 T
(consisting of one or more words separated by white space. The) 152.1 210.51 T
3 F
(button) 406.35 210.51 T
1 F
( command con-) 442.33 210.51 T
(tains six words and the pack command contains two words.) 152.1 198.51 T
(The fourth word of the) 170.1 186.51 T
3 F
(button) 263.64 186.51 T
1 F
( command is enclosed in double quotes. This allows) 299.62 186.51 T
-0.24 (the word to include white space characters: without the quotes \322) 152.1 174.51 P
3 F
-0.58 (Hello,) 405.62 174.51 P
1 F
-0.24 (\323 and \322) 441.6 174.51 P
3 F
-0.58 (world!) 469.42 174.51 P
1 F
-0.24 (\323) 505.4 174.51 P
(would be separate words. The double-quotes are not part of the word itself; they are) 152.1 162.51 T
(removed by the T) 152.1 150.51 T
(cl interpreter before the word is passed to the command as an ar) 222.18 150.51 T
(gument.) 477.35 150.51 T
98.1 135 512.1 639 C
98.1 520.2 512.1 639 C
98.1 574.2 512.1 588.6 C
98.1 574.2 512.1 588.6 R
7 X
0 K
V
152.1 582.12 512.1 582.12 2 L
V
0.5 H
2 Z
0 X
N
98.1 520.2 512.1 639 C
0 9 Q
0 X
0 K
-0.27 (Figur) 152.1 568.2 P
-0.27 (e  2.1.) 173.41 568.2 P
1 F
-0.27 (The \322hello world\323 application. All of the decorations around the \322Hello, world!\323 button) 198.8 568.2 P
(are provided by the) 152.1 559.2 T
3 F
(mwm) 223.98 559.2 T
1 F
( window manager) 240.16 559.2 T
(. If you use a dif) 304.06 559.2 T
(ferent window manager then your) 362.8 559.2 T
98.1 532.8 512.1 547.2 C
98.1 532.8 512.1 547.2 R
7 X
0 K
V
152.1 540.72 512.1 540.72 2 L
V
0.5 H
2 Z
0 X
N
98.1 520.2 512.1 639 C
1 9 Q
0 X
0 K
(decorations may be dif) 152.1 550.2 T
(ferent.) 234.06 550.2 T
0 0 0 98 57 58.8 34.2 302.7 597.6 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 0 0 98 57
%%Creator: xgrabsc
%%Title: introF1
%%CreationDate: Fri Jul 23 11:07:11 1993
%%EndComments
%
%
%%EndProlog
%%Page: 1 1
/inch {72 mul} def
/rlebuffer 2 string def
/samples 256 string def
/plotimage
{98 57 8 [98 0 0 -57 0 57]
% run-length decoding block
  { currentfile rlebuffer readhexstring pop pop
    rlebuffer 0 get 1 add       %% number of copies of the sample
    /nsamples exch store        %% save it away
    /lum rlebuffer 1 get store  %% the sample itself
    0 1 nsamples 1 sub { samples exch lum put } for
    samples 0 nsamples getinterval %% leave the pixels on the stack
  }
  image
} def
gsave
98 57 scale
plotimage
7afa00832cfa008318fa008301fa16da008300fa2bda008300fa16da0183
01fa16da008300fa2bda008300fa16da018301fa16da008300fa2bda0083
00fa16da018301fa16da008300fa2bda008300fa16da018301fa16da0083
00fa2bda008300fa16da018301fa04da128300fa2c8300fa118304da0183
01fa04da008352fa04da018301fa04da008300fa0fda008300fa19da0083
00fa0fda008300fa0fda008300fa04da018301fa04da008300fa0fda0083
00fa19da008300fa0fda008300fa0fda008300fa04da018301fa04da0083
00fa0fda008300fa19da008300fa0fda008300fa0fda008300fa04da0183
01fa04da008300fa0fda008300fa00da01000bda010000da010005da0083
00fa0fda008300fa02da09fa02da008300fa04da018301fa04da008300fa
0fda008300fa00da01000bda010000da010005da008300fa0fda008300fa
02da00fa07da008302da008300fa04da018301fa04da008300fa0fda0083
00fa00da010000da010002da030001da010000da010001da020000da0083
00fa0fda008300fa02da00fa07da008302da008300fa04da018301fa04da
008300fa02da09fa02da008300fa00da020000da010000da010001da0100
00da010000da010000da010002da008300fa05da03fa05da008300fa02da
00fa07da008302da008300fa04da018301fa04da008300fa02da00fa07da
008302da008300fa00da010001da010000da010001da010000da010000da
010000da010002da008300fa05da00fa01da008305da008300fa02da00fa
07da008302da008300fa04da018301fa04da008300fa02da00fa07da0083
02da008300fa00da010001da010000da050000da010000da010000da0100
02da008300fa05da00fa01da008305da008300fa02da00fa07da008302da
008300fa04da018300fa068300fa02da00fa088302da008300fa00da0100
01da010000da010004da010000da010000da010002da008300fa05da00fa
028305da008300fa02da00fa07da008302da008300fa068308fa0fda0083
00fa00da010001da010000da010001da010000da010000da010000da0100
02da008300fa0fda008300fa02da00fa07da008302da008306fa008301fa
04da008300fa0fda008300fa00da010001da010001da030001da010000da
010001da020000da008300fa0fda008300fa02da00fa07da008302da0083
00fa04da018301fa04da008300fa0fda008300fa19da008300fa0fda0083
00fa02da00fa088302da008300fa04da018301fa04da008300fa0fda0083
00fa19da008300fa0fda008300fa0fda008300fa04da018301fa04da0083
00fa0fda008300fa19da008300fa0fda008300fa0fda008300fa04da0183
01fa04da008300fa108300fa1a8300fa108300fa108300fa04da018301fa
04da528300fa04da018301fa04da01834fff01fa04da018301fa04da0183
4eff008c01fa04da018301fa04da018301ff4be9018c01fa04da018301fa
04da018301ff4be9018c01fa04da018301fa04da018301ff4be9018c01fa
04da018301fa04da018301ff00e9010002e9010007e9010000e9010026e9
010004e9010001e9010002e9018c01fa04da018301fa04da018301ff00e9
010002e9010007e9010000e9010026e9010004e9010001e9010002e9018c
01fa04da018301fa04da018301ff00e9010002e9010001e9030001e90100
00e9010001e9030009e9010001e9010001e9010001e9030001e9010000e9
030001e9010000e9010001e9010002e9018c01fa04da018301fa04da0183
01ff00e9010002e9010000e9010001e9010000e9010000e9010000e90100
01e9010008e9010001e9010001e9010000e9010001e9010000e9060000e9
010000e9020001e9010002e9018c01fa04da018301fa04da018301ff00e9
060000e9010001e9010000e9010000e9010000e9010001e9010009e90100
00e9010000e9010001e9010001e9010000e9020001e9010000e9010001e9
010001e9010002e9018c01fa04da018301fa04da018301ff00e9010002e9
010000e9050000e9010000e9010000e9010001e9010009e9010000e90100
00e9010001e9010001e9010000e9010002e9010000e9010001e9010001e9
000003e9018c01fa04da018300fa078301ff00e9010002e9010000e90100
04e9010000e9010000e9010001e9010009e9010000e9010000e9010001e9
010001e9010000e9010002e9010000e9010001e9010006e9018c01fa0683
07fa008301ff00e9010002e9010000e9010001e9010000e9010000e90100
00e9010001e9010001e9010006e9010001e9010002e9010001e9010000e9
010002e9010000e9010000e9020001e9010002e9018c07fa008301fa04da
018301ff00e9010002e9010001e9030001e9010000e9010001e9030002e9
010006e9010001e9010003e9030001e9010002e9010001e9010000e90100
01e9010002e9018c01fa04da018301fa04da018301ff1ee900002be9018c
01fa04da018301fa04da018301ff1de900002ce9018c01fa04da018301fa
04da018301ff4be9018c01fa04da018301fa04da018301ff4be9018c01fa
04da018301fa04da018301ff4be9018c01fa04da018301fa04da018301ff
4be9018c01fa04da018301fa04da018301ff4d8c01fa04da018301fa04da
018300ff4e8c01fa04da018301fa04da018351fa04da018301fa04da0083
52fa04da018301fa16da008300fa2bda008300fa16da018301fa16da0083
00fa2bda008300fa16da018301fa16da008300fa2bda008300fa16da0183
01fa16da008300fa2bda008300fa16da018301fa16da008300fa2bda0083
00fa16da018301fa178300fa2c8300fa188300fa6083

%
% Run-length encoding savings =  63.1%
%



grestore
showpage

%%EndDocument
FMENDEPSF
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "7" 16
%%Page: "8" 16
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(8) 98.1 668.33 T
5 F
(An Overview of T) 396.01 668.33 T
(cl and Tk) 471.55 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
-0.05 (For the) 170.1 632.33 P
3 F
-0.11 (expr) 201.1 632.33 P
1 F
-0.05 ( command the word structure doesn\325) 225.08 632.33 P
-0.05 (t matter much since) 370.95 632.33 P
3 F
-0.11 (expr) 451.81 632.33 P
1 F
-0.05 ( concate-) 475.8 632.33 P
(nates all its ar) 152.1 620.33 T
(guments together) 207.16 620.33 T
(. However for the) 275.73 620.33 T
3 F
(button) 348.72 620.33 T
1 F
( and) 384.7 620.33 T
3 F
(pack) 404.13 620.33 T
1 F
( commands, and for) 428.12 620.33 T
(most T) 152.1 608.33 T
(cl commands, the word structure is important. The) 179.45 608.33 T
3 F
(button) 383.75 608.33 T
1 F
( command expects its) 419.73 608.33 T
(\336rst ar) 152.1 596.33 T
(gument to be the name of a window and the following ar) 177.74 596.33 T
(guments to come in pairs,) 404.34 596.33 T
-0.09 (where the \336rst ar) 152.1 584.33 P
-0.09 (gument of each pair is the name of a) 219.1 584.33 P
2 F
-0.09 (con\336guration option) 366.24 584.33 P
1 F
-0.09 ( and the second) 448.06 584.33 P
(ar) 152.1 572.33 T
(gument is a value for that option. Thus if the double-quotes were omitted the value of) 159.69 572.33 T
-0.18 (the) 152.1 560.33 P
3 F
-0.43 (-text) 166.63 560.33 P
1 F
-0.18 ( option would be \322) 196.62 560.33 P
3 F
-0.43 (Hello,) 270.3 560.33 P
1 F
-0.18 (\323 and \322) 306.28 560.33 P
3 F
-0.43 (world!) 334.23 560.33 P
1 F
-0.18 (\323 would be treated as the name of a) 370.21 560.33 P
(separate con\336guration option. Since there is no option de\336ned with the name \322) 152.1 548.33 T
3 F
(world!) 466.06 548.33 T
1 F
(\323) 502.04 548.33 T
(the command would return an error) 152.1 536.33 T
(.) 293.38 536.33 T
(Now let us move on to the behavior of the commands. The basic building block for a) 170.1 524.33 T
(graphical user interface in Tk is a) 152.1 512.33 T
2 F
(widget) 288.38 512.33 T
1 F
(. A widget is a window with a particular appear-) 315.03 512.33 T
-0.25 (ance and behavior \050the terms \322widget\323 and \322window\323 are used synonymously in Tk\051. W) 152.1 500.33 P
-0.25 (id-) 501 500.33 P
-0.04 (gets are divided into classes such as buttons, menus, and scrollbars. All the widgets in the) 152.1 488.33 P
(same class have the same general appearance and behavior) 152.1 476.33 T
(. For example, all button wid-) 386.89 476.33 T
(gets display a text string or bitmap and execute a particular T) 152.1 464.33 T
(cl command when they are) 395.95 464.33 T
(invoked with the mouse.) 152.1 452.33 T
(W) 170.1 440.33 T
(idgets are or) 179.13 440.33 T
(ganized hierarchically in Tk, with names that re\337ect their position in) 228.36 440.33 T
-0.35 (the hierarchy) 152.1 428.33 P
-0.35 (. The) 203.55 428.33 P
2 F
-0.35 (main widget) 225.88 428.33 P
1 F
-0.35 (, which appeared on the screen when you started) 274.67 428.33 P
3 F
-0.85 (wish) 468 428.33 P
1 F
-0.35 (, has) 491.99 428.33 P
(the name \322.\323. The name) 152.1 416.33 T
3 F
(.b) 249.52 416.33 T
1 F
( refers to a child of the main widget. W) 261.51 416.33 T
(idget names in Tk are) 418.21 416.33 T
(like \336le names in UNIX except that they use \322) 152.1 404.33 T
3 F
(.) 336.69 404.33 T
1 F
(\323 as a separator character instead of \322) 342.68 404.33 T
3 F
(/) 491.7 404.33 T
1 F
(\323.) 497.7 404.33 T
-0.2 (Thus) 152.1 392.33 P
3 F
-0.47 (.a.b.c) 174.39 392.33 P
1 F
-0.2 ( refers to a widget that is a child of widget) 210.37 392.33 P
3 F
-0.47 (.a.b) 379.48 392.33 P
1 F
-0.2 (, which in turn is a child of) 403.46 392.33 P
3 F
(.a) 152.1 380.33 T
1 F
(, which is a child of the main widget.) 164.09 380.33 T
-0.02 (Tk provides one command for each class of widgets, which you invoke to create wid-) 170.1 368.33 P
(gets of that class. For example the) 152.1 356.33 T
3 F
(button) 290.89 356.33 T
1 F
( command creates button widgets. All of the) 326.87 356.33 T
(widget creation commands have the same form: the \336rst ar) 152.1 344.33 T
(gument is the name of a new) 386.47 344.33 T
(widget to create and additional ar) 152.1 332.33 T
(guments specify con\336guration options. Dif) 285.43 332.33 T
(ferent widget) 456.53 332.33 T
(classes support dif) 152.1 320.33 T
(ferent sets of options. W) 225.76 320.33 T
(idgets typically have many options \050there are) 323.35 320.33 T
(about 20 dif) 152.1 308.33 T
(ferent options de\336ned for buttons, for example\051, and default values are pro-) 200.22 308.33 T
(vided for the options that you don\325) 152.1 296.33 T
(t specify) 290.72 296.33 T
(. When a widget creation command like) 324.21 296.33 T
3 F
(but-) 486.32 296.33 T
(ton) 152.1 284.33 T
1 F
( is invoked it creates a new window by the given name and con\336gures it as speci\336ed) 170.09 284.33 T
(by the options.) 152.1 272.33 T
(The) 170.1 260.33 T
3 F
(button) 188.14 260.33 T
1 F
( command in the example speci\336es two options:) 224.12 260.33 T
3 F
(-text) 419 260.33 T
1 F
(, which is a) 448.99 260.33 T
(string to display in the button, and) 152.1 248.33 T
3 F
(-command) 291.47 248.33 T
1 F
(, which is a T) 339.45 248.33 T
(cl script to execute when the) 392.88 248.33 T
(user invokes the button. In this example the) 152.1 236.33 T
3 F
(-command) 328.93 236.33 T
1 F
( option is) 376.91 236.33 T
3 F
(exit) 416.61 236.33 T
1 F
(. Here are a few) 440.6 236.33 T
(other button options that you can experiment with:) 152.1 224.33 T
3 F
(-background) 179.1 209.33 T
1 F
(The background color for the button.) 251.1 209.33 T
3 F
(-foreground) 179.1 196.33 T
1 F
(The color of the text in the button.) 251.1 196.33 T
3 F
(-font) 179.1 183.33 T
1 F
(The name of the font to use for the button, such as) 251.1 183.33 T
3 F
(*-) 251.1 173.33 T
(times-) 263.09 173.33 T
(medium-r-normal--*-120-*) 299.07 173.33 T
1 F
( for a 12-point) 442.99 173.33 T
(T) 251.1 163.33 T
(imes Roman font.) 256.86 163.33 T
FMENDPAGE
%%EndPage: "8" 17
%%Page: "9" 17
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(2.3 Script \336les) 98.1 668.33 T
4 F
(9) 506.54 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
-0.38 (The) 170.1 632.33 P
3 F
-0.92 (pack) 187.76 632.33 P
1 F
-0.38 ( command makes the button widget appear on the screen. Creating a widget) 211.74 632.33 P
-0.09 (does not automatically cause it to be displayed. Independent entities called) 152.1 620.33 P
2 F
-0.09 (geometry man-) 451.97 620.33 P
(agers) 152.1 608.33 T
1 F
( are responsible for computing the sizes and locations of widgets and making them) 174.31 608.33 T
-0.32 (appear on the screen. The) 152.1 596.33 P
3 F
-0.77 (pack) 255.4 596.33 P
1 F
-0.32 ( command in the example asks a geometry manager called) 279.38 596.33 P
(the) 152.1 584.33 T
2 F
(packer) 166.81 584.33 T
1 F
( to manage) 194.01 584.33 T
3 F
(.b) 240.36 584.33 T
1 F
(. The command asks that) 252.35 584.33 T
3 F
(.b) 354.51 584.33 T
1 F
( \336ll the entire area of its parent win-) 366.5 584.33 T
-0.25 (dow; furthermore, if the parent has more space than needed by its child, as in the example,) 152.1 572.33 P
(the parent is shrunk so that it is just lar) 152.1 560.33 T
(ge enough to hold the child. Thus when you typed) 306.55 560.33 T
-0.23 (the) 152.1 548.33 P
3 F
-0.56 (pack) 166.58 548.33 P
1 F
-0.23 ( command the main window shrunk from its original size to the size that appears) 190.56 548.33 P
(in Figure 2.1.) 152.1 536.33 T
98.1 492.98 512.1 496 C
152.1 494.2 512.1 494.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 494.49 143.1 494.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(2.3) 124.63 500 T
(Script \336les) 152.1 500 T
1 10 Q
(In the examples so far you have typed T) 152.1 476.31 T
(cl commands interactively to) 311.83 476.31 T
3 F
(tclsh) 430.09 476.31 T
1 F
( or) 460.07 476.31 T
3 F
(wish) 473.39 476.31 T
1 F
(.) 497.38 476.31 T
(Y) 152.1 464.31 T
(ou can also place commands into script \336les and invoke the script \336les just like shell) 158.32 464.31 T
(scripts. T) 152.1 452.31 T
(o do this for the hello world example, place the following text in a \336le named) 188.6 452.31 T
3 F
(hello) 152.1 440.31 T
1 F
(:) 182.08 440.31 T
3 9 Q
(#!/usr/local/bin/wish -f) 179.1 425.98 T
(button .b -text "Hello, world!" -command exit) 179.1 415.98 T
(pack .b) 179.1 405.98 T
1 10 Q
-0.23 (This script is the same as the one you typed earlier except for the \336rst line. As far as) 152.1 392.31 P
3 F
-0.55 (wish) 485.84 392.31 P
1 F
(is concerned this line is a comment but if you make the \336le executable \050type) 152.1 380.31 T
(\322) 152.1 368.31 T
3 F
(chmod) 156.54 368.31 T
(775) 192.52 368.31 T
(hello) 216.51 368.31 T
1 F
(\323 to your shell, for example\051 you can then invoke the \336le directly) 246.49 368.31 T
-0.21 (by typing) 152.1 356.31 P
3 F
-0.5 (hello) 192.22 356.31 P
1 F
-0.21 ( to your shell. When you do this the system will invoke) 222.21 356.31 P
3 F
-0.5 (wish) 443.2 356.31 P
1 F
-0.21 (, passing it) 467.19 356.31 P
(the \336le as a script to interpret.) 152.1 344.31 T
3 F
(Wish) 273.68 344.31 T
1 F
( will display the same window shown in Figure 2.1) 297.67 344.31 T
(and wait for you to interact with it. In this case you will not be able to type commands) 152.1 332.31 T
(interactively to wish; all you can do is click on the button.) 152.1 320.31 T
2 F
(Note:) 119.09 305.31 T
(This script will only work if) 152.1 305.31 T
7 F
(wish) 264.84 305.31 T
2 F
( is installed in) 288.83 305.31 T
7 F
(/usr/local/bin) 347.69 305.31 T
2 F
(. If) 431.65 305.31 T
7 F
(wish) 445.25 305.31 T
2 F
( has been) 469.24 305.31 T
(installed somewher) 152.1 295.31 T
(e else then you\325ll need to change the \336rst line to r) 229.19 295.31 T
(e\337ect its location on) 426.74 295.31 T
(your system.) 152.1 285.31 T
1 F
(In practice users of Tk applications rarely type T) 170.1 272.31 T
(cl commands; they interact with the) 364.24 272.31 T
-0.02 (applications using the mouse and keyboard in the usual ways you would expect for graph-) 152.1 260.31 P
(ical applications. T) 152.1 248.31 T
(cl works behind the scenes where users don\325) 227.74 248.31 T
(t normally see it. The) 405.47 248.31 T
3 F
-0.4 (hello) 152.1 236.31 P
1 F
-0.17 ( script behaves just the same as an application that has been coded in C with a tool-) 182.08 236.31 P
(kit such as Motif and compiled into a binary executable \336le.) 152.1 224.31 T
(During debugging, though, it is common for application developers to type T) 170.1 212.31 T
(cl com-) 477.82 212.31 T
(mands interactively) 152.1 200.31 T
(. For example, you could test out the) 230.01 200.31 T
3 F
(hello) 378.8 200.31 T
1 F
( script by starting) 408.79 200.31 T
3 F
(wish) 480.97 200.31 T
1 F
(interactively \050type) 152.1 188.31 T
3 F
(wish) 227.6 188.31 T
1 F
( to your shell instead of) 251.59 188.31 T
3 F
(hello) 348.19 188.31 T
1 F
(\051. Then type the following T) 378.18 188.31 T
(cl) 490.73 188.31 T
(command:) 152.1 176.31 T
3 9 Q
(source hello) 179.1 161.98 T
FMENDPAGE
%%EndPage: "9" 18
%%Page: "10" 18
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(10) 98.1 668.33 T
5 F
(An Overview of T) 396.01 668.33 T
(cl and Tk) 471.55 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 10 Q
0 X
(Source) 152.1 632.33 T
1 F
( is a T) 188.08 632.33 T
(cl command that takes a \336le name as ar) 212.09 632.33 T
(gument. It reads the \336le and evalu-) 369.01 632.33 T
(ates it as a T) 152.1 620.33 T
(cl script. This will generate the same user interface as if you had invoked) 201.36 620.33 T
3 F
(hello) 152.1 608.33 T
1 F
( directly from your shell, but you can now type T) 182.08 608.33 T
(cl commands interactively too.) 378.2 608.33 T
(For example, you could edit the script \336le to change the) 152.1 596.33 T
3 F
(-command) 377.51 596.33 T
1 F
( option to) 425.48 596.33 T
3 9 Q
(-command "puts Good-bye!; exit") 179.1 582 T
1 10 Q
(then type the following commands interactively to) 152.1 568.33 T
3 F
(wish) 356.14 568.33 T
1 F
( without restarting the program:) 380.12 568.33 T
3 9 Q
(destroy .b) 179.1 554 T
(source hello) 179.1 544 T
1 10 Q
(The \336rst command will delete the existing button and the second command will recreate) 152.1 530.33 T
(the button with the new) 152.1 518.33 T
3 F
(-command) 248.99 518.33 T
1 F
( option. Now when you click on the button the) 296.96 518.33 T
3 F
(puts) 485.46 518.33 T
1 F
(command will print a message on standard output before) 152.1 506.33 T
3 F
(wish) 381.66 506.33 T
1 F
( exits.) 405.65 506.33 T
98.1 462.98 512.1 466 C
152.1 464.2 512.1 464.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 464.49 143.1 464.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(2.4) 124.63 470 T
(V) 152.1 470 T
(ariables and substitutions) 159.44 470 T
1 10 Q
(T) 152.1 446.31 T
(cl allows you to store values in variables and use those values in commands. For exam-) 157.51 446.31 T
(ple, consider the following script, which you could type to either) 152.1 434.31 T
3 F
(tclsh) 413.32 434.31 T
1 F
( or) 443.3 434.31 T
3 F
(wish) 456.62 434.31 T
1 F
(:) 480.61 434.31 T
3 9 Q
(set a 44) 179.1 419.98 T
6 F
(\336) 162.9 406.98 T
7 F
(44) 179.1 406.98 T
3 F
(expr $a*4) 179.1 393.98 T
6 F
(\336) 162.9 380.98 T
7 F
(176) 179.1 380.98 T
1 10 Q
-0.36 (The \336rst command assigns the value \322) 152.1 367.31 P
3 F
-0.87 (44) 302.61 367.31 P
1 F
-0.36 (\323 to variable) 314.6 367.31 P
3 F
-0.87 (a) 365.42 367.31 P
1 F
-0.36 ( and returns the variable\325) 371.41 367.31 P
-0.36 (s value. In) 469.33 367.31 P
(the secon command t he) 152.1 355.31 T
3 F
($) 251.2 355.31 T
1 F
( causes T) 257.19 355.31 T
(cl to perform) 293.68 355.31 T
2 F
(variable substitution) 348.36 355.31 T
1 F
(: the T) 430.83 355.31 T
(cl interpreter) 456.22 355.31 T
(replaces the dollar) 152.1 343.31 T
(-sign and the variable name following it with the value of the variable,) 225.17 343.31 T
(so that the actual ar) 152.1 331.31 T
(gument received by) 229.64 331.31 T
3 F
(expr) 310.96 331.31 T
1 F
( is \322) 334.95 331.31 T
3 F
(44*4) 351.05 331.31 T
1 F
(\323. V) 375.04 331.31 T
(ariables need not be declared) 390.58 331.31 T
(in T) 152.1 319.31 T
(cl; they are created automatically when assigned to. V) 167.78 319.31 T
(ariable values are stored as) 382.89 319.31 T
-0.16 (strings and arbitrary string values of any length are allowed. Of course, in this example an) 152.1 307.31 P
-0.14 (error will occur in) 152.1 295.31 P
3 F
-0.33 (expr) 226.49 295.31 P
1 F
-0.14 ( if the value of) 250.48 295.31 P
3 F
-0.33 (a) 310.58 295.31 P
1 F
-0.14 ( doesn\325) 316.58 295.31 P
-0.14 (t make sense as an integer or real number) 345.41 295.31 P
(\050try other values and see what happens\051.) 152.1 283.31 T
(T) 170.1 271.31 T
(cl also provides) 175.51 271.31 T
2 F
(command substitution) 240.74 271.31 T
1 F
(, which allows you to use the result of one) 328.75 271.31 T
(command in an ar) 152.1 259.31 T
(gument to another command:) 223.81 259.31 T
3 9 Q
(set a 44) 179.1 244.98 T
(set b [expr $a*4]) 179.1 234.98 T
6 F
(\336) 162.9 221.98 T
7 F
(176) 179.1 221.98 T
1 10 Q
-0.16 (Square brackets invoke command substitution: everything inside the brackets is evaluated) 152.1 208.31 P
(as a separate T) 152.1 196.31 T
(cl script and the result of that script is substituted into the word in place of) 210.51 196.31 T
-0.38 (the bracketed command. In this example the second ar) 152.1 184.31 P
-0.38 (gument of the second command will) 366.17 184.31 P
(be \322) 152.1 172.31 T
3 F
(176) 168.47 172.31 T
1 F
(\323.) 186.46 172.31 T
FMENDPAGE
%%EndPage: "10" 19
%%Page: "11" 19
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(2.5 Control structures) 98.1 668.33 T
4 F
(1) 501.54 668.33 T
(1) 506.54 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 623.98 512.1 627 C
152.1 625.2 512.1 625.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 625.49 143.1 625.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(2.5) 124.63 631 T
(Control structures) 152.1 631 T
1 10 Q
(The next example uses variables and substitutions along with some simple control struc-) 152.1 607.31 T
(tures to create a T) 152.1 595.31 T
(cl procedure) 223 595.31 T
3 F
(power) 275.17 595.31 T
1 F
( that raises a base to an integer power:) 305.16 595.31 T
3 9 Q
(proc power {base p} {) 179.1 580.98 T
(set result 1) 200.63 570.98 T
(while {$p > 0} {) 200.63 560.98 T
(set result [expr $result*$base]) 222.23 550.98 T
(set p [expr $p-1]) 222.23 540.98 T
(}) 200.63 530.98 T
(return $result) 200.63 520.98 T
(}) 179.1 510.98 T
1 10 Q
(If you type the above lines to) 152.1 497.31 T
3 F
(wish) 271.18 497.31 T
1 F
( or) 295.17 497.31 T
3 F
(tclsh) 308.49 497.31 T
1 F
(, or if you enter them into a \336le and then) 338.48 497.31 T
3 F
-0.8 (source) 152.1 485.31 P
1 F
-0.33 ( the \336le, a new command) 188.08 485.31 P
3 F
-0.8 (power) 289.08 485.31 P
1 F
-0.33 ( will become available. The command takes two) 319.06 485.31 P
(ar) 152.1 473.31 T
(guments, a number and an integer power) 159.69 473.31 T
(, and its result is the number raised to the) 322.22 473.31 T
(power:) 152.1 461.31 T
3 9 Q
(power 2 6) 179.1 446.98 T
6 F
(\336) 162.9 433.98 T
7 F
(64) 179.1 433.98 T
3 F
(power 1.15 5) 179.1 420.98 T
6 F
(\336) 162.9 407.98 T
7 F
(2.01136) 179.1 407.98 T
1 10 Q
(This example uses one additional piece of T) 170.1 394.31 T
(cl syntax: braces. Braces are like double-) 345.66 394.31 T
-0.16 (quotes in that they can be placed around a word that contains embedded spaces. However) 152.1 382.31 P
-0.16 (,) 507.26 382.31 P
(braces are dif) 152.1 370.31 T
(ferent from double-quotes in two respects. First, braces nest. The last word) 205.75 370.31 T
(of the) 152.1 358.31 T
3 F
(proc) 177.64 358.31 T
1 F
( command starts after the open brace on the \336rst line and contains everything) 201.62 358.31 T
(up to the close brace on the last line. The T) 152.1 346.31 T
(cl interpreter removes the outer braces and) 323.78 346.31 T
(passes everything between them, including several nested pairs of braces, to) 152.1 334.31 T
3 F
(proc) 458.81 334.31 T
1 F
( as an) 482.8 334.31 T
(ar) 152.1 322.31 T
(gument. The second dif) 159.69 322.31 T
(ference between braces and double-quotes is that no substitu-) 253.88 322.31 T
-0.19 (tions occur inside braces, whereas they do inside quotes. All of the characters between the) 152.1 310.31 P
(braces are passed verbatim to) 152.1 298.31 T
3 F
(proc) 272.27 298.31 T
1 F
( without any special processing.) 296.26 298.31 T
(The) 170.1 286.31 T
3 F
(proc) 188.14 286.31 T
1 F
( command takes three ar) 212.13 286.31 T
(guments: the name of a procedure, a list of ar) 309.64 286.31 T
(gu-) 490.43 286.31 T
-0.3 (ment names separated by white space, and the body of the procedure, which is a T) 152.1 274.31 P
-0.3 (cl script.) 475.78 274.31 P
3 F
-0.93 (Proc) 152.1 262.31 P
1 F
-0.38 ( enters the procedure name into the T) 176.09 262.31 P
-0.38 (cl interpreter as a new command. Whenever the) 321.74 262.31 P
(command is invoked, the body of the procedure will be evaluated. While the procedure) 152.1 250.31 T
(body is executing it can access its ar) 152.1 238.31 T
(guments as variables:) 297.09 238.31 T
3 F
(base) 385.64 238.31 T
1 F
( will hold the \336rst ar) 409.63 238.31 T
(gu-) 490.79 238.31 T
(ment to power and) 152.1 226.31 T
3 F
(p) 229.27 226.31 T
1 F
( will hold the second ar) 235.26 226.31 T
(gument.) 328.63 226.31 T
(The body of the) 170.1 214.31 T
3 F
(power) 236.16 214.31 T
1 F
( procedure contains three T) 266.15 214.31 T
(cl commands:) 374.8 214.31 T
3 F
(set) 433.1 214.31 T
1 F
(,) 451.09 214.31 T
3 F
(while) 456.08 214.31 T
1 F
(, and) 486.07 214.31 T
3 F
(return) 152.1 202.31 T
1 F
(. The) 188.08 202.31 T
3 F
(while) 211.12 202.31 T
1 F
( command does most of the work of the procedure. It takes two) 241.1 202.31 T
(ar) 152.1 190.31 T
(guments, an expression \322) 159.69 190.31 T
3 F
($p > 0) 260.17 190.31 T
1 F
(\323 and a body) 296.15 190.31 T
(, which is another multi-line T) 346.29 190.31 T
(cl script.) 467.19 190.31 T
-0.09 (The) 152.1 178.31 P
3 F
-0.21 (while) 170.05 178.31 P
1 F
-0.09 ( command evaluates its expression ar) 200.04 178.31 P
-0.09 (gument and if the result is non-zero then) 348.47 178.31 P
(it evaluates the body as a T) 152.1 166.31 T
(cl script. It repeats this process over and over until eventually) 260.21 166.31 T
(the expression evaluates to zero. In the example, the body of the) 152.1 154.31 T
3 F
(while) 411.35 154.31 T
1 F
( command multi-) 441.33 154.31 T
FMENDPAGE
%%EndPage: "11" 20
%%Page: "12" 20
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(12) 98.1 668.33 T
5 F
(An Overview of T) 396.01 668.33 T
(cl and Tk) 471.55 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
-0.24 (plies the result value by) 152.1 632.33 P
3 F
-0.57 (base) 248.36 632.33 P
1 F
-0.24 ( and then decrements) 272.35 632.33 P
3 F
-0.57 (p) 358.55 632.33 P
1 F
-0.24 (. When) 364.55 632.33 P
3 F
-0.57 (p) 395.44 632.33 P
1 F
-0.24 ( reaches zero the result con-) 401.44 632.33 P
(tains the desired power of) 152.1 620.28 T
3 F
(base) 257.85 620.28 T
1 F
(.) 281.84 620.28 T
(The) 170.1 608.28 T
3 F
(return) 188.14 608.28 T
1 F
( command causes the procedure to exit with the value of variable) 224.12 608.28 T
3 F
(result) 152.1 596.22 T
1 F
( as the procedure\325) 188.08 596.22 T
(s result. If it is omitted then the return value of the procedure) 258.85 596.22 T
(will be the result of the last command in the procedure\325) 152.1 584.17 T
(s body) 373.06 584.17 T
(. In the case of) 398.78 584.17 T
3 F
(power) 459.84 584.17 T
1 F
( this) 489.82 584.17 T
(would be the result of) 152.1 572.11 T
3 F
(while) 241.76 572.11 T
1 F
(, which is always an empty string.) 271.74 572.11 T
-0.01 (The use of braces in this example is crucial. The single most dif) 170.1 560.11 P
-0.01 (\336cult issue in writing) 424.94 560.11 P
(T) 152.1 548.06 T
(cl scripts is managing substitutions: making them happen when you want them and pre-) 157.51 548.06 T
(venting them from happening when you don\325) 152.1 536 T
(t want them. Braces prevent substitutions or) 332.91 536 T
(defer them until later) 152.1 523.94 T
(. The body of the procedure must be enclosed in braces because we) 235.65 523.94 T
(don\325) 152.1 511.89 T
(t want variable and command substitutions to occur at the time the body is passed to) 170.24 511.89 T
3 F
-0.68 (proc) 152.1 499.83 P
1 F
-0.28 ( as an ar) 176.09 499.83 P
-0.28 (gument; we want the substitutions to occur later) 208.07 499.83 P
-0.28 (, when the body is evaluated) 397.5 499.83 P
(as a T) 152.1 487.78 T
(cl script. The body of the) 175.27 487.78 T
3 F
(while) 278.25 487.78 T
1 F
( command is enclosed in braces for the same rea-) 308.23 487.78 T
(son: rather than performing the substitutions once, while parsing the) 152.1 475.72 T
3 F
(while) 427.2 475.72 T
1 F
( command,) 457.18 475.72 T
-0.03 (we want the substitutions to be performed over and over) 152.1 463.67 P
-0.03 (, each time the body is evaluated.) 376.56 463.67 P
(Braces are also needed in the \322) 152.1 451.61 T
3 F
({$p > 0}) 275.32 451.61 T
1 F
(\323 ar) 323.3 451.61 T
(gument to) 337.82 451.61 T
3 F
(while) 380.57 451.61 T
1 F
(. W) 410.56 451.61 T
(ithout them the value) 424.59 451.61 T
(of variable) 152.1 439.56 T
3 F
(p) 197.62 439.56 T
1 F
( would be substituted when parsing the) 203.61 439.56 T
3 F
(while) 362.12 439.56 T
1 F
( command; the expression) 392.11 439.56 T
(would have a constant value and) 152.1 427.5 T
3 F
(while) 284.78 427.5 T
1 F
( would loop forever \050you can try replacing some) 314.76 427.5 T
(of the braces in the example with double quotes to see what happens\051.) 152.1 415.44 T
(In the examples in this book I use a stylized syntax where the open brace for an ar) 170.1 403.44 T
(gu-) 497.72 403.44 T
(ment that is a T) 152.1 391.39 T
(cl script appears at the end of one line, the script follows on successive) 213.59 391.39 T
(lines indented, and the close brace is on a line by itself after the script. Although I think) 152.1 379.33 T
(that this makes for readable scripts, T) 152.1 367.28 T
(cl doesn\325) 301.57 367.28 T
(t require this particular syntax. Script ar) 337.75 367.28 T
(gu-) 496.62 367.28 T
(ments are subject to the same syntax rules as any other ar) 152.1 355.22 T
(guments; in fact the T) 380.91 355.22 T
(cl inter-) 467.94 355.22 T
(preter doesn\325) 152.1 343.17 T
(t even know that an ar) 204.37 343.17 T
(gument is a script at the time it parses it. One) 292.73 343.17 T
-0.07 (consequence of this is that the open parenthesis must be on the same line as the preceding) 152.1 331.11 P
(portion of the command. If the open brace is moved to a line by itself then the newline) 152.1 319.06 T
(before the open brace will terminate the command.) 152.1 307 T
-0.13 (By now you have seen nearly the entire T) 170.1 295 P
-0.13 (cl language syntax. The only remaining syn-) 334.93 295 P
(tactic feature is backslash substitution, which allows you to enter special characters such) 152.1 282.94 T
(as dollar) 152.1 270.89 T
(-signs into a word without enclosing the entire word in braces. Note that) 186.04 270.89 T
3 F
(while) 477.51 270.89 T
1 F
(and) 152.1 258.83 T
3 F
(proc) 169.03 258.83 T
1 F
( are not special syntactic elements in T) 193.02 258.83 T
(cl. They are just commands that take) 347.48 258.83 T
(ar) 152.1 246.78 T
(guments just like all T) 159.69 246.78 T
(cl commands. The only special thing about) 248.39 246.78 T
3 F
(while) 422.72 246.78 T
1 F
( and) 452.7 246.78 T
3 F
(proc) 472.13 246.78 T
1 F
( is) 496.12 246.78 T
-0.1 (that they treat some of their ar) 152.1 234.72 P
-0.1 (guments as T) 271.81 234.72 P
-0.1 (cl scripts and cause the scripts to be evaluated.) 324.22 234.72 P
-0.02 (Many other commands also do this. The) 152.1 222.67 P
3 F
-0.04 (button) 315.22 222.67 P
1 F
-0.02 ( command was one example \050its) 351.2 222.67 P
3 F
-0.04 (-com-) 482.12 222.67 P
-0.79 (mand) 152.1 210.61 P
1 F
-0.33 ( option is a T) 176.09 210.61 P
-0.33 (cl script\051, and you\325ll read about several other control structures later on,) 226.82 210.61 P
(such as) 152.1 198.56 T
3 F
(for) 183.74 198.56 T
1 F
(,) 201.33 198.56 T
3 F
(foreach) 206.33 198.56 T
1 F
(,) 248.31 198.56 T
3 F
(case) 253.3 198.56 T
1 F
(, and) 277.29 198.56 T
3 F
(eval) 299.22 198.56 T
1 F
(.) 323.21 198.56 T
(One \336nal note about procedures. The variables in a procedure are normally local to) 170.1 186.56 T
(that procedure and will not be visible outside the procedure. In the) 152.1 174.5 T
3 F
(power) 419.96 174.5 T
1 F
( example the) 449.95 174.5 T
(local variables include the ar) 152.1 162.44 T
(guments) 266.83 162.44 T
3 F
(base) 303.2 162.44 T
1 F
( and) 327.18 162.44 T
3 F
(p) 346.61 162.44 T
1 F
( as well as the variable) 352.61 162.44 T
3 F
(result) 445.87 162.44 T
1 F
(. A) 481.85 162.44 T
-0.18 (fresh set of local variables is created for each call to a procedure \050ar) 152.1 150.39 P
-0.18 (guments are passed by) 420.12 150.39 P
(copying their values\051, and when a procedure returns its local variables are deleted. V) 152.1 138.33 T
(ari-) 489.33 138.33 T
FMENDPAGE
%%EndPage: "12" 21
%%Page: "13" 21
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(2.6 Event bindings) 98.1 668.33 T
4 F
(13) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(ables named outside any procedure are called) 152.1 520.73 T
2 F
(global variables) 336.11 520.73 T
1 F
(; they last forever unless) 401.35 520.73 T
(explicitly deleted. Y) 152.1 508.57 T
(ou\325ll \336nd out later how a procedure can access global variables and) 232.44 508.57 T
(the local variables of other active procedures.) 152.1 496.4 T
98.1 453.04 512.1 456.06 C
152.1 454.26 512.1 454.26 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 454.55 143.1 454.55 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(2.6) 124.63 460.06 T
(Event bindings) 152.1 460.06 T
1 10 Q
(The next example provides a graphical front-end for the) 152.1 436.37 T
3 F
(power) 378.3 436.37 T
1 F
( procedure. In addition to) 408.29 436.37 T
(demonstrating two new widget classes it illustrates Tk\325) 152.1 424.2 T
(s) 371.69 424.2 T
2 F
(binding) 378.08 424.2 T
1 F
( mechanism. A binding) 408.62 424.2 T
(causes a particular T) 152.1 412.04 T
(cl script to be evaluated whenever a particular event occurs in a par-) 233.82 412.04 T
(ticular window) 152.1 399.87 T
(. The) 211.69 399.87 T
3 F
(-command) 234.73 399.87 T
1 F
( option for buttons is an example of a simple binding) 282.7 399.87 T
-0.32 (implemented by a particular widget class. Tk also includes a more general mechanism that) 152.1 387.7 P
(can be used to extend the behavior of arbitrary widgets in nearly arbitrary ways.) 152.1 375.53 T
(T) 170.1 363.53 T
(o run the example, copy the following script into a \336le) 175.51 363.53 T
3 F
(power) 395.37 363.53 T
1 F
( and invoke the \336le) 425.35 363.53 T
(from your shell.) 152.1 351.36 T
3 9 Q
(#!/usr/local/bin/wish -f) 179.1 337.03 T
(proc power {base p} {) 179.1 326.86 T
(set result 1) 200.63 316.69 T
(while {$p > 0} {) 200.63 306.52 T
(set result [expr $result*$base]) 222.23 296.36 T
(set p [expr $p-1]) 222.23 286.19 T
(}) 200.63 276.02 T
(return $result) 200.63 265.85 T
(}) 179.1 255.68 T
(entry .base -width 6 -relief sunken -textvariable base) 179.1 245.52 T
(label .label1 -text "to the power") 179.1 235.35 T
(entry .power -width 6 -relief sunken -textvariable power) 179.1 225.18 T
(label .label2 -text "is") 179.1 215.01 T
(label .result -textvariable result) 179.1 204.84 T
(pack .base .label1 .power .label2 .result \134) 179.1 194.67 T
(-side left -padx 1m -pady 2m) 222.23 184.51 T
(bind .base <Return> {set result [power $base $power]}) 179.1 174.34 T
(bind .power <Return> {set result [power $base $power]}) 179.1 164.17 T
1 10 Q
(This script will produce a screen display like that in Figure 2.2. There are two entry wid-) 152.1 150.5 T
(gets in which you can click with the mouse and type numbers. If you type return in either) 152.1 138.33 T
98.1 135 512.1 639 C
98.1 527.4 512.1 639 C
98.1 563.4 512.1 577.8 C
98.1 563.4 512.1 577.8 R
7 X
0 K
V
152.1 571.32 512.1 571.32 2 L
V
0.5 H
2 Z
0 X
N
98.1 527.4 512.1 639 C
98.1 540 512.1 554.4 C
98.1 540 512.1 554.4 R
7 X
0 K
V
152.1 547.92 512.1 547.92 2 L
V
0.5 H
2 Z
0 X
N
98.1 527.4 512.1 639 C
0 9 Q
0 X
0 K
(Figur) 152.1 557.4 T
(e  2.2.) 173.41 557.4 T
1 F
(A graphical user interface that computes powers of a base.) 199.87 557.4 T
0 0 0 286 69 171.6 41.4 246.3 590.4 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 0 0 286 69
%%Creator: xgrabsc
%%Title: introF2
%%CreationDate: Fri Jul 23 11:07:13 1993
%%EndComments
%
%
%%EndProlog
%%Page: 1 1
/inch {72 mul} def
/rlebuffer 2 string def
/samples 256 string def
/plotimage
{286 69 8 [286 0 0 -69 0 69]
% run-length decoding block
  { currentfile rlebuffer readhexstring pop pop
    rlebuffer 0 get 1 add       %% number of copies of the sample
    /nsamples exch store        %% save it away
    /lum rlebuffer 1 get store  %% the sample itself
    0 1 nsamples 1 sub { samples exch lum put } for
    samples 0 nsamples getinterval %% leave the pixels on the stack
  }
  image
} def
gsave
286 69 scale
plotimage
fefa37fa0083e8fa008318fa008301fa16da008300fae7da008300fa16da
018301fa16da008300fae7da008300fa16da018301fa16da008300fae7da
008300fa16da018301fa16da008300fae7da008300fa16da018301fa16da
008300fae7da008300fa16da018301fa04da128300fae88300fa118304da
018301fa04da0083fefa0ffa04da018301fa04da008300fa0fda008300fa
d5da008300fa0fda008300fa0fda008300fa04da018301fa04da008300fa
0fda008300fad5da008300fa0fda008300fa0fda008300fa04da018301fa
04da008300fa0fda008300fad5da008300fa0fda008300fa0fda008300fa
04da018301fa04da008300fa0fda008300fad5da008300fa0fda008300fa
02da09fa02da008300fa04da018301fa04da008300fa0fda008300fad5da
008300fa0fda008300fa02da00fa07da008302da008300fa04da018301fa
04da008300fa0fda008300fa58da010000da010002da030001da010001da
010001da010001da030001da010000da010057da008300fa0fda008300fa
02da00fa07da008302da008300fa04da018301fa04da008300fa02da09fa
02da008300fa58da020000da010000da010001da010000da010001da0100
01da010000da010001da010000da040057da008300fa05da03fa05da0083
00fa02da00fa07da008302da008300fa04da018301fa04da008300fa02da
00fa07da008302da008300fa58da010001da010000da010001da010001da
010000da010000da010001da010001da010000da020059da008300fa05da
00fa01da008305da008300fa02da00fa07da008302da008300fa04da0183
01fa04da008300fa02da00fa07da008302da008300fa58da010001da0100
00da010001da010001da010000da010000da010001da050000da01005ada
008300fa05da00fa01da008305da008300fa02da00fa07da008302da0083
00fa04da018301fa04da008300fa02da00fa088302da008300fa58da0100
01da010000da010001da010001da010000da010000da010001da010004da
01005ada008300fa05da00fa028305da008300fa02da00fa07da008302da
008300fa04da018301fa04da008300fa0fda008300fa58da020000da0100
00da010001da010002da010001da010002da010001da010000da01005ada
008300fa0fda008300fa02da00fa07da008302da008300fa04da018301fa
04da008300fa0fda008300fa58da010000da010002da030003da010001da
010003da030001da01005ada008300fa0fda008300fa02da00fa07da0083
02da008300fa04da018301fa04da008300fa0fda008300fa58da01007ada
008300fa0fda008300fa02da00fa088302da008300fa04da018300fa0683
00fa0fda008300fa58da01007ada008300fa0fda008300fa0fda008300fa
068308fa0fda008300fa58da01007ada008300fa0fda008300fa0fda0083
06fa008301fa04da008300fa108300fad68300fa108300fa108300fa04da
018301fa04dafe830f8300fa04da018301fa04da0183fee90ce901fa04da
018301fa04da0183fee90ce901fa04da018301fa04da0183fee90ce901fa
04da018301fa04da0183fee90ce901fa04da018301fa04da0183fee90ce9
01fa04da018301fa04da0183fee90ce901fa04da018301fa04da0183fee9
0ce901fa04da018301fa04da018302e9298c5fe9298c54e901fa04da0183
01fa04da018302e9288c00ff5fe9288c00ff54e901fa04da018301fa04da
018302e9018c25e901ff5fe9018c25e901ff54e901fa04da018301fa04da
018302e9018c25e901ff5fe9018c25e901ff54e901fa04da018301fa04da
018302e9018c25e901ff5fe9018c25e901ff54e901fa04da018301fa04da
018302e9018c01e9020007e9000017e901ff0ae901000de9010001e90100
3ee9018c00e904001fe901ff09e9010016e9010003e9030002e9030007e9
010003e9030002e9030007e901fa04da018301fa04da018302e9018c00e9
000002e9000004e9020017e901ff0ae901000de9010001e901003ee9018c
04e900001fe901ff20e9030002e9010001e9010000e9010001e9010004e9
030002e9010001e9010000e9010001e9010006e901fa04da018301fa04da
018302e9018c04e9000006e9000017e901ff09e9030001e9030005e90300
00e9010000e9010002e9030005e9010000e9010002e9030001e9010001e9
010001e9010001e9030001e9010000e9010009e9018c03e9000020e901ff
09e9010001e9030010e9010002e9010001e9010000e9010001e9010006e9
010002e9010001e9010000e9010001e9010006e901fa04da018301fa04da
018302e9018c03e9000007e9000017e901ff0ae9010001e9010001e90100
05e9010001e9020000e9010000e9010001e9010004e9020000e9010000e9
010001e9010000e9010001e9010001e9010000e9010001e9010000e90400
09e9018c03e9000020e901ff09e9010000e9010001e901000fe9010003e9
030001e9010001e9010006e9010002e9010001e9010000e9010001e90100
06e901fa04da018301fa04da018302e9018c02e9000008e9000017e901ff
0ae9010001e9010001e9010005e9010001e9010001e9010000e9010001e9
010004e9010001e9010000e9010001e9010001e9010000e9010000e90100
01e9010001e9010000e902000be9018c02e9000021e901ff09e9010000e9
020012e9010002e9010001e9010000e9010001e9010006e9010002e90100
01e9010001e9040006e901fa04da018301fa04da018302e9018c01e90000
09e9000017e901ff0ae9010001e9010001e9010005e9010001e9010001e9
010000e9050004e9010001e9010000e9010001e9010001e9010000e90100
00e9010001e9050000e901000ce9018c02e9000021e901ff09e9010002e9
020010e9010002e9010001e9010000e9010001e9010006e9010002e90100
01e9010004e9010006e901fa04da018301fa04da018302e9018c00e90000
0ae9000017e901ff0ae9010001e9010001e9010005e9010001e9010001e9
010000e9010008e9010001e9010000e9010001e9010001e9010000e90100
00e9010001e9010004e901000ce9018c02e9000021e901ff09e9010003e9
02000fe9010002e9010001e9010000e9010001e9010006e9010002e90100
01e9010004e9010006e901fa04da018300fa078302e9018c00e900000ae9
000017e901ff0ae9010000e9020001e9010005e9010000e9020001e90100
00e9010001e9010004e9020000e9010000e9010001e9010002e9010001e9
010002e9010001e9010000e901000ce9018c01e9000022e901ff09e90100
00e9010001e901000fe9010002e9010001e9010000e9010001e9010001e9
010002e9010002e9010001e9010000e9010001e9010006e901fa068307fa
008302e9018c00e9040001e9000003e9000017e901ff0be9010001e90300
07e9010000e9010001e9010001e9030005e9010000e9010002e9030003e9
010001e9010003e9030001e901000ce9018c01e9000022e901ff09e90100
01e9030010e9010003e9030002e9030002e9010002e9010003e9030002e9
030007e907fa008301fa04da018302e9018c25e901ff30e901002ce9018c
25e901ff54e901fa04da018301fa04da018302e9018c25e901ff30e90100
2ce9018c25e901ff54e901fa04da018301fa04da018302e9018c25e901ff
30e901002ce9018c25e901ff54e901fa04da018301fa04da018302e9018c
25e901ff5fe9018c25e901ff54e901fa04da018301fa04da018302e9018c
27ff5fe9018c27ff54e901fa04da018301fa04da018302e9008c28ff5fe9
008c28ff54e901fa04da018301fa04da0183fee90ce901fa04da018301fa
04da0183fee90ce901fa04da018301fa04da0183fee90ce901fa04da0183
01fa04da0183fee90ce901fa04da018301fa04da0183fee90ce901fa04da
018301fa04da0183fee90ce901fa04da018301fa04da0183fee90ce901fa
04da018301fa04da0183fefa0efa04da018301fa04da0083fefa0ffa04da
018301fa16da008300fae7da008300fa16da018301fa16da008300fae7da
008300fa16da018301fa16da008300fae7da008300fa16da018301fa16da
008300fae7da008300fa16da018301fa16da008300fae7da008300fa16da
018301fa178300fae88300fa188300fafe831d83

%
% Run-length encoding savings =  84.7%
%



grestore
showpage

%%EndDocument
FMENDEPSF
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "13" 22
%%Page: "14" 22
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(14) 98.1 668.33 T
5 F
(An Overview of T) 396.01 668.33 T
(cl and Tk) 471.55 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(of the entries, the result will appear on the right side of the window) 152.1 632.33 T
(. Y) 420.15 632.33 T
(ou can compute dif-) 431.37 632.33 T
(ferent results by modifying either the base or the power and then typing return again.) 152.1 620.33 T
-0.17 (This application consists of \336ve widgets: two entries and three labels. Entries are wid-) 170.1 608.33 P
(gets that display one-line text strings that you can edit interactively) 152.1 596.33 T
(. The two entries,) 419.61 596.33 T
3 F
(.base) 152.1 584.33 T
1 F
( and) 182.08 584.33 T
3 F
(.power) 201.51 584.33 T
1 F
(, are used for entering the numbers. Each entry is con\336gured with a) 237.09 584.33 T
3 F
(-) 152.1 572.33 T
(width) 158.1 572.33 T
1 F
( of 6, which means it will be lar) 188.08 572.33 T
(ge enough to display about 6 digits, and a) 314.76 572.33 T
3 F
(-) 152.1 560.33 T
(relief) 158.1 560.33 T
1 F
( of) 194.08 560.33 T
3 F
(sunken) 207.4 560.33 T
1 F
(, which gives the entry a depressed appearance. The) 243.38 560.33 T
3 F
(-) 152.1 548.33 T
(textvariable) 158.1 548.33 T
1 F
( option for each entry speci\336es the name of a global variable to hold) 230.06 548.33 T
(the entry\325) 152.1 536.33 T
(s text: any changes you make in the entry will be re\337ected in the variable and) 190.13 536.33 T
(vice versa.) 152.1 524.33 T
(T) 170.1 512.33 T
(wo of the labels,) 175.51 512.33 T
3 F
(.label1) 244.07 512.33 T
1 F
( and) 286.05 512.33 T
3 F
(.label2) 305.48 512.33 T
1 F
(, hold decorative text and the third,) 347.45 512.33 T
3 F
(.result) 152.1 500.33 T
1 F
(, holds the result of the power computation. The) 194.08 500.33 T
3 F
(-) 388.67 500.33 T
(textvariable) 394.67 500.33 T
1 F
( option for) 466.63 500.33 T
3 F
(.result) 152.1 488.33 T
1 F
( causes it to display whatever string is in global variable) 194.08 488.33 T
3 F
(result) 420.87 488.33 T
1 F
(whereas) 152.1 476.33 T
3 F
(.label1) 184.84 476.33 T
1 F
( and) 226.82 476.33 T
3 F
(.label2) 246.25 476.33 T
1 F
( display constant strings.) 288.23 476.33 T
(The) 170.1 464.33 T
3 F
(pack) 188.14 464.33 T
1 F
( command arranges the \336ve widgets in a row from left to right. The com-) 212.13 464.33 T
-0.23 (mand occupies two lines in the script; the backslash at the end of the \336rst line is a line-con-) 152.1 452.33 P
(tinuation character: it causes the newline to be treated as a space. The) 152.1 440.33 T
3 F
(-side) 432.43 440.33 T
1 F
( option) 462.41 440.33 T
-0.32 (means that each widget is placed at the left side of the remaining space in the main widget:) 152.1 428.33 P
-0.05 (\336rst) 152.1 416.33 P
3 F
-0.11 (.base) 170.1 416.33 P
1 F
-0.05 ( is placed at the left edge of the main window) 200.09 416.33 P
-0.05 (, then) 381.07 416.33 P
3 F
-0.11 (.label1) 405.68 416.33 P
1 F
-0.05 ( is placed at the) 447.66 416.33 P
-0.07 (left side of the space not occupied by) 152.1 404.33 P
3 F
-0.16 (.base) 302.55 404.33 P
1 F
-0.07 (, and so on. The) 332.54 404.33 P
3 F
-0.16 (-padx) 398.54 404.33 P
1 F
-0.07 ( and) 428.53 404.33 P
3 F
-0.16 (-pady) 447.82 404.33 P
1 F
-0.07 ( options) 477.8 404.33 P
(make the display a bit more attractive by arranging for 1 millimeter of extra space on the) 152.1 392.33 T
-0.25 (left and right sides of each widget, plus 2 millimeters of extra space above and below each) 152.1 380.33 P
(widget. The \322) 152.1 368.33 T
3 F
(m) 206.78 368.33 T
1 F
(\323 suf) 212.78 368.33 T
(\336x speci\336es millimeters; you could also use \322) 231.75 368.33 T
3 F
(c) 413.59 368.33 T
1 F
(\323 for centimeters, \322) 419.58 368.33 T
3 F
(i) 496.18 368.33 T
1 F
(\323) 502.18 368.33 T
(for inches, \322) 152.1 356.33 T
3 F
(p) 201.22 356.33 T
1 F
(\323 for points, or no suf) 207.22 356.33 T
(\336x for pixels.) 293.09 356.33 T
-0.35 (The) 170.1 344.33 P
3 F
-0.85 (bind) 187.79 344.33 P
1 F
-0.35 ( commands connect the user interface to the) 211.77 344.33 P
3 F
-0.85 (power) 387.12 344.33 P
1 F
-0.35 ( procedure. Each) 417.1 344.33 P
3 F
-0.85 (bind) 485.97 344.33 P
1 F
(command has three ar) 152.1 332.33 T
(guments: the name of a window) 239.9 332.33 T
(, an event speci\336cation, and a T) 367.22 332.33 T
(cl) 493.09 332.33 T
(script to invoke when the given event occurs in the given window) 152.1 320.33 T
(.) 414.33 320.33 T
3 F
(<Return>) 419.32 320.33 T
1 F
( speci\336es) 467.3 320.33 T
-0.18 (an event consisting of the user typing the return key on the keyboard. Here are a few other) 152.1 308.33 P
(event speci\336ers that you might \336nd useful:) 152.1 296.33 T
3 F
(<Button-1>) 179.1 281.33 T
1 F
(Mouse button 1 is pressed.) 288.1 281.33 T
3 F
(<ButtonRelease-1>) 179.1 268.33 T
1 F
(Mouse button 1 is released.) 288.1 268.33 T
3 F
(<Double-Button-1>) 179.1 255.33 T
1 F
(Double-click on mouse button 1.) 288.1 255.33 T
3 F
(<1>) 179.1 242.33 T
1 F
(Short-hand for) 288.1 242.33 T
3 F
(<Button-1>) 349.16 242.33 T
1 F
(.) 409.13 242.33 T
3 F
(<Key-a>) 179.1 229.33 T
1 F
(Key \322) 288.1 229.33 T
3 F
(a) 311.68 229.33 T
1 F
(\323 is pressed.) 317.68 229.33 T
3 F
(<a>) 179.1 216.33 T
1 F
( or) 197.09 216.33 T
3 F
(a) 210.41 216.33 T
1 F
(Short-hand for) 288.1 216.33 T
3 F
(<Key-a>) 349.16 216.33 T
1 F
(.) 391.14 216.33 T
3 F
(<Motion>) 179.1 203.33 T
1 F
(Pointer motion with no buttons or modi\336er keys) 288.1 203.33 T
(pressed.) 288.1 193.33 T
3 F
(<B1-Motion>) 179.1 180.33 T
1 F
(Pointer motion with button 1 pressed.) 288.1 180.33 T
3 F
(<Any-Motion>) 179.1 167.33 T
1 F
(Pointer motion with any \050or no\051 buttons or modi\336er) 288.1 167.33 T
(keys pressed.) 288.1 157.33 T
FMENDPAGE
%%EndPage: "14" 23
%%Page: "15" 23
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(2.7 Subprocesses) 98.1 668.33 T
4 F
(15) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(The scripts for the bindings invoke) 170.1 632.33 T
3 F
(power) 312.23 632.33 T
1 F
(, passing it the values in the two entries,) 341.82 632.33 T
(and they store the result in) 152.1 620.33 T
3 F
(result) 260.36 620.33 T
1 F
( so that it will be displayed in the) 296.34 620.33 T
3 F
(.result) 431.55 620.33 T
1 F
( widget.) 473.52 620.33 T
(These bindings extend the generic built-in behavior of the entries \050editing text strings\051) 152.1 608.33 T
-0.3 (with application-speci\336c behavior \050computing a value based on two entries and displaying) 152.1 596.33 P
(that value in a third widget\051.) 152.1 584.33 T
(The script for a binding has access to several pieces of information about the event,) 170.1 572.33 T
-0.37 (such as the location of the pointer when the event occurred. For an example, start up) 152.1 560.33 P
3 F
-0.88 (wish) 485.98 560.33 P
1 F
(interactively and type the following command to it:) 152.1 548.33 T
3 9 Q
(bind . <Any-Motion> {puts "pointer at %x,%y"}) 179.1 534 T
1 10 Q
(Now move the pointer over the window) 152.1 520.33 T
(. Each time the pointer moves a message will be) 310.78 520.33 T
-0.14 (printed on standard output giving its new location. When the pointer motion event occurs,) 152.1 508.33 P
(Tk scans the script for % sequences and replaces them with information about the event) 152.1 496.33 T
(before passing the script to T) 152.1 484.33 T
(cl for evaluation.) 267.71 484.33 T
3 F
(%x) 338.21 484.33 T
1 F
( is replaced with the pointer) 350.2 484.33 T
(\325) 461.88 484.33 T
(s x-coordi-) 464.66 484.33 T
(nate and) 152.1 472.33 T
3 F
(%y) 188.18 472.33 T
1 F
( is replaced with the pointer) 200.17 472.33 T
(\325) 311.85 472.33 T
(s y-coordinate.) 314.63 472.33 T
98.1 428.98 512.1 432 C
152.1 430.2 512.1 430.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 430.49 143.1 430.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(2.7) 124.63 436 T
(Subprocesses) 152.1 436 T
1 10 Q
(Normally T) 152.1 412.31 T
(cl executes each command by invoking a C procedure in the application to) 198.32 412.31 T
(carry out its function; this is dif) 152.1 400.31 T
(ferent from a shell program like) 277.96 400.31 T
3 F
(sh) 407.86 400.31 T
1 F
( where each command) 419.85 400.31 T
-0.14 (is normally executed in a separate subprocess. However) 152.1 388.31 P
-0.14 (, T) 374.43 388.31 P
-0.14 (cl also allows you to create sub-) 384.7 388.31 P
(processes, using the) 152.1 376.31 T
3 F
(exec) 234.26 376.31 T
1 F
( command. Here is a simple example of) 258.25 376.31 T
3 F
(exec) 419.52 376.31 T
1 F
(:) 443.51 376.31 T
3 9 Q
(exec grep #include tk.h) 179.1 361.98 T
6 F
(\336) 162.9 348.98 T
7 F
(#include <tcl.h>) 179.1 348.98 T
(#include <X11/Xlib.h>) 179.1 338.98 T
(#include <stddef.h>) 179.1 328.98 T
1 10 Q
-0.14 (The) 152.1 315.31 P
3 F
-0.33 (exec) 170 315.31 P
1 F
-0.14 ( command treats its ar) 193.99 315.31 P
-0.14 (guments much like the words of a shell command line. In) 281.53 315.31 P
(this example) 152.1 303.31 T
3 F
(exec) 205.4 303.31 T
1 F
( creates a new process to run the) 229.39 303.31 T
3 F
(grep) 361.49 303.31 T
1 F
( program and passes it) 385.48 303.31 T
(\322) 152.1 291.31 T
3 F
(#include) 156.54 291.31 T
1 F
(\323 and \322) 204.51 291.31 T
3 F
(tk.h) 232.82 291.31 T
1 F
(\323 as ar) 256.8 291.31 T
(guments, just as if you had typed) 282.15 291.31 T
3 9 Q
(grep #include tk.h) 179.1 276.98 T
1 10 Q
(to your shell. The) 152.1 263.31 T
3 F
(grep) 225.11 263.31 T
1 F
( program searches \336le) 249.1 263.31 T
3 F
(tk.h) 339.58 263.31 T
1 F
( for lines that contain the string) 363.56 263.31 T
3 F
(#include) 152.1 251.31 T
1 F
( and prints those lines on its standard output. However) 200.07 251.31 T
(,) 417.31 251.31 T
3 F
(exec) 422.31 251.31 T
1 F
( arranges for) 446.3 251.31 T
-0.31 (standard output from the subprocess to be piped back to T) 152.1 239.31 P
-0.31 (cl.) 380.36 239.31 P
3 F
-0.74 (Exec) 392.27 239.31 P
1 F
-0.31 ( waits for the process to) 416.25 239.31 P
-0.32 (exit and then it returns all of the standard output as its result. W) 152.1 227.31 P
-0.32 (ith this mechanism you can) 401.82 227.31 P
-0.24 (execute subprocesses and use their output in T) 152.1 215.31 P
-0.24 (cl scripts.) 335.43 215.31 P
3 F
-0.57 (Exec) 375.76 215.31 P
1 F
-0.24 ( also supports input and out-) 399.74 215.31 P
(put redirection using standard shell notation such as) 152.1 203.31 T
3 F
(<) 361.96 203.31 T
1 F
(,) 367.96 203.31 T
3 F
(<<) 372.96 203.31 T
1 F
(, and) 384.95 203.31 T
3 F
(>) 406.88 203.31 T
1 F
(, pipelines with) 412.88 203.31 T
3 F
(|) 476.73 203.31 T
1 F
(, and) 482.73 203.31 T
(background processes with) 152.1 191.31 T
3 F
(&) 262.85 191.31 T
1 F
(.) 268.85 191.31 T
(The example below creates a simple user interface for saving and re-invoking com-) 170.1 179.31 T
-0.28 (monly used shell commands. T) 152.1 167.31 P
-0.28 (ype the following script into a \336le named) 274.93 167.31 P
3 F
-0.67 (redo) 439.82 167.31 P
1 F
-0.28 ( and invoke) 463.8 167.31 P
(it:) 152.1 155.31 T
FMENDPAGE
%%EndPage: "15" 24
%%Page: "16" 24
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(16) 98.1 668.33 T
5 F
(An Overview of T) 396.01 668.33 T
(cl and Tk) 471.55 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 9 Q
0 X
(#!/usr/local/bin/wish -f) 179.1 409.8 T
(set id 0) 179.1 399.8 T
(entry .entry -width 30 -relief sunken -textvariable cmd) 179.1 389.8 T
(pack .entry -padx 1m -pady 1m) 179.1 379.8 T
(bind .entry <Return> {) 179.1 369.8 T
(set id [expr $id + 1]) 200.63 359.8 T
(if {$id > 5} {) 200.63 349.8 T
(destroy .b[expr $id - 5]) 222.23 339.8 T
(}) 200.63 329.8 T
(button .b$id -command "exec <@stdin >@stdout $cmd" \134) 200.63 319.8 T
(-text $cmd) 243.76 309.8 T
(pack .b$id -f) 200.63 299.8 T
(ill x) 270.73 299.8 T
(.b$id invoke) 200.63 289.8 T
(.entry delete 0 end) 200.63 279.8 T
(}) 179.1 269.8 T
1 10 Q
(Initially the script creates an interface with a single entry widget. Y) 152.1 256.13 T
(ou can type a shell) 420.34 256.13 T
(command such as) 152.1 244.13 T
3 F
(ls) 225.66 244.13 T
1 F
( into the entry) 237.65 244.13 T
(, as shown in Figure 2.3\050a\051. When you type return the) 292.8 244.13 T
(command gets executed just as if you had typed it to the shell from which you invoked) 152.1 232.13 T
3 F
(redo) 152.1 220.13 T
1 F
(, and output from the command appears in the shell\325) 176.09 220.13 T
(s window) 384.28 220.13 T
(. Furthermore, the) 422.22 220.13 T
(script creates a new button widget that displays the command \050see Figure 2.3\050b\051\051 and you) 152.1 208.13 T
(can re-invoke the command later by clicking on the button. As you type more and more) 152.1 196.13 T
-0.2 (commands, more and more buttons appear) 152.1 184.13 P
-0.2 (, up to a limit of \336ve remembered commands as) 320.59 184.13 P
(in Figure 2.3\050c\051.) 152.1 172.13 T
98.1 135 512.1 639 C
98.1 415.8 512.1 639 C
98.1 412.2 512.1 487.8 R
7 X
0 K
V
98.1 473.4 512.1 487.8 C
98.1 473.4 512.1 487.8 R
7 X
0 K
V
152.1 481.32 512.1 481.32 2 L
V
0.5 H
2 Z
0 X
N
98.1 415.8 512.1 639 C
0 9 Q
0 X
0 K
(Figur) 152.1 467.4 T
(e  2.3.) 173.41 467.4 T
1 F
(The) 199.87 467.4 T
3 F
(redo) 216.09 467.4 T
1 F
( application. The user can type a command in the entry window) 237.66 467.4 T
(, as in \050a\051.) 465.72 467.4 T
-0.25 (When the user types return the command is invoked as a subprocess using) 152.1 458.4 P
3 F
-0.61 (exec) 417.65 458.4 P
1 F
-0.25 ( and a new button is) 439.22 458.4 P
(created that can be used to re-invoke the command later) 152.1 449.4 T
(, as in \050b\051. Additional commands can be) 352.65 449.4 T
98.1 423 512.1 437.4 C
98.1 423 512.1 437.4 R
7 X
0 K
V
152.1 430.92 512.1 430.92 2 L
V
0.5 H
2 Z
0 X
N
98.1 415.8 512.1 639 C
1 9 Q
0 X
0 K
(typed to create additional buttons, up to a limit of \336ve buttons as in \050c\051.) 152.1 440.4 T
0 0 0 234 61 140.4 36.6 168.3 595.2 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 0 0 234 61
%%Creator: xgrabsc
%%Title: introF3a
%%CreationDate: Fri Jul 23 11:07:15 1993
%%EndComments
%
%
%%EndProlog
%%Page: 1 1
/inch {72 mul} def
/rlebuffer 2 string def
/samples 256 string def
/plotimage
{234 61 8 [234 0 0 -61 0 61]
% run-length decoding block
  { currentfile rlebuffer readhexstring pop pop
    rlebuffer 0 get 1 add       %% number of copies of the sample
    /nsamples exch store        %% save it away
    /lum rlebuffer 1 get store  %% the sample itself
    0 1 nsamples 1 sub { samples exch lum put } for
    samples 0 nsamples getinterval %% leave the pixels on the stack
  }
  image
} def
gsave
234 61 scale
plotimage
fefa03fa0083b4fa008318fa008301fa16da008300fab3da008300fa16da
018301fa16da008300fab3da008300fa16da018301fa16da008300fab3da
008300fa16da018301fa16da008300fab3da008300fa16da018301fa16da
008300fab3da008300fa16da018301fa04da128300fab48300fa118304da
018301fa04da0083dafa04da018301fa04da008300fa0fda008300faa1da
008300fa0fda008300fa0fda008300fa04da018301fa04da008300fa0fda
008300faa1da008300fa0fda008300fa0fda008300fa04da018301fa04da
008300fa0fda008300faa1da008300fa0fda008300fa0fda008300fa04da
018301fa04da008300fa0fda008300fa53da01004bda008300fa0fda0083
00fa02da09fa02da008300fa04da018301fa04da008300fa0fda008300fa
53da01004bda008300fa0fda008300fa02da00fa07da008302da008300fa
04da018301fa04da008300fa0fda008300fa43da010000da010000da0300
02da010000da010001da030045da008300fa0fda008300fa02da00fa07da
008302da008300fa04da018301fa04da008300fa02da09fa02da008300fa
43da060001da010000da010000da020000da010001da010044da008300fa
05da03fa05da008300fa02da00fa07da008302da008300fa04da018301fa
04da008300fa02da00fa07da008302da008300fa43da020001da010001da
010000da010001da010000da010001da010044da008300fa05da00fa01da
008305da008300fa02da00fa07da008302da008300fa04da018301fa04da
008300fa02da00fa07da008302da008300fa43da010002da050000da0100
01da010000da010001da010044da008300fa05da00fa01da008305da0083
00fa02da00fa07da008302da008300fa04da018301fa04da008300fa02da
00fa088302da008300fa43da010002da010004da010001da010000da0100
01da010044da008300fa05da00fa028305da008300fa02da00fa07da0083
02da008300fa04da018300fa068300fa0fda008300fa43da010002da0100
01da010000da010000da020000da010001da010044da008300fa0fda0083
00fa02da00fa07da008302da008300fa068308fa0fda008300fa43da0100
03da030002da010000da010001da030045da008300fa0fda008300fa02da
00fa07da008302da008306fa008301fa04da008300fa0fda008300faa1da
008300fa0fda008300fa02da00fa088302da008300fa04da018301fa04da
008300fa0fda008300faa1da008300fa0fda008300fa0fda008300fa04da
018301fa04da008300fa0fda008300faa1da008300fa0fda008300fa0fda
008300fa04da018301fa04da008300fa108300faa28300fa108300fa1083
00fa04da018301fa04dada8300fa04da018301fa04da0183d7e901fa04da
018301fa04da0183d7e901fa04da018301fa04da0183d7e901fa04da0183
01fa04da018302e9d18c02e901fa04da018301fa04da018302e9d08c00ff
02e901fa04da018301fa04da018302e9018ccde901ff02e901fa04da0183
01fa04da018302e9018ccde901ff02e901fa04da018301fa04da018302e9
018ccde901ff02e901fa04da018301fa04da018302e9018c00e90000cbe9
01ff02e901fa04da018301fa04da018302e9018c00e90000cbe901ff02e9
01fa04da018301fa04da018302e9018c00e9000002e90100c6e901ff02e9
01fa04da018301fa04da018302e9018c00e9000001e9000001e90000c5e9
01ff02e901fa04da018301fa04da018302e9018c00e9000001e90000c8e9
01ff02e901fa04da018301fa04da018302e9018c00e9000002e90100c6e9
01ff02e901fa04da018300fa078302e9018c00e9000004e90000c5e901ff
02e901fa068307fa008302e9018c00e9000001e9000001e90000c5e901ff
02e907fa008301fa04da018302e9018c00e9000002e90100c6e901ff02e9
01fa04da018301fa04da018302e9018ccde901ff02e901fa04da018301fa
04da018302e9018ccde901ff02e901fa04da018301fa04da018302e9018c
cde901ff02e901fa04da018301fa04da018302e9018ccde901ff02e901fa
04da018301fa04da018302e9018ccfff02e901fa04da018301fa04da0183
02e9008cd0ff02e901fa04da018301fa04da0183d7e901fa04da018301fa
04da0183d7e901fa04da018301fa04da0183d7e901fa04da018301fa04da
0183d9fa04da018301fa04da0083dafa04da018301fa16da008300fab3da
008300fa16da018301fa16da008300fab3da008300fa16da018301fa16da
008300fab3da008300fa16da018301fa16da008300fab3da008300fa16da
018301fa16da008300fab3da008300fa16da018301fa178300fab48300fa
188300fae883

%
% Run-length encoding savings =  88.0%
%



grestore
showpage

%%EndDocument
FMENDEPSF
0 0 0 234 171 140.4 102.6 355.5 520.2 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 0 0 234 171
%%Creator: xgrabsc
%%Title: introF3c
%%CreationDate: Fri Jul 23 11:07:19 1993
%%EndComments
%
%
%%EndProlog
%%Page: 1 1
/inch {72 mul} def
/rlebuffer 2 string def
/samples 256 string def
/plotimage
{234 171 8 [234 0 0 -171 0 171]
% run-length decoding block
  { currentfile rlebuffer readhexstring pop pop
    rlebuffer 0 get 1 add       %% number of copies of the sample
    /nsamples exch store        %% save it away
    /lum rlebuffer 1 get store  %% the sample itself
    0 1 nsamples 1 sub { samples exch lum put } for
    samples 0 nsamples getinterval %% leave the pixels on the stack
  }
  image
} def
gsave
234 171 scale
plotimage
fefa03fa0083b4fa008318fa008301fa16da008300fab3da008300fa16da
018301fa16da008300fab3da008300fa16da018301fa16da008300fab3da
008300fa16da018301fa16da008300fab3da008300fa16da018301fa16da
008300fab3da008300fa16da018301fa04da128300fab48300fa118304da
018301fa04da0083dafa04da018301fa04da008300fa0fda008300faa1da
008300fa0fda008300fa0fda008300fa04da018301fa04da008300fa0fda
008300faa1da008300fa0fda008300fa0fda008300fa04da018301fa04da
008300fa0fda008300faa1da008300fa0fda008300fa0fda008300fa04da
018301fa04da008300fa0fda008300fa53da01004bda008300fa0fda0083
00fa02da09fa02da008300fa04da018301fa04da008300fa0fda008300fa
53da01004bda008300fa0fda008300fa02da00fa07da008302da008300fa
04da018301fa04da008300fa0fda008300fa43da010000da010000da0300
02da010000da010001da030045da008300fa0fda008300fa02da00fa07da
008302da008300fa04da018301fa04da008300fa02da09fa02da008300fa
43da060001da010000da010000da020000da010001da010044da008300fa
05da03fa05da008300fa02da00fa07da008302da008300fa04da018301fa
04da008300fa02da00fa07da008302da008300fa43da020001da010001da
010000da010001da010000da010001da010044da008300fa05da00fa01da
008305da008300fa02da00fa07da008302da008300fa04da018301fa04da
008300fa02da00fa07da008302da008300fa43da010002da050000da0100
01da010000da010001da010044da008300fa05da00fa01da008305da0083
00fa02da00fa07da008302da008300fa04da018301fa04da008300fa02da
00fa088302da008300fa43da010002da010004da010001da010000da0100
01da010044da008300fa05da00fa028305da008300fa02da00fa07da0083
02da008300fa04da018301fa04da008300fa0fda008300fa43da010002da
010001da010000da010000da020000da010001da010044da008300fa0fda
008300fa02da00fa07da008302da008300fa04da018301fa04da008300fa
0fda008300fa43da010003da030002da010000da010001da030045da0083
00fa0fda008300fa02da00fa07da008302da008300fa04da018301fa04da
008300fa0fda008300faa1da008300fa0fda008300fa02da00fa088302da
008300fa04da018301fa04da008300fa0fda008300faa1da008300fa0fda
008300fa0fda008300fa04da018301fa04da008300fa0fda008300faa1da
008300fa0fda008300fa0fda008300fa04da018301fa04da008300fa1083
00faa28300fa108300fa108300fa04da018300fae08300fa068307fa0083
d7e907fa008301fa04da0183d7e901fa04da018301fa04da0183d7e901fa
04da018301fa04da018302e9d18c02e901fa04da018301fa04da018302e9
d08c00ff02e901fa04da018301fa04da018302e9018ccde901ff02e901fa
04da018301fa04da018302e9018ccde901ff02e901fa04da018301fa04da
018302e9018ccde901ff02e901fa04da018301fa04da018302e9018ccde9
01ff02e901fa04da018301fa04da018302e9018ccde901ff02e901fa04da
018301fa04da018302e9018ccde901ff02e901fa04da018301fa04da0183
02e9018ccde901ff02e901fa04da018301fa04da018302e9018ccde901ff
02e901fa04da018301fa04da018302e9018ccde901ff02e901fa04da0183
01fa04da018302e9018ccde901ff02e901fa04da018301fa04da018302e9
018ccde901ff02e901fa04da018301fa04da018302e9018ccde901ff02e9
01fa04da018301fa04da018302e9018ccde901ff02e901fa04da018301fa
04da018302e9018ccde901ff02e901fa04da018301fa04da018302e9018c
cde901ff02e901fa04da018301fa04da018302e9018ccde901ff02e901fa
04da018301fa04da018302e9018ccfff02e901fa04da018301fa04da0183
02e9008cd0ff02e901fa04da018301fa04da0183d7e901fa04da018301fa
04da0183d7e901fa04da018301fa04da0183d7e901fa04da018301fa04da
0183d7ff01fa04da018301fa04da0183d6ff008c01fa04da018301fa04da
018301ffd3e9018c01fa04da018301fa04da018301ffd3e9018c01fa04da
018301fa04da018301ffd3e9018c01fa04da018301fa04da018301ff63e9
01006de9018c01fa04da018301fa04da018301ff63e901006de9018c01fa
04da018301fa04da018301ff63e9010001e9030067e9018c01fa04da0183
01fa04da018301ff63e9010000e9010001e9010066e9018c01fa04da0183
01fa04da018301ff63e9010000e9020069e9018c01fa04da018301fa04da
018301ff63e9010002e9020067e9018c01fa04da018301fa04da018301ff
63e9010003e9020066e9018c01fa04da018301fa04da018301ff63e90100
00e9010001e9010066e9018c01fa04da018301fa04da018301ff63e90100
01e9030067e9018c01fa04da018301fa04da018301ffd3e9018c01fa04da
018301fa04da018301ffd3e9018c01fa04da018301fa04da018301ffd3e9
018c01fa04da018301fa04da018301ffd3e9018c01fa04da018301fa04da
018301ffd3e9018c01fa04da018301fa04da018301ffd3e9018c01fa04da
018301fa04da018301ffd58c01fa04da018301fa04da018300ffd68c01fa
04da018301fa04da0183d7ff01fa04da018301fa04da0183d6ff008c01fa
04da018301fa04da018301ffd3e9018c01fa04da018301fa04da018301ff
d3e9018c01fa04da018301fa04da018301ffd3e9018c01fa04da018301fa
04da018301ff2de9010000e9010001e901000fe9020001e9020084e9018c
01fa04da018301fa04da018301ff2de9010004e901000ee9010002e90100
86e9018c01fa04da018301fa04da018301ff2ae9010000e9010000e90100
00e9030000e9010000e9010000e9030001e9030000e903000ce9000000e9
020000e9020002e9030005e9010000e9010002e9030001e9010000e90100
02e9030001e9010000e9010003e9000000e9020000e9020002e903002de9
018c01fa04da018301fa04da018301ff29e9010000e9020000e9010001e9
010001e9060001e9010001e9010002e901000de9010001e9010001e90100
00e9010001e9010004e9020000e9010000e9010001e9010000e9020000e9
010000e9010001e9010000e9040003e9010001e9010001e9010000e90100
01e901002ce9018c01fa04da018301fa04da018301ff29e9010001e90100
00e9010001e9010001e9020001e9010001e9010001e9010002e901000de9
010001e9010001e9010000e9020007e9010001e9010004e9010000e90100
01e9010000e9010001e9010000e9020005e9010001e9010001e9010000e9
02002fe9018c01fa04da018301fa04da018301ff29e9010001e9010000e9
010001e9010001e9010002e9010001e9010001e9010002e9010006e90400
01e9010001e9010001e9010002e9020005e9010001e9010001e9040000e9
010001e9010000e9050000e9010006e9010001e9010001e9010002e90200
2de9018c01fa04da018301fa04da018301ff29e9010001e9010000e90100
01e9010001e9010002e9010001e9010001e9010002e901000de9010001e9
010001e9010003e9020004e9010001e9010000e9010001e9010000e90100
01e9010000e9010004e9010006e9010001e9010001e9010003e902002ce9
018c01fa04da018301fa04da018301ff29e9010000e9020000e9010001e9
010000e9020002e9010001e9010001e9010002e901000de9010001e90100
01e9010000e9010001e9010004e9020000e9010000e9010001e9010000e9
020000e9010000e9010001e9010000e9010003e9010000e9010001e90100
01e9010000e9010001e901002ce9018c01fa04da018301fa04da018301ff
2ae9010000e9010000e9010002e9010000e9010003e9030002e9010002e9
01000de9010001e9010001e9010001e9030005e9010000e9010002e90200
00e9030000e9010002e9030001e9010003e9010000e9010001e9010001e9
010001e903002de9018c01fa04da018301fa04da018301ff70e901000be9
010052e9018c01fa04da018301fa04da018301ff70e901000be9010052e9
018c01fa04da018301fa04da018301ff70e901000be9010052e9018c01fa
04da018301fa04da018301ffd3e9018c01fa04da018301fa04da018301ff
d3e9018c01fa04da018301fa04da018301ffd3e9018c01fa04da018301fa
04da018301ffd58c01fa04da018301fa04da018300ffd68c01fa04da0183
01fa04da0183d7ff01fa04da018301fa04da0183d6ff008c01fa04da0183
01fa04da018301ffd3e9018c01fa04da018301fa04da018301ffd3e9018c
01fa04da018301fa04da018301ffd3e9018c01fa04da018301fa04da0183
01ff60e9010070e9018c01fa04da018301fa04da018301ff60e9010070e9
018c01fa04da018301fa04da018301ff60e9010000e9010000e9010002e9
020000e9000062e9018c01fa04da018301fa04da018301ff60e9010000e9
020000e9010000e9010000e9020062e9018c01fa04da018301fa04da0183
01ff60e9010000e9010001e9010000e9010001e9010062e9018c01fa04da
018301fa04da018301ff60e9010000e9010001e9010000e9010001e90100
62e9018c01fa04da018301fa04da018301ff60e9010000e9010001e90100
00e9010001e9010062e9018c01fa04da018301fa04da018301ff60e90100
00e9020000e9010000e9010000e9020062e9018c01fa04da018301fa04da
018301ff60e9010000e9010000e9010002e9010000e9010062e9018c01fa
04da018301fa04da018301ff63e9010008e9010062e9018c01fa04da0183
01fa04da018301ff63e9010008e9010062e9018c01fa04da018301fa04da
018301ff63e9010008e9010062e9018c01fa04da018301fa04da018301ff
d3e9018c01fa04da018301fa04da018301ffd3e9018c01fa04da018301fa
04da018301ffd3e9018c01fa04da018301fa04da018301ffd58c01fa04da
018301fa04da018300ffd68c01fa04da018301fa04da0183d7ff01fa04da
018301fa04da0183d6ff008c01fa04da018301fa04da018301ffd3e9018c
01fa04da018301fa04da018301ffd3e9018c01fa04da018301fa04da0183
01ffd3e9018c01fa04da018301fa04da018301ff67e9010009e902005ce9
018c01fa04da018301fa04da018301ff72e901005ee9018c01fa04da0183
01fa04da018301ff54e9010000e9010000e9030002e9030001e9010000e9
010000e9010001e9030001e9030057e9018c01fa04da018301fa04da0183
01ff54e9060001e9010000e9010001e9010000e9010000e9020000e90100
01e9010001e9010001e9010056e9018c01fa04da018301fa04da018301ff
54e9020001e9010004e9020003e9010000e9010001e9010001e9010001e9
010001e9010056e9018c01fa04da018301fa04da018301ff54e9010002e9
010006e9020001e9010000e9010001e9010001e9010001e9010001e90100
56e9018c01fa04da018301fa04da018301ff54e9010002e9010007e90200
00e9010000e9010001e9010001e9010001e9010001e9010056e9018c01fa
04da018301fa04da018301ff54e9010002e9010001e9010000e9010001e9
010000e9010000e9010001e9010001e9010001e9010001e9010056e9018c
01fa04da018301fa04da018301ff54e9010003e9030002e9030001e90100
00e9010001e9010001e9010002e9030057e9018c01fa04da018301fa04da
018301ffd3e9018c01fa04da018301fa04da018301ffd3e9018c01fa04da
018301fa04da018301ffd3e9018c01fa04da018301fa04da018301ffd3e9
018c01fa04da018301fa04da018301ffd3e9018c01fa04da018301fa04da
018301ffd3e9018c01fa04da018301fa04da018301ffd58c01fa04da0183
01fa04da018300ffd68c01fa04da018301fa04da0183d7ff01fa04da0183
01fa04da0183d6ff008c01fa04da018301fa04da018301ffd3e9018c01fa
04da018301fa04da018301ffd3e9018c01fa04da018300fa078301ffd3e9
018c01fa068307fa008301ff4de9010013e9010005e9050004e9030002e9
040050e9018c07fa008301fa04da018301ff4de9010013e9010005e90100
02e9010002e9010001e9010000e9010002e901004fe9018c01fa04da0183
01fa04da018301ff4de9010001e903000de9010005e9010002e9010001e9
010005e9010002e901004fe9018c01fa04da018301fa04da018301ff4de9
010000e9010001e901000ce9010005e9010002e9010001e9010006e90200
52e9018c01fa04da018301fa04da018301ff4de9010000e902000fe90100
05e9050002e9010008e9020050e9018c01fa04da018301fa04da018301ff
4de9010002e9020006e9040001e9010005e9010001e9010002e9010009e9
02004fe9018c01fa04da018301fa04da018301ff4de9010003e902000ce9
010005e9010002e9010001e9010005e9010002e901004fe9018c01fa04da
018301fa04da018301ff4de9010000e9010001e901000ce9010005e90100
02e9010002e9010001e9010000e9010002e901004fe9018c01fa04da0183
01fa04da018301ff4de9010001e903000de9010005e9010002e9010003e9
030002e9040050e9018c01fa04da018301fa04da018301ffd3e9018c01fa
04da018301fa04da018301ffd3e9018c01fa04da018301fa04da018301ff
d3e9018c01fa04da018301fa04da018301ffd3e9018c01fa04da018301fa
04da018301ffd3e9018c01fa04da018301fa04da018301ffd3e9018c01fa
04da018301fa04da018301ffd58c01fa04da018301fa04da018300ffd68c
01fa04da018301fa04da0183d9fa04da018301fa04da0083dafa04da0183
01fa16da008300fab3da008300fa16da018301fa16da008300fab3da0083
00fa16da018301fa16da008300fab3da008300fa16da018301fa16da0083
00fab3da008300fa16da018301fa16da008300fab3da008300fa16da0183
01fa178300fab48300fa188300fae883

%
% Run-length encoding savings =  87.1%
%



grestore
showpage

%%EndDocument
FMENDEPSF
0 0 0 234 83 140.4 49.8 168.3 509.4 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 0 0 234 83
%%Creator: xgrabsc
%%Title: introF3b
%%CreationDate: Fri Jul 23 11:07:17 1993
%%EndComments
%
%
%%EndProlog
%%Page: 1 1
/inch {72 mul} def
/rlebuffer 2 string def
/samples 256 string def
/plotimage
{234 83 8 [234 0 0 -83 0 83]
% run-length decoding block
  { currentfile rlebuffer readhexstring pop pop
    rlebuffer 0 get 1 add       %% number of copies of the sample
    /nsamples exch store        %% save it away
    /lum rlebuffer 1 get store  %% the sample itself
    0 1 nsamples 1 sub { samples exch lum put } for
    samples 0 nsamples getinterval %% leave the pixels on the stack
  }
  image
} def
gsave
234 83 scale
plotimage
fefa03fa0083b4fa008318fa008301fa16da008300fab3da008300fa16da
018301fa16da008300fab3da008300fa16da018301fa16da008300fab3da
008300fa16da018301fa16da008300fab3da008300fa16da018301fa16da
008300fab3da008300fa16da018301fa04da128300fab48300fa118304da
018301fa04da0083dafa04da018301fa04da008300fa0fda008300faa1da
008300fa0fda008300fa0fda008300fa04da018301fa04da008300fa0fda
008300faa1da008300fa0fda008300fa0fda008300fa04da018301fa04da
008300fa0fda008300faa1da008300fa0fda008300fa0fda008300fa04da
018301fa04da008300fa0fda008300fa53da01004bda008300fa0fda0083
00fa02da09fa02da008300fa04da018301fa04da008300fa0fda008300fa
53da01004bda008300fa0fda008300fa02da00fa07da008302da008300fa
04da018301fa04da008300fa0fda008300fa43da010000da010000da0300
02da010000da010001da030045da008300fa0fda008300fa02da00fa07da
008302da008300fa04da018301fa04da008300fa02da09fa02da008300fa
43da060001da010000da010000da020000da010001da010044da008300fa
05da03fa05da008300fa02da00fa07da008302da008300fa04da018301fa
04da008300fa02da00fa07da008302da008300fa43da020001da010001da
010000da010001da010000da010001da010044da008300fa05da00fa01da
008305da008300fa02da00fa07da008302da008300fa04da018301fa04da
008300fa02da00fa07da008302da008300fa43da010002da050000da0100
01da010000da010001da010044da008300fa05da00fa01da008305da0083
00fa02da00fa07da008302da008300fa04da018301fa04da008300fa02da
00fa088302da008300fa43da010002da010004da010001da010000da0100
01da010044da008300fa05da00fa028305da008300fa02da00fa07da0083
02da008300fa04da018301fa04da008300fa0fda008300fa43da010002da
010001da010000da010000da020000da010001da010044da008300fa0fda
008300fa02da00fa07da008302da008300fa04da018301fa04da008300fa
0fda008300fa43da010003da030002da010000da010001da030045da0083
00fa0fda008300fa02da00fa07da008302da008300fa04da018301fa04da
008300fa0fda008300faa1da008300fa0fda008300fa02da00fa088302da
008300fa04da018301fa04da008300fa0fda008300faa1da008300fa0fda
008300fa0fda008300fa04da018301fa04da008300fa0fda008300faa1da
008300fa0fda008300fa0fda008300fa04da018301fa04da008300fa1083
00faa28300fa108300fa108300fa04da018300fae08300fa068307fa0083
d7e907fa008301fa04da0183d7e901fa04da018301fa04da0183d7e901fa
04da018301fa04da018302e9d18c02e901fa04da018301fa04da018302e9
d08c00ff02e901fa04da018301fa04da018302e9018ccde901ff02e901fa
04da018301fa04da018302e9018ccde901ff02e901fa04da018301fa04da
018302e9018ccde901ff02e901fa04da018301fa04da018302e9018ccde9
01ff02e901fa04da018301fa04da018302e9018ccde901ff02e901fa04da
018301fa04da018302e9018ccde901ff02e901fa04da018301fa04da0183
02e9018ccde901ff02e901fa04da018301fa04da018302e9018ccde901ff
02e901fa04da018301fa04da018302e9018ccde901ff02e901fa04da0183
01fa04da018302e9018ccde901ff02e901fa04da018301fa04da018302e9
018ccde901ff02e901fa04da018301fa04da018302e9018ccde901ff02e9
01fa04da018301fa04da018302e9018ccde901ff02e901fa04da018301fa
04da018302e9018ccde901ff02e901fa04da018301fa04da018302e9018c
cde901ff02e901fa04da018301fa04da018302e9018ccde901ff02e901fa
04da018301fa04da018302e9018ccfff02e901fa04da018301fa04da0183
02e9008cd0ff02e901fa04da018301fa04da0183d7e901fa04da018301fa
04da0183d7e901fa04da018301fa04da0183d7e901fa04da018301fa04da
0183d7ff01fa04da018301fa04da0183d6ff008c01fa04da018301fa04da
018301ffd3e9018c01fa04da018301fa04da018301ffd3e9018c01fa04da
018300fa078301ffd3e9018c01fa068307fa008301ff63e901006de9018c
07fa008301fa04da018301ff63e901006de9018c01fa04da018301fa04da
018301ff63e9010001e9030067e9018c01fa04da018301fa04da018301ff
63e9010000e9010001e9010066e9018c01fa04da018301fa04da018301ff
63e9010000e9020069e9018c01fa04da018301fa04da018301ff63e90100
02e9020067e9018c01fa04da018301fa04da018301ff63e9010003e90200
66e9018c01fa04da018301fa04da018301ff63e9010000e9010001e90100
66e9018c01fa04da018301fa04da018301ff63e9010001e9030067e9018c
01fa04da018301fa04da018301ffd3e9018c01fa04da018301fa04da0183
01ffd3e9018c01fa04da018301fa04da018301ffd3e9018c01fa04da0183
01fa04da018301ffd3e9018c01fa04da018301fa04da018301ffd3e9018c
01fa04da018301fa04da018301ffd3e9018c01fa04da018301fa04da0183
01ffd58c01fa04da018301fa04da018300ffd68c01fa04da018301fa04da
0183d9fa04da018301fa04da0083dafa04da018301fa16da008300fab3da
008300fa16da018301fa16da008300fab3da008300fa16da018301fa16da
008300fab3da008300fa16da018301fa16da008300fab3da008300fa16da
018301fa16da008300fab3da008300fa16da018301fa178300fab48300fa
188300fae883

%
% Run-length encoding savings =  89.2%
%



grestore
showpage

%%EndDocument
FMENDEPSF
(\050a\051) 233.51 583.35 T
(\050b\051) 233.26 496.95 T
(\050c\051) 420.71 505.95 T
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "16" 25
%%Page: "17" 25
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(2.7 Subprocesses) 98.1 668.33 T
4 F
(17) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(Note:) 119.09 632.33 T
-0.2 (This example suffers fr) 152.1 632.33 P
-0.2 (om several limitations. For example, you cannot specify wild-car) 242.48 632.33 P
-0.2 (ds) 500.91 632.33 P
-0.16 (such as \322*\323 in command lines, and the \322) 152.1 621.98 P
7 F
-0.38 (cd) 314.92 621.98 P
2 F
-0.16 (\323 command doesn\325) 326.91 621.98 P
-0.16 (t behave pr) 401.55 621.98 P
-0.16 (operly) 445.83 621.98 P
-0.16 (. In Part I) 470.81 621.98 P
(you\325ll r) 152.1 611.62 T
(ead about T) 181.43 611.62 T
(cl facilities that you can use to eliminate these limitations.) 228.27 611.62 T
1 F
(The most interesting part of the) 170.1 598.62 T
3 F
(redo) 298.35 598.62 T
1 F
( script is in the) 322.34 598.62 T
3 F
(bind) 383.69 598.62 T
1 F
( command. The binding) 407.68 598.62 T
(for) 152.1 586.27 T
3 F
(<Return>) 166.25 586.27 T
1 F
( must execute the command, which is stored in the) 214.23 586.27 T
3 F
(cmd) 418.81 586.27 T
1 F
( variable, and cre-) 436.8 586.27 T
(ate a new button widget. First it creates the widget. The button widgets have names like) 152.1 573.91 T
3 F
(.b1) 152.1 561.56 T
1 F
(,) 170.09 561.56 T
3 F
(.b2) 175.09 561.56 T
1 F
(, and so on, where the number comes from the variable) 193.08 561.56 T
3 F
(id.) 415.4 561.56 T
(Id) 435.89 561.56 T
1 F
( starts at zero) 447.89 561.56 T
-0.19 (and increments before each new button is created. The notation \322) 152.1 549.2 P
3 F
-0.46 (.b$id) 410.26 549.2 P
1 F
-0.19 (\323 generates a wid-) 440.24 549.2 P
(get name by \322) 152.1 536.85 T
3 F
(.b) 207.89 536.85 T
1 F
(\323 and the value of) 219.88 536.85 T
3 F
(id) 293.43 536.85 T
1 F
(. Before creating a new widget the script checks to) 305.43 536.85 T
(see if there are already \336ve saved commands; if so then the oldest existing button is) 152.1 524.49 T
-0.23 (deleted. The notation \322) 152.1 512.14 P
3 F
-0.55 (.b[expr $id - 5]) 243.02 512.14 P
1 F
-0.23 (\323 produces the name of the oldest button by) 337.33 512.14 P
(subtracting \336ve from the number of the new button and concatenating it with \322) 152.1 499.79 T
3 F
(.b) 466.61 499.79 T
1 F
(\323. The) 478.6 499.79 T
3 F
(-) 506.08 499.79 T
(command) 152.1 487.43 T
1 F
( option for the new button invokes) 194.08 487.43 T
3 F
(exec) 334.27 487.43 T
1 F
( and redirects standard input and stan-) 358.26 487.43 T
(dard output for the subprocess\050es\051 to) 152.1 475.08 T
3 F
(wish) 300.88 475.08 T
1 F
(\325) 324.86 475.08 T
(s standard input and standard output, which) 327.64 475.08 T
-0.01 (are the same as those of the shell from which) 152.1 462.72 P
3 F
-0.02 (wish) 334.66 462.72 P
1 F
-0.01 ( was invoked: this causes output from) 358.64 462.72 P
(the subprocesses to appear in the shell\325) 152.1 450.37 T
(s window instead of being returned to) 307.55 450.37 T
3 F
(wish) 461.05 450.37 T
1 F
(.) 485.04 450.37 T
(The command \322) 170.1 438.37 T
3 F
(pack .b$id -f) 234.49 438.37 T
(ill x) 312.45 438.37 T
1 F
(\323 makes the new button appear at the bot-) 342.43 438.37 T
(tom of the window) 152.1 426.01 T
(. The option \322) 227.24 426.01 T
3 F
(-f) 282.76 426.01 T
(ill x) 294.75 426.01 T
1 F
(\323 improves the appearance by stretching the) 324.73 426.01 T
(button horizontally so that it \336lls the width of the window even it it doesn\325) 152.1 413.66 T
(t really need) 449.54 413.66 T
(that much space for its text. T) 152.1 401.3 T
(ry omitting the) 270.83 401.3 T
3 F
(-f) 332.75 401.3 T
(ill) 344.74 401.3 T
1 F
( option to see what happens without) 362.73 401.3 T
(it.) 152.1 388.95 T
-0.04 (The last two commands of the binding script are called) 170.1 376.95 P
2 F
-0.04 (widget commands) 391.76 376.95 P
1 F
-0.04 (. Whenever) 463.62 376.95 P
(a new widget is created a new T) 152.1 364.59 T
(cl command is also created with the same name as the) 279.9 364.59 T
-0.17 (widget, and you can invoke this command to communicate with the widget. The \336rst ar) 152.1 352.24 P
-0.17 (gu-) 498.78 352.24 P
-0.09 (ment to a widget command selects one of several operations and additional ar) 152.1 339.88 P
-0.09 (guments are) 461.2 339.88 P
-0.14 (used as parameters for that operation. In the) 152.1 327.53 P
3 F
-0.33 (redo) 328.91 327.53 P
1 F
-0.14 ( script the \336rst widget command causes) 352.89 327.53 P
(the button widget to invoke its) 152.1 315.17 T
3 F
(-command) 276.48 315.17 T
1 F
( option just as if you had clicked the mouse) 324.45 315.17 T
-0.17 (button on it. The second widget command clears the entry widget in preparation for a new) 152.1 302.82 P
(command to be typed.) 152.1 290.46 T
(Each class of widget supports a dif) 170.1 278.46 T
(ferent set of operations in its widget commands,) 309.26 278.46 T
(but many of the operations are similar from widget to widget. For example, every widget) 152.1 266.11 T
-0.12 (class supports a) 152.1 253.75 P
3 F
-0.29 (conf) 216.97 253.75 P
-0.29 (igure) 240.96 253.75 P
1 F
-0.12 ( widget command that can be used to modify any of the con-) 270.94 253.75 P
(\336guration options for the widget. If you run the) 152.1 241.4 T
3 F
(redo) 343.64 241.4 T
1 F
( script interactively you could type) 367.63 241.4 T
(the following command to change the background of the entry widget to yellow:) 152.1 229.04 T
3 9 Q
(.entry conf) 179.1 214.71 T
(igure -background yellow) 238.42 214.71 T
1 10 Q
(Or) 152.1 201.04 T
(, you could type) 162.24 201.04 T
3 9 Q
(.b1 conf) 179.1 186.71 T
(igure -foreground brown) 222.24 186.71 T
(.b1 f) 179.1 176.35 T
(lash) 206.06 176.35 T
1 10 Q
(to change the color of the text in button) 152.1 162.69 T
3 F
(.b1) 312.27 162.69 T
1 F
( to brown and then cause the button to \337ash.) 330.26 162.69 T
(One of the most important things about T) 170.1 150.69 T
(cl and Tk is that they make every aspect of) 335.14 150.69 T
(an application accessible and modi\336able at run-time. For example, the) 152.1 138.33 T
3 F
(redo) 435.23 138.33 T
1 F
( script modi-) 459.22 138.33 T
FMENDPAGE
%%EndPage: "17" 26
%%Page: "18" 26
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(18) 98.1 668.33 T
5 F
(An Overview of T) 396.01 668.33 T
(cl and Tk) 471.55 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(\336es its own interface on the \337y) 152.1 632.33 T
(. In addition, Tk provides commands that you can use to) 274.7 632.33 T
(query the structure of the widget hierarchy) 152.1 620.11 T
(, and you can use) 321.87 620.11 T
3 F
(conf) 393.48 620.11 T
(igure) 417.46 620.11 T
1 F
( widget com-) 447.45 620.11 T
(mands to query and modify the con\336guration options of individual widgets.) 152.1 607.88 T
98.1 564.53 512.1 567.55 C
152.1 565.75 512.1 565.75 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 566.04 143.1 566.04 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(2.8) 124.63 571.55 T
(Additional features of T) 152.1 571.55 T
(cl and Tk) 285.15 571.55 T
1 10 Q
(The examples in this chapter used every aspect of the T) 152.1 547.86 T
(cl language syntax and they illus-) 373.45 547.86 T
(trated many of the most important features of T) 152.1 535.63 T
(cl and Tk. However) 341.27 535.63 T
(, T) 420.24 535.63 T
(cl and Tk contain) 430.65 535.63 T
-0.14 (many other facilities that are not used in this chapter; all of these will be described later in) 152.1 523.41 P
(the book. Here is a sampler of some of the most useful features that haven\325) 152.1 511.18 T
(t been men-) 451.42 511.18 T
(tioned yet:) 152.1 498.96 T
0 F
(Arrays and lists) 162.9 483.96 T
1 F
(. T) 230.64 483.96 T
(cl provides associative arrays for storing key-value pairs ef) 241.05 483.96 T
(\336ciently) 476.79 483.96 T
(and lists for managing aggregates of data.) 162.9 471.73 T
0 F
-0.34 (Mor) 162.9 456.73 P
-0.34 (e contr) 181.59 456.73 P
-0.34 (ol structur) 210.76 456.73 P
-0.34 (es) 255.49 456.73 P
1 F
-0.34 (. T) 263.81 456.73 P
-0.34 (cl provides several additional commands for controlling the) 273.88 456.73 P
(\337ow of execution, such as) 162.9 444.51 T
3 F
(eval) 269.49 444.51 T
1 F
(,) 293.48 444.51 T
3 F
(for) 298.48 444.51 T
1 F
(,) 316.07 444.51 T
3 F
(foreach) 321.06 444.51 T
1 F
(, and) 363.04 444.51 T
3 F
(switch) 384.97 444.51 T
1 F
(.) 420.95 444.51 T
0 F
(String manipulation) 162.9 429.51 T
1 F
(. T) 249.26 429.51 T
(cl contains a number of commands for manipulating strings,) 259.67 429.51 T
-0.18 (such as measuring their length and performing regular expression pattern matching and) 162.9 417.28 P
(substitution.) 162.9 405.06 T
0 F
(File access) 162.9 390.06 T
1 F
(. Y) 207.59 390.06 T
(ou can read and write \336les from T) 218.8 390.06 T
(cl scripts and retrieve directory infor-) 353.83 390.06 T
(mation and \336le attributes such as length and creation time.) 162.9 377.83 T
0 F
(Mor) 162.9 362.83 T
(e widgets) 181.59 362.83 T
1 F
(. Tk contains many widget classes besides those shown here, such as) 220.73 362.83 T
(menus, scrollbars, a drawing widget called a) 162.9 350.61 T
2 F
(canvas) 343.04 350.61 T
1 F
(, and a text widget that makes it) 370.8 350.61 T
(easy to achieve hypertext ef) 162.9 338.38 T
(fects.) 274.29 338.38 T
0 F
(Access to other X facilities) 162.9 323.38 T
1 F
(. Tk provides commands for accessing all of the major) 275.03 323.38 T
(facilities in the X W) 162.9 311.16 T
(indow System, such as a command for communicating with the) 243.56 311.16 T
-0.12 (window manager \050to set the window\325) 162.9 298.93 P
-0.12 (s title, for example\051, a command for retrieving the) 310.82 298.93 P
(selection, and a command to manage the input focus.) 162.9 286.71 T
0 F
(C interfaces) 162.9 271.71 T
1 F
(. T) 214.24 271.71 T
(cl provides C library procedures that you can use to de\336ne your own) 224.65 271.71 T
-0.04 (new T) 162.9 259.48 P
-0.04 (cl commands in C, and Tk provides a library that you can use to create your own) 187.42 259.48 P
(widget classes and geometry managers in C.) 162.9 247.26 T
98.1 203.9 512.1 206.92 C
152.1 205.12 512.1 205.12 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 205.41 143.1 205.41 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(2.9) 124.63 210.92 T
(Extensions and applications) 152.1 210.92 T
1 10 Q
(T) 152.1 187.23 T
(cl and Tk have an active and rapidly-growing user community that now numbers in the) 157.51 187.23 T
-0.12 (tens of thousands. Many people have built applications based on T) 152.1 175.01 P
-0.12 (cl and Tk and packages) 416.4 175.01 P
(that extend the base functionality of T) 152.1 162.78 T
(cl and Tk. Several of these packages and applica-) 303.52 162.78 T
(tions are publically available and widely used in the T) 152.1 150.56 T
(cl/Tk community) 367.64 150.56 T
(. There isn\325) 436.12 150.56 T
(t space) 481.74 150.56 T
(in this book to discuss all of the exciting T) 152.1 138.33 T
(cl/Tk software in detail but this section gives a) 321.59 138.33 T
FMENDPAGE
%%EndPage: "18" 27
%%Page: "19" 27
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(2.9 Extensions and applications) 98.1 668.33 T
4 F
(19) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(quick overview of \336ve of the most popular extensions and applications. See Appendix A) 152.1 632.33 T
(for information on how you can obtain them and other contributed T) 152.1 620.18 T
(cl/Tk software.) 425.38 620.18 T
4 F
(2.9.1) 119.07 590.18 T
(Expect) 152.1 590.18 T
3 F
(Expect) 152.1 574.18 T
1 F
( is one of the oldest T) 188.08 574.18 T
(cl applications and also one of the most popular) 273.99 574.18 T
(. It is a pro-) 464.43 574.18 T
-0.25 (gram that \322talks\323 to interactive programs. Following a script,) 152.1 562.04 P
3 F
-0.6 (expect) 396.06 562.04 P
1 F
-0.25 ( knows what output) 432.04 562.04 P
(can be expected from a program and what the correct responses should be. It can be used) 152.1 549.89 T
-0.38 (to automatically control programs like) 152.1 537.74 P
3 F
-0.91 (ftp) 305.93 537.74 P
1 F
-0.38 (,) 323.92 537.74 P
3 F
-0.91 (telnet) 328.54 537.74 P
1 F
-0.38 (,) 364.52 537.74 P
3 F
-0.91 (rlogin) 369.14 537.74 P
1 F
-0.38 (,) 405.12 537.74 P
3 F
-0.91 (crypt) 409.74 537.74 P
1 F
-0.38 (,) 439.72 537.74 P
3 F
-0.91 (fsck) 444.34 537.74 P
1 F
-0.38 (,) 468.32 537.74 P
3 F
-0.91 (tip) 472.94 537.74 P
1 F
-0.38 (, and) 490.93 537.74 P
(others that cannot be automated from a shell script because they require interactive input.) 152.1 525.59 T
3 F
(Expect) 152.1 513.44 T
1 F
( also allows the user to take control and interact directly with the program when) 188.08 513.44 T
(desired. For example, the following) 152.1 501.3 T
3 F
(expect) 297.28 501.3 T
1 F
( script logs into a remote machine using the) 333.26 501.3 T
3 F
-0.8 (rlogin) 152.1 489.15 P
1 F
-0.33 ( program, sets the working directory to that of the originating machine, then turns) 188.08 489.15 P
(control over to the user:) 152.1 477 T
3 9 Q
(#!/usr/local/bin/expect) 179.1 462.67 T
(spawn rlogin [lindex $argv 1]) 179.1 452.52 T
(expect -re "\050%|#\051 ") 179.1 442.37 T
(send "cd [pwd]\134r") 179.1 432.22 T
(interact) 179.1 422.07 T
1 10 Q
(The) 152.1 408.41 T
3 F
(spawn) 170.14 408.41 T
1 F
(,) 200.12 408.41 T
3 F
(expect) 205.12 408.41 T
1 F
(,) 241.1 408.41 T
3 F
(send) 246.1 408.41 T
1 F
(, and) 270.08 408.41 T
3 F
(interact) 292.01 408.41 T
1 F
( commands are implemented by) 339.99 408.41 T
3 F
(expect) 470.17 408.41 T
1 F
(,) 506.15 408.41 T
(and) 152.1 396.26 T
3 F
(lindex) 169.03 396.26 T
1 F
( and) 205.01 396.26 T
3 F
(pwd) 224.44 396.26 T
1 F
( are built-in T) 242.43 396.26 T
(cl commands. The) 296.97 396.26 T
3 F
(spawn) 373.03 396.26 T
1 F
( command starts up) 403.01 396.26 T
3 F
(rlo-) 483.52 396.26 T
(gin) 152.1 384.11 T
1 F
(, using a command-line ar) 170.09 384.11 T
(gument as the name of the remote machine. The) 274 384.11 T
3 F
(expect) 468.86 384.11 T
1 F
(command waits for) 152.1 371.96 T
3 F
(rlogin) 231.77 371.96 T
1 F
( to output a prompt \050either \322) 267.75 371.96 T
3 F
(%) 379.89 371.96 T
1 F
(\323 or \322) 385.89 371.96 T
3 F
(#) 408.09 371.96 T
1 F
(\323, followed by a space\051,) 414.09 371.96 T
-0.18 (then) 152.1 359.82 P
3 F
-0.44 (send) 171.63 359.82 P
1 F
-0.18 ( outputs a command to change the working directory) 195.61 359.82 P
-0.18 (, just as if a user had typed) 404.47 359.82 P
-0.1 (the command interactively) 152.1 347.67 P
-0.1 (. Finally) 257.85 347.67 P
-0.1 (,) 290.42 347.67 P
3 F
-0.23 (interact) 295.32 347.67 P
1 F
-0.1 ( causes) 343.3 347.67 P
3 F
-0.23 (expect) 374.18 347.67 P
1 F
-0.1 ( to step out of the way so) 410.16 347.67 P
(that the user who invoked the) 152.1 335.52 T
3 F
(expect) 272.57 335.52 T
1 F
( script can now talk directly to) 308.55 335.52 T
3 F
(rlogin) 432.64 335.52 T
1 F
(.) 468.62 335.52 T
3 F
-0.17 (Expect) 170.1 323.52 P
1 F
-0.07 ( can be used for many purposes, such as a scriptable front-end to debuggers,) 206.08 323.52 P
(mailers, and other programs that don\325) 152.1 311.37 T
(t have scripting languages of their own. The pro-) 302.37 311.37 T
(grams require no changes to be driven by expect.) 152.1 299.22 T
3 F
(Expect) 350.83 299.22 T
1 F
( is also useful for regression) 386.81 299.22 T
(testing of interactive programs.) 152.1 287.07 T
3 F
(Expect) 279.51 287.07 T
1 F
( can be combined with Tk or other T) 315.49 287.07 T
(cl exten-) 461.35 287.07 T
(sions. For example, using Tk it is possible to make a graphical front end for an existing) 152.1 274.93 T
(interactive application without changing the application.) 152.1 262.78 T
3 F
(Expect) 170.1 250.78 T
1 F
( was created by Don Libes.) 206.08 250.78 T
4 F
(2.9.2) 119.07 220.78 T
(Extended T) 152.1 220.78 T
(cl) 205.23 220.78 T
1 F
(Extended T) 152.1 204.78 T
(cl \050T) 197.76 204.78 T
(clX\051 is a library package that augments the built-in T) 216.21 204.78 T
(cl commands with) 427.3 204.78 T
(many additional commands and procedures oriented towards system programming tasks.) 152.1 192.63 T
(It can be used with any T) 152.1 180.48 T
(cl application. Here are a few of the most popular features of) 252.43 180.48 T
(T) 152.1 168.33 T
(clX:) 157.51 168.33 T
1 12 Q
(\245) 152.1 153.33 T
1 10 Q
(Access to many additional POSIX system calls and functions.) 162.9 153.33 T
1 12 Q
(\245) 152.1 138.33 T
1 10 Q
(A \336le scanning facility with functionality much like that of the) 162.9 138.33 T
3 F
(awk) 415.8 138.33 T
1 F
( program.) 433.79 138.33 T
FMENDPAGE
%%EndPage: "19" 28
%%Page: "20" 28
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(20) 98.1 668.33 T
5 F
(An Overview of T) 396.01 668.33 T
(cl and Tk) 471.55 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 F
0 X
(\245) 152.1 632.33 T
1 10 Q
(Keyed lists, which provide functionality similar to C structures.) 162.9 632.33 T
1 12 Q
(\245) 152.1 617.33 T
1 10 Q
(Commands for manipulating times and dates and converting them to and from ASCII.) 162.9 617.33 T
1 12 Q
(\245) 152.1 602.33 T
1 10 Q
(An on-line help facility) 162.9 602.33 T
(.) 255.8 602.33 T
1 12 Q
(\245) 152.1 587.33 T
1 10 Q
(Facilities for debugging, pro\336ling, and program development.) 162.9 587.33 T
(Many of the best features of T) 152.1 572.33 T
(clX are no longer part of T) 272.41 572.33 T
(clX: they turned out to be so) 378.85 572.33 T
(widely useful that they were incorporated into the T) 152.1 560.33 T
(cl core. Among the T) 359.03 560.33 T
(cl features pio-) 443.54 560.33 T
(neered by T) 152.1 548.33 T
(clX are \336le input and output, array variables, real arithmetic and transcenden-) 199.13 548.33 T
(tal functions, auto-loading, XPG-based internationalization, and the) 152.1 536.33 T
3 F
(upvar) 425.25 536.33 T
1 F
( command.) 455.23 536.33 T
(Extended T) 170.1 524.33 T
(cl was created by Karl Lehenbauer and Mark Diekhans.) 215.76 524.33 T
4 F
(2.9.3) 119.07 494.33 T
(XF) 152.1 494.33 T
1 F
(Tk makes it relatively easy to create graphical user interfaces by writing T) 152.1 478.33 T
(cl scripts, but) 448.39 478.33 T
-0.14 (XF makes it even easier) 152.1 466.33 P
-0.14 (. XF is an interactive interface builder: you design a user interface) 247.03 466.33 P
(by manipulating objects on the screen, then XF creates a T) 152.1 454.33 T
(cl script that will generate the) 385.95 454.33 T
(interface you have designed \050see Figure 2.4\051. XF provides tools for creating and con\336gur-) 152.1 442.33 T
-0.41 (ing widgets, arranging them with Tk\325) 152.1 430.33 P
-0.41 (s geometry managers, creating event bindings, and so) 298.86 430.33 P
-0.02 (on. XF manipulates a live application while it is running, so the full ef) 152.1 418.33 P
-0.02 (fect of each change) 432.28 418.33 P
(in the interface can be seen and tested immediately) 152.1 406.33 T
(.) 355.18 406.33 T
(XF supports all of Tk\325) 170.1 394.33 T
(s built-in widget classes and allows you to add new widget) 258.94 394.33 T
(classes by writing class-speci\336c T) 152.1 382.33 T
(cl scripts for XF to use to handle the classes. Y) 287.42 382.33 T
(ou) 474.34 382.33 T
(needn\325) 152.1 370.33 T
(t use XF exclusively: you can design part of a user interface with XF and part by) 179.12 370.33 T
(writing T) 152.1 358.33 T
(cl scripts. XF supports most of the currently available extensions to T) 188.88 358.33 T
(cl and Tk,) 466.34 358.33 T
(and XF itself is written in T) 152.1 346.33 T
(cl.) 262.45 346.33 T
(XF was created by Sven Delmas. It is based on an earlier interface builder for Tk) 170.1 334.33 T
-0.07 (called BYO, which was developed at the V) 152.1 322.33 P
-0.07 (ictoria University of W) 323.66 322.33 P
-0.07 (ellington, New Zealand.) 415.64 322.33 P
4 F
(2.9.4) 119.07 292.33 T
(Distributed programming) 152.1 292.33 T
1 F
(T) 152.1 276.33 T
(cl Distributed Programming \050T) 157.51 276.33 T
(cl-DP\051 is a collection of T) 280.9 276.33 T
(cl commands that simplify the) 384.29 276.33 T
(development of distributed programs. T) 152.1 264.33 T
(cl-DP\325) 310.46 264.33 T
(s most important feature is a) 336.56 264.33 T
2 F
(r) 452.6 264.33 T
(emote pr) 456.11 264.33 T
(oce-) 490.99 264.33 T
(dur) 152.1 252.33 T
(e call) 165.61 252.33 T
1 F
( facility) 187.54 252.33 T
(, which allows T) 217.7 252.33 T
(cl applications to communicate by exchanging T) 283.63 252.33 T
(cl) 477.24 252.33 T
(scripts. For example, the following script uses T) 152.1 240.33 T
(cl-DP to implement a trivial \322id server\323,) 344.33 240.33 T
(which returns unique identi\336ers in response to) 152.1 228.33 T
3 F
(GetId) 339.48 228.33 T
1 F
( requests:) 369.46 228.33 T
3 9 Q
(set myId 0) 179.1 214 T
(proc GetId {} {) 179.1 204 T
(global myId;) 200.63 194 T
(set myId [expr $myId+1]) 200.63 184 T
(return $myId) 200.63 174 T
(}) 179.1 164 T
(MakeRPCServer 4545) 179.1 154 T
FMENDPAGE
%%EndPage: "20" 29
%%Page: "21" 29
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(2.9 Extensions and applications) 98.1 668.33 T
4 F
(21) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(All of the code in this script except the last line is ordinary T) 152.1 265.14 T
(cl code that de\336nes a global) 394.3 265.14 T
(variable) 152.1 253.14 T
3 F
(myId) 186.79 253.14 T
1 F
( and a procedure) 210.78 253.14 T
3 F
(GetId) 279.6 253.14 T
1 F
( that increments the variable and returns its new) 309.58 253.14 T
-0.09 (value. The) 152.1 241.14 P
3 F
-0.21 (MakeRPCServer) 196.61 241.14 P
1 F
-0.09 ( command is implemented by T) 274.57 241.14 P
-0.09 (cl-DP; it causes the applica-) 400.31 241.14 P
(tion to listen for requests on TCP socket 4545.) 152.1 229.14 T
(Other T) 170.1 217.14 T
(cl applications can communicate with this server using scripts that look like) 200.76 217.14 T
(the following:) 152.1 205.14 T
3 9 Q
(set server [MakeRPCClient server.company.com 4545]) 179.1 190.8 T
(RPC $server GetId) 179.1 180.8 T
1 10 Q
-0 (The \336rst command opens a connection with the server and saves an identi\336er for that con-) 152.1 167.14 P
-0.06 (nection. The ar) 152.1 155.14 P
-0.06 (guments to) 212.03 155.14 P
3 F
-0.14 (MakeRPCClient) 258.57 155.14 P
1 F
-0.06 ( identify the server) 336.52 155.14 P
-0.06 (\325) 411.94 155.14 P
-0.06 (s host and the socket on) 414.72 155.14 P
(which the server is listening. The) 152.1 143.14 T
3 F
(RPC) 287.29 143.14 T
1 F
( command performs a remote procedure call. Its) 305.28 143.14 T
98.1 135 512.1 639 C
98.1 271.8 512.1 639 C
98.1 322.2 512.1 336.6 C
98.1 322.2 512.1 336.6 R
7 X
0 K
V
152.1 330.12 512.1 330.12 2 L
V
0.5 H
2 Z
0 X
N
98.1 271.8 512.1 639 C
0 9 Q
0 X
0 K
-0.02 (Figur) 152.1 316.2 P
-0.02 (e  2.4.) 173.41 316.2 P
1 F
-0.02 (A screen dump showing the main window of XF) 199.8 316.2 P
-0.02 (, an interactive application builder for) 374.17 316.2 P
98.1 289.8 512.1 304.2 C
98.1 289.8 512.1 304.2 R
7 X
0 K
V
152.1 297.72 512.1 297.72 2 L
V
0.5 H
2 Z
0 X
N
98.1 271.8 512.1 639 C
1 9 Q
0 X
0 K
(T) 152.1 307.2 T
(cl and Tk.) 156.96 307.2 T
0 0 0 430 480 258 288 201.3 347.4 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 0 0 430 480
%%Creator: xgrabsc
%%Title: overF4
%%CreationDate: Tue Aug  3 14:20:05 1993
%%EndComments
%
%
%%EndProlog
%%Page: 1 1
/inch {72 mul} def
/rlebuffer 2 string def
/samples 256 string def
/plotimage
{430 480 8 [430 0 0 -480 0 480]
% run-length decoding block
  { currentfile rlebuffer readhexstring pop pop
    rlebuffer 0 get 1 add       %% number of copies of the sample
    /nsamples exch store        %% save it away
    /lum rlebuffer 1 get store  %% the sample itself
    0 1 nsamples 1 sub { samples exch lum put } for
    samples 0 nsamples getinterval %% leave the pixels on the stack
  }
  image
} def
gsave
430 480 scale
plotimage
fef3fef3fef35df3008501f3feddaadd018501f3feddaadd018501f3fedd
aadd018501f3feddaadd018501f3feddaadd018501f3feddaadd018501f3
feddaadd018501f3feddaadd018501f305dd070000dd010012dd050004dd
010000dd010001dd01000fdd030010dd04001bdd010001dd010019dd0500
35dd010019dd010004dd010000dd01001bdd03000add010001dd010058dd
010002dd010007dd01000cdd018501f305dd010006dd010012dd010008dd
010004dd01000edd010001dd01000edd01001fdd01001ddd010002dd0100
50dd010004dd01001ddd010001dd010009dd01005cdd010002dd010007dd
01000cdd018501f305dd010003dd010000dd010001dd03000cdd010005dd
010000dd010000dd010000dd03000cdd010005dd030001dd010000dd0100
01dd030000dd010001dd010000dd010000dd010001dd010000dd010000dd
010000dd030001dd030000dd010001dd030001dd010000dd01000cdd0100
02dd030000dd010000dd030002dd010000dd010000dd010000dd010000dd
030001dd000000dd020000dd020001dd000000dd020000dd020001dd0100
00dd010000dd010002dd010000dd01000bdd020002dd020000dd010001dd
030002dd03000cdd010003dd010000dd010000dd010001dd030000dd0100
01dd030001dd010000dd010002dd030044dd010002dd010001dd030001dd
010000dd010000dd010006dd018501f305dd010003dd010000dd010000dd
010001dd01000bdd010004dd010000dd020000dd010001dd01000ddd0100
04dd010001dd010000dd020000dd010001dd010001dd010000dd010000dd
020000dd010001dd010000dd060001dd010001dd010001dd010000dd0100
01dd010000dd020000dd01000bdd010002dd080001dd010000dd010000dd
020000dd060001dd010000dd010001dd010001dd010000dd010001dd0100
01dd010000dd010000dd020000dd010000dd010000dd02000bdd020002dd
020000dd010000dd010001dd010000dd010001dd01000bdd010003dd0100
00dd020000dd010001dd010001dd010000dd010001dd010000dd020000dd
010000dd010001dd010043dd010002dd010000dd010001dd010000dd0100
00dd020000dd010005dd018501f305dd040000dd010000dd010000dd0100
01dd01000bdd050000dd010001dd010000dd010001dd01000ddd010004dd
010001dd010000dd010001dd010001dd010001dd010000dd010001dd0100
00dd010001dd010000dd020005dd010001dd010001dd010000dd010001dd
010000dd010001dd01000bdd050000dd020001dd010001dd010000dd0100
01dd010000dd020005dd010000dd010001dd010001dd010000dd010001dd
010001dd010000dd010000dd010001dd010000dd010001dd01000bdd0300
00dd030000dd010000dd020003dd01000fdd010003dd010000dd010001dd
010001dd010001dd010000dd010001dd010000dd010001dd010000dd0200
46dd060000dd010001dd010000dd010000dd010001dd010005dd018501f3
05dd010003dd010000dd010000dd05000bdd010004dd010001dd010000dd
010001dd01000ddd010004dd010001dd010000dd010001dd010001dd0100
01dd010000dd010001dd010000dd010001dd010000dd010003dd040001dd
010001dd010000dd010001dd010000dd010001dd01000bdd010004dd0100
02dd010001dd010000dd010001dd010000dd010003dd040000dd010001dd
010001dd010000dd010001dd010001dd010000dd010000dd010001dd0100
00dd010001dd01000bdd010000dd000000dd000000dd010000dd010002dd
020001dd01000fdd010003dd010000dd010001dd010001dd010001dd0100
00dd010001dd010000dd010001dd010002dd020044dd010002dd010000dd
050000dd010000dd010001dd010005dd018501f305dd010003dd010000dd
010000dd01000fdd010004dd010001dd010000dd010001dd01000ddd0100
04dd010001dd010000dd010001dd010001dd010001dd010000dd010001dd
010000dd010001dd010000dd010002dd010001dd010001dd010001dd0100
00dd010001dd010000dd010001dd01000bdd010004dd010002dd010001dd
010000dd010001dd010000dd010002dd010001dd010000dd010001dd0100
01dd010000dd010001dd010001dd010000dd010000dd010001dd010000dd
010001dd01000bdd010000dd020000dd010000dd010003dd020000dd0100
0fdd010003dd010000dd010001dd010001dd010001dd010000dd010001dd
010000dd010001dd010003dd020043dd010002dd010000dd010004dd0100
00dd010001dd010005dd018501f305dd010003dd010000dd010000dd0100
01dd01000bdd010004dd010000dd020000dd010001dd010000dd00000cdd
010001dd030001dd010000dd010001dd010001dd010001dd010000dd0100
00dd020000dd010000dd020000dd010002dd010001dd010001dd010000dd
020000dd010001dd010000dd010001dd01000bdd010004dd010002dd0100
01dd010000dd010000dd020000dd010002dd010001dd010000dd010001dd
010001dd010000dd010001dd010001dd010000dd010000dd010001dd0100
00dd010000dd02000bdd010001dd000001dd010000dd010000dd010001dd
010000dd010001dd01000cdd010001dd010001dd020000dd010001dd0100
00dd020000dd010001dd010000dd010001dd010000dd010001dd010043dd
010002dd010000dd010001dd010000dd010000dd020000dd010005dd0185
01f305dd010003dd010000dd010001dd03000cdd050001dd010000dd0100
00dd010002dd01000edd030001dd030001dd010001dd010001dd010001dd
010001dd010000dd010001dd010000dd010000dd010003dd020000dd0100
01dd010000dd010001dd030001dd010001dd01000bdd010004dd010003dd
030002dd010000dd010000dd010003dd020000dd030001dd010001dd0100
00dd010001dd010001dd010000dd010000dd010001dd010001dd010000dd
01000bdd010001dd000001dd010000dd010001dd030002dd03000edd0300
02dd010000dd010003dd010000dd010001dd030001dd010001dd010001dd
030044dd010002dd010001dd030001dd010000dd010000dd010006dd0185
01f366dd01004bdd010030dd01003add010076dd010009dd018501f304dd
060016dd070019dd070015dd010001dd010033dd07000bdd010001dd0100
2cdd010001dd01000add0a001add0b0063dd080009dd010009dd018501f3
04dd060016dd070019dd070016dd030034dd07000cdd03002edd03000bdd
0a001add0b0063dd080009dd010009dd018501f3feddaadd018501f3fedd
aadd018501f3feddaadd018501f3feddaadd018501f3feddaadd018501f3
feddaadd018501f3fe85ac8500f3fe85ad85fef3fef3fef35df3008501f3
fe85ac8501f3fe85a98500f3018501f301856ff305dd53f305dd6ff305dd
1bf30bdd39f3018501f301851af300851af300851af300851af3008505dd
1af300851af300851af3008505dd1af300851af300851af300851af30085
05dd1af300850bdd1af300851af3008501f3018501f3018501f317dd0185
01f3150001dd018501f317dd018501f317dd018505dd01f317dd018501f3
06dd060009dd018501f306dd080007dd018505dd01f317dd018501f317dd
018501f317dd018501f301dd000000dd000012dd018505dd01f317dd0185
0bdd01f317dd018501f304dd0c0005dd018501f3018501f3018501f317dd
018501f3000009dd000008dd000001dd018501f317dd018501f317dd0185
05dd01f317dd018501f304dd010006dd010007dd018501f303dd020007dd
030004dd018505dd01f317dd018501f300dd050007dd050002dd018501f3
09dd00000cdd018501f3000001dd000000dd000011dd018505dd01f317dd
01850bdd01f317dd018501f304dd000001dd000001dd000001dd000001dd
000005dd018501f3018501f3018501f317dd018501f3000009dd000008dd
000001dd018501f302dd0c0007dd018501f317dd018505dd01f301dd0200
12dd018501f302dd01000add010005dd018501f302dd010003dd000008dd
000003dd018505dd01f317dd018501f300dd000003dd000003dd000002dd
000003dd000002dd018501f308dd02000bdd018501f300dd000015dd0185
05dd01f307dd04000add01850bdd01f317dd018501f304dd000001dd0000
01dd000001dd000001dd000005dd018501f3018501f3018501f317dd0185
01f3000009dd000008dd000001dd018501f302dd00000add000007dd0185
01f317dd018505dd01f317dd018501f301dd000007dd020003dd000004dd
018501f302dd000003dd000000dd010003dd010001dd000002dd018505dd
01f317dd018501f300dd000000dd010000dd000003dd010001dd000000dd
010000dd000002dd018501f307dd04000add018501f303dd03000fdd0185
05dd01f306dd060009dd01850bdd01f300dd140001dd018501f304dd0c00
05dd018501f3018501f3018501f3000007dd00000add000001dd018501f3
000009dd000008dd000001dd018501f302dd00000add000007dd018501f3
17dd018505dd01f302dd010000dd000000dd02000cdd018501f301dd0000
01dd040001dd010002dd010004dd018501f300dd010002dd000004dd0000
01dd000003dd000002dd018505dd01f305dd010008dd010004dd018501f3
00dd000000dd010000dd000000dd050000dd000000dd010000dd000002dd
018501f308dd040009dd018501f302dd04000fdd018505dd01f305dd0100
04dd010008dd01850bdd01f300dd000002dd000002dd000002dd000002dd
000002dd000001dd018501f304dd000001dd000001dd000001dd000001dd
000005dd018501f3018501f3018501f3090002dd020003dd010001dd0185
01f3000009dd0a0001dd018501f302dd00000add040003dd018501f317dd
018505dd01f317dd018501f300dd000003dd040004dd030003dd018501f3
00dd000007dd010000dd000000dd000004dd000001dd018505dd01f304dd
010000dd000005dd020005dd018501f300dd000003dd000000dd050000dd
000003dd000002dd018501f304dd000003dd030009dd018501f302dd0200
11dd018505dd01f305dd010004dd010008dd01850bdd01f300dd000002dd
000002dd000002dd000002dd000002dd000001dd018501f304dd000001dd
000001dd000001dd000001dd000005dd018501f3018501f3018501f30900
01dd080002dd018501f3000009dd000008dd000001dd018501f302dd0000
0add000002dd000003dd018501f317dd018505dd01f302dd030000dd0200
00dd010000dd020005dd018501f300dd000003dd040003dd040003dd0185
01f3010001dd000000dd010001dd000000dd000000dd000002dd010000dd
000001dd018505dd01f304dd010001dd000003dd020006dd018501f300dd
000003dd000003dd010001dd000003dd000002dd018501f303dd020003dd
030008dd018501f307dd060008dd018505dd01f305dd010004dd010008dd
01850bdd01f300dd000002dd000002dd000002dd000002dd000002dd0000
01dd018501f304dd0c0005dd018501f3018501f3018501f3000002dd0100
02dd000001dd000002dd020004dd018501f3000009dd000008dd000001dd
018501f302dd0c0002dd000003dd018501f303dd03000fdd018505dd01f3
17dd018501f3000004dd040003dd010002dd000002dd018501f3010000dd
000001dd000000dd010005dd000003dd000001dd018505dd01f305dd0200
03dd020007dd018501f300dd000003dd000003dd000002dd000003dd0000
02dd018501f302dd010000dd010004dd010008dd018501f306dd000006dd
000007dd018505dd01f30cdd010008dd01850bdd01f300dd000002dd0000
02dd000002dd000002dd000002dd000001dd018501f304dd000001dd0000
01dd000001dd000001dd000005dd018501f3018501f3018501f303dd0100
0add010004dd018501f3000009dd000008dd000001dd018501f308dd0000
08dd000003dd018501f302dd000002dd010004dd030005dd018505dd01f3
02dd000000dd010001dd03000add018501f3000004dd030008dd010002dd
018501f300dd000000dd000000dd000002dd010001dd000001dd010002dd
000001dd018505dd01f306dd010002dd020008dd018501f300dd000003dd
000007dd000003dd000002dd018501f301dd000000dd000000dd000000dd
000005dd000007dd018501f305dd000008dd000006dd018505dd01f30cdd
010008dd01850bdd01f300dd140001dd018501f304dd000001dd000001dd
000001dd000001dd000005dd018501f3018501f3018501f303dd010005dd
000002dd010005dd018501f3000009dd000008dd000001dd018501f303dd
080005dd000003dd018501f303dd000002dd010001dd010002dd010004dd
018505dd01f317dd018501f3000004dd020005dd050002dd018501f300dd
010008dd000002dd000002dd000002dd018505dd01f307dd010000dd0200
09dd018501f300dd050007dd050002dd018501f301dd010002dd010006dd
000006dd018501f305dd010006dd010006dd018505dd01f30cdd010008dd
01850bdd01f317dd018501f304dd0c0005dd018501f3018501f3018501f3
03dd010001dd050001dd010005dd018501f3000009dd000008dd000001dd
018501f303dd000006dd000005dd000003dd018501f304dd010001dd0000
01dd000004dd000004dd018505dd01f302dd030000dd030000dd010008dd
018501f3000005dd000006dd050002dd018501f301dd000002dd020001dd
000000dd000005dd000002dd018505dd01f308dd03000add018501f317dd
018501f301dd000000dd020000dd000007dd000005dd018501f304dd0100
00dd060000dd010005dd018505dd01f30bdd020008dd01850bdd01f307dd
000002dd00000add018501f317dd018501f3018501f3018501f303dd0100
05dd000002dd010005dd018501f30b0008dd000001dd018501f303dd0800
05dd000003dd018501f300dd000003dd010000dd000000dd000002dd0200
05dd018505dd01f317dd018501f3000006dd000005dd050002dd018501f3
02dd030000dd000001dd000001dd050003dd018505dd01f308dd02000bdd
018501f303dd0a0008dd018501f301dd000004dd000008dd000004dd0185
01f304dd010000dd000000dd000000dd000000dd000000dd010005dd0185
05dd01f30add020009dd01850bdd01f307dd010000dd01000add018501f3
0add00000bdd018501f3018501f3018501f303dd01000add010004dd0185
01f3000009dd000008dd000001dd018501f308dd000008dd000003dd0185
01f300dd020003dd070007dd018505dd01f302dd010012dd018501f30000
05dd030004dd040002dd018501f307dd000001dd00000bdd018505dd01f3
08dd02000bdd018501f300dd100005dd018501f301dd000004dd000008dd
010003dd018501f305dd000000dd000000dd000000dd000000dd000000dd
000006dd018505dd01f309dd02000add01850bdd01f307dd000000dd0000
00dd00000add018501f309dd02000add018501f3018501f3018501f303dd
01000bdd010003dd018501f3000009dd000008dd000001dd018501f308dd
0a0003dd018501f301dd070000dd00000bdd018505dd01f317dd018501f3
000005dd030006dd020002dd018501f307dd000001dd00000bdd018505dd
01f307dd010000dd01000add018501f302dd00000add000007dd018501f3
01dd000004dd000008dd010003dd018501f305dd000000dd000000dd0000
00dd000000dd000000dd000006dd018505dd01f309dd01000bdd01850bdd
01f307dd000002dd00000add018501f30add00000bdd018501f3018501f3
018501f303dd01000bdd010003dd018501f3000009dd000008dd000001dd
018501f317dd018501f303dd0e0004dd018505dd01f302dd04000fdd0185
01f300dd000004dd040005dd010003dd018501f307dd000001dd00000bdd
018505dd01f306dd010001dd020009dd018501f302dd00000add000007dd
018501f301dd000004dd000007dd030002dd018501f305dd000000dd0000
00dd000000dd000000dd000000dd000006dd018505dd01f309dd01000bdd
01850bdd01f307dd000002dd00000add018501f30add00000bdd018501f3
018501f3018501f303dd01000add020003dd018501f3000009dd000008dd
000001dd018501f301dd110003dd018501f309dd090003dd018505dd01f3
17dd018501f300dd000005dd030006dd000003dd018501f307dd000001dd
00000bdd018505dd01f305dd020002dd020008dd018501f301dd01000add
010006dd018501f301dd000004dd000007dd030002dd018501f305dd0000
00dd000000dd000000dd000000dd000000dd000006dd018505dd01f309dd
01000bdd01850bdd01f307dd000002dd00000add018501f309dd02000add
018501f3018501f3018501f302dd030009dd010004dd018501f3000009dd
000008dd000001dd018501f301dd00000fdd000003dd018501f311dd0200
02dd018505dd01f302dd010012dd018501f301dd000004dd020006dd0000
04dd018501f307dd000001dd00000bdd018505dd01f304dd010001dd0000
02dd020007dd018501f302dd000000dd010007dd010006dd018501f301dd
000004dd000006dd040002dd018501f305dd000000dd000000dd000000dd
000000dd000000dd000006dd018505dd01f309dd01000bdd01850bdd01f3
05dd020002dd020008dd018501f30add00000bdd018501f3018501f30185
01f317dd018501f3150001dd018501f301dd00000fdd000003dd018501f3
13dd000002dd018505dd01f317dd018501f301dd000005dd010006dd0000
04dd018501f307dd000001dd00000bdd018505dd01f304dd010000dd0000
04dd020006dd018501f301dd01000add000007dd018501f301dd000004dd
000006dd050001dd018501f305dd000000dd000000dd000000dd000000dd
000000dd000006dd018505dd01f309dd01000bdd01850bdd01f306dd0000
04dd000009dd018501f317dd018501f3018501f3018501f317dd018501f3
000002dd000003dd000003dd000002dd000001dd000001dd018501f301dd
00000fdd000003dd018501f317dd018505dd01f302dd000013dd018501f3
02dd010003dd000005dd010005dd018501f306dd010001dd00000bdd0185
05dd01f305dd010006dd020005dd018501f303dd0a0008dd018501f302dd
000002dd000009dd030001dd018501f305dd000000dd000000dd000000dd
000000dd000000dd000006dd018505dd01f317dd01850bdd01f307dd0000
02dd00000add018501f302dd0f0004dd018501f3018501f3018501f317dd
018501f3150001dd018501f301dd00000fdd000003dd018501f317dd0185
05dd01f317dd018501f304dd010006dd010007dd018501f305dd000004dd
00000add018505dd01f310dd010004dd018501f317dd018501f303dd0200
0cdd010001dd018501f306dd010000dd000000dd000000dd020006dd0185
05dd01f309dd01000bdd01850bdd01f308dd000000dd00000bdd018501f3
02dd000001dd000001dd000001dd000001dd000001dd000004dd018501f3
018501f3018501f317dd018501f3000006dd000005dd000004dd000001dd
018501f301dd110003dd018501f317dd018505dd01f317dd018501f306dd
060009dd018501f304dd000002dd000002dd010008dd018505dd01f317dd
018501f317dd018501f317dd018501f307dd070007dd018505dd01f309dd
01000bdd01850bdd01f309dd00000cdd018501f302dd000001dd000001dd
000001dd000001dd000001dd000004dd018501f3018501f3018501f317dd
018501f3150001dd018501f317dd018501f317dd018505dd01f317dd0185
01f317dd018501f317dd018505dd01f317dd018501f317dd018501f317dd
018501f317dd018505dd01f317dd01850bdd01f317dd018501f302dd0f00
04dd018501f3018501f3018501f317dd018501f317dd018501f317dd0185
01f317dd018505dd01f317dd018501f317dd018501f317dd018505dd01f3
17dd018501f317dd018501f317dd018501f317dd018505dd01f317dd0185
0bdd01f317dd018501f317dd018501f3018501f3018501f317dd018501f3
17dd018501f317dd018501f317dd018505dd01f317dd018501f317dd0185
01f317dd018505dd01f317dd018501f317dd018501f317dd018501f317dd
018505dd01f317dd01850bdd01f317dd018501f317dd018501f3018501f3
018501f3198501f3198501f3198501f3198505dd01f3198501f3198501f3
198505dd01f3198501f3198501f3198501f3198505dd01f319850bdd01f3
198501f3198501f3018501f3018500f31a8500f31a8500f31a8500f31a85
05dd00f31a8500f31a8500f31a8505dd00f31a8500f31a8500f31a8500f3
1a8505dd00f31a850bdd00f31a8500f31a8501f3018501f30185fef3a8f3
018501f30085fef3a9f3018501f3fe85ac8500f3fe85ad85fef3fef3f2f3
008568f3008501f3fedd40dd018501f365dd018501f3fedd40dd018501f3
65dd018501f3fedd40dd018501f365dd018501f3fedd40dd018501f365dd
018501f3fedd40dd018501f303dd030001dd050008dd01001add01000add
01000add030011dd018501f3fedd40dd018501f302dd010001dd010000dd
010002dd010006dd01001bdd01000bdd010008dd010001dd010001dd0ef3
018501f3fedd40dd018501f301dd010005dd010002dd010006dd010002dd
030001dd000000dd020000dd020001dd010000dd010001dd030000dd0100
02dd010002dd010002dd010003dd010001dd010001dd0df3028501f3fedd
40dd018501f301dd010005dd010002dd010005dd010002dd010001dd0100
00dd010001dd010001dd010000dd020000dd010001dd010001dd010002dd
010003dd010001dd010003dd010001dd010001dd01f30add038501f3fedd
40dd018501f301dd010005dd050006dd010002dd010001dd010000dd0100
01dd010001dd010000dd010001dd010001dd010002dd010000dd010004dd
010007dd010001dd010001dd01f30add038501f3fedd40dd018501f301dd
010005dd010002dd010005dd010002dd050000dd010001dd010001dd0100
00dd010001dd010001dd010002dd010000dd010004dd010007dd010001dd
010001dd01f30add038501f3fedd40dd018501f301dd010005dd010002dd
010005dd010002dd010004dd010001dd010001dd010000dd010001dd0100
01dd010003dd020005dd010007dd010001dd010001dd01f30e8501f3fedd
40dd018501f302dd010001dd010000dd010002dd010005dd010002dd0100
01dd010000dd010001dd010001dd010000dd020000dd010001dd010000dd
000001dd020005dd010001dd010003dd010001dd010001dd00f30f8501f3
fedd40dd018501f303dd030001dd050006dd010003dd030001dd010001dd
010001dd010000dd010000dd010003dd010003dd010005dd010001dd0100
04dd030011dd018501f3fedd40dd018501f317dd010013dd01000cdd0000
05dd01001fdd018501f3fedd40dd018501f317dd010013dd01000bdd0100
05dd01001fdd018501f3fedd40dd018501f318dd010012dd01000add0100
05dd010020dd018501f3fedd40dd018501f365dd018501f3fedd40dd0185
01f365dd018501f3fe85428501f3678500f3fe85438500f36885fef3fef3
2ef30085fef32df3008501f37bdd018501f3fedd2add018501f37bdd0185
01f3fedd2add018501f37bdd018501f3fedd2add018501f37bdd018501f3
fedd2add018501f303dd030020dd010010dd010004dd01000fdd010014dd
010001dd010009dd018501f3fedd2add018501f302dd010001dd01001fdd
010017dd01000fdd010014dd010001dd010009dd018501f3fedd2add0185
01f301dd010004dd010001dd010000dd010000dd030000dd010000dd0300
01dd010000dd010001dd030004dd010001dd010001dd010000dd010001dd
010000dd010001dd010000dd010001dd030001dd030004dd010000dd0100
02dd030001dd030000dd010000dd010002dd010001dd018501f3fedd2add
018501f301dd010004dd010001dd010000dd0b0001dd010000dd020000dd
010001dd010005dd010001dd010001dd010000dd010000dd010000dd0200
00dd010000dd020000dd010001dd010001dd010005dd020000dd010000dd
010001dd010001dd010001dd020000dd010001dd010001dd018501f3fedd
2add018501f301dd010004dd010001dd010000dd020001dd020001dd0100
01dd010000dd010001dd010001dd010006dd010000dd010000dd010001dd
010000dd010001dd010000dd010001dd010000dd010001dd010001dd0100
05dd010001dd010004dd010001dd010001dd010001dd010005dd018501f3
fedd2add018501f301dd010004dd010001dd010000dd010002dd010002dd
050000dd010001dd010001dd010006dd010000dd010000dd010001dd0100
00dd010001dd010000dd010001dd010000dd050001dd010005dd010001dd
010001dd040001dd010001dd010001dd010005dd018501f3fedd2add0185
01f301dd010004dd010001dd010000dd010002dd010002dd010004dd0100
01dd010001dd010006dd010000dd010000dd010001dd010000dd010001dd
010000dd010001dd010000dd010005dd010005dd010001dd010000dd0100
01dd010001dd010001dd010001dd010005dd018501f3fedd2add018501f3
02dd010001dd030000dd020000dd010002dd010002dd010001dd010000dd
010001dd010001dd010000dd000005dd010001dd010002dd010000dd0100
00dd020000dd010000dd020000dd010001dd010001dd010000dd000003dd
020000dd010000dd010001dd010001dd010000dd020001dd010001dd0100
01dd018501f301dd0100fedd26dd018501f303dd030001dd010000dd0100
00dd010002dd010003dd030001dd010001dd010002dd010006dd010001dd
010002dd010001dd010000dd010001dd010000dd010001dd030003dd0100
04dd010000dd010002dd020000dd010001dd010000dd010001dd010001dd
010001dd018501f301dd0100fedd26dd018501f349dd010010dd01001cdd
018501f3fedd2add018501f345dd010001dd010010dd01001cdd018501f3
fedd2add018501f346dd030011dd01001cdd018501f3fedd2add018501f3
7bdd018501f3fedd2add018501f37bdd018501f3fedd2add018501f37d85
01f3fe852c8500f37e8500f3fe852d85fef3fef373f30085e7f3008501f3
c0dd018501f3e4dd018501f3c0dd018501f3e4dd018501f3c0dd018501f3
e4dd018501f3c0dd018501f352dd070018dd010008dd010063dd018501f3
34dd010001dd010001dd030004dd01000fdd01000cdd010057dd018501f3
55dd01001bdd010008dd010063dd018501f334dd010001dd010001dd0100
06dd01000fdd01000cdd010057dd018501f355dd010003dd030001dd0000
00dd020000dd020001dd010000dd010001dd010001dd030001dd030001dd
030002dd030055dd018501f334dd010001dd010001dd030001dd010000dd
010001dd010000dd010001dd030001dd030005dd030001dd010001dd0300
02dd030002dd030002dd030002dd030035dd018501f355dd010002dd0100
01dd010000dd010001dd010001dd010000dd020000dd010000dd010000dd
010001dd010001dd010001dd010001dd010000dd010001dd010054dd0185
01f335dd000001dd010001dd000000dd010000dd010000dd020000dd0100
00dd020000dd010001dd010001dd010005dd010001dd010000dd010000dd
010001dd010000dd010001dd010000dd010001dd010000dd010001dd0100
00dd010001dd010034dd018501f355dd010002dd010001dd010000dd0100
01dd010001dd010000dd010001dd010000dd010004dd010001dd010001dd
010001dd010000dd020057dd018501f335dd010000dd010000dd010000dd
010000dd010001dd010000dd010001dd010000dd010001dd010001dd0100
05dd010004dd010004dd010000dd020003dd020003dd010001dd010000dd
020037dd018501f355dd010002dd050000dd010001dd010001dd010000dd
010001dd010000dd010001dd040001dd010001dd050002dd020055dd0185
01f335dd010000dd010000dd010000dd010000dd010001dd010000dd0100
01dd010000dd050001dd010005dd010004dd010001dd040002dd020003dd
020001dd050002dd020035dd018501f355dd010002dd010004dd010001dd
010001dd010000dd010001dd010000dd010000dd010001dd010001dd0100
01dd010007dd020054dd018501f336dd010001dd010001dd010000dd0100
01dd010000dd010001dd010000dd010005dd010005dd010004dd010000dd
010001dd010003dd020003dd020000dd010007dd020034dd018501f355dd
010002dd010001dd010000dd010001dd010001dd010000dd020000dd0100
00dd010000dd010001dd010001dd010000dd020001dd010000dd010001dd
010054dd018501f336dd010001dd010001dd010000dd010000dd020000dd
010000dd020000dd010001dd010001dd010000dd000003dd010001dd0100
00dd010000dd010001dd010000dd010001dd010000dd010001dd010000dd
010001dd010000dd010001dd010034dd018501f355dd010003dd030001dd
010001dd010001dd010000dd010000dd010001dd010001dd020000dd0100
01dd010001dd030002dd030055dd018501f336dd010001dd010001dd0100
01dd010000dd010001dd010000dd010001dd030003dd010005dd030001dd
010001dd020000dd010000dd030002dd030002dd030002dd030035dd0185
01f36cdd010075dd018501f34cdd010071dd018501f36cdd010075dd0185
01f348dd010001dd010071dd018501f36cdd010075dd018501f349dd0300
72dd018501f3e4dd018501f3c0dd018501f3e4dd018501f3c0dd018501f3
e4dd018501f3126baf8501f3126bd38501f3116b00efac8500f3018501f3
116b00efd08500f3018501f3016b06b2008506b201ef0185a9f101f30185
01f3016b06b2008506b201ef0185cddd01f3018501f3016b05b200f30185
05b201ef018500f1a7c9007901f3018501f3016b05b200f3018505b201ef
0185cddd01f3018501f3016b05b200f3018505b201ef018500f1a7c90079
01f3018501f3016b05b200f3018505b201ef0185cddd01f3018501f3016b
04b201f3028504b201ef018500f102c904006dc9010001c9050000c90100
05c901001cc9007901f3018501f3016b04b201f3028504b201ef018504dd
030002dd020017dd0400a1dd01f3018501f3016b04b201f300dd018504b2
01ef018500f102c9010001c9010007c9010004c901005ac9010004c90100
02c9010006c901001bc9007901f3018501f3016b04b201f300dd018504b2
01ef018503dd010001dd010002dd010010dd010004dd010001dd0100a0dd
01f3018501f3016b03b201f302dd018503b201ef018500f102c9010001c9
010007c9010004c901005ac9010004c9010002c9010006c901001bc90079
01f3018501f3016b03b201f302dd018503b201ef018503dd010001dd0100
02dd010010dd010004dd010001dd0100a0dd01f3018501f3016b02b202f3
02dd018503b201ef018500f102c9010001c9010000c9010001c9010000c9
030002c9030003c9030001c9040048c9010005c9010002c9010001c90100
03c901001ac9007901f3018501f3016b02b202f302dd018503b201ef0185
03dd010001dd010002dd010003dd030001dd040001dd030002dd010001dd
010001dd030001dd010001dd010092dd01f3018501f3016b02b201f304dd
018502b201ef018500f102c9040001c9010001c9010000c9010004c90100
04c9010001c9010000c9010001c9010047c9010005c9010002c9010000c9
010004c901001ac9007901f3018501f3016b02b201f304dd018502b201ef
018503dd050002dd010002dd010001dd010000dd010001dd010000dd0100
04dd040001dd010001dd010000dd010001dd010092dd01f3018501f3016b
01b201f306dd018501b201ef018500f102c9010001c9010000c9010001c9
010000c9010004c9010004c9010001c9010000c9010001c9010047c90100
05c9010002c9030005c901001ac9007901f3018501f3016b01b201f306dd
018501b201ef018503dd010001dd010002dd010002dd050000dd010004dd
010004dd010001dd010000dd010001dd010001dd030093dd01f3018501f3
016b01b201f306dd018501b201ef018500f102c9010001c9010000c90100
01c9010000c9010004c9010004c9010001c9010000c9010001c9010048c9
010004c9010002c9030004c901001bc9007901f3018501f3016b01b201f3
06dd018501b201ef018503dd010001dd010002dd010002dd010004dd0100
04dd010004dd010001dd010000dd010001dd010001dd030093dd01f30185
01f3016b00b201f308dd018500b201ef018500f102c9010001c9010000c9
010001c9010000c9010001c9010000c9010001c9010000c9010001c90100
00c9010001c9010048c9010004c9010002c9010000c9010003c901001bc9
007901f3018501f3016b00b201f308dd018500b201ef018503dd010001dd
010002dd010002dd010001dd010000dd010004dd010001dd010000dd0100
01dd010000dd010001dd010000dd010001dd010092dd01f3018501f3016b
00b200f30b8500b201ef018500f102c9040002c9040001c9030002c90300
02c9030001c9010001c9010049c9010003c9010002c9010001c9010001c9
01001cc9007901f3018501f3016b00b200f30b8500b201ef018503dd0100
01dd010000dd050001dd030001dd010005dd030001dd040002dd030001dd
010001dd010092dd01f3018501f3016b00f30d8501ef018500f1a7c90079
01f3018501f3016b00f30d8501ef0185cddd01f3018501f3016b00b20cf3
00b201ef018500f1a7c9007901f3018501f3016b00b20cf300b201ef0185
cddd01f3018501f3016b00b20bf3008500b201ef018500f1a7c9007901f3
018501f3016b00b20bf3008500b201ef0185cddd01f3018501f3016b00b2
01f308dd018500b201ef018500f1a87901f3018501f3016b00b201f308dd
018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b201ef
0185a9dd01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3
018501f3016b00b201f308dd018500b201ef0185a9dd01f3018501f3016b
00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f308dd
018500b201ef0185a9dd01f3018501f3016b00b201f308dd018500b201ef
0185cddd01f3018501f3016b00b201f308dd018500b201ef018504dd0300
6ddd010001dd050000dd010005dd01001ddd01f3018501f3016b00b201f3
08dd018500b201ef018503dd050001dd030001dd0400b6dd01f3018501f3
016b00b201f308dd018500b201ef018503dd010001dd01006bdd010004dd
010002dd010006dd01001cdd01f3018501f3016b00b201f308dd018500b2
01ef018503dd010004dd010001dd010000dd010001dd0100b5dd01f30185
01f3016b00b201f308dd018500b201ef018503dd01006fdd010004dd0100
02dd010006dd01001cdd01f3018501f3016b00b201f308dd018500b201ef
018503dd010004dd010004dd010001dd0100b5dd01f3018501f3016b00b2
01f308dd018500b201ef018503dd010005dd030001dd040001dd010001dd
010001dd030002dd030048dd010005dd010002dd010001dd010003dd0100
1bdd01f3018501f3016b00b201f308dd018500b201ef018503dd010004dd
010004dd010001dd010001dd030001dd010001dd0100a7dd01f3018501f3
016b00b201f308dd018500b201ef018503dd010008dd010000dd010001dd
010000dd010001dd010004dd010000dd010001dd010047dd010005dd0100
02dd010000dd010004dd01001bdd01f3018501f3016b00b201f308dd0185
00b201ef018503dd040002dd030001dd040001dd010001dd010000dd0100
01dd0100a7dd01f3018501f3016b00b201f308dd018500b201ef018503dd
010005dd040000dd010001dd010000dd010001dd010001dd040001dd0100
4add010005dd010002dd030005dd01001bdd01f3018501f3016b00b201f3
08dd018500b201ef018503dd010008dd010000dd010001dd010000dd0100
01dd010001dd0300a8dd01f3018501f3016b00b201f308dd018500b201ef
018503dd010004dd010001dd010000dd010001dd010001dd030001dd0100
01dd010003dd010049dd010004dd010002dd030004dd01001cdd01f30185
01f3016b00b201f308dd018500b201ef018503dd010008dd010000dd0100
01dd010000dd010001dd010001dd0300a8dd01f3018501f3016b00b201f3
08dd018500b201ef018503dd010001dd010000dd010001dd010000dd0100
01dd010001dd030001dd010001dd010000dd010001dd010048dd010004dd
010002dd010000dd010003dd01001cdd01f3018501f3016b00b201f308dd
018500b201ef018503dd010004dd010001dd010000dd010001dd010000dd
010001dd010000dd010001dd0100a7dd01f3018501f3016b00b201f308dd
018500b201ef018504dd030002dd040000dd010001dd010002dd010003dd
040001dd03004add010003dd010002dd010001dd010001dd01001ddd01f3
018501f3016b00b201f308dd018500b201ef018503dd010005dd030001dd
040002dd030001dd010001dd0100a7dd01f3018501f3016b00b201f308dd
018500b201ef0185a9dd01f3018501f3016b00b201f308dd018500b201ef
0185cddd01f3018501f3016b00b201f308dd018500b201ef0185a9dd01f3
018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3016b
00b201f308dd018500b201ef0185a9dd01f3018501f3016b00b201f308dd
018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b201ef
0185a9dd01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3
018501f3016b00b201f308dd018500b201ef0185a9dd01f3018501f3016b
00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f308dd
018500b201ef0185a9dd01f3018501f3016b00b201f308dd018500b201ef
0185cddd01f3018501f3016b00b201f308dd018500b201ef0185a9dd01f3
018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3016b
00b201f308dd018500b201ef018504dd030001dd010012dd010004dd0100
4ddd010001dd050000dd010005dd01001ddd01f3018501f3016b00b201f3
08dd018500b201ef018503dd050015dd0400a8dd01f3018501f3016b00b2
01f308dd018500b201ef018503dd010001dd010000dd010012dd010004dd
01000bdd010004dd010037dd010004dd010002dd010006dd01001cdd01f3
018501f3016b00b201f308dd018500b201ef018505dd010010dd010004dd
010001dd0100a7dd01f3018501f3016b00b201f308dd018500b201ef0185
03dd010004dd010012dd010004dd01000bdd010004dd010037dd010004dd
010002dd010006dd01001cdd01f3018501f3016b00b201f308dd018500b2
01ef018505dd010010dd010004dd010001dd0100a7dd01f3018501f3016b
00b201f308dd018500b201ef018503dd010004dd040002dd030002dd0300
01dd010001dd010000dd040001dd010001dd010000dd030002dd030003dd
030001dd040025dd010005dd010002dd010001dd010003dd01001bdd01f3
018501f3016b00b201f308dd018500b201ef018505dd010003dd030001dd
010001dd010000dd030002dd010001dd010001dd030001dd010001dd0100
99dd01f3018501f3016b00b201f308dd018500b201ef018503dd010004dd
010001dd010000dd010001dd010000dd010001dd010000dd010000dd0100
01dd010001dd010000dd010001dd010000dd010004dd010004dd010001dd
010000dd010001dd010024dd010005dd010002dd010000dd010004dd0100
1bdd01f3018501f3016b00b201f308dd018500b201ef018505dd010002dd
010001dd010000dd010001dd010000dd010004dd040001dd010001dd0100
00dd010001dd010099dd01f3018501f3016b00b201f308dd018500b201ef
018503dd010004dd010001dd010000dd050000dd010004dd030002dd0100
01dd010000dd010001dd010000dd010004dd010004dd010001dd010000dd
010001dd010024dd010005dd010002dd030005dd01001bdd01f3018501f3
016b00b201f308dd018500b201ef018505dd010002dd050001dd030001dd
010004dd010001dd010000dd010001dd010001dd03009add01f3018501f3
016b00b201f308dd018500b201ef018503dd010004dd010001dd010000dd
010004dd010004dd030002dd010001dd010000dd010001dd010000dd0100
04dd010004dd010001dd010000dd010001dd010025dd010004dd010002dd
030004dd01001cdd01f3018501f3016b00b201f308dd018500b201ef0185
05dd010002dd010005dd030001dd010004dd010001dd010000dd010001dd
010001dd03009add01f3018501f3016b00b201f308dd018500b201ef0185
03dd010001dd010000dd010001dd010000dd010001dd010000dd010001dd
010000dd010000dd010001dd010001dd010000dd010001dd010000dd0100
01dd010000dd010001dd010000dd010001dd010000dd010001dd010025dd
010004dd010002dd010000dd010003dd01001cdd01f3018501f3016b00b2
01f308dd018500b201ef018505dd010002dd010001dd010000dd010001dd
010000dd010001dd010000dd010001dd010000dd010001dd010000dd0100
01dd010099dd01f3018501f3016b00b201f308dd018500b201ef018504dd
030001dd010001dd010001dd030002dd030001dd010001dd010000dd0400
02dd040001dd030002dd030002dd030001dd010001dd010026dd010003dd
010002dd010001dd010001dd01001ddd01f3018501f3016b00b201f308dd
018500b201ef018505dd010003dd030001dd010001dd010001dd030001dd
040002dd030001dd010001dd010099dd01f3018501f3016b00b201f308dd
018500b201ef0185a9dd01f3018501f3016b00b201f308dd018500b201ef
0185cddd01f3018501f3016b00b201f308dd018500b201ef0185a9dd01f3
018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3016b
00b201f308dd018500b201ef0185a9dd01f3018501f3016b00b201f308dd
018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b201ef
0185a9dd01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3
018501f3016b00b201f308dd018500b201ef0185a9dd01f3018501f3016b
00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f308dd
018500b201ef0185a9dd01f3018501f3016b00b201f308dd018500b201ef
0185cddd01f3018501f3016b00b201f308dd018500b201ef0185a9dd01f3
018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3016b
00b201f308dd018500b201ef018503dd05006cdd010001dd050000dd0100
05dd01001ddd01f3018501f3016b00b201f308dd018500b201ef018503dd
010001dd01000edd010001dd010007dd0400a1dd01f3018501f3016b00b2
01f308dd018500b201ef018503dd01000bdd010061dd010004dd010002dd
010006dd01001cdd01f3018501f3016b00b201f308dd018500b201ef0185
03dd010001dd01000edd010001dd010007dd010001dd0100a0dd01f30185
01f3016b00b201f308dd018500b201ef018503dd01000bdd010061dd0100
04dd010002dd010006dd01001cdd01f3018501f3016b00b201f308dd0185
00b201ef018504dd03000fdd020000dd010007dd010001dd0100a0dd01f3
018501f3016b00b201f308dd018500b201ef018503dd010004dd040001dd
030002dd040001dd010001dd01004edd010005dd010002dd010001dd0100
03dd01001bdd01f3018501f3016b00b201f308dd018500b201ef018504dd
030002dd030002dd030001dd020000dd010001dd030001dd010001dd0100
01dd030001dd010001dd010092dd01f3018501f3016b00b201f308dd0185
00b201ef018503dd040001dd010001dd010000dd010004dd010001dd0100
00dd010001dd01004edd010005dd010002dd010000dd010004dd01001bdd
01f3018501f3016b00b201f308dd018500b201ef018505dd010002dd0100
01dd010000dd010001dd010000dd050000dd010001dd010000dd040001dd
010001dd010000dd010001dd010092dd01f3018501f3016b00b201f308dd
018500b201ef018503dd010004dd010001dd010000dd010004dd010004dd
010001dd01004edd010005dd010002dd030005dd01001bdd01f3018501f3
016b00b201f308dd018500b201ef018505dd010002dd050001dd010003dd
010000dd020000dd010001dd010000dd010001dd010000dd010001dd0100
01dd030093dd01f3018501f3016b00b201f308dd018500b201ef018503dd
010004dd010001dd010000dd010004dd010004dd010001dd01004fdd0100
04dd010002dd030004dd01001cdd01f3018501f3016b00b201f308dd0185
00b201ef018505dd010002dd010007dd010001dd010000dd020000dd0100
01dd010000dd010001dd010000dd010001dd010001dd030093dd01f30185
01f3016b00b201f308dd018500b201ef018503dd010004dd010001dd0100
00dd010001dd010000dd010005dd04004fdd010004dd010002dd010000dd
010003dd01001cdd01f3018501f3016b00b201f308dd018500b201ef0185
05dd010002dd010001dd010000dd010001dd010000dd010001dd010000dd
010001dd010000dd010001dd010000dd010001dd010000dd010001dd0100
92dd01f3018501f3016b00b201f308dd018500b201ef018503dd050000dd
010001dd010001dd030001dd010008dd010050dd010003dd010002dd0100
01dd010001dd01001ddd01f3018501f3016b00b201f308dd018500b201ef
018505dd010003dd030002dd030001dd010001dd010001dd030001dd0400
02dd030001dd010001dd010092dd01f3018501f3016b00b201f308dd0185
00b201ef01851fdd010001dd010083dd01f3018501f3016b00b201f308dd
018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b201ef
018520dd030084dd01f3018501f3016b00b201f308dd018500b201ef0185
cddd01f3018501f3016b00b201f308dd018500b201ef0185a9dd01f30185
01f3016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b2
01f308dd018500b201ef0185a9dd01f3018501f3016b00b201f308dd0185
00b201ef0185cddd01f3018501f3016b00b201f308dd018500b201ef0185
a9dd01f3018501f3016b00b201f308dd018500b201ef0185cddd01f30185
01f3016b00b201f308dd018500b201ef0185a9dd01f3018501f3016b00b2
01f308dd018500b201ef0185cddd01f3018501f3016b00b201f308dd0185
00b201ef0185a9dd01f3018501f3016b00b201f308dd018500b201ef0185
cddd01f3018501f3016b00b201f308dd018500b201ef018503dd05006cdd
010001dd050000dd010005dd01001ddd01f3018501f3016b00b201f308dd
018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b201ef
018503dd01006fdd010004dd010002dd010006dd01001cdd01f3018501f3
016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f3
08dd018500b201ef018503dd01006fdd010004dd010002dd010006dd0100
1cdd01f3018501f3016b00b201f308dd018500b201ef0185cddd01f30185
01f3016b00b201f308dd018500b201ef018503dd010004dd040002dd0300
01dd010000dd010002dd03004fdd010005dd010002dd010001dd010003dd
01001bdd01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3
018501f3016b00b201f308dd018500b201ef018503dd040001dd010001dd
010004dd010000dd050000dd010001dd01004edd010005dd010002dd0100
00dd010004dd01001bdd01f3018501f3016b00b201f308dd018500b201ef
0185cddd01f3018501f3016b00b201f308dd018500b201ef018503dd0100
04dd010005dd040000dd050000dd05004edd010005dd010002dd030005dd
01001bdd01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3
018501f3016b00b201f308dd018500b201ef018503dd010004dd010004dd
010001dd010000dd010001dd010000dd010053dd010004dd010002dd0300
04dd01001cdd01f3018501f3016b00b201f308dd018500b201ef0185cddd
01f3018501f3016b00b201f308dd018500b201ef018503dd010004dd0100
04dd010001dd010000dd010001dd010000dd010001dd01004fdd010004dd
010002dd010000dd010003dd01001cdd01f3018501f3016b00b201f308dd
018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b201ef
018503dd010004dd010005dd040000dd010001dd010001dd030051dd0100
03dd010002dd010001dd010001dd01001ddd01f3018501f3016b00b201f3
08dd018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b2
01ef0185a9dd01f3018501f3016b00b201f308dd018500b201ef0185cddd
01f3018501f3016b00b201f308dd018500b201ef0185a9dd01f3018501f3
016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f3
08dd018500b201ef0185a9dd01f3018501f3016b00b201f308dd018500b2
01ef0185cddd01f3018501f3016b00b201f308dd018500b201ef0185a9dd
01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3
016b00b201f308dd018500b201ef0185a9dd01f3018501f3016b00b201f3
08dd018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b2
01ef0185a9dd01f3018501f3016b00b201f308dd018500b201ef0185cddd
01f3018501f3016b00b201f308dd018500b201ef0185a9dd01f3018501f3
016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f3
08dd018500b201ef018503dd01000bdd01000cdd020052dd010001dd0500
00dd010005dd01001ddd01f3018501f3016b00b201f308dd018500b201ef
0185cddd01f3018501f3016b00b201f308dd018500b201ef018503dd0100
0bdd01000ddd010051dd010004dd010002dd010006dd01001cdd01f30185
01f3016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b2
01f308dd018500b201ef018503dd01000bdd01000ddd010051dd010004dd
010002dd010006dd01001cdd01f3018501f3016b00b201f308dd018500b2
01ef0185cddd01f3018501f3016b00b201f308dd018500b201ef018503dd
010005dd030001dd040002dd030003dd010050dd010005dd010002dd0100
01dd010003dd01001bdd01f3018501f3016b00b201f308dd018500b201ef
0185cddd01f3018501f3016b00b201f308dd018500b201ef018503dd0100
08dd010000dd010001dd010000dd010001dd010002dd010050dd010005dd
010002dd010000dd010004dd01001bdd01f3018501f3016b00b201f308dd
018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b201ef
018503dd010005dd040000dd010001dd010000dd050002dd010050dd0100
05dd010002dd030005dd01001bdd01f3018501f3016b00b201f308dd0185
00b201ef0185cddd01f3018501f3016b00b201f308dd018500b201ef0185
03dd010004dd010001dd010000dd010001dd010000dd010006dd010051dd
010004dd010002dd030004dd01001cdd01f3018501f3016b00b201f308dd
018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b201ef
018503dd010004dd010001dd010000dd010001dd010000dd010001dd0100
02dd010051dd010004dd010002dd010000dd010003dd01001cdd01f30185
01f3016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b2
01f308dd018500b201ef018503dd050001dd040000dd040002dd030001dd
050050dd010003dd010002dd010001dd010001dd01001ddd01f3018501f3
016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f3
08dd018500b201ef0185a9dd01f3018501f3016b00b201f308dd018500b2
01ef0185cddd01f3018501f3016b00b201f308dd018500b201ef0185a9dd
01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3
016b00b201f308dd018500b201ef0185a9dd01f3018501f3016b00b201f3
08dd018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b2
01ef0185a9dd01f3018501f3016b00b201f308dd018500b201ef0185cddd
01f3018501f3016b00b201f308dd018500b201ef0185a9dd01f3018501f3
016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f3
08dd018500b201ef0185a9dd01f3018501f3016b00b201f308dd018500b2
01ef0185cddd01f3018501f3016b00b201f308dd018500b201ef0185a9dd
01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3
016b00b201f308dd018500b201ef018503dd010006dd010010dd010054dd
010001dd050000dd010005dd01001ddd01f3018501f3016b00b201f308dd
018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b201ef
018503dd010006dd010009dd010004dd010053dd010004dd010002dd0100
06dd01001cdd01f3018501f3016b00b201f308dd018500b201ef0185cddd
01f3018501f3016b00b201f308dd018500b201ef018503dd010012dd0100
04dd010053dd010004dd010002dd010006dd01001cdd01f3018501f3016b
00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f308dd
018500b201ef018503dd010005dd020003dd030001dd030002dd040002dd
030001dd010001dd010040dd010005dd010002dd010001dd010003dd0100
1bdd01f3018501f3016b00b201f308dd018500b201ef0185cddd01f30185
01f3016b00b201f308dd018500b201ef018503dd010006dd010002dd0100
01dd010000dd010004dd010001dd010000dd010001dd010000dd010001dd
010040dd010005dd010002dd010000dd010004dd01001bdd01f3018501f3
016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f3
08dd018500b201ef018503dd010006dd010003dd010003dd010004dd0100
01dd010000dd010001dd010001dd030041dd010005dd010002dd030005dd
01001bdd01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3
018501f3016b00b201f308dd018500b201ef018503dd010006dd010005dd
010001dd010004dd010001dd010000dd010001dd010001dd030042dd0100
04dd010002dd030004dd01001cdd01f3018501f3016b00b201f308dd0185
00b201ef0185cddd01f3018501f3016b00b201f308dd018500b201ef0185
03dd010006dd010002dd010001dd010000dd010001dd010000dd010001dd
010000dd010001dd010000dd010001dd010041dd010004dd010002dd0100
00dd010003dd01001cdd01f3018501f3016b00b201f308dd018500b201ef
0185cddd01f3018501f3016b00b201f308dd018500b201ef018503dd0500
00dd050001dd030002dd030001dd040002dd030001dd010001dd010042dd
010003dd010002dd010001dd010001dd01001ddd01f3018501f3016b00b2
01f308dd018500b201ef0185cddd01f3018501f3016b00b201f308dd0185
00b201ef0185a9dd01f3018501f3016b00b201f308dd018500b201ef0185
cddd01f3018501f3016b00b201f308dd018500b201ef0185a9dd01f30185
01f3016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b2
01f308dd018500b201ef0185a9dd01f3018501f3016b00b201f308dd0185
00b201ef0185cddd01f3018501f3016b00b201f308dd018500b201ef0185
a9dd01f3018501f3016b00b201f308dd018500b201ef0185cddd01f30185
01f3016b00b201f308dd018500b201ef0185a9dd01f3018501f3016b00b2
01f308dd018500b201ef0185cddd01f3018501f3016b00b201f308dd0185
00b201ef0185a9dd01f3018501f3016b00b201f308dd018500b201ef0185
cddd01f3018501f3016b00b201f308dd018500b201ef0185a9dd01f30185
01f3016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b2
01f308dd018500b201ef018503dd000003dd00006cdd010001dd050000dd
010005dd01001ddd01f3018501f3016b00b201f308dd018500b201ef0185
cddd01f3018501f3016b00b201f308dd018500b201ef018503dd010001dd
01006bdd010004dd010002dd010006dd01001cdd01f3018501f3016b00b2
01f308dd018500b201ef0185cddd01f3018501f3016b00b201f308dd0185
00b201ef018503dd05006bdd010004dd010002dd010006dd01001cdd01f3
018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3016b
00b201f308dd018500b201ef018503dd050001dd030001dd040001dd0100
01dd010055dd010005dd010002dd010001dd010003dd01001bdd01f30185
01f3016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b2
01f308dd018500b201ef018503dd010001dd010000dd010001dd010000dd
010001dd010000dd010001dd010055dd010005dd010002dd010000dd0100
04dd01001bdd01f3018501f3016b00b201f308dd018500b201ef0185cddd
01f3018501f3016b00b201f308dd018500b201ef018503dd010001dd0100
00dd050000dd010001dd010000dd010001dd010055dd010005dd010002dd
030005dd01001bdd01f3018501f3016b00b201f308dd018500b201ef0185
cddd01f3018501f3016b00b201f308dd018500b201ef018503dd010001dd
010000dd010004dd010001dd010000dd010001dd010056dd010004dd0100
02dd030004dd01001cdd01f3018501f3016b00b201f308dd018500b201ef
0185cddd01f3018501f3016b00b201f308dd018500b201ef018503dd0100
01dd010000dd010001dd010000dd010001dd010000dd010001dd010056dd
010004dd010002dd010000dd010003dd01001cdd01f3018501f3016b00b2
01f308dd018500b201ef0185cddd01f3018501f3016b00b201f308dd0185
00b201ef018503dd010001dd010001dd030001dd010001dd010001dd0400
57dd010003dd010002dd010001dd010001dd01001ddd01f3018501f3016b
00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f308dd
018500b201ef0185a9dd01f3018501f3016b00b201f308dd018500b201ef
0185cddd01f3018501f3016b00b201f308dd018500b201ef0185a9dd01f3
018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3016b
00b201f308dd018500b201ef0185a9dd01f3018501f3016b00b201f308dd
018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b201ef
0185a9dd01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3
018501f3016b00b201f308dd018500b201ef0185a9dd01f3018501f3016b
00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f308dd
018500b201ef0185a9dd01f3018501f3016b00b201f308dd018500b201ef
0185cddd01f3018501f3016b00b201f308dd018500b201ef0185a9dd01f3
018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3016b
00b201f308dd018500b201ef018503dd000003dd000015dd010054dd0100
01dd050000dd010005dd01001ddd01f3018501f3016b00b201f308dd0185
00b201ef0185cddd01f3018501f3016b00b201f308dd018500b201ef0185
03dd010001dd010015dd01000bdd010004dd01003edd010004dd010002dd
010006dd01001cdd01f3018501f3016b00b201f308dd018500b201ef0185
cddd01f3018501f3016b00b201f308dd018500b201ef018503dd050015dd
01000bdd010004dd01003edd010004dd010002dd010006dd01001cdd01f3
018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3016b
00b201f308dd018500b201ef018503dd050001dd030001dd040001dd0100
01dd010000dd040001dd010001dd010000dd030002dd030003dd030001dd
04002cdd010005dd010002dd010001dd010003dd01001bdd01f3018501f3
016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f3
08dd018500b201ef018503dd010001dd010000dd010001dd010000dd0100
01dd010000dd010001dd010000dd010001dd010000dd010001dd010000dd
010004dd010004dd010001dd010000dd010001dd01002bdd010005dd0100
02dd010000dd010004dd01001bdd01f3018501f3016b00b201f308dd0185
00b201ef0185cddd01f3018501f3016b00b201f308dd018500b201ef0185
03dd010001dd010000dd050000dd010001dd010000dd010001dd010000dd
010001dd010000dd010001dd010000dd010004dd010004dd010001dd0100
00dd010001dd01002bdd010005dd010002dd030005dd01001bdd01f30185
01f3016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b2
01f308dd018500b201ef018503dd010001dd010000dd010004dd010001dd
010000dd010001dd010000dd010001dd010000dd010001dd010000dd0100
04dd010004dd010001dd010000dd010001dd01002cdd010004dd010002dd
030004dd01001cdd01f3018501f3016b00b201f308dd018500b201ef0185
cddd01f3018501f3016b00b201f308dd018500b201ef018503dd010001dd
010000dd010001dd010000dd010001dd010000dd010001dd010000dd0100
01dd010000dd010001dd010000dd010001dd010000dd010001dd010000dd
010001dd010000dd010001dd01002cdd010004dd010002dd010000dd0100
03dd01001cdd01f3018501f3016b00b201f308dd018500b201ef0185cddd
01f3018501f3016b00b201f308dd018500b201ef018503dd010001dd0100
01dd030001dd010001dd010001dd040000dd040002dd040001dd030002dd
030002dd030001dd010001dd01002ddd010003dd010002dd010001dd0100
01dd01001ddd01f3018501f3016b00b201f308dd018500b201ef0185cddd
01f3018501f3016b00b201f308dd018500b201ef0185a9dd01f3018501f3
016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f3
08dd018500b201ef0185a9dd01f3018501f3016b00b201f308dd018500b2
01ef0185cddd01f3018501f3016b00b201f308dd018500b201ef0185a9dd
01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3
016b00b201f308dd018500b201ef0185a9dd01f3018501f3016b00b201f3
08dd018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b2
01ef0185a9dd01f3018501f3016b00b201f308dd018500b201ef0185cddd
01f3018501f3016b00b201f308dd018500b201ef0185a9dd01f3018501f3
016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f3
08dd018500b201ef0185a9dd01f3018501f3016b00b201f308dd018500b2
01ef0185cddd01f3018501f3016b00b201f308dd018500b201ef018503dd
000003dd00006cdd010001dd050000dd010005dd01001ddd01f3018501f3
016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f3
08dd018500b201ef018503dd010001dd01006bdd010004dd010002dd0100
06dd01001cdd01f3018501f3016b00b201f308dd018500b201ef0185cddd
01f3018501f3016b00b201f308dd018500b201ef018503dd05006bdd0100
04dd010002dd010006dd01001cdd01f3018501f3016b00b201f308dd0185
00b201ef0185cddd01f3018501f3016b00b201f308dd018500b201ef0185
03dd050001dd030002dd030002dd030002dd030002dd020000dd000001dd
030041dd010005dd010002dd010001dd010003dd01001bdd01f3018501f3
016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f3
08dd018500b201ef018503dd010001dd010000dd010001dd010000dd0100
01dd010000dd010001dd010004dd010000dd010001dd010000dd010001dd
010040dd010005dd010002dd010000dd010004dd01001bdd01f3018501f3
016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f3
08dd018500b201ef018503dd010001dd010000dd050001dd010004dd0100
04dd040000dd010001dd010000dd050040dd010005dd010002dd030005dd
01001bdd01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3
018501f3016b00b201f308dd018500b201ef018503dd010001dd010000dd
010007dd010004dd010001dd010001dd010001dd030001dd010045dd0100
04dd010002dd030004dd01001cdd01f3018501f3016b00b201f308dd0185
00b201ef0185cddd01f3018501f3016b00b201f308dd018500b201ef0185
03dd010001dd010000dd010001dd010000dd010001dd010000dd010001dd
010000dd010001dd010000dd010004dd010001dd010041dd010004dd0100
02dd010000dd010003dd01001cdd01f3018501f3016b00b201f308dd0185
00b201ef0185cddd01f3018501f3016b00b201f308dd018500b201ef0185
03dd010001dd010001dd030002dd030002dd030002dd040001dd030002dd
030043dd010003dd010002dd010001dd010001dd01001ddd01f3018501f3
016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f3
08dd018500b201ef018526dd010001dd01007cdd01f3018501f3016b00b2
01f308dd018500b201ef0185cddd01f3018501f3016b00b201f308dd0185
00b201ef018527dd03007ddd01f3018501f3016b00b201f308dd018500b2
01ef0185cddd01f3018501f3016b00b201f308dd018500b201ef0185a9dd
01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3
016b00b201f308dd018500b201ef0185a9dd01f3018501f3016b00b201f3
08dd018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b2
01ef0185a9dd01f3018501f3016b00b201f308dd018500b201ef0185cddd
01f3018501f3016b00b201f308dd018500b201ef0185a9dd01f3018501f3
016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f3
08dd018500b201ef0185a9dd01f3018501f3016b00b201f308dd018500b2
01ef0185cddd01f3018501f3016b00b201f308dd018500b201ef018503dd
04000cdd010002dd010009dd01004ddd010001dd050000dd010005dd0100
1ddd01f3018501f3016b00b201f308dd018500b201ef0185cddd01f30185
01f3016b00b201f308dd018500b201ef018503dd010001dd01000bdd0100
02dd010009dd01000bdd010004dd010037dd010004dd010002dd010006dd
01001cdd01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3
018501f3016b00b201f308dd018500b201ef018503dd010001dd01000bdd
01000edd01000bdd010004dd010037dd010004dd010002dd010006dd0100
1cdd01f3018501f3016b00b201f308dd018500b201ef0185cddd01f30185
01f3016b00b201f308dd018500b201ef018503dd010001dd010001dd0300
02dd040001dd020003dd030001dd040001dd010001dd010000dd030002dd
030003dd030001dd040025dd010005dd010002dd010001dd010003dd0100
1bdd01f3018501f3016b00b201f308dd018500b201ef0185cddd01f30185
01f3016b00b201f308dd018500b201ef018503dd040005dd010000dd0100
01dd010002dd010002dd010001dd010000dd010001dd010000dd010001dd
010000dd010004dd010004dd010001dd010000dd010001dd010024dd0100
05dd010002dd010000dd010004dd01001bdd01f3018501f3016b00b201f3
08dd018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b2
01ef018503dd030003dd040000dd010001dd010002dd010002dd010001dd
010000dd010001dd010000dd010001dd010000dd010004dd010004dd0100
01dd010000dd010001dd010024dd010005dd010002dd030005dd01001bdd
01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3
016b00b201f308dd018500b201ef018503dd010000dd010001dd010001dd
010000dd010001dd010002dd010002dd010001dd010000dd010001dd0100
00dd010001dd010000dd010004dd010004dd010001dd010000dd010001dd
010025dd010004dd010002dd030004dd01001cdd01f3018501f3016b00b2
01f308dd018500b201ef0185cddd01f3018501f3016b00b201f308dd0185
00b201ef018503dd010001dd010000dd010001dd010000dd010001dd0100
02dd010002dd010001dd010000dd010001dd010000dd010001dd010000dd
010001dd010000dd010001dd010000dd010001dd010000dd010001dd0100
25dd010004dd010002dd010000dd010003dd01001cdd01f3018501f3016b
00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f308dd
018500b201ef018503dd010002dd000001dd040001dd040000dd050001dd
030001dd040002dd040001dd030002dd030002dd030001dd010001dd0100
26dd010003dd010002dd010001dd010001dd01001ddd01f3018501f3016b
00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f308dd
018500b201ef0185a9dd01f3018501f3016b00b201f308dd018500b201ef
0185cddd01f3018501f3016b00b201f308dd018500b201ef0185a9dd01f3
018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3016b
00b201f308dd018500b201ef0185a9dd01f3018501f3016b00b201f308dd
018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b201ef
0185a9dd01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3
018501f3016b00b201f308dd018500b201ef0185a9dd01f3018501f3016b
00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f308dd
018500b201ef0185a9dd01f3018501f3016b00b201f308dd018500b201ef
0185cddd01f3018501f3016b00b201f308dd018500b201ef0185a9dd01f3
018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3016b
00b201f308dd018500b201ef018504dd030010dd020059dd010001dd0500
00dd010005dd01001ddd01f3018501f3016b00b201f308dd018500b201ef
0185cddd01f3018501f3016b00b201f308dd018500b201ef018503dd0100
01dd010010dd010058dd010004dd010002dd010006dd01001cdd01f30185
01f3016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b2
01f308dd018500b201ef018503dd010014dd010058dd010004dd010002dd
010006dd01001cdd01f3018501f3016b00b201f308dd018500b201ef0185
cddd01f3018501f3016b00b201f308dd018500b201ef018503dd010005dd
030002dd030003dd010003dd03004fdd010005dd010002dd010001dd0100
03dd01001bdd01f3018501f3016b00b201f308dd018500b201ef0185cddd
01f3018501f3016b00b201f308dd018500b201ef018504dd030001dd0100
01dd010004dd010002dd010002dd010001dd01004edd010005dd010002dd
010000dd010004dd01001bdd01f3018501f3016b00b201f308dd018500b2
01ef0185cddd01f3018501f3016b00b201f308dd018500b201ef018507dd
010000dd010005dd040002dd010002dd05004edd010005dd010002dd0300
05dd01001bdd01f3018501f3016b00b201f308dd018500b201ef0185cddd
01f3018501f3016b00b201f308dd018500b201ef018507dd010000dd0100
04dd010001dd010002dd010002dd010053dd010004dd010002dd030004dd
01001cdd01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3
018501f3016b00b201f308dd018500b201ef018503dd010001dd010000dd
010001dd010000dd010001dd010002dd010002dd010001dd01004fdd0100
04dd010002dd010000dd010003dd01001cdd01f3018501f3016b00b201f3
08dd018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b2
01ef018504dd030002dd030002dd040000dd050001dd030051dd010003dd
010002dd010001dd010001dd01001ddd01f3018501f3016b00b201f308dd
018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b201ef
0185a9dd01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3
018501f3016b00b201f308dd018500b201ef0185a9dd01f3018501f3016b
00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f308dd
018500b201ef0185a9dd01f3018501f3016b00b201f308dd018500b201ef
0185cddd01f3018501f3016b00b201f308dd018500b201ef0185a9dd01f3
018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3016b
00b201f308dd018500b201ef0185a9dd01f3018501f3016b00b201f308dd
018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b201ef
0185a9dd01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3
018501f3016b00b201f308dd018500b201ef0185a9dd01f3018501f3016b
00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f308dd
018500b201ef018504dd030017dd020003dd020002dd010046dd010001dd
050000dd010005dd01001ddd01f3018501f3016b00b201f308dd018500b2
01ef0185cddd01f3018501f3016b00b201f308dd018500b201ef018503dd
010001dd010017dd010004dd010002dd010045dd010004dd010002dd0100
06dd01001cdd01f3018501f3016b00b201f308dd018500b201ef0185cddd
01f3018501f3016b00b201f308dd018500b201ef018503dd01001bdd0100
04dd010002dd010045dd010004dd010002dd010006dd01001cdd01f30185
01f3016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b2
01f308dd018500b201ef018503dd010005dd030001dd040002dd030003dd
010004dd010002dd040002dd030001dd040033dd010005dd010002dd0100
01dd010003dd01001bdd01f3018501f3016b00b201f308dd018500b201ef
0185cddd01f3018501f3016b00b201f308dd018500b201ef018504dd0300
01dd010001dd010000dd010001dd010000dd010001dd010002dd010004dd
010002dd010001dd010004dd010000dd010001dd010032dd010005dd0100
02dd010000dd010004dd01001bdd01f3018501f3016b00b201f308dd0185
00b201ef0185cddd01f3018501f3016b00b201f308dd018500b201ef0185
07dd010000dd010004dd010004dd010001dd010002dd010004dd010002dd
010001dd010001dd040000dd010036dd010005dd010002dd030005dd0100
1bdd01f3018501f3016b00b201f308dd018500b201ef0185cddd01f30185
01f3016b00b201f308dd018500b201ef018507dd010000dd010004dd0100
04dd010001dd010002dd010004dd010002dd010001dd010000dd010001dd
010000dd010037dd010004dd010002dd030004dd01001cdd01f3018501f3
016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f3
08dd018500b201ef018503dd010001dd010000dd010001dd010000dd0100
04dd010001dd010002dd010004dd010002dd010001dd010000dd010001dd
010000dd010037dd010004dd010002dd010000dd010003dd01001cdd01f3
018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3016b
00b201f308dd018500b201ef018504dd030002dd030001dd010005dd0300
01dd050000dd050000dd040002dd040000dd010038dd010003dd010002dd
010001dd010001dd01001ddd01f3018501f3016b00b201f308dd018500b2
01ef0185cddd01f3018501f3016b00b201f308dd018500b201ef0185a9dd
01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3
016b00b201f308dd018500b201ef0185a9dd01f3018501f3016b00b201f3
08dd018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b2
01ef0185a9dd01f3018501f3016b00b201f308dd018500b201ef0185cddd
01f3018501f3016b00b201f308dd018500b201ef0185a9dd01f3018501f3
016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f3
08dd018500b201ef0185a9dd01f3018501f3016b00b201f308dd018500b2
01ef0185cddd01f3018501f3016b00b201f308dd018500b201ef0185a9dd
01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3
016b00b201f308dd018500b201ef0185a9dd01f3018501f3016b00b201f3
08dd018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b2
01ef018503dd05006cdd010001dd050000dd010005dd01001ddd01f30185
01f3016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b2
01f308dd018500b201ef018505dd010010dd01005add010004dd010002dd
010006dd01001cdd01f3018501f3016b00b201f308dd018500b201ef0185
cddd01f3018501f3016b00b201f308dd018500b201ef018505dd010010dd
01005add010004dd010002dd010006dd01001cdd01f3018501f3016b00b2
01f308dd018500b201ef0185cddd01f3018501f3016b00b201f308dd0185
00b201ef018505dd010003dd030001dd010001dd010000dd030057dd0100
05dd010002dd010001dd010003dd01001bdd01f3018501f3016b00b201f3
08dd018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b2
01ef018505dd010002dd010001dd010000dd010001dd010000dd010059dd
010005dd010002dd010000dd010004dd01001bdd01f3018501f3016b00b2
01f308dd018500b201ef0185cddd01f3018501f3016b00b201f308dd0185
00b201ef018505dd010002dd050001dd030001dd010059dd010005dd0100
02dd030005dd01001bdd01f3018501f3016b00b201f308dd018500b201ef
0185cddd01f3018501f3016b00b201f308dd018500b201ef018505dd0100
02dd010005dd030001dd01005add010004dd010002dd030004dd01001cdd
01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3
016b00b201f308dd018500b201ef018505dd010002dd010001dd010000dd
010001dd010000dd010001dd010056dd010004dd010002dd010000dd0100
03dd01001cdd01f3018501f3016b00b201f308dd018500b201ef0185cddd
01f3018501f3016b00b201f308dd018500b201ef018505dd010003dd0300
01dd010001dd010001dd030058dd010003dd010002dd010001dd010001dd
01001ddd01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3
018501f3016b00b201f308dd018500b201ef0185a9dd01f3018501f3016b
00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f308dd
018500b201ef0185a9dd01f3018501f3016b00b201f308dd018500b201ef
0185cddd01f3018501f3016b00b201f308dd018500b201ef0185a9dd01f3
018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3016b
00b201f308dd018500b201ef0185a9dd01f3018501f3016b00b201f308dd
018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b201ef
0185a9dd01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3
018501f3016b00b201f308dd018500b201ef0185a9dd01f3018501f3016b
00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f308dd
018500b201ef0185a9dd01f3018501f3016b00b201f308dd018500b201ef
0185cddd01f3018501f3016b00b201f308dd018500b201ef018503dd0500
0fdd020018dd02003ddd010001dd050000dd010005dd01001ddd01f30185
01f3016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b2
01f308dd018500b201ef018505dd010012dd010019dd01003cdd010004dd
010002dd010006dd01001cdd01f3018501f3016b00b201f308dd018500b2
01ef0185cddd01f3018501f3016b00b201f308dd018500b201ef018505dd
010012dd010019dd01003cdd010004dd010002dd010006dd01001cdd01f3
018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3016b
00b201f308dd018500b201ef018505dd010003dd030001dd040003dd0100
03dd030001dd010001dd010001dd030003dd01003bdd010005dd010002dd
010001dd010003dd01001bdd01f3018501f3016b00b201f308dd018500b2
01ef0185cddd01f3018501f3016b00b201f308dd018500b201ef018505dd
010002dd010001dd010000dd010001dd010002dd010002dd010001dd0100
00dd010001dd010000dd010001dd010002dd01003bdd010005dd010002dd
010000dd010004dd01001bdd01f3018501f3016b00b201f308dd018500b2
01ef0185cddd01f3018501f3016b00b201f308dd018500b201ef018505dd
010002dd010001dd010000dd010001dd010002dd010002dd050000dd0100
01dd010000dd050002dd01003bdd010005dd010002dd030005dd01001bdd
01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3
016b00b201f308dd018500b201ef018505dd010002dd010001dd010000dd
010001dd010002dd010002dd010005dd030001dd010006dd01003cdd0100
04dd010002dd030004dd01001cdd01f3018501f3016b00b201f308dd0185
00b201ef0185cddd01f3018501f3016b00b201f308dd018500b201ef0185
05dd010002dd010001dd010000dd040003dd010002dd010001dd010001dd
030001dd010001dd010002dd01003cdd010004dd010002dd010000dd0100
03dd01001cdd01f3018501f3016b00b201f308dd018500b201ef0185cddd
01f3018501f3016b00b201f308dd018500b201ef018505dd010003dd0300
01dd010004dd050001dd030003dd010003dd030001dd05003bdd010003dd
010002dd010001dd010001dd01001ddd01f3018501f3016b00b201f308dd
018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b201ef
018511dd010095dd01f3018501f3016b00b201f308dd018500b201ef0185
cddd01f3018501f3016b00b201f308dd018500b201ef018511dd010095dd
01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3
016b00b201f308dd018500b201ef0185a9dd01f3018501f3016b00b201f3
08dd018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b2
01ef0185a9dd01f3018501f3016b00b201f308dd018500b201ef0185cddd
01f3018501f3016b00b201f308dd018500b201ef0185a9dd01f3018501f3
016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f3
08dd018500b201ef0185a9dd01f3018501f3016b00b201f308dd018500b2
01ef0185cddd01f3018501f3016b00b201f308dd018500b201ef0185a9dd
01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3
016b00b201f308dd018500b201ef0185a9dd01f3018501f3016b00b201f3
08dd018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b2
01ef0185a9dd01f3018501f3016b00b201f308dd018500b201ef0185cddd
01f3018501f3016b00b201f308dd018500b201ef0185a9dd01f3018501f3
016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f3
08dd018500b201ef0185a9dd01f3018501f3016b00b201f308dd018500b2
01ef0185cddd01f3018501f3016b00b201f308dd018500b201ef0185a9dd
01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3
016b00b201f308dd018500b201ef0185a9dd01f3018501f3016b00b201f3
08dd018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b2
01ef0185a9dd01f3018501f3016b00b201f308dd018500b201ef0185cddd
01f3018501f3016b00b201f308dd018500b201ef0185a9dd01f3018501f3
016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f3
08dd018500b201ef0185a9dd01f3018501f3016b00b201f308dd018500b2
01ef0185cddd01f3018501f3016b00b201f308dd018500b201ef0185a9dd
01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3
016b00b201f308dd018500b201ef0185a9dd01f3018501f3016b00b201f3
08dd018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b2
01ef0185a9dd01f3018501f3016b00b201f308dd018500b201ef0185cddd
01f3018501f3016b00b201f308dd018500b201ef0185a9dd01f3018501f3
016b00b201f308dd018500b201ef0185cddd01f3018501f3016b00b201f3
08dd018500b201ef0185a9dd01f3018501f3016b00b201f308dd018500b2
01ef0185cddd01f3018501f3016b00b201f308dd018500b201ef0185a9dd
01f3018501f3016b00b201f308dd018500b201ef0185cddd01f3018501f3
016b00b201f308dd018500b201ef0185a9dd01f3018501f3016b00b201f3
08dd018500b201ef0185cddd01f3018501f3016b00b201f308dd018500b2
01ef0185a9dd01f3018501f3016b00b201f308dd018500b201ef0185cddd
01f3018501f3016b00b201f308dd018500b201ef0185abf3018501f3016b
00b201f308dd018500b201ef0185cff3018501f3016b00b201f308dd0185
00b201ef0085acf3018501f3016b00b201f308dd018500b201ef0085d0f3
018501f3016b00b201f308dd018500b201efad6b018501f3016b00b201f3
08dd018500b201efd16b018501f3016b00b201f308dd018500b201efac6b
00ef018501f3016b00b201f308dd018500b201efd06b00ef018501f3016b
00b201f30a8500b201ef016b0bb200f38fb201f30ab201ef018501f3016b
00b201f30a8500b201ef016b0bb200f3b3b201f30ab201ef018501f3016b
00b200f30b8500b201ef016b09b201f3008593f308b201ef018501f3016b
00b200f30b8500b201ef016b09b201f30085b7f308b201ef018501f3016b
0ef301ef016b08b201f301858ef3008504f307b201ef018501f3016b0ef3
01ef016b08b201f30185b2f3008504f307b201ef018501f3016b00b20cf3
008501ef016b06b202f300dd018501f38bdd018501f301dd02f305b201ef
018501f3016b00b20cf3008501ef016b06b202f300dd018501f3afdd0185
01f301dd02f305b201ef018501f3016b01b200f308dd018500b201ef016b
04b202f302dd018501f38bdd018501f303dd02f303b201ef018501f3016b
01b200f308dd018500b201ef016b04b202f302dd018501f3afdd018501f3
03dd02f303b201ef018501f3016b01b201f307dd018500b201ef016b03b2
02f303dd018501f38bdd018501f304dd02f302b201ef018501f3016b01b2
01f307dd018500b201ef016b03b202f303dd018501f3afdd018501f304dd
02f302b201ef018501f3016b02b200f306dd018501b201ef016b01b202f3
05dd018501f38bdd018501f306dd02f300b201ef018501f3016b02b200f3
06dd018501b201ef016b01b202f305dd018501f3afdd018501f306dd02f3
00b201ef018501f3016b02b201f305dd008502b201ef016b028507dd0185
01f38bdd018501f307dd028501ef018501f3016b02b201f305dd008502b2
01ef016b028507dd018501f3afdd018501f307dd028501ef018501f3016b
03b200f304dd018502b201ef016b01b2028505dd018501f38bdd018501f3
06dd028500b201ef018501f3016b03b200f304dd018502b201ef016b01b2
028505dd018501f3afdd018501f306dd028500b201ef018501f3016b03b2
01f302dd018503b201ef016b03b2028503dd018501f38bdd018501f304dd
028502b201ef018501f3016b03b201f302dd018503b201ef016b03b20285
03dd018501f3afdd018501f304dd028502b201ef018501f3016b04b200f3
02dd018503b201ef016b04b2028502dd018501f38bdd018501f303dd0285
03b201ef018501f3016b04b200f302dd018503b201ef016b04b2028502dd
018501f3afdd018501f303dd028503b201ef018501f3016b04b201f300dd
018504b201ef016b06b2028500dd018501f38bdd018501f301dd028505b2
01ef018501f3016b04b201f300dd018504b201ef016b06b2028500dd0185
01f3afdd018501f301dd028505b201ef018501f3016b05b200f3018505b2
01ef016b08b2038501f38d8501f3028507b201ef018501f3016b05b200f3
018505b201ef016b08b2038501f3b18501f3028507b201ef018501f3016b
05b200f3018505b201ef016b09b2028500f38e8501f3018508b201ef0185
01f3016b05b200f3018505b201ef016b09b2028500f3b28501f3018508b2
01ef018501f3016b06b2008506b201ef016b0bb200858fb200f300850ab2
01ef018501f3016b06b2008506b201ef016b0bb20085b3b200f300850ab2
01ef018501f3016b10ef016babef018501f3016b10ef016bcfef018501f3
006b11ef006bacef018501f3006b11ef006bd0ef018501f3c28501f3e685
00f3c38500f3e785fef3fef32ff30085fef32cf3008501f37cdd018501f3
fedd29dd018501f37cdd018501f3fedd29dd018501f37cdd018501f3fedd
29dd018501f302dd030020dd010010dd010004dd01000fdd010006dd0100
1ddd018501f300dd050009dd010002dd0100fedd11dd018501f301dd0100
01dd01001fdd010017dd01000fdd010006dd01001ddd018501f300dd0100
02dd010008dd010002dd0100fedd11dd018501f300dd010004dd010001dd
010000dd010000dd030000dd010000dd030001dd010000dd010001dd0300
04dd010001dd010001dd010000dd010001dd010000dd010001dd010000dd
010001dd030001dd030004dd030000dd010002dd010000dd010000dd0100
02dd030002dd010002dd018501f300dd010002dd010000dd010001dd0100
00dd030000dd030001dd030001dd010000dd0100fedd03dd018501f300dd
010004dd010001dd010000dd0b0001dd010000dd020000dd010001dd0100
05dd010001dd010001dd010000dd010000dd010000dd020000dd010000dd
020000dd010001dd010001dd010006dd010001dd010002dd010000dd0200
00dd010000dd010001dd010001dd010002dd018501f300dd010002dd0100
00dd010001dd010001dd010002dd010001dd010001dd010000dd020000dd
0100fedd02dd018501f300dd010004dd010001dd010000dd020001dd0200
01dd010001dd010000dd010001dd010001dd010006dd010000dd010000dd
010001dd010000dd010001dd010000dd010001dd010000dd010001dd0100
01dd010006dd010002dd010000dd010001dd010001dd010000dd010001dd
010006dd018501f300dd050001dd010001dd010001dd010002dd010001dd
010001dd010000dd010001dd0100fedd02dd018501f300dd010004dd0100
01dd010000dd010002dd010002dd050000dd010001dd010001dd010006dd
010000dd010000dd010001dd010000dd010001dd010000dd010001dd0100
00dd050001dd010006dd010002dd010000dd010001dd010001dd010000dd
050006dd018501f300dd010002dd010000dd010001dd010001dd010002dd
010001dd010001dd010000dd010001dd0100fedd02dd018501f300dd0100
04dd010001dd010000dd010002dd010002dd010004dd010001dd010001dd
010006dd010000dd010000dd010001dd010000dd010001dd010000dd0100
01dd010000dd010005dd010006dd010003dd020002dd010001dd010000dd
01000add018501f300dd010002dd010000dd010001dd010001dd010002dd
010001dd010001dd010000dd010001dd0100fedd02dd018501f301dd0100
01dd030000dd020000dd010002dd010002dd010001dd010000dd010001dd
010001dd010000dd000005dd010001dd010002dd010000dd010000dd0200
00dd010000dd020000dd010001dd010001dd010000dd000004dd010000dd
000001dd020002dd020000dd010000dd010001dd010001dd010002dd0185
01f300dd010002dd010000dd010000dd020001dd010000dd000000dd0100
00dd020001dd010000dd010001dd0100fedd02dd018501f302dd030001dd
010000dd010000dd010002dd010003dd030001dd010001dd010002dd0100
06dd010001dd010002dd010001dd010000dd010001dd010000dd010001dd
030003dd010006dd010003dd010002dd010000dd010002dd030002dd0100
02dd018501f300dd050002dd010000dd010002dd010002dd010001dd0300
01dd010001dd0100fedd02dd018501f348dd010018dd000003dd010011dd
018501f3fedd29dd018501f344dd010001dd010017dd010003dd010011dd
018501f3fedd29dd018501f345dd030017dd010004dd010011dd018501f3
fedd29dd018501f37cdd018501f3fedd29dd018501f37cdd018501f3fedd
29dd018501f37cdd018501f3fedd29dd018501f37e8501f3fe852b8500f3
7f8500f3fe852c85fef3fef3fef35df3008501f3feddaadd018501f3fedd
aadd018501f3feddaadd018501f3feddaadd018501f3feddaadd018501f3
a1dd63cfa3dd018501f3a1dd05cf01001bcf010007cf010006cf010001cf
010026cfa3dd018501f3a1dd05cf01001bcf010005cf03000acf010026cf
a3dd018501f306dd8cf30ddd05cf010000cf010000cf010002cf030002cf
030001cf010000cf050006cf010006cf010000cf030001cf030001cf0000
00cf020000cf020014cf0edd8cf307dd018501f306dd8bf300850ddd05cf
010000cf020000cf010000cf010001cf010000cf010001cf010000cf0400
00cf010007cf010006cf010001cf010001cf010001cf010000cf010001cf
010001cf010013cf0edd8bf3008507dd018501f306dd01f388dd01850ddd
05cf010000cf010001cf010000cf020003cf010001cf010000cf020002cf
010007cf010006cf010001cf010001cf010001cf010000cf010001cf0100
01cf010013cf0edd01f388dd018507dd018501f306dd01f388dd01850ddd
05cf010000cf010001cf010002cf020001cf050000cf010003cf010007cf
010006cf010001cf010001cf050000cf010001cf010001cf010013cf0edd
01f388dd018507dd018501f306dd01f388dd01850ddd05cf010000cf0100
01cf010003cf020000cf010004cf010003cf010007cf010006cf010001cf
010001cf010004cf010001cf010001cf010013cf0edd01f388dd018507dd
018501f306dd01f312dd010006dd010004dd01000fdd010001dd010001dd
01000cdd010009dd02000ddd010001dd010019dd01850ddd05cf010000cf
010001cf010000cf010001cf010000cf010001cf010000cf010003cf0100
00cf000005cf010006cf010001cf010000cf020001cf010000cf010001cf
010001cf010013cf0edd01f310dd030010dd040030dd01000fdd010004dd
010011dd018507dd018501f306dd01f311dd030005dd010004dd010013dd
010001dd01000cdd010008dd01000fdd010001dd010019dd01850ddd05cf
010000cf010001cf010001cf030002cf030001cf010004cf010006cf0100
06cf010002cf010001cf030001cf010001cf010001cf010013cf0edd01f3
0fdd010001dd01000edd010034dd01000fdd010004dd010011dd018507dd
018501f306dd01f311dd000001dd000002dd010000dd010001dd010000dd
010004dd010001dd010001dd010000dd010000dd030000dd010000dd0100
06dd010000dd010001dd030001dd030001dd030001dd010001dd010000dd
010000dd030001dd030012dd01850ddd63cf0edd01f30edd010005dd0300
01dd010000dd010001dd030000dd010001dd010000dd010000dd010001dd
010000dd010000dd010000dd030006dd030001dd010000dd010002dd0100
00dd010005dd030002dd010000dd010001dd010000dd010011dd018507dd
018501f306dd01f310dd010001dd010000dd010000dd020000dd010000dd
020004dd010001dd010001dd010000dd010001dd010001dd020000dd0100
04dd010000dd020000dd010001dd010001dd010001dd010001dd010000dd
010001dd010000dd010001dd010001dd010001dd010011dd01850ddd63cf
0edd01f30edd010004dd010001dd010000dd020000dd010001dd010001dd
010000dd010000dd020000dd010001dd010000dd060001dd010004dd0100
01dd010000dd020000dd010000dd010000dd020004dd010001dd010000dd
010000dd020000dd010000dd020011dd018507dd018501f306dd01f310dd
010001dd010000dd010001dd010000dd010001dd010005dd010000dd0100
00dd010001dd010001dd010001dd010001dd010004dd010001dd010000dd
010001dd010001dd010005dd010000dd010001dd010000dd010001dd0100
01dd020014dd01850ddd63cf0edd01f30edd010004dd010001dd010000dd
010001dd010001dd010001dd010000dd010001dd010000dd010001dd0100
00dd020001dd010001dd010008dd010000dd010001dd010000dd010001dd
010008dd010000dd010001dd010000dd010001dd010011dd018507dd0185
01f306dd01f310dd050000dd010001dd010000dd010001dd010005dd0100
00dd010000dd010001dd010001dd010001dd010001dd010004dd010001dd
010000dd050001dd010002dd040000dd010001dd010000dd010001dd0100
03dd020012dd01850ddd63cf0edd01f30edd010004dd010001dd010000dd
010001dd010001dd010001dd010000dd010001dd010000dd010001dd0100
00dd010002dd050005dd040000dd010001dd010000dd010001dd010005dd
040000dd010001dd010000dd010001dd010011dd018507dd018501f306dd
01f30fdd010003dd030001dd010000dd010001dd010005dd010000dd0100
00dd010001dd010001dd010001dd010001dd010004dd010001dd010000dd
010005dd010001dd010001dd010000dd010001dd010000dd010001dd0100
04dd020011dd01850ddd637c0edd01f30edd010004dd010001dd010000dd
010001dd010001dd010001dd010000dd010001dd010000dd010001dd0100
00dd010002dd010008dd010001dd010000dd010001dd010000dd010001dd
010004dd010001dd010000dd010001dd010000dd010001dd010011dd0185
07dd018501f306dd01f30fdd010003dd030000dd020000dd010000dd0200
06dd010001dd010002dd010001dd010000dd020001dd010004dd010000dd
020000dd010001dd010001dd010001dd010001dd010000dd010000dd0200
00dd010001dd010000dd020001dd010011dd01850ddd627c00f30edd01f3
0fdd010001dd030001dd010000dd010001dd010001dd010001dd010000dd
010000dd020000dd010000dd020000dd010002dd010001dd010004dd0100
01dd010000dd010001dd010000dd010000dd020004dd010001dd010000dd
010000dd020000dd010000dd020011dd018507dd018501f306dd01f30fdd
010003dd010000dd010000dd010001dd010000dd010006dd010001dd0100
02dd010002dd010000dd010001dd010005dd010000dd010001dd030002dd
010002dd020000dd010000dd010000dd010000dd010002dd010001dd0300
12dd01850ddd017c13ef4bcf01f30edd01f310dd030001dd030001dd0100
01dd010001dd010001dd010001dd010000dd010001dd010000dd010000dd
010003dd030006dd020000dd030001dd010001dd010000dd010005dd0200
00dd010000dd010000dd010001dd010000dd010011dd018507dd018501f3
06dd01f388dd01850ddd017c12ef006b4bcf01f30edd01f32fdd010056dd
018507dd018501f306dd01f388dd01850ddd017c01ef06b2006b00ef06b2
016b4bcf01f30edd01f32bdd010001dd010056dd018507dd018501f306dd
01f388dd01850ddd017c01ef06b2006b00ef06b2016b4bcf01f30edd01f3
2cdd030057dd018507dd018501f306dd01f388dd01850ddd017c01ef06b2
006b00ef06b2016b4bcf01f30edd01f388dd018507dd018501f306dd01f3
88dd01850ddd017c01ef06b2006b00ef06b2016b4bcf01f30edd01f388dd
018507dd018501f306dd01f388dd01850ddd017c01ef06b2006b00ef06b2
016b4bcf01f30edd01f388dd018507dd018501f306dd01f38a850ddd017c
01ef06b2006b00ef06b2016b4bcf01f30edd01f38a8507dd018501f306dd
00f38b850ddd017c01ef06b2006b00ef06b2016b4bcf01f30edd00f38b85
07dd018501f3a1dd017c01ef076b00ef086b4bcf01f3a3dd018501f3a1dd
017c00ef126b4bcf01f3a3dd018501f3a1dd017c61f3a3dd018501f3a1dd
007c62f3a3dd018501f3feddaadd018501f3feddaadd018501f3feddaadd
018501f3feddaadd018501f3feddaadd018501f3fe85ac8500f3fe85ad85

%
% Run-length encoding savings =  82.2%
%



grestore
showpage

%%EndDocument
FMENDEPSF
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "21" 30
%%Page: "22" 30
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(22) 98.1 668.33 T
5 F
(An Overview of T) 396.01 668.33 T
(cl and Tk) 471.55 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(ar) 152.1 632.33 T
(guments are a connection identi\336er and an arbitrary T) 159.69 632.33 T
(cl script.) 373.82 632.33 T
3 F
(RPC) 410.74 632.33 T
1 F
( forwards the script) 428.73 632.33 T
(to the server; the server executes the script and returns its result \050a new identi\336er in this) 152.1 620.33 T
(case\051, which becomes the result of the) 152.1 608.33 T
3 F
(RPC) 306.98 608.33 T
1 F
( command. Any script whatosever could be) 324.96 608.33 T
(substituted in place of the) 152.1 596.33 T
3 F
(GetId) 257.31 596.33 T
1 F
( command.) 287.3 596.33 T
-0.45 (T) 170.1 584.33 P
-0.45 (cl-DP also includes several other features, including asynchronous remote procedure) 175.51 584.33 P
-0.2 (calls, where the client need not wait for the call to complete, a distributed object system in) 152.1 572.33 P
(which objects can be replicated in several applications and updates are automatically) 152.1 560.33 T
-0.32 (propagated to all copies, and a simple name service. T) 152.1 548.33 P
-0.32 (cl-DP has been used for applications) 365.27 548.33 P
(such as a video playback system, groupware, and games. T) 152.1 536.33 T
(cl-DP is more \337exible than) 387.33 536.33 T
(most remote procedure call systems because it is not based on compiled interfaces) 152.1 524.33 T
(between clients and servers: it is easy in T) 152.1 512.33 T
(cl-DP to connect an existing client to a new) 320.17 512.33 T
(server without recompiling or restarting the client.) 152.1 500.33 T
(T) 170.1 488.33 T
(cl-DP was created by Lawrence A. Rowe, Brian Smith, and Steve Y) 175.51 488.33 T
(en.) 447.08 488.33 T
4 F
(2.9.5) 119.07 458.33 T
(Ak) 152.1 458.33 T
1 F
(Ak is an audio extension for T) 152.1 442.33 T
(cl. It is built on top of AudioFile, a network-transparent,) 272.98 442.33 T
-0.23 (device independent audio system that runs on a variety of platforms. Ak provides T) 152.1 430.33 P
-0.23 (cl com-) 482.08 430.33 P
(mands for \336le playback, recording, telephone control, and synchronization. The basic) 152.1 418.33 T
(abstractions in Ak are connections to AudioFile servers, device contexts \050which encapsu-) 152.1 406.33 T
(late the state for a particular audio device\051, and requests such as \336le playback. For exam-) 152.1 394.33 T
(ple, here is a script that plays back an audio \336le on a remote machine:) 152.1 382.33 T
3 9 Q
(audioserver remote "server.company.com:0") 179.1 368 T
(remote context room -device 1) 179.1 358 T
(room create play "announcement-f) 179.1 348 T
(ile.au") 351.66 348 T
1 10 Q
(The \336rst command opens a connection to the audio server on the machine) 152.1 334.33 T
3 F
(server.company.com) 152.1 322.33 T
1 F
( and gives this connection the name) 260.04 322.33 T
3 F
(remote) 405.22 322.33 T
1 F
(. It also creates a) 441.2 322.33 T
(command named) 152.1 310.33 T
3 F
(remote) 223.16 310.33 T
1 F
(, which is used to issue commands over the connection. The) 259.14 310.33 T
-0.01 (second command creates a context named) 152.1 298.33 P
3 F
-0.02 (room) 322.46 298.33 P
1 F
-0.01 (, which is associated with audio device 1) 346.45 298.33 P
(on the server) 152.1 286.33 T
(, and also creates a command named) 203.32 286.33 T
3 F
(room) 352.09 286.33 T
1 F
( for communicating with the con-) 376.08 286.33 T
(text. The last command initiates a playback of a particular audio \336le.) 152.1 274.33 T
(Ak implements a unique model of time that allows clients to specify precisely when) 170.1 262.33 T
(audio samples are going to emer) 152.1 250.33 T
(ge. It also provides a mechanism to execute arbitrary T) 281.55 250.33 T
(cl) 500.68 250.33 T
(scripts at speci\336ed audio times; this can be used to achieve a variety of hypermedia) 152.1 238.33 T
(ef) 152.1 226.33 T
(fects, such as displaying images or video in sync with an audio playback. When com-) 159.69 226.33 T
-0.07 (bined with Tk, Ak provides a powerful and \337exible scripting system for developing multi-) 152.1 214.33 P
(media applications such as tutorials and telephone inquiry systems.) 152.1 202.33 T
(Ak was created by Andrew C. Payne.) 170.1 190.33 T
FMENDPAGE
%%EndPage: "22" 31
%%Page: "23" 31
612 792 0 FMBEGINPAGE
103.5 675 517.5 675 2 L
7 X
0 K
V
2 H
2 Z
0 X
N
103.5 135 517.5 135 2 L
7 X
V
0 X
N
98.1 162 512.1 576 R
7 X
V
0 36 Q
0 X
-0.72 (Part I:) 256.14 552 S
-0.72 (The T) 172.5 468 S
-0.72 (cl Language) 258.61 468 S
FMENDPAGE
%%EndPage: "23" 32
%%Page: "24" 32
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(24) 98.1 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
FMENDPAGE
%%EndPage: "24" 33
%%Page: "25" 33
612 792 0 FMBEGINPAGE
98.1 675 512.1 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
98.1 450 512.1 450 2 L
7 X
V
2 Z
0 X
N
98.1 108 512.1 126 R
7 X
V
4 10 Q
0 X
(25) 500.99 119.33 T
98.1 54 512.1 108 R
7 X
V
1 9 Q
0 X
(Copyright \251 1993 Addison-W) 152.1 102 T
(esley Publishing Company) 261.32 102 T
(, Inc.) 357.1 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 152.1 91 T
(. Any) 485.77 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 152.1 80 T
-0.34 (lisher) 152.1 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 171.58 69 P
(does not of) 152.1 58 T
(fer warranties in regard to this draft.) 191.88 58 T
0 24 Q
(Chapter 3) 152.1 605 T
-0.48 (T) 152.1 575 S
-0.48 (cl Language Syntax) 165.41 575 S
98.1 135 512.1 423 R
7 X
V
1 10 Q
0 X
-0.36 (In order to write T) 152.1 416.33 P
-0.36 (cl scripts you must learn two things. First, you must learn the T) 223.8 416.33 P
-0.36 (cl syntax,) 472.01 416.33 P
(which consists of about a half-dozen rules that determine how commands are parsed. The) 152.1 404.33 T
(T) 152.1 392.33 T
(cl syntax is the same for every command. Second, you must learn about the individual) 157.51 392.33 T
-0.18 (commands that you use in your scripts. T) 152.1 380.33 P
-0.18 (cl provides about 60 built-in commands, Tk adds) 315.04 380.33 P
(several dozen more, and any application based on T) 152.1 368.33 T
(cl or Tk will add a few more of its) 358.74 368.33 T
(own. Y) 152.1 356.33 T
(ou\325ll need to know all of the syntax rules right away) 180.52 356.33 T
(, but you can learn about the) 388.62 356.33 T
(commands more gradually as you need them.) 152.1 344.33 T
(This chapter describes the T) 170.1 332.33 T
(cl language syntax. The remaining chapters in Part I) 282.09 332.33 T
(describe the built-in T) 152.1 320.33 T
(cl commands, and Part II describes Tk\325) 239.95 320.33 T
(s commands.) 396.23 320.33 T
98.1 276.98 512.1 280 C
152.1 278.2 512.1 278.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 278.49 143.1 278.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(3.1) 124.63 284 T
(Scripts, commands, and words) 152.1 284 T
1 10 Q
-0.27 (A T) 152.1 260.31 P
-0.27 (cl) 166.95 260.31 P
2 F
-0.27 (script) 176.4 260.31 P
1 F
-0.27 ( consists of one or more) 199.16 260.31 P
2 F
-0.27 (commands) 295.82 260.31 P
1 F
-0.27 (. Commands are separated by newlines and) 338.56 260.31 P
(semi-colons. For example,) 152.1 248.31 T
3 9 Q
(set a 24) 179.1 233.98 T
(set b 15) 179.1 223.98 T
1 10 Q
-0.1 (is a script with two commands separated by a newline character) 152.1 210.31 P
-0.1 (. The same script could be) 405.3 210.31 P
(written on a single line using a semi-colon separator:) 152.1 198.31 T
3 9 Q
(set a 24; set b 15) 179.1 183.98 T
1 10 Q
(Each command consists of one or more) 170.1 170.31 T
2 F
(wor) 330.26 170.31 T
(ds) 345.44 170.31 T
1 F
(, where the \336rst word is the name of a) 354.33 170.31 T
(command and additional words are ar) 152.1 158.31 T
(guments to that command. W) 302.64 158.31 T
(ords are separated by) 419.82 158.31 T
-0.33 (spaces and tabs. Each of the commands in the above examples has three words. There may) 152.1 146.31 P
44.1 351 98.1 423 C
35.1 360 197.1 414 R
7 X
0 K
V
0 9 Q
0 X
(FIGURE  3) 35.1 408 T
(T) 35.1 387 T
(ABLE  3) 40.43 387 T
26.1 351 125.1 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "25" 34
%%Page: "26" 34
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(26) 98.1 668.33 T
5 F
(T) 419.32 668.33 T
(cl Language Syntax) 424.32 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
-0.23 (be any number of words in a command, and each word may have an arbitrary string value.) 152.1 308.33 P
(The white space that separates words is not part of the words, nor are the newlines and) 152.1 296.33 T
(semi-colons that terminate commands) 152.1 284.33 T
98.1 240.98 512.1 244 C
152.1 242.2 512.1 242.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 242.49 143.1 242.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(3.2) 124.63 248 T
(Evaluating a command) 152.1 248 T
1 10 Q
(T) 152.1 224.31 T
(cl evaluates a command in two steps as shown in Figure 3.1:) 157.51 224.31 T
2 F
(parsing) 402.07 224.31 T
1 F
( and) 432.62 224.31 T
2 F
(execution) 452.05 224.31 T
1 F
(. In) 490.34 224.31 T
(the parsing step the T) 152.1 212.31 T
(cl interpreter applies the rules described in this chapter to divide the) 237.45 212.31 T
(command up into words and perform substitutions. Parsing is done in exactly the same) 152.1 200.31 T
(way for every command. During the parsing step the T) 152.1 188.31 T
(cl interpreter does not apply any) 370.68 188.31 T
-0.37 (meaning to the values of the words. T) 152.1 176.31 P
-0.37 (cl just performs a set of simple string operations such) 299.82 176.31 P
-0.1 (as replacing the characters \322) 152.1 164.31 P
3 F
-0.25 ($a) 264.36 164.31 P
1 F
-0.1 (\323 with the string stored in variable) 276.35 164.31 P
3 F
-0.25 (a) 414.7 164.31 P
1 F
-0.1 (; T) 420.7 164.31 P
-0.1 (cl does not know or) 431.28 164.31 P
-0.06 (care whether) 152.1 152.31 P
3 F
-0.13 (a) 205.82 152.31 P
1 F
-0.06 ( or the resulting word is a number or the name of a widget or anything else.) 211.82 152.31 P
98.1 135 512.1 639 C
98.1 315 512.1 639 C
248.12 397.8 341.72 408.6 R
0 X
0 K
V
0.5 H
0 Z
N
242.72 433.8 347.12 448.2 7.2 RR
V
241.27 435.24 345.67 449.64 7.2 RR
7 X
V
0 X
N
264.32 581.4 325.52 595.8 7.2 RR
V
262.88 582.84 324.08 597.24 7.2 RR
7 X
V
0 X
N
264.32 473.4 278.72 484.2 R
V
N
264.32 491.4 318.32 502.2 R
V
N
264.32 509.4 325.52 520.2 R
V
N
264.32 527.4 296.72 538.2 R
V
N
264.32 545.4 311.12 556.2 R
V
N
222.92 619.56 366.91 630.36 R
V
N
221.48 621 365.47 631.8 R
7 X
V
0 X
N
262.88 546.84 309.67 557.64 R
7 X
V
0 X
N
262.88 528.84 295.27 539.64 R
7 X
V
0 X
N
262.88 510.84 324.08 521.64 R
7 X
V
0 X
N
262.88 492.84 316.88 503.64 R
7 X
V
0 X
N
262.88 474.84 277.27 485.64 R
7 X
V
0 X
N
98.1 369 512.1 383.4 C
98.1 369 512.1 383.4 R
7 X
0 K
V
152.1 376.92 512.1 376.92 2 L
V
0.5 H
2 Z
0 X
N
98.1 315 512.1 639 C
0 9 Q
0 X
0 K
-0.04 (Figur) 152.1 363 P
-0.04 (e  3.1.) 173.41 363 P
1 F
-0.04 (T) 199.7 363 P
-0.04 (cl commands are evaluated in two steps. First the T) 204.56 363 P
-0.04 (cl interpreter parses the command) 388.27 363 P
-0.2 (string into words, performing substitutions along the way) 152.1 354 P
-0.2 (. Then a command procedure processes the) 356.29 354 P
98.1 327.6 512.1 342 C
98.1 327.6 512.1 342 R
7 X
0 K
V
152.1 335.52 512.1 335.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 315 512.1 639 C
1 9 Q
0 X
0 K
(words to produce a result string. Each command has a separate command procedure.) 152.1 345 T
1 10 Q
(T) 273.43 586.63 T
(cl Parser) 278.83 586.63 T
(Command Procedure) 251.14 439.03 T
296.4 607.09 294.2 599.4 291.99 607.09 294.2 606.29 4 Y
V
294.2 617.4 294.2 606.29 2 L
0.5 H
2 Z
N
296.4 567.49 294.2 559.8 291.99 567.49 294.2 566.69 4 Y
V
294.2 577.8 294.2 566.69 2 L
N
296.4 459.49 294.2 451.8 291.99 459.49 294.2 458.69 4 Y
V
294.2 469.8 294.2 458.69 2 L
N
296.4 419.89 294.2 412.2 291.99 419.89 294.2 419.09 4 Y
V
294.2 430.2 294.2 419.09 2 L
N
246.68 399.24 340.27 410.04 R
7 X
V
0 Z
0 X
N
(Command String) 374.11 622.27 T
(W) 374.11 512.11 T
(ords) 382.75 512.11 T
(Result) 374.11 400.51 T
2 Z
0 90 3.6 3.6 359.71 555.12 A
180 270 3.6 3.6 366.92 519.12 A
90 180 3.6 3.6 366.92 511.92 A
270 360 3.6 3.6 359.71 475.92 A
363.32 555.12 363.32 519.12 2 L
N
363.32 511.92 363.32 475.92 2 L
N
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "26" 35
%%Page: "27" 35
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(3.2 Evaluating a command) 98.1 668.33 T
4 F
(27) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(In the execution step meaning is applied to the words of the command. T) 170.1 632.33 T
(cl treats the) 460.87 632.33 T
(\336rst word as a command name, checking to see if the command is de\336ned and locating a) 152.1 620.33 T
2 F
-0.07 (command pr) 152.1 608.33 P
-0.07 (ocedur) 201.9 608.33 P
-0.07 (e) 229.29 608.33 P
1 F
-0.07 ( to carry out its function. If the command is de\336ned then the T) 233.72 608.33 P
-0.07 (cl inter-) 480.81 608.33 P
(preter invokes its command procedure, passing all of the words of the command to the) 152.1 596.33 T
(command procedure. The command procedure is free to interpret the words in any way) 152.1 584.33 T
(that it pleases, and dif) 152.1 572.33 T
(ferent commands apply very dif) 239.36 572.33 T
(ferent meanings to their ar) 366.86 572.33 T
(guments) 472.15 572.33 T
2 F
(Note:) 119.09 557.33 T
(I use the terms \322wor) 152.1 557.33 T
(d\323 and \322ar) 233.9 557.33 T
(gument\323 inter) 278.52 557.33 T
(changeably to r) 334.51 557.33 T
(efer to the values passed to) 396.88 557.33 T
(command pr) 152.1 547.33 T
(ocedur) 201.97 547.33 T
(es. The only differ) 229.36 547.33 T
(ence between these two terms is that the \336rst) 301.17 547.33 T
(ar) 152.1 537.33 T
(gument is the second wor) 160.62 537.33 T
(d.) 261.85 537.33 T
1 F
(The following commands illustrate some of meanings that are commonly applied to) 170.1 524.33 T
(ar) 152.1 512.33 T
(guments:) 159.69 512.33 T
3 9 Q
(set a 122) 179.1 498 T
1 10 Q
(In many cases, such as the) 198.9 484.33 T
3 F
(set) 306.87 484.33 T
1 F
( command, ar) 324.86 484.33 T
(guments may take any form) 379.36 484.33 T
(whatsoever) 198.9 472.33 T
(. The) 243.87 472.33 T
3 F
(set) 266.9 472.33 T
1 F
( command simply treats the \336rst ar) 284.89 472.33 T
(gument as a variable) 423.52 472.33 T
(name and the second ar) 198.9 460.33 T
(gument as a value for the variable. The command) 292.53 460.33 T
(\322) 198.9 448.33 T
3 F
(set 122 a) 203.34 448.33 T
1 F
(\323 is valid too: it creates a variable whose name is \322) 257.31 448.33 T
3 F
(122) 459.66 448.33 T
1 F
(\323 and) 477.65 448.33 T
(whose value is \322) 198.9 436.33 T
3 F
(a) 264.68 436.33 T
1 F
(\323.) 270.68 436.33 T
3 9 Q
(expr 24/3.2) 179.1 422 T
1 10 Q
-0.18 (The ar) 198.9 408.33 P
-0.18 (gument to) 224.35 408.33 P
3 F
-0.44 (expr) 266.74 408.33 P
1 F
-0.18 ( must be an arithmetic expression that follows the rules) 290.73 408.33 P
-0.18 (described in Chapter 5. Several other commands also take expressions as ar) 198.9 396.33 P
-0.18 (gu-) 498.78 396.33 P
(ments.) 198.9 384.33 T
3 9 Q
(eval {set a 122}) 179.1 370 T
1 10 Q
(The ar) 198.9 356.33 T
(gument to) 224.53 356.33 T
3 F
(eval) 267.28 356.33 T
1 F
( is a T) 291.27 356.33 T
(cl script.) 315.28 356.33 T
3 F
(Eval) 352.2 356.33 T
1 F
( passes it to the T) 376.18 356.33 T
(cl interpreter) 445.17 356.33 T
(where another round of parsing and execution occurs for the ar) 198.9 344.33 T
(gument. Other) 450.17 344.33 T
-0.11 (control-\337ow commands such as) 198.9 332.33 P
3 F
-0.26 (if) 327.83 332.33 P
1 F
-0.11 ( and) 339.82 332.33 P
3 F
-0.26 (while) 359.03 332.33 P
1 F
-0.11 ( also take scripts as ar) 389.02 332.33 P
-0.11 (guments.) 475.73 332.33 P
3 9 Q
(lindex {red green blue purple} 2) 179.1 318 T
1 10 Q
(The \336rst ar) 198.9 304.33 T
(gument to) 242.58 304.33 T
3 F
(lindex) 285.33 304.33 T
1 F
( is a) 321.31 304.33 T
2 F
(list) 339.91 304.33 T
1 F
( consisting of four values separated by) 352.14 304.33 T
(spaces. This command will extract element 2 \050\322) 198.9 292.33 T
3 F
(blue) 389.32 292.33 T
1 F
(\323\051 from the list and) 413.3 292.33 T
(return it. T) 198.9 280.33 T
(cl\325) 241.23 280.33 T
(s commands for manipulating lists are described in Chapter 6.) 251.22 280.33 T
3 9 Q
(string length abracadabra) 179.1 266 T
1 10 Q
(Some commands, like) 198.9 252.33 T
3 F
(string) 289.96 252.33 T
1 F
( and the Tk widget commands, are actually) 325.94 252.33 T
(several commands rolled into one. The \336rst ar) 198.9 240.33 T
(gument of the command selects) 382.48 240.33 T
(one of several operations to perform and determines the meaning of the) 198.9 228.33 T
(remaining ar) 198.9 216.33 T
(guments. For example \322) 249.51 216.33 T
3 F
(string length) 345.56 216.33 T
1 F
(\323 requires one addi-) 423.52 216.33 T
(tional ar) 198.9 204.33 T
(gument and computes its length, whereas \322) 231.75 204.33 T
3 F
(string compare) 403.58 204.33 T
1 F
(\323) 487.53 204.33 T
(requires two additional ar) 198.9 192.33 T
(guments.) 301.14 192.33 T
3 9 Q
(button .b -text Hello -fg red) 179.1 178 T
1 10 Q
(The ar) 198.9 164.33 T
(guments starting with) 224.53 164.33 T
3 F
(-text) 313.65 164.33 T
1 F
( are option-value pairs that allow you to) 343.63 164.33 T
(specify the options you care about and use default values for the others.) 198.9 152.33 T
FMENDPAGE
%%EndPage: "27" 36
%%Page: "28" 36
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(28) 98.1 668.33 T
5 F
(T) 419.32 668.33 T
(cl Language Syntax) 424.32 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(In writing T) 170.1 632.33 T
(cl scripts one of the most important things to remember is that the T) 217.7 632.33 T
(cl) 488.79 632.33 T
-0.01 (parser doesn\325) 152.1 620.05 P
-0.01 (t apply any meaning to the words of a command while it parses them. All of) 205.47 620.05 P
-0.09 (the above meanings are applied by individual command procedures, not by the T) 152.1 607.76 P
-0.09 (cl parser) 473.7 607.76 P
-0.09 (.) 507.19 607.76 P
-0.22 (Another way of saying this is that ar) 152.1 595.48 P
-0.22 (guments are quoted by default; if you want evaluation) 295.59 595.48 P
(you must request it explicitly) 152.1 583.19 T
(. This approach is similar to that of most shell languages but) 268.06 583.19 T
(dif) 152.1 570.91 T
(ferent than most programming languages. For example, consider the following C pro-) 163.02 570.91 T
(gram:) 152.1 558.62 T
3 9 Q
(x = 4;) 179.1 544.29 T
(y = x+10;) 179.1 534.01 T
1 10 Q
(In the \336rst statement C stores the integer value 4 in variable) 152.1 520.34 T
3 F
(x) 393.05 520.34 T
1 F
(. In the second statement C) 399.04 520.34 T
(evaluates the expression \322) 152.1 508.05 T
3 F
(x+10) 256.18 508.05 T
1 F
(\323, fetching the the value of variable) 280.17 508.05 T
3 F
(x) 423.94 508.05 T
1 F
( and adding 10, and) 429.94 508.05 T
(stores the result in variable) 152.1 495.77 T
3 F
(y) 262.3 495.77 T
1 F
(. At the end of execution) 267.65 495.77 T
3 F
(y) 368.96 495.77 T
1 F
( has the integer value 14. If you) 374.96 495.77 T
-0.22 (want to use a literal string in C without evaluation you must enclose it in quotes. Now con-) 152.1 483.48 P
(sider a similar) 152.1 471.2 T
(-looking program written in T) 208.53 471.2 T
(cl:) 327.75 471.2 T
3 9 Q
(set x 4) 179.1 456.87 T
(set y x+10) 179.1 446.58 T
1 10 Q
-0.14 (The \336rst command assigns the) 152.1 432.92 P
2 F
-0.14 (string) 275.52 432.92 P
1 F
-0.14 ( \322) 298.84 432.92 P
3 F
-0.32 (4) 305.64 432.92 P
1 F
-0.14 (\323 to variable) 311.64 432.92 P
3 F
-0.32 (x) 363.14 432.92 P
1 F
-0.14 (. The value of the variable need not) 369.13 432.92 P
-0.33 (have any particular form. The second command simply takes the string \322) 152.1 420.63 P
3 F
-0.78 (x+10) 439.41 420.63 P
1 F
-0.33 (\323 and stores) 463.4 420.63 P
(it as the new value for) 152.1 408.35 T
3 F
(y) 243.14 408.35 T
1 F
(. At the end of the script y has the string value \322) 248.49 408.35 T
3 F
(x+10) 439.74 408.35 T
1 F
(\323, not the) 463.73 408.35 T
(integer value 14. In T) 152.1 396.06 T
(cl if you want evaluation you must ask for it explicitly:) 237.72 396.06 T
3 9 Q
(set x 4) 179.1 381.73 T
(set y [expr $x+10]) 179.1 371.44 T
1 10 Q
(Evaluation is requested twice in this example. First, the second word of the second com-) 152.1 357.78 T
-0.16 (mand is enclosed in brackets, which tells the T) 152.1 345.49 P
-0.16 (cl parser to evaluate the characters between) 336.97 345.49 P
(the brackets as a T) 152.1 333.21 T
(cl script and use the result as the value of the word. Second, a dollar) 225.78 333.21 T
(-) 497.6 333.21 T
(sign has been placed before) 152.1 320.92 T
3 F
(x) 265.06 320.92 T
1 F
(. When T) 271.05 320.92 T
(cl parses the) 307.82 320.92 T
3 F
(expr) 359.73 320.92 T
1 F
( command it substitutes the) 383.71 320.92 T
(value of variable) 152.1 308.64 T
3 F
(x) 221.76 308.64 T
1 F
( for the) 227.76 308.64 T
3 F
($x) 259.12 308.64 T
1 F
(. If the dollar) 271.11 308.64 T
(-sign were omitted then) 323.1 308.64 T
3 F
(expr) 420.25 308.64 T
1 F
(\325) 444.61 308.64 T
(s ar) 447.39 308.64 T
(gument) 461.36 308.64 T
(would contain the string \322) 152.1 296.35 T
3 F
(x) 255.92 296.35 T
1 F
(\323, resulting in a syntax error) 261.92 296.35 T
(. At the end of the script) 373.51 296.35 T
3 F
(y) 472.88 296.35 T
1 F
( has the) 478.88 296.35 T
(string value \322) 152.1 284.07 T
3 F
(14) 205.95 284.07 T
1 F
(\323, which is almost the same as in the C example.) 217.94 284.07 T
98.1 240.71 512.1 243.73 C
152.1 241.93 512.1 241.93 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 242.22 143.1 242.22 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(3.3) 124.63 247.73 T
(V) 152.1 247.73 T
(ariable substitution) 159.44 247.73 T
1 10 Q
-0.04 (T) 152.1 224.04 P
-0.04 (cl provides three forms of) 157.51 224.04 P
2 F
-0.04 (substitution:) 263.04 224.04 P
1 F
-0.04 ( variable substitution, command substitution, and) 313.02 224.04 P
(backslash substitution. Each substitution causes some of the original characters of a word) 152.1 211.76 T
-0.23 (to be replaced with some other value. Substitutions may occur in any word of a command,) 152.1 199.47 P
(including the command name, and there may be any number of substitutions within a sin-) 152.1 187.19 T
(gle word.) 152.1 174.9 T
(The \336rst form of substitution is) 170.1 162.9 T
2 F
(variable substitution) 297.26 162.9 T
1 F
(. It is triggered by a dollar) 379.73 162.9 T
(-sign) 483.62 162.9 T
-0.07 (character and it causes the value of a T) 152.1 150.62 P
-0.07 (cl variable to be inserted into a word. For example,) 306.27 150.62 P
(consider the following commands:) 152.1 138.33 T
FMENDPAGE
%%EndPage: "28" 37
%%Page: "29" 37
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(3.4 Command substitution) 98.1 668.33 T
4 F
(29) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 9 Q
0 X
(set kgrams 20) 179.1 633 T
(expr $kgrams*2.2046) 179.1 623 T
6 F
(\336) 162.9 610 T
7 F
(44.092) 179.1 610 T
1 10 Q
(The \336rst command sets the value of variable) 152.1 596.33 T
3 F
(kgrams) 331.97 596.33 T
1 F
( to) 367.95 596.33 T
3 F
(20) 380.72 596.33 T
1 F
(. The second command com-) 392.72 596.33 T
-0.29 (putes the corresponding weight in pounds by multiplying the value of) 152.1 584.33 P
3 F
-0.71 (kgrams) 429.53 584.33 P
1 F
-0.29 ( by 2.2046.) 465.51 584.33 P
(It does this using variable substitution: the string) 152.1 572.33 T
3 F
($kgrams) 349.22 572.33 T
1 F
( is replaced with the value of) 391.2 572.33 T
-0.01 (variable) 152.1 560.33 P
3 F
-0.02 (kgrams) 186.78 560.33 P
1 F
-0.01 (, so that the actual ar) 222.76 560.33 P
-0.01 (gument received by the) 305.26 560.33 P
3 F
-0.02 (expr) 401.26 560.33 P
1 F
-0.01 ( command procedure) 425.25 560.33 P
(is \322) 152.1 548.33 T
3 F
(20*2.2046) 165.7 548.33 T
1 F
(\323.) 219.67 548.33 T
(V) 170.1 536.33 T
(ariable substitution can occur anywhere within a word and any number of times as) 176.21 536.33 T
(in the following command:) 152.1 524.33 T
3 9 Q
(expr $result*$base) 179.1 510 T
1 10 Q
(The variable name consists of all of the numbers, letters, and underscores following the) 152.1 496.33 T
(dollar) 152.1 484.33 T
(-sign. Thus the \336rst variable name \050) 175.22 484.33 T
3 F
(result) 317.62 484.33 T
1 F
(\051 extends up to the) 353.6 484.33 T
3 F
(*) 429.94 484.33 T
1 F
( and the second) 435.93 484.33 T
(variable name \050) 152.1 472.33 T
3 F
(base) 214.27 472.33 T
1 F
(\051 extends to the end of the word.) 238.25 472.33 T
(The examples above show only the simplest form of variable substitution. There are) 170.1 460.33 T
(two other forms of variable substitution, which are used for associative array references) 152.1 448.33 T
(and to provide more explicit control over the extent of a variable name \050e.g. so that there) 152.1 436.33 T
-0.16 (can be a letter immediately following the variable name\051. These other forms are discussed) 152.1 424.33 P
(in Chapter 4.) 152.1 412.33 T
98.1 368.98 512.1 372 C
152.1 370.2 512.1 370.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 370.49 143.1 370.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(3.4) 124.63 376 T
(Command substitution) 152.1 376 T
1 10 Q
(The second form of substitution provided by T) 152.1 352.31 T
(cl is) 338.23 352.31 T
2 F
(command substitution) 357.11 352.31 T
1 F
(. Command sub-) 445.12 352.31 T
-0.25 (stitution causes part or all of a command word to be replaced with the result of another T) 152.1 340.31 P
-0.25 (cl) 502.64 340.31 P
(command. Command substitution is invoked by enclosing a nested command in brackets:) 152.1 328.31 T
3 9 Q
(set kgrams 20) 179.1 313.98 T
(set lbs [expr $kgrams*2.2046]) 179.1 303.98 T
6 F
(\336) 162.9 290.98 T
7 F
(44.092) 179.1 290.98 T
1 10 Q
-0.19 (The characters between the brackets must constitute a valid T) 152.1 277.31 P
-0.19 (cl script. The script may con-) 395.9 277.31 P
(tain any number of commands separated by newlines or semi-colons in the usual fashion.) 152.1 265.31 T
-0.08 (The brackets and all of the characters in between are replaced with the result of the script.) 152.1 253.31 P
(Thus in the example above the) 152.1 241.31 T
3 F
(expr) 277.01 241.31 T
1 F
( command is executed while parsing the words for) 301 241.31 T
3 F
-0.13 (set) 152.1 229.31 P
1 F
-0.05 (; its result, the string \322) 170.09 229.31 P
3 F
-0.13 (44.092) 258.66 229.31 P
1 F
-0.05 (\323, becomes the second ar) 294.64 229.31 P
-0.05 (gument to) 393.88 229.31 P
3 F
-0.13 (set) 436.53 229.31 P
1 F
-0.05 (. As with vari-) 454.52 229.31 P
(able substitution, command substitution can occur anywhere in a word and there may be) 152.1 217.31 T
(more than one command substitution within a single word.) 152.1 205.31 T
FMENDPAGE
%%EndPage: "29" 38
%%Page: "30" 38
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(30) 98.1 668.33 T
5 F
(T) 419.32 668.33 T
(cl Language Syntax) 424.32 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 623.98 512.1 627 C
152.1 625.2 512.1 625.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 625.49 143.1 625.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(3.5) 124.63 631 T
(Backslash substitution) 152.1 631 T
1 10 Q
(The \336nal form of substitution in T) 152.1 607.31 T
(cl is) 287.99 607.31 T
2 F
(backslash substitution) 306.88 607.31 T
1 F
(. It is used to insert special) 395.45 607.31 T
(characters such as newlines into words and also to insert characters like) 152.1 595.31 T
3 F
([) 440.76 595.31 T
1 F
( and) 446.76 595.31 T
3 F
($) 466.19 595.31 T
1 F
( without) 472.18 595.31 T
(them being treated specially by the T) 152.1 583.31 T
(cl parser) 299.63 583.31 T
(. For example, consider the following com-) 333.21 583.31 T
(mand:) 152.1 571.31 T
3 9 Q
(set msg Eggs:\134 \134$2.18/dozen\134nGasoline:\134 \134$1.49/gallon) 179.1 556.98 T
6 F
(\336) 162.9 543.98 T
7 F
(Eggs: $2.18/dozen) 179.1 543.98 T
(Gasoline: $1.49/gallon) 179.1 533.98 T
1 10 Q
(There are two sequences of backslash followed by space; each of these sequences is) 152.1 520.31 T
(replaced in the word by a single space and the space characters are not treated as word) 152.1 508.31 T
(separators. There are also two sequences of backslash followed by dollar) 152.1 496.31 T
(-sign; each of) 443.05 496.31 T
-0.04 (these is replaced in the word with a single dollar) 152.1 484.31 P
-0.04 (-sign, and the dollar signs are treated like) 345.03 484.31 P
(ordinary characters \050they do not trigger variable substitution\051. The backslash followed by) 152.1 472.31 T
3 F
(n) 152.1 460.31 T
1 F
( is replaced with a newline character) 158.1 460.31 T
( T) 170.1 448.31 T
(able 3.1 lists all of the backslash sequences supported by T) 178.01 448.31 T
(cl. These include all of) 412.98 448.31 T
-0.09 (the sequences de\336ned for ANSI C, such as) 152.1 436.31 P
3 F
-0.21 (\134t) 324.33 436.31 P
1 F
-0.09 ( to insert a tab character and) 336.32 436.31 P
3 F
-0.21 (\134xd4) 450.89 436.31 P
1 F
-0.09 ( to insert) 474.88 436.31 P
(the character whose hexadecimal value is 0xd4. If a backslash is followed by any charac-) 152.1 424.31 T
-0.1 (ter not listed in the table, as in) 152.1 412.31 P
3 F
-0.25 (\134$) 274.25 412.31 P
1 F
-0.1 ( or) 286.24 412.31 P
3 F
-0.25 (\134[) 299.35 412.31 P
1 F
-0.1 (, then the backslash is dropped from the word and) 311.35 412.31 P
-0.38 (the following character is included in the word as an ordinary character) 152.1 400.31 P
-0.38 (. This allows you to) 432.39 400.31 P
-0.06 (include any of the T) 152.1 388.31 P
-0.06 (cl special characters in a word without the character being treated spe-) 231.65 388.31 P
(cially by the T) 152.1 376.31 T
(cl parser) 209.42 376.31 T
(. The sequence) 243 376.31 T
3 F
(\134\134) 305.17 376.31 T
1 F
( will insert a single backslash into a word.) 317.16 376.31 T
-0.04 (The sequence backslash-newline can be used to spread a long command across multi-) 170.1 364.31 P
(ple lines, as in the following example:) 152.1 352.31 T
3 9 Q
(pack .base .label1 .power .label2 .result \134) 179.1 337.98 T
(-side left -padx 1m -pady 2m) 222.23 327.98 T
1 10 Q
(The backslash and newline, plus any leading space on the next line, are replaced by a sin-) 152.1 314.31 T
(gle space character in the word. Thus the two lines together form a single command.) 152.1 302.31 T
2 F
(Note:) 119.09 287.31 T
(Backslash-newline sequences ar) 152.1 287.31 T
(e unusual in that they ar) 281.08 287.31 T
(e r) 378.16 287.31 T
(eplaced in a separate) 388.61 287.31 T
(pr) 152.1 277.31 T
(epr) 160.62 277.31 T
(ocessing step befor) 173.57 277.31 T
(e the T) 249.82 277.31 T
(cl interpr) 276.1 277.31 T
(eter parses the command. This means, for) 313.21 277.31 T
(example, that the space character that r) 152.1 267.31 T
(eplaces backslash-newline will be tr) 311.34 267.31 T
(eated as a) 455.88 267.31 T
(wor) 152.1 257.31 T
(d separator unless it is between double-quotes or braces.) 167.28 257.31 T
98.1 215.95 512.1 218.98 C
152.1 217.18 512.1 217.18 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 217.46 143.1 217.46 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(3.6) 124.63 222.98 T
(Quoting with double-quotes) 152.1 222.98 T
1 10 Q
(T) 152.1 199.29 T
(cl provides several ways for you to prevent the parser from giving special interpretation) 157.51 199.29 T
(to characters such as) 152.1 187.29 T
3 F
($) 237.02 187.29 T
1 F
( and semi-colon. These techniques are called) 243.02 187.29 T
2 F
(quoting) 424.54 187.29 T
1 F
(. Y) 455.08 187.29 T
(ou have) 466.3 187.29 T
(already seen one form of quoting in backslash subsitution; for example,) 152.1 175.29 T
3 F
(\134$) 440.79 175.29 T
1 F
( causes a dol-) 452.79 175.29 T
(lar) 152.1 163.29 T
(-sign to be inserted into a word without triggering variable substitution. In addition to) 162.44 163.29 T
-0.18 (backslash substitution T) 152.1 151.29 P
-0.18 (cl provides two other forms of quoting: double-quotes and braces.) 247.66 151.29 P
FMENDPAGE
%%EndPage: "30" 39
%%Page: "31" 39
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(3.6 Quoting with double-quotes) 98.1 668.33 T
4 F
(31) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
-0.13 (Double-quotes disable word and command separators, while braces disable almost all spe-) 152.1 340.73 P
(cial characters.) 152.1 328.73 T
(If a word is enclosed in double-quotes then spaces, tabs, newlines, and semi-colons) 170.1 316.73 T
(are treated as ordinary characters within the word. The example from page 30 can be) 152.1 304.73 T
(rewritten more cleanly with double-quotes as follows:) 152.1 292.73 T
3 9 Q
(set msg "Eggs: \134$2.18/dozen\134nGasoline: \134$1.49/gallon") 179.1 278.4 T
6 F
(\336) 162.9 265.4 T
7 F
(Eggs: $2.18/dozen) 179.1 265.4 T
(Gasoline: $1.49/gallon) 179.1 255.4 T
1 10 Q
-0.33 (Note that the quotes themselves are not part of the word. The) 152.1 241.73 P
3 F
-0.79 (\134n) 394.92 241.73 P
1 F
-0.33 ( in the example could also) 406.92 241.73 P
(be replaced with an actual newline character) 152.1 229.73 T
(, as in) 329.31 229.73 T
3 9 Q
(set msg "Eggs: \134$2.18/dozen) 179.1 215.4 T
(Gasoline: \134$1.49/gallon") 179.1 205.4 T
1 10 Q
(but I think the script is more readable with) 152.1 191.73 T
3 F
(\134n) 324.48 191.73 T
1 F
(.) 336.48 191.73 T
(V) 170.1 179.73 T
(ariable substitutions, command substitutions, and backslash substitutions all occur) 176.21 179.73 T
(as usual inside double-quotes. For example, the following script sets) 152.1 167.73 T
3 F
(msg) 428.04 167.73 T
1 F
( to a string con-) 446.03 167.73 T
(taining the name of a variable, its value, and the square of its value:) 152.1 155.73 T
98.1 347.4 512.1 639 C
98.1 329.4 512.1 648 R
7 X
0 K
V
98.1 420.6 512.1 435 C
98.1 420.6 512.1 435 R
7 X
0 K
V
152.1 428.52 512.1 428.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 347.4 512.1 639 C
0 9 Q
0 X
0 K
(T) 152.1 414.6 T
(able  3.1.) 157.27 414.6 T
1 F
(Backslash substitutions supported by T) 195.72 414.6 T
(cl. Each of the sequences in the \336rst column is) 335.89 414.6 T
(replaced by the corresponding character from the second column. If a backslash is followed by a) 152.1 405.6 T
(character other than those in the \336rst column, then the two characters are replaced by the second) 152.1 396.6 T
98.1 370.2 512.1 384.6 C
98.1 370.2 512.1 384.6 R
7 X
0 K
V
152.1 378.12 512.1 378.12 2 L
V
0.5 H
2 Z
0 X
N
98.1 347.4 512.1 639 C
1 9 Q
0 X
0 K
(character) 152.1 387.6 T
(.) 184.54 387.6 T
1 10 Q
(Backslash Sequence) 212.2 613.33 T
(Replaced By) 328.06 613.33 T
3 9 Q
(\134a) 210.23 597 T
1 F
(Audible alert \0500x7\051) 307.5 597 T
3 F
(\134b) 210.23 583 T
1 F
(Backspace \0500x8\051) 307.5 583 T
3 F
(\134f) 210.23 569 T
1 F
(Form feed \0500xc\051) 307.5 569 T
3 F
(\134n) 210.23 555 T
1 F
(Newline \0500xa\051) 307.5 555 T
3 F
(\134r) 210.23 541 T
1 F
(Carriage return \0500xd\051) 307.5 541 T
3 F
(\134t) 210.23 527 T
1 F
(T) 307.5 527 T
(ab \0500x9\051) 312.36 527 T
3 F
(\134v) 210.23 513 T
1 F
(V) 307.5 513 T
(ertical tab \0500xb\051) 312.99 513 T
3 F
(\134) 210.23 499 T
7 F
(ddd) 215.62 499 T
1 F
-0.03 (Octal value given by) 307.5 499 P
2 F
-0.03 (ddd) 384.27 499 P
1 F
(\050one, two, or three) 307.5 490 T
7 F
(d) 375.88 490 T
1 F
(\325) 381.28 490 T
(s\051) 383.77 490 T
3 F
(\134x) 210.23 476 T
7 F
(hh) 221.01 476 T
1 F
(Hex value given by) 307.5 476 T
7 F
(hh) 379.88 476 T
1 F
(\050any number of) 307.5 467 T
7 F
(h) 365.15 467 T
1 F
(\325) 370.55 467 T
(s\051) 373.04 467 T
3 F
(\134) 210.23 453 T
7 F
(newline space) 215.62 453 T
1 F
(A single space character) 307.5 453 T
(.) 394.6 453 T
204.23 625.75 204.23 449.25 2 L
V
0.5 H
0 Z
N
301.5 626.25 301.5 448.75 2 L
V
N
405.98 625.75 405.98 449.25 2 L
V
N
203.98 626 406.23 626 2 L
V
N
204.48 608.25 405.73 608.25 2 L
V
N
204.48 605.75 405.73 605.75 2 L
V
N
203.98 449 406.23 449 2 L
V
N
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "31" 40
%%Page: "32" 40
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(32) 98.1 668.33 T
5 F
(T) 419.32 668.33 T
(cl Language Syntax) 424.32 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 9 Q
0 X
(set a 2.1) 179.1 633 T
(set msg "a is $a; the square of a is [expr $a*$a]") 179.1 622.96 T
6 F
(\336) 162.9 609.96 T
7 F
(a is 2.1; the square of a is 4.41) 179.1 609.96 T
1 10 Q
-0.07 (If you would like to include a double-quote in a word enclosed in double-quotes, then use) 152.1 596.29 P
(backlash substitution:) 152.1 584.25 T
3 9 Q
(set name a.out) 179.1 569.92 T
(set msg "Couldn\325t open f) 179.1 559.88 T
(ile \134"$name\134"") 308.52 559.88 T
6 F
(\336) 162.9 546.88 T
7 F
(Couldn\325t open f) 179.1 546.88 T
(ile "a.out") 259.99 546.88 T
98.1 504.85 512.1 507.88 C
152.1 506.08 512.1 506.08 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 506.37 143.1 506.37 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(3.7) 124.63 511.88 T
(Quoting with braces) 152.1 511.88 T
1 10 Q
(Braces provide a more radical form of quoting where all the special charaters lose their) 152.1 488.19 T
(meaning. If a word is enclosed in braces then the characters between the braces are the) 152.1 476.15 T
-0.11 (value of the word, verbatim. No substitutions are performed on the word and spaces, tabs,) 152.1 464.11 P
-0.18 (newlines, and semi-colons are treated as ordinary characters. The example on page 30 can) 152.1 452.07 P
(be rewritten with braces as follows:) 152.1 440.02 T
3 9 Q
(set msg {Eggs: $2.18/dozen) 179.1 425.69 T
(Gasoline: $1.49/gallon}) 179.1 415.65 T
1 10 Q
(The dollar) 152.1 401.98 T
(-signs in the word do not trigger variable substitution and the newline does not) 193.26 401.98 T
(act as a command separator) 152.1 389.94 T
(. In this case) 262.01 389.94 T
3 F
(\134n) 314.47 389.94 T
1 F
( cannot be used to insert a newline into the) 326.46 389.94 T
(wod as on page 31, because the) 152.1 377.9 T
3 F
(\134n) 280.33 377.9 T
1 F
( will be included in the ar) 292.32 377.9 T
(gument as-is without trigger-) 394.3 377.9 T
(ing backslash substitution:) 152.1 365.86 T
3 9 Q
(set msg {Eggs: $2.18/dozen\134nGasoline: $1.49/gallon}) 179.1 351.53 T
6 F
(\336) 162.9 338.53 T
7 F
(Eggs: $2.18/dozen\134nGasoline: $1.49/gallon) 179.1 338.53 T
1 10 Q
(One of the most important uses for braces is to) 170.1 324.86 T
2 F
(defer evaluation) 359.42 324.86 T
1 F
(. Deferred evaluation) 424.65 324.86 T
-0.08 (means that special characters aren\325) 152.1 312.82 P
-0.08 (t processed immediately by the T) 290.91 312.82 P
-0.08 (cl parser) 422.77 312.82 P
-0.08 (. Instead they) 456.27 312.82 P
(will be passed to the command procedure as part of its ar) 152.1 300.78 T
(gument and the command proce-) 379.8 300.78 T
-0.36 (dure will process the special characters itself. Braces are almost always used when passing) 152.1 288.74 P
(scripts to T) 152.1 276.7 T
(cl commands, as in the following example that computes the factorial of \336ve:) 196.38 276.7 T
3 9 Q
(set result 1) 179.1 262.37 T
(set i 5) 179.1 252.33 T
(while {$i > 0} {) 179.1 242.28 T
(set result [expr $result*$i]) 200.63 232.24 T
(set i [expr $i-1]) 200.63 222.2 T
(}) 179.1 212.16 T
1 10 Q
(The body of the) 152.1 198.5 T
3 F
(while) 218.16 198.5 T
1 F
( loop is enclosed in braces to defer substitutions.) 248.15 198.5 T
3 F
(While) 444.69 198.5 T
1 F
( passes) 474.67 198.5 T
-0.32 (the script back into T) 152.1 186.46 P
-0.32 (cl for evaluation during each iteration of the loop and the subsitutions) 235.05 186.46 P
-0 (will be performed at that time. In this case it is important to defer the substitutions so that) 152.1 174.41 P
(they are done afresh each time that) 152.1 162.37 T
3 F
(while) 293.92 162.37 T
1 F
( evaluates the loop body) 323.91 162.37 T
(, rather than once-and-) 420.41 162.37 T
(for) 152.1 150.33 T
(-all while parsing the) 163.55 150.33 T
3 F
(while) 250.72 150.33 T
1 F
( command.) 280.7 150.33 T
(Braces nest, as in the following example:) 170.1 138.33 T
FMENDPAGE
%%EndPage: "32" 41
%%Page: "33" 41
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(3.8 Comments) 98.1 668.33 T
4 F
(33) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 9 Q
0 X
(proc power {base p} {) 179.1 633 T
(set result 1) 200.63 622.92 T
(while {$p > 0} {) 200.63 612.84 T
(set result [expr $result*base]) 222.23 602.76 T
(set p [expr $p-1]) 222.23 592.67 T
(}) 200.63 582.59 T
(return $result) 200.63 572.51 T
(}) 179.1 562.43 T
1 10 Q
-0.19 (In this case the third ar) 152.1 548.76 P
-0.19 (gument to) 242.3 548.76 P
3 F
-0.45 (proc) 284.68 548.76 P
1 F
-0.19 ( contains two pairs of nested braces \050the outermost) 308.67 548.76 P
-0.41 (braces are removed by the T) 152.1 536.68 P
-0.41 (cl parser\051. The command substitution requested with \322) 262.87 536.68 P
3 F
-0.98 ([expr) 477.1 536.68 P
($p-1]) 152.1 524.6 T
1 F
(\323 will not be performed when the) 182.08 524.6 T
3 F
(proc) 317.26 524.6 T
1 F
( command is parsed, or even when the) 341.25 524.6 T
3 F
(while) 152.1 512.52 T
1 F
( command is parsed as part of executing the procedure\325) 182.08 512.52 T
(s body) 402.74 512.52 T
(, but only when) 428.47 512.52 T
3 F
(while) 152.1 500.44 T
1 F
( evaluates its second ar) 182.08 500.44 T
(gument to execute the loop.) 274.05 500.44 T
2 F
(Note:) 119.09 485.44 T
(If a brace is backslashed then it does not count in \336nding the matching close brace for a) 152.1 485.44 T
(wor) 152.1 475.36 T
(d enclosed in braces. The backslash will not be r) 167.28 475.36 T
(emoved when the wor) 361.8 475.36 T
(d is parsed.) 448.31 475.36 T
(Note:) 119.09 462.36 T
(The only form of substitution that occurs between braces is for backslash-newline. As) 152.1 462.36 T
(discussed in Section 3.5, backslash-newline sequences ar) 152.1 452.28 T
(e actually r) 380.46 452.28 T
(emoved in a pr) 425.62 452.28 T
(e-) 484.93 452.28 T
(pr) 152.1 442.2 T
(ocessing step befor) 160.62 442.2 T
(e the command is parsed.) 236.86 442.2 T
98.1 400.84 512.1 403.86 C
152.1 402.06 512.1 402.06 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 402.35 143.1 402.35 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(3.8) 124.63 407.86 T
(Comments) 152.1 407.86 T
1 10 Q
-0.05 (If the \336rst non-blank character of a command is) 152.1 384.17 P
3 F
-0.12 (#) 344.54 384.17 P
1 F
-0.05 ( then the) 350.53 384.17 P
3 F
-0.12 (#) 387.3 384.17 P
1 F
-0.05 ( and all the characters follow-) 393.29 384.17 P
(ing it up through the next newline are treated as a comment and discarded. Note that the) 152.1 372.09 T
(hash-mark must occur in a position where T) 152.1 360.01 T
(cl is expecting the \336rst character of a com-) 327.66 360.01 T
(mand. If a hash-mark occurs anywhere else then it is treated as an ordinary character that) 152.1 347.93 T
(forms part of a command word:) 152.1 335.85 T
3 9 Q
(# This is a comment) 179.1 321.51 T
(set a 100) 179.1 311.43 T
(# Not a comment) 297.73 311.43 T
6 F
(\306) 162.9 298.43 T
7 F
(wrong # args: should be "set varName ?newValue?") 179.1 298.43 T
3 F
(set b 101;) 179.1 285.43 T
(# This is a comment) 297.73 285.43 T
6 F
(\336) 162.9 272.43 T
7 F
(101) 179.1 272.43 T
1 10 Q
(The) 152.1 258.76 T
3 F
(#) 170.14 258.76 T
1 F
( on the second line is not treated as a comment character because it occurs in the) 176.14 258.76 T
-0.13 (middle of a command. As a result the \336rst) 152.1 246.68 P
3 F
-0.32 (set) 321.35 246.68 P
1 F
-0.13 ( command receives 6 ar) 339.34 246.68 P
-0.13 (guments and gener-) 433.54 246.68 P
(ates an error) 152.1 234.6 T
(. The last) 200.94 234.6 T
3 F
(#) 240.36 234.6 T
1 F
( is treated as a comment character) 246.36 234.6 T
(, since it occurs just after the) 381.39 234.6 T
(command was terminated with a semi-colon.) 152.1 222.52 T
98.1 179.16 512.1 182.19 C
152.1 180.39 512.1 180.39 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 180.67 143.1 180.67 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(3.9) 124.63 186.19 T
(Normal and exceptional returns) 152.1 186.19 T
1 10 Q
-0.09 (A T) 152.1 162.5 P
-0.09 (cl command can terminate in several dif) 167.14 162.5 P
-0.09 (ferent ways. A) 326.88 162.5 P
2 F
-0.09 (normal r) 387.68 162.5 P
-0.09 (eturn) 422.49 162.5 P
1 F
-0.09 ( is the most com-) 443.59 162.5 P
(mon case; it means that the command completed successfully and the return includes a) 152.1 150.41 T
(string result. T) 152.1 138.33 T
(cl also supports) 209.98 138.33 T
2 F
(exceptional r) 274.66 138.33 T
(eturns) 326.75 138.33 T
1 F
( from commands. The most frequent) 351.74 138.33 T
FMENDPAGE
%%EndPage: "33" 42
%%Page: "34" 42
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(34) 98.1 668.33 T
5 F
(T) 419.32 668.33 T
(cl Language Syntax) 424.32 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(form of exceptional return is an error) 152.1 632.33 T
(. When an error return occurs, it means that the com-) 299.76 632.33 T
(mand could not complete its intended function. The command is aborted and any com-) 152.1 620.33 T
-0.04 (mands that follow it in the script are skipped. An error return includes a string identifying) 152.1 608.33 P
(what went wrong; the string is normally displayed by the application. For example, the) 152.1 596.33 T
(following) 152.1 584.33 T
3 F
(set) 193.47 584.33 T
1 F
( command generates an error because it has too many ar) 211.46 584.33 T
(guments:) 435.53 584.33 T
3 9 Q
(set state West Virginia) 179.1 570 T
6 F
(\306) 162.9 557 T
7 F
(wrong # args: should be "set varName ?newValue?") 179.1 557 T
1 10 Q
(Dif) 152.1 543.33 T
(ferent commands generate errors under dif) 165.24 543.33 T
(ferent conditions. For example,) 335.19 543.33 T
3 F
(expr) 462.88 543.33 T
1 F
-0.27 (accepts any number of ar) 152.1 531.33 P
-0.27 (guments but requires the ar) 251.29 531.33 P
-0.27 (guments to have a particular syntax; it) 358.83 531.33 P
(generates an error if, for example, parentheses aren\325) 152.1 519.33 T
(t matched:) 359.78 519.33 T
3 9 Q
(expr 3 * \05020+4) 179.1 505 T
6 F
(\306) 162.9 492 T
7 F
(unmatched parentheses in expression ") 179.1 492 T
3 F
(3 * \05020+4) 378.62 492 T
7 F
(") 427.15 492 T
1 10 Q
(The complete exceptional return mechanism for T) 170.1 478.33 T
(cl is discussed in Chapter 9. It sup-) 369.8 478.33 T
(ports a number of exceptional returns other than errors, provides additional information) 152.1 466.33 T
-0.04 (about errors besides the error message mentioned above, and allows errors to be \322caught\323) 152.1 454.33 P
-0.34 (so that ef) 152.1 442.33 P
-0.34 (fects of the error can be contained within a piece of T) 187.87 442.33 P
-0.34 (cl code. For now) 397.38 442.33 P
-0.34 (, though, all) 462.88 442.33 P
(you need to know is that commands normally return string results but they sometimes) 152.1 430.33 T
(return errors that cause T) 152.1 418.33 T
(cl command interpretation to be aborted.) 251.87 418.33 T
2 F
(Note:) 119.09 403.33 T
-0.37 (Y) 152.1 403.33 P
-0.37 (ou may also \336nd the) 156.74 403.33 P
7 F
-0.89 (errorInfo) 237.88 403.33 P
2 F
-0.37 ( variable useful. After an err) 291.85 403.33 P
-0.37 (or T) 403.99 403.33 P
-0.37 (cl sets) 419.64 403.33 P
7 F
-0.89 (errorInfo) 446.1 403.33 P
2 F
-0.37 ( to) 500.07 403.33 P
(hold a stack trace indicating exactly wher) 152.1 393.33 T
(e the err) 319.4 393.33 T
(or occurr) 352.89 393.33 T
(ed. Y) 390.55 393.33 T
(ou can print out this) 409.62 393.33 T
(variable with the command \322) 152.1 383.33 T
7 F
(set errorInfo) 269.26 383.33 T
2 F
(\323.) 347.21 383.33 T
98.1 341.98 512.1 345 C
152.1 343.2 512.1 343.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 343.49 143.1 343.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(3.10) 117.96 349 T
(More on substitutions) 152.1 349 T
1 10 Q
-0.2 (The most common dif) 152.1 325.31 P
-0.2 (\336culty for new T) 239.88 325.31 P
-0.2 (cl users is understanding when substitutions do and) 306.04 325.31 P
(do not occur) 152.1 313.31 T
(. A typical scenario is for a user to be surprised at the behavior of a script) 201.51 313.31 T
(because a substitution didn\325) 152.1 301.31 T
(t occur when the user expected it to happen, or a substitution) 263.24 301.31 T
(occurred when it wasn\325) 152.1 289.31 T
(t expected. However) 245.45 289.31 T
(, I think that you\325ll \336nd T) 327.47 289.31 T
(cl\325) 428.67 289.31 T
(s substitution) 438.66 289.31 T
(mechanism to be simple and predictable if you just remember two related rules:) 152.1 277.31 T
0 F
(1.) 152.1 262.31 T
1 F
(T) 162.9 262.31 T
(cl parses a command and makes substitutions in a single pass from left to right. Each) 168.31 262.31 T
(character is scanned exactly once.) 162.9 250.31 T
0 F
(2.) 152.1 235.31 T
1 F
-0.02 (At most a single layer of substitution occurs for each character; the result of one substi-) 162.9 235.31 P
(tution is not scanned for further substitutions.) 162.9 223.31 T
(T) 152.1 208.31 T
(cl\325) 157.51 208.31 T
(s substitutions are simpler and more regular than you may be used to if you\325ve pro-) 167.5 208.31 T
(grammed with UNIX shells \050particularly) 152.1 196.31 T
3 F
(csh) 317.26 196.31 T
1 F
(\051. When new users run into problems with) 335.25 196.31 T
(T) 152.1 184.31 T
(cl substitutions it is often because they have assumed a more complex model than actu-) 157.51 184.31 T
(ally exists.) 152.1 172.31 T
(For example, consider the following command:) 170.1 160.31 T
FMENDPAGE
%%EndPage: "34" 43
%%Page: "35" 43
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(3.10 More on substitutions) 98.1 668.33 T
4 F
(35) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 9 Q
0 X
(set x [format {Earnings for July: $%.2f} $earnings]) 179.1 633 T
6 F
(\336) 162.9 620 T
7 F
(Earnings for July: $1400.26) 179.1 620 T
1 10 Q
(The characters between the brackets are scanned exactly once, during command substitu-) 152.1 606.33 T
(tion, and the value of the) 152.1 593.85 T
3 F
(earnings) 253.97 593.85 T
1 F
( variable is substituted at that time. It is) 301.95 593.85 T
2 F
(not) 461.86 593.85 T
1 F
( the case) 474.63 593.85 T
(that T) 152.1 581.37 T
(cl \336rst scans the whole) 175 581.37 T
3 F
(set) 268.55 581.37 T
1 F
( command to substitute variables, then makes another) 286.54 581.37 T
(pass to perform command substitution; everything happens in a single scan. The result of) 152.1 568.89 T
(the) 152.1 556.41 T
3 F
(format) 166.81 556.41 T
1 F
( command is passed verbatim to) 202.79 556.41 T
3 F
(set) 333.82 556.41 T
1 F
( as its second ar) 351.81 556.41 T
(gument without any) 414.92 556.41 T
-0.12 (additional scanning \050for example, the dollar) 152.1 543.93 P
-0.12 (-sign in) 326.19 543.93 P
3 F
-0.28 (format) 358.72 543.93 P
1 F
-0.12 (\325) 394.7 543.93 P
-0.12 (s result does not trigger vari-) 397.48 543.93 P
(able substitution\051.) 152.1 531.44 T
(One consequence of the substitution rules is that all the word boundaries within a) 170.1 519.45 T
(command are immediately evident and are not af) 152.1 506.96 T
(fected by substitutions. For example,) 347.6 506.96 T
(consider the following script:) 152.1 494.48 T
3 9 Q
(set city "Los Angeles") 179.1 480.15 T
(set bigCity $city) 179.1 469.67 T
1 10 Q
(The second) 152.1 456 T
3 F
(set) 200.39 456 T
1 F
( command is guaranteed to have exactly three words regardless of the) 218.38 456 T
(value of variable) 152.1 443.52 T
3 F
(city) 221.76 443.52 T
1 F
(. In this case) 245.1 443.52 T
3 F
(city) 297.56 443.52 T
1 F
( contains a space character but the space is) 321.55 443.52 T
2 F
(not) 494.45 443.52 T
1 F
(treated as a word separator) 152.1 431.04 T
(.) 258.67 431.04 T
-0.31 (In some situations the single-layer) 170.1 419.04 P
-0.31 (-of-substitutions rule can be a hindrance rather than) 305.82 419.04 P
(a help. For example, the following script is an erroneous attempt to delete all \336les with) 152.1 406.56 T
(names ending in \322) 152.1 394.07 T
3 F
(.o) 224.55 394.07 T
1 F
(\323:) 236.54 394.07 T
3 9 Q
(exec rm [glob *.o]) 179.1 379.74 T
6 F
(\306) 162.9 366.74 T
7 F
(rm: a.o b.o c.o nonexistent) 179.1 366.74 T
1 10 Q
(The) 152.1 353.07 T
3 F
(glob) 170.14 353.07 T
1 F
( command returns a list of all \336le names that match the pattern \322) 194.13 353.07 T
3 F
(*.o) 450.9 353.07 T
1 F
(\323, such as) 468.89 353.07 T
-0.25 (\322) 152.1 340.59 P
3 F
-0.61 (a.o b.o c.o) 156.54 340.59 P
1 F
-0.25 (\323. The) 221.28 340.59 P
3 F
-0.61 (exec) 248.24 340.59 P
1 F
-0.25 ( command then attempts to invoke the) 272.23 340.59 P
3 F
-0.61 (rm) 425.63 340.59 P
1 F
-0.25 ( program to delete) 437.62 340.59 P
(all of these \336les. However) 152.1 328.11 T
(, the entire list of \336les is passed to) 256.34 328.11 T
3 F
(rm) 394.6 328.11 T
1 F
( as a single ar) 406.59 328.11 T
(gument;) 460.81 328.11 T
3 F
(rm) 496.07 328.11 T
1 F
(reports an error because it cannot \336nd a \336le named \322) 152.1 315.63 T
3 F
(a.o b.o c.o) 361.38 315.63 T
1 F
(\323. For) 427.34 315.63 T
3 F
(rm) 453.15 315.63 T
1 F
( to work) 465.15 315.63 T
(correctly the result of) 152.1 303.15 T
3 F
(glob) 240.36 303.15 T
1 F
( must be split up into multiple words.) 264.35 303.15 T
-0.27 (Fortunately) 170.1 291.15 P
-0.27 (, it is easy to add additional layers of parsing if you want them. Remember) 215.54 291.15 P
(that T) 152.1 278.67 T
(cl commands are evaluated in two phases: parsing and execution. The substitution) 175 278.67 T
(rules apply only to the parsing phase. Once T) 152.1 266.18 T
(cl passes the words of a command to a com-) 332.66 266.18 T
-0.38 (mand procedure for execution, the command procedure can do anything it likes with them.) 152.1 253.7 P
(Some commands will reparse their words, for example by passing them back to the T) 152.1 241.22 T
(cl) 492.55 241.22 T
-0.02 (interpreter again.) 152.1 228.74 P
3 F
-0.05 (Eval) 222.83 228.74 P
1 F
-0.02 ( is an example of such a command, and it can be used to solve the) 246.81 228.74 P
(problems with) 152.1 216.26 T
3 F
(rm) 212.07 216.26 T
1 F
( above:) 224.06 216.26 T
3 9 Q
(eval exec rm [glob *.o]) 179.1 201.93 T
3 10 Q
(Eval) 152.1 188.26 T
1 F
( concatenates all of its ar) 176.09 188.26 T
(guments with spaces in-between and then evaluates the) 274.99 188.26 T
-0.32 (result as a T) 152.1 175.78 P
-0.32 (cl script, at which point another round of parsing and evaluation occurs. In this) 199.02 175.78 P
(example) 152.1 163.3 T
3 F
(eval) 188.46 163.3 T
1 F
( receives three ar) 212.45 163.3 T
(guments: \322) 280.25 163.3 T
3 F
(exec) 323.84 163.3 T
1 F
(\323, \322) 347.82 163.3 T
3 F
(rm) 361.7 163.3 T
1 F
(\323, and \322) 373.69 163.3 T
3 F
(a.o b.o c.o) 404.49 163.3 T
1 F
(\323. It con-) 470.45 163.3 T
(catenates them to form the string \322) 152.1 150.82 T
3 F
(exec rm a.o b.o c.o) 290.33 150.82 T
1 F
(\323. When this string is) 404.27 150.82 T
(parsed as a T) 152.1 138.33 T
(cl script it yields \336ve words; each of the \336le names is passed to) 203.85 138.33 T
3 F
(exec) 458.13 138.33 T
1 F
( and) 482.12 138.33 T
FMENDPAGE
%%EndPage: "35" 44
%%Page: "36" 44
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(36) 98.1 668.33 T
5 F
(T) 419.32 668.33 T
(cl Language Syntax) 424.32 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(then to the) 152.1 632.33 T
3 F
(rm) 196.79 632.33 T
1 F
( program as a separate ar) 208.79 632.33 T
(gument, so the \336les are all removed successfully) 308.23 632.33 T
(.) 501.34 632.33 T
(See Section 7.5 for more details on this.) 152.1 620.33 T
-0.06 (One \336nal note. It is possible to use substitutions in very complex ways but I ur) 170.1 608.33 P
-0.06 (ge you) 482.79 608.33 P
(not to do so. Substitutions work best when used in very simple ways such as) 152.1 596.33 T
-0.36 (\322) 152.1 584.33 P
3 F
-0.85 (set) 156.54 584.33 P
-0.85 (a) 180.52 584.33 P
-0.85 ($b) 192.52 584.33 P
1 F
-0.36 (\323. If you use a great many substitutions in a single command, and particularly) 204.51 584.33 P
-0.15 (if you use lots of backslashes, your code is unlikely to be unreadable and it\325) 152.1 572.33 P
-0.15 (s also unlikely) 452.3 572.33 P
-0.3 (to work reliably) 152.1 560.33 P
-0.3 (. In situations like these I suggest breaking up the of) 214.7 560.33 P
-0.3 (fending command into) 420 560.33 P
-0.04 (several commands that build up the ar) 152.1 548.33 P
-0.04 (guments in simple stages. T) 303.79 548.33 P
-0.04 (cl provides several com-) 414.25 548.33 P
(mands, such as) 152.1 536.33 T
3 F
(format) 214.84 536.33 T
1 F
( and) 250.82 536.33 T
3 F
(list) 270.24 536.33 T
1 F
(, that should make this easy to do.) 294.23 536.33 T
FMENDPAGE
%%EndPage: "36" 45
%%Page: "37" 45
612 792 0 FMBEGINPAGE
98.1 675 512.1 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
98.1 450 512.1 450 2 L
7 X
V
2 Z
0 X
N
98.1 108 512.1 126 R
7 X
V
4 10 Q
0 X
(37) 500.99 119.33 T
98.1 54 512.1 108 R
7 X
V
1 9 Q
0 X
(Copyright \251 1993 Addison-W) 152.1 102 T
(esley Publishing Company) 261.32 102 T
(, Inc.) 357.1 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 152.1 91 T
(. Any) 485.77 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 152.1 80 T
-0.34 (lisher) 152.1 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 171.58 69 P
(does not of) 152.1 58 T
(fer warranties in regard to this draft.) 191.88 58 T
0 24 Q
(Chapter 4) 152.1 605 T
-0.48 (V) 152.1 575 S
-0.48 (ariables) 166.73 575 S
98.1 135 512.1 423 R
7 X
V
1 10 Q
0 X
(T) 152.1 416.33 T
(cl supports two kinds of variables: simple variables and associative arrays. This chapter) 157.51 416.33 T
(describes the basic T) 152.1 404.33 T
(cl commands for manipulating variables and arrays, and it also pro-) 234.94 404.33 T
-0.32 (vides a more complete description of variable substitution. See T) 152.1 392.33 P
-0.32 (able 4.1 for a summary of) 408.3 392.33 P
(the commands discussed in this chapter) 152.1 380.33 T
(.) 309.5 380.33 T
98.1 336.98 512.1 340 C
152.1 338.2 512.1 338.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 338.49 143.1 338.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(4.1) 124.63 344 T
(Simple variables and the set command) 152.1 344 T
1 10 Q
(A simple T) 152.1 320.31 T
(cl variable consists of two things: a name and a value. Both the name and the) 196.38 320.31 T
(value may be arbitrary strings of characters. For example, it is possible to have a variable) 152.1 308.31 T
(named \322) 152.1 296.31 T
3 F
(xyz !# 22) 185.68 296.31 T
1 F
(\323 or \322) 239.65 296.31 T
3 F
(March earnings: $100,472) 261.85 296.31 T
1 F
(\323. In practice variable) 405.77 296.31 T
(names usually start with a letter and consist of a combination of letters, digits, and under-) 152.1 284.31 T
(scores, since that makes it easier to use variable substitution.) 152.1 272.31 T
(V) 170.1 260.31 T
(ariables may be created, read, and modi\336ed with the) 176.21 260.31 T
3 F
(set) 387.43 260.31 T
1 F
( command, which takes) 405.42 260.31 T
-0.37 (either one or two ar) 152.1 248.31 P
-0.37 (guments. The \336rst ar) 228.72 248.31 P
-0.37 (gument is the name of a variable and the second, if) 310.17 248.31 P
(present, is a new value for the variable:) 152.1 236.31 T
3 9 Q
(set a {Eggs: $2.18/dozen}) 179.1 221.98 T
6 F
(\336) 162.9 208.98 T
7 F
(Eggs: $2.18/dozen) 179.1 208.98 T
3 F
(set a) 179.1 195.98 T
6 F
(\336) 162.9 182.98 T
7 F
(Eggs: $2.18/dozen) 179.1 182.98 T
3 F
(set a 44) 179.1 169.98 T
6 F
(\336) 162.9 156.98 T
7 F
(44) 179.1 156.98 T
44.1 351 98.1 423 C
35.1 360 197.1 414 R
7 X
0 K
V
0 9 Q
0 X
(FIGURE  4) 35.1 408 T
(T) 35.1 387 T
(ABLE  4) 40.43 387 T
26.1 351 125.1 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "37" 46
%%Page: "38" 46
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(38) 98.1 668.33 T
5 F
(V) 471.18 668.33 T
(ariables) 477.11 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(The \336rst command above creates a new variable) 152.1 373.13 T
3 F
(a) 347.49 373.13 T
1 F
( if it doesn\325) 353.49 373.13 T
(t already exist and sets its) 399.11 373.13 T
-0.18 (value to the character sequence \322) 152.1 361.13 P
3 F
-0.43 (Eggs: $2.18/dozen) 283.03 361.13 P
1 F
-0.18 (\323. The result of the command is) 384.55 361.13 P
-0.36 (the new value of the variable. The second) 152.1 349.13 P
3 F
-0.86 (set) 318.28 349.13 P
1 F
-0.36 ( command has only one ar) 336.27 349.13 P
-0.36 (gument:) 439.51 349.13 P
3 F
-0.86 (a) 474.41 349.13 P
1 F
-0.36 (. In this) 480.41 349.13 P
(form it simply returns the current value of the variable. The third) 152.1 337.13 T
3 F
(set) 413.86 337.13 T
1 F
( command changes) 431.85 337.13 T
(the value of) 152.1 325.13 T
3 F
(a) 201.78 325.13 T
1 F
( to) 207.78 325.13 T
3 F
(44) 220.55 325.13 T
1 F
( and returns that new value.) 232.55 325.13 T
(Although the \336nal value of) 170.1 313.13 T
3 F
(a) 280.31 313.13 T
1 F
( looks like a decimal integer) 286.31 313.13 T
(, it is stored as a character) 398.88 313.13 T
(string. T) 152.1 301.13 T
(cl variables can be used to represent many things, such as integers, \337oating-point) 185.27 301.13 T
(numbers, names, lists, and T) 152.1 289.13 T
(cl scripts, but they are always stored as strings. This use of a) 265.5 289.13 T
(single representation for all values allows dif) 152.1 277.13 T
(ferent values to be manipulated in the same) 331.79 277.13 T
(way and communicated easily) 152.1 265.13 T
(.) 272.19 265.13 T
( T) 170.1 253.13 T
(cl variables are created automatically when they are assigned values. V) 178.01 253.13 T
(ariables) 461.38 253.13 T
(don\325) 152.1 241.13 T
(t have types so there is no need for declarations.) 170.24 241.13 T
98.1 197.78 512.1 200.8 C
152.1 199 512.1 199 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 199.29 143.1 199.29 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(4.2) 124.63 204.8 T
(Arrays) 152.1 204.8 T
1 10 Q
(In addition to simple variables T) 152.1 181.11 T
(cl also provides) 281.6 181.11 T
2 F
(arrays) 346.83 181.11 T
1 F
(. An array is a collection of) 372.93 181.11 T
2 F
(ele-) 484.51 181.11 T
-0.01 (ments) 152.1 169.11 P
1 F
-0.01 (, each of which is a variable with its own name and value. The name of an array ele-) 175.42 169.11 P
(ment has two parts: the name of the array and the name of the element within that array) 152.1 157.11 T
(.) 500.91 157.11 T
(Both array names and element names may be arbitrary strings. For this reason T) 152.1 145.11 T
(cl arrays) 471.72 145.11 T
98.1 379.8 512.1 639 C
98.1 425.6 512.1 440 C
98.1 425.6 512.1 440 R
7 X
0 K
V
152.1 433.52 512.1 433.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 379.8 512.1 639 C
0 9 Q
0 X
0 K
(T) 152.1 419.6 T
(able  4.1.) 157.27 419.6 T
1 F
(A summary of the basic commands for manipulating variables. Optional ar) 195.72 419.6 T
(guments are) 464.89 419.6 T
98.1 393.2 512.1 407.6 C
98.1 393.2 512.1 407.6 R
7 X
0 K
V
152.1 401.12 512.1 401.12 2 L
V
0.5 H
2 Z
0 X
N
98.1 379.8 512.1 639 C
1 9 Q
0 X
0 K
(indicated by enclosing them in question-marks.) 152.1 410.6 T
3 F
(append) 158.1 620 T
7 F
(varName) 195.85 620 T
(value) 238.99 620 T
1 F
(?) 271.34 620 T
7 F
(value) 275.33 620 T
1 F
(...?) 307.69 620 T
(Appends each of the) 230.1 611 T
7 F
(value) 305.97 611 T
1 F
( ar) 332.93 611 T
(guments to variable) 342 611 T
7 F
(varName) 415.14 611 T
1 F
(, in order) 452.89 611 T
(. If) 485.09 611 T
7 F
(varName) 230.1 602 T
1 F
( doesn\325) 267.85 602 T
(t exist then it is created with an empty value before) 293.89 602 T
(appending. The return value is the new value of) 230.1 593 T
7 F
(varName) 403.82 593 T
1 F
(.) 441.57 593 T
3 F
(incr) 158.1 574 T
7 F
(varName) 185.06 574 T
1 F
(?) 228.2 574 T
7 F
(increment) 232.19 574 T
1 F
(?) 280.72 574 T
(Adds) 230.1 565 T
7 F
(increment) 251.32 565 T
1 F
( to the value of variable) 299.85 565 T
7 F
(varName) 387.21 565 T
1 F
(.) 424.96 565 T
7 F
(Increment) 429.45 565 T
1 F
( and) 477.98 565 T
(the old value of) 230.1 556 T
7 F
(varName) 288.51 556 T
1 F
( must both be integer strings \050decimal,) 326.26 556 T
(hexadecimal, or octal\051. If) 230.1 547 T
7 F
(increment) 322.94 547 T
1 F
( is omitted then it defaults to) 371.47 547 T
3 10 Q
(1) 476.58 547 T
1 9 Q
(. The) 482.58 547 T
(new value is stored in) 230.1 538 T
7 F
(varName) 310.73 538 T
1 F
( as a decimal string and returned as the) 348.47 538 T
(result of the command.) 230.1 529 T
3 F
(set varName) 158.1 510 T
1 F
(?) 222.81 510 T
7 F
(value) 226.8 510 T
1 F
(?) 253.76 510 T
(If) 230.1 501 T
7 F
(value) 238.33 501 T
1 F
( is speci\336ed, sets the value of variable) 265.3 501 T
7 F
(varName) 403.83 501 T
1 F
( to) 441.57 501 T
7 F
(value) 453.06 501 T
1 F
(. In) 480.02 501 T
(any case the command returns the \050new\051 value of the variable.) 230.1 492 T
3 F
(unset) 158.1 473 T
7 F
(varName) 190.46 473 T
1 F
(?) 233.59 473 T
7 F
(varName varName) 237.59 473 T
1 F
(...?) 323.86 473 T
(Deletes the variables given by the) 230.1 464 T
7 F
(varName) 353.9 464 T
1 F
( ar) 391.65 464 T
(guments. Returns an empty) 400.72 464 T
(string.) 230.1 455 T
152.1 631.75 152.1 448.25 2 L
V
0.5 H
0 Z
N
512.1 631.75 512.1 448.25 2 L
V
N
151.85 632 512.35 632 2 L
V
N
151.85 586 512.35 586 2 L
V
0.25 H
N
151.85 522 512.35 522 2 L
V
N
151.85 485 512.35 485 2 L
V
N
151.85 448 512.35 448 2 L
V
0.5 H
N
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "38" 47
%%Page: "39" 47
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(4.3 V) 98.1 668.33 T
(ariable substitution) 120.7 668.33 T
4 F
(39) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(are sometimes called) 152.1 632.33 T
2 F
(associative arrays) 238.42 632.33 T
1 F
( to distinguish them from arrays in other lan-) 311.43 632.33 T
(guages where the element names must be integers.) 152.1 620.02 T
-0.42 (Array elements are referenced using notation like) 170.1 608.02 P
3 F
-1 (earnings\050January\051) 367.28 608.02 P
1 F
-0.42 ( where the) 469.23 608.02 P
(array name \050) 152.1 595.7 T
3 F
(earnings) 202.6 595.7 T
1 F
( in this case\051 is followed by the element name in parentheses) 250.58 595.7 T
-0.28 (\050) 152.1 583.38 P
3 F
-0.68 (January) 155.43 583.38 P
1 F
-0.28 ( in this case\051. Arrays may be used anywhere that simple variables may be used,) 197.4 583.38 P
(such as in the) 152.1 571.07 T
3 F
(set) 208.73 571.07 T
1 F
( command:) 226.72 571.07 T
3 9 Q
(set earnings\050January\051 87966) 179.1 556.73 T
6 F
(\336) 162.9 543.73 T
7 F
(87966) 179.1 543.73 T
3 F
(set earnings\050February\051 95400) 179.1 530.73 T
6 F
(\336) 162.9 517.73 T
7 F
(95400) 179.1 517.73 T
3 F
(set earnings\050January\051) 179.1 504.73 T
6 F
(\336) 162.9 491.73 T
7 F
(87966) 179.1 491.73 T
1 10 Q
-0.04 (The \336rst command creates an array named) 152.1 478.07 P
3 F
-0.1 (earnings) 324.17 478.07 P
1 F
-0.04 (, if it doesn\325) 372.14 478.07 P
-0.04 (t already exist. Then it) 420.14 478.07 P
-0.23 (creates an element) 152.1 465.75 P
3 F
-0.55 (January) 227.73 465.75 P
1 F
-0.23 ( within the array) 269.7 465.75 P
-0.23 (, if it doesn\325) 334.14 465.75 P
-0.23 (t already exist, and assigns it the) 381.58 465.75 P
(value) 152.1 453.43 T
3 F
(87966) 176.25 453.43 T
1 F
(. The second command assigns a value to the) 206.23 453.43 T
3 F
(February) 388.88 453.43 T
1 F
( element of the) 436.85 453.43 T
(array) 152.1 441.11 T
(, and the third command returns the value of the) 171.98 441.11 T
3 F
(January) 366.56 441.11 T
1 F
( element.) 408.54 441.11 T
98.1 397.76 512.1 400.78 C
152.1 398.98 512.1 398.98 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 399.27 143.1 399.27 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(4.3) 124.63 404.78 T
(V) 152.1 404.78 T
(ariable substitution) 159.44 404.78 T
1 10 Q
(Chapter 3 introduced the use of) 170.1 381.09 T
3 F
($) 298.34 381.09 T
1 F
(-notation for substituting variable values into T) 304.34 381.09 T
(cl) 492.41 381.09 T
(commands. This section describes the mechanism in more detail.) 152.1 368.77 T
(V) 170.1 356.77 T
(ariable substitution is triggered by the presence of an unquoted) 176.21 356.77 T
3 F
($) 429.92 356.77 T
1 F
( character in a T) 435.91 356.77 T
(cl) 500.15 356.77 T
(command. The characters following the) 152.1 344.46 T
3 F
($) 313.64 344.46 T
1 F
( are treated as a variable name, and the) 319.64 344.46 T
3 F
($) 477.27 344.46 T
1 F
( and) 483.27 344.46 T
(name are replaced in the word by the value of the variable. T) 152.1 332.14 T
(cl provides three forms of) 394.81 332.14 T
(variable substitution. So far you have seen only the simplest form, which is used like this:) 152.1 319.82 T
3 9 Q
(expr $a+2) 179.1 305.49 T
1 10 Q
(In this form the) 152.1 291.82 T
3 F
($) 216.51 291.82 T
1 F
( is followed by a variable name consisting of letters, digits, and under-) 222.5 291.82 T
(scores. The \336rst character that is not a letter or digit or underscore \050\322) 152.1 279.5 T
3 F
(+) 425.77 279.5 T
1 F
(\323 in the example\051) 431.77 279.5 T
(terminates the name.) 152.1 267.19 T
-0.26 (The second form of variable substitution allows array elements to be substituted. This) 170.1 255.19 P
(form is like the \336rst one except that the variable name is followed immediately by an ele-) 152.1 242.87 T
(ment name enclosed in parentheses. V) 152.1 230.55 T
(ariable, command, and backslash substitutions are) 304.21 230.55 T
(performed on the element name in the same way as a command word in double-quotes,) 152.1 218.24 T
(and spaces in the element name are treated as part of the name rather than as word separa-) 152.1 205.92 T
(tors. For example, consider the following script:) 152.1 193.6 T
3 9 Q
(set yearTotal 0) 179.1 179.27 T
(foreach month {Jan Feb Mar Apr May Jun Jul Aug Sep \134) 179.1 168.95 T
(Oct Nov Dec} {) 222.23 158.63 T
(set yearTotal [expr $yearTotal+$earnings\050$month\051]) 200.63 148.32 T
(}) 179.1 138 T
FMENDPAGE
%%EndPage: "39" 48
%%Page: "40" 48
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(40) 98.1 668.33 T
5 F
(V) 471.18 668.33 T
(ariables) 477.11 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(In the) 152.1 632.33 T
3 F
(expr) 177.64 632.33 T
1 F
( command \322) 201.62 632.33 T
3 F
($earnings\050$month\051) 250.48 632.33 T
1 F
(\323 is replaced with the value of an ele-) 352.42 632.33 T
(ment of the array) 152.1 620.33 T
3 F
(earnings) 223.15 620.33 T
1 F
(. The element\325) 271.12 620.33 T
(s name is given by the value of the) 328.58 620.33 T
3 F
(month) 469.88 620.33 T
1 F
(variable, which varies from iteration to iteration.) 152.1 608.33 T
-0.02 (The last form of substitution is used for simple variables in places where the variable) 170.1 596.33 P
-0.23 (name is followed by a letter or number or underscore. For example, suppose that you wish) 152.1 584.33 P
(to pass a value like \322) 152.1 572.33 T
3 F
(1.5m) 235.09 572.33 T
1 F
(\323 to a command as an ar) 259.08 572.33 T
(gument but the number is in a variable) 355.49 572.33 T
3 F
-0.41 (size) 152.1 560.33 P
1 F
-0.17 ( \050in Tk you might do this to specify a size in millimeters\051. If you try to substitute the) 176.09 560.33 P
(variable value with a form like \322) 152.1 548.33 T
3 F
($sizem) 282 548.33 T
1 F
(\323 then T) 317.98 548.33 T
(cl will treat the) 350.03 548.33 T
3 F
(m) 412.77 548.33 T
1 F
( as part of the variable) 418.76 548.33 T
(name. T) 152.1 536.33 T
(o get around this problem you can enclose the variable name in braces as in the) 184.15 536.33 T
(following command:) 152.1 524.33 T
3 9 Q
(.canvas conf) 179.1 510 T
(igure -width ${size}m) 243.81 510 T
1 10 Q
(Y) 152.1 496.33 T
(ou can also use braces to specify variable names containing characters other than letters) 158.32 496.33 T
(or numbers or underscores.) 152.1 484.33 T
2 F
(Note:) 119.09 469.33 T
(Braces can only be used to delimit simple variables. However) 152.1 469.33 T
(, they shouldn\325) 398.05 469.33 T
(t be needed) 456.06 469.33 T
(for arrays since the par) 152.1 459.33 T
(entheses alr) 246.12 459.33 T
(eady indicate wher) 293.77 459.33 T
(e the variable name ends.) 369.46 459.33 T
1 F
(T) 170.1 446.33 T
(cl\325) 175.51 446.33 T
(s variable substitution mechanism is only intended to handle the most common) 185.5 446.33 T
-0.38 (situations; there exist scenarios where none of the above forms of substitution achieves the) 152.1 434.33 P
-0.24 (desired ef) 152.1 422.33 P
-0.24 (fect. More complicated situations can be handled with a sequence of commands.) 190.81 422.33 P
(For example, the) 152.1 410.33 T
3 F
(format) 222.05 410.33 T
1 F
( command can be used to generate a variable name of almost) 258.03 410.33 T
(any imaginable form,) 152.1 398.33 T
3 F
(set) 240.37 398.33 T
1 F
( can be used to read or write the variable with that name, and) 258.36 398.33 T
(command substitution can be used to substitute the value of the variable into other com-) 152.1 386.33 T
(mands.) 152.1 374.33 T
98.1 330.98 512.1 334 C
152.1 332.2 512.1 332.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 332.49 143.1 332.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(4.4) 124.63 338 T
(Removing variables: unset) 152.1 338 T
1 10 Q
(The) 170.1 314.31 T
3 F
(unset) 188.14 314.31 T
1 F
( command destroys variables. It takes any number of ar) 218.12 314.31 T
(guments, each of) 439.44 314.31 T
(which is a variable name, and removes all of the variables. Future attempts to read the) 152.1 302.31 T
(variables will result in errors just as if the variables had never been set in the \336rst place.) 152.1 290.31 T
(The ar) 152.1 278.31 T
(guments to) 177.73 278.31 T
3 F
(unset) 224.37 278.31 T
1 F
( may be either simple variables, elements of arrays, or whole) 254.35 278.31 T
(arrays, as in the following example:) 152.1 266.31 T
3 9 Q
(unset a earnings\050January\051 b) 179.1 251.98 T
1 10 Q
(In this case the variables) 152.1 238.31 T
3 F
(a) 252.85 238.31 T
1 F
( and) 258.85 238.31 T
3 F
(b) 278.28 238.31 T
1 F
( are removed entirely and the) 284.28 238.31 T
3 F
(January) 403.62 238.31 T
1 F
( element of the) 445.6 238.31 T
3 F
(earnings) 152.1 226.31 T
1 F
( array is removed. The) 200.07 226.31 T
3 F
(earnings) 292.77 226.31 T
1 F
( array continues to exist after the) 340.75 226.31 T
3 F
(unset) 474.25 226.31 T
1 F
(command. If) 152.1 214.31 T
3 F
(a) 205.67 214.31 T
1 F
( or) 211.67 214.31 T
3 F
(b) 224.99 214.31 T
1 F
( is an array then all of the elements of that array are removed along) 230.99 214.31 T
(with the array itself.) 152.1 202.31 T
FMENDPAGE
%%EndPage: "40" 49
%%Page: "41" 49
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(4.5 Multi-dimensional arrays) 98.1 668.33 T
4 F
(41) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 623.98 512.1 627 C
152.1 625.2 512.1 625.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 625.49 143.1 625.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(4.5) 124.63 631 T
(Multi-dimensional arrays) 152.1 631 T
1 10 Q
(T) 152.1 607.31 T
(cl only implements one-dimensional arrays, but multi-dimensional arrays can be simu-) 157.51 607.31 T
(lated by concatenating multiple indices into a single element name. The program below) 152.1 595.31 T
(simulates a two-dimensional array indexed with integers:) 152.1 583.31 T
3 9 Q
(set matrix\0501,1\051 140) 179.1 568.98 T
(set matrix\0501,2\051 218) 179.1 558.98 T
(set matrix\0501,3\051 84) 179.1 548.98 T
(set i 1) 179.1 538.98 T
(set j 2) 179.1 528.98 T
(set cell $matrix\050$i,$j\051) 179.1 518.98 T
6 F
(\336) 162.9 505.98 T
7 F
(218) 179.1 505.98 T
3 10 Q
(Matrix) 152.1 492.31 T
1 F
( is an array with three elements whose names are \322) 188.08 492.31 T
3 F
(1,1) 390.69 492.31 T
1 F
(\323 and \322) 408.68 492.31 T
3 F
(1,2) 436.98 492.31 T
1 F
(\323 and \322) 454.97 492.31 T
3 F
(1,3) 483.28 492.31 T
1 F
(\323.) 501.27 492.31 T
(However) 152.1 480.31 T
(, the array behaves just as if it were a two-dimensional array; in particular) 188.33 480.31 T
(, vari-) 482.7 480.31 T
(able substitution occurs while scanning the element name in the) 152.1 468.31 T
3 F
(expr) 409.71 468.31 T
1 F
( command, so that) 433.7 468.31 T
(the values of) 152.1 456.31 T
3 F
(i) 205.67 456.31 T
1 F
( and) 211.67 456.31 T
3 F
(j) 231.1 456.31 T
1 F
( get combined into an appropriate element name.) 237.09 456.31 T
98.1 412.95 512.1 415.98 C
152.1 414.18 512.1 414.18 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 414.46 143.1 414.46 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(4.6) 124.63 419.98 T
(The incr and append commands) 152.1 419.98 T
3 10 Q
(Incr) 152.1 396.29 T
1 F
( and) 176.09 396.29 T
3 F
(append) 195.52 396.29 T
1 F
( provide simple ways to change the value of a variable.) 231.5 396.29 T
3 F
(Incr) 454.1 396.29 T
1 F
( takes) 478.09 396.29 T
(two ar) 152.1 384.29 T
(guments, which are the name of a variable and an integer; it adds the integer to the) 177.18 384.29 T
-0.23 (variable\325) 152.1 372.29 P
-0.23 (s value, stores the result back into the variable as a decimal string, and returns the) 187.07 372.29 P
(variable\325) 152.1 360.29 T
(s new value as result:) 187.07 360.29 T
3 9 Q
(set x 43) 179.1 345.95 T
(incr x 12) 179.1 335.95 T
6 F
(\336) 162.9 322.95 T
7 F
(55) 179.1 322.95 T
1 10 Q
(The number can have either a positive or negative value. It can also be omitted, in which) 152.1 309.29 T
(case it defaults to) 152.1 297.29 T
3 F
(1) 224.27 297.29 T
1 F
(:) 230.27 297.29 T
3 9 Q
(set x 43) 179.1 282.95 T
(incr x) 179.1 272.95 T
6 F
(\336) 162.9 259.95 T
7 F
(44) 179.1 259.95 T
1 10 Q
-0.08 (Both the variable\325) 152.1 246.29 P
-0.08 (s original value and the increment must be integer strings, either in deci-) 223.56 246.29 P
(mal, octal \050indicated by a leading) 152.1 234.29 T
3 F
(0) 287.83 234.29 T
1 F
(\051, or hexadecimal \050indicated by a leading) 293.83 234.29 T
3 F
(0x) 459.81 234.29 T
1 F
(\051.) 471.8 234.29 T
(The) 170.1 222.29 T
3 F
(append) 188.14 222.29 T
1 F
( command adds text to the end of a variable. It takes two ar) 224.12 222.29 T
(guments,) 460.43 222.29 T
(which are the name of the variable and the new text to add. It appends the new text to the) 152.1 210.29 T
(variable and returns the variable\325) 152.1 198.29 T
(s new value. The following example uses) 283.66 198.29 T
3 F
(append) 451.32 198.29 T
1 F
( to) 487.3 198.29 T
(compute a table of squares:) 152.1 186.29 T
FMENDPAGE
%%EndPage: "41" 50
%%Page: "42" 50
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(42) 98.1 668.33 T
5 F
(V) 471.18 668.33 T
(ariables) 477.11 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 9 Q
0 X
(set msg "") 179.1 633 T
(foreach i {1 2 3 4 5} {) 179.1 623 T
(append msg "$i squared is [expr $i*$i]\134n") 200.63 613 T
(}) 179.1 603 T
(set msg) 179.1 593 T
6 F
(\336) 162.9 580 T
7 F
(1 squared is 1) 179.1 580 T
(2 squared is 4) 179.1 570 T
(3 squared is 9) 179.1 560 T
(4 squared is 16) 179.1 550 T
(5 squared is 25) 179.1 540 T
1 10 Q
(Neither) 170.1 526.33 T
3 F
(incr) 202.57 526.33 T
1 F
( nor) 226.56 526.33 T
3 F
(append) 244.88 526.33 T
1 F
( adds any new functionality to T) 280.86 526.33 T
(cl, since the ef) 409.52 526.33 T
(fects of) 467.07 526.33 T
(both of these commands can be achieved in other ways. However) 152.1 514.33 T
(, they provide simple) 413.44 514.33 T
(ways to do common operations. In addition,) 152.1 502.33 T
3 F
(append) 330.6 502.33 T
1 F
( is implemented in a fashion that) 366.58 502.33 T
(avoids character copying. If you need to construct a very lar) 152.1 490.33 T
(ge string incrementally from) 392 490.33 T
(pieces it will be much more ef) 152.1 478.33 T
(\336cient to use a command like) 272.94 478.33 T
3 9 Q
(append x $piece) 179.1 464 T
1 10 Q
(instead of a command like) 152.1 450.33 T
3 9 Q
(set x "$x$piece") 179.1 436 T
98.1 393.98 512.1 397 C
152.1 395.2 512.1 395.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 395.49 143.1 395.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(4.7) 124.63 401 T
(Preview of other variable facilities) 152.1 401 T
1 10 Q
(T) 170.1 377.31 T
(cl provides a number of other commands for manipulating variables. These com-) 175.51 377.31 T
-0.27 (mands will be introduced in full after you\325ve learned more about the T) 152.1 365.31 P
-0.27 (cl language, but this) 430.17 365.31 P
(section contains a short preview of some of the facilities.) 152.1 353.31 T
(The) 170.1 341.31 T
3 F
(trace) 188.14 341.31 T
1 F
( command can be used to monitor a variable so that a T) 218.12 341.31 T
(cl script gets) 438.93 341.31 T
-0.2 (invoked whenever the variable is set or read or unset. V) 152.1 329.31 P
-0.2 (ariable tracing is sometimes useful) 371.83 329.31 P
-0.05 (during debugging, and it allows you to create read-only variables. Y) 152.1 317.31 P
-0.05 (ou can also use traces) 423.23 317.31 P
-0.34 (for) 152.1 305.31 P
2 F
-0.34 (pr) 165.91 305.31 P
-0.34 (opagation) 174.42 305.31 P
1 F
-0.34 ( so that, for example, a database or screen display gets updated whenever a) 214.96 305.31 P
(variable changes value. V) 152.1 293.31 T
(ariable tracing is discussed in Section 13.4.) 254.23 293.31 T
(The) 170.1 281.31 T
3 F
(array) 188.14 281.31 T
1 F
( command can be used to \336nd out the names of all the elements in an) 218.12 281.31 T
(array and to step through them one at a time \050see Section 13.1\051. It\325) 152.1 269.31 T
(s possible to \336nd out) 416.64 269.31 T
(what variables exist using the) 152.1 257.31 T
3 F
(info) 272.85 257.31 T
1 F
( command \050see Section 13.2\051.) 296.84 257.31 T
(The) 170.1 245.31 T
3 F
(global) 188.14 245.31 T
1 F
( and) 224.12 245.31 T
3 F
(upvar) 243.55 245.31 T
1 F
( commands can be used by a procedure to access variables) 273.53 245.31 T
(other than its own local variables. These commands are discussed in Chapter 8.) 152.1 233.31 T
FMENDPAGE
%%EndPage: "42" 51
%%Page: "43" 51
612 792 0 FMBEGINPAGE
98.1 675 512.1 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
98.1 450 512.1 450 2 L
7 X
V
2 Z
0 X
N
98.1 108 512.1 126 R
7 X
V
4 10 Q
0 X
(43) 500.99 119.33 T
98.1 54 512.1 108 R
7 X
V
1 9 Q
0 X
(Copyright \251 1993 Addison-W) 152.1 102 T
(esley Publishing Company) 261.32 102 T
(, Inc.) 357.1 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 152.1 91 T
(. Any) 485.77 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 152.1 80 T
-0.34 (lisher) 152.1 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 171.58 69 P
(does not of) 152.1 58 T
(fer warranties in regard to this draft.) 191.88 58 T
0 24 Q
(Chapter 5) 152.1 605 T
-0.48 (Expr) 152.1 575 S
-0.48 (essions) 201.73 575 S
98.1 135 512.1 423 R
7 X
V
1 10 Q
0 X
(Expressions combine values \050or) 152.1 416.33 T
2 F
(operands) 282.01 416.33 T
1 F
(\051 with) 319.21 416.33 T
2 F
(operators) 345.3 416.33 T
1 F
(to produce new values. For) 386.67 416.33 T
(example, the expression \322) 152.1 403.92 T
3 F
(4+2) 255.35 403.92 T
1 F
(\323 contains two operands, \322) 273.34 403.92 T
3 F
(4) 379.1 403.92 T
1 F
(\323 and \322) 385.09 403.92 T
3 F
(2) 413.4 403.92 T
1 F
(\323, and one operator) 419.39 403.92 T
(,) 495.59 403.92 T
(\322) 152.1 391.5 T
3 F
(+) 156.54 391.5 T
1 F
(\323; it evaluates to) 162.53 391.5 T
3 F
(6) 230.27 391.5 T
1 F
(. Many T) 236.26 391.5 T
(cl commands expect one or more of their ar) 272.48 391.5 T
(guments to be) 446.61 391.5 T
(expressions. The simplest such command is) 152.1 379.09 T
3 F
(expr) 329.49 379.09 T
1 F
(, which just evaluates its ar) 353.08 379.09 T
(guments as) 461.16 379.09 T
(an expression and returns the result as a string:) 152.1 366.67 T
3 9 Q
(expr \0508+4\051 * 6.2) 179.1 352.34 T
6 F
(\336) 162.9 339.34 T
7 F
(74.4) 179.1 339.34 T
1 10 Q
(Another example is) 152.1 325.67 T
3 F
(if) 232.88 325.67 T
1 F
(, which evaluates its \336rst ar) 244.87 325.67 T
(gument as an expression and uses the) 354.06 325.67 T
(result to determine whether or not to evaluate its second ar) 152.1 313.26 T
(gument as a T) 386.19 313.26 T
(cl script:) 441.84 313.26 T
3 9 Q
(if $x<2 then {set x 2}) 179.1 298.93 T
1 10 Q
(This chapter uses the) 152.1 285.26 T
3 F
(expr) 238.7 285.26 T
1 F
( command for all of its examples, but the same syntax, substi-) 262.69 285.26 T
(tution, and evaluation rules apply to all other uses of expressions too. See T) 152.1 272.84 T
(able 5.1 for a) 453.7 272.84 T
(summary of the) 152.1 260.43 T
3 F
(expr) 217.33 260.43 T
1 F
( command.) 241.32 260.43 T
98.1 217.07 512.1 220.1 C
152.1 218.3 512.1 218.3 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 218.59 143.1 218.59 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(5.1) 124.63 224.1 T
(Numeric operands) 152.1 224.1 T
1 10 Q
(Expression operands are normally integers or real numbers. Integers are usually speci\336ed) 152.1 200.41 T
-0.28 (in decimal, but if the \336rst character is 0 \050zero\051 then the number is read in octal \050base 8\051 and) 152.1 187.99 P
(if the \336rst two characters are) 152.1 175.58 T
3 F
(0x) 268.67 175.58 T
1 F
( then the number is read in hexadecimal \050base 16\051. For) 280.66 175.58 T
(example,) 152.1 163.16 T
3 F
(335) 190.96 163.16 T
1 F
( is a decimal number) 208.95 163.16 T
(,) 291.82 163.16 T
3 F
(0517) 296.82 163.16 T
1 F
( is an octal number with the same value, and) 320.81 163.16 T
3 F
-0.2 (0x14f) 152.1 150.75 P
1 F
-0.09 ( is a hexadecimal number with the same value.) 182.08 150.75 P
3 F
-0.2 (092) 370.62 150.75 P
1 F
-0.09 ( is not a valid integer: the lead-) 388.61 150.75 P
(ing) 152.1 138.33 T
3 F
(0) 167.37 138.33 T
1 F
( causes the number to be read in octal but) 173.37 138.33 T
3 F
(9) 341.58 138.33 T
1 F
( is not a valid octal digit. Real operands) 347.57 138.33 T
44.1 351 98.1 423 C
35.1 360 197.1 414 R
7 X
0 K
V
0 9 Q
0 X
(FIGURE  5) 35.1 408 T
(T) 35.1 387 T
(ABLE  5) 40.43 387 T
26.1 351 125.1 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "43" 52
%%Page: "44" 52
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(44) 98.1 668.33 T
5 F
(Expressions) 457.67 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(may be speci\336ed using most of the forms de\336ned for ANSI C, including the following) 152.1 520.73 T
(examples:) 152.1 508.6 T
3 9 Q
(2.1) 179.1 494.27 T
(7.91e+16) 179.1 484.14 T
(6E4) 179.1 474.01 T
(3.) 179.1 463.87 T
2 10 Q
(Note:) 119.09 450.21 T
-0.31 (These same forms ar) 152.1 450.21 P
-0.31 (e allowable not just in expr) 233.8 450.21 P
-0.31 (essions but anywher) 340.98 450.21 P
-0.31 (e in T) 421.05 450.21 P
-0.31 (cl that an integer) 442.28 450.21 P
(or r) 152.1 440.07 T
(eal value is r) 167 440.07 T
(equir) 218.54 440.07 T
(ed.) 239.27 440.07 T
1 F
(Expression operands can also be non-numeric strings. String operands are discussed) 170.1 427.07 T
(in Section 5.5.) 152.1 414.94 T
98.1 371.59 512.1 374.61 C
152.1 372.81 512.1 372.81 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 373.1 143.1 373.1 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(5.2) 124.63 378.61 T
(Operators and precedence) 152.1 378.61 T
1 10 Q
(T) 152.1 354.92 T
(able 5.2 lists all of the operators supported in T) 157.51 354.92 T
(cl expressions; they are similar to the) 345.57 354.92 T
(operators for expressions in ANSI C. Horizontal lines separate groups of operators with) 152.1 342.79 T
(the same precedence, and operators with higher precedence appear in the table above) 152.1 330.65 T
(operators with lower precedence. For example,) 152.1 318.52 T
3 F
(4*2<7) 342.49 318.52 T
1 F
( evaluates to) 372.48 318.52 T
3 F
(0) 424.94 318.52 T
1 F
( because the) 430.94 318.52 T
3 F
(*) 482.28 318.52 T
1 F
( oper-) 488.27 318.52 T
(ator has higher precedence than) 152.1 306.39 T
3 F
(<) 281.15 306.39 T
1 F
(. Except in the simplest and most obvious cases you) 287.15 306.39 T
(should use parentheses to indicate the way operators should be grouped; this will prevent) 152.1 294.26 T
(errors by you or by others who modify your programs.) 152.1 282.13 T
(Operators with the same precedence group from left to right. For example,) 170.1 270.13 T
3 F
(10-4-3) 470.42 270.13 T
1 F
(is the same as) 152.1 257.99 T
3 F
(\05010-4\051-3) 209.84 257.99 T
1 F
(; it evaluates to) 257.81 257.99 T
3 F
(3) 321.11 257.99 T
1 F
(.) 327.1 257.99 T
4 F
(5.2.1) 119.07 227.99 T
(Arithmetic operators) 152.1 227.99 T
1 F
-0 (T) 152.1 211.99 P
-0 (cl expressions support the arithmetic operators) 157.51 211.99 P
3 F
-0.01 (+) 346.25 211.99 P
1 F
-0 (,) 352.24 211.99 P
3 F
-0.01 (-) 357.24 211.99 P
1 F
-0 (,) 363.24 211.99 P
3 F
-0.01 (*) 368.23 211.99 P
1 F
-0 (,) 374.23 211.99 P
3 F
-0.01 (/) 379.22 211.99 P
1 F
-0 (, and) 385.22 211.99 P
3 F
-0.01 (%) 407.14 211.99 P
1 F
-0 (. The) 413.14 211.99 P
3 F
-0.01 (-) 436.17 211.99 P
1 F
-0 ( operator may be) 442.17 211.99 P
-0.08 (used either as a binary operator for subtraction, as in) 152.1 199.86 P
3 F
-0.19 (4-2) 363.66 199.86 P
1 F
-0.08 (, or as a unary operator for nega-) 381.65 199.86 P
(tion, as in) 152.1 187.73 T
3 F
(-\0506*$i\051) 193.75 187.73 T
1 F
(. The) 235.72 187.73 T
3 F
(/) 258.76 187.73 T
1 F
( operator truncates its result to an integer value if both oper-) 264.76 187.73 T
(ands are integers.) 152.1 175.6 T
3 F
(%) 224.26 175.6 T
1 F
( is the modulus operator: its result is the remainder when its \336rst) 230.26 175.6 T
(operand is divided by the second. Both of the operands for) 152.1 163.47 T
3 F
(%) 388.6 163.47 T
1 F
( must be integers.) 394.6 163.47 T
2 F
(Note:) 119.09 148.47 T
(The / and % operators have a mor) 152.1 148.47 T
(e consistent behavior in T) 289.14 148.47 T
(cl than in ANSI C. In T) 391.5 148.47 T
(cl the) 482.48 148.47 T
-0.1 (r) 152.1 138.33 P
-0.1 (emainder is always positive and has an absolute value less than the absolute value of the) 155.62 138.33 P
98.1 135 512.1 639 C
98.1 527.4 512.1 639 C
98.1 565.4 512.1 579.8 C
98.1 565.4 512.1 579.8 R
7 X
0 K
V
152.1 573.32 512.1 573.32 2 L
V
0.5 H
2 Z
0 X
N
98.1 527.4 512.1 639 C
98.1 542 512.1 556.4 C
98.1 542 512.1 556.4 R
7 X
0 K
V
152.1 549.92 512.1 549.92 2 L
V
0.5 H
2 Z
0 X
N
98.1 527.4 512.1 639 C
0 9 Q
0 X
0 K
(T) 152.1 559.4 T
(able  5.1.) 157.27 559.4 T
1 F
(A summary of the) 195.72 559.4 T
3 F
(expr) 263.11 559.4 T
1 F
( command.) 284.68 559.4 T
3 F
(expr) 158.1 621.8 T
7 F
(arg) 185.06 621.8 T
1 F
(?) 206.63 621.8 T
7 F
(arg arg) 210.62 621.8 T
1 F
(...?) 253.76 621.8 T
(Concatenates all the) 230.1 612.8 T
7 F
(arg) 304.73 612.8 T
1 F
( values together \050with spaces in between\051,) 320.91 612.8 T
(evaluates the result as an expression, and returns a string corresponding to) 230.1 603.8 T
(the expression\325) 230.1 594.8 T
(s value.) 284.27 594.8 T
152.1 633.55 152.1 588.05 2 L
V
0.5 H
0 Z
N
512.1 633.55 512.1 588.05 2 L
V
N
151.85 633.8 512.35 633.8 2 L
V
N
151.85 587.8 512.35 587.8 2 L
V
N
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "44" 53
%%Page: "45" 53
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(5.2 Operators and precedence) 98.1 668.33 T
4 F
(45) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
-0.1 (divisor) 152.1 211.14 P
-0.1 (. ANSI C guarantees only the second pr) 178.76 211.14 P
-0.1 (operty: In both ANSI C and T) 335.94 211.14 P
-0.1 (cl the quotient) 452.7 211.14 P
(will always have the pr) 152.1 201.14 T
(operty that \050) 244.46 201.14 T
7 F
(x/y\051*y + x%y) 293.87 201.14 T
2 F
( is) 365.83 201.14 T
7 F
(x) 377.5 201.14 T
2 F
(., for all) 383.49 201.14 T
7 F
(x) 418.2 201.14 T
2 F
( and) 424.2 201.14 T
7 F
(y) 444.19 201.14 T
2 F
(.) 449.64 201.14 T
98.1 217.8 512.1 639 C
98.1 272.66 512.1 287.06 C
98.1 272.66 512.1 287.06 R
7 X
0 K
V
152.1 280.58 512.1 280.58 2 L
V
0.5 H
2 Z
0 X
N
98.1 217.8 512.1 639 C
0 9 Q
0 X
0 K
(T) 152.1 266.66 T
(able  5.2.) 157.27 266.66 T
1 F
(Summary of the operators allowed in T) 195.72 266.66 T
(cl expressions. These operators have the same) 336.37 266.66 T
-0.03 (behavior as in ANSI C except that some of the operators allow string operands. Groups of operands) 152.1 257.66 P
98.1 231.26 512.1 245.66 C
98.1 231.26 512.1 245.66 R
7 X
0 K
V
152.1 239.18 512.1 239.18 2 L
V
0.5 H
2 Z
0 X
N
98.1 217.8 512.1 639 C
1 9 Q
0 X
0 K
(between horizontal lines have the same precedence; higher groups have higher precedence.) 152.1 248.66 T
1 10 Q
(Syntax) 185.93 614.4 T
(Result) 296.92 614.4 T
(Operand T) 411.67 614.4 T
(ypes) 453.99 614.4 T
3 9 Q
(-) 185.92 597.06 T
7 F
(a) 191.32 597.06 T
1 F
(Negative of) 225.7 597.06 T
7 F
(a) 270.12 597.06 T
1 F
(int, \337oat) 405.7 597.06 T
3 F
(!) 185.92 584.06 T
7 F
(a) 191.32 584.06 T
1 F
(Logical NOT) 225.7 584.06 T
(: 1 if) 273.42 584.06 T
7 F
(a) 292.64 584.06 T
1 F
( is zero, 0 otherwise) 298.04 584.06 T
(int, \337oat) 405.7 584.06 T
3 F
(~) 185.92 571.06 T
7 F
(a) 191.32 571.06 T
1 F
(Bit-wise complement of) 225.7 571.06 T
7 F
(a) 314.82 571.06 T
1 F
(int) 405.7 571.06 T
7 F
(a) 185.92 558.06 T
3 F
(*) 191.32 558.06 T
7 F
(b) 196.71 558.06 T
1 F
(Multiply) 225.7 558.06 T
7 F
(a) 259.41 558.06 T
1 F
( and) 264.8 558.06 T
7 F
(b) 282.27 558.06 T
1 F
(int, \337oat) 405.7 558.06 T
7 F
(a) 185.92 545.06 T
3 F
(/) 191.32 545.06 T
7 F
(b) 196.71 545.06 T
1 F
(Divide) 225.7 545.06 T
7 F
(a) 252.41 545.06 T
1 F
( by) 257.8 545.06 T
7 F
(b) 271.28 545.06 T
1 F
(int, \337oat) 405.7 545.06 T
7 F
(a) 185.92 532.06 T
3 F
(%) 191.32 532.06 T
7 F
(b) 196.71 532.06 T
1 F
(Remainder after dividing) 225.7 532.06 T
7 F
(a) 318.3 532.06 T
1 F
( by) 323.7 532.06 T
7 F
(b) 337.18 532.06 T
1 F
(int) 405.7 532.06 T
7 F
(a) 185.92 519.06 T
3 F
(+) 191.32 519.06 T
7 F
(b) 196.71 519.06 T
1 F
(Add) 225.7 519.06 T
7 F
(a) 243.42 519.06 T
1 F
( and) 248.81 519.06 T
7 F
(b) 266.29 519.06 T
1 F
(int, \337oat) 405.7 519.06 T
7 F
(a) 185.92 506.06 T
3 F
(-) 191.32 506.06 T
7 F
(b) 196.71 506.06 T
1 F
(Subtract) 225.7 506.06 T
7 F
(b) 257.9 506.06 T
1 F
( from) 263.29 506.06 T
7 F
(a) 285.26 506.06 T
1 F
(int, \337oat) 405.7 506.06 T
7 F
(a) 185.92 493.06 T
3 F
(<<) 191.32 493.06 T
7 F
(b) 202.1 493.06 T
1 F
(Left-shift) 225.7 493.06 T
7 F
(a) 261.89 493.06 T
1 F
( by) 267.28 493.06 T
7 F
(b) 280.76 493.06 T
1 F
( bits) 286.16 493.06 T
(int) 405.7 493.06 T
7 F
(a) 185.92 480.06 T
3 F
(>>) 191.32 480.06 T
7 F
(b) 202.1 480.06 T
1 F
(Arithmetic right-shift) 225.7 480.06 T
7 F
(a) 305.08 480.06 T
1 F
( by) 310.48 480.06 T
7 F
(b) 323.96 480.06 T
1 F
( bits) 329.35 480.06 T
(int) 405.7 480.06 T
7 F
(a) 185.92 467.06 T
3 F
(<) 191.32 467.06 T
7 F
(b) 196.71 467.06 T
1 F
(1 if) 225.7 467.06 T
7 F
(a) 240.18 467.06 T
1 F
( is less than) 245.57 467.06 T
7 F
(b) 289.51 467.06 T
1 F
(, 0 otherwise) 294.9 467.06 T
(int, \337oat, string) 405.7 467.06 T
7 F
(a) 185.92 454.06 T
3 F
(>) 191.32 454.06 T
7 F
(b) 196.71 454.06 T
1 F
(1 if) 225.7 454.06 T
7 F
(a) 240.18 454.06 T
1 F
( is greater than) 245.57 454.06 T
7 F
(b) 300.98 454.06 T
1 F
(, 0 otherwise) 306.37 454.06 T
(int, \337oat, string) 405.7 454.06 T
7 F
(a) 185.92 441.06 T
3 F
(<=) 191.32 441.06 T
7 F
(b) 202.1 441.06 T
1 F
(1 if) 225.7 441.06 T
7 F
(a) 240.18 441.06 T
1 F
( is less than or equal to) 245.57 441.06 T
7 F
(b) 330.2 441.06 T
1 F
(, 0 otherwise) 335.59 441.06 T
(int, \337oat, string) 405.7 441.06 T
7 F
(a) 185.92 428.06 T
3 F
(>=) 191.32 428.06 T
7 F
(b) 202.1 428.06 T
1 F
(1 if) 225.7 428.06 T
7 F
(a) 240.18 428.06 T
1 F
( is greater than or equal to) 245.57 428.06 T
7 F
(b) 341.66 428.06 T
1 F
(, 0 otherwise) 347.05 428.06 T
(int, \337oat, string) 405.7 428.06 T
7 F
(a) 185.92 415.06 T
3 F
(==) 191.32 415.06 T
7 F
(b) 202.1 415.06 T
1 F
(1 if) 225.7 415.06 T
7 F
(a) 240.18 415.06 T
1 F
( is equal to) 245.57 415.06 T
7 F
(b) 287.01 415.06 T
1 F
(, 0 otherwise) 292.4 415.06 T
(int, \337oat, string) 405.7 415.06 T
7 F
(a) 185.92 402.06 T
3 F
(!=) 191.32 402.06 T
7 F
(b) 202.1 402.06 T
1 F
(1 if) 225.7 402.06 T
7 F
(a) 240.18 402.06 T
1 F
( is not equal to) 245.57 402.06 T
7 F
(b) 300.74 402.06 T
1 F
(, 0 otherwise) 306.14 402.06 T
(int, \337oat, string) 405.7 402.06 T
7 F
(a) 185.92 389.06 T
3 F
(&) 191.32 389.06 T
7 F
(b) 196.71 389.06 T
1 F
(Bit-wise AND of) 225.7 389.06 T
7 F
(a) 289.85 389.06 T
1 F
( and) 295.24 389.06 T
7 F
(b) 312.71 389.06 T
1 F
(int) 405.7 389.06 T
7 F
(a) 185.92 376.06 T
3 F
(^) 191.32 376.06 T
7 F
(b) 196.71 376.06 T
1 F
(Bit-wise exclusive OR of) 225.7 376.06 T
7 F
(a) 319.06 376.06 T
1 F
( and) 324.45 376.06 T
7 F
(b) 341.92 376.06 T
1 F
(int) 405.7 376.06 T
7 F
(a) 185.92 363.06 T
3 F
(|) 191.32 363.06 T
7 F
(b) 196.71 363.06 T
1 F
(Bit-wise OR of) 225.7 363.06 T
7 F
(a) 282.87 363.06 T
1 F
( and) 288.26 363.06 T
7 F
(b) 305.73 363.06 T
1 F
(int) 405.7 363.06 T
7 F
(a) 185.92 350.06 T
3 F
(&&) 191.32 350.06 T
7 F
(b) 202.1 350.06 T
1 F
(Logical AND: 1 if both) 225.7 350.06 T
7 F
(a) 312.32 350.06 T
1 F
( and) 317.71 350.06 T
7 F
(b) 335.18 350.06 T
1 F
( are non-zero,) 340.58 350.06 T
(0 otherwise) 225.7 341.06 T
(int, \337oat) 405.7 350.06 T
7 F
(a) 185.92 328.06 T
3 F
(||) 191.32 328.06 T
7 F
(b) 202.1 328.06 T
1 F
(Logical OR: 1 if either) 225.7 328.06 T
7 F
(a) 309.82 328.06 T
1 F
( is non-zero or) 315.21 328.06 T
7 F
(b) 369.62 328.06 T
1 F
( is) 375.02 328.06 T
(non-zero, 0 otherwise) 225.7 319.06 T
(int, \337oat) 405.7 328.06 T
7 F
(a) 185.92 306.06 T
3 F
(?) 191.32 306.06 T
7 F
(b) 196.71 306.06 T
3 F
(:) 202.1 306.06 T
7 F
(c) 207.49 306.06 T
1 F
(Choice: if) 225.7 306.06 T
7 F
(a) 263.64 306.06 T
1 F
( is non-zero then) 269.04 306.06 T
7 F
(b) 331.43 306.06 T
1 F
(, else) 336.83 306.06 T
7 F
(c) 357.54 306.06 T
(a) 405.7 306.06 T
1 F
(: int, \337oat) 411.09 306.06 T
179.92 624.81 179.92 301.31 2 L
V
0.5 H
0 Z
N
219.7 625.31 219.7 300.81 2 L
V
N
399.7 625.31 399.7 300.81 2 L
V
N
484.28 624.81 484.28 301.31 2 L
V
N
179.67 625.06 484.53 625.06 2 L
V
N
180.17 608.31 484.03 608.31 2 L
V
N
180.17 605.81 484.03 605.81 2 L
V
N
179.67 566.06 484.53 566.06 2 L
V
N
179.67 527.06 484.53 527.06 2 L
V
N
179.67 501.06 484.53 501.06 2 L
V
N
179.67 475.06 484.53 475.06 2 L
V
N
179.67 423.06 484.53 423.06 2 L
V
N
179.67 397.06 484.53 397.06 2 L
V
N
179.67 384.06 484.53 384.06 2 L
V
N
179.67 371.06 484.53 371.06 2 L
V
N
179.67 358.06 484.53 358.06 2 L
V
N
179.67 336.06 484.53 336.06 2 L
V
N
179.67 314.06 484.53 314.06 2 L
V
N
179.67 301.06 484.53 301.06 2 L
V
N
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "45" 54
%%Page: "46" 54
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(46) 98.1 668.33 T
5 F
(Expressions) 457.67 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
4 10 Q
0 X
(5.2.2) 119.07 632.33 T
(Relational operators) 152.1 632.33 T
1 F
(The operators) 152.1 616.33 T
3 F
(<) 209.83 616.33 T
1 F
( \050less than\051,) 215.82 616.33 T
3 F
(<=) 264.68 616.33 T
1 F
( \050less than or equal\051,) 276.67 616.33 T
3 F
(>=) 360.49 616.33 T
1 F
(\050greater than or equal\051,) 372.49 616.33 T
3 F
(>) 466.57 616.33 T
1 F
( \050greater) 472.56 616.33 T
(than\051,) 152.1 604.33 T
3 F
(==) 177.64 604.33 T
1 F
( \050equal\051, and) 189.63 604.33 T
3 F
(!=) 242.36 604.33 T
1 F
( \050not equal\051 are used for comparing two values. Each operator) 254.35 604.33 T
(produces a result of) 152.1 592.33 T
3 F
(1) 233.15 592.33 T
1 F
( \050true\051 if its operands meet the condition and) 239.14 592.33 T
3 F
(0) 419.29 592.33 T
1 F
( \050false\051 if they don\325) 425.29 592.33 T
(t.) 502.27 592.33 T
4 F
(5.2.3) 119.07 562.33 T
(Logical operators) 152.1 562.33 T
1 F
(The logical operators) 152.1 546.33 T
3 F
(&&) 239.53 546.33 T
1 F
(,) 251.52 546.33 T
3 F
(||) 256.52 546.33 T
1 F
(, and) 268.52 546.33 T
3 F
(!) 290.44 546.33 T
1 F
( are typically used for combining the results of rela-) 296.44 546.33 T
(tional operators, as in the expression) 152.1 534.33 T
3 9 Q
(\050$x > 4\051 && \050$x < 10\051) 179.1 520 T
1 10 Q
(Each operator produces a) 152.1 506.33 T
3 F
(0) 255.89 506.33 T
1 F
( or) 261.89 506.33 T
3 F
(1) 275.21 506.33 T
1 F
( result.) 281.21 506.33 T
3 F
(&&) 310.91 506.33 T
1 F
( \050logical \322and\323\051 produces a) 322.91 506.33 T
3 F
(1) 433.09 506.33 T
1 F
( result if both its) 439.08 506.33 T
(operands are non-zero,) 152.1 494.33 T
3 F
(||) 245.9 494.33 T
1 F
( \050logical \322or\323\051 produces a) 257.89 494.33 T
3 F
(1) 361.96 494.33 T
1 F
( result if either of its operands is) 367.96 494.33 T
(non-zero, and) 152.1 482.33 T
3 F
(!) 209.55 482.33 T
1 F
( \050\322not\323\051 produces a) 215.54 482.33 T
3 F
(1) 294.36 482.33 T
1 F
( result if its single operand is zero.) 300.36 482.33 T
(In T) 170.1 470.33 T
(cl, as in ANSI C, a zero value is treated as false and anything other than zero is) 186.33 470.33 T
-0.01 (treated as true. Whenever T) 152.1 458.33 P
-0.01 (cl generates a true/false value it uses) 262.09 458.33 P
3 F
-0.02 (1) 410.52 458.33 P
1 F
-0.01 ( for true and) 416.52 458.33 P
3 F
-0.02 (0) 468.1 458.33 P
1 F
-0.01 ( for false.) 474.1 458.33 P
4 F
(5.2.4) 119.07 428.33 T
(Bitwise operators) 152.1 428.33 T
1 F
(T) 152.1 412.33 T
(cl provides six operators that manipulate the individual bits of integers:) 157.51 412.33 T
3 F
(&) 444.83 412.33 T
1 F
(,) 450.83 412.33 T
3 F
(|) 455.82 412.33 T
1 F
(,) 461.82 412.33 T
3 F
(^) 466.82 412.33 T
1 F
(,) 472.81 412.33 T
3 F
(<<) 477.81 412.33 T
1 F
(,) 489.8 412.33 T
3 F
(>>) 494.8 412.33 T
1 F
(,) 506.8 412.33 T
(and) 152.1 400.33 T
3 F
(~) 169.03 400.33 T
1 F
(. These operators require their operands to be integers. The) 175.03 400.33 T
3 F
(&) 413.17 400.33 T
1 F
(,) 419.16 400.33 T
3 F
( |) 421.66 400.33 T
1 F
(, and) 433.65 400.33 T
3 F
(^) 455.58 400.33 T
1 F
( operators) 461.58 400.33 T
(perform bitwise and, or) 152.1 388.33 T
(, and exclusive or: each bit of the result is generated by applying) 245.52 388.33 T
(the given operation to the corresponding bits of the left and right operands. Note that) 152.1 376.33 T
3 F
(&) 493.53 376.33 T
1 F
(and) 152.1 364.33 T
3 F
(|) 169.03 364.33 T
1 F
( do not always produce the same result as) 175.03 364.33 T
3 F
(&&) 343.52 364.33 T
1 F
( and) 355.51 364.33 T
3 F
(||) 374.94 364.33 T
1 F
(:) 386.93 364.33 T
3 9 Q
(expr 8&&2) 179.1 350 T
6 F
(\336) 162.9 337 T
7 F
(1) 179.1 337 T
3 F
(expr 8&2) 179.1 324 T
6 F
(\336) 162.9 311 T
7 F
(0) 179.1 311 T
1 10 Q
(The operators) 170.1 297.33 T
3 F
(<<) 227.83 297.33 T
1 F
( and) 239.82 297.33 T
3 F
(>>) 259.25 297.33 T
1 F
( use the right operand as a shift count and produce a result) 271.24 297.33 T
-0.05 (consisting of the left operand shifted left or right by that number of bits. During left shifts) 152.1 285.33 P
(zeros are shifted into the low-order bits. Right shifting is always \322arithmetic right shift\323,) 152.1 273.33 T
(meaning that it shifts in zeroes for positive numbers and ones for negative numbers. This) 152.1 261.33 T
(behavior is dif) 152.1 249.33 T
(ferent from right-shifting in ANSI C, which is machine-dependent.) 209.66 249.33 T
(The) 170.1 237.33 T
3 F
(~) 188.14 237.33 T
1 F
( operand \050\322ones complement\323\051 takes only a single operand and produces a) 194.14 237.33 T
(result whose bits are the opposite of those in the operand: zeroes replace ones and vice) 152.1 225.33 T
(versa.) 152.1 213.33 T
4 F
(5.2.5) 119.07 183.33 T
(Choice operator) 152.1 183.33 T
1 F
(The ternary operator) 152.1 167.33 T
3 F
(?:) 236.74 167.33 T
1 F
( may be used to select one of two results:) 248.74 167.33 T
3 9 Q
(expr {\050$a < $b\051 ? $a : $b}) 179.1 153 T
FMENDPAGE
%%EndPage: "46" 55
%%Page: "47" 55
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(5.3 Math functions) 98.1 668.33 T
4 F
(47) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
-0.22 (This expression returns the smaller of) 152.1 632.33 P
3 F
-0.52 ($a) 304.04 632.33 P
1 F
-0.22 ( and) 316.03 632.33 P
3 F
-0.52 ($b) 335.03 632.33 P
1 F
-0.22 (. The choice operator checks the value of) 347.02 632.33 P
(its \336rst operand for truth or falsehood. If it is true \050non-zero\051 then the ar) 152.1 619.88 T
(gument following) 438.09 619.88 T
(the) 152.1 607.43 T
3 F
(?) 166.81 607.43 T
1 F
( is evaluated and becomes the result; if the \336rst operand is false \050zero\051 then the third) 172.81 607.43 T
(operand is evaluated and becomes the result. Only one of the second and third ar) 152.1 594.98 T
(guments) 474.17 594.98 T
(is evaluated.) 152.1 582.52 T
98.1 539.17 512.1 542.19 C
152.1 540.39 512.1 540.39 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 540.68 143.1 540.68 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(5.3) 124.63 546.19 T
(Math functions) 152.1 546.19 T
1 10 Q
(T) 152.1 522.5 T
(cl expressions support a number of mathematical functions such as) 157.51 522.5 T
3 F
(sin) 427.32 522.5 T
1 F
( and) 445.31 522.5 T
3 F
(exp) 464.74 522.5 T
1 F
(. Math) 482.73 522.5 T
(functions are invoked using standard functional notation:) 152.1 510.05 T
3 9 Q
(expr 2*sin\050$x\051) 179.1 495.71 T
(expr hypot\050$x, $y\051 + $z) 179.1 485.26 T
1 10 Q
(The ar) 152.1 471.6 T
(guments to math functions may be arbitrary expressions, and multiple ar) 177.73 471.6 T
(guments) 467.08 471.6 T
(are separated by commas. See T) 152.1 459.14 T
(able 5.3 for a list of all the built-in functions.) 280.18 459.14 T
98.1 415.79 512.1 418.81 C
152.1 417.01 512.1 417.01 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 417.3 143.1 417.3 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(5.4) 124.63 422.81 T
(Substitutions) 152.1 422.81 T
1 10 Q
(Substitutions can occur in two ways for expression operands. The \336rst way is through the) 152.1 399.12 T
(normal T) 152.1 386.67 T
(cl parser mechanisms, as in the following command:) 188.32 386.67 T
3 9 Q
(expr 2*sin\050$x\051) 179.1 372.33 T
1 10 Q
(In this case the T) 152.1 358.67 T
(cl parser substitutes the value of variable) 219.68 358.67 T
3 F
(x) 385.39 358.67 T
1 F
( before executing the com-) 391.39 358.67 T
(mand, so the \336rst ar) 152.1 346.21 T
(gument to) 231.04 346.21 T
3 F
(expr) 273.79 346.21 T
1 F
( will have a value such as \322) 297.78 346.21 T
3 F
(2*sin\0500.8\051) 406.86 346.21 T
1 F
(\323. The sec-) 466.83 346.21 T
(ond way is through the expression evaluator) 152.1 333.76 T
(, which performs an additional round of) 328.24 333.76 T
(variable and command substitution on the expression while evaluating it. For example,) 152.1 321.31 T
(consider the command:) 152.1 308.86 T
3 9 Q
(expr {2*sin\050$x\051}) 179.1 294.52 T
1 10 Q
(In this case the braces prevent the T) 152.1 280.86 T
(cl parser from substituting the value of) 294.89 280.86 T
3 F
(x) 452.29 280.86 T
1 F
(, so the ar) 458.28 280.86 T
(gu-) 496.96 280.86 T
(ment to) 152.1 268.41 T
3 F
(expr) 184.86 268.41 T
1 F
( is \322) 208.85 268.41 T
3 F
(2*sin\050$x\051) 224.95 268.41 T
1 F
(\323. When the expression evaluator encounters the dollar) 278.92 268.41 T
(-) 497.99 268.41 T
(sign it performs variable substitution itself, using the value of variable) 152.1 255.95 T
3 F
(x) 435.25 255.95 T
1 F
( as the ar) 441.25 255.95 T
(gument) 476.87 255.95 T
(to) 152.1 243.5 T
3 F
(sin) 162.37 243.5 T
1 F
(.) 180.36 243.5 T
(Having two layers of substitution doesn\325) 170.1 231.5 T
(t usually make any dif) 332.32 231.5 T
(ference for the) 420.97 231.5 T
3 F
(expr) 481.74 231.5 T
1 F
(command, but it is vitally important for other commands like) 152.1 219.05 T
3 F
(while) 398.9 219.05 T
1 F
( that evaluate an) 428.89 219.05 T
(expression repeately and expect to get dif) 152.1 206.59 T
(ferent results each time. For example, consider) 317.9 206.59 T
(the following script that raises a base to a power:) 152.1 194.14 T
3 9 Q
(set result 1) 179.1 179.81 T
(while {$power>0} {) 179.1 169.36 T
(set result [expr $result*$base]) 201.92 158.91 T
(incr power -1) 201.92 148.45 T
(}) 179.1 138 T
FMENDPAGE
%%EndPage: "47" 56
%%Page: "48" 56
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(48) 98.1 668.33 T
5 F
(Expressions) 457.67 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
-0.1 (The expression \322) 152.1 232.73 P
3 F
-0.25 ($power>0) 219.62 232.73 P
1 F
-0.1 (\323 gets evaluated by) 267.59 232.73 P
3 F
-0.25 (while) 346 232.73 P
1 F
-0.1 ( at the beginning of each iteration) 375.98 232.73 P
(to decide whether or not to terminate the loop. It is essential that the expression evaluator) 152.1 220.73 T
(use a new value of) 152.1 208.73 T
3 F
(power) 228.98 208.73 T
1 F
( each time. If the variable substitution were performed while) 258.96 208.73 T
(parsing the) 152.1 196.73 T
3 F
(while) 198.73 196.73 T
1 F
( command, for example \322) 228.72 196.73 T
3 F
(while $power>0) 330.58 196.73 T
1 F
(...\323, then) 420.53 196.73 T
3 F
(while) 457.17 196.73 T
1 F
(\325) 487.16 196.73 T
(s) 489.93 196.73 T
-0.06 (ar) 152.1 184.73 P
-0.06 (gument would be a constant expression such as \322) 159.69 184.73 P
3 F
-0.15 (5>0) 355.15 184.73 P
1 F
-0.06 (\323; either the loop would never exe-) 373.14 184.73 P
(cute or it would execute forever) 152.1 172.73 T
(.) 278.94 172.73 T
98.1 135 512.1 639 C
98.1 239.4 512.1 639 C
98.1 284 512.1 298.4 C
98.1 284 512.1 298.4 R
7 X
0 K
V
152.1 291.92 512.1 291.92 2 L
V
0.5 H
2 Z
0 X
N
98.1 239.4 512.1 639 C
0 9 Q
0 X
0 K
(T) 152.1 278 T
(able  5.3.) 157.27 278 T
1 F
(The mathematical functions supported in T) 195.72 278 T
(cl expressions. In most cases the functions) 350.1 278 T
98.1 251.6 512.1 266 C
98.1 251.6 512.1 266 R
7 X
0 K
V
152.1 259.52 512.1 259.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 239.4 512.1 639 C
1 9 Q
0 X
0 K
(have the same behavior as the ANSI C library procedures with the same names.) 152.1 269 T
1 10 Q
(Function) 178.58 620.73 T
(Result) 298.14 620.73 T
3 9 Q
(abs\050) 178.58 603.4 T
7 F
(x) 200.15 603.4 T
3 F
(\051) 205.54 603.4 T
1 F
(Absolute value of) 298.14 603.4 T
2 F
(x) 364.28 603.4 T
1 F
(.) 368.27 603.4 T
3 F
(acos\050) 178.58 590.4 T
7 F
(x) 205.54 590.4 T
3 F
(\051) 210.94 590.4 T
1 F
(Arc cosine of) 298.14 590.4 T
7 F
(x) 348.8 590.4 T
1 F
(, in the range 0 to) 354.19 590.4 T
6 F
(p) 419.34 590.4 T
1 F
(.) 424.27 590.4 T
3 F
(asin\050) 178.58 577.4 T
7 F
(x) 205.54 577.4 T
3 F
(\051) 210.94 577.4 T
1 F
(Arc sine of) 298.14 577.4 T
7 F
(x) 340.32 577.4 T
1 F
(, in the range -) 345.71 577.4 T
6 F
(p) 397.87 577.4 T
1 F
(/2 to) 402.8 577.4 T
6 F
(p) 421.28 577.4 T
1 F
(/2.) 426.22 577.4 T
3 F
(atan\050) 178.58 564.4 T
7 F
(x) 205.54 564.4 T
3 F
(\051) 210.94 564.4 T
1 F
(Arc tangent of) 298.14 564.4 T
7 F
(x) 352.3 564.4 T
1 F
(, in the range -) 357.69 564.4 T
6 F
(p) 409.85 564.4 T
1 F
(/2 to) 414.79 564.4 T
6 F
(p) 433.26 564.4 T
1 F
(/2.) 438.2 564.4 T
3 F
(atan2\050) 178.58 551.4 T
7 F
(x) 210.94 551.4 T
3 F
(,) 216.33 551.4 T
7 F
(y) 221.72 551.4 T
3 F
(\051) 227.12 551.4 T
1 F
(Arc tangent of) 298.14 551.4 T
7 F
(x) 352.3 551.4 T
1 F
(/) 357.69 551.4 T
7 F
(y) 360.19 551.4 T
1 F
(, in the range -) 364.99 551.4 T
6 F
(p) 417.16 551.4 T
1 F
(/2 to) 422.09 551.4 T
6 F
(p) 440.57 551.4 T
1 F
(/2.) 445.5 551.4 T
3 F
(ceil\050) 178.58 538.4 T
7 F
(x) 205.54 538.4 T
3 F
(\051) 210.94 538.4 T
1 F
(Smallest integer not less than) 298.14 538.4 T
7 F
(x) 405.73 538.4 T
1 F
(.) 411.13 538.4 T
3 F
(cos\050) 178.58 525.4 T
7 F
(x) 200.15 525.4 T
3 F
(\051) 205.54 525.4 T
1 F
(Cosine of) 298.14 525.4 T
7 F
(x) 335.08 525.4 T
1 F
( \050) 340.48 525.4 T
7 F
(x) 345.72 525.4 T
1 F
( in radians\051.) 351.11 525.4 T
3 F
(cosh\050) 178.58 512.4 T
7 F
(x) 205.54 512.4 T
3 F
(\051) 210.94 512.4 T
1 F
(Hyperbolic cosine of) 298.14 512.4 T
7 F
(x) 375.76 512.4 T
1 F
(.) 381.15 512.4 T
3 F
(double\050) 178.58 499.4 T
7 F
(i) 216.33 499.4 T
3 F
(\051) 221.72 499.4 T
1 F
(Real value equal to integer) 298.14 499.4 T
7 F
(i) 396.73 499.4 T
1 F
(.) 402.12 499.4 T
3 F
(exp\050) 178.58 486.4 T
7 F
(x) 200.15 486.4 T
3 F
(\051) 205.54 486.4 T
2 F
(e) 298.14 486.4 T
1 F
( raised to the power) 302.13 486.4 T
7 F
(x) 375.26 486.4 T
1 F
(.) 380.65 486.4 T
3 F
(f) 178.58 473.4 T
(loor\050) 183.98 473.4 T
7 F
(x) 210.94 473.4 T
3 F
(\051) 216.33 473.4 T
1 F
(Lar) 298.14 473.4 T
(gest integer not greater than) 310.45 473.4 T
7 F
(x) 413.03 473.4 T
1 F
(.) 418.42 473.4 T
3 F
(fmod\050) 178.58 460.4 T
7 F
(x) 205.54 460.4 T
3 F
(,) 210.94 460.4 T
7 F
(y) 216.33 460.4 T
3 F
(\051) 221.72 460.4 T
1 F
(Floating-point remainder of) 298.14 460.4 T
7 F
(x) 400.23 460.4 T
1 F
( divided by) 405.63 460.4 T
7 F
(y) 448.32 460.4 T
1 F
(.) 453.12 460.4 T
3 F
(hypot\050) 178.58 447.4 T
7 F
(x) 210.94 447.4 T
3 F
(,) 216.33 447.4 T
7 F
(y) 221.72 447.4 T
3 F
(\051) 227.12 447.4 T
1 F
(Square root of \050) 298.14 447.4 T
7 F
(x) 354.79 447.4 T
1 7 Q
(2) 360.19 451 T
1 9 Q
( +) 363.68 447.4 T
7 F
(y) 373.24 447.4 T
1 7 Q
(2) 378.64 451 T
1 9 Q
(\051.) 382.13 447.4 T
3 F
(int\050) 178.58 434.4 T
7 F
(x) 200.15 434.4 T
3 F
(\051) 205.54 434.4 T
1 F
(Integer value produced by truncating) 298.14 434.4 T
7 F
(x) 433.16 434.4 T
1 F
(.) 438.56 434.4 T
3 F
(log\050) 178.58 421.4 T
7 F
(x) 200.15 421.4 T
3 F
(\051) 205.54 421.4 T
1 F
(Natural logarithm of) 298.14 421.4 T
7 F
(x) 374.27 421.4 T
1 F
(.) 379.66 421.4 T
3 F
(log10\050) 178.58 408.4 T
7 F
(x) 210.94 408.4 T
3 F
(\051) 216.33 408.4 T
1 F
(Base 10 logarithm of) 298.14 408.4 T
7 F
(x) 376.02 408.4 T
1 F
(.) 381.41 408.4 T
3 F
(pow\050) 178.58 395.4 T
7 F
(x) 200.15 395.4 T
3 F
(,) 205.54 395.4 T
7 F
(y) 210.94 395.4 T
3 F
(\051) 216.33 395.4 T
7 F
(x) 298.14 395.4 T
1 F
( raised to the power) 303.53 395.4 T
7 F
(y) 376.66 395.4 T
1 F
(.) 381.47 395.4 T
3 F
(round\050) 178.58 382.4 T
7 F
(x) 210.94 382.4 T
3 F
(\051) 216.33 382.4 T
1 F
(Integer value produced by rounding) 298.14 382.4 T
7 F
(x) 429.17 382.4 T
1 F
(.) 434.57 382.4 T
3 F
(sin\050) 178.58 369.4 T
7 F
(x) 200.15 369.4 T
3 F
(\051) 205.54 369.4 T
1 F
(Sine of) 298.14 369.4 T
7 F
(x) 326.1 369.4 T
1 F
( \050) 331.49 369.4 T
7 F
(x) 336.73 369.4 T
1 F
( in radians\051.) 342.12 369.4 T
3 F
(sinh\050) 178.58 356.4 T
7 F
(x) 205.54 356.4 T
3 F
(\051) 210.94 356.4 T
1 F
(Hyperbolic sine of) 298.14 356.4 T
7 F
(x) 367.28 356.4 T
1 F
(.) 372.67 356.4 T
3 F
(sqrt\050) 178.58 343.4 T
7 F
(x) 205.54 343.4 T
3 F
(\051) 210.94 343.4 T
1 F
(Square root of) 298.14 343.4 T
7 F
(x) 351.8 343.4 T
1 F
(.) 357.19 343.4 T
3 F
(tan\050) 178.58 330.4 T
7 F
(x) 200.15 330.4 T
3 F
(\051) 205.54 330.4 T
1 F
(T) 298.14 330.4 T
(angent of) 303 330.4 T
7 F
(x) 338.94 330.4 T
1 F
( \050) 344.33 330.4 T
7 F
(x) 349.57 330.4 T
1 F
( in radians\051.) 354.96 330.4 T
3 F
(tanh\050) 178.58 317.4 T
7 F
(x) 205.54 317.4 T
3 F
(\051) 210.94 317.4 T
1 F
(Hyperbolic tangent of) 298.14 317.4 T
7 F
(x) 379.26 317.4 T
1 F
(.) 384.65 317.4 T
172.58 631.15 172.58 312.65 2 L
V
0.5 H
0 Z
N
292.14 631.65 292.14 312.15 2 L
V
N
491.62 631.15 491.62 312.65 2 L
V
N
172.33 631.4 491.87 631.4 2 L
V
N
172.83 614.65 491.37 614.65 2 L
V
N
172.83 612.15 491.37 612.15 2 L
V
N
172.33 312.4 491.87 312.4 2 L
V
N
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "48" 57
%%Page: "49" 57
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(5.5 String manipulation) 98.1 668.33 T
4 F
(49) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(Note:) 119.09 632.33 T
(When the expr) 152.1 632.33 T
(ession evaluator performs variable or command substitution the value) 209.46 632.33 T
(substituted must be an integer or r) 152.1 622.17 T
(eal number \050or a string, as described below\051. It cannot) 289.43 622.17 T
(be an arbitrary expr) 152.1 612 T
(ession.) 233.07 612 T
98.1 570.65 512.1 573.67 C
152.1 571.87 512.1 571.87 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 572.16 143.1 572.16 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(5.5) 124.63 577.67 T
(String manipulation) 152.1 577.67 T
1 10 Q
(Unlike expressions in ANSI C, T) 152.1 553.98 T
(cl expressions allow som simple string operations, as in) 284.1 553.98 T
(the following command:) 152.1 541.82 T
3 9 Q
(if {$x == "New York"} {) 179.1 527.48 T
(...) 179.1 517.32 T
(}) 179.1 507.15 T
1 10 Q
(In this example the expression evaluator compares the value of variable) 152.1 493.49 T
3 F
(x) 441.04 493.49 T
1 F
( to the string) 447.04 493.49 T
(\322) 152.1 481.32 T
3 F
(New York) 156.54 481.32 T
1 F
(\323 using string comparison; the body of the) 204.51 481.32 T
3 F
(if) 375.52 481.32 T
1 F
( will be executed if they are) 387.51 481.32 T
-0.31 (identical. In order to specify a string operand you must either enclose it in quotes or braces) 152.1 469.16 P
(or use variable or command substitution. It is important that the expression in the above) 152.1 456.99 T
-0.25 (example is enclosed in braces so that the expression evaluator substitutes the value of) 152.1 444.83 P
3 F
-0.61 (x) 492.73 444.83 P
1 F
-0.25 (; if) 498.73 444.83 P
(the braces are left out then the ar) 152.1 432.66 T
(gument to) 282.64 432.66 T
3 F
(if) 325.39 432.66 T
1 F
( will be a string like) 337.39 432.66 T
3 9 Q
(Los Angeles == "New York") 179.1 418.33 T
1 10 Q
(The expression parser will not be able to parse \322) 152.1 404.66 T
3 F
(Los) 345 404.66 T
1 F
(\323 \050it isn\325) 362.99 404.66 T
(t a number) 396.13 404.66 T
(, it doesn\325) 438.47 404.66 T
(t make) 477.99 404.66 T
(sense as a function name, and it can\325) 152.1 392.5 T
(t be interpreted as a string because it isn\325) 298.47 392.5 T
(t delimited\051) 461.5 392.5 T
(so a syntax error will occur) 152.1 380.33 T
(.) 260.63 380.33 T
(If a string is enclosed in quotes then the expression evaluator performs command,) 170.1 368.33 T
(variable, and backslash substitution on the characters between the quotes. If a string is) 152.1 356.17 T
(enclosed in braces then no substitutions are performed. Braces nest for strings in expres-) 152.1 344 T
(sions in the same way that they nest for words of a command.) 152.1 331.84 T
(The only operators that allow string operands are) 170.1 319.84 T
3 F
(<) 368.84 319.84 T
1 F
(,) 374.84 319.84 T
3 F
(>) 379.83 319.84 T
1 F
(,) 385.83 319.84 T
3 F
(<=) 390.83 319.84 T
1 F
(,) 402.82 319.84 T
3 F
(>=) 407.82 319.84 T
1 F
(,) 419.81 319.84 T
3 F
(==) 424.81 319.84 T
1 F
(, and !=. For all) 436.8 319.84 T
(other operators the operands must be numeric. For operators like) 152.1 307.67 T
3 F
(<) 413.3 307.67 T
1 F
( the strings are com-) 419.29 307.67 T
(pared lexicographically using the system\325) 152.1 295.51 T
(s) 318.1 295.51 T
3 F
(strcmp) 324.48 295.51 T
1 F
( library function; the sorting order) 360.46 295.51 T
(may vary from system to system.) 152.1 283.35 T
98.1 239.99 512.1 243.01 C
152.1 241.21 512.1 241.21 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 241.5 143.1 241.5 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(5.6) 124.63 247.01 T
(T) 152.1 247.01 T
(ypes and conversions) 158.54 247.01 T
1 10 Q
(T) 152.1 223.32 T
(cl evaluates expressions numerically whenever possible. String operations are only per-) 157.51 223.32 T
(formed for the relational operators and only if one or both of the operands doesn\325) 152.1 211.16 T
(t make) 476.67 211.16 T
-0.22 (sense as a number) 152.1 198.99 P
-0.22 (. Most operators permit either integer or real operands but a few) 223.32 198.99 P
-0.22 (, such as) 476.13 198.99 P
3 F
(<<) 152.1 186.83 T
1 F
( and) 164.09 186.83 T
3 F
(&) 183.52 186.83 T
1 F
(, allow only integers.) 189.52 186.83 T
(If the operands for an operator have dif) 170.1 174.83 T
(ferent types then T) 326.72 174.83 T
(cl automatically converts) 401.24 174.83 T
-0.25 (one of them to the type of the other) 152.1 162.66 P
-0.25 (. If one operand is an integer and the other is a real then) 290.54 162.66 P
(the integer operand is converted to real. If one operand is a non-numeric string and the) 152.1 150.5 T
(other is an integer or real then the integer or real operand is converted to a string. The) 152.1 138.33 T
FMENDPAGE
%%EndPage: "49" 58
%%Page: "50" 58
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(50) 98.1 668.33 T
5 F
(Expressions) 457.67 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(result of an operation always has the same type as the operands except for relational oper-) 152.1 632.33 T
(ators like) 152.1 620.33 T
3 F
(<) 191.52 620.33 T
1 F
(, which always produce 0/1 integer results. Y) 197.51 620.33 T
(ou can use the math function) 377.22 620.33 T
3 F
(double) 152.1 608.33 T
1 F
( to explicitly promote an integer to a real, and) 188.08 608.33 T
3 F
(int) 373.23 608.33 T
1 F
( and) 391.22 608.33 T
3 F
(round) 410.65 608.33 T
1 F
( to convert a real) 440.63 608.33 T
(value back to integer by truncation or rounding.) 152.1 596.33 T
98.1 552.98 512.1 556 C
152.1 554.2 512.1 554.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 554.49 143.1 554.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(5.7) 124.63 560 T
(Precision) 152.1 560 T
1 10 Q
(During expression evaluation T) 152.1 536.31 T
(cl represents integers internally with the C type) 277.7 536.31 T
3 F
(int) 469.24 536.31 T
1 F
(,) 487.23 536.31 T
(which provides at least 32 bits of precision on most machines. Real numbers are repre-) 152.1 524.31 T
(sented with with the C type) 152.1 512.31 T
3 F
(double) 264.26 512.31 T
1 F
(, which is usually represented with 64-bit values) 300.24 512.31 T
(\050about 15 decimal digits of precision\051 using the IEEE Floating Point Standard.) 152.1 500.31 T
-0.12 (Numbers are kept in internal form throughout the evaluation of an expression and are) 170.1 488.31 P
-0.06 (only converted back to strings when necessary) 152.1 476.31 P
-0.06 (, such as when) 337.05 476.31 P
3 F
-0.15 (expr) 397.59 476.31 P
1 F
-0.06 ( returns its result. Inte-) 421.58 476.31 P
(gers are converted to signed decimal strings without any loss of precision. When a real) 152.1 464.31 T
(value is converted to a string only six signi\336cant digits are retained by default:) 152.1 452.31 T
3 9 Q
(expr 1.11111111 + 1.11111111) 179.1 437.98 T
6 F
(\336) 162.9 424.98 T
7 F
(2.22222) 179.1 424.98 T
1 10 Q
(If you would like more signi\336cant digits to be retained when real values are converted to) 152.1 411.31 T
(strings you can set the) 152.1 399.31 T
3 F
(tcl_precision) 243.43 399.31 T
1 F
( global variable with the desired number of sig-) 321.39 399.31 T
(ni\336cant digits:) 152.1 387.31 T
3 9 Q
(set tcl_precision 12) 179.1 372.98 T
(expr 1.11111111 + 1.11111111) 179.1 362.98 T
6 F
(\336) 162.9 349.98 T
7 F
(2.22222222) 179.1 349.98 T
1 10 Q
(The) 152.1 336.31 T
3 F
(tcl_precision) 170.14 336.31 T
1 F
( variable is used not just for the) 248.1 336.31 T
3 F
(expr) 376.35 336.31 T
1 F
( command but anywhere) 400.33 336.31 T
(that a T) 152.1 324.31 T
(cl application converts a real number to a sting.) 181.93 324.31 T
2 F
(Note:) 119.09 309.31 T
(If you set) 152.1 309.31 T
7 F
(tcl_precision) 191.24 309.31 T
2 F
( to 17 on a machine that uses IEEE \337oating point, you will) 269.2 309.31 T
(guarantee that string conversions do not lose information: if an expr) 152.1 299.31 T
(ession r) 426.58 299.31 T
(esult is) 457.58 299.31 T
(converted to a string and then later used in a differ) 152.1 289.31 T
(ent expr) 356.06 289.31 T
(ession, the internal form after) 388.16 289.31 T
(conversion back fr) 152.1 279.31 T
(om the string will be identical to the internal form befor) 226.12 279.31 T
(e converting to) 449.53 279.31 T
(the string.) 152.1 269.31 T
FMENDPAGE
%%EndPage: "50" 59
%%Page: "51" 59
612 792 0 FMBEGINPAGE
98.1 675 512.1 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
98.1 450 512.1 450 2 L
7 X
V
2 Z
0 X
N
98.1 108 512.1 126 R
7 X
V
4 10 Q
0 X
(51) 500.99 119.33 T
98.1 54 512.1 108 R
7 X
V
1 9 Q
0 X
(Copyright \251 1993 Addison-W) 152.1 102 T
(esley Publishing Company) 261.32 102 T
(, Inc.) 357.1 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 152.1 91 T
(. Any) 485.77 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 152.1 80 T
-0.34 (lisher) 152.1 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 171.58 69 P
(does not of) 152.1 58 T
(fer warranties in regard to this draft.) 191.88 58 T
0 24 Q
(Chapter 6) 152.1 605 T
-0.48 (Lists) 152.1 575 S
98.1 135 512.1 423 R
7 X
V
1 10 Q
0 X
-0.33 (Lists are used in T) 152.1 416.33 P
-0.33 (cl to deal with collections of things, such as all the users in a group or all) 223.94 416.33 P
(the \336les in a directory or all the options for a widget. Lists allow you to collect together) 152.1 404.33 T
(any number of values in one place, pass around the collection as a single entity) 152.1 392.33 T
(, and later) 467.06 392.33 T
(get the component values back again. A list is an ordered collection of) 152.1 380.33 T
2 F
(elements) 435.78 380.33 T
1 F
( where) 470.76 380.33 T
-0.07 (each element can have any string value, such as a number) 152.1 368.33 P
-0.07 (, a person\325) 381.65 368.33 P
-0.07 (s name, the name of a) 422.87 368.33 P
(window) 152.1 356.33 T
(, or a word of a T) 183.65 356.33 T
(cl command. Lists are represented as strings with a particular) 252.62 356.33 T
-0.3 (structure; this means that you can store lists in variables, type them to commands, and nest) 152.1 344.33 P
(them as elements of other lists.) 152.1 332.33 T
(This chapter describes the structure of lists and presents a dozen basic commands for) 170.1 320.33 T
(manipulating lists. The commands perform operations like creating lists, inserting and) 152.1 308.33 T
(extracting elements, and searching for particular elements \050see T) 152.1 296.33 T
(able 6.1 for a summary\051.) 409.8 296.33 T
(There are other T) 152.1 284.33 T
(cl commands besides those described in this chapter that take lists as) 221.05 284.33 T
-0.09 (ar) 152.1 272.33 P
-0.09 (guments or return them as results; these other commands will be described in later chap-) 159.69 272.33 P
(ters.) 152.1 260.33 T
98.1 216.98 512.1 220 C
152.1 218.2 512.1 218.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 218.49 143.1 218.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(6.1) 124.63 224 T
(Basic list structure and the lindex command) 152.1 224 T
1 10 Q
(In its simplest form a list is a string containing any number of elements separated by) 152.1 200.31 T
(spaces or tabs. For example, the string) 152.1 188.31 T
3 9 Q
(John Anne Mary Jim) 179.1 173.98 T
44.1 351 98.1 423 C
35.1 360 197.1 414 R
7 X
0 K
V
0 9 Q
0 X
(FIGURE  6) 35.1 408 T
(T) 35.1 387 T
(ABLE  6) 40.43 387 T
26.1 351 125.1 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "51" 60
%%Page: "52" 60
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(52) 98.1 668.33 T
5 F
(Lists) 491.55 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 135 512.1 639 C
98.1 158.4 512.1 172.8 C
98.1 158.4 512.1 172.8 R
7 X
0 K
V
152.1 166.32 512.1 166.32 2 L
V
0.5 H
2 Z
0 X
N
98.1 135 512.1 639 C
98.1 135 512.1 149.4 C
98.1 135 512.1 149.4 R
7 X
0 K
V
152.1 142.92 512.1 142.92 2 L
V
0.5 H
2 Z
0 X
N
98.1 135 512.1 639 C
0 9 Q
0 X
0 K
(T) 152.1 152.4 T
(able  6.1.) 157.27 152.4 T
1 F
(A summary of the list-related commands in T) 195.71 152.4 T
(cl.) 359.09 152.4 T
3 F
(concat) 158.1 621.8 T
7 F
(list) 195.85 621.8 T
1 F
(?) 222.81 621.8 T
7 F
(list) 226.8 621.8 T
1 F
(...?) 253.76 621.8 T
-0.16 (Joins multiple lists into a single list \050each element of each) 230.1 612.8 P
7 F
-0.38 (list) 438.33 612.8 P
1 F
-0.16 ( becomes an) 459.9 612.8 P
(element of the result list\051 and returns the new list.) 230.1 603.8 T
3 F
(join) 158.1 584.8 T
7 F
(list) 185.06 584.8 T
1 F
(?) 212.02 584.8 T
7 F
(joinString) 216.01 584.8 T
1 F
(?) 269.94 584.8 T
(Concatenates list elements together with) 230.1 575.8 T
7 F
(joinString) 377.63 575.8 T
1 F
( as separator and) 431.55 575.8 T
(returns the result.) 230.1 566.8 T
3 F
(lappend) 158.1 547.8 T
7 F
(varName) 201.24 547.8 T
(value) 244.38 547.8 T
1 F
(?) 276.73 547.8 T
7 F
(value) 280.72 547.8 T
1 F
(...?) 313.08 547.8 T
-0.16 (Appends each) 230.1 538.8 P
7 F
-0.39 (value) 282.68 538.8 P
1 F
-0.16 ( to variable) 309.64 538.8 P
7 F
-0.39 (varName) 351.84 538.8 P
1 F
-0.16 ( as a list element and returns the) 389.58 538.8 P
(new value of the variable. Creates the variable if it doesn\325) 230.1 529.8 T
(t already exist.) 437.84 529.8 T
3 F
(lindex) 158.1 510.8 T
7 F
(list) 195.85 510.8 T
(index) 222.81 510.8 T
1 F
(Returns the) 230.1 501.8 T
7 F
(index) 273.54 501.8 T
1 F
(\325) 300.5 501.8 T
(th element from) 303.33 501.8 T
7 F
(list) 362.99 501.8 T
1 F
(.) 384.56 501.8 T
3 F
(linsert) 158.1 482.8 T
7 F
(list) 201.24 482.8 T
(index) 228.2 482.8 T
(value) 260.56 482.8 T
1 F
(?) 292.91 482.8 T
7 F
(value) 296.9 482.8 T
1 F
(...?) 329.86 482.8 T
(Returns a new list formed by inserting all of the) 230.1 473.8 T
7 F
(value) 404.34 473.8 T
1 F
( ar) 431.3 473.8 T
(guments as list) 440.37 473.8 T
(elements before) 230.1 464.8 T
7 F
(index) 289.5 464.8 T
1 F
(\325) 316.46 464.8 T
(th element of) 319.29 464.8 T
7 F
(list) 368.96 464.8 T
1 F
(.) 390.53 464.8 T
3 F
(list) 158.1 445.8 T
7 F
(value) 185.06 445.8 T
1 F
(?) 217.42 445.8 T
7 F
(value) 221.41 445.8 T
1 F
(...?) 253.76 445.8 T
(Returns a list whose elements are the) 230.1 436.8 T
7 F
(value) 365.64 436.8 T
1 F
( ar) 392.6 436.8 T
(guments.) 401.67 436.8 T
3 F
(llength) 158.1 417.8 T
7 F
(list) 201.24 417.8 T
1 F
(Returns the number of elements in) 230.1 408.8 T
7 F
(list) 356.41 408.8 T
1 F
(.) 377.98 408.8 T
3 F
(lrange) 158.1 389.8 T
7 F
(list) 195.85 389.8 T
(f) 222.81 389.8 T
(irst) 228.2 389.8 T
(last) 255.16 389.8 T
1 F
(Returns a list consisting of elements) 230.1 380.8 T
7 F
(f) 362.41 380.8 T
(irst) 367.8 380.8 T
1 F
( through) 389.37 380.8 T
7 F
(last) 421.83 380.8 T
1 F
( of) 443.4 380.8 T
7 F
(list) 455.38 380.8 T
1 F
(. If) 476.95 380.8 T
7 F
(last) 230.1 371.8 T
1 F
( is) 251.67 371.8 T
3 F
(end) 262.16 371.8 T
1 F
( then it selects all elements up to the end of the list.) 278.33 371.8 T
3 F
(lreplace) 158.1 352.8 T
7 F
(list) 206.63 352.8 T
(f) 233.59 352.8 T
(irst) 238.99 352.8 T
(last) 265.95 352.8 T
1 F
(?) 292.91 352.8 T
7 F
(value value) 296.9 352.8 T
1 F
(...?) 361.61 352.8 T
(Returns a new list formed by replacing elements) 230.1 343.8 T
7 F
(f) 406.33 343.8 T
(irst) 411.72 343.8 T
1 F
( through) 433.29 343.8 T
7 F
(last) 465.74 343.8 T
1 F
( of) 487.31 343.8 T
7 F
(list) 230.1 334.8 T
1 F
( with zero or more new elements, each formed from one) 251.67 334.8 T
7 F
(value) 455.83 334.8 T
1 F
( ar) 482.79 334.8 T
(gu-) 491.86 334.8 T
(ment.) 230.1 325.8 T
3 F
(lsearch) 158.1 306.8 T
1 F
(?) 201.24 306.8 T
3 F
(-exact) 205.23 306.8 T
1 F
(?) 237.58 306.8 T
(?) 246.97 306.8 T
3 F
(-glob) 250.96 306.8 T
1 F
(?) 277.92 306.8 T
(?) 287.3 306.8 T
3 F
(-regexp) 291.29 306.8 T
1 F
(?) 329.04 306.8 T
7 F
( list) 333.03 306.8 T
(pattern) 365.39 306.8 T
1 F
-0.29 (Returns the index of the \336rst element in) 230.1 297.8 P
7 F
-0.69 (list) 372.6 297.8 P
1 F
-0.29 ( that matches) 394.17 297.8 P
7 F
-0.69 (pattern) 442.99 297.8 P
1 F
-0.29 ( or) 480.73 297.8 P
3 10 Q
-0.76 (-1) 492.14 297.8 P
1 9 Q
(if none. The optional switch selects a pattern-matching technique \050default:) 230.1 288.8 T
3 F
(-) 230.1 279.8 T
(glob) 235.49 279.8 T
1 F
(\051.) 257.06 279.8 T
3 F
(lsort) 158.1 260.8 T
1 F
(?) 190.45 260.8 T
3 F
(-ascii) 194.44 260.8 T
1 F
(?) 226.8 260.8 T
(?) 236.18 260.8 T
3 F
(-integer) 240.17 260.8 T
1 F
(?) 283.31 260.8 T
(?) 292.7 260.8 T
3 F
(-real) 296.68 260.8 T
1 F
(?) 323.65 260.8 T
(?) 333.03 260.8 T
3 F
(-command) 337.02 260.8 T
7 F
(command) 385.55 260.8 T
1 F
(?) 423.3 260.8 T
3 F
( \134) 427.29 260.8 T
1 F
(?) 179.67 251.8 T
3 F
(-increasing) 183.66 251.8 T
1 F
(?) 242.98 251.8 T
(?) 252.36 251.8 T
3 F
(-decreasing) 256.35 251.8 T
1 F
(?) 315.67 251.8 T
7 F
( list) 319.66 251.8 T
1 F
(Returns a new list formed by sorting the elements of) 230.1 242.8 T
7 F
(list) 420.81 242.8 T
1 F
(. The switches) 442.38 242.8 T
(determine the comparison function and sorted order \050default:) 230.1 233.8 T
3 F
(-ascii) 451.24 233.8 T
(-) 230.1 224.8 T
(increasing) 235.49 224.8 T
1 F
(\051.) 289.42 224.8 T
3 F
(split) 158.1 205.8 T
7 F
(string) 190.45 205.8 T
1 F
(?) 228.2 205.8 T
7 F
(splitChars) 232.19 205.8 T
1 F
(?) 286.12 205.8 T
-0.38 (Returns a list formed by splitting) 230.1 196.8 P
7 F
-0.9 (string) 348.69 196.8 P
1 F
-0.38 ( at instances of) 381.04 196.8 P
7 F
-0.9 (splitChars) 435.45 196.8 P
1 F
-0.38 ( and) 489.38 196.8 P
(turning the characters between these instances into list elements.) 230.1 187.8 T
152.1 633.55 152.1 181.05 2 L
V
0.5 H
0 Z
N
512.1 633.55 512.1 181.05 2 L
V
N
151.85 633.8 512.35 633.8 2 L
V
N
151.85 596.8 512.35 596.8 2 L
V
0.25 H
N
151.85 559.8 512.35 559.8 2 L
V
N
151.85 522.8 512.35 522.8 2 L
V
N
151.85 494.8 512.35 494.8 2 L
V
N
151.85 457.8 512.35 457.8 2 L
V
N
151.85 429.8 512.35 429.8 2 L
V
N
151.85 401.8 512.35 401.8 2 L
V
N
151.85 364.8 512.35 364.8 2 L
V
N
151.85 318.8 512.35 318.8 2 L
V
N
151.85 272.8 512.35 272.8 2 L
V
N
151.85 217.8 512.35 217.8 2 L
V
N
151.85 180.8 512.35 180.8 2 L
V
0.5 H
N
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "52" 61
%%Page: "53" 61
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(6.2 Creating lists: concat, list, and llength) 98.1 668.33 T
4 F
(53) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(is a list with four elements. There can be any number of elements in a list, and each ele-) 152.1 632.33 T
-0.2 (ment can be an arbitrary string. In the simple form above, elements cannot contain spaces,) 152.1 620.04 P
(but there is additional list syntax that allows spaces within elements \050see below\051.) 152.1 607.74 T
(The) 170.1 595.74 T
3 F
(lindex) 188.14 595.74 T
1 F
( command extracts an element from a list:) 224.12 595.74 T
3 9 Q
(lindex {John Anne Mary Jim} 1) 179.1 581.4 T
6 F
(\336) 162.9 568.4 T
7 F
(Anne) 179.1 568.4 T
3 10 Q
(Lindex) 152.1 554.74 T
1 F
( takes two ar) 188.08 554.74 T
(guments, a list and an index, and returns the selected element of the) 238.69 554.74 T
-0.07 (list. An index of) 152.1 542.44 P
3 F
-0.16 (0) 219.29 542.44 P
1 F
-0.07 ( corresponds to the \336rst element of the list,) 225.29 542.44 P
3 F
-0.16 (1) 397.91 542.44 P
1 F
-0.07 ( corresponds to the second) 403.91 542.44 P
(element, and so on. If the index is outside the range of the list then an empty string is) 152.1 530.14 T
(returned.) 152.1 517.84 T
( When a list is entered in a T) 170.1 505.84 T
(cl command the list is usually enclosed in braces, as in) 284.32 505.84 T
(the above example. The braces are not part of the list; they are needed on the command) 152.1 493.54 T
(line to pass the entire list to the command as a single word. When lists are stored in vari-) 152.1 481.24 T
(ables or printed out, there are no braces around them:) 152.1 468.94 T
3 9 Q
(set x {John Anne Mary Jim}) 179.1 454.61 T
6 F
(\336) 162.9 441.61 T
7 F
(John Anne Mary Jim) 179.1 441.61 T
1 10 Q
-0.4 (Curly braces and backslashes within list elements are handled by the list commands in) 170.1 427.94 P
(the same way that the T) 152.1 415.64 T
(cl command parser treats them in words. This means that you can) 246.61 415.64 T
(enclose a list element in braces if it contains spaces, and you can use backslash substitu-) 152.1 403.35 T
-0.38 (tion to get special characters such as braces into list elements. Braces are often used to nest) 152.1 391.05 P
(lists within lists, as in the following example:) 152.1 378.75 T
3 9 Q
(lindex {a b {c d e} f} 2) 179.1 364.42 T
6 F
(\336) 162.9 351.42 T
7 F
(c d e) 179.1 351.42 T
1 10 Q
-0.33 (In this case element 2 of the list is itself a list with three elements. There is no limit on how) 152.1 337.75 P
(deeply lists may be nested.) 152.1 325.45 T
98.1 282.09 512.1 285.12 C
152.1 283.32 512.1 283.32 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 283.6 143.1 283.6 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(6.2) 124.63 289.12 T
(Creating lists: concat, list, and llength) 152.1 289.12 T
1 10 Q
(T) 152.1 265.42 T
(cl provides two commands that combine strings together to produce lists:) 157.51 265.42 T
3 F
(concat) 452.61 265.42 T
1 F
( and) 488.58 265.42 T
3 F
(list) 152.1 253.13 T
1 F
(. Each of these commands accepts an arbitrary number of ar) 176.09 253.13 T
(guments, and each pro-) 415.42 253.13 T
-0.2 (duces a list as a result. However) 152.1 240.83 P
-0.2 (, they dif) 279.01 240.83 P
-0.2 (fer in the way they combine their ar) 314.23 240.83 P
-0.2 (guments. The) 455.59 240.83 P
3 F
(concat) 152.1 228.53 T
1 F
( command takes one or more lists as ar) 188.08 228.53 T
(guments and joins all of the elements of) 343.35 228.53 T
(the ar) 152.1 216.23 T
(gument lists together into a single lar) 174.4 216.23 T
(ge list:) 322.47 216.23 T
3 9 Q
(concat {a b c} {d e} f {g h i}) 179.1 201.9 T
6 F
(\336) 162.9 188.9 T
7 F
(a b c d e f g h i) 179.1 188.9 T
3 10 Q
(Concat) 152.1 175.23 T
1 F
( expects its ar) 188.08 175.23 T
(guments to have proper list structure; if the ar) 242.58 175.23 T
(guments are not well-) 425.05 175.23 T
(formed lists then the result may not be a well-formed list either) 152.1 162.93 T
(. In fact, all that) 403.88 162.93 T
3 F
(concat) 469.67 162.93 T
1 F
(does is to concatenate its ar) 152.1 150.63 T
(gument strings into one lar) 261.56 150.63 T
(ge string with space characters) 368.54 150.63 T
-0.19 (between the ar) 152.1 138.33 P
-0.19 (guments. The same ef) 209.81 138.33 P
-0.19 (fect as) 296.77 138.33 P
3 F
-0.46 (concat) 324.69 138.33 P
1 F
-0.19 ( can be achieved using double-quotes:) 360.67 138.33 P
FMENDPAGE
%%EndPage: "53" 62
%%Page: "54" 62
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(54) 98.1 668.33 T
5 F
(Lists) 491.55 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 9 Q
0 X
(set x {a b c}) 179.1 633 T
(set y {d e}) 179.1 622.75 T
(set z [concat $x $y]) 179.1 612.5 T
6 F
(\336) 162.9 599.5 T
7 F
(a b c d e) 179.1 599.5 T
3 F
(set z "$x $y") 179.1 586.5 T
6 F
(\336) 162.9 573.5 T
7 F
(a b c d e) 179.1 573.5 T
1 10 Q
(The) 170.1 559.84 T
3 F
(list) 188.14 559.84 T
1 F
( command joins its ar) 212.13 559.84 T
(guments together so that each ar) 298.01 559.84 T
(gument becomes a) 426.9 559.84 T
(distinct element of the resulting list:) 152.1 547.59 T
3 9 Q
(list {a b c} {d e} f {g h i}) 179.1 533.26 T
6 F
(\336) 162.9 520.26 T
7 F
({a b c} {d e} f {g h i}) 179.1 520.26 T
1 10 Q
(In this case, the result list contains only four elements. The) 152.1 506.59 T
3 F
(list) 390 506.59 T
1 F
( command will always) 413.99 506.59 T
(produce a list with proper structure, regardless of the structure of its ar) 152.1 494.34 T
(guments \050it adds) 433.64 494.34 T
(braces or backslashes as needed\051, and the) 152.1 482.09 T
3 F
(lindex) 319.73 482.09 T
1 F
( command can always be used to) 355.71 482.09 T
-0.28 (extract the original elements of a list created with) 152.1 469.85 P
3 F
-0.68 (list) 349.69 469.85 P
1 F
-0.28 (. The ar) 373.68 469.85 P
-0.28 (guments to) 403.74 469.85 P
3 F
-0.68 (list) 449.82 469.85 P
1 F
-0.28 ( need not) 473.81 469.85 P
(themselves be well-formed lists.) 152.1 457.6 T
(The) 170.1 445.6 T
3 F
(llength) 188.14 445.6 T
1 F
( command returns the number of elements in a list:) 230.12 445.6 T
3 9 Q
(llength {{a b c} {d e} f {g h i}}) 179.1 431.26 T
6 F
(\336) 162.9 418.26 T
7 F
(4) 179.1 418.26 T
3 F
(llength a) 179.1 405.26 T
6 F
(\336) 162.9 392.26 T
7 F
(1) 179.1 392.26 T
3 F
(llength {}) 179.1 379.26 T
6 F
(\336) 162.9 366.26 T
7 F
(0) 179.1 366.26 T
1 10 Q
(As you can see from the examples, a simple string like \322) 152.1 352.6 T
3 F
(a) 377.5 352.6 T
1 F
(\323 is a proper list with one ele-) 383.49 352.6 T
(ment and an empty string is a proper list with zero elements.) 152.1 340.35 T
98.1 296.99 512.1 300.02 C
152.1 298.22 512.1 298.22 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 298.5 143.1 298.5 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(6.3) 124.63 304.02 T
(Modifying lists: linsert, lreplace, lrange, and lappend) 152.1 304.02 T
1 10 Q
(The) 152.1 280.33 T
3 F
(linsert) 170.14 280.33 T
1 F
( command forms a new list by adding one or more elements to an existing) 212.12 280.33 T
(list:) 152.1 268.08 T
3 9 Q
(set x {a b {c d} e}) 179.1 253.74 T
6 F
(\336) 162.9 240.74 T
7 F
(a b {c d} e) 179.1 240.74 T
3 F
(linsert $x 2 X Y Z) 179.1 227.74 T
6 F
(\336) 162.9 214.74 T
7 F
(a b X Y Z {c d} e) 179.1 214.74 T
3 F
(linsert $x 0 {X Y} Z) 179.1 201.74 T
6 F
(\336) 162.9 188.74 T
7 F
({X Y} Z a b {c d} e) 179.1 188.74 T
3 10 Q
(Linsert) 152.1 175.08 T
1 F
( takes three or more ar) 194.08 175.08 T
(guments. The \336rst is a list, the second is the index of an) 283.54 175.08 T
-0.01 (element within that list, and the third and additional ar) 152.1 162.83 P
-0.01 (guments are new elements to insert) 368.92 162.83 P
(into the list. The return value from) 152.1 150.58 T
3 F
(linsert) 292.56 150.58 T
1 F
( is a list formed by inserting the new ele-) 334.54 150.58 T
(ments just before the element indicated by the index. If the index is zero then the new ele-) 152.1 138.33 T
FMENDPAGE
%%EndPage: "54" 63
%%Page: "55" 63
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(6.3 Modifying lists: linsert, lreplace, lrange, and lappend) 98.1 668.33 T
4 F
(55) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(ments go at the beginning of the list; if it is one then the new elements go after the \336rst) 152.1 632.33 T
-0.09 (element in the old list; and so on. If the index is greater than or equal to the number of ele-) 152.1 620.33 P
(ments in the original list then the new elements are inserted at the end of the list.) 152.1 608.33 T
(The) 170.1 596.33 T
3 F
(lreplace) 188.14 596.33 T
1 F
( command deletes elements from a list and optionally adds new ele-) 236.11 596.33 T
(ments in their place. It takes three or more ar) 152.1 584.33 T
(guments. The \336rst ar) 331.22 584.33 T
(gument is a list and the) 413.77 584.33 T
(second and third ar) 152.1 572.33 T
(guments give the indices of the \336rst and last elements to be deleted. If) 228.25 572.33 T
(only three ar) 152.1 560.33 T
(guments are speci\336ed then the result is a new list produced by deleting the) 202.43 560.33 T
(given range of elements from the original list:) 152.1 548.33 T
3 9 Q
(lreplace {a b {c d} e} 3 3) 179.1 534 T
6 F
(\336) 162.9 521 T
7 F
(a b {c d}) 179.1 521 T
1 10 Q
( If additional ar) 152.1 507.33 T
(guments are speci\336ed to) 213.82 507.33 T
3 F
(lreplace) 313.19 507.33 T
1 F
( as in the example below) 361.17 507.33 T
(, then they) 459.61 507.33 T
(are inserted into the list in place of the elements that were deleted.) 152.1 495.33 T
3 9 Q
(lreplace {a b {c d} e} 1 2 {W X} Y Z) 179.1 481 T
6 F
(\336) 162.9 468 T
7 F
(a {W X} Y Z e) 179.1 468 T
1 10 Q
-0.2 (The) 170.1 454.33 P
3 F
-0.48 (lrange) 187.94 454.33 P
1 F
-0.2 ( command extracts a range of elements from a list. It takes as ar) 223.92 454.33 P
-0.2 (guments) 475.93 454.33 P
(a list and two indices and it returns a new list consisting of the range of elements that lie) 152.1 442.33 T
(between the two indices \050inclusive\051:) 152.1 430.33 T
3 9 Q
(set x {a b {c d} e}) 179.1 416 T
6 F
(\336) 162.9 403 T
7 F
(a b {c d} e) 179.1 403 T
3 F
(lrange $x 1 3) 179.1 390 T
6 F
(\336) 162.9 377 T
7 F
(b {c d} e) 179.1 377 T
3 F
(lrange $x 0 1) 179.1 364 T
6 F
(\336) 162.9 351 T
7 F
(a b) 179.1 351 T
1 10 Q
(The) 170.1 337.33 T
3 F
(lappend) 188.14 337.33 T
1 F
( command provides an ef) 230.12 337.33 T
(\336cient way to append new elements to a list) 330.97 337.33 T
(stored in a variable. It takes as ar) 152.1 325.33 T
(guments the name of a variable and any number of addi-) 283.48 325.33 T
-0.29 (tional ar) 152.1 313.33 P
-0.29 (guments. Each of the additional ar) 184.66 313.33 P
-0.29 (guments is appended to the variable\325) 320.14 313.33 P
-0.29 (s value as a) 464.97 313.33 P
(new list element and) 152.1 301.33 T
3 F
(lappend) 237.04 301.33 T
1 F
( returns the variable\325) 279.02 301.33 T
(s new value:) 361.45 301.33 T
3 9 Q
(set x {a b {c d} e}) 179.1 287 T
6 F
(\336) 162.9 274 T
7 F
(a b {c d} e) 179.1 274 T
3 F
(lappend x XX {YY ZZ}) 179.1 261 T
6 F
(\336) 162.9 248 T
7 F
(a b {c d} e XX {YY ZZ}) 179.1 248 T
3 F
(set x) 179.1 235 T
6 F
(\336) 162.9 222 T
7 F
(a b {c d} e XX {YY ZZ}) 179.1 222 T
3 10 Q
(Lappend) 152.1 208.33 T
1 F
( is similar to) 194.08 208.33 T
3 F
(append) 246.28 208.33 T
1 F
( except that it enforces proper list structure. As with) 282.26 208.33 T
(append, it isn\325) 152.1 196.33 T
(t strictly necessary) 208.83 196.33 T
(. For example, the command) 282.57 196.33 T
3 9 Q
(lappend x $a $b $c) 179.1 182 T
1 10 Q
(could be written instead as) 152.1 168.33 T
3 9 Q
(set x "$x [list $a $b $c]") 179.1 154 T
FMENDPAGE
%%EndPage: "55" 64
%%Page: "56" 64
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(56) 98.1 668.33 T
5 F
(Lists) 491.55 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(However) 152.1 632.33 T
(, as with) 188.33 632.33 T
3 F
(append) 224.42 632.33 T
1 F
(,) 260.4 632.33 T
3 F
(lappend) 265.4 632.33 T
1 F
( is implemented in a way that avoids string copies.) 307.38 632.33 T
(For lar) 152.1 620.33 T
(ge lists this can make a big dif) 178.85 620.33 T
(ference in performance.) 299.98 620.33 T
98.1 576.98 512.1 580 C
152.1 578.2 512.1 578.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 578.49 143.1 578.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(6.4) 124.63 584 T
(Searching lists: lsearch) 152.1 584 T
1 10 Q
(The) 152.1 560.31 T
3 F
(lsearch) 170.14 560.31 T
1 F
( command searches a list for an element with a particular value. It takes) 212.12 560.31 T
(two ar) 152.1 548.31 T
(guments, the \336rst of which is a list and second of which is a pattern:) 177.18 548.31 T
3 9 Q
(set x {John Anne Mary Jim}) 179.1 533.98 T
(lsearch $x Mary) 179.1 523.98 T
6 F
(\336) 162.9 510.98 T
7 F
(2) 179.1 510.98 T
3 F
(lsearch $x Phil) 179.1 497.98 T
6 F
(\336) 162.9 484.98 T
7 F
(-1) 179.1 484.98 T
3 10 Q
-0.76 (Lsearch) 152.1 471.31 P
1 F
-0.32 ( returns the index of the \336rst element in the list that matches the pattern, or) 194.08 471.31 P
3 F
-0.76 (-1) 489.64 471.31 P
1 F
-0.32 ( if) 501.63 471.31 P
(there was no matching element.) 152.1 459.31 T
(One of three dif) 170.1 447.31 T
(ferent pattern matching techniques can be selected by specifying one) 233.48 447.31 T
(of the switches) 152.1 435.31 T
3 F
(-exact) 214.56 435.31 T
1 F
(,) 250.54 435.31 T
3 F
(-glob) 255.53 435.31 T
1 F
(, and) 285.52 435.31 T
3 F
(-regexp) 307.45 435.31 T
1 F
( before the list ar) 349.42 435.31 T
(gument:) 416.96 435.31 T
3 9 Q
(lsearch -glob $x A*) 179.1 420.98 T
6 F
(\336) 162.9 407.98 T
7 F
(1) 179.1 407.98 T
1 10 Q
(The) 152.1 394.31 T
3 F
(-glob) 170.14 394.31 T
1 F
( switch causes matching to occur with the rules of the) 200.12 394.31 T
3 F
(string match) 416.91 394.31 T
1 F
( com-) 488.88 394.31 T
(mand described in Section 10.1. A) 152.1 382.31 T
3 F
(-regexp) 292.56 382.31 T
1 F
( switch causes matching to occur with regu-) 334.54 382.31 T
(lar expression rules as described in Section 10.2, and) 152.1 370.31 T
3 F
(-exact) 366.11 370.31 T
1 F
( insists on an exact match) 402.09 370.31 T
(only) 152.1 358.31 T
(. If no switch is speci\336ed then) 169.22 358.31 T
3 F
(-glob) 291.36 358.31 T
1 F
( is assumed by default.) 321.35 358.31 T
98.1 314.95 512.1 317.98 C
152.1 316.18 512.1 316.18 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 316.46 143.1 316.46 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(6.5) 124.63 321.98 T
(Sorting lists: lsort) 152.1 321.98 T
1 10 Q
(The) 152.1 298.29 T
3 F
(lsort) 170.14 298.29 T
1 F
( command takes a list as ar) 200.12 298.29 T
(gument and returns a new list with the same ele-) 307.64 298.29 T
(ments, but sorted in increasing lexicographic order:) 152.1 286.29 T
3 9 Q
(lsort {John Anne Mary Jim}) 179.1 271.95 T
6 F
(\336) 162.9 258.95 T
7 F
(Anne Jim John Mary) 179.1 258.95 T
1 10 Q
(Y) 152.1 245.29 T
(ou can precede the list with any of several switches to control the sort. For example,) 158.32 245.29 T
3 F
(-) 152.1 233.29 T
(decreasing) 158.1 233.29 T
1 F
( speci\336es that the result should have the \322lar) 218.06 233.29 T
(gest\323 element \336rst and) 394.43 233.29 T
3 F
(-) 152.1 221.29 T
(integer) 158.1 221.29 T
1 F
( speci\336es that the elements should be treated as integers and sorted according) 200.07 221.29 T
(to integer value:) 152.1 209.29 T
3 9 Q
(lsort -decreasing {John Anne Mary Jim}) 179.1 194.95 T
6 F
(\336) 162.9 181.95 T
7 F
(Mary John Jim Anne) 179.1 181.95 T
3 F
(lsort {10 1 2}) 179.1 168.95 T
6 F
(\336) 162.9 155.95 T
7 F
(1 10 2) 179.1 155.95 T
FMENDPAGE
%%EndPage: "56" 65
%%Page: "57" 65
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(6.6 Converting between strings and lists: split and join) 98.1 668.33 T
4 F
(57) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 9 Q
0 X
(lsort -integer {10 1 2}) 179.1 633 T
6 F
(\336) 162.9 620 T
7 F
(1 2 10) 179.1 620 T
1 10 Q
-0.36 (Y) 152.1 606.33 P
-0.36 (ou can use the) 158.32 606.33 P
3 F
-0.85 (-command) 216.29 606.33 P
1 F
-0.36 ( option to specify your own sorting function \050see the reference) 264.26 606.33 P
(documentation for details\051.) 152.1 594.33 T
98.1 550.98 512.1 554 C
152.1 552.2 512.1 552.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 552.49 143.1 552.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(6.6) 124.63 558 T
(Converting between strings and lists: split and join) 152.1 558 T
1 10 Q
(The) 152.1 534.31 T
3 F
(split) 170.14 534.31 T
1 F
( command breaks up a string into component pieces so that you can process) 200.12 534.31 T
(the pieces independently) 152.1 522.31 T
(. It creates a list whose elements are the pieces, so that you can) 250.27 522.31 T
(use any of the list commands to process the pieces. For example, suppose a variable con-) 152.1 510.31 T
(tains a UNIX \336le name with components separated by slashes, and you want to convert it) 152.1 498.31 T
(to a list with one element for each component:) 152.1 486.31 T
3 9 Q
(set x a/b/c) 179.1 471.98 T
(set y /usr/include/sys/types.h) 179.1 461.98 T
(split $x /) 179.1 451.98 T
6 F
(\336) 162.9 438.98 T
7 F
(a b c) 179.1 438.98 T
3 F
(split $y /) 179.1 425.98 T
6 F
(\336) 162.9 412.98 T
7 F
({} usr include sys types.h) 179.1 412.98 T
1 10 Q
-0.01 (The \336rst ar) 152.1 399.31 P
-0.01 (gument to) 195.75 399.31 P
3 F
-0.04 (split) 238.47 399.31 P
1 F
-0.01 ( is the string to be split up and the second ar) 268.46 399.31 P
-0.01 (gument contains) 443.84 399.31 P
(one or more) 152.1 387.31 T
2 F
(split characters) 202.89 387.31 T
1 F
(.) 265.36 387.31 T
3 F
(Split) 270.36 387.31 T
1 F
( locates all instances of any of the split characters in) 300.34 387.31 T
(the string. It then creates a list whose elements consist of the substrings between the split) 152.1 375.31 T
(characters. The ends of the string are also treated as split characters. If there are consecu-) 152.1 363.31 T
(tive split characters or if the string starts or ends with a split character as in the second) 152.1 351.31 T
(example, then empty elements are generated in the result list. The split characters them-) 152.1 339.31 T
-0.21 (selves are discarded. Several split characters can be speci\336ed, as in the following example:) 152.1 327.31 P
3 9 Q
(split xbaybz ab) 179.1 312.98 T
6 F
(\336) 162.9 299.98 T
7 F
(x {} y z) 179.1 299.98 T
1 10 Q
(If an empty string is speci\336ed for the split characters then each character of the string is) 152.1 286.31 T
(made into a separate list element:) 152.1 274.31 T
3 9 Q
(split {a b c} {}) 179.1 259.98 T
6 F
(\336) 162.9 246.98 T
7 F
(a { } b { } c) 179.1 246.98 T
1 10 Q
(The) 170.1 233.31 T
3 F
(join) 188.14 233.31 T
1 F
( command is approximately the inverse of) 212.13 233.31 T
3 F
(split) 382.84 233.31 T
1 F
(. It concatenates list ele-) 412.83 233.31 T
(ments together with a given separator string between them:) 152.1 221.31 T
3 9 Q
(join {) 179.1 206.98 T
351.66 206.24 211.46 206.24 2 L
V
0.36 H
0 Z
N
({} usr include sys types.h) 211.46 206.98 T
(} /) 351.66 206.98 T
6 F
(\336) 162.9 193.98 T
7 F
(/usr/include/sys/types.h) 179.1 193.98 T
3 F
(set x {24 112 5}) 179.1 180.98 T
(expr [join $x +]) 179.1 170.98 T
6 F
(\336) 162.9 157.98 T
7 F
(141) 179.1 157.98 T
FMENDPAGE
%%EndPage: "57" 66
%%Page: "58" 66
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(58) 98.1 668.33 T
5 F
(Lists) 491.55 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 10 Q
0 X
-0.89 (Join) 152.1 632.33 P
1 F
-0.37 ( takes two ar) 176.09 632.33 P
-0.37 (guments: a list and a separator string. It extracts all of the elements from) 225.58 632.33 P
(the list and concatenates them together with the separator string between each pair of ele-) 152.1 620.26 T
(ments. The separator string can contain any number of characters, including zero. In the) 152.1 608.18 T
(\336rst example above a \336le name is generated by joining the list elements with \322) 152.1 596.1 T
3 F
(/) 465.23 596.1 T
1 F
(\323. In the) 471.23 596.1 T
(second example a T) 152.1 584.03 T
(cl expression is generated by joining the list elements with \322) 231.06 584.03 T
3 F
(+) 472.01 584.03 T
1 F
(\323.) 478.01 584.03 T
-0.09 (One of the most common uses for) 170.1 572.03 P
3 F
-0.21 (split) 307.45 572.03 P
1 F
-0.09 ( and) 337.43 572.03 P
3 F
-0.21 (join) 356.68 572.03 P
1 F
-0.09 ( is for dealing with \336le names as) 380.67 572.03 P
(shown above. Another common use is for splitting up text into lines by using newline as) 152.1 559.95 T
(the split character) 152.1 547.88 T
(.) 222.6 547.88 T
98.1 504.52 512.1 507.54 C
152.1 505.74 512.1 505.74 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 506.03 143.1 506.03 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(6.7) 124.63 511.54 T
(Lists and commands) 152.1 511.54 T
1 10 Q
-0.09 (There is a very important relationship between lists and commands in T) 152.1 487.85 P
-0.09 (cl. Any proper list) 437.21 487.85 P
-0.03 (is also a well-formed T) 152.1 475.78 P
-0.03 (cl command. If a list is evaluated as a T) 243.99 475.78 P
-0.03 (cl script then it will consist) 401.78 475.78 P
-0.22 (of a single command whose words are the list elements. In other words, the T) 152.1 463.7 P
-0.22 (cl parser will) 458.08 463.7 P
-0 (perform no substitutions whatsoever: it will simply extract the list elements with each ele-) 152.1 451.62 P
(ment becoming one word of the command. This property is very important because it) 152.1 439.55 T
(allows you to generate T) 152.1 427.47 T
(cl commands that are guaranteed to parse in a particular fashion) 250.22 427.47 T
(even if some of the command\325) 152.1 415.4 T
(s words contain special characters like spaces or) 273.4 415.4 T
3 F
($) 468.8 415.4 T
1 F
(.) 474.79 415.4 T
(For example, suppose you are creating a button widget in Tk, and when the user) 170.1 403.4 T
-0.19 (clicks on the widget you would like to reset a variable to a particular value. Y) 152.1 391.32 P
-0.19 (ou might cre-) 458.62 391.32 P
(ate such a widget with a command like this:) 152.1 379.24 T
3 9 Q
(button .b -text "Reset" -command {set x 0}) 179.1 364.91 T
1 10 Q
-0.14 (The T) 152.1 351.24 P
-0.14 (cl script \322) 175.41 351.24 P
3 F
-0.33 (set x 0) 214 351.24 P
1 F
-0.14 (\323 will be evaluated whenever the user clicks on the button. Now) 255.32 351.24 P
(suppose that the value to be stored in the variable is not constant, but instead is computed) 152.1 339.17 T
(just before the) 152.1 327.09 T
3 F
(button) 211.78 327.09 T
1 F
( command and must be taken from a variable) 247.76 327.09 T
3 F
(initValue) 430.68 327.09 T
1 F
(. Fur-) 484.65 327.09 T
(thermore, suppose that) 152.1 315.02 T
3 F
(initValue) 245.37 315.02 T
1 F
( could contain any string whatsoever) 299.34 315.02 T
(. Y) 445.63 315.02 T
(ou might) 456.84 315.02 T
(rewrite the command as) 152.1 302.94 T
3 9 Q
(button .b -text "Reset" -command {set x $initValue}) 179.1 288.61 T
1 10 Q
-0.14 (The script \322) 152.1 274.94 P
3 F
-0.33 (set x $initValue) 199.01 274.94 P
1 F
-0.14 (\323 will be evaluated when the user clicks on the button.) 294.31 274.94 P
-0.02 (However) 152.1 262.86 P
-0.02 (, this will use the value of) 188.33 262.86 P
3 F
-0.04 (initValue) 293.69 262.86 P
1 F
-0.02 ( at the time the user clicks on the button,) 347.66 262.86 P
(which may not be the same as the value when the button was created. For example, the) 152.1 250.79 T
-0.08 (same variable might be used to create several buttons, each with a dif) 152.1 238.71 P
-0.08 (ferent intended reset) 428.25 238.71 P
(value.) 152.1 226.64 T
-0.29 (T) 170.1 214.64 P
-0.29 (o solve this problem you must generate a T) 175.51 214.64 P
-0.29 (cl command that contains the) 345.12 214.64 P
2 F
-0.29 (value) 463.3 214.64 P
1 F
-0.29 ( of the) 484.95 214.64 P
3 F
-0.34 (initValue) 152.1 202.56 P
1 F
-0.14 ( variable, not its name, and use this as part of the) 206.07 202.56 P
3 F
-0.34 ( -command) 399.64 202.56 P
1 F
-0.14 ( option for the) 453.27 202.56 P
3 F
(button) 152.1 190.48 T
1 F
( command. Unfortunately) 188.08 190.48 T
(, a simple approach like) 290.41 190.48 T
3 9 Q
(button .b -text "Reset" -command "set x $initValue") 179.1 176.15 T
1 10 Q
(will not work in general. If the value of) 152.1 162.48 T
3 F
(initValue) 311.98 162.48 T
1 F
( is something simple like) 365.95 162.48 T
3 F
(47) 468.41 162.48 T
1 F
( then) 480.4 162.48 T
(this will work \336ne: the resulting command will be \322) 152.1 150.41 T
3 F
(set x 47) 358.93 150.41 T
1 F
(\323, which will produce the) 406.9 150.41 T
(desired result. However) 152.1 138.33 T
(, what if) 246.9 138.33 T
3 F
(initValue) 282.43 138.33 T
1 F
( contains \322) 336.4 138.33 T
3 F
(New York) 379.14 138.33 T
1 F
(\323? In this case the) 427.12 138.33 T
FMENDPAGE
%%EndPage: "58" 67
%%Page: "59" 67
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(6.7 Lists and commands) 98.1 668.33 T
4 F
(59) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
-0.16 (resulting command will be \322) 152.1 632.33 P
3 F
-0.38 (set x New York) 265.29 632.33 P
1 F
-0.16 (\323, which has four words;) 348.11 632.33 P
3 F
-0.38 (set) 448.35 632.33 P
1 F
-0.16 ( will gener-) 466.34 632.33 P
-0.17 (ate an error because there are too many ar) 152.1 620.33 P
-0.17 (guments. Even worse, what if) 317.6 620.33 P
3 F
-0.41 (initValue) 438.04 620.33 P
1 F
-0.17 ( con-) 492.01 620.33 P
(tains special characters like \322) 152.1 608.33 T
3 F
($) 268.67 608.33 T
1 F
(\323 or \322) 274.66 608.33 T
3 F
([) 296.86 608.33 T
1 F
(\323? These characters could cause unwanted) 302.86 608.33 T
(substitutions to occur when the command is evaluated.) 152.1 596.33 T
(The only solution that is guaranteed to work for any value of) 170.1 584.33 T
3 F
(initValue) 415.48 584.33 T
1 F
( is to use) 469.45 584.33 T
(list commands to generate the command, as in the following example:) 152.1 572.33 T
3 9 Q
(button .b -text "Reset" -command [list set x $initValue]) 179.1 558 T
1 10 Q
(The result of the) 152.1 544.33 T
3 F
(list) 220.38 544.33 T
1 F
( command is a T) 244.37 544.33 T
(cl command whose \336rst word will be) 310.29 544.33 T
3 F
(set) 461.03 544.33 T
1 F
(, whose) 479.02 544.33 T
-0.05 (second word will be) 152.1 532.33 P
3 F
-0.13 (x) 235.16 532.33 P
1 F
-0.05 (, and whose third word will be the value of) 241.15 532.33 P
3 F
-0.13 (initValue) 414.66 532.33 P
1 F
-0.05 (. The com-) 468.63 532.33 P
(mand will always produce the desired result: whatever value is stored in) 152.1 520.33 T
3 F
(initValue) 443 520.33 T
1 F
( at) 496.97 520.33 T
-0.19 (the time) 152.1 508.33 P
3 F
-0.45 (button) 186.71 508.33 P
1 F
-0.19 ( is invoked will be stored in) 222.69 508.33 P
3 F
-0.45 (x) 334.93 508.33 P
1 F
-0.19 ( when the widget is invoked. For example,) 340.93 508.33 P
(suppose that the value of) 152.1 496.33 T
3 F
(initValue) 253.97 496.33 T
1 F
( is \322) 307.94 496.33 T
3 F
(New York) 324.05 496.33 T
1 F
(\323. The command generated by) 372.02 496.33 T
3 F
(list) 152.1 484.33 T
1 F
( will be \322) 176.09 484.33 T
3 F
(set x {New York}) 213.01 484.33 T
1 F
(\323, which will parse and execute correctly) 308.95 484.33 T
(. Any of) 471.77 484.33 T
(the T) 152.1 472.33 T
(cl special characters will also be handled correctly by) 172.22 472.33 T
3 F
(list) 388.43 472.33 T
1 F
(:) 412.42 472.33 T
3 9 Q
(set initValue {Earnings: $1410.13}) 179.1 458 T
(list set x $initValue) 179.1 448 T
6 F
(\336) 162.9 435 T
7 F
(set x) 179.1 435 T
3 F
({Earnings: $1410.13}) 211.46 435 T
(set initValue "{ \134\134") 179.1 422 T
(list set x $initValue) 179.1 412 T
6 F
(\336) 162.9 399 T
7 F
(set x \134{\134 \134\134) 179.1 399 T
FMENDPAGE
%%EndPage: "59" 68
%%Page: "60" 68
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(60) 98.1 668.33 T
5 F
(Lists) 491.55 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
FMENDPAGE
%%EndPage: "60" 69
%%Page: "61" 69
612 792 0 FMBEGINPAGE
98.1 675 512.1 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
98.1 450 512.1 450 2 L
7 X
V
2 Z
0 X
N
98.1 108 512.1 126 R
7 X
V
4 10 Q
0 X
(61) 500.99 119.33 T
98.1 54 512.1 108 R
7 X
V
1 9 Q
0 X
(Copyright \251 1993 Addison-W) 152.1 102 T
(esley Publishing Company) 261.32 102 T
(, Inc.) 357.1 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 152.1 91 T
(. Any) 485.77 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 152.1 80 T
-0.34 (lisher) 152.1 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 171.58 69 P
(does not of) 152.1 58 T
(fer warranties in regard to this draft.) 191.88 58 T
0 24 Q
(Chapter 7) 152.1 605 T
-0.48 (Contr) 152.1 575 S
-0.48 (ol Flow) 210.56 575 S
98.1 135 512.1 423 R
7 X
V
1 10 Q
0 X
(This chapter describes the T) 152.1 416.33 T
(cl commands for controlling the \337ow of execution in a script.) 264.09 416.33 T
(T) 152.1 404.33 T
(cl\325) 157.51 404.33 T
(s control \337ow commands are similar to the control \337ow statements in the C program-) 167.5 404.33 T
(ming language and) 152.1 392.33 T
3 F
(csh) 230.66 392.33 T
1 F
(, including) 248.65 392.33 T
3 F
(if) 293.9 392.33 T
1 F
(,) 305.89 392.33 T
3 F
(while) 310.89 392.33 T
1 F
(,) 340.88 392.33 T
3 F
(for) 345.87 392.33 T
1 F
(,) 363.46 392.33 T
3 F
(foreach) 368.46 392.33 T
1 F
(,) 410.44 392.33 T
3 F
(switch) 415.43 392.33 T
1 F
(, and) 451.42 392.33 T
3 F
(eval) 473.34 392.33 T
1 F
(.) 497.33 392.33 T
(T) 152.1 380.33 T
(able 7.1 summarizes these commands.) 157.51 380.33 T
98.1 336.98 512.1 340 C
152.1 338.2 512.1 338.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 338.49 143.1 338.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(7.1) 124.63 344 T
(The if command) 152.1 344 T
1 10 Q
(The) 152.1 320.31 T
3 F
(if) 170.14 320.31 T
1 F
( command evaluates an expression, tests its result, and conditionally executes a) 182.13 320.31 T
(script based on the result. For example, consider the following command, which sets vari-) 152.1 308.31 T
(able) 152.1 296.31 T
3 F
(x) 171.25 296.31 T
1 F
( to zero if it was previously negative:) 177.25 296.31 T
3 9 Q
(if {$x < 0} {) 179.1 281.98 T
(set x 0) 200.63 271.98 T
(}) 179.1 261.98 T
1 10 Q
(In this case) 152.1 248.31 T
3 F
(if) 199.56 248.31 T
1 F
( receives two ar) 211.56 248.31 T
(guments. The \336rst is an expression and the second is a T) 274.37 248.31 T
(cl) 499.08 248.31 T
(script. The expression can have any of the forms for expressions described in Chapter 5.) 152.1 236.31 T
(The) 152.1 224.31 T
3 F
(if) 170.14 224.31 T
1 F
( command evaluates the expression and tests the result; if it is non-zero then) 182.13 224.31 T
3 F
(if) 489.14 224.31 T
1 F
(evaluates the T) 152.1 212.31 T
(cl script. If the value is zero then) 211.91 212.31 T
3 F
(if) 345.41 212.31 T
1 F
( returns without taking any further) 357.41 212.31 T
(action.) 152.1 200.31 T
3 F
(If) 170.1 188.31 T
1 F
( commands can also include one or more) 182.09 188.31 T
3 F
(elseif) 348.08 188.31 T
1 F
( clauses with additional tests) 384.06 188.31 T
(and scripts, plus a \336nal) 152.1 176.31 T
3 F
(else) 246.49 176.31 T
1 F
( clause with a script to evaluate if no test succeeds:) 270.48 176.31 T
44.1 351 89.1 423 C
53.1 360 215.1 414 R
7 X
0 K
V
0 9 Q
0 X
(FIGURE  7) 53.1 408 T
(T) 53.1 387 T
(ABLE  7) 58.43 387 T
44.1 351 143.1 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "61" 70
%%Page: "62" 70
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(62) 98.1 668.33 T
5 F
(Control Flow) 456.01 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 138.6 512.1 639 C
98.1 179.62 512.1 194.02 C
98.1 179.62 512.1 194.02 R
7 X
0 K
V
152.1 187.54 512.1 187.54 2 L
V
0.5 H
2 Z
0 X
N
98.1 138.6 512.1 639 C
98.1 156.22 512.1 170.62 C
98.1 156.22 512.1 170.62 R
7 X
0 K
V
152.1 164.14 512.1 164.14 2 L
V
0.5 H
2 Z
0 X
N
98.1 138.6 512.1 639 C
0 9 Q
0 X
0 K
(T) 152.1 173.62 T
(able  7.1.) 157.27 173.62 T
1 F
(A summary of the T) 195.72 173.62 T
(cl commands for controlling the \337ow of execution.) 267.98 173.62 T
3 F
(break) 158.1 622.02 T
1 F
(T) 230.1 613.02 T
(erminates the innermost nested looping command.) 234.96 613.02 T
3 F
(continue) 158.1 594.02 T
1 F
(T) 230.1 585.02 T
(erminates the current iteration of the innermost looping command and) 234.96 585.02 T
(goes on to the next iteration of that command.) 230.1 576.02 T
3 F
(eval) 158.1 557.02 T
7 F
(arg) 185.06 557.02 T
1 F
(?) 206.63 557.02 T
7 F
(arg arg) 210.62 557.02 T
1 F
(...?) 253.76 557.02 T
(Concatenates all of the) 230.1 548.02 T
7 F
(arg) 314.46 548.02 T
1 F
(\325) 330.64 548.02 T
(s with separator spaces, then evaluates the) 333.14 548.02 T
(result as a T) 230.1 539.02 T
(cl script and returns its result.) 273.15 539.02 T
3 F
(for) 158.1 520.02 T
7 F
(init) 179.67 520.02 T
(test) 206.63 520.02 T
(reinit) 233.59 520.02 T
(body) 271.34 520.02 T
1 F
(Executes) 230.1 511.02 T
7 F
(init) 264.79 511.02 T
1 F
( as a T) 286.36 511.02 T
(cl script. Then evaluates) 309.44 511.02 T
7 F
(test) 399.05 511.02 T
1 F
( as an expression. If it) 420.61 511.02 T
(evaluates to non-zero then executes) 230.1 502.02 T
7 F
(body) 360.13 502.02 T
1 F
( as a T) 381.7 502.02 T
(cl script, executes) 404.78 502.02 T
7 F
(reinit) 471.17 502.02 T
1 F
(as a T) 230.1 493.02 T
(cl script, and re-evaluates) 250.93 493.02 T
7 F
(test) 345.02 493.02 T
1 F
( as an expression. Repeats until) 366.59 493.02 T
7 F
(test) 481.67 493.02 T
1 F
(evaluates to zero. Returns an empty string.) 230.1 484.02 T
3 F
(foreach) 158.1 465.02 T
7 F
(varName) 201.24 465.02 T
(list) 244.38 465.02 T
(body) 271.34 465.02 T
1 F
(For each element of) 230.1 456.02 T
7 F
(list) 303.98 456.02 T
1 F
(, in order) 325.55 456.02 T
(, set variable) 357.88 456.02 T
7 F
(varName) 405.8 456.02 T
1 F
( to that value) 443.55 456.02 T
(and execute) 230.1 447.02 T
7 F
(body) 275.02 447.02 T
1 F
( as a T) 296.59 447.02 T
(cl script. Returns an empty string.) 319.67 447.02 T
7 F
(List) 443.49 447.02 T
1 F
( must be a) 465.06 447.02 T
(valid T) 230.1 438.02 T
(cl list.) 255.18 438.02 T
3 F
(if) 158.1 419.02 T
7 F
(test1) 174.28 419.02 T
1 F
(?) 206.63 419.02 T
3 F
(then) 210.62 419.02 T
1 F
(?) 232.19 419.02 T
7 F
( body1) 236.18 419.02 T
1 F
(?) 273.93 419.02 T
3 F
(elseif) 277.92 419.02 T
7 F
(test2) 315.67 419.02 T
1 F
(?) 348.02 419.02 T
3 F
(then) 352.01 419.02 T
1 F
(?) 373.58 419.02 T
7 F
( body2) 377.57 419.02 T
3 F
(elseif) 415.32 419.02 T
1 F
(...?) 453.07 419.02 T
3 F
( \134) 463.8 419.02 T
1 F
(?) 176.07 410.02 T
3 F
(else) 180.07 410.02 T
1 F
(?) 201.63 410.02 T
(?) 211.02 410.02 T
7 F
(bodyn) 215.01 410.02 T
1 F
(?) 241.97 410.02 T
(Evaluates) 230.1 401.02 T
7 F
(test) 267.29 401.02 T
1 F
( as an expression. If its value is non-zero then executes) 288.86 401.02 T
7 F
(body1) 230.1 392.02 T
1 F
( as a T) 257.06 392.02 T
(cl script and returns its value . Otherwise evaluates) 280.14 392.02 T
7 F
(test2) 465.35 392.02 T
1 F
( as) 492.31 392.02 T
(an expression; if its value is non-zero then executes) 230.1 383.02 T
7 F
(body2) 417.55 383.02 T
1 F
( as a script and) 444.51 383.02 T
(returns its value. If no test succeeds then executes) 230.1 374.02 T
7 F
(bodyn) 411.3 374.02 T
1 F
( as a T) 438.27 374.02 T
(cl script) 461.35 374.02 T
(and returns its result.) 230.1 365.02 T
3 F
(source) 158.1 346.02 T
7 F
(f) 195.85 346.02 T
(ileName) 201.24 346.02 T
1 F
(Reads the \336le whose name is) 230.1 337.02 T
7 F
(f) 336.44 337.02 T
(ileName) 341.83 337.02 T
1 F
( and evaluates its contents as a T) 379.58 337.02 T
(cl) 496.51 337.02 T
(script. Returns the result of the script.) 230.1 328.02 T
3 F
(switch) 158.1 309.02 T
1 F
(?) 195.85 309.02 T
7 F
(options) 199.84 309.02 T
1 F
(?) 237.58 309.02 T
7 F
(string) 246.97 309.02 T
(pattern body) 284.71 309.02 T
1 F
(?) 354.82 309.02 T
7 F
(pattern body) 358.81 309.02 T
1 F
(...?) 428.91 309.02 T
3 F
(switch) 158.1 300.02 T
1 F
(?) 195.85 300.02 T
7 F
(options) 199.84 300.02 T
1 F
(?) 237.58 300.02 T
7 F
(string) 246.97 300.02 T
3 F
( {) 279.32 300.02 T
7 F
(pattern) 290.11 300.02 T
(body) 333.25 300.02 T
1 F
(?) 360.21 300.02 T
7 F
(pattern body) 364.2 300.02 T
1 F
(...?}) 434.3 300.02 T
(Matches) 230.1 291.02 T
7 F
(string) 262.8 291.02 T
1 F
( against each) 295.15 291.02 T
7 F
(pattern) 343.82 291.02 T
1 F
( in order until a match is found,) 381.56 291.02 T
(then executes the) 230.1 282.02 T
7 F
(body) 294.24 282.02 T
1 F
( corresponding to the matching) 315.81 282.02 T
7 F
(pattern) 429.89 282.02 T
1 F
(. If the) 467.64 282.02 T
(last) 230.1 273.02 T
3 F
(pattern) 244.83 273.02 T
1 F
( is) 282.58 273.02 T
3 F
(default) 293.07 273.02 T
1 F
( then it matches anything. Returns the result of) 330.81 273.02 T
(the) 230.1 264.02 T
7 F
(body) 243.33 264.02 T
1 F
( executed, or an empty string if no pattern matches.) 264.9 264.02 T
7 F
(Options) 451.6 264.02 T
1 F
(may be any of) 230.1 255.02 T
3 F
(-exact) 283.51 255.02 T
1 F
(,) 315.87 255.02 T
3 F
(-glob) 320.36 255.02 T
1 F
(,) 347.32 255.02 T
3 F
(-regexp) 351.82 255.02 T
1 F
(, or) 389.56 255.02 T
3 F
(--) 403.79 255.02 T
1 F
(.) 414.58 255.02 T
3 F
(while) 158.1 236.02 T
7 F
(test) 190.45 236.02 T
(body) 217.42 236.02 T
1 F
(Evaluates) 230.1 227.02 T
7 F
(test) 267.29 227.02 T
1 F
( as an expression. If its value is non-zero then executes) 288.86 227.02 T
7 F
(body) 230.1 218.02 T
1 F
( as a T) 251.67 218.02 T
(cl script and re-evaluates) 274.75 218.02 T
7 F
(test) 366.59 218.02 T
1 F
(. Repeats until) 388.16 218.02 T
7 F
(test) 442.09 218.02 T
1 F
( evaluates) 463.66 218.02 T
(to zero. Returns an empty string.) 230.1 209.02 T
152.1 633.77 152.1 202.27 2 L
V
0.5 H
0 Z
N
512.1 633.77 512.1 202.27 2 L
V
N
151.85 634.02 512.35 634.02 2 L
V
N
151.85 606.02 512.35 606.02 2 L
V
0.25 H
N
151.85 569.02 512.35 569.02 2 L
V
N
151.85 532.02 512.35 532.02 2 L
V
N
151.85 477.02 512.35 477.02 2 L
V
N
151.85 431.02 512.35 431.02 2 L
V
N
151.85 358.02 512.35 358.02 2 L
V
N
151.85 321.02 512.35 321.02 2 L
V
N
151.85 248.02 512.35 248.02 2 L
V
N
151.85 202.02 512.35 202.02 2 L
V
0.5 H
N
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "62" 71
%%Page: "63" 71
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(7.2 Looping commands: while, for) 98.1 668.33 T
(, and foreach) 246.98 668.33 T
4 F
(63) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 9 Q
0 X
(if {$x < 0} {) 179.1 633 T
1 10 Q
(...) 200.63 623 T
3 9 Q
(} elseif {$x == 0} {) 179.1 613 T
1 10 Q
(...) 200.63 603 T
3 9 Q
(} elseif {$x == 1} {) 179.1 593 T
1 10 Q
(...) 200.63 583 T
3 9 Q
(} else {) 179.1 573 T
1 10 Q
(...) 200.63 563 T
3 9 Q
(}) 179.1 553 T
1 10 Q
(This command will execute one of the four scripts indicated by \322...\323 depending on the) 152.1 539.33 T
-0.23 (value of) 152.1 527.33 P
3 F
-0.54 (x) 186.62 527.33 P
1 F
-0.23 (. The result of the command will be the result of whichever script is executed. If) 192.62 527.33 P
(an) 152.1 515.33 T
3 F
(if) 164.03 515.33 T
1 F
( command has no) 176.03 515.33 T
3 F
(else) 248.76 515.33 T
1 F
( clause and none of its tests succeeds then it returns an) 272.74 515.33 T
(empty string.) 152.1 503.33 T
(The ar) 170.1 491.33 T
(gument) 195.73 491.33 T
3 F
(else) 228.21 491.33 T
1 F
( is an optional \322noise word\323. It is also legal to have) 252.2 491.33 T
3 F
(then) 459 491.33 T
1 F
( noise) 482.99 491.33 T
(words after any of the expressions to test. The) 152.1 479.33 T
3 F
(elseif) 338.63 479.33 T
1 F
( words are not optional: they are) 374.61 479.33 T
(needed to distinguish) 152.1 467.33 T
3 F
(elseif) 239.55 467.33 T
1 F
( clauses from) 275.53 467.33 T
3 F
(else) 331.32 467.33 T
1 F
( clauses.) 355.31 467.33 T
(Remember that the expressions and scripts for) 170.1 455.33 T
3 F
(if) 357.47 455.33 T
1 F
( and other control \337ow commands) 369.46 455.33 T
(are parsed using the same approach as all ar) 152.1 443.33 T
(guments to all T) 327.32 443.33 T
(cl commands. It is almost) 391.87 443.33 T
-0.37 (always a good idea to enclose the expressions and scripts in braces so that substitutions are) 152.1 431.33 P
-0.04 (deferred until the the command is executed. Furthermore, each open brace must be on the) 152.1 419.33 P
(same line as the preceding word or else the newline will be treated as a command separa-) 152.1 407.33 T
(tor) 152.1 395.33 T
(. The following script is parsed as two commands, which probably isn\325) 162.65 395.33 T
(t the desired) 445.9 395.33 T
(result:) 152.1 383.33 T
3 9 Q
(if {$x < 0}) 179.1 369 T
({) 179.1 359 T
(set x 0) 200.63 349 T
(}) 179.1 339 T
98.1 296.98 512.1 300 C
152.1 298.2 512.1 298.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 298.49 143.1 298.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(7.2) 124.63 304 T
(Looping commands: while, for) 152.1 304 T
(, and foreach) 325.37 304 T
1 10 Q
-0.13 (T) 152.1 280.31 P
-0.13 (cl provides three commands for looping:) 157.51 280.31 P
3 F
-0.31 (while) 321.62 280.31 P
1 F
-0.13 (,) 351.61 280.31 P
3 F
-0.31 (for) 356.48 280.31 P
1 F
-0.13 (, and) 374.07 280.31 P
3 F
-0.31 (foreach) 395.74 280.31 P
1 F
-0.13 (.) 437.71 280.31 P
3 F
-0.31 (While) 442.58 280.31 P
1 F
-0.13 ( and) 472.57 280.31 P
3 F
-0.31 (for) 491.74 280.31 P
1 F
(are similar to the corresponding C statements and) 152.1 268.31 T
3 F
(foreach) 352.52 268.31 T
1 F
( is similar to the correspond-) 394.5 268.31 T
(ing feature of the) 152.1 256.31 T
3 F
(csh) 223.15 256.31 T
1 F
( shell. Each of these commands executes a nested script over and) 241.14 256.31 T
(over again; they dif) 152.1 244.31 T
(fer in the kinds of setup they do before each iteration and in the ways) 229.92 244.31 T
(they decide to terminate the loop.) 152.1 232.31 T
(The) 170.1 220.31 T
3 F
(while) 188.14 220.31 T
1 F
( command takes two ar) 218.12 220.31 T
(guments: an expression and a T) 310.65 220.31 T
(cl script. It evalu-) 436.25 220.31 T
-0.27 (ates the expression and if the result is non-zero then it executes the T) 152.1 208.31 P
-0.27 (cl script. This process) 423.52 208.31 P
(repeats over and over until the expression evaluates to zero, at which point the) 152.1 196.31 T
3 F
(while) 467.7 196.31 T
1 F
(command terminates and returns an empty string. For example, the script below copies a) 152.1 184.31 T
(list from variable) 152.1 172.31 T
3 F
(b) 223.44 172.31 T
1 F
( to variable) 229.44 172.31 T
3 F
(a) 276.9 172.31 T
1 F
(, reversing the order of the elements along the way:) 282.9 172.31 T
FMENDPAGE
%%EndPage: "63" 72
%%Page: "64" 72
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(64) 98.1 668.33 T
5 F
(Control Flow) 456.01 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 9 Q
0 X
(set b "") 179.1 633 T
(set i [expr [llength $a] -1]) 179.1 622.91 T
(while {$i >= 0} {) 179.1 612.83 T
(lappend b [lindex $a $i]) 200.63 602.74 T
(incr i -1) 200.63 592.66 T
(}) 179.1 582.57 T
1 10 Q
(The) 170.1 568.91 T
3 F
(for) 188.14 568.91 T
1 F
( command is similar to) 206.13 568.91 T
3 F
(while) 300.25 568.91 T
1 F
( except that it provides more explicit loop) 330.23 568.91 T
(control. The program to reverse the elements of a list can be rewritten using) 152.1 556.82 T
3 F
(for) 457.7 556.82 T
1 F
( as fol-) 475.69 556.82 T
(lows:) 152.1 544.73 T
3 9 Q
(set b "") 179.1 530.4 T
(for {set i [expr [llength $a]-1]} {$i >= 0} {incr i -1} {) 179.1 520.31 T
(lappend b [lindex $a $i]) 200.63 510.23 T
(}) 179.1 500.14 T
1 10 Q
-0.02 (The \336rst ar) 152.1 486.48 P
-0.02 (gument to) 195.73 486.48 P
3 F
-0.06 (for) 238.44 486.48 P
1 F
-0.02 ( is an initialization script, the second is an expression that deter-) 256.43 486.48 P
(mines when to terminate the loop, the third is a reinitialization script, which is evaluated) 152.1 474.39 T
-0.04 (after each execution of the loop body before evaluating the test again, and the fourth ar) 152.1 462.3 P
-0.04 (gu-) 498.78 462.3 P
(ment is a script that forms the body of the loop.) 152.1 450.22 T
3 F
(For) 344.2 450.22 T
1 F
( executes its \336rst ar) 362.2 450.22 T
(gument \050the ini-) 439.18 450.22 T
(tialization script\051 as a T) 152.1 438.13 T
(cl command, then evaluates the expression. If the expression) 245.78 438.13 T
(evaluates to non-zero, then) 152.1 426.05 T
3 F
(for) 262.29 426.05 T
1 F
( executes the body followed by the reinitialization script) 280.28 426.05 T
(and re-evaluates the expression. It repeats this sequence over and over again until the) 152.1 413.96 T
(expression evaluates to zero. If the expression evaluates to zero on the \336rst test then nei-) 152.1 401.88 T
(ther the body script nor the reinitialization script is ever executed. Like) 152.1 389.79 T
3 F
(while) 438.28 389.79 T
1 F
(,) 468.27 389.79 T
3 F
(for) 473.26 389.79 T
1 F
(returns an empty string as result.) 152.1 377.7 T
3 F
(For) 170.1 365.7 T
1 F
( and) 188.09 365.7 T
3 F
(while) 207.52 365.7 T
1 F
( are equivalent in that anything you can write using one command) 237.5 365.7 T
(you can also write using the other command. However) 152.1 353.62 T
(,) 370.15 353.62 T
3 F
(for) 375.15 353.62 T
1 F
( has the advantage of placing) 393.14 353.62 T
-0.21 (all of the loop control information in one place where it is easy to see. T) 152.1 341.53 P
-0.21 (ypically the initial-) 436.44 341.53 P
(ization, test, and re-initialization ar) 152.1 329.45 T
(guments are used to select a set of elements to operate) 291.82 329.45 T
(on \050integer indices in the above example\051 and the body of the loop carries out the opera-) 152.1 317.36 T
(tions on the chosen elements. This clean separation between element selection and action) 152.1 305.28 T
(makes) 152.1 293.19 T
3 F
(for) 180.13 293.19 T
1 F
( loops easier to understand and debug. Of course, there are some situations) 198.12 293.19 T
-0.1 (where a clean separation between selection and action is not possible, and in these cases a) 152.1 281.11 P
3 F
(while) 152.1 269.02 T
1 F
( loop may make more sense.) 182.08 269.02 T
(The) 170.1 257.02 T
3 F
(foreach) 188.14 257.02 T
1 F
( command iterates over all of the elements of a list. For example, the) 230.12 257.02 T
(following script provides yet another implementation of list reversal:) 152.1 244.93 T
3 9 Q
(set b "";) 179.1 230.6 T
(foreach i $a {) 179.1 220.51 T
(set b [linsert $b 0 $i]) 200.63 210.43 T
(}) 179.1 200.34 T
3 10 Q
(Foreach) 152.1 186.68 T
1 F
( takes three ar) 194.08 186.68 T
(guments. The \336rst is the name of a variable, the second is a list,) 249.68 186.68 T
(and the third is a T) 152.1 174.59 T
(cl script that forms the body of the loop.) 226.63 174.59 T
3 F
(Foreach) 389.86 174.59 T
1 F
( will execute the) 431.84 174.59 T
(body script once for each element of the list, in order) 152.1 162.51 T
(. Before executing the body in each) 363.33 162.51 T
-0.34 (iteration,) 152.1 150.42 P
3 F
-0.82 (foreach) 190.07 150.42 P
1 F
-0.34 ( sets the variable to hold the next element of the list. Thus if variable) 232.04 150.42 P
3 F
-0.82 (a) 503.95 150.42 P
1 F
(has the value \322) 152.1 138.33 T
3 F
(f) 211.22 138.33 T
(irst second third) 217.21 138.33 T
1 F
(\323 in the above example, the body will be exe-) 319.16 138.33 T
FMENDPAGE
%%EndPage: "64" 73
%%Page: "65" 73
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(7.3 Loop control: break and continue) 98.1 668.33 T
4 F
(65) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
-0.32 (cuted three times. In the \336rst iteration) 152.1 632.33 P
3 F
-0.77 (i) 302.52 632.33 P
1 F
-0.32 ( will have the value) 308.52 632.33 P
3 F
-0.77 (f) 387.68 632.33 P
-0.77 (irst) 393.68 632.33 P
1 F
-0.32 (, in the second iteration) 417.66 632.33 P
-0.01 (it will have the value) 152.1 620.3 P
3 F
-0.03 (second) 238.37 620.3 P
1 F
-0.01 (, and in the third iteration it will have the value) 274.35 620.3 P
3 F
-0.03 (third) 464.65 620.3 P
1 F
-0.01 (. At) 494.63 620.3 P
-0.22 (the end of the loop, b will have the value \322) 152.1 608.27 P
3 F
-0.53 (third second f) 320.05 608.27 P
-0.53 (irst) 402.94 608.27 P
1 F
-0.22 (\323 and) 426.93 608.27 P
3 F
-0.53 (i) 450.36 608.27 P
1 F
-0.22 ( will have the) 456.35 608.27 P
-0.41 (value \322) 152.1 596.23 P
3 F
-0.99 (third) 180.27 596.23 P
1 F
-0.41 (\323. As with the other looping commands,) 210.26 596.23 P
3 F
-0.99 (foreach) 369.76 596.23 P
1 F
-0.41 ( always returns an empty) 411.74 596.23 P
(string.) 152.1 584.2 T
98.1 540.84 512.1 543.87 C
152.1 542.07 512.1 542.07 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 542.36 143.1 542.36 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(7.3) 124.63 547.87 T
(Loop control: break and continue) 152.1 547.87 T
1 10 Q
(T) 152.1 524.18 T
(cl provides two commands that can be used to abort part or all of a looping command:) 157.51 524.18 T
3 F
(break) 152.1 512.15 T
1 F
( and) 182.08 512.15 T
3 F
(continue) 201.51 512.15 T
1 F
(. These commands have the same behavior as the corresponding) 249.49 512.15 T
-0.29 (statements in C. Neither takes any ar) 152.1 500.11 P
-0.29 (guments. The) 297.03 500.11 P
3 F
-0.69 (break) 353.37 500.11 P
1 F
-0.29 ( command causes the innermost) 383.35 500.11 P
(enclosing looping command to terminate immediately) 152.1 488.08 T
(. For example, suppose that in the) 367.71 488.08 T
(list reversal example above it is desired to stop as soon as an element equal to) 152.1 476.05 T
3 F
(ZZZ) 465.22 476.05 T
1 F
( is) 483.21 476.05 T
(found in the source list. In other words, the result list should consist of a reversal of only) 152.1 464.01 T
-0.04 (those source elements up to \050but not including\051 a) 152.1 451.98 P
3 F
-0.09 (ZZZ) 349.15 451.98 P
1 F
-0.04 ( element. This can be accomplished) 367.14 451.98 P
(with) 152.1 439.95 T
3 F
(break) 172.37 439.95 T
1 F
( as follows:) 202.35 439.95 T
3 9 Q
(set b "";) 179.1 425.61 T
(foreach i $a {) 179.1 415.58 T
(if {$i == "ZZZ"} break) 200.63 405.55 T
(set b [linsert $b 0 $i]) 200.63 395.52 T
(}) 179.1 385.48 T
1 10 Q
(The) 170.1 371.82 T
3 F
(continue) 188.14 371.82 T
1 F
( command causes only the current iteration of the innermost loop to) 236.11 371.82 T
-0.12 (be terminated; the loop continues with its next iteration. In the case of) 152.1 359.78 P
3 F
-0.3 (while) 432.52 359.78 P
1 F
-0.12 (, this means) 462.5 359.78 P
(skipping out of the body and re-evaluating the expression that determines when the loop) 152.1 347.75 T
(terminates; in) 152.1 335.72 T
3 F
(for) 209.29 335.72 T
1 F
( loops, the re-initialization script is executed before re-evaluating the) 227.28 335.72 T
(termination condition. For example, the following program is another variant of the list) 152.1 323.69 T
(reversal example, where) 152.1 311.65 T
3 F
(ZZZ) 252.01 311.65 T
1 F
( elements are simply skipped without copying them to the) 269.99 311.65 T
(result list:) 152.1 299.62 T
3 9 Q
(set b "";) 179.1 285.29 T
(foreach i $a {) 179.1 275.25 T
(if {$i == "ZZZ"} continue) 200.63 265.22 T
(set b [linsert $b 0 $i]) 200.63 255.19 T
(}) 179.1 245.16 T
98.1 203.13 512.1 206.16 C
152.1 204.35 512.1 204.35 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 204.64 143.1 204.64 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(7.4) 124.63 210.16 T
(The switch command) 152.1 210.16 T
1 10 Q
-0.34 (The) 170.1 186.47 P
3 F
-0.82 (switch) 187.8 186.47 P
1 F
-0.34 ( command tests a value against a number of patterns and executes one of) 223.78 186.47 P
(several T) 152.1 174.43 T
(cl scripts depending on which pattern matched. The same ef) 188.31 174.43 T
(fect as) 427.95 174.43 T
3 F
(switch) 456.25 174.43 T
1 F
( can) 492.23 174.43 T
-0.18 (be achieved with an) 152.1 162.4 P
3 F
-0.42 (if) 233.55 162.4 P
1 F
-0.18 ( command that has lots of) 245.54 162.4 P
3 F
-0.42 (elseif) 349.97 162.4 P
1 F
-0.18 ( clauses, but) 385.95 162.4 P
3 F
-0.42 (switch) 437.05 162.4 P
1 F
-0.18 ( provides) 473.04 162.4 P
-0 (a more compact encoding. T) 152.1 150.37 P
-0 (cl\325) 265.47 150.37 P
-0 (s) 275.46 150.37 P
3 F
-0.01 (switch) 281.85 150.37 P
1 F
-0 ( command has two forms; here is an example of) 317.83 150.37 P
(the \336rst form:) 152.1 138.33 T
FMENDPAGE
%%EndPage: "65" 74
%%Page: "66" 74
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(66) 98.1 668.33 T
5 F
(Control Flow) 456.01 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 9 Q
0 X
(switch $x {a {incr t1} b {incr t2} c {incr t3}}) 179.1 633 T
1 10 Q
(The \336rst ar) 152.1 619.33 T
(gument to) 195.78 619.33 T
3 F
(switch) 238.53 619.33 T
1 F
( is the value to be tested \050the contents of variable) 274.51 619.33 T
3 F
(x) 472.42 619.33 T
1 F
( in the) 478.42 619.33 T
-0.39 (example\051. The second ar) 152.1 607.33 P
-0.39 (gument is a list containing one or more pairs of elements. The \336rst) 249 607.33 P
(ar) 152.1 595.33 T
(gument in each pair is a pattern to compare against the value, and the second is a script) 159.69 595.33 T
(to execute if the pattern matches. The) 152.1 583.33 T
3 F
(switch) 304.76 583.33 T
1 F
( command steps through these pairs in) 340.74 583.33 T
(order) 152.1 571.33 T
(, comparing the pattern against the value. As soon as it \336nds a match it executes the) 172.79 571.33 T
-0 (corresponding script and returns the value of that script as its value. If no pattern matches) 152.1 559.33 P
(then no script is executed and) 152.1 547.33 T
3 F
(switch) 273.12 547.33 T
1 F
( returns an empty string. This particular command) 309.1 547.33 T
-0.01 (increments variable) 152.1 535.33 P
3 F
-0.03 (t1) 233.12 535.33 P
1 F
-0.01 ( if) 245.11 535.33 P
3 F
-0.03 (x) 256.19 535.33 P
1 F
-0.01 ( has the value a,) 262.19 535.33 P
3 F
-0.03 (t2) 328.73 535.33 P
1 F
-0.01 ( if) 340.73 535.33 P
3 F
-0.03 (x) 351.8 535.33 P
1 F
-0.01 ( has the value) 357.8 535.33 P
3 F
-0.03 (b) 414.93 535.33 P
1 F
-0.01 (,) 420.92 535.33 P
3 F
-0.03 (t3) 425.91 535.33 P
1 F
-0.01 ( if) 437.9 535.33 P
3 F
-0.03 (x) 448.98 535.33 P
1 F
-0.01 ( has the value) 454.97 535.33 P
3 F
(c) 152.1 523.33 T
1 F
(, and does nothing otherwise.) 158.1 523.33 T
(The second form spreads the patterns and scripts out into separate ar) 170.1 511.33 T
(guments rather) 443.32 511.33 T
(than combining them all into one list:) 152.1 499.33 T
3 9 Q
(switch $x a {incr t1} b {incr t2} c {incr t3}) 179.1 485 T
1 10 Q
(This form has the advantage that you can invoke substitutions on the pattern ar) 152.1 471.33 T
(guments) 466.99 471.33 T
(more easily) 152.1 459.33 T
(, but most people prefer the \336rst form because you can easily spread the pat-) 197.8 459.33 T
(terns and scripts across multiple lines like this:) 152.1 447.33 T
3 9 Q
(switch $x {) 179.1 433 T
(a {incr t1}) 200.63 423 T
(b {incr t2}) 200.63 413 T
(c {incr t3}) 200.63 403 T
(}) 179.1 393 T
1 10 Q
(The outer braces keep the newlines from being treated as command separators. W) 152.1 379.33 T
(ith the) 478.93 379.33 T
(second form you would have to use backslash-newlines like this:) 152.1 367.33 T
3 9 Q
(switch $x \134) 179.1 353 T
(a {incr t1} \134) 200.63 343 T
(b {incr t2} \134) 200.63 333 T
(c {incr t3} \134) 200.63 323 T
(}) 179.1 313 T
1 10 Q
(The) 170.1 299.33 T
3 F
(switch) 188.14 299.33 T
1 F
( command supports three forms of pattern matching. Y) 224.12 299.33 T
(ou can precede) 442.69 299.33 T
(the value to test with a switch that selects the form you want:) 152.1 287.33 T
3 F
(-exact) 398.88 287.33 T
1 F
( selects exact com-) 434.86 287.33 T
(parison,) 152.1 275.33 T
3 F
(-glob) 186.52 275.33 T
1 F
( selects pattern matching as in the) 216.51 275.33 T
3 F
(string match) 353.91 275.33 T
1 F
( command \050see Sec-) 425.87 275.33 T
(tion 10.1 for details\051 and) 152.1 263.33 T
3 F
(-regexp) 253.14 263.33 T
1 F
( selects regular) 295.12 263.33 T
(-expression matching as described in) 354.87 263.33 T
(Section 10.2. The default is) 152.1 251.33 T
3 F
(-glob) 264.53 251.33 T
1 F
(.) 294.51 251.33 T
(If the last pattern in a) 170.1 239.33 T
3 F
(switch) 257.81 239.33 T
1 F
( command is) 293.79 239.33 T
3 F
(default) 347.37 239.33 T
1 F
( then it matches any value. Its) 389.35 239.33 T
(script will thus be executed if no other patterns match. For example, the script below will) 152.1 227.33 T
-0.13 (examine a list and produce three counters. The \336rst,) 152.1 215.33 P
3 F
-0.3 (t1) 360.53 215.33 P
1 F
-0.13 (, counts the number of elements in) 372.52 215.33 P
-0.32 (the list that contain an) 152.1 203.33 P
3 F
-0.78 (a) 241.25 203.33 P
1 F
-0.32 (. The second,) 247.25 203.33 P
3 F
-0.78 (t2) 302.06 203.33 P
1 F
-0.32 (, counts the number of elements that are unsigned) 314.06 203.33 P
(decimal integers. The third,) 152.1 191.33 T
3 F
(t3) 264.8 191.33 T
1 F
(, counts all of the other elements:) 276.79 191.33 T
FMENDPAGE
%%EndPage: "66" 75
%%Page: "67" 75
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(7.5 Eval) 98.1 668.33 T
4 F
(67) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 9 Q
0 X
(set t1 0) 179.1 633 T
(set t2 0) 179.1 623 T
(set t3 0) 179.1 613 T
(foreach i $x {) 179.1 603 T
(switch -regexp $i in {) 200.63 593 T
(a) 222.23 583 T
({incr t1}) 286.81 583 T
(^[0-9]*$) 222.23 573 T
({incr t2}) 286.81 573 T
(default) 222.23 563 T
({incr t3}) 286.81 563 T
(}) 200.63 553 T
(}) 179.1 543 T
1 10 Q
(If a script in a) 170.1 529.33 T
3 F
(switch) 228.11 529.33 T
1 F
( command is \322) 264.09 529.33 T
3 F
(-) 322.11 529.33 T
1 F
(\323 then) 328.1 529.33 T
3 F
(switch) 354.75 529.33 T
1 F
( uses the script for the next) 390.73 529.33 T
-0.3 (pattern instead. This makes it easy to have several patterns that all execute the same script,) 152.1 517.33 P
(as in the following example:) 152.1 505.33 T
3 9 Q
(switch $x {) 179.1 491 T
(a -) 200.63 481 T
(b -) 200.63 471 T
(c {incr t1}) 200.63 461 T
(d {incr t2}) 200.63 451 T
(}) 179.1 441 T
1 10 Q
(This script increments variable) 152.1 427.33 T
3 F
(t1) 278.12 427.33 T
1 F
( if) 290.11 427.33 T
3 F
(x) 301.22 427.33 T
1 F
( is) 307.21 427.33 T
3 F
(a) 318.88 427.33 T
1 F
(,) 324.88 427.33 T
3 F
(b) 329.87 427.33 T
1 F
(, or) 335.87 427.33 T
3 F
(c) 351.69 427.33 T
1 F
( and it increments) 357.69 427.33 T
3 F
(t2) 431.53 427.33 T
1 F
( if) 443.52 427.33 T
3 F
(x) 454.62 427.33 T
1 F
( is) 460.62 427.33 T
3 F
(d) 472.28 427.33 T
1 F
(.) 478.28 427.33 T
98.1 383.98 512.1 387 C
152.1 385.2 512.1 385.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 385.49 143.1 385.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(7.5) 124.63 391 T
(Eval) 152.1 391 T
3 10 Q
-0.66 (Eval) 152.1 367.31 P
1 F
-0.28 ( is a general-purpose building block for creating and executing T) 176.09 367.31 P
-0.28 (cl scripts. It accepts) 431.88 367.31 P
-0.24 (any number of ar) 152.1 355.31 P
-0.24 (guments, concatenates them together with separator spaces, and then exe-) 219.76 355.31 P
-0.13 (cutes the result as a T) 152.1 343.31 P
-0.13 (cl script. One use of) 237.07 343.31 P
3 F
-0.31 (eval) 319.14 343.31 P
1 F
-0.13 ( is for generating commands, saving them) 343.12 343.31 P
(in variables, and then later evaluating the variables as T) 152.1 331.31 T
(cl scripts. For example, the script) 374.01 331.31 T
3 9 Q
(set cmd "set a 0") 179.1 316.98 T
1 10 Q
(...) 179.1 306.98 T
3 9 Q
(eval $cmd) 179.1 296.98 T
1 10 Q
(clears variable) 152.1 283.31 T
3 F
(a) 212.6 283.31 T
1 F
( to) 218.59 283.31 T
3 F
(0) 231.37 283.31 T
1 F
( when the) 237.36 283.31 T
3 F
(eval) 278.72 283.31 T
1 F
( command is invoked.) 302.71 283.31 T
-0.12 (Perhaps the most important use for) 170.1 271.31 P
3 F
-0.28 (eval) 311.52 271.31 P
1 F
-0.12 ( is to force another level of parsing. The T) 335.51 271.31 P
-0.12 (cl) 502.5 271.31 P
(parser performs only level of parsing and substitution when parsing a command; the) 152.1 259.31 T
(results of one substitution are not reparsed for other substitutions. However) 152.1 247.31 T
(, there are) 452.89 247.31 T
(occasionally times when another level of parsing is desirable, and) 152.1 235.31 T
3 F
(eval) 417.18 235.31 T
1 F
( provides the) 441.17 235.31 T
(mechanism to achieve this. For example, suppose that a variable) 152.1 223.31 T
3 F
(vars) 411.92 223.31 T
1 F
( contains a list of) 435.9 223.31 T
(variables and that you wish to unset each of these variables. One solution is to use the fol-) 152.1 211.31 T
(lowing script:) 152.1 199.31 T
3 9 Q
(foreach i $vars {) 179.1 184.98 T
(unset $i) 200.63 174.98 T
(}) 179.1 164.98 T
FMENDPAGE
%%EndPage: "67" 76
%%Page: "68" 76
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(68) 98.1 668.33 T
5 F
(Control Flow) 456.01 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(This script will work just \336ne, but the) 152.1 632.33 T
3 F
(unset) 305.08 632.33 T
1 F
( command takes any number of ar) 335.06 632.33 T
(guments) 470.89 632.33 T
-0.18 (so it should be possible to unset all of the variables with a single command. Unfortunately) 152.1 620.33 P
(the following script will not work:) 152.1 608.33 T
3 9 Q
(unset $vars) 179.1 594 T
1 10 Q
-0.14 (The problem with this script is that all of the variable names are passed to) 152.1 580.33 P
3 F
-0.34 (unset) 447.29 580.33 P
1 F
-0.14 ( as a sin-) 477.27 580.33 P
(gle ar) 152.1 568.33 T
(gument, rather than using a separate ar) 174.4 568.33 T
(gument for each name. The solution is to use) 328.81 568.33 T
3 F
(eval) 152.1 556.33 T
1 F
(, as with the following command:) 176.09 556.33 T
3 9 Q
(eval unset $vars) 179.1 542 T
3 10 Q
(Eval) 152.1 528.33 T
1 F
( generates a string consisting of \322) 176.09 528.33 T
3 F
(unset) 309.32 528.33 T
1 F
( \323 followed by the list of variable names) 339.31 528.33 T
(and then passes the string to T) 152.1 516.33 T
(cl for evaluation. The string gets re-parsed so each variable) 272.43 516.33 T
(name ends up in a dif) 152.1 504.33 T
(ferent ar) 237.69 504.33 T
(gument to) 271.08 504.33 T
3 F
(unset) 313.84 504.33 T
1 F
(.) 343.83 504.33 T
2 F
(Note:) 119.09 489.33 T
(This appr) 152.1 489.33 T
(oach works even if some of the variable names contain spaces or special) 190.33 489.33 T
(characters such as) 152.1 479.33 T
7 F
($) 229.55 479.33 T
2 F
(. As described in Section 6.7, the only safe way to generate T) 235.54 479.33 T
(cl) 478.08 479.33 T
(commands is using list operations such as) 152.1 469.33 T
7 F
(list) 322.85 469.33 T
2 F
( and) 346.83 469.33 T
7 F
(concat) 366.82 469.33 T
2 F
(. The command \322) 402.8 469.33 T
7 F
(eval) 472.2 469.33 T
-0.56 (unset $vars) 152.1 459.33 P
2 F
-0.23 (\323 is identical to the command \322) 217.5 459.33 P
7 F
-0.56 (eval [concat unset $vars]) 342.69 459.33 P
2 F
-0.23 (\323; in) 490.91 459.33 P
(either case the script evaluated by) 152.1 449.33 T
7 F
(eval) 291.44 449.33 T
2 F
( is a pr) 315.43 449.33 T
(oper list whose \336rst element is \322) 343.11 449.33 T
7 F
(unset) 472.48 449.33 T
2 F
(\323) 502.47 449.33 T
(and whose other elements ar) 152.1 439.33 T
(e the elements of) 266.66 439.33 T
7 F
(vars) 336.05 439.33 T
2 F
(.) 360.04 439.33 T
98.1 397.98 512.1 401 C
152.1 399.2 512.1 399.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 399.49 143.1 399.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(7.6) 124.63 405 T
(Executing from \336les: source) 152.1 405 T
1 10 Q
(The) 152.1 381.31 T
3 F
(source) 170.14 381.31 T
1 F
( command is similar to the command by the same name in the) 206.12 381.31 T
3 F
(csh) 456.24 381.31 T
1 F
( shell: it) 474.23 381.31 T
(reads a \336le and executes the contents of the \336le as a T) 152.1 369.31 T
(cl script. It takes a single ar) 366.23 369.31 T
(gument) 475.69 369.31 T
(that contains the name of the \336le. For example, the command) 152.1 357.31 T
3 9 Q
(source init.tcl) 179.1 342.98 T
1 10 Q
(will execute the contents of the \336le) 152.1 329.31 T
3 F
(init.tcl) 294.5 329.31 T
1 F
(. The return value from) 342.48 329.31 T
3 F
(source) 437.95 329.31 T
1 F
( will be) 473.93 329.31 T
(the value returned when the \336le contents are executed, which is the return value from the) 152.1 317.31 T
-0.32 (last command in the \336le. In addition,) 152.1 305.31 P
3 F
-0.77 (source) 299.5 305.31 P
1 F
-0.32 ( allows the) 335.48 305.31 P
3 F
-0.77 (return) 380.32 305.31 P
1 F
-0.32 ( command to be used in) 416.3 305.31 P
(the \336le\325) 152.1 293.31 T
(s script to terminate the processing of the \336le. See Section 8.1 for more informa-) 182.36 293.31 T
(tion on) 152.1 281.31 T
3 F
(return) 182.64 281.31 T
1 F
(.) 218.62 281.31 T
FMENDPAGE
%%EndPage: "68" 77
%%Page: "69" 77
612 792 0 FMBEGINPAGE
98.1 675 512.1 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
98.1 450 512.1 450 2 L
7 X
V
2 Z
0 X
N
98.1 108 512.1 126 R
7 X
V
4 10 Q
0 X
(69) 500.99 119.33 T
98.1 54 512.1 108 R
7 X
V
1 9 Q
0 X
(Copyright \251 1993 Addison-W) 152.1 102 T
(esley Publishing Company) 261.32 102 T
(, Inc.) 357.1 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 152.1 91 T
(. Any) 485.77 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 152.1 80 T
-0.34 (lisher) 152.1 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 171.58 69 P
(does not of) 152.1 58 T
(fer warranties in regard to this draft.) 191.88 58 T
0 24 Q
(Chapter 8) 152.1 605 T
-0.48 (Pr) 152.1 575 S
-0.48 (ocedur) 176.02 575 S
-0.48 (es) 243.32 575 S
98.1 135 512.1 423 R
7 X
V
1 10 Q
0 X
(A T) 152.1 416.33 T
(cl procedure is a command that is implemented with a T) 167.22 416.33 T
(cl script rather than C code.) 391.37 416.33 T
(Y) 152.1 404.33 T
(ou can de\336ne new procedures at any time with the) 158.32 404.33 T
3 F
(proc) 361.49 404.33 T
1 F
( command described in this) 385.48 404.33 T
-0 (chapter) 152.1 392.33 P
-0 (. Procedures make it easy for you to package up solutions to problems so that they) 180.96 392.33 P
(can be re-used easily) 152.1 380.33 T
(. Procedures also provide a simple way for you to prototype new fea-) 234.98 380.33 T
-0.24 (tures in an application: once you\325ve tested the procedures, you can reimplement them in C) 152.1 368.33 P
(for higher performance; the C implementations will appear just like the original proce-) 152.1 356.33 T
(dures so none of the scripts that invoke them will have to change.) 152.1 344.33 T
-0.31 (T) 170.1 332.33 P
-0.31 (cl provides special commands for dealing with variable scopes. Among other things,) 175.51 332.33 P
(these commands allow you to pass ar) 152.1 320.33 T
(guments by reference instead of by value and to) 300.71 320.33 T
(implement new T) 152.1 308.33 T
(cl control structures as procedures. T) 221.91 308.33 T
(able 8.1 summarizes the T) 368.87 308.33 T
(cl com-) 473.37 308.33 T
(mands related to procedures.) 152.1 296.33 T
98.1 252.98 512.1 256 C
152.1 254.2 512.1 254.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 254.49 143.1 254.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(8.1) 124.63 260 T
(Procedure basics: proc and return) 152.1 260 T
1 10 Q
(Procedures are created with the) 152.1 236.31 T
3 F
(proc) 280.04 236.31 T
1 F
( command, as in the following example:) 304.03 236.31 T
3 9 Q
(proc plus {a b} {expr $a+$b}) 179.1 221.98 T
1 10 Q
-0.05 (The \336rst ar) 152.1 208.31 P
-0.05 (gument to) 195.68 208.31 P
3 F
-0.12 (proc) 238.33 208.31 P
1 F
-0.05 ( is the name of the procedure to be created,) 262.32 208.31 P
3 F
-0.12 (plus) 436.4 208.31 P
1 F
-0.05 ( in this case.) 460.39 208.31 P
(The second ar) 152.1 196.31 T
(gument is a list of names of ar) 207.98 196.31 T
(guments to the procedure \050) 328.55 196.31 T
3 F
(a) 438.19 196.31 T
1 F
( and) 444.19 196.31 T
3 F
(b) 463.62 196.31 T
1 F
( in the) 469.61 196.31 T
(example\051. The third ar) 152.1 184.31 T
(gument to) 241.29 184.31 T
3 F
(proc) 284.05 184.31 T
1 F
( is a T) 308.03 184.31 T
(cl script that forms the body of the new pro-) 332.04 184.31 T
(cedure.) 152.1 172.31 T
3 F
(Proc) 183.73 172.31 T
1 F
( creates a new command and arranges that whenever the command is) 207.72 172.31 T
(invoked the procedure\325) 152.1 160.31 T
(s body will be evaluated. In this case the new command will have) 244.25 160.31 T
(the name) 152.1 148.31 T
3 F
(plus) 190.96 148.31 T
1 F
(; whenever) 214.95 148.31 T
3 F
(plus) 261.57 148.31 T
1 F
( is invoked it must receive two ar) 285.56 148.31 T
(guments. While the) 418.34 148.31 T
44.1 351 89.1 423 C
53.1 360 215.1 414 R
7 X
0 K
V
0 9 Q
0 X
(FIGURE  8) 53.1 408 T
(T) 53.1 387 T
(ABLE  8) 58.43 387 T
44.1 351 143.1 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "69" 78
%%Page: "70" 78
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(70) 98.1 668.33 T
5 F
(Procedures) 461 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
-0.13 (body of) 152.1 290.33 P
3 F
-0.32 (plus) 185.15 290.33 P
1 F
-0.13 ( is executing the variables) 209.13 290.33 P
3 F
-0.32 (a) 314.79 290.33 P
1 F
-0.13 ( and) 320.78 290.33 P
3 F
-0.32 (b) 339.95 290.33 P
1 F
-0.13 ( will contain the values of the ar) 345.95 290.33 P
-0.13 (guments.) 473.36 290.33 P
(The return value from the) 152.1 278.34 T
3 F
(plus) 257.29 278.34 T
1 F
( command is the value returned by the last command in) 281.28 278.34 T
3 F
(plus) 152.1 266.34 T
1 F
(\325) 176.09 266.34 T
(s body) 178.87 266.34 T
(. Here are some correct and incorrect invocations of) 204.59 266.34 T
3 F
(plus) 414.41 266.34 T
1 F
(:) 438.39 266.34 T
3 9 Q
(plus 3 4) 179.1 252 T
6 F
(\336) 162.9 239 T
7 F
(7) 179.1 239 T
3 F
(plus 3 -1) 179.1 226 T
6 F
(\336) 162.9 213 T
7 F
(2) 179.1 213 T
3 F
(plus 1) 179.1 200 T
6 F
(\306) 162.9 187 T
7 F
(no value given for parameter "b" to "plus") 179.1 187 T
1 10 Q
-0.08 (If you wish for a procedure to return early without executing its entire script, you can) 170.1 173.34 P
(invoke the) 152.1 161.34 T
3 F
(return) 196.52 161.34 T
1 F
( command: it causes the enclosing procedure to return immediately) 232.5 161.34 T
98.1 297 512.1 639 C
98.1 329.63 512.1 344.03 C
98.1 329.63 512.1 344.03 R
7 X
0 K
V
152.1 337.55 512.1 337.55 2 L
V
0.5 H
2 Z
0 X
N
98.1 297 512.1 639 C
98.1 306.23 512.1 320.63 C
98.1 306.23 512.1 320.63 R
7 X
0 K
V
152.1 314.15 512.1 314.15 2 L
V
0.5 H
2 Z
0 X
N
98.1 297 512.1 639 C
0 9 Q
0 X
0 K
(T) 152.1 323.63 T
(able  8.1.) 157.27 323.63 T
1 F
(A summary of the T) 195.72 323.63 T
(cl commands related to procedures and variable scoping.) 267.98 323.63 T
3 F
(global) 158.1 624.03 T
7 F
(name1) 195.85 624.03 T
1 F
(?) 228.2 624.03 T
7 F
(name2) 232.19 624.03 T
1 F
(...?) 264.55 624.03 T
(Binds variable names) 230.1 615.03 T
7 F
(name1) 309.73 615.03 T
1 F
(,) 336.69 615.03 T
7 F
(name2) 341.18 615.03 T
1 F
(, etc. to global variables. References) 368.15 615.03 T
(to these names will refer to global variables instead of local variables for) 230.1 606.03 T
(the duration of the current procedure. Returns an empty string.) 230.1 597.03 T
3 F
(proc) 158.1 578.03 T
7 F
(name) 185.06 578.03 T
(argList) 212.02 578.03 T
(body) 255.16 578.03 T
1 F
(De\336nes a procedure whose name is) 230.1 569.03 T
7 F
(name) 359.38 569.03 T
1 F
(, replacing any existing command) 380.95 569.03 T
(by that name.) 230.1 560.03 T
7 F
(ArgList) 281.02 560.03 T
1 F
( is a list with one element for each of the) 318.77 560.03 T
(procedure\325) 230.1 551.03 T
(s ar) 268.53 551.03 T
(guments, and) 281.09 551.03 T
7 F
(body) 331.27 551.03 T
1 F
( contains a T) 352.84 551.03 T
(cl script that is the) 398.39 551.03 T
(procedure\325) 230.1 542.03 T
(s body) 268.53 542.03 T
(. Returns an empty string.) 291.66 542.03 T
3 F
(return) 158.1 523.03 T
1 F
(?) 195.85 523.03 T
7 F
(options) 199.84 523.03 T
1 F
(? ?) 237.58 523.03 T
7 F
(value) 247.81 523.03 T
1 F
(?) 274.77 523.03 T
(Returns from the innermost nested procedure or) 230.1 514.03 T
3 F
(source) 404.57 514.03 T
1 F
( command with) 436.93 514.03 T
7 F
(value) 230.1 505.03 T
1 F
( as the result of the procedure.) 257.06 505.03 T
7 F
(Value) 367.88 505.03 T
1 F
( defaults to an empty string.) 394.84 505.03 T
(Additional options may be used to trigger an exceptional return \050see) 230.1 496.03 T
(Section 9.4\051.) 230.1 487.03 T
3 F
(uplevel) 158.1 468.03 T
1 F
(?) 201.24 468.03 T
7 F
(level) 205.23 468.03 T
1 F
(?) 232.19 468.03 T
7 F
( arg) 236.18 468.03 T
1 F
(?) 263.14 468.03 T
7 F
(arg arg) 267.14 468.03 T
1 F
(...?) 310.27 468.03 T
(Concatenates all of the) 230.1 459.03 T
7 F
(arg) 314.46 459.03 T
1 F
(\325) 330.64 459.03 T
(s with spaces as separators, then executes the) 333.14 459.03 T
(resulting T) 230.1 450.03 T
(cl script in the variable context of stack level) 268.66 450.03 T
7 F
(level) 432.15 450.03 T
1 F
( .) 459.12 450.03 T
7 F
(Level) 465.86 450.03 T
1 F
(consists of a number or a number preceded by) 230.1 441.03 T
3 F
(#) 398.07 441.03 T
1 F
(, and defaults to) 403.47 441.03 T
3 F
(-1) 463.12 441.03 T
1 F
(.) 473.91 441.03 T
(Returns the result of the script.) 230.1 432.03 T
3 F
(upvar) 158.1 413.03 T
1 F
(?) 190.45 413.03 T
7 F
(level) 194.44 413.03 T
1 F
(?) 221.41 413.03 T
7 F
( otherVar1 myVar1) 225.4 413.03 T
1 F
(?) 322.46 413.03 T
7 F
(otherVar2 myVar2) 326.45 413.03 T
1 F
(...?) 418.12 413.03 T
(Binds the local variable name) 230.1 404.03 T
7 F
(myVar1) 339.18 404.03 T
1 F
( to the variable at stack level) 371.53 404.03 T
7 F
(level) 476.61 404.03 T
1 F
(whose name is) 230.1 395.03 T
7 F
(otherVar1) 285.26 395.03 T
1 F
(. For the duration of the current procedure,) 333.8 395.03 T
(variable references to) 230.1 386.03 T
7 F
(myVar1) 309.7 386.03 T
1 F
( will be directed to) 342.06 386.03 T
7 F
(otherVar1) 411.7 386.03 T
1 F
( instead.) 460.23 386.03 T
(Additional bindings may be speci\336ed with) 230.1 377.03 T
7 F
(otherVar2) 384.88 377.03 T
1 F
( and) 433.41 377.03 T
7 F
(myVar2) 450.88 377.03 T
1 F
(, etc.) 483.24 377.03 T
7 F
(Level) 230.1 368.03 T
1 F
( has the same syntax and meaning as for) 257.06 368.03 T
3 F
(uplevel) 404.08 368.03 T
1 F
( and defaults to) 441.83 368.03 T
3 F
(-) 499.24 368.03 T
(1) 230.1 359.03 T
1 F
(. Returns an empty string.) 235.49 359.03 T
152.1 635.78 152.1 352.28 2 L
V
0.5 H
0 Z
N
512.1 635.78 512.1 352.28 2 L
V
N
151.85 636.03 512.35 636.03 2 L
V
N
151.85 590.03 512.35 590.03 2 L
V
0.25 H
N
151.85 535.03 512.35 535.03 2 L
V
N
151.85 480.03 512.35 480.03 2 L
V
N
151.85 425.03 512.35 425.03 2 L
V
N
151.85 352.03 512.35 352.03 2 L
V
0.5 H
N
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "70" 79
%%Page: "71" 79
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(8.2 Local and global variables) 98.1 668.33 T
4 F
(71) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(and the ar) 152.1 632.33 T
(gument to) 191.33 632.33 T
3 F
(return) 234.09 632.33 T
1 F
( will be the result of the procedure. Here is an implementa-) 270.07 632.33 T
(tion of factorial that uses) 152.1 620.33 T
3 F
(return) 253.97 620.33 T
1 F
(:) 289.95 620.33 T
3 9 Q
(proc fac x {) 179.1 606 T
(if {$x <= 1} {) 200.63 596 T
(return 1) 222.23 586 T
(}) 200.63 576 T
(expr $x * [fac [expr $x-1]]) 200.63 566 T
(}) 179.1 556 T
(fac 4) 179.1 543 T
6 F
(\336) 162.9 530 T
7 F
(24) 179.1 530 T
3 F
(fac 0) 179.1 517 T
6 F
(\336) 162.9 504 T
7 F
(1) 179.1 504 T
1 10 Q
(If the ar) 152.1 490.33 T
(gument to) 183.55 490.33 T
3 F
(fac) 226.31 490.33 T
1 F
( is less than or equal to one then) 244.3 490.33 T
3 F
(fac) 375.05 490.33 T
1 F
( invokes) 393.04 490.33 T
3 F
(return) 429.13 490.33 T
1 F
( to return) 465.11 490.33 T
(immediately) 152.1 478.33 T
(. Otherwise it executes the) 201.42 478.33 T
3 F
(expr) 309.67 478.33 T
1 F
( command. The) 333.66 478.33 T
3 F
(expr) 398.61 478.33 T
1 F
( command is the last) 422.6 478.33 T
(one in the procedure\325) 152.1 466.33 T
(s body) 236.75 466.33 T
(, so its result is returned as the result of the procedure.) 262.48 466.33 T
98.1 422.98 512.1 426 C
152.1 424.2 512.1 424.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 424.49 143.1 424.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(8.2) 124.63 430 T
(Local and global variables) 152.1 430 T
1 10 Q
(When the body of a T) 152.1 406.31 T
(cl procedure is evaluated it uses a dif) 238.83 406.31 T
(ferent set of variables from its) 386.59 406.31 T
-0.06 (caller) 152.1 394.31 P
-0.06 (. These variables are called) 173.75 394.31 P
2 F
-0.06 (local variables) 284.46 394.31 P
1 F
-0.06 (, since they are only accessible within the) 344.09 394.31 P
(procedure and are deleted when the procedure returns. V) 152.1 382.31 T
(ariables referenced outside any) 377.73 382.31 T
-0 (procedure are called) 152.1 370.31 P
2 F
-0 (global variables) 235.62 370.31 P
1 F
-0 (. It is possible to have a local variable with the same) 300.86 370.31 P
-0.05 (name as a global variable or a local variable in another active procedure, but these will be) 152.1 358.31 P
(dif) 152.1 346.31 T
(ferent variables: changes to one will not af) 163.02 346.31 T
(fect any of the others. If a procedure is) 332.99 346.31 T
(invoked recursively then each recursive invocation will have a distinct set of local vari-) 152.1 334.31 T
(ables.) 152.1 322.31 T
(The ar) 170.1 310.31 T
(guments to a procedure are just local variables whose values are set from the) 195.73 310.31 T
-0.34 (words of the command that invoked the procedure. When execution begins in a procedure,) 152.1 298.31 P
(the only local variables with values are those corresponding to ar) 152.1 286.31 T
(guments. Other local) 411.73 286.31 T
(variables are created automatically when they are set.) 152.1 274.31 T
(A procedure can reference global variables with the) 170.1 262.31 T
3 F
(global) 379.36 262.31 T
1 F
( command. For exam-) 415.33 262.31 T
(ple, the following command makes the global variables) 152.1 250.31 T
3 F
(x) 376.12 250.31 T
1 F
( and) 382.11 250.31 T
3 F
(y) 401.54 250.31 T
1 F
( accessible inside a proce-) 407.54 250.31 T
(dure:) 152.1 238.31 T
3 9 Q
(global x y) 179.1 223.98 T
1 10 Q
(The) 152.1 210.31 T
3 F
(global) 170.14 210.31 T
1 F
( command treats each of its ar) 206.12 210.31 T
(guments as the name of a global variable and) 325.84 210.31 T
-0.09 (sets up bindings so that references to those names within the procedure will be directed to) 152.1 198.31 P
-0.16 (global variables instead of local ones.) 152.1 186.31 P
3 F
-0.38 (Global) 304.08 186.31 P
1 F
-0.16 ( can be invoked at any time during a proce-) 340.07 186.31 P
(dure; once it has been invoked, the bindings will remain in ef) 152.1 174.31 T
(fect until the procedure) 396.76 174.31 T
(returns.) 152.1 162.31 T
FMENDPAGE
%%EndPage: "71" 80
%%Page: "72" 80
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(72) 98.1 668.33 T
5 F
(Procedures) 461 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(Note:) 119.09 632.33 T
(T) 152.1 632.33 T
(cl does not pr) 156.74 632.33 T
(ovide a form of variable equivalent to \322static\323 variables in C, which ar) 211.06 632.33 T
(e) 496.37 632.33 T
(limited in scope to a given pr) 152.1 621.99 T
(ocedur) 268.33 621.99 T
(e but have values that persist acr) 295.71 621.99 T
(oss calls to the) 427.48 621.99 T
(pr) 152.1 611.64 T
(ocedur) 160.62 611.64 T
(e. In T) 188 611.64 T
(cl you must use global variables for purposes like this. T) 212.9 611.64 T
(o avoid name) 438.24 611.64 T
(con\337icts with other such variables you should include the name of the pr) 152.1 601.3 T
(ocedur) 442.11 601.3 T
(e or the) 469.5 601.3 T
(name of its enclosing package in the variable name, for example) 152.1 590.95 T
(\322) 152.1 580.61 T
7 F
(Hypertext_numLinks) 157.66 580.61 T
2 F
(\323.) 265.6 580.61 T
98.1 539.25 512.1 542.27 C
152.1 540.47 512.1 540.47 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 540.76 143.1 540.76 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(8.3) 124.63 546.27 T
(Defaults and variable numbers of arguments) 152.1 546.27 T
1 10 Q
(In the examples so far) 152.1 522.58 T
(, the second ar) 239.96 522.58 T
(gument to) 297.51 522.58 T
3 F
(proc) 340.27 522.58 T
1 F
( \050which describes the ar) 364.25 522.58 T
(guments to) 458.99 522.58 T
(the procedure\051 has taken a simple form consisting of the names of the ar) 152.1 510.24 T
(guments. Three) 440.31 510.24 T
(additional features are available for specifying ar) 152.1 497.89 T
(guments. First, the ar) 347.86 497.89 T
(gument list may be) 432.36 497.89 T
(speci\336ed as an empty string. In this case the procedure takes no ar) 152.1 485.55 T
(guments. For example,) 415.89 485.55 T
(the following command de\336nes a procedure that prints out two global variables:) 152.1 473.2 T
3 9 Q
(proc printVars {} {) 179.1 458.87 T
(global a b) 200.63 448.52 T
(puts "a is $a, b is $b") 200.63 438.18 T
(}) 179.1 427.83 T
1 10 Q
(The second additional feature is that defaults may be speci\336ed for some or all of the) 170.1 414.17 T
-0.17 (ar) 152.1 401.82 P
-0.17 (guments. The ar) 159.69 401.82 P
-0.17 (gument list is actually a list of lists, with each sublist corresponding to a) 223.84 401.82 P
(single ar) 152.1 389.48 T
(gument. If a sublist has only a single element \050which has been the case up until) 186.06 389.48 T
(now\051 that element is the name of the ar) 152.1 377.13 T
(gument. If a sublist has two ar) 307.91 377.13 T
(guments, the \336rst is) 428.49 377.13 T
(the ar) 152.1 364.79 T
(gument\325) 174.4 364.79 T
(s name and the second is a default value for it. For example, here is a proce-) 207.16 364.79 T
(dure that increments a given value by a given amount, with the amount defaulting to 1:) 152.1 352.44 T
3 9 Q
(proc inc {value {increment 1}} {) 179.1 338.11 T
(expr $value+$increment) 200.63 327.76 T
(}) 179.1 317.42 T
1 10 Q
-0.2 (The \336rst element in the ar) 152.1 303.75 P
-0.2 (gument list,) 253.91 303.75 P
3 F
-0.48 (value) 303.21 303.75 P
1 F
-0.2 (, speci\336es a name with no default value. The) 333.19 303.75 P
(second element speci\336es an ar) 152.1 291.4 T
(gument with name) 272.93 291.4 T
3 F
(increment) 349.83 291.4 T
1 F
( and a default value of) 403.8 291.4 T
3 F
(1) 495.39 291.4 T
1 F
(.) 501.39 291.4 T
(This means that) 152.1 279.06 T
3 F
(inc) 217.89 279.06 T
1 F
( can be invoked with either one or two ar) 235.88 279.06 T
(guments:) 399.74 279.06 T
3 9 Q
(inc 42 3) 179.1 264.73 T
6 F
(\336) 162.9 251.73 T
7 F
(45) 179.1 251.73 T
3 F
(inc 42) 179.1 238.73 T
6 F
(\336) 162.9 225.73 T
7 F
(43) 179.1 225.73 T
1 10 Q
-0.2 (If a default isn\325) 152.1 212.06 P
-0.2 (t speci\336ed for an ar) 212.65 212.06 P
-0.2 (gument in the) 288.83 212.06 P
3 F
-0.48 (proc) 345.7 212.06 P
1 F
-0.2 ( command then that ar) 369.68 212.06 P
-0.2 (gument must) 458.08 212.06 P
(be supplied whenever the procedure is invoked. The defaulted ar) 152.1 199.71 T
(guments, if any) 410.6 199.71 T
(, must be) 471.85 199.71 T
-0.15 (the last ar) 152.1 187.37 P
-0.15 (guments for the procedure: if a particular ar) 190.48 187.37 P
-0.15 (gument is defaulted then all the ar) 363.83 187.37 P
-0.15 (gu-) 498.78 187.37 P
(ments after it must also be defaulted.) 152.1 175.02 T
(The third special feature in ar) 170.1 163.02 T
(gument lists is support for variable numbers of ar) 287.88 163.02 T
(gu-) 484.79 163.02 T
(ments. If the last ar) 152.1 150.68 T
(gument in the ar) 228.81 150.68 T
(gument list is the special value) 293.86 150.68 T
3 F
(args) 419.34 150.68 T
1 F
(, then the proce-) 443.33 150.68 T
(dure may be called with varying numbers of ar) 152.1 138.33 T
(guments. Ar) 339 138.33 T
(guments before) 388.23 138.33 T
3 F
(args) 452.62 138.33 T
1 F
( in the) 476.61 138.33 T
FMENDPAGE
%%EndPage: "72" 81
%%Page: "73" 81
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(8.4 Call by reference: upvar) 98.1 668.33 T
4 F
(73) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
-0.01 (ar) 152.1 632.33 P
-0.01 (gument list are handled as before, but any number of additional ar) 159.69 632.33 P
-0.01 (guments may be spec-) 423.04 632.33 P
(i\336ed. The procedure\325) 152.1 619.99 T
(s local variable) 235.64 619.99 T
3 F
(args) 298.65 619.99 T
1 F
( will be set to a list whose elements are all of) 322.64 619.99 T
(the extra ar) 152.1 607.65 T
(guments. If there are no extra ar) 196.88 607.65 T
(guments then) 324.64 607.65 T
3 F
(args) 380.71 607.65 T
1 F
( will be set to an empty) 404.7 607.65 T
(string. For example, the following procedure takes any number of ar) 152.1 595.3 T
(guments and returns) 425.05 595.3 T
(their sum:) 152.1 582.96 T
3 9 Q
(proc sum args {) 179.1 568.62 T
(set s 0) 200.63 558.28 T
(foreach i $args {) 200.63 547.94 T
(incr s $i) 222.23 537.59 T
(}) 200.63 527.25 T
(return $s) 200.63 516.9 T
(}) 179.1 506.56 T
(sum 1 2 3 4 5) 179.1 496.22 T
6 F
(\336) 162.9 483.22 T
7 F
(15) 179.1 483.22 T
3 F
(sum) 179.1 470.22 T
6 F
(\336) 162.9 457.22 T
7 F
(0) 179.1 457.22 T
1 10 Q
(If a procedure\325) 152.1 443.55 T
(s ar) 210.93 443.55 T
(gument list contains additional ar) 224.9 443.55 T
(guments before) 357.98 443.55 T
3 F
(args) 422.37 443.55 T
1 F
( then they may) 446.36 443.55 T
(be defaulted as described above. Of course, if this happens there will be no extra ar) 152.1 431.2 T
(gu-) 484.15 431.2 T
(ments so) 152.1 418.86 T
3 F
(args) 189.86 418.86 T
1 F
( will be set to an empty string. No default value may be speci\336ed for) 213.85 418.86 T
3 F
(args) 152.1 406.52 T
1 F
(: the empty string is its default.) 176.09 406.52 T
98.1 363.16 512.1 366.18 C
152.1 364.38 512.1 364.38 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 364.67 143.1 364.67 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(8.4) 124.63 370.18 T
(Call by reference: upvar) 152.1 370.18 T
1 10 Q
(The) 152.1 346.49 T
3 F
(upvar) 170.14 346.49 T
1 F
( command provides a general mechanism for accessing variables outside the) 200.12 346.49 T
-0.21 (context of a procedure. It can be used to access either global variables or local variables in) 152.1 334.15 P
(some other active procedure. Most often it is used to implement call-by-reference ar) 152.1 321.8 T
(gu-) 488.05 321.8 T
(ment passing. Here is a simple example of) 152.1 309.46 T
3 F
(upvar) 323.93 309.46 T
1 F
( in a procedure that prints out the con-) 353.91 309.46 T
(tents of an array:) 152.1 297.12 T
3 9 Q
(proc parray name {) 179.1 282.78 T
(upvar $name a) 200.63 272.44 T
(foreach el [lsort [array names a]] {) 200.63 262.1 T
(puts "$el = $a\050$el\051") 222.23 251.75 T
(}) 200.63 241.41 T
(}) 179.1 231.06 T
(set info\050age\051 37) 179.1 220.72 T
(set info\050position\051 "Vice President") 179.1 210.38 T
(parray info) 179.1 200.03 T
6 F
(\336) 162.9 187.03 T
7 F
(age = 37) 179.1 187.03 T
(position = "Vice President") 179.1 176.69 T
1 10 Q
(When) 152.1 163.02 T
3 F
(parray) 178.46 163.02 T
1 F
( is invoked it is given the name of an array as ar) 214.45 163.02 T
(gument. The) 405.79 163.02 T
3 F
(upvar) 458.81 163.02 T
1 F
( com-) 488.8 163.02 T
(mand then makes this array accessible through a local variable in the procedure. The \336rst) 152.1 150.68 T
(ar) 152.1 138.33 T
(gument to) 159.69 138.33 T
3 F
(upvar) 202.44 138.33 T
1 F
( is the name of a variable accessible to the procedure\325) 232.43 138.33 T
(s caller) 446.14 138.33 T
(. This) 474.17 138.33 T
FMENDPAGE
%%EndPage: "73" 82
%%Page: "74" 82
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(74) 98.1 668.33 T
5 F
(Procedures) 461 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(may be either a global variable, as in the example, or a local variable in a calling proce-) 152.1 632.33 T
-0.04 (dure. The second ar) 152.1 620.33 P
-0.04 (gument is the name of a local variable.) 230.61 620.33 P
3 F
-0.1 (Upvar) 387.67 620.33 P
1 F
-0.04 ( arranges things so that) 417.65 620.33 P
(accesses to local variable) 152.1 608.33 T
3 F
(a) 255.34 608.33 T
1 F
( will actually refer to the variable in the caller whose name is) 261.34 608.33 T
-0.02 (given by variable) 152.1 596.33 P
3 F
-0.05 (name) 223.93 596.33 P
1 F
-0.02 (. In the example this means that when) 247.92 596.33 P
3 F
-0.05 (parray) 401.26 596.33 P
1 F
-0.02 ( reads elements of) 437.24 596.33 P
3 F
-0.86 (a) 152.1 584.33 P
1 F
-0.36 ( it is actually reading elements of the) 158.1 584.33 P
3 F
-0.86 (info) 305.12 584.33 P
1 F
-0.36 ( global variable. If) 329.11 584.33 P
3 F
-0.86 (parray) 404 584.33 P
1 F
-0.36 ( were to write) 439.98 584.33 P
3 F
-0.86 (a) 496.27 584.33 P
1 F
-0.36 ( it) 502.26 584.33 P
(would modify) 152.1 572.33 T
3 F
(info) 210.96 572.33 T
1 F
(.) 234.94 572.33 T
3 F
(Parray) 239.94 572.33 T
1 F
( uses the \322) 275.92 572.33 T
3 F
(array names) 317.28 572.33 T
1 F
(\323 command to retrieve a list of) 383.24 572.33 T
(all the elements in the array) 152.1 560.33 T
(, sorts them with) 262.2 560.33 T
3 F
(lsort) 331.33 560.33 T
1 F
(, then prints out each the elements in) 361.32 560.33 T
(order) 152.1 548.33 T
(.) 172.64 548.33 T
2 F
(Note:) 119.09 533.33 T
-0 (In the example it appears as if the output is r) 152.1 533.33 P
-0 (eturned as the pr) 331.03 533.33 P
-0 (ocedur) 398.67 533.33 P
-0 (e\325) 426.05 533.33 P
-0 (s r) 432.53 533.33 P
-0 (esult; in fact it is) 442.43 533.33 P
(printed dir) 152.1 523.33 T
(ectly to standar) 194.77 523.33 T
(d output and the r) 256.58 523.33 T
(esult of the pr) 327.84 523.33 T
(ocedur) 382.72 523.33 T
(e is an empty string.) 410.11 523.33 T
1 F
(The \336rst variable name in an) 170.1 510.33 T
3 F
(upvar) 287.24 510.33 T
1 F
( command normally refers to the context of the) 317.22 510.33 T
(current procedure\325) 152.1 498.33 T
(s caller) 225.64 498.33 T
(. However) 253.67 498.33 T
(, it is also possible to access variables from any level) 294.9 498.33 T
(on the call stack, including global level. For example,) 152.1 486.33 T
3 9 Q
(upvar #0 other x) 179.1 472 T
1 10 Q
(makes global variable) 152.1 458.33 T
3 F
(other) 242.31 458.33 T
1 F
( accessible via local variable) 272.29 458.33 T
3 F
(x) 389.14 458.33 T
1 F
( \050the) 395.14 458.33 T
3 F
(#0) 415.67 458.33 T
1 F
( ar) 427.67 458.33 T
(gument speci\336es) 437.75 458.33 T
-0.16 (that) 152.1 446.33 P
3 F
-0.38 (other) 169.43 446.33 P
1 F
-0.16 ( should be interpreted as a global variable, regardless of how many nested pro-) 199.41 446.33 P
(cedure calls are active\051, and) 152.1 434.33 T
3 9 Q
(upvar -2 other x) 179.1 420 T
1 10 Q
(makes variable) 152.1 406.33 T
3 F
(other) 214.83 406.33 T
1 F
( in the caller of the caller of the current procedure accessible as) 244.81 406.33 T
(local variable) 152.1 394.33 T
3 F
(x) 208.72 394.33 T
1 F
( \050) 214.72 394.33 T
3 F
(-2) 220.54 394.33 T
1 F
( speci\336es that the context of) 232.54 394.33 T
3 F
(other) 346.9 394.33 T
1 F
( is 2 levels up the call stack\051. See) 376.89 394.33 T
(the reference documentation for more information on specifying a level in) 152.1 382.33 T
3 F
(upvar) 451.04 382.33 T
1 F
(.) 480.47 382.33 T
98.1 338.98 512.1 342 C
152.1 340.2 512.1 340.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 340.49 143.1 340.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(8.5) 124.63 346 T
(Creating new control structures: uplevel) 152.1 346 T
1 10 Q
(The) 152.1 322.31 T
3 F
(uplevel) 170.14 322.31 T
1 F
( command is a cross between) 212.12 322.31 T
3 F
(eval) 331.47 322.31 T
1 F
( and) 355.46 322.31 T
3 F
(upvar) 374.89 322.31 T
1 F
(. It evaluates its ar) 404.32 322.31 T
(gu-) 477.14 322.31 T
(ment\050s\051 as a script, just like) 152.1 310.31 T
3 F
(eval) 264.53 310.31 T
1 F
(, but the script is evaluated in the variable context of a) 288.52 310.31 T
-0.4 (dif) 152.1 298.31 P
-0.4 (ferent stack level, like) 163.02 298.31 P
3 F
-0.96 (upvar) 252.18 298.31 P
1 F
-0.4 (. W) 281.61 298.31 P
-0.4 (ith) 295.25 298.31 P
3 F
-0.96 (uplevel) 307.9 298.31 P
1 F
-0.4 ( you can de\336ne new control structures as) 349.88 298.31 P
(T) 152.1 286.31 T
(cl procedures. For example, here is a new control \337ow command called) 157.51 286.31 T
3 F
(do) 445.62 286.31 T
1 F
(:) 457.61 286.31 T
3 9 Q
(proc do {varName f) 179.1 271.98 T
(irst last body} {) 276.16 271.98 T
(upvar $varName v) 200.63 261.98 T
(for {set v $f) 200.63 251.98 T
(irst} {$v <= $last} {incr v} {) 270.73 251.98 T
(uplevel $body) 222.23 241.98 T
(}) 200.63 231.98 T
(}) 179.1 221.98 T
1 10 Q
(The \336rst ar) 152.1 208.31 T
(gument to) 195.78 208.31 T
3 F
(do) 238.53 208.31 T
1 F
( is the name of a variable.) 250.53 208.31 T
3 F
(Do) 356 208.31 T
1 F
( sets that variable to consecutive) 367.99 208.31 T
(integer values in the range between its second and third ar) 152.1 196.31 T
(guments, and executes the) 383.96 196.31 T
(fourth ar) 152.1 184.31 T
(gument as a T) 186.61 184.31 T
(cl command once for each setting. Given this de\336nition of) 242.26 184.31 T
3 F
(do) 477.38 184.31 T
1 F
(, the) 489.38 184.31 T
(following script creates a list of squares of the \336rst \336ve integers:) 152.1 172.31 T
FMENDPAGE
%%EndPage: "74" 83
%%Page: "75" 83
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(8.5 Creating new control structures: uplevel) 98.1 668.33 T
4 F
(75) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 9 Q
0 X
(set a {}) 179.1 633 T
(do i 1 5 {) 179.1 623 T
(lappend a [expr $i*$i]) 200.63 613 T
(}) 179.1 603 T
(set a) 179.1 593 T
6 F
(\336) 162.9 580 T
7 F
(1 4 9 16 25) 179.1 580 T
1 10 Q
-0.2 (The) 152.1 566.33 P
3 F
-0.49 (do) 169.94 566.33 P
1 F
-0.2 ( procedure uses) 181.93 566.33 P
3 F
-0.49 (upvar) 245.98 566.33 P
1 F
-0.2 ( to access the loop variable \050) 275.96 566.33 P
3 F
-0.49 (i) 388.54 566.33 P
1 F
-0.2 ( in the example\051 as local vari-) 394.53 566.33 P
(able) 152.1 554.33 T
3 F
(v) 171.25 554.33 T
1 F
(. Then it uses the) 176.6 554.33 T
3 F
(for) 247.11 554.33 T
1 F
( command to increment the loop variable through the desired) 265.1 554.33 T
(range. For each value it invokes) 152.1 542.33 T
3 F
(uplevel) 282.28 542.33 T
1 F
( to execute the loop body in the variable con-) 324.26 542.33 T
(text of the caller; this causes references to variables) 152.1 530.33 T
3 F
(a) 360.54 530.33 T
1 F
( and) 366.53 530.33 T
3 F
(i) 385.96 530.33 T
1 F
( in the body of the loop to) 391.96 530.33 T
(refer to variables in) 152.1 518.33 T
3 F
(do) 232.59 518.33 T
1 F
(\325) 244.58 518.33 T
(s caller) 247.36 518.33 T
(. If) 275.39 518.33 T
3 F
(eval) 289.54 518.33 T
1 F
( were used instead of) 313.53 518.33 T
3 F
(uplevel) 400.4 518.33 T
1 F
( then) 442.38 518.33 T
3 F
(a) 464.59 518.33 T
1 F
( and) 470.58 518.33 T
3 F
(i) 490.01 518.33 T
1 F
(would be treated as local variables in) 152.1 506.33 T
3 F
(do) 302.82 506.33 T
1 F
(, which would not produce the desired ef) 314.81 506.33 T
(fect.) 477.84 506.33 T
2 F
(Note:) 119.09 491.33 T
-0.16 (This implementation of) 152.1 491.33 P
7 F
-0.39 (do) 246.29 491.33 P
2 F
-0.16 ( does not handle exceptional conditions pr) 258.28 491.33 P
-0.16 (operly) 426.82 491.33 P
-0.16 (. For example,) 451.81 491.33 P
-0.36 (if the body of the loop contains a) 152.1 481.33 P
7 F
-0.87 (return) 283.03 481.33 P
2 F
-0.36 ( command it will only cause the) 319.01 481.33 P
7 F
-0.87 (do) 445.58 481.33 P
2 F
-0.36 ( pr) 457.57 481.33 P
-0.36 (ocedur) 468.23 481.33 P
-0.36 (e to) 495.61 481.33 P
(r) 152.1 471.33 T
(eturn, which is mor) 155.62 471.33 T
(e like the behavior of) 232.99 471.33 T
7 F
(break) 319.87 471.33 T
2 F
(. If a) 349.85 471.33 T
7 F
(return) 370.95 471.33 T
2 F
( occurs in the body of a) 406.93 471.33 T
(built-in contr) 152.1 461.33 T
(ol-\337ow command like) 204.76 461.33 T
7 F
(for) 293.31 461.33 T
2 F
( or) 311.3 461.33 T
7 F
(while) 325.18 461.33 T
2 F
( then it causes the pr) 355.17 461.33 T
(ocedur) 437.8 461.33 T
(e that) 465.19 461.33 T
-0.08 (invoked the command to r) 152.1 451.33 P
-0.08 (eturn. In Chapter 9 you will see how to implement this behavior) 255.21 451.33 P
(for) 152.1 441.33 T
7 F
(do) 166.26 441.33 T
2 F
(.) 178.26 441.33 T
1 F
(As with) 170.1 428.33 T
3 F
(upvar) 203.97 428.33 T
1 F
(,) 233.55 428.33 T
3 F
(uplevel) 238.55 428.33 T
1 F
( takes an optional initial ar) 280.53 428.33 T
(gument that speci\336es an) 386.67 428.33 T
(explicit stack level. See the reference documentation for details.) 152.1 416.33 T
FMENDPAGE
%%EndPage: "75" 84
%%Page: "76" 84
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(76) 98.1 668.33 T
5 F
(Procedures) 461 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
FMENDPAGE
%%EndPage: "76" 85
%%Page: "77" 85
612 792 0 FMBEGINPAGE
98.1 675 512.1 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
98.1 450 512.1 450 2 L
7 X
V
2 Z
0 X
N
98.1 108 512.1 126 R
7 X
V
4 10 Q
0 X
(77) 500.99 119.33 T
98.1 54 512.1 108 R
7 X
V
1 9 Q
0 X
(Copyright \251 1993 Addison-W) 152.1 102 T
(esley Publishing Company) 261.32 102 T
(, Inc.) 357.1 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 152.1 91 T
(. Any) 485.77 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 152.1 80 T
-0.34 (lisher) 152.1 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 171.58 69 P
(does not of) 152.1 58 T
(fer warranties in regard to this draft.) 191.88 58 T
0 24 Q
(Chapter 9) 152.1 605 T
-0.48 (Err) 152.1 575 S
-0.48 (ors and Exceptions) 187.53 575 S
98.1 135 512.1 423 R
7 X
V
1 10 Q
0 X
(As you have seen in previous chapters, there are many things that can result in errors in) 152.1 416.33 T
(T) 152.1 404.22 T
(cl commands. Errors can occur because a command doesn\325) 157.51 404.22 T
(t exist, or because it doesn\325) 393.52 404.22 T
(t) 502.15 404.22 T
-0.05 (receive the right number of ar) 152.1 392.1 P
-0.05 (guments, or because the ar) 270.74 392.1 P
-0.05 (guments have the wrong form, or) 376.66 392.1 P
(because some other problem occurs in executing the command, such as an error in a sys-) 152.1 379.98 T
(tem call for \336le I/O. In most cases errors represent severe problems that make it impossi-) 152.1 367.87 T
(ble for the application to complete the script it is processing. T) 152.1 355.75 T
(cl\325) 401.79 355.75 T
(s error facilities are) 411.79 355.75 T
-0.17 (intended to make it easy for the application to unwind the work in progress and display an) 152.1 343.64 P
-0.11 (error message to the user that indicates what went wrong. Presumably the user will \336x the) 152.1 331.52 P
(problem and retry the operation.) 152.1 319.4 T
(Errors are just one example of a more general phenomenon called) 170.1 307.4 T
2 F
(exceptions) 435.71 307.4 T
1 F
(. Excep-) 477.9 307.4 T
-0.28 (tions are events that cause scripts to be aborted; they include the) 152.1 295.29 P
3 F
-0.66 (break) 408.05 295.29 P
1 F
-0.28 (,) 438.03 295.29 P
3 F
-0.66 (continue) 442.75 295.29 P
1 F
-0.28 (, and) 490.72 295.29 P
3 F
(return) 152.1 283.17 T
1 F
( commands as well as errors. T) 188.08 283.17 T
(cl allows exceptions to be \322caught\323 by scripts so) 311.45 283.17 T
(that only part of the work in progress is unwound. After catching an exception the script) 152.1 271.05 T
(can ignore it or take steps to recover from it. If the script can\325) 152.1 258.94 T
(t recover then it can reissue) 397.83 258.94 T
(the exception. T) 152.1 246.82 T
(able 9.1 summarizes the T) 216.07 246.82 T
(cl commands related to exceptions.) 320.58 246.82 T
98.1 203.47 512.1 206.49 C
152.1 204.69 512.1 204.69 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 204.98 143.1 204.98 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(9.1) 124.63 210.49 T
(What happens after an error?) 152.1 210.49 T
1 10 Q
(When a T) 152.1 186.8 T
(cl error occurs the current command is aborted. If that command is part of a) 190.81 186.8 T
-0.01 (lar) 152.1 174.68 P
-0.01 (ger script then the script is also aborted. If the error occurs while executing a T) 162.46 174.68 P
-0.01 (cl proce-) 476.87 174.68 P
-0.12 (dure, then the procedure is aborted, along with the procedure that called it, and so on until) 152.1 162.57 P
-0.31 (all the active procedures have aborted. After all T) 152.1 150.45 P
-0.31 (cl activity has been unwound in this way) 347.32 150.45 P
-0.31 (,) 507.42 150.45 P
(control eventually returns to C code in the application, along with an indication that an) 152.1 138.33 T
44.1 351 89.1 423 C
53.1 360 215.1 414 R
7 X
0 K
V
0 9 Q
0 X
(FIGURE  9) 53.1 408 T
(T) 53.1 387 T
(ABLE  9) 58.43 387 T
44.1 351 143.1 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "77" 86
%%Page: "78" 86
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(78) 98.1 668.33 T
5 F
(Errors and Exceptions) 413.78 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
-0.18 (error occurred and a message describing the error) 152.1 376.73 P
-0.18 (. It is up to the application to decide how) 348.17 376.73 P
-0.36 (to handle this situation, but most interactive applications will display the error message for) 152.1 364.65 P
-0.24 (the user and continue processing user input. In a batch-oriented application where the user) 152.1 352.56 P
(can\325) 152.1 340.47 T
(t see the error message and adjust future actions accordingly) 169.12 340.47 T
(, the application might) 409.67 340.47 T
(print the error message into a log and abort.) 152.1 328.38 T
-0.39 (For example, consider the following script, which is intended to sum the elements of a) 170.1 316.38 P
(list:) 152.1 304.3 T
3 9 Q
(set list {44 16 123 98 57}) 179.1 289.96 T
(set sum 0) 179.1 279.88 T
(foreach el $list {) 179.1 269.79 T
(set sum [expr $sum+$element]) 200.63 259.7 T
(}) 179.1 249.61 T
6 F
(\306) 162.9 236.61 T
7 F
(can\325t read "element": no such variable) 179.1 236.61 T
1 10 Q
(This script is incorrect because there is no variable) 152.1 222.95 T
3 F
(element) 357.22 222.95 T
1 F
(: the variable name) 399.19 222.95 T
3 F
(ele-) 478.02 222.95 T
(ment) 152.1 210.86 T
1 F
( in the) 176.09 210.86 T
3 F
(expr) 203.57 210.86 T
1 F
( command should have been) 227.56 210.86 T
3 F
(el) 343.86 210.86 T
1 F
( to match the loop variable for the) 355.86 210.86 T
3 F
(foreach) 152.1 198.77 T
1 F
( command. When the script is executed an error will occur as T) 194.08 198.77 T
(cl parses the) 446.79 198.77 T
3 F
-0.86 (expr) 152.1 186.68 P
1 F
-0.36 ( command: T) 176.09 186.68 P
-0.36 (cl will attempt to substitute the value of variable) 227.97 186.68 P
3 F
-0.86 (element) 420.46 186.68 P
1 F
-0.36 ( but will not) 462.44 186.68 P
-0 (be able to \336nd a variable by that name, so it will signal an error) 152.1 174.6 P
-0 (. This error indication will) 404.4 174.6 P
-0.01 (be returned to the) 152.1 162.51 P
3 F
-0.04 (foreach) 224.76 162.51 P
1 F
-0.01 ( command, which had invoked the T) 266.74 162.51 P
-0.01 (cl interpreter to evaluate) 412.24 162.51 P
(the loop body) 152.1 150.42 T
(. When) 206.42 150.42 T
3 F
(foreach) 237.78 150.42 T
1 F
( sees that an error has occurred, it will abort its loop and) 279.76 150.42 T
(return the same error indication as its own result. This in turn will cause the overall script) 152.1 138.33 T
98.1 383.4 512.1 639 C
98.1 421.63 512.1 436.03 C
98.1 421.63 512.1 436.03 R
7 X
0 K
V
152.1 429.55 512.1 429.55 2 L
V
0.5 H
2 Z
0 X
N
98.1 383.4 512.1 639 C
98.1 398.23 512.1 412.63 C
98.1 398.23 512.1 412.63 R
7 X
0 K
V
152.1 406.15 512.1 406.15 2 L
V
0.5 H
2 Z
0 X
N
98.1 383.4 512.1 639 C
0 9 Q
0 X
0 K
(T) 152.1 415.63 T
(able  9.1.) 157.27 415.63 T
1 F
(A summary of the T) 195.72 415.63 T
(cl commands related to exceptions.) 267.98 415.63 T
3 F
(catch) 158.1 624.03 T
7 F
(command) 190.46 624.03 T
1 F
(?) 233.59 624.03 T
7 F
(varName) 237.59 624.03 T
1 F
(?) 275.33 624.03 T
(Evaluates) 230.1 615.03 T
7 F
(command) 267.29 615.03 T
1 F
( as a T) 305.04 615.03 T
(cl script and returns an integer code that) 328.12 615.03 T
(identi\336es the completion status of the command. If) 230.1 606.03 T
7 F
(varName) 415.08 606.03 T
1 F
( is speci\336ed) 452.83 606.03 T
(then it gives the name of a variable, which will be modi\336ed to hold the) 230.1 597.03 T
(return value or error message generated by) 230.1 588.03 T
7 F
(command) 386.08 588.03 T
1 F
(.) 423.82 588.03 T
3 F
(error) 158.1 569.03 T
7 F
(message) 190.46 569.03 T
1 F
(?) 233.59 569.03 T
7 F
(info) 237.59 569.03 T
1 F
(?) 259.15 569.03 T
(?) 268.54 569.03 T
7 F
(code) 272.53 569.03 T
1 F
(?) 294.1 569.03 T
(Generates an error with) 230.1 560.03 T
7 F
(message) 316.95 560.03 T
1 F
( as the error message. If) 354.69 560.03 T
7 F
(info) 442.79 560.03 T
1 F
( is) 464.36 560.03 T
(speci\336ed and is not an empty string then it is used to initialize the) 230.1 551.03 T
3 F
(errorInfo) 230.1 542.03 T
1 F
( variable. If) 278.63 542.03 T
7 F
(code) 322.55 542.03 T
1 F
( is speci\336ed then it is stored in the) 344.12 542.03 T
3 F
(errorCode) 230.1 533.03 T
1 F
( variable.) 278.63 533.03 T
3 F
(return -code) 158.1 514.03 T
7 F
(code) 228.2 514.03 T
1 F
(?) 255.16 514.03 T
3 F
(-errorinfo) 259.15 514.03 T
7 F
(info) 318.47 514.03 T
1 F
(?) 340.04 514.03 T
(?) 349.42 514.03 T
3 F
(-errorcode) 353.42 514.03 T
7 F
(code) 412.73 514.03 T
1 F
(?) 434.3 514.03 T
(?) 443.68 514.03 T
7 F
(string) 447.67 514.03 T
1 F
(?) 480.03 514.03 T
(Causes the current procedure to return an exceptional condition.) 230.1 505.03 T
7 F
(Code) 462.72 505.03 T
1 F
(speci\336es the condition and must be) 230.1 496.03 T
3 F
(ok) 358.41 496.03 T
1 F
(,) 369.2 496.03 T
3 F
(error) 373.69 496.03 T
1 F
(,) 400.3 496.03 T
3 F
(return) 404.79 496.03 T
1 F
(,) 437.14 496.03 T
3 F
(break) 441.64 496.03 T
1 F
(,) 468.6 496.03 T
3 F
(continue) 230.1 487.03 T
1 F
(, or an integer) 273.24 487.03 T
(. The) 322.66 487.03 T
3 F
(-errorinfo) 343.38 487.03 T
1 F
( option may be used to) 397.3 487.03 T
(specify a starting value for the) 230.1 478.03 T
3 F
(errorInfo) 341.42 478.03 T
1 F
( variable, and) 389.95 478.03 T
3 F
(-errorcode) 440.86 478.03 T
1 F
(may be used to specify a value for the) 230.1 469.03 T
3 F
(errorCode) 368.62 469.03 T
1 F
( variable.) 417.15 469.03 T
7 F
(String) 452.84 469.03 T
1 F
(gives the return value or error message associated with the return; it) 230.1 460.03 T
(defaults to an empty string.) 230.1 451.03 T
152.1 635.78 152.1 444.28 2 L
V
0.5 H
0 Z
N
512.1 635.78 512.1 444.28 2 L
V
N
151.85 636.03 512.35 636.03 2 L
V
N
151.85 581.03 512.35 581.03 2 L
V
0.25 H
N
151.85 526.03 512.35 526.03 2 L
V
N
151.85 444.03 512.35 444.03 2 L
V
0.5 H
N
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "78" 87
%%Page: "79" 87
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(9.2 Generating errors from T) 98.1 668.33 T
(cl scripts) 223.63 668.33 T
4 F
(79) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(to be aborted. The error message \322) 152.1 632.33 T
3 F
(can\325t read "element": no such vari-) 290.03 632.33 T
(able) 152.1 619.83 T
1 F
(\323 will be returned along with the error) 176.09 619.83 T
(, and will probably be displayed for the user) 327.51 619.83 T
(.) 503.23 619.83 T
-0.04 (In many cases the error message will provide enough information for you to pinpoint) 170.1 607.83 P
-0.11 (where and why the error occurred so you can avoid the problem in the future. However) 152.1 595.34 P
-0.11 (, if) 498.71 595.34 P
-0.19 (the error occurred in a deeply nested set of procedure calls the message alone may not pro-) 152.1 582.84 P
(vide enough information to \336gure out where the error occurred. T) 152.1 570.34 T
(o help pinpoint the loca-) 413.7 570.34 T
(tion of the error) 152.1 557.84 T
(, T) 214.71 557.84 T
(cl creates a stack trace as it unwinds the commands that were in) 225.11 557.84 T
(progress, and it stores the stack trace in the global variable) 152.1 545.34 T
3 F
(errorInfo) 388.59 545.34 T
1 F
(. The stack trace) 442.56 545.34 T
-0.01 (describes each of the nested calls to the T) 152.1 532.84 P
-0.01 (cl interpreter) 317.32 532.84 P
-0.01 (. For example, after the above error) 368.11 532.84 P
3 F
(errorInfo) 152.1 520.34 T
1 F
( will have the following value:) 206.07 520.34 T
3 9 Q
(can\325t read "element": no such variable) 179.1 506.01 T
(while executing) 200.63 495.51 T
("expr $sum+$element") 179.1 485.01 T
(invoked from within) 200.63 474.51 T
("set sum [expr $sum+$element]...") 179.1 464.01 T
(\050"foreach" body line 2\051) 200.63 453.51 T
(invoked from within) 200.63 443.01 T
("foreach el $list {) 179.1 432.51 T
(set sum [expr $sum+$element]) 200.63 422.01 T
(}") 179.1 411.51 T
1 10 Q
(T) 170.1 397.85 T
(cl provides one other piece of information after errors, in the global variable) 175.51 397.85 T
3 F
-0.44 (errorCode) 152.1 385.35 P
1 F
-0.18 (.) 206.07 385.35 P
3 F
-0.44 (ErrorCode) 210.88 385.35 P
1 F
-0.18 ( has a format that is easy to process with T) 264.86 385.35 P
-0.18 (cl scripts; it is most) 432.77 385.35 P
(commonly used in T) 152.1 372.85 T
(cl scripts that attempt to recover from errors using the) 233.85 372.85 T
3 F
(catch) 451.48 372.85 T
1 F
( com-) 481.46 372.85 T
(mand described below) 152.1 360.35 T
(. The) 241.38 360.35 T
3 F
(errorCode) 264.42 360.35 T
1 F
( variable consists of a list with one or more ele-) 318.39 360.35 T
(ments. The \336rst element identi\336es a general class of errors and the remaining elements) 152.1 347.85 T
-0.38 (provide more information in a class-dependent fashion. For example, if the \336rst element of) 152.1 335.35 P
3 F
(errorCode) 152.1 322.85 T
1 F
( is) 206.07 322.85 T
3 F
(POSIX) 217.73 322.85 T
1 F
( then it means that an error occurred in a POSIX system call.) 247.72 322.85 T
3 F
(ErrorCode) 152.1 310.35 T
1 F
( will contain two additional elements giving the POSIX name for the error) 206.07 310.35 T
(,) 502.7 310.35 T
(such as) 152.1 297.85 T
3 F
(ENOENT) 183.74 297.85 T
1 F
(, and a human-readable message describing the error) 218.98 297.85 T
(. See the reference) 428.81 297.85 T
(documentation for a complete description of all the forms) 152.1 285.35 T
3 F
(errorCode) 384.99 285.35 T
1 F
( can take, or refer) 438.96 285.35 T
-0.37 (to the descriptions of individual commands that set) 152.1 272.85 P
3 F
-0.89 (errorCode) 355.69 272.85 P
1 F
-0.37 (, such as those in Chapter) 409.66 272.85 P
(1) 152.1 260.35 T
(1 and Chapter 12.) 156.73 260.35 T
(The) 170.1 248.35 T
3 F
(errorCode) 188.14 248.35 T
1 F
( variable is a late-comer to T) 242.11 248.35 T
(cl and is only \336lled in by a few com-) 356.32 248.35 T
(mands, mostly dealing with \336le access and child processes. If a command generates an) 152.1 235.85 T
(error without setting) 152.1 223.36 T
3 F
(errorCode) 236.21 223.36 T
1 F
( then T) 290.18 223.36 T
(cl \336lls it in with the value) 317.8 223.36 T
3 F
(NONE) 422.47 223.36 T
1 F
(.) 446.46 223.36 T
98.1 180 512.1 183.02 C
152.1 181.22 512.1 181.22 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 181.51 143.1 181.51 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(9.2) 124.63 187.02 T
(Generating errors from T) 152.1 187.02 T
(cl scripts) 293.17 187.02 T
1 10 Q
(Most T) 152.1 163.33 T
(cl errors are generated by the C code that implements the T) 180.55 163.33 T
(cl interpreter and the) 416.61 163.33 T
(built-in commands. However) 152.1 150.83 T
(, it is also possible to generate an error by executing the) 268.57 150.83 T
3 F
(error) 152.1 138.33 T
1 F
( T) 182.08 138.33 T
(cl command as in the following example:) 189.99 138.33 T
FMENDPAGE
%%EndPage: "79" 88
%%Page: "80" 88
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(80) 98.1 668.33 T
5 F
(Errors and Exceptions) 413.78 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 9 Q
0 X
(if {\050$x < 0} || \050$x > 100\051} {) 179.1 633 T
(error "x is out of range \050$x\051") 200.63 623 T
(}) 179.1 613 T
1 10 Q
(The) 152.1 599.33 T
3 F
(error) 170.14 599.33 T
1 F
( command generates an error and uses its ar) 200.12 599.33 T
(gument as the error message.) 374.8 599.33 T
(As a matter of programming style, you should only use the) 170.1 587.33 T
3 F
(error) 407.73 587.33 T
1 F
( command in situ-) 437.71 587.33 T
(ations where the correct action is to abort the script being executed. If you think that an) 152.1 575.33 T
(error is likely to be recovered from without aborting the entire script, then it is probably) 152.1 563.33 T
(better to use the normal return value mechanism to indicate success or failure \050e.g. return) 152.1 551.33 T
(one value from a command if it succeeded and another if it failed, or set variables to indi-) 152.1 539.33 T
(cate success or failure\051. Although it is possible to recover from errors \050you\325ll see how in) 152.1 527.33 T
(Section 9.3 below\051 the recovery mechanism is more complicated than the normal return) 152.1 515.33 T
-0.11 (value mechanism. Thus it\325) 152.1 503.33 P
-0.11 (s best to generate errors only in situations where you won\325) 257.27 503.33 P
-0.11 (t usu-) 489.72 503.33 P
(ally want to recover) 152.1 491.33 T
(.) 231.21 491.33 T
98.1 447.98 512.1 451 C
152.1 449.2 512.1 449.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 449.49 143.1 449.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(9.3) 124.63 455 T
(T) 152.1 455 T
(rapping errors with catch) 158.77 455 T
1 10 Q
-0.38 (Errors generally cause all active T) 152.1 431.31 P
-0.38 (cl commands to be aborted, but there are some situations) 286.33 431.31 P
(where it is useful to continue executing a script after an error has occurred. For example,) 152.1 419.31 T
-0.14 (suppose that you want to unset variable) 152.1 407.31 P
3 F
-0.34 (x) 311.27 407.31 P
1 F
-0.14 ( if it exists, but it may not exist at the time of the) 317.27 407.31 P
3 F
(unset) 152.1 395.31 T
1 F
( command. If you invoke) 182.08 395.31 T
3 F
(unset) 285.35 395.31 T
1 F
( on a variable that doesn\325) 315.33 395.31 T
(t exist then it generates) 415.9 395.31 T
(an error:) 152.1 383.31 T
3 9 Q
(unset x) 179.1 368.98 T
6 F
(\306) 162.9 355.98 T
7 F
(can\325t unset "x": no such variable) 179.1 355.98 T
1 10 Q
(Y) 152.1 342.31 T
(ou can use the) 158.32 342.31 T
3 F
(catch) 217.71 342.31 T
1 F
( command to ignore the error in this situation:) 247.7 342.31 T
3 9 Q
(catch {unset x}) 179.1 327.98 T
6 F
(\336) 162.9 314.98 T
7 F
(1) 179.1 314.98 T
1 10 Q
(The ar) 152.1 301.31 T
(gument to) 177.73 301.31 T
3 F
(catch) 220.48 301.31 T
1 F
( is a T) 250.47 301.31 T
(cl script, which) 274.47 301.31 T
3 F
(catch) 338.32 301.31 T
1 F
( evaluates. If the script completes) 368.3 301.31 T
-0.18 (normally then) 152.1 289.31 P
3 F
-0.43 (catch) 210.04 289.31 P
1 F
-0.18 ( returns 0. If an error occurs in the script then) 240.02 289.31 P
3 F
-0.43 (catch) 421.78 289.31 P
1 F
-0.18 ( traps the error) 451.76 289.31 P
(\050so that the) 152.1 277.31 T
3 F
(catch) 199.01 277.31 T
1 F
( command itself is not aborted by the error\051 and returns 1 to indicate) 229 277.31 T
(that an error occurred. The example above ignores any errors in) 152.1 265.31 T
3 F
(unset) 409.1 265.31 T
1 F
( so) 439.08 265.31 T
3 F
(x) 452.96 265.31 T
1 F
( is unset if it) 458.96 265.31 T
(existed and the script has no ef) 152.1 253.31 T
(fect if) 275.16 253.31 T
3 F
(x) 301.25 253.31 T
1 F
( didn\325) 307.24 253.31 T
(t previously exist.) 330.66 253.31 T
(The) 170.1 241.31 T
3 F
(catch) 188.14 241.31 T
1 F
( command can also take a second ar) 218.12 241.31 T
(gument. If the ar) 361.43 241.31 T
(gument is provided) 427.87 241.31 T
-0.33 (then it is the name of a variable and) 152.1 229.31 P
3 F
-0.78 (catch) 294.34 229.31 P
1 F
-0.33 ( modi\336es the variable to hold either the script\325) 324.32 229.31 P
-0.33 (s) 506.04 229.31 P
(return value \050if it returns normally\051 or the error message \050if the script generates an error\051:) 152.1 217.31 T
3 9 Q
(catch {unset x} msg) 179.1 202.98 T
6 F
(\336) 162.9 189.98 T
7 F
(1) 179.1 189.98 T
3 F
(set msg) 179.1 176.98 T
6 F
(\336) 162.9 163.98 T
7 F
(can\325t unset "x": no such variable) 179.1 163.98 T
FMENDPAGE
%%EndPage: "80" 89
%%Page: "81" 89
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(9.4 Exceptions in general) 98.1 668.33 T
4 F
(81) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
-0.21 (In this case the) 152.1 632.33 P
3 F
-0.5 (unset) 213.44 632.33 P
1 F
-0.21 ( command generates an error so) 243.42 632.33 P
3 F
-0.5 (msg) 372.05 632.33 P
1 F
-0.21 ( is set to contain the error mes-) 390.04 632.33 P
-0.36 (sage. If variable) 152.1 620 P
3 F
-0.86 (x) 217.63 620 P
1 F
-0.36 ( had existed then) 223.63 620 P
3 F
-0.86 (unset) 292.15 620 P
1 F
-0.36 ( would have returned successfully) 322.14 620 P
-0.36 (, so the return) 456.07 620 P
(value from) 152.1 607.67 T
3 F
(catch) 198.18 607.67 T
1 F
( would have been) 228.16 607.67 T
3 F
(0) 300.88 607.67 T
1 F
( and) 306.88 607.67 T
3 F
(msg) 326.3 607.67 T
1 F
( would have contained the return value) 344.29 607.67 T
(from the) 152.1 595.34 T
3 F
(unset) 188.74 595.34 T
1 F
( command, which is an empty string. This longer form of) 218.72 595.34 T
3 F
(catch) 449.97 595.34 T
1 F
( is use-) 479.95 595.34 T
(ful if you need access to the return value when the script completes successfully) 152.1 583 T
(. It\325) 471.48 583 T
(s also) 485.37 583 T
-0.23 (useful if you need to do something with the error message after an error) 152.1 570.67 P
-0.23 (, such as logging it) 435.49 570.67 P
(to a \336le.) 152.1 558.34 T
98.1 514.98 512.1 518.01 C
152.1 516.2 512.1 516.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 516.49 143.1 516.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(9.4) 124.63 522.01 T
(Exceptions in general) 152.1 522.01 T
1 10 Q
(Errors are not the only things in T) 152.1 498.32 T
(cl that cause work in progress to be aborted. Errors are) 287.15 498.32 T
(just one example of a set of events called) 152.1 485.98 T
7 F
(exceptions) 318.92 485.98 T
1 F
(. In addition to errors there are) 378.89 485.98 T
(three other kinds of exceptions in T) 152.1 473.65 T
(cl, which are generated by the) 293.52 473.65 T
3 F
(break) 415.92 473.65 T
1 F
(,) 445.9 473.65 T
3 F
(continue) 450.9 473.65 T
1 F
(,) 498.87 473.65 T
(and) 152.1 461.32 T
3 F
(return) 169.03 461.32 T
1 F
( commands. All exceptions cause active scripts to be aborted in the same) 205.01 461.32 T
(way) 152.1 448.98 T
(, except for two dif) 168.1 448.98 T
(ferences. First, the) 244.25 448.98 T
3 F
(errorInfo) 320.58 448.98 T
1 F
( and) 374.55 448.98 T
3 F
(errorCode) 393.98 448.98 T
1 F
( variables are) 447.95 448.98 T
(only set during error exceptions. Second, the exceptions other than errors are almost) 152.1 436.65 T
(always caught by an enclosing command, whereas errors usually unwind all the work in) 152.1 424.32 T
-0.09 (progress. For example,) 152.1 411.99 P
3 F
-0.22 (break) 245.93 411.99 P
1 F
-0.09 ( and) 275.91 411.99 P
3 F
-0.22 (continue) 295.16 411.99 P
1 F
-0.09 ( commands are normally invoked inside a) 343.13 411.99 P
-0.31 (looping command such as) 152.1 399.65 P
3 F
-0.75 (foreach) 257.45 399.65 P
1 F
-0.31 (;) 299.42 399.65 P
3 F
-0.75 (foreach) 304.39 399.65 P
1 F
-0.31 ( will catch break and continue exceptions) 346.37 399.65 P
(and terminate the loop or skip to the next iteration. Similarly) 152.1 387.32 T
(,) 393.81 387.32 T
3 F
(return) 398.8 387.32 T
1 F
( is normally only) 434.79 387.32 T
-0.14 (invoked inside a procedure or a \336le being) 152.1 374.99 P
3 F
-0.34 (source) 319.16 374.99 P
1 F
-0.14 (\325d. Both the procedure implementation) 355.14 374.99 P
(and the) 152.1 362.66 T
3 F
(source) 183.74 362.66 T
1 F
( command catch return exceptions.) 219.72 362.66 T
2 F
(Note:) 119.09 347.66 T
(If a) 152.1 347.66 T
7 F
(break) 168.2 347.66 T
2 F
( or) 198.18 347.66 T
7 F
(continue) 212.07 347.66 T
2 F
( command is invoked outside any loop then active scripts) 260.04 347.66 T
-0.32 (unwind until the outermost script for a pr) 152.1 337.33 P
-0.32 (ocedur) 315.23 337.33 P
-0.32 (e is r) 342.61 337.33 P
-0.32 (eached or all scripts in pr) 361.58 337.33 P
-0.32 (ogr) 463.15 337.33 P
-0.32 (ess have) 476.67 337.33 P
-0.38 (been unwound. At this point T) 152.1 326.99 P
-0.38 (cl turns the br) 269.22 326.99 P
-0.38 (eak or continue exception into an err) 324.07 326.99 P
-0.38 (or with an) 469.64 326.99 P
(appr) 152.1 316.66 T
(opriate message.) 170.61 316.66 T
1 F
-0.05 (All exceptions are accompanied by a string value. In the case of an error) 170.1 303.66 P
-0.05 (, the string is) 458.18 303.66 P
(the error message. In the case of) 152.1 291.33 T
3 F
(return) 283.65 291.33 T
1 F
(, the string is the return value for the procedure) 319.63 291.33 T
(or script. In the case of) 152.1 279 T
3 F
(break) 246.19 279 T
1 F
( and) 276.17 279 T
3 F
(continue) 295.6 279 T
1 F
( the string is always empty) 343.58 279 T
(.) 449.81 279 T
(The) 170.1 267 T
3 F
(catch) 188.14 267 T
1 F
( command actually catches all exceptions, not just errors. The return) 218.12 267 T
-0.22 (value from) 152.1 254.66 P
3 F
-0.52 (catch) 197.74 254.66 P
1 F
-0.22 ( indicates what kind of exception occurred and the variable speci\336ed in) 227.72 254.66 P
3 F
-0.93 (catch) 152.1 242.33 P
1 F
-0.39 (\325) 182.08 242.33 P
-0.39 (s second ar) 184.86 242.33 P
-0.39 (gument is set to hold the string associated with the exception \050see T) 228.31 242.33 P
-0.39 (able) 493.34 242.33 P
(9.2\051. For example:) 152.1 230 T
3 9 Q
(catch {return "all done"} string) 179.1 215.66 T
6 F
(\336) 162.9 202.66 T
7 F
(2) 179.1 202.66 T
3 F
(set string) 179.1 189.66 T
6 F
(\336) 162.9 176.66 T
7 F
(all done) 179.1 176.66 T
1 10 Q
(Whereas) 170.1 163 T
3 F
(catch) 207.56 163 T
1 F
( provides a general mechanism for catching exception of all types,) 237.54 163 T
3 F
(return) 152.1 150.67 T
1 F
( provides a general mechanism for generating exceptions of all types. If its \336rst) 188.08 150.67 T
(ar) 152.1 138.33 T
(gument consists of the keyword) 159.69 138.33 T
3 F
(-code) 289.33 138.33 T
1 F
(, as in) 319.31 138.33 T
FMENDPAGE
%%EndPage: "81" 90
%%Page: "82" 90
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(82) 98.1 668.33 T
5 F
(Errors and Exceptions) 413.78 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 9 Q
0 X
(return -code return 42) 179.1 355.8 T
1 10 Q
(then its second ar) 152.1 342.13 T
(gument is the name of an exception \050) 221.59 342.13 T
3 F
(return) 369.54 342.13 T
1 F
( in this case\051 and the third) 405.52 342.13 T
(ar) 152.1 330.13 T
(gument is the string associated with the exception. The enclosing procedure will return) 159.69 330.13 T
(immediately) 152.1 318.13 T
(, but instead of a normal return it will return with the exception described by) 201.42 318.13 T
(the) 152.1 306.13 T
3 F
(return) 166.81 306.13 T
1 F
( command\325) 202.79 306.13 T
(s ar) 247.49 306.13 T
(guments. In the example above the procedure will generate a) 261.46 306.13 T
(return exception, which will then cause the calling procedure to return as well.) 152.1 294.13 T
(In Section 8.5 you saw how a new looping command) 170.1 282.13 T
3 F
(do) 384.68 282.13 T
1 F
( could be implemented as a) 396.67 282.13 T
(T) 152.1 270.13 T
(cl procedure using) 157.51 270.13 T
3 F
(upvar) 233.84 270.13 T
1 F
( and) 263.82 270.13 T
3 F
(uplevel) 283.25 270.13 T
1 F
(. However) 325.23 270.13 T
(, the example in Section 8.5 did not) 366.45 270.13 T
-0.22 (properly handle exceptions within the loop body) 152.1 258.13 P
-0.22 (. Here is a new implementation of) 343.88 258.13 P
3 F
-0.53 (do) 480.56 258.13 P
1 F
-0.22 ( that) 492.55 258.13 P
(uses) 152.1 246.13 T
3 F
(catch) 171.81 246.13 T
1 F
( and) 201.79 246.13 T
3 F
(return) 221.22 246.13 T
1 F
( to deal with exceptions properly:) 257.2 246.13 T
98.1 361.8 512.1 639 C
98.1 432 512.1 446.4 C
98.1 432 512.1 446.4 R
7 X
0 K
V
152.1 439.92 512.1 439.92 2 L
V
0.5 H
2 Z
0 X
N
98.1 361.8 512.1 639 C
0 9 Q
0 X
0 K
(T) 152.1 426 T
(able  9.2.) 157.27 426 T
1 F
(A summary of T) 195.72 426 T
(cl exceptions. The \336rst column indicates the value returned by) 254.74 426 T
3 F
(catch) 480.64 426 T
1 F
(in each instance. The second column describes when the exception occurs and the meaning of the) 152.1 417 T
(string associated with the exception. The last column lists the commands that catch exceptions of) 152.1 408 T
(that type \050\322procedures\323 means that the exception is caught by a T) 152.1 399 T
(cl procedure when its entire body) 386.34 399 T
98.1 372.6 512.1 387 C
98.1 372.6 512.1 387 R
7 X
0 K
V
152.1 380.52 512.1 380.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 361.8 512.1 639 C
1 9 Q
0 X
0 K
(has been aborted\051. The top row refers to normal returns where there is no exception.) 152.1 390 T
1 10 Q
(Return value) 162.42 620.73 T
(from) 162.14 608.73 T
3 F
(catch) 184.07 608.73 T
1 F
(Description) 268.75 614.73 T
(Caught by) 415.38 614.73 T
1 9 Q
(0) 185.85 593.4 T
(Normal return. String gives return) 226.07 593.4 T
(value.) 226.07 584.4 T
(Not applicable) 370.07 593.4 T
(1) 185.85 571.4 T
(Error) 226.07 571.4 T
(. String gives message describ-) 244.54 571.4 T
(ing the problem.) 226.07 562.4 T
3 F
(Catch) 370.07 571.4 T
1 F
(2) 185.85 549.4 T
(The) 226.07 549.4 T
3 F
(return) 242.29 549.4 T
1 F
( command was) 274.64 549.4 T
(invoked. String gives return value) 226.07 540.4 T
(for procedure or) 226.07 531.4 T
3 F
(source) 286.7 531.4 T
1 F
( com-) 319.06 531.4 T
(mand.) 226.07 522.4 T
3 F
(Catch) 370.07 549.4 T
1 F
(,) 397.03 549.4 T
3 F
(source) 401.52 549.4 T
1 F
(, procedures) 433.88 549.4 T
(3) 185.85 509.4 T
-0.16 (The) 226.07 509.4 P
3 F
-0.38 (break) 242.13 509.4 P
1 F
-0.16 ( command was invoked.) 269.09 509.4 P
(String is empty) 226.07 500.4 T
(.) 280.41 500.4 T
3 F
(Catch) 370.07 509.4 T
1 F
(,) 397.03 509.4 T
3 F
(for) 401.52 509.4 T
1 F
(,) 417.34 509.4 T
3 F
(foreach) 421.83 509.4 T
1 F
(,) 459.58 509.4 T
3 F
(while) 464.08 509.4 T
1 F
(,) 491.04 509.4 T
(procedures) 370.07 500.4 T
(4) 185.85 487.4 T
(The) 226.07 487.4 T
3 F
(continue) 242.29 487.4 T
1 F
( command was) 285.43 487.4 T
(invoked. String is empty) 226.07 478.4 T
(.) 313.86 478.4 T
3 F
(Catch) 370.07 487.4 T
1 F
(,) 397.03 487.4 T
3 F
(for) 401.52 487.4 T
1 F
(,) 417.34 487.4 T
3 F
(foreach) 421.83 487.4 T
1 F
(,) 459.58 487.4 T
3 F
(while) 464.08 487.4 T
1 F
(,) 491.04 487.4 T
(procedures) 370.07 478.4 T
2 F
(anything else) 164.26 465.4 T
1 F
(De\336ned by user or application.) 226.07 465.4 T
3 F
(Catch) 370.07 465.4 T
156.13 631.15 156.13 460.65 2 L
V
0.5 H
0 Z
N
220.07 631.65 220.07 460.15 2 L
V
N
364.07 631.65 364.07 460.15 2 L
V
N
508.07 631.15 508.07 460.65 2 L
V
N
155.88 631.4 508.32 631.4 2 L
V
N
156.38 602.65 507.82 602.65 2 L
V
N
156.38 600.15 507.82 600.15 2 L
V
N
155.88 579.4 508.32 579.4 2 L
V
N
155.88 557.4 508.32 557.4 2 L
V
N
155.88 517.4 508.32 517.4 2 L
V
N
155.88 495.4 508.32 495.4 2 L
V
N
155.88 473.4 508.32 473.4 2 L
V
N
155.88 460.4 508.32 460.4 2 L
V
N
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "82" 91
%%Page: "83" 91
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(9.4 Exceptions in general) 98.1 668.33 T
4 F
(83) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 9 Q
0 X
(proc do {varName f) 179.1 633 T
(irst last body} {) 276.16 633 T
(global errorInfo errorCode) 200.63 623 T
(upvar $varName v) 200.63 613 T
(for {set v $f) 200.63 603 T
(irst} {$v <= $last} {incr v} {) 270.73 603 T
(switch [catch {uplevel $body} string] {) 222.23 593 T
(1 {return -code error -errorinfo $errorInfo \134) 243.76 583 T
(-errorCode $errorcode $string}) 286.81 573 T
(2 {return -code return $string}) 243.76 563 T
(3 return) 243.76 553 T
(}) 222.23 543 T
(}) 200.63 533 T
(}) 179.1 523 T
1 10 Q
(This new implemenation evaluates the loop body inside a) 152.1 509.33 T
3 F
(catch) 384.45 509.33 T
1 F
( command and then) 414.44 509.33 T
(checks to see how the body terminates. If no exception occurs \050return value 0 from) 152.1 497.33 T
3 F
(catch) 152.1 485.33 T
1 F
(\051 or if the exception is a continue \050return value 4\051 then) 182.08 485.33 T
3 F
(do) 400.8 485.33 T
1 F
( just goes on to the next) 412.8 485.33 T
(iteration. If an error or return occurs \050return value 1 or 2 from) 152.1 473.33 T
3 F
(catch) 400.77 473.33 T
1 F
(\051 then) 430.76 473.33 T
3 F
(do) 456.29 473.33 T
1 F
( uses the) 468.29 473.33 T
3 F
(return) 152.1 461.33 T
1 F
( command to re\337ect the exception upward to the caller) 188.08 461.33 T
(. If a break exception) 405.42 461.33 T
(occurs \050return value 3 from) 152.1 449.33 T
3 F
(catch) 263.95 449.33 T
1 F
(\051 then) 293.93 449.33 T
3 F
(do) 319.47 449.33 T
1 F
( returns to its caller normally) 331.46 449.33 T
(, ending the) 446.57 449.33 T
(loop.) 152.1 437.33 T
(When) 170.1 425.33 T
3 F
(do) 196.46 425.33 T
1 F
( re\337ects an error upwards it uses the) 208.46 425.33 T
3 F
(-errorinfo) 355.01 425.33 T
1 F
( option to) 414.98 425.33 T
3 F
(return) 455.79 425.33 T
1 F
( to) 491.77 425.33 T
(make sure that a proper stack trace is available after the error) 152.1 413.33 T
(. If that option were omitted) 395.5 413.33 T
(then a fresh stack trace would be generated starting with) 152.1 401.33 T
3 F
(do) 379.7 401.33 T
1 F
(\325) 391.69 401.33 T
(s error return; the stack trace) 394.47 401.33 T
(would not indicate where in) 152.1 389.33 T
3 F
(body) 266.19 389.33 T
1 F
( the error occurred. The context within) 290.17 389.33 T
3 F
(body) 447.27 389.33 T
1 F
( is avail-) 471.26 389.33 T
(able in the) 152.1 377.33 T
3 F
(errorInfo) 196.24 377.33 T
1 F
( variable at the time) 250.21 377.33 T
3 F
(catch) 332.09 377.33 T
1 F
( returns, and the) 362.08 377.33 T
3 F
(-) 428.97 377.33 T
(errorinfo) 434.96 377.33 T
1 F
(option causes this value to be used as the initial contents of the stack trace when) 152.1 365.33 T
3 F
(do) 474.65 365.33 T
1 F
-0.32 (returns an error) 152.1 353.33 P
-0.32 (. As additional unwinding occurs more information gets added to the initial) 212.52 353.33 P
(value, so that the \336nal stack trace includes both the context within) 152.1 341.33 T
3 F
(body) 418.31 341.33 T
1 F
( and the context) 442.3 341.33 T
-0.16 (of the call to) 152.1 329.33 P
3 F
-0.39 (do) 204.19 329.33 P
1 F
-0.16 (. The) 216.19 329.33 P
3 F
-0.39 (-errorcode) 238.9 329.33 P
1 F
-0.16 ( option serves a similar purpose for the) 298.87 329.33 P
3 F
-0.39 (errorCode) 455.79 329.33 P
1 F
(variable, retaining the) 152.1 317.33 T
3 F
(errorCode) 242.03 317.33 T
1 F
( value from the original error as the) 296 317.33 T
3 F
(errorCode) 440.33 317.33 T
1 F
(value when) 152.1 305.33 T
3 F
(do) 200.39 305.33 T
1 F
( propagates the error) 212.39 305.33 T
(. W) 294.26 305.33 T
(ithout the) 308.29 305.33 T
3 F
(-errorcode) 348.83 305.33 T
1 F
( option the) 408.8 305.33 T
3 F
(errorCode) 454.05 305.33 T
1 F
(variable will always end up with the value) 152.1 293.33 T
3 F
(NONE) 323.65 293.33 T
1 F
(.) 347.63 293.33 T
FMENDPAGE
%%EndPage: "83" 92
%%Page: "84" 92
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(84) 98.1 668.33 T
5 F
(Errors and Exceptions) 413.78 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
FMENDPAGE
%%EndPage: "84" 93
%%Page: "85" 93
612 792 0 FMBEGINPAGE
98.1 675 512.1 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
98.1 450 512.1 450 2 L
7 X
V
2 Z
0 X
N
98.1 108 512.1 126 R
7 X
V
4 10 Q
0 X
(85) 500.99 119.33 T
98.1 54 512.1 108 R
7 X
V
1 9 Q
0 X
(Copyright \251 1993 Addison-W) 152.1 102 T
(esley Publishing Company) 261.32 102 T
(, Inc.) 357.1 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 152.1 91 T
(. Any) 485.77 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 152.1 80 T
-0.34 (lisher) 152.1 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 171.58 69 P
(does not of) 152.1 58 T
(fer warranties in regard to this draft.) 191.88 58 T
0 24 Q
(Chapter 10) 152.1 605 T
-0.48 (String Manipulation) 152.1 575 S
98.1 135 512.1 423 R
7 X
V
1 10 Q
0 X
(This chapter describes T) 152.1 416.33 T
(cl\325) 249.38 416.33 T
(s facilities for manipulating strings. The string manipulation) 259.37 416.33 T
-0.39 (commands provide pattern matching in two dif) 152.1 404.33 P
-0.39 (ferent forms, one that mimics the rules used) 337.26 404.33 P
-0.23 (by shells for \336le name expansion and another that uses regular expressions as patterns. T) 152.1 392.33 P
-0.23 (cl) 502.62 392.33 P
(also has commands for formatted input and output in a style similar to the C procedures) 152.1 380.33 T
3 F
(scanf) 152.1 368.33 T
1 F
( and) 182.08 368.33 T
3 F
(printf) 201.51 368.33 T
1 F
(. Finally) 237.49 368.33 T
(, there are several utility commands with functions such as) 270.17 368.33 T
-0.04 (computing the length of a string, extracting characters from a string, and case conversion.) 152.1 356.33 P
(T) 152.1 344.33 T
(ables10.1 and 10.2 summarize the T) 157.51 344.33 T
(cl commands for string processing.) 301.43 344.33 T
98.1 300.98 512.1 304 C
152.1 302.2 512.1 302.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 302.49 143.1 302.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(10.1) 117.96 308 T
(Glob-style pattern matching) 152.1 308 T
1 10 Q
(The simplest of T) 152.1 284.31 T
(cl\325) 222.19 284.31 T
(s two forms of pattern matching is called \322glob\323 style. It is named) 232.19 284.31 T
(after the mechanism used in the) 152.1 272.31 T
3 F
(csh) 281.45 272.31 T
1 F
( shell for \336le name expansion, which is called \322glob-) 299.44 272.31 T
(bing\323. Glob-style matching is easier to learn and use than the regular expressions) 152.1 260.31 T
(described in the next two sections, but it only works well for simple cases. For more com-) 152.1 248.31 T
(plex pattern matching you will probably need to use regular expressions.) 152.1 236.31 T
(The command) 170.1 224.31 T
3 F
(string match) 230.06 224.31 T
1 F
( implements glob-style pattern matching. For exam-) 302.02 224.31 T
(ple, the following script extracts all of the elements of a list that begin with \322) 152.1 212.31 T
3 F
(Tcl) 459.12 212.31 T
1 F
(\323:) 477.11 212.31 T
3 9 Q
(set new {}) 179.1 197.98 T
(foreach el $list {) 179.1 187.98 T
(if [string match Tcl* $el] {) 200.63 177.98 T
(lappend new $el) 222.23 167.98 T
(}) 200.63 157.98 T
(}) 179.1 147.98 T
44.1 351 89.1 423 C
53.1 360 215.1 414 R
7 X
0 K
V
0 9 Q
0 X
(FIGURE  10) 53.1 408 T
(T) 53.1 387 T
(ABLE  10) 58.43 387 T
44.1 351 143.1 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "85" 94
%%Page: "86" 94
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(86) 98.1 668.33 T
5 F
(String Manipulation) 426.56 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 138.6 512.1 639 C
98.1 194.63 512.1 209.03 C
98.1 194.63 512.1 209.03 R
7 X
0 K
V
152.1 202.55 512.1 202.55 2 L
V
0.5 H
2 Z
0 X
N
98.1 138.6 512.1 639 C
98.1 171.23 512.1 185.63 C
98.1 171.23 512.1 185.63 R
7 X
0 K
V
152.1 179.15 512.1 179.15 2 L
V
0.5 H
2 Z
0 X
N
98.1 138.6 512.1 639 C
0 9 Q
0 X
0 K
(T) 152.1 188.63 T
(able  10.1.) 157.27 188.63 T
1 F
(A summary of the T) 200.21 188.63 T
(cl commands for string manipulation \050continued in T) 272.47 188.63 T
(able 10.2\051.) 462.31 188.63 T
3 F
(format) 158.1 624.03 T
7 F
(formatString) 195.85 624.03 T
1 F
(?) 265.95 624.03 T
7 F
(value value) 269.94 624.03 T
1 F
(...?) 334.65 624.03 T
(Returns a result equal to) 230.1 615.03 T
7 F
(formatString) 319.71 615.03 T
1 F
( except that the) 384.42 615.03 T
7 F
(value) 441.33 615.03 T
1 F
(ar) 230.1 606.03 T
(guments have been substituted in place of) 236.92 606.03 T
3 10 Q
(%) 389.44 606.03 T
1 9 Q
( sequences in) 395.43 606.03 T
7 F
(formatString) 230.1 597.03 T
1 F
(.) 294.81 597.03 T
3 F
(regexp) 158.1 578.03 T
1 F
(?) 195.85 578.03 T
3 F
(-indices) 199.84 578.03 T
1 F
(? ?) 242.98 578.03 T
3 F
(-nocase) 253.2 578.03 T
1 F
(?) 290.95 578.03 T
(?) 300.33 578.03 T
3 F
(--) 304.33 578.03 T
1 F
(?) 315.11 578.03 T
7 F
( exp string) 319.1 578.03 T
1 F
(?) 383.81 578.03 T
7 F
(matchVar) 387.8 578.03 T
1 F
(?) 430.94 578.03 T
3 F
( \134) 434.93 578.03 T
1 F
(?) 176.07 569.03 T
7 F
(subVar subVar) 180.07 569.03 T
1 F
(...?) 255.56 569.03 T
(Determines whether the regular expression) 230.1 560.03 T
7 F
(exp) 386.59 560.03 T
1 F
( matches part or all of) 402.77 560.03 T
7 F
(string) 230.1 551.03 T
1 F
( and returns) 262.45 551.03 T
3 10 Q
(1) 307.13 551.03 T
1 9 Q
( if it does,) 313.13 551.03 T
3 10 Q
(0) 351.32 551.03 T
1 9 Q
( if it doesn\325) 357.32 551.03 T
(t. If there is a match,) 398.35 551.03 T
(information about matching range\050s\051 is placed in the variables named by) 230.1 542.03 T
7 F
(matchVar) 230.1 533.03 T
1 F
( and the) 273.24 533.03 T
7 F
(subVar) 303.94 533.03 T
1 F
(\325) 336.63 533.03 T
(s, if they are speci\336ed.) 339.13 533.03 T
3 F
(regsub) 158.1 514.03 T
1 F
(?) 195.85 514.03 T
7 F
(-all) 199.84 514.03 T
1 F
(?) 221.41 514.03 T
(?) 230.79 514.03 T
7 F
(-nocase) 234.78 514.03 T
1 F
(?) 272.53 514.03 T
(?) 281.91 514.03 T
3 F
(--) 285.9 514.03 T
1 F
(?) 296.68 514.03 T
7 F
(exp string subSpec varName) 306.07 514.03 T
1 F
(Matches) 230.1 505.03 T
7 F
(exp) 262.8 505.03 T
1 F
( against) 278.97 505.03 T
7 F
(string) 308.93 505.03 T
1 F
( as for) 341.28 505.03 T
3 F
(regexp) 365.99 505.03 T
1 F
( and returns) 398.34 505.03 T
3 10 Q
(1) 443.02 505.03 T
1 9 Q
( if there is a) 449.02 505.03 T
(match,) 230.1 496.03 T
3 F
(0) 256.56 496.03 T
1 F
( if there is none. Also copies) 261.95 496.03 T
7 F
(string) 366.79 496.03 T
1 F
( to the variable named by) 399.14 496.03 T
7 F
(varName) 230.1 487.03 T
1 F
(, making substitutions for the matching portion\050s\051 as speci\336ed by) 267.85 487.03 T
7 F
(subSpec) 230.1 478.03 T
1 F
(.) 267.85 478.03 T
3 F
(scan) 158.1 459.03 T
7 F
(string format varName) 185.06 459.03 T
1 F
(?) 303.7 459.03 T
7 F
(varName varName) 307.69 459.03 T
1 F
(...?) 393.96 459.03 T
(Parses \336elds from) 230.1 450.03 T
7 F
(string) 296.75 450.03 T
1 F
( as speci\336ed by) 329.11 450.03 T
7 F
(format) 386.52 450.03 T
1 F
( and places the values) 418.87 450.03 T
(that match) 230.1 441.03 T
3 10 Q
(%) 270.04 441.03 T
1 9 Q
( sequences into variables named by the) 276.04 441.03 T
7 F
(varName) 418.56 441.03 T
1 F
( ar) 456.31 441.03 T
(guments.) 465.37 441.03 T
3 F
(string compare) 158.1 422.03 T
7 F
(string1 string2) 238.99 422.03 T
1 F
(Returns) 230.1 413.03 T
3 10 Q
(-1) 260.31 413.03 T
1 9 Q
(,) 272.3 413.03 T
3 10 Q
(0) 276.79 413.03 T
1 9 Q
(, or) 282.79 413.03 T
3 10 Q
(1) 297.02 413.03 T
1 9 Q
( if) 303.01 413.03 T
7 F
(string1) 313 413.03 T
1 F
( is lexicographically less than, equal to, or) 350.75 413.03 T
(greater than) 230.1 404.03 T
7 F
(string2) 275.02 404.03 T
1 F
(.) 312.77 404.03 T
3 F
(string f) 158.1 395.03 T
(irst) 201.24 395.03 T
7 F
(string1 string2) 228.2 395.03 T
1 F
(Returns the index in) 230.1 386.03 T
7 F
(string2) 304.99 386.03 T
1 F
( of the \336rst character in the leftmost) 342.74 386.03 T
(substring that exactly matches the characters in) 230.1 377.03 T
7 F
(string1) 402.07 377.03 T
1 F
(, or) 439.82 377.03 T
3 10 Q
(-1) 454.05 377.03 T
1 9 Q
( if there is) 466.04 377.03 T
(no such match.) 230.1 368.03 T
3 F
(string index) 158.1 359.03 T
7 F
(string charIndex) 228.2 359.03 T
1 F
(Returns the) 230.1 350.03 T
7 F
(charIndex) 273.54 350.03 T
1 F
(\325) 322.07 350.03 T
(th character of) 324.9 350.03 T
7 F
(string) 379.05 350.03 T
1 F
(, or an empty string if) 411.4 350.03 T
(there is no such character) 230.1 341.03 T
(. The \336rst character in) 320.94 341.03 T
7 F
(string) 402.31 341.03 T
1 F
( has index 0.) 434.66 341.03 T
3 F
(string last) 158.1 332.03 T
7 F
(string1 string2) 222.81 332.03 T
1 F
(Returns the index in) 230.1 323.03 T
7 F
(string2) 304.99 323.03 T
1 F
( of the \336rst character in the rightmost) 342.74 323.03 T
(substring of) 230.1 314.03 T
7 F
(string2) 275.04 314.03 T
1 F
( that exactly matches) 312.78 314.03 T
7 F
(string1) 390.66 314.03 T
1 F
(. If there is no) 428.41 314.03 T
(matching substring then) 230.1 305.03 T
3 10 Q
(-1) 318.72 305.03 T
1 9 Q
( is returned.) 330.72 305.03 T
3 F
(string length) 158.1 296.03 T
7 F
(string) 233.59 296.03 T
1 F
(Returns the number of characters in) 230.1 287.03 T
7 F
(string) 360.88 287.03 T
1 F
(.) 393.24 287.03 T
3 F
(string match) 158.1 278.03 T
7 F
(pattern string) 228.2 278.03 T
1 F
(Returns) 230.1 269.03 T
3 10 Q
(1) 260.31 269.03 T
1 9 Q
( if) 266.3 269.03 T
7 F
(pattern) 276.29 269.03 T
1 F
( matches) 314.04 269.03 T
7 F
(string) 347.98 269.03 T
1 F
( using glob-style matching rules) 380.33 269.03 T
(\050) 230.1 260.03 T
3 F
(*) 233.09 260.03 T
1 F
(,) 238.49 260.03 T
3 F
(?) 242.98 260.03 T
1 F
(,) 248.37 260.03 T
3 F
([]) 252.86 260.03 T
1 F
(, and) 263.65 260.03 T
3 F
(\134) 287.12 260.03 T
1 F
(\051 and) 292.51 260.03 T
3 10 Q
(0) 312.97 260.03 T
1 9 Q
( if it doesn\325) 318.97 260.03 T
(t.) 360 260.03 T
3 F
(string range) 158.1 251.03 T
7 F
(string f) 228.2 251.03 T
(irst last) 271.34 251.03 T
1 F
(Returns the substring of) 230.1 242.03 T
7 F
(string) 318.47 242.03 T
1 F
( that lies between the indices given by) 350.83 242.03 T
7 F
(f) 230.1 233.03 T
(irst) 235.49 233.03 T
1 F
( and) 257.06 233.03 T
7 F
(last) 274.53 233.03 T
1 F
(, inclusive. An index of) 296.1 233.03 T
3 10 Q
(0) 382.72 233.03 T
1 9 Q
( refers to the \336rst character in) 388.72 233.03 T
(the string, and) 230.1 224.03 T
7 F
(last) 283.52 224.03 T
1 F
( may be) 305.09 224.03 T
3 F
(end) 335.79 224.03 T
1 F
( to refer to the last character of the string.) 351.97 224.03 T
152.1 635.78 152.1 217.28 2 L
V
0.5 H
0 Z
N
512.1 635.78 512.1 217.28 2 L
V
N
151.85 636.03 512.35 636.03 2 L
V
N
151.85 590.03 512.35 590.03 2 L
V
0.25 H
N
151.85 526.03 512.35 526.03 2 L
V
N
151.85 471.03 512.35 471.03 2 L
V
N
151.85 434.03 512.35 434.03 2 L
V
N
151.85 217.03 512.35 217.03 2 L
V
0.5 H
N
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "86" 95
%%Page: "87" 95
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(10.1 Glob-style pattern matching) 98.1 668.33 T
4 F
(87) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(The) 152.1 423.53 T
3 F
(string) 170.14 423.53 T
1 F
( command is actually about a dozen string-manipulation commands rolled) 206.12 423.53 T
(into one. If the \336rst ar) 152.1 411.53 T
(gument is) 239.08 411.53 T
3 F
(match) 280.73 411.53 T
1 F
( then the command performs glob-style pattern) 310.71 411.53 T
(matching and there must be two additional ar) 152.1 399.53 T
(guments, a pattern and a string. The com-) 332.63 399.53 T
(mand returns) 152.1 387.53 T
3 F
(1) 207.06 387.53 T
1 F
( if the pattern matches the string,) 213.06 387.53 T
3 F
(0) 346.85 387.53 T
1 F
( if it doesn\325) 352.85 387.53 T
(t. For the pattern to match) 398.48 387.53 T
-0.31 (the string, each character of the pattern must be the same as the corresponding character of) 152.1 375.53 P
(the string, except that a few pattern characters are interpreted specially) 152.1 363.53 T
(. For example, a) 433.7 363.53 T
3 F
(*) 500.88 363.53 T
1 F
-0.29 (in the pattern matches a substring of any length, so \322) 152.1 351.53 P
3 F
-0.69 (Tcl*) 359.37 351.53 P
1 F
-0.29 (\323 matches any string whose \336rst) 383.35 351.53 P
(three characters are \322) 152.1 339.53 T
3 F
(Tcl) 236.72 339.53 T
1 F
(\323. Here is a list of all the special characters supported in glob-) 254.71 339.53 T
(style matching:) 152.1 327.53 T
(Many simple things can be done easily with glob-style patterns. For example,) 170.1 227.53 T
-0.23 (\322) 152.1 215.53 P
3 F
-0.54 (*.[ch]) 156.54 215.53 P
1 F
-0.23 (\323 matches all strings that end with either \322) 192.52 215.53 P
3 F
-0.54 (.c) 358.93 215.53 P
1 F
-0.23 (\323 or \322) 370.92 215.53 P
3 F
-0.54 (.h) 392.66 215.53 P
1 F
-0.23 (\323. However) 404.66 215.53 P
-0.23 (, many interest-) 450.1 215.53 P
(ing forms of pattern matching cannot be expressed at all with glob-style patterns. For) 152.1 203.53 T
(example, there is no way to use a glob-style pattern to test whether a string consists) 152.1 191.53 T
(entirely of digits: the pattern \322) 152.1 179.53 T
3 F
([0-9]) 272.85 179.53 T
1 F
(\323 tests for a single digit, but there is no way to spec-) 302.84 179.53 T
(ify that there may be more than one digit.) 152.1 167.53 T
3 F
(*) 179.1 312.53 T
1 F
(Matches any sequence of zero or more characters.) 231.3 312.53 T
3 F
(?) 179.1 299.53 T
1 F
(Matches any single character) 231.3 299.53 T
(.) 347.04 299.53 T
3 F
([) 179.1 286.53 T
7 F
(chars) 185.1 286.53 T
3 F
(]) 215.08 286.53 T
1 F
(Matches any single character in) 231.3 286.53 T
7 F
(chars) 360.36 286.53 T
1 F
(. If) 390.34 286.53 T
7 F
(chars) 404.49 286.53 T
1 F
( contains a) 434.48 286.53 T
(sequence of the form) 231.3 276.53 T
7 F
(a) 317.89 276.53 T
3 F
(-) 323.89 276.53 T
7 F
(b) 329.89 276.53 T
1 F
( then any character between) 335.88 276.53 T
7 F
(a) 449.94 276.53 T
1 F
( and) 455.94 276.53 T
7 F
(b) 475.36 276.53 T
1 F
(,) 481.36 276.53 T
(inclusive, will match.) 231.3 266.53 T
3 F
(\134) 179.1 253.53 T
7 F
(x) 185.1 253.53 T
1 F
-0.11 (Matches the single character) 231.3 253.53 P
7 F
-0.25 (x) 347.44 253.53 P
1 F
-0.11 (. This provides a way to avoid special) 353.44 253.53 P
(interpretation for any of the characters) 231.3 243.53 T
3 F
(*?[]\134) 387.27 243.53 T
1 F
( in the pattern.) 417.26 243.53 T
98.1 430.2 512.1 639 C
98.1 479 512.1 493.4 C
98.1 479 512.1 493.4 R
7 X
0 K
V
152.1 486.92 512.1 486.92 2 L
V
0.5 H
2 Z
0 X
N
98.1 430.2 512.1 639 C
98.1 455.6 512.1 470 C
98.1 455.6 512.1 470 R
7 X
0 K
V
152.1 463.52 512.1 463.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 430.2 512.1 639 C
0 9 Q
0 X
0 K
(T) 152.1 473 T
(able  10.2.) 157.27 473 T
1 F
(A summary of the T) 200.21 473 T
(cl commands for string manipulation, cont\325d.) 272.47 473 T
3 F
(string tolower) 158.1 625.4 T
7 F
(string) 238.99 625.4 T
1 F
(Returns a value identical to) 230.1 616.4 T
7 F
(string) 330.7 616.4 T
1 F
( except that all upper case characters) 363.05 616.4 T
(have been converted to lower case.) 230.1 607.4 T
3 F
(string toupper) 158.1 598.4 T
7 F
(string) 238.99 598.4 T
1 F
(Returns a value identical to) 230.1 589.4 T
7 F
(string) 330.7 589.4 T
1 F
( except that all lower case characters) 363.05 589.4 T
(have been converted to upper case.) 230.1 580.4 T
3 F
(string trim) 158.1 571.4 T
7 F
(string) 222.81 571.4 T
1 F
(?) 260.56 571.4 T
7 F
(chars) 264.55 571.4 T
1 F
(?) 291.51 571.4 T
(Returns a value identical to) 230.1 562.4 T
7 F
(string) 330.7 562.4 T
1 F
( except that any leading or trailing) 363.05 562.4 T
(characters that appear in) 230.1 553.4 T
7 F
(chars) 319.94 553.4 T
1 F
( are removed.) 346.9 553.4 T
7 F
(Chars) 398.31 553.4 T
1 F
( defaults to the white) 425.27 553.4 T
(space characters \050space, tab, newline, and carriage return\051.) 230.1 544.4 T
3 F
(string trimleft) 158.1 535.4 T
7 F
(string) 244.38 535.4 T
1 F
(?) 282.13 535.4 T
7 F
(chars) 286.12 535.4 T
1 F
(?) 313.08 535.4 T
(Same as) 230.1 526.4 T
3 F
(string trim) 262.05 526.4 T
1 F
( except that only leading characters are removed.) 321.37 526.4 T
3 F
(string trimright) 158.1 517.4 T
7 F
(string) 249.77 517.4 T
1 F
(?) 287.52 517.4 T
7 F
(chars) 291.51 517.4 T
1 F
(?) 318.47 517.4 T
(Same as) 230.1 508.4 T
3 F
(string trim) 262.05 508.4 T
1 F
( except that only trailing characters are removed.) 321.37 508.4 T
152.1 637.15 152.1 501.65 2 L
V
0.5 H
0 Z
N
512.1 637.15 512.1 501.65 2 L
V
N
151.85 637.4 512.35 637.4 2 L
V
N
151.85 501.4 512.35 501.4 2 L
V
N
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "87" 96
%%Page: "88" 96
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(88) 98.1 668.33 T
5 F
(String Manipulation) 426.56 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 328.78 512.1 331.8 C
152.1 330 512.1 330 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 330.29 143.1 330.29 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(10.2) 117.96 335.8 T
(Pattern matching with regular expressions) 152.1 335.8 T
1 10 Q
(T) 152.1 312.11 T
(cl\325) 157.51 312.11 T
(s second form of pattern matching uses regular expressions like those for the) 167.5 312.11 T
3 F
(egrep) 476.44 312.11 T
1 F
(program. Regular expressions are more complex than glob-style patterns but more power-) 152.1 299.63 T
(ful. T) 152.1 287.15 T
(cl\325) 173.61 287.15 T
(s regular expressions are based on Henry Spencer) 183.6 287.15 T
(\325) 382.41 287.15 T
(s publicly available implemen-) 385.19 287.15 T
(tation, and parts of the description below are copied from Spencer) 152.1 274.67 T
(\325) 416.43 274.67 T
(s documentation.) 419.21 274.67 T
(A regular expression pattern can have several layers of structure. The basic building) 170.1 262.67 T
(blocks are called) 152.1 250.18 T
2 F
(atoms) 221.76 250.18 T
1 F
(, and the simplest form of regular expression consists of one or) 245.64 250.18 T
-0.26 (more atoms. For a regular expression to match an input string, there must be a substring of) 152.1 237.7 P
-0.2 (the input where each of the regular expression\325) 152.1 225.22 P
-0.2 (s atoms \050or other components, as you\325ll see) 338.02 225.22 P
(below\051 matches the corresponding part of the substring. In most cases atoms are single) 152.1 212.74 T
(characters, each of which matches itself. Thus the regular expression) 152.1 200.26 T
3 F
(abc) 429.65 200.26 T
1 F
( matches any) 447.64 200.26 T
(string containing) 152.1 187.78 T
3 F
(abc) 222.06 187.78 T
1 F
(, such as) 240.05 187.78 T
3 F
(abcdef) 276.69 187.78 T
1 F
( or) 312.67 187.78 T
3 F
(xabcy) 325.99 187.78 T
1 F
(.) 355.33 187.78 T
(A number of characters have special meanings in regular expressions; they are sum-) 170.1 175.78 T
-0.21 (marized in T) 152.1 163.3 P
-0.21 (able 10.3. The characters) 202.06 163.3 P
3 F
-0.5 (^) 303.91 163.3 P
1 F
-0.21 ( and) 309.91 163.3 P
3 F
-0.5 ($) 328.92 163.3 P
1 F
-0.21 ( are atoms that match the beginning and end) 334.92 163.3 P
-0.09 (of the input string respectively; thus) 152.1 150.82 P
3 F
-0.22 (^abc) 298.14 150.82 P
1 F
-0.09 ( matches any string that starts with) 322.13 150.82 P
3 F
-0.22 (abc) 462.81 150.82 P
1 F
-0.09 (,) 480.8 150.82 P
3 F
-0.22 (abc$) 485.7 150.82 P
1 F
-0.33 (matches any string that ends in) 152.1 138.33 P
3 F
-0.78 (abc) 276.18 138.33 P
1 F
-0.33 (, and) 294.17 138.33 P
3 F
-0.78 (^abc$) 315.44 138.33 P
1 F
-0.33 ( matches) 345.43 138.33 P
3 F
-0.78 (abc) 382.52 138.33 P
1 F
-0.33 ( and nothing else. The atom) 400.52 138.33 P
98.1 343.8 512.1 639 C
98.1 384.6 512.1 399 C
98.1 384.6 512.1 399 R
7 X
0 K
V
152.1 392.52 512.1 392.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 343.8 512.1 639 C
98.1 361.2 512.1 375.6 C
98.1 361.2 512.1 375.6 R
7 X
0 K
V
152.1 369.12 512.1 369.12 2 L
V
0.5 H
2 Z
0 X
N
98.1 343.8 512.1 639 C
0 9 Q
0 X
0 K
(T) 152.1 378.6 T
(able  10.3.) 157.27 378.6 T
1 F
(The special characters permitted in regular expression patterns.) 200.21 378.6 T
1 10 Q
(Character\050s\051) 181.4 624.33 T
(Meaning) 361.28 624.33 T
3 9 Q
(.) 165.15 607 T
1 F
(Matches any single character) 259.05 607 T
(.) 363.12 607 T
3 F
(^) 165.15 594 T
1 F
(Matches the null string at the start of the input string.) 259.05 594 T
3 F
($) 165.15 581 T
1 F
(Matches the null string at the end of the input string.) 259.05 581 T
3 F
(\134) 165.15 568 T
7 F
(x) 170.54 568 T
1 F
(Matches the character) 259.05 568 T
7 F
(x) 340.15 568 T
1 F
(.) 345.55 568 T
3 F
([) 165.15 555 T
7 F
(chars) 170.54 555 T
3 F
(]) 197.51 555 T
1 F
-0.05 (Matches any single character from) 259.05 555 P
7 F
-0.13 (chars) 385.31 555 P
1 F
-0.05 (. If the \336rst character of) 412.28 555 P
7 F
-0.01 (chars) 259.05 546 P
1 F
-0 ( is) 286.01 546 P
3 F
-0.01 (^) 296.5 546 P
1 F
-0 ( then it matches any single character not in the remain-) 301.89 546 P
-0.22 (der of) 259.05 537 P
7 F
-0.52 (chars) 282.07 537 P
1 F
-0.22 (. A sequence of the form) 309.03 537 P
7 F
-0.52 (a) 398.81 537 P
3 F
-0.52 (-) 404.21 537 P
7 F
-0.52 (b) 409.6 537 P
1 F
-0.22 ( in) 414.99 537 P
7 F
-0.52 (chars) 426.04 537 P
1 F
-0.22 ( is treated as) 453 537 P
(shorthand for all of the ASCII characters between) 259.05 528 T
7 F
(a) 440.24 528 T
1 F
( and) 445.64 528 T
7 F
(b) 463.11 528 T
1 F
(, inclu-) 468.5 528 T
(sive. If the \336rst character in) 259.05 519 T
7 F
(chars) 360.13 519 T
1 F
( \050possibly following a) 387.09 519 T
3 F
(^) 467.98 519 T
1 F
(\051 is) 473.37 519 T
3 F
(]) 486.85 519 T
1 F
(then it is treated literally \050as part of) 259.05 510 T
7 F
(chars) 387.85 510 T
1 F
( instead of a termina-) 414.81 510 T
(tor\051. If a) 259.05 501 T
3 F
(-) 290.99 501 T
1 F
( appears \336rst or last in) 296.38 501 T
7 F
(chars) 378.26 501 T
1 F
( then it is treated literally) 405.22 501 T
(.) 494.75 501 T
3 F
(\050) 165.15 488 T
7 F
(regexp) 170.54 488 T
3 F
(\051) 202.9 488 T
1 F
(Matches anything that matches the regular expression) 259.05 488 T
7 F
(regexp) 454.49 488 T
1 F
(.) 486.85 488 T
(Used for grouping and for identifying pieces of the matching sub-) 259.05 479 T
(string.) 259.05 470 T
3 F
(*) 165.15 457 T
1 F
(Matches a sequence of 0 or more matches of the preceding atom.) 259.05 457 T
3 F
(+) 165.15 444 T
1 F
(Matches a sequence of 1 or more matches of the preceding atom.) 259.05 444 T
3 F
(?) 165.15 431 T
1 F
(Matches either a null string or a match of the preceding atom.) 259.05 431 T
7 F
(regexp1) 165.15 418 T
3 F
(|) 202.9 418 T
7 F
(regexp2) 208.29 418 T
1 F
(Matches anything that matches either) 259.05 418 T
7 F
(regexp1) 395.59 418 T
1 F
( or) 433.33 418 T
7 F
(regexp2) 445.31 418 T
1 F
(.) 483.06 418 T
159.15 634.75 159.15 413.25 2 L
V
0.5 H
0 Z
N
253.05 635.25 253.05 412.75 2 L
V
N
505.05 634.75 505.05 413.25 2 L
V
N
158.9 635 505.3 635 2 L
V
N
159.4 618.25 504.8 618.25 2 L
V
N
159.4 615.75 504.8 615.75 2 L
V
N
158.9 602 505.3 602 2 L
V
N
158.9 589 505.3 589 2 L
V
N
158.9 576 505.3 576 2 L
V
N
158.9 563 505.3 563 2 L
V
N
158.9 496 505.3 496 2 L
V
N
158.9 465 505.3 465 2 L
V
N
158.9 452 505.3 452 2 L
V
N
158.9 439 505.3 439 2 L
V
N
158.9 426 505.3 426 2 L
V
N
158.9 413 505.3 413 2 L
V
N
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "88" 97
%%Page: "89" 97
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(10.2 Pattern matching with regular expressions) 98.1 668.33 T
4 F
(89) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(\322) 152.1 632.33 T
3 F
(.) 156.54 632.33 T
1 F
(\323 matches any single character) 162.53 632.33 T
(, and the atom) 284.25 632.33 T
3 F
(\134) 343.38 632.33 T
7 F
(x) 349.37 632.33 T
1 F
(, where) 355.37 632.33 T
3 F
(x) 387.28 632.33 T
1 F
( is any single character) 393.28 632.33 T
(,) 484.47 632.33 T
(matches) 152.1 620.33 T
3 F
(x) 187.35 620.33 T
1 F
(. For example, the regular expression \322) 193.35 620.33 T
3 F
(.\134$) 348.78 620.33 T
1 F
(\323 matches any string that contains a) 366.77 620.33 T
(dollar) 152.1 608.33 T
(-sign, as long as the dollar) 175.22 608.33 T
(-sign isn\325) 279.95 608.33 T
(t the \336rst character) 317.25 608.33 T
(.) 391.36 608.33 T
(Besides the atoms already described, there are two other forms for atoms in regular) 170.1 596.33 T
(expressions. The \336rst form consists of any regular expression enclosed in parentheses,) 152.1 584.33 T
-0.36 (such as \322) 152.1 572.33 P
3 F
-0.86 (\050a.b\051) 187.46 572.33 P
1 F
-0.36 (\323. Parentheses are used for grouping. They allow operators such as) 217.45 572.33 P
3 F
-0.86 (*) 482.47 572.33 P
1 F
-0.36 ( to be) 488.46 572.33 P
-0.38 (applied to entire regular expressions as well as atoms. They are also used to identify pieces) 152.1 560.33 P
-0.06 (of the matching substring for special processing. Both of these uses are described in more) 152.1 548.33 P
(detail below) 152.1 536.33 T
(.) 200.58 536.33 T
(The \336nal form for an atom is a) 170.1 524.33 T
2 F
(range) 295.01 524.33 T
1 F
(, which is a collection of characters between) 318.33 524.33 T
(square brackets. A range matches any single character that is one of the ones between the) 152.1 512.33 T
(brackets. Furthermore, if there is a sequence of the form) 152.1 500.33 T
7 F
(a) 379.14 500.33 T
3 F
(-) 385.13 500.33 T
7 F
(b) 391.13 500.33 T
1 F
( among the characters, then) 397.12 500.33 T
(all of the ASCII characters between) 152.1 488.33 T
7 F
(a) 297.53 488.33 T
1 F
( and) 303.53 488.33 T
7 F
(b) 322.96 488.33 T
1 F
( are treated as acceptable. Thus the regular) 328.95 488.33 T
(expression) 152.1 476.33 T
3 F
([0-9a-fA-F]) 197.35 476.33 T
1 F
( matches any string that contains a hexadecimal digit. If the) 263.31 476.33 T
(character after the) 152.1 464.33 T
3 F
([) 226.74 464.33 T
1 F
( is a) 232.74 464.33 T
3 F
(^) 251.34 464.33 T
1 F
( then the sense of the range is reversed: it only matches charac-) 257.33 464.33 T
(ters) 152.1 452.33 T
3 F
(not) 169.03 452.33 T
1 F
( among those speci\336ed between the) 187.02 452.33 T
3 F
(^) 331.36 452.33 T
1 F
( and the) 337.36 452.33 T
3 F
(]) 371.5 452.33 T
1 F
(.) 377.5 452.33 T
-0.34 (The three operators) 170.1 440.33 P
3 F
-0.8 (*) 249.3 440.33 P
1 F
-0.34 (,) 255.3 440.33 P
3 F
-0.8 (+) 259.96 440.33 P
1 F
-0.34 (, and) 265.96 440.33 P
3 F
-0.8 (?) 287.21 440.33 P
1 F
-0.34 ( may follow an atom to specify repetition. If an atom is) 293.21 440.33 P
-0.24 (followed by) 152.1 428.33 P
3 F
-0.58 (*) 202.14 428.33 P
1 F
-0.24 ( then it matches a sequence of zero or more matches of that atom. If an atom) 208.13 428.33 P
(is followed by) 152.1 416.33 T
3 F
(+) 211.79 416.33 T
1 F
( then it matches a sequence of one or more matches of the atom. If an) 217.78 416.33 T
(atom is followed by) 152.1 404.33 T
3 F
(?) 234.27 404.33 T
1 F
( then it matches either an empty string or a match of the atom. For) 240.27 404.33 T
(example, \322) 152.1 392.33 T
3 F
(^\0500x\051?[0-9a-fA-F]+$) 195.4 392.33 T
1 F
(\323 matches strings that are proper hexadecimal) 309.33 392.33 T
(numbers, i.e. those consisting of an optional) 152.1 380.33 T
3 F
(0x) 330.88 380.33 T
1 F
( followed by one or more hexadecimal) 342.88 380.33 T
(digits.) 152.1 368.33 T
-0.13 (Finally) 170.1 356.33 P
-0.13 (, regular expressions may be joined together with the) 197.77 356.33 P
3 F
-0.32 (|) 410.87 356.33 P
1 F
-0.13 ( operator) 416.86 356.33 P
-0.13 (. The resulting) 451.98 356.33 P
(regular expression matches anything that matches either of the regular expresssions that) 152.1 344.33 T
(surround the) 152.1 332.33 T
3 F
(|) 204.84 332.33 T
1 F
(. For example, the following pattern matches any string that is either a) 210.84 332.33 T
(hexadecimal number or a decimal number:) 152.1 320.33 T
3 9 Q
(^\050\0500x\051?[0-9a-fA-F]+|[0-9]+\051$) 179.1 306 T
1 10 Q
( Note that the information between parentheses may be any regular expression, including) 152.1 292.33 T
(additional regular expressions in parentheses, so it is possible to build up quite complex) 152.1 280.33 T
(structures.) 152.1 268.33 T
(The) 170.1 256.33 T
3 F
(regexp) 188.14 256.33 T
1 F
( command invokes regular expression matching. In its simplest form it) 224.12 256.33 T
-0.29 (takes two ar) 152.1 244.33 P
-0.29 (guments: the regular expression pattern and an input string. It returns) 199.64 244.33 P
3 F
-0.69 (0) 475.16 244.33 P
1 F
-0.29 ( or) 481.16 244.33 P
3 F
-0.69 (1) 493.91 244.33 P
1 F
-0.29 ( to) 499.9 244.33 P
(indicate whether or not the pattern matched the input string:) 152.1 232.33 T
3 9 Q
(regexp {^[0-9]+$} 510) 179.1 218 T
6 F
(\336) 162.9 205 T
7 F
(1) 179.1 205 T
3 F
(regexp {^[0-9]+$} -510) 179.1 192 T
6 F
(\336) 162.9 179 T
7 F
(0) 179.1 179 T
2 10 Q
(Note:) 119.09 165.33 T
(The pattern must be enclosed in braces so that the characters) 152.1 165.33 T
7 F
($) 400.55 165.33 T
2 F
(,) 406.55 165.33 T
7 F
([) 411.55 165.33 T
2 F
(, and) 417.54 165.33 T
7 F
(]) 440.03 165.33 T
2 F
( ar) 446.03 165.33 T
(e passed) 457.04 165.33 T
(thr) 152.1 155.33 T
(ough to the) 163.39 155.33 T
7 F
(regexp) 210.87 155.33 T
2 F
( command instead of triggering variable and command) 246.85 155.33 T
FMENDPAGE
%%EndPage: "89" 98
%%Page: "90" 98
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(90) 98.1 668.33 T
5 F
(String Manipulation) 426.56 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(substitution. In almost always a good idea to enclose r) 152.1 632.33 T
(egular expr) 369.95 632.33 T
(ession patterns in) 415.93 632.33 T
(braces.) 152.1 621.89 T
1 F
-0.08 (If) 170.1 608.89 P
3 F
-0.2 (regexp) 179.17 608.89 P
1 F
-0.08 ( is invoked with additional ar) 215.15 608.89 P
-0.08 (guments after the input string then each addi-) 331.43 608.89 P
(tional ar) 152.1 596.44 T
(gument is treated as the name of a variable. The \336rst variable is \336lled in with the) 184.95 596.44 T
(substring that matched the entire regular expression. The second variable is \336lled in with) 152.1 583.99 T
(the portion of the substring that matched the leftmost parenthesized subexpression within) 152.1 571.54 T
(the pattern; the third variable is \336lled in with the match for the next parenthesized subex-) 152.1 559.09 T
(pression, and so on. If there are more variable names than parenthesized subexpressions) 152.1 546.64 T
(then the extra variables are set to empty strings. For example, after executing the com-) 152.1 534.19 T
(mand) 152.1 521.74 T
3 9 Q
(regexp {\050[0-9]+\051 *\050[a-z]+\051} "Walk 10 km" a b c) 179.1 507.41 T
1 10 Q
(variable) 152.1 493.74 T
3 F
(a) 186.79 493.74 T
1 F
( will have the value \322) 192.79 493.74 T
3 F
(10 km) 278 493.74 T
1 F
(\323,) 307.98 493.74 T
3 F
(b) 317.42 493.74 T
1 F
( will have the value) 323.42 493.74 T
3 F
(10) 404.19 493.74 T
1 F
(, and) 416.18 493.74 T
3 F
(c) 438.11 493.74 T
1 F
( will have the) 444.11 493.74 T
(value) 152.1 481.29 T
3 F
(km) 176.25 481.29 T
1 F
(. This ability to extract portions of the matching substring allows) 188.24 481.29 T
3 F
(regexp) 449.76 481.29 T
1 F
( to be) 485.74 481.29 T
(used for parsing.) 152.1 468.85 T
(It is also possible to specify two extra switches to) 170.1 456.85 T
3 F
(regexp) 370.53 456.85 T
1 F
( before the regular expres-) 406.51 456.85 T
(sion ar) 152.1 444.4 T
(gument. A) 178.85 444.4 T
3 F
(-nocase) 223.54 444.4 T
1 F
( switch speci\336es that alphabetic atoms should match either) 265.52 444.4 T
(upper) 152.1 431.95 T
(-case or lower) 174.66 431.95 T
(-case letters. For example:) 231.07 431.95 T
3 9 Q
(regexp {[a-z]} A) 179.1 417.61 T
6 F
(\336) 162.9 404.61 T
7 F
(0) 179.1 404.61 T
3 F
(regexp -nocase {[a-z]} A) 179.1 391.61 T
6 F
(\336) 162.9 378.61 T
7 F
(1) 179.1 378.61 T
1 10 Q
(The) 152.1 364.95 T
3 F
(-indices) 170.14 364.95 T
1 F
( switch speci\336es that the additional variables should not be \336lled in with) 218.11 364.95 T
(the values of matching substrings. Instead, each should be \336lled in with a list giving the) 152.1 352.5 T
(\336rst and last indices of the substring\325) 152.1 340.05 T
(s range within the input string. After the command) 299.24 340.05 T
3 9 Q
(regexp -indices {\050[0-9]+\051 *\050[a-z]+\051} "Walk 10 km" \134) 179.1 325.72 T
(a b c) 200.63 315.27 T
1 10 Q
(variable) 152.1 301.6 T
3 F
(a) 186.79 301.6 T
1 F
( will have the value \322) 192.79 301.6 T
3 F
(5 9) 278 301.6 T
1 F
(\323,) 295.99 301.6 T
3 F
(b) 305.43 301.6 T
1 F
( will have the value \322) 311.42 301.6 T
3 F
(5 6) 396.64 301.6 T
1 F
(\323, and) 414.63 301.6 T
3 F
(c) 440.99 301.6 T
1 F
( will have the) 446.99 301.6 T
(value \322) 152.1 289.15 T
3 F
(8 9) 180.68 289.15 T
1 F
(\323.) 198.67 289.15 T
98.1 245.79 512.1 248.82 C
152.1 247.02 512.1 247.02 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 247.31 143.1 247.31 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(10.3) 117.96 252.82 T
(Using regular expressions for substitutions) 152.1 252.82 T
1 10 Q
(Regular expressions can also be used to perform substitutions using the) 152.1 229.13 T
3 F
(regsub) 439.97 229.13 T
1 F
( com-) 475.95 229.13 T
(mand. Consider the following example:) 152.1 216.68 T
3 9 Q
(regsub there "They live there lives" their x) 179.1 202.35 T
6 F
(\336) 162.9 189.35 T
7 F
(1) 179.1 189.35 T
1 10 Q
(The \336rst ar) 152.1 175.68 T
(gument to) 195.78 175.68 T
3 F
(regsub) 238.53 175.68 T
1 F
( is a regular expression pattern and the second ar) 274.51 175.68 T
(gument is) 468.9 175.68 T
(an input string, just as for) 152.1 163.23 T
3 F
(regexp) 256.76 163.23 T
1 F
(. And, like) 292.74 163.23 T
3 F
(regexp) 337.44 163.23 T
1 F
(,) 373.42 163.23 T
3 F
(regsub) 378.42 163.23 T
1 F
( returns) 414.4 163.23 T
3 F
(1) 447.15 163.23 T
1 F
( if the pattern) 453.14 163.23 T
(matches the string,) 152.1 150.78 T
3 F
(0) 229.83 150.78 T
1 F
( if it doesn\325) 235.82 150.78 T
(t. However) 281.45 150.78 T
(,) 325.45 150.78 T
3 F
(regsub) 330.45 150.78 T
1 F
( does more than just check for a) 366.43 150.78 T
(match: it creates a new string by substituting a replacement value for the matching sub-) 152.1 138.33 T
FMENDPAGE
%%EndPage: "90" 99
%%Page: "91" 99
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(10.4 Generating strings with format) 98.1 668.33 T
4 F
(91) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
-0.02 (string. The replacement value is contained in the third ar) 152.1 632.33 P
-0.02 (gument to) 377.69 632.33 P
3 F
-0.05 (regsub) 420.41 632.33 P
1 F
-0.02 (, and the new) 456.39 632.33 P
(string is stored in the variable named by the \336nal ar) 152.1 620.33 T
(gument to) 357.34 620.33 T
3 F
(regsub) 400.09 620.33 T
1 F
(. Thus, after the) 436.07 620.33 T
-0.1 (above command completes) 152.1 608.33 P
3 F
-0.23 (x) 263.12 608.33 P
1 F
-0.1 ( will have the value \322) 269.12 608.33 P
3 F
-0.23 (They live their lives) 353.85 608.33 P
1 F
-0.1 (\323. If the) 479.09 608.33 P
-0.12 (pattern had not matched the string then) 152.1 596.33 P
3 F
-0.28 (0) 309.77 596.33 P
1 F
-0.12 ( would have been returned and) 315.77 596.33 P
3 F
-0.28 (x) 440.51 596.33 P
1 F
-0.12 ( would have the) 446.51 596.33 P
(value \322) 152.1 584.33 T
3 F
(They live there lives) 180.68 584.33 T
1 F
(\323.) 306.61 584.33 T
-0.05 (T) 170.1 572.33 P
-0.05 (wo special switches may appear as ar) 175.51 572.33 P
-0.05 (guments to) 324.33 572.33 P
3 F
-0.12 (regsub) 370.88 572.33 P
1 F
-0.05 ( before the regular expres-) 406.86 572.33 P
(sion. The \336rst is) 152.1 560.33 T
3 F
(-nocase) 219.01 560.33 T
1 F
(, which causes case dif) 260.99 560.33 T
(ferences between the pattern and the) 352.12 560.33 T
(string to be ignored just as for) 152.1 548.33 T
3 F
(regexp) 274.52 548.33 T
1 F
(. The second possible switch is) 310.5 548.33 T
3 F
(-all) 436.81 548.33 T
1 F
(. Normally) 460.8 548.33 T
3 F
(regsub) 152.1 536.33 T
1 F
( makes only a single substitution, for the \336rst match found in the input string.) 188.08 536.33 T
(However) 152.1 524.33 T
(, if) 188.33 524.33 T
3 F
(-all) 201.93 524.33 T
1 F
( is speci\336ed then) 225.92 524.33 T
3 F
(regsub) 295.32 524.33 T
1 F
( continues searching for additional matches) 331.3 524.33 T
(and makes substitutions for all of the matches found. For example, after the command) 152.1 512.33 T
3 9 Q
(regsub -all a ababa zz x) 179.1 498 T
3 10 Q
-0.29 (x) 152.1 484.33 P
1 F
-0.12 (will have the value) 163.8 484.33 P
3 F
-0.29 (zzbzzbzz) 241.59 484.33 P
1 F
-0.12 (. If) 289.56 484.33 P
3 F
-0.29 (-all) 303.47 484.33 P
1 F
-0.12 ( had been omitted then) 327.45 484.33 P
3 F
-0.29 (x) 420.39 484.33 P
1 F
-0.12 ( would have been set) 426.39 484.33 P
(to) 152.1 472.33 T
3 F
(zzbaba) 162.37 472.33 T
1 F
(.) 198.35 472.33 T
-0.25 (In the examples above the replacement string is a simple literal value. However) 170.1 460.33 P
-0.25 (, if the) 484.53 460.33 P
-0.11 (replacement string contains a \322) 152.1 448.33 P
3 F
-0.28 (&) 275.43 448.33 P
1 F
-0.11 (\323 or \322) 281.43 448.33 P
3 F
-0.28 (\1340) 303.4 448.33 P
1 F
-0.11 (\323 then the \322) 315.39 448.33 P
3 F
-0.28 (&) 360.85 448.33 P
1 F
-0.11 (\323 or \322) 366.84 448.33 P
3 F
-0.28 (\1340) 388.81 448.33 P
1 F
-0.11 (\323 is replaced in the substitu-) 400.8 448.33 P
(tion with the substring that matched the regular expression. If a sequence of the form) 152.1 436.33 T
3 F
(\134) 494.07 436.33 T
7 F
(n) 500.07 436.33 T
1 F
(appears in the replacement string, where) 152.1 424.33 T
7 F
(n) 316.13 424.33 T
1 F
( is a decimal number) 322.13 424.33 T
(, then the substring that) 405 424.33 T
(matched the) 152.1 412.33 T
7 F
(n) 203.17 412.33 T
1 F
(-th parenthesized subexpression is substituted instead of the) 209.17 412.33 T
3 F
(\134) 450.68 412.33 T
7 F
(n) 456.67 412.33 T
1 F
(. For exam-) 462.67 412.33 T
(ple, the command) 152.1 400.33 T
3 9 Q
(regsub -all a|b axaab && x) 179.1 386 T
1 10 Q
-0.03 (doubles all of the) 152.1 372.33 P
3 F
-0.07 (a) 223.61 372.33 P
1 F
-0.03 (\325) 229.6 372.33 P
-0.03 (s and) 232.38 372.33 P
3 F
-0.07 (b) 255.64 372.33 P
1 F
-0.03 (\325) 261.64 372.33 P
-0.03 (s in the input string. In this case it sets) 264.42 372.33 P
3 F
-0.07 (x) 419.33 372.33 P
1 F
-0.03 ( to) 425.33 372.33 P
3 F
-0.07 (aaxaaaabb) 438.05 372.33 P
1 F
-0.03 (. Or) 492.02 372.33 P
-0.03 (,) 507.13 372.33 P
(the command) 152.1 360.33 T
3 9 Q
(regsub -all \050a+\051\050ba*\051 aabaabxab {z\1342} x) 179.1 346 T
1 10 Q
(replaces sequences of) 152.1 332.33 T
3 F
(a) 241.18 332.33 T
1 F
(\325) 247.18 332.33 T
(s with a single) 249.96 332.33 T
3 F
(z) 309.92 332.33 T
1 F
( if they precede a) 315.92 332.33 T
3 F
(b) 387.24 332.33 T
1 F
( but don\325) 393.24 332.33 T
(t also follow a) 429.15 332.33 T
3 F
(b) 488.55 332.33 T
1 F
(. In) 494.55 332.33 T
(this case) 152.1 320.33 T
3 F
(x) 188.74 320.33 T
1 F
( is set to) 194.74 320.33 T
3 F
(zbaabxzb) 230.28 320.33 T
1 F
(. Backslashes may be used in the replacement string to) 278.25 320.33 T
(allow \322) 152.1 308.33 T
3 F
(&) 181.24 308.33 T
1 F
(\323, \322) 187.24 308.33 T
3 F
(\1340) 201.11 308.33 T
1 F
(\323, \322) 213.11 308.33 T
3 F
(\134) 226.98 308.33 T
7 F
(n) 232.98 308.33 T
1 F
(\323, or backslash characters to be substituted verbatim without any) 238.97 308.33 T
(special interpretation.) 152.1 296.33 T
2 F
(Note:) 119.09 281.33 T
(It\325) 152.1 281.33 T
(s usually a good idea to enclose complex r) 160.25 281.33 T
(eplacement strings in braces as in the) 329.76 281.33 T
(example above; otherwise the T) 152.1 271.33 T
(cl parser will pr) 278.31 271.33 T
(ocess backslash sequences and the) 342.64 271.33 T
(r) 152.1 261.33 T
(eplacement string r) 155.62 261.33 T
(eceived by) 232.98 261.33 T
7 F
(regsub) 277.37 261.33 T
2 F
( may not contain backslashes that ar) 313.35 261.33 T
(e needed.) 459.56 261.33 T
98.1 219.98 512.1 223 C
152.1 221.2 512.1 221.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 221.49 143.1 221.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(10.4) 117.96 227 T
(Generating strings with format) 152.1 227 T
1 10 Q
(T) 152.1 203.31 T
(cl\325) 157.51 203.31 T
(s) 167.5 203.31 T
3 F
(format) 173.89 203.31 T
1 F
( command provides facilities like those of the) 209.87 203.31 T
3 F
(sprintf) 394.75 203.31 T
1 F
( procedure from) 436.72 203.31 T
(the ANSI C library) 152.1 191.31 T
(. For example, consider the following command:) 227.79 191.31 T
3 9 Q
(format "The square root of 10 is %.3f" [expr sqrt\05010\051]) 179.1 176.98 T
6 F
(\336) 162.9 163.98 T
7 F
(The square root of 10 is 3.162) 179.1 163.98 T
FMENDPAGE
%%EndPage: "91" 100
%%Page: "92" 100
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(92) 98.1 668.33 T
5 F
(String Manipulation) 426.56 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(The \336rst ar) 152.1 632.33 T
(gument to) 195.78 632.33 T
3 F
(format) 238.53 632.33 T
1 F
( is a format string, which may contain any number of con-) 274.51 632.33 T
(version speci\336ers such as \322) 152.1 619.95 T
3 F
(%.3f) 260.35 619.95 T
1 F
(\323. For each conversion speci\336er) 284.34 619.95 T
3 F
(format) 413.68 619.95 T
1 F
( generates a) 449.66 619.95 T
(replacement string by reformatting the next ar) 152.1 607.56 T
(gument according to the conversion speci-) 335.67 607.56 T
(\336er) 152.1 595.17 T
(. The result of the) 164.87 595.17 T
3 F
(format) 238.15 595.17 T
1 F
( command consists of the format string with each conver-) 274.13 595.17 T
(sion speci\336er replaced by the corresponding replacement string. In the above example) 152.1 582.79 T
(\322) 152.1 570.4 T
3 F
(%.3f) 156.54 570.4 T
1 F
(\323 speci\336es that the next ar) 180.52 570.4 T
(gument is to be formatted as a real number with three) 283.88 570.4 T
(digits after the decimal point.) 152.1 558.01 T
3 F
(Format) 272.02 558.01 T
1 F
( supports almost all of the conversion speci\336ers) 308 558.01 T
(de\336ned for ANSI C) 152.1 545.62 T
3 F
(sprintf) 233.15 545.62 T
1 F
(, such as \322) 275.13 545.62 T
3 F
(%d) 316.21 545.62 T
1 F
(\323 for a decimal integer) 328.2 545.62 T
(, \322) 417.72 545.62 T
3 F
(%x) 427.16 545.62 T
1 F
(\323 for a hexadeci-) 439.15 545.62 T
(mal integer) 152.1 533.24 T
(, and \322) 196.95 533.24 T
3 F
(%e) 223.31 533.24 T
1 F
(\323 for real numbers in mantissa-exponent form.) 235.3 533.24 T
(The) 170.1 521.24 T
3 F
(format) 188.14 521.24 T
1 F
( command plays a less signi\336cant role in T) 224.12 521.24 T
(cl than) 394.43 521.24 T
3 F
(printf) 423.85 521.24 T
1 F
( and) 459.83 521.24 T
3 F
(sprintf) 152.1 508.85 T
1 F
( play in C. Many of the uses of) 194.08 508.85 T
3 F
(printf) 320.11 508.85 T
1 F
( and) 356.09 508.85 T
3 F
(sprintf) 375.52 508.85 T
1 F
( are simply for conver-) 417.49 508.85 T
(sion from binary to string format or for string substitution. Binary-to-string conversion) 152.1 496.46 T
-0.11 (isn\325) 152.1 484.08 P
-0.11 (t needed in T) 166.91 484.08 P
-0.11 (cl because values are already stored as strings, and substitution is already) 218.35 484.08 P
(available through the T) 152.1 471.69 T
(cl parser) 244.39 471.69 T
(. For example, the command) 277.97 471.69 T
3 9 Q
(set msg [format "%s is %d years old" $name $age]) 179.1 457.36 T
1 10 Q
(can be written more simply as) 152.1 443.69 T
3 9 Q
(set msg "$name is $age years old") 179.1 429.36 T
1 10 Q
-0.23 (The) 152.1 415.69 P
3 F
-0.55 (%d) 169.91 415.69 P
1 F
-0.23 ( conversion speci\336er in the) 181.9 415.69 P
3 F
-0.55 (format) 290.96 415.69 P
1 F
-0.23 ( command could be written just as well as) 326.94 415.69 P
3 F
-0.55 (%s) 495.06 415.69 P
1 F
-0.23 (;) 507.05 415.69 P
(with) 152.1 403.3 T
3 F
(%d) 172.37 403.3 T
(format) 186.86 403.3 T
1 F
( converts the value of age to a binary integer) 222.84 403.3 T
(, then converts the integer) 400.35 403.3 T
(back to a string again.) 152.1 390.91 T
3 F
(Format) 170.1 378.91 T
1 F
( is typically used in T) 206.08 378.91 T
(cl to reformat a value to improve its appearance, or to) 291.72 378.91 T
(convert from one representation to another \050e.g. from decimal to hexadecimal\051. As an) 152.1 366.53 T
(example of reformatting, here is a that script prints the \336rst ten powers of) 152.1 354.14 T
2 F
(e) 447.17 354.14 T
1 F
( in a table:) 451.61 354.14 T
3 9 Q
(puts "Number) 179.1 339.81 T
(Exponential") 254.59 339.81 T
(for {set i 1} {i <= 10} {incr i} {) 179.1 329.42 T
(puts [format "%4d %12.3f" $i [expr exp\050$i\051]]) 200.63 319.03 T
(}) 179.1 308.64 T
1 10 Q
(This script generates the following output on standard output:) 152.1 294.98 T
3 9 Q
(Number) 179.1 280.64 T
(Exponential) 222.24 280.64 T
(1) 195.28 270.26 T
(2.718) 243.81 270.26 T
(2) 195.28 259.87 T
(7.389) 243.81 259.87 T
(3) 195.28 249.48 T
(20.085) 238.42 249.48 T
(4) 195.28 239.1 T
(54.598) 238.42 239.1 T
(5) 195.28 228.71 T
(148.413) 233.02 228.71 T
(6) 195.28 218.32 T
(403.429) 233.02 218.32 T
(7) 195.28 207.94 T
(1096.630) 227.63 207.94 T
(8) 195.28 197.55 T
(2980.960) 227.63 197.55 T
(9) 195.28 187.16 T
(8103.080) 227.63 187.16 T
(10) 189.88 176.77 T
(22026.500) 222.24 176.77 T
1 10 Q
(The conversion speci\336er \322) 152.1 163.11 T
3 F
(%4d) 257.29 163.11 T
1 F
(\323 causes the integers in the \336rst column of the table to be) 275.28 163.11 T
(printed right-justifed in a \336eld four digits wide, so that they line up under their column) 152.1 150.72 T
(header) 152.1 138.33 T
(. The conversion speci\336er \322) 178.19 138.33 T
3 F
(%12.3f) 288.38 138.33 T
1 F
(\323 causes each of the real values to be printed) 324.36 138.33 T
FMENDPAGE
%%EndPage: "92" 101
%%Page: "93" 101
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(10.5 Parsing strings with scan) 98.1 668.33 T
4 F
(93) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(right-justi\336ed in a \336eld 12 digits wide, so that the values line up; it also sets the precision) 152.1 632.33 T
(at 3 digits to the right of the decimal point.) 152.1 620.33 T
(The second main use for) 170.1 608.33 T
3 F
(format) 270.86 608.33 T
1 F
(, changing the reprensentation of a value, is illus-) 306.83 608.33 T
(trated by the script below) 152.1 596.33 T
(, which prints a table showing the ASCII characters that corre-) 253.04 596.33 T
(spond to particular integer values:) 152.1 584.33 T
3 9 Q
(puts "Integer) 179.1 570 T
(ASCII") 259.99 570 T
(for {set i 95} {$i <= 101} {incr i} {) 179.1 560 T
(puts [format "%4d) 200.63 550 T
(%c" $i $i]) 330.05 550 T
(}) 179.1 540 T
1 10 Q
(This script generates the following output on standard output:) 152.1 526.33 T
3 9 Q
(Integer) 179.1 512 T
(ASCII) 227.63 512 T
(95) 189.88 502 T
(_) 238.42 502 T
(96) 189.88 492 T
(`) 238.42 492 T
(97) 189.88 482 T
(a) 238.42 482 T
(98) 189.88 472 T
(b) 238.42 472 T
(99) 189.88 462 T
(c) 238.42 462 T
(100) 184.49 452 T
(d) 238.42 452 T
(101) 184.49 442 T
(e) 238.42 442 T
1 10 Q
(The value of) 152.1 428.33 T
3 F
(i) 205.11 428.33 T
1 F
( is used twice in the format command, once with) 211.11 428.33 T
3 F
(%4d) 407.92 428.33 T
1 F
( and once with) 425.91 428.33 T
3 F
(%c) 486.98 428.33 T
1 F
(.) 498.97 428.33 T
(The) 152.1 416.33 T
3 F
(%c) 170.14 416.33 T
1 F
( speci\336er takes an integer ar) 182.13 416.33 T
(gument and generates a replacement string consisting) 293.8 416.33 T
(of the ASCII character whose represented by the integer) 152.1 404.33 T
(.) 376.36 404.33 T
98.1 360.98 512.1 364 C
152.1 362.2 512.1 362.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 362.49 143.1 362.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(10.5) 117.96 368 T
(Parsing strings with scan) 152.1 368 T
1 10 Q
-0.39 (The) 152.1 344.31 P
3 F
-0.93 (scan) 169.75 344.31 P
1 F
-0.39 ( command provides almost exactly the same facilities as the) 193.74 344.31 P
3 F
-0.93 (sscanf) 431.94 344.31 P
1 F
-0.39 ( procedure) 467.92 344.31 P
(from the ANSI C library) 152.1 332.31 T
(.) 249.72 332.31 T
3 F
(Scan) 254.71 332.31 T
1 F
( is roughly the inverse of) 278.7 332.31 T
3 F
(format) 380.85 332.31 T
1 F
(. It starts with a format-) 416.83 332.31 T
-0.06 (ted string, parses the string under the control of a format string, extracts \336elds correspond-) 152.1 320.31 P
(ing to) 152.1 308.31 T
3 F
(%) 177.65 308.31 T
1 F
( conversion speci\336ers in the format string, and places the extracted values in T) 183.64 308.31 T
(cl) 496.6 308.31 T
(variables. For example, after the following command is executed variable) 152.1 296.31 T
3 F
(a) 449.1 296.31 T
1 F
( will have the) 455.09 296.31 T
(value) 152.1 284.31 T
3 F
(16) 176.25 284.31 T
1 F
( and variable) 188.24 284.31 T
3 F
(b) 242.36 284.31 T
1 F
( will have the value) 248.36 284.31 T
3 F
(24.2) 329.13 284.31 T
1 F
(:) 353.12 284.31 T
3 9 Q
(scan "16 units, 24.2% margin" "%d units, %f" a b) 179.1 269.98 T
6 F
(\336) 162.9 256.98 T
7 F
(2) 179.1 256.98 T
1 10 Q
-0.34 (The \336rst ar) 152.1 243.31 P
-0.34 (gument to) 195.1 243.31 P
3 F
-0.81 (scan) 237.18 243.31 P
1 F
-0.34 ( is the string to parse, the second is a format string that controls) 261.17 243.31 P
(the parsing, and any additional ar) 152.1 231.31 T
(guments are names of variables to \336ll in with converted) 285.16 231.31 T
(values. The return value of 2 indicates that two conversions were completed successfully) 152.1 219.31 T
(.) 507.02 219.31 T
3 F
(Scan) 170.1 207.31 T
1 F
( operates by scanning the string and the format together) 194.09 207.31 T
(. Each character in the) 415.88 207.31 T
(format must match the corresponding character in the string, except for blanks and tabs,) 152.1 195.31 T
(which are ignored, and) 152.1 183.31 T
3 F
(%) 246.19 183.31 T
1 F
( characters. When a) 252.18 183.31 T
3 F
(%) 333.49 183.31 T
1 F
( is encountered in the format, it indicates) 339.49 183.31 T
(the start of a conversion speci\336er:) 152.1 171.31 T
3 F
(scan) 289.77 171.31 T
1 F
( converts the next input characters according to) 313.76 171.31 T
-0.08 (the conversion speci\336er and stores the result in the variable given by the next ar) 152.1 159.31 P
-0.08 (gument to) 469.5 159.31 P
FMENDPAGE
%%EndPage: "93" 102
%%Page: "94" 102
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(94) 98.1 668.33 T
5 F
(String Manipulation) 426.56 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 10 Q
0 X
(scan) 152.1 632.33 T
1 F
(. White space in the string is skipped except in the case of a few conversion speci\336-) 176.09 632.33 T
(ers such as) 152.1 620.14 T
3 F
(%c) 197.9 620.14 T
1 F
(.) 209.89 620.14 T
(One common use for scan is for simple string parsing, as in the example above.) 170.1 608.14 T
(Another common use is for converting ASCII characters to their integer values, which is) 152.1 595.94 T
(done with the) 152.1 583.74 T
3 F
(%c) 209.01 583.74 T
1 F
( speci\336er) 221 583.74 T
(. The procedure below uses this feature to return the character) 256.81 583.74 T
(that follows a given character in lexicographic ordering:) 152.1 571.55 T
3 9 Q
(proc next c {) 179.1 557.21 T
(scan $c %c i) 200.63 547.02 T
(format %c [expr $i+1]) 200.63 536.82 T
(}) 179.1 526.62 T
(next a) 179.1 516.43 T
6 F
(\336) 162.9 503.43 T
7 F
(b) 179.1 503.43 T
3 F
(next 9) 179.1 490.43 T
6 F
(\336) 162.9 477.43 T
7 F
(:) 179.1 477.43 T
1 10 Q
-0.14 (The) 152.1 463.76 P
3 F
-0.35 (scan) 169.99 463.76 P
1 F
-0.14 ( command converts the value of the) 193.98 463.76 P
3 F
-0.35 (c) 338.14 463.76 P
1 F
-0.14 ( ar) 344.13 463.76 P
-0.14 (gument from an ASCII character to the) 354.07 463.76 P
-0.37 (integer used to represent that character) 152.1 451.56 P
-0.37 (, then the integer is incremented and converted back) 304.45 451.56 P
(to an ASCII character again with the) 152.1 439.36 T
3 F
(format) 301.15 439.36 T
1 F
( command.) 337.13 439.36 T
98.1 396.01 512.1 399.03 C
152.1 397.23 512.1 397.23 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 397.52 143.1 397.52 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(10.6) 117.96 403.03 T
(Extracting characters: string index and string range) 152.1 403.03 T
1 10 Q
(The remaining string manipulation commands are all implemented as options of the) 152.1 379.34 T
3 F
(string) 152.1 367.14 T
1 F
( command. For example,) 188.08 367.14 T
3 F
(string index) 290.23 367.14 T
1 F
( extracts a character from a string:) 362.2 367.14 T
3 9 Q
(string index "Sample string" 3) 179.1 352.81 T
6 F
(\336) 162.9 339.81 T
7 F
(p) 179.1 339.81 T
1 10 Q
-0.05 (The ar) 152.1 326.14 P
-0.05 (gument after) 177.68 326.14 P
3 F
-0.11 (index) 230.88 326.14 P
1 F
-0.05 ( is a string and the last ar) 260.86 326.14 P
-0.05 (gument gives the index of the desired) 360.02 326.14 P
(character in the string. An index of) 152.1 313.95 T
3 F
(0) 294.21 313.95 T
1 F
( selects the \336rst character) 300.21 313.95 T
(.) 400.68 313.95 T
(The) 170.1 301.95 T
3 F
(string range) 188.14 301.95 T
1 F
( command is similar to) 260.1 301.95 T
3 F
(string index) 354.22 301.95 T
1 F
( except that it takes) 426.18 301.95 T
(two indices and returns all the characters from the \336rst index to the second, inclusive:) 152.1 289.75 T
3 9 Q
(string range "Sample string" 3 7) 179.1 275.42 T
6 F
(\336) 162.9 262.42 T
7 F
(ple s) 179.1 262.42 T
1 10 Q
(The second index may have the value) 152.1 248.75 T
3 F
(end) 305.04 248.75 T
1 F
( to select all the characters up to the end of the) 323.03 248.75 T
(string:) 152.1 236.55 T
3 9 Q
(string range "Sample string" 3 end) 179.1 222.22 T
6 F
(\336) 162.9 209.22 T
7 F
(ple string) 179.1 209.22 T
98.1 167.2 512.1 170.22 C
152.1 168.42 512.1 168.42 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 168.71 143.1 168.71 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(10.7) 117.96 174.22 T
(Searching and comparison) 152.1 174.22 T
1 10 Q
-0.26 (The command) 152.1 150.53 P
3 F
-0.64 (string f) 211.53 150.53 P
-0.64 (irst) 258.86 150.53 P
1 F
-0.26 ( takes two additional string ar) 282.85 150.53 P
-0.26 (guments as in the following) 399.88 150.53 P
(example:) 152.1 138.33 T
FMENDPAGE
%%EndPage: "94" 103
%%Page: "95" 103
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(10.8 Length, case conversion, and trimming) 98.1 668.33 T
4 F
(95) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 9 Q
0 X
(string f) 179.1 633 T
(irst th "There is the tub where I bathed today") 222.24 633 T
6 F
(\336) 162.9 620 T
7 F
(3) 179.1 620 T
1 10 Q
-0.08 (It searches the second string to see if there is a substring that is identical to the \336rst string.) 152.1 606.33 P
-0.36 (If so then it returns the index of the \336rst character in the leftmost matching substring; if not) 152.1 594.33 P
(then it returns) 152.1 582.33 T
3 F
(-1) 210.12 582.33 T
1 F
(. The command) 222.11 582.33 T
3 F
(string last) 287.07 582.33 T
1 F
( is similar except it returns the starting) 353.03 582.33 T
(index of the rightmost matching substring:) 152.1 570.33 T
3 9 Q
(string last th "There is the tub where I bathed today") 179.1 556 T
6 F
(\336) 162.9 543 T
7 F
(21) 179.1 543 T
1 10 Q
(The command) 170.1 529.33 T
3 F
(string compare) 230.06 529.33 T
1 F
( takes two additional ar) 314.01 529.33 T
(guments and compares) 407.1 529.33 T
(them in their entirety) 152.1 517.33 T
(. It returns) 235.56 517.33 T
3 F
(0) 279.42 517.33 T
1 F
( if the strings are identical,) 285.42 517.33 T
3 F
(-1) 394.51 517.33 T
1 F
( if the \336rst string sorts) 406.5 517.33 T
(before the second, and) 152.1 505.33 T
3 F
(1) 244.52 505.33 T
1 F
( if the \336rst string is after the second in sorting order:) 250.52 505.33 T
3 9 Q
(string compare Michigan Minnesota) 179.1 491 T
6 F
(\336) 162.9 478 T
7 F
(-1) 179.1 478 T
3 F
(string compare Michigan Michigan) 179.1 465 T
6 F
(\336) 162.9 452 T
7 F
(0) 179.1 452 T
98.1 409.98 512.1 413 C
152.1 411.2 512.1 411.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 411.49 143.1 411.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(10.8) 117.96 417 T
(Length, case conversion, and trimming) 152.1 417 T
1 10 Q
-0.02 (The) 152.1 393.31 P
3 F
-0.04 (string length) 170.12 393.31 P
1 F
-0.02 ( command counts the number of characters in a string and returns) 248.04 393.31 P
(that number:) 152.1 381.31 T
3 9 Q
(string length "sample string") 179.1 366.98 T
6 F
(\336) 162.9 353.98 T
7 F
(13) 179.1 353.98 T
1 10 Q
(The) 170.1 340.31 T
3 F
(string toupper) 188.14 340.31 T
1 F
( command converts all lower) 272.09 340.31 T
(-case characters in a string to) 387.92 340.31 T
(upper case, and the) 152.1 328.31 T
3 F
(string tolower) 231.2 328.31 T
1 F
( command converts all upper) 315.15 328.31 T
(-case characters in) 430.98 328.31 T
(its ar) 152.1 316.31 T
(gument to lower) 171.63 316.31 T
(-case:) 236.94 316.31 T
3 9 Q
(string toupper "Watch out!") 179.1 301.98 T
6 F
(\336) 162.9 288.98 T
7 F
(WATCH OUT!) 179.1 288.98 T
3 F
(string tolower "15 Charing Cross Road") 179.1 275.98 T
6 F
(\336) 162.9 262.98 T
7 F
(15 charing cross road) 179.1 262.98 T
1 10 Q
-0.3 (The) 170.1 249.31 P
3 F
-0.72 (string) 187.84 249.31 P
1 F
-0.3 ( command provides three options for trimming:) 223.82 249.31 P
3 F
-0.72 (trim) 414.11 249.31 P
1 F
-0.3 (,) 438.1 249.31 P
3 F
-0.72 (trimleft) 442.8 249.31 P
1 F
-0.3 (, and) 490.77 249.31 P
3 F
-0.86 (trimright) 152.1 237.31 P
1 F
-0.36 (. Each option takes two additional ar) 206.07 237.31 P
-0.36 (guments: a string to trim and an optional) 350.04 237.31 P
(set of trim characters. The) 152.1 225.31 T
3 F
(string trim) 259.23 225.31 T
1 F
( command removes all instances of the trim) 325.2 225.31 T
(characters from both the beginning and end of its ar) 152.1 213.31 T
(gument string, returning the trimmed) 358.71 213.31 T
(string as result:) 152.1 201.31 T
3 9 Q
(string trim aaxxxbab abc) 179.1 186.98 T
6 F
(\336) 162.9 173.98 T
7 F
(xxx) 179.1 173.98 T
1 10 Q
(The) 152.1 160.31 T
3 F
(trimleft) 170.14 160.31 T
1 F
( and) 218.11 160.31 T
3 F
(trimright) 237.54 160.31 T
1 F
( options work in the same way except that they only) 291.51 160.31 T
(remove the trim characters from the beginning or end of the string, respectively) 152.1 148.31 T
(. The trim) 469.27 148.31 T
FMENDPAGE
%%EndPage: "95" 104
%%Page: "96" 104
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(96) 98.1 668.33 T
5 F
(String Manipulation) 426.56 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(commands are most commonly used to remove excess white space; if no trim characters) 152.1 632.33 T
(are speci\336ed then they default to the white space characters \050space, tab, newline, and car-) 152.1 620.33 T
(riage return\051.) 152.1 608.33 T
FMENDPAGE
%%EndPage: "96" 105
%%Page: "97" 105
612 792 0 FMBEGINPAGE
98.1 675 512.1 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
98.1 450 512.1 450 2 L
7 X
V
2 Z
0 X
N
98.1 108 512.1 126 R
7 X
V
4 10 Q
0 X
(97) 500.99 119.33 T
98.1 54 512.1 108 R
7 X
V
1 9 Q
0 X
(Copyright \251 1993 Addison-W) 152.1 102 T
(esley Publishing Company) 261.32 102 T
(, Inc.) 357.1 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 152.1 91 T
(. Any) 485.77 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 152.1 80 T
-0.34 (lisher) 152.1 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 171.58 69 P
(does not of) 152.1 58 T
(fer warranties in regard to this draft.) 191.88 58 T
0 24 Q
(Chapter 1) 152.1 605 T
(1) 254.04 605 T
-0.48 (Accessing Files) 152.1 575 S
98.1 135 512.1 423 R
7 X
V
1 10 Q
0 X
-0.27 (This chapter describes T) 152.1 416.33 P
-0.27 (cl\325) 248.57 416.33 P
-0.27 (s commands for dealing with \336les. The commands allow you to) 258.56 416.33 P
(read and write \336les sequentially or in a random-access fashion. They also allow you to) 152.1 404.33 T
(retrieve information kept by the system about \336les, such as the time of last access. Lastly) 152.1 392.33 T
(,) 507.05 392.33 T
(they can be used to manipulate \336le names; for example, you can remove the extension) 152.1 380.33 T
(from a \336le name or \336nd the names of all \336les that match a particular pattern. See T) 152.1 368.33 T
(able) 481.72 368.33 T
(1) 152.1 356.33 T
(1.1 for a summary of the \336le-related commands.) 156.73 356.33 T
2 F
(Note:) 119.09 341.33 T
(The commands described in this chapter ar) 152.1 341.33 T
(e only available on systems that support the) 324.95 341.33 T
(kernel calls de\336ned in the POSIX standar) 152.1 331.33 T
(d, such as most UNIX workstations. If you ar) 317.73 331.33 T
(e) 497.26 331.33 T
-0.34 (using T) 152.1 321.33 P
-0.34 (cl on another system, such as a Macintosh or a PC, then the \336le commands may not) 180.56 321.33 P
(be pr) 152.1 311.33 T
(esent and ther) 172.55 311.33 T
(e may be other commands that pr) 228.81 311.33 T
(ovide similar functionality for your) 362.23 311.33 T
(system.) 152.1 301.33 T
98.1 259.98 512.1 263 C
152.1 261.2 512.1 261.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 261.49 143.1 261.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(1) 118.62 267 T
(1.1) 124.63 267 T
(File names) 152.1 267 T
1 10 Q
-0.11 (File names are speci\336ed to T) 152.1 243.31 P
-0.11 (cl using the normal UNIX syntax. For example, the \336le name) 266.02 243.31 P
3 F
(x/y/z) 152.1 231.31 T
1 F
( refers to a \336le named) 182.08 231.31 T
3 F
(z) 271.45 231.31 T
1 F
( that is located in a directory named) 277.45 231.31 T
3 F
(y) 422.9 231.31 T
1 F
(, which in turn is) 428.25 231.31 T
(located in a directory named) 152.1 219.31 T
3 F
(x) 268.4 219.31 T
1 F
(, which must be in the current working directory) 274.39 219.31 T
(. The \336le) 467.22 219.31 T
(name) 152.1 207.31 T
3 F
(/top) 176.25 207.31 T
1 F
( refers to a \336le) 200.23 207.31 T
3 F
(top) 260.46 207.31 T
1 F
( in the root directory) 278.45 207.31 T
(. Y) 359.97 207.31 T
(ou can also use tilde notation to) 371.18 207.31 T
(specify a \336le name relative to a particular user) 152.1 195.31 T
(\325) 337.32 195.31 T
(s home directory) 340.1 195.31 T
(. For example, the name) 406.62 195.31 T
3 F
-0.57 (~ouster/mbox) 152.1 183.31 P
1 F
-0.24 ( refers to a \336le named) 224.06 183.31 P
3 F
-0.57 (mbox) 312 183.31 P
1 F
-0.24 ( in the home directory of user) 335.99 183.31 P
3 F
-0.57 (ouster) 455.07 183.31 P
1 F
-0.24 (, and) 490.65 183.31 P
3 F
(~/mbox) 152.1 171.31 T
1 F
( refers to a \336le named) 188.08 171.31 T
3 F
(mbox) 277.45 171.31 T
1 F
( in the home directory of the user running the T) 301.44 171.31 T
(cl) 490.6 171.31 T
(script. These conventions \050and the availability of tilde notation in particular\051 apply to all) 152.1 159.31 T
(T) 152.1 147.31 T
(cl commands that take \336le names as ar) 157.51 147.31 T
(guments.) 311.38 147.31 T
44.1 351 89.1 423 C
53.1 360 215.1 414 R
7 X
0 K
V
0 9 Q
0 X
(FIGURE  1) 53.1 408 T
(1) 96.54 408 T
(T) 53.1 387 T
(ABLE  1) 58.43 387 T
(1) 91.39 387 T
44.1 351 143.1 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "97" 106
%%Page: "98" 106
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(98) 98.1 668.33 T
5 F
(Accessing Files) 442.68 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 138.6 512.1 639 C
98.1 194.6 512.1 209 C
98.1 194.6 512.1 209 R
7 X
0 K
V
152.1 202.52 512.1 202.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 138.6 512.1 639 C
98.1 171.2 512.1 185.6 C
98.1 171.2 512.1 185.6 R
7 X
0 K
V
152.1 179.12 512.1 179.12 2 L
V
0.5 H
2 Z
0 X
N
98.1 138.6 512.1 639 C
0 9 Q
0 X
0 K
(T) 152.1 188.6 T
(able  1) 157.27 188.6 T
(1.1.) 181.74 188.6 T
1 F
(A summary of the T) 199.71 188.6 T
(cl commands for manipulating \336les \050continued in T) 271.97 188.6 T
(able 1) 456.32 188.6 T
(1.2\051.) 477.7 188.6 T
3 F
(cd) 158.1 620 T
1 F
(?) 174.28 620 T
7 F
(dirName) 178.27 620 T
1 F
(?) 216.01 620 T
(Changes the current working directory to) 230.1 611 T
7 F
(dirName) 380.36 611 T
1 F
(, or to the home) 418.11 611 T
(directory \050as given by the) 230.1 602 T
3 F
(HOME) 324.2 602 T
1 F
( environment variable\051 if) 345.77 602 T
7 F
(dirName) 437.62 602 T
1 F
( isn\325) 475.37 602 T
(t) 490.93 602 T
(given. Returns an empty string.) 230.1 593 T
3 F
(close) 158.1 574 T
1 F
(?) 190.45 574 T
7 F
(f) 194.44 574 T
(ileId) 199.84 574 T
1 F
(?) 226.8 574 T
(Closes the \336le given by) 230.1 565 T
7 F
(f) 316.73 565 T
(ileId) 322.12 565 T
1 F
(. Returns an empty string.) 349.08 565 T
3 F
(eof) 158.1 546 T
7 F
(f) 179.67 546 T
(ileId) 185.06 546 T
1 F
(Returns) 230.1 537 T
3 10 Q
(1) 260.31 537 T
1 9 Q
( if an end-of-\336le condition has occurred on) 266.3 537 T
7 F
(f) 422.55 537 T
(ileId) 427.94 537 T
1 F
(,) 454.9 537 T
3 10 Q
(0) 459.4 537 T
1 9 Q
( otherwise.) 465.39 537 T
3 F
(f) 158.1 518 T
(ile) 163.49 518 T
7 F
(option) 185.06 518 T
(name) 222.81 518 T
1 F
(?) 249.77 518 T
7 F
(arg arg) 253.76 518 T
1 F
(...?) 296.9 518 T
(Performs one of several operations on the \336lename given by) 230.1 509 T
7 F
(name) 448.75 509 T
1 F
( or on) 470.32 509 T
(the \336le that it refers to, depending on) 230.1 500 T
7 F
(option) 365.14 500 T
1 F
(. See T) 397.5 500 T
(able 1) 422.08 500 T
(1.3 for details.) 443.46 500 T
3 F
(f) 158.1 481 T
(lush) 163.49 481 T
7 F
(f) 190.45 481 T
(ileId) 195.85 481 T
1 F
(W) 230.1 472 T
(rites out any buf) 238.22 472 T
(fered output that has been generated for) 296.72 472 T
7 F
(f) 441.73 472 T
(ileId) 447.12 472 T
1 F
(.) 474.08 472 T
(Returns an empty string.) 230.1 463 T
3 F
(gets) 158.1 444 T
7 F
(f) 185.06 444 T
(ileId) 190.45 444 T
1 F
( ?) 217.42 444 T
7 F
(varName) 223.65 444 T
1 F
(?) 261.4 444 T
(Reads the next line from) 230.1 435 T
7 F
(f) 320.71 435 T
(ileId) 326.1 435 T
1 F
( and discards its terminating newline. If) 353.07 435 T
7 F
(varName) 230.1 426 T
1 F
( is speci\336ed, places the line in that variable and returns a count of) 267.85 426 T
(characters in the line \050or) 230.1 417 T
3 10 Q
(-1) 319.7 417 T
1 9 Q
( for end of \336le\051. If) 331.69 417 T
7 F
(varName) 398.82 417 T
1 F
( isn\325) 436.57 417 T
(t speci\336ed,) 452.14 417 T
(returns line as result \050or an empty string for end of \336le\051.) 230.1 408 T
3 F
(glob) 158.1 389 T
1 F
(?) 185.06 389 T
3 F
(-nocomplain) 189.05 389 T
1 F
(?) 248.37 389 T
(?) 257.75 389 T
3 F
(--) 261.74 389 T
1 F
(?) 272.53 389 T
7 F
( pattern) 276.52 389 T
1 F
(?) 325.05 389 T
7 F
(pattern) 329.04 389 T
1 F
( ...?) 366.79 389 T
(Returns a list of the names of all \336les that match any of the) 230.1 380 T
7 F
(pattern) 444.28 380 T
1 F
(ar) 230.1 371 T
(guments \050special characters) 236.92 371 T
3 10 Q
(?) 338.5 371 T
1 9 Q
(,) 344.49 371 T
3 10 Q
(*) 348.99 371 T
1 9 Q
(,) 354.98 371 T
3 10 Q
([]) 359.48 371 T
1 9 Q
(, {}, and) 371.47 371 T
3 10 Q
(\134) 404.31 371 T
1 9 Q
(\051. If) 410.31 371 T
3 F
(-nocomplain) 429.78 371 T
1 F
(isn\325) 230.1 362 T
(t speci\336ed then an error occurs if the return list would be empty) 243.42 362 T
(.) 471.48 362 T
3 F
(open) 158.1 343 T
7 F
(name) 185.06 343 T
1 F
(?) 212.02 343 T
7 F
(access) 216.01 343 T
1 F
(?) 248.37 343 T
(Opens \336le) 230.1 334 T
7 F
(name) 269.04 334 T
1 F
( in the mode given by) 290.61 334 T
7 F
(access) 370.99 334 T
1 F
(. Access may be) 403.35 334 T
3 F
(r) 464 334 T
1 F
(,) 469.03 334 T
3 F
(r+) 473.52 334 T
1 F
(,) 484.31 334 T
3 F
(w) 488.8 334 T
1 F
(,) 493.61 334 T
3 F
(w+) 230.1 325 T
1 F
(,) 240.88 325 T
3 F
(a) 245.38 325 T
1 F
(, or) 250.77 325 T
3 F
(a+) 265 325 T
1 F
( or a list of \337ags such as) 275.78 325 T
3 F
(RDONLY) 364.65 325 T
1 F
(; it defaults to) 396.18 325 T
3 F
(r) 448.11 325 T
1 F
(. Returns a) 453.01 325 T
(\336le identi\336er for use in other commands like) 230.1 316 T
3 F
(gets) 392.36 316 T
1 F
( and) 413.93 316 T
3 F
(close) 431.4 316 T
1 F
(. If the \336rst) 458.36 316 T
(character of) 230.1 307 T
7 F
(name) 275.01 307 T
1 F
( is \322) 296.58 307 T
3 10 Q
(|) 311.06 307 T
1 9 Q
(\323 then a command pipeline is invoked instead of) 317.05 307 T
(opening a \336le \050see Section 12.2 for more information\051.) 230.1 298 T
3 F
(puts) 158.1 279 T
1 F
(?) 185.06 279 T
3 F
(-nonewline) 189.05 279 T
1 F
(?) 242.98 279 T
(?) 252.36 279 T
7 F
(f) 256.35 279 T
(ileId) 261.74 279 T
1 F
(?) 288.7 279 T
7 F
(string) 298.09 279 T
1 F
(W) 230.1 270 T
(rites) 238.22 270 T
7 F
(string) 255.95 270 T
1 F
( to) 288.3 270 T
7 F
(f) 299.79 270 T
(ileId) 305.18 270 T
1 F
(, appending a newline character unless) 332.14 270 T
3 F
(-) 230.1 261 T
(nonewline) 235.49 261 T
1 F
( is speci\336ed.) 284.02 261 T
7 F
(FileId) 330.96 261 T
1 F
( defaults to) 363.31 261 T
3 F
(stdout) 405.5 261 T
1 F
(. Returns an) 437.85 261 T
(empty string.) 230.1 252 T
3 F
(pwd) 158.1 233 T
1 F
(Returns the full path name of the current working directory) 230.1 224 T
(.) 442.43 224 T
152.1 631.75 152.1 217.25 2 L
V
0.5 H
0 Z
N
512.1 631.75 512.1 217.25 2 L
V
N
151.85 632 512.35 632 2 L
V
N
151.85 586 512.35 586 2 L
V
0.25 H
N
151.85 558 512.35 558 2 L
V
N
151.85 530 512.35 530 2 L
V
N
151.85 493 512.35 493 2 L
V
N
151.85 456 512.35 456 2 L
V
N
151.85 401 512.35 401 2 L
V
N
151.85 355 512.35 355 2 L
V
N
151.85 291 512.35 291 2 L
V
N
151.85 245 512.35 245 2 L
V
N
151.85 217 512.35 217 2 L
V
0.5 H
N
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "98" 107
%%Page: "99" 107
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(1) 98.1 668.33 T
(1.2 Basic \336le I/O) 102.92 668.33 T
4 F
(99) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 404.38 512.1 407.4 C
152.1 405.6 512.1 405.6 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 405.89 143.1 405.89 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(1) 118.62 411.4 T
(1.2) 124.63 411.4 T
(Basic \336le I/O) 152.1 411.4 T
1 10 Q
(The T) 152.1 387.71 T
(cl commands for \336le I/O are similar to the procedures in the C standard I/O library) 175.55 387.71 T
(,) 504.94 387.71 T
(both in their names and in their behavior) 152.1 375.53 T
(. Here is a script called) 313.94 375.53 T
3 F
(tgrep) 408.03 375.53 T
1 F
( that illustrates) 438.01 375.53 T
(most of the basic features of \336le I/O:) 152.1 363.36 T
3 9 Q
(#!/usr/local/bin/tclsh) 179.1 349.02 T
(if {$argc != 2} {) 179.1 338.84 T
(error "Usage: tgrep pattern f) 200.63 328.67 T
(ileName") 357.01 328.67 T
(}) 179.1 318.49 T
(set f [open [lindex $argv 1] r]) 179.1 308.31 T
(set pat [lindex $argv 0]) 179.1 298.13 T
(while {[gets $f line] >= 0} {) 179.1 287.95 T
(if [regexp $pat $line] {) 200.63 277.78 T
(puts stdout $line) 222.23 267.6 T
(}) 200.63 257.42 T
(}) 179.1 247.24 T
(close $f) 179.1 237.07 T
1 10 Q
-0.34 (This script behaves much like the UNIX) 152.1 223.4 P
3 F
-0.81 (grep) 313.78 223.4 P
1 F
-0.34 ( program: you can invoke it from your shell) 337.77 223.4 P
-0.35 (with two ar) 152.1 211.22 P
-0.35 (guments, a regular expression pattern and a \336le name, and it will print out all of) 196.75 211.22 P
(the lines in the \336le that match the pattern.) 152.1 199.04 T
(When) 170.1 187.04 T
3 F
(tclsh) 196.46 187.04 T
1 F
( processes evaluates the script it makes the command-line ar) 226.45 187.04 T
(guments) 467.48 187.04 T
(available as a list in variable) 152.1 174.87 T
3 F
(argv) 268.13 174.87 T
1 F
(, with the length of that list in variable) 291.46 174.87 T
3 F
(argc) 446.93 174.87 T
1 F
(. After) 470.92 174.87 T
-0.04 (making sure that it received enough ar) 152.1 162.69 P
-0.04 (guments, the script invokes the) 304.91 162.69 P
3 F
-0.09 (open) 431.32 162.69 P
1 F
-0.04 ( command on) 455.3 162.69 P
-0.26 (the \336le to search, which is the second ar) 152.1 150.51 P
-0.26 (gument.) 309.41 150.51 P
3 F
-0.63 (Open) 344.13 150.51 P
1 F
-0.26 ( takes two ar) 368.11 150.51 P
-0.26 (guments, the name of a) 417.93 150.51 P
-0.09 (\336le and an access mode. The access mode provides information such as whether you\325ll be) 152.1 138.33 P
98.1 419.4 512.1 639 C
98.1 473.4 512.1 487.8 C
98.1 473.4 512.1 487.8 R
7 X
0 K
V
152.1 481.32 512.1 481.32 2 L
V
0.5 H
2 Z
0 X
N
98.1 419.4 512.1 639 C
98.1 450 512.1 464.4 C
98.1 450 512.1 464.4 R
7 X
0 K
V
152.1 457.92 512.1 457.92 2 L
V
0.5 H
2 Z
0 X
N
98.1 419.4 512.1 639 C
0 9 Q
0 X
0 K
(T) 152.1 467.4 T
(able  1) 157.27 467.4 T
(1.2.) 181.74 467.4 T
1 F
(A summary of the T) 199.71 467.4 T
(cl commands for manipulating \336les, cont\325d.) 271.97 467.4 T
3 F
(read) 158.1 621.8 T
1 F
(?) 185.06 621.8 T
3 F
(-nonewline) 189.05 621.8 T
1 F
(?) 242.98 621.8 T
7 F
( f) 246.97 621.8 T
(ileId) 257.75 621.8 T
1 F
(Reads and returns all of the bytes remaining in) 230.1 612.8 T
7 F
(f) 400.09 612.8 T
(ileId) 405.48 612.8 T
1 F
(. If) 432.44 612.8 T
3 F
(-nonewline) 445.17 612.8 T
1 F
(is speci\336ed then the \336nal newline, if any) 230.1 603.8 T
(, is dropped.) 374.8 603.8 T
3 F
(read) 158.1 594.8 T
7 F
(f) 185.06 594.8 T
(ileId) 190.45 594.8 T
(numBytes) 222.81 594.8 T
1 F
(Reads and returns the next) 230.1 585.8 T
7 F
(numBytes) 327.69 585.8 T
1 F
( bytes from) 370.83 585.8 T
7 F
(f) 414.02 585.8 T
(ileId) 419.41 585.8 T
1 F
( \050or up to the) 446.37 585.8 T
(end of the \336le, if fewer than) 230.1 576.8 T
7 F
(numBytes) 332.43 576.8 T
1 F
( bytes are left\051.) 375.57 576.8 T
3 F
(seek) 158.1 557.8 T
7 F
(f) 185.06 557.8 T
(ileId) 190.45 557.8 T
(offset) 222.81 557.8 T
1 F
(?) 260.56 557.8 T
7 F
(origin) 264.55 557.8 T
1 F
(?) 296.9 557.8 T
(Position) 230.1 548.8 T
7 F
(f) 261.82 548.8 T
(ileId) 267.21 548.8 T
1 F
( so that the next access starts at) 294.17 548.8 T
7 F
(offset) 408.49 548.8 T
1 F
( bytes from) 440.85 548.8 T
7 F
(origin) 230.1 539.8 T
1 F
(.) 262.45 539.8 T
7 F
(Origin) 266.95 539.8 T
1 F
( may be) 299.3 539.8 T
3 F
(start) 330 539.8 T
1 F
(,) 356.97 539.8 T
3 F
(current) 361.46 539.8 T
1 F
(, or) 399.21 539.8 T
3 F
(end) 413.43 539.8 T
1 F
(, and defaults to) 429.61 539.8 T
3 F
(start) 230.1 530.8 T
1 F
(. Returns an empty string.) 257.06 530.8 T
3 F
(tell) 158.1 511.8 T
7 F
(f) 185.06 511.8 T
(ileId) 190.45 511.8 T
1 F
(Returns the current access position for) 230.1 502.8 T
7 F
(f) 370.38 502.8 T
(ileId) 375.77 502.8 T
1 F
(.) 402.73 502.8 T
152.1 633.55 152.1 496.05 2 L
V
0.5 H
0 Z
N
512.1 633.55 512.1 496.05 2 L
V
N
151.85 633.8 512.35 633.8 2 L
V
N
151.85 569.8 512.35 569.8 2 L
V
0.25 H
N
151.85 523.8 512.35 523.8 2 L
V
N
151.85 495.8 512.35 495.8 2 L
V
0.5 H
N
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "99" 108
%%Page: "100" 108
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(100) 98.1 668.33 T
5 F
(Accessing Files) 442.68 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(reading the \336le or writing it, and whether you want to append to the \336le or access it from) 152.1 632.33 T
(the beginning. The access mode may have one of the following values:) 152.1 620.33 T
-0.2 (The access mode may also be speci\336ed as a list of POSIX \337ags like) 152.1 464.33 P
3 F
-0.49 (RDONLY) 421.85 464.33 P
1 F
-0.2 (,) 456.54 464.33 P
3 F
-0.49 (CREAT) 461.33 464.33 P
1 F
-0.2 (, and) 490.58 464.33 P
3 F
(TRUNC) 152.1 452.33 T
1 F
(. See the reference documentation for more information about these \337ags.) 182.08 452.33 T
-0.16 (The) 170.1 440.33 P
3 F
-0.38 (open) 187.98 440.33 P
1 F
-0.16 ( command returns a string such as) 211.97 440.33 P
3 F
-0.38 (f) 349.39 440.33 P
-0.38 (ile3) 355.39 440.33 P
1 F
-0.16 ( that identi\336es the open \336le. This) 379.38 440.33 P
2 F
(\336le identi\336er) 152.1 428.33 T
1 F
( is used when invoking other commands to manipulate the open \336le, such as) 202.9 428.33 T
3 F
(gets) 152.1 416.33 T
1 F
(,) 176.09 416.33 T
3 F
(puts) 181.08 416.33 T
1 F
(, and) 205.07 416.33 T
3 F
(close) 227 416.33 T
1 F
(. Normally you will save the \336le identi\336er in a variable when) 256.98 416.33 T
(you open a \336le and then use that variable to refer to the open \336le. Y) 152.1 404.33 T
(ou should not expect) 420.9 404.33 T
(the identi\336ers returned by) 152.1 392.33 T
3 F
(open) 257.58 392.33 T
1 F
( to have any particular format.) 281.57 392.33 T
-0.29 (Three \336le identi\336ers have well-de\336ned names and are always available to you, even if) 170.1 380.33 P
(you haven\325) 152.1 368.33 T
(t explicitly opened any \336les. These are) 196.61 368.33 T
3 F
(stdin) 353.16 368.33 T
1 F
(,) 383.14 368.33 T
3 F
(stdout) 388.14 368.33 T
1 F
(, and) 424.12 368.33 T
3 F
(stderr) 446.05 368.33 T
1 F
(; they) 482.03 368.33 T
(refer to the standard input, output, and error channels for the process in which the T) 152.1 356.33 T
(cl) 485.87 356.33 T
(script is executing.) 152.1 344.33 T
-0.23 (After opening the \336le to search, the) 170.1 332.33 P
3 F
-0.55 (tgrep) 312.27 332.33 P
1 F
-0.23 ( script reads the \336le one line at a time with) 342.25 332.33 P
-0.36 (the) 152.1 320.33 P
3 F
-0.86 (gets) 166.46 320.33 P
1 F
-0.36 ( command.) 190.44 320.33 P
3 F
-0.86 (Gets) 236.64 320.33 P
1 F
-0.36 ( normally takes two ar) 260.63 320.33 P
-0.36 (guments: a \336le identi\336er and the name of) 348.4 320.33 P
(a variable. It reads the next line from the open \336le, discards the terminating newline char-) 152.1 308.33 T
-0.27 (acter) 152.1 296.33 P
-0.27 (, stores the line in the named variable, and returns a count of the number of characters) 171.12 296.33 P
-0.08 (stored into the variable. If the end of the \336le is reached before reading any characters then) 152.1 284.33 P
3 F
(gets) 152.1 272.33 T
1 F
( stores an empty string in the variable and returns) 176.09 272.33 T
3 F
(-1) 375.95 272.33 T
1 F
(.) 387.94 272.33 T
2 F
(Note:) 119.09 257.33 T
(T) 152.1 257.33 T
(cl also pr) 156.74 257.33 T
(ovides a second form of) 194.13 257.33 T
7 F
(gets) 291.56 257.33 T
2 F
( wher) 315.55 257.33 T
(e the line is r) 337.67 257.33 T
(eturned as the r) 389.49 257.33 T
(esult of the) 452.14 257.33 T
(command, and a command) 152.1 247.33 T
7 F
(read) 262.3 247.33 T
2 F
( for non-line-oriented input.) 286.29 247.33 T
1 F
(For each line in the \336le the) 170.1 234.33 T
3 F
(tgrep) 279.75 234.33 T
1 F
( script matches the line against the pattern and) 309.73 234.33 T
-0.02 (prints it using) 152.1 222.33 P
3 F
-0.05 (puts) 209.51 222.33 P
1 F
-0.02 ( if it matches. The) 233.5 222.33 P
3 F
-0.05 (puts) 308.33 222.33 P
1 F
-0.02 ( command takes two ar) 332.32 222.33 P
-0.02 (guments, which are a) 424.76 222.33 P
-0.22 (\336le identi\336er and a string to print.) 152.1 210.33 P
3 F
-0.53 (Puts) 287.7 210.33 P
1 F
-0.22 ( adds a newline character to the string and outputs) 311.68 210.33 P
-0.3 (the line on the given \336le. The script uses) 152.1 198.33 P
3 F
-0.73 (stdout) 313.7 198.33 P
1 F
-0.3 ( as the \336le identi\336er so the line is printed) 349.68 198.33 P
(on standard output.) 152.1 186.33 T
-0.29 (When) 170.1 174.33 P
3 F
-0.69 (tgrep) 196.18 174.33 P
1 F
-0.29 ( reaches the end of the \336le) 226.16 174.33 P
3 F
-0.69 (gets) 331.57 174.33 P
1 F
-0.29 ( will return) 355.55 174.33 P
3 F
-0.69 (-1) 401.61 174.33 P
1 F
-0.29 (, which ends the) 413.6 174.33 P
3 F
-0.69 (while) 479.9 174.33 P
1 F
-0.02 (loop. The script then closes the \336le with the) 152.1 162.33 P
3 F
-0.05 (close) 329.02 162.33 P
1 F
-0.02 ( command; this releases the resources) 359.01 162.33 P
(associated with the open \336le. In most systems there is a limit on how many \336les may be) 152.1 150.33 T
(open at one time in an application, so it is important to close \336les as soon as you are \336n-) 152.1 138.33 T
3 F
(r) 179.1 605.33 T
1 F
-0.09 (Open for reading only) 220.47 605.33 P
-0.09 (. The \336le must already exist. This is the default if) 308.08 605.33 P
(the access mode isn\325) 220.47 595.33 T
(t speci\336ed.) 302.72 595.33 T
3 F
(r+) 179.1 582.33 T
1 F
(Open for reading and writing; the \336le must already exist.) 220.47 582.33 T
3 F
(w) 179.1 569.33 T
1 F
(Open for writing only) 220.47 569.33 T
(. T) 307.26 569.33 T
(runcate the \336le if it already exists, otherwise) 318.01 569.33 T
(create a new empty \336le.) 220.47 559.33 T
3 F
(w+) 179.1 546.33 T
1 F
(Open for reading and writing. T) 220.47 546.33 T
(runcate the \336le if it already exists, oth-) 347.8 546.33 T
(erwise create a new empty \336le.) 220.47 536.33 T
3 F
(a) 179.1 523.33 T
1 F
-0.37 (Open for writing only and set the initial access position to the end of the) 220.47 523.33 P
(\336le. If the \336le doesn\325) 220.47 513.33 T
(t exist then create a new empty \336le.) 303.84 513.33 T
3 F
(a+) 179.1 500.33 T
1 F
(Open the \336le for reading and writing and set the initial access position) 220.47 500.33 T
(to the end of the \336le. If the \336le doesn\325) 220.47 490.33 T
(t exist then create a new empty) 371.29 490.33 T
(\336le.) 220.47 480.33 T
FMENDPAGE
%%EndPage: "100" 109
%%Page: "101" 109
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(1) 98.1 668.33 T
(1.3 Output buf) 102.92 668.33 T
(fering) 166.08 668.33 T
4 F
(101) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(ished reading or writing them. In this example the close is unnecessary) 152.1 632.33 T
(, since the \336le will) 434.58 632.33 T
(be closed automatically when the application exits.) 152.1 620.16 T
98.1 576.8 512.1 579.83 C
152.1 578.03 512.1 578.03 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 578.32 143.1 578.32 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(1) 118.62 583.83 T
(1.3) 124.63 583.83 T
(Output buffering) 152.1 583.83 T
1 10 Q
(The) 152.1 560.14 T
3 F
(puts) 170.14 560.14 T
1 F
( command uses the buf) 194.13 560.14 T
(fering scheme of the C standard I/O library) 286.11 560.14 T
(. This means) 457.82 560.14 T
(that information passed to) 152.1 547.97 T
3 F
(puts) 258.7 547.97 T
1 F
( may not appear immediately in the tar) 282.69 547.97 T
(get \336le. In many) 437.12 547.97 T
(cases \050particularly if the \336le isn\325) 152.1 535.79 T
(t a terminal device\051 output will be saved in the applica-) 280.99 535.79 T
-0.04 (tion\325) 152.1 523.62 P
-0.04 (s memory until a lar) 170.43 523.62 P
-0.04 (ge amount of data has accumulated for the \336le, at which point all) 250.59 523.62 P
-0.01 (of the data will be written out in a single operation. If you need for data to appear in a \336le) 152.1 511.45 P
(immediately then you should invoke the) 152.1 499.28 T
3 F
(f) 315.34 499.28 T
(lush) 321.34 499.28 T
1 F
( command:) 345.32 499.28 T
3 9 Q
(f) 179.1 484.95 T
(lush $f) 184.49 484.95 T
1 10 Q
-0.27 (The) 152.1 471.28 P
3 F
-0.66 (f) 169.87 471.28 P
-0.66 (lush) 175.86 471.28 P
1 F
-0.27 ( command takes a \336le identi\336er as its ar) 199.85 471.28 P
-0.27 (gument and forces any buf) 356.27 471.28 P
-0.27 (fered output) 461.57 471.28 P
-0.21 (data for that \336le to be written to the \336le.) 152.1 459.11 P
3 F
-0.5 (Flush) 311.86 459.11 P
1 F
-0.21 ( doesn\325) 341.85 459.11 P
-0.21 (t return until the data has been writ-) 370.6 459.11 P
(ten. Buf) 152.1 446.93 T
(fered data is also \337ushed when a \336le is closed.) 184.12 446.93 T
98.1 403.58 512.1 406.6 C
152.1 404.8 512.1 404.8 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 405.09 143.1 405.09 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(1) 118.62 410.6 T
(1.4) 124.63 410.6 T
(Random access to \336les) 152.1 410.6 T
1 10 Q
(File I/O is sequential by default: each) 152.1 386.91 T
3 F
(gets) 304.5 386.91 T
1 F
( or) 328.48 386.91 T
3 F
(read) 341.81 386.91 T
1 F
( command returns the next bytes) 365.79 386.91 T
(after the previous) 152.1 374.74 T
3 F
(gets) 224.54 374.74 T
1 F
( or) 248.53 374.74 T
3 F
(read) 261.85 374.74 T
1 F
( command, and each) 285.84 374.74 T
3 F
(puts) 370.49 374.74 T
1 F
( command writes its data) 394.48 374.74 T
(immediately following the data written by the previous) 152.1 362.57 T
3 F
(puts) 374.74 362.57 T
1 F
( command. However) 398.72 362.57 T
(, you) 481.87 362.57 T
(can use the) 152.1 350.39 T
3 F
(seek) 199 350.39 T
1 F
(,) 222.99 350.39 T
3 F
(tell) 227.99 350.39 T
1 F
(, and) 251.98 350.39 T
3 F
(eof) 273.9 350.39 T
1 F
( commands to access \336les non-sequentially) 291.89 350.39 T
(.) 463.63 350.39 T
(Each open \336le has an) 170.1 338.39 T
2 F
(access position) 257.53 338.39 T
1 F
(, which is the location in the \336le where the next) 318.33 338.39 T
-0.31 (read or write will occur) 152.1 326.22 P
-0.31 (. When a \336le is opened the access position is set to the beginning or) 244.12 326.22 P
(end of the \336le, depending on the access mode you speci\336ed to) 152.1 314.05 T
3 F
(open) 402.2 314.05 T
1 F
(. After each read or) 426.19 314.05 T
(write operation the access position increments by the number of bytes transferred. The) 152.1 301.88 T
3 F
(seek) 152.1 289.71 T
1 F
( command may be used to change the current access position. In its simplest form) 176.09 289.71 T
3 F
-0.09 (seek) 152.1 277.54 P
1 F
-0.04 ( takes two ar) 176.09 277.54 P
-0.04 (guments, which are a \336le identi\336er and an integer of) 226.58 277.54 P
-0.04 (fset within the \336le.) 434.8 277.54 P
(For example, the command) 152.1 265.36 T
3 9 Q
(seek $f 2000) 179.1 251.03 T
1 10 Q
-0.08 (changes the access position for the \336le so that the next read or write will start at byte num-) 152.1 237.36 P
(ber 2000 in the \336le.) 152.1 225.19 T
3 F
(Seek) 170.1 213.19 T
1 F
( can also take a third ar) 194.09 213.19 T
(gument that speci\336es an origin for the of) 286.61 213.19 T
(fset. The third) 448.82 213.19 T
(ar) 152.1 201.02 T
(gument must be either) 159.69 201.02 T
3 F
(start) 251.29 201.02 T
1 F
(,) 281.28 201.02 T
3 F
(current) 286.28 201.02 T
1 F
(, or) 328.25 201.02 T
3 F
(end) 344.07 201.02 T
1 F
(.) 362.07 201.02 T
3 F
(Start) 367.06 201.02 T
1 F
( produces the same ef) 397.05 201.02 T
(fect as) 483.46 201.02 T
-0.18 (if the ar) 152.1 188.85 P
-0.18 (gument is omitted: the of) 182.64 188.85 P
-0.18 (fset is measured relative to the start of the \336le.) 282.24 188.85 P
3 F
-0.43 (Current) 467.8 188.85 P
1 F
(means that the of) 152.1 176.68 T
(fset is measured relative to the \336le\325) 220.48 176.68 T
(s current access position, and) 360.39 176.68 T
3 F
(end) 479.74 176.68 T
1 F
-0.25 (means that the of) 152.1 164.51 P
-0.25 (fset is measured relative to the end of the \336le. For example, the following) 219.73 164.51 P
(command sets the access position to 100 bytes before the end of the \336le:) 152.1 152.33 T
3 9 Q
(seek $f -100 end) 179.1 138 T
FMENDPAGE
%%EndPage: "101" 110
%%Page: "102" 110
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(102) 98.1 668.33 T
5 F
(Accessing Files) 442.68 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(If the origin is) 152.1 632.33 T
3 F
(current) 211.51 632.33 T
1 F
( or) 253.48 632.33 T
3 F
(end) 266.81 632.33 T
1 F
( then the of) 284.8 632.33 T
(fset may be either positive or negative; for) 329.86 632.33 T
3 F
(start) 152.1 620.33 T
1 F
( the of) 182.08 620.33 T
(fset must be positive.) 207.44 620.33 T
2 F
(Note:) 119.09 605.33 T
(It is possible to seek past the curr) 152.1 605.33 T
(ent end of the \336le, in which case the \336le may contain a) 285.82 605.33 T
(hole. Check the documentation for your operating system for mor) 152.1 595.33 T
(e information on what) 413.79 595.33 T
(this means.) 152.1 585.33 T
1 F
(The) 170.1 572.33 T
3 F
(tell) 188.14 572.33 T
1 F
( command returns the current access position for a particular \336le identi\336er:) 212.13 572.33 T
3 9 Q
(tell $f) 179.1 558 T
6 F
(\336) 162.9 545 T
7 F
(186) 179.1 545 T
1 10 Q
(This allows you to record a position and return to that position later on.) 152.1 531.33 T
(The) 170.1 519.33 T
3 F
(eof) 188.14 519.33 T
1 F
( command takes a \336le identi\336er as ar) 206.13 519.33 T
(gument and returns) 352.79 519.33 T
3 F
(0) 432.46 519.33 T
1 F
( or) 438.45 519.33 T
3 F
(1) 451.77 519.33 T
1 F
( to indicate) 457.77 519.33 T
(whether the most recent) 152.1 507.33 T
3 F
(gets) 250.36 507.33 T
1 F
( or) 274.34 507.33 T
3 F
(read) 287.67 507.33 T
1 F
( command for the \336le attempted to read past the) 311.65 507.33 T
(end of the \336le:) 152.1 495.33 T
3 9 Q
(eof $f) 179.1 481 T
6 F
(\336) 162.9 468 T
7 F
(0) 179.1 468 T
98.1 425.98 512.1 429 C
152.1 427.2 512.1 427.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 427.49 143.1 427.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(1) 118.62 433 T
(1.5) 124.63 433 T
(The current working directory) 152.1 433 T
1 10 Q
(T) 152.1 409.31 T
(cl provides two commands that help to manage the current working directory:) 157.51 409.31 T
3 F
(pwd) 471.17 409.31 T
1 F
( and) 489.17 409.31 T
3 F
(cd) 152.1 397.31 T
1 F
(.) 164.09 397.31 T
3 F
(Pwd) 169.09 397.31 T
1 F
( takes no ar) 187.08 397.31 T
(guments and returns the full path name of the current working direc-) 232.7 397.31 T
-0.18 (tory) 152.1 385.31 P
-0.18 (.) 167.55 385.31 P
3 F
-0.43 (Cd) 172.37 385.31 P
1 F
-0.18 ( takes a single ar) 184.37 385.31 P
-0.18 (gument and changes the current working directory to the value of) 250.09 385.31 P
(that ar) 152.1 373.31 T
(gument. If) 177.18 373.31 T
3 F
(cd) 221.31 373.31 T
1 F
( is invoked with no ar) 233.3 373.31 T
(guments then it changes the current working) 320.02 373.31 T
-0.09 (directory to the home directory of the user running the T) 152.1 361.31 P
-0.09 (cl script \050) 376.46 361.31 P
3 F
-0.21 (cd) 414.03 361.31 P
1 F
-0.09 ( uses the value of the) 426.03 361.31 P
3 F
(HOME) 152.1 349.31 T
1 F
( environment variable as the path name of the home directory\051.) 176.09 349.31 T
98.1 305.95 512.1 308.98 C
152.1 307.18 512.1 307.18 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 307.46 143.1 307.46 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(1) 118.62 312.98 T
(1.6) 124.63 312.98 T
(Manipulating \336le names: glob and \336le) 152.1 312.98 T
1 10 Q
-0.08 (T) 152.1 289.29 P
-0.08 (cl has two commands for manipulating \336le) 157.51 289.29 P
2 F
-0.08 (names) 330.48 289.29 P
1 F
-0.08 ( as opposed to \336le contents:) 356.02 289.29 P
3 F
-0.18 (glob) 468.83 289.29 P
1 F
-0.08 ( and) 492.82 289.29 P
3 F
(f) 152.1 277.29 T
(ile) 158.1 277.29 T
1 F
(. The) 176.09 277.29 T
3 F
(glob) 199.12 277.29 T
1 F
( command takes one or more patterns as ar) 223.11 277.29 T
(guments and returns a list of) 393.91 277.29 T
(all the \336le names that match the pattern\050s\051:) 152.1 265.29 T
3 9 Q
(glob *.c *.h) 179.1 250.95 T
6 F
(\336) 162.9 237.95 T
7 F
(main.c hash.c hash.h) 179.1 237.95 T
3 10 Q
(Glob) 152.1 224.29 T
1 F
( uses the matching rules of the) 176.09 224.29 T
3 F
(string match) 300.17 224.29 T
1 F
( command \050see Section 10.1\051. In) 372.13 224.29 T
(the above example) 152.1 212.29 T
3 F
(glob) 229.54 212.29 T
1 F
( returns the names of all \336les in the current directory that end in) 253.52 212.29 T
3 F
(.c) 152.1 200.29 T
1 F
( or) 164.09 200.29 T
3 F
(.h) 177.42 200.29 T
1 F
(.) 189.41 200.29 T
3 F
(Glob) 194.41 200.29 T
1 F
( also allows patterns to contain comma-separated lists of alternatives) 218.39 200.29 T
(between braces, as in the following example:) 152.1 188.29 T
3 9 Q
(glob {{src,backup}/*.[ch]}) 179.1 173.95 T
6 F
(\336) 162.9 160.95 T
7 F
(src/main.c src/hash.c src/hash.h backup/hash.c) 179.1 160.95 T
FMENDPAGE
%%EndPage: "102" 111
%%Page: "103" 111
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(1) 98.1 668.33 T
(1.6 Manipulating \336le names: glob and \336le) 102.92 668.33 T
4 F
(103) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 10 Q
0 X
-0.27 (Glob) 152.1 632.33 P
1 F
-0.11 ( treats this pattern as if it were actually multiple patterns, one containing each of the) 176.09 632.33 P
(strings, as in the following example:) 152.1 620.33 T
3 9 Q
(glob {src/*.[ch]} {backup/*.[ch]}) 179.1 606 T
2 10 Q
(Note:) 119.09 592.33 T
(The extra braces ar) 152.1 592.33 T
(ound the patterns in these examples ar) 230.29 592.33 T
(e needed to keep the brackets) 384.26 592.33 T
(inside the patterns fr) 152.1 582.33 T
(om triggering command substitution. They ar) 234.74 582.33 T
(e r) 415.95 582.33 T
(emoved by the T) 426.4 582.33 T
(cl) 490.7 582.33 T
(parser in the usual fashion befor) 152.1 572.33 T
(e invoking the command pr) 282.5 572.33 T
(ocedur) 390.94 572.33 T
(e for) 418.32 572.33 T
7 F
(glob) 439.42 572.33 T
2 F
(.) 463.41 572.33 T
1 F
(If a) 170.1 559.33 T
3 F
(glob) 186.19 559.33 T
1 F
( pattern ends in a slash then it only matches the names of directories. For) 210.18 559.33 T
(example, the command) 152.1 547.33 T
3 9 Q
(glob */) 179.1 533 T
1 10 Q
(will return a list of all the subdirectories of the current directory) 152.1 519.33 T
(.) 406.54 519.33 T
-0.16 (If the list of \336le names to be returned by) 170.1 507.33 P
3 F
-0.38 (glob) 331.72 507.33 P
1 F
-0.16 ( is empty then it normally generates an) 355.71 507.33 P
-0.34 (error) 152.1 495.33 P
-0.34 (. However) 170.97 495.33 P
-0.34 (, if the \336rst ar) 211.86 495.33 P
-0.34 (gument to) 264.46 495.33 P
3 F
-0.81 (glob) 306.54 495.33 P
1 F
-0.34 (, before any patterns, is) 330.53 495.33 P
3 F
-0.81 (-nocomplain) 424.6 495.33 P
1 F
-0.34 ( then) 490.57 495.33 P
3 F
(glob) 152.1 483.33 T
1 F
( will not generate an error if its result is an empty list.) 176.09 483.33 T
(The second command for manipulaing \336le names is) 170.1 471.33 T
3 F
(f) 379.4 471.33 T
(ile) 385.4 471.33 T
1 F
(.) 403.39 471.33 T
3 F
(File) 408.39 471.33 T
1 F
( is a general-pur-) 432.38 471.33 T
-0.16 (pose command with many options that can be used both to manipulate \336le names and also) 152.1 459.33 P
(to retrieve information about \336les. See T) 152.1 447.33 T
(ables 1) 313.79 447.33 T
(1.3 and 1) 341.46 447.33 T
(1.4 for a summary of the options) 378.01 447.33 T
(to) 152.1 435.33 T
3 F
(f) 162.37 435.33 T
(ile) 168.37 435.33 T
1 F
(. This section discusses the name-related options and Section 1) 186.36 435.33 T
(1.7 describes the) 437.49 435.33 T
(other options.The commands in this section operate purely on \336le names. They make no) 152.1 423.33 T
(system calls and do not check to see if the names actually correspond to \336les.) 152.1 411.33 T
3 F
(File dirname) 170.1 399.33 T
1 F
( returns the name of the directory containing a particular \336le:) 242.06 399.33 T
3 9 Q
(f) 179.1 385 T
(ile dirname /a/b/c) 184.49 385 T
6 F
(\336) 162.9 372 T
7 F
(/a/b) 179.1 372 T
3 F
(f) 179.1 359 T
(ile dirname main.c) 184.49 359 T
6 F
(\336) 162.9 346 T
7 F
(.) 179.1 346 T
3 10 Q
(File extension) 170.1 332.33 T
1 F
( returns the extension for a \336le name \050all the characters starting) 254.05 332.33 T
(with the last) 152.1 320.33 T
3 F
(.) 203.46 320.33 T
1 F
( in the name\051, or an empty string if the name contains no extension:) 209.46 320.33 T
3 9 Q
(f) 179.1 306 T
(ile extension src/main.c) 184.49 306 T
6 F
(\336) 162.9 293 T
7 F
(.c) 179.1 293 T
3 10 Q
(File rootname) 170.1 279.33 T
1 F
( returns everything in a \336le name except the extension:) 248.06 279.33 T
3 9 Q
(f) 179.1 265 T
(ile rootname src/main.c) 184.49 265 T
6 F
(\336) 162.9 252 T
7 F
(src/main) 179.1 252 T
3 F
(f) 179.1 239 T
(ile rootname foo) 184.49 239 T
6 F
(\336) 162.9 226 T
7 F
(foo) 179.1 226 T
1 10 Q
-0.26 (Lastly) 170.1 212.33 P
-0.26 (,) 194.44 212.33 P
3 F
-0.62 (f) 199.18 212.33 P
-0.62 (ile tail) 205.17 212.33 P
1 F
-0.26 ( returns the last element in a \336le\325) 252.53 212.33 P
-0.26 (s path name \050i.e. the name of the) 381.48 212.33 P
(\336le within its directory\051:) 152.1 200.33 T
3 9 Q
(f) 179.1 186 T
(ile tail /a/b/c) 184.49 186 T
6 F
(\336) 162.9 173 T
7 F
(c) 179.1 173 T
3 F
(f) 179.1 160 T
(ile tail foo) 184.49 160 T
6 F
(\336) 162.9 147 T
7 F
(foo) 179.1 147 T
FMENDPAGE
%%EndPage: "103" 112
%%Page: "104" 112
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(104) 98.1 668.33 T
5 F
(Accessing Files) 442.68 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 138.6 512.1 639 C
98.1 169.2 512.1 183.6 C
98.1 169.2 512.1 183.6 R
7 X
0 K
V
152.1 177.12 512.1 177.12 2 L
V
0.5 H
2 Z
0 X
N
98.1 138.6 512.1 639 C
98.1 145.8 512.1 160.2 C
98.1 145.8 512.1 160.2 R
7 X
0 K
V
152.1 153.72 512.1 153.72 2 L
V
0.5 H
2 Z
0 X
N
98.1 138.6 512.1 639 C
0 9 Q
0 X
0 K
(T) 152.1 163.2 T
(able  1) 157.27 163.2 T
(1.3.) 181.74 163.2 T
1 F
(A summary of the options for the) 199.71 163.2 T
3 F
(f) 321.78 163.2 T
(ile) 327.17 163.2 T
1 F
( command \050continued in T) 343.35 163.2 T
(able 1) 438.08 163.2 T
(1.4\051.) 459.46 163.2 T
3 F
(f) 158.1 623.6 T
(ile atime) 163.49 623.6 T
7 F
(name) 217.42 623.6 T
1 F
(Returns a decimal string giving the time at which \336le) 230.1 614.6 T
7 F
(name) 423.32 614.6 T
1 F
( was last) 444.89 614.6 T
(accessed, measured in seconds from 12:00 A.M. on January 1, 1970.) 230.1 605.6 T
3 F
(f) 158.1 586.6 T
(ile dirname) 163.49 586.6 T
7 F
(name) 228.2 586.6 T
1 F
(Returns all of the characters in) 230.1 577.6 T
7 F
(name) 342.42 577.6 T
1 F
( up to but not including the last) 363.98 577.6 T
3 10 Q
(/) 478.33 577.6 T
1 9 Q
(character) 230.1 568.6 T
(. Returns) 262.54 568.6 T
3 10 Q
(.) 297.23 568.6 T
1 9 Q
( if) 303.23 568.6 T
7 F
(name) 313.22 568.6 T
1 F
( contains no slashes,) 334.79 568.6 T
3 10 Q
(/) 410.42 568.6 T
1 9 Q
( if the last slash in) 416.42 568.6 T
7 F
(name) 230.1 559.6 T
1 F
( is its \336rst character) 251.67 559.6 T
(.) 321.56 559.6 T
3 F
(f) 158.1 540.6 T
(ile executable) 163.49 540.6 T
7 F
(name) 244.38 540.6 T
1 F
(Returns) 230.1 531.6 T
3 10 Q
(1) 260.31 531.6 T
1 9 Q
( if) 266.3 531.6 T
7 F
(name) 276.29 531.6 T
1 F
( is executable by the current user) 297.86 531.6 T
(,) 415.8 531.6 T
3 10 Q
(0) 420.29 531.6 T
1 9 Q
( otherwise.) 426.29 531.6 T
3 F
(f) 158.1 512.6 T
(ile exists) 163.49 512.6 T
7 F
(name) 222.81 512.6 T
1 F
(Returns) 230.1 503.6 T
3 10 Q
(1) 260.31 503.6 T
1 9 Q
( if) 266.3 503.6 T
7 F
(name) 276.29 503.6 T
1 F
( exists and the current user has search privilege for the) 297.86 503.6 T
(directories leading to it,) 230.1 494.6 T
3 10 Q
(0) 317.72 494.6 T
1 9 Q
( otherwise.) 323.71 494.6 T
3 F
(f) 158.1 475.6 T
(ile extension) 163.49 475.6 T
7 F
(name) 238.99 475.6 T
1 F
(Returns all of the characters in) 230.1 466.6 T
7 F
(name) 342.42 466.6 T
1 F
( after and including the last dot.) 363.98 466.6 T
(Returns an empty string if there is no dot in) 230.1 457.6 T
7 F
(name) 388.87 457.6 T
1 F
( or no dot after the last) 410.44 457.6 T
(slash in) 230.1 448.6 T
7 F
(name) 259.56 448.6 T
1 F
(.) 281.13 448.6 T
3 F
(f) 158.1 429.6 T
(ile isdirectory) 163.49 429.6 T
7 F
(name) 249.77 429.6 T
1 F
(Returns) 230.1 420.6 T
3 10 Q
(1) 260.31 420.6 T
1 9 Q
( if) 266.3 420.6 T
7 F
(name) 276.29 420.6 T
1 F
( is a directory) 297.86 420.6 T
(,) 346.44 420.6 T
3 10 Q
(0) 350.94 420.6 T
1 9 Q
( otherwise.) 356.93 420.6 T
3 F
(f) 158.1 401.6 T
(ile isf) 163.49 401.6 T
(ile) 201.24 401.6 T
7 F
(name) 222.81 401.6 T
1 F
(Returns) 230.1 392.6 T
3 10 Q
(1) 260.31 392.6 T
1 9 Q
( if) 266.3 392.6 T
7 F
(name) 276.29 392.6 T
1 F
( is an ordinary \336le,) 297.86 392.6 T
3 10 Q
(0) 367.75 392.6 T
1 9 Q
( otherwise.) 373.75 392.6 T
3 F
(f) 158.1 373.6 T
(ile lstat) 163.49 373.6 T
7 F
(name) 217.42 373.6 T
(arrayName) 244.38 373.6 T
1 F
(Invokes the) 230.1 364.6 T
3 F
(lstat) 274.03 364.6 T
1 F
( system call on) 300.99 364.6 T
7 F
(name) 356.91 364.6 T
1 F
( and sets elements of) 378.48 364.6 T
7 F
(arrayName) 230.1 355.6 T
1 F
( to hold information returned by) 278.63 355.6 T
3 F
(lstat) 396.46 355.6 T
1 F
(. This option is) 423.42 355.6 T
(identical to the) 230.1 346.6 T
3 F
(stat) 285.77 346.6 T
1 F
( option unless) 307.34 346.6 T
7 F
(name) 359.52 346.6 T
1 F
( refers to a symbolic link, in) 381.09 346.6 T
(which case this command returns information about the link instead of the) 230.1 337.6 T
(\336le it points to.) 230.1 328.6 T
3 F
(f) 158.1 309.6 T
(ile mtime) 163.49 309.6 T
7 F
(name) 217.42 309.6 T
1 F
(Returns a decimal string giving the time at which \336le) 230.1 300.6 T
7 F
(name) 423.32 300.6 T
1 F
( was last) 444.89 300.6 T
(modi\336ed, measured in seconds from 12:00 A.M. on January 1, 1970.) 230.1 291.6 T
3 F
(f) 158.1 272.6 T
(ile owned) 163.49 272.6 T
7 F
(name) 217.42 272.6 T
1 F
(Returns) 230.1 263.6 T
3 10 Q
(1) 260.31 263.6 T
1 9 Q
( if) 266.3 263.6 T
7 F
(name) 276.29 263.6 T
1 F
( is owned by the current user) 297.86 263.6 T
(,) 401.33 263.6 T
3 10 Q
(0) 405.82 263.6 T
1 9 Q
( otherwise.) 411.82 263.6 T
3 F
(f) 158.1 244.6 T
(ile readable) 163.49 244.6 T
7 F
(name) 233.59 244.6 T
1 F
(Returns) 230.1 235.6 T
3 10 Q
(1) 260.31 235.6 T
1 9 Q
( if) 266.3 235.6 T
7 F
(name) 276.29 235.6 T
1 F
( is readable by the current user) 297.86 235.6 T
(,) 407.81 235.6 T
3 10 Q
(0) 412.3 235.6 T
1 9 Q
( otherwise.) 418.3 235.6 T
3 F
(f) 158.1 216.6 T
(ile readlink) 163.49 216.6 T
7 F
(name) 233.59 216.6 T
1 F
(Returns the value of the symbolic link given by) 230.1 207.6 T
7 F
(name) 403.1 207.6 T
1 F
( \050the name of the \336le) 424.67 207.6 T
(it points to\051.) 230.1 198.6 T
152.1 635.35 152.1 191.85 2 L
V
0.5 H
0 Z
N
512.1 635.35 512.1 191.85 2 L
V
N
151.85 635.6 512.35 635.6 2 L
V
N
151.85 598.6 512.35 598.6 2 L
V
0.25 H
N
151.85 552.6 512.35 552.6 2 L
V
N
151.85 524.6 512.35 524.6 2 L
V
N
151.85 487.6 512.35 487.6 2 L
V
N
151.85 441.6 512.35 441.6 2 L
V
N
151.85 413.6 512.35 413.6 2 L
V
N
151.85 385.6 512.35 385.6 2 L
V
N
151.85 321.6 512.35 321.6 2 L
V
N
151.85 284.6 512.35 284.6 2 L
V
N
151.85 256.6 512.35 256.6 2 L
V
N
151.85 228.6 512.35 228.6 2 L
V
N
151.85 191.6 512.35 191.6 2 L
V
0.5 H
N
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "104" 113
%%Page: "105" 113
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(1) 98.1 668.33 T
(1.7 File information commands) 102.92 668.33 T
4 F
(105) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 317.98 512.1 321 C
152.1 319.2 512.1 319.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 319.49 143.1 319.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(1) 118.62 325 T
(1.7) 124.63 325 T
(File information commands) 152.1 325 T
1 10 Q
(In addition to the options already discussed in Section 1) 152.1 301.31 T
(1.6 above, the) 375.21 301.31 T
3 F
(f) 433.77 301.31 T
(ile) 439.77 301.31 T
1 F
( command) 457.76 301.31 T
(provides many other options that can be used to retrieve information about \336les. Each of) 152.1 289.01 T
(these options except) 152.1 276.72 T
3 F
(stat) 235.65 276.72 T
1 F
( and) 259.64 276.72 T
3 F
(lstat) 279.07 276.72 T
1 F
( has the form) 309.05 276.72 T
3 9 Q
(f) 179.1 262.38 T
(ile) 184.49 262.38 T
7 F
(option) 206.06 262.38 T
(name) 243.81 262.38 T
1 10 Q
(where) 152.1 248.72 T
7 F
(option) 179.01 248.72 T
1 F
( speci\336es the information desired, such as) 214.99 248.72 T
3 F
(exists) 384.32 248.72 T
1 F
( or) 420.3 248.72 T
3 F
(readable) 433.62 248.72 T
1 F
( or) 481.6 248.72 T
3 F
(size) 152.1 236.42 T
1 F
(, and) 176.09 236.42 T
7 F
(name) 198.01 236.42 T
1 F
( is the name of the \336le. T) 222 236.42 T
(able 1) 321.24 236.42 T
(1.3 summarizes all of the options for the) 345.01 236.42 T
3 F
(f) 152.1 224.12 T
(ile) 158.1 224.12 T
1 F
( command.) 176.09 224.12 T
-0.44 (The) 170.1 212.12 P
3 F
-1.06 (exists) 187.7 212.12 P
1 F
-0.44 (,) 223.68 212.12 P
3 F
-1.06 (isf) 228.23 212.12 P
-1.06 (ile) 246.22 212.12 P
1 F
-0.44 (,) 264.21 212.12 P
3 F
-1.06 (isdirectory) 268.77 212.12 P
1 F
-0.44 (, and) 334.08 212.12 P
3 F
-1.06 (type) 355.13 212.12 P
1 F
-0.44 ( options return information about) 379.11 212.12 P
-0.23 (the nature of a \336le.) 152.1 199.82 P
3 F
-0.56 (File exists) 228.66 199.82 P
1 F
-0.23 ( returns) 294.06 199.82 P
3 F
-0.56 (1) 326.35 199.82 P
1 F
-0.23 ( if there exists a \336le by the given name and) 332.35 199.82 P
3 F
-0.56 (0) 503.84 199.82 P
1 F
-0.32 (if there is no such \336le or the current user doesn\325) 152.1 187.52 P
-0.32 (t have search permission for the directories) 339.73 187.52 P
(leading to it.) 152.1 175.23 T
3 F
(File isf) 204.85 175.23 T
(ile) 252.82 175.23 T
1 F
( returns) 270.82 175.23 T
3 F
(1) 303.57 175.23 T
1 F
( if the \336le is an ordinary disk \336le and) 309.56 175.23 T
3 F
(0) 459.47 175.23 T
1 F
( if it is) 465.47 175.23 T
(something else, such as a directory or device \336le.) 152.1 162.93 T
3 F
(File isdirectory) 351.12 162.93 T
1 F
( returns) 447.07 162.93 T
3 F
(1) 479.82 162.93 T
1 F
( if the) 485.82 162.93 T
(\336le is a directory and) 152.1 150.63 T
3 F
(0) 238.98 150.63 T
1 F
( otherwise.) 244.98 150.63 T
3 F
(File type) 291.33 150.63 T
1 F
( returns a string such as) 345.3 150.63 T
3 F
(f) 441.9 150.63 T
(ile) 447.9 150.63 T
1 F
(,) 465.89 150.63 T
3 F
(direc-) 470.89 150.63 T
(tory) 152.1 138.33 T
1 F
(, or) 175.44 138.33 T
3 F
(socket) 191.26 138.33 T
1 F
( that identi\336es the \336le type.) 227.24 138.33 T
98.1 333 512.1 639 C
98.1 371.4 512.1 385.8 C
98.1 371.4 512.1 385.8 R
7 X
0 K
V
152.1 379.32 512.1 379.32 2 L
V
0.5 H
2 Z
0 X
N
98.1 333 512.1 639 C
98.1 348 512.1 362.4 C
98.1 348 512.1 362.4 R
7 X
0 K
V
152.1 355.92 512.1 355.92 2 L
V
0.5 H
2 Z
0 X
N
98.1 333 512.1 639 C
0 9 Q
0 X
0 K
(T) 152.1 365.4 T
(able  1) 157.27 365.4 T
(1.4.) 181.74 365.4 T
1 F
(A summary of the options for the) 199.71 365.4 T
3 F
(f) 321.78 365.4 T
(ile) 327.17 365.4 T
1 F
( command, cont\325d.) 343.35 365.4 T
3 F
(f) 158.1 621.8 T
(ile rootname) 163.49 621.8 T
7 F
(name) 233.59 621.8 T
1 F
(Returns all of the characters in) 230.1 612.8 T
7 F
(name) 342.42 612.8 T
1 F
( up to but not including the last) 363.98 612.8 T
3 10 Q
(.) 478.33 612.8 T
1 9 Q
(character) 230.1 603.8 T
(. Returns) 262.54 603.8 T
7 F
(name) 297.23 603.8 T
1 F
( if it doesn\325) 318.8 603.8 T
(t contain any dots or if it doesn\325) 359.83 603.8 T
(t) 474.25 603.8 T
(contain any dots after the last slash.) 230.1 594.8 T
3 F
(f) 158.1 575.8 T
(ile size) 163.49 575.8 T
7 F
(name) 212.02 575.8 T
1 F
(Returns a decimal string giving the size of \336le) 230.1 566.8 T
3 F
(name) 398.1 566.8 T
1 F
( in bytes.) 419.67 566.8 T
3 F
(f) 158.1 547.8 T
(ile stat) 163.49 547.8 T
7 F
(name) 212.02 547.8 T
(arrayName) 238.99 547.8 T
1 F
(Invokes) 230.1 538.8 T
3 F
(stat) 260.8 538.8 T
1 F
( system call on) 282.37 538.8 T
7 F
(name) 338.29 538.8 T
1 F
( and sets elements of) 359.86 538.8 T
7 F
(arrayName) 436.99 538.8 T
1 F
( to) 485.52 538.8 T
(hold information returned by) 230.1 529.8 T
3 F
(stat) 336.44 529.8 T
1 F
(. The following elements are set, each) 358.01 529.8 T
(as a decimal string:) 230.1 520.8 T
3 F
(atime) 301.99 520.8 T
1 F
(,) 328.95 520.8 T
3 F
(ctime) 333.45 520.8 T
1 F
(,) 360.41 520.8 T
3 F
(dev) 364.9 520.8 T
1 F
(,) 380.49 520.8 T
3 F
(gid) 384.99 520.8 T
1 F
(,) 401.17 520.8 T
3 F
(ino) 405.66 520.8 T
1 F
(,) 421.84 520.8 T
3 F
(mode) 426.33 520.8 T
1 F
(,) 447.9 520.8 T
3 F
(mtime) 452.39 520.8 T
1 F
(,) 479.36 520.8 T
3 F
(nlink) 230.1 511.8 T
1 F
(,) 257.06 511.8 T
3 F
(size) 261.55 511.8 T
1 F
(, and) 283.12 511.8 T
3 F
(uid) 302.84 511.8 T
1 F
(.) 319.02 511.8 T
3 F
(f) 158.1 492.8 T
(ile tail) 163.49 492.8 T
7 F
(name) 212.02 492.8 T
1 F
(Returns all of the characters in) 230.1 483.8 T
7 F
(name) 342.42 483.8 T
1 F
( after the last) 363.98 483.8 T
3 10 Q
(/) 412.9 483.8 T
1 9 Q
( character) 418.9 483.8 T
(. Returns) 453.58 483.8 T
7 F
(name) 230.1 474.8 T
1 F
( if it contains no slashes.) 251.67 474.8 T
3 F
(f) 158.1 455.8 T
(ile type) 163.49 455.8 T
7 F
(name) 212.02 455.8 T
1 F
(Returns a string giving the type of \336le) 230.1 446.8 T
7 F
(name) 368.9 446.8 T
1 F
(. The return value will be one) 390.47 446.8 T
(of) 230.1 437.8 T
3 F
(f) 239.83 437.8 T
(ile) 245.23 437.8 T
1 F
(,) 261.4 437.8 T
3 F
(directory) 265.9 437.8 T
1 F
(,) 313.84 437.8 T
3 F
(characterSpecial) 318.34 437.8 T
1 F
(,) 404.62 437.8 T
3 F
(blockSpecial) 409.11 437.8 T
1 F
(,) 473.82 437.8 T
3 F
(f) 478.31 437.8 T
(ifo) 483.71 437.8 T
1 F
(,) 499.88 437.8 T
3 F
(link) 230.1 428.8 T
1 F
(, or) 251.67 428.8 T
3 F
(socket) 265.9 428.8 T
1 F
(.) 298.25 428.8 T
3 F
(f) 158.1 409.8 T
(ile writable) 163.49 409.8 T
7 F
(name) 233.59 409.8 T
1 F
(Returns) 230.1 400.8 T
3 10 Q
(1) 260.31 400.8 T
1 9 Q
( if) 266.3 400.8 T
7 F
(name) 276.29 400.8 T
1 F
( is writable by the current user) 297.86 400.8 T
(,) 406.82 400.8 T
3 10 Q
(0) 411.32 400.8 T
1 9 Q
( otherwise.) 417.31 400.8 T
152.1 633.55 152.1 394.05 2 L
V
0.5 H
0 Z
N
512.1 633.55 512.1 394.05 2 L
V
N
151.85 633.8 512.35 633.8 2 L
V
N
151.85 587.8 512.35 587.8 2 L
V
0.25 H
N
151.85 559.8 512.35 559.8 2 L
V
N
151.85 504.8 512.35 504.8 2 L
V
N
151.85 467.8 512.35 467.8 2 L
V
N
151.85 421.8 512.35 421.8 2 L
V
N
151.85 393.8 512.35 393.8 2 L
V
0.5 H
N
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "105" 114
%%Page: "106" 114
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(106) 98.1 668.33 T
5 F
(Accessing Files) 442.68 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(The) 170.1 632.33 T
3 F
(readable) 188.14 632.33 T
1 F
(,) 236.11 632.33 T
3 F
(writable) 241.11 632.33 T
1 F
(, and) 289.08 632.33 T
3 F
(executable) 311.01 632.33 T
1 F
( options return) 370.98 632.33 T
3 F
(0) 431.78 632.33 T
1 F
( or) 437.77 632.33 T
3 F
(1) 451.1 632.33 T
1 F
( to indicate) 457.09 632.33 T
(whether the current user is permitted to carry out the indicated action on the \336le. The) 152.1 620.33 T
3 F
(owned) 152.1 608.33 T
1 F
( option returns) 182.08 608.33 T
3 F
(1) 242.88 608.33 T
1 F
( if the current user is the \336le\325) 248.88 608.33 T
(s owner and) 364.07 608.33 T
3 F
(0) 414.87 608.33 T
1 F
( otherwise.) 420.86 608.33 T
(The) 170.1 596.33 T
3 F
(size) 188.14 596.33 T
1 F
( option returns a decimal string giving the size of the \336le in bytes.) 212.13 596.33 T
3 F
(File) 477.24 596.33 T
(mtime) 152.1 584.33 T
1 F
( returns the time when the \336le was last modi\336ed. The time value is returned in the) 182.08 584.33 T
(standard POSIX form for times, namely an integer that counts the number of seconds) 152.1 572.33 T
(since 12:00 A.M. on January 1, 1970. The) 152.1 560.33 T
3 F
(atime) 323.1 560.33 T
1 F
( option is similar to) 353.08 560.33 T
3 F
(mtime) 433.33 560.33 T
1 F
( except that) 463.31 560.33 T
(it returns the time when the \336le was last accessed.) 152.1 548.33 T
(The) 170.1 536.33 T
3 F
(stat) 188.14 536.33 T
1 F
( option provides a simple way to get many pieces of information about a) 212.13 536.33 T
-0.16 (\336le at one time. This can be signi\336cantly faster than invoking) 152.1 524.33 P
3 F
-0.38 (f) 398 524.33 P
-0.38 (ile) 403.99 524.33 P
1 F
-0.16 ( many times to get the) 421.98 524.33 P
-0.19 (pieces of information individually) 152.1 512.33 P
-0.19 (.) 287.2 512.33 P
3 F
-0.44 (File stat) 292.01 512.33 P
1 F
-0.19 ( also provides additional information that) 345.54 512.33 P
(isn\325) 152.1 500.33 T
(t accessible with any other \336le options. It takes two additional ar) 166.91 500.33 T
(guments, which are) 424.34 500.33 T
(the name of a \336le and the name of a variable, as in the following example:) 152.1 488.33 T
3 9 Q
(f) 179.1 474 T
(ile stat main.c info) 184.49 474 T
1 10 Q
(In this case the name of the \336le is) 152.1 460.33 T
3 F
(main.c) 288.39 460.33 T
1 F
( and the variable name is) 324.38 460.33 T
3 F
(info) 426.52 460.33 T
1 F
(. The variable) 450.51 460.33 T
-0.05 (will be treated as an array and the following elements will be set, each as a decimal string:) 152.1 448.33 P
(The) 152.1 300.33 T
3 F
(atime) 170.14 300.33 T
1 F
(,) 200.12 300.33 T
3 F
(mtime) 205.12 300.33 T
1 F
(, and) 235.1 300.33 T
3 F
(size) 257.03 300.33 T
1 F
( elements have the same values as produced by the corre-) 281.02 300.33 T
(sponding) 152.1 288.33 T
3 F
(f) 191.25 288.33 T
(ile) 197.24 288.33 T
1 F
( options discussed above. For more information on the other elements,) 215.24 288.33 T
(refer to your system documentation for the) 152.1 276.33 T
3 F
(stat) 325.58 276.33 T
1 F
( system call; each of the elements is) 349.57 276.33 T
(taken directly from the corresponding \336eld of the structure returned by) 152.1 264.33 T
3 F
(stat) 437.16 264.33 T
1 F
(.) 461.15 264.33 T
(The) 170.1 252.33 T
3 F
(lstat) 188.14 252.33 T
1 F
( and) 218.12 252.33 T
3 F
(readlink) 237.55 252.33 T
1 F
( options are useful when dealing with symbolic links,) 285.53 252.33 T
(and they can only be used on systems that support symbolic links.) 152.1 240.33 T
3 F
(File lstat) 418.33 240.33 T
1 F
( is iden-) 478.3 240.33 T
(tical to) 152.1 228.33 T
3 F
(f) 182.08 228.33 T
(ile stat) 188.08 228.33 T
1 F
( for ordinary \336les, but when it is applied to a symbolic link it returns) 236.05 228.33 T
(information about the symbolic link itself, whereas) 152.1 216.33 T
3 F
(f) 358.64 216.33 T
(ile stat) 364.63 216.33 T
1 F
( will return information) 412.61 216.33 T
-0.34 (about the \336le the link points to.) 152.1 204.33 P
3 F
-0.81 (File readlink) 276.91 204.33 P
1 F
-0.34 ( returns the contents of a symbolic link,) 354.06 204.33 P
(i.e. the name of the \336le that it refers to; it may only be used on symbolic links. For all of) 152.1 192.33 T
(the other) 152.1 180.33 T
3 F
(f) 189.85 180.33 T
(ile) 195.85 180.33 T
1 F
( commands, if the name refers to a symbolic link then the command oper-) 213.84 180.33 T
(ates on the tar) 152.1 168.33 T
(get of the link, not the link itself.) 207.71 168.33 T
3 F
(atime) 179.1 433.33 T
1 F
(T) 224.43 433.33 T
(ime of last access.) 230.19 433.33 T
3 F
(ctime) 179.1 420.33 T
1 F
(T) 224.43 420.33 T
(ime of last status change.) 230.19 420.33 T
3 F
(dev) 179.1 407.33 T
1 F
(Identi\336er for device containing \336le.) 224.43 407.33 T
3 F
(gid) 179.1 394.33 T
1 F
(Identi\336er for the \336le\325) 224.43 394.33 T
(s group.) 307.98 394.33 T
3 F
(ino) 179.1 381.33 T
1 F
(Serial number for the \336le within its device.) 224.43 381.33 T
3 F
(mode) 179.1 368.33 T
1 F
(Mode bits for \336le.) 224.43 368.33 T
3 F
(mtime) 179.1 355.33 T
1 F
(T) 224.43 355.33 T
(ime of last modi\336cation.) 230.19 355.33 T
3 F
(nlink) 179.1 342.33 T
1 F
(Number of links to \336le.) 224.43 342.33 T
3 F
(size) 179.1 329.33 T
1 F
(Size of \336le, in bytes.) 224.43 329.33 T
3 F
(uid) 179.1 316.33 T
1 F
(Identi\336er for the user that owns the \336le.) 224.43 316.33 T
FMENDPAGE
%%EndPage: "106" 115
%%Page: "107" 115
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(1) 98.1 668.33 T
(1.8 Errors in system calls) 102.92 668.33 T
4 F
(107) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 623.98 512.1 627 C
152.1 625.2 512.1 625.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 625.49 143.1 625.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(1) 118.62 631 T
(1.8) 124.63 631 T
(Errors in system calls) 152.1 631 T
1 10 Q
-0.13 (Most of the commands described in this chapter invoke calls on the operating system, and) 152.1 607.31 P
(in many cases the system calls can return errors. This can happen, for example, if you) 152.1 595.31 T
(invoke) 152.1 583.31 T
3 F
(open) 181.8 583.31 T
1 F
( or) 205.79 583.31 T
3 F
(f) 219.11 583.31 T
(ile stat) 225.11 583.31 T
1 F
( on a \336le that doesn\325) 273.08 583.31 T
(t exist, or if an I/O error occurs in read-) 354.24 583.31 T
(ing a \336le. The T) 152.1 571.31 T
(cl commands detect these system call errors and in most cases the T) 215.52 571.31 T
(cl) 486.3 571.31 T
(commands will return errors themselves. The error message will identify the error that) 152.1 559.31 T
(occurred:) 152.1 547.31 T
3 9 Q
(open bogus) 179.1 532.98 T
6 F
(\306) 162.9 519.98 T
7 F
(couldn\325t open "bogus": no such f) 179.1 519.98 T
(ile or directory) 351.66 519.98 T
1 10 Q
(When an error occurs in a system call T) 170.1 506.31 T
(cl also sets the) 328.71 506.31 T
3 F
(errorCode) 389.23 506.31 T
1 F
( variable to pro-) 443.2 506.31 T
-0.21 (vide more precise information. Y) 152.1 494.31 P
-0.21 (ou may \336nd this information useful as part of error recov-) 283.23 494.31 P
(ery so that, for example, you can determine exactly why the the \336le wasn\325) 152.1 482.31 T
(t accessible) 447.53 482.31 T
(\050W) 152.1 470.31 T
(as there no such \336le? W) 164.06 470.31 T
(as it protected to prevent access? ...\051. If a system call error has) 259.02 470.31 T
(occurred then) 152.1 458.31 T
3 F
(errorCode) 209.27 458.31 T
1 F
( will consist of a list with three elements:) 263.24 458.31 T
3 9 Q
(set errorCode) 179.1 443.98 T
6 F
(\336) 162.9 430.98 T
7 F
(POSIX ENOENT {no such f) 179.1 430.98 T
(ile or directory}) 303.13 430.98 T
1 10 Q
(The \336rst element is always) 152.1 417.31 T
3 F
(POSIX) 261.75 417.31 T
1 F
( to indicate that the error occurred in a POSIX system) 291.73 417.31 T
(call. The second element is the of) 152.1 405.31 T
(\336cial name for the error \050) 285.99 405.31 T
3 F
(ENOENT) 386.73 405.31 T
1 F
( in the above exam-) 422.71 405.31 T
(ple\051. Refer to your system documentation or to the include \336le) 152.1 393.31 T
3 F
(errno.h) 403.6 393.31 T
1 F
( for a complete) 445.58 393.31 T
(list of the error names for your system. These names adhere to the POSIX standard as) 152.1 381.31 T
(much as possible. The third element is the error message that corresponds to the error) 152.1 369.31 T
(.) 493.24 369.31 T
-0.33 (This string usually appears in the error message returned by the T) 152.1 357.31 P
-0.33 (cl command. T) 410.08 357.31 P
-0.33 (cl uses the) 468.95 357.31 P
-0.16 (standard list of error messages provided by your system, if there is one, and adheres to the) 152.1 345.31 P
(POSIX standard as much as possible.) 152.1 333.31 T
FMENDPAGE
%%EndPage: "107" 116
%%Page: "108" 116
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(108) 98.1 668.33 T
5 F
(Accessing Files) 442.68 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
FMENDPAGE
%%EndPage: "108" 117
%%Page: "109" 117
612 792 0 FMBEGINPAGE
98.1 675 512.1 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
98.1 450 512.1 450 2 L
7 X
V
2 Z
0 X
N
98.1 108 512.1 126 R
7 X
V
4 10 Q
0 X
(109) 495.43 119.33 T
98.1 54 512.1 108 R
7 X
V
1 9 Q
0 X
(Copyright \251 1993 Addison-W) 152.1 102 T
(esley Publishing Company) 261.32 102 T
(, Inc.) 357.1 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 152.1 91 T
(. Any) 485.77 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 152.1 80 T
-0.34 (lisher) 152.1 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 171.58 69 P
(does not of) 152.1 58 T
(fer warranties in regard to this draft.) 191.88 58 T
0 24 Q
(Chapter 12) 152.1 605 T
-0.48 (Pr) 152.1 575 S
-0.48 (ocesses) 176.02 575 S
98.1 135 512.1 423 R
7 X
V
1 10 Q
0 X
(T) 152.1 416.33 T
(cl provides several commands for dealing with processes. Y) 157.51 416.33 T
(ou can create new processes) 396.61 416.33 T
(with the) 152.1 404.33 T
3 F
(exec) 187.08 404.33 T
1 F
( command, or you can create new processes with) 211.07 404.33 T
3 F
(open) 409.24 404.33 T
1 F
( and then use \336le) 433.23 404.33 T
(I/O commands to communicate with them. Y) 152.1 392.33 T
(ou can access process identi\336ers with the) 331.82 392.33 T
3 F
-0.38 (pid) 152.1 380.33 P
1 F
-0.16 ( command. Y) 170.09 380.33 P
-0.16 (ou can read and write environment variables using the) 222.9 380.33 P
3 F
-0.38 (env) 440.47 380.33 P
1 F
-0.16 ( variable and) 458.46 380.33 P
-0.32 (you can terminate the current process with the) 152.1 368.33 P
3 F
-0.78 (exit) 336.58 368.33 P
1 F
-0.32 ( command. Like the \336le commands in) 360.57 368.33 P
(Chapter 1) 152.1 356.33 T
(1, these commands are only available on systems that support POSIX kernel) 190.87 356.33 T
(calls. T) 152.1 344.33 T
(able 12.1 summarizes the commands related to process management.) 180.82 344.33 T
98.1 300.98 512.1 304 C
152.1 302.2 512.1 302.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 302.49 143.1 302.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(12.1) 117.96 308 T
(Invoking subprocesses with exec) 152.1 308 T
1 10 Q
(The) 152.1 284.31 T
3 F
(exec) 170.14 284.31 T
1 F
( command creates one or more subprocesses and waits until they complete) 194.13 284.31 T
(before returning. For example,) 152.1 272.31 T
3 9 Q
(exec rm main.o) 179.1 257.98 T
1 10 Q
(executes) 152.1 244.31 T
3 F
(rm) 189.01 244.31 T
1 F
( as a subprocess, passes it the ar) 201 244.31 T
(gument) 328.5 244.31 T
3 F
(main.o) 360.98 244.31 T
1 F
(, and returns after) 396.96 244.31 T
3 F
(rm) 469.95 244.31 T
1 F
( com-) 481.95 244.31 T
-0.18 (pletes. The ar) 152.1 232.31 P
-0.18 (guments to) 205.67 232.31 P
3 F
-0.44 (exec) 251.95 232.31 P
1 F
-0.18 ( are similar to what you would type as a command line to a) 275.94 232.31 P
-0.16 (shell program such as) 152.1 220.31 P
3 F
-0.38 (sh) 240.85 220.31 P
1 F
-0.16 ( or) 252.84 220.31 P
3 F
-0.38 (csh) 265.84 220.31 P
1 F
-0.16 (. The \336rst ar) 283.83 220.31 P
-0.16 (gument to) 332.03 220.31 P
3 F
-0.38 (exec) 374.47 220.31 P
1 F
-0.16 ( is the name of a program to) 398.45 220.31 P
(execute and each additional ar) 152.1 208.31 T
(gument forms one ar) 272.92 208.31 T
(gument to that subprocess.) 355.74 208.31 T
(T) 170.1 196.31 T
(o execute a subprocess,) 175.51 196.31 T
3 F
(exec) 271.81 196.31 T
1 F
( looks for an executable \336le with a name equal to) 295.8 196.31 T
3 F
-0.25 (exec) 152.1 184.31 P
1 F
-0.11 (\325) 176.09 184.31 P
-0.11 (s \336rst ar) 178.87 184.31 P
-0.11 (gument. If the name contains a) 210.68 184.31 P
3 F
-0.25 (/) 335.78 184.31 P
1 F
-0.11 ( or starts with) 341.78 184.31 P
3 F
-0.25 (~) 398.54 184.31 P
1 F
-0.11 ( then) 404.54 184.31 P
3 F
-0.25 (exec) 426.54 184.31 P
1 F
-0.11 ( checks the sin-) 450.52 184.31 P
-0.33 (gle \336le indicated by the name. Otherwise) 152.1 172.31 P
3 F
-0.78 (exec) 316.36 172.31 P
1 F
-0.33 ( checks each of the directories in the) 340.35 172.31 P
3 F
-0.78 (PATH) 485.94 172.31 P
1 F
-0.11 (environment variable to see if the command name refers to an executable \336le in that direc-) 152.1 160.31 P
(tory) 152.1 148.31 T
(.) 167.55 148.31 T
3 F
(Exec) 172.55 148.31 T
1 F
( uses the \336rst executable that it \336nds.) 196.54 148.31 T
44.1 351 89.1 423 C
53.1 360 215.1 414 R
7 X
0 K
V
0 9 Q
0 X
(FIGURE  12) 53.1 408 T
(T) 53.1 387 T
(ABLE  12) 58.43 387 T
44.1 351 143.1 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "109" 118
%%Page: "110" 118
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(1) 98.1 668.33 T
(10) 103.11 668.33 T
5 F
(Processes) 465.45 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 10 Q
0 X
-0.21 (Exec) 170.1 351.53 P
1 F
-0.09 ( collects all of the information written to standard output by the subprocess and) 194.09 351.53 P
(returns that information as its result, as in the following example:) 152.1 339.53 T
3 9 Q
(exec echo wc tcl.h) 179.1 325.2 T
6 F
(\336) 162.9 312.2 T
7 F
(618) 206.06 312.2 T
(2641) 243.81 312.2 T
(21825) 281.56 312.2 T
(tcl.h) 313.91 312.2 T
1 10 Q
-0.01 (If the last character of output is a newline then) 152.1 298.53 P
3 F
-0.02 (exec) 340.21 298.53 P
1 F
-0.01 ( removes the newline. This behavior) 364.2 298.53 P
(may seem strange but it makes) 152.1 286.53 T
3 F
(exec) 277.57 286.53 T
1 F
( consistent with other T) 301.56 286.53 T
(cl commands,which don\325) 395.25 286.53 T
(t) 495.83 286.53 T
(normally terminate the last line of the result; you can retain the newline by specifying) 152.1 274.53 T
3 F
(-) 152.1 262.53 T
(keepnewline) 158.1 262.53 T
1 F
( as the \336rst ar) 224.06 262.53 T
(gument to) 277.73 262.53 T
3 F
(exec) 320.49 262.53 T
1 F
(.) 344.47 262.53 T
3 F
-0.95 (Exec) 170.1 250.53 P
1 F
-0.4 ( supports I/O redirection in a fashion similar to the UNIX shells. For example, if) 194.09 250.53 P
(one of the ar) 152.1 238.53 T
(guments to) 202.15 238.53 T
3 F
(exec) 248.8 238.53 T
1 F
( is \322) 272.78 238.53 T
3 F
(>foo) 288.89 238.53 T
1 F
(\323 \050or if there is a \322) 312.87 238.53 T
3 F
(>) 385.58 238.53 T
1 F
(\323 ar) 391.58 238.53 T
(gument followed by a) 406.1 238.53 T
(\322) 152.1 226.53 T
3 F
(foo) 156.54 226.53 T
1 F
(\323 ar) 174.53 226.53 T
(gument\051, then output from the process is placed in \336le) 189.05 226.53 T
3 F
(foo) 407.52 226.53 T
1 F
( instead of returning) 425.51 226.53 T
-0.08 (to T) 152.1 214.53 P
-0.08 (cl as) 167.7 214.53 P
3 F
-0.19 (exec) 188.08 214.53 P
1 F
-0.08 (\325) 212.07 214.53 P
-0.08 (s result. In this case) 214.85 214.53 P
3 F
-0.19 (exec) 295.5 214.53 P
1 F
-0.08 (\325) 319.49 214.53 P
-0.08 (s result will be an empty string.) 322.27 214.53 P
3 F
-0.19 (Exec) 449.96 214.53 P
1 F
-0.08 ( also sup-) 473.95 214.53 P
(ports several other forms of output redirection, such as) 152.1 202.53 T
3 F
(>>) 373.05 202.53 T
1 F
( to append to a \336le,) 385.04 202.53 T
3 F
(>&) 464.16 202.53 T
1 F
( to redi-) 476.15 202.53 T
(rect both standard output and standard error) 152.1 190.53 T
(, and) 326.56 190.53 T
3 F
(2>) 348.49 190.53 T
1 F
( to redirect standard error) 360.48 190.53 T
(independently from standard output.) 152.1 178.53 T
-0.07 (Standard input may be redirected using either) 170.1 166.53 P
3 F
-0.17 (<) 354.19 166.53 P
1 F
-0.07 ( or) 360.19 166.53 P
3 F
-0.17 (<<) 373.37 166.53 P
1 F
-0.07 (. The) 385.36 166.53 P
3 F
-0.17 (<) 408.26 166.53 P
1 F
-0.07 ( form causes input to be) 414.26 166.53 P
(taken from a \336le. In the) 152.1 154.53 T
3 F
(<<) 248.42 154.53 T
1 F
( form the following ar) 260.41 154.53 T
(gument is not a \336le name, but rather an) 348.5 154.53 T
98.1 358.2 512.1 639 C
98.1 398.6 512.1 413 C
98.1 398.6 512.1 413 R
7 X
0 K
V
152.1 406.52 512.1 406.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 358.2 512.1 639 C
98.1 375.2 512.1 389.6 C
98.1 375.2 512.1 389.6 R
7 X
0 K
V
152.1 383.12 512.1 383.12 2 L
V
0.5 H
2 Z
0 X
N
98.1 358.2 512.1 639 C
0 9 Q
0 X
0 K
(T) 152.1 392.6 T
(able  12.1.) 157.27 392.6 T
1 F
(A summary of T) 200.21 392.6 T
(cl commands for manipulating processes.) 259.24 392.6 T
3 F
(exec) 158.1 620 T
1 F
(?) 185.06 620 T
3 F
(-keepnewline) 189.05 620 T
1 F
(?) 253.76 620 T
(?) 263.14 620 T
3 F
(--) 267.14 620 T
1 F
(?) 277.92 620 T
7 F
( arg) 281.91 620 T
1 F
(?) 308.87 620 T
7 F
(arg) 312.86 620 T
1 F
(...?) 334.43 620 T
(Executes command pipeline speci\336ed by) 230.1 611 T
7 F
(arg) 379.12 611 T
1 F
(\325) 395.3 611 T
(s using one or more) 397.8 611 T
(subprocesses and returns the pipeline\325) 230.1 602 T
(s standard output or an empty string if) 366.39 602 T
(output is redirected \050the trailing newline, if any) 230.1 593 T
(, is dropped unless) 399.25 593 T
3 F
(-) 468.4 593 T
(keepnewline) 230.1 584 T
1 F
( is speci\336ed\051. I/O redirection may be speci\336ed with) 289.42 584 T
3 F
(<) 475.63 584 T
1 F
(,) 481.02 584 T
3 F
(<<) 485.51 584 T
1 F
(,) 496.3 584 T
(and) 230.1 575 T
3 F
(>) 245.32 575 T
1 F
( and several other forms and pipes may be speci\336ed with) 250.72 575 T
3 F
(|) 457.14 575 T
1 F
(. If the last) 462.53 575 T
7 F
(arg) 230.1 566 T
1 F
( is) 246.28 566 T
3 F
(&) 256.77 566 T
1 F
( then the pipeline is executed in background and the return value is) 262.16 566 T
(a list of its process ids.) 230.1 557 T
3 F
(exit) 158.1 538 T
1 F
(?) 185.06 538 T
7 F
(code) 189.05 538 T
1 F
(?) 210.62 538 T
(T) 230.1 529 T
(erminates process, returning) 234.96 529 T
7 F
(code) 338.79 529 T
1 F
( to parent as exit status.) 360.36 529 T
7 F
(Code) 446.98 529 T
1 F
( must be) 468.55 529 T
(an integer) 230.1 520 T
(.) 265.29 520 T
7 F
(Code) 269.79 520 T
1 F
( defaults to 0.) 291.36 520 T
3 F
(open |) 158.1 501 T
7 F
(command) 190.45 501 T
1 F
(?) 233.59 501 T
7 F
(access) 237.58 501 T
1 F
(?) 269.94 501 T
(T) 230.1 492 T
(reats) 235.28 492 T
7 F
(command) 254.49 492 T
1 F
( as a list with the same structure as ar) 292.24 492 T
(guments to) 426.11 492 T
3 F
(exec) 468.06 492 T
1 F
(and creates subprocess\050es\051 to execute command\050s\051. Depending on) 230.1 483 T
7 F
(access) 468.95 483 T
1 F
(,) 501.3 483 T
(creates pipes for writing input to pipeline and reading output from it.) 230.1 474 T
3 F
(pid) 158.1 455 T
1 F
(?) 179.67 455 T
7 F
(f) 183.66 455 T
(ileId) 189.05 455 T
1 F
(?) 216.01 455 T
(If) 230.1 446 T
7 F
(f) 238.33 446 T
(ileId) 243.72 446 T
1 F
( is omitted, returns the process identi\336er for the current process.) 270.69 446 T
(Otherwise returns a list of all the process ids in the pipeline associated with) 230.1 437 T
7 F
(f) 230.1 428 T
(ileId) 235.49 428 T
1 F
( \050which must have been opened using |\051.) 262.45 428 T
152.1 631.75 152.1 421.25 2 L
V
0.5 H
0 Z
N
512.1 631.75 512.1 421.25 2 L
V
N
151.85 632 512.35 632 2 L
V
N
151.85 550 512.35 550 2 L
V
0.25 H
N
151.85 513 512.35 513 2 L
V
N
151.85 467 512.35 467 2 L
V
N
151.85 421 512.35 421 2 L
V
0.5 H
N
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "110" 119
%%Page: "111" 119
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(12.1 Invoking subprocesses with exec) 98.1 668.33 T
4 F
(1) 496.53 668.33 T
(1) 501.54 668.33 T
(1) 506.54 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(immediate value to be passed to the subprocess as its standard input. The following com-) 152.1 632.33 T
(mand uses) 152.1 620.33 T
3 F
(<<) 196.52 620.33 T
1 F
( to write data to a \336le:) 208.51 620.33 T
3 9 Q
(exec cat << "test data" > foo) 179.1 606 T
1 10 Q
(The string \322) 152.1 592.33 T
3 F
(test input) 199.84 592.33 T
1 F
(\323 is passed to) 259.81 592.33 T
3 F
(cat) 315.33 592.33 T
1 F
( as its standard input;) 333.32 592.33 T
3 F
(cat) 420.77 592.33 T
1 F
( copies the string) 438.76 592.33 T
-0.14 (to its standard ouput, which has been redirected to \336le) 152.1 580.33 P
3 F
-0.33 (foo) 369.19 580.33 P
1 F
-0.14 (. If no input redirection is spec-) 387.18 580.33 P
(i\336ed then the subprocess inherits the standard input channel from the T) 152.1 568.33 T
(cl application.) 435.37 568.33 T
(Y) 170.1 556.33 T
(ou can also invoke a pipeline of processes instead of a single process using) 176.32 556.33 T
3 F
(|) 478.32 556.33 T
1 F
(, as in) 484.32 556.33 T
(the following example:) 152.1 544.33 T
3 9 Q
(exec grep #include tclInt.h | wc) 179.1 530 T
6 F
(\336) 162.9 517 T
7 F
(8) 216.85 517 T
(25) 254.59 517 T
(212) 292.34 517 T
1 10 Q
(The) 152.1 503.33 T
3 F
(grep) 170.14 503.33 T
1 F
( program extracts all the lines containing the string \322) 194.13 503.33 T
3 F
(#include) 404.26 503.33 T
1 F
(\323 from the \336le) 452.23 503.33 T
3 F
-0.71 (tclInt.h) 152.1 491.33 P
1 F
-0.3 (. These lines are then piped to the) 200.07 491.33 P
3 F
-0.71 (wc) 334.53 491.33 P
1 F
-0.3 ( program, which computes the number of) 346.53 491.33 P
-0.16 (lines, words, and characters in the) 152.1 479.33 P
3 F
-0.38 (grep) 289.37 479.33 P
1 F
-0.16 ( output and prints this information on its standard) 313.36 479.33 P
(output. The) 152.1 467.33 T
3 F
(wc) 200.68 467.33 T
1 F
( output is returned as the result of) 212.68 467.33 T
3 F
(exec) 349.25 467.33 T
1 F
(.) 373.24 467.33 T
(If the last ar) 170.1 455.33 T
(gument to) 217.93 455.33 T
3 F
(exec) 260.69 455.33 T
1 F
( is) 284.68 455.33 T
3 F
(&) 296.34 455.33 T
1 F
( then the subprocess\050es\051 will be executed in back-) 302.34 455.33 T
(ground.) 152.1 443.33 T
3 F
(Exec) 185.41 443.33 T
1 F
( will return immediately) 209.4 443.33 T
(, without waiting for the subprocesses to complete.) 305.64 443.33 T
(Its return value will be a list containing the process identi\336ers for all of the processes in) 152.1 431.33 T
(the pipeline; standard output from the subprocesses will go to the standard output of T) 152.1 419.33 T
(cl) 496.18 419.33 T
(application unless redirected. No errors will be reported for abnormal exits or standard) 152.1 407.33 T
(error output, and standard error for the subprocesses will be directed to the standard error) 152.1 395.33 T
(channel of the T) 152.1 383.33 T
(cl application.) 216.62 383.33 T
-0.19 (If a subprocess is suspended or exits abnormally \050i.e., it is killed or returns a non-zero) 170.1 371.33 P
(exit status\051, or if it generates output on its standard error channel and standard error was) 152.1 359.33 T
(not redirected, then) 152.1 347.33 T
3 F
(exec) 232.04 347.33 T
1 F
( returns an error) 256.02 347.33 T
(. The error message will consist of the output) 319.58 347.33 T
(generated by the last subprocess \050unless it was redirected with) 152.1 335.33 T
3 F
(>) 403.02 335.33 T
1 F
(\051, followed by an error) 409.02 335.33 T
(message for each process that exited abnormally) 152.1 323.33 T
(, followed by the information generated) 345.18 323.33 T
(on standard error by the processes, if any) 152.1 311.33 T
(. In addition,) 315.76 311.33 T
3 F
(exec) 369.34 311.33 T
1 F
( will set the) 393.33 311.33 T
3 F
(errorCode) 442.19 311.33 T
1 F
(variable to hold information about the last process that terminated abnormally) 152.1 299.33 T
(, if any \050see) 462.91 299.33 T
(the reference documentation for details\051.) 152.1 287.33 T
2 F
(Note:) 119.09 272.33 T
(Many UNIX pr) 152.1 272.33 T
(ograms ar) 211.69 272.33 T
(e car) 252.68 272.33 T
(eless about the exit status that they r) 272.57 272.33 T
(eturn. If you invoke) 417.95 272.33 T
(such a pr) 152.1 262.33 T
(ogram with) 188.93 262.33 T
7 F
(exec) 237.24 262.33 T
2 F
( and it accidentally r) 261.23 262.33 T
(eturns a non-zer) 344.14 262.33 T
(o status then the) 409.29 262.33 T
7 F
(exec) 477.03 262.33 T
2 F
(command will generate a false err) 152.1 252.33 T
(or) 289.14 252.33 T
(. T) 296.92 252.33 T
(o pr) 306.55 252.33 T
(event these err) 322.57 252.33 T
(ors fr) 381.03 252.33 T
(om aborting your scripts,) 402.6 252.33 T
(invoke) 152.1 242.33 T
7 F
(exec) 180.68 242.33 T
2 F
( inside a) 204.67 242.33 T
7 F
(catch) 241.04 242.33 T
2 F
( command.) 271.02 242.33 T
1 F
(Although) 170.1 229.33 T
3 F
(exec) 210.36 229.33 T
1 F
(\325) 234.35 229.33 T
(s features are similar to those of the UNIX shells there is one impor-) 237.12 229.33 T
(tant dif) 152.1 217.33 T
(ference:) 180.51 217.33 T
3 F
(exec) 215.2 217.33 T
1 F
( does not perform any \336le name expansion. For example, suppose) 239.18 217.33 T
(you invoke the following command with the goal of removing all) 152.1 205.33 T
3 F
(.o) 416.11 205.33 T
1 F
( \336les in the current) 428.1 205.33 T
(directory:) 152.1 193.33 T
3 9 Q
(exec rm *.o) 179.1 179 T
6 F
(\306) 162.9 166 T
7 F
(rm: *.o nonexistent) 179.1 166 T
FMENDPAGE
%%EndPage: "111" 120
%%Page: "112" 120
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(1) 98.1 668.33 T
(12) 103.11 668.33 T
5 F
(Processes) 465.45 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 10 Q
0 X
-0.68 (Rm) 152.1 632.33 P
1 F
-0.28 ( receives \322) 164.09 632.33 P
3 F
-0.68 (*.o) 205.7 632.33 P
1 F
-0.28 (\323 as its ar) 223.69 632.33 P
-0.28 (gument and exits with an error when it cannot \336nd a \336le by this) 260.13 632.33 P
-0.05 (name. If you want \336le name expansion to occur you can use the) 152.1 619.83 P
3 F
-0.13 (glob) 408.43 619.83 P
1 F
-0.05 ( command to get it,) 432.41 619.83 P
(but not in the obvious way) 152.1 607.34 T
(. For example, the following command will not work:) 257.78 607.34 T
3 9 Q
(exec rm [glob *.o]) 179.1 593 T
6 F
(\306) 162.9 580 T
7 F
(rm: a.o b.o nonexistent) 179.1 580 T
1 10 Q
-0 (This fails because the list of \336le names that) 152.1 566.34 P
3 F
-0 (glob) 327.25 566.34 P
1 F
-0 ( returns is passed to) 351.24 566.34 P
3 F
-0 (rm) 432.57 566.34 P
1 F
-0 ( as a single ar) 444.56 566.34 P
-0 (gu-) 498.78 566.34 P
(ment. If, for example, there exist two) 152.1 553.84 T
3 F
(.o) 303.1 553.84 T
1 F
( \336les,) 315.09 553.84 T
3 F
(a.o) 339.25 553.84 T
1 F
( and) 357.24 553.84 T
3 F
(b.o) 376.67 553.84 T
1 F
(, then rm\325) 394.66 553.84 T
(s ar) 433.24 553.84 T
(gument will be) 447.22 553.84 T
(\322) 152.1 541.34 T
3 F
(a.o b.o) 156.54 541.34 T
1 F
(\323; since there is no \336le by that name) 198.51 541.34 T
3 F
(rm) 344.8 541.34 T
1 F
( will return an error) 356.8 541.34 T
(. The solution to) 434.52 541.34 T
(this problem is the one described in Section 7.5: use) 152.1 528.84 T
3 F
(eval) 362.8 528.84 T
1 F
( to reparse the) 386.79 528.84 T
3 F
(glob) 445.63 528.84 T
1 F
( output so) 469.61 528.84 T
(that it gets divided into multiple words. For example, the following command will do the) 152.1 516.34 T
(trick:) 152.1 503.84 T
3 9 Q
(eval exec rm [glob *.o]) 179.1 489.51 T
1 10 Q
(In this case) 152.1 475.84 T
3 F
(eval) 199.56 475.84 T
1 F
( concatenates its ar) 223.55 475.84 T
(guments to produce the string) 299.14 475.84 T
3 9 Q
(exec rm a.o b.o) 179.1 461.51 T
1 10 Q
(which it then evaluates as a T) 152.1 447.84 T
(cl script. The names) 269.64 447.84 T
3 F
(a.o) 352.64 447.84 T
1 F
( and) 370.63 447.84 T
3 F
(b.o) 390.06 447.84 T
1 F
( are passed to) 408.05 447.84 T
3 F
(rm) 464.67 447.84 T
1 F
( as sepa-) 476.66 447.84 T
(rate ar) 152.1 435.34 T
(guments and the \336les are deleted as expected.) 177.17 435.34 T
98.1 391.98 512.1 395.01 C
152.1 393.21 512.1 393.21 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 393.5 143.1 393.5 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(12.2) 117.96 399.01 T
(I/O to and from a command pipeline) 152.1 399.01 T
1 10 Q
(Y) 152.1 375.32 T
(ou can also create subprocesses using the) 158.32 375.32 T
3 F
(open) 325.68 375.32 T
1 F
( command; once you\325ve done this you) 349.67 375.32 T
(can then use commands like) 152.1 362.82 T
3 F
(gets) 267.3 362.82 T
1 F
( and) 291.28 362.82 T
3 F
(puts) 310.71 362.82 T
1 F
( to interact with the pipeline. Here are two) 334.7 362.82 T
(simple examples:) 152.1 350.32 T
3 9 Q
(set f1 [open {|tbl | ditroff -ms} w]) 179.1 335.99 T
(set f2 [open |prog r+}) 179.1 325.49 T
1 10 Q
-0.01 (If the \336rst character of the \322\336le name\323 passed to) 152.1 311.82 P
3 F
-0.01 (open) 346.32 311.82 P
1 F
-0.01 ( is the pipe symbol) 370.31 311.82 P
3 F
-0.01 (|) 448.29 311.82 P
1 F
-0.01 ( then the ar) 454.29 311.82 P
-0.01 (gu-) 498.78 311.82 P
-0.3 (ment isn\325) 152.1 299.32 P
-0.3 (t really a \336le name at all. Instead, it speci\336es a command pipeline. The remainder) 189.1 299.32 P
-0.15 (of the ar) 152.1 286.82 P
-0.15 (gument after the) 184.93 286.82 P
3 F
-0.35 (|) 252.49 286.82 P
1 F
-0.15 ( is treated as a list whose elements have exactly the same mean-) 258.49 286.82 P
(ing as the ar) 152.1 274.32 T
(guments to the) 200.49 274.32 T
3 F
(exec) 261.85 274.32 T
1 F
( command.) 285.84 274.32 T
3 F
(Open) 332.75 274.32 T
1 F
( will create a pipeline of subprocesses) 356.74 274.32 T
-0.35 (just as for) 152.1 261.83 P
3 F
-0.85 (exec) 192.96 261.83 P
1 F
-0.35 ( and it will return an identi\336er that you can use to transfer data to and from) 216.94 261.83 P
(the pipeline. In the \336rst example the pipeline is opened for writing, so a pipe is used for) 152.1 249.33 T
-0.22 (standard input to the) 152.1 236.83 P
3 F
-0.53 (tbl) 235.61 236.83 P
1 F
-0.22 ( process and you can invoke) 253.6 236.83 P
3 F
-0.53 (puts) 367.74 236.83 P
1 F
-0.22 ( to write data on that pipe; the) 391.73 236.83 P
(output from) 152.1 224.33 T
3 F
(tbl) 202.07 224.33 T
1 F
( goes to) 220.06 224.33 T
3 F
(ditroff) 253.65 224.33 T
1 F
(, and the output from) 295.63 224.33 T
3 F
(ditroff) 382.24 224.33 T
1 F
( goes to the standard) 424.22 224.33 T
(output of the T) 152.1 211.83 T
(cl application. The second example opens a pipeline for both reading and) 211.09 211.83 T
-0.07 (writing so separate pipes are created for) 152.1 199.33 P
3 F
-0.18 (prog) 313.38 199.33 P
1 F
-0.07 (\325) 337.37 199.33 P
-0.07 (s standard input and standard output. Com-) 340.15 199.33 P
(mands like) 152.1 186.83 T
3 F
(puts) 198.18 186.83 T
1 F
( can be used to write data to) 222.17 186.83 T
3 F
(prog) 336.53 186.83 T
1 F
( and commands like) 360.52 186.83 T
3 F
(gets) 443.24 186.83 T
1 F
( can be) 467.23 186.83 T
(used to read the output from) 152.1 174.33 T
3 F
(prog) 267.58 174.33 T
1 F
(.) 291.56 174.33 T
2 F
(Note:) 119.09 159.33 T
(When writing data to a pipeline, don\325) 152.1 159.33 T
(t for) 301.19 159.33 T
(get that output is buffer) 317.76 159.33 T
(ed: it pr) 411.24 159.33 T
(obably will not) 443.07 159.33 T
(actually be sent to the child pr) 152.1 148.83 T
(ocess until you invoke the) 273.32 148.83 T
7 F
(f) 378.53 148.83 T
(lush) 384.52 148.83 T
2 F
( command to for) 408.51 148.83 T
(ce the) 473.93 148.83 T
(buffer) 152.1 138.33 T
(ed data to be written.) 175.61 138.33 T
FMENDPAGE
%%EndPage: "112" 121
%%Page: "113" 121
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(12.3 Process ids) 98.1 668.33 T
4 F
(1) 495.98 668.33 T
(13) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(When you close a \336le identi\336er that corresponds to a command pipeline, the) 170.1 632.33 T
3 F
(close) 477.11 632.33 T
1 F
-0.12 (command \337ushes any buf) 152.1 620.33 P
-0.12 (fered output to the pipeline, closes the pipes leading to and from) 253.99 620.33 P
(the pipeline, if any) 152.1 608.33 T
(, and waits for all of the processes in the pipeline to exit. If any of the) 226.4 608.33 T
(processes exit abnormally then) 152.1 596.33 T
3 F
(close) 278.12 596.33 T
1 F
( returns an error in the same way as) 308.1 596.33 T
3 F
(exec) 452.7 596.33 T
1 F
(.) 476.69 596.33 T
98.1 552.98 512.1 556 C
152.1 554.2 512.1 554.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 554.49 143.1 554.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(12.3) 117.96 560 T
(Process ids) 152.1 560 T
1 10 Q
-0.06 (T) 152.1 536.31 P
-0.06 (cl provides three ways that you can access process identi\336ers. First, if you invoke a pipe-) 157.51 536.31 P
-0.04 (line in background using) 152.1 524.31 P
3 F
-0.09 (exec) 253.55 524.31 P
1 F
-0.04 ( then) 277.53 524.31 P
3 F
-0.09 (exec) 299.66 524.31 P
1 F
-0.04 ( returns a list containing the process identi\336ers) 323.65 524.31 P
-0.28 (for all of the subprocesses in the pipeline. Y) 152.1 512.31 P
-0.28 (ou can use these identifers, for example, if you) 325.09 512.31 P
(wish to kill the processes. Second, you can invoke the) 152.1 500.31 T
3 F
(pid) 370.29 500.31 T
1 F
( command with no ar) 388.28 500.31 T
(guments) 473.04 500.31 T
-0.07 (and it will return the process identi\336er for the current process. Third, you can invoke) 152.1 488.31 P
3 F
-0.16 (pid) 491.68 488.31 P
1 F
(with a \336le identi\336er as ar) 152.1 476.31 T
(gument, as in the following example:) 251.57 476.31 T
3 9 Q
(set f [open {| tbl | ditroff -ms} w]) 179.1 461.98 T
(pid $f) 179.1 451.98 T
6 F
(\336) 162.9 438.98 T
7 F
(7189 7190) 179.1 438.98 T
1 10 Q
(If there is a pipeline corresponding to the open \336le, as in the example, then the) 152.1 425.31 T
3 F
(pid) 467.99 425.31 T
1 F
( com-) 485.98 425.31 T
(mand will return a list of identi\336ers for the processes in the pipeline.) 152.1 413.31 T
98.1 369.95 512.1 372.98 C
152.1 371.18 512.1 371.18 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 371.46 143.1 371.46 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(12.4) 117.96 376.98 T
(Environment variables) 152.1 376.98 T
1 10 Q
-0.35 (Environment variables can be read and written using the standard T) 152.1 353.29 P
-0.35 (cl variable mechanism.) 418.23 353.29 P
(The array variable) 152.1 341.29 T
3 F
(env) 227.86 341.29 T
1 F
( contains all of the environment variables as elements, with the) 245.85 341.29 T
-0.36 (name of the element in) 152.1 329.29 P
3 F
-0.87 (env) 244.39 329.29 P
1 F
-0.36 ( corresponding to the name of the environment variable. If you) 262.38 329.29 P
-0.25 (modify the) 152.1 317.29 P
3 F
-0.6 (env) 197.69 317.29 P
1 F
-0.25 ( array) 215.68 317.29 P
-0.25 (, the changes will be re\337ected in the process\325) 237.81 317.29 P
-0.25 (s environment variables) 414.86 317.29 P
(and the new values will also be passed to any child process created with) 152.1 305.29 T
3 F
(exec) 442.44 305.29 T
1 F
( or) 466.43 305.29 T
3 F
(open) 479.75 305.29 T
1 F
(.) 503.74 305.29 T
98.1 261.93 512.1 264.95 C
152.1 263.15 512.1 263.15 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 263.44 143.1 263.44 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(12.5) 117.96 268.95 T
(T) 152.1 268.95 T
(erminating the T) 158.54 268.95 T
(cl process with exit) 250.95 268.95 T
1 10 Q
(If you invoke the) 152.1 245.26 T
3 F
(exit) 223.16 245.26 T
1 F
( command then it will terminate the process in which the com-) 247.15 245.26 T
(mand was executed.) 152.1 233.26 T
3 F
(Exit) 235.36 233.26 T
1 F
( takes an optional integer ar) 259.35 233.26 T
(gument. If this ar) 369.92 233.26 T
(gument is pro-) 438.58 233.26 T
(vided then it is used as the exit status to return to the parent process.) 152.1 221.26 T
3 F
(0) 426.92 221.26 T
1 F
( indicates a normal) 432.92 221.26 T
-0.12 (exit and non-zero values correspond to abnormal exits; values other than) 152.1 209.26 P
3 F
-0.3 (0) 443.57 209.26 P
1 F
-0.12 ( and) 449.57 209.26 P
3 F
-0.3 (1) 468.75 209.26 P
1 F
-0.12 ( are rare.) 474.74 209.26 P
-0.31 (If no ar) 152.1 197.26 P
-0.31 (gument is given to) 180.72 197.26 P
3 F
-0.74 (exit) 256.12 197.26 P
1 F
-0.31 ( then it exits with a status of) 280.11 197.26 P
3 F
-0.74 (0) 392.6 197.26 P
1 F
-0.31 (. Since) 398.59 197.26 P
3 F
-0.74 (exit) 427.68 197.26 P
1 F
-0.31 ( terminates the) 451.67 197.26 P
(process, it doesn\325) 152.1 185.26 T
(t have any return value.) 221.59 185.26 T
FMENDPAGE
%%EndPage: "113" 122
%%Page: "114" 122
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(1) 98.1 668.33 T
(14) 103.11 668.33 T
5 F
(Processes) 465.45 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
FMENDPAGE
%%EndPage: "114" 123
%%Page: "115" 123
612 792 0 FMBEGINPAGE
98.1 675 512.1 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
98.1 450 512.1 450 2 L
7 X
V
2 Z
0 X
N
98.1 108 512.1 126 R
7 X
V
4 10 Q
0 X
(115) 495.43 119.33 T
98.1 54 512.1 108 R
7 X
V
1 9 Q
0 X
(Copyright \251 1993 Addison-W) 152.1 102 T
(esley Publishing Company) 261.32 102 T
(, Inc.) 357.1 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 152.1 91 T
(. Any) 485.77 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 152.1 80 T
-0.34 (lisher) 152.1 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 171.58 69 P
(does not of) 152.1 58 T
(fer warranties in regard to this draft.) 191.88 58 T
0 24 Q
(Chapter 13) 152.1 605 T
-0.48 (Managing T) 152.1 575 S
-0.48 (cl Internals) 271.05 575 S
98.1 135 512.1 423 R
7 X
V
1 10 Q
0 X
(This chapter describes a collection of commands that allow you to query and manipulate) 152.1 416.33 T
-0.19 (the internal state of the T) 152.1 404.33 P
-0.19 (cl interpreter) 250.66 404.33 P
-0.19 (. For example, you can use these commands to see if) 301.27 404.33 P
-0.07 (a variable exists, to \336nd out what entries are de\336ned in an array) 152.1 392.33 P
-0.07 (, to monitor all accesses to) 404 392.33 P
(a variable, to rename or delete a command, or to handle references to unde\336ned com-) 152.1 380.33 T
(mands. T) 152.1 368.33 T
(ables 13.1 and 13.2 summarize the commands.) 188.6 368.33 T
98.1 324.98 512.1 328 C
152.1 326.2 512.1 326.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 326.49 143.1 326.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(13.1) 117.96 332 T
(Querying the elements of an array) 152.1 332 T
1 10 Q
(The) 152.1 308.31 T
3 F
(array) 170.14 308.31 T
1 F
( command provides information about the elements currently de\336ned for an) 200.12 308.31 T
-0.37 (array variable. It provides this information in several dif) 152.1 296.31 P
-0.37 (ferent ways, depending on the \336rst) 373.56 296.31 P
(ar) 152.1 284.31 T
(gument passed to it. The command) 159.69 284.31 T
3 F
(array size) 302.1 284.31 T
1 F
( returns a decimal string indicating) 362.07 284.31 T
(how many elements are de\336ned for a given array variable and the command) 152.1 272.31 T
3 F
(array) 458.24 272.31 T
-0.46 (names) 152.1 260.31 P
1 F
-0.19 ( returns a list whose entries are the names of the elements of a given array variable:) 182.08 260.31 P
3 9 Q
(set currency\050France\051 franc) 179.1 245.98 T
(set "currency\050Great Britain\051" pound) 179.1 235.98 T
(set currency\050Germany\051 mark) 179.1 225.98 T
(array size currency) 179.1 215.98 T
6 F
(\336) 162.9 202.98 T
7 F
(3) 179.1 202.98 T
3 F
(array names currency) 179.1 189.98 T
6 F
(\336) 162.9 176.98 T
7 F
({Great Britain} France Germany) 179.1 176.98 T
1 10 Q
-0.33 (For each of these commands the \336nal ar) 152.1 163.31 P
-0.33 (gument must be the name of an array variable. The) 309.2 163.31 P
(list returned by) 152.1 151.31 T
3 F
(array names) 215.12 151.31 T
1 F
( does not have any particular order) 281.08 151.31 T
(.) 419.3 151.31 T
44.1 351 89.1 423 C
53.1 360 215.1 414 R
7 X
0 K
V
0 9 Q
0 X
(FIGURE  13) 53.1 408 T
(T) 53.1 387 T
(ABLE  13) 58.43 387 T
44.1 351 143.1 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "115" 124
%%Page: "116" 124
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(1) 98.1 668.33 T
(16) 103.11 668.33 T
5 F
(Managing T) 412.11 668.33 T
(cl Internals) 463.78 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(The) 170.1 236.34 T
3 F
(array names) 188.14 236.34 T
1 F
( command can be used in conjunction with) 254.1 236.34 T
3 F
(foreach) 427.88 236.34 T
1 F
( to iterate) 469.86 236.34 T
(through the elements of an array) 152.1 224.34 T
(. For example, the code below deletes all elements of an) 281.07 224.34 T
(array with values that are) 152.1 212.34 T
3 F
(0) 255.62 212.34 T
1 F
( or empty:) 261.62 212.34 T
3 9 Q
(foreach i [array names a] {) 179.1 198 T
(if {\050$a\050$i\051 == ""\051 || \050$a\050$i\051 == 0\051\051} {) 200.63 188 T
(unset a\050$i\051) 222.23 178 T
(}) 200.63 168 T
(}) 179.1 158 T
98.1 243 512.1 639 C
98.1 300.4 512.1 314.8 C
98.1 300.4 512.1 314.8 R
7 X
0 K
V
152.1 308.32 512.1 308.32 2 L
V
0.5 H
2 Z
0 X
N
98.1 243 512.1 639 C
0 9 Q
0 X
0 K
(T) 152.1 294.4 T
(able  13.1.) 157.27 294.4 T
1 F
(A summary of commands for manipulating T) 200.21 294.4 T
(cl\325) 362.84 294.4 T
(s internal state \050continued in T) 371.83 294.4 T
(able) 480.78 294.4 T
98.1 268 512.1 282.4 C
98.1 268 512.1 282.4 R
7 X
0 K
V
152.1 275.92 512.1 275.92 2 L
V
0.5 H
2 Z
0 X
N
98.1 243 512.1 639 C
1 9 Q
0 X
0 K
(13.2\051.) 152.1 285.4 T
3 F
(array anymore) 158.1 621.8 T
7 F
(name) 234.2 621.8 T
(searchId) 261.76 621.8 T
1 F
(Returns) 230.1 612.8 T
3 10 Q
(1) 260.31 612.8 T
1 9 Q
( if there are any more elements to process in search) 266.3 612.8 T
7 F
(searchId) 452.74 612.8 T
1 F
(of array) 230.1 603.8 T
7 F
(name) 260.54 603.8 T
1 F
(,) 282.11 603.8 T
3 10 Q
(0) 286.6 603.8 T
1 9 Q
( if all elements have already been returned.) 292.6 603.8 T
3 F
(array donesearch) 158.1 594.8 T
7 F
(name) 250.38 594.8 T
(searchId) 277.94 594.8 T
1 F
(T) 230.1 585.8 T
(erminates search) 234.96 585.8 T
7 F
(searchId) 297.35 585.8 T
1 F
( of array) 340.49 585.8 T
7 F
(name) 373.18 585.8 T
1 F
( and discard any state) 394.75 585.8 T
(associated with the search. Returns an empty string.) 230.1 576.8 T
3 F
(array names) 158.1 567.8 T
7 F
(name) 223.41 567.8 T
1 F
(Returns a list containing the names of all the elements of array) 230.1 558.8 T
7 F
(name) 457.25 558.8 T
1 F
(.) 478.82 558.8 T
3 F
(array nextelement) 158.1 549.8 T
7 F
(name) 255.77 549.8 T
(searchId) 283.33 549.8 T
1 F
(Returns the name of the next element in search) 230.1 540.8 T
7 F
(searchId) 401.08 540.8 T
1 F
( of array) 444.22 540.8 T
7 F
(name) 476.9 540.8 T
1 F
(,) 498.47 540.8 T
(or an empty string if all elements have already been returned in this search.) 230.1 531.8 T
3 F
(array size) 158.1 522.8 T
7 F
(name) 218.02 522.8 T
1 F
(Returns a decimal string giving the number of elements in array) 230.1 513.8 T
7 F
(name) 461.99 513.8 T
1 F
(.) 483.56 513.8 T
3 F
(array startsearch) 158.1 504.8 T
7 F
(name) 255.77 504.8 T
1 F
(Initializes a search through all of the elements of array) 230.1 495.8 T
7 F
(name) 428.27 495.8 T
1 F
(. Returns a) 449.84 495.8 T
(search identi\336er that may be passed to) 230.1 486.8 T
3 F
(array nextelement) 369.63 486.8 T
1 F
(,) 461.3 486.8 T
3 F
(array) 465.8 486.8 T
(anymore) 230.1 477.8 T
1 F
(, or) 267.85 477.8 T
3 F
(array donesearch.) 282.07 477.8 T
(auto_mkindex) 158.1 458.8 T
7 F
(dir) 228.2 458.8 T
(pattern) 249.77 458.8 T
1 F
(Scans all of the \336les in diretory) 230.1 449.8 T
7 F
(dir) 344.68 449.8 T
1 F
( whose names match) 360.86 449.8 T
7 F
(pattern) 437.74 449.8 T
1 F
( \050using) 475.48 449.8 T
(the glob-style rules of) 230.1 440.8 T
3 F
(string match) 310.98 440.8 T
1 F
(\051 and generates a \336le) 375.69 440.8 T
3 F
(tclIndex) 452.3 440.8 T
1 F
(in) 230.1 431.8 T
7 F
(dir) 239.34 431.8 T
1 F
( that allows the \336les to be auto-loaded.) 255.52 431.8 T
3 F
(info) 158.1 412.8 T
7 F
(option) 185.67 412.8 T
1 F
(?) 224.02 412.8 T
7 F
(arg arg) 228.01 412.8 T
1 F
(...?) 271.15 412.8 T
(Returns information about the state of the T) 230.1 403.8 T
(cl interpreter) 386.98 403.8 T
(. See T) 432.66 403.8 T
(able 13.3.) 457.24 403.8 T
3 F
(rename) 158.1 384.8 T
7 F
(old) 195.85 384.8 T
(new) 217.42 384.8 T
1 F
(Renames command) 230.1 375.8 T
7 F
(old) 302.99 375.8 T
1 F
( to) 319.17 375.8 T
7 F
(new) 330.65 375.8 T
1 F
(, or deletes) 346.24 375.8 T
7 F
(old) 387.68 375.8 T
1 F
( if) 403.85 375.8 T
7 F
(new) 413.84 375.8 T
1 F
( is an empty string.) 430.02 375.8 T
(Returns an empty string.) 230.1 366.8 T
3 F
(time) 158.1 347.8 T
7 F
(script) 185.67 347.8 T
1 F
(?) 224.02 347.8 T
7 F
(count) 228.01 347.8 T
1 F
(?) 254.97 347.8 T
(Executes) 230.1 338.8 T
7 F
(script) 264.79 338.8 T
(count) 299.39 338.8 T
1 F
( times and returns a string giving the average) 326.36 338.8 T
(elapsed time per execution.) 230.1 329.8 T
7 F
(Count) 330.69 329.8 T
1 F
( defaults to 1.) 357.65 329.8 T
152.1 633.55 152.1 323.05 2 L
V
0.5 H
0 Z
N
512.1 633.55 512.1 323.05 2 L
V
N
151.85 633.8 512.35 633.8 2 L
V
N
151.85 470.8 512.35 470.8 2 L
V
0.25 H
N
151.85 424.8 512.35 424.8 2 L
V
N
151.85 396.8 512.35 396.8 2 L
V
N
151.85 359.8 512.35 359.8 2 L
V
N
151.85 322.8 512.35 322.8 2 L
V
0.5 H
N
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "116" 125
%%Page: "117" 125
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(13.2 The info command) 98.1 668.33 T
4 F
(1) 495.98 668.33 T
(17) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
2 10 Q
0 X
(Note:) 119.09 373.13 T
(The) 152.1 373.13 T
7 F
(array) 169.59 373.13 T
2 F
( command also pr) 199.57 373.13 T
(ovides a second way to sear) 271.11 373.13 T
(ch thr) 382.6 373.13 T
(ough the elements of an) 405.83 373.13 T
(array) 152.1 363.13 T
(, using the) 173.76 363.13 T
7 F
(startsearch) 217.62 363.13 T
2 F
(,) 283.59 363.13 T
7 F
(anymore,) 288.58 363.13 T
(nextelement) 339.06 363.13 T
2 F
(, and) 405.02 363.13 T
7 F
(donesearch) 427.51 363.13 T
2 F
-0.01 (options. This appr) 152.1 353.13 P
-0.01 (oach is mor) 224.74 353.13 P
-0.01 (e general than the) 271.55 353.13 P
7 F
-0.02 (foreach) 346.46 353.13 P
2 F
-0.01 ( appr) 388.44 353.13 P
-0.01 (oach given above, and in) 409.44 353.13 P
(some cases it is mor) 152.1 343.13 T
(e ef\336cient, but it is mor) 232.24 343.13 T
(e verbose than the) 324.04 343.13 T
7 F
(foreach) 399.53 343.13 T
2 F
( appr) 441.51 343.13 T
(oach and) 462.52 343.13 T
(isn\325) 152.1 333.13 T
(t needed very often. See the r) 165.98 333.13 T
(efer) 281.35 333.13 T
(ence documentation for details.) 296.52 333.13 T
98.1 291.78 512.1 294.8 C
152.1 293 512.1 293 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 293.29 143.1 293.29 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(13.2) 117.96 298.8 T
(The info command) 152.1 298.8 T
1 10 Q
(The) 152.1 275.11 T
3 F
(info) 170.14 275.11 T
1 F
( command provides information about the state of the interpreter) 194.13 275.11 T
(. It has more) 452.01 275.11 T
(than a dozen options, which are summarized in T) 152.1 263.11 T
(ables 13.3 and 13.4.) 348.2 263.11 T
4 F
(13.2.1) 113.51 233.11 T
(Information about variables) 152.1 233.11 T
1 F
-0.27 (Several of the) 152.1 217.11 P
3 F
-0.65 (info) 209.29 217.11 P
1 F
-0.27 ( options provide information about variables.) 233.28 217.11 P
3 F
-0.65 (Info exists) 414.58 217.11 P
1 F
-0.27 ( returns) 479.89 217.11 P
(a) 152.1 205.11 T
3 F
(0) 159.04 205.11 T
1 F
( or) 165.03 205.11 T
3 F
(1) 178.36 205.11 T
1 F
( value indicating whether or not there exists a variable with a given name:) 184.35 205.11 T
3 9 Q
(set x 24) 179.1 190.78 T
(info exists x) 179.1 180.78 T
6 F
(\336) 162.9 167.78 T
7 F
(1) 179.1 167.78 T
98.1 135 512.1 639 C
98.1 379.8 512.1 639 C
98.1 424 512.1 438.4 C
98.1 424 512.1 438.4 R
7 X
0 K
V
152.1 431.92 512.1 431.92 2 L
V
0.5 H
2 Z
0 X
N
98.1 379.8 512.1 639 C
98.1 400.6 512.1 415 C
98.1 400.6 512.1 415 R
7 X
0 K
V
152.1 408.52 512.1 408.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 379.8 512.1 639 C
0 9 Q
0 X
0 K
(T) 152.1 418 T
(able  13.2.) 157.27 418 T
1 F
(Commands for manipulating T) 200.21 418 T
(cl\325) 310.67 418 T
(s internal state, cont\325d.) 319.66 418 T
3 F
(trace variable) 158.1 625.4 T
7 F
(name) 239.59 625.4 T
(ops) 267.16 625.4 T
(command) 289.33 625.4 T
1 F
(Establishes a trace on variable) 230.1 616.4 T
7 F
(name) 341.17 616.4 T
1 F
( such that) 362.74 616.4 T
7 F
(command) 399.43 616.4 T
1 F
( is invoked) 437.18 616.4 T
(whenever one of the operations given by) 230.1 607.4 T
7 F
(ops) 378.61 607.4 T
1 F
( is performd on) 394.79 607.4 T
7 F
(name) 452.2 607.4 T
1 F
(.) 473.77 607.4 T
7 F
(Ops) 478.26 607.4 T
1 F
(must consist of one or more of the characters) 230.1 598.4 T
3 F
(r) 394.08 598.4 T
1 F
(,) 399.12 598.4 T
3 F
(w) 403.61 598.4 T
1 F
(, or) 408.42 598.4 T
3 F
(u) 422.65 598.4 T
1 F
(. Returns an empty) 428.04 598.4 T
(string.) 230.1 589.4 T
3 F
(trace vdelete) 158.1 580.4 T
7 F
(name) 234.2 580.4 T
(ops) 261.76 580.4 T
(command) 283.94 580.4 T
1 F
(If there exists a trace for variable) 230.1 571.4 T
7 F
(name) 351.13 571.4 T
1 F
( that has the operations and) 372.7 571.4 T
(command given by) 230.1 562.4 T
7 F
(ops) 301.24 562.4 T
1 F
( and) 317.42 562.4 T
7 F
(command) 334.89 562.4 T
1 F
(, removes that trace so that its) 372.64 562.4 T
(command will not be executed anymore. Returns an empty string.) 230.1 553.4 T
3 F
(trace vinfo) 158.1 544.4 T
7 F
(name) 223.41 544.4 T
1 F
(Returns a list with one element for each trace currently set on variable) 230.1 535.4 T
7 F
(name) 230.1 526.4 T
1 F
(. Each element is a sub-list with two elements, which are the) 251.67 526.4 T
7 F
(ops) 471.33 526.4 T
1 F
( and) 487.51 526.4 T
7 F
(command) 230.1 517.4 T
1 F
( associated with that trace.) 267.85 517.4 T
3 F
(unknown) 158.1 498.4 T
7 F
(cmd) 201.84 498.4 T
1 F
(?) 224.02 498.4 T
7 F
(arg) 228.01 498.4 T
(arg) 250.18 498.4 T
1 F
(...?) 272.36 498.4 T
(This command is invoked by the T) 230.1 489.4 T
(cl interpreter whenever an unknown) 354.79 489.4 T
(command name is encountered.) 230.1 480.4 T
7 F
(Cmd) 346.16 480.4 T
1 F
( will be the unknown command name) 362.34 480.4 T
(and the) 230.1 471.4 T
7 F
(arg) 258.55 471.4 T
1 F
(\325) 274.73 471.4 T
(s will be the fully-substituted ar) 277.23 471.4 T
(guments to the command. The) 391.15 471.4 T
(result returned by) 230.1 462.4 T
3 F
(unknown) 295.74 462.4 T
1 F
( will be returned as the result of the unknown) 333.49 462.4 T
(command.) 230.1 453.4 T
152.1 637.15 152.1 446.65 2 L
V
0.5 H
0 Z
N
512.1 637.15 512.1 446.65 2 L
V
N
151.85 637.4 512.35 637.4 2 L
V
N
151.85 510.4 512.35 510.4 2 L
V
0.25 H
N
151.85 446.4 512.35 446.4 2 L
V
0.5 H
N
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "117" 126
%%Page: "118" 126
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(1) 98.1 668.33 T
(18) 103.11 668.33 T
5 F
(Managing T) 412.11 668.33 T
(cl Internals) 463.78 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 135 512.1 639 C
98.1 138.6 512.1 639 C
98.1 176.6 512.1 191 C
98.1 176.6 512.1 191 R
7 X
0 K
V
152.1 184.52 512.1 184.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 138.6 512.1 639 C
98.1 153.2 512.1 167.6 C
98.1 153.2 512.1 167.6 R
7 X
0 K
V
152.1 161.12 512.1 161.12 2 L
V
0.5 H
2 Z
0 X
N
98.1 138.6 512.1 639 C
0 9 Q
0 X
0 K
(T) 152.1 170.6 T
(able  13.3.) 157.27 170.6 T
1 F
(A summary of the options for the) 200.21 170.6 T
3 F
(info) 322.28 170.6 T
1 F
( command \050continued in T) 343.85 170.6 T
(able 13.4\051.) 438.58 170.6 T
3 F
(info args) 158.1 620 T
7 F
(procName) 212.63 620 T
1 F
(Returns a list whose elements are the names of the ar) 230.1 611 T
(guments to procedure) 420.63 611 T
7 F
(procName) 230.1 602 T
1 F
(, in order) 273.24 602 T
(.) 305.44 602 T
3 F
(info body) 158.1 583 T
7 F
(procName) 212.63 583 T
1 F
(Returns the body of procedure) 230.1 574 T
7 F
(procName) 341.67 574 T
1 F
(.) 384.81 574 T
3 F
(info cmdcount) 158.1 555 T
1 F
(Returns a count of the total number of T) 230.1 546 T
(cl commands that have been) 374.25 546 T
(executed in this interpreter) 230.1 537 T
(.) 325.7 537 T
3 F
(info commands) 158.1 518 T
1 F
(?) 233.6 518 T
7 F
(pattern) 237.59 518 T
1 F
(?) 275.33 518 T
(Returns a list of all the commands de\336ned for this interpreter) 230.1 509 T
(, including) 448.91 509 T
(built-in commands, application-de\336ned commands, and procedures. If) 230.1 500 T
7 F
(pattern) 230.1 491 T
1 F
( is speci\336ed then only the command names matching) 267.85 491 T
7 F
(pattern) 460.31 491 T
1 F
(are returned \050) 230.1 482 T
3 F
(string match) 278.51 482 T
1 F
(\325) 343.22 482 T
(s rules are used for matching\051.) 345.71 482 T
3 F
(info default) 158.1 463 T
7 F
(procName) 228.2 463 T
(argName) 277.34 463 T
(varName) 321.08 463 T
1 F
(Checks to see if ar) 230.1 454 T
(gument) 296.33 454 T
7 F
(argName) 325.54 454 T
1 F
( to procedure) 363.29 454 T
7 F
(procName) 412.95 454 T
1 F
( has a default) 456.09 454 T
(value. If so, stores the default value in variable) 230.1 445 T
7 F
(varName) 400.57 445 T
1 F
( and returns) 438.32 445 T
3 10 Q
(1) 483 445 T
1 9 Q
(.) 488.99 445 T
(Otherwise, returns) 230.1 436 T
3 10 Q
(0) 298.74 436 T
1 9 Q
( without modifying) 304.73 436 T
7 F
(varName) 376.39 436 T
1 F
(.) 414.14 436 T
3 F
(info exists) 158.1 417 T
7 F
(varName) 222.81 417 T
1 F
(Returns) 230.1 408 T
3 10 Q
(1) 260.31 408 T
1 9 Q
( if there exists a variable named) 266.3 408 T
7 F
(varName) 382.86 408 T
1 F
( in the current context,) 420.61 408 T
3 10 Q
(0) 230.1 399 T
1 9 Q
( if no such variable is currently accessible.) 236.1 399 T
3 F
(info globals) 158.1 380 T
1 F
(?) 228.2 380 T
7 F
(pattern) 232.19 380 T
1 F
(?) 269.94 380 T
(Returns a list of all the global variables currently de\336ned. If) 230.1 371 T
7 F
(pattern) 447.26 371 T
1 F
( is) 485.01 371 T
(speci\336ed, then only the global variable names matching) 230.1 362 T
7 F
(pattern) 432.54 362 T
1 F
( are) 470.29 362 T
(returned \050) 230.1 353 T
3 F
(string match) 265.29 353 T
1 F
(\325) 330 353 T
(s rules are used for matching\051.) 332.49 353 T
3 F
(info level) 158.1 334 T
1 F
(?) 217.42 334 T
7 F
(number) 221.41 334 T
1 F
(?) 253.76 334 T
(If) 230.1 325 T
7 F
(number) 238.33 325 T
1 F
( isn\325) 270.69 325 T
(t speci\336ed, returns a number giving the current stack level) 286.25 325 T
(\050) 230.1 316 T
3 10 Q
(0) 233.09 316 T
1 9 Q
( corresponds to top-level,) 239.09 316 T
3 10 Q
(1) 332.69 316 T
1 9 Q
( to the \336rst level of procedure call, and so) 338.69 316 T
(on\051. If) 230.1 307 T
7 F
(number) 254.81 307 T
1 F
( is speci\336ed, returns a list whose elements are the name and) 287.16 307 T
(ar) 230.1 298 T
(guments for the procedure call at level) 236.92 298 T
7 F
(number) 377.44 298 T
1 F
(.) 409.3 298 T
3 F
(info library) 158.1 279 T
1 F
(Returns the full path name of the library directory in which standard T) 230.1 270 T
(cl) 482.58 270 T
(scripts are stored.) 230.1 261 T
3 F
(info locals) 158.1 242 T
1 F
(?) 222.81 242 T
7 F
(pattern) 226.8 242 T
1 F
(?) 264.55 242 T
(Returns a list of all the local variables de\336ned for the current procedure, or) 230.1 233 T
(an empty string if no procedure is active. If) 230.1 224 T
7 F
(pattern) 387.85 224 T
1 F
( is speci\336ed then) 425.6 224 T
(only the local variable names matching) 230.1 215 T
7 F
(pattern) 373.38 215 T
1 F
( are returned \050) 411.12 215 T
3 F
(string) 461.78 215 T
(match) 230.1 206 T
1 F
(\325) 257.06 206 T
(s rules are used for matching\051.) 259.56 206 T
152.1 631.75 152.1 199.25 2 L
V
0.5 H
0 Z
N
512.1 631.75 512.1 199.25 2 L
V
N
151.85 632 512.35 632 2 L
V
N
151.85 595 512.35 595 2 L
V
0.25 H
N
151.85 567 512.35 567 2 L
V
N
151.85 530 512.35 530 2 L
V
N
151.85 475 512.35 475 2 L
V
N
151.85 429 512.35 429 2 L
V
N
151.85 392 512.35 392 2 L
V
N
151.85 346 512.35 346 2 L
V
N
151.85 291 512.35 291 2 L
V
N
151.85 254 512.35 254 2 L
V
N
151.85 199 512.35 199 2 L
V
0.5 H
N
98.1 135 512.1 639 C
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "118" 127
%%Page: "119" 127
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(13.2 The info command) 98.1 668.33 T
4 F
(1) 495.98 668.33 T
(19) 500.99 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 9 Q
0 X
(unset x) 179.1 366.6 T
(info exists x) 179.1 356.2 T
6 F
(\336) 162.9 343.2 T
7 F
(0) 179.1 343.2 T
1 10 Q
(The options) 170.1 329.53 T
3 F
(vars) 220.07 329.53 T
1 F
(,) 244.06 329.53 T
3 F
(globals) 249.06 329.53 T
1 F
(, and) 291.03 329.53 T
3 F
(locals) 312.96 329.53 T
1 F
( return lists of variable names that meet) 348.94 329.53 T
(certain criteria.) 152.1 317.13 T
3 F
(Info vars) 215.1 317.13 T
1 F
( returns the names of all variables accessible at the current) 269.07 317.13 T
-0.22 (level of procedure call;) 152.1 304.73 P
3 F
-0.52 (info globals) 246.15 304.73 P
1 F
-0.22 ( returns the names of all global variables, regard-) 317.6 304.73 P
-0.03 (less of whether or not they are accessible; and) 152.1 292.33 P
3 F
-0.06 (info locals) 338.1 292.33 P
1 F
-0.03 ( returns the names of local) 404.01 292.33 P
-0.24 (variables, including ar) 152.1 279.93 P
-0.24 (guments to the current procedure, if any) 240.54 279.93 P
-0.24 (, but not global variables. In) 398.61 279.93 P
(each of these commands an additional pattern ar) 152.1 267.53 T
(gument may be supplied. If the pattern is) 344.82 267.53 T
(supplied then only variable names matching that pattern \050using the rules of) 152.1 255.13 T
3 F
(string) 453.56 255.13 T
(match) 152.1 242.73 T
1 F
(\051 will be returned.) 182.08 242.73 T
(For example, suppose that global variables) 170.1 230.73 T
3 F
(global1) 343.6 230.73 T
1 F
( and) 385.57 230.73 T
3 F
(global2) 405 230.73 T
1 F
( have been) 446.98 230.73 T
(de\336ned and that the following procedure is being executed:) 152.1 218.33 T
3 9 Q
(proc test {arg1 arg2} {) 179.1 204 T
(global global1) 200.63 193.6 T
(set local1 1) 200.63 183.2 T
(set local2 2) 200.63 172.8 T
(...) 200.63 162.4 T
(}) 179.1 152 T
1 10 Q
(Then the following commands might be executed in the procedure:) 152.1 138.33 T
98.1 372.6 512.1 639 C
98.1 416.6 512.1 431 C
98.1 416.6 512.1 431 R
7 X
0 K
V
152.1 424.52 512.1 424.52 2 L
V
0.5 H
2 Z
0 X
N
98.1 372.6 512.1 639 C
98.1 393.2 512.1 407.6 C
98.1 393.2 512.1 407.6 R
7 X
0 K
V
152.1 401.12 512.1 401.12 2 L
V
0.5 H
2 Z
0 X
N
98.1 372.6 512.1 639 C
0 9 Q
0 X
0 K
(T) 152.1 410.6 T
(able  13.4.) 157.27 410.6 T
1 F
(A summary of the options for the) 200.21 410.6 T
3 F
(info) 322.28 410.6 T
1 F
( command, cont\325d.) 343.85 410.6 T
3 F
(info procs) 158.1 620 T
1 F
(?) 217.42 620 T
7 F
(pattern) 221.41 620 T
1 F
(?) 259.15 620 T
(Returns a list of the names of all procedures currently de\336ned. If) 230.1 611 T
7 F
(pattern) 464.48 611 T
1 F
(is speci\336ed then only the procedure names matching) 230.1 602 T
7 F
(pattern) 420.8 602 T
1 F
( are) 458.55 602 T
(returned \050) 230.1 593 T
3 F
(string match) 265.29 593 T
1 F
(\325) 330 593 T
(s rules are used for matching\051.) 332.49 593 T
3 F
(info script) 158.1 574 T
1 F
(If a script \336le is currently being evaluated then this command returns the) 230.1 565 T
(name of that \336le. Otherwise it returns an empty string.) 230.1 556 T
3 F
(info tclversion) 158.1 537 T
1 F
(Returns the version number for the T) 230.1 528 T
(cl interpreter in the form) 362.76 528 T
7 F
(major) 230.1 519 T
1 F
(.) 256.57 519 T
7 F
(minor) 258.82 519 T
1 F
(, where) 285.42 519 T
7 F
(major) 314.11 519 T
1 F
( and) 341.08 519 T
7 F
(minor) 358.55 519 T
1 F
( are each decimal integers.) 385.51 519 T
(Increments in) 230.1 510 T
7 F
(minor) 281.52 510 T
1 F
( correspond to bug \336xes, new features, and) 308.48 510 T
(backwards-compatible changes.) 230.1 501 T
7 F
(Major) 347.15 501 T
1 F
( increments only when) 374.11 501 T
(incompatible changes occur) 230.1 492 T
(.) 329.94 492 T
3 F
(info vars) 158.1 473 T
1 F
(?) 212.02 473 T
7 F
(pattern) 216.02 473 T
1 F
(?) 253.76 473 T
(Returns a list of all the names of all variables that are currently accessible.) 230.1 464 T
(If) 230.1 455 T
7 F
(pattern) 238.33 455 T
1 F
( is speci\336ed then only the variable names matching) 276.08 455 T
7 F
(pattern) 462.05 455 T
1 F
(are returned \050) 230.1 446 T
3 F
(string match) 278.51 446 T
1 F
(\325) 343.22 446 T
(s rules are used for matching\051.) 345.71 446 T
152.1 631.75 152.1 439.25 2 L
V
0.5 H
0 Z
N
512.1 631.75 512.1 439.25 2 L
V
N
151.85 632 512.35 632 2 L
V
N
151.85 586 512.35 586 2 L
V
0.25 H
N
151.85 549 512.35 549 2 L
V
N
151.85 485 512.35 485 2 L
V
N
151.85 439 512.35 439 2 L
V
0.5 H
N
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "119" 128
%%Page: "120" 128
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(120) 98.1 668.33 T
5 F
(Managing T) 412.11 668.33 T
(cl Internals) 463.78 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 9 Q
0 X
(info vars) 179.1 633 T
6 F
(\336) 162.9 620 T
7 F
(global1 arg1 arg2 local2 local1) 179.1 620 T
3 F
(info globals) 179.1 607 T
6 F
(\336) 162.9 594 T
7 F
(global2 global1) 179.1 594 T
3 F
(info locals) 179.1 581 T
6 F
(\336) 162.9 568 T
7 F
(arg1 arg2 local2 local1) 179.1 568 T
3 F
(info vars *al*) 179.1 555 T
6 F
(\336) 162.9 542 T
7 F
(global1 local2 local1) 179.1 542 T
4 10 Q
(13.2.2) 113.51 513.33 T
(Information about procedures) 152.1 513.33 T
1 F
(Another group of) 152.1 497.33 T
3 F
(info) 223.99 497.33 T
1 F
( options provides information about procedures. The command) 247.98 497.33 T
3 F
-1.26 (info procs) 152.1 485.33 P
1 F
-0.52 ( returns a list of all the T) 210.81 485.33 P
-0.52 (cl procedures that are currently de\336ned. Like) 304.98 485.33 P
3 F
-1.26 (info) 483.38 485.33 P
(vars) 152.1 473.33 T
1 F
(, it takes an optional pattern ar) 176.09 473.33 T
(gument that restricts the names returned to those that) 297.21 473.33 T
-0.08 (match a given pattern.) 152.1 461.33 P
3 F
-0.2 (Info body) 243.09 461.33 P
1 F
-0.08 (,) 296.21 461.33 P
3 F
-0.2 (info args) 301.13 461.33 P
1 F
-0.08 (, and) 354.9 461.33 P
3 F
-0.2 (info default) 376.67 461.33 P
1 F
-0.08 ( return informa-) 448.43 461.33 P
(tion about the de\336nition of a procedure:) 152.1 449.33 T
3 9 Q
(proc maybePrint {a b {c 24}} {) 179.1 435 T
(if {$a < $b}{) 200.63 425 T
(puts stdout "c is $c") 222.23 415 T
(}) 200.63 405 T
(}) 179.1 395 T
(info body maybePrint) 179.1 385 T
6 F
(\336) 162.9 372 T
7 F
(    if {$a < $b} {) 179.1 362 T
(        puts stdout "c is $c") 179.1 352 T
(    }) 179.1 342 T
3 F
(info args maybePrint) 179.1 319 T
6 F
(\336) 162.9 306 T
7 F
(a b c) 179.1 306 T
3 F
(info default maybePrint a x) 179.1 293 T
6 F
(\336) 162.9 280 T
7 F
(0) 179.1 280 T
3 F
(info default maybePrint c x) 179.1 267 T
6 F
(\336) 162.9 254 T
7 F
(1) 179.1 254 T
3 F
(set x) 179.1 241 T
6 F
(\336) 162.9 228 T
7 F
(24) 179.1 228 T
3 10 Q
(Info body) 152.1 214.33 T
1 F
( returns the procedure\325) 206.07 214.33 T
(s body exactly as it was speci\336ed to the) 296.27 214.33 T
3 F
(proc) 456.44 214.33 T
1 F
( com-) 480.43 214.33 T
(mand.) 152.1 202.33 T
3 F
(Info args) 179.3 202.33 T
1 F
( returns a list of the procedure\325) 233.27 202.33 T
(s ar) 355.96 202.33 T
(gument names, in the same order) 369.93 202.33 T
(they were speci\336ed to) 152.1 190.33 T
3 F
(proc) 242.03 190.33 T
1 F
(.) 266.02 190.33 T
3 F
(Info default) 271.02 190.33 T
1 F
( returns information about an ar) 342.98 190.33 T
(gument\325) 469.64 190.33 T
(s) 502.41 190.33 T
-0.06 (default value. It takes three ar) 152.1 178.33 P
-0.06 (guments: the name of a procedure, the name of an ar) 270.39 178.33 P
-0.06 (gument) 479.68 178.33 P
(to that procedure, and the name of a variable. If the given ar) 152.1 166.33 T
(gument has no default value) 391.72 166.33 T
(\050e.g.) 152.1 154.33 T
3 F
(a) 172.36 154.33 T
1 F
( in the above example\051,) 178.36 154.33 T
3 F
(info default) 274.39 154.33 T
1 F
( returns) 346.35 154.33 T
3 F
(0) 379.11 154.33 T
1 F
(. If the ar) 385.1 154.33 T
(gument has a default) 421.55 154.33 T
FMENDPAGE
%%EndPage: "120" 129
%%Page: "121" 129
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(13.2 The info command) 98.1 668.33 T
4 F
(121) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(value \050) 152.1 632.33 T
3 F
(c) 179.57 632.33 T
1 F
( in the above example\051 then) 185.57 632.33 T
3 F
(info default) 298.82 632.33 T
1 F
( returns) 370.78 632.33 T
3 F
(1) 403.53 632.33 T
1 F
( and sets the variable to) 409.53 632.33 T
(hold the default value for the ar) 152.1 620.25 T
(gument.) 277.93 620.25 T
(As an example of how you might use the commands from the previous paragraph,) 170.1 608.25 T
(here is a T) 152.1 596.17 T
(cl procedure that writes a T) 193.31 596.17 T
(cl script \336le. The script will contain T) 302.24 596.17 T
(cl code in the) 452.55 596.17 T
-0.11 (form of) 152.1 584.08 P
3 F
-0.27 (proc) 184.63 584.08 P
1 F
-0.11 ( commands that recreate all of the procedures in the interpreter) 208.62 584.08 P
-0.11 (. The \336le can) 457.86 584.08 P
(then be) 152.1 572 T
3 F
(source) 183.74 572 T
1 F
(\325d in some other interpreter to duplicate the procedure state of the origi-) 219.72 572 T
(nal interpreter) 152.1 559.92 T
(. The procedure takes a single ar) 207.89 559.92 T
(gument, which is the name of the \336le to) 337.32 559.92 T
(write:) 152.1 547.83 T
3 9 Q
(proc printProcs f) 179.1 533.5 T
(ile {) 270.77 533.5 T
(set f [open $f) 200.63 523.42 T
(ile w]) 276.12 523.42 T
(foreach proc [info procs] {) 200.63 513.33 T
(set argList {}) 222.23 503.25 T
(foreach arg [info args $proc] {) 222.23 493.17 T
(if [info default $proc $arg default] {) 243.76 483.08 T
(lappend argList [list $arg $default]) 265.28 473 T
(} else {) 243.76 462.92 T
(lappend argList $arg) 265.28 452.83 T
(}) 243.76 442.75 T
(}) 222.23 432.67 T
(puts $f [list proc $proc $argList \134) 222.23 422.58 T
([info body $proc]]) 265.28 412.5 T
(}) 200.63 402.42 T
(close $f) 200.63 392.33 T
(}) 179.1 382.25 T
3 10 Q
(Info) 170.1 368.58 T
1 F
( provides one other option related to procedures:) 194.09 368.58 T
3 F
(info level) 390.61 368.58 T
1 F
(. If) 450.58 368.58 T
3 F
(info) 464.73 368.58 T
-0.49 (level) 152.1 356.5 P
1 F
-0.2 ( is invoked with no additional ar) 182.08 356.5 P
-0.2 (guments then it returns the current procedure invo-) 310.06 356.5 P
(cation level:) 152.1 344.42 T
3 F
(0) 203.73 344.42 T
1 F
( if no procedure is currently active,) 209.73 344.42 T
3 F
(1) 352.39 344.42 T
1 F
( if the current procedure was called) 358.39 344.42 T
-0.18 (from top-level, and so on. If) 152.1 332.33 P
3 F
-0.44 (info level) 265.92 332.33 P
1 F
-0.18 ( is given an additional ar) 325.44 332.33 P
-0.18 (gument, the ar) 422.89 332.33 P
-0.18 (gument) 479.8 332.33 P
-0.02 (indicates a procedure level and) 152.1 320.25 P
3 F
-0.04 (info level) 278.3 320.25 P
1 F
-0.02 ( returns a list whose elements are the name) 338.22 320.25 P
-0.28 (and actual ar) 152.1 308.17 P
-0.28 (guments for the procedure at that level. For example, the following procedure) 202.41 308.17 P
(prints out the current call stack, showing the name and ar) 152.1 296.08 T
(guments for each active proce-) 380.36 296.08 T
(dure:) 152.1 284 T
3 9 Q
(proc printStack {} {) 179.1 269.67 T
(set level [info level]) 200.63 259.58 T
(for {set i 1} {$i < $level} {incr i} {) 200.63 249.5 T
(puts "Level $i: [info level $i]") 222.23 239.42 T
(}) 200.63 229.33 T
(}) 179.1 219.25 T
4 10 Q
(13.2.3) 113.51 190.58 T
(Information about commands) 152.1 190.58 T
3 F
-0.56 (Info commands) 152.1 174.58 P
1 F
-0.23 ( is similar to) 229.5 174.58 P
3 F
-0.56 (info procs) 280.77 174.58 P
1 F
-0.23 ( except that it returns information about all) 340.18 174.58 P
(existing commands, not just procedures. If invoked with no ar) 152.1 162.5 T
(guments, it returns a list of) 399.81 162.5 T
(the names of all commands; if an ar) 152.1 150.42 T
(gument is provided, then it is a pattern in the sense of) 294.87 150.42 T
3 F
(string match) 152.1 138.33 T
1 F
( and only command names matching that pattern will be returned.) 224.06 138.33 T
FMENDPAGE
%%EndPage: "121" 130
%%Page: "122" 130
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(122) 98.1 668.33 T
5 F
(Managing T) 412.11 668.33 T
(cl Internals) 463.78 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
-0.2 (The command) 170.1 632.33 P
3 F
-0.47 (info cmdcount) 229.66 632.33 P
1 F
-0.2 ( returns a decimal string indicating how many com-) 307.15 632.33 P
(mands have been executed in this T) 152.1 620.33 T
(cl interpreter) 294.07 620.33 T
(. It may be useful during peformance tun-) 344.86 620.33 T
(ing to see how many T) 152.1 608.33 T
(cl commands are being executed to carry out various functions.) 242.73 608.33 T
-0.3 (The command) 170.1 596.33 P
3 F
-0.72 (info script) 229.46 596.33 P
1 F
-0.3 ( indicates whether or not a script \336le is currently being) 294.71 596.33 P
-0.24 (processed. If so then the command returns the name of the innermost nested script \336le that) 152.1 584.33 P
-0.19 (is active. If there is no active script \336le then) 152.1 572.33 P
3 F
-0.46 (info script) 327.55 572.33 P
1 F
-0.19 ( returns an empty string. This) 393.05 572.33 P
(command is used for relatively obscure purposes such as disallowing command abbrevia-) 152.1 560.33 T
(tions in script \336les.) 152.1 548.33 T
4 F
(13.2.4) 113.51 518.33 T
(T) 152.1 518.33 T
(clversion and library) 157.47 518.33 T
3 F
(Info tclversion) 152.1 502.33 T
1 F
( returns the version number for the T) 242.05 502.33 T
(cl interpreter in the form) 388.74 502.33 T
7 F
(major) 152.1 490.33 T
3 F
(.) 182.08 490.33 T
7 F
(minor) 188.08 490.33 T
1 F
(. Each of) 217.51 490.33 T
7 F
(major) 255.81 490.33 T
1 F
( and) 285.8 490.33 T
7 F
(minor) 305.23 490.33 T
1 F
( is a decimal string. If a new release of T) 335.21 490.33 T
(cl) 497.43 490.33 T
(contains only backwards-compatible changes such as bug \336xes and new features, then its) 152.1 478.33 T
(minor version number increments and the major version number stays the same. If a new) 152.1 466.33 T
-0.1 (release contains changes that are not backwards-compatible, so that existing T) 152.1 454.33 P
-0.1 (cl scripts or) 463.26 454.33 P
(C code that invokes T) 152.1 442.33 T
(cl\325) 239.12 442.33 T
(s library procedures will have to be modi\336ed, then the major ver-) 249.12 442.33 T
(sion number increments and the minor version number resets to 0.) 152.1 430.33 T
(The command) 170.1 418.33 T
3 F
(info library) 230.06 418.33 T
1 F
( returns the full path name of the T) 302.02 418.33 T
(cl library direc-) 440.66 418.33 T
-0.31 (tory) 152.1 406.33 P
-0.31 (. This directory is used to hold standard scripts used by T) 167.55 406.33 P
-0.31 (cl, such as a default de\336nition) 392.13 406.33 P
(for the) 152.1 394.33 T
3 F
(unknown) 180.96 394.33 T
1 F
( procedure described in Section 13.6 below) 222.94 394.33 T
(.) 395.22 394.33 T
98.1 350.98 512.1 354 C
152.1 352.2 512.1 352.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 352.49 143.1 352.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(13.3) 117.96 358 T
(T) 152.1 358 T
(iming command execution) 159.21 358 T
1 10 Q
(The) 152.1 334.31 T
3 F
(time) 170.14 334.31 T
1 F
( command is used to measure the performance of T) 194.13 334.31 T
(cl scripts. It takes two ar) 398.55 334.31 T
(gu-) 496.07 334.31 T
(ments, a script and a repetition count:) 152.1 322.31 T
3 9 Q
(time {set a xyz} 10000) 179.1 307.98 T
6 F
(\336) 162.9 294.98 T
7 F
(92 microseconds per iteration) 179.1 294.98 T
3 10 Q
(Time) 152.1 281.31 T
1 F
( will execute the given script the number of times given by the repetition count,) 176.09 281.31 T
-0.34 (divide the total elapsed time by the repetition count, and print out a message like the above) 152.1 269.31 P
-0.32 (one giving the average number of microseconds per iteration. The reason for the repetition) 152.1 257.31 P
(count is that the clock resolution on most workstations is many milliseconds. Thus any-) 152.1 245.31 T
(thing that takes less than tens or hundreds of milliseconds cannot be timed accurately) 152.1 233.31 T
(. T) 492.05 233.31 T
(o) 502.46 233.31 T
(make accurate timing measurements, I suggest experimenting with the repetition count) 152.1 221.31 T
(until the total time for the) 152.1 209.31 T
3 F
(time) 257.04 209.31 T
1 F
( command is a few seconds.) 281.03 209.31 T
FMENDPAGE
%%EndPage: "122" 131
%%Page: "123" 131
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(13.4 T) 98.1 668.33 T
(racing operations on variables) 126.07 668.33 T
4 F
(123) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 623.98 512.1 627 C
152.1 625.2 512.1 625.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 625.49 143.1 625.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(13.4) 117.96 631 T
(T) 152.1 631 T
(racing operations on variables) 158.77 631 T
1 10 Q
-0.2 (The) 152.1 607.31 P
3 F
-0.48 (trace) 169.94 607.31 P
1 F
-0.2 ( command allows you to monitor the usage of one or more T) 199.92 607.31 P
-0.2 (cl variables. Such) 439.42 607.31 P
(monitoring is called) 152.1 595.28 T
2 F
(tracing) 234.55 595.28 T
1 F
(. If a trace has been established on a variable then a T) 263.43 595.28 T
(cl com-) 476.71 595.28 T
-0.32 (mand will be invoked whenever the variable is read or written or unset. T) 152.1 583.25 P
-0.32 (races can be used) 441.24 583.25 P
(for a variety of purposes:) 152.1 571.21 T
1 12 Q
(\245) 152.1 556.21 T
1 10 Q
(monitoring the variable\325) 162.9 556.21 T
(s usage \050e.g. by printing a message for each read or write oper-) 259.51 556.21 T
(ation\051) 162.9 544.18 T
1 12 Q
(\245) 152.1 529.18 T
1 10 Q
(propagating changes in the variable to other parts of the system \050e.g. to ensure that a) 162.9 529.18 T
(particular widget always displays the picture of a person named in a given variable\051) 162.9 517.15 T
1 12 Q
(\245) 152.1 502.15 T
1 10 Q
(restricting usage of the variable by rejecting certain operations \050e.g. generate an error) 162.9 502.15 T
-0.31 (on any attempt to change the variable\325) 162.9 490.12 P
-0.31 (s value to anything other than a decimal string\051 or) 313.69 490.12 P
(by overriding certain operations \050e.g. recreate the variable whenever it is unset\051.) 162.9 478.09 T
-0.03 (Here is a simple example that causes a message to be printed when either of two vari-) 170.1 463.09 P
(ables is modi\336ed:) 152.1 451.06 T
3 9 Q
(trace variable color w pvar) 179.1 436.72 T
(trace variable a\050length\051 w pvar) 179.1 426.69 T
(proc pvar {name element op} {) 179.1 416.66 T
(if {$element != ""} {) 200.63 406.63 T
(set name ${name}\050$element\051) 222.23 396.6 T
(}) 200.63 386.57 T
(upvar $name x) 200.63 376.54 T
(puts "Variable $name set to $x") 200.63 366.5 T
(}) 179.1 356.47 T
1 10 Q
-0.22 (The \336rst) 152.1 342.81 P
3 F
-0.53 (trace) 187.75 342.81 P
1 F
-0.22 ( command arranges for procedure) 217.73 342.81 P
3 F
-0.53 (pvar) 354 342.81 P
1 F
-0.22 ( to be invoked whenever variable) 377.98 342.81 P
3 F
(color) 152.1 330.77 T
1 F
( is written:) 182.08 330.77 T
3 F
(variable) 227.34 330.77 T
1 F
( speci\336es that a variable trace is being created,) 275.31 330.77 T
3 F
(color) 463.49 330.77 T
1 F
-0.11 (gives the name of the variable,) 152.1 318.74 P
3 F
-0.26 (w) 276.63 318.74 P
1 F
-0.11 ( speci\336es a set of operations to trace \050any combination of) 282.63 318.74 P
3 F
(r) 152.1 306.71 T
1 F
( for read,) 158.1 306.71 T
3 F
(w) 196.95 306.71 T
1 F
( for write, and) 202.94 306.71 T
3 F
(u) 262.06 306.71 T
1 F
( for unset\051, and the last ar) 268.06 306.71 T
(gument is a command to invoke.) 369.74 306.71 T
(The second trace command sets up a trace for element) 152.1 294.68 T
3 F
(length) 371.36 294.68 T
1 F
( of array) 407.34 294.68 T
3 F
(a) 443.69 294.68 T
1 F
(.) 449.69 294.68 T
(Whenever) 170.1 282.68 T
3 F
(color) 213.67 282.68 T
1 F
( or) 243.65 282.68 T
3 F
(a\050length\051) 256.97 282.68 T
1 F
( is modi\336ed, T) 310.94 282.68 T
(cl will invoke) 368.55 282.68 T
3 F
(pvar) 426.02 282.68 T
1 F
( with three) 450.01 282.68 T
(additional ar) 152.1 270.65 T
(guments, which are the variable\325) 202.16 270.65 T
(s name, the variable\325) 332.34 270.65 T
(s element name \050if it is) 415.05 270.65 T
(an array element, or an empty string otherwise\051, and an ar) 152.1 258.62 T
(gument indicating what opera-) 382.84 258.62 T
-0.18 (tion was actually invoked \050) 152.1 246.59 P
3 F
-0.44 (r) 259.63 246.59 P
1 F
-0.18 ( for read,) 265.63 246.59 P
3 F
-0.44 (w) 303.93 246.59 P
1 F
-0.18 ( for write, or) 309.93 246.59 P
3 F
-0.44 (u) 362.21 246.59 P
1 F
-0.18 ( for unset\051. For example, if the com-) 368.2 246.59 P
(mand \322) 152.1 234.55 T
3 F
(set) 181.24 234.55 T
(color) 205.23 234.55 T
(purple) 241.21 234.55 T
1 F
(\323 is executed, T) 277.19 234.55 T
(cl will evaluate the command) 339.22 234.55 T
(\322) 152.1 222.52 T
3 F
(pvar) 156.54 222.52 T
(color) 186.52 222.52 T
({}) 222.5 222.52 T
(purple) 240.49 222.52 T
1 F
(\323 because of the trace. If \322) 276.47 222.52 T
3 F
(set) 381.08 222.52 T
(a\050length\051) 405.07 222.52 T
(108) 465.04 222.52 T
1 F
(\323 is) 483.03 222.52 T
(invoked, the trace command \322) 152.1 210.49 T
3 F
(pvar) 272.28 210.49 T
(a) 302.27 210.49 T
(length) 314.26 210.49 T
(w) 356.24 210.49 T
1 F
(\323 will be evaluated.) 362.23 210.49 T
-0.28 (The) 170.1 198.49 P
3 F
-0.68 (pvar) 187.86 198.49 P
1 F
-0.28 ( procedure does three things. First, if the traced variable is an array element) 211.85 198.49 P
(then) 152.1 186.46 T
3 F
(pvar) 171.81 186.46 T
1 F
( generates a complete name for the variable by combining the array name and) 195.8 186.46 T
(the element name. Second, the procedure uses) 152.1 174.43 T
3 F
(upvar) 338.9 174.43 T
1 F
( to make the variable\325) 368.88 174.43 T
(s value acces-) 455.48 174.43 T
-0.11 (sible inside the procedure as local variable) 152.1 162.4 P
3 F
-0.27 (x) 323.69 162.4 P
1 F
-0.11 (. Finally) 329.69 162.4 P
-0.11 (, it prints out the variable\325) 362.25 162.4 P
-0.11 (s name and) 464.97 162.4 P
(value on standard output. For the two accesses in the previous paragraph the following) 152.1 150.36 T
(messages will be printed:) 152.1 138.33 T
FMENDPAGE
%%EndPage: "123" 132
%%Page: "124" 132
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(124) 98.1 668.33 T
5 F
(Managing T) 412.11 668.33 T
(cl Internals) 463.78 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 9 Q
0 X
(Variable color set to purple) 179.1 633 T
(Variable a\050length\051 set to 108) 179.1 623 T
1 10 Q
(The example above set traces on individual variables. It\325) 170.1 609.33 T
(s also possible to set a trace) 395.77 609.33 T
(on an entire array) 152.1 597.33 T
(, as with the command) 221.66 597.33 T
3 9 Q
(trace variable a w pvar) 179.1 583 T
1 10 Q
-0.18 (where) 152.1 569.33 P
3 F
-0.44 (a) 178.83 569.33 P
1 F
-0.18 ( is the name of an array variable. In this case) 184.83 569.33 P
3 F
-0.44 (pvar) 363.76 569.33 P
1 F
-0.18 ( will be invoked whenever any) 387.74 569.33 P
(element of) 152.1 557.33 T
3 F
(a) 197.07 557.33 T
1 F
( is modi\336ed.) 203.06 557.33 T
(W) 170.1 545.33 T
(rite traces are invoked after the variable\325) 179.13 545.33 T
(s value has been modi\336ed but before) 340.66 545.33 T
(returning the new value as the result of the write. The trace command can write a new) 152.1 533.33 T
(value into the variable to override the value speci\336ed in the original write, and this value) 152.1 521.33 T
(will be returned as the result of the traced write operation. Read traces are invoked just) 152.1 509.33 T
(before the variable\325) 152.1 497.33 T
(s result is read. The trace command can modify the variable to af) 229.81 497.33 T
(fect) 489.14 497.33 T
(the result returned by the read operation. T) 152.1 485.33 T
(racing is temporarily disabled for a variable) 322.73 485.33 T
-0.13 (during the execution of read and write trace commands. This means that a trace command) 152.1 473.33 P
(can access the variable without causing traces to be invoked recursively) 152.1 461.33 T
(.) 438.44 461.33 T
-0.26 (If a read or write trace returns an error of any sort then the traced operation is aborted.) 170.1 449.33 P
(This can be used to implement read-only variables, for example. Here is a script that) 152.1 437.33 T
(forces a variable to have a positive integer value and rejects any attempts to set the vari-) 152.1 425.33 T
(able to a non-integer value:) 152.1 413.33 T
3 9 Q
(trace variable size w forceInt) 179.1 399 T
(proc forceInt {name element op} {) 179.1 389 T
(upvar $name x ${name}_old x_old) 200.63 379 T
(if ![regexp {^[0-9]*$} $x] {) 200.63 369 T
(set x $x_old) 222.23 359 T
(error "value must be a postive integer") 222.23 349 T
(}) 200.63 339 T
(set x_old $x) 200.63 329 T
(}) 179.1 319 T
1 10 Q
(By the time the trace command is invoked the variable has already been modi\336ed, so if) 152.1 305.33 T
3 F
-0.01 (forceInt) 152.1 293.33 P
1 F
-0.01 ( wants to reject a write it must restore the old value of the variable. T) 200.07 293.33 P
-0.01 (o do this) 475.19 293.33 P
-0.28 (it keeps a shadow variable with a suf) 152.1 281.33 P
-0.28 (\336x \322) 297.39 281.33 P
3 F
-0.66 (_old) 314.6 281.33 P
1 F
-0.28 (\323 to hold the previous value of the variable.) 338.59 281.33 P
(If an illegal value is stored into the variable,) 152.1 269.33 T
3 F
(forceInt) 330.86 269.33 T
1 F
( restores the variable to its old) 378.83 269.33 T
(value and generates an error:) 152.1 257.33 T
3 9 Q
(set size 47) 179.1 243 T
6 F
(\336) 162.9 230 T
7 F
(47) 179.1 230 T
3 F
(set size red) 179.1 217 T
6 F
(\306) 162.9 204 T
3 F
(can\325t set "size": value must be a postive integer) 179.1 204 T
(set size) 179.1 191 T
6 F
(\336) 162.9 178 T
7 F
(47) 179.1 178 T
2 10 Q
(Note:) 119.09 164.33 T
(The) 152.1 164.33 T
7 F
(forceInt) 169.59 164.33 T
2 F
( pr) 217.56 164.33 T
(ocedur) 228.58 164.33 T
(e only works for simple variables, but it could be extended to) 255.96 164.33 T
(handle array elements as well.) 152.1 154.33 T
FMENDPAGE
%%EndPage: "124" 133
%%Page: "125" 133
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(13.5 Renaming and deleting commands) 98.1 668.33 T
4 F
(125) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
-0.18 (It is legal to set a trace on a non-existent variable; the variable will continue to appear) 170.1 632.33 P
-0.03 (to be unset even though the trace exists. For example, you can set a read trace on an array) 152.1 620.33 P
(and then use it to create new array elements automatically the \336rst time they are read.) 152.1 608.33 T
(Unsetting a variable will remove the variable and any traces associated with the variable,) 152.1 596.33 T
-0.22 (then invoke any unset traces for the variable. It is legal, and not unusual, for an unset trace) 152.1 584.33 P
-0.26 (to immediately re-establish itself on the same variable so that it can monitor the variable if) 152.1 572.33 P
(it should be re-created in the future.) 152.1 560.33 T
(T) 170.1 548.33 T
(o delete a trace, invoke) 175.51 548.33 T
3 F
(trace vdelete) 270.42 548.33 T
1 F
( with the same ar) 348.38 548.33 T
(guments passed to) 416.48 548.33 T
3 F
-0.54 (trace variable) 152.1 536.33 P
1 F
-0.22 (. For example, the trace created on) 235.52 536.33 P
3 F
-0.54 (color) 374.66 536.33 P
1 F
-0.22 ( above can be deleted with) 404.64 536.33 P
(the following command:) 152.1 524.33 T
3 9 Q
(trace vdelete color w pvar) 179.1 510 T
1 10 Q
-0.03 (If the ar) 152.1 496.33 P
-0.03 (guments to) 183.49 496.33 P
3 F
-0.07 (trace vdelete) 230.08 496.33 P
1 F
-0.03 ( don\325) 307.97 496.33 P
-0.03 (t match the information for any existing trace) 328.58 496.33 P
(exactly then the command has no ef) 152.1 484.33 T
(fect.) 295.7 484.33 T
-0.34 (The command) 170.1 472.33 P
3 F
-0.81 (trace vinfo) 229.38 472.33 P
1 F
-0.34 ( returns information about the traces currently set for a) 294.54 472.33 P
-0.08 (variable. It is invoked with an ar) 152.1 460.33 P
-0.08 (gument consisting of a variable name, as in the following) 281.08 460.33 P
(example:) 152.1 448.33 T
3 9 Q
(trace vinfo color) 179.1 434 T
6 F
(\336) 162.9 421 T
7 F
({w pvar}) 179.1 421 T
1 10 Q
(The return value from) 152.1 407.33 T
3 F
(trace vinfo) 242.58 407.33 T
1 F
( is a list, each of whose elements describes one) 308.54 407.33 T
-0.09 (trace on the variable. Each element is itself a list with two elements, which give the opera-) 152.1 395.33 P
-0.09 (tions traced and the command for the trace. The traces appear in the result list in the order) 152.1 383.33 P
-0.28 (they will be invoked. If the variable speci\336ed to) 152.1 371.33 P
3 F
-0.66 (trace vinfo) 343.36 371.33 P
1 F
-0.28 ( is an element of an array) 408.66 371.33 P
-0.28 (,) 507.38 371.33 P
-0.23 (then only traces on that element will be returned; traces on the array as a whole will not be) 152.1 359.33 P
(returned.) 152.1 347.33 T
98.1 303.98 512.1 307 C
152.1 305.2 512.1 305.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 305.49 143.1 305.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(13.5) 117.96 311 T
(Renaming and deleting commands) 152.1 311 T
1 10 Q
-0.23 (The) 152.1 287.31 P
3 F
-0.56 (rename) 169.91 287.31 P
1 F
-0.23 ( command can be used to change the command structure of an application. It) 205.89 287.31 P
(takes two ar) 152.1 275.31 T
(guments:) 200.21 275.31 T
3 9 Q
(rename) 179.1 260.98 T
7 F
(old new) 216.85 260.98 T
3 10 Q
(Rename) 152.1 247.31 T
1 F
( does just what its name implies: it renames the command that used to have the) 188.08 247.31 T
(name) 152.1 235.31 T
7 F
(old) 176.25 235.31 T
1 F
( so that it now has the name) 194.24 235.31 T
7 F
(new) 308.05 235.31 T
1 F
(.) 325.39 235.31 T
7 F
(New) 330.39 235.31 T
1 F
( must not already exist as a command) 348.38 235.31 T
(when) 152.1 223.31 T
3 F
(rename) 176.25 223.31 T
1 F
( is invoked.) 212.23 223.31 T
3 F
-0.57 (Rename) 170.1 211.31 P
1 F
-0.24 ( can also be used to delete a command by invoking it with an empty string as) 206.08 211.31 P
(the) 152.1 199.31 T
3 F
(new) 166.81 199.31 T
1 F
( name. For example, the following script disables \336le I/O from an application by) 184.8 199.31 T
(deleting the relevant commands:) 152.1 187.31 T
3 9 Q
(foreach cmd {open close read gets puts} {) 179.1 172.98 T
(rename $cmd {}) 200.63 162.98 T
(}) 179.1 152.98 T
FMENDPAGE
%%EndPage: "125" 134
%%Page: "126" 134
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(126) 98.1 668.33 T
5 F
(Managing T) 412.11 668.33 T
(cl Internals) 463.78 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(Any T) 170.1 632.33 T
(cl command may be renamed or deleted, including the built-in commands as) 195.22 632.33 T
-0.24 (well as procedures and commands de\336ned by an application. Renaming or deleting a built-) 152.1 620.33 P
-0.31 (in command is probably a bad idea in general, since it will break scripts that depend on the) 152.1 608.33 P
(command, but in some situations it can be useful. For example, the) 152.1 596.33 T
3 F
(exit) 422.21 596.33 T
1 F
( command as) 446.2 596.33 T
(de\336ned by T) 152.1 584.33 T
(cl just exits the process immediately \050see Section 12.5\051. If an application) 201.92 584.33 T
(wants to have a chance to clean up its internal state before exiting, then it can create a) 152.1 572.33 T
(\322wrapper\323 around) 152.1 560.33 T
3 F
(exit) 226.47 560.33 T
1 F
( by rede\336ning it:) 250.46 560.33 T
3 9 Q
(rename exit exit.old) 179.1 546 T
(proc exit status {) 179.1 536 T
2 F
(application-speci\336c cleanup) 200.63 526 T
(...) 200.63 516 T
3 F
(exit.old $status) 200.63 506 T
(}) 179.1 496 T
1 10 Q
(In this example the) 152.1 482.33 T
3 F
(exit) 230.94 482.33 T
1 F
( command is renamed to) 254.92 482.33 T
3 F
(exit.old) 355.69 482.33 T
1 F
( and a new) 403.66 482.33 T
3 F
(exit) 449.18 482.33 T
1 F
( proce-) 473.16 482.33 T
(dure is de\336ned, which performs the cleanup required by the application and then calls the) 152.1 470.33 T
(renamed command to exit the process. This allows existing scripts that call) 152.1 458.33 T
3 F
(exit) 454.4 458.33 T
1 F
( to be) 478.39 458.33 T
(used without change while still giving the application an opportunity to clean up its state.) 152.1 446.33 T
98.1 402.98 512.1 406 C
152.1 404.2 512.1 404.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 404.49 143.1 404.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(13.6) 117.96 410 T
(Unknown commands) 152.1 410 T
1 10 Q
-0.22 (The T) 152.1 386.31 P
-0.22 (cl interpreter provides a special mechanism for dealing with unknown commands. If) 175.32 386.31 P
-0.38 (the interpreter discovers that the command name speci\336ed in a T) 152.1 374.31 P
-0.38 (cl command doesn\325) 406.35 374.31 P
-0.38 (t exist,) 483.7 374.31 P
(then it checks for the existence of a command named) 152.1 362.31 T
3 F
(unknown) 366.93 362.31 T
1 F
(. If there is such a com-) 408.91 362.31 T
-0.22 (mand then the interpreter invokes) 152.1 350.31 P
3 F
-0.53 (unknown) 287.84 350.31 P
1 F
-0.22 ( instead of the original command, passing the) 329.82 350.31 P
(name and ar) 152.1 338.31 T
(guments for the non-existent command to) 200.76 338.31 T
3 F
(unknown) 370.1 338.31 T
1 F
(. For example, suppose) 412.08 338.31 T
(that you type the following commands:) 152.1 326.31 T
3 9 Q
(set x 24) 179.1 311.98 T
(createDatabase library $x) 179.1 301.98 T
1 10 Q
(If there is no command named) 152.1 288.31 T
3 F
(createDatabase) 276.45 288.31 T
1 F
( then the following command is) 360.41 288.31 T
(invoked:) 152.1 276.31 T
3 9 Q
(unknown createDatabase library 24) 179.1 261.98 T
1 10 Q
(Notice that substitutions are performed on the ar) 152.1 248.31 T
(guments to the original command before) 345.39 248.31 T
3 F
(unknown) 152.1 236.31 T
1 F
( is invoked. Each ar) 194.08 236.31 T
(gument to) 273 236.31 T
3 F
(unknown) 315.76 236.31 T
1 F
( will consist of one fully-substituted) 357.74 236.31 T
(word from the original command.) 152.1 224.31 T
(The) 170.1 212.31 T
3 F
(unknown) 188.14 212.31 T
1 F
( procedure can do anything it likes to carry out the actions of the com-) 230.12 212.31 T
(mand, and whatever it returns will be returned as the result of the original command. For) 152.1 200.31 T
(example, the procedure below checks to see if the command name is an unambiguous) 152.1 188.31 T
(abbreviation for an existing command; if so, it invokes the corresponding command:) 152.1 176.31 T
FMENDPAGE
%%EndPage: "126" 135
%%Page: "127" 135
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(13.6 Unknown commands) 98.1 668.33 T
4 F
(127) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 9 Q
0 X
(proc unknown {name args} {) 179.1 633 T
(set cmds [info commands $name*]) 200.63 623 T
(if {[llength $cmds] != 1} {) 200.63 613 T
(error "unknown command \134"$name\134"") 222.23 603 T
(}) 200.63 593 T
(uplevel $cmds $args) 200.63 583 T
(}) 179.1 573 T
1 10 Q
(Note that when the command is re-invoked with an expanded name, it must be invoked) 152.1 559.33 T
-0.32 (using) 152.1 547.33 P
3 F
-0.77 (uplevel) 175.94 547.33 P
1 F
-0.32 ( so that the command executes in the same variable context as the original) 217.91 547.33 P
(command.) 152.1 535.33 T
-0.16 (The T) 170.1 523.33 P
-0.16 (cl script library includes a default version of) 193.38 523.33 P
3 F
-0.39 (unknown) 371.4 523.33 P
1 F
-0.16 ( that peforms the follow-) 413.37 523.33 P
(ing functions, in order:) 152.1 511.33 T
0 F
(1.) 152.1 496.33 T
1 F
(If the command is a procedure that is de\336ned in a library \336le, source the \336le to de\336ne) 162.9 496.33 T
-0.06 (the procedure, then re-invoke the command. This is called) 162.9 484.33 P
2 F
-0.06 (auto-loading) 397.42 484.33 P
1 F
-0.06 (; it is described) 449.06 484.33 P
(in the next section.) 162.9 472.33 T
0 F
(2.) 152.1 457.33 T
1 F
(If there exists a program with the name of the command, use the) 162.9 457.33 T
3 F
(exec) 422.71 457.33 T
1 F
( command to) 446.69 457.33 T
(invoke the program. This feature is called) 162.9 445.33 T
2 F
(auto-exec) 332.22 445.33 T
1 F
(. For example, you can type \322) 371.07 445.33 T
3 F
(ls) 489.31 445.33 T
1 F
(\323) 501.3 445.33 T
-0.28 (as a command and) 162.9 433.33 P
3 F
-0.67 (unknown) 238.39 433.33 P
1 F
-0.28 ( will invoke \322) 280.37 433.33 P
3 F
-0.67 (exec ls) 334.23 433.33 P
1 F
-0.28 (\323 to list the contents of the current) 375.53 433.33 P
(directory) 162.9 421.33 T
(. If the command doesn\325) 198.33 421.33 T
(t specify redirection then auto-exec will arrange for) 295.58 421.33 T
(the command\325) 162.9 409.33 T
(s standard input, standard output, and standard error to be redirected to) 219.81 409.33 T
(the corresponding channels of the T) 162.9 397.33 T
(cl application. This is dif) 305.7 397.33 T
(ferent than the normal) 405.19 397.33 T
(behavior of) 162.9 385.33 T
3 F
(exec) 211.19 385.33 T
1 F
( but it allows interactive programs such as) 235.18 385.33 T
3 F
(more) 406.18 385.33 T
1 F
( and) 430.16 385.33 T
3 F
(vi) 449.59 385.33 T
1 F
( to be) 461.59 385.33 T
(invoked directly from a T) 162.9 373.33 T
(cl application.) 264.9 373.33 T
0 F
(3.) 152.1 358.33 T
1 F
(If the command name has one of several special forms such as \322) 162.9 358.33 T
3 F
(!!) 419.36 358.33 T
1 F
(\323 then compute a) 431.35 358.33 T
(new command using history substitution and invoke it. For example, the if the com-) 162.9 346.33 T
-0.16 (mand is \322) 162.9 334.33 P
3 F
-0.39 (!!) 200.88 334.33 P
1 F
-0.16 (\323 then the previous command is re-invoked. See Chapter 14 for more infor-) 212.88 334.33 P
(mation on history substitution.) 162.9 322.33 T
0 F
(4.) 152.1 307.33 T
1 F
(If the command name is a unique abbreviation for an existing command, then the) 162.9 307.33 T
(abbreviated command name is expanded and the command is re-invoked.) 162.9 295.33 T
-0.35 (The last three actions are intended as conveniences for interactive use, and they only occur) 152.1 280.33 P
-0.04 (if the command was invoked interactively) 152.1 268.33 P
-0.04 (. Y) 319.18 268.33 P
-0.04 (ou should not depend on these features when) 330.35 268.33 P
-0.19 (writing scripts. For example, you should not try to use auto-exec in scripts: always use the) 152.1 256.33 P
3 F
(exec) 152.1 244.33 T
1 F
( command explicitly) 176.09 244.33 T
(.) 257.61 244.33 T
(If you don\325) 170.1 232.33 T
(t like the default behavior of the) 214.88 232.33 T
3 F
(unknown) 345.62 232.33 T
1 F
( procedure then you can write) 387.6 232.33 T
(your own version or modify the library version to provide additional functions. If you) 152.1 220.33 T
-0.08 (don\325) 152.1 208.33 P
-0.08 (t want any special actions to be taken for unknown commands you can just delete the) 170.24 208.33 P
3 F
(unknown) 152.1 196.33 T
1 F
( procedure, in which case errors will occur whenever unknown commands are) 194.08 196.33 T
(invoked.) 152.1 184.33 T
FMENDPAGE
%%EndPage: "127" 136
%%Page: "128" 136
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(128) 98.1 668.33 T
5 F
(Managing T) 412.11 668.33 T
(cl Internals) 463.78 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 623.98 512.1 627 C
152.1 625.2 512.1 625.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 625.49 143.1 625.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(13.7) 117.96 631 T
(Auto-loading) 152.1 631 T
1 10 Q
(One of the most useful functions performed by the) 152.1 607.31 T
3 F
(unknown) 356.68 607.31 T
1 F
( procedure is) 398.65 607.31 T
2 F
(auto-loading) 452.77 607.31 T
1 F
(.) 504.42 607.31 T
(Auto-loading allows you to write collections of T) 152.1 595.03 T
(cl procedures and place them in script) 349.33 595.03 T
(\336les in library directories. Y) 152.1 582.75 T
(ou can then use these procedures in your T) 264.08 582.75 T
(cl applications) 434.36 582.75 T
(without having to explicitly) 152.1 570.47 T
3 F
(source) 265.38 570.47 T
1 F
( the \336les that de\336ne them. Y) 301.36 570.47 T
(ou simply invoke the) 413.35 570.47 T
-0.12 (procedures. The \336rst time that you invoke a library procedure it won\325) 152.1 558.19 P
-0.12 (t exist, so) 427.58 558.19 P
3 F
-0.3 (unknown) 467.75 558.19 P
1 F
(will be called.) 152.1 545.91 T
3 F
(Unknown) 210.95 545.91 T
1 F
( will \336nd the \336le that de\336nes the procedure, source the \336le to) 252.93 545.91 T
(de\336ne the procedure, and then re-invoke the original command. The next time the proce-) 152.1 533.63 T
(dure is invoked it will exist so the auto-loading mechanism won\325) 152.1 521.35 T
(t be triggered.) 411.21 521.35 T
(Auto-loading provides two bene\336ts. First, it makes it easy to build up lar) 170.1 509.35 T
(ge libraries) 460.31 509.35 T
-0.21 (of useful procedures and use them in T) 152.1 497.07 P
-0.21 (cl scripts. Y) 305.63 497.07 P
-0.21 (ou need not know exactly which \336les to) 352.23 497.07 P
3 F
(source) 152.1 484.79 T
1 F
( to de\336ne which procedures, since the auto-loader takes care of that for you. The) 188.08 484.79 T
(second bene\336t of auto-loading is ef) 152.1 472.5 T
(\336ciency) 292.65 472.5 T
(. W) 323.65 472.5 T
(ithout auto-loading  an appliation must) 337.68 472.5 T
3 F
-0.24 (source) 152.1 460.22 P
1 F
-0.1 ( all of its script \336les when it starts up. Auto-loading allows an application to start) 188.08 460.22 P
(up without loading any script \336les at all; the \336les will be loaded later when their proce-) 152.1 447.94 T
(dures are needed, and some \336les may never be loaded at all. Thus auto-loading reduces) 152.1 435.66 T
(startup time and saves memory) 152.1 423.38 T
(.) 275.81 423.38 T
(Using the auto-loader is straightforward and involves three steps. First, create a) 170.1 411.38 T
-0.34 (library as a set of script \336les in a single directory) 152.1 399.1 P
-0.34 (. Normally these \336les have names that end) 342.96 399.1 P
-0.41 (in \322) 152.1 386.82 P
3 F
-0.98 (.tcl) 166.4 386.82 P
1 F
-0.41 (\323, for example) 190.39 386.82 P
3 F
-0.98 (db.tcl) 249.11 386.82 P
1 F
-0.41 ( or) 285.09 386.82 P
3 F
-0.98 (stretch.tcl) 297.59 386.82 P
1 F
-0.41 (. Each \336le can contain any number of) 363.55 386.82 P
(procedure de\336nitions. I recommend keeping the \336les relatively small, with just a few) 152.1 374.54 T
-0.15 (related procedures in each \336le. In order for the auto-loader to handle the \336les properly) 152.1 362.26 P
-0.15 (, the) 492.69 362.26 P
3 F
(proc) 152.1 349.98 T
1 F
( command for each procedure de\336nition must be at the left edge of a line, and it) 176.09 349.98 T
-0.09 (must be followed immediately by white space and the procedure\325) 152.1 337.7 P
-0.09 (s name on the same line.) 411.9 337.7 P
(Other than this the format of the script \336les doesn\325) 152.1 325.42 T
(t matter as long as they are valid T) 353.73 325.42 T
(cl) 491.26 325.42 T
(scripts.) 152.1 313.14 T
(The second step is to build an index for the auto-loader) 170.1 301.14 T
(. T) 389.95 301.14 T
(o do this, start up a T) 400.35 301.14 T
(cl) 484.33 301.14 T
(application such as) 152.1 288.86 T
3 F
(tclsh) 230.66 288.86 T
1 F
( and invoke the) 260.64 288.86 T
3 F
(auto_mkindex) 324.48 288.86 T
1 F
( command as in the follow-) 396.45 288.86 T
(ing example:) 152.1 276.58 T
3 9 Q
(auto_mkindex . *.tcl) 179.1 262.24 T
3 10 Q
(Auto_mkindex) 152.1 248.58 T
1 F
( isn\325) 224.06 248.58 T
(t a built-in command but rather a procedure in T) 241.37 248.58 T
(cl\325) 433.58 248.58 T
(s script library) 443.58 248.58 T
(.) 500.67 248.58 T
(Its \336rst ar) 152.1 236.3 T
(gument is a directory name and the second ar) 190.23 236.3 T
(gument is a glob-style pattern that) 371.02 236.3 T
(selects one or more script \336les in the directory) 152.1 224.02 T
(.) 336.32 224.02 T
3 F
(Auto_mkindex) 341.32 224.02 T
1 F
( scans all of the \336les) 413.28 224.02 T
(whose names match the pattern and builds an index that indicates which procedures are) 152.1 211.74 T
-0.33 (de\336ned in which \336les. It stores the index in a \336le called) 152.1 199.46 P
3 F
-0.8 (tclIndex) 371.57 199.46 P
1 F
-0.33 ( in the directory) 419.54 199.46 P
-0.33 (. If you) 481.46 199.46 P
(modify the \336les to add or delete procedures then you should regenerate the index.) 152.1 187.17 T
(The third step is to set the variable) 170.1 175.17 T
3 F
(auto_path) 310.56 175.17 T
1 F
( in the applications that wish to use) 364.53 175.17 T
(the library) 152.1 162.89 T
(. The) 192.81 162.89 T
3 F
(auto_path) 215.85 162.89 T
1 F
( variable contains a list of directory names. When the auto-) 269.82 162.89 T
(loader is invoked it searches the directories in) 152.1 150.61 T
3 F
(auto_path) 337.52 150.61 T
1 F
( in order) 391.49 150.61 T
(, looking in their) 424.95 150.61 T
3 F
(tclIndex) 152.1 138.33 T
1 F
( \336les for the desired procedure. If the same procedure is de\336ned in several) 200.07 138.33 T
FMENDPAGE
%%EndPage: "128" 137
%%Page: "129" 137
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(13.7 Auto-loading) 98.1 668.33 T
4 F
(129) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
1 10 Q
0 X
(libraries then the auto-loader will use the one from the earliest directory in) 152.1 632.33 T
3 F
(auto_path) 452.15 632.33 T
1 F
(.) 506.12 632.33 T
(T) 152.1 620.33 T
(ypically) 157.51 620.33 T
3 F
(auto_path) 192.21 620.33 T
1 F
( will be set as part of an application\325) 246.18 620.33 T
(s startup script. For example,) 391.08 620.33 T
(if an application uses a library in directory) 152.1 608.33 T
3 F
(/usr/local/tcl/lib/shapes) 324.2 608.33 T
1 F
( then it) 474.11 608.33 T
(might include the following command in its startup script:) 152.1 596.33 T
3 9 Q
(set auto_path \134) 179.1 582 T
([linsert $auto_path 0 /usr/local/tcl/lib/shapes]) 222.23 572 T
1 10 Q
-0.08 (This will add) 152.1 558.33 P
3 F
-0.2 (/usr/local/tcl/lib/shapes) 207.1 558.33 P
1 F
-0.08 ( to the beginning of the path, retaining) 357.02 558.33 P
(all the existing directories in the path such as those for the T) 152.1 546.33 T
(cl and Tk script libraries but) 392.35 546.33 T
(giving higher priority to procedures de\336ned in) 152.1 534.33 T
3 F
(/usr/local/tcl/lib/shapes) 339.48 534.33 T
1 F
(.) 489.39 534.33 T
(Once a directory has been properly indexed and added to) 152.1 522.33 T
3 F
(auto_path) 382.46 522.33 T
1 F
(, all of its proce-) 436.43 522.33 T
(dures become available through auto-loading.) 152.1 510.33 T
FMENDPAGE
%%EndPage: "129" 138
%%Page: "130" 138
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(130) 98.1 668.33 T
5 F
(Managing T) 412.11 668.33 T
(cl Internals) 463.78 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
FMENDPAGE
%%EndPage: "130" 139
%%Page: "131" 139
612 792 0 FMBEGINPAGE
98.1 675 512.1 675 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
98.1 450 512.1 450 2 L
7 X
V
2 Z
0 X
N
98.1 108 512.1 126 R
7 X
V
4 10 Q
0 X
(131) 495.43 119.33 T
98.1 54 512.1 108 R
7 X
V
1 9 Q
0 X
(Copyright \251 1993 Addison-W) 152.1 102 T
(esley Publishing Company) 261.32 102 T
(, Inc.) 357.1 102 T
(All rights reserved. Duplication of this draft is permitted by individuals for personal use only) 152.1 91 T
(. Any) 485.77 91 T
(other form of duplication or reproduction requires prior written permission of the author or pub-) 152.1 80 T
-0.34 (lisher) 152.1 69 P
-0.34 (. This statement must be easily visible on the \336rst page of any reproduced copies. The publisher) 171.58 69 P
(does not of) 152.1 58 T
(fer warranties in regard to this draft.) 191.88 58 T
0 24 Q
(Chapter 14) 152.1 605 T
-0.48 (History) 152.1 575 S
98.1 135 512.1 423 R
7 X
V
1 10 Q
0 X
(This chapter describes T) 152.1 416.33 T
(cl\325) 249.38 416.33 T
(s history mechanism. In applications where you type com-) 259.37 416.33 T
-0.02 (mands interactively) 152.1 404.2 P
-0.02 (, the history mechanism keeps track of recent commands and makes it) 229.99 404.2 P
(easy for you to re-execute them without having to completely re-type them. Y) 152.1 392.07 T
(ou can also) 462.82 392.07 T
(create new commands that are slight variations on old commands without having to com-) 152.1 379.94 T
(pletely retype the old commands, for example to \336x typos. T) 152.1 367.81 T
(cl\325) 393.47 367.81 T
(s history mechanism pro-) 403.46 367.81 T
(vides many of the features available in) 152.1 355.67 T
3 F
(csh) 308.92 355.67 T
1 F
(, but not with the same syntax in all cases.) 326.91 355.67 T
(History is implemented by the) 152.1 343.54 T
3 F
(history) 275.64 343.54 T
1 F
( command, which is summarized in T) 317.62 343.54 T
(able 14.1 .) 467.66 343.54 T
(Only a few of the most commonly used history features are described in this chapter; see) 152.1 331.41 T
(the reference documentation for more complete information.) 152.1 319.28 T
98.1 275.92 512.1 278.95 C
152.1 277.15 512.1 277.15 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 277.43 143.1 277.43 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(14.1) 117.96 282.95 T
(The history list) 152.1 282.95 T
1 10 Q
(Each command that you type interactively is entered into a) 152.1 259.26 T
2 F
(history list) 389.71 259.26 T
1 F
(. Each entry in the) 432.2 259.26 T
(history list is called an) 152.1 247.12 T
2 F
(event) 244.55 247.12 T
1 F
(; it contains the text of a command plus a serial number iden-) 265.64 247.12 T
(tifying the command. The command text consists of exactly the characters you typed,) 152.1 234.99 T
-0.24 (before the T) 152.1 222.86 P
-0.24 (cl parser peforms substitutions for) 199.76 222.86 P
3 F
-0.59 ($) 337.61 222.86 P
1 F
-0.24 (,) 343.61 222.86 P
3 F
-0.59 ([]) 348.36 222.86 P
1 F
-0.24 (, etc. The serial number starts out at) 360.35 222.86 P
3 F
-0.59 (1) 503.85 222.86 P
1 F
(for the \336rst command you type and is incremented for each successive command.) 152.1 210.73 T
-0.17 (Suppose you type the following sequence of commands to an interactive T) 170.1 198.73 P
-0.17 (cl program:) 465.92 198.73 P
3 9 Q
(set x 24) 179.1 184.4 T
(set y [expr $x*2.6]) 179.1 174.26 T
(incr x) 179.1 164.13 T
1 10 Q
-0.16 (At this point the history list will contain three events. Y) 152.1 150.47 P
-0.16 (ou can examine the contents of the) 371.91 150.47 P
(history list by invoking) 152.1 138.33 T
3 F
(history) 247.62 138.33 T
1 F
( with no ar) 289.59 138.33 T
(guments:) 332.44 138.33 T
44.1 351 89.1 423 C
53.1 360 215.1 414 R
7 X
0 K
V
0 9 Q
0 X
(FIGURE  14) 53.1 408 T
(T) 53.1 387 T
(ABLE  14) 58.43 387 T
44.1 351 143.1 423 R
7 X
V
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "131" 140
%%Page: "132" 140
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(132) 98.1 668.33 T
5 F
(History) 481.01 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 9 Q
0 X
(history) 179.1 377.4 T
6 F
(\336) 162.9 364.4 T
7 F
(     1 set x 24) 179.1 364.4 T
(     2 set y [expr $x*2.6]) 179.1 354.4 T
(     3 incr x) 179.1 344.4 T
(     4 history) 179.1 334.4 T
1 10 Q
(The value returned by) 152.1 320.73 T
3 F
(history) 242.58 320.73 T
1 F
( is a human-readable string describing what\325) 284.56 320.73 T
(s on the his-) 461.65 320.73 T
-0.35 (tory list, which also includes the) 152.1 308.73 P
3 F
-0.84 (history) 281.87 308.73 P
1 F
-0.35 ( command. The result of) 323.85 308.73 P
3 F
-0.84 (history) 422.59 308.73 P
1 F
-0.35 ( is intended) 464.56 308.73 P
(for printing out, not for processing in T) 152.1 296.73 T
(cl scripts; if you want to write scripts that process) 308.52 296.73 T
(the history list, you\325ll probably \336nd it more convenient to use other) 152.1 284.73 T
3 F
(history) 423.33 284.73 T
1 F
( options) 465.31 284.73 T
(described later in the reference documentation, such as) 152.1 272.73 T
3 F
(history event) 373.86 272.73 T
1 F
(.) 451.82 272.73 T
(The history list has a \336xed size, which is initially 20. If more commands than that) 170.1 260.73 T
-0.04 (have been typed then only the most recent commands will be retained. The size of the his-) 152.1 248.73 P
(tory list can be changed with the) 152.1 236.73 T
3 F
(history keep) 284.51 236.73 T
1 F
( command:) 356.47 236.73 T
3 9 Q
(history keep 100) 179.1 222.4 T
1 10 Q
-0.08 (This command changes the size of the history list so that in the future the 100 most recent) 152.1 208.73 P
(commands will be retained.) 152.1 196.73 T
98.1 383.4 512.1 639 C
98.1 426.4 512.1 440.8 C
98.1 426.4 512.1 440.8 R
7 X
0 K
V
152.1 434.32 512.1 434.32 2 L
V
0.5 H
2 Z
0 X
N
98.1 383.4 512.1 639 C
0 9 Q
0 X
0 K
(T) 152.1 420.4 T
(able  14.1.) 157.27 420.4 T
1 F
(A summary of some of the options for the) 200.21 420.4 T
3 F
(history) 353.23 420.4 T
1 F
( command. Several options have) 390.98 420.4 T
98.1 394 512.1 408.4 C
98.1 394 512.1 408.4 R
7 X
0 K
V
152.1 401.92 512.1 401.92 2 L
V
0.5 H
2 Z
0 X
N
98.1 383.4 512.1 639 C
1 9 Q
0 X
0 K
(been omitted; see the reference documentation for details.) 152.1 411.4 T
3 F
(history) 158.1 621.8 T
1 F
(Returns a string giving the event number and command for each event on) 230.1 612.8 T
(the history list.) 230.1 603.8 T
3 F
(history keep) 158.1 584.8 T
7 F
(count) 228.2 584.8 T
1 F
(Changes the size of the history list so that the) 230.1 575.8 T
7 F
(count) 395.36 575.8 T
1 F
( most recent events) 422.32 575.8 T
(will be retained. The initial size of the list is 20 events.) 230.1 566.8 T
3 F
(history nextid) 158.1 547.8 T
1 F
(Returns the number of the next event that will be recorded in the history list.) 230.1 538.8 T
3 F
(history redo) 158.1 519.8 T
1 F
(?) 228.2 519.8 T
7 F
(event) 232.19 519.8 T
1 F
(?) 259.15 519.8 T
(Re-executes the command recorded for) 230.1 510.8 T
7 F
(event) 373.6 510.8 T
1 F
( and returns its result.) 400.56 510.8 T
3 F
(history substitute) 158.1 491.8 T
7 F
(old) 260.56 491.8 T
(new) 282.13 491.8 T
1 F
(?) 303.7 491.8 T
7 F
(event) 307.69 491.8 T
1 F
(?) 334.65 491.8 T
(Retrieve the command  recorded for) 230.1 482.8 T
7 F
(event) 362.38 482.8 T
1 F
(, replace any occurrences of) 389.34 482.8 T
7 F
(old) 230.1 473.8 T
1 F
( by) 246.28 473.8 T
7 F
(new) 259.76 473.8 T
1 F
( in it, execute the resulting command, and returns its result.) 275.93 473.8 T
(Both) 230.1 464.8 T
7 F
(old) 249.83 464.8 T
1 F
( and) 266 464.8 T
7 F
(new) 283.48 464.8 T
1 F
( are simple strings. The substitution uses simple equality) 299.65 464.8 T
(checks: no wild cards or regular expression features are supported.) 230.1 455.8 T
152.1 633.55 152.1 449.05 2 L
V
0.5 H
0 Z
N
512.1 633.55 512.1 449.05 2 L
V
N
151.85 633.8 512.35 633.8 2 L
V
N
151.85 596.8 512.35 596.8 2 L
V
0.25 H
N
151.85 559.8 512.35 559.8 2 L
V
N
151.85 531.8 512.35 531.8 2 L
V
N
151.85 503.8 512.35 503.8 2 L
V
N
151.85 448.8 512.35 448.8 2 L
V
0.5 H
N
40.5 63 571.5 729 C
FMENDPAGE
%%EndPage: "132" 141
%%Page: "133" 141
612 792 0 FMBEGINPAGE
5 10 Q
0 X
0 K
(14.2 Specifying events) 98.1 668.33 T
4 F
(133) 495.43 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
98.1 623.98 512.1 627 C
152.1 625.2 512.1 625.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 625.49 143.1 625.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(14.2) 117.96 631 T
(Specifying events) 152.1 631 T
1 10 Q
(Several of the options of the) 152.1 607.31 T
3 F
(history) 267.58 607.31 T
1 F
( command require you to select an event from the) 309.55 607.31 T
(history list; the symbol) 152.1 595.31 T
7 F
(event) 246.51 595.31 T
1 F
( is used for such ar) 276.49 595.31 T
(guments in T) 351.53 595.31 T
(able 14.1. Events are spec-) 403.58 595.31 T
(i\336ed as strings with one of the following forms:) 152.1 583.31 T
-0.17 (Suppose that you had just typed the three commands from page 131 above. The command) 152.1 466.31 P
-0.35 (\322) 152.1 454.31 P
3 F
-0.84 (incr) 156.54 454.31 P
-0.84 (x) 186.52 454.31 P
1 F
-0.35 (\323 can be referred to as event) 192.52 454.31 P
3 F
-0.84 (-1) 304.68 454.31 P
1 F
-0.35 ( or) 316.67 454.31 P
3 F
-0.84 (3) 329.3 454.31 P
1 F
-0.35 ( or) 335.29 454.31 P
3 F
-0.84 (inc) 347.92 454.31 P
1 F
-0.35 (, and \322) 365.91 454.31 P
3 F
-0.84 (set) 391.58 454.31 P
-0.84 (y) 415.56 454.31 P
-0.84 ([expr) 427.56 454.31 P
-0.84 ($x*2.6]) 463.54 454.31 P
1 F
-0.35 (\323) 505.51 454.31 P
-0.05 (can be referred to as event) 152.1 442.31 P
3 F
-0.12 (-2) 259.47 442.31 P
1 F
-0.05 ( or) 271.46 442.31 P
3 F
-0.12 (2) 284.69 442.31 P
1 F
-0.05 ( or) 290.68 442.31 P
3 F
-0.12 (*2*) 303.9 442.31 P
1 F
-0.05 (. If an event speci\336er is omitted then it defaults) 321.89 442.31 P
(to) 152.1 430.31 T
3 F
(-1) 162.37 430.31 T
1 F
(.) 174.37 430.31 T
98.1 386.95 512.1 389.98 C
152.1 388.18 512.1 388.18 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 388.46 143.1 388.46 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(14.3) 117.96 393.98 T
(Re-executing commands from the history list) 152.1 393.98 T
1 10 Q
(The) 152.1 370.29 T
3 F
(redo) 170.14 370.29 T
1 F
( and) 194.13 370.29 T
3 F
(substitute) 213.56 370.29 T
1 F
( options to) 273.52 370.29 T
3 F
(history) 318.23 370.29 T
1 F
( will replay commands from the his-) 360.21 370.29 T
(tory list.) 152.1 358.29 T
3 F
(History redo) 187.92 358.29 T
1 F
( retrieves a command and re-executes it just as if you had) 259.88 358.29 T
(retyped the entire command. For example, after typing the three commands from page) 152.1 346.29 T
(131, the command) 152.1 334.29 T
3 9 Q
(history redo) 179.1 319.95 T
1 10 Q
(replays the most recent command, which is) 152.1 306.29 T
3 F
(incr x) 327.53 306.29 T
1 F
(; it will increment the value of vari-) 363.51 306.29 T
-0.16 (able) 152.1 294.29 P
3 F
-0.38 (x) 171.09 294.29 P
1 F
-0.16 ( and return its new value \050) 177.09 294.29 P
3 F
-0.38 (26) 280.49 294.29 P
1 F
-0.16 (\051. If an additional ar) 292.48 294.29 P
-0.16 (gument is provided for) 371.32 294.29 P
3 F
-0.38 (history) 464.51 294.29 P
(redo) 152.1 282.29 T
1 F
(, it selects an event as described in Section 14.2; for example,) 176.09 282.29 T
3 9 Q
(history redo 1) 179.1 267.95 T
6 F
(\336) 162.9 254.95 T
7 F
(24) 179.1 254.95 T
1 10 Q
(replays the \336rst command,) 152.1 241.29 T
3 F
(set x 24) 260.64 241.29 T
1 F
(.) 308.61 241.29 T
(The) 170.1 229.29 T
3 F
(history substitute) 188.14 229.29 T
1 F
( command is similar to) 296.08 229.29 T
3 F
(history redo) 390.2 229.29 T
1 F
( except that) 462.16 229.29 T
-0.21 (it modi\336es the old command before replaying it. It is most commonly used to correct typo-) 152.1 217.29 P
(graphical errors:) 152.1 205.29 T
3 9 Q
(set x "200 illimeters") 179.1 190.95 T
6 F
(\336) 162.9 177.95 T
7 F
(200 illimeters) 179.1 177.95 T
3 F
(history substitute ill mill -1) 179.1 164.95 T
6 F
(\336) 162.9 151.95 T
7 F
(200 millimeters) 179.1 151.95 T
1 10 Q
(Positive number:) 179.1 568.31 T
(Selects the event with that serial number) 275.1 568.31 T
(.) 436.66 568.31 T
(Negative number:) 179.1 555.31 T
-0.07 (Selects an event relative to the current event.) 275.1 555.31 P
3 F
-0.18 (-1) 456.31 555.31 P
1 F
-0.07 ( refers to) 468.3 555.31 P
-0.21 (the last command,) 275.1 545.31 P
3 F
-0.5 (-2) 349.98 545.31 P
1 F
-0.21 ( refers to the one before that, and so) 361.98 545.31 P
(on.) 275.1 535.31 T
(Anything else:) 179.1 522.31 T
-0.08 (Selects the most recent event that matches the string. The) 275.1 522.31 P
(string matches an event either if it is the same as the \336rst) 275.1 512.31 T
(characters of the event\325) 275.1 502.31 T
(s command, or if it matches the) 368.07 502.31 T
(event\325) 275.1 492.31 T
(s command using the matching rules for) 299.53 492.31 T
3 F
(string) 462.48 492.31 T
(match) 275.1 482.31 T
1 F
(.) 305.08 482.31 T
FMENDPAGE
%%EndPage: "133" 142
%%Page: "134" 142
612 792 0 FMBEGINPAGE
4 10 Q
0 X
0 K
(134) 98.1 668.33 T
5 F
(History) 481.01 668.33 T
98.1 660.6 512.1 660.6 2 L
0.25 H
0 Z
N
98.1 90 512.1 108 R
7 X
V
0 12 Q
0 X
(DRAFT \0508/12/93\051: Distribution Restricted) 198.01 101.33 T
98.1 135 512.1 639 R
7 X
V
3 10 Q
0 X
-0.7 (History substitute) 152.1 632.33 P
1 F
-0.29 ( takes three ar) 259.34 632.33 P
-0.29 (guments: an old string, a new string, and an event) 314.05 632.33 P
-0.04 (speci\336er \050the event speci\336er can be defaulted, in which case it defaults to) 152.1 620.33 P
3 F
-0.09 (-1) 446.38 620.33 P
1 F
-0.04 (\051. It retrieves) 458.37 620.33 P
-0.23 (the command indicated by the event speci\336er and replaces all instances of the old string in) 152.1 608.33 P
-0.07 (that command with the new string. The replacement is done using simple textual compari-) 152.1 596.33 P
(son with no wild-cards or pattern matching. Then the resulting command is executed and) 152.1 584.33 T
(its result is returned.) 152.1 572.33 T
98.1 528.98 512.1 532 C
152.1 530.2 512.1 530.2 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 530.49 143.1 530.49 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(14.4) 117.96 536 T
(Shortcuts implemented by unknown) 152.1 536 T
1 10 Q
(The) 152.1 512.31 T
3 F
(history redo) 170.14 512.31 T
1 F
( and) 242.1 512.31 T
3 F
(history substitute) 261.53 512.31 T
1 F
( commands are quite bulky; in the) 369.47 512.31 T
(examples above it took more keystrokes to type the) 152.1 500.31 T
3 F
(history) 360.02 500.31 T
1 F
( commands than to retype) 401.99 500.31 T
(the commands being replayed. Fortunately there are several shortcuts that allow the same) 152.1 488.31 T
(functions to be implemented with fewer keystrokes:) 152.1 476.31 T
(All of these shortcuts are implemented by the) 152.1 399.31 T
3 F
(unknown) 336.42 399.31 T
1 F
( procedure described in Section) 378.4 399.31 T
(13.6.) 152.1 387.31 T
3 F
(Unknown) 174.59 387.31 T
1 F
( detects commands that have the forms described above and invokes the) 216.57 387.31 T
(corresponding) 152.1 375.31 T
3 F
(history) 211.78 375.31 T
1 F
( commands to carry them out.) 253.75 375.31 T
2 F
(Note:) 119.09 360.31 T
(If your system doesn\325) 152.1 360.31 T
(t use the default version of) 236.2 360.31 T
7 F
(unknown) 344.47 360.31 T
2 F
( pr) 386.45 360.31 T
(ovided by T) 397.46 360.31 T
(cl then these) 443.18 360.31 T
(shortcuts may not be available.) 152.1 350.31 T
98.1 308.95 512.1 311.98 C
152.1 310.18 512.1 310.18 2 L
0.5 H
2 Z
0 X
0 K
N
98.1 310.46 143.1 310.46 2 L
0 Z
N
40.5 63 571.5 729 C
4 12 Q
0 X
0 K
(14.5) 117.96 315.98 T
(Current event number: history nextid) 152.1 315.98 T
1 10 Q
-0.36 (The command) 152.1 292.29 P
3 F
-0.87 (history nextid) 211.33 292.29 P
1 F
-0.36 ( returns the number of the next event to be entered into) 294.41 292.29 P
(the history list:) 152.1 280.29 T
3 9 Q
(history nextid) 179.1 265.95 T
6 F
(\336) 162.9 252.95 T
7 F
(3) 179.1 252.95 T
1 10 Q
(It is most commonly used for generating prompts that contain the event number) 152.1 239.29 T
(. Many) 470.23 239.29 T
(interactive applications allow you to specify a T) 152.1 227.29 T
(cl script to generate the prompt; in these) 343.77 227.29 T
(applications you can include a) 152.1 215.29 T
3 F
(history nextid) 275.62 215.29 T
1 F
( command in the script so that your) 359.58 215.29 T
(prompt includes the event number of the command you are about to type.) 152.1 203.29 T
3 F
(!!) 179.1 461.31 T
1 F
(Replays the last command: same as \322) 242.1 461.31 T
3 F
(history) 390.89 461.31 T
(redo) 438.86 461.31 T
1 F
(\323.) 462.85 461.31 T
3 F
(!) 179.1 448.31 T
7 F
(event) 185.1 448.31 T
1 F
(Replays the command given by) 242.1 448.31 T
7 F
(event) 370.63 448.31 T
1 F
(; same as) 400.61 448.31 T
(\322) 242.1 438.31 T
3 F
(history) 246.54 438.31 T
(redo) 294.51 438.31 T
7 F
(event) 324.49 438.31 T
1 F
(\323.) 354.48 438.31 T
3 F
(^) 179.1 425.31 T
7 F
(old) 185.1 425.31 T
3 F
(^) 203.09 425.31 T
7 F
(new) 209.08 425.31 T
1 F
(Replay the last command, substituting new for old; same as) 242.1 425.31 T
(\322) 242.1 415.31 T
3 F
(history) 246.54 415.31 T
(substitute) 294.51 415.31 T
7 F
(old) 360.47 415.31 T
(new) 384.46 415.31 T
1 F
(\323.) 402.45 415.31 T
FMENDPAGE
%%EndPage: "134" 143
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 142 1
%%DocumentFonts: Times-Bold
%%+ Times-Roman
%%+ Times-Italic
%%+ Courier
%%+ Helvetica-Bold
%%+ Helvetica
%%+ Symbol
%%+ Courier-Oblique
