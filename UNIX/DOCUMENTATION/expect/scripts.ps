%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPCOLORc { 
		BITMAPTTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 13 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Times-Bold FMFONTDEFINE
3 0 /Times-BoldItalic FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
5 0 /Helvetica FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "20" 20
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
72 36 504 47.95 R
7 X
0 K
V
0 12 Q
0 X
(20) 72 39.95 T
0 10 Q
(Don Libes) 108 39.95 T
72 740.81 504 756 R
7 X
V
72 63 540 720 R
V
0 12 Q
0 X
([7]) 72 712 T
0.38 (Don Libes, \322Using expect to Automate Systems Administration T) 99 712 P
0.38 (asks\323,) 417.38 712 P
1 F
0.38 (Pr) 449.74 712 P
0.38 (oceedings of the) 461.29 712 P
1.81 (Fourth USENIX Lar) 99 698 P
1.81 (ge Installation Systems Administration \050LISA\051 Confer) 200.12 698 P
1.81 (ence) 465.58 698 P
0 F
1.81 (, Colorado) 487.55 698 P
(Springs, Colorado, October 17-19, 1990.) 99 684 T
([8]) 72 658 T
1.05 (Norman Johnson, Samuel Kotz, \322) 99 658 P
1 F
1.05 (Continuous Univariate Distributions) 264.43 658 P
0 F
1.05 (\323, V) 443.12 658 P
1.05 (ol. 1, Houghton) 462.6 658 P
(Mif) 99 644 T
(\337in Co, New Y) 116.77 644 T
(ork, NY) 188.87 644 T
(, 1970.) 226.62 644 T
FMENDPAGE
%%EndPage: "20" 19
%%Page: "19" 19
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
72 36 540 47.95 R
V
0 10 Q
0 X
(expect: Scripts for Controlling Interactive Processes) 295.54 39.95 T
0 12 Q
(19) 528.01 39.95 T
72 63 540 720 R
7 X
V
0 X
1.08 (Thanks to Scott Paisley who wrote the callback script.  John Ousterhout is responsible for T) 72 712 P
1.08 (cl,) 528.34 712 P
-0.02 (without which) 72 698 P
2 F
-0.02 (expect) 143.92 698 P
0 F
-0.02 ( would not have been written.  John also critiqued) 176.55 698 P
2 F
-0.02 (expect) 418.52 698 P
0 F
-0.02 ( as well as the \336rst) 451.16 698 P
(paper about it.  I am indebted to him.) 72 684 T
-0.22 (Several people made important observations or wrote early scripts while I was still developing the) 72 660 P
2.05 (command semantics.  Thanks to Rob Densock, Ken Manheimer) 72 646 P
2.05 (, Eric Newton, Scott Paisley) 394.35 646 P
2.05 (,) 537 646 P
0.86 (Steve Ray) 72 632 P
0.86 (, Sandy Ressler) 121.05 632 P
0.86 (, Harry Bochner) 196.57 632 P
0.86 (, Ira Fuchs, Craig W) 275.4 632 P
0.86 (arren, Barry W) 375.8 632 P
0.86 (arsaw) 448.81 632 P
0.86 (, Keith Eber-) 476 632 P
0.26 (hardt, Jerry Friesen, and Dan Bernstein.  Thanks to Mike Gourlay) 72 618 P
0.26 (, Clem Cole, Andy Holyer) 389.27 618 P
0.26 (, and) 516.42 618 P
-0.18 (Alan Crosswell for help in porting) 72 604 P
2 F
-0.18 (expect) 238.81 604 P
0 F
-0.18 ( to various UNIX platforms.  Thanks to Steve Simmons,) 271.45 604 P
-0.11 (Joe Gorman, and Corey Satten for \336xing some of the bugs.  Finally) 72 590 P
-0.11 (, thanks to K.C. Morris, Chuck) 392.32 590 P
0.84 (Dinkel, Sue Mulroney) 72 576 P
0.84 (, and the anonymous Computing Systems reviewers, who gave me exten-) 179.83 576 P
(sive suggestions on improving this paper) 72 562 T
(.) 267.57 562 T
0.77 (Certain trade names and company products are mentioned in order to adequately specify proce-) 72 538 P
-0.19 (dures and equipment used.  In no case does such identi\336cation imply recommendation or endorse-) 72 524 P
0.79 (ment by the National Institute of Standards and T) 72 510 P
0.79 (echnology) 314.69 510 P
0.79 (, nor does it imply that the products) 363.88 510 P
(are necessarily the best available for the purpose.) 72 496 T
3 16 Q
(16.  A) 108 455.33 T
(vailability) 145.47 455.33 T
0 12 Q
-0.26 (Since the design and implementation was paid for by the U.S. government,) 72 430 P
2 F
-0.26 (expect) 434.43 430 P
0 F
-0.26 ( is in the public) 467.06 430 P
0.23 (domain.  However) 72 416 P
0.23 (, the author and NIST would like credit if this program, documentation or por-) 160.91 416 P
1.24 (tions of them are used.) 72 402 P
2 F
1.24 (expect) 194.34 402 P
0 F
1.24 ( may be) 226.98 402 P
2 F
1.24 (ftp) 271.65 402 P
0 F
1.24 (ed anonymously as) 286.31 402 P
2 F
1.24 (pub/expect/expect.shar) 384.96 402 P
1.24 (.Z) 501.45 402 P
0 F
1.24 ( from) 512.45 402 P
2 F
0.29 (ft) 72 388 P
0.29 (p.cme.nist.gov) 79.99 388 P
0 F
0.29 (.  Request email delivery by mailing to) 152.16 388 P
4 F
0.69 (library@cme.nist.gov) 344.04 388 P
0 F
0.29 (.  The con-) 487.18 388 P
(tents of the message should be \050no subject line\051) 72 374 T
4 F
(send pub/expect/expect.shar.Z) 302.18 374 T
0 F
(.) 510.86 374 T
(As of August, 1991, over 2500 sites had retrieved) 72 350 T
2 F
(expect) 313.5 350 T
0 F
(.) 346.13 350 T
3 16 Q
(17.  References) 108 309.33 T
0 12 Q
([1]) 72 282 T
-0.12 (fsck,) 99 282 P
1 F
-0.12 (UNIX Pr) 124.86 282 P
-0.12 (ogrammer) 167.26 282 P
-0.12 (\325) 217.67 282 P
-0.12 (s Manual) 220.12 282 P
0 F
-0.12 (, Section 8, Sun Microsystems, Inc., Mountain V) 264.97 282 P
-0.12 (iew) 497.93 282 P
-0.12 (, CA,) 514.47 282 P
(September) 99 268 T
(, 1989.) 149.82 268 T
([2]) 72 242 T
1.04 (Don Libes, \322expect: Curing Those Uncontrollable Fits of Interaction\323,) 99 242 P
1 F
1.04 (Pr) 448.43 242 P
1.04 (oceedings of the) 459.98 242 P
(Summer 1990 USENIX Confer) 99 228 T
(ence) 245.46 228 T
0 F
(, Anaheim, California, June 1) 267.43 228 T
(1-15, 1990.) 408.56 228 T
([3]) 72 202 T
1.26 (John Ousterhout, \322T) 99 202 P
1.26 (cl: An Embeddable Command Language\323,) 198.28 202 P
1 F
1.26 (Pr) 411.75 202 P
1.26 (oceedings of the W) 423.3 202 P
1.26 (inter) 517.34 202 P
(1990 USENIX Confer) 99 188 T
(ence) 203.16 188 T
0 F
(, W) 225.13 188 T
(ashington, D.C., January 22-26, 1990.) 241.49 188 T
([4]) 72 162 T
2.26 (John Ousterhout, \322tcl\0503\051 \320 overview of tool command language facilities\323,) 99 162 P
1 F
2.26 (unpublished) 481.36 162 P
(manual page) 99 148 T
0 F
(, University of California at Berkeley) 161.29 148 T
(, January 1990.) 339.72 148 T
([5]) 72 122 T
0.26 (Don Libes, \322expect User Manual\323, to be published as) 99 122 P
1 F
0.26 (NIST IR 744-91) 360.14 122 P
0 F
0.26 (, National Institute of) 436.62 122 P
(Standards and T) 99 108 T
(echnology) 176.11 108 T
(, Gaithersbur) 225.29 108 T
(g, MD.) 287.69 108 T
([6]) 72 82 T
0.23 (Don Libes, \322Regression T) 99 82 P
0.23 (esting and Conformance T) 224.11 82 P
0.23 (esting Interactive Programs\323, to appear) 351.55 82 P
(in) 99 68 T
1 F
(IEEE T) 111.33 68 T
(ransactions on Softwar) 146.31 68 T
(e Engineering) 257.16 68 T
0 F
(, New Y) 324.78 68 T
(ork, NY) 363.87 68 T
(.) 401.63 68 T
FMENDPAGE
%%EndPage: "19" 18
%%Page: "18" 18
612 792 0 FMBEGINPAGE
72 36 504 47.95 R
7 X
0 K
V
0 12 Q
0 X
(18) 72 39.95 T
0 10 Q
(Don Libes) 108 39.95 T
72 740.81 504 756 R
7 X
V
72 63 540 720 R
V
3 16 Q
0 X
(14.  Conclusions) 108 709.33 T
2 12 Q
0.65 (expect) 72 684 P
0 F
0.65 ( provides a means of automating interactive programs.  There are a great many such pro-) 104.63 684 P
0.83 (grams in the UNIX domain that lack non-interactive alternatives.) 72 670 P
2 F
0.83 (expect) 398.37 670 P
0 F
0.83 ( leverages of) 431.01 670 P
0.83 (f of these) 493.72 670 P
(programs with only a small amount of programming ef) 72 656 T
(fort.) 335.61 656 T
2 F
-0.13 (expect) 72 632 P
0 F
-0.13 ( solves a variety of problems with programs that 1\051 don\325) 104.63 632 P
-0.13 (t run non-interactively \050) 372.96 632 P
2 F
-0.13 (rlogin) 486.83 632 P
0 F
-0.13 (,) 517.48 632 P
2 F
-0.13 (tel-) 523.35 632 P
0 (net) 72 618 P
0 F
0 (\051; 2\051 \322know\323 they\325re running interactively and change their behavior \050) 87.99 618 P
2 F
0 (csh) 423.06 618 P
0 F
0 (,) 439.72 618 P
2 F
0 (rn) 445.72 618 P
0 F
0 (\051; 3\051 bypass stdio) 457.71 618 P
2.11 (and open) 72 604 P
2 F
2.11 (/dev/tty) 122.84 604 P
0 F
2.11 ( \050) 161.49 604 P
2 F
2.11 (crypt) 170.59 604 P
0 F
2.11 (,) 197.9 604 P
2 F
2.11 (passwd) 206 604 P
0 F
2.11 (\051; 4\051 don\325) 243.32 604 P
2.11 (t provide their full functionality non-interactively) 292.62 604 P
0.32 (\050) 72 590 P
2 F
0.32 (fsck) 75.99 590 P
0 F
0.32 (,) 96.65 590 P
2 F
0.32 (ftp) 102.96 590 P
0 F
0.32 (\051; or 5\051 don\325) 117.62 590 P
0.32 (t provide the friendliest user interface \050) 176.65 590 P
2 F
0.32 (adb) 365.76 590 P
0 F
0.32 (,) 385.09 590 P
2 F
0.32 (r) 391.41 590 P
0.32 (ogue) 396.52 590 P
0 F
0.32 (\051.  All of the \322new\323 non-) 420.51 590 P
0.4 (interactive versions that result can now be usefully called from shell scripts because they can re-) 72 576 P
(turn meaningful error codes and no longer require user interaction.) 72 562 T
2 F
0.26 (expect) 72 538 P
0 F
0.26 ( provides help even when you want to run programs interactively) 104.63 538 P
0.26 (.  If they lack a program-) 418.88 538 P
0.16 (mable interface, you can partially automate the interaction and then share control.  Of course, the) 72 524 P
0.21 (ideal solution is to rewrite the application with a programmable front-end.  For new applications,) 72 510 P
0.21 (there is no excuse not to use T) 72 496 P
0.21 (cl.  It is small, ef) 218.22 496 P
0.21 (\336cient, easy to use, and probably suf) 299.35 496 P
0.21 (\336ces for 90%) 475.62 496 P
0.48 (of all tools.  Building T) 72 482 P
0.48 (cl into an application will always be better than an after) 186.19 482 P
0.48 (-the-fact solution) 457.24 482 P
0.54 (like) 72 468 P
2 F
0.54 (expect) 93.52 468 P
0 F
0.54 (.  But for tools which don\325) 126.16 468 P
0.54 (t warrant the T) 256.08 468 P
0.54 (cl library) 327.79 468 P
0.54 (, or are too old to be rewritten,) 371.18 468 P
2 F
0.54 (ex-) 524.68 468 P
(pect) 72 454 T
0 F
( is a fast solution.) 93.31 454 T
2 F
-0.13 (expect) 72 430 P
0 F
-0.13 ( is actually quite small.  On a Sun 3, the current version is 64k.  This includes the entire T) 104.63 430 P
-0.13 (cl) 531.34 430 P
1.02 (language.) 72 416 P
2 F
1.02 (expect) 126.32 416 P
0 F
1.02 ( has few built-in functions.  For example,) 158.96 416 P
2 F
1.02 (expect) 368.29 416 P
0 F
1.02 ( doesn\325) 400.92 416 P
1.02 (t have a communica-) 436.7 416 P
-0.21 (tions protocol, nor does it know about sophisticated \336le access methods.  It doesn\325) 72 402 P
-0.21 (t need to.  It can) 463.78 402 P
0.42 (invoke another program to do the work.  At the same time, this gives you the \337exibility of using) 72 388 P
0.4 (any software you already have.  Do you need to communicate with a serial line?  Use) 72 374 P
2 F
0.4 (tip) 491.22 374 P
0 F
0.4 (,) 505.21 374 P
2 F
0.4 (cu) 511.61 374 P
0 F
0.4 (, or) 523.61 374 P
2 F
(kermit) 72 360 T
0 F
(.  W) 106.64 360 T
(ith a TCP socket?  Use) 126.47 360 T
2 F
(telnet) 239.07 360 T
0 F
(.  Y) 267.71 360 T
(ou make the choice.) 284.16 360 T
-0.23 (This building block philosophy is very much in keeping with the UNIX tradition of hooking small) 72 336 P
0.82 (programs together to build lar) 72 322 P
0.82 (ger ones.  In this respect,) 218.29 322 P
2 F
0.82 (expect) 345.76 322 P
0 F
0.82 ( functions as a new kind of glue,) 378.39 322 P
0.14 (much like the shell itself.  Unfortunately) 72 308 P
0.14 (, shell job control was designed only with interactive use) 266.26 308 P
0.74 (in mind and cannot automatically control interactive processes.) 72 294 P
2 F
0.74 (expect) 387.8 294 P
0 F
0.74 (\325) 420.44 294 P
0.74 (s job control is general-) 423.77 294 P
-0.17 (ized and has no such restriction.  The two forms of job control do not interfere and can be used to-) 72 280 P
(gether) 72 266 T
(.) 101.31 266 T
-0.3 (While) 72 242 P
2 F
-0.3 (expect) 104.01 242 P
0 F
-0.3 ( only runs on UNIX, it can be useful in managing non-UNIX sites as long as they are) 136.65 242 P
1.39 (networked to a UNIX host.  V) 72 228 P
1.39 (ia) 224.52 228 P
2 F
1.39 (telnet) 237.57 228 P
0 F
1.39 ( or) 266.21 228 P
2 F
1.39 (tip) 284.98 228 P
0 F
1.39 (, a script can login and play its usual interactive) 298.97 228 P
-0.13 (games.  My site has scripts that do exactly this on VMS and Symbolics Lisp machines.  Our VMS) 72 214 P
(wizards would rather avoid UNIX entirely) 72 200 T
(, but they know a timesaver when they see it.) 274.73 200 T
3 16 Q
(15.  Acknowledgments) 108 159.33 T
0 12 Q
1.24 (This work was supported by the National Institute of Standards and T) 72 134 P
1.24 (echnology \050NIST\051 Auto-) 418.94 134 P
1 (mated Manufacturing Research Facility \050AMRF\051.  The AMRF is funded by both NIST and the) 72 120 P
(Navy Manufacturing T) 72 106 T
(echnology Program.) 181.74 106 T
FMENDPAGE
%%EndPage: "18" 17
%%Page: "17" 17
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
72 36 540 47.95 R
V
0 10 Q
0 X
(expect: Scripts for Controlling Interactive Processes) 295.54 39.95 T
0 12 Q
(17) 528.01 39.95 T
72 63 540 720 R
7 X
V
0 X
0.99 (The solution is to have the) 72 712 P
2 F
0.99 (expect) 207.84 712 P
0 F
0.99 ( script generate the passwords directly) 240.47 712 P
0.99 (.  This closes the hole,) 428.14 712 P
-0.29 (while at the same time forcing the use of computer) 72 698 P
-0.29 (-generated passwords which are generally more) 312.65 698 P
(dif) 72 684 T
(\336cult to guess than human-generated passwords.) 85.11 684 T
1.13 (This technique does not extend to programs such as) 72 660 P
2 F
1.13 (telnet) 332.95 660 P
0 F
1.13 (,) 361.59 660 P
2 F
1.13 (ftp) 368.71 660 P
0 F
1.13 (,) 383.37 660 P
2 F
1.13 (su) 390.49 660 P
0 F
1.13 (, etc., where a human really) 401.83 660 P
0.07 (does need to provide the password.  The solution is to have the) 72 646 P
2 F
0.07 (expect) 377.42 646 P
0 F
0.07 ( script prompt for the pass-) 410.05 646 P
0.63 (word interactively via) 72 632 P
5 11 Q
0.64 (expect_user) 182.13 632 P
0 12 Q
0.63 (.  In contrast to the program \050or shell script\051 prompting when) 241.31 632 P
0.37 (the password is needed,) 72 618 P
2 F
0.37 (expect) 190.4 618 P
0 F
0.37 ( can prompt at the beginning of a script for all the passwords that) 223.04 618 P
-0.17 (will be needed.  Even if the same password is used in several programs, the user need only enter it) 72 604 P
(once since the script will remember it until it is needed.) 72 590 T
0.5 (Often, it is convenient to run such scripts in the background.  Starting processes asynchronously) 72 566 P
-0.21 (from the shell, however) 72 552 P
-0.21 (, prevents them from reading keyboard input.  Thus) 184.8 552 P
2 F
-0.21 (expect) 433.04 552 P
0 F
-0.21 ( scripts must be) 465.68 552 P
0.1 (started synchronously) 72 538 P
0.1 (.  The) 176.26 538 P
5 11 Q
0.11 (fork) 207.21 538 P
0 12 Q
0.1 ( and) 225.53 538 P
5 11 Q
0.11 (disconnect) 249.05 538 P
0 12 Q
0.1 ( commands are used later to move expect into the) 301.57 538 P
(background.) 72 524 T
0.18 (For example, the following script reads the password, disconnects itself from the terminal, sleeps) 72 500 P
(for one hour) 72 486 T
(, and then goes on to execute commands that require a password.) 130.8 486 T
4 F
(system stty -echo) 115.2 466 T
(;# disable echoing) 342 466 T
(send_user "Password: ") 115.2 452.5 T
(expect_user "*\134n") 115.2 439 T
(send_user "\134n") 115.2 425.5 T
(;# echo newline) 342 425.5 T
(system stty echo) 115.2 412 T
(scan $expect_match "%s" pass) 115.2 398.5 T
(;# strip off terminating \134n) 342 398.5 T
(if [fork]!=0 exit) 115.2 385 T
(disconnect) 115.2 371.5 T
(exec sleep 3600) 115.2 358 T
(spawn su) 115.2 344.5 T
(expect "*Password:*") 115.2 331 T
(send "$pass\134r") 115.2 317.5 T
(# more commands follow) 115.2 304 T
0 F
1.67 (This script begins by disabling echo so that the password can be typed unseen.  Unlike) 72 280.5 P
5 11 Q
1.7 (exec) 516.8 280.5 P
0 12 Q
-0.18 (which manipulates its standard I/O so that it is accessible to) 72 266.5 P
2 F
-0.18 (expect) 359.53 266.5 P
0 F
-0.18 (, the) 392.17 266.5 P
5 11 Q
-0.18 (system) 415.46 266.5 P
0 12 Q
-0.18 ( command does no) 450.26 266.5 P
(manipulation, thereby allowing) 72 252.5 T
2 F
(stty) 225.24 252.5 T
0 F
( to af) 243.89 252.5 T
(fect the terminal.) 268.32 252.5 T
5 11 Q
0.68 (fork) 72 228.5 P
0 12 Q
0.67 ( literally causes) 90.31 228.5 P
2 F
0.67 (expect) 169.93 228.5 P
0 F
0.67 ( to fork.  Like the UNIX system call of the same name, it returns the) 202.56 228.5 P
0.19 (child process ID to the parent.  Since the parent has nothing else to do, it immediately exits.  The) 72 214.5 P
0.37 (shell will detect this as normal program termination.  Meanwhile,) 72 200.5 P
5 11 Q
0.37 (disconnect) 392.8 200.5 P
0 12 Q
0.37 ( breaks the associa-) 445.31 200.5 P
0.16 (tion between the child process and the terminal so that the rest of the script can continue immune) 72 186.5 P
(to the user logging out.) 72 172.5 T
1.2 (This paradigm provides a secure way of starting long-running background processes which re-) 72 148.5 P
0.31 (quire passwords.  This works well with security schemes such as MIT\325) 72 134.5 P
0.31 (s Kerberos system.  In or-) 414.54 134.5 P
1.3 (der to run a process authenticated by Kerberos, all that is necessary is to spawn) 72 120.5 P
2 F
1.3 (kinit) 473.81 120.5 P
0 F
1.3 ( to get a) 497.81 120.5 P
(ticket, and similarly) 72 106.5 T
2 F
(kdestr) 170.61 106.5 T
(oy) 203.04 106.5 T
0 F
( when the ticket is no longer needed.) 215.03 106.5 T
-0.19 (Before) 72 82.5 P
2 F
-0.19 (expect) 107.44 82.5 P
0 F
-0.19 (, there was no way to achieve such results.  The choice was either in\337exibility or in-) 140.07 82.5 P
(security) 72 68.5 T
(.) 109.19 68.5 T
2 F
(expect) 118.19 68.5 T
0 F
( has made this choice unnecessary) 150.82 68.5 T
(, and given us the best of both worlds.) 314.24 68.5 T
FMENDPAGE
%%EndPage: "17" 16
%%Page: "16" 16
612 792 0 FMBEGINPAGE
72 36 504 47.95 R
7 X
0 K
V
0 12 Q
0 X
(16) 72 39.95 T
0 10 Q
(Don Libes) 108 39.95 T
72 740.81 504 756 R
7 X
V
72 63 540 720 R
V
4 12 Q
0 X
(break) 207 712 T
(}) 162 698.5 T
(}) 115.2 685 T
0 F
-0.18 (This script uses) 72 661.5 P
2 F
-0.18 (ed) 149.09 661.5 P
0 F
-0.18 ( although any editor could be used.  First) 161.09 661.5 P
2 F
-0.18 (ed) 358.71 661.5 P
0 F
-0.18 ( is directed to search for the printer) 370.7 661.5 P
-0.18 (.) 537 661.5 P
-0.07 (Once the printer is found, returns are sent to get the successive lines until the value is either locat-) 72 647.5 P
(ed or no more lines remain.) 72 633.5 T
0.19 (Using a specialized tool such as) 72 609.5 P
2 F
0.19 (awk) 229.03 609.5 P
0 F
0.19 ( might seem like a better alternative, except if you aren\325) 250.35 609.5 P
0.19 (t fa-) 520.16 609.5 P
0.94 (miliar with) 72 595.5 P
2 F
0.94 (awk) 129.84 595.5 P
0 F
0.94 (\325) 151.17 595.5 P
0.94 (s style of processing.  While the same claim could be made about) 154.5 595.5 P
2 F
0.94 (expect) 483.1 595.5 P
0 F
0.94 (, this) 515.74 595.5 P
1.56 (script illustrates the idea that \050ignoring syntax dif) 72 581.5 P
1.56 (ferences\051 you can automate a procedure you) 318.86 581.5 P
(know how to do interactively by simply translating it into) 72 567.5 T
5 11 Q
(send) 351.18 567.5 T
0 12 Q
(/) 375 567.5 T
5 11 Q
(expect) 378.33 567.5 T
0 12 Q
( sequences.) 410.7 567.5 T
3 16 Q
(12.  Is expect too fast?) 108 526.83 T
0 12 Q
0.18 (The previous example demonstrated how) 72 501.5 P
2 F
0.18 (expect) 273.74 501.5 P
0 F
0.18 ( can use an editor to read a \336le.) 306.38 501.5 P
2 F
0.18 (expect) 463.7 501.5 P
0 F
0.18 ( has sim-) 496.33 501.5 P
-0.24 (pler ways of reading \336les.  For instance the command) 72 487.5 P
4 F
-0.57 (send [exec cat /etc/motd]) 329.75 487.5 P
0 F
-0.24 ( writes) 507.93 487.5 P
0.37 (the contents of) 72 473.5 P
2 F
0.37 (/etc/motd) 146.73 473.5 P
0 F
0.37 ( to the current process.  Calling a UNIX program to read a \336le may not) 194.69 473.5 P
0.61 (seem like a fast method but it is a lot faster than having a user type it in.  In a window environ-) 72 459.5 P
0.07 (ment, cutting and pasting is an alternative, but this takes a lar) 72 445.5 P
0.07 (ge amount of time also.  Realistical-) 366.03 445.5 P
(ly) 72 431.5 T
(, blazing speed is hardly needed in a program that simulates users.) 80.55 431.5 T
-0.24 (The speed of) 72 407.5 P
2 F
-0.24 (expect) 136.22 407.5 P
0 F
-0.24 ( operations is described by Libes [2].  One side-ef) 168.86 407.5 P
-0.24 (fect not discussed is that) 405.63 407.5 P
2 F
-0.24 (ex-) 524.68 407.5 P
-0.22 (pect) 72 393.5 P
0 F
-0.22 ( can overrun input buf) 93.31 393.5 P
-0.22 (fers designed for human typists.) 198.8 393.5 P
5 11 Q
-0.22 (send) 357.03 393.5 P
0 12 Q
-0.22 ( supports a) 380.85 393.5 P
1 F
-0.22 (slow) 435.15 393.5 P
0 F
-0.22 ( option \050) 457.15 393.5 P
4 F
-0.53 (send -) 497.35 393.5 P
-0.18 (s) 72 379.5 P
0 F
-0.08 (\051 speci\336cally to avoid this problem.  It is controlled by parameters which describe the number of) 79.2 379.5 P
(bytes to send atomically and a length of time to wait between each packet.) 72 365.5 T
5 11 Q
0.5 (send) 72 341.5 P
0 12 Q
0.49 ( also supports a simulation of actual human typing speed \050) 95.82 341.5 P
4 F
1.18 (send -h) 379.89 341.5 P
0 F
0.49 (\051 according to a modi-) 431.45 341.5 P
0.8 (\336ed W) 72 327.5 P
0.8 (eibull distribution [8], a common statistical tool to simulate interarrival times.  The algo-) 104.15 327.5 P
3.53 (rithm is driven by a random number generator and several user) 72 313.5 P
3.53 (-chosen parameters.  The) 408.85 313.5 P
1.31 (parameters describe two average character interarrival times \050default and word endings\051, mini-) 72 299.5 P
0.22 (mum and maximum interarrival times, and a variability \322shape\323.  Errors are not simulated as this) 72 285.5 P
0.67 (can be done by the user directly) 72 271.5 P
0.67 (.  Simplistic errors may be generated by embedding typing mis-) 227.8 271.5 P
0.58 (takes and corrections \050if desired\051 in a) 72 257.5 P
5 11 Q
0.59 (send) 256.93 257.5 P
0 12 Q
0.58 ( ar) 280.74 257.5 P
0.58 (gument.  A more sophisticated approach could use) 293.43 257.5 P
(an expert system as a coroutine.) 72 243.5 T
3 16 Q
(13.  Security) 108 202.83 T
0 12 Q
0.21 (The) 72 177.5 P
2 F
0.21 (passwd) 93.86 177.5 P
0 F
0.21 ( script shown earlier was designed solely to be used  for conformance testing.  Many) 131.18 177.5 P
1.82 (system administrators want such a script to embed in a comprehensive) 72 163.5 P
1 F
1.82 (adduser) 432.77 163.5 P
0 F
1.82 ( script, which) 471.41 163.5 P
-0.29 (would set up everything that a generic new user needs including an account and password.  Unfor-) 72 149.5 P
0.34 (tunately) 72 135.5 P
0.34 (, calling the) 109.86 135.5 P
2 F
0.34 (passwd) 170.18 135.5 P
0 F
0.34 ( script from another script reopens the very problem that the) 207.5 135.5 P
2 F
0.34 (passwd) 502.68 135.5 P
0 F
-0.01 (program was designed to solve.  Passwords should not be used as ar) 72 121.5 P
-0.01 (guments to programs because) 397.8 121.5 P
(they can be seen by) 72 107.5 T
2 F
(ps) 168.92 107.5 T
0 F
( and similar programs.) 180.25 107.5 T
FMENDPAGE
%%EndPage: "16" 15
%%Page: "15" 15
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
72 36 540 47.95 R
V
0 10 Q
0 X
(expect: Scripts for Controlling Interactive Processes) 295.54 39.95 T
0 12 Q
(15) 528.01 39.95 T
72 63 540 720 R
7 X
V
0 X
0.05 (This script has two) 72 712 P
5 11 Q
0.05 (interact) 166.14 712 P
0 12 Q
0.05 (s.  The user switches between them by typing) 202.16 712 P
4 F
0.12 (~d) 423.77 712 P
0 F
0.05 ( \050for Dvorak\051 and) 438.17 712 P
4 F
0.12 (~q) 525.61 712 P
0 F
0.63 (\050for qwerty\051.  The Dvorak translation occurs in the procedure) 72 698 P
5 11 Q
0.64 (dvorak) 375.05 698 P
0 12 Q
0.63 ( de\336ned with) 408.02 698 P
5 11 Q
0.64 (proc) 475.54 698 P
0 12 Q
0.63 (.  W) 496.91 698 P
0.63 (ithin) 518 698 P
5 11 Q
0.07 (dvorak) 72 684 P
0 12 Q
0.07 (, an) 104.97 684 P
5 11 Q
0.07 (interact) 125.43 684 P
0 12 Q
0.07 ( gives each character an action that corresponds to sending its Dvorak counter-) 161.45 684 P
0.42 (part instead.  Nothing has to be sent to the user) 72 670 P
0.42 (, since the character will be echoed \050if necessary\051) 300.55 670 P
(by the current process.) 72 656 T
0.43 (The) 72 632 P
4 F
1.04 (return continue) 94.08 632 P
0 F
0.43 ( action for) 203.06 632 P
4 F
1.04 (~q) 256.65 632 P
0 F
0.43 ( causes the Dvorak) 271.04 632 P
5 11 Q
0.44 (interact) 366.69 632 P
0 12 Q
0.43 ( to return the value) 402.71 632 P
5 11 Q
0.44 (continue) 498.47 632 P
0 12 Q
0.55 (to its caller) 72 618 P
0.55 (.) 125.74 618 P
5 11 Q
0.56 (interact) 135.83 618 P
0 12 Q
0.55 (\325) 171.86 618 P
0.55 (s caller happens to be an earlier) 175.19 618 P
5 11 Q
0.56 (interact) 333.24 618 P
0 12 Q
0.55 ( \050at the bottom of the script\051 which) 369.26 618 P
1.43 (evaluates the) 72 604 P
5 11 Q
1.46 (continue) 140.14 604 P
0 12 Q
1.43 ( and literally continues.  This isn\325) 181.67 604 P
1.43 (t anything magical.  They are just T) 350.94 604 P
1.43 (cl) 531.34 604 P
(commands that are appropriately handled.) 72 590 T
-0.01 (The script chooses the desired shell by examining the) 72 566 P
5 11 Q
-0.01 (SHELL) 331.38 566 P
0 12 Q
-0.01 ( environment variable.  Since) 366.18 566 P
2 F
-0.01 (print-) 510.02 566 P
-0.13 (env) 72 552 P
0 F
-0.13 ( appends a newline to the end of its output, this has to be stripped of) 89.99 552 P
-0.13 (f and is done here by) 414.31 552 P
5 11 Q
-0.13 (scan) 516.8 552 P
0 12 Q
(\320 an equivalent to scanf in the C programming language.) 72 538 T
0.37 (This script is excessive and is not at all what this feature of) 72 514 P
5 11 Q
0.37 (interact) 362.92 514 P
0 12 Q
0.37 ( was intended for) 398.94 514 P
0.37 (.  Neverthe-) 482.32 514 P
(less it works and demonstrates a number of interesting aspects.) 72 500 T
3 16 Q
(1) 108 459.33 T
(1.  Non-interactive programs are controlled dif) 115.12 459.33 T
(ferently) 422.66 459.33 T
0 12 Q
1.01 (Some interactive programs have non-interactive alternatives.  However) 72 434 P
1.01 (, it is often the case that) 420.33 434 P
(these alternatives are controlled in a way quite unlike the original interactive program.  Thus, you) 72 420 T
(need to learn two ways of doing things: interactively and non-interactively) 72 406 T
(.) 428.97 406 T
-0.13 (For example, suppose you want to locate a printer server) 72 382 P
-0.13 (.  This is described by the) 341.99 382 P
4 F
-0.3 (rm) 467.03 382 P
0 F
-0.13 ( value in the) 481.42 382 P
2 F
0.12 (printcap) 72 368 P
0 F
0.12 ( \336le.  Interactively) 115.98 368 P
0.12 (, you might use an editor) 203.49 368 P
0.12 (, or even,) 322.88 368 P
2 F
0.12 (mor) 370.86 368 P
0.12 (e) 391.96 368 P
0 F
0.12 (, to search the \336le for the cor-) 397.28 368 P
-0.12 (rect printer and then begin scanning for the) 72 354 P
4 F
-0.28 (rm) 280.89 354 P
0 F
-0.12 ( \336eld.  T) 295.28 354 P
-0.12 (o automate this, you must switch to a com-) 334.73 354 P
(pletely dif) 72 340 T
(ferent program, such as) 120.75 340 T
2 F
(awk) 236.32 340 T
0 F
(.) 257.65 340 T
-0.29 (Alternatively) 72 316 P
-0.29 (, you could just translate the interaction you were doing by hand into) 134.51 316 P
5 11 Q
-0.3 (send) 463.79 316 P
0 12 Q
-0.29 (/) 487.61 316 P
5 11 Q
-0.3 (expect) 490.95 316 P
0 12 Q
-0.29 ( se-) 523.31 316 P
0.01 (quences.  The following fragment does exactly this.  It was used by a lar) 72 302 P
0.01 (ger script that manipulat-) 419.04 302 P
(ed printers by running) 72 288 T
2 F
(lpc) 181.26 288 T
0 F
(, the interactive interface to the BSD line printer system.) 196.59 288 T
4 F
(spawn ed /etc/printcap) 115.2 268 T
(expect {*\134n}) 115.2 254.5 T
(    ;# discard character count) 207 254.5 T
(send "/$printer/\134r") 115.2 241 T
(for {} {1} {} {) 115.2 227.5 T
(expect "*\134r\134n*:rm=*\134n*" {) 162 214 T
(# found rm, now get value) 207 200.5 T
(set i [string first :rm= $expect_match]) 207 187 T
(scan [range $expect_match [expr $i+4] end c] \134) 207 173.5 T
("%\134[^:\134]" server) 252 160 T
(break) 207 146.5 T
(} "*\134r\134n*\134\134\134r\134n" {) 162 133 T
(# look at next line of entry) 207 119.5 T
(send "\134r") 207 106 T
(} "*\134r\134n*\134n" {) 162 92.5 T
(# no more lines in entry - give up) 207 79 T
FMENDPAGE
%%EndPage: "15" 14
%%Page: "14" 14
612 792 0 FMBEGINPAGE
72 36 504 47.95 R
7 X
0 K
V
0 12 Q
0 X
(14) 72 39.95 T
0 10 Q
(Don Libes) 108 39.95 T
72 740.81 504 756 R
7 X
V
72 63 540 720 R
V
0 12 Q
0 X
0.69 (to the) 72 712 P
2 F
0.69 (expect) 103.37 712 P
0 F
0.69 ( interpreter and invoke a procedure to answer the remaining questions without fur-) 136 712 P
(ther interaction from you.  This can be made as complex as you like.) 72 698 T
0.22 (The ar) 72 674 P
0.22 (guments to) 102.97 674 P
5 11 Q
0.22 (interact) 159.38 674 P
0 12 Q
0.22 ( are actually string-action pairs.  \050The default action is to invoke the in-) 195.4 674 P
0.73 (terpreter interactively) 72 660 P
0.73 (.\051  This generalized mechanism can support all the usual styles of escapes.) 175.52 660 P
1.11 (such as) 72 646 P
2 F
1.11 (tip) 112.19 646 P
0 F
1.11 (\325) 126.19 646 P
1.11 (s) 129.52 646 P
5 11 Q
1.13 (~) 138.3 646 P
0 12 Q
1.11 (-pre\336xed commands or) 144.72 646 P
2 F
1.11 (csh) 262.3 646 P
0 F
1.11 (\325) 278.96 646 P
1.11 (s single-character job control keys.  Actions may be) 282.29 646 P
-0.12 (any) 72 632 P
2 F
-0.12 (expect) 92.2 632 P
0 F
-0.12 ( command.  As an example, the following line maps the strings) 124.83 632 P
4 F
-0.28 (~y) 429.22 632 P
0 F
-0.12 (,) 442.83 632 P
4 F
-0.28 (~a) 448.71 632 P
0 F
-0.12 (, and the) 463.1 632 P
5 11 Q
-0.12 (^C) 506.72 632 P
0 12 Q
-0.12 ( and) 519.8 632 P
5 11 Q
(^Z) 72 618 T
0 12 Q
( characters.) 83.86 618 T
4 F
(interact \134) 115.2 598 T
(~y {yes} \134) 162 584.5 T
(~a {send "[exec date]"; send_user "hello world"} \134) 162 571 T
(\134Cc {exit} \134) 162 557.5 T
(\134Cz {exec kill -STOP 0}) 162 544 T
0 F
0.11 (When) 72 520.5 P
4 F
0.26 (~y) 103.75 520.5 P
0 F
0.11 ( is typed, a procedure called) 118.14 520.5 P
5 11 Q
0.11 (yes) 256.34 520.5 P
0 12 Q
0.11 ( is invoked.  This could further automate the) 273.43 520.5 P
2 F
0.11 (fsck) 490.26 520.5 P
0 F
0.11 ( inter-) 510.92 520.5 P
-0.25 (action just described, so that the user does not have to explicitly start the interpreter and type) 72 506.5 P
4 F
-0.6 (yes) 515.41 506.5 P
0 F
-0.25 (.) 537 506.5 P
4 F
0.35 (~a) 72 492.5 P
0 F
0.15 ( invokes a more complex action.  When typed,) 86.39 492.5 P
4 F
0.35 (hello world) 313.89 492.5 P
0 F
0.15 ( is seen at the terminal and the) 393.4 492.5 P
-0.21 (current date is sent to the process as if the user had typed it.  The other pairs exit or suspend an) 72 478.5 P
2 F
-0.21 (ex-) 524.68 478.5 P
0.92 (pect) 72 464.5 P
0 F
0.92 ( session while interacting with a spawned process.  \050W) 93.31 464.5 P
0.92 (ith no map, the characters would be) 363.6 464.5 P
-0.08 (passed uninterpreted to the current process.\051  Appropriate maps can simulate) 72 450.5 P
2 F
-0.08 (csh) 441.54 450.5 P
0 F
-0.08 (-style job control) 458.2 450.5 P
-0.14 (or much fancier actions.  For instance,) 72 436.5 P
5 11 Q
-0.14 (^Z) 257.9 436.5 P
0 12 Q
-0.14 ( could pass control to the interactive) 269.77 436.5 P
2 F
-0.14 (expect) 445.69 436.5 P
0 F
-0.14 ( interpreter \320) 478.33 436.5 P
-0.14 (analogous to what) 72 422.5 P
5 11 Q
-0.15 (^Z) 161.84 422.5 P
0 12 Q
-0.14 ( does in the shell \320 or it could change jobs to a spawned shell and resume the) 173.71 422.5 P
(interaction.) 72 408.5 T
0.36 (An unrealistic but amusing application of character mapping is the following script which runs a) 72 384.5 P
(shell with a Dvorak keyboard.  For brevity) 72 370.5 T
(, only lowercase letters are mapped.) 275.74 370.5 T
4 F
(proc dvorak {} {) 115.2 337 T
(interact ~q {return continue} ~d {} \134) 162 323.5 T
(q {send \325} w {send ,} e {send .} \134) 207 310 T
(r {send p} t {send y} y {send f} \134) 207 296.5 T
(u {send g} i {send c} o {send r} \134) 207 283 T
(p {send l} s {send o} d {send e} \134) 207 269.5 T
(f {send u} g {send i} h {send d} \134) 207 256 T
(j {send h} k {send t} l {send n} \134) 207 242.5 T
(x {send q} c {send j} v {send k} \134) 207 229 T
(b {send x} n {send b} , {send w} \134) 207 215.5 T
(. {send v} / {send z} \325 {send -} \134) 207 202 T
(\134; {send s} z {send \134;} \134) 207 188.5 T
(}) 115.2 175 T
(log_user 0) 115.2 148 T
(scan [exec printenv SHELL] "%s" shell) 115.2 134.5 T
(spawn $shell) 115.2 121 T
(log_user 1) 115.2 107.5 T
(send_user "~d for dvorak, ~q for qwerty \050default\051\134n") 115.2 94 T
(send_user "Enter ~ sequences using qwerty keys\134n") 115.2 80.5 T
(interact ~d dvorak ~q {}) 115.2 67 T
FMENDPAGE
%%EndPage: "14" 13
%%Page: "13" 13
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
72 36 540 47.95 R
V
0 10 Q
0 X
(expect: Scripts for Controlling Interactive Processes) 295.54 39.95 T
0 12 Q
(13) 528.01 39.95 T
72 63 540 720 R
7 X
V
0 X
0.47 (Once the timeout is set and the program is spawned,) 72 712 P
5 11 Q
0.48 (expect) 330.17 712 P
0 12 Q
0.47 ( waits for either an end-of-\336le or the) 362.53 712 P
0.61 (20 seconds to pass.  If the end-of-\336le is seen, the program has \050almost certainly\051 exited, and) 72 698 P
5 11 Q
0.62 (ex-) 524.74 698 P
-0.11 (pect) 72 684 P
0 12 Q
-0.11 ( returns.  If the timeout has passed,) 92.76 684 P
5 11 Q
-0.11 (expect) 262.44 684 P
0 12 Q
-0.11 ( returns.  In either case) 294.81 684 P
2 F
-0.11 (expect) 406.39 684 P
0 F
-0.11 ( exits, implicitly kill-) 439.03 684 P
(ing the current process.) 72 670 T
0.05 (It is educational to try and solve these last two examples without using) 72 646 P
2 F
0.05 (expect) 414.83 646 P
0 F
0.05 (.  In both cases, the) 447.46 646 P
0.78 (usual approach is to fork a second process that sleeps and then signals the original shell.  If the) 72 632 P
1.23 (process or read \336nishes \336rst, the shell kills the sleeper) 72 618 P
1.23 (.  Passing pids and preventing the back-) 340.87 618 P
0.33 (ground process start message is a stumbling block for all but the most expert shell programmers.) 72 604 P
0.56 (Providing a general approach to starting multiple processes this way complicates the shell script) 72 590 P
(immensely) 72 576 T
(.  Invariably) 123.86 576 T
(, the programmer writes a special-purpose C program.) 181.37 576 T
5 11 Q
0.2 (expect_user) 72 552 P
0 12 Q
0.2 (,) 131.36 552 P
5 11 Q
0.2 (send_user) 137.56 552 P
0 12 Q
0.2 (, and) 188.38 552 P
5 11 Q
0.2 (send_error) 215.09 552 P
0 12 Q
0.2 ( \050for writing to the standard error\051 are frequently used in) 268.21 552 P
0.02 (longer) 72 538 P
2 F
0.02 (expect) 105.66 538 P
0 F
0.02 ( scripts which translate a complex interaction from a process to a simple one for the) 138.3 538 P
0.29 (user) 72 524 P
0.29 (.  In [7], Libes describes how) 91.32 524 P
2 F
0.29 (adb) 236.27 524 P
0 F
0.29 ( could be securely wrapped with a script, preventing a sys-) 255.6 524 P
0.38 (tem administrator from needing to master the intricacies of) 72 510 P
2 F
0.38 (adb) 360.85 510 P
0 F
0.38 (, while at the same time dramati-) 380.19 510 P
(cally lessening the likelihood of a system crash due to an errant keystroke.) 72 496 T
-0.24 (A simpler example is automating) 72 472 P
2 F
-0.24 (ftp) 233.03 472 P
0 F
-0.24 ( to retrieve \336les from a personal account.  In this case, a pass-) 247.69 472 P
0.18 (word must be supplied.  Storing the cleartext password in a \336le should be avoided even if the \336le) 72 458 P
-0.19 (permissions are heavily restricted.  Supplying passwords as ar) 72 444 P
-0.19 (guments to a script is also a security) 367.75 444 P
0.04 (risk due to the ability of) 72 430 P
2 F
0.04 (ps) 190.15 430 P
0 F
0.04 ( to retrieve them.  A solution is to call) 201.48 430 P
5 11 Q
0.04 (expect_user) 386.74 430 P
0 12 Q
0.04 ( at the beginning of) 446.58 430 P
0.57 (the script for each password that the script must supply later) 72 416 P
0.57 (.  The password will be available to) 365.48 416 P
(the script \050and only to the script\051, even if it has to retry) 72 402 T
2 F
(ftp) 337.15 402 T
0 F
( every hour) 351.81 402 T
(.) 405.77 402 T
0.57 (This technique is useful even if the information is to be entered immediately) 72 378 P
0.57 (.  For example, you) 444.46 378 P
-0.08 (can write a script which changes your password on every machine on which you have an account,) 72 364 P
0.44 (whether or not the machines share a common password database \050or even run UNIX\051.  By hand,) 72 350 P
-0.1 (you might have to) 72 336 P
2 F
-0.1 (telnet) 161.54 336 P
0 F
-0.1 ( to each machine and then enter the new password.  W) 190.18 336 P
-0.1 (ith) 449.71 336 P
2 F
-0.1 (expect) 465.27 336 P
0 F
-0.1 (, you en-) 497.9 336 P
(ter the password once and let the script do the rest of the work.) 72 322 T
5 11 Q
0.17 (expect_user) 72 298 P
0 12 Q
0.17 ( and) 131.84 298 P
5 11 Q
0.17 (interact) 155.5 298 P
0 12 Q
0.17 ( can also be mixed in a single script.  Imagine debugging a program that) 191.52 298 P
1.63 (only fails after many iterations of a loop.  An) 72 284 P
2 F
1.63 (expect) 307.84 284 P
0 F
1.63 ( script could drive the debugger) 340.48 284 P
1.63 (, setting) 500.38 284 P
0.2 (breakpoints, running the program for the appropriate number of loops, and then returning control) 72 270 P
-0.19 (to the keyboard.  It could also alternate between looping and testing for a condition, before return-) 72 256 P
(ing control.) 72 242 T
3 16 Q
(10.  Programming expect interactively) 108 201.33 T
2 12 Q
1.2 (expect) 72 176 P
0 F
1.2 ( may be programmed interactively) 104.63 176 P
1.2 (.  For example, if) 273.86 176 P
2 F
1.2 (expect) 365.46 176 P
0 F
1.2 ( is run with no ar) 398.1 176 P
1.2 (guments, it) 485.49 176 P
1.31 (prompts for commands.  This is similar to what one normally does when interactively using a) 72 162 P
-0.12 (shell.  This interactive mode may also be entered by pressing a user) 72 148 P
-0.12 (-de\336ned string during) 394.41 148 P
5 11 Q
-0.12 (interact) 500.98 148 P
0 12 Q
-0.12 (.) 537 148 P
-0.19 (Once prompted by the interpreter) 72 124 P
-0.19 (, you can type) 230.63 124 P
2 F
-0.19 (expect) 300.15 124 P
0 F
-0.19 ( commands which are executed immediate-) 332.78 124 P
-0.07 (ly) 72 110 P
-0.07 (.  Y) 80.55 110 P
-0.07 (ou can call de\336ned procedures, perform job control, or even recursively invoke) 96.88 110 P
5 11 Q
-0.07 (interact) 478.45 110 P
0 12 Q
-0.07 (.  For) 514.48 110 P
0.64 (example, suppose you are running a script to automate) 72 96 P
2 F
0.64 (fsck) 342.21 96 P
0 F
0.64 (.  Y) 362.86 96 P
0.64 (ou answer some of the questions) 380.59 96 P
-0.13 (yourself, and then decide that the rest should all be answered \322yes\323.  Y) 72 82 P
-0.13 (ou can escape from) 408.57 82 P
5 11 Q
-0.13 (interact) 503.98 82 P
FMENDPAGE
%%EndPage: "13" 12
%%Page: "12" 12
612 792 0 FMBEGINPAGE
72 36 504 47.95 R
7 X
0 K
V
0 12 Q
0 X
(12) 72 39.95 T
0 10 Q
(Don Libes) 108 39.95 T
72 740.81 504 756 R
7 X
V
72 63 540 720 R
V
0 12 Q
0 X
0.81 (a) 72 712 P
5 11 Q
0.82 (^Z) 81.13 712 P
0 12 Q
0.81 (, the process stops and control returns to the shell.  As far as) 92.99 712 P
2 F
0.81 (expect) 395.4 712 P
0 F
0.81 ( is concerned, it is still) 428.03 712 P
(dealing with the same process \050the original shell\051.) 72 698 T
0.64 (Not only is) 72 674 P
2 F
0.64 (expect) 130.23 674 P
0 F
0.64 (\325) 162.87 674 P
0.64 (s approach \337exible, it also avoids duplicating the job control software that is) 166.2 674 P
0.15 (already in the shell.  By using the shell, you get the job control of your choice since you can pick) 72 660 P
-0.05 (the shell to spawn.  And should you need to \050such as when testing\051, you really can drive a shell so) 72 646 P
0.08 (that it thinks it is running interactively) 72 632 P
0.08 (.  This is also useful for programs that change the way they) 255.6 632 P
(buf) 72 618 T
(fer output after detecting whether they are running interactively or not.) 87.77 618 T
0.56 (T) 72 594 P
0.56 (o further pin things down, during) 78.49 594 P
5 11 Q
0.56 (interact) 244.05 594 P
0 12 Q
0.56 (,) 280.08 594 P
2 F
0.56 (expect) 286.63 594 P
0 F
0.56 ( puts the controlling terminal \050the one) 319.26 594 P
2 F
0.56 (expect) 507.37 594 P
0 F
0.53 (was invoked from, not the pty\051 into raw mode so that all characters pass to the spawned process) 72 580 P
0.54 (verbatim.  When) 72 566 P
2 F
0.54 (expect) 156.88 566 P
0 F
0.54 ( is not executing) 189.52 566 P
5 11 Q
0.55 (interact) 273.62 566 P
0 12 Q
0.54 (, the terminal is in cooked mode, at which time) 309.64 566 P
(shell job control can be used on) 72 552 T
2 F
(expect) 226.9 552 T
0 F
( itself.) 259.53 552 T
3 16 Q
(9.  Using expect interactively) 108 511.33 T
0 12 Q
1.09 (Earlier were shown scripts that are used interactively with) 72 486 P
5 11 Q
1.11 (interact) 363.24 486 P
0 12 Q
1.09 (.) 399.27 486 P
5 11 Q
1.11 (interact) 410.44 486 P
0 12 Q
1.09 ( essentially gives a) 446.46 486 P
-0.07 (user free access to the dialogue, but sometimes \336ner control is desired.    This can be achieved us-) 72 472 P
-0.12 (ing) 72 458 P
5 11 Q
-0.12 (expect) 90.21 458 P
0 12 Q
-0.12 ( which can read from the standard input just as easily as it reads from a process.  A pre-) 122.57 458 P
3.56 (de\336ned) 72 444 P
5 11 Q
3.63 (spawn_id) 113.87 444 P
0 12 Q
3.56 ( maps to the standard input and the standard output.  Alternatively) 160.27 444 P
3.56 (, the) 515.79 444 P
0.06 (commands) 72 430 P
5 11 Q
0.06 (expect_user) 127.03 430 P
0 12 Q
0.06 ( and) 186.87 430 P
5 11 Q
0.06 (send_user) 210.3 430 P
0 12 Q
0.06 ( perform I/O with the standard input and the standard out-) 261.6 430 P
(put without changing) 72 416 T
5 11 Q
(spawn_id) 176.94 416 T
0 12 Q
(.) 223.35 416 T
0.33 (The following script reads a line from the standard input for a given amount of time.  This script) 72 392 P
2.87 (\050named) 72 378 P
2 F
2.87 (timed_r) 113.83 378 P
2.87 (ead) 154.25 378 P
0 F
2.87 (\051 can be called from, for example, a) 172.24 378 P
2 F
2.87 (csh) 369.01 378 P
0 F
2.87 ( script as) 385.66 378 P
4 F
6.88 (set answer =) 439.89 378 P
(\324time) 72 364 T
(d_read 30\324) 107.98 364 T
0 F
(.) 179.94 364 T
4 F
(#!/usr/local/bin/expect -f) 115.2 344 T
(set timeout [index $argv 1]) 115.2 330.5 T
(expect_user "*\134n") 115.2 317 T
(send_user $expect_match) 115.2 303.5 T
0 F
0.96 (The third line accepts any newline-terminated line from the user) 72 280 P
0.96 (.  The last line returns it to the) 388.08 280 P
(standard output.  If nothing is typed before the timeout, nothing is returned.) 72 266 T
-0.22 (The \336rst line allows systems that support the) 72 242 P
5 11 Q
-0.23 (#!) 287.43 242 P
0 12 Q
-0.22 ( magic to invoke the script directly \050without saying) 296.6 242 P
4 F
-0.44 (expect) 72 228 P
0 F
-0.19 ( before the script name\051 if its execute permission is set.   Of course a script can always be) 115.18 228 P
-0.07 (invoked explicitly) 72 214 P
-0.07 (, as) 158.1 214 P
4 F
-0.17 (\322expect script\323) 176.95 214 P
0 F
-0.07 (.  Options preceded by a) 284.72 214 P
5 11 Q
-0.07 (\320c) 403.86 214 P
0 12 Q
-0.07 ( \337ag are executed as com-) 415.47 214 P
0.28 (mands before any in the script.  For example, an) 72 200 P
2 F
0.28 (expect) 309.25 200 P
0 F
0.28 ( script can be traced without reediting by) 341.88 200 P
0.59 (invoking it as) 72 186 P
4 F
1.42 (expect -c "trace ..." script) 142.08 186 P
0 F
0.59 ( \050where the ellipsis represents a tracing) 349.26 186 P
(option\051.) 72 172 T
0.42 (Multiple commands may be strung together on a single script line or within braces, separated by) 72 148 P
0.79 (semi-colons.  Naturally) 72 134 P
0.79 (, this extends to the) 185.05 134 P
5 11 Q
0.8 (\320c) 284.93 134 P
0 12 Q
0.79 ( ar) 296.53 134 P
0.79 (gument.  For example, the following command) 309.42 134 P
(runs program) 72 120 T
2 F
(foo) 139.28 120 T
0 F
( for 20 seconds.) 155.27 120 T
4 F
(expect -c "set timeout 20; spawn foo; expect") 115.2 100 T
FMENDPAGE
%%EndPage: "12" 11
%%Page: "11" 11
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
72 36 540 47.95 R
V
0 10 Q
0 X
(expect: Scripts for Controlling Interactive Processes) 295.54 39.95 T
0 12 Q
(11) 528.01 39.95 T
72 63 540 720 R
7 X
V
4 F
0 X
(case $tty in $ready {) 162 712 T
(set spawn_id $tty) 207 698.5 T
(expect "*\134r*" {) 207 685 T
(if $log {) 297 671.5 T
(send_user $expect_match) 342 658 T
(set log 0) 342 644.5 T
(}) 297 631 T
(} "*") 207 617.5 T
(if $log {) 207 604 T
(send_user $expect_match) 252 590.5 T
(}) 207 577 T
(set spawn_id $login; send $expect_match) 207 563.5 T
(}) 162 550 T
(}) 115.2 536.5 T
0 F
0.28 (The script works as follows.  First connections are made to a) 72 513 P
2 F
0.28 (login) 369.45 513 P
0 F
0.28 ( process and terminal.  By de-) 394.78 513 P
-0.02 (fault, an entire session is logged to the standard output \050via) 72 499 P
5 11 Q
-0.02 (send_user) 357.59 499 P
0 12 Q
-0.02 (\051.  Since this is not of inter-) 408.89 499 P
1.61 (est, it is disabled by the command) 72 485 P
4 F
3.86 (log_user 0) 249.15 485 P
0 F
1.61 (.  \050A variety of commands are available to) 324.97 485 P
(control exactly what is seen or logged.\051) 72 471 T
1.05 (In a loop,) 72 447 P
5 11 Q
1.07 (select) 123.79 447 P
0 10 Q
0.88 (3) 152.49 451.8 P
0 12 Q
1.05 ( waits for activity from either the terminal or the process and returns a list of) 157.48 447 P
5 11 Q
0 (spawn_id) 72 433 P
0 12 Q
0 (s with pending input.) 118.41 433 P
5 11 Q
0 (case) 225.68 433 P
0 12 Q
0 ( executes an action if a value is found in a list.  For example,) 248.88 433 P
0.63 (if the string) 72 419 P
4 F
1.5 (login) 132.18 419 P
0 F
0.63 ( appears in the output of the) 168.16 419 P
2 F
0.63 (login) 309.45 419 P
0 F
0.63 ( process, the prompt is logged to the stan-) 334.78 419 P
0.05 (dard output and a \337ag is set so that the script will begin recording the user) 72 405 P
0.05 (\325) 427.89 405 P
0.05 (s keystrokes until a re-) 431.23 405 P
0.07 (turn is pressed.  Whatever was received is echoed to the terminal.  A corresponding action occurs) 72 391 P
(in the terminal half of the script.) 72 377 T
0.69 (These examples have demonstrated) 72 353 P
2 F
0.69 (expect) 247.95 353 P
0 F
0.69 (\325) 280.58 353 P
0.69 (s form of job control.  By interposing itself in a dia-) 283.92 353 P
0.13 (logue,) 72 339 P
2 F
0.13 (expect) 104.77 339 P
0 F
0.13 ( can build arbitrarily complex I/O \337ow between processes.  Multiple fan-out, multi-) 137.41 339 P
(plexed fan-in, and dynamically data-dependent process graphs are all possible.) 72 325 T
0.03 (In contrast, the shell makes it extraordinarily dif) 72 301 P
0.03 (\336cult just to read through a \336le one line at a time.) 303.16 301 P
-0.04 (The shell forces the user to press control characters \050) 72 287 P
5 11 Q
-0.04 (^Z) 324.43 287 P
0 12 Q
-0.04 (,) 336.3 287 P
5 11 Q
-0.04 (^C) 342.26 287 P
0 12 Q
-0.04 (\051 and keywords \050) 355.34 287 P
5 11 Q
-0.04 (fg) 436.15 287 P
0 12 Q
-0.04 (,) 445.32 287 P
5 11 Q
-0.04 (bg) 451.27 287 P
0 12 Q
-0.04 (\051 to switch jobs.) 463.49 287 P
0.79 (These cannot be used from shell scripts.  Similarly) 72 273 P
0.79 (, the shell running non-interactively does not) 320.39 273 P
0.95 (deal with history and other features designed solely for interactive use.  This presents a similar) 72 259 P
0.19 (problem as with) 72 245 P
2 F
0.19 (passwd) 152.86 245 P
0 F
0.19 ( earlier) 190.18 245 P
0.19 (.  Namely) 223.34 245 P
0.19 (, that it is impossible to build shell scripts which regres-) 269.91 245 P
-0.11 (sively test certain shell behavior) 72 231 P
-0.11 (.  The result is that these aspects of the shell will inevitably not be) 225.45 231 P
(rigorously tested.) 72 217 T
-0.08 (Using) 72 193 P
2 F
-0.08 (expect) 103.57 193 P
0 F
-0.08 (, it is possible to drive the shell using its interactive job control features.  A spawned) 136.2 193 P
-0.05 (shell thinks it is running interactively) 72 179 P
-0.05 (, and will handle job control as usual.  Not only does it solve) 249.86 179 P
0.91 (the problem of testing shells and other programs that handle job control, but it also enables the) 72 165 P
0.7 (shell to handle the job for) 72 151 P
2 F
0.7 (expect) 202.09 151 P
0 F
0.7 ( when necessary) 234.73 151 P
0.7 (.  Processes to be manipulated with shell-style) 313.93 151 P
0.35 (job control can be) 72 137 P
1 F
0.35 (backed) 162.66 137 P
0 F
0.35 ( with a shell.  This means that \336rst a shell is spawned, and then a com-) 196.63 137 P
0.06 (mand is sent to the shell to start the process.  If the process is suspended by) 72 123 P
0.06 (, for example, sending) 432.9 123 P
72 76 540 96.09 C
72 83.99 203.98 83.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 9 Q
0 X
0 K
(3.) 72 70 T
5 8 Q
(select) 83.23 70 T
0 9 Q
( calls poll\050\051 on USG systems and, in retrospect, should have been called something less biased and more meaningful.) 104.12 70 T
FMENDPAGE
%%EndPage: "11" 10
%%Page: "10" 10
612 792 0 FMBEGINPAGE
72 36 504 47.95 R
7 X
0 K
V
0 12 Q
0 X
(10) 72 39.95 T
0 10 Q
(Don Libes) 108 39.95 T
72 740.81 504 756 R
7 X
V
72 63 540 720 R
V
4 12 Q
0 X
(spawn chess) 115.2 712 T
(;# start player one) 297 712 T
(set id1 $spawn_id) 115.2 698.5 T
(expect "Chess\134r\134n") 115.2 685 T
(send "first\134r") 115.2 671.5 T
(;# force it to go first) 297 671.5 T
(read_move) 115.2 658 T
(spawn chess) 115.2 631 T
(;# start player two) 297 631 T
(set id2 $spawn_id) 115.2 617.5 T
(expect "Chess\134r\134n") 115.2 604 T
(for {} {1} {} {) 115.2 577 T
(send_move) 162 563.5 T
(read_move) 162 550 T
(set spawn_id $id1) 162 536.5 T
(send_move) 162 509.5 T
(read_move) 162 496 T
(set spawn_id $id2) 162 482.5 T
(}) 115.2 469 T
0 F
0.1 (Some applications are not like a chess game where players alternate moves in lock step.  The fol-) 72 445.5 P
0.26 (lowing script implements a) 72 431.5 P
1 F
0.26 (spoofer) 206.31 431.5 P
0 F
0.26 (.  It will control a terminal so that a user will be able to log in) 241.63 431.5 P
1.02 (and work normally) 72 417.5 P
1.02 (.  However) 164.54 417.5 P
1.02 (, whenever the system prompts for either) 219.06 417.5 P
4 F
2.46 (password) 425.42 417.5 P
0 F
1.02 ( or) 482.98 417.5 P
4 F
2.46 (login) 501.02 417.5 P
0 F
1.02 (,) 537 417.5 P
2 F
0.06 (expect) 72 403.5 P
0 F
0.06 ( begins recording keystrokes until the user presses return.  This ef) 104.63 403.5 P
0.06 (fectively collects just the) 420.22 403.5 P
-0.26 (logins and passwords of a user without the usual spoofer problem of seeing) 72 389.5 P
4 F
-0.63 (Incorrect pass-) 432.69 389.5 P
-0.07 (word \320 try again) 72 375.5 P
0 F
-0.03 (.  Plus, if the user connects to another host, those additional logins will be) 186.93 375.5 P
(recorded also!) 72 361.5 T
0 10 Q
(2) 140.27 366.3 T
4 12 Q
(spawn tip /dev/tty17) 115.2 341.5 T
(;# open connection to) 342 341.5 T
(set tty $spawn_id) 115.2 328 T
(;# tty to be spoofed) 342 328 T
(spawn login) 115.2 301 T
(;# open connection to) 342 301 T
(set login $spawn_id) 115.2 287.5 T
(;# login process) 342 287.5 T
(log_user 0) 115.2 260.5 T
(for {} {1} {} {) 115.2 233.5 T
(set ready [select $tty $login]) 162 220 T
(case $login in $ready {) 162 206.5 T
(set spawn_id $login) 207 193 T
(expect  {"*password*" "*login*"} {) 207 179.5 T
(send_user $expect_match) 252 166 T
(set log 1) 252 152.5 T
(} "*") 207 139 T
(;# ignore everything else) 297 139 T
(set spawn_id $tty; send $expect_match) 207 125.5 T
(}) 162 112 T
72 76 540 96.09 C
72 83.99 203.98 83.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 9 Q
0 X
0 K
(2.  The usual defense against a spoofer is to disallow write access so that the spoofer cannot open public terminals to begin with.) 72 70 T
FMENDPAGE
%%EndPage: "10" 9
%%Page: "9" 9
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
72 36 540 47.95 R
V
0 10 Q
0 X
(expect: Scripts for Controlling Interactive Processes) 295.54 39.95 T
0 12 Q
(9) 534 39.95 T
72 63 540 720 R
7 X
V
4 F
0 X
("*UNREF FILE*CLEAR?") 207 712 T
({send "y\134r"} \134) 387 712 T
("*BAD INODE*FIX?") 207 698.5 T
({send "y\134r"} \134) 387 698.5 T
("*? ") 207 685 T
({send "n\134r"}) 387 685 T
(}) 115.2 671.5 T
0 F
0.1 (In the next version, the two questions are answered dif) 72 648 P
0.1 (ferently) 334.52 648 P
0.1 (.  Also, if the script sees something) 371.04 648 P
1.41 (it doesn\325) 72 634 P
1.41 (t understand, it executes the) 114.84 634 P
5 11 Q
1.44 (interact) 258.48 634 P
0 12 Q
1.41 ( command which passes control back to the user) 294.51 634 P
1.41 (.) 537 634 P
1.2 (The user keystrokes go directly to) 72 620 P
2 F
1.2 (fsck) 245.1 620 P
0 F
1.2 (.  When done, the user can exit or return control to the) 265.76 620 P
0.15 (script, here triggered by pressing the plus key) 72 606 P
0.15 (.  If control is returned to the script, it continues au-) 290.81 606 P
(tomated processing where it left of) 72 592 T
(f.) 238.66 592 T
4 F
(for {} {1} {} {) 115.2 572 T
(expect \134) 162 558.5 T
(eof) 207 545 T
(break \134) 387 545 T
("*UNREF FILE*CLEAR?") 207 531.5 T
({send "y\134r"} \134) 387 531.5 T
("*BAD INODE*FIX?") 207 518 T
({send "n\134r"} \134) 387 518 T
("*? ") 207 504.5 T
({interact +}) 387 504.5 T
(}) 115.2 491 T
0 F
-0.23 (W) 72 467.5 P
-0.23 (ithout) 82.84 467.5 P
2 F
-0.23 (expect) 113.61 467.5 P
0 F
-0.23 (,) 146.24 467.5 P
2 F
-0.23 (fsck) 152.01 467.5 P
0 F
-0.23 ( can be run non-interactively only with very reduced functionality) 172.66 467.5 P
-0.23 (.  It is bare-) 485.95 467.5 P
0.5 (ly programmable and yet it is the most critical of system administration tools.  Many other tools) 72 453.5 P
0.95 (have similarly de\336cient user interfaces.  In fact, the lar) 72 439.5 P
0.95 (ge number of these is precisely what in-) 341.81 439.5 P
(spired the original development of) 72 425.5 T
2 F
(expect) 240.22 425.5 T
0 F
(.) 272.85 425.5 T
3 16 Q
(8.  Controlling multiple processes: job control) 108 384.83 T
2 12 Q
-0.21 (expect) 72 359.5 P
0 F
-0.21 (\325) 104.63 359.5 P
-0.21 (s concept of job control \336nesses some of the usual implementation dif) 107.97 359.5 P
-0.21 (\336culties.  T) 440.86 359.5 P
-0.21 (wo issues) 493.91 359.5 P
0.5 (are involved: The \336rst is how) 72 345.5 P
2 F
0.5 (expect) 218.91 345.5 P
0 F
0.5 ( handles) 251.54 345.5 P
1 F
0.5 (classic) 295.18 345.5 P
0 F
0.5 ( job control, such as occurs when you press) 327.82 345.5 P
5 11 Q
(^Z) 72 331.5 T
0 12 Q
( at the terminal.  The second is how) 83.86 331.5 T
2 F
(expect) 257.75 331.5 T
0 F
( handles multiple processes.) 290.38 331.5 T
0.54 (The answer to the \336rst issue is:  Ignore it.) 72 307.5 P
2 F
0.54 (expect) 282.48 307.5 P
0 F
0.54 ( doesn\325) 315.12 307.5 P
0.54 (t understand anything about classic job) 350.42 307.5 P
0.37 (control.  For example, if you spawn a program and then send it a) 72 293.5 P
5 11 Q
0.38 (^Z) 390.32 293.5 P
0 12 Q
0.37 (, it will stop \050courtesy of the) 402.18 293.5 P
(pty driver\051 and) 72 279.5 T
2 F
(expect) 146.27 279.5 T
0 F
( will wait forever) 178.91 279.5 T
(.) 261.18 279.5 T
0.16 (In practice, however) 72 255.5 P
0.16 (, this is not a problem.  There is no reason for an) 170.08 255.5 P
2 F
0.16 (expect) 407.65 255.5 P
0 F
0.16 ( script to ever send a) 440.28 255.5 P
5 11 Q
0.68 (^Z) 72 241.5 P
0 12 Q
0.67 ( to a process.  It doesn\325) 83.86 241.5 P
0.67 (t have to) 198.57 241.5 P
1 F
0.67 (stop) 244.88 241.5 P
0 F
0.67 ( a process, per se.) 264.87 241.5 P
2 F
0.67 (expect) 359.46 241.5 P
0 F
0.67 ( simply ignores a process, and) 392.09 241.5 P
(turns its attention elsewhere.  This is) 72 227.5 T
2 F
(expect) 250.56 227.5 T
0 F
(\325) 283.19 227.5 T
(s idea of job control and it works quite well.) 286.53 227.5 T
0.01 (The user view of this is as follows:  When a process is started by) 72 203.5 P
5 11 Q
0.01 (spawn) 385.54 203.5 P
0 12 Q
0.01 (, the variable) 417.29 203.5 P
5 11 Q
0.01 (spawn_id) 482.59 203.5 P
0 12 Q
0.01 ( is) 529 203.5 P
0.14 (set to a descriptor referring to that process.  The process described by) 72 189.5 P
5 11 Q
0.14 (spawn_id) 409.56 189.5 P
0 12 Q
0.14 ( is considered) 455.97 189.5 P
1 F
0.14 (the) 525.34 189.5 P
0.04 (curr) 72 175.5 P
0.04 (ent pr) 92.21 175.5 P
0.04 (ocess) 120.12 175.5 P
0 F
0.04 (.  \050This descriptor is exactly the pty \336le descriptor) 146.1 175.5 P
0.04 (, although the user treats it as an) 385.16 175.5 P
0.4 (opaque object.\051) 72 161.5 P
5 11 Q
0.41 (expect) 153.13 161.5 P
0 12 Q
0.4 ( and) 185.49 161.5 P
5 11 Q
0.41 (send) 209.61 161.5 P
0 12 Q
0.4 ( interact only with the current process.  Thus, to switch jobs all) 233.42 161.5 P
(that is necessary is to assign the descriptor of another process to the variable) 72 147.5 T
5 11 Q
(spawn_id) 441.06 147.5 T
0 12 Q
(.) 487.47 147.5 T
0.92 (Here is an example showing how job control can be used to have two) 72 123.5 P
2 F
0.92 (chess) 420.59 123.5 P
0 F
0.92 ( processes interact.) 447.24 123.5 P
-0.17 (After spawning them, one process is told to move \336rst.  In a loop, a move is sent from one process) 72 109.5 P
0.65 (to the other) 72 95.5 P
0.65 (, and vice versa.  The) 127.45 95.5 P
2 F
0.65 (r) 236.6 95.5 P
0.65 (ead_move) 241.71 95.5 P
0 F
0.65 ( and) 293.01 95.5 P
2 F
0.65 (send_move) 317.62 95.5 P
0 F
0.65 ( procedures are left as an exercise) 374.26 95.5 P
(for the reader) 72 81.5 T
(.  \050They are actually very easy to write, but too long to include here.\051) 135.94 81.5 T
FMENDPAGE
%%EndPage: "9" 8
%%Page: "8" 8
612 792 0 FMBEGINPAGE
72 36 504 47.95 R
7 X
0 K
V
0 12 Q
0 X
(8) 72 39.95 T
0 10 Q
(Don Libes) 108 39.95 T
72 740.81 504 756 R
7 X
V
72 63 540 720 R
V
4 12 Q
0 X
(send "anonymous\134r") 115.2 712 T
(expect "*Password:*") 115.2 698.5 T
(send [exec whoami]) 115.2 685 T
(expect "*ok*ftp>*") 115.2 671.5 T
(send "get [index $argv 2]\134r") 115.2 658 T
(expect "*ftp>*") 115.2 644.5 T
0 F
0.54 (Dedicated programs have been written to perform) 72 621 P
1 F
0.54 (backgr) 317.93 621 P
0.54 (ound ftp) 350.79 621 P
0 F
0.54 (.  While they use the same un-) 390.98 621 P
0.92 (derlying mechanism as) 72 607 P
2 F
0.92 (expect) 188.36 607 P
0 F
0.92 (, their programmability leaves much to be desired.  Since) 220.99 607 P
2 F
0.92 (expect) 507.36 607 P
0 F
(provides a high-level language, you can customize it to your needs.  For example, you can add:) 72 593 T
(\245) 108 573 T
1.47 (persistence \320 if the connection or transfer fails, you can retry every minute,) 126 573 P
-0.12 (hour) 126 559 P
-0.12 (, or even aperiodic intervals that depend on other factors such as user load.) 147.5 559 P
(\245) 108 539 T
-0.19 (noti\336cation \320 you can be noti\336ed upon transmission via) 126 539 P
2 F
-0.19 (mail) 393.83 539 P
0 F
-0.19 (,) 416.49 539 P
2 F
-0.19 (write) 422.3 539 P
0 F
-0.19 ( or any oth-) 448.93 539 P
(er mechanism of your choice.  Y) 126 525 T
(ou can even be noti\336ed of failure.) 281.67 525 T
(\245) 108 505 T
0.12 (initialization \320 each user can have their own initialization \336le \050e.g.,) 126 505 P
2 F
0.12 (.ftpr) 451.04 505 P
0.12 (c) 473.8 505 P
0 F
0.12 (\051 in a) 479.12 505 P
(high-level language for further customization, much like) 126 491 T
2 F
(csh) 400.47 491 T
0 F
( uses) 417.13 491 T
2 F
(.cshr) 443.78 491 T
(c) 468.54 491 T
0 F
(.) 473.87 491 T
2 F
0.4 (expect) 72 467 P
0 F
0.4 ( could do many more sophisticated things.  For example, it could use McGill University\325) 104.63 467 P
0.4 (s) 535.33 467 P
-0.02 (Archie system.  Archie is an anonymous) 72 453 P
2 F
-0.02 (telnet) 269.06 453 P
0 F
-0.02 ( service that provides access to a database describ-) 297.7 453 P
0.02 (ing the contents of the entire Internet\325) 72 439 P
0.02 (s anonymous) 252.65 439 P
2 F
0.02 (ftp) 318.65 439 P
0 F
0.02 ( repositories.  Using this, a script could ask) 333.31 439 P
-0.28 (Archie where a \336le is, and then download it to your system.  This requires only a few more lines at) 72 425 P
(the beginning of the) 72 411 T
2 F
(ftp) 171.27 411 T
0 F
( script above.) 185.93 411 T
0.75 (No known background-) 72 387 P
2 F
0.75 (ftp) 187.4 387 P
0 F
0.75 ( programs provide even one of the features mentioned above, no less) 202.06 387 P
1 (all of them.  In) 72 373 P
2 F
1 (expect) 150.94 373 P
0 F
1 (, the implementation is trivial.  Persistence requires a loop in the) 183.58 373 P
2 F
1 (expect) 507.37 373 P
0 F
0.36 (script.  Noti\336cation is an) 72 359 P
5 11 Q
0.36 (exec) 195.04 359 P
0 12 Q
0.36 ( of) 218.25 359 P
2 F
0.36 (mail) 234.95 359 P
0 F
0.36 ( or) 257.6 359 P
2 F
0.36 (write) 274.3 359 P
0 F
0.36 (.  An initialization \336le can be read with one com-) 300.94 359 P
(mand \050) 72 345 T
4 F
(source .ftprc) 105.64 345 T
0 F
( does just the right thing\051 and can use any) 199.19 345 T
2 F
(expect) 401.72 345 T
0 F
( command.) 434.36 345 T
0.29 (Although these features can be added by hooks into existing programs, there is still no guarantee) 72 321 P
0.37 (that everyone\325) 72 307 P
0.37 (s needs will have been met.  The only way to have such con\336dence is to provide a) 140.65 307 P
0.21 (general-purpose language.  A good solution would be to integrate T) 72 293 P
0.21 (cl, itself, directly into) 398.04 293 P
2 F
0.21 (ftp) 504.82 293 P
0 F
0.21 ( and) 519.47 293 P
0.2 (other applications.  Indeed, that was the original intent of T) 72 279 P
0.2 (cl\325) 357.67 279 P
0.2 (s design.  Until this is done,) 369.67 279 P
2 F
0.2 (expect) 507.37 279 P
0 F
(provides much of the bene\336t of T) 72 265 T
(cl to many applications without any rewriting at all.) 231.72 265 T
3 16 Q
(7.  fsck) 108 224.33 T
2 12 Q
-0.14 (fsck) 72 199 P
0 F
-0.14 ( is yet another example of a program with an inadequate user interface.) 92.65 199 P
2 F
-0.14 (fsck) 440.33 199 P
0 F
-0.14 ( provides almost) 460.98 199 P
0.37 (no way of answering questions in advance.  About all you can say is \322answer everything yes\323 or) 72 185 P
(\322answer everything no\323.) 72 171 T
0.33 (The following fragment shows how a script can automatically answer some questions \322yes\323, and) 72 147 P
-0.24 (the rest \322no\323.  The script begins by spawning) 72 133 P
2 F
-0.24 (fsck) 289.02 133 P
0 F
-0.24 (, and then answering \322yes\323 to two types of ques-) 309.67 133 P
(tions, and \322no\323 to everything else.) 72 119 T
4 F
(for {} {1} {} {) 115.2 99 T
(expect \134) 162 85.5 T
(eof) 207 72 T
(break \134) 387 72 T
FMENDPAGE
%%EndPage: "8" 7
%%Page: "7" 7
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
72 36 540 47.95 R
V
0 10 Q
0 X
(expect: Scripts for Controlling Interactive Processes) 295.54 39.95 T
0 12 Q
(7) 534 39.95 T
72 63 540 720 R
7 X
V
0 X
1.76 (As an example, the BSD adventure game) 72 712 P
2 F
1.76 (r) 284.87 712 P
1.76 (ogue) 289.98 712 P
0 F
1.76 ( runs in raw mode, and assumes a character) 313.97 712 P
1.76 (-) 536.01 712 P
2.38 (ad) 72 698 P
2.38 (dressable terminal exists at the other end of the connection.) 83.32 698 P
2 F
2.38 (expect) 399.94 698 P
0 F
2.38 ( can actually be pro-) 432.57 698 P
(grammed to play) 72 684 T
2 F
(r) 156.28 684 T
(ogue) 161.39 684 T
0 F
( using the human interface that comes with it.) 185.37 684 T
2 F
0.28 (r) 72 660 P
0.28 (ogue) 77.11 660 P
0 F
0.28 ( is an adventure game which presents you with a player that has various physical attributes) 101.1 660 P
-0.12 (such as a strength rating.  Most of the time, the strength is 16, but every so often \320  maybe one out) 72 646 P
-0.19 (of 20 games \320  you get an unusually good strength of 18.  A lot of) 72 632 P
2 F
-0.19 (r) 387.92 632 P
-0.19 (ogue) 393.03 632 P
0 F
-0.19 ( players know this, but no) 417.02 632 P
0.76 (one in their right mind restarts the game 20 times to \336nd those really good con\336gurations.  The) 72 618 P
(following script does it for you.) 72 604 T
4 F
(for {} {1} {} {) 115.2 584 T
(spawn rogue) 162 570.5 T
(expect) 162 557 T
("*Str: 18*" break \134) 207 557 T
("*Str: 16*") 207 543.5 T
(close) 162 530 T
(wait) 162 516.5 T
(}) 115.2 503 T
(interact) 115.2 489.5 T
0 F
-0.01 (The \336rst line is a) 72 466 P
5 11 Q
-0.01 (for) 155.59 466 P
0 12 Q
-0.01 ( loop, with the same control ar) 168.41 466 P
-0.01 (guments as in C.) 314.4 466 P
2 F
-0.01 (r) 400.34 466 P
-0.01 (ogue) 405.45 466 P
0 F
-0.01 ( is started, and then the) 429.43 466 P
0.47 (strength checked to see if it is 18 or 16.  If it is 16, the dialogue is terminated via) 72 452 P
5 11 Q
0.48 (close) 470.56 452 P
0 12 Q
0.47 ( and) 496.2 452 P
5 11 Q
0.48 (wait) 520.47 452 P
0 12 Q
1.39 (\050which respectively closes the connection to the pty and waits for the process to exit\051.) 72 438 P
2 F
1.39 (r) 510.9 438 P
1.39 (ogue) 516.01 438 P
0 F
1.65 (reads an end-of-\336le and goes away) 72 424 P
1.65 (, after which the loop is restarted, creating a new game of) 246.35 424 P
2 F
(r) 72 410 T
(ogue) 77.11 410 T
0 F
( to test.) 101.1 410 T
0.43 (When a strength of 18 is found, control breaks out of the loop and drops down to the last line of) 72 386 P
(the script.) 72 372 T
5 11 Q
(interact) 125.3 372 T
0 12 Q
( passes control to the user so that they can play this particular game.) 161.32 372 T
-0.22 (Imagine running this script.  What you will actually see is 20 or 30 initial con\336gurations \337y across) 72 348 P
0.85 (your screen in less than a second, \336nally stopping with a great game for you to play) 72 334 P
0.85 (.  The only) 485.49 334 P
(way to) 72 320 T
2 F
(play) 107.31 320 T
0 F
( rogue better is under the debugger!) 129.3 320 T
0.76 (It is important to realize that) 72 296 P
2 F
0.76 (r) 215.82 296 P
0.76 (ogue) 220.93 296 P
0 F
0.76 ( is a graphics program which uses Curses.) 244.92 296 P
2 F
0.76 (expect) 458.98 296 P
0 F
0.76 ( program-) 491.61 296 P
-0.07 (mers must understand that Curses does not necessarily create screens in an intuitive manner) 72 282 P
-0.07 (.  For-) 510.48 282 P
-0.12 (tunately) 72 268 P
-0.12 (, it is not a problem in this example.  A future enhancement to) 109.86 268 P
2 F
-0.12 (expect) 408.59 268 P
0 F
-0.12 ( may include a built-) 441.23 268 P
(in terminal emulator in order to support the understanding of character graphics regions.) 72 254 T
3 16 Q
(6.  ftp) 108 213.33 T
0 12 Q
1.31 (The \336rst script actually written with) 72 188 P
2 F
1.31 (expect) 255.06 188 P
0 F
1.31 ( did not print out) 287.7 188 P
4 F
3.14 (hello world) 377.86 188 P
0 F
1.31 (.  Instead, it did) 460.15 188 P
1.06 (something much more useful.  It ran) 72 174 P
2 F
1.06 (ftp) 256.62 174 P
0 F
1.06 ( without user interaction.) 271.27 174 P
2 F
1.06 (ftp) 402.48 174 P
0 F
1.06 ( is a program which per-) 417.14 174 P
0 (forms \336le transfer over TCP/IP networks such as the Internet.  The ubiquitous implementation re-) 72 160 P
(quires the user to provide input for all but the most simple uses.) 72 146 T
-0.06 (The script below retrieves a \336le from a host using anonymous) 72 122 P
2 F
-0.06 (ftp) 370.77 122 P
0 F
-0.06 (.  The hostname is the \336rst ar) 385.43 122 P
-0.06 (gu-) 524.01 122 P
(ment to the script.  The \336lename is the second ar) 72 108 T
(gument.) 304.62 108 T
4 F
(spawn ftp [index $argv 1]) 115.2 88 T
(expect "*Name*") 115.2 74.5 T
FMENDPAGE
%%EndPage: "7" 6
%%Page: "6" 6
612 792 0 FMBEGINPAGE
72 36 504 47.95 R
7 X
0 K
V
0 12 Q
0 X
(6) 72 39.95 T
0 10 Q
(Don Libes) 108 39.95 T
72 740.81 504 756 R
7 X
V
72 63 540 720 R
V
4 12 Q
0 X
("*Retype new password:") 162 712 T
(send "[index $argv 3]\134r") 115.2 698.5 T
(expect timeout) 115.2 685 T
({exit 2}) 342 685 T
(\134) 432 685 T
("*Mismatch*") 162 671.5 T
({exit 6}) 342 671.5 T
(\134) 432 671.5 T
("*Password unchanged*}") 162 658 T
({exit 7}) 342 658 T
(\134) 432 658 T
("\134r\134n") 162 644.5 T
(expect timeout) 115.2 631 T
({exit 2}) 342 631 T
(\134) 432 631 T
("*") 162 617.5 T
({exit 6}) 342 617.5 T
(\134) 432 617.5 T
(eof) 162 604 T
0 F
0.23 (This script exits with a numeric indication of what happened. 0 indicates) 72 580.5 P
2 F
0.23 (passwd) 426.16 580.5 P
0 F
0.23 ( ran normally) 463.48 580.5 P
0.23 (, 1) 527.78 580.5 P
-0.12 (that it died unexpectedly) 72 566.5 P
-0.12 (, 2 that it locked up, and so on.  Numbers are used for simplicity \320) 189.12 566.5 P
2 F
-0.12 (expect) 507.36 566.5 P
0 F
0.74 (could just as easily pass back strings, including any messages from the spawned program itself.) 72 552.5 P
0.61 (Indeed, it is typical to save the entire interaction to a \336le, deleting it only if the command under) 72 538.5 P
(test behaves as expected.  Otherwise the log is available for further examination.) 72 524.5 T
0.49 (This) 72 500.5 P
2 F
0.49 (passwd) 96.81 500.5 P
0 F
0.49 ( testing script is designed to be driven by another script.  This second script reads a) 134.13 500.5 P
0.14 (\336le of ar) 72 486.5 P
0.14 (guments and expected results.  For each set, it calls the \336rst script and then compares the) 112.7 486.5 P
0.24 (results to the expected results.  \050Since this task is non-interactive, a plain old shell can be used to) 72 472.5 P
(interpret this second script.\051  For example, a data \336le for) 72 458.5 T
2 F
(passwd) 344.8 458.5 T
0 F
( could look like this:) 382.13 458.5 T
4 F
(passwd.exp) 117 438.5 T
(3) 225 438.5 T
(bogus) 279 438.5 T
(-) 333 438.5 T
(-) 441 438.5 T
(passwd.exp) 117 425 T
(0) 225 425 T
(fred) 279 425 T
(abledabl) 333 425 T
(abledabl) 441 425 T
(passwd.exp) 117 411.5 T
(5) 225 411.5 T
(fred) 279 411.5 T
(abcdefghijklm) 333 411.5 T
(-) 441 411.5 T
(passwd.exp) 117 398 T
(5) 225 398 T
(fred) 279 398 T
(abc) 333 398 T
(-) 441 398 T
(passwd.exp) 117 384.5 T
(6) 225 384.5 T
(fred) 279 384.5 T
(foobar) 333 384.5 T
(bar) 441 384.5 T
(passwd.exp) 117 371 T
(4) 225 371 T
(fred) 279 371 T
(^C) 333 371 T
(-) 441 371 T
0 F
0.09 (The \336rst \336eld names the regression script to be run.  The second \336eld is the exit value that should) 72 347.5 P
0.42 (match the result of the script.  The third \336eld is the username.  The fourth and \336fth \336elds are the) 72 333.5 P
1.08 (passwords to be entered when prompted.  The hyphen is just a placeholder for values that will) 72 319.5 P
-0.19 (never be read.  In the \336rst test,) 72 305.5 P
4 F
-0.47 (bogus) 218.99 305.5 P
0 F
-0.19 ( is a username that is invalid, to which) 254.97 305.5 P
2 F
-0.19 (passwd) 440.44 305.5 P
0 F
-0.19 ( will respond) 477.76 305.5 P
4 F
0.32 (No such user) 72 291.5 P
0 F
0.13 (.) 158.34 291.5 P
2 F
0.13 (expect) 167.6 291.5 P
0 F
0.13 ( will exit the script with a value of 3, which also appears as the second) 200.23 291.5 P
-0.15 (element in the \336rst line of the regression suite data \336le.  In the last test, a control-C is actually sent) 72 277.5 P
(to the program to verify that it aborts gracefully) 72 263.5 T
(.) 300.39 263.5 T
0.68 (In this way) 72 239.5 P
0.68 (,) 125.87 239.5 P
2 F
0.68 (expect) 132.54 239.5 P
0 F
0.68 ( can be used for testing and debugging interactive software, such as required) 165.18 239.5 P
0.19 (by IEEE POSIX 1003.2 \050Shells and T) 72 225.5 P
0.19 (ools\051 conformance testing.  This is described in more detail) 253.84 225.5 P
(by Libes [6].) 72 211.5 T
3 16 Q
(5.  rogue & pseudo-terminals) 108 170.83 T
0 12 Q
0.58 (UNIX users are familiar with processes connected to other processes by pipes \050e.g. a shell) 72 145.5 P
0.58 (pipe-) 515.35 145.5 P
0.41 (line) 72 131.5 P
0.41 (\051.) 89.99 131.5 P
2 F
0.41 (expect) 103.8 131.5 P
0 F
0.41 ( uses ptys \050pseudo-terminals\051 to connect spawned processes.  Ptys provide terminal) 136.43 131.5 P
(semantics so that programs think they are performing I/O with a real terminal.) 72 117.5 T
FMENDPAGE
%%EndPage: "6" 5
%%Page: "5" 5
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
72 36 540 47.95 R
V
0 10 Q
0 X
(expect: Scripts for Controlling Interactive Processes) 295.54 39.95 T
0 12 Q
(5) 534 39.95 T
72 63 540 720 R
7 X
V
0 X
1.19 (this way for security reasons, but the result is that there is no way to test) 72 712 P
2 F
1.19 (passwd) 439.87 712 P
0 F
1.19 ( non-interac-) 477.2 712 P
-0.14 (tively) 72 698 P
-0.14 (.  It is ironic that a program so critical to system security has no way of being reliably tested.) 98.54 698 P
2 F
0.15 (passwd) 72 674 P
0 F
0.15 ( takes a username as an ar) 109.32 674 P
0.15 (gument, and interactively prompts for a password.  The follow-) 234.55 674 P
(ing) 72 660 T
2 F
(expect) 90.33 660 T
0 F
( script  takes a username and password as ar) 122.96 660 T
(guments, and can be run non-interactively:) 334.24 660 T
4 F
(spawn passwd [index $argv 1]) 115.2 640 T
(set password [index $argv 2]) 115.2 626.5 T
(expect "*password:") 115.2 613 T
(send "$password\134r") 115.2 599.5 T
(expect "*password:") 115.2 586 T
(send "$password\134r") 115.2 572.5 T
(expect eof) 115.2 559 T
0 F
0.01 (The \336rst line starts the) 72 535.5 P
2 F
0.01 (passwd) 182.32 535.5 P
0 F
0.01 ( program, with the username passed as an ar) 219.65 535.5 P
0.01 (gument.  The next line) 431.69 535.5 P
1.45 (saves the password in a variable for convenience.  Like the shell, variables do not have to be) 72 521.5 P
(declared in advance.) 72 507.5 T
0.47 (In the third line,) 72 483.5 P
5 11 Q
0.48 (expect) 154.16 483.5 P
0 12 Q
0.47 ( looks for the pattern) 186.53 483.5 P
4 F
1.13 (password) 291.8 483.5 P
0 F
0.47 (:.  The asterisk allows it to match other) 349.37 483.5 P
1.09 (data in the input, and is a useful shortcut to avoid specifying everything in detail.  There is no) 72 469.5 P
(action speci\336ed, so) 72 455.5 T
5 11 Q
(expect) 166.6 455.5 T
0 12 Q
( just waits until the pattern is found before continuing.) 198.97 455.5 T
0.68 (After receiving the prompt, the next line sends a password to the current process.  The) 72 431.5 P
4 F
1.64 (\134r) 499.27 431.5 P
0 F
0.68 ( indi-) 513.66 431.5 P
0.92 (cates a carriage-return.  \050All the \322usual\323 C conventions are supported.\051   There are two) 72 417.5 P
5 11 Q
0.93 (expect) 503.64 417.5 P
0 12 Q
0.92 (-) 536.01 417.5 P
5 11 Q
0.98 (send) 72 403.5 P
0 12 Q
0.96 ( sequences because) 95.82 403.5 P
2 F
0.96 (passwd) 194.28 403.5 P
0 F
0.96 ( asks the password to be typed twice as a spelling veri\336cation.) 231.61 403.5 P
0.03 (There is no point to this in a non-interactive) 72 389.5 P
2 F
0.03 (passwd) 285.83 389.5 P
0 F
0.03 (, but the script has to do this because) 323.16 389.5 P
2 F
0.03 (passwd) 502.68 389.5 P
0 F
(assumes it is interacting with a human that does not type consistently) 72 375.5 T
(.) 402.69 375.5 T
0.82 (Lastly) 72 351.5 P
0.82 (, the line) 101.2 351.5 P
4 F
1.96 (expect eof) 148.3 351.5 P
0 F
0.82 ( searches for the end-of-\336le in the output of) 222.22 351.5 P
2 F
0.82 (passwd) 441.08 351.5 P
0 F
0.82 ( and demon-) 478.41 351.5 P
0.14 (strates the use of) 72 337.5 P
1 F
0.14 (keywor) 155.83 337.5 P
0.14 (d patterns) 190.03 337.5 P
0 F
0.14 (.  Another such pattern is) 238.48 337.5 P
5 11 Q
0.14 (timeout) 362.9 337.5 P
0 12 Q
0.14 (, used to denote the failure of) 398.93 337.5 P
0.69 (any pattern to match in a given amount of time.  Here,) 72 323.5 P
5 11 Q
0.7 (eof) 343.39 323.5 P
0 12 Q
0.69 ( is necessary only because) 358.66 323.5 P
2 F
0.69 (passwd) 490.99 323.5 P
0 F
0.69 ( is) 528.32 323.5 P
0.69 (carefully written to check that all of its I/O succeeds, including the \336nal newline produced after) 72 309.5 P
(the password has been entered a second time.) 72 295.5 T
0.3 (This script is suf) 72 271.5 P
0.3 (\336cient to show the basic interaction of the) 152.32 271.5 P
2 F
0.3 (passwd) 358.6 271.5 P
0 F
0.3 ( command.  A more complete) 395.92 271.5 P
2.31 (script would verify other behaviors.  For example, the following script checks several other) 72 257.5 P
1.21 (aspects of the) 72 243.5 P
2 F
1.21 (passwd) 143.92 243.5 P
0 F
1.21 ( program.  Complete prompts are checked.  Correct handling of garbage) 181.24 243.5 P
1.05 (input is checked.  Process death, unusually slow response, or any other unexpected behavior is) 72 229.5 P
(also trapped.) 72 215.5 T
4 F
(spawn passwd [index $argv 1]) 115.2 195.5 T
(expect eof) 115.2 182 T
({exit 1}) 342 182 T
(\134) 432 182 T
(timeout) 162 168.5 T
({exit 2}) 342 168.5 T
(\134) 432 168.5 T
("*No such user.*") 162 155 T
({exit 3}) 342 155 T
(\134) 432 155 T
("*New password:") 162 141.5 T
(send "[index $argv 2]\134r") 115.2 128 T
(expect eof) 115.2 114.5 T
({exit 4}) 342 114.5 T
(\134) 432 114.5 T
(timeout) 162 101 T
({exit 2}) 342 101 T
(\134) 432 101 T
("*Password too long*") 162 87.5 T
({exit 5}) 342 87.5 T
(\134) 432 87.5 T
("*Password too short*") 162 74 T
({exit 5}) 342 74 T
(\134) 432 74 T
FMENDPAGE
%%EndPage: "5" 4
%%Page: "4" 4
612 792 0 FMBEGINPAGE
72 36 504 47.95 R
7 X
0 K
V
0 12 Q
0 X
(4) 72 39.95 T
0 10 Q
(Don Libes) 108 39.95 T
72 740.81 504 756 R
7 X
V
72 63 540 720 R
V
0 12 Q
0 X
1.05 (Characters can be individually quoted with a backslash.  Backslashes are also used to continue) 72 712 P
0.42 (statements, which otherwise are terminated at the end of a line.  This is inherent to T) 72 698 P
0.42 (cl.  T) 483.61 698 P
0.42 (cl also) 508.6 698 P
0.36 (continues scanning when there is an open brace or double-quote.  In addition, semicolons can be) 72 684 P
0.27 (used to separate multiple statements on a single line.  This sounds confusing, but is typical of in-) 72 670 P
(terpreters \050e.g.,) 72 656 T
2 F
(/bin/sh) 147.59 656 T
0 F
(\051.  Nonetheless, it is one of the less elegant aspects of T) 182.27 656 T
(cl.) 447.24 656 T
3 16 Q
(3.  callback) 108 615.33 T
0 12 Q
0.76 (It is surprising how little scripting is necessary to produce something useful.   Below is a script) 72 590 P
0.02 (that dials a phone.    It is used to reverse the char) 72 576 P
0.02 (ges so that long-distance phone calls are char) 305.91 576 P
0.02 (ged) 522.68 576 P
0.36 (to the computer) 72 562 P
0.36 (.  It is invoked as) 147.35 562 P
4 F
0.87 (expect callback.exp 12016442332) 234.48 562 P
0 F
0.36 ( where the script) 459.31 562 P
(is named) 72 548 T
2 F
(callback.exp) 117.97 548 T
0 F
( and +1 \050201\051 644-2332 is the phone number to be dialed.) 181.61 548 T
4 F
(# first give the user some time to logout) 118.2 528 T
(exec sleep 4) 115.2 514.5 T
(spawn tip modem) 115.2 501 T
(expect "*connected*") 115.2 487.5 T
(send "ATD[index $argv 1]\134r") 115.2 474 T
(# modem takes a while to connect) 115.2 460.5 T
(set timeout 60) 115.2 447 T
(expect "*CONNECT*") 115.2 433.5 T
0 F
-0.14 (The \336rst line is a comment.  The second illustrates how a UNIX command with no interaction can) 72 410 P
-0.2 (be called.) 72 396 P
4 F
-0.48 (sleep 4) 123.36 396 P
0 F
-0.2 ( will cause the program to block for four seconds, giving the user a chance to) 173.26 396 P
0.51 (logout since the modem will presumably call back to the same phone number that the user is al-) 72 382 P
(ready using.) 72 368 T
-0.26 (The next line starts) 72 344 P
2 F
-0.26 (tip) 165.58 344 P
0 F
-0.26 ( using) 179.57 344 P
5 11 Q
-0.26 (spawn) 211.05 344 P
0 12 Q
-0.26 ( so that) 242.8 344 P
2 F
-0.26 (tip) 279.67 344 P
0 F
-0.26 (\325) 293.67 344 P
-0.26 (s output can be read by) 297.01 344 P
5 11 Q
-0.26 (expect) 409.38 344 P
0 12 Q
-0.26 ( and its input written) 441.74 344 P
0.05 (by) 72 330 P
5 11 Q
0.05 (send) 87.04 330 P
0 12 Q
0.05 (.  Once) 110.86 330 P
2 F
0.05 (tip) 148.32 330 P
0 F
0.05 ( says it is connected, the modem is told to dial the number) 162.32 330 P
0.05 (.  \050The modem is as-) 441.14 330 P
0.91 (sumed to be Hayes compatible, but it is easy to expand the script to handle others.\051  No matter) 72 316 P
0.25 (what happens,) 72 302 P
2 F
0.25 (expect) 144.11 302 P
0 F
0.25 ( terminates.  If the call fails, it is possible for) 176.75 302 P
2 F
0.25 (expect) 397.03 302 P
0 F
0.25 ( to retry) 429.67 302 P
0.25 (, but that is not) 467.36 302 P
1.48 (the point here.  If the call succeeds,) 72 288 P
2 F
1.48 (getty) 256.38 288 P
0 F
1.48 ( will detect DTR on the line after) 281.69 288 P
2 F
1.48 (expect) 455.43 288 P
0 F
1.48 ( exits, and) 488.07 288 P
(prompt the user with) 72 274 T
4 F
(login:) 174.6 274 T
0 F
(.  \050Actual scripts usually do more error checking.\051) 217.78 274 T
0.87 (This script illustrates the use of command-line parameters, made available to the script as a list) 72 250 P
0.61 (named) 72 236 P
2 F
0.61 (argv) 107.59 236 P
0 F
0.61 ( \050in the same style as the C language\051.  In this case, element 1 is the phone number) 130.9 236 P
0.61 (.) 537 236 P
0.58 (The brackets cause the enclosed text to be evaluated as a command, and the result is substituted) 72 222 P
(for the original text.  This is similar to the way backquotes work in) 72 208 T
2 F
(csh) 395.46 208 T
0 F
(.) 412.12 208 T
(This script replaced a 60K program \050written in C\051 that did the same thing.) 72 184 T
3 16 Q
(4.  passwd & conformance testing) 108 143.33 T
0 12 Q
-0.01 (Earlier) 72 118 P
-0.01 (,) 104.15 118 P
2 F
-0.01 (passwd) 110.14 118 P
0 F
-0.01 ( was mentioned as a program that cannot be run without user interaction.) 147.46 118 P
2 F
-0.01 (passwd) 502.68 118 P
0 F
0.89 (ignores I/O redirection and cannot be embedded in a pipeline so that input comes from another) 72 104 P
0.65 (program or \336le.  It insists on performing all I/O directly with a real user) 72 90 P
0.65 (.) 423.81 90 P
2 F
0.65 (passwd) 434.1 90 P
0 F
0.65 ( was designed) 471.42 90 P
FMENDPAGE
%%EndPage: "4" 3
%%Page: "3" 3
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
72 36 540 47.95 R
V
0 10 Q
0 X
(expect: Scripts for Controlling Interactive Processes) 295.54 39.95 T
0 12 Q
(3) 534 39.95 T
72 63 540 720 R
7 X
V
5 11 Q
0 X
0.08 (continue) 72 712 P
0 12 Q
0.08 (, etc\051, and perform the usual math and string operations.  Of course, UNIX programs can) 113.53 712 P
0.05 (be called \050) 72 698 P
5 11 Q
0.05 (exec) 122.04 698 P
0 12 Q
0.05 (\051.  All of these facilities are available to any T) 145.25 698 P
0.05 (cl application.  T) 365.02 698 P
0.05 (cl is completely de-) 445.6 698 P
(scribed by Ousterhout [3][4].) 72 684 T
2 F
0.19 (expect) 72 660 P
0 F
0.19 ( is built on top of T) 104.63 660 P
0.19 (cl and provides additional commands.  The) 197.56 660 P
5 11 Q
0.19 (spawn) 408.75 660 P
0 12 Q
0.19 ( command invokes a) 440.5 660 P
-0.01 (UNIX program for interactive use.) 72 646 P
5 11 Q
-0.01 (send) 244.11 646 P
0 12 Q
-0.01 ( sends strings to a process.) 267.93 646 P
5 11 Q
-0.01 (expect) 401.09 646 P
0 12 Q
-0.01 ( waits for strings from) 433.45 646 P
0 (a process.) 72 632 P
5 11 Q
0 (expect) 125.28 632 P
0 12 Q
0 ( supports regular expressions and can wait for multiple strings at the same time,) 157.64 632 P
0.32 (executing a dif) 72 618 P
0.32 (ferent action for each string.) 143.7 618 P
5 11 Q
0.33 (expect) 287.17 618 P
0 12 Q
0.32 ( also understands exceptional conditions such) 319.54 618 P
(as timeout and end-of-\336le.) 72 604 T
0.44 (The) 72 580 P
5 11 Q
0.44 (expect) 94.08 580 P
0 12 Q
0.44 ( command is styled after T) 126.45 580 P
0.44 (cl\325) 256.04 580 P
0.44 (s) 268.03 580 P
5 11 Q
0.44 (case) 276.13 580 P
0 12 Q
0.44 ( command which matches a string against a num-) 299.34 580 P
0.66 (ber of other strings.  \050Whenever possible, new commands were modeled after existing T) 72 566 P
0.66 (cl com-) 503.04 566 P
0.22 (mands so that the language remained a coherent set of tools.\051  The following de\336nition of) 72 552 P
5 11 Q
0.23 (expect) 507.63 552 P
0 12 Q
(is paraphrased from the manual page [5]:) 72 538 T
5 11 Q
(expect) 72 514 T
1 12 Q
(patlist1 action1 patlist2 action2 . . .) 107.36 514 T
0 F
-0.18 (waits until one of the patterns matches the output of the current process, a speci\336ed time period) 85.54 494 P
(has passed, or an end-of-\336le is found.  If the \336nal) 85.54 480 T
1 F
(action) 324.36 480 T
0 F
( is null, it may be omitted.) 354.34 480 T
0.78 (Each) 85.54 462 P
1 F
0.78 (patlist) 113.29 462 P
0 F
0.78 ( consists of a single pattern or list of patterns.  If a pattern is matched, the corre-) 143.29 462 P
-0.04 (sponding action is executed.  The result of the action is returned from) 85.54 448 P
5 11 Q
-0.04 (expect) 421.51 448 P
0 12 Q
-0.04 (.  The exact string) 453.87 448 P
-0.02 (matched \050or read but unmatched, if a timeout occurred\051 is stored in the variable) 85.54 434 P
5 11 Q
-0.02 (expect_match) 468.61 434 P
0 12 Q
-0.02 (.) 537 434 P
-0.1 (If) 85.54 420 P
1 F
-0.1 (patlist) 96.42 420 P
0 F
-0.1 ( is) 126.41 420 P
5 11 Q
-0.1 (eof) 140.2 420 P
0 12 Q
-0.1 ( or) 155.48 420 P
5 11 Q
-0.1 (timeout) 171.26 420 P
0 12 Q
-0.1 (, the corresponding action is executed upon end-of-\336le or timeout, re-) 207.28 420 P
0.22 (spectively) 85.54 406 P
0.22 (.  The default timeout period is 10 seconds but may) 133.39 406 P
0.22 (, for example, be set to 30 by the) 381 406 P
(command) 85.54 392 T
4 F
(set timeout 30) 135.84 392 T
0 F
(.) 236.58 392 T
-0.25 (The following fragment is from a script that involves a login.) 85.54 374 P
5 11 Q
-0.26 (abort) 382 374 P
0 12 Q
-0.25 ( is a procedure de\336ned else-) 407.04 374 P
(where in the script, while the other actions use T) 85.54 360 T
(cl primitives similar to their C namesakes.) 317.86 360 T
4 F
(expect) 115.2 332.5 T
("*welcome*") 162 332.5 T
(break \134) 252 332.5 T
("*busy*") 162 319 T
({print busy; continue} \134) 252 319 T
("*failed*") 162 305.5 T
(abort \134) 252 305.5 T
(timeout) 162 292 T
(abort) 252 292 T
0 F
0.31 (Patterns are the usual C-shell-style regular expressions.  Patterns must match the entire output) 85.54 274.5 P
1.42 (of the current process since the previous) 85.54 260.5 P
5 11 Q
1.45 (expect) 291.69 260.5 P
0 12 Q
1.42 ( or) 324.05 260.5 P
5 11 Q
1.45 (interact) 342.89 260.5 P
0 12 Q
1.42 ( \050hence the reason most are sur-) 378.92 260.5 P
-0.23 (rounded by the) 85.54 246.5 P
5 11 Q
-0.24 (*) 159.78 246.5 P
0 12 Q
-0.23 ( wildcard\051.  However) 164.05 246.5 P
-0.23 (, more than 2000 bytes of output can force earlier bytes to) 264.78 246.5 P
(be \322for) 85.54 232.5 T
(gotten\323.  This may be changed by setting the variable) 118.95 232.5 T
5 11 Q
(match_max) 377.77 232.5 T
0 12 Q
(.) 434.55 232.5 T
5 11 Q
0.68 (expect) 72 208.5 P
0 12 Q
0.67 ( actually demonstrates the best and worst of) 104.37 208.5 P
2 F
0.67 (expect) 322.92 208.5 P
0 F
0.67 (.  In particular) 355.55 208.5 P
0.67 (, its \337exibility comes at) 425.03 208.5 P
0.29 (the price of an occasionally confusing syntax.  The pattern-lists can contain multiple patterns ex-) 72 194.5 P
0.38 (cept for keyword patterns \050e.g.,) 72 180.5 P
5 11 Q
0.39 (eof) 227.1 180.5 P
0 12 Q
0.38 (,) 242.37 180.5 P
5 11 Q
0.39 (timeout) 248.74 180.5 P
0 12 Q
0.38 (\051 which must appear by themselves.  This provides a) 284.77 180.5 P
0.89 (guaranteed way of distinguishing them.  However) 72 166.5 P
0.89 (, breaking up the lists requires a second scan,) 316.36 166.5 P
0.38 (which can interpret) 72 152.5 P
4 F
0.9 (\134r) 168.72 152.5 P
0 F
0.38 ( and) 183.11 152.5 P
4 F
0.9 (\134n) 207.18 152.5 P
0 F
0.38 ( as whitespace if not correctly quoted.  This is exacerbated by T) 221.57 152.5 P
0.38 (cl) 531.34 152.5 P
0.41 (providing two forms of string quoting: braces and double quotes.  \050If unambiguous, T) 72 138.5 P
0.41 (cl does not) 487.21 138.5 P
0.55 (require strings to be quoted at all.\051  There is a separate section in the) 72 124.5 P
2 F
0.55 (expect) 410.59 124.5 P
0 F
0.55 ( manual page to ex-) 443.23 124.5 P
-0.1 (plain this complexity) 72 110.5 P
-0.1 (.  Fortunately) 172.31 110.5 P
-0.1 (, a healthy set of examples seems to have held back complaints.) 235.63 110.5 P
0.73 (Nonetheless, this aspect will be probably be revisited in a future release.  For readability in this) 72 96.5 P
(paper) 72 82.5 T
(, scripts are presented as if double quotes suf) 98.16 82.5 T
(\336ced.) 312.78 82.5 T
FMENDPAGE
%%EndPage: "3" 2
%%Page: "2" 2
612 792 0 FMBEGINPAGE
72 36 504 47.95 R
7 X
0 K
V
0 12 Q
0 X
(2) 72 39.95 T
0 10 Q
(Don Libes) 108 39.95 T
72 740.81 504 756 R
7 X
V
72 63 540 720 R
V
3 16 Q
0 X
(1.  Introduction) 108 709.33 T
2 12 Q
0.46 (fsck) 72 684 P
0 F
0.46 (, the UNIX \336le system check program, can be run from a shell script only with the) 92.65 684 P
2 F
0.46 (\320y) 498.44 684 P
0 F
0.46 ( or) 510.44 684 P
2 F
0.46 (\320n) 527.33 684 P
0 F
(options.  The manual [1] de\336nes the) 72 670 T
2 F
(\320y) 247.88 670 T
0 F
( option as follows:) 259.88 670 T
1 F
-0.19 (\322Assume a yes r) 126 646 P
-0.19 (esponse to all questions asked by fsck; this should be used with) 203.27 646 P
0.54 (extr) 126 632 P
0.54 (eme caution, as it is a fr) 144.21 632 P
0.54 (ee license to continue, even after sever) 262.62 632 P
0.54 (e pr) 450.94 632 P
0.54 (oblems) 470.02 632 P
(ar) 126 618 T
(e encounter) 136.22 618 T
(ed.\323) 192.06 618 T
0 F
1.3 (The) 72 594 P
2 F
1.3 (\320n) 94.95 594 P
0 F
1.3 ( option is safer) 107.61 594 P
1.3 (, but almost uselessly so.  This kind of interface is inexcusably bad, yet) 181.99 594 P
-0.1 (many programs have the same style.) 72 580 P
2 F
-0.1 (ftp) 251.85 580 P
0 F
-0.1 (, a \336le transfer program, has an option that disables inter-) 266.51 580 P
(active prompting so that it can be run from a script.  But it provides no way to take alternative ac-) 72 566 T
(tion should an error occur) 72 552 T
(.) 195.24 552 T
2 F
0.06 (expect) 72 528 P
0 F
0.06 ( is a tool for controlling interactive programs.  It solves the) 104.63 528 P
2 F
0.06 (fsck) 390.85 528 P
0 F
0.06 ( problem, providing all the) 411.5 528 P
0.93 (interactive functionality non-interactively) 72 514 P
0.93 (.) 272.93 514 P
2 F
0.93 (expect) 283.78 514 P
0 F
0.93 ( is not speci\336cally designed for) 316.41 514 P
2 F
0.93 (fsck) 474.54 514 P
0 F
0.93 (, and can) 495.19 514 P
(handle) 72 500 T
2 F
(ftp) 106.97 500 T
0 F
(\325) 121.63 500 T
(s errors as well.) 124.96 500 T
0.08 (The problems with) 72 476 P
2 F
0.08 (fsck) 165.83 476 P
0 F
0.08 ( and) 186.49 476 P
2 F
0.08 (ftp) 209.95 476 P
0 F
0.08 ( illustrate a major limitation in the user interface of) 224.61 476 P
0.08 (fered by shells) 469.9 476 P
0.15 (such as) 72 462 P
2 F
0.15 (sh) 110.27 462 P
0 F
0.15 (,) 121.61 462 P
2 F
0.15 (csh) 127.75 462 P
0 F
0.15 (, and others \050which will generically be referred to as) 144.41 462 P
1 F
0.15 (the shell) 399.38 462 P
0 F
0.15 ( in the rest of the pa-) 439.84 462 P
0.07 (per\051.  The shell does not provide a way of reading output and writing input from a program.  This) 72 448 P
0.65 (means the shell can run) 72 434 P
2 F
0.65 (fsck) 190.81 434 P
0 F
0.65 ( but only by missing out on some of its useful features.  Some pro-) 211.47 434 P
0.13 (grams cannot be run at all.   For example,) 72 420 P
2 F
0.13 (passwd) 275.81 420 P
0 F
0.13 ( cannot be run without a user interactively sup-) 313.13 420 P
-0.16 (plying the input.  Similar programs that cannot be automated in a shell script are) 72 406 P
2 F
-0.16 (telnet) 458.04 406 P
0 F
-0.16 (,) 486.68 406 P
2 F
-0.16 (crypt) 492.52 406 P
0 F
-0.16 (,) 519.83 406 P
2 F
-0.16 (su) 525.67 406 P
0 F
-0.16 (,) 537 406 P
2 F
-0.17 (rlogin) 72 392 P
0 F
-0.17 (, etc.  A lar) 102.65 392 P
-0.17 (ge number of application programs are written with the same fault of demanding) 155.03 392 P
(user input.) 72 378 T
2 F
0.89 (expect) 72 354 P
0 F
0.89 ( was designed speci\336cally to interact with) 104.63 354 P
1 F
0.89 (interactive) 314.39 354 P
0 F
0.89 ( programs.  An) 365.69 354 P
2 F
0.89 (expect) 444.19 354 P
0 F
0.89 ( programmer) 476.83 354 P
-0.2 (can write a script describing the dialogue.  Then the) 72 340 P
2 F
-0.2 (expect) 321.43 340 P
0 F
-0.2 ( program can run the \322interactive\323 pro-) 354.06 340 P
-0.05 (gram non-interactively) 72 326 P
-0.05 (.  W) 180.75 326 P
-0.05 (riting scripts for interactive programs is as simple as writing scripts for) 200.48 326 P
0.36 (non-interactive programs.) 72 312 P
2 F
0.36 (expect) 202.97 312 P
0 F
0.36 ( can also be used to automate parts of a dialogue, since control) 235.61 312 P
(can be passed from the script to the keyboard and vice versa.) 72 298 T
3 16 Q
(2.  A brief overview of expect) 108 257.33 T
0 12 Q
0.05 (The implementation and philosophy of) 72 232 P
2 F
0.05 (expect) 261.8 232 P
0 F
0.05 ( is described at length by Libes [2].  Brie\337y) 294.44 232 P
0.05 (, scripts) 502.64 232 P
0.4 (are written in an interpreted language.  \050A library is available for C and C++ programmers but it) 72 218 P
-0.07 (will not be further discussed in this paper) 72 204 P
-0.07 (.\051  Commands are provided to create interactive process-) 269.08 204 P
1.29 (es and to read and write their output and input.) 72 190 P
2 F
1.29 (expect) 316.07 190 P
0 10 Q
1.08 (1) 348.71 194.8 P
0 12 Q
1.29 ( is named after the speci\336c command) 353.7 190 P
(which waits for output from a program.) 72 176 T
0.34 (The language of) 72 152 P
2 F
0.34 (expect) 153.96 152 P
0 F
0.34 ( is based on T) 186.59 152 P
0.34 (cl.  T) 253.74 152 P
0.34 (cl is actually a subroutine library) 278.57 152 P
0.34 (, which becomes em-) 437.05 152 P
1.26 (bedded into an application and provides language services.  The resulting language looks very) 72 138 P
-0.22 (much like a typical shell language.  There are commands to set variables \050) 72 124 P
5 11 Q
-0.23 (set) 424.13 124 P
0 12 Q
-0.22 (\051, control \337ow \050) 438.79 124 P
5 11 Q
-0.23 (if) 513.4 124 P
0 12 Q
-0.22 (,) 518.89 124 P
5 11 Q
-0.23 (for) 524.66 124 P
0 12 Q
-0.22 (,) 537 124 P
72 86 540 106.09 C
72 93.99 203.98 93.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 9 Q
0 X
0 K
(1.  For readability) 72 80 T
(,) 135.82 80 T
2 F
(times r) 140.31 80 T
(oman bold) 166.85 80 T
0 F
( is used for display of \336le or program names,) 207.56 80 T
5 8 Q
(helvetica) 371.06 80 T
0 9 Q
( for keyword or other language ele-) 402.61 80 T
(ments, and) 72 70 T
4 F
(courier) 113.19 70 T
0 F
( for literal strings or code fragments.) 150.94 70 T
FMENDPAGE
%%EndPage: "2" 1
%%Page: "1" 1
612 792 0 FMBEGINPAGE
72 36 540 47.95 R
7 X
0 K
V
72 63 540 720 R
V
1 18 Q
0 X
(expect: Scripts for Controlling Interactive Processes) 108 588 T
0 14 Q
(Don Libes) 180 552 T
0 12 Q
(National Institute of Standards and Technology) 270 552 T
(libes@cme.nist.gov) 270 536 T
72 482 540 518 C
108 500 504 500 2 L
3 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 12 Q
0 X
0 K
2.06 (ABSTRACT: Contemporary shells provide minimal control \050starting, stopping,) 108.14 474 P
-0.36 (etc\051 over programs, leaving interaction up to users.  This means that you cannot run) 108 460 P
-0.53 (some programs non-interactively, such as) 108 446 P
2 F
-0.53 (passwd) 307.86 446 P
0 F
-0.53 (.  Some programs can be run non-) 345.18 446 P
-0.36 (interactively but only with a loss of flexibility, such as) 108 432 P
2 F
-0.36 (fsck) 368.58 432 P
0 F
-0.36 (.  This is where the tool-) 389.23 432 P
-0.21 (building philosophy of UNIX begins to break down.) 108 418 P
2 F
-0.21 (expect) 363.27 418 P
0 F
-0.21 ( crosses this line, solv-) 395.91 418 P
(ing a number of long-standing problems in the UNIX environment.) 108 404 T
2 F
-0.41 (expect) 108.14 380 P
0 F
-0.41 ( uses Tcl as a language core.  In addition,) 140.78 380 P
2 F
-0.41 (expect) 337.86 380 P
0 F
-0.41 ( can use any UNIX program) 370.5 380 P
0.25 (whether or not it is interactive.  The result is a classic example of a little language) 108 366 P
0.66 (synergistically generating large power when combined with the rest of the UNIX) 108 352 P
(workbench.) 108 338 T
0.71 (Previous papers have described the implementation of) 108.14 314 P
2 F
0.71 (expect) 375.92 314 P
0 F
0.71 ( and compared it to) 408.56 314 P
-0.72 (other tools.  This paper concentrates on the language, primarily by presenting a vari-) 108 300 P
(ety of scripts.  Several scripts demonstrate brand-new features of) 108 286 T
2 F
(expect) 422.08 286 T
0 F
(.) 454.72 286 T
72 222 540 258 C
108 240 504 240 2 L
3 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 12 Q
0 X
0 K
(Keywords: expect; interaction; POSIX; programmed dialogue; shell; Tcl; UNIX) 108.14 262 T
0.09 (Reprint of) 108.14 106 P
1 F
0.09 (Computing Systems) 160.28 106 P
0 F
0.09 ( , Vol. 4, No. 2, University of California Press, Ber-) 254.65 106 P
(keley, CA, November 1991.) 108 92 T
FMENDPAGE
%%EndPage: "1" 0
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 20 -1
%%DocumentFonts: Times-Roman
%%+ Times-Italic
%%+ Times-Bold
%%+ Times-BoldItalic
%%+ Courier
%%+ Helvetica
