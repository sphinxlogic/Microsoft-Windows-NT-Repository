%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPCOLORc { 
		BITMAPTTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 9 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Times-Italic FMFONTDEFINE
3 0 /Courier FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "14" 14
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 14 -) 293.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
72 63 540 720 C
72 467.14 513 713 C
72 467.14 513 713 R
7 X
0 K
V
1 11 Q
0 X
(Don Libes) 201.07 651.71 T
2 F
(National Institute of Standar) 201.07 639.71 T
(ds and T) 326.72 639.71 T
(echnology) 363.56 639.71 T
101.71 626 180.71 709 R
7 X
V
0.5 H
0 Z
3 X
N
0 12 Q
0 X
(photo) 128.57 665.71 T
72.5 469.57 322.07 607.49 R
7 X
V
0 X
2.58 (Don Libes received a B.A. in Mathematics from) 72.5 599.49 P
1.72 (Rutgers University and an M.S. in Computer Sci-) 72.5 585.49 P
(ence from the University of Rochester) 72.5 571.49 T
(.) 255.36 571.49 T
0.58 (Currently at the National Institute of Standards and) 72.5 547.49 P
2.19 (T) 72.5 533.49 P
2.19 (echnology) 78.99 533.49 P
2.19 (, Don is engaged in research that will) 128.17 533.49 P
4.9 (help U.S. industry measure the standard hack.) 72.5 519.49 P
3.12 (Unfortunately) 72.5 505.49 P
3.12 (, NIST does not have a very good) 139 505.49 P
1.19 (sense of humor) 72.5 491.49 P
1.19 (, so he was forced to write his \336rst) 147.68 491.49 P
(book \322Life W) 72.5 477.49 T
(ith UNIX\323 through Prentice-Hall.) 138.63 477.49 T
72 63 540 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "14" 13
%%Page: "13" 13
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 13 -) 293.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
1 F
0 X
0.88 (expect) 72 712 P
0 F
0.88 ( is designed to work with programs as they are.  Programs need not be changed or rede-) 104.63 712 P
0.24 (signed, no matter how poorly written.  Understandably) 72 698 P
0.24 (, the majority of system administrators are) 335.71 698 P
0.21 (reluctant to modify a program that works and that they have not written themselves.  Most prefer) 72 684 P
(writing shell scripts using the classic UNIX tools philosophy) 72 670 T
(.) 363.06 670 T
1 F
0.02 (expect) 72 646 P
0 F
0.02 ( handles these problems, solving them directly and with elegance.) 104.63 646 P
1 F
0.02 (expect) 426.35 646 P
0 F
0.02 ( scripts are small) 458.98 646 P
1.13 (and simple for problems that are small and simple.  While not all) 72 632 P
1 F
1.13 (expect) 401.23 632 P
0 F
1.13 ( scripts are small, the) 433.86 632 P
0.29 (scripts scale well.  They are comparable in style to shell scripts, being task-oriented, and provide) 72 618 P
0.72 (syner) 72 604 P
0.72 (gy with shell scripts, both because they can call shell scripts and be called by them.  Used) 97.76 604 P
(judiciously) 72 590 T
(, expect is a welcome new tool to the workbench of all UNIX system administrators.) 124.53 590 T
1 16 Q
(Acknowledgments) 72 549.33 T
0 12 Q
0.35 (This work was jointly funded by the NIST Automated Manufacturing Research Facility \050AMRF) 72 524 P
0.35 (,) 537 524 P
(project 734-3385\051 and Scienti\336c and T) 72 510 T
(echnical Research Services \050STRS, project 734-3106\051.) 256.7 510 T
1.98 (The callback script was written by Scott Paisley) 72 486 P
1.98 (.  W) 315.25 486 P
1.98 (alter Rowe wrote the) 338.57 486 P
1 F
1.98 (sendmail) 449.74 486 P
0 F
1.98 ( version-) 495.72 486 P
1.11 (checking script mentioned in the paper) 72 472 P
1.11 (.  Thanks to W) 263.08 472 P
1.11 (alter Rowe and Ken Manheimer for their) 337.51 472 P
(helpful comments on this paper) 72 458 T
(.  Sue Mulroney was helpful in correcting my badly grammar) 222.58 458 T
(.) 516.04 458 T
1 16 Q
(A) 72 417.33 T
(vailability) 82.36 417.33 T
0 12 Q
0.53 (Since the design and implementation of) 72 392 P
1 F
0.53 (expect) 268.38 392 P
0 F
0.53 ( was paid for by the U.S. government, it is in the) 301.01 392 P
0.46 (public domain.  However) 72 378 P
0.46 (, the author and NIST would like credit if this program, documentation) 194.82 378 P
(or portions of them are used.) 72 364 T
1 F
(expect) 215.9 364 T
0 F
( may be) 248.53 364 T
1 F
(ftp) 289.5 364 T
0 F
(\325d as) 304.16 364 T
1 F
(pub/expect/expect.shar) 330.13 364 T
(.Z) 446.63 364 T
0 F
( from) 457.62 364 T
1 F
(ftp.cme) 486.94 364 T
(.nist.gov) 72 350 T
0 F
(.) 113.87 350 T
1 F
(expect) 122.86 350 T
0 F
( will be mailed to you, if you send the mail message) 155.5 350 T
3 F
(send pub/expect/) 408.34 350 T
(expect.shar.Z) 72 336 T
0 F
( to) 165.55 336 T
1 F
(library@cme.nist.gov) 180.88 336 T
0 F
(.) 290.52 336 T
1 16 Q
(Refer) 72 295.33 T
(ences) 109.88 295.33 T
0 12 Q
([1]) 72 268 T
1.14 (Don Libes, "expect: Curing Those Uncontrollable Fits of Interaction", Proceedings of the) 99 268 P
(Summer 1990 USENIX Conference, Anaheim, CA, June 10-15, 1990.) 99 254 T
([2]) 72 228 T
0.05 (Don Libes, \322) 99 228 P
2 F
0.05 (The expect User Manual \320 pr) 160.71 228 P
0.05 (ogrammatic dialogue with interactive pr) 301.4 228 P
0.05 (ograms) 495.7 228 P
0 F
0.05 (\323,) 531.68 228 P
(to appear as a NIST IR, National Institute of Standards and T) 99 214 T
(echnology) 391.95 214 T
(, November) 441.14 214 T
(, 1990.) 497.28 214 T
([3]) 72 188 T
1.35 (John Ousterhout, \322) 99 188 P
2 F
1.35 (T) 191.98 188 P
1.35 (cl: An Embeddable Command Language) 197.55 188 P
0 F
1.35 (\323, Proceedings of the W) 398.17 188 P
1.35 (inter) 518.02 188 P
(1990 USENIX Conference, W) 99 174 T
(ashington, D.C., January 22-26, 1990.) 244.59 174 T
([4]) 72 148 T
2.39 (John Ousterhout, \322) 99 148 P
2 F
2.39 (tcl\0503\051 \320 overview of tool command language facilities) 194.06 148 P
0 F
2.39 (\323, unpublished) 467.65 148 P
(manual page, University of California at Berkeley) 99 134 T
(, January 1990.) 338.38 134 T
([5]) 72 108 T
(A) 99 108 T
(T&T) 106.33 108 T
(, UNIX Programmer) 129.43 108 T
(\325) 228.79 108 T
(s Manual, Section 8.) 232.13 108 T
([6]) 72 82 T
0.2 (Larry W) 99 82 P
0.2 (all, \322) 139.2 82 P
2 F
0.2 (Perl \320 Practical Extraction and Report Language) 162.72 82 P
0 F
0.2 (\323, unpublished manual page,) 402.48 82 P
(March 1990.) 99 68 T
FMENDPAGE
%%EndPage: "13" 12
%%Page: "12" 12
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 12 -) 293.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
0 X
-0.15 (includes a high-level language that is interpreted and bears a strong similarity to the shell and also) 72 712 P
0.09 (to C.  In that sense, I see little to ar) 72 698 P
0.09 (gue about since) 239.91 698 P
1 F
0.09 (expect) 317.79 698 P
0 F
0.09 ( can do shell-like functions.  In a previ-) 350.42 698 P
1.02 (ous paper [1], I have suggested the addition of) 72 684 P
1 F
1.02 (expect) 306.33 684 P
0 F
1.02 (\325) 338.96 684 P
1.02 (s features to the shell.  No one wants to) 342.3 684 P
(learn yet another shell, and there is no reason why these capabilities cannot be added to the shell.) 72 670 T
1 F
(Perl) 72 641 T
0 F
(A more interesting comparison is with Perl, a language claimed \050by the author\051 [6] to embody the) 72 617 T
-0.3 (best aspects of the shell, C,) 72 603 P
1 F
-0.3 (awk) 203.45 603 P
0 F
-0.3 (,) 224.77 603 P
1 F
-0.3 (sed) 230.47 603 P
0 F
-0.3 (, and a number of other UNIX tools.  Having spent some time) 247.13 603 P
1.15 (programming in Perl, there is no question in my mind that Perl is capable of solving the same) 72 589 P
1.54 (tasks that I have described in this paper) 72 575 P
1.54 (.  Pseudo-tty packages for Perl have been written and) 270.99 575 P
1 F
(send) 72 561 T
0 F
(/) 95.33 561 T
1 F
(expect) 98.66 561 T
0 F
( utilities could be written also.) 131.29 561 T
-0.09 (Perl is a very powerful language.  It is much richer than the language used by) 72 537 P
1 F
-0.09 (expect) 444.67 537 P
0 F
-0.09 ( \050or any shell) 477.3 537 P
0.44 (for that matter\051.  This has advantages and disadvantages.  The most obvious disadvantage is that) 72 523 P
1.4 (Perl\325) 72 509 P
1.4 (s overabundance of options and features simply aren\325) 94.66 509 P
1.4 (t necessary for the tasks that) 360.39 509 P
1 F
1.4 (expect) 507.37 509 P
0 F
0.83 (addresses.  Perl\325) 72 495 P
0.83 (s complexity is re\337ected in its disk space.  The computer on my desk, a Sun 3,) 151.27 495 P
0.52 (requires 270K to store Perl and has a signi\336cant startup time.) 72 481 P
1 F
0.52 (expect) 377.01 481 P
0 F
0.52 (, on the other hand, is 70K) 409.64 481 P
0.14 (with essentially no startup time.  There are other reasons that Perl is not widely applied to certain) 72 467 P
(problems, but completing the discussion deserves a paper of its own.) 72 453 T
1.39 (Instead I will summarize by saying that) 72 429 P
1 F
1.39 (expect) 273.97 429 P
0 F
1.39 ( is appropriate to only a fraction of the system) 306.6 429 P
0.43 (administration problems that Perl solves.  This is intentionally so.) 72 415 P
1 F
0.43 (expect) 397.61 415 P
0 F
0.43 ( was written to solve a) 430.24 415 P
0.63 (very speci\336c problem, and it does that concisely and ef) 72 401 P
0.63 (\336ciently) 341.23 401 P
0.63 (.  I think that it \336ts well with the) 379.77 401 P
-0.18 (UNIX philosophy of small tools, unlike Perl which demands a signi\336cant investment in mastering) 72 387 P
0.63 (its complexity) 72 373 P
0.63 (.  Given the choice, I predict that most system administrators would choose a tool) 140.15 373 P
(like) 72 359 T
1 F
(expect) 92.99 359 T
0 F
( that takes very little ef) 125.62 359 T
(fort to learn, rather than entering the world of Perl.) 235.66 359 T
1 F
(Emacs) 72 330 T
0 F
-0.14 (Emacs is analogous to Perl in many ways, including its \337exibility and overabundance of function-) 72 306 P
0.61 (ality) 72 292 P
0.61 (.  Similarly) 92.54 292 P
0.61 (, Emacs can be used to solve these same problems.  And for much the same rea-) 146.62 292 P
0.96 (sons as I gave above, Emacs is inappropriate for the class of problems I have suggested in this) 72 278 P
0.05 (paper) 72 264 P
0.05 (.  Indeed, considering that Emacs has been available for over a decade, and I\325ve never heard) 97.98 264 P
-0.11 (of anyone using it this way) 72 250 P
-0.11 (, I\325ll prof) 200.25 250 P
-0.11 (fer that Emacs is so inappropriate for these problems, that it is) 243.44 250 P
(not surprising this usage has never even occurred to anyone.) 72 236 T
1 16 Q
(Conclusion) 72 195.34 T
0 12 Q
0.04 (UNIX shells are incapable of controlling interactive processes.  This has been at the root of many) 72 170 P
1.68 (dif) 72 156 P
1.68 (\336culties automating system administration tasks.  While the UNIX community is gradually) 85.11 156 P
1 (providing better designed tools and user interfaces, even more programs are being written with) 72 142 P
1.67 (embarrassingly poor user interfaces at the same time.  This is understandable because system) 72 128 P
0.25 (administrators give more priority to solving a problem so they can go to the next one, than going) 72 114 P
(back to pretty up an old and working solution.) 72 100 T
FMENDPAGE
%%EndPage: "12" 11
%%Page: "11" 11
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 11 -) 293.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
2 F
0 X
0.46 (systems.  How much mor) 72 712 P
0.46 (e work could it possibly be for you to administer just one mor) 192.99 712 P
0.46 (e system?) 493.24 712 P
(Oh, and it runs VMS.) 72 698 T
0 F
("\051) 173.94 698 T
1 16 Q
(Security) 72 657.33 T
0 12 Q
0.52 (Several of the examples presented have prompted for passwords that are dif) 72 632 P
0.52 (ferent than the usual) 440.86 632 P
0.22 (UNIX style.  Normally) 72 618 P
0.22 (, UNIX prompts for passwords directly from) 182.46 618 P
1 F
0.22 (/dev/tty) 401.13 618 P
0 F
0.22 (.  This has the unfor-) 439 618 P
0.27 (tunate drawback that you cannot redirect) 72 604 P
1 F
0.27 (stdin) 272.13 604 P
0 F
0.27 (.  W) 297.46 604 P
0.27 (e have shown how to get around that by using) 317.37 604 P
1 F
(expect) 72 590 T
0 F
(.) 104.63 590 T
0.55 (Of course, doing this reopens a possible security hole.  Unprivileged users can detect passwords) 72 566 P
1.15 (passed as ar) 72 552 P
1.15 (guments by using) 131.36 552 P
1 F
1.15 (ps) 222.43 552 P
0 F
1.15 (.  If passwords are stored in \336les, lapses in security can make) 233.77 552 P
1.85 (plaintext passwords evident to people browsing through your \336les.  Publicly-readable backup) 72 538 P
(media are one of the simplest such security lapses.) 72 524 T
1.07 (If you are at all interested in security) 72 500 P
1.07 (, I do not recommend storing plaintext passwords in \336les.) 254.89 500 P
0.37 (The likelihood of such a password being discovered and abused is just too high.  Our users store) 72 486 P
(passwords in \336les, but only for highly restricted accounts, such as for demos or anonymous) 72 472 T
1 F
(ftp) 512.71 472 T
0 F
(.) 527.37 472 T
-0.07 (The chances of leaking a password through) 72 448 P
1 F
-0.07 (ps) 282.36 448 P
0 F
-0.07 ( are lower) 293.69 448 P
-0.07 (, and can be lowered further still by using) 341.02 448 P
3.56 (the smallest possible script around the password prompting program.  Such a window is) 72 434 P
(extremely small.  Nonetheless, secure sites should not take even this chance.) 72 420 T
0.09 (An alternative is to have) 72 396 P
1 F
0.09 (expect) 192.67 396 P
0 F
0.09 ( interactively prompt for passwords.  If you have an) 225.3 396 P
1 F
0.09 (expect) 477.63 396 P
0 F
0.09 ( script) 510.27 396 P
0.52 (that is doing a complicated series of) 72 382 P
1 F
0.52 (telnet) 251.2 382 P
0 F
0.52 (s,) 279.84 382 P
1 F
0.52 (ftp) 291.02 382 P
0 F
0.52 (s and other things, the scripts can encode every-) 305.68 382 P
-0.14 (thing but the passwords.  Upon running such a script, the user will be only be prompted once for a) 72 368 P
0.68 (password, and nothing else.  Then) 72 354 P
1 F
0.68 (expect) 242.61 354 P
0 F
0.68 ( will use that password whenever necessary) 275.24 354 P
0.68 (, and com-) 487.69 354 P
(plete all the other dialogue from data pre-stored in \336les.) 72 340 T
0.87 (In summary) 72 316 P
0.87 (,) 129.72 316 P
1 F
0.87 (expect) 136.58 316 P
0 F
0.87 ( need not weaken security) 169.22 316 P
0.87 (.  Used wisely) 296.48 316 P
0.87 (,) 366.26 316 P
1 F
0.87 (expect) 373.13 316 P
0 F
0.87 ( can even enhance security) 405.76 316 P
0.87 (.) 537 316 P
(However) 72 302 T
(, you must use common sense when writing scripts.) 115.48 302 T
1 16 Q
(Comparison to other system administration tools) 72 261.33 T
0 12 Q
0.75 (This section of the paper can be considered controversy or heresy) 72 236 P
0.75 (, as you wish.  It is somewhat) 393.15 236 P
0.55 (religious in that the ar) 72 222 P
0.55 (guments can only be resolved by philosophical choice rather than logic.  I) 179.27 222 P
0.05 (have kept it down to a very few reasons to give you only the barest feelings for what I consider is) 72 208 P
(important to understand when choosing) 72 194 T
1 F
(expect) 264.88 194 T
0 F
( over other system administration tools.) 297.51 194 T
0.66 (As should be obvious, I think there are very few alternatives to using) 72 170 P
1 F
0.66 (expect) 414.31 170 P
0 F
0.66 (.  T) 446.95 170 P
0.66 (raditionally) 464.17 170 P
0.66 (, the) 518.69 170 P
1.17 (popular choices have been 1\051 avoidance and 2\051 C programming.  These are now no longer the) 72 156 P
(only choices.) 72 142 T
1 F
(Shell) 72 113 T
0 F
0.65 (The shell is incapable of controlling interactive processes in the way that) 72 89 P
1 F
0.65 (expect) 432.16 89 P
0 F
0.65 ( can.  Nonethe-) 464.8 89 P
2.42 (less, certain comparisons between) 72 75 P
1 F
2.42 (expect) 247.9 75 P
0 F
2.42 ( and the shell are inevitable.  In particular) 280.53 75 P
2.42 (,) 498.95 75 P
1 F
2.42 (expect) 507.36 75 P
FMENDPAGE
%%EndPage: "11" 10
%%Page: "10" 10
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 10 -) 293.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
0 X
-0.02 (you can transfer a hierarchy no matter what it looks like or how deep it is.) 72 712 P
1 F
-0.02 (expect) 432.13 712 P
0 F
-0.02 ( supports recur-) 464.76 712 P
1.27 (sive procedures, making this task a short script.  My site regularly retrieves lar) 72 698 P
1.27 (ge distributions) 464.43 698 P
(\050e.g., Gnu, X\051 this way) 72 684 T
(.) 181.14 684 T
1 F
(Assisting adb and other \322dumb\323 pr) 72 655 T
(ograms) 252.72 655 T
0 F
0.51 (Quite often, vendors provide instructions for modifying systems in the form of) 72 631 P
1 F
0.51 (adb) 458.19 631 P
0 F
0.51 ( instructions,) 477.52 631 P
0.47 (where some instructions may depend on the results of earlier ones \050i.e., \322) 72 617 P
2 F
0.47 (each time _maxusers is) 427.01 617 P
1.23 (incr) 72 603 P
1.23 (emented, you must add 16 to _n\336le) 90.88 603 P
0 F
1.23 (\323\051.) 265.13 603 P
1 F
1.23 (adb) 285.89 603 P
0 F
1.23 ( has no special scripting language that supports) 305.23 603 P
0.82 (such interaction, nor does the shell provide this capability) 72 589 P
0.82 (.) 354.57 589 P
1 F
0.82 (expect) 365.2 589 P
0 F
0.82 ( can perform this interaction,) 397.84 589 P
(playing the part of the user) 72 575 T
(, by directly looking at the results of operations, just as a user would.) 200.43 575 T
-0.08 (This technique can be applied to any program.  In fact,) 72 551 P
1 F
-0.08 (expect) 336.64 551 P
0 F
-0.08 ( can act as an intermediary between) 369.27 551 P
0.14 (the user and programs with poorly-written user interfaces.) 72 537 P
1 F
0.14 (expect) 357.75 537 P
0 F
0.14 ( normally shows the entire dia-) 390.38 537 P
1.55 (logue but can be told not to.  Then) 72 523 P
1 F
1.55 (expect) 253.82 523 P
0 F
1.55 ( can prompt the user for commands such as) 286.45 523 P
3 F
3.71 (show) 511.21 523 P
1.36 (_maxusers) 72 509 P
0 F
0.57 ( instead of) 136.76 509 P
1 F
0.57 (adb) 191.43 509 P
0 F
0.57 (\325) 210.76 509 P
0.57 (s native but cryptic) 214.1 509 P
3 F
1.36 (_maxusers/d) 310.97 509 P
0 F
0.57 (.  T) 390.13 509 P
0.57 (ranslations can also be per-) 407.17 509 P
-0.24 (formed in the reverse direction.  A short) 72 495 P
1 F
-0.24 (expect) 265.61 495 P
0 F
-0.24 ( script could limit the dif) 298.25 495 P
-0.24 (\336culty of system adminis-) 415.78 495 P
0.06 (trators who have no interest in mastering) 72 481 P
1 F
0.06 (adb) 271.27 481 P
0 F
0.06 (.  In addition, the ability of system administrators to) 290.61 481 P
(accidentally crash the system by a few errant keystrokes would be dramatically lessened.) 72 467 T
1 F
(Gr) 72 438 T
(epping monster log \336les) 86.44 438 T
0 F
0.31 (A common command sequence involves looking at a log with, say) 72 414 P
0.31 (,) 393.1 414 P
1 F
0.31 (gr) 399.4 414 P
0.31 (ep) 410.51 414 P
0 F
0.31 (, and then interrupting it) 422.5 414 P
-0.02 (\050with ^C\051 after the line of interest appears.  Unfortunately) 72 400 P
-0.02 (,) 347.81 400 P
1 F
-0.02 (gr) 353.79 400 P
-0.02 (ep) 364.89 400 P
0 F
-0.02 ( and other programs are limited to) 376.89 400 P
0.2 (the amount of programmability they have.  For example,) 72 386 P
1 F
0.2 (gr) 348.63 386 P
0.2 (ep) 359.73 386 P
0 F
0.2 ( can not be directed to stop search-) 371.73 386 P
0.34 (ing after the \336rst match.  A short) 72 372 P
1 F
0.34 (expect) 234.32 372 P
0 F
0.34 ( script can send an interrupt to) 266.95 372 P
1 F
0.34 (gr) 417.6 372 P
0.34 (ep) 428.7 372 P
0 F
0.34 ( after seeing the \336rst) 440.69 372 P
(line just as if the user were actually at the keyboard.) 72 358 T
1.79 (W) 72 334 P
1.79 (ith programs that generate log \336les as lar) 82.84 334 P
1.79 (ge as a gigabyte, this is a real problem.  W) 290.7 334 P
1.79 (ithout) 512.01 334 P
1 F
0.95 (expect) 72 320 P
0 F
0.95 (, the only solutions are to let) 104.63 320 P
1 F
0.95 (gr) 250.56 320 P
0.95 (ep) 261.66 320 P
0 F
0.95 ( continue running over the whole \336le, or to dedicate a) 273.66 320 P
0.17 (human to the task of pressing ^C at the right time.) 72 306 P
1 F
0.17 (expect) 319.86 306 P
0 F
0.17 ( can cut of) 352.5 306 P
0.17 (f the process as soon as pos-) 403.08 306 P
(sible, mailing the results back the system administrator if necessary) 72 292 T
(.) 395.01 292 T
0.3 (In general,) 72 268 P
1 F
0.3 (expect) 126.88 268 P
0 F
0.3 ( is useful for sending odd characters to a process that cannot be embedded in a) 159.51 268 P
1.6 (shell script.) 72 254 P
1 F
1.6 (expect) 138.11 254 P
0 F
1.6 ( can also execute job control commands \050) 170.74 254 P
1 F
1.6 (bg) 380.82 254 P
0 F
1.6 (,) 393.48 254 P
1 F
1.6 (fg) 401.08 254 P
0 F
1.6 (, etc.\051 in order to mediate) 411.08 254 P
1.36 (between processes that were never designed to communicate with each other) 72 240 P
1.36 (.  Again, this can) 453.29 240 P
(relieve a human from the tedious task of interactively monitoring programs.) 72 226 T
1 F
(Administering non-UNIX systems) 72 197 T
0.06 (expect) 72 173 P
0 F
0.06 ( is a UNIX program, yet it can be used to administer non-UNIX systems.  How is this pos-) 104.63 173 P
0.23 (sible?  Running) 72 159 P
1 F
0.23 (telnet) 151 159 P
0 F
0.23 ( \050) 179.64 159 P
1 F
0.23 (tip) 186.86 159 P
0 F
0.23 (,) 200.86 159 P
1 F
0.23 (kermit) 207.09 159 P
0 F
0.23 (, etc.\051 to a non-UNIX host, it can log in and perform) 241.73 159 P
1 F
0.23 (send) 498.02 159 P
0 F
0.23 (/) 521.35 159 P
1 F
0.23 (ex-) 524.68 159 P
1.62 (pect) 72 145 P
0 F
1.62 ( sequences on the remote computer) 93.31 145 P
1.62 (.  The operating system or environment of the remote) 269.61 145 P
(computer is completely irrelevant to) 72 131 T
1 F
(expect) 248.88 131 T
0 F
(, since all of this is isolated to the) 281.51 131 T
1 F
(expect) 444.76 131 T
0 F
( script itself.) 477.39 131 T
-0.23 (This is very useful for system administrators that already have a UNIX computer on their desk but) 72 107 P
1 (are forced by management to administer another computer) 72 93 P
1 (.  \050") 359.1 93 P
2 F
1 (Y) 378.98 93 P
1 (ou alr) 384.54 93 P
1 (eady administer 20 UNIX) 414.09 93 P
FMENDPAGE
%%EndPage: "10" 9
%%Page: "9" 9
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 9 -) 296.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
1 F
0 X
(su, passwd, crypt and other password\320eaters) 72 712 T
0 F
0.98 (Programs that read and write) 72 688 P
1 F
0.98 (/dev/tty) 218.44 688 P
0 F
0.98 ( cannot be used from shell scripts without the shell script) 257.08 688 P
0.81 (accessing) 72 674 P
1 F
0.81 (/dev/tty) 121.77 674 P
0 F
0.81 (.  An earlier example showed how to force) 159.63 674 P
1 F
0.81 (passwd) 374.13 674 P
0 F
0.81 ( not to read from) 411.46 674 P
1 F
0.81 (/dev/tty) 499.14 674 P
0 F
0.81 (.) 537 674 P
-0.27 (W) 72 660 P
-0.27 (ith this technique, you can change its input source to) 82.84 660 P
1 F
-0.27 (stdin) 334.95 660 P
0 F
-0.27 (, a parameter) 360.27 660 P
-0.27 (, or even an environment) 421.52 660 P
(variable.) 72 646 T
-0.21 (As another example, suppose you have typed a command that fails because you weren\325) 72 622 P
-0.21 (t root.  The) 487.34 622 P
-0.28 (typical reaction is to type) 72 608 P
3 F
-0.66 (su) 194.87 608 P
0 F
-0.28 ( and then reenter the command.  Unfortunately) 209.27 608 P
-0.28 (, history won\325) 431.05 608 P
-0.28 (t work in) 497.24 608 P
0.22 (this situation as) 72 594 P
3 F
0.53 (!-2) 150.29 594 P
0 F
0.22 ( will just evoke the error) 171.88 594 P
3 F
0.53 (-1: Event not found.) 293.79 594 P
0 F
0.22 (  The problem is that) 439.29 594 P
-0.26 (you want to refer to a command that is now in a dif) 72 580 P
-0.26 (ferent shell instantiation, and there is no way to) 314.54 580 P
(get back to it.) 72 566 T
1.08 (A solution is to pass the failed command as an ar) 72 542 P
1.08 (gument \050via) 317.77 542 P
3 F
2.59 (!!) 380.55 542 P
0 F
1.08 (\051 to an) 394.95 542 P
1 F
1.08 (expect) 431.83 542 P
0 F
1.08 ( script that will) 464.46 542 P
0.94 (prompt you for the root password, invoke) 72 528 P
1 F
0.94 (su) 281.08 528 P
0 F
0.94 (, and then feed the original failed command to the) 292.42 528 P
-0.23 (resulting superuser shell.  If the) 72 514 P
1 F
-0.23 (expect) 224.82 514 P
0 F
-0.23 ( script executes) 257.45 514 P
1 F
-0.23 (interact) 333.68 514 P
0 F
-0.23 ( as its last action, you will have the) 373.64 514 P
0.1 (original command executed for you \050no retyping\051, plus you will get a new superuser shell.  There) 72 500 P
0.88 (is no way to do this with) 72 486 P
1 F
0.88 (su) 199.11 486 P
0 F
0.88 ( except by resorting to temporary \336les for your history and a lot of) 210.44 486 P
(retyping.) 72 472 T
(A more painful example is) 72 443 T
1 F
(newgrp) 202.91 443 T
0 F
(.  Unlike) 241.55 443 T
1 F
(su) 286.19 443 T
0 F
(,) 297.52 443 T
1 F
(newgrp) 303.52 443 T
0 F
( does not allow additional ar) 342.16 443 T
(guments on) 478.19 443 T
(the command line to be passed to the new shell.  Y) 72 429 T
(ou must interactively enter them after) 314.64 429 T
1 F
(newgrp) 497.84 429 T
0 F
(begins executing.  In either case, both) 72 415 T
1 F
(su) 256.2 415 T
0 F
( and) 267.53 415 T
1 F
(newgrp) 290.84 415 T
0 F
( are essentially useless in shell scripts.) 329.49 415 T
1 F
(Security \320 The good news is \311) 72 391 T
0 F
0.28 (Earlier) 72 367 P
0.28 (, I mentioned how to build a script that would force users to choose good passwords with-) 104.15 367 P
0.08 (out rewriting) 72 353 P
1 F
0.08 (passwd) 137.46 353 P
0 F
0.08 (.  All other alternatives either rewrite the) 174.78 353 P
1 F
0.08 (passwd) 373.61 353 P
0 F
0.08 ( program or ask the user to) 410.94 353 P
(be responsible for choosing a good password.) 72 339 T
1.14 (On the opposite side of the coin,) 72 315 P
1 F
1.14 (expect) 238.54 315 P
0 F
1.14 ( can be used to test other sites for secure logins \050or to) 271.18 315 P
0.41 (break in, I suppose\051.  T) 72 301 P
0.41 (rying to login as) 184.56 301 P
1 F
0.41 (r) 267.5 301 P
0.41 (oot) 272.61 301 P
0 F
0.41 ( using, say) 288.6 301 P
0.41 (, all the words in an on-line dictionary) 339.61 301 P
0.41 (, at) 524.93 301 P
1.03 (all the local hosts at a site would be prohibitively expensive for a human to do.) 72 287 P
1 F
1.03 (expect) 473.35 287 P
0 F
1.03 ( would) 505.98 287 P
0.29 (work at it relentlessly) 72 273 P
0.29 (, eventually \336nding an insecure) 175.69 273 P
1 F
0.29 (r) 330.37 273 P
0.29 (oot) 335.48 273 P
0 F
0.29 (, or showing the site to be protected by) 351.47 273 P
(good passwords.) 72 259 T
1 F
(Questions at boot time) 72 230 T
0 F
0.1 (While booting, it is useful to validate important system facts \050e.g.,) 72 206 P
1 F
0.1 (date) 393.27 206 P
0 F
0.1 (\051 before coming up all the) 415.25 206 P
1.14 (way) 72 192 P
1.14 (.  Of course, if no one is standing in front of the console \050e.g., the system booted due to a) 91.2 192 P
-0.26 (power failure\051 the computer should come up anyway) 72 178 P
-0.26 (.  W) 322.87 178 P
-0.26 (riting such a script using the shell is pain-) 342.19 178 P
0.16 (ful, primarily because a read-with-timeout is not directly implemented in the shell.  In) 72 164 P
1 F
0.16 (expect) 489.22 164 P
0 F
0.16 (, all) 521.85 164 P
(reads timeout.) 72 150 T
1 F
(expect) 145.95 150 T
0 F
( can prompt and read from the keyboard just as easily as from a process.) 178.59 150 T
1 F
(T) 72 121 T
(ransferring hierar) 79.11 121 T
(chies with ftp) 172.49 121 T
0 F
-0.17 (Anonymous) 72 97 P
1 F
-0.17 (ftp) 133.47 97 P
0 F
-0.17 ( is very painful when it comes to directory hierarchies.  Since there is no recursive) 148.12 97 P
0.29 (copy command, you must explicitly do) 72 83 P
1 F
0.29 (cd) 263.94 83 P
0 F
0.29 (s and) 275.94 83 P
1 F
0.29 (get) 304.49 83 P
0 F
0.29 (s.  Y) 319.81 83 P
0.29 (ou can automate this in a shell script, but) 341.5 83 P
0 (only if the hierarchy is known in advance.) 72 69 P
1 F
0 (expect) 279.85 69 P
0 F
0 ( can execute an) 312.49 69 P
1 F
0 (ls) 389.08 69 P
0 F
0 ( and look at the results so that) 397.08 69 P
FMENDPAGE
%%EndPage: "9" 8
%%Page: "8" 8
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 8 -) 296.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
0 X
-0.04 (In this section, more examples will be discussed.  Because of space limitations, scripts will not be) 72 712 P
(shown, but all of them have been written and are being used.) 72 698 T
1 F
(Regr) 72 669 T
(ession testing) 97.09 669 T
0 F
0.3 (T) 72 645 P
0.3 (esting new releases of interactive software \050) 78.49 645 P
1 F
0.3 (tip) 290.79 645 P
0 F
0.3 (,) 304.79 645 P
1 F
0.3 (telnet) 311.09 645 P
0 F
0.3 (, etc.\051 requires a human to press keys and) 339.73 645 P
0.94 (watch for correct responses.  Doing this more than a few times becomes quite tiresome.  Natu-) 72 631 P
0.03 (rally) 72 617 P
0.03 (, people are much less likely to run thorough regression tests after making small changes that) 93.2 617 P
(they think) 72 603 T
2 F
(pr) 123.31 603 T
(obably) 133.53 603 T
0 F
( don\325) 166.17 603 T
(t af) 190.94 603 T
(fect other parts of a program.) 206.37 603 T
0.13 (Regression testing can also be useful for your entire installation.  Y) 72 579 P
0.13 (ou can make a script that tests) 395.33 579 P
(all your site\325) 72 565 T
(s local applications, and run it at after each system upgrade or con\336guration change.) 131.97 565 T
1 F
(Automating logins) 72 536 T
0 F
-0.19 (Many programs have a frequently repeated, well-de\336ned set of commands and another set that are) 72 512 P
0.41 (not well-de\336ned.  For example, a typical) 72 498 P
1 F
0.41 (telnet) 275.82 498 P
0 F
0.41 ( session always begins with a log in, after which) 304.46 498 P
-0.16 (the user can do anything. T) 72 484 P
-0.16 (o automate this,) 200.94 484 P
1 F
-0.16 (expect) 279.76 484 P
0 F
-0.16 ( has the ability to pass control from the script to) 312.39 484 P
-0.09 (the user) 72 470 P
-0.09 (.  At any time, the user can return control to the script temporarily to execute sequences of) 108.88 470 P
(commonly repeated commands.) 72 456 T
0.66 (At my site,) 72 432 P
1 F
0.66 (expect) 129.96 432 P
0 F
0.66 ( is heavily used to automate the process of logging in through multiple front-) 162.6 432 P
0.58 (ends and communication switches.  In fact, the original reason) 72 418 P
1 F
0.58 (expect) 380.24 418 P
0 F
0.58 ( was written was to create) 412.88 418 P
(six windows, each of which automatically logged in to another host to run a demo.) 72 404 T
0.16 (The general idea of automating) 72 380 P
1 F
0.16 (telnet) 225.66 380 P
0 F
0.16 (,) 254.3 380 P
1 F
0.16 (ftp) 260.45 380 P
0 F
0.16 (, and) 275.11 380 P
1 F
0.16 (tip) 301.74 380 P
0 F
0.16 ( is very useful when dealing with hosts that do) 315.73 380 P
-0.15 (not support) 72 366 P
1 F
-0.15 (rlogin) 129.01 366 P
0 F
-0.15 ( and) 159.66 366 P
1 F
-0.15 (r) 182.69 366 P
-0.15 (cp) 187.79 366 P
0 F
-0.15 (.  But the technique is also useful with native UNIX commands like) 199.79 366 P
1 F
-0.15 (su) 525.67 366 P
0 F
-0.15 (,) 537 366 P
1 F
0.37 (login) 72 352 P
0 F
0.37 (, or) 97.33 352 P
1 F
0.37 (rlogin) 117.06 352 P
0 F
0.37 (.) 147.72 352 P
1 F
0.37 (expect) 157.46 352 P
0 F
0.37 ( scripts can call any of them, sending passwords as appropriate and then) 190.1 352 P
0.6 (continuing actions as desired.  While any of these commands can be embedded in a shell script,) 72 338 P
0.62 (the shell has no way of taking control over what happens) 72 324 P
2 F
0.62 (inside) 355 324 P
0 F
0.62 ( of these programs.  Subsequent) 383.65 324 P
0.02 (commands from the shell script do not get sent to the new context, but are held up until the previ-) 72 310 P
0.29 (ous command has completed so that they can be sent to the original context.) 72 296 P
1 F
0.29 (expect) 447.52 296 P
0 F
0.29 ( has no such) 480.15 296 P
(problems switching contexts to continue controlling any of these sessions.) 72 282 T
1 F
(telnet \320 It\325) 72 253 T
(s not just for br) 124.84 253 T
(eakfast anymor) 204.57 253 T
(e) 283.97 253 T
0.52 (telnet) 72 229 P
0 F
0.52 ( also functions as an interface to the exciting world of TCP sockets.) 100.64 229 P
1 F
0.52 (telnet) 438.01 229 P
0 F
0.52 ( can be used to) 466.65 229 P
1.44 (access non-) 72 215 P
1 F
1.44 (telnet) 129.05 215 P
0 F
1.44 ( sockets and query other hosts for their date \050port 13\051, time \050port 37\051, list of) 157.69 215 P
0.65 (active users \050port 1) 72 201 P
0.65 (1\051, user information \050port 43\051, network status \050port 15\051, and all sorts of other) 165.11 201 P
(goodies that you might only be able to get if you had permission to log in.) 72 187 T
1.15 (For example, our site regularly runs a script that checks \050port 25\051 what version of) 72 163 P
1 F
1.15 (sendmail.cf) 481.7 163 P
0 F
-0.25 (each of our local hosts is actually using.  If we did this by reading \336les, we would need permission) 72 149 P
0.48 (to log in, or remotely mount \336le systems and read directories and \336les on several hundred hosts.) 72 135 P
(Using) 72 121 T
1 F
(telnet) 103.65 121 T
0 F
( is much easier) 132.29 121 T
(, albeit a little strange.) 203.42 121 T
FMENDPAGE
%%EndPage: "8" 7
%%Page: "7" 7
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 7 -) 296.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
0 X
1 (is important is that) 72 712 P
1 F
1 (expect) 168.61 712 P
0 F
1 ( scripts are small and simple for problems that are small and simple.) 201.25 712 P
1 F
(expect) 72 698 T
0 F
( obviates the need for resorting to C just because of limitations on the part of the shell.) 104.63 698 T
1 16 Q
(Example \320 Intelligent ftp) 72 657.33 T
0 12 Q
1.68 (One of our site administrators wanted to spool \336les in a directory) 72 632 P
1.68 (.  Later) 401.85 632 P
1.68 (, a second computer) 439.03 632 P
-0.02 (would use) 72 618 P
1 F
-0.02 (ftp) 123.93 618 P
0 F
-0.02 ( to pick them up and then delete them from the \336rst computer) 138.58 618 P
-0.02 (.  His \336rst attempt was) 432.16 618 P
0 (to use) 72 604 P
3 F
0.01 (mget *) 103.32 604 P
0 F
0 ( followed by) 146.51 604 P
3 F
0.01 (mdelete *) 210.15 604 P
0 F
0 (.  Unfortunately) 274.92 604 P
0 (, this deletes \336les that arrive in the win-) 350.42 604 P
-0.25 (dow between when the) 72 590 P
1 F
-0.25 (mget) 184.22 590 P
0 F
-0.25 ( starts and the) 209.53 590 P
1 F
-0.25 (mdelete) 277.8 590 P
0 F
-0.25 ( starts.  The script fragment in Listing 5 solved) 317.76 590 P
(the problem.) 72 576 T
0.37 (The script begins by spawning) 72 370 P
1 F
0.37 (ftp) 223.44 370 P
0 F
0.37 (.  I have omitted several lines that open a connection followed) 238.1 370 P
0.58 (by sending and con\336rming the user and password information.  The next line sends an) 72 356 P
1 F
0.58 (ftp) 497.12 356 P
0 F
0.58 ( com-) 511.77 356 P
-0.07 (mand to store the list of remote \336les in a local \336le called) 72 342 P
1 F
-0.07 (lsFile) 343.93 342 P
0 F
-0.07 (.  This command is terminated by a) 371.25 342 P
0.33 (semicolon, allowing the response to be veri\336ed with an) 72 328 P
1 F
0.33 (expect) 342.82 328 P
0 F
0.33 ( command on the same line of the) 375.45 328 P
(script.) 72 314 T
1 F
(exec) 72 290 T
0 F
( \320 Execute a UNIX command.) 93.97 290 T
1 F
0.58 (exec) 72 266 P
0 F
0.58 ( executes a UNIX command and simply waits for it to complete, just as if it were in a shell) 93.97 266 P
0.59 (script.  In line four) 72 252 P
0.59 (,) 163.49 252 P
1 F
0.59 (cat) 170.08 252 P
0 F
0.59 ( returns the list of \336les, and their names are stored in the variable,) 185.39 252 P
1 F
0.59 (lsV) 510.78 252 P
0.59 (ar) 526.34 252 P
0 F
0.59 (.) 537 252 P
1 F
(exec) 72 238 T
0 F
( is used again in the next line, this time to delete the local \336le,) 93.97 238 T
1 F
(lsFile) 393.46 238 T
0 F
(.) 420.78 238 T
-0.17 (The remainder of the script merely iterates through the variable) 72 214 P
1 F
-0.17 (lsV) 377.38 214 P
-0.17 (ar) 392.94 214 P
0 F
-0.17 (, sending) 403.78 214 P
1 F
-0.17 (get) 449.74 214 P
0 F
-0.17 ( commands fol-) 465.06 214 P
(lowed by) 72 200 T
1 F
(delete) 119.3 200 T
0 F
( commands for each \336le found in the earlier) 149.27 200 T
1 F
(ls) 362.11 200 T
0 F
(.) 370.11 200 T
1 16 Q
(Other examples solved) 72 173.33 T
1 12 Q
0.49 (expect) 72 148 P
0 F
0.49 ( addresses a surprisingly lar) 104.63 148 P
0.49 (ge class of system administration problems which before now) 239.61 148 P
1.65 (have either been solved by avoidance or special kludges.  At the same time,) 72 134 P
1 F
1.65 (expect) 460.77 134 P
0 F
1.65 ( does not) 493.4 134 P
0.17 (attempt to subsume functions already handled by other utilities.  For example, there is no built-in) 72 120 P
0.54 (\336le transfer capability) 72 106 P
0.54 (, because) 177.56 106 P
1 F
0.54 (expect) 225.6 106 P
0 F
0.54 ( can just call a program to do that.  And while the shell is) 258.24 106 P
0.9 (programmable, it cannot interact with other interactive processes and it cannot solve any of the) 72 92 P
(examples in this paper) 72 78 T
(.) 178.93 78 T
72 390 540 572 C
72 390 540 572 R
7 X
0 K
V
162 394 450 406 R
V
1 12 Q
0 X
(Listing 5) 209.88 398 T
0 F
(   Fragment of) 254.87 398 T
1 F
(ftp) 325.83 398 T
0 F
( spool script.) 340.48 398 T
117 409 495 558 R
7 X
V
3 F
0 X
(spawn ftp) 117 550 T
(. . .) 117 536.5 T
(send ls * lsFile\134r) 117 523 T
(;expect *success*ftp>*) 333 523 T
(set lsVar [exec cat lsFile]) 117 509.5 T
(exec rm lsFile\134r) 117 496 T
(set len [length $lsVar]) 117 482.5 T
(for {set i 0} {$i < $len} {set i [expr $i+1]} {) 117 469 T
(set file [index $lsVar $i]) 162 455.5 T
(send get $file\134r) 162 442 T
(;expect *success*ftp>*) 333 442 T
(send delete $file\134r) 162 428.5 T
(;expect *success*ftp>*) 333 428.5 T
(}) 117 415 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "7" 6
%%Page: "6" 6
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 6 -) 296.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
0 X
1.16 (If the script does not match one of the prespeci\336ed answers, the last case \050) 72 712 P
3 F
2.78 ({*?\134 }) 443.59 712 P
0 F
1.16 (\051 matches.) 489.55 712 P
0.54 (\050The ? is necessary to prevent the script from triggering before the entire question arrives.\051  The) 72 698 P
1 F
-0.1 (interact) 72 684 P
0 F
-0.1 ( action passes control from the script to the keyboard \050actually) 111.96 684 P
1 F
-0.1 (stdin) 412.93 684 P
0 F
-0.1 (\051 so that a human can) 438.26 684 P
(answer the question.) 72 670 T
1 F
(interact) 72 646 T
0 F
( \320 Pass control from script to user and back.) 111.96 646 T
(During) 72 626 T
1 F
(interact) 108.98 626 T
0 F
(, the user takes control for direct interactions.  Control is returned to the script) 148.94 626 T
(after pressing the optional escape character) 72 612 T
(.  In this script,) 278.15 612 T
3 F
(+) 353.11 612 T
0 F
( is chosen as the escape character by) 360.31 612 T
(passing it as the ar) 72 598 T
(gument to) 160.39 598 T
1 F
(interact) 211.7 598 T
0 F
(.) 251.66 598 T
(A real) 72 579 T
1 F
(expect) 104.63 579 T
0 F
( script for) 137.27 579 T
1 F
(fsck) 186.9 579 T
0 F
( would do several other things.  For example,) 207.55 579 T
1 F
(fsck) 427.74 579 T
0 F
( uses several stati-) 448.39 579 T
(cally-sized tables.  For this reason,) 72 565 T
1 F
(fsck) 241.21 565 T
0 F
( is limited to the number of errors of one type that can be) 261.87 565 T
(\336xed in a single pass.  This may require) 72 551 T
1 F
(fsck) 265.87 551 T
0 F
( be run several times.  While the manual says this,) 286.53 551 T
1 F
(fsck) 72 537 T
0 F
( doesn\325) 92.65 537 T
(t, and few system administrators know) 127.41 537 T
1 F
(fsck) 315.62 537 T
0 F
( that intimately) 336.27 537 T
(.  When run from a shell) 408.13 537 T
(script, this lack of programmability will cause the system to come up all the way with a corrupt) 72 523 T
(\336le system \050if the return code isn\325) 72 509 T
(t checked\051 or be unnecessarily rebooted several times \050if the) 233.67 509 T
(return code is checked\051.) 72 495 T
1 16 Q
(Example \320 Callback) 72 454.33 T
0 12 Q
-0.25 (The script in Listing 4 was written by a user who wanted to dial up the computer) 72 431 P
-0.25 (, and tell it to call) 454.56 431 P
(him back.  Since he lived out of the local calling area, this would get the computer to pick up his) 72 417 T
(long-distance phone bills for him.) 72 403 T
-0.15 (The \336rst line spawns) 72 285.8 P
1 F
-0.15 (tip) 174 285.8 P
0 F
-0.15 (which opens a connection to a modem.  Next,) 190.84 285.8 P
1 F
-0.15 (expect) 411.66 285.8 P
0 F
-0.15 ( waits for) 444.3 285.8 P
1 F
-0.15 (tip) 492.14 285.8 P
0 F
-0.15 ( to say) 506.14 285.8 P
-0.25 (it is connected to the modem.  The user) 72 271.8 P
-0.25 (\325) 259.31 271.8 P
-0.25 (s phone number) 262.64 271.8 P
-0.25 (, passed as the \336rst ar) 338.27 271.8 P
-0.25 (gument to the script,) 439.39 271.8 P
-0.1 (is then fetched and added to a command to dial a Hayes-compatible modem.  A carriage-return is) 72 257.8 P
(appended to make it appear as if a user had typed the string, and the modem begins dialing.) 72 243.8 T
-0.26 (The third line assigns 60 to the variable) 72 224.8 P
1 F
-0.26 (timeout) 262.43 224.8 P
0 F
-0.26 (.) 301.74 224.8 P
1 F
-0.26 (expect) 310.2 224.8 P
0 F
-0.26 ( actually looks at this variable in order to) 342.84 224.8 P
(tell it how many seconds to wait before giving up.  Eventually the phone rings and the modem) 72 210.8 T
(answers.) 72 196.8 T
1 F
(expect) 119.63 196.8 T
0 F
( \336nds what it\325) 152.26 196.8 T
(s looking for and exits.  At this point) 217.9 196.8 T
1 F
(getty) 397.14 196.8 T
0 F
( wakes up,  and \336nding) 422.45 196.8 T
(that it has a dialup line with DTR on it, starts) 72 182.8 T
1 F
(login) 291.22 182.8 T
0 F
( which prompts the user to log in.) 316.55 182.8 T
(Since the script was originally written, we have added a few more lines to automate and verify) 72 163.8 T
(phone numbers based on the uid running it partly for security) 72 149.8 T
(, but the fragment shown here was) 365.02 149.8 T
-0.34 (used successfully and forms the heart of our current script.  Ironically) 72 135.8 P
-0.34 (, we recently noticed a 60Kb) 401.18 135.8 P
(equivalent to) 72 121.8 T
1 F
(callback) 137.29 121.8 T
0 F
( on Usenet that had no more functionality than a dozen or so lines of) 179.94 121.8 T
1 F
(expect) 72 107.8 T
0 F
(.) 104.63 107.8 T
1.44 (Of course, not all scripts are this short.  I\325m limited to what can be presented here, and these) 72 83.8 P
-0.17 (examples really serve just to give you a feel of what) 72 69.8 P
1 F
-0.17 (expect) 322.99 69.8 P
0 F
-0.17 ( does and how it can be applied.  What) 355.63 69.8 P
72 300.8 540 399 C
72 300.8 540 399 R
7 X
0 K
V
153 303 459 315 R
V
1 12 Q
0 X
(Listing 4) 160.69 307 T
0 F
(   Callback script.  First ar) 205.68 307 T
(gument is phone number) 330.05 307 T
(.) 448.31 307 T
212 326 401 392 R
7 X
V
3 F
0 X
(spawn tip modem) 212 384 T
(expect {*connected*}) 212 370.5 T
(send ATDT[index $argv 1]\134r) 212 357 T
(set timeout 60) 212 343.5 T
(expect {*CONNECT*}) 212 330 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "6" 5
%%Page: "5" 5
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 5 -) 296.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
2 F
0 X
-0.19 (\322Assume a yes r) 126 712 P
-0.19 (esponse to all questions asked by fsck; this should be used with) 203.27 712 P
0.54 (extr) 126 698 P
0.54 (eme caution, as it is a fr) 144.21 698 P
0.54 (ee license to continue, even after sever) 262.62 698 P
0.54 (e pr) 450.94 698 P
0.54 (oblems) 470.02 698 P
(ar) 126 684 T
(e encounter) 136.22 684 T
(ed.\323) 192.06 684 T
0 F
0.52 (The) 72 660 P
1 F
0.52 (-n) 94.17 660 P
0 F
0.52 ( option has a similarly worthless meaning.  This kind of interface is inexcusably bad, and) 104.83 660 P
0.35 (yet many programs have the same style.  For example,) 72 646 P
1 F
0.35 (ftp) 340.01 646 P
0 F
0.35 ( has an option that disables interactive) 354.67 646 P
1.22 (prompting so that it can be run from a script, but it provides no way to take alternative action) 72 632 P
(should an error occur) 72 618 T
(.) 173.58 618 T
0.44 (Using) 72 594 P
1 F
0.44 (expect) 104.09 594 P
0 F
0.44 (, you can write a script that allows) 136.72 594 P
1 F
0.44 (fsck) 307.77 594 P
0 F
0.44 ( to be run, having questions answered auto-) 328.42 594 P
-0.17 (matically) 72 580 P
-0.17 (.  Listing 2 is a script that can run) 115.86 580 P
1 F
-0.17 (fsck) 277.7 580 P
0 F
-0.17 ( unattended while providing the same \337exibility as) 298.35 580 P
(being run interactively) 72 566 T
(.  The script begins by spawning) 179.81 566 T
1 F
(fsck) 338.37 566 T
0 F
(.) 359.03 566 T
1 F
(for) 72 421.8 T
0 F
( \320 Controls iteration \050looping\051.) 87.32 421.8 T
0.11 (The language used by) 72 397.8 P
1 F
0.11 (expect) 180.36 397.8 P
0 F
0.11 ( supports common high-level control structures such as) 212.99 397.8 P
1 F
0.11 (if) 481.7 397.8 P
0 F
0.11 (/) 489.03 397.8 P
1 F
0.11 (then) 492.36 397.8 P
0 F
0.11 (/) 515.02 397.8 P
1 F
0.11 (else) 518.35 397.8 P
0 F
0.11 (.) 537 397.8 P
-0.06 (In the second line, a) 72 383.8 P
1 F
-0.06 (for) 170.98 383.8 P
0 F
-0.06 ( loop is used which is structured similarly to the C-language version.  The) 186.29 383.8 P
(body of the) 72 369.8 T
1 F
(for) 129.63 369.8 T
0 F
( contains one) 144.94 369.8 T
1 F
(expect) 211.23 369.8 T
0 F
( command.) 243.87 369.8 T
1.36 (The following) 72 345.8 P
1 F
1.36 (expect) 146 345.8 P
0 F
1.36 ( command demonstrates the ability to look for multiple patterns simulta-) 178.64 345.8 P
-0.24 (neously) 72 331.8 P
-0.24 (.  \050The backslashes \050) 108.53 331.8 P
3 F
-0.57 (\134) 205.83 331.8 P
0 F
-0.24 (\051 are used to quote characters \320 in this case whitespace.\051  In addition,) 213.02 331.8 P
-0.22 (each pattern can have an accompanying action to execute if the pattern is found.  This allows us to) 72 317.8 P
0.01 (prespecify answers for speci\336c questions.  When the questions) 72 303.8 P
3 F
0.03 (UNREF FILE) 375.23 303.8 P
0 F
0.01 (\311) 447.23 303.8 P
3 F
0.03 (CLEAR?) 459.22 303.8 P
0 F
0.01 ( or) 502.4 303.8 P
3 F
0.03 (BAD) 518.41 303.8 P
6.47 (INODE NUMBER) 72 289.8 P
0 F
2.7 (\311) 164.83 289.8 P
3 F
6.47 (FIX?) 176.82 289.8 P
0 F
2.7 ( appear) 205.6 289.8 P
2.7 (, the script will automatically answer) 242.78 289.8 P
3 F
6.47 (y) 439.18 289.8 P
0 F
2.7 (.  If anything else) 445.6 289.8 P
(appears, the script will answer) 72 275.8 T
3 F
(n) 220.55 275.8 T
0 F
(.) 227.75 275.8 T
0.24 (In general, if all questions are known and answerable in advance, a script can be run in the back-) 72 251.8 P
-0.03 (ground.  W) 72 237.8 P
-0.03 (ith more complex programs it may be desirable to trap unexpected questions and force) 125.75 237.8 P
(a user to interactively evaluate them.  Listing 3 is a script does exactly this.) 72 223.8 T
72 441.8 540 562 C
72 441.8 540 562 R
7 X
0 K
V
162 443 450 455 R
V
1 12 Q
0 X
(Listing 2) 213.23 447 T
0 F
(   Non-interactive) 258.21 447 T
1 F
(fsck) 345.48 447 T
0 F
( script.) 366.13 447 T
107 462 505 555 R
7 X
V
3 F
0 X
(spawn fsck) 107 547 T
(for {} 1 {} {) 107 533.5 T
(expect) 152 520 T
(eof) 206 520 T
(break \134) 415.95 520 T
({*UNREF\134 FILE*CLEAR?\134 }) 206 506.5 T
({send y\134r} \134) 415.95 506.5 T
({*BAD\134 INODE*FIX?\134 }) 206 493 T
({send y\134r} \134) 415.95 493 T
({*?\134 }) 206 479.5 T
({send n\134r}) 415.95 479.5 T
(}) 107 466 T
0 0 612 792 C
72 99.6 540 219.8 C
72 99.6 540 219.8 R
7 X
0 K
V
162 100.8 450 112.8 R
V
1 12 Q
0 X
(Listing 3) 218.68 104.8 T
0 F
(   User) 263.66 104.8 T
(-friendly) 295.06 104.8 T
1 F
(fsck) 340.02 104.8 T
0 F
( script.) 360.68 104.8 T
108 119.8 505 212.8 R
7 X
V
3 F
0 X
(spawn fsck) 108 204.8 T
(for {} 1 {} {) 108 191.3 T
(expect) 153 177.8 T
(eof) 207 177.8 T
(break \134) 416.95 177.8 T
({*UNREF\134 FILE*CLEAR?\134 }) 207 164.3 T
({send n\134r} \134) 416.95 164.3 T
({*BLK\050S\051\134 MISSING*SALVAGE?\134 }) 207 150.8 T
({send y\134r} \134) 416.95 150.8 T
({*?\134 }) 207 137.3 T
({interact +}) 416.95 137.3 T
(}) 108 123.8 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "5" 4
%%Page: "4" 4
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 4 -) 296.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
1 F
0 X
(spawn) 72 569.8 T
0 F
( \320 Runs an interactive program.) 104.66 569.8 T
0.41 (The spawned program is referred to as the) 72 545.8 P
2 F
0.41 (curr) 280.44 545.8 P
0.41 (ent pr) 300.64 545.8 P
0.41 (ocess) 328.93 545.8 P
0 F
0.41 (.  In this example,) 354.9 545.8 P
1 F
0.41 (passwd) 445.9 545.8 P
0 F
0.41 ( is spawned) 483.22 545.8 P
(and becomes the current process.  A username is passed as an ar) 72 531.8 T
(gument to) 379.86 531.8 T
1 F
(passwd) 431.17 531.8 T
0 F
(.) 468.49 531.8 T
1 F
(expect) 72 507.8 T
0 F
( \320 Looks for a pattern in the output of the current process.) 104.63 507.8 T
0.04 (The ar) 72 483.8 P
0.04 (gument de\336nes the pattern.  Additional optional ar) 102.79 483.8 P
0.04 (guments provide alternative patterns and) 344.67 483.8 P
(actions to execute when a pattern is seen.  \050An example will be shown later) 72 469.8 T
(.\051) 432.07 469.8 T
0.71 (In this example,) 72 445.8 P
1 F
0.71 (expect) 154.08 445.8 P
0 F
0.71 ( looks for the pattern) 186.71 445.8 P
3 F
1.71 (password) 293.2 445.8 P
0 F
0.71 (.  The asterisk allows it to match other) 350.77 445.8 P
1.09 (data in the input, and is a useful shortcut to avoid specifying everything in detail.  There is no) 72 431.8 P
(action speci\336ed, so the command just waits until the pattern is found before continuing.) 72 417.8 T
1 F
(send) 72 393.8 T
0 F
( \320 Sends its ar) 95.33 393.8 T
(guments to the current process.) 162.41 393.8 T
0.21 (The password is sent to the current process.  The) 72 369.8 P
3 F
0.51 (\134r) 310.96 369.8 P
0 F
0.21 ( indicates a carriage-return.  \050All the \322usual\323) 325.36 369.8 P
0.86 (C conventions are supported.\051   There are two) 72 355.8 P
1 F
0.86 (send) 302.21 355.8 P
0 F
0.86 (/) 325.54 355.8 P
1 F
0.86 (expect) 328.87 355.8 P
0 F
0.86 ( sequences because) 361.51 355.8 P
1 F
0.86 (passwd) 459.65 355.8 P
0 F
0.86 ( asks the) 496.98 355.8 P
-0.11 (password to be typed twice as a spelling veri\336cation.  There is no point to this in a non-interactive) 72 341.8 P
1 F
(passwd) 72 327.8 T
0 F
(, but the script has to do this because) 109.32 327.8 T
1 F
(passwd) 288.54 327.8 T
0 F
( doesn\325) 325.86 327.8 T
(t know better) 360.62 327.8 T
(.) 423.25 327.8 T
0.02 (The \336nal) 72 303.8 P
3 F
0.05 (expect eof) 118.01 303.8 P
0 F
0.02 ( searches for an end-of-\336le in the output of) 190.02 303.8 P
1 F
0.02 (passwd) 398.36 303.8 P
0 F
0.02 ( and demonstrates the) 435.68 303.8 P
1.32 (use of) 72 289.8 P
2 F
1.32 (keywor) 106.61 289.8 P
1.32 (d patterns) 140.81 289.8 P
0 F
1.32 (.  Another one is) 190.44 289.8 P
1 F
1.32 (timeout) 279.64 289.8 P
0 F
1.32 (, used to denote the failure of any pattern to) 318.95 289.8 P
-0.02 (match.  Here,) 72 275.8 P
1 F
-0.02 (eof) 139.55 275.8 P
0 F
-0.02 ( is necessary only because) 154.87 275.8 P
1 F
-0.02 (passwd) 283.67 275.8 P
0 F
-0.02 ( is carefully written to check that all of its I/O) 321 275.8 P
-0.16 (succeeds, including the \336nal newline produced after the password has been entered a second time.) 72 261.8 P
0.87 (It is easy to add a call and test of) 72 237.8 P
3 F
2.09 (grep $password /usr/dict/words) 244.48 237.8 P
0 F
0.87 ( to the script to) 464.55 237.8 P
-0.21 (check that a password doesn\325) 72 223.8 P
-0.21 (t appear in the on-line dictionary) 211.49 223.8 P
-0.21 (, however) 366.54 223.8 P
-0.21 (, we will leave the illustra-) 413.14 223.8 P
(tion of control structures to the next example.) 72 209.8 T
1 16 Q
(Example \320 fsck) 72 169.13 T
0 12 Q
0.02 (Many programs are) 72 143.8 P
2 F
0.02 (ostensibly) 168.98 143.8 P
0 F
0.02 ( non-interactive.  This is, they can run in the background but with a) 216.95 143.8 P
0.06 (very reduced functionality) 72 129.8 P
0.06 (.   For example,) 197.9 129.8 P
1 F
0.06 (fsck) 276.46 129.8 P
0 F
0.06 ( can be run from a shell script only with the) 297.11 129.8 P
1 F
0.06 (-y) 509.92 129.8 P
0 F
0.06 ( or) 519.91 129.8 P
1 F
0.06 (-) 536.01 129.8 P
(n) 72 115.8 T
0 F
( options.  The manual [5] de\336nes the) 78.67 115.8 T
1 F
(-y) 257.55 115.8 T
0 F
( option as follows:) 267.54 115.8 T
72 577.8 540 720 C
72 577.8 540 720 R
7 X
0 K
V
162 588 440 612 R
V
1 12 Q
0 X
-0.03 (Listing 1) 162 604 P
0 F
-0.03 (   Non-interactive) 206.95 604 P
1 F
-0.03 (passwd) 294.09 604 P
0 F
-0.03 ( script.  First ar) 331.41 604 P
-0.03 (gument) 404.02 604 P
(is username.  Second ar) 162 592 T
(gument is new password.) 275.36 592 T
204 626 409 719 R
7 X
V
3 F
0 X
(set password [index $argv 2]) 204 711 T
(spawn passwd [index $argv 1]) 204 697.5 T
(expect {*password:}) 204 684 T
(send $password\134r) 204 670.5 T
(expect {*password:}) 204 657 T
(send $password\134r) 204 643.5 T
(expect eof) 204 630 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "4" 3
%%Page: "3" 3
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 3 -) 296.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
1 F
0 X
-0.28 (expect) 72 712 P
0 F
-0.28 ( is a general-purpose system for solving the interactive program problem, however it solves) 104.63 712 P
0.04 (an unusually lar) 72 698 P
0.04 (ge number of problems in the system administration arena.  While the) 148.47 698 P
2 F
0.04 (UNIX style) 487 698 P
0 F
0.98 (is to build small programs that can be used as building blocks in the construction of other pro-) 72 684 P
(grams using shells and pipelines, few system administration programs behave this way) 72 670 T
(.) 487.62 670 T
0.46 (T) 72 646 P
0.46 (raditionally) 78.91 646 P
0.46 (, little time was spent designing good user interfaces for system administrator tools.) 133.43 646 P
(The reasons may be any or all of the following:) 72 632 T
(\245) 108 612 T
2.26 (System administrators were experienced programmers, and therefore didn\325) 126 612 P
2.26 (t) 500.67 612 P
(need all the hand-holding that general user programs require.) 126 598 T
(\245) 108 578 T
1.89 (Programs such as) 126 578 P
1 F
1.89 (fsck) 218.62 578 P
0 F
1.89 ( and) 239.27 578 P
1 F
1.89 (crash) 266.37 578 P
0 F
1.89 ( were run infrequently) 294.35 578 P
1.89 (, so there was little) 406.16 578 P
(point spending much time on such rarely used tools.) 126 564 T
(\245) 108 544 T
1.06 (System administration tools were used in extreme conditions, considered not) 126 544 P
0.46 (worth programming for because of their dif) 126 530 P
0.46 (\336culty or rarity) 337.03 530 P
0.46 (.  It was more cost-) 409.79 530 P
(ef) 126 516 T
(fective to solve the problem by hand in real-time.) 135.1 516 T
(\245) 108 496 T
0.66 (System administrators solved problems in site-dependent ways, never expect-) 126 496 P
(ing their underdesigned programs to be propagated widely) 126 482 T
(.) 405.35 482 T
-0.01 (Whatever the reason, the result is that the UNIX system administrator) 72 458 P
-0.01 (\325) 407.11 458 P
-0.01 (s toolbox is \336lled with rep-) 410.45 458 P
0.38 (resentatives of some of the worst user interfaces ever seen.  While only a complete redesign will) 72 444 P
(help all of these problems,) 72 430 T
1 F
(expect) 201.91 430 T
0 F
( can be used to address a great many of them.) 234.55 430 T
1 16 Q
(Example \320 passwd) 72 389.33 T
0 12 Q
0.31 (The) 72 364 P
1 F
0.31 (expect) 93.95 364 P
0 F
0.31 ( script in Listing 1 takes a password as an ar) 126.59 364 P
0.31 (gument, and can be run non-interactively) 341.29 364 P
0.09 (such as by a shell script.  A shell script could prompt and reject easily guessed passwords.  Alter-) 72 350 P
0.51 (natively) 72 336 P
0.51 (, the shell script could call a password generator) 109.86 336 P
0.51 (.  Such a combination could create lar) 344.12 336 P
0.51 (ge) 528.68 336 P
0.67 (numbers of accounts at a time without the system administrator having to hand-enter passwords) 72 322 P
(as is currently done.) 72 308 T
0.72 (Admittedly) 72 284 P
0.72 (, the script reopens the original security problem that) 125.86 284 P
1 F
0.72 (passwd) 388.86 284 P
0 F
0.72 ( was designed to solve.) 426.18 284 P
0.15 (This can be closed in a number of ways. For example,) 72 270 P
1 F
0.15 (expect) 335.76 270 P
0 F
0.15 ( could generate the passwords itself) 368.39 270 P
(by directly calling the password generator from within the script.) 72 256 T
0.11 (The scripting language of) 72 232 P
1 F
0.11 (expect) 198.36 232 P
0 F
0.11 ( is de\336ned completely by Libes [1][2] and Ousterhout [3][4].  In) 230.99 232 P
0.3 (this paper) 72 218 P
0.3 (, commands will be described as they are encountered.  Rather than giving comprehen-) 118.78 218 P
(sive explanations of each command, only enough to understand the examples will be supplied.) 72 204 T
1 F
(set) 72 180 T
0 F
( \320 Sets the \336rst ar) 85.98 180 T
(gument to the second \050i.e., assignment\051.) 169.39 180 T
0.49 (In line 1 of the script, the \336rst ar) 72 156 P
0.49 (gument to) 230.62 156 P
1 F
0.49 (set) 282.91 156 P
0 F
0.49 ( is) 296.89 156 P
1 F
0.49 (password) 311.87 156 P
0 F
0.49 (.  The second is an expression that is) 360.52 156 P
-0.1 (evaluated to return the second ar) 72 142 P
-0.1 (gument of the script by using the) 227.49 142 P
1 F
-0.1 (index) 387.71 142 P
0 F
-0.1 ( command. The \336rst ar) 415.7 142 P
-0.1 (gu-) 524.01 142 P
0.88 (ment of) 72 128 P
1 F
0.88 (index) 113.73 128 P
0 F
0.88 ( is a list, from which it retrieves the element corresponding to the position of the) 141.73 128 P
0.38 (second ar) 72 114 P
0.38 (gument.) 117.78 114 P
1 F
0.38 (argv) 163.51 114 P
0 F
0.38 ( refers to the ar) 186.83 114 P
0.38 (guments of the script, in the same style as the C language) 260.71 114 P
1 F
(argv) 72 100 T
0 F
(.) 94.54 100 T
FMENDPAGE
%%EndPage: "3" 2
%%Page: "2" 2
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 2 -) 296.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
1 16 Q
0 X
(Intr) 72 709.33 T
(oduction) 99.25 709.33 T
0 12 Q
0.72 (UNIX system administration often involves using programs designed for interactive use.  Many) 72 684 P
2.04 (such programs \050) 72 670 P
1 F
2.04 (passwd) 153.36 670 P
0 F
2.04 (,) 190.69 670 P
1 F
2.04 (su) 198.73 670 P
0 F
2.04 (, etc.\051 cannot be placed into shell scripts.  Some programs \050) 210.06 670 P
1 F
2.04 (fsck) 516.35 670 P
0 F
2.04 (,) 537 670 P
1 F
(dump) 72 656 T
0 F
(, etc.\051 are not speci\336cally interactive, but have little support for automated use.) 102 656 T
0.57 (For example the) 72 632 P
1 F
0.57 (passwd) 154.64 632 P
0 F
0.57 ( command prompts the user for a password.  There is no way to supply) 191.97 632 P
0.14 (the password on the command line.  If you use) 72 618 P
1 F
0.14 (passwd) 300.22 618 P
0 F
0.14 ( from a shell script, it will block the script) 337.55 618 P
(from running while it prompts the user who invoked the shell script.) 72 604 T
-0.21 (Because of this, you cannot, for example, reject passwords that are found in the system dictionary) 72 580 P
-0.21 (,) 537 580 P
-0.06 (a common security measure.  It is ironic that security) 72 566 P
2 F
-0.06 (was) 328.88 566 P
0 F
-0.06 ( the reason that) 347.54 566 P
1 F
-0.06 (passwd) 423.24 566 P
0 F
-0.06 ( was designed to) 460.57 566 P
(read directly from the keyboard to begin with.) 72 552 T
1 F
-0.22 (passwd) 72 528 P
0 F
-0.22 ( is not alone in this recalcitrant behavior) 109.32 528 P
-0.22 (.  Many other programs do not work well inside of) 300.01 528 P
0.45 (shell scripts and quite a few of these are crucial tools to the system administrator) 72 514 P
0.45 (.  Examples are) 464.71 514 P
1 F
(rlogin) 72 500 T
0 F
(,) 102.65 500 T
1 F
(telnet) 108.65 500 T
0 F
(,) 137.29 500 T
1 F
(crypt) 143.29 500 T
0 F
(,) 170.6 500 T
1 F
(su) 176.6 500 T
0 F
(,) 187.93 500 T
1 F
(dump) 193.93 500 T
0 F
(,) 223.92 500 T
1 F
(adb) 229.92 500 T
0 F
(, and) 249.25 500 T
1 F
(fsck) 275.56 500 T
0 F
(.  More problems will be mentioned later) 296.22 500 T
(.) 492.09 500 T
0.19 (The problem with all of these programs is not the programs themselves, but the shell.  For exam-) 72 476 P
0.9 (ple, the shell cannot see prompts from interactive programs nor can it see error messages.  The) 72 462 P
-0.04 (shell cannot deal with interactive programs this way because it is incapable of creating a two-way) 72 448 P
0.09 (connection to a process.  This is an inherent limitation of classic UNIX shells such as) 72 434 P
1 F
0.09 (sh) 485.51 434 P
0 F
0.09 (,) 496.85 434 P
1 F
0.09 (csh) 502.93 434 P
0 F
0.09 ( and) 519.59 434 P
1 F
(ksh) 72 420 T
0 F
( \050from here on generically referred to as simply) 90 420 T
2 F
(the shell) 320.14 420 T
0 F
(\051.) 360.45 420 T
1 16 Q
(expect \320 An Overview) 72 379.33 T
1 12 Q
0 (expect) 72 354 P
0 F
0 (  is a program that solves the general problem of automating interactive programs.) 104.63 354 P
1 F
0 (expect) 507.36 354 P
0 F
0 (communicates with processes by interposing itself between processes \050see Figure 1\051.  Pseudo-ttys) 72 340 P
0.19 (are used so that processes believe they are talking to a real user) 72 326 P
0.19 (.  A high-level script enables han-) 376.67 326 P
-0.11 (dling of varied behavior) 72 312 P
-0.11 (.  The script of) 186.58 312 P
-0.11 (fers job control so that multiple programs can be controlled) 256.2 312 P
0.29 (simultaneously and af) 72 298 P
0.29 (fect one another) 177.63 298 P
0.29 (.  Also, a real user may take and return control from and to) 254.8 298 P
(the script whenever necessary) 72 284 T
(.) 214.76 284 T
72 63 540 720 C
72 64 540 280 C
72 64 540 280 R
7 X
0 K
V
125 71 488 108 R
V
1 12 Q
0 X
0.19 (Figur) 125 100 P
0.19 (e 1) 153.44 100 P
0 F
0.19 (.) 167.94 100 P
1 F
0.19 (expect) 180.49 100 P
0 F
0.19 ( is communicating with 5 processes simultaneously) 213.13 100 P
0.19 (.  The) 459.98 100 P
0.26 (script is in control and has disabled logging to the user) 125 88 P
0.26 (.  The user only sees) 388.78 88 P
-0.26 (what the script says to send and is essentially treated as just another process.) 125 76 P
269.55 165.28 341.55 219.28 18 RR
0.5 H
2 Z
N
372.04 239.94 381.53 247.28 377.37 236.02 374.71 237.98 4 Y
V
351.02 199.63 341.53 192.28 345.69 203.54 348.36 201.58 4 Y
V
374.72 237.98 348.37 201.58 2 L
0 Z
N
381.55 220.28 453.55 274.28 18 RR
7 X
V
2 Z
0 X
N
158.88 261.84 158.56 259.91 157.78 258.63 158.23 256.18 157.33 256.18 155.6 253.36 153.42 253.81
 151.97 252.86 155.27 246.01 160.12 241.01 167.82 239.02 167.96 237.59 170.81 237.73 175.1 236.88 175.1 238.87
 179.37 238.87 179.37 240.73 174.1 240.73 172.81 241.58 172.81 255.56 174.1 256.42 185.65 253.14 185.65 248.57
 189.36 247.15 189.36 240.59 184.94 240.59 184.94 239.02 187.5 239.02 187.5 233.6 169.96 233.6 167.68 235.17
 167.68 233.74 157.55 234.59 151.7 238.87 149.71 235.17 151.42 231.6 159.55 228.32 163.11 224.18 168.82 206.64
 166.82 206.35 169.67 204.5 174.24 202.5 173.96 201.08 172.81 200.65 167.39 201.08 165.11 201.51 163.69 200.93
 161.97 200.93 161.97 204.64 157.55 217.62 149.42 217.48 149.42 204.5 157.55 202.07 137.87 202.07 146 204.5
 146 217.19 136.58 217.19 134.16 220.33 133.59 224.04 134.44 225.89 133.73 231.74 131.73 232.31 130.16 235.59
 129.45 248 130.45 249.72 133.45 250.28 134.87 248.86 136.58 239.59 137.59 243.72 140.01 249.57 143.43 253.99
 146.69 255.07 148.41 257.53 147.83 258.3 147.64 262.1 149.43 264.98 151.04 266.33 153.23 266.91 154.9 266.53
 158.23 264.66 159.52 262.35 81 Y
0.2 H
0 Z
4 X
N
173.17 255.34 174.02 255.77 174.02 241.37 173.17 241.8 4 Y
N
136.3 231.17 136.73 227.32 138.58 227.46 137.3 231.17 4 Y
N
90 450 1 1 138.29 200.65 A
90 450 1 1 157.26 200.65 A
168.68 233.03 189.64 233.03 189.64 229.32 184.51 229.32 184.51 201.22 176.38 201.22 179.23 204.07
 182.23 204.07 182.23 229.46 170.39 229.46 10 Y
N
257.56 191.51 269.54 192.28 259.79 185.28 258.68 188.4 4 Y
0 X
V
258.69 188.39 180.5 160.59 2 L
0.5 H
2 Z
N
200.38 227.42 191.99 236 203.65 233.17 202.02 230.29 4 Y
4 X
V
261.15 200.86 269.54 192.28 257.88 195.11 259.52 197.99 4 Y
V
202.02 230.29 259.52 197.98 2 L
0 Z
N
0 X
(expect) 288.35 189.3 T
146.5 138.09 180.5 183.09 R
2 Z
N
389.55 212.28 461.55 266.28 18 RR
7 X
V
0 X
N
397.55 204.28 469.55 258.28 18 RR
7 X
V
0 X
N
405.55 196.28 477.55 250.28 18 RR
7 X
V
0 X
N
413.55 188.28 485.55 242.28 18 RR
7 X
V
0 X
N
427.22 176.84 427.54 174.91 428.31 173.63 427.86 171.18 428.76 171.18 430.49 168.36 432.68 168.81
 434.13 167.86 430.83 161.01 425.98 156.01 418.28 154.02 418.13 152.59 415.28 152.73 411 151.88 411 153.87
 406.72 153.87 406.72 155.73 412 155.73 413.29 156.58 413.29 170.56 412 171.42 400.45 168.14 400.45 163.57
 396.74 162.15 396.74 155.59 401.16 155.59 401.16 154.02 398.59 154.02 398.59 148.6 416.13 148.6 418.42 150.17
 418.42 148.74 428.55 149.59 434.39 153.87 436.39 150.17 434.68 146.6 426.55 143.32 422.98 139.18 417.27 121.64
 419.27 121.35 416.42 119.5 411.86 117.5 412.14 116.08 413.29 115.65 418.7 116.08 420.98 116.51 422.41 115.93
 424.12 115.93 424.12 119.64 428.55 132.62 436.67 132.48 436.67 119.5 428.55 117.07 448.23 117.07 440.1 119.5
 440.1 132.19 449.51 132.19 451.94 135.33 452.51 139.04 451.65 140.89 452.36 146.74 454.36 147.31 455.93 150.59
 456.64 163 455.64 164.72 452.65 165.28 451.23 163.86 449.51 154.59 448.51 158.72 446.09 164.57 442.66 168.99
 439.41 170.07 437.69 172.53 438.26 173.3 438.46 177.1 436.66 179.98 435.05 181.33 432.87 181.91 431.2 181.53
 427.86 179.66 426.58 177.35 81 Y
0.2 H
0 Z
N
412.92 170.34 412.07 170.77 412.07 156.37 412.92 156.8 4 Y
N
449.8 146.17 449.37 142.32 447.52 142.46 448.8 146.17 4 Y
N
90 450 1 1 447.8 115.65 A
90 450 1 1 428.83 115.65 A
417.42 148.03 396.45 148.03 396.45 144.32 401.59 144.32 401.59 116.22 409.72 116.22 406.87 119.07
 403.87 119.07 403.87 144.46 415.71 144.46 10 Y
N
378.96 233.61 389.54 239.28 383.57 228.87 381.27 231.24 4 Y
V
352.11 197.95 341.54 192.28 347.5 202.69 349.81 200.32 4 Y
V
381.28 231.24 349.82 200.32 2 L
0.5 H
N
386.19 227.35 397.53 231.28 390 221.94 388.09 224.65 4 Y
V
352.87 196.21 341.53 192.28 349.07 201.62 350.97 198.92 4 Y
V
388.11 224.64 350.98 198.91 2 L
N
393.72 221.19 405.54 223.28 396.63 215.24 395.18 218.22 4 Y
V
353.36 194.37 341.54 192.28 350.45 200.32 351.91 197.34 4 Y
V
395.18 218.22 351.91 197.34 2 L
N
401.54 214.91 413.53 215.28 403.56 208.61 402.55 211.76 4 Y
V
353.53 192.66 341.54 192.28 351.51 198.96 352.52 195.81 4 Y
V
402.57 211.75 352.53 195.8 2 L
N
386.66 163.51 393.99 154.01 382.74 158.18 384.7 160.84 4 Y
V
348.86 182.78 341.54 192.28 352.79 188.1 350.83 185.44 4 Y
V
384.71 160.84 350.84 185.44 2 L
V
N
(interactive) 425.69 218.21 T
(processes) 428.02 206.21 T
(script) 150.18 161.7 T
72 63 540 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "2" 1
%%Page: "1" 1
612 792 0 FMBEGINPAGE
72 36 540 47.95 R
7 X
0 K
V
0 12 Q
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
0 18 Q
0 X
(Using) 103.62 628 T
2 F
(expect) 151.1 628 T
0 F
( to Automate System Administration Tasks) 197.04 628 T
2 12 Q
(Don Libes) 281.18 580 T
0 F
(National Institute of Standards and Technology) 192.24 552 T
(Metrology Bldg, Room A-127) 233.04 538 T
(Gaithersburg, MD 20899) 245.54 524 T
(libes@cme.nist.gov) 258.5 510 T
2 F
(ABSTRACT) 277.68 462 T
0 F
-0.32 (UNIX system administration often involves programs designed only for interactive) 108.14 436 P
0.99 (use.  Many such programs \050) 108 422 P
1 F
0.99 (passwd) 246.2 422 P
0 F
0.99 (,) 283.53 422 P
1 F
0.99 (su) 290.52 422 P
0 F
0.99 (, etc.\051 cannot be placed into shell scripts.) 301.85 422 P
0.9 (Some programs \050) 108 408 P
1 F
0.9 (fsck) 192.42 408 P
0 F
0.9 (,) 213.07 408 P
1 F
0.9 (dump) 219.97 408 P
0 F
0.9 (, etc.\051 are not specifically interactive, but have poor) 249.97 408 P
(support for automated use.) 108 394 T
1 F
0.45 (expect) 108.14 370 P
0 F
0.45 ( is a program which can \322talk\323 to interactive programs.  A script is used to) 140.78 370 P
0.23 (guide the dialogue.  Scripts are written in a high-level language and provide flexi-) 108 356 P
0.56 (bility for arbitrarily complex dialogues.  By writing an) 108 342 P
1 F
0.56 (expect) 377.54 342 P
0 F
0.56 ( script, one can run) 410.17 342 P
(interactive programs non-interactively.) 108 328 T
2.24 (Shell scripts are incapable of managing these system administration tasks, but) 108.14 304 P
1 F
0.64 (expect) 108 290 P
0 F
0.64 ( scripts can control them and many others.  Tasks requiring a person dedi-) 140.63 290 P
0.25 (cated to interactively responding to badly written programs, can be automated.  In) 108 276 P
(a large environment, the time and aggravation saved is immense.) 108 262 T
1 F
1.07 (expect) 108.14 238 P
0 F
1.07 ( is similar in style to the shell, and can easily be mastered by any system) 140.78 238 P
-0.39 (administrator who can program in the shell already.  This paper presents real exam-) 108 224 P
0.46 (ples of using) 108 210 P
1 F
0.46 (expect) 173.69 210 P
0 F
0.46 ( to automate system administration tasks such as) 206.32 210 P
1 F
0.46 (passwd) 445.9 210 P
0 F
0.46 ( and) 483.22 210 P
1 F
-0.15 (fsck) 108 196 P
0 F
-0.15 (.  Also discussed are a number of other system administration tasks that can be) 128.65 196 P
(automated.) 108 182 T
2.07 (Keywords:) 108.14 158 P
1 F
2.07 (expect) 165.83 158 P
0 F
2.07 (,) 198.47 158 P
1 F
2.07 (fsck) 206.53 158 P
0 F
2.07 (, interaction,) 227.18 158 P
1 F
2.07 (passwd) 294.6 158 P
0 F
2.07 (, password, programmed dialogue,) 331.92 158 P
(security, shell, Tcl, UNIX,) 108 144 T
1 F
(uucp) 238.57 144 T
0 F
0.88 (Reprinted from) 108.14 96 P
2 F
0.88 (Proceedings of the Fourth USENIX LISA Large Installation Sys-) 186.51 96 P
1.78 (tems Administration \050LISA\051 Conference) 108 82 P
0 F
1.78 (, Colorado Springs, CO, October 17-19,) 303.55 82 P
(1990.) 108 68 T
FMENDPAGE
%%EndPage: "1" 0
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 14 -1
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%+ Times-Italic
%%+ Courier
