


MIFF(5)                   FILE FORMATS                    MIFF(5)



NNNNAAAAMMMMEEEE
     MIFF - ImageMagick's file format for raster images.

SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
     ####iiiinnnncccclllluuuuddddeeee <<<<iiiimmmmaaaaggggeeee....hhhh>>>>

DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
     A MIFF image file consist of two sections.  The first
     section is composed of keywords describing the image in text
     form.  The next section is the binary image data.  The two
     sections are separated by a :::: character immediately followed
     by a _n_e_w_l_i_n_e.  Generally, the first section has a _f_o_r_m-_f_e_e_d
     and _n_e_w_l_i_n_e proceeding the :::: character.   You can then list
     the image keywords with _m_o_r_e, without printing the binary
     image that follows the ::::  separator.

     Each keyword must be separated by at least one space but can
     be separated with control characters such a _f_o_r_m-_f_e_e_d or
     _n_e_w_l_i_n_e.

     A list of valid keywords follows:

     aaaallllpppphhhhaaaa====_T_r_u_e | _F_a_l_s_e
          specifies whether a continuous-tone image also has
          alpha data.  Alpha data is generally useful for image
          compositing.

          This keyword is optional.  If it is not specified, no
          alpha data is assumed.  This keyword has no meaning for
          pseudo-color images.

     ccccllllaaaassssssss====_D_i_r_e_c_t_C_l_a_s_s | _P_s_e_u_d_o_C_l_a_s_s
          identifies the type of binary image stored within the
          file.

          This keyword is optional.  If it is not specified, a
          _D_i_r_e_c_t_C_l_a_s_s image format is assumed.  An explanation of
          _D_i_r_e_c_t_C_l_a_s_s and _P_s_e_u_d_o_C_l_a_s_s image data follows this
          list.

     ccccoooolllloooorrrrssss====_v_a_l_u_e
          specifies the number of colors in the image, and for
          pseudo-color images the size of the colormap.

          This keyword is optional.  However, if a colormap size
          is not specified, a linear colormap is assumed for
          pseudo-color images.

     ccccoooolllluuuummmmnnnnssss====_v_a_l_u_e
          is a required keyword and specifies the number of
          columns, or width in pixels, of the image.




ImageMagick       Last change: 10 October 1992                  1






MIFF(5)                   FILE FORMATS                    MIFF(5)



     ccccoooommmmpppprrrreeeessssssssiiiioooonnnn====_Q_E_n_c_o_d_e_d | _R_u_n_l_e_n_g_t_h_E_n_c_o_d_e_d
          identifies how the image stored within the file is
          compressed.

          This keyword is optional.  If it is not specified, the
          image is assumed to be uncompressed.  _Q_E_n_c_o_d_e_d has no
          meaning for pseudo-color images.  A detailed
          explanation of runlength-encoded and predictive
          arithmetic image compression follows this list.

     iiiidddd====_I_m_a_g_e_M_a_g_i_c_k
          is a required keyword and identifies this file as a
          MIFF image.

     mmmmoooonnnnttttaaaaggggeeee====<_w_i_d_t_h>_x<_h_e_i_g_h_t>{+-}<_x _o_f_f_s_e_t>{+-}<_y _o_f_f_s_e_t>
          size and location of the individual tiles of a
          composite image.  See XXXX((((1111)))) for details about the
          geometry specification.

          Use this keyword when the image is a composite of a
          number of different tiles.  A tile consists of an image
          and optionally a border and a label.  <_w_i_d_t_h> is the
          size in pixels of each individual tile in the horizonal
          direction and <_h_e_i_g_h_t> is the size in the vertical
          direction.  Each tile must have an equal number of
          pixels in width and equal in height.  However, the
          width can differ from the height.  <_x _o_f_f_s_e_t> is the
          offset in number of pixels from the vertical edge of
          the composite image where the first tile of a row
          begins and <_y _o_f_f_s_e_t> is the offset from the horizonal
          edge where the first tile of a column begins.

          If this keyword is specified, a directory of tile names
          must follow the image header.  The format of the
          directory is explained below.

     ppppaaaacccckkkkeeeettttssss====_v_a_l_u_e
          specifies the number of compressed color packets in the
          image data section.

          This keyword is optional, but recommended, for
          runlength-encoded image compression.  It is required
          for arithimetic encoded image compression.  A detailed
          explanation of image compression follows this list.

     rrrroooowwwwssss====_v_a_l_u_e
          is a required keyword and specifies the number of rows,
          or height in pixels, of the image.

     sssscccceeeennnneeee====_v_a_l_u_e
          is an optional keyword and is a reference number for
          sequencing of images.



ImageMagick       Last change: 10 October 1992                  2






MIFF(5)                   FILE FORMATS                    MIFF(5)



          This keyword is typically useful for animating a
          sequence of images.

     ssssiiiiggggnnnnaaaattttuuuurrrreeee====_v_a_l_u_e
          is an optional keyword and is a character string that
          uniquely identifies the image colormap.

          A unique identifier for the colormap is useful for
          animating a sequence of _P_s_e_u_d_o_C_l_a_s_s images.  The
          default identifier is a digital signature computed from
          RSA's Data Security MD5 Digest Algorithm described in
          Internet draft [MD5], July 1992.  The colormap
          signature is usually computed for _P_s_e_u_d_o_C_l_a_s_s images.

     Comments can be included in the keyword section.  Comments
     must begin with a {{{{ character and end with a } character.

     An example keyword section follows:

         {
           Rendered via Dore by Sandy Hause.
         }
         id=ImageMagick
         class=PseudoClass  colors=256
     signature=d79e1c308aa5bbcdeea8ed63df412da9
         compression=RunlengthEncoded  packets=27601
         columns=1280  rows=1024
         scene=1
         ^L
         :

     If you specify _m_o_n_t_a_g_e in the image header, follow the
     header with a directory of image tiles.  This directory
     consists of a name for each tile of the composite image
     separated by a NEWLINE character.  The list is terminated
     with a NULL character.

     The binary image data that follows the keyword text is
     stored in one of two binary classes as specified by the
     ccccllllaaaassssssss keyword:  _D_i_r_e_c_t_C_l_a_s_s or _P_s_e_u_d_o_C_l_a_s_s.

     Use the _D_i_r_e_c_t_C_l_a_s_s class to store continuous-tone images.
     _D_i_r_e_c_t_C_l_a_s_s requires that the image pixels immediately
     follow the keyword text and be stored as binary red, green,
     and blue intensity values (and optional alpha value).  Each
     color component is stored as one binary byte (8 bit) and
     ranges from 0 through 255.  The total number of pixels
     expected is equal to the number of pixel columns times the
     number of pixel rows as specified by the ccccoooolllluuuummmmnnnnssss and rrrroooowwwwssss
     keywords.





ImageMagick       Last change: 10 October 1992                  3






MIFF(5)                   FILE FORMATS                    MIFF(5)



     If the ccccoooommmmpppprrrreeeessssssssiiiioooonnnn keyword is not specified, a red, green,
     and blue byte (and optional alpha byte) in that order is
     expected for each pixel of the image.

     If ccccoooommmmpppprrrreeeessssssssiiiioooonnnn is _Q_E_n_c_o_d_e_d, each red, green, and blue byte
     intensity value (and optional alpha value) is encoded using
     the predictive arithmetic compression algorithm.  Use the
     ppppaaaacccckkkkeeeettttssss keyword to specify the total number of arithimetic
     encoded packets that comprise the image.

     If ccccoooommmmpppprrrreeeessssssssiiiioooonnnn is _R_u_n_l_e_n_g_t_h_E_n_c_o_d_e_d, each red, green, and
     blue byte intensity value (and optional alpha value) is
     followed by a count byte. This value specifies the number of
     horizonally contiguous pixels in the image of that color.
     The count (0-255) is one less than the actual number of
     contiguous pixels; thus a single packet can represent from 1
     up to 256 identical pixels.  The total number of pixels
     specified by the individual count bytes must add up to the
     number of pixel columns times the number of pixel rows as
     specified by the ccccoooolllluuuummmmnnnnssss and rrrroooowwwwssss keywords.  Use ppppaaaacccckkkkeeeettttssss to
     specify the total number of runlength-encoded packets that
     comprise the image.

     Use the _P_s_e_u_d_o_C_l_a_s_s class to store pseudo-color images.
     _P_s_e_u_d_o_C_l_a_s_s requires that the image colormap and pseudo-
     color pixels immediately follow the keyword text.  The
     colormap is stored as contiguous red, green, and blue
     intensity values.  Each color component is stored as one
     binary byte (8 bit) and ranges from 0 through 255. The
     number of intensity values expected is determined by the
     ccccoooolllloooorrrrssss keyword.  Note, an image colormap is restricted to at
     most 65535 entries.  The binary pseudo-color image is stored
     as indexes into the colormap.  For colormaps of 256 colors
     or less, the indexes are stored as one binary byte (8 bit)
     and ranges from 0 through 255.  If the colormap size exceeds
     256 entries, then each colormap index is two bytes each with
     the most-significant-byte first.  The total number of pixels
     expected is equal to the number of pixel columns times the
     number of pixel rows as specified by the ccccoooolllluuuummmmnnnnssss and rrrroooowwwwssss
     keywords.

     If the ccccoooommmmpppprrrreeeessssssssiiiioooonnnn keyword is not specified, a colormap
     index is expected for each pixel of the image.

     If ccccoooommmmpppprrrreeeessssssssiiiioooonnnn is _R_u_n_l_e_n_g_t_h_E_n_c_o_d_e_d, each colormap index is
     followed by a count byte. This value  specifies the number
     of horizonally contiguous pixels in the image of that color.
     The count (0-255) is one less than the actual number of
     contiguous pixels; thus a single packet can represent from 1
     up to 256 identical pixels.  The total number of pixels
     specified by the individual count bytes must add up to the
     number of pixels expected in the image as specified by the



ImageMagick       Last change: 10 October 1992                  4






MIFF(5)                   FILE FORMATS                    MIFF(5)



     ccccoooolllluuuummmmnnnnssss and rrrroooowwwwssss keywords.  Use ppppaaaacccckkkkeeeettttssss to specify the total
     number of runlength-encoded packets that comprise the image.

SSSSEEEEEEEE AAAALLLLSSSSOOOO
     display(1), animate(1), import(1), montage(1), mogrify(1),
     convert(1), more(1), compress(1)

CCCCOOOOPPPPYYYYRRRRIIIIGGGGHHHHTTTT
     Copyright 1992 E. I. du Pont de Nemours & Company

     Permission to use, copy, modify, distribute, and sell this
     software and its documentation for any purpose is hereby
     granted without fee, provided that the above copyright
     notice appear in all copies and that both that copyright
     notice and this permission notice appear in supporting
     documentation, and that the name of E. I. du Pont de Nemours
     & Company not be used in advertising or publicity pertaining
     to distribution of the software without specific, written
     prior permission.  E. I. du Pont de Nemours & Company makes
     no representations about the suitability of this software
     for any purpose.  It is provided "as is" without express or
     implied warranty.

     E. I. du Pont de Nemours & Company disclaims all warranties
     with regard to this software, including all implied
     warranties of merchantability and fitness, in no event shall
     E. I. du Pont de Nemours & Company be liable for any
     special, indirect or consequential damages or any damages
     whatsoever resulting from loss of use, data or profits,
     whether in an action of contract, negligence or other
     tortious action, arising out of or in connection with the
     use or performance of this software.

AAAAUUUUTTTTHHHHOOOORRRRSSSS
     John Cristy, E.I. du Pont de Nemours & Company Incorporated




















ImageMagick       Last change: 10 October 1992                  5



