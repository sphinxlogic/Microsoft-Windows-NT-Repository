


LIBEXPECT(3)           C LIBRARY FUNCTIONS           LIBEXPECT(3)



NNNNAAAAMMMMEEEE
     libexpect - programmed dialogue with interactive programs  -
     C functions

SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
     ####iiiinnnncccclllluuuuddddeeee <<<<eeeexxxxppppeeeecccctttt....hhhh>>>>

     iiiinnnntttt
     eeeexxxxpppp____ssssppppaaaawwwwnnnnllll((((ffffiiiilllleeee,,,, aaaarrrrgggg0000 [[[[,,,, aaaarrrrgggg1111,,,, ............,,,, aaaarrrrggggnnnn]]]] ((((cccchhhhaaaarrrr ****))))0000))));;;;
     cccchhhhaaaarrrr ****ffffiiiilllleeee;;;;
     cccchhhhaaaarrrr ****aaaarrrrgggg0000,,,, ****aaaarrrrgggg1111,,,, ............ ****aaaarrrrggggnnnn;;;;

     iiiinnnntttt
     eeeexxxxpppp____ssssppppaaaawwwwnnnnvvvv((((ffffiiiilllleeee,,,,aaaarrrrggggvvvv))));;;;
     cccchhhhaaaarrrr ****ffffiiiilllleeee,,,, ****aaaarrrrggggvvvv[[[[ ]]]];;;;

     FFFFIIIILLLLEEEE ****
     eeeexxxxpppp____ppppooooppppeeeennnn((((ccccoooommmmmmmmaaaannnndddd))));;;;
     cccchhhhaaaarrrr ****ccccoooommmmmmmmaaaannnndddd;;;;

     eeeexxxxtttteeeerrrrnnnn iiiinnnntttt eeeexxxxpppp____ppppiiiidddd;;;;
     eeeexxxxtttteeeerrrrnnnn cccchhhhaaaarrrr ****eeeexxxxpppp____ssssttttttttyyyy____iiiinnnniiiitttt;;;;

     cccccccc ffffiiiilllleeeessss............ ----lllleeeexxxxppppeeeecccctttt


DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
     eeeexxxxpppp____ssssppppaaaawwwwnnnnllll and eeeexxxxpppp____ssssppppaaaawwwwnnnnvvvv fork a new  process  so  that  its
     stdin,  stdout,  and  stderr  can be written and read by the
     current process.  _f_i_l_e is the name of a file to be executed.
     The _a_r_g pointers are null-terminated strings.  Following the
     style of execve(), _a_r_g_0 (or _a_r_g_v[_0]) is customarily a dupli-
     cate of the name of the file.

     Three interfaces are available, eeeexxxxpppp____ssssppppaaaawwwwnnnnllll  is  useful  when
     the   number   of   arguments  is  known  at  compile  time.
     eeeexxxxpppp____ssssppppaaaawwwwnnnnvvvv is useful when the number  of  arguments  is  not
     known at compile time.  eeeexxxxpppp____ppppooooppppeeeennnn is explained later on.

     If the process is successfully created, a file descriptor is
     returned  which  corresponds  to the process's stdin, stdout
     and stderr.  A  stream  may  be  associated  with  the  file
     descriptor by using fdopen().  (This should almost certainly
     be followed by setbuf() to unbuffer the I/O.)

     Closing the file descriptor will typically  be  detected  by
     the process as an EOF.  Once such a process exits, it should
     be waited upon (via wait) in order to  free  up  the  kernel
     process  slot.  (Some systems allow you to avoid this if you
     ignore the SIGCHLD signal).





AT&T Bell LaboratoriesLast change: 12 December 1991                 1






LIBEXPECT(3)           C LIBRARY FUNCTIONS           LIBEXPECT(3)



     eeeexxxxpppp____ppppooooppppeeeennnn is yet another interface,  styled  after  popen().
     It  takes  a Bourne shell command line, and returns a stream
     that corresponds to the process's stdin, stdout and  stderr.
     The  actual  implementation  of eeeexxxxpppp____ppppooooppppeeeennnn below demonstrates
     eeeexxxxpppp____ssssppppaaaawwwwnnnnllll.

     FILE *
     exp_popen(program)
     char *program;
     {
          FILE *fp;
          int ec;

          if (0 > (ec = exp_spawnl("sh","sh","-c",program,(char *)0)))
               return(0);
          if (NULL == (fp = fdopen(ec,"r+")) return(0);
          setbuf(fp,(char *)0);
          return(fp);
     }

     After a process is started, the variable eeeexxxxpppp____ppppiiiidddd is  set  to
     the process-id of the new process.

     The spawn functions uses a pty to communicate with the  pro-
     cess.   By  default,  the pty is initialized the same way as
     the user's tty.  When this is not possible (i.e., expect was
     not started with a controlling terminal), ssssppppaaaawwwwnnnn uses the tty
     settings that correspond to "stty sane".   If  the  variable
     _e_x_p__s_t_t_y__i_n_i_t  is defined, it is interpreted in the style of
     stty arguments as further configuration for any pty used  by
     future ssssppppaaaawwwwnnnn commands.  For example, exp_stty_init = "sane";
     repeats the default initialization.


IIIIFFFF YYYYOOOOUUUU WWWWAAAANNNNTTTT TTTTOOOO AAAALLLLLLLLOOOOCCCCAAAATTTTEEEE YYYYOOOOUUUURRRR OOOOWWWWNNNN PPPPTTTTYYYY
     eeeexxxxtttteeeerrrrnnnn iiiinnnntttt eeeexxxxpppp____aaaauuuuttttooooaaaallllllllooooccccppppttttyyyy;;;;
     eeeexxxxtttteeeerrrrnnnn iiiinnnntttt eeeexxxxpppp____ppppttttyyyy[[[[2222]]]];;;;

     The spawn functions use a pty to communicate with  the  pro-
     cess.   By  default,  a  pty is automatically allocated each
     time a process is spawned.  If you  want  to  allocate  ptys
     yourself,  before  calling  one  of the spawn functions, set
     eeeexxxxpppp____aaaauuuuttttooooaaaallllllllooooccccppppttttyyyy to 0, eeeexxxxpppp____ppppttttyyyy[[[[0000]]]] to  the  master  pty  file
     descriptor  and eeeexxxxpppp____ppppttttyyyy[[[[1111]]]] to the slave pty file descriptor.
     The expect library  will  not  do  any  pty  initializations
     (e.g.,  exp_stty_init will not be used).  The slave pty file
     descriptor will be automatically closed when the process  is
     spawned.  After the process is started, all further communi-
     cation takes place with the master pty file descriptor.

     eeeexxxxpppp____ssssppppaaaawwwwnnnnllll and eeeexxxxpppp____ssssppppaaaawwwwnnnnvvvv duplicate the shell's  actions  in
     searching  for  an executable file in a list of directories.



AT&T Bell LaboratoriesLast change: 12 December 1991                 2






LIBEXPECT(3)           C LIBRARY FUNCTIONS           LIBEXPECT(3)



     The directory list is obtained from the environment.

EEEEXXXXPPPPEEEECCCCTTTT PPPPRRRROOOOCCCCEEEESSSSSSSSIIIINNNNGGGG
     While it is possible to use read() to read information  from
     a  process  spawned  by  eeeexxxxpppp____ssssppppaaaawwwwnnnnllll or eeeexxxxpppp____ssssppppaaaawwwwnnnnvvvv, more con-
     venient functions are provided.  They are as follows:

     iiiinnnntttt
     eeeexxxxpppp____eeeexxxxppppeeeeccccttttllll((((ffffdddd,,,,ppppaaaatttttttteeeerrrrnnnn1111,,,,vvvvaaaalllluuuueeee1111,,,,ppppaaaatttttttteeeerrrrnnnn2222,,,,vvvvaaaalllluuuueeee2222,,,,................,,,,((((cccchhhhaaaarrrr ****))))0000))));;;;
     iiiinnnntttt ffffdddd;;;;
     cccchhhhaaaarrrr ppppaaaatttttttteeeerrrrnnnn1111,,,, ppppaaaatttttttteeeerrrrnnnn2222,,,, ............;;;;
     iiiinnnntttt vvvvaaaalllluuuueeee1111,,,, vvvvaaaalllluuuueeee2222,,,, ............;;;;

     iiiinnnntttt
     eeeexxxxpppp____ffffeeeexxxxppppeeeeccccttttllll((((ffffpppp,,,,ppppaaaatttttttteeeerrrrnnnn1111,,,,vvvvaaaalllluuuueeee1111,,,,ppppaaaatttttttteeeerrrrnnnn2222,,,,vvvvaaaalllluuuueeee2222,,,,................,,,,((((cccchhhhaaaarrrr ****))))0000))));;;;
     FFFFIIIILLLLEEEE ****ffffpppp;;;;
     cccchhhhaaaarrrr ppppaaaatttttttteeeerrrrnnnn1111,,,, ppppaaaatttttttteeeerrrrnnnn2222,,,, ............;;;;
     iiiinnnntttt vvvvaaaalllluuuueeee1111,,,, vvvvaaaalllluuuueeee2222,,,, ............;;;;

     ssssttttrrrruuuucccctttt eeeexxxxpppp____ccccaaaasssseeee {{{{
          cccchhhhaaaarrrr ****ppppaaaatttttttteeeerrrrnnnn;;;;
          iiiinnnntttt vvvvaaaalllluuuueeee;;;;
     }}}};;;;

     iiiinnnntttt
     eeeexxxxpppp____eeeexxxxppppeeeeccccttttvvvv((((ffffdddd,,,,ccccaaaasssseeeessss))));;;;
     iiiinnnntttt ffffdddd;;;;
     ssssttttrrrruuuucccctttt eeeexxxxpppp____ccccaaaasssseeee ****ccccaaaasssseeeessss;;;;

     iiiinnnntttt
     eeeexxxxpppp____ffffeeeexxxxppppeeeeccccttttvvvv((((ffffpppp,,,,ccccaaaasssseeeessss))));;;;
     FFFFIIIILLLLEEEE ****ffffpppp;;;;
     ssssttttrrrruuuucccctttt eeeexxxxpppp____ccccaaaasssseeee ****ccccaaaasssseeeessss;;;;

     eeeexxxxtttteeeerrrrnnnn uuuunnnnssssiiiiggggnnnneeeedddd iiiinnnntttt eeeexxxxpppp____ttttiiiimmmmeeeeoooouuuutttt;;;;
     eeeexxxxtttteeeerrrrnnnn cccchhhhaaaarrrr ****eeeexxxxpppp____mmmmaaaattttcccchhhh;;;;
     eeeexxxxtttteeeerrrrnnnn iiiinnnntttt eeeexxxxpppp____mmmmaaaattttcccchhhh____mmmmaaaaxxxx;;;;

     The functions wait until the output from a  process  matches
     one  of the patterns, a specified time period has passed, or
     an EOF is seen.

     The first  argument  to  each  function  is  either  a  file
     descriptor  or  a stream.  Successive arguments are pairs of
     patterns and associated  integer  values.   eeeexxxxpppp____eeeexxxxppppeeeeccccttttvvvv  and
     eeeexxxxpppp____ffffeeeexxxxppppeeeeccccttttvvvv  are  useful when the number of patterns is not
     known in advance.  In this case, the pairs are  provided  in
     an  array.   The  end of the array is denoted by a pair with
     pattern (char *)0.  For the rest of this  discussion,  these
     functions will be referred to generically as _e_x_p_e_c_t.





AT&T Bell LaboratoriesLast change: 12 December 1991                 3






LIBEXPECT(3)           C LIBRARY FUNCTIONS           LIBEXPECT(3)



     If a  pattern  matches,  then  the  corresponding  value  is
     returned.   Values need not be unique.  Upon EOF or timeout,
     the value EEEEXXXXPPPP____EEEEOOOOFFFF or EEEEXXXXPPPP____TTTTIIIIMMMMEEEEOOOOUUUUTTTT is returned.   The  default
     timeout  period  is 10 seconds but may be changed by setting
     the variable eeeexxxxpppp____ttttiiiimmmmeeeeoooouuuutttt.  The exact string that matched (or
     had  been read if a timeout or EOF occurred) is saved in the
     variable eeeexxxxpppp____mmmmaaaattttcccchhhh.

     Each time new input arrives, it is compared to each  pattern
     in  the  order  they  are  listed.   Thus,  you may test for
     absence of a match by  making  the  last  pattern  something
     guaranteed to appear, such as a prompt.  In situations where
     there is no prompt, you must  check  for  EEEEXXXXPPPP____TTTTIIIIMMMMEEEEOOOOUUUUTTTT  (just
     like you would if you were interacting manually).  More phi-
     losophy and strategies on specifying eeeexxxxppppeeeecccctttt patterns can  be
     found  in  the  documentation on the eeeexxxxppppeeeecccctttt program, itself.
     See SEE ALSO below.

     Patterns are the usual  C-shell-style  regular  expressions.
     For  example,  the following fragment looks for a successful
     login, such as from a telnet dialogue.

          switch (exp_expectl(
               "*connected*",CONN,
               "*busy*",BUSY,
               "*failed*",ABORT,
               "*invalid password*",ABORT)) {
          case CONN:     /* logged in successfully */
               break;
          case BUSY:     /* couldn't log in at the moment */
               break;
          case EXP_TIMEOUT:
          case ABORT:    /* can't log in at any moment! */
               break;
          default: /* problem with expect */
          }

     Asterisks (as in the example above) are a  useful  shorthand
     for  omitting  line-termination characters and other detail.
     Patterns must match the entire output of the current process
     (since  the previous read on the descriptor or stream). More
     than 2000 bytes of output can  force  earlier  bytes  to  be
     "forgotten".   This  may  be changed by setting the variable
     eeeexxxxpppp____mmmmaaaattttcccchhhh____mmmmaaaaxxxx.  Note that excessively large values can  slow
     down the pattern matcher.

RRRRUUUUNNNNNNNNIIIINNNNGGGG IIIINNNN TTTTHHHHEEEE BBBBAAAACCCCKKKKGGGGRRRROOOOUUUUNNNNDDDD
     eeeexxxxtttteeeerrrrnnnn iiiinnnntttt eeeexxxxpppp____ddddiiiissssccccoooonnnnnnnneeeecccctttteeeedddd;;;;
     iiiinnnntttt ddddiiiissssccccoooonnnnnnnneeeecccctttt(((())));;;;

     It is possible to move a process into the  background  after
     it  has  begun  running.   A typical use for this is to read



AT&T Bell LaboratoriesLast change: 12 December 1991                 4






LIBEXPECT(3)           C LIBRARY FUNCTIONS           LIBEXPECT(3)



     passwords and then go into the background  to  sleep  before
     using the passwords to do real work.

     To move a process into the background,  fork,  call  discon-
     nect()  in  the  child process and exit() in the parent pro-
     cess.  This disassociates your process from the  controlling
     terminal.  If you wish to move a process into the background
     in a different way, you must set the variable exp_disconnect
     to  1.  This allows processes spawned after this point to be
     started correctly.

EEEERRRRRRRROOOORRRRSSSS
     All functions indicate errors by returning  -1  and  setting
     errno.

     Errors that occur after  the  spawn  functions  fork  (e.g.,
     attempting  to  spawn a non-existent program) are written to
     the process's stderr, and will be read by the first eeeexxxxppppeeeecccctttt.

SSSSIIIIGGGGNNNNAAAALLLLSSSS
     eeeexxxxtttteeeerrrrnnnn iiiinnnntttt eeeexxxxpppp____rrrreeeeaaaaddddiiiinnnngggg;;;;
     eeeexxxxtttteeeerrrrnnnn jjjjmmmmpppp____bbbbuuuuffff eeeexxxxpppp____rrrreeeeaaaaddddeeeennnnvvvv;;;;

     eeeexxxxppppeeeecccctttt uses alarm() to timeout, thus if you generate  alarms
     during eeeexxxxppppeeeecccctttt, it will timeout prematurely.

     Internally, eeeexxxxppppeeeecccctttt calls read() which can be interrupted  by
     signals.   If  you define signal handlers, you can choose to
     restart or abort  eeeexxxxppppeeeecccctttt's  internal  read.   The  variable,
     eeeexxxxpppp____rrrreeeeaaaaddddiiiinnnngggg, is true iff eeeexxxxppppeeeecccctttt's read has been interrupted.
     longjmp(exp_readenv,1)     will     abort     the      read.
     longjmp(exp_readenv,2) will restart the read.

DDDDEEEEBBBBUUUUGGGGGGGGIIIINNNNGGGG
     While I consider the library to be easy to use, I think that
     the  standalone  expect program is much, much, easier to use
     than working with the C compiler and its  usual  edit,  com-
     pile,  debug  cycle.  Unlike typical C programs, most of the
     debugging isn't getting the C compiler to accept  your  pro-
     grams  -  rather, it is getting the dialogue correct.  Also,
     translating scripts from expect to C is usually  not  neces-
     sary.   For  example,  the speed of interactive dialogues is
     virtually never an issue.   So  please  try  the  standalone
     'expect'  program first.  I suspect it is a more appropriate
     solution for most people than the library.

     Nonetheless, if you feel compelled to debug in C,  here  are
     some tools to help you.


     eeeexxxxtttteeeerrrrnnnn iiiinnnntttt eeeexxxxpppp____lllloooogggguuuusssseeeerrrr;;;;
     eeeexxxxtttteeeerrrrnnnn iiiinnnntttt eeeexxxxpppp____llllooooggggffffiiiilllleeee____aaaallllllll



AT&T Bell LaboratoriesLast change: 12 December 1991                 5






LIBEXPECT(3)           C LIBRARY FUNCTIONS           LIBEXPECT(3)



     eeeexxxxtttteeeerrrrnnnn FFFFIIIILLLLEEEE ****eeeexxxxpppp____llllooooggggffffiiiilllleeee;;;;
     eeeexxxxtttteeeerrrrnnnn iiiinnnntttt eeeexxxxpppp____iiiissss____ddddeeeebbbbuuuuggggggggiiiinnnngggg;;;;
     eeeexxxxtttteeeerrrrnnnn FFFFIIIILLLLEEEE ****eeeexxxxpppp____ddddeeeebbbbuuuuggggffffiiiilllleeee;;;;

     While expect dialogues seem very intuitive, trying to codify
     them  in  a program can reveal many surprises in a program's
     interface.  Therefore a variety of debugging aids are avail-
     able.   They are controlled by the above variables, all 0 by
     default.

     If eeeexxxxpppp____lllloooogggguuuusssseeeerrrr is nonzero,  eeeexxxxppppeeeecccctttt  sends  any  output  from
     eeeexxxxpppp____ppppttttyyyy  to  stdout.   Since  interactive programs typically
     echo their input, this usually suffices to show  both  sides
     of  the  conversation.  If eeeexxxxpppp____llllooooggggffffiiiilllleeee is also nonzero, this
     same output is written to the stream defined by eeeexxxxpppp____llllooooggggffffiiiilllleeee.
     If  eeeexxxxpppp____llllooooggggffffiiiilllleeee____aaaallllllll  is  non-zero,  eeeexxxxpppp____llllooooggggffffiiiilllleeee  is  written
     regardless of the value of eeeexxxxpppp____lllloooogggguuuusssseeeerrrr.

     Debugging information internal to eeeexxxxppppeeeecccctttt is sent  to  stderr
     when  eeeexxxxpppp____iiiissss____ddddeeeebbbbuuuuggggggggiiiinnnngggg  is non-zero.  The debugging informa-
     tion includes every character received,  and  every  attempt
     made  to  match  the current input against the patterns.  In
     addition,  non-printable  characters  are  translated  to  a
     printable form.  For example, a control-C appears as a caret
     followed by a C.  If eeeexxxxpppp____llllooooggggffffiiiilllleeee is non-zero, this  informa-
     tion is also written to that stream.

     If eeeexxxxpppp____ddddeeeebbbbuuuuggggffffiiiilllleeee  is  non-zero,  all  normal  and  debugging
     information  is  written  to  that stream, regardless of the
     value of eeeexxxxpppp____iiiissss____ddddeeeebbbbuuuuggggggggiiiinnnngggg.

CCCCAAAAVVVVEEEEAAAATTTTSSSS
     The eeeexxxxppppeeeecccctttt functions automatically remove nulls from  incom-
     ing  streams before doing pattern matching.  This allows the
     programmer (i.e., you) to use C-style strings in  the  argu-
     ments.

     The stream versions of the eeeexxxxppppeeeecccctttt functions are much  slower
     than the file descriptor versions because there is no way to
     portably read an unknown number of bytes without the  poten-
     tial  of  timing  out.   Thus,  characters are read one at a
     time.  You are therefore strongly encouraged to use the file
     descriptor  versions of eeeexxxxppppeeeecccctttt (although, automated versions
     of interactive programs don't usually demand high speed any-
     way).

     You can actually get the best of both worlds,  writing  with
     the  usual  stream  functions  and  reading  with  the  file
     descriptor versions of eeeexxxxppppeeeecccctttt as long as you  don't  attempt
     to  intermix other stream input functions (e.g., fgetc).  To
     do this, pass fileno(stream) as  the  file  descriptor  each
     time.   Fortunately,  there is little reason to use anything



AT&T Bell LaboratoriesLast change: 12 December 1991                 6






LIBEXPECT(3)           C LIBRARY FUNCTIONS           LIBEXPECT(3)



     but the eeeexxxxppppeeeecccctttt functions when reading from interactive  pro-
     grams.

     There is no matching exp_pclose to exp_popen  (unlike  popen
     and  pclose).   It  only takes two functions to close down a
     connection (fclose() followed by waiting on the pid), but it
     is  not uncommon to separate these two actions by large time
     intervals, so the function seems of little value.

     If you are running on a Cray running Unicos (all I know  for
     sure from experience), you must run your compiled program as
     root or setuid.  The problem is that the  Cray  only  allows
     root processes to open ptys. You should observe as much pre-
     cautions  as  possible:   If  you  don't  need  permissions,
     setuid(0)  only  immediately before calling one of the spawn
     functions and immediately set it back afterwards.

     Normally, ssssppppaaaawwwwnnnn takes little time to execute.  If you notice
     spawn  taking  a  significant amount of time, it is probably
     encountering ptys that are wedged.  A number  of  tests  are
     run  on  ptys  to avoid entanglements with errant processes.
     (These take 10 seconds per wedged pty.)  Running expect with
     the  -d option will show if eeeexxxxppppeeeecccctttt is encountering many ptys
     in odd states.  If you cannot kill the  processes  to  which
     these  ptys  are  attached,  your  only  recourse  may be to
     reboot.

BBBBUUUUGGGGSSSS
     The eeeexxxxpppp____ffffeeeexxxxppppeeeecccctttt functions don't work  at  all  under  HP-UX.
     Follow  the  advice (above) about using the eeeexxxxpppp____eeeexxxxppppeeeecccctttt func-
     tions.  If you fix the problem (before I do -  please  check
     the latest release) let me know.

SSSSEEEEEEEE AAAALLLLSSSSOOOO
     An alternative  to  this  library  is  the  eeeexxxxppppeeeecccctttt  program.
     eeeexxxxppppeeeecccctttt  interprets  scripts written in a high-level language
     which direct the dialogue.  In addition, the user  can  take
     control  and  interact  directly when desired.  If it is not
     absolutely necessary to write your own C program, it is much
     easier  to use eeeexxxxppppeeeecccctttt to perform the entire interaction.  It
     is described further in the following references:

     "_e_x_p_e_c_t: _C_u_r_i_n_g _T_h_o_s_e _U_n_c_o_n_t_r_o_l_l_a_b_l_e _F_i_t_s _o_f  _I_n_t_e_r_a_c_t_i_v_i_t_y"
     by  Don Libes, Proceedings of the Summer 1990 USENIX Confer-
     ence, Anaheim, California, June 11-15, 1990.

     "_U_s_i_n_g _e_x_p_e_c_t _t_o _A_u_t_o_m_a_t_e _S_y_s_t_e_m  _A_d_m_i_n_i_s_t_r_a_t_i_o_n  _T_a_s_k_s"  by
     Don Libes, Proceedings of the 1990 USENIX Large Installation
     Systems   Administration   Conference,   Colorado   Springs,
     Colorado, October 17-19, 1990.





AT&T Bell LaboratoriesLast change: 12 December 1991                 7






LIBEXPECT(3)           C LIBRARY FUNCTIONS           LIBEXPECT(3)



     expect(1),   alarm(3),   read(2),    write(2),    fdopen(3),
     execve(2), execvp(3), longjmp(3), pty(4).

     There are several examples C programs in the test  directory
     of   eeeexxxxppppeeeecccctttt's  source  distribution  which  use  the  expect
     library.

AAAAUUUUTTTTHHHHOOOORRRR
     Don Libes, libes@cme.nist.gov, National Institute  of  Stan-
     dards and Technology

AAAACCCCKKKKNNNNOOOOWWWWLLLLEEEEDDDDGGGGEEEEMMMMEEEENNNNTTTTSSSS
     Thanks to John Ousterhout  (UCBerkeley)  for  supplying  the
     pattern matcher.

     Design and implementation of the eeeexxxxppppeeeecccctttt library was paid for
     by  the  U.S.  government  and  is  therefore  in the public
     domain.  However the author and NIST would  like  credit  if
     this program and documentation or portions of them are used.




































AT&T Bell LaboratoriesLast change: 12 December 1991                 8



