


KIBITZ(1)                USER COMMANDS                  KIBITZ(1)



NNNNAAAAMMMMEEEE
     kibitz - allow two people to interact with one shell

SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
     kkkkiiiibbbbiiiittttzzzz _u_s_e_r [ _p_r_o_g_r_a_m _a_r_g_s... ]
     kkkkiiiibbbbiiiittttzzzz _u_s_e_r@_h_o_s_t [ _p_r_o_g_r_a_m _a_r_g_s... ]

IIIINNNNTTTTRRRROOOODDDDUUUUCCCCTTTTIIIIOOOONNNN
     kkkkiiiibbbbiiiittttzzzz allows two (or more)  people  to  interact  with  one
     shell (or any arbitrary program).  Uses include:

          +o   A novice user can ask  an  expert  user  for  help.
              Using  kkkkiiiibbbbiiiittttzzzz,  the expert can see what the user is
              doing, and offer advice or show how to do it right.

          +o   By running kkkkiiiibbbbiiiittttzzzz and then starting  a  full-screen
              editor,   people  may  carry  out  a  conversation,
              retaining the ability to scroll backwards, save the
              entire  conversation, or even edit it while in pro-
              gress.

          +o   People can team up on games, document  editing,  or
              other  cooperative  tasks  where  each  person  has
              strengths  and  weaknesses  that   complement   one
              another.

UUUUSSSSAAAAGGGGEEEE
     To start kkkkiiiibbbbiiiittttzzzz, user1 runs kibitz with the argument of  the
     user to kibitz.  For example:

          kibitz user2

     kkkkiiiibbbbiiiittttzzzz starts a new shell (or another program, if  given  on
     the  command line), while prompting user2 to run kkkkiiiibbbbiiiittttzzzz.  If
     user2 runs kkkkiiiibbbbiiiittttzzzz as directed, the keystrokes of both  users
     become  the  input  of  the  shell.   Similarly,  both users
     receive the output from the shell.

     To terminate kkkkiiiibbbbiiiittttzzzz  it  suffices  to  terminate  the  shell
     itself.  For example, if either user types ^D (and the shell
     accepts this to be EOF), the shell  terminates  followed  by
     kkkkiiiibbbbiiiittttzzzz.

     Normally, all characters are passed uninterpreted.  However,
     if  the  escape  character (described when kkkkiiiibbbbiiiittttzzzz starts) is
     issued, the user may talk  directly  to  the  kkkkiiiibbbbiiiittttzzzz  inter-
     preter.   Any  eeeexxxxppppeeeecccctttt(1)  or  TTTTccccllll(3)  commands may be given.
     Also, job control may be used while in the interpreter,  to,
     for example, suspend or restart kkkkiiiibbbbiiiittttzzzz.

AAAARRRRGGGGUUUUMMMMEEEENNNNTTTTSSSS
     kkkkiiiibbbbiiiittttzzzz understands a few special  arguments.   These  should



AT&T Bell LaboratoriesLast change: 12 December 1991                 1






KIBITZ(1)                USER COMMANDS                  KIBITZ(1)



     appear  before  the  user name.  Each should be separated by
     whitespace.  If the arguments  themselves  takes  arguments,
     these should also be separated by whitespace.

     The ----nnnnoooopppprrrroooocccc flag runs kkkkiiiibbbbiiiittttzzzz  with  no  process  underneath.
     Characters       are      passed      to      the      other
     kkkkiiiibbbbiiiittttzzzz.TTTThhhhiiiissssisppppaaaarrrrttttiiiiccccuuuullllaaaarrrrllllyyyyuseful    interactive     processes
     together.

     Note characters are not echoed back to the typist.   Various
     processes can provide echoing.  For example, you can emulate
     a two-way write(1) session with the command:

          kibitz user2 sleep 1000000

     ----nnnnooooeeeessssccccaaaappppeeee disables the escape character.

     ----eeeessssccccaaaappppeeee sets the escape character.  The default escape char-
     acter is ^].

     ----ssssiiiilllleeeennnntttt turns off  informational  messages  describing  what
     kibitz is doing to initiate a connection.

MMMMOOOORRRREEEE TTTTHHHHAAAANNNN TTTTWWWWOOOO UUUUSSSSEEEERRRRSSSS
     The current implementation of kibitz explicitly  understands
     only  two users, however, it is nonetheless possible to have
     a three (or more) -way kibitz, by kibitzing another  kkkkiiiibbbbiiiittttzzzz.
     For  example,  the  following  command  runs kkkkiiiibbbbiiiittttzzzz with the
     current user, user2, and user3:

          % kibitz user2 kibitz user3

     Additional users may  be  added  by  simply  appending  more
     "kibitz user" commands.

CCCCAAAAVVVVEEEEAAAATTTTSSSS
     kkkkiiiibbbbiiiittttzzzz assumes the 2nd user has the same terminal  type  and
     size  as  the  1st  user.   If this assumption is incorrect,
     graphical programs may display oddly.

     kkkkiiiibbbbiiiittttzzzz handles character graphics, but  cannot  handle  bit-
     mapped graphics.  Thus,

          % xterm -e kibitz    will work
          % kibitz xterm       will not work

     kkkkiiiibbbbiiiittttzzzz uses the same permissions as  used  by  rlogin,  rsh,
     etc.   Thus, you can only kkkkiiiibbbbiiiittttzzzz to users at hosts for which
     you can rlogin.  Similarly, kkkkiiiibbbbiiiittttzzzz will prompt for  a  pass-
     word on the remote host if rlogin would.

     If you kkkkiiiibbbbiiiittttzzzz to users at  remote  hosts,  kkkkiiiibbbbiiiittttzzzz  needs  to



AT&T Bell LaboratoriesLast change: 12 December 1991                 2






KIBITZ(1)                USER COMMANDS                  KIBITZ(1)



     distinguish  your  prompt from other things that may preceed
     it during login.  (Ideally, the end of it is  preferred  but
     any  part  should  suffice.)  If you have an unusual prompt,
     set the environment variable EXPECT_PROMPT to  an  egrep(1)-
     style regular expression.  Brackets should be preceeded with
     one backslash in ranges, and three backslashes  for  literal
     brackets.  The default prompt r.e. is "($|%|#) ".

     kkkkiiiibbbbiiiittttzzzz requires the kkkkiiiibbbbiiiittttzzzz program on  both  hosts.   kkkkiiiibbbbiiiittttzzzz
     rrrreeeeqqqquuuuiiiirrrreeeessss eeeexxxxppppeeeecccctttt(1).

     While  kkkkiiiibbbbiiiittttzzzz  currently  explicitly  understands  only  two
     users,  there  is  nothing  inherent to the technique kibitz
     uses internally about this limit.  The mind boggles at vari-
     ous  features  that  could  be added (dynamically adding and
     deleting arbitrary numbers of users and programs, simulating
     multiple  cursors,  etc).  Feel free to hack around with the
     program to add whatever features you like.

BBBBUUUUGGGGSSSS
     An early version of Sun's tmpfs had a bug in it that  causes
     kkkkiiiibbbbiiiittttzzzz  to  blow up.  If kkkkiiiibbbbiiiittttzzzz reports "error flushing ...:
     Is a directory" ask Sun for patch #100174.

     HPUX 8.0 is reported to require  cat(1)  to  be  unbuffered.
     Without it, characters are not passed at all.  If you are on
     such a system, edit the kibitz script.  Search for  catflags
     and  follow  the instructions at that point.  Alternatively,
     you may add the "-catu" flag to the invocation of kibitz.

SSSSEEEEEEEE AAAALLLLSSSSOOOO
     TTTTccccllll(3), lllliiiibbbbeeeexxxxppppeeeecccctttt(3)

AAAAUUUUTTTTHHHHOOOORRRR
     Don Libes, National Institute of Standards and Technology

AAAACCCCKKKKNNNNOOOOWWWWLLLLEEEEDDDDGGGGEEEEMMMMEEEENNNNTTTTSSSS
     Design and implementation of kkkkiiiibbbbiiiittttzzzz was paid for by the U.S.
     government  and  is therefore in the public domain.  However
     the author and NIST would like credit if  this  program  and
     documentation or portions of them are used.














AT&T Bell LaboratoriesLast change: 12 December 1991                 3



