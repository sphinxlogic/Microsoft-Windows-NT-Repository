


     CONSTRAINT(3X)                                     CONSTRAINT(3X)




     NAME
          Constraint - A description of the interface to constraint
          resources.

     CLASSES
          A sub-class of Core and Composite.

     DESCRIPTION
          When a constrained composite widget defines constraint
          resources, all of that widget's children effectively
          "inherit" all of those resources as their own.  These
          constraint resources are set and read just the same as any
          other resources defined for the child.  This resource
          "inheritance" extends exactly one generation down, or in
          other words only the first generation children of a
          constrained composite widget inherit that (the constrained
          composite) widget's constraint resources.

          For example, Panel has three children, a child of class
          XwstatictextWidgetClass, a child of class
          XwrowColWidgetClass, and a child of class XwFormWidgetClass.
          All of these children inherit all of the constraint
          resources defined by XwpanelWidgetClass.  None of the
          children of the rowCol child inherit any of the Panel
          constraint resources.  None of the children of the Form
          inherit any of the Panel constraint resources, but all of
          the children of the Form do inherit all of the constraint
          resources defined by the XwformWidgetClass.

          Because constraint resources are defined by the "parent"
          widgets and not the children, the child widgets never
          directly use the constraint resource data.  Constraint
          resource data is instead used by the parents to attach child
          specific data to children.

     SEE ALSO
          CORE(3X), XWPANEL(3X)
          Programming With Xt Intrinsics,
          Programming With Xlib.















     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     CORE(3X)                                                 CORE(3X)




     NAME
          CoreClass - the Xt Intrinsics core widget meta class

     SYNOPSIS
          #include <X11/StringDefs.h>
          #include <X11/Intrinsic.h>


     CLASSES
          All widgets are built from the Core class.

     DESCRIPTION
          The Core class is an Xt Intrinsics meta class.  It is never
          instantiated as a widget.  Its sole purpose is as a
          supporting superclass for other widget classes.  It provides
          resources required by all widgets: x y location, width,
          height, window border width, and so on.

     NEW RESOURCES
          Core defines a set of resource types used by the programmer
          to specify the data for widgets which are subclasses of
          Core.


                           Core Resource Set -- CORE(3X)
     Name                   Class                  Type             Default
     __________________________________________________________________________
     XtNancestorSensitive   XtCSenstitive          Boolean          TRUE
     XtNx                   XtCPosition            int              0
     XtNy                   XtCPosition            int              0
     XtNwidth               XtCWidth               int              0
     XtNheight              XtCHeight              int              0
     XtNdepth               XtCDepth               int              0
     XtNbackground          XtCBackground          Pixel            White
     XtNbackgroundPixmap    XtCPixmap              Pixmap           Unspecified
     XtNborderWidth         XtCBorderWidth         int              1
     XtNborderColor         XtCBorderColor         Pixel            Black
     XtNborderPixmap        XtCPixmap              Pixmap           Unspecified
     XtNsensitive           XtCSensitive           Boolean          TRUE
     XtNmappedWhenManaged   XtCMappedWhenManaged   Boolean          TRUE
     XtNdestroyCallback     XtCCallback            Pointer          NULL
     XtNtranslations        XtCTranslations        XtTranslations   NULL





          XtNancestorSensitive
               This argument specifies whether the immediate parent of
               the widget will receive input events.  Use the function
               XtSetSensitive if you are changing the argument to



     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     CORE(3X)                                                 CORE(3X)




               preserve data integrity (see XtNsensitive below).

          XtNx This argument contains the x-coordinate of the widget's
               upper left hand corner (excluding the border) in
               relation to its parent widget.  Programs should not
               change this argument directly, but use geometry manager
               requests instead in order to ensure proper
               relationships with other widgets are maintained.

          XtNy This argument contains the y-coordinate of the widget's
               upper left hand corner (excluding the border) in
               relation to its parent widget.  Programs should not
               change this argument directly, but use geometry manager
               requests instead in order to ensure proper
               relationships with other widgets are maintained.

          XtNwidth
               This argument contains the width of the widget's window
               in pixels, not including the border area. Programs
               should not change this argument directly, but use
               geometry manager requests instead in order to ensure
               proper relationships with other widgets are maintained.

          XtNheight
               This argument contains the height of the widget's
               window in pixels, not including the border area.
               Programs should not change this argument directly, but
               use geometry manager requests instead in order to
               ensure proper relationships with other widgets are
               maintained.

          XtNdepth
               Determines how many bits should be used for each pixel
               in the widget's window.  Programs should not change or
               set this, it will be set by the Xt Intrinsics when the
               widget is created.

          XtNbackground
               This argument specifies the background color for the
               widget.

          XtNbackgroundPixmap
               The application can specify a pixmap to be used for
               tiling the background. The first tile is place at the
               upper left hand corner of the widget's window.

          XtNborderWidth
               This argument sets the width of the border that
               surrounds the widget's window on all four sides.  The
               width is specified in pixels.  A width of zero means no
               border will show.



     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     CORE(3X)                                                 CORE(3X)




          XtNborderColor
               This argument specifies the color of the border.

          XtNborderPixmap
               The application can specify a pixmap to be used for
               tiling the border. The first tile is place at the upper
               left hand corner of the border.

          XtNsensitive
               This argument determines whether a widget will receive
               input events.  If a widget is sensitive, the Xt
               Intrinsic's Event Manager will dispatch to the widget
               all keyboard, mouse button, motion, window enter/leave,
               and focus events.  Insensitive widgets do not receive
               these events.  Use the function XtSetSensitive if you
               are changing the sensitivity argument.  That way you
               ensure that if a parent widget has XtNsensitive set to
               FALSE, the ancestor-sensitive flag of all its children
               will be appropriately set.

          XtNmappedWhenManaged
               If set to TRUE, the widget will be mapped (made
               visible) as soon as it is both realized and managed.
               If set to FALSE, the client is responsible for mapping
               and unmapping the widget.  If the value is changed from
               TRUE to FALSE after the widget has been realized and
               managed, the widget is unmapped.

          XtNdestroyCallback
               This is a pointer to a callback list containing
               routines to be called when the widget is destroyed.

          XtNtranslations
               This is a pointer to a translations list.

     INHERITED RESOURCES
          The Core class is the root class.  It inherits no resources.

     TRANSLATIONS
          None

     ACTIONS
          None

     ORIGIN
          MIT.

     SEE ALSO
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.



     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWARROW(3X)                                           XWARROW(3X)




     NAME
          XwarrowWidgetClass - the X Widget's arrow drawing widget

     SYNOPSIS
          #include <X11/StringDefs.h>
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>
          #include <Xw/Arrow.h>


     CLASSES
          The Arrow widget is built from the Core and XwPrimitive
          classes.

          The widget class to use when creating an arrow is
          XwarrowWidgetClass.  The class name for this widget is
          Arrow.

     DESCRIPTION
          The Arrow widget supports drawing of an arrow within the
          bounds of its window. It uses the primitive widget's border
          highlighting routines.

          The arrow can be drawn in the directions of up, down, left
          and right.  The Arrow widget also supports two types of
          callbacks: Button selections, and Button releases.

     NEW RESOURCES
          The Arrow widget defines a set of resources used by the
          programmer to specify the data for the arrow.  The
          programmer can also set the values for the Core and
          Primitive widget classes to set attributes for this widget.
          To reference a resource in a .Xdefaults file, strip off the
          XtN from the resource string.  The following table contains
          the set of resources defined by the Arrow widget.


                            Arrow Resource Set
          Name                Class               Type   Default
          ______________________________________________________
          XtNarrowDirection   XtCArrowDirection   int    up



          XtNarrowDirection
               This resource is the means by which the arrow direction
               is set.  It can be defined in either of two ways:
               Through the .Xdefaults file by the strings "up",
               "down", "left" and "right".  Within an arg list for use
               in XtSetValues() by the defines XwARROW_UP,
               XwARROW_DOWN, XwARROW_LEFT and XwARROW_RIGHT.



     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWARROW(3X)                                           XWARROW(3X)




     INHERITED RESOURCES
          The following resources are inherited from the named
          superclasses:


                           Core Resource Set -- CORE(3X)
     Name                   Class                  Type             Default
     __________________________________________________________________________
     XtNancestorSensitive   XtCSenstitive          Boolean          TRUE
     XtNx                   XtCPosition            int              0
     XtNy                   XtCPosition            int              0
     XtNwidth               XtCWidth               int              0
     XtNheight              XtCHeight              int              0
     XtNdepth               XtCDepth               int              0
     XtNbackground          XtCBackground          Pixel            White
     XtNbackgroundPixmap    XtCPixmap              Pixmap           Unspecified
     XtNborderWidth         XtCBorderWidth         int              1
     XtNborderColor         XtCBorderColor         Pixel            Black
     XtNborderPixmap        XtCPixmap              Pixmap           Unspecified
     XtNsensitive           XtCSensitive           Boolean          TRUE
     XtNmappedWhenManaged   XtCMappedWhenManaged   Boolean          TRUE
     XtNdestroyCallback     XtCCallback            Pointer          NULL
     XtNtranslations        XtCTranslations        XtTranslations   NULL





                    Primitive Resource Set -- XWPRIMITIVE(3X)
     Name                    Class                   Type      Default
     ________________________________________________________________________
     XtNforeground           XtCForeground           Pixel     Black
     XtNbackgroundTile       XtCBackgroundTile       int       background
     XtNtraversalType        XtCTraversalType        int       highlight_off
     XtNhighlightStyle       XtCHighlightStyle       int       pattern_border
     XtNhighlightColor       XtCForeground           Pixel     Black
     XtNhighlightTile        XtCHighlightTile        int       50_foreground
     XtNhighlightThickness   XtCHighlightThickness   int       0
     XtNrecomputeSize        XtCRecomputeSize        Boolean   TRUE
     XtNselect               XtCCallback             Pointer   NULL
     XtNrelease              XtCCallback             Pointer   NULL



     KEYBOARD TRAVERSAL
          If the XtNtraversalType resource is set to
          highlight_traversal (XwHIGHLIGHT_TRAVERSAL in an argument
          list) at create time or during a call to XtSetValues, the
          XwPrimitive superclass will automatically augment the
          primitive widget's translations to support keyboard
          traversal.  Refer to the XwPrimitive man page for a complete



     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWARROW(3X)                                           XWARROW(3X)




          description of these translations.  Refer to the
          TRANSLATIONS section in this man page for a description of
          the translations local to this widget.

     TRANSLATIONS
          Input to the Arrow widget is driven by the mouse buttons.
          The Primitive class resources of XtNselect and XtNrelease
          define the callback lists used by the Arrow widget.  Thus,
          to receive input from an arrow, the application adds
          callbacks to the arrow using these two resource types.  The
          default translation set for the Arrow widget is as follows.


              <Btn1Down>:        select()
              <Btn1Up>:          release()
              <EnterWindow>:     enter()
              <LeaveWindow>:     leave()
              <KeyDown>Select:   select()     HP "Select" key
              <KeyUp>Select:     unselect()   HP "Select" key


     ACTIONS
          select:
               Selections occurring on an arrow cause the arrow to be
               displayed as selected and its primitive XtNselect
               callbacks are called.

          release:
               Release redraws the arrow in its normal mode and calls
               its primitive XtNrelease callbacks.

          enter:
               If the XtNtraversalType resource has been set to
               XwHIGHLIGHT_ENTER then the arrow's border will be
               highlighted.  Otherwise no action is taken.

          leave:
               If the XtNtraversalType resource has been set to
               XwHIGHLIGHT_ENTER then the arrow's border will be
               unhighlighted.  Otherwise no action is taken.

     ORIGIN
          Hewlett-Packard Company.

     SEE ALSO
          CORE(3X), XWPRIMITIVE(3X), XWCREATETILE(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.





     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWBULLETIN(3X)                                     XWBULLETIN(3X)




     NAME
          XwbulletinWidgetClass - the X Widgets bulletin board manager
          widget.

     SYNOPSIS
          #include <X11/StringDefs.h>
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>
          #include <Xw/BBoard.h>


     CLASSES
          The bulletin board manager widget is built from the Core,
          Composite, Constraint and XwManager classes.  Note that the
          Constraint fields are not used in this widget and so are not
          listed in the resource tables below.  Also, since the
          Composite class contains no resources that the user can set,
          there is no table for Composite class resources.

          The widget class to use when creating a bulletin board is
          XwbulletinWidgetClass.  The class name is BulletinBoard.

     DESCRIPTION
          The bulletin board manager widget is a composite widget that
          enforces no ordering on its children.  It is up to the
          application to specify the x and y coordinates of the
          children inserted into this widget, otherwise they will all
          appear at (0,0).

          This manager widget supports 3 different layout policies:
          minimize (the default), maximize and ignore. When the layout
          policy is set to minimize, the manager will create a box
          that is just large enough to contain all of its children,
          regardless of any provided width and height values.  The
          ignore setting forces the manager to honor its given width
          and height, it will not grow or shrink in response to the
          addition, deletion or altering of its children.  When set to
          the maximize setting, the BulletinBoard widget will ask for
          additional space when it needs it, but will not give up
          extra space.

          The bulletin board manager also implements the X Widgets
          keyboard interface.

          No callbacks are defined for this manager.

     NEW RESOURCES
          The bulletin board manager widget class does not define any
          additional resources; all necessary resources are present in
          its superclasses. The programmer should refer to the man
          pages for the bulletin board's superclasses to determine the



     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWBULLETIN(3X)                                     XWBULLETIN(3X)




          resources that can be set and the defaults settings for
          these resources.

     INHERITED RESOURCES
          The following resources are inherited from the named
          superclasses:


                           Core Resource Set -- CORE(3X)
     Name                   Class                  Type             Default
     __________________________________________________________________________
     XtNancestorSensitive   XtCSenstitive          Boolean          TRUE
     XtNx                   XtCPosition            int              0
     XtNy                   XtCPosition            int              0
     XtNwidth               XtCWidth               int              10
     XtNheight              XtCHeight              int              10
     XtNdepth               XtCDepth               int              0
     XtNbackground          XtCBackground          Pixel            White
     XtNbackgroundPixmap    XtCPixmap              Pixmap           Unspecified
     XtNborderWidth         XtCBorderWidth         int              1
     XtNborderColor         XtCBorderColor         Pixel            Black
     XtNborderPixmap        XtCPixmap              Pixmap           Unspecified
     XtNsensitive           XtCSensitive           Boolean          TRUE
     XtNmappedWhenManaged   XtCMappedWhenManaged   Boolean          TRUE
     XtNdestroyCallback     XtCCallback            Pointer          NULL
     XtNtranslations        XtCTranslations        XtTranslations   NULL



                  Manager Resource Set -- XWMANAGER(3X)
       Name                Class               Type      Default
       ____________________________________________________________
       XtNforeground       XtCForeground       Pixel     Black
       XtNbackgroundTile   XtCBackgroundTile   int       background
       XtNtraversalOn      XtCTraversalOn      Boolean   TRUE
       XtNlayout           XtCLayout           int       minimize
       XtNnextTop          XtCCallback         Pointer   NULL



     KEYBOARD TRAVERSAL
          If the XtNtraversalOn resource is set to TRUE at create time
          or during a call to XtSetValues, the XwManager superclass
          will automatically augment the bulletin board manager
          widget's translations to support keyboard traversal.  Refer
          to the XwManager man page for a complete description of
          these translations.

     ORIGIN
          Hewlett-Packard Company.




     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWBULLETIN(3X)                                     XWBULLETIN(3X)




     SEE ALSO
          CORE(3X), XWMANAGER(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.

















































     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWBUTTON(3X)                                         XWBUTTON(3X)




     NAME
          XwbuttonWidgetClass - X Widget Button MetaClass

     SYNOPSIS
          #include <X11/StringDefs.h>
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>


     CLASSES
          The XwButtonClass is built from the Core and XwPrimitive
          classes.

     DESCRIPTION
          The XwButton class is an X Widget meta class.  It is never
          instantiated as a widget.  It provides a set of resources
          that are needed by a variety of other X Widgets (for
          example: XwtoggleWidgetClass and XwpushButtonWidgetClass).

     NEW RESOURCES
          The XwButtonClass defines a set of resource types used by
          the programmer to specify the data for widgets that are
          subclasses of XwButtonClass.  To specify any of these
          resources within the .Xdefaults file, drop the XtN prefix
          from the resource name.  For example, XtNfont becomes font.


                             Button Resource Set
     Name               Class              Type            Default
     ___________________________________________________________________
     XtNfont            XtCFont            XFontStruct *   Fixed
     XtNlabel           XtCLabel           caddr_t         NULL
     XtNlabelLocation   XtCLabelLocation   int             right
     XtNvSpace          XtCVSpace          int             2
     XtNhSpace          XtCHSpace          int             2
     XtNset             XtCSet             Boolean         FALSE
     XtNsensitiveTile   XtCSensitiveTile   int             75_foreground
     XtNborderWidth     XtCBorderWidth     int             0



          XtNfont
               The application may define the font to be used when
               displaying the button string.  Any valid X11 font may
               be used.

          XtNlabel
               The application may define the button label by
               providing a pointer to a null terminated character
               string.  If no label is provided the class name of the
               widget will be used.



     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWBUTTON(3X)                                         XWBUTTON(3X)




          XtNlabelLocation
               For those buttons that have a separate graphic, this
               field specifies whether the label should appear to the
               left or to the right of that graphic.  The acceptable
               values are the defines XwRIGHT (the default) and
               XwLEFT.

          XtNvSpace
               The application may determine the number of pixels of
               space left between the top of the button and the top of
               the button label, and between the bottom of the label
               and the bottom of the button.

          XtNhSpace
               The application may determine the number of pixels of
               space left between the left side of the button and the
               leftmost part of the button label, and between the
               rightmost part of the button label and the right side
               of the button.

          XtNset
               If set to true the button will display itself in its
               selected state.  This is useful for showing some
               conditions as active when a set of buttons appear.

          XtNsensitiveTile
               The application can determine the mix of foreground and
               background that will be used to draw text to show
               insensitivity. The #defines for setting the values
               through an arg list and the strings to be used in the
               .Xdefault file are described in XwCreateTile(3X).  The
               default is Xw75_FOREGROUND which is a 75/25 mix of
               foreground and background colors.

          XtNborderWidth
               This redefines the core class default border width from
               1 pixel to 0 pixels.

     ORIGIN
          Hewlett-Packard Company.

     SEE ALSO
          XWPRIMITIVE(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.








     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWCASCADE(3X)                                       XWCASCADE(3X)




     NAME
          XwcascadeWidgetClass - the X Widgets popup and pulldown
          menupane widget.

     SYNOPSIS
          #include <X11/Intrinsic.h>
          #include <X11/StringDefs.h>
          #include <Xw/Xw.h>
          #include <Xw/Cascade.h>


     CLASSES
          The Cascade menupane widget is built from the Core,
          Composite, Constraint, XwManager and XwMenuPane classes.
          Note that the Constraint fields are not used in this widget
          and are not listed in the resource tables below.  Also,
          since the Composite class contains no resources that can be
          set by the user, there is no table for Composite class
          resources.

          The widget class to use when creating a cascading menupane
          is XwcascadeWidgetClass.  The class name is Cascade.

     DESCRIPTION
          The Cascade menupane widget is a composite widget which may
          be used by an application when creating a set of menus.

          The Cascade menupane widget always displays its managed
          children in a single column, and always attempts to size
          itself to the smallest possible size, as described by the
          children it contains; as the children grow or shrink in
          size, the menupane will attempt to adapt its size
          accordingly.

          The Cascade menupane widget allows a title to be displayed
          at the top of the menupane, the bottom of the menupane, or
          at both places.  Additionally, the title may be either a
          text string or an image.  The title is always centered
          horizontally within the menupane.

          Refer to the manual page for XwManager(3X) for a description
          of how to specify the order in which menubuttons are
          inserted into a menupane.

     NEW RESOURCES
          The MenuPane defines a set of resource types used by the
          programmer to specify the data for the menupane.  The
          programmer can also set the values for the Core, Composite
          Manager and MenuPane widget classes to set attributes for
          this widget.  To specify any of these resources within the
          .Xdefaults file, simply drop the XtN prefix from the



     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWCASCADE(3X)                                       XWCASCADE(3X)




          resource name.  The following table contains the set of
          resources defined by Cascade.


                           Cascade Resource Set
           Name               Class              Type   Default
           ____________________________________________________
           XtNtitlePosition   XtCTitlePosition   int    top



          XtNtitlePosition
               This resource is used to control where the title is
               displayed within the cascading menupane.  To
               programmatically set this resource, use either the
               XwTOP, XwBOTTOM or XwBOTH define.  To set this resource
               using the .Xdefaults file, use one of the strings top,
               bottom or both.

     INHERITED RESOURCES
          The following resources are inherited from the named
          superclasses:


                           Core Resource Set -- CORE(3X)
     Name                   Class                  Type             Default
     __________________________________________________________________________
     XtNancestorSensitive   XtCSenstitive          Boolean          TRUE
     XtNx                   XtCPosition            int              0
     XtNy                   XtCPosition            int              0
     XtNwidth               XtCWidth               int              0
     XtNheight              XtCHeight              int              0
     XtNdepth               XtCDepth               int              0
     XtNbackground          XtCBackground          Pixel            White
     XtNbackgroundPixmap    XtCPixmap              Pixmap           Unspecified
     XtNborderWidth         XtCBorderWidth         int              1
     XtNborderColor         XtCBorderColor         Pixel            Black
     XtNborderPixmap        XtCPixmap              Pixmap           Unspecified
     XtNsensitive           XtCSensitive           Boolean          TRUE
     XtNmappedWhenManaged   XtCMappedWhenManaged   Boolean          TRUE
     XtNdestroyCallback     XtCCallback            Pointer          NULL
     XtNtranslations        XtCTranslations        XtTranslations   NULL












     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWCASCADE(3X)                                       XWCASCADE(3X)




                     Manager Resource Set -- XWMANAGER(3X)
     Name                    Class                   Type        Default
     ______________________________________________________________________
     XtNforeground           XtCForeground           Pixel       Black
     XtNbackgroundTile       XtCBackgroundTile       int         background
     XtNhighlightThickness   XtCHighlightThickness   int         0
     XtNtraversalOn           XtCTraversalOn          Boolean     FALSE




                   MenuPane Resource Set -- XWMENUPANE(3X)
     Name                  Class              Type            Default
     ____________________________________________________________________
     XtNtitleShowing       XtCTitleShowing    Boolean         FALSE
     XtNmgrTitleOverride   XtCTitleOverride   Boolean         FALSE
     XtNtitleType          XtCTitleType       int             XwSTRING
     XtNtitleString        XtCTitleString     String          widget name
     XtNtitleImage         XtCTitleImage      XImage *        NULL
     XtNfont               XtCFont            XFontStruct *   "fixed"
     XtNattachTo           XtCAttachTo        String          NULL
     XtNmnemonic           XtCMnemonic        String          NULL
     XtNselect             XtCCallback        Pointer         NULL


     TRANSLATIONS
          The input to the Cascade menupane widget is driven by the
          mouse buttons.  The default translations set by this widget
          are as follows:

               <Btn1Down>:        select()
               <LeaveWindow>:     leave()
               <visible>:         visible()
               <unmap>:           unmap()

     ACTIONS
          select:
               Informs the menu manager, if present, that a select
               occurred, and then invokes the select callbacks, unless
               instructed not to by the menu manager.  If no menu
               manager is present, then the select callbacks will be
               invoked.

          leave:
               This routine overrides the leave action routine
               provided by the XwManager meta class.

          visible:
               This action overrides the visible action routine
               provided by the XwManager meta class.




     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWCASCADE(3X)                                       XWCASCADE(3X)




          unmap:
               This action overrides the unmap action provided by the
               XwManager meta class.

     KEYBOARD TRAVERSAL
          If the XtNtraversalOn resource is set to TRUE at create time
          or during a call to XtSetValues, the XwManager superclass
          will automatically augment the manager widget's translations
          to support keyboard traversal.  Refer to the XwManager man
          page for a complete description of these translations.

     ORIGIN
          Hewlett-Packard Company.

     SEE ALSO
          CORE(3X), CONSTRAINT(3X), XWMANAGER(3X), XWMENUPANE(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.



































     Hewlett-Packard Company       - 4 -                   Aug 9, 1988






     XWCREATETILE(3X)                                 XWCREATETILE(3X)




     NAME
          XwCreateTile - create a tile suitable for area filling or
          patterned text.

     SYNOPSIS
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>

          Pixmap XwCreateTile (screen, foreground, background,
          tileType)
          Screen * screen;
          Pixel foreground;
          Pixel background;
          int tileType;


     ARGUMENTS
          screen
               This parameter contains the screen for which the tile
               is to be created.

          foreground
               This is the foreground color to use for creating the
               tile.

          background
               This is the background color to use for creating the
               tile.

          tileType
               This is an integer value representing a particular
               pattern to use when creating the tile.

     DESCRIPTION
          XwCreateTile is a function (not a widget) that creates and
          returns a pixmap of screen depth, using the foreground and
          background colors specified.  The tileType parameter is used
          to select the particular tile to create.  Duplicate requests
          for the same tile, screen, foreground and background are
          cached to reduce overhead.

          There are nine available tile types.  They are defined by a
          set of #define statements in the file Xw.h and are described
          in the following table.


     Define              Description
     ________________________________________________________________
     XwFOREGROUND        A tile of solid foreground
     XwBACKGROUND        A tile of solid background
     Xw25_FOREGROUND     A tile of 25% foreground, 75% background



     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWCREATETILE(3X)                                 XWCREATETILE(3X)




     Xw50_FOREGROUND     A tile of 50% foreground, 50% background
     Xw75_FOREGROUND     A tile of 75% foreground, 25% background
     XwHORIZONTAL_TILE   A tile of horizontal lines of the two colors
     XwVERTICAL_TILE     A tile of vertical lines of the two colors
     XwSLANT_RIGHT       A tile of slanting lines of the two colors
     XwSLANT_LEFT        A tile of slanting lines of the two colors


     To use a tile created by this function, the returned tile should
     be placed into the tile field of a graphics context, and the
     fill_style should be set to FillTiled.











































     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWCREATETILE(3X)                                 XWCREATETILE(3X)




     RESOURCES
          XwCreateTile gives the application or widget writer an easy
          mechanism to specify the tile type to use.  The tile type
          can be specified within the .Xdefaults file or an argument
          list.  A resource converter is present to convert .Xdefault
          strings into the matching defined value for each of the
          tiles.  The strings to be contained within the .Xdefaults
          file are as follows.


                    Xdefault String   Define
                    ___________________________________
                    foreground        XwFOREGROUND
                    background        XwBACKGROUND
                    25_foreground     Xw25_FOREGROUND
                    50_foreground     Xw50_FOREGROUND
                    75_foreground     Xw75_FOREGROUND
                    horizontal_tile   XwHORIZONTAL_TILE
                    vertical_tile     XwVERTICAL_TILE
                    slant_right       XwSLANT_RIGHT
                    slant_left        XwSLANT_LEFT


     For widget writers who wish to incorporate settable tiles within
     their resource set, the representation member of the resource
     definition should be set to the define XtRTileType.

     RETURN VALUES
          XwCREATETILE returns a pixmap if successful.  If an invalid
          tile type or screen is specified, 0 is returned.

     ORIGIN
          Hewlett-Packard Company.

     SEE ALSO
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.
















     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWFORM(3X)                                             XWFORM(3X)




     NAME
          XwformWidgetClass - the X Widget's general widget layout
          manager

     SYNOPSIS
          #include <X11/StringDefs.h>
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>
          #include <Xw/Form.h>


     CLASSES
          A Form widget is built from Core, Composite, Constraint and
          XwManager classes

          The widget class to use when creating a form is
          XwformWidgetClass.

          The class name of Form is Form.

     DESCRIPTION
          The Form widget is a constraint based manager that provides
          a layout language used to establish spatial relationships
          between its children and then manipulates these
          relationships when the Form is resized, new children are
          added to the Form, or its children are resized, unmanaged,
          remanaged or destroyed.

          The following list highlights the types of layout control
          provided by the form widget.

          Spanning Constraints
               A widget can be created with a set of constraints such
               that it spans the width or height of a form.  This is
               often used for the layout of scrollbars and titlebars.
               Constraints that cause a widget to span both the width
               and height of a form can also be specified.

          Row Constraints
               Sets of widgets can be set up as a row so that resizing
               a form may increase or decrease the spacing between the
               widgets.  The form may also make the widgets smaller if
               desired, but it will not allow the widgets to overlap.

          Column Constraints
               Sets of widgets can be displayed in a single column or
               in multiple columns.  The form may increase or decrease
               the spacing between widgets or resize the widgets, but
               it will not allow the widgets to overlap.

          Automatic Form Resizing



     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWFORM(3X)                                             XWFORM(3X)




               The form calculates new sizes or positions for its
               children whenever they change size or position.  The
               new orm size thus generated is passed as a geometry
               request to the parent of the form.  The parent can
               accept the request or modify it and return it as a
               geometry almost.  When a geometry almost is returned by
               the parent, the form respecifies the constraints to
               match the parent's reply size.

          Optimal Child Sizes and Positions
               The Form widget also calculates the sizes and positions
               of its children to both match the constraints defined
               and to match either the initial size of the widget or
               the size given when the widget was modified through
               XtSetValues.  These values are further constrained to
               match a given form size only when the form's size is
               being explicitly changed through its resize procedure,
               or its parent returns a geometry almost when the form
               makes a geometry request.

          Managing, Unmanaging and Destroying Children
               When a widget within a form is unmanaged or destroyed,
               it is removed from the constraint processing and the
               constraints are reprocessed to reposition and/or resize
               the form and its contents.  Any widgets that referenced
               it are rereferenced to the widget that it had been
               referencing.  For the unmanaged case, if the widget is
               remanaged, the widgets that were previously referencing
               it are rereferenced to it, thus preserving the original
               layout.

     NEW RESOURCES
          The Form does not add any new resources.  All of the
          functionality for the form is tied to its constraint
          resources.

     CONSTRAINT RESOURCES
          The following resources are attached to every widget
          inserted into Form.  To specify an of these resources within
          a .Xdefaults file, drop the XtN from the resource name.
          Refer to CONSTRAINT(3X) for a general discussion of
          constraint resources.












     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWFORM(3X)                                             XWFORM(3X)




              Constraint Resource Set -- Children of FORM(3X)
      Name               Class              Type      Default
      _______________________________________________________________
      XtNxRefName        XtCXRefName        String    NULL
      XtNxRefWidget      XtCXRefWidget      Widget    the parent form
      XtNxOffset         XtCXOffset         int       0
      XtNxAddWidth       XtCXAddWidth       Boolean   FALSE
      XtNxVaryOffset     XtCXVaryOffset     Boolean   FALSE
      XtNxResizable      XtCXResizable      Boolean   FALSE
      XtNxAttachRight    XtCXAttachRight    Boolean   FALSE
      XtNxAttachOffset   XtCXAttachOffset   int       0
      XtNyRefName        XtCYRefName        String    NULL
      XtNyRefWidget      XtCYRefWidget      Widget    the parent form
      XtNyOffset         XtCYOffset         int       0
      XtNyAddHeight      XtCYAddHeight      Boolean   FALSE
      XtNyVaryOffset     XtCYVaryOffset     Boolean   FALSE
      XtNyResizable      XtCYResizable      Boolean   FALSE
      XtNyAttachBottom   XtCYAttachBottom   Boolean   False
      XtNyAttachOffset   XtCYAttachOffset   int       0



          XtNxRefName XtNyRefName
               When a widget is added as a child of the form its
               position is determined by the widget it references.
               The reference widget must be created before the widget
               which references it is created.  These resources allow
               the name of the reference widget to be given.  The form
               converts this name to a widget to use for the
               referencing.  Any widget that is a direct child of the
               form or the form widget itself can be used as a
               reference widget.

          XtNxRefWidget XtNyRefWidget
               The application can specify the reference widget as
               either a string representing the name of the widget (as
               described above) or as the Widget ID value returned
               from XtCreateWidget.  This resource is the means by
               which a widget ID is specified.

          XtNxOffset XtNyOffset
               The location of a widget is determined by the widget it
               references.  As the default, a widget's position on the
               form exactly matches its reference widget's location.
               There are two additional pieces of data used to
               determine the location.  This resource defines an
               integer value representing the number of pixels to add
               to the reference widget's location when calculating the
               widget's location.

          XtNxAddWidth XtNyAddHeight



     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWFORM(3X)                                             XWFORM(3X)




               This resource indicates whether or not to add the width
               or height of the reference widget to a widget's
               location when determining the widget's position.

          XtNxVaryOffset XtNyVaryOffset
               When a form is resized, it processes the constraints
               contained within its children.  This resource allows
               the spacing between a widget and the widget it
               references to vary (either increase or decrease) when a
               form's size changes.  For widgets that directly
               reference the form widget this resource is ignored.
               The spacing between a widget and its reference widget
               can decrease to 0 pixels if the XtNAddWidth resource is
               FALSE or to 1 pixel if XtNAddWidth is TRUE.

          XtNxResizable XtNyResizable
               This resource specifies whether the form can resize
               (shrink) a widget.  When a form's size becomes smaller
               the form will resize its children only after all of the
               inter-widget spacing of widget's with their VaryOffset
               resource set to TRUE.  The form keeps track of a
               widgets initial size or size generated through
               XtSetValues so that when the form then becomes larger
               the widget will grow to it original size and no larger.

          XtNxAttachRight XtNyAttachBottom
               Widgets are normally referenced from "form left" to
               "form right" or from "form top" to "form bottom."  The
               attach resources allow this reference to occur on the
               opposite edge of the form.  These resources, when used
               in conjunction with the varyOffset resources, allow a
               widget to float along the right or bottom edge of the
               form.  This is done by setting both the Attach and
               VaryOffset resources to TRUE.  A widget can also span
               the width and height of the form by setting the Attach
               resource to TRUE and the VaryOffset resource to FALSE.

          XtNxAttachOffset XtNyAttachOffset
               When a widget is attached to the right or bottom edge
               of the form (through the above resources), the
               separation between the widget and the form is defaulted
               to 0 pixels.  This resource allows that separation to
               be set to some other value.  Also, for widgets that are
               not attached to the right or bottom edge of the form,
               this constraint specifies the minimum spacing between
               the widget and the form.

     INHERITED RESOURCES
          The following resources are inherited from the indicated
          superclasses:




     Hewlett-Packard Company       - 4 -                   Aug 9, 1988






     XWFORM(3X)                                             XWFORM(3X)




                           Core Resource Set -- CORE(3X)
     Name                   Class                  Type             Default
     __________________________________________________________________________
     XtNancestorSensitive   XtCSenstitive          Boolean          TRUE
     XtNx                   XtCPosition            int              0
     XtNy                   XtCPosition            int              0
     XtNwidth               XtCWidth               int              0
     XtNheight              XtCHeight              int              0
     XtNdepth               XtCDepth               int              0
     XtNbackground          XtCBackground          Pixel            White
     XtNbackgroundPixmap    XtCPixmap              Pixmap           Unspecified
     XtNborderWidth         XtCBorderWidth         int              1
     XtNborderColor         XtCBorderColor         Pixel            Black
     XtNborderPixmap        XtCPixmap              Pixmap           Unspecified
     XtNsensitive           XtCSensitive           Boolean          TRUE
     XtNmappedWhenManaged   XtCMappedWhenManaged   Boolean          TRUE
     XtNdestroyCallback     XtCCallback            Pointer          NULL
     XtNtranslations        XtCTranslations        XtTranslations   NULL






                           Manager Resource Set
       Name                Class               Type      Default
       ____________________________________________________________
       XtNforeground       XtCForeground       Pixel     Black
       XtNbackgroundTile   XtCBackgroundTile   int       background
       XtNtraversalOn      XtCTraversalOn      Boolean   FALSE
       XtNlayout           XtCLayout           int       minimize
       XtNnextTop          XtCCallback         Pointer   NULL



     KEYBOARD TRAVERSAL
          If the XtNtraversalOn resource is set to TRUE at either
          create time or during a call to XtSetValues, the XwManager
          superclass will automatically augment the manager widget's
          translations to support keyboard traversal.  Refer to the
          XwManager man page for a complete description of these
          translations.

     EXAMPLES
          The following examples list the desired layout of widgets
          within a form and the constraints needed to achieve the
          layout.

          TitleBar
               Use the following constraints to get a titlebar widget
               to span the top of a form the following constraints can



     Hewlett-Packard Company       - 5 -                   Aug 9, 1988






     XWFORM(3X)                                             XWFORM(3X)




               be used.  For a widget named title the .Xdefaults file
               will contain.


              *title.xRefName:        "form widget name"   attach to the left
                                                           edge of the form
              *title.xOffset:         5                    offset 5 pixels from
                                                           the left edge
              *title.xResizable:      TRUE                 title is
                                                           horizontally
                                                           resizable
              *title.xAttachRight:    TRUE                 attach to the right
                                                           edge of the form
              *title.xAttachOffset:   5                    offset 5 pixels from
                                                           right edge
              *title.yRefName:        "form widget name"   attach to the top
                                                           edge of the form



          Dynamic Scrolled Window
               The above constraints work generally for any widget
               type that is to span the form and that need to be
               resized as the form increases or decreases in size.
               For example, if the child widget is a scrolled window
               named sWin that dynamically resizes as the form resizes
               in both the horizontal and vertical directions the
               constraints are as follows.


























     Hewlett-Packard Company       - 6 -                   Aug 9, 1988






     XWFORM(3X)                                             XWFORM(3X)




              *sWin.xRefName:        "form widget name"   attach to the left
                                                          edge of the form
              *sWin.xOffset:         5                    offset 5 pixels from
                                                          the left edge
              *sWin.xResizable:      TRUE                 scrollWin is
                                                          horizontally
                                                          resizable
              *sWin.xAttachRight:    TRUE                 attach to the right
                                                          edge of the form
              *sWin.xAttachOffset:   5                    offset 5 pixels from
                                                          right edge

              *sWin.yRefName:        "form widget name"   attach to the top
                                                          edge of the form
              *sWin.yOffset:         5                    offset 5 pixels from
                                                          the left edge
              *sWin.yResizable:      TRUE                 scrollWin is
                                                          vertically resizable
              *sWin.yAttachRight:    TRUE                 attach to the bottom
                                                          edge of the form
              *sWin.yAttachOffset:   5                    offset 5 pixels from
                                                          right edge




          Right or Bottom Attached Widgets
               For a widget named widget to float along the right or
               bottom edge of the form as it is resized the constraint
               set is the same as for the titlebar example with the
               following changes.


              *widget.xRefName:     "any widget name"   the widget to the
                                                        left of this one
              *widget.varyOffset:   TRUE                adjust the spacing
                                                        with the reference
                                                        widget



          Columns of Widgets
               A set of widgets within a form can be arranged in
               columns by using of the constraint language.  The
               following set of constraints sets up two columns of
               widgets.  The naming of the widgets for this example is
               wI,J where I is the column and J is the row.







     Hewlett-Packard Company       - 7 -                   Aug 9, 1988






     XWFORM(3X)                                             XWFORM(3X)




                  *w0,0.xRefName:     "form widget name"
                  *w0,0.xOffset:      5
                  *w0,0.xResizable:   TRUE
                  *w0,0.yRefName:     "form widget name"
                  *w0,0.yOffset:      5
                  *w0,0.yResizable:   TRUE

                  *w0,1.xRefName:     widget0,0
                  *w0,1.xResizable:   TRUE
                  *w0,1.yRefName:     widget0,0
                  *w0,1.yOffset:      5
                  *w0,1.yAddHeight:   TRUE
                  *w0,1.yResizable:   TRUE

                  *w1,0.xRefName:     widget0,0
                  *w1,0.xOffset:      20
                  *w1,0.yAddWidth:    TRUE
                  *w1,0.xResizable:   TRUE
                  *w1,0.yRefName:     widget0,0
                  *w1,0.yOffset:      5
                  *w1,0.yAddHeight:   TRUE
                  *w1,0.yResizable:   TRUE

                  *w1,1.xRefName:     widget1,0
                  *w1,1.xResizable:   TRUE
                  *w1,1.yRefName:     widget1,0
                  *w1,1.yOffset:      5
                  *w1,1.yAddHeight:   TRUE
                  *w1,1.yResizable:   TRUE


     ORIGIN
          Hewlett-Packard Company.

     SEE ALSO
          CORE(3X), COMPOSITE(3X), CONSTRAINT(3X), XWMANAGERCLASS(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.















     Hewlett-Packard Company       - 8 -                   Aug 9, 1988






     XWIMAGEEDIT(3X)                                   XWIMAGEEDIT(3X)




     NAME
          XwimageEditWidgetClass - the X Widget's image editor widget

     SYNOPSIS
          #include <X11/StringDefs.h>
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>
          #include <Xw/ImageEdit.h>


     CLASSES
          ImageEdit is built from the Core and Primitive classes.

          The widget class to use when creating an image editor is
          XwimageEditWidgetClass.

           The class name is ImageEdit.

     DESCRIPTION
          The ImageEdit widget allows an image to be displayed in an
          enlarged format so that it may be edited on a pixel-by-pixel
          basis. The specified image is displayed in a grid structure
          so that a user may see and modify the composition.

          To change the image, the user moves the mouse to the desired
          point and presses the mouse button. The pixel under the
          cursor will change to the foreground color. If the cursor is
          moved while the button is pressed, all pixels that are
          touched will change to the foreground color.

     NEW RESOURCES
          The ImageEdit defines a set of resource types that can be
          used by the programmer to control the appearance and
          behavior of the widget.  The programmer can also set the
          values for the Core and Primitive widget classes to set
          attributes for this widget. To reference a resource in a
          .Xdefaults file, strip off the XtN from the resource string
          name.  The following table contains the set of resources
          defined by ImageEdit.















     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWIMAGEEDIT(3X)                                   XWIMAGEEDIT(3X)




                          ImageEdit Resource Set
         Name               Class              Type       Default
         ________________________________________________________
         XtNimage           XtCImage           XImage *   NULL
         XtNpixelScale      XtCPixelScale      int        6
         XtNgridThickness   XtCGridThickness   int        1
         XtNdrawColor       XtCBackground      Pixel      Black
         XtNeraseColor      XtCBackground      Pixel      White
         XtNeraseOn         XtCEraseOn         Boolean    True
         XtNbackground      XtCBackground      Pixel      Black



          XtNimage
               This is a pointer to the image that is displayed in the
               grid.  It points to an XImage structure.

          XtNpixelScale
               This resource defines the magnification factor to use
               when displaying the expanded image.

          XtNgridThickness
               This resource defines the separation between the
               magnified pixels.

          XtNdrawColor
               This resource define the color to be used for drawing
               in the widget.

          XtNeraseColor
               This resource defines the color used for erasing in the
               widget.  Erase is enabled by the eraseOn resource.
               When selections occur on the widget, the widget
               determines the color of the pixel selected.  If the
               selected pixel is not the same as the draw color, the
               draw color will be used to draw until the button
               release occurs.  If the selected pixel is the draw
               color, the erase color will be used for drawing until
               the button release occurs.

          XtNeraseOn
               This resource is a boolean variable that indicates
               whether erasing is enabled or not.  If set to TRUE,
               drawing will occur as described above.  If set to
               FALSE, only the draw color will be used for drawing.

          XtNbackground
               ImageEdit redefines the core class background resource
               to default it to the color black.  This is then used as
               the background color for the widget's window which will
               be reflected in the grid color.



     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWIMAGEEDIT(3X)                                   XWIMAGEEDIT(3X)




     INHERITED RESOURCES
          The following resources are inherited from the named
          superclasses:


                           Core Resource Set -- CORE(3X)
     Name                   Class                  Type             Default
     __________________________________________________________________________
     XtNancestorSensitive   XtCSenstitive          Boolean          TRUE
     XtNx                   XtCPosition            int              0
     XtNy                   XtCPosition            int              0
     XtNwidth               XtCWidth               int              0
     XtNheight              XtCHeight              int              0
     XtNdepth               XtCDepth               int              0
     XtNbackground          XtCBackground          Pixel            White
     XtNbackgroundPixmap    XtCPixmap              Pixmap           Unspecified
     XtNborderWidth         XtCBorderWidth         int              1
     XtNborderColor         XtCBorderColor         Pixel            Black
     XtNborderPixmap        XtCPixmap              Pixmap           Unspecified
     XtNsensitive           XtCSensitive           Boolean          TRUE
     XtNmappedWhenManaged   XtCMappedWhenManaged   Boolean          TRUE
     XtNdestroyCallback     XtCCallback            Pointer          NULL
     XtNtranslations        XtCTranslations        XtTranslations   NULL





                    Primitive Resource Set -- XWPRIMITIVE(3X)
     Name                    Class                   Type      Default
     ________________________________________________________________________
     XtNforeground           XtCForeground           Pixel     Black
     XtNbackgroundTile       XtCBackgroundTile       int       background
     XtNtraversalType        XtCTraversalType        int       highlight_off
     XtNhighlightStyle       XtCHighlightStyle       int       pattern_border
     XtNhighlightColor       XtCForeground           Pixel     Black
     XtNhighlightTile        XtCHighlightTile        int       50_foreground
     XtNhighlightThickness   XtCHighlightThickness   int       0
     XtNrecomputeSize        XtCRecomputeSize        Boolean   TRUE
     XtNselect               XtCCallback             Pointer   NULL
     XtNrelease              XtCCallback             Pointer   NULL



     KEYBOARD TRAVERSAL
          If the XtNtraversalType resource is set to
          highlight_traversal (XwHIGHLIGHT_TRAVERSAL in an argument
          list) at either create time or during a call to XtSetValues,
          the XwPrimitive superclass will automatically augment the
          primitive widget's translations to support keyboard
          traversal.  Refer to the XwPrimitive man page for a complete



     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWIMAGEEDIT(3X)                                   XWIMAGEEDIT(3X)




          description of these translations.  Refer to the
          TRANSLATIONS section in this man page for a description of
          the translations local to this widget.

     TRANSLATIONS
          The following translations are defined for the ImageEdit
          widget.

               <BtnDown>:            select()
               <BtnUp>:              release()
               Button1<PtrMoved>:    moved()
               <EnterWindow>:        enter()
               <LeaveWindow>:        leave()

     ACTIONS
          select:  Selections occurring on an image edit cause drawing
          or erasing on the selected pixel, activate the moved action
          for continuous drawing and invoke the primitive class
          XtNselect callback functions.

          release:  Release concludes a drawing sequence and invokes
          primitive class XtNrelease callbacks.

          moved:  Moved causes drawing or erasing to occur from the
          last cursor position to the current cursor position.

          enter:  If the XtNtraversalType resource has been set to
          XwHIGHLIGHT_ENTER then the image edit's border will be
          highlighted.  Otherwise no action is taken.

          leave:  If the XtNtraversalType resource has been set to
          XwHIGHLIGHT_ENTER then the image edit's border will be
          unhighlighted.  Otherwise no action is taken.

     ORIGIN
          Hewlett-Packard Company.

     SEE ALSO
          CORE(3X), XWPRIMITIVE(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.












     Hewlett-Packard Company       - 4 -                   Aug 9, 1988






     XWLIST(3X)                                             XWLIST(3X)




     NAME
          XwlistWidgetClass - the X Widget's list manager widget

     SYNOPSIS
          #include <X11/StringDefs.h>
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>
          #include <Xw/SWindow.h>
          #include <Xw/List.h>


     CLASSES
          List is built from the Core, Composite, Constraint,
          XwManager and XwSWindow classes.

          The widget class to use when creating a list manager is
          XwlistWidgetClass. The class name is List.

     DESCRIPTION
          The List widget allows a two-dimensional set of widgets to
          be presented to the user in a rows/columns fashion.  The
          layout will typically consist of n columns, not all of which
          need to be visible on the screen at one time.  Each column
          will have some number of objects, such as labels or icons,
          arranged vertically.  Separate columns may have unequal
          numbers of members--column A may have 10 elements, while
          column B has 17 elements.  All members of each column are
          not required to be visible on the screen.  The entire list
          window can be scrolled either vertically or horizontally,
          but the individual columns cannot be individually scrolled.
          If an application needs to have columnar scrolling, it may
          instanstiate multiple List widgets, each having only one
          column.

          By default, each column is wide enough to display the
          longest item in the data.  A resource is availible to allow
          each column to be a fixed width, with the excess characters
          being clipped.  When the List widget is shrunk by a Resize
          call, columns that are beyond the right edge of the new size
          will be clipped. List elements are also adjusted to force a
          common height, with each element being set to the height of
          the tallest member of the column.  This automatic sizing can
          be turned off through a resource, or forced to an arbitrary
          height.  If a constant height is selected, any element that
          will not fit in the specified space will be clipped.

          The List widget provides management and layout functions for
          its elements, as well as a means for the user to choose
          elements, and allows an application to be notified when
          those elements are selected.  However, it is the
          responsibility of the application to create the actual



     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWLIST(3X)                                             XWLIST(3X)




          widgets that are to be inserted into the list.  The widgets
          may be of any type, but currently only Primitive class
          widgets will work correctly.

          To construct a list, the application must create each
          element as a child of the List widget. The row and column
          position of the element can be specified by means of a
          constraint resource.  If the row and column are not given,
          the list will be constructed as a one column by n row
          structure. The List widget will fill in the position of the
          element and store it in the constraint record so that it may
          be examined later.

          The List widget supports two methods of choosing an item
          from its displayed list: single and multiple.  A resource
          controls which mode is currently active.

          In single choice  mode, the user may move the cursor onto
          any element in the list and click the mouse button defined
          as "Begin Select." By default, this is the left button.
          When the button is pressed, the list item is highlighted.
          If the user drags the mouse with the button held down, the
          highlighted selection will track the pointer.  If the
          pointer moves off the currently highlighted item,  it will
          become unselected, returning to its original state, and the
          item that the pointer has moved onto becomes highlighted.
          When the user releases the button, the currently selected
          item becomes the "choice," and the List widget invokes the
          select callback associated with the chosen item.  The
          application must take over the widget's select callback in
          order to be notified that the item has been selected.

          Multiple  item  selection  is designed to allow the user to
          easily select several elements from the displayed list.
          When the user  presses the mouse button bound to "Begin
          Select,"  the item currently under the pointer is
          highlighted to indicate that it is included in the selection
          set.  As the user drags the mouse with the button down, the
          original choice remains highlighted, and any new items that
          the pointer touches also becomes highlighted.  At any time,
          the user can "back up" the selection by leaving an item on
          the same side as it was entered.  When the user finally
          releases the button, all highlighted elements are marked as
          chosen, and the selection callback is invoked for each item.

          Selections can be either "sticky" or "instant." The
          selection mode is set through a resource. If set to sticky,
          the selection will remain highlighted after the user
          releases the mouse button, and will not be cleared until the
          next button press. In instant mode, the highlight will
          dissappear when the button is released.



     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWLIST(3X)                                             XWLIST(3X)




          The selection mechanism can be affected by a "bias" that is
          controlled  through  a widget  resource.  The  allowable
          bias types are row, column, and none (default).  In this
          mode only list items that are actually  touched with the
          pointer are included in the selection.  In Row Bias mode.
          entire rows of items may be selected by moving the pointer
          vertically within a column.  For example, consider the
          following case:


               1       2       3       4       5       6
               7       8       9       10      11      12
               13      14      15      16      17      18


     If the user pressed the mouse button when the pointer was over
     item 3 and then moved to item 9, items 4 thru 8 would also be
     highlighted.  In Column Bias mode, entire columns can be selected
     by movement between rows.  Using the above  diagram, and assuming
     column bias, if the user clicked on item 2 and moved to item 3,
     elements 8 and 14 would also be selected.

          Additional  selections  can be made without  disturbing the
          original by following the above  procedures, by depressing
          the button bound to the "Begin Extended Choice" function
          (which is defined as SHIFT + Left button in the default
          case).

          The visual effect of highlighting can be accomplished in two
          ways: simple border highlighting, and inverse video.  This
          may be configured through a List widget resource.  Both
          styles are necessary--the inverse style of highlighting is
          by far the most common and natural interface, but could
          possibly conflict with an application or window manager that
          uses inverse to indicate the X11 "selection."  The default
          highlighting style is inverse.

          A user can select items that are not currently visible by
          simply extending the selection out of the visible window in
          the desired direction.  The list will automatically scroll
          under the selection as needed, until there are no more list
          elements availible in the given direction.  For example, in
          single-selection mode, if the user were to begin the
          selection on a visible element, and then drag the cursor
          down the column past the last visible item, the window would
          scroll up to display further choices.

          When a list element is destroyed, the list will be re-
          ordered according to the value of the XtNdestroyMode
          resource. When it is XwSHRINK_COLUMN (the default), all list
          elements below the affected widget and in the same column



     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWLIST(3X)                                             XWLIST(3X)




          will be moved up one row, and their row constraint resources
          will be updated to reflect the new positioning. When this
          resource is set to XwSHRINK_ALL, the elements will be moved
          in a row-wise fashion to fill the spot left by the affected
          element.  The widget to the right of the affected one will
          be moved to the left, and so on to the last column. The
          first element of the next row will be moved into the last
          spot on the current column. This process will continue for
          all remainin g rows in the list. If the value of this
          resource is XwNO_SHRINK, the list will not change its
          ordering and a "hole " will appear in the place of the
          affected element.

     NEW RESOURCES
          The List widget defines a unique set of resource types which
          can be used by the programmer to control the appearence and
          behavior of the list.  The programmer can also set the
          values for the Core, Composite, Constraint, Manager and
          SWindow widget classes to set attributes for this widget.
          To reference a resource in a .Xdefaults file, drop the XtN
          from the resource name.  The following table contains the
          set of resources defined by List.


                                    List Resource Set
     Name                     Class                    Type          Default
     _______________________________________________________________________________
     XtNnumColumns            XtCNumColumns            int           1
     XtNcolumnWidth           XtCColumnWidth           int           0
     XtNelementHeight         XtCElementHeight         int           0
     XtNselectionStyle        XtCSelectionStyle        int           XwINSTANT
     XtNselectionMethod       XtCSelectionMethod       int           XwSINGLE
     XtNselectionBias         XtCSelectionBias         int           XwNO_BIAS
     XtNelementHighlight      XtCElementHighlight      int           XwBORDER
     XtNdestroyMode           XtCDestroyMode           int           XwSHRINK_COLUMN
     XtNnumSelectedElements   XtCNumSelectedElements   int           0
     XtNselectedElements      XtCSelectedElements      WidgetList*   NULL



          XtNnumColumns
               The number of columns in the list.

          XtNcolumnWidth
               The width of each column. If the value is 0, the width
               defaults to the width of the largest element.

          XtNelementHeight
               The height of each element. Zero implies that each
               element is resized to the height of the tallest
               element.



     Hewlett-Packard Company       - 4 -                   Aug 9, 1988






     XWLIST(3X)                                             XWLIST(3X)




          XtNselectionStyle
               Controls the type of selection - either XwINSTANT or
               XwSTICKY.

          XtNselectionMethod
               Controls the selection mode - either one element at a
               time (XwSINGLE) or multiple (XwMULTIPLE).

          XtNselectionBias
               Bias mode - either XwNO_BIAS, XwROW_BIAS or XwCOL_BIAS.

          XtNelementHighlight
               This controls the highlight mode on selection - either
               border highlighting (XwBORDER) or inversion (XwINVERT).

          XtNdestroyMode
               Controls the visual appearance of the list when an
               element is deleted. One of XwSHRINK_COLUMN,
               XwSHRINK_ALL or XwNO_SHRINK.

          XtNSelectedElements
               This is a list of the widgets currently marked as
               selected. An application program can issue a call to
               XtGetValues on this resource at any time to query the
               selected elements.

          XtNnumSelectedElements
               The number of widgets currently selected (in the list
               pointed to by XtNselectedElements).

     CONSTRAINT RESOURCES
          The following resources are attached to every widget
          inserted into List.  Refer to CONSTRAINT(3X) for a general
          discussion of constraint resources.


            Constraint Resource Set -- Children of XWLIST(3X)
          Name                Class               Type   Default
          ______________________________________________________
          XtNrowPosition      XtCRowPosition      int    -1
          XtNcolumnPosition   XtCColumnPosition   int    -1



          XtNrowPosition,XtNcolumnPosition
               This is the row,column location of the element in the
               list.  If these values are greater than or equal to
               zero, the widget is inserted into the list at that
               position. If the values are left at -1, the List widget
               will create a list with XtNnumColumns number of
               columns, assigning row and column positions as needed.



     Hewlett-Packard Company       - 5 -                   Aug 9, 1988






     XWLIST(3X)                                             XWLIST(3X)




     INCORPORATED RESOURCES
          No incorporated resources are currently exported by the List
          widget.

     INHERITED RESOURCES
          The following resources are inherited from the named
          superclasses:


            ScrolledWindow Resource Set - XWSCROLLEDWINDOW(3X)
      Name                   Class                  Type      Default
      _______________________________________________________________
      XtNvsbX                XtCVsbX                int       -1
      XtNvsbY                XtCVsbY                int       -1
      XtNvsbWidth            XtCVsbWidth            int       20
      XtNvsbHeight           XtCVsbHeight           int       285
      XtNhsbX                XtCHsbX                int       -1
      XtNhsbY                XtCHsbY                int       -1
      XtNhsbWidth            XtCHsbWidth            int       285
      XtNhsbHeight           XtCHsbHeight           int       20
      XtNforceHorizontalSB   XtCForceHorizontalSB   Boolean   FALSE
      XtNforceVerticalSB     XtCForceVerticalSB     Boolean   FALSE
      XtNvScrollEvent        XtCCallBack            Pointer   NULL
      XtNhScrollEvent        XtCCallBack            Pointer   NULL
      XtNinitialX            XtCInitialX            int       0
      XtNinitialY            XtCInitialY            int       0



                           Core Resource Set -- CORE(3X)
     Name                   Class                  Type             Default
     __________________________________________________________________________
     XtNancestorSensitive   XtCSenstitive          Boolean          TRUE
     XtNx                   XtCPosition            int              0
     XtNy                   XtCPosition            int              0
     XtNwidth               XtCWidth               int              0
     XtNheight              XtCHeight              int              0
     XtNdepth               XtCDepth               int              0
     XtNbackground          XtCBackground          Pixel            White
     XtNbackgroundPixmap    XtCPixmap              Pixmap           Unspecified
     XtNborderWidth         XtCBorderWidth         int              1
     XtNborderColor         XtCBorderColor         Pixel            Black
     XtNborderPixmap        XtCPixmap              Pixmap           Unspecified
     XtNsensitive           XtCSensitive           Boolean          TRUE
     XtNmappedWhenManaged   XtCMappedWhenManaged   Boolean          TRUE
     XtNdestroyCallback     XtCCallback            Pointer          NULL
     XtNtranslations        XtCTranslations        XtTranslations   NULL







     Hewlett-Packard Company       - 6 -                   Aug 9, 1988






     XWLIST(3X)                                             XWLIST(3X)




                             Manager Resource Set
     Name                    Class                   Type      Default
     ____________________________________________________________________
     XtNforeground           XtCForeground           Pixel     Black
     XtNbackgroundTile       XtCBackgroundTile       int       background
     XtNhighlightThickness   XtCHighlightThickness   int       0
     XtNtraversalOn          XtCTraversalOn          Boolean   FALSE
     XtNlayout               XtCLayout               int       minimize
     XtNnextTop              XtCCallback             Pointer   NULL



     KEYBOARD TRAVERSAL
          If the XtNtraversalType resource is set to
          highlight_traversal (XwHIGHLIGHT_TRAVERSAL in an argument
          list) at either create time or during a call to XtSetValues,
          the XwPrimitive superclass will automatically augment the
          primitive widget's translations to support keyboard
          traversal.  Refer to the XwPrimitive man page for a complete
          description of these translations.  Refer to the
          TRANSLATIONS section in this man page for a description of
          the translations local to the list widget.



     TRANSLATIONS
          The translations used for List are as follows:

               <EnterWindow>:        enter()
               <LeaveWindow>:        leave()

     ACTIONS
          enter:  Enter window events occurring on the list window are
          handled by this action.

          leave:  Leave window events occurring on the list window are
          handled by this action.


     ORIGIN
          Hewlett-Packard Company.

     SEE ALSO
          CORE(3X), COMPOSITE(3X), CONSTRAINT(3X), XWMANAGERCLASS(3X),
          XWSCROLLEDWINDOW(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.






     Hewlett-Packard Company       - 7 -                   Aug 9, 1988






     XWMANAGER(3X)                                       XWMANAGER(3X)




     NAME
          XwmanagerWidgetClass - X Widget Manager MetaClass

     SYNOPSIS
          #include <X11/StringDefs.h>
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>


     CLASSES
          The XwManagerClass is built from the Core, Composite and
          Constraint classes.

     DESCRIPTION
          The manager class is an X Widget meta class.  It is never
          instantiated as a widget.  Its sole purpose is as a
          supporting superclass for other widget classes.  It provides
          methods (procedures) which handle keyboard traversal and
          border highlighting for other manager widgets.

     NEW RESOURCES
          The manager class defines a set of resources used by the
          programmer to specify data for widgets which are subclasses
          of Manager.  The string to be used when setting any of these
          resources in an application defaults file (like .Xdefaults)
          can be obtained by stripping the preface "XtN" off the
          resource name.  For instance, XtNtraversalOn becomes
          traversalOn.


                             Manager Resource Set
     Name                    Class                   Type      Default
     ____________________________________________________________________
     XtNforeground           XtCForeground           Pixel     Black
     XtNbackgroundTile       XtCBackgroundTile       int       background
     XtNhighlightThickness   XtCHighlightThickness   int       0
     XtNtraversalOn          XtCTraversalOn          Boolean   FALSE
     XtNlayout               XtCLayout               int       minimize
     XtNnextTop              XtCCallback             Pointer   NULL



          XtNforeground
               This resource defines the foreground color for the
               widget.  Widgets built upon this class can use the
               foreground for their drawing.

          XtNbackgroundTile
               This resource defines the tile to be used for the
               background of the widget.  It defines a particular tile
               to be combined with the foreground and background pixel



     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWMANAGER(3X)                                       XWMANAGER(3X)




               colors.  The #defines for setting the tile value
               through an arg list and the strings to be used in the
               .Xdefaults files are described in XwCreateTile(3X).

          XtNhighlightThickness
               This resource specifies an amount of border spacing
               around the border of the widget.  It is typically used
               by managers to have padding space around their children
               and to draw special borders.  This highlight thickness
               is and an integer value representing the width, in
               pixels, of the border area.  This value must be greater
               than or equal to 0.

          XtNtraversalOn
               The application can define whether keyboard traversal
               is active or not.  The default for this resource is
               typically FALSE.

          XtNlayout
               This flag controls how the manager widget's geometry
               deals with too little or too much space.  The valid
               settings for this field are XwMINIMIZE, XwMAXIMIZE and
               XwIGNORE.  (The counterpart for these settings to be
               used in resource files, like .Xdefaults, are: minimize,
               maximize and ignore.)  Typically, the XwMINIMIZE means
               to request the minimum amount of space necessary to
               display all children.  The XwMAXIMIZE means that if
               additional space is given to the widget (i.e., at
               create time or set values time) then use the additional
               space as padding between children widgets. The XwIGNORE
               settings means, maintain the size set at create time or
               at set value time and never change size in response to
               a child widget's request (i.e., added/deleted/modified
               a child widget).  Look at the description of the
               individual manager widgets to see if this feature is
               supported.

          XtNnextTop
               This callback procedure is used by the applications
               programmer to move the focus from one toplevel widget
               to another toplevel widget.

          NOTE:  The XwManagerClass provides a specialized insert
          child procedure.  Manager widgets for which ordering makes
          sense (such as the RowCol manager widget) make use of the
          procedure.  It allows an application to provide a special
          argument list type XtNinsertPosition with an integer value.
          This value specifies where in the child list the new widget
          is inserted.

     KEYBOARD TRAVERSAL



     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWMANAGER(3X)                                       XWMANAGER(3X)




          If the traversalOn resource is TRUE (either when the widget
          is created or during a call to XtSetValues) the manager
          widget's translation table is augmented with the following
          translations:

               <EnterWindow>:       enter()
               <LeaveWindow>:       leave()
               <Visible>:           visible()
               <FocusIn>:           focusIn()

     ACTIONS
          enter:
               If the widget is a top level manager and traversal is
               on, then begin or resume traversal.

          leave:
               If the widget is a top level manager and traversal is
               on, then suspend traversal.

          visible:
               If traversal is on for a widget of this class and the
               widget that is focused becomes hidden (e.g. another
               window obscures its visibility), then the focus moves
               to another visible widget.

          focusIn:
               If the widget is a top level manager and traversal is
               on, then begin traversal.

     ORIGIN
          Hewlett-Packard Company.

     SEE ALSO
          CORE(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.

















     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWMENUBUTTON(3X)                                 XWMENUBUTTON(3X)




     NAME
          XwmenubuttonWidgetClass - the X Widgets menubutton widget.

     SYNOPSIS
          #include <X11/StringDefs.h>
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>
          #include <Xw/MenuBtn.h>


     CLASSES
          The menubutton widget is built out of the Core, XwPrimitive,
          and XwButton classes.

          The widget class to use when creating a menupane is
          XwmenubuttonWidgetClass.  The class name is MenuButton.

     DESCRIPTION
          The menubutton widget is commonly used with menupane and
          menu manager widgets to build a menu system.  The menubutton
          consists of a single label, a mark and a cascade indicator.
          The menubutton is broken into three areas.  Starting from
          the left border of the menubutton the areas are:  the mark
          area, the label area and the cascade area.  By default, the
          mark area contains a checkmark image, the label area
          contains the name of the menubutton widget and the cascade
          area contains an arrow image.  The label can be set to any
          string or image and the label area attempts to grow or
          shrink to accommodate it.  The mark and cascade can be set
          to an image, although the width of the these areas remains
          fixed.

          The default semantic for this button is that button 1 down
          causes the select call backs to be invoked.  When a
          menubutton is used in a menu manager, this may be overridden
          by the menu manager.  The select callbacks may also be
          invoked by a keyboard accelerator or mnemonic, although, it
          is up to the menu manager to determine whether the
          accelerator or mnemonic is active.

          The menubutton is often used with a menupane and menu
          manager widget although it is not necessary.  The menubutton
          could simply be used as another button widget.

     NEW RESOURCES
          The MenuButton widget defines a set of resource types used
          by the programmer to specify the data for the menubutton.
          The programmer can also set the values for the Core,
          Primitive and Button widget classes to set attributes for
          this widget.  The following table contains the set of
          resources defined by MenuButton.  To specify any of these



     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWMENUBUTTON(3X)                                 XWMENUBUTTON(3X)




          resources within the .Xdefaults file, simply drop the XtN
          prefix from the resource name.


                            MenuButton Resource Set
     Name                     Class                    Type       Default
     _____________________________________________________________________
     XtNlabelType             XtCLabelType             int        XwSTRING
     XtNlabelImage            XtCLabelImage            XImage *   NULL
     XtNcascadeImage          XtCCascadeImage          XImage *   NULL
     XtNcascadeOn             XtCCascadeOn             Widget     NULL
     XtNmarkImage             XtCMarkImage             XImage *   NULL
     XtNsetMark               XtCSetMark               Boolean    FALSE
     XtNkbdAccelerator        XtCKbdAccelerator        String     NULL
     XtNmnemonic              XtCMnemonic              String     NULL
     XtNmgrOverrideMnemonic   XtCMgrOverrideMnemonic   Boolean    TRUE
     XtNmenuMgrId             XtCMenuMgrId             Widget     NULL
     XtNcascadeSelect         XtCCallback              Pointer    NULL
     XtNcascadeUnselect       XtCCallback              Pointer    NULL



          XtNlabelType
               Two styles of labels are supported by the MenuButton
               widget: text string labels and image labels.  The text
               string label is defined by the Button resource XtNlabel
               and the image label is defined by the XtNlabelImage
               resource.  To programmatically set this resource, use
               either the XwSTRING define or the XwIMAGE define.  To
               set this resource using the .Xdefaults files, use one
               of the strings string or image.

          XtNlabelImage
               If XtNlabelType indicates that a label image should be
               displayed, then this resource contains the image used.
               This is a pointer to an XImage structure which
               describes the label image data.  If the image is
               defined with XYBitmap data, then the image is nicely
               inverted when the menubutton is highlighted.

          XtNcascadeImage
               This resource points to an XImage structure which
               describes the cascade image data.  The cascade area is
               a fixed size (16x16).  If this resource is set to NULL,
               then the default cascade image, an arrow, is used. The
               cascade indicator is not displayed if the XtNcascadeOn
               resource is set to NULL.  If the image is defined with
               XYBitmap data, then the image is nicely inverted when
               the menubutton is highlighted.

          XtNcascadeOn



     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWMENUBUTTON(3X)                                 XWMENUBUTTON(3X)




               This resource determines if the cascade indicator is
               displayed.  It is typically set only by the menu
               manager and contains the widget ID of the menupane
               which cascades as a submenu from this menubutton.  This
               resource is set to NULL to disable the display of the
               cascade indicator.

          XtNmarkImage
               This resource points to an XImage structure which
               describes the mark image data.  The mark area is a
               fixed size (16x16).  If this resource is set to NULL,
               then the default mark image is used.  The mark is not
               displayed if the XtNsetMark resource is set to FALSE.
               If the image is defined with XYBitmap data, then the
               image is nicely inverted when the menubutton is
               highlighted.

          XtNsetMark
               This boolean resource determines whether the mark is
               displayed.

          XtNkbdAccelerator
               This resource is a string which describe a set of
               modifiers and the key which may be used to select this
               menubutton widget.  The format for this string is
               identical to that used by the translations manager,
               with the exception that only a single event may be
               specified, and only KeyPress events are allowed.  If
               the menubutton does not have a menu manager associated
               with it, then this resource is ignored.  The menu
               manager determines when, and if, this accelerator is
               available.

          XtNmnemonic
               Certain menu managers allow the menubuttons to have a
               mnemonic.  Mnemonics provide the user with another
               means for selecting a menu button.  This resource is a
               NULL terminated string, containing a single character.
               The menu manager determines if this mnemonic is
               available.  If the XtNmgrOverrideMnemonic resource is
               false and the mnemonic is found in the label string,
               then that character is underlined when the menubutton
               is displayed.  Refer to XwPullDown(3X) man page for
               further discussion of traversal.

          XtNmgrOverrideMnemonic
               This boolean resource determines if the mnemonic
               character is underlined in the label string.  If it is
               set to TRUE, then the mnemonic character is not
               underlined.  This resource is typically set only by
               menu managers.



     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWMENUBUTTON(3X)                                 XWMENUBUTTON(3X)




          XtNmenuMgrId
               This resource is used only by menu managers to indicate
               to the menubutton widget its menu manager.  If this is
               set to NULL, then the menubutton checks if it has a
               menu manager at the appropriate level in its parentage.
               This resource should not be set by users.

          XtNcascadeSelect
               This resource provides the means for registering
               callback routines which are invoked if a cascade
               indicator is displayed and the pointer moves into the
               cascade area.  In some cases, the menu manager
               suppresses the calling of these callback routines.  The
               menubutton does not pass any data in the call_data
               field of the callback.

          XtNcascadeUnselect
               This resource provides the means for registering
               callback routines which are invoked if a cascade
               indicator is displayed and the pointer moves out of the
               cascade area.  These callbacks are only invoked if the
               XtNcascadeSelect callbacks have been previously
               invoked.  The menubutton passes data in the call_data
               field of the callback.  It is a pointer to the
               XwunselectParams data structure shown below:

                 typedef struct
                 {
                   Dimension         rootX;
                   Dimension         rootY;
                   Boolean           remainHighlighted;
                 } XwunselectParams;


          The rootX and rootY parameters have the position of the
          pointer relative to the root window when the event occurred
          which caused the XtNcascadeUnselect call backs to be called.
          The remainHighlighted parameter is used by cascading
          submenus.  It is set by the menu manager's call back routine
          to indicate that the pointer traversed from a cascade into
          the submenu.  If the boolean is set TRUE, then the
          menubutton does not unhighlight on exit.  It also sets up an
          event handler on its parent menupane so that it is notified
          if the pointer enters another menubutton, in which case the
          menubutton should then unhighlight.


     INHERITED RESOURCES
          The following resources are inherited from the named
          superclasses:




     Hewlett-Packard Company       - 4 -                   Aug 9, 1988






     XWMENUBUTTON(3X)                                 XWMENUBUTTON(3X)




                           Core Resource Set -- CORE(3X)
     Name                   Class                  Type             Default
     __________________________________________________________________________
     XtNancestorSensitive   XtCSenstitive          Boolean          TRUE
     XtNx                   XtCPosition            int              0
     XtNy                   XtCPosition            int              0
     XtNwidth               XtCWidth               int              0
     XtNheight              XtCHeight              int              0
     XtNdepth               XtCDepth               int              0
     XtNbackground          XtCBackground          Pixel            White
     XtNbackgroundPixmap    XtCPixmap              Pixmap           Unspecified
     XtNborderWidth         XtCBorderWidth         int              1
     XtNborderColor         XtCBorderColor         Pixel            Black
     XtNborderPixmap        XtCPixmap              Pixmap           Unspecified
     XtNsensitive           XtCSensitive           Boolean          TRUE
     XtNmappedWhenManaged   XtCMappedWhenManaged   Boolean          TRUE
     XtNdestroyCallback     XtCCallback            Pointer          NULL
     XtNtranslations        XtCTranslations        XtTranslations   NULL





                    Primitive Resource Set -- XWPRIMITIVE(3X)
     Name                    Class                   Type      Default
     ________________________________________________________________________
     XtNforeground           XtCForeground           Pixel     Black
     XtNbackgroundTile       XtCBackgroundTile       int       background
     XtNtraversalType        XtCTraversalType        int       highlight_off
     XtNhighlightStyle       XtCHighlightStyle       int       pattern_border
     XtNhighlightColor       XtCForeground           Pixel     Black
     XtNhighlightTile        XtCHighlightTile        int       50_foreground
     XtNhighlightThickness   XtCHighlightThickness   int       0
     XtNrecomputeSize        XtCRecomputeSize        Boolean   TRUE
     XtNselect               XtCCallback             Pointer   NULL
     XtNrelease              XtCCallback             Pointer   NULL





                     Button Resource Set -- XWBUTTON(3X)
     Name               Class              Type            Default
     ___________________________________________________________________
     XtNfont            XtCFont            XFontStruct *   Fixed
     XtNlabel           XtCLabel           caddr_t         widget name
     XtNlabelLocation   XtCLabelLocation   int             XwRIGHT
     XtNvSpace          XtCVSpace          int             2
     XtNhSpace          XtCHSpace          int             2
     XtNsensitiveTile   XtCSensitiveTile   int             75_foreground




     Hewlett-Packard Company       - 5 -                   Aug 9, 1988






     XWMENUBUTTON(3X)                                 XWMENUBUTTON(3X)




     TRANSLATIONS
          The default translations set by the menubutton widget are as
          follows:

               <Btn1Down>:                        select()
               <EnterWindow>                      enter()
               <LeaveWindow>:                     leave()
               <Motion>:                          moved()
               <Key>Select:                       select()
               <Key>Up:                           traverseUp()
               <Key>Down:                         traverseDown()
               <Key>Left:                         traverseLeft()
               <Key>Right:                        traverseRight()
               <Key>Next:                         traverseNext()
               <Key>Prior:                        traversePrev()
               <Key>Home:                         traverseHome()
               <Visible>:                         visibility()
               <Unmap>:                           unmap()
               <Key>KP_Enter:                     traverseNexttop()

     ACTIONS
          select:
               If a menu manager is present, then it is informed of
               the select event.  The menu manager indicates whether
               this select event should be processed or ignored.  If
               there is no menu manager, or if the menu manager
               indicates the event is to be processed, then the select
               callbacks are called.

          enter:
               If a menu manager is present, then it is informed of
               the enter event.  The menu manager indicates whether
               this enter event should be processed or ignored.  If
               there is no menu manager present, or if the menu
               manager indicates the event is to be processed, then
               the menubutton is highlightedi A processed enter action
               also calls the moved action to determine if the pointer
               is in the cascade indicator area.

          leave:
               If a menu manager is present, then it is informed of
               the leave event.  The menu manager indicates whether
               this leave event should be processed or ignored.  If
               there is no menu manager present, or if the menu
               manager indicates that the leave event is to be
               processed, then the menubutton is unhighlighted.  If
               the XtNcascadeSelect callbacks have been called, the
               XtNcascadeUnselect callbacks are called.

          moved:
               If this menubutton has cascading on, then this action



     Hewlett-Packard Company       - 6 -                   Aug 9, 1988






     XWMENUBUTTON(3X)                                 XWMENUBUTTON(3X)




               determines if the pointer is in the cascade area and
               calls the XtNcascadeSelect or XtNcascadeUnselect
               callbacks if necessary.

          traverseUp:
               Inform the menu manager controlling this widget that it
               should transfer the keyboard focus to the menu button
               positioned above the current traversal item; wrap to
               the bottom, if necessary.

          traverseDown:
               Inform the menu manager controlling this widget that it
               should transfer the keyboard focus to the menu button
               positioned below the current traversal item; wrap to
               the top, if necessary.

          traverseLeft:
               Inform the menu manager controlling this widget that it
               should transfer the keyboard focus to the menupane
               cascading from this menubutton, if one is present.

          traverseRight:
               Inform the menu manager controlling this widget that it
               should transfer the keyboard focus to the menupane from
               which the current one has cascaded.

          traverseNext:
               Inform the menu manager controlling this widget that it
               should transfer the keyboard focus to the next menu
               tree, if one is present.

          traversePrev:
               Inform the menu manager controlling this widget that it
               should transfer the keyboard focus to the previous menu
               tree, if one is present.

          traverseHome:
               Inform the menu manager controlling this widget that it
               should transfer the keyboard focus to the first
               menupane in the menu hierarchy.

          visibility:
               This action routine overrides the visibility action
               routine provided by the XwPrimitive meta class.

          unmap:
               This action overrides the unmap action routine provided
               by the XwPrimitive meta class.

          traverseNexttop:
               Inform the menu manager controlling this widget that it



     Hewlett-Packard Company       - 7 -                   Aug 9, 1988






     XWMENUBUTTON(3X)                                 XWMENUBUTTON(3X)




               should transfer the keyboard focus to the next top
               level menupane.

     KEYBOARD TRAVERSAL
          If the XtNtraversalType resource is set to
          highlight_traversal (XwHIGHLIGHT_TRAVERSAL in an argument
          list) at either create time or during a call to XtSetValues,
          the XwPrimitive superclass will automatically augment the
          primitive widget's translations to support keyboard
          traversal.  See the XwPrimitive man page for a complete
          description of these translations.

     ORIGIN
          Hewlett-Packard Company.

     SEE ALSO
          CORE(3), XWPRIMITIVE(3X), XWBUTTON(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.


































     Hewlett-Packard Company       - 8 -                   Aug 9, 1988






     XWMENUMGR(3X)                                       XWMENUMGR(3X)




     NAME
          XwmenumgrWidgetClass - the X Widgets menu manager meta
          widget.

     SYNOPSIS
          #include <X11/Intrinsic.h>
          #include <X11/StringDefs.h>
          #include <Xw/Xw.h>


     CLASSES
          The menu manager class is built the Core, Composite,
          Constraint and XwManager classes.

     DESCRIPTION
          The MenuMgr class is an X Widget meta class.  It is never
          instantiated as a widget.  Its sole purpose is as a
          supporting superclass for other menu manager widget classes.

     NEW RESOURCES
          The menu manager defines a set of resource types which may
          be used by the programmer to specify the data for widgets
          which are a subclass of MenuMgr.  To specify any of these
          resources within the .Xdefaults file, simply drop the XtN
          prefix from the resource name.  The following table contains
          the set of resources defined by MenuMgr.


                             MenuMgr Resource Set
     Name                   Class                  Type      Default
     _____________________________________________________________________
     XtNassociateChildren   XtCAssociateChildren   Boolean   TRUE
     XtNmenuPost            XtCMenuPost            String    "<Btn1Down>"
     XtNmenuSelect          XtCMenuSelect          String    "<Btn1Up>"
     XtNmenuUnpost          XtCMenuUnpost          String    NULL
     XtNkbdSelect           XtCKBDSelect           String    "<Key>Select"



          XtNassociateChildren
               This resource indicates whether the menu hierarchy
               controlled by the menu manager is accessible only from
               within the associated widget, or from within the widget
               and any of the widget's children.

          XtNmenuPost
               This string resource describes the button event and any
               required modifiers needed to post one of the top level
               menupanes controlled by the menu manager.  The string
               is specified using the syntax supported by the Xt
               Intrinsic's translation manager, with three exceptions.



     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWMENUMGR(3X)                                       XWMENUMGR(3X)




               First, only a single event may be specified.  Secondly,
               the event must be a ButtonPress or ButtonRelease event.
               Thirdly, all modifiers specified are interpreted as
               being exclusive; this means that only the specified
               modifiers can be present when the button event occurs.

          XtNmenuSelect
               This string resource describes the button event and any
               required modifiers needed to select a menu button
               within any of the menupanes controlled by the menu
               manager.  The string is specified using the syntax
               supported by the Xt Intrinsic's translation manager,
               with three exceptions. First, only a single event may
               be specified.  Secondly, the event must be a
               ButtonPress or ButtonRelease event.  Thirdly, all
               modifiers specified are interpreted as being exclusive;
               this means that only the specified modifiers can be
               present when the button event occurs.

          XtNmenuUnpost
               This string resource describes the key event and any
               required modifiers needed to unpost the currently
               viewable set of menupanes controlled by the menu
               manager.  This provides the user with the means for
               unposting a menu hierarchy from the keyboard, without
               selecting a menu button.  The string is specified using
               the syntax supported by the Xt Intrinsic's translation
               manager, with three exceptions. First, only a single
               event may be specified.  Secondly, the event must be a
               key event. Thirdly, all modifiers specified are
               interpreted as being exclusive; this means that only
               the specified modifiers can be present when the button
               event occurs.

          XtNkbdSelect
               This string resource describes the key event and any
               required modifiers needed to select the currently
               highlighted menu button. This provides the user with
               the means for selecting a menu item from the keyboard,
               without being required to use the mouse.  The string is
               specified using the syntax supported by the Xt
               Intrinsic's translation manager, with three exceptions.
               First, only a single event may be specified.  Secondly,
               the event must be a key event. Thirdly, all modifiers
               specified are interpreted as being exclusive; this
               means that only the specified modifiers can be present
               when the button event occurs.

     ORIGIN
          Hewlett-Packard Company.




     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWMENUMGR(3X)                                       XWMENUMGR(3X)




     SEE ALSO
          CORE(3X), XWMANAGER(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.

















































     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWMENUPANE(3X)                                     XWMENUPANE(3X)




     NAME
          XwmenupaneWidgetClass - the X Widgets menupane meta widget.

     SYNOPSIS
          #include <X11/Intrinsic.h>
          #include <X11/StringDefs.h>
          #include <Xw/Xw.h>


     CLASSES
          The menupane widget class is built from the Core, Composite,
          Constraint and XwManager classes.

     DESCRIPTION
          The menupane class is an X Widget meta class.  It is never
          instantiated as a widget.  Its sole purpose is as a
          supporting superclass for other menupane widget classes.  It
          provides a collection of resources which will be needed by
          most menupane subclasses.

     NEW RESOURCES
          The MenuPane defines a set of resource types used by the
          programmer to specify the data for widgets which are
          subclasses of MenuPane.  To specify any of these resources
          within the .Xdefaults file, simply drop the XtN prefix from
          the resource name.


                            MenuPane Resource Set
     Name                  Class              Type            Default
     ____________________________________________________________________
     XtNtitleShowing       XtCTitleShowing    Boolean         TRUE
     XtNmgrTitleOverride   XtCTitleOverride   Boolean         FALSE
     XtNtitleType          XtCTitleType       int              XwSTRING
     XtNtitleString        XtCTitleString     String          widget name
     XtNtitleImage         XtCTitleImage      XImage *        NULL
     XtNfont               XtCFont            XFontStruct *   "fixed"
     XtNattachTo           XtCAttachTo        String          NULL
     XtNmnemonic           XtCMnemonic        String          NULL
     XtNselect             XtCCallback        Pointer         NULL



          XtNtitleShowing
               This resource may be used by the application to control
               the displaying of a title within the menupane.  This
               may be overridden, however, by a menu manager using the
               XtNmgrTitleOverride resource.

          XtNmgrTitleOverride
               This resource is not intended to be used by



     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWMENUPANE(3X)                                     XWMENUPANE(3X)




               applications; it should only be used by a menu manager
               widget, for overriding the application, and forcing off
               the menupane title.  This is useful for those menu
               managers whose style dictates that certain menupane
               should not have a title displayed.

          XtNtitleType
               Two styles of titles are supported by the MenuPane
               widget.  They include text string titles and image
               titles.  To programmatically set this resource, use
               either the XwSTRING define or the XwIMAGE define.  To
               set this resource using the .Xdefaults file, use one of
               the strings string or image.

          XtNtitleString
               If the title type resource indicates that a title
               string should be displayed, then this resource will
               contain the title string which is to be used.  In the
               case where the application does not specify a title
               string, the name of the menupane widget will be used.
               The title is displayed using the foreground color.

          XtNtitleImage
               If the title type resource indicates that a title image
               should be displayed, then this resource will contain a
               pointer to an XImage structure; this structure
               describes the title image data.

          XtNfont
               If the title type resource indicates that a title
               string should be displayed, then this resource will
               describe the font used to draw the title string.

          XtNattachTo
               When used in conjunction with a menu manager, this
               resource provides the means by which the menupane may
               be attached as a cascade to a menubutton.  The string
               which is specified represents the name of the
               menubutton to which the menupane is to be attached;
               this provides the means by which the menu manager is
               able to construct the menu tree.  To specify that this
               menupane should be treated as the top level menupane
               within the menu tree, this string should contain the
               name of the menu manager widget, instead of a
               menubutton widget.  Specifying a NULL string indicates
               that the menupane will not be presently attached to
               anything.  If the menupane does not have a menu manager
               associated with it, then this resource is unused.

          XtNmnemonic
               Certain menu managers allow some of their menupanes to



     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWMENUPANE(3X)                                     XWMENUPANE(3X)




               have a mnemonic.  Mnemonics may be used to post a
               menupane using the keyboard, instead of using the
               pointer device.  This resource is a NULL terminated
               string, containing a single character.  Typically, the
               character is the same as one present in the menupane
               title.

          XtNselect
               This resource provides the means for registering
               callback routines which will be invoked when the
               menupane receives a select action.

     ORIGIN
          Hewlett-Packard Company.

     SEE ALSO
          CORE(3X), CONSTRAINT(3X), XWMANAGER(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.


































     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWMENUSEP(3X)                                       XWMENUSEP(3X)




     NAME
          XwmenuSepWidgetClass - the X Widget's menu item separator
          widget.

     SYNOPSIS
          #include <X11/StringDefs.h>
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>
          #include <Xw/MenuSep.h>


     CLASSES
          MenuSep is built from the Core, XwPrimitive, XwButton, and
          XwMenuBtn classes.

          The widget class to use when creating a menu separator
          widget is XwmenuSepWidgetClass.

          The class name for this widget is MenuSep.

     DESCRIPTION
          The MenuSep widget is a primitive widget to be used as an
          item separator placed between items in a menu.  Several
          different line drawing styles are provided.

     NEW RESOURCES
          The MenuSep widget defines a one additional resource type.
          The programmer can also set the values for the Core and
          Primitive resources to set attributes for this widget.  The
          Button and MenuButton resources are unused for this widget.


                           MenuSep Resource Set
        Name               Class              Type   Default
        __________________________________________________________
        XtNseparatorType   XtCseparatorType   int    XwSINGLE_LINE



          XtNseparatorType
               This resource defines the type of line drawing to be
               done in the menu separator widget.  Five different line
               drawing styles are provided.  They are single, double,
               single dashed, double dashed and no line.  The
               separator type can be set through an argument list by
               using one of the defines: XwSINGLE_LINE, XwDOUBLE_LINE,
               XwSINGLE_DASHED_LINE, XwDOUBLE_DASHED_LINE, and
               XwNO_LINE.  The separator type can be set through the
               .Xdefaults file by using one of the following strings:
               single_line, double_line single_dashed_line,
               double_dashed_line and no_line.



     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWMENUSEP(3X)                                       XWMENUSEP(3X)




          The line drawing done within the menu separator will be
          automatically centered within the height of the widget.

          The separator type of no_line is provided as an escape to
          the application programmer who needs a different style of
          drawing.  To create an alternate style, a pixmap the height
          of the widget can be created.  After the separator widget
          has been created, this pixmap can be used as the background
          pixmap by building an argument list using the
          XtNbackgroundPixmap argument type as defined by Core and
          setting the widgets background through XtSetValues.
          Whenever the widget is redrawn its background will be
          displayed which contains the desired separator drawing.
          Note that the pixmap can only be set after the widget is
          created.  If set when created, it will be overridden by the
          normal background pixmap created by the Primitive class.

     INHERITED RESOURCES
          The following resources are inherited from the named
          superclasses:


                           Core Resource Set -- CORE(3X)
     Name                   Class                  Type             Default
     __________________________________________________________________________
     XtNancestorSensitive   XtCSenstitive          Boolean          TRUE
     XtNx                   XtCPosition            int              0
     XtNy                   XtCPosition            int              0
     XtNwidth               XtCWidth               int              0
     XtNheight              XtCHeight              int              0
     XtNdepth               XtCDepth               int              0
     XtNbackground          XtCBackground          Pixel            White
     XtNbackgroundPixmap    XtCPixmap              Pixmap           Unspecified
     XtNborderWidth         XtCBorderWidth         int              1
     XtNborderColor         XtCBorderColor         Pixel            Black
     XtNborderPixmap        XtCPixmap              Pixmap           Unspecified
     XtNsensitive           XtCSensitive           Boolean          TRUE
     XtNmappedWhenManaged   XtCMappedWhenManaged   Boolean          TRUE
     XtNdestroyCallback     XtCCallback            Pointer          NULL
     XtNtranslations        XtCTranslations        XtTranslations   NULL














     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWMENUSEP(3X)                                       XWMENUSEP(3X)




                    Primitive Resource Set -- XWPRIMITIVE(3X)
     Name                    Class                   Type      Default
     ________________________________________________________________________
     XtNforeground           XtCForeground           Pixel     Black
     XtNbackgroundTile       XtCBackgroundTile       int       background
     XtNtraversalType        XtCTraversalType        int       highlight_off
     XtNhighlightStyle       XtCHighlightStyle       int       pattern_border
     XtNhighlightColor       XtCForeground           Pixel     Black
     XtNhighlightTile        XtCHighlightTile        int       50_foreground
     XtNhighlightThickness   XtCHighlightThickness   int       0
     XtNrecomputeSize        XtCRecomputeSize        Boolean   TRUE
     XtNselect               XtCCallback             Pointer   NULL
     XtNrelease              XtCCallback             Pointer   NULL




     TRANSLATIONS
          The menu separator widget defines no translations.

     ACTIONS
          The menu separator widget defines no actions.

     ORIGIN
          Hewlett-Packard Company.

     SEE ALSO
          CORE(3X), XWPRIMITIVE(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.























     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWMOVEFOCUS(3X)                                   XWMOVEFOCUS(3X)




     NAME
          XwMoveFocus - move the keyboard focus (and the pointer) to a
          new toplevel widget.

     SYNOPSIS
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>

          void XwMoveFocus (w)
          Widget w;


     ARGUMENTS
          w    This is the ID of the widget to which the application
               wishes to move the focus. It should be the toplevel
               widget in a widget hierarchy and it should be a
               subclass of XwManager.

     DESCRIPTION
          XwMoveFocus is a very specialized function which can be used
          to move the keyboard and pointer focus to another toplevel
          widget hierarchy.  It is useful when an application using
          keyboard traversal has multiple toplevel widget hierarchies
          and wishes to be able to move between these hierarchies
          without using the pointer device.  Specifically, this
          function will warp the pointer to (1,1) in the specified
          widget and will also make a call to XSetInputFocus (this is
          necessary for use with window managers using an explicit
          listener mode).

     ORIGIN
          Hewlett-Packard Company.

     SEE ALSO
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.

















     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWPUSHBUTTON(3X)                                 XWPUSHBUTTON(3X)




     NAME
          XwpushButtonWidgetClass - the X Widgets pushbutton widget.

     SYNOPSIS
          #include <X11/StringDefs.h>
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>
          #include <Xw/PButton.h>


     CLASSES
          The pushbutton widget is built from the Core, XwPrimitive
          and XwButton classes.

          The widget class to use when creating a pushbutton is
          XwpushButtonWidgetClass.  The class name is PushButton.

     DESCRIPTION
          The pushbutton widget consists of a text label surrounded by
          a button border.

          By default, button 1 down will invert the interior of the
          button: the background will be filled with the foreground
          color and the text will be written in the background color.
          Button 1 down also sets the button state to TRUE and issues
          any XtNselect callbacks that have been registered.  Button 1
          up will repaint the button in the normal state, set the
          button state to FALSE and issue any XtNrelease callbacks
          that have been registered.

          As mentioned above, the XtNselect and XtNrelease callbacks
          can be attached to this widget.  This widget can also be set
          to respond to Enter and Leave window events by highlighting
          and unhighlighting the button.  This widget is also capable
          of handling  keyboard traversal.  See the translations below
          for the default traversal keycodes.

          A final feature is that by setting the XtNtoggle resource to
          TRUE the pushbutton can be made to act like a toggle button.

     NEW RESOURCES
          The pushbutton widget class defines a set of resource types
          that can be used by the programmer to specify data for
          widgets of this class. Recall that the string to be used
          when setting any of these resources in an application
          defaults file (like .Xdefaults) can be obtained by stripping
          the preface "XtN" off of the resource name.  For instance,
          XtNfont becomes font.






     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWPUSHBUTTON(3X)                                 XWPUSHBUTTON(3X)




                    PushButton Resource Set -- CORE(3X)
                 Name        Class       Type      Default
                 _________________________________________
                 XtNtoggle   XtCToggle   Boolean   FALSE



          XtNtoggle
               If set to TRUE makes the pushbutton act like a toggle
               button.

     INHERITED RESOURCES
          The following resources are inherited from the named
          superclasses.  The defaults used for the pushbutton when
          being created are as follows:


                           Core Resource Set -- CORE(3X)
     Name                   Class                  Type             Default
     __________________________________________________________________________
     XtNancestorSensitive   XtCSenstitive          Boolean          TRUE
     XtNx                   XtCPosition            int              0
     XtNy                   XtCPosition            int              0
     XtNwidth               XtCWidth               int              0
     XtNheight              XtCHeight              int              0
     XtNdepth               XtCDepth               int              0
     XtNbackground          XtCBackground          Pixel            White
     XtNbackgroundPixmap    XtCPixmap              Pixmap           Unspecified
     XtNborderWidth         XtCBorderWidth         int              1
     XtNborderColor         XtCBorderColor         Pixel            Black
     XtNborderPixmap        XtCPixmap              Pixmap           Unspecified
     XtNsensitive           XtCSensitive           Boolean          TRUE
     XtNmappedWhenManaged   XtCMappedWhenManaged   Boolean          TRUE
     XtNdestroyCallback     XtCCallback            Pointer          NULL
     XtNtranslations        XtCTranslations        XtTranslations   NULL



















     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWPUSHBUTTON(3X)                                 XWPUSHBUTTON(3X)




                    Primitive Resource Set -- XWPRIMITIVE(3X)
     Name                    Class                   Type      Default
     ________________________________________________________________________
     XtNforeground           XtCForeground           Pixel     Black
     XtNbackgroundTile       XtCBackgroundTile       int       background
     XtNtraversalType        XtCTraversalType        int       highlight_off
     XtNhighlightStyle       XtCHighlightStyle       int       pattern_border
     XtNhighlightColor       XtCForeground           Pixel     Black
     XtNhighlightTile        XtCHighlightTile        int       50_foreground
     XtNhighlightThickness   XtCHighlightThickness   int       0
     XtNrecomputeSize        XtCRecomputeSize        Boolean   TRUE
     XtNselect               XtCCallback             Pointer   NULL
     XtNrelease              XtCCallback             Pointer   NULL





                     Button Resource Set -- XWBUTTON(3X)
     Name               Class              Type            Default
     ___________________________________________________________________
     XtNfont            XtCFont            XFontStruct *   Fixed
     XtNlabel           XtCLabel           caddr_t         NULL
     XtNlabelLocation   XtCLabelLocation   int             right
     XtNvSpace          XtCVSpace          int             2
     XtNhSpace          XtCHSpace          int             2
     XtNset             XtCSet             Boolean         FALSE
     XtNsensitiveTile   XtCSensitiveTile   int             75_foreground


     KEYBOARD TRAVERSAL
          If the XtNtraversalType resource is set to
          highlight_traversal (XwHIGHTLIGHT_TRAVERSAL in an argument
          list) at either create time or during a call to XtSetValues,
          the XwPrimitive superclass will automatically augment the
          primitive widget's translations to support keyboard
          traversal.  See the XwPrimitive man page for a complete
          description of these translations.  See the TRANSLATIONS
          section in this man page for a description of the
          translations local to the pushbutton widget.

     TRANSLATIONS
          The input to the pushbutton is driven by the mouse buttons.
          The default translation set defining this button is as
          follows:









     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWPUSHBUTTON(3X)                                 XWPUSHBUTTON(3X)




              <Btn1Down>:        select()
              <Btn1Up>:          release()
              <EnterWindow>:     enter()
              <LeaveWindow>:     leave()
              <KeyDown>Select:   select()     HP "Select" key
              <KeyUp>Select:     unselect()   HP "Select" key


     ACTIONS
          Note that this widget contains some actions which are not
          bound to any events by the default translations.  The
          purpose of these additional actions are to allow advanced
          users to alter the button semantics to their liking.

          toggle:
               Toggle the set state of the button (make it TRUE if it
               was FALSE, FALSE if it was TRUE).  Redraw the
               pushbutton to reflect the current button setting (if
               set, invert the button, otherwise draw normally).  If
               the current state of the button is set (TRUE) issue the
               XtNselect callbacks, if not set (FALSE) issue the
               XtNrelease callbacks.  No additional data beyond the
               widget id and the specified closure is sent with these
               callbacks.

          select:
               Select sets the state of the button to TRUE.  It also
               redraws the pushbutton to reflect the current setting.
               It then issues any XtNselect callbacks which have been
               registered.  No additional data beyond the widget id
               and the specified closure is sent with these callbacks.

          unselect:
               Release sets the state of the button to FALSE.  It also
               redraws the pushbutton to reflect the current setting.
               It then issues any XtNrelease callbacks which have been
               registered.  No additional data beyond the widget id
               and the specified closure is sent with these callbacks.

          enter:
               If the XtNtraversalType resource has been set to
               XwHIGHLIGHT_ENTER then the button will be highlighted.
               Otherwise no action is taken.

          leave:
               If the XtNtraversalType resouces has been set to
               XwHIGHLIGHT_ENTER then the button will be
               unhighlighted.  Otherwise no action is taken.

     ORIGIN
          Hewlett-Packard Company.



     Hewlett-Packard Company       - 4 -                   Aug 9, 1988






     XWPUSHBUTTON(3X)                                 XWPUSHBUTTON(3X)




     SEE ALSO
          CORE(3X), XWPRIMITIVE(3X), XWBUTTON(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.

















































     Hewlett-Packard Company       - 5 -                   Aug 9, 1988






     XWPANEL(3X)                                           XWPANEL(3X)




     NAME
          XwPanelWidgetClass - An X Widget for creating panels.

     SYNOPSIS
          #include <X11/StringDefs.h>
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>
          #include <Xw/Panel.h>


     CLASSES
          A subclass of Core, Composite, Constraint and
          XwManagerClass.

          The widget class to use when creating a Panel widget is
          XwpanelWidgetClass.

          The class name of Panel is Panel.

     DESCRIPTION
          Panel provides a simple creation mechanism for the creation
          of application windows and associated menus.  The panel
          widget is also appropriate for application sub-windows.

          Panel will manage three types of children. Panel may have at
          most one child of each type.  The types are titlebar, menu,
          and work space.  Children are associated with these types
          via constraint resources (see below).  Panel ignores all
          extra or unknown children.

          Panel lays out its children such that the child of type
          titlebar is on the top, the child of type menu is below, and
          the child of type work space is on the bottom.  Display of
          the titlebar child can be optionally inhibitted if the panel
          is under the control of a window manager which provides
          titlebars.

          When Panel has its width changed by its parent, the menu, if
          displayed, is allowed to pick its own height, the title
          remains the same height and the work space is diminished or
          enlarged to fill the remaining available space.  When Panel
          has its height reduced by its parent, space is taken from
          the work space until the work space is completely hidden.
          Further reductions in the height of Panel are shared between
          the title and the menu.  When Panel has its height increased
          by its parent, if either the title or the menu are less than
          their optimum height, they are given the space until they
          reach their optimum height for the given width.  If both the
          title and the menu are at their optimum height all space is
          given to the work space.




     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWPANEL(3X)                                           XWPANEL(3X)




          The initial width of Panel is the widest of all its children
          (padding is taken into account).  The initial height of
          Panel is the sum of the heights of all its children and
          their padding.

          When an application is running in a Panel with a titling
          window manager, there is a possibility of double titling.
          Unfortunately, the application writer cannot know at the
          time of development whether or not the user will have a
          titling window manager. Panel has two resources which
          together allow runtime decisions about titling.  The first,
          XtNtopLevel, indicates whether the Panel is a canidate for
          double titling.  The application must always set this
          variable appropriately.  The second resource,
          XtNdisplayTitle, indicates whether or not the Panel should
          display a title.






































     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWPANEL(3X)                                           XWPANEL(3X)




     NEW RESOURCES
          To specify any of these resources within a resource defaults
          file, simply drop the XtN prefix from the resource name.
          Panel defines the following new resources:


                               Panel Resource Set
     Name                       Class                      Type      Default
     _______________________________________________________________________
     XtNtopLevel                XtCTopLevel                Boolean   TRUE
     XtNdisplayTitle            XtCDisplayTitle            Boolean   TRUE
     XtNvSpace                  XtCVSpace                  int       0
     XtNhSpace                  XtCHSpace                  int       0
     XtNtitleToMenuPad          XtCTitleToMenuPad          int       0
     XtNworkSpaceToSiblingPad   XtCWorkSpaceToSiblingPad   int       0



          XtNtopLevel
               Indicates whether not the panel is a candidate for
               management by a window manager.  This should always be
               set by the application.

          XtNdisplayTitle
               Ignored if XtNtopLevel is FALSE.

               Otherwise, if XtNdisplayTitle is TRUE, the titlebar
               child will be displayed.  If XtNdisplayTitle is FALSE,
               the titlebar child will not be displayed.

               This resource should be set by the user in the resource
               defaults file.  If the user runs the application
               without a window manager or with a non-titling window
               manager, this resource should be set to TRUE.  If the
               user runs with a titling window manager this resource
               should be set to FALSE.

          XtNvSpace
               Padding between the top of the Panel and the top child
               in pixels, and between the bottom of the Panel and the
               bottom child in pixels.

          XtNhSpace
               Padding between the sides of the Panel and the sides of
               the displayed children.

          XtNtitleToMenuPad
               If both a title and a menu child are being displayed,
               the padding between them in pixels.

          XtNworkSpaceToSiblingPad



     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWPANEL(3X)                                           XWPANEL(3X)




               The padding between the work space child and the
               sibling above it.  If there is no title nor menu being
               displayed this resource is ignored.

     CONSTRAINT RESOURCES
          The following resources will be attached to every widget
          inserted into Panel.  Refer to CONSTRAINT(3X) for a general
          discussion of constraint resources.


             Constraint Resource Set -- Children of PANEL(3X)
      Name              Class             Type           Default
      _______________________________________________________________
      XtNwidgetType     XtCWidgetType     XwWidgetType   XwWORK_SPACE
      XtNcausesResize   XtCCausesResize   Boolean        FALSE



          XtNwidgetType
               Indicates to Panel what type of child it is.  The
               possible values are, XwWORK_SPACE, specified in a
               resource defaults file as "work space", XwTITLE,
               specified in a resource defaults file as "title", and
               XwPULLDOWN, specified in a resource defaults file as
               "pulldown".

          XtNcausesResize
               Controls whether changes in the child geometry can
               cause the Panel to make a geometry request of its
               parent.  If TRUE for only one child, Panel will request
               changes whenever that child requests changes.  If TRUE
               for multiple children, Panel will request changes
               whenever any of that set of children grow, and when all
               of that set of children have shrunk.

          The behavior of this resource can be nullified by setting
          XwNLayout to XwIGNORE.

     INHERITED RESOURCES
          The following resources are inherited from the named
          superclasses:













     Hewlett-Packard Company       - 4 -                   Aug 9, 1988






     XWPANEL(3X)                                           XWPANEL(3X)




                           Core Resource Set -- CORE(3X)
     Name                   Class                  Type             Default
     __________________________________________________________________________
     XtNancestorSensitive   XtCSenstitive          Boolean          TRUE
     XtNx                   XtCPosition            int              0
     XtNy                   XtCPosition            int              0
     XtNwidth               XtCWidth               int              0
     XtNheight              XtCHeight              int              0
     XtNdepth               XtCDepth               int              0
     XtNbackground          XtCBackground          Pixel            White
     XtNbackgroundPixmap    XtCPixmap              Pixmap           Unspecified
     XtNborderWidth         XtCBorderWidth         int              1
     XtNborderColor         XtCBorderColor         Pixel            Black
     XtNborderPixmap        XtCPixmap              Pixmap           Unspecified
     XtNsensitive           XtCSensitive           Boolean          TRUE
     XtNmappedWhenManaged   XtCMappedWhenManaged   Boolean          TRUE
     XtNdestroyCallback     XtCCallback            Pointer          NULL
     XtNtranslations        XtCTranslations        XtTranslations   NULL





                           Manager Resource Set
       Name                Class               Type      Default
       ____________________________________________________________
       XtNforeground       XtCForeground       Pixel     Black
       XtNbackgroundTile   XtCBackgroundTile   int       background
       XtNtraversalOn      XtCTraversalOn      Boolean   FALSE
       XtNlayout           XtClayout           int       minimize



     TRANSLATIONS
          The default translation set defining is as follows:

               <EnterWindow>:          enter()
               <LeaveWindow>:          leave()

     ACTIONS
          enter:  If keyboard traversal is active (argument type
          XtNtraversalOn with argument value TRUE), initiate keyboard
          traversal.

          leave:  If keyboard traversal is active (argument type
          XtNtraversalOn with argument value TRUE), terminate keyboard
          traversal.

     ORIGIN
          Hewlett-Packard Company.




     Hewlett-Packard Company       - 5 -                   Aug 9, 1988






     XWPANEL(3X)                                           XWPANEL(3X)




     SEE ALSO
          CORE(3X), CONSTRAINT(3X), XWMANAGER(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.

















































     Hewlett-Packard Company       - 6 -                   Aug 9, 1988






     XWPOPUPMGR(3X)                                     XWPOPUPMGR(3X)




     NAME
          XwpopupmgrWidgetClass - the X Widgets popup menu manager
          widget.

     SYNOPSIS
          #include <X11/Intrinsic.h>
          #include <X11/StringDefs.h>
          #include <Xw/Xw.h>
          #include <Xw/PopupMgr.h>


     CLASSES
          The popup menu manager widget is built from the Core,
          Composite, Constraint, XwManager and XwMenuMgr classes. Note
          that the Constraint fields are not used in this widget and
          so are not listed in the resource tables below.  Also, since
          the Composite class contains no user settable resources,
          there is no table for Composite class resources.

          The widget class to use when creating an instance of the
          popup menu manager is XwpopupmgrWidgetClass.  The class name
          is PopupMgr.

     DESCRIPTION
          The popup menu manager widget is a composite widget which is
          used by an application to manage a collection of menupanes.
          Even though the popup menu manager is a composite widget, it
          should never have any normal widget children.  Instead, all
          of its children are popup shell children; the child of each
          of the popup shell widgets is a menupane.  In addition, the
          parent of the popup menu manager must be a popup shell
          widget, whose parent is the widget to which the menu tree is
          being associated.

          The popup menu manager manages a collection of menupane
          widgets, which have been organized into a hierarchical tree
          structure; the root of the tree is the top level menupane.
          When the user requests that the menu be posted, by
          generating a post event within the widget (or possibly one
          of the widget's children), the top level menupane is posted.

          Once the menu manager has posted the top level menupane, it
          will remain posted until the user generates a select action;
          at that point, the menupanes will be removed from the
          display, and the selected menu button will perform any
          required actions.  If the select occurs outside of a menu
          button, or if the user issues the menu unpost event, then
          the menupanes are simply unposted.

          The menu manager supports a mode by which the menu hierarchy
          may be associated only with the specified widget, or it may



     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWPOPUPMGR(3X)                                     XWPOPUPMGR(3X)




          be associated with the widget and all of its children (both
          present and future children).  If the menu is associated
          with the widget and its children, then a menu post event
          which occurs in either the widget or one of its children,
          will cause the menu to be posted.

          The menu manager also supports a commonly used menuing
          feature, referred to as sticky menus.  When operating in
          sticky menu mode, the menu manager will remember the last
          menu button selected by the user.  The next time the user
          requests that the menu system be posted, all of the
          menupanes, up to the one containing the previously selected
          menu button, will be posted.

          The popup menu manager provides a keyboard interface to the
          menus, through the use of keyboard accelerators, for posting
          the menu and for selecting a menubutton from within one of
          the menupanes.  This manager does not support keyboard
          mnemonics.  When traversal is enabled, the standard keyboard
          traversal keys are also operational.  Using the mouse, while
          traversal is enabled, may produce confusing results for the
          user; thus, operating in this fashion is discouraged.
































     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWPOPUPMGR(3X)                                     XWPOPUPMGR(3X)




          The popup menu manager provides the application writer with
          a global function which may be used to programmatically post
          a top level menupane at a particular position relative to a
          specified widget.  The calling sequence and parameters are
          shown below:

               XwPostPopup (menuMgr, relativeTo, x, y)
               XwPopupMgrWidget menuMgr;
               Widget relativeTo;
               Position x,y;

          XwPostPopup() posts the top level menupane associated with
          the specified menu manager at the requested (x,y) position,
          relative to the specified widget.  If the relativeTo
          parameter is set to NULL, then the position is assumed to be
          relative to the root window.

     NEW RESOURCES
          The popup menu manager defines a set of resource types used
          by the programmer to specify the data for the menu manager.
          The programmer can also set the values for the Core,
          Composite and Manager widget classes to set attributes for
          this widget.  To specify any of these resources within the
          .Xdefaults file, simply drop the XtN prefix from the
          resource name.  The following table contains the set of
          resources defined by PopupMgr.


                           PopupMgr Resource Set
        Name                 Class                Type      Default
        ___________________________________________________________
        XtNstickyMenus       XtCStickyMenus       Boolean   FALSE
        XtNpostAccelerator   XtCPostAccelerator   String    NULL



          XtNstickyMenus
               This resource controls whether the menu manager
               operates in sticky menu mode.

          XtNpostAccelerator
               This resource indicates the keyboard event that can be
               used to post the top level menupane.  The string is
               specified using the syntax supported by the translation
               manager, with three exceptions.  First, only a single
               event may be specified.  Second, the event must be a
               KeyPress or KeyRelease event.  Third, all modifiers
               specified are interpreted as being exclusive; this
               means that only the specified modifiers can be present
               when the key event occurs.




     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWPOPUPMGR(3X)                                     XWPOPUPMGR(3X)




     INHERITED RESOURCES
          The following resources are inherited from the named
          superclasses:


                           Core Resource Set -- CORE(3X)
     Name                   Class                  Type             Default
     __________________________________________________________________________
     XtNancestorSensitive   XtCSenstitive          Boolean          TRUE
     XtNx                   XtCPosition            int              0
     XtNy                   XtCPosition            int              0
     XtNwidth               XtCWidth               int              0
     XtNheight              XtCHeight              int              0
     XtNdepth               XtCDepth               int              0
     XtNbackground          XtCBackground          Pixel            White
     XtNbackgroundPixmap    XtCPixmap              Pixmap           Unspecified
     XtNborderWidth         XtCBorderWidth         int              1
     XtNborderColor         XtCBorderColor         Pixel            Black
     XtNborderPixmap        XtCPixmap              Pixmap           Unspecified
     XtNsensitive           XtCSensitive           Boolean          TRUE
     XtNmappedWhenManaged   XtCMappedWhenManaged   Boolean          TRUE
     XtNdestroyCallback     XtCCallback            Pointer          NULL
     XtNtranslations        XtCTranslations        XtTranslations   NULL





                     Manager Resource Set -- XWMANAGER(3X)
     Name                    Class                   Type       Default
     _____________________________________________________________________
     XtNforeground           XtCForeground           Pixel      Black
     XtNbackgroundTile       XtCBackgroundTile       int        background
     XtNhighlightThickness   XtCHighlightThickness   int        0
     XtNtraversalOn          XtCTraversalOn           Boolean   FALSE




                  Menu Manager Resource Set -- XWMENUMGR(3X)
     Name                   Class                  Type      Default
     _____________________________________________________________________
     XtNassociateChildren   XtCAssociateChildren   Boolean   TRUE
     XtNmenuPost            XtCMenuPost            String    "<Btn1Down>"
     XtNmenuSelect          XtCMenuSelect          String    "<Btn1Up>"
     XtNmenuUnpost          XtCMenuUnpost          String    NULL
     XtNkbdSelect           XtCKbdSelect           String    "<Key>Select"



     BUGS



     Hewlett-Packard Company       - 4 -                   Aug 9, 1988






     XWPOPUPMGR(3X)                                     XWPOPUPMGR(3X)




          Due to limitations within the Xt Intrinsics, keyboard
          accelerators for posting a menu pane or for selecting a menu
          item do not work if the widget to which the menu manager is
          attached has traversal enabled.

     ORIGIN
          Hewlett-Packard Company.

     SEE ALSO
          CORE(3X), XWMANAGER(3X), XwMENUMGR(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.









































     Hewlett-Packard Company       - 5 -                   Aug 9, 1988






     XWPRIMITIVE(3X)                                   XWPRIMITIVE(3X)




     NAME
          XwprimitiveWidgetClass - the X Widget's primitive widget
          meta class

     SYNOPSIS
          #include <X11/StringDefs.h>
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>


     CLASSES
          The Primitive widget class is built out of the Core class.

     DESCRIPTION
          The Primitive class is an X Widget MetaClass.  It is never
          instantiated as a widget.  Its sole purpose is as a
          supporting superclass for other widget classes.  It handles
          border drawing and highlighting, traversal activation and
          deactivation and various callback lists needed by primitive
          widgets.

     NEW RESOURCES
          Primitive defines a set of resource types used by the
          programmer to specify the data for widgets which are
          subclasses of Primitive.

                    Primitive Resource Set -- XWPRIMITIVE(3X)
     Name                    Class                   Type      Default
     ________________________________________________________________________
     XtNforeground           XtCForeground           Pixel     Black
     XtNbackgroundTile       XtCBackgroundTile       int       background
     XtNtraversalType        XtCTraversalType        int       highlight_off
     XtNhighlightStyle       XtCHighlightStyle       int       pattern_border
     XtNhighlightColor       XtCForeground           Pixel     Black
     XtNhighlightTile        XtCHighlightTile        int       50_foreground
     XtNhighlightThickness   XtCHighlightThickness   int       0
     XtNrecomputeSize        XtCRecomputeSize        Boolean   TRUE
     XtNselect               XtCCallback             Pointer   NULL
     XtNrelease              XtCCallback             Pointer   NULL



          XtNforeground
               This resource defines the foreground color for the
               widget.  Widgets built upon this class can use the
               foreground for their drawing.

          XtNbackgroundTile
               This resource defines the tile to be used for the
               background of the widget.  It defines a particular tile
               to be combined with the foreground and background pixel



     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWPRIMITIVE(3X)                                   XWPRIMITIVE(3X)




               colors.  The #defines for setting the tile value
               through an arg list and the strings to be used in the
               .Xdefaults files are described in XwCreateTile(3X).

          XtNhighlightColor
               This resource defines the color to be used in the
               highlighting drawn by Primitive around the exterior of
               the widget.

          XtNhighlightStyle
               Two styles of border highlighting are supported by
               Primitive.  They include drawing the highlighting with
               a pattern and widget specific border drawing.  To set
               the highlight style through an arg list, use the
               #define XwPATTERN_BORDER.  To set the highlight style
               through the .Xdefaults file, use the string
               pattern_border.

               For Widget Writers:  The highlighting style of
               XwWIDGET_DEFINED is used exclusively by widgets with
               special highlighting requirements that need to override
               the normal highlighting types.  To use, the widget
               inserts a highlight and unhighlight procedure into its
               primitive class and forces the highlightStyle field in
               the primitive instance to the define XwWIDGET_DEFINED.
               The primitive class will then make the appropriate
               calls to the highlight and dehighlight functions.

          XtNhighlightTile
               When the highlight style is XwPATTERN_BORDER, one of
               several tiles can be used for the drawing.  The
               #defines for setting the values through an arg list and
               the strings to be used in the .Xdefaults files are
               described in XwCreateTile(3X).

          XtNhighlightThickness
               The width of the highlight can be set using this
               resource.  It is specified as an integer value
               representing the width, in pixels, of the highlight to
               be drawn.  This value must be greater than or equal to
               0.  Note that highlighting takes place within the
               window created for a widget and is separate from the
               window border.

          XtNtraversalType
               Three modes of border highlighting activation are
               supported by Primitive.  They are, no highlighting,
               highlight on the cursor entering the widgets window and
               highlight for keyboard traversal.  The last mode is
               used by the keyboard traversal mechanism to indicate
               the widget that is to receive all input occurring



     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWPRIMITIVE(3X)                                   XWPRIMITIVE(3X)




               within the widget hierarchy.  To set the traversal type
               through an arg list, one of three defines can be used.
               They are XwHIGHLIGHT_OFF, XwHIGHLIGHT_ENTER and
               XwHIGHLIGHT_TRAVERSAL.  The strings that can be used to
               set this resource through the .Xdefaults file are
               highlight_off, highlight_enter, and
               highlight_traversal.

          XtNrecomputeSize
               This boolean resource indicates to a primitive widget
               whether it should recalculate its size when an
               application makes a XtSetValues call to it.  If set to
               TRUE, the widget will perform its normal size
               calculations will may cause its geometry to change.  If
               set to FALSE, the widget will not recalculate its size.

          XtNselect
               This is a reserved callback list used by widget
               subclasses built upon Primitive to implement there
               callback lists.

          XtNrelease
               This is a reserved callback list used by widget
               subclasses built upon Primitive to implement there
               callback lists.

     KEYBOARD TRAVERSAL
          If the traversalType resource is set to highlight_traversal
          (either when the widget is created or during a call to
          XtSetValues) the Primitive widget's translation table is
          augmented with the following translations:


         <FocusIn>:       focusIn()
         <FocusOut>:      focusOut()
         <Visible>:       visibility()
         <Unmap>:         unmap()
         <Key>Up:         traverseUp()        HP Up arrow key.
         <Key>Down:       traverseDown()      HP Down arrow key.
         <Key>Left:       traverseLeft()      HP Left arrow key.
         <Key>Right:      traverseRight()     HP Right arrow key.
         <Key>Next:       traverseNext()      HP "Next" key.
         <Key>Prior:      traversePrev()      HP "Prev" key.
         <Key>Home:       traverseHome()      HP Home arrow key.
         <Key>KP_Enter:   traverseNextTop()   HP "Enter" key.


     ACTIONS
          focusIn:
               If traversal is on for a widget of this class then
               accept the keyboard focus and visually indicate it by



     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWPRIMITIVE(3X)                                   XWPRIMITIVE(3X)




               highlighting the widget.

          focusOut:
               If traversal is on for a widget of this class then
               indicate that the widget no longer has the focus by
               unhighlighting the widget.

          visibility:
               If traversal is on for a widget of this class and the
               widget that is focused becomes hidden (e.g. another
               window obscures its visibility), then the focus moves
               to another visible widget.

          unmap:
               If traversal is on for a widget of this class and the
               widget that is focused becomes unmapped, then the focus
               moves to another mapped widget.

          traverseUp:
               Inform the parent of a widget of this class that it
               should transfer keyboard focus to the first widget
               above this one.

          traverseDown:
               Inform the parent of a widget of this class that it
               should transfer keyboard focus to the first widget
               below this one.

          traverseLeft:
               Inform the parent of a widget of this class that it
               should transfer keyboard focus to the first widget to
               the left of this one.

          traverseRight:
               Inform the parent of a widget of this class that it
               should transfer keyboard focus to the first widget to
               the right of this one.

          traverseNext:
               Inform the parent of a widget of this class that it
               should transfer keyboard focus to the next child in the
               parent's list of children.

          traversePrev:
               Inform the parent of a widget of this class that it
               should transfer keyboard focus to the previous child in
               the parent's list of children.

          traverseHome:
               Inform the parent of a widget of this class that it
               should transfer keyboard focus to the child which is



     Hewlett-Packard Company       - 4 -                   Aug 9, 1988






     XWPRIMITIVE(3X)                                   XWPRIMITIVE(3X)




               closest to the upper left hand corner of the parent.
               If that child already has the keyboard focus, then ask
               the grandparent of the widget to give the keyboard
               focus to whichever of its children which is closest to
               the upper left hand corner.

          traverseNextTop:
               Find the topmost parent in a widget of this class
               hierarch which is a subclass of XwManager and tell it
               to issues any XtNnextTop callbacks that have been
               registered with it.  The purpose of this callback is to
               allow applications to move the keyboard focus between
               top level widget hierarchies of the same application.

     ORIGIN
          Hewlett-Packard Company.

     SEE ALSO
          CORE(3X), XWCREATETILE(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.
































     Hewlett-Packard Company       - 5 -                   Aug 9, 1988






     XWROWCOLUMN(3X)                                   XWROWCOLUMN(3X)




     NAME
          XwrowColWidgetClass - the X Widgets row/column manager
          widget.

     SYNOPSIS
          #include <X11/StringDefs.h>
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>
          #include <Xw/RCManager.h>


     CLASSES
          The row column manager widget is built from the Core,
          Composite, Constraint and XwManager classes.  Note that the
          Constraint fields are not used in this widget and so is not
          listed in the resource tables below.  Also, since the
          Composite class contains no user settable resources, there
          is no table for Composite class resources.

          The widget class to use when creating a row column manager
          is XwrowColWidgetClass.  The class name is RowCol.

     DESCRIPTION
          The row/column widget is a composite widget which supports 3
          types of row/column layouts for its children.  They are:
          requested columns, maximum columns, and maximum unaligned.
          With the first layout type, requested columns, the
          application specifies the number of columns (the default is
          one) to be used in laying out the data.  The children are
          laid out rowwise.  Columns are as wide as the widest element
          in the column and all elements are left justified.  Row
          height is determined by the largest element in the row and
          all elements are centered in the row.  The second layout
          type, maximum columns, automatically calculates the maximum
          number of columns that can fit within the manager and lays
          the children out accordingly.  The last layout type, maximum
          unaligned, does not force any columnar alignment.  A child
          being positioned is placed to the immediately right of
          previous child until a row is full, then a new row is
          started at the left edge of the manager immediately below
          the previous row.

          In addition to the row/column ordering, this manager widget
          supports 3 different layout policies: minimize (the
          default), maximize and ignore. When the layout policy is set
          to minimize, the manager will create a box which is just
          large enough to contain all of its children, regardless of
          any provided width and height values.  When the given width
          and height values would create a box larger than needed, the
          maximize setting will use this additional space as padding
          between elements.  Note that, with the maximize setting, if



     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWROWCOLUMN(3X)                                   XWROWCOLUMN(3X)




          one or both of the height/width values are too small, the
          box will grow the manager to honor the given width and
          height, it will not grow or shrink in response to the
          addition, deletion or altering of its children.

          The row/column widget also implements two selection
          policies.  The default is n_of_many, and the alternative is
          one_of_many. The n_of_many policy does not require any
          action on the part of the manager widget. It allows any or
          all of its children to be selected and performs no action in
          response to their selection. The one_of_many policy ONLY
          applies to to children widgets which are subclasses of the
          XwPrimitive class.  When one_of_many is the active policy, a
          callback (of type XtNselect) is added to each child widget.
          Then, when a child is selected the manager is informed.  The
          manager keeps track of the previously active child and
          directly invokes a release procedure in that child so that
          it becomes unselected.  The one_of_many mode will not
          activate a child if none are active and will not disallow
          the selection of an active child causing it to become
          deactive.  Thus, if a strict one of many mode is desired,
          the application will have to enforce it.

     NEW RESOURCES
          The row/column manager defines a set of resource types used
          by the programmer to specify data for the manager widget.
          The programmer can also set the values for the Core,
          Composite and XwManager widget classes to set attributes for
          this widget.  The following table contains the settable
          resources defined by the row/column manager. The string to
          be used when setting any of these resources in an
          application defaults file (like .Xdefaults) can be obtained
          by stripping the preface "XtN" off of the resource name.
          For instance, XtNvSpace becomes vSpace.


                          Row Column Resource Set
        Name            Class           Type      Default
        ___________________________________________________________
        XtNhSpace       XtCHSpace       int       4
        XtNvSpace       XtCVSpace       int       4
        XtNlayoutType   XtCLayoutType   int       requested_columns
        XtNcolumns      XtCColumns      int       1
        XtNforceSize    XtCForceSize    Boolean   FALSE
        XtNsingleRow    XtCSingleRow    Boolean   FALSE
        XtNmode         XtCMode         int       n_of_many



          XtNhSpace
               The application may determine the number of pixels of



     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWROWCOLUMN(3X)                                   XWROWCOLUMN(3X)




               space left between each element within a given row.
               This defines a minimum spacing.

          XtNvSpace
               The application may determine the number of pixels of
               space left between each column.  This defines a minimum
               spacing.

          XtNlayoutType
               The application can specify the type of layout the row
               column manager is to perform.  Allowable argument list
               settings are XwREQUESTED_COLUMNS, XwMAXIMUM_COLUMNS and
               XwMAXIMUM_UNALIGNED.  To set this value in .Xdefaults
               or another resource file use the strings
               requested_columns, maximum_columns and
               maximum_unaligned.

          XtNcolumns
               The application can specify the number of columns to be
               used when laying out the widgets children.

          XtNforceSize
               The application has the option of forcing the widths of
               each widget in a column and the heights of each widget
               in a row to be the same.  This can be used, for example
               to enforce an orderly layout for a group of buttons.
               For the layout type of maximum unaligned, only the
               heights of the widgets in a row are forced to the same
               size.

          XtNsingleRow
               For layout types of maximum columns and maximum
               unaligned, the application has the option of having the
               row column manager to try to lay itself out in a single
               row whenever one of its children makes a geometry
               request.

          XtNmode
               The application can specify whether the selection
               policy is n_of_many or one_of_many. Allowable argument
               list settings are XwONE_OF_MANY and XwN_OF_MANY.  To
               set this value in .Xdefaults or another resource file
               use the strings one_of_many and n_of_many.

     INHERITED RESOURCES
          The following resources are inherited from the named
          superclasses:







     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWROWCOLUMN(3X)                                   XWROWCOLUMN(3X)




                           Core Resource Set -- CORE(3X)
     Name                   Class                  Type             Default
     __________________________________________________________________________
     XtNancestorSensitive   XtCSenstitive          Boolean          TRUE
     XtNx                   XtCPosition            int              0
     XtNy                   XtCPosition            int              0
     XtNwidth               XtCWidth               int              0
     XtNheight              XtCHeight              int              0
     XtNdepth               XtCDepth               int              0
     XtNbackground          XtCBackground          Pixel            White
     XtNbackgroundPixmap    XtCPixmap              Pixmap           Unspecified
     XtNborderWidth         XtCBorderWidth         int              1
     XtNborderColor         XtCBorderColor         Pixel            Black
     XtNborderPixmap        XtCPixmap              Pixmap           Unspecified
     XtNsensitive           XtCSensitive           Boolean          TRUE
     XtNmappedWhenManaged   XtCMappedWhenManaged   Boolean          TRUE
     XtNdestroyCallback     XtCCallback            Pointer          NULL
     XtNtranslations        XtCTranslations        XtTranslations   NULL





                    Manager Resource Set -- XWMANAGER(3X)
     Name                    Class                   Type      Default
     ____________________________________________________________________
     XtNforeground           XtCForeground           Pixel     Black
     XtNbackgroundTile       XtCBackgroundTile       int       background
     XtNhighlightThickness   XtCHighlightThickness   int       0
     XtNtraversalOn          XtCTraversalOn          Boolean   FALSE
     XtNlayout               XtCLayout               int       minimize
     XtNnextTop              XtCCallback             Pointer   NULL



     KEYBOARD TRAVERSAL
          If the XtNtraversalOn resource is set to TRUE at either
          create time or during a call to XtSetValues, the XwManager
          superclass will automatically augment the manager widget's
          translations to support keyboard traversal.  Refer to the
          XwManager man page for a complete description of these
          translations.

     ORIGIN
          Hewlett-Packard Company.

     SEE ALSO
          CORE(3X), XWMANAGER(3X), XWPRIMITIVE(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.



     Hewlett-Packard Company       - 4 -                   Aug 9, 1988






     XWREGISTERCONVERTERS(3X)                 XWREGISTERCONVERTERS(3X)




     NAME
          XwRegisterConverters - register all of the resource
          converters used by the X Widgets.

     SYNOPSIS
          #include <X11/Atoms.h>
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>

          void XwRegisterConverters ()


     DESCRIPTION
          XwRegisterConverters is used by widget writers to register
          all of the resource type converters used by the X Widgets.
          The call to this routine is made within a widget's
          ClassInitialize procedure that has added a resource
          converter to the source file containing this function.
          XwRegisterConverters ensures that resource converters it is
          registering are only registered once.

     ORIGIN
          Hewlett-Packard Company.

     SEE ALSO
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.


























     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWSTATICRASTER(3X)                             XWSTATICRASTER(3X)




     NAME
          XwstaticrasterWidgetClass - The HP X Widget's static image
          widget

     SYNOPSIS
          #include <X11/StringDefs.h>
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>
          #include <Xw/SRaster.h>


     CLASSES
          The static raster widget is built from the Core, XwPrimitive
          and XwSRaster classes.

          The widget class to use when creating a static raster is
          XwstaticrasterWidgetClass. The class name is StaticRaster.

     DESCRIPTION
          The static raster widget provides an uneditable raster
          image. As a default, the image is placed in a window that is
          exactly the size of the raster (plus the border width). The
          image can be dynamically resized. If the window is enlarged
          from its original size, the image will be redrawn in the
          center of the new window. If the window shrinks below the
          size of the raster, the image is clipped on the right and
          bottom sides as needed to fit within the new boundries.

          The raster image is provided to the widget in the form of an
          XImage data structure. New data can be displayed by
          specifing a new XImage structure, or by changing the pointer
          to the bitmap data within that structure.

          Callbacks can be attached to the widget to report selection
          (XtNselect) and unselection (XtNrelease).  This widget can
          be set to respond to Enter and Leave window events by
          highlighting and unhighlighting the border.

     NEW RESOURCES
          StaticRaster defines several new resources.  (To reference a
          resource in a .Xdefaults file, strip off the XtN from the
          resource string.)












     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWSTATICRASTER(3X)                             XWSTATICRASTER(3X)




                        StaticRaster Resource Set
        Resource            Class               Type       Default
        __________________________________________________________
        XtNsRimage          XtCSRimage          XImage *   NULL
        XtNinvertOnSelect   XtCInvertOnSelect   Boolean    TRUE
        XtNshowSelected     XtCIShowSelected    Boolean    TRUE
        XtNset              XtCSet              Boolean    FALSE



          XtNsRimage
               This is a pointer to an XImage data structure.

          XtNinvertOnSelect
               If this resource is TRUE, the raster image will invert
               its foreground and background colors when selected, and
               return to normal when unselected.

          XtNshowSelected
               If TRUE, this will cause the image to appear to be
               indented when selected, and raised when unselected.

          XtNset
               This is a Boolean resource which indicates whether the
               raster is currently selected (TRUE) or not (FALSE).

     INHERITED RESOURCES
          The following resources are inherited from the named
          superclasses:


                           Core Resource Set -- CORE(3X)
     Name                   Class                  Type             Default
     __________________________________________________________________________
     XtNancestorSensitive   XtCSenstitive          Boolean          TRUE
     XtNx                   XtCPosition            int              0
     XtNy                   XtCPosition            int              0
     XtNwidth               XtCWidth               int              0
     XtNheight              XtCHeight              int              0
     XtNdepth               XtCDepth               int              0
     XtNbackground          XtCBackground          Pixel            White
     XtNbackgroundPixmap    XtCPixmap              Pixmap           Unspecified
     XtNborderWidth         XtCBorderWidth         int              1
     XtNborderColor         XtCBorderColor         Pixel            Black
     XtNborderPixmap        XtCPixmap              Pixmap           Unspecified
     XtNsensitive           XtCSensitive           Boolean          TRUE
     XtNmappedWhenManaged   XtCMappedWhenManaged   Boolean          TRUE
     XtNdestroyCallback     XtCCallback            Pointer          NULL
     XtNtranslations        XtCTranslations        XtTranslations   NULL





     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWSTATICRASTER(3X)                             XWSTATICRASTER(3X)




                    Primitive Resource Set -- XWPRIMITIVE(3X)
     Name                    Class                   Type      Default
     ________________________________________________________________________
     XtNforeground           XtCForeground           Pixel     Black
     XtNbackgroundTile       XtCBackgroundTile       int       background
     XtNtraversalType        XtCTraversalType        int       highlight_off
     XtNhighlightStyle       XtCHighlightStyle       int       pattern_border
     XtNhighlightColor       XtCForeground           Pixel     Black
     XtNhighlightTile        XtCHighlightTile        int       50_foreground
     XtNhighlightThickness   XtCHighlightThickness   int       0
     XtNrecomputeSize        XtCRecomputeSize        Boolean   TRUE
     XtNselect               XtCCallback             Pointer   NULL
     XtNrelease              XtCCallback             Pointer   NULL




     KEYBOARD TRAVERSAL
          If the XtNtraversalType resource is set to
          highlight_traversal (XwHIGHLIGHT_TRAVERSAL in an argument
          list) at either create time or during a call to XtSetValues,
          the XwPrimitive superclass will automatically augment the
          primitive widget's translations to support keyboard
          traversal.  Refer to the XwPrimitive man page for a complete
          description of these translations.  See the TRANSLATIONS
          section in this man page for a description of the
          translations local to the static raster widget.

     TRANSLATIONS
          The static raster is affected by the mouse buttons and
          cursor motion.  The default translation set is as follows:


                        <Btn1Down>:      select(),
                        <Btn1Up>:        release(),
                        <EnterWindow>:   enter(),
                        <LeaveWindow>:   leave(),


     ACTIONS
          select:
               Allows an application to be notified of the event via
               the callback structure.

          release:
               Allows an application to be notified of the event via
               the callback structure.

          enter:
               Causes the border to be highlighted if enabled.




     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWSTATICRASTER(3X)                             XWSTATICRASTER(3X)




          leave:
               Causes the border to be highlighted if enabled.

     NOTES
          Error checking on the XImage structure is minimal, so weird
          rasters can result from incorrect or incomplete data.

     ORIGIN
          Hewlett-Packard Company.

     SEE ALSO
          CORE(3X),  XWPRIMITIVE(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.







































     Hewlett-Packard Company       - 4 -                   Aug 9, 1988






     XWSTATICTEXT(3X)                                 XWSTATICTEXT(3X)




     NAME
          XwstatictextWidgetClass - An X Widget for displaying static
          text.

     SYNOPSIS
          #include <X11/StringDefs.h>
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>
          #include <Xw/SText.h>


     CLASSES
          A subclass of CoreClass and XwPrimitiveClass.

          The widget class to use when creating a static text widget
          is XwstatictextWidgetClass.

          The class name for StaticText is StaticText.

     DESCRIPTION
          StaticText provides an uneditable block of text. Optionally
          StaticText will provide simple heuristics to fit the text
          into arbitrarily sized windows.  Imbedded new-line
          characters in the string are always honored.  Stripping of
          leading and trailing spaces is optional.

          If the static text widget is directed to become larger than
          is needed for the text, the text will be centered in the
          window.  The text will retain the specified alignment.

          If the static text widget is directed to become narrower
          than is neccessary for the text, the text may be wrapped
          (depending on XtNWrap) or clipped to the right and/or left
          (depending on the XtNalignment).

          If the static text widget is directed to become shorter than
          is neccessary for the text, the text will be clipped on the
          bottom.

          When the text is wrapped, StaticText will try to break lines
          on spaces.  The space on which the line is broken is
          temporarily converted to a newline.

     NEW RESOURCES
          To specify any of these resources within a resource defaults
          file, simply drop the XtN prefis from the resource name.
          StaticText defines the following new resources:







     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWSTATICTEXT(3X)                                 XWSTATICTEXT(3X)




                          StaticText Resource Set
        Name           Class          Type            Default
        ___________________________________________________________
        XtNhSpace      XtCHSpace      int             2
        XtNvSpace      XtCVSpace      int             2
        XtNalignment   XtCAlignment   XwAlignment     XwALIGN_LEFT
        XtNgravity     XtCGravity     int             CenterGravity
        XtNwrap        XtCWrap        Boolean         TRUE
        XtNstrip       XtCStrip       Boolean         TRUE
        XtNlineSpace   XtCLineSpace   int             0
        XtNfont        XtCFont        XFontStruct *   Fixed
        XtNstring      XtCString      char *          NULL



          XtNhSpace
               This specifies the number of pixels to maintain between
               the text and the highlight area to the right and left
               of the text.

          XtNvSpace
               This specifies the number of pixels to maintain between
               the text and the highlight area to the top and bottom
               of the text.

          XtNalignment
               This specifies the alignment to be applied when drawing
               the text.  The alignment resource is interpreted
               without regard to case.

               Alignment never causes leading or trailing spaces to be
               stripped.

               Alignment may have the following values and effects:

                    XwALIGN_LEFT will cause the left sides of the
                    lines will be vertically aligned.  Specified in
                    resource default file as "Left".

                    XwALIGN_CENTER will cause the centers of the lines
                    will be vertically aligned.  Specified in resource
                    default file as "Center".

                    XwALIGN_RIGHT will cause the right sides of the
                    lines will be vertically aligned.  Specified in
                    resource default file as "Right".

          XtNgravity
               This resource controls the use of extra space within
               the widget.




     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWSTATICTEXT(3X)                                 XWSTATICTEXT(3X)




                    CenterGravity will cause the string to be centered
                    in the extra space.  Specified in the resource
                    defaults file as "CenterGravity".

                    NorthGravity will cause the string to always to be
                    at the top of the window centered in any extra
                    width.  Specified in the resource defaults file as
                    "NorthGravity".

                    SouthGravity will cause the string to always to be
                    at the bottom of the window centered in any extra
                    width.  Specified in the resource defaults file as
                    "SouthGravity".

                    EastGravity will cause the string to always be at
                    the right of the window centered in any extra
                    height.  Specified in the resource defaults file
                    as "EastGravity".

                    WestGravity will cause the string to always be at
                    the left of the window centered in any extra
                    height.  Specified in the resource defaults file
                    as "WestGravity".

                    NorthWestGravity will cause the string to always
                    be in the upper left corner of the window.
                    Specified in the resource defaults file as
                    "NorthWestGravity".

                    NorthEastGravity will cause the string to always
                    be in the upper right corner of the window.
                    Specified in the resource defaults file as
                    "NorthEastGravity".

                    SouthWestGravity will cause the string to always
                    be in the lower left corner of the window.
                    Specified in the resource defaults file as
                    "SouthWestGravity".

                    SouthEastGravity will cause the string to always
                    be in the lower right corner of the window.
                    Specified in the resource defaults file as
                    "SouthEastGravity".

          XtNwrap
               This resource controls the wrapping of lines within the
               widget. If XtNwrap is TRUE, lines which are too long
               are broken on spaces.  The spaces are converted to
               new-lines to break the line. Imbedded new-lines are
               honored.  If there is too much text for the specified
               window size, it will be clipped at the bottom.



     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWSTATICTEXT(3X)                                 XWSTATICTEXT(3X)




               If XtNwrap is FALSE, lines which are too long will be
               clipped according to the alignment.  An XtNalignment
               value of XwALIGN_LEFT will cause lines which are too
               long to be clipped to the right.  An XtNalignment value
               of XwALIGN_RIGHT will cause lines which are too long to
               be clipped to the left.  An XtNalignment value of
               XwALIGN_CENTER will cause lines to be clipped equally
               on both the right and the left.

          XtNstrip
               This resource controls the stripping of leading an
               trailing spaces during the layout of the text string.
               If XtNstrip is FALSE, spaces are not stripped.  If
               XtNstrip is TRUE and XtNalignment is XwALIGN_LEFT,
               leading spaces are stripped from each line.  If
               XtNstrip is TRUE and XtNalignment is XwALIGN_CENTER,
               both leading and trailing spaces are stripped from each
               line.  If XtNstrip is TRUE and XtNalignment is
               XwALIGN_RIGHT, trailing spaces are stripped from each
               line.

          XtNlineSpace
               This resource controls the amount of space between
               lines.  It is specified as a percentage of the font
               height.  This space is added between each line of text.
               XtNlineSpace may be negative to a maximum of -100
               (which causes all lines to overwrite each other).

          XtNfont
               This resource controls which font the text will drawn
               in.

          XtNstring
               This resource is the string which will be drawn.  The
               string must be null terminated.  If the string is given
               in a resource defaults file, newlines may be specified
               by "\n" within the string.

















     Hewlett-Packard Company       - 4 -                   Aug 9, 1988






     XWSTATICTEXT(3X)                                 XWSTATICTEXT(3X)




     INHERITED RESOURCES
          The following resources are inherited from the indicated
          superclasses:


                           Core Resource Set -- CORE(3X)
     Name                   Class                  Type             Default
     __________________________________________________________________________
     XtNancestorSensitive   XtCSenstitive          Boolean          TRUE
     XtNx                   XtCPosition            int              0
     XtNy                   XtCPosition            int              0
     XtNwidth               XtCWidth               int              0
     XtNheight              XtCHeight              int              0
     XtNdepth               XtCDepth               int              0
     XtNbackground          XtCBackground          Pixel            White
     XtNbackgroundPixmap    XtCPixmap              Pixmap           Unspecified
     XtNborderWidth         XtCBorderWidth         int              1
     XtNborderColor         XtCBorderColor         Pixel            Black
     XtNborderPixmap        XtCPixmap              Pixmap           Unspecified
     XtNsensitive           XtCSensitive           Boolean          TRUE
     XtNmappedWhenManaged   XtCMappedWhenManaged   Boolean          TRUE
     XtNdestroyCallback     XtCCallback            Pointer          NULL
     XtNtranslations        XtCTranslations        XtTranslations   NULL





                    Primitive Resource Set -- XWPRIMITIVE(3X)
     Name                    Class                   Type      Default
     ________________________________________________________________________
     XtNforeground           XtCForeground           Pixel     Black
     XtNbackgroundTile       XtCBackgroundTile       int       background
     XtNtraversalType        XtCTraversalType        int       highlight_off
     XtNhighlightStyle       XtCHighlightStyle       int       pattern_border
     XtNhighlightColor       XtCForeground           Pixel     Black
     XtNhighlightTile        XtCHighlightTile        int       50_foreground
     XtNhighlightThickness   XtCHighlightThickness   int       0
     XtNrecomputeSize        XtCRecomputeSize        Boolean   TRUE
     XtNselect               XtCCallback             Pointer   NULL
     XtNrelease              XtCCallback             Pointer   NULL




     TRANSLATIONS
          The input to the toggle is driven by the mouse buttons.  The
          default translation set defining this button is listed
          below.  Note that for the specific key symbols used in
          traversal, the HP Key Cap which corresponds to this key
          symbol appears to the right of the definition.



     Hewlett-Packard Company       - 5 -                   Aug 9, 1988






     XWSTATICTEXT(3X)                                 XWSTATICTEXT(3X)




              <EnterWindow>:     enter()
              <LeaveWindow>:     leave()
              <KeyDown>Select:   select()    HP "Select" key
              <KeyUp>Select:     release()   HP "Select" key


     ACTIONS
          enter
               If the XtNtraversalType resource has been set to
               XwHIGHLIGHT_OFF then the StaticText will be
               highlighted.  Otherwise no action is taken.

          leave
               If the XtNtraversalType resouces has been set to
               XwHIGHLIGHT_OFF then the StaticText will be
               unhighlighted.  Otherwise no action is taken.

          select
               Invokes the select callbacks.

          release
               Invokes the release callbacks.

     NOTES
          The forced new line is the '\n' character constant as
          defined by the C compiler.  Fonts which do not use that
          character constant for the newline will not be handled
          correctly by StaticText.

          StaticText will assume that the space is the ' ' character
          constant as defined by the C compiler.  Fonts which do not
          use that character constant for spaces will not be handled
          correctly by StaticText.

          Non-8-bit character representations have undefined effects
          on the operation of StaticText.

     ORIGIN
          Hewlett-Packard Company.

     SEE ALSO
          XWPRIMITIVE(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.









     Hewlett-Packard Company       - 6 -                   Aug 9, 1988






     XWSCROLLEDWINDOW(3X)                         XWSCROLLEDWINDOW(3X)




     NAME
          XwswindowWidgetClass - the X Widget's scrolled window widget

     SYNOPSIS
          #include <X11/StringDefs.h>
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>
          #include <Xw/Valuator.h>
          #include <Xw/Arrow.h>
          #include <Xw/ScrollBar.h>
          #include <Xw/SWindow.h>


     CLASSES
          The ScrolledWindow is built from the Core, Composite, and
          XwManager classes.

          The widget class to use when creating a scrolled window is
          XwswindowWidgetClass. The class name is ScrolledWindow.

     DESCRIPTION
          The ScrolledWindow widget combines the ScrollBar and
          BulletinBoard widgets to implement a visible window onto
          some other (usually larger) data display. The visible part
          of the window can be scrolled through the larger display by
          the use of scroll bars.

          To use the scrolled window, an application first creates a
          ScrolledWindow widget, and then creates a widget capable of
          displaying the desired data as a child of the
          ScrolledWindow. ScrolledWindow will position the child
          widget within its BulletinBoard manager instance, and create
          scroll bars for the horizontal and vertical dimensions. When
          the user performs some action on the scroll bars, the child
          widget will be repositioned accordingly within the bulletin
          board.

     NEW RESOURCES
          The ScrolledWindow widget defines a unique set of resource
          types which can be used by the programmer to control the
          appearence and behavior of the scrolled window.  The
          programmer can also set the values for the Core, Composite
          and Manager widget classes to set attributes for this
          widget.  To reference a resource in a .Xdefaults file, strip
          off the XtN from the resource string.  The following table
          contains the set of resources defined by ScrolledWindow.








     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWSCROLLEDWINDOW(3X)                         XWSCROLLEDWINDOW(3X)




                        ScrolledWindow Resource Set
      Name                   Class                  Type      Default
      _______________________________________________________________
      XtNvsbWidth            XtCVsbWidth            int       20
      XtNhsbHeight           XtCHsbHeight           int       20
      XtNforceHorizontalSB   XtCForceHorizontalSB   Boolean   FALSE
      XtNforceVerticalSB     XtCForceVerticalSB     Boolean   FALSE
      XtNvScrollEvent        XtCCallBack            Pointer   NULL
      XtNhScrollEvent        XtCCallBack            Pointer   NULL
      XtNinitialX            XtCInitialX            int       0
      XtNinitialY            XtCInitialY            int       0



          XtNvScrollBarWidth
               This is the width in pixels of the vertical scroll bar.

          XtNhScrollBarHeight
               This is the height in pixels of the horizontal scroll
               bar.

          XtNforceHorizontalSB
               When the child widget is created and positioned within
               the scrolled window, its width and height are examined.
               If the entire child widget will fit within the width of
               the scrolled window, the horizontal scrollbar will not
               be created, since there is no need to scroll in that
               direction. Setting this resource to TRUE disables this
               checking and will force a horizontal scrollbar to be
               attached to the window regardless of the dimension of
               the child widget.

          XtNforceVerticalSB
               This resource controls the existence of the vertical
               scrollbar. As described above, if this is set to TRUE a
               vertical scrollbar will always be created.

          XtNvScrollEvent and XtNvScrollEvent
               An application program may track the position of the
               child within the scrolled window by linking into these
               callbacks. Whenever the user moves the valuator in
               either scroll bar, ScrolledWindow moves the child
               accordingly and then calls the appropriate callback.
               The call_data parameter is set to the new valuator
               origin for the scrollbar.

          XtNinitialX and XtNinitialY
               The child widget is initially positioned at (0,0)
               within the bulletin board.  This positioning can be
               changed by specifying a new X and Y location. If a
               non-zero value is given, that becomes the initial



     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWSCROLLEDWINDOW(3X)                         XWSCROLLEDWINDOW(3X)




               location, and the valuators inside the scrollbars are
               adjusted to give a visual indication of the new offset.
               This value should be negative to assure proper
               operation of the scrolled window. These resources are
               only used at initialization time; they cannot be set
               through a call to XtSetValues.

     INCORPORATED RESOURCES
          The ScrolledWindow  widget is built from two ScrollBar
          widgets and a BulletinBoard widget.  As such, it uses a
          large number of the resources defined by these widgets.
          Many of the attributes for these widgets can be set through
          the .Xdefaults file or by use of XtSetValues() when
          communicating with the ScrolledWindow widget.

          Only the resources within the following tables will have any
          effect on the scroll bars.  The other resource types defined
          by the ScrollBar widget are either overridden or unused by
          ScrolledWindow.

          The following tables list the resources incorporated by
          ScrolledWindow.  For a complete description of these
          resources, refer to the manual page listed in the table
          heading.


                   ScrollBar Resource Set -- XWSCROLLBAR(3X)
     Name                    Class                   Type    Default
     ______________________________________________________________________
     XtNinitialDelay         XtCinitialDelay         int     500
     XtNrepeatRate           XtCRepeatRate           int     100
     XtNgranularity          XtCGranularity          int     10
     XtNforeground           XtCForeground           Pixel   Black
     XtNhighlightColor       XtCForeground           Pixel   Black
     XtNhighlightStyle       XtCHighlightStyle       int     pattern_border
     XtNhighlightTile        XtCHighlightTile        int     50%_foreground
     XtNhighlightThickness   XtCHighlightThickness   int     0
     XtNtraversalType        XtCTraversalType        int     highlight_off


     INHERITED RESOURCES
          The following resources are inherited from the named
          superclasses:











     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWSCROLLEDWINDOW(3X)                         XWSCROLLEDWINDOW(3X)




                           Core Resource Set -- CORE(3X)
     Name                   Class                  Type             Default
     __________________________________________________________________________
     XtNancestorSensitive   XtCSenstitive          Boolean          TRUE
     XtNx                   XtCPosition            int              0
     XtNy                   XtCPosition            int              0
     XtNwidth               XtCWidth               int              0
     XtNheight              XtCHeight              int              0
     XtNdepth               XtCDepth               int              0
     XtNbackground          XtCBackground          Pixel            White
     XtNbackgroundPixmap    XtCPixmap              Pixmap           Unspecified
     XtNborderWidth         XtCBorderWidth         int              1
     XtNborderColor         XtCBorderColor         Pixel            Black
     XtNborderPixmap        XtCPixmap              Pixmap           Unspecified
     XtNsensitive           XtCSensitive           Boolean          TRUE
     XtNmappedWhenManaged   XtCMappedWhenManaged   Boolean          TRUE
     XtNdestroyCallback     XtCCallback            Pointer          NULL
     XtNtranslations        XtCTranslations        XtTranslations   NULL






                             Manager Resource Set
     Name                    Class                   Type      Default
     ____________________________________________________________________
     XtNforeground           XtCForeground           Pixel     Black
     XtNbackgroundTile       XtCBackgroundTile       int       background
     XtNhighlightThickness   XtCHighlightThickness   int       0
     XtNtraversalOn          XtCTraversalOn          Boolean   FALSE
     XtNlayout               XtCLayout               int       minimize
     XtNnextTop              XtCCallback             Pointer   NULL



     KEYBOARD TRAVERSAL
          If the XtNtraversalType resource is set to
          highlight_traversal (XwHIGHLIGHT_TRAVERSAL in an argument
          list) at either create time or during a call to XtSetValues,
          the XwPrimitive superclass will automatically augment the
          primitive widget's translations to support keyboard
          traversal.  Refer to the XwPrimitive man page for a complete
          description of these translations.  Refer to the
          TRANSLATIONS section in this man page for a description of
          the translations local to the scrolled window widget.

     TRANSLATIONS
          Input to the ScrolledWindow widget is driven by the mouse
          buttons.  However the translations driving the actions are
          defined by the ScrollBar widgets.  The additional



     Hewlett-Packard Company       - 4 -                   Aug 9, 1988






     XWSCROLLEDWINDOW(3X)                         XWSCROLLEDWINDOW(3X)




          translations used for ScrolledWindow are as follows:

               <EnterWindow>:        enter(),
               <LeaveWindow>:        leave(),

     ACTIONS
          enter:  Enter window events occurring on the scrolled window
          are handled by this action.

          leave:  Leave window events occurring on the scrolled window
          are handled by this action.


     ORIGIN
          Hewlett-Packard Company.

     SEE ALSO
          CORE(3X), XWMANAGER(3X) XWPRIMITIVE(3X),
          XWSCROLLBAR(3X),XWBULLETINBOARD(3X),XWVALUATOR(3X),
          XWARROW(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.































     Hewlett-Packard Company       - 5 -                   Aug 9, 1988






     XWSASH(3X)                                             XWSASH(3X)




     NAME
          XwsashWidgetClass - an X Widgets utility widget

     SYNOPSIS
          #include <X11/StringDefs.h>
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>
          #include <Xw/Sash.h>


     CLASSES
          The sash widget is built from the Core and XwPrimitive
          classes.

          The widget class to use when creating a sash is
          XwsashWidgetClass.  The class name is Sash.

     DESCRIPTION
          The sash widget is a utility widget used by the vertical
          paned manager XwVPaned to control the sizes of the
          individual panes.  In its realized form it appears as a
          square box of its background color.  When the pointer is
          moved into the sash the cursor is changed to the crosshair
          cursor.

          Callbacks can be attached to the widget to report selection
          (XtNselect) and unselection (XtNrelease).  This widget can
          be set to respond to Enter and Leave window events by
          highlighting and unhighlighting the sash.  This widget is
          also capable of handling  keyboard traversal.  (While you
          can traverse to the Sash in the current widget library, Sash
          does not handle keyboard input.) See the translations below
          for the default traversal keycodes.

     NEW RESOURCES
          The sash widget class defines one additional resource which
          is detailed in the table below. The programmer should refer
          to the man pages for the sash's superclasses to determine
          available resources and their defaults.


                             Sash Resource Set
               Name          Class         Type      Default
               _____________________________________________
               XtNcallback   XtCCallback   caddr_t   NULL



          XtNcallback
               This is used by the paned window widget to be informed
               of button presses and mouse movement associated with



     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWSASH(3X)                                             XWSASH(3X)




               the sash.

     INHERITED RESOURCES
          The following resources are inherited from the named
          superclasses: The defaults used for the sash when being
          created are as follows:


                           Core Resource Set -- CORE(3X)
     Name                   Class                  Type             Default
     __________________________________________________________________________
     XtNancestorSensitive   XtCSenstitive          Boolean          TRUE
     XtNx                   XtCPosition            int              0
     XtNy                   XtCPosition            int              0
     XtNwidth               XtCWidth               int              0
     XtNheight              XtCHeight              int              0
     XtNdepth               XtCDepth               int              0
     XtNbackground          XtCBackground          Pixel            White
     XtNbackgroundPixmap    XtCPixmap              Pixmap           Unspecified
     XtNborderWidth         XtCBorderWidth         int              1
     XtNborderColor         XtCBorderColor         Pixel            Black
     XtNborderPixmap        XtCPixmap              Pixmap           Unspecified
     XtNsensitive           XtCSensitive           Boolean          TRUE
     XtNmappedWhenManaged   XtCMappedWhenManaged   Boolean          TRUE
     XtNdestroyCallback     XtCCallback            Pointer          NULL
     XtNtranslations        XtCTranslations        XtTranslations   NULL





                    Primitive Resource Set -- XWPRIMITIVE(3X)
     Name                    Class                   Type      Default
     ________________________________________________________________________
     XtNforeground           XtCForeground           Pixel     Black
     XtNtraversalType        XtCTraversalType        int       highlight_off
     XtNhighlightStyle       XtCHighlightStyle       int       pattern_border
     XtNhighlightThickness   XtCHighlightThickness   int       0
     XtNselect               XtCCallback             Pointer   NULL
     XtNrelease              XtCCallback             Pointer   NULL



     KEYBOARD TRAVERSAL
          If the XtNtraversalType resource is set to
          highlight_traversal (XwHIGHTLIGHT_TRAVERSAL in an argument
          list) at either create time or during a call to XtSetValues,
          the XwPrimitive superclass will automatically augment the
          primitive widget's translations to support keyboard
          traversal.  See the XwPrimitive man page for a complete
          description of these translations.  Refer to the



     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWSASH(3X)                                             XWSASH(3X)




          TRANSLATIONS section in this man page for a description of
          the translations local to the sash widget.

     TRANSLATIONS
          The input to the sash is driven by the mouse buttons.  The
          default translation set defining this button is listed
          below.  Note that for the specific key symbols used in
          traversal, the HP Key Cap which corresponds to this key
          symbol appears to the right of the definition.


            <Btn1Down>:      SashAction(Start, UpperPane)
            <Btn2Down>:      SashAction(Start, ThisBorderOnly)
            <Btn3Down>:      SashAction(Start, LowerPane)
            <Btn1Motion>:    SashAction(Move, Upper)
            <Btn2Motion>:    SashAction(Move, ThisBorder)
            <Btn3Motion>:    SashAction(Move, Lower)
            Any<BtnUp>:      SashAction(Commit)
            <EnterWindow>:   enter()
            <LeaveWindow>:   leave()


     ACTIONS
          SashAction(Start, UpperPane):
               Change the cursor from the crosshair to an upward
               pointing arrow.  Determine the upper pane which will be
               adjusted (usually the pane to which the sash is
               attached).

          SashAction(Start, ThisBorderOnly):
               Change the cursor from the crosshair to a double headed
               arrow.  The panes that will be adjusted are the pane to
               which the sash is attached and the first pane below it
               that can be adjusted. Unlike the UpperPane and
               LowerPane mode, only 2 panes will be affected.  If one
               of the panes reaches its minimum or maximum, adjustment
               will stop, instead of finding the next adjustable pane.

          SashAction(Start, LowerPane):
               Change the cursor from the crosshair to a downward
               pointing arrow.  Determine the lower pane which will be
               adjusted (usually the pane below the pane to which the
               sash is attached).

          SashAction(Move, Upper):
               Draw a series of track lines to illustrate what the
               heights of the panes would be if the Commit action were
               invoked.  Determine which widget below the upper pane
               can be adjusted and make the appropriate adjustments.

          SashAction(Move, ThisBorder):



     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWSASH(3X)                                             XWSASH(3X)




               Draw a series of track lines to illustrate what the
               heights of the panes would be if the Commit action were
               invoked.  Adjust as needed (and as possible) the upper
               and lower panes selected when the SashAction(Start,
               ThisBorderOnly) action was invoked.

          SashAction(Move, Lower):
               Draw a series of track lines to illustrate what the
               heights of the panes would be if the Commit action were
               invoked.  Determine which widget above the lower pane
               can be adjusted and make the appropriate adjustments.

          enter:
               If the XtNtraversalType resource has been set to
               XwHIGHLIGHT_ENTER then the button will be highlighted.
               Otherwise no action is taken.

          leave:
               If the XtNtraversalType resouces has been set to
               XwHIGHLIGHT_ENTER then the button will be
               unhighlighted.  Otherwise no action is taken.

     ORIGIN
          Hewlett-Packard Company.

     SEE ALSO
          CORE(3X), XWPRIMITIVE(3X), XWVPANED(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.
























     Hewlett-Packard Company       - 4 -                   Aug 9, 1988






     XWSCROLLBAR(3X)                                   XWSCROLLBAR(3X)




     NAME
          XwscrollbarWidgetClass - the X Widget's scrollbar widget

     SYNOPSIS
          #include <X11/StringDefs.h>
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>
          #include <Xw/Valuator.h>
          #include <Xw/Arrow.h>
          #include <Xw/ScrollBar.h>


     CLASSES
          The ScrollBar is built from the Core, Composite, and
          XwManager classes.

          The widget class to use when creating a scrollbar is
          XwscrollbarWidgetClass.  The class name for scrollbar is
          ScrollBar.

     DESCRIPTION
          The ScrollBar widget combines the Valuator and Arrow widgets
          to implement a horizontal or vertical scrolling widget
          containing a valuator and an arrow on each end of the
          valuator.

          As with the Valuator, input is supported through interactive
          slider movement and selections on the slide area not
          occupied by the slider.  Both types of input have a separate
          callback list for communicating with the application.  The
          arrows on each end of the valuator control additional input
          to the valuator.  When an arrow is selected, the slider
          within the valuator will be moved in the direction of the
          arrow by an application supplied amount.  If the button is
          held down, the slider will continue to move at a constant
          rate.

          The ScrollBar can be used by the application to attach to
          objects scrolled under application control, or used by
          composite widgets to implement predefined scrolled objects.

     NEW RESOURCES
          The ScrollBar defines a set of resource types used by the
          programmer to specify the data for the scrollbar.  The
          programmer can also set the values for the Core, Composite
          and Manager widget classes to set attributes for this
          widget. To reference a resource in a .Xdefaults file, strip
          off the XtN from the resource string.  The following table
          contains the set of resources defined by ScrollBar.





     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWSCROLLBAR(3X)                                   XWSCROLLBAR(3X)




                          ScrollBar Resource Set
            Name              Class             Type   Default
            __________________________________________________
            XtNinitialDelay   XtCinitialDelay   int    500
            XtNrepeatRate     XtCRepeatRate     int    100
            XtNgranularity    XtCGranularity    int    2



          XtNinitialDelay
               The ScrollBar supports smooth time sequenced movement
               of the slider when a selection occurs on the arrows.
               This resource defines the amount of delay to wait
               between the initial selection and the slider starting
               its repetitive movement.  The value is defined in
               milliseconds.

          XtNrepeatRate
               This resource defines the continuous repeat rate to use
               to move the slider while the button is being held down
               on an arrow.  The value is also defined in
               milliseconds.

          XtNgranularity
               This resource defines the increment in the valuator's
               coordinate system to move the slider while continuous
               scrolling.

     INCORPORATED RESOURCES
          The ScrollBar creates itself by internally creating two
          Arrow widgets and a Valuator.  As such, it uses a large
          number of the resources defined by these widgets.  Many of
          the attributes for these widgets can be set through the
          .Xdefaults file or by use of XtSetValues() when
          communicating with the ScrollBar.

          It should be noted, that only the resources within the
          following tables will have any effect on the valuator or
          arrows.  The other resource types defined by the Valuator
          and Arrow widgets are either overridden or unused by
          ScrollBar.

          The following tables list the resources incorporated by
          ScrollBar.  For a complete description of these resources,
          refer to the manual page listed in the table heading.


                Primitive Resource Set -- XWPRIMITIVE(3X)
      Name                Class               Type    Default
      ______________________________________________________________
      XtNhighlightColor   XtCForeground       Pixel   Black



     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWSCROLLBAR(3X)                                   XWSCROLLBAR(3X)




      XtNhighlightStyle   XtCHighlightStyle   int     pattern_border
      XtNhighlightTile    XtCHighlightTile    int     50_foreground
      XtNtraversalType    XtCTraversalType    int     highlight_off




                 Valuator Resource Set -- XWVALUATOR(3X)
      Name                  Class                 Type      Default
      ______________________________________________________________
      XtNsliderMin          XtCSliderMin          int       0
      XtNsliderMax          XtCSliderMax          int       100
      XtNsliderExtent       XtCSliderExtent       int       10
      XtNsliderOrigin       XtCSliderOrigin       int       0
      XtNslideOrientation   XtCSlideOrientation   int       vertical
      XtNsliderMoved        XtCCallback           Pointer   NULL
      XtNsliderReleased     XtCCallback           Pointer   NULL
      XtNareaSelected       XtCCallback           Pointer   NULL


     INHERITED RESOURCES
          The following resources are inherited from the named
          superclasses:


                           Core Resource Set -- CORE(3X)
     Name                   Class                  Type             Default
     __________________________________________________________________________
     XtNancestorSensitive   XtCSenstitive          Boolean          TRUE
     XtNx                   XtCPosition            int              0
     XtNy                   XtCPosition            int              0
     XtNwidth               XtCWidth               int              0
     XtNheight              XtCHeight              int              0
     XtNdepth               XtCDepth               int              0
     XtNbackground          XtCBackground          Pixel            White
     XtNbackgroundPixmap    XtCPixmap              Pixmap           Unspecified
     XtNborderWidth         XtCBorderWidth         int              1
     XtNborderColor         XtCBorderColor         Pixel            Black
     XtNborderPixmap        XtCPixmap              Pixmap           Unspecified
     XtNsensitive           XtCSensitive           Boolean          TRUE
     XtNmappedWhenManaged   XtCMappedWhenManaged   Boolean          TRUE
     XtNdestroyCallback     XtCCallback            Pointer          NULL
     XtNtranslations        XtCTranslations        XtTranslations   NULL





                    Manager Resource Set -- XWMANAGER(3X)
     Name                    Class                   Type      Default
     ____________________________________________________________________



     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWSCROLLBAR(3X)                                   XWSCROLLBAR(3X)




     XtNforeground           XtCForeground           Pixel     Black
     XtNbackgroundTile       XtCBackgroundTile       int       background
     XtNhighlightThickness   XtCHighlightThickness   int       0
     XtNtraversalOn          XtCTraversalOn          Boolean   FALSE
     XtNlayout               XtCLayout               int       minimize
     XtNnextTop              XtCCallback             Pointer   NULL


     KEYBOARD TRAVERSAL
          If the XtNtraversalOn resource is set to True at either
          create time or during a call to XtSetValues, the XwManager
          superclass will automatically augment the manager widget's
          translations to support keyboard traversal.  Refer to the
          XwManager man page for a complete description of these
          translations.

     ORIGIN
          Hewlett-Packard Company.

     SEE ALSO
          CORE(3X), XWMANAGER(3X), XWPRIMITIVE(3X), XWCREATETILE(3X),
          XWVALUATOR(3X), XWARROW(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.





























     Hewlett-Packard Company       - 4 -                   Aug 9, 1988






     XWTEXTEDIT(3X)                                     XWTEXTEDIT(3X)




     NAME
          XwtexteditWidgetClass - An X Widget for viewing and editing
          text.

     SYNOPSIS
          #include <X11/StringDefs.h>
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>
          #include <Xw/TextEdit.h>

     CLASSES
          TextEdit is a subclass of CoreClass and XwPrimitiveClass.

          The widget class record to use when creating a text edit
          widget is XwtexteditWidgetClass.

          The class name for TextEdit is TextEdit.

     OVERVIEW
          TextEdit provides a single and multi-line text editor which
          has both a customizable user interface and a programmatic
          interface.  It can be used for single-line string entry,
          forms entry with verification procedures, multiple-page
          document viewing, and full-window editing.  It provides an
          application with a consistent editing paradigm for entry of
          textual data.

          The display of the textual data on the screen can be
          adjusted to the application writer's need based on four
          class resources, XtNwrap, XtNwrapBreak, XtNscroll, and
          XtNgrow.  XtNwrapP controls automatic line breaking for
          lines that extend off the end of the screen.  XtNscroll
          controls horizontal and vertical shifting of the text when
          the insertion cursor moves off the screen.  XtNgrow controls
          attempts by the widget to resize its window to make more
          room for text that extends beyond the current screen size.
          These resources are explained in detail below.

          TextEdit provides separate callback lists to verify
          insertion cursor movement, modification of the text, and
          leaving the TextEdit widget.  Each of these callbacks
          provides the verification function with the widget instance,
          the event that caused the callback, and a data structure
          specific to the verification type.  From this information
          the function can verify if the application considers this to
          be a legitimate state change and signal the widget whether
          to continue with the action.  The verification function can
          also manipulate the widget through the class methods defined
          by the TextEdit class.  The verification callback lists are
          explained in detail below.




     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWTEXTEDIT(3X)                                     XWTEXTEDIT(3X)




          The user interface can be tailored by providing a new set of
          translations.  The default translations provide commands for
          movement, deletion, killing and selection with key bindings
          similar to an EMACS style editor.

          TextEdit allows the user to select regions of text.  By
          using TextEdit's selection mechanism, application writers
          can easily fit instances of TextEdit into X11's current
          selection mechanism.

          The TextEdit class controls the data structures for drawing
          the text on the screen and defines the functions that
          manipulate that data.  The storage of the text is provided
          by a separate component called the Source.  The Source
          provides the storage of the textual data and a set of
          functions for querying and changing that data.  The
          application writer can provide a new source for the TextEdit
          widget.  The details are provided below.

     NEW RESOURCES
          TextEdit defines the following new resources:


                              TextEdit Resource Set
     Name                  Class             Type           Default
     _______________________________________________________________________
     XtNsourceType         XtCSourceType     String         "stringsrc"
     XtNsource             XtCTextSource     Pointer        StringSrc
     XtNdisplayPosition    XtCTextPosition   XtTextPosition 0
     XtNinsertPosition     XtCTextPosition   XtTextPosition 0
     XtNselectionLeft      XtCSelectionLeft  XtTextPosition 0
     XtNselectionRight     XtCSelectionRight XtTextPosition 0
     XtNwrap               XtCWrap           XwWrap         XwWrapOff
     XtNwrapBreak          XtCWrapBreak      XwWrapBreak    XwWrapWhiteSpace
     XtNscroll             XtCScroll         XwScroll       XwAutoScrollOff
     XtNgrow               XtCGrow           XwGrow         XwGrowOff
     XtNleftMargin         XtCMargin         Dimension      3 See Note Below
     XtNrightMargin        XtCMargin         Dimension      3 See Note Below
     XtNtopMargin          XtCMargin         Dimension      3 See Note Below
     XtNbottomMargin       XtCMargin         Dimension      3 See Note Below
     XtNmotionVerification XtCCallback       XtRCallback    NULL
     XtNmodifyVerification XtCCallback       XtRCallback    NULL
     XtNleaveVerification  XtCCallback       XtRCallback    NULL
     XtNexecute            XtCallback        XtRCallback    NULL


          XtNtranslations
               The set of default translations are described below.

          XtNdisplayPosition
               The position in the text source that will be displayed



     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWTEXTEDIT(3X)                                     XWTEXTEDIT(3X)




               at the top of the screen.  The default is 0, or the
               start of the text source.

          XtNinsertPosition
               The position in the text source of the insert cursor.
               The default is 0.

          XtNselectionLeft
               The starting position of the initial selection.  The
               default is 0.

          XtNselectionRight
               The ending position of the initial selection.  The
               default is 0.

          XtNsourceType
               This defines the type of the text source. It is one of
               "stringsrc," "disksrc" or "progdefinedsource."

          XtNsource
               This specifies a new Source.  The default is StringSrc.

          XtNwrap
               This resource specifies how the widget displays lines
               longer than the screen width.  When set to XwWrapOff,
               the lines may extend off screen to the right.  When set
               to XwSoftWrap, the lines will be wrapped at the right
               margin with the actual position determined by the
               resource XtNwrapBreak.

          XtNwrapBreak
               This resource specifies how the wrap position is
               determined.  When set to XwWrapAny, the wrap will
               happen at the character position closest to the right
               margin.  When set to XwWrapWhiteSpace, the wrap will
               happen at the  last whitespace before the right margin.
               If the line does not have whitespace, it will be
               wrapped as XwWrapAny.

          XtNscroll
               This resource controls the horizontal and vertical
               scrolling of lines longer than the screen width.  When
               set to XwAutoScrollOff the widget will not scroll.
               When set to XwAutoScrollVertical, the widget will
               scroll lines vertically.  When set to
               XwAutoScrollHorizontal, the widget will scroll a
               single-line display horizontally.  Horizontal scrolling
               is not currently supported for multi-line displays.
               Both horizontal and vertical scrolling can be set with
               XwAutoScrollBoth (again, subject to the single-line
               horizontal restriction).  The default is



     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWTEXTEDIT(3X)                                     XWTEXTEDIT(3X)




               XwAutoScrollOff.  XtNscroll has lower priority than
               XtNwrap, meaning if wrapping is enabled, the widget
               will attempt to wrap to the next line before it will
               attempt to scroll horizontally.

          XtNgrow
               This resource controls if the widget will try to resize
               its window when it needs more height or width to
               display the text.  When set to XwGrowOff it will not
               resize itself.  When set to XwGrowHorizontal it will
               attempt to change its width when lines are too long for
               the current screen width.  When set to XwGrowVertical
               it will attempt to resize its height when the number of
               text lines is greater than can be displayed with the
               current screen height.  When set to XwGrowBoth, the
               widget will attempt resizes in both dimensions.  Growth
               attempts have higher priority than either wrapping or
               scrolling.  If enabled, the widget will always try to
               grow to display text before trying to wrap or scroll.
               The default is XwGrowOff.  The success of a resize
               request is determined by the widget's parent.

          XtNleftMargin
               The number of pixels used for the left margin.

               NOTE: if TextEdit is embedded in a manager with
               keyboard traversal enabled, it will silently enforce
               the constraint that all margins must be at least 3
               pixels wider than the highlight border width.

          XtNrightMargin
               The number of pixels used for the right margin.

          XtNtopMargin
               The number of pixels used for the top margin.

          XtNbottomMargin
               The number of pixels used for the bottom margin.

          XtNmotionVerification
               This verification callback list is called before the
               insertion cursor is moved to a new position.  The
               default is NULL.  See the verification section below.

          XtNmodifyVerification
               This verification callback list is called before text
               is deleted from or inserted to the text source.  The
               default is NULL.  See the verification section below.

          XtNleaveVerification
               This verification callback list is called before the



     Hewlett-Packard Company       - 4 -                   Aug 9, 1988






     XWTEXTEDIT(3X)                                     XWTEXTEDIT(3X)




               widget loses input focus.  The default is NULL.  See
               the verification section below.

          XtNexecute
               This callback list is similar to a selection function
               on a button.  When the user invokes an event that calls
               the "execute" function (see the translation table
               below), this callback list will be executed. In the
               default translation table, this is bound to the "enter"
               key.

     SUBCOMPONENT RESOURCES
          StringSrc defines the following new resources.  In a
          resource file they can be specified by the name stringsrc
          under the name of the TextEdit widget, or through the class
          StringSrc.


                          StringSrc Resource Set
          Name             Class         Type         Default
          ______________________________________________________
          XtNstring        XtCString     char *       NULL
          XtNmaximumSize   XtCLength     int          NULL
          XtNeditType      XtCEditType   XtEditType   XwtextEdit


          XtNstring
               The initial string to be viewed and/or edited.  The
               default is the empty string.  An XtGetValues call on
               this resource will return a copy of the internal
               buffer. The application program is responsible for
               freeing the space allocated by the copy. An XtSetValues
               call will copy the given string into the internal
               buffer.

          XtNmaximumSize
               The maximum number of characters that can be entered
               into the internal buffer.  If this value is not set
               then the internal buffer will increase its size as
               needed limited only by the space limitations of the
               process.

          XtNeditType
               This resource controls the edit state of the source.
               It can be XttextRead, a read only source, XttextAppend,
               a source than can only be appended to, and XttextEdit,
               a fully editable source.


               DiskSrc defines the following new resources.  In a
               resource file they can be specified by the name disksrc



     Hewlett-Packard Company       - 5 -                   Aug 9, 1988






     XWTEXTEDIT(3X)                                     XWTEXTEDIT(3X)




               under the name of the TextEdit widget, or through the
               class DiskSrc.


                           DiskSrc Resource Set
            Name          Class         Type         Default
            ___________________________________________________
            XtNfile       XtCFile       char *       NULL
            XtNeditType   XtCEditType   XtEditType   XwtextEdit


          XtNfile
               The absolute pathname of a disk file to be viewed
               and/or edited.  If no file is given, a temporary file
               will be created.

          XtNeditType
               This resource controls the edit state of the source.
               It can be XttextRead, a read only source, and
               XttextAppend, a source than can only be appended to.


               Display defines the following new resources.  In a
               resource file they can be specified by the name display
               under the name of the TextEdit widget, or through the
               class Display.


                           Display resource Set
          Name            Class           Type            Default
          _______________________________________________________
          XtNfont         XtCFont         XFontStruct *   Fixed
          XtNforeground   XtCForeground   XtRPixel        Black


          XtNfont
               The font used to display the text.  The default is
               fixed.  There are currently several display bugs
               associated with proportional fonts.

          XtNforeground
               The color for drawing the text.  The default is black.


     INHERITED RESOURCES
          The following resources are inherited from the indicated
          superclasses:







     Hewlett-Packard Company       - 6 -                   Aug 9, 1988






     XWTEXTEDIT(3X)                                     XWTEXTEDIT(3X)




                           Core Resource Set -- CORE(3X)
     Name                   Class                  Type             Default
     __________________________________________________________________________
     XtNancestorSensitive   XtCSenstitive          Boolean          TRUE
     XtNx                   XtCPosition            int              0
     XtNy                   XtCPosition            int              0
     XtNwidth               XtCWidth               int              0
     XtNheight              XtCHeight              int              0
     XtNdepth               XtCDepth               int              0
     XtNbackground          XtCBackground          Pixel            White
     XtNbackgroundPixmap    XtCPixmap              Pixmap           Unspecified
     XtNborderWidth         XtCBorderWidth         int              1
     XtNborderColor         XtCBorderColor         Pixel            Black
     XtNborderPixmap        XtCPixmap              Pixmap           Unspecified
     XtNsensitive           XtCSensitive           Boolean          TRUE
     XtNmappedWhenManaged   XtCMappedWhenManaged   Boolean          TRUE
     XtNdestroyCallback     XtCCallback            Pointer          NULL
     XtNtranslations        XtCTranslations        XtTranslations   NULL





                    Primitive Resource Set -- XWPRIMITIVE(3X)
     Name                    Class                   Type      Default
     ________________________________________________________________________
     XtNforeground           XtCForeground           Pixel     Black
     XtNbackgroundTile       XtCBackgroundTile       int       background
     XtNtraversalType        XtCTraversalType        int       highlight_off
     XtNhighlightStyle       XtCHighlightStyle       int       pattern_border
     XtNhighlightColor       XtCForeground           Pixel     Black
     XtNhighlightTile        XtCHighlightTile        int       50_foreground
     XtNhighlightThickness   XtCHighlightThickness   int       0
     XtNrecomputeSize        XtCRecomputeSize        Boolean   TRUE
     XtNselect               XtCCallback             Pointer   NULL
     XtNrelease              XtCCallback             Pointer   NULL




     KEYBOARD TRAVERSAL
          If the XtNtraversalType resource is set to
          highlight_traversal (XwHIGHLIGHT_TRAVERSAL in an argument
          list) at either create time or during a call to XtSetValues,
          the XwPrimitive superclass will automatically augment the
          primitive widget's translations to support keyboard
          traversal.  Refer to the XwPrimitive man page for a complete
          description of these translations.  Refer to the
          TRANSLATIONS section in this man page for a description of
          the translations local to the scrolled window widget.




     Hewlett-Packard Company       - 7 -                   Aug 9, 1988






     XWTEXTEDIT(3X)                                     XWTEXTEDIT(3X)




     TRANSLATIONS
          Since TextEdit has full editing functionality, it supports
          an elaborate set of translations.  The following table lists
          TextEdit's default translations which are a subset of key
          bindings from an EMACS editor.  (An EMACS editor refers to a
          set of editors based on the original design of R.M. Stallman
          at MIT for an extensible, customizable self-documenting
          display editor.) TextEdit supports the concept of delete and
          kill.  Both delete and kill remove a unit of text from the
          text source, but text that has been removed with a kill can
          be restored by an unkill action.  Kills are stored in the X
          Cutbuffer 1, so that a kill in one instance of a TextEdit
          widget can be inserted into another instance of a TextEdit
          widget.  TextEdit does not support a history of kills in a
          kill ring, nor the appending of kills made in sequence.
          TextEdit highlights the current selection by reversing the
          foreground and background color.  Text that has been copied
          from TextEdit into the current selection storage can be
          inserted into the buffer with a stuff action.

          Each of these functions can be rebound to a different key in
          the default translation file set in .Xdefaults.  The string
          to identify the function is identical to the function name
          used below.  An example line in that file to bind Control-I
          to move the insertion point forward one word is:

                               Ctrl<Key>I:    forward-word

          See the Xt Intrinsics documention for more information on
          the Xdefaults file and translations.


          TextEdit works with keyboard traversal and defines the
          required actions.


     DEFAULT KEY BINDINGS FOR TEXTEDIT

















     Hewlett-Packard Company       - 8 -                   Aug 9, 1988






     XWTEXTEDIT(3X)                                     XWTEXTEDIT(3X)




                                 Movement
                    __________________________________
                    Ctrl F        forward-character
                    Right Arrow   forward-character
                    Ctrl B        backward-character
                    Left Arrow    backward-character
                    Meta F        forward-word
                    Meta B        backward-word
                    Meta ]        forward-paragraph
                    Ctrl [        backward-paragraph
                    Ctrl A        beginning-of-line
                    Ctrl E        end-of-line
                    Ctrl N        next-line
                    Down Arrow    next-line
                    Ctrl P        previous-line
                    Up Arrow      previous-line
                    Ctrl V        next-page
                    Next          next-page
                    Meta V        previous-page
                    Prev          previous-page
                    Meta <        beginning-of-file
                    Home          beginning-of-file
                    Meta >        end-of-file
                    Shift Home    end-of-file
                    Ctrl Z        scroll-one-line-up
                    Meta Z        scroll-one-line-down



                          Delete Kill and Stuff
                 ________________________________________
                 Ctrl D         delete-next-character
                 Ctrl H         delete-previous-character
                 Meta D:        delete-next-word
                 Meta H         delete-previous-word
                 Shift Meta D   kill-word
                 Shift Meta H   backward-kill-word
                 Ctrl W         kill-selection
                 Ctrl K         kill-to-end-of-line
                 Meta K         kill-to-end-of-paragraph
                 Ctrl Y         unkill
                 Meta Y         stuff












     Hewlett-Packard Company       - 9 -                   Aug 9, 1988






     XWTEXTEDIT(3X)                                     XWTEXTEDIT(3X)




                              Miscellaneous
                  ______________________________________
                  Ctrl J              newline-and-indent
                  Ctrl O              newline-and-backup
                  Ctrl M              newline
                  <Btn1Down>          select-start
                  Button1<PtrMoved>   extend-adjust
                  <Btn1Up>            extend-end
                  <Btn2Down>          stuff
                  <Btn3Down>          extend-start
                  Button3<PtrMoved>   extend-adjust
                  <Btn3Up>            extend-end
                  Ctrl L              redraw-display
                  <Key>               insert-char


     KEYBOARD TRAVERSAL
          The following table summarizes the keystrokes which (when
          keyboard traversal is active) will move the focus. The keys
          used elsewhere in the X Widgets library for keyboard
          traversal are used for other purposes in the text edit
          widget.  Therefore, it was necessary to define other
          keystokes to serve these functions.  To minimize the
          incompatibility the decision was made to use the same keys
          with the addition of the Ctl modifier to implement keyboard
          traversal in this widget.


                            Keyboard Traversal
                      ______________________________
                      Ctrl Up      traverse-up
                      Ctrl Down    traverse-down
                      Ctrl Left    traverse-left
                      Ctrl Right   traverse-right
                      Ctrl Next    traverse-next
                      Ctrl Prev    traverse-prev
                      Ctrl Home    traverse-home
                      Enter        traverse-next-top



          traverse-up:
               Inform the parent of this widget that it should
               transfer keyboard focus to the first widget above this
               one.

          traverse-down:
               Inform the parent of this widget that it should
               transfer keyboard focus to the first widget below this
               one.




     Hewlett-Packard Company      - 10 -                   Aug 9, 1988






     XWTEXTEDIT(3X)                                     XWTEXTEDIT(3X)




          traverse-left:
               Inform the parent of this widget that it should
               transfer keyboard focus to the first widget to the left
               of this one.

          traverse-right:
               Inform the parent of this widget that it should
               transfer keyboard focus to the first widget to the
               right of this one.

          traverse-next:
               Inform the parent of this widget that it should
               transfer keyboard focus to the next child in the
               parent's list of children.

          traverse-prev:
               Inform the parent of this widget that it should
               transfer keyboard focus to the previous child in the
               parent's list of children.

          traverse-home:
               Inform the parent of this widget that it should
               transfer keyboard focus to the child which is closest
               to the uppper left hand corner of the parent.  If that
               child already has the keyboard focus, then ask the
               grandparent of this widget to give the keyboard focus
               to whichever of its children which is closest to the
               upper left hand corner.

          traverse-next-top:
               Find the topmost parent in this widget hierarch which
               is a subclass of XwManager and tell it to issues any
               XtNnextTop callbacks that have been registered with it.
               The purpose of this callback is to allow applications
               to move the keyboard focus between top level widget
               hierarchies of the same application.

     DISPLAYING TEXT, WORD WRAP AND ACTIONS
          Text is considered to be hierarchically composed of white
          space, words, lines and paragraphs.  These component
          concepts are currently hard-coded, but we intend that future
          versions will support a more general version of the text
          composition hierarchy.  White space is defined as any non-
          empty sequence of the ASCII characters space, tab, linefeed
          or carriage return (decimal values of 32, 9, 10, 13,
          respectively); a word is any non-empty sequence of
          characters bounded on both sides by whitespace.  A source
          line is any (possibly empty) sequence of characters bounded
          by newline characters; a display line is any (possibly
          empty) sequence of characters appearing on a single screen
          display line.  A source paragraph is any sequence of



     Hewlett-Packard Company      - 11 -                   Aug 9, 1988






     XWTEXTEDIT(3X)                                     XWTEXTEDIT(3X)




          characters bounded by sets of two or more adjacent newline
          characters.  a display paragraph is any (possibly empty)
          sequence of characters bounded by newline characters (NOTE:
          this is identical to the definition of a source line).  In
          all cases, the beginning or end of the edit text is an
          acceptable bounding element in the previous definitions.

          When making display decisions, TextEdit first determines
          whether all the text will fit in the current display.  If it
          does not, and growing is enabled, the widget will make
          resize request of its parent.  If the request is denied or
          only partially satisfied, no future growth requests will be
          made unless there is an intervening resize operation
          externally imposed.  If any source line is still too long to
          fit in the display after growing is attempted, wrapping is
          checked.  If wrap is off (XwWrapOff), one display line is
          drawn for each source line.  If a source line is too long
          for the display, it is truncated at the right margin after
          the last full character which fits.  If wrapping is enabled
          (XwSoftWrap), a new display line will be started with the
          first word which doesn't fit on the current line.  If the
          wrap break option is XwWrapAny, as many characters from that
          word as will fit before the right margin are written to the
          current display line, then the next character starts at the
          left margin of the next display line.  If the wrap break
          option is XwWrapWhiteSpace, the line break is instead made
          after the first whitespace character which follows the last
          full word which does fit on the current display line.  If,
          however, under white space break, the first full word which
          does not fit is also the first word on the line, the wrap
          break is made as if XwWrapAny were selected.


     VERIFICATION CALLBACKS
          Three types of verification callbacks are supported by
          TextEdit There is one for motion operations, to verify a new
          insert position; there is one for modifying operations, to
          verify insertion, deletion or replacement of text; there is
          one for widget exit, to verify state consistency on loss of
          focus by the widget.  Each verification callback procedure
          is of type XtCallbackProc, which defines the three arguments
          it will be invoked with.  These are the id of the widget
          making the callback, the client data which was specified by
          the client application when the callback was registered (see
          XtAddCallback), and a pointer (type XwTextVerifyPtr) to the
          verification call_data structure.  The C data types used
          here are:

          typedef enum {motionVerify, modVerify, leaveVerify} opType ;

          typedef struct {



     Hewlett-Packard Company      - 12 -                   Aug 9, 1988






     XWTEXTEDIT(3X)                                     XWTEXTEDIT(3X)




                XEvent         *xevent ;
                opType          operation ;
                boolean         doit ;
                XtTextPosition  currInsert, newInsert ;
                XtTextPosition  startPos, endPos ;
                XtTextBlock    *text ;
                } XwTextVerifyCD, *XwTextVerifyPtr ;

          Before the chain of verification callbacks is activated for
          any given operation, a structure of type XtTextVerifyCD is
          initialized.  The initial values are:











































     Hewlett-Packard Company      - 13 -                   Aug 9, 1988






     XWTEXTEDIT(3X)                                     XWTEXTEDIT(3X)




             xevent:       for a leave operation, the current
                           event pointer

             operation:    element of opType signifying the
                           type of verification operation

             doit:         TRUE

             currInsert:   current position of the insert
                           point

             newInsert:    for a motion operation, the
                           position the user is attempting to
                           move the insert point to,
                           otherwise, the same value as
                           currInsert

             startPos:     for a modify operation, the
                           beginning position in the current
                           source of the text about to be
                           deleted or replaced, or where new
                           text will be inserted.  If not a
                           modify operation, the same value as
                           currInsert.

             endPos:       for a modify operation, the ending
                           position in the current source of
                           the text about to be deleted or
                           replaced.  If no text is being
                           removed, it will have the same
                           value as startPos.  If not a modify
                           operation, the same value as
                           currInsert.

             text:         for a modify operation with new
                           text to be inserted, a pointer to a
                           structure of type XtTextBlock,
                           which references the text to be
                           inserted.  Otherwise, NULL.


     It is possible for the client to register more than one callback
     procedure for any of these callback types.  The order in which
     the callbacks will be invoked is described in the toolkit
     documentation.  Since there can be more than one callback, each
     verification procedure should first check the doit field.  If it
     is false, someone else has already rejected the operation, so
     there is no need for further evaluation.  On return from invoking
     the chain of callbacks, the TextEdit widget will look at the doit
     member of the XtTextVerifyCD structure.  If it is still true,
     TextEdit will proceed with operation, otherwise it will not.  Any



     Hewlett-Packard Company      - 14 -                   Aug 9, 1988






     XWTEXTEDIT(3X)                                     XWTEXTEDIT(3X)




     user feedback for the rejected operation is the responsibility of
     the verification procedure.  Verification callbacks are permitted
     to modify some of the data in the XtTextVerifyCD structure.  The
     TextEdit widget will only look at certain fields on return,
     though, according to the operation type.  For a motion operation,
     only the newInsert position will be looked at.  For a modify
     operation, only startPos, endPos and text will be examined for
     changes.  For leave operation, no fields will be examined.  There
     is no mechanism for preventing a verification callback from
     making other changes to the editing state through the documented
     interface, but such behind-the-back actions are discouraged.


     APPLICATION WRITER'S INTERFFACE
          The state of TextEdit can be changed in through the normal
          functional interface to widgets (XtSetValues and
          XtGetValues) or by exported external functions.

          TextEdit's resources can be queried and set through
          XtSetValues and XtGetValues.  The widget will maintain its
          display consistent with the new values.  In particular this
          is the method for changing the display options.

          The internal buffer should be manipulated through the
          external functions that follow.

          This set of external functions is designed to allow the
          widget programmer to access the internal buffer that
          TextEdit manages.  For example, if the widget is being used
          to enter a string, the program can get a copy of the string
          (i.e. the internal buffer) with the function
          XwTextCopyBuffer or XwTextReadSubString.  All of the
          following functions that change the contents of the buffer,
          its selection, or insertion position, will update the
          display after they are called.  If the programmer needs to
          make a sequence of these calls, the widget's screen updating
          function should be turned off with a call to
          XwTextUpdate(Off) to prevent screen flash.  After the
          sequence of calls the programmer must remember to call
          XwTextUpdate(On) to update the window and resume normal
          updating.  Note that it is not necessary to turn off the
          update function for functions that only get values from the
          widget.  Neither is it necessary to use these calls if the
          programmer only makes one call that changes the widget.


          Buffer Functions
               void XwTextClearBuffer(w)
                              XwTextEditWidget w;
               Clear the internal buffer.  After this call all
               characters in the buffer have been removed.



     Hewlett-Packard Company      - 15 -                   Aug 9, 1988






     XWTEXTEDIT(3X)                                     XWTEXTEDIT(3X)




               unsigned char *XwTextCopyBuffer(w)
                               XwTextEditWidget w;
               This function uses XtMalloc to create space to make a
               copy of the internal buffer and returns the pointer to
               that copy.  The application writer is responsible for
               freeing the space.


          Read a Substring
               int XwTextReadSubString( w, startpos, endpos, target, targetsize, targetused )
                 XwTextEditWidget  w;
                 XwTextPosition    startpos, endpos;
                 unsigned char     *target;
                 int               targetsize,
                                   *targetused;
               This function will move characters from the buffer into
               the caller's space.  The caller must provide the space
               to copy into and its size in bytes.  The routine will
               return the number of positions moved.  The value of
               targetused returns the number of bytes used in the
               target string by the move.


          Selection
               unsigned char *XwTextCopySelection(w)
                  XwTextEditWidget w;
               This function uses XtMalloc to create space to make a
               copy of the current selection and returns the pointer
               to that copy.  The application writer is responsible
               for freeing the space.

               void XwTextUnsetSelection(w)
                   XwTextEditWidget w;
               This function will clear the current selection.

               void XwTextSetSelection(w, left, right)
                 XwTextEditWidget  w;
                 XwTextPosition    left, right;
               This function sets the current selection to be between
               the character positions left to right.

               void XwTextGetSelectionPos(w, left, right)
                    XwTextEditWidget w;
                    XwTextPosition *left, *right;
               This function returns the character positions of the
               current selection.

          Insertion and Deletion
               void XwTextInsert(w, string)
                    XwTextEditWidget w;
                    unsigned char *string;



     Hewlett-Packard Company      - 16 -                   Aug 9, 1988






     XWTEXTEDIT(3X)                                     XWTEXTEDIT(3X)




               This function inserts the string at the current
               insertion position and advances the insertion position
               to the end of the string.

               XwEditResult XwTextReplace(w, startPos, endPos, text)
                 XwTextEditWidget         w;
                 XwTextPosition startPos,
                                endPos;
                 unsigned char  *text;
               Remove text in the source from startPos to endPos and
               insert the string text starting at startPos.  If
               startPos and endPos are the same the action is an
               insertion.  If text is the empty string, the action is
               a deletion.

          Drawing and Updating
               XwTextRedraw(w);
                 XwTextEditWidget w;
               Refresh the widget screen.

               void XwTextUpdate( w, status )
                   XwTextEditWidget w;
                   Boolean status;
               This function turns the widget's screen updating
               function on and off. Wrapping these calls around a
               sequence of calls that change the content of the
               internal buffer will prevent screen flash.

          End of Buffer
               XwTextPosition XwTextGetLastPos (w, lastPos)
                   XwTextEditWidget w;
                   XwTextPosition lastPos;
               This function returns the last character position in
               the buffer.

          Insertion Position
               void XwTextSetInsertPos(w, position)
                    XwTextEditWidget w;
                    XwTextPosition position;

               XwTextPosition XwTextGetInsertPos(w)
                    XwTextEditWidget w;
               These functions set and return the insertion position.

          Setting the Source
               void XwTextSetSource(w, source, startpos)
                    XwTextEditWidget w;
                    XwTextSourcePtr source;
                    XwTextPosition startpos;





     Hewlett-Packard Company      - 17 -                   Aug 9, 1988






     XWTEXTEDIT(3X)                                     XWTEXTEDIT(3X)




     SOURCE DEFINITION
          The source provides textual data space and functions for
          manipulating that data.  The functions are defined below.
          An application can define its own source by reimplementing
          these functions.


          Read
               XwTextPosition SourceRead(src, pos, text, maxread)
                     XwTextsource    *src;
                     XwTextPosition   pos;
                     XwTextblock     *text;
                     XwTextPosition   maxread;
               This function returns a read-only text block in the src
               with maxread number of characters starting from pos.
               The return value is the next character position
               following the block.

          Replace
               XwEditResult SourceReplace(src, startpos, endpos, textblk, delta)
                     XwTextsource    *src;
                     XwTextPosition  startpos,
                                     endpos;
                     XwTextBlock     *textblk;
                     XwTextPosition             *delta;
               This function removes existing text in src between
               startpos and endpos and inserts new text from textblk
               at startpos.  delta is change in the size of the text
               source.  It returns XweditDone for a successful
               operation, XweditPosError for positional errors when
               source is in XttextAppend mode, and XweditError when
               the operation could not be performed.

          SetLastPosition
               XwTextPosition SourceSetLastPos(src, lastpos)
                 XwTextSource   *src;
                 XwTextPosition lastpos;
               This functions sets the last position in the source.

          Scan
               XwTextPosition SourceScan(src, pos, scantype, dir, count, include)
                 XwTextsource    *src;
                 XwTextPosition  pos;
                 XwScanType        scantype;
                 XwScanDirection   dir;
                 int             count;
                 Boolean         include;
               SourceScan searches in dir direction (XwsdLeft
               XwsdRight) for XwScantype (XwstPositions,
               XwstWhiteSpace, XwstEOL, XwstParagraph, XwstLast).
               count is the number of the given type it will scan over



     Hewlett-Packard Company      - 18 -                   Aug 9, 1988






     XWTEXTEDIT(3X)                                     XWTEXTEDIT(3X)




               and include indicates whether to count the item
               currently pointing at.  It returns the starting
               position of the item scanned for.

          EditType
               XtEdittype SourceEditType(src)
                 XwTextsource  *src;
               Returns the edit type of source.


     CURRENT LIMITATIONS
          The current default source is not optimized for large
          amounts of data.  X11's current selection is not yet
          supported.

     ORIGIN
          Digital Equipment Corporation.  Massachusetts Institute of
          Technology.  Hewlett-Packard Company.

     SEE ALSO
          CORE(3X), XWPRIMITIVE(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.






























     Hewlett-Packard Company      - 19 -                   Aug 9, 1988






     XWTITLEBAR(3X)                                     XWTITLEBAR(3X)




     NAME
          XwtitlebarWidgetClass - An X Widget for creating titlebars.

     SYNOPSIS
          #include <X11/StringDefs.h>
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>
          #include <Xw/TitleBar.h>


     CLASSES
          A subclass of Core, Composite, Constraint and
          XwManagerClass.

          The widget class to use when creating a TitleBar widget is
          XwtitlebarWidgetClass.

          The class name of TitleBar is TitleBar.

     DESCRIPTION
          TitleBar provides a flexible mechanism for creating
          titlebars containing text and arbitrary widgets.  Inputs are
          an optional text string and any number of widgets to manage.
          The title string will be displayed in a StaticText widget
          (refer to XWSTATICTEXT(3X)).  Managed widgets may have
          optionally specified layout information (see CONSTRAINT
          RESOURCES below).

          When TitleBar is directed to become narrower than is
          neccessary to display all of its interior widgets, some
          widgets may be hidden.  The XtNprecedence resource in each
          managed widget controls this feature.

          As TitleBar is directed to become narrower and narrower,
          widgets whose sum of XtNrPadding and XtNlPadding is greater
          than zero will have their padding collapsed to one pixel.
          Widgets will have their padding stripped in order of
          decreasing values of XtNprecedence.

          If, after collapsing all of the widgets' padding, TitleBar
          is still too narrow to display all of its children widgets,
          widgets will be hidden.  Widgets will be hidden in order of
          decreasing values of XtNprecedence.  TitleBar will try to
          always display a widget of the highest priority (lowest
          value of XtNprecedence, even if it must be clipped.

          Users of TitleBar should note that when children widgets are
          hidden they are completely hidden.  Additionally, users who
          wish to make extensive use of the obscurability rules should
          read carefully the section on XtNprececence in the
          CONSTRAINT RESOURCES section below.



     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWTITLEBAR(3X)                                     XWTITLEBAR(3X)




     NEW RESOURCES
          To specify any of these resources within a resource defaults
          file, simply drop the XtN prefix from the resource name.
          TitleBar defines the following new resources:


                              TitleBar Resource Set
     Name                  Class                Type          Default
     _______________________________________________________________________
     XtNtitlePrecedence    XtCTitlePrecedence   int           0
     XtNtitleRegion        XtCTitleRegion       XwAlignment   XwALIGN_CENTER
     XtNtitlePosition      XtCTitlePosition     int           0
     XtNtitleRPadding      XtCTitleRPadding     int           1
     XtNtitleLPadding      XtCTitleLPadding     int           1
     XtNtitleForeground    XtCForeground        Pixel         black
     XtNtitleBackground    XtCBackground        Pixel         white
     XtNtitleHSpace        XtNTitleHSpace       int           2
     XtNtitleVSpace        XtVTitleHSpace       int           2
     XtNtitleBorderWidth   XtCBorderWidth       int           0
     XtNtitleSelect        XtCCallback          Pointer       NULL
     XtNtitleRelease       XtCCallback          Pointer       NULL
     XtNhSpace             XtCHSpace            int           2
     XtNvSpace             XtCVSpace            int           2
     XtNenter              XtCCallback          Pointer       NULL
     XtNleave              XtCCallback          Pointer       NULL
     XtNselect             XtCCallback          Pointer       NULL
     XtNrelease            XtCCallback          Pointer       NULL



          XtNtitlePrecedence
               The value to be loaded into the constraint record of
               the optional StaticText widget.

          XtNtitleRegion
               The value to be loaded into the XtNtitleRegion
               constraint resource of the optional StaticText widget.

          XtNtitlePosition
               The value to be loaded into the XtNtitlePosition
               constraint resource of the optional StaticText widget.

          XtNtitleRPadding
               The value to be loaded into the XtNtitleRPadding
               constraint resource of the optional StaticText widget.

          XtNtitleLPadding
               The value to be loaded into the XtNtitleLPadding
               constraint resource of the optional StaticText widget.

          XtNtitleForeground



     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWTITLEBAR(3X)                                     XWTITLEBAR(3X)




               The value to be loaded into the XtNforeground resource
               of the optional StaticText widget's core part.

          XtNtitleBackground
               The value to be loaded into the XtNbackground resource
               of the optional StaticText widget's core part.

          XtNtitleHSpace
               The value to be loaded into the XtNhSpace resource of
               the optional StaticText widget.

          XtNtitleVSpace
               The value to be loaded into the XtNvSpace resource of
               the optional StaticText widget.

          XtNtitleBorderWidth
               The value to loaded into the XtNborderWidth resource of
               the optional StaticText widget.

          XtNtitleSelect
               The value loaded into the XtNselect resource of the
               optional StaticText widget.

          XtNtitleRelease
               The value loaded into the XtNrelease resource of the
               optional StaticText widget.

          XtNhSpace
               The amount of space to maintain between the right and
               left of the titlebar and the interior widgets.

          XtNvSpace
               The amount of space to maintain between the top and
               bottom of the titlebar and the interior widgets.

          XtNenter, XtNleave, XtNselect, and XtNrelease
               Callbacks provided for control of TitleBar.  The data
               parameter is unused.

     INCORPORATED RESOURCES
          The TitleBar creates an internal StaticText widget to handle
          the title string.  In order to provide the user some control
          over the appearance of this internal widget, the following
          resources defined by StaticText are incorporated into
          TitleBar's resource list.

          It must be noted that only the resources within the
          following tables will have any effect on the internal
          StaticText widget.  The other resources defined for
          StaticText will be overridden by TitleBar.




     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWTITLEBAR(3X)                                     XWTITLEBAR(3X)




          For a complete description of the following resources, refer
          to the manual page given in the table heading.


                    Primitive Resource Set -- XWPRIMITIVE(3X)
     Name                    Class                   Type    Default
     ________________________________________________________________________
     XtNhighlightColor       XtCForeground           Pixel   Black
     XtNhighlightStyle       XtCHighlightStyle       int     XwPATTERN_BORDER
     XtNhighlightTile        XtCHighlightTile        int     XwBACKGROUND
     XtNhighlightThickness   XtCHighlightThickness   int     0
     XtNtraversalType        XtCTraversalType        int     HIGHLIGHT_OFF










































     Hewlett-Packard Company       - 4 -                   Aug 9, 1988






     XWTITLEBAR(3X)                                     XWTITLEBAR(3X)




                Static Text Resource Set -- STATICTEXT(3X)
       Name           Class          Type            Default
       ____________________________________________________________
       XtNstring      XtCString      char *          NULL
       XtNalignment   XtCAlignment   XwAlignment     XwALIGN_CENTER
       XtNwrap        XwCWrap        Boolean         TRUE
       XtNlineSpace   XtCLineSpace   int             0
       XtNfont        XtCFont        XFontStruct *   Fixed




     CONSTRAINT RESOURCES
          The following resources will be attached to every widget
          inserted into TitleBar.  See CONSTRAINT(3X) for a general
          discussion of constraint resources.

          TitleBar uses the constraint resources as hints during the
          layout of its managed children.  Under certain conditions,
          any of these resources except XtNprecedence can (and will)
          be ignored by TitleBar.


           Constraint Resource Set -- Children of TITLEBAR(3X)
         Name            Class           Type          Default
         ________________________________________________________
         XtNregion       XtCRegion       XwAlignment   See below.
         XtNposition     XtCPosition     int           0
         XtNlPadding     XtCLPadding     int           2
         XtNrPadding     XtCRPadding     int           2
         XtNprecedence   XtCPrecedence   int           1



          XtNregion
               Associates a child with a region of the titlebar.  The
               regions may be specified in the resource default file
               as "left" for XwALIGN_LEFT, "center" for
               XwALIGN_CENTER, and "right" for XwALIGN_RIGHT.

               During layout widgets with XtNregion values of
               XwALIGN_LEFT grouped to the left end of TitleBar.
               Widgets with XtNregion values of XwALIGN_LEFT are
               grouped to the right of TitleBar.  Widgets with
               XtNregion values of XwALIGN_CENTER will be grouped
               between the left and right groups.  Additionally,
               TitleBar tries to center the center group within the
               TitleBar.

               Widgets for which XtNregion is unspecified or
               XwALIGN_NONE when XtNstring is non-null, will be



     Hewlett-Packard Company       - 5 -                   Aug 9, 1988






     XWTITLEBAR(3X)                                     XWTITLEBAR(3X)




               assigned one of the two regions not equal to
               XtNtitleRegion in an alternating fashion.

               Widgets for which XtNregion is unspecified or
               XwALIGN_NONE when XtNstring is null, will be assigned a
               region.  The first such widget will be assigned to the
               left region, the next to the center region, the next to
               the right region, the next to the left region, and so
               forth.

          XtNposition
               This resource gives the order of widgets within region.
               The left and the center region are layed out with
               XtNposition values increasing from left to right.  The
               right region is laid out with XtNposition values
               increasing from right to left.

               Position values are unique within a region.  If two
               widgets are assigned the same position, the widget
               which was assigned first gets the position.  The second
               widget gets the next available position.  For example,
               widget1 and widget2 are the only widgets inserted in
               TitleBar.  Widget1 is inserted befor widget2.  Widget1
               and widget2 are both assigned a position of 4.  Widget1
               will be given the position of 4, and widget2 will be
               assigned a position of 5.

          XtNlPadding
               The number of pixels that TitleBar should try to
               maintain between the left of the widget and the right
               padding of the sibling widget to the left.  For
               example, widget1 is to the left of widget2 within
               TitleBar.  Widget1 has a XtNrPadding value of 5.
               Widget2 has a XtNlPadding value of 5.  The borders of
               widget1 and widget2 will be 10 pixels apart.

               If TitleBar is too narrow to honor all of its
               children's padding requests without hiding some
               children, some, possibly all, padding requests will be
               collapsed.

          XtNrPadding
               The number of pixels that TitleBar should try to
               maintain between the right of the widget and the left
               padding of the sibling widget to the right.  For
               example, widget1 is to the right of widget2 within
               TitleBar.  Widget1 has a XtNlPadding value of 5.
               Widget2 has a XtNrPadding value of 5.  The borders of
               widget1 and widget2 will be 10 pixels apart.

               If TitleBar is too narrow to honor all of its



     Hewlett-Packard Company       - 6 -                   Aug 9, 1988






     XWTITLEBAR(3X)                                     XWTITLEBAR(3X)




               children's padding requests without hiding some
               children, some, possibly all, padding requests will be
               collapsed.

          XtNprecedence
               When TitleBar is too narrow to display all of its
               children, this resource is used to determine which
               children should be hidden.  Widgets with high values of
               XtNprecedence are hidden first.  Precedence values are
               relative to all other widgets within an instantiation
               of TitleBar.  This means that all widgets, regardless
               of their region, with high values of XtNprecedence will
               be hidden before any widgets with the next lower values
               are hidden.

               Values of XtNprecedence need not be unique.  If values
               are unique, there is no question about which widget is
               first to lose its padding, nor about which widget is
               first to be hidden.

               If values are not unique for all children of TitleBar,
               there need be no question about which widget is acted
               on first, but it is dependent on both insertion order
               and precedence.  The last widget inserted in TitleBar
               of a given precedence is the first to lose its
               requested padding  (of widgets with that priority).
               Widgets lose padding from last inserted to first
               inserted, within a given level of precedence.  When
               hiding widgets, widgets within a given precedence level
               are hidden from last inserted to first inserted.
























     Hewlett-Packard Company       - 7 -                   Aug 9, 1988






     XWTITLEBAR(3X)                                     XWTITLEBAR(3X)




     INHERITED RESOURCES
          The following resources are inherited from the indicated
          superclasses:


                           Core Resource Set -- CORE(3X)
     Name                   Class                  Type             Default
     __________________________________________________________________________
     XtNancestorSensitive   XtCSenstitive          Boolean          TRUE
     XtNx                   XtCPosition            int              0
     XtNy                   XtCPosition            int              0
     XtNwidth               XtCWidth               int              0
     XtNheight              XtCHeight              int              0
     XtNdepth               XtCDepth               int              0
     XtNbackground          XtCBackground          Pixel            White
     XtNbackgroundPixmap    XtCPixmap              Pixmap           Unspecified
     XtNborderWidth         XtCBorderWidth         int              1
     XtNborderColor         XtCBorderColor         Pixel            Black
     XtNborderPixmap        XtCPixmap              Pixmap           Unspecified
     XtNsensitive           XtCSensitive           Boolean          TRUE
     XtNmappedWhenManaged   XtCMappedWhenManaged   Boolean          TRUE
     XtNdestroyCallback     XtCCallback            Pointer          NULL
     XtNtranslations        XtCTranslations        XtTranslations   NULL




          The input to the toggle is driven by the mouse buttons.  The
          default translation set defining this button is listed
          below.
                           <EnterWindow>:      enter()"
                           <LeaveWindow>:      leave()"
                           <Btn1Down>:         select()"
                           <Btn1Up>:           release()"

     ACTIONS
          enter
               If keyboard traversal is active (argument type
               XtNtraversalOn with argument value TRUE) and the parent
               of this widget is not a subclass of XwManager, initiate
               keyboard traversal.  After this, the callback list is
               invoked.

          leave
               If keyboard traversal is active (argument type
               XtNtraversalOn with argument value TRUE) and the parent
               of this widget is not a subclass of XwManager,
               terminate keyboard traversal.  After this, the callback
               list is invoked.

          select



     Hewlett-Packard Company       - 8 -                   Aug 9, 1988






     XWTITLEBAR(3X)                                     XWTITLEBAR(3X)




               Invokes the select callback list.

          release
               Invokes the release callback list.


















































     Hewlett-Packard Company       - 9 -                   Aug 9, 1988






     XWTITLEBAR(3X)                                     XWTITLEBAR(3X)




     ORIGIN
          Hewlett-Packard Company.

     SEE ALSO
          CORE(3X), CONSTRAINT(3X), XWMANAGER(3X), XWSTATICTEXT(3X),
          XWCREATETILE(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.













































     Hewlett-Packard Company      - 10 -                   Aug 9, 1988






     XWTOGGLE(3X)                                         XWTOGGLE(3X)




     NAME
          XwtoggleWidgetClass - the X Widgets toggle button widget

     SYNOPSIS
          #include <X11/StringDefs.h>
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>
          #include <Xw/Toggle.h>


     CLASSES
          The toggle widget is built from the Core, XwPrimitive and
          XwButton classes.

          The widget class to use when creating a toggle is
          XwtoggleWidgetClass.  The class name is Toggle.

     DESCRIPTION
          The toggle widget implements a button which consists of a
          graphic and a label.  The label can be positioned either to
          the right (the default) or the left of the graphic.  The
          size of the graphic is based on the height of the font used
          for the label.  The space between the graphic and the label
          is equal to 1/3 the font height. The default graphic is a
          square box and this may be changed to a diamond shape.  It
          is intended that application writers can put a group of
          square buttons into a Row Column manager with its mode set
          to the default n_of_many to get the checkbox, or N of Many,
          selection semantic and then put a group of diamond buttons
          into a Row Column manager with its mode set to one_of_many
          to get the radiobutton, or One of Many, selection semantic.

          The default semantic for this button is that button 1 down
          will toggle the state of the toggle. When in a selected
          state, the interior of the graphic will be filled with the
          foreground color; when not selected the interior of the
          graphic will be filled with the background color; when
          insensitive, the label will be drawn with the patterned tile
          (the default is a 75/25 mix of the foreground and background
          colors).

          Callbacks can be attached to the widget to report selection
          (XtNselect) and unselection (XtNrelease).  This widget can
          be set to respond to Enter and Leave window events by
          highlighting and unhighlighting the button.  This widget is
          also capable of handling  keyboard traversal.  See the
          translations below for the default traversal keycodes.

     NEW RESOURCES
          The toggle widget class defines a set of resource types that
          can be used by the programmer to specify data for widgets of



     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWTOGGLE(3X)                                         XWTOGGLE(3X)




          this class. Recall that the string to be used when setting
          any of these resources in an application defaults file (like
          .Xdefaults) can be obtained by stripping the preface "XtN"
          off of the resource name.  For instance, XtNfont becomes
          font.


                           Toggle Resource Set
            Name             Class           Type      Default
            __________________________________________________
            XtNsquare        XtCSquare       Boolean   True
            XtNselectColor   XtCForeground   Pixel     Black



          XtNsquare
               If True, forces the button to draw a square box,
               otherwise it will draw a diamond shape box.  One
               possible usage for this resource is to make the
               convention that row column managers containing diamond
               shaped toggles have their XtNmode resource set to
               one_of_many which will only allow one of the buttons to
               be set at any one time, while row column managers
               containing square buttons use the default mode setting
               of n_of_many which allows any or all of the buttons to
               be set.

          XtNselectColor
               Allows the application to specify what color should be
               used to fill in the center of the square (or the
               diamond) when it is set.

     INHERITED RESOURCES
          The following resources are inherited from the named
          superclasses: The defaults used for the toggle when being
          created are as follows:


















     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWTOGGLE(3X)                                         XWTOGGLE(3X)




                           Core Resource Set -- CORE(3X)
     Name                   Class                  Type             Default
     __________________________________________________________________________
     XtNancestorSensitive   XtCSenstitive          Boolean          TRUE
     XtNx                   XtCPosition            int              0
     XtNy                   XtCPosition            int              0
     XtNwidth               XtCWidth               int              0
     XtNheight              XtCHeight              int              0
     XtNdepth               XtCDepth               int              0
     XtNbackground          XtCBackground          Pixel            White
     XtNbackgroundPixmap    XtCPixmap              Pixmap           Unspecified
     XtNborderWidth         XtCBorderWidth         int              1
     XtNborderColor         XtCBorderColor         Pixel            Black
     XtNborderPixmap        XtCPixmap              Pixmap           Unspecified
     XtNsensitive           XtCSensitive           Boolean          TRUE
     XtNmappedWhenManaged   XtCMappedWhenManaged   Boolean          TRUE
     XtNdestroyCallback     XtCCallback            Pointer          NULL
     XtNtranslations        XtCTranslations        XtTranslations   NULL





                    Primitive Resource Set -- XWPRIMITIVE(3X)
     Name                    Class                   Type      Default
     ________________________________________________________________________
     XtNforeground           XtCForeground           Pixel     Black
     XtNbackgroundTile       XtCBackgroundTile       int       background
     XtNtraversalType        XtCTraversalType        int       highlight_off
     XtNhighlightStyle       XtCHighlightStyle       int       pattern_border
     XtNhighlightColor       XtCForeground           Pixel     Black
     XtNhighlightTile        XtCHighlightTile        int       50_foreground
     XtNhighlightThickness   XtCHighlightThickness   int       0
     XtNrecomputeSize        XtCRecomputeSize        Boolean   TRUE
     XtNselect               XtCCallback             Pointer   NULL
     XtNrelease              XtCCallback             Pointer   NULL


















     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWTOGGLE(3X)                                         XWTOGGLE(3X)




                     Button Resource Set -- XWBUTTON(3X)
     Name               Class              Type            Default
     ___________________________________________________________________
     XtNfont            XtCFont            XFontStruct *   Fixed
     XtNlabel           XtCLabel           caddr_t         NULL
     XtNlabelLocation   XtCLabelLocation   int             right
     XtNvSpace          XtCVSpace          int             2
     XtNhSpace          XtCHSpace          int             2
     XtNset             XtCSet             Boolean         False
     XtNsensitiveTile   XtCSensitiveTile   int             75_foreground


     KEYBOARD TRAVERSAL
          If the XtNtraversalType resource is set to
          highlight_traversal (XwHIGHLIGHT_TRAVERSAL in an argument
          list) at either create time or during a call to XtSetValues,
          the XwPrimitive superclass will automatically augment the
          primitive widget's translations to support keyboard
          traversal.  Refer to the XwPrimitive man page for a complete
          description of these translations.  Refer to the
          TRANSLATIONS section in this man page for a description of
          the translations local to the toggle widget.

     TRANSLATIONS
          The input to the toggle is driven by the mouse buttons.  The
          default translation set defining this button is listed
          below.  Note that for the specific key symbols used in
          traversal, the HP Key Cap which corresponds to this key
          symbol appears to the right of the definition.


                <Btn1Down>:      toggle()
                <EnterWindow>:   enter()
                <LeaveWindow>:   leave()
                <Key>Select:     toggle()   HP "Select" key


     ACTIONS
          Note that this widget contains some actions which are not
          bound to any events by the default translations.  The
          purpose of these additional actions are to allow advanced
          users to alter the button semantics to their liking.


          toggle:
               Toggle the set state of the button (make it TRUE if it
               was FALSE, FALSE if it was TRUE).  Redraw only the
               toggle part (not the label) of the button. If the
               current state of the button is set (TRUE) issue the
               XtNselect callbacks, if not set (FALSE) issue the
               XtNrelease callbacks.  No additional data beyond the



     Hewlett-Packard Company       - 4 -                   Aug 9, 1988






     XWTOGGLE(3X)                                         XWTOGGLE(3X)




               widget id and the specified closure is sent with these
               callbacks.

          enter:
               If the XtNtraversalType resource has been set to
               XwHIGHLIGHT_ENTER then the button will be highlighted.
               Otherwise no action is taken.

          leave:
               If the XtNtraversalType resouces has been set to
               XwHIGHLIGHT_ENTER then the button will be
               unhighlighted.  Otherwise no action is taken.

     ORIGIN
          Hewlett-Packard Company.

     SEE ALSO
          CORE(3X), XWPRIMITIVE(3X), XWBUTTON(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.

































     Hewlett-Packard Company       - 5 -                   Aug 9, 1988






     XWVPANED(3X)                                         XWVPANED(3X)




     NAME
          XwvPanedWidgetClass - the X Widgets vertical paned manager
          widget.

     SYNOPSIS
          #include <X11/StringDefs.h>
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>
          #include <Xw/VPW.h>


     CLASSES
          The vertical paned manager widget is built out of the Core,
          Composite, Constraint and XwManager classes. Note that since
          the Composite class contains no user settable resources,
          there is no table for Composite class resources.

          The widget class to use when creating a vertical paned
          manager is XwvPanedWidgetClass.  The class name is
          VPanedWindow.

     DESCRIPTION
          The vertical paned manager is a composite widget which lays
          children out in a vertically tiled format.  Children appear
          in a top to bottom fashion, with the first child inserted
          appearing at the top of the paned widget and the last child
          inserted appearing at the bottom of the paned widget.  The
          vertical paned manager will grow to match the width of its
          widest child and all other children are forced to this
          width. The vertical paned mananger does not grow if
          setValues is performed on a child, making it the widest
          child.  It is clipped instead.  The height of the vertical
          paned manager will be equal to the sum of the heights of all
          its children and the (optional) padding surrounding them.

          It is also possible for the end user to adjust the size of
          the panes. To facilitate this adjustment, a control widget
          (XwsashWidgetClass) is created for most children.  The
          control widget appears as a square box positioned on the
          bottom of the pane which it controls.  Using the mouse (see
          the description on translations below) a user can adjust the
          size of a pane.

          The vertical paned manager is a constraint widget, which
          means that it creates and manages a set of constraints for
          each child.  It is possible to specify a minimum and maximum
          size for each pane.  The vertical paned widget will not
          allow a pane to be adjusted below its minimum nor beyond its
          maximum.  Also, when the minimum size of a pane is equal to
          its maximum then no control widget will be presented for
          that pane.  Nor will a control widget be presented for the



     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWVPANED(3X)                                         XWVPANED(3X)




          bottom-most pane.

          The vertical paned manager supports 2 presentation modes:
          framed and unframed.  When framed, each pane is offset from
          the edges of the vertical paned manager and from other panes
          by a specified (and settable) number of pixels.  In this
          mode the entire borderwidth of each child is also visible.
          Note that the vertical paned manager enforces a particular
          (and settable) border width on each pane.  The second mode
          is unframed where the edge of a pane exactly corresponds to
          the edge of the vertical paned manager so that only a border
          between panes is visible.

          No callbacks are defined for this manager.








































     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWVPANED(3X)                                         XWVPANED(3X)




     NEW RESOURCES
          The vertical paned manager defines a set of resource types
          used by the programmer to specify data for the manager
          widget.  The programmer can also set the values for the Core
          and XwManager widget classes to set attributes for this
          widget.  The following table contains the settable resources
          defined by the vertical paned manager.  Recall that the
          string to be used when setting any of these resources in an
          application defaults file (like .Xdefaults) can be obtained
          by stripping the preface "XtN" off of the resource name.
          For instance, XtNmin becomes min.


                       Vertical Paned Resource Set
           Name              Class            Type      Default
           ____________________________________________________
           XtNsashIndent     XtCSashIndent    int       -10
           XtNborderFrame    XtCBorderWidth   int       1
           XtNframed         XtCBoolean       Boolean   TRUE
           XtNpadding        XtCPadding       int       3
           XtNrefigureMode   XtCBoolean       Boolean   TRUE



          XtNsashIndent
               This controls where along the bottom of the pane the
               control widget (the pane's sash) will be placed.  A
               positive number will cause the sash to be offset from
               the left side of the pane, a negative number will cause
               the sash to be offset from the right side of the pane.
               If the offset specified is greater than the width of
               the vertical paned manager, minus the width of the
               sash, the sash will be placed flush against the left
               hand side of the paned manager.

          XtNborderFrame
               The application can specify the thickness of the
               borderwidth of all panes in the paned manager.  The
               value must be greater than or equal to 0.

          XtNframed
               The application can specify whether the panes should be
               displayed with some padding surrounding each pane
               (TRUE) or whether the panes should be set flush with
               the paned manager (FALSE).

          XtNpadding
               The application can specify how many pixels of padding
               should surround each pane when it is being displayed in
               framed mode.  This value must be greater than or equal
               to 0.



     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWVPANED(3X)                                         XWVPANED(3X)




          XtNrefigureMode
               This setting is useful if a large number of
               programmatic manipulations are taking place.  It will
               prevent the manager from recomputing and displaying new
               positions for the child panes (FALSE).  Once the
               changes have been executed this flag should be set to
               TRUE to allow the vertical paned manager to show the
               correct positions of the current children.














































     Hewlett-Packard Company       - 4 -                   Aug 9, 1988






     XWVPANED(3X)                                         XWVPANED(3X)




     CONSTRAINT RESOURCES
          The following resources are attached to every widget
          inserted into vertical paned manager.  See CONSTRAINT(3X)
          for a general discussion of constraint resources.


          Constraint Resource Set -- Children of VPANEDWINDOW(3X)
          Name             Class           Type        Default
          _______________________________________________________
          XtNmin           XtCMin          int         1
          XtNmax           XtCMax          int         10000
          XtNallowResize   XtCBoolean      Boolean     FALSE
          XtNskipAdjust    XtCBoolean      Boolean     FALSE



          XtNmin
               Allows an application to specify the mimimum size to
               which a pane may be resized.  This value must be
               greater than 0.

          XtNmax
               Allows an application to specify the maximum size to
               which a pane may be resized.  This value must be
               greater than the specified minimum.

          XtNallowResize
               Allows an application to specify whether the vertical
               paned manager should allow a pane to request to be
               resized.  This flag only has an effect after the paned
               manager and its children have been realized.  If this
               flag is set to TRUE, the manager will try to honor
               requests to alter the height of the pane. If false, it
               will always deny pane requests to resize.

          XtNskipAdjust
               Allows an application to specify that the vertical
               paned manager should not automatically resize this pane
               (flag set to TRUE).

     INHERITED RESOURCES
          The following resources are inherited from the named
          superclasses:











     Hewlett-Packard Company       - 5 -                   Aug 9, 1988






     XWVPANED(3X)                                         XWVPANED(3X)




                           Core Resource Set -- CORE(3X)
     Name                   Class                  Type             Default
     __________________________________________________________________________
     XtNancestorSensitive   XtCSenstitive          Boolean          TRUE
     XtNx                   XtCPosition            int              0
     XtNy                   XtCPosition            int              0
     XtNwidth               XtCWidth               int              0
     XtNheight              XtCHeight              int              0
     XtNdepth               XtCDepth               int              0
     XtNbackground          XtCBackground          Pixel            White
     XtNbackgroundPixmap    XtCPixmap              Pixmap           Unspecified
     XtNborderWidth         XtCBorderWidth         int              1
     XtNborderColor         XtCBorderColor         Pixel            Black
     XtNborderPixmap        XtCPixmap              Pixmap           Unspecified
     XtNsensitive           XtCSensitive           Boolean          TRUE
     XtNmappedWhenManaged   XtCMappedWhenManaged   Boolean          TRUE
     XtNdestroyCallback     XtCCallback            Pointer          NULL
     XtNtranslations        XtCTranslations        XtTranslations   NULL





                  Manager Resource Set -- XWMANAGER(3X)
       Name                Class               Type      Default
       ____________________________________________________________
       XtNforeground       XtCForeground       Pixel     Black
       XtNbackgroundTile   XtCBackgroundTile   int       background
       XtNtraversalOn      XtCTraversalOn      Boolean   FALSE
       XtNlayout           XtCLayout           int       minimize
       XtNnextTop          XtCCallback         Pointer   NULL



     KEYBOARD TRAVERSAL
          If the XtNtraversalOn resource is set to TRUE at either
          create time or during a call to XtSetValues, the XwManager
          superclass will automatically augment the manager widget's
          translations to support keyboard traversal.  Refer to the
          XwManager man page for a complete description of these
          translations.

     SASH TRANSLATIONS
          The translations which control the sashes created for each
          adjustable pane are replicated here for convenience.









     Hewlett-Packard Company       - 6 -                   Aug 9, 1988






     XWVPANED(3X)                                         XWVPANED(3X)




            <Btn1Down>:      SashAction(Start, UpperPane)
            <Btn2Down>:      SashAction(Start, ThisBorderOnly)
            <Btn3Down>:      SashAction(Start, LowerPane)
            <Btn1Motion>:    SashAction(Move, Upper)
            <Btn2Motion>:    SashAction(Move, ThisBorder)
            <Btn3Motion>:    SashAction(Move, Lower)
            Any<BtnUp>:      SashAction(Commit)
            <EnterWindow>:   enter()
            <LeaveWindow>:   leave()


          SashAction(Start, UpperPane):
               Change the cursor from the crosshair to an upward
               pointing arrow.  Determine the upper pane which will be
               adjusted (usually the pane to which the sash is
               attached).

          SashAction(Start, ThisBorderOnly):
               Change the cursor from the crosshair to a double headed
               arrow.  The panes that will be adjusted are the pane to
               which the sash is attached and the first pane below it
               that can be adjusted. Unlike the UpperPane and
               LowerPane mode, only 2 panes will be effected.  If one
               of the panes reaches its minimum or maximum, adjustment
               will stop, instead of finding the next adjustable pane.

          SashAction(Start, LowerPane):
               Change the cursor from the crosshair to a downward
               pointing arrow.  Determine the lower pane which will be
               adjusted (usually the pane below the pane to which the
               sash is attached).

          SashAction(Move, Upper):
               Draw a series of track lines to illustrate what the
               heights of the panes would be if the Commit action were
               invoked.  Determine which widget below the upper pane
               can be adjusted and make the appropriate adjustments.

          SashAction(Move, ThisBorder):
               Draw a series of track lines to illustrate what the
               heights of the panes would be if the Commit action were
               invoked.  Adjust as needed (and as possible) the upper
               and lower panes selected when the SashAction(Start,
               ThisBorderOnly) action was invoked.

          SashAction(Move, Lower):
               Draw a series of track lines to illustrate what the
               heights of the panes would be if the Commit action were
               invoked.  Determine which widget above the lower pane
               can be adjusted and make the appropriate adjustments.




     Hewlett-Packard Company       - 7 -                   Aug 9, 1988






     XWVPANED(3X)                                         XWVPANED(3X)




          enter:
               Enter window events occurring on the scrolled window
               are handled by this action.

          leave:
               Leave window events occurring on the scrolled window
               are handled by this action.


     ORIGIN
          Hewlett-Packard Company.

     SEE ALSO
          CORE(3X), XWMANAGER(3X), XWPRIMITIVE(3X), XWSASH(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.





































     Hewlett-Packard Company       - 8 -                   Aug 9, 1988






     XWVALUATOR(3X)                                     XWVALUATOR(3X)




     NAME
          XwvaluatorWidgetClass - the X Widget's valuator widget

     SYNOPSIS
          #include <X11/StringDefs.h>
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>
          #include <Xw/Valuator.h>


     CLASSES
          The Valuator widget is built from the Core and XwPrimitive
          classes.

          The widget class to use when creating a valuator is
          XwvaluatorWidgetClass.  The class name for Valuator is
          Valuator.

     DESCRIPTION
          The Valuator widget implements a horizontal or vertical
          scrolling widget as a rectangular bar containing a sliding
          box (slider).  The Valuator widget supports input through
          interactive slider movement and selections on the slide area
          not occupied by the slider.  Both types of input have a
          separate callback list for communicating with the
          application.  The Valuator widget can be used by the
          application to attach to objects scrolled under application
          control, or used by composite widgets to implement
          predefined scrolled objects.

     NEW RESOURCES
          The Valuator widget defines a set of resource types used by
          the programmer to specify the data for the valuator.  The
          programmer can also set the values for the Core and
          Primitive widget classes to set attributes for this widget.
          To reference a resource in a .Xdefaults file, strip off the
          XtN from the resource string.  The following table contains
          the set of resources defined by Valuator.
















     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWVALUATOR(3X)                                     XWVALUATOR(3X)




                          Valuator Resource Set
     Name                  Class                 Type      Default
     ________________________________________________________________
     XtNsliderMin          XtCSliderMin          int       0
     XtNsliderMax          XtCSliderMax          int       100
     XtNsliderExtent       XtCSliderExtent       int       10
     XtNsliderOrigin       XtCSliderOrigin       int       0
     XtNsliderTile         XtCSliderTile         int       foreground
     XtNslideOrientation   XtCSlideOrientation   int       vertical
     XtNsliderMoved        XtCCallback           Pointer   NULL
     XtNsliderReleased     XtCCallback           Pointer   NULL
     XtNareaSelected       XtCCallback           Pointer   NULL



          XtNsliderMin, XtNsliderMax
               The Valuator widget lets the application define its own
               coordinate system for the valuator.  Any integer values
               with sliderMin less than sliderMax can be specified.

          XtNsliderExtent
               The size of the slider can be set by the application.
               The acceptable values are 0 < sliderExtent < (sliderMax
               - sliderMin).

          XtNsliderOrigin
               The location of the slider can be set by the
               application.  The acceptable values are between
               sliderMin and (sliderMax - sliderExtent).

          XtNsliderTile
               This resource is used to set the tile used to create
               the pixmap to use when drawing the slider.  The
               #defines for setting the values through an arg list and
               the strings to be used in the .Xdefaults files are
               described in XwCreateTile(3X).

          XtNslideOrientation
               The Valuator widget supports both horizontal and
               vertical scrolling.  This resource type is the means by
               which this is set.  It can be defined through the
               .Xdefaults file by the strings "horizontal", and
               "vertical" or within an arg list for use in
               XtSetValues() by the defines XwHORIZONTAL and
               XwVERTICAL.

          XtNsliderMoved, XtNsliderReleased, XtNareaSelected
               The Valuator widget defines three types of callback
               lists which get invoked upon different event conditions
               when interacting with a valuator. All types use the
               data parameter to send the location of the slider to



     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWVALUATOR(3X)                                     XWVALUATOR(3X)




               the callback functions.

               The first callback type, sliderMoved, defines the
               callback list containing the callback functions called
               when the slider is interactively moved.

               The second callback type, sliderReleased, defines a
               callback list containing callback functions called when
               the mouse button is released after moving the slider.

               The third callback type, areaSelected, defines a
               callback list containing the callback functions called
               when an area in a valuator not containing the slider is
               selected.  The slider is not moved to this position but
               if the application wants the slider moved, it can use
               the position value contained in the parameter call_data
               and perform a XtSetValues() to its valuator.

               For the callback types, the call_data parameter of the
               callback function will be an integer containing the
               slider or selection position.

     INHERITED RESOURCES
          The following resources are inherited from the named
          superclasses:


                           Core Resource Set -- CORE(3X)
     Name                   Class                  Type             Default
     __________________________________________________________________________
     XtNancestorSensitive   XtCSenstitive          Boolean          TRUE
     XtNx                   XtCPosition            int              0
     XtNy                   XtCPosition            int              0
     XtNwidth               XtCWidth               int              0
     XtNheight              XtCHeight              int              0
     XtNdepth               XtCDepth               int              0
     XtNbackground          XtCBackground          Pixel            White
     XtNbackgroundPixmap    XtCPixmap              Pixmap           Unspecified
     XtNborderWidth         XtCBorderWidth         int              1
     XtNborderColor         XtCBorderColor         Pixel            Black
     XtNborderPixmap        XtCPixmap              Pixmap           Unspecified
     XtNsensitive           XtCSensitive           Boolean          TRUE
     XtNmappedWhenManaged   XtCMappedWhenManaged   Boolean          TRUE
     XtNdestroyCallback     XtCCallback            Pointer          NULL
     XtNtranslations        XtCTranslations        XtTranslations   NULL









     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWVALUATOR(3X)                                     XWVALUATOR(3X)




                    Primitive Resource Set -- XWPRIMITIVE(3X)
     Name                    Class                   Type      Default
     ________________________________________________________________________
     XtNforeground           XtCForeground           Pixel     Black
     XtNbackgroundTile       XtCBackgroundTile       int       background
     XtNtraversalType        XtCTraversalType        int       highlight_off
     XtNhighlightStyle       XtCHighlightStyle       int       pattern_border
     XtNhighlightColor       XtCForeground           Pixel     Black
     XtNhighlightTile        XtCHighlightTile        int       50_foreground
     XtNhighlightThickness   XtCHighlightThickness   int       0
     XtNrecomputeSize        XtCRecomputeSize        Boolean   TRUE
     XtNselect               XtCCallback             Pointer   NULL
     XtNrelease              XtCCallback             Pointer   NULL



     KEYBOARD TRAVERSAL
          If the XtNtraversalType resource is set to
          highlight_traversal (XwHIGHLIGHT_TRAVERSAL in an argument
          list) at either create time or during a call to XtSetValues,
          the XwPrimitive superclass will automatically augment the
          primitive widget's translations to support keyboard
          traversal.  See the XwPrimitive man page for a complete
          description of these translations.  See the TRANSLATIONS
          section in this man page for a description of the
          translations local this widget.

     TRANSLATIONS
          The input to the Valuator widget is driven by the mouse
          buttons.  The default translation is defined as follows:


      <Btn1Down>:          select(),
      <Btn1Up>:            release(),
      Button1<PtrMoved>:   moved(),
      <EnterWindow>:       enter(),
      <LeaveWindow>:       leave(),
      Ctrl<Key>Left:       left(),      HP "Control Left Cursor" key
      Ctrl<Key>Up:         up(),        HP "Control Up Cursor" key
      Ctrl<Key>Right:      right(),     HP "Control Right Cursor" key
      Ctrl<Key>Down:       down(),      HP "Control Down Cursor" key


     ACTIONS
          select:
               Select processes the activation conditions within the
               valuator, both for selections within the slider area
               and on the slider.

          release:
               Release handles the processing terminating conditions



     Hewlett-Packard Company       - 4 -                   Aug 9, 1988






     XWVALUATOR(3X)                                     XWVALUATOR(3X)




               for selections on the valuator.

          moved:
               Moved processes interactive movement of the slider
               following a selection upon the slider.

          enter:
               If the XtNtraversalType resource has been set to
               XwHIGHLIGHT_ENTER then the arrow's border will be
               highlighted.  Otherwise no action is taken.

          leave:
               If the XtNtraversalType resource has been set to
               XwHIGHLIGHT_ENTER then the arrow's border will be
               unhighlighted.  Otherwise no action is taken.

          left:
               If the valuator's orientation is horizontal, this
               action will cause its slider origin to be decremented
               by 1 unit and redisplayed.

          up:  If the valuator's orientation is vertical, this action
               will cause its slider origin to be decremented by 1
               unit and redisplayed.

          right:
               If the valuator's orientation is horizontal, this
               action will cause its slider origin to be incremented
               by 1 unit and redisplayed.

          down:
               If the valuator's orientation is vertical, this action
               will cause its slider origin to be incremented by 1
               unit and redisplayed.

     ORIGIN
          Hewlett-Packard Company.

     SEE ALSO
          CORE(3X), XWPRIMITIVE(3X), XWCREATETILE(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.











     Hewlett-Packard Company       - 5 -                   Aug 9, 1988






     XWWORKSPACE(3X)                                   XWWORKSPACE(3X)




     NAME
          XwworkSpaceWidgetClass - the X Widget's empty window widget.

     SYNOPSIS
          #include <X11/StringDefs.h>
          #include <X11/Intrinsic.h>
          #include <Xw/Xw.h>
          #include <Xw/WorkSpace.h>


     CLASSES
          The WorkSpace widget is built from the Core and XwPrimitive
          classes.

          The widget class to use when creating a workspace is
          XwworkSpaceWidgetClass.

          The class name for this widget is WorkSpace.

     DESCRIPTION
          The WorkSpace widget provides the application developer with
          an empty primitive widget.  This widget can be used by the
          application as a non-widget graphics area.  Callback types
          are defined for widget exposure and resize to allow the
          application to redraw or reposition its graphics.  Keyboard,
          button press and button release callbacks are also defined
          to provide the application an easy means of getting normal
          input from the widget.  Other types of input can be gathered
          from the widget by adding event handlers.

          If the workspace widget has a highlight thickness, the
          application should take care not to draw on this area.  This
          can be done by creating the graphics context to be used for
          drawing in the widget with a clipping rectangle set to the
          size of the widget's window inset by the highlight
          thickness.

     NEW RESOURCES
          The WorkSpace widget defines a set of resource types used by
          the programmer to specify the data for the workspace.  The
          programmer can also set the values for the Core and
          Primitive widget classes to set attributes for this widget.


                          WorkSpace Resource Set
               Name         Class         Type      Default
               ____________________________________________
               XtNexpose    XtCCallback   Pointer   Null
               XtNresize    XtCCallback   Pointer   Null
               XtNkeyDown   XtCCallback   Pointer   Null




     Hewlett-Packard Company       - 1 -                   Aug 9, 1988






     XWWORKSPACE(3X)                                   XWWORKSPACE(3X)




          XtNexpose
               This resource defines a callback list which is invoked
               when an exposure event occurs on the widget.  The
               call_data parameter for the callback will contain a
               Region structure containing the exposed region.

          XtNresize
               This resource defines a callback list which is invoked
               when the widget is resized.  The widget parameter can
               be accessed to obtain the new size of the widget.

          XtNkeyDown
               This resource defines a callback list which is invoked
               when keyboard input occurs in the widget.  The
               call_data parameter for the callback will contain the
               key pressed event.

     INHERITED RESOURCES
          The following resources are inherited from the named
          superclasses:


                           Core Resource Set -- CORE(3X)
     Name                   Class                  Type             Default
     __________________________________________________________________________
     XtNancestorSensitive   XtCSenstitive          Boolean          TRUE
     XtNx                   XtCPosition            int              0
     XtNy                   XtCPosition            int              0
     XtNwidth               XtCWidth               int              0
     XtNheight              XtCHeight              int              0
     XtNdepth               XtCDepth               int              0
     XtNbackground          XtCBackground          Pixel            White
     XtNbackgroundPixmap    XtCPixmap              Pixmap           Unspecified
     XtNborderWidth         XtCBorderWidth         int              1
     XtNborderColor         XtCBorderColor         Pixel            Black
     XtNborderPixmap        XtCPixmap              Pixmap           Unspecified
     XtNsensitive           XtCSensitive           Boolean          TRUE
     XtNmappedWhenManaged   XtCMappedWhenManaged   Boolean          TRUE
     XtNdestroyCallback     XtCCallback            Pointer          NULL
     XtNtranslations        XtCTranslations        XtTranslations   NULL














     Hewlett-Packard Company       - 2 -                   Aug 9, 1988






     XWWORKSPACE(3X)                                   XWWORKSPACE(3X)




                    Primitive Resource Set -- XWPRIMITIVE(3X)
     Name                    Class                   Type      Default
     ________________________________________________________________________
     XtNforeground           XtCForeground           Pixel     Black
     XtNbackgroundTile       XtCBackgroundTile       int       background
     XtNtraversalType        XtCTraversalType        int       highlight_off
     XtNhighlightStyle       XtCHighlightStyle       int       pattern_border
     XtNhighlightColor       XtCForeground           Pixel     Black
     XtNhighlightTile        XtCHighlightTile        int       50_foreground
     XtNhighlightThickness   XtCHighlightThickness   int       0
     XtNrecomputeSize        XtCRecomputeSize        Boolean   TRUE
     XtNselect               XtCCallback             Pointer   NULL
     XtNrelease              XtCCallback             Pointer   NULL



     KEYBOARD TRAVERSAL
          If the XtNtraversalType resource is set to
          highlight_traversal (XwHIGHLIGHT_TRAVERSAL in an argument
          list) at create time or during a call to XtSetValues, the
          XwPrimitive superclass will automatically augment the
          primitive widget's translations to support keyboard
          traversal.  Refer to the XwPrimitive man page for a complete
          description of these translations.  Refer to the
          TRANSLATIONS section in this man page for a description of
          the translations local to this widget.

     TRANSLATIONS
          The following translations are defined for the WorkSpace
          widget.


                        <KeyDown>:       keydown()
                        <BtnDown>:       select()
                        <BtnUp>:         release()
                        <EnterWindow>:   enter()
                        <LeaveWindow>:   leave()


     ACTIONS
          keydown:
               Keyboard input occurring on a workspace invokes the
               workspace's XtNkeyDown callback list.

          select:
               Selections occurring on a workspace invokes the
               workspace's primitive XtNselect callback list.

          release:
               Release invokes the workspace's primitive XtNrelease
               callback list.



     Hewlett-Packard Company       - 3 -                   Aug 9, 1988






     XWWORKSPACE(3X)                                   XWWORKSPACE(3X)




          enter:
               If the XtNtraversalType resource has been set to
               XwHIGHLIGHT_ENTER then the workspace's border will be
               highlighted.  Otherwise no action is taken.

          leave:
               If the XtNtraversalType resource has been set to
               XwHIGHLIGHT_ENTER then the workspace's border will be
               unhighlighted.  Otherwise no action is taken.

     ORIGIN
          Hewlett-Packard Company.

     SEE ALSO
          CORE(3X), XWPRIMITIVE(3X),
          Programming With The HP X Widgets,
          Programming With Xt Intrinsics,
          Programming With Xlib.




































     Hewlett-Packard Company       - 4 -                   Aug 9, 1988



