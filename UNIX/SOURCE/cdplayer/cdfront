#! /usr/X/bin/wksh -openlook -iconic iconPixmap:/tmp/logo

PAUSEFILE=/tmp/`basename $0.$$`
FUNCLIST="prev play next pause quit eject"
if [[ "$XGUI" = "OPEN_LOOK" ]]
then
	Button=oblongButton
else
	Button=rectButton
fi

quit()
{
	cdplay -s  2>/dev/null

	for i in $FUNCLIST
	do
		rm /tmp/$i
	done

	if [ -s $PAUSEFILE ]
	then
		rm $PAUSEFILE
	fi
	exit 0
}

cdlogo()
{

cat <<-EOF >/tmp/logo
#define disc_format 1
#define disc_width 56
#define disc_height 38
#define disc_ncolors 2
#define disc_chars_per_pixel 1
static char * disc_colors[] = {
" " , "#000000000000",
"." , "#FFFFFFFFFFFF"
} ;
static char * disc_pixels[] = {
"                                                        ",
"                                                        ",
"                     ..   ..  .   . ...   ..   ..  ...  ",
"            ......  .  . .  . .. .. .  . .  . .  .  .   ",
"            .    .  .    .  . . . . .... .... .     .   ",
"            .    .  .  . .  . .   . .    .  . .  .  .   ",
"            .    .   ..   ..  .   . .    .  .  ..   .   ",
"            .    .                                      ",
"            .    .                                      ",
"            .    .                                      ",
"      .......    .  ......    ..........    ........    ",
"     .           .  .    .   .         .   .        .   ",
"    .            .  .    .  .          .  .          .  ",
"    .     ..     .  .    .  .          .  .    ..    .  ",
"    .    .  .    .  .    .  .   ........  .   .  .   .  ",
"    .    .  .    .  .    .  .  .          .   .  .   .  ",
"    .    .  .    .  .    .  .   ......    .   .  .....  ",
"    .    .  .    .  .    .  .         .   .   .         ",
"    .    .  .    .  .    .  .          .  .   .         ",
"    .    .  .    .  .    .   .         .  .   .  .....  ",
"    .    .  .    .  .    .    ......   .  .   .  .   .  ",
"    .    .  .    .  .    .          .  .  .   .  .   .  ",
"    .    .  .    .  .    .  ........   .  .   .  .   .  ",
"    .     ..     .  .    .  .          .  .    ..    .  ",
"    .            .  .    .  .          .  .          .  ",
"     .           .  .    .  .         .    .        .   ",
"      ............  ......  ..........      ........    ",
"                                                        ",
"                                                        ",
"                                                        ",
"    ...  .  ... . ...  ..  .      ..  .  . ...  .  ..   ",
"    .  . . .    .  .  .  . .     .  . .  . .  . . .  .  ",
"    .  . . . .. .  .  .... .     .... .  . .  . . .  .  ",
"    .  . . .  . .  .  .  . .     .  . .  . .  . . .  .  ",
"    ...  .  ... .  .  .  . ....  .  .  ..  ...  .  ..   ",
"                                                        ",
"                                                        ",
"                                                        "
} ;
EOF

cat <<-EOF >/tmp/eject
#define eject_format 1
#define eject_width 16
#define eject_height 16
#define eject_ncolors 2
#define eject_chars_per_pixel 1
static char * eject_colors[] = {
" " , "#AAAAAAAAAAAA",
"." , "#000000000000"
} ;
static char * eject_pixels[] = {
"                ",
"                ",
"        .       ",
"       ...      ",
"      .. ..     ",
"     ..   ..    ",
"    ..     ..   ",
"   ..       ..  ",
"   ...........  ",
"   ...........  ",
"                ",
"                ",
"   ...........  ",
"   ...........  ",
"                ",
"                "
} ;
EOF

cat <<-EOF >/tmp/next
#define next_format 1
#define next_width 16
#define next_height 16
#define next_ncolors 2
#define next_chars_per_pixel 1
static char * next_colors[] = {
" " , "#AAAAAAAAAAAA",
"." , "#000000000000"
} ;
static char * next_pixels[] = {
"             .. ",
" ..   ..     .. ",
"  ..   ..    .. ",
"   ..   ..   .. ",
"    ..   ..  .. ",
"     ..   .. .. ",
"      ..   .... ",
"       ..   ... ",
"      ..   .... ",
"     ..   .. .. ",
"    ..   ..  .. ",
"   ..   ..   .. ",
"  ..   ..    .. ",
" ..   ..     .. ",
"             .. ",
"                "
} ;
EOF

cat <<-EOF >/tmp/pause
#define pause_format 1
#define pause_width 16
#define pause_height 16
#define pause_ncolors 2
#define pause_chars_per_pixel 1
static char * pause_colors[] = {
" " , "#AAAAAAAAAAAA",
"." , "#000000000000"
} ;
static char * pause_pixels[] = {
"                ",
"    ..   ..     ",
"    ..   ..     ",
"    ..   ..     ",
"    ..   ..     ",
"    ..   ..     ",
"    ..   ..     ",
"    ..   ..     ",
"    ..   ..     ",
"    ..   ..     ",
"    ..   ..     ",
"    ..   ..     ",
"    ..   ..     ",
"    ..   ..     ",
"                ",
"                "
} ;
EOF

cat <<-EOF >/tmp/play
#define play_format 1
#define play_width 16
#define play_height 16
#define play_ncolors 2
#define play_chars_per_pixel 1
static char * play_colors[] = {
" " , "#AAAAAAAAAAAA",
"." , "#000000000000"
} ;
static char * play_pixels[] = {
"                ",
"     ...        ",
"     ....       ",
"     .....      ",
"     .. ...     ",
"     ..  ...    ",
"     ..   ...   ",
"     ..    ...  ",
"     ..   ...   ",
"     ..  ...    ",
"     .. ...     ",
"     .....      ",
"     ....       ",
"     ...        ",
"                ",
"                "
} ;

cat <<-EOF >/tmp/prev
#define prev_format 1
#define prev_width 16
#define prev_height 16
#define prev_ncolors 2
#define prev_chars_per_pixel 1
static char * prev_colors[] = {
" " , "#AAAAAAAAAAAA",
"." , "#000000000000"
} ;
static char * prev_pixels[] = {
" ..             ",
" ..     ..   .. ",
" ..    ..   ..  ",
" ..   ..   ..   ",
" ..  ..   ..    ",
" .. ..   ..     ",
" ....   ..      ",
" ...   ..       ",
" ....   ..      ",
" .. ..   ..     ",
" ..  ..   ..    ",
" ..   ..   ..   ",
" ..    ..   ..  ",
" ..     ..   .. ",
" ..             ",
"                "
} ;
EOF

cat <<-EOF >/tmp/prev
#define prev_format 1
#define prev_width 16
#define prev_height 16
#define prev_ncolors 2
#define prev_chars_per_pixel 1
static char * prev_colors[] = {
" " , "#AAAAAAAAAAAA",
"." , "#000000000000"
} ;
static char * prev_pixels[] = {
" ..             ",
" ..     ..   .. ",
" ..    ..   ..  ",
" ..   ..   ..   ",
" ..  ..   ..    ",
" .. ..   ..     ",
" ....   ..      ",
" ...   ..       ",
" ....   ..      ",
" .. ..   ..     ",
" ..  ..   ..    ",
" ..   ..   ..   ",
" ..    ..   ..  ",
" ..     ..   .. ",
" ..             ",
"                "
} ;
EOF

cat <<-EOF >/tmp/quit
#define quit_format 1
#define quit_width 16
#define quit_height 16
#define quit_ncolors 2
#define quit_chars_per_pixel 1
static char * quit_colors[] = {
" " , "#AAAAAAAAAAAA",
"." , "#000000000000"
} ;
static char * quit_pixels[] = {
"       ......   ",
"       ......   ",
"      ......    ",
"      .....     ",
"     .....      ",
"     ....       ",
"    ........    ",
"    .......     ",
"      ....      ",
"     ....       ",
"    ....        ",
"    ...         ",
"   ...          ",
"   ..           ",
"  ..            ",
"  .             "
} ;
EOF

}

playTrack()
{
	((THISTRACK=$CB_INDEX+1))
	cdplay -t $THISTRACK 2>/dev/null
}

eject()
{
	cdplay -e 2>/dev/null
	if [ "$XGUI" = "MOTIF" ]
	then
		sv W13 set:false
	fi
}

play()
{
	cdplay -t $THISTRACK 2>/dev/null
	if [ "$XGUI" = "MOTIF" ]
	then
		sv W9 set:false
	fi
}

next()
{
	
	if [ $THISTRACK -ne MAXTRACKS ]
	then
		((NEXTTRACK=$THISTRACK+1))
		THISTRACK=$NEXTTRACK
		cdplay -t $NEXTTRACK 2>/dev/null
	else
		errormsg "No more tracks on disc"
		cdplay -t $THISTRACK 2>/dev/null
	fi
	if [ "$XGUI" = "MOTIF" ]
	then
		sv W10 set:false
	fi
}

prev()
{
	
	if [ $THISTRACK -ne 1 ]
	then
		((PREVTRACK=$THISTRACK-1))
		THISTRACK=$PREVTRACK
		cdplay -t $PREVTRACK 2>/dev/null
	else
		errormsg "At the beginning of the disc"
		cdplay -t $THISTRACK 2>/dev/null
	fi
	if [ "$XGUI" = "MOTIF" ]
	then
		sv W8 set:false
	fi
}

pause()
{
	if [ -s $PAUSEFILE ]
	then
		rm $PAUSEFILE
		cdplay -r 2>/dev/null
	else
		echo paused >$PAUSEFILE
		cdplay -p 2>/dev/null
	fi
	if [ "$XGUI" = "MOTIF" ]
	then
		sv W11 set:false
	fi
}
		
makeTrackList()
{
	tracks=`cdplay -c |awk '{FS=":"} {print $2}'`
	THISTRACK=1
	MAXTRACKS=${tracks#" "}
	((tracks=${tracks#" "}+1))

	COUNTER=1
	while [ $COUNTER -lt $MAXTRACKS ]
	do
		TRACK="$TRACK {$COUNTER, $COUNTER},"
		((COUNTER=$COUNTER+1))
	done
	TRACK="$TRACK {$MAXTRACKS, $COUNTER}"
}

makeFuncList()
{
	COUNTER=0
	for i in $FUNCLIST
	do
		Function[COUNTER]=$i
		Funcname[COUNTER]=`typeset -u $i`
		((COUNTER=$COUNTER+1))
	done
}

errormsg()
{
	cps NOTICE notice noticeShell $FORM \
		title:"ERROR" \
		noticeType:warning \
		emanateWidget:$FORM

	acb $NOTICE popdownCallback "dw $NOTICE"

	sv $NOTICE_TA string:"${1}"

	cmw OK Ok flatButtons $NOTICE_CA \
		numItems:1 \
		numItemFields:1 \
		itemFields:'{label}' \
		items:'{Ok}'

	pu $NOTICE GrabExclusive
}

cdlogo
makeTrackList
makeFuncList

oi TOP top "CD Juke-Box" "@" 

cmw FORM form form $TOP 

cmw CDMAIN cdmain controlArea $FORM layoutType:fixedcols measure:1 

cmw DISC disc staticText $CDMAIN width:32 height:36 recomputeSize:false \
	string:"" backgroundPixmap:/tmp/logo

cmw CAP caption caption $CDMAIN label:"Tracks: "

cmw BUTTONS buttons flatButtons $CAP \
	layoutType:fixedcols \
	measure:5 \
	numItemFields:2 \
	numItems:$MAXTRACKS \
	itemFields:'{label,userData}' \
	items:"$TRACK"
	
sv $BUTTONS selectProc:"playTrack"

cmw FUNCTION function caption $CDMAIN label:"Functions:"
cmw FUNCCONTROL control controlArea $FUNCTION \
	layoutType:fixedcols \
	measure:3

for i in $FUNCLIST
do
	typeset -u Function=$i
	cmw $Function $i $Button $FUNCCONTROL \
		labelJustify:center \
		labelType:image \
		labelImage:/tmp/$i \
		select:$i 
done

rw $TOP
ml
