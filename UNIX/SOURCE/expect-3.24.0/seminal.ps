%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPCOLORc { 
		BITMAPTTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 12 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Times-Bold FMFONTDEFINE
3 0 /Courier-Bold FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
5 0 /Times-BoldItalic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "18" 18
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 18 -) 293.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
0 X
([10]) 72 712 T
1.94 (Joseph W) 99 712 P
1.94 (eizenbaum, \322Eliza \320 A Computer Program for the Study of Natural Language) 146.95 712 P
2.45 (Communication between Man and Machine\323,) 99 698 P
1 F
2.45 (Communications of the ACM) 333.08 698 P
0 F
2.45 (, V) 480.02 698 P
2.45 (olume 9,) 495.58 698 P
(Number 1, January 1966, p. 36-45.) 99 684 T
72 63 540 720 C
72 433.14 513 665 C
72 433.14 513 665 R
7 X
0 K
V
2 12 Q
0 X
(Don Libes) 201.07 603.71 T
1 F
(National Institute of Standar) 201.07 591.71 T
(ds and T) 338.24 591.71 T
(echnology) 378.45 591.71 T
101.71 578 180.71 661 R
7 X
V
0.5 H
0 Z
3 X
N
0 F
0 X
(photo) 128.57 617.71 T
72.5 433.57 322.07 559.49 R
7 X
V
0 X
2.58 (Don Libes received a B.A. in Mathematics from) 72.5 551.49 P
1.72 (Rutgers University and an M.S. in Computer Sci-) 72.5 537.49 P
(ence from the University of Rochester) 72.5 523.49 T
(.) 255.36 523.49 T
0.58 (Currently at the National Institute of Standards and) 72.5 499.49 P
2.19 (T) 72.5 485.49 P
2.19 (echnology) 78.99 485.49 P
2.19 (, Don is engaged in research that will) 128.17 485.49 P
0.59 (help U.S. industry measure the standard hack.  Un-) 72.5 471.49 P
0.94 (fortunately) 72.5 457.49 P
0.94 (, NIST does not have a very good sense) 124.35 457.49 P
1.39 (of humor) 72.5 443.49 P
1.39 (, so he was forced to write his \336rst book) 117.71 443.49 P
72 63 540 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "18" 17
%%Page: "17" 17
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 17 -) 293.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
0 X
-0.17 (Nonetheless,) 72 712 P
2 F
-0.17 (stelnet) 136.45 712 P
0 F
-0.17 ( proved very useful in the AMRF) 169.76 712 P
-0.17 (, and got me to thinking about a more gener-) 327.67 712 P
(ic tool.) 72 698 T
0.23 (John Ousterhout is responsible for T) 72 674 P
0.23 (cl, without which) 247.21 674 P
2 F
0.23 (expect) 334.52 674 P
0 F
0.23 ( would not have been written.  John) 367.16 674 P
(also critiqued) 72 660 T
2 F
(expect) 139.96 660 T
0 F
( as well as this paper) 172.59 660 T
(.  I am indebted to him.) 271.52 660 T
-0.22 (Several people made important observations or wrote early scripts while I was still developing the) 72 636 P
2.05 (command semantics.  Thanks to Rob Densock, Ken Manheimer) 72 622 P
2.05 (, Eric Newton, Scott Paisley) 394.35 622 P
2.05 (,) 537 622 P
0.78 (Steve Ray) 72 608 P
0.78 (, Sandy Ressler) 120.96 608 P
0.78 (, and Barry W) 196.32 608 P
0.78 (arsaw) 265.64 608 P
0.78 (.  And also, like, thanks to my grammarians, Scott) 292.83 608 P
0.05 (Bodarky) 72 594 P
0.05 (, T) 112.53 594 P
0.05 (ed Hopp, and Sue Mulroney) 125.06 594 P
0.05 (, who read read and corrected everry sentence in the paper) 260.07 594 P
(but like this one, right.) 72 580 T
2 16 Q
(10  A) 72 539.33 T
(vailability) 106.35 539.33 T
0 12 Q
0.53 (Since the design and implementation of) 72 514 P
2 F
0.53 (expect) 268.38 514 P
0 F
0.53 ( was paid for by the U.S. government, it is in the) 301.01 514 P
0.46 (public domain.  However) 72 500 P
0.46 (, the author and NIST would like credit if this program, documentation) 194.82 500 P
(or portions of them are used.) 72 486 T
2 F
(expect) 215.9 486 T
0 F
( may be) 248.53 486 T
2 F
(ftp) 289.5 486 T
0 F
(\325d as) 304.16 486 T
2 F
(pub/expect/expect.shar) 330.13 486 T
(.Z) 446.63 486 T
0 F
( from) 457.62 486 T
2 F
(ftp.cme) 486.94 486 T
(.nist.gov) 72 472 T
0 F
(.) 113.87 472 T
2 16 Q
(1) 72 431.33 T
(1  Refer) 79.12 431.33 T
(ences) 132.99 431.33 T
0 12 Q
([1]) 72 404 T
(A) 99 404 T
(T&T) 106.33 404 T
(, UNIX Programmer) 129.43 404 T
(\325) 228.79 404 T
(s Manual, Section 8.) 232.13 404 T
([2]) 72 378 T
1.39 (Don Libes, \322) 99 378 P
1 F
1.39 (expect\0501\051 \320 pr) 163.4 378 P
1.39 (ogrammatic dialogue with interactive pr) 233.01 378 P
1.39 (ograms) 432.67 378 P
0 F
1.39 (\323, unpublished) 468.65 378 P
(manual page, National Institute of Standards and T) 99 364 T
(echnology) 342.66 364 T
(, February) 391.84 364 T
(, 1989.) 440.36 364 T
([3]) 72 338 T
1.11 (Chris McDonald and T) 99 338 P
1.11 (revor Dix, \322Support for Graphs of Processes in a Command Inter-) 212.83 338 P
1.19 (preter\323,) 99 324 P
1 F
1.19 (Softwar) 139.48 324 P
1.19 (e: Practice & Experience) 176.36 324 P
0 F
1.19 (, V) 302.15 324 P
1.19 (olume 18 Number 10, p. 101) 316.45 324 P
1.19 (1-1016, October) 460.2 324 P
(1988.) 99 310 T
([4]) 72 284 T
0.65 (D. Nowitz, \322) 99 284 P
1 F
0.65 (Uucp Implementation Description) 161.59 284 P
0 F
0.65 (\323, UNIX Programmer) 326.78 284 P
0.65 (\325) 432.78 284 P
0.65 (s Manual, Bell Labo-) 436.11 284 P
(ratories, October) 99 270 T
(, 1978.) 179.12 270 T
([5]) 72 244 T
1.35 (John Ousterhout, \322) 99 244 P
1 F
1.35 (T) 191.98 244 P
1.35 (cl: An Embeddable Command Language) 197.55 244 P
0 F
1.35 (\323, Proceedings of the W) 398.17 244 P
1.35 (inter) 518.02 244 P
(1990 USENIX Conference, W) 99 230 T
(ashington, D.C., January 22-26, 1990.) 244.59 230 T
([6]) 72 204 T
2.39 (John Ousterhout, \322) 99 204 P
1 F
2.39 (tcl\0503\051 \320 overview of tool command language facilities) 194.06 204 P
0 F
2.39 (\323, unpublished) 467.65 204 P
(manual page, University of California at Berkeley) 99 190 T
(, January 1990.) 338.38 190 T
([7]) 72 164 T
0.4 (Dennis Ritchie and Ken Thompson, \322The UNIX time-sharing system\323,) 99 164 P
1 F
0.4 (Communications of) 445.98 164 P
(the ACM) 99 150 T
0 F
(, V) 141.97 150 T
(olume 17, Number 7, 635-375 \0501974\051.) 155.08 150 T
([8]) 72 124 T
0.71 (Stephen Uhler) 99 124 P
0.71 (, \322) 168.18 124 P
1 F
0.71 (MTX \320 A Shell that Permits Dynamic Rearrangement of Pr) 180.22 124 P
0.71 (ocess Connec-) 469.68 124 P
1.57 (tions and W) 99 110 P
1.57 (indows) 158.79 110 P
0 F
1.57 (\323, Proceedings of the W) 192.78 110 P
1.57 (inter 1990 USENIX Conference, W) 313.5 110 P
1.57 (ashington,) 490.36 110 P
(D.C., January 22-26, 1990.) 99 96 T
([9]) 72 70 T
(Larry W) 99 70 T
(all, \322) 139 70 T
1 F
(rn\0501\051 \320 r) 162.31 70 T
(ead news pr) 203.18 70 T
(ogram) 260.7 70 T
0 F
(\323, unpublished manual page, May 1985.) 292.01 70 T
FMENDPAGE
%%EndPage: "17" 16
%%Page: "16" 16
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 16 -) 293.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
0 X
1.13 (Internally) 72 712 P
1.13 (,) 117.85 712 P
2 F
1.13 (expect) 124.97 712 P
0 F
1.13 ( processing is heavily dependent upon scripts.  For example, the) 157.61 712 P
2 F
1.13 (r) 480.13 712 P
1.13 (ogue) 485.24 712 P
0 F
1.13 ( script) 509.23 712 P
-0.26 (presented earlier examines about 10 games per second \050and is fun to watch\051.  Most of the real time) 72 698 P
1.05 (is spent waiting for the game itself.  Of the CPU time, about 40% is spent pattern matching to) 72 684 P
0.93 (guide the script, 26% in I/O, 16% in) 72 670 P
2 F
0.93 (open) 255.98 670 P
0 F
0.93 (,) 280.63 670 P
2 F
0.93 (close) 287.56 670 P
0 F
0.93 (, and) 312.2 670 P
2 F
0.93 (ioctl) 340.37 670 P
0 F
0.93 (, 8% in) 362.36 670 P
2 F
0.93 (fork) 402.45 670 P
0 F
0.93 (, and 5% in timer calls.) 424.43 670 P
0.81 (The lar) 72 656 P
0.81 (ge amount of time spent in) 106.89 656 P
2 F
0.81 (open) 243.01 656 P
0 F
0.81 (,) 267.67 656 P
2 F
0.81 (close) 274.47 656 P
0 F
0.81 (, and) 299.12 656 P
2 F
0.81 (ioctl) 327.05 656 P
0 F
0.81 ( are due to the inef) 349.04 656 P
0.81 (\336cient technique re-) 442.46 656 P
(quired by BSD UNIX to locate and initialize ptys.) 72 642 T
-0.21 (The) 72 618 P
2 F
-0.21 (r) 93.44 618 P
-0.21 (ogue) 98.55 618 P
0 F
-0.21 ( script is so biased towards short dialogues, it is likely that most other scripts will spend) 122.54 618 P
0.35 (even lar) 72 604 P
0.35 (ger percentages of time pattern matching.  While guiding the dialogue is a primary func-) 110.43 604 P
0.13 (tion, this indicates an area for improvement.  The current \050T) 72 590 P
0.13 (cl-supplied\051 pattern matcher could be) 360.27 590 P
0.18 (improved, for example, by compiling patterns.  But) 72 576 P
2 F
0.18 (expect) 322.93 576 P
0 F
0.18 ( has even more demands.  Regular ex-) 355.57 576 P
0.17 (pression pattern matching is performed on input each time a) 72 562 P
2 F
0.17 (r) 364.85 562 P
0.17 (ead) 369.96 562 P
0 F
0.17 ( completes.  If characters arrive) 387.95 562 P
0.73 (slowly) 72 548 P
0.73 (, the pattern matcher scans the same data many times.  System indigestion can play a big) 103.21 548 P
-0.17 (role here, as lar) 72 534 P
-0.17 (ger scheduling quanta drive the pattern matcher less frequently when more charac-) 145.2 534 P
-0.25 (ters at a time are gathered from each pty) 72 520 P
-0.25 (.  The performance of a pattern matcher that does not need) 262.36 520 P
(to rescan over earlier data needs to be studied.) 72 506 T
2 16 Q
(8  Comments and conclusions) 72 465.33 T
0 12 Q
1.22 (The UNIX shell paradigms are incapable of intelligently managing interactive programs.  This) 72 440 P
0.4 (has been a long-standing problem, traditionally solved by avoidance.  Y) 72 426 P
0.4 (et the number of interac-) 419.85 426 P
(tive programs grows daily) 72 412 T
(, and shells have not changed to address this.) 196.8 412 T
2 F
0.2 (expect) 72 388 P
0 F
0.2 ( solves these problems directly and with elegance.) 104.63 388 P
2 F
0.2 (expect) 352.93 388 P
0 F
0.2 ( scripts are small and simple for) 385.57 388 P
0.3 (problems that are small and simple.  While I am not so naive to believe all) 72 374 P
2 F
0.3 (expect) 436.18 374 P
0 F
0.3 ( scripts will be) 468.82 374 P
-0.15 (small, it is apparent that the scripts scale well.  They are comparable in style to shell scripts, being) 72 360 P
0.37 (task-oriented, and provide syner) 72 346 P
0.37 (gy with shell scripts, both because they can call shell scripts and) 227.45 346 P
0.85 (be called by them.  It would be a worthwhile experiment to marry the features of) 72 332 P
2 F
0.85 (expect) 475.68 332 P
0 F
0.85 ( to the) 508.31 332 P
(shell, and I see little technical dif) 72 318 T
(\336culty in doing so.) 230.67 318 T
-0.06 (Some interesting open questions remain:  How would the buf) 72 294 P
-0.06 (fering work in a combined) 365.42 294 P
2 F
-0.06 (expect) 495.37 294 P
0 F
-0.06 (/) 528.01 294 P
2 F
-0.06 (s-) 531.34 294 P
0.18 (elect) 72 280 P
0 F
0.18 ( command.  If) 95.3 280 P
2 F
0.18 (expect) 166.3 280 P
0 F
0.18 ( had a built-in terminal emulator) 198.93 280 P
0.18 (, could one look for \322regions\323 of char-) 354.91 280 P
1.6 (acter graphics?  Lastly) 72 266 P
1.6 (, how could) 184.25 266 P
2 F
1.6 (expect) 248.34 266 P
0 F
1.6 ( emulate interactions with window systems, such as) 280.98 266 P
0.09 (mousing and dragging.  Each of these requires further research.  Nonetheless, as long as there are) 72 252 P
-0.27 (shells, there will be interactive programs that are not controllable by them, and) 72 238 P
2 F
-0.27 (expect) 449.26 238 P
0 F
-0.27 ( will contin-) 481.9 238 P
(ue to be useful.) 72 224 T
2 16 Q
(9  Acknowledgements) 72 183.33 T
0 12 Q
0.35 (This work was jointly funded by the NIST Automated Manufacturing Research Facility \050AMRF) 72 158 P
0.35 (,) 537 158 P
(project 734-3385\051 and Scienti\336c and T) 72 144 T
(echnical Research Services \050STRS, project 734-3106\051.) 256.7 144 T
-0.08 (Thanks to Scott Paisley for writing a program called) 72 120 P
2 F
-0.08 (stelnet) 325.42 120 P
0 F
-0.08 ( \050) 358.73 120 P
2 F
-0.08 (s) 365.64 120 P
0 F
-0.08 (mart) 370.31 120 P
2 F
-0.08 (telnet) 395.21 120 P
0 F
-0.08 (\051.) 423.85 120 P
2 F
-0.08 (stelnet) 436.67 120 P
0 F
-0.08 ( ran) 469.98 120 P
2 F
-0.08 (telnet) 491.12 120 P
0 F
-0.08 ( and) 519.76 120 P
-0.18 (performed a simple send/expect conversation to login.) 72 106 P
2 F
-0.18 (stelnet) 336.7 106 P
0 F
-0.18 ( had only straight-line control with-) 370.01 106 P
1.62 (out error processing, used pipes instead of ptys, and lacked pattern matching and job control.) 72 92 P
FMENDPAGE
%%EndPage: "16" 15
%%Page: "15" 15
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 15 -) 293.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
0 X
0.1 (lease 2, which forces applications to poll by busy-waiting.  \050POSIX has not yet provided a means) 72 712 P
0.61 (of performing multisource asynchronous I/O, though it seems inevitable.\051  Earlier systems, such) 72 698 P
0.35 (as V7, could not even poll.  T) 72 684 P
0.35 (ypically) 215.85 684 P
0.35 (, programs such as) 253.72 684 P
2 F
0.35 (uucp) 347.39 684 P
0 F
0.35 ( forked an auxiliary process which) 372.71 684 P
0.88 (blocked waiting for data from one direction while the original process blocked waiting for data) 72 670 P
0.6 (from the other direction.  I consider this untenable, since some) 72 656 P
2 F
0.6 (expect) 381.33 656 P
0 F
0.6 ( applications spawn many) 413.96 656 P
-0.12 (processes, both sequentially and in parallel.  Using this style of communication requires two extra) 72 642 P
-0.27 (utility processes for each real process requested by the user) 72 628 P
-0.27 (.  For example, Figure 5 would need 12) 352.98 628 P
(more processes than it does in the current implementation.) 72 614 T
0.15 (For lack of more sophisticated code \050and being not at all clear that it is even possible\051, the imple-) 72 590 P
0.06 (mentation cannot simultaneously interact with multiple processes on systems lacking) 72 576 P
2 F
0.06 (select) 483.65 576 P
0 F
0.06 (,) 511.61 576 P
2 F
0.06 (poll) 517.67 576 P
0 F
0.06 (,) 537 576 P
(or something similar) 72 562 T
(.) 170.62 562 T
2 F
(7.3  Job contr) 72 533 T
(ol) 141.74 533 T
0 F
0.57 (This section discusses the interaction between BSD-style job control and) 72 509 P
2 F
0.57 (expect) 430.14 509 P
0 F
0.57 (.) 462.77 509 P
2 F
0.57 (expect) 472.91 509 P
0 F
0.57 ( has its) 505.54 509 P
(own way of controlling jobs, discussed extensively in section 2.2.) 72 495 T
0.39 (In a sense,) 72 471 P
2 F
0.39 (expect) 126.46 471 P
0 F
0.39 ( \336nesses the problem of job control.  When sitting at the keyboard running) 159.1 471 P
2 F
0.39 (ex-) 524.68 471 P
0.75 (pect) 72 457 P
0 F
0.75 (, a user may perform job control \050i.e., by pressing job control characters\051, which will af) 93.31 457 P
0.75 (fect) 522.02 457 P
(the) 72 443 T
2 F
(expect) 89.65 443 T
0 F
( program just like any UNIX program.  For example, by default, a) 122.29 443 T
3 F
(^Z) 442.06 443 T
0 F
( will stop) 456.45 443 T
2 F
(expect) 504.1 443 T
0 F
(.) 536.73 443 T
0.52 (An exception to this is during the) 72 419 P
2 F
0.52 (interact) 238.53 419 P
0 F
0.52 ( command.  Since) 278.49 419 P
2 F
0.52 (expect) 369.5 419 P
0 F
0.52 ( has no idea if its client pro-) 402.14 419 P
1.47 (grams are interested in seeing job control characters, all characters \050except an optional escape) 72 405 P
0.61 (character\051 are passed through to the current process.  Thus, programs that run in raw mode \050e.g.) 72 391 P
2 F
0.79 (r) 72 377 P
0.79 (ogue) 77.11 377 P
0 F
0.79 (\051 and programs that handle job control themselves \050e.g.,) 101.1 377 P
2 F
0.79 (csh) 378.7 377 P
0 F
0.79 (\051 can run with their full func-) 395.36 377 P
(tionality) 72 363 T
(.) 111.21 363 T
0.1 (Of course, users choosing to interact directly must understand that programs which do not handle) 72 339 P
-0.23 (job control signals can be unpleasant.  For example, sending a) 72 325 P
3 F
-0.54 (^Z) 370.31 325 P
0 F
-0.23 ( to a program that does not catch) 384.7 325 P
2 F
0.76 (SIGST) 72 311 P
0.76 (OP) 107.12 311 P
0 F
0.76 ( will cause it to be stopped by the kernel.  But since there is no program behind it to) 123.78 311 P
0.76 (catch control,) 72 297 P
2 F
0.76 (expect) 141.8 297 P
0 F
0.76 ( will wait as well.  The program can be resumed by sending a) 174.44 297 P
2 F
0.76 (SIGCONT) 482.58 297 P
0 F
0.76 (,) 537 297 P
-0.23 (but this is presumably inconvenient.  The moral is, when dealing with programs that do not under-) 72 283 P
1.08 (stand job control, either do not send them job control signals or place a shell behind them that) 72 269 P
(does.) 72 255 T
-0.18 (Switching jobs internal to) 72 231 P
2 F
-0.18 (expect) 197.89 231 P
0 F
-0.18 ( from within) 230.52 231 P
2 F
-0.18 (interact) 292.96 231 P
0 F
-0.18 ( can be done without needing to back every) 332.92 231 P
0.42 (process with a shell.  The technique is to escape to the) 72 217 P
2 F
0.42 (expect) 339.83 217 P
0 F
0.42 ( interpreter \050by pressing) 372.46 217 P
2 F
0.42 (interact) 492.04 217 P
0 F
0.42 (\325) 532 217 P
0.42 (s) 535.33 217 P
0.53 (escape character\051, set) 72 203 P
2 F
0.53 (spawn_id) 178.8 203 P
0 F
0.53 ( to the desired process, and return to) 227.46 203 P
2 F
0.53 (interact) 408.55 203 P
0 F
0.53 ( \050via) 448.51 203 P
2 F
0.53 (r) 474.21 203 P
0.53 (eturn) 479.32 203 P
0 F
0.53 (\051.  The) 507.3 203 P
(user will now be interacting with the desired process.) 72 189 T
2 F
(7.4  Thr) 72 160 T
(oughput) 112.77 160 T
0 F
1.47 (While throughput statistics are) 72 136 P
1 F
1.47 (de rigueur) 227.8 136 P
0 F
1.47 ( in USENIX implementation papers, it is dif) 279.57 136 P
1.47 (\336cult to) 501.54 136 P
1.6 (quantify performance in this type of program.  For example, how does one compare) 72 122 P
2 F
1.6 (expect) 499.37 122 P
0 F
1.6 (\325) 532 122 P
1.6 (s) 535.33 122 P
0.77 (overall impact on system throughput to that introduced by canonical input processing of typical) 72 108 P
-0.22 (human typing?  About the only thing that is clear is that) 72 94 P
2 F
-0.22 (expect) 339.9 94 P
0 F
-0.22 ( uses a fraction of the real time that) 372.54 94 P
(a user does.) 72 80 T
FMENDPAGE
%%EndPage: "15" 14
%%Page: "14" 14
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 14 -) 293.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
2 F
0 X
0.08 (expect) 72 712 P
0 F
0.08 ( can call the shell and be called by it.  The two work very well together) 104.63 712 P
0.08 (.  An obvious ques-) 446.06 712 P
0.12 (tion is if one can be subsumed into the other) 72 698 P
0.12 (.  Adding the) 284.63 698 P
2 F
0.12 (expect) 350.74 698 P
0 F
0.12 ( commands to the shell is proba-) 383.37 698 P
(bly the easiest implementation, and I see little technical dif) 72 684 T
(\336culty in doing so.) 354.27 684 T
2 16 Q
(7  Implementation discussion) 72 643.33 T
0 12 Q
-0.06 (This section discusses areas of the implementation that are unusual in some way and might be ed-) 72 618 P
0.57 (ucational to a lar) 72 604 P
0.57 (ge percentage of readers.  The source code is quite readable and perusal of it is) 153.77 604 P
(encouraged.) 72 590 T
2 F
(7.1  Command language) 72 561 T
0 F
-0.1 (From the list of examples in section 5, it should be apparent that the functions provided by) 72 537 P
2 F
-0.1 (expect) 507.37 537 P
0 F
0.91 (have long been desired.  I began thinking about them several years ago and have experimented) 72 523 P
0.53 (with various implementations.  The biggest stumbling block was the language.  I knew I needed) 72 509 P
0.33 (one, I knew how to write one, but I wasn\325) 72 495 P
0.33 (t sure how far to go nor was I particularly interested in) 274.92 495 P
(the task of writing yet-another) 72 481 T
(-utility-language.) 216.99 481 T
0.35 (T) 72 457 P
0.35 (cl was the solution:  it was designed speci\336cally as an embeddable language.  T) 78.49 457 P
0.35 (cl comes with a) 463.99 457 P
1.97 (core of commands to which the application writer can add application-dependent commands.) 72 443 P
0.99 (Adding the) 72 429 P
2 F
0.99 (expect) 130.61 429 P
0 F
0.99 ( commands was relatively painless although a number of dif) 163.25 429 P
0.99 (ferent command) 460.74 429 P
(designs were tried before being \336nalized.) 72 415 T
0.59 (In my environment \050Sun 3 running Sun OS 4.0.3\051, the T) 72 391 P
0.59 (cl library \050version 2.1\051 is approximately) 345.87 391 P
0.82 (8000 lines, including comments \05045k object code\051; the additional) 72 377 P
2 F
0.82 (expect) 394.51 377 P
0 F
0.82 ( source \050version 1.7\051 is) 427.14 377 P
0.18 (1700 lines \05013k object code\051.  Clearly) 72 363 P
0.18 (, the T) 253.15 363 P
0.18 (cl code dominates) 283.64 363 P
2 F
0.18 (expect) 373.77 363 P
0 F
0.18 (.  Here,) 406.4 363 P
2 F
0.18 (expect) 445.23 363 P
0 F
0.18 ( is a wrapper) 477.86 363 P
(around T) 72 349 T
(cl, which is probably dif) 114.79 349 T
(ferent than how the original T) 231.5 349 T
(cl designers foresaw its role.) 374.22 349 T
-0.29 (T) 72 325 P
-0.29 (cl is not the only possible base for) 78.49 325 P
2 F
-0.29 (expect) 242.73 325 P
0 F
-0.29 (-like functionality) 275.36 325 P
-0.29 (.  Prior to T) 360.58 325 P
-0.29 (cl, I looked at the send/ex-) 414.21 325 P
-0.18 (pect control used by) 72 311 P
2 F
-0.18 (uucp) 171.21 311 P
0 F
-0.18 (,) 196.54 311 P
2 F
-0.18 (kermit) 202.36 311 P
0 F
-0.18 (, and other communication programs.  However) 236.99 311 P
-0.18 (, these are quite) 465.27 311 P
0.57 (primitive and do not even provide adequate \337exibility for their own tasks.  For example, system) 72 297 P
(administrators always embed calls to) 72 283 T
2 F
(uucp) 252.21 283 T
0 F
( in shell scripts which can repeat dialing upon failure.) 277.54 283 T
0.59 (T) 72 259 P
0.59 (wo alternatives to T) 78.49 259 P
0.59 (cl that I could have chosen are) 175.02 259 P
2 F
0.59 (emacs) 328.02 259 P
0 F
0.59 ( and) 359.33 259 P
2 F
0.59 (perl) 383.82 259 P
0 F
0.59 (.  While not speci\336cally de-) 404.47 259 P
0.2 (signed to provide a language for tools, both systems have embedded interpreters that can be used) 72 245 P
1.1 (this way) 72 231 P
1.1 (.  Unfortunately) 112.63 231 P
1.1 (, the tradeof) 190.32 231 P
1.1 (fs are numerous and deserve more space than I can devote) 249.92 231 P
(here.  It would probably be worth doing an implementation in each to compare them.) 72 217 T
2 F
(7.2  Multisour) 72 188 T
(ce asynchr) 144.08 188 T
(onous I/O) 198.16 188 T
0.06 (expect) 72 164 P
0 F
0.06 ( requires multisource asynchronous I/O primarily for the) 104.63 164 P
2 F
0.06 (interact) 379.6 164 P
0 F
0.06 ( command \050which listens) 419.56 164 P
0.15 (for characters from the user and a process at the same time\051.  Using this feature requires dif) 72 150 P
0.15 (ferent) 512.03 150 P
(implementations on dif) 72 136 T
(ferent UNIX systems is probably the least portable part of the software.) 183.06 136 T
0.02 (Berkeley UNIX has long supported the) 72 112 P
2 F
0.02 (select) 262.67 112 P
0 F
0.02 ( system call which permits waiting for activity from) 290.64 112 P
0.83 (a set of \336le descriptors.  Thus, virtually all BSD-derived UNIX systems support) 72 98 P
2 F
0.83 (select) 468.23 98 P
0 F
0.83 (.  On the) 496.2 98 P
-0.23 (other hand, System V has only recently supported an equivalent of) 72 84 P
2 F
-0.23 (select) 391.92 84 P
0 F
-0.23 (.  Release 3 supports) 419.88 84 P
2 F
-0.23 (poll) 520.67 84 P
0 F
0.55 (which is comparable to) 72 70 P
2 F
0.55 (select) 188.77 70 P
0 F
0.55 (; however) 216.74 70 P
0.55 (, a lar) 264.43 70 P
0.55 (ge percentage of SV systems are still based on Re-) 292.27 70 P
FMENDPAGE
%%EndPage: "14" 13
%%Page: "13" 13
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 13 -) 293.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
2 F
0 X
(5.9  Dynamic and complex pipes and r) 72 712 T
(edir) 267.02 712 T
(ection) 287.46 712 T
0 F
0.49 (A number of projects have been built to step beyond the linearity of pipes enforced by the shell.) 72 688 P
(T) 72 674 T
(wo notable examples are) 78.49 674 T
2 F
(gsh) 200.39 674 T
0 F
( and MTX.) 217.72 674 T
2 F
0.31 (gsh) 72 650 P
0 F
0.31 ( [3] is based on the Bourne shell, but handles graphs of processes, such as sending the output) 89.33 650 P
0.49 (of one process to two processes, or building a set of three process in a cycle.  While) 72 636 P
2 F
0.49 (expect) 485.23 636 P
0 F
0.49 ( was) 517.86 636 P
-0.2 (not designed for this purpose, it can do this as a byproduct of its complete control of any dialogue.) 72 622 P
1.17 (Of course, the result will not be as fast because) 72 608 P
2 F
1.17 (expect) 312.5 608 P
0 F
1.17 ( necessarily interposes itself in order to) 345.13 608 P
(control the dialogue.) 72 594 T
0.13 (MTX [8] is a screen-based pipe manager) 72 570 P
0.13 (.  It solves the same set of problems as) 267.95 570 P
2 F
0.13 (gsh) 456.78 570 P
0 F
0.13 (, although the) 474.11 570 P
0.87 (interface is mouse-oriented instead of keyboard-oriented.  In addition, MTX can rearrange con-) 72 556 P
-0.15 (nections in use.  It does this using the same pty mechanism that) 72 542 P
2 F
-0.15 (expect) 377.21 542 P
0 F
-0.15 ( does \050with a similar penal-) 409.84 542 P
(ty in throughput\051, although MTX does not provide any automated control of the dialogue.) 72 528 T
0.24 (In summary) 72 504 P
0.24 (,) 129.09 504 P
2 F
0.24 (expect) 135.32 504 P
0 F
0.24 ( can emulate dynamic and complex pipes and redirection.  It is a simple mat-) 167.95 504 P
-0.17 (ter to emulate processes of pipes in a graph.  Automatic rearrangement is possible either under the) 72 490 P
0.14 (control of a user or when signalled by data.  Complex redirection such as arbitrary fan-out is also) 72 476 P
(trivial and easily supercedes the capabilities of) 72 462 T
2 F
(tee) 298.83 462 T
0 F
(.) 313.48 462 T
2 16 Q
(6  Is expect a shell?) 72 421.33 T
0 12 Q
0.18 (The beginning of this paper compared the shell to) 72 396 P
2 F
0.18 (expect) 315.09 396 P
0 F
0.18 (.  T) 347.73 396 P
0.18 (o repeat, the shell is incapable of the) 363.56 396 P
0.79 (interactive dialogue that) 72 382 P
2 F
0.79 (expect) 193.29 382 P
0 F
0.79 ( can perform.  But how does) 225.93 382 P
2 F
0.79 (expect) 370.71 382 P
0 F
0.79 ( compare with the shell?  Is) 403.34 382 P
2 F
(expect) 72 368 T
0 F
( as powerful as a shell?) 104.63 368 T
1.07 (The base language of) 72 344 P
2 F
1.07 (expect) 181.54 344 P
0 F
1.07 (, T) 214.17 344 P
1.07 (cl, is quite powerful and is certainly capable of doing the same) 227.73 344 P
-0.28 (kinds of programming as the shell.  Indeed, as a programming language, T) 72 330 P
-0.28 (cl is functionally almost) 425.23 330 P
0.79 (a replacement for any of) 72 316 P
2 F
0.79 (sh) 196.18 316 P
0 F
0.79 (,) 207.51 316 P
2 F
0.79 (csh) 214.3 316 P
0 F
0.79 ( and) 230.96 316 P
2 F
0.79 (ksh) 255.85 316 P
0 F
0.79 (.  One noticeably missing feature is redirection, which) 273.86 316 P
(T) 72 302 T
(cl can perform by calling the shell.) 78.49 302 T
0 (For interactive use, however) 72 278 P
0 (, T) 208.07 278 P
0 (cl has little support.  There is no history or job control.  This is un-) 220.55 278 P
0.04 (derstandable, considering that T) 72 264 P
0.04 (cl was not designed to be used interactively) 225.18 264 P
0.04 (.  The additional com-) 433.56 264 P
2.46 (mands added by) 72 250 P
2 F
2.46 (expect) 160.31 250 P
0 F
2.46 ( do not change that.  Job control as supported by) 192.95 250 P
2 F
2.46 (expect) 455.14 250 P
0 F
2.46 ( is strictly) 487.77 250 P
1.5 (command-based while the shell of) 72 236 P
1.5 (fers interrupt keys as shorthand.  Indeed, typing job control) 242.34 236 P
0.47 (characters at) 72 222 P
2 F
0.47 (expect) 136.21 222 P
0 F
0.47 ( itself only af) 168.84 222 P
0.47 (fects) 233.66 222 P
2 F
0.47 (expect) 259.77 222 P
0 F
0.47 (, not the other processes) 292.41 222 P
2 F
0.47 (expect) 413.34 222 P
0 F
0.47 ( is interacting with.) 445.97 222 P
0.41 (\050The exception to this is that when in) 72 208 P
2 F
0.41 (interact) 256.52 208 P
0 F
0.41 (, job control characters are sent to the current pro-) 296.49 208 P
(cess.\051) 72 194 T
1.05 (While) 72 170 P
2 F
1.05 (expect) 105.36 170 P
0 F
1.05 ( can be used interactively \050by pressing the) 138 170 P
1 F
1.05 (escape-character) 350.93 170 P
0 F
1.05 ( while in) 434.19 170 P
2 F
1.05 (interact) 482.33 170 P
0 F
1.05 (\051, it) 522.29 170 P
1.24 (was not designed to be and lacks pleasant features such as history and interrupt key-based job) 72 156 P
0.83 (control.  Its interactive mode is seen as primarily useful for experimenting, although some very) 72 142 P
1.13 (powerful results are possible by typing) 72 128 P
2 F
1.13 (expect) 268.01 128 P
0 F
1.13 ( commands in directly) 300.64 128 P
1.13 (, or indirectly by say) 410.2 128 P
1.13 (, pro-) 512.89 128 P
(grammable function keys or software stream modules that perform interactive line editing.) 72 114 T
FMENDPAGE
%%EndPage: "13" 12
%%Page: "12" 12
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 12 -) 293.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
1 F
0 X
-0.19 (\322Assume a yes r) 126 712 P
-0.19 (esponse to all questions asked by fsck; this should be used with) 203.27 712 P
0.54 (extr) 126 698 P
0.54 (eme caution, as it is a fr) 144.21 698 P
0.54 (ee license to continue, even after sever) 262.62 698 P
0.54 (e pr) 450.94 698 P
0.54 (oblems) 470.02 698 P
(ar) 126 684 T
(e encounter) 136.22 684 T
(ed.\323) 192.06 684 T
0 F
0.52 (The) 72 660 P
2 F
0.52 (-n) 94.17 660 P
0 F
0.52 ( option has a similarly worthless meaning.  This kind of interface is inexcusably bad, and) 104.83 660 P
0.35 (yet many programs have the same style.  For example,) 72 646 P
2 F
0.35 (ftp) 340.01 646 P
0 F
0.35 ( has an option that disables interactive) 354.67 646 P
0.89 (prompting so that it can be run from a script.  But it provides no way to take alternative action) 72 632 P
(should an error occur) 72 618 T
(.) 173.58 618 T
2 F
-0.04 (expect) 72 594 P
0 F
-0.04 ( is useful with such programs.  For example, it could be programmed to answer \322) 104.63 594 P
4 F
-0.09 (yes) 492.81 594 P
0 F
-0.04 (\323 and) 514.4 594 P
-0.08 (\322) 72 580 P
4 F
-0.2 (no) 77.32 580 P
0 F
-0.08 (\323 depending on the question from) 91.72 580 P
2 F
-0.08 (fsck) 255.11 580 P
0 F
-0.08 (.  Control could be turned over to the user for question-) 275.76 580 P
(able cases.) 72 566 T
2 F
(5.7  Pr) 72 537 T
(ograms with poorly written interfaces) 105.43 537 T
0 F
0.09 (Ousterhout [5] makes the observation that \322a general purpose, programmable command language) 72 513 P
-0.08 (ampli\336es the power of a tool by allowing users to write programs in the command language in or-) 72 499 P
(der to extend the tool\325) 72 485 T
(s built-in facilities.\323) 177.27 485 T
0.83 (Few tools actually include such a language.   Examples are shells and) 72 461 P
2 F
0.83 (emacs) 419.27 461 P
0 F
0.83 (.  There are also a) 450.58 461 P
0.17 (few that have more simplistic facilities such as the) 72 447 P
2 F
0.17 (.r) 318.41 447 P
0.17 (c) 326.52 447 P
0 F
0.17 ( \336les of) 331.84 447 P
2 F
0.17 (mail) 371.35 447 P
0 F
0.17 (,) 394 447 P
2 F
0.17 (vi) 400.18 447 P
0 F
0.17 (, and) 409.51 447 P
2 F
0.17 (dbx) 436.17 447 P
0 F
0.17 (.  But in all, there) 455.51 447 P
0.83 (are very few tools with the \337exibility of a good language.  Indeed, T) 72 433 P
0.83 (cl was designed to address) 409.43 433 P
(this very problem.) 72 419 T
0.56 (Expecting UNIX tools to be rewritten using T) 72 395 P
0.56 (cl is a noble but unlikely proposition.  However) 295.26 395 P
0.56 (, a) 528.12 395 P
0.47 (similar ef) 72 381 P
0.47 (fect can be achieved with) 117.88 381 P
2 F
0.47 (expect) 245.1 381 P
0 F
0.47 (.  For example,) 277.73 381 P
2 F
0.47 (expect) 354.88 381 P
0 F
0.47 ( can be used to initialize a tool,) 387.51 381 P
0.52 (much like a set of commands from an) 72 367 P
2 F
0.52 (r) 260.05 367 P
0.52 (c) 265.16 367 P
0 F
0.52 ( \336le.  And like T) 270.48 367 P
0.52 (cl,) 351.54 367 P
2 F
0.52 (expect) 366.72 367 P
0 F
0.52 ( presents a uniform language) 399.35 367 P
0.17 (for doing so.  In ef) 72 353 P
0.17 (fect,) 161.9 353 P
2 F
0.17 (expect) 186.05 353 P
0 F
0.17 ( provides a way of giving the power of T) 218.68 353 P
0.17 (cl to tools without any ef-) 415.56 353 P
(fort spent rewriting them.) 72 339 T
-0.2 (If desired,) 72 315 P
2 F
-0.2 (expect) 123.22 315 P
0 F
-0.2 ( can be run in the background, completely disassociated from user input.) 155.86 315 P
2 F
-0.2 (expect) 507.37 315 P
0 F
0.06 (is capable of returning a status value to a script, often more meaningfully than the original tool or) 72 301 P
-0.23 (task.  \050Realistically) 72 287 P
-0.23 (, there is little reason for a program that originally could only have been run in-) 163.04 287 P
(teractively to return a status of any type.\051) 72 273 T
2 F
(5.8  Multiple pr) 72 244 T
(ograms never designed to work together) 151.74 244 T
0.65 (expect) 72 220 P
0 F
0.65 ( is capable of connecting programs that were not originally designed to be connected.  In) 104.63 220 P
0.17 (contrast to non-interactive \336lters that form pipelines, interactive programs have foresaken any at-) 72 206 P
0.28 (tempt to be driven by another program.  Eliza and) 72 192 P
2 F
0.28 (chess) 316.96 192 P
0 F
0.28 (, both mentioned earlier) 343.61 192 P
0.28 (, are good exam-) 458.56 192 P
(ples.) 72 178 T
2.27 (A more complex example is communication with another network or bulletin board system.) 72 154 P
0.19 (Commercial systems such as MCI Mail and CompuServe do not forward mail, expecting that us-) 72 140 P
0.02 (ers will dial up and read mail interactively) 72 126 P
0.02 (.  An) 274.25 126 P
2 F
0.02 (expect) 300.97 126 P
0 F
0.02 ( script can dial up such a system and check) 333.6 126 P
-0.19 (for mail.  If mail is found, a) 72 112 P
2 F
-0.19 (mail) 206.38 112 P
0 F
-0.19 ( process can be started on the local system and fed input from the) 229.04 112 P
0 (remote system.  Mail will then appear as if it was originally mailed to the local system.  Since) 72 98 P
2 F
0 (ex-) 524.68 98 P
(pect) 72 84 T
0 F
( can run in the background, this can be done at night, every hour) 93.31 84 T
(, or whatever is convenient.) 401.6 84 T
FMENDPAGE
%%EndPage: "12" 11
%%Page: "11" 11
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 11 -) 293.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
2 F
0 X
(5.1  Pr) 72 712 T
(ograms that demand interactivity) 105.43 712 T
0 F
0.73 (Programs that demand interactivity such as) 72 688 P
2 F
0.73 (passwd) 286.25 688 P
0 F
0.73 ( and) 323.57 688 P
2 F
0.73 (tip) 348.35 688 P
0 F
0.73 ( are easy to control with) 362.34 688 P
2 F
0.73 (expect) 485.31 688 P
0 F
0.73 (, but) 517.94 688 P
-0.23 (impossible with the shell.  In fact,) 72 674 P
2 F
-0.23 (tip) 235.96 674 P
0 F
-0.23 ( has special code to do dialing before a conversation, but it is) 249.96 674 P
-0.24 (quite limited in power) 72 660 P
-0.24 (.) 176.91 660 P
2 F
-0.24 (expect) 185.43 660 P
0 F
-0.24 ( eliminates the need for this type of special code in many programs.) 218.06 660 P
2 F
(5.2  Pr) 72 631 T
(ograms that cr) 105.43 631 T
(oss machine or pr) 180.48 631 T
(ogram boundaries) 271.21 631 T
0 F
0.46 (Making a shell script run across machine boundaries is not possible except in limited ways.  For) 72 607 P
-0.29 (example, shell scripts that involve telneting to another host cannot log in nor can they continue the) 72 593 P
0.8 (shell script on the remote host.) 72 579 P
2 F
0.8 (expect) 230.86 579 P
0 F
0.8 ( does not see these kinds of machine or program bound-) 263.5 579 P
(aries.) 72 565 T
2 F
(5.3  Pr) 72 536 T
(ograms that r) 105.43 536 T
(ead and write /dev/tty) 175.15 536 T
0 F
-0.19 (Programs that read and write) 72 512 P
2 F
-0.19 (/dev/tty) 212.62 512 P
0 F
-0.19 ( cannot be used from shell scripts without the shell script ac-) 251.26 512 P
0.69 (cessing) 72 498 P
2 F
0.69 (/dev/tty) 111 498 P
0 F
0.69 (.) 148.87 498 P
2 F
0.69 (passwd) 159.25 498 P
0 F
0.69 (,) 196.57 498 P
2 F
0.69 (crypt) 203.27 498 P
0 F
0.69 (, and) 230.57 498 P
2 F
0.69 (su) 258.28 498 P
0 F
0.69 ( are examples of programs that cannot be controlled by) 269.61 498 P
(the shell but can by) 72 484 T
2 F
(expect) 168.27 484 T
0 F
(.) 200.9 484 T
2 F
(5.4  Pr) 72 455 T
(ograms that \337ush input) 105.43 455 T
0 F
-0.27 (Some interactive programs believe they are doing the user a favor by \337ushing input after detecting) 72 431 P
0.98 (an error) 72 417 P
0.98 (.  Particularly clever programs such as) 109.94 417 P
2 F
0.98 (rn) 303.32 417 P
0 F
0.98 ( [9], not only \337ush input already received but) 315.31 417 P
(continue to \337ush input for a short time afterwards to allow for communications or user delays.) 72 403 T
0.24 (Redirecting standard input from the shell is inef) 72 379 P
0.24 (fective with such programs since there is no con-) 302.95 379 P
0.41 (trol over how much can be lost when input \337ushing occurs.) 72 365 P
2 F
0.41 (expect) 367.02 365 P
0 F
0.41 (, on the other hand, will wait) 399.65 365 P
(for the desired prompt rather than proceeding to send commands blindly) 72 351 T
(.) 418.31 351 T
0.9 (While it was not my intention,) 72 327 P
2 F
0.9 (expect) 226.35 327 P
0 F
0.9 ( provides a foundation for a relentless password cracking) 258.98 327 P
0.1 (tool.  However) 72 313 P
0.1 (, to show my compassion I will remind system adminstrators that one preventative) 143.34 313 P
(measure is to lock out an account after a small number of incorrect passwords have been tried.) 72 299 T
2 F
(5.5  Passing contr) 72 270 T
(ol fr) 161.74 270 T
(om user to/fr) 183.17 270 T
(om script) 249.56 270 T
0 F
1.18 (Programs such as) 72 246 P
2 F
1.18 (r) 162.49 246 P
1.18 (ogue) 167.6 246 P
0 F
1.18 (,) 191.59 246 P
2 F
1.18 (tip) 198.77 246 P
0 F
1.18 (,) 212.76 246 P
2 F
1.18 (telnet) 219.94 246 P
0 F
1.18 (, and others have a frequently repeated, well-de\336ned set of) 248.58 246 P
-0.19 (commands and another set that are not well-de\336ned.  For example,) 72 232 P
2 F
-0.19 (telnet) 392.71 232 P
0 F
-0.19 ( is always started by log-) 421.35 232 P
0.28 (ging in, after which the user can do anything.) 72 218 P
2 F
0.28 (expect) 297.98 218 P
0 F
0.28 ( can pass control from the script to the user) 330.62 218 P
0.4 (to provide this ability) 72 204 P
0.4 (.  In fact,) 175.36 204 P
2 F
0.4 (expect) 222.9 204 P
0 F
0.4 ( can take control at any time to execute sequences of com-) 255.54 204 P
(monly repeated commands.) 72 190 T
2 F
(5.6  Ostensibly non-interactive pr) 72 161 T
(ograms) 242.69 161 T
0 F
1.67 (Many programs are ostensibly non-interactive.  This means that they can be run from a shell) 72 137 P
0.05 (script, but with greatly diminished functionality) 72 123 P
0.05 (.  For example,) 300.66 123 P
2 F
0.05 (fsck) 376.13 123 P
0 F
0.05 ( can be run from a shell script) 396.78 123 P
(only with the) 72 109 T
2 F
(-y) 138.3 109 T
0 F
( or) 148.29 109 T
2 F
(-n) 164.28 109 T
0 F
( options.  The manual [1] de\336nes the) 174.94 109 T
2 F
(-y) 353.82 109 T
0 F
( option as follows:) 363.81 109 T
FMENDPAGE
%%EndPage: "11" 10
%%Page: "10" 10
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 10 -) 293.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
0 X
1.34 (If) 72 712 P
2 F
1.34 (expect) 84.32 712 P
0 F
1.34 ( does not \336nd what it is looking for) 116.96 712 P
1.34 (, the dialogue is terminated via) 295.77 712 P
2 F
1.34 (close) 454.71 712 P
0 F
1.34 ( \050which will) 479.36 712 P
-0.23 (cause) 72 698 P
2 F
-0.23 (r) 101.4 698 P
-0.23 (ogue) 106.51 698 P
0 F
-0.23 ( to go away\051 and the loop restarted.  If the desired string is found, the loop is terminat-) 130.5 698 P
(ed and the user given control of the dialogue through) 72 684 T
2 F
(interact) 329.15 684 T
0 F
( on the last line.) 369.11 684 T
0.92 (The second example dials a phone.  It can be used to reverse the char) 72 660 P
0.92 (ges, so that long-distance) 416 660 P
3.89 (phone calls are char) 72 646 P
3.89 (ged to the computer) 179.03 646 P
3.89 (.  It is invoked as) 285.64 646 P
4 F
9.34 (expect callback.exp) 393.94 646 P
4 (12016442332) 72 632 P
0 F
1.67 ( where the script is named) 151.16 632 P
2 F
1.67 (callback.exp) 289.72 632 P
0 F
1.67 ( and +1 \050201\051 644-2332 is the phone) 353.36 632 P
0.41 (number to be dialed.  \050Scripts may also be turned into executables on systems which support the) 72 618 P
2 F
(#!) 72 604 T
0 F
( magic.\051) 81.99 604 T
4 F
(# first give the user some time to logout) 115.2 584 T
(exec sleep 4) 115.2 570.5 T
(spawn tip modem) 115.2 557 T
(expect {*connected*} {}) 115.2 543.5 T
(send ATZ\134r) 115.2 530 T
(expect {*OK*} {}) 115.2 516.5 T
(send ATDT[index $argv 1]\134r) 115.2 503 T
(# modem takes a while to connect) 115.2 489.5 T
(set timeout 60) 115.2 476 T
(expect {*CONNECT*} {}) 115.2 462.5 T
0 F
0.49 (The second line illustrates how a UNIX command with no interaction can be called.) 72 439 P
4 F
1.18 (sleep 4) 488.44 439 P
0 F
-0.17 (will cause the program to block for four seconds, giving the user a chance to logout, since the mo-) 72 425 P
(dem will presumably call back to the same phone number that the user is already using.) 72 411 T
-0.16 (After spawning) 72 387 P
2 F
-0.16 (tip) 148.96 387 P
0 F
-0.16 (, the modem dials the number) 162.95 387 P
-0.16 (.  \050The modem is assumed to be using Hayes pro-) 304.08 387 P
-0.22 (tocol, but it would be easy to expand the script to handle others.\051  No matter what happens,) 72 373 P
2 F
-0.22 (expect) 507.37 373 P
0 F
0.38 (terminates.  If the call fails, it is possible for) 72 359 P
2 F
0.38 (expect) 290.36 359 P
0 F
0.38 ( to retry) 322.99 359 P
0.38 (, but that is not the point here.  If the) 360.95 359 P
-0.17 (call succeeds, getty will detect DTR on the line after) 72 345 P
2 F
-0.17 (expect) 325.16 345 P
0 F
-0.17 ( exits, and prompt the user with) 357.8 345 P
4 F
-0.4 (log-) 511.21 345 P
(in:) 72 331 T
0 F
(.  \050Actual scripts usually do more error checking.\051) 93.59 331 T
1.31 (This script illustrates the use of command-line parameters, made available to the user as a list) 72 307 P
0.1 (named) 72 293 P
2 F
0.1 (argv) 107.07 293 P
0 F
0.1 (.  Commands may also be passed in and executed by the program.  A special \337ag \050) 129.61 293 P
2 F
0.1 (-c) 526.69 293 P
0 F
0.1 (\051) 536.01 293 P
1.23 (allows execution of commands before any in the script.  For example, an) 72 279 P
2 F
1.23 (expect) 440.06 279 P
0 F
1.23 ( script can be) 472.7 279 P
-0.19 (traced without reediting by invoking it as) 72 265 P
4 F
-0.46 (expect -c \322trace ...\323 script.exp) 271.54 265 P
0 F
-0.19 (\050where) 506.71 265 P
(the ellipsis indicates a tracing option\051.) 72 251 T
2 16 Q
(5  What classes of pr) 72 210.33 T
(oblems does expect addr) 212.51 210.33 T
(ess?) 378.79 210.33 T
2 12 Q
0.17 (expect) 72 185 P
0 F
0.17 ( addresses a surprisingly lar) 104.63 185 P
0.17 (ge class of problems that the shell does not.  At the same time,) 238.33 185 P
2 F
1.07 (expect) 72 171 P
0 F
1.07 ( does not attempt to subsume functions already handled by other utilities.  For example,) 104.63 171 P
(there is no built-in \336le transfer capability) 72 157 T
(, because) 267.76 157 T
2 F
(expect) 314.71 157 T
0 F
( can just call a program to do that.) 347.35 157 T
0.89 (The following categories are not meant to be disjoint but to sharpen the focus of examples that) 72 133 P
(may share multiple problems.) 72 119 T
FMENDPAGE
%%EndPage: "10" 9
%%Page: "9" 9
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 9 -) 296.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
4 F
0 X
(}) 115.2 712 T
0 F
0.42 (There is no command \050analogous to) 72 688.5 P
2 F
0.42 (csh) 249.74 688.5 P
0 F
0.42 (\325) 266.4 688.5 P
0.42 (s) 269.73 688.5 P
2 F
0.42 (bg) 277.82 688.5 P
0 F
0.42 (\051 to let processes run without interaction, since pre-) 290.48 688.5 P
0.58 (sumably input is a necessary part of interaction and cannot be supplied in the background.  Pro-) 72 674.5 P
0.53 (cesses that enter into a lengthy phase during which no input takes place will free run by default,) 72 660.5 P
-0.19 (although output will eventually clog the pty if not periodically \337ushed.  Fortunately) 72 646.5 P
-0.19 (, this is easy to) 469.77 646.5 P
(do.) 72 632.5 T
2 F
(3.3  Miscellaneous commands) 72 603.5 T
0 F
0.93 (The remaining commands will not be described in detail.  For complete descriptions, see Libes) 72 579.5 P
([2].  These miscellaneous commands fall into the following classes:) 72 565.5 T
(\245) 108 545.5 T
(tracing - Programs may be traced to assist debugging.) 126 545.5 T
(\245) 108 525.5 T
0.52 (exiting -) 126 525.5 P
2 F
0.52 (expect) 170.34 525.5 P
0 F
0.52 ( can return an exit code, allowing it to be intelligently used in) 202.98 525.5 P
(shell scripts.) 126 511.5 T
(\245) 108 491.5 T
0.51 (logging - Logging to \336les and/or the user terminal is \337exible.  This allows in-) 126 491.5 P
0.4 (teraction with the user while hiding some or all of the interaction taking place) 126 477.5 P
(with programs.) 126 463.5 T
2 16 Q
(4  Mor) 72 422.83 T
(e examples) 117.89 422.83 T
2 12 Q
-0.18 (expect) 72 397.5 P
0 F
-0.18 ( scripts are similar in style to shell scripts.  They look like the interaction they are supposed) 104.63 397.5 P
0.24 (to control.  Just as shell scripts primarily consist of the commands as a user might type them,) 72 383.5 P
2 F
0.24 (ex-) 524.68 383.5 P
(pect) 72 369.5 T
0 F
( scripts consist primarily of the interaction that a user might see.) 93.31 369.5 T
0.02 (Here are two examples.  The \336rst runs the BSD adventure game) 72 345.5 P
2 F
0.02 (r) 381.6 345.5 P
0.02 (ogue) 386.71 345.5 P
0 F
0.02 ( repeatedly until a con\336gu-) 410.7 345.5 P
0.22 (ration with unusually good attributes \050i.e., strength of 18\051 appears, after which control is given to) 72 331.5 P
(the user) 72 317.5 T
(.) 108.98 317.5 T
4 F
(# rogue.exp - find a good game of rogue) 115.2 297.5 T
(set timeout 3) 115.2 284 T
(for {} 1 {} {) 115.2 270.5 T
(spawn rogue) 162 257 T
(expect) 162 243.5 T
({*Str:\134 18*}) 207 243.5 T
(break \134) 297 243.5 T
(timeout) 207 230 T
(close) 297 230 T
(}) 115.2 216.5 T
(interact) 115.2 203 T
0 F
0.45 (Some comments are in order: The \336rst line is a comment, naming the \336le and explaining what it) 72 179.5 P
0.35 (does.  The second line sets a short timeout.  This is appropriate since we are dealing with a local) 72 165.5 P
(program that will respond very quickly) 72 151.5 T
(.) 258.76 151.5 T
2 F
0.16 (for) 72 127.5 P
0 F
0.16 ( introduces a C-like) 87.32 127.5 P
2 F
0.16 (for) 185.22 127.5 P
0 F
0.16 ( loop, with the same control ar) 200.54 127.5 P
0.16 (guments as in C.  Here, the loop repeats) 347.52 127.5 P
0.29 (forever) 72 113.5 P
0.29 (.  After) 105.96 113.5 P
2 F
0.29 (r) 144.13 113.5 P
0.29 (ogue) 149.24 113.5 P
0 F
0.29 ( is started, we look for the text of interest in the output.) 173.23 113.5 P
2 F
0.29 (r) 447.09 113.5 P
0.29 (ogue) 452.2 113.5 P
0 F
0.29 ( is a graphics) 476.18 113.5 P
-0.05 (program which uses curses.  Curses does not guarantee screens are created in an intuitive manner) 72 99.5 P
-0.05 (,) 537 99.5 P
(and) 72 85.5 T
2 F
(expect) 92.32 85.5 T
0 F
( programmers must understand that.  However) 124.95 85.5 T
(, it is not a problem here.) 347.31 85.5 T
FMENDPAGE
%%EndPage: "9" 8
%%Page: "8" 8
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 8 -) 296.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
2 F
0 X
(3.2  Job contr) 72 712 T
(ol commands) 141.74 712 T
(close) 72 688 T
0 F
1.17 (closes the connection to the current process.  Most interactive programs will detect EOF on) 85.54 668 P
-0.22 (their standard input and exit; thus) 85.54 654 P
2 F
-0.22 (close) 248.13 654 P
0 F
-0.22 ( usually suf) 272.78 654 P
-0.22 (\336ces to kill the process as well.  Both) 327.43 654 P
2 F
-0.22 (expect) 507.36 654 P
0 F
(and) 85.54 640 T
2 F
(interact) 105.85 640 T
0 F
( will detect when the current process exits and implicitly do a) 145.82 640 T
2 F
(close) 443.61 640 T
0 F
(.) 468.26 640 T
2 F
(spawn) 72 616 T
1 F
(pr) 107.66 616 T
(ogram) 117.88 616 T
0 F
( [) 149.19 616 T
1 F
(ar) 156.18 616 T
(gs) 166.4 616 T
0 F
(]) 177.06 616 T
0.19 (creates a new process running) 85.54 596 P
1 F
0.19 (pr) 233.36 596 P
0.19 (ogram ar) 243.58 596 P
0.19 (gs) 288.3 596 P
0 F
0.19 (.  Its standard input, standard output, and standard) 298.96 596 P
-0.16 (error are connected to) 85.54 582 P
2 F
-0.16 (expect) 192.8 582 P
0 F
-0.16 (, so that they may be read and written by other) 225.44 582 P
2 F
-0.16 (expect) 449.56 582 P
0 F
-0.16 ( commands.) 482.19 582 P
(The connection is broken by) 85.54 568 T
2 F
(close) 225.1 568 T
0 F
( or if the process itself closes any of the \336le descriptors.) 249.75 568 T
0.74 (When a process is started by) 85.54 550 P
2 F
0.74 (spawn) 229.84 550 P
0 F
0.74 (, the variable) 262.5 550 P
2 F
0.74 (spawn_id) 329.98 550 P
0 F
0.74 ( is set to a descriptor referring to) 378.64 550 P
(that process.  The process described by) 85.54 536 T
2 F
(spawn_id) 276.05 536 T
0 F
( is considered) 324.71 536 T
1 F
(the curr) 393.66 536 T
(ent pr) 431.52 536 T
(ocess) 459.39 536 T
0 F
(.) 485.37 536 T
2 F
2.15 (spawn) 85.54 518 P
0 F
2.15 ( returns the UNIX process id.  Note that this is not equivalent to the descriptor in) 118.19 518 P
2 F
(spawn_id) 85.54 504 T
0 F
(.) 134.19 504 T
0.13 (Internally) 85.54 486 P
0.13 (,) 131.39 486 P
2 F
0.13 (spawn) 137.51 486 P
0 F
0.13 ( uses a pty) 170.17 486 P
0.13 (, initialized the same way as the user) 220.07 486 P
0.13 (\325) 397.28 486 P
0.13 (s tty) 400.62 486 P
0.13 (.  When this is not possi-) 420.29 486 P
0.34 (ble \050such as when) 85.54 472 P
2 F
0.34 (expect) 175.49 472 P
0 F
0.34 ( has no controlling terminal\051,) 208.12 472 P
2 F
0.34 (spawn) 352.4 472 P
0 F
0.34 ( uses the default pty settings.  If) 385.05 472 P
0.54 (these are not appropriate, the user can spawn a shell, set the pty parameters directly) 85.54 458 P
0.54 (, and then) 491.96 458 P
2 F
(send) 85.54 444 T
0 F
( \050rather than) 108.86 444 T
2 F
(spawn) 170.47 444 T
0 F
(\051 the original command to the shell.) 203.13 444 T
2 F
(select) 72 420 T
1 F
(spawn_id1 spawn_id2 ...) 102.97 420 T
0 F
0.16 (returns a subset of the given) 85.54 400 P
1 F
0.16 (spawn_id) 224.41 400 P
0 F
0.16 (s that have input pending.) 270.39 400 P
2 F
0.16 (select) 400.95 400 P
0 F
0.16 ( waits until at least one) 428.92 400 P
(spawn_id can be read or until the timeout \050see) 85.54 386 T
2 F
(expect) 309.7 386 T
0 F
( command above\051 has expired.) 342.34 386 T
0.34 (There is no explicit command to switch jobs.  Rather) 72 362 P
0.34 (, the variable) 328.43 362 P
2 F
0.34 (spawn_id) 394.73 362 P
0 F
0.34 ( determines the cur-) 443.39 362 P
1.05 (rent process.) 72 348 P
2 F
1.05 (spawn) 141.76 348 P
0 F
1.05 ( sets this as a side-ef) 174.42 348 P
1.05 (fect so that a script interacting with only one process) 277.72 348 P
-0.26 (need not ever mention) 72 334 P
2 F
-0.26 (spawn_id) 180.89 334 P
0 F
-0.26 (.) 229.54 334 P
2 F
-0.26 (spawn_id) 238.02 334 P
0 F
-0.26 ( may be read and written through T) 286.68 334 P
-0.26 (cl\325) 453.58 334 P
-0.26 (s) 465.57 334 P
2 F
-0.26 (set) 472.97 334 P
0 F
-0.26 ( command.) 486.96 334 P
0.29 (Here is an example showing how job control could be used to have two) 72 310 P
2 F
0.29 (chess) 421.84 310 P
0 F
0.29 ( processes interact.) 448.49 310 P
0.8 (After spawning them, one move is sent by hand to get things started.  In a loop, a move is sent) 72 296 P
0.89 (from one process to the other) 72 282 P
0.89 (, and vice versa.  The) 216.21 282 P
2 F
0.89 (r) 326.82 282 P
0.89 (ead_move) 331.93 282 P
0 F
0.89 ( and) 383.22 282 P
2 F
0.89 (send_move) 408.32 282 P
0 F
0.89 ( procedures are) 464.96 282 P
0.84 (left as an exercise for the reader) 72 268 P
0.84 (.  \050They are actually very easy to write, but too long to include) 229.58 268 P
(here.\051) 72 254 T
4 F
(spawn chess) 115.2 234 T
(set chess1 $spawn_id) 115.2 220.5 T
(spawn chess) 115.2 207 T
(set chess2 $spawn_id) 115.2 193.5 T
(# force someone to go first) 115.2 180 T
(send p/k2-k3) 115.2 166.5 T
(for {} {1} {} {) 115.2 153 T
(read_move) 162 139.5 T
(set spawn_id $chess1) 162 126 T
(send_move) 162 112.5 T
(read_move) 162 99 T
(set spawn_id $chess2) 162 85.5 T
(send_move) 162 72 T
FMENDPAGE
%%EndPage: "8" 7
%%Page: "7" 7
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 7 -) 296.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
0 X
1.54 (As the last bullet says, T) 72 712 P
1.54 (cl is designed to allow the addition of new commands.) 196.78 712 P
2 F
1.54 (expect) 480.85 712 P
0 F
1.54 ( adds) 513.48 712 P
0.03 (twelve commands to the T) 72 698 P
0.03 (cl language.  I will now present the more interesting of these new com-) 198.53 698 P
(mands.) 72 684 T
2 F
(3.1  Interaction commands) 72 655 T
(send) 72 631 T
1 F
(ar) 98.33 631 T
(gs) 108.54 631 T
0 F
-0.1 (sends) 85.54 611 P
1 F
-0.1 (ar) 115.08 611 P
-0.1 (gs) 125.3 611 P
0 F
-0.1 ( to the current process.  Strings are interpreted following T) 135.96 611 P
-0.1 (cl rules.  For example, the) 415.59 611 P
(command) 85.54 597 T
4 F
(send hello world\134r) 115.2 569.5 T
0 F
(sends the characters,) 85.54 538 T
4 F
(h e l l o) 187.44 538 T
0 F
(<space>) 259.4 538 T
4 F
(w o r l d) 302.57 538 T
0 F
(<return> to the current process.) 374.53 538 T
2 F
(expect) 72 514 T
1 F
(patlist1 action1 patlist2 action2 . . .) 107.63 514 T
0 F
0.78 (waits until the output of the current process matches a pattern, or a speci\336ed time period has) 85.54 494 P
0.25 (passed.  Each) 85.54 480 P
1 F
0.25 (patlist) 154.23 480 P
0 F
0.25 ( consists of a single pattern or list of patterns.  If a pattern is matched, the) 184.23 480 P
0.3 (corresponding action is executed.  The result of the action is returned from) 85.54 466 P
2 F
0.3 (expect) 450.51 466 P
0 F
0.3 (.  The exact) 483.15 466 P
-0.12 (string matched \050or read but unmatched, if a timeout occurred\051 is stored in the variable) 85.54 452 P
2 F
-0.12 (expect_-) 497.38 452 P
0.88 (match) 85.54 438 P
0 F
0.88 (.  If) 117.51 438 P
5 F
0.88 (patlist) 140.12 438 P
0 F
0.88 ( is) 170.11 438 P
2 F
0.88 (eof) 185.86 438 P
0 F
0.88 ( or) 201.17 438 P
2 F
0.88 (timeout) 218.91 438 P
0 F
0.88 (, the corresponding action is executed upon end-of-\336le or) 258.21 438 P
-0.02 (timeout, respectively) 85.54 424 P
-0.02 (.  The default timeout period is 10 seconds but may) 185.34 424 P
-0.02 (, for example, be set to) 430.52 424 P
(30 by the command) 85.54 410 T
4 F
(set timeout 30) 183.47 410 T
0 F
(.) 284.22 410 T
1.15 (The following fragment is from a script that involves a login.) 85.54 392 P
2 F
1.15 (abort) 398.83 392 P
0 F
1.15 ( is a procedure de\336ned) 426.82 392 P
(elsewhere in the script, while the other actions use T) 85.54 378 T
(cl primitives similar to their C namesakes.) 336.51 378 T
4 F
(expect) 115.2 350.5 T
({*welcome*}) 162 350.5 T
(break \134) 252 350.5 T
({*busy*}) 162 337 T
({print busy; continue} \134) 252 337 T
({*failed*}) 162 323.5 T
(abort \134) 252 323.5 T
(timeout) 162 310 T
(abort) 252 310 T
0 F
0.31 (Patterns are the usual C-shell-style regular expressions.  Patterns must match the entire output) 85.54 292.5 P
1.14 (of the current process since the previous) 85.54 278.5 P
2 F
1.14 (expect) 289.73 278.5 P
0 F
1.14 ( or) 322.36 278.5 P
2 F
1.14 (interact) 340.64 278.5 P
0 F
1.14 ( \050hence the reason most are sur-) 380.6 278.5 P
0.34 (rounded by the) 85.54 264.5 P
3 F
0.81 (*) 161.5 264.5 P
0 F
0.34 ( wildcard\051.  However) 168.7 264.5 P
0.34 (, more than 2000 bytes of output can force earlier bytes) 271.14 264.5 P
(to be \322for) 85.54 250.5 T
(gotten\323.  This may be changed by setting the variable) 131.28 250.5 T
2 F
(match_max) 390.1 250.5 T
0 F
(.) 450.05 250.5 T
2 F
(interact) 72 226.5 T
0 F
( [) 111.96 226.5 T
1 F
(escape-character) 118.95 226.5 T
0 F
(]) 202.21 226.5 T
0.07 (gives control to the user) 85.54 206.5 P
0.07 (.  User keystrokes are sent to the current process, and the standard out-) 200.4 206.5 P
0.91 (put and standard error of the current process are returned to the user) 85.54 192.5 P
0.91 (.  Any valid script com-) 421.52 192.5 P
1.65 (mands may be entered after pressing the optional) 85.54 178.5 P
1 F
1.65 (escape-character) 337.22 178.5 P
0 F
1.65 (.  Control is returned to) 419.82 178.5 P
2 F
0.27 (interact) 85.54 164.5 P
0 F
0.27 ( if the) 125.5 164.5 P
2 F
0.27 (continue) 157.28 164.5 P
0 F
0.27 ( command is entered.  If the) 201.26 164.5 P
2 F
0.27 (r) 340.36 164.5 P
0.27 (eturn) 345.47 164.5 P
0 F
0.27 ( command is entered,) 373.45 164.5 P
2 F
0.27 (interact) 480.11 164.5 P
0 F
0.27 ( im-) 520.08 164.5 P
(mediately returns with the ar) 85.54 150.5 T
(gument of) 223.22 150.5 T
2 F
(r) 275.19 150.5 T
(eturn) 280.3 150.5 T
0 F
( \050or the empty string if none is given\051.) 308.28 150.5 T
0.12 (During) 85.54 132.5 P
2 F
0.12 (interact) 122.63 132.5 P
0 F
0.12 ( \050except when entering commands via the escape character\051, job control is dis-) 162.59 132.5 P
(abled so that all characters may be passed to the current process.) 85.54 118.5 T
FMENDPAGE
%%EndPage: "7" 6
%%Page: "6" 6
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 6 -) 296.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
2 F
0 X
(2.3  High-level language) 72 712 T
0 F
(The last important feature of) 72 688 T
2 F
(expect) 212.23 688 T
0 F
( is the language itself.  It is described in the next section.) 244.86 688 T
2 16 Q
(3  expect scripts \320 What do they look like?) 72 647.33 T
2 12 Q
-0.23 (expect) 72 622 P
0 F
-0.23 ( scripts are written using a high-level procedural language.  The language is interpreted and) 104.63 622 P
-0.13 (resembles the shell in many ways.  Elements are also derived from C and LISP) 72 608 P
-0.13 (.  Despite its mixed) 447.58 608 P
-0.2 (heritage, much of the excess baggage from these other languages has been omitted leaving a mod-) 72 594 P
0.37 (est but capable language.  The language consists of a core of features called) 72 580 P
1 F
0.37 (T) 443.25 580 P
0.37 (cl) 448.81 580 P
0 F
0.37 ( \050T) 457.47 580 P
0.37 (ool Command) 471.32 580 P
0.58 (Language\051 and is described by Ousterhout [5].  This section will only give a brief overview and) 72 566 P
(enough details to describe the sample) 72 552 T
2 F
(expect) 254.54 552 T
0 F
( scripts later on.) 287.17 552 T
0.47 (The T) 72 528 P
0.47 (cl core consists of control \337ow statements such as) 100.61 528 P
2 F
0.47 (if) 347.02 528 P
0 F
0.47 (,) 354.34 528 P
2 F
0.47 (while) 360.81 528 P
0 F
0.47 (, and) 388.13 528 P
2 F
0.47 (case) 415.39 528 P
0 F
0.47 (.  T) 436.7 528 P
0.47 (cl supports proce-) 453.13 528 P
-0.17 (dure de\336nition, recursion, scoping, and more.  UNIX programs may be called and \336les manipulat-) 72 514 P
-0.02 (ed.  Expression evaluation is provided by a small set of primitives that manipulate the only type \320) 72 500 P
(strings.  \050Conversion to and from other types is performed automatically) 72 486 T
(, a la SNOBOL.\051) 418.66 486 T
(The following T) 72 462 T
(cl fragment \050from [5]\051, swaps the values of variables) 149.78 462 T
2 F
(a) 404.9 462 T
0 F
( and) 410.9 462 T
2 F
(b) 434.21 462 T
0 F
(, if) 440.88 462 T
2 F
(a) 457.2 462 T
0 F
( is less than) 463.2 462 T
2 F
(b) 521.84 462 T
0 F
(.) 528.51 462 T
4 F
(if {$a < $b} {) 115.2 442 T
(set tmp $a) 162 428.5 T
(set a $b) 162 415 T
(set b $tmp) 162 401.5 T
(}) 115.2 388 T
0 F
(Here is a command to de\336ne a recursive factorial procedure:) 72 364.5 T
4 F
(proc fac x {) 115.2 344.5 T
(if {$x == 1} {return 1}) 162 331 T
(return [expr {$x * [fac [expr $x-1]]}]) 162 317.5 T
(}) 115.2 304 T
0 F
-0.07 (The syntax and semantics are suf) 72 280.5 P
-0.07 (\336ciently close to C and the shell that the meaning of these exam-) 230.33 280.5 P
0.04 (ples should be intuitively obvious.  For lack of space, I will not describe T) 72 266.5 P
0.04 (cl further) 428.09 266.5 P
0.04 (, however it is) 471.94 266.5 P
0.09 (completely described by Ousterhout [6].  For that matter) 72 252.5 P
0.09 (, it is not particularly germane to the the-) 343.07 252.5 P
0.23 (ory of) 72 238.5 P
2 F
0.23 (expect) 104.43 238.5 P
0 F
0.23 (.  Indeed, Ousterhout [5] makes the point that the \322) 137.06 238.5 P
1 F
0.23 (syntax of the T) 383.16 238.5 P
0.23 (cl language is un-) 453.04 238.5 P
1.04 (important: any pr) 72 224.5 P
1.04 (ogramming language) 158.91 224.5 P
0 F
1.04 (\323 could provide similar features.  The salient features of) 262.89 224.5 P
(T) 72 210.5 T
(cl are that it is:) 78.49 210.5 T
(\245) 108 190.5 T
(simple \320 It is expected that most T) 126 190.5 T
(cl programs will be short.) 290.73 190.5 T
(\245) 108 170.5 T
-0.05 (programmable \320 T) 126 170.5 P
-0.05 (cl applications are general-purpose and are not known in ad-) 214.33 170.5 P
(vance.) 126 156.5 T
(\245) 108 136.5 T
-0.03 (ef) 126 136.5 P
-0.03 (\336ciently interpreted \320 T) 135.1 136.5 P
-0.03 (cl must be able to execute commands quickly enough) 247.76 136.5 P
(that user interaction is not noticably impeded.) 126 122.5 T
(\245) 108 102.5 T
0.67 (internally interfaceable to C \320 T) 126 102.5 P
0.67 (cl must allow one to add new commands that) 282.08 102.5 P
(work syner) 126 88.5 T
(gistically with existing T) 179.41 88.5 T
(cl commands.) 298.18 88.5 T
FMENDPAGE
%%EndPage: "6" 5
%%Page: "5" 5
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 5 -) 296.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
0 X
0.65 (that if a user sitting at a terminal can make decisions based on a common output stream of both) 72 712 P
(standard output and the standard error) 72 698 T
(, then so can the script.) 253.71 698 T
0.65 (Just as the user may redirect either standard input or standard output, so may the script.  But by) 72 674 P
(default, neither is redirected.  This is true for both) 72 660 T
2 F
(expect) 313.82 660 T
0 F
( and the shell.) 346.46 660 T
2 F
(2.2  Job contr) 72 631 T
(ol) 141.74 631 T
0 F
0.38 (The script may interact with a number of processes simultaneously) 72 607 P
0.38 (.  Figure 5 shows several pro-) 395.46 607 P
-0.22 (cesses being controlled at the same time.  T) 72 593 P
-0.22 (o control multiple processes, a user would use job con-) 278.21 593 P
0.72 (trol.  So does) 72 579 P
2 F
0.72 (expect) 141.19 579 P
0 F
0.72 (.  Script job control is actually easier to use because it can be programmed) 173.82 579 P
(whereas shell job control must be hand entered.) 72 565 T
1.25 (For example, suppose you are using) 72 541 P
2 F
1.25 (csh) 255.04 541 P
0 F
1.25 ( and have to type something at) 271.7 541 P
1 F
1.25 (pr) 430.02 541 P
1.25 (oc2) 440.23 541 P
0 F
1.25 ( depending upon) 457.55 541 P
1.73 (what) 72 527 P
1 F
1.73 (pr) 100.04 527 P
1.73 (oc1) 110.26 527 P
0 F
1.73 ( is telling you.  If this happens 100 times, you have to type) 127.58 527 P
2 F
1.73 (^Z) 435.64 527 P
0 F
1.73 (/) 450.61 527 P
2 F
1.73 (fg) 453.94 527 P
0 F
1.73 ( sequences 200) 463.93 527 P
-0.12 (times) 72 513 P
0 10 Q
-0.1 (3) 97.99 517.8 P
0 12 Q
-0.12 (!  W) 102.99 513 P
-0.12 (ith) 123.57 513 P
2 F
-0.12 (expect) 139.12 513 P
0 F
-0.12 (, a simple loop suf) 171.75 513 P
-0.12 (\336ces.  A good example is to try and connect two Eliza [10]) 259.33 513 P
-0.07 (or) 72 499 P
2 F
-0.07 (chess) 84.92 499 P
0 F
-0.07 ( processes to each other) 111.56 499 P
-0.07 (.  Remember that the output of the UNIX) 224.51 499 P
2 F
-0.07 (chess) 424.37 499 P
0 F
-0.07 ( program is not di-) 451.02 499 P
(rectly usable as input.) 72 485 T
-0.19 (The user can also be manipulated as if they were a process.  The ef) 72 461 P
-0.19 (fect is exactly like a shell script) 389.9 461 P
0.92 (reading from and writing to the user) 72 447 P
0.92 (.  In other words, the source of I/O to the user is the script) 250.04 447 P
0.52 (rather than an underlying interactive process.  This is illustrated by the user appearing alongside) 72 433 P
(the processes.) 72 419 T
0.18 (If desired, the user can take control \050appearing on the left side of the \336gure\051 and enter commands) 72 395 P
0.35 (just like the script.  Both the script and the user can take control from and return it to each other) 72 381 P
0.35 (.) 537 381 P
-0.12 (In the \336gure, the two have been moved closer together to emphasize the near equal relationship of) 72 367 P
(them.) 72 353 T
72 76 540 96.09 C
72 83.99 203.98 83.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 9 Q
0 X
0 K
(3.  Even if you were using a window system, you would still have to cut and paste 100 times.) 72 70 T
72 63 540 720 C
72 146.67 540 349 C
72 146.67 540 349 R
7 X
0 K
V
140 147 464 179 R
V
2 10 Q
0 X
0.1 (Figur) 140 172.33 P
0.1 (e 5) 163.7 172.33 P
0 F
0.1 (.) 175.73 172.33 P
2 F
0.1 (expect) 183.41 172.33 P
0 F
0.1 ( is communicating with 5 processes simultaneously) 210.61 172.33 P
0.1 (.  The script) 415.97 172.33 P
0.8 (is in control and has disabled logging to the user) 140 162.33 P
0.8 (.  The user only sees what the) 340.15 162.33 P
140 147.33 464 149 C
122 148.33 554 148.33 2 L
0.25 H
2 Z
0 X
0 K
N
72 146.67 540 349 C
0 10 Q
0 X
0 K
(script says to send and is essentially treated as just another process.) 140 152.33 T
269.55 234.28 341.55 288.28 18 RR
0.5 H
2 Z
N
372.04 308.94 381.53 316.28 377.37 305.02 374.71 306.98 4 Y
V
351.02 268.62 341.53 261.28 345.69 272.54 348.36 270.58 4 Y
V
374.72 306.98 348.37 270.58 2 L
0 Z
N
381.55 289.28 453.55 343.28 18 RR
7 X
V
2 Z
0 X
N
158.88 330.84 158.56 328.91 157.78 327.63 158.23 325.18 157.33 325.18 155.6 322.36 153.42 322.81
 151.97 321.86 155.27 315 160.12 310.01 167.82 308.02 167.96 306.59 170.81 306.73 175.1 305.88 175.1 307.87
 179.37 307.87 179.37 309.73 174.1 309.73 172.81 310.58 172.81 324.56 174.1 325.42 185.65 322.14 185.65 317.57
 189.36 316.14 189.36 309.58 184.94 309.58 184.94 308.02 187.5 308.02 187.5 302.6 169.96 302.6 167.68 304.17
 167.68 302.74 157.55 303.59 151.7 307.87 149.71 304.17 151.42 300.6 159.55 297.32 163.11 293.18 168.82 275.64
 166.82 275.35 169.67 273.5 174.24 271.5 173.96 270.08 172.81 269.65 167.39 270.08 165.11 270.51 163.69 269.93
 161.97 269.93 161.97 273.64 157.55 286.62 149.42 286.48 149.42 273.5 157.55 271.07 137.87 271.07 146 273.5
 146 286.19 136.58 286.19 134.16 289.33 133.59 293.04 134.44 294.89 133.73 300.74 131.73 301.31 130.16 304.59
 129.45 317 130.45 318.71 133.45 319.28 134.87 317.86 136.58 308.58 137.59 312.72 140.01 318.57 143.43 322.99
 146.69 324.07 148.41 326.53 147.83 327.3 147.64 331.1 149.43 333.98 151.04 335.33 153.23 335.91 154.9 335.52
 158.23 333.66 159.52 331.35 81 Y
0.2 H
0 Z
4 X
N
173.17 324.35 174.02 324.77 174.02 310.37 173.17 310.8 4 Y
N
136.3 300.17 136.73 296.32 138.58 296.46 137.3 300.17 4 Y
N
90 450 1 1 138.29 269.65 A
90 450 1 1 157.26 269.65 A
168.68 302.02 189.64 302.02 189.64 298.32 184.51 298.32 184.51 270.22 176.38 270.22 179.23 273.07
 182.23 273.07 182.23 298.46 170.39 298.46 10 Y
N
257.56 260.51 269.54 261.28 259.79 254.28 258.68 257.4 4 Y
0 X
V
258.69 257.39 180.5 229.59 2 L
0.5 H
2 Z
N
200.38 296.42 191.99 305 203.65 302.17 202.02 299.29 4 Y
4 X
V
261.15 269.86 269.54 261.28 257.88 264.11 259.52 266.99 4 Y
V
202.02 299.29 259.52 266.98 2 L
0 Z
N
0 12 Q
0 X
(expect) 288.35 258.3 T
146.5 207.09 180.5 252.09 R
2 Z
N
389.55 281.28 461.55 335.28 18 RR
7 X
V
0 X
N
397.55 273.28 469.55 327.28 18 RR
7 X
V
0 X
N
405.55 265.28 477.55 319.28 18 RR
7 X
V
0 X
N
413.55 257.28 485.55 311.28 18 RR
7 X
V
0 X
N
427.22 245.84 427.54 243.91 428.31 242.63 427.86 240.18 428.76 240.18 430.49 237.36 432.68 237.81
 434.13 236.86 430.83 230 425.98 225.01 418.28 223.02 418.13 221.59 415.28 221.73 411 220.88 411 222.87
 406.72 222.87 406.72 224.72 412 224.72 413.29 225.58 413.29 239.56 412 240.42 400.45 237.14 400.45 232.57
 396.74 231.14 396.74 224.59 401.16 224.59 401.16 223.02 398.59 223.02 398.59 217.6 416.13 217.6 418.42 219.17
 418.42 217.74 428.55 218.59 434.39 222.87 436.39 219.17 434.68 215.6 426.55 212.32 422.98 208.18 417.27 190.64
 419.27 190.35 416.42 188.5 411.86 186.5 412.14 185.08 413.29 184.65 418.7 185.08 420.98 185.51 422.41 184.93
 424.12 184.93 424.12 188.64 428.55 201.62 436.67 201.48 436.67 188.5 428.55 186.07 448.23 186.07 440.1 188.5
 440.1 201.19 449.51 201.19 451.94 204.33 452.51 208.04 451.65 209.89 452.36 215.74 454.36 216.31 455.93 219.59
 456.64 232 455.64 233.71 452.65 234.28 451.23 232.86 449.51 223.58 448.51 227.72 446.09 233.57 442.66 237.99
 439.41 239.07 437.69 241.53 438.26 242.3 438.46 246.09 436.66 248.98 435.05 250.33 432.87 250.91 431.2 250.53
 427.86 248.66 426.58 246.35 81 Y
0.2 H
0 Z
N
412.92 239.34 412.07 239.77 412.07 225.37 412.92 225.8 4 Y
N
449.8 215.17 449.37 211.32 447.52 211.46 448.8 215.17 4 Y
N
90 450 1 1 447.8 184.65 A
90 450 1 1 428.83 184.65 A
417.42 217.03 396.45 217.03 396.45 213.32 401.59 213.32 401.59 185.22 409.72 185.22 406.87 188.07
 403.87 188.07 403.87 213.46 415.71 213.46 10 Y
N
378.96 302.61 389.54 308.28 383.57 297.87 381.27 300.24 4 Y
V
352.11 266.95 341.54 261.28 347.5 271.69 349.81 269.32 4 Y
V
381.28 300.24 349.82 269.32 2 L
0.5 H
N
386.19 296.35 397.53 300.28 390 290.94 388.09 293.64 4 Y
V
352.87 265.21 341.53 261.28 349.07 270.62 350.97 267.92 4 Y
V
388.11 293.64 350.98 267.91 2 L
N
393.72 290.19 405.54 292.28 396.63 284.24 395.18 287.22 4 Y
V
353.36 263.37 341.54 261.28 350.45 269.31 351.91 266.34 4 Y
V
395.18 287.21 351.91 266.34 2 L
N
401.54 283.9 413.53 284.28 403.56 277.61 402.55 280.76 4 Y
V
353.53 261.66 341.54 261.28 351.51 267.96 352.52 264.81 4 Y
V
402.57 280.75 352.53 264.8 2 L
N
386.66 232.51 393.99 223 382.74 227.18 384.7 229.84 4 Y
V
348.86 251.78 341.54 261.28 352.79 257.1 350.83 254.44 4 Y
V
384.71 229.84 350.84 254.44 2 L
V
N
(interactive) 425.69 287.21 T
(processes) 428.02 275.21 T
(script) 150.18 230.7 T
72 63 540 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "5" 4
%%Page: "4" 4
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 4 -) 296.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
0 X
-0.22 (The parent now reads a command script.  When it \336nds) 72 712 P
2 F
-0.22 (send) 338.01 712 P
0 F
-0.22 ( commands, it sends data to the child.) 361.34 712 P
0.31 (When it \336nds) 72 698 P
2 F
0.31 (expect) 140.58 698 P
0 F
0.31 ( commands, it watches the output of the child for a pattern.  If the pattern is) 173.21 698 P
(matched, the parent goes to the next command in the script \050Figure 3\051.) 72 684 T
1.22 (When an) 72 475.97 P
2 F
1.22 (interact) 120.4 475.97 P
0 F
1.22 ( command is found, the parent simply copies characters from the user to the) 160.37 475.97 P
(child and vice versa \050Figure 4\051.  Control may be returned to the script at the user) 72 461.97 T
(\325) 457.83 461.97 T
(s convenience.) 461.16 461.97 T
0.35 (These simple ideas are the heart of) 72 259.34 P
2 F
0.35 (expect) 243.95 259.34 P
0 F
0.35 (.  However) 276.58 259.34 P
0.35 (, a few re\336nements allow) 329.74 259.34 P
2 F
0.35 (expect) 455.38 259.34 P
0 F
0.35 ( to address) 488.01 259.34 P
(several more problems.) 72 245.34 T
2 F
(2.1  Pseudo-terminals) 72 216.34 T
0 F
1.61 (Pipes do not support terminal semantics.  For example, programs such as) 72 192.34 P
2 F
1.61 (r) 444.41 192.34 P
1.61 (ogue) 449.52 192.34 P
0 F
1.61 (,) 473.51 192.34 P
2 F
1.61 (emacs) 481.11 192.34 P
0 F
1.61 (, etc.,) 512.41 192.34 P
-0.19 (which require the terminal size in order to run, will not run over pipes.  Thus,) 72 178.34 P
2 F
-0.19 (expect) 443.11 178.34 P
0 F
-0.19 ( uses pseudo-) 475.75 178.34 P
-0.17 (terminals \050ptys\051.  Ptys are logical device drivers that give the \322look and feel\323 of real terminal driv-) 72 164.34 P
0.67 (ers despite the fact that they are used to connect two processes together) 72 150.34 P
0.67 (.  In addition, ptys solve) 421.06 150.34 P
0.51 (the) 72 136.34 P
2 F
0.51 (/dev/tty) 90.16 136.34 P
0 F
0.51 ( problem noted above.  Programs that open) 128.81 136.34 P
2 F
0.51 (/dev/tty) 342.4 136.34 P
0 F
0.51 ( will actually end up speaking to) 381.04 136.34 P
(their pty) 72 122.34 T
(.) 111.53 122.34 T
0.46 (Ptys support two paths of communication \337ow \050much like two pairs of pipes\051.  What happens to) 72 98.34 P
-0.26 (the standard error?  It is overloaded into the path already used by standard output.  The rationale is) 72 84.34 P
72 63 540 720 C
72 495.97 540 680 C
72 495.97 540 680 R
7 X
0 K
V
139.67 497 466.67 519 R
V
2 10 Q
0 X
0.11 (Figur) 139.67 512.33 P
0.11 (e 3) 163.36 512.33 P
0 F
0.11 (.) 175.41 512.33 P
2 F
0.11 (expect) 183.13 512.33 P
0 F
0.11 ( \322talks\323 to the child process, according to the script.  Interaction) 210.33 512.33 P
139.67 497.33 466.67 499 C
121.67 498.33 553.67 498.33 2 L
0.25 H
2 Z
0 X
0 K
N
72 495.97 540 680 C
0 10 Q
0 X
0 K
(is copied to the user terminal and appears as if the user actually typed it.) 139.67 502.33 T
267.55 598.18 339.55 652.18 18 RR
0.5 H
2 Z
N
350.84 626.88 339.3 630.18 350.84 633.49 350.84 630.18 4 Y
V
350.84 630.18 412.55 630.18 2 L
N
401.01 621.49 412.55 618.18 401.01 614.88 401.01 618.18 4 Y
V
401.01 618.18 339.55 618.18 2 L
N
412.55 598.18 484.55 652.18 18 RR
N
160.88 658.74 160.56 656.82 159.78 655.53 160.23 653.09 159.33 653.09 157.6 650.27 155.42 650.72
 153.97 649.77 157.27 642.91 162.12 637.92 169.82 635.92 169.96 634.49 172.81 634.64 177.1 633.78 177.1 635.78
 181.37 635.78 181.37 637.63 176.1 637.63 174.81 638.49 174.81 652.47 176.1 653.32 187.65 650.04 187.65 645.48
 191.36 644.05 191.36 637.49 186.94 637.49 186.94 635.92 189.5 635.92 189.5 630.51 171.96 630.51 169.68 632.07
 169.68 630.65 159.55 631.5 153.7 635.78 151.71 632.07 153.42 628.51 161.55 625.23 165.11 621.09 170.82 603.55
 168.82 603.26 171.67 601.41 176.24 599.41 175.96 597.98 174.81 597.56 169.39 597.98 167.11 598.41 165.69 597.84
 163.97 597.84 163.97 601.55 159.55 614.53 151.42 614.38 151.42 601.41 159.55 598.98 139.87 598.98 148 601.41
 148 614.1 138.58 614.1 136.16 617.24 135.59 620.95 136.44 622.8 135.73 628.65 133.73 629.22 132.16 632.5
 131.45 644.91 132.45 646.62 135.45 647.19 136.87 645.76 138.58 636.49 139.59 640.63 142.01 646.48 145.43 650.9
 148.69 651.98 150.41 654.44 149.83 655.21 149.64 659 151.43 661.89 153.04 663.24 155.23 663.82 156.9 663.43
 160.23 661.57 161.52 659.26 81 Y
7 X
V
0.2 H
0 Z
4 X
N
175.17 652.25 176.02 652.68 176.02 638.28 175.17 638.71 4 Y
7 X
V
4 X
N
138.3 628.08 138.73 624.23 140.58 624.37 139.3 628.08 4 Y
7 X
V
4 X
N
7 X
90 450 1 1 140.29 597.55 G
4 X
90 450 1 1 140.29 597.55 A
7 X
90 450 1 1 159.26 597.55 G
4 X
90 450 1 1 159.26 597.55 A
170.68 629.93 191.64 629.93 191.64 626.22 186.51 626.22 186.51 598.12 178.38 598.12 181.23 600.98
 184.23 600.98 184.23 626.37 172.39 626.37 10 Y
7 X
V
4 X
N
256.01 621.49 267.55 618.18 256.01 614.88 256.01 618.18 4 Y
V
256.01 618.18 194.55 618.18 2 L
3 X
V
0.5 H
2 Z
4 X
N
204.84 626.88 193.3 630.18 204.84 633.49 204.84 630.18 4 Y
0 X
V
204.84 630.18 266.55 630.18 2 L
N
0 12 Q
(expect) 286.35 622.21 T
(interactive) 423.67 629 T
(process) 431 617 T
(\050parent\051) 285.51 658.71 T
(\050child\051) 432.51 657.71 T
288.5 529 322.5 574 R
N
302.19 588.46 305.5 600 308.81 588.46 305.5 588.46 4 Y
V
305.5 588.46 305.5 574 2 L
N
(script) 292.17 552.6 T
72 63 540 720 C
0 0 612 792 C
72 63 540 720 C
72 279.34 540 457.97 C
72 279.34 540 457.97 R
7 X
0 K
V
144 280.3 468 301.97 R
V
2 10 Q
0 X
0.05 (Figur) 144 295.3 P
0.05 (e 4) 167.7 295.3 P
0 F
0.05 (.  In) 179.68 295.3 P
2 F
0.05 (interact) 198.16 295.3 P
0 F
0.05 ( mode, the user takes control and types directly to the child) 231.46 295.3 P
144 280.3 468 281.97 C
126 281.3 558 281.3 2 L
0.25 H
2 Z
0 X
0 K
N
72 279.34 540 457.97 C
0 10 Q
0 X
0 K
(process.) 144 285.3 T
265.55 380.71 337.55 434.71 18 RR
0.5 H
2 Z
N
348.84 409.4 337.3 412.71 348.84 416.02 348.84 412.71 4 Y
V
348.84 412.71 410.55 412.71 2 L
N
399.01 404.02 410.55 400.71 399.01 397.4 399.01 400.71 4 Y
V
399.01 400.71 337.55 400.71 2 L
N
410.55 380.71 482.55 434.71 18 RR
N
158.88 441.27 158.56 439.34 157.78 438.06 158.23 435.61 157.33 435.61 155.6 432.79 153.42 433.24
 151.97 432.29 155.27 425.43 160.12 420.44 167.82 418.45 167.96 417.02 170.81 417.16 175.1 416.3 175.1 418.3
 179.37 418.3 179.37 420.15 174.1 420.15 172.81 421.01 172.81 434.99 174.1 435.85 185.65 432.57 185.65 428
 189.36 426.58 189.36 420.02 184.94 420.02 184.94 418.45 187.5 418.45 187.5 413.03 169.96 413.03 167.68 414.6
 167.68 413.17 157.55 414.02 151.7 418.3 149.71 414.6 151.42 411.03 159.55 407.75 163.11 403.61 168.82 386.07
 166.82 385.78 169.67 383.93 174.24 381.93 173.96 380.51 172.81 380.08 167.39 380.51 165.11 380.93 163.69 380.36
 161.97 380.36 161.97 384.07 157.55 397.05 149.42 396.91 149.42 383.93 157.55 381.5 137.87 381.5 146 383.93
 146 396.62 136.58 396.62 134.16 399.76 133.59 403.47 134.44 405.32 133.73 411.17 131.73 411.74 130.16 415.02
 129.45 427.43 130.45 429.14 133.45 429.71 134.87 428.29 136.58 419.02 137.59 423.15 140.01 429 143.43 433.42
 146.69 434.5 148.41 436.96 147.83 437.73 147.64 441.52 149.43 444.41 151.04 445.76 153.23 446.34 154.9 445.96
 158.23 444.09 159.52 441.78 81 Y
0.2 H
0 Z
N
173.17 434.77 174.02 435.2 174.02 420.8 173.17 421.23 4 Y
N
136.3 410.6 136.73 406.75 138.58 406.89 137.3 410.6 4 Y
N
90 450 1 1 138.29 380.08 A
90 450 1 1 157.26 380.08 A
168.68 412.45 189.64 412.45 189.64 408.74 184.51 408.74 184.51 380.65 176.38 380.65 179.23 383.5
 182.23 383.5 182.23 408.89 170.39 408.89 10 Y
N
254.01 404.02 265.55 400.71 254.01 397.4 254.01 400.71 4 Y
V
254.01 400.71 192.55 400.71 2 L
0.5 H
2 Z
N
202.84 409.4 191.3 412.71 202.84 416.02 202.84 412.71 4 Y
V
202.84 412.71 264.55 412.71 2 L
N
0 12 Q
(expect) 284.35 404.73 T
(interactive) 421.67 411.52 T
(process) 429 399.52 T
(\050parent\051) 283.51 441.23 T
(\050child\051) 430.51 440.23 T
(script) 290.17 335.13 T
286.5 311.52 320.5 356.52 R
4 X
N
300.19 370.99 303.5 382.52 306.81 370.99 303.5 370.99 4 Y
V
303.5 370.99 303.5 356.52 2 L
N
72 63 540 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "4" 3
%%Page: "3" 3
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 3 -) 296.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
2 16 Q
0 X
(2  Solving the pr) 72 709.33 T
(oblem) 183.67 709.33 T
0 12 Q
-0.1 (Since I am claiming that) 72 684 P
2 F
-0.1 (expect) 191.76 684 P
0 F
-0.1 ( can solve problems the shell cannot, let us \336rst start by reviewing) 224.4 684 P
(what the shell is capable of.) 72 670 T
0.91 (Each process created by the shell is given a standard input \050stdin\051, standard output \050stdout\051 and) 72 646 P
-0.22 (standard error \050stderr\051 \050although I will ignore the last one for now\051.  The shell can connect these to) 72 632 P
0.15 (other processes or \336les. However) 72 618 P
0.15 (, shell pipes and redirection are purely one-way) 231.67 618 P
0.15 (.  Ritchie [7] has) 459.77 618 P
1.04 (described shell pipe notation as \322) 72 604 P
1 F
1.04 (unabashedly linear) 236.1 604 P
0 F
1.04 (\323.  There is no shell notation to create two) 329.42 604 P
(processes which have their standard input and output cross-connected \050Figure 1\051.) 72 590 T
-0.1 (The traditional notation) 72 475.86 P
1 F
-0.1 (pr) 187.97 475.86 P
-0.1 (oc1) 198.18 475.86 P
4 F
-0.24 ( |) 215.5 475.86 P
1 F
-0.1 (pr) 236.62 475.86 P
-0.1 (oc2) 246.83 475.86 P
0 F
-0.1 ( indicates that output \337ows from) 264.15 475.86 P
1 F
-0.1 (pr) 422.13 475.86 P
-0.1 (oc1) 432.35 475.86 P
0 F
-0.1 ( to) 449.67 475.86 P
1 F
-0.1 (pr) 464.8 475.86 P
-0.1 (oc2) 475.02 475.86 P
0 F
-0.1 (.  There is) 492.33 475.86 P
0.43 (no data \337ow from) 72 461.86 P
1 F
0.43 (pr) 162.31 461.86 P
0.43 (oc2) 172.53 461.86 P
0 F
0.43 ( to) 189.85 461.86 P
1 F
0.43 (pr) 206.03 461.86 P
0.43 (oc1) 216.25 461.86 P
0 F
0.43 (.  Indeed, the only entity that the shell can interact with on a 2-) 233.57 461.86 P
-0.13 (way basis is the user) 72 447.86 P
-0.13 (.  V) 169.43 447.86 P
-0.13 (iewed from the opposite direction, only the user is capable of 2-way inter-) 186.12 447.86 P
(action with programs.) 72 433.86 T
-0.13 (Since the shell cannot construct such connections nor can it participate in them, it cannot \322talk\323 to) 72 409.86 P
0.33 (interactive programs.  This prevents any program from interacting with another unless both have) 72 395.86 P
(been specially designed to do so.  This is the \336rst problem.) 72 381.86 T
0.35 (A second problem is that the shell has no way to prevent a program from bypassing the standard) 72 357.86 P
0.71 (input and output conventions.  Programs are free to open) 72 343.86 P
2 F
0.71 (/dev/tty) 354.6 343.86 P
0 F
0.71 ( to communicate directly with) 393.24 343.86 P
0.29 (the user) 72 329.86 P
0.29 (.  This is often used to bypass shell redirection.  For example,) 109.27 329.86 P
2 F
0.29 (crypt) 410.91 329.86 P
0 F
0.29 ( does this because its) 438.22 329.86 P
(input is redirected while it interactively demands an encryption password.) 72 315.86 T
0 10 Q
(2) 426.42 320.66 T
0 12 Q
-0.26 (The \336rst problem is easy to solve.  A program is created \050by the shell\051 which internally spawns the) 72 291.86 P
0.5 (process to be controlled.  The spawned process is established so that its standard input and stan-) 72 277.86 P
(dard output remain connected to the original program \050Figure 2\051.) 72 263.86 T
72 76 540 96.09 C
72 83.99 203.98 83.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 9 Q
0 X
0 K
(2.  Again, this was done for security reasons.) 72 70 T
72 63 540 720 C
72 495.86 540 586 C
72 495.86 540 586 R
7 X
0 K
V
188 521.33 260 575.33 18 RR
0.5 H
2 Z
0 X
N
271.54 557.02 260 560.33 271.54 563.64 271.54 560.33 4 Y
V
271.54 560.33 360 560.33 2 L
N
348.46 540.64 360 537.33 348.46 534.02 348.46 537.33 4 Y
V
348.46 537.33 260 537.33 2 L
N
0 12 Q
(stdin) 230.67 558.24 T
(stdin) 365 535.24 T
(stdout) 365 558.24 T
(stdout) 224.68 534.24 T
144 496.67 468 508.33 R
7 X
V
144 496.67 468 498.33 C
126 497.67 558 497.67 2 L
0.25 H
2 Z
0 X
0 K
N
72 495.86 540 586 C
2 10 Q
0 X
0 K
(Figur) 144 501.67 T
(e 1) 167.7 501.67 T
0 F
(.  The shell cannot connect two processes in this way) 179.63 501.67 T
(.) 390.77 501.67 T
360 521.33 432 575.33 18 RR
0.5 H
2 Z
N
72 63 540 720 C
0 0 612 792 C
72 63 540 720 C
72 132.52 540 259.86 C
72 132.52 540 259.86 R
7 X
0 K
V
144 132.86 468 164.86 R
V
2 10 Q
0 X
1.92 (Figur) 144 158.19 P
1.92 (e 2) 167.7 158.19 P
0 F
1.92 (.  The parent creates a child process so that it can read the child\325) 181.55 158.19 P
1.92 (s) 464.11 158.19 P
0.96 (standard input and write its standard output.  The user is left connected by the) 144 148.19 P
144 133.19 468 134.86 C
126 134.19 558 134.19 2 L
0.25 H
2 Z
0 X
0 K
N
72 132.52 540 259.86 C
0 10 Q
0 X
0 K
(shell, but plays no role here.) 144 138.19 T
270 181.86 342 235.86 18 RR
0.5 H
2 Z
N
353.29 217.55 341.75 220.86 353.29 224.16 353.29 220.86 4 Y
V
353.29 220.86 415 220.86 2 L
N
403.46 201.16 415 197.86 403.46 194.55 403.46 197.86 4 Y
V
403.46 197.86 342 197.86 2 L
N
0 12 Q
(stdin) 273.68 218.77 T
(stdin) 420 195.77 T
(stdout) 420 218.77 T
(stdout) 273.68 194.77 T
415 181.86 487 235.86 18 RR
N
(parent) 290.01 242.07 T
(child) 441.01 241.07 T
163.33 246.41 163.01 244.49 162.24 243.21 162.69 240.76 161.79 240.76 160.05 237.94 157.87 238.39
 156.42 237.44 159.72 230.58 164.57 225.59 172.27 223.59 172.42 222.17 175.27 222.31 179.55 221.45 179.55 223.45
 183.83 223.45 183.83 225.3 178.55 225.3 177.26 226.16 177.26 240.14 178.55 241 190.1 237.71 190.1 233.15
 193.81 231.72 193.81 225.16 189.39 225.16 189.39 223.59 191.95 223.59 191.95 218.18 174.41 218.18 172.13 219.74
 172.13 218.32 162 219.17 156.16 223.45 154.16 219.74 155.87 216.18 164 212.9 167.57 208.76 173.27 191.22
 171.28 190.93 174.13 189.08 178.69 187.08 178.41 185.66 177.26 185.23 171.84 185.66 169.56 186.08 168.14 185.51
 166.43 185.51 166.43 189.22 162 202.2 153.88 202.05 153.88 189.08 162 186.65 142.32 186.65 150.45 189.08
 150.45 201.77 141.04 201.77 138.61 204.91 138.04 208.62 138.9 210.47 138.18 216.32 136.19 216.89 134.62 220.17
 133.9 232.58 134.9 234.29 137.9 234.86 139.32 233.44 141.04 224.16 142.04 228.3 144.46 234.15 147.88 238.57
 151.14 239.65 152.86 242.11 152.29 242.88 152.09 246.67 153.89 249.56 155.49 250.91 157.68 251.48 159.35 251.1
 162.69 249.24 163.97 246.93 81 Y
7 X
V
0.2 H
0 Z
4 X
N
177.62 239.92 178.48 240.35 178.48 225.95 177.62 226.38 4 Y
7 X
V
4 X
N
140.75 215.75 141.18 211.9 143.03 212.04 141.75 215.75 4 Y
7 X
V
4 X
N
7 X
90 450 1 1 142.75 185.22 G
4 X
90 450 1 1 142.75 185.22 A
7 X
90 450 1 1 161.72 185.22 G
4 X
90 450 1 1 161.72 185.22 A
173.13 217.6 194.1 217.6 194.1 213.89 188.96 213.89 188.96 185.79 180.83 185.79 183.68 188.65
 186.68 188.65 186.68 214.04 174.84 214.04 10 Y
7 X
V
4 X
N
258.46 201.16 270 197.86 258.46 194.55 258.46 197.86 4 Y
V
258.46 197.86 197 197.86 2 L
0.5 H
2 Z
N
207.29 217.55 195.75 220.86 207.29 224.16 207.29 220.86 4 Y
V
207.29 220.86 269 220.86 2 L
N
72 63 540 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "3" 2
%%Page: "2" 2
612 792 0 FMBEGINPAGE
72 740.81 540 756 R
7 X
0 K
V
0 12 Q
0 X
(- 2 -) 296.01 748 T
72 36 540 47.95 R
7 X
V
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
2 16 Q
0 X
(1  Intr) 72 709.33 T
(oduction) 115.24 709.33 T
0 12 Q
-0.22 (UNIX programs used to be designed so that they could be connected with pipes created by a shell.) 72 684 P
0.56 (This paradigm is insuf) 72 670 P
0.56 (\336cient when dealing with many modern programs that) 181.07 670 P
1 F
0.56 (demand) 448.71 670 P
0 F
0.56 ( to be used) 486.69 670 P
(interactively) 72 656 T
(.) 131.18 656 T
0.93 (For example, the) 72 632 P
2 F
0.93 (passwd) 158.73 632 P
0 F
0.93 ( program is used to change passwords.) 196.06 632 P
2 F
0.93 (passwd) 394.36 632 P
0 F
0.93 ( prompts for the pass-) 431.68 632 P
-0.05 (word.  There is no provision for passing the information any other way) 72 618 P
-0.05 (.  This means that you can-) 410.72 618 P
0.07 (not write a shell script which uses) 72 604 P
2 F
0.07 (passwd) 238.08 604 P
0 F
0.07 ( without letting it do the prompting and reading.  Thus,) 275.4 604 P
(it is impossible to write a script that, say) 72 590 T
(, rejects passwords that are in the system dictionary) 264.78 590 T
(.) 510.83 590 T
0 10 Q
(1) 513.83 594.8 T
0 12 Q
0.32 (This illustrates one type of dif) 72 566 P
0.32 (\336culty in the user interface provided by shells such as) 217.65 566 P
2 F
0.32 (sh) 481.36 566 P
0 F
0.32 (,) 492.7 566 P
2 F
0.32 (csh) 499.02 566 P
0 F
0.32 (,) 515.68 566 P
2 F
0.32 (ksh) 522 566 P
0 F
0.27 (and others \050which I will generically refer to as \322the shell\323 in the rest of the paper\051.  I will discuss) 72 552 P
0.8 (several other dif) 72 538 P
0.8 (\336culties later) 151.32 538 P
0.8 (.  All of them have to do with the shell\325) 213.76 538 P
0.8 (s inability to communicate) 410 538 P
(with interactive programs.  My solution is called \322) 72 524 T
2 F
(expect) 313.51 524 T
0 F
(\323.) 346.14 524 T
2 F
(expect) 72 500 T
0 F
( is a program that \322talks\323 to other interactive programs according to a script.  By following) 104.63 500 T
1.09 (the script,) 72 486 P
2 F
1.09 (expect) 124.48 486 P
0 F
1.09 ( knows what can be expected from a program and what the correct responses) 157.12 486 P
0.03 (should be.  An interpreted language provides branching and high-level control structures to direct) 72 472 P
0.47 (the dialogue.  In addition, the user can take control and interact directly when desired, afterward) 72 458 P
(returning control to the script.) 72 444 T
0.29 (The name \322expect\323 comes from the idea of) 72 420 P
1 F
0.29 (send/expect) 283.46 420 P
0 F
0.29 ( sequences [4] popularized by) 339.42 420 P
2 F
0.29 (uucp) 487.07 420 P
0 F
0.29 (,) 512.4 420 P
2 F
0.29 (ker-) 518.69 420 P
-0.01 (mit) 72 406 P
0 F
-0.01 ( and other communications programs.  However) 89.32 406 P
-0.01 (, unlike these programs,) 320.25 406 P
2 F
-0.01 (expect) 438.12 406 P
0 F
-0.01 ( is generalized) 470.75 406 P
-0.09 (so that it can be run as a user) 72 392 P
-0.09 (-level command with any program and task in mind.  \050) 209.63 392 P
2 F
-0.09 (expect) 470.25 392 P
0 F
-0.09 ( can ac-) 502.89 392 P
(tually talk to several programs at the same time.\051) 72 378 T
-0.28 (Using) 72 354 P
2 F
-0.28 (expect) 103.37 354 P
0 F
-0.28 (, it is possible to create a script that solves the) 136.01 354 P
2 F
-0.28 (passwd) 355.47 354 P
0 F
-0.28 ( problem.  Here are some other) 392.8 354 P
(things) 72 340 T
2 F
(expect) 104.32 340 T
0 F
( can do, each requiring only a small amount of script:) 136.96 340 T
(\245) 108 320 T
-0.29 (Have your computer dial you back, so that you can login without paying for the) 126 320 P
(call.) 126 306 T
(\245) 108 286 T
0.2 (Start a game \050e.g.,) 126 286 P
2 F
0.2 (r) 217.07 286 P
0.2 (ogue) 222.18 286 P
0 F
0.2 (\051 and if the optimal con\336guration does not appear) 246.17 286 P
0.2 (, re-) 484.49 286 P
(start it \050again and again\051 until it does, then hand over control to you.) 126 272 T
(\245) 108 252 T
-0.08 (Run) 126 252 P
2 F
-0.08 (fsck) 148.91 252 P
0 F
-0.08 (, and in response to its questions, answer \322) 169.56 252 P
4 F
-0.2 (yes) 372.76 252 P
0 F
-0.08 (\323) 394.35 252 P
1 F
-0.08 (,) 399.68 252 P
0 F
-0.08 (\322) 405.59 252 P
4 F
-0.2 (no) 410.92 252 P
0 F
-0.08 (\323 or give control) 425.31 252 P
(back to you.) 126 238 T
(\245) 108 218 T
0.6 (Connect to another network or BBS \050e.g., MCI Mail, CompuServe\051 and auto-) 126 218 P
-0.23 (matically retrieve your mail so that it appears as if it was originally sent to your) 126 204 P
(local system.) 126 190 T
-0.02 (Although these problems are conceptually simple, none of them can be solved by the shell.  What) 72 166 P
(is wrong?  What do we do with the hard cases!?!) 72 152 T
72 76 540 96.09 C
72 83.99 203.98 83.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 9 Q
0 X
0 K
(1.  Ironically) 72 70 T
(, the original reason for having) 117.59 70 T
2 F
(passwd) 230.66 70 T
0 F
( perform the prompting was for security!) 258.63 70 T
FMENDPAGE
%%EndPage: "2" 1
%%Page: "1" 1
612 792 0 FMBEGINPAGE
72 36 540 47.95 R
7 X
0 K
V
0 12 Q
0 X
(January 21, 1992) 264.86 39.95 T
72 63 540 720 R
7 X
V
0 18 Q
0 X
(expect:  Curing Those Uncontrollable Fits of Interaction) 103.39 588 T
1 12 Q
(Don Libes) 281.18 540 T
0 F
(National Institute of Standards and Technology) 192.24 512 T
(Gaithersburg, MD 20899) 245.54 498 T
(libes@cme.nist.gov) 258.5 484 T
1 F
(ABSTRACT) 277.68 436 T
0 F
-0.56 (UNIX programs used to be designed so that they could be connected with pipes cre-) 108.14 410 P
-0.29 (ated by a shell.  This paradigm is insufficient when dealing with many modern pro-) 108 396 P
(grams that) 108 382 T
1 F
(demand) 161.3 382 T
0 F
( to be used interactively.) 199.27 382 T
2 F
-0.35 (expect) 108.14 358 P
0 F
-0.35 ( is a program designed to control interactive programs.) 140.78 358 P
2 F
-0.35 (expect) 406.13 358 P
0 F
-0.35 ( reads a script) 438.76 358 P
0.1 (that resembles the dialogue itself but which may include multiple paths through it.) 108 344 P
(Scripts include:) 108 330 T
(\245) 108 310 T
(send/expect sequences -) 126 310 T
2 F
(expect) 244.23 310 T
0 F
( patterns can include regular expressions.) 276.86 310 T
(\245) 108 290 T
1.24 (high-level language - Control \337ow \050) 126 290 P
2 F
1.24 (if) 305.07 290 P
0 F
1.24 (/) 312.4 290 P
2 F
1.24 (then) 315.73 290 P
0 F
1.24 (/) 338.39 290 P
2 F
1.24 (else) 341.72 290 P
0 F
1.24 (,) 360.37 290 P
2 F
1.24 (while) 367.61 290 P
0 F
1.24 (, etc.\051 allows dif) 394.93 290 P
1.24 (ferent) 476.03 290 P
0.01 (actions on dif) 126 276 P
0.01 (ferent inputs, along with procedure de\336nition, built-in expression) 191.1 276 P
(evaluation, and execution of arbitrary UNIX programs.) 126 262 T
(\245) 108 242 T
(job control - Multiple programs can be controlled at the same time.) 126 242 T
(\245) 108 222 T
0.41 (user interaction - Control can be passed from scripted to interactive mode and) 126 222 P
(vice versa at any time.  The user can also be treated as an I/O source/sink.) 126 208 T
2 F
1.04 (expect) 108.14 184 P
0 F
1.04 ( successfully deals with interactive programs.  It also solves several other) 140.78 184 P
(large classes of problems which UNIX shells do not.) 108 170 T
(Keywords: expect, interaction, programmed dialogue, shell, Tcl, UNIX, uucp) 108.14 146 T
0.5 (Reprinted from) 108.14 98 P
1 F
0.5 (Proceedings of the Summer 1990 USENIX Conference) 185.75 98 P
0 F
0.5 (, Anaheim,) 450.54 98 P
(California, June, 1990.) 108 84 T
FMENDPAGE
%%EndPage: "1" 0
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 18 -1
%%DocumentFonts: Times-Roman
%%+ Times-Italic
%%+ Times-Bold
%%+ Courier-Bold
%%+ Courier
%%+ Times-BoldItalic
