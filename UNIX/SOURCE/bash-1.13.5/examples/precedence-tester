From bfox@bears.ece.ucsb.edu Sun Aug  4 16:20:15 1991
Flags: 10
Received: from po.CWRU.Edu by usenet.INS.CWRU.Edu with SMTP (5.65b+ida+/CWRU-1.5-UUCPGW)
	id AA06038; Sun, 4 Aug 91 16:20:15 -0400 (from bfox@bears.ece.ucsb.edu for /usr/local/bin/m2mbox /usr/homes/chet/mbox)
Return-Path: <bfox@bears.ece.ucsb.edu>
Received: from apex-ccse.ucsb.edu by po.CWRU.Edu with SMTP (5.65b+ida+/CWRU-1.7.4)
	id AA26070; Sun, 4 Aug 91 16:00:36 -0400 (from bfox@bears.ece.ucsb.edu for chet@usenet.ins.cwru.edu)
Received: from bears.ece.ucsb.edu
	by apex.ece.ucsb.edu (4.0/ECE.UCSB-v1.3R)
	id AA18832; Sun, 4 Aug 91 13:20:22 PDT
Received: by bears.ece.ucsb.edu (4.1/ECE.UCSB-v1.2)
	id AA06516; Sun, 4 Aug 91 13:19:34 PDT
Date: Sun, 4 Aug 91 13:19:34 PDT
From: bfox@bears.ece.ucsb.edu (Brian Fox)
Message-Id: <9108042019.AA06516@bears.ece.ucsb.edu>
To: chet@po.cwru.edu
Subject: Newer version of $BASH_SOURCE/test-suite/precedence
Reply-To: bfox@ai.mit.edu


# @(#)precedence_test 1.0 91/07/24 Maarten Litmaath
# test of relative precedences for `&&' and `||' operators

echo "\`Say' echos its argument. Its return value is of no interest."
case `echo -n` in
  '') function Say () { echo -n "$*" ; } ;;
   *) function Say () { echo "$*\c" ; } ;;
esac

echo "\`Truth' echos its argument and returns a TRUE result."
function Truth () {
  Say $1;
  return 0;
}

echo "\`False' echos its argument and returns a FALSE result."
function False () {
  Say $1;
  return 1;
}

echo ""

cmd1='$open $test1 && $test2 $close || $test3'
cmd2='$test1 || $open $test2 && $test3 $close'

grouping_sh=
grouping_C='( )'

test3='Say 3'

for i in 1 2
do
	eval proto=\$cmd$i

	for test1 in 'Truth 1' 'False 1'
	do
		for test2 in 'Truth 2' 'False 2'
		do
			for precedence in sh C
			do
				eval set x \$grouping_$precedence
				shift
				open=${1-' '}
				close=${2-' '}
				eval cmd=\""$proto"\"
				Say "$cmd   output="
				output=`eval "$cmd"`
				Say "$output"
				read correct || {
					echo 'Input fubar.  Abort.' >&2
					exit 1
				}
				test "X$output" = "X$correct" ||
					echo "   correct=$correct"
				echo ''
			done

			echo ''
		done
	done
done << EOF
12
12
123
123
13
13
13
13
13
1
13
1
123
123
12
12
EOF

