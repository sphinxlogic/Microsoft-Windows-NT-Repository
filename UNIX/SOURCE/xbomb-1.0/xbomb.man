.TH XBOMB 6 "5 October 1992"

.SH NAME
xbomb \- hunt the bombs

.SH SYNOPSIS
.B xbomb
[
.B options
]

.SH DESCRIPTION
.LP
.B xbomb
is an rewrite and extension of the
.B minesweeper
game found on various PCs.  The object of the game is to clear a field
of deadly bombs.  To do this requires only two mouse buttons, one key
and devastatingly clever wit.

The board is a rectangle of hidden bombs and empty spots.  When a bomb
is stepped on, you die, and the game is over.  When an empty spot is 
stepped on, you find out how many bombs are adjacent to the spot (horizontally,
vertically or diagonally).  With clever deduction, you can figure out where 
the bombs must lie (and the bombs never lie).

The left mouse button establishes that a space on the board is empty.
It's as if you strolled onto that particular space.  If it is empty, then
it immediately becomes a number (as described above).  If there's a bomb,
then, well, you can always play again.

Any non-left mouse button (or 
.I any 
shifted button) toggles a flag.  Flags are reminders to yourself that
there's probably a bomb at that particular spot.  To help you out, the
total number of bombs left unflagged is presented in the upper left.
If you misplace a flag, then the number is decremented, but you don't
die.

There are a few keystrokes that can help you (or kill you).

.IP "\fB^Q\fP"
Quit the game.  Always the best key to know when running a new program.

.IP \fBg,G\fP
Make a random guess somewhere on the board.  If it's empty, then you
get some knowledge.  If not, you die.  True afficianados scoff at this
move.

.IP \fBs,S\fP
Scan the board.  This turns all flags into bombs.  If a flag was placed
on an empty spot, then you die.  If not, it's a good way of establishing
your hypotheses.

.IP \fBp\fP
Place obvious flags.  Sometimes a flag position is obvious.  If, for example,
you have an 8 on the board, then all of its neighbors must have bombs.
The 'p' key places any obvious flags.

.IP "\fBP,B, or b\fP"
Place and Scan (both).  This places obvious flags, scans 'em, and repeats.
Most useful.

.IP "\fB0, 1, 2 ... 9\fP"
Invoke a solver.  Solvers are set with the -S option, described below.

You are now ready to play, but you should probably use a few of the more
convenient options, so read on...

.SH "OPTIONS"
.B Xbomb
has more options than you can shake a stick at.  Here they are, in
some kind of bizarre order, starting with common X options.  You are not
obliged to specify any of these, and you can specify most of them in your 
.Xdefaults file as well (see below).  We recommend the latter approach.

.IP "\fB-bg color\fP"
use the specified color as the background color.

.IP "\fB -fg color \fP"
use the specified color as the foreground color.

.IP "\fB -bd color \fP"
use the specified color as the border color.

.IP "\fB -bw width \fP"
specify the border width.

.IP "\fB -d display \fP"
use a different server for display.

.IP "\fB -g geometry \fP"
specify the geometry.  The actual size of the window for 
.B xbomb
is dictated by
the width and height, but you can give an initial position.  I like +2+2 to
put it in the (almost) upper left.

Now for the more interesting Non-X options...

.IP "\fB -A \fP"
Auto-replay mode.  If this is set, then when you die, you have to explicitly
quit to get out of the game.

.IP "\fB -h height \fP"
Use a board that is height spaces high.  A good value for this is 24.
Default is 20.

.IP "\fB -w width \fP"
Use a board that is width spaces wide.  A good value for this is 34.
Default is 20.

.IP "\fB -f \fP"
Use a better follow algorithm.  Consider an empty spot that has three
adjacent bombs.  If all three bombs have been established (using the 's'
key), then the remainder of the neighbor spots must be empty.  The better
following algorithm does this for you.  Playing the game without it a few
times will convince you that it's a godsend.

.IP "\fB -n N \fP"
Hide N bombs on the map.  By default, N will be one quarter of the width
times the height.  Maximum, N will be one half the width times the height.
Solving a maze filled with a quarter bombs is tough,
and solving a maze filled with more than a quarter bombs can quite ridiculious.
Our record (for a 24x34 map) is 225 bombs (204 is one quarter).

.IP "\fB -na name \fP"
Play using name instead of your userid.  The name must be at most 8 
characters long.

.IP "\fB -q \fP"
Quiet mode.  Only report the scores if you manage to break into the 
high scorers list.

.IP "\fB -r seed \fP"
Play with a particular random seed.  This disables scoring, so don't
even try it.  You can find out the random seed for a game when you die
by hitting 'r'.

.IP "\fB -Re e \fP"
Start the game with e random guessed empty squares.  Pretty dangerous, but
it's only a game.

.IP "\fB -Rb f \fP"
Start the game with f random guessed flags.  Extremely dangerous!

.IP "\fB -s \fP"
Print the high score list.  By default (in the regular game), only the
top 5 plus any scores you got are printed.  This prints the entire list.

.IP "\fB -S solver \fP or \fB -S[1-9] solver \fP"
Assign a solver.  Solvers (described below) are user programs that
do better jobs of figuring out where empty spots and flags should be.
There are several solvers distributed with 
.B xbomb ,
and this manual page
describes how to build them yourself.  A solver is bound to a given number key
so that when you hit that key, the solver is invoked.  If you don't
specify a number, 
.B xbomb
uses the next available spot.

Solvers are given by pathname relative to the current directory,
or relative to the xbomb library (perhaps
.B /usr/local/games/lib/xbomb
).

.IP "\fB -t \fP"
Ted mode!  Ted mode automatically decrements numbers whenever a bomb has
been established next to them.  Thus, when you do an 's' the numbers all
decrement.  Now the numbers indicate the number of neighboring unplaced
bombs rather than the total number, and which makes the game lots easier
(and more fun, if you ask me).
Why is it called Ted mode?  Ask Ted.

.IP "\fB -z \fP"
Instead of starting the game in the upper left corner, this will find a zero
somewhere in the maze and start you there.  It makes the game easier, but
it also eliminates you from high scoring.

.SH "X RESOURCES"

Most of the options listed above can be specified as 
.B xbomb
resources.  
Of course, command line options override resources.
Here's a full list.  Hopefully they're obvious from the corresponding
options listed above.

.nf
xbomb.Foreground:		color
xbomb.Background:  		color
xbomb.BorderColor: 		color
xbomb.BorderWidth: 		width
xbomb.Display:     		display
xbomb.Geometry:    		geometry
xbomb.AutoPlay:			on
xbomb.Follow:      		on
xbomb.Width:       		width
xbomb.Height:			height
xbomb.NumberBombs:		N
xbomb.Name:			name
xbomb.RandomEmpty:		e
xbomb.RandomBombs:		b
xbomb.Quiet:			on
xbomb.Solver[1-9]:		solver
xbomb.TedMode:			on
xbomb.StartWithZero:	on
.fi


I personally like the following:

.nf
xbomb.Foreground:               PapayaWhip
xbomb.Background:               DarkBlue
xbomb.AutoPlay:                 on
xbomb.Follow:                   on
xbomb.TedMode:                  on
xbomb.Geometry:                 +2+2
xbomb.Height:                   24
xbomb.Width:                    34
xbomb.Solver1:                  pattern_solver
xbomb.Solver2:			statistics
xbomb.Solver3:                  prob_solver
xbomb.Quiet:                    on
.fi

Note that I have to specify the number of bombs on the command line, or
I'll get the default (one quarter).

.SH "SOLVER INTERFACE"

.B Xbomb
allows ``solvers'' to assist the player in doing tedious parts
of the game.
To allow flexibility (and prevent cheating),
these solvers are separate programs from the game itself.
Solvers communcate only through standard input and output
with the game.

Each a user invokes a solver,
.B xbomb 
prints the current state of the game to the
solver's standard input (after starting the solver, of course).
The format of the game is:

	INFORMATION

	MAP

``Information'' is a number line containing either ``numbombs N''
or ``mouse X Y'' (N, X, and Y are numbers).
``Map'' is the line ``map'' followed by an ASCII copy of the map
terminated by a blank line.
In the map,
digits show the number of neighboring bombs,
X's show bombs that have been verified,
f's designate flags,
e's indicate squares flagged as ``empty'' (not yet implemented),
and periods are unknown squares.

After a solver receives a map,
it must respond with any actions it wishes to take
followed by a blank line.  Each action is of the form ``X Y A''
where X and Y are the grid location and A is either ``f''
for flag as a bomb, ``m'' for move to this location,
or ``e'' for flag as empty (``e'' is not yet implemented).
A solver 
.I must
respond with at least a single blank line
or the game will not continue.

.B xbomb
comes with a bunch of solvers,  Well, three (or so).  Try 'em out.
In particular, 
.B pattern_solver
is a must if you want to get anywhere in the world.  There is *no*
truth to the rumor that it will be entered in next year's Obfuscated
C code contest.

.SH AUTHORS

.B xbomb 
is mostly the fault of Matthew Merzbacher (matthew@cs.ucla.edu),
who created absolutely no bugs at all.
He had altogether too much help from John Heidemann (johnh@cs.ucla.edu), 
who was responsible for the solver interface,
and so introduced a bug allowing anyone to write the score file.
Michial Gunter (gunter@cs.ucla.edu)
did the random seed code,
introducing a bug allowing anyone to complete any maze perfectly.

Lots of playtesters could
fill this man page, but we'll mention only Dave Ratner (ratner@cs.ucla.edu)
because he likes to see his name in print, Scott Turner (srt@aero.org)
because he was the first non-UCLA installer and because he always mentions
us in his man pages,
and Trent Bills (tbills@cse.unl.edu)
because we want him to include us in his man pages someday.

If you like this code, send us thanks, money, 
or a postcard from your next vacation.

.nf
Matthew Merzbacher
John Heidemann
Michial Gunter
Dave Ratner

UCLA Computer Science
3436 Boelter Hall
405 Hilgard Ave.
Los Angeles, CA
90024
.fi

.SH LEGALESE

.B xbomb
is Copyright (C) 1992 by Matthew Merzbacher, Los Angeles, CA.
All rights reserved.  Permission is granted to freely distribute
this as long as this copyright message is retained intact.
Permission to distribute this as part of a commerical product
requires explicit permission of the author.


.SH BUGS
Rapid, repeated solver invocations cause the program to bomb
with a failed pipe.  Fix this, and you win a cookie.

.SH "SEE ALSO"
.BR X11(1)
