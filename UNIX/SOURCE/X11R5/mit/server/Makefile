# Makefile generated by imake - do not edit!
# $XConsortium: imake.c,v 1.65 91/07/25 17:50:17 rws Exp $
#
# The cpp used on this machine replaces all newlines and multiple tabs and
# spaces in a macro expansion with a single space.  Imake tries to compensate
# for this, but is not always successful.
#

# -------------------------------------------------------------------------
# Makefile generated from "Imake.tmpl" and <Imakefile>
# $XFree86: mit/config/Imake.tmpl,v 2.10 1994/02/28 13:54:37 dawes Exp $
# $XConsortium: Imake.tmpl,v 1.139 91/09/16 08:52:48 rws Exp $
#
# Platform-specific parameters may be set in the appropriate <vendor>.cf
# configuration files.  Site-specific parameters should be set in the file
# site.def.  Full rebuilds are recommended if any parameters are changed.
#
# If your C preprocessor does not define any unique symbols, you will need
# to set BOOTSTRAPCFLAGS when rebuilding imake (usually when doing
# "make World" the first time).
#

# -------------------------------------------------------------------------
# site-specific configuration parameters that need to come before
# the platform-specific parameters - edit site.def to change

# $XFree86: mit/config/site.def,v 2.41 1994/03/07 13:53:40 dawes Exp $
# site:  $XConsortium: site.def,v 1.2 91/07/30 20:26:44 rws Exp $

# -------------------------------------------------------------------------
# platform-specific configuration parameters - edit x386.cf to change

# $XFree86: mit/config/x386.cf,v 2.41 1994/03/06 06:41:16 dawes Exp $
# platform:  $XConsortium: x386.cf,v 1.7 91/08/16 19:30:10 gildea Exp $

# -------------------------------------------------------------------------
# XFree86 version definition
# $XFree86: mit/config/xf86_vers.def,v 2.11 1994/03/05 01:56:48 dawes Exp $

# -------------------------------------------------------------------------
# XFree86 version: 2100
# -------------------------------------------------------------------------

# $XFree86: mit/config/sv4Lib.rules,v 2.0 1993/12/10 14:32:22 dawes Exp $
# $XConsortium: sv4Lib.rules,v 1.8 91/07/19 15:38:53 rws Exp $

#  --------------------------------------------------------------------
#  X386Conf.tmpl  -- configuration parameters for X386
#  This file is automatically generated -- DO NOT EDIT
#  --------------------------------------------------------------------

         X386SRC = $(SERVERSRC)/ddx/x386
    VGADRIVERSRC = $(X386SRC)/vga256/drivers
  VGA16DRIVERSRC = $(X386SRC)/vga16/drivers
   VGA2DRIVERSRC = $(X386SRC)/vga2/drivers
   HGA2DRIVERSRC = $(X386SRC)/hga2/drivers
   BDM2DRIVERSRC = $(X386SRC)/bdm2/drivers
     S3DRIVERSRC = $(X386SRC)/accel/s3/drivers
     RENDERERSRC = $(FONTSRC)/lib/font
 RENDERERCONFOBJ = $(RENDERERSRC)/fontfile/rendererConf.o
RENDERERCONFSUBDIR = $(RENDERERSRC)/fontfile
         VGAOBJS = \
                   $(VGADRIVERSRC)/et4000/et4000.o \
                   $(VGADRIVERSRC)/et3000/et3000.o \
                   $(VGADRIVERSRC)/pvga1/pvga1.o \
                   $(VGADRIVERSRC)/gvga/gvga.o \
                   $(VGADRIVERSRC)/ati/ati.o \
                   $(VGADRIVERSRC)/tvga8900/tvga8900.o \
                   $(VGADRIVERSRC)/cirrus/cirrus.o \
                   $(VGADRIVERSRC)/ncr/ncr.o \
                   $(VGADRIVERSRC)/compaq/compaq.o \
                   $(VGADRIVERSRC)/oak/oak.o
      VGASUBDIRS = \
                   et4000 \
                   et3000 \
                   pvga1 \
                   gvga \
                   ati \
                   tvga8900 \
                   cirrus \
                   ncr \
                   compaq \
                   oak
        VGA16OBJS = \
                   $(VGA16DRIVERSRC)/et4000/et4000.o \
                   $(VGA16DRIVERSRC)/tvga8900/tvga8900.o \
                   $(VGA16DRIVERSRC)/generic/generic.o
     VGA16SUBDIRS = \
                   et4000 \
                   tvga8900 \
                   generic
        VGA2OBJS = \
                   $(VGA2DRIVERSRC)/et4000/et4000.o \
                   $(VGA2DRIVERSRC)/et3000/et3000.o \
                   $(VGA2DRIVERSRC)/pvga1/pvga1.o \
                   $(VGA2DRIVERSRC)/gvga/gvga.o \
                   $(VGA2DRIVERSRC)/tvga8900/tvga8900.o \
                   $(VGA2DRIVERSRC)/ncr/ncr.o \
                   $(VGA2DRIVERSRC)/compaq/compaq.o \
                   $(VGA2DRIVERSRC)/oak/oak.o \
                   $(VGA2DRIVERSRC)/generic/generic.o
     VGA2SUBDIRS = \
                   et4000 \
                   et3000 \
                   pvga1 \
                   gvga \
                   tvga8900 \
                   ncr \
                   compaq \
                   oak \
                   generic
        HGA2OBJS =
     HGA2SUBDIRS =
        BDM2OBJS =
     BDM2SUBDIRS =
        S3OBJS = \
                   $(S3DRIVERSRC)/mmio_928/mmio_928.o \
                   $(S3DRIVERSRC)/s3_generic/s3_generic.o
     S3SUBDIRS = \
                   mmio_928 \
                   s3_generic
    RENDERERLIBS = \
                   $(RENDERERSRC)/Speedo/libSpeedo.a \
                   $(RENDERERSRC)/Type1/libType1.a
 RENDERERSUBDIRS = \
                   Speedo \
                   Type1

     VGA2CONFOBJ = $(X386SRC)/vga2/vga2Conf.o
  VGA2CONFSUBDIR = $(X386SRC)/vga2
       VGA2BUILD = -DBUILD_VGA2

   X386MCONFOBJS = $(VGA2CONFOBJ) $(HGA2CONFOBJ) $(BDM2CONFOBJ)
X386MCONFSUBDIRS = $(VGA2CONFSUBDIR) $(HGA2CONFSUBDIR) $(BDM2CONFSUBDIR)

    VGA16CONFOBJ = $(X386SRC)/vga16/vga16Conf.o
 VGA16CONFSUBDIR = $(X386SRC)/vga16
      VGA16BUILD = -DBUILD_VGA16

   VGA16CONFOBJS = $(VGA16CONFOBJ)
VGA16CONFSUBDIRS = $(VGA16CONFSUBDIR)

      VGACONFOBJ = $(X386SRC)/vga256/vga256Conf.o
   VGACONFSUBDIR = $(X386SRC)/vga256
        VGABUILD = -DBUILD_VGA256

    X386CONFOBJS = $(VGACONFOBJ)
 X386CONFSUBDIRS = $(VGACONFSUBDIR)

       S3CONFOBJ = $(X386SRC)/accel/s3/s3Conf.o
    S3CONFSUBDIR = $(X386SRC)/accel/s3

 X386SCREENFLAGS = $(VGA2BUILD) $(HGA2BUILD) $(BDM2BUILD) $(VGA16BUILD) $(VGABUILD)

# operating system:  Unix System V/386 Release 4.x

# -------------------------------------------------------------------------
# site-specific configuration parameters that go after
# the platform-specific parameters - edit site.def to change

# $XFree86: mit/config/site.def,v 2.41 1994/03/07 13:53:40 dawes Exp $
# site:  $XConsortium: site.def,v 1.2 91/07/30 20:26:44 rws Exp $

            SHELL = /bin/sh

              TOP = ../.
      CURRENT_DIR = ./server

               AR = ar cq
  BOOTSTRAPCFLAGS =  -DSVR4 -DSYSV386
               CC = gcc
               AS = as
              LEX = lex
           LEXLIB =
             YACC = yacc

         COMPRESS = compress
              CPP = /lib/cpp $(STD_CPP_DEFINES)
    PREPROCESSCMD = gcc -E $(STD_CPP_DEFINES)
          INSTALL = $(SCRIPTSRC)/bsdinst.sh
               LD = /bin/ld
             LINT = lint
      LINTLIBFLAG = -o
         LINTOPTS = -ax
               LN = ln -s
             MAKE = make
               MV = mv
               CP = cp

               RM = rm -f
            TROFF = psroff
         MSMACROS = -ms
              TBL = tbl
              EQN = eqn
            NROFF = nroff
             NEQN = neqn
     STD_INCLUDES =
  STD_CPP_DEFINES =  -DSVR4 -DSYSV386
      STD_DEFINES =  -DSVR4 -DSYSV386
 EXTRA_LOAD_FLAGS =
  EXTRA_LIBRARIES = -lsocket -lnsl
     OS_LIBRARIES =
             TAGS = ctags

    SHAREDCODEDEF =
         SHLIBDEF =

    PROTO_DEFINES =

     INSTPGMFLAGS = -s

     INSTBINFLAGS = -m 0755
     INSTUIDFLAGS = -m 4755
     INSTLIBFLAGS = -m 0644
     INSTINCFLAGS = -m 0444
     INSTMANFLAGS = -m 0444
     INSTDATFLAGS = -m 0444
    INSTKMEMFLAGS = -m 4755

      PROJECTROOT = /usr/X11R5

     TOP_INCLUDES = -I$(TOP)

      CDEBUGFLAGS = -O2
        CCOPTIONS = -m486 -fpcc-struct-return -Di386
    ANSICCOPTIONS = -ansi

        LDRUNPATH =
       LDLINKPATH = LdLinkPath

      ALLINCLUDES = $(INCLUDES) $(EXTRA_INCLUDES) $(TOP_INCLUDES) $(STD_INCLUDES)
       ALLDEFINES = $(ALLINCLUDES) $(STD_DEFINES) $(EXTRA_DEFINES) $(PROTO_DEFINES) $(DEFINES)
           CFLAGS = $(ANSICCOPTIONS) $(CDEBUGFLAGS) $(CCOPTIONS) $(ALLDEFINES)
        LINTFLAGS = $(LINTOPTS) -DLINT $(ALLDEFINES)

           LDLIBS = -L$(USRLIBDIR) $(OS_LIBRARIES) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)

        LDOPTIONS = $(ANSICCOPTIONS) $(CDEBUGFLAGS) $(CCOPTIONS) $(LOCAL_LDFLAGS) $(LDRUNPATH)

   LDCOMBINEFLAGS = -r
      DEPENDFLAGS =

        MACROFILE = x386.cf
           RM_CMD = $(RM) *.CKP *.ln *.BAK *.bak *.o core errs ,* *~ *.a .emacs_* tags TAGS make.log MakeOut

    IMAKE_DEFINES =

         IRULESRC = $(CONFIGSRC)
        IMAKE_CMD = $(NEWTOP)$(IMAKE) -I$(NEWTOP)$(IRULESRC) $(IMAKE_DEFINES)

     ICONFIGFILES = $(IRULESRC)/Imake.tmpl $(IRULESRC)/Imake.rules \
			$(IRULESRC)/Project.tmpl $(IRULESRC)/site.def \
			$(IRULESRC)/$(MACROFILE) $(EXTRA_ICONFIGFILES)

# -------------------------------------------------------------------------
# X Window System Build Parameters
# $XFree86: mit/config/Project.tmpl,v 2.5 1994/02/27 11:25:48 dawes Exp $
# $XConsortium: Project.tmpl,v 1.138.1.1 92/11/11 09:49:19 rws Exp $

_percentC_ = %C

# -------------------------------------------------------------------------
# X Window System make variables; this need to be coordinated with rules

          PATHSEP = /
        USRLIBDIR = /usr/X11R5/lib
           BINDIR = /usr/X11R5/bin
          INCROOT = /usr/X11R5/include
     BUILDINCROOT = $(TOP)
      BUILDINCDIR = $(BUILDINCROOT)/X11
      BUILDINCTOP = ..
           INCDIR = $(INCROOT)/X11
           ADMDIR = /usr/adm
           LIBDIR = $(USRLIBDIR)/X11
        CONFIGDIR = $(LIBDIR)/config
       LINTLIBDIR = $(USRLIBDIR)/lint

          FONTDIR = $(LIBDIR)/fonts
         XINITDIR = $(LIBDIR)/xinit
           XDMDIR = $(LIBDIR)/xdm
           TWMDIR = $(LIBDIR)/twm
          MANPATH = /usr/X11R5/man
    MANSOURCEPATH = $(MANPATH)/man
        MANSUFFIX = 1x
     LIBMANSUFFIX = 3x
    FILEMANSUFFIX = 4
           MANDIR = $(MANSOURCEPATH)1
        LIBMANDIR = $(MANSOURCEPATH)3
       FILEMANDIR = $(MANSOURCEPATH)4
           NLSDIR = $(LIBDIR)/nls
        PEXAPIDIR = $(LIBDIR)/PEX
      XAPPLOADDIR = $(LIBDIR)/app-defaults
       FONTCFLAGS = -t
       LINKKITDIR = $(USRLIBDIR)/Server

     INSTAPPFLAGS = $(INSTDATFLAGS)

            IMAKE = $(IMAKESRC)/imake
           DEPEND = $(DEPENDSRC)/gccmakedep
              RGB = $(RGBSRC)/rgb

            FONTC = $(BDFTOPCFSRC)/bdftopcf

        MKFONTDIR = $(MKFONTDIRSRC)/mkfontdir
        MKDIRHIER = /bin/sh $(SCRIPTSRC)/mkdirhier.sh

        CONFIGSRC = $(TOP)/config
       DOCUTILSRC = $(TOP)/doc/util
        CLIENTSRC = $(TOP)/clients
          DEMOSRC = $(TOP)/demos
           LIBSRC = $(TOP)/lib
          FONTSRC = $(TOP)/fonts
       INCLUDESRC = $(TOP)/X11
        SERVERSRC = $(TOP)/server
          UTILSRC = $(TOP)/util
        SCRIPTSRC = $(UTILSRC)/scripts
       EXAMPLESRC = $(TOP)/examples
       CONTRIBSRC = $(TOP)/../contrib
           DOCSRC = $(TOP)/doc
           RGBSRC = $(TOP)/rgb
        DEPENDSRC = $(SCRIPTSRC)
         IMAKESRC = $(CONFIGSRC)
         XAUTHSRC = $(LIBSRC)/Xau
          XLIBSRC = $(LIBSRC)/X
           XMUSRC = $(LIBSRC)/Xmu
       TOOLKITSRC = $(LIBSRC)/Xt
       AWIDGETSRC = $(LIBSRC)/Xaw
       OLDXLIBSRC = $(LIBSRC)/oldX
      XDMCPLIBSRC = $(LIBSRC)/Xdmcp
      BDFTOSNFSRC = $(FONTSRC)/bdftosnf
      BDFTOSNFSRC = $(FONTSRC)/clients/bdftosnf
      BDFTOPCFSRC = $(FONTSRC)/clients/bdftopcf
     MKFONTDIRSRC = $(FONTSRC)/clients/mkfontdir
         FSLIBSRC = $(FONTSRC)/lib/fs
    FONTSERVERSRC = $(FONTSRC)/server
     EXTENSIONSRC = $(TOP)/extensions
         XILIBSRC = $(EXTENSIONSRC)/lib/xinput
        PEXLIBSRC = $(EXTENSIONSRC)/lib/PEXlib
      PHIGSLIBSRC = $(EXTENSIONSRC)/lib/PEX

# $XConsortium: sv4Lib.tmpl,v 1.4.1.1 92/11/11 09:57:17 rws Exp $

SHLIBLDFLAGS = -G -z text
PICFLAGS = -fPIC

  DEPEXTENSIONLIB =
     EXTENSIONLIB = -L$(EXTENSIONSRC)/lib -lXext

          DEPXLIB = $(DEPEXTENSIONLIB)
             XLIB = $(EXTENSIONLIB) -L$(XLIBSRC) -lX11

        DEPXMULIB =
       XMULIBONLY = -L$(XMUSRC) -lXmu
           XMULIB = $(XMULIBONLY) -z nodefs

       DEPOLDXLIB =
          OLDXLIB = -L$(OLDXLIBSRC) -loldX

      DEPXTOOLLIB =
         XTOOLLIB = -L$(TOOLKITSRC) -lXt

        DEPXAWLIB =
           XAWLIB = -L$(AWIDGETSRC) -lXaw

        DEPXILIB =
           XILIB = -L$(XILIBSRC) -lXi

        DEPPEXLIB =
         PEXLIB = -L$(PEXLIBSRC) -lPEX5

        SOXLIBREV = 5.0
          SOXTREV = 5.0
         SOXAWREV = 5.0
        SOOLDXREV = 5.0
         SOXMUREV = 5.0
        SOXEXTREV = 5.0
      SOXINPUTREV = 5.0
         SOPEXREV = 1.0

      DEPXAUTHLIB = $(XAUTHSRC)/libXau.a
         XAUTHLIB =  $(DEPXAUTHLIB)
      DEPXDMCPLIB = $(XDMCPLIBSRC)/libXdmcp.a
         XDMCPLIB =  $(DEPXDMCPLIB)

        DEPPHIGSLIB = $(PHIGSLIBSRC)/libphigs.a
           PHIGSLIB =  $(DEPPHIGSLIB)

       DEPXBSDLIB = $(LIBSRC)/Berk/libXbsd.a
          XBSDLIB =  $(DEPXBSDLIB)

 LINTEXTENSIONLIB = $(EXTENSIONSRC)/lib/llib-lXext.ln
         LINTXLIB = $(XLIBSRC)/llib-lX11.ln
          LINTXMU = $(XMUSRC)/llib-lXmu.ln
        LINTXTOOL = $(TOOLKITSRC)/llib-lXt.ln
          LINTXAW = $(AWIDGETSRC)/llib-lXaw.ln
           LINTXI = $(XILIBSRC)/llib-lXi.ln
          LINTPEX = $(PEXLIBSRC)/llib-lPEX5.ln
        LINTPHIGS = $(PHIGSLIBSRC)/llib-lphigs.ln

          DEPLIBS = $(DEPXAWLIB) $(DEPXMULIB) $(DEPXTOOLLIB) $(DEPXLIB)

         DEPLIBS1 = $(DEPLIBS)
         DEPLIBS2 = $(DEPLIBS)
         DEPLIBS3 = $(DEPLIBS)

# -------------------------------------------------------------------------
# Imake rules for building libraries, programs, scripts, and data files
# $XFree86: mit/config/Imake.rules,v 2.1 1993/09/29 11:06:00 dawes Exp $
# rules:  $XConsortium: Imake.rules,v 1.123 91/09/16 20:12:16 rws Exp $

# -------------------------------------------------------------------------
# start of Imakefile

# $XFree86: mit/server/Imakefile,v 2.15 1993/10/07 13:53:44 dawes Exp $
# $XConsortium: Imakefile,v 1.135 91/09/22 10:27:51 rws Exp $

# $XFree86: mit/config/Server.tmpl,v 1.3 1993/03/27 08:55:06 dawes Exp $
# $XConsortium: Server.tmpl,v 1.5 91/05/06 19:00:26 rws Exp $

         CC = gcc
  CCOPTIONS = -m486 -fpcc-struct-return -Di386
STD_DEFINES =  -DSVR4 -DSYSV386  -DXDMCP   -DAVOID_GLYPHBLT -DSHAPE -DMULTIBUFFER -DMITMISC  -DMITSHM  -DXTESTEXT1 -DXTEST
CDEBUGFLAGS = -O2
EXT_DEFINES = -DSHAPE -DMULTIBUFFER -DMITMISC  -DMITSHM  -DXTESTEXT1 -DXTEST

        DEPDIRS = $(FONTSRC)/lib/font $(EXTENSIONSRC)/server
     NONPEXEXTS = $(OTHEREXTS) $(EXTENSIONSRC)/server/libext.a
     EXTENSIONS = $(NONPEXEXTS) $(PEXLIBS)
         XAULIB = $(XAUTHSRC)/libXau.a

       XDMCPLIB = $(XDMCPLIBSRC)/libXdmcp.a

             OS = os/libos.a $(XAULIB) $(XDMCPLIB)
        BSDEMUL = $(LIBSRC)/Berk/Berklib.o
            MFB = ddx/mfb/libmfb.a
            CFB = ddx/cfb/libcfb.a
             MI = ddx/mi/libmi.a
            DIX = dix/libdix.a
           FONT = $(FONTSRC)/lib/font/libfont.a $(RENDERERLIBS)

        SYSLIBS = -lm $(DBMLIB) $(MALLOCLIBS) $(EXTRASYSLIBS)
           CBRT = ddx/mi/cbrt.o

#
# This turns off the default rule for compiling .c files because
# this makefile does not really know how to build it.  This is really
# just a hack because of the Sun version of make and nfs.
#
.c.o:

ALL1 = xf86all

ALL = $(ALL1) $(ALL2)

all: $(ALL)

#
# XFree86
#
# This stuff is common to all XFree86 servers
#

# -------------------------------------------------------------------------
#
# xf86.rules: rules for XF86_ servers
#
# $XFree86: mit/config/xf86.rules,v 2.9 1993/10/02 07:12:07 dawes Exp $

XF86DEFSERVER = XF86_SVGA

INSTPGMFLAGS = $(INSTUIDFLAGS)

     SUBDIRS0 = include dix os ddx/mi ddx/x386
XF86COMMONLIB = ddx/x386/common/libx386.a
    XF86OSLIB = ddx/x386/os-support/libxf86_os.a
    XF86HWLIB = ddx/x386/common_hw/libxf86_hw.a
XF86COMMONOBJ = $(RENDERERCONFOBJ) ddx/x386/common/xf86_Option.o

$(CONFIGSRC)/X386Conf.tmpl: $(ICONFIGFILES)
	@echo Checking in $(CONFIGSRC)...
	@cd $(CONFIGSRC); set -x; $(MAKE) $(MFLAGS) Makefiles

$(RENDERERCONFOBJ): $(ICONFIGFILES)
	@for i in $(RENDERERCONFSUBDIR); do \
	(echo Checking in $$i...; cd $$i; set -x; \
	$(MAKE) $(MFLAGS) Configure); done

$(RENDERERLIBS):: $(ICONFIGFILES)
	@echo Checking in $(RENDERERSRC)...; cd $(RENDERERSRC); set -x; \
	$(MAKE) $(MFLAGS) SUBDIRS="$(RENDERERSUBDIRS)" Makefiles; \
	$(MAKE) $(MFLAGS) SUBDIRS="$(RENDERERSUBDIRS)" depend; \
	$(MAKE) $(MFLAGS) SUBDIRS="$(RENDERERSUBDIRS)" subdirs
	touch $(RENDERERLIBS)
	@for i in $(RENDERERLIBS); do (set -x; \
	); done

#
# XFree86 SVGA server
#

SVGASPECIALOBJS = ddx/x386/common/x386Init.o dix/dixfonts.o ddx/mi/mibitblt.o
   XF86SVGALIBS = ddx/x386/vga256/libvga256.a $(DIX) $(OS) $(FONT) $(MFB) $(MI) $(EXTENSIONS)

       SUBDIRS1 = ddx/mfb

 XF86_SVGASERVERNAME = XF86_SVGA
 XF86_SVGAFBDIRS = ddx/mfb
 XF86_SVGASUBDIRS = $(SUBDIRS0) $(XF86_SVGAFBDIRS)
 XF86_SVGADIRS = $(XF86_SVGASUBDIRS) $(DEPDIRS)
 XF86_SVGACONFOBJ = ddx/x386/common/XF86_SVGA.o
 XF86_SVGAOBJS = $(XF86_SVGACONFOBJ) $(XF86COMMONOBJ) \
 $(SVGASPECIALOBJS) $(X386CONFOBJS) $(VGAOBJS)
 XF86_SVGALIBS = $(XF86COMMONLIB) $(XF86SVGALIBS) \
 $(XF86HWLIB) $(XF86OSLIB) \
 $(XF86SYSLIBS)

xf86all:: $(XF86_SVGASERVERNAME)

reload$(XF86_SVGASERVERNAME): $(CONFIGSRC)/X386Conf.tmpl
	@$(MAKE) $(MFLAGS) Makefile
	@$(MAKE) $(MFLAGS) DoReload$(XF86_SVGASERVERNAME)

DoReload$(XF86_SVGASERVERNAME): $(XF86_SVGACONFOBJ) \
	$(XF86COMMONOBJ) $(X386CONFOBJS) $(VGAOBJS) $(RENDERERLIBS) \
	load$(XF86_SVGASERVERNAME)

$(XF86_SVGACONFOBJ): $(ICONFIGFILES)
	@(echo Checking in ddx/x386/common...; \
	cd ddx/x386/common; set -x; \
	$(MAKE) $(MFLAGS) Makefile; \
	$(MAKE) $(MFLAGS) depend; \
	$(MAKE) $(MFLAGS))

$(X386CONFOBJS):: $(ICONFIGFILES)
	@for i in $(X386CONFSUBDIRS); do \
	(echo Checking in $$i...; cd $$i; set -x; \
	$(MAKE) $(MFLAGS) Configure); done

$(VGAOBJS): $(ICONFIGFILES)
	@for i in $(VGADRIVERSRC); do \
	(echo Checking in $$i...; cd $$i; set -x; \
	$(MAKE) $(MFLAGS) Makefile; \
	$(MAKE) $(MFLAGS) Makefiles; \
	$(MAKE) $(MFLAGS) depend; \
	$(MAKE) $(MFLAGS)); done
	touch $(VGAOBJS)

$(XF86_SVGASERVERNAME): $(XF86_SVGADIRS) \
	$(XF86_SVGAOBJS) $(XF86_SVGALIBS)
	-@if [ -f $(XF86_SVGASERVERNAME) ]; then set -x; \
	$(MV) $(XF86_SVGASERVERNAME) $(XF86_SVGASERVERNAME).bak; else exit 0; fi
	$(CC) $(ANSICCOPTIONS) $(CDEBUGFLAGS) $(CCOPTIONS) -o $(XF86_SVGASERVERNAME) \
	$(XF86_SVGAOBJS) $(XF86_SVGALIBS) $(EXTRA_LIBRARIES) $(SYSLIBS) $(EXTRA_LOAD_FLAGS)

load$(XF86_SVGASERVERNAME):
	-@if [ -f $(XF86_SVGASERVERNAME) ]; then set -x; \
	$(MV) $(XF86_SVGASERVERNAME) $(XF86_SVGASERVERNAME).bak; else exit 0; fi
	$(CC) $(ANSICCOPTIONS) $(CDEBUGFLAGS) $(CCOPTIONS) -o $(XF86_SVGASERVERNAME) \
	$(XF86_SVGAOBJS) $(XF86_SVGALIBS) $(EXTRA_LIBRARIES) $(SYSLIBS) $(EXTRA_LOAD_FLAGS)

install:: $(XF86_SVGASERVERNAME)
	@if [ -d $(DESTDIR)$(BINDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(BINDIR)); fi
	@case '${MFLAGS}' in *[i]*) set +e;; esac; \
	for i in $(XF86_SVGASERVERNAME); do \
	(set -x; $(INSTALL) -c $(INSTPGMFLAGS) $$i $(DESTDIR)$(BINDIR)); \
	done

clean::
	$(RM) $(XF86_SVGASERVERNAME)

#
# XFree86 16 Colour (largely generic) VGA server
#

VGA16SPECIALOBJS = ddx/x386/common/x386Init_m.o dix/dixfonts_m.o \
		 ddx/x386/vga16/mi/mipushpx16.o ddx/x386/vga16/mi/mibitblt16.o
        VGA16LIB = ddx/x386/vga16/libvga16.a
        VGA16SRC = $(VGA16DRIVERSRC)

   XF86VGA16LIBS = $(VGA16LIB) $(DIX) $(OS) $(FONT) $(MI) $(NONPEXEXTS)
   XF86VGA16OBJS = $(VGA16OBJS)
XF86VGA16DRIVSRC = $(VGA16SRC)

 XF86_VGA16SERVERNAME = XF86_VGA16
 XF86_VGA16FBDIRS =
 XF86_VGA16SUBDIRS = $(SUBDIRS0) $(XF86_VGA16FBDIRS)
 XF86_VGA16DIRS = $(XF86_VGA16SUBDIRS) $(DEPDIRS)
 XF86_VGA16CONFOBJ = ddx/x386/common/XF86_VGA16.o
 XF86_VGA16OBJS = $(XF86_VGA16CONFOBJ) $(XF86COMMONOBJ) \
 $(VGA16SPECIALOBJS) $(VGA16CONFOBJS) $(XF86VGA16OBJS)
 XF86_VGA16LIBS = $(XF86COMMONLIB) $(XF86VGA16LIBS) \
 $(XF86HWLIB) $(XF86OSLIB) \
 $(XF86SYSLIBS)

xf86all:: $(XF86_VGA16SERVERNAME)

reload$(XF86_VGA16SERVERNAME): $(CONFIGSRC)/X386Conf.tmpl
	@$(MAKE) $(MFLAGS) Makefile
	@$(MAKE) $(MFLAGS) DoReload$(XF86_VGA16SERVERNAME)

DoReload$(XF86_VGA16SERVERNAME): $(XF86_VGA16CONFOBJ) \
	$(XF86COMMONOBJ) $(VGA16CONFOBJS) $(XF86VGA16OBJS) $(RENDERERLIBS) \
	load$(XF86_VGA16SERVERNAME)

$(XF86_VGA16CONFOBJ): $(ICONFIGFILES)
	@(echo Checking in ddx/x386/common...; \
	cd ddx/x386/common; set -x; \
	$(MAKE) $(MFLAGS) Makefile; \
	$(MAKE) $(MFLAGS) depend; \
	$(MAKE) $(MFLAGS))

$(VGA16CONFOBJS):: $(ICONFIGFILES)
	@for i in $(VGA16CONFSUBDIRS); do \
	(echo Checking in $$i...; cd $$i; set -x; \
	$(MAKE) $(MFLAGS) Configure); done

$(XF86VGA16OBJS): $(ICONFIGFILES)
	@for i in $(XF86VGA16DRIVSRC); do \
	(echo Checking in $$i...; cd $$i; set -x; \
	$(MAKE) $(MFLAGS) Makefile; \
	$(MAKE) $(MFLAGS) Makefiles; \
	$(MAKE) $(MFLAGS) depend; \
	$(MAKE) $(MFLAGS)); done
	touch $(XF86VGA16OBJS)

$(XF86_VGA16SERVERNAME): $(XF86_VGA16DIRS) \
	$(XF86_VGA16OBJS) $(XF86_VGA16LIBS)
	-@if [ -f $(XF86_VGA16SERVERNAME) ]; then set -x; \
	$(MV) $(XF86_VGA16SERVERNAME) $(XF86_VGA16SERVERNAME).bak; else exit 0; fi
	$(CC) $(ANSICCOPTIONS) $(CDEBUGFLAGS) $(CCOPTIONS) -o $(XF86_VGA16SERVERNAME) \
	$(XF86_VGA16OBJS) $(XF86_VGA16LIBS) $(EXTRA_LIBRARIES) $(SYSLIBS) $(EXTRA_LOAD_FLAGS)

load$(XF86_VGA16SERVERNAME):
	-@if [ -f $(XF86_VGA16SERVERNAME) ]; then set -x; \
	$(MV) $(XF86_VGA16SERVERNAME) $(XF86_VGA16SERVERNAME).bak; else exit 0; fi
	$(CC) $(ANSICCOPTIONS) $(CDEBUGFLAGS) $(CCOPTIONS) -o $(XF86_VGA16SERVERNAME) \
	$(XF86_VGA16OBJS) $(XF86_VGA16LIBS) $(EXTRA_LIBRARIES) $(SYSLIBS) $(EXTRA_LOAD_FLAGS)

install:: $(XF86_VGA16SERVERNAME)
	@if [ -d $(DESTDIR)$(BINDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(BINDIR)); fi
	@case '${MFLAGS}' in *[i]*) set +e;; esac; \
	for i in $(XF86_VGA16SERVERNAME); do \
	(set -x; $(INSTALL) -c $(INSTPGMFLAGS) $$i $(DESTDIR)$(BINDIR)); \
	done

clean::
	$(RM) $(XF86_VGA16SERVERNAME)

#
# XFree86 Mono server
#

MONOSPECIALOBJS = ddx/x386/common/x386Init_m.o dix/dixfonts_m.o \
		  ddx/mi/mibitblt_m.o

        VGA2LIB = ddx/x386/vga2/libvga2.a
        VGA2SRC = $(VGA2DRIVERSRC)

   XF86MONOLIBS = $(VGA2LIB) $(HGA2LIB) $(BDM2LIB) $(DIX) $(OS) $(FONT) $(MI) $(NONPEXEXTS)
   XF86MONOOBJS = $(VGA2OBJS) $(HGA2OBJS) $(BDM2OBJS)
XF86MONODRIVSRC = $(VGA2SRC) $(HGA2SRC)

 XF86_MonoSERVERNAME = XF86_Mono
 XF86_MonoFBDIRS =
 XF86_MonoSUBDIRS = $(SUBDIRS0) $(XF86_MonoFBDIRS)
 XF86_MonoDIRS = $(XF86_MonoSUBDIRS) $(DEPDIRS)
 XF86_MonoCONFOBJ = ddx/x386/common/XF86_Mono.o
 XF86_MonoOBJS = $(XF86_MonoCONFOBJ) $(XF86COMMONOBJ) \
 $(MONOSPECIALOBJS) $(X386MCONFOBJS) $(XF86MONOOBJS)
 XF86_MonoLIBS = $(XF86COMMONLIB) $(XF86MONOLIBS) \
 $(XF86HWLIB) $(XF86OSLIB) \
 $(XF86SYSLIBS)

xf86all:: $(XF86_MonoSERVERNAME)

reload$(XF86_MonoSERVERNAME): $(CONFIGSRC)/X386Conf.tmpl
	@$(MAKE) $(MFLAGS) Makefile
	@$(MAKE) $(MFLAGS) DoReload$(XF86_MonoSERVERNAME)

DoReload$(XF86_MonoSERVERNAME): $(XF86_MonoCONFOBJ) \
	$(XF86COMMONOBJ) $(X386MCONFOBJS) $(XF86MONOOBJS) $(RENDERERLIBS) \
	load$(XF86_MonoSERVERNAME)

$(XF86_MonoCONFOBJ): $(ICONFIGFILES)
	@(echo Checking in ddx/x386/common...; \
	cd ddx/x386/common; set -x; \
	$(MAKE) $(MFLAGS) Makefile; \
	$(MAKE) $(MFLAGS) depend; \
	$(MAKE) $(MFLAGS))

$(X386MCONFOBJS):: $(ICONFIGFILES)
	@for i in $(X386MCONFSUBDIRS); do \
	(echo Checking in $$i...; cd $$i; set -x; \
	$(MAKE) $(MFLAGS) Configure); done

$(XF86MONOOBJS): $(ICONFIGFILES)
	@for i in $(XF86MONODRIVSRC); do \
	(echo Checking in $$i...; cd $$i; set -x; \
	$(MAKE) $(MFLAGS) Makefile; \
	$(MAKE) $(MFLAGS) Makefiles; \
	$(MAKE) $(MFLAGS) depend; \
	$(MAKE) $(MFLAGS)); done
	touch $(XF86MONOOBJS)

$(XF86_MonoSERVERNAME): $(XF86_MonoDIRS) \
	$(XF86_MonoOBJS) $(XF86_MonoLIBS)
	-@if [ -f $(XF86_MonoSERVERNAME) ]; then set -x; \
	$(MV) $(XF86_MonoSERVERNAME) $(XF86_MonoSERVERNAME).bak; else exit 0; fi
	$(CC) $(ANSICCOPTIONS) $(CDEBUGFLAGS) $(CCOPTIONS) -o $(XF86_MonoSERVERNAME) \
	$(XF86_MonoOBJS) $(XF86_MonoLIBS) $(EXTRA_LIBRARIES) $(SYSLIBS) $(EXTRA_LOAD_FLAGS)

load$(XF86_MonoSERVERNAME):
	-@if [ -f $(XF86_MonoSERVERNAME) ]; then set -x; \
	$(MV) $(XF86_MonoSERVERNAME) $(XF86_MonoSERVERNAME).bak; else exit 0; fi
	$(CC) $(ANSICCOPTIONS) $(CDEBUGFLAGS) $(CCOPTIONS) -o $(XF86_MonoSERVERNAME) \
	$(XF86_MonoOBJS) $(XF86_MonoLIBS) $(EXTRA_LIBRARIES) $(SYSLIBS) $(EXTRA_LOAD_FLAGS)

install:: $(XF86_MonoSERVERNAME)
	@if [ -d $(DESTDIR)$(BINDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(BINDIR)); fi
	@case '${MFLAGS}' in *[i]*) set +e;; esac; \
	for i in $(XF86_MonoSERVERNAME); do \
	(set -x; $(INSTALL) -c $(INSTPGMFLAGS) $$i $(DESTDIR)$(BINDIR)); \
	done

clean::
	$(RM) $(XF86_MonoSERVERNAME)

#
# XFree86 S3 server
#

  S3SPECIALOBJS = ddx/x386/common/x386Init.o dix/dixfonts.o ddx/mi/mibitblt.o
     XF86S3LIBS = ddx/x386/accel/s3/s3mmio/libs3mmio.a \
		  ddx/x386/accel/s3/libs3.a $(DIX) $(OS) $(FONT) $(CFB) $(MFB) $(MI) $(EXTENSIONS)

       SUBDIRS1 = ddx/mfb
       SUBDIRS2 = ddx/cfb

 XF86_S3SERVERNAME = XF86_S3
 XF86_S3FBDIRS = ddx/mfb ddx/cfb
 XF86_S3SUBDIRS = $(SUBDIRS0) $(XF86_S3FBDIRS)
 XF86_S3DIRS = $(XF86_S3SUBDIRS) $(DEPDIRS)
 XF86_S3CONFOBJ = ddx/x386/common/XF86_S3.o
 XF86_S3OBJS = $(XF86_S3CONFOBJ) $(XF86COMMONOBJ) \
 $(S3SPECIALOBJS) $(S3CONFOBJ) $(S3OBJS)
 XF86_S3LIBS = $(XF86COMMONLIB) $(XF86S3LIBS) \
 $(XF86HWLIB) $(XF86OSLIB) \
 $(XF86SYSLIBS)

xf86all:: $(XF86_S3SERVERNAME)

reload$(XF86_S3SERVERNAME): $(CONFIGSRC)/X386Conf.tmpl
	@$(MAKE) $(MFLAGS) Makefile
	@$(MAKE) $(MFLAGS) DoReload$(XF86_S3SERVERNAME)

DoReload$(XF86_S3SERVERNAME): $(XF86_S3CONFOBJ) \
	$(XF86COMMONOBJ) $(S3CONFOBJ) $(S3OBJS) $(RENDERERLIBS) \
	load$(XF86_S3SERVERNAME)

$(XF86_S3CONFOBJ): $(ICONFIGFILES)
	@(echo Checking in ddx/x386/common...; \
	cd ddx/x386/common; set -x; \
	$(MAKE) $(MFLAGS) Makefile; \
	$(MAKE) $(MFLAGS) depend; \
	$(MAKE) $(MFLAGS))

$(S3CONFOBJ):: $(ICONFIGFILES)
	@for i in $(S3CONFSUBDIR); do \
	(echo Checking in $$i...; cd $$i; set -x; \
	$(MAKE) $(MFLAGS) Configure); done

$(S3OBJS): $(ICONFIGFILES)
	@for i in $(S3DRIVERSRC); do \
	(echo Checking in $$i...; cd $$i; set -x; \
	$(MAKE) $(MFLAGS) Makefile; \
	$(MAKE) $(MFLAGS) Makefiles; \
	$(MAKE) $(MFLAGS) depend; \
	$(MAKE) $(MFLAGS)); done
	touch $(S3OBJS)

$(XF86_S3SERVERNAME): $(XF86_S3DIRS) \
	$(XF86_S3OBJS) $(XF86_S3LIBS)
	-@if [ -f $(XF86_S3SERVERNAME) ]; then set -x; \
	$(MV) $(XF86_S3SERVERNAME) $(XF86_S3SERVERNAME).bak; else exit 0; fi
	$(CC) $(ANSICCOPTIONS) $(CDEBUGFLAGS) $(CCOPTIONS) -o $(XF86_S3SERVERNAME) \
	$(XF86_S3OBJS) $(XF86_S3LIBS) $(EXTRA_LIBRARIES) $(SYSLIBS) $(EXTRA_LOAD_FLAGS)

load$(XF86_S3SERVERNAME):
	-@if [ -f $(XF86_S3SERVERNAME) ]; then set -x; \
	$(MV) $(XF86_S3SERVERNAME) $(XF86_S3SERVERNAME).bak; else exit 0; fi
	$(CC) $(ANSICCOPTIONS) $(CDEBUGFLAGS) $(CCOPTIONS) -o $(XF86_S3SERVERNAME) \
	$(XF86_S3OBJS) $(XF86_S3LIBS) $(EXTRA_LIBRARIES) $(SYSLIBS) $(EXTRA_LOAD_FLAGS)

install:: $(XF86_S3SERVERNAME)
	@if [ -d $(DESTDIR)$(BINDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(BINDIR)); fi
	@case '${MFLAGS}' in *[i]*) set +e;; esac; \
	for i in $(XF86_S3SERVERNAME); do \
	(set -x; $(INSTALL) -c $(INSTPGMFLAGS) $$i $(DESTDIR)$(BINDIR)); \
	done

clean::
	$(RM) $(XF86_S3SERVERNAME)

#
# XFree86 8514/A server
#

X8514SPECIALOBJS = ddx/x386/common/x386Init.o dix/dixfonts.o ddx/mi/mibitblt.o
   XF86I8514LIBS = ddx/x386/accel/ibm8514/lib8514.a $(DIX) $(OS) $(FONT) $(CFB) $(MFB) $(MI) $(EXTENSIONS)

       SUBDIRS1 = ddx/mfb
       SUBDIRS2 = ddx/cfb

 XF86_8514SERVERNAME = XF86_8514
 XF86_8514FBDIRS = ddx/mfb ddx/cfb
 XF86_8514SUBDIRS = $(SUBDIRS0) $(XF86_8514FBDIRS)
 XF86_8514DIRS = $(XF86_8514SUBDIRS) $(DEPDIRS)
 XF86_8514CONFOBJ = ddx/x386/common/XF86_8514.o
 XF86_8514OBJS = $(XF86_8514CONFOBJ) $(X8514SPECIALOBJS) $(XF86COMMONOBJ)
 XF86_8514LIBS = $(XF86COMMONLIB) $(XF86I8514LIBS) \
 $(XF86HWLIB) $(XF86OSLIB) \
 $(XF86SYSLIBS)

xf86all:: $(XF86_8514SERVERNAME)

reload$(XF86_8514SERVERNAME): $(CONFIGSRC)/X386Conf.tmpl
	@$(MAKE) $(MFLAGS) Makefile
	@$(MAKE) $(MFLAGS) DoReload$(XF86_8514SERVERNAME)

DoReload$(XF86_8514SERVERNAME): $(XF86_8514CONFOBJ) \
	$(XF86COMMONOBJ) $(RENDERERLIBS) \
	load$(XF86_8514SERVERNAME)

$(XF86_8514CONFOBJ): $(ICONFIGFILES)
	@(echo Checking in ddx/x386/common...; \
	cd ddx/x386/common; set -x; \
	$(MAKE) $(MFLAGS) Makefile; \
	$(MAKE) $(MFLAGS) depend; \
	$(MAKE) $(MFLAGS))

$(XF86_8514SERVERNAME): $(XF86_8514DIRS) \
	$(XF86_8514OBJS) $(XF86_8514LIBS)
	-@if [ -f $(XF86_8514SERVERNAME) ]; then set -x; \
	$(MV) $(XF86_8514SERVERNAME) $(XF86_8514SERVERNAME).bak; else exit 0; fi
	$(CC) $(ANSICCOPTIONS) $(CDEBUGFLAGS) $(CCOPTIONS) -o $(XF86_8514SERVERNAME) \
	$(XF86_8514OBJS) $(XF86_8514LIBS) $(EXTRA_LIBRARIES) $(SYSLIBS) $(EXTRA_LOAD_FLAGS)

load$(XF86_8514SERVERNAME):
	-@if [ -f $(XF86_8514SERVERNAME) ]; then set -x; \
	$(MV) $(XF86_8514SERVERNAME) $(XF86_8514SERVERNAME).bak; else exit 0; fi
	$(CC) $(ANSICCOPTIONS) $(CDEBUGFLAGS) $(CCOPTIONS) -o $(XF86_8514SERVERNAME) \
	$(XF86_8514OBJS) $(XF86_8514LIBS) $(EXTRA_LIBRARIES) $(SYSLIBS) $(EXTRA_LOAD_FLAGS)

install:: $(XF86_8514SERVERNAME)
	@if [ -d $(DESTDIR)$(BINDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(BINDIR)); fi
	@case '${MFLAGS}' in *[i]*) set +e;; esac; \
	for i in $(XF86_8514SERVERNAME); do \
	(set -x; $(INSTALL) -c $(INSTPGMFLAGS) $$i $(DESTDIR)$(BINDIR)); \
	done

clean::
	$(RM) $(XF86_8514SERVERNAME)

#
# XFree86 Mach8 server
#

MACH8SPECIALOBJS = ddx/x386/common/x386Init.o dix/dixfonts.o ddx/mi/mibitblt.o
   XF86MACH8LIBS = ddx/x386/accel/mach8/libmach8.a $(DIX) $(OS) $(FONT) $(CFB) $(MFB) $(MI) $(EXTENSIONS)

       SUBDIRS1 = ddx/mfb
       SUBDIRS2 = ddx/cfb

 XF86_Mach8SERVERNAME = XF86_Mach8
 XF86_Mach8FBDIRS = ddx/mfb ddx/cfb
 XF86_Mach8SUBDIRS = $(SUBDIRS0) $(XF86_Mach8FBDIRS)
 XF86_Mach8DIRS = $(XF86_Mach8SUBDIRS) $(DEPDIRS)
 XF86_Mach8CONFOBJ = ddx/x386/common/XF86_Mach8.o
 XF86_Mach8OBJS = $(XF86_Mach8CONFOBJ) $(MACH8SPECIALOBJS) $(XF86COMMONOBJ)
 XF86_Mach8LIBS = $(XF86COMMONLIB) $(XF86MACH8LIBS) \
 $(XF86HWLIB) $(XF86OSLIB) \
 $(XF86SYSLIBS)

xf86all:: $(XF86_Mach8SERVERNAME)

reload$(XF86_Mach8SERVERNAME): $(CONFIGSRC)/X386Conf.tmpl
	@$(MAKE) $(MFLAGS) Makefile
	@$(MAKE) $(MFLAGS) DoReload$(XF86_Mach8SERVERNAME)

DoReload$(XF86_Mach8SERVERNAME): $(XF86_Mach8CONFOBJ) \
	$(XF86COMMONOBJ) $(RENDERERLIBS) \
	load$(XF86_Mach8SERVERNAME)

$(XF86_Mach8CONFOBJ): $(ICONFIGFILES)
	@(echo Checking in ddx/x386/common...; \
	cd ddx/x386/common; set -x; \
	$(MAKE) $(MFLAGS) Makefile; \
	$(MAKE) $(MFLAGS) depend; \
	$(MAKE) $(MFLAGS))

$(XF86_Mach8SERVERNAME): $(XF86_Mach8DIRS) \
	$(XF86_Mach8OBJS) $(XF86_Mach8LIBS)
	-@if [ -f $(XF86_Mach8SERVERNAME) ]; then set -x; \
	$(MV) $(XF86_Mach8SERVERNAME) $(XF86_Mach8SERVERNAME).bak; else exit 0; fi
	$(CC) $(ANSICCOPTIONS) $(CDEBUGFLAGS) $(CCOPTIONS) -o $(XF86_Mach8SERVERNAME) \
	$(XF86_Mach8OBJS) $(XF86_Mach8LIBS) $(EXTRA_LIBRARIES) $(SYSLIBS) $(EXTRA_LOAD_FLAGS)

load$(XF86_Mach8SERVERNAME):
	-@if [ -f $(XF86_Mach8SERVERNAME) ]; then set -x; \
	$(MV) $(XF86_Mach8SERVERNAME) $(XF86_Mach8SERVERNAME).bak; else exit 0; fi
	$(CC) $(ANSICCOPTIONS) $(CDEBUGFLAGS) $(CCOPTIONS) -o $(XF86_Mach8SERVERNAME) \
	$(XF86_Mach8OBJS) $(XF86_Mach8LIBS) $(EXTRA_LIBRARIES) $(SYSLIBS) $(EXTRA_LOAD_FLAGS)

install:: $(XF86_Mach8SERVERNAME)
	@if [ -d $(DESTDIR)$(BINDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(BINDIR)); fi
	@case '${MFLAGS}' in *[i]*) set +e;; esac; \
	for i in $(XF86_Mach8SERVERNAME); do \
	(set -x; $(INSTALL) -c $(INSTPGMFLAGS) $$i $(DESTDIR)$(BINDIR)); \
	done

clean::
	$(RM) $(XF86_Mach8SERVERNAME)

#
# XFree86 Mach32 server
#

MACH32SPECIALOBJS = ddx/x386/common/x386Init.o dix/dixfonts.o ddx/mi/mibitblt.o
   XF86MACH32LIBS = ddx/x386/accel/mach32/libmach32.a $(DIX) $(OS) $(FONT) $(CFB) $(MFB) $(MI) $(EXTENSIONS)

       SUBDIRS1 = ddx/mfb
       SUBDIRS2 = ddx/cfb

 XF86_Mach32SERVERNAME = XF86_Mach32
 XF86_Mach32FBDIRS = ddx/mfb ddx/cfb
 XF86_Mach32SUBDIRS = $(SUBDIRS0) $(XF86_Mach32FBDIRS)
 XF86_Mach32DIRS = $(XF86_Mach32SUBDIRS) $(DEPDIRS)
 XF86_Mach32CONFOBJ = ddx/x386/common/XF86_Mach32.o
 XF86_Mach32OBJS = $(XF86_Mach32CONFOBJ) $(MACH32SPECIALOBJS) $(XF86COMMONOBJ)
 XF86_Mach32LIBS = $(XF86COMMONLIB) $(XF86MACH32LIBS) \
 $(XF86HWLIB) $(XF86OSLIB) \
 $(XF86SYSLIBS)

xf86all:: $(XF86_Mach32SERVERNAME)

reload$(XF86_Mach32SERVERNAME): $(CONFIGSRC)/X386Conf.tmpl
	@$(MAKE) $(MFLAGS) Makefile
	@$(MAKE) $(MFLAGS) DoReload$(XF86_Mach32SERVERNAME)

DoReload$(XF86_Mach32SERVERNAME): $(XF86_Mach32CONFOBJ) \
	$(XF86COMMONOBJ) $(RENDERERLIBS) \
	load$(XF86_Mach32SERVERNAME)

$(XF86_Mach32CONFOBJ): $(ICONFIGFILES)
	@(echo Checking in ddx/x386/common...; \
	cd ddx/x386/common; set -x; \
	$(MAKE) $(MFLAGS) Makefile; \
	$(MAKE) $(MFLAGS) depend; \
	$(MAKE) $(MFLAGS))

$(XF86_Mach32SERVERNAME): $(XF86_Mach32DIRS) \
	$(XF86_Mach32OBJS) $(XF86_Mach32LIBS)
	-@if [ -f $(XF86_Mach32SERVERNAME) ]; then set -x; \
	$(MV) $(XF86_Mach32SERVERNAME) $(XF86_Mach32SERVERNAME).bak; else exit 0; fi
	$(CC) $(ANSICCOPTIONS) $(CDEBUGFLAGS) $(CCOPTIONS) -o $(XF86_Mach32SERVERNAME) \
	$(XF86_Mach32OBJS) $(XF86_Mach32LIBS) $(EXTRA_LIBRARIES) $(SYSLIBS) $(EXTRA_LOAD_FLAGS)

load$(XF86_Mach32SERVERNAME):
	-@if [ -f $(XF86_Mach32SERVERNAME) ]; then set -x; \
	$(MV) $(XF86_Mach32SERVERNAME) $(XF86_Mach32SERVERNAME).bak; else exit 0; fi
	$(CC) $(ANSICCOPTIONS) $(CDEBUGFLAGS) $(CCOPTIONS) -o $(XF86_Mach32SERVERNAME) \
	$(XF86_Mach32OBJS) $(XF86_Mach32LIBS) $(EXTRA_LIBRARIES) $(SYSLIBS) $(EXTRA_LOAD_FLAGS)

install:: $(XF86_Mach32SERVERNAME)
	@if [ -d $(DESTDIR)$(BINDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(BINDIR)); fi
	@case '${MFLAGS}' in *[i]*) set +e;; esac; \
	for i in $(XF86_Mach32SERVERNAME); do \
	(set -x; $(INSTALL) -c $(INSTPGMFLAGS) $$i $(DESTDIR)$(BINDIR)); \
	done

clean::
	$(RM) $(XF86_Mach32SERVERNAME)

install::
	-(cd $(DESTDIR)$(BINDIR); $(RM) X; $(LN) $(XF86DEFSERVER) X)

SUBDIRS = $(SUBDIRS0) $(SUBDIRS1) $(SUBDIRS2) $(SUBDIRS3)

depend::
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) ;\
	do \
	(cd $$i ; echo "depending" "in $(CURRENT_DIR)/$$i..."; \
	$(MAKE) $(MFLAGS)  depend); \
	done

lintlib::
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) ;\
	do \
	(cd $$i ; echo "linting" for lintlib and lintlib "in $(CURRENT_DIR)/$$i..."; \
	$(MAKE) $(MFLAGS) DESTDIR='$(DESTDIR)' LINTOPTS='$(LINTOPTS)' lintlib); \
	done

lint::
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) ;\
	do \
	(cd $$i ; echo "linting" for lint and lint "in $(CURRENT_DIR)/$$i..."; \
	$(MAKE) $(MFLAGS) DESTDIR='$(DESTDIR)' LINTOPTS='$(LINTOPTS)' lint); \
	done

$(DEPDIRS) $(SUBDIRS): FRC
	@cd $@ ; echo "making all in $(CURRENT_DIR)/$@..."; \
	$(MAKE) $(MFLAGS) 'CDEBUGFLAGS=$(CDEBUGFLAGS)' 'CC=$(CC)' 'CCOPTIONS=$(CCOPTIONS)' 'ANSICCOPTIONS=$(ANSICCOPTIONS)' all

FRC:

install.man:: Xserver.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) Xserver.man $(DESTDIR)$(MANDIR)/Xserver.$(MANSUFFIX)

# -------------------------------------------------------------------------
# common rules for all Makefiles - do not edit

emptyrule::

clean::
	$(RM_CMD) "#"*

Makefile:: $(IMAKE)

$(IMAKE):
	@(cd $(IMAKESRC); if [ -f Makefile ]; then \
	echo "checking $@ in $(IMAKESRC) first..."; $(MAKE) all; else \
	echo "bootstrapping $@ from Makefile.ini in $(IMAKESRC) first..."; \
	$(MAKE) -f Makefile.ini BOOTSTRAPCFLAGS="$(BOOTSTRAPCFLAGS)"; fi; \
	echo "okay, continuing in $(CURRENT_DIR)")

Makefile::
	-@if [ -f Makefile ]; then set -x; \
	$(RM) Makefile.bak; $(MV) Makefile Makefile.bak; \
	else exit 0; fi
	$(IMAKE_CMD) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT_DIR)

tags::
	$(TAGS) -w *.[ch]
	$(TAGS) -xw *.[ch] > TAGS

# -------------------------------------------------------------------------
# rules for building in SUBDIRS - do not edit

install::
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) ;\
	do \
	(cd $$i ; echo "installing" "in $(CURRENT_DIR)/$$i..."; \
	$(MAKE) $(MFLAGS) DESTDIR='$(DESTDIR)' install); \
	done

install.man::
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) ;\
	do \
	(cd $$i ; echo "installing man pages" "in $(CURRENT_DIR)/$$i..."; \
	$(MAKE) $(MFLAGS) DESTDIR='$(DESTDIR)' install.man); \
	done

install.linkkit::
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) ;\
	do \
	(cd $$i ; echo "installing link kit" "in $(CURRENT_DIR)/$$i..."; \
	$(MAKE) $(MFLAGS) DESTDIR='$(DESTDIR)' install.linkkit); \
	done

clean::
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) ;\
	do \
	(cd $$i ; echo "cleaning" "in $(CURRENT_DIR)/$$i..."; \
	$(MAKE) $(MFLAGS) RM_CMD='$(RM_CMD)' clean); \
	done

tags::
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) ;\
	do \
	(cd $$i ; echo "tagging" "in $(CURRENT_DIR)/$$i..."; \
	$(MAKE) $(MFLAGS) TAGS='$(TAGS)' tags); \
	done

Makefiles::
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) ;\
	do \
	echo "making Makefiles in $(CURRENT_DIR)/$$i..."; \
	case "$$i" in \
	./?*/?*/?*/?*) newtop=../../../../ sub=subsubsubsub;; \
	./?*/?*/?*) newtop=../../../ sub=subsubsub;; \
	./?*/?*) newtop=../../ sub=subsub;; \
	./?*) newtop=../ sub=sub;; \
	*/?*/?*/?*) newtop=../../../../ sub=subsubsubsub;; \
	*/?*/?*) newtop=../../../ sub=subsubsub;; \
	*/?*) newtop=../../ sub=subsub;; \
	*) newtop=../ sub=sub;; \
	esac; \
	case "$(TOP)" in \
	/?*) newtop= upprefix= ;; \
	*) upprefix=../ ;; \
	esac; \
	$(MAKE) $${sub}dirMakefiles UPPREFIX=$$upprefix NEWTOP=$$newtop \
	MAKEFILE_SUBDIR=$$i NEW_CURRENT_DIR=$(CURRENT_DIR)/$$i;\
	done

subdirMakefiles:
	$(RM) $(MAKEFILE_SUBDIR)/Makefile.bak
	-@if [ -f $(MAKEFILE_SUBDIR)/Makefile ]; then set -x; \
	$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak; \
	else exit 0; fi
	cd $(MAKEFILE_SUBDIR); $(IMAKE_CMD) -DTOPDIR=$(UPPREFIX)$(TOP) -DCURDIR=$(NEW_CURRENT_DIR); \
	$(MAKE) $(MFLAGS) Makefiles

subsubdirMakefiles:
	$(RM) $(MAKEFILE_SUBDIR)/Makefile.bak
	-@if [ -f $(MAKEFILE_SUBDIR)/Makefile ]; then set -x; \
	$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak; \
	else exit 0; fi
	cd $(MAKEFILE_SUBDIR); $(IMAKE_CMD) -DTOPDIR=$(UPPREFIX)$(UPPREFIX)$(TOP) -DCURDIR=$(NEW_CURRENT_DIR); \
	$(MAKE) $(MFLAGS) Makefiles

subsubsubdirMakefiles:
	$(RM) $(MAKEFILE_SUBDIR)/Makefile.bak
	-@if [ -f $(MAKEFILE_SUBDIR)/Makefile ]; then set -x; \
	$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak; \
	else exit 0; fi
	cd $(MAKEFILE_SUBDIR); $(IMAKE_CMD) -DTOPDIR=$(UPPREFIX)$(UPPREFIX)$(UPPREFIX)$(TOP) -DCURDIR=$(NEW_CURRENT_DIR); \
	$(MAKE) $(MFLAGS) Makefiles

subsubsubsubdirMakefiles:
	$(RM) $(MAKEFILE_SUBDIR)/Makefile.bak
	-@if [ -f $(MAKEFILE_SUBDIR)/Makefile ]; then set -x; \
	$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak; \
	else exit 0; fi
	cd $(MAKEFILE_SUBDIR); $(IMAKE_CMD) -DTOPDIR=$(UPPREFIX)$(UPPREFIX)$(UPPREFIX)$(UPPREFIX)$(TOP) -DCURDIR=$(NEW_CURRENT_DIR); \
	$(MAKE) $(MFLAGS) Makefiles

includes::
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) ;\
	do \
	(cd $$i ; echo including "in $(CURRENT_DIR)/$$i..."; \
	$(MAKE) $(MFLAGS)  includes); \
	done

# -------------------------------------------------------------------------
# dependencies generated by makedepend

