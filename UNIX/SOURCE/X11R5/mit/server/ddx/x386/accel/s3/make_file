# 1 "/cdcopy/SOURCE/X11R5/mit/config//Imake.tmpl"
/*
 * generic imake template
 */


#define XCOMM #

#  -------------------------------------------------------------------------
#  Makefile generated from IMAKE_TEMPLATE and INCLUDE_IMAKEFILE
#  $XFree86: mit/config/Imake.tmpl,v 2.6 1993/10/02 07:11:59 dawes Exp $
#  $XConsortium: Imake.tmpl,v 1.139 91/09/16 08:52:48 rws Exp $
# 
#  Platform-specific parameters may be set in the appropriate <vendor>.cf
#  configuration files.  Site-specific parameters should be set in the file
#  site.def.  Full rebuilds are recommended if any parameters are changed.
# 
#  If your C preprocessor does not define any unique symbols, you will need
#  to set BOOTSTRAPCFLAGS when rebuilding imake (usually when doing
#  "make World" the first time).
# 

#define	YES	1
#define NO	0


/*
 * To add support for another platform:
 * 
 *     1.  Identify a machine-specific cpp symbol.  If your preprocessor 
 *         does not have any built in, you will need to add the symbol to the
 *         cpp_argv table in config/imakemdep.h and rebuild imake with the
 *         BOOTSTRAPCFLAGS variable set (see the macII for an example).
 *
 *     2.  Add all machine-specific cpp symbols (either defined by you or by
 *         the preprocessor or compiler) to the predefs table in 
 *         config/imakemdep.h.
 *
 *     3.  But a new #ifdef block below that defines MacroIncludeFile and
 *         MacroFile for your new platform and then #undefs the machine-
 *         specific preprocessor symbols (to avoid problems with file names).
 *
 *     4.  Create a .cf file with the name given by MacroFile.
 */


#define INCLUDE_PLATFORM <noop.rules>

# 1 "/cdcopy/SOURCE/X11R5/mit/config//noop.rules" 1
# 48 "/cdcopy/SOURCE/X11R5/mit/config//Imake.tmpl" 2



/* If INCLUDE_PLATFORM was included, both MacroFile and MacroIncludeFile
 * will already be defined.
 */

# 68 "/cdcopy/SOURCE/X11R5/mit/config//Imake.tmpl"





































# 125 "/cdcopy/SOURCE/X11R5/mit/config//Imake.tmpl"















































# 195 "/cdcopy/SOURCE/X11R5/mit/config//Imake.tmpl"


# 208 "/cdcopy/SOURCE/X11R5/mit/config//Imake.tmpl"


# 219 "/cdcopy/SOURCE/X11R5/mit/config//Imake.tmpl"


# 231 "/cdcopy/SOURCE/X11R5/mit/config//Imake.tmpl"



#define MacroIncludeFile <x386.cf>
#define MacroFile x386.cf



#define i386SVR4Architecture




# 284 "/cdcopy/SOURCE/X11R5/mit/config//Imake.tmpl"



# 303 "/cdcopy/SOURCE/X11R5/mit/config//Imake.tmpl"


# 314 "/cdcopy/SOURCE/X11R5/mit/config//Imake.tmpl"
































# 357 "/cdcopy/SOURCE/X11R5/mit/config//Imake.tmpl"











/*****************************************************************************
 *                                                                           *
 *                       DO NOT MODIFY BELOW THIS LINE                       *
 *                                                                           *
 *****************************************************************************/


#  -------------------------------------------------------------------------
#  site-specific configuration parameters that need to come before
#  the platform-specific parameters - edit site.def to change
#define BeforeVendorCF
# 1 "/cdcopy/SOURCE/X11R5/mit/config//site.def" 1
#  $XFree86: mit/config/site.def,v 2.23 1993/10/16 17:28:07 dawes Exp $
#  site:  $XConsortium: site.def,v 1.2 91/07/30 20:26:44 rws Exp $

/*****************************************************************************
 *                                                                           *
 *			   SITE-SPECIFIC DEFINITIONS                         *
 *                                                                           *
 * This file contains two halves, one included before the vendor-specific    *
 * configuration file (.cf file), and one included after the .cf file.       *
 * The before-half should be protected by #ifdef BeforeVendorCF, and the     *
 * after-half should be protected by #ifdef AfterVendorCF.                   *
 *                                                                           *
 * The before-half should only set things that the .cf file depends on.      *
 * For the .cf files shipped in this release, the main variable in this      *
 * category is HasGcc.                                                       *
 *                                                                           *
 * The after-half should contain all other definitions.  For example,        *
 * place your ProjectRoot definition here.  Beware that several of the       *
 * .cf files supplied by vendors have a ProjectRoot already defined, so      *
 * you may need to #undef it first.                                          *
 *                                                                           *
 * OS Major and Minor version numbers should be changed directly in the .cf  *
 * file, not overridden in site.def.                                         *
 *                                                                           *
 *****************************************************************************/










#define DefaultCDebugFlags -O3 -g
#define ServerCDebugFlags -O3 -g

#define CppCmd 			/opt/bin/cpp
#define OSMinorVersion 2	
#define OSName			Unix System V/386 Release 4.2
#define OSDefines
#define OSRelease		
#define OSVendor Consensys Corp.

/*****************************************************************************
 *                                                                           *
 * Make/Build parameters                                                     *
 *                                                                           *
 *****************************************************************************/

/*
 * If you are using ISC's original make (which has a hash table bug),
 * uncomment this. You will not get dependencies as a result in
 * mit/lib/X, but better then nothing. (Using GNU make instead is recommended.)
 */
/* #define MakeHashTableBug YES */

/*
 * To build normal libraries in addition to shared libraries uncomment this
 *	defaults:
 *		SVR4:		NO
 *		SVR3:		YES
 *		Linux:		YES
 */
/* #define ForceNormalLib	YES */

/*
 * HasLibCrypt: If your system uses a separate libcrypt.a, uncomment this.
 *	    defaults:
 *		NetBsd, FreeBsd YES
 *		others:		NO
 */
/* #define HasLibCrypt		YES */

/*****************************************************************************
 *                                                                           *
 * Compiler parameters                                                       *
 *                                                                           *
 *****************************************************************************/

/*
 * HasGcc: defaults:
 *		SVR3,4:		YES
 *		NCR:		NO
 *		Mach, 386bsd:	YES
 *		linux:		YES
 */
/* #define HasGcc 		NO */

/*
 * HasGcc2: (should also set HasGcc)
 *	    defaults:
 *		SVR3,4:		YES
 *		NCR:		NO
 *		Mach, 386bsd:	NO
 *		NetBSD, FreeBSD YES
 *		linux:		YES
 */
/* #define HasGcc2		NO */

/*
 * GccUsesGas: Required if your gcc uses gas as its assembler.
 *          defaults:
 *		SVR3,4		NO
 *		Mach, 386bsd:	YES
 *		linux:		YES
 */
/* #define GccUsesGas	YES */

/*
 * UseGas: Required if you use gas as your assembler.
 *          defaults:
 *		SVR3,4		NO
 *		Mach, 386bsd:	YES
 *		linux:		YES
 */
/* #define UseGas		YES */

/*
 * GnuCpp:
 *	    defaults:
 *		SVR3,4:		NO
 *		Mach:		NO
 *		386bsd:		YES
 *		linux:		YES
 */
/* #define GnuCpp		YES */

/*
 * If you are building for a 386 you can uncomment this.  It is not
 * necessary that you do this because the -m486 compiled binaries run
 * without performance loss on a 386 CPU.  This option is only used
 * when using gcc-2.x
 */
/* #define Target_486	NO */

/*****************************************************************************
 *                                                                           *
 * Networking parameters                                                     *
 *                                                                           *
 *****************************************************************************/

/* If you don't want to include SCO's Xsight connection code for SVR4,
 * uncomment this (all SVR4's should be able to compile this).
 * Note: you must have SVR4.0.4 or later, with the 'Advanced Compatibility
 * Package' (iBSC-2 compatibility) to make use of this feature. 
 */
#define SCOLocalConnSysv4 NO

/* If you don't have sockets, uncomment this */
/* #define HasSockets	NO */

/*****************************************************************************
 *                                                                           *
 * Other compile-time parameters                                             *
 *                                                                           *
 *****************************************************************************/

/*
 * HasShadowPasswd: Required if your system uses shadow passwords.
 *          defaults:
 *		SVR3,4:		YES
 *		Mach, 386bsd:	NO
 *		linux:		NO
 */
/* #define HasShadowPasswd	NO */

/*
 * If you are not using GNU dbm, sdbm or SVR4's ndbm, uncomment this.
 *          defaults:
 *		ISC:		NO
 *		others:		YES
 */
/* #define HasNdbm		NO */

/*
 * HasSdbm: Required if you are using libsdbm.a  (HasNdbm should also be set)
 *	    defaults:
 *		SVR3,4:		YES
 *		ISC:		NO
 *		Mach, 386bsd:	NO
 *		linux:		NO
 */
#define HasSdbm			NO

/*****************************************************************************
 *                                                                           *
 * Select features to be built/not built                                     *
 *                                                                           *
 *****************************************************************************/

/* You need the DES stuff from MIT to use this */
/* #define HasXdmAuth	YES */

/* To exclude XTEST support, uncomment the following */
/* #define BuildXTest	NO */

/* Do you *really* want PEX? */
/* #define BuildPex	YES */

/*****************************************************************************
 *                                                                           *
 * Font-related parameters                                                   *
 *                                                                           *
 *****************************************************************************/

/* To build the Font Server, uncomment the following */
#define BuildFontServer	YES

/* Usually only want to build fonts once */
#define BuildFonts	YES

/* If you don't want to compress pcf fonts, uncomment this */
/* #define CompressAllFonts	NO */

/* If you want to build 100dpi fonts, uncomment this */
/* #define Build100Dpi	YES */

/* If you don't want to build 75dpi fonts, uncomment this */
/* #define Build75Dpi	NO */

/* If you want to build the k14, jiskan, hanglg fonts, uncomment this */
/* #define BuildLargeMiscFonts	YES */

/* If you want Type1 code included */

#define BuildType1	YES


/* If you don't want to build Speedo fonts, uncomment this */
/* #define BuildSpeedo	NO */

/*
 * Select Font Renderers to include.  This overrides BuildType1 and 
 * BuildSpeedo above - it's best to leave this alone and use the above
 * defines unless you are adding a custom font renderer.
 *
 * Default: Speedo
 */
/* #define FontRenderers	Speedo */

/*****************************************************************************
 *                                                                           *
 * Server-related parameters                                                 *
 *                                                                           *
 *****************************************************************************/

/* Uncomment this if you don't want to build the server */
/* #define BuildServer	NO */

/* Change YES to NO for servers you don't want to build */

/* Build the 256 colour SVGA server */
#define XF86SVGAServer		YES

/* Build the 16 colour server */
#define XF86VGA16Server		YES

/* Build the monochrome server */
#define XF86MonoServer		YES

/* Build the S3 server */
#define XF86S3Server		YES

/* Build the 8514/A server */
#define XF86I8514Server		YES

/* Build the Mach8 server */
#define XF86Mach8Server		YES

/* Build the Mach32 server */
#define XF86Mach32Server	YES

/* Set the default server (ie the one that gets the sym-link to "X") */
/* #define XFree86DefaultServer	XF86_S3 */

/*
 * Select drivers in 256-colour server
 *
 * Default: et4000 et3000 pvga1 gvga ati tvga8900 cirrus ncr compaq
 */
/* #define X386Vga256Drivers	et4000 et3000 pvga1 gvga ati tvga8900 cirrus \
				ncr oak compaq */
/*
 * Select drivers in 16-colour server
 *
 * Default: et4000 generic
 */
/* #define X386Vga16Drivers	et4000 generic */

/*
 * Select (S)VGA drivers in monochrome server
 *
 * Default: et4000 et3000 pvga1 gvga tvga8900 ncr compaq generic
 */
/* #define X386Vga2Drivers	et4000 et3000 pvga1 gvga tvga8900 ncr \
				compaq oak generic */
/*
 * To include the Hercules driver in the monochrome server, uncomment this:
 */
/* #define X386Hga2Drivers		hga6845 */

/*
 * To include the generic banked monochrome driver in the monochrome server,
 * uncomment this with one of the following low level drivers
 * 	hgc1280		[Hyundai HGC-1280 1280x1024]
 *	...
 *	(list is subject to grow)
 */
/* #define X386Bdm2Drivers		hgc1280 */

/*
 * Select drivers in the accelerated S3 server
 */
#define XF86S3Drivers		mmio_928 s3_generic

/* Uncomment this to include support for SVR3 mmap driver */
/* #define HasSVR3mmapDrv	YES */

/* Uncomment this if you want to build a debuggable server */
/* #define DebuggableServer	YES */

/* Uncomment this if you are using Conor Cahill's debugging malloc library */
/* #define SpecialMalloc	YES */

/* Uncomment this if you want to link with the Gnu malloc library */
/* #define GnuMalloc		YES */

/*
 * GnuMallocLib: link-time flags to include the Gnu malloc library.
 * this is only used when GnuMalloc is set to YES.
 *	    defaults:
 *		386bsd:		-lgnumalloc
 *		others:		-lgmalloc
 */
/* #define GnuMallocLib		-L/usr/local/gnu -lmalloc */

/*
 * Set this to disable blanking the screen during startup (can be useful
 * for debugging)
 */
/* #define DirtyStartup	YES */

/*****************************************************************************
 *                                                                           *
 * Client-related parameters                                                 *
 *                                                                           *
 *****************************************************************************/

/*
 * Set logging parameters for xterm.  By default, logging is off because of
 * security problems.  It can be turned on with -DALLOWLOGGING, and security
 * can (hopefully) be improved with -DFORKFORLOGFILE.
 */

#define XtermLogFlags		-DALLOWLOGGING -DFORKFORLOGFILE

/*****************************************************************************
 *                                                                           *
 * Installation-related parameters                                           *
 *                                                                           *
 *****************************************************************************/

/*
 * Enable these if you want to automatically install these config files
 * Be careful of overwriting customised files
 */
/*
#define InstallXdmConfig YES
#define InstallXinitConfig YES
#define InstallFSConfig YES
*/

/*****************************************************************************
 *                                                                           *
 * Manual page parameters                                                    *
 *                                                                           *
 *****************************************************************************/

/*
 * Only for SVR3, 386BSD, FreeBSD and NetBSD.
 * FormattedManPages: To install unformatted man pages, set this to NO.
 *	    defaults:
 *		SVR3:		YES
 *		FreeBSD:	NO
 *		other BSD	YES
 */
/* #define FormattedManPages NO */

/*
 * The default man page installation paramters have been moved to x386.cf
 * and may be overriden here.  Note that these are ignored for preformatted
 * man pages on *BSD -- where all suffices are '0'.
 *
 *	    defaults:		ManSuffix	LibManSuffix	FileManSuffix
 *	        SVR3,4:		   1x    	    3x      	      4
 *	        others:		   1x    	    3x      	      5x
 */

/*
 * Only for SVR3:
 * Remove obsolete .DE and .DS macros from manual pages
 *	defaults:
 *		ISC 2.2, 3.0:	YES
 *		SVR3:		NO
 */
/* #define RemoveDSDENroffMacros YES */

/* Only for SVR3:
 * Compress installed manual pages
 *	defaults:
 *		ISC, SCO:	YES
 *		SVR3:		NO
 */
/* #define CompressManPages YES */

/*
 * If you compress the manual pages and want to use gzip, uncomment this.
 * Use the first line if you are using gzip version 1.0.7 or earlier, and
 * the second for gzip 1.1 or later.
 *	default:	compress -v
 */
/* #define CompressManCmd	gzip -v */
/* #define CompressManCmd	gzip -v --suffix .z */

/* If you don't like the 'x' at the end, uncomment these: */
/* #define ManSuffix		1 */
/* #define LibManSuffix		3 */
/* #define FileManSuffix	5  */



# 458 "/cdcopy/SOURCE/X11R5/mit/config//site.def"

# 379 "/cdcopy/SOURCE/X11R5/mit/config//Imake.tmpl" 2



#  -------------------------------------------------------------------------
#  platform-specific configuration parameters - edit x386.cf  to change
# 1 "/cdcopy/SOURCE/X11R5/mit/config//x386.cf" 1
#  $XFree86: mit/config/x386.cf,v 2.28 1993/10/21 15:48:52 dawes Exp $
#  platform:  $XConsortium: x386.cf,v 1.7 91/08/16 19:30:10 gildea Exp $

/*****************************************************************************
 *	            Defaults for Site-specfic parameters                     *
 *****************************************************************************/
/*****************************************************************************
 *                        Do not change anything below                       *
 *****************************************************************************/


/*
 * If you want to change any of these, do it in the BeforeVendorCF part
 * of site.def
 */

# 1 "/cdcopy/SOURCE/X11R5/mit/config//xf86_vers.def" 1
#  -------------------------------------------------------------------------
#  XFree86 version definition
#  $XFree86: mit/config/xf86_vers.def,v 2.7 1993/10/08 16:11:07 dawes Exp $


#define XFree86Version 2000



#define XVendorString "XFree86"



#define XVendorRelease XFree86Version


#  -------------------------------------------------------------------------
#  XFree86 version: 2000 
#  -------------------------------------------------------------------------

# 17 "/cdcopy/SOURCE/X11R5/mit/config//x386.cf" 2


#define WantServerLocks		YES
#define PartialNetDefault	YES

/* Defaults for SVR3, SVR4 */






#define HasGcc		YES






#define HasGcc2		YES



#define GccUsesGas		NO


#define UseGas		NO


#define GnuCpp		NO












#define HasNdbm		YES



#define HasShadowPasswd	YES


#define HasLibCrypt		NO









#define HasSVR3mmapDrv		NO




#define SVR3mmapFlags 		

/* Note: this flag has no effect for SVR4 */




#define FormattedManPages	NO



#define FileManSuffix	4


#define FileManDir	$(MANSOURCEPATH)4



/* Defaults for BSD-like systems */

# 152 "/cdcopy/SOURCE/X11R5/mit/config//x386.cf"


/* Defaults for Linux and OSF/1 */

# 191 "/cdcopy/SOURCE/X11R5/mit/config//x386.cf"


/* Defaults which are the same for all systems */


#define X386LinkKit		NO


#define HasSockets		YES


#define ProjectRoot		/usr/X386


#define StripInstalledPrograms	YES


#define BuildXTest		YES


#define XTestDefines		-DXTEST




#define ExtensionOSDefines	-DXTESTEXT1 XTestDefines


#define MotifBC	       	YES


#define Target_486		YES


#define CompressAllFonts	YES


#define Build75Dpi		YES


#define Build100Dpi		NO


#define BuildLargeMiscFonts	NO


#define BuildSpeedo		YES


#define BuildPex		NO





#define DebuggableServer	NO


#define SpecialMalloc		NO


#define GnuMalloc		NO





#define LinkKitFlags		



/* Some of these man page defaults are overriden in the above OS sections */


#define ManSuffix	1x


#define ManDir	$(MANSOURCEPATH)1


#define LibManSuffix	3x


#define LibmanDir	$(MANSOURCEPATH)3






































#define XF86S3Dir		s3





#define XF86I8514Dir		ibm8514





#define XF86Mach8Dir		mach8





#define XF86Mach32Dir		mach32





#define XF86AccelServerDirs   XF86S3Dir XF86I8514Dir XF86Mach8Dir XF86Mach32Dir



#define XF86AccelServer	YES






#define XFree86DefaultServer XF86_SVGA














#define X386Vga256Drivers	et4000 et3000 pvga1 gvga ati tvga8900 cirrus ncr compaq oak




#define X386Vga16Drivers	et4000 generic



#define X386Vga2Drivers	et4000 et3000 pvga1 gvga tvga8900 ncr compaq oak generic




#define X386Hga2Drivers	



#define X386Bdm2Drivers	







#define DirtyStartup		NO



#define BankedMonoVga		YES



#define MonoDefines		-DX386MONOVGA -DBANKEDMONOVGA





#define ScoOsMouse		YES


/* You must manually compute BootstrapCFlags for initial build */


#define BootstrapCFlags	OSDefines OSRelease





#define StandardDefines		OSDefines OSRelease




#define LdCombineFlags		-r




#define Gcc2MOption -m486







#define GccGasOption 






#define AsmDefines 






#define StandardCppDefines StandardDefines










#define MallocFlags		


# 469 "/cdcopy/SOURCE/X11R5/mit/config//x386.cf"


#define GnuMallocLib		











#define AssembleObject(flags) $(RM) $@                                  @@	$(CPP) AsmDefines $(INCLUDES) flags $*.s > $*.i                 @@	$(AS) -o $*.o $*.i                                              @@	$(RM) $*.i





#define NormalAsmObjectRule()                                           @@.s.o:                                                                   @@	AssembleObject($(_NOOP_))



#define ObjectFromSpecialAsmSource(dst,src,flags)                       @@dst.s:  src.s                                                           @@	$(RM) $@                                                        @@	$(LN) $? $@                                                     @@ @@dst.o:  dst.s                                                           @@	AssembleObject(flags)                                           @@ @@depend:: dst.s                                                          @@ @@clean::                                                                 @@	$(RM) dst.s
# 505 "/cdcopy/SOURCE/X11R5/mit/config//x386.cf"


/*
 * Rules for building config files from scripts
 */


#define Depend depend

 
#define ConfigTargetLong(target,dep,script,args,extra)                  @@all:: Configure                                                         @@ @@Configure:: target.o                                                    @@ @@target.c: script dep                                                    @@	$(MAKE) $(MFLAGS) Makefile                                      @@	$(MAKE) $(MFLAGS) extra Concat(Build,target)                    @@ @@Concat(Build,target):                                                   @@	$(RM) target.c                                                  @@	$(SHELL) script args                                            @@ @@clean::                                                                 @@	$(RM) target.c
# 530 "/cdcopy/SOURCE/X11R5/mit/config//x386.cf"

#define ConfigTarget(target,dep,script,args) ConfigTargetLong(target,dep,script,args,Depend)

#define ConfigTargetNoDepend(target,dep,script,args) ConfigTargetLong(target,dep,script,args,)


/*
 * Rules for installing LinkKit parts (target is install.linkkit)
 */

#define InstallLinkKitNonExecFile(file,dest)				@@install.linkkit:: file							@@	MakeDir($(DESTDIR)dest)						@@	$(INSTALL) -c $(INSTDATFLAGS) file $(DESTDIR)dest




#define InstallLinkKitLibrary(libname,dest)				@@install.linkkit:: Concat(lib,libname.a)					@@	MakeDir($(DESTDIR)dest)						@@	$(INSTALL) -c $(INSTLIBFLAGS) Concat(lib,libname.a) $(DESTDIR)dest @@	RanLibrary($(RANLIBINSTFLAGS) Concat($(DESTDIR)dest/lib,libname.a))





#define InstallLinkKitNamedNonExec(srcname,dstname,dest)		@@install.linkkit:: srcname						@@	MakeDir($(DESTDIR)dest)						@@	$(INSTALL) -c $(INSTDATFLAGS) srcname $(DESTDIR)dest/dstname




#define InstallLinkKitNamedProg(srcname,dstname,dest)			@@install.linkkit:: srcname						@@	MakeDir($(DESTDIR)dest)						@@	$(INSTALL) -c $(INSTBINFLAGS) srcname $(DESTDIR)dest/dstname




#define InstallLinkKitSubdirs(dirs) NamedTargetSubdirs(install.linkkit,dirs,"installing link kit",DESTDIR='$(DESTDIR)',install.linkkit)



#define LinkKitDir		$(USRLIBDIR)/Server












#define NdbmDefines		-DNDBM





# 852 "/cdcopy/SOURCE/X11R5/mit/config//x386.cf"



/*
 * V/386 Release 4.0
 */


#define SystemV4		YES

/* No vendor defines required for SVR4 */

# 875 "/cdcopy/SOURCE/X11R5/mit/config//x386.cf"



#define HasSharedLibraries	YES



#define CcCmd			gcc
#define AnsiCCOptions		-ansi

#define DefaultCCOptions	Gcc2MOption -fpcc-struct-return -Di386 
#define OptimizedCDebugFlags	-O2








# 904 "/cdcopy/SOURCE/X11R5/mit/config//x386.cf"


/* Make sure we don't use /usr/ucb/ld */

#define LdCmd			/bin/ld


#define ServerExtraDefines	GccGasOption -DXDMCP MallocFlags LinkKitFlags -DAVOID_GLYPHBLT





#define Acp			


#define ConnectionFlags	    -DUNIXCONN -DTCPCONN -DCLIENTS_LOCALCONN -DSERVER_LOCALCONN Acp 

#define NeedBerklib	    YES




#define ExtraLibraries		-lsocket -lnsl GnuMallocLib


# 1 "/cdcopy/SOURCE/X11R5/mit/config//sv4Lib.rules" 1
#  $XFree86: mit/config/sv4Lib.rules,v 1.7 1993/03/27 08:55:08 dawes Exp $
#  $XConsortium: sv4Lib.rules,v 1.8 91/07/19 15:38:53 rws Exp $

/*
 * SVR4 shared library rules
 */





#define SharedDataSeparation NO


#define SharedCodeDef 


#define SharedLibraryDef 


#define ShLibIncludeFile <sv4Lib.tmpl>


#define SharedLibraryLoadFlags -G -z text



#define PositionIndependentCFlags -fPIC






/*
 * InstallSharedLibrary - generate rules to install the shared library.
 */


#define	InstallSharedLibrary(libname,rev,dest)				@@install:: Concat(lib,libname.so.rev) 					@@	MakeDir($(DESTDIR)dest)						@@	$(INSTALL) -c $(INSTLIBFLAGS) Concat(lib,libname.so.rev) $(DESTDIR)dest @@	mcs -d Concat($(DESTDIR)dest/lib,libname.so.rev)		@@	$(RM) Concat($(DESTDIR)dest/lib,libname.so)			@@	$(LN) Concat(lib,libname.so.rev) Concat($(DESTDIR)dest/lib,libname.so)

















/*
 * InstallSharedLibraryData - generate rules to install the shared library data
 */

#define	InstallSharedLibraryData(libname,rev,dest)



/*
 * SharedLibraryTarget - generate rules to create a shared library;
 * build it into a different name so that we do not hose people by having
 * the library gone for long periods.
 */

#define SharedLibraryTarget(libname,rev,solist,down,up)			@@AllTarget(Concat(lib,libname.so.rev))					@@	@@Concat(lib,libname.so.rev):  solist					@@	$(RM) $@~							@@	(cd down; $(LD) -o up/$@~ $(SHLIBLDFLAGS) -h $@ solist)		@@	$(RM) $@ 							@@	$(MV) $@~ $@							@@	$(RM) Concat(lib,libname.so)					@@	$(LN) $@ Concat(lib,libname.so)					@@	@@clean::									@@	$(RM) Concat(lib,libname.so.rev) Concat(lib,libname.so)
# 85 "/cdcopy/SOURCE/X11R5/mit/config//sv4Lib.rules"



/*
 * SharedLibraryDataTarget - generate rules to create shlib data file;
 */

#define SharedLibraryDataTarget(libname,rev,salist)

# 930 "/cdcopy/SOURCE/X11R5/mit/config//x386.cf" 2




# 1050 "/cdcopy/SOURCE/X11R5/mit/config//x386.cf"



# 1094 "/cdcopy/SOURCE/X11R5/mit/config//x386.cf"


/*
 * linux
 */
# 1153 "/cdcopy/SOURCE/X11R5/mit/config//x386.cf"


/*
 * OSF/1
 */
# 1213 "/cdcopy/SOURCE/X11R5/mit/config//x386.cf"



# 1 "/cdcopy/SOURCE/X11R5/mit/config//X386Conf.tmpl" 1
#   --------------------------------------------------------------------
#   X386Conf.tmpl  -- configuration parameters for X386
#   This file is automatically generated -- DO NOT EDIT
#   --------------------------------------------------------------------

         X386SRC = $(SERVERSRC)/ddx/x386
    VGADRIVERSRC = $(X386SRC)/vga256/drivers
  VGA16DRIVERSRC = $(X386SRC)/vga16/drivers
   VGA2DRIVERSRC = $(X386SRC)/vga2/drivers
   HGA2DRIVERSRC = $(X386SRC)/hga2/drivers
   BDM2DRIVERSRC = $(X386SRC)/bdm2/drivers
     S3DRIVERSRC = $(X386SRC)/accel/s3/drivers
     RENDERERSRC = $(FONTSRC)/lib/font
 RENDERERCONFOBJ = $(RENDERERSRC)/fontfile/rendererConf.o
RENDERERCONFSUBDIR = $(RENDERERSRC)/fontfile
         VGAOBJS =                    $(VGADRIVERSRC)/et4000/et4000.o                    $(VGADRIVERSRC)/et3000/et3000.o                    $(VGADRIVERSRC)/pvga1/pvga1.o                    $(VGADRIVERSRC)/gvga/gvga.o                    $(VGADRIVERSRC)/ati/ati.o                    $(VGADRIVERSRC)/tvga8900/tvga8900.o                    $(VGADRIVERSRC)/cirrus/cirrus.o                    $(VGADRIVERSRC)/ncr/ncr.o                    $(VGADRIVERSRC)/compaq/compaq.o                    $(VGADRIVERSRC)/oak/oak.o
# 27 "/cdcopy/SOURCE/X11R5/mit/config//X386Conf.tmpl"
      VGASUBDIRS =                    et4000                    et3000                    pvga1                    gvga                    ati                    tvga8900                    cirrus                    ncr                    compaq                    oak
# 38 "/cdcopy/SOURCE/X11R5/mit/config//X386Conf.tmpl"
        VGA16OBJS =                    $(VGA16DRIVERSRC)/et4000/et4000.o                    $(VGA16DRIVERSRC)/generic/generic.o


     VGA16SUBDIRS =                    et4000                    generic


        VGA2OBJS =                    $(VGA2DRIVERSRC)/et4000/et4000.o                    $(VGA2DRIVERSRC)/et3000/et3000.o                    $(VGA2DRIVERSRC)/pvga1/pvga1.o                    $(VGA2DRIVERSRC)/gvga/gvga.o                    $(VGA2DRIVERSRC)/tvga8900/tvga8900.o                    $(VGA2DRIVERSRC)/ncr/ncr.o                    $(VGA2DRIVERSRC)/compaq/compaq.o                    $(VGA2DRIVERSRC)/oak/oak.o                    $(VGA2DRIVERSRC)/generic/generic.o
# 54 "/cdcopy/SOURCE/X11R5/mit/config//X386Conf.tmpl"
     VGA2SUBDIRS =                    et4000                    et3000                    pvga1                    gvga                    tvga8900                    ncr                    compaq                    oak                    generic
# 64 "/cdcopy/SOURCE/X11R5/mit/config//X386Conf.tmpl"
        HGA2OBJS =
     HGA2SUBDIRS =
        BDM2OBJS =
     BDM2SUBDIRS =
        S3OBJS =                    $(S3DRIVERSRC)/mmio_928/mmio_928.o                    $(S3DRIVERSRC)/s3_generic/s3_generic.o


     S3SUBDIRS =                    mmio_928                    s3_generic


    RENDERERLIBS =                    $(RENDERERSRC)/Speedo/libSpeedo.a                    $(RENDERERSRC)/Type1/libType1.a


 RENDERERSUBDIRS =                    Speedo                    Type1



#define BuildVga2 YES
#define BuildHga2 NO
#define BuildBdm2 NO
#define BuildVga16 YES
#define BuildVga256 YES
#define ExtraRenderers YES



     VGA2CONFOBJ = $(X386SRC)/vga2/vga2Conf.o
  VGA2CONFSUBDIR = $(X386SRC)/vga2
       VGA2BUILD = -DBUILD_VGA2











   X386MCONFOBJS = $(VGA2CONFOBJ) $(HGA2CONFOBJ) $(BDM2CONFOBJ)
X386MCONFSUBDIRS = $(VGA2CONFSUBDIR) $(HGA2CONFSUBDIR) $(BDM2CONFSUBDIR)



    VGA16CONFOBJ = $(X386SRC)/vga16/vga16Conf.o
 VGA16CONFSUBDIR = $(X386SRC)/vga16
      VGA16BUILD = -DBUILD_VGA16

   VGA16CONFOBJS = $(VGA16CONFOBJ)
VGA16CONFSUBDIRS = $(VGA16CONFSUBDIR)



      VGACONFOBJ = $(X386SRC)/vga256/vga256Conf.o
   VGACONFSUBDIR = $(X386SRC)/vga256
        VGABUILD = -DBUILD_VGA256

    X386CONFOBJS = $(VGACONFOBJ)
 X386CONFSUBDIRS = $(VGACONFSUBDIR)


       S3CONFOBJ = $(X386SRC)/accel/s3/s3Conf.o
    S3CONFSUBDIR = $(X386SRC)/accel/s3

 X386SCREENFLAGS = $(VGA2BUILD) $(HGA2BUILD) $(BDM2BUILD) $(VGA16BUILD) $(VGABUILD)
# 1216 "/cdcopy/SOURCE/X11R5/mit/config//x386.cf" 2



#  operating system:  		Unix System V/386 Release 4.2  Consensys Corp. 
# 384 "/cdcopy/SOURCE/X11R5/mit/config//Imake.tmpl" 2


/* It is a kludge to put these two macros here,
 * but Project.tmpl needs them and it is not clear there is a better place.
 */

/*
 * Concat - concatenates two strings.
 */


#define Concat(a,b)a##b





/*
 * Concat3 - concatenates three strings.
 */


#define Concat3(a,b,c)a##b##c





#  -------------------------------------------------------------------------
#  site-specific configuration parameters that go after
#  the platform-specific parameters - edit site.def to change
#define AfterVendorCF
# 1 "/cdcopy/SOURCE/X11R5/mit/config//site.def" 1
#  $XFree86: mit/config/site.def,v 2.23 1993/10/16 17:28:07 dawes Exp $
#  site:  $XConsortium: site.def,v 1.2 91/07/30 20:26:44 rws Exp $

/*****************************************************************************
 *                                                                           *
 *			   SITE-SPECIFIC DEFINITIONS                         *
 *                                                                           *
 * This file contains two halves, one included before the vendor-specific    *
 * configuration file (.cf file), and one included after the .cf file.       *
 * The before-half should be protected by #ifdef BeforeVendorCF, and the     *
 * after-half should be protected by #ifdef AfterVendorCF.                   *
 *                                                                           *
 * The before-half should only set things that the .cf file depends on.      *
 * For the .cf files shipped in this release, the main variable in this      *
 * category is HasGcc.                                                       *
 *                                                                           *
 * The after-half should contain all other definitions.  For example,        *
 * place your ProjectRoot definition here.  Beware that several of the       *
 * .cf files supplied by vendors have a ProjectRoot already defined, so      *
 * you may need to #undef it first.                                          *
 *                                                                           *
 * OS Major and Minor version numbers should be changed directly in the .cf  *
 * file, not overridden in site.def.                                         *
 *                                                                           *
 *****************************************************************************/









# 432 "/cdcopy/SOURCE/X11R5/mit/config//site.def"



#define SystemV4		YES
#define DefaultCDebugFlags -O3 -g
#define ServerCDebugFlags -O3 -g




#define ProjectRoot /usr/X11R5


#  Definitions from site.def
#define LibraryCcCmd	gcc -fstrength-reduce -fpcc-struct-return -Di386

#define PositionIndependentCFlags -fPIC

          DEFINES = -DBSD_COMP

#  Add these paths to find GNU ndbm
   EXTRA_INCLUDES = -I/opt/include
/* #define ExtraLibraries -L/opt/lib -lgdbm -lsocket -lnsl */

#  End of definitions from site.def


# 416 "/cdcopy/SOURCE/X11R5/mit/config//Imake.tmpl" 2



/*
 * defaults for various generic parameters; set in site.def if needed
 */





#define SystemV			NO	





#define i386Bsd			NO


#define i386Mach		NO


#define OSMajorVersion          0





#define UnalignedReferencesAllowed NO	





#define ExecableScripts		YES	




#define BourneShell		/bin/sh





#define ConstructMFLAGS		NO	




#define HasLargeTmp		NO	












#define HasVFork		YES



#define HasPutenv		NO	


#define HasVoidSignalReturn	YES	


#define HasBsearch		YES	


#define HasSaberC		NO	


#define HasFortran		NO





#define HasSecureRPC		NO	



#define HasShm			YES





#define NeedConstPrototypes	NO


#define NeedVarargsPrototypes	NO


#define NeedNestedPrototypes	NO


#define NeedFunctionPrototypes (NeedVarargsPrototypes || NeedNestedPrototypes)


#define NeedWidePrototypes	YES	








#define UsrLibDir Concat(ProjectRoot,/lib)

#define AlternateUsrLibDir YES














#define IncRoot Concat(ProjectRoot,/include)

#define AlternateIncRoot YES













#define UNCOMPRESSPATH /usr/ucb/uncompress





#define DebuggableCDebugFlags -g


#define NoOpCDebugFlags 








#define AnsiCCOptions 


#define InstPgmFlags -s


#define InstBinFlags -m 0755


#define InstUidFlags -m 4755


#define InstLibFlags -m 0644


#define InstIncFlags -m 0444


#define InstManFlags -m 0444


#define InstDatFlags -m 0444


#define InstKmemFlags InstUidFlags    



#define ArCmd ar cq	

















# 640 "/cdcopy/SOURCE/X11R5/mit/config//Imake.tmpl"


#define AsCmd as


#define YaccCmd yacc


#define CompressCmd compress





#define PreProcessCmd CcCmd -E






#define InstallCmd $(SCRIPTSRC)/bsdinst.sh	









#define LintCmd lint



#define LintLibFlag -o






#define LintOpts -ax





#define CpCmd cp





#define LnCmd ln -s



#define MakeCmd make


#define MvCmd mv



#define DoRanlibCmd 0





#define RanlibCmd ranlib


#define RanlibInstFlags 


#define RmCmd rm -f


/**/#define StandardIncludes  			

# 732 "/cdcopy/SOURCE/X11R5/mit/config//Imake.tmpl"





#define Malloc0ReturnsNull NO









#define OSLibraries 

# 759 "/cdcopy/SOURCE/X11R5/mit/config//Imake.tmpl"


#define ExtraLoadFlags 









#define TagsCmd ctags


/**/#define LoaderLibPrefix  			


#define DependFlags 


#define TroffCmd psroff


#define MsMacros -ms


#define TblCmd tbl


#define EqnCmd eqn


#define NroffCmd nroff


#define NeqnCmd neqn





#define ExpandManNames YES



#define TOPDIR .


#define CURDIR .


#define ExtraFilesToClean 


#define FilesToClean *.CKP *.ln *.BAK *.bak *.o core errs ,* *~ *.a .emacs_* tags TAGS make.log MakeOut 





            SHELL = 	/bin/sh 

              TOP = . 
      CURRENT_DIR = . 

               AR = ar cq	
  BOOTSTRAPCFLAGS =   	 	/* set if cpp does not have uniq sym */
               CC = 		gcc 
               AS = as 




             YACC = yacc 






         COMPRESS = compress 
              CPP = 			/opt/bin/cpp  $(STD_CPP_DEFINES)		/* simple filters */
    PREPROCESSCMD = 		gcc  -E  $(STD_CPP_DEFINES)	/* prefered; mdep */
          INSTALL = $(SCRIPTSRC)/bsdinst.sh	
               LD = 		/bin/ld 
             LINT = lint 
      LINTLIBFLAG = -o 
         LINTOPTS = -ax 
               LN = ln -s 
             MAKE = make 
               MV = mv 
               CP = cp 




               RM = rm -f 
            TROFF = psroff 
         MSMACROS = -ms 
              TBL = tbl 
              EQN = eqn 
            NROFF = nroff 
             NEQN = neqn 
     STD_INCLUDES =  			
  STD_CPP_DEFINES = 	  	  
      STD_DEFINES = 	  	 
 EXTRA_LOAD_FLAGS =  
  EXTRA_LIBRARIES = 	-lsocket -lnsl 	 
     OS_LIBRARIES =  
             TAGS = ctags 




    SHAREDCODEDEF =  
         SHLIBDEF =  




/*
 * The following supports forcing of function prototypes
 */





















#define _funcprotodef 








#define _wideprotodef 



    PROTO_DEFINES =     




     INSTPGMFLAGS = -s 	/* install flags for stripping */



     INSTBINFLAGS = -m 0755 	/* install flags for programs */
     INSTUIDFLAGS = -m 4755 	/* install flags for setuid programs */
     INSTLIBFLAGS = -m 0644 	/* install flags for libraries */
     INSTINCFLAGS = -m 0444 	/* install flags for headers */
     INSTMANFLAGS = -m 0444 	/* install flags for man pages */
     INSTDATFLAGS = -m 0444 	/* install flags for data files */
    INSTKMEMFLAGS = -m 4755     	/* install flags for /dev/kmem progs */


      PROJECTROOT = /usr/X11R5 






     TOP_INCLUDES = -I$(TOP)		/* def: for builds within tree */

      CDEBUGFLAGS = -O3 -g 
        CCOPTIONS = -m486  -fpcc-struct-return -Di386 	/* to distinguish from param flags */
    ANSICCOPTIONS =  
/*
 * STD_INCLUDES contains system-specific includes
 * TOP_INCLUDES specifies how to get to /usr/include or its build substitute
 * EXTRA_INCLUDES contains project-specific includes set in project incfiles
 * INCLUDES contains client-specific includes set in Imakefile
 * LOCAL_LDFLAGS contains client-specific ld flags flags set in Imakefile
 */
      ALLINCLUDES = $(INCLUDES) $(EXTRA_INCLUDES) $(TOP_INCLUDES) $(STD_INCLUDES)
       ALLDEFINES = $(ALLINCLUDES) $(STD_DEFINES) $(EXTRA_DEFINES) $(PROTO_DEFINES) $(DEFINES)
           CFLAGS = $(ANSICCOPTIONS) $(CDEBUGFLAGS) $(CCOPTIONS) $(ALLDEFINES)
        LINTFLAGS = $(LINTOPTS) -DLINT $(ALLDEFINES)




           LDLIBS = -L$(USRLIBDIR) $(OS_LIBRARIES) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)








        LDOPTIONS = $(ANSICCOPTIONS) $(CDEBUGFLAGS) $(CCOPTIONS) $(LOCAL_LDFLAGS)




   LDCOMBINEFLAGS = 	-r 
      DEPENDFLAGS =  

        MACROFILE = x386.cf 
           RM_CMD = $(RM) *.CKP *.ln *.BAK *.bak *.o core errs ,* *~ *.a .emacs_* tags TAGS make.log MakeOut   

    IMAKE_DEFINES = /* leave blank, for command line use only */




         IRULESRC = $(CONFIGSRC)
        IMAKE_CMD = $(NEWTOP)$(IMAKE) -I$(NEWTOP)$(IRULESRC) $(IMAKE_DEFINES)

     ICONFIGFILES = $(IRULESRC)/Imake.tmpl $(IRULESRC)/Imake.rules 			$(IRULESRC)/Project.tmpl $(IRULESRC)/site.def 			$(IRULESRC)/$(MACROFILE) $(EXTRA_ICONFIGFILES)



/*
 * get project-specific configuration and rules
 */

# 1 "/cdcopy/SOURCE/X11R5/mit/config//Project.tmpl" 1
#  -------------------------------------------------------------------------
#  X Window System Build Parameters
#  $XFree86: mit/config/Project.tmpl,v 2.1 1993/09/17 16:10:43 dawes Exp $
#  $XConsortium: Project.tmpl,v 1.138.1.1 92/11/11 09:49:19 rws Exp $

/*****************************************************************************
 *                                                                           *
 *                            DEFAULT DEFINITONS                             *
 *                                                                           *
 * The following section contains defaults for things that can be overridden *
 * in the various *.cf and site.def files.  DO NOT EDIT!                     *
 *                                                                           *
 ****************************************************************************/

#define ProjectX		5	

/*
 * X-specific things
 */

#define BuildServer		YES
























#define Type1Renderer		Type1




#define SpeedoRenderer		Speedo



#define FontRenderers		SpeedoRenderer Type1Renderer





#define BuildPexClients		BuildPex



#define BuildPexExt		BuildPex





#define BuildXInputExt		NO


#define BuildXInputLib		YES








#define InstallLibManPages	YES


#define InstallXtermSetUID	YES	


#define InstallXinitConfig	NO	


#define InstallXdmConfig	NO	



#define XdmServersType ws





#define InstallFSConfig		NO	


#define InstallAppDefFiles	YES	


#define DebugLibX		NO	


#define DebugLibXArchive	NO	


#define ProfileLibX		NO	


#define ProfileLibXArchive	NO	


#define DebugOldLibX		NO	


#define ProfileOldLibX		NO	


#define DebugLibXt		NO	


#define ProfileLibXt		NO	


#define DebugLibXaw		NO	


#define ProfileLibXaw		NO	


#define DebugLibXext		NO	


#define ProfileLibXext		NO	


#define DebugLibXmu		NO	


#define ProfileLibXmu		NO	


#define DebugLibXau		NO	


#define ProfileLibXau		NO	


#define DebugLibXdmcp		NO	


#define ProfileLibXdmcp		NO	


#define DebugLibPex		NO	


#define ProfileLibPex		NO	



#define ManDirectoryRoot Concat(ProjectRoot,/man)

#define XmanLocalSearchPath ManDirectoryRoot























#define HasXdmAuth		NO	


#define BDFTOSNFFILT -DBDFTOSNFFILT=\"$(BINDIR)/bdftosnf\"


#define SHELLPATH -DSHELLPATH=\"/bin/sh\"


#define ZBDFTOSNFFILT -DZBDFTOSNFFILT=\"UNCOMPRESSPATH" | $(BINDIR)/bdftosnf $(FONTCFLAGS)\""


#define FontFilters BDFTOSNFFILT SHELLPATH ZBDFTOSNFFILT


#define PrimaryScreenResolution 72		



#define DefaultFontPath $(FONTDIR)/misc/,$(FONTDIR)/Speedo/,$(FONTDIR)/75dpi/,$(FONTDIR)/100dpi/





#define DefaultRGBDatabase $(LIBDIR)/rgb


#define FontCompilerFlags -t









#define FontOSDefines 


#define FontDefines -DFONT_SNF -DFONT_BDF -DFONT_PCF -DCOMPRESSED_FONTS FontOSDefines









#define PexDefines 




#define ShmDefines -DMITSHM








#define XInputDefines 



#define BaseExtensionDefines -DSHAPE -DMULTIBUFFER -DMITMISC PexDefines ShmDefines XInputDefines

#define ExtensionDefines BaseExtensionDefines ExtensionOSDefines





#define ServerOSDefines 


#define ServerDefines StandardDefines ServerExtraDefines ExtensionDefines ServerOSDefines


#define PexDipexDefines 


#define PexDdpexDefines 



#define PexShmIPC HasShm


#define PexPhigsDefines 





#define PexClientDefines -DPEX_SI_PHIGS





#define PhigsInclude -I$(BUILDINCDIR)



#define PexCDebugFlags DebuggableCDebugFlags





#define PexCCOptions DefaultCCOptions



#define DefaultFSConfigFile $(LIBDIR)/fs/config



#define BinDir Concat(ProjectRoot,/bin)





#define BuildIncRoot $(TOP)


#define BuildIncTop ..		


#define LibDir $(USRLIBDIR)/X11


#define ConfigDir $(LIBDIR)/config


#define LintlibDir $(USRLIBDIR)/lint


#define FontDir $(LIBDIR)/fonts


#define AdmDir /usr/adm


#define XinitDir $(LIBDIR)/xinit


#define XdmDir $(LIBDIR)/xdm


#define XdmConfigurationSubdirectory config


#define TwmDir $(LIBDIR)/twm


#define ManPath ManDirectoryRoot


#define ManSourcePath $(MANPATH)/man











#define NlsDir $(LIBDIR)/nls


#define PexApiDir $(LIBDIR)/PEX

/* We need the following %C definition so that we can use sccs on this file.
 * Without this def, the following %-sequences will be expanded by sccs.
 */
_percentC_ = %C

#define XFileSearchPathBase $(LIBDIR)/%L/%T/%N$(_percentC_)%S:$(LIBDIR)/%l/%T/%N$(_percentC_)%S:$(LIBDIR)/%T/%N$(_percentC_)%S:$(LIBDIR)/%L/%T/%N%S:$(LIBDIR)/%l/%T/%N%S:$(LIBDIR)/%T/%N%S





#define XFileSearchPathDefault XFileSearchPathBase



#define XAppLoadDir $(LIBDIR)/app-defaults


#define XtErrorPrefix 


#define XtWarningPrefix 


#define OsNameDefines 


#define DefaultUserPath :/bin:/usr/bin:$(BINDIR):/usr/ucb


#define DefaultSystemPath /etc:/bin:/usr/bin:$(BINDIR):/usr/ucb


#define DefaultSystemShell BourneShell


#define UseCCMakeDepend NO





#define DependDir $(UTILSRC)/makedepend



#define ContribDir $(TOP)/../contrib	


#define DependCmd $(DEPENDSRC)/makedepend


#define RemoveTargetProgramByMoving NO


#define AllocateLocalDefines 



#define ForceNormalLib (HasSaberC | (HasGcc & !HasGcc2))


#define SharedLibX HasSharedLibraries


#define NormalLibX (!SharedLibX | ForceNormalLib)


#define SharedOldLibX HasSharedLibraries


#define NormalOldLibX (!SharedOldLibX | ForceNormalLib)


#define SharedLibXt HasSharedLibraries


#define NormalLibXt (!SharedLibXt | ForceNormalLib)


#define SharedLibXaw HasSharedLibraries


#define NormalLibXaw (!SharedLibXaw | ForceNormalLib)


#define SharedLibXmu HasSharedLibraries


#define NormalLibXmu (!SharedLibXmu | ForceNormalLib)


#define SharedLibXau NO		


#define NormalLibXau (!SharedLibXau | ForceNormalLib)


#define SharedLibXdmcp NO	


#define NormalLibXdmcp (!SharedLibXdmcp | ForceNormalLib)


#define SharedLibXext HasSharedLibraries


#define NormalLibXext (!SharedLibXext | ForceNormalLib)


#define SharedLibXinput HasSharedLibraries


#define NormalLibXinput (!SharedLibXinput | ForceNormalLib)


#define SharedLibPex HasSharedLibraries


#define NormalLibPex (!SharedLibPex | ForceNormalLib)


#define SharedLibPhigs NO	


#define NormalLibPhigs (!SharedLibPhigs | ForceNormalLib)


#define NeedInetEmulLib NO




#define DoInstallExtensionsIntoXlib NO	


#  -------------------------------------------------------------------------
#  X Window System make variables; this need to be coordinated with rules

/*
 * This list must be reflected in the DIRS_TO_BUILD list in the top-level
 * Makefile.
 */
          PATHSEP = /			/* for building filenames */
        USRLIBDIR =  /usr/X11R5 /lib   		/* libraries */
           BINDIR =  /usr/X11R5 /bin   		/* programs */
          INCROOT =  /usr/X11R5 /include   		/* base of where to put header files */
     BUILDINCROOT = $(TOP) 	/* base of build loc */
      BUILDINCDIR = $(BUILDINCROOT)/X11
      BUILDINCTOP = ..				/* top relative to BUILDINCDIR */
           INCDIR = $(INCROOT)/X11	/* header files, must end in X11 */
           ADMDIR = /usr/adm 		/* server log files */
           LIBDIR = $(USRLIBDIR)/X11 		/* rgb, XErrorDB, etc. */
        CONFIGDIR = $(LIBDIR)/config 		/* build configuration information */
       LINTLIBDIR = $(USRLIBDIR)/lint 		/* lint libraries */

          FONTDIR = $(LIBDIR)/fonts 		/* font directories */
         XINITDIR = $(LIBDIR)/xinit 		/* xinit config files */
           XDMDIR = $(LIBDIR)/xdm 		/* xdm config files */
           TWMDIR = $(LIBDIR)/twm 		/* twm config files */
          MANPATH =  /usr/X11R5 /man    		/* top of manual page tree */
    MANSOURCEPATH = $(MANPATH)/man 	/* prefix for man page sources */
        MANSUFFIX = 1x 		/* suffix for man pages */
     LIBMANSUFFIX = 3x 	/* suffix for library man pages */
    FILEMANSUFFIX = 4 	/* suffix for config file man pages */
           MANDIR = $(MANSOURCEPATH)1 		/* man pages for commands */
        LIBMANDIR = $(MANSOURCEPATH)3 		/* man pages for library routines */
       FILEMANDIR = $(MANSOURCEPATH)4 		/* man pages for config files */
           NLSDIR = $(LIBDIR)/nls 		/* nls files */
        PEXAPIDIR = $(LIBDIR)/PEX 		/* PEX support files */
      XAPPLOADDIR = $(LIBDIR)/app-defaults 		/* application default resource dir */
       FONTCFLAGS = -t 
       LINKKITDIR = 	$(USRLIBDIR)/Server 		/* Where to install Link Kit */

     INSTAPPFLAGS = $(INSTDATFLAGS)	/* XXX - this should go away - XXX */

# 564 "/cdcopy/SOURCE/X11R5/mit/config//Project.tmpl"

            IMAKE = $(IMAKESRC)/imake
           DEPEND = $(DEPENDSRC)/makedepend 
              RGB = $(RGBSRC)/rgb



            FONTC = $(BDFTOPCFSRC)/bdftopcf

        MKFONTDIR = $(MKFONTDIRSRC)/mkfontdir
        MKDIRHIER = 	/bin/sh  $(SCRIPTSRC)/mkdirhier.sh


# 585 "/cdcopy/SOURCE/X11R5/mit/config//Project.tmpl"


        CONFIGSRC = $(TOP)/config
       DOCUTILSRC = $(TOP)/doc/util
        CLIENTSRC = $(TOP)/clients
          DEMOSRC = $(TOP)/demos
           LIBSRC = $(TOP)/lib
          FONTSRC = $(TOP)/fonts
       INCLUDESRC = $(TOP)/X11
        SERVERSRC = $(TOP)/server
          UTILSRC = $(TOP)/util
        SCRIPTSRC = $(UTILSRC)/scripts
       EXAMPLESRC = $(TOP)/examples
       CONTRIBSRC = $(TOP)/../contrib	
           DOCSRC = $(TOP)/doc
           RGBSRC = $(TOP)/rgb
        DEPENDSRC = $(UTILSRC)/makedepend 
         IMAKESRC = $(CONFIGSRC)
         XAUTHSRC = $(LIBSRC)/Xau
          XLIBSRC = $(LIBSRC)/X
           XMUSRC = $(LIBSRC)/Xmu
       TOOLKITSRC = $(LIBSRC)/Xt
       AWIDGETSRC = $(LIBSRC)/Xaw
       OLDXLIBSRC = $(LIBSRC)/oldX
      XDMCPLIBSRC = $(LIBSRC)/Xdmcp
      BDFTOSNFSRC = $(FONTSRC)/bdftosnf
      BDFTOSNFSRC = $(FONTSRC)/clients/bdftosnf
      BDFTOPCFSRC = $(FONTSRC)/clients/bdftopcf
     MKFONTDIRSRC = $(FONTSRC)/clients/mkfontdir
         FSLIBSRC = $(FONTSRC)/lib/fs
    FONTSERVERSRC = $(FONTSRC)/server
     EXTENSIONSRC = $(TOP)/extensions
         XILIBSRC = $(EXTENSIONSRC)/lib/xinput
        PEXLIBSRC = $(EXTENSIONSRC)/lib/PEXlib
      PHIGSLIBSRC = $(EXTENSIONSRC)/lib/PEX

/*
 * _Use - makes a choice based on UseInstalled.
 */




#define _Use(a,b) b



/*
 * _UseCat - combination of _Use and Concat.
 *           exists to avoid problems with some preprocessors
 */





#define _UseCat(a,b,c) b##c















# 1 "/cdcopy/SOURCE/X11R5/mit/config//sv4Lib.tmpl" 1
#  $XConsortium: sv4Lib.tmpl,v 1.4.1.1 92/11/11 09:57:17 rws Exp $

/*
 * SVR4 shared library template
 */


#define SharedXlibRev 5.0


#define SharedOldXRev 5.0


#define SharedXtRev 5.0


#define SharedXawRev 5.0


#define SharedXmuRev 5.0


#define SharedXextRev 5.0


#define SharedXinputRev 5.0


#define SharedPexRev 1.0


SHLIBLDFLAGS = -G -z text 
PICFLAGS = -fPIC 

/*
 * and now a little bit of magic for using imake without source tree; if we
 * are using shared libraries, we really do not need to depend on anything
 */

  DEPEXTENSIONLIB = /* _UseCat($(USRLIBDIR),$(EXTENSIONSRC)/lib,/libXext.sa.$(SOXEXTREV)) */
     EXTENSIONLIB =  -L$(EXTENSIONSRC)/lib -lXext  


          DEPXLIB = $(DEPEXTENSIONLIB) /* _UseCat($(USRLIBDIR),$(XLIBSRC),/libX11.sa.$(SOXLIBREV)) */
             XLIB = $(EXTENSIONLIB)  -L$(XLIBSRC) -lX11  


/* SVR4 shared libraries are deficient in link semantics */
        DEPXMULIB = /* _UseCat($(USRLIBDIR),$(XMUSRC),/libXmu.sa.$(SOXMUREV)) */
       XMULIBONLY =  -L$(XMUSRC) -lXmu  
           XMULIB = $(XMULIBONLY) -z nodefs


#define XawClientLibs $(XAWLIB) $(XMULIBONLY) $(XTOOLLIB) $(XLIB)



       DEPOLDXLIB = /* _UseCat($(USRLIBDIR),$(OLDXLIBSRC),/liboldX.sa.$(SOOLDXREV)) */
          OLDXLIB =  -L$(OLDXLIBSRC) -loldX  


      DEPXTOOLLIB = /* _UseCat($(USRLIBDIR),$(TOOLKITSRC),/libXt.sa.$(SOXTREV)) */
         XTOOLLIB =  -L$(TOOLKITSRC) -lXt  


        DEPXAWLIB = /* _UseCat($(USRLIBDIR),$(AWIDGETSRC),/libXaw.sa.$(SOXAWREV)) */
           XAWLIB =  -L$(AWIDGETSRC) -lXaw  


        DEPXILIB = /* _UseCat($(USRLIBDIR),$(XILIBSRC),/libXi.sa.$(SOXINPUTREV)) */
           XILIB =  -L$(XILIBSRC) -lXi  


        DEPPEXLIB = /* _UseCat($(USRLIBDIR),$(PEXLIBSRC),/libPEX5.sa.$(SOPEXREV)) */
         PEXLIB =  -L$(PEXLIBSRC) -lPEX5  

# 657 "/cdcopy/SOURCE/X11R5/mit/config//Project.tmpl" 2



        SOXLIBREV = 5.0 
          SOXTREV = 5.0 
         SOXAWREV = 5.0 
        SOOLDXREV = 5.0 
         SOXMUREV = 5.0 
        SOXEXTREV = 5.0 
      SOXINPUTREV = 5.0 
         SOPEXREV = 1.0 










      DEPXAUTHLIB =  $(XAUTHSRC)/libXau.a  
         XAUTHLIB =  			  $(DEPXAUTHLIB)  
      DEPXDMCPLIB =  $(XDMCPLIBSRC)/libXdmcp.a  
         XDMCPLIB =  			  $(DEPXDMCPLIB)  

























        DEPPHIGSLIB =  $(PHIGSLIBSRC)/libphigs.a  
           PHIGSLIB =  			  $(DEPPHIGSLIB)  

       DEPXBSDLIB =  $(LIBSRC)/Berk/libXbsd.a  
          XBSDLIB =  			  $(DEPXBSDLIB)  





 LINTEXTENSIONLIB =  $(EXTENSIONSRC)/lib/llib-lXext.ln  
         LINTXLIB =  $(XLIBSRC)/llib-lX11.ln  
          LINTXMU =  $(XMUSRC)/llib-lXmu.ln  
        LINTXTOOL =  $(TOOLKITSRC)/llib-lXt.ln  
          LINTXAW =  $(AWIDGETSRC)/llib-lXaw.ln  
           LINTXI =  $(XILIBSRC)/llib-lXi.ln  
          LINTPEX =  $(PEXLIBSRC)/llib-lPEX5.ln  
        LINTPHIGS =  $(PHIGSLIBSRC)/llib-lphigs.ln  


#define XawClientDepLibs $(DEPXAWLIB) $(DEPXMULIB) $(DEPXTOOLLIB) $(DEPXLIB)






#define NeedDefaultDepLibs YES



/*
 * Individual libraries should override this
 */

          DEPLIBS = $(DEPXAWLIB) $(DEPXMULIB) $(DEPXTOOLLIB) $(DEPXLIB)



         DEPLIBS1 = $(DEPLIBS)
         DEPLIBS2 = $(DEPLIBS)
         DEPLIBS3 = $(DEPLIBS)

# 998 "/cdcopy/SOURCE/X11R5/mit/config//Imake.tmpl" 2


# 1 "/cdcopy/SOURCE/X11R5/mit/config//Imake.rules" 1
#  -------------------------------------------------------------------------
#  Imake rules for building libraries, programs, scripts, and data files
#  $XFree86: mit/config/Imake.rules,v 2.1 1993/09/29 11:06:00 dawes Exp $
#  rules:  $XConsortium: Imake.rules,v 1.123 91/09/16 20:12:16 rws Exp $

/*
 *		   MACHINE-INDEPENDENT RULES; DO NOT MODIFY
 *
 * Warning, when defining rules: make sure you do not include both a trailing
 * backslash and double ampersand backslash or else you will get an extra
 * backslash in the Makefile.
 * 
 * The following macros are defined for the various templates and Imakefiles
 * (for a list of the applicable make variables, see the template files):
 * 
 * SaberProgramTarget		(program,srclist,objlist,locallibs,syslibs)
 * RemoveTargetProgram		(program)
 * MakeDir			(dir)
 * BuildIncludes		(srclist,dstsubdir,dstupdir)
 * NormalProgramTarget		(program,objects,deplibs,locallibs,syslibs)
 * SetUIDProgramTarget		(program,objects,deplibs,locallibs,syslibs)
 * SingleProgramTarget		(program,objects,locallibs,syslibs)
 * SimpleProgramTarget		(program)
 * ComplexProgramTarget		(program)
 * ComplexProgramTarget_1	(program,locallib,syslib)
 * ComplexProgramTarget_2	(program,locallib,syslib)
 * ComplexProgramTarget_3	(program,locallib,syslib)
 * ServerTarget			(server,subdirs,objects,libs,syslibs)
 * RanLibrary			(args)
 * InstallLibrary		(libname,dest)
 * MergeIntoInstalledLibrary	(tolib,fromlib)
 * InstallLibraryAlias		(libname,alias,dest)
 * InstallLintLibrary		(libname,dest)
 * InstallManPageLong		(file,destdir,dest)
 * InstallManPage		(file,destdir)
 * InstallManPageAliases	(file,destdir,aliases)
 * InstallNamedNonExec		(srcname,dstname,dest)
 * InstallNonExecFile		(file,dest)
 * InstallNonExec		(file,dest)
 * InstallProgramWithFlags	(program,dest,flags)
 * InstallProgram		(program,dest)
 * InstallScript		(program,dest)
 * InstallNamedProg		(srcname,dstname,dest)
 * LinkFileList			(step,list,dir,sub)
 * InstallMultipleDestFlags	(step,list,dest,flags)
 * InstallMultipleDest		(step,list,dest)
 * InstallMultiple		(list,dest)
 * InstallMultipleFlags		(list,dest,flags)
 * InstallMultipleMan		(list,dest)
 * InstallAppDefaults		(class)
 * InstallAppDefaultsLong	(file,class)
 * DependDependency		()
 * DependTarget			()
 * DependTarget3		(srcs1,srcs2,srcs3)
 * CleanTarget			()
 * TagsTarget			()
 * ImakeDependency		(target)
 * BuildMakefileTarget		(notused,imakeflags)
 * MakefileTarget		()
 * LibMkdir			(dir)
 * LibCleanDir			(dir)
 * ObjectCompile		(options)
 * NormalLibObjCompile		(options)
 * NormalSharedLibObjCompile	(options)
 * LibObjCompile		(dir,options)
 * DebuggedLibObjCompile	(options)
 * ProfiledLibObjCompile	(options)
 * SharedLibObjCompile		(options)
 * NormalLibraryObjectRule	()
 * NormalFortranObjectRule	()
 * ObjectFromSpecialSource	(dst,src,flags)
 * SpecialObjectRule		(objs,depends,options)
 * NormalLibraryTarget		(libname,objlist)
 * NormalLibraryTarget2		(libname,objlist1,objlist2)
 * NormalLibraryTarget3		(libname,objlist1,objlist2,objlist3)
 * NormalDepLibraryTarget	(libname,deplist,objlist)
 * SubdirLibraryRule		(objlist)
 * ProfiledLibraryTarget	(libname,objlist)
 * DebuggedLibraryTarget	(libname,objlist)
 * AliasedLibraryTarget		(libname,alias)
 * NormalRelocatableTarget	(objname,objlist)
 * ProfiledRelocatableTarget	(objname,objlist)
 * DebuggedRelocatableTarget	(objname,objlist)
 * LintLibraryTarget		(libname,srclist)
 * NormalLintTarget		(srclist)
 * LintTarget			()
 * LinkSourceFile		(src,dir)
 * LinkFile			(tofile,fromfile)
 * MakeSubincludesForBuild	(step,dir,srclist)
 * NamedTargetSubdirs		(name,dirs,verb,flags,subname)
 * NamedMakeSubdirs		(name,dirs)
 * MakeSubdirs			(dirs)
 * DependSubdirs		(dirs)
 * ForceSubdirs			(dirs)
 * InstallSubdirs		(dirs)
 * InstallManSubdirs		(dirs)
 * IncludesSubdirs		(dirs)
 * NamedCleanSubdirs		(name,dirs)
 * CleanSubdirs			(dirs)
 * NamedTagSubdirs		(name,dirs)
 * TagSubdirs			(dirs)
 * MakeLintSubdirs		(dirs,target,subtarget)
 * LintSubdirs			(dirs)
 * MakeLintLibSubdirs		(dirs)
 * MakeMakeSubdirs		(dirs,target)
 * MakeNsubdirMakefiles		()
 * MakefileSubdirs		(dirs)
 * CppScriptTarget		(dst,src,defs,deplist)
 * MakeScriptFromCpp		(name,defs)
 * CppFileTarget		(dst,src,defs,deplist)
 * MakeDirectories		(step,dirs)
 * MakeFontsDir			(deplist)
 * MakeFonts			()
 * InstallFontObjs		(objs,dest)
 * InstallFonts			(dest)
 * InstallFontAliases		(dest)
 * FontSrc			(basename)
 * FontBaseObj			(basename)
 * InstallFontScale		(dest)
 * UncompressedFontTarget	(basename)
 * UncompressedFontTarget	(basename)
 * CompressedFontTarget		(basename)
 * FontTarget			(basename)
 * FontObj			(basename)
 * AllTarget			(depends)
 *
 *
 * The following are in Imake.tmpl:
 *
 * Concat			(a,b)
 * Concat3			(a,b,c)
 * 
 *
 * The following are in specific <os>Lib.rules:
 *
 * SharedLibraryTarget		(libname,rev,solist,down,up)
 * SharedLibraryDataTarget	(libname,rev,salist)
 * InstallSharedLibrary		(libname,rev,dest)
 * InstallSharedLibraryData	(libname,rev,dest)
 * 
 */





#define NullParameter

/* if [ -d ] or [ ! -d ] causes make to fail, define this as - */

#define DirFailPrefix


/*
 * SaberProgramTarget - generate rules to make Saber-C read in sources and
 * objects.
 */

# 167 "/cdcopy/SOURCE/X11R5/mit/config//Imake.rules"

#define SaberProgramTarget(program,srclist,objlist,locallibs,syslibs) 








#define RemoveTargetProgram(program) $(RM) program




#define MakeDir(dir) DirFailPrefix@if [ -d dir ]; then set +x; \	@@	else (set -x; $(MKDIRHIER) dir); fi




#define BuildIncludes(srclist,dstsubdir,dstupdir)			@@includes::								@@	MakeDir($(BUILDINCDIR)/dstsubdir)				@@	@(set -x; cd $(BUILDINCDIR)/dstsubdir; for i in srclist; do \	@@	$(RM) $$i; \						@@	$(LN) $(BUILDINCTOP)/dstupdir/$(CURRENT_DIR)/$$i .; \	@@	done)








/*
 * NormalProgramTarget - generate rules to compile and link the indicated 
 * program; since it does not use any default object files, it may be used for
 * multiple programs in the same Imakefile.
 */

#define	NormalProgramTarget(program,objects,deplibs,locallibs,syslibs)	@@program: objects deplibs						@@	RemoveTargetProgram($@)						@@	$(CC) -o $@ objects $(LDOPTIONS) locallibs $(LDLIBS) syslibs $(EXTRA_LOAD_FLAGS) @@	@@clean::									@@	$(RM) program










#define SetUIDProgramTarget NormalProgramTarget



/*
 * SingleProgramTarget - obsolete version of NormalProgramTarget that does
 * not have deplibs.
 */

#define	SingleProgramTarget(program,objects,locallibs,syslibs)		@@NormalProgramTarget(program,objects,NullParameter,locallibs,syslibs)



/*
 * SimpleProgramTarget - generate rules for compiling and linking programs
 * that only have one C source file.  It should only be used in Imakefiles 
 * that describe a single program.
 */

#define	SimpleProgramTarget(program)					@@ OBJS = program.o						@@ SRCS = program.c						@@	@@ComplexProgramTarget(program)








/*
 * ComplexProgramTarget - generate rules for compiling and linking the 
 * program specified by $(OBJS) and $(SRCS), installing the program and its
 * man page, and generating dependencies.  It should only be used in 
 * Imakefiles that describe a single program.
 */

#define	ComplexProgramTarget(program)					@@ PROGRAM = program						@@	@@AllTarget(program)							@@	@@program: $(OBJS) $(DEPLIBS)						@@	RemoveTargetProgram($@)						@@	$(CC) -o $@ $(OBJS) $(LDOPTIONS) $(LOCAL_LIBRARIES) $(LDLIBS) $(EXTRA_LOAD_FLAGS) @@	@@SaberProgramTarget(program,$(SRCS),$(OBJS),$(LOCAL_LIBRARIES),NullParameter) @@	@@InstallProgram(program,$(BINDIR))					@@InstallManPage(program,$(MANDIR))					@@DependTarget()								@@LintTarget()								@@	@@clean::									@@	$(RM) $(PROGRAM)
# 266 "/cdcopy/SOURCE/X11R5/mit/config//Imake.rules"



/*
 * ComplexProgramTarget_1 - generate rules for compiling and linking the
 * program specified by $(OBJS1) and $(SRCS1), installing the program and its
 * man page, and generating dependencies for it and any programs described
 * by $(SRCS2) and $(SRCS3).  It should be used to build the primary 
 * program in Imakefiles that describe multiple programs.
 */

#define	ComplexProgramTarget_1(program,locallib,syslib)			@@ OBJS = $(OBJS1) $(OBJS2) $(OBJS3)				@@ SRCS = $(SRCS1) $(SRCS2) $(SRCS3)				@@	@@AllTarget($(PROGRAMS))							@@	@@program: $(OBJS1) $(DEPLIBS1)						@@	RemoveTargetProgram($@)						@@	$(CC) -o $@ $(LDOPTIONS) $(OBJS1) locallib $(LDLIBS) syslib $(EXTRA_LOAD_FLAGS) @@	@@InstallProgram(program,$(BINDIR))					@@InstallManPage(program,$(MANDIR))					@@	@@SaberProgramTarget(program,$(SRCS1),$(OBJS1),locallib,syslib)		@@	@@DependTarget()								@@LintTarget()								@@	@@clean::									@@	$(RM) $(PROGRAMS)
# 297 "/cdcopy/SOURCE/X11R5/mit/config//Imake.rules"



/*
 * ComplexProgramTarget_2 - generate rules for compiling and linking the
 * program specified by $(OBJS2) and $(SRCS2) and installing the program and
 * man page.  It should be used to build the second program in Imakefiles 
 * describing more than one program.
 */

#define	ComplexProgramTarget_2(program,locallib,syslib)			@@program: $(OBJS2) $(DEPLIBS2)						@@	RemoveTargetProgram($@)						@@	$(CC) -o $@ $(LDOPTIONS) $(OBJS2) locallib $(LDLIBS) syslib $(EXTRA_LOAD_FLAGS) @@	@@SaberProgramTarget(program,$(SRCS2),$(OBJS2),locallib,syslib)		@@	@@InstallProgram(program,$(BINDIR))					@@InstallManPage(program,$(MANDIR))
# 316 "/cdcopy/SOURCE/X11R5/mit/config//Imake.rules"



/*
 * ComplexProgramTarget_3 - generate rules for compiling and linking the
 * program specified by $(OBJS3) and $(SRCS3) and installing the program and
 * man page.  It should be used to build the third program in Imakefiles 
 * describing more than one program.
 */

#define	ComplexProgramTarget_3(program,locallib,syslib)			@@program: $(OBJS3) $(DEPLIBS3)						@@	RemoveTargetProgram($@)						@@	$(CC) -o $@ $(LDOPTIONS) $(OBJS3) locallib $(LDLIBS) syslib $(EXTRA_LOAD_FLAGS) @@	@@SaberProgramTarget(program,$(SRCS3),$(OBJS3),locallib,syslib)		@@	@@InstallProgram(program,$(BINDIR))					@@InstallManPage(program,$(MANDIR))
# 335 "/cdcopy/SOURCE/X11R5/mit/config//Imake.rules"




/*
 * ServerTarget - generate rules to compile, link, and relink an X server.
 */

#define	ServerTarget(server,subdirs,objects,libs,syslibs)		@@server: subdirs objects libs						@@	-@if [ -f server ]; then set -x; \				@@	$(MV) server server.bak; else exit 0; fi		@@	$(CC) $(ANSICCOPTIONS) $(CDEBUGFLAGS) $(CCOPTIONS) -o server objects libs $(EXTRA_LIBRARIES) syslibs $(EXTRA_LOAD_FLAGS) @@	@@Concat(load,server):							@@	-@if [ -f server ]; then set -x; \				@@	$(MV) server server.bak; else exit 0; fi		@@	$(CC) $(ANSICCOPTIONS) $(CDEBUGFLAGS) $(CCOPTIONS) -o server objects libs $(EXTRA_LIBRARIES) syslibs $(EXTRA_LOAD_FLAGS)
# 353 "/cdcopy/SOURCE/X11R5/mit/config//Imake.rules"






#define RanLibrary(args) 


/*
 * InstallLibrary - generate rules to install the indicated library.
 */

#define	InstallLibrary(libname,dest)					@@install:: Concat(lib,libname.a)						@@	MakeDir($(DESTDIR)dest)						@@	$(INSTALL) -c $(INSTLIBFLAGS) Concat(lib,libname.a) $(DESTDIR)dest @@	RanLibrary($(RANLIBINSTFLAGS) Concat($(DESTDIR)dest/lib,libname.a))






/*
 * MergeIntoInstalledLibrary - generate rules to merge one library into another
 */

#define MergeIntoInstalledLibrary(tolib,fromlib)			@@install::  fromlib							@@	$(SCRIPTSRC)/mergelib $(DESTDIR)tolib fromlib




/*
 * InstallLibraryAlias - generate rules to create a link from one library name
 * to another for the purposes of aliasing.
 */

#define	InstallLibraryAlias(libname,alias,dest)				@@install::								@@	-(cd $(DESTDIR)dest; \						@@	$(RM) Concat(lib,alias.a); \				@@	$(LN) Concat(lib,libname.a) Concat(lib,alias.a))







/*
 * InstallLintLibrary - generate rules to install the indicated lint library.
 */

#define	InstallLintLibrary(libname,dest)				@@install.ln:: Concat(llib-l,libname.ln)					@@	MakeDir($(DESTDIR)dest)						@@	$(INSTALL) -c $(INSTLIBFLAGS) Concat(llib-l,libname.ln) $(DESTDIR)dest






/*
 * InstallManPageLong - generate rules to install the indicated manual page,
 * giving it an alternate name.  This is used for installing man pages whose
 * base name without the .man suffix would normally be longer than 8 characters
 * (the limit for using source code control systems on files systems with 
 * short file names).
 */

#define	InstallManPageLong(file,destdir,dest)				@@install.man:: file.man							@@	MakeDir($(DESTDIR)destdir)					@@	$(INSTALL) -c $(INSTMANFLAGS) file.man $(DESTDIR)destdir/dest.$(MANSUFFIX)






/*
 * InstallManPage - generate rules to install the indicated manual page.
 */

#define	InstallManPage(file,destdir)					@@InstallManPageLong(file,destdir,file)




/*
 * InstallManPageAliases - generate rules to install manual page aliases.
 */

#define	InstallManPageAliases(file,destdir,aliases)			@@install.man::								@@	@(TMP=/tmp/tmp.$$$$; \						@@	$(RM) $${TMP}; \						@@	echo .so `basename destdir`/file.$(MANSUFFIX) > $${TMP}; \	@@	for i in aliases; do (set -x; \					@@	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)destdir/$$i.$(MANSUFFIX)); \ @@	done; \								@@	$(RM) $${TMP})
# 443 "/cdcopy/SOURCE/X11R5/mit/config//Imake.rules"



/*
 * InstallGenManPageLong - More general rules for installing manual pages --
 * doesn't assume MANSUFFIX.
 */

#define	InstallGenManPageLong(file,destdir,dest,suffix)			@@install.man:: file.man							@@	MakeDir($(DESTDIR)destdir)					@@	$(INSTALL) -c $(INSTMANFLAGS) file.man $(DESTDIR)destdir/dest.suffix






/*
 * InstallGenManPage - general equivalent of InstallManPage
 */

#define	InstallGenManPage(file,destdir,suffix)				@@InstallGenManPageLong(file,destdir,file,suffix)




/*
 * InstallGenManPageAliases - general equivalent of InstallManPageAliases
 */

#define	InstallGenManPageAliases(file,destdir,suffix,aliases)		@@install.man::								@@	@(TMP=/tmp/tmp.$$$$; \						@@	$(RM) $${TMP}; \						@@	echo .so `basename destdir`/file.suffix > $${TMP}; \		@@	for i in aliases; do (set -x; \					@@	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)destdir/$$i.suffix; \ @@	done; \								@@	$(RM) $${TMP})
# 480 "/cdcopy/SOURCE/X11R5/mit/config//Imake.rules"


/*
 * InstallNamedNonExec - generate rules to install a data file
 */

#define	InstallNamedNonExec(srcname,dstname,dest)			@@install:: srcname							@@	MakeDir($(DESTDIR)dest)						@@	$(INSTALL) -c $(INSTDATFLAGS) srcname $(DESTDIR)dest/dstname






/*
 * InstallNonExecFile - generate rules to install a data file
 */

#define	InstallNonExecFile(file,dest)					@@install:: file								@@	MakeDir($(DESTDIR)dest)						@@	$(INSTALL) -c $(INSTDATFLAGS) file $(DESTDIR)dest






/*
 * InstallNonExec - generate rules to install a data file, but does not
 * try to create the destination directory (deprecated)
 */

#define	InstallNonExec(file,dest)					@@install:: file								@@	$(INSTALL) -c $(INSTDATFLAGS) file $(DESTDIR)dest





/*
 * InstallProgramWithFlags - generate rules to install an executable program
 * using given install flags.
 */

#define InstallProgramWithFlags(program,dest,flags)			@@install:: program							@@	MakeDir($(DESTDIR)dest)						@@	$(INSTALL) -c $(INSTPGMFLAGS) flags program $(DESTDIR)dest






/*
 * InstallProgram - generate rules to install an executable program using any
 * special install flags set in $(INSTALLFLAGS).
 */

#define	InstallProgram(program,dest)					@@InstallProgramWithFlags(program,dest,NullParameter)





/*
 * InstallScript - install a shell script.
 */

#define	InstallScript(program,dest)					@@install:: program.script						@@	MakeDir($(DESTDIR)dest)						@@	$(INSTALL) -c $(INSTBINFLAGS) program.script $(DESTDIR)dest/program






/*
 * InstallNamedProg - install a program with renaming and no stripping.
 */

#define	InstallNamedProg(srcname,dstname,dest)				@@install:: srcname							@@	MakeDir($(DESTDIR)dest)						@@	$(INSTALL) -c $(INSTBINFLAGS) srcname $(DESTDIR)dest/dstname






/*
 * LinkFileList - link a list of list of files from one place to another
 */

#define LinkFileList(step,list,dir,sub)					@@step:: list								@@	@case '${MFLAGS}' in *[i]*) set +e;; esac; \			@@	echo "	cd" dir; cd dir; \					@@	for i in list; do (set -x; $(RM) $$i; $(LN) sub/$$i .); done







/*
 * InstallMultipleDestFlags - generate rules to install multiple files at
 * once during a particular step in the build using a specific set of install 
 * flags.
 */

#define InstallMultipleDestFlags(step,list,dest,flags)			@@step:: list								@@	MakeDir($(DESTDIR)dest)						@@	@case '${MFLAGS}' in *[i]*) set +e;; esac; \			@@	for i in list; do \						@@	(set -x; $(INSTALL) -c flags $$i $(DESTDIR)dest); \	@@	done









/*
 * InstallMultipleDest - generate rules to install multiple files at once
 * during a particular step in the build using any install flags set in 
 * $(INSTALLFLAGS).
 */

#define InstallMultipleDest(step,list,dest)				@@InstallMultipleDestFlags(step,list,dest,$(INSTALLFLAGS))



/*
 * InstallMultiple - generate rules to install multiple files at once 
 * during the install step of the build using any install flags set in 
 * $(INSTALLFLAGS).
 */

#define	InstallMultiple(list,dest)					@@InstallMultipleDest(install,list,dest)




/*
 * InstallMultipleFlags - generate rules to install multiple files at once
 * during the install step of the build using the given install flags.
 */

#define InstallMultipleFlags(list,dest,flags)				@@InstallMultipleDestFlags(install,list,dest,flags)




/*
 * InstallMultipleMan - generate rules to install a variety of manual pages
 * during the install.man step of the build.
 */

#define InstallMultipleMan(list,dest)					@@InstallMultipleDestFlags(install.man,list,dest,$(INSTMANFLAGS))




/*
 * InstallAppDefaults - generate rules to install appliation default files 
 * if the InstallAppDefFiles configuration parameter is set.
 */


#define	InstallAppDefaults(class)					@@install:: class.ad							@@	MakeDir($(DESTDIR)$(XAPPLOADDIR))				@@	$(INSTALL) -c $(INSTAPPFLAGS) class.ad $(DESTDIR)$(XAPPLOADDIR)/class








/*
 * InstallAppDefaultsLong - generate rules to install appliation default files 
 * if the InstallAppDefFiles configuration parameter is set.
 */


#define	InstallAppDefaultsLong(file,class)				@@install:: file.ad							@@	MakeDir($(DESTDIR)$(XAPPLOADDIR))				@@	$(INSTALL) -c $(INSTAPPFLAGS) file.ad $(DESTDIR)$(XAPPLOADDIR)/class











/*
 * DependDependency - generate rules to build the makedepend program if 
 * this Imakefile is within the source tree.
 */




#define DependDependency() 						@@depend:: $(DEPEND)							@@	@@$(DEPEND):								@@	@echo "checking $@ over in $(DEPENDSRC) first..."; \		@@	cd $(DEPENDSRC); $(MAKE); \					@@	echo "okay, continuing in $(CURRENT_DIR)"











/*
 * DependTarget - generate rules to compute dependencies for all files listed
 * in $(SRCS).
 */

#define	DependTarget()							@@DependDependency()							@@	@@depend::								@@	$(DEPEND) $(DEPENDFLAGS) -s "# DO NOT DELETE" -- $(ALLDEFINES) -- $(SRCS)







/*
 * DependTarget3 - generate rules to compute dependencies for all files given.
 */

#define	DependTarget3(srcs1,srcs2,srcs3)				@@DependDependency()							@@	@@depend::								@@	$(DEPEND) $(DEPENDFLAGS) -s "# DO NOT DELETE" -- $(ALLDEFINES) -- srcs1	@@	$(DEPEND) -a $(DEPENDFLAGS) -s "# DO NOT DELETE" -- $(ALLDEFINES) -- srcs2	@@	$(DEPEND) -a $(DEPENDFLAGS) -s "# DO NOT DELETE" -- $(ALLDEFINES) -- srcs3









/*
 * CleanTarget - generate rules to remove any garbage files; the #* is here
 * instead of in the definition of RM_CMD because System V will treat the 
 * pound sign in the RM_CMD variable as a comment.
 */

#define	CleanTarget()							@@clean::									@@	$(RM_CMD) "#"*





/*
 * TagsTarget - generate rules to compute tags files for C source code.
 */

#define	TagsTarget()							@@tags::									@@	$(TAGS) -w *.[ch]						@@	$(TAGS) -xw *.[ch] > TAGS






/*
 * ImakeDependency - generate rules to compile imake if this Imakefile is
 * within the source tree.
 */




#define ImakeDependency(target)						@@target:: $(IMAKE)							@@	@@$(IMAKE):								@@	@(cd $(IMAKESRC); if [ -f Makefile ]; then \			@@	echo "checking $@ in $(IMAKESRC) first..."; $(MAKE) all; else \	@@	echo "bootstrapping $@ from Makefile.ini in $(IMAKESRC) first..."; \	@@	$(MAKE) -f Makefile.ini BOOTSTRAPCFLAGS="$(BOOTSTRAPCFLAGS)"; fi; \	@@	echo "okay, continuing in $(CURRENT_DIR)")
# 749 "/cdcopy/SOURCE/X11R5/mit/config//Imake.rules"




/*
 * BuildMakefileTarget - generate rules to build a Makefile from an Imakefile
 * and any special imake flags.  This is generally done automatically by the
 * template or by any special Imakefiles.  The first argument exists just
 * because imakeflags is usually empty and some preprocessors will complain
 * if an empty argument is passed as the sole argument to a macro.
 */

#define	BuildMakefileTarget(notused,imakeflags)				@@ImakeDependency(Makefile)						@@	@@Makefile:: 								@@	-@if [ -f Makefile ]; then set -x; \				@@	$(RM) Makefile.bak; $(MV) Makefile Makefile.bak; \	@@	else exit 0; fi							@@	$(IMAKE_CMD) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT_DIR) imakeflags











/*
 * MakefileTarget - generate rules to build a normal Makefile.
 */

#define MakefileTarget()						@@BuildMakefileTarget(Imakefile,NullParameter)




/*
 * LibMkdir - helper for creating library object subdirectories
 */

#define LibMkdir(dir) DirFailPrefix@if [ -d dir ]; then exit 0; else set -x; mkdir dir; fi


/*
 * LibCleanDir - helper for cleaning library object subdirectories
 */

#define LibCleanDir(dir) -@if [ -d dir ]; then \			@@	(set -x; cd dir; $(RM) *.o); else exit 0; fi



/*
 * ObjectCompile - compile fragment for a normal object file
 */

#define ObjectCompile(options) $(RM) $@					@@	$(CC) -c $(CFLAGS) options $*.c



/*
 * NormalLibObjCompile - compile fragment for a normal library object file
 */

#define NormalLibObjCompile(options) ObjectCompile(options)


/*
 * NormalSharedLibObjCompile - compile fragment for shared object when
 * a normal library is not being built
 */

#define NormalSharedLibObjCompile(options) NormalLibObjCompile(options $(SHLIBDEF) $(SHAREDCODEDEF) $(PICFLAGS))


/*
 * LibObjCompile - compile fragment for shared/profiled/debugged objects
 */

#define LibObjCompile(dir,options) $(RM) $@ dir/$@			   @@	$(CC) -c $(ANSICCOPTIONS) $(CCOPTIONS) $(ALLDEFINES) options $*.c  @@	$(MV) $@ dir/$@




/*
 * DebuggedLibObjCompile - compile fragment for debugged objects
 */

#define DebuggedLibObjCompile(options) LibObjCompile(debugger,-g options)


/*
 * ProfiledLibObjCompile - compile fragment for profiled objects
 */

#define ProfiledLibObjCompile(options) LibObjCompile(profiled,-pg options)


/*
 * SharedLibObjCompile - compile fragment for shared objects
 */

#define SharedLibObjCompile(options) LibObjCompile(shared,options $(SHLIBDEF) $(SHAREDCODEDEF) $(PICFLAGS) $(CDEBUGFLAGS))


/*
 * NormalLibraryObjectRule - for simple libraries
 */

#define	NormalLibraryObjectRule()					@@.c.o:									@@	ObjectCompile($(_NOOP_))






#define NormalFortranObjectRule()					@@.f.o:									@@	$(RM) $@							@@	$(FC) -c $(FCFLAGS) $*.f






#define ObjectFromSpecialSource(dst,src,flags)				@@dst.c:  src.c								@@	$(RM) $@							@@	$(LN) $? $@							@@	@@dst.o:  dst.c								@@	ObjectCompile(flags)						@@	@@depend::  dst.c								@@	@@clean::									@@	$(RM) dst.c
# 880 "/cdcopy/SOURCE/X11R5/mit/config//Imake.rules"


/*
 * SpecialObjectRule - generate rules to compile a file with special flags.
 */

#define SpecialObjectRule(objs,depends,options)				@@objs:	depends								@@	ObjectCompile(options)





/*
 * NormalLibraryTarget - generate rules to create a library.
 */

#define	NormalLibraryTarget(libname,objlist)				@@AllTarget(Concat(lib,libname.a))					@@	@@Concat(lib,libname.a): objlist						@@	$(RM) $@							@@	$(AR) $@ objlist						@@	RanLibrary($@)









/*
 * NormalLibraryTarget2 - generate rules to create a library in two steps.
 * This is used to create libraries with large numbers of files.
 */

#define	NormalLibraryTarget2(libname,objlist1,objlist2)			@@AllTarget(Concat(lib,libname.a))					@@	@@Concat(lib,libname.a): objlist1 objlist2				@@	$(RM) $@							@@	$(AR) $@ objlist1						@@	$(AR) $@ objlist2						@@	RanLibrary($@)










/*
 * NormalLibraryTarget3 - generate rules to create a library in three steps.
 * This is used to create libraries with very large numbers of files.
 */

#define	NormalLibraryTarget3(libname,objlist1,objlist2,objlist3)	@@AllTarget(Concat(lib,libname.a))					@@	@@Concat(lib,libname.a): objlist1 objlist2 objlist3			@@	$(RM) $@							@@	$(AR) $@ objlist1						@@	$(AR) $@ objlist2						@@	$(AR) $@ objlist3						@@	RanLibrary($@)
# 936 "/cdcopy/SOURCE/X11R5/mit/config//Imake.rules"



/*
 * NormalDepLibraryTarget - generate rules to create a library.
 */

#define	NormalDepLibraryTarget(libname,deplist,objlist)			@@AllTarget(Concat(lib,libname.a))					@@	@@Concat(lib,libname.a): deplist						@@	$(RM) $@							@@	$(AR) $@ objlist						@@	RanLibrary($@)









/*
 * SubdirLibraryRule -
 */

#define	SubdirLibraryRule(objlist)					@@all:: DONE								@@	@@DONE: objlist								@@	touch $@							@@	@@clean::									@@	$(RM) DONE










/*
 * ProfiledLibraryTarget - generate rules to create a profiled library.
 */

#define	ProfiledLibraryTarget(libname,objlist)				@@AllTarget(Concat3(lib,libname,_p.a))					@@	@@Concat3(lib,libname,_p.a): objlist					@@	$(RM) $@							@@	cd profiled; $(AR) ../$@ objlist				@@	RanLibrary($@)










/*
 * DebuggedLibraryTarget - generate rules to create a debuggable library.
 */

#define	DebuggedLibraryTarget(libname,objlist)				@@AllTarget(Concat3(lib,libname,_d.a))					@@	@@Concat3(lib,libname,_d.a): objlist					@@	$(RM) $@							@@	cd debugger; $(AR) ../$@ objlist				@@	RanLibrary($@)










/*
 * AliasedLibraryTarget - generate rules to link one library to another.
 */

#define	AliasedLibraryTarget(libname,alias)				@@AllTarget(Concat(lib,alias.a))						@@	@@Concat(lib,alias.a): Concat(lib,libname.a)				@@	$(RM) $@							@@	$(LN) Concat(lib,libname.a) $@








/*
 * NormalRelocatableTarget - generate rules to produce a relocatable object
 * file instead of a library.  
 */

#define	NormalRelocatableTarget(objname,objlist)			@@AllTarget(objname.o)							@@	@@objname.o: objlist							@@	$(RM) $@							@@	$(LD) $(LDCOMBINEFLAGS) objlist -o $@








/*
 * ProfiledRelocatableTarget - generate rules to produce a profiled relocatable
 * object file instead of a library.
 */

#define	ProfiledRelocatableTarget(objname,objlist)			@@AllTarget(Concat(objname,_p.o))						@@	@@Concat(objname,_p.o): objlist						@@	$(RM) $@							@@	$(LD) -X -r objlist -o $@









/*
 * DebuggedRelocatableTarget - generate rules to produce a debuggable 
 * relocatable object file instead of a library.
 */

#define	DebuggedRelocatableTarget(objname,objlist)			@@AllTarget(Concat(objname,_d.o))						@@	@@Concat(objname,_d.o): objlist						@@	$(RM) $@							@@	$(LD) -X -r objlist -o $@









/*
 * LintLibraryTarget - generate rules to create a lint library.  Note that the
 * lint library is always forced to be newer than the library itself.
 */

#define	LintLibraryTarget(libname,srclist)				@@lintlib:: Concat(llib-l,libname.ln)					@@	@@Concat(llib-l,libname.ln): srclist					@@	$(RM) $@							@@	$(LINT) Concat($(LINTLIBFLAG),libname) $(LINTFLAGS) srclist








/*
 * NormalLintTarget - generate rules to lint a set of sources.
 */

#define NormalLintTarget(srclist)					@@lint:									@@	$(LINT) $(LINTFLAGS) srclist $(LINTLIBS)			@@lint1:									@@	$(LINT) $(LINTFLAGS) $(FILE) $(LINTLIBS)







/*
 * LintTarget - generate rules to lint $(SRCS)
 */

#define LintTarget()							@@NormalLintTarget($(SRCS))




/*
 * LinkSourceFile - snag source file from some other directory
 */

#define LinkSourceFile(src,dir)						@@src:  dir/src								@@	$(RM) $@							@@	$(LN) $? $@							@@








/*
 * LinkFile - link a file
 */

#define LinkFile(tofile,fromfile)					@@tofile:: fromfile							@@	$(RM) $@							@@	$(LN) $? $@







#define MakeSubincludesForBuild(step,dir,srclist)			@@step::  dir srclist							@@	@-(list=`echo srclist | sed -e 's/[^ ]*\///g'`; \		@@	set -x; cd dir; $(RM) $$list)				@@	@for i in srclist; do \						@@	(set -x; cd dir; $(LN) ../$$i .); \			@@	done								@@	@@dir::									@@	$(MKDIRHIER) dir						@@	@@clean::									@@	@-(if [ -d dir ]; then \					@@	list=`echo srclist | sed -e 's/[^ ]*\///g'`; \		@@	set -x; cd dir; $(RM) $$list; else exit 0; fi)
# 1129 "/cdcopy/SOURCE/X11R5/mit/config//Imake.rules"



/*
 * NamedTargetSubdirs - recursively make a series of steps
 */

#define NamedTargetSubdirs(name,dirs,verb,flags,subname)		@@name::									@@	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \			@@	for i in dirs ;\						@@	do \								@@	(cd $$i ; echo verb "in $(CURRENT_DIR)/$$i..."; \	@@	$(MAKE) $(MFLAGS) flags subname); \		@@	done










/*
 * NamedMakeSubdirs - generate rules to do makes in the given subdirectories.
 * If you want CDEBUGFLAGS passed along to subdirectories, provide a line like
 * the following in the appropriate Imakefile
 * 
 *         #define PassCDebugFlags 'CDEBUGFLAGS=$(CDEBUGFLAGS)'
 */

#define NamedMakeSubdirs(name,dirs) NamedTargetSubdirs(name,dirs,"making" name,PassCDebugFlags,all)




#define MakeSubdirs(dirs)						@@NamedMakeSubdirs(all,dirs)




/*
 * DependSubdirs - generate rules to recursively compute dependencies as
 * part of the make depend step.
 */

#define DependSubdirs(dirs) NamedTargetSubdirs(depend,dirs,"depending",NullParameter,depend)




/*
 * ForceSubdirs - force make to build subdirectories
 */

#define ForceSubdirs(dirs)						@@dirs: FRC								@@	@cd $@ ; echo "making all in $(CURRENT_DIR)/$@..."; \		@@	$(MAKE) $(MFLAGS) PassCDebugFlags all				@@	@@FRC:







/*
 * InstallSubdirs - generate rules to recursively install programs and files.
 */

#define InstallSubdirs(dirs) NamedTargetSubdirs(install,dirs,"installing",DESTDIR='$(DESTDIR)',install)




/*
 * InstallManSubdirs - generate rules to recursively install manual pages.
 */

#define InstallManSubdirs(dirs) NamedTargetSubdirs(install.man,dirs,"installing man pages",DESTDIR='$(DESTDIR)',install.man)




/*
 * InstallLinkKitLibrary - rule for installing link kit libraries (X386 only)
 */





/*
 * InstallLinkKitNonExecFile - rule for installing link kit files (X386 only)
 */





/*
 * InstallLinkKitSubdirs - generate rules to recursively install server Link
 *                         Kit (only used for X386)
 */




/*
 * ConfigTargetLong
 */
# 1247 "/cdcopy/SOURCE/X11R5/mit/config//Imake.rules"


/*
 * ConfigTarget - rule for generating a config file
 */





/*
 * InstallLinkKitSubdirs - generate rules to recursively install server Link
 *                         Kit (only used for X386)
 */





/*
 * IncludesSubdirs - generate rules to recursively put include files in build
 */

#define IncludesSubdirs(dirs) NamedTargetSubdirs(includes,dirs,including,NullParameter,includes)




/*
 * CleanSubdirs - generate rules to recursively clean out garbage files.
 */

#define NamedCleanSubdirs(name,dirs) NamedTargetSubdirs(name,dirs,"cleaning",RM_CMD='$(RM_CMD)',clean)




#define CleanSubdirs(dirs) NamedCleanSubdirs(clean,dirs)




/*
 * TagSubdirs - generate rules to recursively create tags files.
 */

#define NamedTagSubdirs(name,dirs) NamedTargetSubdirs(name,dirs,"tagging",TAGS='$(TAGS)',tags)




#define TagSubdirs(dirs) NamedTagSubdirs(tags,dirs)



/*
 * MakeLintSubdirs - generate rules to recursively lint directories as part 
 * of the named step.
 */

#define MakeLintSubdirs(dirs,target,subtarget) NamedTargetSubdirs(target,dirs,"linting" for target and subtarget,DESTDIR='$(DESTDIR)' LINTOPTS='$(LINTOPTS)',subtarget)




/*
 * LintSubdirs - generate rules to recursively lint directories as part of 
 * the make lint step.
 */

#define LintSubdirs(dirs)						@@MakeLintSubdirs(dirs,lint,lint)




/*
 * MakeLintLibSubdirs - generate rules to recursively create lint libraries.
 */

#define MakeLintLibSubdirs(dirs)					@@MakeLintSubdirs(dirs,lintlib,lintlib)




/*
 * MakeMakeSubdirs - generate rules to recursively recreate Makefiles as part
 * of the specified step in the build.  If $(TOP) is set to an absolute path, 
 * do not prepend the ../ prefix.  This makes running things outside of the 
 * source tree to be much easier.
 */

#define MakeMakeSubdirs(dirs,target)					@@target::								@@	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \			@@	for i in dirs ;\						@@	do \								@@	echo "making Makefiles in $(CURRENT_DIR)/$$i..."; \	@@	case "$$i" in \						@@	./?*/?*/?*/?*) newtop=../../../../ sub=subsubsubsub;; \	@@	./?*/?*/?*) newtop=../../../ sub=subsubsub;; \		@@	./?*/?*)    newtop=../../ sub=subsub;; \		@@	./?*)       newtop=../ sub=sub;; \			@@	*/?*/?*/?*)    newtop=../../../../ sub=subsubsubsub;; \	@@	*/?*/?*)    newtop=../../../ sub=subsubsub;; \		@@	*/?*)       newtop=../../ sub=subsub;; \		@@	*)	    newtop=../ sub=sub;; \			@@	esac; \							@@	case "$(TOP)" in \					@@	/?*) newtop=  upprefix=  ;; \				@@	*) upprefix=../ ;; \					@@	esac; \							@@	$(MAKE) $${sub}dirMakefiles UPPREFIX=$$upprefix NEWTOP=$$newtop \		@@	MAKEFILE_SUBDIR=$$i NEW_CURRENT_DIR=$(CURRENT_DIR)/$$i;\ @@	done
# 1361 "/cdcopy/SOURCE/X11R5/mit/config//Imake.rules"



/*
 * MakeNsubdirMakefiles - generate rules to create sub Makefiles.
 */

#define MakeNsubdirMakefiles()						@@subdirMakefiles:							@@	$(RM) $(MAKEFILE_SUBDIR)/Makefile.bak				@@	-@if [ -f $(MAKEFILE_SUBDIR)/Makefile ]; then set -x; \		@@	$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak; \ @@	else exit 0; fi							@@	cd $(MAKEFILE_SUBDIR); $(IMAKE_CMD) -DTOPDIR=$(UPPREFIX)$(TOP) -DCURDIR=$(NEW_CURRENT_DIR); \	@@	$(MAKE) $(MFLAGS) Makefiles 					@@	@@subsubdirMakefiles:							@@	$(RM) $(MAKEFILE_SUBDIR)/Makefile.bak				@@	-@if [ -f $(MAKEFILE_SUBDIR)/Makefile ]; then set -x; \		@@	$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak; \ @@	else exit 0; fi							@@	cd $(MAKEFILE_SUBDIR); $(IMAKE_CMD) -DTOPDIR=$(UPPREFIX)$(UPPREFIX)$(TOP) -DCURDIR=$(NEW_CURRENT_DIR); \	@@	$(MAKE) $(MFLAGS) Makefiles 					@@	@@subsubsubdirMakefiles:							@@	$(RM) $(MAKEFILE_SUBDIR)/Makefile.bak				@@	-@if [ -f $(MAKEFILE_SUBDIR)/Makefile ]; then set -x; \		@@	$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak; \ @@	else exit 0; fi @@	cd $(MAKEFILE_SUBDIR); $(IMAKE_CMD) -DTOPDIR=$(UPPREFIX)$(UPPREFIX)$(UPPREFIX)$(TOP) -DCURDIR=$(NEW_CURRENT_DIR); \	@@	$(MAKE) $(MFLAGS) Makefiles 					@@	@@subsubsubsubdirMakefiles:						@@	$(RM) $(MAKEFILE_SUBDIR)/Makefile.bak				@@	-@if [ -f $(MAKEFILE_SUBDIR)/Makefile ]; then set -x; \		@@	$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak; \ @@	else exit 0; fi 						@@	cd $(MAKEFILE_SUBDIR); $(IMAKE_CMD) -DTOPDIR=$(UPPREFIX)$(UPPREFIX)$(UPPREFIX)$(UPPREFIX)$(TOP) -DCURDIR=$(NEW_CURRENT_DIR); \	@@	$(MAKE) $(MFLAGS) Makefiles
# 1400 "/cdcopy/SOURCE/X11R5/mit/config//Imake.rules"



/*
 * MakefileSubdirs - generate rules to create Makefiles.
 */

#define MakefileSubdirs(dirs)						@@MakeMakeSubdirs(dirs,Makefiles)						@@	@@MakeNsubdirMakefiles()





/*
 * Translate XCOMM into pound sign with sed, rather than passing -DXCOMM=XCOMM
 * to cpp, because that trick does not work on all ANSI C preprocessors.
 * Also delete line numbers from the cpp output (-P is not portable, I guess).
 */

#define CppSedMagic sed -e '/^#  *[0-9][0-9]*  *.*$$/d' -e '/^XCOMM$$/s//#/' -e '/^XCOMM[^a-zA-Z0-9_]/s/^XCOMM/#/'




/*
 * CppScriptTarget - generate rules to create a shell script by running the
 * input through cpp.  If the ExecableScripts configuration parameter is not
 * set, then make sure that the first line begins with a colon.
 */


#define CppScriptTarget(dst,src,defs,deplist)				@@dst::  src deplist							@@	$(RM) $@							@@	$(CPP) defs <src | CppSedMagic >$@				@@	chmod a+x $@















/*
 * MakeScriptFromCpp - generate rules to create a script from a file with a
 * .cpp suffix.
 */

#define MakeScriptFromCpp(name,defs)					@@CppScriptTarget(name,name.cpp,defs,NullParameter)




#define CppFileTarget(dst,src,defs,deplist)				@@dst::  src deplist							@@	$(RM) $@							@@	$(CPP) defs <src | CppSedMagic >$@





/*
 * MakeDirectories - generate rules to create a hierarchy of directories.
 */

#define MakeDirectories(step,dirs)					@@step::									@@	@case '${MFLAGS}' in *[i]*) set +e;; esac;			@@	DirFailPrefix@for i in dirs; do if [ -d $(DESTDIR)$$i ]; then \	@@	set +x; else (set -x; $(MKDIRHIER) $(DESTDIR)$$i); fi; \ @@	done








/*
 * MakeFontsDir - generate rules to build fonts.dir database.
 */

#define MakeFontsDir(deplist)						@@all:: fonts.dir								@@	@@fonts.dir:  deplist							@@	$(MKFONTDIR) .							@@	@@clean::									@@	$(RM) fonts.dir










/*
 * MakeFonts - generate rules to build font database.
 */

#define MakeFonts()							@@all::  $(OBJS)								@@	@@MakeFontsDir($(OBJS))							@@	@@clean::									@@	$(RM) *.snf *.snf.Z *.pcf *.pcf.Z









/*
 * InstallFontObjs - generate rules to install font files
 */

#define InstallFontObjs(objs,dest)					@@InstallMultipleFlags(objs,dest,$(INSTDATFLAGS))				@@	@@install::  fonts.dir							@@	MakeDir($(DESTDIR)dest)						@@	$(MKFONTDIR) $(DESTDIR)dest





/*	$(INSTALL) -c $(INSTDATFLAGS) fonts.dir $(DESTDIR)dest */



/*
 * InstallFonts - generate rules to install font files
 */

#define InstallFonts(dest)						@@InstallFontObjs($(OBJS),dest)




/*
 * InstallFontAliases - generate rules to install font aliases databases. 
 */

#define InstallFontAliases(dest)					@@install::  fonts.alias							@@	MakeDir($(DESTDIR)dest)						@@	$(INSTALL) -c $(INSTDATFLAGS) fonts.alias $(DESTDIR)dest






#define FontSrc(basename) basename.bdf






#define FontBaseObj(basename)basename.pcf



/*
 * InstallFontScale - generate rules to install font scale database.
 */

#define InstallFontScale(dest)						@@install::  fonts.scale							@@	MakeDir($(DESTDIR)dest)						@@	$(INSTALL) -c $(INSTDATFLAGS) fonts.scale $(DESTDIR)dest	@@	$(MKFONTDIR) $(DESTDIR)dest






/*
 * UncompressedFontTarget
 */






#define UncompressedFontTarget(basename)				@@FontBaseObj(basename):  FontSrc(basename)				@@	$(FONTC) $(FONTCFLAGS) $? -o $@





/*
 * CompressedFontTarget
 */

#define CompressedFontTarget(basename)					@@FontBaseObj(basename).Z:  FontSrc(basename)				@@	$(FONTC) $(FONTCFLAGS) $? | $(COMPRESS) > $@





#define FontTarget(basename) CompressedFontTarget(basename)
#define FontObj(basename) FontBaseObj(basename).Z





/*
 * AllTarget - generate rules to build necessary things during make all.
 */

#define AllTarget(depends)						@@all:: depends






# 1000 "/cdcopy/SOURCE/X11R5/mit/config//Imake.tmpl" 2


#  -------------------------------------------------------------------------
#  start of Imakefile


# 1015 "/cdcopy/SOURCE/X11R5/mit/config//Imake.tmpl"



#  -------------------------------------------------------------------------
#  common rules for all Makefiles - do not edit
/*
 * These need to be here so that rules in Imakefile occur first;  the blank
 * all is to make sure that an empty Imakefile does not default to make clean.
 */
emptyrule::

						@@clean::									@@	$(RM_CMD) "#"* 


					@@			@@					@@ Makefile :: $(IMAKE)							@@	@@$(IMAKE):								@@	@(cd $(IMAKESRC); if [ -f Makefile ]; then \			@@	echo "checking $@ in $(IMAKESRC) first..."; $(MAKE) all; else \	@@	echo "bootstrapping $@ from Makefile.ini in $(IMAKESRC) first..."; \	@@	$(MAKE) -f Makefile.ini BOOTSTRAPCFLAGS="$(BOOTSTRAPCFLAGS)"; fi; \	@@	echo "okay, continuing in $(CURRENT_DIR)") 						@@	@@Makefile:: 								@@	-@if [ -f Makefile ]; then set -x; \				@@	$(RM) Makefile.bak; $(MV) Makefile Makefile.bak; \	@@	else exit 0; fi							@@	$(IMAKE_CMD) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT_DIR)      


						@@tags::									@@	$(TAGS) -w *.[ch]						@@	$(TAGS) -xw *.[ch] > TAGS 













# 1058 "/cdcopy/SOURCE/X11R5/mit/config//Imake.tmpl"

#  -------------------------------------------------------------------------
#  empty rules for directories that do not have SUBDIRS - do not edit

install::
	@echo "install in $(CURRENT_DIR) done"

install.man::
	@echo "install.man in $(CURRENT_DIR) done"

install.linkkit::
	@echo "install.linkkit in $(CURRENT_DIR) done"

Makefiles::

includes::



#  -------------------------------------------------------------------------
#  dependencies generated by makedepend
