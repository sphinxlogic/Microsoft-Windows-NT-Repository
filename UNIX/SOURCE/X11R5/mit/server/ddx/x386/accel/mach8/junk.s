	.text
	.align 4
.mskbit:
	.value	0x0000
	.value	0x0001
	.value	0x0003
	.value	0x0007
	.value	0x000f
	.value	0x001f
	.value	0x003f
	.value	0x007f
	.value	0x00ff
	.value	0x01ff
	.value	0x03ff
	.value	0x07ff
	.value	0x0fff
	.value	0x1fff
	.value	0x3fff
	.value	0x7fff
	.value	0xffff
	.value	0x0000
.globl	_mach8RealImageStipple
_mach8RealImageStipple:
	pushl %ebp
	movl %esp,%ebp
	subl $12,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 56(%ebp),%eax
	cmpl $0x0003,%eax
	jz .finish
	movl 16(%ebp),%edi
	orl %edi,%edi
	jz .finish
	movl 20(%ebp),%ebx
	orl %ebx,%ebx
	jz .finish
        movl $0x9aee,%edx
.wait_queue_0:
        inw (%dx)
        testw $0x08,%ax
        jnz .wait_queue_0
	movl $0xbee8,%edx
	movw 8(%ebp),%ax
	orw $0x2000,%ax
	outw (%dx)
	movw 8(%ebp),%ax
	addw 16(%ebp),%ax
	decw %ax
	orw $0x4000,%ax
	outw (%dx)
	movw $0xa080,%ax
	outw (%dx)
	movw 20(%ebp),%ax
	decw %ax
	outw (%dx)
	movl $0xaae8,%edx
	movw 60(%ebp),%ax
	outw (%dx)
	movl $0xbae8,%edx
	movw 56(%ebp),%ax
	orw $0x0020,%ax
	outw (%dx)
	cmpl $0,64(%ebp)
	jz .not_opaque
	movl $0xb6e8,%edx
	movw 56(%ebp),%ax
	outw (%dx)
	movl $0xa2e8,%edx
	movw 52(%ebp),%ax
	outw (%dx)
	jmp .set_frgdcol
.not_opaque:
	movl $0xb6e8,%edx
	movw $0x0003,%ax
	outw (%dx)
.set_frgdcol:
	movl $0xa6e8,%edx
	movw 48(%ebp),%ax
	outw (%dx)
	movl 8(%ebp),%eax
	andl $3,%eax
	addl 16(%ebp),%eax
	movl %eax,16(%ebp)
	movl 8(%ebp),%ebx
	andl $0xfffffffc,%ebx
	movl %ebx,8(%ebp)
	movl $0x96e8,%edx
	addl $7,%eax
	andl $0xfffffff8,%eax
	decl %eax
	outw (%dx)
	movl $0x86e8,%edx
	movw %bx,%ax
	outw (%dx)
	movl $0x82e8,%edx
	movw 12(%ebp),%ax
	outw (%dx)
	movl $0x9ae8,%edx
	movw $0x43f3,%ax
	outw (%dx)
	movl 8(%ebp),%eax
	subl 40(%ebp),%eax
	cltd
	idivl 32(%ebp)
	testl %edx,%edx
	jge .mod2
	addl 32(%ebp),%edx
.mod2:
	movl %edx,8(%ebp)
	movl 12(%ebp),%eax
	subl 44(%ebp),%eax
	cltd
	idivl 36(%ebp)
	testl %edx,%edx
	jge .mod1
	addl 36(%ebp),%edx
.mod1:
	movl %edx,12(%ebp)
	movl $0x9ae8,%edx
.wait_queue_1:
	inw (%dx)
	testw $1,%ax
	jnz .wait_queue_1
.next_bitmap_vertical:
	movl 12(%ebp),%eax
	addl 20(%ebp),%eax
	movl 36(%ebp),%ebx
	cmpl %ebx,%eax
	jle .cmp_get_h
	subl 12(%ebp),%ebx
	jmp .cmp2
.cmp_get_h:
	movl 20(%ebp),%ebx
.cmp2:
	movl %ebx,-8(%ebp)
.next_bitmap_line:
	movl 16(%ebp),%eax
	movl %eax,-12(%ebp)
	movl 8(%ebp),%esi
	movl %esi,-4(%ebp)
	movl 12(%ebp),%eax
	mull 28(%ebp)
	movl 24(%ebp),%edi
	addl %eax,%edi
.next_byte_horizontal:
	movl %esi,%ecx
	movl 32(%ebp),%ebx
	movl %ebx,%edx
	subl %esi,%ebx
	shrl $3,%esi
	addl %edi,%esi
	andb $7,%cl
	cmpl $16,%ebx
	jl .less_than_16_left
	movl (%esi),%eax
	shrl %cl,%eax
	movl -4(%ebp),%esi
	addl $16,%esi
	cmpl %edx,%esi
	jl .no_wrap2
	subl %edx,%esi
.no_wrap2:
	movl %esi,-4(%ebp)
	movl $0xe2e8,%edx
	movw %ax,%cx
	xorl %ebx,%ebx
	movb %al,%bl
	shll $1,%ebx
	movw _mach8stipple_tab(%ebx),%ax
	outw (%dx)
	cmpl $8,-12(%ebp)
	jle .chk_next_line
	xorl %ebx,%ebx
	movb %ch,%bl
	shll $1,%ebx
	movw _mach8stipple_tab(%ebx),%ax
	outw (%dx)
	subl $16,-12(%ebp)
	jg .next_byte_horizontal
	jmp .chk_next_line
.less_than_16_left:
	cmpl $16,%edx
	jl .less_than_16_wide
	movl (%esi),%eax
	shrl %cl,%eax
	movb %bl,%cl
	shll $1,%ebx
	andw .mskbit(%ebx),%ax
	movw (%edi),%bx
	shlw %cl,%bx
	orw %bx,%ax
	movl -4(%ebp),%esi
	addl $16,%esi
	cmpl %edx,%esi
	jl .no_wrap3
	subl %edx,%esi
.no_wrap3:
	movl %esi,-4(%ebp)
	movl $0xe2e8,%edx
	movw %ax,%cx
	xorl %ebx,%ebx
	movb %al,%bl
	shll $1,%ebx
	movw _mach8stipple_tab(%ebx),%ax
	outw (%dx)
	cmpl $8,-12(%ebp)
	jle .chk_next_line
	xorl %ebx,%ebx
	movb %ch,%bl
	shll $1,%ebx
	movw _mach8stipple_tab(%ebx),%ax
	outw (%dx)
	subl $16,-12(%ebp)
	jg .next_byte_horizontal
	jmp .chk_next_line
.less_than_16_wide:
	cmpl $8,%edx
	jl .less_than_8_wide
	movw (%esi),%ax
	shrw %cl,%ax
	movb %bl,%cl
	shll $1,%ebx
	andw .mskbit(%ebx),%ax
	movw (%edi),%bx
	shlw %cl,%bx
	orw %bx,%ax
	movw (%esi),%bx
	addb %dl,%cl
	shlw %cl,%bx
	orw %bx,%ax
	movl -4(%ebp),%esi
	addl $16,%esi
	cmpl %edx,%esi
	jl .no_wrap4
	subl %edx,%esi
.no_wrap4:
	movl %esi,-4(%ebp)
	movl $0xe2e8,%edx
	movw %ax,%cx
	xorl %ebx,%ebx
	movb %al,%bl
	shll $1,%ebx
	movw _mach8stipple_tab(%ebx),%ax
	outw (%dx)
	cmpl $8,-12(%ebp)
	jle .chk_next_line
	xorl %ebx,%ebx
	movb %ch,%bl
	shll $1,%ebx
	movw _mach8stipple_tab(%ebx),%ax
	outw (%dx)
	subl $16,-12(%ebp)
	jg .next_byte_horizontal
	jmp .chk_next_line
.less_than_8_wide:
	movb (%edi),%al
	movl %edx,%esi
	movb %al,%dh
	shrb %cl,%al
	movl %ebx,%ecx
	shll $1,%ebx
	andw .mskbit(%ebx),%ax
	movb %dh,%bl
.thin_loop:
	cmpl $16,%ecx
	jge .store_pix
	cmpl -12(%ebp),%ecx
	jge .store_pix
	xorw %dx,%dx
	movb %bl,%dl
	shlw %cl,%dx
	orw %dx,%ax
	addl %esi,%ecx
	jmp .thin_loop
.store_pix:
	movl %esi,%edx
	movl -4(%ebp),%esi
	addl $16,%esi
	cmpl %edx,%esi
	jl .no_wrap5
	subl %edx,%esi
.no_wrap5:
	movl %esi,-4(%ebp)
	movl $0xe2e8,%edx
	movw %ax,%cx
	xorl %ebx,%ebx
	movb %al,%bl
	shll $1,%ebx
	movw _mach8stipple_tab(%ebx),%ax
	outw (%dx)
	cmpl $8,-12(%ebp)
	jle .chk_next_line
	xorl %ebx,%ebx
	movb %ch,%bl
	shll $1,%ebx
	movw _mach8stipple_tab(%ebx),%ax
	outw (%dx)
	subl $16,-12(%ebp)
	jg .next_byte_horizontal
.chk_next_line:
	incl 12(%ebp)
	decl 20(%ebp)
	decl -8(%ebp)
	jnz .next_bitmap_line
	subl %edx,%edx
	movl %edx,12(%ebp)
	cmpl %edx,20(%ebp)
	jnz .next_bitmap_vertical
	movl $0x9aee,%edx
.wait_queue_2:
	inw (%dx)
	testw $0x0800,%ax
	jnz .wait_queue_2
	movl $0xbae8,%edx
	movw $0x0027,%ax
	outw (%dx)
	movl $0xb6e8,%edx
	movw $0x0007,%ax
	outw (%dx)
	movl $0xbee8,%edx
	movw $0x2000,%ax
	outw (%dx)
	movw $0x4000,%ax
	orw $2047,%ax
	outw (%dx)
	movw $0xa000,%ax
	outw (%dx)
.finish:
	popl %ebx
	popl %esi
	popl %edi
	addl $12,%esp
	popl %ebp
	ret
