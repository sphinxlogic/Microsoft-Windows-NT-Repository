           README for XFree86 2.1 on NetBSD 0.9 and NetBSD-current
           -------------------------------------------------------

Contents
--------
    0) Notes
    1) What and Where is XFree86?
    2) Bug Reports for This Document
    3) Installing The Binaries
    4) Installing Xdm, the display manager
    5) Configuring X for Your Hardware
    6) Running X
    7) Kernel Support for X
    8) Rebuilding the XFree86 Distribution
    9) Building New X Clients


1 - What and Where is XFree86?
------------------------------
  XFree86 is a port of X11R5 that supports several versions of Intel-based
Unix.  It is derived from X386 1.2, which was the X server distributed
with X11R5.  This release consists of many new features and performance
improvements as well as many bug fixes.  The release is available as
source patches against the MIT X11R5 code, as well as binary distributions
for many architectures.

The sources for XFree86 are available by anonymous ftp from:

    ftp.x.org:/contrib/XFree86
    ftp.physics.su.oz.au:/XFree86.

[I don't know if someone will do specific NetBSD 0.9 binary distribution.
 perhaps static -current binaries will run on 0.9 ?]
Binaries for NetBSD 0.9 will be available from:

    ftp.cs.mcgill.ca:/pub/NetBSD
    agate.berkeley.edu:/pub/NetBSD/ports
    sun-lamp.cs.berkeley.edu:/pub/NetBSD/ports

Binaries for NetBSD-Current will be available from:

    ftp.laas.fr:/pub/NetBSD

On US ftp sites note 00README-Legal-Rules-Regs or README.export-control 
which state that ftp users outside the U.S. should not copy 
XFree86-2.1-xdm-des.tar.gz from sites within the U.S. because it employs 
DES encryption.

2 - Bug Reports for This Document
---------------------------------
  Send email to matthieu@laas.fr (Matthieu Herrb) or XFree86@physics.su.oz.au
if you have comments or suggestions about this file and we'll revise it.

3 - Installing the Binaries
---------------------------

    The binary distribution is composed of a number of split tar archives
which are the executables, servers, fonts, libraries, include files,
man pages, config files, and the server link kit.  The full distribution
takes over 40MB of disk space.  The large archives are split into
smaller chunks.

    The contents of the archives are:

    bin         - all of the executable X client applications (except xdm)
    include     - the include/X11 header files
    fonts       - the misc, 75dpi, 100dpi, and scaled fonts
    doc         - READMEs, install scripts, and XFree86 specific man pages.
    lib         - X11 libraries, and data files needed at runtime
    config      - customizable xinit, xdm, and fs runtime configuration files.

    Choose at least one of the following to match your hardware:

    8514        - the X server for IBM 8514/A and compatible boards
    Mach8       - the X server for ATI Mach8 graphics accelerator boards
    Mach32      - the X server for ATI Mach32 graphics accelerator boards
    S3          - the X server for S3 based boards
    SVGA        - the 8-bit pseudo-color X server for Super VGA cards
    VGA16       - the 4-bit pseudo-color X server for VGA & SVGA cards.
    Mono        - the Monochrome X Server

    OPTIONAL:

    man         - man pages except XFree86 specific ones in the etc archive
    xdm-des     - xdm executable with DES encryption
    xdm-no-des  - xdm executable without DES encryption
    linkkit     - optional X server reconfiguration kit
    pex         - pex clients, libraries, header files and data


    If this is your first time, then you should be able to safely
install all of the packages.  If you're going to be installing the
source as well, then you might not want to bother with the linkkit and
pex archives.  As a minimal install, you'll need bin, include, fonts
doc, lib, config, and one X server.

    To unpack and install the archives:

    1. create some destination directory in which you'd like the
       X distribution to live.  /usr/X386 is recommended, but if that
       partition is full (as it is on my machine), then just create an
       alternate directory, and sym-link /usr/X386 to this place.

    ie, on my machine, I do the following:

    % cd /usr/local
    % mkdir X11
    % ln -s /usr/local/X11 /usr/X386


    2. Assuming that the destination directory for XFree86 2.1 is /usr/X386,
       run the following from wherever all the archive files are (replace
       /usr/X386 with wherever you wish them to go if that isn't the place):

    % cat XFree86-2.1-bin.tar.gz.*          | gunzip | (cd /usr/X386; tar xf -)
    % cat XFree86-2.1-include.tar.gz.*      | gunzip | (cd /usr/X386; tar xf -)
    % cat XFree86-2.1-fonts.tar.gz.*        | gunzip | (cd /usr/X386; tar xf -)
    % cat XFree86-2.1-doc.tar.gz            | gunzip | (cd /usr/X386; tar xf -)
    % cat XFree86-2.1-lib.tar.gz.*          | gunzip | (cd /usr/X386; tar xf -)
    % cat XFree86-2.1-config.tar.gz         | gunzip | (cd /usr/X386; tar xf -)
    % cat XFree86-2.1-man.tar.gz            | gunzip | (cd /usr/X386; tar xf -)

    # Choose only one of the following two
    % cat XFree86-2.1-xdm-des.tar.gz        | gunzip | (cd /usr/X386; tar xf -)
    % cat XFree86-2.1-xdm-no-des.tar.gz     | gunzip | (cd /usr/X386; tar xf -)

    % cat XFree86-2.1-linkkit.tar.gz.*      | gunzip | (cd /usr/X386; tar xf -)
    % cat XFree86-2.1-pex.tar.gz            | gunzip | (cd /usr/X386; tar xf -)

    # Choose one ore more servers to install
    % cat XFree86-2.1-8514.tar.gz           | gunzip | (cd /usr/X386; tar xf -)
    % cat XFree86-2.1-Mach8.tar.gz          | gunzip | (cd /usr/X386; tar xf -)
    % cat XFree86-2.1-Mach32.tar.gz         | gunzip | (cd /usr/X386; tar xf -)
    % cat XFree86-2.1-S3.tar.gz             | gunzip | (cd /usr/X386; tar xf -)
    % cat XFree86-2.1-SVGA.tar.gz           | gunzip | (cd /usr/X386; tar xf -)
    % cat XFree86-2.1-VGA16.tar.gz          | gunzip | (cd /usr/X386; tar xf -)
    % cat XFree86-2.1-Mono.tar.gz           | gunzip | (cd /usr/X386; tar xf -)

    3. Set the XWINHOME environment variable to the path where you
       installed XFree86. Under csh  type:
		
		setenv XWINHOME /usr/X386

       under sh  type

		XWINHOME=/usr/X386 
		export XWINHOME

	(Replace /usr/X386 by the appropriate dir if necessary).

       Also, don't forget to include these lines in your .login or
       .profile for permanent use.

    4. You should now run the script x386install from lib/X11/etc.
       It is invoked as follows (assuming we are in the top level dir of
       where we installed X to):

       % lib/X11/etc/x386install

       This script verifies that ${XWINHOME} points to the correct
       place, checks the /dev/ and /etc/ttys entries, and adds
       ${XWINHOME}/bin to the default path in /etc/csh.login.

       You should also add ${XWINHOME}/bin to your own shell's path
       variable.

    5. If needed, reboot your machine to take all previous
       modifications into account.

    6. Finally, run the ConfigXF86 script from ${XWINHOME}/lib/X11/etc
       in order to build a Xconfig file. See README.ConfigXF86 for
       details. 

    If X was already installed on your machine and you have customized your
xinit or xdm runtime configuration scripts, omit the config archive or unpack
it elsewhere and extract only that which you need.

    NOTE: Do not uncompress the font files in lib/X11/fonts without
    subsequently running 'mkfontdir' in the corresponding font directory;
    otherwise, your server will abort with the message "could not open default
    font 'fixed'".

    Using shared libraries with NetBSD-current:

    The binary distribution for NetBSD-current uses shared libraries.
    In order to get it running you need to make sure that either:

	o XWINHOME is set to /usr/X386. In this case ld.so will
	  find your libraries automagically 
        o you added ${XWINHOME}/lib to the arguments of the
          ``ldconfig'' command in /etc/rc. (See ldconfig(8) in the
          manual for details)
        o you have a LD_LIBRARY_PATH environment variable that
          includes the path to your XFree86 libraries. (In this latter
          case setuid executables won't run).

    If XWINHOME is not /usr/X386 and you have an older version with
    shared libraries in /usr/X386, be warned that the libraries in
    /usr/X386/lib will probably take precedence over the one in
    XWINHOME because ld has a hard-coded path to /usr/X386/lib.



4 - Installing Xdm, the display manager
---------------------------------------
  Export restrictions prevent us from providing support for DES
encryption outside the US.  If you have not installed NetBSD's
optional secr09, then passwords in /etc/passwd.master are
unencrypted and you should install the version of xdm without DES
encryption:

 % cat XFree86-2.1-xdm-no-des.tar.gz    | gunzip | (cd /usr/X386; tar xf -)

The xdm-nodes binary uses the *BSD  dummy crypt routine that
prints the message 'Crypt not present in system' in the xdm-errors
file each time a user logs in.  You can ignore this.  It just means
/etc/passwd.master is unencrypted.  If you install xdm-des by mistake
xdm will not accept any passwords.

If you have installed the optional securedist/des (secr09 for NetBSD) package
on your system then you are using DES encryption on passwords and you should
install xdm-des:

 % cat XFree86-2.1-xdm-des.tar.gz       | gunzip | (cd /usr/X386; tar xf -)

To start the display manager, log in as root on the console and type
`xdm -nodaemon'.

You can start xdm automatically on bootup by disabling the console getty
adding the following code to /etc/rc.local:

  if [ -x /usr/X386/bin/xdm ]; then
    echo -n ' xdm'; /usr/X386/bin/xdm
  fi

To disable the console getty, change 'on' to 'off' in the console
entry in /etc/ttys:

    console	"/usr/libexec/getty Pc"	cons25	off secure

5 - Configuring X for Your Hardware
-----------------------------------
  You *must* create /usr/X386/lib/X11/Xconfig to suit your hardware.
See README.Config for step-by-step instructions for setting it up.

The Xconfig file tells the X server what kind of monitor, adapter and
mouse you have.  In addition to README.Config, the server manual pages
(XF86_Accel, XF86_Mono, XF86_SVGA, and XF86_VGA16) describe the
options specific to each type of board.

Read README.Config, and look in /usr/X386/lib/X11/etc/modeDB.txt and
/usr/X386/lib/X11/etc/AccelCards to find Clocks and ModeDB entries to your
specific monitor and graphics card.  If you can find them there, grab the
Clocks and ModeDB lines and put them in your Xconfig.  If not, read
/usr/X386/lib/X11/etc/VideoModes.doc for instructions on how to create the
video timing values given your vga card and monitor specs.  The manual for
your monitor and adapter should have these values.  The tuner program (on
FreeBSD.cdrom.com /pub/386BSD/0.1-ports/XFree86-2.1) can calculate a rough
guess about a ModeDB line given the dot clock rate and horizontal
frequency of your monitor.

Note: 386BSD, FreeBSD, and NetBSD do not support memory mapping of video
memory on vesa local bus cards.  For these cards the server will respond
'Direct memory accessing has been disabled', which is normal.

The X server (except the 8514 and Mach32 servers)  will print out the
Clocks values for your card if you leave them our of your Xconfig file
when you run:

    X -probeonly >& x.out

You can take these values and edit them to put them in your Xconfig file;
although you MUST include all the clock values, AND leave them in the same
order.

If your mouse does not work try using kermit or tip to connect to the
mouse serial port and verify that it does indeed generate characters.

For NetBSD 0.9, Microsoft BusMouse users will find that the following
line should work:

BusMouse	"/dev/mms0"

6 - Running X
-------------
  8mb of memory is a recommended minimum for running X.  The server,
window manager and an xterm take about 2.5 Mb of memory themselves.  On a
4Mb system that would leave very little left over for other applications
like gcc that expect a few meg free.  X will work with 4Mb of memory, but
in practice compilation while running X can take 5 or 10 times as long due
to constant paging.

The easiest way for new users to start X windows is to type 'startx >&
startx.log'.  Error messages are lost unless you redirect them because
the server takes over the screen.

To get out of X windows, type 'exit' in the console xterm.  You can
customize your X by creating .xinitrc, .xserverrc, and .twmrc files in
your home directory as described in the xinit and startx man pages.

7 - Kernel Support for X
------------------------
  The server supports several console drivers: pccons, syscons, codrv
and pcvt.  They are detected at runtime and no configuration of the
server itself is required.

The pccons driver is the most widely tested and is the console driver
contained in the GENERICAHA kernels in NetBSD 0.9 and NetBSD-current

In order to instead use the syscons driver, you must reconfigure,
compile and install a new kernel from the NetBSD sources.  For a
general description of BSD kernel configuration look in
/usr/src/share/doc/smm/02.config.  After running 'make' it contains a
ready postscript copy of the kernel configuration chapter from the
systems maintainers manual.

To make sure X support is enabled under NetBSD, the following
line must be in your config file in /sys/arch/i386/conf:

options XSERVER, UCONSOLE

The syscons console driver is not bundled with FreeBSD or NetBSD.
Current version is 1.2 and supports XFree86-2.1.

The codrv console driver is not bundled with FreeBSD, nor with NetBSD. 
It is available from ftp.uni-duisburg.de in 
/pub/unix/386bsd-0.1/unofficial/codrv and from bsd386.first.gmd.de in 
~veit/codrv (no ANON FTP, login with 'guest'/'guest', cd to ~veit/codrv).
It is not clear that anybody has attempted to get this working with
NetBSD 0.9

The pcvt console driver is also not bundled with *BSD.  Version 3.0
has just been posted to comp.sources.misc. The pcvt X mode is
compatible with the pccons driver X mode.

    MIT-SHM
    =-----= 

NetBSD-current supports System V shared memory. If XFree86 2.1 detects
this support in your kernel, it will support the MIT-SHM extension.

    Under NetBSD-current, use the following to add shared memory
    support to your kernel:

    To add support for system V shared memory to your kernel add the
    lines:

	# System V-like IPC
	options         SYSVMSG
	options         SYSVSEM
	options         SYSVSHM
 
    to your kernel config file. Then from /sys/arch/i386/config, type

	# rm -f ../compile/<KERNEL-NAME>/*
	# config <KERNEL-NAME>
	# cd ../compile/<KERNEL-NAME>
	# make depend 
	# make

    Then install your new kernel and re-boot:

	# cp /netbsd /onetbsd
	# cp netbsd /
	# reboot


8 - Rebuilding the XFree86 Distribution
---------------------------------------
  The server link kit allow you to rebuild just the X server with a
minimum amount of disk space.  Just unpack it, make the appropriate
changes to the site.def, type './mkmf' and 'make' to link the server.
See /usr/X386/lib/Server/README for more info.

See /usr/X386/lib/X11/etc/INSTALL for instructions on unbundling and
building the source distribution.

If you don't already have the header files 'console.h' and 'pccons.h'
installed in /usr/include/machine (or /usr/include/sys for 386BSD), then
install the copies that are supplied in mit/server/ddx/x386/etc/.

You should configure the distribution by editing mit/site.def before
compiling.  To compile the sources, invoke 

    make World

in the mit directory.

    Support for shared libs under NetBSD-current
    =------------------------------------------=

    If you're running NetBSD-current, you can enable the build of
    shared libraries by uncommenting the appropriate line in
    'config/site.def'.

9 - Building New X Clients
--------------------------
  The easiest way to build a new client (X application) is to use
xmkmf if an Imakefile is included in the sources.  Type 'xmkmf -a' to
create the Makefiles, check the configuration if necessary and type
'make'.  Whenever you install additional man pages you should update
whatis.db by running 'makewhatis /usr/X386/man'.  To avoid the
`Virtual memory exhausted' message from cc while compiling, increase
the data and stack size limits (in csh type `limit datasize 32M' and
`limit stacksize 16M').

Note:  Starting with XFree86 2.1 and NetBSD-current, the symbol "__386BSD__"
no longer gets defined either by the compiler or via the X config files
for FreeBSD systems.  When porting clients to BSD systems, make use of the
symbol "BSD" for code which is truly BSD-specific.  The value of the
symbol can be used to distinguish different BSD releases.  For example,
code specific to the Net-2 and later releases can use:
                   
#if (BSD >= 199103)

To ensure that this symbol is correctly defined, include either
<X11/Xos.h> (best) or <sys/param.h> in the source that requires it.
For code that really is specific to a particular i386 BSD port, use
__FreeBSD__ for FreeBSD, __NetBSD__ for NetBSD, __386BSD__ for 386BSD,
and __bsdi__ for BSD/386.


Many thanks to
- Pace Willison for providing the initial port to 386BSD.
- Amancio Hasty for fixing cursor restoration, mouse bugs and many others.
- Christoph Robitschko for fixing com.c and thus select().
- Nate Williams for the patchkit support for X.
- Rod Grimes and Jack Velte of Walnut Creek Cdrom for use
  of their machines in preparing the FreeBSD binary release.

Rich  Murphey
David Dawes
Marc  Wandschneider
Matthieu Herrb

$XFree86: mit/server/ddx/x386/README.NetBSD,v 2.9 1994/03/08 08:07:12 dawes Exp $
