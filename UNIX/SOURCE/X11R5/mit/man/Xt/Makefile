# Makefile generated by imake - do not edit!
# $XConsortium: imake.c,v 1.65 91/07/25 17:50:17 rws Exp $
#
# The cpp used on this machine replaces all newlines and multiple tabs and
# spaces in a macro expansion with a single space.  Imake tries to compensate
# for this, but is not always successful.
#

# -------------------------------------------------------------------------
# Makefile generated from "Imake.tmpl" and <Imakefile>
# $XFree86: mit/config/Imake.tmpl,v 2.10 1994/02/28 13:54:37 dawes Exp $
# $XConsortium: Imake.tmpl,v 1.139 91/09/16 08:52:48 rws Exp $
#
# Platform-specific parameters may be set in the appropriate <vendor>.cf
# configuration files.  Site-specific parameters should be set in the file
# site.def.  Full rebuilds are recommended if any parameters are changed.
#
# If your C preprocessor does not define any unique symbols, you will need
# to set BOOTSTRAPCFLAGS when rebuilding imake (usually when doing
# "make World" the first time).
#

# -------------------------------------------------------------------------
# site-specific configuration parameters that need to come before
# the platform-specific parameters - edit site.def to change

# $XFree86: mit/config/site.def,v 2.41 1994/03/07 13:53:40 dawes Exp $
# site:  $XConsortium: site.def,v 1.2 91/07/30 20:26:44 rws Exp $

# -------------------------------------------------------------------------
# platform-specific configuration parameters - edit x386.cf to change

# $XFree86: mit/config/x386.cf,v 2.41 1994/03/06 06:41:16 dawes Exp $
# platform:  $XConsortium: x386.cf,v 1.7 91/08/16 19:30:10 gildea Exp $

# -------------------------------------------------------------------------
# XFree86 version definition
# $XFree86: mit/config/xf86_vers.def,v 2.11 1994/03/05 01:56:48 dawes Exp $

# -------------------------------------------------------------------------
# XFree86 version: 2100
# -------------------------------------------------------------------------

# $XFree86: mit/config/sv4Lib.rules,v 2.0 1993/12/10 14:32:22 dawes Exp $
# $XConsortium: sv4Lib.rules,v 1.8 91/07/19 15:38:53 rws Exp $

#  --------------------------------------------------------------------
#  X386Conf.tmpl  -- configuration parameters for X386
#  This file is automatically generated -- DO NOT EDIT
#  --------------------------------------------------------------------

         X386SRC = $(SERVERSRC)/ddx/x386
    VGADRIVERSRC = $(X386SRC)/vga256/drivers
  VGA16DRIVERSRC = $(X386SRC)/vga16/drivers
   VGA2DRIVERSRC = $(X386SRC)/vga2/drivers
   HGA2DRIVERSRC = $(X386SRC)/hga2/drivers
   BDM2DRIVERSRC = $(X386SRC)/bdm2/drivers
     S3DRIVERSRC = $(X386SRC)/accel/s3/drivers
     RENDERERSRC = $(FONTSRC)/lib/font
 RENDERERCONFOBJ = $(RENDERERSRC)/fontfile/rendererConf.o
RENDERERCONFSUBDIR = $(RENDERERSRC)/fontfile
         VGAOBJS = \
                   $(VGADRIVERSRC)/et4000/et4000.o \
                   $(VGADRIVERSRC)/et3000/et3000.o \
                   $(VGADRIVERSRC)/pvga1/pvga1.o \
                   $(VGADRIVERSRC)/gvga/gvga.o \
                   $(VGADRIVERSRC)/ati/ati.o \
                   $(VGADRIVERSRC)/tvga8900/tvga8900.o \
                   $(VGADRIVERSRC)/cirrus/cirrus.o \
                   $(VGADRIVERSRC)/ncr/ncr.o \
                   $(VGADRIVERSRC)/compaq/compaq.o \
                   $(VGADRIVERSRC)/oak/oak.o
      VGASUBDIRS = \
                   et4000 \
                   et3000 \
                   pvga1 \
                   gvga \
                   ati \
                   tvga8900 \
                   cirrus \
                   ncr \
                   compaq \
                   oak
        VGA16OBJS = \
                   $(VGA16DRIVERSRC)/et4000/et4000.o \
                   $(VGA16DRIVERSRC)/tvga8900/tvga8900.o \
                   $(VGA16DRIVERSRC)/generic/generic.o
     VGA16SUBDIRS = \
                   et4000 \
                   tvga8900 \
                   generic
        VGA2OBJS = \
                   $(VGA2DRIVERSRC)/et4000/et4000.o \
                   $(VGA2DRIVERSRC)/et3000/et3000.o \
                   $(VGA2DRIVERSRC)/pvga1/pvga1.o \
                   $(VGA2DRIVERSRC)/gvga/gvga.o \
                   $(VGA2DRIVERSRC)/tvga8900/tvga8900.o \
                   $(VGA2DRIVERSRC)/ncr/ncr.o \
                   $(VGA2DRIVERSRC)/compaq/compaq.o \
                   $(VGA2DRIVERSRC)/oak/oak.o \
                   $(VGA2DRIVERSRC)/generic/generic.o
     VGA2SUBDIRS = \
                   et4000 \
                   et3000 \
                   pvga1 \
                   gvga \
                   tvga8900 \
                   ncr \
                   compaq \
                   oak \
                   generic
        HGA2OBJS =
     HGA2SUBDIRS =
        BDM2OBJS =
     BDM2SUBDIRS =
        S3OBJS = \
                   $(S3DRIVERSRC)/mmio_928/mmio_928.o \
                   $(S3DRIVERSRC)/s3_generic/s3_generic.o
     S3SUBDIRS = \
                   mmio_928 \
                   s3_generic
    RENDERERLIBS = \
                   $(RENDERERSRC)/Speedo/libSpeedo.a \
                   $(RENDERERSRC)/Type1/libType1.a
 RENDERERSUBDIRS = \
                   Speedo \
                   Type1

     VGA2CONFOBJ = $(X386SRC)/vga2/vga2Conf.o
  VGA2CONFSUBDIR = $(X386SRC)/vga2
       VGA2BUILD = -DBUILD_VGA2

   X386MCONFOBJS = $(VGA2CONFOBJ) $(HGA2CONFOBJ) $(BDM2CONFOBJ)
X386MCONFSUBDIRS = $(VGA2CONFSUBDIR) $(HGA2CONFSUBDIR) $(BDM2CONFSUBDIR)

    VGA16CONFOBJ = $(X386SRC)/vga16/vga16Conf.o
 VGA16CONFSUBDIR = $(X386SRC)/vga16
      VGA16BUILD = -DBUILD_VGA16

   VGA16CONFOBJS = $(VGA16CONFOBJ)
VGA16CONFSUBDIRS = $(VGA16CONFSUBDIR)

      VGACONFOBJ = $(X386SRC)/vga256/vga256Conf.o
   VGACONFSUBDIR = $(X386SRC)/vga256
        VGABUILD = -DBUILD_VGA256

    X386CONFOBJS = $(VGACONFOBJ)
 X386CONFSUBDIRS = $(VGACONFSUBDIR)

       S3CONFOBJ = $(X386SRC)/accel/s3/s3Conf.o
    S3CONFSUBDIR = $(X386SRC)/accel/s3

 X386SCREENFLAGS = $(VGA2BUILD) $(HGA2BUILD) $(BDM2BUILD) $(VGA16BUILD) $(VGABUILD)

# operating system:  Unix System V/386 Release 4.x

# -------------------------------------------------------------------------
# site-specific configuration parameters that go after
# the platform-specific parameters - edit site.def to change

# $XFree86: mit/config/site.def,v 2.41 1994/03/07 13:53:40 dawes Exp $
# site:  $XConsortium: site.def,v 1.2 91/07/30 20:26:44 rws Exp $

            SHELL = /bin/sh

              TOP = ../../.
      CURRENT_DIR = ./man/Xt

               AR = ar cq
  BOOTSTRAPCFLAGS =  -DSVR4 -DSYSV386
               CC = gcc
               AS = as
              LEX = lex
           LEXLIB =
             YACC = yacc

         COMPRESS = compress
              CPP = /lib/cpp $(STD_CPP_DEFINES)
    PREPROCESSCMD = gcc -E $(STD_CPP_DEFINES)
          INSTALL = $(SCRIPTSRC)/bsdinst.sh
               LD = /bin/ld
             LINT = lint
      LINTLIBFLAG = -o
         LINTOPTS = -ax
               LN = ln -s
             MAKE = make
               MV = mv
               CP = cp

               RM = rm -f
            TROFF = psroff
         MSMACROS = -ms
              TBL = tbl
              EQN = eqn
            NROFF = nroff
             NEQN = neqn
     STD_INCLUDES =
  STD_CPP_DEFINES =  -DSVR4 -DSYSV386
      STD_DEFINES =  -DSVR4 -DSYSV386
 EXTRA_LOAD_FLAGS =
  EXTRA_LIBRARIES = -lsocket -lnsl
     OS_LIBRARIES =
             TAGS = ctags

    SHAREDCODEDEF =
         SHLIBDEF =

    PROTO_DEFINES =

     INSTPGMFLAGS = -s

     INSTBINFLAGS = -m 0755
     INSTUIDFLAGS = -m 4755
     INSTLIBFLAGS = -m 0644
     INSTINCFLAGS = -m 0444
     INSTMANFLAGS = -m 0444
     INSTDATFLAGS = -m 0444
    INSTKMEMFLAGS = -m 4755

      PROJECTROOT = /usr/X11R5

     TOP_INCLUDES = -I$(TOP)

      CDEBUGFLAGS = -O2
        CCOPTIONS = -m486 -fpcc-struct-return -Di386
    ANSICCOPTIONS = -ansi

        LDRUNPATH =
       LDLINKPATH = LdLinkPath

      ALLINCLUDES = $(INCLUDES) $(EXTRA_INCLUDES) $(TOP_INCLUDES) $(STD_INCLUDES)
       ALLDEFINES = $(ALLINCLUDES) $(STD_DEFINES) $(EXTRA_DEFINES) $(PROTO_DEFINES) $(DEFINES)
           CFLAGS = $(ANSICCOPTIONS) $(CDEBUGFLAGS) $(CCOPTIONS) $(ALLDEFINES)
        LINTFLAGS = $(LINTOPTS) -DLINT $(ALLDEFINES)

           LDLIBS = -L$(USRLIBDIR) $(OS_LIBRARIES) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)

        LDOPTIONS = $(ANSICCOPTIONS) $(CDEBUGFLAGS) $(CCOPTIONS) $(LOCAL_LDFLAGS) $(LDRUNPATH)

   LDCOMBINEFLAGS = -r
      DEPENDFLAGS =

        MACROFILE = x386.cf
           RM_CMD = $(RM) *.CKP *.ln *.BAK *.bak *.o core errs ,* *~ *.a .emacs_* tags TAGS make.log MakeOut

    IMAKE_DEFINES =

         IRULESRC = $(CONFIGSRC)
        IMAKE_CMD = $(NEWTOP)$(IMAKE) -I$(NEWTOP)$(IRULESRC) $(IMAKE_DEFINES)

     ICONFIGFILES = $(IRULESRC)/Imake.tmpl $(IRULESRC)/Imake.rules \
			$(IRULESRC)/Project.tmpl $(IRULESRC)/site.def \
			$(IRULESRC)/$(MACROFILE) $(EXTRA_ICONFIGFILES)

# -------------------------------------------------------------------------
# X Window System Build Parameters
# $XFree86: mit/config/Project.tmpl,v 2.5 1994/02/27 11:25:48 dawes Exp $
# $XConsortium: Project.tmpl,v 1.138.1.1 92/11/11 09:49:19 rws Exp $

_percentC_ = %C

# -------------------------------------------------------------------------
# X Window System make variables; this need to be coordinated with rules

          PATHSEP = /
        USRLIBDIR = /usr/X11R5/lib
           BINDIR = /usr/X11R5/bin
          INCROOT = /usr/X11R5/include
     BUILDINCROOT = $(TOP)
      BUILDINCDIR = $(BUILDINCROOT)/X11
      BUILDINCTOP = ..
           INCDIR = $(INCROOT)/X11
           ADMDIR = /usr/adm
           LIBDIR = $(USRLIBDIR)/X11
        CONFIGDIR = $(LIBDIR)/config
       LINTLIBDIR = $(USRLIBDIR)/lint

          FONTDIR = $(LIBDIR)/fonts
         XINITDIR = $(LIBDIR)/xinit
           XDMDIR = $(LIBDIR)/xdm
           TWMDIR = $(LIBDIR)/twm
          MANPATH = /usr/X11R5/man
    MANSOURCEPATH = $(MANPATH)/man
        MANSUFFIX = 1x
     LIBMANSUFFIX = 3x
    FILEMANSUFFIX = 4
           MANDIR = $(MANSOURCEPATH)1
        LIBMANDIR = $(MANSOURCEPATH)3
       FILEMANDIR = $(MANSOURCEPATH)4
           NLSDIR = $(LIBDIR)/nls
        PEXAPIDIR = $(LIBDIR)/PEX
      XAPPLOADDIR = $(LIBDIR)/app-defaults
       FONTCFLAGS = -t
       LINKKITDIR = $(USRLIBDIR)/Server

     INSTAPPFLAGS = $(INSTDATFLAGS)

            IMAKE = $(IMAKESRC)/imake
           DEPEND = $(DEPENDSRC)/gccmakedep
              RGB = $(RGBSRC)/rgb

            FONTC = $(BDFTOPCFSRC)/bdftopcf

        MKFONTDIR = $(MKFONTDIRSRC)/mkfontdir
        MKDIRHIER = /bin/sh $(SCRIPTSRC)/mkdirhier.sh

        CONFIGSRC = $(TOP)/config
       DOCUTILSRC = $(TOP)/doc/util
        CLIENTSRC = $(TOP)/clients
          DEMOSRC = $(TOP)/demos
           LIBSRC = $(TOP)/lib
          FONTSRC = $(TOP)/fonts
       INCLUDESRC = $(TOP)/X11
        SERVERSRC = $(TOP)/server
          UTILSRC = $(TOP)/util
        SCRIPTSRC = $(UTILSRC)/scripts
       EXAMPLESRC = $(TOP)/examples
       CONTRIBSRC = $(TOP)/../contrib
           DOCSRC = $(TOP)/doc
           RGBSRC = $(TOP)/rgb
        DEPENDSRC = $(SCRIPTSRC)
         IMAKESRC = $(CONFIGSRC)
         XAUTHSRC = $(LIBSRC)/Xau
          XLIBSRC = $(LIBSRC)/X
           XMUSRC = $(LIBSRC)/Xmu
       TOOLKITSRC = $(LIBSRC)/Xt
       AWIDGETSRC = $(LIBSRC)/Xaw
       OLDXLIBSRC = $(LIBSRC)/oldX
      XDMCPLIBSRC = $(LIBSRC)/Xdmcp
      BDFTOSNFSRC = $(FONTSRC)/bdftosnf
      BDFTOSNFSRC = $(FONTSRC)/clients/bdftosnf
      BDFTOPCFSRC = $(FONTSRC)/clients/bdftopcf
     MKFONTDIRSRC = $(FONTSRC)/clients/mkfontdir
         FSLIBSRC = $(FONTSRC)/lib/fs
    FONTSERVERSRC = $(FONTSRC)/server
     EXTENSIONSRC = $(TOP)/extensions
         XILIBSRC = $(EXTENSIONSRC)/lib/xinput
        PEXLIBSRC = $(EXTENSIONSRC)/lib/PEXlib
      PHIGSLIBSRC = $(EXTENSIONSRC)/lib/PEX

# $XConsortium: sv4Lib.tmpl,v 1.4.1.1 92/11/11 09:57:17 rws Exp $

SHLIBLDFLAGS = -G -z text
PICFLAGS = -fPIC

  DEPEXTENSIONLIB =
     EXTENSIONLIB = -L$(EXTENSIONSRC)/lib -lXext

          DEPXLIB = $(DEPEXTENSIONLIB)
             XLIB = $(EXTENSIONLIB) -L$(XLIBSRC) -lX11

        DEPXMULIB =
       XMULIBONLY = -L$(XMUSRC) -lXmu
           XMULIB = $(XMULIBONLY) -z nodefs

       DEPOLDXLIB =
          OLDXLIB = -L$(OLDXLIBSRC) -loldX

      DEPXTOOLLIB =
         XTOOLLIB = -L$(TOOLKITSRC) -lXt

        DEPXAWLIB =
           XAWLIB = -L$(AWIDGETSRC) -lXaw

        DEPXILIB =
           XILIB = -L$(XILIBSRC) -lXi

        DEPPEXLIB =
         PEXLIB = -L$(PEXLIBSRC) -lPEX5

        SOXLIBREV = 5.0
          SOXTREV = 5.0
         SOXAWREV = 5.0
        SOOLDXREV = 5.0
         SOXMUREV = 5.0
        SOXEXTREV = 5.0
      SOXINPUTREV = 5.0
         SOPEXREV = 1.0

      DEPXAUTHLIB = $(XAUTHSRC)/libXau.a
         XAUTHLIB =  $(DEPXAUTHLIB)
      DEPXDMCPLIB = $(XDMCPLIBSRC)/libXdmcp.a
         XDMCPLIB =  $(DEPXDMCPLIB)

        DEPPHIGSLIB = $(PHIGSLIBSRC)/libphigs.a
           PHIGSLIB =  $(DEPPHIGSLIB)

       DEPXBSDLIB = $(LIBSRC)/Berk/libXbsd.a
          XBSDLIB =  $(DEPXBSDLIB)

 LINTEXTENSIONLIB = $(EXTENSIONSRC)/lib/llib-lXext.ln
         LINTXLIB = $(XLIBSRC)/llib-lX11.ln
          LINTXMU = $(XMUSRC)/llib-lXmu.ln
        LINTXTOOL = $(TOOLKITSRC)/llib-lXt.ln
          LINTXAW = $(AWIDGETSRC)/llib-lXaw.ln
           LINTXI = $(XILIBSRC)/llib-lXi.ln
          LINTPEX = $(PEXLIBSRC)/llib-lPEX5.ln
        LINTPHIGS = $(PHIGSLIBSRC)/llib-lphigs.ln

          DEPLIBS = $(DEPXAWLIB) $(DEPXMULIB) $(DEPXTOOLLIB) $(DEPXLIB)

         DEPLIBS1 = $(DEPLIBS)
         DEPLIBS2 = $(DEPLIBS)
         DEPLIBS3 = $(DEPLIBS)

# -------------------------------------------------------------------------
# Imake rules for building libraries, programs, scripts, and data files
# $XFree86: mit/config/Imake.rules,v 2.1 1993/09/29 11:06:00 dawes Exp $
# rules:  $XConsortium: Imake.rules,v 1.123 91/09/16 20:12:16 rws Exp $

# -------------------------------------------------------------------------
# start of Imakefile

MANDIR = $(LIBMANDIR)
MANSUFFIX = $(LIBMANSUFFIX)

all::

depend:

install.man:: XtAddCbk.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtAddCbk.man $(DESTDIR)$(MANDIR)/XtAddCallback.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtAddCallback.$(MANSUFFIX) > $${TMP}; \
	for i in XtAddCallbacks XtRemoveCallback XtRemoveCallbacks XtRemoveAllCallbacks; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtAddEHand.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtAddEHand.man $(DESTDIR)$(MANDIR)/XtAddEventHandler.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtAddEventHandler.$(MANSUFFIX) > $${TMP}; \
	for i in XtAddRawEventHandler XtRemoveEventHandler XtRemoveRawEventHandler; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtAddETReg.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtAddETReg.man $(DESTDIR)$(MANDIR)/XtAddExposureToRegion.$(MANSUFFIX)

install.man:: XtAddGrab.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtAddGrab.man $(DESTDIR)$(MANDIR)/XtAddGrab.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtAddGrab.$(MANSUFFIX) > $${TMP}; \
	for i in XtRemoveGrab; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtAppAAct.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtAppAAct.man $(DESTDIR)$(MANDIR)/XtAppAddActions.$(MANSUFFIX)

install.man:: XtAppAC.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtAppAC.man $(DESTDIR)$(MANDIR)/XtAppAddConverter.$(MANSUFFIX)

install.man:: XtAppAI.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtAppAI.man $(DESTDIR)$(MANDIR)/XtAppAddInput.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtAppAddInput.$(MANSUFFIX) > $${TMP}; \
	for i in XtRemoveInput; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtAppATO.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtAppATO.man $(DESTDIR)$(MANDIR)/XtAppAddTimeOut.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtAppAddTimeOut.$(MANSUFFIX) > $${TMP}; \
	for i in XtRemoveTimeOut; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtAppAWP.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtAppAWP.man $(DESTDIR)$(MANDIR)/XtAppAddWorkProc.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtAppAddWorkProc.$(MANSUFFIX) > $${TMP}; \
	for i in XtRemoveWorkProc; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtAppCSh.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtAppCSh.man $(DESTDIR)$(MANDIR)/XtAppCreateShell.$(MANSUFFIX)

install.man:: XtAppE.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtAppE.man $(DESTDIR)$(MANDIR)/XtAppError.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtAppError.$(MANSUFFIX) > $${TMP}; \
	for i in XtAppSetErrorHandler XtAppSetWarningHandler XtAppWarning; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtAppEM.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtAppEM.man $(DESTDIR)$(MANDIR)/XtAppErrorMsg.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtAppErrorMsg.$(MANSUFFIX) > $${TMP}; \
	for i in XtAppSetErrorMsgHandler XtAppSetWarningMsgHandler XtAppWarningMsg; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtAppGEDB.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtAppGEDB.man $(DESTDIR)$(MANDIR)/XtAppGetErrorDatabase.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtAppGetErrorDatabase.$(MANSUFFIX) > $${TMP}; \
	for i in XtAppGetErrorDatabaseText; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtAppGSTO.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtAppGSTO.man $(DESTDIR)$(MANDIR)/XtAppGetSelectionTimeout.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtAppGetSelectionTimeout.$(MANSUFFIX) > $${TMP}; \
	for i in XtAppSetSelectionTimeout; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtAppNEv.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtAppNEv.man $(DESTDIR)$(MANDIR)/XtAppNextEvent.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtAppNextEvent.$(MANSUFFIX) > $${TMP}; \
	for i in XtAppPending XtAppPeekEvent XtAppProcessEvent XtDispatchEvent XtAppMainLoop; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtBEMask.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtBEMask.man $(DESTDIR)$(MANDIR)/XtBuildEventMask.$(MANSUFFIX)

install.man:: XtCallAFoc.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtCallAFoc.man $(DESTDIR)$(MANDIR)/XtCallAcceptFocus.$(MANSUFFIX)

install.man:: XtCallCbks.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtCallCbks.man $(DESTDIR)$(MANDIR)/XtCallCallbacks.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtCallCallbacks.$(MANSUFFIX) > $${TMP}; \
	for i in XtHasCallbacks; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtClass.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtClass.man $(DESTDIR)$(MANDIR)/XtClass.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtClass.$(MANSUFFIX) > $${TMP}; \
	for i in XtSuperClass XtIsSubclass XtCheckSubclass XtIsComposite XtIsManaged; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtConfWid.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtConfWid.man $(DESTDIR)$(MANDIR)/XtConfigureWidget.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtConfigureWidget.$(MANSUFFIX) > $${TMP}; \
	for i in XtMoveWidget XtResizeWidget; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtConvert.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtConvert.man $(DESTDIR)$(MANDIR)/XtConvert.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtConvert.$(MANSUFFIX) > $${TMP}; \
	for i in XtDirectConvert; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtCreACon.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtCreACon.man $(DESTDIR)$(MANDIR)/XtCreateApplicationContext.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtCreateApplicationContext.$(MANSUFFIX) > $${TMP}; \
	for i in XtDestroyApplicationContext XtWidgetToApplicationContext XtToolkitInitialize; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtCrePSh.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtCrePSh.man $(DESTDIR)$(MANDIR)/XtCreatePopupShell.$(MANSUFFIX)

install.man:: XtCreWid.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtCreWid.man $(DESTDIR)$(MANDIR)/XtCreateWidget.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtCreateWidget.$(MANSUFFIX) > $${TMP}; \
	for i in XtCreateManagedWidget XtDestroyWidget; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtCreWin.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtCreWin.man $(DESTDIR)$(MANDIR)/XtCreateWindow.$(MANSUFFIX)

install.man:: XtDisplay.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtDisplay.man $(DESTDIR)$(MANDIR)/XtDisplay.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtDisplay.$(MANSUFFIX) > $${TMP}; \
	for i in XtParent XtScreen XtWindow; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtDisplayI.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtDisplayI.man $(DESTDIR)$(MANDIR)/XtDisplayInitialize.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtDisplayInitialize.$(MANSUFFIX) > $${TMP}; \
	for i in XtOpenDisplay XtDatabase XtCloseDisplay; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtGetGC.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtGetGC.man $(DESTDIR)$(MANDIR)/XtGetGC.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtGetGC.$(MANSUFFIX) > $${TMP}; \
	for i in XtReleaseGC; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtGetRList.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtGetRList.man $(DESTDIR)$(MANDIR)/XtGetResourceList.$(MANSUFFIX)

install.man:: XtGetSVal.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtGetSVal.man $(DESTDIR)$(MANDIR)/XtGetSelectionValue.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtGetSelectionValue.$(MANSUFFIX) > $${TMP}; \
	for i in XtGetSelectionValues; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtGetSres.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtGetSres.man $(DESTDIR)$(MANDIR)/XtGetSubresources.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtGetSubresources.$(MANSUFFIX) > $${TMP}; \
	for i in XtGetApplicationResources; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtMakGReq.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtMakGReq.man $(DESTDIR)$(MANDIR)/XtMakeGeometryRequest.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtMakeGeometryRequest.$(MANSUFFIX) > $${TMP}; \
	for i in XtMakeResizeRequest; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtMalloc.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtMalloc.man $(DESTDIR)$(MANDIR)/XtMalloc.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtMalloc.$(MANSUFFIX) > $${TMP}; \
	for i in XtCalloc XtRealloc XtFree XtNew XtNewString; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtManChild.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtManChild.man $(DESTDIR)$(MANDIR)/XtManageChildren.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtManageChildren.$(MANSUFFIX) > $${TMP}; \
	for i in XtManageChild XtUnmanageChildren XtUnmanageChild; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtMapWid.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtMapWid.man $(DESTDIR)$(MANDIR)/XtMapWidget.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtMapWidget.$(MANSUFFIX) > $${TMP}; \
	for i in XtSetMappedWhenManaged XtUnmapWidget; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtNameTWid.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtNameTWid.man $(DESTDIR)$(MANDIR)/XtNameToWidget.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtNameToWidget.$(MANSUFFIX) > $${TMP}; \
	for i in XtWidgetToWindow; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtOffset.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtOffset.man $(DESTDIR)$(MANDIR)/XtOffset.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtOffset.$(MANSUFFIX) > $${TMP}; \
	for i in XtNumber; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtOwnSel.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtOwnSel.man $(DESTDIR)$(MANDIR)/XtOwnSelection.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtOwnSelection.$(MANSUFFIX) > $${TMP}; \
	for i in XtDisownSelection; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtParATab.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtParATab.man $(DESTDIR)$(MANDIR)/XtParseAcceleratorTable.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtParseAcceleratorTable.$(MANSUFFIX) > $${TMP}; \
	for i in XtInstallAccelerators XtInstallAllAccelerators; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtParTTab.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtParTTab.man $(DESTDIR)$(MANDIR)/XtParseTranslationTable.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtParseTranslationTable.$(MANSUFFIX) > $${TMP}; \
	for i in XtAugmentTranslations XtOverrideTranslations XtUninstallTranslations; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtPopdown.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtPopdown.man $(DESTDIR)$(MANDIR)/XtPopdown.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtPopdown.$(MANSUFFIX) > $${TMP}; \
	for i in XtCallbackPopdown MenuPopdown; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtPopup.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtPopup.man $(DESTDIR)$(MANDIR)/XtPopup.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtPopup.$(MANSUFFIX) > $${TMP}; \
	for i in XtCallbackNone XtCallbackNonexclusive XtCallbackExclusive MenuPopup; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtQueryGeo.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtQueryGeo.man $(DESTDIR)$(MANDIR)/XtQueryGeometry.$(MANSUFFIX)

install.man:: XtRealize.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtRealize.man $(DESTDIR)$(MANDIR)/XtRealizeWidget.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtRealizeWidget.$(MANSUFFIX) > $${TMP}; \
	for i in XtIsRealized XtUnrealizeWidget; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtSetArg.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtSetArg.man $(DESTDIR)$(MANDIR)/XtSetArg.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtSetArg.$(MANSUFFIX) > $${TMP}; \
	for i in XtMergeArgLists; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtSetKFoc.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtSetKFoc.man $(DESTDIR)$(MANDIR)/XtSetKeyboardFocus.$(MANSUFFIX)

install.man:: XtSetKTr.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtSetKTr.man $(DESTDIR)$(MANDIR)/XtSetKeyTranslator.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtSetKeyTranslator.$(MANSUFFIX) > $${TMP}; \
	for i in XtTranslateKeycode XtRegisterCaseConverter XtConvertCase; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtSetSens.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtSetSens.man $(DESTDIR)$(MANDIR)/XtSetSensitive.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtSetSensitive.$(MANSUFFIX) > $${TMP}; \
	for i in XtIsSensitive; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtSetVal.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtSetVal.man $(DESTDIR)$(MANDIR)/XtSetValues.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename $(MANDIR)`/XtSetValues.$(MANSUFFIX) > $${TMP}; \
	for i in XtSetSubvalues XtGetValues XtGetSubvalues; do (set -x; \
	$(INSTALL) -c $(INSTMANFLAGS) $${TMP} $(DESTDIR)$(MANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man:: XtStrCW.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtStrCW.man $(DESTDIR)$(MANDIR)/XtStringConversionWarning.$(MANSUFFIX)

install.man:: XtTransC.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) XtTransC.man $(DESTDIR)$(MANDIR)/XtTranslateCoordinates.$(MANSUFFIX)

# -------------------------------------------------------------------------
# common rules for all Makefiles - do not edit

emptyrule::

clean::
	$(RM_CMD) "#"*

Makefile:: $(IMAKE)

$(IMAKE):
	@(cd $(IMAKESRC); if [ -f Makefile ]; then \
	echo "checking $@ in $(IMAKESRC) first..."; $(MAKE) all; else \
	echo "bootstrapping $@ from Makefile.ini in $(IMAKESRC) first..."; \
	$(MAKE) -f Makefile.ini BOOTSTRAPCFLAGS="$(BOOTSTRAPCFLAGS)"; fi; \
	echo "okay, continuing in $(CURRENT_DIR)")

Makefile::
	-@if [ -f Makefile ]; then set -x; \
	$(RM) Makefile.bak; $(MV) Makefile Makefile.bak; \
	else exit 0; fi
	$(IMAKE_CMD) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT_DIR)

tags::
	$(TAGS) -w *.[ch]
	$(TAGS) -xw *.[ch] > TAGS

# -------------------------------------------------------------------------
# empty rules for directories that do not have SUBDIRS - do not edit

install::
	@echo "install in $(CURRENT_DIR) done"

install.man::
	@echo "install.man in $(CURRENT_DIR) done"

install.linkkit::
	@echo "install.linkkit in $(CURRENT_DIR) done"

Makefiles::

includes::

# -------------------------------------------------------------------------
# dependencies generated by makedepend

