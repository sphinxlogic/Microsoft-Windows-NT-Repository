Customisation

INDEX
    RESOURCES
    ACTIONS and KEY BINDINGS
    THE MINIBUFFER
    THE MINIBUFFER MENU
    THE KEYBOARD MACRO
    SERVER MODE
    UNDO

RESOURCES

Before you can perform any customisation through resources it is necessary to know the widget structure of aXe. The hierarchy, including the first editing window, is shown below. All widgets are listed by instance and class name. Most of the widgets are custom widgets developed specifically for aXe. Where this is the case the superclass is enclosed in parentheses

    fileServer  FileNominatorWindow (TransientShell)

or

    server  TopLevelShell
       table   XpTable
          waiter   Command
          show     AxeMenuButton (MenuButton)
          poleaxe  Command
          help     Command

    mMove   AxeSimpleMenu (Simplemenu)
    mSearch AxeSimpleMenu (Simplemenu)
    mInsert AxeSimpleMenu (Simplemenu)
    mDelete AxeSimpleMenu (Simplemenu)
    mHelp   AxeSimpleMenu (Simplemenu)
    mMisc   AxeSimpleMenu (Simplemenu)
    mWindow AxeSimpleMenu (Simplemenu)
    mBuffer AxeSimpleMenu (Simplemenu)
    mShow   AxeSimpleMenu (Simplemenu)
    mFile   AxeSimpleMenu (Simplemenu)
    mQuit   AxeSimpleMenu (Simplemenu)
    mLogo   AxeSimpleMenu (Simplemenu)
    mMini   AxeSimpleMenu (SimpleMenu)

    00 AxeWindow (TopLevelShell)
       panes AxeEditor (Composite)
           fileName   Label
           infoBar    Label
           buttons    XpTable
               moveMenu   AxeMenuButton (MenuButton)
               searchMenu AxeMenuButton (MenuButton)
               insertMenu AxeMenuButton (MenuButton)
               deleteMenu AxeMenuButton (MenuButton)
               helpMenu   AxeMenuButton (MenuButton)
               miscMenu   AxeMenuButton (MenuButton)
               fontMenu   AxeMenuButton (MenuButton)
                    mFont   AxeSimpleMenu (SimpleMenu)  
               windowMenu AxeMenuButton (MenuButton)
               bufferMenu AxeMenuButton (MenuButton)
               showMenu   AxeMenuButton (MenuButton)
               fileMenu   AxeMenuButton (MenuButton)
               quitMenu   AxeMenuButton (MenuButton)
               axeLogo    AxeMenuButton (MenuButton)
           edDeck     AxeTextDeck (Composite)
               ed         AxeText (AxeiiText) (AsciiText)
               ed         AxeText (AxeiiText) (AsciiText)
               ...
               ...
           miniMenu   AxeMenuButton (MenuButton)
           miniBuffer AsciiText

    01 AxeWindow (TopLevelShell)
       panes AxeEditor (Composite)
           ...
           ...

All of the above information, apart from the superclasses, can be obtained by running the editres application at Release 5 of X.


The following application resources are recognised

fileServer
   Setting this boolean resource causes aXe to start up in server mode with a FileNominator as the server window. 

server
   Setting this boolean resource, the default, causes aXe to start up in server mode. It has lower precedence than fileServer. If neither is set then the application terminates when the last window is closed.

windows
   This resource is used to stipulate how many initial windows should be opened. If a greater number of files than the value of this resource is specified on the command line, then the value is ignored. 

The associated command line keywords -noserver and -windows are supported. -noserver is equivalent to server:False; -windows requires a numeric argument.


The following AxeWindow resources are recognised

fileTitle
   If this boolean resource is set to True then the name of a window will be set to the pathname of the file currently being edited in it, prefixed by "axe:". The window's icon name is set to the last component of the path name, prefixed in the same fashion.

fileTitlePrefix
   This resource allows the user to alter the prefix that is used when the fileTitle resource is True.

iconNamePrefix
   This resource allows the user to alter the prefix that is applied to a window's icon name when the fileTitle resource is True.


The following AxeEditor resources are recognised

buttons
   Setting this resource selects the default button interface, unless buttonList below is also set.

buttonList
   This resource enables the user to specify both which buttons are to be shown and what their layout is to be. Its value is a semi-colon separated list of rows of space separated button names. '-' may be used in place of a button name in order to skip a column position. The names of the button widgets are presented below. 'buttonList' implies 'buttons'.

focusToText
   Setting this boolean resource has the effect of altering the keyboard focus so that keystrokes occurring in the name section, information bar or button area are redirected to the main text widget, i.e. the mouse pointer can be anywhere within the main application window for editing to take place.

fontList
   This resource defines the entries in a menu of fonts from which a choice may be made at run time and applied to the text buffer of the current window. It is a whitespace separated list of names. If a name contains a ':' then the left hand part will be used as the label of the entry and the right hand part will be taken as the name of a font, otherwise the whole name will be used for both purposes. The items in the list are in addition to the default entry 'Default' which corresponds to the original font.

infoTimeout
   This resource specifies how long a message should remain in the information bar if no other message is generated in that time. The value should be given as a number of seconds. A value of 0, the default, disables the feature, thus each message remains displayed until the next is generated. The information bar reverts to displaying the version number if a timeout occurs.

menuList
   This resourse is a space separated list of menu names specifying which menu buttons should appear in the menu bar and in what order. The default value is

  move search insert delete help misc font window buffer show file quit logo

i.e. the standard arrangement. If logo doesn't appear in the list then it will be added at the end. Wherever it appears it will stretch to occupy any otherwise unused space.

miniMenu
   This resource defines the entries to be displayed in the menu associated with the minibuffer. It is a whitespace separated list of names. If a name contains a ':' then the left hand part will be used as the label of the entry and the right hand part will be taken as the Unix command to be run, otherwise the whole name will be used for both purposes. A '|' causes generation of a dividing line in the menu.

suppressFilename
   This boolean resource is used to suppress display of the filename pane. This is most likely to be desired when the fileTitle resource has also been set, otherwise the filename will be displayed twice in adjacent sections of the window. If both of these resources are set then the modification state of the file is also displayed in the title bar.

suppressInfobar
   This boolean resource is used to suppress display of the information bar pane. Of course, then, any error messages which are displyed there will be lost.

suppressMinibuffer
   This boolean resource is used to suppress disply of the minibuffer.


The following AxeText resources are recognised

backupNamePrefix
backupNameSuffix
    These resources only apply when enableBackups is true. The backup name is the concatenation of the first, the filename, and the second, in that order. The defaults are the empty string and ".BAK" respectively.

enableBackups
    This boolean resource controls whether backups of files are made before they are saved for the first time.

grabOnPopup
    This boolean resource controls whether popups grab events. The default is False. When events are grabbed it is not possible to do anything elsewhere in the application until the popup is popped down.  


The following AxeiiText resources are recognised

blinkPeriod
   This resource specifies how long the matching '(', '{' or '[' is  highlit when a ')', '}' or ']' is typed, and is expressed in  milliseconds. The default is 500, i.e. half a second. Setting the  value to 0 switches off the feature.

blockCaret
   This boolean resource specifies whether the default caret indicating the insertion point should be replaced by an inbuilt block caret.

WARNING: Since the introduction of blockCaret (above) and caretBitmap (below) it has come to light that the Tab key has no visible effect when either has been selected, although the Tab character is inserted into the file. Neither the cause nor a fix for this problem has been found.

caretBitmap
   This resource names the pathname of a file containing a bitmap that should be used as the caret that indicates the insertion point. This resource takes precedence over blockCaret if both are set.

columns
   This resource specifies the desired width in characters. It overrides any setting of the width in pixels.

expandTabs
   This resource specifies whether tabs should be expanded into spaces or not. The default is False. The resource only has an effect if the Tab key is bound to the action insert-or-expand-tab - which it is by default.

rows
   This resource specifies the desired height in characters. It overrides any setting of the height in pixels.

tabEvery
   This resource is used to request that tab stops be set every tabEvery character positions. The default value is 8.

undo
   This resource specifies whether undo information should be kept. The default is True.

undoLevel
   This resource specifies for how many recent operations undo information should be kept. The default value is 1. A value of 0 implies keeping unlimited information, but remember that doing this could incur excessive memory usage costs.


The application geometry resource (-geometry keyword) is used as a default for all windows opened. It is also possible to apply geometry specifications one level down in the hierarchy at the individual window (AxeWindow) level. Windows are named 00, 01, 02, etc. If windows are deleted the lowest missing number is used as the instance name for the next window to be opened. This is only relevant if geometry resource specifications for named windows are in use, e.g.

    Axe.windows:     2
    Axe.00.geometry: 80x32+0+0
    Axe.01.geometry: +0-0

The menus consist of AxeSmeBSB objects. The names of the objects for each of the menus are these:-

    mMove:   mbeg, mend, mup, mdown, mtop, mbot
    mSearch: sbtext, sftext, sline, scaret, sbsel, sfsel
    mInsert: ifile, isel, ipaste
    mDelete: dword, dline, dsel, dcut
    mHelp:   hgnrl, hbind, hcust, hnom
    mMisc:   mundo, mwhere, mform, mcentre, mhcentr, mpref
    mWindow: wnew, wfull, wclose, wclall, wicon, wdeicon
    mBuffer: bempty, bfull, bclear, bclose
    mFile:   fsvex, fsvall, fsave, fsvas, frvrt, fload
    mQuit:   qquit, qsvex, qsvclw, qsvclb

Note that lists cannot be given for mFont and mShow, the showMenu buttons' menu. The composition of mFont is not known until startup time while that of mShow varies as windows are created and deleted. The miniMenu will be discussed later under the MINIBUFFER section.

The buttons in the button interface are AxeCommand widgets. Their names are identical the corresponding menu entry AxeSmeBSB object names, 

Thus, the following resources would be sufficient to change the labels of the two 'Load' entries to 'Edit'.

    *fload.label: Edit

Prefixing that resource specification by *XpTable or by *buttons would be sufficient to refer to just the button widget named 'fload'.

Here is an example of how to specify the 'buttonList' resource.

*buttonList: sbsel sfsel    -   dsel   -   mform wnew   - - fsave; \
                -  scaret  isel dline  -     -   wclose

The ';' after fsave terminates the first row of buttons and the '-'s indicate empty column positions, so the layout of the resource value attempts to mimic the actual layout as it will appear in aXe's windows.


ACTIONS and KEY BINDINGS

The main editing subwindow of a top-level aXe window is derived from an Athena Text Widget. Hence all of the default bindings of keys to Text Widget action routines apply. The Text Widget is fully described in 'Athena Widget Set - C Language InterFace' of the 'MIT X Window System Manual Set', but for your convenience an extract from the section describing the default key bindings can be viewed on-line via the 'Bindings' entry of the 'Help' menu.  aXe extends the functionality of the Text Widget by providing additional action routines, but it does not set up any default key bindings for them, i.e. the new features are only available through the menu and button interfaces, or the minibuffer. If you wish to set up your own bindings then you need to know the names of the new action routines.

They are
 
        goto-line
        search-caret
        forward-search-selection
        backward-search-selection

        include-file
        include-selection
        paste

        delete-word
        delete-line
        cut

	undo
        where
        centre-line
        set-preferences

        new-window
        close-window
        close-all
        iconify-all
        deiconify-all

        new-buffer
        clear-buffer
        close-buffer

        save-and-close
        save-all
        save-file
        save-as
        load-file
        reload-file

        size
        match-parens
        find-match
        re-search
        forward-line
        backward-line
        delete-selection-or-previous-character
        insert-or-expand-tab
        keymap

        set-mark
        highlight-region
        kill-region
        copy-region
        yank-region

It should be obvious which menu entries/buttons those in the first eight groups correspond to.

include-file inserts a file using the file selector, as distinct from insert-file, the Text Widget action bound to Meta-q that brings up the Text Widget's own insertFile dialogue box.

new-window and new-buffer may be given the optional argument "load", causing the file selector to be popped up for the new window or buffer immediately it is created.

Without an argument save-and-close saves and closes all buffers. With the argument "window" it saves and closes the current window. With the argument "buffer" it saves and closes the current buffer.

The remaining actions are not available via the menus or buttons and hence must be bound to keystrokes or typed into the minibuffer (see MINIBUFFER below).

size reports the size of the editing buffer in the information bar.

match-parens, if bound to ')', '}' or ']', causes the matching closing bracket to be highlit for a period of time determined by the value of the blinkPeriod resource.

find-match cause a search to be made for the character matching the '(', ')', '{', '}', '[' or ']' immediatley to the right of the caret, and if successful, highlighting the text between the two characters, inclusive.

re-search is like the standard search action except that regular expression searching is performed. It must be supplied with a direction argument of 'forward' or 'backward'. search and re-search share the same popup. The main observable difference when regular expression searching is in effect is that its title is 'RE search' rather than 'search'. There are also minor differences in the messages when reporting errors. Note that there is a slight anomaly in that if normal searching is selected while the popup is already popped up for regular expression searching then the switchover does not actually take place. The simple solution is to cancel the popup first.

The forward/backward-line actions are similar to the Text Widgets's next/previous-line actions except that they maintain position within the line if at all possible, i.e. the cursor does not gravitate towards the left margin as ever shorter lines are encountered.

The delete-selection-or-previous-character action does what its name suggests.

insert-or-expand-tab is bound to the Tab key by default, and operates in conjunction with the expandTabs resource. If that resource is False then tabs are inserted otherwise an appropriate number of spaces to take the insertion point up to the next tab stop is inserted.

The keymap action enables an alternative set of bindings to be switched in. keymap takes a name as argument, which, together with the suffix Keymap, defines the name of a translations resource. A name of None restores the original translations, e.g.

*ed.translations:#override \n <Key>F1:keymap(foo) \n ...

*ed.fooKeymap.translations:<Key>F1:keymap(None) \n ...

The final set of actions allows selections to be manipulated via the keyboard. set-mark sets an invisible marker. It is initially at the beginning of the buffer. highlight-region highlights the region between the marker and the caret. kill-region deletes the region between the mark and the caret, and stores it in cut buffer 2. copy-region copies the region between the mark and the caret to cut buffer 2. yank-region inserts the contents of cut buffer 2 at the current insertion point.

Binding actions to keystrokes involves setting the translations resource of the Text Widget (instance name ed). Here is an example of how this might be done in a resources file.

Axe*ed.translations:   #override \n\
                       <Key>Down:   forward-line()  \n\
                       <Key>Up:     backward-line() \n\
                       <Key>Delete: delete-selection-or-previous-character()

Some of the features in aXe are implemented through setting ed's translations resource in the class resource file, but at Release 4 of X if you provide a value for the same resource it will completely override the application's. A mechanism, which aXe uses, has become available at Release 5 to overcome this difficulty. So if your aXe is an R5 one then you can skip the remainder of this section. 

If at R4 you don't want to lose any of the application's bindings then you will have to repeat in your value those you wish to keep. The features affected are the matching of parentheses and the reporting of the current line number on a button release. This is how they are implemented in the class resource file

Axe*ed.translations:   #override \n\
                       <Key>): match-parens() \n\
                       <Key>]: match-parens() \n\
                       <Key>}: match-parens() \n\
                       <Btn1Up>: extend-end(PRIMARY, CUT_BUFFER0) where() \n\
                       <Btn2Up>: where() \n\
                       <Btn3Up>: extend-end(PRIMARY, CUT_BUFFER0) where()

and the following is an example of how a user supplied value might look

Axe*ed.translations:   #override \n\
                       <Key>): match-parens() \n\
                       <Key>]: match-parens() \n\
                       <Key>}: match-parens() \n\
                       <Key>Down: forward-line() \n\
                       <Key>Up:   backward-line() \n\
                       <Key>Delete: delete-selection-or-previous-character()
                       Meta<Key>=: where()

The matching of parentheses has been kept but the reporting of the current line number has been implemented another way, viz. by binding to Meta-=. The Btn?Up actions are not repeated because what is left after removing the where() action is the default behaviour that is defined by the Text Widget.


THE MINIBUFFER

Commands corresponding to the two Search:Text operations plus Search:Line, Insert:File, File:SaveAs and File:Load can be entered directly into the minibuffer. The command names are styled after those of the Unix editor ed and are 

        /regular-expression
        ?regular-expression
        [0-9][0-9]*
        r filename
        w filename
        e filename


In addition  pipe and shell commands have been introduced. Their names are '|' and '!' respectively. 

Execution of pipe has the effect of replacing the selected text, if any, in the editing buffer by the result of filtering by the command specified in the remainder of the minibuffer. If no text is selected then the output of running the command specified as the pipe argument is inserted at the current insertion point. 

Execution of shell has the effect of passing the whole buffer or the selected text to the shell command specified as argument and displaying the output, if any, of that command in a new aXe window, unless a '>' occurs in the command, in which case it is assumed that the user wishes to handle the output themself.

The command names must occur in column 1 of the minibuffer, and whitespace preceding the argument of 'r', 'w', 'e', '|' and '!' commands is mandatory.

The minibuffer also recognises actions as commands. Thus it is not necessary restart aXe with new key bindings to experiment with untried features or to execute infrequently used actions - simply type them into the minibuffer, e.g. new-window() [or simply new-window] or new-window(load).

New action routines have been defined so that the minibuffer can be enabled from the editing buffer. When they are used the normal editing buffer translations are suspended and replaced by a minimal set of editing bindings that take effect in the minibuffer, i.e it is not necessary to move the mouse into the minibuffer to execute commands in it. If they are found to be inadequate the mouse can always be moved into the minibuffer to gain access to full range of Text Widget key bindings. The names of the action routines are

        mini-search
        mini-insert
        mini-saveas
        mini-load
        mini-pipe
        mini-shell

mini-search may be given an argument of 'forward' or 'backward'; the default is forward. When the command is mini-insert, mini-saveas or mini-load the minibuffer is initialised with the directory already associated with the editing buffer. mini-pipe and mini-shell may be given an argument with which to initialise the minibuffer, so frequently used filters can be set up via user defined key bindings. If the mini-pipe and mini-shell commands end with '\n' then they will be executed right away. Four other action routines have been defined. They are

        mini-clear
        mini-select
        mini-commit
        mini-abort

mini-clear enables and flushes the minibuffer. There is no command corresponding to Search:Line so mini-clear could be bound to a key for the purpose as it would provide an empty minibuffer awaiting the entry of a line number. mini-select enables the minibuffer without altering it, so the previous command can then be repeated by simply hitting the Return key. mini-commit executes the command  in the minibuffer. mini-abort is defined so that a minibuffer command can be aborted while the accelerators are in effect. The default minibuffer translations and accelerators (the bindings that get installed as the editing buffer translations when the minibuffer is enabled via the above action routines) have Return bound to mini-commit and mini-abort bound to both Escape and Ctrl-g.

In all cases except mini-search, hitting the Return key causes reinstatement of the editing buffer translations after execution of the minibuffer command. The reason for this is so that repeated searches can be made simply by continuing to hit the Return key. Thus it is necessary to explicitly abort search operations.

Note that the caret is only displayed in the minibuffer when it is active, either because the mouse pointer has been moved into it or because it has been enabled by execution of one of the mini- action routines, and further that the caret in the editing buffer is disabled in the latter case, although it won't always be easy to spot that that has happened.

Here are some typical bindings that might be used

        Meta<Key>G: mini-clear() 
        Ctrl<Key>S: mini-search() 
        Ctrl<Key>R: mini-search(backward) 
        Ctrl<Key>X,<Key>B: mini-select() 
        Ctrl<Key>X,<Key>O: mini-select() 
        Ctrl<key>X,Ctrl<Key>F: mini-load() 
        Ctrl<Key>X,Ctrl<Key>I: mini-insert() 
        Ctrl<Key>X,Ctrl<Key>W: mini-saveas() 
        Ctrl<Key>X,Ctrl<Key>X: mini-pipe("sed 's/^/> /'\n") 
        <Key>Print: mini-shell(lpr -Pprinter\n)

The second last example will cause each line of the selected text to be prefixed by '> ', i.e. it might be used to annotate a section of a mail message or news article being replied to. It is best to quote the whole argument to mini-pipe because of the way it would otherwise be split on spaces and commas. aXe does try to piece the line together again but can't know whether a split was as a result of a space or a comma; it always assumes that it was a space.

The last example causes the selected text or the whole of the text in the editing buffer to be queued for printing by printer 'printer'. The minibuffer menu provides a few ready-made examples that are likely to be commonly used.


THE MINIBUFFER MENU 

The minibuffer menu provides easy access to a few selected external commands that it is hoped will be commonly required, e.g. printing, spelling checking, formatting and mailing. The mini-shell commands that implement them are:

        mini-shell(lpr)
        mini-shell(spell)
        mini-shell(nroff)
        mini-shell(mail)

Those commands only place the commands '! lpr', '! spell' etc. into the minibuffer (with its accelerators enabled) so it is possible to add options to them before proceeding. 

For convenience, the menu also provides exec and abort entries; the first is simply equivalent to hitting Return, and causes the command in the minibuffer to be executed, while the second removes the accelerators so that keystrokes in the editing buffer will revert to being directed to that buffer instead of to the minibuffer. 

A further three entries are identical to the first three except that the commands are entered and executed in one operation. They are identifiable by having <RET> in the entry label, which is meant to convey that the command contains the Return to cause it to be executed. It does not make sense to replicate 'mail' in this way since a recipient will always have to be added to the minibuffer command before execution.

Although probably useful as it stands, the minbuffer menu is merely a demonstration of what can be done. It is totally customisable by the user by defining the miniMenu resource. Its value is a whitespace separated list of items. If a ':' occurs in an item then the left hand part will be taken as the corresponding menu entry label and the right hand part as the minibuffer action, otherwise the whole item will be used for both purposes. If the action part begins with 'mini-' then it is left untouched, otherwise it is taken to be an argument to mini-shell. Furthermore, an item of '|' is interpreted to mean that a dividing line should be added to the menu at that position.

The resource value defining the default menu is:

        print:lpr spell nroff mail | \
        exec:mini-commit abort:mini-abort | \
        print<RET>:lpr\n spell<RET>:spell\n nroff<RET>:nroff\n

Labels and actions can be quoted using either the single or the double quote characters, e.g 

       "laser printer":'lpr -Plaser'    or    'laser printer':"lpr -Plaser"

The " and ' characters themselves can only be included by using the other quote character to do the quoting, e.g.

       "jim's printer" 

You can provide help to be displayed in the information bar when the mouse enters your menu items by setting each's help resource. The name of the widget is the same as the item's label, e.g.

       *laser.help:Send to laser printer

or

       *mMini.laser.help:Send to laser printer


THE KEYBOARD MACRO

A single global keyboard macro can be defined. The following new action routines have been defined in this connection:

        start-macro
        end-macro
        exec-macro
        repeat-macro

start-macro and end-macro should be self-explanatory. exec-macro executes the macro once. repeat-macro takes a repeat count from the minibuffer and executes the macro that many times.

Here are some bindings that might be used:

      Ctrl<Key>X,<Key>(: start-macro()
      Ctrl<Key>X,<Key>): end-macro()
      Ctrl<Key>X,<Key>E: exec-macro()
      Ctrl<Key>X,<Key>R: repeat-macro()

A macro is defined by executing start-macro and stepping through the sequence of actions that will constitute one invocation, followed by end-macro. The macro is effective in all buffers, not just the one in which it is defined, and gets replaced if start-macro is executed again. With these bindings the effect of the mini-pipe example above could equally well be accomplished, after moving the insertion point to the beginning of the first line to be annotated, by defining a macro with the following sequence of keystrokes

      C-x (
      >
      <space>
      C-a
      C-n
      C-x )

and by executing C-e for each subsequent line to be annotated, or by entering the number of remaining lines to be annotated in the minibuffer and executing C-x r.


SERVER MODE

There are two main differences when aXe is acting as a server: an additional window is created and aXe does not terminate when the number of windows reduces to zero. The function of the extra window is to provide a way of getting an editing window when there are no others to use as a launch pad, and to provide a way of shutting down the application. The default server window allows empty windows to be created and provides access to the general help file. Alternatively, setting the top level fileServer resource causes a FileNominator to be used as the server, allowing new windows to be created with files already loaded.

Additionally, editing windows can be obtained from a server by cooperating clients on the same host. Two such clients are provided: coaxe and faxe. Coaxe waits until it gets notification that its aXe window has been closed, whereas faxe terminates as soon as it has successfully contacted its server. Faxe can take several filename arguments, but coaxe is restricted to one. By default multiple files passed to faxe are assigned a window each. A group of files can be assigned to buffers of the same window by preceding the list by any leading substring of the keyword -buffer. The keyword may occur more than once on the command line. Coaxe and faxe start up aXe in non-server mode if a server is not already running, and coaxe is notified when the invocation terminates, i.e. when the last window is closed.

A display can support servers for many hosts, but only one server per host is catered for. If a second server is started for some host when one is already running then the second will take over the role of server to the client programs, and the first will be uncontactable by them.

Shutting down aXe from the server window is equivalent to doing a "Close All", i.e. a check is made for unsaved changes if any editing windows exist. A third client program, poleaxe, is also provided for shutting down the server, but checks are not carried out when it is used.


UNDO

The availability of undo is controlled by the  resource undo, which is True by default. By default you are able to undo only the most recent operation that changed the file. If you wish to retain a greater history then set the undoLevel
resource to the level you require. The default is 1. A value of 0 means keeping
unlimited information, but that could run away with large amounts of memory if editing over an extended period. The new action undo performs a single undo.

Inserted characters, apart from control codes, which are dealt with individually, are handed back in units of uninterrupted runs of at most a line. A run is interrupted by any operation other than the insertion of a character, even if it doesn't change the file, e.g. moving the caret. If you want to undo single characters then delete them in the normal way. Deleted characters can be undone individually.

The implementation allows undos of undos. Once undoLevel consecutive undos have been performed the next (consecutive) undo will cause the most recent undo to be undone, the next the undo before that, and so on ad infinitum until some action other than undo breaks the sequence. Note that if you have a number of undos to perform it is quicker to type undo in the minibuffer and repeatedly re-execute it by hitting the Return key than by selecting Undo from the Misc menu each time.

You should be aware that currently multiple changes arising from performing a single action, e.g. by doing a replace All or executing a keyboard macro, require multiple undos to get back to the position prior to the action being invoked, and may be impossible if undoLevel is not great enough. 

If you find that for some reason the undo information has got out of step then the easiest way to get back in sync is to save and reload the file. Loading or reloading a file causes all the current undo information to be thrown away and the mechanism to be reinitialised. 


THE END.
