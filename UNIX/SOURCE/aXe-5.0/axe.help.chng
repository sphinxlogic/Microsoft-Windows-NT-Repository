******  CHANGES BETWEEN 4.1.1 AND 5.0  ******

UNDO

An undo facility has been introduced. By default only the last operation can be undone. Set the undoLevel resource to be able to undo a greater number. The action undo performs a single undo.

See the UNDO section of the Customise help for more details. 

AXE/FAXE

The grouping of files can now be done via the keyword -buffer, e.g.

	axe one two -buffer three four -buffer five six
	faxe one two -buffer three four -buffer five six

will assign the files one and two to separate windows, three and four to buffers of a third window, and five and six to buffers of a fourth. Note that any leading keyword substring is sufficient, the minimum, therefore, being -buf for axe, since there is a -buttons keyword, and -b for faxe.

SERVER WINDOW

An extra button, Show, has been added to the server window to enable the menu of files being edited to be displayed. In this situation there is no current buffer, so no entry is ticked.



******  CHANGES BETWEEN 4.1 AND 4.1.1  ******

SAVE AS

A check is now made for the existence of the file nominated in a Save As operation and the user given the option of overwriting it or re-nominating.



******  CHANGES BETWEEN 4.1 AND 4.0  ******

MENUBAR

The menus that appear in the menubar and their order have been put under user control by means of the introduction of the resource menuList. Its value is a space-separated list of names. The default value is

   move search insert delete help misc font window buffer show file quit logo

i.e. the standard arrangement. If logo doesn't appear in the list then it will be added at the end. Wherever it appears it will stretch to occupy any otherwise unused space.

ACTIONS

Actions can be executed by typing them directly into the minibuffer, e.g. new-window() [or simply new-window] or new-window(load). Thus features can be tried out or infrequently used ones executed when required without having to go to the bother of defining key bindings and restarting aXe with them in effect. [For those with the extension language this makes it unnecessary to precede actions with the Tcl command action in the minibuffer. However, it is still required in scripts. Note that the syntax for actions in Tcl commands may change in the future in order to be consistent with how actions are expressed elsewhere, e.g. "action new-window load" might become "action new-window(load)"].



******  CHANGES BETWEEN 3.1 AND 4.0  ******

EXTENSION LANGUAGE

aXe now optionally uses Tcl (Tool Command Language) as an extension language. It is available in the version you are running if the item "Extension" appears in the Help menu. This feature is experimental. 

MINIBUFFER

Because extension language commands can be typed into the minibuffer it is now mandatory that the existing minibuffer commands 'r', 'w' and 'e' be followed by a space in order to distinguish them from extension language commands beginning with those letters.

EDIT WINDOW CARET

The small triangular caret indicating the insertion point in edit windows can be overriden by an inbuilt block caret (boolean resource blockCaret) or be specified by a bitmap file (resource caretBitmap).

CLOSING WINDOWS

A window can be closed as if Close from the Window menu had been selected by sending the WM_DELETE_WINDOW message, e.g. by invoking the twm window manager f.delete function, probably from a Delete menu entry. Note that this is radically different from invoking f.destroy (probably via a Kill or Destroy menu entry) when the entire application is killed without any normal termination checks being carried out.

RESOURCE LISTS

The resources that are lists, e.g. fontList and miniMenu, may now contain embedded spaces in their components. Either the single or double quote character can be used to achieve quoting, and each allows the other to be used within a value. E.g. *miniMenu:"Jim's printer":'lpr -Pjimprint'.

REGULAR EXPRESSION SEARCHING

Regular expression searching is supported through the new action re-search, which, like the standard search action, must be supplied with a direction argument of 'forward' or 'backward'. Although the same popup is used the two types of searching can be mixed. When regular expression searching is in effect the title of the popup is changed from 'search' to 'RE search'.

The re-search action has been programmed to get round the problem of being unable to do successive search and replaces under normal searching and so could be used for all searching, although, unless you know what you are doing, you could get caught out by the meta characters, e.g '.' and '(' and '['. Because the problem would be present if an automatic search were done following a replacement, that is not done, and each search has to be carried out manually. If you want to try this then the following translations are appropriate

*ed.translations:#override \n\
                 Ctrl<Key>s:re-search(forward) \
                 Ctrl<Key>r:re-search(backward)

If you want both styles of searching to be available then I suggest suitable bindings could be achieved by replacing Ctrl with Meta in the above. 

The minibuffer commands '/' and '?' now only perform regular expression searching.

FILENOMINATOR

The filter button beside the filter pattern field has been changed from a command button to a menu button. The associated menu has three entries: 'Apply', which causes the current directory to be rescanned; 'Apply to directories', which controls whether directories should always be displayed or whether they should also be subject to filtering, and 'Apply to "." files', which controls whether names beginning with a "." should be displayed or not. The last two entries are toggles, whose selection cause toggling of the setting and rescanning of the directory with the toggled value effective. The "." files entry takes precedence over the one for directories e.g. if the pattern is "*c" and there is a file called .filec, then it won't be shown unless there is a tick mark against the 'Apply to "." files' entry.

A new boolean resource, filterDirectoryNames, has been created. The toggling of the 'Apply to directories' menu entry dynamically changes its value.

The resources selectMenu that was superceded some time ago by pathList has been removed.

PREFERENCES

The setting of the option for showing "." files in the FileNominator has been removed and moved to the FileNominator itself. This is now done from the 'Apply to "." files' entry on the filter menu button menu.

The keyboard focus has been set so that typing within the popup is directed to the "Tab Every" entry field.



******  CHANGES BETWEEN 3.0.1 AND 3.1  ******

Two new entries - "Save and Close Window" and "Save and Close Buffer" - have been added to the Quit menu to allow more selective saving and closing. The "Save and Close" entry has been renamed "Save and Close All". 

"Save All" now only saves modified files.

Umask is ignored and the permissions of the original file are retained on the new when backups are enabled.

FILENOMINATOR

The keyboard focus is now directed to the filename field from everywhere within the popup except the filter pattern field, rather than just from within the list of names.

The new resource "filter" enables an initial filter pattern other than the default "*" to be specified.

FAXE

Multiple files may be specified on the command line, with a new window being created for each. It is not possible (yet) to indicate that all or some should be allocated to buffers within the same window.



******  CHANGES BETWEEN 3.0 AND 3.0.1  ******

FILENOMINATOR

The directory that is displayed when a buffer's file selector (FileNominator widget) is first popped up is now determined according to the first of the following to apply:

   o the directory associated with the file, if any, being edited in the buffer, e.g. as a result of being specified on the command line or of being loaded via the minibuffer.

   o the directory associated with the current buffer in the window from which the window/buffer in question originated at the time of origination, e.g. as a result of selecting New from the Window or Buffer menus.

   o the current working directory of the invocation of aXe, e.g. as a result of a window being created via the default server window.



******  CHANGES SINCE RELEASE 2.1  ******

aXe has undergone a major rewrite since Release 2.1, and although maintaining backwards compatability has been an aim users will inevitably see some minor differences - both intentional and accidental. In addition, several new features have been implemented. Only a summary is given here - fuller details of the changes and how to take advantage of them are described in the Customisation help.


SERVER MODE DEFAULT

Server mode has now been made the default. In this mode, if aXe is started up without specifying any files to edit on the command line then all that the user gets is a server window from which editing windows can be launched. Also, the server window remains when the last editing window is closed. As a consequence, the 'Save and Exit' menu entries have been re-labeled 'Save and Close'. The old behaviour can be obtained by specifying -noserver on the command line or by setting the server resource to False, but with the re-labeling still effective.

The server clients coaxe and faxe invoke axe if a server isn't already running.


BUFFERS

Multiple buffers within a window are supported through a new menu and associated action routines. The opportunity has been taken to introduce a facility that has been requested by a number of users - that of being able to clear out a buffer (window in old parlance) for re-use. The Buffer menu has a Clear entry.

Several files can be loaded into buffers of the same window from the command line by quoting the list of file names, otherwise several files are loaded into separate single-buffered windows, giving the same behaviour as before.

Font and window size changes are applied to all buffers in a window.

The cooperating clients coaxe and faxe always cause a new window to be created. However, in the case of coaxe, the client will be notified when that first buffer is closed, not necessarily when the window is closed, since the user is free to create further buffers within the window.


NEW WINDOW COMPONENT

In order to implement buffers a change has had to be made to the widget hierarchy. The component of an aXe window that appears to be a text buffer is the topmost buffer of a deck of overlapping buffers. Thus the text buffer is one level further down in the hierarchy. Since all of the buffers are given the same name, ed, this should have no impact on you if you are accustomed to specifying resources for the text widget by specifying *ed:...


MINIBUFFER DEFAULT

Because of the introduction of new minibuffer facilities and the provision of easy access to them, having the minibuffer available is now the default.


MINIBUFFER MENU

A configurable menu providing easy access to minibuffer commands is now available. It is accessed via the small button underneath the scrollbar at the left hand end of the minibuffer. The default menu provides entries for printing, spelling checking, formatting (nroff) and mailing the selection/buffer.


NEW MINIBUFFER ACTION

The new minibuffer action routine mini-shell has been introduced. This feeds the current buffer, or the selected text in it, to the external command specified as argument, and displays the output, if any, in a window.


IMMEDIATE EXECUTION OF MINIBUFFER COMMANDS

A mechanism for causing the immediate execution of mini-pipe and mini-shell minibuffer commands has been implemented, viz. if the argument ends in \n. 


INSERTION OF CONTROL CODES

A new Insert menu entry and corresponding action routine provide an easy way to enter control codes.


BUTTONLIST RESOURCE

Users of the button interface who provide their own list of buttons will find that they will have to change their current setting of the buttonList resource for two reasons: the introduction and position of the Buffer will probably interfere with their layout and, more seriously, the names of the buttons have changed - they are now identical to the equivalent menu entries, so all that needs to be done is to get rid of the leading b's in the buttonList resource.


NEW PLUS LOAD

It is now possible to create a new window, or buffer, and request that a file be loaded into it in one operation. In order to accommodate a new Window menu entry without making the menu any longer (the real reason is not wanting to make the corresponding column of buttons in the default button interface any longer) I have removed the Restack entry.


REMOVAL OF RESTACK

In order to accommodate a new Window menu entry I have dispensed with the Restack entry (see immediately above). To a large extent this is superceded by the introduction of buffers. I won't reintroduce the facility unless there is an outcry.


RELOAD FILE

The semantics of the Revert entry on the File menu have been altered slightly, and so the label has been changed to Reload in order to avoid confusion. The entry always loads the file now, even when the buffer has not been modified. This makes it easy to repeatably view a file that is being changed by other means.


SHOW MENU

The files in the Show menu are grouped by window, with dividing lines between the windows. A further change is that the entry corresponding to the displayed buffer belonging to the window from which the menu was popped up has a tick mark against it at the right of the entry.


HELP

The help is now displayed in normal aXe windows. A new entry, for displaying a list of changes since the last release, has been introduced and the FileNominator has been changed to one about popups in general.


FILENOMINATOR

A filter has been added to the FileNominator widget so that the list of files displayed can be restricted to a subset, e.g. *.[ch]

As the FileNominator now contains two text widgets it is no longer possible to direct keyboard into the main filename one whenever the widget has the input focus. What I have done is to direct keyboard input to the filename area when the largest component, the list of files, has the focus.

The FileNominator now scrolls the text in the filename and filter components if text longer than the width is entered. The behaviour is still a little idiosyncratic in some respects, and I will be continuing to try to sort this out. 

I was never happy with the redraw behaviour of the FileNominator widget on a directory change. I now understand what was going on and have improved matters so that there is no flickering, i.e. the list widget that is inside the viewport is not seen to shrink and then be stretched to the full width of the viewport.

The size of the FileNominator popup on resizing reflects the size of the interior filename list in character size increments provided that the font used is a monospaced or character cell, i.e. fixed width, font, and that the window manager adheres to the Inter-Client Communications Conventions and honours size hints.


PREFERENCES

Auto Fill has been added to the list of possible wrap mode preferences. Its selection forces No Wrap, and selection of Line or Word forces Auto Fill off since I have found that these are the combinations that work.

The structure has been set up for applying the preference settings to the current buffer, all buffers in the current window or to all buffers in all windows, but at the moment only the first is implemented, which reproduces the previous behaviour. 


TAB EXPANSION

A new resource, expandTabs, and a new action, insert-or-expand-tab, have been introduced. insert-or-expand-tab is bound by default to the Tab key. If a Tab is entered and expandTabs is False then a tab character is inserted, otherwise the requisite number of spaces to move the caret to the equivalent position is inserted.


REGION COMMANDS

A set of action routines enabling sections of the text to be selected and manipulated from the keyboard has been introduced. 


MATCHING PARENTHESES

A new action routine that enables the matching bracket of a round, square or curly bracket to be found and the text between them highlighted has been implemented.


BACKUP FILES

It is now possible to arrange for a backup of the original to be made when a file that has been modified is saved. The mechanism is identical to that of xedit, in that the backup name is <prefix>file<suffix> where the default values for <prefix> and <suffix> are the empty string and ".BAK" respectively.


KEYMAPS

A keymap facility similar to the one in xterm has been implemented. It enables alternative sets of bindings to be switched in and out.


NON-GRABBING POPUPS

In the previous version, for lazy programming reasons, whenever a popup was popped up it grabbed all events and the user could do nothing further in the application until it was popped down. I have now relaxed that restriction and made the default be the opposite, but with the choice controllable by the grabOnPopup resource.
