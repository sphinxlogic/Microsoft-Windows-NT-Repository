# 1 "gnu.c"
 


















# 1 "/opt/lib/gcc-lib/i386-svr4/2.3.3/include/stdio.h" 1 3
 
 
 

 
 
 
 

 





#ident	"@(#)sgs-head:stdio.h	2.34.8.3"



typedef unsigned int 	size_t;


typedef long	fpos_t;




















# 54 "/opt/lib/gcc-lib/i386-svr4/2.3.3/include/stdio.h" 3

			 

























































typedef struct	 
{




	int		_cnt;	 
	unsigned char	*_ptr;	 

	unsigned char	*_base;	 
	unsigned char	_flag;	 
	unsigned char	_file;	 
} FILE;







extern FILE		__iob[60	];



extern FILE		*_lastbuf;
extern unsigned char 	*_bufendtab[];

extern unsigned char	 _sibuf[], _sobuf[];




extern int	remove(const char *);
extern int	rename(const char *, const char *);
extern FILE	*tmpfile(void);
extern char	*tmpnam(char *);
extern int	fclose(FILE *);
extern int	fflush(FILE *);
extern FILE	*fopen(const char *, const char *);
extern FILE	*freopen(const char *, const char *, FILE *);
extern void	setbuf(FILE *, char *);
extern int	setvbuf(FILE *, char *, int, size_t);
 
extern int	fprintf(FILE *, const char *, ...);
 
extern int	fscanf(FILE *, const char *, ...);
 
extern int	printf(const char *, ...);
 
extern int	scanf(const char *, ...);
 
extern int	sprintf(char *, const char *, ...);
 
extern int	sscanf(const char *, const char *, ...);


# 177 "/opt/lib/gcc-lib/i386-svr4/2.3.3/include/stdio.h" 3





extern int	vfprintf(FILE *, const char *, void * );
extern int	vprintf(const char *, void * );
extern int	vsprintf(char *, const char *, void * );
extern int	fgetc(FILE *);
extern char	*fgets(char *, int, FILE *); 
extern int	fputc(int, FILE *);
extern int	fputs(const char *, FILE *);
extern int	getc(FILE *);
extern int	getchar(void);
extern char	*gets(char *);
extern int	putc(int, FILE *);
extern int	putchar(int);
extern int	puts(const char *);
extern int	ungetc(int, FILE *);
extern size_t	fread(void *, size_t, size_t, FILE *);
	#pragma int_to_unsigned fread
extern size_t	fwrite(const void *, size_t, size_t, FILE *);
	#pragma int_to_unsigned fwrite
extern int	fgetpos(FILE *, fpos_t *);
extern int	fseek(FILE *, long, int);
extern int	fsetpos(FILE *, const fpos_t *);
extern long	ftell(FILE *);
extern void	rewind(FILE *);
extern void	clearerr(FILE *);
extern int	feof(FILE *);
extern int	ferror(FILE *);
extern void	perror(const char *);

extern int	__filbuf(FILE *);
extern int	__flsbuf(int, FILE *);














extern FILE	*fdopen(int, const char *);
extern char	*ctermid(char *);
extern int	fileno(FILE *);








extern FILE	*popen(const char *, const char *);
extern char	*cuserid(char *);
extern char	*tempnam(const char *, const char *);
extern int	getw(FILE *);
extern int	putw(int, FILE *);
extern int	pclose(FILE *);
extern int	system(const char *);




# 275 "/opt/lib/gcc-lib/i386-svr4/2.3.3/include/stdio.h" 3


# 20 "gnu.c" 2

# 1 "/usr/include/sys/types.h" 1 3
 
 
 

 
 
 
 





#ident	"@(#)/usr/include/sys/types.h.sl 1.1 1.0 10/31/92 28935 Univel"
#ident	"$Header: $"

typedef char *		addr_t; 	 
typedef char *		caddr_t;	 
typedef long		daddr_t;	 
typedef char *		faddr_t;	 
typedef long		off_t;		 
typedef short		cnt_t;		 
typedef unsigned long	paddr_t;	 
typedef unsigned char	use_t;		 
typedef short		sysid_t;	 
typedef short		index_t;	 
typedef short		lock_t;		 
typedef	unsigned short	sel_t;		 
typedef unsigned long	k_sigset_t;	 
typedef unsigned long	k_fltset_t;	 


typedef struct _label { int val[6]; } label_t;	 

typedef enum boolean { B_FALSE, B_TRUE } boolean_t;


 

typedef unsigned char	uchar_t;
typedef unsigned short	ushort_t;
typedef unsigned int	uint_t;
typedef unsigned long	ulong_t;

 








typedef long		id_t;		 

 

typedef unsigned long	pvec_t;		 

 

typedef unsigned long	lid_t;		 
typedef lid_t		level_t;	 

 




typedef unsigned long	adtemask_t[8		];  



 

typedef unsigned long	major_t;	 
typedef unsigned long	minor_t;	 

 









typedef unsigned short	o_mode_t;	 
typedef short		o_dev_t;	 
typedef unsigned short	o_uid_t;	 
typedef o_uid_t		o_gid_t;	 
typedef short		o_nlink_t;	 
typedef short		o_pid_t;	 
typedef unsigned short	o_ino_t;	 

 

typedef int		key_t;		 
typedef unsigned long	mode_t;		 
typedef long		uid_t;		 
typedef uid_t		gid_t;		 
typedef unsigned long	nlink_t;	 
typedef unsigned long	dev_t;		 
typedef unsigned long	ino_t;		 
typedef long		pid_t;		 








typedef int		ssize_t;	 




typedef long		time_t;		 




typedef long		clock_t;	 




typedef struct { int r[1]; } * physadr;
typedef unsigned char	unchar;
typedef unsigned short	ushort;
typedef unsigned int	uint;
typedef unsigned long	ulong;
typedef int		spl_t;

# 149 "/usr/include/sys/types.h" 3


 














 



typedef long		hostid_t;

 





typedef unsigned char	u_char;
typedef unsigned short	u_short;
typedef unsigned int	u_int;
typedef unsigned long	u_long;
typedef struct _quad { long val[2]; } quad;	 

 




# 199 "/usr/include/sys/types.h" 3


# 1 "/usr/include/sys/select.h" 1 3
 
 
 

 
 
 
 




#ident	"@(#)/usr/include/sys/select.h.sl 1.1 1.0 10/31/92 26057 Univel"
#ident	"$Header: $"

 













typedef	long	fd_mask;





typedef	struct fd_set {
	fd_mask	fds_bits[(((1024 )+(( (sizeof(fd_mask) * 8 )	)-1))/( (sizeof(fd_mask) * 8 )	)) ];
} fd_set;











# 201 "/usr/include/sys/types.h" 2 3






 









# 231 "/usr/include/sys/types.h" 3



# 21 "gnu.c" 2

# 1 "/opt/lib/gcc-lib/i386-svr4/2.3.3/include/ctype.h" 1 3
 
 
 

 
 
 
 




#ident	"@(#)sgs-head:ctype.h	1.18"












extern int isalnum(int);        
extern int isalpha(int);        
extern int iscntrl(int);        
extern int isdigit(int);        
extern int isgraph(int);        
extern int islower(int);        
extern int isprint(int);        
extern int ispunct(int);        
extern int isspace(int);        
extern int isupper(int);        
extern int isxdigit(int);       
extern int tolower(int);
extern int toupper(int);



extern int isascii(int);        
extern int toascii(int);        
extern int _tolower(int);
extern int _toupper(int);



extern unsigned char	__ctype[];


























# 100 "/opt/lib/gcc-lib/i386-svr4/2.3.3/include/ctype.h" 3


# 22 "gnu.c" 2

# 1 "/usr/include/errno.h" 1 3
 
 
 

 
 
 
 




#ident	"@(#)/usr/include/errno.h.sl 1.1 1.0 10/31/92 18593 Univel"

 



# 1 "/usr/include/sys/errno.h" 1 3
 
 
 

 
 
 
 




#ident	"@(#)/usr/include/sys/errno.h.sl 1.1 1.0 10/31/92 9933 Univel"
#ident	"$Header: $"

 




















 


















































 










 






















 













 
	 













	 









 










 


 



 
 







 







# 19 "/usr/include/errno.h" 2 3


extern int errno;


# 23 "gnu.c" 2


extern int errno;

# 1 "/opt/lib/gcc-lib/i386-svr4/2.3.3/include/time.h" 1 3
 
 
 

 
 
 
 




#ident	"@(#)sgs-head:time.h	1.18"






















struct	tm {	 
	int	tm_sec;
	int	tm_min;
	int	tm_hour;
	int	tm_mday;
	int	tm_mon;
	int	tm_year;
	int	tm_wday;
	int	tm_yday;
	int	tm_isdst;
};



extern clock_t clock(void);			
extern double difftime(time_t, time_t);		
extern time_t mktime(struct tm *);		
extern time_t time(time_t *);			
extern char *asctime(const struct tm *);		
extern char *ctime (const time_t *);		
extern struct tm *gmtime(const time_t *);		
extern struct tm *localtime(const time_t *);	
extern size_t strftime(char *, size_t, const char *, const struct tm *);


extern void tzset(void);

extern char *tzname[2];



				 



extern long timezone;
extern int daylight;





extern int cftime(char *, char *, const time_t *);
extern int ascftime(char *, const char *, const struct tm *);
extern long altzone;
extern struct tm *getdate(const char *);
extern int getdate_err;


# 104 "/opt/lib/gcc-lib/i386-svr4/2.3.3/include/time.h" 3



# 27 "gnu.c" 2

time_t time ();

# 1 "tar.h" 1
 


















# 1 "testpad.h" 1

# 20 "tar.h" 2


 




 









 














struct sparse
  {
    char offset[12];
    char numbytes[12];
  };

struct sp_array
  {
    int offset;
    int numbytes;
  };

union record
  {
    char charptr[512 ];
    struct header
      {
	char arch_name[	100 ];
	char mode[8];
	char uid[8];
	char gid[8];
	char size[12];
	char mtime[12];
	char chksum[8];
	char linkflag;
	char arch_linkname[	100 ];
	char magic[8];
	char uname[	32 ];
	char gname[	32 ];
	char devmajor[8];
	char devminor[8];
	 
	 
	char atime[12];
	char ctime[12];
	char offset[12];
	char longnames[4];

	char pad;

	struct sparse sp[4 ];
	char isextended;
	char realsize[12];	 
	  

      }
    header;
    struct extended_header
      {
	struct sparse sp[21];
	char isextended;
      }
    ext_hdr;
  };

 


 


 









 

 

















 

 











 


extern  union record *ar_block;	 
extern  union record *ar_record;	 
extern  union record *ar_last;	 
extern  char ar_reading;	 
extern  int blocking;	 
extern  int blocksize;	 
extern  char *info_script;	 
extern  char *name_file;	 
extern  char filename_terminator;	 
extern  char *tar;		 
extern  struct sp_array *sparsearray;	 
extern  int sp_array_size;	 
extern  int tot_written;	 
extern  struct re_pattern_buffer
 *label_pattern;		 
extern  char **ar_files;	 
extern  int n_ar_files;	 
extern  int cur_ar_file;	 
extern  int ar_files_len;	 
extern  char *current_file_name, *current_link_name;

 


extern  int cmd_mode;












extern  int f_reblock;	 



extern  int f_run_script_at_end;	 
extern  int f_gnudump;	 
extern  int f_follow_links;	 
extern  int f_ignorez;	 
extern  int f_keep;		 
extern  int f_startfile;	 
extern  int f_local_filesys;	 
extern  int tape_length;	 
extern  int f_modified;	 
extern  int f_multivol;	 
extern  int f_new_files;	 
extern  int f_oldarch;	 
extern  int f_exstdout;	 
extern  int f_use_protection; 
extern  int f_absolute_paths; 
extern  int f_sayblock;	 
extern  int f_sorted_names;	 
extern  int f_sparse_files;	 
extern  int f_namefile;	 
extern  int f_verbose;	 
extern  char *f_volhdr;	 
extern  int f_confirm;	 
extern  int f_verify;	 
extern  int f_exclude;	 
extern  char *f_compressprog;	 
extern  int f_do_chown;	 
extern  int f_totals;	 
extern  int f_remove_files;	 
extern  int f_ignore_failed_read;	 
extern  int f_checkpoint;	 
extern  int f_show_omitted_dirs;	 
extern  char *f_volno_file;	 
extern  int f_force_local;	 
extern  int f_atime_preserve; 
extern  int f_compress_block;  

 











 


struct name
  {
    struct name *next;
    short length;		 
    char found;			 
    char firstch;		 
    char regexp;		 
    char *change_dir;		 
    char *dir_contents;		 
    char fake;			 
    char name[1];
  };

extern  struct name *namelist;	 
extern  struct name *namelast;	 

extern  int archive;		 
extern  int errors;		 

extern  char *gnu_dumpfile;

 


extern  char read_error_flag;


 


union record *findrec ();
void userec ();
union record *endofrecs ();
void anno ();





void msg ();
void msg_perror ();

# 30 "gnu.c" 2

# 1 "port.h" 1
 


















 


# 33 "port.h"


# 1 "pathmax.h" 1
 























 














 

# 1 "/opt/lib/gcc-lib/i386-svr4/2.3.3/include/sys/param.h" 1 3
 
 
 

 
 
 
 

 

























#ident	"@(#)uts-x86at:util/param.h	1.8"
#ident	"$Header: $"

# 49 "/opt/lib/gcc-lib/i386-svr4/2.3.3/include/sys/param.h" 3



# 1 "/usr/include/sys/fs/s5param.h" 1 3
 
 
 

 
 
 
 




#ident	"@(#)/usr/include/sys/fs/s5param.h.sl 1.1 1.0 10/31/92 38870 Univel"
#ident	"$Header: $"

 











 









# 52 "/opt/lib/gcc-lib/i386-svr4/2.3.3/include/sys/param.h" 2 3




 





































 





 










 






 




 





 




















 































 



 


 

















 














 





















  


 


 




















 



 






 










# 42 "pathmax.h" 2












# 35 "port.h" 2














 




# 65 "port.h"









 





















# 112 "port.h"







char *malloc (), *realloc ();
char *getenv ();






off_t lseek ();

char *getcwd ();






















# 1 "/opt/lib/gcc-lib/i386-svr4/2.3.3/include/sys/stat.h" 1 3
 
 
 

 
 
 
 





#ident	"@(#)uts-x86:fs/stat.h	1.12"
#ident	"$Header: $"

# 32 "/opt/lib/gcc-lib/i386-svr4/2.3.3/include/sys/stat.h" 3


# 1 "/usr/include/sys/time.h" 1 3
 
 
 

 
 
 
 




#ident	"@(#)/usr/include/sys/time.h.sl 1.1 1.0 10/31/92 5322 Univel"
#ident	"$Header: $"

# 26 "/usr/include/sys/time.h" 3








 



struct timeval {
	long	tv_sec;		 
	long	tv_usec;	 
};

struct timezone {
	int	tz_minuteswest;	 
	int	tz_dsttime;	 
};












 










 







struct itimerval {
	struct timeval	it_interval;	 
	struct timeval	it_value;	 
};



 


typedef struct {



	time_t 	tv_sec;			 




	long	tv_nsec;		 

} timestruc_t;








int adjtime(struct timeval *, struct timeval *);
int getitimer(int, struct itimerval *);
int setitimer(int, struct itimerval *, struct itimerval *);








# 34 "/opt/lib/gcc-lib/i386-svr4/2.3.3/include/sys/stat.h" 2 3






 











# 100 "/opt/lib/gcc-lib/i386-svr4/2.3.3/include/sys/stat.h" 3



	 
struct	stat {
	dev_t	st_dev;		 
				 
	long	st_pad1[3];	 
	ino_t	st_ino;		 
	mode_t	st_mode;	 
	nlink_t	st_nlink;	 
	uid_t	st_uid;		 
	gid_t	st_gid;		 
	dev_t	st_rdev;	 
				 
	long	st_pad2[2];	 
	off_t	st_size;	 
	long	st_pad3;	 
	union {
		time_t		st__sec;  
		timestruc_t	st__tim;  
	}	st_atim,	 
		st_mtim,	 
		st_ctim;	 
	long	st_blksize;	 
	long	st_blocks;	 
	char	st_fstype[16		];
				 
	int	st_aclcnt;	 
	level_t	st_level;	 
	ulong_t	st_flags;	 
	lid_t	st_cmwlevel;	 
	long	st_pad4[4];	 
};




# 156 "/opt/lib/gcc-lib/i386-svr4/2.3.3/include/sys/stat.h" 3




 

 










































 





















 





 



 









 











static int fstat(int, struct stat *);
static int stat(const char *, struct stat *);

static int lstat(const char *, struct stat *);
static int mknod(const char *, mode_t, dev_t);










int _fxstat(const int, int, struct stat *);
int _xstat(const int, const char *, struct stat *);

int _lxstat(const int, const char *, struct stat *);
int _xmknod(const int, const char *, mode_t, dev_t);

extern int chmod(const char *, mode_t);
extern int mkdir(const char *, mode_t);
extern int mkfifo(const char *, mode_t);
extern mode_t umask(mode_t);
extern int fchmod(int, mode_t);

# 310 "/opt/lib/gcc-lib/i386-svr4/2.3.3/include/sys/stat.h" 3



 
















static int
stat(_path, _buf)
const char *_path;
struct stat *_buf;
{
int ret;
	ret = _xstat(2		, _path, _buf);
	return ret; 
}


static int
lstat(path, buf)
const char *path;
struct stat *buf;
{
int ret;
	ret = _lxstat(2		, path, buf);
	return ret;
}


static int
fstat(_fd, _buf)
int _fd;
struct stat *_buf;
{
int ret;
	ret = _fxstat(2		, _fd, _buf);
	return ret;
}


static int
mknod(path, mode, dev)
const char *path;
mode_t mode;
dev_t dev;
{
int ret;
	ret = _xmknod(2		, path, mode, dev);
	return ret;
}







# 152 "port.h" 2
































































# 31 "gnu.c" 2






extern time_t new_time;
extern FILE *msg_file;

void addname ();
int check_exclude ();
extern void *  ck_malloc ();
extern void *  ck_realloc ();
int confirm ();
extern void *  init_buffer ();
extern char *get_buffer ();
int is_dot_or_dotdot ();
extern void add_buffer ();
extern void flush_buffer ();
void name_gather ();
int recursively_delete ();
void skip_file ();
char *un_quote_string ();

extern char *new_name ();

static void add_dir_name ();

struct dirname
  {
    struct dirname *next;
    char *name;
    char *dir_text;
    int dev;
    int ino;
    int allnew;
  };
static struct dirname *dir_list;
static time_t this_time;

void
add_dir (name, dev, ino, text)
     char *name;
     char *text;
     dev_t dev;
     ino_t ino;
{
  struct dirname *dp;

  dp = (struct dirname *) ck_malloc (sizeof (struct dirname));
  if (!dp)
    abort ();
  dp->next = dir_list;
  dir_list = dp;
  dp->dev = dev;
  dp->ino = ino;
  dp->name = ck_malloc (strlen (name) + 1);
  strcpy (dp->name, name);
  dp->dir_text = text;
  dp->allnew = 0;
}

void
read_dir_file ()
{
  int dev;
  int ino;
  char *strp;
  FILE *fp;
  char buf[512];
  static char *path = 0;

  if (path == 0)
    path = ck_malloc (1024  );
  time (&this_time);
  if (gnu_dumpfile[0] != '/')
    {







      char *getwd ();

      if (!getwd (path))
	{
	  msg ("Couldn't get current directory: %s", path);
	  exit (4	);
	}

       
      strcat (path, "/");
      strcat (path, gnu_dumpfile);
      gnu_dumpfile = path;
    }
  fp = fopen (gnu_dumpfile, "r");
  if (fp == 0 && errno != 2	)
    {
      msg_perror ("Can't open %s", gnu_dumpfile);
      return;
    }
  if (!fp)
    return;
  fgets (buf, sizeof (buf), fp);
  if (!f_new_files)
    {
      f_new_files++;
      new_time = atol (buf);
    }
  while (fgets (buf, sizeof (buf), fp))
    {
      strp = &buf[strlen (buf)];
      if (strp[-1] == '\n')
	strp[-1] = '\0';
      strp = buf;
      dev = atol (strp);
      while (((__ctype + 1)[*strp] & 04	) )
	strp++;
      ino = atol (strp);
      while (((__ctype + 1)[*strp] & 010	) )
	strp++;
      while (((__ctype + 1)[*strp] & 04	) )
	strp++;
      strp++;
      add_dir (un_quote_string (strp), dev, ino, (char *) 0);
    }
  fclose (fp);
}

void
write_dir_file ()
{
  FILE *fp;
  struct dirname *dp;
  char *str;
  extern char *quote_copy_string ();

  fp = fopen (gnu_dumpfile, "w");
  if (fp == 0)
    {
      msg_perror ("Can't write to %s", gnu_dumpfile);
      return;
    }
  fprintf (fp, "%lu\n", this_time);
  for (dp = dir_list; dp; dp = dp->next)
    {
      if (!dp->dir_text)
	continue;
      str = quote_copy_string (dp->name);
      if (str)
	{
	  fprintf (fp, "%u %u %s\n", dp->dev, dp->ino, str);
	  free (str);
	}
      else
	fprintf (fp, "%u %u %s\n", dp->dev, dp->ino, dp->name);
    }
  fclose (fp);
}

struct dirname *
get_dir (name)
     char *name;
{
  struct dirname *dp;

  for (dp = dir_list; dp; dp = dp->next)
    {
      if (!strcmp (dp->name, name))
	return dp;
    }
  return 0;
}


 

void
collect_and_sort_names ()
{
  struct name *n, *n_next;
  int num_names;
  struct stat statbuf;
  int name_cmp ();
  char *merge_sort ();

  name_gather ();

  if (gnu_dumpfile)
    read_dir_file ();
  if (!namelist)
    addname (".");
  for (n = namelist; n; n = n_next)
    {
      n_next = n->next;
      if (n->found || n->dir_contents)
	continue;
      if (n->regexp)		 
	continue;
      if (n->change_dir)
	if (chdir (n->change_dir) < 0)
	  {
	    msg_perror ("can't chdir to %s", n->change_dir);
	    continue;
	  }




      if (lstat (n->name, &statbuf) < 0)

	{
	  msg_perror ("can't stat %s", n->name);
	  continue;
	}
      if (((statbuf.st_mode&0xF000) == 0x4000) )
	{
	  n->found++;
	  add_dir_name (n->name, statbuf.st_dev);
	}
    }

  num_names = 0;
  for (n = namelist; n; n = n->next)
    num_names++;
  namelist = (struct name *) merge_sort ((void * ) namelist, num_names, (char *) (&(namelist->next)) - (char *) namelist, name_cmp);

  for (n = namelist; n; n = n->next)
    {
      n->found = 0;
    }
  if (gnu_dumpfile)
    write_dir_file ();
}

int
name_cmp (n1, n2)
     struct name *n1, *n2;
{
  if (n1->found)
    {
      if (n2->found)
	return strcmp (n1->name, n2->name);
      else
	return -1;
    }
  else if (n2->found)
    return 1;
  else
    return strcmp (n1->name, n2->name);
}

int
dirent_cmp (p1, p2)
     const void *  p1;
     const void *  p2;
{
  char *frst, *scnd;

  frst = (*(char **) p1) + 1;
  scnd = (*(char **) p2) + 1;

  return strcmp (frst, scnd);
}

char *
get_dir_contents (p, device)
     char *p;
     int device;
{
  DIR *dirp;
  register struct direct  *d;
  char *new_buf;
  char *namebuf;
  int bufsiz;
  int len;
  void *  the_buffer;
  char *buf;
  size_t n_strs;
   
  char *p_buf;
  char **vec, **p_vec;

  extern int errno;

  errno = 0;
  dirp = opendir (p);
  bufsiz = strlen (p) + 	100 ;
  namebuf = ck_malloc (bufsiz + 2);
  if (!dirp)
    {
      if (errno)
	msg_perror ("can't open directory %s", p);
      else
	msg ("error opening directory %s", p);
      new_buf = ((void *)  0) ;
    }
  else
    {
      struct dirname *dp;
      int all_children;

      dp = get_dir (p);
      all_children = dp ? dp->allnew : 0;
      (void) strcpy (namebuf, p);
      if (p[strlen (p) - 1] != '/')
	(void) strcat (namebuf, "/");
      len = strlen (namebuf);

      the_buffer = init_buffer ();
      while (d = readdir (dirp))
	{
	  struct stat hs;

	   
	  if (is_dot_or_dotdot (d->d_name))
	    continue;
	  if (((d)->d_namlen)  + len >= bufsiz)
	    {
	      bufsiz += 	100 ;
	      namebuf = ck_realloc (namebuf, bufsiz + 2);
	    }
	  (void) strcpy (namebuf + len, d->d_name);





	  if (0 != f_follow_links ? stat (namebuf, &hs) : lstat (namebuf, &hs))

	    {
	      msg_perror ("can't stat %s", namebuf);
	      continue;
	    }
	  if ((f_local_filesys && device != hs.st_dev)
	      || (f_exclude && check_exclude (namebuf)))
	    add_buffer (the_buffer, "N", 1);








	  else if (((hs.st_mode&0xF000) == 0x4000) )
	    {
	      if (dp = get_dir (namebuf))
		{
		  if (dp->dev != hs.st_dev
		      || dp->ino != hs.st_ino)
		    {
		      if (f_verbose)
			msg ("directory %s has been renamed.", namebuf);
		      dp->allnew = 1;
		      dp->dev = hs.st_dev;
		      dp->ino = hs.st_ino;
		    }
		  dp->dir_text = "";
		}
	      else
		{
		  if (f_verbose)
		    msg ("Directory %s is new", namebuf);
		  add_dir (namebuf, hs.st_dev, hs.st_ino, "");
		  dp = get_dir (namebuf);
		  dp->allnew = 1;
		}
	      if (all_children)
		dp->allnew = 1;

	      add_buffer (the_buffer, "D", 1);
	    }
	  else if (!all_children
		   && f_new_files
		   && new_time > hs.st_mtim.st__sec 
		   && (f_new_files > 1
		       || new_time > hs.st_ctim.st__sec ))
	    add_buffer (the_buffer, "N", 1);
	  else
	    add_buffer (the_buffer, "Y", 1);
	  add_buffer (the_buffer, d->d_name, (int) (((d)->d_namlen)  + 1));
	}
      add_buffer (the_buffer, "\000\000", 2);
      closedir (dirp);

       
      buf = get_buffer (the_buffer);
      if (buf[0] == '\0')
	{
	  flush_buffer (the_buffer);
	  new_buf = ((void *)  0) ;
	}
      else
	{
	  n_strs = 0;
	  for (p_buf = buf; *p_buf;)
	    {
	      int tmp;

	      tmp = strlen (p_buf) + 1;
	      n_strs++;
	      p_buf += tmp;
	    }
	  vec = (char **) ck_malloc (sizeof (char *) * (n_strs + 1));
	  for (p_vec = vec, p_buf = buf; *p_buf; p_buf += strlen (p_buf) + 1)
	    *p_vec++ = p_buf;
	  *p_vec = 0;
	  qsort ((void * ) vec, n_strs, sizeof (char *), dirent_cmp);
	  new_buf = (char *) ck_malloc (p_buf - buf + 2);
	  for (p_vec = vec, p_buf = new_buf; *p_vec; p_vec++)
	    {
	      char *p_tmp;

	      for (p_tmp = *p_vec; *p_buf++ = *p_tmp++;)
		;
	    }
	  *p_buf++ = '\0';
	  free (vec);
	  flush_buffer (the_buffer);
	}
    }
  free (namebuf);
  return new_buf;
}

 

static void
add_dir_name (p, device)
     char *p;
     int device;
{
  char *new_buf;
  char *p_buf;

  char *namebuf;
  int buflen;
  register int len;
  int sublen;

   

   
   
   

  struct name *n;

  int dirent_cmp ();

  new_buf = get_dir_contents (p, device);

  for (n = namelist; n; n = n->next)
    {
      if (!strcmp (n->name, p))
	{
	  n->dir_contents = new_buf ? new_buf : "\0\0\0\0";
	  break;
	}
    }

  if (new_buf)
    {
      len = strlen (p);
      buflen = 	100  <= len ? len + 	100  : 	100 ;
      namebuf = ck_malloc (buflen + 1);

      (void) strcpy (namebuf, p);
      if (namebuf[len - 1] != '/')
	{
	  namebuf[len++] = '/';
	  namebuf[len] = '\0';
	}
      for (p_buf = new_buf; *p_buf; p_buf += sublen + 1)
	{
	  sublen = strlen (p_buf);
	  if (*p_buf == 'D')
	    {
	      if (len + sublen >= buflen)
		{
		  buflen += 	100 ;
		  namebuf = ck_realloc (namebuf, buflen + 1);
		}
	      (void) strcpy (namebuf + len, p_buf + 1);
	      addname (namebuf);
	      add_dir_name (namebuf, device);
	    }
	}
      free (namebuf);
    }
}

 
int
is_dot_or_dotdot (p)
     char *p;
{
  return (p[0] == '.' && (p[1] == '\0' || (p[1] == '.' && p[2] == '\0')));
}






void
gnu_restore (skipcrud)
     int skipcrud;
{
  char *current_dir;
   

  char *archive_dir;
   
  void *  the_buffer;
  char *p;
  DIR *dirp;
  struct direct  *d;
  char *cur, *arc;
  extern struct stat hstat;	 
  long size, copied;
  char *from, *to;
  extern union record *head;

  dirp = opendir (skipcrud + current_file_name);

  if (!dirp)
    {
       


      skip_file ((long) hstat.st_size);
      return;
    }

  the_buffer = init_buffer ();
  while (d = readdir (dirp))
    {
      if (is_dot_or_dotdot (d->d_name))
	continue;

      add_buffer (the_buffer, d->d_name, (int) (((d)->d_namlen)  + 1));
    }
  closedir (dirp);
  add_buffer (the_buffer, "", 1);

  current_dir = get_buffer (the_buffer);
  archive_dir = (char *) ck_malloc (hstat.st_size);
  if (archive_dir == 0)
    {
      msg ("Can't allocate %d bytes for restore", hstat.st_size);
      skip_file ((long) hstat.st_size);
      return;
    }
  to = archive_dir;
  for (size = hstat.st_size; size > 0; size -= copied)
    {
      from = findrec ()->charptr;
      if (!from)
	{
	  msg ("Unexpected EOF in archive\n");
	  break;
	}
      copied = endofrecs ()->charptr - from;
      if (copied > size)
	copied = size;
      bcopy ((void * ) from, (void * ) to, (int) copied);
      to += copied;
      userec ((union record *) (from + copied - 1));
    }

  for (cur = current_dir; *cur; cur += strlen (cur) + 1)
    {
      for (arc = archive_dir; *arc; arc += strlen (arc) + 1)
	{
	  arc++;
	  if (!strcmp (arc, cur))
	    break;
	}
      if (*arc == '\0')
	{
	  p = new_name (skipcrud + current_file_name, cur);
	  if (f_confirm && !confirm ("delete", p))
	    {
	      free (p);
	      continue;
	    }
	  if (f_verbose)
	    fprintf (msg_file, "%s: deleting %s\n", tar, p);
	  if (recursively_delete (p))
	    {
	      msg ("%s: Error while deleting %s\n", tar, p);
	    }
	  free (p);
	}

    }
  flush_buffer (the_buffer);
  free (archive_dir);
}

int
recursively_delete (path)
     char *path;
{
  struct stat sbuf;
  DIR *dirp;
  struct direct  *dp;
  char *path_buf;
   


  if (lstat (path, &sbuf) < 0)
    return 1;
  if (((sbuf.st_mode&0xF000) == 0x4000) )
    {

       
      dirp = opendir (path);
      if (dirp == 0)
	return 1;
      while (dp = readdir (dirp))
	{
	  if (is_dot_or_dotdot (dp->d_name))
	    continue;
	  path_buf = new_name (path, dp->d_name);
	  if (recursively_delete (path_buf))
	    {
	      free (path_buf);
	      closedir (dirp);
	      return 1;
	    }
	  free (path_buf);
	}
      closedir (dirp);

      if (rmdir (path) < 0)
	return 1;
      return 0;
    }
  if (unlink (path) < 0)
    return 1;
  return 0;
}
