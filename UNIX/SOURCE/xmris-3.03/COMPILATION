			X M R I S V3.00
		Copyright (C) 1992 Nathan Sidwell

If you had a previous xmris release, I suggest you create this one in an
empty directory, as some of the earlier xmris files are no longer
used, and may be deleted. (If you've already unpacked this one on
top of the old xmris, go back and start again.)

Modify the Imakefile as appropriate for your system.  You will have to
do this to set the compiler, as, by default, Imakefile selects gcc with
the standard includes not in /usr/include.  Makefile.std doesn't do
this, but uses the defaults.  The source will compile with both ANSI and
K&R compilers, provided that they both correctly define __STDC__.
Compilation should be straight forward. Some DEC 5000 systems
appear to have incorrectly set up xmkmf, there are some lines in the
Imakefile which will need to be uncommented to get them to compile
properly. There seem to be other problems with decstations too, such
as the frame rate not being constant.

There are a few things which may cause problems with different
platforms. The timer interrupt stuff, in timer.c, knows about
BSD, SYSV, __hpux and POSIX signals, make sure that the correct define
is given to the compiler from the Imakefile. The elapsed time should
be use gettimeofday, if you haven't got that function, then supply
the define USETIME, this will give less accurate timing.

I've discovered that some (supposedly) ANSI compilers are confused about the
declaration and definition of functions returning pointers to functions.
They only accept K&R style code. If you have such a compiler, you will
discover the define BROKEN_FPTRS, which you can use. You can also complain
to your compiler vendor, especially if they are claiming ANSI conformance.
(Yes I do know that function pointers can be bigger than void pointers,
that's why its important to get it right.) One of the macros, in xmris.h,
assumes your machine uses twos complement arithmetic, (a reasonable
assumption, one would think). If yours doesn't, define
NOT2SCOMP, and an alternate (less efficient) macro will be used.

Set SCORE to the name of the default high score directory. The
score file is xmris.score. Note that the score file uses lockf by default,
this doesn't work on some distributed filing systems. If so,
define NOLOCKF, and a lock file is used to do the locking with
open(O_CREAT | O_EXCL). The name of the lock file is xmris.lock.
For this to work the high score directory must be writeable, which
is not the case with lockf. Personal high score files are also put
in this directory, if xmris can create them there, otherwise they
will be put in the user's home directory.

The game gender is picked from the file name used to invoke it. If this
does not end in mris, or msit, then the default gender is used, which is
random. You can override this with the GENDER macro.

You may want to force static linking, and not use shared libraries,
the EXTRA_LOAD_FLAGS can be used for this.

The make file is configured so that 'make install' will install a setuid
xmris in the BINDIR. And set up the score directory and file appropriately.
You can alter OWNER, SCOREDIRFLAGS, SCOREFILEFLAGS and INSTPGMFLAGS as
you require. Installing the score file will keep an existing score file,
rather than overwrite it with an empty one.

To make on your system type

	xmkmf
	make scram
	make sprites
	make
	make install #Optional step

The 'make sprites' will generate some warnings of the form
'Warning: Noswap color 'COLOR_WHITE' has no pixels', these may be ignored.
If you don't make install, then you'll have to touch the score file
into existance, as xmris will not create one itself.

The scram program is used to generate the sprites in the smallest
number of bitplanes. It uses the default X server to do bitblit
operations on depth 1 pixmaps (which all servers must support).
The capabilities of the server used for compilation do not restrict
the capabilities of the server used for running xmris. Now, of course,
I could have written scram so that it didn't need a server, but then
I'd have to write my own copies of the bit blit routines which
I require. If you really don't like the compilation sequence requiring
X, then rewrite scram (and let me know!).

Xmris.ad is an example resource file. Append it to your .Xdefaults, or
move it to your resource directory. Xmris-colour.ad is an example
colour data base, which you can do similar things with.

To remove all the garbage left by a make you can do

	make clean
	make clean.sprites

This removes all the object files, and all the sprites generated by scram.

Please report modifications, so that they can be considered for
inclusion in later releases (especially true of system specific stuff).

email to nathan@inmos.co.uk

XMRIS has been tested on the following systems, os's and compilers
(but not all combinations of them!), and X release R4 and R5.

Platform:
Sparc 1 monochrome, 8bit pseudo colour
Sparc 1+
Sparc IPC 8bit pseudo colour
Sparc 2
DECstation 5000
pmax 3100 8bit greyscale
pmax 5000 colour
HP 9000/720

OS:
Sunos 4.1, 4.1.1, 4.1.2
Solaris 1.02
Ultrix 4.0, 4.2a
RiscOS 5.0B
Mach 2.5
HP-UX 7.05, 8.05, 8.07

compiler:
gcc 1.38
cc
sun cc
sun c++

Have fun.

nathan
