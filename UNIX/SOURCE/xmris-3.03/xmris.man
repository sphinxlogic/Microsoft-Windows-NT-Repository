.TH XMRIS 6 "18 December 1992" "X Version 11"
.IX xmris#(n) "" "\fLxmris\fP(n)"
.SH NAME
xmris - video game for X
.SH SYNOPSIS
.B xmris
[-option ...] [-toolkitoption ...]
.LP
.B xmsit
[-option ...] [-toolkitoption ...]
.IX xmris#(n) "" "\fLxmris\fP(n) \(em video game"
.SH DESCRIPTION
.PP
Xmris is a version of the Mr Do video arcade game for the X Window
System.
.PP
You control a gnome, who can walk around a garden, along paths already
marked, or create new paths wherever you wish. You also have a ball,
which can be thrown in the direction you're facing, towards the gnome's
feet. Points are scored for collecting cherries (if you collect 8
cherries without stopping, you get a bonus), killing monsters (by
squashing them, or throwing the ball at them), and collecting the prize
left when all the monsters have come out of their den.
.PP
Extra lives are obtained by killing all the 'EXTRA' monsters at the top
of the screen, so that the letters change from stippled to solid
(or grey to black or white, if you have colour, and you haven't changed the
defaults). One of these comes out on its own every 5000 points.
When you collect the prize, the normal
monsters freeze, and an extra monster emerges, along with 3 drones.
Killing the letter monster will kill the drones too. When
the three drones are dead, the normal monsters wake up and things go
faster. When all the normal monsters are killed, or all the
cherries collected, or you have got the final extra monster, you advance
to the next screen.
.PP
You can kill the monsters by throwing the ball at them, or dropping the
apples on them. You get more points for squashing them, and the more you
squash in one go, the more points you get. The extra monster, and its
drones, can eat the apples, provided that they're walking towards the apple.
You die by colliding with a monster (unless its eating an apple, in
which case no harm is done), or by being squashed by a falling apple.
Sometimes a falling apple will break open to reveal a diamond. The points
scores are scaled by the game speed, (see below).
.PP
Your score may be immortalized in the all time best scores and/or the
best of the day scores, and/or your own personal best scores. If your
score was added to the best of the day
after 21:00, it is kept until noon the next day, otherwise it will be
removed at midnight. There is only one entry per user in the all time
best and the best of the day tables.
.PP
There are two load lines at the bottom edge of the window. One shows the
frame time ratio and grows from left to right. The other shows the
frame loading and grows from right to left. Note that these two lines can
overlap, and are drawn with xor plotting. The frame load line grows by
one pixel for every frame which took longer to animate than there was
allotted time, and is shrunk by one pixel for each frame which is animated
in time. The frame time ratio shows the actual frame time, relative to the
the ideal frame time. For a frame time ratio of r, the line is 1 - 1 / r
the width of the window. Ie, for frame time ratio of 3 (one third speed) it
covers two thirds of the window width. The frame timee ratio is a long
time average of the real frame times. It is used to scale the points
scored in the game. The higher the ratio, the lower the score, thus making
heterogeneous comparisons possible. The score scaling is biased towards
lower frame ratios, so you can't get a higher score just by making the game
slower. If your system becomes heavily loaded, you can pause the game, to
prevent the fram time ratio being updated. When the frame load line
diminishes, you can resume the game.
.PP
Because an interrupt is used to control the frame rate, the
animation is reasonably smooth. The game works best with all other
processes asleep. If another process
gets too much processor time, the animation will be jerky, and the load
line will start to grow.
.PP
You probably want to position the pointer at the bottom of the window, so
that it doesn't interfere with the board. You'll notice it flicker, if one
of the sprites moves under it.
.PP
The game is controlled from the keyboard. All the key bindings can be
changed by the toolkit application resource mechanism, or during
one of the demonstration screens. There are four direction keys, known
as up, down, left and right and the ball can be thrown with the throw key.
Pressing more than one direction key will turn the gnome appropriately
at the next intersection, so you can go round corners by pressing the
new direction key before releasing the old one. If you try to go in a
direction not possible, the gnome will move towards the nearest
intersection, or in the direction it was going, depending on how near
to an intersection it is. As an example, suppose you're going left and
want to go up at the next intersection, the sequence would be,
.PP
.nf
        left pressed, because that's the way you're going
        up pressed, before the intersection
        left released, when you've gone round the corner
.fi
.PP
The game can be paused by iconizing it with the iconize key (when your
boss walks in), or moving the pointer out of the window, or by
pressing the pause key. When de-iconizied, the game remains paused.
To continue, press the throw key. When paused, you can abort the current game
by pressing the quit key. If the game is
displaying the demonstration screens, the quit key will quit the game,
and pause key will cycle onto the next demonstration screen. During the
game there are several information screens and pauses, these can be
skipped by pressing the throw key.
.PP
The keys can be changed by using the keyboard key. Each logical key name
is prompted for, and you can select a new key binding by pressing the
one you want. Pressing the throw key will keep the binding for that
particular key (remember the throw key may change half way through this
process). You cannot map one key onto two functions, xmris will
wait until you give an unambiguous set of keys.
.PP
Xmris will use colour sprites, if the visual permits it (has a colour map
size of more than 15, and you haven't forced monochrome). All the colours
bar black and white are user definable. There are four sets, one for
each of the four combinations of gender and swap flag. The
colours are allocated in reverse order of their distance in colour
space, from currently allocated colours (the most distant colours are
allocated first). That way, if allocation fails because the colour map
is full, an allocated substitute colour, which is nearest the desired
colour, can be used and the allocated colours are kept maximally distant.
You can limit the number of distinct colours with the -distinct option.
A warning message is sent to stderr, if a colour allocation fails. The
-colours argument shows how these are allocated, and -help -colours can
be used to get the colour resource names.
.SH OPTIONS
Xmris accepts the standard X Toolkit options, as well as these.
.TP
.B \-help
Lists the command options, application resource fields and some other
information to stderr. Does not start the game. If the -colours option is
supplied too, then the colour resource classes are listed instead.
.TP
.PD 0
.B \-swap
.TP
.B \-rv
.TP
.B \-reverse
.PD
Normally the foreground is black and the background white, this swaps
them round. 
.TP
.B \-noswap
Override a swap resource in your resources, to force unswapped colours.
.TP
.PD 0
.B \-bw
.TP
.B \-mono
.PD
Use black and white, even on colour displays.
.TP
.PD 0
.B \-mris
.TP
.B \-msit
.TP
.B \-gender \fIgender\fP
.PD
Xmris can also be run as xmsit. The two sexes have different sprites.
Mris selects the classic sprites, while msit selects a more modern set.
The gender of the game is taken from the program name (mris or msit)
but may be overridden by these two switches. The game is known as xmris,
because the arcade game was masculine.
.TP
.B \-dir \fIscore directory\fP
Specify a different score directory.
.TP
.PD 0
.B \-nopause
.TP
.B \-pause
.PD
These select whether you want the game to pause or not, when the pointer
leaves the window. Pausing can cause problems with some window
managers and other programs which hide the pointer.
.TP
.B \-scores
List the high scores to stdout. Does not start the game.
.TP
.B \-visual \fIvisual class\fP
Xmris will pick the default visual, but you can override
that by specifying a particular visual class. Valid classes are
PseudoColor, DirectColor, TrueColor, StaticColor, GrayScale,
StaticGray. To see which one is picked, you can use the -colours option.
If you do select a non-default visual, you may have to specify a private
colour map too, due to limitations of the server or display.
.TP
.B \-private
This forces xmris to allocate a private colour map. Normally xmris will
share the default colour map of the selected visual, but if that does not
have enough free colour cells then some colours will have to be shared.
.TP
.PD 0
.B \-colours
.TP
.B \-colors
.PD
Show how the colours are allocated, and which visual has been selected.
The allocation is listed to stdout. When allocating each colour,
its resource name and rgb values are listed together with the nearest
already allocated colour and the distance between them in colour
space. The allocated pixel number is printed last. If given with the -help
option, the colour resource classes are listed, and the game does not start.
.TP
.B \-distinct \fIn\fP
Sets the number of distinct colours used (excluding black and white). This
can be used to limit the number of colours used from the colour map.
.TP
.B \-sprites
Show all the sprites during the demo screen cycle. This can be used when
you are defining your own sprite colours. The direction keys will control
the direction in which the demonstration animated sprites face, and the
throw key will cycle the background colours for pseudo colour visuals.
.SH RESOURCES
Xmris uses the X toolkit application resource mechanism for setting up
the environment. Application resource items start with 'Xmris'. The
resource name can be derived from the given resource class by
decapitalizing it. For example 'cherryStalk' is the resource name for the
class 'cherryStalk'. The following classes are used (choices in '{}' and
defaults in '[]'.)
.TP
.B Xmris.Up: \fIkeysym\fP [apostrophe]
.PD 0
.TP
.B Xmris.Down: \fIkeysym\fP [slash]
.TP
.B Xmris.Left: \fIkeysym\fP [z]
.TP
.B Xmris.Right: \fIkeysym\fP [x]
.TP
.B Xmris.Throw: \fIkeysym\fP [space]
.TP
.B Xmris.Pause: \fIkeysym\fP [p]
.TP
.B Xmris.Quit: \fIkeysym\fP [q]
.TP
.B Xmris.Iconize: \fIkeysym\fP [i]
.TP
.B Xmris.Keyboard: \fIkeysym\fP [k]
.PD
These give the logical key bindings. If the key symbol is unknown, the
default will be used, and a warning printed.
.TP
.B Xmris.dir: \fIscore-directory\fP
The name of the high score directory.
.TP
.B Xmris.Swap: \fI{yes, no}\fP [no]
Specifies whether to use swapped colours or not, in the absence of
a -swap flag.
.TP
.B Xmris.Mono: \fI{yes, no}\fP [no]
Sets whether the default is for monochrome on colour displays.
.TP
.B Xmris.LeavePause: \fI{yes, no}\fP [yes]
Sets the default pausing behaviour when the pointer leaves the window.
.TP
.B Xmris.Gender: \fI{mris, he, male, msit, she, female}\fP [he]
Sets the default game gender.
.TP
.B Xmris.Visual: \fI{PseudoColor, DirectColor, TrueColor,\fP
\fIStaticColor, GrayScale, StaticGray}\fP

Set the required visual class to use.
.TP
.B Xmris.Private: \fI{yes, no}\fP [no]
Set whether or not to use a private colour map.
.TP
.B Xmris.Distinct: \fIn\fP
Set the number of distinct colours allocated from the colour map.
.PP
For example, if you want to use the arrow keys, the following will work
.PP
.nf
        Xmris.Up:       Up
        Xmris.Down:     Down
        Xmris.Left:     Left
        Xmris.Right:    Right
.fi
.PP
In addition, you have the normal resources such as font. However, the
generic font (\'*Font\') will not be picked up, you have to have an
explicit xmris font, if you want a different one. (This is because most
resource paths have some kind of generic font on them, which is too small
and ugly for xmris.)
.PP
There are many colour name defaults. You can specify different ones for
the four combinations of gender and swap flags, or use the same for some
combinations. There is no reason why all these cannot be different colours,
but note that the more unique colours you define, the more colour map entries
you will use up. The colours black and white are already known about, but
because of the way X parses hex colour names, I have programmed white as
#FF00FF00FF00 (what #FFFFFF expands to), not #FFFFFFFFFFFF (what I think
#FFFFFF should expand to). This means that if you specify a white colour to
more than 8 bit accuracy, a new colour will be allocated. (This is a bug.)
Of course, you can specify the colours by name ('NavajoWhite'), so long
as X can grok it by searching your colour database.
.PP
Most of the sprites have a black edge to them on the noswap colour scheme,
this gives comic like sprites. This edge is not included for the swap colour
scheme, and the sprite's colours go right up to the sprite's edge.
Most of the sprites will be surrounded by a halo of the
background colour, so that they don't blend in with each other, when crossing.
Another thing to watch out is contrast compensation.
Because of eye physiology, colours can look different, depending on the
surrounding colours, and light colours
look brighter on dark backgrounds than they do on light ones. A particular
case of the former is if pink is used for the player's face. On white
backgrounds pink looks alright, but on dark backgrounds the pink can look
quite brown, and must be brightened up, if you still want it to look pink.
The latter effect means that the blue used for the drones is bright for a
dark background and darker for a light background. There is no requirement
that those colours with a specific colour in their name, need actually be
a shade of that colour. For example GreenBack could be #A020F0 (purple).
You can use the -sprites and -colours flags to check out how these colours
have been defined and look, and -distinct to limit the distinct colours used.
.PP
The colour resources use the widget classes 'Mris' and 'Msit' and the
optional sub resource 'Swap'. The following are valid.
.PP
.nf
        Xmris*Background:               for all versions
        Xmris.Mris*Background:          for mris versions
        Xmris.Mris.Swap.Background:     for swapped mris
        Xmris.Mris.Background:          for unswapped mris
        Xmris.Msit*Background:          for all msit versions
        Xmris.Msit.Swap.Background:     for swapped msit version
        Xmris*Swap.Background:          for all swapped versions
.fi
.PP
The usual toolkit parsing rules apply to these resources. Namely that '*'
is used to fill out levels of hierarchy, while '.' is used for explicit
matching. The toolkit uses the longest matching string to select resources
in the case of ambiguities. Ie, 'Xmris*Swap.Background' will be selected over
'Xmris*Background' for the swapped versions.
.PP
The defaults for 'Mris', 'Mris.Swap', 'Msit' and 'Msit.Swap' are included
after the resource class.
.TP
.PD 0
.B Background       [#FFFFFF, #000000, #FFFFFF, #000000]
.TP
.B Foreground       [#000000, #FFFFFF, #000000, #FFFFFF]
.PD
The main foreground and background colours. The foreground colour is used
for all text and on board scoring. The background is used for the pathways
and non-board parts of the screen.
.TP
.PD 0
.B GreenBack        [#77BB77, #BBFFBB, #77BB77, #BBFFBB]
.TP
.B GreenFore        [#007700, #00BB00, #007700, #00BB00]
.TP
.B RedBack          [#BB7777, #FFBBBB, #BB7777, #FFBBBB]
.TP
.B RedFore          [#770000, #BB0000, #770000, #BB0000]
.TP
.B BlueBack         [#7777BB, #BBBBFF, #7777BB, #BBBBFF]
.TP
.B BlueFore         [#000077, #0000BB, #000077, #0000BB]
.TP
.B DroneBack        [#AA3333, #FF6666,  ------,  ------]
.TP
.B DroneFore        [#992222, #FF2222,  ------,  ------]
.PD
These are the board colours used for the hedges. Two are used per screen.
For pseudo colour visuals, droneback and dronefore are used when the prize
is eaten.
.TP
.B Ball             [#FFFF77, #FFFF77, #FF00FF, #FF00FF]
This is the ball colour.
.TP
.PD 0
.B CherryRed        [#EE0000, #EE0000, #EE0000, #EE0000]
.TP
.B CherryStalk      [ ------, #EEAA66,  ------, #EEAA66]
.PD
The cherries use two colours, one for the fruit and the other 
for the stalk. The cherry's glint is always white.
.TP
.PD 0
.B Apple1           [#EEDD00, #EEDD00, #EEDD00, #EEDD00]
.TP
.B Apple2           [#DD3300, #DD3300, #DD3300, #DD3300]
.TP
.B AppleFaint       [#BBBBBB,  ------, #BBBBBB,  ------]
.PD
The apples use two colours for their skin. The apple's flesh and
glint is always white.
.TP
.PD 0
.B Gem1              [#DDDDDD, #DDDDDD, #DDDDDD, #DDDDDD]
.TP
.B Gem2              [#BBBBBB, #BBBBBB, #BBBBBB, #BBBBBB]
.PD
The gem facets are white or one of the two gem colours. The lines
between them are black and the sparkle is black for the noswap scheme
and white colour for the swap scheme.
.TP
.PD 0
.B LetterGot        [#000000, #FFFFFF, #000000, #FFFFFF]
.TP
.B LetterNotGot     [#BBBBBB, #BBBBBB, #BBBBBB, #BBBBBB]
.PD
The extra letters and game title lettering uses two colours. One to show
letters which have been got, one for those which have not been got. They
do not have an edge colour put around them.
.TP
.PD 0
.B Normal           [#EE0000, #EE0000, #EE0000, #EE0000]
.TP
.B Munch1           [#FFFF00, #FFFF00, #FFCC00, #FFCC00]
.TP
.B Munch2           [#CCCCCC, #CCCCCC, #FFCC00, #FFCC00]
.TP
.B Drone            [#0000DD, #6666FF, #00FF00, #00FF00]
.TP
.B DroneTongue      [ ------,  ------, #EE0000, #EE0000]
.TP
.B Extra            [#EEFF00, #EEFF00, #EEFF00, #EEFF00]
.TP
.B Chomp            [#FFFFFF, #FFFFFF, #CCFF00, #CCFF00]
.TP
.B ChompLip         [#77FFFF, #77FFFF,  ------,  ------]
.TP
.B ChompTongue      [ ------,  ------, #EE0000, #EE0000]
.PD
Most of the monsters have only one additional colour (to black and white),
but in some instances there are additional colours for the features implied
by the resource name.
.TP
.PD 0
.B Player           [#0000DD, #6666FF, #6666FF, #6666FF]
.TP
.B PlayerBobble     [#FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF]
.TP
.B PlayerSkin       [#FFCCCC, #FFDDDD, #FFCCCC, #FFDDDD]
.TP
.B PlayerBoot       [ ------, #EEAA66, #773322, #DD9955]
.PD
The player uses four additional colours.
The bobble colour is also used for the flecks
in the player's suit. The skin colour is used for the face and hands.
.TP
.PD 0
.B Seat             [#EE0000, #EE0000, #EE0000, #EE0000]
.PD
The little seat on which you can rest uses this additional colour.
.TP
.PD 0
.B Cake             [#FFFF77, #FFFF77, #FFFF77, #FFFF77]
.TP
.B CakeIcing        [#DD9955, #EEAA66, #DD9955, #EEAA66]
.TP
.B CakeJam          [#EE0000, #EE0000, #EE0000, #EE0000]
.PD
The cake prize has an icing layer and a jam layer around the cake layers.
.TP
.PD 0
.B Spanner          [#AAAAAA, #DDDDDD, #AAAAAA, #DDDDDD]
.TP
.B SpannerShadow    [#000000, #000000, #000000, #000000]
.PD
The spanner prize only uses these two colours.
.TP
.PD 0
.B Brolly1          [#FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF]
.TP
.B Brolly2          [#EE0000, #EE0000, #EE0000, #EE0000]
.TP
.B BrollyHandle     [#DD9955, #EEAA66, #DD9955, #EEAA66]
.PD
The umbrella prize uses four colours. The edge colour is used to demark
the parasol colour areas.
.TP
.PD 0
.B MushroomStalk    [#FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF]
.TP
.B MushroomCap      [#EE0000, #EE0000, #EE0000, #EE0000]
.PD
The mushroom prize uses these two additional colours.
.TP
.PD 0
.B ClockFace        [#FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF]
.TP
.B ClockBell        [#00DD00, #00DD00, #00DD00, #00DD00]
.TP
.B ClockRim         [#0000DD, #00DD00, #00DD00, #00DD00]
.PD
The clock prize uses these thee additional colours.
.SH ENVIRONMENT
.TP 4
.B DISPLAY
The default display to connect to. May be overridden with the -display
option.
.TP 4
.B LOGNAME, USER
Read to determine the name to use for the score tables, if
getpwuid(3) fails.
.SH FILES
.TP
.B .../xmris.score
The high score file. The directory is system dependent, and may be
changed by application resources or command option. This file
must exist to be used, (by touching it), and writable to by xmris. This
can be done by chmoding the score file, or by setuiding xmris
appropriately.
.TP
.B .../xmris.lock
In some systems, where lockf doesn't work, this temporary file is
used to perform the locking. The directory containing it must be
writable by xmris. This can be done by chmoding the directory, or
by setuiding xmris appropriately.
.TP
.PD 0
.B .../xmris-<name>
.TP
.B ~/.xmris.score
.PD
These files are used to store the personal best scores. These may be stored
in the score directory, or in the user's home directory.
Xmris first looks for the personal score file in the score directory and
then in the home directory (by reading $HOME). If a personal
score file cannot be found, xmris
attempts to create one. Provided that a global score file exists, xmris
will attempt to create the personal files in the score directory. If this
cannot be done the personal score file if placed in the home directory. In
order to create the personal score file in the score directory, xmris will
have to have the correct access rights, as with the lock file. A setuid xmris
will change the effective uid correctly for accessing both the score directory
and the user's home directory.
.TP
.PD 0
.B ~/.Xdefaults
.TP
.B .../Xmris.ad
.TP
.B .../Xmris-color.ad
.PD
You can place you favourite key bindings and stuff in an application
resource file, and xmris will use them, rather than its compiled defaults.
See X for information about how these are searched.
.TP
.B /usr/lib/X11/rgb.txt
The usual name for the colour database. It consists of colour names and
associated rgb values.
.SH ERRORS
.PP
Errors can occur opening the high score file. If you use
a lock file, rather than lockf, and an error occurs creating the
lock file, a message is printed on stderr, and file locking is not
done for that access. Subsequent accesses may be alright.
.PP
If an error occurs opening the score file, a message is printed on
stderr, and the score file is disabled.
.SH BUGS
.PP
Xmris can be addictive, so don't blame me if your work suffers.
.PP
Sometimes xmris will lose key release events, or stop and start
even with a key pressed. This is really a conflict with the
window manger. If a key is pressed, and
xmris loses keyboard focus (by being obscured, or moving the
pointer), the key release event is sent to some other window.
Xmris is left thinking that the button is pressed. The event
could also be lost, if the event buffer isn't big enough. To
unstick the key, press and release it. With an auto repeat, xmris
cannot tell if key release events are genuine, or just auto
repeats (to be immediately followed by a key press event). If the
key press event arrives in the same frame, then it's Ok, and the
key will remain pressed (as seen by xmris). Xmris tries to flush
key press events through whenever a key release event is received.
Try turning of auto repeat with \'\fIxset r off\fP\' to fix it.
An associated problem of getting both the key press and key release
events in the same frame, is dealt with correctly.
.PP
Xmris does not check that the key definitions in the application
resources do not conflict with each other. Neither are the colours
checked to see that things are actually visible.
.PP
Some of the -msit -swap sprites have black pixels at their edge.
These should really be background colour pixels, but this is only
significant if the -swap background colour is not dark.
.PP
Best of the day scores scored between 21:00 Dec 31 and 00:00 Jan 1,
won't be kept until noon on New Year's Day.
.PP
One of the sprites with lettering, has the lettering reversed when
facing left.
.PP
Getting accurate, stable timing is difficult, as Unix is not a
real time OS. Unix schedules processes in ticks, with a certain
granularity. Getting finer grained timing than that is very much
system dependent. You can try and compensate, and get the correct
average frame rate, but that leads to jerky animation. Some frames
will be shown for N ticks and others for N+1 ticks. This effect
makes it worse to play. There is also slippage between receiving
one interrupt and starting the next one. You don't want to get the
interrupt to restart itself (even though this is possible), as
you then get very rude behaviour if your main loop is a bit too slow,
(suddenly xmris goes at warp 9, trying to catch up on all the missed
frames).
.SH COPYRIGHT
Copyright (C) 1992 Nathan Sidwell.
.SH AUTHOR
Nathan Sidwell <nathan@inmos.co.uk>

Additional sprites by Stefan Gustavson <stefang@isy.liu.se>
