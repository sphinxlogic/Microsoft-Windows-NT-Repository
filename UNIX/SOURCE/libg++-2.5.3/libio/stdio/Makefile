# This file was generated automatically by configure.  Do not edit.
VPATH = .
links = 
host_alias = i386-unknown-sysv4.2
host_cpu = i386
host_vendor = unknown
host_os = sysv4.2
host_canonical = i386-unknown-sysv4.2
target_alias = i386-unknown-sysv4.2
target_cpu = i386
target_vendor = unknown
target_os = sysv4.2
target_canonical = i386-unknown-sysv4.2
package_makefile_frag = ../Make.pack
srcdir = .

#### package, host, target, and site dependent Makefile fragments come in here.
# Start of package fragment generated by ./config.shared.
# TOPDIR=$${rootme}../../ invsubdir= subdir=
srcdir = .
SUBDIRS = 
prefix = /opt
exec_prefix = $(prefix)
bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib
datadir = $(prefix)/lib
mandir = $(prefix)/man
man1dir = $(mandir)/man1
man2dir = $(mandir)/man2
man3dir = $(mandir)/man3
man4dir = $(mandir)/man4
man5dir = $(mandir)/man5
man6dir = $(mandir)/man6
man7dir = $(mandir)/man7
man8dir = $(mandir)/man8
man9dir = $(mandir)/man9
infodir = $(prefix)/info
includedir = $(prefix)/include
gxx_includedir = $(libdir)/g++-include
docdir = $(datadir)/doc

SHELL = /bin/sh

INSTALL = ${rootme}$(srcdir)/../../install.sh -c
INSTALL_PROGRAM = $(INSTALL)
INSTALL_DATA = $(INSTALL)

AR = `if [ -f $${rootme}../../binutils/ar ] ; \
	then echo $${rootme}../../binutils/ar ; \
	else echo ar ; fi`
AR_FLAGS = rc
RANLIB = `if [ -f $${rootme}../../binutils/ranlib ] ; \
	then echo $${rootme}../../binutils/ranlib ; \
	else echo ranlib ; fi`
NM = `if [ -f $${rootme}../../binutils/nm ] ; \
	then echo $${rootme}../../binutils/nm ; \
	else echo nm ; fi`

MAKEINFO = `if [ -f $${rootme}../../texinfo/C/makeinfo ] ; \
	then echo $${rootme}../../texinfo/C/makeinfo ; \
	else echo makeinfo ; fi`
TEXIDIR=${srcdir}/../..//texinfo
TEXI2DVI = TEXINPUTS=${TEXIDIR}:$$TEXINPUTS texi2dvi

CC = `if [ -f $${rootme}../../gcc/xgcc ] ; \
	then echo $${rootme}../../gcc/xgcc -B$${rootme}../../gcc/ ; \
	else echo cc ; fi`
CXX = `if [ -f $${rootme}../../gcc/xgcc ] ; \
	then echo $${rootme}../../gcc/xgcc -B$${rootme}../../gcc/ ; \
	else echo gcc ; fi`

XTRAFLAGS = `if [ -f $${rootme}../../gcc/xgcc ] ;\
	then echo -I$${rootme}../../gcc/include;\
	else echo ; fi`
WRAP_C_INCLUDES =
CFLAGS = -g
CXXFLAGS = -g -O
.PHONY: all
all: nothing


.SUFFIXES: .o .C .cc
.c.o:
	$(CC) -c $(CFLAGS) $(CINCLUDES) $<
.C.o:
	$(CXX) -c $(CXXFLAGS) $(CXXINCLUDES) $<
.cc.o:
	$(CXX) -c $(CXXFLAGS) $(CXXINCLUDES) $<


.PHONY: install
install:
.PHONY: check
check: nothing 
.PHONY: info dvi install-info clean-info
info:
dvi:
install-info:
.PHONY: do-clean-info clean-info do-clean-dvi clean-dvi
do-clean-info:
do-clean-dvi:
clean-info: do-clean-info
clean-dvi: do-clean-dvi

.PHONY: boltcc
boltcc:
	rootme=`pwd`/ ; export rootme ; $(MAKE) $(FLAGS_TO_PASS)


# clean rules
.PHONY: mostlyclean clean distclean realclean
mostlyclean: clean-dvi
	rm -rf *.o core stdio.list 
clean: clean-dvi
	rm -rf *.o core stdio.list   
distclean: clean
	rm -rf config.status Makefile *~ Make.pack
realclean: clean clean-info
	rm -rf config.status Makefile *~ Make.pack depend *.info*

.PHONY: force
force:

# with the gnu make, this is done automatically.

Makefile: $(srcdir)/Makefile.in $(host_makefile_frag) $(target_makefile_frag)
	$(SHELL) ./config.status

.NOEXPORT:
MAKEOVERRIDES=
# End of package fragment generated by ./config.shared.
##

# These are compiled from the corresponding ../ioFOO.c files.
STDIO_RENAMED_OBJECTS = fclose.o fflush.o fgetpos.o fgets.o fopen.o fprintf.o fputs.o fread.o fscanf.o fsetpos.o ftell.o fwrite.o gets.o perror.o printf.o puts.o scanf.o setbuffer.o setvbuf.o sprintf.o sscanf.o ungetc.o vsprintf.o vsscanf.o
# These are the files that a libc would want.
STDIO_OBJECTS = $(STDIO_RENAMED_OBJECTS) \
  clearerr.o fdopen.o feof.o ferror.o fgetc.o fileno.o \
  fputc.o freopen.o fseek.o getc.o getchar.o getw.o \
  popen.o putc.o putchar.o putw.o rewind.o \
  setbuf.c setfileno.o setlinebuf.o \
  vfprintf.o vfscanf.o vprintf.o vscanf.o

CC_FOR_STDIO=$(CC)
CINCLUDES = -I. -I$(srcdir) -I.. -I$(srcdir)/..

nothing:

stdio.list: $(STDIO_OBJECTS)
	@echo "$(STDIO_OBJECTS)" >stdio.list

fclose.o: $(srcdir)/../iofclose.c
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iofclose.c -D_IO_fclose=fclose -o fclose.o
fflush.o: $(srcdir)/../iofflush.c
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iofflush.c -D_IO_fflush=fflush -o fflush.o
fgetpos.o: $(srcdir)/../iofgetpos.c
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iofgetpos.c -D_IO_fgetpos=fgetpos -o fgetpos.o
fgets.o: $(srcdir)/../iofgets.c
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iofgets.c -D_IO_fgets=fgets -o fgets.o
fopen.o: $(srcdir)/../iofopen.c
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iofopen.c -D_IO_fopen=fopen -o fopen.o
fprintf.o: $(srcdir)/../iofprintf.c
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iofprintf.c -D_IO_fprintf=fprintf -o fprintf.o
fputs.o: $(srcdir)/../iofputs.c
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iofputs.c -D_IO_fputs=fputs -o fputs.o
fread.o: $(srcdir)/../iofread.c
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iofread.c -D_IO_fread=fread -o fread.o
fscanf.o: $(srcdir)/../iofscanf.c
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iofscanf.c -D_IO_fscanf=fscanf -o fscanf.o
fsetpos.o: $(srcdir)/../iofsetpos.c
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iofsetpos.c -D_IO_fsetpos=fsetpos -o fsetpos.o
ftell.o: $(srcdir)/../ioftell.c
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../ioftell.c -D_IO_ftell=ftell -o ftell.o
fwrite.o: $(srcdir)/../iofwrite.c
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iofwrite.c -D_IO_fwrite=fwrite -o fwrite.o
gets.o: $(srcdir)/../iogets.c
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iogets.c -D_IO_gets=gets -o gets.o
perror.o: $(srcdir)/../ioperror.c
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../ioperror.c -D_IO_perror=perror -o perror.o
printf.o: $(srcdir)/../ioprintf.c
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../ioprintf.c -D_IO_printf=printf -o printf.o
puts.o: $(srcdir)/../ioputs.c
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../ioputs.c -D_IO_puts=puts -o puts.o
scanf.o: $(srcdir)/../ioscanf.c
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../ioscanf.c -D_IO_scanf=scanf -o scanf.o
setbuffer.o: $(srcdir)/../iosetbuffer.c
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iosetbuffer.c -D_IO_setbuffer=setbuffer -o setbuffer.o
setvbuf.o: $(srcdir)/../iosetvbuf.c
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iosetvbuf.c -D_IO_setvbuf=setvbuf -o setvbuf.o
sprintf.o: $(srcdir)/../iosprintf.c
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iosprintf.c -D_IO_sprintf=sprintf -o sprintf.o
sscanf.o: $(srcdir)/../iosscanf.c
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iosscanf.c -D_IO_sscanf=sscanf -o sscanf.o
ungetc.o: $(srcdir)/../ioungetc.c
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../ioungetc.c -D_IO_ungetc=ungetc -o ungetc.o
vsprintf.o: $(srcdir)/../iovsprintf.c
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iovsprintf.c -D_IO_vsprintf=vsprintf -o vsprintf.o
vsscanf.o: $(srcdir)/../iovsscanf.c
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iovsscanf.c -D_IO_vsscanf=vsscanf -o vsscanf.o
