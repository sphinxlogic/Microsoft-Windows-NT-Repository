# This file was generated automatically by configure.  Do not edit.
VPATH = .
links = 
host_alias = i386-unknown-sysv4.2
host_cpu = i386
host_vendor = unknown
host_os = sysv4.2
host_canonical = i386-unknown-sysv4.2
target_alias = i386-unknown-sysv4.2
target_cpu = i386
target_vendor = unknown
target_os = sysv4.2
target_canonical = i386-unknown-sysv4.2
package_makefile_frag = Make.pack
# Makefile for GNU C++ class library (libg++)
#   Copyright (C) 1989, 1992, 1993 Free Software Foundation, Inc.
#   written by Doug Lea (dl@rocky.oswego.edu)

#This file is part of GNU libg++.

#GNU libg++ is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 1, or (at your option)
#any later version.

#GNU libg++ is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with GNU libg++; see the file COPYING.  If not, write to
#the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

srcdir = .

# We specify exactly what we want to pass down; don't let GNU make
# 3.63 overload the command line.
MAKEOVERRIDES=

###**######################################################################
#
# Directories, paths, compilation flags and program names.
#
# If a macro needs to have a different value, then change it in the
# site/architecture specific makefile in the directory config !
#
# This file contains the documentation for the macros and possible values.
# Don't remove them even, if they are only comments !

VERSION = 2.5.3
LIBG++_DIST_VERSION = $(VERSION)

# ------- System-dependent defines

# g++ so specific flags
OSFLAG=

# ld or ld++ os specific libraries
#OSLIBS =

# Comment out the next line to disable incremental linking test
# (this test NOT included in 1.39.0, so don't re-enable) ??? H.S.
#TEST0=test0
#TEST0=

# targets for test-install
TEST_INSTALL 		= test-90S-then-clean # test-90D-then-clean
VERIFY_GXX_INSTALLATION = foo_main # dfoo_main


# You can override gperf to not build it at all
GPERF = gperf
NON_IO_SUBDIRS	=  genclass src $(GPERF) utils tests etc test-install
SUBDIRS = genclass no-stream old-stream src tests gperf utils etc test-install
ALL_SUBDIRS = $(NON_IO_SUBDIRS) old-stream no-stream

ALL	=  verify-gxx-installation genclass src $(GPERF) $(UTILS)
CHECK	=  tests etc etc-tests
UTILS   =  # utils

# C++ compiler to use when testing that installation has succeeded.
INSTALLED_CXX=$(bindir)/gcc

TARGETLIB = libg++.a

# Used to insert objects from libiberty into libg++.a.
LIBIBERTY = libiberty
LIBIBERTY_OBJECTS_TO_GET = `cat needed-list` strerror.o strsignal.o

#### package, host, target, and site dependent Makefile fragments come in here.
# Start of package fragment generated by ./config.shared.
# TOPDIR=$${rootme}../ invsubdir= subdir=
srcdir = .
SUBDIRS = genclass no-stream old-stream src tests gperf utils etc test-install
prefix = /opt
exec_prefix = $(prefix)
bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib
datadir = $(prefix)/lib
mandir = $(prefix)/man
man1dir = $(mandir)/man1
man2dir = $(mandir)/man2
man3dir = $(mandir)/man3
man4dir = $(mandir)/man4
man5dir = $(mandir)/man5
man6dir = $(mandir)/man6
man7dir = $(mandir)/man7
man8dir = $(mandir)/man8
man9dir = $(mandir)/man9
infodir = $(prefix)/info
includedir = $(prefix)/include
gxx_includedir = $(libdir)/g++-include
docdir = $(datadir)/doc

SHELL = /bin/sh

INSTALL = ${rootme}$(srcdir)/../install.sh -c
INSTALL_PROGRAM = $(INSTALL)
INSTALL_DATA = $(INSTALL)

AR = `if [ -f $${rootme}../binutils/ar ] ; \
	then echo $${rootme}../binutils/ar ; \
	else echo ar ; fi`
AR_FLAGS = rc
RANLIB = `if [ -f $${rootme}../binutils/ranlib ] ; \
	then echo $${rootme}../binutils/ranlib ; \
	else echo ranlib ; fi`
NM = `if [ -f $${rootme}../binutils/nm ] ; \
	then echo $${rootme}../binutils/nm ; \
	else echo nm ; fi`

MAKEINFO = `if [ -f $${rootme}../texinfo/C/makeinfo ] ; \
	then echo $${rootme}../texinfo/C/makeinfo ; \
	else echo makeinfo ; fi`
TEXIDIR=${srcdir}/..//texinfo
TEXI2DVI = TEXINPUTS=${TEXIDIR}:$$TEXINPUTS texi2dvi

CC = `if [ -f $${rootme}../gcc/xgcc ] ; \
	then echo $${rootme}../gcc/xgcc -B$${rootme}../gcc/ ; \
	else echo cc ; fi`
CXX = `if [ -f $${rootme}../gcc/xgcc ] ; \
	then echo $${rootme}../gcc/xgcc -B$${rootme}../gcc/ ; \
	else echo gcc ; fi`

XTRAFLAGS = `if [ -f $${rootme}../gcc/xgcc ] ;\
	then echo -I$${rootme}../gcc/include;\
	else echo ; fi`
WRAP_C_INCLUDES =
CFLAGS = -g
CXXFLAGS = -g -O
PROTODIR = $(srcdir)/src/gen
LIBS = libg++.a
IO_DIR = ../libio
# IO_DIR = no-stream
.PHONY: all
all: $(TARGETLIB) rest-in-parallel
	@rootme=`pwd`/; export rootme; \
	$(MAKE) "DODIRS=$(SUBDIRS)" DO=all $(FLAGS_TO_PASS) subdir_do


.PHONY: subdir_do
subdir_do: force
	@rootme=`pwd`/; export rootme; \
	for i in $(DODIRS); do \
		if [ -f  ./$$i/Makefile ] ; then \
			echo "cd $$i; make $(DO) ..." ; \
			(cd $$i ; $(MAKE) $(FLAGS_TO_PASS) $(DO)) || exit 1 ; \
		else true ; fi ; \
	done

# List of variables to pass to sub-makes.  This should not be needed
# by GNU make or Sun make (both of which pass command-line variable
# overrides thouh $(MAKE)) but may be needed by older versions.

FLAGS_TO_PASS= \
	"INSTALL=$(INSTALL)" \
	"INSTALL_DATA=$(INSTALL_DATA)" \
	"INSTALL_PROGRAM=$(INSTALL_PROGRAM)" \
	"prefix=$(prefix)" \
	"exec_prefix=$(exec_prefix)" \
	"tooldir=$(tooldir)" \
	"AR=$(AR)" \
	"AR_FLAGS=$(AR_FLAGS)" \
	"CC=$(CC)" \
	"CXX=$(CXX)" \
	"CFLAGS=$(CFLAGS)" \
	"CXXFLAGS=$(CXXFLAGS)" \
	"RANLIB=$(RANLIB)" \
	"LOADLIBES=$(LOADLIBES)" \
	"LDFLAGS=$(LDFLAGS)" \
	"MAKEINFO=$(MAKEINFO)" \
	"XTRAFLAGS=$(XTRAFLAGS)"
CXXINCLUDES = $(NOSTDINC) -I. -I../libio -I$(srcdir) -I$(srcdir)/$(IO_DIR) -I$(srcdir)/src $(WRAP_C_INCLUDES) $(XTRAFLAGS)
CINCLUDES = $(XTRAFLAGS)
.SUFFIXES: .o .C .cc
.c.o:
	$(CC) -c $(CFLAGS) $(CINCLUDES) $<
.C.o:
	$(CXX) -c $(CXXFLAGS) $(CXXINCLUDES) $<
.cc.o:
	$(CXX) -c $(CXXFLAGS) $(CXXINCLUDES) $<


.PHONY: install
install:
.PHONY: check
check: $(TARGETLIB) rest-in-parallel 
	@rootme=`pwd`/; export rootme; \
	$(MAKE) "DODIRS=$(SUBDIRS)" DO=check $(FLAGS_TO_PASS) subdir_do
.PHONY: info dvi install-info clean-info
info: libg++.info
	@rootme=`pwd`/; export rootme; \
	$(MAKE) "DODIRS=$(SUBDIRS)" DO=info $(FLAGS_TO_PASS) subdir_do
dvi: libg++.dvi
	@rootme=`pwd`/; export rootme; \
	$(MAKE) "DODIRS=$(SUBDIRS)" DO=dvi $(FLAGS_TO_PASS) subdir_do
libg++.info: $(srcdir)/libg++.texi
	$(MAKEINFO) -I$(srcdir) -I$(TEXIDIR) $(srcdir)/libg++.texi -o libg++.info
libg++.dvi: $(srcdir)/libg++.texi
	$(TEXI2DVI) $(srcdir)/libg++.texi
libg++.ps: libg++.dvi
	dvips libg++ -o
install-info:
	-parent=`echo $(infodir)|sed -e 's@/[^/]*$$@@'`; \
	if [ -d $$parent ] ; then true ; else mkdir $$parent ; fi
	-if [ -d $(infodir) ] ; then true ; else mkdir $(infodir) ; fi
	for i in *.info* ; do \
	  $(INSTALL_DATA) $$i $(infodir)/$$i ; \
	done
	@rootme=`pwd`/; export rootme; \
	$(MAKE) "DODIRS=$(SUBDIRS)" DO=install-info $(FLAGS_TO_PASS) subdir_do
.PHONY: do-clean-info clean-info do-clean-dvi clean-dvi
do-clean-info:
	rm -f *.info*
do-clean-dvi:
	rm -f *.dvi *.aux *.cp *.fn* *.ky *.log *.pg *.toc *.tp *.vr
clean-info: do-clean-info
	@rootme=`pwd`/; export rootme; \
	$(MAKE) "DODIRS=" DO=clean-info $(FLAGS_TO_PASS) subdir_do
clean-dvi: do-clean-dvi
	@rootme=`pwd`/; export rootme; \
	$(MAKE) "DODIRS=" DO=clean-dvi $(FLAGS_TO_PASS) subdir_do

.PHONY: boltcc
boltcc:
	rootme=`pwd`/ ; export rootme ; $(MAKE) $(FLAGS_TO_PASS)


# clean rules
.PHONY: mostlyclean clean distclean realclean
.PHONY: do-clean subdir_distclean subdir_realclean
mostlyclean: do-clean-dvi
	rm -rf *.o core \#* temp.c stamp-$(TARGETLIB) dummy.out dummy.[Cc] TMP a.out 
	@$(MAKE) $(FLAGS_TO_PASS) "DODIRS=$(SUBDIRS)" DO=mostlyclean subdir_do
do-clean: do-clean-dvi
	rm -rf *.o core \#* temp.c stamp-$(TARGETLIB) dummy.out dummy.[Cc] TMP a.out  .stmp-* _G_config.h $(TARGETLIB)
clean: do-clean
	@$(MAKE) $(FLAGS_TO_PASS) "DODIRS=$(SUBDIRS)" DO=clean subdir_do
subdir_distclean:
	@$(MAKE) $(FLAGS_TO_PASS) "DODIRS=$(SUBDIRS)" DO=distclean subdir_do
distclean: do-clean subdir_distclean
	rm -rf config.status Makefile target-mkfrag
subdir_realclean:
	@$(MAKE) $(FLAGS_TO_PASS) "DODIRS=$(SUBDIRS)" DO=realclean subdir_do
realclean: do-clean subdir_realclean do-clean-info
	rm -rf config.status Makefile target-mkfrag depend *.info*

.PHONY: force
force:

# with the gnu make, this is done automatically.

Makefile: $(srcdir)/Makefile.in $(host_makefile_frag) $(target_makefile_frag)
	$(SHELL) ./config.status

.NOEXPORT:
MAKEOVERRIDES=
# End of package fragment generated by ./config.shared.
##

tooldir = $(exec_prefix)/i386-unknown-sysv4.2
INSTALLDIR = $(libdir)

###**######################################################################
#
# compilation actions

.PHONY: rest-in-parallel in-src in-io
rest-in-parallel: .stmp-genclass .stmp-tests .stmp-etc .stmp-gperf .stmp-utils

# We assume libiberty is made before .
$(TARGETLIB): in-io in-src stamp-$(TARGETLIB)

stamp-$(TARGETLIB): src/libgxx.list $(IO_DIR)/iostream.list ../$(LIBIBERTY)/libiberty.a
	-rm -f $(TARGETLIB)
	rootme=`pwd`/ ; export rootme ; cd src ; \
	  $(AR) $(AR_FLAGS) ../$(TARGETLIB) `cat libgxx.list`
	cd $(IO_DIR); \
	  $(AR) $(AR_FLAGS) ../libg++/$(TARGETLIB) `cat iostream.list`
	cd ../$(LIBIBERTY); \
	  $(AR) $(AR_FLAGS) ../libg++/$(TARGETLIB) $(LIBIBERTY_OBJECTS_TO_GET)
	$(RANLIB) $(TARGETLIB)
	@touch stamp-$(TARGETLIB)

src/libgxx.list: in-src
in-src:
	@rootme=`pwd`/ ; export rootme ; cd src ; \
		$(MAKE) $(FLAGS_TO_PASS) libgxx.list

$(IO_DIR)/iostream.list: in-io
in-io:
	@rootme=`pwd`/ ; export rootme ; cd $(IO_DIR) ; \
		$(MAKE) $(FLAGS_TO_PASS) iostream.list

in-libiberty:
	@rootme=`pwd`/ ; export rootme ; cd ../$(LIBIBERTY) ; \
		$(MAKE) $(FLAGS_TO_PASS)

.PHONY: installcheck
installcheck: check

.stmp-genclass: $(TARGETLIB)
	@rootme=`pwd`/ ; export rootme ; cd genclass ; \
	  $(MAKE) $(FLAGS_TO_PASS) "gxx_includedir=$(gxx_includedir)"
	touch $@

.stmp-tests: $(TARGETLIB)
	@rootme=`pwd`/ ; export rootme ; cd tests ; \
	  $(MAKE) $(FLAGS_TO_PASS)
	touch $@

.stmp-etc: $(TARGETLIB)
	@rootme=`pwd`/ ; export rootme ; cd etc ; \
	  $(MAKE) $(FLAGS_TO_PASS)
	touch $@

.stmp-gperf: $(TARGETLIB)
	@if [ "x$(GPERF)" != "x" ]; then \
	   rootme=`pwd`/ ; export rootme ; cd $(GPERF) ; \
	      $(MAKE) $(FLAGS_TO_PASS); \
	 else true; fi
	touch $@

.stmp-utils: $(TARGETLIB)
	@if [ "x$(UTILS)" != "x" ]; then \
	   rootme=`pwd`/ ; export rootme ; cd $(UTILS) ; \
	     $(MAKE) $(FLAGS_TO_PASS); \
	 else true; fi
	touch $@

#
#
# Installation
#

.PHONY: install
install:
	$(INSTALL_DATA) $(TARGETLIB) $(INSTALLDIR)/$(TARGETLIB)
	$(RANLIB) $(INSTALLDIR)/$(TARGETLIB)
	chmod a-x $(INSTALLDIR)/$(TARGETLIB)
	cd $(srcdir)/src; \
	for FILE in *.h gen/*.ccP gen/*.hP; do \
		rm -f $(gxx_includedir)/$$FILE ; \
		$(INSTALL_DATA) $$FILE $(gxx_includedir)/$$FILE || exit 1; \
		chmod a-x,a+r $(gxx_includedir)/$$FILE ; \
	done
	if [ "x$(GPERF)" != "x" ]; then \
	  cd gperf ; $(MAKE) $(FLAGS_TO_PASS) install; \
	else true; fi
	@for D in genclass $(UTILS) ; do \
		if [ -d $$D ] ; then \
			(cd $$D; $(MAKE) $(FLAGS_TO_PASS) "gxx_includedir=$(gxx_includedir)" install) ; \
		else true ; \
		fi ; \
	done

installcheck:
	if [ "x$(TEST_INSTALL)" != "x" ]; then \
	  cd test-install; $(MAKE) $(TEST_INSTALL) \
	      CXX=$(INSTALLED_CXX) "CXXFLAGS=$(CXXFLAGS)" \
	      COMPILE_FLAGS="" LIBS=-lg++; \
	else true; fi

DIST_NAME = libg++-$(LIBG++_DIST_VERSION)

$(DIST_NAME).tar.gz: dist

# Making a dist:
# cvs rtag libgxx-x-yy libg++
# cvs co -r libgxx-x-yy libg++
# Sanitize
# cd {HERE}/..
# make -f Makefile.in libg++.tar.gz

diststuff: info

force:
.PHONY: $(SUBDIRS) dist
