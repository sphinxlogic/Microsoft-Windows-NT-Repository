# This file was generated automatically by configure.  Do not edit.
VPATH = .
links = 
host_alias = i386-unknown-sysv4.2
host_cpu = i386
host_vendor = unknown
host_os = sysv4.2
host_canonical = i386-unknown-sysv4.2
target_alias = i386-unknown-sysv4.2
target_cpu = i386
target_vendor = unknown
target_os = sysv4.2
target_canonical = i386-unknown-sysv4.2
package_makefile_frag = Make.pack
target_makefile_frag = ../target-mkfrag
# Makefile for libg++.a

# Copyright (C) 1988, 1992, 1993 Free Software Foundation
#   originally written by Doug Lea (dl@rocky.oswego.edu)

# This file is part of libg++, the GNU C++ library.

# GNU CC is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY.  No author or distributor
# accepts responsibility to anyone for the consequences of using it
# or for whether it serves any particular purpose or works at all,
# unless he says so in writing.  Refer to the GNU CC General Public
# License for full details.

# Everyone is granted permission to copy, modify and redistribute
# GNU CC, but only under the conditions described in the
# GNU CC General Public License.   A copy of this license is
# supposed to have been given to you along with GNU CC so you
# can know your rights and responsibilities.  It should be in a
# file named COPYING.  Among other things, the copyright notice
# and this notice must be preserved on all copies.

srcdir = .

# 
# declarations from here on should not normally need to be changed 
# in order to compile libg++.a
#

# library sources 

EH_FILES =

STREAM_OBJS = File.o  ostream.o istream.o streambuf.o filebuf.o Filebuf.o \
 PlotFile.o  SFile.o

# Comment out if you're getting regex from somewhere else.
REGEX_OBJ=regex.o
OBJS =  AllocRing.o Obstack.o builtin.o \
 $(REGEX_OBJ) Regex.o String.o Intdouble.o Integer.o Rational.o \
 Complex.o  Random.o BitSet.o BitString.o LogNorm.o SmplHist.o SmplStat.o \
 Normal.o NegExp.o Weibull.o Erlang.o DiscUnif.o \
 Uniform.o Poisson.o HypGeom.o Geom.o Binomial.o \
 RNG.o ACG.o MLCG.o  RndInt.o  \
 Fix.o Fix16.o Fix24.o CursesW.o GetOpt.o $(EH_FILES) \
 new.o chr.o error.o gcd.o hash.o \
 lg.o fmtq.o ioob.o pow.o sqrt.o str.o timer.o \
 math.o compare.o \
 SLList.o DLList.o

DEPEND_SOURCES = $(srcdir)/*.cc

#### host, target, and site dependent Makefile fragments come in here.
# Start of package fragment generated by ./../config.shared.
# TOPDIR=$${rootme}../../ invsubdir= subdir=
srcdir = .
SUBDIRS = 
prefix = /opt
exec_prefix = $(prefix)
bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib
datadir = $(prefix)/lib
mandir = $(prefix)/man
man1dir = $(mandir)/man1
man2dir = $(mandir)/man2
man3dir = $(mandir)/man3
man4dir = $(mandir)/man4
man5dir = $(mandir)/man5
man6dir = $(mandir)/man6
man7dir = $(mandir)/man7
man8dir = $(mandir)/man8
man9dir = $(mandir)/man9
infodir = $(prefix)/info
includedir = $(prefix)/include
gxx_includedir = $(libdir)/g++-include
docdir = $(datadir)/doc

SHELL = /bin/sh

INSTALL = ${rootme}$(srcdir)/../../install.sh -c
INSTALL_PROGRAM = $(INSTALL)
INSTALL_DATA = $(INSTALL)

AR = `if [ -f $${rootme}../../binutils/ar ] ; \
	then echo $${rootme}../../binutils/ar ; \
	else echo ar ; fi`
AR_FLAGS = rc
RANLIB = `if [ -f $${rootme}../../binutils/ranlib ] ; \
	then echo $${rootme}../../binutils/ranlib ; \
	else echo ranlib ; fi`
NM = `if [ -f $${rootme}../../binutils/nm ] ; \
	then echo $${rootme}../../binutils/nm ; \
	else echo nm ; fi`

MAKEINFO = `if [ -f $${rootme}../../texinfo/C/makeinfo ] ; \
	then echo $${rootme}../../texinfo/C/makeinfo ; \
	else echo makeinfo ; fi`
TEXIDIR=${srcdir}/../..//texinfo
TEXI2DVI = TEXINPUTS=${TEXIDIR}:$$TEXINPUTS texi2dvi

CC = `if [ -f $${rootme}../../gcc/xgcc ] ; \
	then echo $${rootme}../../gcc/xgcc -B$${rootme}../../gcc/ ; \
	else echo cc ; fi`
CXX = `if [ -f $${rootme}../../gcc/xgcc ] ; \
	then echo $${rootme}../../gcc/xgcc -B$${rootme}../../gcc/ ; \
	else echo gcc ; fi`

XTRAFLAGS = `if [ -f $${rootme}../../gcc/xgcc ] ;\
	then echo -I$${rootme}../../gcc/include;\
	else echo ; fi`
WRAP_C_INCLUDES =
CFLAGS = -g
CXXFLAGS = -g -O
PROTODIR = $(srcdir)/../src/gen
LIBS = ../libg++.a
IO_DIR = ../libio
# IO_DIR = no-stream
.PHONY: all
all: $(OBJS)


CXXINCLUDES =  -I. -I../../libio -I$(srcdir) -I$(srcdir)/../$(IO_DIR) -I$(srcdir)/../src $(WRAP_C_INCLUDES) $(XTRAFLAGS)
CINCLUDES = -I../../libio $(XTRAFLAGS)
.SUFFIXES: .o .C .cc
.c.o:
	$(CC) -c $(CFLAGS) $(CINCLUDES) $<
.C.o:
	$(CXX) -c $(CXXFLAGS) $(CXXINCLUDES) $<
.cc.o:
	$(CXX) -c $(CXXFLAGS) $(CXXINCLUDES) $<


.PHONY: install
install:
.PHONY: check
check: $(OBJS) 
.PHONY: info dvi install-info clean-info
info:
dvi:
install-info:
.PHONY: do-clean-info clean-info do-clean-dvi clean-dvi
do-clean-info:
do-clean-dvi:
clean-info: do-clean-info
clean-dvi: do-clean-dvi

.PHONY: boltcc
boltcc:
	rootme=`pwd`/ ; export rootme ; $(MAKE) $(FLAGS_TO_PASS)


# clean rules
.PHONY: mostlyclean clean distclean realclean
mostlyclean: clean-dvi
	rm -rf *.o core libgxx.list 
clean: clean-dvi
	rm -rf *.o core libgxx.list   
distclean: clean
	rm -rf config.status Makefile *~ Make.pack
realclean: clean clean-info
	rm -rf config.status Makefile *~ Make.pack depend *.info*

.PHONY: force
force:

# with the gnu make, this is done automatically.

Makefile: $(srcdir)/Makefile.in $(host_makefile_frag) $(target_makefile_frag)
	$(SHELL) ./config.status

.NOEXPORT:
MAKEOVERRIDES=


# DO NOT DELETE THIS LINE -- g++dep uses it.
# DO NOT PUT ANYTHING AFTER THIS LINE, IT WILL GO AWAY.

ACG.o : ACG.cc \
  ACG.h \
  RNG.h 
AllocRing.o : AllocRing.cc \
  std.h \
  AllocRing.h \
  new.h
Binomial.o : Binomial.cc \
  builtin.h \
  std.h \
  Random.h \
  RNG.h \
  Binomial.h
BitSet.o : BitSet.cc \
  BitSet.h \
  $(srcdir)/../$(IO_DIR)/stream.h \
  $(srcdir)/../$(IO_DIR)/iostream.h \
  $(srcdir)/../$(IO_DIR)/streambuf.h \
  std.h \
  Obstack.h \
  AllocRing.h \
  new.h \
  builtin.h \
  $(srcdir)/../$(IO_DIR)/strstream.h
BitString.o : BitString.cc \
  BitString.h \
  $(srcdir)/../$(IO_DIR)/stream.h \
  $(srcdir)/../$(IO_DIR)/iostream.h \
  $(srcdir)/../$(IO_DIR)/streambuf.h \
  std.h \
  Obstack.h \
  AllocRing.h \
  new.h \
  builtin.h \
  $(srcdir)/../$(IO_DIR)/strstream.h
Complex.o : Complex.cc \
  Complex.h \
  $(srcdir)/../$(IO_DIR)/stream.h \
  $(srcdir)/../$(IO_DIR)/iostream.h \
  $(srcdir)/../$(IO_DIR)/streambuf.h \
  std.h \
  builtin.h
CursesW.o : CursesW.cc \
  builtin.h \
  std.h \
  $(srcdir)/../$(IO_DIR)/strstream.h \
  $(srcdir)/../$(IO_DIR)/iostream.h \
  $(srcdir)/../$(IO_DIR)/streambuf.h \
  CursesW.h 
DiscUnif.o : DiscUnif.cc \
  builtin.h \
  std.h \
  Random.h \
  RNG.h \
  DiscUnif.h
EH-sunlabs.o : EH-sunlabs.cc 
EH.o : EH.cc \
  $(srcdir)/../$(IO_DIR)/stream.h \
  $(srcdir)/../$(IO_DIR)/iostream.h \
  $(srcdir)/../$(IO_DIR)/streambuf.h 
EH2.o : EH2.c \
  EH2.c
Erlang.o : Erlang.cc \
  builtin.h \
  std.h \
  Random.h \
  RNG.h \
  Erlang.h
Fix.o : Fix.cc \
  Fix.h \
  $(srcdir)/../$(IO_DIR)/stream.h \
  $(srcdir)/../$(IO_DIR)/iostream.h \
  $(srcdir)/../$(IO_DIR)/streambuf.h \
  std.h \
  Integer.h \
  builtin.h \
  Obstack.h \
  AllocRing.h \
  $(srcdir)/../$(IO_DIR)/strstream.h
Fix16.o : Fix16.cc \
  Fix16.h \
  $(srcdir)/../$(IO_DIR)/stream.h \
  $(srcdir)/../$(IO_DIR)/iostream.h \
  $(srcdir)/../$(IO_DIR)/streambuf.h \
  std.h 
Fix24.o : Fix24.cc \
  Fix24.h \
  $(srcdir)/../$(IO_DIR)/stream.h \
  $(srcdir)/../$(IO_DIR)/iostream.h \
  $(srcdir)/../$(IO_DIR)/streambuf.h \
  std.h 
Geom.o : Geom.cc \
  builtin.h \
  std.h \
  Random.h \
  RNG.h \
  Geom.h
GetOpt.o : GetOpt.cc \
  GetOpt.h \
  std.h 
HypGeom.o : HypGeom.cc \
  builtin.h \
  std.h \
  Random.h \
  RNG.h \
  HypGeom.h
Integer.o : Integer.cc \
  Integer.h \
  $(srcdir)/../$(IO_DIR)/stream.h \
  $(srcdir)/../$(IO_DIR)/iostream.h \
  $(srcdir)/../$(IO_DIR)/streambuf.h \
  std.h \
  Obstack.h \
  AllocRing.h \
  new.h \
  builtin.h
LogNorm.o : LogNorm.cc \
  builtin.h \
  std.h \
  Random.h \
  RNG.h \
  Normal.h \
  LogNorm.h
MLCG.o : MLCG.cc \
  MLCG.h \
  RNG.h 
NegExp.o : NegExp.cc \
  builtin.h \
  std.h \
  Random.h \
  RNG.h \
  NegExp.h
Normal.o : Normal.cc \
  builtin.h \
  std.h \
  Random.h \
  RNG.h \
  Normal.h
Obstack.o : Obstack.cc \
  builtin.h \
  std.h \
  Obstack.h
Poisson.o : Poisson.cc \
  builtin.h \
  std.h \
  Random.h \
  RNG.h \
  Poisson.h
RNG.o : RNG.cc \
  builtin.h \
  std.h \
  RNG.h
Random.o : Random.cc \
  Random.h \
  RNG.h 
Rational.o : Rational.cc \
  Rational.h \
  Integer.h \
  $(srcdir)/../$(IO_DIR)/stream.h \
  $(srcdir)/../$(IO_DIR)/iostream.h \
  $(srcdir)/../$(IO_DIR)/streambuf.h \
  std.h \
  builtin.h 
Regex.o : Regex.cc \
  std.h \
  new.h \
  builtin.h \
  regex.h \
  Regex.h
RndInt.o : RndInt.cc \
  RndInt.h \
  RNG.h 
Sample.o : Sample.cc \
  $(srcdir)/../$(IO_DIR)/stream.h \
  $(srcdir)/../$(IO_DIR)/iostream.h \
  $(srcdir)/../$(IO_DIR)/streambuf.h \
  SmplStat.h \
  builtin.h \
  std.h \
  SmplHist.h
SmplHist.o : SmplHist.cc \
  $(srcdir)/../$(IO_DIR)/stream.h \
  $(srcdir)/../$(IO_DIR)/iostream.h \
  $(srcdir)/../$(IO_DIR)/streambuf.h \
  SmplHist.h \
  SmplStat.h \
  builtin.h \
  std.h 
SmplStat.o : SmplStat.cc \
  $(srcdir)/../$(IO_DIR)/stream.h \
  $(srcdir)/../$(IO_DIR)/iostream.h \
  $(srcdir)/../$(IO_DIR)/streambuf.h \
  SmplStat.h \
  builtin.h \
  std.h 
String.o : String.cc \
  String.h \
  $(srcdir)/../$(IO_DIR)/stream.h \
  $(srcdir)/../$(IO_DIR)/iostream.h \
  $(srcdir)/../$(IO_DIR)/streambuf.h \
  Regex.h \
  std.h \
  new.h \
  builtin.h \
  regex.h
Uniform.o : Uniform.cc \
  builtin.h \
  std.h \
  Random.h \
  RNG.h \
  Uniform.h
Weibull.o : Weibull.cc \
  builtin.h \
  std.h \
  Random.h \
  RNG.h \
  Weibull.h
builtin.o : builtin.cc \
  builtin.h \
  std.h 
chr.o : chr.cc \
  builtin.h \
  std.h \
  AllocRing.h
compare.o : compare.cc \
  compare.h \
  builtin.h \
  std.h 
drt0.o : drt0.c \
  init_main.c \
  dldefs.h \
  init.c \
  dldefs.h \
  dynamic_lib.c \
  dldefs.h
dtoa.o : dtoa.cc \
  builtin.h \
  std.h \
  AllocRing.h
dynamic_lib.o : dynamic_lib.c \
  dynamic_lib.c
error.o : error.cc \
  builtin.h \
  std.h 
fmtq.o : fmtq.cc \
  builtin.h \
  std.h \
  AllocRing.h
gcd.o : gcd.cc \
  builtin.h \
  std.h 
hash.o : hash.cc \
  builtin.h \
  std.h 
init.o : init.c \
  dldefs.h
init_main.o : init_main.c \
  dldefs.h
ioob.o : ioob.cc \
  Obstack.h \
  std.h 
lg.o : lg.cc \
  builtin.h \
  std.h 
malloc.o : malloc.c 
math.o : math.cc 
minmax.o : minmax.cc \
  minmax.h
new.o : new.cc \
  new.h \
  std.h 
pow.o : pow.cc \
  builtin.h \
  std.h 
regex.o : regex.cc \
  regex.h
sqrt.o : sqrt.cc \
  builtin.h \
  std.h 
str.o : str.cc \
  builtin.h \
  std.h \
  AllocRing.h
timer.o : timer.c
xyzzy.o : xyzzy.cc \
  xyzzy.cc

# IF YOU PUT ANYTHING HERE IT WILL GO AWAY
# End of package fragment generated by ./../config.shared.
# Warning this fragment is automatically generated
RANLIB = true
# Use -nostdinc++ flag if your version of gcc understands it.
NOSTDINC = -nostdinc++

# If the C include files are C++-ready (with extern "C"), uncomment next line:
# WRAP_C_INCLUDES =

# Flags to pass to gen-params when building _G_config.h.
# For example: G_CONFIG_ARGS = size_t="unsigned long"
G_CONFIG_ARGS =
##

.PHONY: add-to-targetlib
# Invoked from other directories, overriding $(TARGETLIB).
add-to-targetlib:
	$(AR) $(AR_FLAGS) $(TARGETLIB) $(OBJS)

# This is invoked by the top-level libg++ Makefile, to:
# a) make sure $(OBJS) are up-to-date, and
# b) make a list of those files that should be added to libg++.a.
libgxx.list: $(OBJS)
	@echo "$(OBJS)" >libgxx.list
