# This file was generated automatically by configure.  Do not edit.
VPATH = .
links = 
host_alias = i386-unknown-sysv4.2
host_cpu = i386
host_vendor = unknown
host_os = sysv4.2
host_canonical = i386-unknown-sysv4.2
target_alias = i386-unknown-sysv4.2
target_cpu = i386
target_vendor = unknown
target_os = sysv4.2
target_canonical = i386-unknown-sysv4.2
package_makefile_frag = Make.pack
target_makefile_frag = ../../target-mkfrag
# Copyright (C) 1989, 1992, 1993 Free Software Foundation, Inc.
# written by Douglas C. Schmidt (schmidt@ics.uci.edu)
# 
# This file is part of GNU GPERF.
# 
# GNU GPERF is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 1, or (at your option)
# any later version.
# 
# GNU GPERF is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GNU GPERF; see the file COPYING.  If not, write to
# the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. 

srcdir = .

#### package, host, target, and site dependent Makefile fragments come in here.
# Start of package fragment generated by ./../../config.shared.
# TOPDIR=$${rootme}../../../ invsubdir= subdir=
srcdir = .
SUBDIRS = 
prefix = /opt
exec_prefix = $(prefix)
bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib
datadir = $(prefix)/lib
mandir = $(prefix)/man
man1dir = $(mandir)/man1
man2dir = $(mandir)/man2
man3dir = $(mandir)/man3
man4dir = $(mandir)/man4
man5dir = $(mandir)/man5
man6dir = $(mandir)/man6
man7dir = $(mandir)/man7
man8dir = $(mandir)/man8
man9dir = $(mandir)/man9
infodir = $(prefix)/info
includedir = $(prefix)/include
gxx_includedir = $(libdir)/g++-include
docdir = $(datadir)/doc

SHELL = /bin/sh

INSTALL = ${rootme}$(srcdir)/../../../install.sh -c
INSTALL_PROGRAM = $(INSTALL)
INSTALL_DATA = $(INSTALL)

AR = `if [ -f $${rootme}../../../binutils/ar ] ; \
	then echo $${rootme}../../../binutils/ar ; \
	else echo ar ; fi`
AR_FLAGS = rc
RANLIB = `if [ -f $${rootme}../../../binutils/ranlib ] ; \
	then echo $${rootme}../../../binutils/ranlib ; \
	else echo ranlib ; fi`
NM = `if [ -f $${rootme}../../../binutils/nm ] ; \
	then echo $${rootme}../../../binutils/nm ; \
	else echo nm ; fi`

MAKEINFO = `if [ -f $${rootme}../../../texinfo/C/makeinfo ] ; \
	then echo $${rootme}../../../texinfo/C/makeinfo ; \
	else echo makeinfo ; fi`
TEXIDIR=${srcdir}/../../..//texinfo
TEXI2DVI = TEXINPUTS=${TEXIDIR}:$$TEXINPUTS texi2dvi

CC = `if [ -f $${rootme}../../../gcc/xgcc ] ; \
	then echo $${rootme}../../../gcc/xgcc -B$${rootme}../../../gcc/ ; \
	else echo cc ; fi`
CXX = `if [ -f $${rootme}../../../gcc/xgcc ] ; \
	then echo $${rootme}../../../gcc/xgcc -B$${rootme}../../../gcc/ ; \
	else echo gcc ; fi`

XTRAFLAGS = `if [ -f $${rootme}../../../gcc/xgcc ] ;\
	then echo -I$${rootme}../../../gcc/include;\
	else echo ; fi`
WRAP_C_INCLUDES =
CFLAGS = -g
CXXFLAGS = -g -O
PROTODIR = $(srcdir)/../../src/gen
LIBS = ../../libg++.a
IO_DIR = ../libio
# IO_DIR = no-stream
.PHONY: all
all: $(NOTHING)


CXXINCLUDES = $(NOSTDINC) -I. -I../../../libio -I$(srcdir) -I$(srcdir)/../../$(IO_DIR) -I$(srcdir)/../../src $(WRAP_C_INCLUDES) $(XTRAFLAGS)
CINCLUDES = $(XTRAFLAGS)
.SUFFIXES: .o .C .cc
.c.o:
	$(CC) -c $(CFLAGS) $(CINCLUDES) $<
.C.o:
	$(CXX) -c $(CXXFLAGS) $(CXXINCLUDES) $<
.cc.o:
	$(CXX) -c $(CXXFLAGS) $(CXXINCLUDES) $<


.PHONY: install
install:
.PHONY: check
.PHONY: info dvi install-info clean-info
info:
dvi:
install-info:
.PHONY: do-clean-info clean-info do-clean-dvi clean-dvi
do-clean-info:
do-clean-dvi:
clean-info: do-clean-info
clean-dvi: do-clean-dvi

.PHONY: boltcc
boltcc:
	rootme=`pwd`/ ; export rootme ; $(MAKE) $(FLAGS_TO_PASS)


# clean rules
.PHONY: mostlyclean clean distclean realclean
mostlyclean: clean-dvi
	rm -rf *.o \#* core *inset.c output.* *.out aout cout m3out pout preout 
clean: clean-dvi
	rm -rf *.o \#* core *inset.c output.* *.out aout cout m3out pout preout   
distclean: clean
	rm -rf config.status Makefile *~ Make.pack
realclean: clean clean-info
	rm -rf config.status Makefile *~ Make.pack depend *.info*

.PHONY: force
force:

# with the gnu make, this is done automatically.

Makefile: $(srcdir)/Makefile.in $(host_makefile_frag) $(target_makefile_frag)
	$(SHELL) ./config.status

.NOEXPORT:
MAKEOVERRIDES=
# End of package fragment generated by ./../../config.shared.
# Warning this fragment is automatically generated
RANLIB = true
# Use -nostdinc++ flag if your version of gcc understands it.
NOSTDINC = -nostdinc++

# If the C include files are C++-ready (with extern "C"), uncomment next line:
# WRAP_C_INCLUDES =

# Flags to pass to gen-params when building _G_config.h.
# For example: G_CONFIG_ARGS = size_t="unsigned long"
G_CONFIG_ARGS =
##

GPERF = ../src/gperf

check:
	@echo "performing some tests of the perfect hash generator"   
	$(CC) -c $(CFLAGS) $(srcdir)/test.c
	$(GPERF) -p -c -l -S1 -o $(srcdir)/c.gperf > cinset.c
	$(CC) $(CFLAGS) -o cout cinset.c test.o
	@echo "testing ANSI C reserved words, all items should be found in the set"
	./cout -v < $(srcdir)/c.gperf > c.out
	-diff -b $(srcdir)/c.exp c.out
	$(GPERF) -k1,4,'$$' $(srcdir)/ada.gperf > adainset.c
# double '$$' is only there since make gets confused; programn wants only 1 '$'
	$(CC) $(CFLAGS) -o aout adainset.c test.o
	@echo "testing Ada reserved words, all items should be found in the set"
	./aout -v < $(srcdir)/ada.gperf > ada-res.out
	-diff -b $(srcdir)/ada-res.exp ada-res.out
	$(GPERF) -p -D -k1,'$$' -s 2 -o $(srcdir)/adadefs.gperf > preinset.c
	$(CC) $(CFLAGS) -o preout preinset.c test.o
	@echo "testing Ada predefined words, all items should be found in the set"
	./preout -v < $(srcdir)/adadefs.gperf > ada-pred.out
	-diff -b $(srcdir)/ada-pred.exp ada-pred.out
	$(GPERF) -k1,2,'$$' -o $(srcdir)/modula3.gperf > m3inset.c
	$(CC) $(CFLAGS) -o m3out m3inset.c test.o
	@echo "testing Modula3 reserved words, all items should be found in the set"
	./m3out -v < $(srcdir)/modula3.gperf > modula.out
	-diff -b $(srcdir)/modula.exp modula.out
	$(GPERF) -o -S2 -p < $(srcdir)/pascal.gperf > pinset.c
	$(CC) $(CFLAGS) -o pout pinset.c test.o
	@echo "testing Pascal reserved words, all items should be found in the set"
	./pout -v < $(srcdir)/pascal.gperf > pascal.out
	-diff -b $(srcdir)/pascal.exp pascal.out
# these next 5 are demos that show off the generated code
	$(GPERF) -p -j1 -g -o -t -N is_reserved_word -k1,3,'$$' < $(srcdir)/c-parse.gperf > test-1.out
	-diff -b $(srcdir)/test-1.exp test-1.out
	$(GPERF) -n -k1-8 -l <$(srcdir)/modula2.gperf > test-2.out
	-diff -b $(srcdir)/test-2.exp test-2.out
	$(GPERF) -p -j 1 -o -a -C -g -t -k1,4,$$ < $(srcdir)/gplus.gperf > test-3.out
	-diff -b $(srcdir)/test-3.exp test-3.out
	$(GPERF) -D -p -t < $(srcdir)/c-parse.gperf > test-4.out
	-diff -b $(srcdir)/test-4.exp test-4.out
	$(GPERF) -g -o -j1 -t -p -N is_reserved_word < $(srcdir)/gpc.gperf > test-5.out
	-diff -b $(srcdir)/test-5.exp test-5.out
# prints out the help message
	-$(GPERF) -h > test-6.out 2>&1 || [ a = a ]
	-diff -b $(srcdir)/test-6.exp test-6.out
	@echo "only if, do, for, case, goto, else, while, and return should be found "
	./aout -v < $(srcdir)/c.gperf > test-7.out
	-diff -b $(srcdir)/test-7.exp test-7.out
