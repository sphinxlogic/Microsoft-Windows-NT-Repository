# This file was generated automatically by configure.  Do not edit.
VPATH = .
links = 
host_alias = i386-unknown-sysv4.2
host_cpu = i386
host_vendor = unknown
host_os = sysv4.2
host_canonical = i386-unknown-sysv4.2
target_alias = i386-unknown-sysv4.2
target_cpu = i386
target_vendor = unknown
target_os = sysv4.2
target_canonical = i386-unknown-sysv4.2
package_makefile_frag = Make.pack
target_makefile_frag = ../target-mkfrag
# Copyright (C) 1989, 1992, 1993 Free Software Foundation, Inc.
# written by Douglas C. Schmidt (schmidt@ics.uci.edu)
# 
# This file is part of GNU GPERF.
# 
# GNU GPERF is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 1, or (at your option)
# any later version.
# 
# GNU GPERF is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GNU GPERF; see the file COPYING.  If not, write to
# the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. 

srcdir = .

#### package, host, target, and site dependent Makefile fragments come in here.
# Start of package fragment generated by ./../config.shared.
# TOPDIR=$${rootme}../../ invsubdir= subdir=
srcdir = .
SUBDIRS = src tests
prefix = /opt
exec_prefix = $(prefix)
bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib
datadir = $(prefix)/lib
mandir = $(prefix)/man
man1dir = $(mandir)/man1
man2dir = $(mandir)/man2
man3dir = $(mandir)/man3
man4dir = $(mandir)/man4
man5dir = $(mandir)/man5
man6dir = $(mandir)/man6
man7dir = $(mandir)/man7
man8dir = $(mandir)/man8
man9dir = $(mandir)/man9
infodir = $(prefix)/info
includedir = $(prefix)/include
gxx_includedir = $(libdir)/g++-include
docdir = $(datadir)/doc

SHELL = /bin/sh

INSTALL = ${rootme}$(srcdir)/../../install.sh -c
INSTALL_PROGRAM = $(INSTALL)
INSTALL_DATA = $(INSTALL)

AR = `if [ -f $${rootme}../../binutils/ar ] ; \
	then echo $${rootme}../../binutils/ar ; \
	else echo ar ; fi`
AR_FLAGS = rc
RANLIB = `if [ -f $${rootme}../../binutils/ranlib ] ; \
	then echo $${rootme}../../binutils/ranlib ; \
	else echo ranlib ; fi`
NM = `if [ -f $${rootme}../../binutils/nm ] ; \
	then echo $${rootme}../../binutils/nm ; \
	else echo nm ; fi`

MAKEINFO = `if [ -f $${rootme}../../texinfo/C/makeinfo ] ; \
	then echo $${rootme}../../texinfo/C/makeinfo ; \
	else echo makeinfo ; fi`
TEXIDIR=${srcdir}/../..//texinfo
TEXI2DVI = TEXINPUTS=${TEXIDIR}:$$TEXINPUTS texi2dvi

CC = `if [ -f $${rootme}../../gcc/xgcc ] ; \
	then echo $${rootme}../../gcc/xgcc -B$${rootme}../../gcc/ ; \
	else echo cc ; fi`
CXX = `if [ -f $${rootme}../../gcc/xgcc ] ; \
	then echo $${rootme}../../gcc/xgcc -B$${rootme}../../gcc/ ; \
	else echo gcc ; fi`

XTRAFLAGS = `if [ -f $${rootme}../../gcc/xgcc ] ;\
	then echo -I$${rootme}../../gcc/include;\
	else echo ; fi`
WRAP_C_INCLUDES =
CFLAGS = -g
CXXFLAGS = -g -O
PROTODIR = $(srcdir)/../src/gen
LIBS = ../libg++.a
IO_DIR = ../libio
# IO_DIR = no-stream
.PHONY: all
all: src_all
	@rootme=`pwd`/; export rootme; \
	$(MAKE) "DODIRS=$(SUBDIRS)" DO=all $(FLAGS_TO_PASS) subdir_do


.PHONY: subdir_do
subdir_do: force
	@rootme=`pwd`/; export rootme; \
	for i in $(DODIRS); do \
		if [ -f  ./$$i/Makefile ] ; then \
			echo "cd $$i; make $(DO) ..." ; \
			(cd $$i ; $(MAKE) $(FLAGS_TO_PASS) $(DO)) || exit 1 ; \
		else true ; fi ; \
	done

# List of variables to pass to sub-makes.  This should not be needed
# by GNU make or Sun make (both of which pass command-line variable
# overrides thouh $(MAKE)) but may be needed by older versions.

FLAGS_TO_PASS= \
	"INSTALL=$(INSTALL)" \
	"INSTALL_DATA=$(INSTALL_DATA)" \
	"INSTALL_PROGRAM=$(INSTALL_PROGRAM)" \
	"prefix=$(prefix)" \
	"exec_prefix=$(exec_prefix)" \
	"tooldir=$(tooldir)" \
	"AR=$(AR)" \
	"AR_FLAGS=$(AR_FLAGS)" \
	"CC=$(CC)" \
	"CXX=$(CXX)" \
	"CFLAGS=$(CFLAGS)" \
	"CXXFLAGS=$(CXXFLAGS)" \
	"RANLIB=$(RANLIB)" \
	"LOADLIBES=$(LOADLIBES)" \
	"LDFLAGS=$(LDFLAGS)" \
	"MAKEINFO=$(MAKEINFO)" \
	"XTRAFLAGS=$(XTRAFLAGS)"
CXXINCLUDES =  -I. -I../../libio -I$(srcdir) -I$(srcdir)/../$(IO_DIR) -I$(srcdir)/../src $(WRAP_C_INCLUDES) $(XTRAFLAGS)
CINCLUDES = $(XTRAFLAGS)
.SUFFIXES: .o .C .cc
.c.o:
	$(CC) -c $(CFLAGS) $(CINCLUDES) $<
.C.o:
	$(CXX) -c $(CXXFLAGS) $(CXXINCLUDES) $<
.cc.o:
	$(CXX) -c $(CXXFLAGS) $(CXXINCLUDES) $<


.PHONY: install
install:
.PHONY: check
check: src_all 
	@rootme=`pwd`/; export rootme; \
	$(MAKE) "DODIRS=$(SUBDIRS)" DO=check $(FLAGS_TO_PASS) subdir_do
.PHONY: info dvi install-info clean-info
info: gperf.info
dvi: gperf.dvi
gperf.info: $(srcdir)/gperf.texi
	$(MAKEINFO) -I$(srcdir) -I$(TEXIDIR) $(srcdir)/gperf.texi -o gperf.info
gperf.dvi: $(srcdir)/gperf.texi
	$(TEXI2DVI) $(srcdir)/gperf.texi
gperf.ps: gperf.dvi
	dvips gperf -o
install-info:
	-parent=`echo $(infodir)|sed -e 's@/[^/]*$$@@'`; \
	if [ -d $$parent ] ; then true ; else mkdir $$parent ; fi
	-if [ -d $(infodir) ] ; then true ; else mkdir $(infodir) ; fi
	for i in *.info* ; do \
	  $(INSTALL_DATA) $$i $(infodir)/$$i ; \
	done
.PHONY: do-clean-info clean-info do-clean-dvi clean-dvi
do-clean-info:
	rm -f *.info*
do-clean-dvi:
	rm -f *.dvi *.aux *.cp *.fn* *.ky *.log *.pg *.toc *.tp *.vr
clean-info: do-clean-info
clean-dvi: do-clean-dvi

.PHONY: boltcc
boltcc:
	rootme=`pwd`/ ; export rootme ; $(MAKE) $(FLAGS_TO_PASS)


# clean rules
.PHONY: mostlyclean clean distclean realclean
.PHONY: do-clean subdir_distclean subdir_realclean
mostlyclean: do-clean-dvi
	rm -rf \#* core *.o gperf.?? gperf.??s gperf.log gperf.toc gperf.*aux *inset.c *out 
	@$(MAKE) $(FLAGS_TO_PASS) "DODIRS=$(SUBDIRS)" DO=mostlyclean subdir_do
do-clean: do-clean-dvi
	rm -rf \#* core *.o gperf.?? gperf.??s gperf.log gperf.toc gperf.*aux *inset.c *out  gperf
clean: do-clean
	@$(MAKE) $(FLAGS_TO_PASS) "DODIRS=$(SUBDIRS)" DO=clean subdir_do
subdir_distclean:
	@$(MAKE) $(FLAGS_TO_PASS) "DODIRS=$(SUBDIRS)" DO=distclean subdir_do
distclean: do-clean subdir_distclean
	rm -rf config.status Makefile *~ Make.pack
subdir_realclean:
	@$(MAKE) $(FLAGS_TO_PASS) "DODIRS=$(SUBDIRS)" DO=realclean subdir_do
realclean: do-clean subdir_realclean do-clean-info
	rm -rf config.status Makefile *~ Make.pack depend *.info*

.PHONY: force
force:

# with the gnu make, this is done automatically.

Makefile: $(srcdir)/Makefile.in $(host_makefile_frag) $(target_makefile_frag)
	$(SHELL) ./config.status

.NOEXPORT:
MAKEOVERRIDES=
# End of package fragment generated by ./../config.shared.
# Warning this fragment is automatically generated
RANLIB = true
# Use -nostdinc++ flag if your version of gcc understands it.
NOSTDINC = -nostdinc++

# If the C include files are C++-ready (with extern "C"), uncomment next line:
# WRAP_C_INCLUDES =

# Flags to pass to gen-params when building _G_config.h.
# For example: G_CONFIG_ARGS = size_t="unsigned long"
G_CONFIG_ARGS =
##

.PHONY: src_all
src_all:
	@echo "cd src ; make ... all"
	@rootme=`pwd` ; export rootme ; cd src ; \
		$(MAKE) $(FLAGS_TO_PASS) all

.PHONY: install
install:
	rootme=`pwd` ; export rootme ; cd src ; \
		$(MAKE) $(FLAGS_TO_PASS) install
	$(INSTALL_DATA) $(srcdir)/gperf.1 $(man1dir)/gperf.1

distrib: force
	cd ..; rm -f gperf.tar.Z; tar cvf gperf.tar gperf; compress gperf.tar;\
	       uuencode gperf.tar.Z < gperf.tar.Z > GSHAR

.PHONY: shar
shar: force
	cd ..; makekit -ngperf ./gperf ./gperf/* ./gperf/src/* ./gperf/tests/*
