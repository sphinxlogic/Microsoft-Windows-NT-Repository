#
# These tests should be valid on all targets.
#

# I think currently all targets fail this one when listings are enabled.
gas_test "p2425.s" ""   "" "pcrel values in assignment"

# p1480.s uses a ".space" directive which for most assemblers means
# "allocate some space".  On the PA it means "switch into this space".
#
# Therefore this test (as it is currently written) is completely bogus
# for any PA target.  Do not bother trying to run it and just claim
# it fails.
if [istarget hppa*-*-*] then {
    setup_xfail *-*-*
    fail "simplifiable double subtraction"
    setup_xfail *-*-*
    fail "simplifiable double subtraction, with listings"
} else {
    setup_xfail *-*-*
    gas_test "p1480.s" ""   "" "simplifiable double subtraction"
    setup_xfail *-*-*
    gas_test "p1480.s" "-a" "" "simplifiable double subtraction, with listings"
}

gas_test "float.s" ""   "" "simple FP constants"

gas_test_error "diff1.s" "" "difference of two undefined symbols"

#
# Test x930509a -- correct assembly of differences involving forward
# references.
#

proc do_comment {} {
    set testname "comment.s: comments in listings"
    set x1 0
    set x2 0
    set x3 0
    set white {[ \t]*}
    gas_start "comment.s" "-al"
    while 1 {
# Apparently CRLF is received when using ptys for subprocesses; hence the
# \r\n for line 3.
	expect {
	    -re "^ +1\[ \t\]+# This\[^\n\]*\n"		{ set x1 1 }
	    -re "^ +2\[ \t\]+# correctly\[^\n\]*\n"	{ set x2 1 }
	    -re "^ +3\[ \t\]+/\* C comments too. \*/\r\n" { set x3 1 }
	    -re "\[^\n\]*\n"				{ }
	    timeout				{ error "timeout\n"; break }
	    eof					{ break }
	}
    }
    gas_finish
    if [expr $x1+$x2+$x3==3] then { pass $testname } else { fail $testname }
}

do_comment

#
# Test x930509a -- correct assembly of differences involving forward
# references.
#

setup_xfail *-*-*

proc do_930509a {} {
    set testname "difference between forward references"
    set x 0
    gas_start "x930509.s" "-al"
    while 1 {
# We need to accomodate both byte orders here.
# If ".long" means an 8-byte value on some target someday, this test will have
# to be fixed.
	expect {
	    -re "^ +1 .... 00000000" { fail $testname; set x 1 }
	    -re "^ +1 .... 04000000" { pass $testname; set x 1 }
	    -re "^ +1 .... 00000004" { pass $testname; set x 1 }
	    -re "\[^\n\]*\n" { }
	    timeout { error "timeout\n"; break }
	    eof { break }
	}
    }
    gas_finish
    if !$x then { fail $testname }
}

do_930509a
