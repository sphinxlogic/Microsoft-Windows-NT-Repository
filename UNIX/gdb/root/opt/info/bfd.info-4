This is Info file bfd.info, produced by Makeinfo-1.55 from the input
file ./bfd.texinfo.

START-INFO-DIR-ENTRY
* Bfd::                         The Binary File Descriptor library.
END-INFO-DIR-ENTRY

   This file documents the BFD library.

   Copyright (C) 1991 Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, subject to the
terms of the GNU General Public License, which includes the provision
that the entire resulting derived work is distributed under the terms
of a permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions.


File: bfd.info,  Node: coff,  Next: elf,  Prev: aout,  Up: BFD back end

coff backends
=============

   BFD supports a number of different flavours of coff format.  The
major difference between formats are the sizes and alignments of fields
in structures on disk, and the occasional extra field.  Coff in all its
varieties is implimented with a few common files and a number of
implementation specific files. For example, The 88k bcs coff format is
implemented in the file `coff-m88k.c'. This file `#include's
`coff/m88k.h' which defines the external structure of the coff format
for the 88k, and `coff/internal.h' which defines the internal
structure. `coff-m88k.c' also defines the relocations used by the 88k
format *Note Relocations::.  The Intel i960 processor version of coff
is implemented in `coff-i960.c'. This file has the same structure as
`coff-m88k.c', except that it includes `coff/i960.h' rather than
`coff-m88k.h'.
Porting To A New Version of Coff
--------------------------------

The recommended method is to select from the existing implimentations
the version of coff which is most like the one you want to use, for our
purposes, we'll say that i386 coff is the one you select, and that your
coff flavour is called foo.  Copy the `i386coff.c' to `foocoff.c', copy
`../include/coff/i386.h' to `../include/coff/foo.h' and add the lines
to `targets.c' and `Makefile.in' so that your new back end is used.
Alter the shapes of the structures in `../include/coff/foo.h' so that
they match what you need. You will probably also have to add `#ifdef's
to the code in `coff/internal.h' and `coffcode.h' if your version of
coff is too wild.  You can verify that your new BFD backend works quite
simply by building `objdump' from the `binutils' directory, and making
sure that its version of what's going on at your host systems idea
(assuming it has the pretty standard coff dump utility (usually called
`att-dump' or just `dump')) are the same.  Then clean up your code, and
send what you've done to Cygnus. Then your stuff will be in the next
release, and you won't have to keep integrating it.
How The Coff Backend Works
--------------------------

File Layout
...........

The Coff backend is split into generic routines that are applicable to
any Coff target and routines that are specific to a particular target.
The target-specific routines are further split into ones which are
basically the same for all Coff targets except that they use the
external symbol format or use different values for certain constants.
The generic routines are in `coffgen.c'.  These routines work for any
Coff target.  They use some hooks into the target specific code; the
hooks are in a `bfd_coff_backend_data' structure, one of which exists
for each target.  The essentially similar target-specific routines are
in `coffcode.h'.  This header file includes executable code.  The
various Coff targets first include the appropriate Coff header file,
make any special defines that are needed, and then include `coffcode.h'.
Some of the Coff targets then also have additional routines in the
target source file itself.  For example, `coff-i960.c' includes
`coff/internal.h' and `coff/i960.h'.  It then defines a few constants,
such as `I960', and includes `coffcode.h'.  Since the i960 has complex
relocation types, `coff-i960.c' also includes some code to manipulate
the i960 relocs.  This code is not in `coffcode.h' because it would not
be used by any other target.
Bit Twiddling
.............

Each flavour of coff supported in BFD has its own header file descibing
the external layout of the structures. There is also an internal
description of the coff layout (in `coff/internal.h'). A major function
of the coff backend is swapping the bytes and twiddling the bits to
translate the external form of the structures into the normal internal
form. This is all performed in the `bfd_swap'_thing_direction routines.
Some elements are different sizes between different versions of coff,
it is the duty of the coff version specific include file to override
the definitions of various packing routines in `coffcode.h'. Eg the
size of line number entry in coff is sometimes 16 bits, and sometimes
32 bits. `#define'ing `PUT_LNSZ_LNNO' and `GET_LNSZ_LNNO' will select
the correct one. No doubt, some day someone will find a version of coff
which has a varying field size not catered for at the moment. To port
BFD, that person will have to add more `#defines'.  Three of the bit
twiddling routines are exported to `gdb'; `coff_swap_aux_in',
`coff_swap_sym_in' and `coff_swap_linno_in'. `GDB' reads the symbol
table on its own, but uses BFD to fix things up.  More of the bit
twiddlers are exported for `gas'; `coff_swap_aux_out',
`coff_swap_sym_out', `coff_swap_lineno_out', `coff_swap_reloc_out',
`coff_swap_filehdr_out', `coff_swap_aouthdr_out',
`coff_swap_scnhdr_out'. `Gas' currently keeps track of all the symbol
table and reloc drudgery itself, thereby saving the internal BFD
overhead, but uses BFD to swap things on the way out, making cross
ports much safer.  This also allows BFD (and thus the linker) to use
the same header files as `gas', which makes one avenue to disaster
disappear.
Symbol Reading
..............

The simple canonical form for symbols used by BFD is not rich enough to
keep all the information available in a coff symbol table. The back end
gets around this by keeping the original symbol table around, "behind
the scenes".  When a symbol table is requested (through a call to
`bfd_canonicalize_symtab', a request gets through to
`coff_get_normalized_symtab'. This reads the symbol table from the coff
file and swaps all the structures inside into the internal form. It
also fixes up all the pointers in the table (represented in the file by
offsets from the first symbol in the table) into physical pointers to
elements in the new internal table. This involves some work since the
meanings of fields changes depending upon context; a field that is a
pointer to another structure in the symbol table at one moment may be
the size in bytes of a structure in the next.  Another pass is made
over the table. All symbols which mark file names (`C_FILE' symbols)
are modified so that the internal string points to the value in the
auxent (the real filename) rather than the normal text associated with
the symbol (`".file"').  At this time the symbol names are moved
around. Coff stores all symbols less than nine characters long
physically within the symbol table, longer strings are kept at the end
of the file in the string 	table. This pass moves all strings
into memory, and replaces them with pointers to the strings.  The
symbol table is massaged once again, this time to create the canonical
table used by the BFD application. Each symbol is inspected in turn,
and a decision made (using the `sclass' field) about the various flags
to set in the `asymbol' *Note Symbols::. The generated canonical table
shares strings with the hidden internal symbol table.  Any linenumbers
are read from the coff file too, and attached to the symbols which own
the functions the linenumbers belong to.
Symbol Writing
..............

Writing a symbol to a coff file which didn't come from a coff file will
lose any debugging information. The `asymbol' structure remembers the
BFD from which was born, and on output the back end makes sure that the
same destination target as source target is present.  When the symbols
have come from a coff file then all the debugging information is
preserved.  Symbol tables are provided for writing to the back end in a
vector of pointers to pointers. This allows applications like the
linker to accumulate and output large symbol tables without having to
do too much byte copying.  This function runs through the provided
symbol table and patches each symbol marked as a file place holder
(`C_FILE') to point to the next file place holder in the list. It also
marks each `offset' field in the list with the offset from the first
symbol of the current symbol.  Another function of this procedure is to
turn the canonical value form of BFD into the form used by coff.
Internally, BFD expects symbol values to be offsets from a section
base; so a symbol physically at 0x120, but in a section starting at
0x100, would have the value 0x20. Coff expects symbols to contain their
final value, so symbols have their values changed at this point to
reflect their sum with their owning section. Note that this
transformation uses the `output_section' field of the `asymbol''s
`asection' *Note Sections::.
   * coff_mangle_symbols This routine runs though the provided symbol
table and uses the offsets generated by the previous pass and the
pointers generated when the symbol table was read in to create the
structured hierachy required by coff. It changes each pointer to a
symbol to an index into the symbol table of the symbol being referenced.
   * coff_write_symbols This routine runs through the symbol table and
patches up the symbols from their internal form into the coff way,
calls the bit twiddlers and writes out the tabel to the file.
`coff_symbol_type'
..................

*Description*
The hidden information for an asymbol is described in a
coff_ptr_struct, which is typedefed to a combined_entry_type
.
     typedef struct coff_ptr_struct
     {
     
            	/* Remembers the offset from the first symbol in the file for
               this symbol. Generated by coff_renumber_symbols. */
     unsigned int offset;
     
            	/* Should the tag field of this symbol be renumbered.
               Created by coff_pointerize_aux. */
     char fix_tag;
     
            	/* Should the endidx field of this symbol be renumbered.
               Created by coff_pointerize_aux. */
     char fix_end;
     
            	/* The container for the symbol structure as read and translated
                from the file. */
     
     union {
        union internal_auxent auxent;
        struct internal_syment syment;
      } u;
     } combined_entry_type;
     
     
     	/* Each canonical asymbol really looks like this: */
     
     typedef struct coff_symbol_struct
     {
        	/* The actual symbol which the rest of BFD works with */
     asymbol symbol;
     
        	/* A pointer to the hidden information for this symbol */
     combined_entry_type *native;
     
        	/* A pointer to the linenumber information for this symbol */
     struct lineno_cache_entry *lineno;
     
        	/* Have the line numbers been relocated yet ? */
     boolean done_lineno;
     } coff_symbol_type;

`bfd_coff_backend_data'
.......................

   Special entry points for gdb to swap in coff symbol table parts
     typedef struct
     {
       void (*_bfd_coff_swap_aux_in) PARAMS ((
            bfd            *abfd ,
            PTR             ext,
            int             type,
            int             class ,
            PTR             in));
     
       void (*_bfd_coff_swap_sym_in) PARAMS ((
            bfd            *abfd ,
            PTR             ext,
            PTR             in));
     
       void (*_bfd_coff_swap_lineno_in) PARAMS ((
            bfd            *abfd,
            PTR            ext,
            PTR             in));
   Special entry points for gas to swap coff parts
      unsigned int (*_bfd_coff_swap_aux_out) PARAMS ((
            bfd   	*abfd,
            PTR	in,
            int    	type,
            int    	class,
            PTR    	ext));
     
      unsigned int (*_bfd_coff_swap_sym_out) PARAMS ((
           bfd      *abfd,
           PTR	in,
           PTR	ext));
     
      unsigned int (*_bfd_coff_swap_lineno_out) PARAMS ((
           	bfd   	*abfd,
           	PTR	in,
     	PTR	ext));
     
      unsigned int (*_bfd_coff_swap_reloc_out) PARAMS ((
           	bfd     *abfd,
          	PTR	src,
     	PTR	dst));
     
      unsigned int (*_bfd_coff_swap_filehdr_out) PARAMS ((
           	bfd  	*abfd,
     	PTR 	in,
     	PTR 	out));
     
      unsigned int (*_bfd_coff_swap_aouthdr_out) PARAMS ((
           	bfd 	*abfd,
     	PTR 	in,
     	PTR	out));
     
      unsigned int (*_bfd_coff_swap_scnhdr_out) PARAMS ((
           	bfd  	*abfd,
           	PTR	in,
     	PTR	out));
   Special entry points for generic COFF routines to call target
dependent COFF routines
      unsigned int _bfd_filhsz;
      unsigned int _bfd_aoutsz;
      unsigned int _bfd_scnhsz;
      unsigned int _bfd_symesz;
      unsigned int _bfd_auxesz;
      unsigned int _bfd_linesz;
      boolean _bfd_coff_long_filenames;
      void (*_bfd_coff_swap_filehdr_in) PARAMS ((
            bfd     *abfd,
            PTR     ext,
            PTR     in));
      void (*_bfd_coff_swap_aouthdr_in) PARAMS ((
            bfd     *abfd,
            PTR     ext,
            PTR     in));
      void (*_bfd_coff_swap_scnhdr_in) PARAMS ((
            bfd     *abfd,
            PTR     ext,
            PTR     in));
      boolean (*_bfd_coff_bad_format_hook) PARAMS ((
            bfd     *abfd,
            PTR     internal_filehdr));
      boolean (*_bfd_coff_set_arch_mach_hook) PARAMS ((
            bfd     *abfd,
            PTR     internal_filehdr));
      PTR (*_bfd_coff_mkobject_hook) PARAMS ((
            bfd     *abfd,
            PTR     internal_filehdr,
            PTR     internal_aouthdr));
      flagword (*_bfd_styp_to_sec_flags_hook) PARAMS ((
            bfd     *abfd,
            PTR     internal_scnhdr));
      asection *(*_bfd_make_section_hook) PARAMS ((
            bfd     *abfd,
            char    *name));
      void (*_bfd_set_alignment_hook) PARAMS ((
            bfd     *abfd,
            asection *sec,
            PTR     internal_scnhdr));
      boolean (*_bfd_coff_slurp_symbol_table) PARAMS ((
            bfd     *abfd));
      boolean (*_bfd_coff_symname_in_debug) PARAMS ((
            bfd     *abfd,
            struct internal_syment *sym));
      void (*_bfd_coff_reloc16_extra_cases) PARAMS ((
            bfd     *abfd,
            struct bfd_seclet *seclet,
            arelent *reloc,
            bfd_byte *data,
            unsigned int *src_ptr,
            unsigned int *dst_ptr));
      int (*_bfd_coff_reloc16_estimate) PARAMS ((
            asection *input_section,
            asymbol **symbols,
            arelent *r,
            unsigned int shrink));
     
     } bfd_coff_backend_data;
     
     #define coff_backend_info(abfd) ((bfd_coff_backend_data *) (abfd)->xvec->backend_data)
     
     #define bfd_coff_swap_aux_in(a,e,t,c,i) \
             ((coff_backend_info (a)->_bfd_coff_swap_aux_in) (a,e,t,c,i))
     
     #define bfd_coff_swap_sym_in(a,e,i) \
             ((coff_backend_info (a)->_bfd_coff_swap_sym_in) (a,e,i))
     
     #define bfd_coff_swap_lineno_in(a,e,i) \
             ((coff_backend_info ( a)->_bfd_coff_swap_lineno_in) (a,e,i))
     
     #define bfd_coff_swap_reloc_out(abfd, i, o) \
             ((coff_backend_info (abfd)->_bfd_coff_swap_reloc_out) (abfd, i, o))
     
     #define bfd_coff_swap_lineno_out(abfd, i, o) \
             ((coff_backend_info (abfd)->_bfd_coff_swap_lineno_out) (abfd, i, o))
     
     #define bfd_coff_swap_aux_out(abfd, i, t,c,o) \
             ((coff_backend_info (abfd)->_bfd_coff_swap_aux_out) (abfd, i,t,c, o))
     
     #define bfd_coff_swap_sym_out(abfd, i,o) \
             ((coff_backend_info (abfd)->_bfd_coff_swap_sym_out) (abfd, i, o))
     
     #define bfd_coff_swap_scnhdr_out(abfd, i,o) \
             ((coff_backend_info (abfd)->_bfd_coff_swap_scnhdr_out) (abfd, i, o))
     
     #define bfd_coff_swap_filehdr_out(abfd, i,o) \
             ((coff_backend_info (abfd)->_bfd_coff_swap_filehdr_out) (abfd, i, o))
     
     #define bfd_coff_swap_aouthdr_out(abfd, i,o) \
             ((coff_backend_info (abfd)->_bfd_coff_swap_aouthdr_out) (abfd, i, o))
     
     #define bfd_coff_filhsz(abfd) (coff_backend_info (abfd)->_bfd_filhsz)
     #define bfd_coff_aoutsz(abfd) (coff_backend_info (abfd)->_bfd_aoutsz)
     #define bfd_coff_scnhsz(abfd) (coff_backend_info (abfd)->_bfd_scnhsz)
     #define bfd_coff_symesz(abfd) (coff_backend_info (abfd)->_bfd_symesz)
     #define bfd_coff_auxesz(abfd) (coff_backend_info (abfd)->_bfd_auxesz)
     #define bfd_coff_linesz(abfd) (coff_backend_info (abfd)->_bfd_linesz)
     #define bfd_coff_long_filenames(abfd) (coff_backend_info (abfd)->_bfd_coff_long_filenames)
     #define bfd_coff_swap_filehdr_in(abfd, i,o) \
             ((coff_backend_info (abfd)->_bfd_coff_swap_filehdr_in) (abfd, i, o))
     
     #define bfd_coff_swap_aouthdr_in(abfd, i,o) \
             ((coff_backend_info (abfd)->_bfd_coff_swap_aouthdr_in) (abfd, i, o))
     
     #define bfd_coff_swap_scnhdr_in(abfd, i,o) \
             ((coff_backend_info (abfd)->_bfd_coff_swap_scnhdr_in) (abfd, i, o))
     
     #define bfd_coff_bad_format_hook(abfd, filehdr) \
             ((coff_backend_info (abfd)->_bfd_coff_bad_format_hook) (abfd, filehdr))
     
     #define bfd_coff_set_arch_mach_hook(abfd, filehdr)\
             ((coff_backend_info (abfd)->_bfd_coff_set_arch_mach_hook) (abfd, filehdr))
     #define bfd_coff_mkobject_hook(abfd, filehdr, aouthdr)\
             ((coff_backend_info (abfd)->_bfd_coff_mkobject_hook) (abfd, filehdr, aouthdr))
     
     #define bfd_coff_styp_to_sec_flags_hook(abfd, scnhdr)\
             ((coff_backend_info (abfd)->_bfd_styp_to_sec_flags_hook) (abfd, scnhdr))
     
     #define bfd_coff_make_section_hook(abfd, name)\
             ((coff_backend_info (abfd)->_bfd_make_section_hook) (abfd, name))
     
     #define bfd_coff_set_alignment_hook(abfd, sec, scnhdr)\
             ((coff_backend_info (abfd)->_bfd_set_alignment_hook) (abfd, sec, scnhdr))
     
     #define bfd_coff_slurp_symbol_table(abfd)\
             ((coff_backend_info (abfd)->_bfd_coff_slurp_symbol_table) (abfd))
     
     #define bfd_coff_symname_in_debug(abfd, sym)\
             ((coff_backend_info (abfd)->_bfd_coff_symname_in_debug) (abfd, sym))
     
     #define bfd_coff_reloc16_extra_cases(abfd, seclet, reloc, data, src_ptr, dst_ptr)\
             ((coff_backend_info (abfd)->_bfd_coff_reloc16_extra_cases)\
              (abfd, seclet, reloc, data, src_ptr, dst_ptr))
     
     #define bfd_coff_reloc16_estimate(abfd, section, symbols, reloc, shrink)\
             ((coff_backend_info (abfd)->_bfd_coff_reloc16_estimate)\
              (section, symbols, reloc, shrink))

Writing Relocations
...................

   To write relocations, all the back end does is step though the
canonical relocation table, and create an `internal_reloc'. The symbol
index to use is removed from the `offset' field in the symbol table
supplied, the address comes directly from the sum of the section base
address and the relocation offset and the type is dug directly from the
howto field.  Then the `internal_reloc' is swapped into the shape of an
`external_reloc' and written out to disk.
Reading Linenumbers
...................

Creating the linenumber table is done by reading in the entire coff
linenumber table, and creating another table for internal use.  A coff
line number table is structured so that each function is marked as
having a line number of 0. Each line within the function is an offset
from the first line in the function. The base of the line number
information for the table is stored in the symbol associated with the
function.  The information is copied from the external to the internal
table, and each symbol which marks a function is marked by pointing
its...  How does this work ?
Reading Relocations
...................

Coff relocations are easily transformed into the internal BFD form
(`arelent').  Reading a coff relocation table is done in the following
stages:
   * The entire coff relocation table is read into memory.

   * Each relocation is processed in turn, first it is swapped from the
     external to the internal form.

   * The symbol referenced in the relocation's symbol index is turned
     intoa pointer into the canonical symbol table. Note that this
     table is the same as the one returned by a call to
     `bfd_canonicalize_symtab'. The back end will call the routine and
     save the result if a canonicalization hasn't been done.

   * The reloc index is turned into a pointer to a howto structure, in
     a back end specific way. For instance, the 386 and 960 use the
     `r_type' to directly produce an index into a howto table vector;
     the 88k subtracts a number from the `r_type' field and creates an
     addend field.

File: bfd.info,  Node: elf,  Prev: coff,  Up: BFD back end

ELF backends
============

BFD support for ELF formats is being worked on.  Currently, the best
supported back ends are for sparc and i386 (running svr4 or Solaris 2).
Documentation of the internals of the support code still needs to be
written.  The code is changing quickly enough that we haven't bothered
yet.
`bfd_elf_find_section'
......................

*Synopsis*
     struct elf_internal_shdr *bfd_elf_find_section (bfd *abfd, char *name);
   *Description*
Helper functions for GDB to locate the string tables.  Since BFD hides
string tables from callers, GDB needs to use an internal hook to find
them.  Sun's .stabstr, in particular, isn't even pointed to by the
.stab section, so ordinary mechanisms wouldn't work to find it, even if
we had some.

File: bfd.info,  Node: Index,  Prev: BFD back end,  Up: Top

Index
*****

* Menu:

* aout_<size>_machine_type:             aout.
* aout_<size>_mkobject:                 aout.
* aout_<size>_new_section_hook:         aout.
* aout_<size>_set_arch_mach:            aout.
* aout_<size>_some_aout_object_p:       aout.
* aout_<size>_swap_exec_header_in:      aout.
* aout_<size>_swap_exec_header_out:     aout.
* BFD:                                  Overview.
* BFD canonical format:                 Canonical format.
* bfd_alloc_by_size_t:                  Opening and Closing.
* bfd_arch_bits_per_address:            Architectures.
* bfd_arch_bits_per_byte:               Architectures.
* bfd_arch_get_compatible:              Architectures.
* bfd_arch_init:                        Architectures.
* bfd_arch_linkin:                      Architectures.
* bfd_cache_close:                      File Caching.
* bfd_cache_lookup:                     File Caching.
* bfd_cache_lookup_worker:              File Caching.
* BFD_CACHE_MAX_OPEN macro:             File Caching.
* bfd_canonicalize_reloc:               BFD front end.
* bfd_canonicalize_symtab:              symbol handling functions.
* bfd_check_format:                     Formats.
* bfd_check_init:                       Initialization.
* bfd_close:                            Opening and Closing.
* bfd_close_all_done:                   Opening and Closing.
* bfd_coff_backend_data:                coff.
* bfd_constructor_entry:                Constructors.
* bfd_core_file_failing_command:        Core Files.
* bfd_core_file_failing_signal:         Core Files.
* bfd_create:                           Opening and Closing.
* bfd_decode_symclass:                  symbol handling functions.
* bfd_default_arch_struct:              Architectures.
* bfd_default_compatible:               Architectures.
* bfd_default_reloc_type_lookup:        howto manager.
* bfd_default_scan:                     Architectures.
* bfd_default_set_arch_mach:            Architectures.
* bfd_elf_find_section:                 elf.
* bfd_fdopenr:                          Opening and Closing.
* bfd_find_target:                      bfd_target.
* bfd_format_string:                    Formats.
* bfd_generic_get_relocated_section_contents: howto manager.
* bfd_generic_relax_section:            howto manager.
* bfd_get_arch:                         Architectures.
* bfd_get_arch_info:                    Architectures.
* bfd_get_elt_at_index:                 Archives.
* bfd_get_mach:                         Architectures.
* bfd_get_next_mapent:                  Archives.
* bfd_get_reloc_upper_bound:            BFD front end.
* bfd_get_section_by_name:              section prototypes.
* bfd_get_section_contents:             section prototypes.
* bfd_get_size:                         Internal.
* bfd_h_get_size:                       Internal.
* bfd_h_put_size:                       Internal.
* bfd_init:                             Initialization.
* bfd_last_cache:                       File Caching.
* bfd_log2:                             Internal.
* bfd_lookup_arch:                      Architectures.
* bfd_make_debug_symbol:                symbol handling functions.
* bfd_make_empty_symbol:                symbol handling functions.
* bfd_make_section:                     section prototypes.
* bfd_make_section_anyway:              section prototypes.
* bfd_make_section_old_way:             section prototypes.
* bfd_map_over_sections:                section prototypes.
* bfd_openr:                            Opening and Closing.
* bfd_openr_next_archived_file:         Archives.
* bfd_openw:                            Opening and Closing.
* bfd_open_file:                        File Caching.
* bfd_perform_relocation:               typedef arelent.
* bfd_printable_arch_mach:              Architectures.
* bfd_printable_name:                   Architectures.
* bfd_print_symbol_vandf:               symbol handling functions.
* bfd_put_size:                         Internal.
* bfd_reloc_code_type:                  howto manager.
* bfd_scan_arch:                        Architectures.
* bfd_scan_vma:                         BFD front end.
* bfd_set_archive_head:                 Archives.
* bfd_set_arch_info:                    Architectures.
* bfd_set_file_flags:                   BFD front end.
* bfd_set_format:                       Formats.
* bfd_set_reloc:                        BFD front end.
* bfd_set_section_contents:             section prototypes.
* bfd_set_section_flags:                section prototypes.
* bfd_set_section_size:                 section prototypes.
* bfd_set_start_address:                BFD front end.
* bfd_set_symtab:                       symbol handling functions.
* bfd_symbol_info:                      symbol handling functions.
* bfd_target_list:                      bfd_target.
* bfd_write_bigendian_4byte_int:        Internal.
* bfd_xmalloc:                          Internal.
* bfd_xmalloc_by_size_t:                Internal.
* coff_symbol_type:                     coff.
* core_file_matches_executable_p:       Core Files.
* get_symtab_upper_bound:               symbol handling functions.
* internal object-file format:          Canonical format.
* reloc_chain:                          typedef arelent.
* stuff:                                BFD front end.
* The bfd_get_gp_size function:         BFD front end.
* The bfd_get_mtime function:           BFD front end.
* The bfd_get_size function:            BFD front end.
* The bfd_set_gp_size function:         BFD front end.
* the HOWTO macro:                      typedef arelent.
* what is it?:                          Overview.


