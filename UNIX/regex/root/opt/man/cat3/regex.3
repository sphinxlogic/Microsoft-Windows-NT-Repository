


REGEX(3)               C LIBRARY FUNCTIONS               REGEX(3)



NNNNAAAAMMMMEEEE
     regcomp, regexec,  regerror,  regfree  -  regular-expression
     library

SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
     ####iiiinnnncccclllluuuuddddeeee <<<<ssssyyyyssss////ttttyyyyppppeeeessss....hhhh>>>>
     ####iiiinnnncccclllluuuuddddeeee <<<<rrrreeeeggggeeeexxxx....hhhh>>>>
9     iiiinnnntttt rrrreeeeggggccccoooommmmpppp((((rrrreeeeggggeeeexxxx____tttt ****pppprrrreeeegggg,,,, ccccoooonnnnsssstttt cccchhhhaaaarrrr ****ppppaaaatttttttteeeerrrrnnnn,,,, iiiinnnntttt ccccffffllllaaaaggggssss))));;;;
     iiiinnnntttt  rrrreeeeggggeeeexxxxeeeecccc((((ccccoooonnnnsssstttt  rrrreeeeggggeeeexxxx____tttt  ****pppprrrreeeegggg,,,,  ccccoooonnnnsssstttt   cccchhhhaaaarrrr   ****ssssttttrrrriiiinnnngggg,,,,
          ssssiiiizzzzeeee____tttt nnnnmmmmaaaattttcccchhhh,,,, rrrreeeeggggmmmmaaaattttcccchhhh____tttt ppppmmmmaaaattttcccchhhh[[[[]]]],,,, iiiinnnntttt eeeeffffllllaaaaggggssss))));;;;
     ssssiiiizzzzeeee____tttt rrrreeeeggggeeeerrrrrrrroooorrrr((((iiiinnnntttt eeeerrrrrrrrccccooooddddeeee,,,, ccccoooonnnnsssstttt rrrreeeeggggeeeexxxx____tttt ****pppprrrreeeegggg,,,,       cccchhhhaaaarrrr
     ****eeeerrrrrrrrbbbbuuuuffff,,,, ssssiiiizzzzeeee____tttt eeeerrrrrrrrbbbbuuuuffff____ssssiiiizzzzeeee))));;;;
     vvvvooooiiiidddd rrrreeeeggggffffrrrreeeeeeee((((rrrreeeeggggeeeexxxx____tttt ****pppprrrreeeegggg))));;;;

DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
     These routines implement POSIX  1003.2  regular  expressions
     (``RE''s); see _r_e__f_o_r_m_a_t(7).  _R_e_g_c_o_m_p compiles an RE written
     as a string into an  internal  form,  _r_e_g_e_x_e_c  matches  that
     internal form against a string and reports results, _r_e_g_e_r_r_o_r
     transforms error codes from either into human-readable  mes-
     sages,  and  _r_e_g_f_r_e_e frees any dynamically-allocated storage
     used by the internal form of an RE.

     The header <_r_e_g_e_x._h> declares two structure  types,  _r_e_g_e_x__t
     and  _r_e_g_m_a_t_c_h__t,  the former for compiled internal forms and
     the latter for match reporting.  It also declares  the  four
     functions,  a  type _r_e_g_o_f_f__t, and a number of constants with
     names starting with ``REG_''.

     _R_e_g_c_o_m_p compiles the regular  expression  contained  in  the
     _p_a_t_t_e_r_n  string,  subject to the flags in _c_f_l_a_g_s, and places
     the results in the _r_e_g_e_x__t structure  pointed  to  by  _p_r_e_g.
     _C_f_l_a_g_s  is  the  bitwise OR of zero or more of the following
     flags:

     REG_EXTENDED  Compile modern (``extended'') REs, rather than
                   the  obsolete  (``basic'')  REs  that  are the
                   default.

     REG_ICASE     Compile for matching that ignores  upper/lower
                   case distinctions.  See _r_e__f_o_r_m_a_t (_7).

     REG_NOSUB     Compile for matching  that  need  only  report
                   success or failure, not what was matched.

     REG_NEWLINE   Compile for  newline-sensitive  matching.   By
                   default,  newline  is  a  completely  ordinary
                   character with no special  meaning  in  either
                   REs  or strings.  With this flag, `[^' bracket
                   expressions and `.' never match newline, a `^'
                   anchor  matches the null string after any new-
                   line in the string in addition to  its  normal



AT&T Bell LaboratoriesLast change: August 6, 1992                  1


9


REGEX(3)               C LIBRARY FUNCTIONS               REGEX(3)



                   function,  and the `$' anchor matches the null
                   string before any newline  in  the  string  in
                   addition to its normal function.

     When successful, _r_e_g_c_o_m_p returns 0 and fills in  the  struc-
     ture  pointed  to  by _p_r_e_g.  One member of that structure is
     publicized:  _r_e__n_s_u_b, of type _s_i_z_e__t, contains the number of
     parenthesized  subexpressions within the RE (except that the
     value of this member is undefined if the REG_NOSUB flag  was
     used).   If _r_e_g_c_o_m_p fails, it returns a non-zero error code;
     see DIAGNOSTICS.

     _R_e_g_e_x_e_c matches the compiled RE pointed to by  _p_r_e_g  against
     the  _s_t_r_i_n_g,  subject  to  the  flags in _e_f_l_a_g_s, and reports
     results using _n_m_a_t_c_h, _p_m_a_t_c_h, and the returned  value.   The
     RE  must  have  been  compiled  by  a previous invocation of
     _r_e_g_c_o_m_p.  The compiled form is not altered during  execution
     of  _r_e_g_e_x_e_c,  so a single compiled RE can be used simultane-
     ously by multiple threads.

     By default, the NUL-terminated string pointed to  by  _s_t_r_i_n_g
     is  considered  to  be the text of an entire line, minus any
     terminating newline.  The _e_f_l_a_g_s argument is the bitwise  OR
     of zero or more of the following flags:

     REG_NOTBOL    The first character of the string is  not  the
                   beginning  of a line, so the `^' anchor should
                   not match before it.  This does not affect the
                   behavior of newlines under REG_NEWLINE.

     REG_NOTEOL    The NUL terminating the string does not end  a
                   line,  so  the  `$'  anchor  should  not match
                   before it.  This does not affect the  behavior
                   of newlines under REG_NEWLINE.

     REG_STARTEND  The string is considered to start at  _s_t_r_i_n_g +
                   _p_m_a_t_c_h[0]._r_m__s_o  and to have a terminating NUL
                   located  at  _s_t_r_i_n_g +  _p_m_a_t_c_h[0]._r_m__e_o  (there
                   need  not actually be a NUL at that location),
                   regardless of the value of _n_m_a_t_c_h.  See  below
                   for the definition of _p_m_a_t_c_h and _n_m_a_t_c_h.  This
                   is  an  extension,  compatible  with  but  not
                   specified  by POSIX 1003.2, and should be used
                   with caution in software intended to be  port-
                   able to other systems.

     See _r_e__f_o_r_m_a_t(7) for a discussion  of  what  is  matched  in
     situations  where an RE or a portion thereof could match any
     of several substrings of _s_t_r_i_n_g.

     Normally, _r_e_g_e_x_e_c returns 0 for  success  and  the  non-zero
     code  REG_NOMATCH  for  failure.  Other non-zero error codes



AT&T Bell LaboratoriesLast change: August 6, 1992                  2






REGEX(3)               C LIBRARY FUNCTIONS               REGEX(3)



     may be returned in exceptional situations; see DIAGNOSTICS.

     If REG_NOSUB was specified in the compilation of the RE,  or
     if _n_m_a_t_c_h is 0, _r_e_g_e_x_e_c ignores the _p_m_a_t_c_h argument (but see
     below for the case where REG_STARTEND is specified).  Other-
     wise, _p_m_a_t_c_h points to an array of _n_m_a_t_c_h structures of type
     _r_e_g_m_a_t_c_h__t.  Such a structure has at least the members _r_m__s_o
     and  _r_m__e_o,  both of type _r_e_g_o_f_f__t (a signed arithmetic type
     at least as large as an _o_f_f__t  and  a  _s_s_i_z_e__t),  containing
     respectively  the  offset  of  the first character of a sub-
     string and the offset of the first character after  the  end
     of  the  substring.  Offsets are measured from the beginning
     of the _s_t_r_i_n_g argument given to _r_e_g_e_x_e_c.  An empty substring
     is  denoted  by equal offsets, both indicating the character
     following the empty substring.

     The 0th member of the _p_m_a_t_c_h array is filled in to  indicate
     what  substring  of  _s_t_r_i_n_g  was  matched  by the entire RE.
     Remaining members  report  what  substring  was  matched  by
     parenthesized subexpressions within the RE; member _i reports
     subexpression _i, with subexpressions counted (starting at 1)
     by the order of their opening parentheses in the RE, left to
     right.  Unused entries in the array-corresponding either  to
     subexpressions that did not participate in the match at all,
     or to subexpressions that do not exist in the RE  (that  is,
     _i >  _p_r_e_g->_r_e__n_s_u_b)-have both _r_m__s_o and _r_m__e_o set to -1.  If
     a subexpression participated in the match several times, the
     reported substring is the last one it matched.  (Note, as an
     example in particular, that  when  the  RE  `(b*)+'  matches
     `bbb',  the  parenthesized subexpression matches each of the
     three `b's and then an infinite number of empty strings fol-
     lowing the last `b', so the reported substring is one of the
     empties.)

     If REG_STARTEND is specified, _p_m_a_t_c_h must point to at  least
     one  _r_e_g_m_a_t_c_h__t  even if _n_m_a_t_c_h is 0 or REG_NOSUB was speci-
     fied.  In such a case, the value of _p_m_a_t_c_h[0]  will  not  be
     changed by _r_e_g_e_x_e_c.

     _R_e_g_e_r_r_o_r maps a non-zero  _e_r_r_c_o_d_e  from  either  _r_e_g_c_o_m_p  or
     _r_e_g_e_x_e_c  to  a  printable message.  If _p_r_e_g is non-NULL, the
     error code should  have  arisen  from  use  of  the  _r_e_g_e_x__t
     pointed to by _p_r_e_g, and if the error code came from _r_e_g_c_o_m_p,
     it should have been the result from the most recent  _r_e_g_c_o_m_p
     using  that _r_e_g_e_x__t.  (_R_e_g_e_r_r_o_r may be able to supply a more
     detailed  message  using  information  from  the   _r_e_g_e_x__t.)
     _R_e_g_e_r_r_o_r  places  the NUL-terminated message into the buffer
     pointed to by _e_r_r_b_u_f, limiting  the  length  (including  the
     NUL)  to  at  most  _e_r_r_b_u_f__s_i_z_e bytes.  If the whole message
     won't fit, as much of it as will fit before the  terminating
     NUL  is  supplied.   In  any case, the returned value is the
     size of buffer needed to hold the whole  message  (including



AT&T Bell LaboratoriesLast change: August 6, 1992                  3






REGEX(3)               C LIBRARY FUNCTIONS               REGEX(3)



     terminating  NUL).   If  _e_r_r_b_u_f__s_i_z_e is 0, _e_r_r_b_u_f is ignored
     but the return value is still correct.

     _R_e_g_f_r_e_e frees any dynamically-allocated  storage  associated
     with  the  compiled  RE  pointed  to by _p_r_e_g.  The remaining
     _r_e_g_e_x__t is no longer a valid compiled RE and the  effect  of
     supplying it to _r_e_g_e_x_e_c or _r_e_g_e_r_r_o_r is undefined.

     None of these functions references global  variables  except
     for  tables of constants; all are safe for use from multiple
     threads if the arguments are safe.

IIIIMMMMPPPPLLLLEEEEMMMMEEEENNNNTTTTAAAATTTTIIIIOOOONNNN CCCCHHHHOOOOIIIICCCCEEEESSSS
     There are a number of decisions that 1003.2 leaves up to the
     implementor, either by explicitly saying ``undefined'' or by
     virtue of them being forbidden  by  the  RE  grammar.   This
     implementation treats them as follows.

     See _r_e__f_o_r_m_a_t(7) for  a  discussion  of  the  definition  of
     case-independent matching.

     There is no particular limit on the length  of  REs,  except
     insofar as memory is limited.  Memory usage is approximately
     linear in RE size, and largely insensitive to RE complexity,
     except  for  bounded repetitions.  See BUGS for one short RE
     using them that will run almost any system out of memory.

     Any backslashed character other than the  ones  specifically
     legitimized by 1003.2 produces a REG_EESCAPE error.

     Any unmatched [ is a REG_EBRACK error.

     Equivalence classes cannot begin or  end  bracket-expression
     ranges.  The endpoint of one range cannot begin another.

     RE_DUP_MAX,  the  limit  on  repetition  counts  in  bounded
     repetitions, is 255.

     A repetition operator (?, *, +,  or  bounds)  cannot  follow
     another  repetition  operator.  A repetition operator cannot
     begin an expression or subexpression or follow `^' or `|'.

     `|' cannot appear first or  last  in  a  (sub)expression  or
     after another `|', i.e. an operand of `|' cannot be an empty
     subexpression.  An empty parenthesized subexpression,  `()',
     is  legal and matches an empty (sub)string.  An empty string
     is not a legal RE.

     A `{' followed by a digit is  considered  the  beginning  of
     bounds  for a bounded repetition, which must then follow the
     syntax for bounds.  A `{' _n_o_t followed by a  digit  is  con-
     sidered an ordinary character.



AT&T Bell LaboratoriesLast change: August 6, 1992                  4






REGEX(3)               C LIBRARY FUNCTIONS               REGEX(3)



     `^' and `$' beginning and ending subexpressions in  obsolete
     (``basic'') REs are anchors, not ordinary characters.

SSSSEEEEEEEE AAAALLLLSSSSOOOO
     grep(1), re_format(7)

     POSIX 1003.2, sections 2.8 (Regular Expression Notation) and
     B.5 (C Binding for Regular Expression Matching).

DDDDIIIIAAAAGGGGNNNNOOOOSSSSTTTTIIIICCCCSSSS
     Non-zero error codes from _r_e_g_c_o_m_p and  _r_e_g_e_x_e_c  include  the
     following:

     REG_NOMATCH    regexec() failed to match
     REG_BADPAT     invalid regular expression
     REG_ECOLLATE   invalid collating element
     REG_ECTYPE     invalid character class
     REG_EESCAPE    \ applied to unescapable character
     REG_ESUBREG    invalid backreference number
     REG_EBRACK     brackets [ ] not balanced
     REG_EPAREN     parentheses ( ) not balanced
     REG_EBRACE     braces { } not balanced
     REG_BADBR      invalid repetition count(s) in { }
     REG_ERANGE     invalid character range in [ ]
     REG_ESPACE     ran out of memory
     REG_BADRPT     ?, *, or + operand invalid
     REG_EMPTY      empty (sub)expression
     REG_ASSERT     ``can't happen''-you found a bug

HHHHIIIISSSSTTTTOOOORRRRYYYY
     Written  by  Henry  Spencer  at   University   of   Toronto,
     henry@zoo.toronto.edu.

BBBBUUUUGGGGSSSS
     This is an alpha release with known defects.  Please  report
     problems.

     There is one known functionality bug.  The implementation of
     internationalization  is  incomplete:   the locale is always
     assumed to be the default one of 1003.2, and only  the  col-
     lating elements etc. of that locale are available.

     The back-reference code is subtle and  doubts  linger  about
     its correctness in complex cases.

     _R_e_g_e_x_e_c performance is poor.  This will improve  with  later
     releases.  _N_m_a_t_c_h exceeding 0 is expensive; _n_m_a_t_c_h exceeding
     1 is worse.  _R_e_g_e_x_e_c is largely insensitive to RE complexity
     _e_x_c_e_p_t  that  back  references  are massively expensive.  RE
     length does matter; in particular, there is a  strong  speed
     bonus  for keeping RE length under about 30 characters, with
     most special characters counting roughly double.



AT&T Bell LaboratoriesLast change: August 6, 1992                  5






REGEX(3)               C LIBRARY FUNCTIONS               REGEX(3)



     _R_e_g_c_o_m_p implements bounded repetitions by  macro  expansion,
     which  is  costly  in  time and space if counts are large or
     bounded  repetitions  are  nested.    An   RE   like,   say,
     `((((a{1,100}){1,100}){1,100}){1,100}){1,100}' will (eventu-
     ally) run almost any existing machine out of swap space.

     There are suspected problems with response to obscure  error
     conditions.   Notably,  certain  kinds of internal overflow,
     produced only by truly enormous REs or  by  multiply  nested
     bounded repetitions, are probably not handled well.

     Due to a mistake in 1003.2, things like `a)b' are legal  REs
     because `)' is a special character only in the presence of a
     previous unmatched `('.  This can't be fixed until the  spec
     is fixed.

     The standard's definition of back references is vague.   For
     example,  does  `a\(\(b\)*\2\)*d'  match `abbbd'?  Until the
     standard is clarified, behavior in such cases should not  be
     relied on.

AAAAUUUUTTTTHHHHOOOORRRR
     Henry Spencer
































AT&T Bell LaboratoriesLast change: August 6, 1992                  6



