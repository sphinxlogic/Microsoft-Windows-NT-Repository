%!PS-Adobe-2.1
%%Creator: groff version 1.01
%%DocumentFonts: Times-Roman Times-Italic Times-Bold
%%DocumentSuppliedFonts:
%%DocumentNeededFonts: Times-Roman Times-Italic Times-Bold
%%Pages: 46
%%EndComments
/grops 100 dict def grops begin
%!
% If you add definitions here, be sure to check that MAX_PROLOGUE_DEFS
% in ps.c is large enough.

% The ASCII code of the space character.
/SC 32 def

/A /show load def
/B { 0 SC 3 -1 roll widthshow } bind def
/C { 0 exch ashow } bind def
/D { 0 exch 0 SC 5 2 roll awidthshow } bind def
/E { 0 rmoveto show } bind def
/F { 0 rmoveto 0 SC 3 -1 roll widthshow } bind def
/G { 0 rmoveto 0 exch ashow } bind def
/H { 0 rmoveto 0 exch 0 SC 5 2 roll awidthshow } bind def
/I { 0 exch rmoveto show } bind def
/J { 0 exch rmoveto 0 SC 3 -1 roll widthshow } bind def
/K { 0 exch rmoveto 0 exch ashow } bind def
/L { 0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow } bind def
/M { rmoveto show } bind def
/N { rmoveto 0 SC 3 -1 roll widthshow } bind def
/O { rmoveto 0 exch ashow } bind def
/P { rmoveto 0 exch 0 SC 5 2 roll awidthshow } bind def
/Q { moveto show } bind def 
/R { moveto 0 SC 3 -1 roll widthshow } bind def
/S { moveto 0 exch ashow } bind def
/T { moveto 0 exch 0 SC 5 2 roll awidthshow } bind def

% name size font SF -

/SF {
	findfont exch
	[ exch dup 0 exch 0 exch neg 0 0 ] makefont
	dup setfont
	[ exch /setfont cvx ] cvx bind def
} bind def

% name a c d font MF

/MF {
	findfont
	[ 5 2 roll
	0 3 1 roll % b
	neg 0 0 ] makefont
	dup setfont
	[ exch /setfont cvx ] cvx bind def
} bind def

	
% BP -

/BP {
	/level0 save def
	1 setlinecap
	1 setlinejoin
	72 RES div dup scale
	LS {
		90 rotate
	} {
		0 PL translate
	} ifelse
	1 -1 scale
} bind def

/EP {
	level0 restore
	showpage
} bind def


% centerx centery radius startangle endangle DA -

/DA {
	newpath arcn stroke
} bind def

% x y SN - x' y'
% round a position to nearest (pixel + (.25,.25))

/SN {
	transform 
	.25 sub exch .25 sub exch
	round .25 add exch round .25 add exch
	itransform
} bind def
	
% endx endy startx starty DL -
% we round the endpoints of the line, so that parallel horizontal
% and vertical lines will appear even

/DL {
	SN
	moveto
	SN
	lineto stroke
} bind def

% centerx centery radius DC -

/DC {
	newpath 0 360 arc closepath
} bind def


/TM matrix def

%  width height centerx centery DE -

/DE {
	TM currentmatrix pop
	translate scale newpath 0 0 .5 0 360 arc closepath
	TM setmatrix
} bind def

% these are for splines

/RC /rcurveto load def
/RL /rlineto load def
/ST /stroke load def
/MT /moveto load def
/CL /closepath load def

% fill the last path

% amount FL -

/FL {
	currentgray exch setgray fill setgray
} bind def

% fill with the ``current color''

/BL /fill load def

/LW /setlinewidth load def
% new_font_name encoding_vector old_font_name RE -

/RE {
	findfont
	dup maxlength dict begin
	{
		1 index /FID ne { def } { pop pop } ifelse
	} forall
	/Encoding exch def
	dup /FontName exch def
	currentdict end definefont pop
} bind def

% hpos vpos EBEGIN -

/EBEGIN {
	moveto
	DEFS begin
} bind def

/EEND /end load def

% llx lly newwid wid newht ht newllx newlly -

/PICTURE {
	translate
	div 3 1 roll div exch scale
	neg exch neg exch translate
	% set the graphics state to default values
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	newpath
} bind def
/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end end
%%EndProlog
%%IncludeFont: Times-Roman
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Bold
%%BeginSetup
grops begin/#copies 1 def/RES 72 def/PL 792 def/LS false def/ENC0[/asciicircum
/asciitilde/Scaron/Zcaron/scaron/zcaron/Ydieresis/trademark/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar
/percent/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon/semicolon
/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O/P/Q/R/S/T/U/V/W/X
/Y/Z/bracketleft/backslash/bracketright/circumflex/underscore/quoteleft/a/b/c/d
/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/tilde
/.notdef/quotesinglbase/guillemotleft/guillemotright/bullet/florin/fraction
/perthousand/dagger/daggerdbl/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj
/grave/hungarumlaut/dotaccent/breve/caron/ring/ogonek/quotedblleft
/quotedblright/oe/lslash/quotedblbase/OE/Lslash/.notdef/exclamdown/cent
/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guilsinglleft/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve
/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave/Uacute/Ucircumflex
/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis
/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute
/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis
/divide/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Roman@0 ENC0/Times-Roman RE/Times-Italic@0 ENC0/Times-Italic RE
/Times-Bold@0 ENC0/Times-Bold RE
%%EndSetup
%%Page: 1 1
BP/F0 12/Times-Bold@0 SF 3(AT)211.218 123 S(utorial for GNU Smalltalk)229.782
123 Q/F1 10/Times-Italic@0 SF(Andr)254.16 147 Q(ew V)-.37 E(alencia)-1.11 E/F2
10/Times-Roman@0 SF -1.11(Va)247.585 165 S(lencia Consulting)1.11 E/F3 10
/Times-Bold@0 SF(Overview)72 228.6 Q(What this manual pr)72 252.6 Q(esents)-.18
E F2 1.118(This document provides a tutorial introduction to the Smalltalk lan\
guage in general, and the GNU)97 268.2 R .12
(Smalltalk implementation in particular)72 280.2 R 5.12(.I)-.55 G 2.62(td)
237.48 280.2 S .12
(oes not provide exhaustive coverage of every feature of the lan-)247.88 280.2
R .963(guage and its libraries; instead, it attempts to introduce a critical m\
ass of ideas and techniques to get the)72 292.2 R
(Smalltalk novice moving in the right direction.)72 304.2 Q F3
(Who this manual is written for)72 328.2 Q F2 .53(This manual assumes that the\
 reader is acquainted with the basics of computer science, and has rea-)97
343.8 R .369(sonable pro\214ciency with a procedural language such as)72 355.8
R F1(C.)2.868 E F2 .368(It also assumes that the reader is already famil-)5.368
F(iar with the usual janitorial tasks associated with programming\212editing, \
moving \214les, and so forth.)72 367.8 Q F3 2.5(1. Getting)72 391.8 R(started)
2.5 E 2.5(1.1. Starting)72 415.8 R(up Smalltalk)2.5 E F2(Assuming that GNU Sma\
lltalk has been installed on your system, starting it is as simple as:)97 431.4
Q 2.5(%m)108 449.4 S(st)126.61 449.4 Q
(the system loads in Smalltalk, and displays a startup banner like:)72 467.4 Q
(Smalltalk 1.1.1 Ready)108 485.4 Q(st>)108 509.4 Q -1(Yo)72 527.4 S 4.625(ua)1
G 2.125(re now ready to try your hand at Smalltalk!)97.285 527.4 R 2.125
(By the way)7.125 F 4.625(,w)-.65 G 2.126(hen you're ready to quit, you exit)
357.655 527.4 R(Smalltalk by typing control-D on an empty line.)72 539.4 Q F3
2.5(1.2. Saying)72 563.4 R(hello)2.5 E F2 .263
(An initial exercise is to make Smalltalk say "hello" to you.)97 579 R -.7(Ty)
5.263 G .262(pe in the following line \("printNl" is a).7 F
(upper case N and a lower case L\):)72 591 Q('Hello, world' printNl !)110.5 609
Q(The system then prints back 'Hello, world' to you.)72 627 Q/F4 7
/Times-Roman@0 SF(1)274.2 622.9 Q F3 2.5(1.3. What)72 651 R(actually happened)
2.5 E F2 .269(The front-line Smalltalk interpreter gathers all text until a '!\
' character and executes it.)97 666.6 R .269(So the actual)5.269 F
(Smalltalk code executed was:)72 678.6 Q .32 LW 144 686.6 72 686.6 DL/F5 5.6
/Times-Roman@0 SF(1)82 695.12 Q/F6 8/Times-Roman@0 SF .103
(It also prints out a lot of statistics.)2 3.28 N .103
(Ignore these; they provide information on the performance of the under)4.103 F
(-)-.16 E(lying Smalltalk engine.)72 708.4 Q -.8(Yo)4 G 2(uc).8 G
(an inhibit them by starting Smalltalk as:)168.976 708.4 Q 2(%m)108 724.4 S
(st -q)122.888 724.4 Q EP
%%Page: 2 2
BP/F0 10/Times-Roman@0 SF(-2-)282.17 48 Q('Hello, world' printNl)110.5 84 Q
.267(This code does two things.)72 102 R .267(First, it creates an object of t\
ype "String" which contains the characters "Hello,)5.267 F 3.2(world". Second,)
72 114 R .7(it sends the message named "printNl" to the object.)3.2 F .7
(When the object is done processing)5.7 F
(the message, the code is done and we get our prompt back.)72 126 Q -1(Yo)97
141.6 S 1.051(u'll notice that we didn')1 F 3.551(ts)-.18 G 1.051
(ay anything about printing the string, even though that')218.565 141.6 R 3.552
(si)-.55 G 3.552(nf)457.466 141.6 S 1.052(act what)469.348 141.6 R 3.433
(happened. This)72 153.6 R .933
(was very much on purpose\212the code we typed in)3.433 F/F1 10/Times-Italic@0
SF(doesn')3.432 E 3.432(tk)-1.11 G .932(now anything about printing)387.024
153.6 R(strings.)72 165.6 Q F0 .732(It knew how to get a string object, and it\
 knew how to send a message to that object.)5.731 F(That')5.732 E 3.232(st)-.55
G(he)494.56 165.6 Q 1.105(end of the story for the code we wrote.)72 177.6 R
1.104(But for fun, let')6.104 F 3.604(st)-.55 G 1.104
(ake a look at what happened when the string)317.428 177.6 R
(object received the "printNl" message.)72 189.6 Q/F2 10/Times-Bold@0 SF 2.5
(1.4. What)72 213.6 R 2.5(as)2.5 G(tring does with a "printNl" message)129.78
213.6 Q F0 .573
(The string object containing "Hello, world" was sent the message "printNl".)97
229.2 R .573(It then goes to a table)5.573 F/F3 7/Times-Roman@0 SF(2)500.5
225.1 Q F0 .563
(which lists the messages which strings can receive, and what code to execute.)
72 241.2 R .562(It \214nds that there is indeed)5.563 F 1.276
(an entry for "printNl" and runs this code.)72 253.2 R 1.276
(This code then walks through its characters, printing each of)6.276 F .182
(them out to the terminal.)72 265.2 R F3(3)171.338 261.1 Q F0 .182(The central\
 point is that an object is entirely self-contained; only the object knew)
177.52 265.2 R(how to print itself out.)72 277.2 Q(When we want an object to p\
rint out, we ask the object itself to do the printing.)5 E F2 2.5(1.5. Doing)72
301.2 R(math)2.5 E F0 2.5(As)97 316.8 S(imilar piece of code prints numbers:)
110.61 316.8 Q(1234 printNl !)108 334.8 Q 1.045(Notice how we used the same me\
ssage, but have sent it to a new type of object\212an integer \(from class)72
352.8 R 2.733("Integer"\). The)72 364.8 R .233
(way in which an integer is printed is much dif)2.733 F .232
(ferent from the way a string is printed on the)-.18 F 1.764(inside, but becau\
se we are just sending a message, we do not have to be aware of this.)72 376.8
R 3.364 -.8(We t)6.764 H 1.764(ell it to).8 F
("printNl", and it prints itself out.)72 388.8 Q .533(As a)97 404.4 R F1(user)
3.033 E F0 .533(of an object, we can thus usually send a particular message an\
d expect basically the same)3.033 F .27(kind of behavior)72 416.4 R 2.77(,r)-.4
G .27(egardless of object')146.84 416.4 R 2.77(si)-.55 G .27
(nternal structure \(for instance, we have seen that sending "printNl")234.58
416.4 R .841(to an object makes the object print itself\).)72 428.4 R .84
(In later chapters we will see a wide range of types of objects.)5.841 F -1(Ye)
72 440.4 S 2.5(ta)1 G
(ll of them can be printed out the same way\212with "printNl".)92.38 440.4 Q
(White space is ignored, except as it separates words.)97 456 Q
(This example could also have looked like:)5 E(1234)160.5 474 Q 22.5(printNl !)
110.5 486 R .638(An integer can be sent a number of messages in addition to ju\
st printing itself.)97 507.6 R .638(An important set of)5.638 F
(messages for integers are the ones which do math:)72 519.6 Q
(\(9 + 7\) printNl !)108 537.6 Q .108(Answers \(correctly!\) the value 16.)72
555.6 R .108(The way that it does this, however)5.108 F 2.608(,i)-.4 G 2.608
(sas)360.056 555.6 S .107(igni\214cant departure from a pro-)377.492 555.6 R
(cedural language.)72 567.6 Q F2 2.5(1.6. Math)72 591.6 R(in Smalltalk)2.5 E F0
.018(In this case, what happened was that the object "9" \(an Integer\), recei\
ved a "+" message with an ar)97 607.2 R(gu-)-.18 E .749
(ment of "7" \(also an Integer\).)72 619.2 R .748
(The "+" message for integers then caused Smalltalk to create a new object)
5.749 F 1.621("16" and return it as the resultant object.)72 631.2 R 1.622
(This "16" object was then given the "printNl" message, and)6.622 F
(printed "16" on the terminal.)72 643.2 Q .32 LW 144 651.2 72 651.2 DL/F4 5.6
/Times-Roman@0 SF(2)82 665.72 Q/F5 8/Times-Roman@0 SF .795(Which table?)2 3.28
N .795(This is determined by the type of the object.)4.795 F .796
(An object has a type, known as the)4.796 F/F6 8/Times-Italic@0 SF(class)2.796
E F5(to)2.796 E .215(which it belongs.)72 679 R .215
(Each class has a table of methods.)4.215 F .215
(For the object we created, it is known as a member of the)4.215 F
("String" class.)72 689 Q
(So we go to the table associated with the String class.)4 E F4(3)82 697.52 Q
F5(Actually)2 3.28 M 3.1(,t)-.52 G 1.099
(he message "printNl" was inherited from Object.)121.156 700.8 R 1.099
(It sent a "print" message, also inherited by)5.099 F .139(Object, which then \
sent "printOn:" to the object, specifying that it print to "stdout".)72 710.8 R
.14(The String class then prints)4.14 F(its characters to the standard output.)
72 720.8 Q EP
%%Page: 3 3
BP/F0 10/Times-Roman@0 SF(-3-)282.17 48 Q 1.291(Thus, math is not a special ca\
se in Smalltalk; it is done exactly like everything else\212by creating)97 84 R
.543(objects, and sending them messages.)72 96 R .543
(This may seem odd to the Smalltalk novice, but this regularity turns)5.543 F
.588(out to be quite a boon\212once you've mastered just a few paradigms, all \
of the language "falls into place.")72 108 R .606
(Before you go on to the next chapter)72 120 R 3.106(,m)-.4 G .606
(ake sure you try math involving "*" \(multiplication\), "-" \(subtrac-)235.586
120 R(tion\), and "/" \(division\) also.)72 132 Q
(These examples should get you started:)5 E(\(8 * \(4 / 2\)\) printNl !)108 150
Q(\(8 - \(4 + 1\)\) printNl !)108 162 Q(\(5 + 4\) printNl !)108 174 Q
(\(2/3 + 7\) printNl !)108 186 Q(\(2 + 3 * 4\) printNl !)108 198 Q
(\(2 + \(3 * 4\)\) printNl !)108 210 Q EP
%%Page: 4 4
BP/F0 10/Times-Roman@0 SF(-4-)282.17 48 Q/F1 10/Times-Bold@0 SF 2.5(2. Using)72
84 R(some of the Smalltalk classes)2.5 E F0 .009
(This chapter has examples which need a place to hold the objects they create.)
97 99.6 R .008(The following line cre-)5.009 F .098(ates such a place; for now)
72 111.6 R 2.598(,t)-.65 G .098(reat it as magic.)183.298 111.6 R .099
(At the end of the chapter we will revisit it with an explanation.)5.099 F -.7
(Ty)72 123.6 S(pe in:).7 E(Smalltalk at: #x put: 0 !)108 141.6 Q(Now let')72
159.6 Q 2.5(sc)-.55 G(reate some new objects.)117.55 159.6 Q F1 2.5(2.1. An)72
183.6 R(array in Smalltalk)2.5 E F0 1.232(An array in Smalltalk is similar to \
an array in any other language, although the syntax may seem)97 199.2 R
(peculiar at \214rst.)72 211.2 Q 1.4 -.7(To c)5 H
(reate an array with room for 20 elements, do:).7 E 2.5(x:)108 229.2 S 2.5(=A)
118.28 229.2 S(rray new: 20 !)133.64 229.2 Q .966(The "Array new: 20" creates \
the array; the "x :=" part connects the name "x" with the object.)72 247.2 R
.966(Until you)5.966 F
(assign something else to "x", you can refer to this array by the name "x".)72
259.2 Q .273(Changing elements of the array is)97 274.8 R/F2 10/Times-Italic@0
SF(not)2.772 E F0 .272
(done using the ":=" operator; this operator is used only to bind)2.772 F .346
(names to objects.)72 286.8 R .347(In fact, you never modify data structures; \
instead, you send a message to the object, and)5.346 F(it will modify itself.)
72 298.8 Q(For instance:)5 E(\(x at: 1\) printNl !)108 316.8 Q(which prints:)72
334.8 Q(nil)108 352.8 Q .202(The slots of an array are initially set to "nothi\
ng" \(which Smalltalk calls "nil"\).)72 370.8 R(Let')5.201 E 2.701(ss)-.55 G
.201(et the \214rst slot to the)421.045 370.8 R(number 99:)72 382.8 Q 2.5(xa)
108 400.8 S(t: 1 put: 99 !)119.94 400.8 Q
(and now make sure the 99 is actually there:)72 418.8 Q(\(x at: 1\) printNl !)
108 436.8 Q(which then prints out:)72 454.8 Q(99)108 472.8 Q .014
(These examples show how to manipulate an array)72 490.8 R 5.014(.T)-.65 G .014
(hey also show the standard way in which messages are)284.752 490.8 R .304
(passed ar)72 502.8 R 2.804(guments. In)-.18 F .303
(most cases, if a message takes an ar)2.804 F .303
(gument, its name will end with ":".)-.18 F/F3 7/Times-Roman@0 SF(4)448.211
498.7 Q F0 .303(So when we)454.514 502.8 R .444(said "x at: 1" we were sending\
 a message to whatever object was currently bound to "x" with an ar)72 514.8 R
(gument)-.18 E(of 1.)72 526.8 Q(For an array)5 E 2.5(,t)-.65 G
(his results in the \214rst slot of the array being returned.)151.33 526.8 Q
.741(The second operation, "x at: 1 put: 99" is a message with)97 542.4 R F2
(two)3.24 E F0(ar)3.24 E 3.24(guments. It)-.18 F .74(tells the array to place)
3.24 F .775(the second ar)72 554.4 R .775
(gument \(99\) in the slot speci\214ed by the \214rst \(1\).)-.18 F .776
(Thus, when we re-examine the \214rst slot, it)5.775 F
(does indeed now contain 99.)72 566.4 Q 1.58
(There is a shorthand for describing the messages you send to objects.)97 582 R
-1(Yo)6.58 G 4.08(uj)1 G 1.58(ust run the message)420.66 582 R(names together)
72 594 Q 5(.S)-.55 G 2.5(ow)145.33 594 S 2.5(ew)160.05 594 S
(ould say that our array accepts both the "at:" and "at:put:" messages.)174.21
594 Q(There is quite a bit of sanity checking built into an array)97 609.6 Q 5
(.T)-.65 G(he request)334.65 609.6 Q 2.5(6a)108 627.6 S(t: 1)119.94 627.6 Q
(fails with an error; 6 is an integer)72 645.6 Q 2.5(,a)-.4 G(nd can')214.07
645.6 Q 2.5(tb)-.18 G 2.5(ei)253.88 645.6 S 2.5(ndexed. Further)263.6 645.6 R
(,)-.4 E 2.5(xa)108 663.6 S(t: 21)119.94 663.6 Q .332(fails with an error)72
681.6 R 2.832(,b)-.4 G .332
(ecause the array we created only has room for 20 objects.)154.298 681.6 R F3
(5)387.268 677.5 Q F0(Finally)393.6 681.6 Q 2.832(,n)-.65 G .333
(ote that the object)431.622 681.6 R
(stored in an array is just like any other object, so we can do things like:)72
693.6 Q .32 LW 144 701.6 72 701.6 DL/F4 5.6/Times-Roman@0 SF(4)82 710.12 Q/F5 8
/Times-Roman@0 SF(Alert readers will remember that the math examples of the pr\
evious chapter deviated from this.)2 3.28 M F4(5)82 721.92 Q F5
(As of release 1.1, GNU Smalltalk does not actually catch this error)2 3.28 M
(.)-.44 E EP
%%Page: 5 5
BP/F0 10/Times-Roman@0 SF(-5-)282.17 48 Q(\(\(x at: 1\) + 1\) printNl !)108 84
Q(which \(assuming you've been typing in the examples\) will print 100.)72 102
Q/F1 10/Times-Bold@0 SF 2.5(2.2. A)72 126 R(set in Smalltalk)2.5 E F0 -.8(We)97
141.6 S 1.476('re done with the array we've been using, so we'll assign someth\
ing new to our "x" variable.).8 F 1.038(Note that we don')72 153.6 R 3.538(tn)
-.18 G 1.039(eed to do anything special about the old array\212the fact that n\
obody is using it any)158.182 153.6 R
(more will be automatically detected, and the memory reclaimed.)72 165.6 Q/F2 7
/Times-Roman@0 SF(6)329.73 161.5 Q F0(So, to get our new object, simply do:)
335.73 165.6 Q 2.5(x:)108 183.6 S 2.5(=S)118.28 183.6 S(et new !)131.98 183.6 Q
(Which creates an empty set.)72 201.6 Q 1.4 -.7(To v)5 H(iew its contents, do:)
.7 E 2.5(xp)108 219.6 S(rintNl !)120.5 219.6 Q .854(the kind of object is prin\
ted out \(i.e., Set\), and then the members are listed within parenthesis.)72
237.6 R .854(Since it')5.854 F(s)-.55 E(empty)72 249.6 Q 2.5(,w)-.65 G 2.5(es)
108.57 249.6 S(ee:)119.4 249.6 Q(Set \(\))108 267.6 Q(Now let')72 285.6 Q 2.5
(st)-.55 G(oss some stuf)115.89 285.6 Q 2.5(fi)-.18 G(nto it.)178.21 285.6 Q
-.8(We)5 G('ll add the numbers 5 and 7, plus the string 'foo'.).8 E -.8(We)5 G
/F3 10/Times-Italic@0 SF(could)3.3 E F0(type:)2.5 E 2.5(xa)108 303.6 S(dd: 5 !)
119.94 303.6 Q 2.5(xa)108 315.6 S(dd: 7 !)119.94 315.6 Q 2.5(xa)108 327.6 S
(dd: 'foo' !)119.94 327.6 Q(But let')72 345.6 Q 2.5(ss)-.55 G
(ave a little typing by using a Smalltalk shorthand:)112.01 345.6 Q 2.5(xa)108
363.6 S(dd: 5; add: 7; add: 'foo' !)119.94 363.6 Q .236
(This line does exactly what the previous example')72 381.6 R 2.735(st)-.55 G
.235(hree lines did.)283.305 381.6 R .235
(The trick is that the semicolon operator)5.235 F .353
(causes the message to be sent to the same object as the last message sent.)72
393.6 R .354(So saying "; add: 7" is the same)5.354 F .4
(as saying "x add: 7", because "x" was the last thing a message was sent to.)72
405.6 R .399(This may not seem like such a)5.399 F .618
(big savings, but compare the ease when your variable is named "aV)72 417.6 R
(eryLongV)-1.11 E .618(ariableName" instead of just)-1.11 F 2.509("x"! W)72
429.6 R .008(e'll revisit some other occasions where ";" saves you trouble, bu\
t for now let')-.8 F 2.508(sc)-.55 G .008(ontinue with our set.)421.756 429.6 R
-.7(Ty)72 441.6 S(pe either version of the example, and make sure that we've a\
dded 5, 7, and "foo":).7 E 2.5(xp)108 459.6 S(rintNl !)120.5 459.6 Q
(we'll see that it now contains our data:)72 477.6 Q(Set \(5 'foo' 7\))108
495.6 Q .782(What if we add something twice?)72 513.6 R .782
(No problem\212it just stays in the set.)5.782 F .782
(So a set is like a big checklist\212)5.782 F(either it')72 525.6 Q 2.5(si)-.55
G 2.5(nt)114.78 525.6 S(here, or it isn')125.06 525.6 Q 2.5(t. T)-.18 F 2.5(ow)
-.7 G(it:)211.39 525.6 Q 2.5(xa)108 543.6 S(dd:5; add: 5; add: 5; add: 5 !)
119.94 543.6 Q 2.5(xp)108 555.6 S(rintNl !)120.5 555.6 Q -.8(We)72 573.6 S('ve\
 added "5" several times, but when we printed our set back out, we just see:).8
E(Set \(5 'foo' 7\))108 591.6 Q
(What you put into a set with "add:", you can take out with "remove:".)97 613.2
Q -.35(Tr)5 G(y:).35 E 2.5(xr)108 631.2 S(emove: 5 !)118.83 631.2 Q 2.5(xp)108
643.2 S(rintNl !)120.5 643.2 Q(The set now prints as:)72 661.2 Q
(Set \('foo' 7\))108 679.2 Q(The "5" is indeed gone from the set.)72 697.2 Q
.32 LW 144 705.2 72 705.2 DL/F4 5.6/Times-Roman@0 SF(6)82 713.72 Q/F5 8
/Times-Roman@0 SF .446(This is known as "garbage collection.")2 3.28 N .446
(It is generally done when Smalltalk \214nds that it is running low on)4.446 F
(memory)72 727 Q(.)-.52 E EP
%%Page: 6 6
BP/F0 10/Times-Roman@0 SF(-6-)282.17 48 Q -.8(We)97 84 S .328('ll \214nish up \
with one more of the many things you can do with a set\212 checking for member\
ship.).8 F -.35(Tr)72 96 S(y:).35 E(\(x includes: 7\) printNl !)108 114 Q
(\(x includes: 5\) printNl !)108 126 Q .662
(From which we see that x does indeed contain 7, but not 5.)72 144 R .662
(Notice that the answer is printed as "true" or)5.662 F 2.547("false". Once)72
156 R .046(again, the thing returned is an object\212in this case, an object k\
nown as a boolean.)2.547 F -.8(We)5.046 G .046('ll look).8 F .743
(at the use of booleans later)72 168 R 3.243(,b)-.4 G .744
(ut for now we'll just say that booleans are nothing more than objects which)
192.978 168 R .81(can only either be true or false\212nothing else.)72 180 R
.81(So they're very useful for answers to yes or no questions,)5.81 F
(like the ones we just posed.)72 192 Q(Let')5 E 2.5(st)-.55 G
(ake a look at just one more kind of data structure:)212.27 192 Q/F1 10
/Times-Bold@0 SF 2.5(2.3. Dictionaries)72 216 R F0 3.581(Ad)97 231.6 S 1.081
(ictionary is a special kind of collection.)112.801 231.6 R -.4(Wi)6.081 G
1.081(th a regular array).4 F 3.581(,y)-.65 G 1.082
(ou must index it with integers.)376.922 231.6 R -.4(Wi)72 243.6 S .184
(th dictionaries, you can index it with).4 F/F2 10/Times-Italic@0 SF(any)2.683
E F0 .183(object at all.)2.683 F .183
(Dictionaries thus provide a very powerful way of)5.183 F .904
(correlating one piece of information to another)72 255.6 R 5.904(.T)-.55 G
.905(heir only downside is that they are somewhat less ef)278.568 255.6 R<8c2d>
-.18 E(cient than simple arrays.)72 267.6 Q -.35(Tr)5 G 2.5(yt).35 G
(he following:)194.13 267.6 Q 2.5(x:)108 285.6 S 2.5(=D)118.28 285.6 S
(ictionary new)133.64 285.6 Q(.)-.65 E 2.5(xa)108 297.6 S(t: 'One' put: 1 !)
119.94 297.6 Q 2.5(xa)108 309.6 S(t: 'T)119.94 309.6 Q(wo' put: 2 !)-.7 E 2.5
(xa)108 321.6 S(t: 1 put: 'One' !)119.94 321.6 Q 2.5(xa)108 333.6 S
(t: 2 put: 'T)119.94 333.6 Q(wo' !)-.7 E .323
(This \214lls our dictionary in with some data.)72 351.6 R .322
(The data is actually stored in pairs of key and value \(the key is)5.323 F
.879(what you give to at:\212it speci\214es a slot; the value is what is actua\
lly stored at that slot\).)72 363.6 R .88(Notice how we)5.88 F .057(were able \
to specify not only integers but also strings as both the key and the value.)72
375.6 R .056(In fact, we can use any)5.057 F
(kind of object we want as either\212the dictionary doesn')72 387.6 Q 2.5(tc)
-.18 G(are.)303.72 387.6 Q(Now we can map each key to a value:)97 403.2 Q
(\(x at: 1\) printNl !)108 421.2 Q(\(x at: 'T)108 433.2 Q(wo'\) printNl !)-.7 E
(which prints respectively:)72 451.2 Q('One')110.5 469.2 Q(2)110.5 481.2 Q 1.6
-.8(We c)72 499.2 T(an also ask a dictionary to print itself:).8 E 2.5(xp)108
517.2 S(rintNl !)120.5 517.2 Q(which prints:)72 535.2 Q
(Dictionary \(1,'One' 2,'T)108 553.2 Q(wo' 'One',1 'T)-.7 E(wo',2 \))-.7 E
(where the \214rst member of each pair is the key)72 571.2 Q 2.5(,a)-.65 G
(nd the second the value.)263.8 571.2 Q F1 2.5(2.4. Smalltalk)72 595.2 R
(dictionary)2.5 E F0(If you'll remember from the beginning of the chapter)97
610.8 Q 2.5(,w)-.4 G 2.5(es)321.55 610.8 S(tarted out by saying:)332.38 610.8 Q
(Smalltalk at: #x put: 0 !)108 628.8 Q 1.303(This code should look familiar\
\212the at:put: message is how we've been storing information in our own)72
646.8 R 1.424(arrays and dictionaries.)72 658.8 R 1.424
(In a Smalltalk environment the name "Smalltalk" has been preset to point to a)
6.424 F(dictionary)72 670.8 Q/F3 7/Times-Roman@0 SF(7)112.55 666.7 Q F0 .72
(which both you)119.27 670.8 R F2(and)3.22 E F0 .72(Smalltalk can use.)3.22 F
2.12 -.7(To s)5.72 H .72(ee how this sharing works, we'll \214rst try to use a)
.7 F(variable which Smalltalk doesn')72 682.8 Q 2.5(tk)-.18 G(now about:)211.25
682.8 Q .32 LW 144 698.2 72 698.2 DL/F4 5.6/Times-Roman@0 SF(7)82 706.72 Q/F5 8
/Times-Roman@0 SF(Actually)2 3.28 M 3.943(,aS)-.52 G(ystemDictionary)131.718
710 Q 3.943(,w)-.52 G 1.944
(hich is just a Dictionary with some extra hooks to run things when)196.245 710
R(Smalltalk \214rst starts)72 720 Q EP
%%Page: 7 7
BP/F0 10/Times-Roman@0 SF(-7-)282.17 48 Q 2.5(y:)108 84 S 2.5(=0!)118.28 84 S
.298(Smalltalk complains because "y" is an unknown variable.)72 102 R .298
(Using our knowledge of dictionaries, and taking)5.298 F
(advantage of our access to Smalltalk')72 114 Q 2.5(sd)-.55 G(ictionary)232.53
114 Q 2.5(,w)-.65 G 2.5(ec)279.65 114 S(an add it ourselves:)291.03 114 Q
(Smalltalk at: #y put: 0 !)108 132 Q .222(The only mystery left is why we're u\
sing "#y" instead of our usual quoted string.)72 150 R .221
(This is one of those sim-)5.221 F 1.47
(ple questions whose answer runs surprisingly deep.)72 162 R 1.471
(The quick answer is that "#y" and "'y'" are pretty)6.471 F .16(much the same,\
 except that the former will always be the same object each time you use it, w\
hereas the lat-)72 174 R(ter can be a new string each time you do so.)72 186 Q
/F1 7/Times-Roman@0 SF(8)247.24 181.9 Q F0
(Now that we've added "y" to Smalltalk')97 201.6 Q 2.5(sd)-.55 G(ictionary)
268.2 201.6 Q 2.5(,w)-.65 G 2.5(et)315.32 201.6 S(ry again:)325.04 201.6 Q 2.5
(y:)108 219.6 S 2.5(=1!)118.28 219.6 S .338(It works!)72 237.6 R .337(Because \
you've added an entry for "y", Smalltalk is now perfectly happy to let you use\
 this new)5.338 F(variable.)72 249.6 Q
(If you have some spare time, you can print out the)97 265.2 Q/F2 10
/Times-Italic@0 SF(entir)2.5 E(e)-.37 E F0(Smalltalk dictionary with:)2.5 E
(Smalltalk printNl !)108 283.2 Q .36
(As you might suspect, this will print out quite a lar)72 301.2 R .36
(ge list of names!)-.18 F .36(If you get tired of watching Smalltalk)5.36 F(gr\
ind it out, use your interrupt key \(control-C, usually\) to bring Smalltalk b\
ack to interactive mode.)72 313.2 Q/F3 10/Times-Bold@0 SF 2.5(2.5. Closing)72
337.2 R(thoughts)2.5 E F0 -1(Yo)97 352.8 S .291
(u've seen how Smalltalk provides you with some very powerful data structures.)
1 F -1(Yo)5.29 G .29(u've also seen)1 F .033
(how Smalltalk itself uses these same facilities to implement the language.)72
364.8 R .033(But this is only the tip of the ice-)5.033 F(ber)72 376.8 Q
(g\212Smalltalk is much more than a collection of "neat" facilities to use.)
-.18 E .465(The objects and methods which are automatically available are only\
 the beginning of the foundation)97 392.4 R .89(on which you build your progra\
ms\212Smalltalk allows you to add your own objects and methods into the)72
404.4 R .87(system, and then use them along with everything else.)72 416.4 R
.869(The art of programming in Smalltalk is the art of)5.869 F .441(looking at\
 your problems in terms of objects, using the existing object types to good ef)
72 428.4 R .442(fect, and enhancing)-.18 F .683
(Smalltalk with new types of objects.)72 440.4 R .683
(Now that you've been exposed to the basics of Smalltalk manipula-)5.683 F
(tion, we can begin to look at this object-oriented technique of programming.)
72 452.4 Q .32 LW 144 698.2 72 698.2 DL/F4 5.6/Times-Roman@0 SF(8)82 706.72 Q
/F5 8/Times-Roman@0 SF .618(For more detail, please feel free to skip out to c\
hapter 12 and read the section "T)2 3.28 N .618(wo Flavors of Equality")-.56 F
(and the following section "Checking for the T)72 720 Q(wo T)-.56 E
(ypes of Equality)-.56 E(.")-.52 E EP
%%Page: 8 8
BP/F0 10/Times-Roman@0 SF(-8-)282.17 48 Q/F1 10/Times-Bold@0 SF 2.5(3. The)72
84 R(Smalltalk class hierar)2.5 E(chy)-.18 E F0 1.456(When programming in Smal\
ltalk, you sometimes need to create new kinds of objects, and de\214ne)97 99.6
R .779(what various messages will do to these objects.)72 111.6 R .779
(In the next chapter we will create some new classes, but)5.779 F 1.127
(\214rst we need to understand how Smalltalk or)72 123.6 R 1.128
(ganizes the types and objects it contains.)-.18 F 1.128(Because this is a)
6.128 F(pure "concept" chapter)72 135.6 Q 2.5(,w)-.4 G(ithout any actual Small\
talk code to run, we will keep it short and to the point.)175.28 135.6 Q F1 2.5
(3.1. Class)72 159.6 R(Object)2.5 E F0 1.149(Smalltalk or)97 175.2 R 1.149
(ganizes all of its classes as a tree hierarchy)-.18 F 6.149(.A)-.65 G 3.649
(tt)342.61 175.2 S 1.149(he very top of this hierarchy is class)351.819 175.2 R
2.835("Object". Following)72 187.2 R .335(somewhere below it are more speci\
\214c classes, such as the ones we've worked with\212)2.835 F .585
(strings, integers, arrays, and so forth.)72 199.2 R .585
(They are grouped together based on their similarities\212for instance,)5.585 F
1.324(types of objects which may be compared as greater or less than each othe\
r fall under a class known as)72 211.2 R("Magnitude".)72 223.2 Q 1.041(One of \
the \214rst tasks when creating a new object is to \214gure out where within t\
his hierarchy your)97 238.8 R .442(object falls.)72 250.8 R .442(Coming up wit\
h an answer to this problem is at least as much art as science, and there are \
no)5.442 F .786(hard-and-fast rules to nail it down.)72 262.8 R -.8(We)5.785 G
.785('ll take a look at three kinds of objects to give you a feel for how).8 F
(this or)72 274.8 Q(ganization matters.)-.18 E F1 2.5(3.2. Animals)72 298.8 R
F0 .006(Imagine that we have three kinds of objects, representing "Animals", "\
Parrots", and "Pigs".)97 314.4 R .006(Our mes-)5.006 F .134
(sages will be "eat", "sing", and "snort".)72 326.4 R .134
(Our \214rst pass at inserting these objects into the Smalltalk hierarchy)5.134
F(would or)72 338.4 Q(ganize them like:)-.18 E(Object)108 356.4 Q(Animals)133
368.4 Q(Parrots)133 380.4 Q(Pigs)133 392.4 Q .505(This means that Animals, Par\
rots, and Pigs are all direct descendants of "Object", and are not descendants)
72 410.4 R(of each other)72 422.4 Q(.)-.55 E
(Now we must de\214ne how each animal responds to each kind of message.)97 438
Q(Animals)133 456 Q(eat--Say "I have now eaten")158 468 Q(sing--Error)158 480 Q
(snort--Error)158 492 Q(Parrots)133 504 Q(eat--Say "I have now eaten")158 516 Q
(sing--Say "T)158 528 Q(weet")-.7 E(snort--Error)158 540 Q(Pigs)133 552 Q
(eat--Say "I have now eaten")158 564 Q(sing--Error)158 576 Q(snort--Say "Oink")
158 588 Q .28(Notice how we kept having to indicate an action for "eat".)72 606
R .28(An experienced object designer would immedi-)5.28 F .492
(ately recognize this as a clue that we haven')72 618 R 2.993(ts)-.18 G .493
(et up our hierarchy correctly)261.483 618 R 5.493(.L)-.65 G(et')390.758 618 Q
2.993(st)-.55 G .493(ry a dif)410.421 618 R .493(ferent or)-.18 F(ganiza-)-.18
E(tion:)72 630 Q(Animals)133 648 Q(Parrots)158 660 Q(Pigs)183 672 Q .888
(That is, Parrots inherit from Animals, and Pigs from Parrots.)72 690 R .887
(Now Parrots inherit all of the actions from)5.888 F .431
(Animals, and Pigs from both Parrots)72 702 R/F2 10/Times-Italic@0 SF(and)2.931
E F0 2.931(Animals. Because)2.931 F .431
(of this inheritance, we may now de\214ne a new)2.931 F
(set of actions which spares us the redundancy of the previous set:)72 714 Q EP
%%Page: 9 9
BP/F0 10/Times-Roman@0 SF(-9-)282.17 48 Q(Animals)133 84 Q
(eat--Say "I have now eaten")158 96 Q(sing--Error)158 108 Q(snort--Error)158
120 Q(Parrots)133 132 Q(sing--Say "T)158 144 Q(weet")-.7 E(Pigs)133 156 Q
(snort--Say "Oink")158 168 Q 1.389(Because Parrots and Pigs both inherit from \
Animals, we have only had to de\214ne the "eat" action once.)72 186 R(However)
72 198 Q 3.449(,w)-.4 G 3.449(eh)121.419 198 S .949(ave made one mistake in ou\
r class setup\212what happens when we tell a Pig to "sing"?)134.308 198 R(It)
5.95 E(says "T)72 210 Q
(weet", because we have put Pigs as an inheritor of Parrots.)-.7 E(Let')5 E 2.5
(st)-.55 G(ry one \214nal or)365.52 210 Q(ganization:)-.18 E(Animals)133 228 Q
(Parrots)158 240 Q(Pigs)158 252 Q .107
(Now Parrots and Pigs inherit from Animals, but not from each other)72 270 R
5.107(.L)-.55 G(et')359.094 270 Q 2.607(sa)-.55 G .107
(lso de\214ne one \214nal pithy set of)380.031 270 R(actions:)72 282 Q(Animals)
133 300 Q(eat--Say "I have eaten")158 312 Q(Parrots)133 324 Q(sing--Say "T)158
336 Q(weet")-.7 E(Pigs)133 348 Q(snort--Say "Oink")158 360 Q .115
(The change is just to leave out messages which are inappropriate.)72 378 R
.115(If Smalltalk detects that a message is not)5.115 F .153(known by an objec\
t or any of its ancestors, it will automatically give an error\212so you don')
72 390 R 2.653(th)-.18 G .153(ave to do this)449.931 390 R .06
(sort of thing yourself.)72 402 R .06
(Notice that now sending "sing" to a Pig does indeed)5.06 F/F1 10
/Times-Italic@0 SF(not)2.56 E F0 .06(say "T)2.56 F .06
(weet"\212it will cause a)-.7 F(Smalltalk error instead.)72 414 Q/F2 10
/Times-Bold@0 SF 2.5(3.3. The)72 438 R(bottom line of the class hierar)2.5 E
(chy)-.18 E F0 .402(The goal of the class hierarchy is to allow you to or)97
453.6 R .402(ganize objects into a relationship which allows a)-.18 F .535
(particular object to)72 465.6 R F1(inherit)3.035 E F0 .535
(the code of its ancestors.)3.035 F .535(Once you have identi\214ed an ef)5.535
F .535(fective or)-.18 F .535(ganization of)-.18 F 1.239(types, you should \
\214nd that a particular technique need only be implemented once, then inherit\
ed by the)72 477.6 R .28(children below)72 489.6 R 5.28(.T)-.65 G .28
(his keeps your code smaller)145.23 489.6 R 2.78(,a)-.4 G .28
(nd allows you to \214x a bug in a particular algorithm in only)266.76 489.6 R
(once place\212then have all users of it just inherit the \214x.)72 501.6 Q -1
(Yo)97 517.2 S 2.623(uw)1 G .123
(ill \214nd your decisions for adding objects change as you gain experience.)
123.063 517.2 R .122(As you become more)5.122 F 1.231(familiar with the existi\
ng set of objects and messages, your selections will increasingly "\214t in" w\
ith the)72 529.2 R .745(existing ones.)72 541.2 R .745(But even a Smalltalk "p\
ro" stops and thinks carefully at this stage\212so don')5.745 F 3.244(tb)-.18 G
3.244(ed)455.302 541.2 S .744(aunted if)467.986 541.2 R
(your \214rst choices seem dif)72 553.2 Q(\214cult and error)-.18 E(-prone.)-.2
E EP
%%Page: 10 10
BP/F0 10/Times-Roman@0 SF(-10-)279.67 48 Q/F1 10/Times-Bold@0 SF 2.5(4. Cr)72
84 R(eating a new class of objects)-.18 E F0 -.4(Wi)97 99.6 S .24(th the basic\
 techniques presented in the preceding chapters, we're ready do our \214rst re\
al Smalltalk).4 F 4.255(program. In)72 111.6 R 1.755(this chapter we will cons\
truct three new types of objects \(known as "classes"\), using the)4.255 F .386
(Smalltalk technique of)72 123.6 R/F2 10/Times-Italic@0 SF(inheritance)2.886 E
F0 .387(to tie the classes together)2.886 F 2.887(,c)-.4 G .387
(reate new objects belonging to these classes)326.158 123.6 R
(\(known as creating)72 135.6 Q F2(instances)2.5 E F0
(of the class\), and send messages to these objects.)2.5 E -.8(We)97 151.2 S
.041
('ll exercise all this by implementing a toy home-\214nance accounting system.)
.8 F 1.64 -.8(We w)5.04 H .04(ill keep track of).8 F .105(our overall cash, an\
d will have special handling for our checking and savings accounts.)72 163.2 R
.105(From this point on,)5.105 F .577
(we will be de\214ning classes which will be used in future chapters.)72 175.2
R .576(Since you will probably not be running)5.577 F .124
(this whole tutorial in one Smalltalk session, it would be nice to save of)72
187.2 R 2.624(ft)-.18 G .124(he state of Smalltalk and resume it)364.936 187.2
R(without having to retype all the previous examples.)72 199.2 Q 1.4 -.7(To s)5
H(ave the current state of GNU Smalltalk, type:).7 E
(Smalltalk snapshot: 'myimage.img' !)108 217.2 Q
(and from your shell, to later restart Smalltalk from this "snapshot":)72 235.2
Q 2.5(%m)108 253.2 S(st -I myimage.img)126.61 253.2 Q .389(Such a snapshot cur\
rently takes a little over 300K bytes, and contains all variables, classes, an\
d de\214nitions)72 271.2 R(you have added.)72 283.2 Q F1 2.5(4.1. Cr)72 307.2 R
(eating a new class)-.18 E F0 .353(Guess how you create a new class?)97 322.8 R
.354(This should be getting monotonous by now\212by sending a mes-)5.354 F
(sage to an object.)72 334.8 Q(The way we create our \214rst "custom" class is\
 by sending the following message:)5 E(Object subclass: #Account)108 352.8 Q
(instanceV)133 364.8 Q(ariableNames: 'balance')-1.11 E(classV)133 376.8 Q
(ariableNames: ')-1.11 E(')-.74 E(poolDictionaries: ')133 388.8 Q(')-.74 E
(category: nil !)133 400.8 Q .131(Quite a mouthful, isn')72 418.8 R 2.631(ti)
-.18 G 2.631(t? Most)168.734 418.8 R .131
(people end up customizing their editor to pop this up at a push of a button.)
2.631 F .015(But conceptually)72 430.8 R 2.515(,i)-.65 G 2.516(ti)147.21 430.8
S(sn')155.286 430.8 Q 2.516(tr)-.18 G .016(eally that bad.)175.952 430.8 R .016
(The Smalltalk variable "Object" is bound to the grand-daddy of all)5.016 F .49
(classes on the system.)72 442.8 R .49(What we're doing here is telling the "O\
bject" class that we want to add to it a sub-)5.49 F 1.08
(class known as "Account".)72 454.8 R 1.081
(The other parts of the message can be ignored, but "instanceV)6.08 F
(ariableNames:)-1.11 E('balance'" tells it that each object in this subclass w\
ill have a hidden variable named "balance".)72 466.8 Q/F3 7/Times-Roman@0 SF(9)
452.5 462.7 Q F1 2.5(4.2. Documenting)72 490.8 R(the class)2.5 E F0 .876
(The next step is to associate a description with the class.)97 506.4 R -1(Yo)
5.876 G 3.376(ud)1 G 3.376(ot)361.482 506.4 S .877
(his by sending a message to the)372.638 506.4 R(new class:)72 518.4 Q
(Account comment: 'I represent a place to deposit and withdraw money' !)108
536.4 Q 2.621(Ad)72 554.4 S .121(escription is associated with)86.841 554.4 R
F2(every)2.621 E F0 .121(Smalltalk class, and it')2.621 F 2.621(sc)-.55 G .12
(onsidered good form to add a description to)328.46 554.4 R
(each new class you de\214ne.)72 566.4 Q 1.4 -.7(To g)5 H
(et the description for a given class:).7 E(\(Account comment\) printNl !)108
584.4 Q(And your string is printed back to you.)72 602.4 Q -.35(Tr)5 G 2.5(yt)
.35 G(his with class Integer)251.36 602.4 Q 2.5(,t)-.4 G(oo:)343.45 602.4 Q
(\(Integer comment\) printNl !)108 620.4 Q F1 2.5(4.3. De\214ning)72 650.4 R
2.5(am)2.5 G(ethod for the class)146.45 650.4 Q F0 2.083 -.8(We h)97 666 T .483
(ave created a class, but it isn').8 F 2.983(tr)-.18 G .483
(eady to do any work for us\212we have to de\214ne some messages)247.344 666 R
(which the class can process \214rst.)72 678 Q -.8(We)5 G
('ll start at the beginning by de\214ning methods for instance creation:).8 E
.32 LW 144 698.2 72 698.2 DL/F4 5.6/Times-Roman@0 SF(9)82 706.72 Q/F5 8
/Times-Roman@0 SF .723
(In case you're having a hard time making out the font, the "')2 3.28 N('"')
-.592 E 2.722(sa)-.44 G .722(fter classV)306.09 710 R .722
(ariableNames: and poolDic-)-.888 F
(tionaries: are a pair of single quotes\212an empty string.)72 720 Q EP
%%Page: 11 11
BP/F0 10/Times-Roman@0 SF(-1)279.855 48 Q(1-)-.37 E
(!Account class methodsFor: 'instance creation'!)108 84 Q(new)108 108 Q 2.5
(|r|)133 120 S 2.5(r:)133 144 S 2.5(=s)141.61 144 S(uper new)153.64 144 Q(.)
-.65 E 2.5(ri)133 156 S(nit.)141.61 156 Q(^r)133 168 Q(!!)108 180 Q .346
(Again, programming your editor to do this is recommended.)72 198 R .345
(The important points about this are "Account)5.345 F .326(class", which means\
 that we are de\214ning messages which are to be sent to the Account class its\
elf.)72 210 R("meth-)5.326 E .601(odsFor: 'instance creation'" is more documen\
tation support; it says that all of the methods de\214ned will be)72 222 R
1.561(to support creating objects of type Account.)72 234 R(Finally)6.561 E
4.061(,t)-.65 G 1.561(he text starting with "new" and ending with "!!")300.208
234 R 1.059(de\214ned what action to take for the message "new".)72 246 R 1.058
(When you enter this de\214nition, GNU Smalltalk will)6.059 F .014
(simply give you another prompt.)72 258 R -1(Yo)5.014 G 2.514(um)1 G .015
(ethod has been compiled in and is ready for use.)234.414 258 R .015
(GNU Smalltalk is)5.015 F(pretty quiet on successful method de\214nitions--but\
 you'll get plenty of error messages if there')72 270 Q 2.5(sap)-.55 G(roblem!)
464.45 270 Q .167(This is also the \214rst example where we've had to use more\
 than one statement, and thus a good place)97 285.6 R .224
(to present the statement separator\212the ".".)72 297.6 R .224
(Like Pascal, and unlike C, statements are)5.224 F/F1 10/Times-Italic@0 SF
(separated)2.724 E F0 .224(rather than)2.724 F 2.812(terminated. Thus)72 309.6
R .311(you need only use the "." when you have \214nished one statement and ar\
e starting another)2.812 F(.)-.55 E
(This is why our last statement, "^r", does not have a "." following.)72 321.6
Q .268(The best way to describe how this method works is to step through it.)97
337.2 R .269(Imagine we sent a message to)5.269 F
(the new class Account with the command line:)72 349.2 Q(Account new !)108
367.2 Q .706("Account" receives the message "new" and looks up how to process \
this message.)97 388.8 R .706(It \214nds our new)5.706 F .378
(de\214nition, and starts running it.)72 400.8 R .378
(The \214rst line, "| r |", creates a)5.378 F F1 .379(local variable)2.879 F F0
.379(named "r" which can be used)2.879 F 1.253
(as a placeholder for the objects we create.)72 412.8 R 1.252
("r" will go away as soon as the message is done being pro-)6.253 F(cessed.)72
424.8 Q .663(The \214rst real step is to actually create the object.)97 440.4 R
.664(The line "r := super new" does this using a fancy)5.663 F 2.953
(trick. The)72 452.4 R .453(word "super" stands for the same object that the m\
essage "new" was originally sent to \(remem-)2.953 F(ber\212it')72 464.4 Q
2.848(s")-.55 G .348(Account"\), except that when Smalltalk goes to search for\
 the methods, he starts one level)113.928 464.4 R F1(higher)2.849 E F0 1.006
(up in the hierarchy than the current level.)72 476.4 R 1.006
(So for a method in the Account class, this is the Object class)6.006 F 1.659(\
\(because the class Account inherits from is Object\212go back and look at how\
 we created the Account)72 488.4 R .048(class\), and the Object class' methods\
 then execute some code in response to the "new" message.)72 500.4 R .047
(As it turns)5.047 F(out, Object will do the actual creation of the object whe\
n sent a "new" message.)72 512.4 Q 1.005(One more time in slow motion: the Acc\
ount method "new" wants to do some \214ddling about when)97 528 R .271(new obj\
ects are created, but he also wants to let his parent do some work with a meth\
od of the)72 540 R F1 .27(same name.)2.771 F F0 .489(By saying "r := super new\
" he is letting his parent create the object, and then he is attaching it to t\
he vari-)72 552 R .262(able "r".)72 564 R .262(So after this line of code exec\
utes, we have a brand new object of type Account, and "r" is bound)5.262 F .9
(to it.)72 576 R -1(Yo)5.9 G 3.4(uw)1 G .9(ill understand this better as time \
goes on, but for now scratch your head once, accept it as a)123.98 576 R
(recipe, and keep going.)72 588 Q 1.862 -.8(We h)97 603.6 T .262
(ave the new object, but we haven').8 F 2.761(ts)-.18 G .261
(et it up correctly)265.012 603.6 R 5.261(.R)-.65 G .261
(emember the hidden variable "balance")345.396 603.6 R .921
(which we saw in the beginning of this chapter?)72 615.6 R .921
("super new" gives us the object with the "balance" \214eld)5.921 F .161
(containing nothing\212we want our balance \214eld to start at 0.)72 627.6 R/F2
7/Times-Roman@0 SF(10)311.199 623.5 Q F0 .161
(So what we need to do is ask the object to set)320.86 627.6 R 1.627
(itself up.)72 639.6 R 1.628
(By saying "r init", we are sending the "init" message to our new Account. W)
6.627 F 1.628(e'll de\214ne this)-.8 F .669(method in the next section\212for \
now just assume that sending the "init" message will get our Account set)72
651.6 R(up.)72 663.6 Q(Finally)97 679.2 Q 2.946(,w)-.65 G 2.946(es)137.356
679.2 S .446(ay "^r".)148.632 679.2 R .447
(In English, this is "return what r is attached to".)5.446 F .447
(This means that whoever sent)5.447 F 1.558
("Account" the "new" message will get back this brand new account.)72 691.2 R
1.557(At the same time, our temporary)6.557 F .32 LW 144 699.2 72 699.2 DL/F3
5.6/Times-Roman@0 SF(10)82 707.72 Q/F4 8/Times-Roman@0 SF .635
(And unlike C, Smalltalk draws a distinction between 0 and nil.)2 3.28 N .635
(nil is the "nothing" object, and you will)4.635 F .309
(receive an error if you try to do, say)72 721 R 2.309(,m)-.52 G .309
(ath on it.)199.341 721 R .31
(It really does matter that we initialize our instance variable to)4.309 F
(the number 0 if we wish to do math on it in the future.)72 731 Q EP
%%Page: 12 12
BP/F0 10/Times-Roman@0 SF(-12-)279.67 48 Q(variable "r" ceases to exist.)72 84
Q/F1 10/Times-Bold@0 SF 2.5(4.4. De\214ning)72 108 R(an instance method)2.5 E
F0 1.69 -.8(We n)97 123.6 T .091(eed to de\214ne the "init" method for our Acc\
ount objects, so that our "new" method de\214ned above).8 F(will work.)72 135.6
Q(Here')5 E 2.5(st)-.55 G(he Smalltalk code:)149.49 135.6 Q
(!Account methodsFor: 'instance initialization'!)108 153.6 Q(init)108 165.6 Q
(balance := 0)133 177.6 Q(!!)108 189.6 Q .642(It looks quite a bit like the pr\
evious method de\214nition, except that the \214rst one said "Account class me\
th-)72 207.6 R .814(odsFor:...", and ours says "Account methodsFor:...".)72
219.6 R .814(The dif)5.814 F .814
(ference is that the \214rst one de\214ned a method)-.18 F 1.374(for messages \
sent directly to "Account", but the second one is for messages which are sent \
to Account)72 231.6 R(objects)72 243.6 Q/F2 10/Times-Italic@0 SF(once they ar)
2.5 E 2.5(ec)-.37 G -.37(re)163.27 243.6 S(ated.).37 E F0 .323
(The method named "init" has only one line, "balance := 0".)97 259.2 R .323
(This initializes the hidden variable "bal-)5.323 F .016
(ance" \(actually called an)72 271.2 R F2 .016(instance variable)2.516 F F0
2.515(\)t)2.515 G 2.515(oz)253.09 271.2 S .015
(ero, which makes sense for an account balance.)265.045 271.2 R .015
(Notice that)5.015 F 1.148(the method doesn')72 283.2 R 3.648(te)-.18 G 1.148
(nd with "^r" or anything like it\212this method doesn')158.864 283.2 R 3.648
(tr)-.18 G 1.149(eturn a value to the message)385.226 283.2 R(sender)72 295.2 Q
5.449(.W)-.55 G .449(hen you do not specify a return value, Smalltalk defaults\
 the return value to the object currently)114.939 295.2 R 3.274(executing. For)
72 307.2 R .774(clarity of programming, you might consider explicitly returnin\
g "self" in cases where you)3.274 F(intend the return value to be used.)72
319.2 Q/F3 7/Times-Roman@0 SF -.259(11)207.81 315.1 S F1 2.5(4.5. Looking)72
343.2 R(at our Account)2.5 E F0(Let')97 358.8 Q 2.5(sc)-.55 G(reate an)123.94
358.8 Q F2(instance)2.5 E F0(of class Account:)2.5 E
(Smalltalk at: #a put: \(Account new\) !)108 376.8 Q 1.082
(Can you guess what this does?)72 394.8 R 1.083
(The "Smalltalk at: #a put: <something>" hearkens back to chapter 2\212it)6.082
F .917(creates a Smalltalk variable.)72 406.8 R .917
(And the "Account new" creates a new Account, and returns it.)5.917 F .917
(So this line)5.917 F(creates a Smalltalk variable named "a", and attaches it \
to a new Account\212all in one line.)72 418.8 Q(Let')97 434.4 Q 2.5(st)-.55 G
(ake a look at the Account object we just created:)122.28 434.4 Q 2.5(ap)108
452.4 S(rintNl !)119.94 452.4 Q(It prints:)72 470.4 Q(an Account)108 488.4 Q
.154(Hmmm... not very informative.)72 506.4 R .154
(The problem is that we didn')5.154 F 2.654(tt)-.18 G .155
(ell our Account how to print itself, so we're)327.51 506.4 R .726(just gettin\
g the default system "printNl" method\212which tells what the object)72 518.4 R
F2(is,)3.226 E F0 .726(but not what it)3.226 F F2(contains.)3.226 E F0
(So clearly we must add such a method:)72 530.4 Q
(!Account methodsFor: 'printing'!)108 548.4 Q(printOn: stream)108 560.4 Q
(super printOn: stream.)133 572.4 Q 2.5('w)133 584.4 S
(ith balance: ' printOn: stream.)146.05 584.4 Q(balance printOn: stream)133
596.4 Q(!!)108 608.4 Q(Now give it a try again:)72 626.4 Q 2.5(ap)108 644.4 S
(rintNl !)119.94 644.4 Q(which prints:)72 662.4 Q(an Account with balance: 0)
108 680.4 Q .119(This may seem a little strange.)72 698.4 R 1.719 -.8(We a)
5.119 H .12
(dded a new method, printOn:, and our printNl message starts behaving).8 F .32
LW 144 706.4 72 706.4 DL/F4 5.6/Times-Roman@0 SF -.207(11)82 714.92 S/F5 8
/Times-Roman@0 SF .514(And why didn')2.207 3.28 N 2.514(tt)-.144 G .514
(he designers default the return value to nil?)145.679 718.2 R .514
(Perhaps they didn')4.514 F 2.514(ta)-.144 G .513(ppreciate the value of)
361.373 718.2 R(void functions.)72 728.2 Q
(After all, at the time Smalltalk was being designed, C didn')4 E 2(te)-.144 G
(ven have a void data type.)321.84 728.2 Q EP
%%Page: 13 13
BP/F0 10/Times-Roman@0 SF(-13-)279.67 48 Q(dif)72 84 Q(ferently)-.18 E 5.6(.I)
-.65 G 3.1(tt)124.81 84 S .599(urns out that the printOn: message is the centr\
al printing function\212once you've de\214ned it,)133.47 84 R .541
(all of the other printing methods end up calling it.)72 96 R .541(Its ar)5.541
F .542(gument is a place to print to\212quite often it is the)-.18 F .849
(variable "stdout".)72 108 R .848(This variable is usually hooked to your term\
inal, and thus you get the printout to your)5.849 F(screen.)72 120 Q .833(The \
"super printOn: stream" lets our parent do what it did before\212print out wha\
t our type is.)97 135.6 R(The)5.834 E .803
("an Account" part of the printout came from this.)72 147.6 R .803
("' with balance: ' printOn: stream" creates the string ")5.803 F .092
(with balance: ", and prints it out to the stream, too.)72 159.6 R(Finally)
5.092 E 2.593(,")-.65 G .093(balance printOn: stream" asks whatever object)
317.555 159.6 R .259
(is hooked to the "balance" variable to print itself to the stream.)72 171.6 R
1.858 -.8(We s)5.259 H .258(et "balance" to 0, so the 0 gets printed).8 F(out.)
72 183.6 Q/F1 10/Times-Bold@0 SF 2.5(4.6. Moving)72 207.6 R(money ar)2.5 E
(ound)-.18 E F0 2.978 -.8(We c)97 223.2 T 1.378
(an now create accounts, and look at them.).8 F 1.378
(As it stands, though, our balance will always be)6.378 F(0\212what a tragedy!)
72 235.2 Q(Our \214nal methods will let us deposit and spend money)5 E 5(.T)
-.65 G(hey're very simple:)385.21 235.2 Q(!Account methodsFor: 'moving money'!)
108 253.2 Q(spend: amount)108 265.2 Q(balance := balance - amount)133 277.2 Q
(!)108 289.2 Q(deposit: amount)108 301.2 Q(balance := balance + amount)133
313.2 Q(!!)108 325.2 Q -.4(Wi)72 343.2 S
(th these methods you can now deposit and spend amounts of money).4 E 5(.T)-.65
G(ry these operations:)368.35 343.2 Q 2.5(ad)108 361.2 S(eposit: 125!)119.94
361.2 Q 2.5(ad)108 373.2 S(eposit: 20!)119.94 373.2 Q 2.5(ap)108 385.2 S
(rintNl!)119.94 385.2 Q 2.5(as)108 397.2 S(pend: 10!)118.83 397.2 Q 2.5(ap)108
409.2 S(rintNl!)119.94 409.2 Q F1 2.5(4.7. Specialized)72 439.2 R(objects)2.5 E
F0 3.009 -.8(We n)97 454.8 T 1.409(ow have a generic concept, "Account".).8 F
3.009 -.8(We c)6.409 H 1.408(an create them, check their balance, and move).8 F
.524(money in and out of them.)72 466.8 R .524
(They provide a good foundation, but leave out important information that par)
5.524 F(-)-.2 E .041(ticular types of accounts might want.)72 478.8 R .041
(In the next chapter)5.041 F 2.541(,w)-.4 G .041
(e'll take a look at \214xing this problem using)311.691 478.8 R/F2 10
/Times-Italic@0 SF(sub-)2.541 E(classes.)72 490.8 Q EP
%%Page: 14 14
BP/F0 10/Times-Roman@0 SF(-14-)279.67 48 Q/F1 10/Times-Bold@0 SF 2.5(5. T)72 84
R(wo Subclasses for the Account Class)-.74 E F0 .506(This chapter continues fr\
om the previous chapter in demonstrating how one creates classes and sub-)97
99.6 R .425(classes in Smalltalk.)72 111.6 R .424(In this chapter we will crea\
te two special subclasses of Account, known as Checking)5.425 F .048
(and Savings.)72 123.6 R 1.649 -.8(We w)5.048 H .049(ill continue to).8 F/F2 10
/Times-Italic@0 SF(inherit)2.549 E F0 .049
(the capabilities of Account, but will tailor the two kinds of objects)2.549 F
(to better manage particular kinds of accounts.)72 135.6 Q F1 2.5(5.1. The)72
159.6 R(Savings class)2.5 E F0 2.166 -.8(We c)97 175.2 T .566
(reate the Savings class as a subclass of Account.).8 F .565(It holds money)
5.566 F 3.065(,j)-.65 G .565(ust like an Account, but has)390.075 175.2 R .399
(an additional property that we will model: it is paid interest based on its b\
alance.)72 187.2 R 2 -.8(We c)5.4 H .4(reate the class Sav-).8 F
(ings as a subclass of Account:)72 199.2 Q(Account subclass: #Savings)108 217.2
Q(instanceV)133 229.2 Q(ariableNames: 'interest')-1.11 E(classV)133 241.2 Q
(ariableNames: ')-1.11 E(')-.74 E(poolDictionaries: ')133 253.2 Q(')-.74 E
(category: nil !)133 265.2 Q 2.453
(The instance variable "interest" will accumulate interest paid.)72 283.2 R
2.453(Thus, in addition to the "spend:" and)7.453 F .433("deposit:" messages w\
hich we inherit from our parent, Account, we will need to de\214ne a method to\
 add in)72 295.2 R F2(inter)72 307.2 Q(est)-.37 E F0 1.007
(deposits, and a way to clear the interest variable \(which we would do yearly)
3.507 F 3.506(,a)-.65 G 1.006(fter we have paid)431.842 307.2 R 2.845
(taxes\). W)72 319.2 R 2.845<658c>-.8 G .346(rst de\214ne a method for allocat\
ing a new account\212we need to make sure that the interest \214eld)125.21
319.2 R(starts at 0.)72 331.2 Q(!Savings methodsFor: 'initialization'!)108
349.2 Q(init)108 361.2 Q(interest := 0.)133 373.2 Q 2.5(^s)133 385.2 S
(uper init)142.72 385.2 Q(!!)108 397.2 Q 1.115(Recall that the parent took car\
e of the "new" message, and created a new object of the appropriate size.)72
415.2 R .309
(After creation, the parent also sent an "init" message to the new object.)72
427.2 R .309(As a subclass of Account, the new)5.309 F .919(object will receiv\
e the "init" message \214rst; it sets up its own instance variable, and then p\
asses the "init")72 439.2 R(message up the chain to let its parent take care o\
f its part of the initialization.)72 451.2 Q -.4(Wi)97 466.8 S .399(th our new\
 "Savings" account created, we can de\214ne two methods for dealing specially \
with such).4 F(an account:)72 478.8 Q(!Savings methodsFor: 'interest'!)108
496.8 Q(interest: amount)108 508.8 Q(interest := interest + amount.)133 520.8 Q
(self deposit: amount)133 532.8 Q(!)108 544.8 Q(clearInterest)108 556.8 Q 2.5
(|o)133 568.8 S(ldinterest |)142.5 568.8 Q(oldinterest := interest.)133 592.8 Q
(interest := 0.)133 604.8 Q(^oldinterest)133 616.8 Q(!!)108 628.8 Q 1.316(The \
\214rst method says that we add the "amount" to our running total of interest.)
72 646.8 R 1.315(The line "self deposit:)6.315 F 1.689(amount" tells Smalltalk\
 to send ourselves a message, in this case "deposit: amount".)72 658.8 R 1.69
(This then causes)6.69 F 1.873(Smalltalk to look up the method for "deposit:",\
 which it \214nds in our parent, Account.)72 670.8 R 1.872(Executing this)6.872
F(method then updates our overall balance.)72 682.8 Q/F3 7/Times-Roman@0 SF(12)
236.41 678.7 Q .32 LW 144 690.8 72 690.8 DL/F4 5.6/Times-Roman@0 SF(12)82
699.32 Q/F5 8/Times-Roman@0 SF .073("self" is much like "super", except that "\
self" will start looking for a method at the bottom of the type hier)2 3.28 N
(-)-.16 E .504(archy for the object, but "super" starts looking one level)72
712.6 R/F6 8/Times-Italic@0 SF(up)2.504 E F5 .504(from the current level.)2.504
F .504(Thus, using "super")4.504 F F6(for)2.504 E(ces)-.296 E F5(inheritance, \
but "self" will \214nd the \214rst de\214nition of the message which it can.)72
722.6 Q EP
%%Page: 15 15
BP/F0 10/Times-Roman@0 SF(-15-)279.67 48 Q 1.234(One may wonder why we don')97
84 R 3.734(tj)-.18 G 1.235
(ust replace this with the simpler "balance := balance + amount".)235.864 84 R
.043(The answer lies in one of the philosophies of object-oriented languages i\
n general, and Smalltalk in particu-)72 96 R(lar)72 108 Q 6.335(.O)-.55 G 1.336
(ur goal is to encode a technique for doing something)98.055 108 R/F1 10
/Times-Italic@0 SF(once)3.836 E F0(only)3.836 E 3.836(,a)-.65 G 1.336
(nd then re-using that technique)374.786 108 R .452(when needed.)72 120 R .452
(If we had directly encoded "balance := balance + amount" here, there would ha\
ve been)5.452 F F1(two)2.951 E F0 .558
(places that knew how to update the balance from a deposit.)72 132 R .558
(This may seem like a useless dif)5.558 F 3.058(ference. But)-.18 F .379
(consider if later we decided to start counting the number of deposits made.)72
144 R .379(If we had encoded "balance :=)5.379 F .856(balance + amount" in eac\
h place that needed to update the balance, we would have to hunt each of them)
72 156 R 1.252(down in order to update the count of deposits.)72 168 R 1.252
(By sending "self" the message "deposit:", we need only)6.252 F .676
(update this method)72 180 R F1(once;)3.176 E F0 .676(each sender of this mess\
age would then automatically get the correct up-to-date)3.176 F
(technique for updating the balance.)72 192 Q .526
(The second method, "clearInterest", is simpler)97 207.6 R 5.526(.W)-.55 G
3.026(ec)300.818 207.6 S .526(reate a temporary variable "oldinterest" to hold)
312.724 207.6 R .332(the current amount of interest.)72 219.6 R 1.932 -.8(We t)
5.332 H .333(hen zero out our interest to start the year afresh.).8 F(Finally)
5.333 E 2.833(,w)-.65 G 2.833(er)457.794 219.6 S .333(eturn the)468.397 219.6 R
(old interest as our result, so that our year)72 231.6 Q
(-end accountant can see how much we made.)-.2 E/F2 7/Times-Roman@0 SF(13)
415.33 227.5 Q/F3 10/Times-Bold@0 SF 2.5(5.2. The)72 255.6 R(Checking class)2.5
E F0(Our second subclass of Account represents a checking account.)97 271.2 Q
1.6 -.8(We w)5 H(ill keep track of two facets:).8 E 2.5(-W)133 289.2 S
(hat check number we are on)148.27 289.2 Q 2.5(-H)133 301.2 S
(ow many checks we have left in our checkbook)146.05 301.2 Q 1.6 -.8(We w)72
319.2 T(ill de\214ne this as another subclass of Account:).8 E
(Account subclass: #Checking)108 337.2 Q(instanceV)133 349.2 Q
(ariableNames: 'checknum checksleft')-1.11 E(classV)133 361.2 Q
(ariableNames: ')-1.11 E(')-.74 E(poolDictionaries: ')133 373.2 Q(')-.74 E
(category: nil !)133 385.2 Q 2.363 -.8(We h)72 403.2 T .763(ave two instance v\
ariables, but we really only need to initialize one of them\212if there are no\
 checks).8 F 1.114(left, the current check number can')72 415.2 R 3.614(tm)-.18
G(atter)231.514 415.2 Q 6.114(.R)-.55 G(emember)264.018 415.2 Q 3.614(,o)-.4 G
1.115(ur parent class Account will send us the "init")311.942 415.2 R 2.95
(message. W)72 427.2 R 2.95(ed)-.8 G(on')134.86 427.2 Q 2.95(tn)-.18 G .449
(eed our own class-speci\214c "new" function, since our parent')158.74 427.2 R
2.949(sw)-.55 G .449(ill provide everything)416.442 427.2 R(we need.)72 439.2 Q
(!Checking methodsFor: 'Initialization'!)108 457.2 Q(init)108 469.2 Q
(checksleft := 0.)133 481.2 Q(^super init)133 493.2 Q(!!)108 505.2 Q 1.951
(As in Savings, we inherit most of abilities from our superclass, Account.)72
523.2 R 1.951(For initialization, we leave)6.951 F .432
("checknum" alone, but set the number of checks in our checkbook to zero.)72
535.2 R 2.031 -.8(We \214)5.431 H .431(nish by letting our parent).8 F
(class do its own initialization.)72 547.2 Q F3 2.5(5.3. W)72 571.2 R
(riting checks)-.18 E F0 2.919 -.8(We w)97 586.8 T 1.319(ill \214nish this cha\
pter by adding a method for spending money through our checkbook.).8 F(The)6.32
E(mechanics of taking a message and updating variables should be familiar:)72
598.8 Q .32 LW 144 688.2 72 688.2 DL/F4 5.6/Times-Roman@0 SF(13)82 696.72 Q/F5
8/Times-Roman@0 SF .253(Of course, in a real accounting system we would never \
discard such information\212we'd probably throw it)2 3.28 N .095
(into a Dictionary object, indexed by the year that we're \214nishing.)72 710 R
.096(The ambitious might want to try their hand at)4.096 F
(implementing such an enhancement.)72 720 Q EP
%%Page: 16 16
BP/F0 10/Times-Roman@0 SF(-16-)279.67 48 Q(!Checking methodsFor: ')108 84 Q
(spending'!)-.55 E(newChecks: number count: checkcount)108 96 Q
(checknum := number)133 108 Q(.)-.55 E(checksleft := checkcount)133 120 Q(!)108
132 Q(writeCheck: amount)108 156 Q 2.5(|n)133 168 S(um |)142.5 168 Q
(num := checknum.)133 192 Q(checknum := checknum + 1.)133 204 Q
(checksleft := checksleft - 1.)133 216 Q(self spend: amount.)133 228 Q 2.5(^n)
133 240 S(um)143.83 240 Q(!!)108 252 Q 1.35
("newChecks:" \214lls our checkbook with checks.)72 270 R 2.95 -.8(We r)6.35 H
1.35(ecord what check number we're starting with, and).8 F
(update the count of the number of checks in the checkbook.)72 282 Q .48
("writeCheck:" merely notes the next check number)97 297.6 R 2.981(,t)-.4 G
.481(hen bumps up the check number)311.972 297.6 R 2.981(,a)-.4 G .481
(nd down the)453.598 297.6 R 1.328(check count.)72 309.6 R 1.327(The message "\
self spend: amount" resends the message "spend:" to our own object.)6.328 F
(This)6.327 E .915(causes its method to be looked up by Smalltalk.)72 321.6 R
.916(The method is then found in our parent class, Account,)5.916 F
(and our balance is then updated to re\215ect our spending.)72 333.6 Q -1(Yo)97
349.2 S 2.5(uc)1 G(an try the following examples:)120.16 349.2 Q
(Smalltalk at: #c put: \(Checking new\) !)108 367.2 Q 2.5(cp)108 379.2 S
(rintNl !)119.94 379.2 Q 2.5(cd)108 391.2 S(eposit: 250 !)119.94 391.2 Q 2.5
(cp)108 403.2 S(rintNl !)119.94 403.2 Q 2.5(cn)108 415.2 S
(ewChecks: 100 count: 50 !)119.94 415.2 Q 2.5(cp)108 427.2 S(rintNl !)119.94
427.2 Q(\(c writeCheck: 32\) printNl !)108 439.2 Q 2.5(cp)108 451.2 S(rintNl !)
119.94 451.2 Q .284(For amusement, you might want to add a printOn: message to\
 the checking class so you can see the check-)72 469.2 R
(ing-speci\214c information.)72 481.2 Q .891(In this chapter)97 496.8 R 3.391
(,y)-.4 G .892(ou have seen how to create)166.483 496.8 R/F1 10/Times-Italic@0
SF(subclasses)3.392 E F0 .892(of your own classes.)3.392 F -1(Yo)5.892 G 3.392
(uh)1 G .892(ave added new)442.796 496.8 R 1.635(methods, and)72 508.8 R F1
(inherited)4.135 E F0 1.635(methods from the parent classes.)4.135 F 1.635
(These techniques provide the majority of the)6.635 F .67
(structure for building solutions to problems.)72 520.8 R .67
(In the following chapters we will be \214lling in details on fur)5.67 F(-)-.2
E(ther language mechanisms and types, and providing details on how to debug so\
ftware written in Smalltalk.)72 532.8 Q EP
%%Page: 17 17
BP/F0 10/Times-Roman@0 SF(-17-)279.67 48 Q/F1 10/Times-Bold@0 SF 2.5(6. Code)72
84 R(blocks)2.5 E F0 1.978(The Account/Saving/Checking example from the last c\
hapter has several de\214ciencies.)97 99.6 R 1.978(It has no)6.978 F 1.732
(record of the checks and their values.)72 111.6 R -.8(Wo)6.732 G 1.732
(rse, it allows you to write a check when there are no more).8 F .164(checks\
\212the Integer value for the number of checks will just calmly go negative!)72
123.6 R 1.563 -.7(To \214)5.163 H 2.663(xt).7 G .163(hese problems we)432.024
123.6 R(will need to introduce more sophisticated control structures.)72 135.6
Q F1 2.5(6.1. Conditions)72 159.6 R(and decision making)2.5 E F0(Let')97 175.2
Q 2.669<738c>-.55 G .169
(rst add some code to keep you from writing too many checks.)125.229 175.2 R
1.77 -.8(We w)5.17 H .17(ill simply update our cur).8 F(-)-.2 E 1.004(rent met\
hod for the Checking class; if you have entered the methods from the previous \
chapters, the old)72 187.2 R(de\214nition will be overridden by this new one.)
72 199.2 Q(!Checking methodsFor: ')108 217.2 Q(spending'!)-.55 E
(writeCheck: amount)108 229.2 Q 2.5(|n)133 241.2 S(um |)142.5 241.2 Q
(\(checksleft < 1\))133 265.2 Q(ifT)158 277.2 Q
(rue: [ ^self error: 'Out of checks' ].)-.35 E(num := checknum.)133 289.2 Q
(checknum := checknum + 1.)133 301.2 Q(checksleft := checksleft - 1.)133 313.2
Q(self spend: amount)133 325.2 Q 2.5(^n)133 337.2 S(um)143.83 337.2 Q(!!)108
349.2 Q(The two new lines are:)72 367.2 Q(\(checksleft < 1\))108 385.2 Q(ifT)
133 397.2 Q(rue: [ ^self error: 'Out of checks' ].)-.35 E .609
(At \214rst glance, this appears to be a completely new structure.)72 415.2 R
.609(Look again!)5.609 F .609(The only new construct is the)5.609 F
(square brackets.)72 427.2 Q .251(The \214rst line is a simple)97 442.8 R/F2 10
/Times-Italic@0 SF(boolean)2.751 E F0 2.751(expression. "checksleft")2.751 F
.251(is our integer)2.751 F 2.75(,a)-.4 G 2.75(si)396.9 442.8 S .25
(nitialized by our Check-)406.32 442.8 R .432(ing class.)72 454.8 R .433
(It is sent the message "<", and the ar)5.432 F .433(gument 1.)-.18 F .433
(The current number bound to "checksleft" com-)5.433 F(pares itself against 1,\
 and returns a boolean object telling whether it is less than 1.)72 466.8 Q
.139
(Now this boolean\212being either true or false\212is sent the message "IfT)97
482.4 R .138(rue:", with an ar)-.35 F .138(gument which)-.18 F .212
(is called a)72 494.4 R F2 .212(code block.)2.712 F F0 2.712(Ac)5.212 G .213
(ode block is an object, just like any other)180.462 494.4 R 5.213(.B)-.55 G
.213(ut instead of holding a number)360.149 494.4 R 2.713(,o)-.4 G 2.713(ra)
493.517 494.4 S(Set, it holds executable statements.)72 506.4 Q .225
(So what does a boolean)97 522 R F2(do)2.725 E F0 .225
(with a code block which is an ar)2.725 F .224(gument to a ifT)-.18 F .224
(rue: message?)-.35 F .224(It depends)5.224 F .517(on which boolean!)72 534 R
.517(If the object is the "true" object, it executes the code block it has bee\
n handed.)5.517 F .518(If it is)5.518 F .012
(the "false" object, it returns without executing the code block.)72 546 R .011
(So the traditional "conditional construct" has)5.011 F .509(been replaced in \
Smalltalk with boolean objects which execute the indicated code block or not, \
depending)72 558 R(on their truth-value.)72 570 Q/F3 7/Times-Roman@0 SF(14)
151.71 565.9 Q F0 .996(In the case of our example, the actual code within the \
block sends an error message to the current)97 585.6 R 2.539(object. error:)72
597.6 R .038(is handled by the parent class Object, and will pop up an appropr\
iate complaint when the user)2.539 F .311(tries to write too many checks.)72
609.6 R .311
(In general, the way you handle a fatal error in Smalltalk is to send an error)
5.311 F .772(message to yourself \(through the "self" pseudo-variable\), and l\
et the error handling mechanisms inherited)72 621.6 R
(from the Object class take over)72 633.6 Q(.)-.55 E .736
(As you might guess, there is also an ifFalse: message which booleans accept.)
97 649.2 R .737(It works exactly like)5.737 F(ifT)72 661.2 Q .106(rue:, except\
 that the logic has been reversed; a boolean "false" will execute the codebloc\
k, and a boolean)-.35 F("true" will not.)72 673.2 Q -1(Yo)97 688.8 S 2.72(us)1
G .22(hould take a little time to play with this method of representing condit\
ionals.)119.83 688.8 R -1(Yo)5.221 G 2.721(uc)1 G .221(an run your)457.458
688.8 R(checkbook, but can also invoke the conditional functions directly:)72
700.8 Q .32 LW 144 708.8 72 708.8 DL/F4 5.6/Times-Roman@0 SF(14)82 717.32 Q/F5
8/Times-Roman@0 SF .075(It is interesting to note that because of the way cond\
itionals are done, conditional constructs are not part of)2 3.28 N(the Smallta\
lk language\212they are merely a de\214ned behavior for the Boolean class of o\
bjects.)72 730.6 Q EP
%%Page: 18 18
BP/F0 10/Times-Roman@0 SF(-18-)279.67 48 Q(true ifT)108 84 Q
(rue: [ 'Hello, world!' printNl ] !)-.35 E(false ifT)108 96 Q
(rue: [ 'Hello, world!' printNl ] !)-.35 E
(true ifFalse: [ 'Hello, world!' printNl ] !)108 108 Q
(false ifFalse: [ 'Hello, world!' printNl ] !)108 120 Q/F1 10/Times-Bold@0 SF
2.5(6.2. Iteration)72 150 R(and collections)2.5 E F0 .924(Now that we have som\
e sanity checking in place, it remains for us to keep a log of the checks we)97
165.6 R 2.956(write. W)72 177.6 R 2.956(ew)-.8 G .457(ill do so by adding a Di\
ctionary object to our Checking class, logging checks into it, and pro-)123.762
177.6 R .102(viding some messages for querying our check-writing history)72
189.6 R 5.101(.B)-.65 G .101(ut this enhancement brings up a very inter)332.133
189.6 R(-)-.2 E .263(esting question\212when we change the "shape" of an objec\
t \(in this case, by adding a new)72 201.6 R/F2 10/Times-Italic@0 SF .263
(instance variable)2.763 F F0(to the Checking class\212our dictionary\), what \
happens to the existing class, and its objects?)72 213.6 Q .363(The answer is \
that the old objects continue to exist with their current shape.)97 229.2 R/F3
7/Times-Roman@0 SF(15)403.898 225.1 Q F0 .363(New objects will have)413.761
229.2 R 1.415(the new shape.)72 241.2 R 1.415(As this can lead to)6.415 F F2
(very)3.915 E F0 1.415(puzzling behavior)3.915 F 3.915(,i)-.4 G 3.915(ti)
327.115 241.2 S 3.915(su)336.59 241.2 S 1.415
(sually best to eradicate all of the old)349.395 241.2 R 1.413
(objects, and then implement your changes.)72 253.2 R 1.413
(If this were more than a toy object accounting system, this)6.413 F .312
(would probably entail saving the objects of)72 265.2 R .312
(f, converting to the new class, and reading the objects back into)-.18 F
(the new format.)72 277.2 Q(For now)5 E 2.5(,w)-.65 G(e'll just ignore what')
185.22 277.2 Q 2.5(sc)-.55 G
(urrently there, and de\214ne our latest Checking class.)279.1 277.2 Q
(Account subclass: #Checking)108 295.2 Q(instanceV)133 307.2 Q
(ariableNames: 'checknum checksleft history')-1.11 E(classV)133 319.2 Q
(ariableNames: ')-1.11 E(')-.74 E(poolDictionaries: ')133 331.2 Q(')-.74 E
(category: nil !)133 343.2 Q 1.077(This is the same syntax as the last time we\
 de\214ned a checking account, except that we have)97 364.8 R F2(thr)3.578 E
(ee)-.37 E F0 .245(instance variables\212the "checknum" and "checksleft" which\
 have always been there, and our new "history")72 376.8 R 2.682(variable. W)72
388.8 R 2.682(em)-.8 G .182(ust now feed in our de\214nitions for each of the \
messages our object can handle, since we are)135.434 388.8 R .267
(basically de\214ning a new class under an old name.)72 400.8 R F3(16)272.156
396.7 Q F0 .266(Go ahead and do this now\212the methods are in chapter)281.923
400.8 R 2.5(5. W)72 412.8 R 2.5(ea)-.8 G
(re using the same Account class, so you only need to do the Checking methods.)
104.52 412.8 Q -.4(Wi)97 428.4 S .387(th our new Checking instance variable, w\
e are all set to start recording our checking history).4 F 5.387(.O)-.65 G(ur)
495.67 428.4 Q(\214rst change will be in the "init" message handling:)72 440.4
Q(!Checking methodsFor: 'initialization'!)108 458.4 Q(init)108 470.4 Q
(checksleft := 0.)133 482.4 Q(history := Dictionary new)133 494.4 Q(.)-.65 E
2.5(^s)133 506.4 S(uper init)142.72 506.4 Q(!!)108 518.4 Q
(This provides us with a Dictionary)72 536.4 Q 2.5(,a)-.65 G
(nd hooks it to our new "history" variable.)219.39 536.4 Q .645
(Our next method records each check as it')97 552 R 3.145(sw)-.55 G 3.145
(ritten. The)283.78 552 R .644(method is a little more involved, as we've)3.145
F(added some more sanity checks to the writing of checks.)72 564 Q .32 LW 144
666.4 72 666.4 DL/F4 5.6/Times-Roman@0 SF(15)82 674.92 Q/F5 8/Times-Roman@0 SF
.382(This is the case in GNU Smalltalk.)2 3.28 N .381
(Other implementations will refuse to rede\214ne the class until)4.381 F/F6 8
/Times-Italic@0 SF(all)2.381 E F5 .381(of its)2.381 F
(instances have been hunted down and eradicated!)72 688.2 Q F4(16)82 696.72 Q
F5 -.56(Te)2 3.28 O(chnically).56 E 3.358(,G)-.52 G 1.358
(NU Smalltalk has associated us with the existing)137.422 700 R F6(class)3.358
E F5 1.358(methods, but with a new set of)3.358 F F6(instance)72 710 Q F5 3.195
(methods. It)3.194 F 1.195(is often simpler to work as if you had to de\214ne \
everything, rather than trying to take)3.195 F(advantage of this.)72 720 Q EP
%%Page: 19 19
BP/F0 10/Times-Roman@0 SF(-19-)279.67 48 Q(!Checking methodsFor: ')108 84 Q
(spending'!)-.55 E(writeCheck: amount)108 96 Q 2.5(|n)133 108 S(um |)142.5 108
Q("Sanity check that we have checks left in our checkbook")133 132 Q
(\(checksleft < 1\))133 144 Q(ifT)158 156 Q
(rue: [ ^self error: 'Out of checks' ].)-.35 E
("Make sure we've never used this check number before")133 180 Q
(num := checknum.)133 192 Q(\(history includesKey: num\))133 204 Q(ifT)158 216
Q(rue: [ ^self error: 'Duplicate check number)-.35 E 2.5(']).37 G(.)349.34 216
Q("Record the check number and amount")133 240 Q(history at: num put: amount.)
133 252 Q("Update our next checknumber)133 276 Q 2.5(,c)-.4 G
(hecks left, and balance")266.92 276 Q(checknum := checknum + 1.)133 288 Q
(checksleft := checksleft - 1.)133 300 Q(self spend: amount.)133 312 Q 2.5(^n)
133 324 S(um)143.83 324 Q(!!)108 336 Q 1.935 -.8(We h)97 357.6 T .335
(ave added three things to our latest version of writeCheck:.).8 F .336
(First, since our routine has become)5.336 F 1.456
(somewhat involved, we have added comments.)72 369.6 R 1.456
(In Smalltalk, single quotes are used for strings; double)6.456 F
(quotes enclose comments.)72 381.6 Q 1.6 -.8(We h)5 H
(ave added comments before each section of code.).8 E .773
(Second, we have added a sanity check on the check number we propose to use.)97
397.2 R .774(Dictionary objects)5.774 F .683(respond to the includesKey: messa\
ge with a boolean, depending on whether something is currently stored)72 409.2
R .178(under the given key in the dictionary)72 421.2 R 5.178(.I)-.65 G 2.678
(ft)230.626 421.2 S .179
(he check number is already used, the error: message is sent to our)239.414
421.2 R(object, aborting the operation.)72 433.2 Q(Finally)97 448.8 Q 2.616(,w)
-.65 G 2.616(ea)137.026 448.8 S .116(dd a new entry to the dictionary)148.522
448.8 R 5.116(.W)-.65 G 2.616(eh)292.024 448.8 S .116
(ave already seen the at:put: message from chapter)304.08 448.8 R 3.42(2. Our)
72 460.8 R .92
(use here simply associates a check number with an amount of money spent.)3.42
F/F1 7/Times-Roman@0 SF(17)417.886 456.7 Q F0 -.4(Wi)428.307 460.8 S .921
(th this, we now).4 F
(have a working Checking class, with reasonable sanity checks and per)72 472.8
Q(-check information.)-.2 E .559(Let us \214nish the chapter by enhancing our \
ability to get access to all this information.)97 488.4 R 2.158 -.8(We w)5.559
H .558(ill start).8 F(with some simple print-out functions.)72 500.4 Q .32 LW
144 668.2 72 668.2 DL/F2 5.6/Times-Roman@0 SF(17)82 676.72 Q/F3 8/Times-Roman@0
SF -.8(Yo)2 3.28 O 2.377(um).8 G .377
(ight start to wonder what one would do if you wished to associate)111.177 680
R/F4 8/Times-Italic@0 SF(two)2.378 E F3 .378(pieces of information under)2.378
F .268(one key)72 690 R 4.268(.S)-.52 G(ay)107.568 690 Q 2.268(,t)-.52 G .267
(he value and who the check was written to.)121.092 690 R .267
(There are several ways; the best would probably be)4.267 F .007
(to create a new)72 700 R 2.007(,c)-.52 G .008(ustom object which contained th\
is information, and then store this object under the check num-)127.26 700 R
.214(ber key in the dictionary)72 710 R 4.214(.I)-.52 G 2.214(tw)159.422 710 S
.214(ould also be valid \(though probably over)169.636 710 R .214
(-kill\) to store a dictionary as the value\212)-.16 F
(and then store as many pieces of information as you'd like under each slot!)72
720 Q EP
%%Page: 20 20
BP/F0 10/Times-Roman@0 SF(-20-)279.67 48 Q(!Checking methodsFor: 'printing'!)
108 84 Q(printOn: stream)108 96 Q(super printOn: stream.)133 108 Q
(', checks left: ' printOn: stream.)133 120 Q(checksleft printOn: stream.)133
132 Q(', checks written: ' printOn: stream.)133 144 Q
(\(history size\) printOn: stream.)133 156 Q(!)108 168 Q(check: num)108 180 Q
2.5(|c|)133 192 S 2.5(c:)133 204 S 2.5(=h)142.72 204 S
(istory at: num ifAbsent: [ ^self error: 'No such check #' ].)155.86 204 Q(^c)
133 216 Q(!!)108 228 Q 1.239(There should be very few surprises here.)72 246 R
2.839 -.8(We f)6.239 H 1.24
(ormat and print our information, while letting our parent).8 F .495
(classes handle their own share of the work.)72 258 R .494
(When looking up a check number)5.495 F 2.994(,w)-.4 G 2.994(eo)403.174 258 S
.494(nce again take advan-)415.608 258 R .11(tage of the fact that blocks of e\
xecutable statements are an object; in this case, we are using the at:ifAbsent\
:)72 270 R .944(message supported by the Dictionary class.)72 282 R .944
(If the requested key value is not found in the dictionary)5.944 F 3.444(,t)
-.65 G(he)494.56 282 Q .13(code block is executed.)72 294 R .131(This allows u\
s to customize our error handling, as the generic error would only tell)5.13 F
(the user "key not found".)72 306 Q 1.665
(While we can look up a check if we know its number)97 321.6 R 4.165(,w)-.4 G
4.165(eh)341.81 321.6 S 1.665(ave not yet written a way to "rif)355.415 321.6 R
<8d65>-.18 E .168(through" our collection of checks.)72 333.6 R .169
(The following function loops over the checks, printing them out one per)5.169
F 2.726(line. Because)72 345.6 R .225
(there is currently only a single numeric value under each key)2.726 F 2.725
(,t)-.65 G .225(his might seem wasteful.)384.21 345.6 R(But)5.225 E .897
(we have already considered storing multiple values under each check number)72
357.6 R 3.398(,s)-.4 G 3.398(oi)400.282 357.6 S 3.398(ti)411.46 357.6 S 3.398
(sb)420.418 357.6 S .898(est to leave some)432.706 357.6 R .934
(room for each item.)72 369.6 R .934(And, of course, because we are simply sen\
ding a printing message to an object, we)5.934 F 1.936(will not have to come b\
ack and re-write this code so long as the object in the dictionary honors our)
72 381.6 R(printNl/printOn: messages.)72 393.6 Q
(!Checking methodsFor: 'printing'!)108 411.6 Q(printChecks)108 423.6 Q
(history associationsDo: [:assoc|)133 435.6 Q(\(assoc key\) print.)158 447.6 Q
2.5('-'p)158 459.6 S(rint.)180.49 459.6 Q(\(assoc value\) printNl.)158 471.6 Q
(])133 483.6 Q(!!)108 495.6 Q 2.825 -.8(We s)72 513.6 T 1.225
(till see a code block object being passed to the dictionary).8 F 3.725(,b)-.65
G 1.225(ut ":assoc|" is something new)343.82 513.6 R 6.225(.A)-.65 G(code)
485.12 513.6 Q 2.626(block can optionally receive)72 525.6 R/F1 10
/Times-Italic@0 SF(ar)5.126 E(guments.)-.37 E F0 2.627(In this case, the ar)
7.626 F 2.627(gument is the key/value pair)-.18 F 5.127(,k)-.4 G 2.627(nown in)
468.873 525.6 R .109(Smalltalk as an)72 537.6 R F1(Association.)2.609 E F0 .109
(This is the way that a dictionary object stores its key/value pairs internall\
y)5.109 F 5.108(.I)-.65 G(n)499 537.6 Q .296(fact, when you sent an at:put: me\
ssage to a dictionary object, the \214rst thing it does is pack them into a ne\
w)72 549.6 R .623(object from the Association class.)72 561.6 R .623
(If you only wanted the value portion, you could call history with a do:)5.623
F(message instead.)72 573.6 Q .468(Our code merely uses the "key" and "value" \
messages to ask the association for the two values.)97 589.2 R -.8(We)5.468 G
.122(then invoke our printing interface upon them.)72 601.2 R .122
(While the printNl message implicitly uses "stdout", we don')5.122 F(t)-.18 E
2.192(want a newline until the end, so the "print" message is used instead.)72
613.2 R 2.193(It is pretty much the same as)7.193 F
("printNl", except it doesn')72 625.2 Q 2.5(ta)-.18 G(dd a newline.)186.91
625.2 Q 1.063(It is important that you be clear on the relationship between an\
 Association and the ar)97 640.8 R 1.063(gument to a)-.18 F .884(code block.)72
652.8 R .885
(In this example, we passed a associationsDo: message to a dictionary)5.884 F
5.885(.A)-.65 G .885(dictionary invokes)428.955 652.8 R .504(the passed code b\
lock with an Association when processing an associationsDo: message.)72 664.8 R
.504(But code blocks)5.504 F .444(can receive)72 676.8 R F1(any)2.944 E F0 .444
(type of ar)2.944 F .444(gument\212the type is determined by the code which in\
vokes the code block; Dic-)-.18 F(tionary)72 688.8 Q 3.456(,i)-.65 G 3.456(nt)
108.416 688.8 S .956(his case.)119.652 688.8 R .956(In the next chapter we'll \
see more on how code blocks are used; we'll also look at)5.956 F
(how you can invoke code blocks in your own code.)72 700.8 Q EP
%%Page: 21 21
BP/F0 10/Times-Roman@0 SF(-21-)279.67 48 Q/F1 10/Times-Bold@0 SF 2.5(7. Code)72
84 R(blocks, part two)2.5 E F0 .193(In the last chapter)97 99.6 R 2.693(,w)-.4
G 2.693(el)180.962 99.6 S .194
(ooked at how code blocks could be used to build conditional expressions, and)
190.875 99.6 R .665(how you could iterate across all entries in a collection.)
72 111.6 R/F2 7/Times-Roman@0 SF(18)295.726 107.5 Q F0 2.266 -.8(We b)305.892
111.6 T .666(uilt our own code blocks, and handed them).8 F(of)72 123.6 Q 2.932
(ff)-.18 G .432(or use by system objects.)89.742 123.6 R .432
(But there is nothing magic about invoking code blocks; your own code will)
5.432 F .936(often need to do so.)72 135.6 R .937(This chapter will shows some\
 examples of loop construction in Smalltalk, and then)5.936 F
(demonstrate how you invoke code blocks for yourself.)72 147.6 Q F1 2.5
(7.1. Integer)72 171.6 R(loops)2.5 E F0 .165
(Integer loops are constructed by telling a number to drive the loop.)97 187.2
R -.35(Tr)5.164 G 2.664(yt).35 G .164(his example to count from 1)390.69 187.2
R(to 20:)72 199.2 Q 2.5(1t)108 217.2 S(o: 20 do: [:x| x printNl ] !)118.28
217.2 Q(There')72 235.2 Q 2.5(sa)-.55 G
(lso a way to count up by more than one:)108.93 235.2 Q 2.5(1t)108 253.2 S
(o: 20 by: 2 do: [:x| x printNl ] !)118.28 253.2 Q(Finally)72 271.2 Q 2.5(,c)
-.65 G(ounting down is done with a negative interval:)109.13 271.2 Q
(20 to: 1 by: -1 do: [:x| x printNl ] !)108 289.2 Q F1 2.5(7.2. Intervals)72
319.2 R F0 .609
(It is also possible to represent a range of numbers as a standalone object.)97
334.8 R .609(This allows you to repre-)5.609 F(sent a range of numbers as a si\
ngle object, which can be passed around the system.)72 346.8 Q
(Smalltalk at: #i put: \(Interval from: 5 to: 10\) !)108 364.8 Q 2.5(ip)108
376.8 S(rintNl !)118.28 376.8 Q 2.5(id)108 388.8 S(o: [:x| x printNl] !)118.28
388.8 Q .479(As with the integer loops, the Interval class can also represent \
steps greater than 1.)72 406.8 R .478(It is done much like it)5.478 F
(was for our numeric loop above:)72 418.8 Q 2.5(i:)108 436.8 S 2.5(=\()116.06
436.8 S(Interval from: 5 to: 10 by: 2\))127.53 436.8 Q 2.5(ip)108 448.8 S
(rintNl !)118.28 448.8 Q 2.5(id)108 460.8 S(o: [:x| x printNl] !)118.28 460.8 Q
F1 2.5(7.3. Invoking)72 490.8 R(code blocks)2.5 E F0 2.04(Let us revisit the c\
hecking example and add a method for scanning only checks over a certain)97
506.4 R 3.435(amount. This)72 518.4 R .935(would allow our user to \214nd "big\
" checks, by passing in a value below which we will not)3.435 F .077
(invoke their function.)72 530.4 R 1.677 -.8(We w)5.077 H .077
(ill invoke their code block with the check number as an ar).8 F .078
(gument; they can use)-.18 F(our existing check: message to get the amount.)72
542.4 Q(!Checking methodsFor: ')108 560.4 Q(scanning'!)-.55 E
(checksOver: amount do: aBlock)108 572.4 Q(history associationsDo: [:assoc|)133
584.4 Q(\(\(assoc value\) > amount\))158 596.4 Q(ifT)183 608.4 Q
(rue: [aBlock value: \(assoc key\)])-.35 E(])133 620.4 Q(!!)108 632.4 Q .431(T\
he structure of this loop is much like our printChecks message from chapter 6.)
72 650.4 R(However)5.43 E 2.93(,i)-.4 G 2.93(nt)446.89 650.4 S .43(his case we)
457.6 650.4 R 1.042(consider each entry)72 662.4 R 3.543(,a)-.65 G 1.043
(nd only invoke the supplied block if the check')161.668 662.4 R 3.543(sv)-.55
G 1.043(alue is greater than the speci\214ed)370.205 662.4 R 2.5(amount. The)72
674.4 R(line:)2.5 E .32 LW 144 682.4 72 682.4 DL/F3 5.6/Times-Roman@0 SF(18)82
690.92 Q/F4 8/Times-Roman@0 SF .499
(The do: message is understood by most types of Smalltalk collections.)2 3.28 N
.499(It works for the Dictionary class,)4.499 F .877
(as well as sets, arrays, strings, intervals, linked lists, bags, and streams.)
72 704.2 R .877(The associationsDo: message works)4.877 F .026
(only with dictionaries.)72 714.2 R .026(The dif)4.026 F .026
(ference is that do: passes only the)-.144 F/F5 8/Times-Italic@0 SF(value)2.025
E F4 .025(portion, while associationsDo: passes the)2.025 F(entire)72 724.2 Q
F5(key/value)2 E F4(pair in an Association object.)2 E EP
%%Page: 22 22
BP/F0 10/Times-Roman@0 SF(-22-)279.67 48 Q(ifT)108 84 Q
(rue: [aBlock value: \(assoc key\)])-.35 E .576(invokes the user)72 102 R .576
(-supplied block, passing as an ar)-.2 F .576(gument the association')-.18 F
3.076(sk)-.55 G(ey)378.18 102 Q 3.076(,w)-.65 G .576(hich is the check number)
399.766 102 R(.)-.55 E .761(The value: message, when received by a code block,\
 causes the code block to execute.)72 114 R .762(Code blocks take)5.762 F .011
("value", "value:", "value:value:", and "value:value:value:" messages, so you \
can pass from 0 to 3 ar)72 126 R(guments)-.18 E 1.074(to a code block.)72 138 R
/F1 7/Times-Roman@0 SF(19)138.542 133.9 Q F0 -1(Yo)149.115 138 S 3.573(um)1 G
1.073(ight \214nd it puzzling that an association takes a "value" message, and\
 so does a)176.688 138 R .626(code block.)72 150 R(Remember)5.626 E 3.126(,e)
-.4 G .627(ach object can do its own thing with a message.)177.898 150 R 3.127
(Ac)5.627 G .627(ode block gets)394.485 150 R/F2 10/Times-Italic@0 SF(run)3.127
E F0 .627(when it)3.127 F 1.08(receives a "value" message.)72 162 R 1.079
(An association merely returns the value part of its key/value pair)6.08 F
6.079(.T)-.55 G 1.079(he fact)475.991 162 R
(that both take the same message is, in this case, coincidence.)72 174 Q(Let')
97 189.6 Q 2.841(sq)-.55 G .341
(uickly set up a new checking account with $250 \(wouldn')124.841 189.6 R 2.841
(tt)-.18 G .341(his be nice in real life?\) and write)367.481 189.6 R 2.5(ac)72
201.6 S(ouple checks.)83.38 201.6 Q
(Then we'll see if our new method does the job correctly:)5 E
(Smalltalk at: #mycheck put: \(Checking new\) !)108 219.6 Q
(mycheck deposit: 250 !)108 231.6 Q(mycheck newChecks: 100 count: 40 !)108
243.6 Q(mycheck writeCheck: 10 !)108 255.6 Q(mycheck writeCheck: 52 !)108 267.6
Q(mycheck writeCheck: 15 !)108 279.6 Q
(mycheck checksOver: 1 do: [:x| printNl] !)108 291.6 Q
(mycheck checksOver: 17 do: [:x| printNl] !)108 303.6 Q
(mycheck checksOver: 200 do: [:x| printNl] !)108 315.6 Q 1.762 -.8(We w)97
337.2 T .162(ill \214nish this chapter with an alternative way of writing our \
checksOver: code.).8 F .161(In this example,)5.162 F .131(we will use the mess\
age select: to pick the checks which exceed our value, instead of doing the co\
mparison)72 349.2 R 2.97(ourselves. W)72 361.2 R 2.97(ec)-.8 G .469
(an then invoke the new resulting collection against the user)138.23 361.2 R
1.569 -.55('s c).37 H .469(ode block.).55 F .469(Unlike our pre-)5.469 F .799
(vious de\214nition of checksOver:do:, this one passes the user)72 373.2 R
1.899 -.55('s c).37 H .8(ode block the association, not just a check).55 F
(number)72 385.2 Q 5(.H)-.55 G
(ow could this code be rewritten to remedy this, while still using select:?)
116.72 385.2 Q(!Checking methodsFor: ')108 403.2 Q(scanning'!)-.55 E
(checksOver: amount do: aBlock)108 415.2 Q 2.5(|c)133 427.2 S(hosen |)141.94
427.2 Q(chosen := history select: [:amt| amt > amount].)133 439.2 Q
(chosen associationsDo: aBlock)133 451.2 Q(!!)108 463.2 Q -1(Yo)97 484.8 S 2.5
(uc)1 G(an use the same set of tests that we ran above.)120.16 484.8 Q
(Notice that our code block:)5 E([:x| x printNl])108 502.8 Q 1.211
(now prints out an Association.)72 520.8 R 1.211(This has the very nice ef)
6.211 F 1.21(fect--with our old method, we were told which)-.18 F .538
(check numbers were above a given amount.)72 532.8 R -.4(Wi)5.538 G .538
(th this new method, we get the check number and amount).4 F .928
(in the form of an Association.)72 544.8 R .928
(When we print an association, since the key is the check number and the)5.928
F(value is the check amount, we get a list of checks over the amount in the fo\
rmat:)72 556.8 Q(CheckNum -> CheckV)108 574.8 Q(al)-1.11 E .32 LW 144 698.2 72
698.2 DL/F3 5.6/Times-Roman@0 SF(19)82 706.72 Q/F4 8/Times-Roman@0 SF .427
(There is also a valueW)2 3.28 N(ithAr)-.32 E .427
(guments: message which accepts an array holding as many ar)-.144 F .428
(guments as you)-.144 F(would like.)72 720 Q EP
%%Page: 23 23
BP/F0 10/Times-Roman@0 SF(-23-)279.67 48 Q/F1 10/Times-Bold@0 SF 2.5(8. When)72
84 R(Things Go Bad)2.5 E F0 .351
(So far we've been working with examples which work the \214rst time.)97 99.6 R
.352(If you didn')5.352 F 2.852(tt)-.18 G .352(ype them in cor)437.324 99.6 R
(-)-.2 E(rectly)72 111.6 Q 3.575(,y)-.65 G 1.075
(ou probably received a \215ood of unintelligible complaints.)105.195 111.6 R
-1(Yo)6.074 G 3.574(up)1 G 1.074(robably ignored the complaints,)373.568 111.6
R(and typed the example again.)72 123.6 Q .479
(When developing your own Smalltalk code, however)97 139.2 R 2.979(,t)-.4 G .48
(hese messages are the way you \214nd out what)320.753 139.2 R .447
(went wrong.)72 151.2 R .446(Because your objects, their methods, the error pr\
intout, and your interactive environment are)5.447 F .088(all contained within\
 the same Smalltalk session, you can use these error messages to debug your co\
de using)72 163.2 R(very powerful techniques.)72 175.2 Q F1 2.5(8.1. A)72 199.2
R(Simple Err)2.5 E(or)-.18 E F0(First, let')97 214.8 Q 2.5(st)-.55 G
(ake a look at a typical error)142.29 214.8 Q 5(.T)-.55 G(ype:)264.06 214.8 Q
2.5(7p)108 232.8 S(lus: 1 !)120.5 232.8 Q(This will print out:)72 250.8 Q 2.5
(7d)108 268.8 S(id not understand selector 'plus:')120.5 268.8 Q
(Unde\214nedObject>>#executeStatements)108 292.8 Q(Unde\214nedObject>>nil)108
304.8 Q .131(The \214rst line is pretty simple; we sent a message to the "7" o\
bject which was not understood; not surprising)72 322.8 R 2.228
(since the "plus" operation should have been "+".)72 334.8 R 2.229
(The two remaining lines re\215ect the way the GNU)7.229 F 1.608(Smalltalk inv\
okes code which we type to our command prompt; it generates a block of code wh\
ich is)72 346.8 R .517(invoked via an internal function "executeStatements".)72
358.8 R .518(Thus, this output tells you that you directly typed a)5.517 F
(line which sent an invalid message to the "7" object.)72 370.8 Q .593
(The last two lines of the error output are actually a stack backtrace.)97
386.4 R .592(The most recent call is the one)5.592 F .638
(nearer the top of the screen.)72 398.4 R .638
(In the next example, we will cause an error which happens deeper within an)
5.638 F(object.)72 410.4 Q F1 2.5(8.2. Nested)72 434.4 R(Calls)2.5 E F0 -.7(Ty)
97 450 S(pe the following lines:).7 E
(Smalltalk at: #x put: \(Dictionary new\) !)108 468 Q 2.5(xa)108 480 S(t: 1 !)
119.94 480 Q(The error you receive will look like:)72 498 Q
(Dictionary new: 32 "<0x33788>" error: key not found)108 516 Q
(MethodContext>>#value)108 540 Q(Dictionary>>#at:ifAbsent:)108 552 Q
(Dictionary>>#at)108 564 Q(Unde\214nedObject>>#executeStatements)108 576 Q
(Unde\214nedObject>>nil)108 588 Q .003(The error itself is pretty clear; we as\
ked for something within the Dictionary which wasn')97 609.6 R 2.502(tt)-.18 G
2.502(here. The)463.738 609.6 R .046
(object which had the error is identi\214ed as "Dictionary new: 32".)72 621.6 R
2.546(AD)5.046 G(ictionary')350.112 621.6 Q 2.546(sd)-.55 G .046
(efault size is 32; thus, this)399.878 621.6 R
(is the object we created with "Dictionary new".)72 633.6 Q 1.016(The stack ba\
cktrace shows us the inner structure of how a Dictionary responds to the at: m\
essage.)97 649.2 R .242(Our hand-entered command causes the usual two entries \
for "Unde\214nedObject".)72 661.2 R .242(Then we see a Dictionary)5.242 F 1.242
(object responding to an "at:" message \(the "Dictionary>>#at" line\).)72 673.2
R 1.242(This code called the object with an)6.242 F .72
("at:ifAbsent:" message.)72 685.2 R .72(All of a sudden, a dif)5.72 F .72
(ferent object receives a "value" message, and then the error)-.18 F(happened.)
72 697.2 Q 2.686(This isn')97 712.8 R 5.186(tq)-.18 G 2.686
(uite true; the error happened in the Dictionary object.)147.752 712.8 R 2.686
(The mystery is where this)7.686 F .284("MethodContext" came from.)72 724.8 R
(Fortunately)5.284 E 2.784(,i)-.65 G 2.784(ti)250.356 724.8 S(sn')258.7 724.8 Q
2.784(tm)-.18 G .284(uch of a mystery)284.084 724.8 R 5.284(.T)-.65 G .285
(he answer lies in what we covered)365.11 724.8 R EP
%%Page: 24 24
BP/F0 10/Times-Roman@0 SF(-24-)279.67 48 Q
(in the last two chapters: code blocks.)72 84 Q 3.529(Av)97 99.6 S 1.029(ery c\
ommon way to handle errors in Smalltalk is to hand down a block of code which \
will be)112.749 99.6 R .909(called when an error occurs.)72 111.6 R .909
(For the Dictionary code, the "at:" message passes in a block of code to the)
5.909 F .59(at:ifAbsent: code to be called when "at:ifAbsent:" can')72 123.6 R
3.09<748c>-.18 G .59(nd the given key)306.33 123.6 R 5.59(.T)-.65 G .59
(hus, without even looking at)388.03 123.6 R 1.223(the code for Dictionary its\
elf, we can guess that the Dictionary "at:" message handling looks something)72
135.6 R(like:)72 147.6 Q(at: key ifAbsent: errCodeBlock)108 165.6 Q
(...look for key)133 177.6 Q(...)-.65 E(\(keyNotFound\) ifT)133 189.6 Q
(rue: [ ^\(errCodeBlock value\) ])-.35 E(...)133 201.6 Q(at: key)108 225.6 Q
(^self at: key ifAbsent: [^self error: 'key not found'])133 237.6 Q .869(The k\
ey is that we see in the stack backtrace that at:ifAbsent: is called from at:,\
 and a MethodContext is)72 255.6 R .73(called to give the error)72 267.6 R 5.73
(.O)-.55 G .73
(nce we realize that a MethodContext is just a fancy name for a code block, we)
180.35 267.6 R .432
(can guess that at: handed in a code block to print an error)72 279.6 R 2.932
(,a)-.4 G .432(nd at:ifAbsent: used the standard "value" mes-)315.498 279.6 R(\
sage to invoke this code block when it realized that the requested key couldn')
72 291.6 Q 2.5(tb)-.18 G 2.5(ef)392.32 291.6 S(ound in the Dictionary)402.59
291.6 Q(.)-.65 E .224(It would be nice if each entry on the stack backtrace in\
cluded source line numbers.)97 307.2 R(Unfortunately)5.224 E 2.724(,a)-.65 G(t)
501.22 307.2 Q(this point GNU Smalltalk doesn')72 319.2 Q 2.5(tp)-.18 G
(rovide this feature.)213.77 319.2 Q
(Of course, you have the source code available....)5 E/F1 10/Times-Bold@0 SF
2.5(8.3. Some)72 343.2 R(Shortcomings in GNU Smalltalk)2.5 E F0(Unfortunately)
97 358.8 Q 3.944(,t)-.65 G 1.444
(here are some errors which GNU Smalltalk is not very helpful in detecting.)
161.674 358.8 R(This)6.443 E 1.264(information applies to the latest version c\
urrently available\212GNU Smalltalk 1.1.1.)72 370.8 R -.35(Tr)6.264 G 3.765(yi)
.35 G 1.265(ndexing some-)443.575 370.8 R(thing which isn')72 382.8 Q 2.5(ta)
-.18 G(ny sort of Collection:)146.54 382.8 Q(\(7 at: 99\) printNl !)108 400.8 Q
.31(One would expect to receive an error)72 418.8 R(,)-.4 E/F2 7/Times-Roman@0
SF(20)224.239 414.7 Q F0 .309
(but instead GNU Smalltalk simply returns the receiving object\2127.)234.048
418.8 R(Similarly)72 430.8 Q 2.5(,o)-.65 G
(ne would expect Array bounds to be checked:)118.58 430.8 Q
(Smalltalk at: #x put: \(Array new: 10\) !)108 448.8 Q
(\(x at: 7 put: 123\) printNl !)108 460.8 Q(\(x at: 1)108 472.8 Q 2.5(1p)-.37 G
(ut: 1234\) printNl !)148.46 472.8 Q(\(x at: 7\) printNl !)108 484.8 Q
(\(x at: 1)108 496.8 Q(1\) printNl !)-.37 E .559
(But this example returns no error in GNU Smalltalk.)72 514.8 R F2(21)286.73
510.7 Q F0 .559(When an assignment to an array slot is correct, the)296.789
514.8 R .154(returned value is the value assigned\212123 in this case.)72 526.8
R .153(When you assign outside the array bounds, you will)5.154 F .357
(receive the array object itself as the result!)72 538.8 R .358
(Thus, if you accidentally index your array incorrectly)5.358 F 2.858(,y)-.65 G
.358(ou will)475.582 538.8 R .624(have to \214gure out what happened from a pl\
ace further in your code where an error crops up because your)72 550.8 R
(code was trying to operate upon an)72 562.8 Q/F3 10/Times-Italic@0 SF(element)
2.5 E F0(of the array)2.5 E 2.5(,b)-.65 G
(ut instead is working on the array itself.)303.51 562.8 Q F1 2.5(8.4. Looking)
72 586.8 R(at Objects)2.5 E F0 .62(When you are chasing an error)97 602.4 R
3.12(,i)-.4 G 3.12(ti)231.11 602.4 S 3.12(so)239.79 602.4 S .62
(ften helpful to examine the instance variables of your objects.)251.8 602.4 R
.116(While strategic "printNl"s will no doubt help, you can look at an object \
without having to write all the code)72 614.4 R 3.075(yourself. The)72 626.4 R
.575("inspect" message works on any object, and dumps out the values of each i\
nstance variable)3.075 F(within the object.)72 638.4 Q(Thus:)5 E
(Smalltalk at: #x put: \(Interval from: 1 to: 5\) !)108 656.4 Q 2.5(xi)108
668.4 S(nspect !)118.28 668.4 Q(displays:)72 686.4 Q .32 LW 144 696.4 72 696.4
DL/F4 5.6/Times-Roman@0 SF(20)82 704.92 Q/F5 8/Times-Roman@0 SF
(And in fact, you)2 3.28 M/F6 8/Times-Italic@0 SF(will)2 E F5
(receive an error in most Smalltalk systems.)2 E F4(21)82 716.72 Q F5
(Again, it)2 3.28 M F6(will)2 E F5
(error in most other Smalltalk implementations.)2 E EP
%%Page: 25 25
BP/F0 10/Times-Roman@0 SF(-25-)279.67 48 Q(An instance of Interval)108 84 Q
(start: 1)113 96 Q(stop: 5)113 108 Q(step: 1)113 120 Q(There')97 141.6 Q 3.375
(so)-.55 G .875(ne thing the object inspector doesn')135.365 141.6 R 3.374(td)
-.18 G .874(isplay\212the contents of an)293.192 141.6 R/F1 10/Times-Italic@0
SF .874(indexed class.)3.374 F F0 .874(Since we)5.874 F(haven')72 153.6 Q 2.5
(tl)-.18 G
(ooked at this kind of object yet, we'll leave this to its own chapter)107.09
153.6 Q(.)-.55 E -.8(We)97 169.2 S .248('ll \214nish this chapter by emphasizi\
ng a technique which has already been covered\212the use of the).8 F .855
("error:" message in your own objects.)72 181.2 R .855
(As you saw in the case of Dictionary)5.855 F 3.355(,a)-.65 G 3.354(no)396.14
181.2 S .854(bject can send itself an)409.494 181.2 R .099(error: message with\
 a descriptive string to abort execution and dump a stack backtrace.)72 193.2 R
-1(Yo)5.1 G 2.6(us)1 G .1(hould plan on)448.8 193.2 R .588
(using this technique in your own objects.)72 205.2 R .587
(It can be used both for explicit user)5.588 F .587
(-caused errors, as well as in)-.2 F(internal sanity checks.)72 217.2 Q EP
%%Page: 26 26
BP/F0 10/Times-Roman@0 SF(-26-)279.67 48 Q/F1 10/Times-Bold@0 SF 2.5
(9. Coexisting)72 84 R(in the Class Hierar)2.5 E(chy)-.18 E F0 .737
(The early chapters of this paper discussed classes in one of two ways.)97 99.6
R .738(The "toy" classes we devel-)5.738 F 1.339(oped were rooted at Object; t\
he system-provided classes were treated as immutable entities.)72 111.6 R 1.339
(While one)6.339 F(shouldn')72 123.6 Q 3.401(tm)-.18 G .901
(odify the behavior of the standard classes lightly)120.781 123.6 R 3.401(,")
-.65 G .902(plugging in" your own classes in the right)330.559 123.6 R(place a\
mong their system-provided brethren can provide you powerful new classes with \
very little ef)72 135.6 Q(fort.)-.18 E .872(This chapter will create two compl\
ete classes which enhance the existing Smalltalk hierarchy)97 151.2 R 5.872(.T)
-.65 G(he)494.56 151.2 Q .349(discussion will start with the issue of where to\
 connect our new classes, and then continue onto implemen-)72 163.2 R 4.08
(tation. Like)72 175.2 R 1.58(most programming ef)4.08 F 1.58
(forts, the result will leave many possibilities for improvements.)-.18 F(The)
6.58 E(framework, however)72 187.2 Q 2.5(,s)-.4 G(hould begin to give you an i\
ntuition of how to develop your own Smalltalk classes.)163.79 187.2 Q F1 2.5
(9.1. The)72 211.2 R(Existing Class Hierar)2.5 E(chy)-.18 E F0 1.469 -.7(To d)
97 226.8 T .069(iscuss where a new class might go, it is helpful to have a map\
 of the current classes.).7 F .069(The follow-)5.069 F .399
(ing is the class hierarchy of GNU Smalltalk 1.1.1.)72 238.8 R .399
(Indentation means that the line inherits from the earlier)5.399 F
(line with one less level of indentation.)72 250.8 Q/F2 7/Times-Roman@0 SF(22)
224.49 246.7 Q .32 LW 144 698.2 72 698.2 DL/F3 5.6/Times-Roman@0 SF(22)82
706.72 Q/F4 8/Times-Roman@0 SF .532(This listing is courtesy of the printHiera\
rchy method supplied by GNU Smalltalk author Steve Byrne.)2 3.28 N(If)4.533 E
(you have the GNU Smalltalk source, it')72 720 Q 2(si)-.44 G 2(nt)205.768 720 S
(he samples/ directory)213.992 720 Q(.)-.52 E EP
%%Page: 27 27
BP/F0 10/Times-Roman@0 SF(-27-)279.67 48 Q(Object)108 84 Q(Autoload)118 96 Q
(Behavior)118 108 Q(ClassDescription)128 120 Q(Class)138 132 Q(Metaclass)138
144 Q(BlockContext)118 156 Q(Boolean)118 168 Q(False)128 180 Q -.35(Tr)128 192
S(ue).35 E(CFunctionDescriptor)118 204 Q(CObject)118 216 Q(Collection)118 228 Q
(Bag)128 240 Q(MappedCollection)128 252 Q(SequenceableCollection)128 264 Q
(ArrayedCollection)138 276 Q(Array)148 288 Q(ByteArray)148 300 Q
(CompiledMethod)148 312 Q(String)148 324 Q(Symbol)158 336 Q(Interval)138 348 Q
(LinkedList)138 360 Q(Semaphore)148 372 Q(OrderedCollection)138 384 Q
(SortedCollection)148 396 Q(Set)128 408 Q(Dictionary)138 420 Q
(IdentityDictionary)148 432 Q(SystemDictionary)148 444 Q(Delay)118 456 Q
(FileSegment)118 468 Q(Link)118 480 Q(Process)128 492 Q(SymLink)128 504 Q
(Magnitude)118 516 Q(Character)128 528 Q(Date)128 540 Q(LookupKey)128 552 Q
(Association)138 564 Q(Number)128 576 Q(Float)138 588 Q(Integer)138 600 Q -.35
(Ti)128 612 S(me).35 E(Memory)118 624 Q(ByteMemory)128 636 Q -.8(Wo)128 648 S
(rdMemory).8 E(Message)118 660 Q(MethodContext)118 672 Q(MethodInfo)118 684 Q
(ProcessorScheduler)118 696 Q(SharedQueue)118 708 Q(Stream)118 720 Q EP
%%Page: 28 28
BP/F0 10/Times-Roman@0 SF(-28-)279.67 48 Q(PositionableStream)128 84 Q
(ReadStream)138 96 Q -.4(Wr)138 108 S(iteStream).4 E(ReadW)148 120 Q
(riteStream)-.4 E(FileStream)158 132 Q(Random)128 144 Q -.7(To)128 156 S
(kenStream).7 E(Unde\214nedObject)118 168 Q .446(While initially a daunting li\
st, you should take the time to hunt down the classes we've examined in)97
189.6 R 1.428(this paper so far)72 201.6 R 6.428(.N)-.55 G 1.428(otice, for in\
stance, how an Array is a subclass below the "SequenceableCollection")156.032
201.6 R 2.572(class. This)72 213.6 R .072
(makes sense; you can walk an Array from one end to the other)2.572 F 5.072(.B)
-.55 G 2.572(yc)383.86 213.6 S .072(ontrast, notice how a Set is)395.872 213.6
R .06(at the same level as SequenceableCollection.)72 225.6 R .06(It doesn')
5.06 F 2.56(tm)-.18 G .06(ake sense to walk a Set from one end to the other)
305.04 225.6 R(.)-.55 E 2.936(Al)97 241.2 S .435(ittle puzzling is the relatio\
nship of a Dictionary to a Set; why is a Dictionary a subclass of a Set?)
109.936 241.2 R .362
(The answer lies in the basic structure of both a Set and a Dictionary)72 253.2
R 5.363(.B)-.65 G .363(oth hold an unordered collection of)361.375 253.2 R
3.422(objects. For)72 265.2 R 3.422(as)3.422 G .922(et, they're)137.816 265.2 R
/F1 10/Times-Italic@0 SF(any)3.422 E F0 .922(objects; for a Dictionary)3.422 F
3.422(,t)-.65 G .922(hey are Associations.)308.86 265.2 R .922
(Thus, Dictionary inherits)5.922 F(some of the more basic mechanisms for creat\
ing itself, and then adds an extra layer of interpretation.)72 277.2 Q(Finally)
97 292.8 Q 2.791(,l)-.65 G .291
(ook at the treatment of numbers\212starting with the class Magnitude.)132.761
292.8 R .292(While numbers can be)5.292 F 1.138
(ordered by "less than", "greater than", and so forth, so can a number of)72
304.8 R F1(other)3.638 E F0 3.638(objects. Each)3.638 F 1.138(subclass of)3.638
F .652(Magnitude is such an object.)72 316.8 R .653
(So we can compare characters with other characters, dates with other dates,)
5.652 F(and times with other times, as well as numbers with numbers.)72 328.8 Q
/F2 7/Times-Roman@0 SF(23)318.65 324.7 Q/F3 10/Times-Bold@0 SF 2.5(9.2. Those)
72 352.8 R(Darn Arrays)2.5 E F0 .502(Imagine that you're chasing an array prob\
lem, and the lack of a clear bounds check is making it too)97 368.4 R 3.096
(hard. Y)72 380.4 R .596
(ou could modify the Smalltalk implementation, but perhaps it')-1 F 3.096(si)
-.55 G 3.096(ns)367.79 380.4 S .596(omebody else')379.776 380.4 R 3.096(sd)-.55
G(irectory)450.408 380.4 Q 3.096(,s)-.65 G 3.096(oi)490.344 380.4 S(t)501.22
380.4 Q(wouldn')72 392.4 Q 3.119(tb)-.18 G 3.119(ep)116.049 392.4 S 3.119
(ractical. Why)128.608 392.4 R .619
(not add a subclass, put some sanity checks in the array indexing, and use our)
3.119 F(superclass to do all the work?)72 404.4 Q .32 LW 144 708.2 72 708.2 DL
/F4 5.6/Times-Roman@0 SF(23)82 716.72 Q/F5 8/Times-Roman@0 SF
(Ignore LookupKey; its presence appears to be historical.)2 3.28 M EP
%%Page: 29 29
BP/F0 10/Times-Roman@0 SF(-29-)279.67 48 Q
(Array variableSubclass: #CheckedArray)108 84 Q(instanceV)133 96 Q
(ariableNames: ')-1.11 E(')-.74 E(classV)133 108 Q(ariableNames: ')-1.11 E(')
-.74 E(poolDictionaries: ')133 120 Q(')-.74 E(category: nil !)133 132 Q
(!CheckedArray methodsFor: 'bounds checking'!)108 156 Q(boundsCheck: index)108
168 Q(\(\(index < 1\) | \(index > \(self basicSize\)\)\) ifT)133 180 Q(rue: [)
-.35 E(^self illegalIndex)158 192 Q(])133 204 Q(!)108 216 Q(illegalIndex)108
228 Q(^self error: 'Illegal index')133 240 Q(!!)108 252 Q
(!CheckedArray methodsFor: 'basic'!)108 276 Q(at: index)108 288 Q
(self boundsCheck: index.)133 300 Q(^super at: index)133 312 Q(!)108 336 Q
(at: index put: val)108 348 Q(self boundsCheck: index.)133 360 Q
(^super at: index put: val)133 372 Q(!!)108 384 Q .32
(Much of the machinery of adding a class should be familiar)97 405.6 R 5.32(.I)
-.55 G .32(nstead of our usual subclass: message,)349.09 405.6 R .566
(we use a variableSubclass: message.)72 417.6 R .565
(This re\215ects the underlying structure of an Array object; we'll delay)5.566
F 1.005(discussing this until the chapter on the nuts and bolts of arrays.)72
429.6 R 1.006(In any case, we)6.006 F/F1 10/Times-Italic@0 SF(inherit)3.506 E
F0 1.006(all of the actual)3.506 F .418
(knowledge of how to create arrays, reference them, and so forth.)72 441.6 R
.417(All that we do is intercept at: and at:put:)5.417 F .906
(messages, and call our common function to validate the array index.)72 453.6 R
.907(The way that we coded the bounds)5.907 F
(check bears a little examination.)72 465.6 Q 3.062(Making a \214rst cut at co\
ding the bounds check, you might have coded the bounds check in)97 481.2 R
(CheckedArray')72 493.2 Q 4.236(sm)-.55 G 1.736
(ethods twice\212once for at:, and again for at:put:.)148.996 493.2 R 1.737
(As always, it')6.737 F 4.237(sp)-.55 G 1.737(referable to code)433.336 493.2 R
(things)72 505.2 Q F1(once,)2.918 E F0 .418(and then re-use them.)2.918 F .417
(So we instead add a method for bounds checking "boundsCheck:", and)5.418 F
.673(use it for both cases.)72 517.2 R .674(If we ever wanted to enhance the b\
ounds checking \(perhaps enhance the error mes-)5.674 F(sage to print the of)72
529.2 Q(fending index value?\), we only have to change it in one place.)-.18 E
.059(The actual math for calculating whether the bounds have been violated is \
a little interesting.)97 544.8 R .059(The \214rst)5.059 F
(part of the expression:)72 556.8 Q
(\(\(index < 1\) | \(index > \(self basicSize\)\)\))108 574.8 Q .283
(is true if the index is less than 1, otherwise it')72 592.8 R 2.783(sf)-.55 G
2.783(alse. This)266.213 592.8 R .283
(part of the expression thus becomes the boolean)2.783 F 1.155
(object true or false.)72 604.8 R 1.154
(The boolean object then receives the message "|", and the ar)6.154 F 1.154
(gument "\(index > \(self)-.18 F 3.173(basicSize\)\)". "|")72 616.8 R .674
(means "or"\212we want to OR together the two possible illegal range checks.)
3.173 F .674(What is the)5.674 F(second part of the expression?)72 628.8 Q/F2 7
/Times-Roman@0 SF(24)193.08 624.7 Q F0 .719("index" is our ar)97 644.4 R .719(\
gument, an integer; it receives the message ">", and thus will compare itself \
to the)-.18 F .45(value "self basicSize" returns.)72 656.4 R .451
(While we haven')5.45 F 2.951(tc)-.18 G .451
(overed the underlying structures Smalltalk uses to build)277.803 656.4 R .134
(arrays, we can brie\215y say that the "basicSize" message returns the number \
of elements the Array object can)72 668.4 R .32 LW 144 676.4 72 676.4 DL/F3 5.6
/Times-Roman@0 SF(24)82 684.92 Q/F4 8/Times-Roman@0 SF .227(Smalltalk also of)2
3.28 N .227(fers an "or:" message, which is dif)-.144 F .227
(ferent in a subtle way from "|".)-.144 F .227(or: takes a code block,)4.227 F
.248(and only invokes the code block if it')72 698.2 R 2.248(sn)-.44 G .248
(ecessary to determine the value of the expression.)201.976 698.2 R .248
(This is analogous to)4.248 F .612(the guaranteed C semantic that "&&" evaluat\
es left-to-right only as far as needed.)72 708.2 R 1.892 -.64(We c)4.612 H .612
(ould have written the).64 F .337
(expressions as "\(\(index < 1\) or: [index > \(self basicSize\)]\)".)72 718.2
R .337(Since we expect both sides of or: to be false most)4.337 F
(of the time, there isn')72 728.2 Q 2(tm)-.144 G
(uch reason to delay evaluation of either side.)150.96 728.2 Q EP
%%Page: 30 30
BP/F0 10/Times-Roman@0 SF(-30-)279.67 48 Q 2.929(contain. So)72 84 R .429
(the index is checked to see if it')2.929 F 2.929(sl)-.55 G .43
(ess than 1 \(the lowest legal Array index\) or greater than the)261.83 84 R
(highest allocated slot in the Array)72 96 Q 5(.I)-.65 G 2.5(fi)217.44 96 S 2.5
(ti)226.05 96 S 2.5(se)234.11 96 S
(ither \(the "|" operator\), the expression is true, otherwise false.)244.94 96
Q .976(From there it')97 111.6 R 3.476(sd)-.55 G .976
(ownhill; our boolean object receives the ifT)166.318 111.6 R .976
(rue: message, and a code block which)-.35 F .563
(will send an error message to the object.)72 123.6 R .563
(Why do we have a separate message just to print the error?)5.563 F(For)5.563 E
.358(purposes of this example, it')72 135.6 R 2.857(sn)-.55 G .357(ot needed.)
198.229 135.6 R .357(But one could conceive, in general, of a couple of dif)
5.357 F .357(ferent san-)-.18 F .987(ity checks all sharing the same mechanism\
 for actually printing the error message.)72 147.6 R .987
(So we'll write it this)5.987 F(way anyway)72 159.6 Q(.)-.65 E/F1 10
/Times-Bold@0 SF 2.5(9.3. Adding)72 183.6 R 2.5(aN)2.5 G(ew Kind of Number)
140.9 183.6 Q F0 .263(If we were programming an application which did a lar)97
199.2 R .263(ge amount of complex math, we could proba-)-.18 F .362
(bly manage it with a number of two-element arrays.)72 211.2 R .363
(But we'd forever be writing in-line code for the math)5.363 F .038(and compar\
isons; it would be much easier to just implement an object class to support th\
e complex numeric)72 223.2 R 2.5(type. Where)72 235.2 R
(in the class hierarchy would it be placed?)2.5 E -1(Yo)97 250.8 S 1.525
(u've probably already guessed\212but let')1 F 4.025(ss)-.55 G 1.526
(tep down the hierarchy anyway)286.095 250.8 R(.)-.65 E/F2 10/Times-Italic@0 SF
(Everything)6.526 E F0(inherits)4.026 E .464(from Object, so that')72 262.8 R
2.964(sas)-.55 G .464(afe starting point.)174.31 262.8 R .463
(Complex numbers can not be compared with "<" and ">", and)5.463 F .759(yet we\
 strongly suspect that, since they are numbers, we should place them under the\
 Number class.)72 274.8 R(But)5.759 E 1.361
(Number inherits from Magnitude--how do we resolve this con\215ict?)72 286.8 R
3.861(As)6.361 G 1.36(ubclass can place itself under a)373.07 286.8 R .38
(superclass which allows some operations the subclass doesn')72 298.8 R 2.881
(tw)-.18 G .381(ish to allow)331.491 298.8 R 5.381(.A)-.65 G .381
(ll that you must do is make)393.374 298.8 R 1.479
(sure you intercept these messages and return an error)72 310.8 R 6.479(.S)-.55
G 3.979(ow)309.981 310.8 S 3.979(ew)326.18 310.8 S 1.479
(ill place our new Complex class under)341.819 310.8 R(Number)72 322.8 Q 2.5
(,a)-.4 G(nd make sure to disallow comparisons.)113.81 322.8 Q .409(One can re\
asonably ask whether the real and imaginary parts of our complex number will b\
e integer)97 338.4 R 1.509(or \215oating point.)72 350.4 R 1.508(In the grand \
Smalltalk tradition, we'll just leave them as objects, and hope that they)6.509
F .106(respond to numeric messages reasonably)72 362.4 R 5.106(.I)-.65 G 2.606
(ft)246.01 362.4 S .106(hey don')254.726 362.4 R .107
(t, the user will doubtless receive errors and be able to)-.18 F
(track back their mistake with little fuss.)72 374.4 Q -.8(We)97 390 S .49('ll\
 de\214ne the four basic math operators, as well as the \(illegal\) relational\
s.).8 F -.8(We)5.49 G .49('ll add printOn: so).8 F .49
(that the printing methods work, and that should give us our Complex class.)72
402 R .491(The class as presented suf)5.491 F(fers)-.18 E
(some limitations, which we'll cover later in the chapter)72 414 Q(.)-.55 E EP
%%Page: 31 31
BP/F0 10/Times-Roman@0 SF(-31-)279.67 48 Q(Number subclass: #Complex)108 84 Q
(instanceV)133 96 Q(ariableNames: 'realpart imagpart')-1.11 E(classV)133 108 Q
(ariableNames: ')-1.11 E(')-.74 E(poolDictionaries: ')133 120 Q(')-.74 E
(category: nil !)133 132 Q(!Complex class methodsFor: 'creating'!)108 144 Q
(new)108 156 Q(^self error: 'use real:imaginary:')133 168 Q(!)108 180 Q
(new: ignore)108 192 Q(^self new)133 204 Q(!)108 216 Q(real: r imaginary: i)108
228 Q(^\(super new\) setReal: r setImag: i)133 240 Q(!!)108 252 Q
(!Complex methodsFor: 'creating--private'!)108 276 Q(setReal: r setImag: i)108
288 Q(realpart := r)133 300 Q(.)-.55 E(imagpart := i.)133 312 Q(^self)133 324 Q
(!!)108 336 Q(!Complex methodsFor: 'basic'!)108 360 Q(real)108 372 Q(^realpart)
133 384 Q(!)108 396 Q(imaginary)108 408 Q(^imagpart)133 420 Q(!!)108 432 Q
(!Complex methodsFor: 'math'!)108 456 Q 2.5(+v)108 468 S(al)121.14 468 Q
(^Complex real: \(realpart + \(val real\)\))133 480 Q
(imaginary: \(imagpart + \(val imaginary\)\))158 492 Q(!)108 504 Q 2.5(-v)108
516 S(al)118.83 516 Q(^Complex real: \(realpart - \(val real\)\))133 528 Q
(imaginary: \(imagpart - \(val imaginary\)\))158 540 Q(!)108 552 Q 2.5(*v)108
564 S(al)120.5 564 Q(^Complex real: \(\(realpart * \(val real\)\) - \(imagpart\
 * \(val imaginary\)\)\))133 576 Q
(imaginary: \(\(realpart * \(val imaginary\)\) +)158 588 Q
(\(imagpart * \(val real\)\)\))183 600 Q(!)108 612 Q 2.5(/v)108 624 S(al)118.28
624 Q 2.5(|dri|)133 636 S 2.5(d:)133 648 S 2.5(=\()143.28 648 S
(\(val real\) * \(val real\)\) + \(\(val imaginary\) * \(val imaginary\)\).)
154.75 648 Q 2.5(r:)133 660 S 2.5(=\()141.61 660 S
(\(realpart * \(val real\)\) + \(imagpart * \(val imaginary\)\)\) / d.)153.08
660 Q 2.5(i:)133 672 S 2.5(=\()141.06 672 S
(\(imagpart * \(val real\)\) - \(realpart * \(val imaginary\)\)\) / d.)152.53
672 Q(^Complex real: r imaginary: i)133 684 Q(!!)108 696 Q
(!Complex methodsFor: 'comparison'!)108 720 Q EP
%%Page: 32 32
BP/F0 10/Times-Roman@0 SF(-32-)279.67 48 Q 2.5(=v)108 84 S(al)121.14 84 Q
(^\(\(realpart = \(val real\)\) & \(imagpart = \(val imaginary\)\)\))133 96 Q
(!)108 108 Q 2.5(>v)108 120 S(al)121.14 120 Q(^self shouldNotImplement)133 132
Q(!)108 144 Q(>= val)108 156 Q(^self shouldNotImplement)133 168 Q(!)108 180 Q
2.5(<v)108 192 S(al)121.14 192 Q(^self shouldNotImplement)133 204 Q(!)108 216 Q
(<= val)108 228 Q(^self shouldNotImplement)133 240 Q(!!)108 252 Q
(!Complex methodsFor: 'printing'!)108 276 Q(printOn: aStream)108 288 Q
(aStream nextPut: $\(.)133 300 Q(realpart printOn: aStream.)133 312 Q
(aStream nextPut: $,.)133 324 Q(imagpart printOn: aStream.)133 336 Q
(aStream nextPut: $\))133 348 Q(!!)108 360 Q .598
(There should be surprisingly little which is actually new in this example.)97
381.6 R .598(The printing method uses)5.598 F .506
(both printOn: as well as nextPut: to do its printing.)72 393.6 R .506
(While we haven')5.506 F 3.006(tc)-.18 G .506(overed it, it')364.214 393.6 R
3.006(sp)-.55 G .506(retty clear that "$\(")425.732 393.6 R 1.446
(generates the ASCII character "\(" as an object, and nextPut: puts its ar)72
405.6 R 1.446(gument as the next thing on the)-.18 F(stream.)72 417.6 Q .157(T\
he math operations all generate a new object, calculating the real and imagina\
ry parts, and invoking)97 433.2 R .58
(the Complex class to create the new object.)72 445.2 R .579
(Our creation code is a little more compact than earlier exam-)5.58 F .934(ple\
s; instead of using a local variable to name the newly-created object, we just\
 use the return value and)72 457.2 R .546
(send a message directly to the new object.)72 469.2 R .545
(Our initialization code explicitly returns self; what would hap-)5.546 F
(pen if we left this of)72 481.2 Q(f?)-.18 E/F1 7/Times-Roman@0 SF(25)160.41
477.1 Q/F2 10/Times-Bold@0 SF 2.5(9.4. Inheritance)72 505.2 R(and Polymorphism)
2.5 E F0 1.073(This is a good time to look at what we've done with the two pre\
vious examples at a higher level.)97 520.8 R -.4(Wi)72 532.8 S .352
(th the CheckedArray class, we).4 F/F3 10/Times-Italic@0 SF(inherited)2.852 E
F0 .352(almost all of the functionality of arrays, with only a little bit of)
2.852 F .488(code added to address our speci\214c needs.)72 544.8 R .488
(While you may have not thought to try it, all the existing meth-)5.488 F .703
(ods for an Array continue to work without further ef)72 556.8 R .703
(fort\212you might \214nd it interesting to ponder why the)-.18 F
(following still works:)72 568.8 Q
(Smalltalk at: #a put: \(CheckedArray new: 10\) !)108 586.8 Q 2.5(aa)108 598.8
S(t: 5 put: 1234 !)119.38 598.8 Q 2.5(ad)108 610.8 S(o: [:i| i printNl ] !)
119.94 610.8 Q 1.052(The strength of inheritance is that you focus on the incr\
emental changes you make; the things you)72 628.8 R F3(don')3.552 E(t)-1.11 E
F0(change will generally continue to work.)72 640.8 Q 1.238
(In the Complex class, the value of)97 656.4 R F3(polymorphism)3.738 E F0 1.238
(was exercised.)3.738 F 3.738(AC)6.238 G 1.238(omplex number responds to)
388.906 656.4 R .051(exactly the same set of messages as any other number)72
668.4 R 5.051(.I)-.55 G 2.55(fy)298.02 668.4 S .05
(ou had handed this code to someone, they would)308.9 668.4 R .838
(know how to do math with Complex numbers without further instruction.)72 680.4
R .838(Compare this with C, where a)5.838 F 2.897(complex number package would\
 require the user to \214rst \214nd out if the complex-add function was)72
692.4 R .32 LW 144 700.4 72 700.4 DL/F4 5.6/Times-Roman@0 SF(25)82 708.92 Q/F5
8/Times-Roman@0 SF .758(Hint: consider what the default return value is when n\
o explicit value is provided.)2 3.28 N .759(This was covered in)4.759 F
(chapter 4.)72 722.2 Q EP
%%Page: 33 33
BP/F0 10/Times-Roman@0 SF(-33-)279.67 48 Q
(complex_plus\(\), or perhaps complex_add\(\), or add_complex\(\), or)72 84 Q
(....)-.55 E/F1 10/Times-Bold@0 SF 2.5(9.5. Limitations)72 108 R
(of the Complex Class)2.5 E F0 .9(One glaring de\214ciency is present in the C\
omplex class\212what happens if you mix normal numbers)97 123.6 R .789
(with Complex numbers?)72 135.6 R(Currently)5.789 E 3.289(,t)-.65 G .789
(he Complex class assumes that it will only interact with other Com-)223.946
135.6 R .143(plex numbers.)72 147.6 R .143
(But this is unrealistic\212mathematically)5.143 F -5.142 2.643(,a ")-.65 H
.144(normal" number is simply one with an imaginary)306.422 147.6 R .165
(part of 0.)72 159.6 R .165(Smalltalk was designed to allow numbers to)5.165 F
/F2 10/Times-Italic@0 SF(coer)2.665 E(ce)-.37 E F0 .165
(themselves into a form which will work with)2.665 F(other numbers.)72 171.6 Q
.18(The system is clever and requires very little additional code.)97 187.2 R
(Unfortunately)5.181 E 2.681(,i)-.65 G 2.681(tw)408.286 187.2 S .181
(ould have tripled the)420.967 187.2 R .249(amount of explanation required.)72
199.2 R .249
(If you're interested in how coercion works in GNU Smalltalk, you should)5.249
F .071(\214nd the Smalltalk library source, and trace back the execution of th\
e retry:coercing: messages.)72 211.2 R -1(Yo)5.072 G 2.572(uw)1 G .072(ant to)
481.428 211.2 R .963(consider the value which the "generality" message returns\
 for each type of number)72 223.2 R 5.962(.F)-.55 G(inally)427.324 223.2 Q
3.462(,y)-.65 G .962(ou need to)460.416 223.2 R
(examine the coerce: handling in each numeric class.)72 235.2 Q EP
%%Page: 34 34
BP/F0 10/Times-Roman@0 SF(-34-)279.67 48 Q/F1 10/Times-Bold@0 SF 2.5
(10. Smalltalk)72 84 R(Str)2.5 E(eams)-.18 E F0 1.378
(Our examples have used a mechanism extensively)97 99.6 R 3.878(,e)-.65 G 1.378
(ven though we haven')316.504 99.6 R 3.878(td)-.18 G 1.378(iscussed it yet.)
420.706 99.6 R(The)6.378 E .583(Stream class provides a framework for a number\
 of data structures, including input and output functional-)72 111.6 R(ity)72
123.6 Q 3.143(,q)-.65 G .643
(ueues, and endless sources of dynamically-generated data.)92.553 123.6 R 3.143
(AS)5.643 G .644(malltalk stream is quite similar to the)351.247 123.6 R .204
(UNIX streams you've used from C.)72 135.6 R 2.704(As)5.204 G .204
(tream provides a sequential view to an underlying resource; as you)234.79
135.6 R 1.813(read or write elements, the stream position advances until you \
\214nally reach the end of the underlying)72 147.6 R 2.5(medium. Most)72 159.6
R(streams also allow you to)2.5 E/F2 10/Times-Italic@0 SF(set)2.5 E F0
(the current position, providing random access to the medium.)2.5 E F1 2.5
(10.1. The)72 183.6 R(Output Str)2.5 E(eam)-.18 E F0 .431
(The examples in this book all work because they write their output to the)97
199.2 R F1(stdout)2.931 E F0 2.931(stream. Each)2.931 F(class)2.931 E 1.689
(implements the printOn: method, and writes its output to the supplied stream.)
72 211.2 R 1.69(The printNl method all)6.69 F 1.121
(objects use is simply to send the current object a printOn: message whose ar)
72 223.2 R 1.121(gument is)-.18 F F1(stdout.)3.621 E F0 -1(Yo)6.121 G 3.621(uc)
1 G(an)494.56 223.2 Q(invoke the standard output stream directly:)72 235.2 Q
('Hello, world' printOn: stdout !)110.5 253.2 Q(stdout inspect !)110.5 265.2 Q
F1 2.5(10.2. Y)72 295.2 R(our Own Str)-1.11 E(eam)-.18 E F0 .268(Unlike a pipe\
 you might create in C, the underlying storage of a Stream is under your contr\
ol.)97 310.8 R(Thus,)5.269 E 2.673(aS)72 322.8 S .173
(tream can provide an anonymous buf)84.673 322.8 R .172
(fer of data, but it can also provide a stream-like interpretation to an)-.18 F
(existing array of data.)72 334.8 Q(Consider this example:)5 E
(Smalltalk at: #a put: \(Array new: 10\) !)108 352.8 Q 2.5(aa)108 364.8 S
(t: 4 put: 1234 !)119.38 364.8 Q 2.5(aa)108 376.8 S(t: 9 put: 5678 !)119.38
376.8 Q(Smalltalk at: #s put: \(ReadW)108 388.8 Q(riteStream on: a\) !)-.4 E
2.5(si)108 400.8 S(nspect !)117.17 400.8 Q 2.5(sp)108 412.8 S(osition: 1 !)
119.39 412.8 Q 2.5(si)108 424.8 S(nspect !)117.17 424.8 Q 2.5(sn)108 436.8 S
(extPut: 1)119.39 436.8 Q(1; nextPut: 22 !)-.37 E(\(a at: 1\) printNl !)108
448.8 Q 2.5(ad)108 460.8 S(o: [:x| x printNl] !)119.94 460.8 Q 2.5(sp)108 472.8
S(osition: 2 !)119.39 472.8 Q 2.5(sd)108 484.8 S(o: [:x| x printNl] !)119.39
484.8 Q 2.5(sp)108 496.8 S(osition: 5 !)119.39 496.8 Q 2.5(sd)108 508.8 S
(o: [:x| x printNl] !)119.39 508.8 Q 2.5(si)108 520.8 S(nspect !)117.17 520.8 Q
1.219(The key is the on: message; it tells a stream class to create itself in \
terms of the existing storage.)97 542.4 R 1.526(Because of polymorphism, the o\
bject speci\214ed by on: does not have to be an Array; any object which)72
554.4 R .596(responds to numeric at: messages can be used.)72 566.4 R .597
(If you happen to have the CheckedArray class still loaded)5.596 F
(from the previous chapter)72 578.4 Q 2.5(,y)-.4 G
(ou might try streaming over that kind of array instead.)184.63 578.4 Q -1(Yo)
97 594 S .324(u're wondering if you're stuck with having to know how much data\
 will be queued in a Stream at)1 F .562(the time you create the stream.)72 606
R .563(If you use the right class of stream, the answer is no.)5.562 F 3.063
(AR)5.563 G .563(eadStream pro-)442.067 606 R .001
(vides read-only access to an existing collection.)72 618 R -1(Yo)5.001 G 2.501
(uw)1 G .001(ill receive an error if you try to write to it.)293.748 618 R .001
(If you try)5.001 F(to read of)72 630 Q 2.5(ft)-.18 G
(he end of the stream, you will also get an error)118.75 630 Q(.)-.55 E .092
(By contrast, W)97 645.6 R .092(riteStream and ReadW)-.4 F .092
(riteStream \(used in our example\) will tell the underlying collec-)-.4 F .098
(tion to grow \(using the "grow" message\) when you write of)72 657.6 R 2.597
(ft)-.18 G .097(he end of the existing collection.)319.074 657.6 R .097
(Thus, if you)5.097 F(want to write several strings, and don')72 669.6 Q 2.5
(tw)-.18 G(ant to add up their lengths yourself:)237.35 669.6 Q EP
%%Page: 35 35
BP/F0 10/Times-Roman@0 SF(-35-)279.67 48 Q(Smalltalk at: #s put: \(ReadW)110.5
84 Q(riteStream on: \(String new: 0\)\) !)-.4 E 2.5(si)110.5 96 S(nspect !)
119.67 96 Q('Hello, ' printOn: s !)110.5 108 Q 2.5(si)110.5 120 S(nspect !)
119.67 120 Q('world' printOn: s !)110.5 132 Q 2.5(si)110.5 144 S(nspect !)
119.67 144 Q 2.5(sp)110.5 156 S(osition: 1 !)121.89 156 Q 2.5(si)110.5 168 S
(nspect !)119.67 168 Q 2.5(sd)110.5 180 S(o: [:c| c printOn: stdout] !)121.89
180 Q(\(s contents\) printNl !)110.5 192 Q .099
(In this case, we have used a String as the collection for the Stream.)97 213.6
R .1(The printOn: messages add bytes)5.1 F 1.06(to the initially empty string.)
72 225.6 R 1.059
(Once we've added the data, you can continue to treat the data as a stream.)
6.06 F(Alternatively)72 237.6 Q 3.546(,y)-.65 G 1.046
(ou can ask the stream to return to you the underlying object.)135.166 237.6 R
1.046(After that, you can use the)6.046 F
(object \(a String, in this example\) using its own access methods.)72 249.6 Q
1.31(There are many amenities available on a stream object.)97 265.2 R -1(Yo)
6.309 G 3.809(uc)1 G 1.309(an ask if there')358.477 265.2 R 3.809(sm)-.55 G
1.309(ore to read with)437.033 265.2 R 2.952("atEnd". Y)72 277.2 R .453
(ou can query the position with "position", and set it with "position:".)-1 F
-1(Yo)5.453 G 2.953(uc)1 G .453(an see what will be)425.538 277.2 R
(read next with "peek", and you can read the next element with "next".)72 289.2
Q .925(In the writing direction, you can write an element with "nextPut:".)97
304.8 R -1(Yo)5.924 G 3.424(ud)1 G(on')401.614 304.8 Q 3.424(tn)-.18 G .924
(eed to worry about)425.968 304.8 R 2.326(objects doing a printOn: with your s\
tream as a destination; this operation ends up as a sequence of)72 316.8 R
(nextPut:')72 328.8 Q 3.317(st)-.55 G 3.317(oy)118.107 328.8 S .817
(our stream.)131.424 328.8 R .817(If you have a collection of things to write,\
 you can use "nextPutAll:" with the)5.817 F .803(collection as an ar)72 340.8 R
.804(gument; each member of the collection will be written onto the stream.)
-.18 F .804(If you want to)5.804 F
(write an object to the stream several times, you can use "next:put:":)72 352.8
Q(Smalltalk at: #s put: \(ReadW)108 370.8 Q
(riteStream on: \(Array new: 0\)\) !)-.4 E 2.5(sn)108 382.8 S
(ext: 4 put: 'Hi!' !)119.39 382.8 Q 2.5(sp)108 394.8 S(osition: 1 !)119.39
394.8 Q 2.5(sd)108 406.8 S(o: [:x| x printNl] !)119.39 406.8 Q/F1 10
/Times-Bold@0 SF 2.5(10.3. Files)72 436.8 R F0 .196
(Streams can also operate on \214les.)97 452.4 R .196
(If you wanted to dump the \214le "/etc/passwd" to your terminal, you)5.196 F
(could create a stream on the \214le, and then stream over its contents:)72
464.4 Q(Smalltalk at: #f put: \(FileStream open: '/etc/passwd' mode: 'r)108
482.4 Q('\) !).37 E 2.5(fd)108 494.4 S(o: [:c| c printOn: stdout] !)118.83
494.4 Q 2.5(fp)108 506.4 S(osition: 30 !)118.83 506.4 Q 2.5(1t)108 518.4 S
(o: 25 do: [\(f next\) printOn: stdout] !)118.28 518.4 Q 2.5(fc)108 530.4 S
(lose !)118.27 530.4 Q(and, of course, you can load Smalltalk source code:)72
548.4 Q(FileStream \214leIn: '/users/myself/src/source.st' !)108 566.4 Q F1 2.5
(10.4. Dynamic)72 596.4 R(Strings)2.5 E F0 .625
(Streams provide a powerful abstraction for a number of data structures.)97 612
R .625(Concepts like current posi-)5.625 F .006(tion, writing the next positio\
n, and changing the way you view a data structure when convenient combine to)72
624 R .251(let you write compact, powerful code.)72 636 R .251
(The last example is taken from the actual Smalltalk source code\212it)5.251 F
(shows a general method for making an object print itself onto a a string.)72
648 Q EP
%%Page: 36 36
BP/F0 10/Times-Roman@0 SF(-36-)279.67 48 Q(printString)108 84 Q 2.5(|s)118 96 S
(tream |)126.39 96 Q(stream := W)118 108 Q(riteStream on: \(String new: 0\).)
-.4 E(self printOn: stream.)118 120 Q(^stream contents)118 132 Q(!)108 144 Q
1.516
(This method, residing in Object, is inherited by every class in Smalltalk.)97
165.6 R 1.516(The \214rst line creates a)6.516 F -.4(Wr)72 177.6 S .683
(iteStream which stores on a String whose length is currently 0.).4 F .684
(It then invokes the current object with)5.684 F 3.131(printOn:. As)72 189.6 R
.631(the object prints itself to "stream", the String grows to accommodate new\
 characters.)3.131 F(When)5.63 E
(the object is done printing, the method simply returns the underlying string.)
72 201.6 Q .458(As we've written code, the assumption has been that printOn: w\
ould go to the terminal.)97 217.2 R .459(But replac-)5.459 F .169(ing a stream\
 to a \214le \(/dev/tty\) with a stream to a data structure \(String new: 0\) \
works just as well.)72 229.2 R .169(The last)5.169 F 1.443(line tells the Stre\
am to return its underlying collection\212which will be the string which has h\
ad all the)72 241.2 R .7(printing added to it.)72 253.2 R .699(The result is t\
hat the printString message returns an object of the String class whose)5.7 F(\
contents are the printed representation of the object receiving the printStrin\
g message.)72 265.2 Q EP
%%Page: 37 37
BP/F0 10/Times-Roman@0 SF(-37-)279.67 48 Q/F1 10/Times-Bold@0 SF -.55(11)72 84
S 5(.H).55 G(ow Arrays W)96.73 84 Q(ork)-.55 E F0 .038(Smalltalk provides a ve\
ry adequate selection of prede\214ned classes from which to choose.)97 99.6 R
(Eventually)5.039 E(,)-.65 E(however)72 111.6 Q 2.845(,y)-.4 G .345
(ou will \214nd the need to code a new basic data structure.)116.375 111.6 R
.345(Because Smalltalk')5.345 F 2.845(sm)-.55 G .345(ost fundamental)439.495
111.6 R .393(storage allocation facilities are arrays, it is important that yo\
u understand how to use them to gain ef)72 123.6 R(\214cient)-.18 E
(access to this kind of storage.)72 135.6 Q F1 -.55(11)72 159.6 S 2.5(.1. The)
.55 F(Array Class)2.5 E F0 .703(Our examples have already shown the Array clas\
s, and its use is fairly obvious.)97 175.2 R .702(For many applica-)5.702 F
.062(tions, it will \214ll all your needs\212when you need an array in a new c\
lass, you keep an instance variable, allo-)72 187.2 R(cate a new Array and ass\
ign it to the variable, and then send array accesses via the instance variable\
.)72 199.2 Q .175(This technique even works for string-like objects, although \
it is wasteful of storage.)97 214.8 R .174(An Array object)5.174 F .626(uses a)
72 226.8 R/F2 10/Times-Italic@0 SF .626(Smalltalk pointer)3.126 F F0 .627
(for each slot in the array; its exact size is transparent to the programmer)
3.127 F 3.127(,b)-.4 G .627(ut you)478.093 226.8 R .129
(can generally guess that it'll be roughly the word size of your machine.)72
238.8 R/F3 7/Times-Roman@0 SF(26)358.218 234.7 Q F0 .129
(For storing an array of characters,)367.847 238.8 R
(therefore, an Array works but is inef)72 250.8 Q(\214cient.)-.18 E F1 -.55(11)
72 274.8 S 2.5(.2. Arrays).55 F(at a Lower Level)2.5 E F0 .066(So let')97 290.4
R 2.566(ss)-.55 G .066(tep down to a lower level of data structure.)133.252
290.4 R 2.567(aB)5.067 G .067(yteArray is much like an Array)323.874 290.4 R
2.567(,b)-.65 G .067(ut each slot)458.316 290.4 R .217(holds only an integer f\
rom 0 to 255\212and each slot uses only a byte of storage.)72 302.4 R .217
(If you only needed to store)5.217 F .363
(small quantities in each array slot, this would therefore be a much more ef)72
314.4 R .363(\214cient choice than an Array)-.18 F 5.363(.A)-.65 G(s)500.11
314.4 Q(you might guess, this is the type of array which a String uses.)72
326.4 Q 2.99(Aha! But)97 342 R .49
(when you go back to chapter 9 and look at the Smalltalk hierarchy)2.99 F 2.989
(,y)-.65 G .489(ou notice that String)421.143 342 R(does)72 354 Q F2(not)2.612
E F0 .112(inherit from ByteArray)2.612 F 5.112(.T)-.65 G 2.612(os)213.69 354 S
.112(ee why)225.192 354 R 2.613(,w)-.65 G 2.613(em)265.587 354 S .113
(ust delve down yet another level, and arrive at the basic)280.42 354 R
(methods for compiling a class.)72 366 Q
(For most example classes, we've used the message:)97 381.6 Q(subclass:)133
399.6 Q(instanceV)133 411.6 Q(ariableNames:)-1.11 E(classV)133 423.6 Q
(ariableNames:)-1.11 E(poolDictionaries:)133 435.6 Q(category:)133 447.6 Q .842
(But when we implemented our CheckedArray example, we used "variableSubclass:"\
 instead of just "sub-)72 465.6 R 2.944(class:". The)72 477.6 R .444(choice of\
 these two kinds of class creation \(and a third we'll show shortly\) de\214ne\
s the funda-)2.944 F .106
(mental structure of Smalltalk objects created within a given class.)72 489.6 R
(Let')5.106 E 2.606(sc)-.55 G .106(onsider the dif)367.85 489.6 R .106
(ferences in the next)-.18 F(three sub-sections.)72 501.6 Q F1 -.55(11)72 525.6
S 2.5(.2.1. subclass:).55 F F0 1.079
(This kind of class creation speci\214es the simplest Smalltalk object.)97
541.2 R 1.08(The object consists only of the)6.079 F 1.211
(storage needed to hold the instance variables.)72 553.2 R 1.21
(In C, this would be a simple structure with zero or more)6.211 F
(scalar \214elds.)72 565.2 Q F3(27)121.99 561.1 Q F1 -.55(11)72 589.2 S 2.5
(.2.2. variableSubclass:).55 F F0 .16
(This type of class is a superset of a subclass:.)97 604.8 R .161
(Storage is still allocated for any instance variables, but)5.161 F .543
(the objects of the class must be created with a new: message.)72 616.8 R .543
(The number passed as an ar)5.543 F .543(gument to new:)-.18 F .065(causes the\
 new object, in addition to the space for instance variables, to also have tha\
t many slots of storage)72 628.8 R 3.062(allocated. The)72 640.8 R .561(analog\
 in C would be to have a structure with some scalar \214elds, followed at its \
end by an)3.062 F(array of the requested size of pointers.)72 652.8 Q .32 LW
144 696.4 72 696.4 DL/F4 5.6/Times-Roman@0 SF(26)82 704.92 Q/F5 8/Times-Roman@0
SF(32 bits for most ports of GNU Smalltalk.)2 3.28 M F4(27)82 716.72 Q F5 2(Cr)
2 3.28 O(equires one or more; zero is allowed in Smalltalk.)99.6 720 Q EP
%%Page: 38 38
BP/F0 10/Times-Roman@0 SF(-38-)279.67 48 Q/F1 10/Times-Bold@0 SF -.55(11)72 84
S 2.5(.2.3. variableByteSubclass:).55 F F0 .825(This is a special case of vari\
ableSubclass:; the storage allocated as speci\214ed by new: is an array of)97
99.6 R/F2 10/Times-Italic@0 SF(bytes.)72 111.6 Q F0(The analog in C would be a\
 structure with scalar \214elds, followed by an array of)5 E F2(char)2.5 E(.)
-1.11 E F1 -.55(11)72 135.6 S 2.5(.3. Accessing).55 F(These New Arrays)2.5 E F0
-1(Yo)97 151.2 S 2.844(ua)1 G .343
(lready know how to access instance variables\212by name.)120.504 151.2 R .343
(But there doesn')5.343 F 2.843(ts)-.18 G .343(eem to be a name)432.648 151.2 R
.628(for this new storage.)72 163.2 R .629(The way an object accesses it is to\
 send itself array-type messages\212at:, at:put:, and)5.629 F(so forth.)72
175.2 Q .562(The problem is when an object wants to add a new level of interpr\
etation to the at: and at:put: mes-)97 190.8 R 3.184(sages. Consider)72 202.8 R
3.184(aD)3.184 G .685(ictionary\212it is a variableSubclass: type of object, b\
ut its at: message is in terms of a)155.982 202.8 R F2(key)72 214.8 Q(,)-.55 E
F0 .187(not an integer index of its storage.)2.687 F .187
(Since it has rede\214ned the at: message, how does it access its funda-)5.187
F(mental storage?)72 226.8 Q .483(The answer is that Smalltalk has de\214ned b\
asicAt: and basicAt:put:, which will access the basic stor)97 242.4 R(-)-.2 E(\
age even when the at: and at:put: messages have been de\214ned to provide a di\
f)72 254.4 Q(ferent abstraction.)-.18 E F1 -.55(11)72 278.4 S 2.5(.4. An).55 F
(Example)2.5 E F0 .224(This can get pretty confusing in the abstract, so let')
97 294 R 2.724(sd)-.55 G 2.724(oa)315.05 294 S 2.724(ne)327.214 294 S .223
(xample to show how it')339.378 294 R 2.723(sp)-.55 G .223(retty simple in)
445.774 294 R 2.5(practice. Smalltalk)72 306 R(arrays tend to start at 1; let')
2.5 E 2.5(sd)-.55 G(e\214ne an array type whose permissible range is arbitrary)
272.81 306 Q(.)-.65 E(ArrayedCollection variableSubclass: 'RangedArray')108 324
Q(instanceV)133 336 Q(ariableNames: 'base')-1.11 E(classV)133 348 Q
(ariableNames: ')-1.11 E(')-.74 E(poolDictionaries: ')133 360 Q(')-.74 E
(category: nil !)133 372 Q
(RangedArray comment: 'I am an Array whose base is arbitrary' !)108 384 Q
(!RangedArray class methodsFor: 'creation'!)108 396 Q(new)108 408 Q
(^self error: 'Use new:base:')133 420 Q(!)108 432 Q(new: ignore)108 444 Q
(^self new)133 456 Q(!)108 468 Q(new: size base: b)108 480 Q
(^\(super new: size\) init: b)133 492 Q(!!)108 504 Q EP
%%Page: 39 39
BP/F0 10/Times-Roman@0 SF(-39-)279.67 48 Q(!RangedArray methodsFor: 'init'!)108
84 Q(init: b)108 96 Q(base := \(b - 1\).)133 108 Q
("- 1 because basicAt: works with a 1 base")208 108 Q(^self)133 120 Q(!!)108
132 Q(!RangedArray methodsFor: 'basic'!)108 144 Q(rangeCheck: i)108 156 Q
(\(\(i <= base\) | \(i > \(base + \(self basicSize\)\)\)\) ifT)133 168 Q
(rue: [)-.35 E('Bad index value: ' printOn: stderr)158 180 Q(.)-.55 E 2.5(ip)
158 192 S(rintOn: stderr)168.28 192 Q(.)-.55 E
(\(Character nl\) printOn: stderr)158 204 Q(.)-.55 E
(^self error: 'illegal index')158 216 Q(])133 228 Q(!)108 240 Q(at: i)108 252 Q
(self rangeCheck: i.)133 264 Q(^self basicAt: \(i-base\))133 276 Q(!)108 288 Q
(at: i put: v)108 300 Q(self rangeCheck: i.)133 312 Q
(^self basicAt: \(i-base\) put: v)133 324 Q(!!)108 336 Q .154(The code has two\
 parts; an initialization, which simply records what index you wish the array \
to start)97 357.6 R 1.448(with, and the at: messages, which adjust the request\
ed index so that the underlying storage receives its)72 369.6 R .285
(1-based index instead.)72 381.6 R -.8(We)5.285 G .285('ve included a range ch\
eck much like CheckedArray; its utility will demonstrate).8 F
(itself in a moment:)72 393.6 Q
(Smalltalk at: #a put: \(RangedArray new: 10 base: 5\) !)108 411.6 Q 2.5(aa)108
423.6 S(t: 5 put: 0 !)119.38 423.6 Q 2.5(aa)108 435.6 S(t: 4 put: 1 !)119.38
435.6 Q .058(Since 4 is below our base of 5, a range check error occurs.)72
453.6 R .057(But this check can catch more than just our own)5.058 F
(misbehavior!)72 465.6 Q 2.5(ad)108 483.6 S(o: [:x| x printNl] !)119.94 483.6 Q
(Our do: message handling is broken!)72 501.6 Q
(The stack backtrace pretty much tells the story:)5 E
(RangedArray>>#rangeCheck:)108 519.6 Q(RangedArray>>#at:)108 531.6 Q
(MethodContext>>#value:)108 543.6 Q(Integer>>#to:by:do:)108 555.6 Q
(Integer>>#to:do:)108 567.6 Q(RangedArray>>#do:)108 579.6 Q .322
(Our code received a do: message.)72 597.6 R 1.923 -.8(We d)5.323 H(idn').8 E
2.823(td)-.18 G .323(e\214ne one, so we inherited the existing do: handling.)
260.77 597.6 R 1.923 -.8(We s)5.323 H(ee).8 E 2.06(that an Integer loop was co\
nstructed, that a code block was invoked, and that our own at: code was)72
609.6 R 3.568(invoked. When)72 621.6 R 1.068
(we range checked, we trapped an illegal index.)3.568 F 1.068
(Just by coincidence, this version of our)6.068 F
(range checking code also dumps the index.)72 633.6 Q 1.6 -.8(We s)5 H
(ee that do: has assumed that all arrays start at 1.).8 E
(The immediate \214x is obvious; we implement our own do:)97 649.2 Q EP
%%Page: 40 40
BP/F0 10/Times-Roman@0 SF(-40-)279.67 48 Q(!RangedArray methodsFor: 'basic'!)
108 84 Q(do: aBlock)108 96 Q 2.5(1t)133 108 S(o: \(self basicSize\) do: [:x|)
143.28 108 Q(aBlock value: \(self basicAt: x\))158 120 Q(])133 132 Q(!!)108 144
Q .27(But the issues start to run deep.)72 162 R .269
(If our parent class believed that it knew enough to assume a starting index)
5.27 F 1.527(of 1, why didn')72 174 R 4.027(ti)-.18 G 4.027(ta)147.648 174 S
1.527(lso assume that)158.895 174 R/F1 10/Times-Italic@0 SF(it)4.027 E F0 1.528
(could call basicAt:?)4.028 F 1.528(Object-oriented methodology says that one)
6.528 F 1.217(object should be entirely opaque to another)72 186 R 6.217(.B)
-.55 G 1.216(ut what sort of privacy should there be between a higher)266.889
186 R .649(class and its subclasses?)72 198 R .649
(How many assumption can a subclass make about its superclass, and how many)
5.649 F .739(can the superclass make before it begins infringing on the sovere\
ignty of its subclasses?)72 210 R .738(There are rarely)5.738 F(easy answers.)
72 222 Q/F2 10/Times-Bold@0 SF -.55(11)72 246 S 2.5(.5. Basic).55 F(Allocation)
2.5 E F0 .872(In this chapter)97 261.6 R 3.372(,w)-.4 G .872
(e've seen the fundamental mechanisms used to allocate and index storage.)
168.646 261.6 R(When)5.873 E .533
(the storage need not be accessed with peak ef)72 273.6 R(\214ciency)-.18 E
3.033(,y)-.65 G .533(ou can use the existing array classes.)299.237 273.6 R
.532(When every)5.533 F 1.316(access counts, having the storage be an integral\
 part of your own object allows for the quickest access.)72 285.6 R .287(When \
you move into this area of object development, inheritance and polymorphism be\
come trickier; each)72 297.6 R
(level must coordinate its use of the underlying array with other levels.)72
309.6 Q EP
%%Page: 41 41
BP/F0 10/Times-Roman@0 SF(-41-)279.67 48 Q/F1 10/Times-Bold@0 SF 2.5
(12. Further)72 84 R(Studies)2.5 E F0 1.764
(The question is always how far to go in one document.)97 99.6 R 1.765
(At this point, you know how to create)6.765 F 2.928(classes. Y)72 111.6 R .428
(ou know how to use inheritance, polymorphism, and the basic storage managemen\
t mechanisms)-1 F .294(of Smalltalk.)72 123.6 R -1(Yo)5.294 G .294
(u've also seen a sampling of Smalltalk')1 F 2.794(sp)-.55 G .294
(owerful classes.)311.136 123.6 R .295(The rest of this chapter simply)5.295 F
.923(points out areas for further study; perhaps a newer version of this docum\
ent might cover these in further)72 135.6 R(chapters.)72 147.6 Q F1 2.5
(12.1. V)72 171.6 R(iewing the Smalltalk Sour)-.37 E(ce Code)-.18 E F0 .32
(Depending on the thoroughness of the person who installed GNU Smalltalk, it')
97 187.2 R 2.82(sp)-.55 G .32(ossible to view the)428.32 187.2 R
(source code for a system method.)72 199.2 Q
(For instance, to see how a Dictionary processes a do: message:)5 E
(Dictionary edit: #do: !)108 217.2 Q(The viewer is hard-coded as emacs; this m\
ay or may not work at your installation.)72 235.2 Q F1 2.5(12.2. Other)72 259.2
R -.55(Wa)2.5 G(ys to Collect Objects).55 E F0 -.8(We)97 274.8 S 1.037
('ve seen Array).8 F 3.537(,B)-.65 G(yteArray)183.071 274.8 Q 3.537(,D)-.65 G
(ictionary)231.218 274.8 Q 3.537(,S)-.65 G 1.037(et, and the various streams.)
277.715 274.8 R -1(Yo)6.037 G 1.036(u'll want to look at the)1 F .54
(Bag, LinkedList, and SortedCollection classes.)72 286.8 R .54
(For special purposes you'll want to examine ByteMemory)5.54 F(and W)72 298.8 Q
(ordMemory)-.8 E(.)-.65 E F1 2.5(12.3. Flow)72 322.8 R(of Contr)2.5 E(ol)-.18 E
F0 .069(GNU Smalltalk has rudimentary support for)97 338.4 R/F2 10
/Times-Italic@0 SF(thr)2.569 E(eads)-.37 E F0 .069(of execution.)2.569 F .068
(The state is embodied in a Process)5.069 F
(class object; you'll also want to look at the ProcessorScheduler class.)72
350.4 Q F1 2.5(12.4. Smalltalk)72 374.4 R -.37(Vi)2.5 G(rtual Machine).37 E F0
.485(GNU Smalltalk is implemented as a virtual instruction set.)97 390 R .486
(By invoking GNU Smalltalk with the -d)5.485 F .285(option, you can view the b\
yte opcodes which are generated as \214les on the command line are loaded.)72
402 R(Simi-)5.285 E(larly)72 414 Q 2.5(,r)-.65 G(unning GNU Smalltalk with -e \
will trace the execution of instructions in your methods.)98.01 414 Q -1(Yo)97
429.6 S 2.924(uc)1 G .424(an look at the GNU Smalltalk source to gain more inf\
ormation on the instruction set.)120.584 429.6 R 2.925(Ab)5.425 G(etter)486.23
429.6 Q .45(\214rst step if you want to pursue this subject is to start with "\
A Little Smalltalk"" by T)72 441.6 R .45(im Budd.)-.35 F .45(The source)5.45 F
.137(code is freely available, and the book provides a solid introduction to S\
malltalk-type virtual machines.)72 453.6 R(The)5.137 E
(canonical book is from the original designers of Smalltalk:)72 465.6 Q
(Smalltalk-80: The Language and its Implementation)108 483.6 Q 2.5(-A)133 495.6
S(dele Goldber)146.05 495.6 Q 2.5(ga)-.18 G(nd David Robson)209.74 495.6 Q F1
2.5(12.5. T)72 525.6 R(wo Flavors of Equality)-.74 E F0 .347(As \214rst seen i\
n chapter two, Smalltalk keys its dictionary with things like "#word", whereas\
 we gen-)97 541.2 R 1.457(erally use "'word'".)72 553.2 R 1.457(The former)
6.457 F 3.957(,a)-.4 G 3.957(si)217.555 553.2 S 3.957(tt)228.182 553.2 S 1.457
(urns out, is from class Symbol.)237.699 553.2 R 1.458
(The latter is from class String.)6.457 F(What')72 565.2 Q 3.573(st)-.55 G
1.073(he real dif)106.683 565.2 R 1.073(ferent between a Symbol and a String?)
-.18 F 2.473 -.7(To a)6.073 H 1.073(nswer the question, we'll use an analogy).7
F(from C.)72 577.2 Q(In C, if you have a function for comparing strings, you m\
ight try to write it:)97 592.8 Q(strcpy\(char *p, char *q\))108 610.8 Q({)108
622.8 Q(return \(p == q\);)133 634.8 Q(})108 646.8 Q .201
(But clearly this is wrong!)72 664.8 R .201(The reason is that you can have tw\
o copies of a string\212each with the same con-)5.201 F 1.118
(tents\212but each at its own address.)72 676.8 R 3.618(Ac)6.118 G 1.117
(orrect string compare must walk its way through the strings and)237.856 676.8
R(compare each element.)72 688.8 Q .146(In Smalltalk, exactly the same issue e\
xists, although the details of manipulating storage addresses are)97 704.4 R
4.41(hidden. If)72 716.4 R 1.91
(we have two Smalltalk strings, both with the same contents, we don')4.41 F
4.41(tn)-.18 G 1.91(ecessarily know if)427.42 716.4 R
(they're at the same storage address.)72 728.4 Q(In Smalltalk terms, we don')5
E 2.5(tk)-.18 G(now if they're the)340.66 728.4 Q F2(same object.)2.5 E EP
%%Page: 42 42
BP/F0 10/Times-Roman@0 SF(-42-)279.67 48 Q .331
(The Smalltalk dictionary is searched frequently)97 84 R 5.332(.T)-.65 G 2.832
(os)300.938 84 S .332(peed the search, it would be nice to not have to)312.66
84 R .104
(compare the characters of each element, but only compare the address itself.)
72 96 R 1.504 -.7(To d)5.104 H 2.603(ot).7 G .103(his, you need to have a)
411.835 96 R
(guarantee that all strings with the same contents are the same object.)72 108
Q(The String class, created like:)5 E 2.5(y:)108 126 S 2.5(=')118.28 126 S
(Hello' !)129.75 126 Q .671(does not satisfy this.)72 144 R .671
(Each time you execute this line, you may well get a new object.)5.671 F .672
(But a very similar)5.672 F(class, Symbol, will always return the same object:)
72 156 Q 2.5(y:)108 174 S 2.5(=#)118.28 174 S(Hello !)131.42 174 Q .009
(In general, you can use strings for almost all your tasks.)72 192 R .008
(If you ever get into a performance-critical function)5.008 F .355
(which looks up strings, you can switch to Symbol.)72 204 R .356
(It takes longer to create a Symbol, and the memory for)5.356 F 2.603(aS)72 216
S .103(ymbol is never freed \(since the class has to keep tabs on it inde\214n\
itely to guarantee it continues to return)84.603 216 R(the same object\).)72
228 Q -1(Yo)5 G 2.5(uc)1 G(an use it, but use it with care.)168.2 228 Q/F1 10
/Times-Bold@0 SF 2.5(12.6. Checking)72 252 R(for the T)2.5 E(wo T)-.74 E
(ypes of Equality)-.74 E F0 .831
(This paper has generally used the strcmp\(\)-ish kind of checks for equality)
97 267.6 R 5.831(.I)-.65 G 3.331(fy)411.812 267.6 S .832(ou ever need to ask)
423.473 267.6 R(the question "is this the same object?", you use the "==" oper\
ator instead of "=":)72 279.6 Q(Smalltalk at: #x put: 0 !)108 297.6 Q
(Smalltalk at: #y put: 0 !)108 309.6 Q 2.5(x:)108 321.6 S 2.5(=')118.28 321.6 S
(Hello' !)129.75 321.6 Q 2.5(y:)108 333.6 S 2.5(=')118.28 333.6 S(Hello' !)
129.75 333.6 Q(\(x = y\) printNl !)108 345.6 Q(\(x == y\) printNl !)108 357.6 Q
2.5(x:)108 369.6 S 2.5(=#)118.28 369.6 S(Hello !)131.42 369.6 Q 2.5(y:)108
381.6 S 2.5(=#)118.28 381.6 S(Hello !)131.42 381.6 Q(\(x = y\) printNl !)108
393.6 Q(\(x == y\) printNl !)108 405.6 Q .78
(Using C terms, the former compares contents like strcmp\(\).)97 427.2 R .78
(The latter compares storage addresses,)5.78 F(like a pointer comparison.)72
439.2 Q F1 2.5(12.7. Wher)72 463.2 R 2.5(et)-.18 G 2.5(og)131.53 463.2 S
(et Help)144.03 463.2 Q F0 1.06(The newsgroup comp.lang.smalltalk is read by m\
any people with a great deal of Smalltalk experi-)97 478.8 R 3.422(ence. There)
72 490.8 R .921(are several commercial Smalltalk implementations; you can buy \
support for these, though it)3.422 F(isn')72 502.8 Q 2.971(tc)-.18 G 2.971
(heap. For)97.011 502.8 R .471(the GNU Smalltalk system in particular)2.971 F
2.971(,y)-.4 G .472(ou can try the newsgroup gnu.smalltalk.bug.)311.749 502.8 R
(If)5.472 E(all else fails, you can try the author at:)72 514.8 Q
(jtk@netcom.com)108 532.8 Q(No guarantees, but the author will do his best!)72
550.8 Q F1 2.5(12.8. Acknowledgments)72 574.8 R F0 .333
(Thanks to Steve Byrne for writing GNU Smalltalk in the \214rst place.)97 590.4
R .332(Great thanks to Mark Bush and)5.332 F .318(Bob Roos for their meticulou\
s jobs of proofreading this document, and the generous amounts of input they)72
602.4 R .8(provided on re\214nements to the contents and structure.)72 614.4 R
.799(Thanks also to Andrew Ber)5.799 F 3.299(gf)-.18 G .799(or his comments on)
422.993 614.4 R(the early chapters of the document.)72 626.4 Q 1.248
(Any remaining errors are purely the fault of the author)97 642 R 6.248(.T)-.55
G 1.248(his document is provided as-is, without)340.54 642 R(warranty)72 654 Q
2.876(,b)-.65 G .376(ut I will happily accept reports of any errors.)117.266
654 R .375(If time permits, I will perhaps even release a cor)5.375 F(-)-.2 E
(rected revision of the document.)72 666 Q 3.166(Ir)97 681.6 S .666(elease thi\
s document into the public domain, and simply request that you acknowledge me \
as the)106.826 681.6 R
(original author in any use or derivative work you make of this document.)72
693.6 Q EP
%%Page: 43 43
BP/F0 10/Times-Roman@0 SF(-43-)279.67 48 Q(Andy V)208 84 Q(alencia)-1.11 E
(325 Union A)208 96 Q(ve #359)-.74 E(Campbell, CA)208 108 Q(95008)5 E
(jtk@netcom.com)208 120 Q(November 27, 1992)208 132 Q EP
%%Page: 44 44
BP/F0 10/Times-Roman@0 SF(-44-)279.67 48 Q/F1 16/Times-Roman@0 SF(APPENDIX A)
240.672 84 Q 4(AS)158.448 96 S(imple Overview of Smalltalk Syntax)182.896 96 Q
F0(Smalltalk')97 159.6 Q 3.063(sp)-.55 G .562
(ower comes from its treatment of objects.)150.073 159.6 R .562
(In this document, we've mostly avoided the)5.562 F 1.135
(issue of syntax by using strictly parenthesized expressions as needed.)72
171.6 R 1.136(When this leads to code which is)6.136 F 1.379
(hard to read due to the density of parentheses,)72 183.6 R 3.879(ak)6.379 G
1.379(nowledge of Smalltalk')286.3 183.6 R 3.879(ss)-.55 G 1.378
(yntax can let you simplify)394.047 183.6 R 2.744(expressions. In)72 195.6 R
.244(general, if it was hard for you to tell how an expression would parse, it\
 will be hard for the)2.744 F(next person, too.)72 207.6 Q .944(The following \
presentation presents the grammar a couple of related elements at a time.)97
223.2 R 2.544 -.8(We u)5.944 H .944(se a).8 F(BNF style of grammar)72 235.2 Q
2.5(,w)-.4 G(ith some extensions.)174.09 235.2 Q(The form:)5 E 2.5([.)108 253.2
S(.. ])116.33 253.2 Q(means that "..." can occur zero or one times.)72 271.2 Q
2.5([.)108 289.2 S(.. ]*)116.33 289.2 Q(means zero or more;)72 307.2 Q 2.5([.)
108 325.2 S(.. ]+)116.33 325.2 Q(means one or more.)72 343.2 Q
(... | ... [ | ... ]*)110.5 361.2 Q .679
(means that one of the variants must be chosen.)72 379.2 R .679
(Characters in double quotes refer to the literal characters.)5.679 F .155(Mos\
t elements may be separated by white space; where this is not legal, the eleme\
nts are presented without)72 391.2 R(white space between them.)72 403.2 Q
(methods: "!" id ["class"] "methodsFor:" string "!" [method "!"] "!")108 445.2
Q .852(Methods are introduced by \214rst naming a class \(the)72 463.2 R/F2 10
/Times-Italic@0 SF(id)3.352 E F0 .852
(element\), specifying "class" if you're adding class)3.352 F 1.25
(methods instead of instance methods, and sending a string ar)72 475.2 R 1.25
(gument to the methodsFor: message.)-.18 F(Each)6.25 E
(method is terminated with an "!"; two "!"')72 487.2 Q 2.5(si)-.55 G 2.5(nar)
248.87 487.2 S(ow signify the end of the new methods.)266.64 487.2 Q
(method: message [prim] [temps] exprs)108 517.2 Q
(message: id | binsel id | [keysel id]+)108 529.2 Q
(prim: "<" "primitive:" number ">")108 541.2 Q(temps: "|" [id]* "|")108 553.2 Q
3.569(Am)72 571.2 S 1.069
(ethod de\214nition starts out with a kind of template.)90.569 571.2 R 1.07
(The message to be handled is speci\214ed with the)6.069 F 1.193
(message names spelled out and identi\214ers in the place of ar)72 583.2 R
3.693(guments. A)-.18 F 1.193(special kind of de\214nition is the)3.693 F F2
(primitive;)72 595.2 Q F0 .496(it has not been covered in this paper; it provi\
des an interface to the underlying Smalltalk virtual)2.996 F(machine.)72 607.2
Q F2(temps)5.953 E F0 .953(is the declaration of local variables.)3.453 F
(Finally)5.953 E(,)-.65 E F2(exprs)3.452 E F0 .952
(\(covered soon\) is the actual code for)3.452 F(implementing the method.)72
619.2 Q(unit: id | literal | block | "\(" expr "\)")108 649.2 Q
(unaryexpr: unit [ id ]+)108 661.2 Q(primary: unit | unaryexpr)108 673.2 Q .554
(These are the "building blocks" of Smalltalk expressions.)72 691.2 R(A)5.555 E
F2(unit)3.055 E F0 .555(represents a single Smalltalk value, with)3.055 F 1.277
(the highest syntactic precedence.)72 703.2 R(A)6.277 E F2(unaryexpr)3.776 E F0
1.276(is simply a)3.776 F F2(unit)3.776 E F0 1.276
(which receives a number of unary mes-)3.776 F 4.156(sages. A)72 715.2 R F2
(unaryexpr)4.156 E F0 1.656(has the next highest precedence.)4.156 F(A)6.656 E
F2(primary)4.157 E F0 1.657(is simply a convenient left-hand-side)4.157 F
(name for one of the above.)72 727.2 Q EP
%%Page: 45 45
BP/F0 10/Times-Roman@0 SF(-45-)279.67 48 Q(exprs: [expr "."]* [["^"] expr])108
84 Q(expr: [id ":="]* expr2)108 96 Q(expr2: primary | msgexpr [ ";" cascade ]*)
108 108 Q 2.718(As)72 126 S .218(equence of expressions is separated by "."')
85.828 126 R 2.718(sa)-.55 G .218(nd can end with a returned value \("^"\).)
268.804 126 R .217(There can be lead-)5.218 F .248
(ing assignments; unlike C, assignments apply only to simple variable names.)72
138 R .248(An expression is either a pri-)5.248 F .418
(mary \(with highest precedence\) or a more complex message.)72 150 R/F1 10
/Times-Italic@0 SF(cascade)5.417 E F0 .417(does not apply to)2.917 F F1
(primary)2.917 E F0(construc-)2.917 E .12
(tions, as they are too simple to require the construct--since all)72 162 R F1
(primary)2.621 E F0 .121(construct are unary)2.621 F 2.621(,y)-.65 G .121
(ou can just add)443.367 162 R(more unary messages:)72 174 Q
(1234 printNl printNl printNl !)108 192 Q
(msgexpr: unaryexpr | binexpr | keyexpr)108 228 Q 2.543(Ac)72 246 S .042(omple\
x message is either a unary message \(which we have already covered\), a binar\
y message \("+", "-",)86.203 246 R 1.212
(and so forth\), or a keyword message \("at:", "new:", ....\))72 258 R 1.212
(Unary has the highest precedence, followed by)6.212 F(binary)72 270 Q 3.906
(,a)-.65 G 1.406(nd keyword messages have the lowest precedence.)107.746 270 R
1.405(Examine the two versions of the following)6.406 F 2.5(messages. The)72
282 R(second have had parentheses added to show the default precedence.)2.5 E
(myvar at: 2 + 3 put: 4)108 300 Q(mybool ifT)108 312 Q
(rue: [ ^ 2 / 4 roundup ])-.35 E(\(myvar at: \(2 + 3\) put: \(4\)\))108 348 Q
(\(mybool ifT)108 360 Q(rue: \([ ^ \(2 / \(4 roundup\)\) ]\)\))-.35 E
(cascade: id | binmsg | keymsg)108 396 Q(A)72 414 Q F1(cascade)3.413 E F0 .914
(is used to direct further messages to the same object which was last used.)
3.413 F .914(The three types of)5.914 F(messages \()72 426 Q F1(id)2.5 E F0
(is how you send a unary message\) can thus be sent.)2.5 E
(binexpr: primary binmsg [ binmsg ]*)108 456 Q(binmsg: binsel primary)108 468 Q
(binsel: selchar[selchar])108 480 Q 2.569(Ab)72 498 S .069
(inary message is sent to an object, which)86.789 498 R F1(primary)2.569 E F0
.069(has identi\214ed.)2.569 F .069(Each binary message is a binary selec-)
5.069 F(tor)72 510 Q 3.812(,c)-.4 G 1.312
(onstructed from one or two characters, and an ar)93.462 510 R 1.313
(gument which is also provided by a examples)-.18 F F1(pri-)A(mary)72 522 Q(.)
-.55 E F0(Some)A 2.5(1+2-3/4)108 540 S(which parses as:)72 558 Q
(\(\(\(1 + 2\) - 3\) / 4\))108 576 Q(keyexpr: keyexpr2 keymsg)108 612 Q
(keyexpr2: binexpr | primary)108 624 Q(keymsg: [keysel keyw2]+)108 636 Q
(keysel: id":")108 648 Q .399(Keyword expressions are much like binary express\
ions, except that the selectors are made up of identi\214ers)72 666 R .11
(with a colon appended.)72 678 R .11(Where the ar)5.11 F .111
(guments to a binary function can only be from)-.18 F F1(primary)2.611 E(,)-.55
E F0 .111(the ar)2.611 F(guments)-.18 E .336
(to a keyword can be binary expressions or)72 690 R F1(primary)2.836 E F0 2.836
(ones. This)2.836 F .336(is because keywords have the lowest prece-)2.836 F
(dence.)72 702 Q EP
%%Page: 46 46
BP/F0 10/Times-Roman@0 SF(-46-)279.67 48 Q
(block: "[" [[":" id]* "|" ] exprs "]")108 84 Q 2.778(Ac)72 102 S .279
(ode block is square brackets around a collection of Smalltalk expressions.)
86.438 102 R .279(The leading ": id" part is for)5.279 F(block ar)72 114 Q
(guments.)-.18 E(literal: number | string | charconst | symconst | arrayconst)
108 144 Q(arrayconst: "#" array)108 156 Q
(array: "\(" [number | string | symbol | array | charconst]* "\)")108 168 Q
(number: [[dig]+ "r"] ["-"] [hexDig]+ ["." [hexDig]+] ["e"["-"][dig]+].)108 180
Q(string: "'"[char]*"'")108 192 Q(charconst: "$"char)108 204 Q
(symconst: "$"symbol)108 216 Q 2.283 -.8(We h)72 234 T .683
(ave already shown the use of many of these constants.).8 F .683
(Although not covered in this paper)5.683 F 3.182(,n)-.4 G(umbers)474.56 234 Q
.115(can have a base speci\214ed at their front, and a trailing scienti\214c n\
otation.)72 246 R 1.716 -.8(We h)5.116 H .116(ave seen examples of charac-).8 F
(ter)72 258 Q 2.5(,s)-.4 G(tring, and symbol constants.)91.04 258 Q
(Array constants are simple enough; they would look like:)5 E
(Smalltalk at: #a put: #\(1 2 'Hi' $x $Hello 4 5\) !)108 276 Q
(symbol: id | binsel | keysel[keysel]*)108 312 Q .231
(Symbols are mostly used to represent the names of methods.)72 330 R .231
(Thus, they can hold simple identi\214ers, binary)5.231 F
(selectors, and keyword selectors:)72 342 Q($hello)108 360 Q($+)108 372 Q
($at:put:)108 384 Q(id: letter[letter|dig]*)108 420 Q
(selchar: "+" | "-" | "*" | "/" | "~" | "|" | "," |)108 432 Q
("<" | ">" | "=" | "&")133 444 Q(hexdig: "0".."9" | "A".."F")108 456 Q
(dig: "0".."9")108 468 Q .63(These are the categories of characters and how th\
ey are combined at the most basic level.)72 486 R/F1 10/Times-Italic@0 SF
(selchar)5.63 E F0(simply)3.13 E
(lists the characters which can be combined to name a binary message.)72 498 Q
EP
%%Trailer
end
