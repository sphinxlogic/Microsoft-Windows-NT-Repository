%!PS-Adobe-3.0
%%Creator: Windows PSCRIPT
%%Title: Microsoft Word - WINSOCK.DOC
%%BoundingBox: 14 9 597 784
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%Pages: (atend)
%%BeginResource: procset Win35Dict 3 1
/Win35Dict 290 dict def Win35Dict begin/bd{bind def}bind def/in{72
mul}bd/ed{exch def}bd/ld{load def}bd/tr/translate ld/gs/gsave ld/gr
/grestore ld/M/moveto ld/L/lineto ld/rmt/rmoveto ld/rlt/rlineto ld
/rct/rcurveto ld/st/stroke ld/n/newpath ld/sm/setmatrix ld/cm/currentmatrix
ld/cp/closepath ld/ARC/arcn ld/TR{65536 div}bd/lj/setlinejoin ld/lc
/setlinecap ld/ml/setmiterlimit ld/sl/setlinewidth ld/scignore false
def/sc{scignore{pop pop pop}{0 index 2 index eq 2 index 4 index eq
and{pop pop 255 div setgray}{3{255 div 3 1 roll}repeat setrgbcolor}ifelse}ifelse}bd
/FC{bR bG bB sc}bd/fC{/bB ed/bG ed/bR ed}bd/HC{hR hG hB sc}bd/hC{
/hB ed/hG ed/hR ed}bd/PC{pR pG pB sc}bd/pC{/pB ed/pG ed/pR ed}bd/sM
matrix def/PenW 1 def/iPen 5 def/mxF matrix def/mxE matrix def/mxUE
matrix def/mxUF matrix def/fBE false def/iDevRes 72 0 matrix defaultmatrix
dtransform dup mul exch dup mul add sqrt def/fPP false def/SS{fPP{
/SV save def}{gs}ifelse}bd/RS{fPP{SV restore}{gr}ifelse}bd/EJ{gsave
showpage grestore}bd/#C{userdict begin/#copies ed end}bd/FEbuf 2 string
def/FEglyph(G  )def/FE{1 exch{dup 16 FEbuf cvrs FEglyph exch 1 exch
putinterval 1 index exch FEglyph cvn put}for}bd/SM{/iRes ed/cyP ed
/cxPg ed/cyM ed/cxM ed 72 100 div dup scale dup 0 ne{90 eq{cyM exch
0 eq{cxM exch tr -90 rotate -1 1 scale}{cxM cxPg add exch tr +90 rotate}ifelse}{cyP
cyM sub exch 0 ne{cxM exch tr -90 rotate}{cxM cxPg add exch tr -90
rotate 1 -1 scale}ifelse}ifelse}{pop cyP cyM sub exch 0 ne{cxM cxPg
add exch tr 180 rotate}{cxM exch tr 1 -1 scale}ifelse}ifelse 100 iRes
div dup scale 0 0 transform .25 add round .25 sub exch .25 add round
.25 sub exch itransform translate}bd/SJ{1 index 0 eq{pop pop/fBE false
def}{1 index/Break ed div/dxBreak ed/fBE true def}ifelse}bd/ANSIVec[
16#0/grave 16#1/acute 16#2/circumflex 16#3/tilde 16#4/macron 16#5/breve
16#6/dotaccent 16#7/dieresis 16#8/ring 16#9/cedilla 16#A/hungarumlaut
16#B/ogonek 16#C/caron 16#D/dotlessi 16#27/quotesingle 16#60/grave
16#7C/bar 16#82/quotesinglbase 16#83/florin 16#84/quotedblbase 16#85
/ellipsis 16#86/dagger 16#87/daggerdbl 16#88/circumflex 16#89/perthousand
16#8A/Scaron 16#8B/guilsinglleft 16#8C/OE 16#91/quoteleft 16#92/quoteright
16#93/quotedblleft 16#94/quotedblright 16#95/bullet 16#96/endash 16#97
/emdash 16#98/tilde 16#99/trademark 16#9A/scaron 16#9B/guilsinglright
16#9C/oe 16#9F/Ydieresis 16#A0/space 16#A1/exclamdown 16#A4/currency
16#A5/yen 16#A6/brokenbar 16#A7/section 16#A8/dieresis 16#A9/copyright
16#AA/ordfeminine 16#AB/guillemotleft 16#AC/logicalnot 16#AD/hyphen
16#AE/registered 16#AF/macron 16#B0/degree 16#B1/plusminus 16#B2/twosuperior
16#B3/threesuperior 16#B4/acute 16#B5/mu 16#B6/paragraph 16#B7/periodcentered
16#B8/cedilla 16#B9/onesuperior 16#BA/ordmasculine 16#BB/guillemotright
16#BC/onequarter 16#BD/onehalf 16#BE/threequarters 16#BF/questiondown
16#C0/Agrave 16#C1/Aacute 16#C2/Acircumflex 16#C3/Atilde 16#C4/Adieresis
16#C5/Aring 16#C6/AE 16#C7/Ccedilla 16#C8/Egrave 16#C9/Eacute 16#CA
/Ecircumflex 16#CB/Edieresis 16#CC/Igrave 16#CD/Iacute 16#CE/Icircumflex
16#CF/Idieresis 16#D0/Eth 16#D1/Ntilde 16#D2/Ograve 16#D3/Oacute 16#D4
/Ocircumflex 16#D5/Otilde 16#D6/Odieresis 16#D7/multiply 16#D8/Oslash
16#D9/Ugrave 16#DA/Uacute 16#DB/Ucircumflex 16#DC/Udieresis 16#DD/Yacute
16#DE/Thorn 16#DF/germandbls 16#E0/agrave 16#E1/aacute 16#E2/acircumflex
16#E3/atilde 16#E4/adieresis 16#E5/aring 16#E6/ae 16#E7/ccedilla 16#E8
/egrave 16#E9/eacute 16#EA/ecircumflex 16#EB/edieresis 16#EC/igrave
16#ED/iacute 16#EE/icircumflex 16#EF/idieresis 16#F0/eth 16#F1/ntilde
16#F2/ograve 16#F3/oacute 16#F4/ocircumflex 16#F5/otilde 16#F6/odieresis
16#F7/divide 16#F8/oslash 16#F9/ugrave 16#FA/uacute 16#FB/ucircumflex
16#FC/udieresis 16#FD/yacute 16#FE/thorn 16#FF/ydieresis ] def/reencdict
12 dict def/IsChar{basefontdict/CharStrings get exch known}bd/MapCh{dup
IsChar not{pop/bullet}if newfont/Encoding get 3 1 roll put}bd/MapDegree{16#b0
/degree IsChar{/degree}{/ring}ifelse MapCh}bd/MapBB{16#a6/brokenbar
IsChar{/brokenbar}{/bar}ifelse MapCh}bd/ANSIFont{reencdict begin/newfontname
ed/basefontname ed FontDirectory newfontname known not{/basefontdict
basefontname findfont def/newfont basefontdict maxlength dict def basefontdict{exch
dup/FID ne{dup/Encoding eq{exch dup length array copy newfont 3 1 roll
put}{exch newfont 3 1 roll put}ifelse}{pop pop}ifelse}forall newfont
/FontName newfontname put 127 1 159{newfont/Encoding get exch/bullet
put}for ANSIVec aload pop ANSIVec length 2 idiv{MapCh}repeat MapDegree
MapBB newfontname newfont definefont pop}if newfontname end}bd/SB{FC
/ULlen ed/str ed str length fBE not{dup 1 gt{1 sub}if}if/cbStr ed
/dxGdi ed/y0 ed/x0 ed str stringwidth dup 0 ne{/y1 ed/x1 ed y1 y1
mul x1 x1 mul add sqrt dxGdi exch div 1 sub dup x1 mul cbStr div exch
y1 mul cbStr div}{exch abs neg dxGdi add cbStr div exch}ifelse/dyExtra
ed/dxExtra ed x0 y0 M fBE{dxBreak 0 BCh dxExtra dyExtra str awidthshow}{dxExtra
dyExtra str ashow}ifelse fUL{x0 y0 M dxUL dyUL rmt ULlen fBE{Break
add}if 0 mxUE transform gs rlt cyUL sl [] 0 setdash st gr}if fSO{x0
y0 M dxSO dySO rmt ULlen fBE{Break add}if 0 mxUE transform gs rlt cyUL
sl [] 0 setdash st gr}if n/fBE false def}bd/font{/name ed/Ascent ed
0 ne/fT3 ed 0 ne/fSO ed 0 ne/fUL ed/Sy ed/Sx ed 10.0 div/ori ed -10.0
div/esc ed/BCh ed name findfont/xAscent 0 def/yAscent Ascent def/ULesc
esc def ULesc mxUE rotate pop fT3{/esc 0 def xAscent yAscent mxUE transform
/yAscent ed/xAscent ed}if [Sx 0 0 Sy neg xAscent yAscent] esc mxE
rotate mxF concatmatrix makefont setfont [Sx 0 0 Sy neg 0 Ascent] mxUE
mxUF concatmatrix pop fUL{currentfont dup/FontInfo get/UnderlinePosition
known not{pop/Courier findfont}if/FontInfo get/UnderlinePosition get
1000 div 0 exch mxUF transform/dyUL ed/dxUL ed}if fSO{0 .3 mxUF transform
/dySO ed/dxSO ed}if fUL fSO or{currentfont dup/FontInfo get/UnderlineThickness
known not{pop/Courier findfont}if/FontInfo get/UnderlineThickness get
1000 div Sy mul/cyUL ed}if}bd/min{2 copy gt{exch}if pop}bd/max{2 copy
lt{exch}if pop}bd/CP{/ft ed{{ft 0 eq{clip}{eoclip}ifelse}stopped{currentflat
1 add setflat}{exit}ifelse}loop}bd/patfont 10 dict def patfont begin
/FontType 3 def/FontMatrix [1 0 0 -1 0 0] def/FontBBox [0 0 16 16]
def/Encoding StandardEncoding def/BuildChar{pop pop 16 0 0 0 16 16
setcachedevice 16 16 false [1 0 0 1 .25 .25]{pat}imagemask}bd end/p{
/pat 32 string def{}forall 0 1 7{dup 2 mul pat exch 3 index put dup
2 mul 1 add pat exch 3 index put dup 2 mul 16 add pat exch 3 index
put 2 mul 17 add pat exch 2 index put pop}for}bd/pfill{/PatFont patfont
definefont setfont/ch(AAAA)def X0 64 X1{Y1 -16 Y0{1 index exch M ch
show}for pop}for}bd/vert{X0 w X1{dup Y0 M Y1 L st}for}bd/horz{Y0 w
Y1{dup X0 exch M X1 exch L st}for}bd/fdiag{X0 w X1{Y0 M X1 X0 sub dup
rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup rlt st}for}bd/bdiag{X0 w
X1{Y1 M X1 X0 sub dup neg rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup
neg rlt st}for}bd/AU{1 add cvi 15 or}bd/AD{1 sub cvi -16 and}bd/SHR{pathbbox
AU/Y1 ed AU/X1 ed AD/Y0 ed AD/X0 ed}bd/hfill{/w iRes 37.5 div round
def 0.1 sl [] 0 setdash n dup 0 eq{horz}if dup 1 eq{vert}if dup 2 eq{fdiag}if
dup 3 eq{bdiag}if dup 4 eq{horz vert}if 5 eq{fdiag bdiag}if}bd/F{/ft
ed fm 256 and 0 ne{gs FC ft 0 eq{fill}{eofill}ifelse gr}if fm 1536
and 0 ne{SHR gs HC ft CP fm 1024 and 0 ne{/Tmp save def pfill Tmp restore}{fm
15 and hfill}ifelse gr}if}bd/S{PenW sl PC st}bd/m matrix def/GW{iRes
12 div PenW add cvi}bd/DoW{iRes 50 div PenW add cvi}bd/DW{iRes 8 div
PenW add cvi}bd/SP{/PenW ed/iPen ed iPen 0 eq iPen 6 eq or{[] 0 setdash}if
iPen 1 eq{[DW GW] 0 setdash}if iPen 2 eq{[DoW GW] 0 setdash}if iPen
3 eq{[DW GW DoW GW] 0 setdash}if iPen 4 eq{[DW GW DoW GW DoW GW] 0
setdash}if}bd/E{m cm pop tr scale 1 0 moveto 0 0 1 0 360 arc cp m sm}bd
/AG{/sy ed/sx ed sx div 4 1 roll sy div 4 1 roll sx div 4 1 roll sy
div 4 1 roll atan/a2 ed atan/a1 ed sx sy scale a1 a2 ARC}def/A{m cm
pop tr AG m sm}def/P{m cm pop tr 0 0 M AG cp m sm}def/RRect{n 4 copy
M 3 1 roll exch L 4 2 roll L L cp}bd/RRCC{/r ed/y1 ed/x1 ed/y0 ed/x0
ed x0 x1 add 2 div y0 M x1 y0 x1 y1 r arcto 4{pop}repeat x1 y1 x0 y1
r arcto 4{pop}repeat x0 y1 x0 y0 r arcto 4{pop}repeat x0 y0 x1 y0 r
arcto 4{pop}repeat cp}bd/RR{2 copy 0 eq exch 0 eq or{pop pop RRect}{2
copy eq{pop RRCC}{m cm pop/y2 ed/x2 ed/ys y2 x2 div 1 max def/xs x2
y2 div 1 max def/y1 exch ys div def/x1 exch xs div def/y0 exch ys div
def/x0 exch xs div def/r2 x2 y2 min def xs ys scale x0 x1 add 2 div
y0 M x1 y0 x1 y1 r2 arcto 4{pop}repeat x1 y1 x0 y1 r2 arcto 4{pop}repeat
x0 y1 x0 y0 r2 arcto 4{pop}repeat x0 y0 x1 y0 r2 arcto 4{pop}repeat
m sm cp}ifelse}ifelse}bd/PP{{rlt}repeat}bd/OB{gs 0 ne{7 3 roll/y ed
/x ed x y translate ULesc rotate x neg y neg translate x y 7 -3 roll}if
sc B fill gr}bd/B{M/dy ed/dx ed dx 0 rlt 0 dy rlt dx neg 0 rlt cp}bd
/CB{B clip n}bd/ErrHandler{errordict dup maxlength exch length gt
dup{errordict begin}if/errhelpdict 12 dict def errhelpdict begin/stackunderflow(operand stack underflow)def
/undefined(this name is not defined in a dictionary)def/VMerror(you have used up all the printer's memory)def
/typecheck(operator was expecting a different type of operand)def
/ioerror(input/output error occured)def end{end}if errordict begin
/handleerror{$error begin newerror{/newerror false def showpage 72
72 scale/x .25 def/y 9.6 def/Helvetica findfont .2 scalefont setfont
x y moveto(Offending Command = )show/command load{dup type/stringtype
ne{(max err string)cvs}if show}exec/y y .2 sub def x y moveto(Error = )show
errorname{dup type dup( max err string )cvs show( : )show/stringtype
ne{( max err string )cvs}if show}exec errordict begin errhelpdict errorname
known{x 1 add y .2 sub moveto errhelpdict errorname get show}if end
/y y .4 sub def x y moveto(Stack =)show ostack{/y y .2 sub def x 1
add y moveto dup type/stringtype ne{( max err string )cvs}if show}forall
showpage}if end}def end}bd end
%%EndResource
%%EndProlog
%%BeginSetup
Win35Dict begin
ErrHandler
statusdict begin 0 setjobtimeout end
statusdict begin statusdict /jobname (Microsoft Word - WINSOCK.DOC) put end
/oldDictCnt countdictstack def {}stopped 
{ countdictstack oldDictCnt lt { Win35Dict begin } 
{1 1 countdictstack oldDictCnt sub {pop end } for } ifelse } if 
/oldDictCnt countdictstack def {letter
}stopped 
{ countdictstack oldDictCnt lt { Win35Dict begin } 
{1 1 countdictstack oldDictCnt sub {pop end } for } ifelse } if 
[{ }
/exec load currenttransfer /exec load] cvx settransfer
/fPP true def
%%EndSetup
%%Page: 1 1
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
/bytestr 55 string def
/pp 1 string def/s 1 string def/rn{currentfile s readhexstring{0 get}{pop
exit}ifelse}def/unpack{/DC 0 def/BC 0 def{DC bytestr length ge{exit}if
rn/BC exch def BC 127 le{/BC BC 1 add def DC 1 DC BC add 1 sub{bytestr
exch rn put}for}{/BC BC 255 xor 2 add def rn/pp exch def DC 1 DC BC
add 1 sub{bytestr exch pp put}for}ifelse/DC DC BC add def}loop bytestr}bd
gs 615 422 915 545 CB
save 915 545 translate 615 422 scale
55 38 8
[55 0 0 -38 0 38]
{unpack} bind
image
caff
caff
d7ff010080f6ff
ddfffb000380c0ff00f8ff
deff0000fc80030080ff00f7ff
dfff0000fa8001ff00f6ff
e0ff0000fe80fcc0ff800000f7ff
e1ff0000fe80fac0018000f7ff
e1ff0000ff80f8c00000f7ff
f0fff280010080f7c00000f7ff
f2fff000028000fff8c00000f7ff
f2ff0000f1ffff000180fffac001ff00f7ff
f2ff0000f2ffff000380ff80fffcc001ff00f6ff
f2ff0000f3ffff000080ffff020080fffec001ff00f5ff
f2ff0000fcfff90002ff0080feff0200c000feff0000f4ff
f2ff0000fdfff8800000fcff0080ff00fe80f3ff
f2ff0000feff0080f8c0018000fdffff000080f0ff
f2ff0000ffff0480ffc08000fec0018000ffc0018000ffffff000080efff
f2ff0000ffff0480ffc08000fec0018000ffc0018000ffff0000ff80efff
f2ff0000ffff0480ffc08000fec0018000ffc0018000feff010080efff
f2ff0000ffff0480ffc08000fec0018000ffc0018000feff010080efff
f2ff0000ffff0280ffc0ff80fec0ff80ffc0018000feff010080efff
f2ff0000ffff0180fffec00080ff00fdc0018000feff010080efff
f2ff0000ffff0180fffec00080ff00fdc0018000feff010080efff
f2ff0000feff0180ffffc0fe80fec0018000fdff010080efff
f2ff0000fdff0080f9ff0000fcff010080efff
f2ff0000fcfff980fbff010080efff
f2ff0000eeff010080efff
f2ff0000eeff010080efff
f2ffec000080efff
f2ff0000fdff0000f31c010080efff
f2ff0100ffff0001ff00f31c010080efff
f2ff0000fdff0000f31c010080efff
f2ffec00eeff
caff
caff
caff
caff
restore
gr
255 255 255 fC
/fm 256 def
619 3 905 541 B
1 F
n
0 0 0 fC
/fm 256 def
5 11 893 529 B
1 F
n
/fm 256 def
11 5 893 529 B
1 F
n
/fm 256 def
5 5 899 535 B
1 F
n
/fm 256 def
5 5 899 535 B
1 F
n
/fm 256 def
619 5 905 529 B
1 F
n
/fm 256 def
619 5 905 535 B
1 F
n
/fm 256 def
5 11 1531 529 B
1 F
n
/fm 256 def
11 5 1525 529 B
1 F
n
/fm 256 def
5 5 1525 535 B
1 F
n
/fm 256 def
5 5 1525 535 B
1 F
n
/fm 256 def
5 425 893 541 B
1 F
n
/fm 256 def
5 425 899 541 B
1 F
n
/fm 256 def
5 425 1525 541 B
1 F
n
/fm 256 def
5 425 1531 541 B
1 F
n
/fm 256 def
11 425 1537 541 B
1 F
n
32 0 0 100 100 0 0 0 94 /Helvetica-Bold /font13 ANSIFont font
995 968 439 (Windows) 439 SB
/fm 256 def
5 116 893 967 B
1 F
n
/fm 256 def
5 116 899 967 B
1 F
n
/fm 256 def
5 116 1525 967 B
1 F
n
/fm 256 def
5 116 1531 967 B
1 F
n
/fm 256 def
11 116 1537 967 B
1 F
n
1022 1085 385 (Sockets) 385 SB
255 255 255 fC
/fm 256 def
619 3 905 1201 B
1 F
n
0 0 0 fC
/fm 256 def
5 11 893 1205 B
1 F
n
/fm 256 def
11 5 893 1211 B
1 F
n
/fm 256 def
5 5 899 1205 B
1 F
n
/fm 256 def
5 5 899 1205 B
1 F
n
/fm 256 def
619 5 905 1205 B
1 F
n
/fm 256 def
619 5 905 1211 B
1 F
n
/fm 256 def
619 11 905 1217 B
1 F
n
/fm 256 def
11 23 1537 1205 B
1 F
n
/fm 256 def
23 11 1525 1217 B
1 F
n
/fm 256 def
5 11 1531 1205 B
1 F
n
/fm 256 def
11 5 1525 1211 B
1 F
n
/fm 256 def
5 5 1525 1205 B
1 F
n
/fm 256 def
5 5 1525 1205 B
1 F
n
/fm 256 def
5 120 893 1084 B
1 F
n
/fm 256 def
5 120 899 1084 B
1 F
n
/fm 256 def
5 120 1525 1084 B
1 F
n
/fm 256 def
5 120 1531 1084 B
1 F
n
/fm 256 def
11 120 1537 1084 B
1 F
n
32 0 0 150 150 0 0 0 140 /Helvetica-Bold /font13 ANSIFont font
577 1429 1276 (Windows Sockets) 1276 SB
32 0 0 71 71 0 0 0 66 /Helvetica-Bold /font13 ANSIFont font
853 1609 724 (An Open Interface for) 724 SB
727 1697 975 (Network Programming under) 975 SB
862 1785 319 (Microsoft) 319 SB
32 0 0 33 33 0 0 0 33 /Symbol font
gs 1209 3231 0 0 CB
1182 1818 27 (\342) 27 SB
gr
gs 1209 3231 0 0 CB
1181 1818 27 (\342) 27 SB
gr
32 0 0 71 71 0 0 0 66 /Helvetica-Bold /font13 ANSIFont font
1209 1785 330 ( Windows) 330 SB
32 0 0 33 33 0 0 0 33 /Symbol font
gs 1567 3231 0 0 CB
1540 1831 27 (\344) 27 SB
gr
gs 1567 3231 0 0 CB
1539 1831 27 (\344) 27 SB
gr
32 0 0 71 71 0 0 0 66 /Helvetica-Bold /font13 ANSIFont font
1026 1980 377 (Version 1.1) 377 SB
945 2156 368 (20 January) 368 SB
32 0 0 58 58 0 0 0 54 /Helvetica-Bold /font13 ANSIFont font
1313 2168 16 ( ) 16 SB
32 0 0 71 71 0 0 0 66 /Helvetica-Bold /font13 ANSIFont font
1329 2156 156 (1993) 156 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1115 2391 199 (Martin Hall) 199 SB
1102 2441 226 (Mark Towfiq) 226 SB
1101 2491 228 (Geoff Arnold) 228 SB
1072 2541 286 (David Treadwell) 286 SB
1090 2591 249 (Henry Sanders) 249 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Roman
%%Page: 2 2
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
804 571 182 (Copyright ) 182 SB
32 0 0 42 42 0 0 0 42 /Symbol font
gs 1019 3231 0 0 CB
986 567 33 (\323) 33 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1019 571 606 ( 1992 by Martin Hall, Mark Towfiq) 606 SB
781 625 868 (Geoff Arnold, David Treadwell and Henry Sanders) 868 SB
1052 725 326 (All rights reserved.) 326 SB
615 825 86 (This ) 89 SB
704 825 178 (document ) 181 SB
885 825 84 (may ) 87 SB
972 825 51 (be ) 54 SB
1026 825 110 (freely ) 113 SB
1139 825 225 (redistributed ) 228 SB
1367 825 44 (in ) 47 SB
1414 825 72 (any ) 75 SB
1489 825 104 (form, ) 108 SB
1597 825 179 (electronic ) 183 SB
1780 825 35 (or) 35 SB
615 875 186 (otherwise, ) 193 SB
808 875 161 (provided ) 168 SB
976 875 75 (that ) 82 SB
1058 875 35 (it ) 42 SB
1100 875 39 (is ) 46 SB
1146 875 192 (distributed ) 199 SB
1345 875 44 (in ) 51 SB
1396 875 51 (its ) 58 SB
1454 875 141 (entirety ) 148 SB
1602 875 72 (and ) 79 SB
1681 875 75 (that ) 82 SB
1763 875 52 (the) 52 SB
615 925 173 (copyright ) 177 SB
792 925 72 (and ) 76 SB
868 925 72 (this ) 76 SB
944 925 115 (notice ) 119 SB
1063 925 63 (are ) 67 SB
1130 925 168 (included. ) 172 SB
1302 925 11 ( ) 15 SB
1317 925 194 (Comments ) 199 SB
1516 925 46 (or ) 51 SB
1567 925 170 (questions ) 175 SB
1742 925 73 (may) 73 SB
615 975 51 (be ) 62 SB
677 975 178 (submitted ) 189 SB
866 975 63 (via ) 75 SB
941 975 179 (electronic ) 191 SB
1132 975 87 (mail ) 99 SB
1231 975 44 (to ) 56 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
1287 974 207 (winsock@) 207 SB
1494 974 212 (microdyne) 212 SB
1706 974 98 (.com) 98 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1804 975 11 (.) 11 SB
0 0 0 fC
/fm 256 def
2 50 277 972 B
1 F
n
615 1026 163 (Requests ) 166 SB
781 1026 44 (to ) 47 SB
828 1026 51 (be ) 55 SB
883 1026 112 (added ) 116 SB
999 1026 44 (to ) 48 SB
1047 1026 63 (the ) 67 SB
1114 1026 172 (Windows ) 176 SB
1290 1026 142 (Sockets ) 146 SB
1436 1026 141 (mailing ) 145 SB
1581 1026 63 (list ) 67 SB
1648 1026 123 (should ) 127 SB
1775 1026 40 (be) 40 SB
615 1076 177 (addressed ) 224 SB
839 1076 44 (to ) 91 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
930 1075 372 (winsock-request@) 372 SB
1302 1075 212 (microdyne) 212 SB
1514 1075 98 (.com) 98 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1612 1076 22 (. ) 69 SB
1681 1076 11 ( ) 59 SB
1740 1076 75 (This) 75 SB
/fm 256 def
2 50 277 1073 B
1 F
n
615 1127 239 (specification, ) 245 SB
860 1127 152 (archives ) 159 SB
1019 1127 46 (of ) 53 SB
1072 1127 63 (the ) 70 SB
1142 1127 141 (mailing ) 148 SB
1290 1127 74 (list, ) 81 SB
1371 1127 72 (and ) 79 SB
1450 1127 98 (other ) 105 SB
1555 1127 211 (information ) 218 SB
1773 1127 42 (on) 42 SB
/fm 256 def
2 49 277 1124 B
1 F
n
615 1177 172 (Windows ) 181 SB
796 1177 142 (Sockets ) 151 SB
947 1177 63 (are ) 72 SB
1019 1177 165 (available ) 174 SB
1193 1177 63 (via ) 72 SB
1265 1177 205 (anonymous ) 214 SB
1479 1177 83 (FTP ) 92 SB
1571 1177 93 (from ) 102 SB
1673 1177 63 (the ) 72 SB
1745 1177 70 (host) 70 SB
/fm 256 def
2 49 277 1174 B
1 F
n
615 1227 287 (microdyne.com, ) 297 SB
912 1227 164 (directory ) 174 SB
1086 1227 249 (/pub/winsock. ) 259 SB
1345 1227 11 ( ) 21 SB
1366 1227 179 (Questions ) 189 SB
1555 1227 105 (about ) 115 SB
1670 1227 145 (products) 145 SB
/fm 256 def
2 49 277 1224 B
1 F
n
615 1277 208 (conforming ) 209 SB
824 1277 44 (to ) 45 SB
869 1277 72 (this ) 73 SB
942 1277 228 (specification ) 229 SB
1171 1277 123 (should ) 124 SB
1295 1277 51 (be ) 52 SB
1347 1277 177 (addressed ) 178 SB
1525 1277 44 (to ) 45 SB
1570 1277 63 (the ) 64 SB
1634 1277 144 (vendors ) 146 SB
1780 1277 35 (of) 35 SB
615 1327 219 (the products.) 219 SB
615 1427 151 (Portions ) 165 SB
780 1427 46 (of ) 60 SB
840 1427 63 (the ) 77 SB
917 1427 172 (Windows ) 186 SB
1103 1427 142 (Sockets ) 156 SB
1259 1427 228 (specification ) 243 SB
1502 1427 63 (are ) 78 SB
1580 1427 138 (derived ) 153 SB
1733 1427 82 (from) 82 SB
/fm 256 def
2 49 277 1424 B
1 F
n
615 1477 151 (material ) 161 SB
776 1477 114 (which ) 124 SB
900 1477 39 (is ) 49 SB
949 1477 182 (Copyright ) 192 SB
1141 1477 58 (\(c\) ) 68 SB
1209 1477 193 (1982-1986 ) 203 SB
1412 1477 53 (by ) 63 SB
1475 1477 63 (the ) 73 SB
1548 1477 147 (Regents ) 158 SB
1706 1477 46 (of ) 57 SB
1763 1477 52 (the) 52 SB
/fm 256 def
2 49 277 1474 B
1 F
n
615 1527 189 (University ) 200 SB
815 1527 46 (of ) 58 SB
873 1527 194 (California. ) 206 SB
1079 1527 11 ( ) 23 SB
1102 1527 65 (All ) 77 SB
1179 1527 107 (rights ) 119 SB
1298 1527 63 (are ) 75 SB
1373 1527 165 (reserved. ) 177 SB
1550 1527 11 ( ) 23 SB
1573 1527 77 (The ) 89 SB
1662 1527 153 (Berkeley) 153 SB
/fm 256 def
2 49 277 1524 B
1 F
n
615 1577 163 (Software ) 170 SB
785 1577 143 (License ) 150 SB
935 1577 199 (Agreement ) 206 SB
1141 1577 159 (specifies ) 166 SB
1307 1577 63 (the ) 71 SB
1378 1577 105 (terms ) 113 SB
1491 1577 72 (and ) 80 SB
1571 1577 187 (conditions ) 195 SB
1766 1577 49 (for) 49 SB
/fm 256 def
2 49 277 1574 B
1 F
n
615 1627 239 (redistribution.) 239 SB
/fm 256 def
2 49 277 1624 B
1 F
n
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
615 1777 290 (Revision history:) 290 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1827 173 (1.0 Rev.A) 173 SB
915 1827 236 (June 11, 1992) 236 SB
615 1877 171 (1.0 Rev.B) 171 SB
915 1877 236 (June 16, 1992) 236 SB
615 1927 182 (1.0 Rev. C) 182 SB
915 1927 295 (October 12, 1992) 295 SB
615 1977 53 (1.1) 53 SB
915 1977 237 (January, 1993) 237 SB
1203 3070 24 (ii) 24 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Roman
%%Page: 3 3
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 58 58 0 0 0 54 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
970 275 490 (Windows Sockets) 490 SB
1061 350 308 (Version 1.1) 308 SB
32 0 0 50 50 1 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 467 540 (TABLE OF CONTENTS) 540 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 578 430 (TABLE OF CONTENTS) 430 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
748 578 352 (................................) 352 SB
1100 578 352 (................................) 352 SB
1452 578 352 (................................) 352 SB
1804 578 231 (.....................) 231 SB
2040 578 36 (iii) 36 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 628 442 (ACKNOWLEDGMENTS) 442 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
759 628 352 (................................) 352 SB
1111 628 352 (................................) 352 SB
1463 628 352 (................................) 352 SB
1815 628 220 (....................) 220 SB
2040 628 33 (vi) 33 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 678 370 (1.  INTRODUCTION) 370 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
693 678 352 (................................) 352 SB
1045 678 352 (................................) 352 SB
1397 678 352 (................................) 352 SB
1749 678 286 (..........................) 286 SB
2040 678 21 (1) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 728 528 (1.1 What is Windows Sockets?) 528 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1001 728 352 (................................) 352 SB
1353 728 352 (................................) 352 SB
1705 728 330 (..............................) 330 SB
2040 728 21 (1) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 778 359 (1.2 Berkeley Sockets) 359 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
825 778 352 (................................) 352 SB
1177 778 352 (................................) 352 SB
1529 778 352 (................................) 352 SB
1881 778 154 (..............) 154 SB
2040 778 21 (1) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 828 981 (1.3 Microsoft Windows and Windows-specific extensions) 981 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1452 828 352 (................................) 352 SB
1804 828 231 (.....................) 231 SB
2040 828 21 (1) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 878 597 (1.4 The Status of this Specification) 597 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1067 878 352 (................................) 352 SB
1419 878 352 (................................) 352 SB
1771 878 264 (........................) 264 SB
2040 878 21 (2) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 928 351 (1.5 Revision History) 351 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
825 928 352 (................................) 352 SB
1177 928 352 (................................) 352 SB
1529 928 352 (................................) 352 SB
1881 928 154 (..............) 154 SB
2040 928 21 (2) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 978 607 (1.5.1 Windows Sockets Version 1.0) 607 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1232 978 352 (................................) 352 SB
1584 978 352 (................................) 352 SB
1936 978 99 (.........) 99 SB
2040 978 21 (2) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1028 607 (1.5.2 Windows Sockets Version 1.1) 607 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1232 1028 352 (................................) 352 SB
1584 1028 352 (................................) 352 SB
1936 1028 99 (.........) 99 SB
2040 1028 21 (2) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 1078 689 (2.  PROGRAMMING WITH SOCKETS) 689 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1012 1078 352 (................................) 352 SB
1364 1078 352 (................................) 352 SB
1716 1078 319 (.............................) 319 SB
2040 1078 21 (4) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 1128 847 (2.1 Windows Sockets Stack Installation Checking) 847 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1320 1128 352 (................................) 352 SB
1672 1128 352 (................................) 352 SB
2024 1128 11 (.) 11 SB
2040 1128 21 (4) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 1178 195 (2.2 Sockets) 195 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
660 1178 352 (................................) 352 SB
1012 1178 352 (................................) 352 SB
1364 1178 352 (................................) 352 SB
1716 1178 319 (.............................) 319 SB
2040 1178 21 (4) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1228 349 (2.2.1 Basic concepts) 349 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
968 1228 352 (................................) 352 SB
1320 1228 352 (................................) 352 SB
1672 1228 352 (................................) 352 SB
2024 1228 11 (.) 11 SB
2040 1228 21 (4) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1278 434 (2.2.2 Client-server model) 434 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1056 1278 352 (................................) 352 SB
1408 1278 352 (................................) 352 SB
1760 1278 275 (.........................) 275 SB
2040 1278 21 (4) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1328 386 (2.2.3 Out-of-band data) 386 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1001 1328 352 (................................) 352 SB
1353 1328 352 (................................) 352 SB
1705 1328 330 (..............................) 330 SB
2040 1328 21 (5) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1378 319 (2.2.4 Broadcasting) 319 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
935 1378 352 (................................) 352 SB
1287 1378 352 (................................) 352 SB
1639 1378 352 (................................) 352 SB
1991 1378 44 (....) 44 SB
2040 1378 21 (5) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 1428 307 (2.3 Byte Ordering) 307 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
781 1428 352 (................................) 352 SB
1133 1428 352 (................................) 352 SB
1485 1428 352 (................................) 352 SB
1837 1428 198 (..................) 198 SB
2040 1428 21 (6) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 1478 323 (2.4 Socket Options) 323 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
792 1478 352 (................................) 352 SB
1144 1478 352 (................................) 352 SB
1496 1478 352 (................................) 352 SB
1848 1478 187 (.................) 187 SB
2040 1478 21 (6) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 1528 312 (2.5 Database Files) 312 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
781 1528 352 (................................) 352 SB
1133 1528 352 (................................) 352 SB
1485 1528 352 (................................) 352 SB
1837 1528 198 (..................) 198 SB
2040 1528 21 (7) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 1578 630 (2.6 Deviation from Berkeley Sockets) 630 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1100 1578 352 (................................) 352 SB
1452 1578 352 (................................) 352 SB
1804 1578 231 (.....................) 231 SB
2040 1578 21 (7) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1628 654 (2.6.1 socket data type and error values) 654 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1276 1628 352 (................................) 352 SB
1628 1628 352 (................................) 352 SB
1980 1628 55 (.....) 55 SB
2040 1628 21 (8) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1678 399 (2.6.2 select\(\) and FD_*) 399 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1023 1678 352 (................................) 352 SB
1375 1678 352 (................................) 352 SB
1727 1678 308 (............................) 308 SB
2040 1678 21 (8) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1728 969 (2.6.3 Error codes - errno, h_errno & WSAGetLastError\(\)) 969 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1584 1728 352 (................................) 352 SB
1936 1728 99 (.........) 99 SB
2040 1728 21 (8) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1778 234 (2.6.4 Pointers) 234 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
858 1778 352 (................................) 352 SB
1210 1778 352 (................................) 352 SB
1562 1778 352 (................................) 352 SB
1914 1778 121 (...........) 121 SB
2040 1778 21 (9) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1828 424 (2.6.5 Renamed functions) 424 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1045 1828 352 (................................) 352 SB
1397 1828 352 (................................) 352 SB
1749 1828 286 (..........................) 286 SB
2040 1828 21 (9) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
765 1878 521 (2.6.5.1 close\(\) & closesocket\(\)) 521 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1287 1878 352 (................................) 352 SB
1639 1878 352 (................................) 352 SB
1991 1878 44 (....) 44 SB
2040 1878 21 (9) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
765 1928 499 (2.6.5.1 ioctl\(\) & ioctlsocket\(\)) 499 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1265 1928 352 (................................) 352 SB
1617 1928 352 (................................) 352 SB
1969 1928 66 (......) 66 SB
2040 1928 21 (9) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1978 734 (2.6.6 Blocking routines & EINPROGRESS) 734 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1353 1978 352 (................................) 352 SB
1705 1978 330 (..............................) 330 SB
2040 1978 21 (9) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2028 770 (2.6.7 Maximum number of sockets supported) 770 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1386 2028 352 (................................) 352 SB
1738 2028 297 (...........................) 297 SB
2040 2028 21 (9) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2078 307 (2.6.8 Include files) 307 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
924 2078 352 (................................) 352 SB
1276 2078 352 (................................) 352 SB
1628 2078 352 (................................) 352 SB
1980 2078 55 (.....) 55 SB
2040 2078 42 (10) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2128 583 (2.6.9 Return values on API failure) 583 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1199 2128 352 (................................) 352 SB
1551 2128 352 (................................) 352 SB
1903 2128 132 (............) 132 SB
2040 2128 42 (10) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2178 336 (2.6.10 Raw Sockets) 336 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
957 2178 352 (................................) 352 SB
1309 2178 352 (................................) 352 SB
1661 2178 352 (................................) 352 SB
2013 2178 22 (..) 22 SB
2040 2178 42 (10) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 2228 1040 (2.7 Windows Sockets in Multithreaded Versions of Windows) 1040 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1507 2228 352 (................................) 352 SB
1859 2228 176 (................) 176 SB
2040 2228 42 (10) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 2278 647 (3.  SOCKET LIBRARY OVERVIEW) 647 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
968 2278 352 (................................) 352 SB
1320 2278 352 (................................) 352 SB
1672 2278 352 (................................) 352 SB
2024 2278 11 (.) 11 SB
2040 2278 42 (12) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 2328 356 (3.1 Socket Functions) 356 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
825 2328 352 (................................) 352 SB
1177 2328 352 (................................) 352 SB
1529 2328 352 (................................) 352 SB
1881 2328 154 (..............) 154 SB
2040 2328 42 (12) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2378 803 (3.1.1 Blocking/Non blocking & Data Volatility) 803 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1419 2378 352 (................................) 352 SB
1771 2378 264 (........................) 264 SB
2040 2378 42 (12) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 2428 396 (3.2 Database Functions) 396 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
869 2428 352 (................................) 352 SB
1221 2428 352 (................................) 352 SB
1573 2428 352 (................................) 352 SB
1925 2428 110 (..........) 110 SB
2040 2428 42 (13) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 2478 905 (3.3 Microsoft Windows-specific Extension Functions) 905 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1375 2478 352 (................................) 352 SB
1727 2478 308 (............................) 308 SB
2040 2478 42 (14) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2528 682 (3.3.1 Asynchronous select\(\) Mechanism) 682 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1298 2528 352 (................................) 352 SB
1650 2528 352 (................................) 352 SB
2002 2528 33 (...) 33 SB
2040 2528 42 (15) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2578 643 (3.3.2 Asynchronous Support Routines) 643 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1265 2578 352 (................................) 352 SB
1617 2578 352 (................................) 352 SB
1969 2578 66 (......) 66 SB
2040 2578 42 (15) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2628 567 (3.3.3 Hooking Blocking Methods) 567 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1188 2628 352 (................................) 352 SB
1540 2628 352 (................................) 352 SB
1892 2628 143 (.............) 143 SB
2040 2628 42 (15) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2678 353 (3.3.4 Error Handling) 353 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
968 2678 352 (................................) 352 SB
1320 2678 352 (................................) 352 SB
1672 2678 352 (................................) 352 SB
2024 2678 11 (.) 11 SB
2040 2678 42 (16) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2728 1169 (3.3.5 Accessing a Windows Sockets DLL from an Intermediate DLL) 1169 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1793 2728 242 (......................) 242 SB
2040 2728 42 (16) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2778 1178 (3.3.6 Internal use of Messages by Windows Sockets Implementations) 1178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1793 2778 242 (......................) 242 SB
2040 2778 42 (16) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2828 472 (3.3.7 Private API Interfaces) 472 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1089 2828 352 (................................) 352 SB
1441 2828 352 (................................) 352 SB
1793 2828 242 (......................) 242 SB
2040 2828 42 (17) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 2878 664 (4.  SOCKET LIBRARY REFERENCE) 664 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
979 2878 352 (................................) 352 SB
1331 2878 352 (................................) 352 SB
1683 2878 352 (................................) 352 SB
2040 2878 42 (18) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1197 3070 36 (iii) 36 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Roman
%%Page: 4 4
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
465 270 340 (4.1 Socket Routines) 340 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
814 270 352 (................................) 352 SB
1166 270 352 (................................) 352 SB
1518 270 352 (................................) 352 SB
1870 270 165 (...............) 165 SB
2040 270 42 (18) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 320 233 (4.1.1 accept\(\)) 233 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
858 320 352 (................................) 352 SB
1210 320 352 (................................) 352 SB
1562 320 352 (................................) 352 SB
1914 320 121 (...........) 121 SB
2040 320 42 (19) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 370 199 (4.1.2 bind\(\)) 199 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
814 370 352 (................................) 352 SB
1166 370 352 (................................) 352 SB
1518 370 352 (................................) 352 SB
1870 370 165 (...............) 165 SB
2040 370 42 (21) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 420 319 (4.1.3 closesocket\(\)) 319 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
935 420 352 (................................) 352 SB
1287 420 352 (................................) 352 SB
1639 420 352 (................................) 352 SB
1991 420 44 (....) 44 SB
2040 420 42 (23) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 470 256 (4.1.4 connect\(\)) 256 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
880 470 352 (................................) 352 SB
1232 470 352 (................................) 352 SB
1584 470 352 (................................) 352 SB
1936 470 99 (.........) 99 SB
2040 470 42 (25) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 520 341 (4.1.5 getpeername\(\)) 341 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
957 520 352 (................................) 352 SB
1309 520 352 (................................) 352 SB
1661 520 352 (................................) 352 SB
2013 520 22 (..) 22 SB
2040 520 42 (27) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 570 345 (4.1.6 getsockname\(\)) 345 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
968 570 352 (................................) 352 SB
1320 570 352 (................................) 352 SB
1672 570 352 (................................) 352 SB
2024 570 11 (.) 11 SB
2040 570 42 (28) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 620 307 (4.1.7 getsockopt\(\)) 307 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
924 620 352 (................................) 352 SB
1276 620 352 (................................) 352 SB
1628 620 352 (................................) 352 SB
1980 620 55 (.....) 55 SB
2040 620 42 (29) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 670 211 (4.1.8 htonl\(\)) 211 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
836 670 352 (................................) 352 SB
1188 670 352 (................................) 352 SB
1540 670 352 (................................) 352 SB
1892 670 143 (.............) 143 SB
2040 670 42 (31) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 720 215 (4.1.9 htons\(\)) 215 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
836 720 352 (................................) 352 SB
1188 720 352 (................................) 352 SB
1540 720 352 (................................) 352 SB
1892 720 143 (.............) 143 SB
2040 720 42 (32) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 770 305 (4.1.10 inet_addr\(\)) 305 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
924 770 352 (................................) 352 SB
1276 770 352 (................................) 352 SB
1628 770 352 (................................) 352 SB
1980 770 55 (.....) 55 SB
2040 770 42 (33) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 820 303 (4.1.11 inet_ntoa\(\)) 303 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
924 820 352 (................................) 352 SB
1276 820 352 (................................) 352 SB
1628 820 352 (................................) 352 SB
1980 820 55 (.....) 55 SB
2040 820 42 (34) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 870 329 (4.1.12 ioctlsocket\(\)) 329 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
946 870 352 (................................) 352 SB
1298 870 352 (................................) 352 SB
1650 870 352 (................................) 352 SB
2002 870 33 (...) 33 SB
2040 870 42 (35) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 920 237 (4.1.13 listen\(\)) 237 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
858 920 352 (................................) 352 SB
1210 920 352 (................................) 352 SB
1562 920 352 (................................) 352 SB
1914 920 121 (...........) 121 SB
2040 920 42 (37) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 970 232 (4.1.14 ntohl\(\)) 232 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
847 970 352 (................................) 352 SB
1199 970 352 (................................) 352 SB
1551 970 352 (................................) 352 SB
1903 970 132 (............) 132 SB
2040 970 42 (39) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1020 236 (4.1.15 ntohs\(\)) 236 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
858 1020 352 (................................) 352 SB
1210 1020 352 (................................) 352 SB
1562 1020 352 (................................) 352 SB
1914 1020 121 (...........) 121 SB
2040 1020 42 (40) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1070 218 (4.1.16 recv\(\)) 218 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
836 1070 352 (................................) 352 SB
1188 1070 352 (................................) 352 SB
1540 1070 352 (................................) 352 SB
1892 1070 143 (.............) 143 SB
2040 1070 42 (41) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1120 300 (4.1.17 recvfrom\(\)) 300 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
924 1120 352 (................................) 352 SB
1276 1120 352 (................................) 352 SB
1628 1120 352 (................................) 352 SB
1980 1120 55 (.....) 55 SB
2040 1120 42 (43) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1170 242 (4.1.18 select\(\)) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
858 1170 352 (................................) 352 SB
1210 1170 352 (................................) 352 SB
1562 1170 352 (................................) 352 SB
1914 1170 121 (...........) 121 SB
2040 1170 42 (46) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1220 222 (4.1.19 send\(\)) 222 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
847 1220 352 (................................) 352 SB
1199 1220 352 (................................) 352 SB
1551 1220 352 (................................) 352 SB
1903 1220 132 (............) 132 SB
2040 1220 42 (48) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1270 255 (4.1.20 sendto\(\)) 255 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
880 1270 352 (................................) 352 SB
1232 1270 352 (................................) 352 SB
1584 1270 352 (................................) 352 SB
1936 1270 99 (.........) 99 SB
2040 1270 42 (50) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1320 323 (4.1.21 setsockopt\(\)) 323 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
946 1320 352 (................................) 352 SB
1298 1320 352 (................................) 352 SB
1650 1320 352 (................................) 352 SB
2002 1320 33 (...) 33 SB
2040 1320 42 (53) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1370 308 (4.1.22 shutdown\(\)) 308 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
924 1370 352 (................................) 352 SB
1276 1370 352 (................................) 352 SB
1628 1370 352 (................................) 352 SB
1980 1370 55 (.....) 55 SB
2040 1370 42 (56) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1420 253 (4.1.23 socket\(\)) 253 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
869 1420 352 (................................) 352 SB
1221 1420 352 (................................) 352 SB
1573 1420 352 (................................) 352 SB
1925 1420 110 (..........) 110 SB
2040 1420 42 (58) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 1470 380 (4.2 Database Routines) 380 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
847 1470 352 (................................) 352 SB
1199 1470 352 (................................) 352 SB
1551 1470 352 (................................) 352 SB
1903 1470 132 (............) 132 SB
2040 1470 42 (60) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1520 363 (4.2.1 gethostbyaddr\(\)) 363 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
979 1520 352 (................................) 352 SB
1331 1520 352 (................................) 352 SB
1683 1520 352 (................................) 352 SB
2040 1520 42 (60) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1570 380 (4.2.2 gethostbyname\(\)) 380 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1001 1570 352 (................................) 352 SB
1353 1570 352 (................................) 352 SB
1705 1570 330 (..............................) 330 SB
2040 1570 42 (62) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1620 338 (4.2.3 gethostname\(\)) 338 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
957 1620 352 (................................) 352 SB
1309 1620 352 (................................) 352 SB
1661 1620 352 (................................) 352 SB
2013 1620 22 (..) 22 SB
2040 1620 42 (63) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1670 399 (4.2.4 getprotobyname\(\)) 399 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1023 1670 352 (................................) 352 SB
1375 1670 352 (................................) 352 SB
1727 1670 308 (............................) 308 SB
2040 1670 42 (64) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1720 436 (4.2.5 getprotobynumber\(\)) 436 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1056 1720 352 (................................) 352 SB
1408 1720 352 (................................) 352 SB
1760 1720 275 (.........................) 275 SB
2040 1720 42 (66) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1770 380 (4.2.6 getservbyname\(\)) 380 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1001 1770 352 (................................) 352 SB
1353 1770 352 (................................) 352 SB
1705 1770 330 (..............................) 330 SB
2040 1770 42 (67) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1820 356 (4.2.7 getservbyport\(\)) 356 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
979 1820 352 (................................) 352 SB
1331 1820 352 (................................) 352 SB
1683 1820 352 (................................) 352 SB
2040 1820 42 (69) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 1870 744 (4.3 Microsoft Windows-specific Extensions) 744 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1210 1870 352 (................................) 352 SB
1562 1870 352 (................................) 352 SB
1914 1870 121 (...........) 121 SB
2040 1870 42 (70) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1920 599 (4.3.1 WSAAsyncGetHostByAddr\(\)) 599 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1221 1920 352 (................................) 352 SB
1573 1920 352 (................................) 352 SB
1925 1920 110 (..........) 110 SB
2040 1920 42 (70) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1970 614 (4.3.2 WSAAsyncGetHostByName\(\)) 614 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1232 1970 352 (................................) 352 SB
1584 1970 352 (................................) 352 SB
1936 1970 99 (.........) 99 SB
2040 1970 42 (73) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2020 626 (4.3.3 WSAAsyncGetProtoByName\(\)) 626 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1243 2020 352 (................................) 352 SB
1595 2020 352 (................................) 352 SB
1947 2020 88 (........) 88 SB
2040 2020 42 (76) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2070 663 (4.3.4 WSAAsyncGetProtoByNumber\(\)) 663 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1287 2070 352 (................................) 352 SB
1639 2070 352 (................................) 352 SB
1991 2070 44 (....) 44 SB
2040 2070 42 (79) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2120 612 (4.3.5 WSAAsyncGetServByName\(\)) 612 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1232 2120 352 (................................) 352 SB
1584 2120 352 (................................) 352 SB
1936 2120 99 (.........) 99 SB
2040 2120 42 (82) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2170 581 (4.3.6 WSAAsyncGetServByPort\(\)) 581 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1199 2170 352 (................................) 352 SB
1551 2170 352 (................................) 352 SB
1903 2170 132 (............) 132 SB
2040 2170 42 (85) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2220 428 (4.3.7 WSAAsyncSelect\(\)) 428 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1045 2220 352 (................................) 352 SB
1397 2220 352 (................................) 352 SB
1749 2220 286 (..........................) 286 SB
2040 2220 42 (88) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2270 578 (4.3.8 WSACancelAsyncRequest\(\)) 578 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1199 2270 352 (................................) 352 SB
1551 2270 352 (................................) 352 SB
1903 2270 132 (............) 132 SB
2040 2270 42 (94) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2320 561 (4.3.9 WSACancelBlockingCall\(\)) 561 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1177 2320 352 (................................) 352 SB
1529 2320 352 (................................) 352 SB
1881 2320 154 (..............) 154 SB
2040 2320 42 (96) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2370 379 (4.3.10 WSACleanup\(\)) 379 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1001 2370 352 (................................) 352 SB
1353 2370 352 (................................) 352 SB
1705 2370 330 (..............................) 330 SB
2040 2370 42 (98) 42 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2420 461 (4.3.11 WSAGetLastError\(\)) 461 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1078 2420 352 (................................) 352 SB
1430 2420 352 (................................) 352 SB
1782 2420 253 (.......................) 253 SB
2040 2420 63 (100) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2470 423 (4.3.12 WSAIsBlocking\(\)) 423 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1045 2470 352 (................................) 352 SB
1397 2470 352 (................................) 352 SB
1749 2470 286 (..........................) 286 SB
2040 2470 63 (101) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2520 540 (4.3.13 WSASetBlockingHook\(\)) 540 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1155 2520 352 (................................) 352 SB
1507 2520 352 (................................) 352 SB
1859 2520 176 (................) 176 SB
2040 2520 63 (102) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2570 454 (4.3.14 WSASetLastError\(\)) 454 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1078 2570 352 (................................) 352 SB
1430 2570 352 (................................) 352 SB
1782 2570 253 (.......................) 253 SB
2040 2570 63 (104) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2620 360 (4.3.15 WSAStartup\(\)) 360 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
979 2620 352 (................................) 352 SB
1331 2620 352 (................................) 352 SB
1683 2620 352 (................................) 352 SB
2040 2620 63 (105) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2670 621 (4.3.16 WSAUnhookBlockingHook\(\)) 621 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1243 2670 352 (................................) 352 SB
1595 2670 352 (................................) 352 SB
1947 2670 88 (........) 88 SB
2040 2670 63 (109) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 2720 743 (Appendix A.  Error Codes and Header Files) 743 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1067 2720 352 (................................) 352 SB
1419 2720 352 (................................) 352 SB
1771 2720 264 (........................) 264 SB
2040 2720 63 (110) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 2770 278 (A.1 Error Codes) 278 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
748 2770 352 (................................) 352 SB
1100 2770 352 (................................) 352 SB
1452 2770 352 (................................) 352 SB
1804 2770 231 (.....................) 231 SB
2040 2770 63 (110) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 2820 288 (A.2 Header Files) 288 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
759 2820 352 (................................) 352 SB
1111 2820 352 (................................) 352 SB
1463 2820 352 (................................) 352 SB
1815 2820 220 (....................) 220 SB
2040 2820 63 (112) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2870 484 (A.2.1 Berkeley Header Files) 484 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1100 2870 352 (................................) 352 SB
1452 2870 352 (................................) 352 SB
1804 2870 231 (.....................) 231 SB
2040 2870 63 (112) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2920 826 (A.2.2 Windows Sockets Header File - winsock.h) 826 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1441 2920 352 (................................) 352 SB
1793 2920 242 (......................) 242 SB
2040 2920 63 (113) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1198 3070 33 (iv) 33 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 5 5
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
315 270 880 (Appendix B.  Notes for Windows Sockets Suppliers) 880 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1199 270 352 (................................) 352 SB
1551 270 352 (................................) 352 SB
1903 270 132 (............) 132 SB
2040 270 63 (125) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 320 280 (B.1 Introduction) 280 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
748 320 352 (................................) 352 SB
1100 320 352 (................................) 352 SB
1452 320 352 (................................) 352 SB
1804 320 231 (.....................) 231 SB
2040 320 63 (125) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 370 598 (B.2 Windows Sockets Components) 598 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1067 370 352 (................................) 352 SB
1419 370 352 (................................) 352 SB
1771 370 264 (........................) 264 SB
2040 370 63 (125) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 420 555 (B.2.1 Development Components) 555 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1177 420 352 (................................) 352 SB
1529 420 352 (................................) 352 SB
1881 420 154 (..............) 154 SB
2040 420 63 (125) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 470 498 (B.2.2 Run Time Components) 498 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1122 470 352 (................................) 352 SB
1474 470 352 (................................) 352 SB
1826 470 209 (...................) 209 SB
2040 470 63 (125) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 520 772 (B.3 Multithreadedness and blocking routines.) 772 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1243 520 352 (................................) 352 SB
1595 520 352 (................................) 352 SB
1947 520 88 (........) 88 SB
2040 520 63 (125) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 570 319 (B.4 Database Files) 319 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
792 570 352 (................................) 352 SB
1144 570 352 (................................) 352 SB
1496 570 352 (................................) 352 SB
1848 570 187 (.................) 187 SB
2040 570 63 (126) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 620 257 (B.5 FD_ISSET) 257 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
726 620 352 (................................) 352 SB
1078 620 352 (................................) 352 SB
1430 620 352 (................................) 352 SB
1782 620 253 (.......................) 253 SB
2040 620 63 (126) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 670 276 (B.6 Error Codes) 276 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
748 670 352 (................................) 352 SB
1100 670 352 (................................) 352 SB
1452 670 352 (................................) 352 SB
1804 670 231 (.....................) 231 SB
2040 670 63 (126) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 720 458 (B.7 DLL Ordinal Numbers) 458 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
924 720 352 (................................) 352 SB
1276 720 352 (................................) 352 SB
1628 720 352 (................................) 352 SB
1980 720 55 (.....) 55 SB
2040 720 63 (126) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 770 348 (B.8 Validation Suite) 348 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
814 770 352 (................................) 352 SB
1166 770 352 (................................) 352 SB
1518 770 352 (................................) 352 SB
1870 770 165 (...............) 165 SB
2040 770 63 (127) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 820 614 (Appendix C.  For Further Reference) 614 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
935 820 352 (................................) 352 SB
1287 820 352 (................................) 352 SB
1639 820 352 (................................) 352 SB
1991 820 44 (....) 44 SB
2040 820 63 (129) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 870 659 (Appendix D.  Background Information) 659 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
979 870 352 (................................) 352 SB
1331 870 352 (................................) 352 SB
1683 870 352 (................................) 352 SB
2040 870 63 (130) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 920 644 (D.1 Legal Status of Windows Sockets) 644 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1111 920 352 (................................) 352 SB
1463 920 352 (................................) 352 SB
1815 920 220 (....................) 220 SB
2040 920 63 (130) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 970 837 (D.2 The Story Behind the Windows Sockets Icon) 837 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1309 970 352 (................................) 352 SB
1661 970 352 (................................) 352 SB
2013 970 22 (..) 22 SB
2040 970 63 (130) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1204 3070 21 (v) 21 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 6 6
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 1 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
315 317 544 (ACKNOWLEDGMENTS) 544 SB
0 0 0 fC
/fm 256 def
2 107 277 267 B
1 F
n
/fm 256 def
2 49 277 375 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 427 1741 (The authors would like to thank their companies for allowing them the time and resources to make this) 1741 SB
/fm 256 def
2 49 277 425 B
1 F
n
315 477 1762 (specification possible:  JSB Corporation, Microdyne Corporation, FTP Software, Sun Microsystems, and) 1762 SB
/fm 256 def
2 49 277 475 B
1 F
n
315 527 389 (Microsoft Corporation.) 389 SB
/fm 256 def
2 49 277 525 B
1 F
n
/fm 256 def
2 49 277 575 B
1 F
n
315 627 1652 (Special thanks should also be extended to the other efforts contributing to the success of Windows) 1652 SB
/fm 256 def
2 49 277 625 B
1 F
n
315 677 1755 (Sockets. The original draft was heavily influenced by existing specifications offered and detailed by JSB) 1755 SB
/fm 256 def
2 49 277 675 B
1 F
n
315 727 1770 (Corporation and Net Manage, Inc. The "version 1.0 debate" hosted by Microsoft in Seattle allowed many) 1770 SB
/fm 256 def
2 49 277 725 B
1 F
n
315 777 1322 (of the members of the working group to hash out final details for 1.0 vis-a-vis.) 1322 SB
/fm 256 def
2 49 277 775 B
1 F
n
/fm 256 def
2 49 277 825 B
1 F
n
315 877 1711 (Sun Microsystems was kind enough to allow first time implementors to "plug and play" beta software) 1711 SB
/fm 256 def
2 49 277 875 B
1 F
n
315 927 1228 (during the first Windows Sock-A-Thon of  Windows Sockets application) 1228 SB
1543 927 16 (s) 16 SB
1559 927 350 ( and implementation) 350 SB
1909 927 16 (s) 16 SB
1925 927 175 ( at Interop) 175 SB
/fm 256 def
2 49 277 925 B
1 F
n
315 977 127 (Fall '92) 127 SB
442 977 1602 (.  Microsoft has shared WSAT \(the Windows Sockets API Tester\) with other Windows Sockets) 1602 SB
/fm 256 def
2 49 277 975 B
1 F
n
315 1027 1742 (implementors as a standard Windows Sockets test suite to aid in testing their implementations. Finally,) 1742 SB
/fm 256 def
2 49 277 1025 B
1 F
n
315 1077 393 (Sun Microsystems and ) 393 SB
708 1077 1127 (FTP Software plan to host the Windows Sock-A-Thon II in Boston) 1127 SB
1835 1077 222 ( February '93) 222 SB
2057 1077 11 (.) 11 SB
/fm 256 def
2 49 277 1075 B
1 F
n
/fm 256 def
2 49 277 1125 B
1 F
n
315 1177 1739 (Without the contributions of the individuals and corporations involved in the working group, Windows) 1739 SB
/fm 256 def
2 49 277 1175 B
1 F
n
315 1227 1788 (Sockets would never have been as thoroughly reviewed and completed as quickly. In just one year, several) 1788 SB
/fm 256 def
2 49 277 1225 B
1 F
n
315 1277 1728 (competitors in the networking business developed a useful specification with something to show for it!) 1728 SB
/fm 256 def
2 49 277 1275 B
1 F
n
315 1327 1752 (Many thanks to all which participated, either in person or on e-mail to the Windows Sockets effort. The) 1752 SB
/fm 256 def
2 49 277 1325 B
1 F
n
315 1377 1751 (authors would like to thank everyone who participated in any way, and apologize in advance for anyone) 1751 SB
/fm 256 def
2 49 277 1375 B
1 F
n
315 1427 287 (we have omitted.) 287 SB
/fm 256 def
2 49 277 1425 B
1 F
n
/fm 256 def
2 49 277 1475 B
1 F
n
315 1527 335 (List of contributors:) 335 SB
/fm 256 def
2 49 277 1525 B
1 F
n
/fm 256 def
2 49 277 1575 B
1 F
n
315 1627 211 (Martin Hall ) 211 SB
615 1627 198 (\(Chairman\)) 198 SB
915 1627 281 (JSB Corporation) 281 SB
1515 1627 340 (martinh@jsbus.com) 340 SB
/fm 256 def
2 49 277 1625 B
1 F
n
315 1677 235 (Mark Towfiq ) 235 SB
615 1677 232 (\(Coordinator\)) 232 SB
915 1677 397 (Microdyne Corporation) 397 SB
1515 1677 406 (towfiq@microdyne.com) 406 SB
/fm 256 def
2 49 277 1675 B
1 F
n
315 1727 48 (Ge) 48 SB
363 1727 20 (o) 20 SB
383 1727 168 (ff Arnold ) 168 SB
615 1727 198 (\(Editor 1.0\)) 198 SB
915 1727 309 (Sun Microsystems) 309 SB
1515 1727 341 (geoff@east.sun.com) 341 SB
/fm 256 def
2 49 277 1725 B
1 F
n
315 1777 283 (David Treadwell) 283 SB
615 1777 198 (\(Editor 1.1\)) 198 SB
915 1777 378 (Microsoft Corporation) 378 SB
1515 1777 400 (davidtr@microsoft.com) 400 SB
/fm 256 def
2 49 277 1775 B
1 F
n
315 1827 248 (Henry Sanders) 248 SB
915 1827 378 (Microsoft Corporation) 378 SB
1515 1827 411 (henrysa@microsoft.com) 411 SB
/fm 256 def
2 49 277 1825 B
1 F
n
/fm 256 def
2 49 277 1875 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 600 50 292 1925 CB
315 1928 146 (J. Allard) 146 SB
gr
/fm 256 def
2 49 277 1925 B
1 F
n
gs 599 50 893 1925 CB
915 1928 381 (Microsoft Corporation) 381 SB
gr
/fm 256 def
2 49 277 1925 B
1 F
n
gs 599 50 1493 1925 CB
1515 1928 394 (jallard@microsoft.com) 394 SB
gr
/fm 256 def
2 49 277 1925 B
1 F
n
gs 600 50 292 1975 CB
315 1978 343 (Chris Arap-Bologna) 343 SB
gr
/fm 256 def
2 49 277 1975 B
1 F
n
gs 599 50 893 1975 CB
915 1978 134 (Distinct) 134 SB
gr
/fm 256 def
2 49 277 1975 B
1 F
n
gs 599 50 1493 1975 CB
1515 1978 330 (chris@distinct.com) 330 SB
gr
/fm 256 def
2 49 277 1975 B
1 F
n
gs 600 50 292 2025 CB
315 2028 265 (Larry Backman) 265 SB
gr
/fm 256 def
2 49 277 2025 B
1 F
n
gs 599 50 893 2025 CB
915 2028 235 (FTP Software) 235 SB
gr
/fm 256 def
2 49 277 2025 B
1 F
n
gs 599 50 1493 2025 CB
1515 2028 323 (backman@ftp.com) 323 SB
gr
/fm 256 def
2 49 277 2025 B
1 F
n
gs 600 50 292 2075 CB
315 2078 243 (Alistair Banks) 243 SB
gr
/fm 256 def
2 49 277 2075 B
1 F
n
gs 599 50 893 2075 CB
915 2078 166 (Microsoft) 166 SB
gr
gs 599 50 893 2075 CB
1081 2078 215 ( Corporation) 215 SB
gr
/fm 256 def
2 49 277 2075 B
1 F
n
gs 599 50 1493 2075 CB
1515 2078 401 (alistair@microsoft.com) 401 SB
gr
/fm 256 def
2 49 277 2075 B
1 F
n
gs 600 50 292 2125 CB
315 2128 207 (Rob Barrow) 207 SB
gr
/fm 256 def
2 49 277 2125 B
1 F
n
gs 599 50 893 2125 CB
915 2128 282 (JSB Corporation) 282 SB
gr
/fm 256 def
2 49 277 2125 B
1 F
n
gs 599 50 1493 2125 CB
1515 2128 269 (robb@jsb.co.uk) 269 SB
gr
/fm 256 def
2 49 277 2125 B
1 F
n
gs 600 50 292 2175 CB
315 2178 202 (Carl Beame) 202 SB
gr
/fm 256 def
2 49 277 2175 B
1 F
n
gs 599 50 893 2175 CB
915 2178 345 (Beame & Whiteside) 345 SB
gr
/fm 256 def
2 49 277 2175 B
1 F
n
gs 599 50 1493 2175 CB
1515 2178 364 (beame@mcmaster,ca) 364 SB
gr
/fm 256 def
2 49 277 2175 B
1 F
n
gs 600 50 292 2225 CB
315 2228 220 (Dave Beaver) 220 SB
gr
/fm 256 def
2 49 277 2225 B
1 F
n
gs 599 50 893 2225 CB
915 2228 166 (Microsoft) 166 SB
gr
gs 599 50 893 2225 CB
1081 2228 215 ( Corporation) 215 SB
gr
/fm 256 def
2 49 277 2225 B
1 F
n
gs 599 50 1493 2225 CB
1515 2228 419 (dbeaver@microsoft.com) 419 SB
gr
/fm 256 def
2 49 277 2225 B
1 F
n
gs 600 50 292 2275 CB
315 2278 310 (Amatzia BenArtzi) 310 SB
gr
/fm 256 def
2 49 277 2275 B
1 F
n
gs 599 50 893 2275 CB
915 2278 284 (NetManage, Inc.) 284 SB
gr
/fm 256 def
2 49 277 2275 B
1 F
n
gs 599 50 1493 2275 CB
1515 2278 440 (amatzia@netmanage.com) 440 SB
gr
/fm 256 def
2 49 277 2275 B
1 F
n
gs 600 50 292 2325 CB
315 2328 203 (Mark Beyer) 203 SB
gr
/fm 256 def
2 49 277 2325 B
1 F
n
gs 599 50 893 2325 CB
915 2328 292 (Ungermann-Bass) 292 SB
gr
/fm 256 def
2 49 277 2325 B
1 F
n
gs 599 50 1493 2325 CB
1515 2328 292 (mbeyer@ub.com) 292 SB
gr
/fm 256 def
2 49 277 2325 B
1 F
n
gs 600 50 292 2375 CB
315 2378 266 (Nelson Bolyard) 266 SB
gr
/fm 256 def
2 49 277 2375 B
1 F
n
gs 599 50 893 2375 CB
915 2378 370 (Silicon Graphics, Inc.) 370 SB
gr
/fm 256 def
2 49 277 2375 B
1 F
n
gs 599 50 1493 2375 CB
1515 2378 282 (nelson@sgi.com) 282 SB
gr
/fm 256 def
2 49 277 2375 B
1 F
n
gs 600 50 292 2425 CB
315 2428 189 (Pat Bonner) 189 SB
gr
/fm 256 def
2 49 277 2425 B
1 F
n
gs 599 50 893 2425 CB
915 2428 284 (Hewlett-Packard) 284 SB
gr
/fm 256 def
2 49 277 2425 B
1 F
n
gs 599 50 1493 2425 CB
1515 2428 396 (p_bonner@cnd.hp.com) 396 SB
gr
/fm 256 def
2 49 277 2425 B
1 F
n
gs 600 50 292 2475 CB
315 2478 228 (Derek Brown) 228 SB
gr
/fm 256 def
2 49 277 2475 B
1 F
n
gs 599 50 893 2475 CB
915 2478 235 (FTP Software) 235 SB
gr
/fm 256 def
2 49 277 2475 B
1 F
n
gs 599 50 1493 2475 CB
1515 2478 293 (db@wco.ftp.com) 293 SB
gr
/fm 256 def
2 49 277 2475 B
1 F
n
gs 600 50 292 2525 CB
315 2528 270 (Malcolm Butler) 270 SB
gr
/fm 256 def
2 49 277 2525 B
1 F
n
gs 599 50 893 2525 CB
915 2528 68 (ICL) 68 SB
gr
/fm 256 def
2 49 277 2525 B
1 F
n
gs 599 50 1493 2525 CB
1515 2528 373 (mcab@oasis.icl.co.uk) 373 SB
gr
/fm 256 def
2 49 277 2525 B
1 F
n
gs 600 50 292 2575 CB
315 2578 253 (Mike Calbaum) 253 SB
gr
/fm 256 def
2 49 277 2575 B
1 F
n
gs 599 50 893 2575 CB
915 2578 375 (Fronteir Technologies) 375 SB
gr
/fm 256 def
2 49 277 2575 B
1 F
n
gs 599 50 1493 2575 CB
1515 2578 406 (mike@frontiertech.com) 406 SB
gr
/fm 256 def
2 49 277 2575 B
1 F
n
gs 600 50 292 2625 CB
315 2628 187 (Isaac Chan) 187 SB
gr
/fm 256 def
2 49 277 2625 B
1 F
n
gs 599 50 893 2625 CB
915 2628 166 (Microsoft) 166 SB
gr
gs 599 50 893 2625 CB
1081 2628 215 ( Corporation) 215 SB
gr
/fm 256 def
2 49 277 2625 B
1 F
n
gs 599 50 1493 2625 CB
1515 2628 389 (isaacc@microsoft.com) 389 SB
gr
/fm 256 def
2 49 277 2625 B
1 F
n
gs 600 50 292 2675 CB
315 2678 243 (Khoji Darbani) 243 SB
gr
/fm 256 def
2 49 277 2675 B
1 F
n
gs 599 50 893 2675 CB
915 2678 150 (Informix) 150 SB
gr
/fm 256 def
2 49 277 2675 B
1 F
n
gs 599 50 1493 2675 CB
1515 2678 358 (khoji@informix.com) 358 SB
gr
/fm 256 def
2 49 277 2675 B
1 F
n
gs 600 50 292 2725 CB
315 2728 216 (Nestor Fesas) 216 SB
gr
/fm 256 def
2 49 277 2725 B
1 F
n
gs 599 50 893 2725 CB
915 2728 376 (Hughes LAN Systems) 376 SB
gr
/fm 256 def
2 49 277 2725 B
1 F
n
gs 599 50 1493 2725 CB
1515 2728 275 (nestor@hls.com) 275 SB
gr
/fm 256 def
2 49 277 2725 B
1 F
n
gs 600 50 292 2775 CB
315 2778 248 (Karanja Gakio) 248 SB
gr
/fm 256 def
2 49 277 2775 B
1 F
n
gs 599 50 893 2775 CB
915 2778 235 (FTP Software) 235 SB
gr
/fm 256 def
2 49 277 2775 B
1 F
n
gs 599 50 1493 2775 CB
1515 2778 295 (karanja@ftp.com) 295 SB
gr
/fm 256 def
2 49 277 2775 B
1 F
n
gs 600 50 292 2825 CB
315 2828 193 (Vikas Garg) 193 SB
gr
/fm 256 def
2 49 277 2825 B
1 F
n
gs 599 50 893 2825 CB
915 2828 134 (Distinct) 134 SB
gr
/fm 256 def
2 49 277 2825 B
1 F
n
gs 599 50 1493 2825 CB
1515 2828 337 (vikas@distinct.com) 337 SB
gr
/fm 256 def
2 49 277 2825 B
1 F
n
gs 600 50 292 2875 CB
315 2878 177 (Gary Gere) 177 SB
gr
/fm 256 def
2 49 277 2875 B
1 F
n
gs 599 50 893 2875 CB
915 2878 103 (Gupta) 103 SB
gr
/fm 256 def
2 49 277 2875 B
1 F
n
gs 599 50 1493 2875 CB
1515 2878 311 (ggere@gupta.com) 311 SB
gr
/fm 256 def
2 49 277 2875 B
1 F
n
1198 3070 33 (vi) 33 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Roman
%%Page: 7 7
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
gs 600 50 292 267 CB
315 270 182 (Jim Gilroy) 182 SB
gr
0 0 0 fC
/fm 256 def
2 49 277 267 B
1 F
n
gs 599 50 893 267 CB
915 270 381 (Microsoft Corporation) 381 SB
gr
/fm 256 def
2 49 277 267 B
1 F
n
gs 599 50 1493 267 CB
1515 270 405 (jamesg@microsoft.com) 405 SB
gr
/fm 256 def
2 49 277 267 B
1 F
n
gs 600 50 292 317 CB
315 320 180 (Bill Hayes) 180 SB
gr
/fm 256 def
2 49 277 317 B
1 F
n
gs 599 50 893 317 CB
915 320 284 (Hewlett-Packard) 284 SB
gr
/fm 256 def
2 49 277 317 B
1 F
n
gs 599 50 1493 317 CB
1515 320 469 (billh@hpchdpc.cnd.hp.com) 469 SB
gr
/fm 256 def
2 49 277 317 B
1 F
n
gs 600 50 292 367 CB
315 370 152 (Paul Hill) 152 SB
gr
/fm 256 def
2 49 277 367 B
1 F
n
gs 599 50 893 367 CB
915 370 77 (MIT) 77 SB
gr
/fm 256 def
2 49 277 367 B
1 F
n
gs 599 50 1493 367 CB
1515 370 353 (pbh@athena.mit.edu) 353 SB
gr
/fm 256 def
2 49 277 367 B
1 F
n
gs 600 50 292 417 CB
315 420 239 (Tmima Koren) 239 SB
gr
/fm 256 def
2 49 277 417 B
1 F
n
gs 599 50 893 417 CB
915 420 295 (Net Manage, Inc.) 295 SB
gr
/fm 256 def
2 49 277 417 B
1 F
n
gs 599 50 1493 417 CB
1515 420 416 (tmima@netmanage.com) 416 SB
gr
/fm 256 def
2 49 277 417 B
1 F
n
gs 600 50 292 467 CB
315 470 177 (Hoek Law) 177 SB
gr
/fm 256 def
2 49 277 467 B
1 F
n
gs 599 50 893 467 CB
915 470 139 (Citicorp) 139 SB
gr
/fm 256 def
2 49 277 467 B
1 F
n
gs 599 50 1493 467 CB
1515 470 290 (law@dcc.tti.com) 290 SB
gr
/fm 256 def
2 49 277 467 B
1 F
n
gs 600 50 292 517 CB
315 520 292 (Graeme Le Roux) 292 SB
gr
/fm 256 def
2 49 277 517 B
1 F
n
gs 599 50 893 517 CB
915 520 270 (Moresdawn P/L) 270 SB
gr
/fm 256 def
2 49 277 517 B
1 F
n
gs 599 50 1493 517 CB
1515 520 14 (-) 14 SB
gr
/fm 256 def
2 49 277 517 B
1 F
n
gs 600 50 292 567 CB
315 570 217 (Kevin Lewis) 217 SB
gr
/fm 256 def
2 49 277 567 B
1 F
n
gs 599 50 893 567 CB
915 570 115 (Novell) 115 SB
gr
/fm 256 def
2 49 277 567 B
1 F
n
gs 599 50 1493 567 CB
1515 570 335 (kevinl@novell.com) 335 SB
gr
/fm 256 def
2 49 277 567 B
1 F
n
gs 600 50 292 617 CB
315 620 173 (Roger Lin) 173 SB
gr
/fm 256 def
2 49 277 617 B
1 F
n
gs 599 50 893 617 CB
915 620 103 (3Com) 103 SB
gr
/fm 256 def
2 49 277 617 B
1 F
n
gs 599 50 1493 617 CB
1515 620 480 (roger_lin@3mail.3com.com) 480 SB
gr
/fm 256 def
2 49 277 617 B
1 F
n
gs 600 50 292 667 CB
315 670 204 (Terry Lister) 204 SB
gr
/fm 256 def
2 49 277 667 B
1 F
n
gs 599 50 893 667 CB
915 670 284 (Hewlett-Packard) 284 SB
gr
/fm 256 def
2 49 277 667 B
1 F
n
gs 599 50 1493 667 CB
1515 670 280 (tel@cnd.hp.com) 280 SB
gr
/fm 256 def
2 49 277 667 B
1 F
n
gs 600 50 292 717 CB
315 720 277 (Jeng Long Jiang) 277 SB
gr
/fm 256 def
2 49 277 717 B
1 F
n
gs 599 50 893 717 CB
915 720 211 (Wollongong) 211 SB
gr
/fm 256 def
2 49 277 717 B
1 F
n
gs 599 50 1493 717 CB
1515 720 261 (long@twg.com) 261 SB
gr
/fm 256 def
2 49 277 717 B
1 F
n
gs 600 50 292 767 CB
315 770 206 (Lee Murach) 206 SB
gr
/fm 256 def
2 49 277 767 B
1 F
n
gs 599 50 893 767 CB
915 770 313 (Network Research) 313 SB
gr
/fm 256 def
2 49 277 767 B
1 F
n
gs 599 50 1493 767 CB
1515 770 227 (lee@nrc.com) 227 SB
gr
/fm 256 def
2 49 277 767 B
1 F
n
gs 600 50 292 817 CB
315 820 240 (Pete Ostenson) 240 SB
gr
/fm 256 def
2 49 277 817 B
1 F
n
gs 599 50 893 817 CB
915 820 381 (Microsoft Corporation) 381 SB
gr
/fm 256 def
2 49 277 817 B
1 F
n
gs 599 50 1493 817 CB
1515 820 377 (peteo@microsoft.com) 377 SB
gr
/fm 256 def
2 49 277 817 B
1 F
n
gs 600 50 292 867 CB
315 870 191 (David Pool) 191 SB
gr
/fm 256 def
2 49 277 867 B
1 F
n
gs 599 50 893 867 CB
915 870 166 (Spry, Inc.) 166 SB
gr
/fm 256 def
2 49 277 867 B
1 F
n
gs 599 50 1493 867 CB
1515 870 275 (dave@spry.com) 275 SB
gr
/fm 256 def
2 49 277 867 B
1 F
n
gs 600 50 292 917 CB
315 920 186 (Bob Quinn) 186 SB
gr
/fm 256 def
2 49 277 917 B
1 F
n
gs 599 50 893 917 CB
915 920 235 (FTP Software) 235 SB
gr
/fm 256 def
2 49 277 917 B
1 F
n
gs 599 50 1493 917 CB
1515 920 224 (rcq@ftp.com) 224 SB
gr
/fm 256 def
2 49 277 917 B
1 F
n
gs 600 50 292 967 CB
315 970 253 (Glenn Reitsma) 253 SB
gr
/fm 256 def
2 49 277 967 B
1 F
n
gs 599 50 893 967 CB
915 970 376 (Hughes LAN Systems) 376 SB
gr
/fm 256 def
2 49 277 967 B
1 F
n
gs 599 50 1493 967 CB
1515 970 280 (glennr@hls.com) 280 SB
gr
/fm 256 def
2 49 277 967 B
1 F
n
gs 600 50 292 1017 CB
315 1020 171 (Brad Rice) 171 SB
gr
/fm 256 def
2 49 277 1017 B
1 F
n
gs 599 50 893 1017 CB
915 1020 70 (Age) 70 SB
gr
/fm 256 def
2 49 277 1017 B
1 F
n
gs 599 50 1493 1017 CB
1515 1020 246 (rice@age.com) 246 SB
gr
/fm 256 def
2 49 277 1017 B
1 F
n
gs 600 50 292 1067 CB
315 1070 269 (Allen Rochkind) 269 SB
gr
/fm 256 def
2 49 277 1067 B
1 F
n
gs 599 50 893 1067 CB
915 1070 103 (3Com) 103 SB
gr
/fm 256 def
2 49 277 1067 B
1 F
n
gs 599 50 1493 1067 CB
1515 1070 14 (-) 14 SB
gr
/fm 256 def
2 49 277 1067 B
1 F
n
gs 600 50 292 1117 CB
315 1120 266 (Jonathan Rosen) 266 SB
gr
/fm 256 def
2 49 277 1117 B
1 F
n
gs 599 50 893 1117 CB
915 1120 79 (IBM) 79 SB
gr
/fm 256 def
2 49 277 1117 B
1 F
n
gs 599 50 1493 1117 CB
1515 1120 376 (jrosen@vnet.ibm.com) 376 SB
gr
/fm 256 def
2 49 277 1117 B
1 F
n
gs 600 50 292 1167 CB
315 1170 217 (Steve Stokes) 217 SB
gr
/fm 256 def
2 49 277 1167 B
1 F
n
gs 599 50 893 1167 CB
915 1170 115 (Novell) 115 SB
gr
/fm 256 def
2 49 277 1167 B
1 F
n
gs 599 50 1493 1167 CB
1515 1170 318 (stoke@novell.com) 318 SB
gr
/fm 256 def
2 49 277 1167 B
1 F
n
gs 600 50 292 1217 CB
315 1220 198 (Joseph Tsai) 198 SB
gr
/fm 256 def
2 49 277 1217 B
1 F
n
gs 599 50 893 1217 CB
915 1220 103 (3Com) 103 SB
gr
/fm 256 def
2 49 277 1217 B
1 F
n
gs 599 50 1493 1217 CB
1515 1220 457 (joe_tsai@3mail.3com.com) 457 SB
gr
/fm 256 def
2 49 277 1217 B
1 F
n
gs 600 50 292 1267 CB
315 1270 357 (James Van Bokkelen) 357 SB
gr
/fm 256 def
2 49 277 1267 B
1 F
n
gs 599 50 893 1267 CB
915 1270 235 (FTP Software) 235 SB
gr
/fm 256 def
2 49 277 1267 B
1 F
n
gs 599 50 1493 1267 CB
1515 1270 245 (jbvb@ftp.com) 245 SB
gr
/fm 256 def
2 49 277 1267 B
1 F
n
gs 600 50 292 1317 CB
315 1320 168 (Miles Wu) 168 SB
gr
/fm 256 def
2 49 277 1317 B
1 F
n
gs 599 50 893 1317 CB
915 1320 211 (Wollongong) 211 SB
gr
/fm 256 def
2 49 277 1317 B
1 F
n
gs 599 50 1493 1317 CB
1515 1320 237 (wu@twg.com) 237 SB
gr
/fm 256 def
2 49 277 1317 B
1 F
n
gs 600 50 292 1367 CB
315 1370 272 (Boris Yanovsky) 272 SB
gr
/fm 256 def
2 49 277 1367 B
1 F
n
gs 599 50 893 1367 CB
915 1370 284 (NetManage, Inc.) 284 SB
gr
/fm 256 def
2 49 277 1367 B
1 F
n
gs 599 50 1493 1367 CB
1515 1370 391 (boris@netmanage.com) 391 SB
gr
/fm 256 def
2 49 277 1367 B
1 F
n
1192 3070 45 (vii) 45 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 8 8
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1778 117 309 (Introduction ) 309 SB
2087 117 28 (1) 28 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 50 50 1 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 367 454 (1.  INTRODUCTION) 454 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 450 736 (1.1 What is Windows Sockets?) 736 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 511 1730 (The Windows Sockets specification defines a network programming interface for Microsoft Windows) 1730 SB
32 0 0 33 33 0 0 0 30 /Times-Roman /font32 ANSIFont font
2045 506 17 (1) 17 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 561 1762 (which is based on the "socket" paradigm popularized in the Berkeley Software Distribution \(BSD\) from) 1762 SB
315 611 1791 (the University of California at Berkeley.  It encompasses both familiar Berkeley socket style routines and) 1791 SB
315 661 1641 (a set of Windows-specific extensions designed to allow the programmer to take advantage of the) 1641 SB
315 711 611 (message-driven nature of Windows.) 611 SB
315 811 1767 (The Windows Sockets Specification is intended to provide a single API to which application developers) 1767 SB
315 861 1685 (can program and multiple network software vendors can conform.  Furthermore, in the context of a) 1685 SB
315 911 1706 (particular version of Microsoft Windows, it defines a binary interface \(ABI\) such that an application) 1706 SB
315 961 1703 (written to the Windows Sockets API can work with a conformant protocol implementation from any) 1703 SB
315 1011 1727 (network software vendor.  This specification thus defines the library calls and associated semantics to) 1727 SB
315 1061 1679 (which an application developer can program and which a network software vendor can implement.) 1679 SB
315 1161 1756 (Network software which conforms to this Windows Sockets specification will be considered "Windows) 1756 SB
315 1211 1798 (Sockets Compliant".  Suppliers of interfaces which are "Windows Sockets Compliant" shall be referred to) 1798 SB
315 1261 1798 (as "Windows Sockets Suppliers".  To be Windows Sockets Compliant, a vendor must implement 100% of) 1798 SB
315 1311 614 (this Windows Sockets specification.) 614 SB
315 1411 1599 (Applications which are capable of operating with any "Windows Sockets Compliant" protocol) 1599 SB
315 1461 1736 (implementation will be considered as having a "Windows Sockets Interface" and will be referred to as) 1736 SB
315 1511 575 ("Windows Sockets Applications".) 575 SB
315 1611 1621 (This version of the Windows Sockets specification defines and documents the use of the API in) 1621 SB
315 1661 1696 (conjunction with the Internet Protocol Suite \(IPS, generally referred to as TCP/IP\).  Specifically, all) 1696 SB
315 1711 1569 (Windows Sockets implementations support both stream \(TCP\) and datagram \(UDP\) sockets.) 1569 SB
315 1811 1700 (While the use of this API with alternative protocol stacks is not precluded \(and is expected to be the) 1700 SB
315 1861 1704 (subject of future revisions of the specification\), such usage is beyond the scope of this version of the) 1704 SB
315 1911 228 (specification.) 228 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 2033 500 (1.2 Berkeley Sockets) 500 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 2094 1798 (The Windows Sockets Specification has been built upon the Berkeley Sockets programming model which) 1798 SB
315 2144 1768 (is the de facto standard for TCP/IP networking.  It is intended to provide a high degree of familiarity for) 1768 SB
315 2194 1124 (programmers who are used to programming with sockets in UNIX) 1124 SB
32 0 0 33 33 0 0 0 30 /Times-Roman /font32 ANSIFont font
1439 2189 17 (2) 17 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1456 2194 538 ( and other environments, and to) 538 SB
315 2244 1774 (simplify the task of porting existing sockets-based source code.  The Windows Sockets API is consistent) 1774 SB
315 2294 1103 (with release 4.3 of the Berkeley Software Distribution \(4.3BSD\).) 1103 SB
315 2394 1738 (Portions of the Windows Sockets specification are derived from material which is Copyright \(c\) 1982-) 1738 SB
315 2444 1711 (1986 by the Regents of the University of California.  All rights are reserved.  The Berkeley Software) 1711 SB
315 2494 1227 (License Agreement specifies the terms and conditions for redistribution.) 1227 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 2616 1368 (1.3 Microsoft Windows and Windows-specific extensions) 1368 SB
32 0 0 42 42 0 1 0 38 /Times-Roman /font32 ANSIFont font
315 2820 220 (                    ) 220 SB
535 2820 220 (                    ) 220 SB
755 2820 165 (               ) 165 SB
32 0 0 33 33 0 0 0 30 /Times-Roman /font32 ANSIFont font
315 2865 17 (1) 17 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
332 2870 873 ( Windows is a trademark of Microsoft Corporation.) 873 SB
32 0 0 33 33 0 0 0 30 /Times-Roman /font32 ANSIFont font
315 2915 17 (2) 17 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
332 2920 955 ( UNIX is a trademark of Unix System Laboratories, Inc.) 955 SB
1204 3070 21 (1) 21 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Roman
%%Page: 9 9
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1778 117 309 (Introduction ) 309 SB
2087 117 28 (2) 28 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 270 1741 (This API is intended to be usable within all implementations and versions of Microsoft Windows from) 1741 SB
315 320 1735 (Microsoft Windows Version 3.0 onwards.  It thus provides for Windows Sockets implementations and) 1735 SB
315 370 1306 (Windows Sockets applications in both 16 and 32 bit operating environments.) 1306 SB
315 470 1729 (Windows Sockets makes provisions for multithreaded Windows processes.  A process contains one or) 1729 SB
315 520 584 (more threads of execution.  In the ) 584 SB
899 520 225 (Windows 3.1) 225 SB
1124 520 978 ( non-multithreaded world, a task corresponds to a process) 978 SB
/fm 256 def
2 49 277 517 B
1 F
n
315 570 1783 (with a single thread.  All references to threads in this document refer to actual "threads" in multithreaded) 1783 SB
315 620 1706 (Windows environments.  In non multithreaded environments \(such as Windows 3.0\), use of the term) 1706 SB
315 670 607 (thread refers to a Windows process.) 607 SB
315 770 1692 (The Microsoft Windows extensions included in Windows Sockets are provided to allow application) 1692 SB
315 820 1752 (developers to create software which conforms to the Windows programming model.  It is expected that) 1752 SB
315 870 1649 (this will facilitate the creation of robust and high-performance applications, and will improve the) 1649 SB
315 920 1631 (cooperative multitasking of applications within non-preemptive versions of Windows.  With the) 1631 SB
315 970 222 (exception of ) 222 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
537 967 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
797 970 83 ( and ) 83 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
880 967 274 (WSACleanup\(\)) 274 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1154 970 463 ( their use is not mandatory.) 463 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 1093 836 (1.4 The Status of this Specification) 836 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 1204 1623 (Windows Sockets is an independent specification which was created and exists for the benefit of) 1623 SB
315 1254 1753 (application developers and network vendors and, indirectly, computer users. Each published \(non-draft\)) 1753 SB
315 1304 1768 (version of this specification  represents a fully workable API for implementation by network vendors and) 1768 SB
315 1354 1793 (programming use by application developers. Discussion of this specification and  suggested improvements) 1793 SB
315 1404 1644 (continue and are welcomed. Such discussion occurs mainly via the Internet electronic mail forum) 1644 SB
315 1454 177 (winsock@) 177 SB
492 1454 178 (microdyne) 178 SB
670 1454 1357 (.com. Meetings of  interested parties occur on an irregular basis. Details of these) 1357 SB
/fm 256 def
2 49 277 1452 B
1 F
n
315 1504 893 (meetings are publicized to the electronic mail forum.) 893 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 1627 481 (1.5 Revision History) 481 SB
/fm 256 def
2 82 277 1602 B
1 F
n
315 1685 836 (1.5.1 Windows Sockets Version 1.0) 836 SB
/fm 256 def
2 57 277 1685 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 1745 1732 (Windows Sockets Version 1.0 represented the results of considerable work within  the vendor and user) 1732 SB
/fm 256 def
2 49 277 1743 B
1 F
n
315 1795 1685 (community as discussed in Appendix C. This version of  the specification was released in order that) 1685 SB
/fm 256 def
2 49 277 1793 B
1 F
n
315 1845 1707 (network software suppliers and  application developers could begin to construct implementations and) 1707 SB
/fm 256 def
2 49 277 1843 B
1 F
n
315 1895 1102 (applications  which conformed to the Windows Sockets standard.) 1102 SB
/fm 256 def
2 49 277 1893 B
1 F
n
/fm 256 def
2 49 277 1943 B
1 F
n
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 1993 836 (1.5.2 Windows Sockets Version 1.1) 836 SB
/fm 256 def
2 57 277 1993 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 2053 1655 (Windows Sockets Version 1.1 follows the guidelines and structure laid out by version 1.0, making) 1655 SB
/fm 256 def
2 49 277 2051 B
1 F
n
315 2103 1742 (changes only where absolutely necessary as indicated by the experiences of a number of companies that) 1742 SB
/fm 256 def
2 49 277 2101 B
1 F
n
315 2153 1748 (created Windows Sockets implementations based on the version 1.0 specification.  Version 1.1 contains) 1748 SB
/fm 256 def
2 49 277 2151 B
1 F
n
315 2203 1792 (several clarifications and minor fixes to version 1.0.  Additionally, the following more significant changes) 1792 SB
/fm 256 def
2 49 277 2201 B
1 F
n
315 2253 591 (were incorporated into version 1.1:) 591 SB
/fm 256 def
2 49 277 2251 B
1 F
n
/fm 256 def
2 49 277 2301 B
1 F
n
465 2354 306 (o Inclusion of the ) 306 SB
32 0 0 42 42 0 0 0 39 /Times-Bold /font29 ANSIFont font
771 2353 263 (gethostname\(\) ) 263 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1034 2354 1000 (routine to simplify retrieval of the host's name and address.) 1000 SB
/fm 256 def
2 50 277 2351 B
1 F
n
/fm 256 def
2 49 277 2402 B
1 F
n
465 2454 1580 (o Definition of DLL ordinal values below 1000 as reserved for Windows Sockets and ordinals) 1580 SB
/fm 256 def
2 49 277 2452 B
1 F
n
465 2504 1609 (above 1000 as unrestricted.  This allows Windows Sockets vendors to include private interfaces) 1609 SB
/fm 256 def
2 49 277 2502 B
1 F
n
465 2554 1531 (to their DLLs without risking that the ordinals chosen will conflict with a future version of) 1531 SB
/fm 256 def
2 49 277 2552 B
1 F
n
465 2604 309 (Windows Sockets.) 309 SB
/fm 256 def
2 49 277 2602 B
1 F
n
/fm 256 def
2 49 277 2652 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 2705 587 (o Addition of a reference count to ) 587 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1052 2702 271 (WSAStartup\(\) ) 271 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1323 2705 72 (and ) 72 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1395 2702 274 (WSACleanup\(\)) 274 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1669 2705 177 (, requiring) 177 SB
/fm 256 def
2 50 277 2702 B
1 F
n
465 2756 1617 (correspondences between the calls.  This allows applications and third-party DLLs to make use) 1617 SB
/fm 256 def
2 49 277 2753 B
1 F
n
465 2806 1580 (of a Windows Sockets implementation without being concerned about the calls to these APIs) 1580 SB
/fm 256 def
2 49 277 2803 B
1 F
n
465 2856 317 (made by the other.) 317 SB
/fm 256 def
2 49 277 2853 B
1 F
n
/fm 256 def
2 49 277 2903 B
1 F
n
1204 3070 21 (2) 21 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 10 10
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1778 117 309 (Introduction ) 309 SB
2087 117 28 (3) 28 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 270 455 (o Change of return type of ) 455 SB
32 0 0 42 42 0 0 0 39 /Times-Bold /font29 ANSIFont font
920 269 214 (inet_addr\(\) ) 214 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1134 270 92 (from ) 92 SB
32 0 0 42 42 0 0 0 39 /Times-Bold /font29 ANSIFont font
1226 269 257 (struct in_addr) 257 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1483 270 54 ( to ) 54 SB
32 0 0 42 42 0 0 0 39 /Times-Bold /font29 ANSIFont font
1537 269 246 (unsigned long) 246 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1783 270 184 (.  This was) 184 SB
/fm 256 def
2 50 277 267 B
1 F
n
465 320 1526 (required due to different handling of four-byte structure returns between the Microsoft and) 1526 SB
/fm 256 def
2 49 277 318 B
1 F
n
465 370 362 (Borland C compilers.) 362 SB
/fm 256 def
2 49 277 368 B
1 F
n
/fm 256 def
2 49 277 418 B
1 F
n
465 471 216 (o Change of ) 216 SB
32 0 0 42 42 0 0 0 39 /Times-Bold /font29 ANSIFont font
681 470 349 (WSAAsyncSelect\(\) ) 349 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1030 471 982 (semantics from "edge-triggered" to "level-triggered".  The) 982 SB
/fm 256 def
2 50 277 468 B
1 F
n
465 521 1394 (level-triggered semantics significantly simplify an application's use of this routine.) 1394 SB
/fm 256 def
2 49 277 519 B
1 F
n
/fm 256 def
2 49 277 569 B
1 F
n
465 622 235 (o Change the ) 235 SB
32 0 0 42 42 0 0 0 39 /Times-Bold /font29 ANSIFont font
700 621 228 (ioctlsocket\(\) ) 228 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
928 622 532 (FIONBIO semantics to fail if a ) 532 SB
32 0 0 42 42 0 0 0 39 /Times-Bold /font29 ANSIFont font
1460 621 349 (WSAAsyncSelect\(\) ) 349 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1809 622 100 (call is) 100 SB
/fm 256 def
2 50 277 619 B
1 F
n
465 672 441 (outstanding on the socket.) 441 SB
/fm 256 def
2 49 277 670 B
1 F
n
/fm 256 def
2 49 277 720 B
1 F
n
465 772 1315 (o Addition of the TCP_NODELAY socket option for RFC 1122 conformance.) 1315 SB
/fm 256 def
2 49 277 770 B
1 F
n
/fm 256 def
2 49 277 820 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 873 1743 (All changes between the 1.0 and 1.1 specifications are flagged with change bars at the left of the page.) 1743 SB
/fm 256 def
2 49 277 870 B
1 F
n
/fm 256 def
2 49 277 920 B
1 F
n
1204 3070 21 (3) 21 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 11 11
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1426 117 661 (Programming with Sockets ) 661 SB
2087 117 28 (4) 28 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 50 50 1 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 317 859 (2.  PROGRAMMING WITH SOCKETS) 859 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 400 1182 (2.1 Windows Sockets Stack Installation Checking) 1182 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 461 1760 (To detect the presence of one \(or many\) Windows Sockets implementations on a system, an application) 1760 SB
315 511 1462 (which has been linked with the Windows Sockets Import Library may simply call the ) 1462 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1777 508 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 562 1791 (routine.  If an application wishes to be a little more sophisticated it can examine the $PATH environment) 1791 SB
315 612 1715 (variable and search for instances of Windows Sockets implementations \(WINSOCK.DLL\).  For each) 1715 SB
315 662 380 (instance it can issue a ) 380 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
695 659 264 (LoadLibrary\(\)) 264 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
959 662 286 ( call and use the ) 286 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1245 659 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1505 662 607 ( routine to discover implementation) 607 SB
315 713 225 (specific data.) 225 SB
315 813 1710 (This version of the Windows Sockets specification does not attempt to address explicitly the issue of) 1710 SB
315 863 1622 (multiple concurrent Windows Sockets implementations.  Nothing in the specification should be) 1622 SB
315 913 1758 (interpreted as restricting multiple Windows Sockets DLLs from being present and used concurrently by) 1758 SB
315 963 746 (one or more Windows Sockets applications.) 746 SB
315 1063 1491 (For further details of where to obtain Windows Sockets components, see Appendix B.2.) 1491 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 1185 277 (2.2 Sockets) 277 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 1245 1798 (The following material is derived from the document "An Advanced 4.3BSD Interprocess Communication) 1798 SB
315 1295 1719 (Tutorial" by Samuel J. Leffler, Robert S. Fabry, William N. Joy, Phil Lapsley, Steve Miller, and Chris) 1719 SB
315 1345 111 (Torek.) 111 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 1443 496 (2.2.1 Basic concepts) 496 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 1504 1773 (The basic building block for communication is the socket.  A socket is an endpoint of communication to) 1773 SB
315 1554 1716 (which a name may be bound.  Each socket in use has a type and an associated process.  Sockets exist) 1716 SB
315 1604 1662 (within communication domains.  A communication domain is an abstraction introduced to bundle) 1662 SB
315 1654 1726 (common properties of threads communicating through sockets.  Sockets normally exchange data only) 1726 SB
315 1704 1660 (with sockets in the same domain \(it may be possible to cross domain boundaries, but only if some) 1660 SB
315 1754 1681 (translation process is performed\).  The Windows Sockets facilities support a single communication) 1681 SB
315 1804 1776 (domain: the Internet domain, which is used by processes which communicate using the Internet Protocol) 1776 SB
315 1854 1321 (Suite.  \(Future versions of this specification may include additional domains.\)) 1321 SB
315 1954 1630 (Sockets are typed according to the communication properties visible to a user.  Applications are) 1630 SB
315 2004 1786 (presumed to communicate only between sockets of the same type, although there is nothing that prevents) 1786 SB
315 2054 1677 (communication between sockets of different types should the underlying communication protocols) 1677 SB
315 2104 209 (support this.) 209 SB
315 2204 1741 (Two types of sockets currently are available to a user.  A stream socket provides for the bi-directional,) 1741 SB
315 2254 1321 (reliable, sequenced, and unduplicated flow of data without record boundaries.) 1321 SB
315 2354 1756 (A datagram socket supports bi-directional flow of data which is not promised to be sequenced, reliable,) 1756 SB
315 2404 1636 (or unduplicated.  That is, a process receiving messages on a datagram socket may find messages) 1636 SB
315 2454 1649 (duplicated, and, possibly, in an order different from the order in which it was sent.  An important) 1649 SB
315 2504 1719 (characteristic of a datagram socket is that record boundaries in data are preserved.  Datagram sockets) 1719 SB
315 2554 1710 (closely model the facilities found in many contemporary packet switched networks such as Ethernet.) 1710 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 2651 595 (2.2.2 Client-server model) 595 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 2712 1790 (The most commonly used paradigm in constructing distributed applications is the client/server model.  In) 1790 SB
315 2762 1776 (this scheme client applications request services from a server application.  This implies an asymmetry in) 1776 SB
315 2812 995 (establishing communication between the client and server.) 995 SB
1204 3070 21 (4) 21 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 12 12
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1426 117 661 (Programming with Sockets ) 661 SB
2087 117 28 (5) 28 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 270 1680 (The client and server require a well-known set of conventions before service may be rendered \(and) 1680 SB
315 320 1737 (accepted\).  This set of conventions comprises a protocol which must be implemented at both ends of a) 1737 SB
315 370 1771 (connection.  Depending on the situation, the protocol may be symmetric or asymmetric.  In a symmetric) 1771 SB
315 420 1612 (protocol, either side may play the master or slave roles.  In an asymmetric protocol, one side is) 1612 SB
315 470 1775 (immutably recognized as the master, with the other as the slave.  An example of a symmetric protocol is) 1775 SB
315 520 1781 (the TELNET protocol used in the Internet for remote terminal emulation.  An example of an asymmetric) 1781 SB
315 570 1681 (protocol is the Internet file transfer protocol, FTP.  No matter whether the specific protocol used in) 1681 SB
315 620 1795 (obtaining a service is symmetric or asymmetric, when accessing a service there is a "client process'' and a) 1795 SB
315 670 284 ("server process''.) 284 SB
315 770 1726 (A server application normally listens at a well-known address for service requests.  That is, the server) 1726 SB
315 820 1754 (process remains dormant until a connection is requested by a client's connection to the server's address.) 1754 SB
315 870 1733 (At such a time the server process "wakes up'' and services the client, performing whatever appropriate) 1733 SB
315 920 1764 (actions the client requests of it.  While connection-based services are the norm, some services are based) 1764 SB
315 970 533 (on the use of datagram sockets.) 533 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 1067 534 (2.2.3 Out-of-band data) 534 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 1148 1715 (Note: The following discussion of out-of-band data, also referred to as TCP Urgent data,  follows the) 1715 SB
255 255 255 fC
/fm 256 def
1827 7 301 1137 B
1 F
n
0 0 0 fC
/fm 256 def
5 5 295 1131 B
1 F
n
/fm 256 def
5 5 295 1131 B
1 F
n
/fm 256 def
1827 5 301 1131 B
1 F
n
/fm 256 def
5 5 2129 1131 B
1 F
n
/fm 256 def
5 5 2129 1131 B
1 F
n
/fm 256 def
5 57 295 1137 B
1 F
n
/fm 256 def
5 57 2129 1137 B
1 F
n
/fm 256 def
5 57 2135 1137 B
1 F
n
315 1198 1741 (model used in the Berkeley software distribution.  Users and implementors should be aware of the fact) 1741 SB
/fm 256 def
5 49 295 1195 B
1 F
n
/fm 256 def
5 49 2129 1195 B
1 F
n
/fm 256 def
5 49 2135 1195 B
1 F
n
315 1248 1767 (that there are at present two conflicting interpretations of RFC 793 \(in which the concept is introduced\),) 1767 SB
/fm 256 def
5 49 295 1245 B
1 F
n
/fm 256 def
5 49 2129 1245 B
1 F
n
/fm 256 def
5 49 2135 1245 B
1 F
n
315 1298 1771 (and that the implementation of out-of-band data in the Berkeley Software Distribution does not conform) 1771 SB
/fm 256 def
5 49 295 1295 B
1 F
n
/fm 256 def
5 49 2129 1295 B
1 F
n
/fm 256 def
5 49 2135 1295 B
1 F
n
315 1348 1760 (to the Host Requirements laid down in RFC 1122.  To minimize interoperability problems, applications) 1760 SB
/fm 256 def
5 49 295 1345 B
1 F
n
/fm 256 def
5 49 2129 1345 B
1 F
n
/fm 256 def
5 49 2135 1345 B
1 F
n
315 1398 1706 (writers are advised not to use out-of-band data unless this is required in order to interoperate with an) 1706 SB
/fm 256 def
5 49 295 1395 B
1 F
n
/fm 256 def
5 49 2129 1395 B
1 F
n
/fm 256 def
5 49 2135 1395 B
1 F
n
315 1448 1759 (existing service.  Windows Sockets suppliers are urged to document the out-of-band semantics \(BSD or) 1759 SB
/fm 256 def
5 49 295 1445 B
1 F
n
/fm 256 def
5 49 2129 1445 B
1 F
n
/fm 256 def
5 49 2135 1445 B
1 F
n
315 1498 1718 (RFC 1122\) which their product implements.  It is beyond the scope of this specification to mandate a) 1718 SB
/fm 256 def
5 49 295 1495 B
1 F
n
/fm 256 def
5 49 2129 1495 B
1 F
n
/fm 256 def
5 49 2135 1495 B
1 F
n
315 1548 967 (particular set of semantics for out-of-band data handling.) 967 SB
255 255 255 fC
/fm 256 def
1827 7 301 1595 B
1 F
n
0 0 0 fC
/fm 256 def
5 5 295 1603 B
1 F
n
/fm 256 def
5 5 295 1603 B
1 F
n
/fm 256 def
1827 5 301 1603 B
1 F
n
/fm 256 def
1827 5 301 1609 B
1 F
n
/fm 256 def
5 11 2135 1603 B
1 F
n
/fm 256 def
11 5 2129 1609 B
1 F
n
/fm 256 def
5 5 2129 1603 B
1 F
n
/fm 256 def
5 5 2129 1603 B
1 F
n
/fm 256 def
5 57 295 1545 B
1 F
n
/fm 256 def
5 57 2129 1545 B
1 F
n
/fm 256 def
5 57 2135 1545 B
1 F
n
315 1668 1757 (The stream socket abstraction includes the notion of "out of band'' data.  Out-of-band data is a logically) 1757 SB
315 1718 1740 (independent transmission channel associated with each pair of connected stream sockets.  Out-of-band) 1740 SB
315 1768 1754 (data is delivered to the user independently of normal data.  The abstraction defines that the out-of-band) 1754 SB
315 1818 1691 (data facilities must support the reliable delivery of at least one out-of-band message at a time.  This) 1691 SB
315 1868 1757 (message may contain at least one byte of data, and at least one message may be pending delivery to the) 1757 SB
315 1918 1688 (user at any one time.  For communications protocols which support only in-band signaling \(i.e.  the) 1688 SB
315 1968 1794 (urgent data is delivered in sequence with the normal data\), the system normally extracts the data from the) 1794 SB
315 2018 1726 (normal data stream and stores it separately.  This allows users to choose between receiving the urgent) 1726 SB
315 2068 1693 (data in order and receiving it out of sequence without having to buffer all the intervening data.  It is) 1693 SB
315 2118 651 (possible to "peek'' at out-of-band data.) 651 SB
315 2218 1764 (An application may prefer to process out-of-band data "in-line", as part of the normal data stream.  This) 1764 SB
315 2268 1202 (is achieved by setting the socket option SO_OOBINLINE \(see section ) 1202 SB
1517 2268 106 (4.1.21) 106 SB
1623 2268 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1645 2265 214 (setsockopt\(\)) 214 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1859 2268 249 (\).  In this case,) 249 SB
315 2319 1678 (the application may wish to determine whether any of the unread data is "urgent" \(the term usually) 1678 SB
315 2369 1653 (applied to in-line out-of-band data\).  To facilitate this, the Windows Sockets implementation will) 1653 SB
315 2419 1735 (maintain a logical "mark" in the data stream indicate the point at which the out-of-band data was sent.) 1735 SB
315 2469 749 (An application can use the SIOCATMARK ) 749 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1064 2466 218 (ioctlsocket\(\)) 218 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1282 2469 399 ( command \(see section ) 399 SB
1681 2469 106 (4.1.12) 106 SB
1787 2469 239 (\) to determine) 239 SB
315 2520 1723 (whether there is any unread data preceding the mark.  For example, it might use this to resynchronize) 1723 SB
315 2570 1730 (with its peer by ensuring that all data up to the mark in the data stream is discarded when appropriate.) 1730 SB
315 2670 77 (The ) 77 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
392 2667 338 (WSAAsyncSelect\(\)) 338 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
730 2670 1376 ( routine is particularly well suited to handling notification of the presence of out-) 1376 SB
315 2721 227 (of-band-data.) 227 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 2818 448 (2.2.4 Broadcasting) 448 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1204 3070 21 (5) 21 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 13 13
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1426 117 661 (Programming with Sockets ) 661 SB
2087 117 28 (6) 28 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 270 1762 (By using a datagram socket, it is possible to send broadcast packets on many networks supported by the) 1762 SB
315 320 1729 (system.  The network itself must support broadcast: the system provides no simulation of broadcast in) 1729 SB
315 370 1713 (software.  Broadcast messages can place a high load on a network, since they force every host on the) 1713 SB
315 420 1780 (network to service them.  Consequently, the ability to send broadcast packets has been limited to sockets) 1780 SB
315 470 1798 (which are explicitly marked as allowing broadcasting.  Broadcast is typically used for one of two reasons:) 1798 SB
315 520 1725 (it is desired to find a resource on a local network without prior knowledge of its address, or important) 1725 SB
315 570 1440 (functions such as routing require that information be sent to all accessible neighbors.) 1440 SB
315 670 1773 (The destination address of the message to be broadcast depends on the network\(s\) on which the message) 1773 SB
315 720 1789 (is to be broadcast.  The Internet domain supports a shorthand notation for broadcast on the local network,) 1789 SB
315 770 1715 (the address INADDR_BROADCAST.  Received broadcast messages contain the senders address and) 1715 SB
315 820 886 (port, as datagram sockets must be bound before use.) 886 SB
315 920 1761 (Some types of network support the notion of different types of broadcast.  For example, the IEEE 802.5) 1761 SB
315 970 1642 (token ring architecture supports the use of link-level broadcast indicators, which control whether) 1642 SB
315 1020 1619 (broadcasts are forwarded by bridges.  The Windows Sockets specification does not provide any) 1619 SB
315 1070 1793 (mechanism whereby an application can determine the type of underlying network, nor any way to control) 1793 SB
315 1120 514 (the semantics of broadcasting.) 514 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 1242 419 (2.3 Byte Ordering) 419 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 1303 887 (The Intel byte ordering is like that of the DEC VAX) 887 SB
32 0 0 33 33 0 0 0 30 /Times-Roman /font32 ANSIFont font
1202 1298 17 (3) 17 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1219 1303 855 (, and therefore differs from the Internet and 68000) 855 SB
32 0 0 33 33 0 0 0 30 /Times-Roman /font32 ANSIFont font
2074 1298 17 (4) 17 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2091 1303 14 (-) 14 SB
315 1353 1429 (type processor byte ordering.  Thus care must be taken to ensure correct orientation.) 1429 SB
315 1453 1755 (Any reference to IP addresses or port numbers passed to or from a Windows Sockets routine must be in) 1755 SB
/fm 256 def
2 49 277 1450 B
1 F
n
315 1503 1089 (network order.  This includes the IP address and port fields of a ) 1089 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1404 1500 337 (struct sockaddr_in) 337 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1741 1503 207 ( \(but not the) 207 SB
/fm 256 def
2 50 277 1500 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
315 1553 176 (sin_family) 176 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
491 1554 114 ( field\).) 114 SB
/fm 256 def
2 51 277 1551 B
1 F
n
315 1656 1738 (Consider an application which normally contacts a server on the TCP port corresponding to the "time") 1738 SB
315 1706 1798 (service, but which provides a mechanism for the user to specify that an alternative port is to be used.  The) 1798 SB
315 1756 424 (port number returned by ) 424 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
739 1753 299 (getservbyname\(\)) 299 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1038 1756 971 ( is already in network order, which is the format required) 971 SB
315 1807 1754 (constructing an address, so no translation is required.  However if the user elects to use a different port,) 1754 SB
315 1857 1585 (entered as an integer, the application must convert this from host to network order \(using the ) 1585 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1900 1854 125 (htons\(\)) 125 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 1908 1710 (function\) before using it to construct an address.  Conversely, if the application wishes to display the) 1710 SB
315 1958 959 (number of the port within an address \(returned via, e.g., ) 959 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1274 1955 260 (getpeername\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1534 1958 451 (\), the port number must be) 451 SB
315 2009 761 (converted from network to host order \(using ) 761 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1076 2006 125 (ntohs\(\)) 125 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1201 2009 473 (\) before it can be displayed.) 473 SB
315 2110 1744 (Since the Intel and Internet byte orders are different, the conversions described above are unavoidable.) 1744 SB
315 2160 1781 (Application writers are cautioned that they should use the standard conversion functions provided as part) 1781 SB
315 2210 1791 (of the Windows Sockets API rather than writing their own conversion code, since future implementations) 1791 SB
315 2260 1783 (of Windows Sockets are likely to run on systems for which the host order is identical to the network byte) 1783 SB
315 2310 1611 (order.  Only applications which use the standard conversion functions are likely to be portable.) 1611 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 2432 454 (2.4 Socket Options) 454 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 2493 1442 (The socket options supported by Windows Sockets are listed in the pages describing ) 1442 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1757 2490 214 (setsockopt\(\)) 214 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1971 2493 72 ( and) 72 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
315 2541 219 (getsockopt\(\)) 219 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
534 2544 1414 (.  A Windows Sockets implementation must recognize all of these options, and \(for) 1414 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
315 2592 219 (getsockopt\(\)) 219 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
534 2595 1423 (\) return plausible values for each.  The default value for each option is shown in the) 1423 SB
315 2646 269 (following table.) 269 SB
32 0 0 42 42 0 1 0 38 /Times-Roman /font32 ANSIFont font
315 2820 220 (                    ) 220 SB
535 2820 220 (                    ) 220 SB
755 2820 165 (               ) 165 SB
32 0 0 33 33 0 0 0 30 /Times-Roman /font32 ANSIFont font
315 2865 17 (3) 17 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
332 2870 951 ( VAX is a trademark of Digital Equipment Corporation.) 951 SB
32 0 0 33 33 0 0 0 30 /Times-Roman /font32 ANSIFont font
315 2915 17 (4) 17 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
332 2920 669 ( 68000 is a trademark of Motorola, Inc.) 669 SB
1204 3070 21 (6) 21 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 14 14
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1426 117 661 (Programming with Sockets ) 661 SB
2087 117 28 (7) 28 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 398 56 295 267 CB
315 276 101 (Value) 101 SB
gr
gs 253 56 696 267 CB
718 276 87 (Type) 87 SB
gr
gs 597 56 952 267 CB
974 276 150 (Meaning) 150 SB
gr
gs 387 56 1552 267 CB
1574 276 127 (Default) 127 SB
gr
gs 146 56 1942 267 CB
1964 276 82 (Note) 82 SB
gr
/fm 256 def
5 5 289 267 B
1 F
n
/fm 256 def
5 5 289 267 B
1 F
n
/fm 256 def
397 5 295 267 B
1 F
n
/fm 256 def
5 5 693 267 B
1 F
n
/fm 256 def
249 5 699 267 B
1 F
n
/fm 256 def
5 5 949 267 B
1 F
n
/fm 256 def
593 5 955 267 B
1 F
n
/fm 256 def
5 5 1549 267 B
1 F
n
/fm 256 def
383 5 1555 267 B
1 F
n
/fm 256 def
5 5 1939 267 B
1 F
n
/fm 256 def
142 5 1945 267 B
1 F
n
/fm 256 def
5 5 2088 267 B
1 F
n
/fm 256 def
5 5 2088 267 B
1 F
n
/fm 256 def
5 49 289 273 B
1 F
n
/fm 256 def
2 49 693 273 B
1 F
n
/fm 256 def
2 49 949 273 B
1 F
n
/fm 256 def
2 49 1549 273 B
1 F
n
/fm 256 def
2 49 1939 273 B
1 F
n
/fm 256 def
5 49 2088 273 B
1 F
n
gs 398 59 295 323 CB
315 335 323 (SO_ACCEPTCON) 323 SB
gr
gs 398 59 295 323 CB
638 335 30 (N) 30 SB
gr
/fm 256 def
2 49 277 332 B
1 F
n
gs 253 59 696 323 CB
718 335 114 (BOOL) 114 SB
gr
gs 597 60 952 323 CB
974 335 165 (Socket is ) 165 SB
gr
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 597 60 952 323 CB
1139 332 124 (listen\(\)) 124 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 597 60 952 323 CB
1263 335 65 (ing.) 65 SB
gr
gs 387 59 1552 323 CB
1574 335 274 (FALSE unless a) 274 SB
gr
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 387 60 1552 373 CB
1574 382 124 (listen\(\)) 124 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 387 60 1552 373 CB
1698 385 158 ( has been) 158 SB
gr
gs 387 59 1552 424 CB
1574 436 176 (performed) 176 SB
gr
/fm 256 def
5 8 289 323 B
1 F
n
/fm 256 def
397 2 295 323 B
1 F
n
/fm 256 def
397 2 295 329 B
1 F
n
/fm 256 def
8 2 693 323 B
1 F
n
/fm 256 def
8 2 693 329 B
1 F
n
/fm 256 def
246 2 702 323 B
1 F
n
/fm 256 def
246 2 702 329 B
1 F
n
/fm 256 def
8 2 949 323 B
1 F
n
/fm 256 def
8 2 949 329 B
1 F
n
/fm 256 def
590 2 958 323 B
1 F
n
/fm 256 def
590 2 958 329 B
1 F
n
/fm 256 def
8 2 1549 323 B
1 F
n
/fm 256 def
8 2 1549 329 B
1 F
n
/fm 256 def
380 2 1558 323 B
1 F
n
/fm 256 def
380 2 1558 329 B
1 F
n
/fm 256 def
8 2 1939 323 B
1 F
n
/fm 256 def
8 2 1939 329 B
1 F
n
/fm 256 def
139 2 1948 323 B
1 F
n
/fm 256 def
139 2 1948 329 B
1 F
n
/fm 256 def
5 8 2088 323 B
1 F
n
/fm 256 def
5 150 289 332 B
1 F
n
/fm 256 def
2 150 693 332 B
1 F
n
/fm 256 def
2 150 949 332 B
1 F
n
/fm 256 def
2 150 1549 332 B
1 F
n
/fm 256 def
2 150 1939 332 B
1 F
n
/fm 256 def
5 150 2088 332 B
1 F
n
gs 398 53 295 483 CB
315 489 327 (SO_BROADCAST) 327 SB
gr
gs 253 53 696 483 CB
718 489 114 (BOOL) 114 SB
gr
gs 597 53 952 483 CB
974 489 471 (Socket is configured for the) 471 SB
gr
gs 597 53 952 533 CB
974 539 432 (transmission of broadcast) 432 SB
gr
gs 597 53 952 583 CB
974 589 170 (messages.) 170 SB
gr
gs 387 53 1552 483 CB
1574 489 128 (FALSE) 128 SB
gr
/fm 256 def
5 2 289 483 B
1 F
n
/fm 256 def
397 2 295 483 B
1 F
n
/fm 256 def
2 2 693 483 B
1 F
n
/fm 256 def
252 2 696 483 B
1 F
n
/fm 256 def
2 2 949 483 B
1 F
n
/fm 256 def
596 2 952 483 B
1 F
n
/fm 256 def
2 2 1549 483 B
1 F
n
/fm 256 def
386 2 1552 483 B
1 F
n
/fm 256 def
2 2 1939 483 B
1 F
n
/fm 256 def
145 2 1942 483 B
1 F
n
/fm 256 def
5 2 2088 483 B
1 F
n
/fm 256 def
5 149 289 486 B
1 F
n
/fm 256 def
2 149 693 486 B
1 F
n
/fm 256 def
2 149 949 486 B
1 F
n
/fm 256 def
2 149 1549 486 B
1 F
n
/fm 256 def
2 149 1939 486 B
1 F
n
/fm 256 def
5 149 2088 486 B
1 F
n
gs 398 53 295 636 CB
315 642 218 (SO_DEBUG) 218 SB
gr
gs 253 53 696 636 CB
718 642 114 (BOOL) 114 SB
gr
gs 597 53 952 636 CB
974 642 380 (Debugging is enabled.) 380 SB
gr
gs 387 53 1552 636 CB
1574 642 128 (FALSE) 128 SB
gr
gs 146 53 1942 636 CB
1964 642 40 (\(i\)) 40 SB
gr
/fm 256 def
5 2 289 636 B
1 F
n
/fm 256 def
397 2 295 636 B
1 F
n
/fm 256 def
2 2 693 636 B
1 F
n
/fm 256 def
252 2 696 636 B
1 F
n
/fm 256 def
2 2 949 636 B
1 F
n
/fm 256 def
596 2 952 636 B
1 F
n
/fm 256 def
2 2 1549 636 B
1 F
n
/fm 256 def
386 2 1552 636 B
1 F
n
/fm 256 def
2 2 1939 636 B
1 F
n
/fm 256 def
145 2 1942 636 B
1 F
n
/fm 256 def
5 2 2088 636 B
1 F
n
/fm 256 def
5 49 289 639 B
1 F
n
/fm 256 def
2 49 693 639 B
1 F
n
/fm 256 def
2 49 949 639 B
1 F
n
/fm 256 def
2 49 1549 639 B
1 F
n
/fm 256 def
2 49 1939 639 B
1 F
n
/fm 256 def
5 49 2088 639 B
1 F
n
gs 398 53 295 689 CB
315 695 344 (SO_DONTLINGER) 344 SB
gr
gs 253 53 696 689 CB
718 695 114 (BOOL) 114 SB
gr
gs 597 53 952 689 CB
974 695 537 (If true, the SO_LINGER option) 537 SB
gr
gs 597 53 952 739 CB
974 745 191 (is disabled.) 191 SB
gr
gs 387 53 1552 689 CB
1574 695 110 (TRUE) 110 SB
gr
/fm 256 def
5 2 289 689 B
1 F
n
/fm 256 def
397 2 295 689 B
1 F
n
/fm 256 def
2 2 693 689 B
1 F
n
/fm 256 def
252 2 696 689 B
1 F
n
/fm 256 def
2 2 949 689 B
1 F
n
/fm 256 def
596 2 952 689 B
1 F
n
/fm 256 def
2 2 1549 689 B
1 F
n
/fm 256 def
386 2 1552 689 B
1 F
n
/fm 256 def
2 2 1939 689 B
1 F
n
/fm 256 def
145 2 1942 689 B
1 F
n
/fm 256 def
5 2 2088 689 B
1 F
n
/fm 256 def
5 99 289 692 B
1 F
n
/fm 256 def
2 99 693 692 B
1 F
n
/fm 256 def
2 99 949 692 B
1 F
n
/fm 256 def
2 99 1549 692 B
1 F
n
/fm 256 def
2 99 1939 692 B
1 F
n
/fm 256 def
5 99 2088 692 B
1 F
n
gs 398 53 295 792 CB
315 798 330 (SO_DONTROUTE) 330 SB
gr
gs 253 53 696 792 CB
718 798 114 (BOOL) 114 SB
gr
gs 597 53 952 792 CB
974 798 338 (Routing is disabled.) 338 SB
gr
gs 387 53 1552 792 CB
1574 798 128 (FALSE) 128 SB
gr
gs 146 53 1942 792 CB
1964 798 40 (\(i\)) 40 SB
gr
/fm 256 def
5 2 289 792 B
1 F
n
/fm 256 def
397 2 295 792 B
1 F
n
/fm 256 def
2 2 693 792 B
1 F
n
/fm 256 def
252 2 696 792 B
1 F
n
/fm 256 def
2 2 949 792 B
1 F
n
/fm 256 def
596 2 952 792 B
1 F
n
/fm 256 def
2 2 1549 792 B
1 F
n
/fm 256 def
386 2 1552 792 B
1 F
n
/fm 256 def
2 2 1939 792 B
1 F
n
/fm 256 def
145 2 1942 792 B
1 F
n
/fm 256 def
5 2 2088 792 B
1 F
n
/fm 256 def
5 49 289 795 B
1 F
n
/fm 256 def
2 49 693 795 B
1 F
n
/fm 256 def
2 49 949 795 B
1 F
n
/fm 256 def
2 49 1549 795 B
1 F
n
/fm 256 def
2 49 1939 795 B
1 F
n
/fm 256 def
5 49 2088 795 B
1 F
n
gs 398 53 295 845 CB
315 851 214 (SO_ERROR) 214 SB
gr
gs 253 53 696 845 CB
718 851 45 (int) 45 SB
gr
gs 597 53 952 845 CB
974 851 521 (Retrieve error status and clear.) 521 SB
gr
gs 387 53 1552 845 CB
1574 851 21 (0) 21 SB
gr
/fm 256 def
5 2 289 845 B
1 F
n
/fm 256 def
397 2 295 845 B
1 F
n
/fm 256 def
2 2 693 845 B
1 F
n
/fm 256 def
252 2 696 845 B
1 F
n
/fm 256 def
2 2 949 845 B
1 F
n
/fm 256 def
596 2 952 845 B
1 F
n
/fm 256 def
2 2 1549 845 B
1 F
n
/fm 256 def
386 2 1552 845 B
1 F
n
/fm 256 def
2 2 1939 845 B
1 F
n
/fm 256 def
145 2 1942 845 B
1 F
n
/fm 256 def
5 2 2088 845 B
1 F
n
/fm 256 def
5 49 289 848 B
1 F
n
/fm 256 def
2 49 693 848 B
1 F
n
/fm 256 def
2 49 949 848 B
1 F
n
/fm 256 def
2 49 1549 848 B
1 F
n
/fm 256 def
2 49 1939 848 B
1 F
n
/fm 256 def
5 49 2088 848 B
1 F
n
gs 398 53 295 898 CB
315 904 305 (SO_KEEPALIVE) 305 SB
gr
gs 253 53 696 898 CB
718 904 114 (BOOL) 114 SB
gr
gs 597 53 952 898 CB
974 904 446 (Keepalives are being sent.) 446 SB
gr
gs 387 53 1552 898 CB
1574 904 128 (FALSE) 128 SB
gr
/fm 256 def
5 2 289 898 B
1 F
n
/fm 256 def
397 2 295 898 B
1 F
n
/fm 256 def
2 2 693 898 B
1 F
n
/fm 256 def
252 2 696 898 B
1 F
n
/fm 256 def
2 2 949 898 B
1 F
n
/fm 256 def
596 2 952 898 B
1 F
n
/fm 256 def
2 2 1549 898 B
1 F
n
/fm 256 def
386 2 1552 898 B
1 F
n
/fm 256 def
2 2 1939 898 B
1 F
n
/fm 256 def
145 2 1942 898 B
1 F
n
/fm 256 def
5 2 2088 898 B
1 F
n
/fm 256 def
5 49 289 901 B
1 F
n
/fm 256 def
2 49 693 901 B
1 F
n
/fm 256 def
2 49 949 901 B
1 F
n
/fm 256 def
2 49 1549 901 B
1 F
n
/fm 256 def
2 49 1939 901 B
1 F
n
/fm 256 def
5 49 2088 901 B
1 F
n
gs 398 53 295 951 CB
315 957 228 (SO_LINGER) 228 SB
gr
gs 253 53 696 951 CB
718 957 204 (struct linger) 204 SB
gr
gs 253 53 696 1001 CB
718 1007 113 (FAR *) 113 SB
gr
gs 597 53 952 951 CB
974 957 435 (Returns the current linger) 435 SB
gr
gs 597 53 952 1001 CB
974 1007 135 (options.) 135 SB
gr
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
gs 387 55 1552 951 CB
1574 956 120 (l_onoff) 120 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 387 55 1552 951 CB
1694 957 71 ( is 0) 71 SB
gr
/fm 256 def
5 2 289 951 B
1 F
n
/fm 256 def
397 2 295 951 B
1 F
n
/fm 256 def
2 2 693 951 B
1 F
n
/fm 256 def
252 2 696 951 B
1 F
n
/fm 256 def
2 2 949 951 B
1 F
n
/fm 256 def
596 2 952 951 B
1 F
n
/fm 256 def
2 2 1549 951 B
1 F
n
/fm 256 def
386 2 1552 951 B
1 F
n
/fm 256 def
2 2 1939 951 B
1 F
n
/fm 256 def
145 2 1942 951 B
1 F
n
/fm 256 def
5 2 2088 951 B
1 F
n
/fm 256 def
5 99 289 954 B
1 F
n
/fm 256 def
2 99 693 954 B
1 F
n
/fm 256 def
2 99 949 954 B
1 F
n
/fm 256 def
2 99 1549 954 B
1 F
n
/fm 256 def
2 99 1939 954 B
1 F
n
/fm 256 def
5 99 2088 954 B
1 F
n
gs 398 53 295 1054 CB
315 1060 302 (SO_OOBINLINE) 302 SB
gr
gs 253 53 696 1054 CB
718 1060 114 (BOOL) 114 SB
gr
gs 597 53 952 1054 CB
974 1060 434 (Out-of-band data is being) 434 SB
gr
gs 597 53 952 1104 CB
974 1110 464 (received in the normal data) 464 SB
gr
gs 597 53 952 1154 CB
974 1160 124 (stream.) 124 SB
gr
gs 387 53 1552 1054 CB
1574 1060 128 (FALSE) 128 SB
gr
/fm 256 def
5 2 289 1054 B
1 F
n
/fm 256 def
397 2 295 1054 B
1 F
n
/fm 256 def
2 2 693 1054 B
1 F
n
/fm 256 def
252 2 696 1054 B
1 F
n
/fm 256 def
2 2 949 1054 B
1 F
n
/fm 256 def
596 2 952 1054 B
1 F
n
/fm 256 def
2 2 1549 1054 B
1 F
n
/fm 256 def
386 2 1552 1054 B
1 F
n
/fm 256 def
2 2 1939 1054 B
1 F
n
/fm 256 def
145 2 1942 1054 B
1 F
n
/fm 256 def
5 2 2088 1054 B
1 F
n
/fm 256 def
5 149 289 1057 B
1 F
n
/fm 256 def
2 149 693 1057 B
1 F
n
/fm 256 def
2 149 949 1057 B
1 F
n
/fm 256 def
2 149 1549 1057 B
1 F
n
/fm 256 def
2 149 1939 1057 B
1 F
n
/fm 256 def
5 149 2088 1057 B
1 F
n
gs 398 53 295 1207 CB
315 1213 241 (SO_RCVBUF) 241 SB
gr
gs 253 53 696 1207 CB
718 1213 45 (int) 45 SB
gr
gs 597 53 952 1207 CB
974 1213 397 (Buffer size for receives) 397 SB
gr
gs 387 53 1552 1207 CB
1574 1213 269 (Implementation) 269 SB
gr
gs 387 53 1552 1257 CB
1574 1263 174 (dependent) 174 SB
gr
gs 146 53 1942 1207 CB
1964 1213 40 (\(i\)) 40 SB
gr
/fm 256 def
5 2 289 1207 B
1 F
n
/fm 256 def
397 2 295 1207 B
1 F
n
/fm 256 def
2 2 693 1207 B
1 F
n
/fm 256 def
252 2 696 1207 B
1 F
n
/fm 256 def
2 2 949 1207 B
1 F
n
/fm 256 def
596 2 952 1207 B
1 F
n
/fm 256 def
2 2 1549 1207 B
1 F
n
/fm 256 def
386 2 1552 1207 B
1 F
n
/fm 256 def
2 2 1939 1207 B
1 F
n
/fm 256 def
145 2 1942 1207 B
1 F
n
/fm 256 def
5 2 2088 1207 B
1 F
n
/fm 256 def
5 99 289 1210 B
1 F
n
/fm 256 def
2 99 693 1210 B
1 F
n
/fm 256 def
2 99 949 1210 B
1 F
n
/fm 256 def
2 99 1549 1210 B
1 F
n
/fm 256 def
2 99 1939 1210 B
1 F
n
/fm 256 def
5 99 2088 1210 B
1 F
n
gs 398 53 295 1310 CB
315 1316 325 (SO_REUSEADDR) 325 SB
gr
gs 253 53 696 1310 CB
718 1316 114 (BOOL) 114 SB
gr
gs 597 53 952 1310 CB
974 1316 552 (The address to which this socket) 552 SB
gr
gs 597 53 952 1360 CB
974 1366 531 (is bound can be used by others.) 531 SB
gr
gs 387 53 1552 1310 CB
1574 1316 128 (FALSE) 128 SB
gr
/fm 256 def
5 2 289 1310 B
1 F
n
/fm 256 def
397 2 295 1310 B
1 F
n
/fm 256 def
2 2 693 1310 B
1 F
n
/fm 256 def
252 2 696 1310 B
1 F
n
/fm 256 def
2 2 949 1310 B
1 F
n
/fm 256 def
596 2 952 1310 B
1 F
n
/fm 256 def
2 2 1549 1310 B
1 F
n
/fm 256 def
386 2 1552 1310 B
1 F
n
/fm 256 def
2 2 1939 1310 B
1 F
n
/fm 256 def
145 2 1942 1310 B
1 F
n
/fm 256 def
5 2 2088 1310 B
1 F
n
/fm 256 def
5 99 289 1313 B
1 F
n
/fm 256 def
2 99 693 1313 B
1 F
n
/fm 256 def
2 99 949 1313 B
1 F
n
/fm 256 def
2 99 1549 1313 B
1 F
n
/fm 256 def
2 99 1939 1313 B
1 F
n
/fm 256 def
5 99 2088 1313 B
1 F
n
gs 398 53 295 1413 CB
315 1419 238 (SO_SNDBUF) 238 SB
gr
gs 253 53 696 1413 CB
718 1419 45 (int) 45 SB
gr
gs 597 53 952 1413 CB
974 1419 351 (Buffer size for sends) 351 SB
gr
gs 387 53 1552 1413 CB
1574 1419 269 (Implementation) 269 SB
gr
gs 387 53 1552 1463 CB
1574 1469 174 (dependent) 174 SB
gr
gs 146 53 1942 1413 CB
1964 1419 40 (\(i\)) 40 SB
gr
/fm 256 def
5 2 289 1413 B
1 F
n
/fm 256 def
397 2 295 1413 B
1 F
n
/fm 256 def
2 2 693 1413 B
1 F
n
/fm 256 def
252 2 696 1413 B
1 F
n
/fm 256 def
2 2 949 1413 B
1 F
n
/fm 256 def
596 2 952 1413 B
1 F
n
/fm 256 def
2 2 1549 1413 B
1 F
n
/fm 256 def
386 2 1552 1413 B
1 F
n
/fm 256 def
2 2 1939 1413 B
1 F
n
/fm 256 def
145 2 1942 1413 B
1 F
n
/fm 256 def
5 2 2088 1413 B
1 F
n
/fm 256 def
5 99 289 1416 B
1 F
n
/fm 256 def
2 99 693 1416 B
1 F
n
/fm 256 def
2 99 949 1416 B
1 F
n
/fm 256 def
2 99 1549 1416 B
1 F
n
/fm 256 def
2 99 1939 1416 B
1 F
n
/fm 256 def
5 99 2088 1416 B
1 F
n
gs 398 53 295 1516 CB
315 1522 179 (SO_TYPE) 179 SB
gr
gs 253 53 696 1516 CB
718 1522 45 (int) 45 SB
gr
gs 597 53 952 1516 CB
974 1522 465 (The type of the socket \(e.g.) 465 SB
gr
gs 597 53 952 1566 CB
974 1572 327 (SOCK_STREAM\).) 327 SB
gr
gs 387 53 1552 1516 CB
1574 1522 243 (As created via) 243 SB
gr
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 387 54 1552 1566 CB
1574 1569 140 (socket\(\)) 140 SB
gr
/fm 256 def
5 2 289 1516 B
1 F
n
/fm 256 def
397 2 295 1516 B
1 F
n
/fm 256 def
2 2 693 1516 B
1 F
n
/fm 256 def
252 2 696 1516 B
1 F
n
/fm 256 def
2 2 949 1516 B
1 F
n
/fm 256 def
596 2 952 1516 B
1 F
n
/fm 256 def
2 2 1549 1516 B
1 F
n
/fm 256 def
386 2 1552 1516 B
1 F
n
/fm 256 def
2 2 1939 1516 B
1 F
n
/fm 256 def
145 2 1942 1516 B
1 F
n
/fm 256 def
5 2 2088 1516 B
1 F
n
/fm 256 def
5 100 289 1519 B
1 F
n
/fm 256 def
2 100 693 1519 B
1 F
n
/fm 256 def
2 100 949 1519 B
1 F
n
/fm 256 def
2 100 1549 1519 B
1 F
n
/fm 256 def
2 100 1939 1519 B
1 F
n
/fm 256 def
5 100 2088 1519 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 398 56 295 1620 CB
315 1629 300 (TCP_NODELAY) 300 SB
gr
/fm 256 def
2 49 277 1626 B
1 F
n
gs 253 56 696 1620 CB
718 1629 114 (BOOL) 114 SB
gr
/fm 256 def
2 49 277 1626 B
1 F
n
gs 597 56 952 1620 CB
974 1629 496 (Disables the Nagle algorithm) 496 SB
gr
/fm 256 def
2 49 277 1626 B
1 F
n
gs 597 56 952 1670 CB
974 1679 338 (for send coalescing.) 338 SB
gr
/fm 256 def
2 49 277 1676 B
1 F
n
gs 387 56 1552 1620 CB
1574 1629 269 (Implementation) 269 SB
gr
/fm 256 def
2 49 277 1626 B
1 F
n
gs 387 56 1552 1670 CB
1574 1679 174 (dependent) 174 SB
gr
/fm 256 def
2 49 277 1676 B
1 F
n
/fm 256 def
5 5 289 1620 B
1 F
n
/fm 256 def
397 5 295 1620 B
1 F
n
/fm 256 def
5 5 693 1620 B
1 F
n
/fm 256 def
249 5 699 1620 B
1 F
n
/fm 256 def
5 5 949 1620 B
1 F
n
/fm 256 def
593 5 955 1620 B
1 F
n
/fm 256 def
5 5 1549 1620 B
1 F
n
/fm 256 def
383 5 1555 1620 B
1 F
n
/fm 256 def
5 5 1939 1620 B
1 F
n
/fm 256 def
142 5 1945 1620 B
1 F
n
/fm 256 def
5 5 2088 1620 B
1 F
n
/fm 256 def
5 99 289 1626 B
1 F
n
/fm 256 def
5 5 289 1726 B
1 F
n
/fm 256 def
5 5 289 1726 B
1 F
n
/fm 256 def
397 5 295 1726 B
1 F
n
/fm 256 def
2 99 693 1626 B
1 F
n
/fm 256 def
5 5 693 1726 B
1 F
n
/fm 256 def
249 5 699 1726 B
1 F
n
/fm 256 def
2 99 949 1626 B
1 F
n
/fm 256 def
5 5 949 1726 B
1 F
n
/fm 256 def
593 5 955 1726 B
1 F
n
/fm 256 def
2 99 1549 1626 B
1 F
n
/fm 256 def
5 5 1549 1726 B
1 F
n
/fm 256 def
383 5 1555 1726 B
1 F
n
/fm 256 def
2 99 1939 1626 B
1 F
n
/fm 256 def
5 5 1939 1726 B
1 F
n
/fm 256 def
142 5 1945 1726 B
1 F
n
/fm 256 def
5 99 2088 1626 B
1 F
n
/fm 256 def
5 5 2088 1726 B
1 F
n
/fm 256 def
5 5 2088 1726 B
1 F
n
315 1785 110 (Notes:) 110 SB
315 1835 40 (\(i\)) 40 SB
615 1835 923 (An implementation may silently ignore this option on ) 923 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1538 1832 214 (setsockopt\(\)) 214 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1752 1835 214 ( and return a) 214 SB
615 1886 315 (constant value for ) 315 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
930 1883 219 (getsockopt\(\)) 219 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1149 1886 500 (, or it may accept a value for ) 500 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1649 1883 214 (setsockopt\(\)) 214 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1863 1886 247 ( and return the) 247 SB
615 1937 399 (corresponding value in ) 399 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1014 1934 219 (getsockopt\(\)) 219 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1233 1937 616 ( without using the value in any way.) 616 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 2110 437 (2.5 Database Files) 437 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 2171 77 (The ) 77 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
392 2168 186 (getXbyY\(\)) 186 SB
32 0 0 33 33 0 0 0 30 /Times-Roman /font32 ANSIFont font
578 2166 17 (5) 17 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
595 2171 83 ( and ) 83 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
678 2168 407 (WSAAsyncGetXByY\(\)) 407 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1085 2171 930 ( classes of routines are provided for retrieving network) 930 SB
315 2222 453 (specific information.  The ) 453 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
768 2219 186 (getXbyY\(\)) 186 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
954 2222 1056 ( routines were originally designed \(in the first Berkeley UNIX) 1056 SB
315 2273 1771 (releases\) as mechanisms for looking up information in text databases.  Although the information may be) 1771 SB
315 2323 1712 (retrieved by the Windows Sockets implementation in different ways, a Windows Sockets application) 1712 SB
315 2373 1153 (requests such information in a consistent manner through either the ) 1153 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1468 2370 186 (getXbyY\(\)) 186 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1654 2373 109 ( or the) 109 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
315 2421 407 (WSAAsyncGetXByY\(\)) 407 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
722 2424 297 ( class of routines.) 297 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 2548 866 (2.6 Deviation from Berkeley Sockets) 866 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 2609 1798 (There are a few limited instances where the Windows Sockets API has had to divert from strict adherence) 1798 SB
315 2659 1575 (to the Berkeley conventions, usually because of difficulties of implementation in a Windows) 1575 SB
315 2709 225 (environment.) 225 SB
32 0 0 42 42 0 1 0 38 /Times-Roman /font32 ANSIFont font
315 2818 220 (                    ) 220 SB
535 2818 220 (                    ) 220 SB
755 2818 165 (               ) 165 SB
32 0 0 33 33 0 0 0 30 /Times-Roman /font32 ANSIFont font
315 2863 17 (5) 17 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
332 2868 726 ( This specification uses the function name ) 726 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1058 2865 186 (getXbyY\(\)) 186 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1244 2868 535 ( to represent the set of routines ) 535 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1779 2865 286 (gethostbyaddr\(\)) 286 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2065 2868 11 (,) 11 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
315 2916 298 (gethostbyname\(\)) 298 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
613 2919 263 (, etc. Similarly ) 263 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
876 2916 407 (WSAAsyncGetXByY\(\)) 407 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1283 2919 193 ( represents ) 193 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1476 2916 526 (WSAAsyncGetHostByAddr\(\)) 526 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2002 2919 83 (, etc.) 83 SB
1204 3070 21 (7) 21 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 15 15
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1426 117 661 (Programming with Sockets ) 661 SB
2087 117 28 (8) 28 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 927 (2.6.1 socket data type and error values) 927 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 328 1669 (A new data type, SOCKET, has been defined.  The definition of this type was necessary for future) 1669 SB
315 378 1765 (enhancements to the Windows Sockets specification, such as being able to use sockets as file handles in) 1765 SB
315 428 228 (Windows NT) 228 SB
32 0 0 33 33 0 0 0 30 /Times-Roman /font32 ANSIFont font
543 423 17 (6) 17 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
560 428 1554 (.  Definition of this type also facilitates porting of applications to a Win/32 environment, as) 1554 SB
315 478 1006 (the type will automatically be promoted from 16 to 32 bits.) 1006 SB
315 578 1760 (In UNIX, all handles, including socket handles, are small, non-negative integers, and some applications) 1760 SB
/fm 256 def
2 49 277 575 B
1 F
n
315 628 1750 (make assumptions that this will be true.  Windows Sockets handles have no restrictions, other than that) 1750 SB
/fm 256 def
2 49 277 625 B
1 F
n
315 678 1790 (the value INVALID_SOCKET is not a valid socket.  Socket handles may take any value in the range 0 to) 1790 SB
/fm 256 def
2 49 277 675 B
1 F
n
315 728 404 (INVALID_SOCKET-1.) 404 SB
/fm 256 def
2 49 277 725 B
1 F
n
315 828 1690 (Because the SOCKET type is unsigned, compiling existing source code from, for example, a UNIX) 1690 SB
315 878 1529 (environment may lead to compiler warnings about signed/unsigned data type mismatches.) 1529 SB
315 978 1015 (This means, for example, that checking for errors when the ) 1015 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1330 975 140 (socket\(\)) 140 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1470 978 83 ( and ) 83 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1553 975 143 (accept\(\)) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1696 978 382 ( routines return should) 382 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
315 1029 54 (not) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
369 1029 1714 ( be done by comparing the return value with -1, or seeing if the value is negative \(both common, and) 1714 SB
315 1079 1793 (legal, approaches in BSD\).  Instead, an application should use the manifest constant INVALID_SOCKET) 1793 SB
315 1129 228 (as defined in ) 228 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
543 1126 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
721 1129 258 (.  For example:) 258 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
465 1177 442 (TYPICAL BSD STYLE:) 442 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 1228 400 (s = socket\(...\);) 400 SB
615 1273 300 (if \(s == -1\)) 300 SB
1065 1273 350 (/* or s < 0 */) 350 SB
765 1318 125 ({...}) 125 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
465 1413 418 (PREFERRED STYLE:) 418 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 1464 400 (s = socket\(...\);) 400 SB
615 1509 600 (if \(s == INVALID_SOCKET\)) 600 SB
765 1554 125 ({...}) 125 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 1649 535 (2.6.2 select\(\) and FD_*) 535 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 1710 1659 (Because a SOCKET is no longer represented by the UNIX-style "small non-negative integer", the) 1659 SB
315 1760 387 (implementation of the ) 387 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
702 1757 127 (select\(\)) 127 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
829 1760 1112 ( function was changed in the Windows Sockets API.  Each set of ) 1112 SB
1941 1760 108 (socket) 108 SB
2049 1760 55 (s is) 55 SB
/fm 256 def
2 50 277 1757 B
1 F
n
315 1811 1767 (still represented by the fd_set type, but instead of being stored as a bitmask the set is implemented as an) 1767 SB
315 1861 1074 (array of SOCKETs.  To avoid potential problems, applications ) 1074 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
1389 1861 82 (must) 82 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1471 1861 582 ( adhere to the use of the FD_XXX) 582 SB
315 1911 1057 (macros to set, initialize, clear, and check the fd_set structures.) 1057 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 2008 1318 (2.6.3 Error codes - errno, h_errno & WSAGetLastError\(\)) 1318 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 2069 1775 (Error codes set by the Windows Sockets implementation are NOT made available via the errno variable.) 1775 SB
315 2119 359 (Additionally, for the ) 359 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
674 2116 186 (getXbyY\(\)) 186 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
860 2119 1214 ( class of functions, error codes are NOT made available via the h_errno) 1214 SB
315 2170 954 (variable.  Instead, error codes are accessed by using the ) 954 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1269 2167 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1643 2170 426 ( API described in section) 426 SB
315 2221 106 (4.3.11) 106 SB
421 2221 1615 (.  This function is provided in Windows Sockets as a precursor \(and eventually an alias\) for the) 1615 SB
315 2271 278 (Win32 function ) 278 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
593 2268 279 (GetLastError\(\)) 279 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
872 2271 1134 (.  This is intended to provide a reliable way for a thread in a multi-) 1134 SB
315 2322 944 (threaded process to obtain per-thread error information.) 944 SB
315 2422 1447 (For compatibility with BSD, an application may choose to include a line of the form:) 1447 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 2519 775 (#define errno WSAGetLastError\(\)) 775 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 2617 1766 (This will allow networking code which was written to use the global errno to work correctly in a single-) 1766 SB
315 2667 1693 (threaded environment.  There are, obviously, some drawbacks.  If a source file includes code which) 1693 SB
315 2717 1777 (inspects errno for both socket and non-socket functions, this mechanism cannot be used.  Furthermore, it) 1777 SB
315 2767 1682 (is not possible for an application to assign a new value to errno.  \(In Windows Sockets the function) 1682 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
315 2814 364 (WSASetLastError\(\)) 364 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
679 2817 524 ( may be used for this purpose.\)) 524 SB
32 0 0 42 42 0 1 0 38 /Times-Roman /font32 ANSIFont font
315 2870 220 (                    ) 220 SB
535 2870 220 (                    ) 220 SB
755 2870 165 (               ) 165 SB
32 0 0 33 33 0 0 0 30 /Times-Roman /font32 ANSIFont font
315 2915 17 (6) 17 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
332 2920 1090 ( NT and Windows/NT are trademarks of Microsoft Corporation.) 1090 SB
1204 3070 21 (8) 21 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 16 16
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1426 117 661 (Programming with Sockets ) 661 SB
2087 117 28 (9) 28 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
465 317 442 (TYPICAL BSD STYLE:) 442 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 368 350 (r = recv\(...\);) 350 SB
615 413 275 (if \(r == -1) 275 SB
615 458 700 (    && errno == EWOULDBLOCK\)) 700 SB
765 503 125 ({...}) 125 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
465 598 418 (PREFERRED STYLE:) 418 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 649 350 (r = recv\(...\);) 350 SB
615 694 975 (if \(r == -1       /* \(but see below\) */) 975 SB
615 739 1000 (    && WSAGetLastError\(\) == EWOULDBLOCK\)) 1000 SB
32 0 0 42 42 0 0 0 36 /Courier-Bold /font9 ANSIFont font
765 784 125 ({...}) 125 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 881 1749 (Although error constants consistent with 4.3 Berkeley Sockets are provided for compatibility purposes,) 1749 SB
315 931 1795 (applications should, where possible, use the "WSA" error code definitions.  For example, a more accurate) 1795 SB
315 981 772 (version of the above source code fragment is:) 772 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 1078 350 (r = recv\(...\);) 350 SB
615 1123 275 (if \(r == -1) 275 SB
890 1123 700 (       /* \(but see below\) */) 700 SB
/fm 256 def
2 44 277 1123 B
1 F
n
615 1168 1075 (    && WSAGetLastError\(\) == WSAEWOULDBLOCK\)) 1075 SB
32 0 0 42 42 0 0 0 36 /Courier-Bold /font9 ANSIFont font
765 1213 125 ({...}) 125 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 1312 327 (2.6.4 Pointers) 327 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 1373 1714 (All pointers used by applications with Windows Sockets should be FAR.  To facilitate this, data type) 1714 SB
315 1423 801 (definitions such as LPHOSTENT are provided.) 801 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 1520 594 (2.6.5 Renamed functions) 594 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 1581 1751 (In two cases it was necessary to rename functions which are used in Berkeley Sockets in order to avoid) 1751 SB
315 1631 411 (clashes with other APIs.) 411 SB
32 0 0 50 50 0 0 0 48 /Times-Bold /font29 ANSIFont font
315 1729 625 (2.6.5.1 close\(\) & closesocket\(\)) 625 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 1793 1432 (In Berkeley Sockets, sockets are represented by standard file descriptors, and so the ) 1432 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1747 1790 115 (close\(\)) 115 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1862 1793 222 ( function can) 222 SB
315 1844 1777 (be used to close sockets as well as regular files.  While nothing in the Windows Sockets API prevents an) 1777 SB
315 1894 1712 (implementation from using regular file handles to identify sockets, nothing requires it either.  Socket) 1712 SB
315 1944 1596 (descriptors are not presumed to correspond to regular file handles, and file operations such as ) 1596 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1911 1941 110 (read\(\)) 110 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2021 1944 11 (,) 11 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
315 1992 122 (write\(\)) 122 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
437 1995 94 (, and ) 94 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
531 1992 115 (close\(\)) 115 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
646 1995 1035 ( cannot be assumed to work correctly when applied to socket) 1035 SB
1681 1995 16 (s) 16 SB
1697 1995 308 (.  Sockets must be) 308 SB
/fm 256 def
2 50 277 1992 B
1 F
n
315 2046 337 (closed by using the ) 337 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
652 2043 227 (closesocket\(\)) 227 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
879 2046 338 ( routine.  Using the ) 338 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1217 2043 115 (close\(\)) 115 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1332 2046 758 ( routine to close a socket is incorrect and the) 758 SB
315 2097 921 (effects of doing so are undefined by this specification.) 921 SB
32 0 0 50 50 0 0 0 48 /Times-Bold /font29 ANSIFont font
315 2194 605 (2.6.5.1 ioctl\(\) & ioctlsocket\(\)) 605 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 2258 778 (Various C language run-time systems use the ) 778 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1093 2255 106 (ioctl\(\)) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1199 2258 889 ( routine for purposes unrelated to Windows Sockets.) 889 SB
315 2309 745 (For this reason we have defined the routine ) 745 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1060 2306 218 (ioctlsocket\(\)) 218 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1278 2309 810 ( which is used to handle socket functions which) 810 SB
315 2360 1001 (in the Berkeley Software Distribution are performed using ) 1001 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1316 2357 106 (ioctl\(\)) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1422 2360 83 ( and ) 83 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1505 2357 110 (fcntl\(\)) 110 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1615 2360 11 (.) 11 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 2458 981 (2.6.6 Blocking routines & EINPROGRESS) 981 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 2519 1709 (Although blocking operations on sockets are supported under Windows Sockets, their use is strongly) 1709 SB
315 2570 1202 (discouraged.  Programmers who are constrained to use blocking mode ) 1202 SB
32 0 0 42 42 0 0 0 42 /Symbol font
1517 2566 23 (-) 23 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1540 2570 446 ( for example, as part of an) 446 SB
315 2625 712 (existing application which is to be ported ) 712 SB
32 0 0 42 42 0 0 0 42 /Symbol font
1027 2621 23 (-) 23 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1050 2625 1009 ( should be aware of the semantics of blocking operations in) 1009 SB
315 2679 539 (Windows Sockets.  See section ) 539 SB
854 2679 85 (3.1.1) 85 SB
939 2679 291 ( for more details.) 291 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 2776 1080 (2.6.7 Maximum number of sockets supported) 1080 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 2837 1782 (The maximum number of sockets supported by a particular Windows Sockets supplier is implementation) 1782 SB
315 2887 1674 (specific.  An application should make no assumptions about the availability of a certain number of) 1674 SB
1204 3070 21 (9) 21 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Courier-Bold
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 17 17
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1398 117 661 (Programming with Sockets ) 661 SB
2059 117 56 (10) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 270 856 (sockets.  This topic is addressed further in section ) 856 SB
1171 270 106 (4.3.15) 106 SB
1277 270 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1299 267 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1559 270 525 (.  However, independent of the) 525 SB
315 321 1697 (number of sockets supported by a particular implementation is the issue of the maximum number of) 1697 SB
315 371 932 (sockets which an application can actually make use of.) 932 SB
315 471 1797 (The maximum number of sockets which a Windows Sockets application can make use of is determined at) 1797 SB
315 521 1677 (compile time by the manifest constant FD_SETSIZE.  This value is used in constructing the fd_set) 1677 SB
315 571 307 (structures used in ) 307 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
622 568 127 (select\(\)) 127 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
749 571 221 ( \(see section ) 221 SB
970 571 106 (4.1.18) 106 SB
1076 571 400 (\).  The default value in ) 400 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1476 568 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1654 571 443 ( is 64.  If an application is) 443 SB
315 622 1644 (designed to be capable of working with more than 64 sockets, the implementor should define the) 1644 SB
315 672 744 (manifest FD_SETSIZE in every source file ) 744 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
1059 672 108 (before) 108 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1167 672 182 ( including ) 182 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1349 669 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1527 672 588 (.  One way of doing this may be to) 588 SB
315 723 1110 (include the definition within the compiler options in the makefile) 1110 SB
1425 723 388 (, for example adding  -) 388 SB
/fm 256 def
2 49 277 720 B
1 F
n
315 773 1369 (DFD_SETSIZE=128 as an option to the compiler command line for Microsoft C) 1369 SB
1684 773 414 (.  It must be emphasized) 414 SB
/fm 256 def
2 49 277 770 B
1 F
n
315 823 1757 (that defining FD_SETSIZE as a particular value has no effect on the actual number of sockets provided) 1757 SB
315 873 675 (by a Windows Sockets implementation.) 675 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 970 418 (2.6.8 Include files) 418 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 1031 1730 (For ease of portability of existing Berkeley sockets based source code, a number of standard Berkeley) 1730 SB
315 1081 1456 (include files are supported.  However, these Berkeley header files merely include the ) 1456 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1771 1078 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1949 1081 136 ( include) 136 SB
315 1132 1694 (file, and it is therefore sufficient \(and recommended\) that Windows Sockets application source files) 1694 SB
315 1182 385 (should simply include ) 385 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
700 1179 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
878 1182 11 (.) 11 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 1280 797 (2.6.9 Return values on API failure) 797 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 1341 1711 (The manifest constant SOCKET_ERROR is provided for checking API failure.  Although use of this) 1711 SB
315 1391 1617 (constant is not mandatory, it is recommended.  The following example illustrates the use of the) 1617 SB
315 1441 488 (SOCKET_ERROR constant:) 488 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
465 1538 442 (TYPICAL BSD STYLE:) 442 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 1589 350 (r = recv\(...\);) 350 SB
615 1634 750 (if \(r == -1     /* or r < 0 */) 750 SB
615 1679 700 (    && errno == EWOULDBLOCK\)) 700 SB
765 1724 125 ({...}) 125 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
465 1769 418 (PREFERRED STYLE:) 418 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 1820 350 (r = recv\(...\);) 350 SB
615 1865 525 (if \(r == SOCKET_ERROR) 525 SB
615 1910 1075 (    && WSAGetLastError\(\) == WSAEWOULDBLOCK\)) 1075 SB
32 0 0 42 42 0 0 0 36 /Courier-Bold /font9 ANSIFont font
765 1955 125 ({...}) 125 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 2054 464 (2.6.10 Raw Sockets) 464 SB
/fm 256 def
2 57 277 2054 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 2115 1785 (The Windows Sockets specification does not mandate that a Windows Sockets DLL support raw sockets,) 1785 SB
/fm 256 def
2 49 277 2112 B
1 F
n
315 2165 1600 (that is, sockets opened with SOCK_RAW.  However, a Windows Sockets DLL is allowed and) 1600 SB
/fm 256 def
2 49 277 2162 B
1 F
n
315 2215 1764 (encouraged to supply raw socket support.  A Windows Sockets-compliant application that wishes to use) 1764 SB
/fm 256 def
2 49 277 2212 B
1 F
n
315 2265 939 (raw sockets should attempt to open the socket with the ) 939 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1254 2262 140 (socket\(\)) 140 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1394 2265 294 ( call \(see section ) 294 SB
1688 2265 106 (4.1.23) 106 SB
1794 2265 253 (\), and if it fails) 253 SB
/fm 256 def
2 50 277 2262 B
1 F
n
315 2316 1264 (either attempt to use another socket type or indicate the failure to the user.) 1264 SB
/fm 256 def
2 49 277 2313 B
1 F
n
/fm 256 def
2 49 277 2363 B
1 F
n
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 2438 42 (2.) 42 SB
357 2438 1397 (7 Windows Sockets in Multithreaded Versions of Windows) 1397 SB
/fm 256 def
2 82 277 2413 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 2499 1770 (The Windows Sockets interface is designed to work for both single-threaded versions of Windows \(such) 1770 SB
/fm 256 def
2 49 277 2496 B
1 F
n
315 2549 1334 (as Windows 3.1\) and preemptive multithreaded versions of Windows \(such as ) 1334 SB
1649 2549 228 (Windows NT) 228 SB
1877 2549 112 (\).  In a) 112 SB
/fm 256 def
2 49 277 2546 B
1 F
n
315 2599 1762 (multithreaded environment the sockets interface is basically the same, but the author of a multithreaded) 1762 SB
/fm 256 def
2 49 277 2596 B
1 F
n
315 2649 1660 (application must be aware that it is the responsibility of the application, not the Windows Sockets) 1660 SB
/fm 256 def
2 49 277 2646 B
1 F
n
315 2699 1740 (implementation, to synchronize access to a socket between threads.  This is the same rule as applies to) 1740 SB
/fm 256 def
2 49 277 2696 B
1 F
n
315 2749 1798 (other forms of I/O such as file I/O.  Failure to synchronize calls on a socket leads to unpredictable results;) 1798 SB
/fm 256 def
2 49 277 2746 B
1 F
n
315 2799 852 (for example if there are two simultaneous calls to ) 852 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1167 2796 131 (send\(\), ) 131 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1298 2799 764 (there is no guarantee as to the order in which) 764 SB
/fm 256 def
2 50 277 2796 B
1 F
n
315 2850 352 (the data will be sent.) 352 SB
/fm 256 def
2 49 277 2847 B
1 F
n
/fm 256 def
2 49 277 2897 B
1 F
n
1194 3070 42 (10) 42 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Courier-Bold
%%+ font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 18 18
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1398 117 661 (Programming with Sockets ) 661 SB
2059 117 56 (11) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 270 1778 (Closing a socket in one thread that has an outstanding blocking call on the same socket in another thread) 1778 SB
/fm 256 def
2 49 277 267 B
1 F
n
315 320 1396 (will cause the blocking call to fail with WSAEINTR, just as if the operation were ) 1396 SB
1711 320 149 (canceled) 149 SB
1860 320 187 (.  This also) 187 SB
/fm 256 def
2 49 277 317 B
1 F
n
315 370 333 (applies if there is a ) 333 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
648 367 127 (select\(\)) 127 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
775 370 1310 ( call outstanding and the application closes one of the sockets being selected.) 1310 SB
/fm 256 def
2 50 277 367 B
1 F
n
/fm 256 def
2 49 277 418 B
1 F
n
315 471 1624 (There is no default blocking hook installed in preemptive multithreaded versions of Windows.  ) 1624 SB
1939 471 114 (This is) 114 SB
/fm 256 def
2 49 277 468 B
1 F
n
315 521 1739 (because the machine will not be blocked if a single application is waiting for an operation to complete) 1739 SB
/fm 256 def
2 49 277 518 B
1 F
n
315 571 374 (and hence not calling ) 374 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
689 568 278 (PeekMessage\(\) ) 278 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
967 571 46 (or ) 46 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1013 568 246 (GetMessage\(\)) 246 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1259 571 666 ( which cause the application to yield in) 666 SB
/fm 256 def
2 50 277 568 B
1 F
n
315 622 1168 (nonpremptive Windows.  However, for backwards compatibility the ) 1168 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1483 619 436 (WSASetBlockingHook\(\)) 436 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1919 622 112 ( call is) 112 SB
/fm 256 def
2 50 277 619 B
1 F
n
315 673 1779 (implemented in multithreaded versions of Windows, and any application whose behavior depends on the) 1779 SB
/fm 256 def
2 49 277 670 B
1 F
n
315 723 1794 (default blocking hook may install their own blocking hook which duplicates the default hook's semantics,) 1794 SB
/fm 256 def
2 49 277 720 B
1 F
n
315 773 170 (if desired.) 170 SB
/fm 256 def
2 49 277 770 B
1 F
n
1194 3070 42 (11) 42 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 19 19
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1459 117 600 (Socket Library Overview ) 600 SB
2059 117 56 (12) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 50 50 1 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 317 796 (3.  SOCKET LIBRARY OVERVIEW) 796 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 400 505 (3.1 Socket Functions) 505 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 461 1534 (The Windows Sockets specification includes the following Berkeley-style socket routines:) 1534 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 57 295 558 CB
315 564 143 (accept\(\)) 143 SB
gr
gs 656 57 295 558 CB
458 564 32 ( *) 32 SB
gr
/fm 256 def
2 50 277 564 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 56 954 558 CB
975 567 970 (An incoming connection is acknowledged and associated) 970 SB
gr
gs 1046 56 954 608 CB
975 617 1003 (with an immediately created socket.  The original socket is) 1003 SB
gr
gs 1046 56 954 658 CB
975 667 505 (returned to the listening state.) 505 SB
gr
/fm 256 def
5 5 289 558 B
1 F
n
/fm 256 def
5 5 289 558 B
1 F
n
/fm 256 def
655 5 295 558 B
1 F
n
/fm 256 def
5 5 951 558 B
1 F
n
/fm 256 def
1042 5 957 558 B
1 F
n
/fm 256 def
5 5 2000 558 B
1 F
n
/fm 256 def
5 5 2000 558 B
1 F
n
/fm 256 def
5 149 289 564 B
1 F
n
/fm 256 def
2 149 951 564 B
1 F
n
/fm 256 def
5 149 2000 564 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 714 CB
315 717 109 (bind\(\)) 109 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 714 CB
975 720 734 (Assign a local name to an unnamed socket.) 734 SB
gr
/fm 256 def
5 2 289 714 B
1 F
n
/fm 256 def
655 2 295 714 B
1 F
n
/fm 256 def
2 2 951 714 B
1 F
n
/fm 256 def
1045 2 954 714 B
1 F
n
/fm 256 def
5 2 2000 714 B
1 F
n
/fm 256 def
5 50 289 717 B
1 F
n
/fm 256 def
2 50 951 717 B
1 F
n
/fm 256 def
5 50 2000 717 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 768 CB
315 771 227 (closesocket\(\)) 227 SB
gr
gs 656 54 295 768 CB
542 771 32 ( *) 32 SB
gr
/fm 256 def
2 50 277 771 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 768 CB
975 774 935 (Remove a socket from the per-process object reference) 935 SB
gr
gs 1046 53 954 818 CB
975 824 94 (table.) 94 SB
gr
gs 1046 53 954 818 CB
1069 824 611 (  Only blocks if SO_LINGER is set.) 611 SB
gr
/fm 256 def
2 49 277 821 B
1 F
n
/fm 256 def
5 2 289 768 B
1 F
n
/fm 256 def
655 2 295 768 B
1 F
n
/fm 256 def
2 2 951 768 B
1 F
n
/fm 256 def
1045 2 954 768 B
1 F
n
/fm 256 def
5 2 2000 768 B
1 F
n
/fm 256 def
5 99 289 771 B
1 F
n
/fm 256 def
2 99 951 771 B
1 F
n
/fm 256 def
5 99 2000 771 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 871 CB
315 874 166 (connect\(\)) 166 SB
gr
gs 656 54 295 871 CB
481 874 32 ( *) 32 SB
gr
/fm 256 def
2 50 277 874 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 871 CB
975 877 758 (Initiate a connection on the specified socket.) 758 SB
gr
/fm 256 def
5 2 289 871 B
1 F
n
/fm 256 def
655 2 295 871 B
1 F
n
/fm 256 def
2 2 951 871 B
1 F
n
/fm 256 def
1045 2 954 871 B
1 F
n
/fm 256 def
5 2 2000 871 B
1 F
n
/fm 256 def
5 50 289 874 B
1 F
n
/fm 256 def
2 50 951 874 B
1 F
n
/fm 256 def
5 50 2000 874 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 925 CB
315 928 260 (getpeername\(\)) 260 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 925 CB
975 931 957 (Retrieve the name of the peer connected to the specified) 957 SB
gr
gs 1046 53 954 975 CB
975 981 108 (socket) 108 SB
gr
gs 1046 53 954 975 CB
1083 981 11 (.) 11 SB
gr
/fm 256 def
2 49 277 978 B
1 F
n
/fm 256 def
5 2 289 925 B
1 F
n
/fm 256 def
655 2 295 925 B
1 F
n
/fm 256 def
2 2 951 925 B
1 F
n
/fm 256 def
1045 2 954 925 B
1 F
n
/fm 256 def
5 2 2000 925 B
1 F
n
/fm 256 def
5 99 289 928 B
1 F
n
/fm 256 def
2 99 951 928 B
1 F
n
/fm 256 def
5 99 2000 928 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 1028 CB
315 1031 259 (getsockname\(\)) 259 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 1028 CB
975 1034 847 (Retrieve the current name for the specified socket) 847 SB
gr
/fm 256 def
5 2 289 1028 B
1 F
n
/fm 256 def
655 2 295 1028 B
1 F
n
/fm 256 def
2 2 951 1028 B
1 F
n
/fm 256 def
1045 2 954 1028 B
1 F
n
/fm 256 def
5 2 2000 1028 B
1 F
n
/fm 256 def
5 50 289 1031 B
1 F
n
/fm 256 def
2 50 951 1031 B
1 F
n
/fm 256 def
5 50 2000 1031 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 1082 CB
315 1085 219 (getsockopt\(\)) 219 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 1082 CB
975 1088 896 (Retrieve options associated with the specified socket) 896 SB
gr
gs 1046 53 954 1082 CB
1871 1088 11 (.) 11 SB
gr
/fm 256 def
2 49 277 1085 B
1 F
n
/fm 256 def
5 2 289 1082 B
1 F
n
/fm 256 def
655 2 295 1082 B
1 F
n
/fm 256 def
2 2 951 1082 B
1 F
n
/fm 256 def
1045 2 954 1082 B
1 F
n
/fm 256 def
5 2 2000 1082 B
1 F
n
/fm 256 def
5 50 289 1085 B
1 F
n
/fm 256 def
2 50 951 1085 B
1 F
n
/fm 256 def
5 50 2000 1085 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 1136 CB
315 1139 121 (htonl\(\)) 121 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 1136 CB
975 1142 979 (Convert a 32-bit quantity from host byte order to network) 979 SB
gr
gs 1046 53 954 1186 CB
975 1192 184 (byte order.) 184 SB
gr
/fm 256 def
5 2 289 1136 B
1 F
n
/fm 256 def
655 2 295 1136 B
1 F
n
/fm 256 def
2 2 951 1136 B
1 F
n
/fm 256 def
1045 2 954 1136 B
1 F
n
/fm 256 def
5 2 2000 1136 B
1 F
n
/fm 256 def
5 99 289 1139 B
1 F
n
/fm 256 def
2 99 951 1139 B
1 F
n
/fm 256 def
5 99 2000 1139 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 1239 CB
315 1242 125 (htons\(\)) 125 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 1239 CB
975 1245 979 (Convert a 16-bit quantity from host byte order to network) 979 SB
gr
gs 1046 53 954 1289 CB
975 1295 184 (byte order.) 184 SB
gr
/fm 256 def
5 2 289 1239 B
1 F
n
/fm 256 def
655 2 295 1239 B
1 F
n
/fm 256 def
2 2 951 1239 B
1 F
n
/fm 256 def
1045 2 954 1239 B
1 F
n
/fm 256 def
5 2 2000 1239 B
1 F
n
/fm 256 def
5 99 289 1242 B
1 F
n
/fm 256 def
2 99 951 1242 B
1 F
n
/fm 256 def
5 99 2000 1242 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 1342 CB
315 1345 203 (inet_addr\(\)) 203 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 1342 CB
975 1348 953 (Converts a character string representing a number in the) 953 SB
gr
gs 1046 53 954 1392 CB
975 1398 980 (Internet standard ".'' notation to an Internet address value.) 980 SB
gr
/fm 256 def
5 2 289 1342 B
1 F
n
/fm 256 def
655 2 295 1342 B
1 F
n
/fm 256 def
2 2 951 1342 B
1 F
n
/fm 256 def
1045 2 954 1342 B
1 F
n
/fm 256 def
5 2 2000 1342 B
1 F
n
/fm 256 def
5 99 289 1345 B
1 F
n
/fm 256 def
2 99 951 1345 B
1 F
n
/fm 256 def
5 99 2000 1345 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 1445 CB
315 1448 196 (inet_ntoa\(\)) 196 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 1445 CB
975 1451 952 (Converts an Internet address value to an ASCII string in) 952 SB
gr
gs 1046 53 954 1495 CB
975 1501 437 (".'' notation i.e.  "a.b.c.d''.) 437 SB
gr
/fm 256 def
5 2 289 1445 B
1 F
n
/fm 256 def
655 2 295 1445 B
1 F
n
/fm 256 def
2 2 951 1445 B
1 F
n
/fm 256 def
1045 2 954 1445 B
1 F
n
/fm 256 def
5 2 2000 1445 B
1 F
n
/fm 256 def
5 99 289 1448 B
1 F
n
/fm 256 def
2 99 951 1448 B
1 F
n
/fm 256 def
5 99 2000 1448 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 1548 CB
315 1551 218 (ioctlsocket\(\)) 218 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 1548 CB
975 1554 333 (Provide control for ) 333 SB
gr
gs 1046 53 954 1548 CB
1308 1554 135 (sockets.) 135 SB
gr
/fm 256 def
2 49 277 1551 B
1 F
n
/fm 256 def
5 2 289 1548 B
1 F
n
/fm 256 def
655 2 295 1548 B
1 F
n
/fm 256 def
2 2 951 1548 B
1 F
n
/fm 256 def
1045 2 954 1548 B
1 F
n
/fm 256 def
5 2 2000 1548 B
1 F
n
/fm 256 def
5 50 289 1551 B
1 F
n
/fm 256 def
2 50 951 1551 B
1 F
n
/fm 256 def
5 50 2000 1551 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 1602 CB
315 1605 124 (listen\(\)) 124 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 1602 CB
975 1608 927 (Listen for incoming connections on a specified socket.) 927 SB
gr
/fm 256 def
5 2 289 1602 B
1 F
n
/fm 256 def
655 2 295 1602 B
1 F
n
/fm 256 def
2 2 951 1602 B
1 F
n
/fm 256 def
1045 2 954 1602 B
1 F
n
/fm 256 def
5 2 2000 1602 B
1 F
n
/fm 256 def
5 50 289 1605 B
1 F
n
/fm 256 def
2 50 951 1605 B
1 F
n
/fm 256 def
5 50 2000 1605 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 1656 CB
315 1659 121 (ntohl\(\)) 121 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 1656 CB
975 1662 979 (Convert a 32-bit quantity from network byte order to host) 979 SB
gr
gs 1046 53 954 1706 CB
975 1712 184 (byte order.) 184 SB
gr
/fm 256 def
5 2 289 1656 B
1 F
n
/fm 256 def
655 2 295 1656 B
1 F
n
/fm 256 def
2 2 951 1656 B
1 F
n
/fm 256 def
1045 2 954 1656 B
1 F
n
/fm 256 def
5 2 2000 1656 B
1 F
n
/fm 256 def
5 99 289 1659 B
1 F
n
/fm 256 def
2 99 951 1659 B
1 F
n
/fm 256 def
5 99 2000 1659 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 1759 CB
315 1762 125 (ntohs\(\)) 125 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 1759 CB
975 1765 979 (Convert a 16-bit quantity from network byte order to host) 979 SB
gr
gs 1046 53 954 1809 CB
975 1815 184 (byte order.) 184 SB
gr
/fm 256 def
5 2 289 1759 B
1 F
n
/fm 256 def
655 2 295 1759 B
1 F
n
/fm 256 def
2 2 951 1759 B
1 F
n
/fm 256 def
1045 2 954 1759 B
1 F
n
/fm 256 def
5 2 2000 1759 B
1 F
n
/fm 256 def
5 99 289 1762 B
1 F
n
/fm 256 def
2 99 951 1762 B
1 F
n
/fm 256 def
5 99 2000 1762 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 1862 CB
315 1865 106 (recv\(\)) 106 SB
gr
gs 656 54 295 1862 CB
421 1865 32 ( *) 32 SB
gr
/fm 256 def
2 50 277 1865 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 1862 CB
975 1868 655 (Receive data from a connected socket.) 655 SB
gr
/fm 256 def
5 2 289 1862 B
1 F
n
/fm 256 def
655 2 295 1862 B
1 F
n
/fm 256 def
2 2 951 1862 B
1 F
n
/fm 256 def
1045 2 954 1862 B
1 F
n
/fm 256 def
5 2 2000 1862 B
1 F
n
/fm 256 def
5 50 289 1865 B
1 F
n
/fm 256 def
2 50 951 1865 B
1 F
n
/fm 256 def
5 50 2000 1865 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 1916 CB
315 1919 195 (recvfrom\(\)) 195 SB
gr
gs 656 54 295 1916 CB
510 1919 32 ( *) 32 SB
gr
/fm 256 def
2 50 277 1919 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 1916 CB
975 1922 904 (Receive data from either a connected or unconnected) 904 SB
gr
gs 1046 53 954 1966 CB
975 1972 119 (socket.) 119 SB
gr
/fm 256 def
5 2 289 1916 B
1 F
n
/fm 256 def
655 2 295 1916 B
1 F
n
/fm 256 def
2 2 951 1916 B
1 F
n
/fm 256 def
1045 2 954 1916 B
1 F
n
/fm 256 def
5 2 2000 1916 B
1 F
n
/fm 256 def
5 99 289 1919 B
1 F
n
/fm 256 def
2 99 951 1919 B
1 F
n
/fm 256 def
5 99 2000 1919 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 2019 CB
315 2022 127 (select\(\)) 127 SB
gr
gs 656 54 295 2019 CB
442 2022 32 ( *) 32 SB
gr
/fm 256 def
2 50 277 2022 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 2019 CB
975 2025 667 (Perform synchronous I/O multiplexing.) 667 SB
gr
/fm 256 def
5 2 289 2019 B
1 F
n
/fm 256 def
655 2 295 2019 B
1 F
n
/fm 256 def
2 2 951 2019 B
1 F
n
/fm 256 def
1045 2 954 2019 B
1 F
n
/fm 256 def
5 2 2000 2019 B
1 F
n
/fm 256 def
5 50 289 2022 B
1 F
n
/fm 256 def
2 50 951 2022 B
1 F
n
/fm 256 def
5 50 2000 2022 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 2073 CB
315 2076 109 (send\(\)) 109 SB
gr
gs 656 54 295 2073 CB
424 2076 32 ( *) 32 SB
gr
/fm 256 def
2 50 277 2076 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 2073 CB
975 2079 553 (Send data to a connected socket.) 553 SB
gr
/fm 256 def
5 2 289 2073 B
1 F
n
/fm 256 def
655 2 295 2073 B
1 F
n
/fm 256 def
2 2 951 2073 B
1 F
n
/fm 256 def
1045 2 954 2073 B
1 F
n
/fm 256 def
5 2 2000 2073 B
1 F
n
/fm 256 def
5 50 289 2076 B
1 F
n
/fm 256 def
2 50 951 2076 B
1 F
n
/fm 256 def
5 50 2000 2076 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 2127 CB
315 2130 144 (sendto\(\)) 144 SB
gr
gs 656 54 295 2127 CB
459 2130 32 ( *) 32 SB
gr
/fm 256 def
2 50 277 2130 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 2127 CB
975 2133 932 (Send data to either a connected or unconnected socket.) 932 SB
gr
/fm 256 def
5 2 289 2127 B
1 F
n
/fm 256 def
655 2 295 2127 B
1 F
n
/fm 256 def
2 2 951 2127 B
1 F
n
/fm 256 def
1045 2 954 2127 B
1 F
n
/fm 256 def
5 2 2000 2127 B
1 F
n
/fm 256 def
5 50 289 2130 B
1 F
n
/fm 256 def
2 50 951 2130 B
1 F
n
/fm 256 def
5 50 2000 2130 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 2181 CB
315 2184 214 (setsockopt\(\)) 214 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 2181 CB
975 2187 841 (Store options associated with the specified socket) 841 SB
gr
gs 1046 53 954 2181 CB
1816 2187 11 (.) 11 SB
gr
/fm 256 def
2 49 277 2184 B
1 F
n
/fm 256 def
5 2 289 2181 B
1 F
n
/fm 256 def
655 2 295 2181 B
1 F
n
/fm 256 def
2 2 951 2181 B
1 F
n
/fm 256 def
1045 2 954 2181 B
1 F
n
/fm 256 def
5 2 2000 2181 B
1 F
n
/fm 256 def
5 50 289 2184 B
1 F
n
/fm 256 def
2 50 951 2184 B
1 F
n
/fm 256 def
5 50 2000 2184 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 2235 CB
315 2238 201 (shutdown\(\)) 201 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 2235 CB
975 2241 741 (Shut down part of a full-duplex connection.) 741 SB
gr
/fm 256 def
5 2 289 2235 B
1 F
n
/fm 256 def
655 2 295 2235 B
1 F
n
/fm 256 def
2 2 951 2235 B
1 F
n
/fm 256 def
1045 2 954 2235 B
1 F
n
/fm 256 def
5 2 2000 2235 B
1 F
n
/fm 256 def
5 50 289 2238 B
1 F
n
/fm 256 def
2 50 951 2238 B
1 F
n
/fm 256 def
5 50 2000 2238 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 2289 CB
315 2292 140 (socket\(\)) 140 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 2289 CB
975 2295 989 (Create an endpoint for communication and return a socket) 989 SB
gr
gs 1046 53 954 2289 CB
1964 2295 11 (.) 11 SB
gr
/fm 256 def
2 49 277 2292 B
1 F
n
/fm 256 def
5 2 289 2289 B
1 F
n
/fm 256 def
655 2 295 2289 B
1 F
n
/fm 256 def
2 2 951 2289 B
1 F
n
/fm 256 def
1045 2 954 2289 B
1 F
n
/fm 256 def
5 2 2000 2289 B
1 F
n
/fm 256 def
5 50 289 2292 B
1 F
n
/fm 256 def
5 5 289 2343 B
1 F
n
/fm 256 def
5 5 289 2343 B
1 F
n
/fm 256 def
655 5 295 2343 B
1 F
n
/fm 256 def
2 50 951 2292 B
1 F
n
/fm 256 def
5 5 951 2343 B
1 F
n
/fm 256 def
1042 5 957 2343 B
1 F
n
/fm 256 def
5 50 2000 2292 B
1 F
n
/fm 256 def
5 5 2000 2343 B
1 F
n
/fm 256 def
5 5 2000 2343 B
1 F
n
/fm 256 def
2 49 277 2349 B
1 F
n
315 2402 963 (* = The routine can block if acting on a blocking socket.) 963 SB
/fm 256 def
2 49 277 2399 B
1 F
n
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 2499 1070 (3.1.1 Blocking/Non blocking & Data Volatility) 1070 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 2560 1786 (One major issue in porting applications from a Berkeley sockets environment to a Windows environment) 1786 SB
315 2610 1742 (involves "blocking"; that is, invoking a function which does not return until the associated operation is) 1742 SB
315 2660 1716 (completed.  The problem arises when the operation may take an arbitrarily long time to complete: an) 1716 SB
315 2710 368 (obvious example is a ) 368 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
683 2707 106 (recv\(\)) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
789 2710 1254 ( which may block until data has been received from the peer system.  The) 1254 SB
315 2761 1757 (default behavior within the Berkeley sockets model is for a socket to operate in a blocking mode unless) 1757 SB
315 2811 1326 (the programmer explicitly requests that operations be treated as non-blocking.) 1326 SB
1641 2811 22 (  ) 22 SB
32 0 0 42 42 0 0 0 38 /Times-BoldItalic /font30 ANSIFont font
1663 2811 218 (It is strongly) 218 SB
/fm 256 def
2 49 277 2808 B
1 F
n
315 2861 1747 (recommended that programmers use the nonblocking \(asynchronous\) operations if at all possible, as) 1747 SB
/fm 256 def
2 49 277 2858 B
1 F
n
315 2911 1621 (they work significantly better within the nonpreemptive Windows environment.  Use blocking) 1621 SB
/fm 256 def
2 49 277 2908 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1194 3070 42 (12) 42 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-BoldItalic
%%+ font Times-Roman
%%Page: 20 20
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1459 117 600 (Socket Library Overview ) 600 SB
2059 117 56 (13) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-BoldItalic /font30 ANSIFont font
315 270 1776 (operations only if absolutely necessary, and carefully read and understand this section if you must use) 1776 SB
/fm 256 def
2 49 277 267 B
1 F
n
315 320 354 (blocking operations.) 354 SB
/fm 256 def
2 49 277 317 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 420 844 (Even on a blocking socket, some operations \(e.g. ) 844 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1159 417 109 (bind\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1268 420 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1290 417 219 (getsockopt\(\)) 219 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1509 420 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1531 417 260 (getpeername\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1791 420 323 (\) can be completed) 323 SB
315 471 1751 (immediately.  For such operations there is no difference between blocking and non-blocking operation.) 1751 SB
315 521 381 (Other operations \(e.g. ) 381 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
696 518 106 (recv\(\)) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
802 521 1290 (\) may be completed immediately or may take an arbitrary time to complete,) 1290 SB
315 572 1693 (depending on various transport conditions.  When applied to a blocking socket, these operations are) 1693 SB
315 622 581 (referred to as blocking operations.) 581 SB
896 622 1172 (  All routines which can block are listed with an asterisk in the tables) 1172 SB
/fm 256 def
2 49 277 619 B
1 F
n
315 672 298 (above and below.) 298 SB
/fm 256 def
2 49 277 669 B
1 F
n
315 772 1588 (Within a Windows Sockets implementation, a blocking operation which cannot be completed) 1588 SB
315 822 1740 (immediately is handled as follows.  The DLL initiates the operation, and then enters a loop in which it) 1740 SB
315 872 1796 (dispatches any Windows messages \(yielding the processor to another thread if necessary\) and then checks) 1796 SB
315 922 1514 (for the completion of the Windows Sockets function.  If the function has completed, or if) 1514 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
315 969 481 (WSACancelBlockingCall\(\)) 481 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
796 972 1214 ( has been invoked, the blocking function completes with an appropriate) 1214 SB
315 1023 407 (result.  Refer to section ) 407 SB
722 1023 106 (4.3.13) 106 SB
828 1023 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
850 1020 436 (WSASetBlockingHook\(\)) 436 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1286 1023 800 (, for a complete description of this mechanism,) 800 SB
315 1074 807 (including pseudocode for the various functions.) 807 SB
315 1174 1751 (If a Windows message is received for a process for which a blocking operation is in progress, there is a) 1751 SB
315 1224 1779 (risk that the application will attempt to issue another Windows Sockets call.  Because of the difficulty of) 1779 SB
315 1274 1716 (managing this condition safely, the Windows Sockets specification does not support such application) 1716 SB
315 1324 1385 (behavior.  Two functions are provided to assist the programmer in this situation.  ) 1385 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1700 1321 314 (WSAIsBlocking\(\)) 314 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2014 1324 84 ( may) 84 SB
315 1375 1459 (be called to determine whether or not a blocking Windows Sockets call is in progress.) 1459 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
315 1422 481 (WSACancelBlockingCall\(\)) 481 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
796 1425 1048 ( may be called to cancel an in-progress blocking call, if any.  ) 1048 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
1844 1425 170 (Any other) 170 SB
315 1476 1766 (Windows Sockets function which is called in this situation will fail with the error WSAEINPROGRESS) 1766 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2081 1476 11 (.) 11 SB
315 1526 1667 (It should be emphasized that this restriction applies to both blocking and non-blocking operations.) 1667 SB
315 1626 1740 (Although this mechanism is sufficient for simple applications, it cannot support the complex message-) 1740 SB
315 1676 1777 (dispatching requirements of more advanced applications \(for example, those using the MDI model\).  For) 1777 SB
315 1726 1137 (such applications, the Windows Sockets API includes the function ) 1137 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1452 1723 436 (WSASetBlockingHook\(\)) 436 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1888 1726 125 (, which) 125 SB
315 1777 1722 (allows the programmer to define a special routine which will be called instead of the default message) 1722 SB
315 1827 568 (dispatch routine described above.) 568 SB
/fm 256 def
2 49 277 1874 B
1 F
n
315 1927 1797 (The Windows Sockets DLL calls the blocking hook only if all of the following are true: the routine is one) 1797 SB
/fm 256 def
2 49 277 1924 B
1 F
n
315 1977 1769 (which is defined as being able to block, the specified socket is a blocking socket, and the request cannot) 1769 SB
/fm 256 def
2 49 277 1974 B
1 F
n
315 2027 1656 (be completed immediately.  \(A socket is set to blocking by default, but the IOCTL FIONBIO and) 1656 SB
/fm 256 def
2 49 277 2024 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
315 2074 338 (WSAAsyncSelect\(\)) 338 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
653 2077 1233 ( both set a socket to nonblocking mode.\)  If an application uses only non) 1233 SB
1886 2077 14 (-) 14 SB
1900 2077 148 (blocking) 148 SB
/fm 256 def
2 50 277 2074 B
1 F
n
315 2128 353 (sockets and uses the ) 353 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
668 2125 95 (WSA) 95 SB
763 2125 254 (AsyncSelect\(\) ) 254 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1017 2128 182 (and/or the ) 182 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1199 2125 95 (WSA) 95 SB
1294 2125 323 (AsyncGetXByY\(\) ) 323 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1617 2128 324 (routines instead of ) 324 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1941 2125 127 (select\(\)) 127 SB
/fm 256 def
2 50 277 2125 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 2179 72 (and ) 72 SB
387 2179 63 (the ) 63 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
450 2176 197 (getXbyY\(\) ) 197 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
647 2179 1382 (routines, then the blocking hook will never be called and the application does not) 1382 SB
/fm 256 def
2 50 277 2176 B
1 F
n
315 2230 1379 (need to be concerned with the reentrancy issues the blocking hook can introduce.) 1379 SB
/fm 256 def
2 49 277 2227 B
1 F
n
315 2330 1766 (If an application invokes an asynchronous or non-blocking operation which takes a pointer to a memory) 1766 SB
315 2380 1711 (object \(e.g. a buffer, or a global variable\) as an argument, it is the responsibility of the application to) 1711 SB
315 2430 1795 (ensure that the object is available to the Windows Sockets implementation throughout the operation.  The) 1795 SB
315 2480 1761 (application must not invoke any Windows function which might affect the mapping or addressability of) 1761 SB
315 2530 1716 (the memory involved.  In a multithreaded system, the application is also responsible for coordinating) 1716 SB
315 2580 1792 (access to the object using appropriate synchronization mechanisms.  A Windows Sockets implementation) 1792 SB
315 2630 1794 (cannot, and will not, address these issues.  The possible consequences of failing to observe these rules are) 1794 SB
315 2680 651 (beyond the scope of this specification.) 651 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 2802 564 (3.2 Database Functions) 564 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 2863 1662 (The Windows Sockets specification defines the following "database" routines.  As noted earlier, a) 1662 SB
315 2913 1756 (Windows Sockets supplier may choose to implement these in a manner which does not depend on local) 1756 SB
1194 3070 42 (13) 42 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-BoldItalic
%%+ font Times-Roman
%%Page: 21 21
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1459 117 600 (Socket Library Overview ) 600 SB
2059 117 56 (14) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 270 1241 (database files.  The pointer returned by certain database routines such as ) 1241 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1556 267 298 (gethostbyname\(\)) 298 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1854 270 188 ( points to a) 188 SB
315 321 1786 (structure which is allocated by the Windows Sockets library.  The data which is pointed to is volatile and) 1786 SB
315 371 1716 (is good only until the next Windows Sockets API call from that thread.  Additionally, the application) 1716 SB
315 421 1685 (must never attempt to modify this structure or to free any of its components.  Only one copy of this) 1685 SB
315 471 1708 (structure is allocated for a thread, and so the application should copy any information which it needs) 1708 SB
315 521 900 (before issuing any other Windows Sockets API calls.) 900 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 57 295 668 CB
315 674 286 (gethostbyaddr\(\)) 286 SB
gr
gs 656 57 295 668 CB
601 674 32 ( *) 32 SB
gr
/fm 256 def
2 50 277 674 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 56 954 668 CB
975 677 889 (Retrieve the name\(s\) and address corresponding to a) 889 SB
gr
gs 1046 56 954 718 CB
975 727 286 (network address.) 286 SB
gr
/fm 256 def
5 5 289 668 B
1 F
n
/fm 256 def
5 5 289 668 B
1 F
n
/fm 256 def
655 5 295 668 B
1 F
n
/fm 256 def
5 5 951 668 B
1 F
n
/fm 256 def
1042 5 957 668 B
1 F
n
/fm 256 def
5 5 2000 668 B
1 F
n
/fm 256 def
5 5 2000 668 B
1 F
n
/fm 256 def
5 99 289 674 B
1 F
n
/fm 256 def
2 99 951 674 B
1 F
n
/fm 256 def
5 99 2000 674 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 774 CB
315 777 330 (gethostbyname\(\) *) 330 SB
gr
/fm 256 def
2 50 277 777 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 774 CB
975 780 970 (Retrieve the name\(s\) and address corresponding to a host) 970 SB
gr
gs 1046 53 954 824 CB
975 830 92 (name) 92 SB
gr
gs 1046 53 954 824 CB
1067 830 11 (.) 11 SB
gr
/fm 256 def
2 49 277 827 B
1 F
n
/fm 256 def
5 2 289 774 B
1 F
n
/fm 256 def
655 2 295 774 B
1 F
n
/fm 256 def
2 2 951 774 B
1 F
n
/fm 256 def
1045 2 954 774 B
1 F
n
/fm 256 def
5 2 2000 774 B
1 F
n
/fm 256 def
5 99 289 777 B
1 F
n
/fm 256 def
2 99 951 777 B
1 F
n
/fm 256 def
5 99 2000 777 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 877 CB
315 880 254 (gethostname\(\)) 254 SB
gr
/fm 256 def
2 50 277 880 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 877 CB
975 883 605 (Retrieve the name of the local host.) 605 SB
gr
/fm 256 def
2 49 277 880 B
1 F
n
/fm 256 def
5 2 289 877 B
1 F
n
/fm 256 def
655 2 295 877 B
1 F
n
/fm 256 def
2 2 951 877 B
1 F
n
/fm 256 def
1045 2 954 877 B
1 F
n
/fm 256 def
5 2 2000 877 B
1 F
n
/fm 256 def
5 50 289 880 B
1 F
n
/fm 256 def
2 50 951 880 B
1 F
n
/fm 256 def
5 50 2000 880 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 931 CB
315 934 322 (getprotobyname\(\)) 322 SB
gr
gs 656 54 295 931 CB
637 934 32 ( *) 32 SB
gr
/fm 256 def
2 50 277 934 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 931 CB
975 937 1000 (Retrieve the protocol name and number corresponding to a) 1000 SB
gr
gs 1046 53 954 981 CB
975 987 255 (protocol name.) 255 SB
gr
/fm 256 def
5 2 289 931 B
1 F
n
/fm 256 def
655 2 295 931 B
1 F
n
/fm 256 def
2 2 951 931 B
1 F
n
/fm 256 def
1045 2 954 931 B
1 F
n
/fm 256 def
5 2 2000 931 B
1 F
n
/fm 256 def
5 99 289 934 B
1 F
n
/fm 256 def
2 99 951 934 B
1 F
n
/fm 256 def
5 99 2000 934 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 1034 CB
315 1037 366 (getprotobynumber\(\)) 366 SB
gr
gs 656 54 295 1034 CB
681 1037 32 ( *) 32 SB
gr
/fm 256 def
2 50 277 1037 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 1034 CB
975 1040 1000 (Retrieve the protocol name and number corresponding to a) 1000 SB
gr
gs 1046 53 954 1084 CB
975 1090 292 (protocol number.) 292 SB
gr
/fm 256 def
5 2 289 1034 B
1 F
n
/fm 256 def
655 2 295 1034 B
1 F
n
/fm 256 def
2 2 951 1034 B
1 F
n
/fm 256 def
1045 2 954 1034 B
1 F
n
/fm 256 def
5 2 2000 1034 B
1 F
n
/fm 256 def
5 99 289 1037 B
1 F
n
/fm 256 def
2 99 951 1037 B
1 F
n
/fm 256 def
5 99 2000 1037 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 1137 CB
315 1140 299 (getservbyname\(\)) 299 SB
gr
gs 656 54 295 1137 CB
614 1140 32 ( *) 32 SB
gr
/fm 256 def
2 50 277 1140 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 1137 CB
975 1143 918 (Retrieve the service name and port corresponding to a) 918 SB
gr
gs 1046 53 954 1187 CB
975 1193 234 (service name.) 234 SB
gr
/fm 256 def
5 2 289 1137 B
1 F
n
/fm 256 def
655 2 295 1137 B
1 F
n
/fm 256 def
2 2 951 1137 B
1 F
n
/fm 256 def
1045 2 954 1137 B
1 F
n
/fm 256 def
5 2 2000 1137 B
1 F
n
/fm 256 def
5 99 289 1140 B
1 F
n
/fm 256 def
2 99 951 1140 B
1 F
n
/fm 256 def
5 99 2000 1140 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 1240 CB
315 1243 278 (getservbyport\(\)) 278 SB
gr
gs 656 54 295 1240 CB
593 1243 32 ( *) 32 SB
gr
/fm 256 def
2 50 277 1243 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 1240 CB
975 1246 918 (Retrieve the service name and port corresponding to a) 918 SB
gr
gs 1046 53 954 1290 CB
975 1296 79 (port.) 79 SB
gr
/fm 256 def
5 2 289 1240 B
1 F
n
/fm 256 def
655 2 295 1240 B
1 F
n
/fm 256 def
2 2 951 1240 B
1 F
n
/fm 256 def
1045 2 954 1240 B
1 F
n
/fm 256 def
5 2 2000 1240 B
1 F
n
/fm 256 def
5 99 289 1243 B
1 F
n
/fm 256 def
2 99 951 1243 B
1 F
n
/fm 256 def
5 99 2000 1243 B
1 F
n
/fm 256 def
5 2 289 1343 B
1 F
n
/fm 256 def
655 2 295 1343 B
1 F
n
/fm 256 def
2 2 951 1343 B
1 F
n
/fm 256 def
1045 2 954 1343 B
1 F
n
/fm 256 def
5 2 2000 1343 B
1 F
n
/fm 256 def
5 50 289 1346 B
1 F
n
/fm 256 def
5 5 289 1397 B
1 F
n
/fm 256 def
5 5 289 1397 B
1 F
n
/fm 256 def
655 5 295 1397 B
1 F
n
/fm 256 def
2 50 951 1346 B
1 F
n
/fm 256 def
5 5 951 1397 B
1 F
n
/fm 256 def
1042 5 957 1397 B
1 F
n
/fm 256 def
5 50 2000 1346 B
1 F
n
/fm 256 def
5 5 2000 1397 B
1 F
n
/fm 256 def
5 5 2000 1397 B
1 F
n
/fm 256 def
2 50 277 1403 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
315 1454 67 (* = ) 67 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
382 1457 841 (The routine can block under some circumstances.) 841 SB
/fm 256 def
2 50 277 1454 B
1 F
n
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 1581 1262 (3.3 Microsoft Windows-specific Extension Functions) 1262 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 1642 1698 (The Windows Sockets specification provides a number of extensions to the standard set of Berkeley) 1698 SB
315 1692 1798 (Sockets routines.  Principally, these extended APIs allow message-based, asynchronous access to network) 1798 SB
315 1742 1578 (events.  While use of this extended API set is not mandatory for socket-based programming  ) 1578 SB
1893 1742 152 (\(with the) 152 SB
/fm 256 def
2 49 277 1739 B
1 F
n
315 1792 222 (exception of ) 222 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
537 1789 271 (WSAStartup\(\) ) 271 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
808 1792 72 (and ) 72 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
880 1789 274 (WSACleanup\(\)) 274 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1154 1792 14 (\)) 14 SB
1168 1792 777 (, it is recommended for conformance with the) 777 SB
/fm 256 def
2 50 277 1789 B
1 F
n
315 1843 761 (Microsoft Windows programming paradigm.) 761 SB
1194 3070 42 (14) 42 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 22 22
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1459 117 600 (Socket Library Overview ) 600 SB
2059 117 56 (15) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 57 295 267 CB
315 273 526 (WSAAsyncGetHostByAddr\(\)) 526 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 56 954 267 CB
975 276 798 (A set of functions which provide asynchronous) 798 SB
gr
/fm 256 def
5 5 289 267 B
1 F
n
/fm 256 def
5 5 289 267 B
1 F
n
/fm 256 def
655 5 295 267 B
1 F
n
/fm 256 def
5 5 951 267 B
1 F
n
/fm 256 def
1042 5 957 267 B
1 F
n
/fm 256 def
5 5 2000 267 B
1 F
n
/fm 256 def
5 5 2000 267 B
1 F
n
/fm 256 def
5 50 289 273 B
1 F
n
/fm 256 def
2 50 951 273 B
1 F
n
/fm 256 def
5 50 2000 273 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 324 CB
315 327 536 (WSAAsyncGetHostByName\(\)) 536 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 324 CB
975 330 567 (versions of the standard Berkeley) 567 SB
gr
/fm 256 def
5 2 289 324 B
1 F
n
/fm 256 def
655 2 295 324 B
1 F
n
/fm 256 def
2 2 951 324 B
1 F
n
/fm 256 def
5 2 2000 324 B
1 F
n
/fm 256 def
5 50 289 327 B
1 F
n
/fm 256 def
2 50 951 327 B
1 F
n
/fm 256 def
5 50 2000 327 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 378 CB
315 381 553 (WSAAsyncGetProtoByName\(\)) 553 SB
gr
gs 1046 54 954 378 CB
975 381 186 (getXbyY\(\)) 186 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 54 954 378 CB
1161 384 488 ( functions.  For example, the) 488 SB
gr
/fm 256 def
5 2 289 378 B
1 F
n
/fm 256 def
655 2 295 378 B
1 F
n
/fm 256 def
2 2 951 378 B
1 F
n
/fm 256 def
5 2 2000 378 B
1 F
n
/fm 256 def
5 50 289 381 B
1 F
n
/fm 256 def
2 50 951 381 B
1 F
n
/fm 256 def
5 50 2000 381 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 432 CB
315 435 597 (WSAAsyncGetProtoByNumber\(\)) 597 SB
gr
gs 1046 54 954 432 CB
975 435 536 (WSAAsyncGetHostByName\(\)) 536 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 54 954 432 CB
1511 438 359 ( function provides an) 359 SB
gr
/fm 256 def
5 2 289 432 B
1 F
n
/fm 256 def
655 2 295 432 B
1 F
n
/fm 256 def
2 2 951 432 B
1 F
n
/fm 256 def
5 2 2000 432 B
1 F
n
/fm 256 def
5 50 289 435 B
1 F
n
/fm 256 def
2 50 951 435 B
1 F
n
/fm 256 def
5 50 2000 435 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 486 CB
315 489 534 (WSAAsyncGetServByName\(\)) 534 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 486 CB
975 492 816 (asynchronous message based implementation of) 816 SB
gr
/fm 256 def
5 2 289 486 B
1 F
n
/fm 256 def
655 2 295 486 B
1 F
n
/fm 256 def
2 2 951 486 B
1 F
n
/fm 256 def
5 2 2000 486 B
1 F
n
/fm 256 def
5 50 289 489 B
1 F
n
/fm 256 def
2 50 951 489 B
1 F
n
/fm 256 def
5 50 2000 489 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 540 CB
315 543 509 (WSAAsyncGetServByPort\(\)) 509 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 54 954 540 CB
975 546 381 (the standard Berkeley ) 381 SB
gr
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 1046 54 954 540 CB
1356 543 298 (gethostbyname\(\)) 298 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 54 954 540 CB
1654 546 163 ( function.) 163 SB
gr
/fm 256 def
5 2 289 540 B
1 F
n
/fm 256 def
655 2 295 540 B
1 F
n
/fm 256 def
2 2 951 540 B
1 F
n
/fm 256 def
5 2 2000 540 B
1 F
n
/fm 256 def
5 50 289 543 B
1 F
n
/fm 256 def
2 50 951 543 B
1 F
n
/fm 256 def
5 50 2000 543 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 594 CB
315 597 338 (WSAAsyncSelect\(\)) 338 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 54 954 594 CB
975 600 572 (Perform asynchronous version of ) 572 SB
gr
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 1046 54 954 594 CB
1547 597 127 (select\(\)) 127 SB
gr
/fm 256 def
5 2 289 594 B
1 F
n
/fm 256 def
655 2 295 594 B
1 F
n
/fm 256 def
2 2 951 594 B
1 F
n
/fm 256 def
1045 2 954 594 B
1 F
n
/fm 256 def
5 2 2000 594 B
1 F
n
/fm 256 def
5 50 289 597 B
1 F
n
/fm 256 def
2 50 951 597 B
1 F
n
/fm 256 def
5 50 2000 597 B
1 F
n
gs 656 54 295 648 CB
315 651 500 (WSACancelAsyncRequest\(\)) 500 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 648 CB
975 654 603 (Cancel an outstanding instance of a) 603 SB
gr
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 1046 54 954 698 CB
975 701 407 (WSAAsyncGetXByY\(\)) 407 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 54 954 698 CB
1382 704 163 ( function.) 163 SB
gr
/fm 256 def
5 2 289 648 B
1 F
n
/fm 256 def
655 2 295 648 B
1 F
n
/fm 256 def
2 2 951 648 B
1 F
n
/fm 256 def
1045 2 954 648 B
1 F
n
/fm 256 def
5 2 2000 648 B
1 F
n
/fm 256 def
5 100 289 651 B
1 F
n
/fm 256 def
2 100 951 651 B
1 F
n
/fm 256 def
5 100 2000 651 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 752 CB
315 755 481 (WSACancelBlockingCall\(\)) 481 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 752 CB
975 758 721 (Cancel an outstanding "blocking" API call) 721 SB
gr
/fm 256 def
5 2 289 752 B
1 F
n
/fm 256 def
655 2 295 752 B
1 F
n
/fm 256 def
2 2 951 752 B
1 F
n
/fm 256 def
1045 2 954 752 B
1 F
n
/fm 256 def
5 2 2000 752 B
1 F
n
/fm 256 def
5 50 289 755 B
1 F
n
/fm 256 def
2 50 951 755 B
1 F
n
/fm 256 def
5 50 2000 755 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 806 CB
315 809 274 (WSACleanup\(\)) 274 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 806 CB
975 812 905 (Sign off from the underlying Windows Sockets DLL.) 905 SB
gr
/fm 256 def
5 2 289 806 B
1 F
n
/fm 256 def
655 2 295 806 B
1 F
n
/fm 256 def
2 2 951 806 B
1 F
n
/fm 256 def
1045 2 954 806 B
1 F
n
/fm 256 def
5 2 2000 806 B
1 F
n
/fm 256 def
5 50 289 809 B
1 F
n
/fm 256 def
2 50 951 809 B
1 F
n
/fm 256 def
5 50 2000 809 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 860 CB
315 863 374 (WSAGetLastError\(\)) 374 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 860 CB
975 866 838 (Obtain details of last Windows Sockets API error) 838 SB
gr
/fm 256 def
5 2 289 860 B
1 F
n
/fm 256 def
655 2 295 860 B
1 F
n
/fm 256 def
2 2 951 860 B
1 F
n
/fm 256 def
1045 2 954 860 B
1 F
n
/fm 256 def
5 2 2000 860 B
1 F
n
/fm 256 def
5 50 289 863 B
1 F
n
/fm 256 def
2 50 951 863 B
1 F
n
/fm 256 def
5 50 2000 863 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 914 CB
315 917 314 (WSAIsBlocking\(\)) 314 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 914 CB
975 920 919 (Determine if the underlying Windows Sockets DLL is) 919 SB
gr
gs 1046 53 954 964 CB
975 970 802 (already blocking an existing call for this thread) 802 SB
gr
/fm 256 def
5 2 289 914 B
1 F
n
/fm 256 def
655 2 295 914 B
1 F
n
/fm 256 def
2 2 951 914 B
1 F
n
/fm 256 def
1045 2 954 914 B
1 F
n
/fm 256 def
5 2 2000 914 B
1 F
n
/fm 256 def
5 99 289 917 B
1 F
n
/fm 256 def
2 99 951 917 B
1 F
n
/fm 256 def
5 99 2000 917 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 1017 CB
315 1020 436 (WSASetBlockingHook\(\)) 436 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 1017 CB
975 1023 885 ("Hook" the blocking method used by the underlying) 885 SB
gr
gs 1046 53 954 1067 CB
975 1073 581 (Windows Sockets implementation) 581 SB
gr
/fm 256 def
5 2 289 1017 B
1 F
n
/fm 256 def
655 2 295 1017 B
1 F
n
/fm 256 def
2 2 951 1017 B
1 F
n
/fm 256 def
1045 2 954 1017 B
1 F
n
/fm 256 def
5 2 2000 1017 B
1 F
n
/fm 256 def
5 99 289 1020 B
1 F
n
/fm 256 def
2 99 951 1020 B
1 F
n
/fm 256 def
5 99 2000 1020 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 1120 CB
315 1123 364 (WSASetLastError\(\)) 364 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 1120 CB
975 1126 738 (Set the error to be returned by a subsequent) 738 SB
gr
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 1046 54 954 1170 CB
975 1173 374 (WSAGetLastError\(\)) 374 SB
gr
/fm 256 def
5 2 289 1120 B
1 F
n
/fm 256 def
655 2 295 1120 B
1 F
n
/fm 256 def
2 2 951 1120 B
1 F
n
/fm 256 def
1045 2 954 1120 B
1 F
n
/fm 256 def
5 2 2000 1120 B
1 F
n
/fm 256 def
5 100 289 1123 B
1 F
n
/fm 256 def
2 100 951 1123 B
1 F
n
/fm 256 def
5 100 2000 1123 B
1 F
n
gs 656 54 295 1224 CB
315 1227 260 (WSAStartup\(\)) 260 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 1224 CB
975 1230 827 (Initialize the underlying Windows Sockets DLL.) 827 SB
gr
/fm 256 def
5 2 289 1224 B
1 F
n
/fm 256 def
655 2 295 1224 B
1 F
n
/fm 256 def
2 2 951 1224 B
1 F
n
/fm 256 def
1045 2 954 1224 B
1 F
n
/fm 256 def
5 2 2000 1224 B
1 F
n
/fm 256 def
5 50 289 1227 B
1 F
n
/fm 256 def
2 50 951 1227 B
1 F
n
/fm 256 def
5 50 2000 1227 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 656 54 295 1278 CB
315 1281 521 (WSAUnhookBlockingHook\(\)) 521 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 1046 53 954 1278 CB
975 1284 646 (Restore the original blocking function) 646 SB
gr
/fm 256 def
5 2 289 1278 B
1 F
n
/fm 256 def
655 2 295 1278 B
1 F
n
/fm 256 def
2 2 951 1278 B
1 F
n
/fm 256 def
1045 2 954 1278 B
1 F
n
/fm 256 def
5 2 2000 1278 B
1 F
n
/fm 256 def
5 50 289 1281 B
1 F
n
/fm 256 def
5 5 289 1332 B
1 F
n
/fm 256 def
5 5 289 1332 B
1 F
n
/fm 256 def
655 5 295 1332 B
1 F
n
/fm 256 def
2 50 951 1281 B
1 F
n
/fm 256 def
5 5 951 1332 B
1 F
n
/fm 256 def
1042 5 957 1332 B
1 F
n
/fm 256 def
5 50 2000 1281 B
1 F
n
/fm 256 def
5 5 2000 1332 B
1 F
n
/fm 256 def
5 5 2000 1332 B
1 F
n
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 1388 958 (3.3.1 Asynchronous select\(\) Mechanism) 958 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 1449 77 (The ) 77 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
392 1446 338 (WSAAsyncSelect\(\)) 338 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
730 1449 1365 ( API allows an application to register an interest in one or many network events.) 1365 SB
315 1500 1589 (This API is provided to supersede the need to do polled network I/O.  Any situation in which ) 1589 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1904 1497 127 (select\(\)) 127 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2031 1500 46 ( or) 46 SB
315 1551 598 (non-blocking I/O routines \(such as ) 598 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
913 1548 109 (send\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1022 1551 83 ( and ) 83 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1105 1548 106 (recv\(\)) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1211 1551 856 (\) are either already used or are being considered is) 856 SB
315 1602 460 (usually a candidate for the ) 460 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
775 1599 338 (WSAAsyncSelect\(\)) 338 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1113 1602 949 ( API.  When declaring interest in such condition\(s\), you) 949 SB
315 1653 1761 (supply a window handle to be used for notification.  The corresponding window then receives message-) 1761 SB
315 1703 1184 (based notification of the conditions in which you declared an interest.) 1184 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
315 1800 338 (WSAAsyncSelect\(\)) 338 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
653 1803 1371 ( allows interest to be declared in the following conditions for a particular socket:) 1371 SB
465 1854 481 (Socket readiness for reading) 481 SB
465 1904 476 (Socket readiness for writing) 476 SB
465 1954 593 (Out-of-band data ready for reading) 593 SB
465 2004 885 (Socket readiness for accepting incoming connection) 885 SB
465 2054 493 (Completion of non-blocking ) 493 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
958 2051 166 (connect\(\)) 166 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
465 2105 328 (Connection closure) 328 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 2202 916 (3.3.2 Asynchronous Support Routines) 916 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 2263 1713 (The asynchronous "database" functions allow applications to request information in an asynchronous) 1713 SB
315 2313 1707 (manner.  Some network implementations and/or configurations perform network based operations to) 1707 SB
315 2363 469 (resolve such requests.  The ) 469 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
784 2360 407 (WSAAsyncGetXByY\(\)) 407 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1191 2363 844 ( functions allow application developers to request) 844 SB
315 2414 1754 (services which would otherwise block the operation of the whole Windows environment if the standard) 1754 SB
315 2464 596 (Berkeley function were used.  The ) 596 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
911 2461 500 (WSACancelAsyncRequest\(\)) 500 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1411 2464 688 ( function allows an application to cancel) 688 SB
315 2515 655 (any outstanding asynchronous request.) 655 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 2612 777 (3.3.3 Hooking Blocking Methods) 777 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 2673 337 (As noted in section ) 337 SB
652 2673 85 (3.1.1) 85 SB
737 2673 1310 ( above, Windows Sockets implements blocking operations in such a way that) 1310 SB
315 2723 1720 (Windows message processing can continue, which may result in the application which issued the call) 1720 SB
315 2773 1763 (receiving a Windows message.  In certain situations an application may want to influence or change the) 1763 SB
315 2823 1111 (way in which this pseudo-blocking process is implemented.  The ) 1111 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1426 2820 436 (WSASetBlockingHook\(\)) 436 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1862 2823 219 ( provides the) 219 SB
1194 3070 42 (15) 42 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 23 23
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1459 117 600 (Socket Library Overview ) 600 SB
2059 117 56 (16) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 270 1632 (ability to substitute a named routine which the Windows Sockets implementation is to use when) 1632 SB
315 320 984 (relinquishing the processor during a "blocking" operation.) 984 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 417 477 (3.3.4 Error Handling) 477 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 478 1641 (For compatibility with thread-based environments, details of API errors are obtained through the) 1641 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
315 525 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
689 528 1360 ( API.  Although the accepted "Berkeley-Style" mechanism for obtaining socket-) 1360 SB
315 579 1714 (based network errors is via "errno", this mechanism cannot guarantee the integrity of an error ID in a) 1714 SB
315 629 508 (multi-threaded environment.  ) 508 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
823 626 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1197 629 880 ( allows you to retrieve an error code on a per thread) 880 SB
315 680 95 (basis.) 95 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
315 777 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
689 780 1355 ( returns error codes which avoid conflict with standard Microsoft C error codes.) 1355 SB
315 831 1724 (Certain error codes returned by certain Windows Sockets routines fall into the standard range of error) 1724 SB
315 881 1766 (codes as defined by Microsoft C.  If you are NOT using an application development environment which) 1766 SB
315 931 1780 (defines error codes consistent with Microsoft C, you are advised to use the Windows Sockets error codes) 1780 SB
315 981 1012 (prefixed by "WSA" to ensure accurate error code detection.) 1012 SB
315 1081 1772 (Note that this specification defines a recommended set of error codes, and lists the possible errors which) 1772 SB
315 1131 1696 (may be returned as a result of each function.  It may be the case in some implementations that other) 1696 SB
315 1181 1697 (Windows Sockets error codes will be returned in addition to those listed, and applications should be) 1697 SB
315 1231 1778 (prepared to handle errors other than those enumerated under each API description.  However a Windows) 1778 SB
315 1281 1794 (Sockets implementation must not return any value which is not enumerated in the table of legal Windows) 1794 SB
315 1331 650 (Sockets errors given in Appendix A.1.) 650 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 1428 1597 (3.3.5 Accessing a Windows Sockets DLL from an Intermediate DLL) 1597 SB
/fm 256 def
2 57 277 1428 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 1489 1567 (A Windows Sockets DLL may be accessed both directly from an application and through an) 1567 SB
/fm 256 def
2 49 277 1486 B
1 F
n
315 1539 1798 ("intermediate" DLL.  An example of such an intermediate DLL would be a virtual network API layer that) 1798 SB
/fm 256 def
2 49 277 1536 B
1 F
n
315 1589 1711 (supports generalized network functionality for applications and uses Windows Sockets.  Such a DLL) 1711 SB
/fm 256 def
2 49 277 1586 B
1 F
n
315 1639 1735 (could be used by several applications simultaneously, and the DLL must take special precautions with) 1735 SB
/fm 256 def
2 49 277 1636 B
1 F
n
315 1689 238 (respect to the ) 238 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
553 1686 271 (WSAStartup\(\) ) 271 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
824 1689 61 (and) 61 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
885 1686 296 ( WSACleanup\(\) ) 296 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1181 1689 846 (calls to ensure that these routines are called in the) 846 SB
/fm 256 def
2 50 277 1686 B
1 F
n
315 1740 1759 (context of each task that will make Windows Sockets calls.  This is because the Windows Sockets DLL) 1759 SB
/fm 256 def
2 49 277 1737 B
1 F
n
315 1790 315 (will need a call to ) 315 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
630 1787 271 (WSAStartup\(\) ) 271 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
901 1790 1184 (for each task in order to set up task-specific data structures, and a call) 1184 SB
/fm 256 def
2 50 277 1787 B
1 F
n
315 1841 44 (to ) 44 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
359 1838 285 (WSACleanup\(\) ) 285 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
644 1841 730 (to free any resources allocated for the task.) 730 SB
/fm 256 def
2 50 277 1838 B
1 F
n
/fm 256 def
2 49 277 1889 B
1 F
n
315 1942 1724 (There are \(at least\) two ways to accomplish this.  The simplest method is for the intermediate DLL to) 1724 SB
/fm 256 def
2 49 277 1939 B
1 F
n
315 1992 353 (have calls similar to ) 353 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
668 1989 271 (WSAStartup\(\) ) 271 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
939 1992 61 (and) 61 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1000 1989 296 ( WSACleanup\(\) ) 296 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1296 1992 795 (that applications call as appropriate.  The DLL) 795 SB
/fm 256 def
2 50 277 1989 B
1 F
n
315 2043 273 (would then call ) 273 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
588 2040 271 (WSAStartup\(\) ) 271 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
859 2043 35 (or) 35 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
894 2040 296 ( WSACleanup\(\) ) 296 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1190 2043 871 ( from within these routines.  Another mechanism is) 871 SB
/fm 256 def
2 50 277 2040 B
1 F
n
315 2094 1461 (for the intermediate DLL to build a table of task handles, which are obtained from the) 1461 SB
/fm 256 def
2 49 277 2091 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
315 2141 340 (GetCurrentTask\(\) ) 340 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
655 2144 1363 (Windows API, and at each entry point into the intermediate DLL check whether) 1363 SB
/fm 256 def
2 50 277 2141 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
315 2192 271 (WSAStartup\(\) ) 271 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
586 2195 772 (has been called for the current task, then call ) 772 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1358 2192 271 (WSAStartup\(\) ) 271 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1629 2195 212 (if necessary.) 212 SB
/fm 256 def
2 50 277 2192 B
1 F
n
/fm 256 def
2 49 277 2243 B
1 F
n
315 2296 1774 (If a DLL makes a blocking call and does not install its own blocking hook, then the DLL author must be) 1774 SB
/fm 256 def
2 49 277 2293 B
1 F
n
315 2346 1771 (aware that control may be returned to the application either by an application-installed blocking hook or) 1771 SB
/fm 256 def
2 49 277 2343 B
1 F
n
315 2396 1713 (by the default blocking hook.  Thus, it is possible that the application will cancel the DLL's blocking) 1713 SB
/fm 256 def
2 49 277 2393 B
1 F
n
315 2446 234 (operation via ) 234 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
549 2443 481 (WSACancelBlockingCall\(\)) 481 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1030 2446 1069 (.  If this occurs, the DLL's blocking operation will fail with the) 1069 SB
/fm 256 def
2 50 277 2443 B
1 F
n
315 2497 1788 (error code WSAEINTR, and the DLL must return control to the calling task as quickly as possible, as the) 1788 SB
/fm 256 def
2 49 277 2494 B
1 F
n
315 2547 1686 (used has likely pressed a cancel or close button and the task has requested control of the CPU.  It is) 1686 SB
/fm 256 def
2 49 277 2544 B
1 F
n
315 2597 1532 (recommended that DLLs which make blocking calls install their own blocking hooks with) 1532 SB
/fm 256 def
2 49 277 2594 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
315 2644 436 (WSASetBlockingHook\(\)) 436 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
751 2647 1241 ( to prevent unforeseen interactions between the application and the DLL.) 1241 SB
/fm 256 def
2 50 277 2644 B
1 F
n
/fm 256 def
2 49 277 2695 B
1 F
n
315 2748 732 (Note that this is not necessary for DLLs in ) 732 SB
1047 2748 228 (Windows NT) 228 SB
1275 2748 701 ( because of its different process and DLL) 701 SB
/fm 256 def
2 49 277 2745 B
1 F
n
315 2798 297 (structure.  Under ) 297 SB
612 2798 228 (Windows NT) 228 SB
840 2798 706 (, the intermediate DLL could simply call ) 706 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1546 2795 271 (WSAStartup\(\) ) 271 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1817 2798 177 (in its DLL) 177 SB
/fm 256 def
2 50 277 2795 B
1 F
n
315 2849 1511 (initialization routine, which is called whenever a new process which uses the DLL starts.) 1511 SB
/fm 256 def
2 49 277 2846 B
1 F
n
/fm 256 def
2 49 277 2896 B
1 F
n
1194 3070 42 (16) 42 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 24 24
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1459 117 600 (Socket Library Overview ) 600 SB
2059 117 56 (17) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 1655 (3.3.6 Internal use of Messages by Windows Sockets Implementations) 1655 SB
/fm 256 def
2 57 277 267 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 328 1671 (In order to implement Windows Sockets purely as a DLL, it may be necessary for the DLL to post) 1671 SB
/fm 256 def
2 49 277 325 B
1 F
n
315 378 1788 (messages internally for communication and timing.  This is perfectly legal; however, a Windows Sockets) 1788 SB
/fm 256 def
2 49 277 375 B
1 F
n
315 428 1639 (DLL must not post messages to a window handle opened by a client application except for those) 1639 SB
/fm 256 def
2 49 277 425 B
1 F
n
315 478 1775 (messages requested by the application.  A Windows Sockets DLL that needs to use messages for its own) 1775 SB
/fm 256 def
2 49 277 475 B
1 F
n
315 528 1730 (purposes must open a hidden window and post any necessary messages to the handle for that window.) 1730 SB
/fm 256 def
2 49 277 525 B
1 F
n
/fm 256 def
2 49 277 575 B
1 F
n
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 625 642 (3.3.7 Private API Interfaces) 642 SB
/fm 256 def
2 57 277 625 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 686 1668 (The winsock.def file in Appendix B.7 lists the ordinals defined for the Windows Sockets APIs.  In) 1668 SB
/fm 256 def
2 49 277 683 B
1 F
n
315 736 1774 (addition to the ordinal values listed, all ordinals 999 and below are reserved for future Windows Sockets) 1774 SB
/fm 256 def
2 49 277 733 B
1 F
n
315 786 1789 (use.  It may be convenient for a Windows Sockets implementation to export additional, private interfaces) 1789 SB
/fm 256 def
2 49 277 783 B
1 F
n
315 836 1744 (from the Windows Sockets DLL.  This is perfectly acceptable, as long as the ordinals for these exports) 1744 SB
/fm 256 def
2 49 277 833 B
1 F
n
315 886 1737 (are above 1000.  Note that any application that uses a particular Windows Sockets DLL's private APIs) 1737 SB
/fm 256 def
2 49 277 883 B
1 F
n
315 936 1670 (will most likely not work on any other vendor's Windows Sockets implementation.  Only the APIs) 1670 SB
/fm 256 def
2 49 277 933 B
1 F
n
315 986 1661 (defined in this document are guaranteed to be present in every Windows Sockets implementation.) 1661 SB
/fm 256 def
2 49 277 983 B
1 F
n
/fm 256 def
2 49 277 1033 B
1 F
n
315 1086 1561 (If an application uses private interfaces of a particular vendor's Windows Sockets DLL, it is) 1561 SB
/fm 256 def
2 49 277 1083 B
1 F
n
315 1136 1738 (recommended that the DLL not be statically linked with the application but rather dynamically loaded) 1738 SB
/fm 256 def
2 49 277 1133 B
1 F
n
315 1186 468 (with the Windows routines ) 468 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
783 1183 264 (LoadLibrary\(\)) 264 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1047 1186 83 ( and ) 83 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1130 1183 336 (GetProcAddress\(\).) 336 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1466 1186 609 (  This allows the application to give) 609 SB
/fm 256 def
2 50 277 1183 B
1 F
n
315 1237 1773 (an informative error message if it is run on a system with a Windows Sockets DLL that does not support) 1773 SB
/fm 256 def
2 49 277 1234 B
1 F
n
315 1287 657 (the same set of extended functionality.) 657 SB
/fm 256 def
2 49 277 1284 B
1 F
n
1194 3070 42 (17) 42 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 25 25
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1439 117 620 (Socket Library Reference ) 620 SB
2059 117 56 (18) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 50 50 1 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 317 835 (4.  SOCKET LIBRARY REFERENCE) 835 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 400 479 (4.1 Socket Routines) 479 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 461 1689 (This chapter presents the socket library routines in alphabetical order, and describes each routine in) 1689 SB
315 511 106 (detail.) 106 SB
315 611 837 (In each routine it is indicated that the header file ) 837 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1152 608 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1330 611 715 ( must be included.  Appendix A.2 lists the) 715 SB
315 662 1734 (Berkeley-compatible header files which are supported.  These are provided for compatibility purposes) 1734 SB
315 712 739 (only, and each of them will simply include ) 739 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1054 709 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1232 712 474 (.  The Windows header file ) 474 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1706 709 189 (windows.h) 189 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1895 712 118 ( is also) 118 SB
315 763 207 (needed, but ) 207 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
522 760 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
700 763 471 ( will include it if necessary.) 471 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 26 26
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1885 117 174 (accept ) 174 SB
2059 117 56 (19) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 320 (4.1.1 accept\(\)) 320 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 560 (Accept a connection on a socket.) 560 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 186 (SOCKET ) 186 SB
801 527 275 (PASCAL FAR ) 275 SB
1076 527 326 (accept \( SOCKET) 326 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1402 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1413 529 16 (s) 16 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1429 527 432 (, struct sockaddr FAR *) 432 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1861 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1872 529 79 (addr) 79 SB
32 0 0 42 42 0 0 0 38 /Times-BoldItalic /font30 ANSIFont font
1951 530 11 (,) 11 SB
/fm 256 def
2 51 277 527 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 579 189 (int FAR * ) 189 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
804 581 142 (addrlen ) 142 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
946 579 28 (\);) 28 SB
/fm 256 def
2 51 277 579 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 733 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 734 1139 (A descriptor identifying a socket which is listening for connections) 1139 SB
915 786 119 (after a ) 119 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1034 783 96 (listen) 96 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1130 786 39 (\(\).) 39 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 886 79 (addr) 79 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 887 795 (An optional pointer to a buffer which receives ) 795 SB
1710 887 298 (the address of the) 298 SB
/fm 256 def
2 51 277 884 B
1 F
n
915 939 1170 (connecting entity, as known to the communications layer.  The exact) 1170 SB
915 989 233 (format of the ) 233 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1148 988 79 (addr) 79 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1227 989 787 ( argument is determined by the address family) 787 SB
915 1041 693 (established when the socket was created.) 693 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1140 131 (addrlen) 131 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1141 30 (A) 30 SB
945 1141 171 (n optional) 171 SB
1116 1141 910 ( pointer to an integer which contains the length of the) 910 SB
/fm 256 def
2 51 277 1138 B
1 F
n
915 1193 137 (address ) 137 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1052 1192 79 (addr) 79 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1131 1193 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1294 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1295 1386 (This routine extracts the first connection on the queue of pending connections on ) 1386 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
2001 1294 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2017 1295 11 (,) 11 SB
615 1347 832 (creates a new socket with the same properties as ) 832 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1447 1346 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1463 1347 542 ( and returns a handle to the new) 542 SB
615 1399 1375 (socket.  If no pending connections are present on the queue, and the socket is not) 1375 SB
615 1449 431 (marked as non-blocking, ) 431 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1046 1446 143 (accept\(\)) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1189 1449 902 ( blocks the caller until a connection is present.  If the) 902 SB
615 1500 1441 (socket is marked non-blocking and no pending connections are present on the queue,) 1441 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1547 143 (accept\(\)) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
758 1550 1315 ( returns an error as described below.  The accepted socket may not be used to) 1315 SB
615 1601 1030 (accept more connections.  The original socket remains open.) 1030 SB
615 1701 248 (The argument ) 248 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
863 1700 79 (addr) 79 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
942 1701 1009 ( is a result parameter that is filled in with the address of the) 1009 SB
615 1753 1414 (connecting entity, as known to the communications layer.  The exact format of the ) 1414 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
2029 1752 79 (addr) 79 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1805 1321 (parameter is determined by the address family in which the communication is) 1321 SB
615 1855 272 (occurring.  The ) 272 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
887 1854 131 (addrlen) 131 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1018 1855 974 ( is a value-result parameter; it should initially contain the) 974 SB
615 1907 524 (amount of space pointed to by ) 524 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1139 1906 79 (addr) 79 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1218 1907 890 (; on return it will contain the actual length \(in bytes\)) 890 SB
615 1959 1441 (of the address returned.  This call is used with connection-based socket types such as) 1441 SB
615 2009 313 (SOCK_STREAM.) 313 SB
928 2009 61 (  If ) 61 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
989 2008 79 (addr) 79 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1068 2009 130 ( and/or ) 130 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1198 2008 131 (addrlen) 131 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1329 2009 692 ( are equal to NULL, then no information) 692 SB
/fm 256 def
2 51 277 2006 B
1 F
n
615 2061 1013 (about the remote address of the accepted socket is returned.) 1013 SB
/fm 256 def
2 49 277 2058 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2210 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2211 317 (If no error occurs, ) 317 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
932 2208 115 (accept) 115 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1047 2211 1016 (\(\) returns a value of type SOCKET which is a descriptor for) 1016 SB
615 2262 1403 (the accepted packet.  Otherwise, a value of INVALID_SOCKET is returned, and a) 1403 SB
615 2312 804 (specific error code may be retrieved by calling ) 804 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1419 2309 346 (WSAGetLastError) 346 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1765 2312 39 (\(\).) 39 SB
615 2413 448 (The integer referred to by ) 448 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1063 2412 131 (addrlen) 131 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1194 2413 883 ( initially contains the amount of space pointed to by) 883 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 2464 79 (addr) 79 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
694 2465 1290 (.  On return it will contain the actual length in bytes of the address returned.) 1290 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2566 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2567 426 (WSANOTINITIALISED) 426 SB
1215 2567 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 2564 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 2567 317 ( must occur before) 317 SB
1215 2618 252 (using this API.) 252 SB
615 2718 331 (WSAENETDOWN) 331 SB
1215 2718 878 (The Windows Sockets implementation has detected) 878 SB
1215 2768 648 (that the network subsystem has failed.) 648 SB
615 2868 254 (WSAEFAULT) 254 SB
1215 2868 77 (The ) 77 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1292 2867 142 (addrlen ) 142 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1434 2868 602 (argument is too small \(less than the) 602 SB
/fm 256 def
2 51 277 2865 B
1 F
n
1215 2920 424 (sizeof a struct sockaddr\).) 424 SB
/fm 256 def
2 49 277 2917 B
1 F
n
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 27 27
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1885 117 174 (accept ) 174 SB
2059 117 56 (20) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 320 217 (WSAEINTR) 217 SB
1215 320 625 (The \(blocking\) call was canceled via) 625 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1215 367 492 (WSACancelBlockingCall\(\).) 492 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 471 374 (WSAEINPROGRESS) 374 SB
1215 471 823 (A blocking Windows Sockets call is in progress.) 823 SB
615 571 249 (WSAEINVAL) 249 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1215 568 124 (listen\(\)) 124 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1339 571 436 ( was not invoked prior to ) 436 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1775 568 143 (accept\(\)) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1918 571 11 (.) 11 SB
615 672 245 (WSAEMFILE) 245 SB
1215 672 582 (The queue is empty upon entry to ) 582 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1797 669 143 (accept\(\)) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1940 672 168 ( and there) 168 SB
1215 723 477 (are no descriptors available.) 477 SB
615 823 283 (WSAENOBUFS) 283 SB
1215 823 485 (No buffer space is available.) 485 SB
615 923 316 (WSAENOTSOCK) 316 SB
1215 923 510 (The descriptor is not a socket.) 510 SB
615 1023 357 (WSAEOPNOTSUPP) 357 SB
1215 1023 821 (The referenced socket is not a type that supports) 821 SB
1215 1073 481 (connection-oriented service.) 481 SB
615 1173 417 (WSAEWOULDBLOCK) 417 SB
1215 1173 769 (The socket is marked as non-blocking and no) 769 SB
1215 1223 664 (connections are present to be accepted.) 664 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1322 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1320 109 (bind\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
724 1323 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
746 1320 166 (connect\(\)) 166 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
912 1323 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
934 1320 124 (listen\(\)) 124 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1058 1323 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1080 1320 127 (select\(\)) 127 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1207 1323 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1229 1320 140 (socket\(\)) 140 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1369 1323 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1391 1320 338 (WSAAsyncSelect\(\)) 338 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 28 28
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1938 117 121 (bind ) 121 SB
2059 117 56 (21) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 267 (4.1.2 bind\(\)) 267 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 671 (Associate a local address with a socket.) 671 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 60 (int ) 60 SB
675 527 275 (PASCAL FAR ) 275 SB
950 527 303 (bind \( SOCKET ) 303 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1253 529 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-BoldItalic /font30 ANSIFont font
1269 530 11 (,) 11 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1280 527 11 ( ) 11 SB
1291 527 104 (const ) 104 SB
1395 527 410 (struct sockaddr FAR *) 410 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1805 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1816 529 91 (name) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1907 530 11 (,) 11 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1918 527 60 ( int) 60 SB
/fm 256 def
2 51 277 527 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 581 154 (namelen ) 154 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
769 579 28 (\);) 28 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 733 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 734 746 (A descriptor identifying an unbound socket.) 746 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 835 91 (name) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 836 1187 (The address to assign to the socket.  The sockaddr structure is defined) 1187 SB
915 888 184 (as follows:) 184 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
915 980 425 (struct sockaddr {) 425 SB
1065 1025 175 (u_short) 175 SB
1365 1025 250 (sa_family;) 250 SB
1065 1070 100 (char) 100 SB
1215 1070 300 (sa_data[14];) 300 SB
915 1115 50 (};) 50 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1212 143 (namelen) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1213 303 (The length of the ) 303 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1218 1212 91 (name) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1309 1213 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1314 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1315 1448 (This routine is used on an unconnected datagram or stream socket, before subsequent) 1448 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1363 138 (connect) 138 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
753 1366 101 (\(\)s or ) 101 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
854 1363 96 (listen) 96 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
950 1366 597 (\(\)s.  When a socket is created with ) 597 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1547 1363 112 (socket) 112 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1659 1366 358 (\(\), it exists in a name) 358 SB
615 1417 904 (space \(address family\), but it has no name assigned.  ) 904 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1519 1414 81 (bind) 81 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1600 1417 379 (\(\) establishes the local) 379 SB
615 1468 1427 (association \(host address/port number\) of the socket by assigning a local name to an) 1427 SB
615 1518 285 (unnamed socket.) 285 SB
615 1618 1271 (In the Internet address family, a name consists of several components.  For) 1271 SB
615 1668 1499 (SOCK_DGRAM and SOCK_STREAM, the name consists of three parts: a host address,) 1499 SB
615 1718 1438 (the protocol number \(set implicitly to UDP or TCP, respectively\), and a port number) 1438 SB
615 1768 1351 (which identifies the application.  If an application does not care what address is) 1351 SB
615 1818 487 (assigned to it, it may specify) 487 SB
1102 1818 11 ( ) 11 SB
1113 1818 331 (an Internet address ) 331 SB
1444 1818 472 (equal to INADDR_ANY, a ) 472 SB
1916 1818 171 (port equal) 171 SB
/fm 256 def
2 49 277 1815 B
1 F
n
615 1868 65 (to 0) 65 SB
680 1868 143 (, or both) 143 SB
823 1868 33 (.  ) 33 SB
856 1868 1128 (If the Internet address is equal to INADDR_ANY, any appropriate) 1128 SB
/fm 256 def
2 49 277 1865 B
1 F
n
615 1918 1483 (network interface will be used; this simplifies application programming in the presence) 1483 SB
/fm 256 def
2 49 277 1915 B
1 F
n
615 1968 395 (of multi-homed hosts.  ) 395 SB
1010 1968 839 (If the port is specified as 0, the Windows Sockets) 839 SB
/fm 256 def
2 49 277 1965 B
1 F
n
615 2018 170 (implemen) 170 SB
785 2018 12 (t) 12 SB
797 2018 1286 (ation will assign a unique port to the application with a value between 1024) 1286 SB
/fm 256 def
2 49 277 2015 B
1 F
n
615 2068 617 (and 5000.  The application may use ) 617 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1232 2065 259 (getsockname\(\)) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1491 2068 100 ( after ) 100 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1591 2065 109 (bind\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 2068 415 ( to learn the address that) 415 SB
615 2119 382 (has been assigned to it) 382 SB
997 2119 246 (, but note that ) 246 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1243 2116 259 (getsockname\(\)) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1502 2119 509 ( will not necessarily fill in the) 509 SB
/fm 256 def
2 50 277 2116 B
1 F
n
615 2170 1452 (Internet address until the socket is connected, since several Internet addresses may be) 1452 SB
/fm 256 def
2 49 277 2167 B
1 F
n
615 2220 546 (valid if the host is multi-homed.) 546 SB
/fm 256 def
2 49 277 2217 B
1 F
n
615 2320 1460 (If an application desires to bind to an arbitrary port outside of the range 1024 to 5000,) 1460 SB
/fm 256 def
2 49 277 2317 B
1 F
n
615 2370 1358 (such as the case of rsh which must bind to any reserved port, code similar to the) 1358 SB
/fm 256 def
2 49 277 2367 B
1 F
n
615 2420 399 (following may be used:) 399 SB
/fm 256 def
2 49 277 2417 B
1 F
n
/fm 256 def
2 49 277 2467 B
1 F
n
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 2517 500 (    SOCKADDR_IN sin;) 500 SB
/fm 256 def
2 44 277 2517 B
1 F
n
615 2562 325 (    SOCKET s;) 325 SB
/fm 256 def
2 44 277 2562 B
1 F
n
615 2607 125 (    u) 125 SB
740 2607 25 (_) 25 SB
765 2607 775 (short alport = IPPORT_RESERVED;) 775 SB
/fm 256 def
2 44 277 2607 B
1 F
n
/fm 256 def
2 44 277 2652 B
1 F
n
615 2697 725 (    sin.sin_family = AF_INET;) 725 SB
/fm 256 def
2 44 277 2697 B
1 F
n
615 2742 700 (    sin.sin_addr.s_addr = 0;) 700 SB
/fm 256 def
2 44 277 2742 B
1 F
n
615 2787 350 (    for \(;;\) {) 350 SB
/fm 256 def
2 44 277 2787 B
1 F
n
615 2832 925 (        sin.sin_port = htons\(alport\);) 925 SB
/fm 256 def
2 44 277 2832 B
1 F
n
615 2877 1475 (        if \(bind\(s, \(LPSOCKADDR\)&sin, sizeof \(sin\)\) == 0\) {) 1475 SB
/fm 256 def
2 44 277 2877 B
1 F
n
615 2922 675 (            /* it worked */) 675 SB
/fm 256 def
2 44 277 2922 B
1 F
n
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 29 29
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1938 117 121 (bind ) 121 SB
2059 117 56 (22) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 267 225 (        }) 225 SB
/fm 256 def
2 44 277 267 B
1 F
n
615 312 1175 (        if \( GetLastError\(\) != WSAEADDRINUSE\) {) 1175 SB
/fm 256 def
2 44 277 312 B
1 F
n
615 357 550 (            /* fail */) 550 SB
/fm 256 def
2 44 277 357 B
1 F
n
615 402 225 (        }) 225 SB
/fm 256 def
2 44 277 402 B
1 F
n
615 447 425 (        alport--;) 425 SB
/fm 256 def
2 44 277 447 B
1 F
n
615 492 1075 (        if \(alport == IPPORT_RESERVED/2 \) {) 1075 SB
/fm 256 def
2 44 277 492 B
1 F
n
615 537 1425 (            /* fail--all unassigned reserved ports are */) 1425 SB
/fm 256 def
2 44 277 537 B
1 F
n
615 582 625 (            /* in use. */) 625 SB
/fm 256 def
2 44 277 582 B
1 F
n
615 627 225 (        }) 225 SB
/fm 256 def
2 44 277 627 B
1 F
n
615 672 125 (    }) 125 SB
/fm 256 def
2 44 277 672 B
1 F
n
/fm 256 def
2 49 277 717 B
1 F
n
/fm 256 def
2 49 277 767 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 969 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 970 317 (If no error occurs, ) 317 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
932 967 109 (bind\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1041 970 988 ( returns 0.  Otherwise, it returns SOCKET_ERROR, and a) 988 SB
615 1021 804 (specific error code may be retrieved by calling ) 804 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1419 1018 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1793 1021 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1121 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1122 426 (WSANOTINITIALISED) 426 SB
1215 1122 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 1119 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 1122 317 ( must occur before) 317 SB
1215 1173 252 (using this API.) 252 SB
615 1273 331 (WSAENETDOWN) 331 SB
1215 1273 878 (The Windows Sockets implementation has detected) 878 SB
1215 1323 648 (that the network subsystem has failed.) 648 SB
615 1423 371 (WSAEADDRINUSE ) 371 SB
1215 1423 824 (The specified address is already in use.  \(See the) 824 SB
1215 1473 670 (SO_REUSEADDR socket option under) 670 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1215 1520 214 (setsockopt\(\)) 214 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1429 1523 25 (.\)) 25 SB
615 1624 254 (WSAEFAULT) 254 SB
1215 1624 77 (The ) 77 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1292 1623 143 (namelen) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1435 1624 613 ( argument is too small \(less than the) 613 SB
1215 1676 435 (size of a struct sockaddr\).) 435 SB
615 1776 374 (WSAEINPROGRESS) 374 SB
1215 1776 823 (A blocking Windows Sockets call is in progress.) 823 SB
615 1876 415 (WSAEAFNOSUPPORT) 415 SB
1215 1876 895 (The specified address family is not supported by this) 895 SB
1215 1926 152 (protocol.) 152 SB
615 2026 249 (WSAEINVAL) 249 SB
1215 2026 719 (The socket is already bound to an address.) 719 SB
615 2126 283 (WSAENOBUFS) 283 SB
1215 2126 898 (Not enough buffers available, too many connections.) 898 SB
615 2226 316 (WSAENOTSOCK) 316 SB
1215 2226 510 (The descriptor is not a socket.) 510 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2325 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2323 166 (connect\(\)) 166 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
781 2326 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
803 2323 124 (listen\(\)) 124 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
927 2326 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
949 2323 259 (getsockname\(\)) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1208 2326 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1230 2323 214 (setsockopt\(\)) 214 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1444 2326 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1466 2323 140 (socket\(\)) 140 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1606 2326 11 (,) 11 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2374 481 (WSACancelBlockingCall\(\)) 481 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1096 2377 11 (.) 11 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 30 30
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1756 117 303 (closesocket ) 303 SB
2059 117 56 (23) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 449 (4.1.3 closesocket\(\)) 449 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 256 (Close a socket.) 256 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 60 (int ) 60 SB
675 527 275 (PASCAL FAR ) 275 SB
950 527 410 (closesocket \( SOCKET) 410 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1360 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1371 529 27 (s ) 27 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1398 527 28 (\);) 28 SB
/fm 256 def
2 51 277 527 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 681 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 682 567 (A descriptor identifying a socket.) 567 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 783 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 784 1342 (This function closes a socket.  More precisely, it releases the socket descriptor ) 1342 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1957 783 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1973 784 134 (, so that) 134 SB
615 836 355 (further references to ) 355 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
970 835 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
986 836 1019 ( will fail with the error WSAENOTSOCK.  If this is the last) 1019 SB
615 888 1473 (reference to the underlying socket, the associated naming information and queued data) 1473 SB
615 938 236 (are discarded.) 236 SB
615 1038 301 (The semantics of ) 301 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
916 1035 199 (closesocket) 199 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1115 1038 920 (\(\) are affected by the socket options SO_LINGER and) 920 SB
615 1089 539 (SO_DONTLINGER as follows:) 539 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
615 1189 117 (Option) 117 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
732 1189 187 (                 ) 187 SB
915 1189 154 (              ) 154 SB
1065 1189 132 (Interval) 132 SB
1197 1189 22 (  ) 22 SB
1215 1189 154 (              ) 154 SB
1365 1189 231 (Type of close) 231 SB
1596 1189 77 (       ) 77 SB
1665 1189 260 (Wait for close?) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1239 344 (SO_DONTLINGER) 344 SB
1065 1239 174 (Don't care) 174 SB
1365 1239 148 (Graceful) 148 SB
1665 1239 51 (No) 51 SB
615 1289 228 (SO_LINGER) 228 SB
1065 1289 80 (Zero) 80 SB
1365 1289 84 (Hard) 84 SB
1665 1289 51 (No) 51 SB
615 1339 228 (SO_LINGER) 228 SB
1065 1339 159 (Non-zero) 159 SB
1365 1339 148 (Graceful) 148 SB
1665 1339 65 (Yes) 65 SB
615 1439 516 (If SO_LINGER is set \(i.e. the ) 516 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1131 1438 120 (l_onoff) 120 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1251 1439 744 ( field of the linger structure is non-zero; see) 744 SB
615 1491 147 (sections ) 147 SB
762 1491 53 (2.4) 53 SB
815 1491 33 (,  ) 33 SB
848 1491 85 (4.1.7) 85 SB
933 1491 83 ( and ) 83 SB
1016 1491 106 (4.1.21) 106 SB
1122 1491 521 (\) with a zero timeout interval \() 521 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1643 1490 134 (l_linger) 134 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1777 1491 148 ( is zero\),) 148 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1540 227 (closesocket\(\)) 227 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
842 1543 1269 ( is not blocked even if queued data has not yet been sent or acknowledged.) 1269 SB
615 1594 377 (This is called a "hard") 377 SB
992 1594 230 ( or "abortive") 230 SB
1222 1594 832 ( close, because the socket's virtual circuit is reset) 832 SB
/fm 256 def
2 49 277 1591 B
1 F
n
615 1644 693 (immediately, and any unsent data is lost.) 693 SB
1308 1644 105 (  Any ) 105 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1413 1641 117 (recv\(\) ) 117 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1530 1644 495 (call on the remote side of the) 495 SB
/fm 256 def
2 50 277 1641 B
1 F
n
615 1695 728 (circuit will fail with WSAECONNRESET.) 728 SB
/fm 256 def
2 49 277 1692 B
1 F
n
615 1795 1008 (If SO_LINGER is set with a non-zero timeout interval, the ) 1008 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1623 1792 227 (closesocket\(\)) 227 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1850 1795 194 ( call blocks) 194 SB
615 1846 1405 (until the remaining data has been sent or until the timeout expires.  This is called a) 1405 SB
615 1896 342 (graceful disconnect.) 342 SB
957 1896 1125 (  Note that if the socket is set to non-blocking and SO_LINGER is) 1125 SB
/fm 256 def
2 49 277 1893 B
1 F
n
615 1946 625 (set to a non-zero timeout, the call to ) 625 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1240 1943 238 (closesocket\(\) ) 238 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1478 1946 410 (will fail with an error of) 410 SB
/fm 256 def
2 50 277 1943 B
1 F
n
615 1997 428 (WSAEWOULDBLOCK.) 428 SB
/fm 256 def
2 49 277 1994 B
1 F
n
615 2097 958 (If SO_DONTLINGER is set on a stream socket \(i.e. the ) 958 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1573 2096 120 (l_onoff) 120 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1693 2097 308 ( field of the linger) 308 SB
615 2149 506 (structure is zero; see sections ) 506 SB
1121 2149 53 (2.4) 53 SB
1174 2149 22 (, ) 22 SB
1196 2149 85 (4.1.7) 85 SB
1281 2149 83 ( and ) 83 SB
1364 2149 106 (4.1.21) 106 SB
1470 2149 99 (\), the ) 99 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1569 2146 227 (closesocket\(\)) 227 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1796 2149 262 ( call will return) 262 SB
615 2200 1494 (immediately.  However, any data queued for transmission will be sent if possible before) 1494 SB
615 2250 1468 (the underlying socket is closed.  This is also called a graceful disconnect.  Note that in) 1468 SB
615 2300 1430 (this case the Windows Sockets implementation may not release the socket and other) 1430 SB
615 2350 1480 (resources for an arbitrary period, which may affect applications which expect to use all) 1480 SB
615 2400 300 (available sockets.) 300 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2549 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2550 317 (If no error occurs, ) 317 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
932 2547 227 (closesocket\(\)) 227 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1159 2550 930 ( returns 0.  Otherwise, a value of SOCKET_ERROR is) 930 SB
615 2601 1069 (returned, and a specific error code may be retrieved by calling ) 1069 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1684 2598 385 (WSAGetLastError\(\).) 385 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2701 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2702 426 (WSANOTINITIALISED) 426 SB
1215 2702 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 2699 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 2702 317 ( must occur before) 317 SB
1215 2753 252 (using this API.) 252 SB
615 2853 331 (WSAENETDOWN) 331 SB
1215 2853 878 (The Windows Sockets implementation has detected) 878 SB
1215 2903 648 (that the network subsystem has failed.) 648 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 31 31
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1756 117 303 (closesocket ) 303 SB
2059 117 56 (24) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 320 316 (WSAENOTSOCK) 316 SB
1215 320 510 (The descriptor is not a socket.) 510 SB
615 420 374 (WSAEINPROGRESS) 374 SB
1215 420 823 (A blocking Windows Sockets call is in progress.) 823 SB
/fm 256 def
2 49 277 467 B
1 F
n
615 520 217 (WSAEINTR) 217 SB
1215 520 625 (The \(blocking\) call was canceled via) 625 SB
/fm 256 def
2 49 277 517 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1215 567 492 (WSACancelBlockingCall\(\).) 492 SB
/fm 256 def
2 50 277 567 B
1 F
n
/fm 256 def
2 50 277 618 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 672 417 (WSAEWOULDBLOCK) 417 SB
1215 672 702 (The socket is marked as nonblocking and) 702 SB
/fm 256 def
2 49 277 669 B
1 F
n
1215 722 801 (SO_LINGER is set to a nonzero timeout value.) 801 SB
/fm 256 def
2 49 277 719 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 871 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 869 143 (accept\(\)) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
758 872 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
780 869 140 (socket\(\)) 140 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
920 872 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
942 869 218 (ioctlsocket\(\)) 218 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1160 872 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1182 869 214 (setsockopt\(\)) 214 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1396 872 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1418 869 338 (WSAAsyncSelect\(\)) 338 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1756 872 11 (.) 11 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 32 32
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1851 117 208 (connect ) 208 SB
2059 117 56 (25) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 354 (4.1.4 connect\(\)) 354 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 551 (Establish a connection to a peer.) 551 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 60 (int ) 60 SB
675 527 275 (PASCAL FAR ) 275 SB
950 527 349 (connect \( SOCKET) 349 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1299 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1310 529 16 (s) 16 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1326 527 22 (, ) 22 SB
1348 527 104 (const ) 104 SB
1452 527 421 (struct sockaddr FAR * ) 421 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1873 529 91 (name) 91 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1964 527 11 (,) 11 SB
/fm 256 def
2 51 277 527 B
1 F
n
615 579 49 (int) 49 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
664 582 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
675 581 154 (namelen ) 154 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
829 579 28 (\);) 28 SB
/fm 256 def
2 51 277 579 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 733 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 734 813 (A descriptor identifying an unconnected socket.) 813 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 835 91 (name) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 836 1030 (The name of the peer to which the socket is to be connected.) 1030 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 937 143 (namelen) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 938 303 (The length of the ) 303 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1218 937 91 (name) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1309 938 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1039 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1040 1440 (This function is used to create a connection to the specified foreign association.  The) 1440 SB
615 1091 181 (parameter ) 181 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
796 1090 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
812 1091 1164 ( specifies an unconnected datagram or stream socket  If the socket is) 1164 SB
615 1143 1412 (unbound, unique values are assigned to the local association by the system, and the) 1412 SB
615 1193 1083 (socket is marked as bound.  Note that if the address field of the ) 1083 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1698 1192 91 (name) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1789 1193 252 ( structure is all) 252 SB
615 1245 130 (zeroes, ) 130 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
745 1242 166 (connect\(\)) 166 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
911 1245 820 ( will return the error WSAEADDRNOTAVAIL.) 820 SB
615 1346 1411 (For stream sockets \(type SOCK_STREAM\), an active connection is initiated to the) 1411 SB
615 1396 316 (foreign host using ) 316 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
931 1395 91 (name) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1022 1396 1075 ( \(an address in the name space of the socket\).  When the socket) 1075 SB
615 1448 1159 (call completes successfully, the socket is ready to send/receive data.) 1159 SB
615 1548 1452 (For a datagram socket \(type SOCK_DGRAM\), a default destination is set, which will) 1452 SB
615 1598 390 (be used on subsequent ) 390 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1005 1595 81 (send) 81 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1086 1598 111 (\(\) and ) 111 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1197 1595 78 (recv) 78 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1275 1598 128 (\(\) calls.) 128 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1748 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1749 317 (If no error occurs, ) 317 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
932 1746 166 (connect\(\)) 166 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1098 1749 988 ( returns 0.  Otherwise, it returns SOCKET_ERROR, and a) 988 SB
615 1800 804 (specific error code may be retrieved by calling ) 804 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1419 1797 385 (WSAGetLastError\(\).) 385 SB
/fm 256 def
2 50 277 1797 B
1 F
n
/fm 256 def
2 50 277 1848 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1902 1421 (On a blocking socket, the return value indicates success or failure of the connection) 1421 SB
/fm 256 def
2 49 277 1899 B
1 F
n
615 1952 139 (attempt.) 139 SB
/fm 256 def
2 49 277 1949 B
1 F
n
/fm 256 def
2 49 277 1999 B
1 F
n
615 2052 1387 (On a non-blocking socket, if the return value is SOCKET_ERROR an application) 1387 SB
/fm 256 def
2 49 277 2049 B
1 F
n
615 2102 196 (should call ) 196 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
811 2099 385 (WSAGetLastError\(\).) 385 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1196 2102 565 (  If this indicates an error code of) 565 SB
/fm 256 def
2 50 277 2099 B
1 F
n
615 2153 990 (WSAEWOULDBLOCK, then your application can either:) 990 SB
/fm 256 def
2 49 277 2150 B
1 F
n
/fm 256 def
2 49 277 2200 B
1 F
n
615 2253 119 (1. Use ) 119 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
734 2250 127 (select\(\)) 127 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
861 2253 1246 ( to determine the completion of the connection request by checking if the) 1246 SB
/fm 256 def
2 50 277 2250 B
1 F
n
615 2304 384 (socket is writeable,  or) 384 SB
/fm 256 def
2 49 277 2301 B
1 F
n
/fm 256 def
2 49 277 2351 B
1 F
n
615 2404 838 (2. If your application is using the message-based ) 838 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1453 2401 338 (WSAAsyncSelect\(\)) 338 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1791 2404 190 ( to indicate) 190 SB
/fm 256 def
2 50 277 2401 B
1 F
n
615 2455 1413 (interest in connection events, then your application will receive an FD_CONNECT) 1413 SB
/fm 256 def
2 49 277 2452 B
1 F
n
615 2505 839 (message when the connect operation is complete.) 839 SB
/fm 256 def
2 49 277 2502 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2604 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2605 426 (WSANOTINITIALISED) 426 SB
1215 2605 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 2602 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 2605 317 ( must occur before) 317 SB
1215 2656 252 (using this API.) 252 SB
615 2756 331 (WSAENETDOWN) 331 SB
1215 2756 878 (The Windows Sockets implementation has detected) 878 SB
1215 2806 648 (that the network subsystem has failed.) 648 SB
615 2906 360 (WSAEADDRINUSE) 360 SB
1215 2906 664 (The specified address is already in use.) 664 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 33 33
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1851 117 208 (connect ) 208 SB
2059 117 56 (26) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 320 217 (WSAEINTR) 217 SB
1215 320 625 (The \(blocking\) call was canceled via) 625 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1215 367 492 (WSACancelBlockingCall\(\).) 492 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 471 374 (WSAEINPROGRESS) 374 SB
1215 471 823 (A blocking Windows Sockets call is in progress.) 823 SB
615 571 453 (WSAEADDRNOTAVAIL) 453 SB
1215 571 886 (The specified address is not available from the local) 886 SB
1215 621 155 (machine.) 155 SB
615 721 415 (WSAEAFNOSUPPORT) 415 SB
1215 721 828 (Addresses in the specified family cannot be used) 828 SB
1215 771 277 (with this socket.) 277 SB
615 871 423 (WSAECONNREFUSED) 423 SB
1215 871 803 (The attempt to connect was forcefully rejected.) 803 SB
615 971 398 (WSAEDESTADDREQ) 398 SB
1215 971 566 (A destination address is required.) 566 SB
615 1071 254 (WSAEFAULT) 254 SB
1215 1071 77 (The ) 77 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1292 1070 143 (namelen) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1435 1071 383 ( argument is incorrect.) 383 SB
615 1173 249 (WSAEINVAL) 249 SB
1215 1173 784 (The socket is not already bound to an address.) 784 SB
615 1273 274 (WSAEISCONN) 274 SB
1215 1273 554 (The socket is already connected.) 554 SB
615 1373 245 (WSAEMFILE) 245 SB
1215 1373 652 (No more file descriptors are available.) 652 SB
615 1473 403 (WSAENETUNREACH) 403 SB
1215 1473 859 (The network can't be reached from this host at this) 859 SB
1215 1523 87 (time.) 87 SB
615 1623 283 (WSAENOBUFS) 283 SB
1215 1623 867 (No buffer space is available.  The socket cannot be) 867 SB
1215 1673 183 (connected.) 183 SB
615 1773 316 (WSAENOTSOCK) 316 SB
1215 1773 510 (The descriptor is not a socket.) 510 SB
615 1873 338 (WSAETIMEDOUT) 338 SB
1215 1873 882 (Attempt to connect timed out without establishing a) 882 SB
1215 1923 186 (connection) 186 SB
615 2023 417 (WSAEWOULDBLOCK) 417 SB
1032 2023 11 ( ) 11 SB
1215 2023 779 (The socket is marked as non-blocking and the) 779 SB
/fm 256 def
2 49 277 2020 B
1 F
n
1215 2073 871 (connection cannot be completed immediately.  It is) 871 SB
1215 2123 193 (possible to ) 193 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1408 2120 127 (select\(\)) 127 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1535 2123 558 ( the socket while it is connecting) 558 SB
1215 2174 53 (by ) 53 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1268 2171 127 (select\(\)) 127 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1395 2174 293 (ing it for writing.) 293 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2274 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2272 143 (accept\(\)) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
758 2275 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
780 2272 109 (bind\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
889 2275 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
911 2272 259 (getsockname\(\)) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1170 2275 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1192 2272 140 (socket\(\)) 140 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1332 2275 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1354 2272 565 (select\(\) and WSAAsyncSelect\(\).) 565 SB
32 0 0 42 42 0 1 0 38 /Times-Roman /font32 ANSIFont font
1919 2275 11 (.) 11 SB
/fm 256 def
2 50 277 2272 B
1 F
n
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 34 34
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1732 117 327 (getpeername ) 327 SB
2059 117 56 (27) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 473 (4.1.5 getpeername\(\)) 473 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 994 (Get the address of the peer to which a socket is connected.) 994 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 60 (int ) 60 SB
675 527 275 (PASCAL FAR ) 275 SB
950 527 443 (getpeername \( SOCKET) 443 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1393 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1404 529 16 (s) 16 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1420 527 443 (, struct sockaddr FAR * ) 443 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1863 529 91 (name) 91 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1954 527 71 (, int) 71 SB
/fm 256 def
2 51 277 527 B
1 F
n
615 579 118 (FAR *) 118 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
733 582 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
744 581 154 (namelen ) 154 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
898 579 28 (\);) 28 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 733 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 734 750 (A descriptor identifying a connected socket.) 750 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 835 91 (name) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 836 926 (The structure which is to receive the name of the peer.) 926 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 937 143 (namelen) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 938 465 (A pointer to the size of the ) 465 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1380 937 91 (name) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1471 938 170 ( structure.) 170 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1039 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1037 260 (getpeername\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
875 1040 936 ( retrieves the name of the peer connected to the socket ) 936 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1811 1039 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1827 1040 260 ( and stores it in) 260 SB
615 1092 558 (the struct sockaddr identified by ) 558 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1173 1091 91 (name) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1264 1092 791 (.  It is used on a connected datagram or stream) 791 SB
615 1144 119 (socket.) 119 SB
615 1244 248 (On return, the ) 248 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
863 1243 143 (namelen) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1006 1244 1095 ( argument contains the actual size of the name returned in bytes.) 1095 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1395 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1396 317 (If no error occurs, ) 317 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
932 1393 260 (getpeername\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1192 1396 891 ( returns 0.  Otherwise, a value of SOCKET_ERROR) 891 SB
615 1447 1108 (is returned, and a specific error code may be retrieved by calling ) 1108 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1723 1444 385 (WSAGetLastError\(\).) 385 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1547 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1548 426 (WSANOTINITIALISED) 426 SB
1215 1548 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 1545 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 1548 317 ( must occur before) 317 SB
1215 1599 252 (using this API.) 252 SB
615 1699 331 (WSAENETDOWN) 331 SB
1215 1699 878 (The Windows Sockets implementation has detected) 878 SB
1215 1749 648 (that the network subsystem has failed.) 648 SB
615 1849 254 (WSAEFAULT) 254 SB
1215 1849 738 (The namelen argument is not large enough.) 738 SB
615 1949 374 (WSAEINPROGRESS) 374 SB
1215 1949 823 (A blocking Windows Sockets call is in progress.) 823 SB
615 2049 323 (WSAENOTCONN) 323 SB
1215 2049 483 (The socket is not connected.) 483 SB
615 2149 316 (WSAENOTSOCK) 316 SB
1215 2149 510 (The descriptor is not a socket.) 510 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2248 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2246 109 (bind\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
724 2249 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
746 2246 140 (socket\(\)) 140 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
886 2249 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
908 2246 259 (getsockname\(\)) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1167 2249 11 (.) 11 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 35 35
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1723 117 336 (getsockname ) 336 SB
2059 117 56 (28) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 482 (4.1.6 getsockname\(\)) 482 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 541 (Get the local name for a socket.) 541 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 60 (int ) 60 SB
675 527 275 (PASCAL FAR ) 275 SB
950 527 442 (getsockname \( SOCKET) 442 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1392 530 27 ( s) 27 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1419 527 443 (, struct sockaddr FAR * ) 443 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1862 529 91 (name) 91 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1953 527 11 (,) 11 SB
/fm 256 def
2 51 277 527 B
1 F
n
615 579 178 (int FAR *) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
793 582 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
804 581 154 (namelen ) 154 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
958 579 28 (\);) 28 SB
/fm 256 def
2 51 277 579 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 733 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 734 683 (A descriptor identifying a bound socket.) 683 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 835 91 (name) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 836 484 (Receives the address \(name\)) 484 SB
1399 836 239 ( of the socket.) 239 SB
/fm 256 def
2 51 277 833 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 937 143 (namelen) 143 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
915 935 11 ( ) 11 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
926 938 263 (The size of the ) 263 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1189 937 91 (name) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1280 938 11 ( ) 11 SB
1291 938 103 (buffer) 103 SB
1394 938 11 (.) 11 SB
/fm 256 def
2 51 277 935 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1039 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1037 259 (getsockname\(\)) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
874 1040 1095 ( retrieves the current name for the specified socket descriptor in ) 1095 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1969 1039 91 (name) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2060 1040 11 (.) 11 SB
615 1092 1064 (It is used on a bound and/or connected socket specified by the ) 1064 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1679 1091 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1695 1092 374 ( parameter.  The local) 374 SB
615 1144 1037 (association is returned.  This call is especially useful when a ) 1037 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1652 1141 166 (connect\(\)) 166 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1818 1144 231 ( call has been) 231 SB
615 1195 380 (made without doing a ) 380 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
995 1192 109 (bind\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1104 1195 971 ( first; this call provides the only means by which you can) 971 SB
615 1246 1111 (determine the local association which has been set by the system.) 1111 SB
615 1346 248 (On return, the ) 248 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
863 1345 143 (namelen) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1006 1346 1095 ( argument contains the actual size of the name returned in bytes.) 1095 SB
615 1448 39 (If ) 39 SB
654 1448 1431 (a socket was bound to INADDR_ANY, indicating that any of the host's IP addresses) 1431 SB
/fm 256 def
2 49 277 1445 B
1 F
n
615 1498 515 (should be used for the socket, ) 515 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1130 1495 259 (getsockname\(\)) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1389 1498 664 ( will not necessarily return information) 664 SB
/fm 256 def
2 50 277 1495 B
1 F
n
615 1549 1170 (about the host IP address, unless the socket has been connected with ) 1170 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1785 1546 166 (connect\(\)) 166 SB
1951 1546 11 ( ) 11 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1962 1549 35 (or) 35 SB
/fm 256 def
2 50 277 1546 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1597 143 (accept\(\)) 143 SB
758 1597 11 (.) 11 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
769 1600 1310 (  A Windows Sockets application must not assume that the IP address will be) 1310 SB
/fm 256 def
2 50 277 1597 B
1 F
n
615 1651 1049 (changed from INADDR_ANY unless the socket is connected.) 1049 SB
1664 1651 22 (  ) 22 SB
1686 1651 349 (This is because for a) 349 SB
/fm 256 def
2 49 277 1648 B
1 F
n
615 1701 1466 (multi-homed host the IP address that will be used for the socket is unknown unless the) 1466 SB
/fm 256 def
2 49 277 1698 B
1 F
n
615 1751 341 (socket is connected.) 341 SB
/fm 256 def
2 49 277 1748 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1850 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1851 317 (If no error occurs, ) 317 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
932 1848 259 (getsockname\(\)) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1191 1851 891 ( returns 0.  Otherwise, a value of SOCKET_ERROR) 891 SB
615 1902 1108 (is returned, and a specific error code may be retrieved by calling ) 1108 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1723 1899 385 (WSAGetLastError\(\).) 385 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2002 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2003 426 (WSANOTINITIALISED) 426 SB
1215 2003 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 2000 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 2003 317 ( must occur before) 317 SB
1215 2054 252 (using this API.) 252 SB
615 2154 331 (WSAENETDOWN) 331 SB
1215 2154 878 (The Windows Sockets implementation has detected) 878 SB
1215 2204 648 (that the network subsystem has failed.) 648 SB
615 2304 254 (WSAEFAULT) 254 SB
1215 2304 77 (The ) 77 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1292 2303 143 (namelen) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1435 2304 517 ( argument is not large enough.) 517 SB
615 2406 374 (WSAEINPROGRESS) 374 SB
1215 2406 757 (A blocking Windows Sockets operation is in) 757 SB
1215 2456 153 (progress.) 153 SB
615 2556 316 (WSAENOTSOCK) 316 SB
1215 2556 510 (The descriptor is not a socket.) 510 SB
615 2656 249 (WSAEINVAL) 249 SB
1215 2656 842 (The socket has not been bound to an address with) 842 SB
/fm 256 def
2 49 277 2653 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1215 2703 120 (bind\(\).) 120 SB
/fm 256 def
2 50 277 2703 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2806 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2804 109 (bind\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
724 2807 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
746 2804 140 (socket\(\)) 140 SB
886 2804 282 (, getpeername\(\)) 282 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1168 2807 11 (.) 11 SB
/fm 256 def
2 50 277 2804 B
1 F
n
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 36 36
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1775 117 284 (getsockopt ) 284 SB
2059 117 56 (29) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 430 (4.1.7 getsockopt\(\)) 430 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 423 (Retrieve a socket option.) 423 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 60 (int ) 60 SB
675 527 275 (PASCAL FAR ) 275 SB
950 527 402 (getsockopt \( SOCKET) 402 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1352 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1363 529 16 (s) 16 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1379 527 71 (, int) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1450 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1461 529 81 (level) 81 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1542 527 71 (, int) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1613 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1624 529 145 (optname) 145 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1769 527 11 (,) 11 SB
/fm 256 def
2 51 277 527 B
1 F
n
615 579 222 (char FAR * ) 222 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
837 581 106 (optval) 106 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
943 579 71 (, int) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1014 582 92 ( FAR) 92 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1106 579 43 ( * ) 43 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1149 581 117 (optlen ) 117 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1266 579 28 (\);) 28 SB
/fm 256 def
2 51 277 579 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 733 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 734 567 (A descriptor identifying a socket.) 567 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 835 81 (level) 81 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 836 1024 (The level at which the option is defined; the only supported ) 1024 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1939 835 81 (level) 81 SB
2020 835 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2036 836 11 ( ) 11 SB
2047 836 52 (are) 52 SB
/fm 256 def
2 51 277 833 B
1 F
n
915 888 263 (SOL_SOCKET) 263 SB
1178 888 355 ( and IPPROTO_TCP) 355 SB
1533 888 11 (.) 11 SB
/fm 256 def
2 49 277 885 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 987 145 (optname) 145 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 988 951 (The socket option for which the value is to be retrieved.) 951 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1089 106 (optval) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1090 1160 (A pointer to the buffer in which the value for the requested option is) 1160 SB
915 1142 247 (to be returned.) 247 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1241 106 (optlen) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1242 465 (A pointer to the size of the ) 465 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1380 1241 106 (optval) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1486 1242 125 ( buffer.) 125 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1343 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1341 219 (getsockopt\(\)) 219 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
834 1344 1248 ( retrieves the current value for a socket option associated with a socket of) 1248 SB
615 1395 776 (any type, in any state, and stores the result in ) 776 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1391 1394 106 (optval) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1497 1395 536 (.  Options may exist at multiple) 536 SB
615 1447 1441 (protocol levels, but they are always present at the uppermost "socket'' level.  Options) 1441 SB
615 1497 1402 (affect socket operations, such as whether an operation blocks or not, the routing of) 1402 SB
615 1547 653 (packets, out-of-band data transfer, etc.) 653 SB
615 1647 1204 (The value associated  with the selected option is returned in the buffer ) 1204 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1819 1646 106 (optval) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1925 1647 99 (.  The) 99 SB
615 1699 375 (integer pointed to by  ) 375 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
990 1698 106 (optlen) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1096 1699 995 ( should originally contain the size of this buffer; on return,) 995 SB
615 1751 1485 (it will be set to the size of the value returned.  For SO_LINGER, this will be the size of) 1485 SB
615 1801 1133 (a struct linger; for all other options it will be the size of an integer.) 1133 SB
615 1901 546 (If the option was never set with ) 546 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1161 1898 225 (setsockopt\(\),) 225 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1386 1901 95 ( then ) 95 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1481 1898 219 (getsockopt\(\)) 219 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 1901 320 ( returns the default) 320 SB
615 1952 345 (value for the option.) 345 SB
615 2052 687 (The following options are supported for ) 687 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1302 2049 219 (getsockopt\(\)) 219 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1521 2052 110 (.  The ) 110 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
1631 2052 87 (Type) 87 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1718 2052 362 ( identifies the type of) 362 SB
615 2103 312 (data addressed by ) 312 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
927 2102 106 (optval) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1033 2103 33 (.  ) 33 SB
1066 2103 590 (The TCP_NODELAY option uses ) 590 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1656 2102 81 (level) 81 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1737 2103 349 ( IPPROTO_TCP; all) 349 SB
/fm 256 def
2 51 277 2100 B
1 F
n
615 2155 300 (other options use ) 300 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
915 2154 81 (level) 81 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
996 2155 285 ( SOL_SOCKET.) 285 SB
/fm 256 def
2 51 277 2152 B
1 F
n
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
gs 853 50 292 2254 CB
765 2257 101 (Value) 101 SB
gr
gs 255 50 1146 2254 CB
1168 2257 87 (Type) 87 SB
gr
gs 893 50 1402 2254 CB
1424 2257 150 (Meaning) 150 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 853 50 292 2304 CB
765 2307 323 (SO_ACCEPTCON) 323 SB
gr
gs 853 50 292 2304 CB
1088 2307 30 (N) 30 SB
gr
/fm 256 def
2 49 277 2304 B
1 F
n
gs 255 50 1146 2304 CB
1168 2307 114 (BOOL) 114 SB
gr
gs 893 51 1402 2304 CB
1424 2307 165 (Socket is ) 165 SB
gr
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 893 51 1402 2304 CB
1589 2304 124 (listen\(\)) 124 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 893 51 1402 2304 CB
1713 2307 65 (ing.) 65 SB
gr
gs 853 50 292 2355 CB
765 2358 327 (SO_BROADCAST) 327 SB
gr
gs 255 50 1146 2355 CB
1168 2358 114 (BOOL) 114 SB
gr
gs 893 50 1402 2355 CB
1424 2358 741 (Socket is configured for the transmission of) 741 SB
gr
gs 893 50 1402 2405 CB
1424 2408 343 (broadcast messages.) 343 SB
gr
gs 853 50 292 2455 CB
765 2458 218 (SO_DEBUG) 218 SB
gr
gs 255 50 1146 2455 CB
1168 2458 114 (BOOL) 114 SB
gr
gs 893 50 1402 2455 CB
1424 2458 380 (Debugging is enabled.) 380 SB
gr
gs 853 50 292 2505 CB
765 2508 344 (SO_DONTLINGER) 344 SB
gr
gs 255 50 1146 2505 CB
1168 2508 114 (BOOL) 114 SB
gr
gs 893 50 1402 2505 CB
1424 2508 739 (If true, the SO_LINGER option is disabled.) 739 SB
gr
gs 853 50 292 2555 CB
765 2558 330 (SO_DONTROUTE) 330 SB
gr
gs 255 50 1146 2555 CB
1168 2558 114 (BOOL) 114 SB
gr
gs 893 50 1402 2555 CB
1424 2558 338 (Routing is disabled.) 338 SB
gr
gs 853 50 292 2605 CB
765 2608 214 (SO_ERROR) 214 SB
gr
gs 255 50 1146 2605 CB
1168 2608 45 (int) 45 SB
gr
gs 893 50 1402 2605 CB
1424 2608 521 (Retrieve error status and clear.) 521 SB
gr
gs 853 50 292 2655 CB
765 2658 305 (SO_KEEPALIVE) 305 SB
gr
gs 255 50 1146 2655 CB
1168 2658 114 (BOOL) 114 SB
gr
gs 893 50 1402 2655 CB
1424 2658 446 (Keepalives are being sent.) 446 SB
gr
gs 853 50 292 2705 CB
765 2708 228 (SO_LINGER) 228 SB
gr
gs 255 50 1146 2705 CB
1168 2708 204 (struct linger) 204 SB
gr
gs 255 50 1146 2755 CB
1168 2758 113 (FAR *) 113 SB
gr
gs 893 50 1402 2705 CB
1424 2708 581 (Returns the current linger options.) 581 SB
gr
gs 853 50 292 2805 CB
765 2808 302 (SO_OOBINLINE) 302 SB
gr
gs 255 50 1146 2805 CB
1168 2808 114 (BOOL) 114 SB
gr
gs 893 50 1402 2805 CB
1424 2808 827 (Out-of-band data is being received in the normal) 827 SB
gr
gs 893 50 1402 2855 CB
1424 2858 206 (data stream.) 206 SB
gr
gs 853 50 292 2905 CB
765 2908 241 (SO_RCVBUF) 241 SB
gr
gs 255 50 1146 2905 CB
1168 2908 45 (int) 45 SB
gr
gs 893 50 1402 2905 CB
1424 2908 397 (Buffer size for receives) 397 SB
gr
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 37 37
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1775 117 284 (getsockopt ) 284 SB
2059 117 56 (30) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 853 50 292 267 CB
765 270 325 (SO_REUSEADDR) 325 SB
gr
gs 255 50 1146 267 CB
1168 270 114 (BOOL) 114 SB
gr
gs 893 50 1402 267 CB
1424 270 821 (The socket may be bound to an address which is) 821 SB
gr
gs 893 50 1402 317 CB
1424 320 247 (already in use.) 247 SB
gr
gs 853 50 292 367 CB
765 370 238 (SO_SNDBUF) 238 SB
gr
gs 255 50 1146 367 CB
1168 370 45 (int) 45 SB
gr
gs 893 50 1402 367 CB
1424 370 351 (Buffer size for sends) 351 SB
gr
gs 853 50 292 417 CB
765 420 179 (SO_TYPE) 179 SB
gr
gs 255 50 1146 417 CB
1168 420 45 (int) 45 SB
gr
gs 893 50 1402 417 CB
1424 420 803 (The type of the socket \(e.g. SOCK_STREAM\).) 803 SB
gr
gs 853 50 292 467 CB
765 470 300 (TCP_NODELAY) 300 SB
gr
/fm 256 def
2 49 277 467 B
1 F
n
gs 255 50 1146 467 CB
1168 470 114 (BOOL) 114 SB
gr
gs 893 50 1402 467 CB
1424 470 845 (Disables the Nagle algorithm for send coalescing.) 845 SB
gr
765 570 529 (BSD options not supported for ) 529 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1294 567 219 (getsockopt\(\)) 219 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1513 570 75 ( are:) 75 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
gs 853 50 292 668 CB
765 671 101 (Value) 101 SB
gr
gs 271 50 1146 668 CB
1168 671 87 (Type) 87 SB
gr
gs 892 50 1418 668 CB
1440 671 150 (Meaning) 150 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 853 50 292 718 CB
765 721 312 (SO_RCVLOWAT) 312 SB
gr
gs 271 50 1146 718 CB
1168 721 45 (int) 45 SB
gr
gs 892 50 1418 718 CB
1440 721 414 (Receive low water mark) 414 SB
gr
gs 853 50 292 768 CB
765 771 293 (SO_RCVTIMEO) 293 SB
gr
gs 271 50 1146 768 CB
1168 771 45 (int) 45 SB
gr
gs 892 50 1418 768 CB
1440 771 278 (Receive timeout) 278 SB
gr
gs 853 50 292 818 CB
765 821 309 (SO_SNDLOWAT) 309 SB
gr
gs 271 50 1146 818 CB
1168 821 45 (int) 45 SB
gr
gs 892 50 1418 818 CB
1440 821 361 (Send low water mark) 361 SB
gr
gs 853 50 292 868 CB
765 871 290 (SO_SNDTIMEO) 290 SB
gr
gs 271 50 1146 868 CB
1168 871 45 (int) 45 SB
gr
gs 892 50 1418 868 CB
1440 871 225 (Send timeout) 225 SB
gr
gs 853 50 292 918 CB
765 921 234 (IP_OPTIONS) 234 SB
gr
gs 892 50 1418 918 CB
1440 921 423 (Get options in IP header.) 423 SB
gr
gs 853 50 292 968 CB
765 971 274 (TCP_MAXSEG) 274 SB
gr
gs 271 50 1146 968 CB
1168 971 45 (int) 45 SB
gr
gs 892 50 1418 968 CB
1440 971 572 (Get TCP maximum segment size.) 572 SB
gr
615 1121 136 (Calling ) 136 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
751 1118 219 (getsockopt\(\)) 219 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
970 1121 982 ( with an unsupported option will result in an error code of) 982 SB
615 1172 756 (WSAENOPROTOOPT being returned from ) 756 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1371 1169 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1745 1172 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1372 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1373 317 (If no error occurs, ) 317 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
932 1370 219 (getsockopt\(\)) 219 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1151 1373 930 ( returns 0.  Otherwise, a value of SOCKET_ERROR is) 930 SB
615 1424 1069 (returned, and a specific error code may be retrieved by calling ) 1069 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1684 1421 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2058 1424 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1524 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1525 426 (WSANOTINITIALISED) 426 SB
1215 1525 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 1522 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 1525 317 ( must occur before) 317 SB
1215 1576 252 (using this API.) 252 SB
615 1676 331 (WSAENETDOWN) 331 SB
1215 1676 878 (The Windows Sockets implementation has detected) 878 SB
1215 1726 648 (that the network subsystem has failed.) 648 SB
615 1826 254 (WSAEFAULT) 254 SB
1215 1826 77 (The ) 77 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1292 1825 106 (optlen) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1398 1826 387 ( argument was invalid.) 387 SB
615 1928 374 (WSAEINPROGRESS) 374 SB
1215 1928 757 (A blocking Windows Sockets operation is in) 757 SB
1215 1978 153 (progress.) 153 SB
615 2078 395 (WSAENOPROTOOPT) 395 SB
1215 2078 724 (The option is unknown or unsupported.  In) 724 SB
1215 2128 846 (particular, SO_BROADCAST is not supported on) 846 SB
1215 2178 683 (sockets of type SOCK_STREAM, while) 683 SB
1215 2228 323 (SO_ACCEPTCON) 323 SB
1538 2228 30 (N) 30 SB
1568 2228 377 (, SO_DONTLINGER,) 377 SB
/fm 256 def
2 49 277 2225 B
1 F
n
1215 2278 627 (SO_KEEPALIVE, SO_LINGER and) 627 SB
1215 2328 841 (SO_OOBINLINE are not supported on sockets of) 841 SB
1215 2378 382 (type SOCK_DGRAM.) 382 SB
615 2478 316 (WSAENOTSOCK) 316 SB
1215 2478 510 (The descriptor is not a socket.) 510 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2577 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2575 214 (setsockopt\(\)) 214 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
829 2578 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
851 2575 338 (WSAAsyncSelect\(\)) 338 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1189 2578 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1211 2575 140 (socket\(\)) 140 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1351 2578 11 (.) 11 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 38 38
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1921 117 138 (htonl ) 138 SB
2059 117 56 (31) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 284 (4.1.8 htonl\(\)) 284 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 177 (Convert a ) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
792 325 121 (u_long) 121 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
913 328 562 ( from host to network byte order.) 562 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 132 (u_long ) 132 SB
747 527 275 (PASCAL FAR ) 275 SB
1022 527 250 (htonl \( u_long) 250 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1272 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1283 529 156 (hostlong ) 156 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1439 527 28 (\);) 28 SB
/fm 256 def
2 51 277 527 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 681 145 (hostlong) 145 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 682 602 (A 32-bit number in host byte order.) 602 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 783 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 784 1421 (This routine takes a 32-bit number in host byte order and returns a 32-bit number in) 1421 SB
615 835 333 (network byte order.) 333 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 984 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 982 121 (htonl\(\)) 121 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
736 985 682 ( returns the value in network byte order.) 682 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1085 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1083 125 (htons\(\)) 125 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
740 1086 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
762 1083 121 (ntohl\(\)) 121 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
883 1086 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
905 1083 125 (ntohs\(\)) 125 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1030 1086 11 (.) 11 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 39 39
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1907 117 152 (htons ) 152 SB
2059 117 56 (32) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 298 (4.1.9 htons\(\)) 298 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 177 (Convert a ) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
792 325 137 (u_short) 137 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
929 328 562 ( from host to network byte order.) 562 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 148 (u_short ) 148 SB
763 527 275 (PASCAL FAR ) 275 SB
1038 527 270 (htons \( u_short) 270 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1308 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1319 529 167 (hostshort ) 167 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1486 527 28 (\);) 28 SB
/fm 256 def
2 51 277 527 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 681 156 (hostshort) 156 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 682 602 (A 16-bit number in host byte order.) 602 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 783 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 784 1421 (This routine takes a 16-bit number in host byte order and returns a 16-bit number in) 1421 SB
615 835 333 (network byte order.) 333 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 984 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 982 125 (htons\(\)) 125 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
740 985 682 ( returns the value in network byte order.) 682 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1085 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1083 121 (htonl\(\)) 121 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
736 1086 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
758 1083 121 (ntohl\(\)) 121 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
879 1086 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
901 1083 125 (ntohs\(\)) 125 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1026 1086 11 (.) 11 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 40 40
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1818 117 241 (inet_addr ) 241 SB
2059 117 56 (33) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 415 (4.1.10 inet_addr\(\)) 415 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 886 (Convert a string containing a dotted address into an ) 886 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1501 325 142 (in_addr) 142 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1643 328 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
615 527 259 (unsigned long ) 259 SB
874 527 275 (PASCAL FAR ) 275 SB
1149 527 211 (inet_addr \( ) 211 SB
1360 527 104 (const ) 104 SB
1464 527 222 (char FAR * ) 222 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1686 529 51 (cp ) 51 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1737 527 28 (\);) 28 SB
/fm 256 def
2 51 277 527 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 681 40 (cp) 40 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 682 1121 (A character string representing a number expressed in the Internet) 1121 SB
915 734 359 (standard ".'' notation.) 359 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 833 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 834 1026 (This function interprets the character string specified by the ) 1026 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1641 833 40 (cp) 40 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1681 834 396 ( parameter.  This string) 396 SB
615 886 1428 (represents a numeric Internet address expressed in the Internet standard ".'' notation.) 1428 SB
615 936 1407 (The value returned is a number suitable for use as an Internet address.  All Internet) 1407 SB
615 986 1244 (addresses are returned in network order \(bytes ordered from left to right\).) 1244 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
615 1086 315 (Internet Addresses) 315 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1186 1210 (Values specified using the ".'' notation take one of the following forms:) 1210 SB
615 1286 113 (a.b.c.d) 113 SB
765 1286 81 (a.b.c) 81 SB
915 1286 51 (a.b) 51 SB
1065 1286 19 (a) 19 SB
615 1386 1456 (When four parts are specified, each is interpreted as a byte of data and assigned, from) 1456 SB
615 1436 1491 (left to right, to the four bytes of an Internet address.  Note that when an Internet address) 1491 SB
615 1486 1408 (is viewed as a 32-bit integer quantity on the Intel architecture, the bytes referred to) 1408 SB
615 1536 1413 (above appear as "d.c.b.a''.  That is, the bytes on an Intel processor are ordered from) 1413 SB
615 1586 203 (right to left.) 203 SB
615 1686 1398 (Note: The following notations are only used by Berkeley, and nowhere else on the) 1398 SB
615 1736 1411 (Internet.  In the interests of compatibility with their software, they are supported as) 1411 SB
615 1786 164 (specified.) 164 SB
615 1886 1437 (When a three part address is specified, the last part is interpreted as a 16-bit quantity) 1437 SB
615 1936 1429 (and placed in the right most two bytes of the network address.  This makes the three) 1429 SB
615 1986 1279 (part address format convenient for specifying Class B network addresses as) 1279 SB
615 2036 251 ("128.net.host''.) 251 SB
615 2136 1487 (When a two part address is specified, the last part is interpreted as a 24-bit quantity and) 1487 SB
615 2186 1434 (placed in the right most three bytes of the network address.  This makes the two part) 1434 SB
615 2236 1392 (address format convenient for specifying Class A network addresses as "net.host''.) 1392 SB
615 2336 1484 (When only one part is given, the value is stored directly in the network address without) 1484 SB
615 2386 412 (any byte rearrangement.) 412 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2535 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2536 317 (If no error occurs, ) 317 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
932 2533 203 (inet_addr\(\)) 203 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1135 2536 281 ( returns an unsig) 281 SB
1416 2536 147 (ned long) 147 SB
1563 2536 482 ( containing a suitable binary) 482 SB
/fm 256 def
2 50 277 2533 B
1 F
n
615 2587 767 (representation of the Internet address given.  ) 767 SB
1382 2587 687 (If the passed-in string does not contain a) 687 SB
/fm 256 def
2 49 277 2584 B
1 F
n
615 2637 1499 (legitimate Internet address, for example if a portion of an "a.b.c.d" address exceeds 255,) 1499 SB
/fm 256 def
2 49 277 2634 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2684 214 (inet_addr\(\) ) 214 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
829 2687 80 (retur) 80 SB
909 2687 513 (ns the value INADDR_NONE) 513 SB
1422 2687 11 (.) 11 SB
/fm 256 def
2 50 277 2684 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2787 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2785 196 (inet_ntoa\(\)) 196 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 41 41
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1820 117 239 (inet_ntoa ) 239 SB
2059 117 56 (34) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 413 (4.1.11 inet_ntoa\(\)) 413 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 962 (Convert a network address into a string in dotted format.) 962 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 222 (char FAR * ) 222 SB
837 527 275 (PASCAL FAR ) 275 SB
1112 527 462 (inet_ntoa \( struct in_addr) 462 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1574 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1585 529 44 (in ) 44 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1629 527 28 (\);) 28 SB
/fm 256 def
2 51 277 527 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 681 33 (in) 33 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 682 908 (A structure which represents an Internet host address.) 908 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 783 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 784 1106 (This function takes an Internet address structure specified by the ) 1106 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1721 783 33 (in) 33 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1754 784 240 ( parameter.  It) 240 SB
615 836 1468 (returns an ASCII string representing the address in ".''  notation as "a.b.c.d''.  Note that) 1468 SB
615 886 375 (the string returned by ) 375 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
990 883 196 (inet_ntoa\(\)) 196 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1186 886 758 ( resides in memory which is allocated by the) 758 SB
615 937 1462 (Windows Sockets implementation.  The application should not make any assumptions) 1462 SB
615 987 1423 (about the way in which the memory is allocated.  The data is guaranteed to be valid) 1423 SB
615 1037 1346 (until the next Windows Sockets API call within the same thread, but no longer.) 1346 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1186 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1187 317 (If no error occurs, ) 317 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
932 1184 196 (inet_ntoa\(\)) 196 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1128 1187 915 ( returns a char pointer to a static buffer containing the) 915 SB
615 1238 1462 (text address in standard ".'' notation.  Otherwise, it returns NULL.  The data should be) 1462 SB
615 1288 910 (copied before another Windows Sockets call is made.) 910 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1387 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1385 203 (inet_addr\(\)) 203 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
818 1388 11 (.) 11 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 42 42
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1781 117 278 (ioctlsocket ) 278 SB
2059 117 56 (35) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 452 (4.1.12 ioctlsocket\(\)) 452 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 503 (Control the mode of a socket.) 503 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 60 (int ) 60 SB
675 527 275 (PASCAL FAR ) 275 SB
950 527 401 (ioctlsocket \( SOCKET) 401 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1351 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1362 529 16 (s) 16 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1378 527 99 (, long) 99 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1477 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1488 529 70 (cmd) 70 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1558 527 272 (, u_long FAR *) 272 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1830 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1841 529 90 (argp ) 90 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1931 527 28 (\);) 28 SB
/fm 256 def
2 51 277 527 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 681 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 682 567 (A descriptor identifying a socket.) 567 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 783 70 (cmd) 70 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 784 681 (The command to perform on the socket ) 681 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1596 783 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1612 784 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 885 79 (argp) 79 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 886 487 (A pointer to a parameter for ) 487 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1402 885 70 (cmd) 70 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1472 886 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 987 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 988 1358 (This routine may be used on any socket in any state.  It is used to get or retrieve) 1358 SB
615 1039 1372 (operating parameters associated with the socket, independent of the protocol and) 1372 SB
615 1089 1186 (communications subsystem.  The following commands are supported:) 1186 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
615 1189 176 (Command) 176 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
791 1189 132 (            ) 132 SB
915 1189 174 (Semantics) 174 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1289 169 (FIONBIO) 169 SB
915 1289 882 (Enable or disable non-blocking mode on the socket ) 882 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1797 1288 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1813 1289 33 (.  ) 33 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1846 1288 79 (argp) 79 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1925 1289 156 ( points at) 156 SB
915 1341 51 (an ) 51 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
966 1338 248 (unsigned long) 248 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1214 1341 837 (, which is non-zero if non-blocking mode is to be) 837 SB
915 1392 1148 (enabled and zero if it is to be disabled.  When a socket is created, it) 1148 SB
915 1442 1181 (operates in blocking mode \(i.e. non-blocking mode is disabled\).  This) 1181 SB
915 1492 532 (is consistent with BSD sockets.) 532 SB
915 1592 77 (The ) 77 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
992 1589 349 (WSAAsyncSelect\(\) ) 349 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1341 1592 478 (routine automatically sets a ) 478 SB
1819 1592 152 (socket to) 152 SB
/fm 256 def
2 50 277 1589 B
1 F
n
915 1643 388 (nonblocking mode.  If ) 388 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1303 1640 349 (WSAAsyncSelect\(\) ) 349 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1652 1643 346 (has been issued on a) 346 SB
/fm 256 def
2 50 277 1640 B
1 F
n
915 1694 536 (socket, then any attempt to use ) 536 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1451 1691 229 (ioctlsocket\(\) ) 229 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1680 1694 408 (to set the socket back to) 408 SB
/fm 256 def
2 50 277 1691 B
1 F
n
915 1745 1199 (blocking mode will fail with WSAEINVAL.  To set the socket back to) 1199 SB
/fm 256 def
2 49 277 1742 B
1 F
n
915 1795 829 (blocking mode, an application must first disable ) 829 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1744 1792 338 (WSAAsyncSelect\(\)) 338 SB
/fm 256 def
2 50 277 1792 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1846 180 (by calling ) 180 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1095 1843 349 (WSAAsyncSelect\(\) ) 349 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1444 1846 149 (with the ) 149 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1593 1845 109 (lEvent) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1702 1846 371 ( parameter equal to 0.) 371 SB
/fm 256 def
2 51 277 1843 B
1 F
n
615 1948 211 (FIONREAD) 211 SB
915 1948 1111 (Determine the amount of data which can be read atomically from) 1111 SB
915 1998 119 (socket ) 119 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1034 1997 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1050 1998 33 (.  ) 33 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1083 1997 79 (argp) 79 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1162 1998 218 ( points at an ) 218 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1380 1995 248 (unsigned long) 248 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1628 1998 169 ( in which ) 169 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1797 1995 218 (ioctlsocket\(\)) 218 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 2050 338 (stores the result.  If ) 338 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1253 2049 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1269 2050 843 ( is of type SOCK_STREAM, FIONREAD returns) 843 SB
915 2102 935 (the total amount of data which may be read in a single ) 935 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1850 2099 106 (recv\(\)) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1956 2102 123 (; this is) 123 SB
915 2153 1155 (normally the same as the total amount of data queued on the socket.) 1155 SB
915 2203 39 (If ) 39 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
954 2202 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
970 2203 1077 ( is of type SOCK_DGRAM, FIONREAD returns the size of the) 1077 SB
915 2255 616 (first datagram queued on the socket.) 616 SB
615 2355 276 (SIOCATMARK) 276 SB
915 2355 1133 (Determine whether or not all out-of-band data has been read.  This) 1133 SB
915 2405 1114 (applies only to a socket of type SOCK_STREAM which has been) 1114 SB
915 2455 944 (configured for in-line reception of any out-of-band data) 944 SB
915 2505 1177 (\(SO_OOBINLINE\).  If no out-of-band data is waiting to be read,  the) 1177 SB
915 2555 1147 (operation returns TRUE.  Otherwise it returns FALSE, and the next) 1147 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
915 2602 106 (recv\(\)) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1021 2605 57 ( or ) 57 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1078 2602 195 (recvfrom\(\)) 195 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1273 2605 840 ( performed on the socket will retrieve some or all) 840 SB
915 2656 1081 (of the data preceding the "mark"; the application should use the) 1081 SB
915 2706 1193 (SIOCATMARK operation to determine whether any remains.  If there) 1193 SB
915 2756 1195 (is any normal data preceding the "urgent" \(out of band\) data, it will be) 1195 SB
915 2806 533 (received in order.  \(Note that a ) 533 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1448 2803 106 (recv\(\)) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1554 2806 57 ( or ) 57 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1611 2803 195 (recvfrom\(\)) 195 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1806 2806 259 ( will never mix) 259 SB
915 2857 809 (out-of-band and normal data in the same call.\)  ) 809 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1724 2856 79 (argp) 79 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1803 2857 186 ( points at a) 186 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
915 2906 122 (BOOL) 122 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1037 2909 169 ( in which ) 169 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1206 2906 218 (ioctlsocket\(\)) 218 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1424 2909 288 ( stores the result.) 288 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 43 43
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1781 117 278 (ioctlsocket ) 278 SB
2059 117 56 (36) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 319 267 (Compatibility) 267 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 320 469 (This function is a subset of ) 469 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1084 317 106 (ioctl\(\)) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1190 320 918 ( as used in Berkeley sockets.  In particular, there is no) 918 SB
615 371 1495 (command which is equivalent to FIOASYNC, while SIOCATMARK is the only socket-) 1495 SB
615 421 602 (level command which is supported.) 602 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 570 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 571 564 (Upon successful completion, the ) 564 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1179 568 218 (ioctlsocket\(\)) 218 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1397 571 556 ( returns 0.  Otherwise, a value of) 556 SB
615 622 1432 (SOCKET_ERROR is returned, and a specific error code may be retrieved by calling) 1432 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 669 385 (WSAGetLastError\(\).) 385 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 772 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 773 426 (WSANOTINITIALISED) 426 SB
1215 773 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 770 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 773 317 ( must occur before) 317 SB
1215 824 252 (using this API.) 252 SB
615 924 331 (WSAENETDOWN) 331 SB
1215 924 878 (The Windows Sockets implementation has detected) 878 SB
1215 974 648 (that the network subsystem has failed.) 648 SB
615 1074 249 (WSAEINVAL) 249 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1215 1073 70 (cmd) 70 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1285 1074 476 ( is not a valid command, or ) 476 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1761 1073 58 (arg) 58 SB
1819 1073 21 (p) 21 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1840 1074 155 ( is not an) 155 SB
/fm 256 def
2 51 277 1071 B
1 F
n
1215 1126 432 (acceptable parameter for ) 432 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1647 1125 70 (cmd) 70 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1717 1126 337 (, or the command is) 337 SB
1215 1178 750 (not applicable to the type of socket supplied) 750 SB
615 1278 374 (WSAEINPROGRESS) 374 SB
1215 1278 757 (A blocking Windows Sockets operation is in) 757 SB
1215 1328 153 (progress.) 153 SB
615 1428 316 (WSAENOTSOCK) 316 SB
1215 1428 257 (The descriptor ) 257 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1472 1427 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1488 1428 264 ( is not a socket.) 264 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1579 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1577 140 (socket\(\)) 140 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
755 1580 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
777 1577 214 (setsockopt\(\)) 214 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
991 1580 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1013 1577 219 (getsockopt\(\)) 219 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1232 1580 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1254 1577 338 (WSAAsyncSelect\(\)) 338 SB
1592 1577 11 (.) 11 SB
/fm 256 def
2 50 277 1577 B
1 F
n
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 44 44
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1913 117 146 (listen ) 146 SB
2059 117 56 (37) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 320 (4.1.13 listen\(\)) 320 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 890 (Establish a socket to listen for incoming connection.) 890 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 60 (int ) 60 SB
675 527 275 (PASCAL FAR ) 275 SB
950 527 307 (listen \( SOCKET) 307 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1257 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1268 529 16 (s) 16 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1284 527 71 (, int) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1355 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1366 529 145 (backlog ) 145 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1511 527 28 (\);) 28 SB
/fm 256 def
2 51 277 527 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 631 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 632 919 (A descriptor identifying a bound, unconnected socket.) 919 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 733 134 (backlog) 134 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 734 1189 (The maximum length to which the queue of pending connections may) 1189 SB
915 786 97 (grow.) 97 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 885 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 886 889 (To accept connections, a socket is first created with ) 889 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1504 883 112 (socket) 112 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1616 886 445 (\(\), a backlog for incoming) 445 SB
615 937 502 (connections is specified with ) 502 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1117 934 96 (listen) 96 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1213 937 780 (\(\), and then the connections are accepted with) 780 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 985 115 (accept) 115 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
730 988 61 (\(\).  ) 61 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
791 985 96 (listen) 96 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
887 988 1154 (\(\) applies only to sockets that support connections, i.e. those of type) 1154 SB
615 1039 531 (SOCK_STREAM.  The socket ) 531 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1146 1038 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1162 1039 952 ( is put into "passive'' mode where incoming connections) 952 SB
615 1091 1121 (are acknowledged and queued pending acceptance by the process.) 1121 SB
615 1191 1419 (This function is typically used by servers that could have more than one connection) 1419 SB
615 1241 1404 (request at a time: if a connection request arrives with the queue full, the client will) 1404 SB
615 1291 1076 (receive an error with an indication of WSAECONNREFUSED.) 1076 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1388 96 (listen) 96 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
711 1391 1233 (\(\) attempts to continue to function rationally when there are no available) 1233 SB
615 1442 1362 (descriptors.  It will accept connections until the queue is emptied.  If descriptors) 1362 SB
615 1492 553 (become available, a later call to ) 553 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1168 1489 96 (listen) 96 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1264 1492 85 (\(\) or ) 85 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1349 1489 115 (accept) 115 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1464 1492 626 (\(\) will re-fill the queue to the current) 626 SB
615 1543 1446 (or most recent "backlog'', if possible, and resume listening for incoming connections.) 1446 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1642 267 (Compatibility) 267 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1642 134 (backlog) 134 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
749 1643 1341 ( is currently limited \(silently\) to 5.  As in 4.3BSD, illegal values \(less than 1 or) 1341 SB
615 1695 921 (greater than 5\) are replaced by the nearest legal value.) 921 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1794 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1795 317 (If no error occurs, ) 317 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
932 1792 124 (listen\(\)) 124 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1056 1795 930 ( returns 0.  Otherwise, a value of SOCKET_ERROR is) 930 SB
615 1846 1069 (returned, and a specific error code may be retrieved by calling ) 1069 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1684 1843 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2058 1846 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1946 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1947 426 (WSANOTINITIALISED) 426 SB
1215 1947 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 1944 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 1947 317 ( must occur before) 317 SB
1215 1998 252 (using this API.) 252 SB
615 2098 331 (WSAENETDOWN) 331 SB
1215 2098 878 (The Windows Sockets implementation has detected) 878 SB
1215 2148 648 (that the network subsystem has failed.) 648 SB
615 2248 360 (WSAEADDRINUSE) 360 SB
1215 2248 506 (An attempt has been made to ) 506 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1721 2245 124 (listen\(\)) 124 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1845 2248 241 ( on an address) 241 SB
1215 2299 111 (in use.) 111 SB
615 2399 374 (WSAEINPROGRESS) 374 SB
1215 2399 757 (A blocking Windows Sockets operation is in) 757 SB
1215 2449 153 (progress.) 153 SB
615 2549 249 (WSAEINVAL) 249 SB
1215 2549 621 (The socket has not been bound with ) 621 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1836 2546 109 (bind\(\)) 109 SB
1945 2546 11 ( ) 11 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1956 2549 74 (or is) 74 SB
/fm 256 def
2 50 277 2546 B
1 F
n
1215 2600 308 (already connected) 308 SB
1523 2600 11 (.) 11 SB
/fm 256 def
2 49 277 2597 B
1 F
n
615 2700 274 (WSAEISCONN) 274 SB
1215 2700 554 (The socket is already connected.) 554 SB
615 2800 245 (WSAEMFILE) 245 SB
1215 2800 652 (No more file descriptors are available.) 652 SB
615 2900 283 (WSAENOBUFS) 283 SB
1215 2900 485 (No buffer space is available.) 485 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 45 45
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1913 117 146 (listen ) 146 SB
2059 117 56 (38) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 320 316 (WSAENOTSOCK) 316 SB
1215 320 510 (The descriptor is not a socket.) 510 SB
615 420 357 (WSAEOPNOTSUPP) 357 SB
1215 420 867 (The referenced socket is not of a type that supports) 867 SB
1215 470 63 (the ) 63 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1278 467 124 (listen\(\)) 124 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1402 470 182 ( operation.) 182 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 570 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 568 143 (accept\(\)) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
758 571 33 (,  ) 33 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
791 568 166 (connect\(\)) 166 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
957 571 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
979 568 140 (socket\(\)) 140 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1119 571 11 (.) 11 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 46 46
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1921 117 138 (ntohl ) 138 SB
2059 117 56 (39) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 312 (4.1.14 ntohl\(\)) 312 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 177 (Convert a ) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
792 325 121 (u_long) 121 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
913 328 562 ( from network to host byte order.) 562 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 132 (u_long ) 132 SB
747 527 275 (PASCAL FAR ) 275 SB
1022 527 250 (ntohl \( u_long) 250 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1272 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1283 529 138 (netlong ) 138 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1421 527 28 (\);) 28 SB
/fm 256 def
2 51 277 527 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 681 127 (netlong) 127 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 682 670 (A 32-bit number in network byte order.) 670 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 783 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 784 1489 (This routine takes a 32-bit number in network byte order and returns a 32-bit number in) 1489 SB
615 835 265 (host byte order.) 265 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 984 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 982 121 (ntohl\(\)) 121 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
736 985 614 ( returns the value in host byte order.) 614 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1085 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1083 121 (htonl\(\)) 121 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
736 1086 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
758 1083 125 (htons\(\)) 125 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
883 1086 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
905 1083 125 (ntohs\(\)) 125 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1030 1086 11 (.) 11 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 47 47
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1907 117 152 (ntohs ) 152 SB
2059 117 56 (40) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 326 (4.1.15 ntohs\(\)) 326 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 177 (Convert a ) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
792 325 137 (u_short) 137 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
929 328 562 ( from network to host byte order.) 562 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 148 (u_short ) 148 SB
763 527 275 (PASCAL FAR ) 275 SB
1038 527 270 (ntohs \( u_short) 270 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1308 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1319 529 149 (netshort ) 149 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1468 527 28 (\);) 28 SB
/fm 256 def
2 51 277 527 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 681 138 (netshort) 138 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 682 670 (A 16-bit number in network byte order.) 670 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 783 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 784 1489 (This routine takes a 16-bit number in network byte order and returns a 16-bit number in) 1489 SB
615 835 265 (host byte order.) 265 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 984 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 982 125 (ntohs\(\)) 125 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
740 985 614 ( returns the value in host byte order.) 614 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1085 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1083 121 (htonl\(\)) 121 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
736 1086 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
758 1083 125 (htons\(\)) 125 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
883 1086 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
905 1083 121 (ntohl\(\)) 121 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1026 1086 11 (.) 11 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 48 48
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1942 117 117 (recv ) 117 SB
2059 117 56 (41) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 291 (4.1.16 recv\(\)) 291 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 472 (Receive data from a socket.) 472 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 60 (int ) 60 SB
675 527 275 (PASCAL FAR ) 275 SB
950 527 289 (recv \( SOCKET) 289 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1239 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1250 529 16 (s) 16 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1266 527 233 (, char FAR *) 233 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1499 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1510 529 54 (buf) 54 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1564 527 71 (, int) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1635 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1646 529 52 (len) 52 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1698 527 71 (, int) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1769 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1780 529 93 (flags ) 93 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1873 527 28 (\);) 28 SB
/fm 256 def
2 51 277 527 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 681 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 682 750 (A descriptor identifying a connected socket.) 750 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 783 54 (buf) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 784 531 (A buffer for the incoming data.) 531 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 885 52 (len) 52 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 886 240 (The length of ) 240 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1155 885 54 (buf) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1209 886 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 987 82 (flags) 82 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 988 746 (Specifies the way in which the call is made.) 746 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1089 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1090 1355 (This function is used on connected datagram or stream sockets specified by the ) 1355 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1970 1089 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1142 761 (parameter and is used to read incoming data.) 761 SB
615 1242 1476 (For sockets of type SOCK_STREAM, as much information as is currently available up) 1476 SB
615 1292 1454 (to the size of the buffer supplied is returned.  If the socket has been configured for in-) 1454 SB
615 1342 1432 (line reception of out-of-band data \(socket option SO_OOBINLINE\) and out-of-band) 1432 SB
615 1392 1418 (data is unread, only out-of-band data will be returned.  The application may use the) 1418 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1439 218 (ioctlsocket\(\)) 218 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
833 1442 1266 ( SIOCATMARK to determine whether any more out-of-band data remains) 1266 SB
615 1493 179 (to be read.) 179 SB
615 1593 1486 (For datagram sockets, data is extracted from the first enqueued datagram, up to the size) 1486 SB
615 1643 1245 (of the buffer supplied.  If the datagram is larger than the buffer supplied, ) 1245 SB
1860 1643 205 (the buffer is) 205 SB
/fm 256 def
2 49 277 1640 B
1 F
n
615 1693 695 (filled with the first part of the datagram, ) 695 SB
1310 1693 366 (the excess data is lost) 366 SB
1676 1693 94 (, and ) 94 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1770 1690 117 (recv\(\) ) 117 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1887 1693 180 (returns the) 180 SB
/fm 256 def
2 50 277 1690 B
1 F
n
615 1744 391 (error WSAEMSGSIZE) 391 SB
1006 1744 11 (.) 11 SB
/fm 256 def
2 49 277 1741 B
1 F
n
615 1844 847 (If no incoming data is available at the socket, the ) 847 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1462 1841 106 (recv\(\)) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1568 1844 469 ( call waits for data to arrive) 469 SB
615 1895 1491 (unless the socket is non-blocking.  In this case a value of SOCKET_ERROR is returned) 1491 SB
615 1945 962 (with the error code set to WSAEWOULDBLOCK.  The ) 962 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1577 1942 99 (select) 99 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1676 1945 85 (\(\) or ) 85 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1761 1942 310 (WSAAsyncSelect) 310 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2071 1945 28 (\(\)) 28 SB
615 1996 945 (calls may be used to determine when more data arrives.) 945 SB
615 2096 1350 (If the socket is of type SOCK_STREAM and the remote side has shut down the) 1350 SB
/fm 256 def
2 49 277 2093 B
1 F
n
615 2146 421 (connection gracefully, a ) 421 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1036 2143 106 (recv\(\)) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1142 2146 965 ( will complete immediately with 0 bytes received.  If the) 965 SB
/fm 256 def
2 50 277 2143 B
1 F
n
615 2197 487 (connection has been reset, a ) 487 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1102 2194 117 (recv\(\) ) 117 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1219 2197 764 (will fail with the error WSAECONNRESET.) 764 SB
/fm 256 def
2 50 277 2194 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 2297 96 (Flags) 96 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
711 2298 1307 ( may be used to influence the behavior of the function invocation beyond the) 1307 SB
615 2350 1450 (options specified for the associated socket.  That is, the semantics of this function are) 1450 SB
615 2400 707 (determined by the socket options and the ) 707 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1322 2399 82 (flags) 82 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1404 2400 677 ( parameter.  The latter is constructed by) 677 SB
615 2452 590 (or-ing any of the following values:) 590 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
615 2552 101 (Value) 101 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
716 2552 209 (                   ) 209 SB
915 2552 150 (Meaning) 150 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2602 216 (MSG_PEEK) 216 SB
915 2602 1142 (Peek at the incoming data.  The data is copied into the buffer but is) 1142 SB
915 2652 590 (not removed from the input queue.) 590 SB
615 2752 199 (MSG_OOB) 199 SB
915 2752 648 (Process out-of-band data \(See section ) 648 SB
1563 2752 85 (2.2.3) 85 SB
1648 2752 394 ( for a discussion of this) 394 SB
915 2802 110 (topic.\)) 110 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 49 49
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1942 117 117 (recv ) 117 SB
2059 117 56 (42) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 319 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 320 317 (If no error occurs, ) 317 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
932 317 106 (recv\(\)) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1038 320 1020 ( returns the number of bytes received.  If the connection has) 1020 SB
615 371 1440 (been closed, it returns 0.  Otherwise, a value of SOCKET_ERROR is returned, and a) 1440 SB
615 421 804 (specific error code may be retrieved by calling ) 804 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1419 418 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1793 421 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 521 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 522 426 (WSANOTINITIALISED) 426 SB
1215 522 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 519 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 522 317 ( must occur before) 317 SB
1215 573 252 (using this API.) 252 SB
615 673 331 (WSAENETDOWN) 331 SB
1215 673 878 (The Windows Sockets implementation has detected) 878 SB
1215 723 648 (that the network subsystem has failed.) 648 SB
615 823 323 (WSAENOTCONN) 323 SB
1215 823 483 (The socket is not connected.) 483 SB
615 923 217 (WSAEINTR) 217 SB
1215 923 625 (The \(blocking\) call was canceled via) 625 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1215 970 492 (WSACancelBlockingCall\(\).) 492 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1074 374 (WSAEINPROGRESS) 374 SB
1215 1074 757 (A blocking Windows Sockets operation is in) 757 SB
1215 1124 153 (progress.) 153 SB
615 1224 316 (WSAENOTSOCK) 316 SB
1215 1224 510 (The descriptor is not a socket.) 510 SB
615 1324 357 (WSAEOPNOTSUPP) 357 SB
1215 1324 847 (MSG_OOB was specified, but the socket is not of) 847 SB
1215 1374 397 (type SOCK_STREAM.) 397 SB
615 1474 358 (WSAESHUTDOWN) 358 SB
1215 1474 861 (The socket has been shutdown; it is not possible to) 861 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1215 1521 106 (recv\(\)) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1321 1524 302 ( on a socket after ) 302 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1623 1521 201 (shutdown\(\)) 201 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1824 1524 158 ( has been) 158 SB
1215 1575 233 (invoked with ) 233 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1448 1574 70 (how) 70 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1518 1575 223 ( set to 0 or 2.) 223 SB
615 1677 417 (WSAEWOULDBLOCK) 417 SB
1215 1677 779 (The socket is marked as non-blocking and the) 779 SB
1215 1727 526 (receive operation would block.) 526 SB
615 1827 298 (WSAEMSGSIZE) 298 SB
1215 1827 869 (The datagram was too large to fit into the specified) 869 SB
/fm 256 def
2 49 277 1824 B
1 F
n
1215 1877 431 (buffer and was truncated.) 431 SB
/fm 256 def
2 49 277 1874 B
1 F
n
/fm 256 def
2 49 277 1924 B
1 F
n
615 1977 249 (WSAEINVAL) 249 SB
1215 1977 621 (The socket has not been bound with ) 621 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1836 1974 120 (bind\(\).) 120 SB
/fm 256 def
2 50 277 1974 B
1 F
n
/fm 256 def
2 50 277 2025 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2079 435 (WSAECONNABORTED) 435 SB
1215 2079 825 (The virtual circuit was aborted due to timeout or) 825 SB
/fm 256 def
2 49 277 2076 B
1 F
n
1215 2129 220 (other failure.) 220 SB
/fm 256 def
2 49 277 2126 B
1 F
n
/fm 256 def
2 49 277 2176 B
1 F
n
615 2229 366 (WSAECONNRESET) 366 SB
1215 2229 463 (The virtual circuit was rese) 463 SB
1678 2229 23 (t ) 23 SB
1701 2229 324 (by the remote side.) 324 SB
/fm 256 def
2 49 277 2226 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2328 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2326 195 (recvfrom\(\)) 195 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
810 2329 22 (, ) 22 SB
32 0 0 42 42 0 1 0 41 /Times-Bold /font29 ANSIFont font
832 2326 110 (read\(\)) 110 SB
32 0 0 42 42 0 1 0 38 /Times-Roman /font32 ANSIFont font
942 2329 22 (, ) 22 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
964 2329 11 (,) 11 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
975 2326 128 (recv\(\), ) 128 SB
1103 2326 109 (send\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1212 2329 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1234 2326 127 (select\(\)) 127 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1361 2329 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1383 2326 338 (WSAAsyncSelect\(\)) 338 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1721 2329 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1743 2326 140 (socket\(\)) 140 SB
/fm 256 def
2 50 277 2326 B
1 F
n
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 50 50
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1831 117 228 (recvfrom ) 228 SB
2059 117 56 (43) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 402 (4.1.17 recvfrom\(\)) 402 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 833 (Receive a datagram and store the source address.) 833 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 60 (int ) 60 SB
675 527 275 (PASCAL FAR ) 275 SB
950 527 378 (recvfrom \( SOCKET) 378 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1328 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1339 529 16 (s) 16 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1355 527 244 (, char FAR * ) 244 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1599 529 54 (buf) 54 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1653 527 71 (, int) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1724 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1735 529 52 (len) 52 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1787 527 71 (, int) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1858 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1869 529 82 (flags) 82 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1951 527 11 (,) 11 SB
/fm 256 def
2 51 277 527 B
1 F
n
615 579 410 (struct sockaddr FAR *) 410 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1025 582 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1036 581 79 (from) 79 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1115 579 200 (, int FAR *) 200 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1315 582 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1326 581 142 (fromlen ) 142 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1468 579 28 (\);) 28 SB
/fm 256 def
2 51 277 579 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 733 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 734 683 (A descriptor identifying a bound socket.) 683 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 835 54 (buf) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 836 531 (A buffer for the incoming data.) 531 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 937 52 (len) 52 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 938 240 (The length of ) 240 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1155 937 54 (buf) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1209 938 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1039 82 (flags) 82 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1040 746 (Specifies the way in which the call is made.) 746 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1141 79 (from) 79 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1142 332 (An optional pointer) 332 SB
1247 1142 786 ( to a buffer which will hold the source address) 786 SB
/fm 256 def
2 51 277 1139 B
1 F
n
915 1194 207 (upon return.) 207 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1293 131 (fromlen) 131 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1294 30 (A) 30 SB
945 1294 171 (n optional) 171 SB
1116 1294 435 ( pointer to the size of the ) 435 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1551 1293 79 (from) 79 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1630 1294 125 ( buffer.) 125 SB
/fm 256 def
2 51 277 1291 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1395 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1396 1371 (This function is used to read incoming data on a \(possibly connected\) socket and) 1371 SB
615 1447 843 (capture the address from which the data was sent.) 843 SB
615 1547 1476 (For sockets of type SOCK_STREAM, as much information as is currently available up) 1476 SB
615 1597 1454 (to the size of the buffer supplied is returned.  If the socket has been configured for in-) 1454 SB
615 1647 1432 (line reception of out-of-band data \(socket option SO_OOBINLINE\) and out-of-band) 1432 SB
615 1697 1418 (data is unread, only out-of-band data will be returned.  The application may use the) 1418 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1744 218 (ioctlsocket\(\)) 218 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
833 1747 1266 ( SIOCATMARK to determine whether any more out-of-band data remains) 1266 SB
615 1798 278 (to be read.  The ) 278 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
893 1797 90 (from ) 90 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
983 1798 72 (and ) 72 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1055 1797 142 (fromlen ) 142 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1197 1798 869 (parameters are ignored for SOCK_STREAM socke) 869 SB
2066 1798 39 (ts.) 39 SB
/fm 256 def
2 51 277 1795 B
1 F
n
615 1900 1486 (For datagram sockets, data is extracted from the first enqueued datagram, up to the size) 1486 SB
615 1950 1245 (of the buffer supplied.  If the datagram is larger than the buffer supplied, ) 1245 SB
1860 1950 205 (the buffer is) 205 SB
/fm 256 def
2 49 277 1947 B
1 F
n
615 2000 680 (filled with the first part of the message, ) 680 SB
1295 2000 366 (the excess data is lost) 366 SB
1661 2000 94 (, and ) 94 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1755 1997 206 (recvfrom\(\) ) 206 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1961 2000 117 (returns) 117 SB
/fm 256 def
2 50 277 1997 B
1 F
n
615 2051 545 (the error code WSAEMSGSIZE) 545 SB
1160 2051 11 (.) 11 SB
/fm 256 def
2 49 277 2048 B
1 F
n
615 2151 39 (If ) 39 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
654 2150 79 (from) 79 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
733 2151 1338 ( is non-zero, and the socket is of type SOCK_DGRAM, the network address of) 1338 SB
615 2203 1466 (the peer which sent the data is copied to the corresponding struct sockaddr.  The value) 1466 SB
615 2253 235 (pointed to by ) 235 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
850 2252 131 (fromlen) 131 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
981 2253 1133 ( is initialized to the size of this structure, and is modified on return) 1133 SB
615 2305 899 (to indicate the actual size of the address stored there.) 899 SB
615 2405 847 (If no incoming data is available at the socket, the ) 847 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1462 2402 195 (recvfrom\(\)) 195 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1657 2405 359 ( call waits for data to) 359 SB
615 2456 1449 (arrive unless the socket is non-blocking.  In this case a value of SOCKET_ERROR is) 1449 SB
615 2506 1114 (returned with the error code set to WSAEWOULDBLOCK.  The ) 1114 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1729 2503 99 (select) 99 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1828 2506 74 (\(\) or) 74 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2554 310 (WSAAsyncSelect) 310 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
925 2557 984 (\(\) calls may be used to determine when more data arrives.) 984 SB
615 2658 1350 (If the socket is of type SOCK_STREAM and the remote side has shut down the) 1350 SB
/fm 256 def
2 49 277 2655 B
1 F
n
615 2708 421 (connection gracefully, a ) 421 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1036 2705 78 (recv) 78 SB
1114 2705 89 (from) 89 SB
1203 2705 28 (\(\)) 28 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1231 2708 852 ( will complete immediately with 0 bytes received.) 852 SB
/fm 256 def
2 50 277 2705 B
1 F
n
615 2759 457 (If the connection has been ) 457 SB
1072 2759 91 (reset ) 91 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1163 2756 117 (recv\(\) ) 117 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1280 2759 764 (will fail with the error WSAECONNRESET.) 764 SB
/fm 256 def
2 50 277 2756 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 2859 96 (Flags) 96 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
711 2860 1307 ( may be used to influence the behavior of the function invocation beyond the) 1307 SB
615 2912 1450 (options specified for the associated socket.  That is, the semantics of this function are) 1450 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 51 51
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1831 117 228 (recvfrom ) 228 SB
2059 117 56 (44) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 270 707 (determined by the socket options and the ) 707 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1322 269 82 (flags) 82 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1404 270 677 ( parameter.  The latter is constructed by) 677 SB
615 322 590 (or-ing any of the following values:) 590 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
615 422 101 (Value) 101 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
716 422 209 (                   ) 209 SB
915 422 150 (Meaning) 150 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 472 216 (MSG_PEEK) 216 SB
915 472 1142 (Peek at the incoming data.  The data is copied into the buffer but is) 1142 SB
915 522 590 (not removed from the input queue.) 590 SB
615 622 199 (MSG_OOB) 199 SB
915 622 648 (Process out-of-band data \(See section ) 648 SB
1563 622 85 (2.2.3) 85 SB
1648 622 394 ( for a discussion of this) 394 SB
915 672 110 (topic.\)) 110 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 871 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 872 317 (If no error occurs, ) 317 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
932 869 195 (recvfrom\(\)) 195 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1127 872 953 ( returns the number of bytes received.  If the connection) 953 SB
615 923 1477 (has been closed, it returns 0.  Otherwise, a value of SOCKET_ERROR is returned, and) 1477 SB
615 973 834 (a specific error code may be retrieved by calling ) 834 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1449 970 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1823 973 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1073 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1074 426 (WSANOTINITIALISED) 426 SB
1215 1074 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 1071 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 1074 317 ( must occur before) 317 SB
1215 1125 252 (using this API.) 252 SB
615 1225 331 (WSAENETDOWN) 331 SB
1215 1225 878 (The Windows Sockets implementation has detected) 878 SB
1215 1275 648 (that the network subsystem has failed.) 648 SB
615 1375 254 (WSAEFAULT) 254 SB
1215 1375 77 (The ) 77 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1292 1374 131 (fromlen) 131 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1423 1375 462 ( argument was invalid: the ) 462 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1885 1374 79 (from) 79 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1964 1375 114 ( buffer) 114 SB
1215 1427 819 (was too small to accommodate the peer address.) 819 SB
615 1527 217 (WSAEINTR) 217 SB
1215 1527 625 (The \(blocking\) call was canceled via) 625 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1215 1574 492 (WSACancelBlockingCall\(\).) 492 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1678 374 (WSAEINPROGRESS) 374 SB
1215 1678 757 (A blocking Windows Sockets operation is in) 757 SB
1215 1728 153 (progress.) 153 SB
615 1828 249 (WSAEINVAL) 249 SB
1215 1828 621 (The socket has not been bound with ) 621 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1836 1825 109 (bind\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1945 1828 11 (.) 11 SB
615 1929 323 (WSAENOTCONN) 323 SB
1215 1929 799 (The socket is not connected \(SOCK_STREAM) 799 SB
1215 1979 100 (only\).) 100 SB
615 2079 316 (WSAENOTSOCK) 316 SB
1215 2079 510 (The descriptor is not a socket.) 510 SB
615 2179 357 (WSAEOPNOTSUPP) 357 SB
1215 2179 847 (MSG_OOB was specified, but the socket is not of) 847 SB
1215 2229 397 (type SOCK_STREAM.) 397 SB
615 2329 358 (WSAESHUTDOWN) 358 SB
1215 2329 861 (The socket has been shutdown; it is not possible to) 861 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1215 2376 195 (recvfrom\(\)) 195 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1410 2379 302 ( on a socket after ) 302 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1712 2376 201 (shutdown\(\)) 201 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1913 2379 158 ( has been) 158 SB
1215 2430 233 (invoked with ) 233 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1448 2429 70 (how) 70 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1518 2430 223 ( set to 0 or 2.) 223 SB
615 2532 417 (WSAEWOULDBLOCK) 417 SB
1215 2532 779 (The socket is marked as non-blocking and the) 779 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1215 2579 195 (recvfrom\(\)) 195 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1410 2582 403 ( operation would block.) 403 SB
615 2683 298 (WSAEMSGSIZE) 298 SB
1215 2683 869 (The datagram was too large to fit into the specified) 869 SB
/fm 256 def
2 49 277 2680 B
1 F
n
1215 2733 431 (buffer and was truncated.) 431 SB
/fm 256 def
2 49 277 2730 B
1 F
n
/fm 256 def
2 50 277 2780 B
1 F
n
615 2834 435 (WSAECONNABORTED) 435 SB
1215 2834 825 (The virtual circuit was aborted due to timeout or) 825 SB
/fm 256 def
2 49 277 2831 B
1 F
n
1215 2884 220 (other failure.) 220 SB
/fm 256 def
2 49 277 2881 B
1 F
n
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 52 52
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1831 117 228 (recvfrom ) 228 SB
2059 117 56 (45) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
/fm 256 def
2 49 277 267 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 320 366 (WSAECONNRESET) 366 SB
1215 320 810 (The virtual circuit was reset by the remote side.) 810 SB
/fm 256 def
2 49 277 317 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 469 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 467 106 (recv\(\)) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
721 470 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
743 467 109 (send\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
852 470 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
874 467 140 (socket\(\)) 140 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1014 470 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1036 467 338 (WSAAsyncSelect\(\)) 338 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1374 470 11 (.) 11 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 53 53
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1902 117 157 (select ) 157 SB
2059 117 56 (46) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 331 (4.1.18 select\(\)) 331 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 1118 (Determine the status of one or more sockets, waiting if necessary.) 1118 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 60 (int ) 60 SB
675 527 275 (PASCAL FAR ) 275 SB
950 527 184 (select \( int) 184 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1134 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1145 529 70 (nfds) 70 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1215 527 269 (, fd_set FAR * ) 269 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1484 529 126 (readfds) 126 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1610 527 269 (, fd_set FAR * ) 269 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1879 529 136 (writefds) 136 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
2015 527 11 (,) 11 SB
/fm 256 def
2 51 277 527 B
1 F
n
615 579 247 (fd_set FAR * ) 247 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
862 581 158 (exceptfds) 158 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1020 579 22 (, ) 22 SB
1042 579 104 (const ) 104 SB
1146 579 390 (struct timeval FAR * ) 390 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1536 581 138 (timeout ) 138 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1674 579 28 (\);) 28 SB
/fm 256 def
2 51 277 579 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 733 70 (nfds) 70 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 734 995 (This argument is ignored and included only for the sake of) 995 SB
915 786 238 (compatibility.) 238 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 885 126 (readfds) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 886 30 (A) 30 SB
945 886 376 (n optional pointer to a) 376 SB
1321 886 748 ( set of sockets to be checked for readability.) 748 SB
/fm 256 def
2 51 277 883 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 987 136 (writefds) 136 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 988 30 (A) 30 SB
945 988 376 (n optional pointer to a) 376 SB
1321 988 623 ( set of sockets to be checked for writ) 623 SB
1944 988 19 (a) 19 SB
1963 988 90 (bility) 90 SB
/fm 256 def
2 51 277 985 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1089 158 (exceptfds) 158 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1090 30 (A) 30 SB
945 1090 376 (n optional pointer to a) 376 SB
1321 1090 664 ( set of sockets to be checked for errors.) 664 SB
/fm 256 def
2 51 277 1087 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1191 127 (timeout) 127 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1192 407 (The maximum time for ) 407 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1322 1189 127 (select\(\)) 127 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1449 1192 527 ( to wait, or NULL for blocking) 527 SB
915 1244 171 (operation.) 171 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1343 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1344 1456 (This function is used to determine the status of one or more sockets.  For each socket,) 1456 SB
615 1395 1476 (the caller may request information on read, write or error status.  The set of sockets for) 1476 SB
615 1445 1452 (which a given status is requested is indicated by an fd_set structure.  Upon return, the) 1452 SB
615 1495 1389 (structure is updated to reflect the subset of these sockets which meet the specified) 1389 SB
615 1545 254 (condition, and ) 254 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
869 1542 127 (select\(\)) 127 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
996 1545 1077 ( returns the number of sockets meeting the conditions.  A set of) 1077 SB
615 1596 1498 (macros is provided for manipulating an fd_set.  These macros are compatible with those) 1498 SB
615 1646 1495 (used in the Berkeley software, but the underlying representation is completely different.) 1495 SB
615 1746 258 (The parameter ) 258 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
873 1745 126 (readfds) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
999 1746 1090 ( identifies those sockets which are to be checked for readability.) 1090 SB
615 1798 424 (If the socket is currently ) 424 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1039 1795 124 (listen\(\)) 124 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1163 1798 826 (ing, it will be marked as readable if an incoming) 826 SB
615 1849 828 (connection request has been received, so that an ) 828 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1443 1846 143 (accept\(\)) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1586 1849 447 ( is guaranteed to complete) 447 SB
615 1900 1489 (without blocking.  For other sockets, readability means that queued data is available for) 1489 SB
615 1950 127 (reading) 127 SB
742 1950 1337 ( or, for sockets of type SOCK_STREAM, that the virtual socket corresponding) 1337 SB
/fm 256 def
2 49 277 1947 B
1 F
n
615 2000 492 (to the socket has been closed) 492 SB
1107 2000 175 (, so that a ) 175 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1282 1997 106 (recv\(\)) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1388 2000 57 ( or ) 57 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1445 1997 195 (recvfrom\(\)) 195 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1640 2000 447 ( is guaranteed to complete) 447 SB
/fm 256 def
2 50 277 1997 B
1 F
n
615 2051 321 (without blocking.  ) 321 SB
936 2051 847 (If the virtual circuit was closed gracefully, then a ) 847 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1783 2048 117 (recv\(\) ) 117 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1900 2051 178 (will return) 178 SB
/fm 256 def
2 50 277 2048 B
1 F
n
615 2102 1172 (immediately with 0 bytes read; if the virtual circuit was reset, then a ) 1172 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1787 2099 117 (recv\(\) ) 117 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1904 2102 66 (will) 66 SB
/fm 256 def
2 50 277 2099 B
1 F
n
615 2153 1112 (complete immediately with the error code WSAECONNRESET. ) 1112 SB
1727 2153 350 (The presence of out-) 350 SB
/fm 256 def
2 49 277 2150 B
1 F
n
615 2203 1443 (of-band data will be checked if the socket option SO_OOBINLINE has been enabled) 1443 SB
615 2253 79 (\(see ) 79 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
694 2250 214 (setsockopt\(\)) 214 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
908 2253 25 (\).) 25 SB
615 2354 258 (The parameter ) 258 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
873 2353 136 (writefds) 136 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1009 2354 965 ( identifies those sockets which are to be checked for writ) 965 SB
1974 2354 19 (a) 19 SB
1993 2354 101 (bility.) 101 SB
/fm 256 def
2 51 277 2351 B
1 F
n
615 2406 227 (If a socket is ) 227 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
842 2403 166 (connect\(\)) 166 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1008 2406 408 (ing \(non-blocking\), writ) 408 SB
1416 2406 19 (a) 19 SB
1435 2406 544 (bility means that the connection) 544 SB
/fm 256 def
2 50 277 2403 B
1 F
n
615 2457 244 (establishment ) 244 SB
859 2457 206 (successfully) 206 SB
1065 2457 167 ( complete) 167 SB
1232 2457 21 (d) 21 SB
1253 2457 135 (.  If the ) 135 SB
1388 2457 502 (socket is not in the process of) 502 SB
/fm 256 def
2 49 277 2454 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2504 166 (connect\(\)) 166 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
781 2507 54 (ing) 54 SB
835 2507 90 (, writ) 90 SB
925 2507 19 (a) 19 SB
944 2507 325 (bility means that a ) 325 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1269 2504 109 (send\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1378 2507 57 ( or ) 57 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1435 2504 144 (sendto\(\)) 144 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1579 2507 384 ( will complete without) 384 SB
/fm 256 def
2 50 277 2504 B
1 F
n
615 2558 1385 (blocking.  [It is not specified how long this guarantee can be assumed to be valid,) 1385 SB
615 2608 767 (particularly in a multithreaded environment.]) 767 SB
615 2708 258 (The parameter ) 258 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
873 2707 158 (exceptfds) 158 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1031 2708 949 ( identifies those sockets which are to be checked for the) 949 SB
615 2760 1491 (presence of out-of-band data or any exceptional error conditions.  Note that out-of-band) 1491 SB
615 2810 1465 (data will only be reported in this way if the option SO_OOBINLINE is FALSE.  For a) 1465 SB
615 2860 1445 (SOCK_STREAM, the breaking of the connection by the peer or due to KEEPALIVE) 1445 SB
615 2910 1497 (failure will be indicated as an exception.  This specification does not define which other) 1497 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 54 54
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1902 117 157 (select ) 157 SB
2059 117 56 (47) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 270 394 (errors will be included.) 394 SB
1009 270 249 (  If a socket is ) 249 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1258 267 166 (connect\(\)) 166 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1424 270 560 (ing \(non-blocking\), failure of the) 560 SB
/fm 256 def
2 50 277 267 B
1 F
n
615 321 532 (connect attempt is indicated in ) 532 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1147 320 169 (exceptfds.) 169 SB
/fm 256 def
2 51 277 318 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 423 129 (Any of ) 129 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
744 422 126 (readfds) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
870 423 22 (, ) 22 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
892 422 136 (writefds) 136 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1028 423 68 (, or ) 68 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1096 422 158 (exceptfds) 158 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1254 423 804 ( may be given as NULL if no descriptors are of) 804 SB
615 475 136 (interest.) 136 SB
615 575 723 (Four macros are defined in the header file ) 723 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1338 572 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1516 575 538 ( for manipulating the descriptor) 538 SB
615 626 1458 (sets.  The variable FD_SETSIZE determines the maximum number of descriptors in a) 1458 SB
615 676 1429 (set.  \(The default value of FD_SETSIZE is 64, which may be modified by #defining) 1429 SB
615 726 845 (FD_SETSIZE to another value before #including ) 845 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1460 723 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1638 726 427 (.\)  Internally, an fd_set is) 427 SB
615 777 1473 (represented as an array of SOCKETs; the last valid entry is followed by an element set) 1473 SB
615 827 709 (to INVALID_SOCKET.  The macros are:) 709 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 924 179 (FD_CLR\() 179 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
794 926 16 (s) 16 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
810 924 43 (, *) 43 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
853 926 47 (set) 47 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
900 924 14 (\)) 14 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1065 927 411 (Removes the descriptor ) 411 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1476 926 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1492 927 104 ( from ) 104 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1596 926 47 (set) 47 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1643 927 11 (.) 11 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1026 209 (FD_ISSET\() 209 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
824 1028 16 (s) 16 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
840 1026 43 (, *) 43 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
883 1028 47 (set) 47 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
930 1026 14 (\)) 14 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1065 1029 193 (Nonzero if ) 193 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1258 1028 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1274 1029 339 ( is a member of the ) 339 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1613 1028 47 (set) 47 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1660 1029 281 (, zero otherwise.) 281 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1128 170 (FD_SET\() 170 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
785 1130 16 (s) 16 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
801 1128 43 (, *) 43 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
844 1130 47 (set) 47 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
891 1128 14 (\)) 14 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1065 1131 279 (Adds descriptor ) 279 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1344 1130 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1360 1131 55 ( to ) 55 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1415 1130 47 (set) 47 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1462 1131 11 (.) 11 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1230 231 (FD_ZERO\(*) 231 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
846 1232 47 (set) 47 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
893 1230 14 (\)) 14 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1065 1233 242 (Initializes the ) 242 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1307 1232 47 (set) 47 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1354 1233 299 ( to the NULL set.) 299 SB
615 1335 258 (The parameter ) 258 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
873 1334 127 (timeout) 127 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1000 1335 390 ( controls how long the ) 390 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1390 1332 127 (select\(\)) 127 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1517 1335 449 ( may take to complete.  If ) 449 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1966 1334 127 (timeout) 127 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1387 288 (is a null pointer, ) 288 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
903 1384 127 (select\(\)) 127 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1030 1387 1034 ( will block indefinitely until at least one descriptor meets the) 1034 SB
615 1438 513 (specified criteria.  Otherwise, ) 513 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1128 1437 127 (timeout) 127 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1255 1438 768 ( points to a struct timeval which specifies the) 768 SB
615 1490 345 (maximum time that ) 345 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
960 1487 127 (select\(\)) 127 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1087 1490 1020 ( should wait before returning.  If the timeval is initialized to) 1020 SB
615 1541 126 ({0, 0}, ) 126 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
741 1538 127 (select\(\)) 127 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
868 1541 1188 ( will return immediately; this is used to "poll" the state of the selected) 1188 SB
615 1592 135 (sockets.) 135 SB
750 1592 477 (  If this is the case, then the ) 477 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1227 1589 138 (select\(\) ) 138 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1365 1592 652 (call is considered nonblocking and the) 652 SB
/fm 256 def
2 50 277 1589 B
1 F
n
615 1643 1412 (standard assumptions for nonblocking calls apply.  For example, the blocking hook) 1412 SB
/fm 256 def
2 49 277 1640 B
1 F
n
615 1693 1314 (must not be called, and the Windows Sockets implementation must not yield.) 1314 SB
/fm 256 def
2 49 277 1690 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1792 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1790 127 (select\(\)) 127 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
742 1793 1297 ( returns the total number of descriptors which are ready and contained in the) 1297 SB
615 1844 760 (fd_set structures, 0 if the time limit expired, ) 760 SB
1375 1844 721 (or SOCKET_ERROR if an error occurred.) 721 SB
/fm 256 def
2 49 277 1841 B
1 F
n
615 1894 702 (If the return value is SOCKET_ERROR, ) 702 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1317 1891 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1691 1894 408 ( may be used to retrieve) 408 SB
/fm 256 def
2 50 277 1891 B
1 F
n
615 1945 357 (a specific error code.) 357 SB
/fm 256 def
2 49 277 1942 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2044 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2045 426 (WSANOTINITIALISED) 426 SB
1215 2045 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 2042 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 2045 317 ( must occur before) 317 SB
1215 2096 252 (using this API.) 252 SB
615 2196 331 (WSAENETDOWN) 331 SB
1215 2196 878 (The Windows Sockets implementation has detected) 878 SB
1215 2246 648 (that the network subsystem has failed.) 648 SB
615 2346 249 (WSAEINVAL) 249 SB
1215 2346 77 (The ) 77 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1292 2345 127 (timeout) 127 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1419 2346 314 ( value is not valid.) 314 SB
615 2448 217 (WSAEINTR) 217 SB
1215 2448 625 (The \(blocking\) call was canceled via) 625 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1215 2495 492 (WSACancelBlockingCall\(\).) 492 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2599 374 (WSAEINPROGRESS) 374 SB
1215 2599 757 (A blocking Windows Sockets operation is in) 757 SB
1215 2649 153 (progress.) 153 SB
615 2749 316 (WSAENOTSOCK) 316 SB
1215 2749 887 (One of the descriptor sets contains an entry which is) 887 SB
1215 2799 214 (not a socket.) 214 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2898 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2896 338 (WSAAsyncSelect\(\)) 338 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
953 2899 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
975 2896 143 (accept\(\)) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1118 2899 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1140 2896 166 (connect\(\)) 166 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1306 2899 11 (,) 11 SB
1317 2899 11 ( ) 11 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1328 2896 106 (recv\(\)) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1434 2899 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1456 2896 195 (recvfrom\(\)) 195 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1651 2899 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1673 2896 109 (send\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1782 2899 11 (.) 11 SB
/fm 256 def
2 50 277 2896 B
1 F
n
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 55 55
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1927 117 132 (send ) 132 SB
2059 117 56 (48) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 306 (4.1.19 send\(\)) 306 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 562 (Send data on a connected socket.) 562 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 60 (int ) 60 SB
675 527 275 (PASCAL FAR ) 275 SB
950 527 292 (send \( SOCKET) 292 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1242 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1253 529 16 (s) 16 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1269 527 22 (, ) 22 SB
1291 527 104 (const ) 104 SB
1395 527 222 (char FAR * ) 222 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1617 529 54 (buf) 54 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1671 527 71 (, int) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1742 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1753 529 52 (len) 52 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1805 527 71 (, int) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1876 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1887 529 93 (flags ) 93 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1980 527 28 (\);) 28 SB
/fm 256 def
2 51 277 527 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 681 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 682 750 (A descriptor identifying a connected socket.) 750 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 783 54 (buf) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 784 787 (A buffer containing the data to be transmitted.) 787 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 885 52 (len) 52 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 886 429 (The length of the data in ) 429 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1344 885 54 (buf) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1398 886 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 987 82 (flags) 82 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 988 746 (Specifies the way in which the call is made.) 746 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1089 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1087 81 (send) 81 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
696 1090 1367 (\(\) is used on connected datagram or stream sockets and is used to write outgoing) 1367 SB
615 1141 1492 (data on a socket.  For datagram sockets, care must be taken not to exceed the maximum) 1492 SB
615 1191 1072 (IP packet size of the underlying subnets, which is given by the ) 1072 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1687 1190 210 (iMaxUdpDg) 210 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1897 1191 190 ( element in) 190 SB
615 1243 611 (the WSAData structure returned by ) 611 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1226 1240 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1486 1243 523 (.  If the data is too long to pass) 523 SB
615 1294 1470 (atomically through the underlying protocol the error WSAEMSGSIZE is returned, and) 1470 SB
/fm 256 def
2 49 277 1291 B
1 F
n
615 1344 53 (no ) 53 SB
668 1344 323 (data is transmitted.) 323 SB
/fm 256 def
2 49 277 1341 B
1 F
n
615 1444 693 (Note that the successful completion of a ) 693 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1308 1441 109 (send\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1417 1444 595 ( does not indicate that the data was) 595 SB
615 1495 386 (successfully delivered.) 386 SB
615 1595 1345 (If no buffer space is available within the transport system to hold the data to be) 1345 SB
615 1645 213 (transmitted, ) 213 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
828 1642 81 (send) 81 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
909 1645 1165 (\(\) will block unless the socket has been placed in a non-blocking I/O) 1165 SB
615 1696 1488 (mode.  On non-blocking SOCK_STREAM sockets, the number of bytes written may be) 1488 SB
615 1746 1462 (between 1 and the requested length, depending on buffer availability on both the local) 1462 SB
615 1796 401 (and foreign hosts.  The ) 401 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1016 1793 99 (select) 99 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1115 1796 918 (\(\) call may be used to determine when it is possible to) 918 SB
615 1847 268 (send more data.) 268 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1946 96 (Flags) 96 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
711 1947 1307 ( may be used to influence the behavior of the function invocation beyond the) 1307 SB
615 1999 1450 (options specified for the associated socket.  That is, the semantics of this function are) 1450 SB
615 2049 707 (determined by the socket options and the ) 707 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1322 2048 82 (flags) 82 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1404 2049 677 ( parameter.  The latter is constructed by) 677 SB
615 2101 590 (or-ing any of the following values:) 590 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
615 2201 101 (Value) 101 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
716 2201 209 (                   ) 209 SB
915 2201 150 (Meaning) 150 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2251 367 (MSG_DONTROUTE) 367 SB
915 2301 1157 (Specifies that the data should not be subject to routing.  A Windows) 1157 SB
915 2351 1021 (Sockets supplier may choose to ignore this flag; see also the) 1021 SB
915 2401 930 (discussion of the SO_DONTROUTE option in section ) 930 SB
1845 2401 53 (2.4) 53 SB
1898 2401 11 (.) 11 SB
615 2501 199 (MSG_OOB) 199 SB
915 2501 1087 (Send out-of-band data \(SOCK_STREAM only; see also section ) 1087 SB
2002 2501 85 (2.2.3) 85 SB
2087 2501 14 (\)) 14 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2650 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2651 317 (If no error occurs, ) 317 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
932 2648 109 (send\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1041 2651 1002 ( returns the total number of characters sent.  \(Note that this) 1002 SB
615 2702 716 (may be less than the number indicated by ) 716 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1331 2701 52 (len) 52 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1383 2702 399 (.\) Otherwise, a value of) 399 SB
615 2754 1432 (SOCKET_ERROR is returned, and a specific error code may be retrieved by calling) 1432 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2801 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
989 2804 11 (.) 11 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 56 56
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1927 117 132 (send ) 132 SB
2059 117 56 (49) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 269 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 270 426 (WSANOTINITIALISED) 426 SB
1215 270 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 267 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 270 317 ( must occur before) 317 SB
1215 321 252 (using this API.) 252 SB
615 421 331 (WSAENETDOWN) 331 SB
1215 421 878 (The Windows Sockets implementation has detected) 878 SB
1215 471 648 (that the network subsystem has failed.) 648 SB
615 571 254 (WSAEACCES) 254 SB
1215 571 894 (The requested address is a broadcast address, but the) 894 SB
1215 621 480 (appropriate flag was not set.) 480 SB
615 721 217 (WSAEINTR) 217 SB
1215 721 625 (The \(blocking\) call was canceled via) 625 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1215 768 492 (WSACancelBlockingCall\(\).) 492 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 872 374 (WSAEINPROGRESS) 374 SB
1215 872 757 (A blocking Windows Sockets operation is in) 757 SB
1215 922 153 (progress.) 153 SB
615 1022 254 (WSAEFAULT) 254 SB
1215 1022 77 (The ) 77 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1292 1021 65 (buf ) 65 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1357 1022 701 (argument is not in a valid part of the user) 701 SB
1215 1074 242 (address space.) 242 SB
615 1174 330 (WSAENETRESET) 330 SB
1215 1174 878 (The connection must be reset because the Windows) 878 SB
1215 1224 604 (Sockets implementation dropped it.) 604 SB
615 1324 283 (WSAENOBUFS) 283 SB
1215 1324 816 (The Windows Sockets implementation reports a) 816 SB
1215 1374 278 (buffer deadlock.) 278 SB
615 1474 323 (WSAENOTCONN) 323 SB
1215 1474 483 (The socket is not connected.) 483 SB
615 1574 316 (WSAENOTSOCK) 316 SB
1215 1574 510 (The descriptor is not a socket.) 510 SB
615 1674 357 (WSAEOPNOTSUPP) 357 SB
1215 1674 847 (MSG_OOB was specified, but the socket is not of) 847 SB
1215 1724 397 (type SOCK_STREAM.) 397 SB
615 1824 358 (WSAESHUTDOWN) 358 SB
1215 1824 861 (The socket has been shutdown; it is not possible to) 861 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1215 1871 109 (send\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1324 1874 302 ( on a socket after ) 302 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1626 1871 201 (shutdown\(\)) 201 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1827 1874 158 ( has been) 158 SB
1215 1925 528 (invoked with how set to 1 or 2.) 528 SB
615 2025 417 (WSAEWOULDBLOCK) 417 SB
1215 2025 779 (The socket is marked as non-blocking and the) 779 SB
1215 2075 565 (requested operation would block.) 565 SB
615 2175 298 (WSAEMSGSIZE) 298 SB
1215 2175 798 (The socket is of type SOCK_DGRAM, and the) 798 SB
1215 2225 867 (datagram is larger than the maximum supported by) 867 SB
1215 2275 655 (the Windows Sockets implementation.) 655 SB
615 2375 249 (WSAEINVAL) 249 SB
1215 2375 621 (The socket has not been bound with ) 621 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1836 2372 120 (bind\(\).) 120 SB
/fm 256 def
2 50 277 2372 B
1 F
n
/fm 256 def
2 50 277 2423 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2477 435 (WSAECONNABORTED) 435 SB
1215 2477 395 (The virtual circuit was ) 395 SB
1610 2477 127 (aborted) 127 SB
1737 2477 303 ( due to timeout or) 303 SB
/fm 256 def
2 49 277 2474 B
1 F
n
1215 2527 220 (other failure.) 220 SB
/fm 256 def
2 49 277 2524 B
1 F
n
/fm 256 def
2 49 277 2574 B
1 F
n
615 2627 366 (WSAECONNRESET) 366 SB
1215 2627 395 (The virtual circuit was ) 395 SB
1610 2627 133 (reset by) 133 SB
1743 2627 282 ( the remote side.) 282 SB
/fm 256 def
2 49 277 2624 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2776 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2774 106 (recv\(\)) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
721 2777 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
743 2774 195 (recvfrom\(\)) 195 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
938 2777 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
960 2774 140 (socket\(\)) 140 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1100 2777 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1122 2774 144 (sendto\(\)) 144 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1266 2777 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1288 2774 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1548 2777 11 (.) 11 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 57 57
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1879 117 180 (sendto ) 180 SB
2059 117 56 (50) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 354 (4.1.20 sendto\(\)) 354 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 591 (Send data to a specific destination.) 591 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 60 (int ) 60 SB
675 527 275 (PASCAL FAR ) 275 SB
950 527 327 (sendto \( SOCKET) 327 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1277 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1288 529 16 (s) 16 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1304 527 22 (, ) 22 SB
1326 527 104 (const ) 104 SB
1430 527 222 (char FAR * ) 222 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1652 529 54 (buf) 54 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1706 527 71 (, int) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1777 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1788 529 52 (len) 52 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1840 527 71 (, int) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1911 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1922 529 82 (flags) 82 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
2004 527 11 (,) 11 SB
/fm 256 def
2 51 277 527 B
1 F
n
615 579 104 (const ) 104 SB
719 579 421 (struct sockaddr FAR * ) 421 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1140 581 33 (to) 33 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1173 579 71 (, int) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1244 582 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1255 581 96 (tolen ) 96 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1351 579 28 (\);) 28 SB
/fm 256 def
2 51 277 579 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 733 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 734 567 (A descriptor identifying a socket.) 567 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 835 54 (buf) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 836 787 (A buffer containing the data to be transmitted.) 787 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 937 52 (len) 52 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 938 429 (The length of the data in ) 429 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1344 937 54 (buf) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1398 938 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1039 82 (flags) 82 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1040 746 (Specifies the way in which the call is made.) 746 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1141 33 (to) 33 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1142 30 (A) 30 SB
945 1142 171 (n optional) 171 SB
1116 1142 722 ( pointer to the address of the target socket.) 722 SB
/fm 256 def
2 51 277 1139 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1243 85 (tolen) 85 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1244 444 (The size of the address in ) 444 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1359 1243 33 (to) 33 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1392 1244 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1345 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1343 116 (sendto) 116 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
731 1346 1349 (\(\) is used on datagram or stream sockets and is used to write outgoing data on a) 1349 SB
615 1397 1497 (socket.  For datagram sockets, care must be taken not to exceed the maximum IP packet) 1497 SB
615 1447 902 (size of the underlying subnets, which is given by the ) 902 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1517 1446 210 (iMaxUdpDg) 210 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1727 1447 253 ( element in the) 253 SB
615 1499 548 (WSAData structure returned by ) 548 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1163 1496 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1423 1499 523 (.  If the data is too long to pass) 523 SB
615 1550 1470 (atomically through the underlying protocol the error WSAEMSGSIZE is returned, and) 1470 SB
/fm 256 def
2 49 277 1547 B
1 F
n
615 1600 53 (no ) 53 SB
668 1600 323 (data is transmitted.) 323 SB
/fm 256 def
2 49 277 1597 B
1 F
n
615 1700 693 (Note that the successful completion of a ) 693 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1308 1697 144 (sendto\(\)) 144 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1452 1700 595 ( does not indicate that the data was) 595 SB
615 1751 386 (successfully delivered.) 386 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1848 144 (sendto\(\)) 144 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
759 1851 1339 ( is normally used on a SOCK_DGRAM socket to send a datagram to a specific) 1339 SB
615 1902 493 (peer socket identified by the ) 493 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1108 1901 33 (to) 33 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1141 1902 306 ( parameter.  On a ) 306 SB
1447 1902 302 (SOCK_STREAM) 302 SB
1749 1902 204 ( socket, the ) 204 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1953 1901 33 (to) 33 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1986 1902 11 ( ) 11 SB
1997 1902 61 (and) 61 SB
/fm 256 def
2 51 277 1899 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1953 96 (tolen ) 96 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
711 1954 675 (parameters are ignored; in this case the ) 675 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1386 1951 144 (sendto\(\)) 144 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1530 1954 282 ( is equivalent to ) 282 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1812 1951 81 (send) 81 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1893 1954 39 (\(\).) 39 SB
/fm 256 def
2 51 277 1951 B
1 F
n
615 2056 1162 (To send a broadcast \(on a SOCK_DGRAM only\), the address in the ) 1162 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1777 2055 33 (to) 33 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1810 2056 304 ( parameter should) 304 SB
615 2108 1368 (be constructed using the special IP address INADDR_BROADCAST \(defined in) 1368 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2155 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
793 2158 1250 (\) together with the intended port number.  It is generally inadvisable for a) 1250 SB
615 2209 1499 (broadcast datagram to exceed the size at which fragmentation may occur, which implies) 1499 SB
615 2259 1468 (that the data portion of the datagram \(excluding headers\) should not exceed 512 bytes.) 1468 SB
615 2359 1345 (If no buffer space is available within the transport system to hold the data to be) 1345 SB
615 2409 213 (transmitted, ) 213 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
828 2406 116 (sendto) 116 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
944 2409 1165 (\(\) will block unless the socket has been placed in a non-blocking I/O) 1165 SB
615 2460 1488 (mode.  On non-blocking SOCK_STREAM sockets, the number of bytes written may be) 1488 SB
615 2510 1462 (between 1 and the requested length, depending on buffer availability on both the local) 1462 SB
615 2560 401 (and foreign hosts.  The ) 401 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1016 2557 99 (select) 99 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1115 2560 918 (\(\) call may be used to determine when it is possible to) 918 SB
615 2611 268 (send more data.) 268 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 2710 96 (Flags) 96 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
711 2711 1307 ( may be used to influence the behavior of the function invocation beyond the) 1307 SB
615 2763 1450 (options specified for the associated socket.  That is, the semantics of this function are) 1450 SB
615 2813 707 (determined by the socket options and the ) 707 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1322 2812 82 (flags) 82 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1404 2813 677 ( parameter.  The latter is constructed by) 677 SB
615 2865 590 (or-ing any of the following values:) 590 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 58 58
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1879 117 180 (sendto ) 180 SB
2059 117 56 (51) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
615 270 101 (Value) 101 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
716 270 209 (                   ) 209 SB
915 270 150 (Meaning) 150 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 320 367 (MSG_DONTROUTE) 367 SB
915 370 1157 (Specifies that the data should not be subject to routing.  A Windows) 1157 SB
915 420 1021 (Sockets supplier may choose to ignore this flag; see also the) 1021 SB
915 470 930 (discussion of the SO_DONTROUTE option in section ) 930 SB
1845 470 11 (.) 11 SB
615 570 199 (MSG_OOB) 199 SB
915 570 1087 (Send out-of-band data \(SOCK_STREAM only; see also section ) 1087 SB
2002 570 14 (\)) 14 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 719 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 720 317 (If no error occurs, ) 317 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
932 717 144 (sendto\(\)) 144 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1076 720 1002 ( returns the total number of characters sent.  \(Note that this) 1002 SB
615 771 716 (may be less than the number indicated by ) 716 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1331 770 52 (len) 52 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1383 771 399 (.\) Otherwise, a value of) 399 SB
615 823 1432 (SOCKET_ERROR is returned, and a specific error code may be retrieved by calling) 1432 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 870 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
989 873 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 973 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 974 426 (WSANOTINITIALISED) 426 SB
1215 974 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 971 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 974 317 ( must occur before) 317 SB
1215 1025 252 (using this API.) 252 SB
615 1125 331 (WSAENETDOWN) 331 SB
1215 1125 878 (The Windows Sockets implementation has detected) 878 SB
1215 1175 648 (that the network subsystem has failed.) 648 SB
615 1275 254 (WSAEACCES) 254 SB
1215 1275 894 (The requested address is a broadcast address, but the) 894 SB
1215 1325 480 (appropriate flag was not set.) 480 SB
615 1425 217 (WSAEINTR) 217 SB
1215 1425 625 (The \(blocking\) call was canceled via) 625 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1215 1472 492 (WSACancelBlockingCall\(\).) 492 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1576 374 (WSAEINPROGRESS) 374 SB
1215 1576 757 (A blocking Windows Sockets operation is in) 757 SB
1215 1626 153 (progress.) 153 SB
615 1726 254 (WSAEFAULT) 254 SB
1215 1726 77 (The ) 77 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1292 1725 65 (buf ) 65 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1357 1726 46 (or ) 46 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1403 1725 44 (to ) 44 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1447 1726 581 (parameters are not part of the user) 581 SB
1215 1778 253 (address space, ) 253 SB
1468 1778 109 (or the ) 109 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1577 1777 44 (to ) 44 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1621 1778 455 (argument is too small \(less) 455 SB
/fm 256 def
2 51 277 1775 B
1 F
n
1215 1830 571 (than the sizeof a struct sockaddr\).) 571 SB
/fm 256 def
2 49 277 1827 B
1 F
n
615 1930 330 (WSAENETRESET) 330 SB
1215 1930 878 (The connection must be reset because the Windows) 878 SB
1215 1980 604 (Sockets implementation dropped it.) 604 SB
615 2080 283 (WSAENOBUFS) 283 SB
1215 2080 816 (The Windows Sockets implementation reports a) 816 SB
1215 2130 278 (buffer deadlock.) 278 SB
615 2230 323 (WSAENOTCONN) 323 SB
1215 2230 799 (The socket is not connected \(SOCK_STREAM) 799 SB
1215 2280 100 (only\).) 100 SB
615 2380 316 (WSAENOTSOCK) 316 SB
1215 2380 510 (The descriptor is not a socket.) 510 SB
615 2480 357 (WSAEOPNOTSUPP) 357 SB
1215 2480 847 (MSG_OOB was specified, but the socket is not of) 847 SB
1215 2530 397 (type SOCK_STREAM.) 397 SB
615 2630 358 (WSAESHUTDOWN) 358 SB
1215 2630 861 (The socket has been shutdown; it is not possible to) 861 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1215 2677 144 (sendto\(\)) 144 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1359 2680 302 ( on a socket after ) 302 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1661 2677 201 (shutdown\(\)) 201 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1862 2680 158 ( has been) 158 SB
1215 2731 528 (invoked with how set to 1 or 2.) 528 SB
615 2831 417 (WSAEWOULDBLOCK) 417 SB
1215 2831 779 (The socket is marked as non-blocking and the) 779 SB
1215 2881 565 (requested operation would block.) 565 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 59 59
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1879 117 180 (sendto ) 180 SB
2059 117 56 (52) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 320 298 (WSAEMSGSIZE) 298 SB
1215 320 798 (The socket is of type SOCK_DGRAM, and the) 798 SB
1215 370 867 (datagram is larger than the maximum supported by) 867 SB
1215 420 655 (the Windows Sockets implementation.) 655 SB
615 520 435 (WSAECONNABORTED) 435 SB
1215 520 825 (The virtual circuit was aborted due to timeout or) 825 SB
/fm 256 def
2 49 277 517 B
1 F
n
1215 570 220 (other failure.) 220 SB
/fm 256 def
2 49 277 567 B
1 F
n
/fm 256 def
2 49 277 617 B
1 F
n
615 670 366 (WSAECONNRESET) 366 SB
1215 670 463 (The virtual circuit was rese) 463 SB
1678 670 23 (t ) 23 SB
1701 670 324 (by the remote side.) 324 SB
/fm 256 def
2 49 277 667 B
1 F
n
/fm 256 def
2 49 277 717 B
1 F
n
615 770 453 (WSAEADDRNOTAVAIL) 453 SB
1215 770 77 (The ) 77 SB
1292 770 809 (specified address is not available from the local) 809 SB
/fm 256 def
2 49 277 767 B
1 F
n
1215 820 155 (machine.) 155 SB
/fm 256 def
2 49 277 817 B
1 F
n
/fm 256 def
2 49 277 867 B
1 F
n
615 920 415 (WSAEAFNOSUPPORT) 415 SB
1215 920 828 (Addresses in the specified family cannot be used) 828 SB
/fm 256 def
2 49 277 917 B
1 F
n
1215 970 277 (with this socket.) 277 SB
/fm 256 def
2 49 277 967 B
1 F
n
/fm 256 def
2 49 277 1017 B
1 F
n
615 1070 426 (WSAEDESTADDRREQ) 426 SB
1215 1070 566 (A destination address is required.) 566 SB
/fm 256 def
2 49 277 1067 B
1 F
n
/fm 256 def
2 49 277 1117 B
1 F
n
615 1170 403 (WSAENETUNREACH) 403 SB
1215 1170 859 (The network can't be reached from this host at this) 859 SB
/fm 256 def
2 49 277 1167 B
1 F
n
1215 1220 87 (time.) 87 SB
/fm 256 def
2 49 277 1217 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1319 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1317 106 (recv\(\)) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
721 1320 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
743 1317 195 (recvfrom\(\)) 195 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
938 1320 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
960 1317 140 (socket\(\)) 140 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1100 1320 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1122 1317 109 (send\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1231 1320 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1253 1317 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1513 1320 11 (.) 11 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 60 60
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1778 117 281 (setsockopt ) 281 SB
2059 117 56 (53) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 455 (4.1.21 setsockopt\(\)) 455 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 333 (Set a socket option.) 333 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 60 (int ) 60 SB
675 527 275 (PASCAL FAR ) 275 SB
950 527 397 (setsockopt \( SOCKET) 397 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1347 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1358 529 16 (s) 16 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1374 527 71 (, int) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1445 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1456 529 81 (level) 81 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1537 527 71 (, int) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1608 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1619 529 145 (optname) 145 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1764 527 11 (,) 11 SB
/fm 256 def
2 51 277 527 B
1 F
n
615 579 104 (const ) 104 SB
719 579 222 (char FAR * ) 222 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
941 581 106 (optval) 106 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1047 579 71 (, int) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1118 582 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1129 581 117 (optlen ) 117 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1246 579 28 (\);) 28 SB
/fm 256 def
2 51 277 579 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 733 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 734 567 (A descriptor identifying a socket.) 567 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 835 81 (level) 81 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 836 1024 (The level at which the option is defined; the only supported ) 1024 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1939 835 81 (level) 81 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2020 836 79 (s are) 79 SB
/fm 256 def
2 51 277 833 B
1 F
n
915 888 263 (SOL_SOCKET) 263 SB
1178 888 355 ( and IPPROTO_TCP) 355 SB
1533 888 11 (.) 11 SB
/fm 256 def
2 49 277 885 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 987 145 (optname) 145 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 988 847 (The socket option for which the value is to be set.) 847 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1089 106 (optval) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1090 1160 (A pointer to the buffer in which the value for the requested option is) 1160 SB
915 1142 154 (supplied.) 154 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1241 106 (optlen) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1242 26 (T) 26 SB
941 1242 237 (he size of the ) 237 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1178 1241 106 (optval) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1284 1242 125 ( buffer.) 125 SB
/fm 256 def
2 51 277 1239 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1343 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1341 214 (setsockopt\(\)) 214 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
829 1344 1237 ( sets the current value for a socket option associated with a socket of any) 1237 SB
615 1395 1331 (type, in any state.  Although options may exist at multiple protocol levels, this) 1331 SB
615 1445 1443 (specification only defines options that exist at the uppermost "socket'' level.  Options) 1443 SB
615 1495 1467 (affect socket operations, such as whether expedited data is received in the normal data) 1467 SB
615 1545 1146 (stream, whether broadcast messages may be sent on the socket, etc.) 1146 SB
615 1645 1468 (There are two types of socket options: Boolean options that enable or disable a feature) 1468 SB
615 1695 1377 (or behavior, and options which require an integer value or structure.  To enable a) 1377 SB
615 1745 282 (Boolean option, ) 282 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
897 1744 106 (optval) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1003 1745 868 ( points to a nonzero integer.  To disable the option ) 868 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1871 1744 106 (optval) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1977 1745 114 ( points) 114 SB
615 1797 477 (to an integer equal to zero.  ) 477 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1092 1796 106 (optlen) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1198 1797 864 ( should be equal to sizeof\(int\) for Boolean options.) 864 SB
615 1849 313 (For other options, ) 313 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
928 1848 106 (optval) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1034 1849 1029 ( points to the an integer or structure that contains the desired) 1029 SB
615 1901 428 (value for the option, and ) 428 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1043 1900 106 (optlen) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1149 1901 673 ( is the length of the integer or structure.) 673 SB
615 2003 1437 (SO_LINGER controls the action taken when unsent data is queued on a socket and a) 1437 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2050 227 (closesocket\(\)) 227 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
842 2053 331 ( is performed.  See ) 331 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1173 2050 227 (closesocket\(\)) 227 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1400 2053 700 ( for a description of the way in which the) 700 SB
615 2104 774 (SO_LINGER settings affect the semantics of ) 774 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1389 2101 227 (closesocket\(\)) 227 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1616 2104 436 (.  The application sets the) 436 SB
615 2155 523 (desired behavior by creating a ) 523 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1138 2154 208 (struct linger) 208 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1346 2155 323 ( \(pointed to by the ) 323 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1669 2154 106 (optval) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1775 2155 334 ( argument\) with the) 334 SB
615 2207 338 (following elements:) 338 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 2304 375 (struct linger {) 375 SB
765 2349 75 (int) 75 SB
915 2349 200 (l_onoff;) 200 SB
765 2394 75 (int) 75 SB
915 2394 225 (l_linger;) 225 SB
615 2439 25 (}) 25 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2537 874 (To enable SO_LINGER, the application should set ) 874 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1489 2536 120 (l_onoff) 120 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1609 2537 407 ( to a non-zero value, set) 407 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 2588 134 (l_linger) 134 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
749 2589 842 ( to 0 or the desired timeout \(in seconds\), and call ) 842 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1591 2586 214 (setsockopt\(\)) 214 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1805 2589 202 (.  To enable) 202 SB
615 2641 817 (SO_DONTLINGER \(i.e. disable SO_LINGER\) ) 817 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1432 2640 120 (l_onoff) 120 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1552 2641 432 ( should be set to zero and) 432 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2690 214 (setsockopt\(\)) 214 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
829 2693 298 ( should be called.) 298 SB
615 2794 744 (By default, a socket may not be bound \(see ) 744 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1359 2791 109 (bind\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1468 2794 608 (\) to a local address which is already) 608 SB
615 2845 1459 (in use.  On occasions, however, it may be desirable to "re-use" an address in this way.) 1459 SB
615 2895 1448 (Since every connection is uniquely identified by the combination of local and remote) 1448 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 61 61
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1778 117 281 (setsockopt ) 281 SB
2059 117 56 (54) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 270 1485 (addresses, there is no problem with having two sockets bound to the same local address) 1485 SB
615 320 1334 (as long as the remote addresses are different.  To inform the Windows Sockets) 1334 SB
615 370 383 (implementation that a ) 383 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
998 367 109 (bind\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1107 370 667 ( on a socket should not be disallowed b) 667 SB
1774 370 19 (e) 19 SB
1793 370 290 (cause the desired) 290 SB
/fm 256 def
2 50 277 367 B
1 F
n
615 421 710 (address is already in use by another socke) 710 SB
1325 421 23 (t,) 23 SB
1348 421 507 ( the application should set the) 507 SB
/fm 256 def
2 49 277 418 B
1 F
n
615 471 1128 (SO_REUSEADDR socket option for the socket before issuing the ) 1128 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1743 468 109 (bind\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1852 471 253 (.  Note that the) 253 SB
615 522 740 (option is interpreted only at the time of the ) 740 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1355 519 109 (bind\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1464 522 546 (: it is therefore unnecessary \(but) 546 SB
615 573 1467 (harmless\) to set the option on a socket which is not to be bound to an existing address,) 1467 SB
615 623 733 (and setting or resetting the option after the ) 733 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1348 620 109 (bind\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1457 623 569 ( has no effect on this or any other) 569 SB
615 674 119 (socket.) 119 SB
615 774 1496 (An application may request that the Windows Sockets implementation enable the use of) 1496 SB
615 824 1440 ("keep-alive" packets on TCP connections by turning on the SO_KEEPALIVE socket) 1440 SB
615 874 1485 (option.  A Windows Sockets implementation need not support the use of keep-alives: if) 1485 SB
615 924 1499 (it does, the precise semantics are implementation-specific but should conform to section) 1499 SB
615 974 371 (4.2.3.6 of RFC 1122: ) 371 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
986 973 987 (Requirements for Internet Hosts -- Communication Layers) 987 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1973 974 91 (.  If a) 91 SB
615 1026 1499 (connection is dropped as the result of "keep-alives" the error code WSAENETRESET is) 1499 SB
615 1076 1451 (returned to any calls in progress on the socket, and any subsequent calls will fail with) 1451 SB
615 1126 334 (WSAENOTCONN.) 334 SB
615 1226 1420 (The TCP_NODELAY option disables the Nagle algorithm.  The Nagle algorithm is) 1420 SB
/fm 256 def
2 49 277 1223 B
1 F
n
615 1276 1042 (used to reduce the number of small packets sent by a host by ) 1042 SB
1657 1276 157 (buffering) 157 SB
1814 1276 297 ( unacknowledged) 297 SB
/fm 256 def
2 49 277 1273 B
1 F
n
615 1326 1396 (send data until a full-size packet can be sent.  However, for some applications this) 1396 SB
/fm 256 def
2 49 277 1323 B
1 F
n
615 1376 1442 (algorithm can impede performance, and TCP_NODELAY may be used to turn it off.) 1442 SB
/fm 256 def
2 49 277 1373 B
1 F
n
615 1426 1431 (Application writers should not set TCP_NODELAY unless the impact of doing so is) 1431 SB
/fm 256 def
2 49 277 1423 B
1 F
n
615 1476 129 (well-un) 129 SB
744 1476 350 (derstood and desired) 350 SB
1094 1476 925 (, since setting TCP_NODELAY can have a significant) 925 SB
/fm 256 def
2 49 277 1473 B
1 F
n
615 1526 1389 (negative impact of network performance.  TCP_NODELAY is the only supported) 1389 SB
/fm 256 def
2 49 277 1523 B
1 F
n
615 1576 435 (socket option which uses ) 435 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1050 1575 81 (level) 81 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1131 1576 743 ( IPPROTO_TCP; all other options use level) 743 SB
/fm 256 def
2 51 277 1573 B
1 F
n
615 1628 274 (SOL_SOCKET.) 274 SB
/fm 256 def
2 49 277 1625 B
1 F
n
615 1728 1445 (Windows Sockets suppliers are encouraged \(but not required\) to supply output debug) 1445 SB
/fm 256 def
2 49 277 1725 B
1 F
n
615 1778 1412 (information if the SO_DEBUG option is set by an application.  The mechanism for) 1412 SB
/fm 256 def
2 49 277 1775 B
1 F
n
615 1828 1414 (generating the debug information and the form it takes are beyond the scope of this) 1414 SB
/fm 256 def
2 49 277 1825 B
1 F
n
615 1878 228 (specification.) 228 SB
/fm 256 def
2 49 277 1875 B
1 F
n
615 1978 687 (The following options are supported for ) 687 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1302 1975 214 (setsockopt\(\)) 214 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1516 1978 110 (.  The ) 110 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
1626 1978 87 (Type) 87 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1713 1978 362 ( identifies the type of) 362 SB
615 2029 312 (data addressed by ) 312 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
927 2028 106 (optval) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1033 2029 11 (.) 11 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
gs 853 50 292 2128 CB
765 2131 101 (Value) 101 SB
gr
gs 255 50 1146 2128 CB
1168 2131 87 (Type) 87 SB
gr
gs 893 50 1402 2128 CB
1424 2131 150 (Meaning) 150 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 853 50 292 2178 CB
765 2181 327 (SO_BROADCAST) 327 SB
gr
gs 255 50 1146 2178 CB
1168 2181 114 (BOOL) 114 SB
gr
gs 893 50 1402 2178 CB
1424 2181 834 (Allow transmission of broadcast messages on the) 834 SB
gr
gs 893 50 1402 2228 CB
1424 2231 119 (socket.) 119 SB
gr
gs 853 50 292 2278 CB
765 2281 218 (SO_DEBUG) 218 SB
gr
gs 255 50 1146 2278 CB
1168 2281 114 (BOOL) 114 SB
gr
gs 893 50 1402 2278 CB
1424 2281 533 (Record debugging information.) 533 SB
gr
gs 853 50 292 2328 CB
765 2331 344 (SO_DONTLINGER) 344 SB
gr
gs 255 50 1146 2328 CB
1168 2331 114 (BOOL) 114 SB
gr
gs 893 50 1402 2328 CB
1424 2331 791 (Don't block close waiting for unsent data to be) 791 SB
gr
gs 893 50 1402 2378 CB
1424 2381 807 (sent.  Setting this option is equivalent to setting) 807 SB
gr
gs 893 52 1402 2428 CB
1424 2431 325 (SO_LINGER with ) 325 SB
gr
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
gs 893 52 1402 2428 CB
1749 2430 120 (l_onoff) 120 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 893 52 1402 2428 CB
1869 2431 197 ( set to zero.) 197 SB
gr
gs 853 50 292 2480 CB
765 2483 330 (SO_DONTROUTE) 330 SB
gr
gs 255 50 1146 2480 CB
1168 2483 114 (BOOL) 114 SB
gr
gs 893 50 1402 2480 CB
1424 2483 646 (Don't route: send directly to interface.) 646 SB
gr
gs 853 50 292 2530 CB
765 2533 305 (SO_KEEPALIVE) 305 SB
gr
gs 255 50 1146 2530 CB
1168 2533 114 (BOOL) 114 SB
gr
gs 893 50 1402 2530 CB
1424 2533 274 (Send keepalives) 274 SB
gr
gs 853 50 292 2580 CB
765 2583 228 (SO_LINGER) 228 SB
gr
gs 255 50 1146 2580 CB
1168 2583 204 (struct linger) 204 SB
gr
gs 255 50 1146 2630 CB
1168 2633 113 (FAR *) 113 SB
gr
gs 893 50 1402 2580 CB
1424 2583 676 (Linger on close if unsent data is present) 676 SB
gr
gs 853 50 292 2680 CB
765 2683 302 (SO_OOBINLINE) 302 SB
gr
gs 255 50 1146 2680 CB
1168 2683 114 (BOOL) 114 SB
gr
gs 893 50 1402 2680 CB
1424 2683 749 (Receive out-of-band data in the normal data) 749 SB
gr
gs 893 50 1402 2730 CB
1424 2733 124 (stream.) 124 SB
gr
gs 853 50 292 2780 CB
765 2783 241 (SO_RCVBUF) 241 SB
gr
gs 255 50 1146 2780 CB
1168 2783 45 (int) 45 SB
gr
gs 893 50 1402 2780 CB
1424 2783 530 (Specify buffer size for receives) 530 SB
gr
gs 853 50 292 2830 CB
765 2833 325 (SO_REUSEADDR) 325 SB
gr
gs 255 50 1146 2830 CB
1168 2833 114 (BOOL) 114 SB
gr
gs 893 50 1402 2830 CB
1424 2833 844 (Allow the socket to be bound to an address which) 844 SB
gr
gs 893 51 1402 2880 CB
1424 2883 394 (is already in use.  \(See ) 394 SB
gr
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
gs 893 51 1402 2880 CB
1818 2880 109 (bind\(\)) 109 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 893 51 1402 2880 CB
1927 2883 25 (.\)) 25 SB
gr
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 62 62
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1778 117 281 (setsockopt ) 281 SB
2059 117 56 (55) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 853 50 292 267 CB
765 270 238 (SO_SNDBUF) 238 SB
gr
gs 255 50 1146 267 CB
1168 270 45 (int) 45 SB
gr
gs 893 50 1402 267 CB
1424 270 495 (Specify buffer size for sends.) 495 SB
gr
gs 853 50 292 317 CB
765 320 300 (TCP_NODELAY) 300 SB
gr
/fm 256 def
2 49 277 317 B
1 F
n
gs 255 50 1146 317 CB
1168 320 114 (BOOL) 114 SB
gr
/fm 256 def
2 49 277 317 B
1 F
n
gs 893 50 1402 317 CB
1424 320 845 (Disables the Nagle algorithm for send coalescing.) 845 SB
gr
765 420 529 (BSD options not supported for ) 529 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1294 417 214 (setsockopt\(\)) 214 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1508 420 75 ( are:) 75 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
gs 853 50 292 518 CB
765 521 101 (Value) 101 SB
gr
gs 271 50 1146 518 CB
1168 521 87 (Type) 87 SB
gr
gs 892 50 1418 518 CB
1440 521 150 (Meaning) 150 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
gs 853 50 292 568 CB
765 571 323 (SO_ACCEPTCON) 323 SB
gr
gs 853 50 292 568 CB
1088 571 30 (N) 30 SB
gr
/fm 256 def
2 49 277 568 B
1 F
n
gs 271 50 1146 568 CB
1168 571 114 (BOOL) 114 SB
gr
gs 892 50 1418 568 CB
1440 571 311 (Socket is listening) 311 SB
gr
gs 853 50 292 618 CB
765 621 214 (SO_ERROR) 214 SB
gr
gs 271 50 1146 618 CB
1168 621 45 (int) 45 SB
gr
gs 892 50 1418 618 CB
1440 621 427 (Get error status and clear) 427 SB
gr
gs 853 50 292 668 CB
765 671 312 (SO_RCVLOWAT) 312 SB
gr
gs 271 50 1146 668 CB
1168 671 45 (int) 45 SB
gr
gs 892 50 1418 668 CB
1440 671 414 (Receive low water mark) 414 SB
gr
gs 853 50 292 718 CB
765 721 293 (SO_RCVTIMEO) 293 SB
gr
gs 271 50 1146 718 CB
1168 721 45 (int) 45 SB
gr
gs 892 50 1418 718 CB
1440 721 278 (Receive timeout) 278 SB
gr
gs 853 50 292 768 CB
765 771 309 (SO_SNDLOWAT) 309 SB
gr
gs 271 50 1146 768 CB
1168 771 45 (int) 45 SB
gr
gs 892 50 1418 768 CB
1440 771 361 (Send low water mark) 361 SB
gr
gs 853 50 292 818 CB
765 821 290 (SO_SNDTIMEO) 290 SB
gr
gs 271 50 1146 818 CB
1168 821 45 (int) 45 SB
gr
gs 892 50 1418 818 CB
1440 821 225 (Send timeout) 225 SB
gr
gs 853 50 292 868 CB
765 871 179 (SO_TYPE) 179 SB
gr
gs 271 50 1146 868 CB
1168 871 45 (int) 45 SB
gr
gs 892 50 1418 868 CB
1440 871 315 (Type of the socket) 315 SB
gr
gs 853 50 292 918 CB
765 921 234 (IP_OPTIONS) 234 SB
gr
gs 892 50 1418 918 CB
1440 921 505 (Set options field in IP header.) 505 SB
gr
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1020 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1021 317 (If no error occurs, ) 317 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
932 1018 214 (setsockopt\(\)) 214 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1146 1021 930 ( returns 0.  Otherwise, a value of SOCKET_ERROR is) 930 SB
615 1072 1069 (returned, and a specific error code may be retrieved by calling ) 1069 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1684 1069 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2058 1072 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1172 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1173 426 (WSANOTINITIALISED) 426 SB
1215 1173 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 1170 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 1173 317 ( must occur before) 317 SB
1215 1224 252 (using this API.) 252 SB
615 1324 331 (WSAENETDOWN) 331 SB
1215 1324 878 (The Windows Sockets implementation has detected) 878 SB
1215 1374 648 (that the network subsystem has failed.) 648 SB
615 1474 254 (WSAEFAULT) 254 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1215 1473 106 (optval) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1321 1474 734 ( is not in a valid part of the process address) 734 SB
1215 1526 105 (space.) 105 SB
615 1626 374 (WSAEINPROGRESS) 374 SB
1215 1626 757 (A blocking Windows Sockets operation is in) 757 SB
1215 1676 153 (progress.) 153 SB
615 1776 249 (WSAEINVAL) 249 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1215 1775 81 (level) 81 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1296 1776 200 ( is not valid) 200 SB
1496 1776 386 (, or the information in ) 386 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1882 1775 117 (optval ) 117 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1999 1776 93 (is not) 93 SB
/fm 256 def
2 51 277 1773 B
1 F
n
1215 1828 96 (valid.) 96 SB
/fm 256 def
2 49 277 1825 B
1 F
n
615 1928 330 (WSAENETRESET) 330 SB
1215 1928 892 (Connection has timed out when SO_KEEPALIVE is) 892 SB
1215 1978 58 (set.) 58 SB
615 2078 395 (WSAENOPROTOOPT) 395 SB
1215 2078 724 (The option is unknown or unsupported.  In) 724 SB
1215 2128 846 (particular, SO_BROADCAST is not supported on) 846 SB
1215 2178 683 (sockets of type SOCK_STREAM, while) 683 SB
1215 2228 682 (SO_DONTLINGER, SO_KEEPALIVE,) 682 SB
1215 2278 741 (SO_LINGER and SO_OOBINLINE are not) 741 SB
1215 2328 793 (supported on sockets of type SOCK_DGRAM.) 793 SB
615 2428 323 (WSAENOTCONN) 323 SB
1215 2428 862 (Connection has been reset when SO_KEEPALIVE) 862 SB
1215 2478 97 (is set.) 97 SB
615 2578 316 (WSAENOTSOCK) 316 SB
1215 2578 510 (The descriptor is not a socket.) 510 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2677 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2675 109 (bind\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
724 2678 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
746 2675 219 (getsockopt\(\)) 219 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
965 2678 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
987 2675 218 (ioctlsocket\(\)) 218 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1205 2678 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1227 2675 140 (socket\(\)) 140 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1367 2678 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1389 2675 338 (WSAAsyncSelect\(\)) 338 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1727 2678 11 (.) 11 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 63 63
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1806 117 253 (shutdown ) 253 SB
2059 117 56 (56) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 427 (4.1.22 shutdown\(\)) 427 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 715 (Disable sends and/or receives on a socket.) 715 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 60 (int ) 60 SB
675 527 275 (PASCAL FAR ) 275 SB
950 527 384 (shutdown \( SOCKET) 384 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1334 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1345 529 16 (s) 16 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1361 527 71 (, int) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1432 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1443 529 81 (how ) 81 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1524 527 28 (\);) 28 SB
/fm 256 def
2 51 277 527 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 681 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 682 567 (A descriptor identifying a socket.) 567 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 783 70 (how) 70 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 784 1060 (A flag that describes what types of operation will no longer be) 1060 SB
915 836 145 (allowed.) 145 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 935 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 933 173 (shutdown) 173 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
788 936 1276 (\(\) is used on all types of sockets to disable reception, transmission, or both.) 1276 SB
615 1037 39 (If ) 39 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
654 1036 70 (how) 70 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
724 1037 1376 ( is 0, subsequent receives on the socket will be disallowed.  This has no effect on) 1376 SB
615 1089 1491 (the lower protocol layers.  For TCP, the TCP window is not changed and incoming data) 1491 SB
615 1139 1403 (will be accepted \(but not acknowledged\) until the window is exhausted.  For UDP,) 1403 SB
615 1189 1485 (incoming datagrams are accepted and queued.  In no case will an ICMP error packet be) 1485 SB
615 1239 176 (generated.) 176 SB
615 1339 39 (If ) 39 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
654 1338 70 (how) 70 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
724 1339 1292 ( is 1, subsequent sends are disallowed.  For TCP sockets, a FIN will be sent.) 1292 SB
615 1441 131 (Setting ) 131 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
746 1440 70 (how) 70 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
816 1441 977 ( to 2 disables both sends and receives as described above.) 977 SB
615 1543 168 (Note that ) 168 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
783 1540 201 (shutdown\(\)) 201 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
984 1543 1065 ( does not close the socket, and resources attached to the socket) 1065 SB
615 1594 380 (will not be freed until ) 380 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
995 1591 227 (closesocket\(\)) 227 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1222 1594 197 ( is invoked.) 197 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1744 216 (Comments) 216 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1742 201 (shutdown\(\)) 201 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
816 1745 1158 ( does not block regardless of the SO_LINGER setting on the socket.) 1158 SB
615 1846 1426 (An application should not rely on being able to re-use a socket after it has been shut) 1426 SB
615 1896 1468 (down.  In particular, a Windows Sockets implementation is not required to support the) 1468 SB
615 1946 113 (use of ) 113 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
728 1943 166 (connect\(\)) 166 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
894 1946 301 ( on such a socket.) 301 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2046 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2047 317 (If no error occurs, ) 317 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
932 2044 201 (shutdown\(\)) 201 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1133 2047 930 ( returns 0.  Otherwise, a value of SOCKET_ERROR is) 930 SB
615 2098 1069 (returned, and a specific error code may be retrieved by calling ) 1069 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1684 2095 385 (WSAGetLastError\(\).) 385 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2198 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2199 426 (WSANOTINITIALISED) 426 SB
1215 2199 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 2196 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 2199 317 ( must occur before) 317 SB
1215 2250 252 (using this API.) 252 SB
615 2350 331 (WSAENETDOWN) 331 SB
1215 2350 878 (The Windows Sockets implementation has detected) 878 SB
1215 2400 648 (that the network subsystem has failed.) 648 SB
615 2500 249 (WSAEINVAL) 249 SB
1215 2500 283 (how is not valid.) 283 SB
615 2600 374 (WSAEINPROGRESS) 374 SB
1215 2600 757 (A blocking Windows Sockets operation is in) 757 SB
1215 2650 153 (progress.) 153 SB
615 2750 323 (WSAENOTCONN) 323 SB
1215 2750 799 (The socket is not connected \(SOCK_STREAM) 799 SB
1215 2800 100 (only\).) 100 SB
615 2900 316 (WSAENOTSOCK) 316 SB
1215 2900 510 (The descriptor is not a socket.) 510 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 64 64
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1806 117 253 (shutdown ) 253 SB
2059 117 56 (57) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 319 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 317 166 (connect\(\)) 166 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
781 320 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
803 317 140 (socket\(\)) 140 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
943 320 11 (.) 11 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 65 65
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1885 117 174 (socket ) 174 SB
2059 117 56 (58) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 348 (4.1.23 socket\(\)) 348 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 271 (Create a socket.) 271 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 186 (SOCKET ) 186 SB
801 527 275 (PASCAL FAR ) 275 SB
1076 527 197 (socket \( int) 197 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1273 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1284 529 33 (af) 33 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1317 527 71 (, int) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1388 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1399 529 71 (type) 71 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1470 527 71 (, int) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1541 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1552 529 154 (protocol ) 154 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1706 527 28 (\);) 28 SB
/fm 256 def
2 51 277 527 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 681 33 (af) 33 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 682 1190 (An address format specification.  The only format currently supported) 1190 SB
915 734 966 (is PF_INET, which is the ARPA Internet address format.) 966 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 833 71 (type) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 834 676 (A type specification for the new socket.) 676 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 935 143 (protocol) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 936 807 (A particular protocol to be used with the socket) 807 SB
1722 936 383 (, or 0 if the caller does) 383 SB
/fm 256 def
2 51 277 933 B
1 F
n
915 988 514 (not wish to specify a protocol.) 514 SB
/fm 256 def
2 49 277 985 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1087 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1085 140 (socket\(\)) 140 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
755 1088 1270 ( allocates a socket descriptor of the specified address family, data type and) 1270 SB
615 1139 1136 (protocol, as well as related resources.  If a protocol is not specified) 1136 SB
1751 1139 271 ( \(i.e. equal to 0\)) 271 SB
2022 1139 74 (, the) 74 SB
/fm 256 def
2 49 277 1136 B
1 F
n
615 1189 845 (default for the specified connection mode is used.) 845 SB
615 1289 1447 (Only a single protocol exists to support a particular socket type using a given address) 1447 SB
615 1339 1453 (format.  However, the address family may be given as AF_UNSPEC \(unspecified\), in) 1453 SB
615 1389 261 (which case the ) 261 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
876 1388 143 (protocol) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1019 1389 1030 ( parameter must be specified.  The protocol number to use is) 1030 SB
615 1441 1426 (particular to the "communication domain'' in which communication is to take place.) 1426 SB
615 1541 252 (The following ) 252 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
867 1540 71 (type) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
938 1541 496 ( specifications are supported:) 496 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
765 1643 87 (Type) 87 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
852 1643 352 (                                ) 352 SB
1204 1643 11 ( ) 11 SB
1215 1643 205 (Explanation) 205 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
765 1693 302 (SOCK_STREAM) 302 SB
1215 1693 875 (Provides sequenced, reliable, two-way, connection-) 875 SB
1215 1743 749 (based byte streams with an out-of-band data) 749 SB
1215 1793 885 (transmission mechanism.  Uses TCP for the Internet) 885 SB
1215 1843 259 (address family.) 259 SB
765 1943 287 (SOCK_DGRAM) 287 SB
1215 1943 793 (Supports datagrams, which are connectionless,) 793 SB
1215 1993 765 (unreliable buffers of a fixed \(typically small\)) 765 SB
1215 2043 900 (maximum length.  Uses UDP for the Internet address) 900 SB
1215 2093 122 (family.) 122 SB
615 2243 1459 (Sockets of type SOCK_STREAM are full-duplex byte streams.  A stream socket must) 1459 SB
615 2293 1466 (be in a connected state before any data may be sent or received on it.  A connection to) 1466 SB
615 2343 546 (another socket is created with a ) 546 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1161 2340 138 (connect) 138 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1299 2343 634 (\(\) call.  Once connected, data may be) 634 SB
615 2394 296 (transferred using ) 296 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
911 2391 81 (send) 81 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
992 2394 111 (\(\) and ) 111 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1103 2391 78 (recv) 78 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1181 2394 800 (\(\) calls.  When a session has been completed, a) 800 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2442 199 (closesocket) 199 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
814 2445 1144 (\(\) must be performed.  Out-of-band data may also be transmitted as) 1144 SB
615 2496 217 (described in ) 217 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
832 2493 81 (send) 81 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
913 2496 529 (\(\) and received as described in ) 529 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1442 2493 78 (recv) 78 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1520 2496 39 (\(\).) 39 SB
615 2597 1471 (The communications protocols used to implement a SOCK_STREAM ensure that data) 1471 SB
615 2647 1476 (is not lost or duplicated.  If data for which the peer protocol has buffer space cannot be) 1476 SB
615 2697 1320 (successfully transmitted within a reasonable length of time,  the connection is) 1320 SB
615 2747 1250 (considered broken and subsequent calls will fail with the error code set to) 1250 SB
615 2797 349 (WSAETIMEDOUT.) 349 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 66 66
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1885 117 174 (socket ) 174 SB
2059 117 56 (59) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 270 1350 (SOCK_DGRAM sockets allow sending and receiving of datagrams to and from) 1350 SB
615 320 359 (arbitrary peers using ) 359 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
974 317 144 (sendto\(\)) 144 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1118 320 83 ( and ) 83 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1201 317 195 (recvfrom\(\)) 195 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1396 320 348 (.  If such a socket is ) 348 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1744 317 166 (connect\(\)) 166 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1910 320 114 (ed to a) 114 SB
615 371 849 (specific peer, datagrams may be send to that peer ) 849 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1464 368 81 (send) 81 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1545 371 483 (\(\) and may be received from) 483 SB
615 422 372 (\(only\) this peer using ) 372 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
987 419 78 (recv) 78 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1065 422 39 (\(\).) 39 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 572 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 573 317 (If no error occurs, ) 317 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
932 570 140 (socket\(\)) 140 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1072 573 1022 ( returns a descriptor referencing the new socket.  Otherwise,) 1022 SB
615 624 1465 (a value of INVALID_SOCKET is returned, and a specific error code may be retrieved) 1465 SB
615 674 180 (by calling ) 180 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
795 671 385 (WSAGetLastError\(\).) 385 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 774 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 775 426 (WSANOTINITIALISED) 426 SB
1215 775 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 772 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 775 317 ( must occur before) 317 SB
1215 826 252 (using this API.) 252 SB
615 926 331 (WSAENETDOWN) 331 SB
1215 926 878 (The Windows Sockets implementation has detected) 878 SB
1215 976 648 (that the network subsystem has failed.) 648 SB
615 1076 415 (WSAEAFNOSUPPORT) 415 SB
1215 1076 781 (The specified address family is not supported.) 781 SB
615 1176 374 (WSAEINPROGRESS) 374 SB
1215 1176 757 (A blocking Windows Sockets operation is in) 757 SB
1215 1226 153 (progress.) 153 SB
615 1326 245 (WSAEMFILE) 245 SB
1215 1326 652 (No more file descriptors are available.) 652 SB
615 1426 283 (WSAENOBUFS) 283 SB
1215 1426 867 (No buffer space is available.  The socket cannot be) 867 SB
1215 1476 134 (created.) 134 SB
615 1576 499 (WSAEPROTONOSUPPORT) 499 SB
1215 1576 674 (The specified protocol is not supported.) 674 SB
615 1676 361 (WSAEPROTOTYPE) 361 SB
1215 1676 818 (The specified protocol is the wrong type for this) 818 SB
1215 1726 119 (socket.) 119 SB
615 1826 499 (WSAESOCKTNOSUPPORT) 499 SB
1215 1826 830 (The specified socket type is not supported in this) 830 SB
1215 1876 259 (address family.) 259 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1975 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1973 143 (accept\(\)) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
758 1976 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
780 1973 109 (bind\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
889 1976 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
911 1973 166 (connect\(\)) 166 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1077 1976 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1099 1973 259 (getsockname\(\)) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1358 1976 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1380 1973 219 (getsockopt\(\)) 219 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1599 1976 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1621 1973 214 (setsockopt\(\)) 214 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1835 1976 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1857 1973 124 (listen\(\)) 124 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1981 1976 36 (, r) 36 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
2017 1973 87 (ecv\(\)) 87 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2104 1976 11 (,) 11 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2024 195 (recvfrom\(\)) 195 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
810 2027 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
832 2024 127 (select\(\)) 127 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
959 2027 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
981 2024 109 (send\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1090 2027 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1112 2024 144 (sendto\(\)) 144 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1256 2027 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1278 2024 201 (shutdown\(\)) 201 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1479 2027 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1501 2024 218 (ioctlsocket\(\)) 218 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1719 2027 11 (.) 11 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 67 67
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1694 117 365 (gethostbyaddr ) 365 SB
2059 117 56 (60) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 292 538 (4.2 Database Routines) 538 SB
315 350 511 (4.2.1 gethostbyaddr\(\)) 511 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 410 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 411 848 (Get host information corresponding to an address.) 848 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 511 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 509 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 612 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 610 386 (struct hostent FAR * ) 386 SB
1001 610 275 (PASCAL FAR ) 275 SB
1276 610 294 (gethostbyaddr \( ) 294 SB
1570 610 104 (const ) 104 SB
1674 610 211 (char FAR *) 211 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1885 613 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1896 612 79 (addr) 79 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1975 610 71 (, int) 71 SB
/fm 256 def
2 51 277 610 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 664 52 (len) 52 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
667 662 22 (, ) 22 SB
689 662 11 ( ) 11 SB
700 662 49 (int) 49 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
749 665 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
760 664 82 (type ) 82 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
842 662 28 (\);) 28 SB
/fm 256 def
2 51 277 662 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 816 79 (addr) 79 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 817 781 (A pointer to an address in network byte order.) 781 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 918 52 (len) 52 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 919 1147 (The length of the address, which must be 4 for PF_INET addresses.) 1147 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1020 71 (type) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1021 850 (The type of the address, which must be PF_INET.) 850 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1122 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1120 258 (gethostbyaddr) 258 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
873 1123 1234 (\(\) returns a pointer to the following structure which contains the name\(s\)) 1234 SB
615 1174 870 (and address which correspond to the given address.) 870 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 1271 400 (struct hostent {) 400 SB
765 1316 250 (char FAR *) 250 SB
1065 1316 175 (h_name;) 175 SB
765 1361 400 (char FAR * FAR *) 400 SB
1215 1361 250 (h_aliases;) 250 SB
765 1406 125 (short) 125 SB
915 1406 275 (h_addrtype;) 275 SB
/fm 256 def
2 44 277 1406 B
1 F
n
765 1451 125 (short) 125 SB
915 1451 225 (h_length;) 225 SB
/fm 256 def
2 44 277 1451 B
1 F
n
765 1496 400 (char FAR * FAR *) 400 SB
1215 1496 300 (h_addr_list;) 300 SB
615 1541 50 (};) 50 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1639 584 (The members of this structure are:) 584 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
615 1689 142 (Element) 142 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
757 1689 165 (               ) 165 SB
915 1689 105 (Usage) 105 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1739 134 (h_name) 134 SB
915 1739 526 (Official name of the host \(PC\).) 526 SB
615 1789 155 (h_aliases) 155 SB
915 1789 781 (A NULL-terminated array of alternate names.) 781 SB
615 1839 190 (h_addrtype) 190 SB
915 1839 1087 (The type of address being returned; for Windows Sockets this is) 1087 SB
915 1889 302 (always PF_INET.) 302 SB
615 1939 148 (h_length) 148 SB
915 1939 1160 (The length, in bytes, of each address; for PF_INET, this is always 4.) 1160 SB
615 1989 190 (h_addr_list) 190 SB
915 1989 1102 (A NULL-terminated list of addresses for the host.  Addresses are) 1102 SB
915 2039 529 (returned in network byte order.) 529 SB
615 2139 1482 (The macro h_addr is defined to be h_addr_list[0] for compatibility with older software.) 1482 SB
615 2239 1455 (The pointer which is returned points to a structure which is allocated by the Windows) 1455 SB
615 2289 1499 (Sockets implementation.  The application must never attempt to modify this structure or) 1499 SB
615 2339 1481 (to free any of its components.  Furthermore, only one copy of this structure is allocated) 1481 SB
615 2389 1439 (per thread, and so the application should copy any information which it needs before) 1439 SB
615 2439 781 (issuing any other Windows Sockets API calls.) 781 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2588 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2589 317 (If no error occurs, ) 317 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
932 2586 286 (gethostbyaddr\(\)) 286 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1218 2589 861 ( returns a pointer to the hostent structure described) 861 SB
615 2640 1367 (above.  Otherwise it returns a NULL pointer and a specific error number may be) 1367 SB
615 2690 342 (retrieved by calling ) 342 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
957 2687 385 (WSAGetLastError\(\).) 385 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2790 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2791 426 (WSANOTINITIALISED) 426 SB
1215 2791 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 2788 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 2791 317 ( must occur before) 317 SB
1215 2842 252 (using this API.) 252 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 68 68
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1694 117 365 (gethostbyaddr ) 365 SB
2059 117 56 (61) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 270 331 (WSAENETDOWN) 331 SB
1215 270 878 (The Windows Sockets implementation has detected) 878 SB
1215 320 648 (that the network subsystem has failed.) 648 SB
615 420 473 (WSAHOST_NOT_FOUND) 473 SB
1215 420 642 (Authoritative Answer Host not found.) 642 SB
615 520 332 (WSATRY_AGAIN) 332 SB
1215 520 633 (Non-Authoritative Host not found, or) 633 SB
1215 570 265 (SERVERFAIL.) 265 SB
615 670 400 (WSANO_RECOVERY) 400 SB
1215 670 831 (Non recoverable errors, FORMERR, REFUSED,) 831 SB
1215 720 171 (NOTIMP.) 171 SB
615 820 290 (WSANO_DATA) 290 SB
1215 820 776 (Valid name, no data record of requested type.) 776 SB
615 920 374 (WSAEINPROGRESS) 374 SB
1215 920 757 (A blocking Windows Sockets operation is in) 757 SB
1215 970 153 (progress.) 153 SB
615 1070 217 (WSAEINTR) 217 SB
1215 1070 625 (The \(blocking\) call was canceled via) 625 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1215 1117 492 (WSACancelBlockingCall\(\).) 492 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1220 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1218 526 (WSAAsyncGetHostByAddr\(\)) 526 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1141 1221 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1163 1218 298 (gethostbyname\(\)) 298 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1461 1221 11 (,) 11 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 69 69
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1731 117 328 (gethostname ) 328 SB
2059 117 56 (62) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 533 (4.2.2 gethostbyname\(\)) 533 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 863 (Get host information corresponding to a hostname.) 863 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 386 (struct hostent FAR * ) 386 SB
1001 527 275 (PASCAL FAR ) 275 SB
1276 527 306 (gethostbyname \( ) 306 SB
1582 527 104 (const ) 104 SB
1686 527 222 (char FAR * ) 222 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1908 529 102 (name ) 102 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
2010 527 28 (\);) 28 SB
/fm 256 def
2 51 277 527 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 681 91 (name) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 682 572 (A pointer to the name of the host.) 572 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 783 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 781 270 (gethostbyname) 270 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
885 784 1009 (\(\) returns a pointer to a hostent structure as described under) 1009 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 832 258 (gethostbyaddr) 258 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
873 835 1045 (\(\).  The contents of this structure correspond to the hostname ) 1045 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1918 834 91 (name) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2009 835 11 (.) 11 SB
615 937 1455 (The pointer which is returned points to a structure which is allocated by the Windows) 1455 SB
615 987 1499 (Sockets implementation.  The application must never attempt to modify this structure or) 1499 SB
615 1037 1481 (to free any of its components.  Furthermore, only one copy of this structure is allocated) 1481 SB
615 1087 1439 (per thread, and so the application should copy any information which it needs before) 1439 SB
615 1137 781 (issuing any other Windows Sockets API calls.) 781 SB
615 1237 41 (A ) 41 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
656 1234 309 (gethostbyname\(\) ) 309 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
965 1237 1079 (implementation must not resolve IP address strings passed to it.) 1079 SB
/fm 256 def
2 50 277 1234 B
1 F
n
615 1288 1467 (Such a request should be treated exactly as if an unknown host name were passed.  An) 1467 SB
/fm 256 def
2 49 277 1285 B
1 F
n
615 1338 996 (application with an IP address string to resolve should use ) 996 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1611 1335 214 (inet_addr\(\) ) 214 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1825 1338 234 (to convert the) 234 SB
/fm 256 def
2 50 277 1335 B
1 F
n
615 1389 482 (string to an IP address, then ) 482 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1097 1386 297 (gethostbyaddr\(\) ) 297 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1394 1389 516 (to obtain the hostent structure.) 516 SB
/fm 256 def
2 50 277 1386 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1539 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1540 317 (If no error occurs, ) 317 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
932 1537 298 (gethostbyname\(\)) 298 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1230 1540 861 ( returns a pointer to the hostent structure described) 861 SB
615 1591 1367 (above.  Otherwise it returns a NULL pointer and a specific error number may be) 1367 SB
615 1641 342 (retrieved by calling ) 342 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
957 1638 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1331 1641 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1741 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1742 426 (WSANOTINITIALISED) 426 SB
1215 1742 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 1739 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 1742 317 ( must occur before) 317 SB
1215 1793 252 (using this API.) 252 SB
615 1893 331 (WSAENETDOWN) 331 SB
1215 1893 878 (The Windows Sockets implementation has detected) 878 SB
1215 1943 648 (that the network subsystem has failed.) 648 SB
615 2043 473 (WSAHOST_NOT_FOUND) 473 SB
1215 2043 642 (Authoritative Answer Host not found.) 642 SB
615 2143 332 (WSATRY_AGAIN) 332 SB
1215 2143 633 (Non-Authoritative Host not found, or) 633 SB
1215 2193 265 (SERVERFAIL.) 265 SB
615 2293 400 (WSANO_RECOVERY) 400 SB
1215 2293 831 (Non recoverable errors, FORMERR, REFUSED,) 831 SB
1215 2343 171 (NOTIMP.) 171 SB
615 2443 290 (WSANO_DATA) 290 SB
1215 2443 776 (Valid name, no data record of requested type.) 776 SB
615 2543 374 (WSAEINPROGRESS) 374 SB
1215 2543 757 (A blocking Windows Sockets operation is in) 757 SB
1215 2593 153 (progress.) 153 SB
615 2693 217 (WSAEINTR) 217 SB
1215 2693 625 (The \(blocking\) call was canceled via) 625 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1215 2740 492 (WSACancelBlockingCall\(\).) 492 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2893 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2891 536 (WSAAsyncGetHostByName\(\)) 536 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1151 2894 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1173 2891 286 (gethostbyaddr\(\)) 286 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 70 70
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1731 117 328 (gethostname ) 328 SB
2059 117 56 (63) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 318 474 (4.2.3 gethostname\(\)) 474 SB
/fm 256 def
2 57 277 318 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 378 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 379 899 (Return the standard host name for the local machine.) 899 SB
/fm 256 def
2 50 277 376 B
1 F
n
/fm 256 def
2 49 277 427 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 477 389 (#include <winsock.h>) 389 SB
/fm 256 def
2 50 277 477 B
1 F
n
/fm 256 def
2 50 277 528 B
1 F
n
615 579 60 (int ) 60 SB
675 579 275 (PASCAL FAR ) 275 SB
950 579 484 (gethostname \( char FAR * ) 484 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1434 581 91 (name) 91 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1525 579 82 (, int ) 82 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1607 581 143 (namelen) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1750 582 11 ( ) 11 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1761 579 28 (\);) 28 SB
/fm 256 def
2 51 277 579 B
1 F
n
/fm 256 def
2 49 277 631 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 683 91 (name) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 684 893 (A pointer to a buffer that will receive the host name.) 893 SB
/fm 256 def
2 51 277 681 B
1 F
n
/fm 256 def
2 49 277 733 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 785 143 (namelen) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 786 417 (The length of the buffer.) 417 SB
/fm 256 def
2 51 277 783 B
1 F
n
/fm 256 def
2 49 277 835 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 887 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 888 1329 (This routine returns the name of the local host into the buffer specified by the ) 1329 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1944 887 91 (name) 91 SB
/fm 256 def
2 51 277 885 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 940 1482 (parameter.  The host name is returned as a null-terminated string.  The form of the host) 1482 SB
/fm 256 def
2 49 277 937 B
1 F
n
615 990 1446 (name is dependent on the Windows Sockets implementation--it may be a simple host) 1446 SB
/fm 256 def
2 49 277 987 B
1 F
n
615 1040 1450 (name, or it may be a fully qualified domain name.  However, it is guaranteed that the) 1450 SB
/fm 256 def
2 49 277 1037 B
1 F
n
615 1090 774 (name returned will be successfully parsed by ) 774 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1389 1087 309 (gethostbyname\(\) ) 309 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1698 1090 61 (and) 61 SB
/fm 256 def
2 50 277 1087 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1138 547 (WSAAsyncGetHostByName\(\).) 547 SB
/fm 256 def
2 50 277 1138 B
1 F
n
/fm 256 def
2 49 277 1189 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1241 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1242 317 (If no error occurs, ) 317 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
932 1239 265 (gethostname\(\) ) 265 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1197 1242 905 (returns 0, otherwise it returns SOCKET_ERROR and) 905 SB
/fm 256 def
2 50 277 1239 B
1 F
n
615 1293 834 (a specific error code may be retrieved by calling ) 834 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1449 1290 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1823 1293 11 (.) 11 SB
/fm 256 def
2 50 277 1290 B
1 F
n
/fm 256 def
2 49 277 1341 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1393 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1394 254 (WSAEFAULT) 254 SB
1215 1394 77 (The ) 77 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1292 1393 154 (namelen ) 154 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1446 1394 377 (parameter is too small) 377 SB
/fm 256 def
2 51 277 1391 B
1 F
n
/fm 256 def
2 49 277 1443 B
1 F
n
615 1496 426 (WSANOTINITIALISED) 426 SB
1215 1496 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 1493 271 (WSAStartup\(\) ) 271 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1711 1496 306 (must occur before) 306 SB
/fm 256 def
2 50 277 1493 B
1 F
n
1215 1547 252 (using this API.) 252 SB
/fm 256 def
2 49 277 1544 B
1 F
n
/fm 256 def
2 49 277 1594 B
1 F
n
615 1647 331 (WSAENETDOWN) 331 SB
1215 1647 878 (The Windows Sockets implementation has detected) 878 SB
/fm 256 def
2 49 277 1644 B
1 F
n
1215 1697 648 (that the network subsystem has failed.) 648 SB
/fm 256 def
2 49 277 1694 B
1 F
n
/fm 256 def
2 49 277 1744 B
1 F
n
615 1797 374 (WSAEINPROGRESS) 374 SB
1215 1797 757 (A blocking Windows Sockets operation is in) 757 SB
/fm 256 def
2 49 277 1794 B
1 F
n
1215 1847 153 (progress.) 153 SB
/fm 256 def
2 49 277 1844 B
1 F
n
/fm 256 def
2 49 277 1894 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1946 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1944 867 (gethostbyname\(\), WSAAsyncGetHostByName\(\).) 867 SB
/fm 256 def
2 50 277 1944 B
1 F
n
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 71 71
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1650 117 409 (getprotobyname ) 409 SB
2059 117 56 (64) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 555 (4.2.4 getprotobyname\(\)) 555 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 1016 (Get protocol information corresponding to a protocol name.) 1016 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 410 (struct protoent FAR * ) 410 SB
1025 527 275 (PASCAL FAR ) 275 SB
1300 527 330 (getprotobyname \( ) 330 SB
1630 527 104 (const ) 104 SB
1734 527 222 (char FAR * ) 222 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1956 529 102 (name ) 102 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
2058 527 28 (\);) 28 SB
/fm 256 def
2 51 277 527 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 681 91 (name) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 682 501 (A pointer to a protocol name.) 501 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 783 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 781 294 (getprotobyname) 294 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
909 784 1087 (\(\) returns a pointer to the following structure which contains the) 1087 SB
615 835 1187 (name\(s\) and protocol number which correspond to the given protocol ) 1187 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1802 834 91 (name) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1893 835 11 (.) 11 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 934 425 (struct protoent {) 425 SB
765 979 250 (char FAR *) 250 SB
1065 979 175 (p_name;) 175 SB
765 1024 400 (char FAR * FAR *) 400 SB
1215 1024 250 (p_aliases;) 250 SB
765 1069 125 (short) 125 SB
915 1069 200 (p_proto;) 200 SB
/fm 256 def
2 44 277 1069 B
1 F
n
615 1114 50 (};) 50 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1212 584 (The members of this structure are:) 584 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
615 1262 142 (Element) 142 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
757 1262 165 (               ) 165 SB
915 1262 105 (Usage) 105 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1312 134 (p_name) 134 SB
915 1312 507 (Official name of the protocol.) 507 SB
615 1362 155 (p_aliases) 155 SB
915 1362 781 (A NULL-terminated array of alternate names.) 781 SB
615 1412 131 (p_proto) 131 SB
915 1412 689 (The protocol number, in host byte order.) 689 SB
615 1512 1455 (The pointer which is returned points to a structure which is allocated by the Windows) 1455 SB
615 1562 1466 (Sockets library.  The application must never attempt to modify this structure or to free) 1466 SB
615 1612 1414 (any of its components.  Furthermore only one copy of this structure is allocated per) 1414 SB
615 1662 1374 (thread, and so the application should copy any information which it needs before) 1374 SB
615 1712 781 (issuing any other Windows Sockets API calls.) 781 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1861 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1862 317 (If no error occurs, ) 317 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
932 1859 322 (getprotobyname\(\)) 322 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1254 1862 707 ( returns a pointer to the protoent structure) 707 SB
615 1913 1489 (described above.  Otherwise it returns a NULL pointer and a specific error number may) 1489 SB
615 1963 393 (be retrieved by calling ) 393 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1008 1960 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1382 1963 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2063 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2064 426 (WSANOTINITIALISED) 426 SB
1215 2064 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 2061 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 2064 317 ( must occur before) 317 SB
1215 2115 252 (using this API.) 252 SB
615 2215 331 (WSAENETDOWN) 331 SB
1215 2215 878 (The Windows Sockets implementation has detected) 878 SB
1215 2265 648 (that the network subsystem has failed.) 648 SB
615 2365 400 (WSANO_RECOVERY) 400 SB
1215 2365 831 (Non recoverable errors, FORMERR, REFUSED,) 831 SB
1215 2415 171 (NOTIMP.) 171 SB
615 2515 290 (WSANO_DATA) 290 SB
1215 2515 776 (Valid name, no data record of requested type.) 776 SB
615 2615 374 (WSAEINPROGRESS) 374 SB
1215 2615 757 (A blocking Windows Sockets operation is in) 757 SB
1215 2665 153 (progress.) 153 SB
615 2765 217 (WSAEINTR) 217 SB
1215 2765 625 (The \(blocking\) call was canceled via) 625 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1215 2812 492 (WSACancelBlockingCall\(\).) 492 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 72 72
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1650 117 409 (getprotobyname ) 409 SB
2059 117 56 (65) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 269 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 267 553 (WSAAsyncGetProtoByName\(\)) 553 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1168 270 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1190 267 366 (getprotobynumber\(\)) 366 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 73 73
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1597 117 462 (getprotobynumber ) 462 SB
2059 117 56 (66) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 608 (4.2.5 getprotobynumber\(\)) 608 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 1053 (Get protocol information corresponding to a protocol number.) 1053 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 410 (struct protoent FAR * ) 410 SB
1025 527 275 (PASCAL FAR ) 275 SB
1300 527 423 (getprotobynumber \( int) 423 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1723 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1734 529 139 (number ) 139 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1873 527 28 (\);) 28 SB
/fm 256 def
2 51 277 527 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 681 128 (number) 128 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 682 653 (A protocol number, in host byte order.) 653 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 783 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 784 1276 (This function returns a pointer to a protoent structure as described above in) 1276 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 832 322 (getprotobyname\(\)) 322 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
937 835 1081 (.  The contents of the structure correspond to the given protocol) 1081 SB
615 886 140 (number.) 140 SB
615 986 1455 (The pointer which is returned points to a structure which is allocated by the Windows) 1455 SB
615 1036 1499 (Sockets implementation.  The application must never attempt to modify this structure or) 1499 SB
615 1086 1481 (to free any of its components.  Furthermore, only one copy of this structure is allocated) 1481 SB
615 1136 1439 (per thread, and so the application should copy any information which it needs before) 1439 SB
615 1186 781 (issuing any other Windows Sockets API calls.) 781 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1335 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1336 317 (If no error occurs, ) 317 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
932 1333 366 (getprotobynumber\(\)) 366 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1298 1336 707 ( returns a pointer to the protoent structure) 707 SB
615 1387 1489 (described above.  Otherwise it returns a NULL pointer and a specific error number may) 1489 SB
615 1437 393 (be retrieved by calling ) 393 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1008 1434 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1382 1437 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1537 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1538 426 (WSANOTINITIALISED) 426 SB
1215 1538 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 1535 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 1538 317 ( must occur before) 317 SB
1215 1589 252 (using this API.) 252 SB
615 1689 331 (WSAENETDOWN) 331 SB
1215 1689 878 (The Windows Sockets implementation has detected) 878 SB
1215 1739 648 (that the network subsystem has failed.) 648 SB
615 1839 400 (WSANO_RECOVERY) 400 SB
1215 1839 831 (Non recoverable errors, FORMERR, REFUSED,) 831 SB
1215 1889 171 (NOTIMP.) 171 SB
615 1989 290 (WSANO_DATA) 290 SB
1215 1989 776 (Valid name, no data record of requested type.) 776 SB
615 2089 374 (WSAEINPROGRESS) 374 SB
1215 2089 757 (A blocking Windows Sockets operation is in) 757 SB
1215 2139 153 (progress.) 153 SB
615 2239 217 (WSAEINTR) 217 SB
1215 2239 625 (The \(blocking\) call was canceled via) 625 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1215 2286 492 (WSACancelBlockingCall\(\).) 492 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2389 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2387 597 (WSAAsyncGetProtoByNumber\(\)) 597 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1212 2390 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1234 2387 322 (getprotobyname\(\)) 322 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 74 74
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1676 117 383 (getservbyname ) 383 SB
2059 117 56 (67) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 529 (4.2.6 getservbyname\(\)) 529 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 1198 (Get service information corresponding to a service name and protocol.) 1198 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 387 (struct servent FAR * ) 387 SB
1002 527 275 (PASCAL FAR ) 275 SB
1277 527 307 (getservbyname \( ) 307 SB
1584 527 104 (const ) 104 SB
1688 527 222 (char FAR * ) 222 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1910 529 91 (name) 91 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
2001 527 11 (,) 11 SB
/fm 256 def
2 51 277 527 B
1 F
n
615 579 104 (const ) 104 SB
719 579 222 (char FAR * ) 222 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
941 581 102 (proto ) 102 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1043 579 28 (\);) 28 SB
/fm 256 def
2 51 277 579 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 733 91 (name) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 734 480 (A pointer to a service name.) 480 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 835 91 (proto) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 836 30 (A) 30 SB
945 836 171 (n optional) 171 SB
1116 836 766 ( pointer to a protocol name.  If this is NULL,) 766 SB
/fm 256 def
2 51 277 833 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
915 885 299 (getservbyname\(\)) 299 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1214 888 747 ( returns the first service entry for which the ) 747 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1961 887 91 (name) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 940 936 (matches the s_name or one of the s_aliases.  Otherwise) 936 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
915 987 299 (getservbyname\(\)) 299 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1214 990 310 ( matches both the ) 310 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1524 989 102 (name ) 102 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1626 990 135 (and the ) 135 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1761 989 91 (proto) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1852 990 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1091 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1089 299 (getservbyname\(\)) 299 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
914 1092 1059 ( returns a pointer to the following structure which contains the) 1059 SB
615 1143 1145 (name\(s\) and service number which correspond to the given service ) 1145 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1760 1142 91 (name) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1851 1143 11 (.) 11 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 1242 400 (struct servent {) 400 SB
765 1287 250 (char FAR *) 250 SB
1065 1287 175 (s_name;) 175 SB
765 1332 400 (char FAR * FAR *) 400 SB
1215 1332 250 (s_aliases;) 250 SB
765 1377 125 (short) 125 SB
915 1377 175 (s_port;) 175 SB
/fm 256 def
2 44 277 1377 B
1 F
n
765 1422 250 (char FAR *) 250 SB
1065 1422 200 (s_proto;) 200 SB
615 1467 50 (};) 50 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1565 584 (The members of this structure are:) 584 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
615 1615 142 (Element) 142 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
757 1615 165 (               ) 165 SB
915 1615 105 (Usage) 105 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1665 129 (s_name) 129 SB
915 1665 486 (Official name of the service.) 486 SB
615 1715 150 (s_aliases) 150 SB
915 1715 781 (A NULL-terminated array of alternate names.) 781 SB
615 1765 105 (s_port) 105 SB
915 1765 1047 (The port number at which the service may be contacted.  Port) 1047 SB
915 1815 748 (numbers are returned in network byte order.) 748 SB
615 1865 126 (s_proto) 126 SB
915 1865 1036 (The name of the protocol to use when contacting the service.) 1036 SB
615 1965 1455 (The pointer which is returned points to a structure which is allocated by the Windows) 1455 SB
615 2015 1466 (Sockets library.  The application must never attempt to modify this structure or to free) 1466 SB
615 2065 1414 (any of its components.  Furthermore only one copy of this structure is allocated per) 1414 SB
615 2115 1374 (thread, and so the application should copy any information which it needs before) 1374 SB
615 2165 781 (issuing any other Windows Sockets API calls.) 781 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2314 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2315 317 (If no error occurs, ) 317 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
932 2312 299 (getservbyname\(\)) 299 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1231 2315 861 ( returns a pointer to the servent structure described) 861 SB
615 2366 1367 (above.  Otherwise it returns a NULL pointer and a specific error number may be) 1367 SB
615 2416 342 (retrieved by calling ) 342 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
957 2413 385 (WSAGetLastError\(\).) 385 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2516 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2517 426 (WSANOTINITIALISED) 426 SB
1215 2517 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 2514 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 2517 317 ( must occur before) 317 SB
1215 2568 252 (using this API.) 252 SB
615 2668 331 (WSAENETDOWN) 331 SB
1215 2668 878 (The Windows Sockets implementation has detected) 878 SB
1215 2718 648 (that the network subsystem has failed.) 648 SB
615 2818 400 (WSANO_RECOVERY) 400 SB
1215 2818 831 (Non recoverable errors, FORMERR, REFUSED,) 831 SB
1215 2868 171 (NOTIMP.) 171 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 75 75
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1676 117 383 (getservbyname ) 383 SB
2059 117 56 (68) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 270 290 (WSANO_DATA) 290 SB
1215 270 776 (Valid name, no data record of requested type.) 776 SB
615 370 374 (WSAEINPROGRESS) 374 SB
1215 370 757 (A blocking Windows Sockets operation is in) 757 SB
1215 420 153 (progress.) 153 SB
615 520 217 (WSAEINTR) 217 SB
1215 520 625 (The \(blocking\) call was canceled via) 625 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1215 567 492 (WSACancelBlockingCall\(\).) 492 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 720 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 718 534 (WSAAsyncGetServByName\(\)) 534 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1149 721 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1171 718 278 (getservbyport\(\)) 278 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 76 76
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1709 117 350 (getservbyport ) 350 SB
2059 117 56 (69) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 496 (4.2.7 getservbyport\(\)) 496 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 1043 (Get service information corresponding to a port and protocol.) 1043 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 387 (struct servent FAR * ) 387 SB
1002 527 275 (PASCAL FAR ) 275 SB
1277 527 335 (getservbyport \( int) 335 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1612 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1623 529 70 (port) 70 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1693 527 337 (, const char FAR *) 337 SB
/fm 256 def
2 51 277 527 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 581 102 (proto ) 102 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
717 579 28 (\);) 28 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 733 70 (port) 70 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 734 765 (The port for a service, in network byte order.) 765 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 835 91 (proto) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 836 30 (A) 30 SB
945 836 171 (n optional) 171 SB
1116 836 766 ( pointer to a protocol name.  If this is NULL,) 766 SB
/fm 256 def
2 51 277 833 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
915 885 278 (getservbyport\(\)) 278 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1193 888 747 ( returns the first service entry for which the ) 747 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1940 887 70 (port) 70 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 940 535 (matches the s_port.  Otherwise ) 535 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1450 937 278 (getservbyport\(\)) 278 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1728 940 310 ( matches both the ) 310 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
2038 939 70 (port) 70 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 992 135 (and the ) 135 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1050 991 91 (proto) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1141 992 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1093 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1091 278 (getservbyport\(\)) 278 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
893 1094 1002 ( returns a pointer a servent structure as described above for) 1002 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1142 299 (getservbyname\(\)) 299 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
914 1145 11 (.) 11 SB
615 1246 1455 (The pointer which is returned points to a structure which is allocated by the Windows) 1455 SB
615 1296 1499 (Sockets implementation.  The application must never attempt to modify this structure or) 1499 SB
615 1346 1481 (to free any of its components.  Furthermore, only one copy of this structure is allocated) 1481 SB
615 1396 1439 (per thread, and so the application should copy any information which it needs before) 1439 SB
615 1446 781 (issuing any other Windows Sockets API calls.) 781 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1595 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1596 317 (If no error occurs, ) 317 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
932 1593 278 (getservbyport\(\)) 278 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1210 1596 861 ( returns a pointer to the servent structure described) 861 SB
615 1647 1367 (above.  Otherwise it returns a NULL pointer and a specific error number may be) 1367 SB
615 1697 342 (retrieved by calling ) 342 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
957 1694 385 (WSAGetLastError\(\).) 385 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1797 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1798 426 (WSANOTINITIALISED) 426 SB
1215 1798 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 1795 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 1798 317 ( must occur before) 317 SB
1215 1849 252 (using this API.) 252 SB
615 1949 331 (WSAENETDOWN) 331 SB
1215 1949 878 (The Windows Sockets implementation has detected) 878 SB
1215 1999 648 (that the network subsystem has failed.) 648 SB
615 2099 400 (WSANO_RECOVERY) 400 SB
1215 2099 831 (Non recoverable errors, FORMERR, REFUSED,) 831 SB
1215 2149 171 (NOTIMP.) 171 SB
615 2249 290 (WSANO_DATA) 290 SB
1215 2249 776 (Valid name, no data record of requested type.) 776 SB
615 2349 374 (WSAEINPROGRESS) 374 SB
1215 2349 757 (A blocking Windows Sockets operation is in) 757 SB
1215 2399 153 (progress.) 153 SB
615 2499 217 (WSAEINTR) 217 SB
1215 2499 625 (The \(blocking\) call was canceled via) 625 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1215 2546 492 (WSACancelBlockingCall\(\).) 492 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2699 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2697 509 (WSAAsyncGetServByPort\(\)) 509 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1124 2700 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1146 2697 299 (getservbyname\(\)) 299 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 77 77
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1401 117 658 (WSAAsyncGetHostByAddr ) 658 SB
2059 117 56 (70) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 292 1034 (4.3 Microsoft Windows-specific Extensions) 1034 SB
315 350 804 (4.3.1 WSAAsyncGetHostByAddr\(\)) 804 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 410 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 411 1250 (Get host information corresponding to an address - asynchronous version.) 1250 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 511 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 509 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 612 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 610 190 (HANDLE ) 190 SB
805 610 275 (PASCAL FAR ) 275 SB
1080 610 669 (WSAAsyncGetHostByAddr \( HWND) 669 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1749 613 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1760 612 98 (hWnd) 98 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1858 610 11 (,) 11 SB
/fm 256 def
2 51 277 610 B
1 F
n
615 662 220 (unsigned int) 220 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
835 665 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
846 664 100 (wMsg) 100 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
946 662 33 (,  ) 33 SB
979 662 104 (const ) 104 SB
1083 662 222 (char FAR * ) 222 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1305 664 79 (addr) 79 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1384 662 71 (, int) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1455 665 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1466 664 52 (len) 52 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1518 662 71 (, int) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1589 665 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1600 664 71 (type) 71 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1671 662 233 (, char FAR *) 233 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1904 665 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1915 664 54 (buf) 54 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1969 662 71 (, int) 71 SB
/fm 256 def
2 51 277 662 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 716 117 (buflen ) 117 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
732 714 28 (\);) 28 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 868 98 (hWnd) 98 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 869 1165 (The handle of the window which should receive a message when the) 1165 SB
915 921 558 (asynchronous request completes.) 558 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1020 100 (wMsg) 100 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1021 1010 (The message to be received when the asynchronous request) 1010 SB
915 1073 183 (completes.) 183 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1172 79 (addr) 79 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1173 30 (A) 30 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
945 1170 11 ( ) 11 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
956 1173 1064 (pointer to the network address for the host.  Host addresses are) 1064 SB
915 1225 491 (stored in network byte order.) 491 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1324 52 (len) 52 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1325 975 (The length of the address, which must be 4 for PF_INET.) 975 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1426 71 (type) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1427 850 (The type of the address, which must be PF_INET.) 850 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1528 54 (buf) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1529 1150 (A pointer to the data area to receive the hostent data.  Note that this) 1150 SB
915 1581 1190 (must be larger than the size of a hostent structure.  This is because the) 1190 SB
915 1631 1186 (data area supplied is used by the Windows Sockets implementation to) 1186 SB
915 1681 1166 (contain not only a hostent structure but any and all of the data which) 1166 SB
915 1731 1187 (is referenced by members of the hostent structure.  It is recommended) 1187 SB
915 1781 1022 (that you supply a buffer of MAXGETHOSTSTRUCT bytes.) 1022 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1880 106 (buflen) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1881 364 (The size of data area ) 364 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1279 1880 54 (buf) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1333 1881 123 ( above.) 123 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1982 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1983 751 (This function is an asynchronous version of ) 751 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1366 1980 286 (gethostbyaddr\(\)) 286 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1652 1983 395 (, and is used to retrieve) 395 SB
615 2034 1476 (host name and address information corresponding to a network address.  The Windows) 1476 SB
615 2084 1437 (Sockets implementation initiates the operation and returns to the caller immediately,) 1437 SB
615 2134 279 (passing back an ) 279 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
894 2134 434 (asynchronous task handle) 434 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1328 2134 778 ( which the application may use to identify the) 778 SB
615 2184 1414 (operation.  When the operation is completed, the results \(if any\) are copied into the) 1414 SB
615 2234 1348 (buffer provided by the caller and a message is sent to the application's window.) 1348 SB
615 2334 1227 (When the asynchronous operation is complete the application's window ) 1227 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1842 2333 98 (hWnd) 98 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1940 2334 150 ( receives) 150 SB
615 2386 154 (message ) 154 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
769 2385 100 (wMsg) 100 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
869 2386 110 (.  The ) 110 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
979 2385 142 (wParam) 142 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1121 2386 877 ( argument contains the asynchronous task handle as) 877 SB
615 2438 992 (returned by the original function call.  The high 16 bits of ) 992 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1607 2437 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1733 2438 301 ( contain any error) 301 SB
615 2490 902 (code.  The error code may be any error as defined in ) 902 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1517 2487 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1695 2490 398 (.  An error code of zero) 398 SB
615 2541 1327 (indicates successful completion of the asynchronous operation.  On successful) 1327 SB
615 2591 1493 (completion, the buffer supplied to the original function call contains a hostent structure.) 1493 SB
615 2641 1461 (To access the elements of this structure, the original buffer address should be cast to a) 1461 SB
615 2691 904 (hostent structure pointer and accessed as appropriate.) 904 SB
615 2791 1420 (Note that if the error code is WSAENOBUFS, it indicates that the size of the buffer) 1420 SB
615 2841 217 (specified by ) 217 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
832 2840 106 (buflen) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
938 2841 1021 ( in the original call was too small to contain all the resultant) 1021 SB
615 2893 754 (information.  In this case, the low 16 bits of ) 754 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1369 2892 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1495 2893 588 ( contain the size of buffer required) 588 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 78 78
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1401 117 658 (WSAAsyncGetHostByAddr ) 658 SB
2059 117 56 (71) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 270 1482 (to supply ALL the requisite information.  If the application decides that the partial data) 1482 SB
615 320 555 (is inadequate, it may reissue the ) 555 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1170 317 537 (WSAAsyncGetHostByAddr\(\) ) 537 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1707 320 330 (function call with a) 330 SB
615 371 1483 (buffer large enough to receive all the desired  information \(i.e.  no smaller than the low) 1483 SB
615 421 171 (16 bits of ) 171 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
786 420 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
912 421 25 (\).) 25 SB
615 523 1061 (The error code and buffer length should be extracted from the ) 1061 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1676 522 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1802 523 298 ( using the macros) 298 SB
615 575 1222 (WSAGETASYNCERROR and WSAGETASYNCBUFLEN, defined in ) 1222 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1837 572 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2015 575 58 ( as:) 58 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 673 1450 (#define WSAGETASYNCERROR\(lParam\)            HIWORD\(lParam\)) 1450 SB
615 718 1450 (#define WSAGETASYNCBUFLEN\(lParam\)           LOWORD\(lParam\)) 1450 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 816 1361 (The use of these macros will maximize the portability of the source code for the) 1361 SB
615 866 200 (application.) 200 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 965 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 966 1467 (The return value specifies whether or not the asynchronous operation was successfully) 1467 SB
615 1017 464 (initiated.  Note that it does ) 464 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
1079 1017 54 (not) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1133 1017 802 ( imply success or failure of the operation itself.) 802 SB
615 1117 728 (If the operation was successfully initiated, ) 728 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1343 1114 526 (WSAAsyncGetHostByAddr\(\)) 526 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1869 1117 158 ( returns a) 158 SB
615 1168 1480 (nonzero value of type HANDLE which is the asynchronous task handle for the request.) 1480 SB
615 1218 1370 (This value can be used in two ways.  It can be used to cancel the operation using) 1370 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1265 500 (WSACancelAsyncRequest\(\)) 500 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1115 1268 988 (.  It can also be used to match up asynchronous operations) 988 SB
615 1319 761 (and completion messages, by examining the ) 761 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1376 1318 142 (wParam) 142 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1518 1319 336 ( message argument.) 336 SB
615 1421 898 (If the asynchronous operation could not be initiated, ) 898 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1513 1418 526 (WSAAsyncGetHostByAddr\(\)) 526 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1472 1300 (returns a zero value, and a specific error number may be retrieved by calling) 1300 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1519 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
989 1522 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1622 216 (Comments) 216 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1623 1481 (The buffer supplied to this function is used by the Windows Sockets implementation to) 1481 SB
615 1674 1397 (construct a hostent structure together with the contents of data areas referenced by) 1397 SB
615 1724 1394 (members of the same hostent structure.  To avoid the WSAENOBUFS error noted) 1394 SB
615 1774 1419 (above, the application should provide a buffer of at least MAXGETHOSTSTRUCT) 1419 SB
615 1824 342 (bytes \(as defined in ) 342 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
957 1821 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1135 1824 25 (\).) 25 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1923 196 (Notes For) 196 SB
315 1973 358 (Windows Sockets) 358 SB
315 2024 192 (Suppliers) 192 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2025 1480 (It is the responsibility of the Windows Sockets implementation to ensure that messages) 1480 SB
615 2076 799 (are successfully posted to the application.  If a ) 799 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1414 2073 257 (PostMessage\(\)) 257 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1671 2076 329 ( operation fails, the) 329 SB
615 2127 592 (Windows Sockets implementation ) 592 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
1207 2127 82 (must) 82 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1289 2127 357 ( re-post that message) 357 SB
1646 2127 387 ( as long as the window) 387 SB
/fm 256 def
2 49 277 2124 B
1 F
n
615 2177 96 (exists) 96 SB
711 2177 11 (.) 11 SB
/fm 256 def
2 49 277 2174 B
1 F
n
615 2277 1439 (Windows Sockets suppliers should use the WSAMAKEASYNCREPLY macro when) 1439 SB
615 2327 283 (constructing the ) 283 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
898 2326 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1024 2327 272 ( in the message.) 272 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2428 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2429 1478 (The following error codes may be set when an application window receives a message.) 1478 SB
615 2480 895 (As described above, they may be extracted from the ) 895 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1510 2479 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1636 2480 461 ( in the reply message using) 461 SB
615 2532 647 (the WSAGETASYNCERROR macro.) 647 SB
615 2632 331 (WSAENETDOWN) 331 SB
1215 2632 878 (The Windows Sockets implementation has detected) 878 SB
1215 2682 648 (that the network subsystem has failed.) 648 SB
615 2782 283 (WSAENOBUFS) 283 SB
1215 2782 679 (No/insufficient buffer space is available) 679 SB
615 2882 473 (WSAHOST_NOT_FOUND) 473 SB
1215 2882 642 (Authoritative Answer Host not found.) 642 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 79 79
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1401 117 658 (WSAAsyncGetHostByAddr ) 658 SB
2059 117 56 (72) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 320 332 (WSATRY_AGAIN) 332 SB
1215 320 633 (Non-Authoritative Host not found, or) 633 SB
1215 370 265 (SERVERFAIL.) 265 SB
615 470 400 (WSANO_RECOVERY) 400 SB
1215 470 831 (Non recoverable errors, FORMERR, REFUSED,) 831 SB
1215 520 171 (NOTIMP.) 171 SB
615 620 290 (WSANO_DATA) 290 SB
1215 620 776 (Valid name, no data record of requested type.) 776 SB
615 720 1432 (The following errors may occur at the time of the function call, and indicate that the) 1432 SB
615 770 785 (asynchronous operation could not be initiated.) 785 SB
615 870 426 (WSANOTINITIALISED) 426 SB
1215 870 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 867 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 870 317 ( must occur before) 317 SB
1215 921 252 (using this API.) 252 SB
615 1021 331 (WSAENETDOWN) 331 SB
1215 1021 878 (The Windows Sockets implementation has detected) 878 SB
1215 1071 648 (that the network subsystem has failed.) 648 SB
615 1171 374 (WSAEINPROGRESS) 374 SB
1215 1171 757 (A blocking Windows Sockets operation is in) 757 SB
1215 1221 153 (progress.) 153 SB
615 1321 417 (WSAEWOULDBLOCK) 417 SB
1215 1321 876 (The asynchronous operation cannot be scheduled at) 876 SB
1215 1371 875 (this time due to resource or other constraints within) 875 SB
1215 1421 655 (the Windows Sockets implementation.) 655 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1520 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1518 286 (gethostbyaddr\(\)) 286 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
901 1521 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
923 1518 500 (WSACancelAsyncRequest\(\)) 500 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 80 80
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1382 117 677 (WSAAsyncGetHostByName ) 677 SB
2059 117 56 (73) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 823 (4.3.2 WSAAsyncGetHostByName\(\)) 823 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 1265 (Get host information corresponding to a hostname - asynchronous version.) 1265 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 190 (HANDLE ) 190 SB
805 527 275 (PASCAL FAR ) 275 SB
1080 527 679 (WSAAsyncGetHostByName \( HWND) 679 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1759 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1770 529 98 (hWnd) 98 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1868 527 11 (,) 11 SB
/fm 256 def
2 51 277 527 B
1 F
n
615 579 220 (unsigned int) 220 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
835 582 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
846 581 100 (wMsg) 100 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
946 579 22 (, ) 22 SB
968 579 115 ( const ) 115 SB
1083 579 222 (char FAR * ) 222 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1305 581 91 (name) 91 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1396 579 233 (, char FAR *) 233 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1629 582 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1640 581 54 (buf) 54 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1694 579 71 (, int) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1765 582 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1776 581 117 (buflen ) 117 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1893 579 28 (\);) 28 SB
/fm 256 def
2 51 277 579 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 733 98 (hWnd) 98 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 734 1165 (The handle of the window which should receive a message when the) 1165 SB
915 786 558 (asynchronous request completes.) 558 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 885 100 (wMsg) 100 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 886 1010 (The message to be received when the asynchronous request) 1010 SB
915 938 183 (completes.) 183 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1037 91 (name) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1038 30 (A) 30 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
945 1035 11 ( ) 11 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
956 1038 531 (pointer to the name of the host.) 531 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1139 54 (buf) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1140 1150 (A pointer to the data area to receive the hostent data.  Note that this) 1150 SB
915 1192 1190 (must be larger than the size of a hostent structure.  This is because the) 1190 SB
915 1242 1186 (data area supplied is used by the Windows Sockets implementation to) 1186 SB
915 1292 1166 (contain not only a hostent structure but any and all of the data which) 1166 SB
915 1342 1187 (is referenced by members of the hostent structure.  It is recommended) 1187 SB
915 1392 1022 (that you supply a buffer of MAXGETHOSTSTRUCT bytes.) 1022 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1491 106 (buflen) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1492 364 (The size of data area ) 364 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1279 1491 54 (buf) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1333 1492 123 ( above.) 123 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1593 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1594 751 (This function is an asynchronous version of ) 751 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1366 1591 298 (gethostbyname\(\)) 298 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1664 1594 395 (, and is used to retrieve) 395 SB
615 1645 1363 (host name and address information corresponding to a hostname.  The Windows) 1363 SB
615 1695 1437 (Sockets implementation initiates the operation and returns to the caller immediately,) 1437 SB
615 1745 279 (passing back an ) 279 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
894 1745 434 (asynchronous task handle) 434 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1328 1745 778 ( which the application may use to identify the) 778 SB
615 1795 1414 (operation.  When the operation is completed, the results \(if any\) are copied into the) 1414 SB
615 1845 1348 (buffer provided by the caller and a message is sent to the application's window.) 1348 SB
615 1945 1227 (When the asynchronous operation is complete the application's window ) 1227 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1842 1944 98 (hWnd) 98 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1940 1945 150 ( receives) 150 SB
615 1997 154 (message ) 154 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
769 1996 100 (wMsg) 100 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
869 1997 110 (.  The ) 110 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
979 1996 142 (wParam) 142 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1121 1997 877 ( argument contains the asynchronous task handle as) 877 SB
615 2049 992 (returned by the original function call.  The high 16 bits of ) 992 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1607 2048 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1733 2049 301 ( contain any error) 301 SB
615 2101 902 (code.  The error code may be any error as defined in ) 902 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1517 2098 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1695 2101 398 (.  An error code of zero) 398 SB
615 2152 1327 (indicates successful completion of the asynchronous operation.  On successful) 1327 SB
615 2202 1493 (completion, the buffer supplied to the original function call contains a hostent structure.) 1493 SB
615 2252 1461 (To access the elements of this structure, the original buffer address should be cast to a) 1461 SB
615 2302 904 (hostent structure pointer and accessed as appropriate.) 904 SB
615 2402 1420 (Note that if the error code is WSAENOBUFS, it indicates that the size of the buffer) 1420 SB
615 2452 217 (specified by ) 217 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
832 2451 106 (buflen) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
938 2452 1021 ( in the original call was too small to contain all the resultant) 1021 SB
615 2504 754 (information.  In this case, the low 16 bits of ) 754 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1369 2503 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1495 2504 588 ( contain the size of buffer required) 588 SB
615 2556 1482 (to supply ALL the requisite information.  If the application decides that the partial data) 1482 SB
615 2606 555 (is inadequate, it may reissue the ) 555 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1170 2603 547 (WSAAsyncGetHostByName\(\) ) 547 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1717 2606 330 (function call with a) 330 SB
615 2657 1472 (buffer large enough to receive all the desired  information \(i.e. no smaller than the low) 1472 SB
615 2707 171 (16 bits of ) 171 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
786 2706 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
912 2707 25 (\).) 25 SB
615 2809 1061 (The error code and buffer length should be extracted from the ) 1061 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1676 2808 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1802 2809 298 ( using the macros) 298 SB
615 2861 1222 (WSAGETASYNCERROR and WSAGETASYNCBUFLEN, defined in ) 1222 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1837 2858 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2015 2861 58 ( as:) 58 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 81 81
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1382 117 677 (WSAAsyncGetHostByName ) 677 SB
2059 117 56 (74) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 267 1450 (#define WSAGETASYNCERROR\(lParam\)            HIWORD\(lParam\)) 1450 SB
615 312 1450 (#define WSAGETASYNCBUFLEN\(lParam\)           LOWORD\(lParam\)) 1450 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 410 1361 (The use of these macros will maximize the portability of the source code for the) 1361 SB
615 460 200 (application.) 200 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 609 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 610 1467 (The return value specifies whether or not the asynchronous operation was successfully) 1467 SB
615 661 464 (initiated.  Note that it does ) 464 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
1079 661 54 (not) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1133 661 802 ( imply success or failure of the operation itself.) 802 SB
615 761 728 (If the operation was successfully initiated, ) 728 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1343 758 536 (WSAAsyncGetHostByName\(\)) 536 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1879 761 158 ( returns a) 158 SB
615 812 1480 (nonzero value of type HANDLE which is the asynchronous task handle for the request.) 1480 SB
615 862 1370 (This value can be used in two ways.  It can be used to cancel the operation using) 1370 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 909 500 (WSACancelAsyncRequest\(\)) 500 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1115 912 988 (.  It can also be used to match up asynchronous operations) 988 SB
615 963 761 (and completion messages, by examining the ) 761 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1376 962 142 (wParam) 142 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1518 963 336 ( message argument.) 336 SB
615 1065 898 (If the asynchronous operation could not be initiated, ) 898 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1513 1062 536 (WSAAsyncGetHostByName\(\)) 536 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1116 1300 (returns a zero value, and a specific error number may be retrieved by calling) 1300 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1163 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
989 1166 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1266 216 (Comments) 216 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1267 1481 (The buffer supplied to this function is used by the Windows Sockets implementation to) 1481 SB
615 1318 1397 (construct a hostent structure together with the contents of data areas referenced by) 1397 SB
615 1368 1394 (members of the same hostent structure.  To avoid the WSAENOBUFS error noted) 1394 SB
615 1418 1419 (above, the application should provide a buffer of at least MAXGETHOSTSTRUCT) 1419 SB
615 1468 342 (bytes \(as defined in ) 342 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
957 1465 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1135 1468 25 (\).) 25 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1567 196 (Notes For) 196 SB
315 1617 358 (Windows Sockets) 358 SB
315 1668 192 (Suppliers) 192 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1669 973 (It is the responsibility of the Windows Sockets implemen) 973 SB
1588 1669 97 (tation) 97 SB
1685 1669 410 ( to ensure that messages) 410 SB
615 1720 799 (are successfully posted to the application.  If a ) 799 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1414 1717 257 (PostMessage\(\)) 257 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1671 1720 329 ( operation fails, the) 329 SB
615 1771 592 (Windows Sockets implementation ) 592 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
1207 1771 82 (must) 82 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1289 1771 357 ( re-post that message) 357 SB
1646 1771 387 ( as long as the window) 387 SB
/fm 256 def
2 49 277 1768 B
1 F
n
615 1821 96 (exists) 96 SB
711 1821 11 (.) 11 SB
/fm 256 def
2 49 277 1818 B
1 F
n
615 1921 1439 (Windows Sockets suppliers should use the WSAMAKEASYNCREPLY macro when) 1439 SB
615 1971 283 (constructing the ) 283 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
898 1970 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1024 1971 272 ( in the message.) 272 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2072 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2073 1478 (The following error codes may be set when an application window receives a message.) 1478 SB
615 2124 895 (As described above, they may be extracted from the ) 895 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1510 2123 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1636 2124 461 ( in the reply message using) 461 SB
615 2176 647 (the WSAGETASYNCERROR macro.) 647 SB
615 2276 331 (WSAENETDOWN) 331 SB
1215 2276 878 (The Windows Sockets implementation has detected) 878 SB
1215 2326 648 (that the network subsystem has failed.) 648 SB
615 2426 283 (WSAENOBUFS) 283 SB
1215 2426 679 (No/insufficient buffer space is available) 679 SB
615 2526 473 (WSAHOST_NOT_FOUND) 473 SB
1215 2526 642 (Authoritative Answer Host not found.) 642 SB
615 2626 332 (WSATRY_AGAIN) 332 SB
1215 2626 633 (Non-Authoritative Host not found, or) 633 SB
1215 2676 265 (SERVERFAIL.) 265 SB
615 2776 400 (WSANO_RECOVERY) 400 SB
1215 2776 831 (Non recoverable errors, FORMERR, REFUSED,) 831 SB
1215 2826 171 (NOTIMP.) 171 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 82 82
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1382 117 677 (WSAAsyncGetHostByName ) 677 SB
2059 117 56 (75) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 270 290 (WSANO_DATA) 290 SB
1215 270 776 (Valid name, no data record of requested type.) 776 SB
615 370 1432 (The following errors may occur at the time of the function call, and indicate that the) 1432 SB
615 420 785 (asynchronous operation could not be initiated.) 785 SB
615 520 426 (WSANOTINITIALISED) 426 SB
1215 520 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 517 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 520 317 ( must occur before) 317 SB
1215 571 252 (using this API.) 252 SB
615 671 331 (WSAENETDOWN) 331 SB
1215 671 878 (The Windows Sockets implementation has detected) 878 SB
1215 721 648 (that the network subsystem has failed.) 648 SB
615 821 374 (WSAEINPROGRESS) 374 SB
1215 821 757 (A blocking Windows Sockets operation is in) 757 SB
1215 871 153 (progress.) 153 SB
615 971 417 (WSAEWOULDBLOCK) 417 SB
1215 971 876 (The asynchronous operation cannot be scheduled at) 876 SB
1215 1021 875 (this time due to resource or other constraints within) 875 SB
1215 1071 655 (the Windows Sockets implementation.) 655 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1170 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1168 298 (gethostbyname\(\)) 298 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
913 1171 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
935 1168 500 (WSACancelAsyncRequest\(\)) 500 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 83 83
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1363 117 696 (WSAAsyncGetProtoByName ) 696 SB
2059 117 56 (76) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 842 (4.3.3 WSAAsyncGetProtoByName\(\)) 842 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 1418 (Get protocol information corresponding to a protocol name - asynchronous version.) 1418 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 190 (HANDLE ) 190 SB
805 527 275 (PASCAL FAR ) 275 SB
1080 527 696 (WSAAsyncGetProtoByName \( HWND) 696 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1776 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1787 529 98 (hWnd) 98 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1885 527 11 (,) 11 SB
/fm 256 def
2 51 277 527 B
1 F
n
615 579 220 (unsigned int) 220 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
835 582 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
846 581 100 (wMsg) 100 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
946 579 22 (, ) 22 SB
968 579 115 ( const ) 115 SB
1083 579 222 (char FAR * ) 222 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1305 581 91 (name) 91 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1396 579 233 (, char FAR *) 233 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1629 582 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1640 581 54 (buf) 54 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1694 579 71 (, int) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1765 582 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1776 581 117 (buflen ) 117 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1893 579 28 (\);) 28 SB
/fm 256 def
2 51 277 579 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 733 98 (hWnd) 98 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 734 1165 (The handle of the window which should receive a message when the) 1165 SB
915 786 558 (asynchronous request completes.) 558 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 885 100 (wMsg) 100 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 886 1010 (The message to be received when the asynchronous request) 1010 SB
915 938 183 (completes.) 183 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1037 91 (name) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1038 30 (A) 30 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
945 1035 11 ( ) 11 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
956 1038 742 (pointer to the protocol name to be resolved.) 742 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1139 54 (buf) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1140 1169 (A pointer to the data area to receive the protoent data.  Note that this) 1169 SB
915 1192 1146 (must be larger than the size of a protoent structure.  This is because) 1146 SB
915 1242 927 (the data area supplied is used by the Windows Sockets) 927 SB
915 1292 1148 (implementation to contain not only a protoent structure but any and) 1148 SB
915 1342 1057 (all of the data which is referenced by members of the protoent) 1057 SB
915 1392 959 (structure.  It is recommended that you supply a buffer of) 959 SB
915 1442 560 (MAXGETHOSTSTRUCT bytes.) 560 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1541 106 (buflen) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1542 364 (The size of data area ) 364 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1279 1541 54 (buf) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1333 1542 123 ( above.) 123 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1643 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1644 751 (This function is an asynchronous version of ) 751 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1366 1641 322 (getprotobyname\(\)) 322 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1688 1644 395 (, and is used to retrieve) 395 SB
615 1695 1371 (the protocol name and number corresponding to a protocol name.  The Windows) 1371 SB
615 1745 1437 (Sockets implementation initiates the operation and returns to the caller immediately,) 1437 SB
615 1795 279 (passing back an ) 279 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
894 1795 434 (asynchronous task handle) 434 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1328 1795 778 ( which the application may use to identify the) 778 SB
615 1845 1414 (operation.  When the operation is completed, the results \(if any\) are copied into the) 1414 SB
615 1895 1348 (buffer provided by the caller and a message is sent to the application's window.) 1348 SB
615 1995 1227 (When the asynchronous operation is complete the application's window ) 1227 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1842 1994 98 (hWnd) 98 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1940 1995 150 ( receives) 150 SB
615 2047 154 (message ) 154 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
769 2046 100 (wMsg) 100 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
869 2047 110 (.  The ) 110 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
979 2046 142 (wParam) 142 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1121 2047 877 ( argument contains the asynchronous task handle as) 877 SB
615 2099 992 (returned by the original function call.  The high 16 bits of ) 992 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1607 2098 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1733 2099 301 ( contain any error) 301 SB
615 2151 902 (code.  The error code may be any error as defined in ) 902 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1517 2148 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1695 2151 398 (.  An error code of zero) 398 SB
615 2202 1327 (indicates successful completion of the asynchronous operation.  On successful) 1327 SB
615 2252 1342 (completion, the buffer supplied to the original function call contains a protoent) 1342 SB
615 2302 1491 (structure.  To access the elements of this structure, the original buffer address should be) 1491 SB
615 2352 1074 (cast to a protoent structure pointer and accessed as appropriate.) 1074 SB
615 2452 1420 (Note that if the error code is WSAENOBUFS, it indicates that the size of the buffer) 1420 SB
615 2502 217 (specified by ) 217 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
832 2501 106 (buflen) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
938 2502 1021 ( in the original call was too small to contain all the resultant) 1021 SB
615 2554 754 (information.  In this case, the low 16 bits of ) 754 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1369 2553 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1495 2554 588 ( contain the size of buffer required) 588 SB
615 2606 1482 (to supply ALL the requisite information.  If the application decides that the partial data) 1482 SB
615 2656 555 (is inadequate, it may reissue the ) 555 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1170 2653 564 (WSAAsyncGetProtoByName\(\) ) 564 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1734 2656 330 (function call with a) 330 SB
615 2707 1483 (buffer large enough to receive all the desired  information \(i.e.  no smaller than the low) 1483 SB
615 2757 171 (16 bits of ) 171 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
786 2756 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
912 2757 25 (\).) 25 SB
615 2859 1061 (The error code and buffer length should be extracted from the ) 1061 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1676 2858 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1802 2859 298 ( using the macros) 298 SB
615 2911 1222 (WSAGETASYNCERROR and WSAGETASYNCBUFLEN, defined in ) 1222 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1837 2908 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2015 2911 58 ( as:) 58 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 84 84
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1363 117 696 (WSAAsyncGetProtoByName ) 696 SB
2059 117 56 (77) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 317 1450 (#define WSAGETASYNCERROR\(lParam\)            HIWORD\(lParam\)) 1450 SB
615 362 1450 (#define WSAGETASYNCBUFLEN\(lParam\)           LOWORD\(lParam\)) 1450 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 460 1361 (The use of these macros will maximize the portability of the source code for the) 1361 SB
615 510 200 (application.) 200 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 659 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 660 1467 (The return value specifies whether or not the asynchronous operation was successfully) 1467 SB
615 711 464 (initiated.  Note that it does ) 464 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
1079 711 54 (not) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1133 711 802 ( imply success or failure of the operation itself.) 802 SB
615 811 728 (If the operation was successfully initiated, ) 728 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1343 808 553 (WSAAsyncGetProtoByName\(\)) 553 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1896 811 158 ( returns a) 158 SB
615 862 1480 (nonzero value of type HANDLE which is the asynchronous task handle for the request.) 1480 SB
615 912 1370 (This value can be used in two ways.  It can be used to cancel the operation using) 1370 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 959 500 (WSACancelAsyncRequest\(\)) 500 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1115 962 988 (.  It can also be used to match up asynchronous operations) 988 SB
615 1013 761 (and completion messages, by examining the ) 761 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1376 1012 142 (wParam) 142 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1518 1013 336 ( message argument.) 336 SB
615 1115 898 (If the asynchronous operation could not be initiated, ) 898 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1513 1112 553 (WSAAsyncGetProtoByName\(\)) 553 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1166 1300 (returns a zero value, and a specific error number may be retrieved by calling) 1300 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1213 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
989 1216 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1316 216 (Comments) 216 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1317 1481 (The buffer supplied to this function is used by the Windows Sockets implementation to) 1481 SB
615 1368 1416 (construct a protoent structure together with the contents of data areas referenced by) 1416 SB
615 1418 1413 (members of the same protoent structure.  To avoid the WSAENOBUFS error noted) 1413 SB
615 1468 1419 (above, the application should provide a buffer of at least MAXGETHOSTSTRUCT) 1419 SB
615 1518 342 (bytes \(as defined in ) 342 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
957 1515 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1135 1518 25 (\).) 25 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1617 196 (Notes For) 196 SB
315 1667 358 (Windows Sockets) 358 SB
315 1718 192 (Suppliers) 192 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1719 1480 (It is the responsibility of the Windows Sockets implementation to ensure that messages) 1480 SB
615 1770 799 (are successfully posted to the application.  If a ) 799 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1414 1767 257 (PostMessage\(\)) 257 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1671 1770 329 ( operation fails, the) 329 SB
615 1821 592 (Windows Sockets implementation ) 592 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
1207 1821 82 (must) 82 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1289 1821 357 ( re-post that message) 357 SB
1646 1821 387 ( as long as the window) 387 SB
/fm 256 def
2 49 277 1818 B
1 F
n
615 1871 96 (exists) 96 SB
711 1871 11 (.) 11 SB
/fm 256 def
2 49 277 1868 B
1 F
n
615 1971 1439 (Windows Sockets suppliers should use the WSAMAKEASYNCREPLY macro when) 1439 SB
615 2021 283 (constructing the ) 283 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
898 2020 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1024 2021 272 ( in the message.) 272 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2122 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2123 1478 (The following error codes may be set when an application window receives a message.) 1478 SB
615 2174 895 (As described above, they may be extracted from the ) 895 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1510 2173 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1636 2174 461 ( in the reply message using) 461 SB
615 2226 647 (the WSAGETASYNCERROR macro.) 647 SB
615 2326 331 (WSAENETDOWN) 331 SB
1215 2326 878 (The Windows Sockets implementation has detected) 878 SB
1215 2376 648 (that the network subsystem has failed.) 648 SB
615 2476 283 (WSAENOBUFS) 283 SB
1215 2476 679 (No/insufficient buffer space is available) 679 SB
615 2576 473 (WSAHOST_NOT_FOUND) 473 SB
1215 2576 642 (Authoritative Answer Host not found.) 642 SB
615 2676 332 (WSATRY_AGAIN) 332 SB
1215 2676 633 (Non-Authoritative Host not found, or) 633 SB
1215 2726 265 (SERVERFAIL.) 265 SB
615 2826 400 (WSANO_RECOVERY) 400 SB
1215 2826 831 (Non recoverable errors, FORMERR, REFUSED,) 831 SB
1215 2876 171 (NOTIMP.) 171 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 85 85
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1363 117 696 (WSAAsyncGetProtoByName ) 696 SB
2059 117 56 (78) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 320 290 (WSANO_DATA) 290 SB
1215 320 776 (Valid name, no data record of requested type.) 776 SB
615 420 1432 (The following errors may occur at the time of the function call, and indicate that the) 1432 SB
615 470 785 (asynchronous operation could not be initiated.) 785 SB
615 570 426 (WSANOTINITIALISED) 426 SB
1215 570 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 567 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 570 317 ( must occur before) 317 SB
1215 621 252 (using this API.) 252 SB
615 721 331 (WSAENETDOWN) 331 SB
1215 721 878 (The Windows Sockets implementation has detected) 878 SB
1215 771 648 (that the network subsystem has failed.) 648 SB
615 871 374 (WSAEINPROGRESS) 374 SB
1215 871 757 (A blocking Windows Sockets operation is in) 757 SB
1215 921 153 (progress.) 153 SB
615 1021 417 (WSAEWOULDBLOCK) 417 SB
1215 1021 876 (The asynchronous operation cannot be scheduled at) 876 SB
1215 1071 875 (this time due to resource or other constraints within) 875 SB
1215 1121 655 (the Windows Sockets implementation.) 655 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1220 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1218 322 (getprotobyname\(\)) 322 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
937 1221 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
959 1218 500 (WSACancelAsyncRequest\(\)) 500 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 86 86
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1310 117 749 (WSAAsyncGetProtoByNumber ) 749 SB
2059 117 56 (79) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 895 (4.3.4 WSAAsyncGetProtoByNumber\(\)) 895 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 1455 (Get protocol information corresponding to a protocol number - asynchronous version.) 1455 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 190 (HANDLE ) 190 SB
805 527 275 (PASCAL FAR ) 275 SB
1080 527 740 (WSAAsyncGetProtoByNumber \( HWND) 740 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1820 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1831 529 98 (hWnd) 98 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1929 527 11 (,) 11 SB
/fm 256 def
2 51 277 527 B
1 F
n
615 579 220 (unsigned int) 220 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
835 582 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
846 581 100 (wMsg) 100 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
946 579 82 (,  int) 82 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1028 582 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1039 581 128 (number) 128 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1167 579 233 (, char FAR *) 233 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1400 582 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1411 581 54 (buf) 54 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1465 579 71 (, int) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1536 582 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1547 581 117 (buflen ) 117 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1664 579 28 (\);) 28 SB
/fm 256 def
2 51 277 579 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 733 98 (hWnd) 98 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 734 1165 (The handle of the window which should receive a message when the) 1165 SB
915 786 558 (asynchronous request completes.) 558 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 885 100 (wMsg) 100 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 886 1010 (The message to be received when the asynchronous request) 1010 SB
915 938 183 (completes.) 183 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1037 128 (number) 128 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1038 938 (The protocol number to be resolved, in host byte order.) 938 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1139 54 (buf) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1140 1169 (A pointer to the data area to receive the protoent data.  Note that this) 1169 SB
915 1192 1146 (must be larger than the size of a protoent structure.  This is because) 1146 SB
915 1242 927 (the data area supplied is used by the Windows Sockets) 927 SB
915 1292 1148 (implementation to contain not only a protoent structure but any and) 1148 SB
915 1342 1057 (all of the data which is referenced by members of the protoent) 1057 SB
915 1392 959 (structure.  It is recommended that you supply a buffer of) 959 SB
915 1442 560 (MAXGETHOSTSTRUCT bytes.) 560 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1541 106 (buflen) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1542 364 (The size of data area ) 364 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1279 1541 54 (buf) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1333 1542 123 ( above.) 123 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1643 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1644 751 (This function is an asynchronous version of ) 751 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1366 1641 366 (getprotobynumber\(\)) 366 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1732 1644 254 (, and is used to) 254 SB
615 1695 1377 (retrieve the protocol name and number corresponding to a protocol number.  The) 1377 SB
615 1745 1374 (Windows Sockets implementation initiates the operation and returns to the caller) 1374 SB
615 1795 514 (immediately, passing back an ) 514 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
1129 1795 434 (asynchronous task handle) 434 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1563 1795 528 ( which the application may use) 528 SB
615 1845 1400 (to identify the operation.  When the operation is completed, the results \(if any\) are) 1400 SB
615 1895 1455 (copied into the buffer provided by the caller and a message is sent to the application's) 1455 SB
615 1945 146 (window.) 146 SB
615 2045 1227 (When the asynchronous operation is complete the application's window ) 1227 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1842 2044 98 (hWnd) 98 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1940 2045 150 ( receives) 150 SB
615 2097 154 (message ) 154 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
769 2096 100 (wMsg) 100 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
869 2097 110 (.  The ) 110 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
979 2096 142 (wParam) 142 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1121 2097 877 ( argument contains the asynchronous task handle as) 877 SB
615 2149 992 (returned by the original function call.  The high 16 bits of ) 992 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1607 2148 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1733 2149 301 ( contain any error) 301 SB
615 2201 902 (code.  The error code may be any error as defined in ) 902 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1517 2198 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1695 2201 398 (.  An error code of zero) 398 SB
615 2252 1327 (indicates successful completion of the asynchronous operation.  On successful) 1327 SB
615 2302 1342 (completion, the buffer supplied to the original function call contains a protoent) 1342 SB
615 2352 1491 (structure.  To access the elements of this structure, the original buffer address should be) 1491 SB
615 2402 1074 (cast to a protoent structure pointer and accessed as appropriate.) 1074 SB
615 2502 1420 (Note that if the error code is WSAENOBUFS, it indicates that the size of the buffer) 1420 SB
615 2552 217 (specified by ) 217 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
832 2551 106 (buflen) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
938 2552 1021 ( in the original call was too small to contain all the resultant) 1021 SB
615 2604 754 (information.  In this case, the low 16 bits of ) 754 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1369 2603 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1495 2604 588 ( contain the size of buffer required) 588 SB
615 2656 1482 (to supply ALL the requisite information.  If the application decides that the partial data) 1482 SB
615 2706 555 (is inadequate, it may reissue the ) 555 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1170 2703 608 (WSAAsyncGetProtoByNumber\(\) ) 608 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1778 2706 330 (function call with a) 330 SB
615 2757 1472 (buffer large enough to receive all the desired  information \(i.e. no smaller than the low) 1472 SB
615 2807 171 (16 bits of ) 171 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
786 2806 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
912 2807 25 (\).) 25 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 87 87
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1310 117 749 (WSAAsyncGetProtoByNumber ) 749 SB
2059 117 56 (80) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 270 1061 (The error code and buffer length should be extracted from the ) 1061 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1676 269 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1802 270 298 ( using the macros) 298 SB
615 322 1222 (WSAGETASYNCERROR and WSAGETASYNCBUFLEN, defined in ) 1222 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1837 319 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2015 322 58 ( as:) 58 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 420 1450 (#define WSAGETASYNCERROR\(lParam\)            HIWORD\(lParam\)) 1450 SB
615 465 1450 (#define WSAGETASYNCBUFLEN\(lParam\)           LOWORD\(lParam\)) 1450 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 563 1361 (The use of these macros will maximize the portability of the source code for the) 1361 SB
615 613 200 (application.) 200 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 762 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 763 1467 (The return value specifies whether or not the asynchronous operation was successfully) 1467 SB
615 814 464 (initiated.  Note that it does ) 464 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
1079 814 54 (not) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1133 814 802 ( imply success or failure of the operation itself.) 802 SB
615 914 728 (If the operation was successfully initiated, ) 728 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1343 911 597 (WSAAsyncGetProtoByNumber\(\)) 597 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1940 914 158 ( returns a) 158 SB
615 965 1480 (nonzero value of type HANDLE which is the asynchronous task handle for the request.) 1480 SB
615 1015 1370 (This value can be used in two ways.  It can be used to cancel the operation using) 1370 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1062 500 (WSACancelAsyncRequest\(\)) 500 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1115 1065 988 (.  It can also be used to match up asynchronous operations) 988 SB
615 1116 761 (and completion messages, by examining the ) 761 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1376 1115 142 (wParam) 142 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1518 1116 336 ( message argument.) 336 SB
615 1218 898 (If the asynchronous operation could not be initiated, ) 898 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1513 1215 597 (WSAAsyncGetProtoByNumber\(\)) 597 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1269 1300 (returns a zero value, and a specific error number may be retrieved by calling) 1300 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1316 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
989 1319 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1419 216 (Comments) 216 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1420 1481 (The buffer supplied to this function is used by the Windows Sockets implementation to) 1481 SB
615 1471 1416 (construct a protoent structure together with the contents of data areas referenced by) 1416 SB
615 1521 1413 (members of the same protoent structure.  To avoid the WSAENOBUFS error noted) 1413 SB
615 1571 1419 (above, the application should provide a buffer of at least MAXGETHOSTSTRUCT) 1419 SB
615 1621 342 (bytes \(as defined in ) 342 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
957 1618 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1135 1621 25 (\).) 25 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1720 196 (Notes For) 196 SB
315 1770 358 (Windows Sockets) 358 SB
315 1821 192 (Suppliers) 192 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1822 1480 (It is the responsibility of the Windows Sockets implementation to ensure that messages) 1480 SB
615 1873 799 (are successfully posted to the application.  If a ) 799 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1414 1870 257 (PostMessage\(\)) 257 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1671 1873 329 ( operation fails, the) 329 SB
615 1924 592 (Windows Sockets implementation ) 592 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
1207 1924 82 (must) 82 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1289 1924 357 ( re-post that message) 357 SB
1646 1924 387 ( as long as the window) 387 SB
/fm 256 def
2 49 277 1921 B
1 F
n
615 1974 96 (exists) 96 SB
711 1974 11 (.) 11 SB
/fm 256 def
2 49 277 1971 B
1 F
n
615 2074 1439 (Windows Sockets suppliers should use the WSAMAKEASYNCREPLY macro when) 1439 SB
615 2124 283 (constructing the ) 283 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
898 2123 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1024 2124 272 ( in the message.) 272 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2225 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2226 1478 (The following error codes may be set when an application window receives a message.) 1478 SB
615 2277 895 (As described above, they may be extracted from the ) 895 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1510 2276 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1636 2277 461 ( in the reply message using) 461 SB
615 2329 647 (the WSAGETASYNCERROR macro.) 647 SB
615 2429 331 (WSAENETDOWN) 331 SB
1215 2429 878 (The Windows Sockets implementation has detected) 878 SB
1215 2479 648 (that the network subsystem has failed.) 648 SB
615 2579 283 (WSAENOBUFS) 283 SB
1215 2579 679 (No/insufficient buffer space is available) 679 SB
615 2679 473 (WSAHOST_NOT_FOUND) 473 SB
1215 2679 642 (Authoritative Answer Host not found.) 642 SB
615 2779 332 (WSATRY_AGAIN) 332 SB
1215 2779 633 (Non-Authoritative Host not found, or) 633 SB
1215 2829 265 (SERVERFAIL.) 265 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 88 88
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1310 117 749 (WSAAsyncGetProtoByNumber ) 749 SB
2059 117 56 (81) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 270 400 (WSANO_RECOVERY) 400 SB
1215 270 831 (Non recoverable errors, FORMERR, REFUSED,) 831 SB
1215 320 171 (NOTIMP.) 171 SB
615 420 290 (WSANO_DATA) 290 SB
1215 420 776 (Valid name, no data record of requested type.) 776 SB
615 520 1432 (The following errors may occur at the time of the function call, and indicate that the) 1432 SB
615 570 785 (asynchronous operation could not be initiated.) 785 SB
615 670 426 (WSANOTINITIALISED) 426 SB
1215 670 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 667 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 670 317 ( must occur before) 317 SB
1215 721 252 (using this API.) 252 SB
615 821 331 (WSAENETDOWN) 331 SB
1215 821 878 (The Windows Sockets implementation has detected) 878 SB
1215 871 648 (that the network subsystem has failed.) 648 SB
615 971 374 (WSAEINPROGRESS) 374 SB
1215 971 757 (A blocking Windows Sockets operation is in) 757 SB
1215 1021 153 (progress.) 153 SB
615 1121 417 (WSAEWOULDBLOCK) 417 SB
1215 1121 876 (The asynchronous operation cannot be scheduled at) 876 SB
1215 1171 875 (this time due to resource or other constraints within) 875 SB
1215 1221 655 (the Windows Sockets implementation.) 655 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1270 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1268 366 (getprotobynumber\(\)) 366 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
981 1271 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1003 1268 500 (WSACancelAsyncRequest\(\)) 500 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 89 89
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1386 117 673 (WSAAsyncGetServByName ) 673 SB
2059 117 56 (82) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 819 (4.3.5 WSAAsyncGetServByName\(\)) 819 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 1381 (Get service information corresponding to a service name and port - asynchronous) 1381 SB
615 379 135 (version.) 135 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 478 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 476 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 579 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 577 190 (HANDLE ) 190 SB
805 577 275 (PASCAL FAR ) 275 SB
1080 577 677 (WSAAsyncGetServByName \( HWND) 677 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1757 580 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1768 579 98 (hWnd) 98 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1866 577 11 (,) 11 SB
/fm 256 def
2 51 277 577 B
1 F
n
615 629 220 (unsigned int) 220 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
835 632 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
846 631 100 (wMsg) 100 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
946 629 33 (,  ) 33 SB
979 629 104 (const ) 104 SB
1083 629 211 (char FAR *) 211 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1294 632 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1305 631 91 (name) 91 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1396 629 22 (, ) 22 SB
1418 629 104 (const ) 104 SB
1522 629 222 (char FAR * ) 222 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1744 631 91 (proto) 91 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1835 629 233 (, char FAR *) 233 SB
/fm 256 def
2 51 277 629 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 683 54 (buf) 54 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
669 681 22 (, ) 22 SB
691 681 11 ( ) 11 SB
702 681 49 (int) 49 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
751 684 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
762 683 117 (buflen ) 117 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
879 681 28 (\);) 28 SB
/fm 256 def
2 51 277 681 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 835 98 (hWnd) 98 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 836 1165 (The handle of the window which should receive a message when the) 1165 SB
915 888 558 (asynchronous request completes.) 558 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 987 100 (wMsg) 100 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 988 1010 (The message to be received when the asynchronous request) 1010 SB
915 1040 183 (completes.) 183 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1139 91 (name) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1140 480 (A pointer to a service name.) 480 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1241 91 (proto) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1242 1109 (A pointer to a protocol name.  This may be NULL, in which case) 1109 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
915 1291 534 (WSAAsyncGetServByName\(\)) 534 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1449 1294 627 ( will search for the first service entry) 627 SB
915 1345 174 (for which ) 174 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1089 1344 128 (s_name) 128 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1217 1345 238 ( or one of the ) 238 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1455 1344 154 (s_aliases) 154 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1609 1345 329 ( matches the given ) 329 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1938 1344 91 (name) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2029 1345 11 (.) 11 SB
915 1397 184 (Otherwise ) 184 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1099 1394 534 (WSAAsyncGetServByName\(\)) 534 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1633 1397 247 ( matches both ) 247 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1880 1396 91 (name) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1971 1397 72 ( and) 72 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
915 1448 91 (proto) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1006 1449 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1550 54 (buf) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1551 1150 (A pointer to the data area to receive the servent data.  Note that this) 1150 SB
915 1603 1190 (must be larger than the size of a servent structure.  This is because the) 1190 SB
915 1653 1186 (data area supplied is used by the Windows Sockets implementation to) 1186 SB
915 1703 1166 (contain not only a servent structure but any and all of the data which) 1166 SB
915 1753 1187 (is referenced by members of the servent structure.  It is recommended) 1187 SB
915 1803 1022 (that you supply a buffer of MAXGETHOSTSTRUCT bytes.) 1022 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1902 106 (buflen) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1903 364 (The size of data area ) 364 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1279 1902 54 (buf) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1333 1903 123 ( above.) 123 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2004 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2005 751 (This function is an asynchronous version of ) 751 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1366 2002 299 (getservbyname\(\)) 299 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1665 2005 395 (, and is used to retrieve) 395 SB
615 2056 1304 (service information corresponding to a service name.  The Windows Sockets) 1304 SB
615 2106 1432 (implementation initiates the operation and returns to the caller immediately, passing) 1432 SB
615 2156 142 (back an ) 142 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
757 2156 434 (asynchronous task handle) 434 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1191 2156 778 ( which the application may use to identify the) 778 SB
615 2206 1414 (operation.  When the operation is completed, the results \(if any\) are copied into the) 1414 SB
615 2256 1348 (buffer provided by the caller and a message is sent to the application's window.) 1348 SB
615 2356 1227 (When the asynchronous operation is complete the application's window ) 1227 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1842 2355 98 (hWnd) 98 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1940 2356 150 ( receives) 150 SB
615 2408 154 (message ) 154 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
769 2407 100 (wMsg) 100 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
869 2408 110 (.  The ) 110 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
979 2407 142 (wParam) 142 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1121 2408 877 ( argument contains the asynchronous task handle as) 877 SB
615 2460 992 (returned by the original function call.  The high 16 bits of ) 992 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1607 2459 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1733 2460 301 ( contain any error) 301 SB
615 2512 902 (code.  The error code may be any error as defined in ) 902 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1517 2509 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1695 2512 398 (.  An error code of zero) 398 SB
615 2563 1327 (indicates successful completion of the asynchronous operation.  On successful) 1327 SB
615 2613 1493 (completion, the buffer supplied to the original function call contains a hostent structure.) 1493 SB
615 2663 1461 (To access the elements of this structure, the original buffer address should be cast to a) 1461 SB
615 2713 904 (hostent structure pointer and accessed as appropriate.) 904 SB
615 2813 1420 (Note that if the error code is WSAENOBUFS, it indicates that the size of the buffer) 1420 SB
615 2863 217 (specified by ) 217 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
832 2862 106 (buflen) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
938 2863 1021 ( in the original call was too small to contain all the resultant) 1021 SB
615 2915 754 (information.  In this case, the low 16 bits of ) 754 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1369 2914 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1495 2915 588 ( contain the size of buffer required) 588 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 90 90
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1386 117 673 (WSAAsyncGetServByName ) 673 SB
2059 117 56 (83) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 270 1482 (to supply ALL the requisite information.  If the application decides that the partial data) 1482 SB
615 320 555 (is inadequate, it may reissue the ) 555 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1170 317 401 (WSAAsyncGetServBy) 401 SB
1571 317 105 (Name) 105 SB
1676 317 39 (\(\) ) 39 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1715 320 330 (function call with a) 330 SB
/fm 256 def
2 50 277 317 B
1 F
n
615 371 1472 (buffer large enough to receive all the desired  information \(i.e. no smaller than the low) 1472 SB
615 421 171 (16 bits of ) 171 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
786 420 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
912 421 25 (\).) 25 SB
615 523 1061 (The error code and buffer length should be extracted from the ) 1061 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1676 522 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1802 523 298 ( using the macros) 298 SB
615 575 1222 (WSAGETASYNCERROR and WSAGETASYNCBUFLEN, defined in ) 1222 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1837 572 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2015 575 58 ( as:) 58 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 673 1450 (#define WSAGETASYNCERROR\(lParam\)            HIWORD\(lParam\)) 1450 SB
615 718 1450 (#define WSAGETASYNCBUFLEN\(lParam\)           LOWORD\(lParam\)) 1450 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 816 1361 (The use of these macros will maximize the portability of the source code for the) 1361 SB
615 866 200 (application.) 200 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1015 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1016 1467 (The return value specifies whether or not the asynchronous operation was successfully) 1467 SB
615 1067 464 (initiated.  Note that it does ) 464 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
1079 1067 54 (not) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1133 1067 802 ( imply success or failure of the operation itself.) 802 SB
615 1167 728 (If the operation was successfully initiated, ) 728 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1343 1164 270 (WSAAsyncGet) 270 SB
1613 1164 82 (Serv) 82 SB
1695 1164 49 (By) 49 SB
1744 1164 105 (Name) 105 SB
1849 1164 28 (\(\)) 28 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1877 1167 158 ( returns a) 158 SB
/fm 256 def
2 50 277 1164 B
1 F
n
615 1218 1480 (nonzero value of type HANDLE which is the asynchronous task handle for the request.) 1480 SB
615 1268 1370 (This value can be used in two ways.  It can be used to cancel the operation using) 1370 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1315 500 (WSACancelAsyncRequest\(\)) 500 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1115 1318 988 (.  It can also be used to match up asynchronous operations) 988 SB
615 1369 761 (and completion messages, by examining the ) 761 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1376 1368 142 (wParam) 142 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1518 1369 336 ( message argument.) 336 SB
615 1471 898 (If the asynchronous operation could not be initiated, ) 898 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1513 1468 204 (WSAAsync) 204 SB
1717 1468 82 (Serv) 82 SB
1799 1468 49 (By) 49 SB
1848 1468 105 (Name) 105 SB
1953 1468 28 (\(\)) 28 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1981 1471 128 ( returns) 128 SB
/fm 256 def
2 50 277 1468 B
1 F
n
615 1522 1172 (a zero value, and a specific error number may be retrieved by calling) 1172 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1569 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
989 1572 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1672 216 (Comments) 216 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1673 1481 (The buffer supplied to this function is used by the Windows Sockets implementation to) 1481 SB
615 1724 1397 (construct a hostent structure together with the contents of data areas referenced by) 1397 SB
615 1774 1394 (members of the same hostent structure.  To avoid the WSAENOBUFS error noted) 1394 SB
615 1824 1419 (above, the application should provide a buffer of at least MAXGETHOSTSTRUCT) 1419 SB
615 1874 342 (bytes \(as defined in ) 342 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
957 1871 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1135 1874 25 (\).) 25 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1973 196 (Notes For) 196 SB
315 2023 358 (Windows Sockets) 358 SB
315 2074 192 (Suppliers) 192 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2075 1480 (It is the responsibility of the Windows Sockets implementation to ensure that messages) 1480 SB
615 2126 799 (are successfully posted to the application.  If a ) 799 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1414 2123 257 (PostMessage\(\)) 257 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1671 2126 329 ( operation fails, the) 329 SB
615 2177 592 (Windows Sockets implementation ) 592 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
1207 2177 82 (must) 82 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1289 2177 357 ( re-post that message) 357 SB
1646 2177 387 ( as long as the window) 387 SB
/fm 256 def
2 49 277 2174 B
1 F
n
615 2227 96 (exists) 96 SB
711 2227 11 (.) 11 SB
/fm 256 def
2 49 277 2224 B
1 F
n
615 2327 1439 (Windows Sockets suppliers should use the WSAMAKEASYNCREPLY macro when) 1439 SB
615 2377 283 (constructing the ) 283 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
898 2376 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1024 2377 272 ( in the message.) 272 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2478 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2479 1478 (The following error codes may be set when an application window receives a message.) 1478 SB
615 2530 895 (As described above, they may be extracted from the ) 895 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1510 2529 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1636 2530 461 ( in the reply message using) 461 SB
615 2582 647 (the WSAGETASYNCERROR macro.) 647 SB
615 2682 331 (WSAENETDOWN) 331 SB
1215 2682 878 (The Windows Sockets implementation has detected) 878 SB
1215 2732 648 (that the network subsystem has failed.) 648 SB
615 2832 283 (WSAENOBUFS) 283 SB
1215 2832 679 (No/insufficient buffer space is available) 679 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 91 91
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1386 117 673 (WSAAsyncGetServByName ) 673 SB
2059 117 56 (84) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 270 473 (WSAHOST_NOT_FOUND) 473 SB
1215 270 642 (Authoritative Answer Host not found.) 642 SB
615 370 332 (WSATRY_AGAIN) 332 SB
1215 370 633 (Non-Authoritative Host not found, or) 633 SB
1215 420 265 (SERVERFAIL.) 265 SB
615 520 400 (WSANO_RECOVERY) 400 SB
1215 520 831 (Non recoverable errors, FORMERR, REFUSED,) 831 SB
1215 570 171 (NOTIMP.) 171 SB
615 670 290 (WSANO_DATA) 290 SB
1215 670 776 (Valid name, no data record of requested type.) 776 SB
615 770 1432 (The following errors may occur at the time of the function call, and indicate that the) 1432 SB
615 820 785 (asynchronous operation could not be initiated.) 785 SB
615 920 426 (WSANOTINITIALISED) 426 SB
1215 920 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 917 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 920 317 ( must occur before) 317 SB
1215 971 252 (using this API.) 252 SB
615 1071 331 (WSAENETDOWN) 331 SB
1215 1071 878 (The Windows Sockets implementation has detected) 878 SB
1215 1121 648 (that the network subsystem has failed.) 648 SB
615 1221 374 (WSAEINPROGRESS) 374 SB
1215 1221 757 (A blocking Windows Sockets operation is in) 757 SB
1215 1271 153 (progress.) 153 SB
615 1371 417 (WSAEWOULDBLOCK) 417 SB
1215 1371 876 (The asynchronous operation cannot be scheduled at) 876 SB
1215 1421 875 (this time due to resource or other constraints within) 875 SB
1215 1471 655 (the Windows Sockets implementation.) 655 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1570 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1568 299 (getservbyname\(\)) 299 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
914 1571 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
936 1568 500 (WSACancelAsyncRequest\(\)) 500 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 92 92
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1422 117 637 (WSAAsyncGetServByPort ) 637 SB
2059 117 56 (85) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 783 (4.3.6 WSAAsyncGetServByPort\(\)) 783 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 1445 (Get service information corresponding to a port and protocol - asynchronous version.) 1445 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 190 (HANDLE ) 190 SB
805 527 275 (PASCAL FAR ) 275 SB
1080 527 652 (WSAAsyncGetServByPort \( HWND) 652 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1732 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1743 529 98 (hWnd) 98 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1841 527 11 (,) 11 SB
/fm 256 def
2 51 277 527 B
1 F
n
615 579 220 (unsigned int) 220 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
835 582 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
846 581 100 (wMsg) 100 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
946 579 82 (,  int) 82 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1028 582 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1039 581 70 (port) 70 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1109 579 348 (, const char FAR * ) 348 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1457 581 91 (proto) 91 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1548 579 233 (, char FAR *) 233 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1781 582 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1792 581 54 (buf) 54 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1846 579 71 (, int) 71 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1917 582 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1928 581 117 (buflen ) 117 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
2045 579 28 (\);) 28 SB
/fm 256 def
2 51 277 579 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 733 98 (hWnd) 98 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 734 1165 (The handle of the window which should receive a message when the) 1165 SB
915 786 558 (asynchronous request completes.) 558 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 885 100 (wMsg) 100 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 886 1010 (The message to be received when the asynchronous request) 1010 SB
915 938 183 (completes.) 183 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1037 70 (port) 70 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1038 798 (The port for the service, in network byte order.) 798 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1139 91 (proto) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1140 1109 (A pointer to a protocol name.  This may be NULL, in which case) 1109 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
915 1189 509 (WSAAsyncGetServByPort\(\)) 509 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1424 1192 687 ( will search for the first service entry for) 687 SB
915 1243 114 (which ) 114 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1029 1242 107 (s_port) 107 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1136 1243 294 ( match the given ) 294 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1430 1242 70 (port) 70 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1500 1243 206 (.  Otherwise) 206 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
915 1292 509 (WSAAsyncGetServByPort\(\)) 509 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1424 1295 247 ( matches both ) 247 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1671 1294 70 (port) 70 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1741 1295 83 ( and ) 83 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1824 1294 91 (proto) 91 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1915 1295 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1396 54 (buf) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1397 1150 (A pointer to the data area to receive the servent data.  Note that this) 1150 SB
915 1449 1190 (must be larger than the size of a servent structure.  This is because the) 1190 SB
915 1499 1186 (data area supplied is used by the Windows Sockets implementation to) 1186 SB
915 1549 1166 (contain not only a servent structure but any and all of the data which) 1166 SB
915 1599 1187 (is referenced by members of the servent structure.  It is recommended) 1187 SB
915 1649 1022 (that you supply a buffer of MAXGETHOSTSTRUCT bytes.) 1022 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1748 106 (buflen) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1749 364 (The size of data area ) 364 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1279 1748 54 (buf) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1333 1749 123 ( above.) 123 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1850 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1851 751 (This function is an asynchronous version of ) 751 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1366 1848 278 (getservbyport\(\)) 278 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1644 1851 395 (, and is used to retrieve) 395 SB
615 1902 1289 (service information corresponding to a port number.  The Windows Sockets) 1289 SB
615 1952 1432 (implementation initiates the operation and returns to the caller immediately, passing) 1432 SB
615 2002 142 (back an ) 142 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
757 2002 434 (asynchronous task handle) 434 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1191 2002 778 ( which the application may use to identify the) 778 SB
615 2052 1414 (operation.  When the operation is completed, the results \(if any\) are copied into the) 1414 SB
615 2102 1348 (buffer provided by the caller and a message is sent to the application's window.) 1348 SB
615 2202 1227 (When the asynchronous operation is complete the application's window ) 1227 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1842 2201 98 (hWnd) 98 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1940 2202 150 ( receives) 150 SB
615 2254 154 (message ) 154 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
769 2253 100 (wMsg) 100 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
869 2254 110 (.  The ) 110 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
979 2253 142 (wParam) 142 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1121 2254 877 ( argument contains the asynchronous task handle as) 877 SB
615 2306 992 (returned by the original function call.  The high 16 bits of ) 992 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1607 2305 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1733 2306 301 ( contain any error) 301 SB
615 2358 902 (code.  The error code may be any error as defined in ) 902 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1517 2355 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1695 2358 398 (.  An error code of zero) 398 SB
615 2409 1327 (indicates successful completion of the asynchronous operation.  On successful) 1327 SB
615 2459 1493 (completion, the buffer supplied to the original function call contains a servent structure.) 1493 SB
615 2509 1461 (To access the elements of this structure, the original buffer address should be cast to a) 1461 SB
615 2559 904 (servent structure pointer and accessed as appropriate.) 904 SB
615 2659 1420 (Note that if the error code is WSAENOBUFS, it indicates that the size of the buffer) 1420 SB
615 2709 217 (specified by ) 217 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
832 2708 106 (buflen) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
938 2709 1021 ( in the original call was too small to contain all the resultant) 1021 SB
615 2761 754 (information.  In this case, the low 16 bits of ) 754 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1369 2760 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1495 2761 588 ( contain the size of buffer required) 588 SB
615 2813 1482 (to supply ALL the requisite information.  If the application decides that the partial data) 1482 SB
615 2863 555 (is inadequate, it may reissue the ) 555 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1170 2860 520 (WSAAsyncGetServByPort\(\) ) 520 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1690 2863 330 (function call with a) 330 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 93 93
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1422 117 637 (WSAAsyncGetServByPort ) 637 SB
2059 117 56 (86) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 270 1472 (buffer large enough to receive all the desired  information \(i.e. no smaller than the low) 1472 SB
615 320 171 (16 bits of ) 171 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
786 319 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
912 320 25 (\).) 25 SB
615 422 1061 (The error code and buffer length should be extracted from the ) 1061 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1676 421 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1802 422 298 ( using the macros) 298 SB
615 474 1222 (WSAGETASYNCERROR and WSAGETASYNCBUFLEN, defined in ) 1222 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1837 471 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2015 474 58 ( as:) 58 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 572 1450 (#define WSAGETASYNCERROR\(lParam\)            HIWORD\(lParam\)) 1450 SB
615 617 1450 (#define WSAGETASYNCBUFLEN\(lParam\)           LOWORD\(lParam\)) 1450 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 715 1361 (The use of these macros will maximize the portability of the source code for the) 1361 SB
615 765 200 (application.) 200 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 914 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 915 1467 (The return value specifies whether or not the asynchronous operation was successfully) 1467 SB
615 966 464 (initiated.  Note that it does ) 464 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
1079 966 54 (not) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1133 966 802 ( imply success or failure of the operation itself.) 802 SB
615 1066 728 (If the operation was successfully initiated, ) 728 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1343 1063 509 (WSAAsyncGetServByPort\(\)) 509 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1852 1066 158 ( returns a) 158 SB
615 1117 1480 (nonzero value of type HANDLE which is the asynchronous task handle for the request.) 1480 SB
615 1167 1370 (This value can be used in two ways.  It can be used to cancel the operation using) 1370 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1214 500 (WSACancelAsyncRequest\(\)) 500 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1115 1217 988 (.  It can also be used to match up asynchronous operations) 988 SB
615 1268 761 (and completion messages, by examining the ) 761 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1376 1267 142 (wParam) 142 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1518 1268 336 ( message argument.) 336 SB
615 1370 898 (If the asynchronous operation could not be initiated, ) 898 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1513 1367 509 (WSAAsyncGetServByPort\(\)) 509 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1421 1300 (returns a zero value, and a specific error number may be retrieved by calling) 1300 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1468 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
989 1471 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1571 216 (Comments) 216 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1572 1481 (The buffer supplied to this function is used by the Windows Sockets implementation to) 1481 SB
615 1623 1397 (construct a servent structure together with the contents of data areas referenced by) 1397 SB
615 1673 1394 (members of the same servent structure.  To avoid the WSAENOBUFS error noted) 1394 SB
615 1723 1419 (above, the application should provide a buffer of at least MAXGETHOSTSTRUCT) 1419 SB
615 1773 342 (bytes \(as defined in ) 342 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
957 1770 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1135 1773 25 (\).) 25 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1872 196 (Notes For) 196 SB
315 1922 358 (Windows Sockets) 358 SB
315 1973 192 (Suppliers) 192 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1974 1480 (It is the responsibility of the Windows Sockets implementation to ensure that messages) 1480 SB
615 2025 799 (are successfully posted to the application.  If a ) 799 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1414 2022 257 (PostMessage\(\)) 257 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1671 2025 329 ( operation fails, the) 329 SB
615 2076 592 (Windows Sockets implementation ) 592 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
1207 2076 82 (must) 82 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1289 2076 357 ( re-post that message) 357 SB
1646 2076 387 ( as long as the window) 387 SB
/fm 256 def
2 49 277 2073 B
1 F
n
615 2126 96 (exists) 96 SB
711 2126 11 (.) 11 SB
/fm 256 def
2 49 277 2123 B
1 F
n
615 2226 1439 (Windows Sockets suppliers should use the WSAMAKEASYNCREPLY macro when) 1439 SB
615 2276 283 (constructing the ) 283 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
898 2275 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1024 2276 272 ( in the message.) 272 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2377 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2378 1478 (The following error codes may be set when an application window receives a message.) 1478 SB
615 2429 895 (As described above, they may be extracted from the ) 895 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1510 2428 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1636 2429 461 ( in the reply message using) 461 SB
615 2481 647 (the WSAGETASYNCERROR macro.) 647 SB
615 2581 331 (WSAENETDOWN) 331 SB
1215 2581 878 (The Windows Sockets implementation has detected) 878 SB
1215 2631 648 (that the network subsystem has failed.) 648 SB
615 2731 283 (WSAENOBUFS) 283 SB
1215 2731 679 (No/insufficient buffer space is available) 679 SB
615 2831 473 (WSAHOST_NOT_FOUND) 473 SB
1215 2831 642 (Authoritative Answer Host not found.) 642 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 94 94
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1422 117 637 (WSAAsyncGetServByPort ) 637 SB
2059 117 56 (87) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 270 332 (WSATRY_AGAIN) 332 SB
1215 270 633 (Non-Authoritative Host not found, or) 633 SB
1215 320 265 (SERVERFAIL.) 265 SB
615 420 400 (WSANO_RECOVERY) 400 SB
1215 420 831 (Non recoverable errors, FORMERR, REFUSED,) 831 SB
1215 470 171 (NOTIMP.) 171 SB
615 570 290 (WSANO_DATA) 290 SB
1215 570 776 (Valid name, no data record of requested type.) 776 SB
615 670 1432 (The following errors may occur at the time of the function call, and indicate that the) 1432 SB
615 720 785 (asynchronous operation could not be initiated.) 785 SB
615 820 426 (WSANOTINITIALISED) 426 SB
1215 820 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 817 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 820 317 ( must occur before) 317 SB
1215 871 252 (using this API.) 252 SB
615 971 331 (WSAENETDOWN) 331 SB
1215 971 878 (The Windows Sockets implementation has detected) 878 SB
1215 1021 648 (that the network subsystem has failed.) 648 SB
615 1121 374 (WSAEINPROGRESS) 374 SB
1215 1121 757 (A blocking Windows Sockets operation is in) 757 SB
1215 1171 153 (progress.) 153 SB
615 1271 417 (WSAEWOULDBLOCK) 417 SB
1215 1271 876 (The asynchronous operation cannot be scheduled at) 876 SB
1215 1321 875 (this time due to resource or other constraints within) 875 SB
1215 1371 655 (the Windows Sockets implementation.) 655 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1470 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1468 278 (getservbyport\(\)) 278 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
893 1471 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
915 1468 500 (WSACancelAsyncRequest\(\)) 500 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 95 95
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1630 117 429 (WSAAsyncSelect ) 429 SB
2059 117 56 (88) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 575 (4.3.7 WSAAsyncSelect\(\)) 575 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 666 (Request event notification for a socket.) 666 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 238 (int PASCAL ) 238 SB
853 527 97 (FAR ) 97 SB
950 527 521 (WSAAsyncSelect \( SOCKET) 521 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1471 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1482 529 16 (s) 16 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1498 527 157 (, HWND) 157 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1655 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1666 529 98 (hWnd) 98 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1764 527 11 (,) 11 SB
/fm 256 def
2 51 277 527 B
1 F
n
615 579 220 (unsigned int) 220 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
835 582 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
846 581 100 (wMsg) 100 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
946 579 110 (,  long) 110 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1056 582 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1067 581 120 (lEvent ) 120 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1187 579 28 (\);) 28 SB
/fm 256 def
2 51 277 579 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 733 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 734 1112 (A descriptor identifying the socket for which event notification is) 1112 SB
915 786 152 (required.) 152 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 885 98 (hWnd) 98 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 886 1115 (A handle identifying the window which should receive a message) 1115 SB
915 938 505 (when a network event occurs.) 505 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1037 100 (wMsg) 100 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1038 986 (The message to be received when a network event occurs.) 986 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1139 109 (lEvent) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1140 1173 (A bitmask which specifies a combination of network events in which) 1173 SB
915 1192 478 (the application is interested.) 478 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1291 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1292 1471 (This function is used to request that the Windows Sockets DLL should send a message) 1471 SB
615 1343 253 (to the window ) 253 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
868 1342 98 (hWnd) 98 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
966 1343 1068 ( whenever it detects any of the network events specified by the) 1068 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1394 109 (lEvent) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
724 1395 1131 ( parameter.  The message which should be sent is specified by the ) 1131 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1855 1394 100 (wMsg) 100 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1447 1237 (parameter.  The socket for which notification is required is identified by ) 1237 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1852 1446 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1868 1447 11 (.) 11 SB
615 1549 674 (This function automatically sets socket ) 674 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1289 1548 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1305 1549 396 ( to non-blocking mode.) 396 SB
/fm 256 def
2 51 277 1546 B
1 F
n
615 1651 77 (The ) 77 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
692 1650 109 (lEvent) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
801 1651 1158 ( parameter is constructed by or'ing any of the values specified in the) 1158 SB
615 1703 238 (following list.) 238 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
765 1803 101 (Value) 101 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
866 1803 209 (                   ) 209 SB
1065 1803 150 (Meaning) 150 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
765 1853 188 (FD_READ) 188 SB
1065 1853 889 (Want to receive notification of readiness for reading) 889 SB
765 1903 208 (FD_WRITE) 208 SB
1065 1903 884 (Want to receive notification of readiness for writing) 884 SB
765 1953 162 (FD_OOB) 162 SB
1065 1953 1046 (Want to receive notification of the arrival of out-of-band data) 1046 SB
765 2003 235 (FD_ACCEPT) 235 SB
1065 2003 907 (Want to receive notification of incoming connections) 907 SB
765 2053 272 (FD_CONNECT) 272 SB
1065 2053 908 (Want to receive notification of completed connection) 908 SB
765 2103 207 (FD_CLOSE) 207 SB
1065 2103 775 (Want to receive notification of socket closure) 775 SB
615 2203 162 (Issuing a ) 162 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
777 2200 338 (WSAAsyncSelect\(\)) 338 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1115 2203 584 ( for a socket cancels any previous ) 584 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1699 2200 338 (WSAAsyncSelect\(\)) 338 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2037 2203 60 ( for) 60 SB
615 2254 1474 (the same socket.  For example, to receive notification for both reading and writing, the) 1474 SB
615 2304 366 (application must call ) 366 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
981 2301 338 (WSAAsyncSelect\(\)) 338 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1319 2304 719 ( with both FD_READ and FD_WRITE, as) 719 SB
615 2355 138 (follows:) 138 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 2452 1325 (rc = WSAAsyncSelect\(s, hWnd, wMsg, FD_READ|FD_WRITE\);) 1325 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2550 1484 (It is not possible to specify different messages for different events.  The following code) 1484 SB
615 2600 77 (will ) 77 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
692 2600 54 (not) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
746 2600 1333 ( work; the second call will cancel the effects of the first, and only FD_WRITE) 1333 SB
615 2650 776 (events will be reported with message wMsg2:) 776 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 2747 1125 (rc = WSAAsyncSelect\(s, hWnd, wMsg1, FD_READ\);) 1125 SB
615 2792 1150 (rc = WSAAsyncSelect\(s, hWnd, wMsg2, FD_WRITE\);) 1150 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 96 96
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1630 117 429 (WSAAsyncSelect ) 429 SB
2059 117 56 (89) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 271 439 (To cancel all notification ) 439 SB
32 0 0 42 42 0 0 0 42 /Symbol font
1054 267 23 (-) 23 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1077 271 995 ( i.e., to indicate that the Windows Sockets implementation) 995 SB
615 326 1234 (should send no further messages related to network events on the socket ) 1234 SB
32 0 0 42 42 0 0 0 42 /Symbol font
1849 322 23 (-) 23 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1872 326 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1883 325 109 (lEvent) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1992 326 123 ( should) 123 SB
615 380 237 (be set to zero.) 237 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 477 875 (rc = WSAAsyncSelect\(s, hWnd, 0, 0\);) 875 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 575 436 (Although in this instance ) 436 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1051 572 338 (WSAAsyncSelect\(\)) 338 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1389 575 224 ( immediately) 224 SB
1613 575 404 ( disables event message) 404 SB
/fm 256 def
2 50 277 572 B
1 F
n
615 626 366 (posting for the socket) 366 SB
981 626 1083 (, it is possible that messages may be waiting in the application's) 1083 SB
/fm 256 def
2 49 277 623 B
1 F
n
615 676 1451 (message queue.  The application must therefore be prepared to receive network event) 1451 SB
615 726 589 (messages even after cancellation.  ) 589 SB
1204 726 377 (Closing a socket with ) 377 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1581 723 238 (closesocket\(\) ) 238 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1819 726 204 (also cancels) 204 SB
/fm 256 def
2 50 277 723 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 774 338 (WSAAsyncSelect\(\)) 338 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
953 777 1147 ( message sending, but the same caveat about messages in the queue) 1147 SB
/fm 256 def
2 50 277 774 B
1 F
n
615 828 200 (prior to the ) 200 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
815 825 238 (closesocket\(\) ) 238 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1053 828 206 (still applies.) 206 SB
/fm 256 def
2 50 277 825 B
1 F
n
615 929 156 (Since an ) 156 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
771 926 155 (accept\(\)') 155 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
926 929 1084 (ed socket has the same properties as the listening socket used to) 1084 SB
/fm 256 def
2 50 277 926 B
1 F
n
615 980 238 (accept it, any ) 238 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
853 977 349 (WSAAsyncSelect\(\) ) 349 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1202 980 777 (events set for the listening socket apply to the) 777 SB
/fm 256 def
2 50 277 977 B
1 F
n
615 1031 946 (accepted socket.  For example, if a listening socket has ) 946 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1561 1028 349 (WSAAsyncSelect\(\) ) 349 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1910 1031 108 (events) 108 SB
/fm 256 def
2 50 277 1028 B
1 F
n
615 1082 1478 (FD_ACCEPT, FD_READ, and FD_WRITE, then any socket accepted on that listening) 1478 SB
/fm 256 def
2 49 277 1079 B
1 F
n
615 1132 1479 (socket will also have FD_ACCEPT, FD_READ, and FD_WRITE events with the same) 1479 SB
/fm 256 def
2 49 277 1129 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 1181 100 (wMsg) 100 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
715 1182 680 ( value used for messages.  If a different ) 680 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1395 1181 100 (wMsg) 100 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1495 1182 435 ( or events are desired, the) 435 SB
/fm 256 def
2 51 277 1179 B
1 F
n
615 1234 396 (application should call ) 396 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1011 1231 338 (WSAAsyncSelect\(\)) 338 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1349 1234 758 (, passing the accepted socket and the desired) 758 SB
/fm 256 def
2 50 277 1231 B
1 F
n
615 1285 292 (new information.) 292 SB
32 0 0 33 33 0 0 0 30 /Times-Roman /font32 ANSIFont font
907 1280 17 (7) 17 SB
/fm 256 def
2 49 277 1282 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1385 1271 (When one of the nominated network events occurs on the specified socket ) 1271 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1886 1384 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1902 1385 74 (, the) 74 SB
615 1437 370 (application's window ) 370 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
985 1436 98 (hWnd) 98 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1083 1437 315 ( receives message ) 315 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1398 1436 100 (wMsg) 100 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1498 1437 110 (.  The ) 110 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1608 1436 142 (wParam) 142 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1750 1437 340 ( argument identifies) 340 SB
615 1489 1173 (the socket on which a network event has occurred.  The low word of ) 1173 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1788 1488 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1914 1489 159 ( specifies) 159 SB
615 1541 944 (the network event that has occurred.  The high word of ) 944 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1559 1540 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1685 1541 419 ( contains any error code.) 419 SB
615 1593 705 (The error code be any error as defined in ) 705 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1320 1590 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1498 1593 11 (.) 11 SB
615 1694 910 (The error and event codes may be extracted from the ) 910 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1525 1693 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1651 1694 298 ( using the macros) 298 SB
615 1746 1225 (WSAGETSELECTERROR and WSAGETSELECTEVENT, defined in ) 1225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1840 1743 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2018 1746 58 ( as:) 58 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 1844 1475 (#define WSAGETSELECTERROR\(lParam\)            HIWORD\(lParam\)) 1475 SB
615 1889 1475 (#define WSAGETSELECTEVENT\(lParam\)            LOWORD\(lParam\)) 1475 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1987 1361 (The use of these macros will maximize the portability of the source code for the) 1361 SB
615 2037 200 (application.) 200 SB
615 2137 1233 (The possible network event codes which may be returned are as follows:) 1233 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
765 2237 101 (Value) 101 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
866 2237 209 (                   ) 209 SB
1065 2237 150 (Meaning) 150 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
765 2287 188 (FD_READ) 188 SB
1065 2287 126 (Socket ) 126 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1191 2286 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1207 2287 303 ( ready for reading) 303 SB
765 2339 208 (FD_WRITE) 208 SB
1065 2339 126 (Socket ) 126 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1191 2338 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1207 2339 298 ( ready for writing) 298 SB
765 2391 162 (FD_OOB) 162 SB
1065 2391 776 (Out-of-band data ready for reading on socket ) 776 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1841 2390 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1857 2391 11 (.) 11 SB
765 2443 235 (FD_ACCEPT) 235 SB
1065 2443 126 (Socket ) 126 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1191 2442 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1207 2443 818 ( ready for accepting a new incoming connection) 818 SB
765 2495 272 (FD_CONNECT) 272 SB
1065 2495 378 (Connection on socket ) 378 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1443 2494 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1459 2495 188 ( completed) 188 SB
765 2547 207 (FD_CLOSE) 207 SB
1065 2547 552 (Connection identified by socket ) 552 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1617 2546 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1633 2547 277 ( has been closed) 277 SB
32 0 0 42 42 0 1 0 38 /Times-Roman /font32 ANSIFont font
315 2615 220 (                    ) 220 SB
535 2615 220 (                    ) 220 SB
755 2615 165 (               ) 165 SB
32 0 0 33 33 0 0 0 30 /Times-Roman /font32 ANSIFont font
315 2660 17 (7) 17 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
332 2665 816 (Note that there is a timing window between the ) 816 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1148 2662 154 (accept\(\) ) 154 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1302 2665 325 (call and the call to ) 325 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1627 2662 349 (WSAAsyncSelect\(\) ) 349 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1976 2665 33 (to) 33 SB
315 2716 359 (change the events or ) 359 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
674 2715 100 (wMsg) 100 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
774 2716 724 (.  An application which desires a different ) 724 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1498 2715 100 (wMsg) 100 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1598 2716 352 ( for the listening and) 352 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
315 2765 143 (accept\(\)) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
458 2768 1633 ('ed sockets should ask for only FD_ACCEPT events on the listening socket, then set appropriate) 1633 SB
315 2819 271 (events after the ) 271 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
586 2816 143 (accept\(\)) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
729 2819 1270 (.  Since FD_ACCEPT is never sent for a connected socket and FD_READ,) 1270 SB
315 2870 1650 (FD_WRITE, FD_OOB, and FD_CLOSE are never sent for listening sockets, this will not impose) 1650 SB
315 2920 195 (difficulties.) 195 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 97 97
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1630 117 429 (WSAAsyncSelect ) 429 SB
2059 117 56 (90) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 369 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 370 1475 (The return value is 0 if the application's declaration of interest in the network event set) 1475 SB
615 421 1496 (was successful.  Otherwise the value SOCKET_ERROR is returned, and a specific error) 1496 SB
615 471 617 (number may be retrieved by calling ) 617 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1232 468 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1606 471 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 571 216 (Comments) 216 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 572 170 (Although ) 170 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
785 569 338 (WSAAsyncSelect\(\)) 338 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1123 572 846 ( can be called with interest in multiple events, the) 846 SB
615 623 1254 (application window will receive a single message for each network event.) 1254 SB
615 723 357 (As in the case of the ) 357 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
972 720 127 (select\(\)) 127 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1099 723 174 ( function, ) 174 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1273 720 338 (WSAAsyncSelect\(\)) 338 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1611 723 445 ( will frequently be used to) 445 SB
615 774 720 (determine when a data transfer operation \() 720 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1335 771 109 (send\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1444 774 57 ( or ) 57 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1501 771 106 (recv\(\)) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1607 774 400 (\) can be issued with the) 400 SB
615 825 1481 (expectation of immediate success.  Nevertheless, a robust application must be prepared) 1481 SB
615 875 1473 (for the possibility that it may receive a message and issue a Windows Sockets API call) 1473 SB
615 925 1378 (which returns WSAEWOULDBLOCK immediately.  For example, the following) 1378 SB
615 975 520 (sequence of events is possible:) 520 SB
615 1075 40 (\(i\)) 40 SB
915 1075 380 (data arrives on socket ) 380 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1295 1072 16 (s) 16 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1311 1075 434 (; Windows Sockets posts ) 434 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1745 1072 310 (WSAAsyncSelect) 310 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1126 143 (message) 143 SB
615 1176 52 (\(ii\)) 52 SB
915 1176 713 (application processes some other message) 713 SB
615 1226 64 (\(iii\)) 64 SB
915 1226 669 (while processing, application issues an ) 669 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1584 1223 512 (ioctlsocket\(s, FIONREAD...\)) 512 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 1277 768 (and notices that there is data ready to be read) 768 SB
615 1327 61 (\(iv\)) 61 SB
915 1327 341 (application issues a ) 341 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1256 1324 166 (recv\(s,...\)) 166 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1422 1327 273 ( to read the data) 273 SB
615 1378 49 (\(v\)) 49 SB
915 1378 1140 (application  loops to process next message, eventually reaching the) 1140 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
915 1425 310 (WSAAsyncSelect) 310 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1225 1428 764 ( message indicating that data is ready to read) 764 SB
615 1479 61 (\(vi\)) 61 SB
915 1479 311 (application issues ) 311 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1226 1476 166 (recv\(s,...\)) 166 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1392 1479 451 (, which fails with the error) 451 SB
915 1530 428 (WSAEWOULDBLOCK.) 428 SB
615 1630 501 (Other sequences are possible.) 501 SB
615 1730 1484 (The Windows Sockets DLL will not continually flood an application with messages for) 1484 SB
615 1780 1500 (a particular network event.  Having successfully posted notification of a particular event) 1500 SB
615 1830 1498 (to an application window, no further message\(s\) for that network event will be posted to) 1498 SB
615 1880 1448 (the application window until the application makes the function call which implicitly) 1448 SB
615 1930 751 (reenables notification of that network event.) 751 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
615 2030 99 (Event) 99 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
714 2030 352 (                                ) 352 SB
1065 2030 359 (Re-enabling function) 359 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2080 188 (FD_READ) 188 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1065 2077 106 (recv\(\)) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1171 2080 57 ( or ) 57 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1228 2077 195 (recvfrom\(\)) 195 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2131 208 (FD_WRITE) 208 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1065 2128 109 (send\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1174 2131 57 ( or ) 57 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1231 2128 144 (sendto\(\)) 144 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2182 162 (FD_OOB) 162 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1065 2179 106 (recv\(\)) 106 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2233 235 (FD_ACCEPT) 235 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1065 2230 143 (accept\(\)) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2284 272 (FD_CONNECT) 272 SB
1065 2284 116 (NONE) 116 SB
615 2334 207 (FD_CLOSE) 207 SB
1065 2334 116 (NONE) 116 SB
615 2434 1357 (Any call to the reenabling routine, even one which fails, results in reenabling of) 1357 SB
/fm 256 def
2 49 277 2431 B
1 F
n
615 2484 663 (message posting for the relevant event.) 663 SB
/fm 256 def
2 49 277 2481 B
1 F
n
/fm 256 def
2 49 277 2531 B
1 F
n
615 2584 1353 (For FD_READ, FD_OOB, and FD_ACCEPT events, message posting is "level-) 1353 SB
/fm 256 def
2 49 277 2581 B
1 F
n
615 2634 1470 (triggered."  This means that if the reenabling routine is called and the relevant event is) 1470 SB
/fm 256 def
2 49 277 2631 B
1 F
n
615 2684 437 (still valid after the call, a ) 437 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1052 2681 349 (WSAAsyncSelect\(\) ) 349 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1401 2684 621 (message is posted to the application.) 621 SB
/fm 256 def
2 50 277 2681 B
1 F
n
615 2735 1478 (This allows an application to be event-driven and not concern itself with the amount of) 1478 SB
/fm 256 def
2 49 277 2732 B
1 F
n
615 2785 1146 (data that arrives at any one time.  Consider the following sequence:) 1146 SB
/fm 256 def
2 49 277 2782 B
1 F
n
/fm 256 def
2 49 277 2832 B
1 F
n
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 98 98
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1630 117 429 (WSAAsyncSelect ) 429 SB
2059 117 56 (91) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 270 40 (\(i\)) 40 SB
915 270 1031 (Windows Sockets DLL receives 100 bytes of data on socket ) 1031 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1946 267 27 (s ) 27 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1973 270 61 (and) 61 SB
/fm 256 def
2 50 277 267 B
1 F
n
915 321 501 (posts an FD_READ message.) 501 SB
/fm 256 def
2 49 277 318 B
1 F
n
615 371 52 (\(ii\)) 52 SB
915 371 388 (The application issues ) 388 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1303 368 392 (recv\( s, buffptr, 50, 0\)) 392 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1695 371 292 ( to read 50 bytes.) 292 SB
/fm 256 def
2 50 277 368 B
1 F
n
615 422 64 (\(iii\)) 64 SB
915 422 1159 (The Windows Sockets DLL posts another FD_READ message since) 1159 SB
/fm 256 def
2 49 277 419 B
1 F
n
915 472 471 (there is still data to be read.) 471 SB
/fm 256 def
2 49 277 469 B
1 F
n
/fm 256 def
2 49 277 519 B
1 F
n
615 572 1461 (With these semantics, an application need not read all available data in response to an) 1461 SB
/fm 256 def
2 49 277 569 B
1 F
n
615 622 512 (FD_READ message--a single ) 512 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1127 619 117 (recv\(\) ) 117 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1244 622 716 (in response to each FD_READ message is) 716 SB
/fm 256 def
2 50 277 619 B
1 F
n
615 673 780 (appropriate.  If an application issues multiple ) 780 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1395 670 117 (recv\(\) ) 117 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1512 673 466 (calls in response to a single) 466 SB
/fm 256 def
2 50 277 670 B
1 F
n
615 724 1426 (FD_READ, it may receive multiple FD_READ messages.  Such an application may) 1426 SB
/fm 256 def
2 49 277 721 B
1 F
n
615 774 954 (wish to disable FD_READ messages before starting the ) 954 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1569 771 117 (recv\(\) ) 117 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1686 774 258 (calls by calling) 258 SB
/fm 256 def
2 50 277 771 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 822 349 (WSAAsyncSelect\(\) ) 349 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
964 825 574 (with the FD_READ event not set.) 574 SB
/fm 256 def
2 50 277 822 B
1 F
n
/fm 256 def
2 49 277 873 B
1 F
n
615 926 907 (If an event is true when the application initially calls ) 907 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1522 923 338 (WSAAsyncSelect\(\)) 338 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1860 926 211 ( or when the) 211 SB
/fm 256 def
2 50 277 923 B
1 F
n
615 977 1466 (reenabling function is called, then a message is posted as appropriate.  For example, if) 1466 SB
/fm 256 def
2 49 277 974 B
1 F
n
615 1027 340 (an application calls ) 340 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
955 1024 124 (listen\(\)) 124 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1079 1027 912 (, a connect attempt is made, then the application calls) 912 SB
/fm 256 def
2 50 277 1024 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1075 349 (WSAAsyncSelect\(\) ) 349 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
964 1078 1112 (specifying that it wants to receive FD_ACCEPT messages for the) 1112 SB
/fm 256 def
2 50 277 1075 B
1 F
n
615 1129 1322 (socket, the Windows Sockets implementation posts an FD_ACCEPT message) 1322 SB
/fm 256 def
2 49 277 1126 B
1 F
n
615 1179 224 (immediately.) 224 SB
/fm 256 def
2 49 277 1176 B
1 F
n
/fm 256 def
2 49 277 1226 B
1 F
n
615 1279 1396 (The FD_WRITE event is handled slightly differently.  An FD_WRITE message is) 1396 SB
/fm 256 def
2 49 277 1276 B
1 F
n
615 1329 759 (posted when a socket is first connected with ) 759 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1374 1326 177 (connect\(\) ) 177 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1551 1329 292 (or accepted with ) 292 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1843 1326 143 (accept\(\)) 143 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1986 1329 83 (, and) 83 SB
/fm 256 def
2 50 277 1326 B
1 F
n
615 1380 203 (then after a ) 203 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
818 1377 120 (send\(\) ) 120 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
938 1380 46 (or ) 46 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
984 1377 155 (sendto\(\) ) 155 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1139 1380 878 (fails with WSAEWOULDBLOCK and buffer space) 878 SB
/fm 256 def
2 50 277 1377 B
1 F
n
615 1431 1371 (becomes available.  Therefore, an application can assume that sends are possible) 1371 SB
/fm 256 def
2 49 277 1428 B
1 F
n
615 1481 1266 (starting from the first FD_WRITE message and lasting until a send returns) 1266 SB
/fm 256 def
2 49 277 1478 B
1 F
n
615 1531 1492 (WSAEWOULDBLOCK.  After such a failure the application will be notified that sends) 1492 SB
/fm 256 def
2 49 277 1528 B
1 F
n
615 1581 825 (are again possible with an FD_WRITE message.) 825 SB
/fm 256 def
2 49 277 1578 B
1 F
n
615 1681 1427 (The FD_OOB event is used only when a socket is configured to receive out-of-band) 1427 SB
615 1731 1475 (data separately.  If the socket is configured to receive out-of-band data in-line, the out-) 1475 SB
615 1781 1489 (of-band \(expedited\) data is treated as normal data and the application should register an) 1489 SB
615 1831 825 (interest in, and will  receive, FD_READ events, ) 825 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
1440 1831 54 (not) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1494 1831 576 ( FD_OOB events.  An application) 576 SB
615 1881 1336 (may set or inspect the way in which out-of-band data is to be handled by using) 1336 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1928 214 (setsockopt\(\)) 214 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
829 1931 57 ( or ) 57 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
886 1928 219 (getsockopt\(\)) 219 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1105 1931 566 ( for the SO_OOBINLINE option.) 566 SB
615 2032 1382 (The error code in an FD_CLOSE message indicates whether the socket close was) 1382 SB
/fm 256 def
2 49 277 2029 B
1 F
n
615 2082 1492 (graceful or abortive.  If the error code is 0, then the close was graceful; if the error code) 1492 SB
/fm 256 def
2 49 277 2079 B
1 F
n
615 2132 1483 (is WSAECONNRESET, then the socket's virtual socket was reset.  This only applies to) 1483 SB
/fm 256 def
2 49 277 2129 B
1 F
n
615 2182 578 (sockets of type SOCK_STREAM.) 578 SB
/fm 256 def
2 49 277 2179 B
1 F
n
/fm 256 def
2 49 277 2229 B
1 F
n
615 2282 1448 (The FD_CLOSE message is posted when a close indication is received for the virtual) 1448 SB
/fm 256 def
2 49 277 2279 B
1 F
n
615 2332 1445 (circuit corresponding to the socket.  In TCP terms, this means that the FD_CLOSE is) 1445 SB
/fm 256 def
2 49 277 2329 B
1 F
n
615 2382 1423 (posted when the connection goes into the FIN WAIT or CLOSE WAIT states.  This) 1423 SB
/fm 256 def
2 49 277 2379 B
1 F
n
615 2432 709 (results from the remote end performing a ) 709 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1324 2429 212 (shutdown\(\) ) 212 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1536 2432 348 (on the send side or a) 348 SB
/fm 256 def
2 50 277 2429 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2480 238 (closesocket\(\).) 238 SB
/fm 256 def
2 50 277 2480 B
1 F
n
/fm 256 def
2 50 277 2531 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2585 1431 (Please note your application will receive ONLY an FD_CLOSE message to indicate) 1431 SB
/fm 256 def
2 49 277 2582 B
1 F
n
615 2635 1462 (closure of a virtual circuit. It will NOT receive an FD_READ message to indicate this) 1462 SB
/fm 256 def
2 49 277 2632 B
1 F
n
615 2685 171 (condition.) 171 SB
/fm 256 def
2 49 277 2682 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2784 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2785 426 (WSANOTINITIALISED) 426 SB
1215 2785 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 2782 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 2785 317 ( must occur before) 317 SB
1215 2836 252 (using this API.) 252 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 99 99
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1630 117 429 (WSAAsyncSelect ) 429 SB
2059 117 56 (92) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 270 331 (WSAENETDOWN) 331 SB
1215 270 878 (The Windows Sockets implementation has detected) 878 SB
1215 320 648 (that the network subsystem has failed.) 648 SB
615 420 249 (WSAEINVAL) 249 SB
1215 420 846 (Indicates that one of the specified parameters was) 846 SB
1215 470 118 (invalid) 118 SB
615 570 374 (WSAEINPROGRESS) 374 SB
1215 570 757 (A blocking Windows Sockets operation is in) 757 SB
1215 620 153 (progress.) 153 SB
615 720 1418 (Additional error codes may be set when an application window receives a message.) 1418 SB
615 770 632 (This error code is extracted from the ) 632 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1247 769 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1373 770 524 ( in the reply message using the) 524 SB
615 822 1436 (WSAGETSELECTERROR macro.  Possible error codes for each network event are:) 1436 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 869 416 (Event: FD_CONNECT) 416 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
615 923 189 (Error Code) 189 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
804 923 264 (                        ) 264 SB
1065 923 154 (              ) 154 SB
1215 923 150 (Meaning) 150 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 973 360 (WSAEADDRINUSE) 360 SB
1215 973 664 (The specified address is already in use.) 664 SB
615 1073 453 (WSAEADDRNOTAVAIL) 453 SB
1215 1073 886 (The specified address is not available from the local) 886 SB
1215 1123 155 (machine.) 155 SB
615 1223 415 (WSAEAFNOSUPPORT) 415 SB
1215 1223 828 (Addresses in the specified family cannot be used) 828 SB
1215 1273 277 (with this socket.) 277 SB
615 1373 423 (WSAECONNREFUSED) 423 SB
1215 1373 803 (The attempt to connect was forcefully rejected.) 803 SB
615 1473 426 (WSAEDESTADDRREQ) 426 SB
1215 1473 566 (A destination address is required.) 566 SB
615 1573 254 (WSAEFAULT) 254 SB
1215 1573 604 (The namelen argument is incorrect.) 604 SB
615 1673 249 (WSAEINVAL) 249 SB
1215 1673 719 (The socket is already bound to an address.) 719 SB
615 1773 274 (WSAEISCONN) 274 SB
1215 1773 554 (The socket is already connected.) 554 SB
615 1873 245 (WSAEMFILE) 245 SB
1215 1873 652 (No more file descriptors are available.) 652 SB
615 1973 403 (WSAENETUNREACH) 403 SB
1215 1973 859 (The network can't be reached from this host at this) 859 SB
1215 2023 87 (time.) 87 SB
615 2123 283 (WSAENOBUFS) 283 SB
1215 2123 867 (No buffer space is available.  The socket cannot be) 867 SB
1215 2173 183 (connected.) 183 SB
615 2273 323 (WSAENOTCONN) 323 SB
1215 2273 483 (The socket is not connected.) 483 SB
615 2373 316 (WSAENOTSOCK) 316 SB
1215 2373 619 (The descriptor is a file, not a socket.) 619 SB
615 2473 338 (WSAETIMEDOUT) 338 SB
1215 2473 882 (Attempt to connect timed out without establishing a) 882 SB
1215 2523 186 (connection) 186 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2620 349 (Event: FD_CLOSE) 349 SB
/fm 256 def
2 50 277 2620 B
1 F
n
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
615 2674 189 (Error Code) 189 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
804 2674 264 (                        ) 264 SB
1065 2674 154 (              ) 154 SB
1215 2674 150 (Meaning) 150 SB
/fm 256 def
2 49 277 2671 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2724 331 (WSAENETDOWN) 331 SB
1215 2724 878 (The Windows Sockets implementation has detected) 878 SB
/fm 256 def
2 49 277 2721 B
1 F
n
1215 2774 648 (that the network subsystem has failed.) 648 SB
/fm 256 def
2 49 277 2771 B
1 F
n
/fm 256 def
2 49 277 2821 B
1 F
n
615 2874 366 (WSAECONNRESET) 366 SB
1215 2874 765 (The connection was reset by the remote side.) 765 SB
/fm 256 def
2 49 277 2871 B
1 F
n
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 100 100
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1630 117 429 (WSAAsyncSelect ) 429 SB
2059 117 56 (93) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
/fm 256 def
2 49 277 267 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 320 435 (WSAECONNABORTED) 435 SB
1215 320 878 (The connection was aborted due to timeout or other) 878 SB
/fm 256 def
2 49 277 317 B
1 F
n
1215 370 122 (failure.) 122 SB
/fm 256 def
2 49 277 367 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 468 325 (Event: FD_READ) 325 SB
615 519 351 (Event: FD_WRITE) 351 SB
615 570 301 (Event: FD_OOB) 301 SB
615 621 379 (Event: FD_ACCEPT) 379 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
615 675 189 (Error Code) 189 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
804 675 264 (                        ) 264 SB
1065 675 154 (              ) 154 SB
1215 675 150 (Meaning) 150 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 725 331 (WSAENETDOWN) 331 SB
1215 725 878 (The Windows Sockets implementation has detected) 878 SB
1215 775 648 (that the network subsystem has failed.) 648 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 873 196 (Notes For) 196 SB
315 923 358 (Windows Sockets) 358 SB
315 974 192 (Suppliers) 192 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 975 1419 (It is the responsibility of the Windows Sockets Supplier to ensure that messages are) 1419 SB
615 1026 736 (successfully posted to the application.  If a ) 736 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1351 1023 257 (PostMessage\(\)) 257 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1608 1026 501 ( operation fails, the Windows) 501 SB
615 1077 893 (Sockets implementation MUST re-post that message) 893 SB
1508 1077 494 ( as long as the window exists) 494 SB
2002 1077 11 (.) 11 SB
/fm 256 def
2 49 277 1074 B
1 F
n
615 1177 1453 (Windows Sockets suppliers should use the WSAMAKESELECTREPLY macro when) 1453 SB
615 1227 283 (constructing the ) 283 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
898 1226 126 (lParam) 126 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1024 1227 272 ( in the message.) 272 SB
615 1329 1422 (When a socket is closed, the Windows Sockets Supplier should purge any messages) 1422 SB
615 1379 1414 (remaining for posting to the application window.  However the application must be) 1414 SB
615 1429 1496 (prepared to receive, and discard, any messages which may have been posted prior to the) 1496 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1476 227 (closesocket\(\)) 227 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
842 1479 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1579 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1577 127 (select\(\)) 127 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 101 101
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1414 117 645 (WSACancelAsyncRequest ) 645 SB
2059 117 56 (94) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 791 (4.3.8 WSACancelAsyncRequest\(\)) 791 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 793 (Cancel an incomplete asynchronous operation.) 793 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 60 (int ) 60 SB
675 527 275 (PASCAL FAR ) 275 SB
950 527 687 (WSACancelAsyncRequest \( HANDLE) 687 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1637 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1648 529 336 (hAsyncTaskHandle ) 336 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1984 527 28 (\);) 28 SB
/fm 256 def
2 51 277 527 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 681 325 (hAsyncTaskHandle) 325 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1065 682 897 (Specifies the asynchronous operation to be canceled.) 897 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 783 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 784 77 (The ) 77 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
692 781 500 (WSACancelAsyncRequest\(\)) 500 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1192 784 907 ( function is used to cancel an asynchronous operation) 907 SB
615 835 575 (which was initiated by one of the ) 575 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1190 832 407 (WSAAsyncGetXByY\(\)) 407 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1597 835 302 ( functions such as) 302 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 883 536 (WSAAsyncGetHostByName\(\)) 536 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1151 886 854 (.  The operation to be canceled is identified by the) 854 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 936 325 (hAsyncTaskHandle) 325 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
940 937 1136 ( parameter, which should be set to the asynchronous task handle as) 1136 SB
615 989 585 (returned by the initiating function.) 585 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1138 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1139 385 (The value returned by ) 385 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1000 1136 500 (WSACancelAsyncRequest\(\)) 500 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1500 1139 418 ( is 0 if the operation was) 418 SB
615 1190 1377 (successfully canceled.  Otherwise the value SOCKET_ERROR is returned, and a) 1377 SB
615 1240 853 (specific error number may be retrieved by calling ) 853 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1468 1237 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1842 1240 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1340 216 (Comments) 216 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1341 803 (An attempt to cancel an existing asynchronous ) 803 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1418 1338 407 (WSAAsyncGetXByY\(\)) 407 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1825 1341 241 ( operation can) 241 SB
615 1392 1352 (fail with an error code of WSAEALREADY for two reasons.  First, the original) 1352 SB
615 1442 1353 (operation has already completed and the application has dealt with the resultant) 1353 SB
615 1492 1364 (message.  Second, the original operation has already completed but the resultant) 1364 SB
615 1542 971 (message is still waiting in the application window queue.) 971 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1640 196 (Notes For) 196 SB
315 1690 358 (Windows Sockets) 358 SB
315 1741 192 (Suppliers) 192 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1742 1436 (It is unclear whether the application can usefully distinguish between WSAEINVAL) 1436 SB
615 1793 1311 (and WSAEALREADY, since in both cases the error indicates that there is no) 1311 SB
615 1843 1461 (asynchronous operation in progress with the indicated handle.  [Trivial exception: 0 is) 1461 SB
615 1893 1485 (always an invalid asynchronous task handle.]  The Windows Sockets specification does) 1485 SB
615 1943 1450 (not prescribe how a conformant Windows Sockets implementation should distinguish) 1450 SB
615 1993 1395 (between the two cases.  For maximum portability, a Windows Sockets application) 1395 SB
615 2043 690 (should treat the two errors as equivalent.) 690 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2142 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2143 426 (WSANOTINITIALISED) 426 SB
1215 2143 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 2140 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 2143 317 ( must occur before) 317 SB
1215 2194 252 (using this API.) 252 SB
615 2294 331 (WSAENETDOWN) 331 SB
1215 2294 878 (The Windows Sockets implementation has detected) 878 SB
1215 2344 648 (that the network subsystem has failed.) 648 SB
615 2444 249 (WSAEINVAL) 249 SB
1215 2444 900 (Indicates that the specified asynchronous task handle) 900 SB
1215 2494 194 (was invalid) 194 SB
615 2594 374 (WSAEINPROGRESS) 374 SB
1215 2594 757 (A blocking Windows Sockets operation is in) 757 SB
1215 2644 153 (progress.) 153 SB
615 2744 319 (WSAEALREADY) 319 SB
1215 2744 771 (The asynchronous routine being canceled has) 771 SB
1215 2794 324 (already completed.) 324 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 102 102
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1414 117 645 (WSACancelAsyncRequest ) 645 SB
2059 117 56 (95) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 269 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 267 526 (WSAAsyncGetHostByAddr\(\)) 526 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1141 270 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1163 267 536 (WSAAsyncGetHostByName\(\)) 536 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1699 270 11 (,) 11 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 318 597 (WSAAsyncGetProtoByNumber\(\)) 597 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1212 321 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1234 318 553 (WSAAsyncGetProtoByName\(\)) 553 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1787 321 11 (,) 11 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 369 536 (WSAAsyncGetHostByName\(\)) 536 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1151 372 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1173 369 509 (WSAAsyncGetServByPort\(\)) 509 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1682 372 11 (,) 11 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 420 534 (WSAAsyncGetServByName\(\)) 534 SB
1149 420 11 (.) 11 SB
/fm 256 def
2 50 277 420 B
1 F
n
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 103 103
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1459 117 600 (WSACancelBlockingCall ) 600 SB
2059 117 56 (96) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 746 (4.3.9 WSACancelBlockingCall\(\)) 746 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 905 (Cancel a blocking call which is currently in progress.) 905 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 60 (int ) 60 SB
675 527 275 (PASCAL FAR ) 275 SB
950 527 605 (WSACancelBlockingCall \( void \);) 605 SB
/fm 256 def
2 50 277 527 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 630 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 631 1446 (This function cancels any outstanding blocking operation for this task.  It is normally) 1446 SB
615 682 380 (used in two situations:) 380 SB
615 782 1446 (\(1\) An application is processing a message which has been received while a blocking) 1446 SB
615 832 544 (call is in progress.  In this case, ) 544 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1159 829 314 (WSAIsBlocking\(\)) 314 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1473 832 216 ( will be true.) 216 SB
615 933 1333 (\(2\) A blocking call is in progress, and Windows Sockets has called back to the) 1333 SB
615 983 976 (application's "blocking hook" function \(as established by ) 976 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1591 980 436 (WSASetBlockingHook\(\)) 436 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2027 983 25 (\).) 25 SB
615 1084 1479 (In each case, the original blocking call will terminate as soon as possible with the error) 1479 SB
615 1134 1380 (WSAEINTR.  \(In \(1\), the termination will not take place until Windows message) 1380 SB
615 1184 1484 (scheduling has caused control to revert to the blocking routine in Windows Sockets.  In) 1484 SB
615 1234 1327 (\(2\), the blocking call will be terminated as soon as the blocking hook function) 1327 SB
615 1284 197 (completes.\)) 197 SB
615 1384 428 (In the case of a blocking ) 428 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1043 1381 166 (connect\(\)) 166 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1209 1384 837 ( operation, the Windows Sockets implementation) 837 SB
615 1435 1447 (will terminate the blocking call as soon as possible, but it may not be possible for the) 1447 SB
615 1485 1493 (socket resources to be released until the connection has completed \(and then been reset\)) 1493 SB
615 1535 1482 (or timed out.  This is likely to be noticeable only if the application immediately tries to) 1482 SB
615 1585 905 (open a new socket \(if no sockets are available\), or to ) 905 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1520 1582 166 (connect\(\)) 166 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1686 1585 300 ( to the same peer.) 300 SB
615 1686 246 (Cancelling an ) 246 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
861 1683 154 (accept\(\) ) 154 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1015 1686 76 (or a ) 76 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1091 1683 138 (select\(\) ) 138 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1229 1686 880 (call does not adversely impact the sockets passed to) 880 SB
/fm 256 def
2 50 277 1683 B
1 F
n
615 1737 1489 (these calls.  Only the particular call fails; any operation that was legal before the cancel) 1489 SB
/fm 256 def
2 49 277 1734 B
1 F
n
615 1787 1317 (is legal after the cancel, and the state of the socket is not affected in any way.) 1317 SB
/fm 256 def
2 49 277 1784 B
1 F
n
615 1887 620 (Cancelling any operation other than ) 620 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1235 1884 154 (accept\(\) ) 154 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1389 1887 72 (and ) 72 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1461 1884 138 (select\(\) ) 138 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1599 1887 437 (can leave the socket in an) 437 SB
/fm 256 def
2 50 277 1884 B
1 F
n
615 1938 1493 (indeterminate state.  If an application cancels a blocking operation on a socket, the only) 1493 SB
/fm 256 def
2 49 277 1935 B
1 F
n
615 1988 1436 (operation that the application can depend on being able to perform on the socket is a) 1436 SB
/fm 256 def
2 49 277 1985 B
1 F
n
615 2038 117 (call to ) 117 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
732 2035 227 (closesocket\(\)) 227 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
959 2038 1103 (, although other operations may work on some Windows Sockets) 1103 SB
/fm 256 def
2 50 277 2035 B
1 F
n
615 2089 1478 (implementations.  If an application desires maximum portability, it must be careful not) 1478 SB
/fm 256 def
2 49 277 2086 B
1 F
n
615 2139 1368 (to depend on performing operations after a cancel.  An application may reset the) 1368 SB
/fm 256 def
2 49 277 2136 B
1 F
n
615 2189 946 (connection by setting the timeout on SO_LINGER to 0.) 946 SB
/fm 256 def
2 49 277 2186 B
1 F
n
/fm 256 def
2 49 277 2236 B
1 F
n
615 2289 1471 (If a cancel operation compromised the integrity of a SOCK_STREAM's data stream in) 1471 SB
/fm 256 def
2 49 277 2286 B
1 F
n
615 2339 1446 (any way, the Windows Sockets implementation must reset the connection and fail all) 1446 SB
/fm 256 def
2 49 277 2336 B
1 F
n
615 2389 481 (future operations other than ) 481 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1096 2386 238 (closesocket\(\) ) 238 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1334 2389 532 (with WSAECONNABORTED.) 532 SB
/fm 256 def
2 50 277 2386 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2489 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2490 385 (The value returned by ) 385 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1000 2487 481 (WSACancelBlockingCall\(\)) 481 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1481 2490 418 ( is 0 if the operation was) 418 SB
615 2541 1377 (successfully canceled.  Otherwise the value SOCKET_ERROR is returned, and a) 1377 SB
615 2591 853 (specific error number may be retrieved by calling ) 853 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1468 2588 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1842 2591 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2691 216 (Comments) 216 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2692 667 (Note that it is possible that the network) 667 SB
1282 2692 536 ( operation completes before the) 536 SB
/fm 256 def
2 50 277 2689 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2740 503 (WSACancelBlockingCall\(\)  ) 503 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1118 2743 965 (is processed, for example if data is received into the user) 965 SB
/fm 256 def
2 50 277 2740 B
1 F
n
615 2794 1422 (buffer at interrupt time while the application is in a blocking hook.  In this case, the) 1422 SB
/fm 256 def
2 49 277 2791 B
1 F
n
615 2844 819 (blocking operation will return successfully as if ) 819 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1434 2841 492 (WSACancelBlockingCall\(\) ) 492 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1926 2844 166 (had never) 166 SB
/fm 256 def
2 50 277 2841 B
1 F
n
615 2895 457 (been called.  Note that the ) 457 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1072 2892 492 (WSACancelBlockingCall\(\) ) 492 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1564 2895 500 (still succeeds in this case; the) 500 SB
/fm 256 def
2 50 277 2892 B
1 F
n
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 104 104
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1459 117 600 (WSACancelBlockingCall ) 600 SB
2059 117 56 (97) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 270 1080 (only way to know with certainty that an operation was actually ) 1080 SB
1695 270 149 (canceled) 149 SB
1844 270 253 ( is to check for) 253 SB
/fm 256 def
2 49 277 267 B
1 F
n
615 320 895 (a return code of WSAEINTR from the blocking call.) 895 SB
/fm 256 def
2 49 277 317 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 419 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 420 426 (WSANOTINITIALISED) 426 SB
1215 420 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 417 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 420 317 ( must occur before) 317 SB
1215 471 252 (using this API.) 252 SB
615 571 331 (WSAENETDOWN) 331 SB
1215 571 878 (The Windows Sockets implementation has detected) 878 SB
1215 621 648 (that the network subsystem has failed.) 648 SB
615 721 249 (WSAEINVAL) 249 SB
1215 721 867 (Indicates that there is no outstanding blocking call.) 867 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 105 105
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1730 117 329 (WSACleanup ) 329 SB
2059 117 56 (98) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 503 (4.3.10 WSACleanup\(\)) 503 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 769 (Terminate use of the Windows Sockets DLL.) 769 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 60 (int ) 60 SB
675 527 275 (PASCAL FAR ) 275 SB
950 527 398 (WSACleanup \( void \);) 398 SB
/fm 256 def
2 50 277 527 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 630 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 631 262 (An application ) 262 SB
877 631 139 (or DLL ) 139 SB
1016 631 624 (is required to perform a \(successful\) ) 624 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1640 628 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1900 631 192 ( call before) 192 SB
/fm 256 def
2 50 277 628 B
1 F
n
615 682 1394 (it can use Windows Sockets services.  When it has completed the use of Windows) 1394 SB
615 732 416 (Sockets, the application ) 416 SB
1031 732 139 (or DLL ) 139 SB
1170 732 33 (m) 33 SB
1203 732 49 (ust) 49 SB
1252 732 84 ( call ) 84 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1336 729 274 (WSACleanup\(\)) 274 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1610 732 441 ( to deregister itself from a) 441 SB
/fm 256 def
2 50 277 729 B
1 F
n
615 783 581 (Windows Sockets implementation) 581 SB
1196 783 881 ( and allow the implementation to free any resources) 881 SB
/fm 256 def
2 49 277 780 B
1 F
n
615 833 888 (allocated on behalf of the application or DLL.  Any ) 888 SB
1503 833 93 (open ) 93 SB
1596 833 512 (SOCK_STREAM sockets that) 512 SB
/fm 256 def
2 49 277 830 B
1 F
n
615 883 348 (are connected when ) 348 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
963 880 285 (WSACleanup\(\) ) 285 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1248 883 857 (is called are reset; sockets which have been closed) 857 SB
/fm 256 def
2 50 277 880 B
1 F
n
615 934 86 (with ) 86 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
701 931 238 (closesocket\(\) ) 238 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
939 934 1093 (but which still have pending data to be sent are not affected--the) 1093 SB
/fm 256 def
2 50 277 931 B
1 F
n
615 985 422 (pending data is still sent.) 422 SB
/fm 256 def
2 49 277 982 B
1 F
n
/fm 256 def
2 49 277 1032 B
1 F
n
615 1085 401 (There must be a call to ) 401 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1016 1082 285 (WSACleanup\(\) ) 285 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1301 1085 282 (for every call to ) 282 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1583 1082 271 (WSAStartup\(\) ) 271 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1854 1085 175 (made by a) 175 SB
/fm 256 def
2 50 277 1082 B
1 F
n
615 1136 348 (task.  Only the final ) 348 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
963 1133 285 (WSACleanup\(\) ) 285 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1248 1136 863 (for that task does the actual cleanup; the preceding) 863 SB
/fm 256 def
2 50 277 1133 B
1 F
n
615 1187 1435 (calls simply decrement an internal reference count in the Windows Sockets DLL.  A) 1435 SB
/fm 256 def
2 49 277 1184 B
1 F
n
615 1237 583 (naive application may ensure that ) 583 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1198 1234 285 (WSACleanup\(\) ) 285 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1483 1237 596 (was called enough times by calling) 596 SB
/fm 256 def
2 50 277 1234 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1285 285 (WSACleanup\(\) ) 285 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
900 1288 849 (in a loop until it returns WSANOTINITIALISED.) 849 SB
/fm 256 def
2 50 277 1285 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1388 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1389 1255 (The return value is 0 if the operation was successful.  Otherwise the value) 1255 SB
615 1440 1481 (SOCKET_ERROR is returned, and a specific error number may be retrieved by calling) 1481 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1487 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
989 1490 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1590 216 (Comments) 216 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1591 321 (Attempting to call ) 321 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
936 1588 274 (WSACleanup\(\)) 274 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1210 1591 104 ( from ) 104 SB
1314 1591 108 (within) 108 SB
1422 1591 606 ( a blocking hook and then failing to) 606 SB
/fm 256 def
2 50 277 1588 B
1 F
n
615 1642 593 (check the return code is a common) 593 SB
1208 1642 172 ( Windows) 172 SB
1380 1642 509 ( Sockets programming error.  ) 509 SB
1889 1642 79 (If an) 79 SB
/fm 256 def
2 49 277 1639 B
1 F
n
615 1692 1477 (application needs to quit while a blocking call is outstanding, the application must first) 1477 SB
/fm 256 def
2 49 277 1689 B
1 F
n
615 1742 501 (cancel the blocking call with ) 501 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1116 1739 481 (WSACancelBlockingCall\(\)) 481 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1597 1742 242 ( then issue the) 242 SB
/fm 256 def
2 50 277 1739 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1790 285 (WSACleanup\(\) ) 285 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
900 1793 912 (call once control has been returned to the application.) 912 SB
/fm 256 def
2 50 277 1790 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1892 196 (Notes For) 196 SB
315 1942 358 (Windows Sockets) 358 SB
315 1993 192 (Suppliers) 192 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1994 989 (Well-behaved Windows Sockets applications will make a ) 989 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1604 1991 274 (WSACleanup\(\)) 274 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1878 1994 117 ( call to) 117 SB
615 2045 1424 (indicate deregistration from a Windows Sockets implementation.  This function can) 1424 SB
615 2095 1467 (thus, for example, be utilized to free up resources allocated to the specific application.) 1467 SB
615 2195 1388 (A Windows Sockets implementation must be prepared to deal with an application) 1388 SB
615 2245 603 (which terminates without invoking ) 603 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1218 2242 274 (WSACleanup\(\)) 274 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1492 2245 529 ( - for example, as a result of an) 529 SB
615 2296 93 (error.) 93 SB
615 2396 559 (In a multithreaded environment, ) 559 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1174 2393 274 (WSACleanup\(\)) 274 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1448 2396 502 ( terminates Windows Sockets) 502 SB
615 2447 434 (operations for all threads.) 434 SB
615 2547 922 (A Windows Sockets implementation must ensure that ) 922 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1537 2544 274 (WSACleanup\(\)) 274 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1811 2547 275 ( leaves things in) 275 SB
615 2598 736 (a state in which the application can invoke ) 736 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1351 2595 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1611 2598 422 ( to re-establish Windows) 422 SB
615 2649 249 (Sockets usage.) 249 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2748 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2749 426 (WSANOTINITIALISED) 426 SB
1215 2749 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 2746 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 2749 317 ( must occur before) 317 SB
1215 2800 252 (using this API.) 252 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 106 106
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1730 117 329 (WSACleanup ) 329 SB
2059 117 56 (99) 56 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 270 331 (WSAENETDOWN) 331 SB
1215 270 878 (The Windows Sockets implementation has detected) 878 SB
1215 320 648 (that the network subsystem has failed.) 648 SB
615 420 374 (WSAEINPROGRESS) 374 SB
1215 420 757 (A blocking Windows Sockets operation is in) 757 SB
1215 470 153 (progress.) 153 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 569 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 567 260 (WSAStartup\(\)) 260 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 107 107
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1592 117 439 (WSAGetLastError ) 439 SB
2031 117 84 (100) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 613 (4.3.11 WSAGetLastError\(\)) 613 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 921 (Get the error status for the last operation which failed.) 921 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 60 (int ) 60 SB
675 527 275 (PASCAL FAR ) 275 SB
950 527 498 (WSAGetLastError \( void \);) 498 SB
/fm 256 def
2 50 277 527 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 630 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 631 1474 (This function returns the last network error that occurred.  When a particular Windows) 1474 SB
615 682 1490 (Sockets API function indicates that an error has occurred, this function should be called) 1490 SB
615 732 636 (to retrieve the appropriate error code.) 636 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 831 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 832 1406 (The return value indicates the error code for the last Windows Sockets API routine) 1406 SB
615 883 429 (performed by this thread.) 429 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 981 196 (Notes For) 196 SB
315 1031 358 (Windows Sockets) 358 SB
315 1082 192 (Suppliers) 192 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1083 253 (The use of the ) 253 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
868 1080 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1242 1083 859 ( function to retrieve the last error code, rather than) 859 SB
615 1134 641 (relying on a global error variable \(cf. ) 641 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1256 1133 93 (errno) 93 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1349 1134 544 (\), is required in order to provide) 544 SB
615 1186 938 (compatibility with future multi-threaded environments.) 938 SB
615 1286 559 (Note that in a nonpreemptive Wi) 559 SB
1174 1286 109 (ndows) 109 SB
1283 1286 236 ( environment ) 236 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1519 1283 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1893 1286 171 ( is used to) 171 SB
/fm 256 def
2 50 277 1283 B
1 F
n
615 1337 1253 (retrieve only Windows Sockets API errors.  In a preemptive environment,) 1253 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1384 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
989 1387 214 ( will invoke ) 214 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1203 1384 279 (GetLastError\(\)) 279 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1482 1387 593 (, which is used to retrieve the error) 593 SB
615 1438 1486 (status for all Win32 API functions on a per-thread basis.  For portability, an application) 1486 SB
615 1488 190 (should use ) 190 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
805 1485 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1179 1488 11 ( ) 11 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
1190 1488 213 (immediately) 213 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1403 1488 696 ( after the Windows Sockets API function) 696 SB
615 1539 222 (which failed.) 222 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1638 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1636 364 (WSASetLastError\(\)) 364 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 108 108
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1646 117 385 (WSAIsBlocking ) 385 SB
2031 117 84 (101) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 559 (4.3.12 WSAIsBlocking\(\)) 559 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 725 (Determine if a blocking call is in progress.) 725 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 133 (BOOL ) 133 SB
748 527 275 (PASCAL FAR ) 275 SB
1023 527 438 (WSAIsBlocking \( void \);) 438 SB
/fm 256 def
2 50 277 527 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 630 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 631 1458 (This function allows a task to determine if it is executing while waiting for a previous) 1458 SB
615 682 443 (blocking call to complete.) 443 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 781 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 782 1340 (The return value is TRUE if there is an outstanding blocking function awaiting) 1340 SB
615 833 632 (completion.  Otherwise, it is FALSE.) 632 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 932 216 (Comments) 216 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 933 1374 (Although a call issued on a blocking socket appears to an application program as) 1374 SB
615 984 1463 (though it "blocks", the Windows Sockets DLL has to relinquish the processor to allow) 1463 SB
615 1034 1492 (other applications to run.  This means that it is possible for the application which issued) 1492 SB
615 1084 1399 (the blocking call to be re-entered, depending on the message\(s\) it receives.  In this) 1399 SB
615 1134 224 (instance, the ) 224 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
839 1131 314 (WSAIsBlocking\(\)) 314 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1153 1134 923 ( function can be used to ascertain whether the task has) 923 SB
615 1185 1458 (been re-entered while waiting for an outstanding blocking call to complete.  Note that) 1458 SB
615 1235 1192 (Windows Sockets prohibits more than one outstanding call per thread.) 1192 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1333 196 (Notes For) 196 SB
315 1383 358 (Windows Sockets) 358 SB
315 1434 192 (Suppliers) 192 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1435 1481 (A Windows Sockets implementation must prohibit more than one outstanding blocking) 1481 SB
615 1486 255 (call per thread.) 255 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 109 109
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1484 117 547 (WSASetBlockingHook ) 547 SB
2031 117 84 (102) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 721 (4.3.13 WSASetBlockingHook\(\)) 721 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 969 (Establish an application-specific blocking hook function.) 969 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 216 (FARPROC ) 216 SB
831 527 275 (PASCAL FAR ) 275 SB
1106 527 649 (WSASetBlockingHook \( FARPROC) 649 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1755 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1766 529 228 (lpBlockFunc ) 228 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1994 527 28 (\);) 28 SB
/fm 256 def
2 51 277 527 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 681 217 (lpBlockFunc) 217 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 682 1199 (A pointer to the procedure instance address of the blocking function to) 1199 SB
915 734 206 (be installed.) 206 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 833 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 834 1480 (This function installs a new function which a Windows Sockets implementation should) 1480 SB
615 885 823 (use to implement blocking socket function calls.) 823 SB
615 985 1463 (A Windows Sockets implementation includes a default mechanism by which blocking) 1463 SB
615 1035 834 (socket functions are implemented.  The function ) 834 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1449 1032 436 (WSASetBlockingHook\(\)) 436 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1885 1035 163 ( gives the) 163 SB
615 1086 1419 (application the ability to execute its own function at "blocking" time in place of the) 1419 SB
615 1136 281 (default function.) 281 SB
615 1236 1492 (When an application invokes a blocking Windows Sockets API operation, the Windows) 1492 SB
615 1286 1398 (Sockets implementation initiates the operation and then enters a loop which is sim) 1398 SB
2013 1286 57 (ilar) 57 SB
2070 1286 44 ( to) 44 SB
/fm 256 def
2 49 277 1283 B
1 F
n
615 1336 449 (the following pseudocode:) 449 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 1433 225 (for\(;;\) {) 225 SB
615 1478 1200 (     /* flush messages for good user response */) 1200 SB
615 1523 650 (     while\(BlockingHook\(\)\)) 650 SB
615 1568 275 (          ;) 275 SB
615 1613 1100 (     /* check for WSACancelBlockingCall\(\) */) 1100 SB
615 1658 750 (     if\(operation_cancelled\(\)\)) 750 SB
615 1703 400 (          break;) 400 SB
615 1748 1150 (     /* check to see if operation completed */) 1150 SB
615 1793 725 (     if\(operation_complete\(\)\)) 725 SB
615 1838 1100 (          break;     /* normal completion */) 1100 SB
615 1883 25 (}) 25 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1981 1497 (Note that Windows Sockets implementations may perform the above steps in a different) 1497 SB
/fm 256 def
2 49 277 1978 B
1 F
n
615 2031 1396 (order; for example, the check for operation complete may occur before calling the) 1396 SB
/fm 256 def
2 49 277 2028 B
1 F
n
615 2081 276 (blocking hook.  ) 276 SB
891 2081 206 (The default ) 206 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1097 2078 285 (BlockingHook\(\)) 285 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1382 2081 435 ( function is equivalent to:) 435 SB
/fm 256 def
2 50 277 2078 B
1 F
n
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 2179 800 (BOOL DefaultBlockingHook\(void\) {) 800 SB
615 2224 325 (     MSG msg;) 325 SB
615 2269 350 (     BOOL ret;) 350 SB
615 2314 950 (     /* get the next message if any */) 950 SB
615 2359 850 (     ret = \(BOOL\)PeekMessage\(&msg,) 850 SB
1465 2359 125 (NULL,) 125 SB
1590 2359 375 (0,0,PM_REMOVE\);) 375 SB
/fm 256 def
2 44 277 2359 B
1 F
n
615 2404 900 (     /* if we got one, process it */) 900 SB
615 2449 375 (     if \(ret\) {) 375 SB
615 2494 825 (          TranslateMessage\(&msg\);) 825 SB
615 2539 800 (          DispatchMessage\(&msg\);) 800 SB
615 2584 150 (     }) 150 SB
615 2629 875 (     /* TRUE if we got a message */) 875 SB
615 2674 400 (     return ret;) 400 SB
615 2719 25 (}) 25 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2817 77 (The ) 77 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
692 2814 436 (WSASetBlockingHook\(\)) 436 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1128 2817 963 ( function is provided to support those applications which) 963 SB
615 2868 1418 (require more complex message processing - for example, those employing the MDI) 1418 SB
615 2918 734 (\(multiple document interface\) model.  It is ) 734 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
1349 2918 54 (not) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1403 2918 698 ( intended as a mechanism for performing) 698 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 110 110
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1484 117 547 (WSASetBlockingHook ) 547 SB
2031 117 84 (103) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 270 1455 (general applications functions.  In particular, the only Windows Sockets API function) 1455 SB
615 320 1055 (which may be issued from a custom blocking hook function is) 1055 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 367 481 (WSACancelBlockingCall\(\)) 481 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1096 370 842 (, which will cause the blocking loop to terminate.) 842 SB
615 471 1464 (This function must be implemented on a per-task basis for non-multithreaded versions) 1464 SB
/fm 256 def
2 49 277 468 B
1 F
n
615 521 1452 (of Windows and on a per-thread basis for multithreaded versions of Windows such as) 1452 SB
/fm 256 def
2 49 277 518 B
1 F
n
615 571 1430 (Windows NT.  It thus provides for a particular task or thread to replace the blocking) 1430 SB
/fm 256 def
2 49 277 568 B
1 F
n
615 621 878 (mechanism without affecting other tasks or threads.) 878 SB
/fm 256 def
2 49 277 618 B
1 F
n
/fm 256 def
2 49 277 668 B
1 F
n
615 721 1498 (In multithreaded versions of Windows, there is no default blocking hook--blocking calls) 1498 SB
/fm 256 def
2 49 277 718 B
1 F
n
615 771 1425 (block the thread that makes the call.  However, an application may install a specific) 1425 SB
/fm 256 def
2 49 277 768 B
1 F
n
615 821 434 (blocking hook by calling ) 434 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1049 818 447 (WSASetBlockingHook\(\).) 447 SB
/fm 256 def
2 50 277 818 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 872 1480 (This allows easy portability of applications that depend on the blocking hook behavior.) 1480 SB
/fm 256 def
2 49 277 869 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 971 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 972 1374 (The return value is a pointer to the procedure-instance of the previously installed) 1374 SB
615 1023 1007 (blocking function.  The application or library that calls the ) 1007 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1622 1020 447 (WSASetBlockingHook \(\)) 447 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1074 1350 (function should save this return value so that it can be restored if necessary.  \(If) 1350 SB
615 1124 1424 ("nesting" is not important, the application may simply discard the value returned by) 1424 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1171 436 (WSASetBlockingHook\(\)) 436 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1051 1174 338 ( and eventually use ) 338 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1389 1171 148 (WSAUn) 148 SB
1537 1171 88 (hook) 88 SB
1625 1171 285 (BlockingHook\(\)) 285 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1910 1174 170 ( to restore) 170 SB
/fm 256 def
2 50 277 1171 B
1 F
n
615 1225 1377 (the default mechanism.\)  If the operation fails, a NULL pointer is returned, and a) 1377 SB
615 1275 853 (specific error number may be retrieved by calling ) 853 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1468 1272 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1842 1275 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1375 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1376 426 (WSANOTINITIALISED) 426 SB
1215 1376 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 1373 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 1376 317 ( must occur before) 317 SB
1215 1427 252 (using this API.) 252 SB
615 1527 331 (WSAENETDOWN) 331 SB
1215 1527 878 (The Windows Sockets implementation has detected) 878 SB
1215 1577 648 (that the network subsystem has failed.) 648 SB
615 1677 374 (WSAEINPROGRESS) 374 SB
1215 1677 757 (A blocking Windows Sockets operation is in) 757 SB
1215 1727 153 (progress.) 153 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1826 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1824 521 (WSAUnhookBlockingHook\(\)) 521 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 111 111
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1598 117 433 (WSASetLastError ) 433 SB
2031 117 84 (104) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 607 (4.3.14 WSASetLastError\(\)) 607 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 762 (Set the error code which can be retrieved by ) 762 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1377 325 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1751 328 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 88 (void ) 88 SB
703 527 275 (PASCAL FAR ) 275 SB
978 527 421 (WSASetLastError \( int) 421 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1399 530 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1410 529 118 (iError ) 118 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1528 527 28 (\);) 28 SB
/fm 256 def
2 51 277 527 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 631 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 632 1476 (This function allows an application to set the error code to be returned by a subsequent) 1476 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 680 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
989 683 1076 ( call for the current thread.  Note that any subsequent Windows) 1076 SB
615 734 1396 (Sockets routine called by the application will override the error code as set by this) 1396 SB
615 784 131 (routine.) 131 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 933 107 (iError) 107 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 934 930 (Specifies the error code to be returned by a subsequent) 930 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
915 983 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1289 986 84 ( call.) 84 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1085 196 (Notes For) 196 SB
315 1135 358 (Windows Sockets) 358 SB
315 1186 192 (Suppliers) 192 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1187 865 (In a Win32 environment, this function will invoke ) 865 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1480 1184 269 (SetLastError\(\)) 269 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1749 1187 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1287 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1288 102 (None.) 102 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1388 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1389 426 (WSANOTINITIALISED) 426 SB
1215 1389 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 1386 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 1389 317 ( must occur before) 317 SB
1215 1440 252 (using this API.) 252 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1539 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1537 374 (WSAGetLastError\(\)) 374 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 112 112
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1725 117 306 (WSAStartup ) 306 SB
2031 117 84 (105) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 480 (4.3.15 WSAStartup\(\)) 480 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 326 231 (Description) 231 SB
315 427 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 425 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 528 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 526 60 (int ) 60 SB
675 526 275 (PASCAL FAR ) 275 SB
950 526 403 (WSAStartup \( WORD) 403 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1353 529 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1364 528 333 (wVersionRequested) 333 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1697 526 11 (,) 11 SB
/fm 256 def
2 51 277 526 B
1 F
n
615 578 267 (LPWSADATA) 267 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
882 581 11 ( ) 11 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
893 580 199 (lpWSAData) 199 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1092 581 11 ( ) 11 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1103 578 28 (\);) 28 SB
/fm 256 def
2 51 277 578 B
1 F
n
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 732 333 (wVersionRequested) 333 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1065 733 920 (The highest version of Windows Sockets API support ) 920 SB
1985 733 127 (that the) 127 SB
/fm 256 def
2 51 277 730 B
1 F
n
1065 785 232 (caller can use) 232 SB
1297 785 703 (.  The high order byte specifies the minor) 703 SB
/fm 256 def
2 49 277 782 B
1 F
n
1065 835 997 (version \(revision\) number; the low-order byte specifies the) 997 SB
1065 885 385 (major version number.) 385 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
615 984 199 (lpWSAData) 199 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1065 985 279 (A pointer to the ) 279 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1344 982 213 (WSADATA) 213 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1557 985 533 ( data structure that is to receive) 533 SB
1065 1037 823 (details of the Windows Sockets implementation.) 823 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1136 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1137 238 (This function ) 238 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
853 1134 121 (MUST) 121 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
974 1137 1076 ( be the first Windows Sockets function called by an application) 1076 SB
2050 1137 46 ( or) 46 SB
/fm 256 def
2 50 277 1134 B
1 F
n
615 1188 82 (DLL) 82 SB
697 1188 477 (.  It allows an application or) 477 SB
1174 1188 104 ( DLL ) 104 SB
1278 1188 813 ( to specify the version of Windows Sockets API) 813 SB
/fm 256 def
2 49 277 1185 B
1 F
n
615 1238 1463 (required and to retrieve details of the specific Windows Sockets implementation.  The) 1463 SB
615 1288 189 (application) 189 SB
804 1288 139 ( or DLL) 139 SB
943 1288 1070 ( may only issue further Windows Sockets API functions after a) 1070 SB
/fm 256 def
2 49 277 1285 B
1 F
n
615 1338 184 (successful ) 184 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
799 1335 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1059 1338 201 ( invocation.) 201 SB
615 1439 1438 (In order to support future Windows Sockets implementations and applications which) 1438 SB
/fm 256 def
2 49 277 1436 B
1 F
n
615 1489 1403 (may have functionality differences from Windows Sockets 1.1, a negotiation takes) 1403 SB
/fm 256 def
2 49 277 1486 B
1 F
n
615 1539 145 (place in ) 145 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
760 1536 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1020 1539 262 (.  The caller of ) 262 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1282 1536 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1542 1539 542 ( and the Windows Sockets DLL) 542 SB
/fm 256 def
2 50 277 1536 B
1 F
n
615 1590 1471 (indicate to each other the highest version that they can support, and each confirms that) 1471 SB
/fm 256 def
2 49 277 1587 B
1 F
n
615 1640 951 (the other's highest version is acceptable.  Upon entry to ) 951 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1566 1637 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1826 1640 246 (, the Windows) 246 SB
/fm 256 def
2 50 277 1637 B
1 F
n
615 1691 1389 (Sockets DLL examines the version requested by the application.  If this version is) 1389 SB
/fm 256 def
2 49 277 1688 B
1 F
n
615 1741 1433 (higher than the lowest version supported by the DLL, the call succeeds and the DLL) 1433 SB
/fm 256 def
2 49 277 1738 B
1 F
n
615 1791 172 (returns in ) 172 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
787 1790 254 (wHighVersion ) 254 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1041 1791 635 (the highest version it supports and in ) 635 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1676 1790 159 (wVersion) 159 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1835 1791 239 ( the minimum) 239 SB
/fm 256 def
2 51 277 1788 B
1 F
n
615 1843 390 (of its high version and ) 390 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1005 1842 366 (wVersionRequested.  ) 366 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1371 1843 708 (The Windows Sockets DLL then assumes) 708 SB
/fm 256 def
2 51 277 1840 B
1 F
n
615 1895 482 (that the application will use ) 482 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1097 1894 170 (wVersion.) 170 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1267 1895 124 (  If the ) 124 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1391 1894 159 (wVersion) 159 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1550 1895 209 ( field of the ) 209 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1759 1892 213 (WSADATA) 213 SB
/fm 256 def
2 51 277 1892 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1947 886 (structure is unacceptable to the caller, it should call ) 886 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1501 1944 285 (WSACleanup\(\) ) 285 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1786 1947 288 (and either search) 288 SB
/fm 256 def
2 50 277 1944 B
1 F
n
615 1998 924 (for another Windows Sockets DLL or fail to initialize.) 924 SB
/fm 256 def
2 49 277 1995 B
1 F
n
/fm 256 def
2 49 277 2045 B
1 F
n
615 2098 1337 (This negotiation allows both a Windows Sockets DLL and a Windows Sockets) 1337 SB
615 2148 1370 (application to support a range of Windows Sockets versions.  An application can) 1370 SB
615 2198 365 (successfully utilize a ) 365 SB
980 2198 314 (Windows Sockets ) 314 SB
1294 2198 706 (DLL if there is any overlap in the version) 706 SB
/fm 256 def
2 49 277 2195 B
1 F
n
615 2248 891 (ranges.  The following chart gives examples of how ) 891 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1506 2245 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1766 2248 157 ( works in) 157 SB
615 2299 726 (conjunction with different application and ) 726 SB
1341 2299 314 (Windows Sockets ) 314 SB
1655 2299 245 (DLL versions:) 245 SB
/fm 256 def
2 49 277 2296 B
1 F
n
32 0 0 33 33 0 0 0 30 /Times-Roman /font32 ANSIFont font
gs 223 47 608 2396 CB
628 2406 24 (A) 24 SB
gr
gs 223 47 608 2396 CB
652 2406 154 (pp versions) 154 SB
gr
/fm 256 def
2 40 277 2402 B
1 F
n
gs 247 47 834 2396 CB
856 2406 191 (DLL Versions) 191 SB
gr
32 0 0 33 33 0 0 0 31 /Times-Italic /font31 ANSIFont font
gs 313 47 1084 2396 CB
1106 2404 264 (wVersionRequested) 264 SB
gr
gs 171 47 1400 2396 CB
1422 2404 126 (wVersion) 126 SB
gr
gs 240 47 1574 2396 CB
1596 2404 193 (wHighVersion) 193 SB
gr
32 0 0 33 33 0 0 0 30 /Times-Roman /font32 ANSIFont font
gs 460 47 1820 2396 CB
1839 2406 147 (End Result) 147 SB
gr
/fm 256 def
5 5 602 2396 B
1 F
n
/fm 256 def
5 5 602 2396 B
1 F
n
/fm 256 def
222 5 608 2396 B
1 F
n
/fm 256 def
5 5 831 2396 B
1 F
n
/fm 256 def
243 5 837 2396 B
1 F
n
/fm 256 def
5 5 1081 2396 B
1 F
n
/fm 256 def
309 5 1087 2396 B
1 F
n
/fm 256 def
5 5 1397 2396 B
1 F
n
/fm 256 def
167 5 1403 2396 B
1 F
n
/fm 256 def
5 5 1571 2396 B
1 F
n
/fm 256 def
236 5 1577 2396 B
1 F
n
/fm 256 def
5 5 1814 2396 B
1 F
n
/fm 256 def
459 5 1820 2396 B
1 F
n
/fm 256 def
5 5 2280 2396 B
1 F
n
/fm 256 def
5 5 2280 2396 B
1 F
n
/fm 256 def
5 40 602 2402 B
1 F
n
/fm 256 def
2 40 831 2402 B
1 F
n
/fm 256 def
2 40 1081 2402 B
1 F
n
/fm 256 def
2 40 1397 2402 B
1 F
n
/fm 256 def
2 40 1571 2402 B
1 F
n
/fm 256 def
5 40 1814 2402 B
1 F
n
/fm 256 def
5 40 2280 2402 B
1 F
n
gs 223 50 608 2443 CB
628 2456 17 (1) 17 SB
gr
gs 223 50 608 2443 CB
645 2456 25 (.1) 25 SB
gr
/fm 256 def
2 40 277 2452 B
1 F
n
gs 247 50 834 2443 CB
856 2456 42 (1.1) 42 SB
gr
gs 313 50 1084 2443 CB
1106 2456 42 (1.1) 42 SB
gr
gs 171 50 1400 2443 CB
1422 2456 42 (1.1) 42 SB
gr
gs 240 50 1574 2443 CB
1596 2456 42 (1.1) 42 SB
gr
gs 460 50 1820 2443 CB
1839 2456 95 (use 1.1) 95 SB
gr
/fm 256 def
5 8 602 2443 B
1 F
n
/fm 256 def
222 2 608 2443 B
1 F
n
/fm 256 def
222 2 608 2449 B
1 F
n
/fm 256 def
8 2 831 2443 B
1 F
n
/fm 256 def
8 2 831 2449 B
1 F
n
/fm 256 def
240 2 840 2443 B
1 F
n
/fm 256 def
240 2 840 2449 B
1 F
n
/fm 256 def
8 2 1081 2443 B
1 F
n
/fm 256 def
8 2 1081 2449 B
1 F
n
/fm 256 def
306 2 1090 2443 B
1 F
n
/fm 256 def
306 2 1090 2449 B
1 F
n
/fm 256 def
8 2 1397 2443 B
1 F
n
/fm 256 def
8 2 1397 2449 B
1 F
n
/fm 256 def
164 2 1406 2443 B
1 F
n
/fm 256 def
164 2 1406 2449 B
1 F
n
/fm 256 def
8 2 1571 2443 B
1 F
n
/fm 256 def
8 2 1571 2449 B
1 F
n
/fm 256 def
233 2 1580 2443 B
1 F
n
/fm 256 def
233 2 1580 2449 B
1 F
n
/fm 256 def
8 2 1814 2443 B
1 F
n
/fm 256 def
8 2 1814 2449 B
1 F
n
/fm 256 def
456 2 1823 2443 B
1 F
n
/fm 256 def
456 2 1823 2449 B
1 F
n
/fm 256 def
5 8 2280 2443 B
1 F
n
/fm 256 def
5 40 602 2452 B
1 F
n
/fm 256 def
2 40 831 2452 B
1 F
n
/fm 256 def
2 40 1081 2452 B
1 F
n
/fm 256 def
2 40 1397 2452 B
1 F
n
/fm 256 def
2 40 1571 2452 B
1 F
n
/fm 256 def
5 40 1814 2452 B
1 F
n
/fm 256 def
5 40 2280 2452 B
1 F
n
gs 223 44 608 2493 CB
628 2500 17 (1) 17 SB
gr
gs 223 44 608 2493 CB
645 2500 75 (.0 1.1) 75 SB
gr
/fm 256 def
2 40 277 2496 B
1 F
n
gs 247 44 834 2493 CB
856 2500 42 (1.0) 42 SB
gr
gs 313 44 1084 2493 CB
1106 2500 42 (1.1) 42 SB
gr
gs 171 44 1400 2493 CB
1422 2500 42 (1.0) 42 SB
gr
gs 240 44 1574 2493 CB
1596 2500 42 (1.0) 42 SB
gr
gs 460 44 1820 2493 CB
1839 2500 95 (use 1.0) 95 SB
gr
/fm 256 def
5 2 602 2493 B
1 F
n
/fm 256 def
222 2 608 2493 B
1 F
n
/fm 256 def
2 2 831 2493 B
1 F
n
/fm 256 def
246 2 834 2493 B
1 F
n
/fm 256 def
2 2 1081 2493 B
1 F
n
/fm 256 def
312 2 1084 2493 B
1 F
n
/fm 256 def
2 2 1397 2493 B
1 F
n
/fm 256 def
170 2 1400 2493 B
1 F
n
/fm 256 def
2 2 1571 2493 B
1 F
n
/fm 256 def
239 2 1574 2493 B
1 F
n
/fm 256 def
5 2 1814 2493 B
1 F
n
/fm 256 def
459 2 1820 2493 B
1 F
n
/fm 256 def
5 2 2280 2493 B
1 F
n
/fm 256 def
5 40 602 2496 B
1 F
n
/fm 256 def
2 40 831 2496 B
1 F
n
/fm 256 def
2 40 1081 2496 B
1 F
n
/fm 256 def
2 40 1397 2496 B
1 F
n
/fm 256 def
2 40 1571 2496 B
1 F
n
/fm 256 def
5 40 1814 2496 B
1 F
n
/fm 256 def
5 40 2280 2496 B
1 F
n
gs 223 44 608 2537 CB
628 2544 17 (1) 17 SB
gr
gs 223 44 608 2537 CB
645 2544 25 (.0) 25 SB
gr
/fm 256 def
2 40 277 2540 B
1 F
n
gs 247 44 834 2537 CB
856 2544 92 (1.0 1.1) 92 SB
gr
gs 313 44 1084 2537 CB
1106 2544 42 (1.0) 42 SB
gr
gs 171 44 1400 2537 CB
1422 2544 42 (1.0) 42 SB
gr
gs 240 44 1574 2537 CB
1596 2544 42 (1.1) 42 SB
gr
gs 460 44 1820 2537 CB
1839 2544 95 (use 1.0) 95 SB
gr
/fm 256 def
5 2 602 2537 B
1 F
n
/fm 256 def
222 2 608 2537 B
1 F
n
/fm 256 def
2 2 831 2537 B
1 F
n
/fm 256 def
246 2 834 2537 B
1 F
n
/fm 256 def
2 2 1081 2537 B
1 F
n
/fm 256 def
312 2 1084 2537 B
1 F
n
/fm 256 def
2 2 1397 2537 B
1 F
n
/fm 256 def
170 2 1400 2537 B
1 F
n
/fm 256 def
2 2 1571 2537 B
1 F
n
/fm 256 def
239 2 1574 2537 B
1 F
n
/fm 256 def
5 2 1814 2537 B
1 F
n
/fm 256 def
459 2 1820 2537 B
1 F
n
/fm 256 def
5 2 2280 2537 B
1 F
n
/fm 256 def
5 40 602 2540 B
1 F
n
/fm 256 def
2 40 831 2540 B
1 F
n
/fm 256 def
2 40 1081 2540 B
1 F
n
/fm 256 def
2 40 1397 2540 B
1 F
n
/fm 256 def
2 40 1571 2540 B
1 F
n
/fm 256 def
5 40 1814 2540 B
1 F
n
/fm 256 def
5 40 2280 2540 B
1 F
n
gs 223 44 608 2581 CB
628 2588 17 (1) 17 SB
gr
gs 223 44 608 2581 CB
645 2588 25 (.1) 25 SB
gr
/fm 256 def
2 40 277 2584 B
1 F
n
gs 247 44 834 2581 CB
856 2588 92 (1.0 1.1) 92 SB
gr
gs 313 44 1084 2581 CB
1106 2588 42 (1.1) 42 SB
gr
gs 171 44 1400 2581 CB
1422 2588 42 (1.1) 42 SB
gr
gs 240 44 1574 2581 CB
1596 2588 42 (1.1) 42 SB
gr
gs 460 44 1820 2581 CB
1839 2588 95 (use 1.1) 95 SB
gr
/fm 256 def
5 2 602 2581 B
1 F
n
/fm 256 def
222 2 608 2581 B
1 F
n
/fm 256 def
2 2 831 2581 B
1 F
n
/fm 256 def
246 2 834 2581 B
1 F
n
/fm 256 def
2 2 1081 2581 B
1 F
n
/fm 256 def
312 2 1084 2581 B
1 F
n
/fm 256 def
2 2 1397 2581 B
1 F
n
/fm 256 def
170 2 1400 2581 B
1 F
n
/fm 256 def
2 2 1571 2581 B
1 F
n
/fm 256 def
239 2 1574 2581 B
1 F
n
/fm 256 def
5 2 1814 2581 B
1 F
n
/fm 256 def
459 2 1820 2581 B
1 F
n
/fm 256 def
5 2 2280 2581 B
1 F
n
/fm 256 def
5 40 602 2584 B
1 F
n
/fm 256 def
2 40 831 2584 B
1 F
n
/fm 256 def
2 40 1081 2584 B
1 F
n
/fm 256 def
2 40 1397 2584 B
1 F
n
/fm 256 def
2 40 1571 2584 B
1 F
n
/fm 256 def
5 40 1814 2584 B
1 F
n
/fm 256 def
5 40 2280 2584 B
1 F
n
gs 223 44 608 2625 CB
628 2632 17 (1) 17 SB
gr
gs 223 44 608 2625 CB
645 2632 25 (.1) 25 SB
gr
/fm 256 def
2 40 277 2628 B
1 F
n
gs 247 44 834 2625 CB
856 2632 42 (1.0) 42 SB
gr
gs 313 44 1084 2625 CB
1106 2632 42 (1.1) 42 SB
gr
gs 171 44 1400 2625 CB
1422 2632 42 (1.0) 42 SB
gr
gs 240 44 1574 2625 CB
1596 2632 42 (1.0) 42 SB
gr
gs 460 44 1820 2625 CB
1839 2632 223 (Application fails) 223 SB
gr
/fm 256 def
5 2 602 2625 B
1 F
n
/fm 256 def
222 2 608 2625 B
1 F
n
/fm 256 def
2 2 831 2625 B
1 F
n
/fm 256 def
246 2 834 2625 B
1 F
n
/fm 256 def
2 2 1081 2625 B
1 F
n
/fm 256 def
312 2 1084 2625 B
1 F
n
/fm 256 def
2 2 1397 2625 B
1 F
n
/fm 256 def
170 2 1400 2625 B
1 F
n
/fm 256 def
2 2 1571 2625 B
1 F
n
/fm 256 def
239 2 1574 2625 B
1 F
n
/fm 256 def
5 2 1814 2625 B
1 F
n
/fm 256 def
459 2 1820 2625 B
1 F
n
/fm 256 def
5 2 2280 2625 B
1 F
n
/fm 256 def
5 40 602 2628 B
1 F
n
/fm 256 def
2 40 831 2628 B
1 F
n
/fm 256 def
2 40 1081 2628 B
1 F
n
/fm 256 def
2 40 1397 2628 B
1 F
n
/fm 256 def
2 40 1571 2628 B
1 F
n
/fm 256 def
5 40 1814 2628 B
1 F
n
/fm 256 def
5 40 2280 2628 B
1 F
n
gs 223 44 608 2669 CB
628 2676 17 (1) 17 SB
gr
gs 223 44 608 2669 CB
645 2676 25 (.0) 25 SB
gr
/fm 256 def
2 40 277 2672 B
1 F
n
gs 247 44 834 2669 CB
856 2676 42 (1.1) 42 SB
gr
gs 313 44 1084 2669 CB
1106 2676 42 (1.0) 42 SB
gr
gs 171 44 1400 2669 CB
1422 2676 33 (---) 33 SB
gr
gs 240 44 1574 2669 CB
1596 2676 33 (---) 33 SB
gr
gs 460 44 1820 2669 CB
1839 2676 395 (WSAVERNOTSUPPORTED) 395 SB
gr
/fm 256 def
5 2 602 2669 B
1 F
n
/fm 256 def
222 2 608 2669 B
1 F
n
/fm 256 def
2 2 831 2669 B
1 F
n
/fm 256 def
246 2 834 2669 B
1 F
n
/fm 256 def
2 2 1081 2669 B
1 F
n
/fm 256 def
312 2 1084 2669 B
1 F
n
/fm 256 def
2 2 1397 2669 B
1 F
n
/fm 256 def
170 2 1400 2669 B
1 F
n
/fm 256 def
2 2 1571 2669 B
1 F
n
/fm 256 def
239 2 1574 2669 B
1 F
n
/fm 256 def
5 2 1814 2669 B
1 F
n
/fm 256 def
459 2 1820 2669 B
1 F
n
/fm 256 def
5 2 2280 2669 B
1 F
n
/fm 256 def
5 40 602 2672 B
1 F
n
/fm 256 def
2 40 831 2672 B
1 F
n
/fm 256 def
2 40 1081 2672 B
1 F
n
/fm 256 def
2 40 1397 2672 B
1 F
n
/fm 256 def
2 40 1571 2672 B
1 F
n
/fm 256 def
5 40 1814 2672 B
1 F
n
/fm 256 def
5 40 2280 2672 B
1 F
n
gs 223 44 608 2713 CB
628 2720 17 (1) 17 SB
gr
gs 223 44 608 2713 CB
645 2720 75 (.0 1.1) 75 SB
gr
/fm 256 def
2 40 277 2716 B
1 F
n
gs 247 44 834 2713 CB
856 2720 92 (1.0 1.1) 92 SB
gr
gs 313 44 1084 2713 CB
1106 2720 42 (1.1) 42 SB
gr
gs 171 44 1400 2713 CB
1422 2720 42 (1.1) 42 SB
gr
gs 240 44 1574 2713 CB
1596 2720 42 (1.1) 42 SB
gr
gs 460 44 1820 2713 CB
1839 2720 95 (use 1.1) 95 SB
gr
/fm 256 def
5 2 602 2713 B
1 F
n
/fm 256 def
222 2 608 2713 B
1 F
n
/fm 256 def
2 2 831 2713 B
1 F
n
/fm 256 def
246 2 834 2713 B
1 F
n
/fm 256 def
2 2 1081 2713 B
1 F
n
/fm 256 def
312 2 1084 2713 B
1 F
n
/fm 256 def
2 2 1397 2713 B
1 F
n
/fm 256 def
170 2 1400 2713 B
1 F
n
/fm 256 def
2 2 1571 2713 B
1 F
n
/fm 256 def
239 2 1574 2713 B
1 F
n
/fm 256 def
5 2 1814 2713 B
1 F
n
/fm 256 def
459 2 1820 2713 B
1 F
n
/fm 256 def
5 2 2280 2713 B
1 F
n
/fm 256 def
5 40 602 2716 B
1 F
n
/fm 256 def
2 40 831 2716 B
1 F
n
/fm 256 def
2 40 1081 2716 B
1 F
n
/fm 256 def
2 40 1397 2716 B
1 F
n
/fm 256 def
2 40 1571 2716 B
1 F
n
/fm 256 def
5 40 1814 2716 B
1 F
n
/fm 256 def
5 40 2280 2716 B
1 F
n
gs 223 44 608 2757 CB
628 2764 17 (1) 17 SB
gr
gs 223 44 608 2757 CB
645 2764 75 (.1 2.0) 75 SB
gr
/fm 256 def
2 40 277 2760 B
1 F
n
gs 247 44 834 2757 CB
856 2764 42 (1.1) 42 SB
gr
gs 313 44 1084 2757 CB
1106 2764 42 (2.0) 42 SB
gr
gs 171 44 1400 2757 CB
1422 2764 42 (1.1) 42 SB
gr
gs 240 44 1574 2757 CB
1596 2764 42 (1.1) 42 SB
gr
gs 460 44 1820 2757 CB
1839 2764 95 (use 1.1) 95 SB
gr
/fm 256 def
5 2 602 2757 B
1 F
n
/fm 256 def
222 2 608 2757 B
1 F
n
/fm 256 def
2 2 831 2757 B
1 F
n
/fm 256 def
246 2 834 2757 B
1 F
n
/fm 256 def
2 2 1081 2757 B
1 F
n
/fm 256 def
312 2 1084 2757 B
1 F
n
/fm 256 def
2 2 1397 2757 B
1 F
n
/fm 256 def
170 2 1400 2757 B
1 F
n
/fm 256 def
2 2 1571 2757 B
1 F
n
/fm 256 def
239 2 1574 2757 B
1 F
n
/fm 256 def
5 2 1814 2757 B
1 F
n
/fm 256 def
459 2 1820 2757 B
1 F
n
/fm 256 def
5 2 2280 2757 B
1 F
n
/fm 256 def
5 40 602 2760 B
1 F
n
/fm 256 def
2 40 831 2760 B
1 F
n
/fm 256 def
2 40 1081 2760 B
1 F
n
/fm 256 def
2 40 1397 2760 B
1 F
n
/fm 256 def
2 40 1571 2760 B
1 F
n
/fm 256 def
5 40 1814 2760 B
1 F
n
/fm 256 def
5 40 2280 2760 B
1 F
n
gs 223 44 608 2801 CB
628 2808 17 (2) 17 SB
gr
gs 223 44 608 2801 CB
645 2808 25 (.0) 25 SB
gr
/fm 256 def
2 40 277 2804 B
1 F
n
gs 247 44 834 2801 CB
856 2808 42 (1.1) 42 SB
gr
gs 313 44 1084 2801 CB
1106 2808 42 (2.0) 42 SB
gr
gs 171 44 1400 2801 CB
1422 2808 42 (1.1) 42 SB
gr
gs 240 44 1574 2801 CB
1596 2808 42 (1.1) 42 SB
gr
gs 460 44 1820 2801 CB
1839 2808 223 (Application fails) 223 SB
gr
/fm 256 def
5 2 602 2801 B
1 F
n
/fm 256 def
222 2 608 2801 B
1 F
n
/fm 256 def
2 2 831 2801 B
1 F
n
/fm 256 def
246 2 834 2801 B
1 F
n
/fm 256 def
2 2 1081 2801 B
1 F
n
/fm 256 def
312 2 1084 2801 B
1 F
n
/fm 256 def
2 2 1397 2801 B
1 F
n
/fm 256 def
170 2 1400 2801 B
1 F
n
/fm 256 def
2 2 1571 2801 B
1 F
n
/fm 256 def
239 2 1574 2801 B
1 F
n
/fm 256 def
5 2 1814 2801 B
1 F
n
/fm 256 def
459 2 1820 2801 B
1 F
n
/fm 256 def
5 2 2280 2801 B
1 F
n
/fm 256 def
5 40 602 2804 B
1 F
n
/fm 256 def
5 5 602 2845 B
1 F
n
/fm 256 def
5 5 602 2845 B
1 F
n
/fm 256 def
222 5 608 2845 B
1 F
n
/fm 256 def
2 40 831 2804 B
1 F
n
/fm 256 def
5 5 831 2845 B
1 F
n
/fm 256 def
243 5 837 2845 B
1 F
n
/fm 256 def
2 40 1081 2804 B
1 F
n
/fm 256 def
5 5 1081 2845 B
1 F
n
/fm 256 def
309 5 1087 2845 B
1 F
n
/fm 256 def
2 40 1397 2804 B
1 F
n
/fm 256 def
5 5 1397 2845 B
1 F
n
/fm 256 def
167 5 1403 2845 B
1 F
n
/fm 256 def
2 40 1571 2804 B
1 F
n
/fm 256 def
5 5 1571 2845 B
1 F
n
/fm 256 def
236 5 1577 2845 B
1 F
n
/fm 256 def
5 40 1814 2804 B
1 F
n
/fm 256 def
5 5 1814 2845 B
1 F
n
/fm 256 def
459 5 1820 2845 B
1 F
n
/fm 256 def
5 40 2280 2804 B
1 F
n
/fm 256 def
5 5 2280 2845 B
1 F
n
/fm 256 def
5 5 2280 2845 B
1 F
n
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 113 113
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1725 117 306 (WSAStartup ) 306 SB
2031 117 84 (106) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 270 1417 (The following code fragment demonstrates how an application which supports only) 1417 SB
/fm 256 def
2 49 277 267 B
1 F
n
615 320 708 (version 1.1 of Windows Sockets makes a ) 708 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1323 317 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1583 320 85 ( call:) 85 SB
/fm 256 def
2 50 277 317 B
1 F
n
/fm 256 def
2 49 277 368 B
1 F
n
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 418 575 (WORD wVersionRequested;) 575 SB
/fm 256 def
2 44 277 418 B
1 F
n
615 463 400 (WSADATA wsaData;) 400 SB
/fm 256 def
2 44 277 463 B
1 F
n
615 508 200 (int err;) 200 SB
/fm 256 def
2 44 277 508 B
1 F
n
/fm 256 def
2 44 277 553 B
1 F
n
615 598 925 (wVersionRequested = MAKEWORD\( 1, 1 \);) 925 SB
/fm 256 def
2 44 277 598 B
1 F
n
/fm 256 def
2 44 277 643 B
1 F
n
615 688 1200 (err = WSAStartup\( wVersionRequested, &wsaData \);) 1200 SB
/fm 256 def
2 44 277 688 B
1 F
n
615 733 425 (if \( err != 0 \) {) 425 SB
/fm 256 def
2 44 277 733 B
1 F
n
615 778 1375 (    /* Tell the user that we couldn't find a useable */) 1375 SB
/fm 256 def
2 44 277 778 B
1 F
n
615 823 1375 (    /* winsock.dll.                                  */) 1375 SB
/fm 256 def
2 44 277 823 B
1 F
n
615 868 275 (    return;) 275 SB
/fm 256 def
2 44 277 868 B
1 F
n
615 913 25 (}) 25 SB
/fm 256 def
2 44 277 913 B
1 F
n
/fm 256 def
2 44 277 958 B
1 F
n
615 1003 1375 (/* Confirm that the Windows Sockets DLL supports 1.1.*/) 1375 SB
/fm 256 def
2 44 277 1003 B
1 F
n
615 1048 1375 (/* Note that if the DLL supports versions greater    */) 1375 SB
/fm 256 def
2 44 277 1048 B
1 F
n
615 1093 1375 (/* than 1.1 in addition to 1.1, it will still return */) 1375 SB
/fm 256 def
2 44 277 1093 B
1 F
n
615 1138 1375 (/* 1.1 in wVersion since that is the version we      */) 1375 SB
/fm 256 def
2 44 277 1138 B
1 F
n
615 1183 1375 (/* requested.                                        */) 1375 SB
/fm 256 def
2 44 277 1183 B
1 F
n
/fm 256 def
2 44 277 1228 B
1 F
n
615 1273 975 (if \( LOBYTE\( wsaData.wVersion \) != 1 ||) 975 SB
/fm 256 def
2 44 277 1273 B
1 F
n
615 1318 1100 (         HIBYTE\( wsaData.wVersion \) != 1 \) {) 1100 SB
/fm 256 def
2 44 277 1318 B
1 F
n
615 1363 1375 (    /* Tell the user that we couldn't find a useable */) 1375 SB
/fm 256 def
2 44 277 1363 B
1 F
n
615 1408 1375 (    /* winsock.dll.                                  */) 1375 SB
/fm 256 def
2 44 277 1408 B
1 F
n
615 1453 450 (    WSACleanup\( \);) 450 SB
/fm 256 def
2 44 277 1453 B
1 F
n
615 1498 275 (    return;) 275 SB
/fm 256 def
2 44 277 1498 B
1 F
n
615 1543 25 (}) 25 SB
/fm 256 def
2 44 277 1543 B
1 F
n
/fm 256 def
2 44 277 1588 B
1 F
n
615 1633 1375 (/* The Windows Sockets DLL is acceptable.  Proceed.  */) 1375 SB
/fm 256 def
2 44 277 1633 B
1 F
n
/fm 256 def
2 44 277 1678 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1726 1420 (And this code fragment demonstrates how a Windows Sockets DLL which supports) 1420 SB
/fm 256 def
2 49 277 1723 B
1 F
n
615 1776 511 (only version 1.1 performs the ) 511 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1126 1773 271 (WSAStartup\(\) ) 271 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1397 1776 203 (negotiation:) 203 SB
/fm 256 def
2 50 277 1773 B
1 F
n
/fm 256 def
2 49 277 1824 B
1 F
n
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 1874 1375 (/* Make sure that the version requested is >= 1.1.   */) 1375 SB
/fm 256 def
2 44 277 1874 B
1 F
n
615 1919 1375 (/* The low byte is the major version and the high    */) 1375 SB
/fm 256 def
2 44 277 1919 B
1 F
n
615 1964 1375 (/* byte is the minor version.                        */) 1375 SB
/fm 256 def
2 44 277 1964 B
1 F
n
/fm 256 def
2 44 277 2009 B
1 F
n
615 2054 975 (if \( LOBYTE\( wVersionRequested \) < 1 ||) 975 SB
/fm 256 def
2 44 277 2054 B
1 F
n
615 2099 1050 (     \( LOBYTE\( wVersionRequested \) == 1 &&) 1050 SB
/fm 256 def
2 44 277 2099 B
1 F
n
615 2144 1050 (       HIBYTE\( wVersionRequested \) < 1 \) {) 1050 SB
/fm 256 def
2 44 277 2144 B
1 F
n
615 2189 750 (    return WSAVERNOTSUPPORTED;) 750 SB
/fm 256 def
2 44 277 2189 B
1 F
n
615 2234 25 (}) 25 SB
/fm 256 def
2 44 277 2234 B
1 F
n
/fm 256 def
2 44 277 2279 B
1 F
n
615 2324 1375 (/* Since we only support 1.1, set both wVersion and  */) 1375 SB
/fm 256 def
2 44 277 2324 B
1 F
n
615 2369 1375 (/* wHighVersion to 1.1.                              */) 1375 SB
/fm 256 def
2 44 277 2369 B
1 F
n
/fm 256 def
2 44 277 2414 B
1 F
n
615 2459 975 (lpWsaData->wVersion = MAKEWORD\( 1, 1 \);) 975 SB
/fm 256 def
2 44 277 2459 B
1 F
n
615 2504 1075 (lpWsaData->wHighVersion = MAKEWORD\( 1, 1 \);) 1075 SB
/fm 256 def
2 44 277 2504 B
1 F
n
/fm 256 def
2 49 277 2549 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2602 351 (Once an application ) 351 SB
966 2602 139 (or DLL ) 139 SB
1105 2602 384 (has made a successful ) 384 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1489 2599 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1749 2602 348 ( call, it may proceed) 348 SB
/fm 256 def
2 50 277 2599 B
1 F
n
615 2653 1440 (to make other Windows Sockets API calls as needed.  When it has finished using the) 1440 SB
615 2703 937 (services of the Windows Sockets DLL, the application ) 937 SB
1552 2703 221 (or DLL must) 221 SB
1773 2703 73 ( call) 73 SB
/fm 256 def
2 49 277 2700 B
1 F
n
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2750 274 (WSACleanup\(\)) 274 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
889 2753 1186 ( in order to allow the Windows Sockets DLL to free any resources for) 1186 SB
/fm 256 def
2 50 277 2750 B
1 F
n
615 2804 263 (the application.) 263 SB
/fm 256 def
2 49 277 2801 B
1 F
n
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 114 114
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1725 117 306 (WSAStartup ) 306 SB
2031 117 84 (107) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 270 1461 (Details of the actual Windows Sockets implementation are described in the WSAData) 1461 SB
615 320 481 (structure defined as follows:) 481 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 417 400 (struct WSAData {) 400 SB
765 462 100 (WORD) 100 SB
1215 462 225 (wVersion;) 225 SB
765 507 100 (WORD) 100 SB
1215 507 325 (wHighVersion;) 325 SB
765 552 125 (char ) 125 SB
1215 552 900 (szDescription[WSADESCRIPTION_LEN+1];) 900 SB
765 597 100 (char) 100 SB
1215 597 875 (szSystemStatus[WSASYSSTATUS_LEN+1];) 875 SB
765 642 350 (unsigned short) 350 SB
1215 642 300 (iMaxSockets;) 300 SB
/fm 256 def
2 44 277 642 B
1 F
n
765 687 350 (unsigned short) 350 SB
1215 687 250 (iMaxUdpDg;) 250 SB
/fm 256 def
2 44 277 687 B
1 F
n
765 732 250 (char FAR *) 250 SB
1215 732 300 (lpVendorInfo) 300 SB
1515 732 25 (;) 25 SB
/fm 256 def
2 44 277 732 B
1 F
n
615 777 50 (};) 50 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 875 584 (The members of this structure are:) 584 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
615 925 142 (Element) 142 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
757 925 165 (               ) 165 SB
915 925 105 (Usage) 105 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 975 163 (wVersion) 163 SB
915 975 927 (The version of the Windows Sockets specification that) 927 SB
1842 975 235 ( the Windows) 235 SB
/fm 256 def
2 49 277 972 B
1 F
n
915 1025 653 (Sockets DLL expects the caller to use.) 653 SB
/fm 256 def
2 49 277 1022 B
1 F
n
615 1075 247 (wHighVersion) 247 SB
915 1075 1132 (The highest version of the Windows Sockets specification that this) 1132 SB
915 1125 1164 (DLL can support \(also encoded as above\).  Normally this will be the) 1164 SB
915 1175 144 (same as ) 144 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1059 1174 159 (wVersion) 159 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1218 1175 11 (.) 11 SB
615 1227 232 (szDescription) 232 SB
915 1227 1191 (A null-terminated ASCII string into which the Windows Sockets DLL) 1191 SB
915 1277 1049 (copies a description of the Windows Sockets implementation,) 1049 SB
915 1327 1112 (including vendor identification.  The text \(up to 256 characters in) 1112 SB
915 1377 1185 (length\) may contain any characters, but vendors are cautioned against) 1185 SB
915 1427 1154 (including control and formatting characters: the most likely use that) 1154 SB
915 1477 1171 (an application will put this to is to display it \(possibly truncated\) in a) 1171 SB
915 1527 261 (status message.) 261 SB
615 1577 262 (szSystemStatus) 262 SB
915 1577 1191 (A null-terminated ASCII string into which the Windows Sockets DLL) 1191 SB
915 1627 1130 (copies relevant status or configuration information.  The Windows) 1130 SB
915 1677 1133 (Sockets DLL should use this field only if the information might be) 1133 SB
915 1727 1148 (useful to the user or  support staff: it should not be considered as an) 1148 SB
915 1777 282 (extension of the ) 282 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1197 1776 231 (szDescription) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1428 1777 100 ( field.) 100 SB
615 1829 220 (iMaxSockets) 220 SB
915 1829 1033 (The maximum number of sockets which a single process can) 1033 SB
915 1879 1184 (potentially open.  A Windows Sockets implementation may provide a) 1184 SB
915 1929 1136 (global pool of sockets for allocation to any process; alternatively it) 1136 SB
915 1979 1194 (may allocate per-process resources for sockets.  The number may well) 1194 SB
915 2029 1193 (reflect the way in which the Windows Sockets DLL or the networking) 1193 SB
915 2079 1185 (software was configured.  Application writers may use this number as) 1185 SB
915 2129 1192 (a crude indication of whether the Windows Sockets implementation is) 1192 SB
915 2179 1169 (usable by the application.  For example, an X Windows server might) 1169 SB
915 2229 110 (check ) 110 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1025 2228 214 (iMaxSockets) 214 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1239 2229 692 ( when first started: if it is less than 8, the) 692 SB
915 2281 1116 (application would display an error message instructing the user to) 1116 SB
915 2331 1186 (reconfigure the networking software.  \(This is a situation in which the) 1186 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
915 2380 252 (szSystemStatus) 252 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1167 2381 910 ( text might be used.\)  Obviously there is no guarantee) 910 SB
915 2433 839 (that a particular application can actually allocate ) 839 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1754 2432 214 (iMaxSockets) 214 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1968 2433 146 ( sockets,) 146 SB
915 2485 1068 (since there may be other Windows Sockets applications in use.) 1068 SB
615 2535 212 (iMaxUdpDg) 212 SB
915 2535 1104 (The size in bytes of the largest UDP datagram that can be sent or) 1104 SB
915 2585 1143 (received by a Windows Sockets application.  If the implementation) 1143 SB
915 2635 305 (imposes no limit, ) 305 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1220 2634 210 (iMaxUdpDg) 210 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1430 2635 636 ( is zero.  In many implementations of) 636 SB
915 2687 1109 (Berkeley sockets, there is an implicit limit of 8192 bytes on UDP) 1109 SB
915 2737 1172 (datagrams \(which are fragmented if necessary\).  A Windows Sockets) 1172 SB
915 2787 1061 (implementation may impose a limit based, for instance, on the) 1061 SB
915 2837 1133 (allocation of fragment reassembly buffers.  The minimum value of) 1133 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
915 2886 210 (iMaxUdpDg) 210 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1125 2887 987 ( for a compliant Windows Sockets implementation is 512.) 987 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 115 115
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1725 117 306 (WSAStartup ) 306 SB
2031 117 84 (108) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
915 270 608 (Note that regardless of the value of ) 608 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1523 269 210 (iMaxUdpDg) 210 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1733 270 333 (, it is inadvisable to) 333 SB
915 322 301 (attempt to send a ) 301 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
1216 322 162 (broadcast) 162 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1378 322 579 ( datagram which is larger than the) 579 SB
915 372 1189 (Maximum Transmission Unit \(MTU\) for the network.  \(The Windows) 1189 SB
915 422 1177 (Sockets API does not provide a mechanism to discover the MTU, but) 1177 SB
915 472 578 (it must be no less than 512 bytes.\)) 578 SB
615 522 229 (lpVendorInfo) 229 SB
915 522 1129 (A far pointer to a vendor-specific data structure.  The definition of) 1129 SB
915 572 1140 (this structure \(if supplied\) is beyond the scope of this specification.) 1140 SB
615 672 262 (An application ) 262 SB
877 672 139 (or DLL ) 139 SB
1016 672 157 (may call ) 157 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1173 669 271 (WSAStartup\(\) ) 271 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1444 672 665 (more than once if it needs to obtain the) 665 SB
/fm 256 def
2 50 277 669 B
1 F
n
615 723 1088 (WSAData structure information more than once.  However, the ) 1088 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1703 722 314 (wVersionRequired) 314 SB
/fm 256 def
2 51 277 720 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 775 872 (parameter is assumed to be the same on all calls to ) 872 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1487 772 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1747 775 188 (; that is, an) 188 SB
/fm 256 def
2 50 277 772 B
1 F
n
615 826 200 (application ) 200 SB
815 826 139 (or DLL ) 139 SB
954 826 1127 (cannot change the version of Windows Sockets it expects after the) 1127 SB
/fm 256 def
2 49 277 823 B
1 F
n
615 876 228 (initial call to ) 228 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
843 873 271 (WSAStartup\(\).) 271 SB
/fm 256 def
2 50 277 873 B
1 F
n
/fm 256 def
2 50 277 924 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 978 326 (There must be one ) 326 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
941 975 285 (WSACleanup\(\) ) 285 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1226 978 474 (call corresponding to every ) 474 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1700 975 271 (WSAStartup\(\) ) 271 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1971 978 106 (call to) 106 SB
/fm 256 def
2 50 277 975 B
1 F
n
615 1029 1359 (allow third-party DLLs to make use of a Windows Sockets DLL on behalf of an) 1359 SB
/fm 256 def
2 49 277 1026 B
1 F
n
615 1079 1116 (application.  This means, for example, that if an application calls ) 1116 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1731 1076 271 (WSAStartup\(\) ) 271 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2002 1079 85 (three) 85 SB
/fm 256 def
2 50 277 1076 B
1 F
n
615 1130 315 (times, it must call ) 315 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
930 1127 285 (WSACleanup\(\) ) 285 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1215 1130 584 (three times.  The first two calls to ) 584 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1799 1127 274 (WSACleanup\(\)) 274 SB
/fm 256 def
2 50 277 1127 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1181 997 (do nothing except decrement an internal counter; the final ) 997 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1612 1178 285 (WSACleanup\(\) ) 285 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1897 1181 19 (c) 19 SB
1916 1181 166 (all for the) 166 SB
/fm 256 def
2 50 277 1178 B
1 F
n
615 1232 79 (task ) 79 SB
694 1232 892 (does all necessary resource deallocation for the task.) 892 SB
/fm 256 def
2 49 277 1229 B
1 F
n
/fm 256 def
2 49 277 1279 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1381 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1379 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
875 1382 1183 ( returns zero if successful.  Otherwise it returns one of the error codes) 1183 SB
615 1433 1302 (listed below.  Note that the normal mechanism whereby the application calls) 1302 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1480 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
989 1483 1079 ( to determine the error code cannot be used, since the Windows) 1079 SB
615 1534 1370 (Sockets DLL may not have established the client data area where the "last error") 1370 SB
615 1584 364 (information is stored.) 364 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1682 196 (Notes For) 196 SB
315 1732 358 (Windows Sockets) 358 SB
315 1783 192 (Suppliers) 192 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1784 870 (Each Windows Sockets application MUST make a ) 870 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1485 1781 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1745 1784 322 ( call before issuing) 322 SB
615 1835 1301 (any other Windows Sockets API calls.  This function can thus be utilized for) 1301 SB
615 1885 387 (initialization purposes.) 387 SB
615 1985 748 (Further issues are discussed in the notes for ) 748 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1363 1982 274 (WSACleanup\(\)) 274 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1637 1985 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2085 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 2086 399 (WSASYSNOTREADY) 399 SB
1215 2086 859 (Indicates that the underlying network subsystem is) 859 SB
1215 2137 654 (not ready for network communication.) 654 SB
615 2237 502 (WSAVERNOTSUPPORTED) 502 SB
1215 2287 776 (The version of Windows Sockets API support) 776 SB
1215 2337 898 (requested is not provided by this particular Windows) 898 SB
1215 2387 420 (Sockets implementation.) 420 SB
615 2487 249 (WSAEINVAL) 249 SB
1215 2487 795 (The Windows Sockets version specified by the) 795 SB
1215 2537 699 (application is not supported by this DLL.) 699 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 2636 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 2634 109 (send\(\)) 109 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
724 2637 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
746 2634 144 (sendto\(\)) 144 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
890 2637 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
912 2634 274 (WSACleanup\(\)) 274 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 116 116
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1374 117 657 (WSAUnhookBlockingHook ) 657 SB
2031 117 84 (109) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 267 831 (4.3.16 WSAUnhookBlockingHook\(\)) 831 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 327 231 (Description) 231 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 328 738 (Restore the default blocking hook function.) 738 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 428 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 426 389 (#include <winsock.h>) 389 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 529 12 ( ) 12 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 527 60 (int ) 60 SB
675 527 275 (PASCAL FAR ) 275 SB
950 527 645 (WSAUnhookBlockingHook \( void \);) 645 SB
/fm 256 def
2 50 277 527 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 630 175 (Remarks) 175 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 631 1487 (This function removes any previous blocking hook that has been installed and reinstalls) 1487 SB
615 682 555 (the default blocking mechanism.) 555 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 779 521 (WSAUnhookBlockingHook\(\)) 521 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1136 782 394 ( will always install the ) 394 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
1530 782 118 (default) 118 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1648 782 343 ( mechanism, not the) 343 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
615 833 145 (previous) 145 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
760 833 1321 ( mechanism.  If an application wish to nest blocking hooks - i.e. to establish a) 1321 SB
615 883 1474 (temporary blocking hook function and then revert to the previous mechanism \(whether) 1474 SB
615 933 733 (the default or one established by an earlier ) 733 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1348 930 436 (WSASetBlockingHook\(\)) 436 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1784 933 325 (\) - it must save and) 325 SB
615 984 497 (restore the value returned by ) 497 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1112 981 436 (WSASetBlockingHook\(\)) 436 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1548 984 238 (; it cannot use) 238 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1032 521 (WSAUnhookBlockingHook\(\)) 521 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1136 1035 11 (.) 11 SB
615 1136 1352 (In multithreaded versions of Windows such as Windows NT, there is no default) 1352 SB
/fm 256 def
2 49 277 1133 B
1 F
n
615 1186 412 (blocking hook.  Calling ) 412 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1027 1183 532 (WSAUnhookBlockingHook\(\) ) 532 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1559 1186 462 (disables any blocking hook) 462 SB
/fm 256 def
2 50 277 1183 B
1 F
n
615 1237 1457 (installed by the application and any blocking calls made block the thread which made) 1457 SB
/fm 256 def
2 49 277 1234 B
1 F
n
615 1287 136 (the call.) 136 SB
/fm 256 def
2 49 277 1284 B
1 F
n
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1386 259 (Return Value) 259 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1387 1255 (The return value is 0 if the operation was successful.  Otherwise the value) 1255 SB
615 1438 1481 (SOCKET_ERROR is returned, and a specific error number may be retrieved by calling) 1481 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1485 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
989 1488 11 (.) 11 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1588 242 (Error Codes) 242 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 1589 426 (WSANOTINITIALISED) 426 SB
1215 1589 225 (A successful ) 225 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1440 1586 260 (WSAStartup\(\)) 260 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1700 1589 317 ( must occur before) 317 SB
1215 1640 252 (using this API.) 252 SB
32 0 0 42 42 0 0 0 39 /Helvetica-Bold /font13 ANSIFont font
315 1739 177 (See Also) 177 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
615 1737 436 (WSASetBlockingHook\(\)) 436 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 117 117
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1389 117 642 (Appendix A1: Error Codes ) 642 SB
2031 117 84 (110) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 50 50 1 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 317 1028 (Appendix A.  Error Codes and Header Files) 1028 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 400 381 (A.1 Error Codes) 381 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 461 1047 (The following is a list of possible error codes returned by the ) 1047 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1362 458 374 (WSAGetLastError\(\)) 374 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1736 461 364 ( call, along with their) 364 SB
315 512 1564 (explanations.  The error numbers are consistently set across all Windows Sockets-compliant) 1564 SB
315 562 294 (implementations.) 294 SB
32 0 0 33 33 0 0 0 27 /Courier /font0 ANSIFont font
gs 446 42 295 659 CB
315 665 400 (Windows Sockets code) 400 SB
gr
gs 447 42 744 659 CB
765 665 380 (Berkeley equivalent) 380 SB
gr
gs 147 42 1194 659 CB
1215 665 100 (Error) 100 SB
gr
gs 746 42 1344 659 CB
1365 665 280 (Interpretation) 280 SB
gr
/fm 256 def
5 5 289 659 B
1 F
n
/fm 256 def
5 5 289 659 B
1 F
n
/fm 256 def
445 5 295 659 B
1 F
n
/fm 256 def
5 5 741 659 B
1 F
n
/fm 256 def
443 5 747 659 B
1 F
n
/fm 256 def
5 5 1191 659 B
1 F
n
/fm 256 def
143 5 1197 659 B
1 F
n
/fm 256 def
5 5 1341 659 B
1 F
n
/fm 256 def
742 5 1347 659 B
1 F
n
/fm 256 def
5 5 2090 659 B
1 F
n
/fm 256 def
5 5 2090 659 B
1 F
n
/fm 256 def
5 35 289 665 B
1 F
n
/fm 256 def
2 35 741 665 B
1 F
n
/fm 256 def
2 35 1191 665 B
1 F
n
/fm 256 def
2 35 1341 665 B
1 F
n
/fm 256 def
5 35 2090 665 B
1 F
n
gs 446 45 295 701 CB
315 710 160 (WSAEINTR) 160 SB
gr
gs 447 45 744 701 CB
765 710 100 (EINTR) 100 SB
gr
gs 147 45 1194 701 CB
1215 710 100 (10004) 100 SB
gr
gs 746 45 1344 701 CB
1365 710 320 (As in standard C) 320 SB
gr
/fm 256 def
5 8 289 701 B
1 F
n
/fm 256 def
445 2 295 701 B
1 F
n
/fm 256 def
445 2 295 707 B
1 F
n
/fm 256 def
8 2 741 701 B
1 F
n
/fm 256 def
8 2 741 707 B
1 F
n
/fm 256 def
440 2 750 701 B
1 F
n
/fm 256 def
440 2 750 707 B
1 F
n
/fm 256 def
8 2 1191 701 B
1 F
n
/fm 256 def
8 2 1191 707 B
1 F
n
/fm 256 def
140 2 1200 701 B
1 F
n
/fm 256 def
140 2 1200 707 B
1 F
n
/fm 256 def
8 2 1341 701 B
1 F
n
/fm 256 def
8 2 1341 707 B
1 F
n
/fm 256 def
739 2 1350 701 B
1 F
n
/fm 256 def
739 2 1350 707 B
1 F
n
/fm 256 def
5 8 2090 701 B
1 F
n
/fm 256 def
5 35 289 710 B
1 F
n
/fm 256 def
2 35 741 710 B
1 F
n
/fm 256 def
2 35 1191 710 B
1 F
n
/fm 256 def
2 35 1341 710 B
1 F
n
/fm 256 def
5 35 2090 710 B
1 F
n
gs 446 36 295 746 CB
315 746 160 (WSAEBADF) 160 SB
gr
gs 447 36 744 746 CB
765 746 100 (EBADF) 100 SB
gr
gs 147 36 1194 746 CB
1215 746 100 (10009) 100 SB
gr
gs 746 36 1344 746 CB
1365 746 320 (As in standard C) 320 SB
gr
/fm 256 def
5 35 289 746 B
1 F
n
/fm 256 def
2 35 741 746 B
1 F
n
/fm 256 def
2 35 1191 746 B
1 F
n
/fm 256 def
2 35 1341 746 B
1 F
n
/fm 256 def
5 35 2090 746 B
1 F
n
gs 446 36 295 782 CB
315 782 180 (WSAEACCES) 180 SB
gr
/fm 256 def
2 35 277 782 B
1 F
n
gs 447 36 744 782 CB
765 782 120 (EACCES) 120 SB
gr
/fm 256 def
2 35 277 782 B
1 F
n
gs 147 36 1194 782 CB
1215 782 100 (10013) 100 SB
gr
/fm 256 def
2 35 277 782 B
1 F
n
gs 746 36 1344 782 CB
1365 782 320 (As in standard C) 320 SB
gr
/fm 256 def
2 35 277 782 B
1 F
n
/fm 256 def
5 35 289 782 B
1 F
n
/fm 256 def
2 35 741 782 B
1 F
n
/fm 256 def
2 35 1191 782 B
1 F
n
/fm 256 def
2 35 1341 782 B
1 F
n
/fm 256 def
5 35 2090 782 B
1 F
n
gs 446 36 295 818 CB
315 818 180 (WSAEFAULT) 180 SB
gr
/fm 256 def
2 35 277 818 B
1 F
n
gs 447 36 744 818 CB
765 818 120 (EFAULT) 120 SB
gr
/fm 256 def
2 35 277 818 B
1 F
n
gs 147 36 1194 818 CB
1215 818 100 (10014) 100 SB
gr
/fm 256 def
2 35 277 818 B
1 F
n
gs 746 36 1344 818 CB
1365 818 320 (As in standard C) 320 SB
gr
/fm 256 def
2 35 277 818 B
1 F
n
/fm 256 def
5 35 289 818 B
1 F
n
/fm 256 def
2 35 741 818 B
1 F
n
/fm 256 def
2 35 1191 818 B
1 F
n
/fm 256 def
2 35 1341 818 B
1 F
n
/fm 256 def
5 35 2090 818 B
1 F
n
gs 446 36 295 854 CB
315 854 180 (WSAEINVAL) 180 SB
gr
gs 447 36 744 854 CB
765 854 120 (EINVAL) 120 SB
gr
gs 147 36 1194 854 CB
1215 854 100 (10022) 100 SB
gr
gs 746 36 1344 854 CB
1365 854 320 (As in standard C) 320 SB
gr
/fm 256 def
5 35 289 854 B
1 F
n
/fm 256 def
2 35 741 854 B
1 F
n
/fm 256 def
2 35 1191 854 B
1 F
n
/fm 256 def
2 35 1341 854 B
1 F
n
/fm 256 def
5 35 2090 854 B
1 F
n
gs 446 36 295 890 CB
315 890 180 (WSAEMFILE) 180 SB
gr
gs 447 36 744 890 CB
765 890 120 (EMFILE) 120 SB
gr
gs 147 36 1194 890 CB
1215 890 100 (10024) 100 SB
gr
gs 746 36 1344 890 CB
1365 890 320 (As in standard C) 320 SB
gr
/fm 256 def
5 35 289 890 B
1 F
n
/fm 256 def
2 35 741 890 B
1 F
n
/fm 256 def
2 35 1191 890 B
1 F
n
/fm 256 def
2 35 1341 890 B
1 F
n
/fm 256 def
5 35 2090 890 B
1 F
n
gs 446 39 295 926 CB
315 929 280 (WSAEWOULDBLOCK) 280 SB
gr
gs 447 39 744 926 CB
765 929 220 (EWOULDBLOCK) 220 SB
gr
gs 147 39 1194 926 CB
1215 929 100 (10035) 100 SB
gr
gs 746 39 1344 926 CB
1365 929 180 (As in BSD) 180 SB
gr
/fm 256 def
5 2 289 926 B
1 F
n
/fm 256 def
445 2 295 926 B
1 F
n
/fm 256 def
2 2 741 926 B
1 F
n
/fm 256 def
446 2 744 926 B
1 F
n
/fm 256 def
2 2 1191 926 B
1 F
n
/fm 256 def
146 2 1194 926 B
1 F
n
/fm 256 def
2 2 1341 926 B
1 F
n
/fm 256 def
745 2 1344 926 B
1 F
n
/fm 256 def
5 2 2090 926 B
1 F
n
/fm 256 def
5 35 289 929 B
1 F
n
/fm 256 def
2 35 741 929 B
1 F
n
/fm 256 def
2 35 1191 929 B
1 F
n
/fm 256 def
2 35 1341 929 B
1 F
n
/fm 256 def
5 35 2090 929 B
1 F
n
gs 446 36 295 965 CB
315 965 280 (WSAEINPROGRESS) 280 SB
gr
gs 447 36 744 965 CB
765 965 220 (EINPROGRESS) 220 SB
gr
gs 147 36 1194 965 CB
1215 965 100 (10036) 100 SB
gr
gs 746 36 1344 965 CB
1365 965 580 (This error is returned if any) 580 SB
gr
gs 746 36 1344 1001 CB
1365 1001 620 (Windows Sockets API function is) 620 SB
gr
gs 746 36 1344 1037 CB
1365 1037 700 (called while a blocking function is) 700 SB
gr
gs 746 36 1344 1073 CB
1365 1073 240 (in progress.) 240 SB
gr
/fm 256 def
5 143 289 965 B
1 F
n
/fm 256 def
2 143 741 965 B
1 F
n
/fm 256 def
2 143 1191 965 B
1 F
n
/fm 256 def
2 143 1341 965 B
1 F
n
/fm 256 def
5 143 2090 965 B
1 F
n
gs 446 36 295 1109 CB
315 1109 220 (WSAEALREADY) 220 SB
gr
gs 447 36 744 1109 CB
765 1109 160 (EALREADY) 160 SB
gr
gs 147 36 1194 1109 CB
1215 1109 100 (10037) 100 SB
gr
gs 746 36 1344 1109 CB
1365 1109 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 1109 B
1 F
n
/fm 256 def
2 35 741 1109 B
1 F
n
/fm 256 def
2 35 1191 1109 B
1 F
n
/fm 256 def
2 35 1341 1109 B
1 F
n
/fm 256 def
5 35 2090 1109 B
1 F
n
gs 446 36 295 1145 CB
315 1145 220 (WSAENOTSOCK) 220 SB
gr
gs 447 36 744 1145 CB
765 1145 160 (ENOTSOCK) 160 SB
gr
gs 147 36 1194 1145 CB
1215 1145 100 (10038) 100 SB
gr
gs 746 36 1344 1145 CB
1365 1145 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 1145 B
1 F
n
/fm 256 def
2 35 741 1145 B
1 F
n
/fm 256 def
2 35 1191 1145 B
1 F
n
/fm 256 def
2 35 1341 1145 B
1 F
n
/fm 256 def
5 35 2090 1145 B
1 F
n
gs 446 36 295 1181 CB
315 1181 300 (WSAEDESTADDRREQ) 300 SB
gr
gs 447 36 744 1181 CB
765 1181 240 (EDESTADDRREQ) 240 SB
gr
gs 147 36 1194 1181 CB
1215 1181 100 (10039) 100 SB
gr
gs 746 36 1344 1181 CB
1365 1181 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 1181 B
1 F
n
/fm 256 def
2 35 741 1181 B
1 F
n
/fm 256 def
2 35 1191 1181 B
1 F
n
/fm 256 def
2 35 1341 1181 B
1 F
n
/fm 256 def
5 35 2090 1181 B
1 F
n
gs 446 36 295 1217 CB
315 1217 220 (WSAEMSGSIZE) 220 SB
gr
gs 447 36 744 1217 CB
765 1217 160 (EMSGSIZE) 160 SB
gr
gs 147 36 1194 1217 CB
1215 1217 100 (10040) 100 SB
gr
gs 746 36 1344 1217 CB
1365 1217 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 1217 B
1 F
n
/fm 256 def
2 35 741 1217 B
1 F
n
/fm 256 def
2 35 1191 1217 B
1 F
n
/fm 256 def
2 35 1341 1217 B
1 F
n
/fm 256 def
5 35 2090 1217 B
1 F
n
gs 446 36 295 1253 CB
315 1253 260 (WSAEPROTOTYPE) 260 SB
gr
gs 447 36 744 1253 CB
765 1253 200 (EPROTOTYPE) 200 SB
gr
gs 147 36 1194 1253 CB
1215 1253 100 (10041) 100 SB
gr
gs 746 36 1344 1253 CB
1365 1253 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 1253 B
1 F
n
/fm 256 def
2 35 741 1253 B
1 F
n
/fm 256 def
2 35 1191 1253 B
1 F
n
/fm 256 def
2 35 1341 1253 B
1 F
n
/fm 256 def
5 35 2090 1253 B
1 F
n
gs 446 36 295 1289 CB
315 1289 280 (WSAENOPROTOOPT) 280 SB
gr
gs 447 36 744 1289 CB
765 1289 220 (ENOPROTOOPT) 220 SB
gr
gs 147 36 1194 1289 CB
1215 1289 100 (10042) 100 SB
gr
gs 746 36 1344 1289 CB
1365 1289 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 1289 B
1 F
n
/fm 256 def
2 35 741 1289 B
1 F
n
/fm 256 def
2 35 1191 1289 B
1 F
n
/fm 256 def
2 35 1341 1289 B
1 F
n
/fm 256 def
5 35 2090 1289 B
1 F
n
gs 446 36 295 1325 CB
315 1325 360 (WSAEPROTONOSUPPORT) 360 SB
gr
gs 447 36 744 1325 CB
765 1325 300 (EPROTONOSUPPORT) 300 SB
gr
gs 147 36 1194 1325 CB
1215 1325 100 (10043) 100 SB
gr
gs 746 36 1344 1325 CB
1365 1325 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 1325 B
1 F
n
/fm 256 def
2 35 741 1325 B
1 F
n
/fm 256 def
2 35 1191 1325 B
1 F
n
/fm 256 def
2 35 1341 1325 B
1 F
n
/fm 256 def
5 35 2090 1325 B
1 F
n
gs 446 36 295 1361 CB
315 1361 360 (WSAESOCKTNOSUPPORT) 360 SB
gr
gs 447 36 744 1361 CB
765 1361 300 (ESOCKTNOSUPPORT) 300 SB
gr
gs 147 36 1194 1361 CB
1215 1361 100 (10044) 100 SB
gr
gs 746 36 1344 1361 CB
1365 1361 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 1361 B
1 F
n
/fm 256 def
2 35 741 1361 B
1 F
n
/fm 256 def
2 35 1191 1361 B
1 F
n
/fm 256 def
2 35 1341 1361 B
1 F
n
/fm 256 def
5 35 2090 1361 B
1 F
n
gs 446 36 295 1397 CB
315 1397 260 (WSAEOPNOTSUPP) 260 SB
gr
gs 447 36 744 1397 CB
765 1397 200 (EOPNOTSUPP) 200 SB
gr
gs 147 36 1194 1397 CB
1215 1397 100 (10045) 100 SB
gr
gs 746 36 1344 1397 CB
1365 1397 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 1397 B
1 F
n
/fm 256 def
2 35 741 1397 B
1 F
n
/fm 256 def
2 35 1191 1397 B
1 F
n
/fm 256 def
2 35 1341 1397 B
1 F
n
/fm 256 def
5 35 2090 1397 B
1 F
n
gs 446 36 295 1433 CB
315 1433 300 (WSAEPFNOSUPPORT) 300 SB
gr
gs 447 36 744 1433 CB
765 1433 240 (EPFNOSUPPORT) 240 SB
gr
gs 147 36 1194 1433 CB
1215 1433 100 (10046) 100 SB
gr
gs 746 36 1344 1433 CB
1365 1433 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 1433 B
1 F
n
/fm 256 def
2 35 741 1433 B
1 F
n
/fm 256 def
2 35 1191 1433 B
1 F
n
/fm 256 def
2 35 1341 1433 B
1 F
n
/fm 256 def
5 35 2090 1433 B
1 F
n
gs 446 36 295 1469 CB
315 1469 300 (WSAEAFNOSUPPORT) 300 SB
gr
gs 447 36 744 1469 CB
765 1469 240 (EAFNOSUPPORT) 240 SB
gr
gs 147 36 1194 1469 CB
1215 1469 100 (10047) 100 SB
gr
gs 746 36 1344 1469 CB
1365 1469 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 1469 B
1 F
n
/fm 256 def
2 35 741 1469 B
1 F
n
/fm 256 def
2 35 1191 1469 B
1 F
n
/fm 256 def
2 35 1341 1469 B
1 F
n
/fm 256 def
5 35 2090 1469 B
1 F
n
gs 446 36 295 1505 CB
315 1505 260 (WSAEADDRINUSE) 260 SB
gr
gs 447 36 744 1505 CB
765 1505 200 (EADDRINUSE) 200 SB
gr
gs 147 36 1194 1505 CB
1215 1505 100 (10048) 100 SB
gr
gs 746 36 1344 1505 CB
1365 1505 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 1505 B
1 F
n
/fm 256 def
2 35 741 1505 B
1 F
n
/fm 256 def
2 35 1191 1505 B
1 F
n
/fm 256 def
2 35 1341 1505 B
1 F
n
/fm 256 def
5 35 2090 1505 B
1 F
n
gs 446 36 295 1541 CB
315 1541 320 (WSAEADDRNOTAVAIL) 320 SB
gr
gs 447 36 744 1541 CB
765 1541 260 (EADDRNOTAVAIL) 260 SB
gr
gs 147 36 1194 1541 CB
1215 1541 100 (10049) 100 SB
gr
gs 746 36 1344 1541 CB
1365 1541 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 1541 B
1 F
n
/fm 256 def
2 35 741 1541 B
1 F
n
/fm 256 def
2 35 1191 1541 B
1 F
n
/fm 256 def
2 35 1341 1541 B
1 F
n
/fm 256 def
5 35 2090 1541 B
1 F
n
gs 446 36 295 1577 CB
315 1577 220 (WSAENETDOWN) 220 SB
gr
gs 447 36 744 1577 CB
765 1577 160 (ENETDOWN) 160 SB
gr
gs 147 36 1194 1577 CB
1215 1577 100 (10050) 100 SB
gr
gs 746 36 1344 1577 CB
1365 1577 580 (As in BSD.  This error may be) 580 SB
gr
gs 746 36 1344 1613 CB
1365 1613 700 (reported at any time if the Windows) 700 SB
gr
gs 746 36 1344 1649 CB
1365 1649 660 (Sockets implementation detects an) 660 SB
gr
gs 746 36 1344 1685 CB
1365 1685 380 (underlying failure.) 380 SB
gr
/fm 256 def
5 143 289 1577 B
1 F
n
/fm 256 def
2 143 741 1577 B
1 F
n
/fm 256 def
2 143 1191 1577 B
1 F
n
/fm 256 def
2 143 1341 1577 B
1 F
n
/fm 256 def
5 143 2090 1577 B
1 F
n
gs 446 36 295 1721 CB
315 1721 280 (WSAENETUNREACH) 280 SB
gr
gs 447 36 744 1721 CB
765 1721 220 (ENETUNREACH) 220 SB
gr
gs 147 36 1194 1721 CB
1215 1721 100 (10051) 100 SB
gr
gs 746 36 1344 1721 CB
1365 1721 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 1721 B
1 F
n
/fm 256 def
2 35 741 1721 B
1 F
n
/fm 256 def
2 35 1191 1721 B
1 F
n
/fm 256 def
2 35 1341 1721 B
1 F
n
/fm 256 def
5 35 2090 1721 B
1 F
n
gs 446 36 295 1757 CB
315 1757 240 (WSAENETRESET) 240 SB
gr
gs 447 36 744 1757 CB
765 1757 180 (ENETRESET) 180 SB
gr
gs 147 36 1194 1757 CB
1215 1757 100 (10052) 100 SB
gr
gs 746 36 1344 1757 CB
1365 1757 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 1757 B
1 F
n
/fm 256 def
2 35 741 1757 B
1 F
n
/fm 256 def
2 35 1191 1757 B
1 F
n
/fm 256 def
2 35 1341 1757 B
1 F
n
/fm 256 def
5 35 2090 1757 B
1 F
n
gs 446 36 295 1793 CB
315 1793 300 (WSAECONNABORTED) 300 SB
gr
gs 447 36 744 1793 CB
765 1793 240 (ECONNABORTED) 240 SB
gr
gs 147 36 1194 1793 CB
1215 1793 100 (10053) 100 SB
gr
gs 746 36 1344 1793 CB
1365 1793 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 1793 B
1 F
n
/fm 256 def
2 35 741 1793 B
1 F
n
/fm 256 def
2 35 1191 1793 B
1 F
n
/fm 256 def
2 35 1341 1793 B
1 F
n
/fm 256 def
5 35 2090 1793 B
1 F
n
gs 446 36 295 1829 CB
315 1829 260 (WSAECONNRESET) 260 SB
gr
gs 447 36 744 1829 CB
765 1829 200 (ECONNRESET) 200 SB
gr
gs 147 36 1194 1829 CB
1215 1829 100 (10054) 100 SB
gr
gs 746 36 1344 1829 CB
1365 1829 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 1829 B
1 F
n
/fm 256 def
2 35 741 1829 B
1 F
n
/fm 256 def
2 35 1191 1829 B
1 F
n
/fm 256 def
2 35 1341 1829 B
1 F
n
/fm 256 def
5 35 2090 1829 B
1 F
n
gs 446 36 295 1865 CB
315 1865 200 (WSAENOBUFS) 200 SB
gr
gs 447 36 744 1865 CB
765 1865 140 (ENOBUFS) 140 SB
gr
gs 147 36 1194 1865 CB
1215 1865 100 (10055) 100 SB
gr
gs 746 36 1344 1865 CB
1365 1865 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 1865 B
1 F
n
/fm 256 def
2 35 741 1865 B
1 F
n
/fm 256 def
2 35 1191 1865 B
1 F
n
/fm 256 def
2 35 1341 1865 B
1 F
n
/fm 256 def
5 35 2090 1865 B
1 F
n
gs 446 36 295 1901 CB
315 1901 200 (WSAEISCONN) 200 SB
gr
gs 447 36 744 1901 CB
765 1901 140 (EISCONN) 140 SB
gr
gs 147 36 1194 1901 CB
1215 1901 100 (10056) 100 SB
gr
gs 746 36 1344 1901 CB
1365 1901 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 1901 B
1 F
n
/fm 256 def
2 35 741 1901 B
1 F
n
/fm 256 def
2 35 1191 1901 B
1 F
n
/fm 256 def
2 35 1341 1901 B
1 F
n
/fm 256 def
5 35 2090 1901 B
1 F
n
gs 446 36 295 1937 CB
315 1937 220 (WSAENOTCONN) 220 SB
gr
gs 447 36 744 1937 CB
765 1937 160 (ENOTCONN) 160 SB
gr
gs 147 36 1194 1937 CB
1215 1937 100 (10057) 100 SB
gr
gs 746 36 1344 1937 CB
1365 1937 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 1937 B
1 F
n
/fm 256 def
2 35 741 1937 B
1 F
n
/fm 256 def
2 35 1191 1937 B
1 F
n
/fm 256 def
2 35 1341 1937 B
1 F
n
/fm 256 def
5 35 2090 1937 B
1 F
n
gs 446 36 295 1973 CB
315 1973 240 (WSAESHUTDOWN) 240 SB
gr
gs 447 36 744 1973 CB
765 1973 180 (ESHUTDOWN) 180 SB
gr
gs 147 36 1194 1973 CB
1215 1973 100 (10058) 100 SB
gr
gs 746 36 1344 1973 CB
1365 1973 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 1973 B
1 F
n
/fm 256 def
2 35 741 1973 B
1 F
n
/fm 256 def
2 35 1191 1973 B
1 F
n
/fm 256 def
2 35 1341 1973 B
1 F
n
/fm 256 def
5 35 2090 1973 B
1 F
n
gs 446 36 295 2009 CB
315 2009 300 (WSAETOOMANYREFS) 300 SB
gr
gs 447 36 744 2009 CB
765 2009 240 (ETOOMANYREFS) 240 SB
gr
gs 147 36 1194 2009 CB
1215 2009 100 (10059) 100 SB
gr
gs 746 36 1344 2009 CB
1365 2009 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 2009 B
1 F
n
/fm 256 def
2 35 741 2009 B
1 F
n
/fm 256 def
2 35 1191 2009 B
1 F
n
/fm 256 def
2 35 1341 2009 B
1 F
n
/fm 256 def
5 35 2090 2009 B
1 F
n
gs 446 36 295 2045 CB
315 2045 240 (WSAETIMEDOUT) 240 SB
gr
gs 447 36 744 2045 CB
765 2045 180 (ETIMEDOUT) 180 SB
gr
gs 147 36 1194 2045 CB
1215 2045 100 (10060) 100 SB
gr
gs 746 36 1344 2045 CB
1365 2045 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 2045 B
1 F
n
/fm 256 def
2 35 741 2045 B
1 F
n
/fm 256 def
2 35 1191 2045 B
1 F
n
/fm 256 def
2 35 1341 2045 B
1 F
n
/fm 256 def
5 35 2090 2045 B
1 F
n
gs 446 36 295 2081 CB
315 2081 300 (WSAECONNREFUSED) 300 SB
gr
gs 447 36 744 2081 CB
765 2081 240 (ECONNREFUSED) 240 SB
gr
gs 147 36 1194 2081 CB
1215 2081 100 (10061) 100 SB
gr
gs 746 36 1344 2081 CB
1365 2081 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 2081 B
1 F
n
/fm 256 def
2 35 741 2081 B
1 F
n
/fm 256 def
2 35 1191 2081 B
1 F
n
/fm 256 def
2 35 1341 2081 B
1 F
n
/fm 256 def
5 35 2090 2081 B
1 F
n
gs 446 36 295 2117 CB
315 2117 160 (WSAELOOP) 160 SB
gr
gs 447 36 744 2117 CB
765 2117 100 (ELOOP) 100 SB
gr
gs 147 36 1194 2117 CB
1215 2117 100 (10062) 100 SB
gr
gs 746 36 1344 2117 CB
1365 2117 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 2117 B
1 F
n
/fm 256 def
2 35 741 2117 B
1 F
n
/fm 256 def
2 35 1191 2117 B
1 F
n
/fm 256 def
2 35 1341 2117 B
1 F
n
/fm 256 def
5 35 2090 2117 B
1 F
n
gs 446 36 295 2153 CB
315 2153 300 (WSAENAMETOOLONG) 300 SB
gr
gs 447 36 744 2153 CB
765 2153 240 (ENAMETOOLONG) 240 SB
gr
gs 147 36 1194 2153 CB
1215 2153 100 (10063) 100 SB
gr
gs 746 36 1344 2153 CB
1365 2153 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 2153 B
1 F
n
/fm 256 def
2 35 741 2153 B
1 F
n
/fm 256 def
2 35 1191 2153 B
1 F
n
/fm 256 def
2 35 1341 2153 B
1 F
n
/fm 256 def
5 35 2090 2153 B
1 F
n
gs 446 36 295 2189 CB
315 2189 240 (WSAEHOSTDOWN) 240 SB
gr
gs 447 36 744 2189 CB
765 2189 180 (EHOSTDOWN) 180 SB
gr
gs 147 36 1194 2189 CB
1215 2189 100 (10064) 100 SB
gr
gs 746 36 1344 2189 CB
1365 2189 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 2189 B
1 F
n
/fm 256 def
2 35 741 2189 B
1 F
n
/fm 256 def
2 35 1191 2189 B
1 F
n
/fm 256 def
2 35 1341 2189 B
1 F
n
/fm 256 def
5 35 2090 2189 B
1 F
n
gs 446 36 295 2225 CB
315 2225 300 (WSAEHOSTUNREACH) 300 SB
gr
gs 447 36 744 2225 CB
765 2225 240 (EHOSTUNREACH) 240 SB
gr
gs 147 36 1194 2225 CB
1215 2225 100 (10065) 100 SB
gr
gs 746 36 1344 2225 CB
1365 2225 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 2225 B
1 F
n
/fm 256 def
2 35 741 2225 B
1 F
n
/fm 256 def
2 35 1191 2225 B
1 F
n
/fm 256 def
2 35 1341 2225 B
1 F
n
/fm 256 def
5 35 2090 2225 B
1 F
n
gs 446 39 295 2261 CB
315 2264 280 (WSASYSNOTREADY) 280 SB
gr
gs 147 39 1194 2261 CB
1215 2264 100 (10091) 100 SB
gr
gs 746 40 1344 2261 CB
1365 2264 240 (Returned by ) 240 SB
gr
32 0 0 33 33 0 0 0 27 /Courier-Bold /font9 ANSIFont font
gs 746 40 1344 2261 CB
1605 2264 240 (WSAStartup\(\)) 240 SB
gr
32 0 0 33 33 0 0 0 27 /Courier /font0 ANSIFont font
gs 746 39 1344 2298 CB
1365 2301 540 (indicating that the network) 540 SB
gr
gs 746 39 1344 2334 CB
1365 2337 440 (subsystem is unusable.) 440 SB
gr
/fm 256 def
5 2 289 2261 B
1 F
n
/fm 256 def
445 2 295 2261 B
1 F
n
/fm 256 def
2 2 741 2261 B
1 F
n
/fm 256 def
446 2 744 2261 B
1 F
n
/fm 256 def
2 2 1191 2261 B
1 F
n
/fm 256 def
146 2 1194 2261 B
1 F
n
/fm 256 def
2 2 1341 2261 B
1 F
n
/fm 256 def
745 2 1344 2261 B
1 F
n
/fm 256 def
5 2 2090 2261 B
1 F
n
/fm 256 def
5 108 289 2264 B
1 F
n
/fm 256 def
2 108 741 2264 B
1 F
n
/fm 256 def
2 108 1191 2264 B
1 F
n
/fm 256 def
2 108 1341 2264 B
1 F
n
/fm 256 def
5 108 2090 2264 B
1 F
n
gs 446 36 295 2373 CB
315 2373 360 (WSAVERNOTSUPPORTED) 360 SB
gr
gs 147 36 1194 2373 CB
1215 2373 100 (10092) 100 SB
gr
gs 746 37 1344 2373 CB
1365 2373 240 (Returned by ) 240 SB
gr
32 0 0 33 33 0 0 0 27 /Courier-Bold /font9 ANSIFont font
gs 746 37 1344 2373 CB
1605 2373 240 (WSAStartup\(\)) 240 SB
gr
32 0 0 33 33 0 0 0 27 /Courier /font0 ANSIFont font
gs 746 36 1344 2410 CB
1365 2410 700 (indicating that the Windows Sockets) 700 SB
gr
gs 746 36 1344 2446 CB
1365 2446 560 (DLL cannot support this app.) 560 SB
gr
/fm 256 def
5 108 289 2373 B
1 F
n
/fm 256 def
2 108 741 2373 B
1 F
n
/fm 256 def
2 108 1191 2373 B
1 F
n
/fm 256 def
2 108 1341 2373 B
1 F
n
/fm 256 def
5 108 2090 2373 B
1 F
n
gs 446 36 295 2482 CB
315 2482 340 (WSANOTINITIALISED) 340 SB
gr
gs 147 36 1194 2482 CB
1215 2482 100 (10093) 100 SB
gr
gs 746 36 1344 2482 CB
1365 2482 620 (Returned by any function except) 620 SB
gr
32 0 0 33 33 0 0 0 27 /Courier-Bold /font9 ANSIFont font
gs 746 37 1344 2518 CB
1365 2518 240 (WSAStartup\(\)) 240 SB
gr
32 0 0 33 33 0 0 0 27 /Courier /font0 ANSIFont font
gs 746 37 1344 2518 CB
1605 2518 360 ( indicating that a) 360 SB
gr
gs 746 37 1344 2555 CB
1365 2555 220 (successful ) 220 SB
gr
32 0 0 33 33 0 0 0 27 /Courier-Bold /font9 ANSIFont font
gs 746 37 1344 2555 CB
1585 2555 240 (WSAStartup\(\)) 240 SB
gr
32 0 0 33 33 0 0 0 27 /Courier /font0 ANSIFont font
gs 746 37 1344 2555 CB
1825 2555 240 ( has not yet) 240 SB
gr
gs 746 36 1344 2592 CB
1365 2592 300 (been performed.) 300 SB
gr
/fm 256 def
5 145 289 2482 B
1 F
n
/fm 256 def
2 145 741 2482 B
1 F
n
/fm 256 def
2 145 1191 2482 B
1 F
n
/fm 256 def
2 145 1341 2482 B
1 F
n
/fm 256 def
5 145 2090 2482 B
1 F
n
gs 446 39 295 2628 CB
315 2631 340 (WSAHOST_NOT_FOUND) 340 SB
gr
gs 447 39 744 2628 CB
765 2631 280 (HOST_NOT_FOUND) 280 SB
gr
gs 147 39 1194 2628 CB
1215 2631 100 (11001) 100 SB
gr
gs 746 39 1344 2628 CB
1365 2631 200 (As in BSD.) 200 SB
gr
/fm 256 def
5 2 289 2628 B
1 F
n
/fm 256 def
445 2 295 2628 B
1 F
n
/fm 256 def
2 2 741 2628 B
1 F
n
/fm 256 def
446 2 744 2628 B
1 F
n
/fm 256 def
2 2 1191 2628 B
1 F
n
/fm 256 def
146 2 1194 2628 B
1 F
n
/fm 256 def
2 2 1341 2628 B
1 F
n
/fm 256 def
745 2 1344 2628 B
1 F
n
/fm 256 def
5 2 2090 2628 B
1 F
n
/fm 256 def
5 35 289 2631 B
1 F
n
/fm 256 def
2 35 741 2631 B
1 F
n
/fm 256 def
2 35 1191 2631 B
1 F
n
/fm 256 def
2 35 1341 2631 B
1 F
n
/fm 256 def
5 35 2090 2631 B
1 F
n
gs 446 36 295 2667 CB
315 2667 240 (WSATRY_AGAIN) 240 SB
gr
gs 447 36 744 2667 CB
765 2667 180 (TRY_AGAIN) 180 SB
gr
gs 147 36 1194 2667 CB
1215 2667 100 (11002) 100 SB
gr
gs 746 36 1344 2667 CB
1365 2667 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 2667 B
1 F
n
/fm 256 def
2 35 741 2667 B
1 F
n
/fm 256 def
2 35 1191 2667 B
1 F
n
/fm 256 def
2 35 1341 2667 B
1 F
n
/fm 256 def
5 35 2090 2667 B
1 F
n
gs 446 36 295 2703 CB
315 2703 280 (WSANO_RECOVERY) 280 SB
gr
gs 447 36 744 2703 CB
765 2703 220 (NO_RECOVERY) 220 SB
gr
gs 147 36 1194 2703 CB
1215 2703 100 (11003) 100 SB
gr
gs 746 36 1344 2703 CB
1365 2703 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 2703 B
1 F
n
/fm 256 def
2 35 741 2703 B
1 F
n
/fm 256 def
2 35 1191 2703 B
1 F
n
/fm 256 def
2 35 1341 2703 B
1 F
n
/fm 256 def
5 35 2090 2703 B
1 F
n
gs 446 36 295 2739 CB
315 2739 200 (WSANO_DATA) 200 SB
gr
gs 447 36 744 2739 CB
765 2739 140 (NO_DATA) 140 SB
gr
gs 147 36 1194 2739 CB
1215 2739 100 (11004) 100 SB
gr
gs 746 36 1344 2739 CB
1365 2739 180 (As in BSD) 180 SB
gr
/fm 256 def
5 35 289 2739 B
1 F
n
/fm 256 def
5 5 289 2775 B
1 F
n
/fm 256 def
5 5 289 2775 B
1 F
n
/fm 256 def
445 5 295 2775 B
1 F
n
/fm 256 def
2 35 741 2739 B
1 F
n
/fm 256 def
5 5 741 2775 B
1 F
n
/fm 256 def
443 5 747 2775 B
1 F
n
/fm 256 def
2 35 1191 2739 B
1 F
n
/fm 256 def
5 5 1191 2775 B
1 F
n
/fm 256 def
143 5 1197 2775 B
1 F
n
/fm 256 def
2 35 1341 2739 B
1 F
n
/fm 256 def
5 5 1341 2775 B
1 F
n
/fm 256 def
742 5 1347 2775 B
1 F
n
/fm 256 def
5 35 2090 2739 B
1 F
n
/fm 256 def
5 5 2090 2775 B
1 F
n
/fm 256 def
5 5 2090 2775 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 2870 1790 (The first set of definitions is present to resolve contentions between standard C error codes which may be) 1790 SB
315 2920 888 (defined inconsistently between various C compilers.) 888 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Courier-Bold
%%+ font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 118 118
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1389 117 642 (Appendix A1: Error Codes ) 642 SB
2031 117 84 (111) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 320 1687 (The second set of definitions provides Windows Sockets versions of regular Berkeley Sockets error) 1687 SB
315 370 107 (codes.) 107 SB
315 470 1478 (The third set of definitions consists of extended Windows Sockets-specific error codes.) 1478 SB
315 570 986 (The fourth set of errors are returned by Windows Sockets ) 986 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1301 567 186 (getXbyY\(\)) 186 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1487 570 83 ( and ) 83 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1570 567 407 (WSAAsyncGetXByY\(\)) 407 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 621 1569 (functions, and correspond to the errors which in Berkeley software would be returned in the ) 1569 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
1884 620 135 (h_errno) 135 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 673 1747 (variable.  They correspond to various failures which may be returned by the Domain Name Service.  If) 1747 SB
315 723 1741 (the Windows Sockets implementation  does not use the DNS, it will use the most appropriate code.  In) 1741 SB
315 773 1514 (general, a Windows Sockets application should interpret WSAHOST_NOT_FOUND and) 1514 SB
315 823 1466 (WSANO_DATA as indicating that the key \(name, address, etc.\) was not found,, while) 1466 SB
315 873 1749 (WSATRY_AGAIN and WSANO_RECOVERY suggest that the name service itself is non-operational.) 1749 SB
315 973 683 (The error numbers are derived from the ) 683 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
998 970 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1176 973 481 ( header file listed in section ) 481 SB
1657 973 94 (A.2.2) 94 SB
1751 973 306 (, and are based on) 306 SB
315 1024 1737 (the fact that Windows Sockets error numbers are computed by adding 10000 to the "normal" Berkeley) 1737 SB
315 1074 233 (error number.) 233 SB
315 1174 1168 (Note that this table does not include all of the error codes defined in ) 1168 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1483 1171 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1661 1174 327 (.  This is because it) 327 SB
315 1225 1644 (includes only errors which might reasonably be returned by a Windows Sockets implementation:) 1644 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
315 1272 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
493 1275 1577 (, on the other hand, includes a full set of BSD definitions to ensure compatibility with ported) 1577 SB
315 1326 156 (software.) 156 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 119 119
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1379 117 652 (Appendix A2: Header Files ) 652 SB
2031 117 84 (112) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 292 391 (A.2 Header Files) 391 SB
315 350 656 (A.2.1 Berkeley Header Files) 656 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 411 1738 (A Windows Sockets supplier who provides a development kit to support the development of Windows) 1738 SB
315 461 1734 (Sockets applications must supply a set of vestigial header files with names that match a number of the) 1734 SB
315 511 1782 (header files in the Berkeley software distribution.  These files are provided for source code compatibility) 1782 SB
315 561 636 (only, and each consists of three lines:) 636 SB
32 0 0 33 33 0 0 0 27 /Courier /font0 ANSIFont font
315 658 400 (#ifndef _WINSOCKAPI_) 400 SB
315 694 400 (#include <winsock.h>) 400 SB
315 730 120 (#endif) 120 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 819 808 (The header files provided for compatibility are:) 808 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
315 866 136 (netdb.h) 136 SB
315 917 198 (arpa/inet.h) 198 SB
315 968 179 (sys/time.h) 179 SB
315 1019 211 (sys/socket.h) 211 SB
315 1070 205 (netinet/in.h) 205 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 1174 145 (The file ) 145 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
460 1171 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
638 1174 1380 ( contains all of the type and structure definitions, constants, macros, and function) 1380 SB
315 1225 1758 (prototypes used by the Windows Sockets specification.  An application writer may choose to ignore the) 1758 SB
315 1275 586 (compatibility headers and include ) 586 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
901 1272 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1079 1275 333 ( in each source file.) 333 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 120 120
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1773 117 258 (winsock.h ) 258 SB
2031 117 84 (113) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 317 1136 (A.2.2 Windows Sockets Header File - winsock.h) 1136 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 428 77 (The ) 77 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
392 425 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
570 428 1530 ( header file includes a number of types and definitions from the standard Windows header) 1530 SB
315 479 68 (file ) 68 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
383 476 189 (windows.h) 189 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
572 479 110 (.  The ) 110 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
682 476 189 (windows.h) 189 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
871 479 1043 ( in the Windows 3.0 SDK \(Software Developer's Kit\) lacks a ) 1043 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
1914 484 200 (#include) 200 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 530 548 (guard, so if you need to include ) 548 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
863 527 189 (windows.h) 189 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1052 530 187 ( as well as ) 187 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1239 527 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1417 530 523 (, you should define the symbol) 523 SB
315 581 643 (_INC_WINDOWS before #including ) 643 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
958 578 178 (winsock.h) 178 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1136 581 206 (, as follows:) 206 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
615 629 500 (#include <windows.h>) 500 SB
615 674 500 (#define _INC_WINDOWS) 500 SB
615 719 500 (#include <winsock.h>) 500 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 767 1045 (Users of the SDK for Windows 3.1 and later need not do this.) 1045 SB
315 867 576 (A Windows Sockets DLL vendor ) 576 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
891 864 223 (MUST NOT) 223 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1114 867 946 ( make any modifications to this header file which could) 946 SB
/fm 256 def
2 50 277 864 B
1 F
n
315 918 1779 (impact binary compatibility of Windows Sockets applications.  The constant values, function parameters) 1779 SB
/fm 256 def
2 49 277 915 B
1 F
n
315 968 1635 (and return codes, and the like must remain consistent across all Windows Sockets DLL vendors.) 1635 SB
/fm 256 def
2 49 277 965 B
1 F
n
32 0 0 33 33 0 0 0 27 /Courier /font0 ANSIFont font
315 1087 1140 (/* WINSOCK.H--definitions to be used with the WINSOCK.DLL) 1140 SB
315 1123 40 ( *) 40 SB
315 1159 1660 ( * This header file corresponds to version 1.1 of the Windows Sockets specification) 1660 SB
1975 1159 20 (.) 20 SB
/fm 256 def
2 35 277 1159 B
1 F
n
315 1195 40 ( *) 40 SB
315 1231 1380 ( * This file includes parts which are Copyright \(c\) 1982-1986 Regents) 1380 SB
315 1267 1240 ( * of the University of California.  All rights reserved.  The) 1240 SB
315 1303 1240 ( * Berkeley Software License Agreement specifies the terms and) 1240 SB
315 1339 660 ( * conditions for redistribution.) 660 SB
315 1375 60 ( */) 60 SB
315 1447 400 (#ifndef _WINSOCKAPI_) 400 SB
315 1483 400 (#define _WINSOCKAPI_) 400 SB
315 1555 40 (/*) 40 SB
315 1591 660 ( * Pull in WINDOWS.H if necessary) 660 SB
315 1627 60 ( */) 60 SB
315 1663 400 (#ifndef _INC_WINDOWS) 400 SB
315 1699 400 (#include <windows.h>) 400 SB
315 1735 500 (#endif /* _INC_WINDOWS */) 500 SB
315 1807 40 (/*) 40 SB
315 1843 1400 ( * Basic system type definitions, taken from the BSD file sys/types.h.) 1400 SB
315 1879 60 ( */) 60 SB
315 1915 620 (typedef unsigned char   u_char;) 620 SB
315 1951 640 (typedef unsigned short  u_short;) 640 SB
315 1987 600 (typedef unsigned int    u_int;) 600 SB
315 2023 620 (typedef unsigned long   u_long;) 620 SB
315 2095 40 (/*) 40 SB
315 2131 660 ( * The new type to be used in all) 660 SB
315 2167 720 ( * instances which refer to sockets.) 720 SB
315 2203 60 ( */) 60 SB
315 2239 620 (typedef u_int           SOCKET;) 620 SB
315 2311 40 (/*) 40 SB
315 2347 1260 ( * Select uses arrays of SOCKETs.  These macros manipulate such) 1260 SB
315 2383 1320 ( * arrays.  FD_SETSIZE may be defined by the user before including) 1320 SB
315 2419 1020 ( * this file, but the default here should be >= 64.) 1020 SB
315 2455 40 ( *) 40 SB
315 2491 1240 ( * CAVEAT IMPLEMENTOR and USER: THESE MACROS AND TYPES MUST BE) 1240 SB
315 2527 940 ( * INCLUDED IN WINSOCK.H EXACTLY AS SHOWN HERE.) 940 SB
315 2563 60 ( */) 60 SB
315 2599 360 (#ifndef FD_SETSIZE) 360 SB
315 2635 520 (#define FD_SETSIZE      64) 520 SB
315 2671 460 (#endif /* FD_SETSIZE */) 460 SB
315 2743 460 (typedef struct fd_set {) 460 SB
315 2779 1260 (        u_short fd_count;               /* how many are SET? */) 1260 SB
315 2815 1300 (        SOCKET  fd_array[FD_SETSIZE];   /* an array of SOCKETs */) 1300 SB
315 2851 180 (} fd_set;) 180 SB
315 2923 1140 (extern int PASCAL FAR __WSAFDIsSet\(SOCKET, fd_set FAR *\);) 1140 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 121 121
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1773 117 258 (winsock.h ) 258 SB
2031 117 84 (114) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 33 33 0 0 0 27 /Courier /font0 ANSIFont font
315 303 480 (#define FD_CLR\(fd, set\) ) 480 SB
795 303 60 (do ) 60 SB
855 303 60 ({ \\) 60 SB
/fm 256 def
2 35 277 303 B
1 F
n
315 339 320 (    u_int __i; \\) 320 SB
315 375 1360 (    for \(__i = 0; __i < \(\(fd_set FAR *\)\(set\)\)->fd_count ; __i++\) { \\) 1360 SB
315 411 1180 (        if \(\(\(fd_set FAR *\)\(set\)\)->fd_array[__i] == fd\) { \\) 1180 SB
315 447 1260 (            while \(__i < \(\(fd_set FAR *\)\(set\)\)->fd_count-1\) { \\) 1260 SB
315 483 1120 (                \(\(fd_set FAR *\)\(set\)\)->fd_array[__i] = \\) 1120 SB
315 519 1220 (                    \(\(fd_set FAR *\)\(set\)\)->fd_array[__i+1]; \\) 1220 SB
315 555 480 (                __i++; \\) 480 SB
315 591 300 (            } \\) 300 SB
315 627 960 (            \(\(fd_set FAR *\)\(set\)\)->fd_count--; \\) 960 SB
315 663 400 (            break; \\) 400 SB
315 699 220 (        } \\) 220 SB
315 735 140 (    } \\) 140 SB
315 771 20 (}) 20 SB
335 771 180 ( while\(0\)) 180 SB
/fm 256 def
2 35 277 771 B
1 F
n
315 843 480 (#define FD_SET\(fd, set\) ) 480 SB
795 843 60 (do ) 60 SB
855 843 60 ({ \\) 60 SB
/fm 256 def
2 35 277 843 B
1 F
n
315 879 1100 (    if \(\(\(fd_set FAR *\)\(set\)\)->fd_count < FD_SETSIZE\) \\) 1100 SB
315 915 1580 (        \(\(fd_set FAR *\)\(set\)\)->fd_array[\(\(fd_set FAR *\)\(set\)\)->fd_count++]=fd;\\) 1580 SB
315 951 20 (}) 20 SB
335 951 180 ( while\(0\)) 180 SB
/fm 256 def
2 35 277 951 B
1 F
n
315 1023 420 (#define FD_ZERO\(set\) ) 420 SB
735 1023 20 (\() 20 SB
755 1023 660 (\(\(fd_set FAR *\)\(set\)\)->fd_count=0) 660 SB
1415 1023 20 (\)) 20 SB
/fm 256 def
2 35 277 1023 B
1 F
n
315 1095 1360 (#define FD_ISSET\(fd, set\) __WSAFDIsSet\(\(SOCKET\)fd, \(fd_set FAR *\)set) 1360 SB
1675 1095 20 (\)) 20 SB
/fm 256 def
2 35 277 1095 B
1 F
n
315 1167 40 (/*) 40 SB
315 1203 1420 ( * Structure used in select\(\) call, taken from the BSD file sys/time.h.) 1420 SB
315 1239 60 ( */) 60 SB
315 1275 320 (struct timeval {) 320 SB
315 1311 900 (        long    tv_sec;         /* seconds */) 900 SB
315 1347 1080 (        long    tv_usec;        /* and microseconds */) 1080 SB
315 1383 40 (};) 40 SB
315 1455 40 (/*) 40 SB
315 1491 520 ( * Operations on timevals.) 520 SB
315 1527 40 ( *) 40 SB
315 1563 860 ( * NB: timercmp does not work for >= or <=.) 860 SB
315 1599 60 ( */) 60 SB
315 1635 1300 (#define timerisset\(tvp\)         \(\(tvp\)->tv_sec || \(tvp\)->tv_usec\)) 1300 SB
315 1671 660 (#define timercmp\(tvp, uvp, cmp\) \\) 660 SB
315 1707 900 (        \(\(tvp\)->tv_sec cmp \(uvp\)->tv_sec || \\) 900 SB
315 1743 1540 (         \(tvp\)->tv_sec == \(uvp\)->tv_sec && \(tvp\)->tv_usec cmp \(uvp\)->tv_usec\)) 1540 SB
315 1779 1320 (#define timerclear\(tvp\)         \(tvp\)->tv_sec = \(tvp\)->tv_usec = 0) 1320 SB
315 1851 40 (/*) 40 SB
315 1887 1280 ( * Commands for ioctlsocket\(\),  taken from the BSD file fcntl.h.) 1280 SB
315 1923 40 ( *) 40 SB
315 1959 40 ( *) 40 SB
315 1995 1080 ( * Ioctl's have the command encoded in the lower word,) 1080 SB
315 2031 1120 ( * and the size of any in or out parameters in the upper) 1120 SB
315 2067 1040 ( * word.  The high 2 bits of the upper word are used) 1040 SB
315 2103 1120 ( * to encode the in/out status of the parameter; for now) 1120 SB
315 2139 940 ( * we restrict parameters to at most 128 bytes.) 940 SB
315 2175 60 ( */) 60 SB
315 2211 1520 (#define IOCPARM_MASK    0x7f            /* parameters must be < 128 bytes */) 1520 SB
315 2247 1180 (#define IOC_VOID        0x20000000      /* no parameters */) 1180 SB
315 2283 1300 (#define IOC_OUT         0x40000000      /* copy out parameters */) 1300 SB
315 2319 1280 (#define IOC_IN          0x80000000      /* copy in parameters */) 1280 SB
315 2355 800 (#define IOC_INOUT       \(IOC_IN|IOC_OUT\)) 800 SB
315 2391 1460 (                                        /* 0x20000000 distinguishes new &) 1460 SB
315 2427 1140 (                                           old ioctl's */) 1140 SB
315 2463 860 (#define _IO\(x,y\)        \(IOC_VOID|\(x<<8\)|y\)) 860 SB
315 2535 1580 (#define _IOR\(x,y,t\)     \(IOC_OUT|\(\(\(long\)sizeof\(t\)&IOCPARM_MASK\)<<16\)|\(x<<8\)|y\)) 1580 SB
315 2607 1560 (#define _IOW\(x,y,t\)     \(IOC_IN|\(\(\(long\)sizeof\(t\)&IOCPARM_MASK\)<<16\)|\(x<<8\)|y\)) 1560 SB
315 2679 1340 (#define FIONREAD    _IOR\('f', 127, u_long\) /* get # bytes to read *) 1340 SB
1655 2679 20 (/) 20 SB
/fm 256 def
2 35 277 2679 B
1 F
n
315 2715 1480 (#define FIONBIO     _IOW\('f', 126, u_long\) /* set/clear non-blocking i/o *) 1480 SB
1795 2715 20 (/) 20 SB
/fm 256 def
2 35 277 2715 B
1 F
n
315 2751 1340 (#define FIOASYNC    _IOW\('f', 125, u_long\) /* set/clear async i/o *) 1340 SB
1655 2751 20 (/) 20 SB
/fm 256 def
2 35 277 2751 B
1 F
n
315 2823 500 (/* Socket I/O Controls */) 500 SB
315 2859 1320 (#define SIOCSHIWAT  _IOW\('s',  0, u_long\)  /* set high watermark *) 1320 SB
1635 2859 20 (/) 20 SB
/fm 256 def
2 35 277 2859 B
1 F
n
315 2895 1320 (#define SIOCGHIWAT  _IOR\('s',  1, u_long\)  /* get high watermark *) 1320 SB
1635 2895 20 (/) 20 SB
/fm 256 def
2 35 277 2895 B
1 F
n
315 2931 1300 (#define SIOCSLOWAT  _IOW\('s',  2, u_long\)  /* set low watermark *) 1300 SB
1615 2931 20 (/) 20 SB
/fm 256 def
2 35 277 2931 B
1 F
n
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%Page: 122 122
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1773 117 258 (winsock.h ) 258 SB
2031 117 84 (115) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 33 33 0 0 0 27 /Courier /font0 ANSIFont font
315 267 1300 (#define SIOCGLOWAT  _IOR\('s',  3, u_long\)  /* get low watermark *) 1300 SB
1615 267 20 (/) 20 SB
/fm 256 def
2 35 277 267 B
1 F
n
315 303 1200 (#define SIOCATMARK  _IOR\('s',  7, u_long\)  /* at oob mark? *) 1200 SB
1515 303 20 (/) 20 SB
/fm 256 def
2 35 277 303 B
1 F
n
315 375 40 (/*) 40 SB
315 411 1340 ( * Structures returned by network data base library, taken from the) 1340 SB
315 447 1340 ( * BSD file netdb.h.  All addresses are supplied in host order, and) 1340 SB
315 483 1280 ( * returned in network order \(suitable for use in system calls\).) 1280 SB
315 519 60 ( */) 60 SB
315 591 340 (struct  hostent {) 340 SB
315 627 1340 (        char    FAR * h_name;           /* official name of host */) 1340 SB
315 663 1120 (        char    FAR * FAR * h_aliases;  /* alias list */) 1120 SB
315 699 1240 (        short   h_addrtype;             /* host address type *) 1240 SB
1555 699 20 (/) 20 SB
/fm 256 def
2 35 277 699 B
1 F
n
315 735 1240 (        short   h_length;               /* length of address *) 1240 SB
1555 735 20 (/) 20 SB
/fm 256 def
2 35 277 735 B
1 F
n
315 771 1280 (        char    FAR * FAR * h_addr_list; /* list of addresses */) 1280 SB
315 807 1480 (#define h_addr  h_addr_list[0]          /* address, for backward compat */) 1480 SB
315 843 40 (};) 40 SB
315 915 40 (/*) 40 SB
315 951 860 ( * It is assumed here that a network number) 860 SB
315 987 380 ( * fits in 32 bits.) 380 SB
315 1023 60 ( */) 60 SB
315 1059 320 (struct  netent {) 320 SB
315 1095 1320 (        char    FAR * n_name;           /* official name of net */) 1320 SB
315 1131 1120 (        char    FAR * FAR * n_aliases;  /* alias list */) 1120 SB
315 1167 1220 (        short   n_addrtype;             /* net address type *) 1220 SB
1535 1167 20 (/) 20 SB
/fm 256 def
2 35 277 1167 B
1 F
n
315 1203 1100 (        u_long  n_net;                  /* network # */) 1100 SB
315 1239 40 (};) 40 SB
315 1311 340 (struct  servent {) 340 SB
315 1347 1340 (        char    FAR * s_name;           /* official service name */) 1340 SB
315 1383 1120 (        char    FAR * FAR * s_aliases;  /* alias list */) 1120 SB
315 1419 1020 (        short   s_port;                 /* port # *) 1020 SB
1335 1419 20 (/) 20 SB
/fm 256 def
2 35 277 1419 B
1 F
n
315 1455 1220 (        char    FAR * s_proto;          /* protocol to use */) 1220 SB
315 1491 40 (};) 40 SB
315 1563 360 (struct  protoent {) 360 SB
315 1599 1360 (        char    FAR * p_name;           /* official protocol name */) 1360 SB
315 1635 1120 (        char    FAR * FAR * p_aliases;  /* alias list */) 1120 SB
315 1671 1100 (        short   p_proto;                /* protocol # *) 1100 SB
1415 1671 20 (/) 20 SB
/fm 256 def
2 35 277 1671 B
1 F
n
315 1707 40 (};) 40 SB
315 1779 40 (/*) 40 SB
315 1815 1180 ( * Constants and structures defined by the internet system,) 1180 SB
315 1851 1380 ( * Per RFC 790, September 1981, taken from the BSD file netinet/in.h.) 1380 SB
315 1887 60 ( */) 60 SB
315 1959 40 (/*) 40 SB
315 1995 240 ( * Protocols) 240 SB
315 2031 60 ( */) 60 SB
315 2067 1320 (#define IPPROTO_IP              0               /* dummy for IP */) 1320 SB
315 2103 1560 (#define IPPROTO_ICMP            1               /* control message protocol */) 1560 SB
315 2139 1520 (#define IPPROTO_GGP             2               /* gateway^2 \(deprecated\) */) 1520 SB
315 2175 1140 (#define IPPROTO_TCP             6               /* tcp */) 1140 SB
315 2211 1140 (#define IPPROTO_PUP             12              /* pup */) 1140 SB
315 2247 1520 (#define IPPROTO_UDP             17              /* user datagram protocol */) 1520 SB
315 2283 1220 (#define IPPROTO_IDP             22              /* xns idp */) 1220 SB
315 2319 1580 (#define IPPROTO_ND              77              /* UNOFFICIAL net disk proto */) 1580 SB
315 2391 1340 (#define IPPROTO_RAW             255             /* raw IP packet */) 1340 SB
315 2427 700 (#define IPPROTO_MAX             256) 700 SB
315 2499 40 (/*) 40 SB
315 2535 1000 ( * Port/socket numbers: network standard functions) 1000 SB
315 2571 60 ( */) 60 SB
315 2607 660 (#define IPPORT_ECHO             7) 660 SB
315 2643 660 (#define IPPORT_DISCARD          9) 660 SB
315 2679 680 (#define IPPORT_SYSTAT           11) 680 SB
315 2715 680 (#define IPPORT_DAYTIME          13) 680 SB
315 2751 680 (#define IPPORT_NETSTAT          15) 680 SB
315 2787 680 (#define IPPORT_FTP              21) 680 SB
315 2823 680 (#define IPPORT_TELNET           23) 680 SB
315 2859 680 (#define IPPORT_SMTP             25) 680 SB
315 2895 680 (#define IPPORT_TIMESERVER       37) 680 SB
315 2931 680 (#define IPPORT_NAMESERVER       42) 680 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%Page: 123 123
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1773 117 258 (winsock.h ) 258 SB
2031 117 84 (116) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 33 33 0 0 0 27 /Courier /font0 ANSIFont font
315 267 680 (#define IPPORT_WHOIS            43) 680 SB
315 303 680 (#define IPPORT_MTP              57) 680 SB
315 375 40 (/*) 40 SB
315 411 940 ( * Port/socket numbers: host specific functions) 940 SB
315 447 60 ( */) 60 SB
315 483 680 (#define IPPORT_TFTP             69) 680 SB
315 519 680 (#define IPPORT_RJE              77) 680 SB
315 555 680 (#define IPPORT_FINGER           79) 680 SB
315 591 680 (#define IPPORT_TTYLINK          87) 680 SB
315 627 680 (#define IPPORT_SUPDUP           95) 680 SB
315 699 40 (/*) 40 SB
315 735 380 ( * UNIX TCP sockets) 380 SB
315 771 60 ( */) 60 SB
315 807 700 (#define IPPORT_EXECSERVER       512) 700 SB
315 843 700 (#define IPPORT_LOGINSERVER      513) 700 SB
315 879 700 (#define IPPORT_CMDSERVER        514) 700 SB
315 915 700 (#define IPPORT_EFSSERVER        520) 700 SB
315 987 40 (/*) 40 SB
315 1023 380 ( * UNIX UDP sockets) 380 SB
315 1059 60 ( */) 60 SB
315 1095 700 (#define IPPORT_BIFFUDP          512) 700 SB
315 1131 700 (#define IPPORT_WHOSERVER        513) 700 SB
315 1167 700 (#define IPPORT_ROUTESERVER      520) 700 SB
315 1203 1220 (                                        /* 520+1 also used */) 1220 SB
315 1275 40 (/*) 40 SB
315 1311 860 ( * Ports < IPPORT_RESERVED are reserved for) 860 SB
315 1347 720 ( * privileged processes \(e.g. root\).) 720 SB
315 1383 60 ( */) 60 SB
315 1419 720 (#define IPPORT_RESERVED         1024) 720 SB
315 1491 40 (/*) 40 SB
315 1527 300 ( * Link numbers) 300 SB
315 1563 60 ( */) 60 SB
315 1599 700 (#define IMPLINK_IP              155) 700 SB
315 1635 700 (#define IMPLINK_LOWEXPER        156) 700 SB
315 1671 700 (#define IMPLINK_HIGHEXPER       158) 700 SB
315 1743 40 (/*) 40 SB
315 1779 1040 ( * Internet address \(old style... should be updated\)) 1040 SB
315 1815 60 ( */) 60 SB
315 1851 320 (struct in_addr {) 320 SB
315 1887 300 (        union {) 300 SB
315 1923 1240 (                struct { u_char s_b1,s_b2,s_b3,s_b4; } S_un_b;) 1240 SB
315 1959 1060 (                struct { u_short s_w1,s_w2; } S_un_w;) 1060 SB
315 1995 600 (                u_long S_addr;) 600 SB
315 2031 300 (        } S_un;) 300 SB
315 2067 540 (#define s_addr  S_un.S_addr) 540 SB
315 2103 1440 (                                /* can be used for most tcp & ip code */) 1440 SB
315 2139 640 (#define s_host  S_un.S_un_b.s_b2) 640 SB
315 2175 980 (                                /* host on imp */) 980 SB
315 2211 640 (#define s_net   S_un.S_un_b.s_b1) 640 SB
315 2247 900 (                                /* network */) 900 SB
315 2283 640 (#define s_imp   S_un.S_un_w.s_w2) 640 SB
315 2319 820 (                                /* imp */) 820 SB
315 2355 640 (#define s_impno S_un.S_un_b.s_b4) 640 SB
315 2391 860 (                                /* imp # */) 860 SB
315 2427 640 (#define s_lh    S_un.S_un_b.s_b3) 640 SB
315 2463 1000 (                                /* logical host */) 1000 SB
315 2499 40 (};) 40 SB
315 2571 40 (/*) 40 SB
315 2607 1040 ( * Definitions of bits in internet address integers.) 1040 SB
315 2643 1340 ( * On subnets, the decomposition of addresses to host and net parts) 1340 SB
315 2679 1120 ( * is done according to subnet mask, not the masks here.) 1120 SB
315 2715 60 ( */) 60 SB
315 2751 1260 (#define IN_CLASSA\(i\)            \(\(\(long\)\(i\) & 0x80000000\) == 0\)) 1260 SB
315 2787 840 (#define IN_CLASSA_NET           0xff000000) 840 SB
315 2823 680 (#define IN_CLASSA_NSHIFT        24) 680 SB
315 2859 840 (#define IN_CLASSA_HOST          0x00ffffff) 840 SB
315 2895 700 (#define IN_CLASSA_MAX           128) 700 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%Page: 124 124
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1773 117 258 (winsock.h ) 258 SB
2031 117 84 (117) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 33 33 0 0 0 27 /Courier /font0 ANSIFont font
315 267 1440 (#define IN_CLASSB\(i\)            \(\(\(long\)\(i\) & 0xc0000000\) == 0x80000000\)) 1440 SB
315 303 840 (#define IN_CLASSB_NET           0xffff0000) 840 SB
315 339 680 (#define IN_CLASSB_NSHIFT        16) 680 SB
315 375 840 (#define IN_CLASSB_HOST          0x0000ffff) 840 SB
315 411 740 (#define IN_CLASSB_MAX           65536) 740 SB
315 483 1440 (#define IN_CLASSC\(i\)            \(\(\(long\)\(i\) & 0xc0000000\) == 0xc0000000\)) 1440 SB
315 519 840 (#define IN_CLASSC_NET           0xffffff00) 840 SB
315 555 660 (#define IN_CLASSC_NSHIFT        8) 660 SB
315 591 840 (#define IN_CLASSC_HOST          0x000000ff) 840 SB
315 663 1000 (#define INADDR_ANY              \(u_long\)0x00000000) 1000 SB
315 699 840 (#define INADDR_LOOPBACK         0x7f000001) 840 SB
315 735 980 (#define INADDR_BROADCAST        \(u_long\)0xfffffff) 980 SB
1295 735 20 (f) 20 SB
/fm 256 def
2 35 277 735 B
1 F
n
315 771 820 (#define INADDR_NONE             0xfffffff) 820 SB
1135 771 20 (f) 20 SB
/fm 256 def
2 35 277 771 B
1 F
n
315 843 40 (/*) 40 SB
315 879 680 ( * Socket address, internet style.) 680 SB
315 915 60 ( */) 60 SB
315 951 400 (struct sockaddr_in {) 400 SB
315 987 540 (        short   sin_family;) 540 SB
315 1023 500 (        u_short sin_port;) 500 SB
315 1059 660 (        struct  in_addr sin_addr;) 660 SB
315 1095 560 (        char    sin_zero[8];) 560 SB
315 1131 40 (};) 40 SB
315 1203 700 (#define WSADESCRIPTION_LEN      256) 700 SB
315 1239 700 (#define WSASYS_STATUS_LEN       128) 700 SB
315 1311 480 (typedef struct WSAData {) 480 SB
315 1347 820 (        WORD                    wVersion;) 820 SB
315 1383 900 (        WORD                    wHighVersion;) 900 SB
315 1419 1360 (        char                    szDescription[WSADESCRIPTION_LEN+1];) 1360 SB
315 1455 1360 (        char                    szSystemStatus[WSASYS_STATUS_LEN+1];) 1360 SB
315 1491 860 (        unsigned short          iMaxSockets) 860 SB
1175 1491 20 (;) 20 SB
/fm 256 def
2 35 277 1491 B
1 F
n
315 1527 820 (        unsigned short          iMaxUdpDg) 820 SB
1135 1527 20 (;) 20 SB
/fm 256 def
2 35 277 1527 B
1 F
n
315 1563 900 (        char FAR *              lpVendorInfo;) 900 SB
315 1599 200 (} WSADATA;) 200 SB
315 1671 620 (typedef WSADATA FAR *LPWSADATA;) 620 SB
315 1743 40 (/*) 40 SB
315 1779 1080 ( * Options for use with [gs]etsockopt at the IP level.) 1080 SB
315 1815 60 ( */) 60 SB
315 1851 1500 (#define IP_OPTIONS      1               /* set/get IP per-packet options */) 1500 SB
315 1923 40 (/*) 40 SB
315 1959 1360 ( * Definitions related to sockets: types, address families, options,) 1360 SB
315 1995 800 ( * taken from the BSD file sys/socket.h.) 800 SB
315 2031 60 ( */) 60 SB
315 2103 40 (/*) 40 SB
315 2139 800 ( * This is used instead of -1, since the) 800 SB
315 2175 540 ( * SOCKET type is unsigned.) 540 SB
315 2211 60 ( */) 60 SB
315 2247 720 (#define INVALID_SOCKET  \(SOCKET\)\(~0\)) 720 SB
315 2283 720 (#define SOCKET_ERROR            \(-1\)) 720 SB
315 2355 40 (/*) 40 SB
315 2391 160 ( * Types) 160 SB
315 2427 60 ( */) 60 SB
315 2463 1180 (#define SOCK_STREAM     1               /* stream socket */) 1180 SB
315 2499 1220 (#define SOCK_DGRAM      2               /* datagram socket */) 1220 SB
315 2535 1360 (#define SOCK_RAW        3               /* raw-protocol interface */) 1360 SB
315 2571 1440 (#define SOCK_RDM        4               /* reliably-delivered message */) 1440 SB
315 2607 1380 (#define SOCK_SEQPACKET  5               /* sequenced packet stream */) 1380 SB
315 2679 40 (/*) 40 SB
315 2715 540 ( * Option flags per-socket.) 540 SB
315 2751 60 ( */) 60 SB
315 2787 1560 (#define SO_DEBUG        0x0001          /* turn on debugging info recording */) 1560 SB
315 2823 1380 (#define SO_ACCEPTCONN   0x0002          /* socket has had listen\(\) */) 1380 SB
315 2859 1420 (#define SO_REUSEADDR    0x0004          /* allow local address reuse */) 1420 SB
315 2895 1360 (#define SO_KEEPALIVE    0x0008          /* keep connections alive */) 1360 SB
315 2931 1480 (#define SO_DONTROUTE    0x0010          /* just use interface addresses */) 1480 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%Page: 125 125
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1773 117 258 (winsock.h ) 258 SB
2031 117 84 (118) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 33 33 0 0 0 27 /Courier /font0 ANSIFont font
315 267 1560 (#define SO_BROADCAST    0x0020          /* permit sending of broadcast msgs */) 1560 SB
315 303 1500 (#define SO_USELOOPBACK  0x0040          /* bypass hardware when possible */) 1500 SB
315 339 1540 (#define SO_LINGER       0x0080          /* linger on close if data present */) 1540 SB
315 375 1540 (#define SO_OOBINLINE    0x0100          /* leave received OOB data in line */) 1540 SB
315 447 860 (#define SO_DONTLINGER   \(u_int\)\(~SO_LINGER\)) 860 SB
315 519 40 (/*) 40 SB
315 555 440 ( * Additional options.) 440 SB
315 591 60 ( */) 60 SB
315 627 1240 (#define SO_SNDBUF       0x1001          /* send buffer size */) 1240 SB
315 663 1300 (#define SO_RCVBUF       0x1002          /* receive buffer size */) 1300 SB
315 699 1300 (#define SO_SNDLOWAT     0x1003          /* send low-water mark */) 1300 SB
315 735 1360 (#define SO_RCVLOWAT     0x1004          /* receive low-water mark */) 1360 SB
315 771 1160 (#define SO_SNDTIMEO     0x1005          /* send timeout */) 1160 SB
315 807 1220 (#define SO_RCVTIMEO     0x1006          /* receive timeout */) 1220 SB
315 843 1440 (#define SO_ERROR        0x1007          /* get error status and clear */) 1440 SB
315 879 1220 (#define SO_TYPE         0x1008          /* get socket type */) 1220 SB
315 951 40 (/*) 40 SB
315 987 300 ( * TCP options.) 300 SB
315 1023 60 ( */) 60 SB
315 1059 600 (#define TCP_NODELAY     0x0001) 600 SB
315 1131 40 (/*) 40 SB
315 1167 400 ( * Address families.) 400 SB
315 1203 60 ( */) 60 SB
315 1239 1140 (#define AF_UNSPEC       0               /* unspecified */) 1140 SB
315 1275 1520 (#define AF_UNIX         1               /* local to host \(pipes, portals\) */) 1520 SB
315 1311 1480 (#define AF_INET         2               /* internetwork: UDP, TCP, etc. */) 1480 SB
315 1347 1340 (#define AF_IMPLINK      3               /* arpanet imp addresses */) 1340 SB
315 1383 1380 (#define AF_PUP          4               /* pup protocols: e.g. BSP */) 1380 SB
315 1419 1300 (#define AF_CHAOS        5               /* mit CHAOS protocols */) 1300 SB
315 1455 1280 (#define AF_NS           6               /* XEROX NS protocols */) 1280 SB
315 1491 220 (#define AF_) 220 SB
535 1491 60 (ISO) 60 SB
595 1491 900 (          7               /* ISO protocols */) 900 SB
/fm 256 def
2 35 277 1491 B
1 F
n
315 1527 1120 (#define AF_OSI          AF_ISO          /* OSI is ISO */) 1120 SB
/fm 256 def
2 35 277 1527 B
1 F
n
315 1563 1540 (#define AF_ECMA         8               /* european computer manufacturers */) 1540 SB
315 1599 1260 (#define AF_DATAKIT      9               /* datakit protocols */) 1260 SB
315 1635 1420 (#define AF_CCITT        10              /* CCITT protocols, X.25 etc */) 1420 SB
315 1671 1060 (#define AF_SNA          11              /* IBM SNA */) 1060 SB
315 1707 1040 (#define AF_DECnet       12              /* DECnet */) 1040 SB
315 1743 1440 (#define AF_DLI          13              /* Direct data link interface */) 1440 SB
315 1779 980 (#define AF_LAT          14              /* LAT */) 980 SB
315 1815 1240 (#define AF_HYLINK       15              /* NSC Hyperchannel */) 1240 SB
315 1851 1100 (#define AF_APPLETALK    16              /* AppleTalk */) 1100 SB
315 1887 1360 (#define AF_NETBIOS      17              /* NetBios-style addresses *) 1360 SB
1675 1887 20 (/) 20 SB
/fm 256 def
2 35 277 1887 B
1 F
n
315 1959 500 (#define AF_MAX          1) 500 SB
815 1959 20 (8) 20 SB
/fm 256 def
2 35 277 1959 B
1 F
n
315 2031 40 (/*) 40 SB
315 2067 820 ( * Structure used by kernel to store most) 820 SB
315 2103 260 ( * addresses.) 260 SB
315 2139 60 ( */) 60 SB
315 2175 340 (struct sockaddr {) 340 SB
315 2211 1200 (        u_short sa_family;              /* address family */) 1200 SB
315 2247 1560 (        char    sa_data[14];            /* up to 14 bytes of direct address */) 1560 SB
315 2283 40 (};) 40 SB
315 2355 40 (/*) 40 SB
315 2391 880 ( * Structure used by kernel to pass protocol) 880 SB
315 2427 600 ( * information in raw sockets.) 600 SB
315 2463 60 ( */) 60 SB
315 2499 360 (struct sockproto {) 360 SB
315 2535 1200 (        u_short sp_family;              /* address family */) 1200 SB
315 2571 1080 (        u_short sp_protocol;            /* protocol */) 1080 SB
315 2607 40 (};) 40 SB
315 2679 40 (/*) 40 SB
315 2715 1100 ( * Protocol families, same as address families for now.) 1100 SB
315 2751 60 ( */) 60 SB
315 2787 660 (#define PF_UNSPEC       AF_UNSPEC) 660 SB
315 2823 620 (#define PF_UNIX         AF_UNIX) 620 SB
315 2859 620 (#define PF_INET         AF_INET) 620 SB
315 2895 680 (#define PF_IMPLINK      AF_IMPLINK) 680 SB
315 2931 600 (#define PF_PUP          AF_PUP) 600 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%Page: 126 126
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1773 117 258 (winsock.h ) 258 SB
2031 117 84 (119) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 33 33 0 0 0 27 /Courier /font0 ANSIFont font
315 267 640 (#define PF_CHAOS        AF_CHAOS) 640 SB
315 303 580 (#define PF_NS           AF_NS) 580 SB
315 339 220 (#define PF_) 220 SB
535 339 60 (ISO) 60 SB
595 339 260 (          AF_) 260 SB
855 339 60 (ISO) 60 SB
/fm 256 def
2 35 277 339 B
1 F
n
315 375 600 (#define PF_OSI          AF_OSI) 600 SB
/fm 256 def
2 35 277 375 B
1 F
n
315 411 620 (#define PF_ECMA         AF_ECMA) 620 SB
315 447 680 (#define PF_DATAKIT      AF_DATAKIT) 680 SB
315 483 640 (#define PF_CCITT        AF_CCITT) 640 SB
315 519 600 (#define PF_SNA          AF_SNA) 600 SB
315 555 660 (#define PF_DECnet       AF_DECnet) 660 SB
315 591 600 (#define PF_DLI          AF_DLI) 600 SB
315 627 600 (#define PF_LAT          AF_LAT) 600 SB
315 663 660 (#define PF_HYLINK       AF_HYLINK) 660 SB
315 699 720 (#define PF_APPLETALK    AF_APPLETALK) 720 SB
315 771 600 (#define PF_MAX          AF_MAX) 600 SB
315 843 40 (/*) 40 SB
315 879 980 ( * Structure used for manipulating linger option.) 980 SB
315 915 60 ( */) 60 SB
315 951 320 (struct  linger {) 320 SB
315 987 1180 (        u_short l_onoff;                /* option on/off */) 1180 SB
315 1023 1140 (        u_short l_linger;               /* linger time */) 1140 SB
315 1059 40 (};) 40 SB
315 1131 40 (/*) 40 SB
315 1167 1300 ( * Level number for \(get/set\)sockopt\(\) to apply to socket itself.) 1300 SB
315 1203 60 ( */) 60 SB
315 1239 1400 (#define SOL_SOCKET      0xffff          /* options for socket level */) 1400 SB
315 1311 40 (/*) 40 SB
315 1347 920 ( * Maximum queue length specifiable by listen.) 920 SB
315 1383 60 ( */) 60 SB
315 1419 500 (#define SOMAXCONN       5) 500 SB
315 1491 1400 (#define MSG_OOB         0x1             /* process out-of-band data */) 1400 SB
315 1527 1400 (#define MSG_PEEK        0x2             /* peek at incoming message */) 1400 SB
315 1563 1580 (#define MSG_DONTROUTE   0x4             /* send without using routing tables */) 1580 SB
315 1635 520 (#define MSG_MAXIOVLEN   16) 520 SB
315 1707 40 (/*) 40 SB
315 1743 1320 ( * Define constant based on rfc883, used by gethostbyxxxx\(\) calls.) 1320 SB
315 1779 60 ( */) 60 SB
315 1815 720 (#define MAXGETHOSTSTRUCT        1024) 720 SB
315 1887 40 (/*) 40 SB
315 1923 1160 ( * Define flags to be used with the WSAAsyncSelect\(\) call.) 1160 SB
315 1959 60 ( */) 60 SB
315 1995 560 (#define FD_READ         0x01) 560 SB
315 2031 560 (#define FD_WRITE        0x02) 560 SB
315 2067 560 (#define FD_OOB          0x04) 560 SB
315 2103 560 (#define FD_ACCEPT       0x08) 560 SB
315 2139 560 (#define FD_CONNECT      0x10) 560 SB
315 2175 560 (#define FD_CLOSE        0x20) 560 SB
315 2247 40 (/*) 40 SB
315 2283 1360 ( * All Windows Sockets error constants are biased by WSABASEERR from) 1360 SB
315 2319 300 ( * the "normal") 300 SB
315 2355 60 ( */) 60 SB
315 2391 740 (#define WSABASEERR              10000) 740 SB
315 2427 40 (/*) 40 SB
315 2463 1380 ( * Windows Sockets definitions of regular Microsoft C error constants) 1380 SB
315 2499 60 ( */) 60 SB
315 2535 920 (#define WSAEINTR                \(WSABASEERR+4\)) 920 SB
315 2571 920 (#define WSAEBADF                \(WSABASEERR+9\)) 920 SB
315 2607 920 (#define WSAEACCES               \(WSABASEERR+13) 920 SB
1235 2607 20 (\)) 20 SB
/fm 256 def
2 35 277 2607 B
1 F
n
315 2643 940 (#define WSAEFAULT               \(WSABASEERR+14\)) 940 SB
315 2679 940 (#define WSAEINVAL               \(WSABASEERR+22\)) 940 SB
315 2715 940 (#define WSAEMFILE               \(WSABASEERR+24\)) 940 SB
315 2787 40 (/*) 40 SB
315 2823 1320 ( * Windows Sockets definitions of regular Berkeley error constants) 1320 SB
315 2859 60 ( */) 60 SB
315 2895 940 (#define WSAEWOULDBLOCK          \(WSABASEERR+35\)) 940 SB
315 2931 940 (#define WSAEINPROGRESS          \(WSABASEERR+36\)) 940 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%Page: 127 127
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1773 117 258 (winsock.h ) 258 SB
2031 117 84 (120) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 33 33 0 0 0 27 /Courier /font0 ANSIFont font
315 267 940 (#define WSAEALREADY             \(WSABASEERR+37\)) 940 SB
315 303 940 (#define WSAENOTSOCK             \(WSABASEERR+38\)) 940 SB
315 339 940 (#define WSAEDESTADDRREQ         \(WSABASEERR+39\)) 940 SB
315 375 940 (#define WSAEMSGSIZE             \(WSABASEERR+40\)) 940 SB
315 411 940 (#define WSAEPROTOTYPE           \(WSABASEERR+41\)) 940 SB
315 447 940 (#define WSAENOPROTOOPT          \(WSABASEERR+42\)) 940 SB
315 483 940 (#define WSAEPROTONOSUPPORT      \(WSABASEERR+43\)) 940 SB
315 519 940 (#define WSAESOCKTNOSUPPORT      \(WSABASEERR+44\)) 940 SB
315 555 940 (#define WSAEOPNOTSUPP           \(WSABASEERR+45\)) 940 SB
315 591 940 (#define WSAEPFNOSUPPORT         \(WSABASEERR+46\)) 940 SB
315 627 940 (#define WSAEAFNOSUPPORT         \(WSABASEERR+47\)) 940 SB
315 663 940 (#define WSAEADDRINUSE           \(WSABASEERR+48\)) 940 SB
315 699 940 (#define WSAEADDRNOTAVAIL        \(WSABASEERR+49\)) 940 SB
315 735 940 (#define WSAENETDOWN             \(WSABASEERR+50\)) 940 SB
315 771 940 (#define WSAENETUNREACH          \(WSABASEERR+51\)) 940 SB
315 807 940 (#define WSAENETRESET            \(WSABASEERR+52\)) 940 SB
315 843 940 (#define WSAECONNABORTED         \(WSABASEERR+53\)) 940 SB
315 879 940 (#define WSAECONNRESET           \(WSABASEERR+54\)) 940 SB
315 915 940 (#define WSAENOBUFS              \(WSABASEERR+55\)) 940 SB
315 951 940 (#define WSAEISCONN              \(WSABASEERR+56\)) 940 SB
315 987 940 (#define WSAENOTCONN             \(WSABASEERR+57\)) 940 SB
315 1023 940 (#define WSAESHUTDOWN            \(WSABASEERR+58\)) 940 SB
315 1059 940 (#define WSAETOOMANYREFS         \(WSABASEERR+59\)) 940 SB
315 1095 940 (#define WSAETIMEDOUT            \(WSABASEERR+60\)) 940 SB
315 1131 940 (#define WSAECONNREFUSED         \(WSABASEERR+61\)) 940 SB
315 1167 940 (#define WSAELOOP                \(WSABASEERR+62\)) 940 SB
315 1203 940 (#define WSAENAMETOOLONG         \(WSABASEERR+63\)) 940 SB
315 1239 940 (#define WSAEHOSTDOWN            \(WSABASEERR+64\)) 940 SB
315 1275 940 (#define WSAEHOSTUNREACH         \(WSABASEERR+65\)) 940 SB
315 1311 940 (#define WSAENOTEMPTY            \(WSABASEERR+66\)) 940 SB
315 1347 940 (#define WSAEPROCLIM             \(WSABASEERR+67\)) 940 SB
315 1383 940 (#define WSAEUSERS               \(WSABASEERR+68\)) 940 SB
315 1419 940 (#define WSAEDQUOT               \(WSABASEERR+69\)) 940 SB
315 1455 940 (#define WSAESTALE               \(WSABASEERR+70\)) 940 SB
315 1491 940 (#define WSAEREMOTE              \(WSABASEERR+71\)) 940 SB
315 1563 40 (/*) 40 SB
315 1599 1080 ( * Extended Windows Sockets error constant definitions) 1080 SB
315 1635 60 ( */) 60 SB
315 1671 940 (#define WSASYSNOTREADY          \(WSABASEERR+91\)) 940 SB
315 1707 940 (#define WSAVERNOTSUPPORTED      \(WSABASEERR+92\)) 940 SB
315 1743 940 (#define WSANOTINITIALISED       \(WSABASEERR+93\)) 940 SB
315 1815 40 (/*) 40 SB
315 1851 1240 ( * Error return codes from gethostbyname\(\) and gethostbyaddr\(\)) 1240 SB
315 1887 1120 ( * \(when using the resolver\). Note that these errors are) 1120 SB
315 1923 1200 ( * retrieved via WSAGetLastError\(\) and must therefore follow) 1200 SB
315 1959 1140 ( * the rules for avoiding clashes with error numbers from) 1140 SB
315 1995 1140 ( * specific implementations or language run-time systems.) 1140 SB
315 2031 1160 ( * For this reason the codes are based at WSABASEERR+1001.) 1160 SB
315 2067 1060 ( * Note also that [WSA]NO_ADDRESS is defined only for) 1060 SB
315 2103 520 ( * compatibility purposes.) 520 SB
315 2139 60 ( */) 60 SB
315 2211 820 (#define h_errno         WSAGetLastError\(\)) 820 SB
315 2283 840 (/* Authoritative Answer: Host not found */) 840 SB
315 2319 980 (#define WSAHOST_NOT_FOUND       \(WSABASEERR+1001\)) 980 SB
315 2355 980 (#define HOST_NOT_FOUND          WSAHOST_NOT_FOUND) 980 SB
315 2427 1080 (/* Non-Authoritative: Host not found, or SERVERFAIL */) 1080 SB
315 2463 980 (#define WSATRY_AGAIN            \(WSABASEERR+1002\)) 980 SB
315 2499 880 (#define TRY_AGAIN               WSATRY_AGAIN) 880 SB
315 2571 1080 (/* Non recoverable errors, FORMERR, REFUSED, NOTIMP */) 1080 SB
315 2607 980 (#define WSANO_RECOVERY          \(WSABASEERR+1003\)) 980 SB
315 2643 920 (#define NO_RECOVERY             WSANO_RECOVERY) 920 SB
315 2715 1000 (/* Valid name, no data record of requested type */) 1000 SB
315 2751 980 (#define WSANO_DATA              \(WSABASEERR+1004\)) 980 SB
315 2787 840 (#define NO_DATA                 WSANO_DATA) 840 SB
315 2859 720 (/* no address, look for MX record */) 720 SB
315 2895 840 (#define WSANO_ADDRESS           WSANO_DATA) 840 SB
315 2931 900 (#define NO_ADDRESS              WSANO_ADDRESS) 900 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%Page: 128 128
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1773 117 258 (winsock.h ) 258 SB
2031 117 84 (121) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 33 33 0 0 0 27 /Courier /font0 ANSIFont font
315 303 40 (/*) 40 SB
315 339 1420 ( * Windows Sockets errors redefined as regular Berkeley error constants) 1420 SB
315 375 60 ( */) 60 SB
315 411 920 (#define EWOULDBLOCK             WSAEWOULDBLOCK) 920 SB
315 447 920 (#define EINPROGRESS             WSAEINPROGRESS) 920 SB
315 483 860 (#define EALREADY                WSAEALREADY) 860 SB
315 519 860 (#define ENOTSOCK                WSAENOTSOCK) 860 SB
315 555 940 (#define EDESTADDRREQ            WSAEDESTADDRREQ) 940 SB
315 591 860 (#define EMSGSIZE                WSAEMSGSIZE) 860 SB
315 627 900 (#define EPROTOTYPE              WSAEPROTOTYPE) 900 SB
315 663 920 (#define ENOPROTOOPT             WSAENOPROTOOPT) 920 SB
315 699 1000 (#define EPROTONOSUPPORT         WSAEPROTONOSUPPORT) 1000 SB
315 735 1000 (#define ESOCKTNOSUPPORT         WSAESOCKTNOSUPPORT) 1000 SB
315 771 900 (#define EOPNOTSUPP              WSAEOPNOTSUPP) 900 SB
315 807 940 (#define EPFNOSUPPORT            WSAEPFNOSUPPORT) 940 SB
315 843 940 (#define EAFNOSUPPORT            WSAEAFNOSUPPORT) 940 SB
315 879 900 (#define EADDRINUSE              WSAEADDRINUSE) 900 SB
315 915 960 (#define EADDRNOTAVAIL           WSAEADDRNOTAVAIL) 960 SB
315 951 860 (#define ENETDOWN                WSAENETDOWN) 860 SB
315 987 920 (#define ENETUNREACH             WSAENETUNREACH) 920 SB
315 1023 880 (#define ENETRESET               WSAENETRESET) 880 SB
315 1059 940 (#define ECONNABORTED            WSAECONNABORTED) 940 SB
315 1095 900 (#define ECONNRESET              WSAECONNRESET) 900 SB
315 1131 840 (#define ENOBUFS                 WSAENOBUFS) 840 SB
315 1167 840 (#define EISCONN                 WSAEISCONN) 840 SB
315 1203 860 (#define ENOTCONN                WSAENOTCONN) 860 SB
315 1239 880 (#define ESHUTDOWN               WSAESHUTDOWN) 880 SB
315 1275 940 (#define ETOOMANYREFS            WSAETOOMANYREFS) 940 SB
315 1311 880 (#define ETIMEDOUT               WSAETIMEDOUT) 880 SB
315 1347 940 (#define ECONNREFUSED            WSAECONNREFUSED) 940 SB
315 1383 800 (#define ELOOP                   WSAELOOP) 800 SB
315 1419 940 (#define ENAMETOOLONG            WSAENAMETOOLONG) 940 SB
315 1455 880 (#define EHOSTDOWN               WSAEHOSTDOWN) 880 SB
315 1491 940 (#define EHOSTUNREACH            WSAEHOSTUNREACH) 940 SB
315 1527 880 (#define ENOTEMPTY               WSAENOTEMPTY) 880 SB
315 1563 860 (#define EPROCLIM                WSAEPROCLIM) 860 SB
315 1599 820 (#define EUSERS                  WSAEUSERS) 820 SB
315 1635 820 (#define EDQUOT                  WSAEDQUOT) 820 SB
315 1671 820 (#define ESTALE                  WSAESTALE) 820 SB
315 1707 840 (#define EREMOTE                 WSAEREMOTE) 840 SB
315 1779 640 (/* Socket function prototypes */) 640 SB
315 1851 360 (#ifdef __cplusplus) 360 SB
/fm 256 def
2 35 277 1851 B
1 F
n
315 1887 240 (extern "C" {) 240 SB
/fm 256 def
2 35 277 1887 B
1 F
n
315 1923 120 (#endif) 120 SB
/fm 256 def
2 35 277 1923 B
1 F
n
315 1995 1240 (SOCKET PASCAL FAR accept \(SOCKET s, struct sockaddr FAR *addr,) 1240 SB
315 2031 880 (                          int FAR *addrlen\);) 880 SB
315 2103 620 (int PASCAL FAR bind \(SOCKET s, ) 620 SB
935 2103 120 (const ) 120 SB
1055 2103 800 (struct sockaddr FAR *addr, int namelen\);) 800 SB
/fm 256 def
2 35 277 2103 B
1 F
n
315 2175 760 (int PASCAL FAR closesocket \(SOCKET s\);) 760 SB
315 2247 680 (int PASCAL FAR connect \(SOCKET s, ) 680 SB
995 2247 120 (const ) 120 SB
1115 2247 800 (struct sockaddr FAR *name, int namelen\);) 800 SB
/fm 256 def
2 35 277 2247 B
1 F
n
315 2319 1320 (int PASCAL FAR ioctlsocket \(SOCKET s, long cmd, u_long FAR *argp\);) 1320 SB
315 2391 1280 (int PASCAL FAR getpeername \(SOCKET s, struct sockaddr FAR *name,) 1280 SB
315 2427 940 (                            int FAR * namelen\);) 940 SB
315 2499 1280 (int PASCAL FAR getsockname \(SOCKET s, struct sockaddr FAR *name,) 1280 SB
315 2535 940 (                            int FAR * namelen\);) 940 SB
315 2607 1200 (int PASCAL FAR getsockopt \(SOCKET s, int level, int optname,) 1200 SB
315 2643 1260 (                           char FAR * optval, int FAR *optlen\);) 1260 SB
315 2715 840 (u_long PASCAL FAR htonl \(u_long hostlong\);) 840 SB
315 2787 900 (u_short PASCAL FAR htons \(u_short hostshort\);) 900 SB
315 2859 720 (unsigned long PASCAL FAR inet_addr \() 720 SB
1035 2859 120 (const ) 120 SB
1155 2859 280 (char FAR * cp\)) 280 SB
1435 2859 20 (;) 20 SB
/fm 256 def
2 35 277 2859 B
1 F
n
315 2931 1040 (char FAR * PASCAL FAR inet_ntoa \(struct in_addr in\);) 1040 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%Page: 129 129
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1773 117 258 (winsock.h ) 258 SB
2031 117 84 (122) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 33 33 0 0 0 27 /Courier /font0 ANSIFont font
315 303 920 (int PASCAL FAR listen \(SOCKET s, int backlog\);) 920 SB
315 375 820 (u_long PASCAL FAR ntohl \(u_long netlong\);) 820 SB
315 447 880 (u_short PASCAL FAR ntohs \(u_short netshort\);) 880 SB
315 519 1340 (int PASCAL FAR recv \(SOCKET s, char FAR * buf, int len, int flags\);) 1340 SB
315 591 1400 (int PASCAL FAR recvfrom \(SOCKET s, char FAR * buf, int len, int flags,) 1400 SB
315 627 1420 (                         struct sockaddr FAR *from, int FAR * fromlen\);) 1420 SB
315 699 1480 (int PASCAL FAR select \(int nfds, fd_set FAR *readfds, fd_set FAR *writefds) 1480 SB
1795 699 20 (,) 20 SB
/fm 256 def
2 35 277 699 B
1 F
n
315 735 920 (                       fd_set FAR *exceptfds, ) 920 SB
1235 735 120 (const ) 120 SB
1355 735 580 (struct timeval FAR *timeout\);) 580 SB
/fm 256 def
2 35 277 735 B
1 F
n
315 807 620 (int PASCAL FAR send \(SOCKET s, ) 620 SB
935 807 120 (const ) 120 SB
1055 807 720 (char FAR * buf, int len, int flags\);) 720 SB
/fm 256 def
2 35 277 807 B
1 F
n
315 879 660 (int PASCAL FAR sendto \(SOCKET s, ) 660 SB
975 879 120 (const ) 120 SB
1095 879 700 (char FAR * buf, int len, int flags,) 700 SB
/fm 256 def
2 35 277 879 B
1 F
n
315 915 460 (                       ) 460 SB
775 915 120 (const ) 120 SB
895 915 720 (struct sockaddr FAR *to, int tolen\);) 720 SB
/fm 256 def
2 35 277 915 B
1 F
n
315 987 1200 (int PASCAL FAR setsockopt \(SOCKET s, int level, int optname,) 1200 SB
315 1023 540 (                           ) 540 SB
855 1023 120 (const ) 120 SB
975 1023 620 (char FAR * optval, int optlen\);) 620 SB
/fm 256 def
2 35 277 1023 B
1 F
n
315 1095 880 (int PASCAL FAR shutdown \(SOCKET s, int how\);) 880 SB
315 1167 1160 (SOCKET PASCAL FAR socket \(int af, int type, int protocol\);) 1160 SB
315 1239 680 (/* Database function prototypes */) 680 SB
315 1311 920 (struct hostent FAR * PASCAL FAR gethostbyaddr\() 920 SB
1235 1311 120 (const ) 120 SB
1355 1311 320 (char FAR * addr,) 320 SB
/fm 256 def
2 35 277 1311 B
1 F
n
315 1347 1300 (                                              int len, int type\);) 1300 SB
315 1419 920 (struct hostent FAR * PASCAL FAR gethostbyname\() 920 SB
1235 1419 120 (const ) 120 SB
1355 1419 340 (char FAR * name\);) 340 SB
/fm 256 def
2 35 277 1419 B
1 F
n
315 1491 1140 (int PASCAL FAR gethostname \(char FAR * name, int namelen\)) 1140 SB
1455 1491 20 (;) 20 SB
/fm 256 def
2 35 277 1491 B
1 F
n
315 1563 1120 (struct servent FAR * PASCAL FAR getservbyport\(int port, ) 1120 SB
1435 1563 120 (const ) 120 SB
1555 1563 360 (char FAR * proto\);) 360 SB
/fm 256 def
2 35 277 1563 B
1 F
n
315 1635 920 (struct servent FAR * PASCAL FAR getservbyname\() 920 SB
1235 1635 120 (const ) 120 SB
1355 1635 320 (char FAR * name,) 320 SB
/fm 256 def
2 35 277 1635 B
1 F
n
315 1671 920 (                                              ) 920 SB
1235 1671 120 (const ) 120 SB
1355 1671 360 (char FAR * proto\);) 360 SB
/fm 256 def
2 35 277 1671 B
1 F
n
315 1743 1220 (struct protoent FAR * PASCAL FAR getprotobynumber\(int proto\);) 1220 SB
315 1815 960 (struct protoent FAR * PASCAL FAR getprotobyname\() 960 SB
1275 1815 120 (const ) 120 SB
1395 1815 340 (char FAR * name\);) 340 SB
/fm 256 def
2 35 277 1815 B
1 F
n
315 1887 1060 (/* Microsoft Windows Extension function prototypes */) 1060 SB
315 1959 1400 (int PASCAL FAR WSAStartup\(WORD wVersionRequired, LPWSADATA lpWSAData\);) 1400 SB
315 2031 640 (int PASCAL FAR WSACleanup\(void\);) 640 SB
315 2103 880 (void PASCAL FAR WSASetLastError\(int iError\);) 880 SB
315 2175 740 (int PASCAL FAR WSAGetLastError\(void\);) 740 SB
315 2247 720 (BOOL PASCAL FAR WSAIsBlocking\(void\);) 720 SB
315 2319 860 (int PASCAL FAR WSAUnhookBlockingHook\(void\);) 860 SB
315 2391 1180 (FARPROC PASCAL FAR WSASetBlockingHook\(FARPROC lpBlockFunc\);) 1180 SB
315 2463 860 (int PASCAL FAR WSACancelBlockingCall\(void\);) 860 SB
315 2535 1240 (HANDLE PASCAL FAR WSAAsyncGetServByName\(HWND hWnd, u_int wMsg,) 1240 SB
315 2571 800 (                                        ) 800 SB
1115 2571 120 (const ) 120 SB
1235 2571 320 (char FAR * name,) 320 SB
/fm 256 def
2 35 277 2571 B
1 F
n
315 2607 920 (                                        const ) 920 SB
1235 2607 340 (char FAR * proto,) 340 SB
/fm 256 def
2 35 277 2607 B
1 F
n
315 2643 1360 (                                        char FAR * buf, int buflen\);) 1360 SB
315 2715 1440 (HANDLE PASCAL FAR WSAAsyncGetServByPort\(HWND hWnd, u_int wMsg, int port,) 1440 SB
315 2751 800 (                                        ) 800 SB
1115 2751 120 (const ) 120 SB
1235 2751 660 (char FAR * proto, char FAR * buf,) 660 SB
/fm 256 def
2 35 277 2751 B
1 F
n
315 2787 1040 (                                        int buflen\);) 1040 SB
315 2859 1260 (HANDLE PASCAL FAR WSAAsyncGetProtoByName\(HWND hWnd, u_int wMsg,) 1260 SB
315 2895 820 (                                         ) 820 SB
1135 2895 120 (const ) 120 SB
1255 2895 640 (char FAR * name, char FAR * buf,) 640 SB
/fm 256 def
2 35 277 2895 B
1 F
n
315 2931 1060 (                                         int buflen\);) 1060 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%Page: 130 130
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1773 117 258 (winsock.h ) 258 SB
2031 117 84 (123) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 33 33 0 0 0 27 /Courier /font0 ANSIFont font
315 303 1300 (HANDLE PASCAL FAR WSAAsyncGetProtoByNumber\(HWND hWnd, u_int wMsg,) 1300 SB
315 339 1400 (                                           int number, char FAR * buf,) 1400 SB
315 375 1100 (                                           int buflen\);) 1100 SB
315 447 1240 (HANDLE PASCAL FAR WSAAsyncGetHostByName\(HWND hWnd, u_int wMsg,) 1240 SB
315 483 800 (                                        ) 800 SB
1115 483 120 (const ) 120 SB
1235 483 640 (char FAR * name, char FAR * buf,) 640 SB
/fm 256 def
2 35 277 483 B
1 F
n
315 519 1040 (                                        int buflen\);) 1040 SB
315 591 1240 (HANDLE PASCAL FAR WSAAsyncGetHostByAddr\(HWND hWnd, u_int wMsg,) 1240 SB
315 627 800 (                                        ) 800 SB
1115 627 120 (const ) 120 SB
1235 627 700 (char FAR * addr, int len, int type,) 700 SB
/fm 256 def
2 35 277 627 B
1 F
n
315 663 800 (                                        ) 800 SB
1115 663 120 (const ) 120 SB
1235 663 560 (char FAR * buf, int buflen\);) 560 SB
/fm 256 def
2 35 277 663 B
1 F
n
315 735 1240 (int PASCAL FAR WSACancelAsyncRequest\(HANDLE hAsyncTaskHandle\);) 1240 SB
315 807 1240 (int PASCAL FAR WSAAsyncSelect\(SOCKET s, HWND hWnd, u_int wMsg,) 1240 SB
315 843 880 (                               long lEvent\);) 880 SB
315 915 360 (#ifdef __cplusplus) 360 SB
/fm 256 def
2 35 277 915 B
1 F
n
315 951 20 (}) 20 SB
/fm 256 def
2 35 277 951 B
1 F
n
315 987 120 (#endif) 120 SB
/fm 256 def
2 35 277 987 B
1 F
n
315 1059 860 (/* Microsoft Windows Extended data types */) 860 SB
315 1095 660 (typedef struct sockaddr SOCKADDR;) 660 SB
315 1131 700 (typedef struct sockaddr *PSOCKADDR;) 700 SB
315 1167 800 (typedef struct sockaddr FAR *LPSOCKADDR;) 800 SB
315 1239 780 (typedef struct sockaddr_in SOCKADDR_IN;) 780 SB
315 1275 820 (typedef struct sockaddr_in *PSOCKADDR_IN;) 820 SB
315 1311 920 (typedef struct sockaddr_in FAR *LPSOCKADDR_IN;) 920 SB
315 1383 580 (typedef struct linger LINGER;) 580 SB
315 1419 620 (typedef struct linger *PLINGER;) 620 SB
315 1455 720 (typedef struct linger FAR *LPLINGER;) 720 SB
315 1527 620 (typedef struct in_addr IN_ADDR;) 620 SB
315 1563 660 (typedef struct in_addr *PIN_ADDR;) 660 SB
315 1599 760 (typedef struct in_addr FAR *LPIN_ADDR;) 760 SB
315 1671 580 (typedef struct fd_set FD_SET;) 580 SB
315 1707 620 (typedef struct fd_set *PFD_SET;) 620 SB
315 1743 720 (typedef struct fd_set FAR *LPFD_SET;) 720 SB
315 1815 620 (typedef struct hostent HOSTENT;) 620 SB
315 1851 660 (typedef struct hostent *PHOSTENT;) 660 SB
315 1887 760 (typedef struct hostent FAR *LPHOSTENT;) 760 SB
315 1959 620 (typedef struct servent SERVENT;) 620 SB
315 1995 660 (typedef struct servent *PSERVENT;) 660 SB
315 2031 760 (typedef struct servent FAR *LPSERVENT;) 760 SB
315 2103 660 (typedef struct protoent PROTOENT;) 660 SB
315 2139 700 (typedef struct protoent *PPROTOENT;) 700 SB
315 2175 800 (typedef struct protoent FAR *LPPROTOENT;) 800 SB
315 2247 600 (typedef struct timeval TIMEVAL) 600 SB
915 2247 20 (;) 20 SB
/fm 256 def
2 35 277 2247 B
1 F
n
315 2283 640 (typedef struct timeval *PTIMEVAL) 640 SB
955 2283 20 (;) 20 SB
/fm 256 def
2 35 277 2283 B
1 F
n
315 2319 740 (typedef struct timeval FAR *LPTIMEVAL) 740 SB
1055 2319 20 (;) 20 SB
/fm 256 def
2 35 277 2319 B
1 F
n
315 2391 40 (/*) 40 SB
315 2427 1160 ( * Windows message parameter composition and decomposition) 1160 SB
315 2463 200 ( * macros.) 200 SB
315 2499 40 ( *) 40 SB
315 2535 1560 ( * WSAMAKEASYNCREPLY is intended for use by the Windows Sockets implementation) 1560 SB
315 2571 1100 ( * when constructing the response to a WSAAsyncGetXByY\() 1100 SB
1415 2571 200 (\) routine.) 200 SB
/fm 256 def
2 35 277 2571 B
1 F
n
315 2607 60 ( */) 60 SB
315 2643 1320 (#define WSAMAKEASYNCREPLY\(buflen,error\)     MAKELONG\(buflen,error\)) 1320 SB
315 2679 40 (/*) 40 SB
315 2715 1580 ( * WSAMAKESELECTREPLY is intended for use by the Windows Sockets implementation) 1580 SB
315 2751 1060 ( * when constructing the response to WSAAsyncSelect\(\)) 1060 SB
1375 2751 20 (.) 20 SB
/fm 256 def
2 35 277 2751 B
1 F
n
315 2787 60 ( */) 60 SB
315 2823 1300 (#define WSAMAKESELECTREPLY\(event,error\)     MAKELONG\(event,error\)) 1300 SB
315 2859 40 (/*) 40 SB
315 2895 1500 ( * WSAGETASYNCBUFLEN is intended for use by the Windows Sockets application) 1500 SB
315 2931 1260 ( * to extract the buffer length from the lParam in the response) 1260 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%Page: 131 131
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1773 117 258 (winsock.h ) 258 SB
2031 117 84 (124) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 33 33 0 0 0 27 /Courier /font0 ANSIFont font
315 267 420 ( * to a WSAGetXByY\(\).) 420 SB
315 303 60 ( */) 60 SB
315 339 1160 (#define WSAGETASYNCBUFLEN\(lParam\)           LOWORD\(lParam\)) 1160 SB
315 375 40 (/*) 40 SB
315 411 1480 ( * WSAGETASYNCERROR is intended for use by the Windows Sockets application) 1480 SB
315 447 1200 ( * to extract the error code from the lParam in the response) 1200 SB
315 483 420 ( * to a WSAGetXByY\(\).) 420 SB
315 519 60 ( */) 60 SB
315 555 1160 (#define WSAGETASYNCERROR\(lParam\)            HIWORD\(lParam\)) 1160 SB
315 591 40 (/*) 40 SB
315 627 1500 ( * WSAGETSELECTEVENT is intended for use by the Windows Sockets application) 1500 SB
315 663 1200 ( * to extract the event code from the lParam in the response) 1200 SB
315 699 500 ( * to a WSAAsyncSelect\(\).) 500 SB
315 735 60 ( */) 60 SB
315 771 1160 (#define WSAGETSELECTEVENT\(lParam\)           LOWORD\(lParam\)) 1160 SB
315 807 40 (/*) 40 SB
315 843 1500 ( * WSAGETSELECTERROR is intended for use by the Windows Sockets application) 1500 SB
315 879 1200 ( * to extract the error code from the lParam in the response) 1200 SB
315 915 500 ( * to a WSAAsyncSelect\(\).) 500 SB
315 951 60 ( */) 60 SB
315 987 1160 (#define WSAGETSELECTERROR\(lParam\)           HIWORD\(lParam\)) 1160 SB
315 1059 520 (#endif  /* _WINSOCKAPI_ */) 520 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%Page: 132 132
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
800 117 1231 (Appendix B: Notes for Windows Sockets Suppliers ) 1231 SB
2031 117 84 (125) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 50 50 1 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 317 1228 (Appendix B.  Notes for Windows Sockets Suppliers) 1228 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 400 387 (B.1 Introduction) 387 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 461 1744 (A Windows Sockets implementation must implement ALL the functionality described in the Windows) 1744 SB
315 511 1256 (Sockets documentation.  Validation of compliance is discussed in section ) 1256 SB
1571 511 60 (B.8) 60 SB
1631 511 11 (.) 11 SB
315 612 490 (Windows Sockets Version 1.) 490 SB
805 612 21 (1) 21 SB
826 612 1167 ( implementations must support both TCP and UDP type sockets.  An) 1167 SB
/fm 256 def
2 49 277 609 B
1 F
n
315 662 1573 (implementation may support raw sockets \(of type SOCK_RAW\), but their use is deprecated.) 1573 SB
315 762 1722 (Certain APIs documented above have special notes for Windows Sockets implementors.  A Windows) 1722 SB
315 812 1693 (Sockets implementation should pay special attention to conforming to the API as documented.  The) 1693 SB
315 862 998 (Special Notes are provided for assistance and clarification.) 998 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 985 842 (B.2 Windows Sockets Components) 842 SB
315 1043 772 (B.2.1 Development Components) 772 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 1104 1790 (The Windows Sockets development components for use by Windows Sockets application developers will) 1790 SB
315 1154 1772 (be provided by each Windows Sockets supplier.  These Windows Sockets development components are:) 1772 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
315 1254 197 (Component) 197 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
512 1254 352 (                                ) 352 SB
864 1254 55 (     ) 55 SB
915 1254 197 (Description) 197 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 1304 575 (Windows Sockets Documentation) 575 SB
915 1304 253 (This document) 253 SB
315 1354 342 (WINSOCK.LIB file) 342 SB
915 1354 645 (Windows Sockets API Import Library) 645 SB
315 1404 304 (WINSOCK.H file) 304 SB
915 1404 513 (Windows Sockets Header File) 513 SB
315 1454 249 (NETDB.H file) 249 SB
915 1454 572 (Berkeley Compatible Header File) 572 SB
315 1504 328 (ARPA/INET.H file) 328 SB
915 1504 572 (Berkeley Compatible Header File) 572 SB
315 1554 300 (SYS/TIME.H file) 300 SB
915 1554 572 (Berkeley Compatible Header File) 572 SB
315 1604 360 (SYS/SOCKET.H file) 360 SB
915 1604 572 (Berkeley Compatible Header File) 572 SB
315 1654 343 (NETINET/IN.H file) 343 SB
915 1654 572 (Berkeley Compatible Header File) 572 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 1751 685 (B.2.2 Run Time Components) 685 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 1812 1234 (The run time component provided by each Windows Sockets supplier is:) 1234 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
315 1912 197 (Component) 197 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
512 1912 352 (                                ) 352 SB
864 1912 55 (     ) 55 SB
915 1912 197 (Description) 197 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 1962 288 (WINSOCK.DLL) 288 SB
915 1962 829 (The Windows Sockets API implementation DLL) 829 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 2084 1091 (B.3 Multithreadedness and blocking routines.) 1091 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 2145 1572 (Data areas returned by, for example, the getXbyY\(\) routines MUST be on a per thread basis.) 1572 SB
315 2245 1733 (Note that an application MUST be prevented from making multiple nested Windows Sockets function) 1733 SB
315 2295 1735 (calls.  Only one outstanding function call will be allowed for a particular task.  Any Windows Sockets) 1735 SB
315 2345 1674 (call performed when an existing blocking call is already outstanding will fail with an error code of) 1674 SB
315 2395 1694 (WSAEINPROGRESS.  There are two exceptions to this restriction: WSACancelBlockingCall\(\) and) 1694 SB
315 2445 1695 (WSAIsBlocking\(\) may be called at any time.  Windows Sockets suppliers should note that although) 1695 SB
315 2495 1716 (preliminary drafts of this specification indicated that the restriction only applied to blocking function) 1716 SB
315 2545 1767 (calls, and that it would be permissible to make non-blocking calls while a blocking call was in progress,) 1767 SB
315 2595 360 (this is no longer true.) 360 SB
315 2696 1749 (Regarding the implementation of blocking routines, the solution in Windows Sockets is to simulate the) 1749 SB
315 2746 1695 (blocking mechanism by having each routine call PeekMessage\(\) as it waits for the completion of its) 1695 SB
315 2796 1630 (operation.  In anticipation of this, the function WSASetBlockingHook\(\) is provided to allow the) 1630 SB
315 2846 1690 (programmer to define a special routine to be called instead of the default PeekMessage\(\) loop.  The) 1690 SB
315 2896 949 (blocking hook functions are discussed in more detail in ) 949 SB
1264 2896 106 (4.3.13) 106 SB
1370 2896 22 (, ) 22 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1392 2893 436 (WSASetBlockingHook\(\)) 436 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1828 2896 11 (.) 11 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 133 133
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
800 117 1231 (Appendix B: Notes for Windows Sockets Suppliers ) 1231 SB
2031 117 84 (126) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
315 343 445 (B.4 Database Files) 445 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 404 488 (The database routines in the ) 488 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
803 401 186 (getXbyY\(\)) 186 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
989 404 147 ( family \() 147 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
1136 401 286 (gethostbyaddr\(\)) 286 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1422 404 648 (, etc.\) were originally designed \(in the) 648 SB
315 455 1763 (first Berkeley UNIX releases\) as mechanisms for looking up information in text databases.  A Windows) 1763 SB
315 505 1685 (Sockets supplier may choose to employ local files OR a name service to provide some or all of this) 1685 SB
315 555 1692 (information.  If local files exist, the format of the files must be identical to that used in BSD UNIX,) 1692 SB
315 605 808 (allowing for the differences in text file formats.) 808 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 728 331 (B.5 FD_ISSET) 331 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 789 1505 (It is necessary to implement the FD_ISSET Berkeley macro using a supporting function:) 1505 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
315 836 309 (__WSAFDIsSet\(\)) 309 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
624 839 1454 (.  It is the responsibility of a Windows Sockets implementation to make this available) 1454 SB
315 890 1750 (as part of the Windows Sockets API.  Unlike the other functions exported by a Windows Sockets DLL,) 1750 SB
315 940 1777 (however, this function is not intended to be invoked directly by Windows Sockets applications: it should) 1777 SB
315 990 1635 (be used only to support the FD_ISSET macro.  The source code for this function is listed below:) 1635 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
315 1087 175 (int FAR) 175 SB
315 1129 1000 (__WSAFDIsSet\(SOCKET fd, fd_set FAR *set\)) 1000 SB
315 1171 25 ({) 25 SB
315 1213 425 (    int i = set->) 425 SB
740 1213 75 (fd_) 75 SB
815 1213 150 (count;) 150 SB
/fm 256 def
2 41 277 1213 B
1 F
n
315 1297 375 (    while \(i--\)) 375 SB
465 1339 675 (if \(set->fd_array[i] == fd\)) 675 SB
465 1381 325 (    return 1;) 325 SB
315 1465 325 (    return 0;) 325 SB
315 1507 25 (}) 25 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 1624 381 (B.6 Error Codes) 381 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 1685 1723 (In order to avoid conflict between various compiler environments Windows Sockets implementations) 1723 SB
315 1735 1774 (MUST return the error codes listed in the API specification, using the manifest constants beginning with) 1774 SB
315 1785 1763 ("WSA".  The Berkeley-compatible error code definitions are provided solely for compatibility purposes) 1763 SB
315 1835 1041 (for applications which are being ported from other platforms.) 1041 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 1957 611 (B.7 DLL Ordinal Numbers) 611 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 2018 77 (The ) 77 SB
32 0 0 42 42 0 0 0 41 /Times-Bold /font29 ANSIFont font
392 2015 222 (winsock.def ) 222 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
614 2018 1167 (file for use by every Windows Sockets implementation is as follows.) 1167 SB
1781 2018 270 (  Ordinal values) 270 SB
/fm 256 def
2 50 277 2015 B
1 F
n
315 2069 1792 (starting at 1000 are reserved for Windows Sockets implementors to use for exporting private interfaces to) 1792 SB
/fm 256 def
2 49 277 2066 B
1 F
n
315 2119 1728 (their DLLs.  A Windows Sockets implementation must not use any ordinals 999 and below except for) 1728 SB
/fm 256 def
2 49 277 2116 B
1 F
n
315 2169 1789 (those APIs listed below.  An application which wishes to work with any Windows Sockets DLL must use) 1789 SB
/fm 256 def
2 49 277 2166 B
1 F
n
315 2219 1743 (only those routines listed below; using a private export makes an application dependent on a particular) 1743 SB
/fm 256 def
2 49 277 2216 B
1 F
n
315 2269 592 (Windows Sockets implementation.) 592 SB
/fm 256 def
2 49 277 2266 B
1 F
n
32 0 0 33 33 0 0 0 27 /Courier /font0 ANSIFont font
315 2366 20 (;) 20 SB
315 2402 540 (;         File: winsock.def) 540 SB
315 2438 600 (;       System: MS-Windows 3.x) 600 SB
315 2474 1260 (;      Summary: Module definition file for Windows Sockets DLL.) 1260 SB
315 2510 20 (;) 20 SB
315 2582 1180 (LIBRARY         WINSOCK         ; Application's module name) 1180 SB
315 2654 880 (DESCRIPTION     'BSD Socket API for Windows') 880 SB
315 2726 1420 (EXETYPE         WINDOWS         ; required for all windows applications) 1420 SB
315 2798 1440 (STUB            'WINSTUB.EXE'   ; generates error message if application) 1440 SB
315 2834 1120 (                                ; is run without Windows) 1120 SB
315 2906 1140 (;CODE can be FIXED in memory because of potential upcalls) 1140 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 134 134
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
800 117 1231 (Appendix B: Notes for Windows Sockets Suppliers ) 1231 SB
2031 117 84 (127) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 33 33 0 0 0 27 /Courier /font0 ANSIFont font
315 267 740 (CODE            PRELOAD         FIXED) 740 SB
315 339 1280 (;DATA must be SINGLE and at a FIXED location since this is a DLL) 1280 SB
315 375 1080 (DATA            PRELOAD         FIXED           SINGLE) 1080 SB
315 447 400 (HEAPSIZE        1024) 400 SB
315 483 420 (STACKSIZE       16384) 420 SB
315 555 1160 (; All functions that will be called by any Windows routine) 1160 SB
315 591 360 (; must be exported) 360 SB
675 591 920 (.  Any additional exports beyond those defined) 920 SB
/fm 256 def
2 35 277 591 B
1 F
n
315 627 940 (; here must have ordinal numbers 1000 or above.) 940 SB
/fm 256 def
2 35 277 627 B
1 F
n
315 699 140 (EXPORTS) 140 SB
315 735 820 (        accept                         @1) 820 SB
315 771 820 (        bind                           @2) 820 SB
315 807 820 (        closesocket                    @3) 820 SB
315 843 820 (        connect                        @4) 820 SB
315 879 820 (        getpeername                    @5) 820 SB
315 915 820 (        getsockname                    @6) 820 SB
315 951 820 (        getsockopt                     @7) 820 SB
315 987 820 (        htonl                          @8) 820 SB
315 1023 820 (        htons                          @9) 820 SB
315 1059 840 (        inet_addr                      @10) 840 SB
315 1095 840 (        inet_ntoa                      @11) 840 SB
315 1131 840 (        ioctlsocket                    @12) 840 SB
315 1167 840 (        listen                         @13) 840 SB
315 1203 840 (        ntohl                          @14) 840 SB
315 1239 840 (        ntohs                          @15) 840 SB
315 1275 840 (        recv                           @16) 840 SB
315 1311 840 (        recvfrom                       @17) 840 SB
315 1347 840 (        select                         @18) 840 SB
315 1383 840 (        send                           @19) 840 SB
315 1419 840 (        sendto                         @20) 840 SB
315 1455 840 (        setsockopt                     @21) 840 SB
315 1491 840 (        shutdown                       @22) 840 SB
315 1527 840 (        socket                         @23) 840 SB
315 1599 840 (        gethostbyaddr                  @51) 840 SB
315 1635 840 (        gethostbyname                  @52) 840 SB
315 1671 840 (        getprotobyname                 @53) 840 SB
315 1707 840 (        getprotobynumber               @54) 840 SB
315 1743 840 (        getservbyname                  @55) 840 SB
315 1779 840 (        getservbyport                  @56) 840 SB
315 1815 800 (        gethostname                    @) 800 SB
1115 1815 40 (57) 40 SB
/fm 256 def
2 35 277 1815 B
1 F
n
315 1887 860 (        WSAAsyncSelect                 @101) 860 SB
315 1923 860 (        WSAAsyncGetHostByAddr          @102) 860 SB
315 1959 860 (        WSAAsyncGetHostByName          @103) 860 SB
315 1995 860 (        WSAAsyncGetProtoByNumber       @104) 860 SB
315 2031 860 (        WSAAsyncGetProtoByName         @105) 860 SB
315 2067 860 (        WSAAsyncGetServByPort          @106) 860 SB
315 2103 860 (        WSAAsyncGetServByName          @107) 860 SB
315 2139 860 (        WSACancelAsyncRequest          @108) 860 SB
315 2175 860 (        WSASetBlockingHook             @109) 860 SB
315 2211 860 (        WSAUnhookBlockingHook          @110) 860 SB
315 2247 860 (        WSAGetLastError                @111) 860 SB
315 2283 860 (        WSASetLastError                @112) 860 SB
315 2319 860 (        WSACancelBlockingCall          @113) 860 SB
315 2355 860 (        WSAIsBlocking                  @114) 860 SB
315 2391 860 (        WSAStartup                     @115) 860 SB
315 2427 860 (        WSACleanup                     @116) 860 SB
315 2499 860 (        __WSAFDIsSet                   @151) 860 SB
315 2571 1180 (        WEP                            @500    RESIDENTNAME) 1180 SB
315 2643 80 (;eof) 80 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 2740 470 (B.8 Validation Suite) 470 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 2850 26 (T) 26 SB
341 2850 360 (he Windows Sockets ) 360 SB
701 2850 78 (API ) 78 SB
779 2850 72 (Test) 72 SB
851 2850 33 (er) 33 SB
884 2850 11 ( ) 11 SB
895 2850 146 (\(WSAT\)) 146 SB
1041 2850 717 ( to ensure Windows Sockets compatibility ) 717 SB
1758 2850 307 (between Windows) 307 SB
/fm 256 def
2 99 277 2798 B
1 F
n
315 2900 908 (Sockets DLL implementations is currently in beta test) 908 SB
1223 2900 120 (.  This ) 120 SB
1343 2900 69 (beta) 69 SB
1412 2900 678 ( version includes functionality testing of) 678 SB
/fm 256 def
2 49 277 2898 B
1 F
n
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica-Bold
%%+ font Times-Roman
%%Page: 135 135
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
800 117 1231 (Appendix B: Notes for Windows Sockets Suppliers ) 1231 SB
2031 117 84 (128) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 269 1508 (the Windows Sockets interface and is supported by a comprehensive scripting language.  ) 1508 SB
1823 269 289 (The final version) 289 SB
/fm 256 def
2 49 277 267 B
1 F
n
315 319 1627 (of WSAT will be available in Spring 1993.  If you wish to receive the tester or more information) 1627 SB
1942 319 116 ( on the) 116 SB
/fm 256 def
2 49 277 317 B
1 F
n
315 369 69 (beta) 69 SB
384 369 11 (,) 11 SB
395 369 614 ( send email to wsat@microsoft.com.) 614 SB
/fm 256 def
2 49 277 367 B
1 F
n
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Roman
%%Page: 136 136
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1178 117 853 (Appendix C: For Further Reference ) 853 SB
2031 117 84 (129) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 50 50 1 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 317 850 (Appendix C.  For Further Reference) 850 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 428 1769 (This specification is intended to cover the Windows Sockets interface to TCP/IP in detail.  Many details) 1769 SB
315 478 1599 (of TCP/IP and Windows, however, are intentionally omitted in the interest of brevity, and this) 1599 SB
315 528 1777 (specification often assumes background knowledge of these topics.  For more information, the following) 1777 SB
315 578 452 (references may be helpful:) 452 SB
315 678 317 (Braden, R.[1989], ) 317 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
632 677 1162 (RFC 1122, Requirements for Internet Hosts--Communication Layers) 1162 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1794 678 154 (, Internet) 154 SB
615 730 418 (Engineering Task Force.) 418 SB
315 830 323 (Comer, D. [1991], ) 323 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
638 829 1365 (Internetworking with TCP/IP Volume I: Principles, Protocols, and Architecture,) 1365 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
615 882 772 (Prentice Hall, Englewood Cliffs, New Jersey.) 772 SB
315 982 600 (Comer, D. and Stevens, D. [1991], ) 600 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
915 981 1191 (Internetworking with TCP/IP Volume II: Design, Implementation, and) 1191 SB
615 1033 174 (Internals, ) 174 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
789 1034 772 (Prentice Hall, Englewood Cliffs, New Jersey.) 772 SB
315 1136 600 (Comer, D. and Stevens, D. [1991], ) 600 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
915 1135 1188 (Internetworking with TCP/IP Volume III: Client-Server Programming) 1188 SB
615 1187 310 (and Applications, ) 310 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
925 1188 772 (Prentice Hall, Englewood Cliffs, New Jersey.) 772 SB
315 1290 291 (Leffler, S. et al., ) 291 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
606 1289 1027 (An Advanced 4.3BSD Interprocess Communication Tutorial.) 1027 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 1392 333 (Petzold, C. [1992], ) 333 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
648 1391 486 (Programming Windows 3.1, ) 486 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1134 1392 688 (Microsoft Press, Redmond, Washington.) 688 SB
315 1494 388 (Stevens, W.R. [1990], ) 388 SB
32 0 0 42 42 0 0 0 39 /Times-Italic /font31 ANSIFont font
703 1493 504 (Unix Network Programming, ) 504 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1207 1494 772 (Prentice Hall, Englewood Cliffs, New Jersey.) 772 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 137 137
%%PageResources: (atend)
SS
0 0 20 11 809 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
1121 117 910 (Appendix D: Background Information ) 910 SB
2031 117 84 (130) 84 SB
255 255 255 fC
/fm 256 def
1811 3 309 175 B
1 F
n
0 0 0 fC
/fm 256 def
1811 5 309 179 B
1 F
n
/fm 256 def
1811 5 309 185 B
1 F
n
32 0 0 50 50 1 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 317 907 (Appendix D.  Background Information) 907 SB
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 400 896 (D.1 Legal Status of Windows Sockets) 896 SB
/fm 256 def
2 82 277 375 B
1 F
n
/fm 256 def
2 50 277 458 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 511 1743 (The copyright for the Windows Sockets specification is owned by the specification authors listed on the) 1743 SB
/fm 256 def
2 49 277 509 B
1 F
n
315 561 1765 (title page.  Permission is granted to redistribute this specification in any form, provided that the contents) 1765 SB
/fm 256 def
2 49 277 559 B
1 F
n
315 611 1701 (of the specification are not modified.  Windows Sockets implementors are encouraged to include this) 1701 SB
/fm 256 def
2 49 277 609 B
1 F
n
315 661 800 (specification with their product documentation.) 800 SB
/fm 256 def
2 49 277 659 B
1 F
n
/fm 256 def
2 49 277 709 B
1 F
n
315 761 1761 (The Windows Sockets logo on the title page of this document is meant for use on both Windows Sockets) 1761 SB
/fm 256 def
2 49 277 759 B
1 F
n
315 811 1627 (implementations and for applications that use the Windows Sockets interface.  Use of the logo is) 1627 SB
/fm 256 def
2 49 277 809 B
1 F
n
315 861 1387 (encouraged on packaging, documentation, collateral, and advertising.  The logo is) 1387 SB
/fm 256 def
2 49 277 859 B
1 F
n
315 911 1765 (available on microdyne.com in pub/winsock as winsock.bmp.  The suggested color for the logo's title bar) 1765 SB
/fm 256 def
2 49 277 909 B
1 F
n
315 961 1083 (is blue, the electrical socket grey, and the text and outline black.) 1083 SB
/fm 256 def
2 49 277 959 B
1 F
n
/fm 256 def
2 49 277 1009 B
1 F
n
/fm 256 def
2 49 277 1059 B
1 F
n
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
315 1134 1159 (D.2 The Story Behind the Windows Sockets Icon) 1159 SB
/fm 256 def
2 82 277 1109 B
1 F
n
/fm 256 def
2 49 277 1192 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 1245 310 (\(by Alistair Banks) 310 SB
625 1245 403 (, Microsoft Corporation) 403 SB
1028 1245 14 (\)) 14 SB
/fm 256 def
2 49 277 1242 B
1 F
n
/fm 256 def
2 49 277 1292 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
315 1344 1791 (We thought we'd do a "Wind Sock" at one stage--but you try to get that into 32x32 bits! It would have had) 1791 SB
/fm 256 def
2 49 277 1342 B
1 F
n
315 1394 832 (to look wavy and colorful, and... well, it just didn) 832 SB
1147 1394 8 (') 8 SB
1155 1394 891 (t work. Also, our graphics designers have "opinions") 891 SB
/fm 256 def
2 49 277 1392 B
1 F
n
315 1444 1768 (about the icons truly representing what they are--people would have thought this was "The colorful wavy) 1768 SB
/fm 256 def
2 49 277 1442 B
1 F
n
315 1494 390 (tube specification 1.0!") 390 SB
/fm 256 def
2 49 277 1492 B
1 F
n
/fm 256 def
2 49 277 1542 B
1 F
n
315 1594 1771 (I tried to explain "API" "Programming Interface" to the artist--we ended up with toolbox icons with little) 1771 SB
/fm 256 def
2 49 277 1592 B
1 F
n
315 1644 259 (flying windows) 259 SB
/fm 256 def
2 49 277 1642 B
1 F
n
/fm 256 def
2 49 277 1692 B
1 F
n
315 1744 1784 (Then we came to realise that we should be going after the shortened form of the name, rather the name in) 1784 SB
/fm 256 def
2 49 277 1742 B
1 F
n
315 1794 1752 (full... Windows Sockets... And so we went for that - so she drew \(now remember I'm English and you're) 1752 SB
/fm 256 def
2 49 277 1792 B
1 F
n
315 1844 324 (probably American) 324 SB
639 1844 14 (\)) 14 SB
653 1844 355 ( "Windows Spanner") 355 SB
1008 1844 11 (,) 11 SB
1019 1844 30 ( a) 30 SB
1049 1844 11 (.) 11 SB
1060 1844 21 (k) 21 SB
1081 1844 11 (.) 11 SB
1092 1844 19 (a) 19 SB
1111 1844 11 (.) 11 SB
1122 1844 146 ( a socket) 146 SB
1268 1844 11 ( ) 11 SB
1279 1844 296 (wrench.  In the U) 296 SB
1575 1844 11 (.) 11 SB
1586 1844 23 (S) 23 SB
1609 1844 11 (.) 11 SB
1620 1844 409 ( you'd have been talking) 409 SB
/fm 256 def
2 49 277 1842 B
1 F
n
315 1894 1387 (about the "Windows Socket spec" OK, but in England that would have been transl) 1387 SB
1702 1894 19 (a) 19 SB
1721 1894 284 (ted as "Windows) 284 SB
/fm 256 def
2 49 277 1892 B
1 F
n
315 1944 1299 (Spanner Spec 1.0" - so we went to Electrical sockets - well the first ones cam) 1299 SB
1614 1944 18 (e) 18 SB
1632 1944 464 ( out looking like "Windows) 464 SB
/fm 256 def
2 49 277 1942 B
1 F
n
315 1994 360 (Pignose Spec 1.0"!!!!) 360 SB
/fm 256 def
2 49 277 1992 B
1 F
n
/fm 256 def
2 49 277 2042 B
1 F
n
315 2094 1741 (So how do you use 32x32, get an international electrical socket! You take the square type \(American &) 1741 SB
/fm 256 def
2 49 277 2092 B
1 F
n
315 2144 1556 (English OK, Europe & Australia are too rounded\)--you choose the American one, because it) 1556 SB
1871 2144 8 (') 8 SB
1879 2144 215 (s on the wall) 215 SB
/fm 256 def
2 49 277 2142 B
1 F
n
315 2194 364 (in front of you \(and it) 364 SB
679 2194 8 (') 8 SB
687 2194 1353 (s more compact \(but less safe, IMHO\) and then you turn it upside down, thereby) 1353 SB
/fm 256 def
2 49 277 2192 B
1 F
n
315 2244 500 (compromising its nationality!) 500 SB
/fm 256 def
2 49 277 2242 B
1 F
n
315 2344 693 ([IMHO = "In My Humble Opinion"--ed.]) 693 SB
/fm 256 def
2 49 277 2342 B
1 F
n
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica-Bold
%%+ font Times-Roman
%%Trailer
end
%%Pages: 137
% TrueType font name key:
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT31c26d = 098fDTimes New RomanF0000002a000001900000
%    MSTT31c27a = 098fDTimes New RomanF00000000000001900000
%    MSTT31c287 = 098fDArialF0000002a000002bc0000
%    MSTT31c296 = 098fDTimes New RomanF0000002a000002bc0000
%    MSTT31c2a3 = 098fDCourier NewF0000002a000001900000
%    MSTT31c2af = 098fDCourier NewF0000002a000002bc0000
%    MSTT31c2bb = 098fDCourier NewF00000021000001900000
%    MSTT31c2c7 = 098fDCourier NewF00000021000002bc0000
%%DocumentSuppliedResources: procset Win35Dict 3 1

%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman

%%EOF

