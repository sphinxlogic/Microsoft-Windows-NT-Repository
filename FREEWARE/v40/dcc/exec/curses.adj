/*
** "curses.h" adjustment file, 19970604 Walter Briscoe walter@wbriscoe.demon.co.uk
** Amended, 19980204/19980828 Yves Noyelle Yves.Noyelle@supelec.fr
**
** Undertested version
**
** About half of the functions declared were derived from a combination of
** their use in a program and their documentation in a man page. The rest were
** deduced purely from their description in man pages and are likely to be
** incorrect. The man pages tended not to distinguish char and char *
** The absence of ~PseudoVoid is usually an omission due to lack of time to
** complete the work.
*/

#ifndef __CURSES_ADJ
#define __CURSES_ADJ

#ifdef _lint
#include "/usr/include/curses.h"  /* For use with FlexeLint */
#endif

#ifdef __dcc
/* dcc rejects usual 1 and 0 */
#  undef FALSE
#  undef TRUE
#  define FALSE (0!=0)
#  define TRUE (0==0)
#  undef bool
#  if ! cdefined (bool)
typedef unsigned int bool;
#  endif
#endif

#define __ZCRSBASE(n,t,a) extern t n a
#define __ZCRSNO(n,t,a) __ZCRSBASE(n,t,a);
#define __ZCRSNOU(n,t,a) __ZCRSBASE(n,t,a) /*~Utility*/;
#define __ZCRSPV(n,t,a) __ZCRSBASE(n,t,a) /*~PseudoVoid*/;
#define __ZCRSPVU(n,t,a) __ZCRSBASE(n,t,a) /*~PseudoVoid*/ /*~Utility*/;

#if FALSE
__ZCRSNOU(_showstring,  int,      (int Line, int Column, int First, int Last, const char *String))
#endif
#undef addch
__ZCRSPVU(addch,        int,      (char Char) /*lint -esym(534,addch) */)
#undef addstr
__ZCRSPVU(addstr,       int,      (const char *String) /*lint -esym(534,addstr)
*/)
#if FALSE
#undef attrset /* attrset man page shows char *Attributes */
__ZCRSPVU(attrset,      int,      (unsigned long Attributes) /*lint -esym(534,attrset) */)
__ZCRSNOU(baudrate,     int,      (void))
#endif
__ZCRSPVU(box,          int,      (WINDOW *window, char VertChar, char HorChar) /* lint -esym(534,box) */)
#if FALSE
__ZCRSPVU(cbreak,       int,      (void) /*lint -esym(534,cbreak) */)
#endif
#undef clear
__ZCRSPVU(clear,        int,      (void) /*lint -esym(534,clear) */)
#undef clearok
__ZCRSPVU(clearok,      int,      (WINDOW *window, bool Flag) /*lint -esym(534,clearok) */)
#undef clrtobot
__ZCRSPVU(clrtobot,     int,      (void) /*lint -esym(534,clrtobot) */)
#undef clrtoeol
__ZCRSPVU(clrtoeol,     int,      (void) /*lint -esym(534,clrtoeol) */)
#undef crmode
__ZCRSPVU(crmode,       int,      (void) /*lint -esym(534,crmode) */)
#if FALSE
__ZCRSNOU(def_prog_mode,int,      (void))
__ZCRSNOU(def_shell_mode,int,     (void))
__ZCRSNOU(delay_output, int,      (int Milliseconds))
#endif
#undef delch
__ZCRSPVU(delch,        int,      (void) /*lint -esym(534,delch) */)
#undef deleteln
__ZCRSPVU(deleteln,     int,      (void) /*lint -esym(534,deleteln) */)
__ZCRSPVU(delwin,       int,      (WINDOW *Window) /*lint -esym(534,delwin) */)
#if FALSE
__ZCRSPVU(doupdate,     int,      (void) /*lint -esym(534,doupdate) */)
#endif
#undef echo
__ZCRSPVU(echo,         int,      (void) /*lint -esym(534,echo) */)
__ZCRSPVU(endwin,       int,      (void) /*lint -esym(534,endwin) */)
#undef erase
__ZCRSPVU(erase,        int,      (void) /*lint -esym(534,erase) */)
#if FALSE
__ZCRSNO(erasechar,     char,     (void))
__ZCRSNOU(fixterm,      int,      (void))
__ZCRSNOU(flushinp,     int,      (void))
#undef flushok
__ZCRSNOU(flushok,      int,      (WINDOW *Window, bool Flag))
__ZCRSNO(getcap,        char *,   (char *Name))
#endif
#undef getch
__ZCRSNO(getch,         wchar_t,  (void))
#undef getstr
__ZCRSPVU(getstr,       int,      (char *String) /*lint -esym(534,getstr) */)
#if FALSE
__ZCRSNOU(gettmode,     int,      (void))
#endif
#if FALSE
__ZCRSNOU(has_ic,       int,      (void))
__ZCRSNOU(has_il,       int,      (void))
__ZCRSPVU(idlok,        int,      (WINDOW *Window, bool Flag) /*lint -esym(534,idlok) */)
#endif
#undef inch
__ZCRSNO(inch,          wchar_t,  (void))
__ZCRSPV(initscr,       WINDOW *, (void) /*lint -esym(534,initscr) */)
#undef insch
__ZCRSPVU(insch,        int,      (char Char) /*lint -esym(534,insch) */)
#undef insertln
__ZCRSPVU(insertln,     int,      (void) /*lint -esym(534,insertln) */)
#if FALSE
__ZCRSPVU(intrflush,    int,      (WINDOW *Window, bool Flag) /*lint -esym(534,intrflush) */)
__ZCRSPVU(keypad,       int,      (WINDOW *Window, bool Flag) /*lint -esym(534,keypad) */)
__ZCRSNO(killchar,      char,     (void))
__ZCRSPVU(leaveok,      int,      (WINDOW *Window, bool Flag) /*lint -esym(534,leaveok) */)
#endif
__ZCRSPV(longname,      char *,   (const char *Termbuf, char *Name))
#if FALSE
__ZCRSNO(makenew,       WINDOW *, (void))
__ZCRSNOU(meta,         int,      (WINDOW *Window, bool Flag))
#endif
#undef move
__ZCRSPVU(move,         int,      (int Line, int Column) /*lint -esym(534,move) */)
#undef mvaddch
__ZCRSPVU(mvaddch,      int,      (int Line, int Column, char Char) /*lint esym(534,mvaddch) */)
#undef mvaddstr
__ZCRSPVU(mvaddstr,     int,      (int Line, int Column, const char *String) /*lint -esym(534,mvaddstr) */)
#undef mvcur
__ZCRSNOU(mvcur,        int,      (int OldLine, int OldColumn, int NewLine, int NewColumn))
#undef mvdelch
__ZCRSPVU(mvdelch,      int,      (int Line, int Column) /*lint -esym(534,mvdelch) */)
#undef mvgetch
__ZCRSNO(mvgetch,       wchar_t,  (int Line, int Column))
#undef mvgetstr
__ZCRSPVU(mvgetstr,     int,      (int Line, int Column, char *String) /*lint -esym(534,mvgetstr) */)
#undef mvinch
__ZCRSNO(mvinch,        wchar_t,  (int Line, int Column))
#undef mvinsch
__ZCRSPVU(mvinsch,      int,      (WINDOW *Window, int Line, int Column, char Char) /*lint -esym(534,mvinsch) */)
#if FALSE
#undef mvinsstr
__ZCRSPVU(mvinsstr,     int,      (WINDOW *Window, int Line, int Column, char Char) /*lint -esym(534,mvinsstr) */)
#endif
__ZCRSPVU(mvprintw,     int,      (int Line, int Column, const char *Format, ...) /*lint -esym(534,mvprintw) */)
#undef mvwaddch
__ZCRSPVU(mvwaddch,     int,      (WINDOW *Window, int Line, int Column, char Char)/*lint -esym(534,mvwaddch) */)
#undef mvwaddstr
__ZCRSPVU(mvwaddstr,    int,      (WINDOW *Window, int Line, int Column, const char *String)/*lint -esym(534,mvwaddstr) */)
#undef mvwgetch
__ZCRSNO(mvwgetch,      wchar_t,  (WINDOW *Window, int Line, int Column))
#undef mvwgetstr
__ZCRSPVU(mvwgetstr,    int,      (WINDOW *Window, int Line, int Column, char *String) /*lint -esym(534,mvwgetstr) */)
__ZCRSNOU(mvwin,        int,      (WINDOW *Window, int Line, int Column))
#undef mvwinch
__ZCRSNO(mvwinch,       wchar_t,  (WINDOW *Window, int Line, int Column))
#undef mvwinsch
__ZCRSPVU(mvwinsch,     int,      (WINDOW *Window, int Line, int Column, char Char) /*lint -esym(534,mvwinsch) */)
__ZCRSNOU(mvwprintw,    int,      (WINDOW *Window, int Line, int Column, const char *Format, ...)
/*~PseudoVoid*/ /*lint -esym(534,mvwprintw) */)
__ZCRSNOU(mvscanw,      int,      (int Line, int Column, const char *Format, ...))
#undef mvwdelch
__ZCRSNOU(mvwdelch,     int,      (WINDOW *Window, int Line, int Column))
#if FALSE
#undef mvwinsstr
__ZCRSPVU(mvwinsstr,    int,      (WINDOW *Window, int Line, int Column, char Char) /*lint -esym(534,mvwinsstr) */)
#endif
__ZCRSNOU(mvwscanw,     int,      (WINDOW *Window, int Line, int Column, const char *Format, ...))
#if FALSE
__ZCRSNO(newpad,        WINDOW *, (int Numlines, int Numcols, int Line, int Column))
__ZCRSNO(newterm,       SCREEN *, (const char *Type, FILE *Outfile, FILE *Infile))
#endif
__ZCRSNO(newwin,        WINDOW *, (int NumLines, int NumCols, int Line, int Column))
#undef nl
__ZCRSPVU(nl,           int,      (void) /*lint -esym(534,nl) */)
#if FALSE
__ZCRSPVU(nocbreak,     int,      (void) /*lint -esym(534,nocbreak) */)
#endif
#undef nocrmode
__ZCRSPVU(nocrmode,     int,      (void) /*lint -esym(534,nocrmode) */)
#if FALSE
__ZCRSNOU(nodelay,      int,      (WINDOW *Window, bool Flag))
#endif
#undef noecho
__ZCRSPVU(noecho,       int,      (void) /*lint -esym(534,noecho) */)
#undef nonl
__ZCRSPVU(nonl,         int,      (void) /*lint -esym(534,nonl) */)
#undef noraw
__ZCRSPVU(noraw,        int,      (void) /*lint -esym(534,noraw) */)
__ZCRSPVU(overlay,      int,      (WINDOW *TopWindow, WINDOW *BotWindow) /*lint -esym(534,overlay) */)
__ZCRSPVU(overwrite,    int,      (WINDOW *TopWindow, WINDOW *BotWindow) /*lint -esym(534,overwrite) */)
#if FALSE
__ZCRSPVU(pnoutrefresh, int,      (WINDOW *Pad, int PY, int PX, int TTY, int TTX, int TBY, int
TBX) /*lint -esym(534,pnoutrefresh) */)
__ZCRSNOU(prefresh,     int,      (WINDOW *Pad, int PY, int PX, int TTY, int TTX, int TBY, int
TBX))
#endif
__ZCRSPVU(printw,       int,      (const char *Format, ...) /*lint -esym(534,printw) */)
#if FALSE
__ZCRSNOU(putp,         int,      (const char *String))
#endif
#undef raw
__ZCRSPVU(raw,          int,      (void) /*lint -esym(534,raw) */)
#undef refresh
__ZCRSPVU(refresh,      int,      (void) /*lint -esym(534,refresh) */)
#if FALSE
__ZCRSNOU(reset_prog_mode,int,    (void))
__ZCRSNOU(reset_shell_mode,int,   (void))
__ZCRSNOU(resetterm,    int,      (void))
__ZCRSNOU(resetty,      int,      (void))
__ZCRSNOU(restartterm,  int,      (void))
__ZCRSNOU(saveterm,     int,      (void))
__ZCRSNOU(savetty,      int,      (void))
#endif
__ZCRSNOU(scanw,        int,      (const char *Format, ...))
__ZCRSPVU(scroll,       int,      (WINDOW *Window) /*lint -esym(534,scroll) */)
#undef scrollok
__ZCRSPVU(scrollok,     int,      (WINDOW *Window, bool Flag) /*lint -esym(534,scrollok) */)
#if FALSE
#undef setscrreg
__ZCRSNOU(setscrreg,    int,      (int Tmargin, int Bmargin))
__ZCRSNO(set_term,      SCREEN *, (SCREEN *n))
__ZCRSNOU(setterm,      int,      (const char *Name))
__ZCRSNOU(setupterm,    int,      (const char *Term, FILE *FileNumber, int *ErrorCode))
#endif
__ZCRSNO(subwin,        WINDOW *, (WINDOW *ParentWindow, int NumLines, int Numcols, int Line, int Column))
#if FALSE
__ZCRSNOU(tgetent,      int,      (const char *Bp, const char *Name))
__ZCRSNOU(tgetflag,     bool,     (const char *ID))
__ZCRSNOU(tgetnum,      int,      (const char *ID))
__ZCRSNO(tgetstr,       char *,   (const char *ID, const char *Area))
__ZCRSNO(tgoto,         char *,   (const char *Capability, int Column, int Row))
__ZCRSNOU(touchline,    int,      (WINDOW *Window, int Line, int FirstCol, int NumOfCols))
__ZCRSNOU(touchoverlap, int,      (WINDOW *Window1, WINDOW *Window2))
#endif
__ZCRSPVU(touchwin,     int,      (WINDOW *Window) /*lint -esym(534,touchwin) */)
__ZCRSPVU(waddch,       int,      (WINDOW *Window, char Char) /*lint -esym(534,waddch) */)
__ZCRSPVU(waddstr,      int,      (WINDOW *Window, const char *String) /*lint -esym(534,waddstr) */)
#if FALSE
__ZCRSPVU(wattrset,     int,      (WINDOW *Window, unsigned long Attributes) /*lint -esym(534,wattrset) */)
#endif
__ZCRSPVU(wclear,       int,      (WINDOW *window) /*lint -esym(534,wclear) */)
__ZCRSPVU(wclrtobot,    int,      (WINDOW *window) /*lint -esym(534,wclrtobot) */)
__ZCRSPVU(wclrtoeol,    int,      (WINDOW *Window) /*lint -esym(534,wclrtoeol) */)
__ZCRSPVU(wdelch,       int,      (WINDOW *Window) /*lint -esym(534,wdelch) */)
__ZCRSPVU(wdeleteln,    int,      (WINDOW *) /*lint -esym(534,wdeleteln) */)
__ZCRSPVU(werase,       int,      (WINDOW *Window) /*lint -esym(534,werase) */)
__ZCRSPVU(wgetch,       int,      (WINDOW *Window) /*lint -esym(534,wgetch) */)
__ZCRSPVU(wgetstr,      int,      (WINDOW *Window, char *String) /*lint -esym(534,wgetstr) */)
#undef winch
__ZCRSNO(winch,         wchar_t,  (WINDOW *Window))
__ZCRSPVU(winsch,       int,      (WINDOW *Window, char Char) /*lint -esym(534,winsch) */)
__ZCRSPVU(winsertln,    int,      (WINDOW *Window) /*lint -esym(534,winsertln) */)
__ZCRSPVU(wmove,        int,      (WINDOW *Window, int Line, int Column) /*lint -esym(534,wmove) */)
#if FALSE
__ZCRSPVU(wnoutrefresh, int,      (WINDOW *window) /*lint -esym(534,wnoutrefresh) */)
#endif
__ZCRSPVU(wprintw,      int,      (WINDOW *Window, const char *Format, ...) /*lint -esym(534,wprintw) */)
__ZCRSPVU(wrefresh,     int,      (WINDOW *Window) /*lint -esym(534,wrefresh) */)
__ZCRSNOU(wscanw,       int,      (WINDOW *Window, const char *Format, ...))
#if FALSE
#undef wsetscrreg
__ZCRSNOU(wsetscrreg,   int,      (WINDOW *Window, int Tmargin, int Bmargin))
#endif
  
#undef __ZCRSBASE
#undef __ZCRSNO
#undef __ZCRSNOU
#undef __ZCRSPV
#undef __ZCRSPVU

#endif /* __CURSES_ADJ */
