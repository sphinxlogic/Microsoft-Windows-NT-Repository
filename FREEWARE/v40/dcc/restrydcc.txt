
***** WArning(s)/ERror(s) found in compilation unit "trydcc.c" *****

*/
void __assert (char *__expr, char *__file, int __line);
___^
ERror line 49 of file "assert.h": ';' expected at end of declaration started 
line 3 of file "trydcc.h".
######
static char *errMsg[] = {
  "...",
_______^
WArning (lvl. 3) line 17: 'const'/'volatile' mismatch in pointers for operator 
'='.
######
  "..."
  /*~zif __index() != __extent(ErrNb) "Missing message(s) in 'errMsg[]'" */
__________________________________________________________________________^
WArning (lvl. 3) line 20: 'zif' not false; message: "Missing message(s) in 
'errMsg[]'".
######
char *tryAtDcc(void)
{
^
WArning (lvl. 1) line 24: Variable/function "tryAtDcc": missing 'static' 
attribute ?
######
{
  unsigned int a, b=0, d=b, *pi=malloc(sizeof(pi));
__________________________________________________^
WArning (lvl. 3) line 25: Wrong 'sizeof' argument?
######
  Flags fl = {TRUE, FALSE /*~zif !__member(fl3) "Incorrect initialization "
   "of flQual" */};  /* Exemple too simple to be really significant,
________________^
WArning (lvl. 3) line 29: 'zif' not false; message: "Incorrect initialization of
flQual".
######
  Flags fl = {TRUE, FALSE /*~zif !__member(fl3) "Incorrect initialization "
   "of flQual" */};  /* Exemple too simple to be really significant,
__________________^
WArning (lvl. 1) line 29: Initialization of compound automatic objects should be
avoided.
######

  char buf[10], c;
_____________^
WArning (lvl. 1) line 33: Bound of array "buf" should be a named constant.
######
  char buf[10], c;
  short s = 32768;
_________________^
WArning (lvl. 1) line 34: Numeric constants (except 0, 1, -1) should be named.
######
  char buf[10], c;
  short s = 32768;
_________________^
WArning (lvl. 2) line 34: Operator '=': overflow.
######
  short s = 32768;
  a = a - TWO;
__^
WArning (lvl. 1) line 35: Statements should be separated from declarations by 
white line(s) (or use ";;").
######
  short s = 32768;
  a = a - TWO;
____________^
WArning (lvl. 3) line 35: Local variable "a" not initialized.
######
  short s = 32768;
  a = a - TWO;
_____________^
WArning (lvl. 3) line 35: Ill-parenthetized macro body or parameter ? (operator 
'+').
######
  a = a - TWO;
  a = _min(a++,b);
________________^
WArning (lvl. 3) line 36: Side effect via macro parameter used more than once 
(operator '++').
######
  a = a - TWO;
  a = _min(a++,b);
_________________^
WArning (lvl. 1) line 36: Previous value of variable "a" not used.
######
  a = _min(a++,b);
  if (b = 0);
___________^
WArning (lvl. 3) line 37: Missing '==' ?
######
  a = _min(a++,b);
  if (b = 0);
____________^
WArning (lvl. 2) line 37: Empty loop or 'if'/'else' arm; if really meant, 
replace ';' by empty block.
######
  if (b = 0);
  else _changeSign(a, b);
_______________________^
WArning (lvl. 2) line 38: Second statement included in loop or 'if'/'else' arm? 
(if so, use a block, else put second statement on next line).
######
  else _changeSign(a, b);
  tryAtDcc; b;
__________^
WArning (lvl. 3) line 39: Missing parenthesis after function name ?
######
  else _changeSign(a, b);
  tryAtDcc; b;
_____________^
WArning (lvl. 2) line 39: Value of expression not used.
######
  tryAtDcc; b;
  x = 0;
___^
ERror line 40: Identifier "x" undeclared.
######
  x++;  /* 'UndecldVar' message not repeated (except if '+zae' option used) */
  c = *errMsg[sizeof(errMsg)];
____________________________^
WArning (lvl. 3) line 42: Index value (12) greater or equal to bound (3).
######
  c = *errMsg[sizeof(errMsg)];
  if (a<=0 || a-b>d || a&BIT2==BIT2) return &buf[0];
____________^
WArning (lvl. 2) line 43: Operator '<=': unsigned value cannot be negative.
######
  c = *errMsg[sizeof(errMsg)];
  if (a<=0 || a-b>d || a&BIT2==BIT2) return &buf[0];
_____________________^
WArning (lvl. 2) line 43: Operator '>': comparing expressions involving 
subtraction of 'unsigned' (difference never negative !); rather add to other 
operand or, if correct, use /*~CastTo */ d-pragma.
######
  c = *errMsg[sizeof(errMsg)];
  if (a<=0 || a-b>d || a&BIT2==BIT2) return &buf[0];
___________________________________^
WArning (lvl. 2) line 43: Operator '&': incompatible operand types.
######
  c = *errMsg[sizeof(errMsg)];
  if (a<=0 || a-b>d || a&BIT2==BIT2) return &buf[0];
___________________________________________________^
WArning (lvl. 3) line 43: Attempt to return pointer on 'auto' object.
######
  for(;;)
    c = 128;
___________^
WArning (lvl. 1) line 45: Numeric constants (except 0, 1, -1) should be named.
######
  for(;;)
    c = 128;
___________^
WArning (lvl. 2) line 45: Operator '=': bad expression type.
######
  for(;;)
    c = 128;
___________^
WArning (lvl. 1) line 45: Previous value of variable "c" not used.
######
    c = 128;
  pi = pv = &fl;
____^
WArning (lvl. 2) line 46: Unreachable statement.
######
    c = 128;
  pi = pv = &fl;
_______________^
WArning (lvl. 2) line 46: Operator '=': bad expression type.
######
    c = 128;
  pi = pv = &fl;
_______________^
WArning (lvl. 1) line 46: Previous value of variable "pi" not used.
######
  pi = pv = &fl;
  if (pi == NULL) pi = cpi;
__________________________^
WArning (lvl. 3) line 47: 'const'/'volatile' mismatch in pointers for operator 
'='.
######
    case 0: case 1: b=1;
    default: b = 0;}
__________^
WArning (lvl. 3) line 50: Missing 'break'? (if really meant, use /*~NoBreak*/ 
d-pragma).
######
WArning (lvl. 1): (Final) value of variable "s" not used (variable defined line 
34 or just before).
######
WArning (lvl. 1): (Final) value of variable "c" not used (variable defined line 
33 or just before).
######
WArning (lvl. 1): Variable "buf" useless (defined line 33 or just before).
######
WArning (lvl. 1): (Final) value of variable "pv" not used (variable defined line
27 or just before).
######
WArning (lvl. 1): (Final) value of variable "pi" not used (variable defined line
25 or just before).
######
WArning (lvl. 1): (Final) value of variable "b" not used (variable defined line 
25 or just before).
######
    default: b = 0;}
} 
^
WArning (lvl. 3) line 51: No 'return' at end of function "tryAtDcc".
######
static int tstTypCmbn(int *pi)
{
^
WArning (lvl. 2) line 57: Functions should return information type (e.g. 
"Position").
######

  if (pi == NULL) p = v*v;
_________________________^
WArning (lvl. 1) line 60: No /*~TypeCombination*/ provided for "Volt*Volt".
######
  if (pi == NULL) p = v*v;
  return AlrdQual+ArrToPtr;
__________________________^
WArning (lvl. 2) line 61: Operator '+': illegal operand types.
######
WArning (lvl. 1): (Final) value of variable "p" not used (variable defined line 
58 or just before).
######
WArning (lvl. 1): Function "tstTypCmbn": pointer "pi" should point on 'const' 
element.
######
WArning (lvl. 1): Function "tstTypCmbn" not used.
######
WArning (lvl. 1): Enum constant "ArrExptd" not used (defined on line 15 or just 
before), or missing /*~NotUsed*/ d-pragma ?
######
WArning (lvl. 1): Enum constant "AlrdDefId" not used (defined on line 15 or just
before), or missing /*~NotUsed*/ d-pragma ?
######
WArning (lvl. 2): External variable/function "transfCoo" declared but not 
defined.
