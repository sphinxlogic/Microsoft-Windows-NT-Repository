%!PS-Adobe-3.0
%%Title: PLMENU$FACSERIAL
%%Creator: DECdocument  V3.2N
%%Copyright: 1994-1997 Touch Technologies, Inc.
%%+All Rights Reserved.
%%CreationDate: Fri Dec 11 1998 17:50:09
%%For: SHOFFMAN    
%%BoundingBox: (atend)
%%DocumentData: Clean7Bit
%%LanguageLevel: 1
%%Orientation: Portrait
%%Pages: (atend)
%%PageOrder: Ascend
%%DocumentFonts: (atend) 
%%DocumentNeededFonts: (atend) 
%%DocumentProcSets: Underlay Color5044
%%DocumentSuppliedProcSets: Underlay Color5044
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%+++TTI changes : added ROTB back in
%+++            : added 1000 ROTB = begin special code example
%+++            : added 1001 ROTB = end special code example
%+++            : added 1002 ROTB = digital logo
%
%%BeginResource: procset Underlay
%%CreationDate: (2/10/92)
%
% In VAX DOCUMENT V2.1-1, simple EPSF files up to 65,000 bytes long
% may be an underlay. Define the EPSF as a PostScript proceedure
% called /UNDERLAY and prefix to DOCUMENT's PS output  For example:.
% /UNDERLAY ( EPSF code here ) cvx def
%
% To create a "DRAFT" underlay change /UNDERLAY* to /UNDERLAY
/UNDERLAY* (
  /Note (DRAFT) def
  /NoteSize 120 def
  /NoteFont /Helvetica findfont NoteSize scalefont def
  /Note where { pop Note length 0 gt {
    /NoteWidth NoteFont setfont Note stringwidth pop def
    PaperWidth 36 mul PaperHeight 36 mul moveto
    PaperHeight PaperWidth atan rotate
    NoteWidth -2 div NoteSize .729 mul -2 div rmoveto 
    Note true charpath .075 setseparationgray fill
  }if  }if
) cvx def
%%EndResource
%
%%BeginResource: procset Color5044
%%CreationDate: (1/21/91)
%%Version:1.0 3
%Implementation of Adobe 5044 color specification
%/ndf allows command override during color separation
/Color5044Dict 100 dict def
Color5044Dict begin
/bdf {bind def} def
/ndf
  {1 index where
    {pop pop pop
    }
    {dup xcheck
      {bind} if
    def
    }
    ifelse
  } bdf
/setcmykcolor
  {1 exch sub
  3 
    {dup 5 -1 roll sub 0 2 copy lt
      {exch} if
    pop exch
    } repeat
  pop setrgbcolor
  }ndf
/setcmykcoloroverprint
  {4
    {dup -1 eq
      {pop 0} if
      4 1 roll
    } repeat
  setcmykcolor
  } ndf
/findcmykcustomcolor
  {5 /packedarray where
    {pop packedarray
    }
    {array astore readonly
    }
    ifelse
  } ndf
/setcustomcolor
  {exch aload pop pop
  4
    {4 index mul 4 1 roll
    } repeat
  setcmykcolor pop
  } ndf
/setseparationgray
  {1 exch sub systemdict /setgray get exec
  } ndf
/setoverprint {pop} ndf
/currentoverprint false ndf
%CMYK multi-proc colorimage
/colorimage
  {4 ne
    {(\nUnsupported number of colors for colorimage.\n) print flush quit
    } if
  not
    {(\nSingle procedure form  colorimage unsupported.\n) print flush quit
    } if
  save 20 dict begin /&saveobj exch def
  /&Kproc exch def /&Yproc exch def /&Mproc exch def /&Cproc exch def
    {&Cproc &Mproc &Yproc &Kproc
    /&K exch def /&Y exch def /&M exch def /&C exch def
    0 1 &K length 1 sub
      {/&i exch def
      &K &i 255
      &C &i get 30 mul
      &M &i get 59 mul add
      &Y &i get 11 mul add
      &K &i get 100 mul add
      100 idiv
      dup 255 gt
        {pop 255} if
      sub put
      } for
    &K
    } image
  &saveobj end restore
  } ndf
/customcolorimage
  {pop systemdict /image get exec
  } ndf
/separationimage
  {systemdict /image get exec
  } ndf
end
%%EndResource
Color5044Dict begin
%
/DEC_DVC$dict 300 dict def
DEC_DVC$dict begin
%
/DVC$PSJob save def
%
mark		% CREATE ISOLatin1Encoding if not there already
/ISOLatin1Encoding
  8#000 1 8#054 {StandardEncoding exch get} for 
  /minus
  8#056 1 8#217 {StandardEncoding exch get} for 
  /dotlessi 
  8#301 1 8#317 {StandardEncoding exch get} for 
  /space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
  /dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen 
  /registered /macron /degree /plusminus /twosuperior /threesuperior /acute 
  /mu /paragraph /periodcentered /cedilla /onesuperior /ordmasculine 
  /guillemotright /onequarter /onehalf /threequarters /questiondown /Agrave 
  /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute 
  /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth /Ntilde 
  /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply /Oslash /Ugrave 
  /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls /agrave /aacute 
  /acircumflex /atilde /adieresis /aring /ae /ccedilla /egrave /eacute 
  /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis /eth /ntilde
  /ograve /oacute /ocircumflex /otilde /odieresis /divide /oslash /ugrave 
  /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
  /ISOLatin1Encoding where not {256 array astore def} if 
cleartomark
%
/DOCPSE ISOLatin1Encoding 256 array copy def
mark						% CREATE DOCPSE ENCODING
  8#055 /hyphen
  8#201 /bullet    8#202 /emdash     8#203 /endash    8#204 /dagger
  8#205 /daggerdbl 8#206 /registered 8#207 /trademark %8#210 /Delta
  8#211 /fi        8#212 /fl         8#213 /OE        8#214 /oe
  8#215 /Ydieresis
  counttomark -1 bitshift			% DIVIDE BY 2
  {DOCPSE 3 1 roll put} repeat			% STACK NOW CONTAINS MARK
cleartomark
%
/ReENCODE {		% /basefont /newfont encoding ReENCODE
    /newencoding exch def	%ARG: NAME OF ENCODING VECTOR
    /newfontname exch def	%ARG: NEW NAME FOR FONT AFTER RE-ENCODING
    findfont
    /basefontdict exch def	%ARG: NAME OF FONT TO BE RE-ENCODED
    basefontdict maxlength dict begin	%CREATE AND OPEN NEW DICT
	basefontdict {		%COPY ENTRIES FROM BASE FONT DICT TO NEW ONE
	    1 index /FID ne {
		def		%IF NOT THE ONE WE'RE ENCODING, JUST COPY PTRS
	    } { %else
		pop pop		%IGNORE FID AND ENCODING FOR ONE WE'RE ENCODING
	    } ifelse
	} forall
	/FontName newfontname def	%DEFINE NEW NAME 
	/Encoding newencoding def	%DEFINE NEW ENCODING VECTOR
	newfontname currentdict definefont	%TURN IT INTO A PS FONT
	pop			%IGNORE MODIFIED DICT RETURNED BY DEFINEFONT
    end
}def
%
/cvsstr 64 string def
/tempmatrix matrix def
%
% Exit page (temporarily) to add fonts/characters.
/XP { }def
% 
% Resume page
/RP {/ExampleState 0 def} def		% RESUME PAGE
/ExampleState 0 def
%
% End Page: EP
/EP {DVC$PSPage restore}def
%
% Purge fonts to reclaim VM
/PF {
  currentoverprint
  currentrgbcolor
  EP			%Does restore
  PageSetup     %Does save
  setrgbcolor
  setoverprint
}def
%
% ABBREVIATIONS 
/S /show load def
/SV /save load def
/RST /restore load def
%
/Yadjust {Ymax exch sub} def
%
/SXY {		% (x,y) POSITION ABSOLUTE, JUST SET Xpos & Ypos, DON'T MOVE
  Yadjust  /Ypos exch def /Xpos exch def
} def
%
/XY {						% (x,y) POSITION ABSOLUTE
  Yadjust moveto
} def
%
/X {						% (x,0) POSITION ABSOLUTE
  currentpoint exch pop moveto
} def
%
/Y {						% (0,y) POSITION ABSOLUTE 
  currentpoint pop exch Yadjust moveto
} def
%
/xy {						% (x,y) POSITION RELATIVE
  neg rmoveto
} def
%
/x {						% (x,0) POSITION RELATIVE
  0 rmoveto
} def
%
/y {						% (0,y) POSITION RELATIVE
  0 exch neg rmoveto
} def
%
/R {						% Draw a rectangle
  /ht exch def  /wd exch def   gsave
  currentpoint  newpath  moveto
  0 ht rlineto  wd 0 rlineto
  0 ht neg rlineto  wd neg 0 rlineto
  closepath fill grestore wd 0 rmoveto
}def
%
%Setup Page Media:  <paper-height> <paper-width> PM
/PM {
  /Xmax exch Resolution mul def
  /Ymax exch Resolution mul def
  /UNDERLAY where {
    pop
    /eps_save save def		% save before EPSF underlay
    Resolution 72 div dup scale % Revert coords to points
    count array astore /DVCstack exch def % save op stack
    /dict_count countdictstack def % # of dicts
    userdict begin		% default dict
    /showpage {}def		% disable showpage
    0 setgray
      {UNDERLAY} stopped {(Error executing /UNDERLAY)== quit}if
    countdictstack dict_count sub {end} repeat % clean up dict stack
    clear DVCstack aload pop	% restore op stack
    eps_save restore		% restore after EPSF
  }if
  PageSetup
}def
%
%Setup page coordinates
/PageSetup
{
%  /DVC$PSPage {save} def % ++cjb: fix VME bug
  /DVC$PSPage save def
  PortraitMode not {PaperWidth 0 translate  90 rotate} if
  /Xpos 0 def
  /Ypos 0 def
}def
%
% Begin EPS file: <xoffset> <yoffset> SPB
/SPB {
  Yadjust transform		% convert from DVC to device coords
  EP				% page-level restore
  /eps_save save def		% save before EPSF
  Resolution 72 div dup scale 	% Revert coords to points
  itransform			% convert position back to points  
  translate			% set position for EPSF
  PortraitMode not {90 rotate} if % rotate for EPSF
  count array astore /DVCstack exch def	% save op stack
  /dict_count countdictstack def % # of dicts
  userdict begin		% default dict
  /showpage {}def		% disable showpage
  0 setgray
}def
%
% End EPS file
/SPE {
  countdictstack dict_count sub {end} repeat % clean up dict stack
  clear DVCstack aload pop	% restore op stack
  eps_save restore		% restore after EPSF
  PageSetup			% restore DVC coords
}def
%
% Print-Page Routine: <Page #> PP
/PP {
  gsave
  showpage
  grestore
}def
%
/DMF {		%  /font-name <point-size> DMF
  exch findfont exch scalefont setfont
}def
%
/concatnam {	%  /abcd (xxx) concatnam  ==> /abcdxxx
  /xxx exch def
  /namstr exch cvsstr cvs def
  /newnam namstr length xxx length add string def
  newnam 0 namstr putinterval
  newnam namstr length xxx putinterval
  newnam cvn 
}def
%
/strip {	%  /abcdef 2 strip ==> /cdef
  /num exch def  /nam exch def
  /namstr nam cvsstr cvs def
  /newlen namstr length num sub def
  namstr num newlen getinterval  cvn
}def
%		ROUTINES TO HANDLE PACKING/UNPACKING NUMBERS
/PackHW {	% <target> <pos> <num> PackHW --> <new target>
  /num exch def  /pos exch def  /target exch def
  num 16#0000FFFF and 1 pos sub 16 mul bitshift  target or
}def
/PackByte {	% <target> <pos> <num> PackByte --> <new target>
  /num exch def  /pos exch def  /target exch def
  num 16#000000FF and 3 pos sub 8 mul bitshift   target or
}def
/UnpkHW {	%  <pos> <num> UnpkHW --> <unpacked value>
  /num exch def  /pos exch def
  num 1 pos sub -16 mul bitshift 16#0000FFFF and
  dup 16#00007FFF gt {16#00010000 sub} if
}def
/UnpkByte {	%  <pos> <num> UnpkByte --> <unpacked value>
  /num exch def  /pos exch def
  num 3 pos sub -8 mul bitshift 16#000000FF and
  dup 16#0000007F gt {16#00000100 sub} if
}def
%
/ps-scalefont {
    % FOR PS FONTS, LOOK AT SIZE REQUESTED.  IF IT HAS A DECIMAL REMAINDER
    % EQUIVALENT TO .001-.009 POINTS (I.E., .050-.450 VAXDOC UNITS), THAT'S 
    % A FLAG TO STRETCH IT VERTICALLY BY ADDING 1-9 EXTRA POINTS TO THE 
    % VERTICAL SCALING.
                % save requested size - as entered and as integer
    dup /x-size exch def cvi /x-int exch def
                % calc decimal remainder, mul x 1000, round
    x-size x-int sub 1000 mul round cvi /remainder exch def
                % see how we scale...
    remainder 50 lt remainder 450 gt or {
                % scale isomorphically
        /ystretch 0 def
        x-size scalefont
    } {
                % scale anamorphically
        /ystretch remainder def
        x-int ystretch add /y-size exch def
        [x-int 0 0 y-size 0 0] makefont
    } ifelse
}def
%
/DPSF {		% /procname size /fontname DPSF
    findfont exch ps-scalefont [ exch /setfont cvx ] cvx def
}def
%
/PXLBuildCharDict 17 dict def
/CMEncodingArray 256 array def
0 1 255 {CMEncodingArray exch dup cvsstr cvs cvn put} for
/RasterConvert {RasterScaleFactor div}def
/TransformBBox {
  aload pop
  /BB-ury exch def  /BB-urx exch def  /BB-lly exch def  /BB-llx exch def
  [ BB-llx RasterConvert BB-lly RasterConvert 
    BB-urx RasterConvert BB-ury RasterConvert ]
}def
/RunLengthToRasters {
  % none yet
}def
/GenerateRasters {			% GENERATE RASTERS FOR "IMAGEMASK"
  rasters  runlength 1 eq {RunLengthToRasters} if
}def
%
/int-dict-name {int (-dict) concatnam}def
/int-dict {int (-dict) concatnam cvx load}def
%
/DefinePXLFont {
	%  <int-font-name><ext-font-name><pt-sz(pix)><PXL mag><num-chars>...
	%  ...[llx lly urx ury]<newfont-fg>DefinePXLFont
  /newfont exch def  /bb exch def      /num exch def  /psz exch def
  /dsz exch def      /pxlmag exch def  /ext exch def  /int exch def
  /fnam ext (-) concatnam pxlmag cvsstr cvs concatnam def
  newfont not {
    int-dict-name 13 dict def
    int-dict begin
      /FontType 3 def  /FontMatrix [ 1 dsz div 0 0 1 dsz div 0 0 ] def
      /FontBBox bb TransformBBox def  /Encoding CMEncodingArray def
      /CharDict 1 dict def  CharDict begin  /Char-Info num array def  end
      /BuildChar {
        PXLBuildCharDict begin
          /char exch def  /fontdict exch def
          fontdict /CharDict get /Char-Info get char get aload pop
          /rasters exch def  /PackedWord1 exch def
          0 PackedWord1 UnpkHW 16#7FFF ne {
	    /PackedWord2 exch def  /wx 0 PackedWord1 UnpkHW def
            /rows 2 PackedWord1 UnpkByte def  /cols 3 PackedWord1 UnpkByte def
            /llx 0 PackedWord2 UnpkByte def   /lly 1 PackedWord2 UnpkByte def
            /urx 2 PackedWord2 UnpkByte def   /ury 3 PackedWord2 UnpkByte def
	  }{ %else
	    /PackedWord2 exch def  /PackedWord3 exch def /PackedWord4 exch def
            /wx 1 PackedWord1 UnpkHW def    /rows 0 PackedWord2 UnpkHW def
            /cols 1 PackedWord2 UnpkHW def  /llx 0 PackedWord3 UnpkHW def
            /lly 1 PackedWord3 UnpkHW def   /urx 0 PackedWord4 UnpkHW def
            /ury 1 PackedWord4 UnpkHW def
          } ifelse
          rows 0 lt {
	    /rows rows neg def /runlength 1 def
	  }{ %else
	    /runlength 0 def
	  } ifelse
          wx 0
          llx RasterConvert lly RasterConvert 
          urx RasterConvert ury RasterConvert setcachedevice
          rows 0 ne {
	    gsave
	      cols rows true  RasterScaleFactor 
              0 0 RasterScaleFactor neg llx .5 add neg ury .5 add 
              tempmatrix astore  GenerateRasters imagemask
            grestore
          } if
        end
      }def
    end
    fnam int-dict definefont pop 
  } if 
  int-dict-name fnam findfont psz scalefont def
  currentdict int [ int-dict /setfont cvx ] cvx put
}def 
/PXLF { true  DefinePXLFont}def	% SIGNAL THAT FONT ALREADY LOADED
/PXLNF {false  DefinePXLFont}def	% SIGNAL THAT FONT NOT ALREADY LOADED
%
/PXLC {	% <int-font-name><code><wx><llx><lly><urx><ury>...
	% ...<rows><cols><runlength><rasters>PXLC
  /rasters exch def  /runlength exch def  /cols exch def  /rows exch def
  /ury exch def      /urx exch def        /lly exch def   /llx exch def
  /wx exch def       /code exch def       /int exch def
  % SEE IF LONG OR SHORT FORMAT IS REQUIRED
  true cols CKSZ rows CKSZ ury CKSZ urx CKSZ lly CKSZ llx CKSZ 
  TackRunLengthToRows {
    int-dict /CharDict get /Char-Info get code 
    [ 0 0 llx PackByte 1 lly PackByte 2 urx PackByte 3 ury PackByte
      0 0 wx PackHW 2 rows PackByte 3 cols PackByte rasters ] put
  }{ %else
    int-dict /CharDict get /Char-Info get code 
    [ 0 0 urx PackHW 1 ury PackHW   0 0 llx PackHW 1 lly PackHW
      0 0 rows PackHW 1 cols PackHW 0 0 16#7FFF PackHW 1 wx PackHW rasters ] put
  } ifelse
}def
%
/CKSZ {abs 127 le and}def
/TackRunLengthToRows {runlength 0 ne {/rows rows neg def} if}def
%
/PLOTC {
  % <wx><dsz><psz><llx><lly><urx><ury><rows><cols><runlength><rasters>PLOTC
  /rasters exch def  /runlength exch def  /cols exch def  /rows exch def
  /ury exch def      /urx exch def        /lly exch def   /llx exch def
  /psz exch def      /dsz exch def        /wx exch def
  % "PLOT" A CHARACTER'S RASTER PATTERN
  rows 0 ne {
    gsave
      currentpoint translate  psz dsz div dup scale
      cols rows true  RasterScaleFactor 0 0 RasterScaleFactor 
      neg llx .5 add neg ury .5 add  tempmatrix astore
      GenerateRasters imagemask
    grestore
  } if
  wx x
}def
%
% set color routine: Color# SC
/SC {ColorPalette exch get 1.0 setcustomcolor}bind def
%
%
%  Procedures for implementing the "rotate <theta>" special:
%  <theta> ROTB -
%        - ROTE -

%+++ TTI changes to allow .screen escape sequence
% 1000 ROTB -> start screen
% 1001 ROTB -> end screen
% 1002 ROTB -> Digital logo

/codexindent 590 def

/ROTB {
  dup 1000 eq {
    % 1000 ROTB - start code example
    pop /ExampleState 0 def
    /S {
      dup (.screen) eq {
      % start screen example
% pjf fix 7-4-92 : first line after .screen was indented improperly
        currentpoint /ExampleY exch def /ExampleX exch def
        1 setgray show 0 setgray
        /S {
          /ExampleName exch def /ExampleState 1 def
          codexindent 0 translate codexindent 0 rmoveto
          1 setgray ExampleName show 0 setgray
          /S /show load def
          /FONT104 /F104 load def
          % replace the tilde with a space
          currentfont F102 currentfont begin
            /Encoding load        % - encoding
            % save the old encoding for the tilde
            dup 126 get exch      % - e126 encoding
            dup 32 get 126 exch put % - e126
          end
          % stick tilde encoding in a variable
          /ExampleTilde exch def
          FONT104 currentfont /F104DICT exch def setfont
          /F104 {
            /S {
              currentfont /F104DICT load eq {
                dup length 240 mul /w exch def
                gsave 0 -100 rmoveto currentpoint
                newpath moveto w 0 rlineto 0 440
                rlineto w neg 0 rlineto closepath fill grestore
                1 setgray show 0 setgray
              } {
                /S /show load def S
              } ifelse
            } def
            FONT104
          } def
        } def
      } {
      % regular code example
        show /S /show load def
      } ifelse
    } def
  } { dup 1001 eq {
    % 1001 ROTB - end code example
    pop
    ExampleState 1 eq {
      currentpoint ExampleY exch sub 600 sub /ylength exch def pop
      /xlength 19200 1.25 mul def /radius 1000 def
      gsave ExampleX ExampleY translate
      240 -400 translate .8 1 scale 50 setlinewidth
      /Helvetica findfont 250 scalefont setfont
      ExampleName (-) eq { /ExampleName () def } if
      ExampleName stringwidth pop
      xlength exch sub -250 radius sub ylength sub moveto
        gsave 1.25 1 scale ExampleName show grestore
      newpath radius neg 0 moveto
      0 ylength neg radius 180 270 arc
      xlength ylength neg radius 270 0 arc
      xlength 0 radius 0 90 arc
      0 0 radius 90 180 arc
      closepath stroke grestore
      /ExampleState 0 def
      /F104 /FONT104 load def
      /S /show load def
      % replace tilde encoding, so it doesn't show up as space anymore
      currentfont F102 currentfont begin
        /Encoding load 126 ExampleTilde put
      end setfont
      codexindent neg 0 translate codexindent neg 0 rmoveto
    } if
  } { dup 1002 eq {
    pop
    gsave (-) stringwidth pop neg 0 rmoveto 
    /Helvetica findfont 450 scalefont setfont
    [(d) (i) (g) (i) (t) (a) (l)] {
      currentpoint currentpoint newpath moveto
      0 -200 rmoveto 300 0 rlineto 0 730 rlineto -300 0 rlineto 0 -730 rlineto
      fill moveto gsave
      dup stringwidth pop 300 exch sub 2 div 0 rmoveto
      1 setgray show 0 setgray grestore
      350 0 rmoveto
    } forall
    0 375 rmoveto
    /Helvetica findfont 200 scalefont setfont (TM) show
    grestore
  } {
    % other - do rotation
    XP
    gsave
    Xpos Ypos translate
    rotate % using <theta> from the stack
    Xpos neg Ypos neg translate
    RP
  } ifelse } ifelse } ifelse
} def

/ROTE {XP grestore RP} def
/F104 { } def

%%EndProlog


%%BeginSetup
/PxlResolution 300 def
/Resolution 3600 def
/RasterScaleFactor PxlResolution Resolution div def
/PortraitMode true def
/PaperWidth 8.500 def
/PaperHeight 11.000 def
72 Resolution div dup scale

%>  Postamble of file VDED$:[VDE.VDEDOC]PLMENU$FACSERIAL.DVI_PS.
% DefineFont:F151 Category:10 Pointsize:10
/NewCenturySchlbk-Roman /NewCenturySchlbk-Roman@DOCPSE DOCPSE ReENCODE
/F151 500.0 /NewCenturySchlbk-Roman@DOCPSE DPSF
% DefineFont:F36 Category:10 Pointsize:10
/Helvetica-Bold /Helvetica-Bold@DOCPSE DOCPSE ReENCODE
/F36 500.0 /Helvetica-Bold@DOCPSE DPSF
% DefineFont:F35 Category:10 Pointsize:10
/Helvetica-Oblique /Helvetica-Oblique@DOCPSE DOCPSE ReENCODE
/F35 500.0 /Helvetica-Oblique@DOCPSE DPSF
% DefineFont:F34 Category:10 Pointsize:10
/Helvetica /Helvetica@DOCPSE DOCPSE ReENCODE
/F34 500.0 /Helvetica@DOCPSE DPSF
% DefineFont:F28 Category:10 Pointsize:12
/F28 600.0 /Helvetica-Bold@DOCPSE DPSF
% DefineFont:F25 Category:10 Pointsize:14
/Helvetica-BoldOblique /Helvetica-BoldOblique@DOCPSE DOCPSE ReENCODE
/F25 700.0 /Helvetica-BoldOblique@DOCPSE DPSF
% DefineFont:F24 Category:10 Pointsize:14
/F24 700.0 /Helvetica-Bold@DOCPSE DPSF
% DefineFont:F23 Category:10 Pointsize:14
/F23 700.0 /Helvetica-Oblique@DOCPSE DPSF
% DefineFont:F20 Category:10 Pointsize:18
/F20 900.0 /Helvetica-Bold@DOCPSE DPSF

%Spot color array for this job
/ColorPalette [
0.0 0.0 0.0 1.0 (BLACK) findcmykcustomcolor
] def

%%EndSetup
%
%%Page: (I) 1
%%PageFonts: (atend)
%%PageProcessColors: (atend)
%%PageCustomColors: (atend)
PaperHeight PaperWidth PM 0 0 XY
0 SC 10773 10524 XY F20(F)S -49 x(ACSERIA)S 2 x(L)S 10773 13214 XY F36
(July)S 167 x(1991)S 10773 14409 XY F34(The)S 181 x(Facility)S 180 x
(Rename)S 179 x(utility)S 180 x(\(F)S -27 x(ACSERIAL\))S 181 x(is)S
180 x(used)S 180 x(to)S 181 x(change)S 180 x(a)S 181 x(class)S 180 x
(name)S 10773 X 598 y(contained)S 166 x(within)S 165 x(a)S 166 x(CMS)S
166 x(library)S -38 x(.)S 10773 X 897 y(Software)S 167 x(V)S -27 x(ersion:)S
249 x(F)S -27 x(ACSERIAL)S 166 x(V)S -27 x(ersion)S 166 x(X0.1)S
EP PP
%%PageTrailer
%%PageFonts: Helvetica-Bold Helvetica
%%PageProcessColors:
%%PageCustomColors: (BLACK)
%
%%Page: (II) 2
%DEC_EDMS_BlankPage
PP
%%PageTrailer
%%PageFonts:
%%PageProcessColors:
%%PageCustomColors:
%
%%Page: (1) 3
%%PageFonts: (atend)
%%PageProcessColors: (atend)
%%PageCustomColors: (atend)
PaperHeight PaperWidth PM 0 0 XY
0 SC 24305 1807 XY F24(F)S -38 x(ACSERIA)S -2 x(L)S 5094 4546 XY 23160 48 R
5094 5543 XY F20(F)S -49 x(ACSERIA)S 2 x(L\202)S(Exe)S -2 x(cute)S 358 x
(CMS)S 359 x(Command)S 358 x(Across)S 11072 6539 XY(Libraries)S 10773 8033 XY
F34(Activates)S 183 x(the)S 182 x(F)S -27 x(ACSERIAL)S 182 x(utility)S
-37 x(.)S 281 x(The)S 181 x(F)S -27 x(ACSERIAL)S 183 x(utility)S 181 x
(is)S 181 x(run)S 182 x(from)S 182 x(DCL.)S 10773 X 598 y(Invokes)S
167 x(a)S 166 x(single)S 165 x(speci\211ed)S 165 x(CMS)S 166 x(command)S
166 x(against)S 166 x(many)S 166 x(CMS)S 166 x(librari)S -2 x(es.)S
5094 9827 XY 23160 204 R 5094 10845 XY F24(FORMA)S -53 x(T)S 10773 X
(F)S -38 x(ACSERIA)S -2 x(L)S 698 x F23(library-spe)S -2 x(c)S 166 x
(cms-comman)S -2 x(d)S 10773 X 797 y 17484 48 R 10773 12239 XY F36(Command)S
166 x(Quali\211)S 2 x(ers)S 18544 X(Defaults)S 10773 X 698 y F35(/[NO]LOG)S
18544 X(/LOG=libr)S -2 x(ary)S 10773 X 597 y(/PROCESS)S 18544 X(/PROCESS=\212agfree)S
10773 X 797 y 17484 96 R 5094 15258 XY F28(prompts)S 10773 X -42 y F151
(LIB_SPEC:)S 16153 X(library-spec)S 10773 X 597 y(CMS_COMMAND:)S 16153 X
(cms-command)S 5094 17009 XY 23160 204 R 5094 17828 XY F24(DESCRIPTION)S
10773 X -156 y F151(The)S 165 x(F)S -37 x(ACSER)S -2 x(IAL)S 164 x(command)S
164 x(is)S 163 x(used)S 164 x(to)S 164 x(execute)S 165 x(a)S 164 x(single)S
164 x(CMS)S 164 x(command)S 164 x(over)S 10773 X 598 y(many)S 167 x
(libraries.)S 249 x(The)S 167 x(command)S 166 x(used)S 166 x(can)S 166 x
(be)S 167 x(any)S 166 x(valid)S 167 x(CMS)S 165 x(command.)S 5094 19465 XY
23160 204 R 5094 20284 XY F24(P)S -51 x(ARA)S -2 x(METERS)S 849 x -22 y
F25(library-spec)S 10773 X 548 y F151(Speci\211es)S 194 x(the)S 193 x
(CMS)S 193 x(library)S 194 x(that)S 194 x(is)S 193 x(to)S 193 x(be)S
194 x(acted)S 193 x(on.)S 305 x(This)S 194 x(speci\211cation)S 10773 X
548 y(can)S 191 x(contain)S 192 x(wildcards,)S 196 x(but)S 191 x(it)S
190 x(must)S 190 x(be)S 191 x(a)S 191 x(valid)S 191 x(CMS)S 190 x(library)S
191 x(directory)S 10773 X 548 y(speci\211cation)S 199 x(\(i.e.)S 314 x
(VMS$:[YELLOW_TEST)S -47 x(.CMS]\).)S 199 x(An)S 198 x(example)S 198 x
(of)S 198 x(a)S 10773 X 548 y(wildcarded)S 183 x(speci\211cation)S 185 x
(would)S 183 x(be:)S 285 x(VMS$:[Y*.CMS].)S 185 x(This)S 184 x(speci\211cation)S
10773 X 548 y(would)S 166 x(process)S 166 x(all)S 165 x(libraries)S
166 x(that)S 166 x(start)S 165 x(with)S 166 x(the)S 166 x(letter)S 166 x
("Y".)S 10773 24098 XY F25(cms-command)S 10773 X 597 y F151(Speci\211es)S
185 x(speci\211es)S 184 x(any)S 186 x(valid)S 184 x(CMS)S 185 x(command.)S
287 x(The)S 185 x(command)S 185 x(should)S 185 x(be)S 10773 X 548 y
(enclosed)S 172 x(in)S 172 x(quotation)S 172 x(marks)S 172 x(to)S 172 x
(insure)S 172 x(that)S 171 x(the)S 172 x(entire)S 173 x(command)S 172 x
(is)S 171 x(passed)S 10773 X 548 y(to)S 180 x(CMS.)S 181 x(An)S 180 x
(example)S 181 x(using)S 181 x(the)S 181 x(CMS)S 180 x(SHOW)S 179 x
(RESER)S -20 x(V)S -56 x(A)S -27 x(TION)S 180 x(command)S 10773 X 548 y
(would)S 166 x(be:)S 10773 X 897 y(F)S -37 x(ACSERIA)S -2 x(L)S 167 x
(VMS$:[YELLOW_TES)S -2 x(T)S -45 x(.CMS])S 166 x("SHOW)S 165 x(RESER)S
-20 x(V)S -56 x(A)S -28 x(TIONS")S 5094 28431 XY 23160 204 R 5094 29250 XY
F24(COMMAN)S -2 x(D)S 5094 X 797 y(QUALIFIERS)S 10773 X -797 y F25(/LOG=\(log-type[,log-type,...]\))S
10773 X 548 y F151(Speci\211es)S 167 x(what)S 167 x(type)S 167 x(of)S
167 x(logging)S 169 x(the)S 167 x(user)S 168 x(wants.)S 250 x(The)S
168 x(default)S 167 x(is)S 167 x(that)S 167 x(the)S 167 x(user)S 10773 X
548 y(will)S 177 x(only)S 179 x(see)S 178 x(messages)S 177 x(from)S
178 x(the)S 179 x(utility)S 178 x(pertaining)S 179 x(to)S 178 x(the)S
178 x(libraries)S 177 x(being)S 10773 X 548 y(processed)S 166 x(or)S
166 x(skipped.)S 249 x(The)S 167 x(list)S 165 x(of)S 166 x(acceptable)S
166 x(log)S 167 x(types)S 166 x(is:)S 10773 X 897 y(\201)S 595 x([NO]ALL)S
165 x(-)S 166 x(Log)S 167 x(all)S 166 x(messages)S 10773 X 896 y(\201)S
595 x([NO]LIBR)S -2 x(AR)S -19 x(Y)S 166 x(-)S 166 x(Log)S 167 x(only)S
167 x(message)S 165 x(pertaining)S 167 x(to)S 166 x(libraries)S 10773 X
897 y(\201)S 595 x([NO]CMS)S 165 x(-)S 166 x(Log)S 167 x(error)S 166 x
(messages)S 166 x(recieved)S 166 x(from)S 166 x(CMS)S 27981 36925 XY
F36(1)S
EP PP
%%PageTrailer
%%PageFonts: Helvetica-Bold Helvetica
%%+ Helvetica-Oblique NewCenturySchlbk-Roman
%%+ Helvetica-BoldOblique
%%PageProcessColors:
%%PageCustomColors: (BLACK)
%
%%Page: (2) 4
%%PageFonts: (atend)
%%PageProcessColors: (atend)
%%PageCustomColors: (atend)
PaperHeight PaperWidth PM 0 0 XY
0 SC 5094 1807 XY F24(F)S -38 x(ACSERIA)S -2 x(L)S 10773 5022 XY F25
(/PROCESS=\(attribute[,attribute,...]\))S 10773 X 598 y F151(The)S 193 x
(PROCESS)S 192 x(quali\211er)S 193 x(is)S 192 x(used)S 193 x(to)S 192 x
(identify)S 193 x(what)S 193 x(libraries)S 192 x(are)S 193 x(to)S 193 x
(be)S 10773 X 547 y(processed.)S 272 x(Some)S 178 x(libraries)S 177 x
(have)S 178 x(special)S 178 x(attributes)S 176 x(associated)S 177 x
(with)S 177 x(them,)S 10773 X 548 y(VMSCMS$NO_PROP)S -38 x(AGA)S -29 x
(TE.FLAG)S 178 x(is)S 178 x(an)S 178 x(example)S 179 x(of)S 177 x(an)S
179 x(attribute.)S 273 x(This)S 10773 X 548 y(attribute)S 177 x(indicates)S
177 x(that)S 177 x(this)S 177 x(library)S 177 x(is)S 177 x(not)S 177 x
(to)S 177 x(have)S 178 x(any)S 178 x(code)S 177 x(propagation)S 10773 X
548 y(performed)S 179 x(within)S 178 x(it.)S 273 x(The)S 179 x(process)S
178 x(quali\211er)S 179 x(is)S 178 x(used)S 179 x(to)S 178 x(selectively)S
178 x(process)S 10773 X 548 y(or)S 181 x(skip)S 180 x(libraries)S 181 x
(marked)S 181 x(with)S 180 x(certain)S 181 x(attributes.)S 278 x(The)S
181 x(list)S 180 x(of)S 181 x(acceptable)S 10773 X 548 y(attributes)S
166 x(is:)S 10773 X 897 y(\201)S 595 x([NO]ALL)S 165 x(-)S 166 x(process)S
166 x(all)S 166 x(libraries)S 165 x(no)S 167 x(matter)S 165 x(what)S
166 x(attribute)S 166 x(it)S 166 x(may)S 166 x(have)S 10773 X 896 y
(\201)S 595 x([NO]AR)S -2 x(CHIVEDF)S -38 x(ACILITY)S 165 x(-)S 166 x
(process)S 165 x(all)S 166 x(archived)S 167 x(libraries)S 10773 X 897 y
(\201)S 595 x([NO]FLAGFRE)S -2 x(E)S 166 x(-)S 166 x(process)S 166 x
(libraries)S 165 x(with)S 166 x(not)S 166 x(attributes)S 10773 X 897 y
(\201)S 595 x([NO]NOPR)S -2 x(OP)S -37 x(AGA)S -28 x(TE)S 166 x(-)S
166 x(process)S 165 x(libraries)S 166 x(marked)S 166 x(no)S 167 x(propagate)S
5094 36925 XY F36(2)S
EP PP
%%PageTrailer
%%PageFonts: Helvetica-Bold Helvetica-BoldOblique
%%+ NewCenturySchlbk-Roman
%%PageProcessColors:
%%PageCustomColors: (BLACK)
%
%%Trailer
%%Pages: 4
%%BoundingBox: 0 0 612 792
%%DocumentFonts: NewCenturySchlbk-Roman
%%+ Helvetica-Bold Helvetica-Oblique
%%+ Helvetica Helvetica-BoldOblique
%%DocumentNeededFonts: NewCenturySchlbk-Roman
%%+ Helvetica-Bold Helvetica-Oblique
%%+ Helvetica Helvetica-BoldOblique
%%DocumentProcessColors:
%%DocumentCustomColors: (BLACK)
%%CMYKCustomColor: 0.0 0.0 0.0 1.0 (BLACK)
%
DVC$PSJob restore
end %DEC_DVC$dict
end %Color5044Dict
%
%%EOF
