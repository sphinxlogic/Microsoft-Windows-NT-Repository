<COMMENT>

 File :		SEND.SDML
 Author :	Darrell Burkhead
		COPYRIGHT © 1994, MADGOAT SOFTWARE.  ALL RIGHTS RESERVED.
 Date :		April 15, 1994

 Description:

	This file is used to generate the on-line help for SEND. 
	The following commands are necessary to create the help
	library.

		$ DOCUMENT SEND HELP HLP		! Creates SEND.HLP
		$ LIBRARY/REPLACE/HELP dev:[dir]lib SEND

 Revision History:

	V1.0		Darrell Burkhead	15-APR-1994 14:33
		Genesis.

<ENDCOMMENT>

<DEFINE_SYMBOL>(CMD\SEND)

<COMMAND_SECTION>()
<COMMAND>(<REFERENCE>(CMD))
<OVERVIEW>
Sends messages to users or terminals within the VMScluster.
<ENDOVERVIEW>

<FORMAT>
<FCMD>(SEND) <FPARMS>([/qualifiers] destination[,...] [message])
<QUAL_LIST>
<QPAIR>(/BOTTOM)
<QPAIR>(/CLUSTERWIDE\/NOCLUSTERWIDE)
<QPAIR>(/LOG\/NOLOG)
<QPAIR>(/NODE=node)
<QPAIR>(/PROMPT\/PROMPT)
<QPAIR>(/TERMINAL=terminal)
<QPAIR>(/TOP)
<QPAIR>(/USER=user)
<QPAIR>(/WAIT[=time]\/NOWAIT)
<ENDQUAL_LIST>
<ENDFORMAT>

<PARAMDEFLIST>
<PARAMITEM>(destination)
<PARAMDEF>
Specifies one or more users or terminals to receive the message(s)
being sent.  The following destination formats are supported:

<TABLE>
<TABLE_SETUP>(2\15)
<TABLE_ROW>(user\The name of a user on the DECnet node to which you are
		connected.)
<TABLE_ROW>(terminal\The name of a terminal on the DECnet node to which you
		are connected.)
<TABLE_ROW>(node::user\The name of a user on another DECnet node in the
		VMScluster.)
<TABLE_ROW>(node::terminal\The name of a terminal on another DECnet node in
		the VMScluster.)
<ENDTABLE>
<PARAMITEM>(message)
<PARAMDEF>
Specifies the text of the message to send.  If this parameter is
omitted, you will be prompted for one or more messages.
<NOTE>
DCL uppercases everything on the command line that is not surrounded
by double quote <PARENDCHAR>(") characters, so you should use double
quotes if you want to preserve the case of your message.
<ENDNOTE>
<ENDPARAMDEFLIST>

<QUALDEFLIST>
<QUALITEM>(/BOTTOM)
<QUALDEF>
Specifies that the message should be written to the bottom line of the
destination terminal(s).  This qualifier has no effect on messages
sent to terminals without the DEC_CRT characteristic.
<QUALITEM>(/CLUSTERWIDE\/NOCLUSTERWIDE (D))
<QUALDEF>
Controls whether a message should be sent to all DECnet nodes of the
VMScluster.  For a terminal destination, this means questioning all of
the nodes of the VMScluster to determine the DECnet node on which the
terminal is located.

<P>
This qualifier is positional, so it has a different effect depending
upon where it appears within the command line.  If it appears directly
after the <REFERENCE>(CMD) command, then it applies to all
destinations.  If it appears directly after a destination, then it
applies to that destination only.
<QUALITEM>(/LOG\/NOLOG (D))
<QUALDEF>
Controls whether information is displayed about the status
of the command and/or the messages sent.  For user destinations, the
information displayed includes:

<LIST>(UNNUMBERED)
<LE>the number of terminals that received the message;
<LE>the number of terminals for which <REFERENCE>(CMD) timed-out trying
to send the message (see /WAIT for more information);
<LE>the number of terminals for which <REFERENCE>(CMD) messages have
been disabled (see Disabling for more information).
<ENDLIST>

<P>
This qualifier is positional, so it has a different effect depending
upon where it appears within the command line.  If it appears directly
after the <REFERENCE>(CMD) command, then it applies to all
destinations.  If it appears directly after a destination, then it
applies to that destination only.
<QUALITEM>(/NODE=node)
<QUALDEF>
Specifies the DECnet node name that should appear in messages sent to remote
DECnet nodes.  CMKRNL privilege is required to use this qualifier.
<QUALITEM>(/PROMPT (D)\/NOPROMPT)
<QUALDEF>
Controls whether a prompt is displayed when reading messages to be
sent.  The prompt will either take the form ``name:'' for
users or terminals on the same DECnet node, or ``(node)name:'' for
users or terminals on another DECnet node.  The first destination specified
on the command line is used to build the prompt, though the message
text entered will be sent to all destinations specified.  If an error is
detected while sending messages to this destination, then a new prompt
will be generated based on the next destination, etc.
<NOTE>
You can spawn a subprocess by starting the line with <INTERACTIVE>($).
<ENDNOTE>
<QUALITEM>(/TERMINAL=terminal)
<QUALDEF>
Specifies the terminal name that should appear in messages sent to
users on the same DECnet node.  CMKRNL privilege is required to use this
qualifier.
<QUALITEM>(/TOP)
<QUALDEF>
Specifies that the message should be written to the top line of the
destination terminal(s).  This qualifier has no effect on messages
sent to terminals without the DEC_CRT characteristic.
<QUALITEM>(/USER=user)
<QUALDEF>
Specifies the username that should appear in messages sent.
CMKRNL privilege is required to use this qualifier.
<QUALITEM>(/WAIT[=time]\/NOWAIT (D))
Specifies the amount of time (in seconds) to allow for a message to be
sent.  By default, <REFERENCE>(CMD) will wait for 5 seconds before
``timing out'' on a particular terminal.  5 seconds is the minimum
amount of time to wait.  /WAIT, or /WAIT=0, means to wait indefinitely
for the message to be sent.
<ENDQUALDEFLIST>

<DESCRIPTION>(Disabling)
You can turn off receipt of <REFERENCE>(CMD) messages with the
following DCL command:

<INTERACTIVE>
<S>($ )<U>(SET BROADCAST=NOUSER1)
<ENDINTERACTIVE>

<P>
which disables broadcast messages from the USER1 broadcast class, the
broadcast class used by <REFERENCE>(CMD).
<ENDDESCRIPTION>

<DESCRIPTION>(Spawning)
You can spawn a subprocess from within <REFERENCE>(CMD) by specifying
<INTERACTIVE>($) as the first character of message text.  If
<INTERACTIVE>($) is the only thing on the line, then a subprocess will
be created running DCL and control will be passed to that subprocess. 
If a command appears after the <INTERACTIVE>($), then the command will
be executed in a subprocess and control will be returned to
<REFERENCE>(CMD) once the command is finished.
<ENDDESCRIPTION>

<EXAMPLE_SEQUENCE>
<EXI><S>($ )<U>(<REFERENCE>(CMD) SMITHJB "Hello")
<EXTEXT>
This example shows how to send a single message to a user on the same
DECnet node.  The message displayed on SMITHJB's terminal(s) will look like:

<INTERACTIVE>
user(terminal) - Hello
<ENDINTERACTIVE>

<P>
where ``user'' is your username and ``terminal'' is your terminal
name.
<EXI><S>($ )<U>(<REFERENCE>(CMD) WKUVX1::SMITHJB "Hello")
<EXTEXT>
This example shows how to send a single message to a user on a
different DECnet node.  The message displayed on SMITHJB's terminal(s) will
look like:

<INTERACTIVE>
(node)user - Hello
<ENDINTERACTIVE>

<P>
where ``node'' is the name of the DECnet node to which you are connected
and ``user'' is your username.  This message format would not be used
if you were logged into WKUVX1.  Messages to ``node::user'' where
``node'' is the name of the DECnet node to which you are connected
are treated the same as messages to ``user.''
<EXI><S>($ )<U>(<REFERENCE>(CMD) SMITHJB)
<S>(        SMITHJB: )<U>(Hello)
<S>(        SMITHJB: )<U>(How are you?)
<EXTEXT>
This example shows how to send multiple messages to a user on the same
node.  <REFERENCE>(CMD) will keep prompting for more messsages until a
blank line or Ctrl-Z is read.  The prompt for sending a message to a
user or terminal on a remote node looks like
<INTERACTIVE>((node)name:).
<EXI><S>($ )<U>(<REFERENCE>(CMD) SMITHJB)
<S>(        SMITHJB: )<U>(Hello)
<S>(%SEND-E-NOTLOGIN, User SMITHJB is not logged in)
<S>($)
<EXTEXT>
This example demonstrates the error message that is displayed when you
attempt to send a message to a user that is not logged in.
<EXI><S>($ )<U>(<REFERENCE>(CMD) SMITHJB)
<S>(        SMITHJB: )<U>(Hello)
<S>(%SEND-E-NOTRCVING, SMITHJB is not receiving messages)
<S>($)
<EXTEXT>
This example demonstrates the error message that is displayed when you
attempt to send a message to a user or terminal that has disabled
<REFERENCE>(CMD) messages.  You can disable <REFERENCE>(CMD) messages
with the following DCL command:

<INTERACTIVE>
<S>($ )<U>(SET BROADCAST=NOUSER1)
<ENDINTERACTIVE>
<EXI><S>($ )<U>(<REFERENCE>(CMD) SMITHJB/LOG)
<S>(        SMITHJB: )<U>(Hello)
<S>(%SEND-S-SENT, SMITHJB 1 terminals received, 0 timed out,0 not receiving)
<EXTEXT>
This example demonstrates the information that is displayed as a
result of the /LOG qualifier.
<EXI><S>($ )<U>(<REFERENCE>(CMD) SMITHJB)
<S>(        SMITHJB: )<U>($ MAIL)
<S>(MAIL> )
<EXTEXT>
This example shows how to spawn a subprocess from within
<REFERENCE>(CMD).  If a command appears after the <INTERACTIVE>($),
then the command will be executed and control will return to
<REFERENCE>(CMD) once the spawned command is finished.  If no command
appears after the <INTERACTIVE>($), then the subprocess will begin
prompting for commands.
<ENDEXAMPLE_SEQUENCE>
