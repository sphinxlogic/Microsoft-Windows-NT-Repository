	.TITLE	SYSPDUMP - Process Dump System Service
	.IDENT	/V2.0/

;++
;
; Copyright © 1996 by Kari Salminen. This code may be freely distributed and
; modified for non-commercial purposes as long as this copyright notice is
; retained.
;
; This software is provided "AS IS". The author makes no representations or
; warranties with respect to the software and specifically disclaim any implied
; warranties of merchantability or fitness for any particular purpose.
;
;
;
; FACILITY:     EXECUTIVE, SYSTEM SERVICES
;
; ABSTRACT:
;
;       This system service creates a process dump from a process.
;
;	The Process Dump System Service will use the name GETEVI.
;	It is of one the never implemented system services with the
;	symbols shipped in V1.5 and hence they remain forever.
;	It saves us alot work to use a pre-defined system service, rather
;	than implementing a new one.
;
;	EXE$GETEVI - Dump a process system service
;	SYS$GETEVI - Dump a process system service
;
; ENVIRONMENT:
;
;       Runs in User and Kernel mode. Raises IPL to SCHED.
;
;
; VERSION:      01.00
;
; AUTHOR:	Kari Salminen 
;
; DATE:         5-SEP-1996
;
;
; MODIFIED BY:
;
;	V2.0    27-MAY-1997     Kari Salminen
;				V7 port.
;
;

	$ACBDEF			; AST control block
        $ASTSTKDEF              ; AST stack offsets
	$BRKDEF			; BRKTHRU classes
	$CHFDEF			; Condition handling offsets
	$CHFCTXDEF		; CHF context offsets
	$DYNDEF			; Dynamic memory block definitions
        $IMCBDEF                ; Image control block definitions
	$INTSTKDEF		; Exception frame offsets
	$IPLDEF			; Interrupt priority levels
	$JIBDEF			; Job information block offsets
	$NSADEF			; Security auditing definitions
	$PCBDEF			; Process control block
	$PDSCDEF		; Procedure Descriptor offsets
	$PHDDEF			; Process header offsets
	$PRDEF			; Processor registers
	$PRIDEF			; Priority increment classes
	$PRVDEF			; Process privilege definitions
	$PSLDEF			; Processor status definitions
	$SSDEF			; Status codes
	$STATEDEF		; Scheduler state definitions


PIDADR	=  4			; Displacement to PID address
PRCNAM	=  8			; Displacement to process name
CODE	= 12			; Displacement to code parameter

MAX_IREG_MASK   =  27		; Maximum # of registers in IREG mask
MAX_FREG_MASK   =  30		; Maximum # of registers in FREG mask


CHFCTX_R_MCHARGLST      =  CHFCTX$C_LENGTH
CHFCTX_C_FIXED_BYTES    =  CHFCTX$C_LENGTH + CHF$S_CHFDEF2
CHFCTX_C_FIXED_SIZE     =  <<CHFCTX_C_FIXED_BYTES+15> & ^C<15>>

NO_MCH_ARGS 		=  43		; # of agrs in mechanism array 


;****************************************************************************


	.SBTTL	EXE$GETEVI - Dump a process system service

;++
; Functional description:
;
; Calling sequence:
;
;	CALLG	ARGLIST,EXE$GETEVI
;
; Input parameters:
;	PIDADR(AP)  - Address of PID
;	ARG2(AP)    - Dummy
;	ARG3(AP)    - Dummy
;	R4          - PCB address of current process
;
; Implicit inputs:
;	None
;
; Output parameters:
;	R0          - Completion status, always success
;
; Implicit outputs:
;	None
;
; Completion codes:
;	SS$_NORMAL      - Successful completion
;	SS$_INSFMEM     - Insufficient dynamic memory
;	SS$_NONEXPR     - Non-existent process
;	SS$_NOPRIV      - Insufficient privilege to control detached process
;	SS$_SUSPENDED	- PHD not resident
;
; Side effects:
;	None
;
;--
	DECLARE_PSECT	EXEC$NONPAGED_CODE

	SYSTEM_SERVICE	GETEVI,-
			<R2,R3,R4,R5,R6,R7,R8,R9>,-
			MODE=KERNEL,-
			NARG=3,-
			HOME_ARGS=TRUE

	IFPRIV	WORLD,30$,R4		; Success if WORLD privilege

	MOVL	#SS$_NOPRIV,R0		; No privilege
	BRB	EXIT

30$:	MOVL	PCB$L_EPID(R4),R7	; Save callers PID

	MOVL	#NSA$C_PRC_SIGPRC,R0	; Process control audit msg type
					; Exception condition in another process
	JSB	EXE$NAM_TO_PCB		; Convert name/PID pair
					; SCHED acquired on success
	BLBC	R0,EXIT			; Exit if error


;
;	See if we can deliver the AST
;
	BBS	#PCB$V_SUSPEN,PCB$L_STS(R4),3$	; Process suspended, error exit
	BBS	#PCB$V_DELPEN,PCB$L_STS(R4),4$	; Delete pending

	CMPL	#SCH$C_SUSP,PCB$L_STATE(R4)     ; Process suspended
	BEQL	4$
	CMPL	#SCH$C_SUSPO,PCB$L_STATE(R4)    ; Suspended out of memory
	BEQL	4$
	CMPL	#SCH$C_MWAIT,PCB$L_STATE(R4)    ; MWAIT state
	BEQL	4$

	.BRANCH_LIKELY
	BBS     #PCB$V_PHDRES,PCB$L_STS(R4),10$  ; PHD resident, ok

3$:	MOVL	#SS$_SUSPENDED,R0	; PHD not resident
	BRB	5$			; Exit

4$:	MOVL	#SS$_NONEXPR,R0		; Error, process being deleted

5$:	UNLOCK	LOCKNAME=SCHED,-	; No, unlock SCHED database
		NEWIPL=#0,-		; Drop IPL
		PRESERVE=YES,- 		; Preserve R0
		CONDITION = RESTORE	; Release only our lock

	BRB	EXIT			; Exit


10$:	MOVL	PCB$L_PHD(R4),R0		; PHD
	BISL	#PHD$M_IMGDMP,PHD$L_FLAGS(R0)	; Set dump requested		

	UNLOCK	LOCKNAME=SCHED,-	; Unlock SCHED database
		NEWIPL=#0,-		; Drop IPL
		PRESERVE=NO		; Don't preserve R0

	MOVL	R1,R6			; Save PID

	JSB	EXE$ALLOCIRP		; Allocate AST control block
	.BRANCH_UNLIKELY
	BLBC	R0,EXIT			; Exit if error

;
;	 --------------
;	| ACB$L_ASTQFL |  0		; AST Queue forward link
;	 --------------
;	| ACB$L_ASTQBL |  4		; AST Queue backward link
;  ----------------------------------------
; | ACB$B_RMOD | ACB$B_TYPE | ACB$W_SIZE   |  8 ; Size, type, access mode
;  ----------------------------------------
;	| ACB$L_PID    | 12		; Process ID of request
;	 --------------
;	| ACB$L_AST    | 16		; AST routine address
;	 --------------
;	| ACB$L_ASTPRM | 20		; AST parameter
;	 --------------
;	| ACB$L_KAST   | 32		; Internal kernel mode xfer address
;	 --------------
;

; R2 -> ACB to deliver to target
; R4 -> PCB of target process
; R6 -> PCB of current process
;

	MOVB	#PSL$C_USER,ACB$B_RMOD(R2) ; Access mode

	MOVL	R6,ACB$L_PID(R2)	; PID of destination
	MOVAB	DO_PDUMP_X,ACB$L_AST(R2); And address of AST routine
	MOVL	R7,ACB$L_ASTPRM(R2)	; PID of caller
	CLRL	ACB$L_KAST(R2)		; No KAST

	MOVL	R2,R5			; AST control block address for QAST
	MOVZBL	#PRI$_RESAVL,R2		; Set priority increment class

	JSB	SCH$QAST		; Queue ACB for target process

	MOVZWL	#SS$_NORMAL,R0		; Normal completion status

EXIT:	SETIPL	#0			; Drop IPL lower
	RET				; Return to caller


;***************************************************************************


	DECLARE_PSECT	EXEC$PAGED_CODE

;
;	This entry is needed for AMACRO to resolve the DO_PDUMP_X as
;	.LINKAGE and not as .ADDRESS
;
;
; Input parameters:
;       4(AP) - AST parameter, PID of caller
;

DO_PDUMP_X:
	.CALL_ENTRY PRESERVE=<R0,R1,R2,R3,R4,R5,R6>, MAX_ARGS=1, HOME_ARGS=TRUE

        CALLS   #0, SYS$CLRAST          ; Clear ast active flag

	MOVL	4(AP),R1		; Callers PID

	BSBW	DO_PDUMP		; Build the exception frame and
					; call IMGDMP_MERGE

	RET				; Return

;***************************************************************************


;++
;
; FUNCTIONAL DESCRIPTION:
;
;       This subroutine obtains the original FP, R26, SP and other regs.
;
;
; CALLING SEQUENCE:
;
;       JSB     SYSPDUMP_SUB
;
; INPUTS:
;
;       R1  =   Caller's PID
;       R2  =   Address of Exception Context area
;	R3  =	Address of 64-bit Signal Array
;       R4  =   Address of Mechanism Array
;       R5  =   Address of Signal Array
;       R6  =   Address of Exception Frame
;
; OUTPUTS:
;
;	None
;
;--

SYSPDUMP_SUB::
	.JSB_ENTRY	INPUT=<R1,R2,R3,R4,R5,R6>,PRESERVE=<R8,R9>

;	Get previous FP and R26	

	MOVL	R1,R8			; AST parameter, PID of caller

	MOVL	R3,R7			; Address of exception record

        EVAX_OR R29,R31,R3              ; Get current FP

;	Find the Kernel AST delivery frame

	PUSHR   #^M<R2,R4,R5,R6,R7,R8,R9> ; Save regs

2$:	BSBW	CHF_CHECK_ASTDEL	; Check if AST dispatcher frame
	BLBS	R0,10$			; Yes

	EVAX_STQ R3,CHFCTX$Q_EXPT_FP(R2); Save Previous of Previous FP 

	BSBW    CHF_GET_PREVIOUS_FP		; Get previous frame
	EVAX_STQ R3,CHF$PH_MCH_FRAME(R4)	; Save Previous FP 
        BLBS    R0,2$				; Ok

;
;	Error, send message to caller's terminal
;
	POPR	#^M<R2,R4,R5,R6,R7,R8,R9> ; Restore regs

;PID:
	MOVAL	-(SP),R4	; PID address
	MOVL	R8,(R4)		; PID

;Terminal:
	SUBL	#16,SP		; Terminal name
	MOVAL	-(SP),R0	; Address of terminal name
	MOVAL	(SP),-(SP)	; Descriptor: address
	MOVAL	-(SP),R5	; Descriptor: length

;Item_list:
	CLRL	-(SP)			; Terminator
	PUSHL	R5			; Address of return length
	PUSHL	R0			; Address of name buffer
	PUSHL	#<JPI$_TT_PHYDEVNAM@16>!15 ; Name buffer length and item code

	MOVL	SP,R2			; Address of item list

	$GETJPIW_S      PIDADR=(R4),ITMLST=(R2)	; Get terminal name
	BLBS	R0,500$			; Ok

	ADDL	#48,SP			; Restore SP
	BRB	1000$			; Error, give up

500$:	MOVL	#^A/hain/,-(SP)		; Error message
	MOVL	#^A/ll c/,-(SP)
	MOVL	#^A/n ca/,-(SP)
	MOVL	#^A/or i/,-(SP)
	MOVL	#^A/ript/,-(SP)
	MOVL	#^A/desc/,-(SP)
	MOVL	#^A/ure /,-(SP)
	MOVL	#^A/oced/,-(SP)
	MOVL	#^A/l pr/,-(SP)
	MOVL	#^A/lega/,-(SP)
	MOVL	#^A/, il/,-(SP)
	MOVL	#^A/TACK/,-(SP)
	MOVL	#^A/BADS/,-(SP)
	MOVL	#^A/P-F-/,-(SP)
	MOVL	#^A/PDUM/,-(SP)
	MOVL	#^A/%SYS/,-(SP)

	MOVL	SP,-(SP)		; Message address
	PUSHL	#64			; Message length
	MOVL	SP,R0			; Address of MSGBUF

	$BRKTHRU_S	MSGBUF=(R0) ,-		; Broadcast the message
			SENDTO=(R5) ,-		; Terminal name
			SNDTYP=#BRK$C_DEVICE ,-	; Only this terminal
			EFN=#31			; Efn 31

	ADDL	#120,SP				; Restore SP

	BRB	1000$			; Ret

;****************************************************************
;
10$:
;
;	Get PC of the target process at AST delivery
;
;	The stack looks now like:
;
;FP ==>	7ED31880  FFFFFFFF.9944E570  PDSC, SCH$ASTDEL_C
;	7ED31888  00000000.00000000
;	7ED31890  FFFFFFFF.99440FA0  CHF$GR_LINKAGE_SECTION
;	7ED31898  00000000.13131313  R13
;	7ED318A0  00000000.14141414  R14
;	7ED318A8  00000000.7ED31A60  R29
;	7ED318B0  00000000.00000001  Flags (FEN yes/no)
;
;;;---------------------------------------------------------------------
;;;
;;;     Uncomment the next instruction for test purposes:
;;;
;;;	BPT                     ; = CALL_PAL 128
;;;
;;;     - run a looping/hanging test program with debugger
;;;     - use it as target process for SYSPDUMP
;;;     - debugger gains control at breakpoint
;;;     - analyze with SDA/DEBUGGER the call frames/exception data structures
;;;
;;;	- to continue from the breakpoint (activate instruction window):
;;;
;;;	DBG> exa/ins @pc
;;;	0FFFFFFFF9E94265C:              BPT
;;;	DBG> exa/ins @pc+4
;;;	0FFFFFFFF9E942660:              LDL             R0,(R3)
;;;	DBG> dep pc=0FFFFFFFF9E942660
;;;	DBG> set step/inst
;;;	DBG> step
;;;	
;;;---------------------------------------------------------------------

	MOVL	(R3),R0				; Get PDSC
	MOVL	PDSC$L_SIZE(R0),R0		; Get size of frame
	ADDL3	R3,R0,R0			; Point to AST stack FLAGS

	BLBC	ASTSTK$Q_FLAGS(R0),16$		; No floating point registers
;
;	Floating point registers saved, get F0 and F1 from ASTSTK
;
	EVAX_LDQ R1,ASTSTK$Q_F0(R0)		; Get F0 from ASTSTK area
	EVAX_STQ R1,CHF$FH_MCH_SAVF0(R4)	; Save F0 into mechanism array
	EVAX_LDQ R1,ASTSTK$Q_F1(R0)		; Get F1 from ASTSTK area
	EVAX_STQ R1,CHF$FH_MCH_SAVF1(R4)	; Save F1 into mechanism array

	ADDL	#<ASTSTK$C_FEN_LENGTH-ASTSTK$C_NO_FEN_LENGTH>,R0
						; Skip fp regs

; 	Get R0, R1 and R16 - R25 at the AST delivery

16$:	EVAX_LDQ R1,ASTSTK$S_NO_FEN_R0(R0)	; R0
	EVAX_STQ R1,CHF$IH_MCH_SAVR0(R4)	; 

	EVAX_LDQ R1,ASTSTK$S_NO_FEN_R1(R0)	; R1
	EVAX_STQ R1,CHF$IH_MCH_SAVR1(R4)	; 

	EVAX_LDQ R1,ASTSTK$Q_NO_FEN_R16(R0)	; Load saved R16
	EVAX_STQ R1,CHF$IH_MCH_SAVR16(R4)	; Store into mechanism array

	EVAX_LDQ R1,ASTSTK$Q_NO_FEN_R17(R0)	; Load saved R17
	EVAX_STQ R1,CHF$IH_MCH_SAVR17(R4)	; Store into mechanism array

	EVAX_LDQ R1,ASTSTK$Q_NO_FEN_R18(R0)	; Load saved R18
	EVAX_STQ R1,CHF$IH_MCH_SAVR18(R4)	; Store into mechanism array

	EVAX_LDQ R1,ASTSTK$Q_NO_FEN_R19(R0)	; Load saved R19
	EVAX_STQ R1,CHF$IH_MCH_SAVR19(R4)	; Store into mechanism array

	EVAX_LDQ R1,ASTSTK$Q_NO_FEN_R20(R0)	; Load saved R20
	EVAX_STQ R1,CHF$IH_MCH_SAVR20(R4)	; Store into mechanism array

	EVAX_LDQ R1,ASTSTK$Q_NO_FEN_R21(R0)	; Load saved R21
	EVAX_STQ R1,CHF$IH_MCH_SAVR21(R4)	; Store into mechanism array

	EVAX_LDQ R1,ASTSTK$Q_NO_FEN_R22(R0)	; Load saved R22
	EVAX_STQ R1,CHF$IH_MCH_SAVR22(R4)	; Store into mechanism array

	EVAX_LDQ R1,ASTSTK$Q_NO_FEN_R23(R0)	; Load saved R23
	EVAX_STQ R1,CHF$IH_MCH_SAVR23(R4)	; Store into mechanism array

	EVAX_LDQ R1,ASTSTK$Q_NO_FEN_R24(R0)	; Load saved R24
	EVAX_STQ R1,CHF$IH_MCH_SAVR24(R4)	; Store into mechanism array

	EVAX_LDQ R1,ASTSTK$Q_NO_FEN_R25(R0)	; Load saved R25
	EVAX_STQ R1,CHF$IH_MCH_SAVR25(R4)	; Store into mechanism array

	EVAX_LDQ R1,ASTSTK$Q_NO_FEN_R26(R0)	; Load saved R26
	EVAX_STQ R1,CHF$IH_MCH_SAVR26(R4)	; Store into mechanism array

	EVAX_LDQ R1,ASTSTK$Q_NO_FEN_R27(R0)	; Load saved R27
	EVAX_STQ R1,CHF$IH_MCH_SAVR27(R4)	; Store into mechanism array

	EVAX_LDQ R1,ASTSTK$Q_NO_FEN_R28(R0)	; Load saved R28
	EVAX_STQ R1,CHF$IH_MCH_SAVR28(R4)	; Store into mechanism array


	ADDL	#ASTSTK$C_NO_FEN_LENGTH,R0	; Skip integer regs

;	Now R0 points to AST interrupt stack frame

	EVAX_LDQ R26,INTSTK$Q_PC(R0)		; PC at AST delivery

	EVAX_LDQ R1,INTSTK$Q_R2(R0)		; R2
	EVAX_STQ R1,INTSTK$Q_R2(R6)		; 

	EVAX_LDQ R1,INTSTK$Q_R5(R0)		; R5
	EVAX_STQ R1,INTSTK$Q_R5(R6)		; 

;	Get original SP, needed for fixed stack frame procedure in UNWIND.

	EVAX_LDQ  R1,INTSTK$Q_PS(R0)		; Get exception PS
	EVAX_SRL  R1,#PR$V_PS_SP_ALIGN,R1	; Shift alignment bits to <5:0>
	EVAX_ADDQ R3,#INTSTK$C_LENGTH,R2	; Get bottom of exception frame
	EVAX_OR   R2,R1,R1			; Get original user SP

	POPR	#^M<R2,R4,R5,R6,R7,R8,R9>	; Restore regs

	EVAX_STQ R1,CHFCTX$Q_UNWIND_SP(R2)	; Original SP

	MOVL	 R26,CHF$L_SIG_ARG1(R5)		; Use RA as exception PC, signal

	EVAX_STQ R26,INTSTK$Q_PC(R6)		; Use RA as exception PC

;	Save if Previous FP, needed if register frame procedure

	EVAX_STQ R3,CHF$PH_MCH_FRAME(R4)   ; Previous FP into mechanism array
		
;	Get original FP and R27

;	One frame down is the original before AST delivery

	BSBW	CHF_GET_PREVIOUS_FP	; User FP at the time of AST delivery

;	Get the procedure descriptor, R27

	EVAX_LDQ   R0,0(R3)			; Fetch quadword at FP = PDSC

	EVAX_STQ   R0,CHFCTX$Q_LINKAGE_PTR(R2)	; Addr of establisher frame


;\\\\\\\\\ ???

        EVAX_STQ   R0,CHF$IH_MCH_SAVR27(R4) 	; Store into mechanism array

;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

	EVAX_STQ R3,CHF$PH_MCH_FRAME(R4)   ; Previous FP into mechanism array
	EVAX_STQ R3,CHFCTX$Q_EXPT_FP(R2)   ; and into exception context

	EVAX_LDQ   R0,INTSTK$Q_PC(R6)		; Get exception PC
	EVAX_STQ   R0,CHF64$Q_SIG_ARG1(R7)	; into 64-bit signal array

	MOVL	#SS$_NORMAL,R0			; Success	

1000$:	RSB

	.END
