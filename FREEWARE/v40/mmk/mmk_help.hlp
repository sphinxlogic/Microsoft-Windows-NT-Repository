remove /KEEP.
1 MMK

 Invokes the MadGoat Make Utility (MMK) to build  a  software  system.
 Refer to the "Guide to MadGoat Make Utility" for complete information
 on this command.

 Format:
           MMK [target-name...]

 A description file must exist for MMK to build the  software  system.
 By  default,  MMK  looks for a description file called DESCRIP.MMS in
 the current default directory.  If that file does not exist, it  then
 looks  for a file called MAKEFILE.  The /DESCRIPTION qualifier can be
 used to override this default.
2 Parameter

 target-name

 The name of a target to be built.  The target must exist in  the  MMK
 description   file.    Multiple   targets   may  be  specified  as  a
 comma-separated list.
2 Qualifiers
/ACTION

 /ACTION (default)

 /NOACTION

 Determines  whether  action  lines  should  be  executed  or   merely
 displayed.   Specifying  /NOACTION  causes  MMK to display the action
 lines that would be executed to build the  target,  without  actually
 executing them.
/CHECK_STATUS

 /CHECK_STATUS

 /NOCHECK_STATUS (default)

 Directs MMK to determine whether  a  target  is  up-to-date,  without
 executing  any  action  lines  to  do so.  MMK sets the global symbol
 MMS$STATUS to 0 if the target requires updating, or 1 if  the  target
 is up-to-date.  This qualifier overrides the /ACTION qualifier.
/CMS

 /CMS

 /NOCMS (default)

 Determines whether a DEC/CMS library is  searched  automatically  for
 the description file and for any source files.  The default is not to
 search the currently set CMS library automatically.
/DESCRIPTION

 /DESCRIPTION=file-spec

 Specifies an alternative name for  the  MMK  description  file.   The
 default  description file name is DESCRIP.MMS (in the current default
 directory).
/DUMP

 /DUMP

 /NODUMP (default)

 Causes MMK to dump the suffixes  list,  all  macro  definitions,  all
 inference  rules, and all dependencies to current output.  Useful for
 debugging problems in description files.
/FORCE

 /FORCE

 /NOFORCE (default)

 Specifying /FORCE causes MMK to execute only the  action  lines  from
 the  dependency  rule for the target, without performing any revision
 date checks and without traversing the entire dependency tree.
/FROM_SOURCE

 /FROM_SOURCES

 /NOFROM_SOURCES (default)

 Specifying /FROM_SOURCES causes MMK to perform a  complete  build  of
 the target, without performing any revision date checks.  All actions
 to build all intermediate targets will be executed.   This  qualifier
 overrides the /SKIP_INTERMEDIATES qualifier.
/IDENTIFICATION

 /IDENTIFICATION

 Specifying  /IDENTIFICATION  causes  MMK  to  display  its   revision
 information  and  copyright  message,  without  performing  any other
 action.
/IGNORE

 /IGNORE

 /IGNORE=ERROR

 /IGNORE=FATAL

 /IGNORE=WARNING

 /NOIGNORE (default)

 By default, MMK stops when an  executed  action  line  results  in  a
 warning,  error,  or  fatal error status.  You can override this with
 the /IGNORE qualifier.  Specifying /IGNORE  or  /IGNORE=FATAL  causes
 all errors to be ignored, so execution continues no matter how severe
 an error is encountered.  Specifying /IGNORE=ERROR causes errors  and
 warnings  to  be  ignored,  with  fatal  errors  stopping  execution.
 Specifying /IGNORE=WARNING causes only warnings to be  ignored,  with
 errors at fatal errors stopping execution.
/LOCAL_RULES

 /LOCAL_RULES (default)

 /NOLOCAL_RULES

 Controls whether the site-specific default dependency rule definition
 file   is   read   in;   by  default,  it  is  if  the  logical  name
 MMK_LOCAL_RULES exists.  Specifying /NOLOCAL_RULES prevents the  file
 from being read in.
/LOG

 /LOG

 /NOLOG (default)

 Controls whether MMK logs a detailed  description  of  activity.   By
 default, it does not.
/MACRO

 /MACRO=file-spec | name[=value]...

 Defines one or more macros that can be referenced by the  description
 file.   If a name is specified with no equals sign ("="), it is first
 assumed to be  a  file  specification;  if  the  file  exists,  macro
 definitions  are  read from the file.  A file type of .MMS is assumed
 if no file type is specified.  If the file cannot be found, the  name
 is  treated  as macro definition, and a value of 1 is assigned to the
 macro by default.

 If an equals sign is present, the macro definition is taken  directly
 from the command line.

 Macro definitions contained in a file should have the same syntax  as
 macro  definitions  in description files, with the added restrictions
 that comments and line continuations are not allowed.
/OUTPUT

 /OUTPUT=file-spec

 Directs MMK output to the specified  file.   By  default,  output  is
 directed to SYS$OUTPUT.
/OVERRIDE

 /OVERRIDE

 /NOOVERRIDE (default)

 Determines the order in which macro  references  are  resolved.   The
 default  order  is  to  resolve macros from command-line definitions,
 followed by definitions in the description file and any rules  files,
 followed by MMK built-ins.  If a macro cannot be resolved from any of
 these sources, a check is made for a DCL symbol with the same name as
 the macro, and if present, the symbol's value is used.

 When /OVERRIDE is specified, DCL symbols are checked before the macro
 definitions  in  the  description and rules files, and before the MMK
 built-in macros.
/RULES_FILE

 /RULES_FILE

 /RULES_FILE=file-spec

 /RULES_FILE=(file-spec1,file-spec2,...)

 /NORULES_FILE (default)

 Specifies the name of one or more files containing default dependency
 rule  definitions  to  be  read  in  before  the  description file is
 processed.  If /RULES_FILE is specified with no  file  specification,
 the name MMS$RULES is used.
/SKIP_INTERMEDIATES

 /SKIP_INTERMEDIATES

 /NOSKIP_INTERMEDIATES (default)

 By default, MMK attempts to build missing source files if they can be
 built  through  the  application  of  dependency  or inference rules.
 Specifying /SKIP_INTERMEDIATES causes  MMK  to  treat  these  missing
 sources  as  if they exist and have the same revision date/time stamp
 as the target that depends on them.

 For example, if the target is a .EXE file which  depends  on  a  .OBJ
 file, and that .OBJ file in turn depends on a .C file, by default MMK
 will build the .OBJ file if it is missing, and then in turn build the
 .EXE.   If  /SKIP_INTERMEDIATES  is  specified, the missing .OBJ file
 will not trigger a build; the build will only occur if the .C file is
 newer than the .EXE file.
/VERIFY

 /VERIFY (default)

 /NOVERIFY

 Controls whether MMK echoes the  action  lines  it  is  executing  to
 SYS$OUTPUT.   By  default, it does; /NOVERIFY can be used to suppress
 this output.
