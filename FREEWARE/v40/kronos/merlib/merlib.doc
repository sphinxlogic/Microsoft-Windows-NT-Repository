********************************************************************************
********************************************************************************
**                                                                            **
**                                                                            **
**      MM     MM   EEEEEEEEE   RRRRRR      LL       IIIIIIII   BBBBBB        **
**      MMM   MMM   EEEEEEEEE   RRRRRRR     LL       IIIIIIII   BBBBBBB       **
**      MM M M MM   EE          RR    RR    LL          II      BB    BB      **
**      MM  M  MM   EE          RR    RR    LL          II      BB    BB      **
**      MM     MM   EEEEE       RRRRRRR     LL          II      BBBBBBB       **
**      MM     MM   EE          RR  RR      LL          II      BB   BB       **
**      MM     MM   EE          RR   RR     LL          II      BB    BB      **
**      MM     MM   EEEEEEEEE   RR    RR    LLLLLLL  IIIIIIII   BBBBBBBB      **
**      MM     MM   EEEEEEEEE   RR    RR    LLLLLLL  IIIIIIII   BBBBBBB       **
**                                                                            **
**                                                                            **
********************************************************************************
********************************************************************************


MERLIB is a collection of FORTRAN-callable subprograms which is intended to make
powerful, general-purpose routines available without the need for each user to
recode the utility.  A variety of useful routines for manipulating character
data and doing I/O are available.  A few routines are available for curve
fitting and file manipulations.  It is not intended to replace libraries such as
IMSL; there is little overlap in the functions between them.

The format of the entries in this document for each of the routines is :
      Subprogram Name
      Type
      Purpose
      Arguments
      Notes (if any).

The subprogram name is the name by which the subprogram is called.  The type is
either 'SUBROUTINE' or 'type FUNCTION' (e.g., LOGICAL FUNCTION).  The purpose is
self explanatory. The arguments are listed in the order in which they appear in
the argument list. Each argument is given a type and a mode; the mode refers to
whether the argument is used as an input, produced as an output, or used as an
input and then modified (update).  Notes are generally self-explanatory.

Most of the routines are solely the work of the authors.  The following routines
are included from DECUS releases; the authors are cited in the source code:
     CONTROL,  COPY,  DELAY,  DISK_SPACE,  NARGS,  GET_DEFAULT

The following routines came from text books; the references appear in the
source code:
     GAUSS, QSORT(I,R), SORT(I,R), ISORT, KURV1, KURV2, and INTRPL.

The routine LGI$HPWD contains a DEC copyright prohibiting distribution; for this
reason, no source code is provided.

On the MERLIN system, MERLIB is automatically searched every time a LINK
command is issued.  As such, there is no modification to your normal LINK step
unless specified otherwise.  Questions, suggestions, etc. regarding MERLIB 
should be addressed to the System Manager or System Programmer.

                  List of User Entry Points by Function
                  -------------------------------------


                        Character String Functions
                        --------------------------
ANY      - returns TRUE if any target character is in a string
ASCII    - convert strings to ASCII characters
BLANKS   - remove blanks from a string
CAPITAL  - capitalize the first character of a string
CAPS     - capitalize a string
CENTER   - center a text string
COMPRESS - compress multiple whitespace
DASCII   - convert ASCII characters to strings
FIRST    - find the first non-blank character in a string
ICOUNT   - count the number of a certain character in a string
ISALPHA  - determine if a character is alphanumeric
ISDIGIT  - determine if a character is a digit
ISLETTER - determine if a character is a letter
LEFT     - left justify a string
LENGTH   - return the length of a string to the last non-blank character
LENX     - return the length of a string excluding all controls and 8 bits
LOWER    - replace capital letters in a string with lower case
MATCH    - verify that a word is an abbreviation for a target string
MATCH_WORD- verify that a word containing wildcards matches a full-text word
NDEX     - find first occurrence of characters from end of string
REPLAC   - replace a character in a string with a different character
RIGHT    - right justify a string
STRIP_EXC- strip trailing exclamation point comments
TRIM     - remove trailing spaces from "C" string
UNTAB    - remove tabs from a string
VERIFY   - verify existence of only specified characters in a string
#
                         Numeric Functions
                         -----------------

DECHEX   - convert a number to a hexadecimal string
DECOCT   - convert a number to an octal string
HEX      - convert a byte to hexadecimal
HEXDEC   - convert a hexadecimal string to a number
IDIGIT   - extract a single digit from a number
OCTDEC   - convert an octal string to a number
ORDINAL  - converts a numeric string to its ordinal form
#
                        Interactive Terminal I/O
                        ------------------------
APPLICATION- sets an ANSI terminal to application keypad mode
CLEAR    - clear a CRT screen or send a formfeed
CONTROL  - set up control character intercept (except C and Y)
CURSOR   - get Tektronix 4014 cursor location
CURSOR_LEFT - move the cursor right on a VT100
CURSOR_RIGHT -move the cursor left on a VT100
EDIT     - edit a character string on a VT100 screen
G4ALFA   - returns a Graphon 407 to alpha mode
G4GRAF   - sets a Graphon 407 to graphics mode
GETCHAR  - wait until a character is typed at the terminal
GETSTRING- get a string from the terminal keyboard
GETTERM  - return the terminal name of the controlling terminal
GETXY    - get the present cursor location on an ANSI CRT
GET_TERM_SIZE- return the number of columns and rows on terminal
GOTOXY   - position the cursor on an ANSI CRT
GPALFA   - return a GP-29 terminal to alpha mode
GRALFA   - return a Graphon terminal to alpha mode
KEYHIT   - check to see if a key was struck
MBELL    - ring the bell
NUMERIC  - sets an ANSI compatible terminal to numeric keypad mode
PCALFA   - return a PC running MSKERMIT to alpha mode
PROMPT   - produce a prompt string
PUTCHAR  - put a character string to terminal without carriage control
PUTSTRING- put a string to the terminal screen
READINT  - read an integer from the terminal
READKEY  - read a VT100/200 key
READQ    - read a string from the keyboard without echo
READT    - read a string from the keyboard with timeout
RESTORE_CURSOR - restore cursor location saved by SAVE_CURSOR
REVLF    - do a reverse line feed on an ANSI CRT
SAVE_CURSOR - save a VT100 cursor location
SCROLL   - set the scroll region on a VT100
SRESET   - reset the scroll region on a VT100
START_MESS - restart broadcast messages
START_Y  - restart normal control/Y usage (after STOP_Y)
STAT     - display a status message on a VT100
STATUS   - display a status message and return to unknown location
STOP_MESS- stop broadcast messages
STOP_Y   - replace normal control/Y handler with a user routine
VT340ALFA - returns a VT340 terminal to alpha mode
VT340GRAF - sets a VT340 terminal to graphics mode
YESNO    - get the answer to a yes/no question
#
                              File I/O
                              --------
ADAM     - call ADAM text editor
COPY     - copy a sequential file
DEFAULT  - return default device and directory
DELETE   - delete a file
DIR      - list a directory
DISK_SPACE- return total number of blocks on volume and amount free
EXISTS   - test to see if a file exists
FFLUSHOUT- flush the FPACKOUT buffer
FID_TO_NAME- returns the filename associated with a FID number
FILE_BDATES- return a file's creation, revision, expiration, backup dates in
                binary representation
FILE_DATES - return a file's creation, revision, expiration, backup dates in
                ASCII representation
FLUSHOUT - flush the PACKOUT buffer
FOPEN    - general purpose file opener
FPACKOUT - pack an output string, print it when full using FORTRAN carriage
                control
GETC     - get a single character from a text file
GETFDEV  - get the file device name from a logical unit
GETFDIR  - get the file directory name from a logical unit
GETFILE  - get the next file name from a list
GETFILEX - get the next file name from a list, with exclusion
GETLIN   - retrieve a line of text for parsing
GETFNAME - get the file name from a logical unit
GETFTYPE - get the file type from a logical unit
GETFVERS - get the file version number from a logical unit
GET_DEFAULT- get the present default device and directory
IS_DIR   - is the file a directory file
PACKOUT  - pack an output string, print it when full
PARSE    - parse a VMS file specification
PUTC     - put a single character to a file
QUOTA    - retrieve a disk quota entry
RENAME   - rename a file
TOUCH    - change a file's revision date
UNIQUE   - return a unique filename
WILD_MATCH- verify that a filespec containing wildcards matches a filespec
#
                       Sort / Search / Merge
                       ---------------------
ISORT/I/I8 - sort an array and an index array
MERGE/I/R  - merge sorted arrays
QSORT      - quick sort a character array
QSORTI     - quick sort an integer array
QSORTR     - quick sort a real array
SEARCH     - binary search an array of tokens with abbreviations
SEARCH1    - binary search an array of tokens for exact match
SORT       - sort a CHARACTER array
SORTI      - sort an INTEGER array
SORTR      - sort a REAL array
#
                        Date / Time Functions
                        ---------------------
CLEANSE_DATE- takes a date/time in a variety of formats and makes it standard
CTIME    - wall-clock time
DATE     - calendar date
DAY_OF_YEAR - return the number of days from the beginning of the year
DELAY    - do nothing for a short period of time
GETIME   - retrieve CPU time (see SETIME)
I2M      - convert numeric month to character
LAST_DAY - returns the last day of a month
LEAP_YEAR- is the specified year a leap year?
M2I      - convert character month to numeric
PAY_DAY  - return the number of days since the start of the current pay period
SETIME   - start the CPU time clock (see GETIME)
SLEEP    - put a process to sleep
THISCENT - returns the current century as an integer
TIMER_CANCEL- cancel a queued rotuine from TIMER_SET
TIMER_SET- queue a routine for execution at a later time
WEKDAY   - return the day of the week from a system time
#
                           VMS Functions
                           -------------
CHECK_MAILBOX - check a mailbox for a message
CLOSE_MAILBOX - close a mailbox and mark for deletion
GETCPRV  - return the current privileges of the calling process
GETFOR   - get the parameters and qualifiers from a foreign command
GETPRV   - return the authorized privileges of the calling process
GETUSER  - get the name of the user calling the routine
GETUSRPRV - return authorized privileges for specified user
GET_PASS - get the hashed password(s) for an account
HAS_PRIV - does the user have a certain privilege
HELP     - access a VMS help file
IMAGE_NAME - get name of current executable image
INPUT_MAILBOX - set up an input AST for a mailbox
IS_PASSWORD - verifies that the password is correct for this user
MAIL     - send a mail message to a user
MODE     - return process mode type
NAME_TO_PID - convert a process name into an extended PID
OPEN_MAILBOX - create a mailbox or attach to existing mailbox
OPER     - send a message to an operator
OPERW    - send a message to an operator and wait for a reply
OUTPUT_MAILBOX - set up an output AST for a mailbox
PRINT_FILE - print a file
READ_MAILBOX - read a message from a mailbox
RECALL   - recall DCL commands
SEND     - send a message to a user or terminal
SENDW    - send a message to a user or terminal and wait
SUBMIT   - submit a '.COM' file to a batch queue
SUBMITP  - submit a '.COM' file to a batch queue with parameters
TRANSL8  - translate a logical name (into physical)
WRITE_MAILBOX - write a message to a mailbox
#
                    FORTRAN Programming Functions
                    -----------------------------
CATEG    - categorize a tokenized text string
GETSTM   - get a FORTRAN statement
NARGS    - return the number of arguments passed to the calling routine
PUTSTM   - write a FORTRAN statement
STRPSTM  - strip character strings from a FORTRAN statement
#
                    "C" Programming Functions
                    -------------------------
TRIM     - remove trailing spaces
#
                           Math Functions
                           --------------
GAUSS    - solve simultaneous, linear equations
INTRPL   - Akima spline fit
KURV1/2  - cubic spline curve fit
#
                      Miscellaneous Functions
                      -----------------------
ACOLOR   - verify ARTA color and return DISSPLA name for color
BCOLOR   - set background color on Tektronix 41xx terminals
FRMSTD   - convert units from standard to non-standard (see TOSTD)
GETOKE   - parse the next token from a line
GRAF_XORY - write out a GRAF X or Y command
GRAF_XY  - write out a GRAF XY command
GRAF_Z   - write out a GRAF Z command
MENU     - present a menu of choices
MENU2    - present a menu of choices with prompt
NAE/2/3  - edit one to three (integer) arrays in memory
PEEK     - return the value of a byte in memory
PEEKW    - return the value of a long word in memory
POKE     - set the value of a byte in memory
POKEW    - set the value of a long word in memory
RNAE/2/3 - edit 1 to 3 (real) arrays in memory
SCALE    - choose data min/max for plotting
SCOLOR   - set surface color on Tektronix 41xx terminals
TOSTD    - convert from non-standard units to standard units (see FRMSTD)


                    List of Non-User Entry Points
                    -----------------------------

The following routines are not user-callable.

Routine           Is Used By

MLIB_BUILD      - TOSTD
MLIB_CMPAR      - FRMSTD
MLIB_COMPAR     - SEARCH
MLIB_CTLY       - STOP_Y
MLIB_DATE_ERR   - FILE_DATES, FILE_BDATES
MLIB_DATE_OK    - FILE_DATES, FILE_BDATES
MLIB_ERROR      - various
MLIB_ESTAB      - STOP_Y
MLIB_EVAL       - TOSTD
MLIB_FIX_YEAR   - CLEANSE_DATE
MLIB_GET        - various
MLIB_GETCRD     - GETSTM
MLIB_NSTAT      - NAE, RNAE routines
MLIB_PARSE      - CMPAR, TOSTD
MLIB_POLISH     - TOSTD
MLIB_RECALL     - RECALL
MLIB_SET        - various
MLIB_STD        - TOSTD
MLIB_TOUCH_OK   - TOUCH
MLIB_TRAP       - STOP_MESS
MLIB_WRIT       - NAE, RNAE routines


Note:  MLIB_GET and MLIB_SET can be called by the user for one purpose; the
default FORTRAN logical unit numbers for MERLIB terminal reads, terminal
writes, and terminal error reporting are 5, 6, and 6 respectively.  These may
be queried or changed by calling MLIB_GET and MLIB_SET respectively.  The first
argument to each is a character string defining the value desired; the second
is the value to be set or returned. 
Examples:

      CALL MLIB_GET('NREAD', NINPUT)
      CALL MLIB_SET('NWRITE', 8)
      CALL MLIB_SET('NERROR', 99)





                     Internal COMMON Blocks and BLOCK DATAs
                     --------------------------------------

COMMON MLIB$DATES    - used by FILE_DATES, FILE_BDATES, TOUCH
COMMON MLIB$INTERNAL - used by MLIB_GET and MLIB_SET
COMMON MLIB$MESSAGE  - used by START_MESS and STOP_MESS
COMMON MLIB$UNITS    - used by the units conversion routines (TOSTD, FRMSTD)

BLOCK  MLIB$DATA     - used to initialize MLIB$UNITS

                    Argument list quick summary
                    -------- ---- ----- -------

ACOLOR   ( INCOLOR-C*, OUTCOLOR-C4, IERR )
ADAM     ( INFILE-C*, OUTFILE-C* )
ANY      ( LIST-C*, TARGET-C* ) Returns LOGICAL
APPLICATION
ASCII    ( STRING-C* )
BCOLOR   ( COLOR-C* )
BLANKS   ( STRING-C* )  Returns INTEGER
CAPITAL  ( STRING-C* )
CAPS     ( STRING-C* )
CATEG    ( STRING-C*, TYPE-C1, FORMAT-C* )
CENTER   ( STRING-C* )
CHECK_MAILBOX ( ICHAN, BUFFER-C* ) Returns LOGICAL
CLEANSE_DATE ( IN-C*, OUT-C* )
CLEAR
CLOSE_MAILBOX ( ICHAN )
COMPRESS ( S-C* )
CONTROL  ( CHAR-C1, ROUTINE-EXTERNAL )
COPY     ( IN-C*, OUT-C*, ISTAT )
CTIME    ( TIME-C8 )
CURSOR   ( IX, IY, CHAR-C1 )
CURSOR_LEFT ( NCOLUMNS )
CURSOR_RIGHT ( NCOLUMNS )
DASCII   ( STRING-C* )
DATE     ( CDATE-C9 )
DAY_OF_YEAR () Returns INTEGER
DECHEX   ( INT, HEX-C8 )
DECOCT   ( INT, OCT-C16 )
DEFAULT  ( DIREC-C* )
DELAY    ( DELTA-I )
DELETE   ( FILESPEC-C*, ERROR-L )
DIR      ( DIREC-C*, ERROR-L )
DISK_SPACE( DISKNAME-C*, TOTAL-I, FREE-I )
EDIT     ( STR-C*, IX, IY )
EXISTS   ( FILESPEC-C* )  Returns LOGICAL
FFLUSHOUT( NUNIT, OUT-C*, IOUT )
FID_TO_NAME( DEVICE-C*, FID(3)-I*2, FILENAME-C*)
FILE_BDATES( FILESPEC-C*, CREDATE-I(2), REVDATE-I(2), EXPDATE-I(2), BAKDATE-I(2))
FILE_DATES( FILESPEC-C*, CREDATE-C23, REVDATE-C23, EXPDATE-C23, BAKDATE-C23)
FIRST    ( STRING-C*, CHAR-C1, LOC )
FLUSHOUT ( NUNIT, OUT-C*, IOUT )
FOPEN    ( NUNIT, FNAME-C*, DEFNAME-C*, PROMPT-C*, NEW-L, ERROR-L )
FPACKOUT ( NUNIT, IN-C*, OUT-C*, IOUT, CSTRING-C*, CEND-L )
FRMSTD   ( VALIN, STRIN-C*, VALOUT, STROUT-C*, IERR )
G4ALFA
G4GRAF
GAUSS    ( AMAT(N,N), Y(N), COEF(N), N, ERROR-L )
GETC     ( NIN )  Returns CHARACTER*1
GETCHAR  ( CH-B, ERROR-L )
GETCPRV  ( N, PRIV(*)-C* )
GETFDEV  ( UNIT-I, DEV-C* )
GETFDIR  ( UNIT-I, DIR-C* )
GETFILE  ( INFILE-C*, OUTFILE-C* )
GETFILEX ( INFILE-C*, OUTFILE-C*, DEFILE-C*, EXFILE-C* )
GETFNAME ( UNIT-I, NAME-C* )
GETFOR   ( NQ, QUALS(*)-C*, NP, PARAMS(*)-C* )
GETFTYPE ( UNIT-I, TYPE-C* )
GETFVERS ( UNIT-I, VERS-C* )
GETIME   ( TOTAL, DELTA )
GETLIN   ( NIN, ERROR-L, LINE-C*, LENG )
GETOKE   ( LINE-C*, LEN, IPTR, TOKEN-C*, TYPE-C1, ERROR-L )
GETPRV   ( N, PRIV(*)-C* )
GETSTM   ( UNIT-I, STMT-C*, LENS-I, LABEL-C5, EOF-L )
GETSTRING( STRING-C* )
GETTERM  ( USER-C*, TERM-C* )
GETUSER  ( USER-C* )
GETUSRPRV( USER-C*, N, PRIV(*)-C* )
GETXY    ( IX, IY )
GET_DEFAULT( DIR-C* )
GET_PASS ( USER-C*, PASS1(2)-I, PASS2(2)-I, SALT-I2, ENCRYPT-B)
GET_TERM_SIZE( WIDTH-I, LENGTH-I )
GOTOXY   ( IX, IY )
GPALFA
GRAF_XORY( XORY-C1, ARRAY(NARRAY), NARRAY-I, NUNIT-I )
GRAF_XY  ( XARRAY(NPTS), YARRAY(NPTS), NPTS-I, NUNIT-I )
GRAF_Z   ( NXPTS-I, NYPTS-I, MXPTS-I, MYPTS-I, ZMAT(MXPTS,MYPTS), NUNIT-I )
GRALFA
HAS_PRIV ( PRIV-C* ) Returns LOGICAL
HELP     ( LIBRARY-C*, STRING-C*, ERROR-L )
HEX      ( INT ) Returns CHARACTER*2
HEXDEC   ( HEX-C8, INT )
I2M      ( INT ) Returns C3
ICOUNT   ( CHAR-C1, STRING-C* ) Returns INTEGER
IDIGIT   ( NUMBER, NDIGIT )  Returns INTEGER
IMAGE_NAME ( IMAGE-C*, FULL-L )
INPUT_MAILBOX ( ICHAN, INPUT-EXTERNAL )
INTRPL   ( L, X(L), Y(L), N, XX(N), YY(N), IERR )
IS_PASSWORD(USER-C*, PASS-C*) Returns LOGICAL
ISALPHA  ( CHAR-C1 ) Returns LOGICAL
ISDIGIT  ( CHAR-C1 ) Returns LOGICAL
ISLETTER ( CHAR-C1 ) Returns LOGICAL
ISORT    ( ARRAY(N)-C255, N, INDEX(N) )
ISORTI   ( IARRAY(N), N, INDEX(N) )
ISORTI8  ( IARRAY(N)-I8, N, INDEX(N) )
IS_DIR   ( FNAME-C* ) Returns LOGICAL
KEYHIT   ( CHAR-B, ERROR-L )
KURV1    ( N, X(N), Y(N), SLOPE1, SLOPEN, XP(N), YP(N), TEMP(N+2), S, SIGMA )
KURV2    ( T, XS, YS, N, X(N), Y(N), XP(N), YP(N), S, SIGMA )
LAST_DAY ( MON-C3 )  Returns INTEGER
LEAP_YEAR( IYEAR ) Returns LOGICAL
LEFT     ( STRING-C* )  Returns INTEGER
LENGTH   ( STRING-C* )  Returns INTEGER
LENX     ( STRING-C* )  Returns INTEGER
LOWER    ( STRING-C* )
M2I      ( STRING-C3 ) Return INTEGER
MAIL     ( FILE-C*, USER-C*, SUBJECT-C* )
MATCH    ( WORD-C*, TARGET-C* ) Returns LOGICAL
MATCH_WORD( WILD-C*, NOTWILD-C* ) Returns LOGICAL
MBELL
MENU     ( CHOICES-C*, NUM, HEADING-C*, ANSWER-I )
MENU2    ( CHOICES-C*, NUM, HEADING-C*, PROMPT-C*, ANSWER-I )
MERGE    ( A(NA)-C*, NA, B(NB)-C*, NB, C(*)-C*, NC )
MERGEI   ( IA(NA), NA, IB(NB), NB, IC(*), NC )
MERGER   ( A(NA), NA, B(NB), NB, C(*), NC )
MODE     ( MTYPE-C* )
NAE      ( N, MAX, ARR1(MAX) [,ARR2(MAX) [,ARR3(MAX)]], ERROR-L )
NAME_TO_PID ( PNAME-C*, EPID-I )
NARGS    ( NUM )
NDEX     ( STRING-C*, TARGET-C* )  Returns INTEGER
NUMERIC
OCTDEC   ( OCT-C16, INT )
OPEN_MAILBOX ( NAME-C*, PERM-L, IPROT, ICHAN )
OPER     ( MESSAGE-C*, WHO-C* )
OPERW    ( MESSAGE-C*, WHO-C*, REPLY-C* )
ORDINAL  ( NUM-C* )
OUTPUT_MAILBOX ( ICHAN, OUTPUT-EXTERNAL )
PACKOUT  ( NUNIT, IN-C*, OUT-C*, IOUT, CSTRING-C*, CEND-L )
PARSE    ( FILE-C*, DEFAULT-C*, PART-C*, OUT-C* ) Return INTEGER
PAY_DAY  () Returns INTEGER
PCALFA   
PEEK     ( ADDR-I )  Returns INTEGER
PEEKW    ( ADDR-I )  Returns INTEGER
POKE     ( ADDR-I, BYTE-B )
POKEW    ( ADDR-I, INT )
PRINT_FILE ( FILENAME-C*, QUEUENAME-C* )
PROMPT   ( STRING-C* )
PUTC     ( CHAR-C1, NWRITE )
PUTCHAR  ( STR-C* )
PUTSTM   ( UNIT-I, LABEL-C5, STMT-C* )
PUTSTRING( STRING-C* )
QSORT    ( ARRAY-C*, NUMBER, WORK-C* )
QSORTI   ( ARRAY-I, NUMBER )
QSORTR   ( ARRAY, NUMBER )
QUOTA    ( DISK-C*, UIC-C*, USED-I, PERM-I, RET-I )
READINT  ( INT )
READKEY  ( STRING-C3 )
READQ    ( STRING-C* )
READT    ( TIME-I, BUFF-C* )  Returns Integer
READ_MAILBOX ( ICHAN, MESS-C* )
RECALL   ( COMMAND-C*, NUM )
RENAME   ( OLD-C*, NEW-C* )   Returns Integer
REPLAC   ( STRING-C*, OLD-C1, NEW-C1 )
RESTORE_CURSOR
REVLF    
RIGHT    ( STRING-C* )
RNAE     - SEE NAE
SAVE_CURSOR
SCALE    ( XMIN, XMAX, NINT, XMINNEW, XMAXNEW, DELTA )
SCOLOR   ( COLOR-C* )
SCROLL   ( TOP-I, BOT-I )
SEARCH   ( STRING(N)-C*, N, TARGET-C*, INDEX, MATCHD-L, AMBIG-L )
SEARCH1  ( STRING(N)-C*, N, TARGET-C*, INDEX, MATCHD-L )
SEND     ( USER-C*, TEXT-C* )
SENDW    ( USER-C*, TEXT-C*, NOK, NBAD )
SETIME
SLEEP    ( SECONDS )
SORT     ( ARRAY(N)-C20, N )
SORTI    ( ARRAY(N)-I, N )
SORTR    ( ARRAY(N)-R, N )
SRESET   
START_MESS
START_Y
STAT     ( IX, IY, TEXT-C* )
STATUS   ( TEXT-C* )
STOP_MESS
STOP_Y   ( USER-EXTERNAL )
STRIP_EXC( STRING-C* )
STRPSTM  ( STMT-C*, LENS-I, STRP_STMT-C*, LENSTRP-I )
SUBMIT   ( FILE-C*, QUEUE-C* )
SUBMITP  ( FILE-C*, QUEUE-C*, LOG-L, NP, P(NP)-C* )
THISCENT ( ICENT-I )
TIMER_CANCEL( ID )
TIMER_SET( TIME-I, ROUTINE-EXT, ID )
TOSTD    ( VALIN, STRIN-C*, VALOUT, STROUT-C*, IERR )
TOUCH    ( FILE-C* )
TRANSL8  ( LOGIC-C*, PHYSIC-C* )
TRIM     ( STR-C* ) return "C" string
UNIQUE   ( NAME-C* )
UNTAB    ( STRING-C* )
VERIFY   ( STR1-C*, STR2-C* )  Returns LOGICAL
VT340ALFA
VT340GRAF
WEKDAY   ( DATE-C30, DAY-C9 )
WILD_MATCH ( WILD-C*, FILESPEC-C* ) Returns LOGICAL
WRITE_MAILBOX ( ICHAN, MESS-C* )
YESNO    ( ISYES-L, ERROR-L )

Subprogram : ACOLOR

Type : SUBROUTINE

Purpose : verify an ARTA standard color and return the DISSPLA name
          for that color.

Arguments :
      INCOLOR - (character*(*),input) name of ARTA color.
      OUTCOLOR - (character*4,output) DISSPLA name for ARTA color.
      IERR - (integer,output) error flag :
           = 1 if color was matched
           = 0 if color was not matched
           = 2 if ARTA color name was ambiguous

Notes:
1.  For error conditions 0 and 2, OUTCOLOR is set to DISSPLA 'BLAC'.
2.  The standard ARTA colors are:
       BCyan          Chestnut       Kelly          Red
       Beige          Cream          Khaki          RMagenta
       Black          Cyan           Lavendar       RYellow
       Blue           Eggplant       Magenta        Sky
       BMagenta       Evergreen      MBlue          Tan
       Burgundy       GCyan          MRed           Turquoise
       CBlue          Gold           Mustard        White
       CGreen         Gray           Olive          Yellow
       Charcoal       Green          Orange         YGreen
       Chartreuse     GYellow        Pink           YRed
#
Subprogram : ADAM

Type : SUBROUTINE

Purpose : to edit a file using the ADAM text editor.

Arguments :
      INFILE  - (character*(*),input) name of file to be edited.
      OUTFILE - (character*(*),input) name of file in which updates are
                to be saved.  If this argument is blank, a new version of
                INFILE will be created.  If no changes are made, no new
                file will be created.

Notes:
1. Not even remotely, conceivably transportable.
2. Must be linked with an options file like this:
       LINK user_file,FILE.OPT/OPT
   where FILE.OPT contains the statement:
       SYS$SHARE:TPUSHR/SHAREABLE
3. If there is a file TPUINI.TPU in your login directory, it will be used
   to initialize the editing session.
4. Journalling IS enabled, but I think you would have to recover from the
   normal system ADAM.
5. See the ADAM manual for details on using ADAM.
6. Online help is available by hitting the PF2 or HELP key.
7. The source code for CALLABLE_ADAM is kept in the ADAM directory; it is
   not in MERLIB.TLB.
8. Changes to the system ADAM will automatically be available to the user's
   program without relinking.
#
Subprogram : ANY

Type : LOGICAL FUNCTION

Purpose : Determine if any of the specified characters exist in the target
string.

Arguments :
     SOURCE - (character*(*),input) list of characters to look for
     TARGET - (character*(*),input) string to check 
     ANY    - (logical,function return) true if any of the characters are found

Notes:
1.  ANY('0123456789','Hi there') is FALSE
2.  ANY('0123456789','You''re the 1.') is TRUE
3.  ANY searches the entire string, not just to the nonblank length
#
Subprogram : APPLICATION

Type : SUBROUTINE

Purpose : sets the keyboard to send application mode sequences (i.e., the
keypad sends command strings instead of digits).

Notes :
1. Not transportable.
2. See NUMERIC.
#
Subprogram : ASCII

Type : SUBROUTINE

Purpose : to replace ASCII mnemonic strings (such as those created by DASCII
with the actual ASCII characters.  (See DASCII).
For example, "<BEL>" becomes a BELL character (ASCII 7).

Arguments :
      STRING - (character*(*),update) the string which is to be converted.
#
Subprogram : BCOLOR

Type : SUBROUTINE

Purpose : set the background color on a Tektronix 41xx terminal.

Arguments :
      COLOR - (character*(*),input) the color to set

Notes :
1. The available colors (and aliases) are:
      BEIGE                 CYAN                 RED
      BLACK                 GCYAN (CGREEN)       RYELLOW (YRED, ORANGE)
      BLUE                  GRAY                 TAN
      BMAGENTA (MBLUE)      GREEN                WHITE
      CBLUE (BCYAN)         KHAKI                YELLOW
      CHARCOAL              MAGENTA (PURPLE)     YGREEN (GYELLOW)
      CREAM                 MRED (RMAGENTA)
#
Subprogram : BLANKS

Type : INTEGER FUNCTION

Purpose : Replace a string with the same string less all leading and embedded
blanks.  Pad on the end with blanks to fill the string.

Arguments :
      STRING - (character*(*),update) the string which is replaced by the
               same string less blanks.
      BLANKS - (integer,function value) the length of the squeezed string.

Notes:
1. You can still CALL BLANKS(S), but LS = BLANKS(S) is equivalent to CALL
BLANKS(S) followed by LS = LENGTH(S).
#
Subprogram : CAPITAL

Type : SUBROUTINE

Purpose : Capitalize the first character in a string

Arguments :
     STRING - (character*(*),update) string to capitalize

Notes :
1. Do not confuse this routine with CAPS, which capitalizes the entire string.
#
Subprogram : CAPS

Type : SUBROUTINE

Purpose : Replace a string with the same string where all lower case letters
have been capitalized.

Arguments:
      STRING - (character*(*),update) string to be capitalized.
#
Subprogram : CATEG

Type : SUBROUTINE

Purpose : To look at a string and try to determine if the string represents
an integer, logical, fixed point, floating point, or character string.

Arguments :
     STRING  - (character*(*),update) the character string to categorize
                (the blanks are removed and it is capitalized).
     TYPE    - (character*(1),output) the determined type :
                 'A' - alphanumeric           'F' - fixed point real
                 'D' - floating point double  'I' - integer
                 'E' - floating point single  'L' - logical
                 'B' - all blanks
     FORM    - (character*(*),output) a FORTRAN FORMAT field for the variable

Notes :
   FORM contains a FORMAT-like field.  The actual field may vary some.

Examples:
          STRING(input)          TYPE(output)            FORM(output)
          -------------          ------------            ------------
           ' -123'                    I                       I4
           '123.45'                   F                      F6.2
           '123.4.5'                  A                       A7
           '.TRUE.'                   L                       L6
           '1.234D-2'                 D                      D8.3

The value can then be obtained from an internal file read; e.g.:
      S = '   -123'
      CALL CATEG(S,T,FORM)
      IF (T .EQ. 'I') READ(S,FORM) IVALUE
#
Subprogram : CENTER

Type : SUBROUTINE

Purpose : To center the text of a string within the field of the string (e.g., a
string of length 79 would be centered around column 39).

Arguments :
       STRING - (character*(*),update) a string that is replaced with the
                 centered string.

Notes:
1. A string of even length gets "centered" with the extra nonblank character
before the midpoint of the string.
#
Subprogram : CHECK_MAILBOX

Type : LOGICAL FUNCTION

Purpose : check to see if there is a message in the mailbox.

Arguments :
     ICHAN - (integer,input) the channel number assigned by OPEN_MAILBOX
     MESS  - (character*(*),output) the text of the message (if any); blank
                if no message was in the mailbox
     CHECK_MAILBOX - (logical,function value) TRUE if a message was read into
                MESS, FALSE otherwise.

Notes :
1. Not transportable.
2. See OPEN_MAILBOX for more details.
#
Subprogram : CLEANSE_DATE

Purpose : takes a date/time string in a variety of common formats and converts
it to standard DEC formated date/time.

Arguments :
      IN  - (character*(*),input) the input string
      OUT - (character*(*),output) the output string

Notes :
1. Valid input formats:
      MMM DD, YY             MM/DD/YY
      MMM DD, YYYY           MM/DD/YYYY
      "TODAY"                DD[-]MMM[-]YY
      "TOMORROW"             DD[-]MMM[-]YYYY
      "YESTERDAY"            DD-MMM-YYYY[:]HH:MM:SS.CC   (OUTPUT FORMAT)
2. See date/time format in DCL Dictionary for abbreviations.
3. If a two-digit year is passed, the current century is assumed.
#
Subprogram : CLEAR

Type : SUBROUTINE

Purpose : Clear a CRT screen or advance to the top of a new page on a
hardcopy terminal.

Arguments : None
#
Subprogram : CLOSE_MAILBOX

Type : SUBROUTINE

Purpose : Close a mailbox opened by OPEN_MAILBOX.  Marks the mailbox for
deletion if it is a permanent mailbox; it will be deleted when all references
to it are released.

Arguments :
     ICHAN - (integer,input) channel number assigned by OPEN_MAILBOX

Notes :
1. Not transportable.
#
Subprogram : COMPRESS

Type : SUBROUTINE

Purpose : To replace multiple space/tab combinations with a single space
unless they appear within a quoted string.

Arguments :
     STRING - (character*(*),update) the string to compress
#
Subprogram : CONTROL

Type : SUBROUTINE

Purpose : Set up a control character intercept routine.  Anytime the character
is typed at the terminal, the user's routine will be called.

Arguments :
     CHAR    - (character*1,input) the "control" character to intercept
     ROUTINE - (external,input) the routine to be invoked when ^character
                 is intercepted

Notes:
1. Not transportable.
2. The character argument is not a control character, it is the alphabetic
character equivalent; e.g., if you want to intercept ^P, pass 'P' as the
argument.
3. ROUTINE must be declared EXTERNAL in the calling program.
#
Subprogram : COPY

Type : SUBROUTINE

Purpose : Copy a sequential file

Arguements :
     IN   - (character*(*),input) source file spec
     OUT  - (character*(*),input) target file spec
     ISTAT- (integer,output) status of copy (zero for success)

Notes :
1. Not transportable.
#
Subprogram : CTIME

Type : SUBROUTINE

Purpose : to return the present wall clock time from the operating system.

Arguments :
      TIME - (character*8,output) the time in HH:MM AM/PM format
              (e.g., "11:23 AM" ).

Notes : Not transportable.  This is NOT the VMS built in TIME subroutine,
which returns time in HH:MM:SS format for a 24 hour clock.
#
Subprogram : CURSOR

Type : SUBROUTINE

Purpose : Retrieve the crosshair cursor location and character typed (if
any) from a Tektronix 4014 terminal.

Arguments :
     IX   - (integer,output) X location in pixels (0-1024)
     IY   - (integer,output) Y location in pixels (0-780)
     CHAR - (character*1,output) the character typed (if any).

Notes :
1. Not transportable.
2. Times out after 999 seconds.
3. The terminal should be in graphics mode when called... it will
   remain in graphics mode.
#
Subprogram : CURSOR_LEFT

Type : SUBROUTINE

Purpose : Move the text cursor left.

Arguments :
        NCOLUMNS - number of columns to move

Notes :
1. Assumes an ANSI-Compatible terminal (e.g. VT100)
#
Subprogram : CURSOR_RIGHT

Type : SUBROUTINE

Purpose : Move the text cursor right.

Arguments :
        NCOLUMNS - number of columns to move.

Notes :
1. Assumes an ANSI-Compatible terminal (e.g. VT100)
#
Subprogram : DASCII

Type : SUBROUTINE

Purpose : this subprogram replaces a string with the same string except all
non-printable characters are replaced by a printable string.  If the character
is one of the characters for which there is a standard mnemonic (e.g., BEL) the
standard mnemonic is inserted surrounded by '<' and '>' (e.g., <BEL>).  If the
ASCII value for the character is greater than 127 the value is inserted
surrounded by < and > (e.g., <164>).

Arguments :
      STRING - (character*(*),update) the string to be converted/the converted
                string.  (1000 character maximum)
#
Subprogram : DATE

Type : SUBROUTINE

Purpose : to return the present calendar date from the operating system.

Arguments :
      DATE - (character*9,output) the date in DD-MMM-YY format.

Notes :
1. Not transportable.
2. This is the built in DATE subroutine on VMS.
#
Subprogram : DAY_OF_YEAR

Type : INTEGER FUNCTION

Purpose : return the number of days since the beginning of the current year

Arguments :
      DAY_OF_YEAR - (integer, function value) number of days
#
Subprogram : DECHEX

Type : SUBROUTINE

Purpose : to convert a decimal integer to a hex string.

Arguments :
     I - (integer,input) the integer containing the value.
     H - (character*8,output) the hex equivalent of I.

Notes : not transportable.
#
Subprogram : DECOCT

Type : SUBROUTINE

Purpose : to convert an decimal integer into the equivalent octal value.

Arguments :
      I - (integer,input) the decimal value.
      O - (character*16,output) the octal string.

Notes : not transportable.
#
Subprogram : DEFAULT

Type : SUBROUTINE

Purpose : return the current default device and directory.

Arguments :
     DIREC  - (character*(*),output) the device and directory

Notes:
1. Not transportable.
#
Subprogram : DELAY

Type : SUBROUTINE

Purpose : This subroutine delays the execution of a process a specified amount
of time.  This execution delay is computed as follows: if (TIME_DELAY <= 0)
then the passed parameter represents the number of 100-nanosecond units to
elapse before program execution is resumed.  If (TIME_DELAY > 0) then the
passed parameter represents the number of millisecond units to elapse before
program execution is resumed.

Arguments :
      DELAY - (integer,input) time to delay (see above).

Notes :
1. This subroutine assumes that the system clock has unit increments
of 100-nanoseconds, which is consistent with the VAX-11/780 system time
quadword format standard.
2. Not transportable.
#
Subprogram : DELETE

Type : SUBROUTINE

Purpose : delete the specified file from the user's directory.

Arguments :
      FILESPEC - (character*(*),input) the file specification of the file
                     to be deleted (see notes for EXISTS).
      ERROR    - (logical,output) FALSE if the deletion was performed without
                     problem, TRUE otherwise.

Notes:
   1. Not transportable.
   2. FILESPEC must not contain wildcards.
#
Subprogram : DIR

Type : SUBROUTINE

Purpose : to produce a listing of the user's directory on the terminal.

Arguments :
      DIRECTORY - (character*(*),input) the specification of the directory
                      to be produced ( space for the default directory).
      ERROR     - (logical,output) FALSE if the operation was successful,
                       TRUE otherwise.

Notes :
1. The error flag will only be set if there is an error in spawning the
subprocess to do the directory command.
2. If 'directory' contains the string "/OUTPUT=filespec", the output will be
produced to the file 'filespec'.
3. Not transportable.
#
Subprogram : DISK_SPACE

Type : SUBROUTINE

Purpose : Return the number of blocks on the device named and the number
which are free.

Arguments :
     NAME  - (character*(*),input) name of the disk device
     TOTAL - (integer,output) total number of blocks on device
     FREE  - (integer,output) number which are free

Notes :
1. Not transportable.
#
Subprogram : EDIT

Type : SUBROUTINE

Purpose : Edit a text string while displaying it on an ANSI terminal.
The keys with special significance are:
          ^A       - Toggle Insert/Overstrike mode
          ^C       - Cancel all changes
          ^E       - Go to end of string
          ^G       - Delete character under cursor
          ^H(BS)   - Go to start of string
          ^I(Tab)  - Go to next word
          ^M(Ret)  - Return string
          ^R       - Repaint string
          ^U       - Delete all characters to left of cursor
          ^W       - Repaint string
          ^Z       - Return string
          Del      - Delete character to left of cursor
          Remove   - Delete character under cursor
          Left Arrow - Move left
          Right Arrow - Move right

Arguments :
        STRING - (character*(*),update) initialize it; the new string is
                        returned
        IX     - (integer,input) column location to display string
        IY     - (integer,input) row location to display string (count
                        from the top of the screen)

Notes :
1. Requires an ANSI terminal.
2. Not transportable.
3. Set IX and IY to zero to edit at the current location on the screen.
4. Insert/overstrike mode defaults to the current terminal setting.
#
Subprogram : EXISTS

Type : LOGICAL FUNCTION

Purpose : check to see if a file exists on the user's directory.

Arguments :
      FILESPEC - (character*(*),input) the file specification of the file
                    to be checked.
      EXISTS   - (logical,output(FUNCTION value)) TRUE if the file is found,
                    FALSE otherwise.

Notes :
1. The function value is set false if an error occurs in trying to open
the file as an OLD (i.e., existing) file.  This condition can be caused by
problems other than a non-existent file (such as misspelled device names).
2. On the VAX, the file specification may be the full VMS file specification
(i.e., node name, device name, directory name, file name).
#
Subprogram : FID_TO_NAME

Type : SUBROUTINE

Purpose : Find the name of a file associated with a file ID number (FID).

Arguments :
        DEVICE  - (character*(*),input) name of the disk drive
        FID     - (integer*2(3),input) the 3 word array containing the file ID
        FILENAME- (character*(*),output) the name of the file.  This field will
                        be blank if the file isn't found or an error occurs.

Notes :
1. Not transportable.
#
Subprogram : FILE_BDATES

Type : SUBROUTINE

Purpose : to return the creation, revision, expiration, and backup dates for a
VMS file.

Arguments :
     FILESPEC - (character*(*),input) the file for which information is needed
     CREDATE  - (integer(2),output) the creation date
     REVDATE  - (integer(2),output) the revision date
     EXPDATE  - (integer(2),output) the expiration date
     BAKDATE  - (integer(2),output) the backup date

Notes:
1. The format of the returned dates is internal representation.
#
Subprogram : FILE_DATES

Type : SUBROUTINE

Purpose : to return the creation, revision, expiration, and backup dates for a
VMS file.

Arguments :
     FILESPEC - (character*(*),input) the file for which information is needed
     CREDATE  - (character*23,output) the creation date
     REVDATE  - (character*23,output) the revision date
     EXPDATE  - (character*23,output) the expiration date
     BAKDATE  - (character*23,output) the backup date

Notes:
1. The format of the returned dates is : DD-MMM-YYYY HH:MM:SS.FF
#
Subprogram : FIRST

Type : SUBROUTINE

Purpose : to find the first, non-blank character in a string

Arguments :
     STRING - (character*(*),input) the string to search.
     CHAR   - (character*1,output) the first, non-blank character.
     I      - (integer,output) the location of 'CHAR' in 'STRING'.

Notes : if STRING is completely blank, CHAR is returned as ' ' and I as 0.
#
Subprogram : FLUSHOUT and FFLUSHOUT

Type : SUBROUTINE

Purpose : Flush the output buffer used by routine (F)PACKOUT, if necessary.

Arguments :
        NUNIT - (integer,input) output logical unit number
        OUT   - (character*,input) the buffer
        IOUT  - (integer,input) last character in OUT

Notes:
1. See PACKOUT for details.
2. FFLUSHOUT uses FORTRAN carriage control, FLUSHOUT doesn't.
#
Subprogram : FOPEN

Type : SUBROUTINE

Purpose : to open a file to a logical unit number.  If no filename is provided,
prompts the user for a filename.  Provides for default specification or
portions of filespecification.

Arguments :
     NUNIT  - (integer,input) logical unit number
     FNAME  - (character*(*),input) file specification
     DEFNAME- (character*(*),input) default file specification used when
                  'FNAME' is missing parts.
     PROMPT - (character*(*),input) string for prompt in case 'FNAME' is
                  blank.
     NEW    - (logical,input) open as a new file ? (create it?)
     ERROR  - (logical,output) was the file opened without errors?

Notes:
1. If FNAME is blank and the user enters <RETURN> at the prompt, ERROR will
be set .TRUE.
2. If FNAME is blank and the user enters a name at the prompt, FNAME will
be left blank.  This is to prevent access violations.  You can get the filename
by calling GETFNAME.
#
Subprogram : FRMSTD

Type : SUBROUTINE

Purpose : convert a value (given in standard units) to the equivalent value
for specified, non-standard units.

Arguments :
     VALIN  - (real,input) the value in standard units.
     STRIN  - (character*(*),input) the units of VALIN (in standard units).
     VALOUT - (real,output) the value after conversion.
     STROUT - (character*(*),input) the requested units for VALOUT.
     IERR   - (integer,output) =0 for no error; 1 for illegal characters or
                exponent error; 2 for unknown unit in STRIN or STROUT;
                3 for ambiguous unit in input string; 4 for excessively
                complex units; and 5 for failure to match STRIN and STROUT

Notes :
1. See also TOSTD
2. Units which are presently recognized by the program :

      UNIT                ALIAS(ES)              UNIT               ALIAS(ES)
      ----                ---------              ----               ---------
      ATMOS                                      PASCAL               PA
      BAR                                        PINTS
      BTU                                        POUND                LB
      CM                                         PSI
      DEGREE                                     QUARTS
      DYNE                                       RADIAN               RAD
      ERG                                        REVOLUTIONS          REV
      FATHOM                                     SECOND               S,SEC
      FEET                 FT                    SLUG
      FPS                                        TONS
      GALLON               GAL                   WATTS
      GRAM                 GM                    YARD                 YD
      HOUR                 HR
      HP
      INCH                 IN
      KILOGRAM             KG
      KILOMETER            KM
      KNOTS
      LITER                L
      METER                M
      MILE                 MI
      MINUTE               MIN
      MPH
      NAUTMILE
      NEWTON               N

3. IMPORTANT!!!! The BLOCK DATA MLIB$DATA must be included to initialize the
common block used by FRMSTD/TOSTD.  Do this by including the statement:
"EXTERNAL MLIB$DATA" in your source code.
#
Subprogram : G4ALFA

Type : SUBROUTINE

Purpose : to set a Graphon 407 terminal into ALPHANUMERIC mode.

Arguments :
      none
#
Subprogram : G4GRAF

Type : SUBROUTINE

Purpose : to set a Graphon 407 terminal into GRAPHICS mode.

Arguments :
      none
#
Subprogram : GAUSS

Type : SUBROUTINE

Purpose : Solve a set of simultaneous, linear equations by Gaussian
Elimination.

Arguments :
     A     - (real,update) the matrix of coefficients (see notes).
     Y     - (real,update) the vector of dependent values.
     COEF  - (real,output) the solution vector.
     N     - (integer,input) the number of equations.
     ERROR - (logical,output) set TRUE if the matrix is singular.

Notes :
1.  'A' MUST be dimensioned EXACTLY (N,N).
2.  'Y' and 'A' are filled as follows :
        Y1  =  A1,1*X1  +  A1,2*X2  +  ...  A1,N*XN
        Y2  =  A2,1*X1  ...
        .
        YN  =  AN,1*X1 ...
3.  'A' and 'Y' are destroyed during solution.
#
Subprogram : GETC

Type : CHARACTER FUNCTION

Purpose : retrieve the next character from a text file.  User doesn't have to
worry about lines or EOF.  End of line is returned as CHAR(13) and end of file
is returned as CHAR(26).  All trailing blanks on the line are omitted.

Arguments :
     NIN   - (integer,input) the FORTRAN logical unit number from which to read.
     GETC  - (character,function value) the next character.
#
Subprogram : GETCHAR

Type : SUBROUTINE

Purpose : To retrieve a single character from the keyboard.  This routine will
wait until a character is entered (up to 999 seconds) but does not require or
read a carriage control after the character.

Arguments :
     CH  - (byte,output) the ASCII integer equivalent of the character that
            was entered (0 in the event of an error or timeout).
     ERR - (logical,output) set TRUE if an error occurs, FALSE otherwise.

Notes :
1. Not transportable.
2. The difference between this routine and KEYHIT is that this routine always
waits for a character (up to 999 seconds) and KEYHIT always returns immediately
whether a character has been entered or not.
#
Subprogram : GETCPRV

Type : SUBROUTINE

Purpose : to retrieve the current privileges of the user who is running
the program.

Arguments :
     N     - (integer,output) the number of authorized privileges found.
     PRIV  - (character*(*),output) an array containing the ASCII names
              of the privileges found.

Notes:
1. Not transportable.
2. The names are the names given in the VMS system manager's guide.
3. As of this writing, there are potentially 39 privileges.
4. Example :
      CALL GETCPRV (N, PRIV)
      DO 10 I = 1,N
         IF (PRIV(I) .EQ. 'OPER') GO TO 20
10       CONTINUE
      WRITE(6,*)' Insufficient privilege.'
      STOP
20    ...
#
Subprogram : GETFDEV

Type : SUBROUTINE

Purpose : Retrieve the name of the device on which the file associated with the
unit number resides.

Arguments :
      IUNIT   - (integer,input) the unit number for the file
      FDEV    - (character*(*),output) the name of the device

Notes:
1. Not transportable.
2. The colon is included in FDEV.
3. The file must have been previously opened.
4. If an error occurs, FDEV will be blank.
#
Subprogram : GETFDIR

Type : SUBROUTINE

Purpose : Retrieve the name of the directory on which the file associated with
the unit number resides.

Arguments :
      IUNIT   - (integer,input) the unit number for the file
      FDIR    - (character*(*),output) the name of the directory

Notes:
1. Not transportable
2. The square brackets are included in the directory name
3. The file must have been previously opened.
4. If an error occurs, FDIR will be blank.
#
Subprogram : GETFILE

Type : SUBROUTINE

Purpose : Return the next filename that would appear in a filespec or list
of filespecs.  Wildcards are permitted.  The input may be a list of filespecs
seperated by commas.  The list may (optionally) be enclosed in parentheses.

Arguments :
      INFILE  - (character*(*),input) the filespec or list
      OUTFILE - (character*(*),output) the next filename (blank for no more)

Notes:
1. Not transportable.
2. If the value of 'INFILE' is changed, the pointers will be reset and start
over; i.e., you can not be processing two lists simultaneously.
3. Example:  CALL GETFILE ('(*.DAT,*.TXT)', OUTFIL )
4. Repeated calls to GETFILE will return the next valid filespec until GETFILE
is called with a new INFILE argument.  In this case, all pointers will be
initialized and the search will start from the begining of the new list.
#
Subprogram : GETFILEX

Type : SUBROUTINE

Purpose : Return the next filename that would appear in a filespec or list
of filespecs.  Wildcards are permitted.  The input may be a list of filespecs
seperated by commas.  The list may (optionally) be enclosed in parentheses.
A default filespec may be provided.  A list of files to exclude is provided.

Arguments :
      INFILE  - (character*(*),input) the filespec or list
      OUTFILE - (character*(*),output) the next filename (blank for no more)
      DEFILE  - (character*(*),input) a default file spec
      EXFILE  - (character*(*),input) a list of filespecs to exclude

Notes:
1. Not transportable.
2. If the value of 'INFILE' is changed, the pointers will be reset and start
over; i.e., you can not be processing two lists simultaneously.
3. Repeated calls to GETFILEX will return the next valid filespec until
GETFILEX is called with a new INFILE argument.  In this case, all pointers
will be initialized and the search will start from the begining of the new
list.
#
Subprogram : GETFNAME

Type : SUBROUTINE

Purpose : Retrieve the name of the file associated with the unit number.

Arguments :
      IUNIT   - (integer,input) the unit number for the file
      FNAME   - (character*(*),output) the name of the file

Notes:
1. Not transportable
2. The file must have been previously opened.
3. If an error occurs, FNAME will be blank.
#
Subprogram : GETFOR

Type : SUBROUTINE

Purpose : To retrieve and parse the command line entered with a foreign
command.  The line is parsed into qualifiers and parameters.  Blanks should
only be used to separate parameters(i.e., /TIME = 2 will be returned as a
qualifier and 2 parameters but /TIME=2 will be returned as a single qualifier).
The slashes are not included in the entries in array QUALS.

Arguments :
      NQ     - (integer,output) the number of qualifiers found.
      QUALS  - (character*(*),output) an array in which the strings of the
                  qualifiers will be returned.
      NP     - (integer,output) the number of parameters found.
      PARAMS - (character*(*),output) an array in which the strings of the
                  parameters will be returned.

Notes :
1. Not transportable.
2. A foreign command is a program which has been identified to VMS by the line :
    COMMAND :== $progname
where progname is the file specification for an executable (.EXE) file.
3. The slashes are not included in the entries in array QUALS.
4. Parameters are delimited by spaces or slashes unless enclosed in double
quotes.  If enclosed in double quotes, the double quotes will not be returned
as part of the parameter.
#
Subprogram : GETFTYPE

Type : SUBROUTINE

Purpose : Retrieve the name of the file type associated with the unit number.

Arguments :
      IUNIT   - (integer,input) the unit number for the file
      FTYPE   - (character*(*),output) the name of the file type

Notes:
1. Not transportable.
2. FTYPE will include the dot.
3. The file must have been previously opened.
4. If an error occurs, FTYPE will be blank.
#
Subprogram : GETFVERS

Type : SUBROUTINE

Purpose : Retrieve the version number for the file associated with the unit
number.

Arguments :
      IUNIT   - (integer,input) the unit number for the file
      FVERS   - (character*(*),output) the version number

Notes:
1. Not transportable.
2. FVERS will contain the semicolon.
3. FVERS is a string, not an integer.
4. The file must have been previously opened.
5. If an error occurs, FVERS will be blank.
#
Subprogram : GETIME

Type : SUBROUTINE

Purpose : To retrieve the CPU time used since the last call to GETIME and
since the initial call to SETIME.

Arguments :
      TOTAL - (real,output) time in seconds since the last call to SETIME.
      DELTA - (real,output) time interval since the last call to GETIME.

Notes :
1. SETIME must always be called before the first call to GETIME.
2. CPU time is only accurate to 0.01 seconds.
3. Not transportable.
#
Subprogram : GETLIN

Type : SUBROUTINE

Purpose : To retrieve a line of text from a file less comments; multiple
lines of input will be accepted if the last (non-comment) symbol is '...'.
Anything after an '!' on a line of input is considered comment.

Arguments :
      NREAD - (integer,input) FORTRAN unit number from which to read.
      ERROR - (logical,output) an error occurred or the line was longer
              than the declared length of LINE.
      LINE  - (character*(*),output) the line.
      LENG  - (integer,output) the location of the last character read.

Notes :
1. Compatible with GETOKE.
2. Text following an exclamation point is ignored, therefore, to continue
   a line with a comment, put the ellipsis before the exclamation point.
3. The line is capitalized and trailing spaces on each record are ignored.
4. "LENG" will be zero if the line is blank.
#
Subprogram : GETOKE

Type : SUBROUTINE

Purpose : to return the next token from a string being parsed.  A token ends
with a space, comma, or semicolon.

Arguments :
      LINE   - (character*(*),input) the line to be parsed.
      LEN    - (integer,input) the last location in LINE to look at.
      IPTR   - (integer,update) the next character location to look at (set
               to zero before first call).
      TOKEN  - (character*(*),output) the text of the token.
      TYPE   - (character*1,output) the type of the token (see notes).
      ERROR  - (logical,output) an error occurred if set true.

Notes : The types returned are:
      N - Null (two delimiters in a row).
      E - End of line encountered.
      A - Alphabetic.
      I - Integer number.
      R - Real number.
      S - Special, a single character not recognized as belonging to any
          of the other types.
#
Subprogram : GETPRV

Type : SUBROUTINE

Purpose : to retrieve the authorized privileges of the user who is running
the program.

Arguments :
     N     - (integer,output) the number of authorized privileges found.
     PRIV  - (character*(*),output) an array containing the ASCII names
              of the privileges found.

Notes:
1. Not transportable.
2. The names are the names given in the VMS system manager's guide.
3. As of this writing, there are potentially 39 privileges.
4. Example :
      CALL GETPRV (N, PRIV)
      DO 10 I = 1,N
         IF (PRIV(I) .EQ. 'OPER') GO TO 20
10       CONTINUE
      WRITE(6,*)' Insufficient privilege.'
      STOP
20    ...
#
Subprogram : GETSTM

Type : SUBROUTINE

Purpose : to retrieve a FORTRAN statement.  This routine handles continuation,
          capitalization (except strings, which are left untouched), removal
          of blanks (same), and removal of embedded ! comments

Arguments :
        UNIT  - (integer, input) logical unit number of source file
	STMT  - (character *(*), output) the statement
        LENS  - (integer, output) the length of STMT
        LABEL - (character *5, output) label field of statement
	EOF   - (logical, output) set .TRUE. if the statement returned is
			the last statement in the file.

Notes :
1. Exclamation points in Hollerith fields are not handled properly.
2. If EOF is TRUE, there is nonetheless a valid statement returned.  If
you call GETSTM again, a fatal error will result!
3. The DEC extension "D_LINES" are ALWAYS interpreted as executable code
by GETSTM.
4. FORTRAN 66 style direct access reads are not properly handled (you will
get a "missing quote" error statement).
5. Although DEC extended source format is supported, the maximum number of
characters per card is still 72.
6. If you want to use GETSTM on more than one file in the same program, you
will have to do your own initialization for the second file (see source code).
#
Subprogram : GETSTRING

Type : SUBROUTINE

Purpose : to retrieve a string from the terminal keyboard.  String may be
          longer than one line.  Wrapping taken care of, returns converted
          to spaces.  Exit with ^Z.

Arguments :
	STRING - (character *(*), output) the string.

Notes:
1. Not transportable.
2. Only <RETURN>, ^Y, and ^Z mean anything to GETSTRING.  If you want to use
the other string edit characters (<DEL>, <BS>,...) use EDIT.
#
Subprogram : GETTERM

Type : SUBROUTINE

Purpose : to retrieve the terminal name on which a user is logged on.

Arguments :
     USER  - (character*(*),input) the name of the user.
     TERM  - (character*(*),output) the name of the terminal (e.g., TTA3: ).

Notes : Not transportable.
#
Subprogram : GETUSER

Type : SUBROUTINE

Purpose : to retrieve the user name of the user running the calling program.

Arguments :
     USER  - (character*(*),output) - the user name.

Notes :
1. Not transportable.
2. USER is returned as 'ERROR' in the event of an error.
#
Subprogram : GETUSRPRV

Type : SUBROUTINE

Purpose : to retrieve the authorized privileges of the user specified by
first argument.

Arguments :
     USER  - (character*(*),input) user for which to return privileges
     N     - (integer,output) the number of authorized privileges found.
     PRIV  - (character*(*),output) an array containing the ASCII names
              of the privileges found.

Notes:
1. Not transportable.
2. The names are the names given in the VMS system manager's guide.
3. N is negative (-N = status code) if an error occurred.
4. As of this writing, there are potentially 39 privileges.
5. Example :
      USER = 'SMITH'
      CALL GETUSRPRV (USER, N, PRIV)
      IF (N .LT. 0) CALL EXIT (-N)
      DO 10 I = 1,N
         IF (PRIV(I) .EQ. 'OPER') GO TO 20
10       CONTINUE
      WRITE(6,*)' Insufficient privilege.'
      STOP
20    ...
#
Subprogram : GETXY

Type : SUBROUTINE

Purpose : to retrieve the present location of the cursor from a VT-100 or
compatible terminal.

Arguments :
     IX     - (integer,output) the column in which the cursor resides(1-132).
     IY     - (integer,output) the row in which the cursor resides(1-24).

Notes :
1. The location (1,1) is the upper, left-hand corner.
2. Not transportable.
3. ANSI terminals can return values larger than 132 for column and 24 for
row.  These values will be set to 132 and 24, respectively.
#
Subprogram : GET_DEFAULT

Type : SUBROUTINE

Purpose : Return the present default device and directory.

Arguments :
     NAME - (character*(*),output) the name

Notes :
1. Not Transportable.
#
Subprogram : GET_PASS

Purpose : This routine retrieves the hashed password quadwords, SALT value,
and ENCRYPT value from the authorize file.

Arguments :
     USER      - (character*(*),input) name of user's account
     PASSWORD1 - (integer(2),output) hashed value for primary password
     PASSWORD2 - (integer(2),output) hashed value for secondary password
     SALT      - (integer*2,output) SALT value
     ENCRYPT   - (byte,output) encryption type

Notes:
1. Not transportable.
2. See also IS_PASSWORD
3. PASSWORD2 will be zeros if there is no secondary password.
#
Subprogram : GET_TERM_SIZE

Type : SUBROUTINE

Purpose : To return the terminals defined size in columns and rows.

Arguments :
     1. WIDTH  - (integer,output) width in columns
     2. LENGTH - (integer,output) length in rows

Notes :
1. Information as in the SET TERM command.
#
Subprogram : GOTOXY

Type : SUBROUTINE

Purpose : position the cursor on a VT-100 or compatible terminal.

Arguments :
      IX     - (integer,input) column in which the cursor is to reside(1-132).
      IY     - (integer,input) row in which the cursor is to reside(1-24).

Notes : the location (1,1) is the upper, left-hand corner.
#
Subprogram : GPALFA

Type : SUBROUTINE

Purpose : to return a Northwest Digital Systems GP-29 terminal to alphanumeric
mode after using Tektronix graphics.

Arguments :
     NONE
#
Subprogram : GRALFA

Type : SUBROUTINE

Purpose : to return a Graphon 140 to alphanumeric (VT100) mode after being used
for Tektronix graphics.

Arguments :
     NONE
#
Subprogram : GRAF_XORY

Purpose : write out an array of numbers as a GRAF X or GRAF Y command.
         ( e.g, X=ARRAY(1),ARRAY(2),...,ARRAY(N)...
                ARRAY(N+1),...,ARRAY(NARRAY) )

Arguments :
     XORY    - (character*1,input) "X" or "Y"
     ARRAY   - (input) array of data values
     NARRAY  - (integer,input) number of values in ARRAY
     NUNIT   - (integer,input) logical unit number to write to
#
Subprogram : GRAF_XY

Purpose : write out two arrays of X and Y points as a GRAF XY command.
         ( e.g., XY=XARRAY(1),YARRAY(1),XARRAY(2),YARRAY(2),...
                 ...XARRAY(NPTS),YARRAY(NPTS) )

Arguments :
     XARRAY - (input) array of X data points
     YARRAY - (input) array of Y data points
     NPTS   - (integer,input) number of X and Y data points
     NUNIT  - (integer,input) logical unit number to write to
#
Subprogram : GRAF_Z

Purpose : write out an array of Z data points as a GRAF Z command.
         ( e.g., Z(1)=ZMAT(1,1),ZMAT(1,2),...,ZMAT(1,NYPTS)
                 .
                 .
                 .
                 Z(NXPTS)=ZMAT(NXPTS,1),ZMAT(NXPTS,2),...,ZMAT(NXPTS,NYPTS) )

Arguments :
     NXPTS   - (integer,input) number of X data values for ZMAT
     NYPTS   - (integer,input) number of Y data values for ZMAT
     MXPTS   - (integer,input) maximum X dimension of ZMAT
     MYPTS   - (integer,input) maximum Y dimension of ZMAT
     ZMAT    - (input) matrix of Z values
     NUNIT   - (integer,input) logical unit number to write to
#
Subprogram : HAS_PRIV

Type : LOGICAL FUNCTION

Purpose : determine if the caller has a certain privilege (authorized).

Arguments :
     PRIV    - (character*(*),input) the privilege in question
     HAS_PRIV- (logical,function value) TRUE if the privilege is authorized

Notes:
1. Not transportable.
#
Subprogram : HELP

Type : SUBROUTINE

Purpose : to return a help message from a VMS-format help library.

Arguments :
      LIBRARY - (character*(*),input) the filespec of the help library.
      STRING  - (character*(*),input) the item on which help is requested.
      ERROR   - (logical,output) true if there was an error.

Notes : Not transportable.
#
Subprogram : HEX

Type : CHARACTER *2 FUNCTION

Purpose : convert a byte to two hexadecimal characters.

Arguments :
     I   - (integer,input) the ASCII integer for the character
     HEX - (character*2,output) the hexadecimal representation

Notes :
1. Example:  I = 47 returns '2F'.
2. If I is greater than 255, the low order byte will be used.
#
Subprogram : HEXDEC

Type : SUBROUTINE

Purpose : to convert a hexadecimal string to a decimal integer.

Arguments :
     H - (character*8,input) the hexadecimal string.
     I - (integer,output) the integer output.

Notes : not transportable.
#
Subprogram : I2M

Type : CHARACTER*3 FUNCTION

Purpose : Convert a month in numeric format to a character representation.

Arguments :
     IMON - (integer,input) an integer month (e.g., 12 for December)
     I2M  - (character*3,function value) the character representation (e.g.
                'DEC')
#
Subprogram : ICOUNT (macro)

Type : INTEGER FUNCTION

Purpose : Counts the number of a certain character in a string

Arguments :
     CHAR    - (character*1,input) the character to count
     STRING  - (character*(*),input) the string to scan for CHAR
     ICOUNT  - (integer,function value) the number of times "CHAR" appears
                  in "STRING"
#
Subprogram : IDIGIT

Type : INTEGER FUNCTION

Purpose : to extract the digit 'ndigit' locations from the right in
          'number'; e.g. idigit(1234,3) = 2.

Arguments :
     NUMBER  -  (integer,input) the number from which to extract the digit.
     NDIGIT  -  (integer,input) the location from the right in 'number' from
                which to extract the digit.
     IDIGIT  -  (integer,function value) the extracted digit.
#
Subprogram : IMAGE_NAME

Type : SUBROUTINE

Purpose : return the name of the currently executing image.

Arguments :
     IMAGE  - (character*(*),output) the image name
     FULL   - (logical,input) if TRUE, the full device, directory, name, type,
                        and version are returned.  If FALSE, only the name.

Notes:
1. Not transportable.
#
Subprogram : INPUT_MAILBOX

Type : SUBROUTINE

Purpose : sets up an AST so that a routine will be called when there is data in
the specified mailbox to be read.

Arguments :
     ICHAN - (integer,input) the channel number assigned by OPEN_MAILBOX
     INPUT - (external,input) the routine to be called when the AST is
                 satisfied.

Notes :
1. Not transportable.
2. INPUT will be passed ICHAN as its argument when data is ready to be read in
the mailbox.
3. INPUT must call READ_MAILBOX to get the actual message.
4. Once INPUT is called the AST will be resolved; if additional messages are
expected, the INPUT_MAILBOX should be called again to reset the AST.
#
Subprogram : INTRPL

Type : SUBROUTINE

Purpose : cubic spline fit using the Akima multiple curve technique.  The
output array contains a series of interpolated values.

Arguments :
      L  - (integer,input) the number of elements in X and Y.
      X  - (real,input) an array of dimension L containing the X values of the
            curve to be fit.
      Y  - (real,input) an array of dimension L containing the Y values of the
            curve to be fit.
      N  - (integer,input) the number of elements to be output from the inter-
            polation routine.
      U  - (real,input) an array of dimension N containing the X locations for
            which the Y value is desired.
      V  - (real,output) an array of dimension N into which the interpolated
            values are placed.
      IERR - (integer,output) = 0 for no error
                              = 1 for L too small
                              = 2 for N too small
                              = 3 if X is not monotonically increasing.

Notes : X must be monotonically increasing.  If you want to fit a curve whose
values are not monotonically increasing, use KURV1 and KURV2 in this library.
If your output values are expected to be monotonically increasing, use INTRPL.
#
Subprogram : IS_PASSWORD

Type : LOGICAL FUNCTION

Purpose : Verify that the password provided is correct for the username.

Arguments :
     User - (character*(*),input) the user account name
     Pass - (character*(*),input) the password
     Is_password - (logical, function value) is .true. if the password is
                correct; .false. otherwise

Notes:
1. Not transportable.
#
Subprogram : ISALPHA

Type : LOGICAL FUNCTION

Purpose : Determine if a character is alphanumeric.  On DEC machines,
alphanumeric is defined as all upper and lower case letters, 0 through 9, "$",
and "_".

Arguments :
      CHAR    - (character*1,input) character to check
      ISALPHA - (logical,function value) true if alphanumeric
#
Subprogram : ISDIGIT

Type : LOGICAL FUNCTION

Purpose : Determine if a character is a digit.

Arguments :
      CHAR    - (character*1,input) character to check
      ISDIGIT - (logical,function value) true if its a digit
#
Subprogram : ISLETTER

Type : LOGICAL FUNCTION

Purpose : Determine if a character is a letter.

Arguments :
      CHAR     - (character*1,input) the character to check
      ISLETTER - (logical,function value) true if its a letter
#
Subprogram : ISORT (ISORTI, ISORTI8)

Type : SUBROUTINE

Purpose : sort an array of character variables in ascending, alphabetic
order.  In addition, sort an array of indices so that arrays associated with
the array to be sorted may be used in the sorted order.  See also SORT.

Arguments :
      ARRAY  - (character*(*),update) the array of elements to be sorted
                (in place).
      N      - (integer,input) the number of elements in ARRAY.
      IND    - (integer,output) an array the same size as ARRAY which contains
                the new order of the indices (see example).

Example :
     ARRAY = 'XYZ', 'ABC', 'LMN', 'DEF' and N = 4 before the call.  After the
call, ARRAY = 'ABC', 'DEF', 'LMN', 'XYZ' and IND = 2, 4, 3, 1 (i.e., the
original location of the entries).

Notes:
1. The length of variables in ARRAY is limited to 255 by an internal swap
variable.
2. The type of ARRAY is INTEGER for ISORTI and INTEGER*8 for ISORTI8.
#
Subprogram : IS_DIR

Type : LOGICAL FUNCTION

Purpose : determine if the specified file is a true directory file.

Arguments :
     FILENAME - (character*(*),input) name of file to check
     IS_DIR   - (logical,function return) .TRUE. if the specified file is a 
                    directory.  .FALSE. if not or an error occured.

Notes :
1. Not transportable.
2. IS_DIR does not search the file name for '.DIR'.  This is not reliable.  It
accesses the is_directory field of the extended file access block; therefore,
it should always be accurate.
#
Subprogram : KEYHIT

Type : SUBROUTINE

Purpose : Check the keyboard to see if a key has been hit.  If so, return
the ASCII value of that character; otherwise, return 0.

Arguments :
     CHAR  - (byte,output) the value of the key that was struck, or 0 if
                no key was struck.
     ERROR - (logical,output) will be set TRUE if an error occurs, FALSE
                otherwise.

Notes :
1. Not transportable.
2. Warning!!!! Never use keyhit as follows; it will eat CPU time constantly:
       10  CALL KEYHIT ( C, ERR )
           IF (C .EQ. CHAR(0)) GO TO 10
3. The following is OK:
       10  CALL KEYHIT ( C, ERR )
           IF (C .EQ. CHAR(0)) THEN
              CALL WAIT ( 2 )
              GO TO 10
           ENDIF
4. The following is PREFERRED :
           CALL GETCHAR (C, ERR)
#
Subprogram : KURV1

Type : SUBROUTINE

Purpose : Set up the parameters used by KURV2 to interpolate a spline fitting
the input data.

Arguments :
       N     - (integer,input) Number of points to be fit.
       X     - (real,input) Array of X values.
       Y     - (real,input) Array of Y values.
       SLP1  - (real,input) Slope at first point (degrees, counter-clockwise
                  from positive X axis).
       SLPN  - (real,input) Slope at last point (degrees, ...)
       XP    - (real,output) Curvature parameters for KURV2.
       YP    - (real,output) Curvature parameters for KURV2.
       TEMP  - (real,update) Scratch work area (dimension N+2).
       S     - (real,output) Arc length of curve.
       SIGMA - (real,input) Tension factor (if this value is negative, the end
                 point slopes will be calculated, if positive, they should be
                 input in SLP1 and SLPN.  A typical value is 1. )
#
Subprogram : KURV2

Type : SUBROUTINE

Purpose : Return an interpolated value for the function calculated by KURV1.

Arguments :
       T      - (real,input) Location on curve normalized from 0. to 1.
       XS     - (real,output) Calculated Y value for T.
       YS     - (real,output) Calculated Y value for T.
       N      - (integer,input) Number of points in arrays.
       X      - (real,input) Independent values array.
       Y      - (real,input) Dependent values array.
       XP     - (real,input) Information passed from KURV1.
       YP     - (real,input) Information passed from KURV1.
       S      - (real,input) the arc length passed from KURV1.
       SIGMA  - (real,input) Tension factor.
#
Subprogram : LAST_DAY

Type : FUNCTION

Purpose : Return the last day of the specified month (e.g., LAST_DAY('JAN')
equals 31).

Arguments :
      MON      - (character*3,input) the month (e.g. 'JAN')
      LAST_DAY - (integer,function value) the last day

Notes :
1. FEBRUARY always returns 28 at present.
#
Subprogram : LEAP_YEAR

Type : LOGICAL FUNCTION

Purpose : Determine if the specified year is a leap year.

Arguments :
      IYEAR     - (integer,input) the year (e.g., 92,2010,...)
      LEAP_YEAR - (logical,function value) .true. if its a leap year

Notes:
1.  If 2 digit year passed, current century is assumed.
#
Subprogram : LEFT (macro)

Type : FUNCTION

Purpose : Left justify a string.

Arguments :
      STRING - (character*(*),update) the string to be left justified.
      LEFT   - (integer,function value) the length of the new string.
#
Subprogram : LENGTH (macro)

Type : INTEGER FUNCTION

Purpose : To return the length of a string, where length is defined as the
number of characters from the start of the string to the last non-blank
character.

Arguments :
      STRING - (character*(*),input) the string whose length is to be measured.
      LENGTH - (function value)the length, as described above.

Note : The difference between this function and the built in function, LEN, is
that LEN always returns the value for the length in the CHARACTER statement
regardless of whether or not the string is full.  If the entire string is blank
the value returned will be 0.
#
Subprogram : LENX (macro)

Type : INTEGER FUNCTION

Purpose : Returns the length of the string, ignoring any trailing spaces,
control characters, <DEL>, or 8 bit characters.  In other words, printable
characters only.

Arguments :
     STRING - (character*(*),input) the string to measure
     LENX   - (integer,function value) the length
#
Subprogram : LOWER (macro)

Type : SUBROUTINE

Purpose : to replace a string with the same string but with capital letters
replaced with lower case.

Arguments :
     STRING - (character*(*),update) the string to be replaced.
#
Subprogram : M2I

Type : INTEGER FUNCTION

Purpose : Convert a 3 character month to ist integer equivalent.

Arguments :
     MON - (character*(*),input) the character month (only the first three
                characters are checked - e.g., 'DEC' or 'JULY')
     M2I - (integer,function value) the integer month (e.g., 12 for 'DEC')
#
Subprogram : MAIL

Type : SUBROUTINE

Purpose : to send a file as a mail message to a user.

Arguments :
     FILE    - (character*(*),input) the filename
     USER    - (character*(*),input) the user to receive the message
     SUBJECT - (character*(*),input) subject line (blank for none)

Notes :
1. Not transportable.
#
Subprogram : MATCH

Type : LOGICAL FUNCTION

Purpose : verifies that a word is an abbreviation for a target string.

Arguments :
     WORD   - (character*(*),input) the (potentially) abbreviated word
     TARGET - (character*(*),input) the unabbreviated target
     MATCH  - (logical,function value) is it a match?

Notes :
1.  MATCH ('WORD','WORDY PHRASE') is true.
2.  MATCH ('WORK','WORDY PHRASE') is false.
3.  MATCH IS case sensitive.
#
Subprogram : MATCH_WORD

Type : LOGICAL FUNCTION

Purpose : verifies that a word containing the wildcard characters "*" or "%" is
an adequate match for a text-only word.

Arguments :
     WILD    - (character*(*),input) the word containing the wildcards
     NOTWILD - (character*(*),input) the word without wildcards
     MATCH_WORD - (logical,function value) true if "NOTWILD" can be represented
                        by "WILD"

Notes :
1. If WILD contains an asterisk, it can contain no other wildcard character
(including other asterisks).  (This may change in the future)
2. Multiple percent signs ARE permitted.
3. Asterisk replaces 0 or more characters; percent replaces exactly one.
#
Subprogram : MBELL

Type : SUBROUTINE

Purpose : ring the terminal bell.

Arguments :
      None

Comments: although transportable, it may not work with all terminals; it
sends an ASCII <BEL> character.
#
Subprogram : MENU

Type : SUBROUTINE

Purpose : Present a list of options to the user and request a choice be made.
All error checking is done, and pagination for requests with many choices is
handled.

Arguments :
      CHOICE  - (character*(*),input) array of the text of the choices.
      N       - (integer,input) the number of entries in choice.
      HEADING - (character*(*),input) the text of the heading to be produced
                 at the top of each page.
      ANSWER  - (integer,output) the user's answer.

Notes :
1. Not transportable (minor problems only).
2. The text in choice should be less than about 75 characters.
#
Subprogram : MENU2

Type : SUBROUTINE

Purpose : This subprogram is essentially the same as MENU, but allows
input of the prompt produced at the bottom of the menu.

Arguments :
      CHOICE  - (character*(*),input) array of the text of the choices.
      N       - (integer,input) the number of entries in choice.
      HEADING - (character*(*),input) the text of the heading to be produced
                 at the top of each page.
      PROMPT  - (character*(*),input) the text of the prompt to be produced
                 at the bottom of the menu.
      ANSWER  - (integer,output) the user's answer.

Notes :
1. Not transportable (minor problems only).
2. The text in choice should be less than about 75 characters.
#
Subprogram : MERGE (MERGEI, MERGER)

Type : SUBROUTINE

Purpose : to merge two previously sorted arrays into a new sorted array,
deleting duplicates.

Arguments :
     A   - (#1,input) sorted array 1
     NA  - (integer,input) number of elements in A
     B   - (#1,input) sorted array 2
     NB  - (integer,input) number of elements in B
     C   - (#1,output) sorted array formed from A and B
     NC  - (integer,output) number of elements in C

Notes :
1.  The type of the arrays is CHARACTER for MERGE, INTEGER for MERGEI,
and REAL for MERGER.
2.  Duplicate entries are deleted; NC = NA + NB - number_of_duplicates
3.  You can NOT use one of the input arrays as the output array.
#
Subprogram : MODE

Type : SUBROUTINE

Arguments :
     MTYPE  - (character*(*),output) the process mode

Notes :
1. Not transportable.
2. The valid modes are : INTERACTIVE, BATCH, REMOTE, DETACHED, NETWORK, and
OTHER; ERROR indicates an error in getting the information.
#
Subprogram : NAE (NAE1, NAE2, NAE3, RNAE, RNAE1, RNAE2, RNAE3)

Type : SUBROUTINE

Purpose : to provide a simple, screen-oriented editor for arrays.  There are a
total of six callable subprograms in this group.  Three (those whose names
begin with N) are used for editing integer arrays and three (those whose names
begin with R) are used for editing real arrays.  NAE1 and RNAE1 are synonyms
for NAE and RNAE respectively.  The digit appended to the name indicates how
many arrays are edited at once; e.g., NAE3 edits three integer arrays.

Arguments :
     NUM    - (integer,update) the number of elements in the array(s) at the
                time of calling. This number will change if additions or
                deletions are made.
     MAX    - (integer,input) the maximum number of elements permitted in the
                array(s) (i.e., the dimension).
     ARRAY  - (integer/real,update) the first data array.
     ARRAY2 - (integer/real,update) the second data array (NAE2 and NAE3).
     ARRAY3 - (integer/real,update) the third data array (NAE3).
     ERROR  - (logical,output) set .TRUE. if an unrecoverable error was
                encountered, .FALSE. otherwise.

Notes:
   1. For the versions with more than one array, all arrays must have the same
number of elements in them and have the same dimension.
   2. There is no version with arrays of mixed types.
   3. There is no exit-without-saving option; if this is desired it must be
provided by the user.
   4. This subprogram only works on a VT100 compatible terminal and is not
even remotely transportable.
   5. The commands are :
       A - Add empty elements to the end of the array(s).
       B - go to the Beginning of the array(s).
       D - Delete the line the cursor is on.
       E - go to the End of the array(s).
       I - Insert an empty element before the line the cursor is on.
       R - Repaint the screen.
       S - toggle the Scroll direction (default is down).
       ?/H - print a Help message.
       ^Z/Q - exit the editor.
   6. A carriage return with nothing else on the line advances the cursor one
line in the scroll direction.
   7. A line with one or more numbers on it means replace the line the cursor
is on with the new values.  If fewer numbers are entered than arrays being
edited, the remaining entries will be unaffected.
   8. It is not necessary to space out to the next field; as long as there is
one or more spaces between entries the editor will rewrite the line properly.
   9. ARRAY, ARRAY2, and ARRAY3 are real for RNAE, RNAE2, and RNAE3; they are
integer for NAE, NAE2, and NAE3.
#
Subprogram : NAME_TO_PID

Type : SUBROUTINE

Purpose : convert a process name into an extended PID.

Arguments :
      PNAME - (character*(*),input) the name of the process
      PID   - (character*(*),output) hex string representation of EPID

Notes :
1. Not transportable.
#
Subprogram : NARGS

Type : SUBROUTINE

Purpose : This subprogram will return the number of arguments passed
to the subprogram which called it.

Arguments :
      NUM - (integer,output) the number of arguments.

Notes : Not transportable.
#
Subprogram : NDEX

Type : INTEGER FUNCTION

Purpose : To find the first occurrence of characters starting
          from the end of a string.

Arguments :
      STRING - (character*(*),input) the string to be searched
      TARG   - (character*(*),input) the target characters to search for
      NDEX  -  (integer,output(FUNCTION value)) location of the target
                  characters in the string

Notes :
If the target characters do not occur in the string, or the string is of
length less than 1, or if the number of characters in the target is greater
than the number in the string, the function will return the value 0.
#
Subprogram : NUMERIC

Type : SUBROUTINE

Purpose : set an ANSI terminal to send numeric codes from the keypad.

Notes :
1. Not transportable.
2. Normally used after APPLICATION to reset keypad.
#
Subprogram : OCTDEC

Type : SUBROUTINE

Purpose : to convert an octal string to a decimal integer.

Arguments :
     O - (character*16,input) the octal string.
     I - (integer,output) the integer result.

Notes : not transportable.
#
Subprogram : OPEN_MAILBOX

Type : SUBROUTINE

Purpose : Open a mailbox and assign it to a channel for I/O.

Arguments :
     NAME  - (character*(*),input) the logical name to assign to the mailbox.
     PERM  - (logical,input) set TRUE to create a permanent mailbox, else FALSE
     IPROT - (integer,input) the type of protection to apply to the mailbox.
                0 = accessible to everyone
                1 = no world access
                2 = no world or group access
                3 = no world, group, or system access
     ICHAN - (integer,output) the channel number assigned; this number must be
                passed to all subsequent MAILBOX I/O routines.

Notes :
1. Not transportable.
2. If the mailbox is permanent, the logical name is created in the system
logical name table.  PRMMBX privilege is required to do this.  If temporary,
the name is placed in the job logical name table by default; see the SYS$CREMBX
system service to see how to change this.
3. The first call to OPEN_MAILBOX for a given mailbox will create the mailbox.
Subsequent calls assign an I/O channel only.
4. READ_MAILBOX performs a synchronous read from the mailbox (i.e., it will
wait for a message to be placed in the mailbox).  CHECK_MAILBOX does a read
only if there is already a message in the mailbox.
5. The maximum message size is 1000 bytes.
6. The use of the parameter "IPROT" has changed since the early version of this
subprogram.
7. ICHAN <= 0 if an error occurs.  If ICHAN <0 then the status code is |ICHAN|.
#
Subprogram : OPER

Type : SUBROUTINE

Purpose : to send a message to an operator.

Arguments :
      MESSAGE - (character*(*),input) the text of the message to send.
      WHO     - (character*(*),input) the name of the operator to whom the
                  message should be sent (see notes).

Notes :
   1. Not transportable
   2. The operator names recognized are : CENTRAL, PRINT, TAPES, DISKS,
         DEVICE, CARDS, NTWORK, CLUSTER, SECURITY, REPLY, and NETWORK.
   3. NTWORK and NETWORK are identical.
   4. If WHO matches none of the above, CENTRAL is used.
   5. The length of the message is limited to 246 characters.
#
Subprogram : OPERW

Type : SUBROUTINE

Purpose : to send a message to an operator and wait for a reply.

Arguments :
      MESSAGE - (character*(*),input) the text of the message to send.
      WHO     - (character*(*),input) the name of the operator to whom the
                  message should be sent (see notes).
      REPLY   - (character*(*),output) the text typed by the operator in
                  reply to the message.

Notes :
   1. Not transportable
   2. The operator names recognized are : CENTRAL, PRINT, TAPES, DISKS,
         DEVICE, CARDS, NTWORK, CLUSTER, SECURITY, REPLY, and NETWORK.
   3. NTWORK and NETWORK are identical.
   4. If WHO matches none of the above, CENTRAL is used.
   5. If an error occurs, REPLY will contain an error message of which the
         first word is always "ERROR".
   6. The length of the message is limited to 246 characters.
#
Subprogram : ORDINAL

Type : SUBROUTINE

Purpose : change a number into its ordinal form (i.e., "1" to "1st",
"2" to "2nd", etc.).

Arguments :
     NUM  - (character*(*),update) the number to convert
#
Subprogram : OUTPUT_MAILBOX

Type : SUBROUTINE

Purpose : sets up an AST so that a routine will be called when an attempt is
made to read data from the specified mailbox.

Arguments :
     ICHAN  - (integer,input) the channel number assigned by OPEN_MAILBOX
     OUTPUT - (external,input) the routine to be called when the AST is
                 satisfied.

Notes :
1. Not transportable.
2. OUTPUT will be passed ICHAN as its argument.
3. OUTPUT must call WRITE_MAILBOX to write the actual message.
4. Once OUTPUT is called the AST will be resolved; if additional read requests
are expected, OUTPUT_MAILBOX should be called again to reset the AST.
#
Subprogram : PACKOUT and FPACKOUT

Type : SUBROUTINE

Purpose : To pack a string buffer with words (or phrases) and automatically
print it when it becomes full.  Continuation can be accomplished by specifying
a continuation string and whether the string occurs at the end of the line to
be continued or at the beginning of the continued line.

Arguments :
        NUNIT   - (integer,input) logical unit number
        IN      - (character*,input) the string to be packed into the output
                        buffer
        OUT     - (character*,update) the output buffer
        IOUT    - (integer,update) the location in OUT of the last nonblank
                        character
        CSTRING - (character*,input) text of continuation string (blank for
                        none)
        CEND    - (logical,input) true for end of string to be continued, false
                        for start of continued string

Notes:
1. Set IOUT to zero before first call, but PACKOUT and FLUSHOUT automatically
   reset it to the proper value.
2. Always call FLUSHOUT to print a partial buffer (if any).
3. If you want spaces between words, you must include spaces in IN.
4. PACKOUT assumes carriage_control carriage return, FPACKOUT assumes FORTRAN
   carriage control.
5. Example:
        IBUFF = 0
        CALL PACKOUT (6, 'Next ', BUFF, IBUFF, '...', .true.)
        CALL FLUSHOUT
#
Subprogram : PARSE

Type : INTEGER FUNCTION

Purpose : to parse a VMS file specification and return all or part of the
file spec.

Arguments :
     SPEC    - (character*(*),input) the file specification
     DEFAULT - (character*(*),input) the default file spec to be used when
                   parts are missing from "SPEC"
     PART    - (character*(*),input) the portion of the file specification
                   to return; i.e.,
                    "NODE", "DEVICE", "DIRECTORY", "NAME", "TYPE", "VERSION"
                    "FULL" - return entire file spec
     OUT     - (character*(*),output) the resulting value of the requested
                   part (blank for error)
     PARSE   - (integer,function value) value of RMS$PARSE status code if
                   an error occurs (meaningless otherwise)

Notes :
1. Not transportable.
2. If PART is blank, FULL is assumed.
3. If FULL is specified, the resulting file spec has all parts except the
node name.
4. "SPEC", "DEFAULT", and "PART" must be 127 characters or shorter.
5. The punctuation WILL be included in the output.
#
Subprogram : PAY_DAY

Type : INTEGER FUNCTION

Purpose : Return the number of days since the start of the current pay period

Arguments :
      PAY_DAY - (integer, function value) number of days
#
Subprogram : PCALFA

Type : SUBROUTINE

Purpose : To return a PC (running MSKERMIT version 2.3) to alfa mode after
displaying graphics.

Arguments :
      None
#
Subprogram : PEEK

Type : INTEGER FUNCTION

Purpose : to return the value in the specified address in memory.

Arguments :
      ADDR  - (integer,input) the address in memory to check.
      PEEK  - (integer,function value) the integer value of the byte at
                  ADDR (0 to 255).

Notes : Not transportable
#
Subprogram : PEEKW

Type : INTEGER FUNCTION

Purpose : to return the value in the specified address in memory.

Arguments :
      ADDR  - (integer,input) the address in memory to check.
      PEEKW - (integer,function value) the integer value of the word at
                  ADDR.

Notes : Not transportable
#
Subprogram : POKE

Type : SUBROUTINE

Purpose : to store a byte at a given address.

Arguments :
      IADDR  - (integer,input) the address where the byte will be stored.
      IBYTE  - (byte,input) the byte.

Notes : Not transportable.
#
Subprogram : POKEW

Type : SUBROUTINE

Purpose : to store a word at a given address.

Arguments :
      IADDR  - (integer,input) the address where the word will be stored.
      IWORD  - (integer,input) the word.

Notes : Not transportable.
#
Subprogram : PRINT_FILE

Type : INTEGER FUNCTION

Purpose : prints a file to a system print queue.

Arguments :
      FNAME - (character*(*),input) the file specification for the file
      QNAME - (character*(*),input) the print queue name

Notes :
1. Not transportable.
2. If QNAME is blank, 'SYS$PRINT' is used.
#
Subprogram : PROMPT

Type : SUBROUTINE

Purpose : produce a prompt string to the terminal without a <CR>/<LF> at
the end of the line(i.e., a prompt).

Arguments :
      STRING - (character*(*),input)string to be produced as the prompt.

Notes : Not transportable.
#
Subprogram : PUTC

Type : SUBROUTINE

Purpose : put a single character to a text file.  Buffer the character and
dump the buffer when a CHAR(13) is sent.

Arguments :
     C    - (input,character) the character to print.
     NOUT - (input,integer) the FORTRAN logical unit number for the output
             file.

Notes:
1.  WARNING... don't forget to put a carriage return (CHAR(13)) before closing
the file or you may lose your last buffer.
#
Subprogram : PUTCHAR

Type : SUBROUTINE

Purpose : put a string to the terminal without carriage control.

Arguments :
     STR  - (input,character*(*)) the string

Notes:
1. Not transportable.
2. May fail if terminal isn't standard unit.
#
Subprogram : PUTSTM

Type : SUBROUTINE

Purpose : to put a FORTRAN statement to a file with continuation

Arguments :
        NUNIT - (integer,input) output logical unit number
        LABEL - (character*5,input) statement label
        STMT  - (character*(*),input) statement as a long string

Notes:
1. On VAXes, the unit should be open with CARRIAGECONTROL='LIST'.
#
Subprogram : PUTSTRING

Type : SUBROUTINE

Purpose : to put a string to the terminal screen.  The string may be longer
than one line, it is broken at a space.

Arguments :
	STRING - (character*(*), input) the string
#
Subprogram : QSORT (QSORTI, QSORTR)

Type : SUBROUTINE

Purpose : use a quick sort algorithm to sort a character array

Arguments :
      ARRAY - (character*(*), update) the array to be sorted
                (integer for QSORTI, real for QSORTR)
      NUM   - (integer, input) number of elements in "array"
      WORK  - (character*(*), scratch) scratch word with same size as
                 one "array" element (not present for QSORTI and QSORTR)

Notes:
1. The maximum size of each array element is 80 characters due to an internal
work area.
#
Subprogram : QUOTA

Type : SUBROUTINE

Purpose : to retrieve disk quota information for an individual user.

Arguments :
      DISK  - (character*(*),input) PHYSICAL or LOGICAL disk device name.  If
               blank, use SYS$LOGIN.
      UIC   - (character*(*),input) Numeric UIC code (e.g., "[10,2]") to
               be checked.  If blank, check caller's UIC.
      USED  - (integer,output) Number of used blocks.
      PERM  - (integer,output) Permanent quota in blocks.
      RET   - (integer,output) 0 for success, nonzero for failure.

Notes :
1. Not transportable.
2. Future enhancement will allow character UIC codes (e.g., "[SYSTEM,SMITH]")
3. Future enhancement will allow wildcard UICs.
4. For failures, RET will be 1 or the status code returned by a system service.
5. Privileges are needed to check a UIC for other than the caller.
#
Subprogram : READINT

Type : SUBROUTINE

Purpose : to read an integer value from the terminal, precluding the entry of
illegal characters and allowing line editing.

Arguments :
     INT  - (integer, output) the value entered.

Notes :
1. Not transportable.
2. Expects an ANSI compatible terminal.
3. Uses the cursor store/restore function.
4. The valid integer characters are:
        -,+    first character only
        0-9
5. The line editing keys that work are:
        ^A     toggle insert/overstrike
        ^E     go to end of string (integer)
        ^H     go to start of string
        ^U     delete all characters before cursor
        left,right arrow  move cursor
        <DEL>  delete character to left of cursor
        <RET>,^Z,^Y,^C    exit, return value
6. The value 0 is returned if anything goes wrong, but this is unlikely since
validity of the integer is checked internally.
#
Subprogram : READKEY

Type : SUBROUTINE

Purpose : to read a VT100/200 style key from a keyboard.

Arguments :
     STRING - (character*3,output) a 3 character string describing the key.
              Typing keys get returned verbatim.
              Control keys are returned preceded by a "^" (e.g., "^D")
              Keypad keys are preceded by K (e.g., "K2")
              Function keys are returned as Fn (e.g. "F10")
              Other keys are returned as a 3 character abbreviation
                                                (e.g., "INS")
              Illegal sequences return "ERR"
              Arrows return "UP", "DOW", "RIG", "LEF"
Notes:
1. Not transportable.
2. Remember, you must instruct your terminal to use the keypad, otherwise those
keys simply return 0-9.
3. This subprogram treats the ANSI sequences "CSI" and "SS3" as identical.  As
a result, some sequences which should be errors are treated as valid.  For
example, "PF1" is defined as "CSI/P" but "SS3/P" will also signal "PF1".  This
would not normally be a problem.
#
Subprogram : READQ

Type : SUBROUTINE

Purpose : read a character string from the terminal without echoing it to
the screen.  End with carriage return.  (READQ is short for READ QUIET).

Arguments :
     STRING - (character(*),output) the string entered.

Notes :
1. Not transportable.
#
Subprogram : READT

Type : INTEGER FUNCTION

Purpose : read a string from the terminal; return if no response
within a specified time limit.

Arguments :
     ITIME - (integer,input) the time (in seconds) before timing out.
     BUFF  - (character(*),output) the string read.
     RAEDT - (integer,function value) the return status...
                 = 0 for normal return
                 = 1 for timeout period reached
                 =-1 for errors

Notes :
1. Not transportable
2. Normal return occurs when the user terminates the input with a
   carriage return or control/Z.
#
Subprogram : READ_MAILBOX

Type : SUBROUTINE

Arguments :
     ICHAN - (integer,input) the channel number assigned by OPEN_MAILBOX
     BUFFER- (character*(*),output) the text of the message read.  If the
                mailbox was closed or an end of file signalled, BUFFER contains
                the string "END-OF-FILE".

Notes :
1. Not transportable.
2. The size of BUFFER is restricted to 256 bytes or less.
3. See OPEN_MAILBOX
#
Subprogram : RECALL (FORTRAN/macro)

Type : SUBROUTINE

Purpose : recall the DCL commands from the DCL recall buffer.

Arguments :
      COMMAND - (character*(*),output) the recalled command.
      NUM     - (integer,input) the number of the command to recall.
                1 for the most recent (present) command, 20 for the oldest.

Notes :
1. Not transportable.
2. There is the possibility that this routine might not work properly under
future releases of VMS.
3. The calling program must be linked with SYS$SYSTEM:DCLDEF.STB/SEL and
SYS$SYSTEM:SYS.STB/SEL.
#
Subprogram : RENAME

Type : INTEGER FUNCTION

Purpose : Rename a file.

Arguments :
      OLD   - (character*(*),input) the previous name of the file.
      NEW   - (character*(*),output) the new name to give it.
      RENAME- (integer,function value) .false. (even) on error

Notes:
1. Not transportable.
2. The function value return is the same as from LIB$RENAME_FILE.
#
Subprogram : REPLAC

Type : SUBROUTINE

Purpose : replace all of one character in a string with a new character.

Arguments :
      STRING - (character*(*),update) the string to be modified.
      OLD    - (character*1,input) the character to replace.
      NEW    - (character*1,input) the new character
#
Subprogram : RESTORE_CURSOR

Type : SUBROUTINE

Purpose : restore an ANSI terminal's text cursor to the location saved by the
previous call to SAVE_CURSOR.
#
Subprogram : REVLF

Type : SUBROUTINE

Purpose : to send a reverse line feed (cursor up one line) to the terminal.

Arguments :
      None

Notes : the present version is for VT-100 and compatible terminals only, a more
generally applicable version is commented out.  Some terminals recognize
CHAR(11) as a reverse line feed.
#
Subprogram : RIGHT (macro)

Type : SUBROUTINE

Purpose : Right justify a string.

Arguments :
      STRING - (character*(*),update) the string to be right justified.
#
Subprogram : SAVE_CURSOR

Type : SUBROUTINE

Purpose : to save the current cursor location on an ANSI terminal.  Restore it
later with RESTORE_CURSOR.
#
Subprogram : SCALE

Type : SUBROUTINE

Purpose : Given XMIN, XMAX, and N SCALE finds a new range XMINP and XMAXP
divisible into approximately n linear intervals of size DIST.
          C.R. LEWART
          BELL TELEPHONE LABORATORIES, INC
          HOLMDEL, NJ  07733
     REFERENCE:
          COMMUNICATIONS OF THE ACM
          VOLUME 16, 1973

Arguments :
        XMIN  - (real,input) DATA MINIMUM
        XMAX  - (real,input) DATA MAXIMUM
        N     - (integer,input) TARGET NUMBER OF INTERVALS
        XMINP - (real,output) NEW MINIMUM
        XMAXP - (real,output) NEW MAXIMUM
        DIST  - (real,output) VALUE PER INTERVAL

Notes:
1. If anything goes wrong, DIST is set to 0.0.
#
Subprogram : SCOLOR

Type : SUBROUTINE

Purpose : to set the surface color on a Tektronix 41xx terminal.

Arguments :
      COLOR - (character *(*), input) the color to set

Notes :
1. The available colors (and aliases) are:
        BLACK                   BLUE
        CHARCOAL                CBLUE (BCYAN)
        GRAY                    CYAN
        WHITE                   GCYAN (CGREEN)
        CREAM                   GREEN
        BEIGE                   YGREEN (GYELLOW)
        KHAKI                   YELLOW
        TAN                     RYELLOW (YRED, ORANGE)
        MAGENTA (PURPLE)        RED
        BMAGENTA (MBLUE)        MRED (RMAGENTA)
#
Subprogram : SCROLL

Type : SUBROUTINE

Purpose : to set the scroll region on a VT100-type terminal.

Arguments :
     ITOP   - (integer,input) the top line to be included in the scroll.
     IBOT   - (integer,input) the bottom line to be included.

Notes :
1. Not transportable.
2. ITOP must be <= IBOT.
3. ITOP and IBOT must be in the range 1-23.
4. Always call SRESET before exiting a program that uses SCROLL.
#
Subprogram : SEARCH

Type : SUBROUTINE

Purpose : Search an array of character variables for the occurrence of a
target character variable.  If no match is found, search for an entry for
which target is a non-ambiguous abbreviation.

Arguments :
      STRING  - (character*(*),input) sorted array of potential keywords.
      NSTRNG  - (integer,input) number of entries in STRING.
      TARGET  - (character*(*),input) target variable with same length as the
                 entries in STRING.
      K       - (integer,output) the index of the matched keyword (if found).
      MATCHD  - (logical,output) TRUE if a match was found.
      AMBIG   - (logical,output) TRUE if no exact match was found and more
                 than one entry could be abbreviated to TARGET. (MATCHD will
                 be TRUE regardless).
Notes:
1. Example - for the STRING array 'ABC', 'DEF', 'DOGGY' with NSTRNG = 3; the
following would result:

       TARGET             K           MATCHD           AMBIG
       ------            ---          ------           -----
        DEF               2            TRUE            FALSE
        XYZ               3            FALSE           FALSE
        DE                2            TRUE            FALSE
        D                 2            TRUE            TRUE

2. If the search fails, K will point to the next higher value in the array
unless the target is greater than the largest element in the array, in which
case K will have the value of NSTRNG.  THIS FUNCTIONING IS SUBJECT TO CHANGE
IN FUTURE VERSIONS!
#
Subprogram : SEARCH1

Type : SUBROUTINE

Purpose : Search an array of character variables for the occurrence of a
target character variable.

Arguments :
      STRING  - (character*(*),input) sorted array of potential keywords.
      NSTRNG  - (integer,input) number of entries in STRING.
      TARGET  - (character*(*),input) target variable with same length as the
                 entries in STRING.
      K       - (integer,output) the index of the matched keyword (if found).
      MATCHD  - (logical,output) TRUE if a match was found.

Notes:
Example - for the STRING array 'ABC', 'DEF', 'DOGGY' with NSTRNG = 3; the
following would result:

       TARGET             K           MATCHD
       ------            ---          ------
        DEF               2            TRUE
        XYZ               -            FALSE
        DE                2            FALSE
#
Subprogram : SEND

Type : SUBROUTINE

Purpose : Send a message to one or more users.

Arguments :
     USER  - (character*(*),input) the name of the user(s) or terminal to
              receive the message.
     TEXT  - (character*(*),input) the message text.

Notes :
1. Not transportable.
2. If 'USER' ends in a colon, the target is assumed to be a terminal(e.g., TTA0:)
3. If 'USER' is blank or an asterisk, the target is all users presently logged
   on.
4. If neither 2 or 3 is the case, the target is a single user.
5. There is no BELL sounded by SEND, but it may be included in TEXT as ^G.
6. Requires that the calling program or userid have 'OPER' and 'WORLD'
   privileges.
#
Subprogram : SENDW

Type : SUBROUTINE

Purpose : Send a message to one or more users and wait for completion.

Arguments :
     USER  - (character*(*),input) the name of the user(s) or terminal to
              receive the message.
     TEXT  - (character*(*),input) the message text.
     NOK   - (integer,output) the number of terminals successfully notified.
     NFAIL - (integer,output) the number of terminals that should have been
              notified, but failed due to a timeout or the terminal nobroad-
              cast switch was set.

Notes :
1. Not transportable.
2. If 'USER' ends in a colon, the target is assumed to be a terminal(e.g., TTA0:)
3. If 'USER' is blank or an asterisk, the target is all users presently logged
   on.
4. If neither 2 or 3 is the case, the target is a single user.
5. There is no BELL sounded by SEND, but it may be included in TEXT as ^G.
6. Requires that the calling program or userid have 'OPER' and 'WORLD'
   privileges.
#
Subprogram : SETIME

Type : SUBROUTINE

Purpose : Start the CPU timer running for GETIME.

Arguments : NONE
#
Subprogram : SLEEP

Type : SUBROUTINE

Purpose : to put the calling program to sleep

Arguments :
     REAL_TIME - (real,input) the amount of time, in seconds, for the
                 program to sleep
#
Subprogram : SORT (SORTI,SORTR)

Type : SUBROUTINE

Purpose : sort an array of variables in ascending order.

Arguments :
      ARRAY  - (character*20,update) the array of elements to be sorted
                (in place).
      N      - (integer,input) the number of elements in ARRAY.

Notes:
1. SORTI is the same as SORT, but for integer numbers.
2. SORTR is the same as SORT, but for real numbers.
3. Ascending order will be alphabetical for character data.
4. The character version is restricted to strings <= 255 characters long.
#
Subprogram : SRESET

Type : SUBROUTINE

Purpose : reset the VT-100 terminal after the use of STATUS (before exiting
the program).

Arguments :
      None

Notes : not transportable.
#
Subprogram : START_MESS

Type : SUBROUTINE

Purpose : re-enables the system to send broadcast messages to your terminal
after a call to STOP_MESS.  Displays any messages that were trapped while
STOP_MESS was in effect.

Arguments : none

Notes :
1. Not transportable.
2. See also STOP_MESS.
#
Subprogram : START_Y

Type : SUBROUTINE

Purpose : to restore the normal system response to a control/Y after STOP_Y
has been called.

Notes :
1. Not transportable.
2. See also STOP_Y
#
Subprogram : STAT

Type : SUBROUTINE

Purpose : to reserve the top line of a VT-100 terminal for status printout and
to print a status message in reverse video.

Arguments :
      IX     - (integer,input) the column in which the cursor should reside
                 after the status information is displayed.
      IY     - (integer,input) the row in which the cursor should reside after
                 the status information is displayed.
      TEXT   - (character*(*),input) the message to be displayed (<=80 chars).

Notes :
   1. Always call SRESET before exiting the program to reset the scroll
region on the terminal.
   2. The difference between this routine and STATUS is that this routine
assumes you know the location where you want the cursor to return to.  If you
don't know where the cursor is, use STATUS.
   3. Not transportable.
#
Subprogram : STATUS

Type : SUBROUTINE

Purpose : to reserve the top line of a VT-100 terminal for status printout
and to print a status message in reverse video.

Arguments :
      TEXT   - (character*(*),input) the message to be displayed (<=80 chars).

Notes :
   1. Always call SRESET before exiting the program to reset the terminal's
scrolling region.
   2. Because of a rough part I couldn't fix, a dollar sign (actually an ESC)
is sent to the terminal to get the present cursor location.  There is then a
1.5 second delay.  If you know the cursor location, STAT doesn't have these
drawbacks.
   3. Not transportable.
#
Subprogram : STOP_MESS

Type : SUBROUTINE

Purpose : to stop the system from sending broadcast messages to your terminal.
Stores messages for later display.

Notes :
1. Not transportable.
2. Up to 10 messages of 2000 characters each will be stored; any more will
be ignored with no error message.
3. See also START_MESS.
#
Subprogram : STOP_Y

Type : SUBROUTINE

Purpose : to intercept control/Y and pass control to a user-specified routine.

Arguments :
        USER - (external, input) subprogram to be called when a
               control/Y is intercepted (declared EXTERNAL).

Notes:
1. Not transportable.
2. See also START_Y.
#
Subprogram : STRIP_EXC

Type : SUBROUTINE

Purpose : strip trailing exclamation point style comments from a string.  Takes
into account character strings delimited by either " or '.

Arguments :
     STRING - (character*(*),update) the string to be stripped

Example:
    S = 'THIS IS A STRING  ! AND COMMENT'
    CALL STRIP_EXC (S)

returns S = 'THIS IS A STRING'
#
Subprogram : STRPSTM

Type : SUBROUTINE

Purpose : strip all character strings from a FORTRAN statement.

Arguments :
     STMT - (character(*),input) FORTRAN statement containing strings
     LENS - (integer,input) length of STMT
     STRP_STMT - (character(*),output) FORTRAN statement stripped of strings
     LENSTRP   - (integer,output) length of STRP_STMT

Notes :
1.  Usually would be called after routine GETSTM (as GETSTM leaves strings
    untouched).
2.  Useful for codes processing FORTRAN programs as an aid to categorizing
    a FORTRAN statement.
#
Subprogram : SUBMIT

Type : SUBROUTINE

Purpose : submit a '.COM' file into a batch queue.

Arguments :
     FILE  - (character(*),input) file specification for the '.COM' file
     QUEUE - (character(*),input) name of the batch queue

Notes:
1. If the queue name is left blank, 'SYS$BATCH' is used.
2. The queue names are : SYS$BATCH, BAT$MEDIUM, BAT$LONG, BAT$XLONG
#
Subprogram : SUBMITP

Type : SUBROUTINE

Purpose : submit a '.COM' file into a batch queue with a log file and
parameters.

Arguments :
     FILE  - (character(*),input) file specification for the '.COM' file
     QUEUE - (character(*),input) name of the batch queue
     LOG   - (logical,input) set true if you want a .LOG file created
     NP    - (integer, input) number of parameters
     P     - (character*(*),input) array of parameter values

Notes:
1. If the queue name is left blank, 'SYS$BATCH' is used.
2. The queue names are : SYS$BATCH, BAT$MEDIUM, BAT$LONG, BAT$XLONG
3. If LOG is .true., the log file name will be the same as "FILE" except the
file type will be ".LOG".
4. NP may be 0.
5. P(1) is assigned to 'P1' in the .COM file, P(2) to 'P2', etc.
6. NP must be less than or equal to 8.
#
Subprogram : THISCENT

Type : SUBROUTINE

Purpose : return the current century as an integer

Arguments :
     ICENT - (integer, output) current century

Notes :
1. Not transportable - uses VMS LIB$DATE_TIME routine to get current date
#
Subprogram : TIMER_CANCEL

Type : SUBROUTINE

Purpose : cancel a queued subroutine (by TIMER_SET) before execution.

Arguments :
     ID  - (integer,input) the ID number assigned by the call to TIMER_SET

Notes:
1. Not transportable.
#
Subprogram : TIMER_SET

Type : SUBROUTINE

Purpose : To queue a subroutine for execution later.

Arguments :
     SECONDS - (integer,input) number of seconds to wait
     ROUTINE - (external,input) the routine to execute (declared EXTERNAL in
                 the calling routine.
     ID      - (integer,input) an arbitrary integer used to track the routines.

Notes :
1. Some other routines which use timers may not be compatible with this
routine.
2. Not transportable.
3. The value of ID will be passed to "ROUTINE" BY VALUE when it is called.
#
Subprogram : TOSTD

Type : SUBROUTINE

Purpose : convert a value (given in non-standard units) to the equivalent value
for standard units.

Arguments :
     VALIN  - (real,input) the value in non-standard units.
     STRIN  - (character*(*),input) the units of VALIN (in non-standard units).
     VALOUT - (real,output) the value after conversion.
     STROUT - (character*(*),output) the standard units for VALOUT.
     IERR   - (integer,output) =0 for no error; 1 for illegal characters or
                exponent error; 2 for unknown unit in STRIN; 3 for ambiguous
                unit in input string; and 4 for excessively complex units.

Notes :
1. See FRMSTD
2. Units which are presently recognized by the program :

      UNIT              ALIAS(ES)                  UNIT             ALIAS(ES)
      ----              ---------                  ----             ---------
      ATMOS                                        PASCAL             PA
      BAR                                          PINTS
      BTU                                          POUND              LB
      CM                                           PSI
      DEGREE                                       QUARTS
      DYNE                                         RADIAN             RAD
      ERG                                          REVOLUTION         REV
      FATHOM                                       SECOND             S,SEC
      FEET               FT                        SLUG
      FPS                                          TONS
      GALLON             GAL                       WATTS
      GRAM               GM                        YARD               YD
      HOUR               HR
      HP
      INCH               IN
      KILOGRAM           KG
      KILOMETER          KM
      KNOTS
      LITER              L
      METER              M
      MILE               MI
      MINUTE             MIN
      MPH
      NAUTMILE
      NEWTON             N

3. IMPORTANT!!!! The BLOCK DATA MLIB$DATA must be included to initialize the
common block used by FRMSTD/TOSTD.  Do this by including the statement:
"EXTERNAL MLIB$DATA" in your source code.
#
Subprogram : TOUCH

Type : SUBROUTINE

Purpose : Change the file revision date for the specified file to the current
date/time.

Arguments :
     FILE - (character*(*),input) the file specification

Notes :
1. Not transportable.
2. Usefull for programs like MAKE.
#
Subprogram : TRANSL8

Type : SUBROUTINE

Purpose : Translate a logical name into a physical name (or otherwise finish
the translation to the lowest level).

Arguments :
     LOGIC  - (character*(*), input) the logical name
     PHYSIC - (character*(*), output) the physical name

Notes :
1. Not Transportable
2. Searches the PROCESS, JOB, GROUP, and SYSTEM tables in that order.
3. TRANSL8 takes the place of several other potential routines; for example,
CALL TRANSL8 ('SYS$NODE', NODE_NAME) will return the present node name and
CALL TRANSL8 ('SYS$NAME', VAX_NAME) will return the name of this VAX system.
4. If the logical name is not found in any table, the physical name is set to
the logical name (i.e., it is already physical).
#
Subprogram : TRIM (C)

Type : Character function

Purpose : To remove trailing blanks from a "C" string

Arguments :
   STR - ("C" character string, input) the string with blanks
   TRIM - ("C" character string, function value) the string without blanks
#
Subprogram : UNIQUE

Type : SUBROUTINE

Purpose : return a unique filename to be used for temporary applications
when it is critical that the filename not be the same as any other.

Arguments :
     NAME  - (character*14,output) the name

Notes:
1. EXAMPLE:
    CALL UNIQUE ( NAME )
    FNAME = NAME//'.TMP'
    OPEN(UNIT=0,FILE=FNAME,...
#
Subprogram : UNTAB

Type : SUBROUTINE

Purpose : To replace a string with an equivalent string where ASCII HT (tabs)
are replaced with an appropriate number of blanks.  Appropriate, on the Vax, is
defined to be at 8 column intervals (Vax default).  The tab stop definitions
are in a data statement in the code.

Arguments :
      STRING - (character*(*),update) a string, of maximum length 255, which
               is replaced with the untabbed string.

Note : If untabbing causes the string to exceed its defined length, the string
will be truncated on the right.
#
Subprogram : VERIFY (macro)

Type : LOGICAL FUNCTION

Purpose : To verify that each character in the first string also appears in the
second string.

Arguments :
      STR1   - (character*(*),input) the string to be verified.
      STR2   - (character*(*),input) the string containing the valid
                characters.
      VERIFY - (logical,function value) TRUE if each character in STR1 also
                appears in STR2, FALSE otherwise.
#
#
Subprogram : VT340ALFA

Type : SUBROUTINE

Purpose : to set a VT340 terminal into ALPHANUMERIC mode.

Arguments :
      none
#
Subprogram : VT340GRAF

Type : SUBROUTINE

Purpose : to set a VT340 terminal into GRAPHICS mode.

Arguments :
      none
#
Subprogram : WEKDAY

Type : SUBROUTINE

Purpose : To calculate the day of the week from a system date or time.

Arguments :
      DATE  - (character*23,input) the date (e.g., '25-JAN-1985 12:10:00.00').
      DAY   - (character*9,output) the weekday (e.g., 'SUNDAY').

Notes :
1. The day will be returned as 'ERROR' if the date was specified incorrectly.
2. Not transportable.
#
Subprogram : WILD_MATCH

Type : FUNCTION

Purpose : verify that a file specification is represented by a file
specification with wildcards.

Arguments :
     WILD - (character*(*),input) the file specification containing the
                        wildcards.
     FILE - (character*(*),input) the single file specification
     WILD_MATCH - (logical,function value) true if they match

Notes :
1. Not transportable
2. Asterisk (*) represents zero or more characters; percent (%) represents
exactly one character; ellipsis (...) represents wildcard directory for this
level and below.
3. If the asterisk wildcard is present, no other wildcard is accepted for that
portion of the specification (for now).
4. Multiple percent signs is permitted.
5. Asterisk and percent may appear in the name or type fields.  Asterisk may
REPLACE the version field.
6. Syntax is checked ONLY; no attempt is made to verify that the file specified
exists.  For this reason, specifying semicolon only for the version is the same
as specifying *.
7. Examples :
        WILD                    FILE                    RETURNS
        x.dat                   x.dat                   true
        y.dat                   x.dat                   false
        %.dat                   x.dat                   true
        *.dat                   x.dat                   true
        a*z.dat                 abyz.dat                true
        [x...]b*.fo%            [x.y.z]bat.for          true
#
Subprogram : WRITE_MAILBOX

Type : SUBROUTINE

Purpose : write a message to a mailbox.

Arguments :
     ICHAN  - (integer,input) the channel number assigned by OPEN_MAILBOX
     BUFFER - (character*(*),input) the text of the message

Notes :
1. Not transportable.
#
Subprogram : YESNO

Type : SUBROUTINE

Purpose : read the answer to a yes/no type of question in free format
with appropriate error checking.

Arguments :
      ISYES - (logical,update) should be set to the default value before the
                 call.  If the answer is intelligible, the value will be set
                 true if the first character of the response is Y, false if
                 the first character is N.  All other responses, including <CR>
                 will leave the value unchanged.
      ERROR - (logical,output) will be false if the user answered Yes, No, or
                 <CR>; will be set true otherwise.

Notes : Only the first non-blank character of the answer is tested; e.g., YEP
is considered a YES answer.
