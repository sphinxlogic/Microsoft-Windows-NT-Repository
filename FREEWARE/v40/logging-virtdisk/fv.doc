FVdriver and FVhst

These comprise together a system for continuous backups of
user data to a file. The fvdriver is a driver which uses a contiguous
file on disk as storage for a fast virtual disk. Writes to this
device are buffered and when the buffer fills, fvhst is called
also to get the data and complete the I/O. FVhst is a normal process
(with privs) which calls the logdata routine, using a normal CALLG,
to actually emit the data. The sample logdata routines here
are examples. Real ones should perhaps be more sophisticated.
  The log files are tuples containing

64 bit time (vms internal form)
Logical block number (32 bits)
Buffer length (32 bits)
data (length bytes long)

packed in records with a 4 or 5 word header which may be
ignored on replay.

One uses a command like
$set command fvhst

and then something like

fvhst/assign fva0: dev:contiguous_container_file.typ otherdev:logfile.type

to assign the fv: unit. The "otherdev:logfile.type" string is passed
to logdata so it can use it as a filename, though this is not
mandatory.

There is logic in the host and driver to support extracting the
last bit of the data from the driver when exit is forced.

This is release 1 version; basic functions are OK, and it can be
demoed. More work needs to be done polishing details, but this
establishes a base to work from.
Glenn Everhart
