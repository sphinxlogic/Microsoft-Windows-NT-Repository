Funix_kill :unix_kill:I:0Prototype: Integer unix_kill(Integer pid, Integer sig);
Funix_ctime :unix_ctime:S:1Prototype: String unix_ctime(Integer secs);Returns a string representation of the time as given by 'secs' secondssince 1970. 
Flstat_file :unix_lstat_file:I:1Prototype: Integer lstat_file(String file);This function is like 'stat_file' but it returns information about the link itself. See 'stat_file' for usage.See also: stat_file 
Fstat_file :unix_stat_file:I:1Prototype: Integer stat_file(String file);This function returns information about 'file' through the use of the system 'stat' call.  If the stat call fails, the function returns a negative integer.  If it is successful, it returns zero.  Upon failure it returns a negative number.To retrieve information obtained by this call, use the 'stat_struct'function.See also: lstat_file, stat_struct 
Fstat_struct :unix_stat_struct:I:1Prototype Integer stat_struct(String field);This functions returns information previously obtained by a call to the'stat_file' or 'lstat_file' functions.  The 'field' argument specifieswhat piece of information to return.   Valid values for 'field' are:    "dev"    "ino"    "mode"    "nlink"    "uid"    "gid"    "rdev"    "size"    "atime"    "mtime"    "ctime"    See the man page for 'stat' for a discussion of these fields.The following example returns the size of the file "jed.rc":   variable size;   if (stat_file("jed.rc") < 0) error ("Unable to stat file!");   size = stat_struct("size");   
Fchown :unix_chown:I:3Prototype Integer chown(String file, Integer uid, Integer gid);Change ownership of 'file' to that of user id 'uid' and group id 'gid'.This function returns 0 upon success and a negative number up failure.It returns -1 if the process does not have sufficent privileges and -2if the file does not exist. See also: chmod, stat_file 
Fchmod :unix_chmod:I:2Prototype Integer chmod(String file, Integer mode);'chmod' changes the permissions of 'file' to those specified by 'mode'.It returns 0 upon success, -1 if the process lacks sufficient privilegefor the operation, or -2 if the file does not exist.See also: chown, stat_file
Fpolynom :math_poly:F:0 Usage:  a b .. c n x polynom  =y This computes:  ax^n + bx^(n - 1) + ... c = y  
Fsin :math_sin:F:0
Fcos :math_cos:F:0
Ftan :math_tan:F:0
Fatan :math_atan:F:0
Facos :math_acos:F:0
Fasin :math_asin:F:0
Fexp :math_exp:F:0
Flog :math_log:F:0
Fsqrt :math_sqrt:F:0
Flog10 :math_log10:F:0
Fpow :math_pow:F:0
VE 
VPI 
Ffloat :slmath_do_float:F:0 Convert from integer or string representation to floating point.   For example, "12.34" float returns 12.34 to stack. as another example, consider: 1 2 /   ==>  0  since 1 and 2 are integers 1 2 float / ==> 0.5 since float converts 2 to 2.0 and floating point  division is used. 
Fautoload :SLang_autoload:V:2Prototype: Void autoload(String fun, String file);This function simply declares function 'fun' to the interpreter.  When'fun' is actually called, its actual function definition will be loadedfrom 'file'.Example:  autoload ("bessel_j0", "/usr/lib/slang/bessel.sl");See Also: evalfile 
Fpop :SLdo_pop:V:0 Prototype: Void pop ();'pop' is used to remove the top object from the S-Lang stack.  It is typically used to ignore values from function that return a value. 
Fstrcmp :SLdo_strcmp:V:0 Prototype: Integer strcmp (String a, String b);'strcmp' performs a case sensitive comparison between two strings.  Itreturns 0 if the strings are identical, a negative number if 'a' is less than 'b' and a positive result if 'a' is greater than 'b' (in alexicographic sense).See also: strup, strlow 
Fstrcat :SLdo_strcat:V:0 Prototype: String strcat(String a, String b);Conconcatenates 'a' and 'b' and returns the result.See also: Sprintf 
Fstrlen :SLdo_strlen:V:0 Prototype: Integer strlen (String a);Returns the length of 'a'.
Fis_defined :SLang_is_defined:I:1 Prototype: Integer is_defined (String obj);This function is used to determine whether or not 'obj' has been defined.If 'obj' is not defined, it returns 0.  Otherwise, it returns a non-zerovalue that defpends on the type of object 'obj' represents.  Specifically:         +1 if arg is an intrinsic function          +2 if user defined function         -1 if intrinsic variable         -2 if user defined variable 
Fstring :SLdo_string:V:0 Prototype: String string (obj);Here 'obj' can be of any type.  The function 'string' will return a stringrepresentation of 'obj'.Example: string (12.34) returns "12.34"See also: Sprintf
Fgetenv :lang_getenv_cmd:V:1 Prototype: String getenv(String var);Returns value of an environment variable 'var' as a string.  The empty"" is returned if the 'var' is not defined. See also: putenv 
Fputenv :lang_putenv_cmd:V:0Prototype: Void putenv(String s);This functions adds string 's' to the environment.  Typically, 's' shouldbe a String of the form "name=value".  It signals an error upon failure.
Fevalfile :SLang_load_file:I:1 Prototype: Integer evalfile (String file);Load 'file' as S-Lang code.  If loading is successful, a non-zero result will be returned.  If the file is not found, zero will be returned.See also: eval, autoload 
Fchar :SLdo_char:V:0 Prototype: String char (Integer c);This function takes and integer and returns a string of length 1 whose first character has ascii value 'c'.
Feval :SLang_load_string:V:1 evaluate STRING as an S-Lang expression. 
Fdup :SLdo_dup:V:0 duplicate top object on the stack. 
Fsubstr :SLdo_substr:V:0 Syntax: "string" n len substr  returns a substring with length len of string beginning at position n.
Finteger :SLdo_integer:V:0 Convert from a string representation to integer.  For example, "1234" integer returns 1234 to stack. 
Fis_substr :SLdo_issubstr:V:0 Syntax: "a" "b" is_substr returns the position of "b" in "a".  If "b" does not occur in "a" it returns 0--- the first position is 1 
Fstrsub :SLdo_strsub:V:0 Syntax:  "string"  n ascii_value strsubThis forces string to have a char who asciii value is ascii_val atthe nth position.  The first character in the string is at position1. 
Fextract_element :SLang_extract_list_element:S:3 Prototype: String extract_element (String list, Integer nth, Integer delim);Returns 'nth' element in 'list' where 'delim' separates elements of the list. 'delim' is an Ascii value.  Elements are numbered from 0.For example:  extract_element ("element 0, element 1, element 2", 1, ',');returns the string " element 1", whereas   extract_element ("element 0, element 1, element 2", 2, ' ');returns "0,".See also: is_list_element.
Fis_list_element :SLang_is_list_element:I:3 Prototype: Integer is_list_element (String list, String elem, Integer delim);If 'elem' is an element of 'list' where 'list' is a 'delim' seperated list of strings, this function returns 1 plus the matching element number.  If 'elem' is not a member of the list, zero is returned.Example:  is_list_element ("element 0, element 1, element 2", "0,", ' ');returns 2 since "0," is element number one of the list (numbered fromzero).See also: extract_element.
Fcase :generic_equals:I:0Prototype: Integer case(a, b);This function is designed to make the switch statement look more likethe C one.  Basically, it does a generic compare operation.  Both parameters 'a' and 'b' must be of the same type.  It returns zeroif their types differ or have different values.In a switch statment, it may be used as:  switch (token)  { case "return": return_function ();}  { case "break": break_function ();}Unlike the C version, it one cannot have:  switch (i)  {case 10: case 20: do_ten_or_twenty (i);}One must do:  switch (i)  {case 10 or case (i, 20) : do_ten_or_twenty (i);}
Fstring_match :string_match:I:3Prototype Integer string_match(String str, String pat, Integer pos);Returns 0 if 'str' does not match regular expression specified by'pat'. This function performs the match starting at position 'pos' in'str'.  The first character of 'str' corresponds to 'pos' equal to one.This function returns the position of the start of the match.  To findthe exact substring actually matched, use 'string_match_nth'. See also: string_match_nth, strcmp, strncmp
Fstring_match_nth :string_match_nth:I:1Prototype: Integer Integer string_match_nth(Integer nth);This function returns 2 integers describing the result of the lastcall to 'string_match'.  It returns both the offset into the string and the length of characters matches by the 'nth' submatch.  By convention, 'nth' equal to zero means the entire match.  Otherwise,'nth' must be an integer, 1 to 9, and refers to the set of charactersmatched by the 'nth' regular expression given by \(...\).For example, consider:   variable matched, pos, len;   matched = string_match("hello world", "\\([a-z]+\\) \\([a-z]+\\)", 1);   if (matched) {       (pos, len) = string_match_nth(2);   }This will set 'matched' to 1 since a match will be found at the firstposition, 'pos' to 7 since 'w' is the 7th character of the string, andlen to 5 since "world" is 5 characters long. 
V_traceback  If non-zero, dump S-Lang tracback on error. 
V_slangtrace Prototype: Integer _slangtrace;If non-zero, begin tracing when function declared by lang_trace_function is entered.  This does not trace intrinsic functions.
Fsystem :my_system:I:1
Fslapropos :lang_apropos:V:1
Fslang_trace_function :SLang_trace_fun:V:1 only argument is a string that specifies a function name that is  to be traced. See also the variable _slangtrace. 
Fcreate_array :SLang_create_array:V:0 Prototype: create_array (Integer type, Integer i_1, i_2 ... i_dim, dim);Creates an array of type 'type' with dimension 'dim'.i_n is an integer which specifies the maximum size of array in direction n.   'type' is a control integer which specifies the type of the array. Types are:  's' : array of strings             'f' : array of floats             'i' : array of integers             'c' : array of charactersAt this point, dim cannot be larger than 3.Also note that space is dynamically allocated for the array and thatcopies of the array are NEVER put on the stack.  Rather, references tothe array are put on the stack.  When the array is no longer needed, itmust be freed with 'free_array'Example:   variable a = create_array ('f', 10, 1);This creates a 1 dimensional array of 10 floats and assigns it to 'a'See also: free_array
Ffree_array :SLfree_array:V:0 Prototype: Void free_array (Array a);Frees up the space which array occupies.  All reference to this spacewill now be meaningless and will generate an error.
Faget :SLarray_getelem:V:0 Syntax: i j ... k  ARRAY aget returns ARRAY[i][j]...[k] 
Faput :SLarray_putelem:V:0 Syntax: x i j ... k  ARRAY put sets ARRAY[i][j]...[k] = x 
Fstrncmp :SLdo_strncmp:V:0 like strcmp but takes an extra argument--- number of characters tocompare.  Example, "apple"  "appliance"  3 strcmp --> 0 
Fstrlow :SLdo_strlow:V:0 Takes a string off the stack a replaces it with all characters in lowercase. 
Fstrup :SLdo_strup:V:0 Takes a string off the stack a replaces it with all characters in uppercase. 
Fisdigit :SLdo_isdigit:I:1 returns TRUE if CHAR (string of length 1) is a digit. 
Fstrtrim :SLdo_strtrim:V:0 Trims leading and trailing whitespace from a string.  WHitespace is defined to be spaces, tabs, and newline chars. 
Fint :SLdo_int:V:0 returns ascii value of the first character of a string. 
Farray_sort :SLarray_sort:V:1 Requires an array on the stack as well as a function name to call for the comparison.  The array to be placed on the stack is thearray to be sorted.  The routine returns an integer index array which indicates the result of the sort.  The first array is unchanged. 
F_stkdepth :SLstack_depth:I:0 returns number of items on stack 
Fprint_stack :lang_print_stack:V:0 dumps tha S-Lang stack 
FSprintf :SLsprintf:V:0Prototype:  String Sprintf(String format, ..., Integer n); Sprintf formats a string from 'n' objects according to 'format'.   Unlike its C counterpart, Sprintf requires the number of items to format.  For example.       Sprintf("%f is greater than %f but %s is better than %s\n",               PI, E, "Cake" "Pie", 4);                The final argument to Sprintf is the number of items to format; in this case, there are 4 items.
Finit_char_array :SLinit_char_array:V:0Prototype: Void init_char_array(Array_Type a, String s);a is an array of type 'c' (character array) and s is a string.
Fbyte_compile_file :SLang_byte_compile_file:V:2Prototype Void byte_compile_file (String file, Integer method);byte compiles 'file' producing a new file with the same name except a 'c' is added to the output file name.  For example,       byte_compile_file("site.sl");produces a new file named 'site.slc'.  If 'method' is non-zero, the file is preprocessed only.  Note that the resulting bytecompiled filemust only be used by the executable that produced it.  Set 'method' to a non-zero value to use the byte compiled file with more than one executable.
Fmake_printable_string :make_printable_string:V:1Prototype: String make_printable_string(String str);Takes input string 'str' and creates a new string that may be used by theinterpreter as an argument to the 'eval' function.  The resulting string isidentical to 'str' except that it is enclosed in double quotes and thebackslash, newline, and double quote characters are expanded. See also: eval
Fstr_quote_string :SLquote_string:V:0Prototype: String str_quote_string(String str, String qlis, Integer quote);Return a string identical to 'str' except that all characters in the string 'qlis' are escaped with the 'quote' character including the quotecharacter itself.
Fstr_uncomment_string :uncomment_string:V:3Prototype: String str_uncomment_string(String s, String beg, String end);'beg' and 'end' are strings whose characters define a set of comment delimeters.  This function removes comments defined by the delimeter setfrom the input string 's' and returns it.  For example,   str_uncommen_string ("Hello (testing) 'example' World", "'(", "')");returns the string: "Hello  World"; This routine does not handle multicharacter comment delimeters and itassumes that comments are not nested.
Fdefine_case :SLang_define_case:V:2 Two parameters are integers in the range 0 to 255.  The first integer is the ascii value of the upprcase character and the 2nd integer is the value of its lowercase counterpart.  For example, to define X as the uppercase of Y, do:   X Y define_case 
F_clear_error :SLang_clear_error:V:0 May be used in error blocks to clear the error that triggered the error block.  Execution resumes following the statement triggering the block. 
V_slang_version 
Fset_float_format :set_float_format:V:1Prototype: Void set_float_format (String fmt);This function is used to set the floating point format to be usedwhen floating point numbers are printed.  The routines that use thisare the traceback routines and the 'string' function. The defaultvalue is "%f".
Fcopy_array :SLcopy_array:V:0Prototype: Void copy_array(Array b, Array a);Copies the contents of array 'a' to array 'b'.  Both arrays must be ofthe same type and dimension.
Fx_set_window_name :set_window_name:V:1
Fx_warp_pointer :x_warp_pointer:V:0
Fx_insert_cutbuffer :x_insert_cutbuffer:I:0Prototype: Integer x_insert_cut_buffer ();Inserts cutbuffer into the current buffer and returns the numberof characters inserted.
Fx_copy_region_to_cutbuffer :x_region_2_cutbuffer:V:0Prototype: Void x_copy_region_to_cutbuffer();
Fx_set_keysym :x_set_keysym:V:3Prototype Void x_set_keysym (Integer keysym, Integer shift, String str);This function may be used to assocate a string 'str' with a key 'keysym'modified by mask 'shift'. Pressing the key associated with 'keysym' willthen generate the keysequence given by 'str'. The function keys aremapped to integers in the range 0xFF00 to 0xFFFF.  On most systems, thekeys that these mappings refer to are located in the file/usr/include/X11/keysymdef.h. For example, on my system, the keysyms forthe function keys XK_F1 to XK_F35 fall in the range 0xFFBE to 0xFFE0.So to make the 'F1' key correspond to the string given by the twocharacters Ctrl-X Ctrl-C, simply use:      x_set_keysym (0xFFBE, 0, "^X^C");      The 'shift' argument is an integer with the following meanings:     0   : unmodified key    '$'  : shifted    '^'  : control    Any other value for shift will default to 0 (unshifted).      
VALT_CHAR Prototype: Void x_copy_region_to_cutbuffer();
Fsetkey :set_key:V:2Prototype: Void setkey(String fun, String key);'fun' is the function that 'key' is to be assigned.  'key' can containthe '^' character which denotes that the following character is to beinterpreted as a control character, e.g.,     setkey("bob", "^Kt");     sets the key sequence 'Ctrl-K t' to the function 'bob' which moves the editing point to the beginning of the buffer.  Note that 'setkey' works on the "global" keymap.See also: unsetkey, definekey. 
Fpush_mark :push_mark:V:0Prototype: Void push_mark();This function marks the current Point as the beginning of a region.  Other functions operate on the region defined by the Point and the Mark. See also: pop_mark, push_spot, markp, dupmark, check_region 
Fbol :bol:V:0Prototype: Void bol();Moves Point to the beginning of the current line.See also: eol, bob, eob, bolp 
Fsetmode :set_mode_cmd:V:2Prototype:  Void setmode(String mode, Integer flags);Sets buffer mode flags and status line mode name.  'mode' is a string which is displayed on the status line if the %m status line format specifier is used. The second argument, 'flags' is an integer with the possible values:    0 : no mode. Very generic    1 : Wrap mode.  Lines are automatically wrapped at wrap column.    2 : C mode.    4 : Language mode.  Mode does not wrap but is useful for computer         languages.    8 : S-Lang mode  0x10: Fortran mode highlighting  0x20: TeX mode highlightingSee also: whatmode, getbuf_info, setbuf_info.  
Finsert :insert_string:V:1Prototype: Void insert(String str);Inserts string 'str' in buffer at the current Point.See also: del, insert_file, insbuf 
Feol :eol:V:0Prototype Void eol();Moves Point to the end of the current line. See also: eolp, bol, bob, eob 
Fsetbuf :set_buffer:V:1Prototype: Void setbuf(String buf);Changes the default buffer to one named 'buf' for editing.  This changeonly lasts until top level of editor loop is reached at which point thethe buffer associated with current window will be made the default.See also: sw2buf, pop2buf, whatbuf 
Fmessage :message:V:1Prototype: Void message(String msg);Displays the string 'msg' in the MiniBuffer at the bottom of the display.This does not immediately display the message.  In particular, subsequentcalls to 'message' will overwrite the values of previous calls.  The message is displayed when the screen is updated next.  For an immediateeffect, use the function 'flush' instead.See also: flush, error, update 
Fdel_region :delete_region:V:0Prototype: Void del_region();Deletes the region specified by the Point and Mark.See also: push_mark, markp, check_region 
Fbufsubstr :buffer_substring:V:0Prototype: String bufsubstr();This function returns the region specified by the Point and Mark as a String.  If the region crosses lines, the string will containnewline characters.See also: insbuf, push_mark 
Fright :forwchars:I:1Prototype: Integer right(Integer n);This function moves the Point forward forward 'n' characters and returnsthe number actually moved.  The number returned will be smaller than 'n'if the end of the buffer is reached.See also: left, up, down, eol, eob 
Fdefinekey :set_key_in_keymap:V:3Prototype: Void definekey(String f, String key, String kmap);This function is used for binding keys to functions in a specific keymap.Here 'f' is the function to be bound, 'key' is a sequence of keys and 'kmap' is the name of the keymap to be used.  See 'setkey' for a definition of 'keys'.  See also: setkey, undefinekey, make_keymap, use_keymap 
VLAST_SEARCH A readonly string variable containing the value of the last interactively search for string.See also: save_search_string. 
VUSE_ANSI_COLORS 
VStatus_Line_String A read-only String variable containing the format of the status lineapplied to newly created buffers.See also: set_status_line 
Fsave_search_string :save_search_string:V:1Prototype: Void save_search_string(String str);Sets the value of the read-only variable 'LAST_SEARCH' to 'str'. See also: LAST_SEARCH 
VMINIBUFFER_ACTIVE A read-only variable that is non-zero when the MiniBuffer is activelybeing used. 
Fleft :backwchars:I:1Prototype: Integer left(Integer n);Move Point backward 'n' characters returning number actually moved.  The number returned will be less than 'n' only if the top of the buffer is reached. See Also: right, up, down, bol, bob 
Fwhatbuf :what_buffer:S:0Prototype: String what_buffer();Returns the name of the current buffer.See also: getbuf_info, bufferp 
Ferror :msg_error:V:1Prototype: Void error(String msg);Signals an error condition and displays the string 'msg' at the bottom ofthe display.  The error can be caught by an ERROR_BLOCK and cleared withthe '_clear_error' function.  Unless caught, the error will cause the S-Lang stack to unwind to the top level.See also: _clear_error, message, flush 
Fgetbuf_info :get_buffer_info:V:0Prototype:  getbuf_info();This function returns 4 values to the stack.  The four value from the top are: Integer'flags'        % buffer flags String 'buffer_name'  % name of buffer String 'directory'    % directory associated with buffer String 'file'         % name of file associated with buffer (if any).The flags are encoded as:   bit 0: buffer modified  bit 1: auto save mode  bit 2: file on disk modified  bit 3: read only bit  bit 4: overwrite mode  bit 5: undo enabled  bit 6: reserved  bit 7: just save instead of autosaving.  If bit 1 is set,          this is ignored.For example,   (file,,,) = getbuf_info();returns the file associated with the buffer.See also: setbuf_info, whatbuf 
Fotherwindow :other_window:V:0Prototype: Void otherwindow();Switch to next window. See also: nwindows, onewindow 
Fis_internal :is_internal:I:1Prototype Integer is_internal(String f);Returns non-zero is function 'f' is defined as an internal function orreturns zero if not.  Internal functions not immediately accessable fromS-Lang; rather, they must be called using the 'call' function.See also: call, is_defined.
Fsetbuf_info :set_buffer_info:V:4Prototype: Void setbuf_info(String file, String dir, String buf, Integer flags);Sets information of the current buffer.  Here 'file' is the name of the file to be associated with the buffer; 'dir' is the directory to be associated with the buffer; buf is the name to be assigned to the buffer,and flags describe the buffer attributes.  See 'getbuf_info' for a discussion of 'flags'.  Note that the actual file associated with thebuffer is located in directory 'dir' with the name 'file'.See also: getbuf_info 
Fup :prevline:I:1Prototype: Integer up(Integer n);Move Point up 'n' lines returning number of lines actually moved.  The number returned will be less than 'n' only if the top of the buffer isreached.See also: down, left, right 
Fdown :nextline:I:1Prototype: Integer down(Integer n);Move Point down 'n' lines returning number of lines actually moved.  The number returned will be less than 'n' only if the last line of the bufferhas been reached.See also: down, left, right 
Fcall :call_cmd:V:1Prototype: Void call(String f);Execute internal function named 'f'.  An internal function is a functionthat cannot be directly accessed from S-Lang.See: is_internal. 
Feob :eob:V:0Prototype: Void eob();Move Point to the end of the buffer.See also: eobp, bob, bol, eol 
Funsetkey :unset_key:V:1Prototype: Void unsetkey(String key);Removes the defeinition of 'key' from the "global" keymap.  For example,by default, the "global" keymap binds the keys "^[[A", "^[[B", "^[[C", and "^[[D" to the character movement functions.  Using 'unsetkey("^[[A")' will remove the binding of "^[[A" from the global keymap but the other three will remain.  However, 'unsetkey("^[[")' will remove the definition of all the above keys.See also:  setkey, undefinekey 
Fbob :bob:V:0Prototype: Void eob();Move Point to the beginning of the buffer.See also: bobp, eob, bol, eol 
Flooking_at :looking_at:I:1Prototype: Integer looking_at(String s);Returns non-zero if Point is positioned in he buffer such that the characters immediately following it match 's' otherwise it returns 0.See also: ffind, fsearch, re_fsearch, bfind 
Fdel :del:V:0Prototype: Void del();Delete character at point unless at the end of the buffer in which casenothing happens.See also: what_char, eobp, del_region 
Fmarkp :markp:I:0Prototype: Void markp();Returns a non-zero value if a mark is set in the buffer otherwise itreturns zero.  A mark usually denotes a region is defined.See also: psh_mark, pop_mark, check_region, push_spot 
Fnwindows :num_windows:I:0Prototype Integer nwindows();Return number of windows currently visible.See also: splitwindow, onewindow, window_size 
Fadd_completion :add_to_completion:V:1Prototype Void add_completion(String f);Add S-Lang function with name 'f' to the list of function completions.See also: read_with_completion 
Fwhat_column :calculate_column:I:0Prototype: Integer what_column();Returns the current column number of the Point expanding tabs, etc...The beginning of the line is at column 1.See: whatline, whatpos, goto_column 
Feobp :eobp:I:0Prototype: Integer eobp();Returns non-zero if the Point is positions at the beginning of the buffer otherwise it returns zero.See also: eob, bolp, eolp 
Ffsearch :search_forward:I:1Prototype: Integer fsearch(String str); Search forward in buffer looking for string 'str'.  If not found, thisfunctions returns zero.  However, if found, it returns non-zero and moves the Point to the start of the match.  It respects the settingof the variable 'CASE_SEARCH'.See also: ffind, bsearch, bfind, re_fsearch, CASE_SEARCH 
Fbuffer_visible :jed_buffer_visible:I:1Prototype: Integer buffer_visible(String buffer);Returns non-zero if 'buffer' is currently visible in a window orit returns zero if not. 
Fexit_jed :exit_jed:V:0Prototype: Void exit_jed();Exits JED.  If any buffers are modified, the user is queried about whether or not to save first.  Calls S-Lang hook "exit_hook"if defined.  If "exit_hook" is defined, it must either call 'quit_jed'or 'exit_jed' to really exit the editor.  If 'exit_jed' is called from'exit_hook', 'exit_hook' will not be called again. 
Fset_color :set_term_colors:V:3Prototype: Void set_color(String object, String fg, String bg);This function sets the foreground and background colors of an 'object'to 'fg' and 'bg'.  The exact values of the strings 'fg' and 'bg' are system dependent.  Valid object names are:   "status", "normal", "region", and "cursor".In addition, if color syntax highlighting is enabled, the following objectnames are also meaningful:  "number", "delimeter", "keyword", "string", "comment", "operator",  "preprocess"See also: WANT_SYNTAX_HIGHLIGHT
Fset_color_esc :set_term_color_esc:V:2Prototype: Void set_color_esc (String object, String esc_seq);This function may be used to associate an escape sequence with an object.  The escape sequence will be set to the terminal prior to sending the object.  It may be used on mono terminals to underline objects, etc...See 'set_color' for a list of valid object names.
Fextract_filename :extract_file:S:1Prototype: String extract_filename (String filespec);Separates the filename from the path of 'filespec'. Example: (unix)   var = extract_filename ("/tmp/name");assigns a value of "name" to 'var'
Ftrim :trim_whitespace:V:0Prototype: Void trim(); Removes all whitespace around point.See also: skip_chars, skip_white
Fpop2buf :pop_to_buffer:V:1Prototype: Void pop2buf (String buf);Pop up a window containing a buffer named 'buf'. If 'buf' does not exist,it will be created. If 'buf' already exists in a window, the window containing'buf' will be the active one.  This function will create a new windowif necessary.See also: pop2buf_whatbuf, setbuf, sw2buf 
Fpop2buf_whatbuf :pop_to_buffer:S:1Prototype: String pop2buf_whatbuf (String buf);This function performs the same function as 'pop2buf' except that the name of the buffer that 'buf' replaced in the window is returned.  This allows one to replace the buffer in the window with the one previouslythere. See also: pop2buf 
VDISPLAY_EIGHT_BIT  if non zero, pass chars with hi bit set to terminal as is, otherwise prefix with a `~' and pass char with hi bit off. 
VJED_CSI  Control Sequence Introducer. --- reserved for future use 
Fcopy_region :copy_region_cmd:V:1Prototype: Void copy_region (String buf);Copies a marked region in the current buffer to buffer 'buf'.See also: insbuf, bufsubstr 
Finsbuf :insert_buffer_name:V:1Prototype: Void insbuf (String buf);Insert buffer named 'buf' into the current buffer at Point.See also: copy_region 
Fbolp :bolp:I:0Prototype: Integer bolp ();'bolp' is used to test if the Point is at the beginning of a line.  It returns non-zero if at the beginning of a line and 0 if not.See also: bol, eolp, bobp, eobp 
Fbeep :beep:V:0 Send beep to screen. 
Fonewindow :one_window:V:0 make current window the only one. 
Fpop_spot :pop_spot:V:0Prototype: Void pop_spot ();This function is used after 'push_spot' to return to the location where'push_spot' was called.See also: push_spot, pop_mark 
Fpush_spot :push_spot:V:0Prototype: Void push_spot ();'push_spot' pushes the location of the current buffer location onto a stack.  This function does not set the mark.  Use push_mark for that purpose.The spot can be returned to using 'pop_spot'.See also: pop_spot, push_mark 
Fbsearch :search_backward:I:1Prototype: Integer bsearch (String str);Searches backward from the current Point for 'str'.  If 'str' is found, this function will return non-zero and the Point will be placed at thelocation of the match.  If a match is not found, zero will be returned andthe Point will not change.See also: fsearch, bol_bsearch, re_bsearch 
Fsw2buf :switch_to_buffer_cmd:V:1 Switch to BUFFER.  If BUFFER does not exist, one is created with name  BUFFER 
Ftt_send :do_tt_write_string:V:1 send STRING to terminal with no interpretation 
Feolp :eolp:I:0 Returns TRUE if Point is at the end of a line. 
Fwhat_keymap :what_keymap:S:0 returns keymap name of current buffer 
Ffind_file :find_file_in_window:I:1 finds FILE in current window returning non zero if file found.  See Also: read_file 
Fset_status_line :set_status_format:V:2  Usage:  set_status_line(String format, Integer flag);  If flag is non-zero, format applies to the global format string   otherwise it applies to current buffer only.    Format is a string that may contain the following format specifiers:    %b   buffer name    %f   file name    %v   JED version    %t   current time --- only used if variable DISPLAY_TIME is non-zero    %p   line number or percent string    %%   literal '%' character    %m   mode string    
Fbury_buffer :bury_buffer:V:1Prototype: Void bury_buffer(String name);Make buffer 'name' unlikley to appear in a window.  
Fdupmark :dup_mark:I:0Prototype Integer dupmark ();This function returns zero if the mark is not set or, if the mark is set,a duplicate of it is pushed and 1 is returned. 
Ferase_buffer :erase_buffer:V:0 erases all text from the current buffer.See: delbuf 
Fwindow_info :window_size_intrinsic:I:1Prototype Integer window_info(Integer item);Returns information specified by 'item' about the current window.  Here'item' is one of:    'r'  : Number of rows    'w'  : width of window     'c'  : starting column (from 1)    't'  : screen line of top line of window (from 1)
Vwhatline  returns current line number -- used to be a function. 
VBLINK 
VWRAP_INDENTS  If non-zero, after wrap, line is indented as previous line. 
Fgoto_column :goto_column:V:1 Move Point to COLUMN inserting spaces and tabs if necessary. 
Fgoto_column_best_try :goto_column1:I:1Prototype: Integer goto_column_best_try (Integer c);This function is like goto_column except that it will not insertspaces.  It returns the column number is did go to. 
VTAB_DEFAULT  default tab setting applied to all newly created buffers. See TAB. 
Fgoto_line :goto_line:V:1 move Point to LINE. 
Ffile_status :file_status:I:1 returns integer desecribing FILE:     2 file is a directory     1 file exists     0 file does not exist.    -1 no access.    -2 path invalid    -3 unknown error
VC_INDENT 
Fflush :flush_message:V:1 Takes 1 string argument and immediately displays it as a message  in the minibuffer.  It is exactly like the `message' function except that its effect is immediate. See: message, update 
VIGNORE_BEEP  If 0, do not beep the terminal.  If 1 beep.  If 2 use visible bellonly.  If 3 use both bells.
VADD_NEWLINE 
VLASTKEY  buffer containing last keysequence.  Key sequences using the null character will not be recorded accurately. 
VC_BRA_NEWLINE  if non-zero, insert newline before inserting '{' in C mode 
VDISPLAY_TIME  A non-zero value means to enable display of time whenever %t occurs in the status line format. 
VWANT_EOB  Set this to non zero value if it is desired to have [EOB] mark  the end of the buffer. 
Finput_pending :input_pending:I:1 Only argument is amount of seconds/10 to wait for input.  0 returns right away.  Returns TRUE if there is input waiting. 
Finsert_file :insert_file:I:1 This returns <= 0 if file not found. 
Fkeymap_p :keymap_p:I:1 Returns TRUE if KEYMAP is defined. 
VWRAP 
Fwhat_char :what_char:I:0 returns ASCII value of character point is on. 
Fbfind :backward_search_line:I:1 returns TRUE if STRING found backward on current line 
Fpop_mark :pop_mark:V:1 Pop last pushed mark off the mark stack. If argument is non zero,   move point to position of mark first. 
Fread_mini :mini_read:V:3 read from minibuffer with PROMPT and DEFAULT strings using STRING to stuff the minibuffer.  Returns string to stack. 
Frecenter :recenter:V:1 update window with current line on Nth line of window.   If N is 0, recenter 
Fbufferp :bufferp:I:1 returns  TRUE if BUFFER exists 
Fget_key_function :get_key_function:V:0 Returns current key binding.  If key has a binding, it also  returns 0 if the function is S-Lang or non zero if it is internal. 
Fdump_bindings :dump_bindings:V:1Prototype: Void dump_bindings(String map);Dumps a list of the keybindings for the keymap specified by 'map'.
VMETA_CHAR  When a character with the hi bit set is input, it gets mapped to a two character sequence, The META_CHAR, followed by the character with its hi bit off.  By default, META_CHAR is 27, the escape character. 
VDEC_8BIT_HACK  If set, an character between 128 and 160 will be converted into a  two character sequence: ESC and the character itself stripped of the high bit + 64.
Fundefinekey :unset_key_in_keymap:V:2 Undefines KEY from KEYMAP.See: make_keymap. 
Fgetpid :jed_getpid:I:0Prototype: Integer getpid();Returns pid of current process. 
Fupdate :update_cmd:V:1 Update display.  If argument it TRUE, force update otherwise  update only if there is no input 
Fskip_white :skip_whitespace:V:0 Skip past whitespace.  This does not cross lines.  See: skip_chars 
Fskip_word_chars :skip_word_chars:V:0 skip over all characters that constitute a word. 
Fskip_non_word_chars :skip_non_word_chars:V:0 skip over all characters that do not constitute a word. 
Fbskip_word_chars :bskip_word_chars:V:0 skip backwards over all characters that constitute a word. 
Fbskip_non_word_chars :bskip_non_word_chars:V:0 skip backwards over all characters that do not constitute a word. 
Fwhich_key :which_key:I:1 returns NUMBER of keys that are bound to argument followed  by NUMBER keys.  Control Chars are expanded as 2 chars. 
Fwhitespace :insert_whitespace:V:1 inserts whitespace of length n using tabs and spaces.  If the globalvariable  TAB is 0, only spaces are used. 
VC_BRACE 
Fenlargewin :enlarge_window:V:0 Makes the current window bigger by one line. 
Fsplitwindow :split_window:V:0 Splits current window in half making two. 
Ffile_time_compare :file_time_cmp:I:2 compares the modification times of two files, FILE1 and FILE2. returns positive, negative, or zero integer for FILE1 > FILE2, FILE1 < FILE2, or FILE1 == FILE2, resp.  The operator '>' should be read 'is more recent than'.   The convention adopted by the routine is that if a file does not exist, it was modified at the beginning of time. Thus, if 'f' exists, but 'g' does not, f g file_time_compare will return 1. 
Fxform_region :transform_region:V:1 takes a control character (integer) as argument:    'u' upcase_region    'd' downcase_region    'c' Capitalize region    anything else will change case of region 
VNUMLOCK_IS_GOLD 
VCHEAP_VIDEO  non zero if snow appears on screen when updating it. 
VOUTPUT_RATE  Terminal baud rate 
Fskip_chars :skip_chars:V:1Prototype: Void skip_chars(String s);skip past all characters in string 's'.s is a string which contains ascii chars to skip, or a rang of ascii chars.  So for example, "- \t0-9ai-o_" will skip the hyphen, space, tabnumerals 0 to 9, letter a, letters i to o, and underscore.If the first character of 's' is '^', then the compliment of the range is skipped instead.  So for example,    skip_chars("^A-Za-z");skips ALL characters except the letters.  The backslash character may beused to escape ONLY the FIRST character in the string.  That is, "\\^"is to be used to skip over '^' characters.See Also: bskip_chars, skip_white 
Fbobp :bobp:I:0 TRUE if at beginning of buffer 
Fffind :forward_search_line:I:1 Returns TRUE if STRING is found forward current line. If found, Point  is moved to string 
Fbol_fsearch :bol_fsearch:I:1 Search forward for string at beginning of line. Returns TRUE if found 
Fbol_bsearch :bol_bsearch:I:1 Search backward string at beginning of line. Returns TRUE if found 
Fcommand_line_arg :command_line_argv:S:1 Takes integer parameter N in the range: 0 <= N < MAIN_ARGC.MAIN_ARGC is a global variable indicating the number of command line parameters.  This function returns the Nth parameter.See Also the variable MAIN_ARGC 
VMAIN_ARGC  MAIN_ARGC is a global variable indicating the number of command line  parameters.  See Also: command_line_arg 
Fset_file_translation :set_file_trans:V:1 1 open files in binary, 0 in text (default) 
Fpipe_region :pipe_region:I:1 pipes region to CMD returning number of lines written. 
Fshell_cmd :shell_command:V:1 executes CMD in a subshell inserting output inter buffer at Point 
Fmkdir :make_directory:I:1 create a directory with NAME.  Returns TRUE if successful, 0 otherwise. 
Frmdir :delete_directory:I:1 delete a directory with NAME.  Returns TRUE if successful, 0 otherwise.  The directory must be empty for the operation to succeed. 
Fappend_region_to_file :append_to_file:I:1 appends a region to FILE returning number of lines written or -1  on error.  This does NOT modify a buffer visiting the file; however,  it does flag the buffer as being changed on disk. 
Fautosave :auto_save:V:0 autosave current buffer if marked for autosave 
Fautosaveall :auto_save_all:V:0 save all buffers marked for autosave 
Fbackward_paragraph :backward_paragraph:V:0 move point past current paragraph.  Slang hook is_paragraph_seperatoris called (if defined) to determine if line is a paragraph seperator. 
Fblank_rect :blank_rectangle:V:0 blanks out rectangle defined by point and mark 
Fbskip_chars :bskip_chars:V:1 skip backward chars in STRING.   See skip_chars for definition of STRING 
Fbuffer_list :make_buffer_list:V:0 returns a  list of buffers to the stack.  The top element of the stack is the number of buffers 
Fcheck_region :check_region:V:1 Signals Error if mark not set.  Exchanges point and mark to produce valid region.  A valid region is one with markearlier in the buffer than point.  Always call this if using a regionwhich requires point > mark.  Also, if argument is non-zero, spot is pushed. 
Fcopy_rect :copy_rectangle:V:0 save a copy of rectangle defined by point and mark in rectangle buffer 
Fdefine_word :define_word:V:1 Only argument is a string which is an expression which defines  a word.  Typically, it is a range of ascii values.  The default  definition is: "a-z0-9" To include a hyphen, make it the first character.  So for example, "-i-n" defines a word to consist of letters 'i' to 'n'  and '-' 
Fdelbuf :kill_buffer_cmd:V:1 deletes specified buffer name 
Fdelete_file :sys_delete_file:I:1 Deletes FILENAME.  Returns 1 if deletion was successful, otherwiseit returns 0. 
Fdirectory :expand_wildcards:I:1 returns number of files and list of files which match filename.  On unix, this defaults to filename*.  It is primarily useful for DOS and VMS to expand wilcard filenames 
Fevalbuffer :load_buffer:V:0 evaluates a buffer as S-Lang code.  See: evalfile 
Fexpand_filename :expand_filename:S:1 expands filename to a canonical form 
Ffilechgondsk :file_changed_on_disk:I:1 Returns true if FILE on disk is more recent than editor file 
Fforward_paragraph :forward_paragraph:V:0 move point past current paragraph.  Slang hook is_paragraph_seperatoris called (if defined) to determine if line is a paragraph seperator. 
Fget_doc_string :get_doc_string:I:2 read doc string for OBJECT from FILE.  Returns 1 and string  upon success or 0 on failure.  If OBJECT is a functiion,   it must be prefixed with an 'F'.  If it is a variable, the prefix  character is a 'V'.    Example: "Fget_doc_string" 
Fgetkey :jed_getkey:I:0 Read a key from input stream returning ASCII value read. 
Findent_line :indent_line:V:0 Indent line according to current mode. 
Finsert_rect :insert_rectangle:V:0 insert contents of previously deleted rectangle at Point. 
Fkill_rect :kill_rectangle:V:0 deletes rectangle defined  by point and mark.  The contents of   the rectangle are saved in the rectangle buffer destroying previous  contents. 
Fmake_keymap :create_keymap:V:1 Creates a new keymap with name map.  The newly created keymap is an exact copy of the global map "global".See: use_keymap, definekey, undefinekey 
Fmap_input :map_character:V:2 Used to remap input characters from the keyboard to a different   character before JED interprets the character.  For example,'8 127 map_input' will cause JED to think that the ^H (8) is the  delete character (127).  Note that '8 127 map_input 127 8 map_input effectively swaps the ^H and delete keys. 
Fnarrow :narrow_to_region:V:0 restrict editing to region of LINES defined by point and mark.    Use 'widen' to remove the restriction. Be careful with this because  it currently does not remember a previous narrow. 
Fopen_rect :open_rectangle:V:0 insert a BLANK rectangle.  The rectangle  is defined by point and mark. 
Fquit_jed :quit_jed:V:0 Quit JED saving no buffers, just get out! 
Fread_file :find_file_cmd:I:1  read FILE into its own buffer  returning non zero if file exists.  see find_file to read a file into a window. 
Fread_with_completion :read_object_with_completion:V:4 Takes 4 parameters:  PROMPT(string) DEFAULT(string) STUFF(string)  and TYPE(integer). TYPE must be one of:    'f'   file name    'b'   buffer name    'F'   function name    'V'   variable name.    STUFF is a string which is stuffed into the buffer.Using this function enables completion on the object.
Freplace :replace_cmd:V:2Prototype Void replace(String old, String new);Replaces all occurances of 'old' with 'new' from current point tothe end of the buffer. The Point is returned to the initial location. 
Fset_abort_char :set_abort_char:V:1 Change Abort character to CHAR.  The default is 7 which is ^G. Using this function modifies ALL keymaps 
Fsuspend :sys_spawn_cmd:V:0 Suspend jed and return to calling process or spawn subprocess."suspend_hook" is called before suspension and "resume_hook" is calledafter.  These are user defined S-Lang functions. 
Ftime :get_time:S:0 return current date and time string 
Fungetkey :ungetkey:V:1 push ASCII value of character on input stream 
Fbuffer_keystring :do_buffer_keystring:V:1Prototype: Void buffer_keystring (String str);Append string 'str' to the end of the input stream to be read by JED'sgetkey routines.See also: ungetkey, getkey
Fuse_keymap :use_keymap:V:1 Asscoiate KEYMAP with buffer. 
Fw132 :screen_w132:V:0
Fw80 :screen_w80:V:0
Fwhatmode :what_mode:I:0 returns buffer mode string and mode flag.  See setmode for details. 
Fwiden :widen:V:0 Opposite of Narrow.  See narrow for additional information. 
Fwindow_line :window_line:I:0 returns number of line in window.  top line is 1. 
Fwrite_buffer :write_buffer_cmd:I:1 writes buffer to FILE. Returns number of lines written or signals  error on failure. 
Fwrite_region_to_file :write_region:I:1 write region to FILE.  Returns number of lines written or signals  error on failure. 
Fcount_chars :count_chars:V:0 returns a string of form "char 37, point 2150 of 10067" where 2150 is character number of Point and 10067 is the total. 37 is the ascii value of current character. A string is returned instead of numbers because MSDOSints are only  16 bits and S-Lang does not have long integer types. 
Fget_yes_no :get_yes_no:I:1 Takes one argument-- a string that is used to get  yes or no responce from user.  Returns 1 if yes, 0 if no.  Also returns -1 if abort and signals error. 
Frename_file :rename_file:I:2 rename file from OLD_NAME to NEW_NAME returning 0 if the  operation succeeds, and a non-zero value if it fails.  Both files must be on the same file system. 
Fchange_default_dir :ch_dir:I:1  Change default directory to new directory.  Returns 0 upon success and -1 upon failure.  All relative path names are expanded with respect to the new default directory. 
Fprefix_argument :do_prefix_argument:I:1 Usage:  int prefix_argument(int default);    Returns value of prefix argument if there is one otherwise    returns 'default'. 
Fregexp_nth_match :regexp_nth_match:V:1
Freplace_match :replace_match:I:2Prototype: Integer replace_match(String s, Integer how);This function replaces text previously matched with `re_fsearch' or`re_bsearch' at the current editing point with string 's'.  If 'how' iszero, 's' is a specially formatted string of the form described below.If 'how' is non-zero, 's' is regarded as a simple string and is usedliterally.  If the replacement fails, this function returns zerootherwise, it returns non-zero.
Fre_fsearch :re_search_forward:I:1Prototype: Integer re_fsearch(String pattern);Search forward for regular expression 'pattern'.  This function returnsthe 1 + length of the string  matched.  If no match is found, it returns 0.See also: fsearch, bol_fsearch, re_bsearch 
Fre_bsearch :re_search_backward:I:1Prototype: Integer re_bsearch(String pattern);Search backward for regular expression 'pattern'.  This function returnsthe 1 + length of the string  matched.  If no match is found, it returns 0.See also: bsearch, bol_bsearch, re_fsearch 
Fset_buffer_hook :set_buffer_hook:V:2Prototype: Void set_buffer_hook (String hook, String f);Set current buffer hook 'hook' to function 'f'. 'f' is a userdefined S-Lang function.  Currently, name can be any one of:  "par_sep"  -- returns zero if the current line does not                constitute the beginning or end of a paragraph.                  It returns non-zero otherwise.  The default value of 'hook' is                 'is_paragraph_separator'.  "indent_hook" -- returns nothing.  It is called by the indent line                routines.  "wrap_hook"   hook that is called after a line is wrapped.  Returns                nothing
Finsert_file_region :insert_file_region:I:3
Fsearch_file :search_file:I:3 search FILE for STRING returning TRUE if string found. 
Frandom :make_random_number:I:2 Usage:  seed n random Returns a random number in the range 0 to n - 1.  If seed is 0, the  number generated depends on previous seed.  If seed is -1, a seed based  on current time and pid is used, otherwise, seed is used as a seed. 
Fset_term_vtxxx :do_tt_set_term_vtxxx:V:1 Set terminal display appropriate for a vtxxx terminal.  This function takes a single integer parameter.  If non-zero, the terminal type is set for a vt100.  This means the terminal lacks the ability to insert/deletelines and characters.  If the parameter is zero, the terminal is assumedto be vt102 compatable.  Unless you are using a VERY old terminal or a primitive emulator, use zero as the parameter. 
VTERM_CANNOT_INSERT  Set this variable to 1 in your jed startup file (jed.rc) if your terminal is unable to insert (not vt102 compatable) 
VTERM_CANNOT_SCROLL  Set this variable to 1 in your jed startup file (jed.rc) if your terminal is unable to scroll. 
VBATCH  non-zero if JED is running in batch mode.  This variable  is read only. 
VTAB  Tab setting for the current buffer. 
VSELECTIVE_DISPLAY  If negative, ^M (RET) makes rest of line invisible.  Hidden  text is indicated by '...'.  
VLAST_CHAR  Last character entered from the keyboard 
VMAX_HITS  maximum number of 'hits' on a buffer before an autosave is performed. 
VCASE_SEARCH  if 1, searches are case sensitive.  If 0, they are not 
VPOINT 
VMESSAGE_BUFFER  Read only string indicating current message to be displayed or is displayed in the message buffer 
VIGNORE_USER_ABORT  If set to a non-zero value, the Abort Character will not trigger a S-Lang error.  When JED starts up, this value is set to 1 so that  the user cannot abort the loading of site.sl.  Later, it is set to 0 
VKILL_LINE_FEATURE  If non-zero, kill_line will kill through end of line character ifPoint is at beginning of the line.  Otherwise, it will kill only untilthe end of the line.  By default, this feature is turned on. 
VSCREEN_HEIGHT  number of rows on the screen. 
VSCREEN_WIDTH  number of columns on the screen 
VJED_LIBRARY  Read only string variable indicating the directory where JED libraryfiles are kept.  This variable may be set using an environment variable 
VJED_ROOT  Read only string variable indicating JED's root directory. This variable may be set using an environment variable 
VLINENUMBERS  If set to 0, line numbers are not displayed on the screen. If set to  1, line numbers will be displayed.  If set to anything else, the  %c column format specifier will be parsed allowing the column number to be displayed on the screen. 
VALT_CHAR   If this variable is non-zero, characters pressed in combinationthe ALT key will generate a two character sequence: the first character is the value of the ALT_CHAR itself followed by the character pressed. For example, if ALT-X is pressed and ALT_CHAR has a value of 27, the characters ESCAPE X will be generated. 
VMOUSE_X 
VMOUSE_Y 
VMOUSE_DELTA_TIME 
VMOUSE_BUTTON 
VMOUSE_EVENT_TYPE  Value is 1 if the event is a keypress and 0 if a release. 
VMOUSE_STATE  The state of the shift, control, and button keys BEFORE the event.This is an integer with the following meaning for the bits:     0: left button pressed     1: middle button pressed     2: right button pressed     3: shift key pressed     4: control key pressed 
VHIGHLIGHT  Set this variable non-zero to highlight marked regions 
VHORIZONTAL_PAN  If this variable is non-zero, the window pans with the Point.  Actuallyif the value is less than zero, the entire window pans.  If the value is positive, only the current line will pan.  The absolute value of the number determines the panning increment.  
Fvms_get_help :vms_get_help:V:2
Fvms_send_mail :vms_send_mail:I:2 Takes 2 string arguments: TO and SUBJECT.   TO may be a comma separated list of names.  The buffer will be mailed to names on this list with SUBJECT.  This routine uses  callable VMS mail.
Fenable_flow_control :enable_flow_control:V:1 If integer argument is non-zero, ^S/^Q flow control is enabled.  Ifargument is 0, ^S/^Q processing by the terminal is disabled.  Emacs modesets this to 0 (flow control off). 
Fcore_dump :exit_error_cmd:V:2Prototype: Void core_dump(String msg, Integer severity);Exit editor sumping the state of some crucial variables. If severity is 1, dump core if possible.  Message msg is also displayed. 
Fget_last_macro :get_last_macro:V:0 Prototype: String get_last_macro();This function returns characters composing the last keyboard macro.  Thecharactors that make up the macro are encoded as themselves except thefollowing characters:    '\n'    ---->   \J    null    ---->   \@     \      ---->   \\     '"'    ---->   \"
FIsHPFSFileSystem :IsHPFSFileSystem:I:1Prototype: Integer IsHPFSFileSystem(String path);Returns TRUE if drive of 'path' (possibly the default drive) is HPFS. 
Fmsdos_fixup_dirspec :msdos_pinhead_fix_dir:S:1Prototype: String msdos_fixup_dirspec (String dir);The motivation behind this is that DOS does not like a trailingbackslash '\\' except if it is for the root dir.  This function makes'dir' conform to that 
VC_COMMENT_HINT 
VWANT_SYNTAX_HIGHLIGHT 
Fset_top_status_line :define_top_screen_line:V:1Prototype: String set_top_status_line (String str);This functions sets the string to be displayed at the top of the display. It returns the value of the line that was previously displayed.See also: enable_top_status_line
Fenable_top_status_line :enable_menu_bar:V:1Prototype: Void enable_top_status_line (Integer x);If x is non-zero, the top status line is enabled.  If x is zero, thetop status line is disabled and hidden.See also: set_top_status_line
VTOP_WINDOW_ROW  This read-only variable gives the value of the starting row of the topwindow.  
Fmatching :new_find_matching:I:2
Fcreate_user_mark :create_user_mark:I:0
Fdelete_user_mark :destroy_user_mark:V:1
Fgoto_user_mark :goto_user_mark:V:1
Fuser_mark_buffer :user_mark_buffer:S:1
Ftex_mode () Mode useful for editing TeX and LaTeX modes.  %!% Useful bindings:%!%  '"'  :  tex_insert_quote%!%  '\'' :  tex_insert_quote%!%  '$'  :  tex_blink_dollar%!%  '.'  :  tex_ldots.  Inserts a '.' except if preceeded by two dots.  In %!%           this case, the dots are converted to \ldots.%!%%!%  When tex mode is loaded, 'tex_mode_hook' is called.  This hook will allow%!%  users to customize the mode.  In particular, certain functions here have%!%  no keybindings, e.g., 'latex_do_environment'.  So, in your jed.rc file,%!%  add something like:%!%    define tex_mode_hook () {%!%       local_setkey ("latex_do_environment", "^C^E");%!%    }%!%  which binds the function to Ctrl-C Ctrl-E.
Fmake_tmp_buffer_name Prototype: String make_tmp_buffer_name (String base);%!% Generates a unique buffer name using the string 'base' for the beginning%!% of the name.  The buffer name is returned.  The buffer is not created.
Fappend_string_to_file Prototype: Integer append_string_to_file (String str, String file);%!% The string 'str' is appended to file 'file'.  This function returns -1%!% upon failure or the number of lines written upon success.%!% See append_region_to_file for more information.
Fwrite_string_to_file Prototype: Integer write_string_to_file (String str, String file);%!% The string 'str' is written to file 'file'.  This function returns -1%!% upon failure or the number of lines written upon success.%!% This function does not modify a buffer visiting the file.
Ffortran_mode () Mode designed for the purpose of editing FORTRAN files.%!% After the mode is loaded, the hook 'fortran_hook' is called.%!% Useful functions include%!% %!%  Function:                    Default Binding:%!%   fortran_indent                    TAB%!%   fortran_newline                   RETURN  %!%     indents current line, inserts newline and indents it.%!%   fortran_continue_newline          ESC RETURN%!%     indents current line, and creates a continuation line on next line.%!%   fortran_comment                   ESC ;%!%     comments out current line%!%   fortran_uncomment                 ESC :%!%     uncomments current line%!%   fortran_electric_label            0-9%!%     Generates a label for current line or simply inserts a digit.%!%  %!% Variables include:%!%   Fortran_Continue_Char   --- character used as a continuation character.  %!%     By default, its value is "&"%!%   Fortran_Comment_String  --- string used by 'fortran_comment' to %!%     comment out a line.  The default string is "C ";%!%   Fortran_Indent_Amount   --- number of spaces to indent statements in %!%                               a block.  The default is 2.
Fmost_mode () Emulates MOST fileviewer%!% The following keys are defined:%!% SPACE            next screen%!% DELETE           previous screen%!% /                search_forward%!% ?                search_backward%!% n                find next occurrence%!% q                quit most mode  (usually kills buffer if not modified)%!% e                edit buffer%!% h                help summary%!% t                Top of Buffer%!% b                End of Buffer
Fdired ()Mode designed for maintaining and editing a directory.%!%%!%To invoke Dired, do `M-x dired' or `C-x d' (emacs)%!%%!%Dired will prompt for a directory name and get a listing of files in the%!%requested directory.%!%%!%The primary use of Dired is to "flag" files for deletion and then delete%!%the previously flagged files.%!%%!%'d'		Flag this file for deletion.%!%'u'		Remove deletion flag on this line.%!%DEL		Move point to previous line and remove deletion flag.%!%'~'		Flag all backup files for deletion.%!%%!%'x'		eXpunge all flagged files.  Dired will show a list of the%!%	files tagged for deletion and ask for confirmation before actually %!%	deleting the files.%!%%!%'r'		Rename file on the current line; prompts for a newname%!%'m'		Move tagged files to a new dir; prompts for dir name%!%%!%`g'		Update the entire contents of the Dired buffer%!%%!%`f'		Visit the file described on the current line, like typing%!%	`M-x find_file' and supplying that file name.  If current line is a%!%	directory, runs dired on the directory and the old buffer is killed.%!%%!%`v'		View the file described on the current line in MOST mode.%!%%!%`M-x dired_search'%!%	use fsearch to perform a search through the files listed in the%!%	dired buffer from the current point forward.  `M-x dired_search' %!%	from the visited file will revert to the dired buffer and continue %!%	the search from the next file in the list.%!%%!%all the usual motion commands plus some extras:%!%%!%`C-n' `n' SPC%!%	move point to the next line (at the beginning of the file name)%!%%!%`C-p' `p'%!%	move point to the previous line (at the beginning of the file name)%!%%!%`M-x dired_kill_line'	`^K' (emacs) %!%	removes a line from the dired buffer
Fexpand_keystring Prototype: String expand_keystring (String key)%!% This function takes a key string that is suitable for use in a 'setkey'%!% definition and expands it to a human readable form.  %!% For example, it expands ^X to the form "Ctrl-X", ^[ to "ESC", %!% ^[[A to "UP", etc...%!% See also: setkey
Fdircat(dir, file) A function to contat a directory with a filename.  Basically checks%!% for the final slash on the dir and adds on if necessary
VInfo_Directory  A Comma separated list of info directories to search.
Fstrncat Prototype: Void strncat (String a, String b, ..., Integer n);%!% Returns concatenated string "abc..."
VC_Comment_Column  Column to begin a C comment--- used by c_make_comment
Fgo_up Prototype: Void go_up (Integer n);%!% Move up 'n' lines.%!% See also: up, go_down
Fgo_down Prototype: Void go_down (Integer n);%!% Move down 'n' lines.%!% See also: go_up, down
Fgo_left Prototype: Void go_left (Integer n);%!% Move backward 'n' characters.%!% See also: left, go_right
Fgo_right Prototype: Void go_right (Integer n);%!% Move forward 'n' characters.%!% See also: right, go_left
Frunhooks Prototype: Void runhooks (String fun)%!% if S-Lang function 'fun' is defined, execute it.  It does nothing if 'fun'%!% does not exist.
Flocal_setkey Prototype: Void local_setkey (String fun, String key);%!% This function is like 'setkey' but unlike 'setkey' which operates on the%!% global keymap, 'local_setkey' operates on the current keymap which may or%!% may not be the global one.%!% See also: setkey, definekey, local_unsetkey
Flocal_unsetkey Prototype: Void local_unsetkey (String key);%!% This function is like 'unsetkey' but unlike 'unsetkey' which unsets a key%!% from the global keymap, 'local_unsetkey' operates on the current keymap%!% which may or may not be the global one.%!% See also: unsetkey, undefinekey, local_setkey
Finsert_char(ch) insert a character into a buffer.%!% This function should be called instead of 'insert' when it is desired to%!% insert a 1 character string.  Unlike 'insert', insert_char takes an integer%!% argument.  For example, %!%    'x' insert_char%!% and %!%    "x" insert%!% are functionally equivalent but insert_char is more memory efficient.
Fnewline Prototype: Void newline (Void);%!% insert a newline in the buffer at point.%!% See also: insert, insert_char
Finsert_single_space () insert a single space into the buffer.
Flooking_at_char Prototype: Integer looking_at_char (Integer ch);%!% This function returns non-zero if the character at the current editing%!% point is 'ch' otherwise it retuns zero.  This function performs a case %!% sensitive comparison.
Ffile_type(file) returns type of file.  e.g., /usr/a.b/file.c --> c
Fc_mode() Mode dedicated to facilitate the editing of C language files.  Functions%!% that affect this mode include:%!%%!%   function:             default binding:%!%   brace_bra_cmd               {%!%   brace_ket_cmd               }%!%   newline_and_indent          RETURN%!%   indent_line_cmd             TAB%!%   goto_match                  ^\%!%   c_make_comment              ESC ;%!%%!%  Variables affecting indentation include:%!%%!%   C_INDENT%!%   C_BRACE%!%   C_Comment_Column  --- used by c_make_comment
Ftext_mode()  Mode for indenting and wrapping text%!%  Functions that affect this mode include:%!%%!%    Function:                     Default Binding:%!%      indent_line_cmd                 TAB%!%      newline_and_indent_cmd          RETURN%!%      format_paragraph                ESC Q%!%      narrow_paragraph                ESC N%!%%!%  Variables include:%!%      WRAP_INDENTS, WRAP%!%      TAB, TAB_DEFAULT
Fno_mode()  Generic mode not designed for anything in particular.%!%  See:  text_mode, c_mode
Vmode_hook_pointer  called from mode_hook.  Returns 0 if it is desired that control return%!% to mode_hook or 1 if mode hook should exit after calling mode_hook_ptr
Fmodeline_hook() check first line for the simplest Emacs mode statement%!% -*- modename -*-
Fadd_mode_for_extension Prototype: Void add_mode_for_extension (String mode, String ext);%!% This function modifies Mode_List in such a way that when a file with %!% filename extension `ext' is read in, function strcat (mode, "_mode")%!% will be called to set the mode.   That is, the first parameter 'mode' %!% is the name of a mode without the '_mode' added to the end of it.
Fmode_hook (ext) This is a hook called by find_file routines to set the mode%!% for the buffer. This function takes one parameter, the filename extension%!% and returns nothing.
Fset_buffer_modified_flag(modif) sets buf modified flag. If argument is 1, mark%!% buffer as modified.  If argument is 0, mark buffer as unchanged.
Fbuffer_modified ()  returns non-zero if the buffer modified flag is set.  It returns zero%!%  if the buffer modified flag is not been set.  This works on the %!%  current buffer.  See also 'set_buffer_modified_flag'.
Fset_buffer_undo(modif) set undo mode for buffer.  If argument is 1, undo is on.  0 turns it off
Fset_readonly(n) Takes 1 parameter: 0 turn off readonly%!%                    1 turn on readonly
Fset_overwrite(n) Takes 1 parameter: 0 turn off overwrite%!%                    1 turn on overwrite
Vhelp_for_help_string  string to display at bottom of screen upon JED startup and when%!% user executes the help function.
Fexpand_jedlib_file(f) Search for FILE in directories specified by JED_LIBRARY returning%!% expanded pathname if found or the Null string otherwise.
VStartup_With_File  If non-zero, startup by asking user for a filename if one was%!% not specified on the command line.
Fjed_startup_hook() Function that gets executed right before JED enters its main editing%!% loop.  This is for last minute modifications of data structures that%!% did not exist when startup files were loaded (e.g., minibuffer keymap)
Fwhatpos () display row and column information in minibuffer
Ffind_jedlib_file(file) find a file from JED_LIBRARY, returns number of lines read or 0 if not %!% found.
VHelp_File  name of the file to load when the help function is called.
Fhelp() Pop up a window containing a help file.  The help file that is read%!% in is given by the variable Help_File.
Fmake_backup_filename(dir, file) returns backup filename.  Arguments to function are dir and file.
Fmake_autosave_filename(dir, file) returns autosave filename.  Arguments to function are dir and file.
Fparse_filename(fn) breaks a filespec into dir filename--- %!% this routine returns dir and filename such that a simple strcat will%!% suffice to put them together again.  For example, on unix, /a/b/c%!% returns /a/b/ and c
Ffind_file_hook(file) called AFTER a file is read in to a buffer.  FILENAME is on the stack.
Fbuffer_filename Prototype: String buffer_filename ();%!% Returns the name of the file associated with the current buffer.  If %!% there is none associated with it, the empty string is returned.
Fbuffer_format_in_columns() Prototype Void buffer_format_in_columns();%!% takes a buffer consisting of a sigle column of items and converts the%!% buffer to a multi-column format.
Fcommand_line_hook() called from main in JED executable.
Fdeln Prototype: Void deln (Integer n);%!% delete the next 'n' characters.
