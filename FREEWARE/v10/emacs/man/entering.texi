@c This is part of the Emacs manual.
@c Copyright (C) 1985, 1986, 1987, 1993 Free Software Foundation, Inc.
@c See file emacs.texi for copying conditions.
@node Entering Emacs, Exiting, Text Characters, Top
@chapter Entering and Exiting Emacs
@cindex entering Emacs
@cindex starting Emacs 

  The usual way to invoke Emacs is with the shell command @samp{emacs}.
Emacs clears the screen and then displays an initial help message and
copyright notice.  On a window system, Emacs opens a window of its own.
You can begin typing Emacs commands immediately afterward.

  Some operating systems insist on discarding all type-ahead when Emacs
starts up; they give Emacs no way to prevent this.  Therefore, it is
wise to wait until Emacs clears the screen before typing your first
editing command.

  If you run Emacs from a shell window under the X Window System, run it
in the background with @samp{emacs&}.  This way, Emacs does not tie up
the shell window, so you can use it to run other shell commands while
Emacs operates its own X windows.

@vindex initial-major-mode
  When Emacs starts up, it makes a buffer named @samp{*scratch*}.
That's the buffer you start out in.  The @samp{*scratch*} uses Lisp
Interaction mode; you can use it to type Lisp expressions and evaluate
them, or you can ignore that capability and simply doodle.  (You can
specify a different major mode for this buffer by setting the variable
@code{initial-major-mode} in your init file.  @xref{Init File}.)

  It is also possible to specify files to be visited, Lisp files to be
loaded, and functions to be called, by giving Emacs arguments in the
shell command line.  @xref{Command Arguments}.  But we don't recommend
doing this.  The feature exists mainly for compatibility with other
editors.

  Many other editors are designed to be started afresh each time you
want to edit.  You edit one file and then exit the editor.  The next
time you want to edit either another file or the same one, you must run
the editor again.  With these editors, it makes sense to use a command
line argument to say which file to edit.

  But starting a new Emacs each time you want to edit a different file
does not make sense.  For one thing, this would be annoyingly slow.  For
another, this would fail to take advantage of Emacs's ability to visit
more than one file in a single editing session.

  The recommended way to use GNU Emacs is to start it only once, just
after you log in, and do all your editing in the same Emacs session.
Each time you want to edit a different file, you visit it with the
existing Emacs, which eventually comes to have many files in it ready
for editing.  Usually you do not kill the Emacs until you are about to
log out.

@node Exiting, Basic, Entering Emacs, Top
@section Exiting Emacs
@cindex exiting
@cindex killing Emacs
@cindex suspending
@cindex leaving Emacs
@cindex quitting Emacs

  There are two commands for exiting Emacs because there are two kinds
of exiting: @dfn{suspending} Emacs and @dfn{killing} Emacs.

  @dfn{Suspending} means stopping Emacs temporarily and returning control
to its parent process (usually a shell), allowing you to resume editing
later in the same Emacs job, with the same files, same kill ring, same
undo history, and so on.  This is the usual way to exit.

  @dfn{Killing} Emacs means destroying the Emacs job.  You can run Emacs
again later, but you will get a fresh Emacs; there is no way to resume
the same editing session after it has been killed.

@table @kbd
@item C-z
Suspend Emacs (@code{suspend-emacs}).
@item C-x C-c
Kill Emacs (@code{save-buffers-kill-emacs}).
@end table

@kindex C-z
@findex suspend-emacs
  To suspend Emacs, type @kbd{C-z} (@code{suspend-emacs}).  This takes
you back to the shell from which you invoked Emacs.  You can resume
Emacs with the shell command @samp{%emacs} in most common shells.

  On systems that do not permit programs to be suspended, @kbd{C-z} runs
an inferior shell that communicates directly with the terminal, and
Emacs waits until you exit the subshell.  (The way to do that is
probably with @kbd{C-d} or @samp{exit}, but it depends on which shell
you use.)  The only way on these systems to get back to the shell from
which Emacs was run (to log out, for example) is to kill Emacs.

@findex iconify-frame
  When Emacs communicates directly with an X server and creates its own
dedicated X windows, @kbd{C-z} has a different meaning.  Suspending an
applications that uses its own X windows is not meaningful or useful.
Instead, @kbd{C-z} runs the command @code{iconify-frame}, which
temporarily closes up the selected Emacs frame.  The way to get back to
a shell window is with the window manager.

@kindex C-x C-c
@findex save-buffers-kill-emacs
  To kill Emacs, type @kbd{C-x C-c} (@code{save-buffers-kill-emacs}).  A
two-character key is used for this to make it harder to type.  Unless a
numeric argument is used, this command first offers to save any modified
buffers.  If you do not save them all, it asks for reconfirmation with
@kbd{yes} before killing Emacs, since any changes not saved will be lost
forever.  Also, if any subprocesses are still running, @kbd{C-x C-c}
asks for confirmation about them, since killing Emacs will kill the
subprocesses immediately.

  The operating system usually listens for certain special characters
whose meaning is to kill or suspend the program you are running.
@b{This operating system feature is turned off while you are in Emacs.}
The meanings of @kbd{C-z} and @kbd{C-x C-c} as keys in Emacs were
inspired by the use of @kbd{C-z} and @kbd{C-c} on several operating
systems as the characters for stopping or killing a program, but that is
their only relationship with the operating system.  You can customize
these keys to run any commands (@pxref{Keymaps}).
