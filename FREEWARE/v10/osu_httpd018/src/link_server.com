$!
$! This procedure links the HTTP_SERVER.EXE from the object files.
$!
$! Parameters:
$!	P1		Keyword for TCP package to use: 
$!				UCXTCP, CMUTCP, TWGTCP, MULTINET, TCPWARE
$!	P2		Option additional link flags (e.g. /TRACE).
$!
$! Author:	David Jones
$! Date:	29-JUL-1994
$! Revised:	30-NOV-1994
$!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
$! First validate P1.
$ say = "WRITE SYS$OUTPUT"
$ tcp_list = "/UCXTCP/CMUTCP/TWGTCP/MULTINET/TCPWARE/SHARE/BSDTCP/"
$ if f$locate("/''P1'/",TCP_LIST) .GE. f$length(tcp_list)
$ then
$    say "Invalid P1 (tcp type), valid values: ",-
	"UCXTCP MULTINET CMUTCP TWGTCP TCPWARE SHARE"
$    exit
$ endif
$ create TMP_LINK.OPT
$ open/append lopt TMP_LINK.OPT
$ on error then goto cleanup
$ on control_y then goto cleanup
$!
$! Determine our configuration.
$!
$ is_axp = (f$getsyi("CPU") .ge. 128)
$ is_vaxc = (.not.is_axp .and. (f$trnlnm("DECC$CC_DEFAULT") .nes. "/DECC"))
$ is_vmsv5 = ("V5." .eqs. f$extract(0,3,f$getsyi("VERSION")))
$ write lopt "!This file generated by LINK_SERVER.COM, AXP flag: ", is_axp, -
	", VAXC flag: ", is_vaxc, ", TCP: ", P1
$!
$! Add Pthreads libraries.
$ write lopt "sys$share:cma$lib_shr/share,cma$rtl/share
$ if is_axp then write lopt "sys$share:cma$open_lib_shr/share,cma$open_rtl/share
$!
$! Add any speical lines needed for TCP package.(None needed for UCX or CMU)
$!
$ if P1 .eqs. "SHARE" then write lopt "sys$disk:[]tserver_tcpshr/share"
$ if P1 .nes. "SHARE" .and. P1 .nes. "BSDTCP" then write lopt -
	"sys$disk:[]tserver_tcp.obj"
$ if P1 .eqs. "BSDTCP" then write lopt "sys$disk:[]tserver_tcp_p.obj"
$ if P1 .eqs. "MULTINET" then write lopt -
"multinet_root:[multinet]multinet_socket_library/share"
$ if P1 .eqs. "TWGTCP" then write lopt "twg$tcp:[netdist.lib]twglib/lib"
$ if P1 .eqs. "TCPWARE" then write lopt "tcpip_socklib/share"
$!
$! Add special stuff for VAXC
$!
$ if is_vaxc then write lopt "sys$share:vaxcrtl/share"
$ if is_vaxc then write lopt "PSECT_ATTR=$CHAR_STRING_CONSTANTS,NOWRT"
$!
$ close lopt
$ on error then exit $status
$ purge tmp_link.opt
$!
$ link 'P2' HTTP_SERVER.OPT/OPT,TMP_LINK.OPT/OPT
$ exit $status
$!
$ cleanup:
$ close lopt
