$ !
$ !	S D L B L D . C O M
$ !
$ !	THIS COMMAND FILE BUILDS THE SDL IMAGES
$ !	ASSUMES [SDL] AND DEFINITIONS FOR COM$, SRC$, LIB$, EXE$, 
$ !		MAP$, LIS$, AND OBJ$.
$ !
$ !	This command procedure was built by reading the SDLBUILD.MMS
$ !	file and creating VMS build procedures that match as closely
$ !	as possible.  The logical names (eg SDLLIB:) have been changed 
$ !	to the VMS conventions (LIB$ or SRC$).  
$ !	SDLBUILD.MMS can be found in VMS$:[SDL] if it is needed for 
$ !	future reference.
$ !
$ !  If logical ALPHA_TOOL is defined, image names are made to be
$ !  ALPHA_SDLxxx.EXE instead of SDLxxx.EXE.
$ !
$ @COM$:SDLLOGDEF
$ GOTO 'PHASE'
$
$INIT:
$ !
$ !	CREATE THE DIRECTORIES
$ !
$ @SYSBLDCOM$:CREATEDIR
$ EXIT
$
$UPDATE:
$ !
$ !	Create updated sources.
$ !
$ !
$ !	Update sources with SLP changes
$ !
$ SRCUPDATE PATBLSEXT.REQ
$ SRCUPDATE PATDATA.REQ
$ SRCUPDATE PATLANGSP.REQ
$ SRCUPDATE DEB.REQ
$ SRCUPDATE PATDEB.REQ
$ SRCUPDATE PATERROR.REQ
$ SRCUPDATE PATLRTUNE.REQ
$ SRCUPDATE PATPARSER.REQ
$ SRCUPDATE PATTOKEN.REQ
$ SRCUPDATE FILEDEF.IN
$ SRCUPDATE SDLBASIC.OPT
$ SRCUPDATE SDLLANG.OPT
$ SRCUPDATE SDLMSGDEF.IN
$ SRCUPDATE SDLNODMSK.IN
$ SRCUPDATE SDLNODEF.SDL
$ SRCUPDATE SDLNOPARS.TPU
$ SRCUPDATE SDLOLDNODMSK.IN
$ SRCUPDATE SDLSEMDEF.TPU
$ SRCUPDATE SDLSHR.SDL
$ SRCUPDATE SDLSHR.TPU
$ SRCUPDATE SDLSYMTAB.IN
$ SRCUPDATE SDLTOKDEF.SDL
$ SRCUPDATE SDLTYPDEF.SDL
$ SRCUPDATE SDLVERSION.IN
$ SRCUPDATE SDLVERSION.OPT
$ SRCUPDATE STSDEF.SDL
$ SRCUPDATE SDLMSG.MSG
$ SRCUPDATE PATREQPRO.REQ
$ SRCUPDATE SDLPAT.PAT
$ SRCUPDATE PATSWITCH.REQ
$ SRCUPDATE PATPROLOG.REQ
$ SRCUPDATE VMS.REQ
$ SRCUPDATE COPYRIGHT.TXT
$ SRCUPDATE XPORT.REQ		! This comes from a layered product kit and
$!				! is checked in here so that XPORT.L32 can
$!				! be created during the Cross Tools build
$!				! using the current version of Bliss-32.
$ SRCUPDATE SDLMAIN.PLI
$
$ COPY SRC$:SDLMAIN.PLI SRC$:SDLMAIN2.PLI
$ EDIT/EDT/COMMAND=SRC$:SDLNOPARS.TPU SRC$:SDLMAIN2.PLI
$ PURGE  SRC$:SDLMAIN2.PLI
$
$ EXIT
$
$SRCLIB:
$ !
$ !	DELETE AND RE-CREATE MACRO AND HELP LIBRARIES
$ !
$ DELETE LIB$:*.L32;*,*.MLB;*,*.IN;*,*.SRC;*,*.SAV;*,*.SDL;*
$
$!
$! Parser Tables Section
$!
$! The build for SDLSEMDEF uses as input the file SDLPAT.LIS generated in
$! the default directory by LALRPAT in the first stage.  To avoid changing
$! SDLSEMDEF.TPU, the file COPYRIGHT.TXT has to
$! be copied into LIB$, where the TPU file expects it to be.
$!        
$! Note:  Source/object for LALRPAT.PAS/.OBJ are also checked into VMS$:[SDL]
$!	  in case any change ever needs to be made to LALRPAT.EXE.  However,
$!	  the .EXE is not built here.
$!
$
$ RUN COM$:LALRPAT
SRC$:SDLPAT.PAT

$ COPY SDLPAT.REQ LIB$:
$ COPY SDLPAT.LIS LIB$:
$ LSEDIT/COMMAND=SRC$:SDLSEMDEF.TPU/NOSECTION/NODISPLAY LIB$:SDLPAT.LIS
$ DELETE SDLPAT.REQ;*
$ DELETE SDLPAT.LIS;*
$!
$ SDL /LAN=(PLI=LIB$:.IN,MACRO=LIB$:.SRC)	LIB$:SDLSEMDEF
$ SDL /LAN=(PLI=LIB$:.IN,MACRO=LIB$:.SRC)	SRC$:SDLSHR
$ EDIT/EDT/COMMAND=SRC$:SDLSHR.TPU		LIB$:SDLSHR.IN
$ SDL /LAN=(PLI=LIB$:.IN,MACRO=LIB$:.SRC)	SRC$:SDLNODEF
$ SDL /LAN=(PLI=LIB$:.IN,MACRO=LIB$:.SRC, -
			BLISSF=LIB$:.R32)	SRC$:SDLTOKDEF
$ SDL /LAN=(PLI=LIB$:.IN,MACRO=LIB$:.SRC)	SRC$:SDLTYPDEF
$ SDL /LAN=(PLI=LIB$:.IN,MACRO=LIB$:.SRC)	SRC$:STSDEF
$ MESSAGE/NOLIS/OBJ=OBJ$:/SDL=LIB$:		SRC$:SDLMSG.MSG
$ SDL /LAN=(PLI=LIB$:.IN,MACRO=LIB$:.SRC)	LIB$:SDLMSG
$
$ ! BLISS Libraries Section
$
$ ! The first four (XPORT, PATBLSEXT, PATDATA, PATLANGSP) must be built
$ ! in the order given, and before any of the other libraries.
$
$ BLISS/NOLIST	     /LIBRARY=LIB$:XPORT.L32	SRC$:XPORT.REQ
$ BLISS/NOLIST/DEBUG /LIBRARY=LIB$:.L32		SRC$:PATBLSEXT.REQ
$ BLISS/NOLIST/DEBUG /LIBRARY=LIB$:.L32		SRC$:PATDATA.REQ
$ BLISS/NOLIST/DEBUG /LIBRARY=LIB$:.L32		SRC$:PATLANGSP.REQ
$ BLISS/NOLIST/DEBUG /LIBRARY=LIB$:.L32		SRC$:DEB.REQ
$ BLISS/NOLIST/DEBUG /LIBRARY=LIB$:.L32		SRC$:PATDEB.REQ
$ BLISS/NOLIST/DEBUG /LIBRARY=LIB$:.L32		SRC$:PATERROR.REQ
$ BLISS/NOLIST/DEBUG /LIBRARY=LIB$:.L32		SRC$:PATLRTUNE.REQ
$ BLISS/NOLIST/DEBUG /LIBRARY=LIB$:.L32		SRC$:PATPARSER.REQ
$ BLISS/NOLIST/DEBUG /LIBRARY=LIB$:.L32		SRC$:PATTOKEN.REQ
$ LIBR/CREATE/MACRO LIB$:SDLDEF.MLB -
    LIB$:SDLSEMDEF.SRC, -
    LIB$:SDLNODEF.SRC, -
    LIB$:SDLTOKDEF.SRC, -
    LIB$:SDLTYPDEF.SRC, -
    LIB$:STSDEF.SRC, -
    LIB$:SDLSHR.SRC, -
    LIB$:SDLMSG.SRC
$ COPY SRC$:FILEDEF.IN		LIB$:
$ COPY SRC$:SDLMSGDEF.IN	LIB$:
$ COPY SRC$:SDLNODMSK.IN	LIB$:
$ COPY SRC$:SDLOLDNODMSK.IN	LIB$:
$ COPY SRC$:SDLSYMTAB.IN	LIB$:
$ COPY SRC$:SDLVERSION.IN	LIB$:
$ EXIT
$
$ASSEM:
$ !
$ !	PURGE AND RE-CREATE THE OBJECTS AND LISTINGS
$ !
$ PURGE OBJ$:*.OBJ,*.OBS,*.OBB,LIS$:*.LIS,*.LSS
$ @SYSBLDCOM$:FASM 'FACNAM' "" NOLIB 'UPDATES'
$ EXIT
$
$OBJLIB:
$ !
$ !	Create the object library from the object modules.
$ !
$ DELETE OBJ$:*.OBB;*,OBJ$:*.OLB;*
$
$ COPY 	OBJ$:DEB.OBJ,		OBJ$:PATDATA.OBJ,	-
	OBJ$:PATDEB.OBJ,	OBJ$:PATERROR.OBJ,	-
	OBJ$:PATLANGSP.OBJ,	OBJ$:PATLRTUNE.OBJ	-
	OBJ$:OBJECTS_1.OBB
$ COPY	OBJ$:PATPARSER.OBJ,	OBJ$:PATTOKEN.OBJ,	-
	OBJ$:SDLACTION.OBJ,	OBJ$:SDLCVTSTR.OBJ,	-
	OBJ$:SDLDATA.OBJ,	OBJ$:LIBRECDEP.OBJ,	-
	OBJ$:SDLDUMP.OBJ,	OBJ$:SDLERRMSG.OBJ	-
	OBJ$:OBJECTS_2.OBB
$ COPY 	OBJ$:SDLGETLIN.OBJ,	OBJ$:SDLHASHF.OBJ,	-
	OBJ$:SDLHEADER.OBJ,	OBJ$:SDLIMGAC2.OBJ,	-
	OBJ$:SDLIMGACT.OBJ,	OBJ$:SDLINTREE.OBJ,	-
	OBJ$:SDLOLDINTREE.OBJ				-
	OBJ$:OBJECTS_3.OBB
$ COPY	OBJ$:SDLLEX.OBJ,	-
	OBJ$:SDLMSG.OBJ,	OBJ$:SDLOUTTRE.OBJ,	-
	OBJ$:SDLPUTLIN.OBJ,	OBJ$:SDLREADFILE.OBJ	-
	OBJ$:OBJECTS_4.OBB
$ COPY	OBJ$:SDLQUE.OBJ,	OBJ$:SDLTRIM.OBJ,	-
	OBJ$:SDLTRNVEC.OBJ,	OBJ$:SDLWRTLIS.OBJ	-
	OBJ$:OBJECTS_5.OBB
$ LIBR/CREATE LIB$:SDL.OLB OBJ$:OBJECTS_1.OBB,OBJ$:OBJECTS_2.OBB, -
	OBJ$:OBJECTS_3.OBB,OBJ$:OBJECTS_4.OBB,OBJ$:OBJECTS_5.OBB
$
$ COPY 	OBJ$:BASADD_COMMENTS.OBJ,	-
	OBJ$:BASDO_BITFIELDS.OBJ,	-
	OBJ$:BASDO_CHILDREN.OBJ,	-
	OBJ$:BASDO_COM_NODE.OBJ,	-
	OBJ$:BASDO_CONDITIONAL.OBJ,	-
	OBJ$:BASDO_CONST.OBJ		-
	OBJ$:BASOBJ_1.OBB
$ COPY 	OBJ$:BASDO_ENTRY.OBJ,		-
	OBJ$:BASDO_GLOB_COM.OBJ,	-
	OBJ$:BASDO_ITEM.OBJ,		-
	OBJ$:BASDO_LITERAL.OBJ,	-
	OBJ$:BASDO_MODULE.OBJ,	-
	OBJ$:BASDO_PARAM.OBJ		-
	OBJ$:BASOBJ_2.OBB
$ COPY	OBJ$:BASDO_STRUCTURE.OBJ,	-
	OBJ$:BASDO_TOP_LEVEL_DIM.OBJ,	-
	OBJ$:BASDO_UNION.OBJ,		-
	OBJ$:BASDO_VAR_STRING.OBJ,	-
	OBJ$:BASGET_TYPE.OBJ,		-
	OBJ$:BASOUTPUT_BUF.OBJ	-
	OBJ$:BASOBJ_3.OBB
$ COPY	OBJ$:BASOUTPUTNODE.OBJ,	-
	OBJ$:BASPUT_CHAR_VAR_RECS.OBJ,-
	OBJ$:BASPUT_TYPES.OBJ,	-
	OBJ$:BASSPECIAL_CHECKS.OBJ,	-
	OBJ$:BASTABS.OBJ		-
	OBJ$:BASOBJ_4.OBB
$ LIBR /CREATE LIB$:SDLBASLIB.OLB OBJ$:BASOBJ_1.OBB,OBJ$:BASOBJ_2.OBB,-
	OBJ$:BASOBJ_3.OBB,OBJ$:BASOBJ_4.OBB
$ EXIT
$
$LNKLIB:
$ !
$ @COM$:SDLLNK SDLADA
$ @COM$:SDLLNK SDLBASIC
$ @COM$:SDLLNK SDLBLISS
$ @COM$:SDLLNK SDLBLISS64
$ @COM$:SDLLNK SDLBLISSF
$ @COM$:SDLLNK SDLCC
$ @COM$:SDLLNK SDLDTR
$ @COM$:SDLLNK SDLEPASCAL
$ @COM$:SDLLNK SDLFORTRAN
$ @COM$:SDLLNK SDLFORTV3
$ @COM$:SDLLNK SDLLISP
$ @COM$:SDLLNK SDLMACRO
$ @COM$:SDLLNK SDLPASCAL
$ @COM$:SDLLNK SDLPLI
$ @COM$:SDLLNK SDLNPARSE
$ @COM$:SDLLNK SDLSDML
$ @COM$:SDLLNK SDLTPU
$ @COM$:SDLLNK SDLUIL
$ !
$
$LINK:
$ !
$ @COM$:SDLLNK SDL
$ @COM$:SDLLNK SDLNPARSE
$ EXIT
$
$RESULT:
$ !
$ !	COPY THE IMAGE, MAP AND HELP FILES TO A SYSTEM AREA
$ !
$ if f$trnlnm("ALPHA_TOOL") .nes. "" 
$ then PREFIX = "ALPHA_"
$ else PREFIX = ""
$ endif
$
$ CPYRESEXE EXE$:'PREFIX'SDL.EXE
$ CPYRESMAP MAP$:'PREFIX'SDL.MAP
$ CPYRESEXE EXE$:'PREFIX'SDLNPARSE.EXE
$ CPYRESMAP MAP$:'PREFIX'SDLNPARSE.MAP
$ CPYSYSLIB EXE$:'PREFIX'SDLADA.EXE
$ CPYSYSLIB EXE$:'PREFIX'SDLBASIC.EXE
$ CPYSYSLIB EXE$:'PREFIX'SDLBLISS.EXE
$ CPYSYSLIB EXE$:'PREFIX'SDLBLISS64.EXE
$ CPYSYSLIB EXE$:'PREFIX'SDLBLISSF.EXE
$ CPYSYSLIB EXE$:'PREFIX'SDLCC.EXE
$ CPYSYSLIB EXE$:'PREFIX'SDLDTR.EXE
$ CPYSYSLIB EXE$:'PREFIX'SDLEPASCAL.EXE
$ CPYSYSLIB EXE$:'PREFIX'SDLFORTRAN.EXE
$ CPYSYSLIB EXE$:'PREFIX'SDLFORTV3.EXE
$ CPYSYSLIB EXE$:'PREFIX'SDLLISP.EXE
$ CPYSYSLIB EXE$:'PREFIX'SDLMACRO.EXE
$ CPYSYSLIB EXE$:'PREFIX'SDLPASCAL.EXE
$ CPYSYSLIB EXE$:'PREFIX'SDLPLI.EXE
$ CPYSYSLIB EXE$:'PREFIX'SDLSDML.EXE
$ CPYSYSLIB EXE$:'PREFIX'SDLTPU.EXE
$ CPYSYSLIB EXE$:'PREFIX'SDLUIL.EXE
$ !
$ !	BUILD THE CONCATENATED LISTING RESLIS$:SDL.LSS
$ !
$ CPYRESLIS LIS$:*.LIS SDL.LSS
