1   minimumGIGAswitchMIBVersionSupported
    
    When new GIGAswitch MIBs are released to the public,
    they will be given new version numbers.  The
    implementation strategy allows multiple versions to be
    supported simultaneously.  MIB versions greater than or
    equal to this version are still supported.
    
1   maximumGIGAswitchMIBVersionSupported
    
    When new GIGAswitch MIBs are released to the public,
    they will be given new version numbers.  The
    implementation strategy allows multiple versions to be
    supported simultaneously.  MIB versions less than or
    equal to this version are still supported.  A management
    station may load a MIB which is not supported until
    the GIGAswitch software is updated.
    
1   ebrNportMatrixNameTable
2   ebrNportMatrixNameEntry
2   ebrNportMatrixName
    
    ::= { ebrNportMatrixNameEntry 1 }
    ebrNportMatrixValue OBJECT-TYPE
    SYNTAX DisplayString (SIZE (32))
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
    "A matrix is expressed using a shorthand that says wha
2   ebrNportMatrixStatus
1   ebrNportMatrixFppnValue
    A matrix is expressed using a shorthand that says what
    input ports can talk to what output ports.
    An examples of a specification is:
    1.1,2.1-14.2:1.1-14.2; 2.2:5.3,6.4; 10.3:;
    Semicolons separate expressions.  Within each expression,
    the colon has a left hand side and a right hand side.  Front
    panel ports on the left hand side can send packets to front
    panel ports on the right hand side.  Commas separate items in
    a list of front panel ports.  Hyphens are short-hand for
    specifying a range of numbers.  If there is no right hand side,
    the front panel ports on the left cannot send packets to any
    front panel port (unless the matrix is combined with some some
    other matrix in a filter specification, or unless the filter is
    overridden).
    Front panel port numbers are of the form (slot.connector),
    where slot is the slot number the module is plugged into,
    and connector is the connector number specified on the
    front of the card.
    A matrix will read back in a form equivalent to the form
    written.  It may not read back exactly as written.
    No single matrix defines whether a packet arriving on a port
    is forwarded to its destination.  Various destination address,
    source address, protocol, and default filtering specifications
    are combined to determine whether the packet is forwarded.
    If the ebrNportMatrixFppnValue is changed, all filters using 
    it are immediately updated.
    Managers may not specify both ebrNportMatrixValue and
    ebrNportMatrixFppnValue at the same time to set an entry
    in this table.
1   ebrNportSapNameTable
2   ebrNportSapNameEntry
    
    INDEX { ebrNportSapName }
    ::= { ebrNportSapNameTable 1 }
    EbrNportSapNameEntry ::=
    SEQUENCE {
    ebrNportSapName  DisplayString,
    ebrNportSapNameSap OCTET STRING,
    ebrNportSapMatrixName DisplayString,
    ebrNportSapNameDisp INTEGER,
    ebrNportSapNameStatus INTEGER
    }
    ebrNportSapName OBJECT-TYPE
    SYNTAX DisplayString (SIZE (32))
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION "This name for a portion of a filter is whatever the use
1   ebrNportSapNameSap
    The one-byte SAP.
    Changes to ebrNportSapProtoTable for this SAP are denied while
    filtering of the SAP is specified by reference to a named
    matrix using this table.
1   ebrNportSapMatrixName
    
    ::= { ebrNportSapNameEntry 3 }
    ebrNportSapNameDisp OBJECT-TYPE
    SYNTAX INTEGER {
    filter(1),
    alwaysFilter(2),
    alwaysForward(3)
    }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
    
1   ebrNportSapNameStatus
    
    This object specifies the permanence of the associated filter
    matrix, and also provides a means to delete a filter matrix.
    Writing invalid(1) to the object removes the filter.
    Writing permanent(2) value to the object indicates the filter is
    preserved across a bridge reset.
    
1   ebrNportSnapNameTable
2   ebrNportSnapNameEntry
    
    INDEX { ebrNportSnapName }
    ::= { ebrNportSnapNameTable 1 }
    EbrNportSnapNameEntry ::=
    SEQUENCE {
    ebrNportSnapName DisplayString,
    ebrNportSnapNameSnap OCTET STRING,
    ebrNportSnapMatrixName DisplayString,
    ebrNportSnapNameDisp INTEGER,
    ebrNportSnapNameStatus INTEGER
    }
    ebrNportSnapName OBJECT-TYPE
    SYNTAX DisplayString (SIZE (32))
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION "This name for a portion of a filter is whatever the use
1   ebrNportSnapNameSnap
    The five-byte PID.
    Changes to ebrNportSnapProtoTable for this protocol are denied
    while filtering of the protocol is specified by reference to a
    named matrix using this table.
1   ebrNportSnapMatrixName
    
    ::= { ebrNportSnapNameEntry 3 }
    ebrNportSnapNameDisp OBJECT-TYPE
    SYNTAX INTEGER {
    filter(1),
    alwaysFilter(2),
    alwaysForward(3)
    }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
    
1   ebrNportSnapNameStatus
    
    This object specifies the permanence of the associated filter
    matrix, and also provides a means to delete a filter matrix.
    Writing invalid(1) to the object removes the filter.
    Writing permanent(2) value to the object indicates the filter is
    preserved across a bridge reset.
    
1   ebrNportDANameTable
2   ebrNportDANameEntry
    
    INDEX { ebrNportDAName }
    ::= { ebrNportDANameTable 1 }
    EbrNportDANameEntry ::=
    SEQUENCE {
    ebrNportDAName  DisplayString,
    ebrNportDANameDA OCTET STRING,
    ebrNportDAMatrixName DisplayString,
    ebrNportDANameDisp INTEGER,
    ebrNportDANameStatus INTEGER
    }
    ebrNportDAName OBJECT-TYPE
    SYNTAX DisplayString (SIZE (32))
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION 
1   ebrNportDANameDA
    Changes to ebrNportStaticDATable for this address are denied
    while filtering of the address is specified by reference to a
    named matrix using this table.
1   ebrNportDAMatrixName
    
    ::= { ebrNportDANameEntry 3 }
    ebrNportDANameDisp OBJECT-TYPE
    SYNTAX INTEGER {
    filter(1),
    alwaysFilter(2),
    alwaysForward(3)
    }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
    
1   ebrNportDANameStatus
    
    other(1) - This entry is currently in use, but the 
    conditions under which it will remain so are different
    from each of the following values.  Like other uses
    of 'other' in MIBs, this value may not be assigned to
    the object.
    invalid(2) - Writing this value to the object removes the entry
    permanent(3) - Writing this value to the object indicates that
    the entry is preserved across a bridge reset.
    deleteOnReset(4) - Writing this value removes the permanent
    entry characteristic.  The entry is deleted upon the
    next bridge reset (SCP or GIGAswitch failure).
    Writing deleteOnReset is not supported.  SNMP does not
    currently model viewing the non-volatile and volatile
    data structures independently, which can lead to
    unexpectedly having no filter if a reset occurs while
    temporarily trying a change to an existing filter.
    Writes of this value will result in a bad value return
    status.  It is present for consistency with the Bridge
    MIB (RFC 1286), which describes address filters.
    deleteOnTimeout(5) - Writing this value removes the permanent
    entry characteristic.  Since the timers used for aging
    information within the bridge are hidden from the user,
    the change may in fact take place immediately.
    Writing deleteOnTimeout is not supported.  SNMP does not
    currently model viewing the non-volatile and volatile
    data structures independently, which can lead to
    unexpectedly having no filter if a reset occurs while
    temporarily trying a change to an existing filter.
    Writes of this value will result in a bad value return
    status.  It is present for consistency with the Bridge
    MIB (RFC 1286), which describes address filters.
    
1   ebrNportSANameTable
2   ebrNportSANameEntry
    
    INDEX { ebrNportSAName }
    ::= { ebrNportSANameTable 1 }
    EbrNportSANameEntry ::=
    SEQUENCE {
    ebrNportSAName  DisplayString,
    ebrNportSANameSA OCTET STRING,
    ebrNportSAMatrixName DisplayString,
    ebrNportSANameDisp INTEGER,
    ebrNportSANameStatus INTEGER
    }
    ebrNportSAName OBJECT-TYPE
    SYNTAX DisplayString (SIZE (32))
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION 
1   ebrNportSANameSA
    The six-byte source address.
    Changes to ebrNportStaticSATable for this address are denied
    while filtering of the address is specified by reference to a
    named matrix using this table.
1   ebrNportSAMatrixName
    
    ::= { ebrNportSANameEntry 3 }
    ebrNportSANameDisp OBJECT-TYPE
    SYNTAX INTEGER {
    portMask(1),
    alwaysFilter(2),
    alwaysForward(3),
    lockdown(4),
    lockdownportmask(5),
    filter(6)
    }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
    "This object specifies how to interpret the ebrNportPortNum an
1   ebrNportSANameStatus
    
    other(1) - This entry is currently in use, but the 
    conditions under which it will remain so are different
    from each of the following values.  Like other uses
    of 'other' in MIBs, this value may not be assigned to
    the object.
    invalid(2) - Writing this value to the object removes the entry
    permanent(3) - Writing this value to the object indicates that
    the entry is preserved across a bridge reset.
    deleteOnReset(4) - Writing this value removes the permanent
    entry characteristic.  The entry is deleted upon the
    next bridge reset (SCP or GIGAswitch failure).
    Writing deleteOnReset is not supported.  SNMP does not
    currently model viewing the non-volatile and volatile
    data structures independently, which can lead to
    unexpectedly having no filter if a reset occurs while
    temporarily trying a change to an existing filter.
    Writes of this value will result in a bad value return
    status.  It is present for consistency with the Bridge
    MIB (RFC 1286), which describes address filters.
    deleteOnTimeout(5) - Writing this value removes the permanent
    entry characteristic.  Since the timers used for aging
    information within the bridge are hidden from the user,
    the change may in fact take place immediately.
    Writing deleteOnTimeout is not supported.  SNMP does not
    currently model viewing the non-volatile and volatile
    data structures independently, which can lead to
    unexpectedly having no filter if a reset occurs while
    temporarily trying a change to an existing filter.
    Writes of this value will result in a bad value return
    status.  It is present for consistency with the Bridge
    MIB (RFC 1286), which describes address filters.
    
1   ebrNportMatrixNameRowTable
2   ebrNportMatrixNameRowEntry
2   ebrNportmatrixName
2   ebrNportMatrixReceivePort
    A bridge port number.  Zero is treated as in other tables,
    and is short-hand for all rows not previously mentioned.
1   ebrNportMatrixAllowedToGoTo
    Just like all the other GoTos.  The set of ports to which
    frames received from a specific port are allowed to be
    forwarded.
    Each octet of this object specifies a set of eight ports,
    with the first octet specifying ports 1 through 8,
    the second octet specifying port 9 through 16 etc.
    Within each octet, the most significant bit represents
    the lowest numbered port, and the least significant
    bit represents the highest numbered port.  If a
    bit has a value of '1', then the corresponding port
    is included in the set of ports; the port is not
    included if its bit has a value of '0'.
    If the ebrNportMatrixAllowedToGoTo is changed, all filters
    using it are immediately updated.
1   ebrNportMatrixNameRowStatus
1   ebrNportMatrixFppnRowTable
2   ebrNportMatrixFppnRowEntry
2   ebrNportmatrixname
2   ebrNportMatrixFppnReceivePort
    Front panel port numbers are of the form (slot.connector),
    where slot is the slot number the module is plugged into,
    and connector is the connector number specified on the
    front of the card.
    To avoid the syntactic ambiguity, the slot number must take
    two characters.  For example, front panel port number 3.1 
    must be typed by 03.1.   0.0 is treated as in other tables, 
    and is short-hand for all rows not previously mentioned.
1   ebrNportMatrixFppnAllowedToGoTo
    Just like all the other GoTos.  The set of ports to which
    frames received from a specific port are allowed to be
    forwarded.
    Each octet of this object specifies a set of eight ports,
    with the first octet specifying ports 1 through 8,
    the second octet specifying port 9 through 16 etc.
    Within each octet, the most significant bit represents
    the lowest numbered port, and the least significant
    bit represents the highest numbered port.  If a
    bit has a value of '1', then the corresponding port
    is included in the set of ports; the port is not
    included if its bit has a value of '0'.
    If the ebrNportMatrixFppnAllowedToGoTo is changed, all filters
    using it are immediately updated.
1   ebrNportMatrixFppnRowStatus
1   ebrNportDefaultMatrixValue
    A matrix is expressed using a shorthand that says what
    input ports can talk to what output ports.
    An examples of a specification is:
    11:1; 1:3-5; 2:0,3; 4-7,9:4-7,9; 10:
    Semicolons separate expressions.  Within each expression,
    the colon has a left hand side and a right hand side.  Bridge
    ports on the left hand side can send packets to bridge ports
    on the right hand side.  Commas separate items in a list of
    bridge ports.  Hyphens are short-hand for specifying a range
    of numbers.  If there is no right hand side, the bridge ports
    on the left cannot send packets to any bridge port (unless the
    matrix is combined with some some other matrix in a filter
    specification, or unless the filter is overridden).
    Bridge port numbers are specified in decimal.
    A matrix will read back in a form equivalent to the form
    written.  It may not read back exactly as written.
    No single matrix defines whether a packet arriving on a port
    is forwarded to its destination.  Various destination address,
    source address, protocol, and default filtering specifications
    are combined to determine whether the packet is forwarded.
    Unspecified rows are set to one's, which means that the
    corresponding input ports can communicate with every 
    output port.
    
1   ebrNportDefaultMatrixFppnValue
    A matrix is expressed using a shorthand that says what
    input front panel ports can talk to what output front
    panel ports.
    An examples of a specification is:
    1.1,2.1-14.2:1.1-14.2; 2.2:5.3,6.4; 10.3:;
    Semicolons separate expressions.  Within each expression,
    the colon has a left hand side and a right hand side.  Front
    panel ports on the left hand side can send packets to front
    panel ports on the right hand side.  Commas separate items in
    a list of front panel ports.  Hyphens are short-hand for
    specifying a range of numbers.  If there is no right hand side,
    the front panel ports on the left cannot send packets to any
    front panel port (unless the matrix is combined with some some
    other matrix in a filter specification, or unless the filter is
    overridden).
    Front panel port numbers are of the form (slot.connector),
    where slot is the slot number the module is plugged into,
    and connector is the connector number specified on the
    front of the card.
    A matrix will read back in a form equivalent to the form
    written.  It may not read back exactly as written.
    No single matrix defines whether a packet arriving on a port
    is forwarded to its destination.  Various destination address,
    source address, protocol, and default filtering specifications
    are combined to determine whether the packet is forwarded.
    Unspecified rows are set to one's, which means that the
    corresponding input ports can communicate with every 
    output port.
    
1   ebrNportNamedDefaultMatrix
    When a matrix name is written to this object, the default
    matrix is set to the matrix if and only if the matrix
    exists.
    Unspecified rows in the matrix are set to one's, which means 
    that the corresponding input ports can communicate with every 
    output port.
    
1   ebrNportDefaultMatrixRowTable
2   ebrNportDefaultMatrixRowEntry
2   ebrNportDefaultMatrixReceivePort
    A bridge port number.
1   ebrNportDefaultMatrixAllowedToGoTo
    The set of ports to which frames received from a specific 
    port are allowed to be forwarded by default.
    Each octet of this object specifies a set of eight ports,
    with the first octet specifying ports 1 through 8,
    the second octet specifying port 9 through 16 etc.
    Within each octet, the most significant bit represents
    the lowest numbered port, and the least significant
    bit represents the highest numbered port.  If a
    bit has a value of '1', then the corresponding port
    is included in the set of ports; the port is not
    included if its bit has a value of '0'.
    
1   ebrNportManualFilter
    The list of bridge ports in manual mode is listed.
    Manual mode means that the bridge purges the learned entries
    for that port from its forwarding database, stops its learning
    process on that port, and forwards to that port only frames
    with destination and source addresses that have been specified
    via management.
    A comma-separated list of bridge ports, with hyphens used to
    abbreviate ranges, is supported.  The bridge port numbers are
    in decimal.
    
1   ebrNportFppnManualFilter
    The list of front panel ports in manual mode is listed.
    Manual mode means that the bridge purges the learned entries
    for that port from its forwarding database, stops its learning
    process on that port, and forwards to that port only frames
    with destination and source addresses that have been specified
    via management.
    A comma-separated list of front panel ports, with hyphens used 
    to abbreviate ranges, is supported.  
    Front panel port numbers are of the form (slot.connector),
    where slot is the slot number the module is plugged into,
    and connector is the connector number specified on the
    front of the card.
    
1   ebrNportStaticDATable
    This table contains management-specified destination address
    filtering information about unicast and multicast addresses
    for N-port bridges.  In RFC 1286 lingo, static objects are
    those objects which have been specified by network management.
2   ebrNportStaticDAEntry
    Information about a specific MAC address for which the bridge
    has some management-specified forwarding and/or filtering
    information.
2   ebrNportDAAddress
    The destination MAC Address in a frame to
    which this entry's filtering information applies.
2   ebrNportDAReceivePort
    The port from which a frame must be received to use
    the corresponding ebrNportDAAllowedToGoTo field.
    A value of zero indicates that this entry applies on all ports
    of the bridge for which there is no other applicable entry.
2   ebrNportDAAllowedToGoTo
    The set of ports to which frames received from
    a specific port and destined to the address specified by
    ebrNportDAAddress are allowed to be forwarded.
    Each octet of this object specifies a set of eight ports,
    with the first octet specifying ports 1 through 8,
    the second octet specifying port 9 through 16 etc.
    Within each octet, the most significant bit represents
    the lowest numbered port, and the least significant
    bit represents the highest numbered port.  If a
    bit has a value of '1', then the corresponding port
    is included in the set of ports; the port is not
    included if its bit has a value of '0'.
    Filter matrix rows can be initialized or overwritten, but not
    deleted.  Only whole matrices are deleted via the
    characteristics table.  To produce the equivalent of row
    deletion, set the GoTo according to the following table:
    Disp    GoTo
    filter/portMask   0xFFFFFFFFF0
    alwaysFilter   0xFFFFFFFFF0
    alwaysForward   0
    
1   ebrNportStaticDAFilterCharacteristicsTable
    A table that contains information about how static destination
    address filters (for unicast and multicast addresses) are used
    within N-port bridges. Static objects are those objects which
    have been specified by network management.
2   ebrNportStaticDAFilterCharacteristicsEntry
    Information about a specific static MAC destination address
    filter's usage within N-port bridges.
2   ebrNportDestinationAddress
    The destination MAC Address in a frame to which this entry's
    information applies.  The value of this object is the same
    as ebrNportDAAddress.
2   ebrNportDADisp
    This object specifies how to interpret the ebrNportPortNum and
    ebrNportDAAllowedToGoTo objects.
    filter(1) : The filtering for this address is specified by
    the filter matrix.
    alwaysFilter(2) : Frames destined to address are filtered
    regardless of any other alwaysForward dispositions
    based on the frame's source address or protocol type.
    The filtering information is specified by the filter
    matrix.
    alwaysForward(3) : Frames destined to address are always
    forwarded to ebrNportPortNum if specified.
    The filter matrix is used to specify ports to
    which frames may be sent. In both cases, this
    disposition overrides filters based on the frame's
    source address or protocol type, unless either of those
    filters has an alwaysFilter disposition.
    
2   ebrNportDAStatus
    
    other(1) - This entry is currently in use, but the 
    conditions under which it will remain so are different
    from each of the following values.  Like other uses
    of 'other' in MIBs, this value may not be assigned to
    the object.
    invalid(2) - Writing this value to the object removes the entry
    permanent(3) - Writing this value to the object indicates that
    the entry is preserved across a bridge reset.
    deleteOnReset(4) - Writing this value removes the permanent
    entry characteristic.  The entry is deleted upon the
    next bridge reset (SCP or GIGAswitch failure).
    Writing deleteOnReset is not supported.  SNMP does not
    currently model viewing the non-volatile and volatile
    data structures independently, which can lead to
    unexpectedly having no filter if a reset occurs while
    temporarily trying a change to an existing filter.
    Writes of this value will result in a bad value return
    status.  It is present for consistency with the Bridge
    MIB (RFC 1286), which describes address filters.
    deleteOnTimeout(5) - Writing this value removes the permanent
    entry characteristic.  Since the timers used for aging
    information within the bridge are hidden from the user,
    the change may in fact take place immediately.
    Writing deleteOnTimeout is not supported.  SNMP does not
    currently model viewing the non-volatile and volatile
    data structures independently, which can lead to
    unexpectedly having no filter if a reset occurs while
    temporarily trying a change to an existing filter.
    Writes of this value will result in a bad value return
    status.  It is present for consistency with the Bridge
    MIB (RFC 1286), which describes address filters.
    
1   ebrNportDASvcTable
    A table that contains resource information about unicast and
    multicast destination addresses for N-port bridges.
2   ebrNportDASvcEntry
    Resource information about a specific MAC destination address
    for N-port bridges.
2   ebrNportSvcAddress
    The destination MAC Address in a frame to which this entry's
    resource information applies.
2   ebrNportSvc
    The service class used to allocate resources and implement
    service policy within the bridge. The service class
    associated with a frame is a function of either the frame's
    destination address or the frame's protocol. The default
    value for this field is 0. This value is used to assign the
    single path service class in the absence of a service class
    associated with the frame's protocol.  There are 16 possible
    service classes, 0-15. The ebrNportSvc allows 32 values to
    be specified. The specification of a value greater than 15
    is used to connote  that the service class (ebrNportSvc-16),
    is to be associated with the frame and that this service
    class has precedence over a service class associated with
    a frame's protocol.
    Service classes 1-11 are reserved for internal or future use.
    
2   ebrNportSvcStatus
    
    This object specifies the permanence of the specified service
    class usage, and also provides a means to delete an entry.
    Writing invalid(1) to the object removes the entry.
    Writing permanent(2) value to the object indicates the entry is
    preserved across a bridge reset.
    
1   ebrNportPortNumTable
    A table that contains static (i.e., configured by
    network management) information about the bridge
    port on which unicast or multicast addresses reside
    on N-port bridges.
2   ebrNportPortNumEntry
    Information about a specific MAC address.
2   ebrNportPortNumAddress
    The MAC Address to which this entry's information applies.
2   ebrNportPortNum
    The Port Number to which this address will be
    translated (to which frames destined for the address
    will be forwarded).  There are some filtering nuances
    for addresses with specified port numbers which are
    determined by the source address and destination address
    filter disposition characteristics.
    If zero, no port number is specified.
    This value is a giganet destination address instead of a
    bridge port number if it is greater than 127.
2   ebrNportPortNumStatus
    
    This object specifies the permanence of the specified
    information, and also provides a means to delete an entry.
    Writing invalid(1) to the object removes the entry.
    Writing permanent(2) value to the object indicates the entry is
    preserved across a bridge reset.
    
2   ebrNportFppnPortNum
    The Front Panel Port Number to which this address will be
    translated (to which frames destined for the address
    will be forwarded).  There are some filtering nuances
    for addresses with specified front panel port numbers 
    which are determined by the source address and destination 
    address filter disposition characteristics.
    Managers may not specify both ebrNportPortNum and
    ebrNportFppnPortNum at the same time to set an entry 
    in this table.
1   ebrNportStaticSATable
    A table that contains static source address filtering
    information about unicast and multicast addresses for
    N-port bridges. Static objects are those objects which
    have been specified by network management.
2   ebrNportStaticSAEntry
    Information about a specific MAC address for which the
    bridge has some static forwarding and/or filtering
    information.
2   ebrNportSAAddress
    The source MAC Address in a frame to which this entry's
    filtering information applies.
2   ebrNportSAReceivePort
    The port from which a frame must be received to use
    the corresponding ebrNportSAAllowedToGoTo field.
    A value of zero indicates that this entry applies on all
    ports of the bridge for which there is no other applicable
    entry.
2   ebrNportSAAllowedToGoTo
    The set of ports to which frames received from
    a specific port and sourced from the address specified by
    ebrNportSAAddress are allowed to be forwarded.
    Each octet of this object specifies a set of eight ports,
    with the first octet specifying ports 1 through 8,
    the second octet specifying port 9 through 16 etc.
    Within each octet, the most significant bit represents
    the lowest numbered port, and the least significant
    bit represents the highest numbered port.  If a
    bit has a value of '1', then the corresponding port
    is included in the set of ports; the port is not
    included if its bit has a value of '0'.
    Filter matrix rows can be initialized or overwritten, but not
    deleted.  Only whole matrices are deleted via the
    characteristics table.  To produce the equivalent of row
    deletion, set the GoTo according to the following table:
    Disp    GoTo
    filter/portMask   0xFFFFFFFFF0
    alwaysFilter   0xFFFFFFFFF0
    alwaysForward   0
    
1   ebrNportStaticSAFilterCharacteristicsTable
    A table that contains information about how static source
    address filters (for unicast and multicast addresses) are
    used within N-port bridges.
2   ebrNportStaticSAFilterCharacteristicsEntry
    Static source address filter usage for N-port bridges.
2   ebrNportSourceAddress
    The source MAC Address in a frame to which this entry's
    information applies.  The value of this object is the
    same as ebrNportSAAddress.
2   ebrNportSADisp
    This object specifies how to interpret the ebrNportPortNum and
    and the ebrNportSAAllowedToGoTo objects.
    portMask(1) : The static filtering for this address
    is specified by the filter matrix.
    alwaysFilter(2) : Frames sourced from this address are
    filtered regardless of any other alwaysForward
    dispositions based on the frame's destination address
    or protocol type. The static filtering information is
    specified by the filter matrix.
    alwaysForward(3) : Frames sourced from this address are
    sent to ports specified in the filter matrix
    regardless of any DA or protocol filter with a
    disposition of filter. The alwaysForward disposition
    also overrides a forwarding disposition of filter
    in the default filter matrix object.
    Filters with a disposition of alwaysFilter are never
    superceded.
    lockdown (4) : Frames sourced from this address
    are ONLY forwarded if received on the same port as
    ebrNportPortNum.
    lockdownportmask (5) : Frames sourced from this address
    are ONLY forwarded if received on the same port as
    ebrNportPortNum AND if the frame is destined to a
    permitted port as specified by the filter matrix.
    filter(6) : The static filtering for this address
    is specified by the filter matrix.  portMask(1) is
    the different name with the same effect.
    
2   ebrNportSAStatus
    
    other(1) - This entry is currently in use, but the 
    conditions under which it will remain so are different
    from each of the following values.  Like other uses
    of 'other' in MIBs, this value may not be assigned to
    the object.
    invalid(2) - Writing this value to the object removes the entry
    permanent(3) - Writing this value to the object indicates that
    the entry is preserved across a bridge reset.
    deleteOnReset(4) - Writing this value removes the permanent
    entry characteristic.  The entry is deleted upon the
    next bridge reset (SCP or GIGAswitch failure).
    Writing deleteOnReset is not supported.  SNMP does not
    currently model viewing the non-volatile and volatile
    data structures independently, which can lead to
    unexpectedly having no filter if a reset occurs while
    temporarily trying a change to an existing filter.
    Writes of this value will result in a bad value return
    status.  It is present for consistency with the Bridge
    MIB (RFC 1286), which describes address filters.
    deleteOnTimeout(5) - Writing this value removes the permanent
    entry characteristic.  Since the timers used for aging
    information within the bridge are hidden from the user,
    the change may in fact take place immediately.
    Writing deleteOnTimeout is not supported.  SNMP does not
    currently model viewing the non-volatile and volatile
    data structures independently, which can lead to
    unexpectedly having no filter if a reset occurs while
    temporarily trying a change to an existing filter.
    Writes of this value will result in a bad value return
    status.  It is present for consistency with the Bridge
    MIB (RFC 1286), which describes address filters.
    
1   ebrNportSapProtoTable
    A table that contains filtering information about
    802.2 SAPs in the DSAP field for N-port bridges.
2   ebrNportSapProtoEntry
    A table that contains filtering information about
    802.2 SAPs in the DSAP field for N-port bridges.
2   ebrNportSapValue
    The 802.2 DSAP in a frame to which this entry's
    filtering information applies.
2   ebrNportSapReceivePort
    "The port from which a frame must be received to us
2   ebrNportSapAllowedToGoTo
    The set of ports to which frames received from
    a specific port and containing the DSAP in an 802
    frame specified by ebrNportSapValue are
    allowed to be forwarded.
    Each octet of this object specifies a set of eight ports,
    with the first octet specifying ports 1 through 8,
    the second octet specifying port 9 through 16 etc.
    Within each octet, the most significant bit represents
    the lowest numbered port, and the least significant
    bit represents the highest numbered port.  If a
    bit has a value of '1', then the corresponding port
    is included in the set of ports; the port is not
    included if its bit has a value of '0'.
    Filter matrix rows can be initialized or overwritten, but not
    deleted.  Only whole matrices are deleted via the
    characteristics table.  To produce the equivalent of row
    deletion, set the GoTo according to the following table:
    Disp    GoTo
    filter/portMask   0xFFFFFFFFF0
    alwaysFilter   0xFFFFFFFFF0
    alwaysForward   0
    
1   ebrNportSapSvcTable
    A table that contains resource information (e.g., queuing)
    about 802.2 SAPs in the DSAP field for N-port bridges.
2   ebrNportSapSvcEntry
    Resource information about an 802.2 SAP in the DSAP field
    for N-port bridges.
2   ebrNportSapSvcSapValue
    The 802.2 DSAP in a frame to which this entry's
    resource information applies.
2   ebrNportSapSvc
    The service class used to allocate resources and implement
    service policy within the bridge. The service class
    associated with a frame is a function of either the frame's
    destination address or the frame's protocol. The default
    value for this field is 0. This value is used to assign the
    single path service class  in the absence of an overriding
    service class associated with the frame's destination addr.
    There are 16 possible service classes, 0-15.
    Service classes 1-11 are reserved for internal or future use.
    
2   ebrNportSapSvcStatus
    
    This object specifies the permanence of the specified service
    class usage, and also provides a means to delete an entry.
    Writing invalid(1) to the object removes the entry.
    Writing permanent(2) value to the object indicates the entry is
    preserved across a bridge reset.
    
1   ebrNportSapFilterCharacteristicsTable
    A table that contains information about how 802.2 DSAP
    filters are used within N-port bridges.
2   ebrNportSapFilterCharacteristicsEntry
    802.2 DSAP filter usage for N-port bridges.
2   ebrNportSapFilterCharacteristicsSapValue
    The 802.2 DSAP in a frame to which this entry's
    information applies.  The value of this object is
    the same as ebrNportSapValue.
2   ebrNportSapDisp
    This object specifies how to interpret the
    ebrNportSapAllowedToGoTo values for the specified SAP.
    filter(1) : The filtering for this SAP is specified by the
    filter matrix.
    alwaysFilter(2) : Frames of this SAP (protocol) are
    filtered regardless of any other alwaysForward
    dispositions based on the frame's address.
    The filtering information is specified by the
    filter matrix.
    alwaysForward(3) : Frames for this SAP (protocol) are
    sent to ports specified in the filter matrix
    regardless of any address filter with a
    disposition of filter. The alwaysForward disposition
    also overrides a forwarding disposition of filter
    in the default filter matrix object.
    Filters with a disposition of alwaysFilter are never
    superceded.
    
2   ebrNportSapStatus
    
    This object specifies the permanence of the associated filter
    matrix, and also provides a means to delete a filter matrix.
    Writing invalid(1) to the object removes the filter.
    Writing permanent(2) value to the object indicates the filter is
    preserved across a bridge reset.
    
1   ebrNportSnapProtoTable
    A table that contains filtering information about
    5-byte SNAP Protocol IDs (PIDs) for N-port bridges.
2   ebrNportSnapProtoEntry
    A table that contains filtering information about
    5-byte SNAP Protocol IDs (PIDs) for N-port bridges.
2   ebrNportSnapValue
    The SNAP Protocol ID (PID) in an 802 frame to which this
    entry's filtering information applies.
2   ebrNportSnapReceivePort
    "The port from which a frame must be received to us
2   ebrNportSnapAllowedToGoTo
    The set of ports to which frames received from
    a specific port and containing the SNAP PID in an
    802 frame specified by ebrNportSnapValue are
    allowed to be forwarded.
    Each octet of this object specifies a set of eight ports,
    with the first octet specifying ports 1 through 8,
    the second octet specifying port 9 through 16 etc.
    Within each octet, the most significant bit represents
    the lowest numbered port, and the least significant
    bit represents the highest numbered port.  If a
    bit has a value of '1', then the corresponding port
    is included in the set of ports; the port is not
    included if its bit has a value of '0'.
    Filter matrix rows can be initialized or overwritten, but not
    deleted.  Only whole matrices are deleted via the
    characteristics table.  To produce the equivalent of row
    deletion, set the GoTo according to the following table:
    Disp    GoTo
    filter/portMask   0xFFFFFFFFF0
    alwaysFilter   0xFFFFFFFFF0
    alwaysForward   0
    
1   ebrNportSnapSvcTable
    A table that contains resource information (e.g., queuing)
    about 5-byte SNAP Protocol IDs (PIDs) for N-port bridges.
2   ebrNportSnapSvcEntry
    Resource information about a 5-byte SNAP Protocol ID (PID)
    for N-port bridges.
2   ebrNportSnapSvcSnapValue
    The SNAP Protocol ID (PID) in a frame to which this entry's
    resource information applies.
2   ebrNportSnapSvc
    The service class used to allocate resources and implement
    service policy within the bridge. The service class
    associated with a frame is a function of either the frame's
    destination address or the frame's protocol. The default
    value for this field is 0. This value is used to assign the
    single path service class  in the absence of an overriding
    service class associated with the frame's destination addr.
    There are 16 possible service classes, 0-15.
    Service classes 1-11 are reserved for internal or future use.
    
2   ebrNportSnapSvcStatus
    
    This object specifies the permanence of the specified service
    class usage, and also provides a means to delete an entry.
    Writing invalid(1) to the object removes the entry.
    Writing permanent(2) value to the object indicates the entry is
    preserved across a bridge reset.
    
1   ebrNportSnapFilterCharacteristicsTable
    A table that contains information about how SNAP Protocol ID
    (PID) filters are used within N-port bridges.
2   ebrNportSnapFilterCharacteristicsEntry
    802.2 SNAP Protocol ID (PID) filter usage for N-port bridges.
2   ebrNportSnapFilterCharacteristicsSnapValue
    The SNAP Protocol ID (PID) in a frame to which this entry's
    information applies.  The value of this object is the same as
    ebrNportSnapValue.
2   ebrNportSnapDisp
    This object specifies how to interpret the
    ebrNportSnapAllowedToGoTo values for the specified SNAP PID.
    filter(1) : The filtering for this Protocol ID
    is specified by the filter matrix.
    alwaysFilter(2) : Frames of this Protocol ID are
    filtered regardless of any other alwaysForward
    dispositions based on the frame's address.
    The filtering information is specified by the
    filter matrix.
    alwaysForward(3) : Frames for this Protocol ID are
    sent to ports specified in the filter matrix
    regardless of any address filter with a
    disposition of filter. The alwaysForward disposition
    also overrides a forwarding disposition of filter
    in the default filter matrix object.
    Filters with a disposition of alwaysFilter are never
    superceded.
    
2   ebrNportSnapStatus
    
    This object specifies the permanence of the associated filter
    matrix, and also provides a means to delete a filter matrix.
    Writing invalid(1) to the object removes the filter.
    Writing permanent(2) value to the object indicates the filter is
    preserved across a bridge reset.
    
1   ebrNportSwTable
    This table describes the default filter matrix.
2   ebrNportSwEntry
    The entry describes a row of the default filter matrix.
2   ebrNportSwReceivePort
    The bridge port on which a frame must be received to use
    the corresponding ebrNportSwAllowedToGoTo field.
    A value of zero indicates that this entry applies on all ports
    of the bridge for which there is no other management-specified
    entry.
2   ebrNportSwAllowedToGoTo
    This object specifies the default forwarding disposition
    after all DA, SA, and protocol filters have been applied.
    For those cases where no filter applies to the frame, the
    forwarding disposition for the frames received on the
    ebrNportSwReceivePort interface and sent to one or all of the
    bridge's interfaces is determined by the
    ebrNportSwAllowedToGoTo object.
    Each octet of this object specifies a set of eight ports,
    with the first octet specifying ports 1 through 8,
    the second octet specifying port 9 through 16 etc.
    Within each octet, the most significant bit represents
    the lowest numbered port, and the least significant
    bit represents the highest numbered port.  If a
    bit has a value of '1', then the corresponding port
    is included in the set of ports; the port is not
    included if its bit has a value of '0'.
    
1   ebrNportSwManualFilter
    A switch that controls address filtering.  Specifying a
    one in a bit position says that the port is in manual
    mode.
    Each octet of this object specifies a set of eight ports,
    with the first octet specifying ports 1 through 8,
    the second octet specifying port 9 through 16 etc.
    Within each octet, the most significant bit represents
    the lowest numbered port, and the least significant
    bit represents the highest numbered port.  If a
    bit has a value of '1', then the corresponding port
    is included in the set of ports; the port is not
    included if its bit has a value of '0'.
    Manual mode means that the bridge purges the learned entries
    for that port from its forwarding database, stops its learning
    process on that port, and forwards to that port only frames
    with destination and source addresses that have been specified
    via management.
1   cutThroughTable
    This table controls the enabling of some hardware performance
    enhancements that avoid store-and-forward delays during packet
    forwarding, whenever possible.
2   cutThroughEntry
    Information about the enabling of some hardware performance
    enhancements that avoid store-and-forward delays for a specific
    bridge port.
2   cutThroughBridgePort
    The dot1dBasePort bridge port number for this table entry.
2   cutThroughInbound
    If true, some hardware performance enhancements are enabled
    to avoid store-and-forward delays when packets enter the
    GIGAswitch.
    If false, the whole packet is buffered on the line card at
    which the packet enters the GIGAswitch before it is sent
    to the line card at which the packet leaves the GIGAswitch.
    Cut-through is normally enabled.
2   cutThroughOutbound
    If true, some hardware performance enhancements are enabled
    to avoid store-and-forward delays when packets leave the
    GIGAswitch.
    If false, the whole packet is buffered on the line card at
    which the packet leaves the GIGAswitch before it is sent
    out of the GIGAswitch.
    Cut-through is normally enabled.
1   cutThroughFppnTable
    This table controls the enabling of some hardware performance
    enhancements that avoid store-and-forward delays during packet
    forwarding, whenever possible.
2   cutThroughFppnEntry
    Information about the enabling of some hardware performance
    enhancements that avoid store-and-forward delays for a specific
    front panel port.
2   cutThroughFppnPort
    The front panel port number for this table entry.
    Front panel port numbers are of the form (slot.connector),
    where slot is the slot number the module is plugged into,
    and connector is the connector number specified on the
    front of the card.
    
2   cutThroughFppnInbound
    If true, some hardware performance enhancements are enabled
    to avoid store-and-forward delays when packets enter the
    GIGAswitch.
    If false, the whole packet is buffered on the line card at
    which the packet enters the GIGAswitch before it is sent
    to the line card at which the packet leaves the GIGAswitch.
    Cut-through is normally enabled.
2   cutThroughFppnOutbound
    If true, some hardware performance enhancements are enabled
    to avoid store-and-forward delays when packets leave the
    GIGAswitch.
    If false, the whole packet is buffered on the line card at
    which the packet leaves the GIGAswitch before it is sent
    out of the GIGAswitch.
    Cut-through is normally enabled.
1   mgmtMemoryAvail
    The number of unused bytes of management 
    memory available on the clock card. The 
    management memory is used for storing 
    management parameters.
1   mgmtMemoryAction
    This object, when read, returns a value of other(1)
    unless it is in the middle of rewriting the management
    memory. At such times, it will return rewriting(3).
    The state will revert to other(1) when the action is
    completed.
    Setting this variable to rewrite(2) will cause the SCP
    to attempt to rewrite the management Memory on the 
    clock-card.  Attempts to set this variable to all other
    values result in an error.
    Rewriting the management memory gets rid of
    duplicate entries, and thus may increase the
    available space.  This action should be allowed
    to complete before intentionally removing power
    from the SCP or clock card.
    
1   pscStatus
    The status of the Power System Controller (PSC).
1   pscFwRev
    The firmware revision of the Power System Controller
    (PSC).
1   pscHwRev
    The hardware revision of the Power System Controller
    (PSC).
1   keyswitchPosition
    Indicates the position of the keyswitch. The
    keyswitch position determines the type of
    access allowed to network management and to
    out-of-band management.
    For SNMP access, secure means no SNMP access.
    Local means read-only SNMP access.  Other values
    allow read-write SNMP access.  All access is
    still  subject to the community string, IP address,
    and privileged port restrictions.
    
1   pscFwImageStatus
    The status of the PSC firmware image. If
    the value of this object is
    downloadRequired(2), the manager should
    download a new firmware image to the PSC.
    This can be done by using objects in the
    gigaUpgradeSoftware group.
1   pscBackplaneStatus
    Status of the GIGAswitch backplane.
1   cabinetTemperature
    The cabinet temperature.
1   temperatureWarning
    The value of this variable determines how
    the SCP responds to a condition of too high
    or too low cabinet temperature, or both both
    fans inoperative. If the value is heedWarning(1) 
    the system will be shut down when the temperature 
    goes outside the designed limits or both fans are 
    inoperative. If the value is ignoreWarning(2),
    the system will continue to operate when either
    of these conditions occur.
    Setting this variable to ignoreWarning(2) allows
    the manager to cause a system that is too hot or
    too cold to continue to run. This variable will 
    also allow both fans to be inoperative and still
    allow the system to continue to run. Managers 
    should note that doing so may be detrimental to 
    the equipment. 
    This object has a default value of heedWarning(1)."
1   rightPowerStatus
    The status of the right power unit.
1   rightPowerInputSource
    The input source of the right power unit.
    A value of ACline(1) is returned if the power supply
    is connected to an AC line.
    A value of DC48V(2) is returned if the power supply is
    connected to a 48 volt DC (telecommunications) line.
    A value of none(3) is returned if the power unit is not
    present or not powered on.
    See the batteryUsing object to see if the battery or
    this power source is being used.
    
1   rightPowerOutputPower
    Output power of right power unit, in watts.
1   leftPowerStatus
    The status of the left power unit.
1   leftPowerInputSource
    The input source of the left power unit.
    A value of ACline(1) is returned if the power supply
    is connected to an AC line.
    A value of DC48V(2) is returned if the power supply is
    connected to a 48 volt DC (telecommunications) line.
    A value of none(3) is returned if the power unit is not
    present or not powered on.
    See the batteryUsing object to see if the battery or
    this power source is being used.
    
1   leftPowerOutputPower
    Output power of left power unit, in watts.
1   slotNumber
    The number of slots in the box.
1   scpSlot
    Identifies the slot the Switch Control
    Processor (SCP) occupies. A value of 0 will 
    be returned if an SCP has not been chosen.
1   slotTable
    Describes the current configuration of the box.
2   slotEntry
    The description and status of the card
    plugged into the slot.
1   slotIndex
    The slot number. Varies from 1 to slotNumber.
1   slotCardStatus
    The status of the card. If the value is
    read as notPresent(1), then the entire entry 
    should be considered invalid.
    Writing a value of powerDown(2) will cause
    the SCP to power down the card. Writing a
    value of powerUp(3) will cause the SCP to
    power up the card.  Writing a value of
    powerDownThenUp(4) will cause the SCP to power
    cycle the line card.  Attempts to set any other
    values will result in a badValue error.
    The clock and crossbar cards cannot be powered
    up or down through this object.  They are fundamental
    to the GIGAswitch's operation.  Unpopulated slots
    are notPresent(1), and can not be powered up or
    down.
    
1   slotCardType
    The type of the Card.
1   slotCardHwRev
    The Hardware revision number of the card.
1   slotCardFwRev
    The Firmware revision number of the card.
1   fanSpeed
     The speed of the fans.
    Set this variable to maximum(1) for maximum
    cooling where noise does not matter. 
    Set this variable to normal(2) to cause 
    fan speeds to be under temperature control.
1   rightFanStatus
    The status of the right fan tray.
1   leftFanStatus
    The status of the left fan tray.
1   batteryStatus
    The status of the backup battery.
1   batteryUsing
    The source of power being used for the box.  The
    value batteryPower(2) indicates that the backup
    battery unit is being used to power the GIGAswitch.
    The external power line can be either AC or a
    48 volt DC telecommunications power line.
    
1   batteryCharge
    The charge-level of the backup battery.
    Meaningful only if the battery is present.
1   batteryTest
    Only the value test(3) can be written.  Writes of
    other values are erroneous.
    This shows the result of the last battery test
    performed.  Testing the battery is risky, since the
    GIGAswitch is temporarily switched to run off the
    battery, and if the battery-backup system is not
    working properly, the GIGAswitch fails and restarts.
    Meaningful only if the battery is present.
    
1   fppnTable
    A list of front panel port number to MIB-II interface
    number mappings.
2   fppnEntry
    Assigns the MIB-II interface ifIndex for a physical
    datalink (cable) connection to the box.
1   fppnSlotNumber
    The 1-based slot number of the module.
1   fppnPortOfThatSlot
    The 1-based media connection to the module.
1   fppnIfIndex
    The assigned MIB-II ifIndex.
1   fppnBridgePortNumber
    The assigned Bridge MIB dot1dBasePort.
1   mPortTable
    A list of mPort entries.
2   mPortEntry
    A collection of objects containing information
    for a given mPort MAC entity
1   mPortSMTIndex
    The value of the SMT index associated with this mPort MAC.
1   mPortMACIndex
    The value of the MAC index associated with this mPort MAC.
1   mPortEnable
    When true, this link will be enabled to operate
    in concentrator mode, i.e. mport.
1   floodUnknownUnicastRate
    The maximum bytes-per-second bandwidth of packets
    multicast because the destination address was not yet
    learned by the bridge.
1   floodMulticastRate
    The maximum bytes-per-second bandwidth of packets
    multicast because the destination address is a
    multicast address.
1   floodTable
    Detailed view of the bridge flooding process.
2   floodEntry
    Flooding state for a packet class and source.
1   floodQuotaQualifier
    The quota qualifier describes an incoming or outgoing
    port.  It is a linear index to the port starting from
    1.  If n is the quota qualifier for the first port of
    a two port line card, the quota qualifier for the
    second port is n + 1.  The clock card and the crossbar
    have zero port, so the index must be skipped over those
    slots.  This numbering scheme may be changed as we have
    four port line cards.
1   floodQuotaClass
    The quota class describes the type of packet.
    Four packet types are classified as follows:
    1 - Unknown Destination Packets,
    2 - Multicast Packets,
    3 - IS-IS Packets,
    4 - Bursty Control Packets
1   floodBytesSent
    
    This object is the count of bytes in flooded packets.
    It does not include filtered packets or packets
    discarded due to buffer limitations. Each packet is
    counted once, regardless of the number of outbound
    links to which it was flooded.
    
1   floodPacketsSent
    This object is the count of flooded packets.
    It does not include filtered packets or packets
    discarded due to buffer limitations. Each packet is
    counted once, regardless of the number of outbound
    links to which it was flooded.
    
1   floodGeezers
    
    This object is the count of packets that could not be
    flooded because they had remained in the SCP or in the
    inbound linecard too long.
    
1   floodLosers
    
    This object is the count of packets discarded by the
    SCP flooding software (at the interrupt level) due to
    insufficient buffering.
    
1   floodHogs
    
    This object is the count of packets for which buffer
    quota conversion to flooding software optimistic quotas
    failed.  This includes packets that were discarded as
    well as packets that were successfully flooded.
    
1   floodSinglePathDiscards
    
    This object is the count of packets discarded to
    prevent packet misordering.  Certain protocol types
    are considered single-path and may not be delivered out
    of order.  If the Destination Address for a packet
    having a single-path protocol type is learned while
    the packet is buffered by the flooding software,
    the packet must be discarded (since line cards would
    have been directly forwarding packets using the learned
    address while packets received earlier were buffered on
    the SCP).
    
1   floodPacketsFiltered
    
    This object is the count of packets discarded by the
    flooding software because user-configured filtering
    resulted in no allowed outbound transmit ports.
    
1   floodPacketsPurged
    
    This object is the count of packets discarded due to
    the incoming link leaving FORWARDING state while they
    were buffered by flooding software.
    
1   floodBytesPurged
    
    This object is the byte count in packets discarded due
    to the incoming link leaving FORWARDING state while
    they were buffered by flooding software.
    
1   floodLocalCopyPacketsDelivered
    
    This object is the count of multicast packets addressed
    to software modules in the SCP that have been
    successfully delivered to those modules.
    
1   floodLocalCopyPacketsDiscarded
    
    This object is the count of multicast packets addressed
    to software modules in the SCP that, because of buffer
    limitations, could not be delivered to those modules.
    
1   tftpDestination
1   mopDestination
1   transferFileName
1   transferAction
1   transferStatus
1   transferSize
1   copyToSlot
    The slot number of the card which is to be
    upgraded.
    The object may not be set until the last requested
    copy succeeds or fails.
1   copyType
    The type of the image.
    The object is set after a transfer succeeds or fails.
1   copyAction
    To initiate a software upgrade of a card, set
    this object.
    If copyToSlot is non-zero, and
    copyType has a value other than
    'none', and transferStatus has the value
    'success', a software upgrade of the card is
    attempted. 
    The handler double-checks that the slot requires
    software of the expected type, and provides
    demultiplexing when multiple images may be sent to
    the same slot.  The power system controller is updated
    by sending its image to the clock card slot.
    The object may not be set until the last requested
    transfer succeeds, and the last requested copy
    succeeds or fails.
    Reading this object always returns the value
    none(1).
1   copyStatus
1   deleteTransfer
    When read, this object indicates whether the result of
    a file transfer is still present.  The value exists
    indicates that the transferred file is present; the
    value notExist indicates that no file has been
    transferred or that it has been deleted.
    Writing the value exists is an error.  Writing the
    value notExist deletes the transferred file.
    The object may not be set until the last requested
    transfer succeeds or fails.  It may not be set while
    a copy is in progress, either.
1   arpTimeoutInSeconds
    The maximum amount of time an IP to LAN address
    translation will be used if it cannot be re-verified.
1   arpPeriodBetweenRequests
    The time, in seconds, between ARP requests that
    are used to verify or to discover an IP to LAN address 
    translation.
1   arpRequestRetries
    The number of times ARP requests are used to verify
    or to discover an IP to LAN address translation.
1   arpAgent
1   arpStatisticalTable
2   arpStatisticalEntry
2   arpStatisticalIfIndex
2   arpUnicastReceived
2   arpBroadcastReceived
1   arpRepliesTransmitted
1   arpFramesFlooded
1   arpFramesDiscarded
1   snmpDuplicateDiscardInterval
1   gigaStpPortTable
     A list of  gigaStp entries 
2   gigaStpPortEntry
1   gigaStpPortIfIndex
    The value of the interface associated with this
    spanning tree port.
1   gigaStpPortSpanningTreeEnable
    When true, this interface will be enabled to operate
    as part of the spanning tree.
1   ttSize
1   aglInterfaceConfTable
    
    This table contains the AGL specific interface 
    configuration parameters, one entry per ATM 
    interface port.
    
2   aglInterfaceConfEntry
    
    This list contains ATM interface configuration
    parameters and state variables.
    
1   aglInterfaceIndex
    
    The value of this object identifies the AGL port
    interface for which this entry contains management 
    information.
    
1   aglInterfacePhyType
    
    Indicates the type of physical interface used on the 
    ATM port. Two physical layer types are supported:
    1. STS3c/STM1
    2. DS3/E3
    The type is unknown if the port is not present or
    its physical layer type is not known.
    
1   aglInterfaceTrafficRateGranularity
    
    Indicates the granularity in cell/s for assigning
    peak, average and minimum guaranteed rates for 
    traffic shaped circuits on the AGL port. This value
    also represents the minimum rate in cells/s that can
    be assigned to a circuit. The rates subscribed to in 
    the aglVCConnectionTable will be set to a multiple
    of this rate.
    
1   aglInterfaceSonetTable
    
    This table contains the AGL specific interface 
    configuration parameters for the SONET/SDH physical
    layer.
    
2   aglInterfaceSonetEntry
    
    This list contains SONET/SDH interface configuration
    parameters and state variables.
    
1   aglInterfaceSonetIndex
    
    The value of this object identifies the AGL 
    port interface for which this entry contains
    management information and is the same as 
    aglInterfaceIndex.
    
1   aglInterfaceSonetMode
    
    Specifies whether the PHY operates in SONET STS-3c
    or SDH STM-1 mode. The following code points are 
    used:
    1       SONET STS-3c
    2       SDH STM-1
    
1   aglInterfaceSonetTiming
    
    Specifies whether the PHY operates in loop-timing
    or local-timing mode. In loop-timing, the recovered
    clock from the receive signal is used directly to 
    time transmit data. Hence, the PHY is synchronized 
    to the far-end transmitter. In local timing, transmit 
    data is timed from a local oscillator of frequency 
    155.52 MHz (20ppm). The following code points are 
    used:
    1       loop-timing
    2       local-timing
    
1   aglInterfaceDS3E3Table
    
    This table contains the AGL specific interface
    configuration parameters for the DS3/E3 physical
    layer.
    
2   aglInterfaceDS3E3Entry
    
    This list contains DS3/E3 interface configuration
    parameters and state variables.
    
1   aglInterfaceDS3E3Index
    
    The value of this object identifies the AGL
    port interface for which this entry contains
    management information and is the same as
    aglInterfaceIndex.
    
1   aglInterfaceDS3E3Mode
    
    Specifies whether the DS3/E3 PHY operates in low
    power mode for short distances or high power mode
    for longer distances. The following code points are
    used:
    1       low-power
    2       high-power
    
1   aglInterfaceDS3E3Plcp
    
    Specifies whether ATM cells may be mapped into
    the DS3 PLCP.  In the enabled mode, PLCP framing
    and timing is applied to each ATM cell.
    
1   aglVCConnectionTable
    
    This table contains AGL ATM VCC configuration 
    and performance parameters and state variables.
    Each entry represents a bidirectional traffic 
    flow.
    
2   aglVCConnectionTableEntry
    
    A bidirectional circuit.
    
1   aglVCConnectionPortA
    
    The value of this object identifies the AGL
    ATM port A of the VCC segment for FDDI-bridged
    and ATM-to-ATM circuit types.
    
1   aglVCConnectionPortAVpi
    
    The VPI value at port A for the bidirectional 
    circuit. The maximum VPI value cannot exceed 
    the number supported by the atmInterfaceMaxVpiBits 
    at AGL ATM port A. This value is used for both 
    transmit and receive VPIs 
    
1   aglVCConnectionPortAVci
    
    The VCI value at the port A for the
    bidirectional circuit. The VCI values from 0 
    to 31 are reserved.  The maximum VCI value
    cannot exceed the number supported by the 
    atmInterfaceMaxVciBits specified for the AGL 
    ATM port A. This value is used for both 
    transmit and receive VCIs 
    
1   aglVCConnectionPortB
    
    The value of this object identifies the AGL
    ATM port B of the VCC segment for ATM-to-ATM
    circuit types. For FDDI-bridged circuit types 
    this value should be zero. 
    
1   aglVCConnectionPortBVpi
    
    The VPI value at port B for the bidirectional 
    ATM-to-ATM circuit.  The maximum VPI value 
    cannot exceed the number supported by the 
    atmInterfaceMaxVpiBits at AGL ATM port B.
    This value is used for both transmit and receive 
    VPIs. For other circuit types this value should be 
    zero.
    
1   aglVCConnectionPortBVci
    
    The VCI value at the port B for the
    bidirectional ATM-to-ATM circuit. The VCI values 
    from 0 to 31 are reserved.  The maximum VCI value
    cannot exceed the number supported by the 
    atmInterfaceMaxVciBits specified for the AGL 
    ATM port B. This value is used for both transmit 
    and receive VCIs. For other circuit types this value 
    should be zero.
    
1   aglVCConnectionTableEntryStatus
    
    The status column used for creating, 
    and deleting bidirectional circuit 
    entries in the agl virtual channel 
    connection table.
    
1   aglVCConnectionTrafficType
    
    The value of this object identifies the circuit
    type and characteristics of a particular circuit.
    There are two types of connections supported:
    1. FDDI-bridged
    2. ATM-to-ATM
    An FDDI-bridged circuit carries all bridged FDDI
    traffic on AGL ATM port A. No information is required
    to be entered for Port B. Only one bridged FDDI 
    circuit per AGL ATM port is supported. The packet 
    format on this circuit is VC based multiplexed 
    bridged FDDI as per RFC 1483.
    An ATM-to-ATM circuit carries arbitrary packet types
    between circuits specified on Port A and Port B of
    the GIGAswitch. Multiple ATM-to-ATM circuits are 
    supported per AGL ATM port.
    
1   aglVCConnectionAALType
    
    The value of this object identifies the AAL type 
    that should be used on a particular circuit.
    
1   aglVCConnectionOperStatus
    
    This object indicates the operational status
    of the VCC, i.e., whether the managed VCC
    segment is up or down. In the down state,
    no cells can get across this VCC segment.
    The status is unknown if the OAM is disabled.
    
1   aglVCConnectionAdminStatus
    
    This object indicates the desired status
    of the VCC, i.e., whether the managed VCC
    segment is enabled or disabled. In the disabled
    state, no cells can be passed across this VCC
    segment.
    
1   aglVCConnectionTrafficShaperPeakRate
    
    The value of this object specifies the peak rate in
    cells/s that should be used on a particular circuit.
    The peak rate will be set to a multiple of the 
    aglInterfaceTrafficRateGranularity close to the
    user specified input.
    
1   aglVCConnectionTrafficShaperAvgRate
    
    The value of this object specifies the average 
    (sustained) rate in cells/s that should be used 
    on a particular circuit.  The average rate must be 
    less than or equal to the peak rate and it will be 
    set to a multiple of the aglInterfaceTrafficRate-
    Granularity close to the user specified input.
    "
1   aglVCConnectionTrafficShaperMinGuaranteedRate
    
    The value of this object specifies the minimum 
    guaranteed rate in cells/s that should be used 
    on a particular circuit.  For VBR traffic AGL 
    allows the possibility of overbooking link bandwidth 
    (up to 1200%) to achive statistical multiplexing. 
    This parameter specifies the minimum peak bandwidth 
    that you want to guarantee to the circuit. The 
    minimum guaranteed rate must be less than or equal 
    to the peak rate and it will be set to a multiple 
    of the aglInterfaceTrafficRateGranularity close
    to the user specified input.
    
1   aglVCConnectionTrafficShaperPriority
    
    The value of this object specifies the priority which 
    should be given to this circuit in assigning 
    opportunistic bandwidth that arises from AGL's 
    bandwidth overbooking policy.
    
1   aglInterfaceATMTable
    
    This table contains AGL ATM interface specific
    settable parameters.
    
2   aglInterfaceATMTableEntry
    
    The list of settable parameters.
    
1   aglInterfaceATMIndex
    
    The value of this object identifies the AGL port
    interface for which this entry contains management
    information and is the same as aglInterfaceIndex.
    
1   aglInterfaceATMScrambeStatus
    
    This object indicates the desired status
    of the cell scramble module.  In the enabled
    state, outgoing cells are scrambed and input
    cells are descrambled.
    
1   aglInterfaceATMOAMStatus
    
    This object indicates the desired status
    of the OAM module in the default circuit.  
    In the enabled state, normal OAM cells 
    are exchanged between the peers.
    
1   aglatmInterfaceNoTrafficEnforcement
    This identifies the no ATM traffic enforcement type.
1   aglatmInterfaceTrafficEnforcementType1
    This identifies the ATM traffic enforcement type is 1.
    For type 1 traffic enforcement, parameter 1
    specifies CLP=0+1 peak traffic.  Parameters 2, 3, 4
    and 5 are not used. The peak rate is measured
    in cells per second.
1   aglatmInterfaceTrafficEnforcementType2
    This identifies the ATM traffic enforcement type is 2.
    For type 2 traffic enforcement, parameter 1
    specifies CLP=0 peak traffic and parameter
    2 specifies CLP=0+1 peak traffic.  Parameters 3, 4,
    and 5 are not used. The peak rate is measured
    in cells per second.
1   aglatmInterfaceTrafficEnforcementType3
    This identifies the ATM traffic enforcement type is 3.
    For type 3 traffic enforcement, parameter 1
    specifies CLP=0+1 peak traffic, parameter
    2 specifies CLP=0 sustained rate, and parameter 3
    specifies CLP=0 maximum burst size.  Parameters 4
    and 5 are not used. The peak rate is measured
    in cells per second. The sustained rate is measured
    in cells per second and burst size is measured in cells.
1   aglatmInterfaceTrafficEnforcementType4
    This identifies the ATM traffic enforcement type is 4.
    For type 4 traffic enforcement, parameter 1
    specifies CLP=0 peak traffic, parameter
    2 specifies CLP=0+1 peak traffic, and parameter 3
    specifies tagging (e.g., a value 1 may be
    used to indicate tagging).  Parameters 4
    and 5 are not used. The peak rate is measured
    in cells per second.
1   aglatmInterfaceTrafficEnforcementType5
    This identifies the ATM traffic enforcement type is 5.
    For type 5 traffic enforcement, parameter 1
    specifies CLP=0+1 peak traffic, parameter
    2 specifies CLP=0 sustained rate, parameter 3
    specifies CLP=0 maximum burst size, and parameter
    4 specifies tagging (e.g., a value 1 may be
    used to indicate tagging).  Parameter
    5 is not used.
1   aglatmInterfaceTrafficEnforcementType6
    This identifies the ATM traffic enforcement type is 6.
    For type 6 traffic enforcement, parameter 1
    specifies CLP=0+1 peak traffic, parameter
    2 specifies CLP=0+1 sustained rate, and parameter 3
    specifies CLP=0+1 maximum burst size.
    Parameters 4 and 5 are not used.
1   aglatmInterfaceTrafficEnforcementType7
    This identifies the ATM traffic enforcement type is 7.
    For type 7 traffic enforcement, parameter 1
    specifies CLP=0+1 peak traffic and parameter
    2 specifies best effort traffic
    (e.g., a value 1 may be used to indicate
    best effort traffic).  Parameters 3, 4 and 5 are not used.
1   aglatmInterfaceConfTable
    This table contains ATM local interface configuration
    parameters and state variables, one
    entry per ATM interface port.
2   aglatmInterfaceConfEntry
    This list contains ATM interface configuration
    parameters and state variables.
2   aglatmInterfaceIndex
    The value of this object identifies the ATM port
    interface for which this entry contains
    management information.
2   aglatmInterfaceMaxVpcs
    The maximum number of VPCs supported at
    this ATM interface.
2   aglatmInterfaceMaxVccs
    The maximum number of VCCs supported at
    the ATM interface.
2   aglatmInterfaceConfVpcs
    The number of VPCs configured for use
    at this ATM interface.
2   aglatmInterfaceConfVccs
    The number of VCCs configured for use
    at the ATM interface.
2   aglatmInterfaceMaxActiveVpiBits
    The  maximum number of active VPI bits
    configured for use at the ATM interface.
2   aglatmInterfaceMaxActiveVciBits
    The maximum number of active VCI bits
    configured for use at this ATM interface.
2   aglatmInterfaceIlmiVpiVci
    The decimal value of the three octet VPI/VCI
    field that identifies the VCC supporting
    the ILMI at the ATM interface.
    If the value of this object is greater
    than 16777215 then the ILMI is not supported
    at the ATM interface.
    The default VPI/VCI values for ILMI
    are VPI=0 and VCI=16.
2   aglatmInterfaceSpecific
    This object points to the additional information
    specific to ATM interfaces.  For example, if
    Enterprise specific objects have been defined
    in addition to this MIB module, then the
    value of this object refers to that MIB
    defining these objects.  If the additional
    information is not present, then the value
    should be {0 0}.
1   aglatmInterfaceDs3PlcpTable
    This table contains ATM interface DS3 PLCP
    parameters and state variables, one entry per
    ATM interface port.
2   aglatmInterfaceDs3PlcpEntry
    This list contains DS3 PLCP parameters and
    state variables at the ATM interface.
2   aglatmInterfaceDs3PlcpIndex
    The value of this object identifies the ATM
    interface port for which this entry
    contains management information and is the
    same as the atmInterfaceIndex.
2   aglatmInterfaceDs3PlcpSEFSs
    A DS3 Severely Errored Framing Second (SEFS)
    is a count of one-second intervals
    containing one or more SEF event.
2   aglatmInterfaceDs3PlcpAlarmState
    This variable indicates if there is an
    alarm present for the DS3 PLCP.  The value
    receivedFarEndAlarm means that the DS3 PLCP
    has received an incoming Yellow
    Signal, the value incomingLOF means that
    the DS3 PLCP has declared a loss of frame (LOF)
    failure condition, and the value noAlarm
    means that there are no alarms present.
2   aglatmInterfaceDs3PlcpUASs
    The counter associated with the number of
    Unavailable Seconds encountered by the PLCP.
1   aglatmInterfaceSonetTCTable
    This table contains ATM interface SONET TC
    Sublayer parameters and state variables,
    one entry per ATM interface port.
2   aglatmInterfaceSonetTCEntry
    This list contains SONET TC Sublayer parameters
    and state variables at the ATM interface.
2   aglatmInterfaceSonetTCIndex
    The value of this object identifies the ATM
    interface port for which this entry
    contains management information and is
    the same as the atmInterfaceIndex.
2   aglatmInterfaceSonetTCOCDEvents
    The number of times the Out of Cell
    Delineation (OCD) events occur.  If seven
    consecutive ATM cells have Header Error
    Control (HEC) violations, an OCD event occurs.
    A high number of OCD events may indicate a problem
    with the SONET TC Sublayer.
2   aglatmInterfaceSonetTCAlarmState
    This variable indicates if there is an
    alarm present for the SONET TC Sublayer.  The value
    lcdFailure indicates that a Loss of
    Cell Delineation (LCD) failure state has been
    declared for the SONET TC Sublayer.
1   aglsonetMediumTable
    The SONET/SDH Medium table.
2   aglsonetMediumEntry
    An entry in the SONET/SDH Medium table.
2   aglsonetMediumIfIndex
    An index value that uniquely identifies a SONET/SDH
    Medium/Section/Line Interface.
2   aglsonetMediumType
    This variable identifies whether a SONET
    or a SDH signal is used across this interface.
2   aglsonetMediumTimeElapsed
    The number of seconds, including partial
    seconds, that have elapsed since the beginning of
    the current error-measurement period.
2   aglsonetMediumValidIntervals
    The number of previous intervals for which valid
    data has been stored.  A SONET device must support
    at least n intervals.
    The minimum value of n is 4.
    The default of n is 32.
    The maximum value of n is 96.
    The value of this object will be n unless
    the device was brought online within the last
    (nx15) minutes, in which case the value will be the
    number of complete 15 minute intervals the device has
    been online.
2   aglsonetMediumLineCoding
    This variable describes the line coding for
    this interface. The B3ZS and CMI are used for
    electrical SONET/SDH signals (STS-1 and STS-3).
    The Non-Return to Zero (NRZ) and the Return
    to Zero are used for optical SONET/SDH signals.
2   aglsonetMediumLineType
    This variable describes the line type for
    this interface. The line types are
    Short and Long Range
    Single Mode fiber or Multi-Mode fiber interfaces,
    and coax and UTP for electrical interfaces.  The
    value sonetOther should be used when the Line Type is
    not one of the listed values.
2   aglsonetMediumCircuitIdentifier
    This variable contains the transmission
    vendor's circuit identifier, for the
    purpose of facilitating troubleshooting.
1   aglsonetSectionCurrentTable
    The SONET/SDH Section Current table.
2   aglsonetSectionCurrentEntry
    An entry in the SONET/SDH Section Current table.
2   aglsonetSectionCurrentIfIndex
    The index value which uniquely identifies the
    SONET/SDH Medium/Section/Line Interface.
2   aglsonetSectionCurrentStatus
    This variable indicates the
    status of the interface.
    The sonetSectionStatus
    is a bit map represented
    as a sum, therefore,
    it can represent multiple defects
    simultaneously.
    The sonetSectionNoDefect should be
    set if and only if
    no other flag is set.
    The various bit positions are:
    1   sonetSectionNoDefect
    2   sonetSectionLOS
    4   sonetSectionLOF
2   aglsonetSectionCurrentESs
    The counter associated with the number of Errored
    Seconds encountered by a SONET/SDH
    Section in the current 15 minute interval.
2   aglsonetSectionCurrentSESs
    The counter associated with the number of
    Severely Errored Seconds
    encountered by a SONET/SDH Section in the current 15
    minute interval.
2   aglsonetSectionCurrentSEFSs
    The counter associated with the number of
    Severely Errored Framing Seconds
    encountered by a SONET/SDH Section in the current
    15 minute interval.
2   aglsonetSectionCurrentCVs
    The counter associated with the number of Coding
    Violations encountered by a
    SONET/SDH Section in the current 15 minute interval.
1   aglsonetLineCurrentTable
    The SONET/SDH Line Current table.
2   aglsonetLineCurrentEntry
    An entry in the SONET/SDH Line Current table.
2   aglsonetLineCurrentIfIndex
    The index value which uniquely identifies the
    SONET/SDH Medium/Line Interface.
2   aglsonetLineCurrentStatus
    This variable indicates the
    status of the interface.
    The sonetLineStatus
    is a bit map represented
    as a sum, therefore,
    it can represent multiple defects
    simultaneously.
    The sonetLineNoDefect should be
    set if and only if
    no other flag is set.
    The various bit positions are:
    1   sonetLineNoDefect
    2   sonetLineAIS
    4   sonetLineRDI
2   aglsonetLineCurrentESs
    The counter associated with the number of Errored
    Seconds encountered by a SONET/SDH
    Line in the current 15 minute interval.
2   aglsonetLineCurrentSESs
    The counter associated with the number of
    Severely Errored Seconds
    encountered by a SONET/SDH Line in the current 15
    minute
    interval.
2   aglsonetLineCurrentCVs
    The counter associated with the number of Coding
    Violations encountered by a
    SONET/SDH Line in the current 15 minute interval.
2   aglsonetLineCurrentUASs
    The counter associated with the number of
    Unavailable Seconds
    encountered by a SONET/SDH Line in the current 15
    minute
    interval.
1   aglsonetPathCurrentTable
    The SONET/SDH Path Current table.
2   aglsonetPathCurrentEntry
    An entry in the SONET/SDH Path Current table.
2   aglsonetPathCurrentIfIndex
    An index value that uniquely identifies a SONET/SDH
    Path Interface.
2   aglsonetPathCurrentWidth
    A value that indicates the type of the SONET/SDH
    Path.  For SONET, the assigned types are
    the STS-Nc SPEs, where N = 1, 3, 12, 24, and 48.
    STS-1 is equal to 51.84 Mbps.  For SDH, the assigned
    types are the STM-Nc VCs, where N = 1, 4, and 16.
2   aglsonetPathCurrentStatus
    This variable indicates the
    status of the interface.
    The sonetPathStatus
    is a bit map represented
    as a sum, therefore,
    it can represent multiple defects
    simultaneously.
    The sonetPathNoDefect should be
    set if and only if
    no other flag is set.
    The various bit positions are:
    1   sonetPathNoDefect
    2   sonetPathSTSLOP
    4   sonetPathSTSAIS
    8   sonetPathSTSRDI
    16   sonetPathUnequipped
    32   sonetPathSignalLabelMismatch
2   aglsonetPathCurrentESs
    The counter associated with the number of Errored
    Seconds encountered by a SONET/SDH
    Path in the current 15 minute interval.
2   aglsonetPathCurrentSESs
    The counter associated with the number of
    Severely Errored Seconds
    encountered by a SONET/SDH Path in the current 15
    minute interval.
2   aglsonetPathCurrentCVs
    The counter associated with the number of Coding
    Violations encountered by a
    SONET/SDH Path in the current 15 minute interval.
2   aglsonetPathCurrentUASs
    The counter associated with the number of
    Unavailable Seconds
    encountered by a Path in the current
    15 minute, interval.
