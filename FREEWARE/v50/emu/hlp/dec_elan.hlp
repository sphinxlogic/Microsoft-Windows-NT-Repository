1   efddiSMTTable
    A list of SMT entries.  The number of entries is given 
    by smtNumber, defined in the FDDI MIB."
2   efddiSMTEntry
    A collection of objects containing information for a 
    given SMT link."
2   eSMTIndex
    Identifies the SMT Index.  The value of this object is 
    the same as the snmpFddiSMTIndex, defined in the FDDI MIB, 
    for this smt entity."
2   eSMTStationType
    The Station Type Identification."
2   eSMTTracesReceived
    The number of PC Traces received by this station."
1   efddiMACTable
    A list of MAC entries.  The number of entries is given 
    by macNumber, defined in the FDDI MIB."
2   efddiMACEntry
    A collection of objects containing information for a 
    given MAC entity."
2   eMACSMTIndex
    The value of the SMT index associated with this MAC. 
    The value of this object is the same as the 
    snmpFddiMACSMTIndex, defined in the FDDI MIB, for this 
    MAC entity."
2   eMACIndex
    Identifies the MAC Index.  The value of this object is 
    the same as the snmpFddiMACIndex, defined in the FDDI MIB, 
    for this MAC entity."
2   eMACLinkIndex
    The SMT Resource Index."
2   eMACLinkState
    The current state of the link."
2   eMACRingPurgerState
    The current Ring Purger state."
2   eMACRingPurgerEnable
    If true, this Link will participate in the Ring Purger 
    Election and, if elected, perform the Ring Purger function."
2   eMACRingPurgeErrors
    The number of times the MAC PurgeError Event bit was set."
2   eMACFrameStripMode
    Method of frame removal used by this station."
2   eMACFCIStripErrors
    The number of times a Frame Content Independent Strip 
    operation was terminated by receipt of a token."
2   eMACRingErrorReason
    Reason for last ring disturbance."
2   eMACRingInitializationsInitiated
    Number of Ring Claim Processes initiated by this link 
    entity."
2   eMACRingInitializationsReceived
    Number of Ring Claim Processes or Ring Beaconing Processes 
    initiated by a remote link entity and detected by this link 
    entity."
2   eMACRingBeaconingInitiated
    The number of Ring Beacon Processes initiated by this 
    link entity."
2   eMACDuplicateAddressTestFailures
    The number of times the duplicate address test failed."
2   eMACDuplicateTokensDetected
    The number of times this link entity detected a duplicate 
    token."
2   eMACUpstreamNbrDuplAddressFlag
    The upstream neighbor's duplicate address status, as 
    reported by the NIF frame.  Unknown if no NIF frame has 
    been received yet."
2   eMACTracesInitiated
    The number of PC Traces initiated by this station."
2   eMACRestrictedTokenTimeout
    The restricted token timeout, which limits how long a 
    single restricted mode dialog may last before being 
    terminated."
2   eMACFrameStatusErrors
    The number of frames received on the line that had the 
    E (error detected) indicator set or a missing E indicator."
2   eMACFrameAlignmentErrors
    The number of frames received on the line that contained 
    an odd number of symbols; that is, a non-integral number 
    of octets."
2   eMACTransmitUnderruns
    The number of times an underrun occured because the 
    device's transmit FIFO became empty due to insufficient 
    memory.  In other words, the device was trying to 
    transmit but could not get into memory fast enough."
2   eMACRingLatency
    The total ring latency in 1 nanosecond units, as measured 
    by the amount of time that it takes to receive back a void 
    frame transmitted by the MAC chip.  Note that implementations 
    that do not have the capability to measure the ring latency 
    will not return this object."
1   efddiPORTTable
    A list of PORT entries.  The number of entries is given 
    by portNumber, defined in the FDDI MIB."
2   efddiPORTEntry
    "A collection of objects containing information for a
2   ePORTSMTIndex
    The value of the SMT index associated with this port. 
    The value of this object is the same as the 
    snmpFddiPORTSMTIndex, defined in the FDDI MIB, for 
    this PORT entity."
2   ePORTIndex
    Identifies the PORT Index.  The value of this object is 
    the same as the snmpFddiPORTIndex, defined in the FDDI MIB, 
    for this PORT entity."
2   ePORTPHYIndex
    The SMT Resource index.  Index of the PHY resource 
    used to identify the PHY PORT in ANSI SMT frames."
2   ePORTPMDType
    The physical media type of the PORT."
2   ePORTPHYState
    The PHY state."
2   ePORTRejectReason
    The current reject reason."
2   ePORTConnectionsCompleted
    The number of Physical Connections established for this 
    PHY PORT."
2   ePORTTNEExpRejects
    The number of times a physical disconnection took place 
    because the TNE Noise Timer expired."
2   ePORTElasticityBufferErrors
    The number of ELM Chip EBUFF_ERROR events."
1   efddiFDXTable
    A list of FDX entries."
2   efddiFDXEntry
    A collection of objects containing information for a 
    given FDX MAC entity."
2   eFDXSMTIndex
    The value of the SMT index associated with this FDX MAC."
2   eFDXMACIndex
    The value of the MAC index associated with this FDX MAC."
2   eFDXEnable
    When true, this link will participate in the full duplex 
    auto-configuration and, if this is successful, will 
    operate in the full duplex mode."
2   eFDXOp
    When true, this link is operating in the full duplex mode."
2   eFDXState
    The state of the full duplex Control process."
1   esysRomVersion
    The version number of the software stored in ROM."
1   esysInitSwitch
    This object allows the management action of initializing 
    a device and forcing it to run selftest.  It can also be 
    used to reset all information added to the device's NVRAM. 
    When read, it returns a value of other(1)."
1   esysResetDefaultsSwitch
    This object is the state of a hardware switch which, 
    when true, causes the device to reset its parameters 
    to the factory defaults when initialized."
1   esysGatewayAddress
    This object allows the setting of a default gateway 
    address for this device."
1   esysTrapAddressTable
    A table of IP Addresses to which this device will send 
    traps."
2   esysTrapEntry
    Each entry contains an IP Address to which all SNMP Traps 
    will be sent by this device."
2   esysTrapAddress
    An IP Address to which all SNMP traps generated by this 
    device will be sent."
1   esysUpdateSwitch
    A software switch that, when set to true, instructs the 
    device to accept a down-line loaded firmware upgrade. 
    If false, the device will not accept upgrades."
1   esysLastLoadHost
    The physical address of the last host, if any, that 
    responded to the device's request for a downline load 
    of software."
1   esysDeviceState
    The operational state of the device."
1   esysDeviceBrokenReason
    The reason that the Device State is BROKEN.  If current 
    state is not BROKEN and the Unsolicited Resets counter is 
    nonzero, this object show reason for last failure."
1   esysNvramFailed
    A flag, that, when set to True, indicates that the 
    NVRAM failed selftest following the last initialization 
    of the device."
1   esysPowerups
    The number of times this device was powered on. 
    Power Ups, Management Resets and Unsolicited Resets 
    are all mutually exclusive."
1   esysMgmtResets
    Number of times the device was initialized with a 
    management command using esysInitSwitch.  Power Ups, 
    Management Resets and Unsolicited Resets are all mutually 
    exclusive."
1   esysUnsolicitedResets
    Number of times the device initialized itself after 
    encountering a fatal error.  Power Ups, Management Resets 
    and Unsolicited Resets are all mutually exclusive."
1   esysFRUConfigTable
    A list of configuration table entries."
2   esysFRUConfigEntry
    A collection of objects containing information for a 
    given configuration entry."
2   esysFRUIndex
    This object is used for indexing the FRU configuration 
    table."
2   esysFRUSlot
    The physical slot number in which the module resides, if 
    applicable.  If not applicable, this is reported as '0'."
2   esysFRUDesc
    A textual description of this FRU."
2   esysFRUType
    Integer representation for the FRU type.  This is the 
    machine-readable form of the descriptor object."
2   esysFRURev
    This object represents the FRU revision number."
2   esysFRUState
    The operational state of the FRU, if present."
1   esysFddiPortTrapSwitch
    This is a switch to enable or diable FDDI port up and port 
    down traps.  When set to true, the concentrator will 
    send a trap when one of its ports comes up or goes down."
1   eifTable
    A list of interface entries.  The number of entries is 
    given by ifNumber, defined in MIB-II."
2   eifEntry
    A collection of objects containing information for a 
    given interface."
2   eifIndex
    Identifies the Interface.  The value of this object is 
    the same as the ifIndex, defined in MIB-II, for this 
    interface."
2   eifBadFramesReceived
    Number of frames received with a bad frame check sequence."
2   eifReceiveOverrun
    Number of times that the device received a frame loss 
    indication from the hardware on the interface."
2   eifOversizeFrames
    Number of frames received on the interface that were 
    larger than the maximum legal size."
2   eifTransmitFramesError
    Number of frames that were transmitted with an error 
    on the line."
2   eifMgmtSetsAllowedSwitch
    This hardware switch, when true, allows write 
    access to the device.  This object has meaning only 
    when the corresponding functionality is present."
1   ebrLB100SpanningTreeVer
    The version number of the Spanning Tree algorithm 
    used by the bridge when in the LAN Bridge 100 Spanning 
    Tree mode."
1   ebr802SpanningTreeVer
    The version number of the Spanning Tree algorithm 
    used by the bridge when in the 802.1d Spanning Tree mode."
1   ebrMaxForwardingDBEntries
    The maximum number of address entries that the bridge 
    can store in its volatile memory."
1   ebrMaxNVForwardingDBEntries
    The maximum number of permanent address entries that 
    the bridge canstore in its NVRAM."
1   ebrMaxProtocolDBEntries
    The maximum number of protocol entries that the bridge 
    can store in its protocol database.  These entries control 
    the handling of frames based on their Ethernet PT, 
    IEEE 802.2 DSAP or IEEE 802 SNAP Protocol ID."
1   ebrMaxNVProtocolDBEntries
    The maximum number of protocol entries that the bridge 
    can store in its nonvolatile memory.  These are retained 
    after a power-down."
1   ebrForwardingDBPurgeThreshold
    The total number of active and inactive address entries 
    that will trigger a purge of the inactive entries."
1   ebrPortTestPassedThreshold
    The number of consecutive successful self-tests needed 
    before the bridge considers a line to be operational."
1   ebrPortTestInterval
    The interval, in seconds, at which the bridge will run 
    selftests on a line that is in the BROKEN state."
1   ebrTopologyChangeTimer
    The number of seconds remaining, if this is the Root, 
    for which Topology Change will be propagated in Hello 
    messages.  Otherwise this value will be reported as 0."
1   ebrManualFilterSwitch
    A switch that controls address filtering.  When true, 
    the bridge purges the learned entries from its forwarding 
    database, stops its learning process, and forwards only 
    frames with destination and source addresses that have 
    been specified via management."
1   ebrFragmentationSwitch
    A switch that controls whether fragmentation is performed 
    by the bridge when a large IP frame is received on a datalink 
    that supports a higer frame size than the other datalink."
1   ebrRemoveMgmtAddress
    This object allows the action of removing all management 
    entered addresses from the forwarding database when 
    set to true(2).  When read, it returns a value of other(1)."
1   ebrRemoveMgmtProto
    This object allows the action of removing all management 
    entered protocols from the protocol database when set 
    to true(2).  When read, it returns a value of other(1)."
1   ebrCurrForwardingDBEntries
    The number of address entries in the bridge's volatile 
    memory.  These will be lost upon loss of power."
1   ebrCurrNVForwardingDBEntries
    The number of address entries in the bridge's NVRAM. 
    These will be retained after loss of power."
1   ebrCurrProtocolDBEntries
    The number of protocol entries that are stored in the 
    bridge's protocol database.  These control the handling 
    of frames based on their Ethernet protocol type, IEEE 
    802.2 DSAP, or 802 SNAP Protocol ID."
1   ebrCurrNVProtocolDBEntries
    The number of protocol entries in the bridge's NVRAM. 
    These are retained after a power loss."
1   ebrMgmtHeardPort
    The port on which this command was received."
1   ebrLB100BeingPolled
    The address of the LAN Bridge 100 mode bridge that sent 
    this bridge into the LAN Bridge 100 Spanning Tree mode. 
    If this bridge is the Root, this object indicates the 
    bridge that will be polled periodically to determine 
    if it is still necessary to stay in this Spanning Tree 
    mode."
1   ebrInactiveForwardingDBEntries
    The number of inactive address entries in the bridge's 
    forwarding database.  The bridge marks an address entry 
    inactive when the entry is aged out."
1   ebrTimeSinceForwardingDBPurged
    The number of seconds since the bridge cleared the 
    forwarding database of inactive entries."
1   ebrTimeSinceLastHello
    The number of seconds since the bridge last sent a 
    Hello message."
1   ebrDeviceFramesLost
    The number of frames addressed to the bridge itself that 
    the bridge discarded because it did not have sufficient 
    receive buffers available."
1   ebrSpanningTreeModeChanges
    The number of times that the bridge switched from the 
    802.1d Spanning Tree mode to the LB100 Spanning Tree mode."
1   ebrBestRootAge
    The age, in hundereths of seconds, of the Hello message 
    that established the best root."
1   ebrTopologyChangeFlag
    A flag that indicates whether a Topology Change is 
    currently in effect on the extended LAN."
1   ebrTellParentFlag
    A flag that indicates if the bridge is attempting to 
    propagate a topology change towards the Root."
1   ebrForwardingDBShortAgingTime
    The number of seconds that the bridge keeps learned 
    entries active while a topology change is in effect."
1   ebrBadHelloLimit
    The number of hello intervals during which the bridge 
    receives one or more bad hellos on a line, before the 
    bridge performs a test on the link.  A bad Hello message 
    is one that contains inferior information that is received 
    on a port on which this bridge is Designated."
1   ebrBadHelloResetTimer
    The number of Hello intervals without bad Hellos that 
    the bridge will wait before it resets its bad Hello 
    count to zero."
1   ebrNoFrameInterval
    The The number of seconds of inactivity on a line that 
    will cause the bridge to run a test on that line.  The 
    bridge considers a line to be inactive if it does not 
    receive any frames on that line."
1   ebrLB100PollTime
    The number of seconds that a Root bridge in LAN Bridge 100 
    mode waits between polling the LAN Bridge 100 that is 
    keeping it in this mode.  This polling is done to determine 
    whether the LB100 is still present on the extended LAN."
1   ebrLB100ResponseTimeout
    The number of seconds that a Root in LAN Bridge 100 
    Spanning Tree mode will wait for a response from the 
    LAN Bridge 100 which is keeping it in this mode, before 
    which it will assume that the LB100 is no longer on 
    the extended LAN."
1   ebrLB100SpanningTreeCompat
    A switch that controls the Spanning Tree mode used by 
    the bridge.  If in Auto-Select mode, the bridge will 
    go into 802 Spanning Tree mode by default, but will switch 
    to LB100 mode as soon as a LB100 is detected.  In 802 
    Spanning Tree mode, the bridge will stay in 802 mode."
1   ebrIfTable
    A list of interface entries.  The number of entries is 
    given by ifNumber, defined in MIB-II."
2   ebrIfEntry
    A collection of objects containing information for a 
    given interface."
2   ebrIfIndex
    Identifies the Interface.  The value of this object is 
    the same as the ifIndex, defined in MIB-II, for this 
    interface."
2   ebrIfLinkBrokenReason
    The reason why the link was last broken.  A possible 
    internal fault(1) indicates a problem with the bridge 
    line itself, a possible external fault(2), indicates 
    a problem with the transmission medium to which the 
    line is attached."
2   ebrIfPortRestarts
    The number of times the bridge restarted the line."
2   ebrIfUnknownDAReceived
    The number of frames received on this line for which the 
    bridge had no address entry in its forwarding database."
2   ebrIfFramesAddrFiltered
    The number of frames filtered by the bridge on this 
    port because of address entries in the forwarding database."
2   ebrIfMultiFramesFiltered
    The number of frames with multicast destination addresses 
    that were received on the line on the line and filtered 
    by the bridge."
2   ebrIfFramesProtocolFiltered
    The number of frames received on this line that the 
    bridge discarded because of entries set by management 
    in the protocol database."
2   ebrIfDeviceFramesSent
    The number of frames originating from the bridge itself 
    that were transmitted on this line."
2   ebrIfDeviceFramesReceived
    The number of frames addressed to the bridge itself 
    that were received on this line."
2   ebrIfDeviceBytesSent
    The number of bytes in the frames originating from the 
    bridge that were transmitted on this line."
2   ebrIfDeviceBytesReceived
    The number of bytes in the frames addressed to the bridge 
    itself that were received on this line."
2   ebrIfDeviceFramesLost
    The number of frames received on the line addressed 
    to the bridge itself discarded by the bridge because it 
    did not have internal buffers to store them."
2   ebrIfMultiBytesSent
    The number of bytes in Multicast Frames sent, as reported 
    in ifOutNUcastPkts, defined in MIB-II."
2   ebrIfMultiBytesReceived
    The number of bytes in Multicast Frames received, as 
    reported in ifInNUcastPkts, defined in MIB-II."
2   ebrIfMultiDeviceFramesSent
    The number of frames with multicast destination addresses 
    transmitted by the bridge itself on the line."
2   ebrIfMultiDeviceFramesReceived
    The number of frames with multicast destination addresses 
    received by the bridge itslef on the line."
2   ebrIfMultiDeviceBytesSent
    "The number of bytes in ebrIfMultiDeviceFramesSent."
2   ebrIfMultiDeviceBytesReceived
    The number of bytes in ebrIfMultiDeviceFramesReceived."
2   ebrIfBadBytesReceived
    The number of bytes in frames received that had a bad 
    frame check sequence."
2   ebrIfBadHelloLimitExceeded
    The number of times that the Bad Hellos on the line 
    exceeded the Bad Hello limit."
1   ebrIfEtherTable
    A list of interface entries for an Ethernet port."
2   ebrIfEtherEntry
    A collection of objects containing information for a 
    given interface."
2   ebrIfEthIndex
    Identifies the Interface.  The value of this object is 
    the same as the ifIndex, defined in MIB-II, for this 
    interface."
2   ebrIfEthPhysicalMediumType
    The type of physical medium to which this line is 
    attached."
2   ebrIfEthCollisionPresenceTestSwitch
    A switch that informs the bridge whether the transceiver 
    on this line is using the Collision Presence Test (CPT), 
    commonly known as heartbeat.  It must be enabled if 
    the line's transceiver has CPT."
2   ebrIfEthCollisionTestFailed
    The number of times that a Collision Presence Test (CPT) 
    signal was not detected within 4 microseconds after a 
    transmission on the line.  This counter is valid only 
    if ebrIfEthCollisionPresenceTestSwitch is set to true 
    for this line."
2   ebrIfEthFramingError
    The number of times that a frame received on the line 
    contained both a noninteger multiple of 8 bits and 
    a CRC error."
2   ebrIfEthLengthError
    The number of 802.3 frames received that contained a 
    Length field inconsistent with the actual number of 
    data bytes in the packet."
2   ebrIfEthTransmitMultipleCollisions
    The number of times that the bridge had to retry 
    transmission of a frame on the line.  This was 
    because of collisions during transmission due to 
    congestion on the physical medium."
2   ebrIfEthCarrierLoss
    The number of times that the bridge detected a loss of 
    the carrier signal while transmitting a frame on the 
    line."
2   ebrIfEthCollisionLimitExceeded
    The number of times that the bridge failed to transmit 
    a frame on this line after 16 attempts, the collision 
    limit."
1   ebrIfFddiTable
    A list of interface entries for an FDDI port."
2   ebrIfFddiEntry
    A collection of objects containing information for a 
    given interface."
2   ebrIfFddiIndex
    Identifies the Interface.  The value of this object is 
    the same as the ifIndex, defined in MIB-II, for this 
    interface."
2   ebrIfFddiUnprocessedErrorPackets
    The number of times that an error frame was received 
    on thisline but the bridge did not have time to 
    decipher it."
2   ebrIfFddiIpDatagramsFragmented
    The number or large IP Datagrams that were fragmented 
    into smaller frames because they did not fit into 
    legal size packets on the smaller datalink after 
    translation."
2   ebrIfFddiIpDontFragment
    The number of large IP datagrams that could not be 
    fragmented because the DONT-FRAGMENT bit was set in 
    the IP header."
2   ebrIfFddiIpIllegalHeaderLength
    The number of large IP datagrams that were discarded 
    instead of being fragmented because the IP header was 
    of illegal length."
2   ebrIfFddiIpIllegalSize
    The number of large IP datagrams that were discarded 
    instead of being fragmented because the IP header 
    indicated a length greater than the number of actual 
    bytes in the received datagram."
1   ebrIfSpanTable
    A list of interface entries."
2   ebrIfSpanEntry
    A collection of objects containing information for a 
    given interface."
2   ebrIfSpIndex
    Identifies the Interface.  The value of this object is 
    the same as the ifIndex, defined in MIB-II, for this 
    interface."
2   ebrIfSpDesigRootAge
    The age, in hundreths of seconds, of the last Hello 
    message received from the designated bridge on the line."
2   ebrIfSpForwardDelayTimer
    The time remaining, in hundreths of seconds, before the 
    bridge will leave the Preforwarding state (listening or 
    learning), and enter the Forwarding State.  If not in 
    preforwarding, this value will be reported as 0."
2   ebrIfSpBadHelloCount
    The number of Hello intervals during which at least one 
    Bad Hello was received."
2   ebrIfSpPossibleLoopFlag
    A flag that indicates whether the bridge detected a loop 
    condition on this line."
2   ebrIfSpTopologyChangeAckFlag
    A flag that indicates whether a topology change 
    notification received on a link that we are designated 
    on needs to be acknowledged."
1   ebrTwoPortStaticTable
    A table that contains static destination and source 
    address filtering information about unicast and 
    multicast addresses for 2-port bridges."
2   ebrTwoPortStaticEntry
    Information about a specific MAC address 
    for which the bridge has some static forwarding and/or 
    filtering information."
1   ebrTwoPortAddress
    The destination/source MAC Address in a frame to 
    which this entry's filtering information applies."
1   ebrTwoPortPortNum
    The Port Number to which this address will be 
    locked-down, if the status is lockDown.  Otherwise, 
    this field has a value of 0."
1   ebrTwoPortStatus
    The status of this entry.  The meanings of the 
    values are: 
    lockDown(1) : This address is 'locked-down' to the 
    port specified by the ebrTwoPortPortNum field. 
    This address will be allowed to source frames 
    only from the specified port, and frames destined 
    to this address will be sent out only on the 
    specified port. 
    hello(2) : This is the address used by the bridge in 
    the destination field of Spanning Tree Hellos. 
    It is not a writeable value. 
    invalid(3) : Writing this value to the object removes 
    the corresponding entry. 
    filter(4) : Frames with this address in the source or 
    destination field will be filtered by the bridge. 
    forward(5) : Frames with this address in the 
    destination field will be forwarded by the bridge. 
    rateLimit(6) : Frames with this address in the 
    destination field will be rate-limited by the 
    bridge, if it supports rate limiting.  Applicable 
    only to multicast addresses.  For more detail, please 
    see the ebrRateLimiting group."
1   ebrMultiPortStaticTable
    A table that contains static destination and source 
    address filtering information about unicast and 
    multicast addresses for multi-port bridges."
2   ebrMultiPortStaticEntry
    Information about a specific MAC address 
    for which the bridge has some static forwarding and/or 
    filtering information."
2   ebrMultiPortAddress
    The destination/source MAC Address in a frame to 
    which this entry's filtering information applies."
2   ebrMultiPortReceivePort
    The port from which a frame must be received to use 
    the corresponding ebrMultiPortAllowedToGoTo field.  A value 
    of zero indicates that this entry applies on all ports of 
    the bridge."
2   ebrMultiPortAllowedToGoTo
    The set of ports to which frames received from 
    a specific port and sourced from or destined to 
    the address specified by ebrMultiPortAddress are 
    allowed to be forwarded.  Each octet within the 
    value of this object specifies a set of eight ports, 
    with the first octet specifying ports 1 through 8, 
    the second octet specifying port 9 through 16 etc. 
    Within each octet, the most significant bit represents 
    the lowest numbered port, and the least significant 
    bit represents the highest numbered port.  If a 
    bit has a value of '1', then the corresponding port 
    is included in the set of ports; the port is not 
    included if its bit has a value of '0'."
2   ebrMultiPortPortNum
    The Port Number to which this address will be 
    locked-down, if the status is lockDown.  Otherwise, 
    this field has a value of zero."
2   ebrMultiPortStatus
    The status of this entry.  The meanings of the 
    values are: 
    portMask(1) : The static filtering for this address 
    is specified by the MultiPortAllowedToGoTo field. 
    lockDown(2) : The static filtering for this address 
    is specified as 'locked-down' to the port specified 
    by the ebrMultiPortPortNum field.  This address will 
    be allowed to source frames only from the specified 
    port, and frames destined to this address will be 
    sent out only on the specified port.   
    maskAndLock(3) : The static filtering for this 
    address is specified by both the 
    ebrMultiPortAllowedToGoTo as well as 'locked-down' 
    as explained above for 'lockDown(2)'. 
    hello(4) : This is the address used by the bridge in 
    the destination field of Spanning Tree Hellos. 
    It is not a writeable value. 
    filter(5) : This address will be filtered on all ports. 
    invalid(6) : Writing this value to the object removes 
    the corresponding entry. 
    rateLimit(7) : Frames with this address in the 
    destination field will be rate-limited by the 
    bridge, if it supports rate limiting.  Applicable 
    only to multicast addresses.  For more detail, please 
    see the ebrRateLimiting group. 
    rateLimitAndPortMask(8) : Frames received with this 
    address will be subjected to both rate limiting 
    and port mask filtering."
1   ebrTwoProtoEnetFilterOther
    Action taken by the bridge on Ethernet protocol types  
    other than those specified in the ebrTwoEnetProtoTable. "
1   ebrTwoProtoSapFilterOther
    Action taken by the bridge on 802.2 DSAPs other than  
    those specified in the ebrTwoSapProtoTable. "
1   ebrTwoProtoSnapFilterOther
    Action taken by the bridge on the 5-byte SNAP PIDs other  
    than those specified in the ebrTwoSnapProtoTable. "
1   ebrTwoEnetProtoTable
    A table that contains filtering information about 
    Ethernet protocol types for 2-port bridges."
2   ebrTwoEnetProtoEntry
    A table that contains filtering information about 
    Ethernet protocol types for 2-port bridges."
1   ebrTwoEnetProtoType
    The protocol type in a frame to which this entry's 
    filtering information applies."
1   ebrTwoEnetProtoStatus
    Action taken by bridge when it sees this ethernet 
    protocol type in a received frame.  The meanings of 
    the values are: 
    forward(1) : Frames received with this protocol type 
    are allowed to be forwarded. 
    filter(2) : Frames received with this protocol type 
    should be filtered. 
    invalid(3) : Writing this value to the object removes 
    the corresponding entry. 
    rateLimit(4) : Frames received with this protocol type 
    will be rate-limited by the bridge, if it supports 
    rate limiting.  For more detail, please 
    see the ebrRateLimiting group."
1   ebrTwoSapProtoTable
    A table that contains filtering information about 
    802.2 SAPs in the DSAP field for 2-port bridges."
2   ebrTwoSapProtoEntry
    A table that contains filtering information about 
    802.2 SAPs in the DSAP field for 2-port bridges."
2   ebrTwoSapIndex
    Index of the SAP table."
2   ebrTwoSapValue
    The 802.2 DSAP in a frame to which this entry's 
    filtering information applies."
2   ebrTwoSapStatus
    Action taken by bridge when it sees this 802.2 SAP 
    in the DSAP field of a received frame.  The meanings of 
    the values are: 
    forward(1) : Frames received with this sap 
    are allowed to be forwarded. 
    filter(2) : Frames received with this sap 
    should be filtered. 
    invalid(3) : Writing this value to the object removes 
    the corresponding entry. 
    rateLimit(4) : Frames received with this sap 
    will be rate-limited by the bridge, if it supports 
    rate limiting.  For more detail, please 
    see the ebrRateLimiting group."
1   ebrTwoSnapProtoTable
    A table that contains filtering information about 
    5-byte SNAP PIDs for 2-port bridges."
2   ebrTwoSnapProtoEntry
    A table that contains filtering information about 
    5-byte SNAP PIDs for 2-port bridges."
2   ebrTwoSnapIndex
    The index into the SNAP table."
2   ebrTwoSnapValue
    The SNAP PID in an 802 frame to which this entry's 
    filtering information applies."
2   ebrTwoSnapStatus
    Action taken by bridge when it sees this SNAP PID 
    in a received 802 frame.  The meanings of 
    the values are: 
    forward(1) : Frames received with this snap pid 
    are allowed to be forwarded. 
    filter(2) : Frames received with this snap pid 
    should be filtered. 
    invalid(3) : Writing this value to the object removes 
    the corresponding entry. 
    rateLimit(4) : Frames received with this snap pid 
    will be rate-limited by the bridge, if it supports 
    rate limiting.  For more detail, please 
    see the ebrRateLimiting group."
1   ebrMultiEnetProtoTable
    A table that contains filtering information about 
    Ethernet protocol types for multi-port bridges."
2   ebrMultiEnetProtoEntry
    A table that contains filtering information about 
    Ethernet protocol types for multi-port bridges."
2   ebrMultiEnetProtoType
    The protocol type in a frame to which this entry's 
    filtering information applies."
2   ebrMultiEnetReceivePort
    The port from which a frame must be received to use 
    the corresponding ebrMultiPortEnetProtoType field.  A value 
    of zero indicates that this entry applies on all ports of 
    the bridge."
2   ebrMultiEnetAllowedToGoTo
    The set of ports to which frames received from 
    a specific port and containing the protocol 
    type specified by ebrMultiEnetProtoType are 
    allowed to be forwarded.  Each octet within the 
    value of this object specifies a set of eight ports, 
    with the first octet specifying ports 1 through 8, 
    the second octet specifying port 9 through 16 etc. 
    Within each octet, the most significant bit represents 
    the lowest numbered port, and the least significant 
    bit represents the highest numbered port.  If a 
    bit has a value of '1', then the corresponding port 
    is included in the set of ports; the port is not 
    included if its bit has a value of '0'."
2   ebrMultiEnetStatus
    Action taken by bridge when it sees this ethernet 
    protocol type in a received frame.  The meanings of 
    the values are: 
    portMask(1) : The static filtering for this address 
    is specified by the MultiEnetAllowedToGoTo field. 
    invalid(2) : Writing this value to the object removes 
    the corresponding entry. 
    filter(3) : Frames received with this protocol type 
    should be filtered. 
    forward(4) : Frames received with this protocol type 
    are allowed to be forwarded. 
    rateLimit(5) : Frames received with this protocol type 
    will be rate-limited by the bridge, if it supports 
    rate limiting.  For more detail, please 
    see the ebrRateLimiting group. 
    rateLimitAndPortMask(6) : Frames received with this 
    protocol type will be subjected to both rate limiting 
    and port mask filtering."
1   ebrMultiSapProtoTable
    A table that contains filtering information about 
    802.2 SAPs in the DSAP field for multi-port bridges."
2   ebrMultiSapProtoEntry
    A table that contains filtering information about 
    802.2 SAPs in the DSAP field for multi-port bridges."
2   ebrMultiSapValue
    The 802.2 DSAP in a frame to which this entry's 
    filtering information applies."
2   ebrMultiSapReceivePort
    The port from which a frame must be received to use 
    the corresponding ebrMultiPortSapProtoType field.  A value 
    of zero indicates that this entry applies on all ports of 
    the bridge."
2   ebrMultiSapAllowedToGoTo
    The set of ports to which frames received from 
    a specific port and containing the DSAP in an 802 
    frame specified by ebrMultiSapValue are 
    allowed to be forwarded.  Each octet within the 
    value of this object specifies a set of eight ports, 
    with the first octet specifying ports 1 through 8, 
    the second octet specifying port 9 through 16 etc. 
    Within each octet, the most significant bit represents 
    the lowest numbered port, and the least significant 
    bit represents the highest numbered port.  If a 
    bit has a value of '1', then the corresponding port 
    is included in the set of ports; the port is not 
    included if its bit has a value of '0'."
2   ebrMultiSapStatus
    Action taken by bridge when it sees this 802.2 SAP 
    in the DSAP field of a received frame.  The meanings of 
    the values are: 
    portMask(1) : The static filtering for this address 
    is specified by the MultiSapAllowedToGoTo field. 
    invalid(2) : Writing this value to the object removes 
    the corresponding entry. 
    filter(3) : Frames received with this protocol type 
    should be filtered. 
    forward(4) : Frames received with this protocol type 
    are allowed to be forwarded. 
    rateLimit(5) : Frames received with this protocol type 
    will be rate-limited by the bridge, if it supports 
    rate limiting.  For more detail, please 
    see the ebrRateLimiting group. 
    rateLimitAndPortMask(6) : Frames received with this 
    protocol type will be subjected to both rate limiting 
    and port mask filtering."
1   ebrMultiSnapProtoTable
    A table that contains filtering information about 
    5-byte SNAP PIDs for multi-port bridges."
2   ebrMultiSnapProtoEntry
    A table that contains filtering information about 
    5-byte SNAP PIDs for multi-port bridges."
2   ebrMultiSnapValue
    The SNAP PID in an 802 frame to which this entry's 
    filtering information applies."
2   ebrMultiSnapReceivePort
    The port from which a frame must be received to use 
    the corresponding ebrMultiPortSnapProtoType field.  A value 
    of zero indicates that this entry applies on all ports of 
    the bridge."
2   ebrMultiSnapAllowedToGoTo
    The set of ports to which frames received from 
    a specific port and containing the SNAP PID in an 
    802 frame specified by ebrMultiSnapValue are 
    allowed to be forwarded.  Each octet within the 
    value of this object specifies a set of eight ports, 
    with the first octet specifying ports 1 through 8, 
    the second octet specifying port 9 through 16 etc. 
    Within each octet, the most significant bit represents 
    the lowest numbered port, and the least significant 
    bit represents the highest numbered port.  If a 
    bit has a value of '1', then the corresponding port 
    is included in the set of ports; the port is not 
    included if its bit has a value of '0'."
2   ebrMultiSnapStatus
    Action taken by bridge when it sees this SNAP PID 
    in a received 802 frame.  The meanings of 
    the values are: 
    portMask(1) : The static filtering for this address 
    is specified by the MultiSnapAllowedToGoTo field. 
    invalid(2) : Writing this value to the object removes 
    the corresponding entry. 
    filter(3) : Frames received with this protocol type 
    should be filtered. 
    forward(4) : Frames received with this protocol type 
    are allowed to be forwarded. 
    rateLimit(5) : Frames received with this protocol type 
    will be rate-limited by the bridge, if it supports 
    rate limiting.  For more detail, please 
    see the ebrRateLimiting group. 
    rateLimitAndPortMask(6) : Frames received with this 
    protocol type will be subjected to both rate limiting 
    and port mask filtering."
1   ebrMultiSwTable
    A list of interface entries.  The number of entries is 
    given by ifNumber, defined in MIB-II."
2   ebrMultiSwEntry
    A collection of objects containing information for a 
    given interface."
2   ebrMultiSwIndex
    Identifies the Interface to which this entry applies."
2   ebrMultiSwManualFilter
    A switch that controls address filtering.  When true, 
    the bridge purges the learned entries from its forwarding 
    database, stops its learning process, and forwards only 
    frames with destination and source addresses that have 
    been specified via management."
2   ebrMultiSwProtoEnetOther
    Action taken by the bridge on Ethernet protocol types 
    other than those specified in the ebrMultiEnetProtoTable."
2   ebrMultiSwProtoSapOther
    Action taken by the bridge on 802.2 DSAPs other  
    than those specified in the ebrMultiSapProtoTable."
2   ebrMultiSwProtoSnapOther
    Action taken by the bridge on the 5-byte SNAP PIDs other  
    than those specified in the ebrMultiSnapProtoTable."
1   ebrNTPTable
    A table of Ethernet protocol types which will 
    selectively be translated in such a way as to guarantee 
    that the form in which a packet was received - Ethernet PT 
    or 802.3 with 1042 format and this PT - will be retained 
    across a pair of these bridges."
2   ebrNTPEntry
    A list of NTP protocol type entries."
2   ebrNTPtype
    A protocol type in the NTP table."
2   ebrNTPStatus
    Writing invalid(2) to this object removes the corresponding 
    entry.  When read, this object always returns a value 
    of other(1)."
1   esysIPXSwitch
    A software switch that, when set to true, causes the 
    bridge to translate IPX 'raw 802.3' packets into SNAP 
    encapsulated packets on the FDDI.  Note that this works 
    only in environments where all IPX stations use only 
    this particular format.  It is recommended that the 
    Ethernet v2 format be used on IPX stations for 
    full connectivity of IPX stations across Ethernet 
    as well as FDDI bridged and routed networks."
1   ebrRateLimitSwitch
    By default, rate limiting will be disabled.  It can be 
    enabled by setting this object to 'true(1)'."
1   ebrRateLimit
    This is the maximum number of rate-limited frames per second 
    that the bridge will forward per second."
1   ebrRateLimitCounterTable
    A table of the count of frames that were dropped by 
    the bridge due to rate limiting on each port."
2   ebrRateLimitCounterEntry
    A list of rate limited frame counter entries."
2   ebrRateLimitPort
    The port for which this entry contains rate limit 
    counters information."
2   ebrRateLimitAddressFrames
    This is the number of frames per second that were 
    filtered due to address rate limiting."
2   ebrRateLimitProtocolFrames
    This is the number of frames per second that were 
    filtered due to protocol rate limiting."
1   ebrIfSpanTurnOffTable
    A list of port entries."
2   ebrIfSpanTurnOffEntry
    A collection of objects containing information for 
    a given bridge port."
2   ebrIfSpanTurnOffPort
    Identifies the bridge port number of an interface."
2   ebrIfSpanTurnOffStatus
    Indicates whether spanning tree is turned on or off 
    on this bridge port."
1   eauthTrapCommunity
    The community string used in SNMP Trap PDUs."
1   eauthTrapUserTable
    A list of addresses to which traps will be sent and 
    associated information."
2   eauthTrapUserEntry
    Objects containing information for a given trap address."
2   eauthTrapUserAddr
    An IP Address to which all SNMP Trap messages will be sent."
2   eauthTrapUserStatus
    Writing invalid(2) to this object removes the corresponding 
    entry.  When read, this object always returns a value 
    of other(1)."
1   eauthReadOnlyCommunity
    The community string used to identify an SNMP community 
    with access rights of Read-only."
1   eauthReadOnlyUserTable
    A list of Read-only users and associated information."
2   eauthReadOnlyUserEntry
    Objects containing information for a given Read-only user."
2   eauthReadOnlyUserAddr
    An IP Address, or a set of IP addresses, which has 
    Read-only SNMP access to this agent.  If this object 
    is used as a wildcard, bits corresponding to the 
    zero bits in the corresponding euthReadOnlyUserMask 
    are treated as don't-care."
2   eauthReadOnlyUserMask
    A 32-bit mask which is applied to (ANDed with) 
    the source IP address of an incoming SNMP message. 
    If the result of the mask is equal to eauthReadOnlyUserAddr, 
    the message is considered to have come from a user 
    who has Read-only access.  This allows wildcarding, 
    for example, for all NMS's on a given subnet.  For 
    fully specified IP addresses required to be in this 
    community, this mask may be set to all 1's."
2   eauthReadOnlyUserStatus
    Writing invalid(2) to this object removes the corresponding 
    entry.  When read, this object always returns a value 
    of other(1)."
1   eauthReadWriteCommunity
    The community string used to identify an SNMP community 
    with access rights of Read-Write."
1   eauthReadWriteUserTable
    A list of Read-Write users and associated information."
2   eauthReadWriteUserEntry
    Objects containing information for a given Read-Write user."
2   eauthReadWriteUserAddr
    An IP Address, or a set of IP addresses, which has 
    Read-Write SNMP access to this agent.  If this object 
    is used as a wildcard, bits corresponding to the 
    zero bits in the corresponding euthReadWriteUserMask 
    are treated as don't-care."
2   eauthReadWriteUserMask
    A 32-bit mask which is applied to (ANDed with) 
    the source IP address of an incoming SNMP message. 
    If the result of the mask is equal to eauthReadWriteUserAddr, 
    the message is considered to have come from a user 
    who has Read-Write access.  This allows wildcarding, 
    for example, for all NMS's on a given subnet.  For 
    fully specified IP addresses required to be in this 
    community, this mask may be set to all 1's."
2   eauthReadWriteUserStatus
    Writing invalid(2) to this object removes the corresponding 
    entry.  When read, this object always returns a value 
    of other(1)."
