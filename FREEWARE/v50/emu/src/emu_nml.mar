	.TITLE	EMU_NML   
	.IDENT	/V5-001/
;	© 2000 P. Beaudoin
;  This software is supplied as is and the usual warranty
;  is implied - none. You may use, abuse, modify or
;  or ignore this software as you see fit but are
;  encouraged to give credit, as is good practice
;  when stealing with permission
; 
; Modifications:
; 001	Sep-1996	PB	Creation
;	
;++
;1 EMU_NML   
; Collection of routines used to process DECnet IV NICE protocols. 
; See individual routines for descriptions
;--
	.LIBRARY	"SYS$LIBRARY:LIB.MLB"
        .LIBRARY        "EMU5_LIB:EMU5.MLB"
	.LIBRARY        /EMU5_LIB:MACROLIB.MLB/
        $IODEF                          ;Define I/O functions and modifiers
        $NMADEF                         ;Define Network Management parameters
	$SECDEF				; Global Section 
	$SSDEF
	EMUDN4DEF
	EMUDBDEF
;	

	.PSECT	EMU_NML_D,WRT,NOEXE,PIC,SHR,QUAD

NUM=0
VER=4
DECO=0
UECO=0

NET_CHAN:	.WORD	0
NET_DEVICE:	.ASCID	/_NET:/

NCB_DESC:	.WORD	NCB_LEN
		.WORD	0
		.ADDRESS	-
			NCB
NCB:		.BLKB	40
NCB_LEN=<.-NCB>

NCB_CTRSTR:	.ASCID	?!UL::"25=/?<NUM><NUM>
NCB_OPTDATA:	.ASCIC	<VER><DECO><UECO>
		.BLKB	17-<.-NCB_OPTDATA>
		.ASCII	/"/
OPT_LEN=<.-NCB_OPTDATA>
; Request packet
	.ALIGN	LONG

REQP_DESC:	.WORD	 REQP_LEN
		.WORD	 0
		.ADDRESS REQP
REQP:		.BYTE	0,^XAA,^XAA,^XAA,^XAA,^XAA,^XAA,^XAA
REQP_LEN:	.LONG .-REQP

; Return packet
RETURN:	 	.BLKB 	8192		
RETURN_LEN =.-RETURN
RETURN_D:       .LONG	.-RETURN
		.ADDRESS  RETURN
DADDR:		.QUAD	0
PARSE:		.BLKB	256
PARSDESC:	.LONG	.-PARSE
		.ADDRESS  PARSE
IOSB:		.QUAD	0			; 
INTLTIM:	.QUAD	0
RDTIME:		.LONG   0                       ; Time read starts
WRTIME:		.LONG   0                       ; Time write completes
RESTIME:	.LONG	0                       ; Time Difference

HADDRSTR:	.ASCID	/!XB-!XB-!XB-!XB-!XB-!XB/
NODEIDSTR:	.ASCID	/!UW.!UL (!AC)/
OBJSTR:		.ASCID	/!UB/
NODEIDSTR2:	.ASCID	/!UW.!UL/
CHANNELSTR:	.ASCID	/!UW-!UW/
CHANNELSTR1:	.ASCID	/!UW/

       .PSECT EMU_NML_PARSE,EXE,NOWRT,LONG
	.CALL_ENTRY	MAX_ARGS=3, -
			HOME_ARGS=TRUE, - 
			INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			PRESERVE=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			LABEL=EMU_NML_PARSE
;++
;2 EMU_NML_PARSE
;
; Routine to parse a single NICE encoded paramater and return param no,val for
; the param specified.
;3 Inputs
;	p1	.address pointing to NICE formatted input block
;	p2	.address of desc pointing to outp
;3 Outputs
;	.long	param number
;	.long 	len
;	value for len of len 
; 	R1 = Len of param including protocol. That is, the distance
;	     to the next paramater in the input block.
;3 Returns
; SS$_NORMAL 
; Any return from EMU_NML_NEXP
;--  
	MOVL	4(AP),R7	
	MOVQ	@8(AP),R8			; Outp desc

PARAMS_OK:
	ADDL3	R8,R9,R11		; R11 = addr last out byte
; 
	EXTZV	#0,#11,(R7),R4		; Extract param no.
	PUSHL	R7
	CALLS	#1,G^EMU_NML_NEXP	; Get len
	BLBS	R0,100$			; Br if OK
	RET
100$:
110$:
	MOVL	R4,(R9)+		; Param 
	MOVL	R1,(R9)+		; Len
120$:
	BBS	#15,(R7),150$		; Br if counter data
	ADDL	#3,R7			; Point to value
	BRB	200$
150$:
	BBS	#12,(R7),160$		; Br if counter is bit mapped	
	ADDL	#3,R7			; Point to value
	BRB	200$
160$:
	ADDL	#3,R7			; Point to value
200$:
	MOVB	(R7)+,(R9)+             ; Move value
	SOBGTR	R1,200$	
	MOVL	4(AP),R1		; Get original input addr
	SUBL3	R1,R7,R1		; Return len
	MOVL	#SS$_NORMAL,R0
	RET

	.CALL_ENTRY	MAX_ARGS=3, -
			HOME_ARGS=TRUE, - 
			INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			PRESERVE=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			LABEL=EMU_NML_SETENT 
;++
;2 EMU_NML_SETENT 
; Routine to extract and write the NICE entity returned at the start of 
; any NICE return block.
;3 Input:
;	p1 start of NICE block
;	p2 place to write entity (20 bytes always written)
;	p3 long entity type. This is supposed to be part of the return
;	   but it can be in error. Format is:
;		0 node
;		1 line
;		2 logging
;		3 circuit
;		4 Module
;		5 area
;   -------EMU Defined ---------
;		6 Object
;		7 X25 Known DTE
;		8 X25 Known Destination
;		9 X25 Known Network
;
;3 Outputs: 
; Unaligned block:
; .long -1 showing start of entity
; NICE formatted entity id  (16 bytes)
; R1 = len of id (distance to 1st param in input block)
;3 Return
; SS$_NORMAL	OK
; SS$_BUFFEROVF	Entity name is > 16 bytes in length
; SS$_BADPARAM	Unrecognised entity type
;--
	MOVL	4(AP),R7
	MOVL	8(AP),R9
	CLRQ	4(R9)	; Init outp
	CLRQ	12(R9)	; 
	MOVL	#-1,(R9)+
; Determine entity ID
	CASEL	12(AP),#0,#9		; Select processing routine
1$:	
	.WORD	5$-1$  
	.WORD	200$-1$  
	.WORD	200$-1$  
	.WORD	200$-1$  
	.WORD	200$-1$  
	.WORD	200$-1$  
	.WORD	200$-1$  
	.WORD	300$-1$  
	.WORD	400$-1$  
	.WORD	500$-1$  
	MOVL	#SS$_BADPARAM,R0
	RET

; Node
5$:     
	ADDL	#4,R7			; Point to NodeId
	EXTZV	#0,#4,2(R7),R1		; Len of node name (may be 0)
	ADDL	#3,R1			; Total len
	CLRL	R2			; Index
10$:
	MOVB	(R7)[R2],(R9)[R2]       ; Move nodeid
	AOBLSS	R1,R2,10$
	ADDL	#4,R1			; Distace to next param
	MOVL	#SS$_NORMAL,R0
	RET
100$:
	MOVB	3(R7),(R9)		; 
	MOVL	#1,R1			; Len
	ADDL	#4,R1			; Distace to next param
	MOVL	#SS$_NORMAL,R0
	RET
200$:
	MOVB	4(R7),R1		; Len of string
	INCL	R1			; Include count
	CMPL	#16,R1			; Limit?
	BLSS	220$			; Exceeded
	ADDL	#4,R7
	CLRL	R2			; Index
210$:
	MOVB	(R7)[R2],(R9)[R2]       ; Move id
	AOBLSS	R1,R2,210$
	ADDL	#4,R1			; Distance to next param
	MOVL	#SS$_NORMAL,R0
	RET
220$:
	MOVL	#SS$_BUFFEROVF,R0
	RET
300$: 					; KNO DTE
; string param is always 'X25-PROTOCOL' - not useful for the purpose here
; find param DTE (NMA$C_PCXP_DTE) (1100) and use it as entity.
	MOVZBL	4(R7),R1			; Len of STRING (may be 0)
	INCL	R1			; Include count
	ADDL	#4,R1			; Distance to next param
	MOVL	R1,R3			; Save 
	ADDL3	R7,R1,R2
310$:
        CMPW	#NMA$C_PCXP_DTE,(R2)
	BEQLU	350$
	MOVL	#256,PARSDESC
	MOVAL	PARSE,PARSDESC+4
	PUSHAL	PARSDESC
	PUSHL   R2
	CALLS   #2,G^EMU_NML_PARSE
	BLBS    R0,320$
	RET
320$:
	ADDL	R1,R2
	CMPW	#-1,(R2)
	BNEQ	310$
	MOVL	#SS$_BADPARAM,R0
	RET
350$:
	MOVB	3(R2),R1		; Len of string
	INCL	R1			; Include count
	CMPL	#16,R1			; Limit?
	BLSS	370$			; Exceeded
	ADDL	#3,R2
	CLRL	R4			; Index
360$:
	MOVB	(R2)[R4],(R9)[R4]       ; Move id
	AOBLSS	R1,R4,360$
	MOVL	R3,R1			; Distance to next param
	MOVL	#SS$_NORMAL,R0
	RET
		
370$:
	MOVL	#SS$_BUFFEROVF,R0
	RET


400$:                                   ; Destination
	MOVZBL	4(R7),R1		; Len of STRING (may be 0)
	INCL	R1			; Include count
	ADDL	#4,R1			; Distance to next param
	MOVL	R1,R3			; Save 
	ADDL3	R7,R1,R2
410$:
        CMPW	#NMA$C_PCXS_DST,(R2)
	BEQLU	450$
	MOVL	#256,PARSDESC
	MOVAL	PARSE,PARSDESC+4
	PUSHAL	PARSDESC
	PUSHL   R2
	CALLS   #2,G^EMU_NML_PARSE
	BLBS    R0,420$
	RET
420$:
	ADDL	R1,R2
	CMPW	#-1,(R2)
	BNEQ	410$
	MOVL	#SS$_BADPARAM,R0
	RET
450$:
	MOVB	3(R2),R1		; Len of string
	INCL	R1			; Include count
	CMPL	#16,R1			; Limit?
	BLSS	470$			; Exceeded
	ADDL	#3,R2
	CLRL	R4			; Index
460$:
	MOVB	(R2)[R4],(R9)[R4]       ; Move id
	AOBLSS	R1,R4,460$
	MOVL	R3,R1			; Distance to next param
	MOVL	#SS$_NORMAL,R0
	RET
		
470$:
	MOVL	#SS$_BUFFEROVF,R0
	RET




500$:
	MOVZBL	4(R7),R1			; Len of STRING (may be 0)
	INCL	R1			; Include count
	ADDL	#4,R1			; Distance to next param
	MOVL	R1,R3			; Save 
	ADDL3	R7,R1,R2
510$:
        CMPW	#NMA$C_PCXA_NET,(R2)
	BEQLU	550$
	MOVL	#256,PARSDESC
	MOVAL	PARSE,PARSDESC+4
	PUSHAL	PARSDESC
	PUSHL   R2
	CALLS   #2,G^EMU_NML_PARSE
	BLBS    R0,520$
	RET
520$:
	ADDL	R1,R2
	CMPW	#-1,(R2)
	BNEQ	510$
	MOVL	#SS$_BADPARAM,R0
	RET
550$:
	MOVB	3(R2),R1		; Len of string
	INCL	R1			; Include count
	CMPL	#16,R1			; Limit?
	BLSS	570$			; Exceeded
	ADDL	#3,R2
	CLRL	R4			; Index
560$:
	MOVB	(R2)[R4],(R9)[R4]       ; Move id
	AOBLSS	R1,R4,560$
	MOVL	R3,R1			; Distance to next param
	MOVL	#SS$_NORMAL,R0
	RET
		
570$:
	MOVL	#SS$_BUFFEROVF,R0
	RET


	
	
	.CALL_ENTRY	MAX_ARGS=3, -
			HOME_ARGS=TRUE, - 
			INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			PRESERVE=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			LABEL=EMU_NML_NEXP 
;++
;2 EMU_NML_NEXP 
; Returns the len of the input param in R1
;3 Input	
;	.address of input block
;	.long	if present return distance to next paramater
;		if not return only len of data 
;3 Output	
; 	R1 = len (in bytes) of the paramater
; SS$_NORMAL	OK
; SS$_DATACHECK	A multiple field was found inside a multiple field. Illegal.
;--
	MOVL	4(AP),R7
	BBC	#15,(R7),150$		; Br if PARAM data
	BRW	1000$			; Counter
150$:
	EXTZV	#0,#11,(R7),R9		; Save param no. for exceptions
	ADDL	#2,R7			; Skip Param ID
	EXTZV	#6,#2,(R7),R4		; Extract coding
	CASEW	R4,#0,#3		; Select processing routine
165$:                             ; Bit   7 6
	.WORD	170$-165$          ;      0 0
	.WORD	171$-165$          ;      0 1
	.WORD	172$-165$          ;      1 0
	.WORD	173$-165$          ;      1 1
170$:
; Binary number
	EXTZV	#0,#3,(R7),R1		; Extract field len
	BEQL	1702$			; Br if image field
	BLBS	(AP),1701$		; Br if 1 param given
	ADDL	#3,R1			; Include coding
1701$:
	MOVL	#SS$_NORMAL,R0
	RET
1702$:
; Image field - should check bits 4-5. Len is @r7+1 with total len =
;	len+count+coding (len+4)
 	MOVZBL	1(R7),R1                ; Image len
	INCL	R1			; Include count
	BLBS	(AP),1701$		; Br if 1 param given
	ADDL	#3,R1			; Include coding
	BRB	1701$
171$:
; Ascii image
	INCL	R7			; Skip to len field
	MOVZBL	(R7),R1			; Get len of Field
	INCL	R1			; Include count byte
	BLBS	(AP),1711$		; Br if 1 param given
	ADDL	#3,R1			; Include count,coding
1711$:
	MOVL	#SS$_NORMAL,R0
	RET
172$:
; Single field
	EXTZV	#0,#5,(R7),R1		; Extract field len
	BLBS	(AP),1721$		; Br if 1 param given
	ADDL	#3,R1			; Include count,coding
1721$:
	MOVL	#SS$_NORMAL,R0
	RET
173$:
; Multiple fields
	EXTZV	#0,#5,(R7),R4		; Extract No. of fields 
	INCL	R7			; 1st field
	MOVL	R7,R11			; Save initial 
174$:
	EXTZV	#5,#2,(R7),R3		; Extract No. of fields 
	CASEW	R3,#0,#3		; Select processing routine
175$:                             ; Bit   7 6
	.WORD	180$-175$          ;      0 0  Bin number
	.WORD	181$-175$          ;      0 1  ascii field
	.WORD	182$-175$          ;      1 0  single field
	.WORD	183$-175$          ;      1 1  Mult field
180$:
; Strange exception:
; If ID byte (@r7+1)= 'FD' .or. 'F7' then this is a misformatted nodeid
; in either case add 1 to len.   
	EXTZV	#0,#3,(R7),R5		; Extract field len
	CMPB	1(R7),#125
	BEQLU	184$
	CMPB	1(R7),#247
	BEQLU	184$

18010$:
	INCL	R5			; Skip coding
	ADDL	R5,R7			; Move pointer
	SOBGTR	R4,174$
	BRW	190$			; next field
181$:
	INCL	R7			; Skip to len field
	MOVZBL	(R7),R5			; Get len of Field
	INCL	R5			; Include count
	ADDL	R5,R7			; Move pointer
	SOBGTR	R4,174$
	BRW	190$			; next field
182$:
	EXTZV	#0,#5,(R7),R5		; Extract field len
	BEQL	18210$			; Br if image field
	INCL	R5			; Include count
	ADDL	R5,R7			; Move pointer
	SOBGTR	R4,174$
	BRW	190$			; next field
18210$:
; Image field - should check bits 4-5. Len is @r7+1 with total len =
;	len+count+coding (len+4)
 	MOVZBL	1(R7),R5                ; Image len
	ADDL	#2,R5			; Include count and coding
	ADDL	R5,R7			; Move pointer
	SOBGTR	R4,174$
	BRW	190$			; next field
        
183$:
; Not possible - multiple fields within multiple fields
	MOVL	#SS$_DATACHECK,R0
	RET
184$:
;	INCL	R5			; Fix len
	BRB	18010$			
190$:
	SUBL3	R11,R7,R1		; Return total len
	ADDL	#3,R1			; Include count,coding
	MOVL	#SS$_NORMAL,R0
	RET

1000$:
; Counter data
	EXTZV	#13,#2,(R7),R3		; Extract counter len
	CASEW	R3,#0,#3		; Select processing routine
1001$:                             ; Bit   13 14
	.WORD	1002$-1001$          ;       0 0  Reserved
	.WORD	1010$-1001$          ;      0 1  8 bit
	.WORD	1020$-1001$          ;      1 0  16 bit
	.WORD	1030$-1001$          ;      1 1  32 bit
1002$:
        MOVL	#SS$_DATACHECK,R0	; no
	RET
1010$:
	MOVL	#1,R1			; Len
	BRB	1050$
1020$:
	MOVL	#2,R1			; Len
	BRB	1050$
1030$:
	MOVL	#4,R1			; Len
	BRB	1050$

1050$:
	BBC	#12,(R7),1060$		; Br if not bit mapped
	ADDL	#2,R1			; Add in bit map len
1060$:
	MOVL	#SS$_NORMAL,R0		; OK
	RET

	.CALL_ENTRY	MAX_ARGS=3, -
			HOME_ARGS=TRUE, - 
			INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			PRESERVE=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			LABEL=EMU_NML_XLT_HADDR   
;++
;2 EMU_NML_XLT_HADDR   
; Translate the NML encoded hadrware address to string.
;3 Input
; Address of string to xlate
; Addr of desc pointing to output.
; It is in form count (06) followed by the net format 6 byte address
;3 Output
; In standard form xx-xx-xx-xx-xx-xx
;3 returns
; SS$_NORMAL	OK
; SS$_BADPARAM	1st byt was not '6'
; Any return from $FAO
	MOVL	4(AP),R2		; Tag start
	CMPB	#6,(R2)			; Right len ?
	BEQL	1$			; Br if so
	MOVL	#SS$_BADPARAM,R0
	RET
1$:
	MOVZBL	6(R2),-(SP)
	MOVZBL	5(R2),-(SP)
	MOVZBL	4(R2),-(SP)
	MOVZBL	3(R2),-(SP)
	MOVZBL	2(R2),-(SP)
	MOVZBL	1(R2),-(SP)
	PUSHL	8(AP)
	PUSHL	8(AP)
	PUSHAL	HADDRSTR
	CALLS	#9,G^SYS$FAO
	RET

	.CALL_ENTRY	MAX_ARGS=3, -
			HOME_ARGS=TRUE, - 
			INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			PRESERVE=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			LABEL=EMU_NML_XLT_CHANNEL   
;++
;2 EMU_NML_XLT_CHANNEL   
; Translate the NML encoded Channel range to string
;3 Input
; Address of string to xlate
; Addr of desc pointing to output.
; It is in form:
;	.byte	(2)	len of 1st number in range
;	.word		1st channel
;	.byte	(2)	Len of 2nd channel
;	.word		2nd channel
; If len of 2nd channel is not 02 then assume 1 channel 
;
;3 Output
;	1st-2nd  eg. 10-1    (2 channels)
;	1st	 eg. 10	     (1 channel)
;3 returns
; SS$_NORMAL	OK
; SS$_BADPARAM	1st len was not 02
;--
	MOVL	@4(AP),R6		; R6 = LEN , R7 = ADDR
	ADDL	#DB_C_KSZ,R7		; Start of data
	CMPB	#2,(R7)			; Right len ?
	BEQLU	10$
	MOVL	#SS$_BADPARAM,R0
        RET
10$:
	CMPB	#2,3(R7)			; Right len ?
	BNEQU	30$ 				; Assume 1
20$:
	MOVZWL	4(R7),-(SP)
	MOVZWL	1(R7),-(SP)
	PUSHL	8(AP)
	PUSHL	8(AP)
	PUSHAL	CHANNELSTR
	CALLS	#5,G^SYS$FAO
	RET
30$:
	MOVZWL	1(R7),-(SP)
	PUSHL	8(AP)
	PUSHL	8(AP)
	PUSHAL	CHANNELSTR1
	CALLS	#4,G^SYS$FAO
	RET
	

	.CALL_ENTRY	MAX_ARGS=3, -
			HOME_ARGS=TRUE, - 
			INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			PRESERVE=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			LABEL=EMU_NML_XLT_HOSTID   
;++
;2 EMU_NML_XLT_HOSTID   
; Translate the NML encoded Host ID to string
;3 Input
; Address of string to xlate
; Addr of desc pointing to output.
; It is in form:
;	X'02 C4C9 4006 4845444745538'
;   02 		= encoding (len= 2)
;   c4c9        = decnet address
;   0406	= encoding (ascii image len = 6)
;   remainder	= name - if not present only address is included.
;
;3 Output
; In standard form :	aa.nnnn (name)
;			aa.nnnn  - when name not present
;
;3 returns
; SS$_NORMAL	OK
; SS$_BADPARAM	1st byt was not '02'
;		len of name was not 0-6
;--
	MOVL	4(AP),R6		; Tag start
	CMPB	#2,(R6)			; Right len ?
 	BEQL	1$			; Br if so
	MOVL	#SS$_BADPARAM,R0
	RET
1$:
	CLRQ	DADDR
	MOVZWL	1(R6),DADDR		; Make quad
	EDIV    #1024,DADDR,R1,R2       ; R1 = area, r2 = node
	TSTB	4(R6)			; Name present?
	BEQL	100$			; Br if not
	CMPB	4(R6),#6                ; Max name len
	BLEQ	20$			; Br if OK
	MOVL	#SS$_BADPARAM,R0
	RET
20$:
	ADDL3	#4,R6,-(SP)		; Name
	PUSHL	R2
	PUSHL	R1
	PUSHL	8(AP)
	PUSHL	8(AP)
	PUSHAL	NODEIDSTR
	CALLS	#6,G^SYS$FAO
	RET
100$:             			; No name
	PUSHL	R2
	PUSHL	R1
	PUSHL	8(AP)
	PUSHL	8(AP)
	PUSHAL	NODEIDSTR2
	CALLS	#5,G^SYS$FAO
	RET

	.CALL_ENTRY	MAX_ARGS=3, -
			HOME_ARGS=TRUE, - 
			INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			PRESERVE=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			LABEL=EMU_NML_XLT_OBJECT   
;++
;2 EMU_NML_XLT_OBJECT   
; Translate the NML encoded Object ID to string
;3 Input
; Address of string to xlate
; Addr of desc pointing to output.
; It is in form:
;	X'01 C4 4006 4845444745538'
;   01 		= encoding (len= 1)
;   01          = obj number
;   0406	= encoding (ascii image len = 0-31)
;   remainder	= name - if not present only Number is included.
;
;3 Output
; In standard form :	nn  - when name not present
;
;3 returns
; SS$_NORMAL	OK
; SS$_BADPARAM	1st byt was not '01'
;--
	MOVL	4(AP),R6		; Tag start
	CMPB	#1,(R6)			; Right len ?
 	BEQL	1$			; Br if so
	MOVL	#SS$_BADPARAM,R0
	RET

1$:
	MOVZBL	1(R6),-(SP)		; Number
	PUSHL	8(AP)
	PUSHL	8(AP)
	PUSHAL	OBJSTR
	CALLS	#4,G^SYS$FAO
	RET

			

	.CALL_ENTRY	 MAX_ARGS=3, HOME_ARGS=TRUE,-
			 INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>,-
			 PRESERVE=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>,-
			 LABEL=DN4ACTNOD

;++
;2 DN4ACTNOD
; Get Active node list from DECnet IV node
;
; This is the equivilent of $MC NCP TELL 'node' SHOW ACTIVE NODES
;
;
;3 Input
;	Node number	Word by val DECnet address in net fmt
;	Output		address of desc pointing to output
;	Nodes		address of long to write number of nodes found
;3 Output 
;  1 x word for each node returned. This is the DECnet address in network
; format for each node the target sees as active.
; A count of nodes found is returned in P3
;3 Returns
;	SS$_NORMAL 	- Data recieved and written
;	SS$_ACCVIO	- Cant read inpt or cant write outp
;	SS$_BUFFEROVF	- Buffer too small to receive response
;	Any returns GETDN4DATA
;--
; Check Params

	PROBER	#0,#2,4(AP)		; Check for read access
	BEQL	20$			; No
	PROBER	#0,#2,8(AP)		; Check for read access
	BEQL	20$			; No
        MOVQ	@8(AP),R8		; Get Outp desc
	PROBEW	#0,R8,(R9)		; Check for write access
	BEQL	20$			; No
	PROBEW	#0,#4,12(AP)		; Check for write access
	BNEQ	30$			; OK
20$:
	MOVL	#SS$_ACCVIO,R0 		; Signal Error
	RET				; Die
30$:
	CLRL	@12(AP)			; Number of nodes found
	MOVL	#8192,RETURN_D		; Reset desc
	PUSHAL	RETURN_D                ; Output block
	PUSHL	#DN4_W_ACTNOD           ; Active nodes
	PUSHL	4(AP)                   ; Node number
	CALLS	#3,G^GETDN4DATA
	BLBS	R0,40$
	RET
40$:
	MOVAL	RETURN,R7		; Rec'ed Param block
; Regs
; R6 (Output array)     Static
; R7 (Input block)        "
; R10 (end of input block)"
;
; Set end of inpt array 
	MOVZWL	RETURN_D,R1             ; Len of block
	ADDL3	R1,R7,R10		; Address of last input byte
; Here at begin of each node
50$:
        ADDL	#4,R7			; Skip return codes and entity ID
	SUBL	#2,R8   		; Deduct used space
	BGTR	55$                     ; Br if enough
	MOVL	#SS$_BUFFEROVF,R0
	RET				; Ran out of space
55$:
	MOVW	(R7),(R9)+		; Move in node numb
        INCL	@12(AP)			; Count it
; Find next node
	ADDL	#2,R7			; Skip node num
	EXTZV	#0,#6,(R7),R11		; Extract Name len
	ADDL	R11,R7			; Move pointer
	INCL	R7			; Include counter byte
60$:
	PUSHL	R8			; Len of entire param
	PUSHL	R7                      ; 
	CALLS	#2,G^EMU_NML_NEXP	; Get len
	BLBS	R0,70$
	RET
70$:
	ADDL	R1,R7
	CMPL	R10,R7			; END?
	BLEQU	90$
	CMPW	#-1,1(R7)		; Next Node?
	BNEQ	60$			; No - next param
	BRW	50$			; Yes -

90$:
; End of processing
	MOVL	#SS$_NORMAL,R0
	RET
	.CALL_ENTRY	MAX_ARGS=12, HOME_ARGS=TRUE, -
			INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			PRESERVE=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			LABEL=DN4LOOP

;
; Get and Validate Params
	CMPL	#2,(AP)			; 2 params?
	BEQLU	5$
	MOVL	#SS$_BADPARAM,R0
	RET
5$:
	PROBER	#0,#2,4(AP)  		; Read DECnet address?
	BEQL	10$			; No
	PROBEW	#0,#4,8(AP)  		; Write response time?
	BNEQ	20$			; Yes
10$:
	MOVL	#SS$_ACCVIO,R0		; Signal error
	RET
20$:
; Initialisation
	TSTW	NET_CHAN
	BNEQ	25$                     ; Br if we have channel
	$ASSIGN_S	CHAN=NET_CHAN,-
		 	DEVNAM=NET_DEVICE
	BLBS	R0,25$
	RET
25$:
	CLRL	@8(AP)    		; Clear response time
	MOVW	#NCB_LEN,NCB_DESC	; Make 1st part NCB
	$FAO_S	CTRSTR=NCB_CTRSTR,-
		OUTLEN=NCB_DESC,-
		OUTBUF=NCB_DESC,-
		P1=4(AP)
	BLBS	R0,30$
	RET
30$:
	MOVAL	NCB,R6
	MOVZWL	NCB_DESC,R7     
	MOVC3	#OPT_LEN,NCB_OPTDATA,(R6)[R7]	; 2nd part 
	ADDW2	#OPT_LEN,NCB_DESC
	$QIOW_S	-
		CHAN=NET_CHAN,-			; Make link
		FUNC=#IO$_ACCESS,-
		IOSB=IOSB,-
		P2=#NCB_DESC
	BSBW	ERROR_CHK
	MOVZWL	IOSB,R0			    ; Check IOSB return
	BSBW	ERROR_CHK
;
	MOVL	EXE$GL_ABSTIM_TICS,WRTIME       ; Get current time
	MOVL	#10,R10				; 10 loops
40$:
	$QIOW_S	-
		CHAN=NET_CHAN,-
		FUNC=#IO$_WRITEVBLK,-   ; Req
		IOSB=IOSB,-
		P1=REQP,-
		P2=REQP_LEN
	BSBW	ERROR_CHK
	MOVZWL	IOSB,R0			    ; Check IOSB return
	BSBW	ERROR_CHK
; Attempt to read response
	$QIOW_S	-
		CHAN=NET_CHAN,-
		FUNC=#IO$_READVBLK,-    ; Resp
		IOSB=IOSB,-
		P1=RETURN,-
		P2=#RETURN_LEN
	BSBW	ERROR_CHK
	MOVZWL	IOSB,R0			    ; Check IOSB return
	BSBW	ERROR_CHK
;
; Message OK
;	SOBGTR	R10,40$                     ; 10 loops
	SUBL3	WRTIME,EXE$GL_ABSTIM_TICS,@8(AP)    ; Write response time
	$QIOW_S	CHAN=NET_CHAN,-
		FUNC=#IO$_DEACCESS!IO$M_ABORT,-
		IOSB=IOSB
	MOVL	#SS$_NORMAL,R0	; Signal Success
	RET                     ; Exit to caller


; Subroutines
;
;
; Routine Error
ERROR_CHK:
	.JSB_ENTRY	INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			OUTPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>

	BLBC	R0,10$
	RSB
10$:
	MOVL	R0,R7		; Save Error
	$CANCEL_S	CHAN=NET_CHAN
	$QIOW_S	CHAN=NET_CHAN,-
		FUNC=#IO$_DEACCESS!IO$M_ABORT,-
		IOSB=IOSB
	MOVL	R7,R0	        ; Restore error
	RET
	

	.END	
