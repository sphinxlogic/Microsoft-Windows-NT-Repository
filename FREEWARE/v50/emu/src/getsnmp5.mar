	.TITLE	GETSNMP5 
	.IDENT	/05-002/
;	© 2000 P. Beaudoin
;  This software is supplied as is and the usual warranty
;  is implied - none. You may use, abuse, modify or
;  or ignore this software as you see fit but are
;  encouraged to give credit, as is good practice
;  when stealing with permission
; 
;
; Modifications:
; 01 001	Jan-1994	PB	Creation
; 02 001        FEB-1994	PB	Added Get_next function
;					OUTP desc written with final len
; 03 001	JUN-1994	PB	Changed calling seq, removed hardcoded
;					ObjID. See note
; 04 001	AUG 1994	PB	Removed hardcoded 1st 3 bytes
;					ObjID to simplfify get-next.
; 05 001	May 1995	PB	Implemented Comm String. See note.
; 05 002        Mar 1997	PB 	Implemented counters, See note
; V3. To allow other MIB info to be integrated, this routine now expects
; the Object ID to be passed along with the operation. The Operation can
; be Get, GetNext, Set. Set is not currently implemented and if it is will 
; require the community string to be also passed. (access control).
;
; V4. Removed the hadrcoded 1st 3 bytes of OBJ ID in order to simplify 
; get-next and allow possibility of multiple requests in 1 PDU.
;
; V5. Implemented  Community string. Caller can now specify the address
;     of an .ascic string used for access. If it is not provided, 
;     routine will use 'public'
; 5-001
;	Routine ensures it is mapped to the common counters section 
;	on each call and then records:
;	Number of polls
;	Number of good responses
;	Number of error responses
;	Number of no responses
;++
;1 GETSNMP5 
; This routine will request the specified param(s) via SNMP from the input
; IP layer address and, if succesful, return the data in the oupt area.
;
;2 Call_Sequence
;	P1	.address of 4 byte IP address of target node    (RO)
;	P2	.address of counted octect string of obj ID     (RO)
;	P3	.long of operation code by value                (RO)
;	P4	.address of desc pointing to outp               (WO)
;	P5	.address of .long where addr of returned 
;		obj Id is returned 				(WO)
; 	P6 	Address of counted ascii comunity string        (RO)
;
;		len of returned data is written back @P4+4
;2 Returns
;	SS$_NORMAL	Request successful, data written
;	SS$_UNREACHABLE	Failed to receive response from target
;	SS$_BADPARAM	- Comm string has len <= 0 
;			- Object is longer than allowed (SNMP_MAXOBJLEN)
;			- Operation is not GET or GETN
;	SS$_DATACHECK	SNMP returned error in staus field. Error is in outp.
;	SS$_BUFFEROVF	Outp buff too small to receive returned data
;	SS$_FORMAT	Returned frame in bad format
;	SS$_ACCVIO	Can't read input params or can't write outp 
;--
; Data
	.LIBRARY	"SYS$LIBRARY:LIB.MLB"
	.LIBRARY	"EMU5_LIB:EMU5.MLB"    	
	$IODEF			; I/O functions
        $INETSYMDEF    	; UCX 
	EMUSNMPDEF      	; EMU
	EMUCNTDEF
;
		.PSECT	GETSNMP5_DATA,WRT,NOEXE,QUAD

COUNTERS_A:	.QUAD	0
IOSTATUS:	.QUAD	0			; I/O status block block
INTLTIM:	.QUAD
INTIM_D:	.LONG	16
		.ADDRESS  INTIM
INTIM:		.ASCII	/0000 00:00:02.00/    	; Max Wait for 1st response
INTIM2:		.ASCII	/0000 00:00:05.00/    	; Max Wait for 2nd response
CHANNEL:	.WORD 	0	       		; Channel assigned to INET
DEV:		.ASCID	/BG:/			; Internet device name
;
;	INET Socket address structure for local host IP address
;
	.ALIGN	LONG
LOCAL_ADR:
	.WORD 	INET$C_AF_INET	; Inet domain
	.WORD	0		; Port number (Assigned) 
 	.LONG	0		; IP Address (system assigns local)
	.BLKB	8		; not used
LEN=.-LOCAL_ADR	
;
;	Peer Socket address structure
;
REMOTE_ADR:	
	.WORD 	INET$C_AF_INET	; Inet domain
	.BYTE 	0,161		; Port number 161 SNMP
TARGET:	.LONG	0		; Place P1 here
	.BLKB	8		; not used
;
;	Socket parameters for Socket creation
;
PAR11:	.WORD	INET$C_UDP		; UDP/IP protocol
	.BYTE	INET_PROTYP$C_DGRAM	; Socket type is datagram
	.BYTE	0
;
;	Descriptor of Local Socket for the Bind operation
;
PAR12:	.LONG	LEN
	.ADDRESS LOCAL_ADR
;
;	Descriptor of Remote Socket for the Connect operation
;
PAR13:	.LONG	LEN
	.ADDRESS REMOTE_ADR

MESSAGE:	
		.BYTE	SNMP_ASN1_SEQ          ; Start message
SNMPLEN:	.BYTE	0                      ; Message (len Mess - Null term) 
		.BYTE	SNMP_ASN1_INT          ; Integer
		.BYTE	1                      ; Len
		.BYTE	SNMP_ASN1_VERS         ; Version
		.BYTE	SNMP_ASN1_STR          ; Str
CSTRING:	.BLKB	506			; Total message len = 512

; Remainder of message is variable.
; Next block starts at end of community string and extends to the target obj.
SNMP_OPER:	.BYTE	0	           ; Req type
SNMPRLEN:	.BYTE	0                     ; req len (. - message_len)
		.BYTE	SNMP_ASN1_INT          ; Int
		.BYTE	4                      ; Len
SNMPREQID:	.LONG	1234                   ; Req ID
		.BYTE	SNMP_ASN1_INT          ; Int
		.BYTE	1                      ; Len
		.BYTE	0                      ; Status
		.BYTE	SNMP_ASN1_INT          ; Int
		.BYTE	1                      ; Len
		.BYTE	0                      ; Err index
		.BYTE	SNMP_ASN1_SEQ          ; Seq
SNMPLEN3:	.BYTE	0                     ; Len (. - message_len)
		.BYTE	SNMP_ASN1_SEQ          ; Seq
SNMPLEN4:	.BYTE	0                     ; Len (. - message_len)
		.BYTE	SNMP_ASN1_OBJID        ; Obj follows
SNMPOLEN:	.BYTE	0                      ; Len obj
; Here to previous comment is static len
BLK2LEN = .- SNMP_OPER
SNMP_TGTOBJ:	.BLKB	32  			; Obj

MESSAGE_LEN: 	.LONG	0		       ; Calculated
SNMPTERM:	.WORD	SNMP_ASN1_NULL         ; Terminator

;Misc
	.ALIGN	LONG
RETBUF:		.BLKB	512
RETBUF_LEN = .-RETBUF
CUROBJ:		.LONG	0
CSTRING_A:	.LONG
CURREQID:	.LONG
DEFCSTRING:	.ASCIC	/public/               ; Count(6) + 6 char
;
	.PSECT	GETSNMP5_CODE,EXE,NOWRT,QUAD
	.CALL_ENTRY	MAX_ARGS=6, HOME_ARGS=TRUE, -
			INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			PRESERVE=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			LABEL=GETSNMP5
;	Ensure we are mapped to counts
	TSTL	COUNTERS_A
	BNEQ	5$
	PUSHAL	COUNTERS_A		; Counters
	CALLS	#1,G^MAP_COUNTERS
        BLBS	R0,5$
	RET

; Get and Validate Params
5$:
	PROBER	#0,#4,4(AP)  		; Read IP address?
	BNEQ	10$			; OK
	MOVL	#SS$_ACCVIO,R0		; Signal error
	RET
10$:
	MOVL	8(AP),R8		; Address of obj
	TSTB	(R8)
	BNEQ	20$			; Not = 0 - OK
	MOVL	#SS$_BADPARAM,R0	; Signal error
	RET
20$:
	CMPB	(R8),#SNMP_MAXOBJLEN	; Bigger than allowed?
	BLEQU	30$			; Br if not
	MOVL	#SS$_BADPARAM,R0	; Signal error
	RET
30$:
	CMPB	12(AP),#SNMP_PDU_GET
	BEQLU	40$			; OK
	CMPB	12(AP),#SNMP_PDU_GETN
	BEQLU	40$			; OK
	MOVL	#SS$_BADPARAM,R0	; Signal error
	RET
40$:

	MOVQ	@16(AP),R6     		; R6 = len, R7 = addr retbuf
	PROBEW	#0,R6,(R7)     		; Write?
	BNEQ	50$			; OK
	MOVL	#SS$_ACCVIO,R0		; Signal error
	RET
50$:
	PROBEW	#0,#4,20(AP)     	; Write returned obj ID?
	BNEQ	60$			; OK
	MOVL	#SS$_ACCVIO,R0		; Signal error
	RET
60$:
	CMPL	#6,(AP)			; Param present?
	BNEQ	80$
	MOVZBL	@24(AP),R1		; Get len
	BEQL	80$			; If = 0 then branch
	PROBER	#0,R1,24(AP)     	; Read string?
	BNEQ	70$			; OK
	MOVL	#SS$_ACCVIO,R0		; Signal error
	RET
70$:
	MOVL 	24(AP),CSTRING_A	; Use provided string
	BRB	PARAMS_OK
80$:
	MOVAL	DEFCSTRING,CSTRING_A	; Use default
	

PARAMS_OK:
 	TSTW	CHANNEL			; Init?
	BNEQ	CONSTRUCT_SNMP		; Done - Br
;
;	Assign the INET device
;
	$ASSIGN_S	DEVNAM=DEV, CHAN=CHANNEL
	BLBS	R0,5$
	RET
5$:

; Create a Socket and Bind the socket to a port and address
;
	$QIOW_S	CHAN=CHANNEL, -		; Channel
		FUNC=#IO$_SETMODE,-	; I/O function
		IOSB= IOSTATUS, -	; I/O status
		P1=PAR11		; Socket creation parameters
	BSBW	ERROR_CHK
	BLBS	IOSTATUS,CONSTRUCT_SNMP
	MOVZWL	IOSTATUS,R0
	RET
; 
CONSTRUCT_SNMP:
; Assemble SNMP req frame
; Insert community string
	MOVAL	CSTRING,R3		; Destination
	MOVL	CSTRING_A,R4		; Source
	MOVZBL	(R4),R2			; Len
	BNEQU	10$			; Br if len > 0 
	MOVL	#SS$_BADPARAM,R0	; Signal error
	RET
10$:
	INCL	R2			; Include count byte
20$:
	MOVB	(R4)+,(R3)+		; Move counted string in
	SOBGTR	R2,20$			
; Fill in fields
	MOVB	12(AP),SNMP_OPER       ; Set operation
	MOVL	@4(AP),TARGET		; Set target address
	MOVL	EXE$GL_ABSTIM,SNMPREQID	; Create (Probably) unique ID
	MOVL	SNMPREQID,CURREQID	; Save in (non-moving) mem
; Insert Object ID
;
	MOVAL	SNMPOLEN,R10		; Start of OBJ id
	MOVZBL	(R8),R9			; Loop control
	INCL	R9			; Include count
30$:
	MOVB	(R8)+,(R10)+
	SOBGTR	R9,30$
	MOVW	SNMPTERM,(R10)		; Move terminator
; Calc lens
	ADDB3	#4,SNMPOLEN,SNMPLEN4	; Set len of req
	ADDB3	#6,SNMPOLEN,SNMPLEN3	; Set len of req
	ADDB3	#20,SNMPOLEN,SNMPRLEN	; Set len of req
	ADDB3	#6,SNMPRLEN,SNMPLEN	; Set len of message
        MOVZBL 	@CSTRING_A,R1           ; Get len of comm strng
	INCL	R1                      ; Include count byte
	ADDB	R1,SNMPLEN              ; Add len of comm str
	CLRL	MESSAGE_LEN             ;
	ADDB3	#2,SNMPLEN,MESSAGE_LEN	; Set len of QIO Message
; assemble message
	MOVAL	 MESSAGE,R10            ; Start of message
	ADDB	#6,R10			; Constant to comm string
	ADDL	R1,R10			; Point to end of comm str
	MOVC3	#BLK2LEN,SNMP_OPER,(R10); Move constant size block
	ADDL	#BLK2LEN,R10		; Move pointer
        MOVZBL	SNMPOLEN,R11            ; Get len of obj
	INCL	R11			; Include term
	MOVC3	R11,SNMP_TGTOBJ,(R10)	; Move last part of message
	CLRB	(R10)[R11]		; Make terminator
SEND_MESSAGE:
; Set up for send
	CLRL	R11			; Attempt count
	MOVAL	INTIM,INTIM_D+4		; Set 1 second timeout
	MOVL	COUNTERS_A,R1
	INCL	CNT_POL_L_SNMPREQ(R1)
; Send req
30$:
	$QIOW_S	CHAN=CHANNEL, -		; Channel
		FUNC=#IO$_WRITEVBLK,-	; I/O function
		IOSB= IOSTATUS, -	; I/O Status block
		P1=MESSAGE,-		; I/O buffer address
		P2=MESSAGE_LEN,-	; I/O buffer length
		P3= #PAR13              ; Remote IP address
	BSBW	ERROR_CHK
	BLBS	IOSTATUS,35$
	MOVZWL	IOSTATUS,R0
	RET
; Set timer and que read for response
35$:
	BSBW	SET_TIME		; Don't wait forever
	$QIOW_S	CHAN=CHANNEL, -		; Channel
		FUNC=#IO$_READVBLK,-	; I/O function
		IOSB= IOSTATUS, -	; I/O Status block
		P1=RETBUF,-		; I/O buffer address
		P2=#RETBUF_LEN 		; I/O buffer length
	BSBW	ERROR_CHK		; Que error is fatal
	BLBS	IOSTATUS,70$            ; Br on no err
; SNMP uses UDP and is unreliable. If we recv timeout on 1st attempt with 
; 1 second timeout, try once more with 2 sec timeout.
	CMPW	IOSTATUS,#SS$_CANCEL	; Timeout?
	BEQLU	50$			; Br if so
	MOVZWL	IOSTATUS,R0
	RET				; Exit with error
50$:
	TSTL	R11			; Number of atttempts
	BEQL	60$			; Br if 0
	MOVL	COUNTERS_A,R1
	INCL	CNT_POL_L_SNMPNORESP(R1)
	MOVL	#SS$_UNREACHABLE,R0     ; Tried 2x
	RET
60$:
	MOVAL	INTIM2,INTIM_D+4	; Set 2 second timeout
        INCL	R11			; Flag 2nd attempt
	BRW	30$			; Once more
70$:
; Here on good return
	MOVL	COUNTERS_A,R1
	INCL	CNT_POL_L_SNMPRESP(R1)
	CLRL	-(SP)
	CLRL	-(SP)
	CALLS	#2,G^SYS$CANTIM		; Stop Read timer - No error Check
; Check return
	MOVAL	RETBUF,R11		; Parse outp
	INCL	R11			; Skip seq1
	BSBW	1000$			; Get len this len field in R1
        ADDL	R1,R11			; Skip SMNPLEN field
	ADDL	#3,R11			; Skip version (3 bytes)
        CMPB	#SNMP_ASN1_STR,(R11)	; This should be str type
	BEQLU	32$			; Error if not
	BRW	90$
32$:
        INCL	R11			; Skip to len
	MOVZBL	(R11),R1		; Get len
	ADDL	R1,R11			; Skip field...
	INCL	R11			;  and count
        CMPB	#SNMP_PDU_RESP,(R11)	; This should be Response type
        BEQLU	34$                     ; No
	BRW	90$
34$:
	INCL	R11			; Skip req field
	BSBW	1000$                   ; Len len
	ADDL	R1,R11                  ; Skip to reqid
        CMPB	#SNMP_ASN1_INT,(R11)	; This should be Integer type
	BEQLU	36$
	BRW	90$			;
36$:
	INCL	R11
	MOVZBL	(R11),R1		; Get len REQID
	INCL	R11
	CMPL	(R11),CURREQID		; Confirm this is response expected
	BEQLU	38$ 			; OK
	BRW	35$                     ; Try to read again
38$:
	ADDL	R1,R11			; SKip Field ...
	TSTB	2(R11)			; Test status
	BEQL	3801$
	BRW	80$			; Error
3801$:
	ADDL	#7,R11			; Skip status, following seq
	BSBW	1000$
	ADDL	R1,R11
	INCL	R11			; Skip seq
	BSBW	1000$
	ADDL	R1,R11			; Point to objid
        CMPB	#SNMP_ASN1_OBJID,(R11)	; This should be OBJ type
	BEQLU	3802$
	BRW	90$                     ; No
3802$:
	INCL	R11
	MOVL	R11,@20(AP)		; Return this addr (for get_next)

	MOVZBL	(R11),R1
	ADDL	R1,R11		
	INCL	R11			; Found the &*^% data!
	MOVAL	RETBUF,R10
	SUBL3	R10,R11,R9              ; Len of header
	SUBW3	R9,IOSTATUS+2,R8	; Len of data
	CMPW    R8,R6			; Enough room?
	BGTRU	45$                     ; Br if no
	MOVC3	R8,(R11),(R7)		; Move to caller
	MOVZWL	R8,@16(AP)		; Write len returned
	MOVL	#SS$_NORMAL,R0
	RET

45$:
	MOVL	#SS$_BUFFEROVF,R0
	RET

80$:
; SNMP Returned an error. Return this to caller
; If this is get-next error may be 'passed end of table'.
	MOVL	COUNTERS_A,R1
	INCL	CNT_POL_L_SNMPERR(R1)
	MOVL	(R11),(R7)		; Get SNMP err 
	MOVW	4(R11),4(R7)            ; Place in outp
	MOVL	#SS$_DATACHECK,R0       ; Signal SNMP err
	RET
90$:
; Unexpected frame format
	MOVL	COUNTERS_A,R1
	INCL	CNT_POL_L_SNMPERR(R1)
	MOVL	#SS$_FORMAT,R0
	RET
1000$:
	.JSB_ENTRY	INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, OUTPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>

; Ret len of len (no kidding!) 
; Check byt @r11. If < 127 then len ret = 1
; if > 127 then extract 7 bits @r11. Number of following bytes containing len
; retunrn this len+1
	MOVL	#1,R1
	CMPB	#127,(R11)	
	BLEQU	1010$
	RSB
1010$:
	EXTZV	#0,#7,(R11),R1
	INCL	R1
	RSB

ERROR_CHK:
	.JSB_ENTRY	INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, OUTPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>

	BLBC	R0,10$                  ; Br if error
	RSB                             ;
10$:
	RET
SET_TIME:
	.JSB_ENTRY	INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, OUTPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>


; Set the timeout for read
;
;
; Set the timer
; Convert the input time - must be DELTA
;
	$BINTIM_S-	
		TIMBUF=INTIM_D,-
		TIMADR=INTLTIM
;
	$SETIMR_S-
		DAYTIM=INTLTIM,-
		ASTADR=LOST_SNMP5_MSG             ; AST address
        RSB
; Here on Read Timout
;
	.CALL_ENTRY	MAX_ARGS=0, HOME_ARGS=TRUE, -
			INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			PRESERVE=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			LABEL=LOST_SNMP5_MSG
	PUSHL	CHANNEL
	CALLS	#1,G^SYS$CANCEL		; Cancel I/O - No error check
	RET                             ; Exit to main
	.END 

