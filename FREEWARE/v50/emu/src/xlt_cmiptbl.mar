	.TITLE	XLT_CMIPTBL 
	.IDENT /V01-002/
;	© 2000 P. Beaudoin
;  This software is supplied as is and the usual warranty
;  is implied - none. You may use, abuse, modify or
;  or ignore this software as you see fit but are
;  encouraged to give credit, as is good practice
;  when stealing with permission
; 
;++
;1 XLT_CMIPTBL 
; Routine to further translate CMIP codes to .ascii strings. Many param
; values in CMIP are coded values that this routine interprets.
; This is a single routine using a standard table setup to interpret
; the codes in many tables.
;2 Description
;  Any CMIP param is identified by the table it is in and the param number
; in that table. A list at the head of this routine is a lookup table
; and if the table.param (2x .longs) is found, the 3rd long is the address
; of the table to use in translation. 
; Each table is headed by 2x .longs showing the length of each entry
; and the Number of Entries. This .quad is immediately followed by 
; the number of .ascii strings specified each of a fixed length.
; Notes:
; The Number of Entries is  highest value that the table will translate
; the codes are normally 0-x so the number of entries will normally be
; the actual number -1 
; The VALUE must be an integer and len must be 1,2,3 or 4 bytes
;2 Table_example
;  Lookup Table:
;	.long	65536		table
;	.long	1		param
;	.address tbl1		table
;     
; tbl1:
;	.long	4		len
;	.long	2		Highest value allowed
;	.ascii	/On  /          (0)
;	.ascii 	/Off /          (1)
;	.ascii	/Shut/          (2)
;
; If the param to be translated is in table 65536 and is param 1 then
; tbl1 is accessed and after sanity checks, .ascii string "off " is returned.
;2 Input
;	.address of desc pointing to EMUDB formatted CMIP record.
;	.address of desc pointing to outp
;2 Output
;	If the entry is found, the descriptor is written with the len and 
;	the outp area is written with the string found.
;2 Return
;	SS$_NORMAL		OK
;	SS$_ACCVIO		Count not read inpt/ write outp
;	SS$_BUFFEROVF		Outp buffer too small
;	SS$_ITEMNOTFOUND        Item does not exist in lookup table
;	SS$_INVARG 		Table found but param value out of range
;--
	.LIBRARY	"EMU5_LIB:EMU5.MLB"
	EMUCMIPDEF
	EMUDBDEF
	$SSDEF

	.PSECT	DATA WRT,NOEXE,QUAD
INT:	.LONG
TABLE_LOOKUP:
	.LONG	DB_FAC_C_DN5_MODEM_LINE		; Modem line
	.LONG	105	       			; Param
	.ADDRESS MODEM_LINE_TBL			; Table

	.LONG	DB_FAC_C_DN5_MODEM_LINE		; Modem line
	.LONG	106	       			; Param
	.ADDRESS MODEM_LINE_TBL			; Table

	.LONG	DB_FAC_C_DN5_MODEM_LINE		; Modem line
	.LONG	107	      			; Param
	.ADDRESS MODEM_LINE_TBL			; Table

	.LONG	DB_FAC_C_DN5_MODEM_LINE		; Modem line
	.LONG	108	      			; Param
	.ADDRESS MODEM_LINE_TBL			; Table

	.LONG	DB_FAC_C_DN5_MODEM_LINE		; Modem line
	.LONG	109	       			; Param
	.ADDRESS MODEM_LINE_TBL			; Table

	.LONG	DB_FAC_C_DN5_MODEM_LINE		; Modem line
	.LONG	111	       			; Param
	.ADDRESS MODEM_LINE_TBL			; Table

	.LONG	DB_FAC_C_DN5_MODEM_LINE		; Modem line
	.LONG	112	       			; Param
	.ADDRESS MODEM_LINE_TBL			; Table

	.LONG	DB_FAC_C_DN5_MODEM_LINE		; Modem line
	.LONG	125	       			; Param
	.ADDRESS MODEM_LINE_TBL			; Table

	.LONG	DB_FAC_C_DN5_MODEM_LINE		; Modem line
	.LONG	140	       			; Param
	.ADDRESS MODEM_LINE_TBL			; Table

	.LONG	DB_FAC_C_DN5_MODEM_LINE		; Modem line
	.LONG	141	       			; Param
	.ADDRESS MODEM_LINE_TBL			; Table

	.LONG	DB_FAC_C_DN5_MODEM_LINE		; Modem line
	.LONG	142	       			; Param
	.ADDRESS MODEM_LINE_TBL			; Table

	.LONG	DB_FAC_C_DN5_MODEM_LINE		; Modem line
	.LONG	22	       			; Param
	.ADDRESS MODEM_IF_STATE			; Table

	.LONG	DB_FAC_C_DN5_MODEM_LINE		; Modem line
	.LONG	25	       			; Param
	.ADDRESS MODEM_IF_TYPE 			; Table

	.LONG	DB_FAC_C_DN5_MODEM_LINE		; Modem line
	.LONG	3	       			; Param
	.ADDRESS MODEM_CONN_TYPE		; Table

	.LONG	DB_FAC_C_DN5_MODEM_LINE		; Modem line
	.LONG	4		  		; Param
	.ADDRESS MODEM_CONN_MODE       		; Table

	.LONG	DB_FAC_C_DN5_MODEM_LINE		; Modem line
	.LONG	5	       			; Param
	.ADDRESS MODEM_DUPLEX  			; Table

	.LONG	DB_FAC_C_DN5_MODEM_LINE		; Modem line
	.LONG	11	       			; Param
	.ADDRESS MODEM_CLOCK   			; Table

	.LONG	DB_FAC_C_DN5_MODEM_LINE		; Modem line
	.LONG	7	       			; Param
	.ADDRESS MODEM_CTRL    			; Table

	.LONG	DB_FAC_C_DN5_MODEM_LINE		; Modem line
	.LONG	10	       			; Param
	.ADDRESS MODEM_CTRL    			; Table

	.LONG	DB_FAC_C_DN5_MODEM_LINE		; Modem line
	.LONG	32	       			; Param
	.ADDRESS MODEM_AVAIL   			; Table

	.LONG	DB_FAC_C_DN5_MODEM_LINE		; Modem line
	.LONG	21				; Param
	.ADDRESS GEN_STATE		; Table

	.LONG	DB_FAC_C_DN5_MODEM_LINE		; Modem line
	.LONG	24	       			; Param
	.ADDRESS MODEM_LOOP_STATE		; Table

	.LONG	DB_FAC_C_DN5_NODE   		; Node
	.LONG	11
	.LONG	NODE_STATE

	.LONG	DB_FAC_C_DN5_CSMACDSTN		; CSMACD Station
	.LONG	61
	.LONG	CSMACD_STATION_STATE

	.LONG	DB_FAC_C_DN5_CSMACDSTN		; CSMACD Station
	.LONG	64
	.LONG	CSMACD_STATION_RECMODE

	.LONG	DB_FAC_C_DN5_EVD_RECLOG	
	.LONG	0
	.LONG	EVL_LOGGING_TYPE 

	.LONG	DB_FAC_C_DN5_EVD_RECLOG	
	.LONG	2
	.LONG	GEN_STATE 

 	.LONG	DB_FAC_C_DN5_EVD_SNK
	.LONG	18
        .LONG	EVL_LOGGING_TYPE

	.LONG	DB_FAC_C_DN5_EVD_SNK
	.LONG	11
	.LONG	GEN_STATE 
 
	.LONG	DB_FAC_C_DN5_RTN 
	.LONG	1
	.LONG	RTN_ROUTER_TYPE

	.LONG	0		; Terminator

RTN_ROUTER_TYPE:
	.LONG	 16
	.LONG	 9
	.ASCII	/Phase V Endnode /
	.ASCII	/Non-DNA Router  /
	.ASCII	/Phase V Router  /
	.ASCII	/Phase V L1 Rtr  /
	.ASCII	/Phase V L2 Rtr  /
	.ASCII	/Phase IV Endnode/
	.ASCII	/Phase IV L1 Rtr /
	.ASCII	/Phase IV L2 Rtr /
	.ASCII	/Phase IV+ L2 Rtr/
	.ASCII	/Phase IV Router /



EVL_LOGGING_TYPE:
	.LONG	8
	.LONG	2
	.ASCII	/Console /
	.ASCII	/Monitor /
	.ASCII	/File    /

CSMACD_STATION_RECMODE:
	.LONG	12
	.LONG	2
	.ASCII	/Normal      /
	.ASCII	/AllMulticast/
	.ASCII	/Promiscious /

CSMACD_STATION_STATE:
	.LONG	12
	.LONG	3
	.ASCII	/Off         /
	.ASCII	/Initialising/
	.ASCII	/On          /
	.ASCII	/Failed      /

NODE_STATE:
	.LONG	8		; Len
	.LONG	3               ; Highest value
	.ASCII	/Dead    /
	.ASCII	/Booting /
	.ASCII	/Off     /
	.ASCII	/On      /
MODEM_LOOP_STATE:
	.LONG	8
	.LONG	6
	.ASCII	/Null    /
	.ASCII	/Driver  /
	.ASCII	/Device  /
	.ASCII	/Local   /
	.ASCII	/Remote  /
	.ASCII	/Connectr/
	.ASCII	/External/


GEN_STATE:
	.LONG	4
	.LONG	1
	.ASCII	/Off /
	.ASCII	/On  /

MODEM_AVAIL:
	.LONG	12
	.LONG	1
	.ASCII	/Device Pres /
	.ASCII	/No Device   /

MODEM_CTRL:
	.LONG	4
	.LONG	1
	.ASCII	/Full/
	.ASCII	/None/
MODEM_ENCODING:
	.LONG	4
	.LONG	1
	.ASCII	/NRZI/
	.ASCII	/Norm/

MODEM_CLOCK:
	.LONG	8
	.LONG	2
	.ASCII	/External/
	.ASCII	/Internal/
	.ASCII	/Reflect /

MODEM_DUPLEX:
	.LONG	4
	.LONG	1
	.ASCII	/Full/
	.ASCII	/Half/
MODEM_CONN_MODE:
	.LONG	12
	.LONG	1
	.ASCII	/Synchronous /
	.ASCII	/Asynchronous/
MODEM_CONN_TYPE:
	.LONG	12
	.LONG	1
	.ASCII	/Non Switched/
	.ASCII	/Switched    /

MODEM_LINE_TBL:
	.LONG	12		; Length
	.LONG	3		; Highest value
	.ASCII	/Unknown     /
	.ASCII	/Not Applic. /
        .ASCII	/Asserted    /
	.ASCII	/Not Asserted/

MODEM_IF_STATE:
	.LONG	16		; Length
	.LONG	9		; Highest value
	.ASCII	/DTE Not Ready   /
	.ASCII	/Pending DTE     /
	.ASCII	/DTE Ready       /
	.ASCII	/Ready           /
	.ASCII	/Connecting      /
	.ASCII	/Connected       /
	.ASCII	/Disconnecting   /
	.ASCII	/Transmit Enabled/
	.ASCII	/Receive Enabled /
	.ASCII	/Full Enabled    /
MODEM_IF_TYPE:
	.LONG	12		; Length
	.LONG	11		; Highest value
	.ASCII	/Null Value  /
	.ASCII	/Unknown     /
	.ASCII	/No Cable    /
	.ASCII	/V28         /
	.ASCII	/RS232C      /
	.ASCII	/V35         /
	.ASCII	/RS449       /
	.ASCII	/Loopback    /
	.ASCII	/Null Modem  /
	.ASCII	/X21         /
	.ASCII	/RS422       /
	.ASCII	/RS423-V24   /


	.PSECT	CODE	EXE,NOWRT,LONG

	.CALL_ENTRY	MAX_ARGS=2, -
			HOME_ARGS=TRUE, - 
			INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			PRESERVE=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			LABEL=XLT_CMIPTBL

	MOVQ	@4(AP),R8			; REC desc
	PROBER	#0,R8,(R9)			; Check for write access
	BEQL	10$				; No
	MOVQ	@8(AP),R6			; Outp desc
	PROBER	#0,R6,(R7)			; Check for write access
	BNEQ	20$				; OK
10$:
	MOVL	#SS$_ACCVIO,R0
	RET
20$:
	MOVL	DB_REC_L_TABLE(R9),R3		; Table
	MOVL	DB_REC_L_PARAM(R9),R4		; Param
	MOVAL	TABLE_LOOKUP,R10		; 
100$:
	CMPL	R3,(R10)			; Table match?
	BEQLU	120$
110$:
	ADDL	#12,R10
	TSTL	(R10)
	BNEQ	100$
	MOVL	#SS$_ITEMNOTFOUND,R0
	RET
120$:
	CMPL	R4,4(R10)			; Param match?
	BNEQU	110$
; Found match
	MOVL	8(R10),R11			; Addr of table
; Get value into .long

        MOVL  	DB_REC_L_CLEN(R9),R1                        ; Get len
        BEQL    130$                             ; Br if len = 0
        CMPL    R1,#4
        BLEQ    140$                             ; Br if len <= 4
130$:
	MOVL	#SS$_BADPARAM,R0
        RET
140$:
        DECL    R1                              ; Make Inpt index
        ADDL3   #DB_REC_C_CDATA,R9,R2           ; Addr of value
        MOVAL	INT,R5
        CLRL    (R5)                          ; Clear value
150$:
; Reverse byte order
        MOVB    (R2)+,(R5)[R1]          ; Move value
        SOBGEQ  R1,150$
;
	MOVL	INT,R5
	CMPL	R5,4(R11)		; Valu in range?
	BLEQ	160$
	MOVL    #SS$_INVARG,R0
	RET
160$:
	MULL	(R11),R5		; Make offset
	ADDL3	R5,R11,R10		; Addr string
	MOVC3	(R11),8(R10),(R7)       ; Move string (account for head)
	MOVL	(R11),@8(AP)		; Set len
	MOVL	#SS$_NORMAL,R0
	RET

	.END	

