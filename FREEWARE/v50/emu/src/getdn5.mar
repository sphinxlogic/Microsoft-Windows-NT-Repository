	.TITLE	GETDN5
	.IDENT	/02-003/
;	© 2000 P. Beaudoin
;  This software is supplied as is and the usual warranty
;  is implied - none. You may use, abuse, modify or
;  or ignore this software as you see fit but are
;  encouraged to give credit, as is good practice
;  when stealing with permission
; 
;++
;1 GETDN5
; This routine will request the specified param(s) via CMIP from the input
; OSI routing layer address and, if succesful, return the data in the oupt 
; area.
;
;2 Modifications:
; 01 001	Jul-1995	PB	Creation
; 02 002	Sep-1996	PB	Changed request format to allow
;					greater flexibility
; 02 003	Mar-1997	PB	Added counters
;2 Inputs
;	Node number	Word by val DECnet address in net fmt
;   	Function:
;		Entityclass	.addr of entity class
;		Instance	.addr of instance
;		Attribute	.long value of attributes
;	Output		Long adddress of desc pointing to output
;3 Function:
;  A function is in 3 parts. Each part is a counted string.
;4 Entity class. An object ID detailing the entity this operation is on.
; example:
; 	.byte		; Len of this structure
;	.byte	^x80	; Contect specific tag (ObjId in this case)
; len1:  .byte	8	; Len of the ObjId  (change for each func)
; Following is constant
;       .byte	^X2B			; iso, Identtified org
;       .byte	^X0C			; ECMA
;       .byte	^X02			; Member Company
;       .byte	^X87			; Dec ...
;       .byte	^X73			; ... (1011)
;       .byte	^X02			; EMA
;       .byte	^X01			; Entities
;       .byte	^X01			; Node
; followed by any entities below node. Len1: is the len from Len1 to 
; the end of ENTITY CLASS
; Examples:
;	04	routing         ( no instance)
;	04,02	routing circuit (needs instance)
;
;4 Instance
; 	^XA3		Entity instance
; Here the len (may be 0 ) of instances 
; Examples:
; sho rout circ *
;	04	len
;	05	Universal null   no name for routing
;	0	Null
;	5D	wildcard         all circuits
;	0	terminator       end
;
; sho rout circ L601-3-0
;	OE	Len
;	05	No name for routing ent
;	0
;	5A	applic 26 (DNS SimpleName)
;	01	ascii encoded simplename
;	08	len
;	4C	L
;	36	6
;	30	0
;	31	1
;	2d	-
;	33	3
;	2d	-
;	30	0
;
;4 Attributes
; This is the info to return and is supplied by symbol. Possible entries:
;	ALL	0
;	ID	1
;	STATUS	2
;	COUNT	3
;	CHAR	4
; In a future implementation this may change to a counted string to allow
; specific data to be returned
;2 Returns:
;	SS$_NORMAL	Request successful, data written
;	SS$_UNREACHABLE	Failed to receive response from target
;	SS$_BADPARAM	Invalid function code
;	SS$_DATACHECK	Some error returned - detail in output 
; 	SS$_REJECT	Connection rejected by remote node
; 	SS$_ABORT	Condition handler called - unhandled error
;	SS$_ACCVIO	Can' read input params or can't write outp 
;	SS$_BUFFEROVF	Outp buffer not large enough 

; CMIP errors are signaled by returning SS$_DATACHECK and the error detail
; is returned as data.
;--
; Data
	.LIBRARY	"SYS$LIBRARY:LIB.MLB"
	.LIBRARY	"EMU5_LIB:EMU5.MLB"    ; Temp loc of inet defs

	EMUCMIPDEF
	EMUCNTDEF
	$IODEF
	$SSDEF
		
NUM=0
VER=5
DECO=0
UECO=0
;
		.PSECT	GETDN5_DATA,WRT,NOEXE,QUAD
COUNTERS_A:     .QUAD	0
NCB_DESC:	.WORD	NCB_LEN
		.WORD	0
		.ADDRESS	-
			NCB
NCB:		.BLKB	40
NCB_LEN=<.-NCB>
IOSB:		.QUAD	0
NET_CHAN:	.WORD	0
NET_DEVICE:	.ASCID	/_NET:/
NODE_ADDRESS:	.LONG	51391
NCB_CTRSTR:	.ASCID	?!UL::"19=/?<NUM><NUM>
NCB_OPTDATA:	.ASCIC	<VER><DECO><UECO>
		.BLKB	17-<.-NCB_OPTDATA>
		.ASCII	/"/
OPT_LEN=<.-NCB_OPTDATA>
;
;
;
MESSAGE:	
		.BYTE	CMIP_PDU_INVOKE         ; 
INVOKELEN:	.BYTE	0                     	; Message len - here to end
		.BYTE	CMIP_ASN1_INT	       	; Integer
		.BYTE	1		       	; Len of following		
CMIPREQID:	.BYTE	6                   	; Req ID
		.BYTE	CMIP_ASN1_INT	       	; Integer
		.BYTE	1		       	; Len of following		
		.BYTE	CMIP_OPR_GET           	; Get request
		.BYTE	CMIP_ASN1_SEQ	       	; Sequence
ENTLEN:		.BYTE	0			; Here to end
		.BYTE	^X80                    ; Context spec tag

PART1_LEN = .-INVOKELEN
REST_OF_MESSAGE:
		.BLKB	512			; Each function completes
ATTRIBUTES:						; the request as required
		.BYTE	^XAB			; Attr list start      
		.BYTE	^X82			; Len (next 2 bytes)
		.BYTE	0			; Len of following
		.BYTE	3			; Len of following
       		.BYTE	^X81			; All atributes
       		.BYTE	01      		; Node
ATTR:       	.BYTE	00     			; Insert symbol here
ATTR_LEN = .-ATTRIBUTES
	 
	.ALIGN	LONG
MESSAGE_LEN: 	.LONG				; Calculated
INTLTIM:	.QUAD    0
FIVE_SEC:	.ASCII	/0000 00:00:05.00/
FIVE_SEC_D:	.LONG	.-FIVE_SEC
		.ADDRESS  FIVE_SEC

;
	.PSECT	GETDN5_CODE,EXE,NOWRT,QUAD
	.CALL_ENTRY	MAX_ARGS=5, HOME_ARGS=TRUE, -
			INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			PRESERVE=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			LABEL=GETDN5
; Get and Validate Params
	PROBER	#0,#2,4(AP)  		; Read address?
	BEQL	100$			; Br if no
	PROBER	#0,#2,8(AP)  		; Read len of entity?
	BEQL	100$			; no
	MOVZBL	@8(AP),R11		; Get len
	PROBER	#0,R11,8(AP)  		; Read entity?
	BEQL	100$			; no
	PROBER	#0,#2,12(AP)  		; Read len of Instance?
	BEQL	100$			; no
	MOVZBL	@12(AP),R10		; Get len
	PROBER	#0,R10,12(AP)  		; Read Instance?
	BEQL	100$			; no
	PROBER	#0,#1,16(AP)  		; Read attribute code?
	BEQL	100$			; no
	MOVQ	@20(AP),R6     		; R6 = len, R7 = addr retbuf
	PROBEW	#0,R6,(R7)     		; Write?
	BEQL	100$			; no
	BRB	PARAMS_OK		; OK
100$:
	MOVL	#SS$_ACCVIO,R0		; Signal error
	RET
PARAMS_OK:
;If this is the first call then get a channel and convert the ascii timeout 
; to bin.
 
	TSTW	NET_CHAN        ; have a chan?
	BNEQ	10$		; Br if yes
	$ASSIGN_S	CHAN=NET_CHAN,-
		 	DEVNAM=NET_DEVICE
	BLBS	R0,5$
	RET
5$:
	PUSHAL	INTLTIM
	PUSHAL	FIVE_SEC_D
	CALLS	#2,G^SYS$BINTIM
	BLBS	R0,10$
	RET
;
10$:
; Set up counters
	TSTL	COUNTERS_A
	BNEQ	20$
	PUSHAL	COUNTERS_A
	CALLS	#1,G^MAP_COUNTERS
	BLBS	R0,20$
	RET
20$:	
	
; calc lens
; This is a bit messy:
; There are 2 lens and a number of constants to be added to  arrive at 
; 3 calculated lens:
; for each part there is the given len +protocol and this is carried to the
; previous part, So...:
; Entlen = attr len(cons)+2(prot)+entlen(R10)+2(Prot)+attr len(r11)
; Invoke len = entlen+part1len(cons)
; Message len = invoke len+2(prot)
	ADDL3	#ATTR_LEN,R10,R9	; const 
	ADDL	#4,R9			; Protocol
	ADDL	R11,R9			; Entity len
	MOVB	R9,ENTLEN			; Set it
	ADDB3	ENTLEN,#PART1_LEN,INVOKELEN     ; Set Invoke len
	CLRL	MESSAGE_LEN
	ADDB3	#2,INVOKELEN,MESSAGE_LEN  ; Len of QIO message
; Assemble message
	MOVAL	REST_OF_MESSAGE,R10       ; Start build here
	MOVL	8(AP),R8                  ; Concatinate entity
	MOVZBL	(R8),R9 		  ; Len of this part
	INCL	R9			  ; Include count
100$:
	MOVB	(R8)+,(R10)+
	SOBGTR	R9,100$
	MOVB	#CMIP_TAG_ENTINST,(R10)+  ; List tag
	MOVL	12(AP),R8                  ; Concatinate instance
	MOVZBL	(R8),R9 		  ; Len of this part
	INCL	R9			  ; Include count
110$:
	MOVB	(R8)+,(R10)+
	SOBGTR	R9,110$
; Set attribute and concatinate it
	MOVB	16(AP),ATTR  		; 
	MOVAL	ATTRIBUTES,R8
	MOVL	#ATTR_LEN,R9
120$:
	MOVB	(R8)+,(R10)+
	SOBGTR	R9,120$

SEND_MESSAGE:
        PUSHL	4(AP)
	CALLS	#1,G^MAKE_LINK               ; Make link to target node
	BSBW	ERROR_CHK
	CLRL 	R10			; Len of final response
	$QIOW_S	-
		CHAN=NET_CHAN,-
		FUNC=#IO$_WRITEVBLK,-   ; Req
		IOSB=IOSB,-
		P1=MESSAGE,-
		P2=MESSAGE_LEN
	BSBW	ERROR_CHK
	MOVL	COUNTERS_A,R1
	INCL	CNT_POL_L_CMIPREQ(R1)
	CLRL	R10			; Return accumulator
70$:           
	$SETIMR_S-
		DAYTIM=INTLTIM,-
		ASTADR=GETDN5_TIMEOUT             ; AST address
	$QIOW_S	-
		CHAN=NET_CHAN,-
		FUNC=#IO$_READVBLK,-    ; Resp
		IOSB=IOSB,-
		P1=(R7),-
		P2=R6
	BSBW	ERROR_CHK
	MOVL	COUNTERS_A,R1
	INCL	CNT_POL_L_CMIPRESP(R1)
; 	CLRL	R10			; Return accumulator

	$CANTIM_S			; Cancel timer
        CMPB	#CMIP_PDU_INVOKE,(R7)   ; More?
	BNEQU 	80$		        ; No - end
	CVTWL	IOSB+2,R11               ; Rec byte count
	ADDL	R11,R10 			; Total bytes rec'ed
	ADDL	R11,R7			; Move pointer
	SUBL	R11,R6			; Deduct used part of buffer
	TSTL	R6			; Any buffer left?
	BGTRU	70$			; OK - get more
80$:
	; This is the last response frame. In any case return the frame.
; Write the total len into the input descriptor.
; Deaccess, determine the exit status and end
; At this point there are 3 possible statuses:
;	A1 = Current frame in linked reply (More to come)
;	A2 = Last frame in linked reply (or only response in single)
;	A3 = Some error returned - Detail is in returned frame.
;	A4 = Reject - connection rejected - detail is in returned frame
; If A1 then store frame in outp, adjust pointers and read again
; If return is A2 then return NORMAL 
; If reject is returned then return REJECT (obviously!)
; else return DATACHECK to signal  failure to caller and indicate where 
; detail is.
; 
	CVTWL	IOSB+2,R11               ; Rec byte count
	ADDL	R11,R10 			; Total bytes rec'ed
	CMPB	#CMIP_PDU_INVOKE,(R7)	; More?
	BNEQU	90$
	ADDL	R11,R7			; Move outp point
	SUBL	R11,R6			; Deduct used part of buff
	BLEQ	85$			; Br if no buff left 
        BRW	70$			; Read again
85$:
	MOVL	#SS$_BUFFEROVF,R0
	RET	
90$:
	$QIOW_S	CHAN=NET_CHAN,-
		FUNC=#IO$_DEACCESS

	CMPB	#CMIP_PDU_RESPONSE,(R7)	; Normal end?
	BNEQU	100$
        MOVL	R10,@20(AP)		; Write len returned data
	MOVL	#SS$_NORMAL,R0
	RET
100$:
 	CMPB	#CMIP_PDU_REJECT,(R7)	; Rejected?
	BNEQU	110$
	MOVL	#SS$_REJECT,R0
	RET
110$:
	MOVL	COUNTERS_A,R1           ; Count error
	INCL	CNT_POL_L_CMIPERR(R1)
	MOVL	#SS$_DATACHECK,R0       ; Other error
	RET

; Subroutines
;
ERROR_CHK:
	.JSB_ENTRY	INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			OUTPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>

	CMPL	R0,#SS$_NORMAL
       	BNEQU	20$	                ; Que error
	CMPW	IOSB,#SS$_NORMAL        
       	BNEQU	10$	                ; Returns error 
	RSB				; No err
10$:
	MOVZWL	IOSB,R0			; Error in IOSB
20$:
	MOVL	R0,R7                   ; Save error
	$CANCEL_S	CHAN=NET_CHAN
	$QIOW_S	CHAN=NET_CHAN,-
		FUNC=#IO$_DEACCESS!IO$M_ABORT,-
		IOSB=IOSB
	MOVL	R7,R0                   ; Restore error
	RET
;
	.CALL_ENTRY	MAX_ARGS=1, HOME_ARGS=TRUE, -
			INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			PRESERVE=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			LABEL=MAKE_LINK
;++
;2 MAKE_LINK
; Creates DECnet/OSI link to CML application on requested address
;2 Inputs
; DECnet address
;2 Outputs
; None
; Returns
; Any return from $FAO, $QIO 

	MOVW	#NCB_LEN,NCB_DESC		; Make 1st part NCB
	$FAO_S	CTRSTR=NCB_CTRSTR,-
		OUTLEN=NCB_DESC,-
		OUTBUF=NCB_DESC,-
		P1=4(AP)
	BLBS	R0,10$
	RET
10$:
	MOVAL	NCB,R10
	MOVZWL	NCB_DESC,R11     
	MOVC3	#OPT_LEN,NCB_OPTDATA,(R10)[R11]	; 2nd part 
	ADDW2	#OPT_LEN,NCB_DESC
	$QIOW_S	-
		CHAN=NET_CHAN,-			; Make link
		FUNC=#IO$_ACCESS,-
		IOSB=IOSB,-
		P2=#NCB_DESC
	RET
;; Condition Handler. 
	.CALL_ENTRY	MAX_ARGS=12, HOME_ARGS=TRUE, -
			INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			PRESERVE=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			LABEL=GETDN5_HANDLER
	$UNWIND_S			; Unwind Stack
	MOVL	#SS$_ABORT,R0		; Crash and Burn
	RET

	.CALL_ENTRY	MAX_ARGS=12, HOME_ARGS=TRUE, -
			INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			PRESERVE=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			LABEL=GETDN5_TIMEOUT
	MOVL	COUNTERS_A,R1
	INCL	CNT_POL_L_CMIPNORESP(R1)
	PUSHL	NET_CHAN
	CALLS	#1,G^SYS$CANCEL
	RET
	.end	
