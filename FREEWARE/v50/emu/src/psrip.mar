  	.TITLE	PSRIP
	.IDENT /V04-001/
;	© 2000 P. Beaudoin
;  This software is supplied as is and the usual warranty
;  is implied - none. You may use, abuse, modify or
;  or ignore this software as you see fit but are
;  encouraged to give credit, as is good practice
;  when stealing with permission
; 
;++
;1 PSRIP 
; Program to receive Internet Protocol (IP) and ARP frames from Listen, 
; process them and build the internal PSRIP DB.
;2 Protocols:
;  The following IP protocols are processed through this PSR:
;	ICMP
;	ARP
;	SNMP - Traps only
;
;2 Database
; Only the IP address is stored at this level.
;-- 

        .library        /sys$library:lib.mlb/
	.library	/emu5_LIB:emu5.mlb/
	EMUIPCDEF			; IPC buffers
	EMUSYSDEF
	EMUCTRLDEF
	EMUPSRDEF
	EMUCNTDEF
	EMURLTDEF
	EMUIPDEF			; IP packet defs
	EMUMSGDEF			; IP packet defs
	$LCKDEF
        .psect  rw_data, noexe, rd, wrt, quad, pic, noshr       

THIS_PROCESS = SYS_PID_C_PSRIP
THIS_PROCESS_FLAG = SYS_FLG_C_PSRIP  

       
; Global Section areas
;
; returned addresses
	.ALIGN	QUAD
INADDR:		.QUAD	0
EBUFFS_A:	.QUAD	0
CONTROL_A:	.QUAD	0
IPDB_A: 	.QUAD	0
PSRTBL_A:	.QUAD   0
COUNTERS_A:	.QUAD	0
TEMPDESC:	.QUAD	0
RLTCXT:		.LONG	0		; Relater context
GBLSIZ:		.LONG	0
HIORD:	    	.BYTE	^XAA,^X00,^X04,^X00
; temp - move to section
PSRTBLCNT:	.LONG	0		; Count of psr table entries
PASS_COUNT:	.LONG	0               ; COunt of buffs rec'ed 1 cycle
BOXID:		.LONG	0
RELDIS:		.LONG	0
; Rebuild
RBLD_PRM:	.LONG	1
RBLD_TBL:       .BYTE	^XD3,^X47,0,0

; Locking
; Lock value block
IPDBLVB:
IPLVBSTA:	.WORD	0		; Status
IPLVBRES:	.WORD	0		; Reserved
IPLVBID:	.LONG	0		; Lock id
IPLVBSIZ:	.LONG	0		; Begining of LVB (Size of DB in pages)
IPLVBSPR:	.BLKL	3		; Unused 12 bytes
; $ENQ call frame
IPDBLOCK:	
		.LONG	12		; Arguments
		.LONG	0		; EFN
LKMODE:		.LONG	LCK$K_EXMODE	; Lock mode
		.ADDRESS IPDBLVB	; Lock value block
LKFLGS:         .LONG 	<LCK$M_SYSTEM!LCK$M_VALBLK>	; Use value block
LKNAM:		.ADDRESS IPDBLKNAM 	; Resourse name
		.LONG	0		; Parent id 
                .LONG	0               ; AST
		.LONG	0		; AST Param
		.LONG	0		; BLAST
		.LONG	0		; ACC Mode
		.LONG	0		; RSDM_ID
		.LONG	0		; Null

; Error Log
; The error system works as follows:
; Fill in MSGDCE, PARCNT and required params and call EMU_LOGGER with 
; the addr of this message as the param. 
; MSGCDE is the EMU message code. Symbols are defined in _EMUMSGDEF
; PARCNT is the count of params in the MSGPARAMS area. There may be up to 
; 7 params in any message. The params are FAO directives as required
; by the message. See EMUMSG.MSG
; Error System Params
ERRORMSG:
		.LONG	       	;Arg, opts
MSGCDE:	        .LONG		; Error code
PARCNT:		.WORD		; Paramater count
		.WORD		; Opts
		.LONG		; Time
		.ADDRESS RTNNAM	; Our name
MSGPARAMS:	.BLKL	7	; Up to 7 params
RTNNAM:		.ASCID	/PSRIP/


	.ALIGN	LONG
IPSECFAB:	
		$FAB	FAC = <GET,PUT>,-        ; Access
			FNM = <EMU5_ROOT:[DAT]EMU_PSRIP.SEC>
IPSECRAB:	
		$RAB	FAB = IPSECFAB,-            ; Record 
			RAC = SEQ,-
       			RBF = IPSECREC,-			; 
       			UBF = IPSECREC,-			; 
       			USZ = IPSECREC_SIZE,-		; 
       			RSZ = IPSECREC_SIZE   		; 
		

IPSECREC:	 .BLKB	PSR_IP_C_RECSIZ   
IPSECREC_SIZE = .-IPSECREC


	.ALIGN	LONG
EXIT_STATUS:	.LONG	0
EXIT_BLOCK:	.LONG	0
		.ADDRESS PSRIP_EXIT
		.LONG	1
		.ADDRESS EXIT_STATUS

EFLAGS1:		.ASCID	/EFLAGS1/	; Event Flag Cluster (64-95)
EFLAGS2:		.ASCID	/EFLAGS2/	; Event Flag Cluster (96-127)
IPDBLKNAM:		.ASCID	/EMU_IPDB/	; DB Lock name 
IPSECNAM:		.ASCID	/EMU_PSRIP/	; DB section name 
;misc
	.align long
FLAGS:		.LONG	0
DEFRECCNT:      .LONG	3000			; DEF dbsize



;

	.PSECT	PSRIP_CODE,EXE,NOWRT,SHR,PIC,LONG
	.CALL_ENTRY	MAX_ARGS=0, HOME_ARGS=TRUE, -
			INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			PRESERVE=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			LABEL=PSRIP

; Ensure death ifone control process dies
	calls	#0, g^get_control_lock	; 
  	bsbw	error_chk		; 
; 
; Command interface MBX. Define LNM$TEMPORARY_MAILBOX = LNM$SYSTEM
; make all temporary things in the system logical name table
	calls	#0, g^asn_tempmbx_system
	bsbw	error_chk		; 

;	
; Create and Map to sections 
;

	PUSHAL	COUNTERS_A
	CALLS	#1,G^MAP_COUNTERS
	BSBW	ERROR_CHK
	PUSHAL	EBUFFS_A		; Ebuffs section return addresses
	CALLS	#1, G^MAP_EBUFFS	; Create and map ebuffs
	BSBW	ERROR_CHK		; check errors
	PUSHAL	CONTROL_A		; Control section return addresses
	CALLS	#1, G^MAP_CONTROL	; Create and map control section
	BSBW	ERROR_CHK		; check errors
	PUSHAL	PSRTBLCNT  		; Count of entries found
	PUSHAL	PSRTBL_A		; PSR table start addr
	CALLS	#2,G^MAP_PSRTBL
	BSBW	ERROR_CHK
; Lock and map our database
        CALLS	#0,G^MAP_IPDB  
	BLBS	R0,10$
	BSBW	ERROR_CHK		; Record error
	RET
10$:
; Declare exit handler
	$DCLEXH_S DESBLK=EXIT_BLOCK	; 
	BSBW	ERROR_CHK		; 

;
; Register constants
; R6 = Current buffer
; R8 = current datarec
; R9 = addr of que header
; R11 = counters
	MOVL	EBUFFS_A,R9            ; que heads

; Common Event flag Cluster:
;
	$ASCEFC_S	EFN = #64,-
			NAME = EFLAGS1
	BSBW	ERROR_CHK       	; Fatal
	$ASCEFC_S	EFN = #96,-
			NAME = EFLAGS2
	BSBW	ERROR_CHK       	; Fatal
	MOVL	#100,R1			; Attempts to find ourselves
; Locate our place in the PSR table to store counts
50$:
        MOVL	PSRTBL_A,R6			; 
	MOVL	PSRTBLCNT,R3			; Count of entries
100$:
	CMPL	#THIS_PROCESS_FLAG,PSR_TBL_L_PSRID(R6)
        BEQLU	110$
	ADDL	#PSR_TBL_C_SIZE,R6   	; Next entry
	SOBGTR	R3,100$			; Loop for all
	SOBGTR	R1,50$			; retry
	MOVL	#SS$_ITEMNOTFOUND,R0	; We could not find ourselves
	RET
110$:
; Find our area in counters section and init
	MOVL	COUNTERS_A,R11      	; Start of counters
	ADDL	#CNT_PSR_C_START,R11    ; Start of PSRs
	MULL3	#THIS_PROCESS,#CNT_PSR_C_ASIZE,R1	; Offset
	ADDL	R1,R11					; Our space
        MOVC5	#0,#0,#0,#CNT_PSR_C_ASIZE,(R11)		; Clear
        MOVQ	PSR_TBL_Q_DNAM(R6),CNT_PSR_Q_NAME(R11)   ; Our name
        MOVL	PSR_TBL_L_RELDIS(R6),RELDIS  		; Relater disable
; Send message to relater to enable us

	MOVL	#100,R2			; Try this many times
120$:
	CLRL	RLTCXT
	PUSHL	#THIS_PROCESS		; Identify sender
	PUSHL	#RLT_FRM_C_MSGSTART	; Start us
	PUSHAL	BOXID			; Dummy Boxid
  	PUSHAL	RLTCXT                  ; Context
	CALLS	#4,G^CREATE_RELATER_FRAME
	BLBS    R0,130$
	SOBGTR	R2,120$
; Fatal error - log it and exit
        MOVL	#MSG_GENPSR_SNDRLT,MSGCDE    ; General PSR error
	MOVL	#1,PARCNT                    ; 2 params
	MOVAL	MSGPARAMS,R1                 ; Plist
	MOVL	R0,(R1)                      ; VMS error
	PUSHAL	ERRORMSG                     ; Log it
	CALLS	#1,G^EMU_LOGGER
	RET
130$:	
  	PUSHL	RLTCXT                       ; Context
	CALLS	#1,G^SEND_RELATER_FRAME
140$:

WAIT:
	$wflor_s  	EFN=#96,-       ; Wait for our flag set
			MASK=#THIS_PROCESS_FLAG

	$READEF_S 	EFN=#96,-      ; Get EBUFF Flags
			STATE=FLAGS     ; Current state

READ:
; When our flag is set:
; 1. Clear our CEF
; 2. Attempt to remove a command buffer. If any received, process
; 3. Scan all ebuffs for any with our flag set.
; If any found, process the buffer and clear our flag.
; repeat 3. until no buffs are found for us
; Wait for our CEF
; Clear our CEF 
	ADDL3	#96,#THIS_PROCESS,R1
	PUSHL	R1
	CALLS	#1,G^SYS$CLREF
; Here call process command buffer

	CLRL	PASS_COUNT			; Clear cycle count
	MOVL	EBUFFS_A,R6            		; Ethernet buffers
	ADDL	#IPC_EBUF_C_BUFSTART,R6 	; Buffers
	MOVL	#IPC_ETH_C_BUFNO,R7		; Number of buffers
MAIN:
	BBS	#THIS_PROCESS,IPC_HDR_L_RFLAGS(R6),PROCESS   ; Br if buffer is ours
	ADDL	#IPC_ETH_C_BUFSIZE,R6	
	SOBGTR	R7,MAIN
	TSTL    PASS_COUNT			; Did we process any?
	BNEQU	READ				; Cycle again
	BRW	WAIT

PROCESS:
	INCL	CNT_PSR_L_PRCV(R11)	; Count 1 buff in
; Determine what kind of IP frame we have.
	ADDL3	#IPC_ETH_1500_DATA,R6,R10       ; Start of IP frame

	CMPB	IP_IPROT(R10),#IP_PROT_ICMP	; ICMP Packet?
	BNEQU	10$				; No
	PUSHL	R10                              ; Frame
	CALLS	#1,G^ICMPPRC                    ; Process ICMP
	MOVL	R1,R8
	BRW	DONE
10$:
	CMPW	IP_DSTPRT(R10),#IP_SNMPTRAP_PORT ; SNMP Trap?
	BNEQU	20$
	PUSHL	R10                              ; Frame
	CALLS	#1,G^SNMPTRAPPRC                    ; Process TRAP
	MOVL	R1,R8
	BRW	DONE
20$:
	CMPW	#PTY_ETH_C_ARP,IPC_ETH_W_PTY(R6)
	BNEQU	30$
	PUSHL	R10
	CALLS	#1,G^ARPPRC
	BRW	DONE_SKIP_PROCESS       ; Don't process stored rec



30$:
; IP address is @buff +12 
	ADDL	#IP_SRCIADDR,R10	        ; Source IP addr
; Check if:
;  Valid IP addr (not = 0 and not broadcast)
;  IP exists in IPITSEC (add if not)
	CMPB	(R10),#255		; Broadcast source?
	BEQLU	40$                     ; Yes
	TSTB	(R10)			; = 0?
	BEQL	40$			; Yes
	CMPB	(R10),#127		; Multicast source?
	BNEQU	50$                     ; NO
40$:
;; Send Alert - Illegal source addr 
	BRW	DONE_SKIP_PROCESS       ; Don't process stored rec
50$:
; Locate this addr in Db - add if not found

	PUSHL	#1			; Create if not found
	PUSHL	#THIS_PROCESS   	; This process is creator
	PUSHAL	BOXID       		; BOXID - always = 0
	PUSHAL	IPDB_A			; Section
	PUSHL	R10			; Addr of IP addr	
	PUSHL	#PSR_IP_L_ADDR       	; Offset to addr
	PUSHL	#4	        	; Push len
	CALLS	#7,G^LOCATE_PSRREC
	BLBS	R0,60$                  ; 
	RET                             ; Exit on error
60$:
	CMPL	R0,#SS$_CREATED
	BEQL	100$
; Found this rec
	MOVL	R1,R8
	MOVQ	EXE$GQ_SYSTIME,COM_HDR_Q_LSTHRD(R8)  	; Heard this addr now
	INCL	COM_HDR_L_ACNT(R8)			; Count this access
	BRW	DONE
100$:
; New addr found - send alert
	MOVL	R1,R8
	MOVL	#2,COM_CFG_B16_SUPPORT(R8)		; Set MIB-II spt
	BRW	DONE

DONE:
; Make sure we are in the Relater DB
	CLRL	RLTCXT 			; Start with new frame
	BBS	#THIS_PROCESS,RELDIS,10$
	BBS	#THIS_PROCESS,COM_HDR_L_PTYBITS(R8),10$
	ADDL3	#PSR_IP_L_ADDR,R8,-(SP)	; Our addr   
	PUSHL	#4			; Len of our addr
  	PUSHL	#THIS_PROCESS   	; Add our address
	PUSHL	#THIS_PROCESS		; Identify sender
	PUSHL	#RLT_FRM_C_MSGADD	; Add targets
	ADDL3	#COM_HDR_L_BOXID,R8,-(SP) ; Boxid
  	PUSHAL	RLTCXT                  ; Context
	CALLS	#7,G^CREATE_RELATER_FRAME
	BLBS	R0,10$                  ; Br no err
	INCL	CNT_PSR_L_NOIPC(R11)    ; count err
	BRW	100$
10$:
; send relater frame.
	TSTL	RLTCXT			; Any frame to send?
	BEQL	100$                    ; Br if not
  	PUSHL	RLTCXT                  ; Context (Addr of buffer)
	CALLS	#1,G^SEND_RELATER_FRAME
	CLRL	RLTCXT			; Saftey - don't reuse
	BLBS	R0,40$                  ; br no err
	INCL	CNT_PSR_L_ERROR(R11)    ; count err
        MOVL	#MSG_GENPSR_SNDRLT,MSGCDE    ; General PSR error
	MOVL	#1,PARCNT                    ; 2 params
	MOVAL	MSGPARAMS,R1                 ; Plist
	MOVL	R0,(R1)                      ; VMS error
	PUSHAL	ERRORMSG                     ; Log it
	CALLS	#1,G^EMU_LOGGER
	BRW	100$                    ; skip
40$:
	INCL	CNT_PSR_L_PREL(R11)     ; Count relater frame sent
	BRW	100$

100$:
DONE_SKIP_PROCESS: 
; clear our bit in return
; reque this buff back to listen
	BICL  	#THIS_PROCESS_FLAG,IPC_HDR_L_RFLAGS(R6)
	INCL	CNT_PSR_L_RET(R11)
	BRW	MAIN
COMMAND:
; Later addition
;	INCL	CNT_PSR_L_COMMNDS(R11)
; 	REMQTI	(R9),R6		; Get buffer
;	BCS	READ			; Try again on collision 
;	BVC	20$			; Br if got one
;	$READEF_S 	EFN=#96,-      ; Get EBUFF Flags
			STATE=FLAGS     ; Current state

	BRW	READ
; Subroutines
ERROR_CHK:
        .JSB_ENTRY      INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
                        OUTPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
        BLBC    R0,10$
        RSB
10$:
	MOVL	R0,R6			; Save
        MOVL	#MSG_GENPSR_SNDNAM,MSGCDE    ; General PSR error
	MOVL	#1,PARCNT                    ; 2 params
	MOVAL	MSGPARAMS,R1                 ; Plist
	MOVL	R0,(R1)                      ; VMS error
	PUSHAL	ERRORMSG                     ; Log it
	CALLS	#1,G^EMU_LOGGER
	MOVL	R6,R0			; restore
	$EXIT_S
	RET

	.CALL_ENTRY	MAX_ARGS=1, HOME_ARGS=TRUE, -
			INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			PRESERVE=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			LABEL=ARPPRC  
;++
;2 ARPPRC  
; Process ARP frame. If ARP request then process sender's IP address,
; if ARP response then process both.
;3 Input
;  .address of IP (ARP) Frame
;3 Output
;  If (either) IP address  was not in DB then add it.
;  Because this routine may process multiple IP addresses, create_relater
; and send relater processing is done here and the main process skips
; that part on return.
;
;3 Returns
;	Any return from LOCATE_PSR
;--
	MOVL	4(AP),R10
	MOVL	COUNTERS_A,R11
; Process 1st address regardless of type
; Verify address
	MOVL	#4,TEMPDESC
	ADDL3	#ARP_L_SIP,R10,TEMPDESC+4	; Addr of IP addr	
	PUSHL	#THIS_PROCESS	
	PUSHAL	TEMPDESC
	CALLS	#2,G^VERIFY_ADDRESS
	BLBS	R0,10$
	BRW	100$
10$:
	CLRL	BOXID
	PUSHL	#1			; Create if not found
	PUSHL	#THIS_PROCESS   	; This process is creator
	PUSHAL	BOXID       		; BOXID - always = 0
	PUSHAL	IPDB_A			; Section
	ADDL3	#ARP_L_SIP,R10,-(SP)	; Addr of IP addr	
	PUSHL	#PSR_IP_L_ADDR       	; Offset to addr
	PUSHL	#4	        	; Push len
	CALLS	#7,G^LOCATE_PSRREC
	BLBS	R0,15$
	RET
15$:
	CMPL	#SS$_CREATED,R0
	BNEQ	20$
	MOVL	#2,COM_CFG_B16_SUPPORT(R1)		; Set MIB-II spt
; Alert new addr
20$:
; Check we are in relater
	CLRL	RLTCXT 			; Start with new relater frame
	BBS	#THIS_PROCESS,COM_HDR_L_PTYBITS(R1),100$
	ADDL3	#PSR_IP_L_ADDR,R1,-(SP)	; Our addr   
	PUSHL	#4			; Len of our addr
  	PUSHL	#THIS_PROCESS   	; Add our address
	PUSHL	#THIS_PROCESS		; Identify sender
	PUSHL	#RLT_FRM_C_MSGADD	; Add targets
	ADDL3	#COM_HDR_L_BOXID,R1,-(SP) ; Boxid
  	PUSHAL	RLTCXT                  ; Context
	CALLS	#7,G^CREATE_RELATER_FRAME
	BLBS	R0,30$                  ; Br no err
	INCL	CNT_PSR_L_NOIPC(R11)    ; count err
	BRW	100$
; send relater
30$:
  	PUSHL	RLTCXT                  ; Context (Addr of buffer)
	CALLS	#1,G^SEND_RELATER_FRAME
	CLRL	RLTCXT			; Saftey - don't reuse
	BLBS	R0,100$                  ; br no err
	INCL	CNT_PSR_L_ERROR(R11)    ; count err
        MOVL	#MSG_GENPSR_SNDRLT,MSGCDE    ; General PSR error
	MOVL	#1,PARCNT                    ; 2 params
	MOVAL	MSGPARAMS,R1                 ; Plist
	MOVL	R0,(R1)                      ; VMS error
	PUSHAL	ERRORMSG                     ; Log it
	CALLS	#1,G^EMU_LOGGER
	RET
100$:
; If this is a response then process 2nd addr. else skip to end
; Oper is a .word code in net fmt (byte reversed)
	BBS	#8,ARP_W_OPER(R10),105$	
	MOVL	#4,TEMPDESC
	ADDL3	#ARP_L_DIP,R10,TEMPDESC+4	; Addr of IP addr	
	PUSHL	#THIS_PROCESS	
	PUSHAL	TEMPDESC
	CALLS	#2,G^VERIFY_ADDRESS
	BLBS	R0,110$
105$:
	RET

110$:
	CLRL	BOXID
	PUSHL	#1			; Create if not found
	PUSHL	#THIS_PROCESS   	; This process is creator
	PUSHAL	BOXID       		; BOXID - always = 0
	PUSHAL	IPDB_A			; Section
	ADDL3	#ARP_L_DIP,R10,-(SP)	; Addr of IP addr	
	PUSHL	#PSR_IP_L_ADDR       	; Offset to addr
	PUSHL	#4	        	; Push len
	CALLS	#7,G^LOCATE_PSRREC
	BLBS	R0,115$
	RET
115$:
	CMPL	#SS$_CREATED,R0
	BNEQU	120$
	MOVL	#2,COM_CFG_B16_SUPPORT(R1)		; Set MIB-II spt
; Alert new addr
120$:
; Check if in relater
	CLRL	RLTCXT 			; Start with new relater frame
	BBS	#THIS_PROCESS,COM_HDR_L_PTYBITS(R1),200$
	ADDL3	#ARP_L_DIP,R10,-(SP)	; Our addr   
	PUSHL	#4			; Len of our addr
  	PUSHL	#THIS_PROCESS   	; Add our address
	PUSHL	#THIS_PROCESS		; Identify sender
	PUSHL	#RLT_FRM_C_MSGADD	; Add targets
	ADDL3	#COM_HDR_L_BOXID,R1,-(SP) ; Boxid
  	PUSHAL	RLTCXT                  ; Context
	CALLS	#7,G^CREATE_RELATER_FRAME
	BLBS	R0,130$                  ; Br no err
	INCL	CNT_PSR_L_NOIPC(R11)    ; count err
	RET
;
130$:
  	PUSHL	RLTCXT                  ; Context (Addr of buffer)
	CALLS	#1,G^SEND_RELATER_FRAME
	CLRL	RLTCXT			; Saftey - don't reuse
	BLBS	R0,200$                  ; br no err
	INCL	CNT_PSR_L_ERROR(R11)    ; count err

        MOVL	#MSG_GENPSR_SNDRLT,MSGCDE    ; General PSR error
	MOVL	#1,PARCNT                    ; 2 params
	MOVAL	MSGPARAMS,R1                 ; Plist
	MOVL	R0,(R1)                      ; VMS error
	PUSHAL	ERRORMSG                     ; Log it
	CALLS	#1,G^EMU_LOGGER
200$:
        RET



	.CALL_ENTRY	MAX_ARGS=12, HOME_ARGS=TRUE, -
			INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			PRESERVE=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			LABEL=SNMPTRAPPRC  
;++
;2 SNMPTRAPPRC  
; Process SNMP trap frame. Only check if IP address is in DB.
;3 Input
;  .address of IP Frame
;3 Output
;  If IP address  was not in DB then add it.
;3 Returns
;	R1 = address of DB rec
;	Any return from LOCATE_PSR
;--

	MOVL	4(AP),R10		; R10 = (ipFRAME)
	ADDL	#IP_SRCIADDR,R10	; Ip addr
; Locate this addr in Db - add if not found

	PUSHL	#1			; Create if not found
	PUSHL	#THIS_PROCESS   	; This process is creator
	PUSHAL	BOXID       		; BOXID - always = 0
	PUSHAL	IPDB_A			; Section
	PUSHL	R10			; Addr of IP addr	
	PUSHL	#PSR_IP_L_ADDR       	; Offset to addr
	PUSHL	#4	        	; Push len
	CALLS	#7,G^LOCATE_PSRREC
	BLBS	R0,10$
	RET
10$:
	CMPL	R0,#SS$_CREATED
	BNEQU	20$
	MOVL	#2,COM_CFG_B16_SUPPORT(R1)		; Set MIB-II spt
20$:
	MOVQ	EXE$GQ_SYSTIME,COM_HDR_Q_LSTHRD(R1)  	; Heard this addr now
	INCL	COM_HDR_L_ACNT(R1)			; Count this access
	RET



	.CALL_ENTRY	MAX_ARGS=12, HOME_ARGS=TRUE, -
			INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			PRESERVE=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			LABEL=ICMPPRC  
;++
;2 ICMPPRC  
; Process ICMP frame.
;3 Input
;  .address of IP frame
;3 Output
;  If IP address  was not in DB then add it.
;3 Returns
;	R1 = address of DB rec
;	Any return from LOCATE_PSR
;--

	MOVL	4(AP),R10		; R10 = (FRAME)
	ADDL	#IP_SRCIADDR,R10	; Ip addr
; Locate this addr in Db - add if not found


	PUSHL	#1			; Create if not found
	PUSHL	#THIS_PROCESS   	; This process is creator
	PUSHAL	BOXID       		; BOXID - always = 0
	PUSHAL	IPDB_A			; Section
	PUSHL	R10			; Addr of IP addr	
	PUSHL	#PSR_IP_L_ADDR       	; Offset to addr
	PUSHL	#4	        	; Push len
	CALLS	#7,G^LOCATE_PSRREC
	BLBS	R0,10$
	RET
10$:
	CMPL	#SS$_CREATED,R0
	BNEQU	20$
	MOVL	#2,COM_CFG_B16_SUPPORT(R1)		; Set MIB-II spt
20$:
	MOVQ	EXE$GQ_SYSTIME,COM_HDR_Q_LSTHRD(R1)  	; Heard this addr now
	INCL	COM_HDR_L_ACNT(R1)			; Count this access
	RET




        .CALL_ENTRY     MAX_ARGS=1, -
                        HOME_ARGS=TRUE, -
                        INPUT   =<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
                        PRESERVE=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
                        LABEL=MAP_IPDB   
;++
;2 MAP_IPDB   
; Routine to create and initialise the IP db. This is a standard routine
; that any DB creator execxutes on it's own DB:
;	Acquire exclusive lock on this database. 
;		Fatal error if not granted.
;	Open file - if file not opened used hardcoded defaults.
;	Create section. Fatal error ir we did not CREATE.
;	Initalise with either file contents or defaults
;	Write section size (in pages) to LVB
;	Convert lock to CW
;	That's it!
;--
	MOVL	#LCK$K_EXMODE,LKMODE	; EXCLUSIVE
	$ENQW_G	IPDBLOCK 		; Get DB lock in exclusive mode
	BLBS	IPLVBSTA,10$            ; Br if got it
	CMPW	#SS$_VALNOTVALID,IPLVBSTA  ;  Ignore LVB not valid error
	BEQLU	10$
        MOVL	#MSG_EMUSYS_LOCKDB,MSGCDE    ; General PSR error
	MOVL	#2,PARCNT                    ; 2 params
	MOVAL	MSGPARAMS,R1                 ; Plist
	MOVL	LKNAM,(R1)+		     ; Lock name
	MOVL	R0,(R1)                      ; VMS error
	PUSHAL	ERRORMSG                     ; Log it
	CALLS	#1,G^EMU_LOGGER
	RET
10$:
	$OPEN	FAB= IPSECFAB			; Attempt to open
	BLBS	R0,20$                          ; Br if OK
	BRW	1000$				; Use defaults
20$:
	$CONNECT RAB=IPSECRAB
	BLBS	R0,30$
	BRW	280$			; Abandon and use defaults
30$:
	$GET	RAB=IPSECRAB		; Get 1st rec
	BLBS	R0,40$
	BRW	280$			; Abandon and use defaults
40$:
; Calc memory/file size, Get memory & Map section
       	MOVAL	IPSECREC,R7
	MULL3	COM_DBHDR_L_MAXENTRIES(R7),COM_DBHDR_L_RECSIZE(R7),GBLSIZ
	DIVL	#512,GBLSIZ                             ; Pages
	INCL	GBLSIZ                                  ; Round up

; Get Memory
100$:	CLRQ	-(SP)			; p0 space, access mode
	PUSHAL	INADDR		; returned address
	PUSHL	GBLSIZ          	; no. of pages
	CALLS	#4, G^SYS$EXPREG	; Expand process space
	BSBW	ERROR_CHK		; check ok
; map section	
	CLRQ	-(SP)			; pfc, protection
	CLRL	-(SP)			; virtual block number
	PUSHL	GBLSIZ			; no. of pages
	CLRQ	-(SP)			; channel, rel page no.
	CLRL	-(SP)			; version id
	PUSHAL	IPSECNAM		; section name
	PUSHL	#<SEC$M_GBL!SEC$M_DZRO!SEC$M_WRT!SEC$M_PAGFIL!SEC$M_SYSGBL>
	CLRL	-(SP)			; access mode
	PUSHAL	IPDB_A			; returned address
	PUSHAL	INADDR			; in address
	CALLS	#12, G^SYS$CRMPSC	; create section
	BSBW	ERROR_CHK
	CMPL	#SS$_CREATED,R0
	BEQL	200$
	$CLOSE	FAB=IPSECFAB
	MOVL	#SS$_INVEVENT,R0	; We MUST create the section
	RET
200$:
; We created the section. Load it with file contents
; Move the 1st rec to rec header
; 1st rec cannot exceed common header size...
	MOVAL	IPDB_A,R11			; Start of section
	MOVL	(R11),R7                        ;
	MOVC3	#COM_HDR_C_SIZE,IPSECREC,(R7)     ; Init header
	ADDL3	COM_DBHDR_L_RECSIZE(R7),R7,R8       ; Location of 1st rec
	CLRL	COM_DBHDR_L_ENTRIES(R7)		; No entries yet
	MOVL	COM_DBHDR_L_RECSIZE(R7),R9    ; rec size
210$:
	MOVL	R8,IPSECRAB+RAB$L_UBF    ; Write rec here
	MOVW	R9,IPSECRAB+RAB$W_RSZ		; Record size
	MOVW	R9,IPSECRAB+RAB$W_USZ		; Record size
	$GET	RAB = IPSECRAB		; Get a record
	BLBC	R0,260$			; BR IF  error 
	INCL	COM_DBHDR_L_ENTRIES(R7)			; Count
	ADDL	R9,R8     		; Next slot
	ADDL3	R9,R8,R10		; Check if enough room
	CMPL	R10,4(R11)		; OK?
	BLEQU	210$			; OK
	BRW	280$			; Undo
	
260$:
	CMPL	R0,#RMS$_EOF		; Was error end of file
	BEQLU	270$			; Yes - OK
	RET				; No - Die
270$:
	$CLOSE	FAB=IPSECFAB
	BRW	2000$
280$:
; Undo and set to default
	$CLOSE	FAB=IPSECFAB
300$:

	CLRQ	-(SP)                   ;
	PUSHAL	IPDB_A			; returned address
	CALLS	#3,G^SYS$DELTVA
        BLBS	R0,1000$
	RET

1000$:
; File was not found, or otherwise unloadable
; Use defaults
	MULL3	#PSR_IP_C_RECSIZ,DEFRECCNT,GBLSIZ
	DIVL	#512,GBLSIZ                             ; Pages
	INCL	GBLSIZ                                  ; Round up

; Get Memory
	CLRQ	-(SP)			; p0 space, access mode
	PUSHAL	INADDR			; returned address
	PUSHL	GBLSIZ          	; no. of pages
	CALLS	#4, G^SYS$EXPREG	; Expand process space
	BSBW	ERROR_CHK		; check ok
; map section	
	CLRQ	-(SP)			; pfc, protection
	CLRL	-(SP)			; virtual block number
	PUSHL	GBLSIZ			; no. of pages
	CLRQ	-(SP)			; channel, rel page no.
	CLRL	-(SP)			; version id
	PUSHAL	IPSECNAM		; section name
	PUSHL	#<SEC$M_GBL!SEC$M_DZRO!SEC$M_WRT!SEC$M_PAGFIL!SEC$M_SYSGBL>
	CLRL	-(SP)			; access mode
	PUSHAL	IPDB_A			; returned address
	PUSHAL	INADDR			; in address
	CALLS	#12, G^SYS$CRMPSC	; create section
	CMPL	#SS$_CREATED,R0
	BEQL	1100$
	$CLOSE	FAB=IPSECFAB
	MOVL	#SS$_INVEVENT,R0	; We MUST create the section
	RET
1100$:
; If EMUDB.DAT exists, attempt rebuild.
; We must release access to the DB here to allow the relater access. The
; PSR is not yet enabled so other processes, while they have access will
; not trigger.

	SUBL3	IPDB_A,IPDB_A+4,R10 		; Size of section (bytes)
	DIVL3	#512,R10,IPLVBSIZ               ; Size (Pages) in LVB
	INCL	IPLVBSIZ			; Real number
	BISL	#LCK$M_CONVERT,LKFLGS		; Set lock to convert
	MOVL	#LCK$K_CWMODE,LKMODE		; COnvert to CW
	$ENQW_G	IPDBLOCK 			; Convert DB lock 

	MOVL	IPDB_A,R6
	MOVL	#PSR_IP_C_RECSIZ,COM_DBHDR_L_RECSIZE(R6)   ; write recsize 
	MOVL	#THIS_PROCESS,COM_DBHDR_L_FLAG(R6)          ; Write flag
	MOVL	DEFRECCNT,COM_DBHDR_L_MAXENTRIES(R6)

        PUSHAL	IPDB_A
        PUSHL	RBLD_PRM
        PUSHL	RBLD_TBL
	PUSHL	#THIS_PROCESS
        CALLS	#4,G^REBUILD_PSRDB
	BLBS	R0,1110$
; Only error handled is insufficient mem. In this case make section 1.5x
; bigger. In all other cases simply continue. The called routine either
; completes successfully or does not write the section at all and we
; start with defaults.
	CMPW	#SS$_INSFMEM,R0		; Mem?
	BNEQU	1110$                   ; Br no
; Regain exclusive access...
	MOVL	#LCK$K_EXMODE,LKMODE	; EXCLUSIVE
	$ENQW_G	IPDBLOCK 		; Get DB lock in exclusive mode
	BLBS	IPLVBSTA,1105$            ; Br if got it
	CMPW	#SS$_VALNOTVALID,IPLVBSTA  ;  Ignore LVB not valid error
	BEQLU	1105$
	BRW	1110$
1105$:
	MULL	#15,DEFRECCNT           ; Def Number of recs
	DIVL	#10,DEFRECCNT           ; 1.5x
     	BRW	300$			; Delete and recreate section

1110$:
2000$:
	SUBL3	IPDB_A,IPDB_A+4,R10 		; Size of section (bytes)
	DIVL3	#512,R10,IPLVBSIZ               ; Size (Pages) in LVB
	INCL	IPLVBSIZ			; Real number
	BISL	#LCK$M_CONVERT,LKFLGS		; Set lock to convert
	MOVL	#LCK$K_CWMODE,LKMODE		; COnvert to CW
	$ENQW_G	IPDBLOCK 			; Convert DB lock 

	$ERASE	FAB= IPSECFAB			  ; Delete all versions
	BLBS	R0,2000$                          ; Br until no more
	MOVL	#SS$_NORMAL,R0
	RET					; Return with any errors

        .CALL_ENTRY     MAX_ARGS=0, -
                        HOME_ARGS=TRUE, -
                        INPUT   =<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
                        PRESERVE=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
                        LABEL=PSRIP_EXIT
; Here at exit
; Disable ourselves
        MOVL	PSRTBL_A,R6			; 
	MOVL	PSRTBLCNT,R3			; Count of entries
10$:
	CMPL	#THIS_PROCESS_FLAG,PSR_TBL_L_PSRID(R6)
        BNEQU	15$
	BICL	#PSR_CFLG_M_DISAB,PSR_TBL_L_CFLGS(R6)  ; Disable
15$:
	ADDL	#PSR_TBL_C_SIZE,R6   	; Next entry
	SOBGTR	R3,10$			; Loop for all


; Get lock
	MOVL	#LCK$K_EXMODE,LKMODE	; EXCLUSIVE
	BISL	#LCK$M_CONVERT,LKFLGS		; Set lock to convert
	$ENQW_G	IPDBLOCK 		; Get DB lock in exclusive mode
	BLBS	IPLVBSTA,20$
	CMPW	#SS$_VALNOTVALID,IPLVBSTA  ;  Ignore LVB not valid error
	BEQLU	20$
        MOVL	#MSG_EMUSYS_LOCKDB,MSGCDE    ; General PSR error
	MOVL	#2,PARCNT                    ; 2 params
	MOVAL	MSGPARAMS,R1                 ; Plist
	MOVL	LKNAM,(R1)+		     ; Lock name
	MOVL	R0,(R1)                      ; VMS error
	PUSHAL	ERRORMSG                     ; Log it
	CALLS	#1,G^EMU_LOGGER
	RET
	
20$:
; create new file
	$CREATE	FAB=IPSECFAB
	BLBS	R0,30$
	RET
30$:
	$CONNECT RAB=IPSECRAB
	BLBS	R0,40$
	BRW	210$			; Delete file and exit
40$:
; analyse section, dec entry count for any deleted recs
	MOVL	IPDB_A,R10			; Top of section
        MOVL	COM_DBHDR_L_ENTRIES(R10),R6      ; Number of entries
	BEQL	65$				; Br if none
        MOVL	COM_DBHDR_L_RECSIZE(R10),R7      ; Size of entries
	ADDL3	R7,R10,R8				; 1st rec
50$:
	BBC	#SYS_COM_V_DELETE,COM_HDR_L_SYSCTL(R8),60$ ; Br if not deleted
	DECL	COM_DBHDR_L_ENTRIES(R10)			   ; uncount
60$:
	ADDL	R7,R8 
	SOBGTR	R6,50$
; The count is now the count of valid recs
; Calc a new MAXENTRY
65$:
	MULL3	#100,COM_DBHDR_L_ENTRIES(R10),R1
        DIVL	#15,R1			; increase by 15 %
	CMPL	#10,R1			; must be > 10
	BLSS	70$
	MOVL	#10,R1			; Set min
	BRB	100$
70$:
	CMPL	#1000,R1			; must be < 1000
	BGTR	100$
	MOVL	#1000,R1			; Set min
100$:
; Set header and write it
; 
	MOVW	COM_DBHDR_L_RECSIZE(R10),IPSECRAB+RAB$W_RSZ     ; rec size
	ADDL3	R1,COM_DBHDR_L_ENTRIES(R10),COM_DBHDR_L_MAXENTRIES(R10)	; Set new max size
	MOVL	#-1,COM_HDR_L_ACNT(R10)	; Set this field Max count (FOR SORT)
	MOVL	R10,IPSECRAB+RAB$L_RBF    ; Write this rec 
	$PUT	RAB = IPSECRAB		; Write a record
	BLBS	R0,110$			; BR IF no error 
	BRW	210$                    ; 

110$:
; Write out all recs (skip deletes)
        MOVL	COM_DBHDR_L_ENTRIES(R10),R6      ; Number of entries
	BEQL	200$				; Br if none
        MOVL	COM_DBHDR_L_RECSIZE(R10),R7      ; Size of entries
        MOVW	COM_DBHDR_L_RECSIZE(R10),IPSECRAB+RAB$W_RSZ    ; Size of record
	ADDL3	R7,R10,R8			; 1st rec
120$:
	MOVL	R8,IPSECRAB+RAB$L_RBF    ; Write this rec 
	$PUT	RAB = IPSECRAB		; Write a record
	BLBC	R0,210$			; BR IF  error 
	ADDL	R7,R8 
	SOBGTR	R6,120$
200$:
	$CLOSE	FAB= IPSECFAB	; 
	MOVL	EXIT_STATUS,R0
        RET
210$:
	$CLOSE	FAB= IPSECFAB	; 
	$ERASE	FAB= IPSECFAB			; Delete Partial
	MOVL	EXIT_STATUS,R0
        RET
	.END	PSRIP
