	.TITLE	TST_DN5LOOP  
	.IDENT /V01-001/
;
	.LIBRARY	"EMU5_LIB:EMU5.MLB"
	EMUCMIPDEF
	EMUDBDEF
	EMUPSRDEF
	EMUSYSDEF
	EMUCMIPDEF
	$TRMDEF		; Terminal Modifiers
	$DSCDEF		; Declare DSC sysmbols
	$SMGDEF		; Declare SMG symbols
	$IODEF
	$SSDEF
	$SECDEF				; Global Section 
	.PSECT	DATA WRT,NOEXE,QUAD

; returned addresses
CONTROL_A:		.QUAD
DN5MAPS:
                .QUAD	0
		.LONG	SYS_PID_C_PSRDN5
		.LONG	PSR_DN5_B20_ADDR
		.LONG	0			; Lock ID
		.LONG	0			; Spare/align
		.ADDRESS EMU_DN5DB
		.ADDRESS EMU_PSRDN5


COUNTERS_A:		.QUAD
DADDR:			.QUAD
CRCDESC:		.QUAD	0
CRCINIT:		.LONG	0
CRCPOLY:		.LONG  ^O120001
CRCTBL:			.BLKL	16	
FNAME:		.BLKB	512
FNAME_D:	.LONG	.-FNAME
		.ADDRESS  FNAME



KEY_BUF:
PROTO:		.LONG
BOXID:		.LONG
TBL:		.LONG
PARAM:		.LONG
INSTANCE:	.LONG
HIORD:		.BYTE	^XAA,^X00,^X04,^X00	; Hi order of decnet address
DECID:		.BYTE	^X2B,^X0C,^X02,^X87     ; Hi order of DEC Id
NSAP_BUF:	.BLKB	64
NSAP_DESC:	.LONG	.-NSAP_BUF
		.ADDRESS  NSAP_BUF
FAOBUF:		.BLKL	132
FAODESC:
FAOLEN:		.LONG	.-FAOBUF
		.ADDRESS  FAOBUF
FAOLIST:	.BLKL	64
FAOSTR:		.BLKB	64
FAOSTR_D:	.LONG	.-FAOSTR 		; Dynamic
		.ADDRESS  FAOSTR
DN4TYP:		.WORD	^X0360
PROMPT:		.ASCID	/ Internal DECnet IV (<CR> to test all) :/
;
EMU_DN5DB:	
		.ASCID	\EMU_DN5DB\            ; Lock name
EMU_PSRDN5:	
		.ASCID	\EMU_PSRDN5\  		; Section name

	.ALIGN	LONG



; Return packet
	.ALIGN	LONG
TIME:		.LONG	0
;
; Virtual Display Parameters
;
VD_DISP:	.LONG		; Virtual Display ID
VD_ROWS: 	.LONG 48
VD_COLS: 	.LONG 132
;
; Pasteboard Paramenters
;
PB_BOARD:	.LONG 		; Pasteboard ID
PB_COL:		.LONG	1      
PB_ROW:		.LONG 	1
;
; Virtual Keyboard Parameters
;
KB_BOARD:	.LONG           ; Virtual Keyboard ID
KB_BUF:		.BLKB	80	; Input buffer
KB_DES:		.LONG	.-KB_BUF
		.ADDRESS KB_BUF
BYTCNT:		.WORD		; Input Byte counter
OSITYP: 	.WORD   ^XFE00
; Misc SMG ...
CMDCOL:		.LONG	1
CMDROW:		.LONG	1
CURCOL:		.LONG   1
CURROW:		.LONG   3
UPCASE:         .LONG   TRM$M_TM_CVTLOW         ;Convert lower to upper case
TIMEOUT:	.LONG	15
CHARCNT:	.LONG	15
FIRSTFLG:	.LONG	0
CURSOR_FLAGS:	.LONG	<SMG$M_CURSOR_OFF!SMG$M_SCROLL_JUMP>
RESCNT:		.LONG	0
INPT:		.LONG	0
INADR:		.LONG	0
TIMSTR:		.ASCID	/Round trip average = !UL 100th sec/		
respmsg:	.ASCID	/!UW.!UW, Status = !XL/
	.PSECT	CODE	EXE,NOWRT,LONG

	.CALL_ENTRY	MAX_ARGS=12, HOME_ARGS=TRUE, -
			INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			PRESERVE=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			LABEL=TST_DN5LOOP
; Command interface MBX. Define LNM$TEMPORARY_MAILBOX = LNM$SYSTEM
; make all temporary things in the system logical name table
	calls	#0, g^asn_tempmbx_system
	bsbw	sca_error_chk		; 
;

; Build Initial Display
	
	BSBW	CREATE_ENVIRONMENT
;	
; Create and Map to sections 
	PUSHAL	COUNTERS_A
	CALLS	#1,G^MAP_COUNTERS
	BSBW	SCA_ERROR_CHK
	pushal	control_a		; Control section return addresses
	calls	#1, g^map_control	; Create and map control section
	BSBW	SCA_error_chk		; check errors
	PUSHAL	DN5MAPS				; Map structure
        CALLS	#1,G^MAPLVB_DB  

	BSBW	SCA_ERROR_CHK		;
; Get either input addr or all:
1$:
	PUSHAL	VD_DISP                 ; Output display
	CLRL	-(SP)                   ; Blank 
	PUSHAL	BYTCNT                  ; Bytes to display
	CLRL	-(SP)                   ; Blank 
	CLRL	-(SP)                   ; Blank 
	PUSHAL	UPCASE                  ; Make input UPCASE 
	CLRL	-(SP)                   ; Blank 
	PUSHAL	PROMPT                      ; Output DSC
	PUSHAL	KB_DES                  ; Input buf
	PUSHAL	KB_BOARD                ; Input ID
	CALLS	#10,G^SMG$READ_STRING
	BLBC	R0,5$			; Ignore any error
	TSTW	BYTCNT			; any Input?
	BEQL	5$

	PUSHAL	INADR
	PUSHAL	KB_BUF
	MOVZWL	BYTCNT,-(SP)
	CALLS	#3,G^LIB$CVT_HTB
	BLBC	R0,1$
        MOVAL	INPT,R10
	BRW	60$
5$:


	MOVL	DN5MAPS,R11		; Top of table
	ADDL3	#PSR_DN5_C_RECSIZE,R11,R6		; 1st entry 
	MOVL	COM_DBHDR_L_ENTRIES(R11),R11		; Entries
	BNEQU	10$					
	RET
10$:
	BBC	#SYS_COM_V_DELETE,COM_HDR_L_SYSCTL(R6),20$ ; Br if not deleted
	BRW	40$
; Deternmine if this address is a candidate.
; if the last 7 digits of the address match :
; AA-00-04-00-xx-xx-21 (xx = dont care)
; then select this addr
20$:
       	SUBL3	#7,COM_HDR_L_LEN(R6),R1	; Offset to last 7
	ADDL3	#PSR_DN5_B20_ADDR,R6,R10         ; Addr
	ADDL	R1,R10				; 
	CMPL	(R10),HIORD
	BEQLU	60$
	BRW	40$
30$:
45$:
	TSTW	BYTCNT
	BEQL	40$
	RET
40$:
	ADDL	#PSR_DN5_C_RECSIZE,R6		; Next entry
	SOBGTR	R11,10$
        RET
50$:	
60$:
	PUSHAL	TIME
	MOVZWL	4(R10),-(SP)             ; Node number
	CALLS	#2,G^DN5LOOP

	MOVL	R0,R8                  ; Save return
	MOVL	#132,FAODESC
	MOVZWL	4(R10),DADDR
	EDIV    #1024,DADDR,R2,R3
	PUSHL	R0			; Return
	PUSHL	R3
	PUSHL	R2
	PUSHAL	FAODESC
	PUSHAL	FAODESC
	PUSHAL	RESPMSG
	CALLS	#6,G^SYS$FAO
	BLBS	R0,70$
	RET
70$:
	BSBW	PRINT
	BLBS	R8,80$
	TSTL	RESCNT
	BEQL	75$  			; SKip if 1st entry does not ans
	addl	#4,r9
	BRW	40$
75$:	BRW	45$
80$:

	MOVL	#132,FAODESC
	PUSHL	TIME
        PUSHAL	FAODESC
	PUSHAL	FAODESC
	PUSHAL	TIMSTR
	CALLS	#4,G^SYS$FAO
	BSBW	PRINT
	BRW	45$
; Print subroutines
;
PRINT:
	.JSB_ENTRY	INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			OUTPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
		PUSHAL	FAODESC
		PUSHAL	VD_DISP
		CALLS	#2,G^SMG$PUT_LINE
		BSBW	SCA_ERROR_CHK
		RSB

PRINTH:		
		PUSHL	R1			; Addr of .ascid in R1
		PUSHAL	VD_DISP
		CALLS	#2,G^SMG$PUT_LINE
		BSBW	SCA_ERROR_CHK
		RSB
;

CREATE_ENVIRONMENT:
	.JSB_ENTRY	INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			OUTPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>

;
; Create Virtual Display
;
CR_DISP:
	CLRL	-(SP)
	PUSHAL	VD_DISP
	PUSHAL	VD_COLS
        PUSHAL	VD_ROWS
	CALLS	#4,G^SMG$CREATE_VIRTUAL_DISPLAY
	BSBW	SCA_ERROR_CHK
;
; Create Pasteboard
;
	PUSHAL	PB_BOARD
	CALLS	#1,G^SMG$CREATE_PASTEBOARD
	BSBW	SCA_ERROR_CHK
;
; Enable Unsolocited Input
;
;	PUSHAL	GET_INPUT                        ; AST Routine
;	PUSHAL	PB_BOARD                         ; PB ID
;	CALLS	#2,G^SMG$ENABLE_UNSOLICITED_INPUT
;	BSBW	SCA_ERROR_CHK

;
; Create Virtual Keyboard
;
	PUSHAL	KB_BOARD
	CALLS	#1,G^SMG$CREATE_VIRTUAL_KEYBOARD
	BSBW	SCA_ERROR_CHK
;
; Associate the pasteboard and Virtual Display
;
	PUSHAL	PB_COL		;Column
	PUSHAL	PB_ROW		;Row
	PUSHAL	PB_BOARD
	PUSHAL	VD_DISP
	CALLS	#4,G^SMG$PASTE_VIRTUAL_DISPLAY
	BSBW	SCA_ERROR_CHK
;
	pushal	cursor_flags                    ; Turn cursor off
	pushal	PB_BOARD
	calls	#2, g^smg$set_cursor_mode
	RSB
SCA_ERROR_CHK:
	.JSB_ENTRY	INPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
			OUTPUT=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>

	BLBC	R0,10$
	RSB
10$:
	$EXIT_S	R0


	.END	TST_DN5LOOP


