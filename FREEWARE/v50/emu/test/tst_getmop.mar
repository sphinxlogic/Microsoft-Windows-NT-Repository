	.TITLE	TST_GETMOP     
	.IDENT /V01-001/
;
	.LIBRARY	"EMU5_LIB:EMU5.MLB"
	$TRMDEF		; Terminal Modifiers
	$DSCDEF		; Declare DSC sysmbols
	$SMGDEF		; Declare SMG symbols
	$IODEF
	$SSDEF
	$SECDEF				; Global Section 
	EMUIPCDEF			; IPC buffers
	EMUSYSDEF
	EMUCTRLDEF
	EMUPSRDEF
	EMUCNTDEF
	EMURLTDEF
	EMUMOPDEF
	EMUMSGDEF

	.PSECT	DATA WRT,NOEXE,QUAD

; returned addresses
MOP_A:
                .QUAD	0
		.LONG	SYS_PID_C_PSRMOP
		.LONG	PSR_MOP_EA_ADDR
		.LONG	0			; Lock ID
		.LONG	0			; Spare/align
		.ADDRESS EMU_MOPDB
		.ADDRESS EMU_PSRMOP
EMU_MOPDB:	
		.ASCID	\EMU_MOPDB\            ; Lock name
EMU_PSRMOP:
		.ASCID	/EMU_PSRMOP/



DADDR:			.QUAD
DN4TYP:		.WORD	^X0360
HIORD:		.BYTE	^XAA,^X00,^X04,^X00	; Hi order of decnet address
FAOBUF:		.BLKL	132
FAODESC:
FAOLEN:		.LONG	.-FAOBUF
		.ADDRESS  FAOBUF

; Return packet
RETURN:	 	.BLKB	960
RETURN_D:	.LONG	.-RETURN
		.ADDRESS  RETURN
		

RESPMSG:      .ASCID	/!XB-!XB-!XB-!XB-!XB-!XB> Return = !XL /
;
; Virtual Display Parameters
;
VD_DISP:	.LONG		; Virtual Display ID
VD_ROWS: 	.LONG 48
VD_COLS: 	.LONG 132
;
; Pasteboard Paramenters
;
PB_BOARD:	.LONG 		; Pasteboard ID
PB_COL:		.LONG	1      
PB_ROW:		.LONG 	1
;
; Virtual Keyboard Parameters
;
KB_BOARD:	.LONG           ; Virtual Keyboard ID
KB_BUF:		.BLKB	80	; Input buffer
KB_DES:		.LONG	.-KB_BUF
		.ADDRESS KB_BUF
BYTCNT:		.WORD		; Input Byte counter
; Misc SMG ...
PROMPT:		.ASCII	/YEAM> /
CMDCOL:		.LONG	1
CMDROW:		.LONG	1
CURCOL:		.LONG   1
CURROW:		.LONG   3
UPCASE:         .LONG   TRM$M_TM_CVTLOW         ;Convert lower to upper case
TIMEOUT:	.LONG	15
CHARCNT:	.LONG	15
FIRSTFLG:	.LONG	0
CURSOR_FLAGS:	.LONG	<SMG$M_CURSOR_OFF!SMG$M_SCROLL_JUMP>
;
	.PSECT	CODE	EXE,NOWRT,LONG

        .CALL_ENTRY     MAX_ARGS=0, -
                        HOME_ARGS=TRUE, -
                        INPUT   =<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
                        PRESERVE=<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>, -
                        LABEL=TST_GETMOP


; Ensure death if control process dies
	CALLS	#0, G^GET_CONTROL_LOCK	; 
	BLBS	R0,10$
    	RET
10$:
; 
; Define LNM$TEMPORARY_MAILBOX = LNM$SYSTEM
; make all temporary things in the system logical name table
	CALLS	#0, G^ASN_TEMPMBX_SYSTEM
	BLBS	R0,20$
	RET

 
20$:
	PUSHAL	MOP_A				; Map structure
        CALLS	#1,G^MAPLVB_DB  
	BLBS	R0,30$
	RET
30$:
;
; Build Initial Display
	
;	BSBW	CREATE_ENVIRONMENT

	MOVL	MOP_A,R11				; Top of table
	ADDL3	#PSR_MOP_C_RECSIZ,R11,R6		; 1st entry 
	MOVL	COM_DBHDR_L_ENTRIES(R11),R11		; Entries
	BNEQU	100$					
	RET
100$:
	BBS	#SYS_COM_V_DELETE,COM_HDR_L_SYSCTL(R6),140$	; Br if deleted

; TEST this box
	MOVL	#132,FAODESC
	MOVL	#960,RETURN_D
	PUSHAL	RETURN_D
	ADDL3	#PSR_MOP_EA_ADDR,R6,-(SP)
	PUSHL	#MOP_FUN_C_SYSID	
	CALLS	#3,G^MOP_GETDATA

	ADDL3	#PSR_MOP_EA_ADDR,R6,R2
	PUSHL	R0			; Return
        MOVZBL	5(R2),-(SP)
        MOVZBL	4(R2),-(SP)
        MOVZBL	3(R2),-(SP)
        MOVZBL	2(R2),-(SP)
        MOVZBL	1(R2),-(SP)
        MOVZBL	(R2),-(SP)
	PUSHAL	FAODESC
	PUSHAL	FAODESC
	PUSHAL	RESPMSG
	CALLS	#10,G^SYS$FAO
	BLBS	R0,130$
	RET
130$:
	PUSHAL	FAODESC
 	CALLS	#1,G^lib$put_output
140$:
	ADDL	#PSR_MOP_C_RECSIZ,R6		; Next entry
	SOBGTR	R11,150$
	RET
150$:
	BRW	100$


CREATE_ENVIRONMENT:
;
; Create Virtual Display
;
CR_DISP:
	CLRL	-(SP)
	PUSHAL	VD_DISP
	PUSHAL	VD_COLS
        PUSHAL	VD_ROWS
	CALLS	#4,G^SMG$CREATE_VIRTUAL_DISPLAY
	BSBW	ERROR_CHK
;
; Create Pasteboard
;
	PUSHAL	PB_BOARD
	CALLS	#1,G^SMG$CREATE_PASTEBOARD
	BSBW	ERROR_CHK
;
; Enable Unsolocited Input
;
;	PUSHAL	GET_INPUT                        ; AST Routine
;	PUSHAL	PB_BOARD                         ; PB ID
;	CALLS	#2,G^SMG$ENABLE_UNSOLICITED_INPUT
;	BSBW	ERROR_CHK

;
; Create Virtual Keyboard
;
	PUSHAL	KB_BOARD
	CALLS	#1,G^SMG$CREATE_VIRTUAL_KEYBOARD
	BSBW	ERROR_CHK
;
; Associate the pasteboard and Virtual Display
;
	PUSHAL	PB_COL		;Column
	PUSHAL	PB_ROW		;Row
	PUSHAL	PB_BOARD
	PUSHAL	VD_DISP
	CALLS	#4,G^SMG$PASTE_VIRTUAL_DISPLAY
	BSBW	ERROR_CHK
;
	pushal	cursor_flags                    ; Turn cursor off
	pushal	PB_BOARD
	calls	#2, g^smg$set_cursor_mode
	RSB
ERROR_CHK:
	BLBC	R0,10$
	RSB
10$:
	$EXIT_S	R0
	.END	TST_GETMOP  

