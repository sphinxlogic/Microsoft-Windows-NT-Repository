<chapter>(Introduction\intro)
<p>    
    EMU (Ethernet Monitoring Utility) is a system that listens to the
    attached Ethernet and records all addresses appearing on the
    cable. For each address found it also records the protocols
    enabled on that address and for selected protocols it can extract
    information useful for network management purposes.
    It then uses this database to locate other nodes in the wide area
    network and initiate monitoring functions.
<p>
    Some of the basic features of the system follow:
<X>(Main Features)
<list>(unnumbered)
<le>The system is fully automatic. The system builds and formats the
    database without operator assistance or intervention.
    All monitoring and control subfunctions start and run without 
    intervention and in fact, no operator assistance is ever required
    for normal operation.
<le>An alert screen provides the operator with timely reports on new
    addresses appearing and for selected protocols, changes to
    configuration parameters, fault reports and performance reports.
<le>A number of system management utilities are provided. These
    utilities are all menu driven and self explanatory.
<le>A versatile reporting command allows the operator to extract
    selected information to a user defined and formatted file.This may
    be useful for input into other management tools and/or reports.
<le>A comprehensive query facility allows operators to view the
    database contents.  Nodes can be selected by many criteria.
<endlist>
    For details on what data is available and instructions on how to
    extract it see the user guide section.
<line>
<head1>(System Overview\sysover)
<x>(System Overview)
  	This is the 5th version of EMU and it's 3rd major rewrite.
    While all the original goals and much of the code was retained,
    both the architecture and the engineering have been greatly
    expanded to reflect the ongoing changes in the networking world.
    Most importantly, the principles that drove the design remained:
<list>(numbered)
<le>Full automation. The system is designed to assist the user in
    monitoring and managing the network, not the reverse as in many
    current systems. All data in the database is derived from the
    network; there is no user input possible at this level. This
    ensures data integrity and eliminates the burden on the user.
<le>Full integration. The system maintains full cross referencing of
    all addresses where there is sufficient information. While it is
    necessary to implement each network as a separate entity, the user
    sees only single devices attached to many networks, or many
    networks with devices attached. This arrangement allows the system
    to more effectively monitor any single device using the multiple
    protocols it supports and allows more accurate and complete
    reporting of any device. 
<le>The system itself should require no maintenance. All processes are
    self configuring, self monitoring and self tuning.
<le>The complexity of the network itself should be hidden. The system
    should be fully usable by non-network personnel to extract useful
    information; The simple question "How is the network performing?"
    should be answered simply, completely and with qualification.
<le>The system will acquire and store sensitive information. It is 
    essential that this system incorporates controls that protect 
    this information, or even the fact of it's existence from unauthorised
    disclosure. 
<endlist>

<line>
<HEAD1>(A Brief History of EMU)
<x>(History)

    EMU started life as a project to automate an early DECnet
    management system provided by Digital. Once this was completed, it
    was expanded out to include some of the other Digital tools then
    available and the result was an unwieldy mass of DCL procedures
    that none the less proved the possibility of unburdening the
    network manager from the task of managing the system that was
    intended to save time and effort. This set the first principle of
    design: A network management system should tell the network
    manager about the network, not the reverse.

    One of the early problems found on all systems, including EMU was
    the need to poll the managed devices constantly in order to
    acquire the information necessary to manage it. In extreme cases
    substantial resources are used just to manage and often the tool
    intended to solve problems became the problem. In order to
    alleviate this the concept of listening was developed. All major
    network schemes implement a protocol that is used to maintain the
    integrity of the network. In most cases they pass information
    about nodes or networks that can be reached, nodes that have
    stopped responding and in some cases, service names and other
    useful information. By listening to this conversation, a fairly
    complete picture of any network can be gained without adding data
    to the network. This, though much more difficult to implement
    became the second principle: A network management system should
    be part of the solution, not part of the problem.
<p>      
    The next stage was to recode the logic into programmes and it was
    about that time that the major systems that we use today came
    out (SunNet manager, HP Openview, Netview and DECMCC) and the EMU
    effort would have ended there had any of these systems adhered to
    these (to us!) most basic of principles. The time saving achieved by
    using the system to monitor the network was used up by having to
    monitor the system itself. A further problem was that while all the
    manufacturers claimed multivendor capability the claims in some
    cases were a bit thin and in no case was integration achieved. For
    example DECMCC had a DECnet module, a TSM (Terminal Servers) and
    an SNMP module all which worked but internally did not
    intercommunicate. Thus should a node fail all the individual
    modules reacted independently without regard for each other. It
    was apparent at the time that this failure not only complicated
    the interface and the network manager's task but had this
    integration been included, the system could then use it's
    understanding of the various protocols present to enhance it's
    usefulness. For example, should the DECnet module report a failure
    on a node, the first action the manager would normally take is to
    access the node on an alternate protocol to determine if the node
    is down or if DECnet has failed. As this is a routine effort, this
    routine should be built into the system so that failures can be
    reported more completely and in context. This became the third
    design principle: EMU would take 2 views of the network equally. The
    network as a collection of devices cooperating on 1 or more
    networks and as a protocol in which many devices cooperate. It
    is a subtle but essential distinction.
<p>
    The first 3 versions became experimental and proof of concept and
    for version 4 an architecture was drawn up to guide a more formal
    effort at implementing what was learned so far.  Version 4 was
    successful in that it ran without major change for about 3 years
    and it even managed some commercial success but changes in the
    networking world began to overtake it. The most basic flaw was
    that EMU assumed (accurately at the time) that each device on the
    network had exactly 1 LAN address and this was used as the key in
    all databases. As this became less and less true and EMU changed
    to accommodate, it was clear that the original design was
    inadequate. A decision to re-engineer the system became an
    opportunity to re-architect it and remove some of the built in
    restrictions. Most notable among these restrictions was the over
    adherence to listening and not talking on the network. It was
    clear that listening was a good mechanism to build the initial
    picture but that polling was needed to complete it. 
<p>
    To shorten this narrative to it's essentials, suffice to say that
    in the 3 years since this decision was taken, 18 months was spend
    exclusively on the architecture document with the remaining time
    spend on coding and testing the implementation. The current
    version implements about 60% of the architecture.

