.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH DCREADME 1 "perl 5.004, patch 04" "13/Mar/101" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.PP
.Vb 1
\& dcc - Disciplined C Checker (version 2.7X)
.Ve
.SH "SYNOPSIS"
.PP
.Vb 1
\& Syntax : dcc [options] [sourceFile [sourceFile [sourceFile ...]]]
.Ve
.SH "DESCRIPTION"
dcc  is  a  C checker program, described in the December 1995 issue of ACM
SIGPLAN Notices (see also \*(L'dccarticle.ps\*(R' and  \*(L'dccarticle.ascii\*(R' included
files).
.SH "Copyright"
.PP
.Vb 2
\& Copyright Ecole Superieure d'Electricite ('Supelec'), France, 1995.
\& All Rights Reserved.
.Ve
.SH "Agreement"
.PP
.Vb 3
\& TITLE.   Title,  ownership rights, and intellectual property rights in
\& and to the Software shall remain in Supelec and/or its suppliers.  The
\& Software is protected by international copyright treaties.
.Ve
.Vb 12
\& DISCLAIMER  OF  WARRANTY.   Since  the  Software  is  provided free of
\& charge, the Software is provided on an "AS IS" basis, without warranty
\& of   any   kind,   including  without  limitation  the  warranties  of
\& merchantability,   fitness    for    a    particular    purpose    and
\& non-infringement.   The  entire risk as to the quality and performance
\& of the Software is borne by you.  Should the Software prove defective,
\& you  and not Supelec assume the entire cost of any service and repair.
\& This disclaimer of warranty  constitutes  an  essential  part  of  the
\& agreement. SOME STATES/COUNTRIES DO NOT ALLOW EXCLUSIONS OF AN IMPLIED
\& WARRANTY, SO THIS DISCLAIMER MAY NOT APPLY TO YOU  AND  YOU  MAY  HAVE
\& OTHER LEGAL RIGHTS THAT VARY FROM STATE/COUNTRY TO STATE/COUNTRY OR BY
\& JURISDICTION.
.Ve
.Vb 9
\& LIMITATION  OF  LIABILITY.   UNDER NO CIRCUMSTANCES AND UNDER NO LEGAL
\& THEORY, TORT, CONTRACT, OR OTHERWISE, SHALL SUPELEC OR  ITS  SUPPLIERS
\& OR  RESELLERS  BE  LIABLE TO YOU OR ANY OTHER PERSON FOR ANY INDIRECT,
\& SPECIAL,  INCIDENTAL,  OR  CONSEQUENTIAL  DAMAGES  OF  ANY   CHARACTER
\& INCLUDING,  WITHOUT  LIMITATION,  DAMAGES  FOR  LOSS OF GOODWILL, WORK
\& STOPPAGE, COMPUTER FAILURE  OR  MALFUNCTION,  OR  ANY  AND  ALL  OTHER
\& COMMERCIAL  DAMAGES OR LOSSES.  SOME STATES/COUNTRIES DO NOT ALLOW THE
\& EXCLUSION OR LIMITATION OF INCIDENTAL  OR  CONSEQUENTIAL  DAMAGES,  SO
\& THIS LIMITATION AND EXCLUSION MAY NOT APPLY TO YOU.
.Ve
.SH "Version&Author"
.PP
.Vb 1
\& dcc version 2.7,    February 19th 2001
.Ve
.Sp
.Vb 3
\& Yves Noyelle (<Yves.Noyelle@supelec.fr>)
\& Supelec, Service Informatique,
\& Plateau de Moulon, F-91192 Gif/Yvette Cedex
.Ve
.SH "Contents"
.PP
.Vb 17
\&  1 - Generalities
\&  2 - In the event of bug
\&  3 - Distribution files
\&  4 - Configuration, compilation and installation of dcc
\&  5 - Execution files
\&  6 - Test files
\&  7 - Article
\&  8 - Available d-pragmas
\&  9 - Indentation rules
\& 10 - Options
\& 11 - Environment variables
\& 12 - Exit statuses
\& 13 - Badly implemented features (as of now)
\& 14 - Unimplemented features (as of now)
\& 15 - Known bug(s)
\& 16 - Main changes with respect to previous version
\& 17 - About '16 bits int' platforms
.Ve
.SH "- 1 \- Generalities"
.PP
.Vb 6
\& dcc  verifies  that a C  source  file  complies  with the  precepts of
\& Disciplined C, a set of rules aiming at elevating ANSI C to  the  rank
\& of high level language (as opposed to portable assembly language), and
\& making as much semantics as possible  flow  from  the  design  to  the
\& source   code.    This   is   achieved   mainly  via  quasi-compulsory
\& types/constants naming and 'const' qualifier use.
.Ve
.Vb 4
\& It  also  detects  most  of  the pitfalls of the C language, helps the
\& programmer organize his program modules and write them  so  that  they
\& are  well structured, well encapsulated and more portable, and finally
\& gives some much-needed compile-time checking tools.
.Ve
.Vb 2
\& dcc  is quite fast (from 5 to 10 times faster than a compiler), and is
\& itself written in Disciplined C.
.Ve
.SH "- 2 \- In the event of bug"
.PP
.Vb 2
\& No  guarantee  is  given  that  this  version  of dcc is free of bugs,
\& although every efforts are made to chase and eliminate them.
.Ve
.Vb 5
\& If  you  uncover  one  (or  more...),  please  let  me know (at e-mail
\& <dccsupport@supelec.fr>); a bug report should include a description of
\& the  problem  and  a  short  source  file  causing  it, along with the
\& version/release number of dcc (see  paragraph  10)  and  the  platform
\& (machine/system) used.
.Ve
.SH "- 3 \- Distribution files"
There are five sets of files :
.Ip "- program files" 2
.Sp
.Vb 16
\&  configdc.th
\&  dccFiles.mng
\&  dc.th
\&  dcblk.c/h/ph
\&  dcdecl.c/h/ph
\&  dcdir.c/h/ph
\&  dcexp.c/h/ph
\&  dcext.c/h/ph
\&  dcfmt.c/h
\&  dcinst.c/h/ph
\&  dcmain.c/h/ph
\&  dcprag.c/h/ph
\&  dcrec.c/h/ph
\&  dcrecdir.c/ph/th
\&  dctxttok.c/h
\&  dcmsg.*
.Ve
.Ip "- installation files" 2
.Sp
.Vb 16
\&  adaptStarterFile     (UNIX)    (courtesy of C. Bocage, CRI Supelec)
\&  adaptstarterfilevms.com (VMS)  (courtesy of C. Bocage, CRI Supelec)
\&  askfordfltopt.com    (VMS)
\&  chooseMsgLanguage    (UNIX)
\&  chooseStarterFile    (UNIX)
\&  createLocalFilesMngFile (UNIX) (courtesy of C. Bocage, CRI Supelec)
\&  createlocalexec      (UNIX)
\&  descrip.mms          (VMS)
\&  extracthdrfilesvms.com (VMS)   (courtesy of J. Lauret, SUNY@SB, USA)
\&  frsttime.mms         (VMS)
\&  installdccvms.com    (VMS)
\&  installfile          (UNIX)
\&  makefile             (UNIX)    (courtesy of C. Bocage, CRI Supelec)
\&  makefile.win32       (WINDOWS) (courtesy of C. Enache, UPB student,
\&                                                               Romania)
\&  rmdirvms.com         (VMS)
.Ve
.Ip "- execution files" 2
.Sp
.Vb 16
\&  *.adj                (adjustment files)
\&  dynarray.h           (header file for dynamic arrays, independent of
\&                                                                   dcc)
\&  predefmacvmsvax.txt
\&  predefmacvmsalpha.txt
\&  starter.dccCcHP715   (courtesy of F. Mullet, alumnus)
\&  starter.dccClWin32   (courtesy of E. Bezine, alumnus)
\&  starter.dccDjgpp     (courtesy of J.F. Tilman, alumnus)
\&  starter.dccGccAlphaSkel
\&  starter.dccGccHPUXSkel
\&  starter.dccGccLinuxSkel (courtesy of Ch. Duverger, alumnus)
\&  starter.dccGccMipsSkel
\&  starter.dccGccSunosSkel (courtesy of Ch. Duverger, alumnus)
\&  starter.dccVmsAlpha
\&  starter.dccVmsVax
\&  starter.dccXlcAix    (courtesy of W. Briscoe, freelance, UK)
.Ve
.Ip "- test files" 2
.Sp
.Vb 5
\&  tstdcc
\&  tstdccvms.com
\&  trydcc.c/h
\&  restrydcc.txt
\&  srchdiffrestry.com
.Ve
.Ip "- files describing dcc" 2
.Sp
.Vb 2
\&  dccarticle.ps
\&  dccarticle.ascii
.Ve
.PP
.Vb 2
\& FILES  FROM  OLD DISTRIBUTIONS SHOULD BE DISCARDED BEFORE INSTALLING A
\& NEW VERSION (except possibly local adjustment files).
.Ve
.Vb 3
\& Note :  each dcc source file begins with a  /* <fileName> */  comment,
\&         and ends with a /* End <fileName> */ comment, to  make it easy
\&         to check that it has not been truncated by error.
.Ve
.SH "- 4 \- Configuration, compilation and installation of dcc"
.PP
.Vb 3
\& The   configuration   phase   means   possible  adaptations  of  files
\& 'configdc.th',  'dccFiles.mng',  and  'dcmsg.txt'.   Choice  of   file
\& 'starter.dcc' is discussed paragraph 5.
.Ve
.Vb 22
\& File 'configdc.th' serves to configurate dcc (buffer sizes and so on);
\& most settings should be valid on any machine (except  perhaps  smaller
\& memory  machines or machines  where NULL is  not all-zeros);  comments
\& are  supposed to be  meaningful enough  to make clear  the use of each
\& defined symbol.
\& The  symbol  LONGLONG  should only be  defined on  platforms  having a
\& larger integer size than 'long'; its value is then the  naming of that
\& type (e.g. "#define LONGLONG long long" or "#define LONGLONG __int64".)
\& In the latter case, a "#define __int64 long long" should be put in the
\& starter  file. If LONGLONG  is  not  defined,  the  syntax  for  'long
\& long'  numerical constants ("LL") is not recognized (except in  system
\& header  files).
\& The  macro  IsVisibleChar governs what an 'invisible character' is; it
\& is to  be  adapted  to  locally  used  character  set  extension.
\& The  SignedChar/SignedIntField  symbols  may  have to be adapted  from
\& their default value.
\& EBCDIC character coding could be supported by  changing the 'charInfo'
\& array (file 'dcrec.c').
\& Input/output  is  done  entirely  via   fopen/fread/feof/fflush/fputs/
\& fclose/getchar/setvbuf. The  only other  used  system  functions  are:
\& malloc/realloc/free,  setjmp/longjmp, exit/abort, system (to pass con-
\& trol to the local compiler), fileno/isatty, and getenv.
.Ve
.Vb 10
\& File 'dccFiles.mng' is to be adapted to local conditions; it indicates
\& the directory where dcc execution  files  (adjustment  files  and  the
\& starter file) are to be found, and the system header files  directory.
\& If there are several  system  header  files  directories,  use  symbol
\& 'PredefDCCDFLTS'  (see  paragraph  10; for gcc  platforms, the command
\& file 'createLocalFilesMngFile'  computes the value  of  this  symbol).
\& The content of environment  variable DCCFILES, if defined,  supersedes
\& these values; its format is:
\&   <dccExecFilesDir> or
\&   <dccExecFilesDir> <space> <sysHdrDir>.
.Ve
.Vb 10
\& Files   'dcmsg.###'  contain  the  text  of  all  messages  (including
\& errors/warnings); since these messages are C string literals, they may
\& be  changed  at will.  '###' indicates the language used for messages;
\& at present, there exist "eng"lish  and  "fre"nch  versions.  In  these
\& files,  the  character  sequence '@x', where x is a digit in the range
\& '1'-'9', is not outputted as such, but replaced by a text generated by
\& dcc.  The  character  sequence  '@0'  toggles  a flip-flop controlling
\& output  of  the  '@0'  parenthesized  message  chunks  (output  if  in
\& interactive  mode after 'e'/'E' command, or if options '+zve', '+zvve'
\& activated).
.Ve
.Sh "\s-1UNIX\s0 \s-1OS\s0"
.PP
.Vb 8
\& On an UNIX system, once these files set, compilation is done by typing
\& 'make'. The 'make install' command installs dcc into the system (first
\& edit file 'installfile' to define where you want it to be; unmodified,
\& this file installs dcc in /usr/local/bin/, and the  'execution'  files
\& in  /usr/local/lib/DccExecFiles/  (if  changed,  change  also value of
\& DccExecFilesDir symbol in file  'dccFiles.mng').   Then  test  dcc  on
\& itself  (command  file  'tstdcc'): this should  generate  no error nor
\& warning.
.Ve
.Sh "\s-1VMS\s0 \s-1OS\s0"
.PP
.Vb 2
\& On  a VMS system, use the 'installdccvms.com' file.  The following DCL
\& logical names have to be defined beforehand:
.Ve
.Ip "dccexecfilesdir" 2
.Sp
.Vb 1
\& directory where dcc execution files are installed,
.Ve
.Ip "dccsyshdrdir" 2
.Sp
.Vb 2
\& directory  where system header files ('stdio.h' etc.) can be found (in
\& text form).
.Ve
.PP
.Vb 2
\& Also,  'dcc'  has  to  be  defined as a "foreign" command ($ dcc :== $
\& <complete executable file name>). The test file is 'tstdccvms.com'.
.Ve
.Sh "WindowsXX \s-1OS\s0"
.PP
.Vb 3
\& On WindowsXX, with Microsoft VisualC++ 4.0, use 'makefile.win32' file;
\& do not forget to set the INCLUDE, LIB, and PATH environment variables,
\& e.g. :
.Ve
.Vb 4
\&    set INCLUDE=C:\eProgram Files\eDevStudio\eVC\einclude
\&    set LIB=C:\eProgram Files\eDevStudio\eVC\elib
\&    set PATH=C:\eProgram Files\eDevStudio\eVC\ebin;C:\eProgram Files\e
\&                                                DevStudio\eSharedIDE\ebin
.Ve
.Sh "Other"
.PP
.Vb 1
\& On other systems, you are on your own...
.Ve
.Sp
.Vb 2
\& Note : possible  local  compiler  warnings  while  compiling  dcc  may 
\&        safely be ignored (provided the compiler is mature).
.Ve
.SH "- 5 \- Execution files"
.PP
.Vb 1
\& Several files are needed by dcc to execute correctly:
.Ve
.Sh "Starter file"
.PP
.Vb 10
\& Its  purpose  is  to  define  those symbols that are predefined by the
\& local compiler.  It also gives the name of the compiler (via a  string
\& literal,  that  must  be  the  value  of  the '__dcc' symbol), and can
\& override local features (such as specific  specifiers/qualifiers, e.g.
\& the "globalvalue" specifier of VMS C compilers). Starter files for VMS
\& C compilers (both VAXs and  ALPHAs), the ULTRIX gcc compiler, the OSF1
\& gcc  compiler,  the  HP-UX cc/gcc  compilers, the LINUX gcc  compiler,
\& the SUNOS gcc compiler, the AIX xlc compiler, the  Djgpp  compiler and
\& the Windows VisualC++ cl compiler are included. For SUNOS, the  system
\& header files directory must be the gcc header files directory.
.Ve
.Vb 5
\& When  the  value  of  the  '__dcc'  symbol  indicates  gcc (or cc on a
\& VMS/Alpha  platform),  a  'skeleton'  starter  file  is  automatically
\& completed   with   the   compiler  predefined  macros  (command  files
\& adaptStarterFile*).  This could be done for other compilers,  provided
\& they give a mean to obtain these macros.
.Ve
.Vb 4
\& Note 1 : the  called  compiler  can  be  changed  from the  default by 
\&          redefining  the '__dcc'  symbol in the dcc  command line ('-D'
\&          or '/DEF' option), but then the  starter  file may have to be
\&          changed.
.Ve
.Vb 8
\& Note 2 : system  include files  are  configurated via several symbols,
\&          such as _XOPEN_SOURCE  or _POSIX_C_SOURCE; these symbols  are
\&          not defined  by default in dcc (except if the called compiler
\&          is gcc or VMS/Alpha cc), which may result in 'undefined func-
\&          tion' messages. To set such a symbol, either define it in the
\&          'starter.dcc'  file  (then it  is  global  for all users), or
\&          define it  using  the  '-D'  command  line  option  (possibly
\&          via the DCCDFLTS environment variable, see paragraph 10).
.Ve
.Sh "Adjustment files"
.PP
.Vb 6
\& Their  purpose  is  to  amend system header files, so that they do not
\& cause dcc to issue undue warnings.  Conceptually, an  adjustment  file 
\& is  appended  to the  end of the  corresponding header file (after the
\& first   inclusion,   or    after    each    inclusion    if     symbol
\& ADJFILES_INCLUDED_AT_EACH_INCL is defined in the starter file; cf file
\& 'time.adj').
.Ve
.Vb 6
\& An  adjustment  file  cannot  declare/define   anything  not declared/
\& defined  by the  corresponding  header  file  (except if  something is
\& missing in it, e.g. the prototype for the "sbrk" function in stdlib.h;
\& see then d-pragma /*~AddedObj*/, paragraph  8). They  may redeclare at
\& will  system  function, objects, typedefs (even already used ones) and
\& macros.
.Ve
.Vb 4
\& An identifier not declared in the corresponding  system header file is
\& ignored.  There  may be  several  redefinitions for a given  function/
\& structure/union; the  one that is  chosen is the one of  the same sort
\& and with the same number of parameters/fields.
.Ve
.Vb 3
\& A system  macro (with  parameter, that is not a  symbol), for  example
\& "setjmp", after  having been  met once in an  adjustment  file, is not
\& expanded any more (being replaced by a function prototype).
.Ve
.Vb 3
\& The 'bool' type is implicitely  defined inside an adjustment file, but
\& precautions  should be taken if is also  defined by the  corresponding
\& system header file (cf. 'curses.adj').
.Ve
.Vb 5
\& Any  preprocessor feature can be used in an adjustment file.  Besides,
\& the  'cdefined'  function,  similar  to  the  'defined'   preprocessor
\& function  but  answering  True if  its parameter  is a defined  system
\& 'program' identifier (as  opposed to a 'preprocessor' identifier), can
\& also be used (see for example 'signal.adj').
.Ve
.Vb 6
\& By   convention,   for   a  system  header  file  named  'xxx.h',  the
\& corresponding adjustment file is named 'xxx.adj', and is  searched  by
\& default  in  the  DccExecFilesDir  directory.   If  one  wants another
\& suffix, or wants to put (some) adjustment files in other  directories,
\& one  has  to  create  an  'adjFiles.dcc'  file  in the DccExecFilesDir
\& directory, file whose format is (for each line):
.Ve
.Vb 2
\&   "<system header file name>" , "<corresponding adjustment file
\&                                     full name (with absolute path)>" ;
.Ve
.Vb 6
\& Example of 'adjFiles.dcc' file:
\&   #define X11AdjDir "/usr/local/include/DccAdj/"
\&   "icon.h", X11AdjDir "icon.adj";
\&   "Kn/Knvas.h", X11AdjDir "Knvas.adj";
\&   ...
\&   #undef X11AdjDir
.Ve
.Vb 4
\& Should  any  header  file  reveal  to be unamendable, it can be purely
\& replaced by the  corresponding  adjustment  file.   It  must  then  be
\& described in the 'adjFiles. dcc' file, and the corresponding line must
\& be prefixed by an exclamation point ('!').
.Ve
.Vb 3
\& Adjustment  files  for most C system header files (curses.h:  courtesy
\& of W. Briscoe, freelance, UK) are included; adjustment files  for  the
\& X-Window library are available, but only partially checked.
.Ve
.SH "- 6 \- Test files"
.PP
.Vb 2
\& The  command  files  'tstdcc*' just check dcc on its own source files;
\& this check should not generate any error nor warning.
.Ve
.Vb 4
\& You can get a feeling of what dcc can do for you by typing the command
\& "dcc trydcc.c".  You can also limit dcc scrutiny by using  appropriate
\& options  (see paragraph 10) or by  conditional  compilation  using the
\& '__dcc' symbol.
.Ve
.Vb 2
\& There  are  many  more  non-regression  check  files, but they are not
\& included.
.Ve
.SH "- 7 \- Article"
.PP
.Vb 4
\& Unfortunatly,  the wrong version of the paper was published in SIGPLAN
\& Notices; so the right version  (in  fact  updated  and  somewhat  more
\& detailed)  is  included,  in  Postscript form, along with a pure ASCII
\& form (for 'diff' purposes).
.Ve
.SH "- 8 \- Available d-pragmas"
.PP
.Vb 4
\& For  the following, a "file identifier" is defined to be composed of a
\& "file access path" (machine name, directories...), followed first by a
\& "file  name"  and  then by a "file suffix" that begins on the last dot
\& '.' seen in the file identifier.
.Ve
.Vb 5
\& A "header" file is a source file whose file suffix contains the letter
\& 'h' at least once, and which is included via the '#include' directive;
\& a  "system  header"  file  is a header file whose '#include' directive
\& uses the '<...>' form. A "body" file is a source file which is neither
\& a header file, nor a file included by a header file.
.Ve
.Vb 4
\& Except  /*~DccCompliant*/, /*~DollarSign*/, /*~NoWarn*/, /*~PopWarn*/,
\& /*~Private*/,   /*~PrivateTo*/,   /*~Public*/,   /*~TypeCombination*/,
\& /*~Warn*/, d-pragmas have purely local effect, that is they have to be
\& used each time the corresponding situation occurs.
.Ve
.Sh "/*~AddedObj*/"
.Sp
.Vb 2
\&   allows a new function/object/type to be added in an adjustment file:
\&       void sbrk/*~AddedObj*/(long);
.Ve
.Sh "/*~BackBranch*/"
.Sp
.Vb 2
\&   avoids warning on backward branches:
\&       goto alrdDefLabel /*~BackBranch*/;
.Ve
.Sh "/*~CastTo <type> */"
.Sp
.Vb 7
\&   allows pseudo-cast between parallel types; also to  be used to avoid
\&   warning on comparison of difference(s) of unsigned int:
\&       typedef struct {int x;}Ts; typedef Ts Ts1;
\&       Ts s; Ts1 s1; unsigned int ui1, ui2;
\&       ...
\&       s1 = /*~CastTo Ts1*/ s;
\&       if (/*~CastTo unsigned int */ (ui2 - ui1) > 1) ...
.Ve
.Sh "/*~ComposingHdr*/"
.Sp
.Vb 5
\&   tells  that the whole service provided by the included header file is to
\&   be part of the service offered by the including header file:
\&       #include <math.h> /*~ComposingHdr*/
\&   Permits also a header file to carry a name  different from its body file
\&   (through a dummy header file carrying the right name).
.Ve
.Sh "/*~DccCompliant*/"
.Sp
.Vb 3
\&   in a system  header file, indicates  that the (remaining portion of the)
\&   file  conforms to dcc  requirements, and  that  'typedefs'  will  create
\&   parallel types if applicable; usable anywhere (in a system header file).
.Ve
.Sh "/*~DollarSign*/"
.Sp
.Vb 2
\&   must be at  beginning of module (possibly after comments); autorizes '$'
\&   in identifiers.
.Ve
.Sh "/*~DynInit*/"
.Sp
.Vb 3
\&   avoids  warning on  dynamic  initialization  (by constants) of  compound
\&   objects:
\&       [auto] struct _s toto = {...} /*~DynInit*/;
.Ve
.Sh "/*~EndLongjmpCallable*/ "
.Sp
.Vb 4
\&   tells the 'volatile'  qualifier  checking  algorithm that the  "longjmp"
\&   function won't  be called  beyond  this point.   Usable  anywhere in the
\&   body of a function, after a "setjmp"-controlled 'if' statement.
\&.
.Ve
.Sh "/*~ExactCmp*/"
.Sp
.Vb 2
\&   avoids warning on floating point comparison for (in)equality:
\&       if (fltVar == 0 /*~ExactCmp*/) ...
.Ve
.Sh "/*~FullEnum*/"
.Sp
.Vb 4
\&   asks dcc to warn if not every  constant  of the (enum)  switch  type has
\&   been  used as case values; only useful if  a  'default'  clause  is used
\&   (for example to catch possible "strange" values of the enum expression):
\&       default: /*~FullEnum*/ ...
.Ve
.Sh "/*~Generic*/"
.Sp
.Vb 14
\&   tells dcc that the  returned  type of a function is  compatible with any
\&   non-closed descendant  of this  type (subtyping) or, in case of 'void *'
\&   returning function, with  any  pointer. Not  valid if any  parameter  is
\&   marked /*~ResultType*/ or /*~ResultPtr*/;incompatible with /*~Utility*/:
\&       int atoi(const char *) /*~Generic*/;
\&       double sin(double) /*~Generic*/;
\&       void *allocateChunk() /*~Generic*/;
\&   The variant /*~Generic <fctList> */ is allowed  only in adjustment files
\&   (see /*~RootTyp*/).
\&   /*~Generic*/ can also be used with function  parameters, to specify that
\&   the  so-qualified  formal  parameter is  compatible with any  descendant
\&   (closed or not):
\&       size_t strlen(const char * /*~Generic*/);
\&       void (*savPSCF)(char /*~Generic*/);
.Ve
.Sh "/*~Ignore*/	"
.Sp
.Vb 3
\&   tells  dcc  to  ignore  object-like  or  function-like calls to  defined
\&   pseudo-macro. Allowed only in starter files:
\&       #define /*~Ignore*/ __asm
.Ve
.Sh "/*~IndexType <type> */"
.Sp
.Vb 9
\&   specifies  type of index  values usable for an  array, allocated  either
\&   statically or dynamically  (default  index type for static  arrays: type
\&   of bound, except if bound given by a plain arithmetic constant; then any
\&   integral arithmetic type), or that can be added to a pointer. To be used
\&   in array/pointer declaration:
\&       Color arr[ArrSiz /*~IndexType ColorIndex */];
\&       bool * /*~IndexType Trow*/ * /*~IndexType Tcol*/ twoDimSwitchArray;
\&   or pointer creation:
\&       & /*~IndexType Tcol*/ col
.Ve
.Sh "/*~Init <listVar>*/"
.Sp
.Vb 5
\&   tells the  initialization-checking  algorithm  that, from  now on, all 
\&   variables in the list  can be considered as initialized. Very specific
\&   (see X-Window  applications,  or  adjustment  files). Usable  anywhere
\&   (in the  scope  of the variables):
\&       XtSetArg(arg[0], XmNchildren, /*~Init children*/ &children);
.Ve
.Sh "/*~LiteralCst*/"
.Sp
.Vb 4
\&   tells  that expressions  of a so qualified  parallel type accept unnamed
\&   constants without  warnings (see also options '-zuc', '-zgpr', paragraph
\&   10):
\&       typedef int Int /*~LiteralCst*/;
.Ve
.Sh "/*~LocalAdr*/"
.Sp
.Vb 3
\&   avoids  warning when returning  address of local object from a function,
\&   or assigning such address to global/external pointer:
\&       gblPtr = &localObject + 1 /*~ LocalAdr */;
.Ve
.Sh "/*~Masking*/"
.Sp
.Vb 3
\&   avoids  warning  if a macro  name  is the same as  an  already  existing
\&   identifier:
\&       #define /*~Masking*/ macroName macroBody
.Ve
.Sh "/*~MayModify*/"
.Sp
.Vb 8
\&   indicates  that  modifications  may  occur through a  supposedly  const-
\&   pointing  pointer  parameter (via  casting), or  through a  struct/union
\&   parameter  containing  non-const pointers. To be used in functions whose
\&   name  implies  modifications (such as freeing  functions), or in case of
\&   (possible) slight modifications:
\&       void freeTree(const struct _tree *x /*~MayModify*/);
\&       void clipTree(struct _tree x /*~MayModify*/);
\&   See also /*~ResultPtr*/ d-pragma.
.Ve
.Sh "/*~NeverReturns*/"
.Sp
.Vb 4
\&   documents that a void function never returns control:
\&       static void errExit(...) /*~NeverReturns*/;
\&   The variant  /*~NeverReturns <fctList> */  is allowed only in adjustment
\&   files (see /*~RootTyp*/).
.Ve
.Sh "/*~NoBreak*/"
.Sp
.Vb 3
\&   avoids warning if falling through the end of a 'case' statement:
\&       case C1 : i = 1;  /*~NoBreak*/
\&       case C2 : i++;  break;
.Ve
.Sh "/*~NoDefault*/"
.Sp
.Vb 5
\&   avoids  warning  if no 'default'  case at  end of 'switch'  statement on
\&   enumeration  (not  needed of course if all  constants have  been used as
\&   case values):
\&       case Cn : i = ... ;
\&       /*~NoDefault*/
.Ve
.Sh "/*~NonConstExp*/"
.Sp
.Vb 4
\&   makes dcc believe that a (parenthesized) expression is not constant:
\&       if ((~0==-1)/*~NonConstExp*/) ...
\&   Notice  that the  Pascalian  form "while (TRUE)"  can be  advantageously
\&   replaced by the C idiom "for (;;)",
.Ve
.Sh "/*~NotUsed*/"
.Sp
.Vb 6
\&   prevents  warning on  not-used  object or enum constant  or formal para-
\&   meter (function or macro):
\&       enum {Ce1, Ce2 /*~NotUsed*/, Ce3 ...}
\&       static void shift(Tstring x, TtypeElt y /*~NotUsed*/);
\&       #define Sink(x /*~ NotUsed */)
\&       static const char *versionName = "Version 3.3.1" /*~NotUsed*/;
.Ve
.Sh "/*~NoWarn*/"
.Sp
.Vb 3
\&   to be  used in front of  sections of code not (yet)  dcc-compliant  (see
\&   also /*~Warn*/, /*~PopWarn*/ d-pragmas);  usable anywhere.  Warnings are
\&   automatically disabled inside system header files.
.Ve
.Sh "/*~OddCast*/"
.Sp
.Vb 2
\&   to make dcc swallow a cast it frowns upon:
\&       ptrInt = (int * /*~OddCast*/) ptrStruct;
.Ve
.Sh "/*~PopWarn*/"
.Sp
.Vb 2
\&   goes  back to  previous  Warn/NoWarn  state (see /*~Warn*/, /*~No Warn*/
\&   d-pragmas); usable anywhere. At least 16 levels kept.
.Ve
.Sh "/*~PortableQM*/"
.Sp
.Vb 2
\&   to make dcc swallow a cast it has good reasons to believe not portable:
\&       ptrFloat = (float * /*~PortableQM*/)ptrDbl;
.Ve
.Sh "/*~Private*/"
.Sp
.Vb 2
\&   if used in  header file X.*h*, is strictly  equivalent  to  /*~PrivateTo
\&   "<currentFile>", "X.c" */.
.Ve
.Sh "/*~PrivateTo \*(M"<fileName>\*(S" [, \*(M"<fileName>""]* */"
.Sp
.Vb 12
\&   indicates  that struct/union members, or enum constants, declared there-
\&   after are  only visible  from  the  indicated  file(s),  or from  macros
\&   defined in the  indicated file(s) or called by such macros. Also  needed
\&   to  indicate  in which file is  defined an incomplete  struct/union  (if
\&   /*~Private* */  indicates several  files, this file is taken as the last
\&   one).
\&   Usable  anywhere (in a header file).
\&   Scope: until  next /*~Private*/, /*~PrivateTo*/ or /*~Public*/ d-pragma;
\&   an '#include' of (another) header file  creates a hole in the  scope for
\&   the  duration of the include. File names  may contain  joker  characters
\&   ('*' matches any set of characters; '%' matches any character):
\&       /*~PrivateTo "dcrec.c", "dc%%%.*h*" */
.Ve
.Sh "/*~PseudoVoid*/"
.Sp
.Vb 5
\&   authorizes a so-declared (non  void-returning) function  to be used as a
\&   statement:
\&       char *strcpy(char *x, const char *y) /*~PseudoVoid*/;
\&   The variant  /*~PseudoVoid <fctList> */  is  allowed  only in adjustment
\&   files (see /*~RootTyp*/).
.Ve
.Sh "/*~Public*/"
.Sp
.Vb 2
\&   indicates end of last /*~Private#*/ scope; usable  anywhere (in a header
\&   file).
.Ve
.Sh "/*~ResultPtr*/"
.Sp
.Vb 4
\&   to be used for (pointer)  parameters that are  returned  as result; same
\&   effect  as  /*~ResultType*/,  plus  allows (at calling level) "should be
\&   'const'" pointer checking propagation:
\&       char *strchr(const char * /*~ResultPtr*/, char);
.Ve
.Sh "/*~ResultType*/"
.Sp
.Vb 7
\&   indicates  that the result type of a function  call is the type (or  the
\&   smallest common type) of the current  actual parameter(s)  corresponding
\&   to the so qualified formal parameter(s):
\&       void *realloc(void *old /*~ResultType*/, size_t size);
\&       Window mergeWindow(Window/*~ResultType*/, Window/*~ResultType*/);
\&       long sum(long m /*~ResultType*/, long n /*~ResultType*/);
\&       short s; signed char b; unsigned char ub;
.Ve
.Vb 5
\&       s = sum(b, s);  /* OK; returned type behaves as 'short' from dcc
\&                                                             standpoint. */
\&       s = sum(ub, s); /* idem */
\&       b = sum(SCHAR_MAX + 1, b); /* WRONG, because return type is
\&                                                                'short'. */
.Ve
.Sh "/*~RootType*/"
.Sp
.Vb 6
\&   closes (renders incompatible with its hierarchy) the type subtree headed
\&   by the so qualified (parallel) type:
\&       typedef unsigned int Talgn /*~RootType*/;
\&   The  variant  /*~RootType  <typeList>*/  is  allowed  only in adjustment
\&   files:
\&       /*~RootType wchar_t, wint_t*/
.Ve
.Sh "/*~SameValue*/"
.Sp
.Vb 5
\&   avoids  warning if an enum  constant have the same value that a previous
\&   constant of the same enum:
\&       enum _colors {BEG_COLORS, INFRARED=BEG_COLORS /* ~SameValue not
\&          necessary here, because 'BEG_COLORS' is last defined constant */,
\&           RED, ORANGE, YELLOW, ..., BEG_VISIBLE_COLORS=RED /*~SameValue*/}
.Ve
.Sh "/*~Saved*/"
.Sp
.Vb 3
\&   to be  used  if a  formal  parameter  which is a  pointer is saved  into
\&   permanent storage (static/extern):
\&       void qio(Semaphore * /*~Saved*/);
.Ve
.Sh "/*~SideEffectOK*/"
.Sp
.Vb 2
\&   tells that a side effect via a macro parameter is OK:
\&       #define DangerousMin(x, y/*~SideEffectOK*/) (x<y)? x : y
.Ve
.Vb 1
\&       DangerousMin(oldMin, tab[i++])
.Ve
.Sh "/*~SizeOfMemBlk*/"
.Sp
.Vb 4
\&   allows  to  check,  for   'malloc'-like  functions   using  'sizeof'  as
\&   parameter,  whether the type of the (first) sizeof  argument is the type
\&   pointed by the receiving pointer:
\&       void *malloc(size_t /*~SizeOfMemBlk*/);
.Ve
.Sh "/*~SizeOK*/"
.Sp
.Vb 4
\&   avoids  warning  when  no  width  limit  is  specified  in a  conversion
\&   specification  of  'sscanf', or  when a large  struct/union is passed as
\&   parameter:
\&       (void)sscanf(charPtr1, "%s", charPtr2/*~SizeOK*/);
.Ve
.Sh "/*~TypeCombination <combList>*/"
.Sp
.Vb 36
\&   indicates allowed combinations  between (a priori incompatible) parallel
\&   types. Syntax:
\&       <combList>::= <combElt> [ , <combElt> ]*
\&       <combElt> ::= <typeIdent> <operator> <typeIdent> -> <typeIdent>
\&   The possible operators are:  +, -, *, /, %, ~+ (non-commutative add) and
\&   ~* (non-commutative multiply).  For the / operator, if one operand is  a
\&   descendant  of  the other, the result type can be a native type (for use
\&   as a generic coefficient). Besides, some combinations  are automatically
\&   deduced:
\&   - for '+', from Ta + Tb -> Tc are deduced:
\&                   Tb + Ta -> Tc   (1)
\&                   Ta - Tb -> Tc   (2) (deduced only if Tc = Ta)
\&   - for '*', from Ta * Tb -> Tc are deduced:
\&                   Tb * Ta -> Tc   (3)
\&                   Tc / Ta -> Tb   (4)
\&                   Tc % Ta -> Tc   (5)
\&                   Tc / Tb -> Ta   (6)
\&                   Tc % Tb -> Tc   (7)
\&     Lines 5 and 7 are deduced only if Ta and Tb are of integer type.
\&   If necessary, type  hierarchy  is  searched  to find  an  applying  type
\&   combination.  D-pragma usable  only  outside  of any  block. Once given,
\&   cannot be desactivated:
\&       typedef float Volt, Amp, Watt, Ohm;
\&       typedef int Tgen;   /* 'generic' type */
\&       typedef Tgen Tspe;  /* specialization of Tgen */
\&       /*~TypeCombination Volt  * Amp  -> Watt,
\&                          Amp   * Ohm  -> Volt,
\&                          Watt  / Watt -> float,
\&                          Tspe ~+ Tgen -> Tspe */
\&       typedef int Fruit;
\&       typedef Fruit Apple, Pear;
\&       /*~TypeCombination Apple + Pear -> Fruit */
\&       {
\&         Volt v; Amp i; Watt p, p1; Ohm r; Tspe spe; Tgen gen;
\&         typedef Apple MacIntosh;
\&         MacIntosh macIntosh; Fruit fruit; Pear pear;
.Ve
.Vb 7
\&         p = r * i * i;    /* OK */
\&         p = v * (v / r);  /* OK */
\&         r *= p/p1;        /* OK */
\&         spe -= gen;       /* OK; illegal if no ~TypeCombination, because
\&                                contrary to dcc default hierarchy rules. */
\&         fruit = pear + macIntosh;  /* idem */
\&        }
.Ve
.Sh "/*~Undef <listIdent>*/ =head2 /*~UndefTag <listIdent>*/"
.Sp
.Vb 3
\&   terminates  (for dcc) the scope of all indicated  identifiers ('general'
\&   or 'tag' name space); usable anywhere (outside of any block):
\&       /*~Undef TpermSto, headPermSto*/
.Ve
.Sh "/*~Utility*/"
.Sp
.Vb 5
\&   to be used for  functions  returning a  representation  type that has no
\&   reason to be named. Incompatible with /*~Generic*/:
\&       int scanf(const char *, ...) /*~Utility*/;
\&   Can also be used for a function formal parameter, to specify that actual
\&   parameter cannot be of parallel type.
.Ve
.Sh "/*~VoidToOther*/"
.Sp
.Vb 4
\&   autorizes  automatic  conversion from (non-generic) 'void *' type to any
\&   other pointer type, or to read, via scanf, into a 'void *' variable:
\&       objPtr = /*~VoidToOther*/ ptrOnVoid;
\&       scanf("%i", /*~VoidToOther*/ ptrOnVoid);
.Ve
.Sh "/*~Warn*/"
.Sp
.Vb 3
\&   to be used in front of dcc-compliant code (default state at beginning of
\&   program,  except  if  '-znw'  option  used); usable  anywhere.  See also
\&   /*~PopWarn*/, /*~NoWarn*/ d-pragmas.
.Ve
.Sh "/*~zif <boolExp> <stringCst> */"
.Sp
.Vb 6
\&   causes  emission on  stderr (at  dcc  execution  time) of <stringCst> if
\&   compile-time evaluable <boolExp> is true; can make use of  special 'zif'
\&   functions  (see "Compile-time checking tool"  paragraph  in the paper on
\&   dcc), and be used anywhere (also inside macros):
\&       /*~ zif (sizeof(typArray)/sizeof(typArray[0]) !=
\&                    __extent(TtypName)+1) "Array 'typArray': bad length" */
.Ve
.Vb 6
\&       typedef struct{int a, b, c;} AnyStruct;
\&       static AnyStruct x = {
\&         0  /*~zif !__member(a) "misplaced init for field 'a'" */,
\&         3  /*~zif !__member(b) "misplaced init for field 'b'" */,
\&         -2 /*~zif !__member(c) "misplaced init for field 'c'" */,
\&         /*~zif !__member() "Structure 'x' not fully initialized" */};
.Ve
.Sh "Notes"
.Sp
.Vb 11
\&   - for dcc, a  d-pragma  is   made  up  of  tokens,  the inner ones being
\&     perfectly  macro-substitutable; for  instance,  the  /*~LocalAdr*/  d-
\&     pragma consists of the three following tokens:
\&        /*~         (special token)
\&        LocalAdr    (identifier)
\&        */          (special token)
\&   - an empty d-pragma name is legal; the d-pragma is then  ignored (except
\&     in the reach of a '#' preprocessing  operator, in which case it trans-
\&     lates into a space),
\&   - d-pragmas are visible in the list generated by the '+zlt' option,
\&   - numerous examples of use of d-pragmas can be found in dcc source files.
.Ve
.SH "- 9 \- Indentation rules"
.PP
.Vb 2
\& Indentation  is  checked  only on lines  beginning a  declaration or a
\& statement.
.Ve
.Ip "General case :" 1
.Sp
.Vb 4
\& Indentation level is increased on  entering  a  block  (just after its
\& opening brace), for the duration of the block, or on entering  a  sub-
\& statement  (statement  controlled  by  'if',  'else',  'do',  'while',
\& 'for'), for the duration of the substatement.
.Ve
.Ip "Special cases :" 1
.Sp
.Vb 4
\& - no change of indentation level for construct  "else if", both tokens
\&   being on same line;
\& - block as substatement may be lined up with controlling statement;
\& - 'case/default's may be lined up with corresponding 'switch'.
.Ve
.SH "- 10 \- Options"
.PP
.Vb 3
\& Their  list can be  obtained  by  executing  a  dcc  command alone (no
\& argument); the version/release number is also given. If the prefix '+'
\& is replaced by '-', or vice versa, the option effect is reversed.
.Ve
.Vb 3
\& A given option is valid for all files met subsequently in the  command
\& line, unless reverted or cancelled (cf. option '+zrst'); options given
\& after last file name apply only to last file (VMS).
.Ve
.Vb 44
\& Available options :
\&  -zac  no missing 'const' qualifier check,
\&  -zbo  no 'bool' type check,
\&  -zcc  do not call compiler,
\&  -zcw  call compiler only if no warning/error,
\&  -zefi no check of inefficient constructs,
\&  -zfci do not check first character of identifiers,
\&  -zfrt no unnamed function return type check,
\&  -zgpr no check of "good programming practices",
\&  -zinc no '#include' position check,
\&  -zind no indentation check,
\&  -zlvlX call compiler only if there is no warning of level >= X,
\&  -znui no check of unused identifiers,
\&  -znup no check of unused function parameters,
\&  -znw  start in "no warning" mode,
\&  -zpe  no check of various possible errors,
\&  -zpo  no portability check,
\&  -zrd  no readability check,
\&  -zsam no stopping after each message,
\&  -ztr  no trailer,
\&  -zuc  no check of unnamed constants,
\&  -zwa  no warnings,
\&  -zwr  no forced newline at 80 characters,
\&  +zae  report all  errors/warnings (default is, after a few  messages,
\&        to report only first error of each statement or declaration),
\&  +zafn always display  current file  name  in  error/warning messages,
\&  +zctn check first character  of  (created)  type  names (if '-zfci'),
\&  +zdol allows '$' in identifiers,
\&  +zepl warn on empty formal parameter list,
\&  +zkwm keywords redefinable (via macro),
\&  +zlt/+zltX list last tokens  processed before error/warning  (X =
\&        buffer length),
\&  +zmcc check all pointers for missing 'const' qualifier,
\&  +zmic more index type checking,
\&  +zmsgX  X: maximum number of emitted messages (default is 20),
\&  +zpnt check that function parameters are of named type,
\&  +zrhw report only errors or else highest level warnings,
\&  +zrst reset all previous options,
\&  +zsy  print each block's symbol table,
\&  +ztabX  X: tab  spacing (for indentation purposes; 8 is default),
\&  +zudt warn on tags declared (but not defined) in header files,
\&  +zusg give 'usage',
\&  +zve  output more informative error/warning messages,
\&  +zvve idem '+zve', plus output type descriptions in full.
.Ve
.Vb 5
\& Options not  beginning with `+z'/`-z'  are transmitted to compiler, but
\& dcc interprets  `-I'/`-D'/`-U' cc options (or their VMS  counterparts),
\& besides  passing them to the compiler. For VMS, only one  macro can  be
\& defined by a  given /DEF; /DEF, /INCL, /UNDEF options have  to be named
\& that way, and separated by spaces.
.Ve
.Vb 7
\& The environment variable DCCDFLTS can  contain any part of the command
\& line;  its  content  is  logically  added  (just  after  'dcc') to the
\& beginning  of  all following  dcc  command  lines.  The  value  of the
\& 'PrefixDCCDFLTS' symbol (file 'dccFiles. mng') is also added.
\& Examples of setting of DCCDFLTS:
\& - UNIX         setenv DCCDFLTS '-zsam +zvve +zlt'
\& - VMS          $ DCCDFLTS = "-zsam +zvve +zlt"
.Ve
.SH "- 11 \- Environment variables"
.PP
.Vb 2
\& There are two of them: DCCFILES (see  paragraph  4), and DCCDFLTS (see
\& paragraph 10).
.Ve
.SH "- 12 \- Exit statuses"
.PP
.Vb 4
\& dcc provides six different exit statuses, whose values depend on local
\& platform (see file 'configdc.th'):  EXIT_SUCCESS,  two  EXIT_WARNINGS,
\& two  EXIT_ERRORS,  and  EXIT_FAILURE  (returned  when  dcc has to stop
\& before end).
.Ve
.SH "- 13 \- Badly implemented features"
.PP
.Vb 5
\& - floating  constants are  recognized  lexically, but ill converted if
\&   they have a  fractional  part or a non-nul exponent (only noticeable
\&   in  fancy  array  declaration,  e.g.  "char arr[(int)(2.5+6.5)]"  =>
\&   arr[4], not [9]),
\& - not all cases of non-portability checked.
.Ve
.Vb 2
\& Note: 'sizeof' does not take into account alignment holes, but this is
\& done on purpose, to render portable some checks via d-pragma /*~zif*/.
.Ve
.SH "- 14 \- Unimplemented features"
.PP
.Vb 3
\& - check for non-ambiguity of external identifiers,
\& - size of objects not given ('+zsy' option),
\& - computation of floating-point constant expressions.
.Ve
.SH "- 15 \- Known bugs"
.PP
.Vb 1
\& None
.Ve
.SH "- 16 \- Main changes with respect to version 2.6"
.PP
.Vb 6
\& - d-pragma /*~NotUsedAfter*/ removed (not useful anymore),
\& - big improvement in management of adjustment files (cf. modifications to
\&   paragraph 5),
\& - revision of all adjustment files,
\& - cases of '16-bits int' platforms, and of platforms where NULL is not
\&   all-zeros, taken care of (but not tested).
.Ve
.SH "- 17 \- About 16 bits int platforms"
.PP
.Vb 1
\& Portage completed (but not tested).
.Ve

.rn }` ''
.IX Title "DCREADME 1"
.IX Name "dcc - Disciplined C Checker (version 2.7X)"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "Copyright"

.IX Header "Agreement"

.IX Header "Version&Author"

.IX Header "Contents"

.IX Header "- 1 \- Generalities"

.IX Header "- 2 \- In the event of bug"

.IX Header "- 3 \- Distribution files"

.IX Item "- program files"

.IX Item "- installation files"

.IX Item "- execution files"

.IX Item "- test files"

.IX Item "- files describing dcc"

.IX Header "- 4 \- Configuration, compilation and installation of dcc"

.IX Subsection "\s-1UNIX\s0 \s-1OS\s0"

.IX Subsection "\s-1VMS\s0 \s-1OS\s0"

.IX Item "dccexecfilesdir"

.IX Item "dccsyshdrdir"

.IX Subsection "WindowsXX \s-1OS\s0"

.IX Subsection "Other"

.IX Header "- 5 \- Execution files"

.IX Subsection "Starter file"

.IX Subsection "Adjustment files"

.IX Header "- 6 \- Test files"

.IX Header "- 7 \- Article"

.IX Header "- 8 \- Available d-pragmas"

.IX Subsection "/*~AddedObj*/"

.IX Subsection "/*~BackBranch*/"

.IX Subsection "/*~CastTo <type> */"

.IX Subsection "/*~ComposingHdr*/"

.IX Subsection "/*~DccCompliant*/"

.IX Subsection "/*~DollarSign*/"

.IX Subsection "/*~DynInit*/"

.IX Subsection "/*~EndLongjmpCallable*/ "

.IX Subsection "/*~ExactCmp*/"

.IX Subsection "/*~FullEnum*/"

.IX Subsection "/*~Generic*/"

.IX Subsection "/*~Ignore*/	"

.IX Subsection "/*~IndexType <type> */"

.IX Subsection "/*~Init <listVar>*/"

.IX Subsection "/*~LiteralCst*/"

.IX Subsection "/*~LocalAdr*/"

.IX Subsection "/*~Masking*/"

.IX Subsection "/*~MayModify*/"

.IX Subsection "/*~NeverReturns*/"

.IX Subsection "/*~NoBreak*/"

.IX Subsection "/*~NoDefault*/"

.IX Subsection "/*~NonConstExp*/"

.IX Subsection "/*~NotUsed*/"

.IX Subsection "/*~NoWarn*/"

.IX Subsection "/*~OddCast*/"

.IX Subsection "/*~PopWarn*/"

.IX Subsection "/*~PortableQM*/"

.IX Subsection "/*~Private*/"

.IX Subsection "/*~PrivateTo \*(M"<fileName>\*(S" [, \*(M"<fileName>""]* */"

.IX Subsection "/*~PseudoVoid*/"

.IX Subsection "/*~Public*/"

.IX Subsection "/*~ResultPtr*/"

.IX Subsection "/*~ResultType*/"

.IX Subsection "/*~RootType*/"

.IX Subsection "/*~SameValue*/"

.IX Subsection "/*~Saved*/"

.IX Subsection "/*~SideEffectOK*/"

.IX Subsection "/*~SizeOfMemBlk*/"

.IX Subsection "/*~SizeOK*/"

.IX Subsection "/*~TypeCombination <combList>*/"

.IX Subsection "/*~Undef <listIdent>*/ =head2 /*~UndefTag <listIdent>*/"

.IX Subsection "/*~Utility*/"

.IX Subsection "/*~VoidToOther*/"

.IX Subsection "/*~Warn*/"

.IX Subsection "/*~zif <boolExp> <stringCst> */"

.IX Subsection "Notes"

.IX Header "- 9 \- Indentation rules"

.IX Item "General case :"

.IX Item "Special cases :"

.IX Header "- 10 \- Options"

.IX Header "- 11 \- Environment variables"

.IX Header "- 12 \- Exit statuses"

.IX Header "- 13 \- Badly implemented features"

.IX Header "- 14 \- Unimplemented features"

.IX Header "- 15 \- Known bugs"

.IX Header "- 16 \- Main changes with respect to version 2.6"

.IX Header "- 17 \- About 16 bits int platforms"

