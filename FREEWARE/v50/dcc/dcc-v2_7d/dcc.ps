%!
%%Title: dcc - Disciplined C Checker \201version 2.7X\202
%%Creator: html2ps version 1.0 beta1
%%EndComments
save
2000 dict begin
/d {bind def} bind def
/D {def} d
/t true D
/f false D
/FL [/Times-Roman
/Times-Italic
/Times-Bold
/Times-BoldItalic
/Courier
/Courier-Oblique
/Courier-Bold
/Courier-BoldOblique
/Helvetica
/Helvetica-Oblique
/Helvetica-Bold
/Helvetica-BoldOblique] D
/WF t D
/WI 0 D
/F 1 D
/IW 470 F div D
/IL 620 F div D
/PS 791 D
/EF [0 1 2 2 2 2 2 2 0 0 1 1 0 0 0 0 0 0 0 0 0 0 2 2] D
/EZ [11 9 19 16 16 13 13 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 8 8] D
/Ey [0 0 2 2 3 2 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] D
/EG [3 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1] D
/Tm [1 1 0.8 0.8 0.8 0.8 0.8 0.8 0 0 0 0 0 0 0.5 1 1 1 1 0 0 1.3 0 0] D
/Bm [1 1 0.5 0.5 0.5 0.5 0.5 0.5 0 0 0 0 0 0 0.5 1 1 1 1 0 0 1 0 0] D
/Lm [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 2 0 0 2 0 0 0] D
/Rm [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0] D
/EU [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 0] D
/NO f D
/YY [[{Ti}{h}][{h}{Au}][{()}{()}]] D
/ZZ [[{()}1][{()}0][{(- ) Pn join( -)join}2]] D
/Ts EZ 0 get D
/TU f D
/Xp t D
/AU f D
/SN 0 D
/Cf f D
/Fe f D
/TI 1 Ts mul D
/FE {newpath -14 14 M CP BB 484 14 L 484 -634 L CP BB -14 -634 L closepath} D
/LA {TU PM 0 eq and{IW 56 F div add SA{Sf div}if 0 translate}
 {71 706 translate F SA{Sf mul}if dup scale
 CS CF FS Cf{CA CL get VC}if /Bb f D}ie 0 0 M TF not Tc or
 {Cf{gsave SA{1 Sf div dup scale}if Cb VC FE fill grestore}if Df{Sd}if}if} D
/Pi 0 Ts mul D
/SG [0.8 1 1] D
/Ab 15 D
/J 0 D
/Tc t D
/NH 6 D
/Nf t D
/Pa t D
/LH 1.2 D
/XR f D
/Xr {/pN E D ( [p ) WB pN WB (] )WB} D
/Db [16#FF 16#FF 16#FF] D
/Dt [16#00 16#00 16#00] D
/eA f D
/Lc t D
/Dl [16#00 16#00 16#00] D
/LX f D
/Br 0.25 D
/IA ([IMAGE]) D
/DS {/PF f D()WB NL NP()pop RC ZF} D
/Gb f D
/Mb f D
/Hc [16#00 16#00 16#00] D
/Bl 3 D
/MI -15.2 D
/DX (DRAFT) D
/Di 0 D
/FD 2 D
/Dy 2 D
/cD [16#F0 16#F0 16#F0] D
/FW 0.6 D
/FU [16#00 16#00 16#00] D
/ET {/RM f D /A0 3 D /PN SN D /OU t D /Ou t D /W IW D /LL W D D1
 Ms not TP and{Ip}if /TF f D} D

%-- End of variable part --
/Cd {aload length 2 idiv dup dict begin {D} repeat currentdict end} D
/EX {EC cvx exec} D
/DU {} d
/BB {pop pop}d
/ie {ifelse} d
/E {exch} d
/M {moveto} d
/R {rmoveto} d
/L {lineto} d
/RL {rlineto} d
/CP {currentpoint} d
/SW {stringwidth} d
/GI {getinterval} d
/PI {putinterval} d
/Sg {setgray} d
/LW {setlinewidth} d
/S {dup () ne OU and{0 Co R AT 3 eq LB and HF not and A1 0 ne A2 0 ne or and
 {A2 0 32 A1 0 6 -1 roll awidthshow}{show}ie 0 Co neg R}{pop}ie
 OU PH 3 eq or{/Ms t D}if} D
/U {OU{gsave CP currentfont /FontInfo get /UnderlinePosition get
 0 E currentfont /FontMatrix get dtransform E pop add newpath M dup SW pop
 CJ 0 RL stroke grestore}if} D
/B {OU Br 0 gt and{CP Ts neg Ts .33 mul R gsave 0 Sg
 CP newpath Ts Br mul 0 360 arc closepath UI 2 mod 0 eq{stroke}{fill}ie
 grestore M CP E Ts Br 1 add mul sub E BB /Ms t D}if}D
/NP {Ms TP not or PA and OU and{TP{OR}if f1{mF k2 /mF E D /YC 0 D}if
 TP TU not PM 0 eq or and{showpage}if DU Ip TE not{LA}if 0.6 LW
 /CI 0 D /TP t D /Hs f D /hl 6 D /hL 6 D /HI hi D /Ms f D}if Bs XO BO M} D
/Np {LE sub CP E pop gt PL 0 eq and{NP}if}D
/Ip {/PN PN 1 add D /Pn RM{1}{4}ie PN Ns D /PM PN SN sub 2 mod D} D
/GP {E dup 3 -1 roll get PN 1 add 2 mod get dup type /integertype eq
 {get 0 get}{E pop}ie}d
/Fc {dup 2 GP exec SW pop /S1 E D dup 1 GP exec SW pop /S2 E D 0 GP exec SW
 pop /S3 E D S1 0 gt{S2 2 mul S1 add S3 2 mul S1 add 2 copy lt{E}if pop}{0}ie
 S2 S3 add 2 copy lt{E}if pop IW .9 mul div dup 1 gt{1 E div}{pop 1}ie}D
/OR {gsave SA{1 Sf div dup scale}if Fe{Cf{FU VC}if FW LW 1 setlinejoin
 FE stroke}if /YO {60 F div dup 40 gt{pop 40}if}D /cs CS D /cf CF D /CF 0 D
 /pf PF D /PF f D /Fn FN D /At AT D /AT 0 D /FN EF Hf 1 add get D Fz Fs FS ZZ
 Fc Fz mul Fs FS EU Hf 1 add get dup type /arraytype eq Cf and{VC}{pop 0 Sg}ie
 IW IL neg YO sub M ZZ 1 GP exec dup SW pop neg 0 R Sh 0 IL neg YO sub M
 ZZ 0 GP exec Sh ZZ 2 GP exec dup SW pop IW E sub 2 div IL neg YO sub M Sh
 Fz Fs FS NO{/AW IW Pn SW pop sub D AW 2 div IL neg YO sub
 S1 0 gt S2 AW .45 mul gt or S3 AW .45 mul gt or{Fz 2 mul sub}if M Pn Sh}if
 EU Hf get dup type /arraytype eq Cf and{VC}{pop 0 Sg}ie
 YY Fc /FN EF Hf get D Hz mul HS FS IW YO M YY 1 GP exec dup SW pop neg 0 R Sh
 0 YO M YY 0 GP exec Sh YY 2 GP exec dup SW pop IW E sub 2 div YO M Sh
 /FN Fn D /AT At D t Pb XO SZ SL get neg R /PF pf D grestore /CF 0 D cs cf FS}D
/Sh {dup () ne{CP Hz 4 div sub BB show CP CS add BB}{pop}ie}D
/Pb {/OU E D /Ou OU D /PB t D 0 0 M Ba{/Sa save D /BP t D /Fl t D RC /PL 0 D
 /PH 0 D /W IW D /LE IL .7 mul D /EO 0 D SI ZF /YA 0 D /BO 0 D /C1 () D
 BA 0 Ts neg R Bb{Xl Yl Xh Yh}if Bb CP Sa restore M
 {/Yh E D /Xh E D /Yl E D /Xl E D}if /Fl t D}if
 BL /OU t D /HM f D /Ou t D /PB f D} D
/Bs {/BP Ba not D}D
/reencodeISO {
 dup dup findfont dup length dict begin{1 index /FID ne{D}{pop pop}ie}forall
 /Encoding ISOLatin1Encoding D currentdict end definefont} D
/ISOLatin1Encoding [
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven/eight/nine/colon/semicolon
/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N
/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright
/asciicircum/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m
/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/space/exclamdown/cent/sterling/currency/yen/brokenbar
/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot
/hyphen/registered/macron/degree/plusminus/twosuperior/threesuperior
/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine
/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute
/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis
/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave
/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex
/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis
/yacute/thorn/ydieresis
] D
[128/backslash 129/parenleft 130/parenright 141/circumflex 142/tilde
143/perthousand 144/dagger 145/daggerdbl 146/Ydieresis 147/scaron 148/Scaron
149/oe 150/OE 151/guilsinglleft 152/guilsinglright 153/quotesinglbase
154/quotedblbase 155/quotedblleft 156/quotedblright 157/endash 158/emdash
159/trademark]
aload length 2 idiv 1 1 3 -1 roll{pop ISOLatin1Encoding 3 1 roll put}for
/colorimage where{pop}{
 /colorimage {
  pop pop /Pr E D {/Cv Pr D /Gr Cv length 3 idiv string D 0 1 Gr length 1 sub
   {Gr E dup /i E 3 mul D Cv i get 0.299 mul Cv i 1 add get 0.587 mul add
    Cv i 2 add get 0.114 mul add cvi put}for Gr} image} D
}ie
/pdfmark where{pop}{userdict /pdfmark /cleartomark load put}ie
WF{FL{reencodeISO D}forall}{4 1 FL length 1 sub{FL E get reencodeISO D}for}ie
/Symbol dup dup findfont dup length dict begin
 {1 index /FID ne{D}{pop pop}ie}forall /Encoding [Encoding aload pop]
 dup 128 /therefore put D currentdict end definefont D

/SF {/CS E D SZ SL CS put FO SL FN put /YI CS LH neg mul D dup ST cvs ( ) join
 CS ST cvs join C1 E join ( NF ) join /C1 E D CS NF /Wf WF FN 0 gt or D
 /BW Wf{( ) SW pop}{0}ie D}D
/NF {/cS E D /cF E D cF 0 ge{FL cF get}{/Symbol}ie
 findfont cS scalefont setfont} D
/FS {CF or /CF E D FR SL CF put CF CF 0 ge{FN 4 mul add}if E SF} D
/PC {SH /BP f D fin not GL not and{NL}if /HM t D /LL LS D} D
/BS {/TX E D Wf{/fin f D /CW 0 D /LK 0 D /SC 0 D
 /RT TX D {RT ( ) search{/NW E D pop /RT E D /WH NW SW pop D CW WH add LL gt
 {TX SC LK SC sub 1 sub NN GI GL{SH cF cS OC
 2 copy cS ne E cF ne or{NF}{pop pop}ie}{PC /CW WH BW add D}ie
 /SC LK D}
 {GL{JC}if
 /CW CW WH add BW add D /HM t D}ie /GL f D /Ph f D
 /LK LK NW length 1 add add D}{pop exit}ie}loop
 /fin t D TX SC LK SC sub GI SH RT () ne{GL not{CC}if}if
 /LC TX length D /WH RT SW pop D CW WH add Hy{HC SW pop add}if LL gt
 {RT GL{SH cF cS OC 2 copy cS ne E cF ne or{NF}{pop pop}ie
 Hy{/Ph t D}if /LL LS D}{NL /LL LS D SH}ie}
 {RT PC Hy{CC}if /Ph Ph Hy or D}ie RT () ne{/GL t D /HM t D}if}
 {TX SW pop LL le{TX SH}{/NW () D 0 2 TX length 1 sub
 {/CW E D TX 0 CW GI dup SW pop LL gt{pop NW SH /HM t D NL/LL W XO sub MR sub D
 /CW CW 2 sub NN D /TX TX CW TX length CW sub GI D TX BS exit}
 {/NW E D}ie}for}ie}ie /HM t D}D
/CC {C0 length 0 gt{JC}if /C0 [C1 L1 YA YB Mf NS NB TB AF Bw] D
 /C1 () D /L0 L1 D /YA 0 D /YB 0 D /Mf 0 D /NS 0 D /NB 0 D}D
/JC {C0 aload length 0 gt{pop pop pop NB add /NB E D NS add /NS E D
 dup Mf gt{/Mf E D}{pop}ie dup YB gt{/YB E D}{pop}ie
 dup YA gt{/YA E D}{pop}ie pop C1 join /C1 E D /C0 [] D}if}D
/OC {C0 length 0 gt{C1 L1 L0 sub YA YB Mf NS NB TB AF Bw GL C0 aload pop
 /Bw E D /AF E D /TB E D /NB E D /NS E D /Mf E D /YB E D /YA E D /C0 [] D
 /L1 E D /C1 E D Ph{HC SH}if NL /GL E D /Bw E D /AF E D /TB E D /NB E D /NS E D
 /Mf E D /YB E D /YA E D /L1 E D /LL W L1 sub XO sub MR sub WH sub D /CW 0 D
 C1 E join /C1 E D}if}D
/BT {/LB t D dup length string copy RS dup dup () ne E ( ) ne and
 {/CI 0 D /LS LL D /LL W L1 sub XO sub MR sub D BS}
 {dup ( ) eq{/GL f D}if dup () eq L1 0 eq or{pop}{SH /BP f D /Ph f D}ie}ie
 /LB f D} D
/BL {CP E pop XO E M} D
/NL {JC /GL f D /SK W XO sub MR sub L1 sub TB{Bw add}if D
 /YA LF{Mf HM Fl not and PF or{LH mul}if}{0 /LF t D}ie YA 2 copy lt{E}if pop D
 C1 () ne{/FB YB Mf SA{Sf mul}if 4 div 2 copy lt{E}if pop D}if Fl{/Ya YA D}if
 CP E pop YA sub YB sub LE neg lt Fl not and PB not and{NP}if NT TL BL
 OU PF not and PB or{/RE L1 TB{Bw sub}if
 W XO sub MR sub div YA YB add LE BO add div 2 copy lt{E}if pop D
 RE 1 gt{BL 1 RE div dup scale}if}if
 AT 2 le{SK AT mul 2 div YA neg R}if
 AT 3 eq{0 YA neg R TB{/NB NB 1 sub D /NS NS 1 sub D}if /NB NB 1 sub NN D
 /A3 NS 6 mul NB add D NS NB add 0 eq
  {/A1 0 D /A2 0 D}
  {NS 0 eq{/A1 SK NB div dup J gt{pop 0}if D /A2 0 D}{J A3 mul SK lt
   {/A1 J D /A2 SK J NB mul sub NS div dup Ab gt{/A1 0 D pop 0}if D}
   {/A1 SK A3 div D /A2 A1 6 mul D}ie}ie}ie /A1 A1 NN D /A2 A2 NN D}if
 AT 4 eq{0 YA neg R PH 2 le{PD 0 lt{/PD L1 D}if PD M1 gt{/M1 PD D}if
 L1 PD sub M2 gt{/M2 L1 PD sub D}if}{DV ID 1 sub get 0 ge{Lo 0 R}if}ie}if
 F0 cF ne Cs cS ne or{F0 Cs NF}if
 /ms Ms D /Ms f D CP FB sub
 C1 cvx exec XO EO sub L1 add TB{BW sub}if dup LM gt{/LM E D}{pop}ie
 PH 0 eq PH 4 eq or Ms and{HF not{/PO t D /AH t D}if
 BB CP YA add E AT 3 eq LB and{A1 sub}if TB{BW sub}if E BB}
 {pop pop}ie Ms HM PH 3 eq and or{/BP f D /Fl f D}if
 /Lo 0 D /L1 0 D /F0 cF D /Cs cS D BP not{0 YB NN neg R}if
 OU f1 and mF not and{k2 /f1 f D}if
 OU PF not and PB or{RE 1 gt{RE dup scale}if}if /Ms ms Ms or D
 /C1 AF{(Cp )}{()}ie D /YA 0 D /YB 0 D BL
 AT 4 eq LB not and PH 3 ge and
 {ID DV length lt{DV ID get dup 0 ge{DO E sub /Lo E D /L1 Lo D}{pop}ie
 /ID ID 1 add D}if}if /T t D CD{/LN LN 1 add D PD}if
 /PD -1 D /NS 0 D /NB 0 D /TB f D /Ph f D /Mf 0 D /HM f D} D
/RS {/TM E D /CN 0 D TM{10 eq{TM CN ( ) PI}if /CN CN 1 add D}forall
 /CN 0 D /BK HM EN and{0}{1}ie D TM
 {dup 32 ne{TM CN 3 2 roll put /CN CN 1 add D /BK 0 D}
 {pop BK 0 eq{TM CN 32 put /CN CN 1 add D}if /BK 1 D}ie}forall
 TM 0 CN GI dup dup () ne E ( ) ne and
 {dup CN 1 sub get 32 eq{/EN f D}{/EN t D}ie}if} D
/join {2 copy length E length add string dup 4 2 roll 2 index 0 3 index
 PI E length E PI}d
/WR {(\n) search{dup () ne BP not or
 {Li 4 le CP E pop YI Li mul add LE add 0 lt and PL 0 eq and{NP}if
 SH NL pop /Li Li 1 sub D WR}{pop pop WR}ie}{SH}ie /CI 0 D /BP f D} D
/SH {dup dup () ne E ( ) ne and PF or CS Mf gt and{/Mf CS D}if
 T not Wf and{( ) E join /T t D}if dup BP{/MF CS D}if
 AT 3 eq{2 copy length dup 0 gt{/NB E NB add D
 {( ) search{/NS NS 1 add D pop pop}{pop exit}ie}loop}{pop pop}ie}if
 CD PD 0 lt and{dup DC search{SW pop /PD E L1 add D pop pop}{pop}ie}if
 0 Np dup SW pop L1 add /L1 E D dup () ne
 {C1 (\() join E join (\)) join AU AF and UF or Wf and{( U ) join}if
 sF{( s ) join}if ( S ) join
 /C1 E D dup length 1 sub get 32 eq /TB E D /Bw BW D}{pop pop}ie} D
/BG {AI LG BC add add 0 eq} D
/ON {OU{Ty AR AI NN get dup 1 add Ln Ns Ty 2 mod 0 eq{(.  )}{(\)  )}ie join
 dup SW pop neg 0 R CP E 0 lt{0 E M}{pop}ie CP BB show /Ms t D}if} D
/Ln {AR AI 3 -1 roll put}D
/SP {dup CI lt BP not and{dup CI sub 0 E R /CI E D}{pop}ie} D
/BN {PF{WR /HM f D}{BT NL}ie} D
/NN {dup 0 lt{pop 0}if} D
/h {HI 0 gt{(h) HI ST cvs join cvx exec dup 1 get E
 Nf{0 get E join}{pop}ie}{()}ie} D
/H {/fn FN D /Hi E 1 add D 1 sub /HL E D /H2 HL 2 add D /GS EZ H2 get D
 E Tm H2 get GS mul BE dup 0 gt{1 sub}{pop EG H2 get dup 0 lt{pop AT}if}ie NA
 WW Np /SL SL 1 add D /FN EF H2 get D GS Ey H2 get FS
 EU H2 get Sc Hs not HL Hl lt and Hs HL hl lt and or Hi 0 eq or
 {/HI Hi D /Hs t D /hl HL D /hL HL D}if HL Hl lt{/hi Hi D}if
 Nf HI 0 gt and{(h) Hi ST cvs join cvx exec 0 get WB}if
 /HF t D /AH f D /PO f D} D
/EH {Bm H2 get GS mul BE OA /SL SL 1 sub NN D /CF 0 D /FN fn D
 SZ SL get FR SL get FS /HF f D /GS Ts D ()Ec} D
/P {E PF{WR}{PO{EP}{BN}ie Ts 4 mul Np AE not{Tm 0 get Ts mul neg SP}if
 dup 0 ge AH and{Pi Pd}if}ie 1 sub dup 0 lt{pop AV AL get}if /AT E D /PO t D} D
/EP {PF{WR}{BN Ts 4 mul Np}ie AE not{Bm 0 get Ts mul neg SP}if
 /AT AV AL get D /PO f D} D
/BE {E PO{EP}{BN}ie Ts 4 mul Np neg SP} D
/HR {/Aw W EO sub D /RW E dup 0 gt{Aw mul}{neg}ie dup Aw gt{pop Aw}if D /RZ E D
 E BN Ts neg SP 1 sub 2 div Aw RW sub mul EO add CP E pop M PF{0 Ps neg R}if
 0 Np OU{gsave RZ LW Cf{Hc VC}{0 Sg}ie CP BB RW 0 RL CP BB stroke grestore}if
 /CI 0 D /BP f D PF not{Ts neg SP}if /Ms t D} D
/AD {I NL EG 14 get dup 0 lt{pop AT}if NA /AE t D Tm 14 get Ts mul neg SP
 Cf{EU 14 get dup -1 eq{pop CA CL get}if Sc}if} D
/DA {BN ()ES OA /AE f D ()Ec Bm 14 get Ts mul neg SP} D
/PR {/MW E D /Li E D Tm 1 get Ps mul BE 0 NA /FN Fp D /PF t D SI /SL SL 1 add D
 /CF 0 D Ps CS mul Ts div MW WC mul CS mul Ts div dup LL gt PL 0 eq and
 {LL div div}{pop}ie Ey 1 get FS CP E pop LE add YI neg div cvi dup Li lt
 AH and{4 lt YI Li mul 5 mul LE add 0 gt or PL 0 eq and{NP}if}{pop}ie
 EU 1 get Sc /GS Ps D}D
/RP {WR NL () /PF f D SI /FN 0 D ES Bm 1 get Ps mul neg SP OA /GS Ts D} D
/SI {/XO Lm 15 get BC NN mul Lm 16 get AI UI sub NN mul add
 Lm 17 get UI NN mul add Lm 20 get LG NN mul add Ts mul
 PF{Lm 1 get Ps mul add}if EO add D
 /MR Rm 15 get BC NN mul Rm 16 get AI UI sub NN mul add
 Rm 17 get UI NN mul add Rm 20 get LG NN mul add Ts mul
 PF{Rm 1 get Ps mul add}if D /LL W XO sub MR sub D} D
/DT {BN /LG LG 1 sub D SI /LG LG 1 add D WW 2 div Np BL} D
/DD {WB Cc 0 eq L1 0 eq or Lm 20 get Ts mul L1 sub TB{BW add}if Ts 2 div lt or
 NL /LF E D SI BL} D
/DL {Dc LG Cc put /Cc E D BG{Tm 18 get Ts mul BE}{BN}ie /LG LG 1 add D BL} D
/LD {BN LG 0 gt{/LG LG 1 sub D}if /Cc Dc LG get D SI
 BG{()Bm 18 get Ts mul BE}if BL} D
/UL {BG{Tm 17 get Ts mul BE}{BN}ie NR AI NN 0 put /UI UI 1 add D
 /AI AI 1 add D SI BL} D
/LU {BN /UI UI 1 sub D /AI AI 1 sub D SI BG{()Bm 17 get Ts mul BE}if BL} D
/OL {E BG{Tm 16 get Ts mul BE}{BN}ie TR AI NN Ty put /Ty E D NR AI NN 1 put
 /AI AI 1 add D SI BL 1 Ln} D
/LO {BN /AI AI 1 sub D /Ty TR AI get D SI BG{()Bm 16 get Ts mul BE}if BL} D
/LI {E BN -1 SP /BP f D /CI 0 D 0 Np NR AI 1 sub NN get 1 eq
 {dup dup 0 gt E 4 le and{/Ty E D}{pop}ie
 /L1 L1 Ty AR AI NN get Ns SW pop XO sub dup 0 lt{pop 0}if add D ( ON )}
 {pop ( B )}ie C1 E join /C1 E D CS Mf gt{/Mf CS D}if BL} D
/BQ {Tm 15 get Ts mul BE /BC BC 1 add D SI BL} D
/QB {Bm 15 get Ts mul BE /BC BC 1 sub D SI BL} D
/Al {E EP 1 sub dup 0 lt{pop AV AL get}if NA} D
/Ea {EP OA} D
/WB {PF{WR}{BT}ie} D
/F1 {WB /FN 0 D CS 0 FS} D
/F2 {WB /FN WI D CS 0 FS} D
/HY {/Hy t D WB /Hy f D} D
/YH {WB} D
/A {/LT E D LT 1 eq{/RN E D}if /Lh E D WB /AF t D /C1 C1 ( Cp ) join D
 Lc{Cl Sc}if} D
/EA {Lc AF and{Ec}{WB}ie TL Pa AF and Lh 0 ne and
 {( \() Lh join (\)) join /AF f D WB}if /AF f D} D
/TL {C1 ( Tl ) apa /C1 E D} d
/apa {AF OU and Lh 0 ne LT 1 eq or and{LT 1 eq{RN ( /) E ST cvs join}
 {(\() Lh join (\)) join}ie E join join}{pop}ie} d
/Cp {/Xc CP /Yc E D D} D
/SS {Cf{dup 0 ge{EU E get dup -1 eq{pop CA CL get}if}{pop CA CL get}ie Sc}
 {pop}ie SZ SL get /SL SL 1 add D} D
/I {WB 8 SS 1 FS} D
/EM {WB 8 SS /CF CF 1 xor D 0 FS} D
/BD {WB 9 SS 2 FS} D
/TT {WB 10 SS /FN Fp D 0 FS} D
/KB {WB 11 SS /FN Fp D 2 FS} D
/CT {WB 12 SS 1 FS} D
/SM {WB 13 SS /FN Fp D 0 FS} D
/Q {/QL QL 1 add D QO QL 2 mod get La get join WB} D
/EQ {QC QL 2 mod get La get join WB /QL QL 1 sub D} D
/RO {WB -1 SS /CF 0 D 0 FS} D
/SY {WB -1 SS -1 FS} D
/ES {WB /SL SL 1 sub NN D /CF 0 D /FN FO SL get D SZ SL get FR SL get FS ()Ec}D
/FZ {3 sub 1.2 E exp GS mul E WB TL /C1 C1 ( Cp ) join D /SL SL 1 add D 0 FS} D
/Ef {WB TL ()ES /C1 C1 ( Cp ) join D} D
/BZ {dup /Bf E D FZ}D
/Sc {dup -1 ne Cf and{/CL CL 1 add D dup 0 eq{pop [0 0 0]}if
 dup CA E CL E put VS ( VC ) join C1 E join /C1 E D}{pop}ie} D
/Ec {WB Cf{/CL CL 1 sub NN D CA CL get VS ( VC ) join C1 E join /C1 E D}if} D
/VS {dup type /arraytype eq{([) E {ST cvs join ( ) join}forall (]) join}if} D
/VC {{255 div}forall setrgbcolor} D
/Sl {dup type /integertype ne{Ds}if /La E D WB}d
/UN {WB /UF t D} D
/NU {WB /UF f D} D
/SE {WB /sF t D} D
/XE {WB /sF f D} D
/sM {/C1 C1 ( k1 ) join D}d
/eM {/C1 C1 ( k2 ) join D}d
/k1 {/YC CP E pop Ts add D /mF t D /f1 t D}d
/k2 {gsave 3 LW -9 CP E pop Ts 0.2 mul sub M -9 YC L stroke grestore /mF f D}d
/Ac {/AC E D WB}d
/Ca {eA{( \()join AC join(\) )join}if WB}d
/s {OU{gsave 0 CS .25 mul R dup SW pop CJ 0 RL stroke grestore}if}D
/CJ {AT 3 eq LB and{E dup dup length 1 sub A1 mul E
 {( ) search{pop pop E A2 add E}{pop exit}ie}loop 3 -1 roll add
 W CP pop sub 2 copy gt{E}if pop}if}D
/So {/Co E D} D
/SO {C1 Yo ST cvs join ( So ) join /C1 E D (j) SW pop 2 div Pd} D
/Se {E WB CS E div Pd}D
/Pd {dup type /stringtype eq{SW pop}if dup /L1 E L1 add D
 ST cvs ( 0 R ) join C1 E join /C1 E D} D
/Sp {0.35 CO} D
/Sb {-0.2 CO} D
/CO {OV Io Yo put /Yo E CS mul Yo add D /Io Io 1 add D -1.5 Io mul 3 add FZ SO
 CS Yo add dup YA gt{/YA E D}{pop}ie
 Yo neg dup YB gt{/YB E D}{pop}ie} D
/Es {ES /Io Io 1 sub NN D /Yo OV Io get D SO} D
/SB {/N2 0 D 0 1 NI{/N E D{IX N2 get 0 lt{/N2 N2 1 add D}{exit}ie}loop
 /K WS N get FC N get mul D /NY AY N2 get D /BV NY array D
 0 1 NY 1 sub{/TM K string D currentfile TM readhexstring pop pop BV E TM put}
 for BM N BV put /N2 N2 1 add D}for} D
/IC [{/MA E D /MB 0 D}{2 div /MA E D /MB MA D}{/MB E CS sub D /MA CS D}
 {pop /MA YS AB mul D /MB 1 AB sub YS mul D}{pop /MA 0 D /MB 0 D}] D
/IP {BV N get /N N 1 add D} D
/II {/K E D IX K get 0 lt{/EC E D}if /TY E D
 TY 4 eq{/Y E D /X E D}if TY 3 eq{/AB E D}if
 /XW AX K get D /YW AY K get D /IS SG IT K get get D /XS XW IS mul D
 /YS YW IS mul D YS IC TY get exec /MA MA Fl not{3 add}if D} D
/IM {II /ty TY D /xs XS D /ys YS D /ya YA D /yb YB D /ma MA D /mb MB D /k K D
 /ec EC D /BP f D /CI 0 D WB TL L1 xs add dup XO add MR add W gt
 {pop /ma ma Fl{3 add}if D NL /YA ma D /YB mb D /YS ys D /L1 xs D}
 {/L1 E D ma YA gt{/YA ma D}if mb YB gt{/YB mb D}if}ie /TB f D
 OU{CP E pop YS sub LE neg lt Fl not and PB not and{NP /YA ma D /YB mb D}if
 /BP f D ty ST cvs ( ) join IX k get 0 lt{(\() join ec join (\) ) join}if
 k ST cvs join ty 3 eq{AB ST cvs ( ) join E join}if
 ty 4 eq{X ST cvs ( ) join Y ST cvs join ( ) join E join}if C1 E join
 ( DI ) join FP 2 eq FP 1 eq AF and or{( FM ) join}if
 ( Il Cp ) apa /C1 E D /EN f D}if /HM t D /T f D} D
/DI {II /Xc CP /Yc E D D /YN YW neg D /HM t D /CI 0 D /K2 IX K get D gsave
 TY 4 eq{OX X IS mul add OY FY add YS sub Y IS mul sub}
 {/FY YS D CP MB sub 2 copy /OY E D /OX E D}ie
 translate K2 0 ge{/DP AZ K2 get D /BV BM K2 get D XS YS scale /N 0 D XW YW DP
 [XW 0 0 YN 0 YW] {IP} FC K2 get 1 eq{image}{f 3 colorimage}ie}
 {EX}ie grestore XS 0 R /Ms t D} D
/FM {gsave 0 Sg CP MB sub translate XS neg 0 M 0 YS RL XS 0 RL 0 YS neg RL
 XS neg 0 RL stroke grestore} D
/NA {/AT E D /AL AL 1 add D AV AL AT put} D
/OA {AL 0 gt{/AL AL 1 sub D /AT AV AL get D}if} D
/D1 {/BR {CP E pop E BN Mb{CP E pop eq{0 YI R}if}{pop}ie} D
 /Sn {OU{C1 E ST cvs join ( Ld ) join /C1 E D}{pop}ie} D} D
/D1 {/BR {BN} D /Sn {OU {C1 E ST cvs join ( Ld ) join /C1 E D} {pop} ie} D} D
/TC {/TF t D /ML 0 D HN{SW pop dup ML gt{/ML E D}{pop}ie}forall NP /RM RM not D
 RC /OU Tc D Ep /PN 0 D Ms not TP and{Ip}if /W IW ML sub Ts sub D
 /A0 0 D TH{/BR {( ) join BT} D /Sn {pop} D /Ti () D /Au () D}if} D
/TN {0 eq{E EA PF HF or not XR and{HN E get Xr}{pop}ie}
 {OU{Tn 0 ge{() BN}if /Tn E D}{pop}ie WB}ie} D
/NT {OU LB not and Tn 0 ge and{PL 0 eq{Ms not{CS CF FS}if CP dup
 /y E YA sub D W 9 sub CS -1.8 mul XO L1 add 2 add{y M (.) show}for
 HN Tn get dup SW pop IW E sub y M show CP BB M}if /Tn -1 D}if} D
/Ld {/DN E D HN DN Pn put [/View [/XYZ -4 Fl{PS}{CP YA add US E pop}ie null]
 /Dest DN ST cvs cvn /DEST pdfmark} D
/C {ND 1 eq{1 sub}if TI mul /XO E D NL Nf not{pop()}if 0 3 -1 roll 1 A} D
/OP {BP not{NP}if PN 2 mod 0 eq{NP}if}D
/Ep {Xp PN 2 mod 0 eq and{/Pn (-) D showpage /PM 1 D LA}if}D
/Dg [73 86 88 76 67 68 77] D
/Rd [0 [1 1 0][2 1 0][3 1 0][2 1 1][1 1 1][2 2 1][3 3 1][4 4 1][2 1 2]] D
/Ns {/m E D /c E 32 mul D /j m 1000 idiv D /p j 12 add string D
 c 96 le m 0 gt and{c 32 le {/i 0 D /d 77 D /l 100 D /m m j 1000 mul sub D
  j -1 1 {pop p i d c add put /i i 1 add D}for
  4 -2 0 {/j E D /n m l idiv D /m m n l mul sub D /d Dg j get D
   n 0 gt {/x Rd n get D x 0 get -1 1 {pop p i d c add put /i i 1 add D}for
   p i x 1 get sub Dg x 2 get j add get c add put}if /l l 10 idiv D
  }for p 0 i GI}
  {/i ST length 1 sub D m {1 sub dup 0 ge{dup 26 mod c add 1 add
   ST i 3 -1 roll put 26 idiv dup 0 eq{pop exit}if}if /i i 1 sub D}loop
   ST i ST length i sub GI}ie}
 {m p cvs}ie} D
/US {matrix currentmatrix matrix defaultmatrix matrix invertmatrix
 matrix concatmatrix transform} D
/GB {Gb{US}if}D
/Tl {/Rn E D Xc CP pop ne{
 [/Rect [Xc 1 sub Yc cS 0.25 mul sub GB CP E 1 add E cS 0.85 mul add GB]
  /Subtype /Link /Border [0 0 Cf Lc and LX and AU or{0}{1}ie] Rn type
  /nametype eq {/Dest Rn}{/Action [/Subtype /URI /URI Rn] Cd}ie
  /ANN pdfmark}if} D
/Il {/Rn E D [/Rect [Xc Yc GB Xc XS add Yc YS add GB] /Subtype /Link
 /Border [0 0 0] Rn type /nametype eq{/Dest Rn}
 {/Action [/Subtype /URI /URI Rn] Cd}ie /ANN pdfmark} D
/XP {[{/Z Bz 2 div D Z 0 R Z Z RL Z neg Z RL Z neg Z neg RL Z Z neg RL}
 {Bz 0 RL 0 Bz RL Bz neg 0 RL 0 Bz neg RL}
 {0 -5 R Bz 0 RL 0 21 RL Bz neg 0 RL 0 -21 RL}]} D
/MS {/Sm E D WB}D
/O {BN()Sm BX} D
/BX {/Bt E D Bt 2 lt{CS 0.8 mul}{11 mul}ie W XO sub MR sub 2 copy gt{E}if pop
 /HZ E D WB Bt 2 eq{HZ ST cvs ( ) join}{()}ie
 Bt ST cvs join ( Bx ) join HM{( ) Pd}if
 L1 HZ add XO add MR add W gt{NL}if C1 E join /C1 E D /L1 L1 HZ add D /T f D
 ( ) WB Bt 2 lt{YA CS .8 mul lt{/YA CS .8 mul D}if}
 {YB 5 lt{/YB 5 D}if YA 21 lt{/YA 21 D}if}ie /CI 0 D} D
/Bx {dup 2 eq{E /Bz E D}{/Bz CS .8 mul D}ie
 OU {gsave 0 Sg XP E get exec stroke grestore}{pop}ie Bz 0 R /Ms t D} D
/SD {FD 4 mul Dy add DZ NF newpath 0 0 M DX t charpath pathbbox
 3 -1 roll sub /DY E D E dup /X1 E D sub WM mul WX DY mul add WM DG mul E div
 /DF E D /DR WX DF mul DY mul WM div 2 div D} d
/Sd {gsave 0 IL Di mul neg translate IL IW atan Di 0 eq{neg}if rotate
 FD 4 mul Dy add DZ NF DR X1 sub DY 2 div neg M cD VC DX show grestore} d
/RC {/AI 0 D /LG 0 D /BC 0 D /UI 0 D /PF f D /Cc 0 D /Dc 10 array D
 /NR [0 1 9{pop 0}for] D /La Ds D /AR 10 array D /TR 10 array D /AV 30 array D
 SI /AL -1 D /AT A0 D AT NA /OV 9 array D /Yo 0 D /Co 0 D /Io 0 D /Hy f D
 /Ph f D /CL -1 D Ct Sc}D
/ZF {/FR [0 1 30{pop 0}for] D /SZ [0 1 30{pop 0}for] D /FO [0 1 30{pop 0}for] D
 /SL 0 D /CF 0 D /FN 0 D 0 Ts SF}D
/QO [[(\253\240)(\232)(\234)(\233)(\253)(\273)][(\253\240)(\231)(')(`)(\253)(\273)]] D
/QC [[(\240\273)(\233)(\234)(\234)(\273)(\253)][(\240\273)(`)(')(')(\273)(\253)]] D
/Hf EF length 2 sub D
/Hz EZ Hf get D
/HS Ey Hf get D
/Fz EZ Hf 1 add get D
/Fs Ey Hf 1 add get D
/LE IL D
/Ps EZ 1 get D
/Fp EF 1 get D
/XO 0 D
/YI 0 D
/CI 0 D
/FP 0 D
/WW Ts 7 mul D
/Mf 0 D
/YA 0 D
/YB 0 D
/Cs Ts D
/GS Ts D
/F0 0 D
/NS 0 D
/NB 0 D
/N 0 D
/C0 [] D
/C1 () D
/Lo 0 D
/L1 0 D
/LM 0 D
/PH 0 D
/EC 0 D
/Lh 0 D
/LT 0 D
/CH 1 string D
/ST 16 string D
/CA 9 array D
/HC (\255) D
/HM f D
/PF f D
/EN f D
/TB f D
/UF f D
/sF f D
/AE f D
/AF f D
/BP t D
/CD f D
/PA t D
/GL f D
/T t D
/HF f D
/AH f D
/SA f D
/PB f D
/f1 f D
/mF f D
/OX 0 D
/OY 0 D
/FY 0 D
/EO 0 D
/FB 0 D
/PL 0 D
/Bw 0 D
/PD -1 D
/TP f D
/TH t D
/Ty 4 D
/Tn -1 D
/Fl t D
/LB t D
/PM 1 D
/Ms f D
/Ba f D
/Bb f D
/Hl 3 D
/hl 6 D
/hL 6 D
/Hs f D
/HI 0 D
/hi 0 D
/PO t D
/TE f D
/LF t D
/BO 0 D
/Sm 1 D
/Bf 3 D
/A1 0 D
/A2 0 D
/Ds 3 D
/QL -1 D
/Cb Db D
/Ct Dt D
/Cl Dl D
[/Creator (html2ps version 1.0 beta1) /Author () /Keywords () /Subject ()
 /Title (dcc - Disciplined C Checker \201version 2.7X\202) /DOCINFO pdfmark
/ND 1 D
/HN [1 1 158{pop (??)}for] D
/h1 [(1\240\240)(NAME)] D
/h2 [(2\240\240)(SYNOPSIS)] D
/h3 [(3\240\240)(DESCRIPTION)] D
/h4 [(4\240\240)(Copyright)] D
/h5 [(5\240\240)(Agreement)] D
/h6 [(6\240\240)(Version&Author)] D
/h7 [(7\240\240)(Contents)] D
/h8 [(8\240\240)(- 1 - Generalities)] D
/h9 [(9\240\240)(- 2 - In the event of bug)] D
/h10 [(10\240\240)(- 3 - Distribution files)] D
/h11 [(11\240\240)(- 4 - Configuration, compilation and installation of dcc)] D
/h12 [(11.1\240\240)(UNIX OS)] D
/h13 [(11.2\240\240)(VMS OS)] D
/h14 [(11.3\240\240)(WindowsXX OS)] D
/h15 [(11.4\240\240)(Other)] D
/h16 [(12\240\240)(- 5 - Execution files)] D
/h17 [(12.1\240\240)(Starter file)] D
/h18 [(12.2\240\240)(Adjustment files)] D
/h19 [(13\240\240)(- 6 - Test files)] D
/h20 [(14\240\240)(- 7 - Article)] D
/h21 [(15\240\240)(- 8 - Available d-pragmas)] D
/h22 [(15.1\240\240)(/*~AddedObj*/)] D
/h23 [(15.2\240\240)(/*~BackBranch*/)] D
/h24 [(15.3\240\240)(/*~CastTo <type> */)] D
/h25 [(15.4\240\240)(/*~ComposingHdr*/)] D
/h26 [(15.5\240\240)(/*~DccCompliant*/)] D
/h27 [(15.6\240\240)(/*~DollarSign*/)] D
/h28 [(15.7\240\240)(/*~DynInit*/)] D
/h29 [(15.8\240\240)(/*~EndLongjmpCallable*/)] D
/h30 [(15.9\240\240)(/*~ExactCmp*/)] D
/h31 [(15.10\240\240)(/*~FullEnum*/)] D
/h32 [(15.11\240\240)(/*~Generic*/)] D
/h33 [(15.12\240\240)(/*~Ignore*/)] D
/h34 [(15.13\240\240)(/*~IndexType <type> */)] D
/h35 [(15.14\240\240)(/*~Init <listVar>*/)] D
/h36 [(15.15\240\240)(/*~LiteralCst*/)] D
/h37 [(15.16\240\240)(/*~LocalAdr*/)] D
/h38 [(15.17\240\240)(/*~Masking*/)] D
/h39 [(15.18\240\240)(/*~MayModify*/)] D
/h40 [(15.19\240\240)(/*~NeverReturns*/)] D
/h41 [(15.20\240\240)(/*~NoBreak*/)] D
/h42 [(15.21\240\240)(/*~NoDefault*/)] D
/h43 [(15.22\240\240)(/*~NonConstExp*/)] D
/h44 [(15.23\240\240)(/*~NotUsed*/)] D
/h45 [(15.24\240\240)(/*~NoWarn*/)] D
/h46 [(15.25\240\240)(/*~OddCast*/)] D
/h47 [(15.26\240\240)(/*~PopWarn*/)] D
/h48 [(15.27\240\240)(/*~PortableQM*/)] D
/h49 [(15.28\240\240)(/*~Private*/)] D
/h50 [(15.29\240\240)(/*~PrivateTo "<fileName>" [, "<fileName>"]* */)] D
/h51 [(15.30\240\240)(/*~PseudoVoid*/)] D
/h52 [(15.31\240\240)(/*~Public*/)] D
/h53 [(15.32\240\240)(/*~ResultPtr*/)] D
/h54 [(15.33\240\240)(/*~ResultType*/)] D
/h55 [(15.34\240\240)(/*~RootType*/)] D
/h56 [(15.35\240\240)(/*~SameValue*/)] D
/h57 [(15.36\240\240)(/*~Saved*/)] D
/h58 [(15.37\240\240)(/*~SideEffectOK*/)] D
/h59 [(15.38\240\240)(/*~SizeOfMemBlk*/)] D
/h60 [(15.39\240\240)(/*~SizeOK*/)] D
/h61 [(15.40\240\240)(/*~TypeCombination <combList>*/)] D
/h62 [(15.41\240\240)(/*~Undef <listIdent>*/ =head2 /*~UndefTag <listIdent>*/)] D
/h63 [(15.42\240\240)(/*~Utility*/)] D
/h64 [(15.43\240\240)(/*~VoidToOther*/)] D
/h65 [(15.44\240\240)(/*~Warn*/)] D
/h66 [(15.45\240\240)(/*~zif <boolExp> <stringCst> */)] D
/h67 [(15.46\240\240)(Notes)] D
/h68 [(16\240\240)(- 9 - Indentation rules)] D
/h69 [(17\240\240)(- 10 - Options)] D
/h70 [(18\240\240)(- 11 - Environment variables)] D
/h71 [(19\240\240)(- 12 - Exit statuses)] D
/h72 [(20\240\240)(- 13 - Badly implemented features)] D
/h73 [(21\240\240)(- 14 - Unimplemented features)] D
/h74 [(22\240\240)(- 15 - Known bugs)] D
/h75 [(23\240\240)(- 16 - Main changes with respect to version 2.6)] D
/h76 [(24\240\240)(- 17 - About 16 bits int platforms)] D
/Hr [82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102
103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120
121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138
139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156
157]D
/HV [1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 1 2 2 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1
1 1 1 1 1 1 1]D
/Cn [0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 2 0 0 0 0 46 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0]D
Hr length 0 gt{[/PageMode /UseOutlines /DOCVIEW pdfmark}if
/Hn 1 D
0 1 Hr length 1 sub{
 /Bn E D [Cn Bn get dup 0 gt{/Count E HV Bn get Bl ge{neg}if}{pop}ie
 /Dest Hr Bn get dup abs ST cvs cvn E 0 ge{(h)Hn ST cvs join cvx exec dup 1 get
 E Nf{0 get E join}{pop}ie /Hn Hn 1 add D}{()}ie /Title E /OUT pdfmark}for
ZF /FN Fp D Ps 0 FS /WC Wf{( )}{<A1A1>}ie SW pop D
ET RC ZF
/Df f D

/Cb Db D /Ct [16#00 16#00 16#00] D /Cl [16#00 16#00 16#00] D /CL -1 D Ct Sc

/Ba f D /BO 0 D Bs
/UR (dcc.html) D
/Ti (dcc - Disciplined C Checker \201version 2.7X\202) D
/Au () D
/Df f D


NP RC ZF
()3 Sl()WB 0 Sn(

 


)UL(
 )-1 LI()0 1 1 A(NAME)1 0 TN TL()Ec /AF f D(
 )-1 LI()0 2 1 A(SYNOPSIS)2 0 TN TL()Ec /AF f D(
 )-1 LI()0 3 1 A(DESCRIPTION)3 0 TN TL()Ec /AF f D(
 )-1 LI()0 4 1 A(Copyright)4 0 TN TL()Ec /AF f D(
 )-1 LI()0 5 1 A(Agreement)5 0 TN TL()Ec /AF f D(
 )-1 LI()0 6 1 A(Version&Author)6 0 TN TL()Ec /AF f D(
 )-1 LI()0 7 1 A(Contents)7 0 TN TL()Ec /AF f D(
 )-1 LI()0 8 1 A(- 1 - Generalities)8 0 TN TL()Ec /AF f D(
 )-1 LI()0 9 1 A(- 2 - In the event of bug)9 0 TN TL()Ec /AF f D(
 )-1 LI()0 10 1 A(- 3 - Distribution files)10 0 TN TL()Ec /AF f D(
 )-1 LI()0 12 1 A(- 4 - Configuration, compilation and installation of dcc)12 0 TN TL()Ec /AF f D(
 )UL(
  )-1 LI()0 13 1 A(UNIX OS)13 0 TN TL()Ec /AF f D(
  )-1 LI()0 14 1 A(VMS OS)14 0 TN TL()Ec /AF f D(
  )-1 LI()0 17 1 A(WindowsXX OS)17 0 TN TL()Ec /AF f D(
  )-1 LI()0 18 1 A(Other)18 0 TN TL()Ec /AF f D(
 )LU(

 )-1 LI()0 19 1 A(- 5 - Execution files)19 0 TN TL()Ec /AF f D(
 )UL(
  )-1 LI()0 20 1 A(Starter file)20 0 TN TL()Ec /AF f D(
  )-1 LI()0 21 1 A(Adjustment files)21 0 TN TL()Ec /AF f D(
 )LU(

 )-1 LI()0 22 1 A(- 6 - Test files)22 0 TN TL()Ec /AF f D(
 )-1 LI()0 23 1 A(- 7 - Article)23 0 TN TL()Ec /AF f D(
 )-1 LI()0 24 1 A(- 8 - Available d-pragmas)24 0 TN TL()Ec /AF f D(
 )UL(
  )-1 LI()0 25 1 A(/*~AddedObj*/)25 0 TN TL()Ec /AF f D(
  )-1 LI()0 26 1 A(/*~BackBranch*/)26 0 TN TL()Ec /AF f D(
  )-1 LI()0 27 1 A(/*~CastTo <type> */)27 0 TN TL()Ec /AF f D(
  )-1 LI()0 28 1 A(/*~ComposingHdr*/)28 0 TN TL()Ec /AF f D(
  )-1 LI()0 29 1 A(/*~DccCompliant*/)29 0 TN TL()Ec /AF f D(
  )-1 LI()0 30 1 A(/*~DollarSign*/)30 0 TN TL()Ec /AF f D(
  )-1 LI()0 31 1 A(/*~DynInit*/)31 0 TN TL()Ec /AF f D(
  )-1 LI()0 32 1 A(/*~EndLongjmpCallable*/ )32 0 TN TL()Ec /AF f D(
  )-1 LI()0 33 1 A(/*~ExactCmp*/)33 0 TN TL()Ec /AF f D(
  )-1 LI()0 34 1 A(/*~FullEnum*/)34 0 TN TL()Ec /AF f D(
  )-1 LI()0 35 1 A(/*~Generic*/)35 0 TN TL()Ec /AF f D(
  )-1 LI()0 36 1 A(/*~Ignore*/ )36 0 TN TL()Ec /AF f D(
  )-1 LI()0 37 1 A(/*~IndexType <type> */)37 0 TN TL()Ec /AF f D(
  )-1 LI()0 38 1 A(/*~Init <listVar>*/)38 0 TN TL()Ec /AF f D(
  )-1 LI()0 39 1 A(/*~LiteralCst*/)39 0 TN TL()Ec /AF f D(
  )-1 LI()0 40 1 A(/*~LocalAdr*/)40 0 TN TL()Ec /AF f D(
  )-1 LI()0 41 1 A(/*~Masking*/)41 0 TN TL()Ec /AF f D(
  )-1 LI()0 42 1 A(/*~MayModify*/)42 0 TN TL()Ec /AF f D(
  )-1 LI()0 43 1 A(/*~NeverReturns*/)43 0 TN TL()Ec /AF f D(
  )-1 LI()0 44 1 A(/*~NoBreak*/)44 0 TN TL()Ec /AF f D(
  )-1 LI()0 45 1 A(/*~NoDefault*/)45 0 TN TL()Ec /AF f D(
  )-1 LI()0 46 1 A(/*~NonConstExp*/)46 0 TN TL()Ec /AF f D(
  )-1 LI()0 47 1 A(/*~NotUsed*/)47 0 TN TL()Ec /AF f D(
  )-1 LI()0 48 1 A(/*~NoWarn*/)48 0 TN TL()Ec /AF f D(
  )-1 LI()0 49 1 A(/*~OddCast*/)49 0 TN TL()Ec /AF f D(
  )-1 LI()0 50 1 A(/*~PopWarn*/)50 0 TN TL()Ec /AF f D(
  )-1 LI()0 51 1 A(/*~PortableQM*/)51 0 TN TL()Ec /AF f D(
  )-1 LI()0 52 1 A(/*~Private*/)52 0 TN TL()Ec /AF f D(
  )-1 LI()0 53 1 A(/*~PrivateTo "<fileName>" [, "<fileName>"]* */)53 0 TN TL()Ec /AF f D(
  )-1 LI()0 54 1 A(/*~PseudoVoid*/)54 0 TN TL()Ec /AF f D(
  )-1 LI()0 55 1 A(/*~Public*/)55 0 TN TL()Ec /AF f D(
  )-1 LI()0 56 1 A(/*~ResultPtr*/)56 0 TN TL()Ec /AF f D(
  )-1 LI()0 57 1 A(/*~ResultType*/)57 0 TN TL()Ec /AF f D(
  )-1 LI()0 58 1 A(/*~RootType*/)58 0 TN TL()Ec /AF f D(
  )-1 LI()0 59 1 A(/*~SameValue*/)59 0 TN TL()Ec /AF f D(
  )-1 LI()0 60 1 A(/*~Saved*/)60 0 TN TL()Ec /AF f D(
  )-1 LI()0 61 1 A(/*~SideEffectOK*/)61 0 TN TL()Ec /AF f D(
  )-1 LI()0 62 1 A(/*~SizeOfMemBlk*/)62 0 TN TL()Ec /AF f D(
  )-1 LI()0 63 1 A(/*~SizeOK*/)63 0 TN TL()Ec /AF f D(
  )-1 LI()0 64 1 A(/*~TypeCombination <combList>*/)64 0 TN TL()Ec /AF f D(
  )-1 LI()0 65 1 A(/*~Undef <listIdent>*/)65 0 TN TL()Ec /AF f D(
  )-1 LI()0 66 1 A(/*~Utility*/)66 0 TN TL()Ec /AF f D(
  )-1 LI()0 67 1 A(/*~VoidToOther*/)67 0 TN TL()Ec /AF f D(
  )-1 LI()0 68 1 A(/*~Warn*/)68 0 TN TL()Ec /AF f D(
  )-1 LI()0 69 1 A(/*~zif <boolExp> <stringCst> */)69 0 TN TL()Ec /AF f D(
  )-1 LI()0 70 1 A(Notes)70 0 TN TL()Ec /AF f D(
 )LU(

 )-1 LI()0 71 1 A(- 9 - Indentation rules)71 0 TN TL()Ec /AF f D(
 )-1 LI()0 74 1 A(- 10 - Options)74 0 TN TL()Ec /AF f D(
 )-1 LI()0 75 1 A(- 11 - Environment variables)75 0 TN TL()Ec /AF f D(
 )-1 LI()0 76 1 A(- 12 - Exit statuses)76 0 TN TL()Ec /AF f D(
 )-1 LI()0 77 1 A(- 13 - Badly implemented features)77 0 TN TL()Ec /AF f D(
 )-1 LI()0 78 1 A(- 14 - Unimplemented features)78 0 TN TL()Ec /AF f D(
 )-1 LI()0 79 1 A(- 15 - Known bugs)79 0 TN TL()Ec /AF f D(
 )-1 LI()0 80 1 A(- 16 - Main changes with respect to version 2.6)80 0 TN TL()Ec /AF f D(
 )-1 LI()0 81 1 A(- 17 - About 16 bits int platforms)81 0 TN TL()Ec /AF f D()LU(


)2 1 1 HR()0 P()0 1 0 H(NAME)WB 82 Sn()WB 1 Sn(
)EA()EH(
) 1 43 PR( dcc - Disciplined C Checker \201version 2.7X\202)RP(

)0 P(
)0 P()2 1 1 HR()0 1 1 H(SYNOPSIS)WB 83 Sn()WB 2 Sn(
)EA()EH(
) 1 66 PR( Syntax : dcc [options] [sourceFile [sourceFile [sourceFile ...]]])RP(

)0 P(
)0 P()2 1 1 HR()0 1 2 H(DESCRIPTION)WB 84 Sn()WB 3 Sn(
)EA()EH(
dcc is a C checker program, described in the December 1995 issue of ACM
SIGPLAN Notices \201see also 'dccarticle.ps' and 'dccarticle.ascii' included
files\202.


)0 P(
)0 P()2 1 1 HR()0 1 3 H(Copyright)WB 85 Sn()WB 4 Sn(
)EA()EH(
) 2 68 PR( Copyright Ecole Superieure d'Electricite \201'Supelec'\202, France, 1995.
 All Rights Reserved.)RP(

)0 P(
)0 P()2 1 1 HR()0 1 4 H(Agreement)WB 86 Sn()WB 5 Sn(
)EA()EH(
) 3 71 PR( TITLE.   Title,  ownership rights, and intellectual property rights in
 and to the Software shall remain in Supelec and/or its suppliers.  The
 Software is protected by international copyright treaties.)RP(

)0 P(
) 12 71 PR( DISCLAIMER  OF  WARRANTY.   Since  the  Software  is  provided free of
 charge, the Software is provided on an "AS IS" basis, without warranty
 of   any   kind,   including  without  limitation  the  warranties  of
 merchantability,   fitness    for    a    particular    purpose    and
 non-infringement.   The  entire risk as to the quality and performance
 of the Software is borne by you.  Should the Software prove defective,
 you  and not Supelec assume the entire cost of any service and repair.
 This disclaimer of warranty  constitutes  an  essential  part  of  the
 agreement. SOME STATES/COUNTRIES DO NOT ALLOW EXCLUSIONS OF AN IMPLIED
 WARRANTY, SO THIS DISCLAIMER MAY NOT APPLY TO YOU  AND  YOU  MAY  HAVE
 OTHER LEGAL RIGHTS THAT VARY FROM STATE/COUNTRY TO STATE/COUNTRY OR BY
 JURISDICTION.)RP(

)0 P(
) 9 71 PR( LIMITATION  OF  LIABILITY.   UNDER NO CIRCUMSTANCES AND UNDER NO LEGAL
 THEORY, TORT, CONTRACT, OR OTHERWISE, SHALL SUPELEC OR  ITS  SUPPLIERS
 OR  RESELLERS  BE  LIABLE TO YOU OR ANY OTHER PERSON FOR ANY INDIRECT,
 SPECIAL,  INCIDENTAL,  OR  CONSEQUENTIAL  DAMAGES  OF  ANY   CHARACTER
 INCLUDING,  WITHOUT  LIMITATION,  DAMAGES  FOR  LOSS OF GOODWILL, WORK
 STOPPAGE, COMPUTER FAILURE  OR  MALFUNCTION,  OR  ANY  AND  ALL  OTHER
 COMMERCIAL  DAMAGES OR LOSSES.  SOME STATES/COUNTRIES DO NOT ALLOW THE
 EXCLUSION OR LIMITATION OF INCIDENTAL  OR  CONSEQUENTIAL  DAMAGES,  SO
 THIS LIMITATION AND EXCLUSION MAY NOT APPLY TO YOU.)RP(

)0 P(
)0 P()2 1 1 HR()0 1 5 H(Version&Author)WB 87 Sn()WB 6 Sn(
)EA()EH(
) 1 39 PR( dcc version 2.7,    February 19th 2001)RP(

)0 P(
) 3 44 PR( Yves Noyelle \201<Yves.Noyelle@supelec.fr>\202
 Supelec, Service Informatique,
 Plateau de Moulon, F-91192 Gif/Yvette Cedex)RP(

)0 P(

)0 P()2 1 1 HR()0 1 6 H(Contents)WB 88 Sn()WB 7 Sn(
)EA()EH(
) 17 56 PR(  1 - Generalities
  2 - In the event of bug
  3 - Distribution files
  4 - Configuration, compilation and installation of dcc
  5 - Execution files
  6 - Test files
  7 - Article
  8 - Available d-pragmas
  9 - Indentation rules
 10 - Options
 11 - Environment variables
 12 - Exit statuses
 13 - Badly implemented features \201as of now\202
 14 - Unimplemented features \201as of now\202
 15 - Known bug\201s\202
 16 - Main changes with respect to previous version
 17 - About '16 bits int' platforms)RP(

)0 P(
)0 P()2 1 1 HR()0 1 7 H(-)WB 89 Sn()WB 8 Sn( 1 - Generalities
)EA()EH(
) 6 71 PR( dcc  verifies  that a C  source  file  complies  with the  precepts of
 Disciplined C, a set of rules aiming at elevating ANSI C to  the  rank
 of high level language \201as opposed to portable assembly language\202, and
 making as much semantics as possible  flow  from  the  design  to  the
 source   code.    This   is   achieved   mainly  via  quasi-compulsory
 types/constants naming and 'const' qualifier use.)RP(

)0 P(
) 4 71 PR( It  also  detects  most  of  the pitfalls of the C language, helps the
 programmer organize his program modules and write them  so  that  they
 are  well structured, well encapsulated and more portable, and finally
 gives some much-needed compile-time checking tools.)RP(

)0 P(
) 2 71 PR( dcc  is quite fast \201from 5 to 10 times faster than a compiler\202, and is
 itself written in Disciplined C.)RP(

)0 P(
)0 P()2 1 1 HR()0 1 8 H(-)WB 90 Sn()WB 9 Sn( 2 - In the event of bug
)EA()EH(
) 2 71 PR( No  guarantee  is  given  that  this  version  of dcc is free of bugs,
 although every efforts are made to chase and eliminate them.)RP(

)0 P(
) 5 71 PR( If  you  uncover  one  \201or  more...\202,  please  let  me know \201at e-mail
 <dccsupport@supelec.fr>\202; a bug report should include a description of
 the  problem  and  a  short  source  file  causing  it, along with the
 version/release number of dcc \201see  paragraph  10\202  and  the  platform
 \201machine/system\202 used.)RP(

)0 P(
)0 P()2 1 1 HR()0 1 9 H(-)WB 91 Sn()WB 10 Sn( 3 - Distribution files
)EA()EH(
There are five sets of files :


)0 P(
)0 DL()DT()BD(-)WB 11 Sn( program files
)EA()ES()DD() 16 18 PR(  configdc.th
  dccFiles.mng
  dc.th
  dcblk.c/h/ph
  dcdecl.c/h/ph
  dcdir.c/h/ph
  dcexp.c/h/ph
  dcext.c/h/ph
  dcfmt.c/h
  dcinst.c/h/ph
  dcmain.c/h/ph
  dcprag.c/h/ph
  dcrec.c/h/ph
  dcrecdir.c/ph/th
  dctxttok.c/h
  dcmsg.*)RP(

)0 P(
)DT()BD(- installation files
)EA()ES()DD() 16 71 PR(  adaptStarterFile     \201UNIX\202    \201courtesy of C. Bocage, CRI Supelec\202
  adaptstarterfilevms.com \201VMS\202  \201courtesy of C. Bocage, CRI Supelec\202
  askfordfltopt.com    \201VMS\202
  chooseMsgLanguage    \201UNIX\202
  chooseStarterFile    \201UNIX\202
  createLocalFilesMngFile \201UNIX\202 \201courtesy of C. Bocage, CRI Supelec\202
  createlocalexec      \201UNIX\202
  descrip.mms          \201VMS\202
  extracthdrfilesvms.com \201VMS\202   \201courtesy of J. Lauret, SUNY@SB, USA\202
  frsttime.mms         \201VMS\202
  installdccvms.com    \201VMS\202
  installfile          \201UNIX\202
  makefile             \201UNIX\202    \201courtesy of C. Bocage, CRI Supelec\202
  makefile.win32       \201WINDOWS\202 \201courtesy of C. Enache, UPB student,
                                                               Romania\202
  rmdirvms.com         \201VMS\202)RP(

)0 P(
)DT()BD(- execution files
)EA()ES()DD() 16 71 PR(  *.adj                \201adjustment files\202
  dynarray.h           \201header file for dynamic arrays, independent of
                                                                   dcc\202
  predefmacvmsvax.txt
  predefmacvmsalpha.txt
  starter.dccCcHP715   \201courtesy of F. Mullet, alumnus\202
  starter.dccClWin32   \201courtesy of E. Bezine, alumnus\202
  starter.dccDjgpp     \201courtesy of J.F. Tilman, alumnus\202
  starter.dccGccAlphaSkel
  starter.dccGccHPUXSkel
  starter.dccGccLinuxSkel \201courtesy of Ch. Duverger, alumnus\202
  starter.dccGccMipsSkel
  starter.dccGccSunosSkel \201courtesy of Ch. Duverger, alumnus\202
  starter.dccVmsAlpha
  starter.dccVmsVax
  starter.dccXlcAix    \201courtesy of W. Briscoe, freelance, UK\202)RP(

)0 P(
)DT()BD(- test files
)EA()ES()DD() 5 20 PR(  tstdcc
  tstdccvms.com
  trydcc.c/h
  restrydcc.txt
  srchdiffrestry.com)RP(

)0 P(
)DT()BD(- files describing dcc
)EA()ES()DD() 2 18 PR(  dccarticle.ps
  dccarticle.ascii)RP(

)0 P()LD(
) 2 71 PR( FILES  FROM  OLD DISTRIBUTIONS SHOULD BE DISCARDED BEFORE INSTALLING A
 NEW VERSION \201except possibly local adjustment files\202.)RP(

)0 P(
) 3 71 PR( Note :  each dcc source file begins with a  /* <fileName> */  comment,
         and ends with a /* End <fileName> */ comment, to  make it easy
         to check that it has not been truncated by error.)RP(

)0 P(
)0 P()2 1 1 HR()0 1 10 H(-)WB 92 Sn()WB 12 Sn( 4 - Configuration, compilation and installation of dcc
)EA()EH(
) 3 71 PR( The   configuration   phase   means   possible  adaptations  of  files
 'configdc.th',  'dccFiles.mng',  and  'dcmsg.txt'.   Choice  of   file
 'starter.dcc' is discussed paragraph 5.)RP(

)0 P(
) 22 72 PR( File 'configdc.th' serves to configurate dcc \201buffer sizes and so on\202;
 most settings should be valid on any machine \201except  perhaps  smaller
 memory  machines or machines  where NULL is  not all-zeros\202;  comments
 are  supposed to be  meaningful enough  to make clear  the use of each
 defined symbol.
 The  symbol  LONGLONG  should only be  defined on  platforms  having a
 larger integer size than 'long'; its value is then the  naming of that
 type \201e.g. "#define LONGLONG long long" or "#define LONGLONG __int64".\202
 In the latter case, a "#define __int64 long long" should be put in the
 starter  file. If LONGLONG  is  not  defined,  the  syntax  for  'long
 long'  numerical constants \201"LL"\202 is not recognized \201except in  system
 header  files\202.
 The  macro  IsVisibleChar governs what an 'invisible character' is; it
 is to  be  adapted  to  locally  used  character  set  extension.
 The  SignedChar/SignedIntField  symbols  may  have to be adapted  from
 their default value.
 EBCDIC character coding could be supported by  changing the 'charInfo'
 array \201file 'dcrec.c'\202.
 Input/output  is  done  entirely  via   fopen/fread/feof/fflush/fputs/
 fclose/getchar/setvbuf. The  only other  used  system  functions  are:
 malloc/realloc/free,  setjmp/longjmp, exit/abort, system \201to pass con-
 trol to the local compiler\202, fileno/isatty, and getenv.)RP(

)0 P(
) 10 71 PR( File 'dccFiles.mng' is to be adapted to local conditions; it indicates
 the directory where dcc execution  files  \201adjustment  files  and  the
 starter file\202 are to be found, and the system header files  directory.
 If there are several  system  header  files  directories,  use  symbol
 'PredefDCCDFLTS'  \201see  paragraph  10; for gcc  platforms, the command
 file 'createLocalFilesMngFile'  computes the value  of  this  symbol\202.
 The content of environment  variable DCCFILES, if defined,  supersedes
 these values; its format is:
   <dccExecFilesDir> or
   <dccExecFilesDir> <space> <sysHdrDir>.)RP(

)0 P(
) 10 71 PR( Files   'dcmsg.###'  contain  the  text  of  all  messages  \201including
 errors/warnings\202; since these messages are C string literals, they may
 be  changed  at will.  '###' indicates the language used for messages;
 at present, there exist "eng"lish  and  "fre"nch  versions.  In  these
 files,  the  character  sequence '@x', where x is a digit in the range
 '1'-'9', is not outputted as such, but replaced by a text generated by
 dcc.  The  character  sequence  '@0'  toggles  a flip-flop controlling
 output  of  the  '@0'  parenthesized  message  chunks  \201output  if  in
 interactive  mode after 'e'/'E' command, or if options '+zve', '+zvve'
 activated\202.)RP(

)0 P(
)0 P()2 1 1 HR()0 2 11 H(UNIX)WB 93 Sn()WB 13 Sn( OS
)EA()EH(
) 8 71 PR( On an UNIX system, once these files set, compilation is done by typing
 'make'. The 'make install' command installs dcc into the system \201first
 edit file 'installfile' to define where you want it to be; unmodified,
 this file installs dcc in /usr/local/bin/, and the  'execution'  files
 in  /usr/local/lib/DccExecFiles/  \201if  changed,  change  also value of
 DccExecFilesDir symbol in file  'dccFiles.mng'\202.   Then  test  dcc  on
 itself  \201command  file  'tstdcc'\202: this should  generate  no error nor
 warning.)RP(

)0 P(
)0 P()2 1 1 HR()0 2 12 H(VMS)WB 94 Sn()WB 14 Sn( OS
)EA()EH(
) 2 71 PR( On  a VMS system, use the 'installdccvms.com' file.  The following DCL
 logical names have to be defined beforehand:)RP(

)0 P(
)0 DL()DT()BD(dccexecfilesdir)WB 15 Sn(
)EA()ES()DD() 1 51 PR( directory where dcc execution files are installed,)RP(

)0 P(
)DT()BD(dccsyshdrdir)WB 16 Sn(
)EA()ES()DD() 2 71 PR( directory  where system header files \201'stdio.h' etc.\202 can be found \201in
 text form\202.)RP(

)0 P()LD(
) 2 71 PR( Also,  'dcc'  has  to  be  defined as a "foreign" command \201$ dcc :== $
 <complete executable file name>\202. The test file is 'tstdccvms.com'.)RP(

)0 P(
)0 P()2 1 1 HR()0 2 13 H(WindowsXX)WB 95 Sn()WB 17 Sn( OS
)EA()EH(
) 3 71 PR( On WindowsXX, with Microsoft VisualC++ 4.0, use 'makefile.win32' file;
 do not forget to set the INCLUDE, LIB, and PATH environment variables,
 e.g. :)RP(

)0 P(
) 4 71 PR(    set INCLUDE=C:\200Program Files\200DevStudio\200VC\200include
    set LIB=C:\200Program Files\200DevStudio\200VC\200lib
    set PATH=C:\200Program Files\200DevStudio\200VC\200bin;C:\200Program Files\200
                                                DevStudio\200SharedIDE\200bin)RP(

)0 P(
)0 P()2 1 1 HR()0 2 14 H(Other)WB 96 Sn()WB 18 Sn(
)EA()EH(
) 1 41 PR( On other systems, you are on your own...)RP(

)0 P(
) 2 71 PR( Note : possible  local  compiler  warnings  while  compiling  dcc  may 
        safely be ignored \201provided the compiler is mature\202.)RP(

)0 P(

)0 P()2 1 1 HR()0 1 15 H(-)WB 97 Sn()WB 19 Sn( 5 - Execution files
)EA()EH(
) 1 54 PR( Several files are needed by dcc to execute correctly:)RP(

)0 P(
)0 P()2 1 1 HR()0 2 16 H(Starter)WB 98 Sn()WB 20 Sn( file
)EA()EH(
) 10 71 PR( Its  purpose  is  to  define  those symbols that are predefined by the
 local compiler.  It also gives the name of the compiler \201via a  string
 literal,  that  must  be  the  value  of  the '__dcc' symbol\202, and can
 override local features \201such as specific  specifiers/qualifiers, e.g.
 the "globalvalue" specifier of VMS C compilers\202. Starter files for VMS
 C compilers \201both VAXs and  ALPHAs\202, the ULTRIX gcc compiler, the OSF1
 gcc  compiler,  the  HP-UX cc/gcc  compilers, the LINUX gcc  compiler,
 the SUNOS gcc compiler, the AIX xlc compiler, the  Djgpp  compiler and
 the Windows VisualC++ cl compiler are included. For SUNOS, the  system
 header files directory must be the gcc header files directory.)RP(

)0 P(
) 5 71 PR( When  the  value  of  the  '__dcc'  symbol  indicates  gcc \201or cc on a
 VMS/Alpha  platform\202,  a  'skeleton'  starter  file  is  automatically
 completed   with   the   compiler  predefined  macros  \201command  files
 adaptStarterFile*\202.  This could be done for other compilers,  provided
 they give a mean to obtain these macros.)RP(

)0 P(
) 4 72 PR( Note 1 : the  called  compiler  can  be  changed  from the  default by 
          redefining  the '__dcc'  symbol in the dcc  command line \201'-D'
          or '/DEF' option\202, but then the  starter  file may have to be
          changed.)RP(

)0 P(
) 8 71 PR( Note 2 : system  include files  are  configurated via several symbols,
          such as _XOPEN_SOURCE  or _POSIX_C_SOURCE; these symbols  are
          not defined  by default in dcc \201except if the called compiler
          is gcc or VMS/Alpha cc\202, which may result in 'undefined func-
          tion' messages. To set such a symbol, either define it in the
          'starter.dcc'  file  \201then it  is  global  for all users\202, or
          define it  using  the  '-D'  command  line  option  \201possibly
          via the DCCDFLTS environment variable, see paragraph 10\202.)RP(

)0 P(
)0 P()2 1 1 HR()0 2 17 H(Adjustment)WB 99 Sn()WB 21 Sn( files
)EA()EH(
) 6 71 PR( Their  purpose  is  to  amend system header files, so that they do not
 cause dcc to issue undue warnings.  Conceptually, an  adjustment  file 
 is  appended  to the  end of the  corresponding header file \201after the
 first   inclusion,   or    after    each    inclusion    if     symbol
 ADJFILES_INCLUDED_AT_EACH_INCL is defined in the starter file; cf file
 'time.adj'\202.)RP(

)0 P(
) 6 71 PR( An  adjustment  file  cannot  declare/define   anything  not declared/
 defined  by the  corresponding  header  file  \201except if  something is
 missing in it, e.g. the prototype for the "sbrk" function in stdlib.h;
 see then d-pragma /*~AddedObj*/, paragraph  8\202. They  may redeclare at
 will  system  function, objects, typedefs \201even already used ones\202 and
 macros.)RP(

)0 P(
) 4 71 PR( An identifier not declared in the corresponding  system header file is
 ignored.  There  may be  several  redefinitions for a given  function/
 structure/union; the  one that is  chosen is the one of  the same sort
 and with the same number of parameters/fields.)RP(

)0 P(
) 3 71 PR( A system  macro \201with  parameter, that is not a  symbol\202, for  example
 "setjmp", after  having been  met once in an  adjustment  file, is not
 expanded any more \201being replaced by a function prototype\202.)RP(

)0 P(
) 3 71 PR( The 'bool' type is implicitely  defined inside an adjustment file, but
 precautions  should be taken if is also  defined by the  corresponding
 system header file \201cf. 'curses.adj'\202.)RP(

)0 P(
) 5 71 PR( Any  preprocessor feature can be used in an adjustment file.  Besides,
 the  'cdefined'  function,  similar  to  the  'defined'   preprocessor
 function  but  answering  True if  its parameter  is a defined  system
 'program' identifier \201as  opposed to a 'preprocessor' identifier\202, can
 also be used \201see for example 'signal.adj'\202.)RP(

)0 P(
) 6 71 PR( By   convention,   for   a  system  header  file  named  'xxx.h',  the
 corresponding adjustment file is named 'xxx.adj', and is  searched  by
 default  in  the  DccExecFilesDir  directory.   If  one  wants another
 suffix, or wants to put \201some\202 adjustment files in other  directories,
 one  has  to  create  an  'adjFiles.dcc'  file  in the DccExecFilesDir
 directory, file whose format is \201for each line\202:)RP(

)0 P(
) 2 71 PR(   "<system header file name>" , "<corresponding adjustment file
                                     full name \201with absolute path\202>" ;)RP(

)0 P(
) 6 49 PR( Example of 'adjFiles.dcc' file:
   #define X11AdjDir "/usr/local/include/DccAdj/"
   "icon.h", X11AdjDir "icon.adj";
   "Kn/Knvas.h", X11AdjDir "Knvas.adj";
   ...
   #undef X11AdjDir)RP(

)0 P(
) 4 71 PR( Should  any  header  file  reveal  to be unamendable, it can be purely
 replaced by the  corresponding  adjustment  file.   It  must  then  be
 described in the 'adjFiles. dcc' file, and the corresponding line must
 be prefixed by an exclamation point \201'!'\202.)RP(

)0 P(
) 3 71 PR( Adjustment  files  for most C system header files \201curses.h:  courtesy
 of W. Briscoe, freelance, UK\202 are included; adjustment files  for  the
 X-Window library are available, but only partially checked.)RP(

)0 P(
)0 P()2 1 1 HR()0 1 18 H(-)WB 100 Sn()WB 22 Sn( 6 - Test files
)EA()EH(
) 2 71 PR( The  command  files  'tstdcc*' just check dcc on its own source files;
 this check should not generate any error nor warning.)RP(

)0 P(
) 4 71 PR( You can get a feeling of what dcc can do for you by typing the command
 "dcc trydcc.c".  You can also limit dcc scrutiny by using  appropriate
 options  \201see paragraph 10\202 or by  conditional  compilation  using the
 '__dcc' symbol.)RP(

)0 P(
) 2 71 PR( There  are  many  more  non-regression  check  files, but they are not
 included.)RP(

)0 P(
)0 P()2 1 1 HR()0 1 19 H(-)WB 101 Sn()WB 23 Sn( 7 - Article
)EA()EH(
) 4 71 PR( Unfortunatly,  the wrong version of the paper was published in SIGPLAN
 Notices; so the right version  \201in  fact  updated  and  somewhat  more
 detailed\202  is  included,  in  Postscript form, along with a pure ASCII
 form \201for 'diff' purposes\202.)RP(

)0 P(
)0 P()2 1 1 HR()0 1 20 H(-)WB 102 Sn()WB 24 Sn( 8 - Available d-pragmas
)EA()EH(
) 4 71 PR( For  the following, a "file identifier" is defined to be composed of a
 "file access path" \201machine name, directories...\202, followed first by a
 "file  name"  and  then by a "file suffix" that begins on the last dot
 '.' seen in the file identifier.)RP(

)0 P(
) 5 71 PR( A "header" file is a source file whose file suffix contains the letter
 'h' at least once, and which is included via the '#include' directive;
 a  "system  header"  file  is a header file whose '#include' directive
 uses the '<...>' form. A "body" file is a source file which is neither
 a header file, nor a file included by a header file.)RP(

)0 P(
) 4 71 PR( Except  /*~DccCompliant*/, /*~DollarSign*/, /*~NoWarn*/, /*~PopWarn*/,
 /*~Private*/,   /*~PrivateTo*/,   /*~Public*/,   /*~TypeCombination*/,
 /*~Warn*/, d-pragmas have purely local effect, that is they have to be
 used each time the corresponding situation occurs.)RP(

)0 P(
)0 2 21 H(/*~AddedObj*/)WB 103 Sn()WB 25 Sn(
)EA()EH(
) 2 71 PR(   allows a new function/object/type to be added in an adjustment file:
       void sbrk/*~AddedObj*/\201long\202;)RP(

)0 P(
)0 2 22 H(/*~BackBranch*/)WB 104 Sn()WB 26 Sn(
)EA()EH(
) 2 41 PR(   avoids warning on backward branches:
       goto alrdDefLabel /*~BackBranch*/;)RP(

)0 P(
)0 2 23 H(/*~CastTo)WB 105 Sn()WB 27 Sn( <type> */
)EA()EH(
) 7 71 PR(   allows pseudo-cast between parallel types; also to  be used to avoid
   warning on comparison of difference\201s\202 of unsigned int:
       typedef struct {int x;}Ts; typedef Ts Ts1;
       Ts s; Ts1 s1; unsigned int ui1, ui2;
       ...
       s1 = /*~CastTo Ts1*/ s;
       if \201/*~CastTo unsigned int */ \201ui2 - ui1\202 > 1\202 ...)RP(

)0 P(
)0 2 24 H(/*~ComposingHdr*/)WB 106 Sn()WB 28 Sn(
)EA()EH(
) 5 75 PR(   tells  that the whole service provided by the included header file is to
   be part of the service offered by the including header file:
       #include <math.h> /*~ComposingHdr*/
   Permits also a header file to carry a name  different from its body file
   \201through a dummy header file carrying the right name\202.)RP(

)0 P(
)0 2 25 H(/*~DccCompliant*/)WB 107 Sn()WB 29 Sn(
)EA()EH(
) 3 75 PR(   in a system  header file, indicates  that the \201remaining portion of the\202
   file  conforms to dcc  requirements, and  that  'typedefs'  will  create
   parallel types if applicable; usable anywhere \201in a system header file\202.)RP(

)0 P(
)0 2 26 H(/*~DollarSign*/)WB 108 Sn()WB 30 Sn(
)EA()EH(
) 2 75 PR(   must be at  beginning of module \201possibly after comments\202; autorizes '$'
   in identifiers.)RP(

)0 P(
)0 2 27 H(/*~DynInit*/)WB 109 Sn()WB 31 Sn(
)EA()EH(
) 3 75 PR(   avoids  warning on  dynamic  initialization  \201by constants\202 of  compound
   objects:
       [auto] struct _s toto = {...} /*~DynInit*/;)RP(

)0 P(
)0 2 28 H(/*~EndLongjmpCallable*/)WB 110 Sn()WB 32 Sn( 
)EA()EH(
) 4 75 PR(   tells the 'volatile'  qualifier  checking  algorithm that the  "longjmp"
   function won't  be called  beyond  this point.   Usable  anywhere in the
   body of a function, after a "setjmp"-controlled 'if' statement.
.)RP(

)0 P(
)0 2 29 H(/*~ExactCmp*/)WB 111 Sn()WB 33 Sn(
)EA()EH(
) 2 64 PR(   avoids warning on floating point comparison for \201in\202equality:
       if \201fltVar == 0 /*~ExactCmp*/\202 ...)RP(

)0 P(
)0 2 30 H(/*~FullEnum*/)WB 112 Sn()WB 34 Sn(
)EA()EH(
) 4 75 PR(   asks dcc to warn if not every  constant  of the \201enum\202  switch  type has
   been  used as case values; only useful if  a  'default'  clause  is used
   \201for example to catch possible "strange" values of the enum expression\202:
       default: /*~FullEnum*/ ...)RP(

)0 P(
)0 2 31 H(/*~Generic*/)WB 113 Sn()WB 35 Sn(
)EA()EH(
) 14 75 PR(   tells dcc that the  returned  type of a function is  compatible with any
   non-closed descendant  of this  type \201subtyping\202 or, in case of 'void *'
   returning function, with  any  pointer. Not  valid if any  parameter  is
   marked /*~ResultType*/ or /*~ResultPtr*/;incompatible with /*~Utility*/:
       int atoi\201const char *\202 /*~Generic*/;
       double sin\201double\202 /*~Generic*/;
       void *allocateChunk\201\202 /*~Generic*/;
   The variant /*~Generic <fctList> */ is allowed  only in adjustment files
   \201see /*~RootTyp*/\202.
   /*~Generic*/ can also be used with function  parameters, to specify that
   the  so-qualified  formal  parameter is  compatible with any  descendant
   \201closed or not\202:
       size_t strlen\201const char * /*~Generic*/\202;
       void \201*savPSCF\202\201char /*~Generic*/\202;)RP(

)0 P(
)0 2 32 H(/*~Ignore*/)WB 114 Sn()WB 36 Sn( 
)EA()EH(
) 3 75 PR(   tells  dcc  to  ignore  object-like  or  function-like calls to  defined
   pseudo-macro. Allowed only in starter files:
       #define /*~Ignore*/ __asm)RP(

)0 P(
)0 2 33 H(/*~IndexType)WB 115 Sn()WB 37 Sn( <type> */
)EA()EH(
) 9 75 PR(   specifies  type of index  values usable for an  array, allocated  either
   statically or dynamically  \201default  index type for static  arrays: type
   of bound, except if bound given by a plain arithmetic constant; then any
   integral arithmetic type\202, or that can be added to a pointer. To be used
   in array/pointer declaration:
       Color arr[ArrSiz /*~IndexType ColorIndex */];
       bool * /*~IndexType Trow*/ * /*~IndexType Tcol*/ twoDimSwitchArray;
   or pointer creation:
       & /*~IndexType Tcol*/ col)RP(

)0 P(
)0 2 34 H(/*~Init)WB 116 Sn()WB 38 Sn( <listVar>*/
)EA()EH(
) 5 73 PR(   tells the  initialization-checking  algorithm  that, from  now on, all 
   variables in the list  can be considered as initialized. Very specific
   \201see X-Window  applications,  or  adjustment  files\202. Usable  anywhere
   \201in the  scope  of the variables\202:
       XtSetArg\201arg[0], XmNchildren, /*~Init children*/ &children\202;)RP(

)0 P(
)0 2 35 H(/*~LiteralCst*/)WB 117 Sn()WB 39 Sn(
)EA()EH(
) 4 75 PR(   tells  that expressions  of a so qualified  parallel type accept unnamed
   constants without  warnings \201see also options '-zuc', '-zgpr', paragraph
   10\202:
       typedef int Int /*~LiteralCst*/;)RP(

)0 P(
)0 2 36 H(/*~LocalAdr*/)WB 118 Sn()WB 40 Sn(
)EA()EH(
) 3 75 PR(   avoids  warning when returning  address of local object from a function,
   or assigning such address to global/external pointer:
       gblPtr = &localObject + 1 /*~ LocalAdr */;)RP(

)0 P(
)0 2 37 H(/*~Masking*/)WB 119 Sn()WB 41 Sn(
)EA()EH(
) 3 75 PR(   avoids  warning  if a macro  name  is the same as  an  already  existing
   identifier:
       #define /*~Masking*/ macroName macroBody)RP(

)0 P(
)0 2 38 H(/*~MayModify*/)WB 120 Sn()WB 42 Sn(
)EA()EH(
) 8 75 PR(   indicates  that  modifications  may  occur through a  supposedly  const-
   pointing  pointer  parameter \201via  casting\202, or  through a  struct/union
   parameter  containing  non-const pointers. To be used in functions whose
   name  implies  modifications \201such as freeing  functions\202, or in case of
   \201possible\202 slight modifications:
       void freeTree\201const struct _tree *x /*~MayModify*/\202;
       void clipTree\201struct _tree x /*~MayModify*/\202;
   See also /*~ResultPtr*/ d-pragma.)RP(

)0 P(
)0 2 39 H(/*~NeverReturns*/)WB 121 Sn()WB 43 Sn(
)EA()EH(
) 4 75 PR(   documents that a void function never returns control:
       static void errExit\201...\202 /*~NeverReturns*/;
   The variant  /*~NeverReturns <fctList> */  is allowed only in adjustment
   files \201see /*~RootTyp*/\202.)RP(

)0 P(
)0 2 40 H(/*~NoBreak*/)WB 122 Sn()WB 44 Sn(
)EA()EH(
) 3 67 PR(   avoids warning if falling through the end of a 'case' statement:
       case C1 : i = 1;  /*~NoBreak*/
       case C2 : i++;  break;)RP(

)0 P(
)0 2 41 H(/*~NoDefault*/)WB 123 Sn()WB 45 Sn(
)EA()EH(
) 5 75 PR(   avoids  warning  if no 'default'  case at  end of 'switch'  statement on
   enumeration  \201not  needed of course if all  constants have  been used as
   case values\202:
       case Cn : i = ... ;
       /*~NoDefault*/)RP(

)0 P(
)0 2 42 H(/*~NonConstExp*/)WB 124 Sn()WB 46 Sn(
)EA()EH(
) 4 75 PR(   makes dcc believe that a \201parenthesized\202 expression is not constant:
       if \201\201~0==-1\202/*~NonConstExp*/\202 ...
   Notice  that the  Pascalian  form "while \201TRUE\202"  can be  advantageously
   replaced by the C idiom "for \201;;\202",)RP(

)0 P(
)0 2 43 H(/*~NotUsed*/)WB 125 Sn()WB 47 Sn(
)EA()EH(
) 6 75 PR(   prevents  warning on  not-used  object or enum constant  or formal para-
   meter \201function or macro\202:
       enum {Ce1, Ce2 /*~NotUsed*/, Ce3 ...}
       static void shift\201Tstring x, TtypeElt y /*~NotUsed*/\202;
       #define Sink\201x /*~ NotUsed */\202
       static const char *versionName = "Version 3.3.1" /*~NotUsed*/;)RP(

)0 P(
)0 2 44 H(/*~NoWarn*/)WB 126 Sn()WB 48 Sn(
)EA()EH(
) 3 75 PR(   to be  used in front of  sections of code not \201yet\202  dcc-compliant  \201see
   also /*~Warn*/, /*~PopWarn*/ d-pragmas\202;  usable anywhere.  Warnings are
   automatically disabled inside system header files.)RP(

)0 P(
)0 2 45 H(/*~OddCast*/)WB 127 Sn()WB 49 Sn(
)EA()EH(
) 2 47 PR(   to make dcc swallow a cast it frowns upon:
       ptrInt = \201int * /*~OddCast*/\202 ptrStruct;)RP(

)0 P(
)0 2 46 H(/*~PopWarn*/)WB 128 Sn()WB 50 Sn(
)EA()EH(
) 2 75 PR(   goes  back to  previous  Warn/NoWarn  state \201see /*~Warn*/, /*~No Warn*/
   d-pragmas\202; usable anywhere. At least 16 levels kept.)RP(

)0 P(
)0 2 47 H(/*~PortableQM*/)WB 129 Sn()WB 51 Sn(
)EA()EH(
) 2 74 PR(   to make dcc swallow a cast it has good reasons to believe not portable:
       ptrFloat = \201float * /*~PortableQM*/\202ptrDbl;)RP(

)0 P(
)0 2 48 H(/*~Private*/)WB 130 Sn()WB 52 Sn(
)EA()EH(
) 2 75 PR(   if used in  header file X.*h*, is strictly  equivalent  to  /*~PrivateTo
   "<currentFile>", "X.c" */.)RP(

)0 P(
)0 2 49 H(/*~PrivateTo)WB 131 Sn()WB 53 Sn( "<fileName>" [, "<fileName>"]* */
)EA()EH(
) 12 75 PR(   indicates  that struct/union members, or enum constants, declared there-
   after are  only visible  from  the  indicated  file\201s\202,  or from  macros
   defined in the  indicated file\201s\202 or called by such macros. Also  needed
   to  indicate  in which file is  defined an incomplete  struct/union  \201if
   /*~Private* */  indicates several  files, this file is taken as the last
   one\202.
   Usable  anywhere \201in a header file\202.
   Scope: until  next /*~Private*/, /*~PrivateTo*/ or /*~Public*/ d-pragma;
   an '#include' of \201another\202 header file  creates a hole in the  scope for
   the  duration of the include. File names  may contain  joker  characters
   \201'*' matches any set of characters; '%' matches any character\202:
       /*~PrivateTo "dcrec.c", "dc%%%.*h*" */)RP(

)0 P(
)0 2 50 H(/*~PseudoVoid*/)WB 132 Sn()WB 54 Sn(
)EA()EH(
) 5 75 PR(   authorizes a so-declared \201non  void-returning\202 function  to be used as a
   statement:
       char *strcpy\201char *x, const char *y\202 /*~PseudoVoid*/;
   The variant  /*~PseudoVoid <fctList> */  is  allowed  only in adjustment
   files \201see /*~RootTyp*/\202.)RP(

)0 P(
)0 2 51 H(/*~Public*/)WB 133 Sn()WB 55 Sn(
)EA()EH(
) 2 75 PR(   indicates end of last /*~Private#*/ scope; usable  anywhere \201in a header
   file\202.)RP(

)0 P(
)0 2 52 H(/*~ResultPtr*/)WB 134 Sn()WB 56 Sn(
)EA()EH(
) 4 75 PR(   to be used for \201pointer\202  parameters that are  returned  as result; same
   effect  as  /*~ResultType*/,  plus  allows \201at calling level\202 "should be
   'const'" pointer checking propagation:
       char *strchr\201const char * /*~ResultPtr*/, char\202;)RP(

)0 P(
)0 2 53 H(/*~ResultType*/)WB 135 Sn()WB 57 Sn(
)EA()EH(
) 7 75 PR(   indicates  that the result type of a function  call is the type \201or  the
   smallest common type\202 of the current  actual parameter\201s\202  corresponding
   to the so qualified formal parameter\201s\202:
       void *realloc\201void *old /*~ResultType*/, size_t size\202;
       Window mergeWindow\201Window/*~ResultType*/, Window/*~ResultType*/\202;
       long sum\201long m /*~ResultType*/, long n /*~ResultType*/\202;
       short s; signed char b; unsigned char ub;)RP(

)0 P(
) 5 75 PR(       s = sum\201b, s\202;  /* OK; returned type behaves as 'short' from dcc
                                                             standpoint. */
       s = sum\201ub, s\202; /* idem */
       b = sum\201SCHAR_MAX + 1, b\202; /* WRONG, because return type is
                                                                'short'. */)RP(

)0 P(
)0 2 54 H(/*~RootType*/)WB 136 Sn()WB 58 Sn(
)EA()EH(
) 6 75 PR(   closes \201renders incompatible with its hierarchy\202 the type subtree headed
   by the so qualified \201parallel\202 type:
       typedef unsigned int Talgn /*~RootType*/;
   The  variant  /*~RootType  <typeList>*/  is  allowed  only in adjustment
   files:
       /*~RootType wchar_t, wint_t*/)RP(

)0 P(
)0 2 55 H(/*~SameValue*/)WB 137 Sn()WB 59 Sn(
)EA()EH(
) 5 75 PR(   avoids  warning if an enum  constant have the same value that a previous
   constant of the same enum:
       enum _colors {BEG_COLORS, INFRARED=BEG_COLORS /* ~SameValue not
          necessary here, because 'BEG_COLORS' is last defined constant */,
           RED, ORANGE, YELLOW, ..., BEG_VISIBLE_COLORS=RED /*~SameValue*/})RP(

)0 P(
)0 2 56 H(/*~Saved*/)WB 138 Sn()WB 60 Sn(
)EA()EH(
) 3 75 PR(   to be  used  if a  formal  parameter  which is a  pointer is saved  into
   permanent storage \201static/extern\202:
       void qio\201Semaphore * /*~Saved*/\202;)RP(

)0 P(
)0 2 57 H(/*~SideEffectOK*/)WB 139 Sn()WB 61 Sn(
)EA()EH(
) 2 63 PR(   tells that a side effect via a macro parameter is OK:
       #define DangerousMin\201x, y/*~SideEffectOK*/\202 \201x<y\202? x : y)RP(

)0 P(
) 1 37 PR(       DangerousMin\201oldMin, tab[i++]\202)RP(

)0 P(
)0 2 58 H(/*~SizeOfMemBlk*/)WB 140 Sn()WB 62 Sn(
)EA()EH(
) 4 75 PR(   allows  to  check,  for   'malloc'-like  functions   using  'sizeof'  as
   parameter,  whether the type of the \201first\202 sizeof  argument is the type
   pointed by the receiving pointer:
       void *malloc\201size_t /*~SizeOfMemBlk*/\202;)RP(

)0 P(
)0 2 59 H(/*~SizeOK*/)WB 141 Sn()WB 63 Sn(
)EA()EH(
) 4 75 PR(   avoids  warning  when  no  width  limit  is  specified  in a  conversion
   specification  of  'sscanf', or  when a large  struct/union is passed as
   parameter:
       \201void\202sscanf\201charPtr1, "%s", charPtr2/*~SizeOK*/\202;)RP(

)0 P(
)0 2 60 H(/*~TypeCombination)WB 142 Sn()WB 64 Sn( <combList>*/
)EA()EH(
) 36 75 PR(   indicates allowed combinations  between \201a priori incompatible\202 parallel
   types. Syntax:
       <combList>::= <combElt> [ , <combElt> ]*
       <combElt> ::= <typeIdent> <operator> <typeIdent> -> <typeIdent>
   The possible operators are:  +, -, *, /, %, ~+ \201non-commutative add\202 and
   ~* \201non-commutative multiply\202.  For the / operator, if one operand is  a
   descendant  of  the other, the result type can be a native type \201for use
   as a generic coefficient\202. Besides, some combinations  are automatically
   deduced:
   - for '+', from Ta + Tb -> Tc are deduced:
                   Tb + Ta -> Tc   \2011\202
                   Ta - Tb -> Tc   \2012\202 \201deduced only if Tc = Ta\202
   - for '*', from Ta * Tb -> Tc are deduced:
                   Tb * Ta -> Tc   \2013\202
                   Tc / Ta -> Tb   \2014\202
                   Tc % Ta -> Tc   \2015\202
                   Tc / Tb -> Ta   \2016\202
                   Tc % Tb -> Tc   \2017\202
     Lines 5 and 7 are deduced only if Ta and Tb are of integer type.
   If necessary, type  hierarchy  is  searched  to find  an  applying  type
   combination.  D-pragma usable  only  outside  of any  block. Once given,
   cannot be desactivated:
       typedef float Volt, Amp, Watt, Ohm;
       typedef int Tgen;   /* 'generic' type */
       typedef Tgen Tspe;  /* specialization of Tgen */
       /*~TypeCombination Volt  * Amp  -> Watt,
                          Amp   * Ohm  -> Volt,
                          Watt  / Watt -> float,
                          Tspe ~+ Tgen -> Tspe */
       typedef int Fruit;
       typedef Fruit Apple, Pear;)WR(
       /*~TypeCombination Apple + Pear -> Fruit */
       {
         Volt v; Amp i; Watt p, p1; Ohm r; Tspe spe; Tgen gen;
         typedef Apple MacIntosh;
         MacIntosh macIntosh; Fruit fruit; Pear pear;)RP(

)0 P(
) 7 75 PR(         p = r * i * i;    /* OK */
         p = v * \201v / r\202;  /* OK */
         r *= p/p1;        /* OK */
         spe -= gen;       /* OK; illegal if no ~TypeCombination, because
                                contrary to dcc default hierarchy rules. */
         fruit = pear + macIntosh;  /* idem */
        })RP(

)0 P(
)0 2 61 H(/*~Undef)WB 143 Sn()WB 65 Sn( <listIdent>*/
=head2 /*~UndefTag <listIdent>*/
)EA()EH(
) 3 75 PR(   terminates  \201for dcc\202 the scope of all indicated  identifiers \201'general'
   or 'tag' name space\202; usable anywhere \201outside of any block\202:
       /*~Undef TpermSto, headPermSto*/)RP(

)0 P(
)0 2 62 H(/*~Utility*/)WB 144 Sn()WB 66 Sn(
)EA()EH(
) 5 75 PR(   to be used for  functions  returning a  representation  type that has no
   reason to be named. Incompatible with /*~Generic*/:
       int scanf\201const char *, ...\202 /*~Utility*/;
   Can also be used for a function formal parameter, to specify that actual
   parameter cannot be of parallel type.)RP(

)0 P(
)0 2 63 H(/*~VoidToOther*/)WB 145 Sn()WB 67 Sn(
)EA()EH(
) 4 75 PR(   autorizes  automatic  conversion from \201non-generic\202 'void *' type to any
   other pointer type, or to read, via scanf, into a 'void *' variable:
       objPtr = /*~VoidToOther*/ ptrOnVoid;
       scanf\201"%i", /*~VoidToOther*/ ptrOnVoid\202;)RP(

)0 P(
)0 2 64 H(/*~Warn*/)WB 146 Sn()WB 68 Sn(
)EA()EH(
) 3 75 PR(   to be used in front of dcc-compliant code \201default state at beginning of
   program,  except  if  '-znw'  option  used\202; usable  anywhere.  See also
   /*~PopWarn*/, /*~NoWarn*/ d-pragmas.)RP(

)0 P(
)0 2 65 H(/*~zif)WB 147 Sn()WB 69 Sn( <boolExp> <stringCst> */
)EA()EH(
) 6 75 PR(   causes  emission on  stderr \201at  dcc  execution  time\202 of <stringCst> if
   compile-time evaluable <boolExp> is true; can make use of  special 'zif'
   functions  \201see "Compile-time checking tool"  paragraph  in the paper on
   dcc\202, and be used anywhere \201also inside macros\202:
       /*~ zif \201sizeof\201typArray\202/sizeof\201typArray[0]\202 !=
                    __extent\201TtypName\202+1\202 "Array 'typArray': bad length" */)RP(

)0 P(
) 6 70 PR(       typedef struct{int a, b, c;} AnyStruct;
       static AnyStruct x = {
         0  /*~zif !__member\201a\202 "misplaced init for field 'a'" */,
         3  /*~zif !__member\201b\202 "misplaced init for field 'b'" */,
         -2 /*~zif !__member\201c\202 "misplaced init for field 'c'" */,
         /*~zif !__member\201\202 "Structure 'x' not fully initialized" */};)RP(

)0 P(
)0 2 66 H(Notes)WB 148 Sn()WB 70 Sn(
)EA()EH(
) 11 76 PR(   - for dcc, a  d-pragma  is   made  up  of  tokens,  the inner ones being
     perfectly  macro-substitutable; for  instance,  the  /*~LocalAdr*/  d-
     pragma consists of the three following tokens:
        /*~         \201special token\202
        LocalAdr    \201identifier\202
        */          \201special token\202
   - an empty d-pragma name is legal; the d-pragma is then  ignored \201except
     in the reach of a '#' preprocessing  operator, in which case it trans-
     lates into a space\202,
   - d-pragmas are visible in the list generated by the '+zlt' option,
   - numerous examples of use of d-pragmas can be found in dcc source files.)RP(

)0 P(

)0 P()2 1 1 HR()0 1 67 H(-)WB 149 Sn()WB 71 Sn( 9 - Indentation rules
)EA()EH(
) 2 71 PR( Indentation  is  checked  only on lines  beginning a  declaration or a
 statement.)RP(

)0 P(
)0 DL()DT()BD(General)WB 72 Sn( case :
)EA()ES()DD() 4 71 PR( Indentation level is increased on  entering  a  block  \201just after its
 opening brace\202, for the duration of the block, or on entering  a  sub-
 statement  \201statement  controlled  by  'if',  'else',  'do',  'while',
 'for'\202, for the duration of the substatement.)RP(

)0 P(
)DT()BD(Special)WB 73 Sn( cases :
)EA()ES()DD() 4 71 PR( - no change of indentation level for construct  "else if", both tokens
   being on same line;
 - block as substatement may be lined up with controlling statement;
 - 'case/default's may be lined up with corresponding 'switch'.)RP(

)0 P()LD(
)0 P()2 1 1 HR()0 1 68 H(-)WB 150 Sn()WB 74 Sn( 10 - Options
)EA()EH(
) 3 71 PR( Their  list can be  obtained  by  executing  a  dcc  command alone \201no
 argument\202; the version/release number is also given. If the prefix '+'
 is replaced by '-', or vice versa, the option effect is reversed.)RP(

)0 P(
) 3 71 PR( A given option is valid for all files met subsequently in the  command
 line, unless reverted or cancelled \201cf. option '+zrst'\202; options given
 after last file name apply only to last file \201VMS\202.)RP(

)0 P(
) 44 71 PR( Available options :
  -zac  no missing 'const' qualifier check,
  -zbo  no 'bool' type check,
  -zcc  do not call compiler,
  -zcw  call compiler only if no warning/error,
  -zefi no check of inefficient constructs,
  -zfci do not check first character of identifiers,
  -zfrt no unnamed function return type check,
  -zgpr no check of "good programming practices",
  -zinc no '#include' position check,
  -zind no indentation check,
  -zlvlX call compiler only if there is no warning of level >= X,
  -znui no check of unused identifiers,
  -znup no check of unused function parameters,
  -znw  start in "no warning" mode,
  -zpe  no check of various possible errors,
  -zpo  no portability check,
  -zrd  no readability check,
  -zsam no stopping after each message,
  -ztr  no trailer,
  -zuc  no check of unnamed constants,
  -zwa  no warnings,
  -zwr  no forced newline at 80 characters,
  +zae  report all  errors/warnings \201default is, after a few  messages,
        to report only first error of each statement or declaration\202,
  +zafn always display  current file  name  in  error/warning messages,
  +zctn check first character  of  \201created\202  type  names \201if '-zfci'\202,
  +zdol allows '$' in identifiers,
  +zepl warn on empty formal parameter list,
  +zkwm keywords redefinable \201via macro\202,
  +zlt/+zltX list last tokens  processed before error/warning  \201X =)WR(
        buffer length\202,
  +zmcc check all pointers for missing 'const' qualifier,
  +zmic more index type checking,
  +zmsgX  X: maximum number of emitted messages \201default is 20\202,
  +zpnt check that function parameters are of named type,
  +zrhw report only errors or else highest level warnings,
  +zrst reset all previous options,
  +zsy  print each block's symbol table,
  +ztabX  X: tab  spacing \201for indentation purposes; 8 is default\202,
  +zudt warn on tags declared \201but not defined\202 in header files,
  +zusg give 'usage',
  +zve  output more informative error/warning messages,
  +zvve idem '+zve', plus output type descriptions in full.)RP(

)0 P(
) 5 72 PR( Options not  beginning with `+z'/`-z'  are transmitted to compiler, but
 dcc interprets  `-I'/`-D'/`-U' cc options \201or their VMS  counterparts\202,
 besides  passing them to the compiler. For VMS, only one  macro can  be
 defined by a  given /DEF; /DEF, /INCL, /UNDEF options have  to be named
 that way, and separated by spaces.)RP(

)0 P(
) 7 71 PR( The environment variable DCCDFLTS can  contain any part of the command
 line;  its  content  is  logically  added  \201just  after  'dcc'\202 to the
 beginning  of  all following  dcc  command  lines.  The  value  of the
 'PrefixDCCDFLTS' symbol \201file 'dccFiles. mng'\202 is also added.
 Examples of setting of DCCDFLTS:
 - UNIX         setenv DCCDFLTS '-zsam +zvve +zlt'
 - VMS          $ DCCDFLTS = "-zsam +zvve +zlt")RP(

)0 P(
)0 P()2 1 1 HR()0 1 69 H(-)WB 151 Sn()WB 75 Sn( 11 - Environment variables
)EA()EH(
) 2 71 PR( There are two of them: DCCFILES \201see  paragraph  4\202, and DCCDFLTS \201see
 paragraph 10\202.)RP(

)0 P(
)0 P()2 1 1 HR()0 1 70 H(-)WB 152 Sn()WB 76 Sn( 12 - Exit statuses
)EA()EH(
) 4 71 PR( dcc provides six different exit statuses, whose values depend on local
 platform \201see file 'configdc.th'\202:  EXIT_SUCCESS,  two  EXIT_WARNINGS,
 two  EXIT_ERRORS,  and  EXIT_FAILURE  \201returned  when  dcc has to stop
 before end\202.)RP(

)0 P(
)0 P()2 1 1 HR()0 1 71 H(-)WB 153 Sn()WB 77 Sn( 13 - Badly implemented features
)EA()EH(
) 5 71 PR( - floating  constants are  recognized  lexically, but ill converted if
   they have a  fractional  part or a non-nul exponent \201only noticeable
   in  fancy  array  declaration,  e.g.  "char arr[\201int\202\2012.5+6.5\202]"  =>
   arr[4], not [9]\202,
 - not all cases of non-portability checked.)RP(

)0 P(
) 2 71 PR( Note: 'sizeof' does not take into account alignment holes, but this is
 done on purpose, to render portable some checks via d-pragma /*~zif*/.)RP(

)0 P(
)0 P()2 1 1 HR()0 1 72 H(-)WB 154 Sn()WB 78 Sn( 14 - Unimplemented features
)EA()EH(
) 3 54 PR( - check for non-ambiguity of external identifiers,
 - size of objects not given \201'+zsy' option\202,
 - computation of floating-point constant expressions.)RP(

)0 P(
)0 P()2 1 1 HR()0 1 73 H(-)WB 155 Sn()WB 79 Sn( 15 - Known bugs
)EA()EH(
) 1 5 PR( None)RP(

)0 P(
)0 P()2 1 1 HR()0 1 74 H(-)WB 156 Sn()WB 80 Sn( 16 - Main changes with respect to version 2.6
)EA()EH(
) 6 74 PR( - d-pragma /*~NotUsedAfter*/ removed \201not useful anymore\202,
 - big improvement in management of adjustment files \201cf. modifications to
   paragraph 5\202,
 - revision of all adjustment files,
 - cases of '16-bits int' platforms, and of platforms where NULL is not
   all-zeros, taken care of \201but not tested\202.)RP(

)0 P(
)0 P()2 1 1 HR()0 1 75 H(-)WB 157 Sn()WB 81 Sn( 17 - About 16 bits int platforms
)EA()EH(
) 1 36 PR( Portage completed \201but not tested\202.)RP(

)0 P()LD(
    

    
)WB NL /BO 0 D TC /Ba f D Bs /AU f D /UR () D RC ZF
()0 1 -1 H(dcc - Disciplined C Checker \201version 2.7X\202)EH(
              )0 2 -1 H(Table of Contents)EH()WB
ND 1 gt{Ts 3 mul Np 0()0 C()BD(dcc - Disciplined C Checker \201version 2.7X\202)ES()0 1 TN()EA()BN}if
1 NH le{82(1\240\240)1 C(NAME)WB 1 Sn(
)82 1 TN()EA()BN}if
1 NH le{83(2\240\240)1 C(SYNOPSIS)WB 2 Sn(
)83 1 TN()EA()BN}if
1 NH le{84(3\240\240)1 C(DESCRIPTION)WB 3 Sn(
)84 1 TN()EA()BN}if
1 NH le{85(4\240\240)1 C(Copyright)WB 4 Sn(
)85 1 TN()EA()BN}if
1 NH le{86(5\240\240)1 C(Agreement)WB 5 Sn(
)86 1 TN()EA()BN}if
1 NH le{87(6\240\240)1 C(Version&Author)WB 6 Sn(
)87 1 TN()EA()BN}if
1 NH le{88(7\240\240)1 C(Contents)WB 7 Sn(
)88 1 TN()EA()BN}if
1 NH le{89(8\240\240)1 C(-)WB 8 Sn( 1 - Generalities
)89 1 TN()EA()BN}if
1 NH le{90(9\240\240)1 C(-)WB 9 Sn( 2 - In the event of bug
)90 1 TN()EA()BN}if
1 NH le{91(10\240\240)1 C(-)WB 10 Sn( 3 - Distribution files
)91 1 TN()EA()BN}if
1 NH le{92(11\240\240)1 C(-)WB 12 Sn( 4 - Configuration, compilation and installation of dcc
)92 1 TN()EA()BN}if
2 NH le{93(11.1\240\240)2 C(UNIX)WB 13 Sn( OS
)93 1 TN()EA()BN}if
2 NH le{94(11.2\240\240)2 C(VMS)WB 14 Sn( OS
)94 1 TN()EA()BN}if
2 NH le{95(11.3\240\240)2 C(WindowsXX)WB 17 Sn( OS
)95 1 TN()EA()BN}if
2 NH le{96(11.4\240\240)2 C(Other)WB 18 Sn(
)96 1 TN()EA()BN}if
1 NH le{97(12\240\240)1 C(-)WB 19 Sn( 5 - Execution files
)97 1 TN()EA()BN}if
2 NH le{98(12.1\240\240)2 C(Starter)WB 20 Sn( file
)98 1 TN()EA()BN}if
2 NH le{99(12.2\240\240)2 C(Adjustment)WB 21 Sn( files
)99 1 TN()EA()BN}if
1 NH le{100(13\240\240)1 C(-)WB 22 Sn( 6 - Test files
)100 1 TN()EA()BN}if
1 NH le{101(14\240\240)1 C(-)WB 23 Sn( 7 - Article
)101 1 TN()EA()BN}if
1 NH le{102(15\240\240)1 C(-)WB 24 Sn( 8 - Available d-pragmas
)102 1 TN()EA()BN}if
2 NH le{103(15.1\240\240)2 C(/*~AddedObj*/)WB 25 Sn(
)103 1 TN()EA()BN}if
2 NH le{104(15.2\240\240)2 C(/*~BackBranch*/)WB 26 Sn(
)104 1 TN()EA()BN}if
2 NH le{105(15.3\240\240)2 C(/*~CastTo)WB 27 Sn( <type> */
)105 1 TN()EA()BN}if
2 NH le{106(15.4\240\240)2 C(/*~ComposingHdr*/)WB 28 Sn(
)106 1 TN()EA()BN}if
2 NH le{107(15.5\240\240)2 C(/*~DccCompliant*/)WB 29 Sn(
)107 1 TN()EA()BN}if
2 NH le{108(15.6\240\240)2 C(/*~DollarSign*/)WB 30 Sn(
)108 1 TN()EA()BN}if
2 NH le{109(15.7\240\240)2 C(/*~DynInit*/)WB 31 Sn(
)109 1 TN()EA()BN}if
2 NH le{110(15.8\240\240)2 C(/*~EndLongjmpCallable*/)WB 32 Sn( 
)110 1 TN()EA()BN}if
2 NH le{111(15.9\240\240)2 C(/*~ExactCmp*/)WB 33 Sn(
)111 1 TN()EA()BN}if
2 NH le{112(15.10\240\240)2 C(/*~FullEnum*/)WB 34 Sn(
)112 1 TN()EA()BN}if
2 NH le{113(15.11\240\240)2 C(/*~Generic*/)WB 35 Sn(
)113 1 TN()EA()BN}if
2 NH le{114(15.12\240\240)2 C(/*~Ignore*/)WB 36 Sn( 
)114 1 TN()EA()BN}if
2 NH le{115(15.13\240\240)2 C(/*~IndexType)WB 37 Sn( <type> */
)115 1 TN()EA()BN}if
2 NH le{116(15.14\240\240)2 C(/*~Init)WB 38 Sn( <listVar>*/
)116 1 TN()EA()BN}if
2 NH le{117(15.15\240\240)2 C(/*~LiteralCst*/)WB 39 Sn(
)117 1 TN()EA()BN}if
2 NH le{118(15.16\240\240)2 C(/*~LocalAdr*/)WB 40 Sn(
)118 1 TN()EA()BN}if
2 NH le{119(15.17\240\240)2 C(/*~Masking*/)WB 41 Sn(
)119 1 TN()EA()BN}if
2 NH le{120(15.18\240\240)2 C(/*~MayModify*/)WB 42 Sn(
)120 1 TN()EA()BN}if
2 NH le{121(15.19\240\240)2 C(/*~NeverReturns*/)WB 43 Sn(
)121 1 TN()EA()BN}if
2 NH le{122(15.20\240\240)2 C(/*~NoBreak*/)WB 44 Sn(
)122 1 TN()EA()BN}if
2 NH le{123(15.21\240\240)2 C(/*~NoDefault*/)WB 45 Sn(
)123 1 TN()EA()BN}if
2 NH le{124(15.22\240\240)2 C(/*~NonConstExp*/)WB 46 Sn(
)124 1 TN()EA()BN}if
2 NH le{125(15.23\240\240)2 C(/*~NotUsed*/)WB 47 Sn(
)125 1 TN()EA()BN}if
2 NH le{126(15.24\240\240)2 C(/*~NoWarn*/)WB 48 Sn(
)126 1 TN()EA()BN}if
2 NH le{127(15.25\240\240)2 C(/*~OddCast*/)WB 49 Sn(
)127 1 TN()EA()BN}if
2 NH le{128(15.26\240\240)2 C(/*~PopWarn*/)WB 50 Sn(
)128 1 TN()EA()BN}if
2 NH le{129(15.27\240\240)2 C(/*~PortableQM*/)WB 51 Sn(
)129 1 TN()EA()BN}if
2 NH le{130(15.28\240\240)2 C(/*~Private*/)WB 52 Sn(
)130 1 TN()EA()BN}if
2 NH le{131(15.29\240\240)2 C(/*~PrivateTo)WB 53 Sn( "<fileName>" [, "<fileName>"]* */
)131 1 TN()EA()BN}if
2 NH le{132(15.30\240\240)2 C(/*~PseudoVoid*/)WB 54 Sn(
)132 1 TN()EA()BN}if
2 NH le{133(15.31\240\240)2 C(/*~Public*/)WB 55 Sn(
)133 1 TN()EA()BN}if
2 NH le{134(15.32\240\240)2 C(/*~ResultPtr*/)WB 56 Sn(
)134 1 TN()EA()BN}if
2 NH le{135(15.33\240\240)2 C(/*~ResultType*/)WB 57 Sn(
)135 1 TN()EA()BN}if
2 NH le{136(15.34\240\240)2 C(/*~RootType*/)WB 58 Sn(
)136 1 TN()EA()BN}if
2 NH le{137(15.35\240\240)2 C(/*~SameValue*/)WB 59 Sn(
)137 1 TN()EA()BN}if
2 NH le{138(15.36\240\240)2 C(/*~Saved*/)WB 60 Sn(
)138 1 TN()EA()BN}if
2 NH le{139(15.37\240\240)2 C(/*~SideEffectOK*/)WB 61 Sn(
)139 1 TN()EA()BN}if
2 NH le{140(15.38\240\240)2 C(/*~SizeOfMemBlk*/)WB 62 Sn(
)140 1 TN()EA()BN}if
2 NH le{141(15.39\240\240)2 C(/*~SizeOK*/)WB 63 Sn(
)141 1 TN()EA()BN}if
2 NH le{142(15.40\240\240)2 C(/*~TypeCombination)WB 64 Sn( <combList>*/
)142 1 TN()EA()BN}if
2 NH le{143(15.41\240\240)2 C(/*~Undef)WB 65 Sn( <listIdent>*/
=head2 /*~UndefTag <listIdent>*/
)143 1 TN()EA()BN}if
2 NH le{144(15.42\240\240)2 C(/*~Utility*/)WB 66 Sn(
)144 1 TN()EA()BN}if
2 NH le{145(15.43\240\240)2 C(/*~VoidToOther*/)WB 67 Sn(
)145 1 TN()EA()BN}if
2 NH le{146(15.44\240\240)2 C(/*~Warn*/)WB 68 Sn(
)146 1 TN()EA()BN}if
2 NH le{147(15.45\240\240)2 C(/*~zif)WB 69 Sn( <boolExp> <stringCst> */
)147 1 TN()EA()BN}if
2 NH le{148(15.46\240\240)2 C(Notes)WB 70 Sn(
)148 1 TN()EA()BN}if
1 NH le{149(16\240\240)1 C(-)WB 71 Sn( 9 - Indentation rules
)149 1 TN()EA()BN}if
1 NH le{150(17\240\240)1 C(-)WB 74 Sn( 10 - Options
)150 1 TN()EA()BN}if
1 NH le{151(18\240\240)1 C(-)WB 75 Sn( 11 - Environment variables
)151 1 TN()EA()BN}if
1 NH le{152(19\240\240)1 C(-)WB 76 Sn( 12 - Exit statuses
)152 1 TN()EA()BN}if
1 NH le{153(20\240\240)1 C(-)WB 77 Sn( 13 - Badly implemented features
)153 1 TN()EA()BN}if
1 NH le{154(21\240\240)1 C(-)WB 78 Sn( 14 - Unimplemented features
)154 1 TN()EA()BN}if
1 NH le{155(22\240\240)1 C(-)WB 79 Sn( 15 - Known bugs
)155 1 TN()EA()BN}if
1 NH le{156(23\240\240)1 C(-)WB 80 Sn( 16 - Main changes with respect to version 2.6
)156 1 TN()EA()BN}if
1 NH le{157(24\240\240)1 C(-)WB 81 Sn( 17 - About 16 bits int platforms
)157 1 TN()EA()BN}if

/TE t D NP TU PM 0 eq and{/Pn () D showpage}if end restore
