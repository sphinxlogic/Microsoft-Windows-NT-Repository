%!PS-Adobe-3.0
%%Title: (DisciplinedC)
%%Creator: (Microsoft Word: LaserWriter 8 F1-8.3.4)
%%CreationDate: (12:11 lundi 19 f\216vrier 2001)
%%For: (YN)
%%Pages: 10
%%DocumentFonts: Times-Bold Times-Roman Symbol Times-Italic Courier Courier-Bold
%%DocumentNeededFonts: Times-Bold Times-Roman Symbol Times-Italic Courier Courier-Bold
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%%DocumentMedia: Default 595 842 0 () ()
%ADO_ImageableArea: 29 31 566 811
%%EndComments
userdict begin/dscInfo 5 dict dup begin
/Title(DisciplinedC)def
/Creator(Microsoft Word: LaserWriter 8 F1-8.3.4)def
/CreationDate(12:11 lundi 19 f\216vrier 2001)def
/For(YN)def
/Pages 10 def
end def end
/md 205 dict def md begin/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 83 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F1/setgray ld
/:F/setrgbcolor ld
/:F4/setcmykcolor where
{
pop
/setcmykcolor ld
}{
{
3
{
dup
3 -1 roll add
dup 1 gt{pop 1}if
1 exch sub
4 1 roll
}repeat
pop
setrgbcolor
}bd
}ifelse
/:Fx
{
counttomark
{0{G}0{:F}{:F4}}
exch get
exec
pop
}bd
/:rg{/DeviceRGB :ss}bd
/:sc{$cs :ss}bd
/:dc{/$cs xdf}bd
/:sgl{}def
/:dr{}bd
/:fCRD{pop}bd
/:ckcs{}bd
/:ss{/$c xdf}bd
/$cs Z
%%EndFile
%%BeginFile: adobe_psp_uniform_graphics
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
%%BeginFile: adobe_psp_derived_styles
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/wi
version(23.0)eq
{
{
gS 0 0 0 0 rC stringwidth gR
}bind
}{
/stringwidth load
}ifelse
def
/$o 1. def
/gl{$o G}bd
/ms{:M S}bd
/condensedmtx[.82 0 0 1 0 0]def
/:mc
{
condensedmtx :mf def
}bd
/extendedmtx[1.18 0 0 1 0 0]def
/:me
{
extendedmtx :mf def
}bd
/basefont Z
/basefonto Z
/dxa Z
/dxb Z
/dxc Z
/dxd Z
/dsdx2 Z
/bfproc Z
/:fbase
{
dup/FontType get 0 eq{
dup length dict begin
dup{1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse}forall
/FDepVector exch/FDepVector get[exch/:fbase load forall]def
}/bfproc load ifelse
/customfont currentdict end definefont
}bd
/:mo
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
basefont setfont
( )dup 0 4 -1 roll put
dup wi
setcharwidth
0 0 :M
gS
gl
dup show
gR
basefonto setfont
show
end
}def
}store :fbase
}bd
/:mso
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxa 1 ps div def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxa add exch
}if
setcharwidth
dup 0 0 ms
dup dxa 0 ms
dup dxa dxa ms
dup 0 dxa ms
gl
dxa 2. div dup ms
end
end
}def
}store :fbase
}bd
/:ms
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxb .05 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dxb add
}if
exch setcharwidth
dup dxb .01 add 0 ms
0 dxb :T
gS
gl
dup 0 0 ms
gR
basefonto setfont
0 0 ms
end
end
}def
}store :fbase
}bd
/:mss
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxc 1 ps div def
/dsdx2 .05 dxc 2 div add def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dsdx2 add
}if
exch setcharwidth
dup dsdx2 .01 add 0 ms
0 .05 dxc 2 div sub :T
dup 0 0 ms
dup dxc 0 ms
dup dxc dxc ms
dup 0 dxc ms
gl
dxc 2 div dup ms
end
end
}def
}store :fbase
}bd
/:msb
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxd .03 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxd add exch
}if
setcharwidth
dup 0 0 ms
dup dxd 0 ms
dup dxd dxd ms
0 dxd ms
end
end
}def
}store :fbase
}bd
/italicmtx[1 0 -.212557 1 0 0]def
/:mi
{
italicmtx :mf def
}bd
/:v
{
[exch dup/FontMatrix get exch
dup/FontInfo known
{
/FontInfo get
dup/UnderlinePosition known
{
dup/UnderlinePosition get
2 index 0
3 1 roll
transform
exch pop
}{
.1
}ifelse
3 1 roll
dup/UnderlineThickness known
{
/UnderlineThickness get
exch 0 3 1 roll
transform
exch pop
abs
}{
pop pop .067
}ifelse
}{
pop pop .1 .067
}ifelse
]
}bd
/$t Z
/$p Z
/$s Z
/:p
{
aload pop
2 index mul/$t xs
1 index mul/$p xs
.012 mul/$s xs
}bd
/:m
{gS
0 $p rm
$t lw
0 rl stroke
gR
}bd
/:n
{
gS
0 $p rm
$t lw
0 rl
gS
gl
stroke
gR
strokepath
$s lw
/setstrokeadjust where{pop
currentstrokeadjust true setstrokeadjust stroke setstrokeadjust
}{
stroke
}ifelse
gR
}bd
/:o
{gS
0 $p rm
$t 2 div dup rm
$t lw
dup 0 rl
stroke
gR
:n
}bd
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if end
%%EndProlog
%%BeginSetup
md begin
countdictstack[{
%%BeginFeature: *Duplex None
1 dict dup /Duplex false put setpagedevice
%%EndFeature
}featurecleanup
countdictstack[{
%%BeginFeature: *PageSize A4Small

 << /Policies << /PageSize 2 >> /PageSize [595 842] /ImagingBBox [25 25 591 836] >> setpagedevice
%%EndFeature
}featurecleanup
(YN)setjob
/mT[1 0 0 -1 29 811]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Roman
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Courier
%%IncludeFont: Courier-Bold
/f0_1/Times-Bold
:mre
/f0_14 f0_1 14 scf
/f0_10 f0_1 10 scf
/f1_1/Times-Roman
:mre
/f1_12 f1_1 12 scf
/f1_10 f1_1 10 scf
/f1_9 f1_1 9 scf
/f1_8 f1_1 8 scf
/f2_1/Symbol
:bsr
240/apple pd
:esr
/f2_10 f2_1 10 scf
/f2_9 f2_1 9 scf
/f3_1/Times-Italic
:mre
/f3_12 f3_1 12 scf
/f3_10 f3_1 10 scf
/f4_1 f2_1
:mi
/f4_10 f4_1 10 scf
/f5_1 f1_1
:v def
/f6_1 f2_1
:v def
/f7_1/Courier
:mre
/f7_10 f7_1 10 scf
/f7_9 f7_1 9 scf
/f8_1/Courier-Bold
:mre
/f8_9 f8_1 9 scf
/f9_1 f7_1
:v def
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(YN; page: 1 of 10)setjob
%%EndPageSetup
gS 0 0 537 780 rC
192 59 :M
f0_14 sf
4.312 .431(Disciplined C \(version 2.7\))J
244 83 :M
f1_12 sf
-.069(Yves L. Noyelle)A
86 107 :M
f3_12 sf
-.101(\203cole Sup\216rieure d'\203lectricit\216, Plateau de Moulon, 91192 Gif/Yvette Cedex, France)A
203 119 :M
f1_12 sf
-.099(E-Mail: Yves.Noyelle@supelec.fr)A
31 159 :M
f0_10 sf
.543(Abstract)A
31 174 :M
f1_10 sf
.994 .099(Some proposals to render the C language a truly high)J
31 184 :M
2.037 .204(level language are presented, as well as a program)J
31 194 :M
1.668 .167(verifying that a given C program conforms to those)J
31 204 :M
.02(proposals.)A
31 234 :M
f0_10 sf
.506(Introduction)A
31 249 :M
f1_10 sf
.37 .037(Programming is, as every practitioner knows, a delicate)J
31 259 :M
.536 .054(art, where the main problem is not so much to obtain a)J
31 269 :M
.116 .012("working" program \(which is mandatory, of course\), but)J
31 279 :M
.764 .076(to have designed it in such a way that it is not fragile,)J
31 289 :M
3.162 .316(i.e. it can be modified/updated/debugged without)J
31 299 :M
.822 .082(breaking down. This means, for example, no \(manual\))J
31 309 :M
.229 .023(duplication of code or "parallel" data \(because, should a)J
31 319 :M
3.948 .395(modification occur, the odds are high that the)J
31 329 :M
.93 .093(duplicate\(s\) will not be modified\), or, more generally,)J
31 339 :M
1.464 .146(that the programmer has dumped in the program the)J
31 349 :M
1.124 .112(constraints set when he wrote it, so that they become)J
31 359 :M
-.115(apparent.)A
31 374 :M
.695 .069(In order to attain these goals, programmers need tools.)J
31 384 :M
.621 .062(These tools should be as easy as possible to use, while)J
31 394 :M
.733 .073(not hampering creativity. "Easy to use" means that the)J
31 404 :M
.665 .067(tool is explainable \(so its use is systematic\), natural \(it)J
31 414 :M
1.33 .133(does not disturb common sense\), and recognizes that)J
31 424 :M
.399 .04(human nature is fallible \(so it protects "gently" the user)J
31 434 :M
.138 .014(against himself\).)J
31 449 :M
.164 .016(Among the tools that allow a programmer to express his)J
31 459 :M
.304 .03(ideas are of course the programming languages, and the)J
31 469 :M
1.147 .115(compilers that go along, with their warning and error)J
31 479 :M
.007(mechanisms.)A
31 494 :M
.116 .012(One programming language much used these days is the)J
31 504 :M
.016 .002(\(ANSI\) C language, probably for the following reasons:)J
31 519 :M
(-)S
40 519 :M
.184 .018(it naturally supports modularity,)J
31 534 :M
(-)S
40 534 :M
1.085 .108(being very close to the architecture of most current)J
40 544 :M
-.02(computers, it can express a wide range of applications;)A
40 554 :M
2.312 .231(in fact, it is often called "the portable assembly)J
40 564 :M
-.075(language",)A
31 579 :M
(-)S
40 579 :M
1.45 .145(it offers many representations for the integer type,)J
40 589 :M
2.733 .273(which permits the best possible use of a given)J
40 599 :M
-.336(hardware,)A
31 614 :M
(-)S
40 614 :M
.607 .061(it offers a powerful macro mechanism, which can be)J
40 624 :M
-.061(used to prevent manual code duplication,)A
31 639 :M
(-)S
40 639 :M
.394 .039(the 'include' facility also works in the same direction,)J
40 649 :M
-.021(and allows some encapsulation of modules,)A
31 664 :M
(-)S
40 664 :M
.833 .083(the block concept makes it possible to minimize the)J
40 674 :M
1.693 .169(scope of identifiers \(which is always desirable, to)J
40 684 :M
-.082(prevent overflowing the reader's mind\),)A
31 699 :M
(-)S
40 699 :M
1.768 .177(it comes with a large set of predefined functions,)J
40 709 :M
1.852 .185(allowing the user to easily implement exceptions,)J
40 719 :M
1.547 .155(dynamic memory allocation, and so on; moreover,)J
40 729 :M
1.851 .185(many system interfaces, such as X-Window's, are)J
40 739 :M
.158 .016(meant to be used via C,)J
278 159 :M
(-)S
287 159 :M
1.028 .103(it is quite portable, along with its run time support;)J
287 169 :M
3.006 .301(besides, the conditional compilation mechanism)J
287 179 :M
3.912 .391(permits easy adaptation of programs to local)J
287 189 :M
-.016(conditions.)A
278 204 :M
.218 .022(But the usual C compiler \(or its fellow companion 'lint'\))J
278 214 :M
.21 .021(lacks most of the devices that allow a program not to be)J
278 224 :M
.492 .049(too brittle \(for example, to check that an array is of the)J
278 234 :M
2.159 .216(same size as an enum used to name its elements\);)J
278 244 :M
.601 .06(besides it is much too tolerant, even allowing things to)J
278 254 :M
.968 .097(work "by miracle" [MOD 91]. This is a pure disaster,)J
278 264 :M
1.309 .131(because it gives programmers reasons to use obscure)J
278 274 :M
.262 .026(tricks, with the sole justification that "it works"! \(on the)J
278 284 :M
.217 .022(local compiler, of course...\).)J
278 299 :M
.798 .08(C also is very tolerant, permitting programmers to fall)J
278 309 :M
1.04 .104(into various well-concealed traps, such as: ")J
f7_9 sf
.902 .09(if \(a =)J
278 319 :M
.236(b\)...)A
f1_10 sf
.541 .054(" \(instead of ")J
f7_9 sf
.787 .079(if \(a == b\)...")J
f1_10 sf
.211 .021(\),   ")J
f7_9 sf
.236(a[i,j])A
f1_10 sf
(")S
278 329 :M
.355 .035(\(instead of ")J
f7_9 sf
.129(a[i][j])A
f1_10 sf
.139 .014("\),   ")J
f7_9 sf
.541 .054(if \(array1 == array2\))J
278 339 :M
.526(...)A
f7_10 sf
.974 .097(" )J
f1_10 sf
1.176 .118(\(alas, it won't compare arrays !\),   or ... \(long)J
278 349 :M
.19(list\).)A
278 364 :M
.354 .035(But, on the positive side, this tolerance, well harnessed,)J
278 374 :M
-.002(can be turned into a great advantage; in other words, it is)A
278 384 :M
.181 .018(easy for C to be constrained into a disciplined language,)J
278 394 :M
.617 .062(with clean concepts, offering much syntactic and static)J
278 404 :M
.443 .044(semantic guidance to the programmer, and inciting him)J
278 414 :M
.428 .043(to dump in the code, rather naturally, the constraints he)J
278 424 :M
1.228 .123(obeyed while writing it, all of which without loosing)J
278 434 :M
.647 .065(any efficiency. The purpose of this paper is to propose)J
278 444 :M
-.025(such a "harness".)A
278 459 :M
.132 .013(This harness is mainly designed to allow strong naming,)J
278 469 :M
1.401 .14(strong typing \(especially between compilation units\),)J
278 479 :M
2.003 .2(well defined types, name equivalence for all types,)J
278 489 :M
-.032(reasonable automatic conversion rules, easy to use arrays)A
278 499 :M
.456 .046(\(even dynamically allocated ones\), limited use of casts,)J
278 509 :M
1.359 .136(enhanced structuration, encapsulation and portability,)J
278 519 :M
.466 .047(and removal of most pitfalls... It has been implemented)J
278 529 :M
1.393 .139(as a C checker program, called "dcc" \(Disciplined C)J
278 539 :M
-.143(Checker\).)A
278 554 :M
.161 .016(The following gets into greater detail; it assumes a good)J
278 564 :M
.75 .075(knowledge of C, but, beware, may come as a shock to)J
278 574 :M
-.071(seasoned C programmers.)A
278 599 :M
f0_10 sf
2.604 .26(Areas where C can be disciplined)J
278 614 :M
f1_10 sf
10 f5_1 :p
29 :m
.023(Typing)A
278 629 :M
1.447 .145(C offers a wealth of primitive types, plus very good)J
278 639 :M
1.617 .162(means to create new types. But it lacks the boolean)J
278 649 :M
.642 .064(type, and more generally allows a complete mixture of)J
278 659 :M
1.55 .155(all scalar types \(including characters and pointers\312!\),)J
278 669 :M
.853 .085(with little concern for information loss. Also, the type)J
278 679 :M
.086 .009(equivalence mechanism for arithmetic types is structural)J
278 689 :M
.259 .026(equivalence, which does not make it possible to enforce)J
278 699 :M
4.182 .418(the distinction between "information" type and)J
278 709 :M
-.038("representation" type \(see later, "parallel types"\).)A
278 724 :M
.154 .015(To remedy this, Disciplined C sets the following:)J
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(YN; page: 2 of 10)setjob
%%EndPageSetup
-29 -31 :T
gS 29 31 537 780 rC
294 804 :M
f1_10 sf
(2)S
60 79 :M
(-)S
69 79 :M
1.921 .192('char' \()J
10 f5_1 :p
128.005 :m
3.065 .306(without signedness specifier)J
1.565 .156(\) is a specific)J
69 89 :M
2.116 .212(character type, whose constants are the character)J
69 99 :M
1.863 .186(constants of C; this type is a closed type, not an)J
69 109 :M
2.027 .203(arithmetic type, which means that the \(in\)famous)J
69 119 :M
-.023(idiom:)A
69 134 :M
f7_9 sf
-.367(int)A
f8_9 sf
-.367( )A
f7_9 sf
-.381(c;  /* notice the 'int' ! */)A
69 144 :M
-.409(while \(\( c = getchar\(\) \) !=  EOF\) {...})A
69 159 :M
f1_10 sf
-.026(is to be replaced by:)A
69 174 :M
f7_9 sf
-.256(char)A
f8_9 sf
-.256( )A
f7_9 sf
-.512(c;)A
69 184 :M
-.408(while \(c = getc\(stdin\), !feof\(stdin\)\) {...})A
69 199 :M
f1_10 sf
-.041(or, if errors can occurs:)A
69 214 :M
f7_9 sf
-.409(while \(c = getc\(stdin\), !feof\(stdin\) &&)A
165 224 :M
-.416(   !ferror\(stdin\)\) {...})A
69 239 :M
f1_10 sf
.022 .002(A 'char' constant must contain just one character,)J
60 254 :M
(-)S
69 254 :M
.173 .017(integral types are: \(un\)signed char, \(\(un\)signed\) short,)J
69 264 :M
1.074 .107(\(\(un\)signed\) int, \(\(un\)signed\) long; combinations of)J
69 274 :M
1.747 .175('signed' and 'unsigned' varieties that could lead to)J
69 284 :M
.038 .004(information loss or "unexpected" results \([K&R 88] p.)J
69 294 :M
.531 .053(198\) are pointed out. Besides, an attempt to compare)J
69 304 :M
1.493 .149(differences of 'unsigned' via relational operators is)J
69 314 :M
2.412 .241(flagged, because the underlying C compiler will)J
69 324 :M
-.015(generate an unsigned branch in such a case, fact which)A
69 334 :M
.998 .1(may not be obvious to all programmers. Consider a)J
69 344 :M
2.897 .29(graphic application where point coordinates are)J
69 354 :M
-.063(represented as unsigned; then )A
f7_9 sf
-.084(xPoint2 - xPoint1)A
f1_10 sf
-.071( is)A
69 364 :M
1.647 .165(still an unsigned \(from the underlying C compiler)J
69 374 :M
2.785 .279(point of view\), which means that )J
f7_9 sf
5.213 .521(xPoint2 -)J
69 384 :M
1.254 .125(xPoint1 > -1)J
f1_10 sf
.744 .074( will always be false ! It is strongly)J
69 394 :M
.17 .017(recommended to '#define' a "byte/ubyte" synonym for)J
69 404 :M
-.082('signed/unsigned char',)A
60 419 :M
(-)S
69 419 :M
.127 .013(floating types: no change,)J
60 434 :M
(-)S
69 434 :M
.526 .053(a boolean type is introduced, that is to be the type of)J
69 444 :M
.832 .083(the \(first\) argument\(s\) of 'if', 'while', '?:', '||', '&&' or)J
69 454 :M
.238 .024('!' operators, and the type of the second argument of a)J
69 464 :M
-.001('for' operator. It has to be defined by the following:)A
69 479 :M
f7_9 sf
-.415(typedef unsigned int bool;)A
69 494 :M
f1_10 sf
.55 .055(Relational and equality operators, as well as '||', '&&')J
69 504 :M
2.473 .247(and '!', yield a result of type 'bool'.  '&', '|', '^')J
69 514 :M
.664 .066(operators yield a result that can be used generally as)J
69 524 :M
.691 .069('bool', but , since its value is not guaranteed to be in)J
69 534 :M
.894 .089(the [0, 1] interval, a check is performed  to warn in)J
69 544 :M
1.503 .15(case of possible strange result \(e.g.:  )J
f7_9 sf
3.026 .303(if \(\(feof)J
69 554 :M
-.361(\(stdin\) & fclose\(stdin\)\) == TRUE\))A
f1_10 sf
-.279( \).)A
69 569 :M
.333 .033(The constants 'TRUE' and 'FALSE' \(which may carry)J
69 579 :M
.907 .091(any other name suitable to the programmer, such as)J
69 589 :M
1.008 .101(VRAI and FAUX\) are defined via constant boolean)J
69 599 :M
-.019(expressions, for example:)A
69 614 :M
f7_9 sf
-.419(# define TRUE  \(0==0\))A
69 624 :M
-.419(# define FALSE \(0!=0\))A
69 639 :M
f1_10 sf
.363 .036(Besides eliminating bad programming practices, such)J
69 649 :M
-.044(as \(excerpt from 'strcpy'\):)A
69 664 :M
f7_9 sf
-.399(while \()A
0 1 rm
-.399(*)A
0 -1 rm
-.399(s++ = )A
0 1 rm
-.399(*)A
0 -1 rm
-.498(t++\);)A
69 674 :M
f1_10 sf
-.186(\(instead of    )A
f7_9 sf
-.287(while \(\()A
0 1 rm
-.287(*)A
0 -1 rm
-.287(s++ = )A
0 1 rm
-.287(*)A
0 -1 rm
-.287(t++\) != '\\0'\);)A
f1_9 sf
-.279( \))A
69 689 :M
f1_10 sf
.234 .023(a side effect of the introduction of this type is that the)J
69 699 :M
-.255(standard error:)A
69 714 :M
f7_9 sf
-.189(if \(y = 0\)...)A
f1_10 sf
-.112(      \(instead of    )A
f7_9 sf
-.189(if \(y == 0\)...)A
f1_10 sf
<29>S
69 729 :M
.295 .029(is flagged by a "Boolean expected" warning \(warning)J
69 739 :M
(also for:)S
69 754 :M
f7_9 sf
-.239(if \(setOfBits & mask == Msk1\)... , )A
f1_10 sf
-.193(instead of)A
95 764 :M
-.156(   )A
f7_9 sf
-.337(if \(\(setOfBits & mask\) == Msk1\)... )A
f1_9 sf
<29>S
316 79 :M
f1_10 sf
.166 .017(Explicit comparison to zero is less cryptic, and entails)J
316 89 :M
1.054 .105(no loss of efficiency, the compiler testing against 0)J
316 99 :M
-.099(anyway,)A
307 114 :M
(-)S
316 114 :M
1.55 .155('enum' types are closed, i. e. they are not mixable)J
316 124 :M
.655 .065(between them, nor with arithmetic types \(in fact, the)J
316 134 :M
.766 .077('char' type seen previously is considered as an enum)J
316 144 :M
.193 .019(type\). However, some amount of mixing is allowed: a)J
316 154 :M
1.361 .136(\(signed\) int can be added to or subtracted from an)J
316 164 :M
1.5 .15(enum, yielding an enum of the same kind. This is)J
316 174 :M
-.039(because the notion of distance \(difference of represent-)A
316 184 :M
.436 .044(ing values\) between two enum or char is often useful)J
316 194 :M
1.099 .11(\(for example, '9' - '0'\), so subtracting two enum \(of)J
316 204 :M
-.002(the same kind\) is allowed, and yields an 'int'.)A
316 219 :M
.398 .04(Enum constants can be initialized by signed 'int'. The)J
316 229 :M
.17 .017(constants of a given enum must have differing values,)J
316 239 :M
.584 .058(except if the /)J
0 2 rm
.24(*)A
0 -2 rm
0 -2 rm
.26(~)A
0 2 rm
.246(SameValue)A
0 2 rm
.24(*)A
0 -2 rm
.711 .071(/ d-pragma is used \("d-)J
316 249 :M
-.086(pragmas" will be described later\).)A
316 264 :M
2.724 .272(The only operations allowed on enums, besides)J
316 274 :M
1.248 .125(comparison, assignment and addition/subtraction of)J
316 284 :M
1.106 .111(distance, are '&', '|', '^', '~', '>>', '<<'; so enums can)J
316 294 :M
1.067 .107(be used as sets of bits, but not \(in the absence of a)J
316 304 :M
(/)S
0 2 rm
(*)S
0 -2 rm
0 -2 rm
(~)S
0 2 rm
.035(TypeCombination)A
0 2 rm
(*)S
0 -2 rm
.126 .013(/ d-pragma telling the contrary\))J
316 314 :M
-.01(as arithmetic quantities,)A
307 329 :M
(-)S
316 329 :M
.787 .079(a major innovation of Disciplined C is the notion of)J
316 339 :M
2.209 .221("parallel type", that allows a distinction between)J
316 349 :M
3.696 .37(information type and representation type. The)J
316 359 :M
.038(following:)A
316 374 :M
f7_9 sf
-.414(typedef  int  Tindex, Tval;)A
316 384 :M
-.413(typedef  Tindex  Trow, Tcol;)A
316 399 :M
f1_10 sf
1.153 .115(creates four )J
31.709 :m
.283(distinct)A
1.046 .105( types, but which all accept the)J
316 409 :M
2.925 .293(same operations and the same constants as the)J
316 419 :M
.634 .063("representation" type \('int' here\). Tindex, Tval, Trow)J
316 429 :M
-.023(and Tcol are examples of "information" types, because)A
316 439 :M
3.713 .371(they convey an idea of the semantics of the)J
316 449 :M
.464 .046(corresponding objects. For example, they may be put)J
316 459 :M
.356 .036(to use in a checkers playing program: Tval will name)J
316 469 :M
.004 0('int's that represent values of checkers, Trow and Tcol,)J
316 479 :M
.571 .057('int's that represent row and column indexes, Tindex,)J
316 489 :M
-.077(generic type for indexes.)A
316 504 :M
.15 .015(Tindex, Tval, Trow and Tcol are called parallel types;)J
316 514 :M
.231 .023(in fact, a type T1 is said to be )J
30.686 :m
.089(parallel)A
.224 .022( to a type T2 iff)J
316 524 :M
.655 .065(both are defined through a chain of typedefs starting)J
316 534 :M
3.181 .318(from the same 'baseType', with no intervening)J
316 544 :M
1.184 .118(qualifier nor modifier \(pointer/array/function decla-)J
316 554 :M
.219 .022(rator, see grammar in Appendix A\). In other words, T)J
316 564 :M
.123 .012(and T2 must be strict synonyms of baseType.)J
316 579 :M
1.012 .101(Other typedefs do not introduce parallel types; they)J
316 589 :M
3.685 .368(just name qualified/modified variations of the)J
316 599 :M
-.102(baseType.)A
316 614 :M
2.038 .204(The )J
88.42 :m
4.162 .416(representation type)J
1.745 .175( of a parallel type is the)J
316 624 :M
.356 .036(possibly qualified or modified nativeType associated,)J
316 634 :M
.214 .021(using traditional C rules, to its type identifier.)J
316 649 :M
.54 .054(Cascaded synonymous typedefs create a hierarchy of)J
316 659 :M
1.163 .116(parallel types, hierarchy used to set a compatibility)J
316 669 :M
.406 .041(rule, and to find the result type of an operator. Let us)J
316 679 :M
.721 .072(define that a type T1 is "higher" than a parallel type)J
316 689 :M
.973 .097(T2 if T1 is T2 or any ancestor of T2 \(including the)J
316 699 :M
.701 .07(representation type\), that is, T1 has been used in the)J
316 709 :M
2.646 .265(chain of typedefs needed to define T2 from its)J
316 719 :M
1.454 .145(representation type. For example, Tindex is higher)J
316 729 :M
.68 .068(than Trow, but not than Tval, and Tval is not higher)J
316 739 :M
.928 .093(than Tindex or Trow. If a parallel type meets a non)J
316 749 :M
.69 .069(parallel type compatible with its representation type,)J
316 759 :M
2.566 .257(the wider representation type is the higher type)J
316 769 :M
1.444 .144(\(unsigned varieties are considered wider than their)J
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(YN; page: 3 of 10)setjob
%%EndPageSetup
-29 -31 :T
gS 29 31 537 780 rC
294 804 :M
f1_10 sf
(3)S
69 74 :M
.126 .013(signed counterpart; numeric constants are supposed to)J
69 84 :M
.07 .007(have the narrowest representation type possible, in the)J
69 94 :M
-.063(same variety if they are signed or U-suffixed\).)A
69 109 :M
2.469 .247(Then the compatibility rule is the following: an)J
69 119 :M
.806 .081(operator \(except shift operators, whose operands are)J
69 129 :M
-.01(deconnected\) can only combine operands such that the)A
69 139 :M
.79 .079(type of one operand is higher than all other operand)J
69 149 :M
.451 .045(types; for operators other than relational and equality)J
69 159 :M
2.03 .203(operators, the result type is this higher type. For)J
69 169 :M
.4 .04(assignments, the higher type has to be the type of the)J
69 179 :M
5.144 .514(left operand. For functions, see below the)J
69 189 :M
(/)S
0 2 rm
-.062(*)A
0 -2 rm
0 -2 rm
-.067(~)A
0 2 rm
-.057(ResultType)A
0 2 rm
-.062(*)A
0 -2 rm
-.057(/ d-pragma.)A
69 204 :M
.521 .052(Since these rules do not facilitate arbitrary mixing of)J
69 214 :M
.57 .057(types, the /)J
0 2 rm
.209(*)A
0 -2 rm
0 -2 rm
.226(~)A
0 2 rm
.203(TypeCombination)A
0 2 rm
.209(*)A
0 -2 rm
.661 .066(/ d-pragma tells the)J
69 224 :M
.918 .092(allowed combinations of types \(e.g. Ohm )J
0 2 rm
.342 .034(* )J
0 -2 rm
1.147 .115(Amp ->)J
69 234 :M
1.143 .114(Volt\). Besides, there is a notion of 'coefficient', for)J
69 244 :M
2.718 .272(multiplication, division, modulo, whereby if the)J
69 254 :M
1.2 .12(coefficient is of representation type, then the result)J
69 264 :M
.308 .031(type is the type of the other operand. Also, a constant)J
69 274 :M
.185 .018(of representation type meeting a parallel type behaves)J
69 284 :M
.285 .029(as if it was of that type.)J
69 299 :M
1.111 .111(The special rules that apply to enums also apply to)J
69 309 :M
-.155(their descendants.)A
69 324 :M
.099 .01(The /)J
0 2 rm
(*)S
0 -2 rm
0 -2 rm
(~)S
0 2 rm
.036(RootType)A
0 2 rm
(*)S
0 -2 rm
.118 .012(/ d-pragma isolates the so qualified)J
69 334 :M
2.086 .209(type from its ancestors \(renders incompatible the)J
69 344 :M
.763 .076(subtree headed by that type, that is, 'closes' it\); also,)J
69 354 :M
1.501 .15(the constants of such a "root" type are compatible)J
69 364 :M
-.069(with all its \(non-closed\) descendants.)A
69 379 :M
-.009(Let us consider the following example:)A
69 394 :M
f7_9 sf
-.419(typedef int Ti1, Ti2;)A
69 404 :M
-.409(typedef Ti2 Ti21r /*~RootType*/, Ti22;)A
69 414 :M
-.478(int i;)A
69 424 :M
-.41(Ti1 i1; Ti2 i2; Ti22 i22; Ti21r i21r;)A
69 444 :M
-.465(i1 = 0;)A
165 444 :M
-.456(/* OK */)A
69 454 :M
-.456(i1 = i2;)A
165 454 :M
-.439(/* Wrong */)A
69 464 :M
-.465(i1 = i;)A
165 464 :M
-.439(/* Wrong */)A
69 474 :M
-.465(i = i1;)A
165 474 :M
-.456(/* OK */)A
69 484 :M
-.456(i22 = 0;)A
165 484 :M
-.456(/* OK */)A
69 494 :M
-.432(i2 = \(Ti22\)0;)A
165 494 :M
-.456(/* OK */)A
69 504 :M
-.429(i22 += \(Ti2\)1;)A
165 504 :M
-.439(/* Wrong */)A
69 514 :M
-.456(i = i22;)A
165 514 :M
-.456(/* OK */)A
69 524 :M
-.449(i21r = 0;)A
165 524 :M
-.439(/* Wrong */)A
69 534 :M
-.425(i21r = \(Ti21r\)0;)A
165 534 :M
-.456(/* OK */)A
69 544 :M
-.443(i2 = i21r;)A
165 544 :M
-.439(/* Wrong */)A
69 574 :M
f1_10 sf
-.023(\(the created hierarchy is\312:)A
148 582 12 12 rC
149 591 :M
(int)S
gR
gS 118 597 15 12 rC
119 606 :M
f1_10 sf
(Ti1)S
gR
gS 177 597 15 12 rC
178 606 :M
f1_10 sf
(Ti2)S
gR
gS 208 613 20 12 rC
209 622 :M
f1_10 sf
(Ti22)S
gR
gS 133 613 69 12 rC
134 622 :M
f1_10 sf
(Ti21r \(root type\))S
gR
gS 117 581 112 45 rC
-1 -1 128 598 1 1 152 594 @b
158 595 -1 1 184 597 1 158 594 @a
189 610 -1 1 215 612 1 189 609 @a
-1 -1 159 613 1 1 183 609 @b
gR
gS 29 31 537 780 rC
69 640 :M
f1_10 sf
<29>S
69 655 :M
2.473 .247(To ease up things, 'int' constants can be added/)J
69 665 :M
2.781 .278(subtracted uncasted to/from \(numeric\) root type)J
69 675 :M
.032(constants.)A
69 690 :M
2.569 .257(In short, the parallel type facility enables name)J
69 700 :M
.625 .063(equivalence instead of structural equivalence for any)J
69 710 :M
2.867 .287(type in C, and so fosters programmers to give)J
69 720 :M
.818 .082(differing names to the types of their different object)J
69 730 :M
-.037(classes.)A
307 79 :M
10 f5_1 :p
26 :m
-.24(Arrays)A
307 94 :M
-.068(Arrays are a common data structure, easily understood by)A
307 104 :M
3.115 .311(most programmers because of their mathematical)J
307 114 :M
-.17(background.)A
307 129 :M
.594 .059(But in C, arrays, especially dynamically defined arrays)J
307 139 :M
1.091 .109(\(by way of 'malloc'\), are very difficult to use without)J
307 149 :M
.383 .038(coming across the notion of pointers, an awful prospect)J
307 159 :M
1.779 .178(for many naive users. So, with the help of a set of)J
307 169 :M
.117 .012(macros \(predefined in a header file called "dynarray.h"\),)J
307 179 :M
.507 .051(Disciplined C makes it possible to use any array \(static)J
307 189 :M
1.452 .145(or dynamic\) without ever having to use pointers \(cf.)J
307 199 :M
-.13(Appendix B\).)A
307 214 :M
1.185 .118(On the other hand, the array concept being natural, a)J
307 224 :M
-.051(pointer can always be used as an array name.)A
307 239 :M
1.4 .14(There is no automatic conversion from an array to a)J
307 249 :M
.214 .021(pointer to its first element \(except for string literals, and)J
307 259 :M
1.034 .103(for function parameter passing: simulation of call "by)J
307 269 :M
.739 .074(reference"\), and one has to explicitly use the construct)J
307 279 :M
.542("&array)A
0 -1 rm
.39([)A
0 1 rm
.326(i)A
0 -1 rm
.39(])A
0 1 rm
.478(")A
f2_10 sf
.266 .027( )J
f1_10 sf
1.279 .128(to get a pointer on the i)J
f1_8 sf
0 -2 rm
.365(th)A
0 2 rm
f1_10 sf
0 -3 rm
.266 .027( )J
0 3 rm
2.975 .298(element. One)J
307 289 :M
.309 .031(consequence is that the construction   )J
f7_9 sf
.486 .049(if \(array1 ==)J
307 299 :M
(array2\) ...)S
f1_10 sf
.01 .001(  is not accepted, so programmers will not)J
307 309 :M
-.086(believe that arrays can be compared.)A
307 324 :M
.583 .058(Another feature of Disciplined C is that, at each use of)J
307 334 :M
.429 .043(an array, the type of the index expression \(any integral,)J
307 344 :M
1.014 .101(enum or bool type\) is checked against the type of the)J
307 354 :M
3.987 .399(bound; this last type can be specified via the)J
307 364 :M
.078(/)A
0 2 rm
.141(*)A
0 -2 rm
0 -2 rm
.153(~)A
0 2 rm
.807 .081(IndexType <type>)J
0 2 rm
.141(*)A
0 -2 rm
.517 .052(/ d-pragma \(which overrides the)J
307 374 :M
.234 .023(type of the bound-giving expression, if present\). This d-)J
307 384 :M
1.142 .114(pragma may also be used for pointers, to cater to the)J
307 394 :M
-.1(case where they are used as dynamic array names.)A
307 409 :M
.631 .063(The value of a constant index expression is checked to)J
307 419 :M
.626 .063(be positive and less than the bound \(except if indexing)J
307 429 :M
-.019(pointer\).)A
307 444 :M
22 :m
.084(Casts)A
307 459 :M
1.366 .137(To encourage programmers to choose the right types)J
307 469 :M
.051 .005(from the outset, and to enhance program portability with)J
307 479 :M
.508 .051(respect to, for example, alignment problems, the use of)J
307 489 :M
-.029(casts is severely monitored:)A
307 504 :M
(-)S
316 504 :M
1.853 .185(any arithmetic/enum/bool type can be cast to any)J
316 514 :M
2.149 .215(other arithmetic/enum/bool type, but an overflow)J
316 524 :M
-.038(check is performed on constant expressions,)A
307 539 :M
(-)S
316 539 :M
1.34 .134(pointers: they can only be cast to other pointers; a)J
316 549 :M
1.415 .142(non 'void )J
0 2 rm
.536(*)A
0 -2 rm
1.373 .137(' pointer cannot be cast to a pointer on)J
316 559 :M
1.367 .137(higher alignment-requiring type, or to a pointer on)J
316 569 :M
(type whose internal layout is machine dependent; only)S
316 579 :M
.973 .097(the constant 0 may be cast to a pointer. Conversion)J
316 589 :M
.861 .086(from a 'void )J
0 2 rm
.363(*)A
0 -2 rm
1.126 .113(' pointer \(except NULL\) to any other)J
316 599 :M
.946 .095(pointer has to be documented either by a cast or by)J
316 609 :M
2.134 .213(using the /)J
0 2 rm
.794(*)A
0 -2 rm
0 -2 rm
.859(~)A
0 2 rm
.778(VoidToOther)A
0 2 rm
.794(*)A
0 -2 rm
.441(/)A
0 2 rm
.361 .036( )J
0 -2 rm
3.086 .309(d-pragma, this for)J
316 619 :M
.037 .004(example to prevent the following construct:)J
316 634 :M
f7_9 sf
-.399(void )A
0 1 rm
-.399(*)A
0 -1 rm
-.399(pv; struct{...} )A
0 1 rm
-.399(*)A
0 -1 rm
-.399(pst; float )A
0 1 rm
-.399(*)A
0 -1 rm
-.532(pfl;)A
316 644 :M
-.415( ... ; pst= pv = pfl; ...)A
316 659 :M
f1_10 sf
-.007(from going unnoticed.)A
316 674 :M
.719 .072(For generic "creator" functions, such as 'malloc', see)J
316 684 :M
2.655 .266(below the /)J
0 2 rm
.926(*)A
0 -2 rm
0 -2 rm
1.002(~)A
0 2 rm
.837(Generic)A
0 2 rm
.926(*)A
0 -2 rm
3.294 .329(/ d-pragma; for generic)J
316 694 :M
1.296 .13("modifier" functions, such as 'memcpy' or 'realloc',)J
316 704 :M
-.031(see below the /)A
0 2 rm
(*)S
0 -2 rm
0 -2 rm
(~)S
0 2 rm
-.036(ResultType)A
0 2 rm
(*)S
0 -2 rm
-.036(/ d-pragma,)A
307 719 :M
(-)S
316 719 :M
.023 .002(arrays: they can't be cast to anything \(meaningless\),)J
307 734 :M
(-)S
316 734 :M
.312 .031(parallel types: they may be cast freely into each other)J
316 744 :M
.18 .018(\(but the /)J
0 2 rm
.075(*)A
0 -2 rm
0 -2 rm
.081(~)A
0 2 rm
.072(CastTo)A
0 2 rm
.075(*)A
0 -2 rm
.177 .018(/ d-pragma  is rather to be used in)J
316 754 :M
-.053(that case\).)A
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(YN; page: 4 of 10)setjob
%%EndPageSetup
-29 -31 :T
gS 29 31 537 780 rC
294 804 :M
f1_10 sf
(4)S
60 79 :M
2.147 .215(Casts not conforming to these rules, or to a lower)J
60 89 :M
1.201 .12(qualified pointer type, elicit a warning, which can be)J
60 99 :M
5.113 .511(avoided by using the /)J
0 2 rm
1.795(*)A
0 -2 rm
0 -2 rm
1.941(~)A
0 2 rm
1.794(OddCast)A
0 2 rm
1.795(*)A
0 -2 rm
3.765 .377(/ or the)J
60 109 :M
(/)S
0 2 rm
-.075(*)A
0 -2 rm
0 -2 rm
-.081(~)A
0 2 rm
-.074(PortableQM)A
0 2 rm
-.075(*)A
0 -2 rm
-.069(/ d-pragma.)A
60 124 :M
1.044 .104(Since the number of casts in a program can be put to)J
60 134 :M
.293 .029(use in a qualimetry tool, the needless use of them \(or of)J
60 144 :M
.266(/)A
0 2 rm
.479(*)A
0 -2 rm
0 -2 rm
.518(~)A
0 2 rm
.479(OddCast)A
0 2 rm
.479(*)A
0 -2 rm
.722 .072(/, /)J
0 2 rm
.479(*)A
0 -2 rm
0 -2 rm
.518(~)A
0 2 rm
.474(PortableQM)A
0 2 rm
.479(*)A
0 -2 rm
1.536 .154(/ d-pragmas\) is also)J
60 154 :M
-.212(flagged.)A
60 169 :M
10 f5_1 :p
40 :m
.07(Functions)A
60 184 :M
.184 .018(Non-void functions should normally return named types)J
60 194 :M
-.007(\(problem-related names\), and so make use of the parallel)A
60 204 :M
3.809 .381(types facility. Yet some functions are 'utilities')J
60 214 :M
.641 .064(functions, that is there is no meaningful name for their)J
60 224 :M
.439 .044(returned type \(e.g. 'strcmp'\). The /)J
0 2 rm
.139(*)A
0 -2 rm
0 -2 rm
.15(~)A
0 2 rm
.104(Utility)A
0 2 rm
.139(*)A
0 -2 rm
.637 .064(/ d-pragma)J
60 234 :M
.809 .081(signals this.)J
60 249 :M
.37 .037(Also, the parallel type mechanism uses inheritance, and)J
60 259 :M
.446 .045(sometimes subtyping is needed. So the /)J
0 2 rm
.138(*)A
0 -2 rm
0 -2 rm
.149(~)A
0 2 rm
.125(Generic)A
0 2 rm
.138(*)A
0 -2 rm
.289 .029(/ d-)J
60 269 :M
.58 .058(pragma tells that the result of a such qualified function)J
60 279 :M
.684 .068(is compatible with any non-closed \(cf /)J
0 2 rm
.217(*)A
0 -2 rm
0 -2 rm
.235(~)A
0 2 rm
.217(RootType)A
0 2 rm
.217(*)A
0 -2 rm
.265(/\))A
60 289 :M
1.102 .11(descendant of its return type. For a 'void )J
0 2 rm
.414(*)A
0 -2 rm
1.696 .17(' returning)J
60 299 :M
.29 .029(function, this d-pragma tells that its result is compatible)J
60 309 :M
.267 .027(with any pointer.)J
60 324 :M
2.507 .251(Functions formal pointer parameters that could be)J
60 334 :M
6.495 .65(qualified 'const' are signaled. Besides, the)J
60 344 :M
.396(/)A
0 2 rm
.712(*)A
0 -2 rm
0 -2 rm
.77(~)A
0 2 rm
2.811 .281(MayModify*/ d-pragma tells that, although its)J
60 354 :M
1.209 .121(formal parameters are marked 'const', a function may)J
60 364 :M
.574 .057(modify its environment through them, either via casted)J
60 374 :M
-.048(parameter or through pointers embedded in struct/unions.)A
60 389 :M
.421 .042(The /)J
0 2 rm
.152(*)A
0 -2 rm
0 -2 rm
.164(~)A
0 2 rm
.14(ResultType)A
0 2 rm
.152(*)A
0 -2 rm
.492 .049(/ d-pragma specifies that the result)J
60 399 :M
1.638 .164(type of a given call to a function is the type of the)J
60 409 :M
4.804 .48(current actual parameter corresponding to the)J
60 419 :M
(/)S
0 2 rm
(*)S
0 -2 rm
0 -2 rm
-.053(~)A
0 2 rm
-.045(ResultType)A
0 2 rm
(*)S
0 -2 rm
-.039(/ qualified formal parameter, e.g.:)A
69 434 :M
f7_9 sf
9 f9_1 :p
15 :m
-.399(int)A
-.399( abs\(int /)A
0 2 rm
-.399(*)A
0 -2 rm
0 -2 rm
-.399(~)A
0 2 rm
-.399(ResultType)A
0 2 rm
-.399(*)A
0 -2 rm
-.598(/\);)A
95 444 :M
-.409(   short s = ...; s = abs\(s\); /* OK */)A
69 459 :M
-.399(void )A
0 1 rm
-.399(*)A
0 -1 rm
-.399(realloc\(void )A
0 1 rm
-.399(*)A
0 -1 rm
-.399(p /)A
0 1 rm
-.399(*)A
0 -1 rm
-.399(~ResultType)A
0 1 rm
-.399(*)A
0 -1 rm
-.797(/,)A
130 469 :M
-.399(  size_t n\);  /)A
0 1 rm
-.399(*)A
0 -1 rm
-.399( declaration )A
0 1 rm
-.399(*)A
0 -1 rm
(/)S
69 484 :M
-.399(realloc\(ptr, exp\)   /)A
0 1 rm
-.399(*)A
0 -1 rm
-.432( type of this)A
95 494 :M
-.399(    'realloc' call = type of 'ptr' )A
0 1 rm
-.399(*)A
0 -1 rm
(/)S
60 509 :M
f1_10 sf
2.203 .22(As an extension, several formal parameters can be)J
60 519 :M
.154 .015(qualified by /)J
0 2 rm
(*)S
0 -2 rm
0 -2 rm
.053(~)A
0 2 rm
.045(ResultType)A
0 2 rm
(*)S
0 -2 rm
.121 .012(/; then the result type of the)J
60 529 :M
2.766 .277(function call is the first common ancestor of the)J
60 539 :M
-.075(corresponding actual parameters' types.)A
60 554 :M
.393 .039(The type of /)J
0 2 rm
.165(*)A
0 -2 rm
0 -2 rm
.178(~)A
0 2 rm
.152(ResultType)A
0 2 rm
.165(*)A
0 -2 rm
.64 .064(/ formal parameter\(s\) must)J
60 564 :M
.515 .052(be the same that \(or a descendant of\) the return type of)J
60 574 :M
.209 .021(the function.)J
60 589 :M
(The /)S
0 2 rm
(*)S
0 -2 rm
0 -2 rm
(~)S
0 2 rm
-.005(ResultPtr*/ d-pragma tells that a returned pointer)A
60 599 :M
.222 .022(is the same as the so-qualified parameter, this to be able)J
60 609 :M
.118 .012(to propagate 'const' checking \(e.g. in 'strchr'\).)J
60 624 :M
1.021 .102(The /)J
0 2 rm
.368(*)A
0 -2 rm
0 -2 rm
.398(~)A
0 2 rm
1.472 .147(SizeOfMemBlk*/ d-pragma is intended to be)J
60 634 :M
3.503 .35(used with memory allocating functions, such as)J
60 644 :M
.896 .09('malloc', to allow verification that the argument of the)J
60 654 :M
.35 .035(possible sizeof used as parameter is of the same type as)J
60 664 :M
-.013(the receiving pointer pointed type.)A
60 679 :M
6.806 .681(Others d-pragmas related to functions are)J
60 689 :M
.23(/)A
0 2 rm
.414(*)A
0 -2 rm
0 -2 rm
.448(~)A
0 2 rm
.405(PseudoVoid)A
0 2 rm
.414(*)A
0 -2 rm
.767 .077(/ and /)J
0 2 rm
.414(*)A
0 -2 rm
0 -2 rm
.448(~)A
0 2 rm
.383(NeverReturns)A
0 2 rm
.414(*)A
0 -2 rm
.898 .09(/  \(see later,)J
60 699 :M
2.765 .277('Miscelleanous'\); function parameters may also be)J
60 709 :M
1.481 .148(marked /)J
0 2 rm
.378(*)A
0 -2 rm
0 -2 rm
.409(~)A
0 2 rm
.384(NotUsed)A
0 2 rm
.378(*)A
0 -2 rm
.692 .069(/ as well as /)J
0 2 rm
.378(*)A
0 -2 rm
0 -2 rm
.409(~)A
0 2 rm
.282(Utility)A
0 2 rm
.378(*)A
0 -2 rm
.614 .061(/ \(do )J
10 f5_1 :p
13.744 :m
.483(not)A
60 719 :M
-.021(accept an actual parameter whose type is a parallel type\),)A
60 729 :M
(/)S
0 2 rm
(*)S
0 -2 rm
0 -2 rm
(~)S
0 2 rm
-.01(Generic)A
0 2 rm
(*)S
0 -2 rm
-.009(/ \(accept actual parameter of any descendant)A
60 739 :M
1.592 .159(type\), /)J
0 2 rm
.506(*)A
0 -2 rm
0 -2 rm
.547(~)A
0 2 rm
.494(Saved)A
0 2 rm
.506(*)A
0 -2 rm
1.469 .147(/ \(in case of non 'const' parameters)J
60 749 :M
.99 .099(stored in static/external memory\), or /)J
0 2 rm
.292(*)A
0 -2 rm
0 -2 rm
.315(~)A
0 2 rm
.308(SizeOK)A
0 2 rm
.292(*)A
0 -2 rm
.682 .068(/ \(to)J
60 759 :M
2.892 .289(avoid warning on big structures/unions passed as)J
60 769 :M
-.179(parameter\).)A
307 79 :M
74 :m
.79 .079(Compilation units)J
307 94 :M
1.242 .124(One of the plagues of C is the lack of type-checking)J
307 104 :M
2.409 .241(between formal and actual parameters for external)J
307 114 :M
1.539 .154(functions, or more generally, between definition and)J
307 124 :M
2.275 .228(uses of external objets \(we will, for the following)J
307 134 :M
.422 .042(discussion, call "global" a block-level-0 object/function)J
307 144 :M
.767 .077(visible in only one compilation unit, and "external" an)J
307 154 :M
.145 .014(object/function visible from several compilation units\).)J
307 169 :M
.238 .024(Another problem is that the encapsulation of C modules)J
307 179 :M
2.606 .261(is usually very bad, because one of the tenets of)J
307 189 :M
1.919 .192(encapsulation: "anything that is not explicitly made)J
307 199 :M
.658 .066(visible must be hidden" is not respected. In C, the rule)J
307 209 :M
.755 .076(is: "anything \(at block level 0\) not explicitly hidden is)J
307 219 :M
1.088 .109(visible"; this is because the 'static' keyword has to be)J
307 229 :M
.519 .052(explicitly used, instead of being the default option, and)J
307 239 :M
-.002(so is "often" \(the word is weak\) forgotten.)A
307 254 :M
.704 .07(Something also confusing to many programmers is the)J
307 264 :M
.304 .03(difference between declarations and definitions, and the)J
307 274 :M
.631 .063(uniqueness of definitions. This is because, for C, some)J
307 284 :M
.03 .003(declarations are also definitions \("tentative definitions"\);)J
307 294 :M
2.791 .279(also, a number of compilers/linkers allow several)J
307 304 :M
-.02(definitions for the same external object.)A
307 319 :M
1.248 .125(Disciplined C solves these problems in the following)J
307 329 :M
2.789 .279(way: any object/function/type identifier has to be)J
307 339 :M
1.941 .194(declared \(just once\) before use; any object/function)J
307 349 :M
.324 .032(defined at block level 0 as not 'static' has to be declared)J
307 359 :M
.188 .019(in a header file; there must be one "header" file for each)J
307 369 :M
-.039("body" file defining external objects/functions.)A
307 384 :M
-.007(A header file is constrained to contain only \(besides type)A
307 394 :M
-.007(and macro definitions\) external declarations, which must)A
307 404 :M
.318 .032(make use of the 'extern' keyword. A definition must not)J
307 414 :M
-.01(make use of this keyword.)A
307 429 :M
.035 .003(This provides the following benefits:)J
307 444 :M
(-)S
316 444 :M
1.229 .123(programmers are warned if they have forgotten the)J
316 454 :M
-.043('static' keyword,)A
307 469 :M
(-)S
316 469 :M
.74 .074(for really external objects/functions, since they must)J
316 479 :M
.119 .012(be declared in \(common\) header file\(s\), type checking)J
316 489 :M
-.006(between compilation units is secured,)A
307 504 :M
(-)S
316 504 :M
5.436 .544(an external object definition \(and possible)J
316 514 :M
1.022 .102(initialization\) is easier to find: it can only be in the)J
316 524 :M
-.097(corresponding "body" file\),)A
307 539 :M
(-)S
316 539 :M
1.131 .113(the difference between declaration and definition is)J
316 549 :M
-.237(made clearer.)A
307 564 :M
1.445 .145(To cater for module composition, the restriction that)J
307 574 :M
4.399 .44(there be only one declaration for an external)J
307 584 :M
1.142 .114(object/function is relaxed; but, in a given header file,)J
307 594 :M
1.897 .19(only one declaration for a given object/ function is)J
307 604 :M
.827 .083(allowed; the possible constraints \(qualifiers, array size)J
307 614 :M
1.705 .171(etc\) have to keep constant or increasing in order of)J
307 624 :M
-.034(inclusion of header files.)A
307 639 :M
.797 .08(Finally, the scope of any global object/type/tag can be)J
307 649 :M
.163 .016(terminated before the end of the compilation unit by use)J
307 659 :M
-.053(of the /)A
0 2 rm
-.075(*)A
0 -2 rm
0 -2 rm
-.081(~)A
0 2 rm
-.065(Undef\(Tag\) <identList> )A
0 2 rm
-.075(*)A
0 -2 rm
-.069(/ d-pragma.)A
307 674 :M
95.001 :m
-.079(Inclusion of header files)A
307 689 :M
.088 .009(Header files are often included at the wrong level. They,)J
307 699 :M
.224 .022(most of the time, should be included at least at the body)J
307 709 :M
1.062 .106(file level \(and at the beginning of it\), so that all used)J
307 719 :M
.291 .029(services are easy to spot. If they are not included at that)J
307 729 :M
1.027 .103(level \(and one of the functions/objects they declare is)J
307 739 :M
-.02(used\), a warning is issued.)A
307 754 :M
-.057(To cater to "composed" header files \(header files offering)A
307 764 :M
2.779 .278(services including other service\(s\)\), the /)J
0 2 rm
.794(*)A
0 -2 rm
0 -2 rm
.859(~)A
0 2 rm
1.206(Com-)A
307 774 :M
.157(posingHdr)A
0 2 rm
.167(*)A
0 -2 rm
.514 .051(/ d-pragma is supplied. For example, if one)J
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(YN; page: 5 of 10)setjob
%%EndPageSetup
-29 -31 :T
gS 29 31 537 780 rC
294 804 :M
f1_10 sf
(5)S
60 74 :M
1.282 .128(wants to provide a <superMath.h> service, giving all)J
60 84 :M
.972 .097(services of <math.h> plus some others such as Bessel)J
60 94 :M
2.367 .237(and Jacobi functions, one will write the following)J
60 104 :M
.264 .026(<superMath.h> header file\312:)J
60 119 :M
f7_9 sf
-.41(#include <math.h> /*~ComposingHdr*/)A
60 134 :M
-.413(extern double bessel\( ... \);)A
60 144 :M
-.413(extern double jacobi\( ... \);)A
60 159 :M
f1_10 sf
1.582 .158(and then no warning will be incurred in a body file)J
60 169 :M
1.202 .12(including only <superMath.h>, and yet using 'sin' \(or)J
60 179 :M
.291 .029(other <math.h> functions/objects\).)J
60 194 :M
10 f5_1 :p
56 :m
-.054(Encapsulation)A
60 209 :M
.307 .031(To still improve encapsulation, structures/unions/enums)J
60 219 :M
(declared in header files may be qualified by /)S
0 2 rm
(*)S
0 -2 rm
0 -2 rm
(~)S
0 2 rm
(Private)S
0 2 rm
(*)S
0 -2 rm
(/)S
60 229 :M
.35 .035(or /)J
0 2 rm
.18(*)A
0 -2 rm
0 -2 rm
.195(~)A
0 2 rm
.731 .073(PrivateTo <files list>)J
0 2 rm
.18(*)A
0 -2 rm
.7 .07(/ d-pragmas, which render)J
60 239 :M
1.415 .141(their member's names invisible, except from macros/)J
60 249 :M
.478 .048(functions defined in the indicated files \(current file and)J
60 259 :M
.954 .095(corresponding "body" file for /)J
0 2 rm
.275(*)A
0 -2 rm
0 -2 rm
.297(~)A
0 2 rm
.223(Private)A
0 2 rm
.275(*)A
0 -2 rm
.633 .063(/\). So a type)J
60 269 :M
3.866 .387(may be exported without its components being)J
60 279 :M
-.19(disclosed.)A
60 304 :M
f0_10 sf
.586(D-Pragmas)A
60 319 :M
f1_10 sf
.217 .022(As seen previously, Disciplined C often needs advice or)J
60 329 :M
.661 .066(information, to be conveyed by pragmas. But it cannot)J
60 339 :M
.099 .01(use the pragma facility of C, for two reasons:)J
60 354 :M
(-)S
69 354 :M
.531 .053(there might be an ambiguity with an already existing)J
69 364 :M
1.81 .181(local pragma, or a compiler might warn about an)J
69 374 :M
-.014(unknown pragma,)A
60 389 :M
(-)S
69 389 :M
1.882 .188(more significantly, C pragmas can only be at the)J
69 399 :M
.127 .013(beginning of a \(logical\) line.)J
60 414 :M
.126 .013(For those reasons, it was decided to define "d-pragmas",)J
60 424 :M
1.146 .115(and to make them look as comments, hoping that the)J
60 434 :M
.398('/)A
0 2 rm
.869(*)A
0 -2 rm
0 -2 rm
.939(~)A
0 2 rm
2.479 .248(' prefix does not happen too often in existing)J
60 444 :M
-.033(programs.)A
60 469 :M
f0_10 sf
.835(Miscelleanous)A
60 484 :M
f1_10 sf
.428 .043(Many other improvements of C have been incorporated)J
60 494 :M
2.507 .251(in Disciplined C \(and are verified by the checker)J
60 504 :M
-.122(program\):)A
60 519 :M
(-)S
69 519 :M
1.919 .192('if', 'else', loop operators: if they are followed by)J
69 529 :M
1.138 .114(several statements on the same \(physical\) line, it is)J
69 539 :M
1.705 .17(asked whether all these statements are part of the)J
69 549 :M
.25 .025('if'/'else' arm, or loop body,)J
60 564 :M
(-)S
69 564 :M
2.284 .228(as an option, line indentation is checked against)J
69 574 :M
1.158 .116(current block level; this makes it possible to detect)J
69 584 :M
.06 .006(early missing left/right braces, or bad 'if'/loop bodies,)J
60 599 :M
(-)S
69 599 :M
.555 .055(declarations have to be separated from statements by)J
69 609 :M
1.307 .131(white line\(s\), except if the first statement is empty)J
69 619 :M
.021(\(";;"\),)A
60 634 :M
(-)S
69 634 :M
.211 .021(only 'void' type expressions can be used as statements)J
69 644 :M
.805 .081(\(or as first argument of the comma operator, or first)J
69 654 :M
1.381 .138(and third arguments of the 'for' operator\), the only)J
69 664 :M
.108 .011(exceptions being the following:)J
72 679 :M
<A5>S
81 679 :M
.396 .04(expression whose top operator is an assignment or)J
81 689 :M
-.072(increment operator,)A
72 704 :M
<A5>S
81 704 :M
2.814 .281(functions marked as /)J
0 2 rm
.836(*)A
0 -2 rm
0 -2 rm
.905(~)A
0 2 rm
.818(PseudoVoid)A
0 2 rm
.836(*)A
0 -2 rm
2.759 .276(/ \(only)J
81 714 :M
-.022(functions whose main effect is a side effect, such as)A
81 724 :M
f7_9 sf
-.139(printf)A
f1_10 sf
-.086( or )A
f7_9 sf
-.139(strcpy)A
f1_10 sf
-.109(, should be so marked\).)A
69 739 :M
.448 .045(This way, probable errors such as ")J
f7_9 sf
.163(fct;)A
f1_10 sf
.463 .046(" \(instead of)J
69 749 :M
.121(")A
f7_9 sf
.16(fct\(\);)A
f1_10 sf
.289 .029("\), or ")J
f7_9 sf
.16(a[i,j])A
f1_10 sf
.367 .037(" \(instead of ")J
f7_9 sf
.16(a[i][j])A
f1_10 sf
.437 .044("\) are)J
69 759 :M
.829 .083(located. Also, it encourages programmers to test the)J
316 74 :M
.828 .083(value returned by I/O functions \('scanf', 'fputc', etc\),)J
316 84 :M
-.019(so as to detect I/O errors,)A
307 99 :M
(-)S
316 99 :M
.399 .04(a non-void function must terminate in all cases either)J
316 109 :M
.418 .042(via a 'return exp', whose type is \(a descendant of\) the)J
316 119 :M
.12 .012(type of the function, or via a call to a function marked)J
316 129 :M
.147 .015(as /)J
0 2 rm
.076(*)A
0 -2 rm
0 -2 rm
.082(~)A
0 2 rm
.07(NeverReturns)A
0 2 rm
.076(*)A
0 -2 rm
.184 .018(/ \(such as 'exit' or 'abort'\); to that)J
316 139 :M
1.932 .193(end, a simple control flow analysis is performed,)J
316 149 :M
-.056(which also detects unreachable statements,)A
307 164 :M
(-)S
316 164 :M
1.337 .134(since Disciplined C is only aimed at ANSI C with)J
316 174 :M
.978 .098("new-style" functions, a function with no parameter)J
316 184 :M
-.093(can be declared/defined as f\( \)  \(no 'void' keyword\), and)A
316 194 :M
-.03(still be considered only as a parameterless function,)A
307 209 :M
(-)S
316 209 :M
.569 .057(if a parameter name is given in a function prototype,)J
316 219 :M
1.205 .12(the same name must be used for the corresponding)J
316 229 :M
1.448 .145(parameter in the function definition, this to ensure)J
316 239 :M
.312 .031(that the meaning of the prototype is/stays the same as)J
316 249 :M
.364 .036(the implementation,)J
307 264 :M
(-)S
316 264 :M
.4 .04(a function name is not a pointer on that function, and)J
316 274 :M
-.024(pointers on functions are to be dereferenced before use)A
316 284 :M
-.035(\(for the sake of regularity\),)A
307 299 :M
(-)S
316 299 :M
.476 .048(switches: the 'switch' statement must control a block;)J
316 309 :M
.402 .04(a missing break is flagged, unless a /)J
0 2 rm
.148(*)A
0 -2 rm
0 -2 rm
.16(~)A
0 2 rm
.153(NoBreak)A
0 2 rm
.148(*)A
0 -2 rm
.31 .031(/ d-)J
316 319 :M
1.124 .112(pragma has been used; a 'default' case \(which must)J
316 329 :M
.885 .089(come at the end of the switch\) is expected, unless a)J
316 339 :M
.271(/)A
0 2 rm
.487(*)A
0 -2 rm
0 -2 rm
.527(~)A
0 2 rm
.457(NoDefault)A
0 2 rm
.487(*)A
0 -2 rm
1.294 .129(/ d-pragma has been used or, if the)J
316 349 :M
.211 .021(switch expression is of enum type, all enum constants)J
316 359 :M
2.412 .241(of that type have been used as case values; the)J
316 369 :M
(/)S
0 2 rm
(*)S
0 -2 rm
0 -2 rm
(~)S
0 2 rm
(FullEnum)S
0 2 rm
(*)S
0 -2 rm
-.002(/ d-pragma can be used to get a warning)A
316 379 :M
.649 .065(if not all \(distinct-valued\) constants of a given enum)J
316 389 :M
.419 .042(are used as cases values, and a default case \(to catch,)J
316 399 :M
-.019(for example, spurious values\) has been used,)A
307 414 :M
(-)S
316 414 :M
1.508 .151(in an effort to clarify the distinction between type)J
316 424 :M
2.975 .298(attribute \('extern'... 'register'\) and type qualifier)J
316 434 :M
.995 .099(\('const', 'volatile'\), the qualifier must lexically come)J
316 444 :M
-.018(after the attribute,)A
307 459 :M
(-)S
316 459 :M
1.947 .195('const'/'volatile' qualifiers are strictly obeyed \(and)J
316 469 :M
-.026(literal strings considered as  )A
20.959 :m
-.029(const)A
-.025( char [ ] !\),)A
307 484 :M
(-)S
316 484 :M
.118 .012(there is a warning if objects modified within the reach)J
316 494 :M
3.092 .309(of a setjmp\(\312\)/longjmp\(\312\) pair are not qualified)J
316 504 :M
.091('volatile',)A
307 519 :M
(-)S
316 519 :M
2.828 .283(pointers on local objects cannot be returned or)J
316 529 :M
2.807 .281(assigned to global/external variables, unless the)J
316 539 :M
.241(/)A
0 2 rm
.433(*)A
0 -2 rm
0 -2 rm
.469(~)A
0 2 rm
.415(LocalAdr)A
0 2 rm
.433(*)A
0 -2 rm
1.178 .118(/ d-pragma is used \(this check is not)J
316 549 :M
4.366 .437(perfectly foolproof, however, because of the)J
316 559 :M
.362 .036(possibility of pointers on pointers\),)J
307 574 :M
(-)S
316 574 :M
.904 .09(except inside array and enum initialization, numeric)J
316 584 :M
-.029(constants \(barring -1, 0, 1\) must be named \('#define'd\);)A
316 594 :M
4.155 .415(this forces much semantic to flow from the)J
316 604 :M
2.695 .27(programmer's mind to the program\312! There is a)J
316 614 :M
2.573 .257(special case for array bound expressions, where)J
316 624 :M
5.998 .6(unnamed constants cause warning only if)J
316 634 :M
1.111 .111(\(subsequently\) a non constant expression is used to)J
316 644 :M
-.098(index the array.)A
316 659 :M
1.274 .127(Since this constraint sometimes proves clumsy, the)J
316 669 :M
.239 .024(following alleviates it:)J
319 684 :M
<A5>S
328 684 :M
-.102(parenthesized unnamed constants are not flagged,)A
319 699 :M
<A5>S
328 699 :M
1.923 .192(if a \(numeric\) parallel type is qualified by the)J
328 709 :M
.587(/)A
0 2 rm
1.056(*)A
0 -2 rm
0 -2 rm
1.142(~)A
0 2 rm
.845(LiteralCst)A
0 2 rm
1.056(*)A
0 -2 rm
3.637 .364(/ d-pragma, use of unnamed)J
328 719 :M
.811 .081(constants inside expressions of this type does not)J
328 729 :M
.143 .014(elicit warnings,)J
307 744 :M
(-)S
316 744 :M
2.334 .233(underflows/overflows in constant expressions are)J
316 754 :M
-.351(detected,)A
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(YN; page: 6 of 10)setjob
%%EndPageSetup
-29 -31 :T
gS 29 31 537 780 rC
294 804 :M
f1_10 sf
(6)S
60 79 :M
(-)S
69 79 :M
2.757 .276(in the 'scanf'/'printf' family, argument types are)J
69 89 :M
-.045(checked against \(constant\) format string specifications,)A
60 104 :M
(-)S
69 104 :M
-.035(unclosed comments are flagged \(detection of '/)A
0 2 rm
(*)S
0 -2 rm
-.035(' inside)A
69 114 :M
(a comment\),)S
60 129 :M
(-)S
69 129 :M
.212 .021(labels and tags must obey the rule of other identifiers,)J
69 139 :M
3.065 .307(that is disappear outside the defining block or)J
69 149 :M
1.193 .119(structure/union; but, to stay compatible with C, the)J
69 159 :M
.042 .004(same label cannot be defined in different blocks of the)J
69 169 :M
-.02(same function body,)A
60 184 :M
(-)S
69 184 :M
1.539 .154(backward branches, which may cause unstructured)J
69 194 :M
.448 .045(loops, must be documented via the /)J
0 2 rm
.148(*)A
0 -2 rm
0 -2 rm
.16(~)A
0 2 rm
.146(BackBranch)A
0 2 rm
.148(*)A
0 -2 rm
(/)S
69 204 :M
-.226(d-pragma,)A
60 219 :M
(-)S
69 219 :M
.569 .057(unless the /)J
0 2 rm
.202(*)A
0 -2 rm
0 -2 rm
.219(~)A
0 2 rm
.18(DynInit)A
0 2 rm
.202(*)A
0 -2 rm
.693 .069(/ d-pragma is used, non-static)J
69 229 :M
-.028(structure/array initializations are flagged \(because they)A
69 239 :M
-.032(slow down function entry and waste memory\),)A
60 254 :M
(-)S
69 254 :M
.321 .032(external identifiers are checked for non ambiguity for)J
69 264 :M
.146 .015(the local linker,)J
60 279 :M
(-)S
69 279 :M
2.106 .211(tests for an unsigned quantity to be negative are)J
69 289 :M
-.212(flagged,)A
60 304 :M
(-)S
69 304 :M
.428 .043(constant boolean expressions \(used elsewhere than in)J
69 314 :M
2.44 .244(an assignment, and outside macros\) are flagged,)J
69 324 :M
-.043(because they probably signal a coding error,)A
60 339 :M
(-)S
69 339 :M
2.26 .226(parenthesization problems with macro bodies are)J
69 349 :M
3.34 .334(detected \(for example )J
f7_9 sf
1.046(Diff\(a,b+c\))A
0 1 rm
1.046(*)A
0 -1 rm
1.046(d)A
f1_10 sf
2.941 .294(, with)J
69 359 :M
f7_9 sf
-.221(Diff\(x,y\))A
f1_10 sf
-.153(  defined as ")A
f7_9 sf
-.221(x-y)A
f1_10 sf
-.16(" and not ")A
f7_9 sf
-.221(\(\(x\)-\(y\)\))A
f1_10 sf
-.169(" \),)A
60 374 :M
.831 .083(- extraneous semicolon at end of macro definition and)J
69 384 :M
-.037(missing semicolon at end of included file are signaled,)A
60 399 :M
(-)S
69 399 :M
-.015(side effects via macro parameters used more than once)A
69 409 :M
-.199(are flagged,)A
60 424 :M
(-)S
69 424 :M
1.941 .194(unless qualified by the /)J
0 2 rm
.66(*)A
0 -2 rm
0 -2 rm
.714(~)A
0 2 rm
.671(NotUsed)A
0 2 rm
.66(*)A
0 -2 rm
3.043 .304(/ d-pragma,)J
69 434 :M
-.089(unused identifiers/objects are signaled,)A
60 449 :M
(-)S
69 449 :M
-.062(uninitialized local objects are flagged,)A
60 464 :M
(-)S
69 464 :M
-.056(unused variable values are signalled \(an only  modified)A
69 474 :M
-.015(object, e.g.  )A
f7_9 sf
-.023(i++)A
f7_10 sf
-.026( ,)A
f1_10 sf
-.017( is not considered as used\),)A
60 489 :M
(-)S
69 489 :M
.227 .023(an attempt to detect potentially dangerous side effects)J
69 499 :M
1.966 .197(has been unsuccessful; for, if it is easy to detect)J
69 509 :M
.451(")A
f7_9 sf
1.987 .199(a[i++] = i)J
f1_10 sf
1.207 .121(", it is harder to detect ")J
f7_9 sf
2.805 .281(a[i++] =)J
69 520 :M
-.127(*)A
0 -1 rm
-.127(\(&i\))A
0 1 rm
f1_10 sf
0 -1 rm
-.094(", and much harder to detect ")A
0 1 rm
f7_9 sf
0 -1 rm
-.127(a = f\(\) + g\(\))A
0 1 rm
f1_10 sf
0 -1 rm
-.155(",)A
0 1 rm
69 529 :M
-.02(where each \(external\) function f and g depends on side)A
69 539 :M
-.019(effects of the other function.)A
60 564 :M
f0_10 sf
4.849 .485(Compile-time checking tool)J
60 579 :M
f1_10 sf
1.868 .187(A d-pragma, /)J
0 2 rm
.552(*)A
0 -2 rm
0 -2 rm
.597(~)A
0 2 rm
.388(zif)A
0 -3 rm
.251 .025( )J
0 3 rm
3.622 .362(<boolExp> "<msgString>")J
0 2 rm
.552(*)A
0 -2 rm
.307(/)A
0 2 rm
.251 .025( )J
0 -2 rm
.736(is)A
60 589 :M
2.85 .285(provided, that causes emission of <msgString> if)J
60 599 :M
3.478 .348(<boolExp> is true. It is the main tool \(besides)J
60 609 :M
.921 .092("information" types and the fact that integer constants)J
60 619 :M
-.008(must be named\) that allows a programmer to indicate his)A
60 629 :M
1.915 .192(constraints \(for example, that a quantity should not)J
60 639 :M
-.022(exceed a certain value, or that a structure member should)A
60 649 :M
1.615 .161(be placed at such a position\). <boolExp> must be a)J
60 659 :M
.883 .088(constant expression, but can contain 'sizeof' operators,)J
60 669 :M
.16 .016(enum constants, casts, and also the following functions:)J
60 684 :M
(-)S
69 684 :M
1.473 .147(_ _bitoffset\(x, y\): 'x' must be a type 'struct', or an)J
69 694 :M
2.185 .218(expression of that type, and 'y' a member name;)J
69 704 :M
.185 .019(answers an unsigned long that is the bit offset of 'y' in)J
69 714 :M
1.207 .121('x', taking possible alignment holes into account. If)J
69 724 :M
.449 .045('y' is followed by a '+', answers bit offset plus size of)J
69 734 :M
1.391 .139(member. If 'y' \(and comma\) missing, equivalent to)J
69 744 :M
.415 .041(__bitoffset\(x, <lm>+\), where <lm> is last member,)J
307 79 :M
(-)S
316 79 :M
1.364 .136(_ )J
-100 -100 :M
1.5 .15( )J
324 79 :M
.725 .072(_extent\(<enumType>\): answers the "extent" of the)J
316 89 :M
.162 .016(enumType, i.e. the distance between its greatest enum)J
316 99 :M
.221 .022(constant and its smallest one \(type: 'int'\),)J
307 114 :M
(-)S
316 114 :M
.454 .045(_ )J
-100 -100 :M
.5 .05( )J
323 114 :M
.245 .025(_index\( \): only to be used inside array initialization;)J
316 124 :M
.662 .066(answers the index value of the current array element)J
316 134 :M
-.011(being initialized \(type = type of the bound\),)A
307 149 :M
(-)S
316 149 :M
2.273 .227(_ )J
-100 -100 :M
2.5 .25( )J
325 149 :M
1.057 .106(_member\(<membName>\): only to be used during)J
316 159 :M
.161 .016(structure/union initialization; answers true if currently)J
316 169 :M
2.608 .261(initializing the member whose name is <memb-)J
316 179 :M
2.53 .253(Name>, or at end of the structure/union \(empty)J
316 189 :M
(<membName>\),)S
307 204 :M
(-)S
316 204 :M
.454 .045(_ )J
-100 -100 :M
.5 .05( )J
323 204 :M
.271 .027(_sametype\(x, y\): 'x'/'y' may be types or expressions;)J
316 214 :M
.635 .063(answers true if both \(expression\) types are the same.)J
316 224 :M
-.051(The type equivalence used is the same as for parameter)A
316 234 :M
1.394 .139(passing \(x: formal parameter, y: actual parameter\).)J
316 244 :M
.518 .052(This function can for example be used to type macro)J
316 254 :M
-.136(parameters.)A
307 269 :M
2.305 .231(The 'defined' function is also accepted. Of course,)J
307 279 :M
-.088(undefined identifiers are flagged \(not replaced by 0L\312!\).)A
307 294 :M
2.237 .224(This d-pragma permits a program to be much less)J
307 304 :M
.682 .068(fragile, by allowing one to build into it mechanisms to)J
307 314 :M
-.069(check at compile-time that related data structures are kept)A
307 324 :M
.66 .066(coherent through modifications; for example, it is easy)J
307 334 :M
.545 .055(to check that the length of parallel arrays are the same,)J
307 344 :M
.786 .079(or that the length of an array is the same as the extent)J
307 354 :M
1.193 .119(\(+1\) of an enum used to name its elements, or that a)J
307 364 :M
1.12 .112(structure member/array element is initialized with the)J
307 374 :M
.219 .022(right value.)J
307 399 :M
f0_10 sf
3.019 .302(Some words about the Disciplined C checker)J
307 414 :M
f1_10 sf
.659 .066("dcc", the C-checker, performs full syntactic and some)J
307 424 :M
4.46 .446(static semantic analysis of a C program, one)J
307 434 :M
2.885 .288(compilation unit at a time. It is itself written in)J
307 444 :M
.685 .069(Disciplined C, is approximately 15000 lines long, uses)J
307 454 :M
.106 .011(a recursive descent method, and is about ten times faster)J
307 464 :M
2.831 .283(that the 'gcc' C compiler \(on a DECstation 5000)J
307 474 :M
.342 .034(running ULTRIX\); so error detection is quite swift, and)J
307 484 :M
.239 .024(only a small time cost is added to regular compilation if)J
307 494 :M
-.023(the program is correct.)A
307 509 :M
2.616 .262(Unless the '-zcc' option has been used, control is)J
307 519 :M
.154 .015(automatically transfered to the local compiler if no error)J
307 529 :M
.098 .01(is detected \(the philosophy of dcc, as of any C compiler,)J
307 539 :M
-.009(is to issue errors only when the standard is violated\).)A
307 554 :M
1.383 .138(The '+zsy' option permits one to have, at each block)J
307 564 :M
.178 .018(exit, the content of the symbol table for those identifiers)J
307 574 :M
.756 .076(local to the block; their kind, type \(fully decoded\) and)J
307 584 :M
.404 .04(size \(for objects\) are given, this last information so that)J
307 594 :M
1.302 .13(programmers have an idea of the amount of memory)J
307 604 :M
.023 .002(their program uses.)J
307 619 :M
1.137 .114(Numerous other options are available, for example to)J
307 629 :M
.208 .021(limit dcc's scrutiny.)J
307 644 :M
-.007(All error/warning messages can be adapted at will, being)A
307 654 :M
2.038 .204(gathered in one single source file. In addition to a)J
307 664 :M
1.25 .125(message, one is given: the number of the source line)J
307 674 :M
.39 .039(where the error/warning has been detected, the name of)J
307 684 :M
.302 .03(the corresponding file, the preceding and current source)J
307 694 :M
.257 .026(line text, and a caret showing the precise position of the)J
307 704 :M
.93 .093(error/warning in the source line. An option causes the)J
307 714 :M
.153 .015(printing in clear of the last processed tokens \(sometimes)J
307 724 :M
-.105(very handy !\).)A
307 739 :M
2.379 .238(Three levels of warnings, corresponding to benign)J
307 749 :M
1.966 .197(\(mostly readibility\), serious, quasi-certain error, are)J
307 759 :M
.848 .085(implemented; a screening mechanism \(desactivated by)J
307 769 :M
2.347 .235(some options, e.g. '-zcc'\) prevents a warning from)J
endp
%%Page: 7 7
%%BeginPageSetup
initializepage
(YN; page: 7 of 10)setjob
%%EndPageSetup
-29 -31 :T
gS 29 31 537 780 rC
294 804 :M
f1_10 sf
(7)S
60 74 :M
1.224 .122(showing up if its level is lower that the last message)J
60 84 :M
1.48 .148(level. In the same vein, unless option '+zae' is used,)J
60 94 :M
1.146 .115(messages are not repeated if they pertain to the same)J
60 104 :M
-.141(cause.)A
60 119 :M
2.209 .221(There is a way to adjust local system header files)J
60 129 :M
1.283 .128(\(without modifying them\), mainly in order to change)J
60 139 :M
1.39 .139(some library functions return types \(such as 'getc' or)J
60 149 :M
.952 .095('isalpha'\), to define NULL as )J
f7_9 sf
1.307 .131(\(void )J
0 1 rm
.349(*)A
0 -1 rm
.349(\)0)A
f1_10 sf
.735 .073(, or to mark)J
60 159 :M
-.031(functions as /)A
0 2 rm
(*)S
0 -2 rm
0 -2 rm
(~)S
0 2 rm
-.039(PseudoVoid)A
0 2 rm
(*)S
0 -2 rm
-.025(/ or /)A
0 2 rm
(*)S
0 -2 rm
0 -2 rm
(~)S
0 2 rm
-.037(NeverReturns)A
0 2 rm
(*)S
0 -2 rm
(/.)S
60 174 :M
1.08 .108(A symbol, '_ )J
-100 -100 :M
1.5 .15( )J
117 174 :M
.428 .043(_dcc', is defined by the checker; it can be)J
60 184 :M
.74 .074(used to turn off its scrutiny in selected areas of source)J
60 194 :M
2.027 .203(code \(besides the /)J
0 2 rm
.67(*)A
0 -2 rm
0 -2 rm
.725(~)A
0 2 rm
.769(NoWarn)A
0 2 rm
.67(*)A
0 -2 rm
1.24 .124(/ and /)J
0 2 rm
.67(*)A
0 -2 rm
0 -2 rm
.725(~)A
0 2 rm
.744(Warn)A
0 2 rm
.67(*)A
0 -2 rm
1.402 .14(/ d-)J
60 204 :M
-.087(pragmas\).)A
60 219 :M
.34 .034(This program, developed on a VAX/VMS machine, has)J
60 229 :M
1.472 .147(been ported in less than a day on a HP715/UNIX, a)J
60 239 :M
.168 .017(DECstation 5000/ULTRIX and an ALPHA 3000/OSF1.)J
60 254 :M
1.093 .109(It is available via anonymous ftp at 'ftp.supelec.fr', in)J
60 264 :M
-.071(the sub-directory 'pub/lang/dcc'.)A
60 289 :M
f0_10 sf
.913(Conclusion)A
60 304 :M
f1_10 sf
1.159 .116(The ambition of Disciplined C is to be a really high-)J
60 314 :M
-.023(level programming language, with all the confidence and)A
60 324 :M
-.014(ease of use the term "high-level" should convey.)A
60 339 :M
.384 .038(The first idea behind it is that programmers ought to be)J
60 349 :M
1.826 .183(given a tool permitting to render the semantics and)J
60 359 :M
.757 .076(constraints of their programs more apparent, while not)J
60 369 :M
.987 .099(hampering or restraining their creativity, nor inducing)J
60 379 :M
-.007(any run-time loss of efficiency.)A
60 394 :M
.397 .04(Another idea is that a tool should serve its user, instead)J
60 404 :M
3.487 .349(of randomly disseminating traps in his way; so)J
60 414 :M
.146 .015(everything that seems "strange" is flagged. But there are)J
60 424 :M
.655 .065(ways \(via d-pragmas\) to tell that a generally erroneous)J
60 434 :M
.071 .007(situation is perfectly valid in this specific case.)J
60 449 :M
.397 .04(A third idea is that a tool should exhibit clear concepts,)J
60 459 :M
.427 .043(so that the user can easily master it; the last idea is that)J
60 469 :M
2.27 .227(error messages should be indicative enough to put)J
60 479 :M
2.311 .231(programmers back on the right track, and the less)J
60 489 :M
.022 .002(numerous possible \(don't detect twice the same error; try)J
60 499 :M
-.066(to avoid induced errors...\).)A
60 514 :M
.866 .087(Those ideas have been in the mind of the author for a)J
60 524 :M
.504 .05(long time )J
f2_10 sf
.124([)A
f1_10 sf
.796 .08(NOY 88)J
f2_10 sf
.124(])A
f1_10 sf
.446 .045(, but it took him about ten years to)J
60 534 :M
1.118 .112(realize that, instead of regularly complaining about C)J
60 544 :M
-.017(weaknesses and pitfalls, it would be better \(and possible\))A
60 554 :M
1.085 .109(to write a program that reports most of the problems,)J
60 564 :M
.805 .08(and also, last but not least, facilitate the teaching of C)J
60 574 :M
1.659 .166(with due regard to good programming practices and)J
60 584 :M
-.011(conceptual purity.)A
60 599 :M
1.627 .163(The C standard library is another place where some)J
60 609 :M
.304 .03(improvements could be brought: for example, the string)J
60 619 :M
.71 .071(handling function 'strcpy' could return a pointer on the)J
60 629 :M
.305 .031(ending NUL character, and give an easy way to prevent)J
60 639 :M
.813 .081(buffer overflow; or there could exist a function telling)J
60 649 :M
.488 .049(whether a pointer points on a 'free'able area. But this is)J
60 659 :M
.006 .001(unfortunately out of the reach of Disciplined C.)J
60 674 :M
.724 .072(I am much indebted to my colleagues of our computer)J
60 684 :M
.613 .061(science department, with whom discussions were often)J
60 694 :M
2.046 .205(illuminating \(and animated !\). Special thanks to C.)J
60 704 :M
1.078 .108(Bocage, F. Boulanger, D. Marcadet and F. Mullet for)J
60 714 :M
.054 .005(their advice and patience. Also to W. Briscoe \(freelance,)J
60 724 :M
-.036(UK\), for numerous comments/advices.)A
307 74 :M
f0_10 sf
.597(References)A
307 94 :M
f1_10 sf
.104 .01([K&R 88])J
357 94 :M
.037 .004(B.W. Kernighan and D.M. Ritchie)J
357 104 :M
f3_10 sf
-.051(The C Programming Language)A
357 114 :M
f1_10 sf
.273 .027(Prentice Hall, Englewood Cliffs, N.J.,)J
357 124 :M
(1988)S
307 144 :M
-.069([MOD 91])A
357 144 :M
.768 .077(R.P. Mody)J
357 154 :M
f3_10 sf
-.094(C In Education and Software Engineering)A
357 164 :M
f1_10 sf
.364 .036(SIGCSE Bulletin, Vol 23 n)J
cF
f2_10 sf
.036<B0>A
sf
.364 .036( 3,)J
357 174 :M
.172 .017(September 1991, pp 45-56)J
307 194 :M
-.116([NOY 88])A
357 194 :M
.247 .025(Y.L. Noyelle)J
357 204 :M
f3_10 sf
.173 .017(La Saga du LSE \(et de ses cousins LSD/)J
357 214 :M
.428(LSG/LST\))A
357 224 :M
f1_10 sf
-.037(Colloque sur l'histoire de l'Informatique en)A
357 234 :M
.281 .028(France, Vol 2, May 1988, pp 301-310)J
endp
%%Page: 8 8
%%BeginPageSetup
initializepage
(YN; page: 8 of 10)setjob
%%EndPageSetup
-29 -31 :T
gS 29 31 537 780 rC
294 804 :M
f1_10 sf
(8)S
268 75 :M
-.017(APPENDIX A)A
232 97 :M
-.03(Disciplined C grammar  \(LL\(2\) \))A
60 121 :M
-.057(program ::=)A
130 121 :M
-.166(declaration)A
0 -3 rm
(+)S
0 3 rm
60 133 :M
-.151(declaration ::=)A
130 133 :M
-.127(attribute? decl1)A
60 145 :M
(attribute ::=)S
130 145 :M
10 f5_1 :p
24.983 :m
(extern)S
( )S
2 :m
(|)S
( )S
21.101 :m
(static)S
( )S
2 :m
(|)S
( )S
17.217 :m
(auto)S
( )S
2 :m
(|)S
( )S
29.926 :m
-.006(register)A
( )S
2 :m
(|)S
( )S
29.931 :m
-.009(typedef)A
290 145 :M
-.028(-- auto/register allowed only inside function.)A
60 157 :M
-.169(decl1 ::=)A
130 157 :M
-.281(decl2 decl3)A
180 157 :M
-.075(-- 'declarator' \(called by 'decl2'\) must declare an identifier; exceptions: 'attribute' )A
cF
f2_10 sf
-.075<B9>A
sf
190 169 :M
-.016(typedef, and bit-field \(if no identifier => padding\), or 'strun'/'enum' with both 'tag')A
190 181 :M
-.003(and 'member's/'enumElt's \(in such a case, 'declarator' must be empty\).)A
60 193 :M
-.169(decl2 ::=)A
130 193 :M
-.185(qualifier? baseType qualifier? declarator)A
300 193 :M
-.035(-- only one qualifier.)A
60 205 :M
-.13(qualifier ::=)A
130 205 :M
3.38 :m
.052([)A
( )S
21.437 :m
.066(const)A
( )S
2 :m
(|)S
( )S
30.461 :m
.059(volatile)A
( )S
3.38 :m
.052(])A
f1_9 sf
0 -3 rm
(+)S
0 3 rm
220 205 :M
f1_10 sf
.125 .013(-- one of each at most; volatile incompatible with register.)J
60 217 :M
-.092(baseType ::=)A
130 217 :M
-.074(nativeType? )A
2 :m
(|)S
220 217 :M
-.044(-- may only be omitted in case of \(field\) padding.)A
130 229 :M
35 :m
-.183(identifier)A
220 229 :M
-.059(-- "type" identifier.)A
60 241 :M
-.052(nativeType ::=)A
130 241 :M
17.557 :m
-.055(void)A
( )S
2 :m
(|)S
220 241 :M
.04 .004(-- only if function or pointer declaration; then 'qualifier' must be empty.)J
130 253 :M
18.438 :m
.023(float)A
( )S
2 :m
(|)S
( )S
3.328 :m
([)S
( )S
17.89 :m
.028(long)A
( )S
3.328 :m
(])S
(? )S
27.388 :m
.029(double)A
( )S
2 :m
(|)S
130 265 :M
3.384 :m
.056([)A
( )S
36.716 :m
.076(unsigned)A
( )S
2 :m
(|)S
( )S
26.547 :m
.074(signed)A
( )S
3.384 :m
.056(])A
.098 .01(? )J
3.384 :m
.056([)A
( )S
17.495 :m
.073(char)A
( )S
2 :m
(|)S
( )S
20.333 :m
.068(short)A
( )S
3.384 :m
.056([)A
( )S
10.735 :m
.059(int)A
( )S
3.384 :m
.056(])A
.098 .01(? )J
2 :m
(|)S
( )S
10.735 :m
.059(int)A
( )S
2 :m
(|)S
( )S
18.079 :m
.075(long)A
( )S
3.384 :m
.056([)A
( )S
10.735 :m
.059(int)A
( )S
3.384 :m
.056(])A
.098 .01(? )J
3.384 :m
.056(])A
( )S
2 :m
(|)S
130 277 :M
.29 .029(strun )J
2 :m
(|)S
130 289 :M
-.072(enum)A
60 301 :M
.171 .017(strun ::=)J
130 301 :M
3.328 :m
([)S
( )S
22.212 :m
(struct)S
( )S
2 :m
(|)S
( )S
22.778 :m
(union)S
( )S
3.328 :m
(])S
( tag? )S
3.328 :m
([)S
( { member)S
f1_9 sf
0 -3 rm
(+)S
0 3 rm
f1_10 sf
( } )S
3.328 :m
(])S
(?)S
310 301 :M
.137 .014(-- error if no 'tag' nor 'member's, or if one of them)J
240 313 :M
-.042(exist, but the following 'declarator'\(s\) do not each one define an identifier;)A
240 325 :M
.008 .001(if no identifier definition, error if 'attribute' or 'qualifier' non empty.)J
240 337 :M
.307 .031(Exception: a 'strun' with a tag only is legal.)J
60 349 :M
-.051(member ::=)A
130 349 :M
-.414(decl1)A
190 349 :M
.219 .022(-- 'member' must not be a function.)J
60 361 :M
.051 .005(enum ::=)J
130 361 :M
22.419 :m
.051(enum)A
.076 .008( tag? )J
3.328 :m
([)S
.103 .01( { enumElt )J
3.328 :m
([)S
.097 .01( , enumElt )J
3.328 :m
(])S
.056 .006(* } )J
3.328 :m
(])S
(?)S
310 361 :M
.214 .021(-- error if no 'tag' nor 'enumElt's; see also 'strun'.)J
60 373 :M
.054 .005(tag ::=)J
130 373 :M
35 :m
-.183(identifier)A
60 385 :M
.211 .021(enumElt ::=)J
130 385 :M
36.001 :m
-.064(identifier)A
( )S
3.269 :m
-.059([)A
-.071( = cstExp )A
3.269 :m
-.059(])A
(?)S
60 397 :M
-.205(declarator ::=)A
130 397 :M
-.063(pointer* modif1 arrayFct*)A
60 409 :M
(pointer ::=)S
130 411 :M
-.197(*)A
0 -2 rm
-.161( qualifier?)A
0 2 rm
190 409 :M
-.086(-- pointer declaration.)A
60 421 :M
-.065(modif1 ::=)A
130 421 :M
-.136(\( declarator \) )A
2 :m
(|)S
130 433 :M
34.787 :m
-.186(identifier)A
(?)S
190 433 :M
-.035(-- error if 'identifier' omitted and {'attribute' = typedef or 'baseType' )A
cF
f2_10 sf
-.035<B9>A
sf
-.035( 'enum', 'strun'}.)A
60 445 :M
-.091(arrayFct ::=)A
130 445 :M
.044 .004([ cstExp? ] )J
2 :m
(|)S
190 445 :M
-.155(-- array declaration.)A
130 457 :M
-.038(\( parList? \))A
190 457 :M
-.016(-- function declaration; 'attribute' )A
cF
f2_10 sf
-.016<B9>A
sf
-.016( auto/register; return type not array nor function.)A
60 469 :M
(parList ::=)S
130 469 :M
.026 .003(attribute? declPar )J
3.328 :m
([)S
.018 .002( , attribute? declPar )J
3.328 :m
(])S
(* )S
3.328 :m
([)S
( , ... )S
3.328 :m
(])S
(?)S
340 469 :M
-.021(-- only legal 'attribute' = register. If parameter)A
220 481 :M
.004 0(type = void, parameter must not be named, nor 'attribute'd, and must be alone;)J
220 493 :M
-.047(otherwise, parameter names must all be different. If 'parList' called by a 'decla-)A
220 505 :M
-.048(rator' followed by 'block', then each 'declPar' must declare an identifier.)A
60 517 :M
-.168(declPar ::=)A
130 517 :M
-.414(decl2)A
180 517 :M
-.004(-- function type not allowed.)A
60 529 :M
-.169(decl3 ::=)A
130 529 :M
-.006(initOrSizFld? )A
3.328 :m
([)S
-.005( , declarator initOrSizFld? )A
3.328 :m
(])S
(* ; )S
2 :m
(|)S
320 529 :M
.14 .014(-- no 'initOrSizFld' if 'attribute' = typedef , or if no)J
250 541 :M
-.092(identifier declared, or if function declared, or if called via 'member'.)A
130 553 :M
-.054(block)A
180 553 :M
-.08(-- 'declarator' \(called by the 'decl1' that called this 'decl3'\) must have declared a function;)A
375 565 :M
1.528 .153(\312\312\312\312\312'attribute' = extern or static only.)J
60 577 :M
.124 .012(initOrSizFld ::=)J
130 577 :M
.351 .035(= init )J
2 :m
(|)S
130 589 :M
.298 .03(: cstExp)J
180 589 :M
-.03(-- allowed only if called via 'member'.)A
60 601 :M
.57 .057(init ::=)J
130 601 :M
.034 .003(asgnExp )J
2 :m
(|)S
180 601 :M
.079 .008(-- 'asgnExp' allowed only if 'attribute' = auto/register, and 'init' not called by itself.)J
130 613 :M
.158 .016(cstExp )J
2 :m
(|)S
130 625 :M
.345 .034({ init )J
3.462 :m
.134([)A
.247 .025( , init )J
3.462 :m
.134(])A
.251 .025(* )J
3.462 :m
.134([)A
.131 .013( , )J
3.462 :m
.134(])A
.394 .039(? })J
60 637 :M
.048 .005(block ::=)J
130 637 :M
-.109({ declaration* statement* })A
250 637 :M
-.039(-- no function definition allowed among 'declaration's.)A
60 649 :M
(statement ::=)S
130 649 :M
.196 .02(label : statement )J
2 :m
(|)S
130 661 :M
.34 .034(block )J
2 :m
(|)S
.235 .024( ifStmt )J
2 :m
(|)S
.343 .034( switchStmt )J
2 :m
(|)S
.328 .033( returnStmt )J
2 :m
(|)S
.343 .034( whileLoop )J
2 :m
(|)S
.284 .028( doLoop )J
2 :m
(|)S
.286 .029( forLoop )J
2 :m
(|)S
.05 .005( )J
22.693 :m
.098(break)A
.074 .007( ; )J
2 :m
(|)S
.05 .005( )J
35.191 :m
.095(continue)A
.074 .007( ; )J
2 :m
(|)S
130 673 :M
18.04 :m
.065(goto)A
.112 .011( label ; )J
2 :m
(|)S
.179 .018( sideEffects ; )J
2 :m
(|)S
( )S
25.363 :m
.074(empty)A
.07 .007( ;)J
60 685 :M
-.016(label ::=)A
130 685 :M
35 :m
-.183(identifier)A
60 697 :M
.686 .069(ifStmt ::=)J
130 697 :M
6.106 :m
(if)S
.079 .008( \( boolExp \) statement )J
3.328 :m
([)S
( )S
15.643 :m
.025(else)A
.089 .009( statement )J
3.328 :m
(])S
(?)S
60 709 :M
.568 .057(switchStmt ::=)J
130 709 :M
25.971 :m
-.022(switch)A
-.019( \( exp \) { declaration* )A
3.328 :m
([)S
( )S
3.328 :m
([)S
( )S
17.117 :m
-.022(case)A
-.019( cstExp : )A
3.328 :m
(])S
f1_9 sf
0 -3 rm
(+)S
0 3 rm
f1_10 sf
-.021( statement)A
f1_9 sf
0 -3 rm
(+)S
0 3 rm
f1_10 sf
( )S
3.328 :m
(])S
f1_9 sf
0 -3 rm
(+)S
0 3 rm
f1_10 sf
( )S
3.328 :m
([)S
( )S
27.62 :m
-.02(default)A
-.02( : statement)A
f1_9 sf
0 -3 rm
(+)S
0 3 rm
f1_10 sf
( )S
3.328 :m
(])S
-.03(? })A
60 721 :M
.234 .023(returnStmt ::=)J
130 721 :M
23.802 :m
-.012(return)A
( )S
3.328 :m
([)S
-.011( exp )A
3.328 :m
(])S
(? ;)S
60 733 :M
(whileLoop ::=)S
130 733 :M
22.399 :m
.037(while)A
.121 .012( \( boolExp \) statement)J
60 745 :M
-.089(doLoop ::=)A
130 745 :M
10.089 :m
.045(do)A
.125 .012( statement )J
22.412 :m
.04(while)A
.09 .009( \( boolExp \) ;)J
60 757 :M
-.046(forLoop ::=)A
130 757 :M
11.483 :m
-.057(for)A
-.059( \( sideEffects? ; boolExp? ; sideEffects? \) statement)A
60 769 :M
-.151(sideEffects ::=)A
130 769 :M
3.226 :m
-.101([)A
-.11( sideEffect , )A
3.226 :m
-.101(])A
-.133(* sideEffect)A
endp
%%Page: 9 9
%%BeginPageSetup
initializepage
(YN; page: 9 of 10)setjob
%%EndPageSetup
-29 -31 :T
gS 29 31 537 780 rC
294 804 :M
f1_10 sf
(9)S
60 76 :M
-.171(sideEffect ::=)A
130 76 :M
-.073(asgnExp)A
190 76 :M
.155 .016(-- warning if top operator of 'asgnExp' is not one of 'incDec', 'asgnOp', call to a)J
375 88 :M
.082 .008(function returning void, or cast to void.)J
60 100 :M
.208 .021(boolExp ::=)J
130 100 :M
-.219(exp)A
190 100 :M
.03 .003(-- of boolean type.)J
60 112 :M
.047 .005(cstExp ::=)J
130 112 :M
-.073(asgnExp)A
190 112 :M
.197 .02(-- computable at compilation time.)J
60 124 :M
-.022(exp ::=)A
130 124 :M
10 f5_1 :p
3.328 :m
([)S
-.041( sideEffect , )A
3.328 :m
(])S
-.059(* asgnExp)A
60 136 :M
-.013(asgnExp ::=)A
130 136 :M
-.063(condExp )A
3.328 :m
([)S
-.06( asgnOp asgnExp )A
3.328 :m
(])S
(?)S
60 148 :M
-.027(asgnOp ::=)A
130 148 :M
.1 .01(= )J
2 :m
(|)S
.078 .008( |= )J
2 :m
(|)S
.094 .009( ^= )J
2 :m
(|)S
.113 .011( &= )J
2 :m
(|)S
.13 .013( <<= )J
2 :m
(|)S
.13 .013( >>= )J
2 :m
(|)S
.1 .01( += )J
2 :m
(|)S
.086 .009( -= )J
2 :m
(|)S
( )S
0 2 rm
.074(*)A
0 -2 rm
.1 .01(= )J
2 :m
(|)S
.083 .008( /= )J
2 :m
(|)S
.203 .02( %=)J
60 160 :M
-.124(condExp ::=)A
130 160 :M
-.025(term0 )A
3.328 :m
([)S
-.024( ? exp : condExp )A
3.328 :m
(])S
(?)S
60 172 :M
(term0 ::=)S
130 172 :M
.156 .016(term1 )J
3.328 :m
([)S
.084 .008( || term1 )J
3.328 :m
(])S
(*)S
60 184 :M
(term1 ::=)S
130 184 :M
.22 .022(term2 )J
3.328 :m
([)S
.158 .016( && term2 )J
3.328 :m
(])S
(*)S
60 196 :M
(term2 ::=)S
130 196 :M
.161 .016(term3 )J
3.328 :m
([)S
.084 .008( | term3 )J
3.328 :m
(])S
(*)S
60 208 :M
(term3 ::=)S
130 208 :M
-.058(term4 )A
3.328 :m
([)S
-.054( ^ term4 )A
3.328 :m
(])S
(*)S
60 220 :M
(term4 ::=)S
130 220 :M
.195 .02(term5 )J
3.328 :m
([)S
.12 .012( & term5 )J
3.328 :m
(])S
(*)S
60 232 :M
(term5 ::=)S
130 232 :M
-.05(term6 )A
3.328 :m
([)S
-.05( equalOp term6 )A
3.328 :m
(])S
(*)S
60 244 :M
-.157(equalOp ::=)A
130 244 :M
-.21(== )A
1.908 :m
-.091(|)A
-.262( !=)A
60 256 :M
(term6 ::=)S
130 256 :M
-.068(term7 )A
3.275 :m
-.053([)A
-.068( orderOp term7 )A
3.275 :m
-.053(])A
(*)S
60 268 :M
-.201(orderOp ::=)A
130 268 :M
.391 .039(> )J
2.115 :m
.115(|)A
.391 .039( >= )J
2.115 :m
.115(|)A
.391 .039( <= )J
2.115 :m
.115(|)A
.427 .043( <)J
60 280 :M
(term7 ::=)S
130 280 :M
.116 .012(term8 )J
3.328 :m
([)S
.097 .01( shiftOp term8 )J
3.328 :m
(])S
(*)S
60 292 :M
.156 .016(shiftOp ::=)J
130 292 :M
.876 .088(>> )J
2.165 :m
.165(|)A
.948 .095( <<)J
60 304 :M
(term8 ::=)S
130 304 :M
-.089(term9 )A
3.259 :m
-.069([)A
-.091( addOp term9 )A
3.259 :m
-.069(])A
(*)S
60 316 :M
-.206(addOp  ::=)A
130 316 :M
.439 .044(+ )J
2.129 :m
.129(|)A
.343 .034( -)J
60 328 :M
(term9 ::=)S
130 328 :M
.158 .016(term10 )J
3.328 :m
([)S
.126 .013( mulOp term10 )J
3.328 :m
(])S
(*)S
60 340 :M
.293 .029(mulOp ::=)J
130 342 :M
.315(*)A
0 -2 rm
.143 .014( )J
0 2 rm
0 -2 rm
2.125 :m
.126(|)A
0 2 rm
0 -2 rm
.213 .021( / )J
0 2 rm
0 -2 rm
2.125 :m
.126(|)A
0 2 rm
0 -2 rm
.62 .062( %)J
0 2 rm
60 352 :M
(term10 ::=)S
130 352 :M
.396 .04(prim  )J
2 :m
(|)S
130 364 :M
-.02(unaryOp term10 )A
2 :m
(|)S
130 376 :M
23.167 :m
-.117(sizeof)A
-.118( \( declPar \))A
220 376 :M
-.066(-- 'declPar' must not declare any identifier.)A
60 388 :M
-.068(unaryOp ::=)A
130 388 :M
.044 .004(~ )J
2 :m
(|)S
.024 .002( ! )J
2 :m
(|)S
( )S
0 2 rm
(*)S
0 -2 rm
( )S
2 :m
(|)S
.037 .004( & )J
2 :m
(|)S
.078 .008( addOp )J
2 :m
(|)S
( )S
24.032 :m
.027(sizeof)A
( )S
2 :m
(|)S
.053 .005( cast )J
2 :m
(|)S
.129 .013( incDec)J
60 400 :M
-.034(cast ::=)A
130 400 :M
-.164(\( declPar \))A
220 400 :M
-.026(-- 'declPar' must not declare any identifier, and the result type may not be)A
445 412 :M
.03(struct/union/function.)A
60 424 :M
-.112(incDec ::=)A
130 424 :M
.453 .045(++ )J
2.085 :m
.085(|)A
.326 .033( --)J
60 436 :M
.247 .025(prim ::=)J
130 436 :M
.073 .007(prim1 primQualif*)J
60 448 :M
.233 .023(prim1 ::=)J
130 448 :M
(\( exp \) )S
2 :m
(|)S
( constant )S
2 :m
(|)S
( )S
36.646 :m
(identifier)S
60 460 :M
-.009(primQualif ::=)A
130 460 :M
.041 .004(\( argList \) )J
2 :m
(|)S
.026 .003( [ exp ] )J
2 :m
(|)S
( . )S
36.794 :m
.015(identifier)A
( )S
2 :m
(|)S
.023 .002( -> )J
36.794 :m
.015(identifier)A
( )S
2 :m
(|)S
.078 .008( incDec)J
60 472 :M
(argList ::=)S
130 472 :M
3.328 :m
([)S
.11 .011( asgnExp )J
3.328 :m
([)S
.087 .009( , asgnExp )J
3.328 :m
(])S
.05 .005(* )J
3.328 :m
(])S
(?)S
60 484 :M
(constant ::=)S
130 484 :M
.051 .005(' )J
37.145 :m
.058(character)A
.042 .004( ' )J
2 :m
(|)S
.056 .006( " )J
23.096 :m
.054(string)A
.056 .006( " )J
3.328 :m
([)S
.056 .006( " )J
23.096 :m
.054(string)A
.056 .006( " )J
3.328 :m
(])S
.089 .009(* )J
2 :m
(|)S
.183 .018( sgndNb )J
2 :m
(|)S
( )S
30.977 :m
.087(number)A
60 496 :M
-.089(sgndNb ::=)A
130 496 :M
3.401 :m
.073([)A
.102 .01( + )J
2 :m
(|)S
.079 .008( - )J
3.401 :m
.073(])A
.05 .005( )J
31.216 :m
.134(number)A
60 532 :M
.164 .016(Syntactic restrictions with respect to ANSI C:)J
70 556 :M
(-)S
78 556 :M
-.006(no old-style function definition,)A
70 568 :M
(-)S
78 568 :M
-.077(imposed order for 'attribute' and 'qualifier',)A
70 580 :M
(-)S
78 580 :M
-.009(no default 'int' baseType,)A
70 592 :M
(-)S
78 592 :M
.117 .012(a switch must control a block; 'default' must come as last case; 'case', 'default' not labels.)J
60 616 :M
.166 .017(Semantic restrictions with respect to ANSI C:)J
70 640 :M
(-)S
78 640 :M
-.006(braces in initializer only to indicate initialization of compound object \(array/struct/union\),)A
70 652 :M
(-)S
78 652 :M
.157 .016(enum, char\312: types by themselves \(not considered as int\),)J
70 664 :M
(-)S
78 664 :M
-.02(automatic arithmetic conversions only from narrower to wider type,)A
70 676 :M
(-)S
78 676 :M
-.072(identifiers may never be declared more than once in the same scope \(except in header files\),)A
70 688 :M
(-)S
78 688 :M
-.129(macros \(#define\) cannot be declared more than once \(if not '#undef'ed beforehand\),)A
70 700 :M
(-)S
78 700 :M
.024 .002(labels local to blocks \(but cannot be duplicated in a given function\),)J
70 712 :M
(-)S
78 712 :M
-.024(a function or array is different from a pointer on the same function/array,)A
70 724 :M
(-)S
78 724 :M
-.043(left operand of indexation must be array/pointer,)A
70 736 :M
(-)S
78 736 :M
-.055('void )A
0 2 rm
-.074(*)A
0 -2 rm
-.06('  only universal receiver for pointers \(cast or d-pragma needed the other way around, except for NULL\).)A
endp
%%Page: 10 10
%%BeginPageSetup
initializepage
(YN; page: 10 of 10)setjob
%%EndPageSetup
-29 -31 :T
gS 29 31 537 780 rC
292 804 :M
f1_10 sf
(10)S
227 74 :M
f1_9 sf
-.305(APPENDIX B)A
60 94 :M
f7_9 sf
-.404(/**************************************************************************/)A
60 104 :M
-.404(/*      Sum of two matrix of arbitrary size \(without use of pointer\)      */)A
60 114 :M
-.404(/**************************************************************************/)A
60 124 :M
-.422(#include <stdio.h>)A
60 134 :M
-.419(#include "dynarray.h")A
60 154 :M
-.413(/* 'bool' type definition */)A
60 164 :M
-.415(typedef unsigned int bool;)A
60 174 :M
-.418(#define FALSE \(0 != 0\))A
60 184 :M
-.418(#define TRUE  \(0 == 0\))A
60 204 :M
-.409(/* type definition for matrix elements */)A
60 214 :M
-.422(typedef float Num;)A
60 224 :M
-.408(/* type definition for variable-size matrix */)A
60 234 :M
-.412(typedef DynArray2\(Num\) DynArr;)A
60 244 :M
-.41(typedef DynArray2\(const Num\) CDynArr;)A
60 264 :M
-.412(/* Models \(function profiles\) */)A
60 274 :M
-.409(static void print\(CDynArr\), read\(DynArr\);)A
60 284 :M
-.41(static DynArr add\(CDynArr, CDynArr\);)A
60 304 :M
-.443(int main\(\))A
60 314 :M
-.412({ bool ok;  unsigned int i, j;)A
60 324 :M
-.404(  DynArr mat1 = NULL, mat2 = NULL, resMat;  /* matrix declarations \(resMat)A
340 334 :M
-.412(allocated by 'add' function\). */)A
60 344 :M
-.478(  do {)A
60 354 :M
-.429(    for \(;;\) {)A
60 364 :M
-.408(      printf\("\\nEnter matrix dimensions: "\);)A
60 374 :M
-.403(      if \(scanf\("%u%u",&i,&j\) == 2\) break;  /* exit loop if numbers read are correct */)A
60 384 :M
-.405(      while \(getchar\(\) != '\\n'\) {}}  /* flush input buffer */)A
60 394 :M
-.404(    AllocDynArray2\(mat1, i, j, &ok\);  /* allocate space for matrix 'mat1', freeing)A
410 404 :M
-.415(possible previous one. */)A
60 414 :M
-.406(    if \(! ok\) printf\("\\n memory overflow for 1st matrix"\);)A
60 424 :M
-.443(    else {)A
60 434 :M
-.409(      printf\("\\nmat1=\\n"\); read\(mat1\);)A
60 444 :M
-.409(      AllocDynArray2\(mat2, i, j, &ok\);)A
60 454 :M
-.405(      if \(! ok\) printf\("\\n memory overflow for 2nd matrix"\);)A
60 464 :M
-.435(      else {)A
60 474 :M
-.409(        printf\("\\nmat2=\\n"\); read\(mat2\);)A
60 484 :M
-.407(        resMat = add\(mat1, mat2\); print\(resMat\);)A
60 494 :M
-.405(        FreeDynArray2\(resMat\);}}  /* free result matrix space */)A
60 504 :M
-.421(  } while \(i != 0\);)A
60 514 :M
-.439(  return 0;)A
60 524 :M
(})S
60 544 :M
-.415(static void read\(DynArr x\))A
60 554 :M
-.413({ unsigned int i, j, l1, l2;)A
60 574 :M
-.405(  LimDynArray2\(x, &l1, &l2\); /* get dimensions of matrix 'x' */)A
60 584 :M
-.403(  for \(i = 0; i < l1; i++\)  {for \(j = 0; j < l2; j++\) {\(void\)scanf\("%g", &x[i][j]\);}})A
60 594 :M
(})S
60 614 :M
-.413(static void print\(CDynArr x\))A
60 624 :M
-.413({ unsigned int i, j, l1, l2;)A
60 644 :M
-.427(  printf\("\\n"\);)A
60 654 :M
-.413(  LimDynArray2\(x, &l1, &l2\);)A
60 664 :M
-.403(  for \(i = 0; i < l1; i++\)  {for \(j = 0; j < l2; j++\) {printf\("%g ", x[i][j]\);} printf\("\\n"\);})A
60 674 :M
(})S
60 694 :M
-.409(static DynArr add\(CDynArr x, CDynArr y\))A
60 704 :M
-.406({ unsigned int i, j, l1, l2;  bool ok;  DynArr z = NULL;)A
60 724 :M
-.413(  LimDynArray2\(x, &l1, &l2\);)A
60 734 :M
-.404(  AllocDynArray2\(z, l1, l2, &ok\);  /* allocate space for result matrix */)A
60 744 :M
-.406(  if \(! ok\) printf\("\\n memory overflow for result matrix"\);)A
60 754 :M
-.403(  else for \(i = 0; i < l1; i++\)  {for \(j = 0; j < l2; j++\) {z[i][j] = x[i][j] + y[i][j];}})A
60 764 :M
-.439(  return z;)A
60 774 :M
(})S
endp
%%Trailer
end
%%EOF
