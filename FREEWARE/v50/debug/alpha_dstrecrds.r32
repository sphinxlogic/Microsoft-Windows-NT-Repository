! 
! ****************************************************************************
! *                                                                          *
! *  Copyright (c) 1998                                                      *
! *  by DIGITAL Equipment Corporation, Maynard, Mass.                        *
! *  All rights reserved.						    *
! *                                                                          *
! *  This software is furnished under a license and may be used and  copied  *
! *  only  in  accordance  with  the  terms  of  such  license and with the  *
! *  inclusion of the above copyright notice.  This software or  any  other  *
! *  copies  thereof may not be provided or otherwise made available to any  *
! *  other person.  No title to and ownership of  the  software  is  hereby  *
! *  transferred.                                                            *
! *                                                                          *
! *  The information in this software is subject to change  without  notice  *
! *  and  should  not  be  construed  as  a commitment by DIGITAL Equipment  *
! *  Corporation.                                                            *
! *                                                                          *
! *  DIGITAL assumes no responsibility for the use or  reliability  of  its  *
! *  software on equipment which is not supplied by DIGITAL.                 *
! *                                                                          *
! ********************************************************************************************************************************
!  Created:  8-JUN-1998 10:33:23 by OpenVMS SDL EV1-53     
!  Source:   8-JUN-1998 10:32:48 MAWK$DKA300:[ARSENAULT.EVMS.CODE]ALPHA_DSTRECRD 
! ********************************************************************************************************************************
 
!*** MODULE ALPHA_DSTRECRDS ***
FIELD DBG$DMT_PSECT_FIELDSET =
  SET
  dbg$l_dmt_psect_start = [0,0,32,0],
  dbg$l_dmt_psect_length = [4,0,32,0]
  TES;
literal S_DBG$DMT_PSECT = 8;
MACRO DBG$DMT_PSECT = BLOCK [S_DBG$DMT_PSECT,byte] FIELD (DBG$DMT_PSECT_FIELDSET) %;
literal DBG$K_DMT_PSECT_SIZE = 8;
FIELD DBG$DMT_HEADER_FIELDSET =
  SET
  dbg$l_dmt_modbeg = [0,0,32,0],
  dbg$l_dmt_dst_size = [4,0,32,0],
  dbg$w_dmt_psect_count = [8,0,16,0],
  dbg$w_dmt_mbz = [10,0,16,0]
  TES;
literal S_DBG$DMT_HEADER = 12;
MACRO DBG$DMT_HEADER = BLOCK [S_DBG$DMT_HEADER,byte] FIELD (DBG$DMT_HEADER_FIELDSET) %;
literal DBG$K_DMT_HEADER_SIZE = 12;
MACRO dbg$a_dmt_psect_base = DBG$K_DMT_HEADER_SIZE, 0, 0, 0%;
macro DST$DTYPE = 0,0,16,0 %;
literal DSC$K_DTYPE_LOWEST = 1;
literal DSC$K_DTYPE_HIGHEST = 39;
literal DSC$K_DTYPE_TF = 40;
literal DSC$K_DTYPE_SV = 41;
literal DSC$K_DTYPE_SVU = 42;
literal DSC$K_DTYPE_FIXED = 43;
literal DSC$K_DTYPE_TASK = 44;
literal DSC$K_DTYPE_AC = 45;
literal DSC$K_DTYPE_AZ = 46;
literal DSC$K_DTYPE_M68_S = 47;
literal DSC$K_DTYPE_M68_D = 48;
literal DSC$K_DTYPE_M68_X = 49;
literal DSC$K_DTYPE_1750_S = 50;
literal DSC$K_DTYPE_1750_X = 51;
literal DBG$K_MINIMUM_DTYPE = 0;
literal DBG$K_MAXIMUM_DTYPE = 58;
literal DSC$K_DTYPE_LITERAL = 191;
literal DBG$K_DTYPE_AD = 192;
literal DST$K_BLI = 0;
literal DST$K_LOWEST = 116;
literal DST$K_SYMBOL_FIXUP_64 = 116;
literal DST$K_FIXUP_64 = 117;
literal DST$K_DIS_RANGE = 118;
literal DST$K_PROLOG_LIST = 119;
literal DST$K_RTN_UNALLOC = 120;
literal DST$K_SYMBOL_FIXUP = 121;
literal DST$K_BASE_CLASS = 122;
literal DST$K_TEMP_DECL = 123;
literal DST$K_VIRT_FUNC = 124;
literal DST$K_EXCEPTION = 125;
literal DST$K_RETURN = 126;
literal DST$K_EPILOG = 127;
literal DST$K_REG_SAVE_END = 128;
literal DST$K_REG_SAVE = 129;
literal DST$K_REG_SAVE_BEGIN = 130;
literal DST$K_BLIFLDBEG = 131;
literal DST$K_BLIFLDEND = 132;
literal DST$K_FULFILLS_TYPE = 133;
literal DST$K_FIXUP = 134;
literal DST$K_IMAGE = 135;
literal DST$K_INLINE = 136;
literal DST$K_EPILOGS = 137;
literal DST$K_TYPE_SIG = 138;
literal DST$K_EDIT_SOURCE = 139;
literal DST$K_ALIAS = 140;
literal DST$K_CXX_ATTRIBUTES = 141;
literal DST$K_GOTO = 142;
literal DST$K_TARGET = 143;
literal DST$K_REAL_NAME = 144;
literal DST$K_BODY_SPEC = 145;
literal DST$K_PACK_SPEC_BEG = 146;
literal DST$K_PACK_SPEC_END = 147;
literal DST$K_PACK_BODY_BEG = 148;
literal DST$K_PACK_BODY_END = 149;
literal DST$K_SUBUNIT = 150;
literal DST$K_SET_MODULE = 151;
literal DST$K_USE_CLAUSE = 152;
literal DST$K_VERSION = 153;
literal DST$K_COBOLGBL = 154;
literal DST$K_SOURCE = 155;
literal DST$K_STATLINK = 156;
literal DST$K_VARVAL = 157;
literal DST$K_BOOL = 158;
literal DST$K_EXTRNXT = 159;
literal DST$K_GLOBNXT = 160;
literal DSC$K_DTYPE_UBS = 161;
literal DST$K_PROLOG = 162;
literal DST$K_SEPTYP = 163;
literal DST$K_ENUMELT = 164;
literal DST$K_ENUMBEG = 165;
literal DST$K_ENUMEND = 166;
literal DST$K_VARBEG = 167;
literal DST$K_VAREND = 168;
literal DST$K_OVERLOAD = 169;
literal DST$K_DEF_LNUM = 170;
literal DST$K_RECBEG = 171;
literal DST$K_RECEND = 172;
literal DST$K_CONTIN = 173;
literal DST$K_VALSPEC = 174;
literal DST$K_TYPSPEC = 175;
literal DST$K_BLKBEG = 176;
literal DST$K_BLKEND = 177;
literal DST$K_COB_HACK = 178;
literal DST$K_DTYPE_RESERVED_1 = 179;
literal DST$K_USING = 180;
literal DST$K_ENTRY = 181;
literal DST$K_LINE_NUM_REL_R11 = 182;
literal DST$K_BLIFLD = 183;
literal DST$K_PSECT = 184;
literal DST$K_LINE_NUM = 185;
literal DST$K_LBLORLIT = 186;
literal DST$K_LABEL = 187;
literal DST$K_MODBEG = 188;
literal DST$K_MODEND = 189;
literal DST$K_RTNBEG = 190;
literal DST$K_RTNEND = 191;
literal DST$K_PCLOC = 192;
literal DST$K_HIGHEST = 192;
FIELD DST$HEADER_FIELDSET =
  SET
    dst$w_length = [0,0,16,0],
    dst$x_length = [0,0,16,0],
  dst$$header_length = [0,0,16,0],
    dst$w_type = [2,0,16,0],
    dst$x_type = [2,0,16,0],
  dst$$header_type = [2,0,16,0]
  TES;
literal S_DST$HEADER = 4;
MACRO DST$HEADER = BLOCK [S_DST$HEADER,byte] FIELD (DST$HEADER_FIELDSET) %;
literal DST$K_DST_BASE_FOR_NEXT = 2;
literal DST$K_DST_HEADER_SIZE = 4;
literal DST$K_LENGTH_LENGTH = 2;
literal DST$K_LENGTH_TYPE = 2;
MACRO dst$a_next = DST$K_DST_BASE_FOR_NEXT, 0, 0, 0%;
MACRO $DBG$FIELD_TO_MACRO(fieldname)[] =
    COMPILETIME
	dbg$$n = %FIELDEXPAND(fieldname,0),
	dbg$$p = %FIELDEXPAND(fieldname,1),
	dbg$$s = %FIELDEXPAND(fieldname,2),
	dbg$$e = %FIELDEXPAND(fieldname,3);
    UNDECLARE
	fieldname;
    MACRO
        fieldname = %quote %expand %number(dbg$$n),
		    %quote %expand %number(dbg$$p),
		    %quote %expand %number(dbg$$s),
		    %quote %expand %number(dbg$$e) %QUOTE % ;
    UNDECLARE
	    dbg$$n, dbg$$p, dbg$$s, dbg$$e;
    $DBG$FIELD_TO_MACRO(%REMAINING)
    %;
$DBG$FIELD_TO_MACRO(DST$W_LENGTH, DST$X_LENGTH, DST$W_TYPE, DST$X_TYPE);
UNDECLARE
    %QUOTE $DBG$FIELD_TO_MACRO ;
macro DST$LANGUAGE = 0,0,32,0 %;
macro DBG$DST_LANGUAGE = 0,0,8,0 %;
literal DST$K_MIN_LANGUAGE = 0;
literal DST$K_MACRO = 0;
literal DST$K_FORTRAN = 1;
literal DST$K_BLISS = 2;
literal DST$K_COBOL = 3;
literal DST$K_BASIC = 4;
literal DST$K_PLI = 5;
literal DST$K_PASCAL = 6;
literal DST$K_C = 7;
literal DST$K_RPG = 8;
literal DST$K_ADA = 9;
literal DST$K_UNKNOWN = 10;
literal DST$K_SCAN = 11;
literal DST$K_DIBOL = 12;
literal DST$K_MODULA = 13;
literal DST$K_PILLAR = 14;
literal DST$K_CXX = 15;
literal DST$K_AMACRO = 16;
literal DST$K_MACRO64 = 17;
literal DST$K_MAX_LANGUAGE = 17;
literal DBG$K_MIN_LANGUAGE = 0;
literal DBG$K_MACRO = 0;
literal DBG$K_FORTRAN = 1;
literal DBG$K_BLISS = 2;
literal DBG$K_COBOL = 3;
literal DBG$K_BASIC = 4;
literal DBG$K_PLI = 5;
literal DBG$K_PASCAL = 6;
literal DBG$K_C = 7;
literal DBG$K_RPG = 8;
literal DBG$K_ADA = 9;
literal DBG$K_UNKNOWN = 10;
literal DBG$K_SCAN = 11;
literal DBG$K_DIBOL = 12;
literal DBG$K_MODULA = 13;
literal DBG$K_PILLAR = 14;
literal DBG$K_CXX = 15;
literal DBG$K_AMACRO = 16;
literal DBG$K_MACRO64 = 17;
literal DBG$K_MAX_LANGUAGE = 17;
FIELD DST$MODULE_BEGIN_FIELDSET =
  SET
  dst$a_modbeg_header = [0,0,32,0],
    dst$v_modbeg_hide = [4,0,1,0],
    dst$v_modbeg_version = [4,1,1,0],
    dst$v_modbeg_unused = [4,2,6,0],
  dst$b_modbeg_flags = [4,0,8,0],
  dst$b_modbeg_unused = [5,0,8,0],
  dst$l_modbeg_language = [6,0,32,0],
  dst$w_version_major = [10,0,16,0],
  dst$w_version_minor = [12,0,16,0],
  dst$b_modbeg_name = [14,0,8,0]
  TES;
literal S_DST$MODULE_BEGIN = 15;
MACRO DST$MODULE_BEGIN = BLOCK [S_DST$MODULE_BEGIN,byte] FIELD (DST$MODULE_BEGIN_FIELDSET) %;
literal DST$K_MODBEG_SIZE = 15;
MACRO dst$a_modbeg_trlr = DST$K_MODBEG_SIZE, 0, 0, 0%;
FIELD DST$MB_TRLR_FIELDSET =
  SET
  dst$b_compiler = [0,0,8,0]
  TES;
literal S_DST$MB_TRLR = 1;
MACRO DST$MB_TRLR = BLOCK [S_DST$MB_TRLR,byte] FIELD (DST$MB_TRLR_FIELDSET) %;
literal DST$K_MB_TRLR_SIZE = 1;
literal DST$K_MAJOR_ID_0 = 0;
literal DST$K_MAJOR_ID_1 = 1;
literal DST$K_MIN_MAJOR_ID = 0;
literal DST$K_MAX_MAJOR_ID = 1;
literal DST$K_MAJOR_ID_0_MINOR_ID_0 = 0;
literal DST$K_MAJOR_ID_0_MINOR_ID_1 = 1;
literal DST$K_MAJOR_ID_0_MINOR_ID_2 = 2;
literal DST$K_MAJOR_ID_0_MINOR_ID_3 = 3;
literal DST$K_MAJOR_ID_0_MIN_MINOR_ID = 0;
literal DST$K_MAJOR_ID_0_MAX_MINOR_ID = 3;
literal DST$K_MAJOR_ID_1_MINOR_ID_0 = 0;
literal DST$K_MAJOR_ID_1_MINOR_ID_1 = 1;
literal DST$K_MAJOR_ID_1_MINOR_ID_2 = 2;
literal DST$K_MAJOR_ID_1_MINOR_ID_3 = 3;
literal DST$K_MAJOR_ID_1_MINOR_ID_4 = 4;
literal DST$K_MAJOR_ID_1_MINOR_ID_5 = 5;
literal DST$K_MAJOR_ID_1_MINOR_ID_6 = 6;
literal DST$K_MAJOR_ID_1_MINOR_ID_7 = 7;
literal DST$K_MAJOR_ID_1_MINOR_ID_8 = 8;
literal DST$K_MAJOR_ID_1_MINOR_ID_9 = 9;
literal DST$K_MAJOR_ID_1_MINOR_ID_10 = 10;
literal DST$K_MAJOR_ID_1_MINOR_ID_11 = 11;
literal DST$K_MAJOR_ID_1_MINOR_ID_12 = 12;
literal DST$K_MAJOR_ID_1_MINOR_ID_13 = 13;
literal DST$K_MAJOR_ID_1_MINOR_ID_14 = 14;
literal DST$K_MAJOR_ID_1_MINOR_ID_15 = 15;
literal DST$K_MAJOR_ID_1_MINOR_ID_16 = 16;
literal DST$K_MAJOR_ID_1_MINOR_ID_17 = 17;
literal DST$K_MAJOR_ID_1_MINOR_ID_18 = 18;
literal DST$K_MAJOR_ID_1_MAX_MINOR_ID = 18;
literal DST$K_MAJOR_FIELD_TEST = 0;
literal DST$K_MINOR_FIELD_TEST = 3;
literal DST$K_VERSION_MAJOR = 1;
literal DST$K_VERSION_MINOR = 18;
FIELD DST$MODULE_END_FIELDSET =
  SET
  dst$a_modend_header = [0,0,32,0]
  TES;
literal S_DST$MODULE_END = 4;
MACRO DST$MODULE_END = BLOCK [S_DST$MODULE_END,byte] FIELD (DST$MODULE_END_FIELDSET) %;
literal DST$K_MODEND_SIZE = 4;
FIELD DST$ROUTINE_BEGIN_FIELDSET =
  SET
  dst$a_rtnbeg_header = [0,0,32,0],
    dst$v_rtnbeg_unused = [4,0,4,0],
    dst$v_rtnbeg_unalloc = [4,4,1,0],
    dst$v_rtnbeg_prototype = [4,5,1,0],
    dst$v_rtnbeg_notused = [4,6,1,0],
    dst$v_rtnbeg_no_call = [4,7,1,0],
  dst$b_rtnbeg_flags = [4,0,8,0],
  dst$l_rtnbeg_address = [5,0,32,0],
  dst$l_rtnbeg_pd_address = [9,0,32,0],
  dst$b_rtnbeg_name = [13,0,8,0]
  TES;
literal S_DST$ROUTINE_BEGIN = 14;
MACRO DST$ROUTINE_BEGIN = BLOCK [S_DST$ROUTINE_BEGIN,byte] FIELD (DST$ROUTINE_BEGIN_FIELDSET) %;
literal DST$K_RTNBEG_SIZE = 14;
FIELD DST$ROUTINE_END_FIELDSET =
  SET
  dst$a_rtnend_header = [0,0,32,0],
  dst$b_rtnend_unused = [4,0,8,1],
  dst$l_rtnend_size = [5,0,32,0]
  TES;
literal S_DST$ROUTINE_END = 9;
MACRO DST$ROUTINE_END = BLOCK [S_DST$ROUTINE_END,byte] FIELD (DST$ROUTINE_END_FIELDSET) %;
literal DST$K_RTNEND_SIZE = 9;
FIELD DST$ROUTINE_UNALLOC_FIELDSET =
  SET
  dst$a_rtnunalloc_header = [0,0,32,0],
  dst$b_rtnunalloc_name = [4,0,8,0]
  TES;
literal S_DST$ROUTINE_UNALLOC = 5;
MACRO DST$ROUTINE_UNALLOC = BLOCK [S_DST$ROUTINE_UNALLOC,byte] FIELD (DST$ROUTINE_UNALLOC_FIELDSET) %;
literal DST$K_RTNUNALLOC_SIZE = 5;
FIELD DST$INLINE_FIELDSET =
  SET
  dst$a_inline_header = [0,0,32,0],
  dst$l_inline_rtn_dst = [4,0,32,0],
  dst$l_inline_caller_line = [8,0,32,0]
  TES;
literal S_DST$INLINE = 12;
MACRO DST$INLINE = BLOCK [S_DST$INLINE,byte] FIELD (DST$INLINE_FIELDSET) %;
literal DST$K_INLINE_SIZE = 12;
FIELD DST$BLOCK_BEGIN_FIELDSET =
  SET
  dst$a_blkbeg_header = [0,0,32,0],
  dst$b_blkbeg_unused = [4,0,8,0],
  dst$l_blkbeg_address = [5,0,32,0],
  dst$b_blkbeg_name = [9,0,8,0]
  TES;
literal S_DST$BLOCK_BEGIN = 10;
MACRO DST$BLOCK_BEGIN = BLOCK [S_DST$BLOCK_BEGIN,byte] FIELD (DST$BLOCK_BEGIN_FIELDSET) %;
literal DST$K_BLKBEG_SIZE = 10;
FIELD DST$BLOCK_END_FIELDSET =
  SET
  dst$a_blkend_header = [0,0,32,0],
  dst$b_blkend_unused = [4,0,8,0],
  dst$l_blkend_size = [5,0,32,0]
  TES;
literal S_DST$BLOCK_END = 9;
MACRO DST$BLOCK_END = BLOCK [S_DST$BLOCK_END,byte] FIELD (DST$BLOCK_END_FIELDSET) %;
literal DST$K_BLKEND_SIZE = 9;
literal DST$K_NOELAB = 0;
literal DST$K_ELAB_NOCALL = 1;
literal DST$K_ELAB_CALL = 2;
FIELD DST$PACKAGE_SPEC_BEGIN_FIELDSET =
  SET
  dst$a_packspec_beg_header = [0,0,32,0],
    dst$v_packspec_elab = [4,0,2,0],
    dst$v_packspec_dupl = [4,2,1,0],
    dst$v_packspec_beg_unused = [4,3,5,0],
  dst$b_packspec_flags = [4,0,8,0],
  dst$l_packspec_address = [5,0,32,0],
  dst$l_packspec_pd_address = [9,0,32,0],
  dst$b_packspec_name = [13,0,8,0]
  TES;
literal S_DST$PACKAGE_SPEC_BEGIN = 14;
MACRO DST$PACKAGE_SPEC_BEGIN = BLOCK [S_DST$PACKAGE_SPEC_BEGIN,byte] FIELD (DST$PACKAGE_SPEC_BEGIN_FIELDSET) %;
literal DST$K_PACKSPEC_BEG_SIZE = 14;
FIELD DST$PACKAGE_SPEC_END_FIELDSET =
  SET
  dst$a_packspec_end_header = [0,0,32,0],
  dst$b_packspec_end_unused = [4,0,8,0],
  dst$l_packspec_end_size = [5,0,32,0]
  TES;
literal S_DST$PACKAGE_SPEC_END = 9;
MACRO DST$PACKAGE_SPEC_END = BLOCK [S_DST$PACKAGE_SPEC_END,byte] FIELD (DST$PACKAGE_SPEC_END_FIELDSET) %;
literal DST$K_PACKSPEC_END_SIZE = 9;
FIELD DST$PACKAGE_BODY_BEGIN_FIELDSET =
  SET
  dst$a_packbody_beg_header = [0,0,32,0],
    dst$v_packbody_elab = [4,0,2,0],
    dst$v_packbody_mbz = [4,2,6,0],
  dst$b_packbody_flags = [4,0,8,0],
  dst$l_packbody_address = [5,0,32,0],
  dst$l_packbody_pd_address = [9,0,32,0],
  dst$b_packbody_name = [13,0,8,0]
  TES;
literal S_DST$PACKAGE_BODY_BEGIN = 14;
MACRO DST$PACKAGE_BODY_BEGIN = BLOCK [S_DST$PACKAGE_BODY_BEGIN,byte] FIELD (DST$PACKAGE_BODY_BEGIN_FIELDSET) %;
literal DST$K_PACKBODY_BEG_SIZE = 14;
FIELD DST$PACKAGE_BODY_END_FIELDSET =
  SET
  dst$a_packbody_end_header = [0,0,32,0],
  dst$b_packbody_end_unused = [4,0,8,0],
  dst$l_packbody_end_size = [5,0,32,0]
  TES;
literal S_DST$PACKAGE_BODY_END = 9;
MACRO DST$PACKAGE_BODY_END = BLOCK [S_DST$PACKAGE_BODY_END,byte] FIELD (DST$PACKAGE_BODY_END_FIELDSET) %;
literal DST$K_PACKBODY_END_SIZE = 9;
FIELD DST$DIS_RANGES_FIELDSET =
  SET
  dst$a_disrng_header = [0,0,32,0],
  dst$lu_disrng_count = [4,0,32,0]
  TES;
literal S_DST$DIS_RANGES = 8;
MACRO DST$DIS_RANGES = BLOCK [S_DST$DIS_RANGES,byte] FIELD (DST$DIS_RANGES_FIELDSET) %;
literal DST$K_DISRNGS_SIZE = 8;
MACRO dst$a_dis_ranges = DST$K_DISRNG_SIZE, 0, 0, 0%;
FIELD DST$DIS_RANGE_FIELDSET =
  SET
  dst$lu_disrng_address = [0,0,32,0],
  dst$lu_disrng_size = [4,0,32,0]
  TES;
literal S_DST$DIS_RANGE = 8;
MACRO DST$DIS_RANGE = BLOCK [S_DST$DIS_RANGE,byte] FIELD (DST$DIS_RANGE_FIELDSET) %;
literal DST$K_DISRNG_SIZE = 8;
KEYWORDMACRO
    DST$DIS_RANGE_VECTOR(N = 1) =
	BLOCKVECTOR[(N), DST$K_DISRNG_SIZE,BYTE]
	FIELD(DST$DIS_RANGE_FIELDSET) %;
FIELD DST$RECBEG_TRLR_FIELDSET =
  SET
  dst$l_recbeg_size = [0,0,32,0]
  TES;
literal S_DST$RECBEG_TRLR = 4;
MACRO DST$RECBEG_TRLR = BLOCK [S_DST$RECBEG_TRLR,byte] FIELD (DST$RECBEG_TRLR_FIELDSET) %;
literal DST$K_RECBEG_TRAILER_SIZE = 4;
FIELD DST$RECORD_END_FIELDSET =
  SET
  dst$a_recend_header = [0,0,32,0]
  TES;
literal S_DST$RECORD_END = 4;
MACRO DST$RECORD_END = BLOCK [S_DST$RECORD_END,byte] FIELD (DST$RECORD_END_FIELDSET) %;
literal DST$K_RECEND_SIZE = 4;
FIELD DST$VARBEG_TRAILER_FIELDSET =
  SET
  dst$l_varbeg_size = [0,0,32,0],
  dst$l_varbeg_tag_ptr = [4,0,32,0]
  TES;
literal S_DST$VARBEG_TRAILER = 8;
MACRO DST$VARBEG_TRAILER = BLOCK [S_DST$VARBEG_TRAILER,byte] FIELD (DST$VARBEG_TRAILER_FIELDSET) %;
literal DST$K_VARBEG_TRAILER_SIZE = 8;
FIELD DST$VARIANT_VALUE_FIELDSET =
  SET
  dst$a_varval_header = [0,0,32,0],
  dst$l_varval_size = [4,0,32,0],
  dst$w_varval_count = [8,0,16,0]
  TES;
literal S_DST$VARIANT_VALUE = 10;
MACRO DST$VARIANT_VALUE = BLOCK [S_DST$VARIANT_VALUE,byte] FIELD (DST$VARIANT_VALUE_FIELDSET) %;
literal DST$K_VARIANT_VALUE_SIZE = 10;
MACRO dst$a_varval_rngspec = DST$K_VARIANT_VALUE_SIZE, 0, 0, 0%;
FIELD DST$VARVAL_RANGE_FIELDSET =
  SET
  dst$b_varval_rngkind = [0,0,8,0]
  TES;
literal S_DST$VARVAL_RANGE = 1;
MACRO DST$VARVAL_RANGE = BLOCK [S_DST$VARVAL_RANGE,byte] FIELD (DST$VARVAL_RANGE_FIELDSET) %;
literal DST$K_VARVAL_RANGE_SIZE = 1;
MACRO dst$a_varval_rngaddr = DST$K_VARVAL_RANGE_SIZE, 0, 0, 0%;
literal DST$K_VARVAL_SINGLE = 1;
literal DST$K_VARVAL_RANGE = 2;
FIELD DST$VARIANT_SET_END_FIELDSET =
  SET
  dst$a_varset_end_header = [0,0,32,0]
  TES;
literal S_DST$VARIANT_SET_END = 4;
MACRO DST$VARIANT_SET_END = BLOCK [S_DST$VARIANT_SET_END,byte] FIELD (DST$VARIANT_SET_END_FIELDSET) %;
literal DST$K_VARSET_END_SIZE = 4;
FIELD DST$DATA_HEADER_FIELDSET =
  SET
  dst$a_data_header = [0,0,32,0],
    dst$v_valkind = [4,0,2,0],
    dst$v_indirect = [4,2,1,0],
    dst$v_disp = [4,3,1,0],
    dst$v_regnum = [4,4,4,0],
  dst$b_vflags = [4,0,8,0]
  TES;
literal S_DST$DATA_HEADER = 5;
MACRO DST$DATA_HEADER = BLOCK [S_DST$DATA_HEADER,byte] FIELD (DST$DATA_HEADER_FIELDSET) %;
literal DST$K_DATA_HEADER_SIZE = 5;
literal s_dst$a_data_dst_header = 5;
FIELD DST$DATA_DST_FIELDSET =
  SET
  dst$a_data_dst_header = [0,0,40,0],
  dst$l_value = [5,0,32,0],
  dst$b_name = [9,0,8,0]
  TES;
literal S_DST$DATA_DST = 10;
MACRO DST$DATA_DST = BLOCK [S_DST$DATA_DST,byte] FIELD (DST$DATA_DST_FIELDSET) %;
literal DST$K_DATA_SIZE = 10;
UNDECLARE
    %QUOTE DST$DATA_DST;
MACRO
    DST$DATA_DST = BLOCK[S_DST$DATA_DST,BYTE]
		    FIELD(DST$DATA_HEADER_FIELDSET, DST$DATA_DST_FIELDSET)
    %;
literal DST$K_VFLAGS_NOVAL = 128;
literal DST$K_VFLAGS_NOTACTIVE = 248;
literal DST$K_VFLAGS_UNALLOC = 249;
literal DST$K_VFLAGS_DSC = 250;
literal DST$K_VFLAGS_TVS = 251;
literal DST$K_VS_FOLLOWS = 253;
literal DST$K_VFLAGS_BITOFFS = 255;
literal DST$K_VALKIND_LITERAL = 0;
literal DST$K_VALKIND_ADDR = 1;
literal DST$K_VALKIND_DESC = 2;
literal DST$K_VALKIND_REG = 3;
literal DST$K_VALKIND_MIN = 0;
literal DST$K_VALKIND_MAX = 3;
literal DST$K_NO_SUCH_REG = -1;
literal DST$K_REG_VAX_R0 = 0;
literal DST$K_REG_VAX_R1 = 1;
literal DST$K_REG_VAX_R2 = 2;
literal DST$K_REG_VAX_R3 = 3;
literal DST$K_REG_VAX_R4 = 4;
literal DST$K_REG_VAX_R5 = 5;
literal DST$K_REG_VAX_R6 = 6;
literal DST$K_REG_VAX_R7 = 7;
literal DST$K_REG_VAX_R8 = 8;
literal DST$K_REG_VAX_R9 = 9;
literal DST$K_REG_VAX_R10 = 10;
literal DST$K_REG_VAX_R11 = 11;
literal DST$K_REG_VAX_R12 = 12;
literal DST$K_REG_VAX_R13 = 13;
literal DST$K_REG_VAX_R14 = 14;
literal DST$K_REG_VAX_R15 = 15;
literal DST$K_REG_VAX_PSL = 16;
literal DST$K_REG_VAX_V0 = 17;
literal DST$K_REG_VAX_V1 = 18;
literal DST$K_REG_VAX_V2 = 19;
literal DST$K_REG_VAX_V3 = 20;
literal DST$K_REG_VAX_V4 = 21;
literal DST$K_REG_VAX_V5 = 22;
literal DST$K_REG_VAX_V6 = 23;
literal DST$K_REG_VAX_V7 = 24;
literal DST$K_REG_VAX_V8 = 25;
literal DST$K_REG_VAX_V9 = 26;
literal DST$K_REG_VAX_V10 = 27;
literal DST$K_REG_VAX_V11 = 28;
literal DST$K_REG_VAX_V12 = 29;
literal DST$K_REG_VAX_V13 = 30;
literal DST$K_REG_VAX_V14 = 31;
literal DST$K_REG_VAX_V15 = 32;
literal DST$K_REG_VAX_VCR = 33;
literal DST$K_REG_VAX_VLR = 34;
literal DST$K_REG_VAX_VMR = 35;
literal DST$K_REG_VAX_MIN = 0;
literal DST$K_REG_VAX_MAX = 35;
literal DST$K_REG_VAX_AP = 12;
literal DST$K_REG_VAX_FP = 13;
literal DST$K_REG_VAX_SP = 14;
literal DST$K_REG_VAX_PC = 15;
literal DST$K_REG_VAX_PS = 16;
literal DST$K_REG_VAX_MIN_SCALAR = 0;
literal DST$K_REG_VAX_MAX_SCALAR = 15;
literal DST$K_REG_VAX_MIN_FLOAT = -1;
literal DST$K_REG_VAX_MAX_FLOAT = -1;
literal DST$K_REG_VAX_MIN_REAL_VECTOR = 17;
literal DST$K_REG_VAX_MAX_REAL_VECTOR = 32;
literal DST$K_REG_VAX_MIN_VECTOR = 17;
literal DST$K_REG_VAX_MAX_VECTOR = 35;
literal DST$K_REG_ALPHA_R0 = 36;
literal DST$K_REG_ALPHA_R1 = 37;
literal DST$K_REG_ALPHA_R2 = 38;
literal DST$K_REG_ALPHA_R3 = 39;
literal DST$K_REG_ALPHA_R4 = 40;
literal DST$K_REG_ALPHA_R5 = 41;
literal DST$K_REG_ALPHA_R6 = 42;
literal DST$K_REG_ALPHA_R7 = 43;
literal DST$K_REG_ALPHA_R8 = 44;
literal DST$K_REG_ALPHA_R9 = 45;
literal DST$K_REG_ALPHA_R10 = 46;
literal DST$K_REG_ALPHA_R11 = 47;
literal DST$K_REG_ALPHA_R12 = 48;
literal DST$K_REG_ALPHA_R13 = 49;
literal DST$K_REG_ALPHA_R14 = 50;
literal DST$K_REG_ALPHA_R15 = 51;
literal DST$K_REG_ALPHA_R16 = 52;
literal DST$K_REG_ALPHA_R17 = 53;
literal DST$K_REG_ALPHA_R18 = 54;
literal DST$K_REG_ALPHA_R19 = 55;
literal DST$K_REG_ALPHA_R20 = 56;
literal DST$K_REG_ALPHA_R21 = 57;
literal DST$K_REG_ALPHA_R22 = 58;
literal DST$K_REG_ALPHA_R23 = 59;
literal DST$K_REG_ALPHA_R24 = 60;
literal DST$K_REG_ALPHA_R25 = 61;
literal DST$K_REG_ALPHA_R26 = 62;
literal DST$K_REG_ALPHA_R27 = 63;
literal DST$K_REG_ALPHA_R28 = 64;
literal DST$K_REG_ALPHA_R29 = 65;
literal DST$K_REG_ALPHA_R30 = 66;
literal DST$K_REG_ALPHA_R31 = 67;
literal DST$K_REG_ALPHA_F0 = 68;
literal DST$K_REG_ALPHA_F1 = 69;
literal DST$K_REG_ALPHA_F2 = 70;
literal DST$K_REG_ALPHA_F3 = 71;
literal DST$K_REG_ALPHA_F4 = 72;
literal DST$K_REG_ALPHA_F5 = 73;
literal DST$K_REG_ALPHA_F6 = 74;
literal DST$K_REG_ALPHA_F7 = 75;
literal DST$K_REG_ALPHA_F8 = 76;
literal DST$K_REG_ALPHA_F9 = 77;
literal DST$K_REG_ALPHA_F10 = 78;
literal DST$K_REG_ALPHA_F11 = 79;
literal DST$K_REG_ALPHA_F12 = 80;
literal DST$K_REG_ALPHA_F13 = 81;
literal DST$K_REG_ALPHA_F14 = 82;
literal DST$K_REG_ALPHA_F15 = 83;
literal DST$K_REG_ALPHA_F16 = 84;
literal DST$K_REG_ALPHA_F17 = 85;
literal DST$K_REG_ALPHA_F18 = 86;
literal DST$K_REG_ALPHA_F19 = 87;
literal DST$K_REG_ALPHA_F20 = 88;
literal DST$K_REG_ALPHA_F21 = 89;
literal DST$K_REG_ALPHA_F22 = 90;
literal DST$K_REG_ALPHA_F23 = 91;
literal DST$K_REG_ALPHA_F24 = 92;
literal DST$K_REG_ALPHA_F25 = 93;
literal DST$K_REG_ALPHA_F26 = 94;
literal DST$K_REG_ALPHA_F27 = 95;
literal DST$K_REG_ALPHA_F28 = 96;
literal DST$K_REG_ALPHA_F29 = 97;
literal DST$K_REG_ALPHA_F30 = 98;
literal DST$K_REG_ALPHA_F31 = 99;
literal DST$K_REG_ALPHA_PC = 100;
literal DST$K_REG_ALPHA_PS = 101;
literal DST$K_REG_ALPHA_FPCR = 102;
literal DST$K_REG_ALPHA_SFPCR = 103;
literal DST$K_REG_ALPHA_MIN = 36;
literal DST$K_REG_ALPHA_MAX = 103;
literal DST$K_REG_ALPHA_AI = 61;
literal DST$K_REG_ALPHA_RA = 62;
literal DST$K_REG_ALPHA_PV = 63;
literal DST$K_REG_ALPHA_FP = 65;
literal DST$K_REG_ALPHA_SP = 66;
literal DST$K_REG_ALPHA_REGNUM_FP = 13;
literal DST$K_REG_ALPHA_REGNUM_SP = 14;
MACRO $DBG_VS_REGNUM(NUM) =
    (
    %IF DBG$K_TARGET_IS_ALPHA
    %THEN
	IF ((NUM) EQLU DST$K_REG_ALPHA_REGNUM_FP)
	THEN
	    (DST$K_REG_ALPHA_FP)
	ELSE IF ((NUM) EQLU DST$K_REG_ALPHA_REGNUM_SP)
	THEN
	    (DST$K_REG_ALPHA_SP)
	ELSE
	    (NUM)
    %ELSE
	(NUM)
    %FI
    )
    %;
literal DST$K_REG_ALPHA_MIN_SCALAR = 36;
literal DST$K_REG_ALPHA_MAX_SCALAR = 67;
literal DST$K_REG_ALPHA_MIN_FLOAT = 68;
literal DST$K_REG_ALPHA_MAX_FLOAT = 99;
literal DST$K_REG_ALPHA_MIN_VECTOR = -1;
literal DST$K_REG_ALPHA_MAX_VECTOR = -1;
literal DST$K_REG_M68_A0 = 0;
literal DST$K_REG_M68_A1 = 1;
literal DST$K_REG_M68_A2 = 2;
literal DST$K_REG_M68_A3 = 3;
literal DST$K_REG_M68_A4 = 4;
literal DST$K_REG_M68_A5 = 5;
literal DST$K_REG_M68_A6 = 6;
literal DST$K_REG_M68_A7 = 7;
literal DST$K_REG_M68_D0 = 8;
literal DST$K_REG_M68_D1 = 9;
literal DST$K_REG_M68_D2 = 10;
literal DST$K_REG_M68_D3 = 11;
literal DST$K_REG_M68_D4 = 12;
literal DST$K_REG_M68_D5 = 13;
literal DST$K_REG_M68_D6 = 14;
literal DST$K_REG_M68_D7 = 15;
literal DST$K_REG_M68_FP0 = 16;
literal DST$K_REG_M68_FP1 = 17;
literal DST$K_REG_M68_FP2 = 18;
literal DST$K_REG_M68_FP3 = 19;
literal DST$K_REG_M68_FP4 = 20;
literal DST$K_REG_M68_FP5 = 21;
literal DST$K_REG_M68_FP6 = 22;
literal DST$K_REG_M68_FP7 = 23;
literal DST$K_REG_M68_PC = 24;
literal DST$K_REG_M68_SR = 25;
literal DST$K_REG_M68_FPCR = 26;
literal DST$K_REG_M68_FPSR = 27;
literal DST$K_REG_M68_FPIAR = 28;
literal DST$K_REG_M68_USP = 29;
literal DST$K_REG_M68_MSP = 30;
literal DST$K_REG_M68_CAAR = 31;
literal DST$K_REG_M68_CACR = 32;
literal DST$K_REG_M68_VBR = 33;
literal DST$K_REG_M68_SFC = 34;
literal DST$K_REG_M68_DFC = 35;
literal DST$K_REG_M68_MIN = 0;
literal DST$K_REG_M68_MAX = 35;
literal DST$K_REG_M68_MIN_SCALAR = 0;
literal DST$K_REG_M68_MAX_SCALAR = 15;
literal DST$K_REG_M68_MIN_FLOAT = 16;
literal DST$K_REG_M68_MAX_FLOAT = 23;
literal DST$K_REG_M68_MIN_VECTOR = -1;
literal DST$K_REG_M68_MAX_VECTOR = -1;
literal DST$K_REG_1750_R15 = 0;
literal DST$K_REG_1750_R14 = 1;
literal DST$K_REG_1750_R13 = 2;
literal DST$K_REG_1750_R12 = 3;
literal DST$K_REG_1750_R11 = 4;
literal DST$K_REG_1750_R10 = 5;
literal DST$K_REG_1750_R9 = 6;
literal DST$K_REG_1750_R8 = 7;
literal DST$K_REG_1750_R7 = 8;
literal DST$K_REG_1750_R6 = 9;
literal DST$K_REG_1750_R5 = 10;
literal DST$K_REG_1750_R4 = 11;
literal DST$K_REG_1750_R3 = 12;
literal DST$K_REG_1750_R2 = 13;
literal DST$K_REG_1750_R1 = 14;
literal DST$K_REG_1750_R0 = 15;
literal DST$K_REG_1750_PC = 16;
literal DST$K_REG_1750_SW = 17;
literal DST$K_REG_1750_FT = 18;
literal DST$K_REG_1750_MK = 19;
literal DST$K_REG_1750_PI = 20;
literal DST$K_REG_1750_IOIC = 21;
literal DST$K_REG_1750_MFSR = 22;
literal DST$K_REG_1750_PAGE = 23;
literal DST$K_REG_1750_MIN = 0;
literal DST$K_REG_1750_MAX = 23;
literal DST$K_REG_1750_SP = 4;
literal DST$K_REG_1750_FP = 0;
literal DST$K_REG_1750_IC = 16;
literal DST$K_REG_1750_MIN_SCALAR = 0;
literal DST$K_REG_1750_MAX_SCALAR = 15;
literal DST$K_REG_1750_MIN_INDEX = 0;
literal DST$K_REG_1750_MAX_INDEX = 14;
literal DST$K_REG_1750_MIN_BASE = 0;
literal DST$K_REG_1750_MAX_BASE = 3;
literal DST$K_REG_1750_MIN_FLOAT = -1;
literal DST$K_REG_1750_MAX_FLOAT = -1;
literal DST$K_REG_1750_MIN_VECTOR = -1;
literal DST$K_REG_1750_MAX_VECTOR = -1;
literal s_dst$a_dsc_format_header = 5;
FIELD DST$DESCRIPTOR_FORMAT_FIELDSET =
  SET
  dst$a_dsc_format_header = [0,0,40,0],
  dst$l_dsc_offs = [5,0,32,0]
  TES;
literal S_DST$DESCRIPTOR_FORMAT = 9;
MACRO DST$DESCRIPTOR_FORMAT = BLOCK [S_DST$DESCRIPTOR_FORMAT,byte] FIELD (DST$DESCRIPTOR_FORMAT_FIELDSET) %;
literal DST$K_DESCRIPTOR_FORMAT_SIZE = 9;
MACRO dst$a_dsc_base = DST$K_DESCRIPTOR_FORMAT_SIZE, 0, 0, 0%;
UNDECLARE
    %QUOTE DST$DESCRIPTOR_FORMAT;
MACRO
    DST$DESCRIPTOR_FORMAT = BLOCK[S_DST$DESCRIPTOR_FORMAT,BYTE]
		    FIELD(
			DST$DATA_HEADER_FIELDSET,
			DST$DATA_DST_FIELDSET,
			DST$DESCRIPTOR_FORMAT_FIELDSET)
    %;
literal s_dst$a_tvs_header = 5;
FIELD DST$TRAILING_VALSPEC_FIELDSET =
  SET
  dst$a_tvs_header = [0,0,40,0],
  dst$l_tvs_offset = [5,0,32,0]
  TES;
literal S_DST$TRAILING_VALSPEC = 9;
MACRO DST$TRAILING_VALSPEC = BLOCK [S_DST$TRAILING_VALSPEC,byte] FIELD (DST$TRAILING_VALSPEC_FIELDSET) %;
literal DST$K_TRAILING_VALSPEC_SIZE = 9;
MACRO dst$a_tvs_base = DST$K_TRAILING_VALSPEC_SIZE, 0, 0, 0%;
literal DST$K_SEPTYP_SIZE = 10;
macro DST$VS_ALLOC_KIND = 0,0,8,0 %;
literal DST$K_VS_ALLOC_STAT = 1;
literal DST$K_VS_ALLOC_DYN = 2;
literal DST$K_VS_ALLOC_SPLIT = 3;
literal DST$K_VS_ALLOC_BIASED = 4;
literal DST$K_VS_ALLOC_XVS = 5;
literal DST$K_VS_ALLOC_MIN = 1;
literal DST$K_VS_ALLOC_MAX = 5;
FIELD DST$VAL_SPEC_FIELDSET =
  SET
    dst$v_vs_valkind = [0,0,2,0],
    dst$v_vs_indirect = [0,2,1,0],
    dst$v_vs_disp = [0,3,1,0],
    dst$v_vs_regnum = [0,4,4,0],
  dst$b_vs_vflags = [0,0,8,0],
    dst$l_vs_value = [1,0,32,0],
    dst$l_vs_dsc_offs = [1,0,32,0],
    dst$l_vs_tvs_offset = [1,0,32,0],
      dst$w_vs_length = [1,0,16,0],
      dst$b_vs_alloc = [3,0,8,0],
        dst$b_vs_mbz = [4,0,8,0],
        dst$b_vs_reserved = [4,0,8,0],
      dst$a_mat_spec_info = [4,0,8,0],
    dst$a_vs_materialization_spec = [1,0,32,0],
  dst$value_spec_variants = [1,0,32,0]
  TES;
literal S_DST$VAL_SPEC = 5;
MACRO DST$VAL_SPEC = BLOCK [S_DST$VAL_SPEC,byte] FIELD (DST$VAL_SPEC_FIELDSET) %;
literal DST$K_VALUE_SPEC_SIZE = 5;
literal DST$K_VS_DSC_BASE = 5;
literal DST$K_VS_TVS_BASE = 5;
literal DST$K_VS_MATSPEC_BASE = 4;
literal DST$K_VS_BINDSPEC_BASE = 5;
literal DST$K_VS_BIASING_VS_BASE = 5;
literal DST$K_VS_BIASED_VS_BASE = 10;
literal DST$K_VS_XVS_BASE = 4;
MACRO DST$A_VS_DSC_BASE		= DST$K_VS_DSC_BASE, 0, 0, 0%;
					! Descriptor starts at this loca-
					!      tion + DST$L_VS_DSC_OFFS
MACRO DST$A_VS_TVS_BASE		= DST$K_VS_TVS_BASE, 0, 0, 0%;
					! Value Spec starts at this loca-
					!      tion + DST$A_VS_TVS_OFFSET
MACRO DST$A_VS_MATSPEC		= DST$K_VS_MATSPEC_BASE, 0, 0, 0%;
					! Location of Materialization
					!      Specification
MACRO DST$A_VS_BINDSPEC		= DST$K_VS_BINDSPEC_BASE, 0, 0, 0%;
					! Base address of first binding
					! specification within split 
					! lifetime value specification
MACRO DST$A_VS_BIASING_VALSPEC	= DST$K_VS_BIASING_VS_BASE, 0, 0, 0%;
					! Value Spec of Bias to add/subtract to
					!  value (Note use of "biasING" to
					!  avoid errors)
MACRO DST$A_VS_BIASED_VALSPEC	= DST$K_VS_BIASED_VS_BASE, 0, 0, 0%;
MACRO DST$A_VS_XVS_BASE		= DST$K_VS_XVS_BASE, 0, 0, 0%;
					! Base address of the Extended Value
					!	Spec within a standard Value
					!	Spec.
FIELD DST$BIND_SPEC_STRUCT_FIELDSET =
  SET
  dst$w_bs_num_bindings = [0,0,16,0]
  TES;
literal S_DST$BIND_SPEC_STRUCT = 2;
MACRO DST$BIND_SPEC_STRUCT = BLOCK [S_DST$BIND_SPEC_STRUCT,byte] FIELD (DST$BIND_SPEC_STRUCT_FIELDSET) %;
literal DST$K_BIND_SPEC_STRUCT_SIZE = 2;
MACRO DST$A_BS_BINDSPEC		= DST$K_BIND_SPEC_STRUCT_SIZE, 0, 0, 0%;
FIELD DST$BIND_SPEC_FIELDSET =
  SET
  dst$l_bs_lo_pc = [0,0,32,0],
  dst$l_bs_hi_pc = [4,0,32,0],
  dst$w_bs_num_pc_bindings = [8,0,16,0]
  TES;
literal S_DST$BIND_SPEC = 10;
MACRO DST$BIND_SPEC = BLOCK [S_DST$BIND_SPEC,byte] FIELD (DST$BIND_SPEC_FIELDSET) %;
literal DST$K_BIND_SPEC_SIZE = 10;
MACRO dst$a_bs_pc_bindings = DST$K_BIND_SPEC_SIZE, 0, 0, 0%;
MACRO dst$a_bs_valspec = DST$K_BIND_SPEC_SIZE, 0, 0, 0%;
macro DST$MS_KIND = 0,0,8,0 %;
literal DST$K_MS_BYTADDR = 1;
literal DST$K_MS_BITADDR = 2;
literal DST$K_MS_BITOFFS = 3;
literal DST$K_MS_RVAL = 4;
literal DST$K_MS_REG = 5;
literal DST$K_MS_DSC = 6;
literal DST$K_MS_ADDR_DSC = 7;
literal DST$K_MS_LOWEST = 1;
literal DST$K_MS_HIGHEST = 7;
macro DST$MS_MECH = 0,0,8,0 %;
literal DST$K_MS_MECH_RTNCALL = 1;
literal DST$K_MS_MECH_STK = 2;
literal DST$K_MS_MECH_RTN_NOFP = 3;
literal DST$K_MS_MECH_MIN = 1;
literal DST$K_MS_MECH_MAX = 3;
FIELD DST$MATER_SPEC_FIELDSET =
  SET
  dst$b_ms_kind = [0,0,8,0],
  dst$b_ms_mech = [1,0,8,0],
    dst$v_ms_noeval = [2,0,1,0],
    dst$v_ms_dumarg = [2,1,1,0],
    dst$v_ms_wrongbounds = [2,2,1,0],
    dst$v_ms_mbz = [2,3,5,0],
  dst$b_ms_flagbits = [2,0,8,0],
  dst$l_ms_mech_rtnaddr = [3,0,32,0]
  TES;
literal S_DST$MATER_SPEC = 7;
MACRO DST$MATER_SPEC = BLOCK [S_DST$MATER_SPEC,byte] FIELD (DST$MATER_SPEC_FIELDSET) %;
literal DST$K_MATER_SPEC_HEADER_SIZE = 3;
literal DST$K_MATER_SPEC_SIZE = 7;
MACRO dst$a_ms_mech_spec = DST$K_MATER_SPEC_HEADER_SIZE, 0, 0, 0%;
literal DST$K_STK_LOW = 0;
literal DST$K_STK_PUSHR0 = 0;
literal DST$K_STK_PUSHR1 = 1;
literal DST$K_STK_PUSHR2 = 2;
literal DST$K_STK_PUSHR3 = 3;
literal DST$K_STK_PUSHR4 = 4;
literal DST$K_STK_PUSHR5 = 5;
literal DST$K_STK_PUSHR6 = 6;
literal DST$K_STK_PUSHR7 = 7;
literal DST$K_STK_PUSHR8 = 8;
literal DST$K_STK_PUSHR9 = 9;
literal DST$K_STK_PUSHR10 = 10;
literal DST$K_STK_PUSHR11 = 11;
literal DST$K_STK_PUSHRAP = 12;
literal DST$K_STK_PUSHRFP = 13;
literal DST$K_STK_PUSHRSP = 14;
literal DST$K_STK_PUSHRPC = 15;
literal DST$K_STK_PUSH_ALPHA_R0 = 55;
literal DST$K_STK_PUSH_ALPHA_R1 = 56;
literal DST$K_STK_PUSH_ALPHA_R2 = 57;
literal DST$K_STK_PUSH_ALPHA_R3 = 58;
literal DST$K_STK_PUSH_ALPHA_R4 = 59;
literal DST$K_STK_PUSH_ALPHA_R5 = 60;
literal DST$K_STK_PUSH_ALPHA_R6 = 61;
literal DST$K_STK_PUSH_ALPHA_R7 = 62;
literal DST$K_STK_PUSH_ALPHA_R8 = 63;
literal DST$K_STK_PUSH_ALPHA_R9 = 64;
literal DST$K_STK_PUSH_ALPHA_R10 = 65;
literal DST$K_STK_PUSH_ALPHA_R11 = 66;
literal DST$K_STK_PUSH_ALPHA_R12 = 67;
literal DST$K_STK_PUSH_ALPHA_R13 = 68;
literal DST$K_STK_PUSH_ALPHA_R14 = 69;
literal DST$K_STK_PUSH_ALPHA_R15 = 70;
literal DST$K_STK_PUSH_ALPHA_R16 = 71;
literal DST$K_STK_PUSH_ALPHA_R17 = 72;
literal DST$K_STK_PUSH_ALPHA_R18 = 73;
literal DST$K_STK_PUSH_ALPHA_R19 = 74;
literal DST$K_STK_PUSH_ALPHA_R20 = 75;
literal DST$K_STK_PUSH_ALPHA_R21 = 76;
literal DST$K_STK_PUSH_ALPHA_R22 = 77;
literal DST$K_STK_PUSH_ALPHA_R23 = 78;
literal DST$K_STK_PUSH_ALPHA_R24 = 79;
literal DST$K_STK_PUSH_ALPHA_R25 = 80;
literal DST$K_STK_PUSH_ALPHA_R26 = 81;
literal DST$K_STK_PUSH_ALPHA_R27 = 82;
literal DST$K_STK_PUSH_ALPHA_R28 = 83;
literal DST$K_STK_PUSH_ALPHA_R29 = 84;
literal DST$K_STK_PUSH_ALPHA_R30 = 85;
literal DST$K_STK_PUSH_ALPHA_R31 = 86;
literal DST$K_STK_PUSH_ALPHA_AI = 80;
literal DST$K_STK_PUSH_ALPHA_RA = 81;
literal DST$K_STK_PUSH_ALPHA_PV = 82;
literal DST$K_STK_PUSH_ALPHA_FP = 84;
literal DST$K_STK_PUSH_ALPHA_SP = 85;
literal DST$K_STK_PUSH_M68_A0 = 0;
literal DST$K_STK_PUSH_M68_A1 = 1;
literal DST$K_STK_PUSH_M68_A2 = 2;
literal DST$K_STK_PUSH_M68_A3 = 3;
literal DST$K_STK_PUSH_M68_A4 = 4;
literal DST$K_STK_PUSH_M68_A5 = 5;
literal DST$K_STK_PUSH_M68_A6 = 6;
literal DST$K_STK_PUSH_M68_A7 = 7;
literal DST$K_STK_PUSH_M68_D0 = 8;
literal DST$K_STK_PUSH_M68_D1 = 9;
literal DST$K_STK_PUSH_M68_D2 = 10;
literal DST$K_STK_PUSH_M68_D3 = 11;
literal DST$K_STK_PUSH_M68_D4 = 12;
literal DST$K_STK_PUSH_M68_D5 = 13;
literal DST$K_STK_PUSH_M68_D6 = 14;
literal DST$K_STK_PUSH_M68_D7 = 15;
literal DST$K_STK_PUSH_1750_R0 = 15;
literal DST$K_STK_PUSH_1750_R1 = 14;
literal DST$K_STK_PUSH_1750_R2 = 13;
literal DST$K_STK_PUSH_1750_R3 = 12;
literal DST$K_STK_PUSH_1750_R4 = 11;
literal DST$K_STK_PUSH_1750_R5 = 10;
literal DST$K_STK_PUSH_1750_R6 = 9;
literal DST$K_STK_PUSH_1750_R7 = 8;
literal DST$K_STK_PUSH_1750_R8 = 7;
literal DST$K_STK_PUSH_1750_R9 = 6;
literal DST$K_STK_PUSH_1750_R10 = 5;
literal DST$K_STK_PUSH_1750_R11 = 4;
literal DST$K_STK_PUSH_1750_R12 = 3;
literal DST$K_STK_PUSH_1750_R13 = 2;
literal DST$K_STK_PUSH_1750_R14 = 1;
literal DST$K_STK_PUSH_1750_R15 = 0;
literal DST$K_STK_PUSHIMB = 16;
literal DST$K_STK_PUSHIMW = 17;
literal DST$K_STK_PUSHIML = 18;
literal DST$K_STK_PUSHIM_VAR = 24;
literal DST$K_STK_PUSHIMBU = 25;
literal DST$K_STK_PUSHIMWU = 26;
literal DST$K_STK_PUSHINB = 20;
literal DST$K_STK_PUSHINW = 21;
literal DST$K_STK_PUSHINL = 22;
literal DST$K_STK_PUSHINBU = 27;
literal DST$K_STK_PUSHINWU = 28;
literal DST$K_STK_ADD = 19;
literal DST$K_STK_SUB = 29;
literal DST$K_STK_MULT = 30;
literal DST$K_STK_DIV = 31;
literal DST$K_STK_LSH = 32;
literal DST$K_STK_ROT = 33;
literal DST$K_STK_EXTV_IMED = 45;
literal DST$K_STK_EXTZV_IMED = 46;
literal DST$K_STK_EXTV_IND = 47;
literal DST$K_STK_EXTZV_IND = 48;
literal DST$K_STK_COP = 34;
literal DST$K_STK_EXCH = 35;
literal DST$K_STK_STO_B = 36;
literal DST$K_STK_STO_W = 37;
literal DST$K_STK_STO_L = 38;
literal DST$K_STK_FET_B = 49;
literal DST$K_STK_FET_W = 50;
literal DST$K_STK_FET_L = 51;
literal DST$K_STK_POP = 39;
literal DST$K_STK_STOP = 23;
literal DST$K_STK_RTNCALL = 40;
literal DST$K_STK_RTNCALL_ALT = 41;
literal DST$K_STK_RTN_NOFP = 44;
literal DST$K_STK_PUSH_OUTER_REC = 42;
literal DST$K_STK_PUSH_INNER_REC = 43;
literal DST$K_STK_POS = 52;
literal DST$K_STK_PUSH_VALSPEC = 53;
literal DST$K_STK_PUSH_INNER_ARRAY = 54;
literal DST$K_STK_HIGH = 86;
literal s_dst$q_xvs_value = 8;
FIELD DST$XVS_SPEC_FIELDSET =
  SET
    dst$v_xvs_indirect = [0,0,1,0],
    dst$v_xvs_disp = [0,1,1,0],
    dst$v_xvs_valkind = [0,2,2,0],
    dst$v_xvs_fill0 = [0,4,12,0],
  dst$w_xvs_flags = [0,0,16,0],
  dst$w_xvs_regnum = [2,0,16,0],
    dst$l_xvs_low_value = [4,0,32,1],
    dst$l_xvs_hi_value = [8,0,32,1],
  dst$q_xvs_value = [4,0,64,0]
  TES;
literal S_DST$XVS_SPEC = 12;
MACRO DST$XVS_SPEC = BLOCK [S_DST$XVS_SPEC,byte] FIELD (DST$XVS_SPEC_FIELDSET) %;
literal DST$K_XVS_SPEC_SIZE = 12;
FIELD DST$TYPSPEC_FIELDSET =
  SET
  dst$a_typspec_header = [0,0,32,0],
  dst$b_typspec_name = [4,0,8,0]
  TES;
literal S_DST$TYPSPEC = 5;
MACRO DST$TYPSPEC = BLOCK [S_DST$TYPSPEC,byte] FIELD (DST$TYPSPEC_FIELDSET) %;
literal DST$K_TYPSPEC_SIZE = 5;
MACRO dst$a_typspec_ts_addr = DST$K_TYPSPEC_SIZE, 0, 0, 0%;
macro DST$TS_DTYPE = 0,0,8,0 %;
literal DST$K_TS_ATOM = 1;
literal DST$K_TS_DSC = 2;
literal DST$K_TS_IND = 3;
literal DST$K_TS_TPTR = 4;
literal DST$K_TS_PTR = 5;
literal DST$K_TS_PIC = 6;
literal DST$K_TS_ARRAY = 7;
literal DST$K_TS_SET = 8;
literal DST$K_TS_SUBRANGE = 9;
literal DST$K_TS_ADA_DSC = 10;
literal DST$K_TS_FILE = 11;
literal DST$K_TS_AREA = 12;
literal DST$K_TS_OFFSET = 13;
literal DST$K_TS_NOV_LENG = 14;
literal DST$K_TS_IND_TSPEC = 15;
literal DST$K_TS_SELF_REL_LABEL = 16;
literal DST$K_TS_RFA = 17;
literal DST$K_TS_TASK = 18;
literal DST$K_TS_ADA_ARRAY = 19;
literal DST$K_TS_XMOD_IND = 20;
literal DST$K_TS_CONSTRAINED = 21;
literal DST$K_TS_MAYBE_CONSTR = 22;
literal DST$K_TS_DYN_NOV_LENG = 23;
literal DST$K_TS_TPTR_D = 24;
literal DST$K_TS_SCAN_TREE = 25;
literal DST$K_TS_SCAN_TREEPTR = 26;
literal DST$K_TS_INCOMPLETE = 27;
literal DST$K_TS_BLISS_BLOCK = 28;
literal DST$K_TS_TPTR_64 = 29;
literal DST$K_TS_PTR_64 = 30;
literal DST$K_TS_REF = 31;
literal DST$K_TS_REF_64 = 32;
literal DST$K_TS_DTYPE_LOWEST = 1;
literal DST$K_TS_DTYPE_HIGHEST = 32;
literal s_dst$type_spec_variants = 8;
FIELD DST$TYPE_SPEC_FIELDSET =
  SET
  dst$w_ts_length = [0,0,16,0],
  dst$b_ts_kind = [2,0,8,0],
      dst$b_ts_atom_typ = [3,0,8,0],
    dst$atomic_type = [3,0,8,0],
      dst$b_ts_ada_dsc_class = [3,0,8,0],
      dst$b_ts_ada_dsc_dtype = [4,0,8,0],
    dst$ada_descriptor_type = [3,0,16,0],
      dst$l_ts_ind_ptr = [3,0,32,0],
    dst$indirect_type = [3,0,32,0],
      dst$l_ts_xmod_offset = [3,0,32,0],
      dst$b_ts_xmod_modname = [7,0,8,0],
    dst$xmod_indirect_type = [3,0,40,0],
      dst$b_ts_pic_dleng = [3,0,8,0],
      dst$b_ts_pic_lang = [4,0,8,0],
      dst$b_ts_pic_pleng = [5,0,8,0],
    dst$picture_type = [3,0,24,0],
      dst$b_ts_array_dim = [3,0,8,0],
    dst$array_type = [3,0,8,0],
      dst$b_ts_ada_array_dim = [3,0,8,0],
      dst$b_ts_ada_array_class = [4,0,8,0],
      dst$b_ts_ada_array_dtype = [5,0,8,0],
    dst$ada_array_type = [3,0,24,0],
      dst$l_ts_set_leng = [3,0,32,0],
    dst$set_type = [3,0,32,0],
      dst$l_ts_subr_leng = [3,0,32,0],
    dst$subrange_type = [3,0,32,0],
      dst$b_ts_file_lang = [3,0,8,0],
    dst$file_type = [3,0,8,0],
      dst$l_ts_nov_leng = [3,0,32,0],
      dst$l_ts_nov_leng_par_tspec = [7,0,32,0],
    dst$novel_length_type = [3,0,64,0],
      dst$a_dyn_nov_val_spec = [3,0,40,0],
    dst$dynamic_novel_length_type = [3,0,40,0],
      dst$l_ts_self_leng = [3,0,32,0],
    dst$self_relative_type = [3,0,32,0],
      dst$wu_ts_task_entry_count = [3,0,16,0],
    dst$task_type = [3,0,16,0],
      dst$l_ts_constr_record = [3,0,32,0],
      dst$l_ts_constr_count = [7,0,32,0],
    dst$constrained_type = [3,0,64,0],
      dst$l_ts_mightbe_record = [3,0,32,0],
    dst$might_be_constrained_type = [3,0,32,0],
      dst$b_ts_scan_tree_depth = [3,0,8,0],
    dst$scan_tree_type = [3,0,8,0],
      dst$l_ts_incomplete_ptr = [3,0,32,0],
    dst$incomplete_type = [3,0,32,0],
      dst$l_ts_number_units = [3,0,32,0],
      dst$b_ts_unit_size = [7,0,8,0],
      dst$b_ts_field_set_count = [8,0,8,0],
    dst$bliss_block_type = [3,0,48,0],
  dst$type_spec_variants = [3,0,64,0]
  TES;
literal S_DST$TYPE_SPEC = 11;
MACRO DST$TYPE_SPEC = BLOCK [S_DST$TYPE_SPEC,byte] FIELD (DST$TYPE_SPEC_FIELDSET) %;
literal DST$K_TYPE_SPEC_SIZE = 11;
literal DST$K_TS_ATOM_LENG = 4;
literal DST$K_TS_IND_LENG = 7;
literal DST$K_TS_PTR_LENG = 3;
literal DST$K_TS_PTR_64_LENG = 3;
literal DST$K_TS_FILE_LENG = 4;
literal DST$K_TS_AREA_LENG = 3;
literal DST$K_TS_OFFSET_LENG = 3;
literal DST$K_TS_NOV_LENG_LENG = 11;
literal DST$K_TS_TASK_LENG = 3;
literal DST$K_TS_INCOMPLETE_LENG = 7;
literal DST$K_TS_BASE = 2;
literal DST$K_TS_DSC_VSPEC = 3;
literal DST$K_TS_ADA_DSC_VSPEC = 5;
literal DST$K_TS_TPTR_TSPEC = 3;
literal DST$K_TS_TPTR_64_TSPEC = 3;
literal DST$K_TS_REF_TSPEC = 3;
literal DST$K_TS_REF_64_TSPEC = 3;
literal DST$K_TS_PIC_ADDR = 6;
literal DST$K_TS_ARRAY_FLAGS = 4;
literal DST$K_TS_ADA_ARRAY_FLAGS = 6;
literal DST$K_TS_SET_PAR_TSPEC = 7;
literal DST$K_TS_SUBR_PAR_TSPEC = 7;
literal DST$K_TS_FILE_RCRD_TYP = 4;
literal DST$K_TS_AREA_BYTE_LEN = 3;
literal DST$K_TS_OFFSET_VALSPEC = 3;
literal DST$K_TS_NOV_LENG_VSPEC = 3;
literal DST$K_TS_NOV_LENG_TSPEC = 8;
literal DST$K_TS_TASK_ENTRY = 5;
literal DST$K_TS_CONSTR_LIST = 11;
literal DST$K_TS_MIGHTBE_VALSPEC = 7;
literal DST$K_TS_SCAN_TREE_FLAGS = 4;
literal DST$K_TS_SCAN_TREEPTR_TREE = 3;
literal DST$K_TS_FIELD_SET_LIST = 9;
MACRO	DST$A_TS_BASE			= DST$K_TS_BASE, 0, 0, 0%;
MACRO	DST$A_TS_DSC_VSPEC_ADDR		= DST$K_TS_DSC_VSPEC, 0, 0, 0%;
MACRO	DST$A_TS_ADA_DSC_VSPEC  	= DST$K_TS_ADA_DSC_VSPEC, 0, 0, 0%;
MACRO	DST$A_TS_TPTR_TSPEC_ADDR	= DST$K_TS_TPTR_TSPEC, 0, 0, 0%;
MACRO	DST$A_TS_PIC_ADDR		= DST$K_TS_PIC_ADDR, 0, 0, 0%;
MACRO	DST$A_TS_ARRAY_FLAGS_ADDR	= DST$K_TS_ARRAY_FLAGS, 0, 0, 0%;
MACRO	DST$A_TS_ADA_ARRAY_FLAGS	= DST$K_TS_ADA_ARRAY_FLAGS, 0, 0, 0%;
MACRO	DST$A_TS_SET_PAR_TSPEC_ADDR 	= DST$K_TS_SET_PAR_TSPEC, 0, 0, 0%;
MACRO	DST$A_TS_SUBR_PAR_TSPEC_ADDR	= DST$K_TS_SUBR_PAR_TSPEC, 0, 0, 0%;
MACRO	DST$A_TS_FILE_RCRD_TYP		= DST$K_TS_FILE_RCRD_TYP, 0, 0, 0%;
MACRO	DST$A_TS_AREA_BYTE_LEN		= DST$K_TS_AREA_BYTE_LEN, 0, 0, 0%;
MACRO	DST$A_TS_OFFSET_VALSPEC		= DST$K_TS_OFFSET_VALSPEC, 0, 0, 0%;
MACRO	DST$A_TS_NOV_LENG_VSPEC 	= DST$K_TS_NOV_LENG_VSPEC, 0, 0, 0%;
MACRO	DST$A_TS_NOV_LENG_TSPEC 	= DST$K_TS_NOV_LENG_TSPEC, 0, 0, 0%;
MACRO	DST$A_TS_TASK_ENTRY_BASE 	= DST$K_TS_TASK_ENTRY, 0, 0, 0%;
MACRO	DST$A_TS_CONSTR_LIST		= DST$K_TS_CONSTR_LIST, 0, 0, 0%;
MACRO	DST$A_TS_MIGHTBE_VALSPEC	= DST$K_TS_MIGHTBE_VALSPEC, 0, 0, 0%;
MACRO	DST$A_TS_SCAN_TREE_FLAGS	= DST$K_TS_SCAN_TREE_FLAGS, 0, 0, 0%;
MACRO	DST$A_TS_SCAN_TREEPTR_TREE 	= DST$K_TS_SCAN_TREEPTR_TREE, 0, 0, 0%;
MACRO	DST$A_TS_FIELD_SET_LIST 	= DST$K_TS_FIELD_SET_LIST, 0, 0, 0%;
literal DBG$K_SET_SIZE_MAX = 8192;
literal DBG$K_PREDEF_SET_SIZE_MAX = 32;
FIELD DST$TASK_TS_ENTRY_FIELDSET =
  SET
    dst$v_ts_task_entry_family = [0,0,1,0],
    dst$v_ts_task_entry_mbz = [0,1,7,0],
  dst$bu_ts_task_entry_flags = [0,0,8,0],
    dst$bu_ts_task_entry_name = [1,0,8,0],
    dst$bu_ts_task_entry_trlr_offs = [1,0,8,0],
  dst$bu_ts_task_fields = [1,0,8,0]
  TES;
literal S_DST$TASK_TS_ENTRY = 2;
MACRO DST$TASK_TS_ENTRY = BLOCK [S_DST$TASK_TS_ENTRY,byte] FIELD (DST$TASK_TS_ENTRY_FIELDSET) %;
literal DST$K_TASK_TS_ENTRY_SIZE = 2;
MACRO dst$a_ts_task_entry_trlr_base = DST$K_TASK_TS_ENTRY_SIZE, 0, 0, 0%;
literal s_dst$a_ts_entry_family_lb = 5;
literal s_dst$a_ts_entry_family_ub = 5;
FIELD DST$TASK_TS_FAMILY_FIELDSET =
  SET
  dst$a_ts_entry_family_lb = [0,0,40,0],
  dst$a_ts_entry_family_ub = [5,0,40,0]
  TES;
literal S_DST$TASK_TS_FAMILY = 10;
MACRO DST$TASK_TS_FAMILY = BLOCK [S_DST$TASK_TS_FAMILY,byte] FIELD (DST$TASK_TS_FAMILY_FIELDSET) %;
literal DST$K_TASK_TS_ENTRY_FAMILY_SIZE = 10;
MACRO DST$TASK_TS_ENTRY_FAMILY = DST$TASK_TS_FAMILY%;
MACRO dst$a_ts_entry_family_type = DST$K_TASK_TS_ENTRY_FAMILY_SIZE, 0, 0, 0%;
FIELD DST$ENUM_BEGIN_FIELDSET =
  SET
  dst$a_enumbeg_header = [0,0,32,0],
  dst$b_enumbeg_leng = [4,0,8,0],
  dst$b_enumbeg_name = [5,0,8,0]
  TES;
literal S_DST$ENUM_BEGIN = 6;
MACRO DST$ENUM_BEGIN = BLOCK [S_DST$ENUM_BEGIN,byte] FIELD (DST$ENUM_BEGIN_FIELDSET) %;
literal DST$K_ENUM_BEGIN_SIZE = 6;
FIELD DST$ENUM_END_FIELDSET =
  SET
  dst$a_enum_end_header = [0,0,32,0]
  TES;
literal S_DST$ENUM_END = 4;
MACRO DST$ENUM_END = BLOCK [S_DST$ENUM_END,byte] FIELD (DST$ENUM_END_FIELDSET) %;
literal DST$K_ENUM_END_SIZE = 4;
FIELD DST$BLISS_FIELD_BEGIN_FIELDSET =
  SET
  dst$a_blifldbeg_header = [0,0,32,0],
  dst$b_blifldbeg_name = [4,0,8,0]
  TES;
literal S_DST$BLISS_FIELD_BEGIN = 5;
MACRO DST$BLISS_FIELD_BEGIN = BLOCK [S_DST$BLISS_FIELD_BEGIN,byte] FIELD (DST$BLISS_FIELD_BEGIN_FIELDSET) %;
literal DST$K_BLISS_FIELD_BEGIN_SIZE = 5;
FIELD DST$BLISS_FIELD_END_FIELDSET =
  SET
  dst$a_blifld_end_header = [0,0,32,0]
  TES;
literal S_DST$BLISS_FIELD_END = 4;
MACRO DST$BLISS_FIELD_END = BLOCK [S_DST$BLISS_FIELD_END,byte] FIELD (DST$BLISS_FIELD_END_FIELDSET) %;
literal DST$K_BLISS_FIELD_END_SIZE = 4;
FIELD DST$BLISS_FIELD_FIELDSET =
  SET
  dst$a_blifld_header = [0,0,32,0],
  dst$b_blifld_unused = [4,0,8,0],
  dst$l_blifld_comps = [5,0,32,0],
  dst$b_blifld_name = [9,0,8,0]
  TES;
literal S_DST$BLISS_FIELD = 10;
MACRO DST$BLISS_FIELD = BLOCK [S_DST$BLISS_FIELD,byte] FIELD (DST$BLISS_FIELD_FIELDSET) %;
literal DST$K_BLISS_FIELD_SIZE = 10;
literal DST$K_BLI_NOSTRUC = 0;
literal DST$K_BLI_VEC = 1;
literal DST$K_BLI_BITVEC = 2;
literal DST$K_BLI_BLOCK = 3;
literal DST$K_BLI_BLKVEC = 4;
literal DST$K_BLI_STRUC_MIN = 0;
literal DST$K_BLI_STRUC_MAX = 4;
literal s_dst$bli_struc_variants = 9;
FIELD DST$BLI_FIELDS_FIELDSET =
  SET
  dst$a_bli_fields_header = [0,0,32,0],
  dst$b_bli_lng = [4,0,8,0],
  dst$b_bli_formal = [5,0,8,0],
  dst$b_bli_vflags = [6,0,8,0],
    dst$v_bli_struc = [7,0,3,0],
    dst$v_bli_mbz = [7,3,4,0],
    dst$v_bli_ref = [7,7,1,0],
  dst$b_bli_sym_type = [7,0,8,0],
      dst$l_bli_vec_units = [8,0,32,0],
        dst$v_bli_vec_unit_size = [12,0,4,0],
        dst$v_bli_vec_sign_ext = [12,4,4,0],
      dst$v_bli_vec_flags = [12,0,8,0],
    dst$bli_struc_vector = [8,0,40,0],
      dst$l_bli_bitvec_size = [8,0,32,0],
    dst$bli_struc_bitvector = [8,0,32,0],
      dst$l_bli_block_units = [8,0,32,0],
        dst$v_bli_block_unit_size = [12,0,4,0],
        dst$v_bli_block_mbz = [12,4,4,0],
      dst$v_bli_block_flags = [12,0,8,0],
    dst$bli_struc_block = [8,0,40,0],
      dst$l_bli_blkvec_blocks = [8,0,32,0],
      dst$l_bli_blkvec_units = [12,0,32,0],
      dst$b_bli_blkvec_unit_size = [16,0,8,0],
    dst$bli_struc_blockvector = [8,0,0,0],
  dst$bli_struc_variants = [8,0,0,0]
  TES;
literal S_DST$BLI_FIELDS = 17;
MACRO DST$BLI_FIELDS = BLOCK [S_DST$BLI_FIELDS,byte] FIELD (DST$BLI_FIELDS_FIELDSET) %;
literal DST$K_BLI_FIELDS_SIZE = 17;
literal DST$K_BLI_TRLR1 = 5;
literal DST$K_BLI_SYM_ATTR = 8;
MACRO dst$a_bli_trlr1 		= DST$K_BLI_TRLR1, 0, 0, 0%;
MACRO dst$a_bli_sym_attr 	= DST$K_BLI_SYM_ATTR, 0, 0, 0%;
FIELD DST$BLI_TRAILER1_FIELDSET =
  SET
  dst$l_bli_value = [0,0,32,0],
  dst$b_bli_name = [4,0,8,0]
  TES;
literal S_DST$BLI_TRAILER1 = 5;
MACRO DST$BLI_TRAILER1 = BLOCK [S_DST$BLI_TRAILER1,byte] FIELD (DST$BLI_TRAILER1_FIELDSET) %;
literal DST$K_BLI_TRAILER1_SIZE = 5;
MACRO dst$a_bli_trlr2 = DST$K_BLI_TRAILER1_SIZE, 0, 0, 0%;
FIELD DST$BLI_TRAILER2_FIELDSET =
  SET
  dst$l_bli_size = [0,0,32,0]
  TES;
literal S_DST$BLI_TRAILER2 = 4;
MACRO DST$BLI_TRAILER2 = BLOCK [S_DST$BLI_TRAILER2,byte] FIELD (DST$BLI_TRAILER2_FIELDSET) %;
literal DST$K_BLI_TRAILER2_SIZE = 4;
literal s_dst$a_image_header = 10;
FIELD DST$IMAGE_FIELDSET =
  SET
  dst$a_image_header = [0,0,0,0]
  TES;
literal S_DST$IMAGE = 10;
MACRO DST$IMAGE = BLOCK [S_DST$IMAGE,byte] FIELD (DST$IMAGE_FIELDSET) %;
literal DST$K_IMAGE_SIZE = 10;
FIELD DST$PSECT_FIELDSET =
  SET
  dst$a_psect_header = [0,0,32,0],
  dst$b_psect_unused = [4,0,8,0],
  dst$l_psect_value = [5,0,32,0],
    dst$b_psect_name = [9,0,8,0],
    dst$b_psect_trlr_offs = [9,0,8,0],
  dst$a_psect_info = [9,0,8,0]
  TES;
literal S_DST$PSECT = 10;
MACRO DST$PSECT = BLOCK [S_DST$PSECT,byte] FIELD (DST$PSECT_FIELDSET) %;
literal DST$K_PSECT_HEADER_SIZE = 10;
MACRO dst$a_psect_trlr_base = DST$K_PSECT_HEADER_SIZE, 0, 0, 0%;
FIELD DST$PSECT_TRAILER_FIELDSET =
  SET
  dst$l_psect_size = [0,0,32,0]
  TES;
literal S_DST$PSECT_TRAILER = 4;
MACRO DST$PSECT_TRAILER = BLOCK [S_DST$PSECT_TRAILER,byte] FIELD (DST$PSECT_TRAILER_FIELDSET) %;
literal DST$K_PSECT_TRAILER_SIZE = 4;
literal DST$K_LABEL_SIZE = 10;
literal DST$K_LBL_OR_LIT_SIZE = 10;
FIELD DST$ENTRY_FIELDSET =
  SET
  dst$a_entry_dst_header = [0,0,32,0],
    dst$v_entry_mbz = [4,0,8,0],
  dst$b_entry_flags = [4,0,8,0],
  dst$l_entry_address = [5,0,32,0],
  dst$l_entry_pd_address = [9,0,32,0],
  dst$b_entry_name = [13,0,8,0]
  TES;
literal S_DST$ENTRY = 14;
MACRO DST$ENTRY = BLOCK [S_DST$ENTRY,byte] FIELD (DST$ENTRY_FIELDSET) %;
literal DST$K_ENTRY_SIZE = 14;
FIELD DST$LINE_NUM_HEADER_FIELDSET =
  SET
  dst$a_line_num_header = [0,0,32,0]
  TES;
literal S_DST$LINE_NUM_HEADER = 4;
MACRO DST$LINE_NUM_HEADER = BLOCK [S_DST$LINE_NUM_HEADER,byte] FIELD (DST$LINE_NUM_HEADER_FIELDSET) %;
literal DST$K_LINE_NUM_HEADER_SIZE = 4;
MACRO dst$a_line_num_data = DST$K_LINE_NUM_HEADER_SIZE, 0, 0, 0%;
FIELD DST$PCLINE_COMMANDS_FIELDSET =
  SET
  dst$b_pcline_command = [0,0,8,1],
    dst$l_pcline_unslong = [1,0,32,0],
    dst$w_pcline_unsword = [1,0,16,0],
    dst$b_pcline_unsbyte = [1,0,8,0],
  dst$a_pcline_access_fields = [1,0,32,0]
  TES;
literal S_DST$PCLINE_COMMANDS = 5;
MACRO DST$PCLINE_COMMANDS = BLOCK [S_DST$PCLINE_COMMANDS,byte] FIELD (DST$PCLINE_COMMANDS_FIELDSET) %;
literal DST$K_PCLINE_COMMANDS_SIZE = 5;
literal DST$K_PCLINE_COMMANDS_SIZE_MIN = 2;
literal DST$K_PCLINE_COMMANDS_SIZE_MAX = 5;
literal DST$K_DELTA_PC_LOW = -128;
literal DST$K_DELTA_PC_HIGH = 0;
literal DST$K_DELTA_PC_W = 1;
literal DST$K_INCR_LINUM = 2;
literal DST$K_INCR_LINUM_W = 3;
literal DST$K_SET_LINUM_INCR = 4;
literal DST$K_SET_LINUM_INCR_W = 5;
literal DST$K_RESET_LINUM_INCR = 6;
literal DST$K_BEG_STMT_MODE = 7;
literal DST$K_END_STMT_MODE = 8;
literal DST$K_SET_LINUM = 9;
literal DST$K_SET_PC = 10;
literal DST$K_SET_PC_W = 11;
literal DST$K_SET_PC_L = 12;
literal DST$K_SET_STMTNUM = 13;
literal DST$K_TERM = 14;
literal DST$K_TERM_W = 15;
literal DST$K_SET_ABS_PC = 16;
literal DST$K_DELTA_PC_L = 17;
literal DST$K_INCR_LINUM_L = 18;
literal DST$K_SET_LINUM_B = 19;
literal DST$K_SET_LINUM_L = 20;
literal DST$K_TERM_L = 21;
literal DST$K_PCCOR_LOW = -128;
literal DST$K_PCCOR_HIGH = 21;
FIELD DST$SOURCE_CORR_FIELDSET =
  SET
  dst$a_source_corr_header = [0,0,32,0]
  TES;
literal S_DST$SOURCE_CORR = 4;
MACRO DST$SOURCE_CORR = BLOCK [S_DST$SOURCE_CORR,byte] FIELD (DST$SOURCE_CORR_FIELDSET) %;
literal DST$K_SOURCE_CORR_HEADER_SIZE = 4;
MACRO dst$a_src_first_cmd = DST$K_SOURCE_CORR_HEADER_SIZE, 0, 0, 0%;
literal DST$K_SRC_DECLFILE = 1;
literal DST$K_SRC_SETFILE = 2;
literal DST$K_SRC_SETREC_L = 3;
literal DST$K_SRC_SETREC_W = 4;
literal DST$K_SRC_SETLNUM_L = 5;
literal DST$K_SRC_SETLNUM_W = 6;
literal DST$K_SRC_INCRLNUM_B = 7;
literal DST$K_SRC_UNUSED1 = 8;
literal DST$K_SRC_UNUSED2 = 9;
literal DST$K_SRC_DEFLINES_W = 10;
literal DST$K_SRC_DEFLINES_B = 11;
literal DST$K_SRC_UNUSED3 = 12;
literal DST$K_SRC_UNUSED4 = 13;
literal DST$K_SRC_UNUSED5 = 14;
literal DST$K_SRC_UNUSED6 = 15;
literal DST$K_SRC_FORMFEED = 16;
literal DST$K_SRC_MIN_CMD = 1;
literal DST$K_SRC_MAX_CMD = 16;
literal s_dst$a_src_cmd_fields = 20;
FIELD DST$SRC_COMMAND_FIELDSET =
  SET
  dst$b_src_command = [0,0,8,0],
      dst$b_src_df_length = [1,0,8,0],
      dst$b_src_df_flags = [2,0,8,0],
      dst$w_src_df_fileid = [3,0,16,0],
      dst$q_src_df_rms_cdt = [5,0,64,0],
      dst$l_src_df_rms_ebk = [13,0,32,0],
      dst$w_src_df_rms_ffb = [17,0,16,0],
      dst$b_src_df_rms_rfo = [19,0,8,0],
      dst$b_src_df_filename = [20,0,8,0],
    dst$a_src_decl_src = [1,0,0,0],
    dst$l_src_unslong = [1,0,32,0],
    dst$w_src_unsword = [1,0,16,0],
    dst$b_src_unsbyte = [1,0,8,0],
  dst$a_src_cmd_fields = [1,0,0,0]
  TES;
literal S_DST$SRC_COMMAND = 21;
MACRO DST$SRC_COMMAND = BLOCK [S_DST$SRC_COMMAND,byte] FIELD (DST$SRC_COMMAND_FIELDSET) %;
literal DST$K_SRC_COMMAND_SIZE = 21;
literal DST$K_SRC_DF_FILENAME_BASE = 21;
MACRO dst$a_src_df_filename = DST$K_SRC_DF_FILENAME_BASE, 0, 0, 0%;
FIELD DST$SRC_CMDTRLR_FIELDSET =
  SET
  dst$b_src_df_libmodname = [0,0,8,0]
  TES;
literal S_DST$SRC_CMDTRLR = 1;
MACRO DST$SRC_CMDTRLR = BLOCK [S_DST$SRC_CMDTRLR,byte] FIELD (DST$SRC_CMDTRLR_FIELDSET) %;
literal DST$K_SRC_CMDTRLR_SIZE = 1;
MACRO dst$a_src_df_libmodname = DST$K_SRC_CMDTRLR_SIZE, 0, 0, 0%;
FIELD DST$GEM_LOC_HEADER_FIELDSET =
  SET
  dst$a_gem_loc_header = [0,0,32,0]
  TES;
literal S_DST$GEM_LOC_HEADER = 4;
MACRO DST$GEM_LOC_HEADER = BLOCK [S_DST$GEM_LOC_HEADER,byte] FIELD (DST$GEM_LOC_HEADER_FIELDSET) %;
literal DST$K_GEM_LOC_HEADER_SIZE = 4;
MACRO dst$a_gem_loc_data = DST$K_GEM_LOC_HEADER_SIZE, 0, 0, 0%;
literal s_dst$pcloc_subcommand_args = 12;
FIELD DST$PCLOC_COMMANDS_FIELDSET =
  SET
  dst$b_pcloc_command = [0,0,8,1],
      dst$w_pcloc_pnts_line = [1,0,16,0],
      dst$b_pcloc_pnts_column = [3,0,8,0],
    dst$a_pcloc_pnts = [1,0,24,0],
      dst$l_pcloc_pntl_line = [1,0,32,0],
      dst$w_pcloc_pntl_column = [5,0,16,0],
    dst$a_pcloc_pntl = [1,0,48,0],
      dst$w_pcloc_rngs_low_line = [1,0,16,0],
      dst$b_pcloc_rngs_low_column = [3,0,8,0],
      dst$w_pcloc_rngs_high_line = [4,0,16,0],
      dst$b_pcloc_rngs_high_column = [6,0,8,0],
    dst$a_pcloc_rngs = [1,0,48,0],
      dst$l_pcloc_rngl_low_line = [1,0,32,0],
      dst$w_pcloc_rngl_low_column = [5,0,16,0],
      dst$l_pcloc_rngl_high_line = [7,0,32,0],
      dst$w_pcloc_rngl_high_column = [11,0,16,0],
    dst$a_pcloc_rngl = [1,0,0,0],
      dst$w_pcloc_lins_line = [1,0,16,0],
      dst$b_pcloc_lins_low_column = [3,0,8,0],
      dst$b_pcloc_lins_high_column = [4,0,8,0],
    dst$a_pcloc_lins = [1,0,32,0],
      dst$q_pcloc_setpc64_value = [1,0,64,0],
    dst$a_pcloc_setpc64 = [1,0,64,0],
      dst$l_pcloc_setpc32_value = [1,0,32,0],
    dst$a_pcloc_setpc32 = [1,0,32,0],
      dst$l_pcloc_event_read_sym1 = [1,0,32,0],
      dst$l_pcloc_event_read_sym2 = [5,0,32,0],
    dst$a_pcloc_event_read = [1,0,64,0],
      dst$l_pcloc_event_write_sym = [1,0,32,0],
    dst$a_pcloc_event_write = [1,0,32,0],
  dst$pcloc_subcommand_args = [1,0,0,0]
  TES;
literal S_DST$PCLOC_COMMANDS = 13;
MACRO DST$PCLOC_COMMANDS = BLOCK [S_DST$PCLOC_COMMANDS,byte] FIELD (DST$PCLOC_COMMANDS_FIELDSET) %;
literal DST$K_PCLOC_CMD_SIZE_END = 1;
literal DST$K_PCLOC_CMD_SIZE_PNTS = 4;
literal DST$K_PCLOC_CMD_SIZE_PNTL = 7;
literal DST$K_PCLOC_CMD_SIZE_RNGS = 7;
literal DST$K_PCLOC_CMD_SIZE_RNGL = 13;
literal DST$K_PCLOC_CMD_SIZE_LINS = 5;
literal DST$K_PCLOC_CMD_SIZE_INCR = 1;
literal DST$K_PCLOC_CMD_SIZE_SETPC64 = 9;
literal DST$K_PCLOC_CMD_SIZE_SETPC32 = 5;
literal DST$K_PCLOC_CMD_SIZE_EVENT = 1;
literal DST$K_PCLOC_CMD_SIZE_EVENT_RD = 9;
literal DST$K_PCLOC_CMD_SIZE_EVENT_WR = 5;
literal DST$K_PCLOC_END = 0;
literal DST$K_PCLOC_PNTS_INCR = 1;
literal DST$K_PCLOC_PNTL_INCR = 2;
literal DST$K_PCLOC_RNGS_INCR = 3;
literal DST$K_PCLOC_RNGL_INCR = 4;
literal DST$K_PCLOC_PNTS = 5;
literal DST$K_PCLOC_PNTL = 6;
literal DST$K_PCLOC_RNGS = 7;
literal DST$K_PCLOC_RNGL = 8;
literal DST$K_PCLOC_INCR = 9;
literal DST$K_PCLOC_SETPC64 = 10;
literal DST$K_PCLOC_SETPC32 = 11;
literal DST$K_PCLOC_EVENT_INST = 12;
literal DST$K_PCLOC_EVENT_READ = 13;
literal DST$K_PCLOC_EVENT_WRITE = 14;
literal DST$K_PCLOC_EVENT_CTRL = 15;
literal DST$K_PCLOC_EVENT_CALL = 16;
literal DST$K_PCLOC_LINS = 17;
literal DST$K_PCLOC_LINS_INCR = 18;
literal DST$K_PCLOC_EVENT_PWRIT = 19;
literal DST$K_PCLOC_EVENT_LABEL = 20;
literal DST$K_PCLOC_LOW = 0;
literal DST$K_PCLOC_HIGH = 20;
FIELD DST$CONTINUATION_FIELDSET =
  SET
  dst$a_continuation_header = [0,0,32,0]
  TES;
literal S_DST$CONTINUATION = 4;
MACRO DST$CONTINUATION = BLOCK [S_DST$CONTINUATION,byte] FIELD (DST$CONTINUATION_FIELDSET) %;
literal DST$K_CONTINUATION_HEADER_SIZE = 4;
MACRO dst$a_contin = DST$K_CONTINUATION_HEADER_SIZE, 0, 0, 0%;
FIELD DST$GOTO_FIELDSET =
  SET
  dst$a_goto_header = [0,0,32,0],
  dst$l_goto_ptr = [4,0,32,0]
  TES;
literal S_DST$GOTO = 8;
MACRO DST$GOTO = BLOCK [S_DST$GOTO,byte] FIELD (DST$GOTO_FIELDSET) %;
literal DST$K_GOTO_SIZE = 8;
FIELD DST$OVERLOAD_HEADER_FIELDSET =
  SET
  dst$a_ol_header = [0,0,32,0],
  dst$b_ol_name = [4,0,8,0]
  TES;
literal S_DST$OVERLOAD_HEADER = 5;
MACRO DST$OVERLOAD_HEADER = BLOCK [S_DST$OVERLOAD_HEADER,byte] FIELD (DST$OVERLOAD_HEADER_FIELDSET) %;
literal DST$K_OVERLOAD_HEADER_SIZE = 5;
MACRO dst$a_ol_trailer = DST$K_OVERLOAD_HEADER_SIZE, 0, 0, 0%;
FIELD DST$OVERLOAD_TRLR_FIELDSET =
  SET
  dst$w_ol_count = [0,0,16,0]
  TES;
literal S_DST$OVERLOAD_TRLR = 2;
MACRO DST$OVERLOAD_TRLR = BLOCK [S_DST$OVERLOAD_TRLR,byte] FIELD (DST$OVERLOAD_TRLR_FIELDSET) %;
literal DST$K_OVERLOAD_VECTOR_BASE = 2;
MACRO dst$a_ol_vector = DST$K_OVERLOAD_VECTOR_BASE, 0, 0, 0%;
FIELD DST$SUBUNIT_FIELDSET =
  SET
  dst$a_subunit_header = [0,0,32,0],
  dst$b_subunit_pathname_count = [4,0,8,0]
  TES;
literal S_DST$SUBUNIT = 5;
MACRO DST$SUBUNIT = BLOCK [S_DST$SUBUNIT,byte] FIELD (DST$SUBUNIT_FIELDSET) %;
literal DST$K_SUBUNIT_SIZE = 5;
FIELD DST$SET_MODULE_FIELDSET =
  SET
  dst$a_set_module_header = [0,0,32,0],
  dst$b_set_module_name = [4,0,8,0]
  TES;
literal S_DST$SET_MODULE = 5;
MACRO DST$SET_MODULE = BLOCK [S_DST$SET_MODULE,byte] FIELD (DST$SET_MODULE_FIELDSET) %;
literal DST$K_SET_MODULE_SIZE = 5;
FIELD DST$USE_CLAUSE_FIELDSET =
  SET
  dst$a_use_header = [0,0,32,0],
  dst$b_use_pathname_count = [4,0,8,0]
  TES;
literal S_DST$USE_CLAUSE = 5;
MACRO DST$USE_CLAUSE = BLOCK [S_DST$USE_CLAUSE,byte] FIELD (DST$USE_CLAUSE_FIELDSET) %;
literal DST$K_USE_CLAUSE_SIZE = 5;
FIELD DST$REAL_NAME_FIELDSET =
  SET
  dst$a_real_name_header = [0,0,32,0],
  dst$b_real_name = [4,0,8,0]
  TES;
literal S_DST$REAL_NAME = 5;
MACRO DST$REAL_NAME = BLOCK [S_DST$REAL_NAME,byte] FIELD (DST$REAL_NAME_FIELDSET) %;
literal DST$K_REAL_NAME_SIZE = 5;
FIELD DST$BODY_SPEC_FIELDSET =
  SET
  dst$a_body_spec_header = [0,0,32,0],
  dst$b_body_spec_pathname_count = [4,0,8,0]
  TES;
literal S_DST$BODY_SPEC = 5;
MACRO DST$BODY_SPEC = BLOCK [S_DST$BODY_SPEC,byte] FIELD (DST$BODY_SPEC_FIELDSET) %;
literal DST$K_BODY_SPEC_SIZE = 5;
FIELD DST$ALIAS_FIELDSET =
  SET
  dst$a_alias_header = [0,0,32,0],
  dst$l_alias_mod_offset = [4,0,32,0],
  dst$b_alias_name = [8,0,8,0]
  TES;
literal S_DST$ALIAS = 9;
MACRO DST$ALIAS = BLOCK [S_DST$ALIAS,byte] FIELD (DST$ALIAS_FIELDSET) %;
literal DST$K_ALIAS_SIZE = 9;
FIELD DST$FULFILLS_TYPE_FIELDSET =
  SET
  dst$a_fulfills_header = [0,0,32,0]
  TES;
literal S_DST$FULFILLS_TYPE = 4;
MACRO DST$FULFILLS_TYPE = BLOCK [S_DST$FULFILLS_TYPE,byte] FIELD (DST$FULFILLS_TYPE_FIELDSET) %;
literal DST$K_FULFILLS_TYPE_SIZE = 4;
MACRO dst$a_ff_incomplete_ts = DST$K_FULFILLS_TYPE_SIZE, 0, 0, 0%;
FIELD DST$DEF_LNUM_FIELDSET =
  SET
  dst$a_def_lnum_header = [0,0,32,0],
  dst$b_def_lnum_mbz = [4,0,8,0],
  dst$l_def_lnum_line = [5,0,32,0]
  TES;
literal S_DST$DEF_LNUM = 9;
MACRO DST$DEF_LNUM = BLOCK [S_DST$DEF_LNUM,byte] FIELD (DST$DEF_LNUM_FIELDSET) %;
literal DST$K_DEF_LNUM_SIZE = 9;
FIELD DST$STATLINK_FIELDSET =
  SET
  dst$a_sl_header = [0,0,32,0]
  TES;
literal S_DST$STATLINK = 4;
MACRO DST$STATLINK = BLOCK [S_DST$STATLINK,byte] FIELD (DST$STATLINK_FIELDSET) %;
literal DST$K_STATLINK_SIZE = 4;
MACRO dst$a_sl_valspec = DST$K_STATLINK_SIZE, 0, 0, 0%;
FIELD DST$PROLOG_FIELDSET =
  SET
  dst$a_prolog_header = [0,0,32,0],
  dst$l_prolog_bkpt_addr = [4,0,32,0]
  TES;
literal S_DST$PROLOG = 8;
MACRO DST$PROLOG = BLOCK [S_DST$PROLOG,byte] FIELD (DST$PROLOG_FIELDSET) %;
literal DST$K_PROLOG_SIZE = 8;
FIELD DST$PROLIST_FIELDSET =
  SET
  dst$w_prolist_header = [0,0,32,0],
  dst$lu_prolist_count = [4,0,32,0]
  TES;
literal S_DST$PROLIST = 8;
MACRO DST$PROLIST = BLOCK [S_DST$PROLIST,byte] FIELD (DST$PROLIST_FIELDSET) %;
literal DST$K_PROLIST_SIZE = 8;
MACRO dst$a_prolist = DST$K_PROLIST_SIZE, 0, 0, 0%;
FIELD DST$PROLIST_ENTRY_FIELDSET =
  SET
  dst$lu_prolist_bkpt_addr = [0,0,32,0]
  TES;
literal S_DST$PROLIST_ENTRY = 4;
MACRO DST$PROLIST_ENTRY = BLOCK [S_DST$PROLIST_ENTRY,byte] FIELD (DST$PROLIST_ENTRY_FIELDSET) %;
literal DST$K_PROLIST_ENTRY_SIZE = 4;
KEYWORDMACRO
    DST$PROLIST_VECTOR(N = 1) =
	BLOCKVECTOR[(N), DST$K_PROLIST_ENTRY_SIZE, BYTE]
	FIELD(DST$PROLIST_ENTRY_FIELDSET) %;
FIELD DST$EPILOG_FIELDSET =
  SET
  dst$w_epilog_header = [0,0,32,0],
    dst$v_epilog_addr_pairs_flag = [4,0,1,0],
    dst$v_epilog_mbz = [4,1,7,0],
  dst$b_epilog_flags = [4,0,8,0],
  dst$lu_epilog_count = [5,0,32,0]
  TES;
literal S_DST$EPILOG = 9;
MACRO DST$EPILOG = BLOCK [S_DST$EPILOG,byte] FIELD (DST$EPILOG_FIELDSET) %;
literal DST$K_EPILOG_SIZE = 9;
MACRO dst$a_epilogs = DST$K_EPILOG_SIZE, 0, 0, 0%;
FIELD DST$EPI_SINGLETON_FIELDSET =
  SET
  dst$lu_epilog_single_addr = [0,0,32,0]
  TES;
literal S_DST$EPI_SINGLETON = 4;
MACRO DST$EPI_SINGLETON = BLOCK [S_DST$EPI_SINGLETON,byte] FIELD (DST$EPI_SINGLETON_FIELDSET) %;
literal DST$K_EPILOG_SINGLETON_SIZE = 4;
KEYWORDMACRO
    DST$EPILOG_SINGLETON(N = 1) =
	BLOCKVECTOR[(N), DST$K_EPILOG_SINGLETON_SIZE,BYTE]
	FIELD(DST$EPI_SINGLETON_FIELDSET) %;
FIELD DST$EPI_PAIR_FIELDSET =
  SET
  dst$lu_epilog_pair_low_addr = [0,0,32,0],
  dst$lu_epilog_pair_high_addr = [4,0,32,0]
  TES;
literal S_DST$EPI_PAIR = 8;
MACRO DST$EPI_PAIR = BLOCK [S_DST$EPI_PAIR,byte] FIELD (DST$EPI_PAIR_FIELDSET) %;
literal DST$K_EPILOG_PAIR_SIZE = 8;
KEYWORDMACRO
    DST$EPILOG_PAIR(N = 1) =
	BLOCKVECTOR[(N), DST$K_EPILOG_PAIR_SIZE,BYTE]
	FIELD(DST$EPI_PAIR_FIELDSET) %;
FIELD DST$RETURN_FIELDSET =
  SET
  dst$w_return_header = [0,0,32,0],
  dst$b_return_mbz = [4,0,8,0],
  dst$lu_return_count = [5,0,32,0]
  TES;
literal S_DST$RETURN = 9;
MACRO DST$RETURN = BLOCK [S_DST$RETURN,byte] FIELD (DST$RETURN_FIELDSET) %;
literal DST$K_RETURN_SIZE = 9;
MACRO dst$a_returns = DST$K_RETURN_SIZE, 0, 0, 0%;
FIELD DST$VERSION_FIELDSET =
  SET
  dst$a_version_header = [0,0,32,0],
  dst$b_version_major = [4,0,8,0],
  dst$b_version_minor = [5,0,8,0]
  TES;
literal S_DST$VERSION = 6;
MACRO DST$VERSION = BLOCK [S_DST$VERSION,byte] FIELD (DST$VERSION_FIELDSET) %;
literal DST$K_VERSION_SIZE = 6;
FIELD DST$REG_SAVE_BEGIN_FIELDSET =
  SET
  dst$w_regbeg_header = [0,0,32,0],
    dst$v_regbeg_save_mask_flag = [4,0,1,0],
    dst$v_regbeg_mbz = [4,1,7,0],
  dst$bu_regbeg_flags = [4,0,8,0],
  dst$bu_regbeg_save_mask_length = [5,0,8,0]
  TES;
literal S_DST$REG_SAVE_BEGIN = 6;
MACRO DST$REG_SAVE_BEGIN = BLOCK [S_DST$REG_SAVE_BEGIN,byte] FIELD (DST$REG_SAVE_BEGIN_FIELDSET) %;
literal DST$K_REGISTER_SAVE_BEGIN_SIZE = 6;
MACRO DST$REGISTER_SAVE_BEGIN = DST$REG_SAVE_BEGIN%;
MACRO dst$v_regbeg_save_mask_base = DST$K_REGISTER_SAVE_BEGIN_SIZE, 0, 0, 0%;
literal s_dst$a_reg_save_valspec = 5;
FIELD DST$REGISTER_SAVE_FIELDSET =
  SET
  dst$w_reg_save_header = [0,0,32,0],
  dst$a_reg_save_valspec = [4,0,40,0],
  dst$bu_reg_save_regnum = [9,0,8,0]
  TES;
literal S_DST$REGISTER_SAVE = 10;
MACRO DST$REGISTER_SAVE = BLOCK [S_DST$REGISTER_SAVE,byte] FIELD (DST$REGISTER_SAVE_FIELDSET) %;
literal DST$K_REGISTER_SAVE_SIZE = 10;
FIELD DST$REGISTER_SAVE_END_FIELDSET =
  SET
  dst$w_regend_header = [0,0,32,0]
  TES;
literal S_DST$REGISTER_SAVE_END = 4;
MACRO DST$REGISTER_SAVE_END = BLOCK [S_DST$REGISTER_SAVE_END,byte] FIELD (DST$REGISTER_SAVE_END_FIELDSET) %;
literal DST$K_REGISTER_SAVE_END_SIZE = 4;
FIELD DST$EXCEPTION_FIELDSET =
  SET
  dst$w_exception_header = [0,0,32,0],
    dst$v_exception_mod_name_flag = [4,0,1,0],
    dst$v_exception_mbz = [4,1,7,0],
  dst$bu_exception_flags = [4,0,8,0],
  dst$lu_exception_value = [5,0,32,0],
    dst$b_exception_name = [9,0,8,0],
    dst$b_exception_trlr_offs = [9,0,8,0],
  dst$a_exception_variant = [9,0,8,0]
  TES;
literal S_DST$EXCEPTION = 10;
MACRO DST$EXCEPTION = BLOCK [S_DST$EXCEPTION,byte] FIELD (DST$EXCEPTION_FIELDSET) %;
literal DST$K_EXCEPTION_SIZE = 10;
MACRO dst$a_exception_trlr_base = DST$K_EXCEPTION_SIZE, 0, 0, 0%;
FIELD DST$EXCEPTION_TRAILER_FIELDSET =
  SET
  dst$b_exception_mod_name = [0,0,8,0]
  TES;
literal S_DST$EXCEPTION_TRAILER = 1;
MACRO DST$EXCEPTION_TRAILER = BLOCK [S_DST$EXCEPTION_TRAILER,byte] FIELD (DST$EXCEPTION_TRAILER_FIELDSET) %;
literal DST$K_EXCEPTION_TRAILER_SIZE = 1;
FIELD DST$BASE_CLASS_FIELDSET =
  SET
  dst$w_base_class_header = [0,0,32,0],
    dst$v_base_class_virtual = [4,0,1,0],
    dst$v_base_class_unused = [4,1,7,0],
  dst$b_base_class_flags = [4,0,8,0],
  dst$l_base_class_dst = [5,0,32,0],
  dst$l_base_class_value = [9,0,32,0]
  TES;
literal S_DST$BASE_CLASS = 13;
MACRO DST$BASE_CLASS = BLOCK [S_DST$BASE_CLASS,byte] FIELD (DST$BASE_CLASS_FIELDSET) %;
literal DST$K_BASE_CLASS_SIZE = 13;
FIELD DST$VIRT_FUNC_FIELDSET =
  SET
  dst$w_virt_func_header = [0,0,32,0],
    dst$v_virt_func_unused = [4,0,8,0],
  dst$b_virt_func_flags = [4,0,8,0],
  dst$l_virt_func_index = [5,0,32,0]
  TES;
literal S_DST$VIRT_FUNC = 9;
MACRO DST$VIRT_FUNC = BLOCK [S_DST$VIRT_FUNC,byte] FIELD (DST$VIRT_FUNC_FIELDSET) %;
literal DST$K_VIRT_FUNC_SIZE = 9;
FIELD DST$TYPE_SIG_FIELDSET =
  SET
  dst$a_type_sig_header = [0,0,32,0],
    dst$v_type_sig_unused = [4,0,8,0],
  dst$b_type_sig_flags = [4,0,8,0],
  dst$b_type_sig_string = [5,0,8,0]
  TES;
literal S_DST$TYPE_SIG = 6;
MACRO DST$TYPE_SIG = BLOCK [S_DST$TYPE_SIG,byte] FIELD (DST$TYPE_SIG_FIELDSET) %;
literal DST$K_TYPE_SIG_SIZE = 6;
FIELD DST$CXX_ATTRIBUTES_FIELDSET =
  SET
  dst$w_cxxa_header = [0,0,32,0],
    dst$v_cxxa_unused1 = [4,0,1,0],
    dst$v_cxxa_unused2 = [4,1,1,0],
    dst$v_cxxa_unused3 = [4,2,1,0],
    dst$v_cxxa_namespace = [4,3,1,0],
    dst$v_cxxa_struct = [4,4,1,0],
    dst$v_cxxa_union = [4,5,1,0],
    dst$v_cxxa_static = [4,6,1,0],
    dst$v_cxxa_unused = [4,7,9,0],
  dst$w_cxxa_flags = [4,0,16,0]
  TES;
literal S_DST$CXX_ATTRIBUTES = 6;
MACRO DST$CXX_ATTRIBUTES = BLOCK [S_DST$CXX_ATTRIBUTES,byte] FIELD (DST$CXX_ATTRIBUTES_FIELDSET) %;
literal DST$K_CXX_ATTRIBUTES_SIZE = 6;
FIELD DST$TEMP_DECL_FIELDSET =
  SET
  dst$w_temp_decl_header = [0,0,32,0],
  dst$b_temp_decl_name = [4,0,8,0]
  TES;
literal S_DST$TEMP_DECL = 5;
MACRO DST$TEMP_DECL = BLOCK [S_DST$TEMP_DECL,byte] FIELD (DST$TEMP_DECL_FIELDSET) %;
literal DST$K_TEMP_DECL_SIZE = 5;
FIELD DST$USING_FIELDSET =
  SET
  dst$w_using_header = [0,0,32,0],
  dst$l_using_dst = [4,0,32,0]
  TES;
literal S_DST$USING = 8;
MACRO DST$USING = BLOCK [S_DST$USING,byte] FIELD (DST$USING_FIELDSET) %;
literal DST$K_USING_SIZE = 8;
literal s_dst$a_cobhack_fields = 10;
FIELD DST$COB_HACK_FIELDSET =
  SET
  dst$a_cobhack_fields = [0,0,0,0]
  TES;
literal S_DST$COB_HACK = 10;
MACRO DST$COB_HACK = BLOCK [S_DST$COB_HACK,byte] FIELD (DST$COB_HACK_FIELDSET) %;
literal DST$K_COB_HACK_SIZE = 10;
MACRO dst$a_cobhack_trlr = DST$K_COB_HACK_SIZE, 0, 0, 0%;
FIELD DST$CH_TRLR_FIELDSET =
  SET
  dst$b_ch_type = [0,0,8,0]
  TES;
literal S_DST$CH_TRLR = 1;
MACRO DST$CH_TRLR = BLOCK [S_DST$CH_TRLR,byte] FIELD (DST$CH_TRLR_FIELDSET) %;
literal DST$K_CH_TRLR_SIZE = 1;
MACRO dst$a_ch_stkrtn_addr = DST$K_CH_TRLR_SIZE, 0, 0, 0%;
FIELD DST$VALSPEC_FIELDSET =
  SET
  dst$a_valspec_header = [0,0,32,0]
  TES;
literal S_DST$VALSPEC = 4;
MACRO DST$VALSPEC = BLOCK [S_DST$VALSPEC,byte] FIELD (DST$VALSPEC_FIELDSET) %;
literal DST$K_VALSPEC_SIZE = 4;
MACRO dst$a_vs_valspec_addr = DST$K_VALSPEC_SIZE, 0, 0, 0%;
MACRO
    DST$RECORD = BLOCK [256,BYTE] FIELD (
	DST$HEADER_FIELDSET,
	!
	! The rest of these are defined in alphabetic order, for easy lookup
	!
	DST$ALIAS_FIELDSET,
	DST$BASE_CLASS_FIELDSET,
	DST$BLI_FIELDS_FIELDSET,
	DST$BLISS_FIELD_FIELDSET,
    	DST$BLISS_FIELD_BEGIN_FIELDSET,
	DST$BLOCK_BEGIN_FIELDSET,
	DST$BLOCK_END_FIELDSET,
    	DST$BODY_SPEC_FIELDSET,
	DST$CONTINUATION_FIELDSET,
	DST$CXX_ATTRIBUTES_FIELDSET,
	DST$DATA_HEADER_FIELDSET,
	DST$DATA_DST_FIELDSET,
	DST$DEF_LNUM_FIELDSET,
	DST$DESCRIPTOR_FORMAT_FIELDSET,
	DST$DIS_RANGES_FIELDSET,
	DST$ENTRY_FIELDSET,
	DST$ENUM_BEGIN_FIELDSET,
	DST$EPILOG_FIELDSET,
	DST$EXCEPTION_FIELDSET,
	DST$FULFILLS_TYPE_FIELDSET,
    	DST$GOTO_FIELDSET,
	DST$INLINE_FIELDSET,
	DST$LINE_NUM_HEADER_FIELDSET,
	DST$MODULE_BEGIN_FIELDSET,
	DST$OVERLOAD_HEADER_FIELDSET,
    	DST$PACKAGE_BODY_BEGIN_FIELDSET,
    	DST$PACKAGE_BODY_END_FIELDSET,
    	DST$PACKAGE_SPEC_BEGIN_FIELDSET,
    	DST$PACKAGE_SPEC_END_FIELDSET,
	DST$PCLOC_COMMANDS_FIELDSET,
	DST$PROLOG_FIELDSET,
	DST$PROLIST_FIELDSET,
	DST$PSECT_FIELDSET,
    	DST$REAL_NAME_FIELDSET,
	DST$REG_SAVE_BEGIN_FIELDSET,
	DST$REGISTER_SAVE_FIELDSET,
	DST$REGISTER_SAVE_END_FIELDSET,
	DST$RETURN_FIELDSET,
	DST$ROUTINE_BEGIN_FIELDSET,
	DST$ROUTINE_END_FIELDSET,
	DST$ROUTINE_UNALLOC_FIELDSET,
    	DST$SET_MODULE_FIELDSET,
	DST$SOURCE_CORR_FIELDSET,
	DST$STATLINK_FIELDSET,
    	DST$SUBUNIT_FIELDSET,
	DST$TEMP_DECL_FIELDSET,
	DST$TRAILING_VALSPEC_FIELDSET,
	DST$TYPE_SIG_FIELDSET,
	DST$XVS_SPEC_FIELDSET,
	DST$TYPE_SPEC_FIELDSET,
	DST$TYPSPEC_FIELDSET,
    	DST$USE_CLAUSE_FIELDSET,
    	DST$USING_FIELDSET,
	DST$VARIANT_VALUE_FIELDSET,
	DST$VERSION_FIELDSET,
	DST$VIRT_FUNC_FIELDSET,
	!
	! The following are obsolete
	!
	DST$CH_TRLR_FIELDSET,
	DST$COB_HACK_FIELDSET,
	DST$VALSPEC_FIELDSET)
	%;
