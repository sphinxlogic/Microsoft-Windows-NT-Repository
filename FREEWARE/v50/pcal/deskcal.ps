%!PS-Adobe-1.0
%%Title: deskcal.ps version 1.4
%%Creator: Andrew Rogers
%%CreationDate: Thu Dec  3 11:04:05 EST 1998
%%Pages: 1
%%EndComments

%--------------------------------------------------------------------------
%
% A self-contained PostScript program to create a template which can be cut
% and folded into a dodecahedral calendar (one month per face).
%
% Adapted from Ole Arntzen's (olea@ii.uib.no) universal polyhedron program,
% polyeder.ps, by Andrew Rogers.
%
% Version 1.4:	Add support for printing holidays in red
%
% Version 1.3:	Use canonical calendar routines for starting day and length
%
% Version 1.2:	allow user to define starting month and first day of logical
%		week (cf. "/month" and "/startday" definitions below)
%
% Version 1.1:	flip calendars (right-side-up when viewed from top); revise
%		orientation of July..December; misc. minor tweaks
%
% This program is in the public domain.
%
%--------------------------------------------------------------------------

/month 1 def				% define starting month here (1 = Jan)
/year 2000 def				% define starting year here
/startday 0 def				% define first day of week (0 = Sun)
/datefont /Helvetica-Bold def		% font name (dates)
/titlefont /Helvetica-Bold def		% font name (month/year/weekdays)

% define array of arrays [ month day ] denoting holidays for specified year,
% e.g. "/holidays [ [1 1] [12 25] ] def"

/holidays [ ] def

/months [() (January) (February) (March) (April) (May) (June) (July)
	 (August) (September) (October) (November) (December)] def
/wkdays [(Su) (Mo) (Tu) (We) (Th) (Fr) (Sa)] def

/mon [1 11 2 10 3 9 4 12 8 5 7 6] def	% position -> logical month
/pos 0 def				% starting position
/FEB 2 def				% significant months
/JUL 7 def

statusdict /lettertray known { statusdict begin lettertray end } if

/LineLength 80 def  			% length of the edges
/fsize LineLength 10 idiv def		% font size

/center {				% str width center >> --
  /width exch def
  /str exch def
  width str stringwidth pop sub 2 div 0 rmoveto str show
} def

/strcat {				% str1 str2 >> str1str2
  2 copy
  length exch length
  dup 3 -1 roll add
  string
  dup 0 6 -1 roll putinterval
  dup 3 -1 roll 4 -1 roll putinterval
} def

/is_leap {			% year => boolean [true: leap; false: common]
    dup 4 mod 0 eq 1 index 100 mod 0 ne 2 index 400 mod 0 eq or and exch pop
} def

/month_len {			% month[1-12] year => int[28-31]
    1 index FEB eq { is_leap { pop 29 } { pop 28 } ifelse }
                   { pop dup 8 idiv add 2 mod 30 add } ifelse
} def

/day_of_week {			% month[1-12] day year => weekday[0-6]
	3 2 roll dup FEB le { 12 add exch 1 sub exch } if
	dup 2 mul exch 1 add 3 mul 5 idiv add exch	% Zeller's Congruence
	dup dup dup 4 idiv exch 100 idiv sub exch 400 idiv add add
	add add 1 add 7 mod
} def

/printcal {
  gsave
  /m mon pos get def				% get logical month

  % rotate logical July..December for consistent orientation with Jan..June
  m JUL ge {
    /angle NumEdges 2 sub 180 mul NumEdges div def
    LineLength 2 div LineLength angle sin angle 2 div cos add mul translate
    angle 2 mul rotate
  } if

  % translate logical month to physical month and year
  /m m month add 2 sub 12 mod 1 add def
  /y m month lt { year 1 add } { year } ifelse def

  % flip calendars for legibility from top/side
  180 rotate LineLength neg LineLength -1.35 mul translate

  /Y LineLength 1.05 mul def				% month/year heading
  0 Y moveto
  titlefont findfont fsize scalefont setfont
  months m get (  ) strcat y 4 string cvs strcat LineLength center

  /l m y month_len def					% length of month
  /s m 1 y day_of_week def				% starting day
  /s s startday sub 7 add 7 mod def			% starting position

  datefont findfont fsize 0.875 mul scalefont setfont	% centering info
  /w3 (222) stringwidth pop def
  /w2 (22) stringwidth pop def
  /X LineLength w3 6 mul w2 add sub 2 div def

  titlefont findfont fsize 0.75 mul scalefont setfont	% weekdays
  /Y Y fsize 1.5 mul sub def
  0 1 6 {
    /w exch def
    X w w3 mul add Y moveto
    wkdays w startday add 7 mod get w2 center
  } for

  datefont findfont fsize 0.875 mul scalefont setfont	% dates
  /Y Y fsize sub def
  1 1 l {
    /d exch def
    /D d 3 string cvs def
    X s 7 mod w3 mul add w2 add D stringwidth pop sub
      Y s 7 idiv fsize mul sub moveto
    0 setgray
    holidays {				% look up date in holiday list
      /H exch def
      m H 0 get eq d H 1 get eq and {
              1 0 0 setrgbcolor		% found - print in red
              exit
      } if
    } forall
    D show
    /s s 1 add def
  } for
  grestore
  /pos pos 1 add def
} def

/ReadCharacter
{
% This routine looks for an interesting character, and return it on
% the stack.  Illegal character => Quit.
  /OneCharacter 1 string def
  {
    currentfile OneCharacter readstring % Read one character.
    not { (Unexpected end of FILE.  Quit) print quit } if
    OneCharacter (e) eq OneCharacter (f) eq or { exit } if
    OneCharacter (3) ge OneCharacter (9) le and { exit } if
    pop

    OneCharacter (%) eq
    {   % Found comment character, drop rest of line.
      {
        currentfile OneCharacter readstring     % Read one character.
        not { (Unexpected end of FILE.  Quit) print quit } if
        pop
        OneCharacter (\012) eq { exit } if
      } loop
    }
    {
      OneCharacter ( ) gt
      {
        % Illegal character => Quit.
        (Illegal character: ") print
        OneCharacter print
        ("\012.  Quit) print
        quit
      } if
    } ifelse
  } loop
} def

/DrawEdge
{
  0 0 moveto
  LineLength 0 lineto stroke
} def

/DrawFlip
{
  [1 4] 4 setdash
  0 0 moveto
  LineLength 0 lineto stroke
  [] 0 setdash
  0 0 moveto
  LineLength 0.5 mul LineLength 0.3125 mul neg lineto
  LineLength 0 lineto stroke
} def

/InnerLoop
{
  /OneCharacter ReadCharacter def   % Read one character.
  OneCharacter (e) eq { DrawEdge }
    { OneCharacter (f) eq { DrawFlip } { DrawPolygon } ifelse } ifelse

  LineLength 0 translate
  CurrentAngle rotate
} def

/DrawPolygon
{
  [1 4] 4 setdash
  0 0 moveto
  LineLength 0 lineto stroke
  [] 0 setdash
  CurrentAngle  % Put previous CurrentAngle on stack for later use.

  /NumEdges OneCharacter cvi def
  /CurrentAngle 360 NumEdges div def
  180 CurrentAngle add rotate

  NumEdges 1 sub {
    InnerLoop
  } repeat

  printcal

  LineLength 0 translate    % Transformer back to start.
  180 rotate

  /CurrentAngle exch def    % Fetch CurrentAngle from the stack.
} def

/DrawPolyhedron
{

  /OneCharacter ReadCharacter def   % Read one character.
  /NumEdges OneCharacter cvi def
  /CurrentAngle 360 NumEdges div def

  printcal

  NumEdges {
    InnerLoop
  } repeat

} def

% Draw pentagon dodecahedron.

0.1 setlinewidth      			% line thickness

gsave
270 350 translate			% ensure output fits on page
DrawPolyhedron
5					% directions for making dodecahedron
 5 f 5fff    e ee
 5 f 5fff    e ee
 5 f 5fff    e ee
 5 f 5ff5eeeee ee
 5 f 5fff    e ee
grestore

% Print some instructions.

/Helvetica findfont 12 scalefont setfont
40 40 moveto
(Cut along solid line; score and fold along dotted lines.) show

showpage
