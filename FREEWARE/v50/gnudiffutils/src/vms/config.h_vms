/* config.h.  Generated automatically by configure.  */
/* config.h_in.  Generated automatically from configure.in by autoheader.  */
/* and modified extensively for VMS by several hands */
#ifndef __CONFIG_H
#define __CONFIG_H

/* This would be in decc$types.h on later systems. */
#ifndef __CRTL_VER
#  define __CRTL_VER __VMS_VER
#endif

/* Define if using alloca.c.  */
#define C_ALLOCA 1

/* Define if the closedir function returns void instead of int.  */
/* #undef CLOSEDIR_VOID */

/* Define to empty if the keyword does not work.  */
/* #undef const */

/* Define to one of _getb67, GETB67, getb67 for Cray-2 and Cray-YMP systems.
   This function is required for alloca.c support on those systems.  */
/* #undef CRAY_STACKSEG_END */

/* Define if you have <alloca.h> and it should be used (not Ultrix).  */
/* #undef HAVE_ALLOCA_H */

/* Define if you don't have vprintf but do have _doprnt.  */
/* #undef HAVE_DOPRNT */

/* Define if your struct stat has st_blksize.  */
/* #undef HAVE_ST_BLKSIZE */

/* Define if you have <vfork.h>.  */
/* #undef HAVE_VFORK_H */

/* Define if you have the vprintf function.  */
#define HAVE_VPRINTF 1

/* Define if on MINIX.  */
/* #undef _MINIX */

/* Define to `int' if <sys/types.h> doesn't define.  */
/* #undef pid_t */

/* Define if the system does not provide POSIX.1 features except
   with this defined.  */
/* #undef _POSIX_1_SOURCE */

/* Define if you need to in order for stat and other things to work.  */
/* #undef _POSIX_SOURCE */

/* Define as the return type of signal handlers (int or void).  */
#define RETSIGTYPE void

/* If using the C implementation of alloca, define if you know the
   direction of stack growth for your system; otherwise it will be
   automatically deduced at run-time.
	STACK_DIRECTION > 0 => grows toward higher addresses
	STACK_DIRECTION < 0 => grows toward lower addresses
	STACK_DIRECTION = 0 => direction of growth unknown
 */
/* #undef STACK_DIRECTION */

/* Define if the `S_IS*' macros in <sys/stat.h> do not work properly.  */
/* #undef STAT_MACROS_BROKEN */

/* Define if you have the ANSI C header files.  */
#define STDC_HEADERS 1

/* Define if <sys/wait.h> is compatible with Posix applications.  */
#define HAVE_SYS_WAIT_H 1

/* Define vfork as fork if vfork does not work.  */
/* #undef vfork */

/* Define if you have the dup2 function.  */
#define HAVE_DUP2 1

/* Define if you have the memchr function.  */
#define HAVE_MEMCHR 1

/* Define if you have the sigaction function.  */
#define HAVE_SIGACTION  (__CRTL_VER >= 70000000)

/* Define if you have the sigprocmask function.  */
#define HAVE_SIGPROCMASK  (__CRTL_VER >= 70000000)

/* Define if you have the strchr function.  */
#define HAVE_STRCHR 1

/* Define if you have the strerror function.  */
#define HAVE_STRERROR 0

/* Define if you have the tmpnam function.  */
#define HAVE_TMPNAM 1

/* Define if you have the fork function.  */
#define HAVE_FORK (__CRTL_VER >= 70000000)

/* Define if you have the <dirent.h> header file.  */
#if (__CRTL_VER >= 70000000)
#  define HAVE_DIRENT_H  1
#else
#  undef HAVE_DIRENT_H
#endif

/* Define if you have the <fcntl.h> header file.  */
#define HAVE_FCNTL_H 1

/* Define if you have the <limits.h> header file.  */
#define HAVE_LIMITS_H 1

/* Define if you have the <ndir.h> header file.  */
/* #undef HAVE_NDIR_H */

/* Define if you have the <stdlib.h> header file.  */
#define HAVE_STDLIB_H 1

/* Define if you have the <string.h> header file.  */
#define HAVE_STRING_H 1

/* Define if you have the <sys/dir.h> header file.  */
/* #undef HAVE_SYS_DIR_H */

/* Define if you have the <sys/file.h> header file.  */
#define HAVE_SYS_FILE_H 1

/* Define if you have the <sys/ndir.h> header file.  */
/* #undef HAVE_SYS_NDIR_H */

/* Define if you have the <time.h> header file.  */
#define HAVE_TIME_H 1

/* Define if you have the <unistd.h> header file.  */
#define HAVE_UNISTD_H 1

/* Define if you have the <unixio.h> header file.  */
#define HAVE_UNIXIO_H 1

/* Here, we define all the things that are different on VMS.  */
#ifdef __VMS

/* We'll use GNU option processing, so redefine these to 
   avoid name collisions with the C RTL */

#define getopt my_getopt
#define optarg my_optarg
#define optopt my_optopt
#define optind my_optind
#define opterr my_opterr

#define unlink(_fspec) my_unlink(_fspec)
int my_unlink (const char *file_spec);

#define same_file(s,t) \
	(memcmp((s)->st_ino, (t)->st_ino, sizeof ((s)->st_ino)) == 0 \
	 && (s)->st_dev==(t)->st_dev \
	 && (s)->st_fab_rat==(t)->st_fab_rat \
	 && (s)->st_mtime==(t)->st_mtime)

#define initialize_main(argcp, argvp) vms_initialize_main(argcp, argvp)
extern void vms_initialize_main (int *argcp, char ***argvp);

/* The C RTL manual says to undef the macro for DEC C 5.2 and lower. */
#if defined(fileno) && __DECC_VER < 50300000
#undef fileno 
#endif 

#define output_1_line(a,b,c,d) vms_output_1_line(a,b,c,d)
void vms_output_1_line (char const *, char const *, char const *, char const *);

#define exit(__status) my_exit(__status)
#define _exit(__status) my_exit(__status)
void my_exit(int status);

/* 
 * don't have opendir, readdir, etc. functions for VMS < 7.0, so emulate
 * them.  Thanks to Richard Levitte for this code...
*/

#ifndef NAM$C_BID
#include <nam.h>
#endif

#if !HAVE_DIRENT_H
#define NDIR_EMULATED
#define        DIR$S_NAME      80

#define DIRBLKSIZ      512             /* size of directory block */
#define MAXNAMLEN      (DIR$S_NAME + 7) /* 80 plus room for version #.  */
#define MAXFULLSPEC    NAM$C_MAXRSS /* Maximum full spec */
       /* NOTE:  MAXNAMLEN must be one less than a multiple of 4 */

struct direct                          /* data from readdir() */
       {
       long            d_ino;          /* inode number of entry */
       unsigned short  d_reclen;       /* length of this record */
       unsigned short  d_namlen;       /* length of string in d_name */
       char            d_name[MAXNAMLEN+1];    /* name of file */
       };

typedef struct
       {
       int     dd_fd;                  /* file descriptor */
       int     dd_loc;                 /* offset in block */
       int     dd_size;                /* amount of valid data */
       char    dd_buf[DIRBLKSIZ];      /* directory block */
       }       DIR;                    /* stream data from opendir() */

extern DIR             *opendir();
extern struct direct   *readdir();
extern int             closedir();
#define rewinddir( dirp )      seekdir( dirp, 0L )

#endif  /* !HAVE_DIRENT_H */

/* 
 * I/O through mailboxes needs a buffer larger than the largest data chunk
 * that will be written or read, so use the optional 3rd argument (a VMS
 * extension) of pipe() to create a buffer larger than the default 512.
 */

#include <unistd.h> /* unfortunately have to get prototype first */
#define pipe(__fd) pipe(__fd, 0, 9 * 1024)

/* if VMS < 7.0, have to emulate popen/pclose */

#if (__CRTL_VER < 70000000 || defined(LINK_TARGET_PRE7))
#define PIPE_EMULATED
#include <stdio.h>
int pclose (FILE * f);
FILE *popen (const char * command, const char *type);
#endif

/* 
 * We don't have alloca.h, so cook our own prototype. DEC C 6.0 wants to make
 * alloca intrinsic, so we have to say no explicitly.  The function pragma is 
 * the opposite of the intrinsic pragma and is available only on Alpha.
 */

void *alloca(unsigned);
#if __DECC_VER >= 60000000 && defined(__ALPHA)
#pragma function (alloca) /* don't let it be an intrinsic */
#endif

/* disable informational message about time_t declarations in C 6.2 and later */
#if __DECC_VER > 60200000
#  pragma message disable (QUESTCOMPARE1)
#endif

#endif /* __VMS */
#endif /* __CONFIG_H */
