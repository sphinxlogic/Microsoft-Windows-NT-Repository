    
$ DEFINE/SYS FAL$LOG 1F
    
And look at netserver.log.  Lots of interesting stuff in there now.

     FAL$LOG logical name with equivalence string of X or X_Y where:

     1.  X is a hexadecimal bit mask as follows:
          Bit 0 set enables logging of file name.
          Bit 1 set enables generation of throughput statistics.
          Bit 2 set enables logging of DAP messages.
          Bit 3 set enables logging of xmit and recv AST completions.
          Bit 4 set enables logging of xmit and recv QIO requests.
          Bit 5 is reserved.
          Bit 6 set disables DAP message blocking.
          Bit 7 set disables DAP CRC error checking.
          Bits 8-31 are reserved.

     2.  Y is a  hexadecimal  number  of  bytes  per  DAP  message  to
         display.

     Example Definitions:
          $ Define FAL$LOG 1
          $ Define FAL$LOG DF
          $ Define FAL$LOG 5_50

     Note that options 2,3, and 4 degrade performance.

--------------------------------------------------------------------------------
    
To poke around in the NML protocols...
    
$ DEFINE NML$LOG FF
$ MCR NCP
NCP> do anything interesting...

     Network Management Listener (NML) logging:

        Bit 0 = all NICE messages.
        Bit 1 = all permanent data base I/O.
        Bit 2 = endparse state transitions.
        Bit 3 = loopback I/O.
        Bit 4 = ACP I/O
        Bit 5 = MOP I/o
        Bit 6 = Service operations.
        Bit 7 = logs things related to event processing.
        Bits 8-15 = reserved (no purpose yet).

        Bits 16-21 dump an entire permanent data base:
           Bit 16 = dump node data base.
           Bit 17 = dump line data base.
           Bit 18 = dump logging data base.
           Bit 19 = dump object data base.
           Bit 20 = dump circuit data base.
           Bit 21 = dump module data base.



--------------------------------------------------------------------------------

  To poke around in RTPAD

$ define rtpad$log  some-hex-number (eg 1 or 3)
$ define rtpad$trace some-output-file (only needed for some bits)
    
