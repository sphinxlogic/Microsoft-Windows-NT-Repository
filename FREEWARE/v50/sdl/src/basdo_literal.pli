/*
*****************************************************************************
*									    *
*  Copyright (c) 1988							    *
*  by DIGITAL Equipment Corporation, Maynard, Mass.			    *
* 									    *
*  This software is furnished under a license and may be used and  copied   *
*  only  in  accordance  with  the  terms  of  such  license and with the   *
*  inclusion of the above copyright notice.  This software or  any  other   *
*  copies  thereof may not be provided or otherwise made available to any   *
*  other person.  No title to and ownership of  the  software  is  hereby   *
*  transferred.							 	    *
* 									    *
*  The information in this software is subject to change  without  notice   *
*  and  should  not  be  construed  as  a commitment by DIGITAL Equipment   *
*  Corporation.							   	    *
* 									    *
*  DIGITAL assumes no responsibility for the use or  reliability  of  its   *
*  software on equipment which is not supplied by DIGITAL.		    *
*									    *
*****************************************************************************

facility:

	SDL (Structure Definition Language)


author:
	Jeff Goodenough

*/

/*			C H A N G E    L O G

      Date	| Name	| Description
________________|_______|______________________________________________________
    22-Feb-1988	|  jg	| X3.2-0  Process a LITERAL node (created using
		|	|	  DO_ENTRY as a model)
________________|_______|______________________________________________________
*/


/****************************************************************/
/*								*/
/* DO_LITERAL processes a literal node.				*/
/*								*/
/****************************************************************/

do_literal: proc(cur_node,level);
					    /********************/
					    /*			*/
					    /* DO_LITERAL	*/
					    /*			*/
					    /********************/
%include 'sdl$library:sdlnodef.in';
%include 'sdl$library:sdltypdef.in';	/* jg */

/* declare variables */
declare
    cur_node pointer,			    /* pointer to the current node  */
    level fixed binary(31),		    /* level in the aggregate	    */
    buf char(1024) var initial(''),	    /* output buffer		    */
    based_string char(1024) var based;

DCL OUTPUT_BUF ENTRY (
	character(1024) VARYING );

DCL ADD_COMMENTS ENTRY (
	pointer,
	character(1024) VARYING );


    buf = cur_node->nod$a_typeinfo2->based_string;
    call add_comments(cur_node,buf);
    call output_buf(buf);

end do_literal;
