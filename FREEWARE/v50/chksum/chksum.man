.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH CHKSUM 1 "perl 5.004, patch 04" "15/Mar/101" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
chksum \- Computes the file checksum of a file or files.
.PP
chksum [options] file1 {file2 file3 ...}
.SH "DESCRIPTION"
\fIchksum\fR  provides  most  of  the capabilities of the Unix \fIsum\fR and \fIcksum\fR
programs. It also implements the MD5 checksum based on the GNU MD5 code
implementation all in one package.
.SH "Usage"
\fIchksum\fR  command  can  be  used  to  compare  a  suspect file copied or
communicated over noisy transmission lines, internet or unpacked  from
an  archive  against  an exact copy of a trusted file.  The comparison
made by the command may not be cryptographically secure ; however,  it
is  unlikely  that  an accidentally damaged file will produce the same
checksum as the original file.
.PP
\fIchksum\fR  was  initially written  to  offer  to  OpenVMS Users an exact
equivalent tool than what already exists (or  available  as  freeware)
under  Unix  system.  However, \fIchksum\fR can be compiled on Unix system
and provides the same functionality across platform since the available
cksum and sum programs seems to give different results and their options
have different meaning.
.SH "Options"
.PP
.Vb 8
\& -b     Computes the BSD checksum, computation with BUFSIZ blocks
\& -r     Computes the BSD checksum, computation with 1Kb blocks
\& -s     512-byte blocks SYSV compatible
\& -o     1Kb blocks SYSV compatible
\& -c     Cyclic Redundancy Check (CRC) checksum and number of bytes
\&        (according to IEEE Std 1003.2-1992 and X/Open CAE)
\& -m     Compute MD5 checksum of files according to the definition
\&        of MD5 in RFC 1321 from April 1992.
.Ve
Default is \f(CW-b\fR unless overwritten by the environment variable CHKSUM_OPTION.
This variable should be set to one of \*(L"b\*(R","r\*(R","s\*(R","o\*(R","c\*(R" or \*(L"m\*(R".
.SH "Equivalences"
.PP
.Vb 5
\& VMS/Unix       Digital Unix    Linux
\& ------------------------------------------------
\& $ chksum -r    % sum -r        % sum -r
\& $ chksum -o    % sum -o        % sum --sysv
\& $ chksum -c    see below       % cksum
.Ve
There are differences between the natice Digital Unix \fIcksum\fR program
and the GNU \fIcksum\fR program. \fIchksum\fR is compatible with the GNU version
of \fIcksum\fR.
.SH "Limitations"
The default option is non-portable (depends on your OS BUFSIZ). It has
been preserved for backward compatibility purposes only. To change the
default option, define the environment variable CHKSUM_OPTION as described
in the \f(CWOptions\fR section.
.PP
Currently,  only  the  last version of a file can be checksum-ed under
VMS OS.
.SH "ReturnValue"
\fIchksum\fR  returns  a EXIT_SUCCESS status if no error was found, each +10
correspond to one file open/close error and +1 for each read-error.
.SH "VMSNotes"
Return value
This  return  value  will  produce  a  \s-1VMS\s0  cli message which
relevance is doubtful \s-1AND\s0 misleading.  We maintained the  initial  scheme
for  cross-platform  portability  reasons i.e.  regardless of where you are
running chksum, the value returned to the shell  can  be  tested  within  a
script.
.PP
Caveat
How  did  I  test this program and what are the caveat ? Well, first,
I have tested on both Digital Unix and Linux for consistent results.
.Sp
Then, I went  to  the  Seti homepage at 
\f(CWhttp://setiathome.ssl.berkeley.edu/\fR  and  looked  at the different
checksum given in \f(CWhttp://setiathome.ssl.berkeley.edu/unix.html\fR for
alpha_openvms_bck.exe downloaded on a Digital Unix machine. I could
reproduce the checksums given there using  \f(CW-m\fR,  \f(CW-r\fR  and \f(CW-c\fR
options.
.Sp
The  preceding  test failed when the same package was downloaded under
an OpenVMS node.  U<Don't panic> ! This is normal as explained below.
.Sp
This   missmatch   comes   from   the  \s-1VMS\s0  \s-1RMS\s0  file  attributes  and
specifically, the missmatch between the 2 \s-1OS\s0 produced \*(L'Record Format\*(R'.
.Sp
.Vb 2
\& OSF1 downloaded file : Stream_LF, maximum 0 bytes, longest 0 bytes
\& VMS downloaded file  : Fixed length 512 byte records
.Ve
For  a fair comparison, you \s-1MUST\s0 convert your file to Stream_LF format
before using \fIchksum\fR.  This can be done by using  (OpenVMS  6.2  and
above) the following command :
.Sp
.Vb 1
\& $ set file/attribute=RFM:STMLF file.ext
.Ve
.SH "Version&Author"
This help describes version 1.2* .
The  \s-1CRC\s0  code has been taken from cksum written by Q.  Frank Xia, and
Copyright (C) 92, 1995-1999 Free Software Foundation, Inc.
.Sp
The  \s-1MD5\s0  checksum has been implemented based on the routines provided
in the \s-1GNU\s0 version of \s-1MD5\s0.C, written by Written by Ulrich Drepper  and
Copyright (C) 1995, 1996 Free Software Foundation, Inc.
.PP
This software was otherwise written by Jerome \s-1LAURET\s0
Copyright (c) 1999-2001 under the terms of the \s-1GNU\s0 \s-1GPL\s0.
.PP
If  you encounter any problem with this utility (other than \s-1IO\s0 error),
please, send me an Email along with a description of what you did  and
the    file    you    tried    to    check.     Also,   please,   send
comments/suggestions/flame/blame/curses to me.  They are all  welcomed
and will help other people in future by making this software better.
.PP
Email : \f(CWjlauret@mail.chem.sunysb.edu\fR

.rn }` ''
.IX Title "CHKSUM 1"
.IX Name "chksum - Computes the file checksum of a file or files."

.IX Header "NAME"

.IX Header "DESCRIPTION"

.IX Header "Usage"

.IX Header "Options"

.IX Header "Equivalences"

.IX Header "Limitations"

.IX Header "ReturnValue"

.IX Header "VMSNotes"

.IX Header "Version&Author"

