To:	Users
From:	The Author
Subj:	Simulator Usage
Date:	1-Jul-95

This memorandum documents the PDP-8, PDP-11, and Nova simulators.  These
simulators are freeware; commercial use is prohibited, and support is
not available.  The best way to fix problems or add features is to read
and modify the sources yourself.  Alternately, you can send Internet mail
to dsmaint@pa.dec.com; but responses are NOT guaranteed.  [Note: the
Nova simulator is not included in this release.]

The simulators use a common command interface.  The memorandum first
describes the common features of the command interface and then provides
information on each of the individual simulators.


1. Compiling And Running A Simulator

The simulators have been tested on VAX/VMS, Alpha/VMS, and Alpha/OSF.
Porting to other environments will require changes to the operating
system dependent code in scp_tty.c.

To compile the simulators on Alpha/OSF, use these commands:

	% cc pdp8*.c scp*.c -lm -o pdp8
	% cc pdp11*.c scp*.c -o pdp11
	% cc nova*.c scp*.c -lm -o nova

To start the simulator, simply type its name.  The simulator takes
one optional argument, a startup command file.  If specified, this
file should contain a series of non-interactive simulator commands,
one per line.  These command can be used to set up standard parameters,
for example, disk sizes.

	% pdp8 <startup file>(cr)	or
	% pdp11 <startup file>(cr)	or
	% nova <startup file>(cr)

The simulator types out its name and version, executes the commands
in the startup file, if any, and then prompts for input with

	sim>

2. Simulator Conventions

A simulator consists of a series of devices, the first of which is always
the CPU.  A device consists of named registers and one or more numbered
units.  Registers correspond to device state, units to device address
spaces.  Thus, the CPU device might have registers like PC, ION, etc,
and a unit corresponding to main memory; a disk device might have
registers like BUSY, DONE, etc, and units corresponding to individual
disk drives.  Except for main memory, device address spaces are simulated
as disk files in the host file system.  The SHOW CONFIGURATION command
displays the simulator configuration.

A simulator keeps time in terms of arbitrary units, usually one time unit
per instruction executed.  Simulated events (such as completion of I/O)
are scheduled at some number of time units in the future.  The simulator
executes synchronously, invoking event processors when simulated events
are scheduled to occur.  Even asynchronous events, like keyboard input,
are handled by polling at synchronous intervals.  The SHOW QUEUE command
displays the simulator event queue.

3. Commands

3.1 Loading Programs

The LOAD command (abbreviation LO) loads a file in binary paper-tape
loader format:

	sim> load <filename>(cr)

3.2 Saving and Restoring State

The SAVE command (abbreviation SA) save the complete state of the
simulator to a file.  This includes the contents of main memory and
all registers, and the I/O connections of devices:

	sim> save <filename>(cr)

The RESTORE command (abbreviation REST, alternately GET) restores a
previously saved simulator state:

	sim> restore <filename>(cr)

Note: SAVE file format compresses zeroes to minimize file size.

3.3 Resetting Devices

The RESET command (abbreviation RE) resets a device or the entire
simulator to a predefined condition:

	sim> RESET(cr)			-- reset all devices
	sim> RESET ALL(cr)		-- reset all devices
	sim> RESET <device>(cr)		-- reset specified device

Typically, RESET stops any in-progress I/O operation, clears any
interrupt request, and returns the device to a quiescent state.  It
does not clear main memory or affect I/O connections.

3.4 Connecting and Disconnecting Devices

Except for main memory, simulated unit address spaces are simulated as
disk files in the host file file system.  Before using a simulated unit
the user must specify the file to be used by a particular unit.  The
ATTACH (abbreviation AT) command associates a unit and a disk file:

	sim> ATTACH <device><unit number> <filename>(cr)

If the file does not exist, it is created, and an appropriate message
is printed.

The DETACH (abbreviation DET) command breaks the association between a
unit and a file and closes the file:

	sim> DETACH ALL(cr)			-- detach all units
	sim> DETACH <device><unit number>(cr)	-- detach specified unit

The EXIT command performs an automatic DETACH ALL.

3.5 Examining and Changing State

There are four commands to examine and change state:

	EXAMINE (abbreviated E) examines state
	DEPOSIT (abbreviated D) changes state
	IEXAMINE (interactive examine, abbreviated IE) examines state
		and allows the user to interactively change it
	IDEPOSIT (interactive deposit, abbreviated ID) allows the user
		to interactively change state

All four commands take the form

	command {-switches} {<device>{<unit number>}} <state list>

Deposit must also include a deposit value at the end of the command.

The examine and deposit commands can work on the address space of any
unit.  If no device is specified, the CPU (main memory) is selected; if
a device but no unit is specified, unit 0 of the specified device is
selected.  The "state list" consists of one or more of the following,
separated by commas:

	register		the specified register
	register1-register2	all the registers starting at register1
				up to and including register2
	address			the specified location
	address1-address2	all locations starting at address1 up to
				and including address2
	STATE			all registers in the device
	ALL			all locations in the unit

Switches can be used to control the format of display information:

	-a			display as ASCII
	-c			display as character string
	-m			display as instruction mnemonics

The simulators typically accept symbolic input (see simulator sections).

Examples:

	sim> ex 1000-1100			-- examine 1100:1100
	sim> de PC 1040				-- set PC to 1040
	sim> ie 40-50				-- interactively examine 40:50
	sim> ex rx0 50060			-- examine 50060, RX unit 0
	sim> de all 0				-- set main memory to 0

Note: to terminate an interactive command, simply type a bad value (eg,
XXX) when input is requested.

3.6 Running Programs

The RUN command (abbreviated RU) resets all devices, deposits its argument
(if given) in the PC, and starts execution.  If no argument is given,
execution starts at the current PC.

The GO command does NOT reset devices, deposits its argument (if given) in
the PC, and starts execution.  If no argument is given, execution starts at
the current PC.

The CONT command (abbreviated CO) does NOT reset devices and resumes
execution at the current PC.

The STEP command (abbreviated S) resumes execution at the current PC for
the number of instructions given by its argument.  If no argument is
supplied, one instruction is executed.

The BOOT command (abbreviated BO) bootstraps the random access device
and unit given by its argument.  If no unit is supplied, unit 0 is
bootstrapped.  The specified unit must be attached to a disk file.

3.7 Stopping Programs

Programs run until the simulator detects an error or stop condition, or
until the user forces a stop condition.

3.7.1 Simulator Detected Stop Conditions

These simulator-detected conditions stop simulation:

o HALT instruction.  If a HALT instruction is decoded, simulation stops.

o Breakpoint.  The IBKPT register provides a single virtual address
  breakpoint.  If the PC matches the contents of the IBKPT register,
  simulation stops.  The breakpoint is automatically disabled for
  the next instruction execution.

o I/O error.  If an I/O error occurs during simulation of an I/O operation,
  and the device stop-on-I/O-error flag is set, simulation usually stops.

o Processor condition.  Certain processor conditions can stop simulation;
  these are described with the individual simulators.

3.7.2 User Specified Stop Conditions

Typing the interrupt character stops simulation.  The interrupt character
is defined by the WRU (where are you) register and is initially set to
005 (^E).

3.8 Setting Device Parameters

The SET command (abbreviated SE) changes the status of a device parameter:

	sim> SET <unit> <parameter>

The parameters are simulator and device specific.  Disk drives, for
example, can usually be set ONLINE or OFFLINE, write ENABLED or write
LOCKED; if a device supports multiple drive types, the SET command
can be used to specify the drive type.

3.8 Displaying Parameters and Status

The SHOW CONFIGURATION command shows the simulator configuration and the
status of all simulated I/O devices.

The SHOW <device> command shows the status of the named simulated I/O
device.

The SHOW QUEUE command shows the state of the simulator event queue.  Times
are in "simulation units", typically one unit per instruction execution,
relative to the current simulation time.

The SHOW TIME command shows the number of time units elapsed since
the last RUN command.

3.9 Exiting The Simulator

EXIT (synonym QUIT) returns control to the operating system.

4. PDP-8 Features

The PDP-8 simulator is configured as follows:

device		simulates
name(s)

CPU		PDP-8/E CPU with 32KW of memory
-		KE8-E extended arithmetic element (EAE)
-		KM8-E memory management and timeshare control
PTR,PTP		PC8-E paper tape reader/punch
TTI,TTO		KL8-E console terminal
LPT		LE8-E line printer
CLK		DK8-E line frequency clock (also PDP-8/A compatible)
RK		RK8-E/RK05 cartridge disk controller with four drives
RF		RF08 fixed head disk controller with four platters
RX		RX8-E/RX01 floppy disk controller with two drives

The PDP-8 simulator implements one unique stop condition: if an undefined
instruction (unimplemented IOT or OPR) is decoded, and register STOP_INST
is set, the simulator halts.

4.1 CPU

The only CPU options are the presense of the EAE and the size of main memory;
the memory extension and time-share control is always included, even if
memory size is 4K.

	SET CPU EAE		enable EAE
	SET CPU NOEAE		disable EAE
	SET CPU 4K		set memory size = 4K
	SET CPU 8K		set memory size = 8K
	SET CPU 12K		set memory size = 12K
	SET CPU 16K		set memory size = 16K
	SET CPU 20K		set memory size = 20K
	SET CPU 24K		set memory size = 24K
	SET CPU 28K		set memory size = 28K
	SET CPU 32K		set memory size = 32K

If memory size is being reduced, and the memory being truncated contains
non-zero data, the simulator asks for confirmation.  Data in the truncated
portion of memory is lost.  Initial memory size is 32K.

CPU registers include the visible state of the processor as well as the
control registers for the interrupt system.

	name		size	comments

	PC		15	program counter, including IF as high 3 bits
	AC		12	accumulator
	MQ		12	multiplier-quotient
	L		1	link
	SR		12	front panel switches
	IF		3	instruction field
	DF		3	data field
	IB		3	instruction field buffer
	SF		7	save field
	UF		1	user mode flag
	UB		1	user mode buffer
	SC		5	EAE shift counter
	GTF		1	EAE greater than flag
	EMODE		1	EAE mode (0 = A, 1 = B)
	ION		1	interrupt enable
	ION_DELAY	1	interrupt enable delay for ION
	CIF_DELAY	1	interrupt enable delay for CIF
	PWR_INT		1	power fail interrupt
	UF_INT		1	user mode violation interrupt
	INT		14	interrupt pending flags
	DONE		14	device done flags
	ENABLE		14	device interrupt enable flags
	OLDPC		15	PC prior to last JMP, JMS, or interrupt
	STOP_INST	1	stop on undefined instruction
	BREAK		16	breakpoint address (177777 to disable)
	WRU		8	interrupt character

4.2 Programmed I/O Devices (PTR, PTP, TTI, TTO, CLK, LPT)

The paper tape reader (PTR), paper tape punch (PTP), and line printer
(LPT) read data from or write data to disk files.  The POS register
specifies the number of the next data item to be read or written.  Thus,
by changing POS, the user can backspace or advance these devices.

The programmed I/O devices typically implement these registers:

	name		size	comments

	BUF		8	last data item processed
	INT		1	interrupt pending flag
	DONE		1	device done flag
	ENABLE		1	interrupt enable flag
	TIME		24	time from I/O initiation to interrupt
				(for keyboard, polling interval)
	POS		32	position in the input or output file
	STOP_IOE	1	stop on I/O error

For the serial devices, error handling is as follows:

	type	error	     STOP_IOE	processed as

	in,out	not attached	1	report error and stop
				0	out of tape or paper

	in	end of file	1	report error and stop
				0	out of tape or paper

	in,out	OS I/O error	x	report error and stop

4.3 RK8E/RK05

RK8E options include the ability to place units online or offline,
write enabled or write locked:

	SET RKn OFFLINE		set unit n offline
	SET RKn ONLINE		set unit n online
	SET RKn LOCKED		set unit n write locked
	SET RKn ENABLED		set unit n write enabled

The RK8E implements these registers:

	name		size	comments

	STAT		12	status
	CAR		12	current memory address
	DAR		12	disk address
	CMD		12	disk command
	BUSY		1	control busy flag
	INT		1	interrupt pending flag
	STIME		24	seek time, per cylinder
	RTIME		24	rotational delay
	STOP_IOE	1	stop on I/O error

Error handling is as follows:

	error	     STOP_IOE	processed as

	not attached	1	report error and stop
			0	disk not ready

	end of file	x	assume rest of disk is zero

	OS I/O error	x	report error and stop

4.4 RX8E/RX01

RX8E options include the ability to set units write enabled or write locked:

	SET RXn LOCKED		set unit n write locked
	SET RXn ENABLED		set unit n write enabled

The RX8E implements these registers:

	name		size	comments

	RXCS		12	status
	RXDB		12	data buffer
	RXES		8	error status
	RXTA		8	current track
	RXSA		8	current sector
	STAPTR		3	controller state
	BUFPTR		3	buffer pointer
	INT		1	interrupt pending flag
	DONE		1	device done flag
	ENABLE		1	interrupt enable flag
	TR		1	transfer ready flag
	ERR		1	error flag
	CTIME		24	command completion time
	STIME		24	seek time, per track
	XTIME		24	transfer ready delay
	STOP_IOE	1	stop on I/O error

Error handling is as follows:

	error	     STOP_IOE	processed as

	not attached	1	report error and stop
			0	disk not ready

RX01 data files are buffered in memory; therefore, end of file and OS
I/O errors cannot occur.

4.5 RF08

The RF08 implements these registers:

	name		size	comments

	STAT		12	status
	DAR		20	current disk address
	WLK		32	write lock switches
	INT		1	interrupt pending flag
	DONE		1	device done flag
	TIME		24	rotational delay, per word
	BURST		1	burst flag
	STOP_IOE	1	stop on I/O error

The RF08 is a three-cycle data break device.  If BURST = 0, word transfers
are scheduled individually; if BURST = 1, the entire transfer occurs in
a single data break.

Error handling is as follows:

	error	     STOP_IOE	processed as

	not attached	1	report error and stop
			0	disk not ready

RF08 data files are buffered in memory; therefore, end of file and OS
I/O errors cannot occur.

4.6 Symbolic Display and Input

The PDP-8 simulator implements symbolic display and input.  Display is
controlled by command line switches:

	-a			display as ASCII character
	-c			display as (sixbit) character string
	-m			display instruction mnemonics

Input parsing is controlled by the first character typed in:

	'			ASCII character
	"			two character sixbit string
	alphabetic		instruction mnemonic
	numeric			octal number

Instruction input uses standard PDP-8 assembler syntax.  There are four
instruction classes: memory reference, IOT, field change, and operate.

Memory reference instructions have the format

	memref {I} {T/Z} address

where I signifies indirect, T a current page reference, and Z a zero page
reference.  The address is an octal number in the range 0 - 07777; if T or
Z is specified, the address is a page offset in the range 0 - 177.  Normally,
T is not needed; the simulator figures out from the address what mode to use.
However, when referencing memory outside the CPU (eg, disks), there is no
valid PC, and T must be used to specify current page addressing.

IOT instructions consist of single mnemonics, eg, KRB, TLS.  IOT instructions
may be or'd together

	iot iot iot...

The simulator does not check the legality of the proposed combination.  IOT's
for which there is no opcode may be specified as IOT n, where n is an octal
number in the range 0 - 0777.

Field change instructions (CIF, CDF) have the format

	fldchg field

where field is an octal number in the range 0 - 7.  Field change instructions
may be or'd together.

Operate instructions have the format

	opr opr opr...

The simulator does not check the legality of the proposed combination.  EAE
mode A and B mnemonics may be specified regardless of the EAE mode.  The
address operands for MUY and DVI must be deposited explicitly.

5. PDP-11 Features

The PDP-11 simulator is configured as follows:

device		simulates
name(s)

CPU		J-11 CPU with 256KB of memory
-		FP-11 floating point unit (FPA)
PTR,PTP		PC-11 paper tape reader/punch
TTI,TTO		DL-11 console terminal
LPT		LP-11 line printer
CLK		line frequency clock
RK		RK11/RK05 cartridge disk controller with eight drives
RL		RLV12/RL01(2) cartridge disk controller with four drives
RX		RX-11/RX01 floppy disk controller with two drives

The PDP-11 simulator implements several unique stop conditions:

	- abort during exception vector fetch, and register STOP_VEC is set
	- abort during exception stack push, and register STOP_SPA is set
	- trap condition 'n' occurs, and register STOP_TRAP<n> is set
	- wait state entered, and no I/O operations outstanding
	  (ie, no interrupt can ever occur)

5.1 CPU

Memory size is a compile time parameter in pdp11_defs.h; the standard
memory size is 248KB.

These switches are recognized when examining or depositing in CPU memory:

	-v			interpret address as virtual
	-d			if mem mgt enabled, force data space
	-k			if mem mgt enabled, force kernel mode
	-s			if mem mgt enabled, force supervisor mode
	-u			if mem mgt enabled, force user mode
	-p			if mem mgt enabled, force previous mode

CPU registers include the visible state of the processor as well as the
control registers for the interrupt system.

	name		size	comments

	PC		16	program counter
	R0..R5		16	R0..R5, first register set
	R10..R15	16	R0..R5, second register set
	KSP		16	kernel stack pointer
	SSP		16	supervisor stack pointer
	USP		16	user stack pointer
	PSW		16	processor status word
	  CM		2	  current mode, PSW<15:14>
	  PM		2	  previous mode, PSW<13:12>
	  RS		2	  register set, PSW<11>
	  IPL		3	  interrupt priority level, PSW<7:5>
	  T		1	  trace bit, PSW<4>
	  N		1	  negative flag, PSW<3>
	  Z		1	  zero flag, PSW<2>
	  V		1	  overflow flag, PSW<1>
	  C		1	  carry flag, PSW<0>
	SR		16	front panel switches
	DR		16	front panel display
	MEMERR		16	memory error register
	CCR		16	cache control register
	MAINT		16	maintenance register
	HITMISS		16	hit/miss register
	CPUERR		16	CPU error register
	PIRQ		16	programmed interrupt requests
	FAC0H..FAC5H	32	FAC0..FAC5, high 32 bits
	FAC0L..FAC5L	32	FAC0..FAC5, low 32 bits
	FPS		16	floating point status
	FEA		16	floating exception address
	FEC		4	floating exception code
	MMR0..3		16	memory management registers 0..3
	{K/S/U}{I/D}{PAR/PDR}{0..7}
			16	memory management registers
	INT		32	interrupt pending flags
	TRAP		18	trap pending flags
	WAIT		0	wait state flag
	WAIT_ENABLE	0	wait state enable flag
	STOP_TRAPS	18	stop on trap flags
	STOP_VECA	1	stop on read abort in trap or interrupt
	STOP_SPA	1	stop on stack push abort in trap or interrupt
	OLDPC		16	PC prior to last JMP, JMS, or interrupt
	BREAK		16	breakpoint address (1 to disable)
	WRU		8	interrupt character

5.2 Programmed I/O Devices (PTR, PTP, TTI, TTO, CLK, LPT)

The paper tape reader (PTR), paper tape punch (PTP), and line printer
(LPT) read data from or write data to disk files.  The POS register
specifies the number of the next data item to be read or written.  Thus,
by changing POS, the user can backspace or advance these devices.

The programmed I/O devices typically implement these registers:

	name		size	comments

	BUF		8	last data item processed
	CSR		16	control/status register
	INT		1	interrupt pending flag
	ERR		1	error flag (CSR<15>)
	DONE		1	device done flag (CSR<7>)
	IE		1	interrupt enable flag (CSR<6>)
	TIME		24	time from I/O initiation to interrupt
				(for keyboard, polling interval)
	POS		32	position in the input or output file
	STOP_IOE	1	stop on I/O error

For the serial devices, error handling is as follows:

	type	error	     STOP_IOE	processed as

	in,out	not attached	1	report error and stop
				0	out of tape or paper

	in	end of file	1	report error and stop
				0	out of tape or paper

	in,out	OS I/O error	x	report error and stop

5.3 RK11/RK05

RK11 options include the ability to place units online or offline,
write enabled or write locked:

	SET RKn OFFLINE		set unit n offline
	SET RKn ONLINE		set unit n online
	SET RKn LOCKED		set unit n write locked
	SET RKn ENABLED		set unit n write enabled

The RK11 implements these registers:

	name		size	comments

	RKCS		16	control/status
	RKDA		16	disk address
	RKBA		16	memory address
	RKWC		16	word count
	RKDS		16	drive status
	RKER		16	error status
	INTQ		9	interrupt queue
	DRVN		3	number of last selected drive
	INT		1	interrupt pending flag
	ERR		1	error flag (CSR<15>)
	DONE		1	device done flag (CSR<7>)
	IE		1	interrupt enable flag (CSR<6>)
	INT		1	interrupt pending flag
	STIME		24	seek time, per cylinder
	RTIME		24	rotational delay
	STOP_IOE	1	stop on I/O error

Error handling is as follows:

	error	     STOP_IOE	processed as

	not attached	1	report error and stop
			0	disk not ready

	end of file	x	assume rest of disk is zero

	OS I/O error	x	report error and stop

5.4 RX11/RX01

RX11 options include the ability to make units write enabled or write locked:

	SET RXn LOCKED		set unit n write locked
	SET RXn ENABLED		set unit n write enabled

The RX11 implements these registers:

	name		size	comments

	RXCS		12	status
	RXDB		8	data buffer
	RXES		8	error status
	RXERR		8	error code
	RXTA		8	current track
	RXSA		8	current sector
	STAPTR		3	controller state
	BUFPTR		3	buffer pointer
	INT		1	interrupt pending flag
	ERR		1	error flag (CSR<15>)
	TR		1	transfer ready flag (CSR<7>)
	IE		1	interrupt enable flag (CSR<6>)
	DONE		1	device done flag (CSR<5>)
	CTIME		24	command completion time
	STIME		24	seek time, per track
	XTIME		24	transfer ready delay
	STOP_IOE	1	stop on I/O error

Error handling is as follows:

	error	     STOP_IOE	processed as

	not attached	1	report error and stop
			0	disk not ready

RX01 data files are buffered in memory; therefore, end of file and OS
I/O errors cannot occur.

5.5 RL11(V12)/RL01,RL02

RL11 options include the ability to set units write enabled or write locked,
and to set the drive size to RL01, RL02, or autosize:

	SET RLn LOCKED		set unit n write locked
	SET RLn ENABLED		set unit n write enabled
	SET RLn RL01		set size to RL01
	SET RLn RL02		set size to RL02
	SET RLn AUTOSIZE	set size based on file size at attach

The size options can be used only when a unit is not attached to a file.

The RL11 implements these registers:

	name		size	comments

	RLCS		16	control/status
	RLDA		16	disk address
	RLBA		16	memory address
	RLBAE		6	memory address extension (RLV12)
	RLMP..RLMP2	16	multipurpose register queue
	INT		1	interrupt pending flag
	ERR		1	error flag (CSR<15>)
	DONE		1	device done flag (CSR<7>)
	IE		1	interrupt enable flag (CSR<6>)
	INT		1	interrupt pending flag
	STIME		24	seek time, per cylinder
	RTIME		24	rotational delay
	STOP_IOE	1	stop on I/O error

Error handling is as follows:

	error	     STOP_IOE	processed as

	not attached	1	report error and stop
			0	disk not ready

	end of file	x	assume rest of disk is zero

	OS I/O error	x	report error and stop

5.6 Symbolic Display and Input

The PDP-11 simulator implements symbolic display and input.  Display is
controlled by command line switches:

	-a			display as ASCII character
	-c			display as two character ASCII string
	-m			display instruction mnemonics

Input parsing is controlled by the first character typed in:

	'			ASCII character
	"			two character ASCII string
	alphabetic		instruction mnemonic
	numeric			octal number

Instruction input uses standard PDP-11 assembler syntax.  There are sixteen
instruction classes:

class		operands		examples		comments

no operands	none			HALT, RESET
3b literal	literal, 0 - 7		SPL
6b literal	literal, 0 - 077	MARK
8b literal	literal, 0 - 0377	EMT, TRAP
register	register		RTS
sop		specifier		SWAB, CLR, ASL
reg-sop		register, specifier	JSR, XOR, MUL
fop		flt specifier		ABSf, NEGf
ac-fop		flt reg, flt specifier	LDf, MULf
ac-sop		flt reg, specifier	LDEXP, STEXP
ac-moded sop	flt reg, specifier	LDCif, STCfi
dop		specifier, specifier	MOV, ADD, BIC
cond branch	address			BR, BCC, BNE
sob		register, address	SOB
cc clear	cc clear instructions	CLC, CLV, CLZ, CLN	combinable
cc set		cc set instructions	SEC, SEV, SEZ, SEN	combinable

For floating point opcodes, F and D variants, and I and L variants, may be
specified regardless of the state of FPS.

The syntax for specifiers is as follows:

syntax		specifier	displacement	comments

Rn		0n		-
Fn		0n		-		only in flt reg classes
(Rn)		1n		-
@(Rn)		7n		0		equivalent to @0(Rn)
(Rn)+		2n		-
@(Rn)+		3n              -
-(Rn)		4n              -
@-(Rn)		5n              -
{+/-}d(Rn)	6n		{+/-}d
@{+/-}d(Rn)	7n		{+/-}d
#n		27		n
@#n		37		n
.+/-n		67		+/-n - 4
@.+/-n		77		+/-n - 4
{+/-}n		67		{+/-}n - PC - 4	if on disk, 37 and n
@{+/-}n		77		{+/-}n - PC - 4	if on disk, invalid

6. Nova Features

The Nova simulator is configured as follows:

device		simulates
name(s)

CPU		Nova CPU with 32KW of memory
-		hardware multiply/divide
PTR,PTP		paper tape reader/punch
TTI,TTO		console terminal
LPT		line printer
CLK		real-time clock
DKP		moving head disk controller with four drives

The Nova simulator implements these unique stop conditions:

	- reference to undefined I/O device, and STOP_DEV is set
	- more than INDMAX indirect addresses are detected during
	  an interrupt
	- more than INDMAX indirect addresses are detected during
	  memory reference address decoding

6.1 CPU

The only CPU options are the presense of the multiply/divide instructions
and the size of main memory.

	SET CPU MDV		enable multiply/divide
	SET CPU NOMDV		disable multiply/divide
	SET CPU 4K		set memory size = 4K
	SET CPU 8K		set memory size = 8K
	SET CPU 12K		set memory size = 12K
	SET CPU 16K		set memory size = 16K
	SET CPU 20K		set memory size = 20K
	SET CPU 24K		set memory size = 24K
	SET CPU 28K		set memory size = 28K
	SET CPU 32K		set memory size = 32K

If memory size is being reduced, and the memory being truncated contains
non-zero data, the simulator asks for confirmation.  Data in the truncated
portion of memory is lost.  Initial memory size is 32K.

CPU registers include the visible state of the processor as well as the
control registers for the interrupt system.

	name		size	comments

	PC		15	program counter
	AC0..AC3	16	accumulators 0..3
	C		1	carry
	SR		16	front panel switches
	PI		16	priority interrupt mask
	ION		1	interrupt enable
	ION_DELAY	1	interrupt enable delay for ION
	PWR		1	power fail interrupt
	INT		15	interrupt pending flags
	BUSY		15	device busy flags
	DONE		15	device done flags
	DISABLE		15	device interrupt disable flags
	STOP_DEV	1	stop on undefined IOT
	INDMAX		15	maximum number of nested indirects
	OLDPC		15	PC prior to last JMP, JMS, or interrupt
	BREAK		16	breakpoint address (177777 to disable)
	WRU		8	interrupt character

6.2 Programmed I/O Devices (PTR, PTP, TTI, TTO, CLK, LPT)

The paper tape reader (PTR), paper tape punch (PTP), and line printer
(LPT) read data from or write data to disk files.  The POS register
specifies the number of the next data item to be read or written.  Thus,
by changing POS, the user can backspace or advance these devices.

The programmed I/O devices typically implement these registers:

	name		size	comments

	BUF		8	last data item processed
	INT		1	interrupt pending flag
	BUSY		1	device busy flag
	DONE		1	device done flag
	DISABLE		1	interrupt disable flag
	TIME		24	time from I/O initiation to interrupt
				(for keyboard, polling interval)
	POS		32	position in the input or output file
	STOP_IOE	1	stop on I/O error

For the serial devices, error handling is as follows:

	type	error	     STOP_IOE	processed as

	in,out	not attached	1	report error and stop
				0	out of tape or paper

	in	end of file	1	report error and stop
				0	out of tape or paper

	in,out	OS I/O error	x	report error and stop

6.3 Moving Head Disk (DKP)

Moving head disk options include the ability to place units online or
offline, write enabled or write locked, and to select the type of drive:

	SET DKPn OFFLINE	set unit n offline
	SET DKPn ONLINE		set unit n online
	SET DKPn LOCKED		set unit n write locked
	SET DKPn ENABLED	set unit n write enabled
	SET DKPn FLOPPY		set unit n to floppy disk
	SET DKPn D31		set unit n to Diablo 31
	SET DKPn D44		set unit n to Diablo 44/6030
	SET DKPn C111		set unit n to Century 111
	SET DKPn C114		set unit n to Century 114

All drives have 256 16b words per sector.  The other disk parameters are:

	drive	    cylinders surfaces	sectors	size (MW)

	floppy		77	1	8	  .158
	D31		203	2	12	 1.247
	D44		408	4	12	 5.014
	C111		203	10	6	 3.118
	C114		203	20	12	12.472

The moving head disk controller implements these registers:

	name		size	comments

	FCCY		16	flags, command, cylinder
	USSC		16	unit, surface, sector, count
	STAT		16	status
	MA		16	memory address
	INT		1	interrupt pending flag
	BUSY		1	device busy flag
	DONE		1	device done flag
	DISABLE		1	interrupt disable flag
	STIME		24	seek time, per cylinder
	RTIME		24	rotational delay
	STOP_IOE	1	stop on I/O error

Error handling is as follows:

	error		processed as

	not attached	disk not ready

	end of file	assume rest of disk is zero

	OS I/O error	report error and stop

6.4 Fixed Head Disk (DSK)

The fixed head disk controller implements these registers:

	name		size	comments

	STAT		16	status
	DA		16	disk address
	MA		16	memory address
	INT		1	interrupt pending flag
	BUSY		1	device busy flag
	DONE		1	device done flag
	DISABLE		1	device disable flag
	WLK		8	write lock switches
	TIME		24	rotational delay, per sector
	STOP_IOE	1	stop on I/O error

Error handling is as follows:

	error	     STOP_IOE	processed as

	not attached	1	report error and stop
			0	disk not ready

Fixed head disk data files are buffered in memory; therefore, end of file
and OS I/O errors cannot occur.

6.5 Symbolic Display and Input

The Nova simulator implements symbolic display and input.  Display is
controlled by command line switches:

	-a			display as ASCII character
	-c			display as two character ASCII string
	-m			display instruction mnemonics

Input parsing is controlled by the first character typed in:

	'			ASCII character
	"			two character ASCII string
	alphabetic		instruction mnemonic
	numeric			octal number

Instruction input uses standard Nova assembler syntax.  There are three
instruction classes: memory reference, IOT, and operate.

Memory reference instructions have the format

	memref {ac,}{@}address{,index}

LDA and STA require an initial register; ISZ, DSZ, JSR, and JMP do not.
The syntax for addresses and indices is as follows:

syntax		mode	displacement	comments

0 <= n < 0400	0	n
{+/-}n >= 0400	1	{+/-}n - PC	must be in range [-200, 177]
					invalid on disk
.+/-n		1	{+/-}n		must be in range [-200, 177]
{+/-}n,2	2	{+/-}n		must be in range [-200, 177]
{+/-}n,3	3	{+/-}n		must be in range [-200, 177]

IOT instructions have one of four formats

	syntax			example

	iot			HALT
	iot reg			INTA
	iot device		SKPDN
	iot reg,device		DOAS

Devices may be specified as mnemonics or as octal numbers in the range 0 - 077.

Operate instructions have the format

	opcode{#} reg,reg{,skip}

In all Nova instructions, blanks may be substituted for commas as field
delimiters.
