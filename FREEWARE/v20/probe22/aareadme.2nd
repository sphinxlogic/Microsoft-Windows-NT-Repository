AAREADME.2ND

===============================================================================

 BUILDING / USING THE SOFTWARE

 1. If you want to rebuild the software from the sources...

 Once you have obtained/expanded (etc) the kit files, set default to the [.SRC]
 subdirectory:

 $ SET DEFAULT [PROBE.SRC]	! or whatever specification is appropriate

 Invoke the building process by typing:

 $ @BUILD			! default
 or
 $ @BUILD NOCOMPILE		! if you do not have VAXC installed or if
				! your compiler is generating errors.

 This command procedure will assemble/compile and link 4 different images,
 namely PROBE.EXE, ACQ.EXE, DMS.EXE and REPLAY.EXE. All intermediate files
 will be preserved.

 2. Before the programs can be executed...

 The *JOB* logical name SYS_PROBE must be defined to point to the directory
 where the executable files exist. The file [PROBE]SETUP.COM is provided for
 this purpose and to modify the process command table with the definition for
 PROBE. You would typically prepare the utility once per login by issuing the
 following command:

 $ @<device>[PROBE]SETUP	! or equivalent specification

 where <device> is the logical or physical specification of the drive where
 the software is installed.

 You may wish to update the system command table SYS$LIBRARY:DCLTABLES.EXE so
 that the PROBE command is permanently available system-wide. You could also
 define the (JOB) logical name SYS_PROBE as part of your login procedure. If
 you do both of these steps, the file SETUP.COM is of no further use to you.

 3. Reading the documentation...

 A help library is provided for your perusal:

 $ HELP/LIBRARY=SYS_PROBE:PROBE  PROBE

 You may wish to merge the help information located in [PROBE.SRC]PROBE.HLP
 into the VMS library SYS$LIBRARY:HELPLIB.HLB or some other library of your
 choice and pointed to with a HLP$LIBRARY_x logical name. You would then see
 PROBE information by issuing an unqualified HELP command.

 4. Trying it up...

 Invoking the utility is simply:

 $ PROBE /qualifier... as described by the help information.

===============================================================================

 A BIT OF HISTORY...

 Probe evolved from a personal project (EE master's course and research) and
 was mostly developed circa 1989-1991. Since it proved a useful utility in my
 then-current job, I enhanced it on my spare time based on co-worker feedback
 and on my own experience and interests.

 I consider Probe to be unfinished in some areas. Some parts are unpolished,
 some I would rewrite for clarity (modularity), some commented-out (future
 plans) stubs could be expanded (given time!), some development code could be
 removed... but overall, the software has shown itself to be very robust and
 stable, even under very heavy network loads.

 Early implementations have run on VAX/VMS since version 5.2.
 More recently, the software has been tested on OpenVMS VAX 5.5 through 6.1.

 This software was written with a "low-powered" (microVAX class) machine in
 mind. It is known to run on (at least):

 microVAX II / VAXstation 2000
 VAX 3x00 / VAXstation 3100/xx
 VAX 4x00 / VAXstation 4000/xx
 VAX 6430
 VAX 6610
 VAX 7610
 VAX 8350
 VAX 8550

 Due to the numerous VAX assumptions/optimizations done, this software is not
 AXP-ready nor could it be made such without extensive rewrite.

===============================================================================

 FUTURES

 One feature that is missing is the actual count of collisions. If someone
 knows how to get to this in *real-time*, your input would be valued. In the
 meantime, I provided a static workaround for those who have an idea of their
 actual average collision rate (see PROBE.CLD) to have them included in the
 load computations. You can roughly (statically) compute your collision rate
 by looking at DECnet line counters (NCP> SHOW KNOWN LINE COUNTER), dividing
 the total number of collided frames by the number of frames transmitted.

 One limitation that is hard to get around is that a given node cannot see its
 own transmissions. The projected workaround (V3.0) is to have another node on
 the same segment run a light-weight Probe to listen and feedback to the main
 node at regular interval.

 This software has not yet been tested with DECnet/OSI.

 An AXP/C-rewrite could be interesting. Better yet, a complete BLISS rewrite
 would be a nice project. Who knows ?!

===============================================================================
