%TITLE 'FORCE'
MODULE FORCE (IDENT='V1.5-1') =
BEGIN
!++
! FACILITY: 	    WATCHER
!
! ABSTRACT: 	    Routines to warn, force, and disconnect users.
!
! MODULE DESCRIPTION:
!
!   This module contains routines to warn, logout, and disconnect users.
!
! AUTHOR:   	    M. Madison
!   	    	    COPYRIGHT © 1993, 1994  MADGOAT SOFTWARE.  ALL RIGHTS RESERVED.
!
! CREATION DATE:    20-MAR-1990
!
! MODIFICATION HISTORY:
!
!   20-MAR-1990	V1.0	Madison	    Initial coding.
!   21-MAR-1990	V1.0-1	Madison	    Add DECwindows support.
!   17-OCT-1990	V1.1	Madison	    Add David Effa's disconnect support.
!   02-NOV-1990	V1.2	Madison	    Add time of day to messages (Ward@Harris)
!   21-MAR-1991	V1.2-1	Madison	    Fix flaw in BREAKTHROUGH logic (mnk@hac)
!   22-MAR-1991	V1.3	Madison	    Add multiple warnings support (mnk@hac)
!   25-MAR-1991	V1.3-1	Madison	    FORCE now sets WARNED flag.
!   26-MAR-1991	V1.3-2	Madison	    BREAKTHROUGH still not quite right (mnk@hac)
!   07-APR-1992	V1.4	Madison	    NOACTION, delay between FORCEX/DELPRC.
!   03-FEB-1993	V1.5	Madison	    Support for just FORCEXing a process.
!   20-MAR-1993	V1.5-1	Madison	    Fixed support for forced exits.
!--
    LIBRARY 'SYS$LIBRARY:STARLET';
    LIBRARY 'WATCHER';
    LIBRARY 'WATCHER_PRIVATE';

    FORWARD ROUTINE
    	WARN,
    	FORCE,
    	BREAKTHROUGH,
    	TIMER_AST,
    	QIO_AST,
    	DISCONNECT,
    	DELPRC;

    EXTERNAL ROUTINE
    	LOG_PUT_OUTPUT,
    	PERFORM_DISCONNECT,
    	G_HAT (STR$COPY_R, STR$PREFIX, STR$APPEND, LIB$SYS_FAO, LIB$GETDVI,
    	    LIB$ADD_TIMES, LIB$GET_EF, LIB$GETDVI, LIB$FREE_VM,
    	    LIB$SUB_TIMES);

    EXTERNAL LITERAL
    	WATCHER__INACTIVE, WATCHER__DISCWARN, WATCHER__LOGWARN,
    	WATCHER__DISCONNECT, WATCHER__DISCONNECTED, WATCHER__LOGOUT,
    	WATCHER__LOGGEDOUT, WATCHER__FORCEXWARN, WATCHER__FORCEX,
    	WATCHER__FORCEDEXIT;

    EXTERNAL
    	GLOBALS	    : GBLDEF;

%SBTTL 'WARN'
GLOBAL ROUTINE WARN (CTR : REF CTRDEF) =
BEGIN
!++
! FUNCTIONAL DESCRIPTION:
!
!   Issues a "logout imminent" warning to a terminal.
!
! RETURNS:  	cond_value, longword (unsigned), write only, by value
!
! PROTOTYPE:
!
!   WARN ctrrec
!
! IMPLICIT INPUTS:  None.
!
! IMPLICIT OUTPUTS: None.
!
! COMPLETION CODES:
!
!   SS$_NORMAL:	    	normal successful completion.
!
! SIDE EFFECTS:
!
!   None.
!--
    LOCAL
    	LOGTIM	: BLOCK [8,BYTE],
    	NOW 	: BLOCK [8,BYTE],
    	REMAIN	: BLOCK [8,BYTE],
    	SDSC	: BLOCK [DSC$K_S_BLN,BYTE],
    	CTRSTR	: BLOCK [DSC$K_S_BLN,BYTE],
    	FAOBUF	: BLOCK [DSC$K_S_BLN,BYTE],
    	MSGBUF	: VECTOR [255,BYTE],
    	MSGLEN	: WORD;

    $GETTIM (TIMADR=NOW);
    IF NOT (.CTR [CTR_V_FORCE] OR .CTR [CTR_V_DISCON] OR
    	    (.CTR [CTR_V_EXIT] AND .CTR [CTR_W_IMGLEN] GTR 0))
    THEN
    BEGIN
    	CTR [CTR_V_WARNED] = 1;
    	CH$MOVE (8, NOW, CTR [CTR_Q_LASTWARN]);
    	LIB$GETDVI (%REF (DVI$_OPCNT), 0, SDSC, CTR [CTR_L_TIOCT]);
    	TRACE (DBG_M_MAIN, '   -- skipped WARN; no force type qualifies');
    	RETURN SS$_NORMAL;
    END;

    INIT_DYNDESC (FAOBUF, CTRSTR);
    SDSC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    SDSC [DSC$B_CLASS] = DSC$K_CLASS_S;
    SDSC [DSC$W_LENGTH] = %ALLOCATION (MSGBUF);
    SDSC [DSC$A_POINTER] = MSGBUF;

    CTR [CTR_V_WARNED] = NOT .GLOBALS [GBL_V_MULTIWARN];
    IF .GLOBALS [GBL_V_MULTIWARN] AND
    	    CH$NEQ (8, CTR [CTR_Q_LASTWARN], 8, UPLIT (0,0), %CHAR (0)) THEN
    BEGIN
    	LIB$ADD_TIMES (CTR [CTR_Q_LASTWARN], GLOBALS [GBL_Q_MWINTVL], LOGTIM);
    	IF LIB$SUB_TIMES (LOGTIM, NOW, REMAIN) THEN
    	BEGIN
    	    TRACE (DBG_M_MAIN, '   -- MULTIWARN: next warning not until !%D',
    	    	    LOGTIM);
    	    RETURN SS$_NORMAL;
    	END;
    END;

    $GETMSG (MSGID=WATCHER__INACTIVE, MSGLEN=MSGLEN, BUFADR=SDSC);
    STR$COPY_R (CTRSTR, MSGLEN, MSGBUF);
    IF .GLOBALS [GBL_V_BELL] THEN
    	STR$PREFIX (CTRSTR, %ASCID %STRING (%CHAR (7)));
    STR$PREFIX (CTRSTR, %ASCID'!/');

    $GETMSG (MSGID=(IF .CTR [CTR_V_DISCON] THEN WATCHER__DISCWARN
    	    ELSE IF .CTR [CTR_V_EXIT] THEN WATCHER__FORCEXWARN
    	    ELSE WATCHER__LOGWARN), MSGLEN=MSGLEN, BUFADR=SDSC);
    SDSC [DSC$W_LENGTH] = .MSGLEN;
    STR$APPEND (CTRSTR, %ASCID'!/');
    STR$APPEND (CTRSTR, SDSC);
    LIB$ADD_TIMES (CTR [CTR_Q_LASTCHG], CTR [CTR_Q_FORCETIME], LOGTIM);
    LIB$SUB_TIMES (LOGTIM, NOW, REMAIN);

    STR$APPEND (CTRSTR, %ASCID'!/');
    LIB$SYS_FAO (CTRSTR, 0, FAOBUF, CTR [CTR_Q_LASTCHG], NOW, REMAIN, LOGTIM);

    SDSC [DSC$W_LENGTH] = .CTR [CTR_W_DEVLEN];
    SDSC [DSC$A_POINTER] = CTR [CTR_T_DEVNAM];

    IF .GLOBALS [GBL_V_NOACTION] THEN
    	TRACE (DBG_M_MAIN, '   -- NOACTION setting prevented warning on !AS',
    	    	    SDSC)
    ELSE
    	BREAKTHROUGH (SDSC, FAOBUF);

    CH$MOVE (8, NOW, CTR [CTR_Q_LASTWARN]);
    LIB$GETDVI (%REF (DVI$_OPCNT), 0, SDSC, CTR [CTR_L_TIOCT]);

    FREE_STRINGS (FAOBUF, CTRSTR);

    SS$_NORMAL

END; ! WARN

%SBTTL 'FORCE'
GLOBAL ROUTINE FORCE (CTR : REF CTRDEF, CHKQ_A, COUNTQ_A) =
BEGIN
!++
! FUNCTIONAL DESCRIPTION:
!
!   Disconnects or logs out a user.
!
! RETURNS:  	cond_value, longword (unsigned), write only, by value
!
! PROTOTYPE:
!
!   FORCE ctrrec
!
! IMPLICIT INPUTS:  None.
!
! IMPLICIT OUTPUTS: None.
!
! COMPLETION CODES:
!
!   SS$_NORMAL:	    	normal successful completion.
!
! SIDE EFFECTS:
!
!   None.
!--
    BIND
    	CHKQUE	= .CHKQ_A   	: QUEDEF,
    	COUNTQ	= .COUNTQ_A 	: QUEDEF;

    OWN
    	SET_TWOSEC  : INITIAL (0),
    	TWOSEC	    : VECTOR [2,LONG];

    LOCAL
    	CHK 	: REF CHKDEF,
    	C   	: REF CTRDEF,
    	LOGTIM	: BLOCK [8,BYTE],
    	SDSC	: BLOCK [DSC$K_S_BLN,BYTE],
    	STR	: BLOCK [DSC$K_S_BLN,BYTE],
    	PRVMSK	: BLOCK [8,BYTE],
    	MSGBUF	: VECTOR [255,BYTE],
    	MSGLEN	: WORD,
    	WSUNIT,
    	STATUS;

    IF NOT (.CTR [CTR_V_DISCON] OR .CTR [CTR_V_FORCE] OR
    	    (.CTR [CTR_V_EXIT] AND .CTR [CTR_W_IMGLEN] GTR 0))
    THEN
    BEGIN
    	TRACE (DBG_M_MAIN, '   -- skipped FORCE; no force type qualifies');
    	IF .CTR [CTR_V_EXIT] THEN CTR [CTR_V_VALID] = 0;
    	RETURN SS$_NORMAL;
    END;

    IF NOT .SET_TWOSEC THEN
    BEGIN
    	SET_TWOSEC = 1;
    	$BINTIM (TIMBUF=%ASCID'0 00:00:02.00', TIMADR=TWOSEC);
    END;

    INIT_DYNDESC (STR);
    SDSC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    SDSC [DSC$B_CLASS] = DSC$K_CLASS_S;

    IF .CTR [CTR_V_DECW] THEN
    BEGIN
    	C = .COUNTQ [QUE_L_HEAD];
    	WHILE .C NEQA COUNTQ [QUE_L_HEAD] DO
    	BEGIN
    	    IF .C [CTR_V_DECW] AND CH$EQL (.C [CTR_W_GRPLEN],
    	    	    C [CTR_T_GRPNAM], .CTR [CTR_W_GRPLEN],
    	    	    CTR [CTR_T_GRPNAM], %C' ') THEN
    	    BEGIN
    	    	C [CTR_V_VALID] = 0;
    	    	IF .GLOBALS [GBL_V_NOACTION] THEN
    	    	    TRACE (DBG_M_MAIN, %STRING ('   -- NOACTION setting prevented ',
    	    	    	    '$DELPRC on pid !XL'), .C [CTR_L_PID])
    	    	ELSE
    	    	BEGIN
    	    	    $FORCEX (PIDADR=C [CTR_L_PID], CODE=SS$_NORMAL);
    	    	    $SETIMR (DAYTIM=TWOSEC, ASTADR=DELPRC,
    	    	    	REQIDT=.C [CTR_L_PID]);
    	    	END;
    	    	IF .C NEQA CTR THEN
    	    	BEGIN
    	    	    CHK = .CHKQUE [QUE_L_HEAD];
    	    	    WHILE .CHK NEQA CHKQUE [QUE_L_HEAD] DO
    	    	    BEGIN
    	    	    	IF .CHK [CHK_L_CREC] EQL .C THEN
    	    	    	BEGIN
    	    	    	    REMQUE (.CHK, CHK);
    	    	    	    LIB$FREE_VM (%REF (CHK_S_CHKDEF), CHK);
    	    	    	    EXITLOOP;
    	    	    	END;
    	    	    	CHK = .CHK [CHK_L_FLINK];
    	    	    END;
    	    	END;
    	    END;
    	    C = .C [CTR_L_FLINK];
    	END;

    	SDSC [DSC$W_LENGTH] = .CTR [CTR_W_DEVLEN];
    	SDSC [DSC$A_POINTER] = CTR [CTR_T_DEVNAM];
    	LIB$GETDVI (%REF (DVI$_UNIT), 0, SDSC, WSUNIT);
    	LIB$SYS_FAO (%ASCID'RESTART_!UL', 0, STR, .WSUNIT);

    	PRVMSK [0,0,32,0] = PRVMSK [4,0,32,0] = 0;
    	PRVMSK [PRV$V_CMKRNL] = PRVMSK [PRV$V_TMPMBX] =
    	    PRVMSK [PRV$V_NETMBX] =-1;

    	IF .GLOBALS [GBL_V_NOACTION] THEN
    	    TRACE (DBG_M_MAIN, '   -- NOACTION setting prevented !AS job from starting.',
    	    	STR)
    	ELSE
    	    $CREPRC (
    	    	IMAGE=%ASCID'SYS$SYSTEM:LOGINOUT.EXE',
    	    	INPUT=%ASCID'WATCHER_DIR:DECW_STARTLOGIN.COM',
    	    	OUTPUT=%ASCID'NL:', ERROR=%ASCID'NL:',
    	    	PRVADR=PRVMSK, PRCNAM=STR,
    	    	STSFLG=PRC$M_DETACH+PRC$M_NOUAF,
    	    	UIC=%X'00010004');
    END
    ELSE
    BEGIN

    	SDSC [DSC$W_LENGTH] = %ALLOCATION (MSGBUF);
    	SDSC [DSC$A_POINTER] = MSGBUF;

    	$GETMSG (MSGID=(IF .CTR [CTR_V_DISCON] THEN WATCHER__DISCONNECT
    	    ELSE IF .CTR [CTR_V_EXIT] THEN WATCHER__FORCEX
    	    ELSE WATCHER__LOGOUT), MSGLEN=MSGLEN, BUFADR=SDSC);
    	SDSC [DSC$W_LENGTH] = .MSGLEN;
        LIB$SYS_FAO (SDSC, 0, STR, 0);  ! sticks the time in
    	IF .GLOBALS [GBL_V_BELL] THEN
    	    STR$PREFIX (STR, %ASCID %STRING (%CHAR (7)));
    	STR$PREFIX (STR, %ASCID %STRING (%CHAR (13), %CHAR (10)));
    	STR$APPEND (STR, %ASCID %STRING (%CHAR (13), %CHAR (10)));

    	SDSC [DSC$W_LENGTH] = .CTR [CTR_W_DEVLEN];
    	SDSC [DSC$A_POINTER] = CTR [CTR_T_DEVNAM];
    	IF NOT .GLOBALS [GBL_V_NOACTION] AND
    	    (NOT .CTR [CTR_V_EXIT] OR .CTR [CTR_W_IMGLEN] GTR 0)
    	THEN BREAKTHROUGH (SDSC, STR);

    	IF .CTR [CTR_V_DISCON] THEN
    	BEGIN
    	    IF .GLOBALS [GBL_V_NOACTION] THEN
    	    BEGIN
    	    	CTR [CTR_V_VALID] = 0;
    	    	TRACE (DBG_M_MAIN, '   -- NOACTION prevented disconnect of !AS',
    	    	    .SDSC);
    	    END
    	    ELSE
    	    BEGIN
    	    	STATUS = DISCONNECT (SDSC);
    	    	IF NOT .STATUS THEN
    	    	BEGIN
    	    	    TRACE (DBG_M_MAIN, '    -- DISCONNECT failed, sts=!XL', .STATUS);
    	    	    $FORCEX (PIDADR=CTR [CTR_L_PID], CODE=SS$_NORMAL);
    	    	    $SETIMR (DAYTIM=TWOSEC, ASTADR=DELPRC,
    	    	    	REQIDT=.CTR [CTR_L_PID]);
    	    	END;
    	    END;
    	END
    	ELSE IF .CTR [CTR_V_EXIT] THEN
    	BEGIN
    	    IF .GLOBALS [GBL_V_NOACTION] THEN
    	    BEGIN
    	    	CTR [CTR_V_VALID] = 0;
    	    	TRACE (DBG_M_MAIN, '   -- NOACTION prevented $FORCEX of process !XL',
    	    	    .CTR [CTR_L_PID]);
    	    END
    	    ELSE
    	    BEGIN
    	    	IF .CTR [CTR_W_IMGLEN] GTR 0 THEN
    	    	BEGIN
    	    	    STATUS = $FORCEX (PIDADR=CTR [CTR_L_PID], CODE=SS$_NORMAL);
    	    	    IF NOT .STATUS THEN
    	    	    	TRACE (DBG_M_MAIN, '    -- $FORCEX failed, sts=!XL', .STATUS);
    	    	END
    	    	ELSE
    	    	    TRACE (DBG_M_MAIN, '   -- $FORCEX skipped - no user-mode image running in process !XL',
    	    	    	.CTR [CTR_L_PID]);
    	    END;
    	END
    	ELSE
    	IF .GLOBALS [GBL_V_NOACTION] THEN
    	BEGIN
    	    CTR [CTR_V_VALID] = 0;
    	    TRACE (DBG_M_MAIN, '   -- NOACTION prevented $DELPRC of pid !XL',
    	    	    	.CTR [CTR_L_PID]);
    	END
    	ELSE
    	BEGIN
    	    $FORCEX (PIDADR=CTR [CTR_L_PID], CODE=SS$_NORMAL);
    	    $SETIMR (DAYTIM=TWOSEC, ASTADR=DELPRC, REQIDT=.CTR [CTR_L_PID]);
    	END;
    END;

    SDSC [DSC$W_LENGTH] = %ALLOCATION (MSGBUF);
    SDSC [DSC$A_POINTER] = MSGBUF;
    $GETMSG (MSGID=(IF .CTR [CTR_V_DISCON] THEN WATCHER__DISCONNECTED
    	    ELSE IF .CTR [CTR_V_EXIT] THEN WATCHER__FORCEDEXIT
    	    ELSE WATCHER__LOGGEDOUT), MSGLEN=MSGLEN, BUFADR=SDSC, FLAGS=1);
    SDSC [DSC$W_LENGTH] = .MSGLEN;
    LIB$SYS_FAO (SDSC, 0, STR, .CTR [CTR_W_USRLEN], CTR [CTR_T_USRNAM],
    	.CTR [CTR_L_PID], .CTR [CTR_W_DEVLEN], CTR [CTR_T_DEVNAM],
    	.CTR [CTR_W_ACCLEN], CTR [CTR_T_ACCNAM], CTR [CTR_Q_LASTCHG]);

    IF .CTR [CTR_V_EXIT] THEN CTR [CTR_V_VALID] = 0;
    CTR [CTR_V_WARNED] = 1;  ! make sure we don't warn after forcing

    LOG_PUT_OUTPUT (STR);

    FREE_STRINGS (STR);

    SS$_NORMAL

END; ! FORCE

%SBTTL 'BREAKTHROUGH'
ROUTINE BREAKTHROUGH (DEVNAM_A, MSGDSC_A) =
BEGIN
!++
! FUNCTIONAL DESCRIPTION:
!
!   Writes a message on another person's terminal.
!
! RETURNS:  	cond_value, longword (unsigned), write only, by value
!
! PROTOTYPE:
!
!   BREAKTHROUGH  devnam, msgdsc
!
! IMPLICIT INPUTS:  None.
!
! IMPLICIT OUTPUTS: None.
!
! COMPLETION CODES:
!
!   SS$_NORMAL:	    	normal successful completion.
!
! SIDE EFFECTS:
!
!   None.
!--
    BIND
    	DEVNAM	= .DEVNAM_A 	: BLOCK [,BYTE],
    	MSGDSC	= .MSGDSC_A 	: BLOCK [,BYTE];

    OWN
    	QIOEF	: INITIAL (-1),
    	TMREF	: INITIAL (-1),
    	THRESH	: VECTOR [2,LONG];

    LOCAL
    	CHAN	: WORD,
    	IOSB	: VECTOR [4,WORD],
    	STATUS;

    IF .QIOEF EQL -1 THEN
    BEGIN
    	LIB$GET_EF (QIOEF);
    	LIB$GET_EF (TMREF);
    	$BINTIM (TIMBUF=%ASCID'0 00:00:05', TIMADR=THRESH);
    END;

    STATUS = $ASSIGN (DEVNAM=DEVNAM, CHAN=CHAN);
    IF NOT .STATUS THEN RETURN .STATUS;

    STATUS = $SETIMR (EFN=.TMREF, DAYTIM=THRESH, ASTADR=TIMER_AST, REQIDT=CHAN);
    IF NOT .STATUS THEN
    BEGIN
    	$DASSGN (CHAN=.CHAN);
    	RETURN .STATUS;
    END;
    STATUS = $QIO (EFN=.QIOEF, CHAN=.CHAN, FUNC=IO$_WRITEVBLK OR IO$M_BREAKTHRU,
    	IOSB=IOSB, ASTADR=QIO_AST, ASTPRM=CHAN, P1=.MSGDSC [DSC$A_POINTER],
    	P2=.MSGDSC [DSC$W_LENGTH]);
    IF NOT .STATUS THEN
    BEGIN
    	$CANTIM (REQIDT=CHAN);
    	$DASSGN (CHAN=.CHAN);
    	RETURN .STATUS;
    END;
    $SYNCH (EFN=.QIOEF, IOSB=IOSB);
    $DASSGN (CHAN=.CHAN);

    SS$_NORMAL

END; ! BREAKTHROUGH

%SBTTL 'TIMER_AST'
ROUTINE TIMER_AST (CHAN_A) =
BEGIN
!++
! FUNCTIONAL DESCRIPTION:
!
!   This AST routine is executed when the SETIMR AST is delivered,
!   because the QIO timed out.
!
! RETURNS:  	cond_value, longword (unsigned), write only, by value
!
! PROTOTYPE:
!
!   TIMER_AST  reqidt (=address of I/O channel)
!
! IMPLICIT INPUTS:  None.
!
! IMPLICIT OUTPUTS: None.
!
! COMPLETION CODES:
!
!   SS$_NORMAL:	    	normal successful completion.
!
! SIDE EFFECTS:
!
!   None.
!--
    BIND
    	CHAN = .CHAN_A	: WORD;

    $CANCEL (CHAN=.CHAN);

    SS$_NORMAL

END; ! TIMER_AST

%SBTTL 'QIO_AST'
ROUTINE QIO_AST (REQIDT) =
BEGIN
!++
! FUNCTIONAL DESCRIPTION:
!
!   This AST routine is executed when the QIO completion AST is delivered.
!
! RETURNS:  	cond_value, longword (unsigned), write only, by value
!
! PROTOTYPE:
!
!   QIO_AST  reqidt (= address of I/O channel)
!
! IMPLICIT INPUTS:  None.
!
! IMPLICIT OUTPUTS: None.
!
! COMPLETION CODES:
!
!   SS$_NORMAL:	    	normal successful completion.
!
! SIDE EFFECTS:
!
!   None.
!--
    $CANTIM (REQIDT=.REQIDT);

    SS$_NORMAL

END; ! QIO_AST

%SBTTL 'DISCONNECT'
ROUTINE DISCONNECT (TRMNAM_A) = 
BEGIN
!++
! FUNCTIONAL DESCRIPTION:
!
!   Disconnects a virtual terminal.
!
! RETURNS:  	cond_value, longword (unsigned), write only, by value
!
! PROTOTYPE:
!
!   DISCONNECT  trmnam
!
! trmnam:   char_string, character string, read only, by descriptor
!
! IMPLICIT INPUTS:  None.
!
! IMPLICIT OUTPUTS: None.
!
! COMPLETION CODES:
!
!   SS$_NORMAL:	    	normal successful completion.
!
! SIDE EFFECTS:
!
!   None.
!--
    LOCAL
    	ARGLST	: VECTOR [2,LONG],
    	DEVNAM	: BLOCK [DSC$K_S_BLN,BYTE],
    	STATUS;

    INIT_DYNDESC (DEVNAM);
    STATUS = LIB$GETDVI (%REF (DVI$_FULLDEVNAM), 0, .TRMNAM_A, 0, DEVNAM);
    IF NOT .STATUS THEN RETURN .STATUS;

    ARGLST [0] = 1;
    ARGLST [1] = DEVNAM;

    STATUS = $CMKRNL (ROUTIN=PERFORM_DISCONNECT, ARGLST=ARGLST);

    FREE_STRINGS (DEVNAM);

    .STATUS

END; ! DISCONNECT

%SBTTL 'DELPRC'
GLOBAL ROUTINE DELPRC (PID) = 
BEGIN
!++
! FUNCTIONAL DESCRIPTION:
!
!   Issues a $DELPRC on the specified PID.  Called as a timer AST
!   routine -- after a 2-second delay following the $FORCEX call.
!
! RETURNS:  	cond_value, longword (unsigned), write only, by value
!
! PROTOTYPE:
!
!   DELPRC  pid
!
! IMPLICIT INPUTS:  None.
!
! IMPLICIT OUTPUTS: None.
!
! COMPLETION CODES:
!
!   SS$_NORMAL:	    	normal successful completion.
!
! SIDE EFFECTS:
!
!   None.
!--

    $DELPRC (PIDADR=PID)

END; ! DELPRC

END
ELUDOM
