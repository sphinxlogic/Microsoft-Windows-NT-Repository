
　X11 猫  -  README

						Written by Masayuki Koba


１．はじめに

　　xneko は、猫がマウス・カーソルを追いかけるという環境ソフトです。

    本プログラムは、Macintosh のデスクアクセサリとして出回っている "neko" の
  動きを X11 上で再現してみたものです。オリジナルとは若干動作が異なる部分も
  ありますが、こういったところは、私なりのアレンジの結果だと思って下さい。


２．xneko 使用方法

　　xneko の起動方法は以下の通り。

	xneko [-display <display>] [-geometry <geometry>] [-title <title>] \
	  [-name <title>] [-iconic] [-speed <speed>] [-time <time>] [-help]


		-display <display>	ネットワーク上に存在するディスプレイ
					名を指定します。

		-geometry <geometry>	ウィンドウのサイズと位置を指定します。
					<geometry> は、幅x高さ+Ｘ座標+Ｙ座標
					の形式で指定します。

		-title <title>		ウィンドウ名、およびアイコン名のタイ
					トルを指定します。 (省略するとプログ
					ラム名がタイトルになります。)

		-name <title>		-title <title> と同じです。

		-iconic			プログラムをアイコン状態で起動します。

		-speed <speed>		猫の移動速度 (単位時間あたりの移動ピ
					クセル) を指定します。 (デフォルト =
					16。)

		-time <time>		猫のインターバルタイム (アニメーショ
					ンを描き変える際の時間間隔) を変更し
					ます。(デフォルト = 125000。)

		-help			簡単な慣用例を表示します。


	Ex.1:	xneko -display foo:0.0 -geometry 300x300+150+100

			…　ホスト foo 上のディスプレイ座標 (150, 100) で、
			    ウィンドウサイズ (300, 300) の X11 猫を起動する。
			    (-display を悪用すると、他人のディスプレイ上に
			    猫をコッソリ表示するということも可能です。)

	Ex.2:	xneko -speed 4 -time 200000

			…　ドンガメの猫を起動する。


    使い方はいたって簡単。マウスをグリグリと動かすと、それにつられて猫が走り
  回ります。終了する場合は、猫のウィンドウに Meta-Q (Alt-Q) を送って下さい。

    なお、ウィンドウのリサイズにも対応していますので、猫が飼われているウィン
  ドウを適当な大きさに調整して、画面の隅にでも配置してあげるといいでしょう。


３．プログラムの構成

    本プログラムは全て Xlib で書かれており、猫のデザインは bitmap コマンドの
  出力を利用しています。従って、その気があれば、猫のデザインを異なった物にし
  て面白いアレンジ・バージョンを作成することもできるでしょう。


４．バージョンについて

    本プログラムのバージョンを知りたい場合は、ソースの RCS ヘッダーを見るか
  ident コマンドでバイナリーをチェックして RCS のリビジョンを調べて下さい。
  今回のリビジョンは 1.11 になっているはずです。


５．ソースの取扱いについて

    本プログラムは X11 に対する私の腕試しとして作ったものであり、個人的には
  完全に Public Domain Software として扱いたいと考えています。従って、配布・
  改良は自由に行って下さい。
  
    本プログラムを拡張した面白い物がぞくぞくと登場することを期待しています。


６．バグ及び制限事項

　　バグや制限事項は、ソース (xneko.c) の方にコメントとして記載しておきまし
  た。詳しくはソースの方をご覧下さい。


７．改定履歴

　Revision 1.1	【初版】	…　X11 猫 initial revision。
  Revision 1.2			…　Revision 1.1 にあった、過去の名残である
				    余分なテーブルや変数、処理の除去。
  Revision 1.3			…　setitimer() のタイマー設定処理の修整。前
				    のバージョンにはシステムに負荷がかかりす
				    ぎると SIGALRM が pause() に送られず、猫
				    がハングするというバグがあった。 (という
				    よりも、setitimer() の使い方が誤っていた
				    と言える。)
  Revision 1.4			…　Ｘの代表的なオプションをサポート。
  Revision 1.5			…　コメントのちょっとした修整。
  Revision 1.6	【第２版】	…　lint チェックによる、無駄な処理の除去。
  Revision 1.7			…　インターバル毎にタイマーを設定するという
				    無駄を省いた。
  Revision 1.8	【第３版】	…　XCopyArea() → XCopyPlane() への書きかえ。
				    (XCopyPlane() の方が効率よさそうなので。)
　Revision 1.9			…　Interval() のパラメータの除去、及び綴り
				    ミスの修整。
  Revision 1.10	【第４版】	…　X11 R2 バグ回避版。 (GC の使い方を誤って
				    いたというウワサもある。)
  Revision 1.11			…　XCreatePixmapCursor() のパラメータ設定ミ
				    スの修整。
  Revision 1.12	【第５版】	…　コメントの修整。


８．最後に

　（１）コンパイル時、-DDEBUG を指定すると全く別のプログラムになります。この
      モードでは、デザイン一覧表示とキーパード操作による猫のコントロールが可
      能です。

  （２）#ifdef DEBUG のオンパレードでソースが読みにくい場合は、unifdef コマ
      ンドを使って余分な #ifdef 文を取り去って下さい。

  （３）私のマシン環境 (NEWS-OS 3.2a, X11 Release 2) の X11 には、XCopyArea()
      や XCopyPlane() 近辺に領域解放漏れのバグがあるようです。 (XCopyArea()
      だけをコールする無限ループを組んでシステムを監視していたところ、どんど
      んメモリを食い潰していきました。なんてこった！)　従って、猫のキャラク
      タを XCopyArea() で素直にコピーすると、そのうちシステムのスワップ領域
      がパンクしてしまうことになります。 (X11 の仕様なのかなぁ？)

	幸い、X11 用のロードランナー (golddig) のソース一式を持っていました
      ので「こいつはどう対処しているのだろう？」と思って覗いてみたところ、連
      中は次のような巧妙な手でバグを回避していました。

	    私が最初に考えた単純な案：

		(a) キャラクタの Pixmap を生成する。
		(b) その Pixmap を表示したい部分にコピーする。

	    golddig の策：

		(a) キャラクタの Pixmap を生成する。
		(b) その Pixmap を保持した GC を作る。
		(c) その GC を使って、XFillRectangle() を呼ぶ。

	なるほど、この策だとスワップのオーバーフローは発生しないようです。(う
      まいもんだ。)　最新の X11 猫は、この手法に切り換えておきました。

  （４）troff の -man 形式のファイルも提供しようかと思ったのですが、面倒なの
      で書いていません。この README と、xneko -help (xneko -h) で出る Usage
      だけで勘弁して下さい。

  （５）最後の最後になりましたが、Macintosh の neko を作られた方々に敬意を表
      するとともに、面白いテーマを提供していただいたことに感謝いたします。


								    - 以上 -

オリジナルはモノクロ１プレーンのシステムでしか動作しませんでした。
その後、XCreateBitmapFromData を XCreatePixmapFromBitmapData に
変更するパッチが発表されたので、その部分を変更しました。

また、README. と、xneko.c を shift-JIS から EUC に変更しました。

転載：横山哲也 (pcs07778 cano)
