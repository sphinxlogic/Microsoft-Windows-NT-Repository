
DELETE CLOUD_IN;
REDEFINE DOMAIN CLOUD_IN USING X25_COUNTS_RECORD ON CLOUD_IN.DAT;

DELETE CLOUD_INC_IN;
REDEFINE DOMAIN CLOUD_INC_IN USING GET_X25_IN_RECORD ON
    USER0:[ACCOUNTING]CLOUD_INC_COUNTS.SEQ;

DELETE CLOUD_OUT;
REDEFINE DOMAIN CLOUD_OUT USING X25_COUNTS_RECORD ON CLOUD_OUT.DAT;

DELETE CLOUD_OUT_IN;
REDEFINE DOMAIN CLOUD_OUT_IN USING GET_X25_IN_RECORD ON
    USER0:[ACCOUNTING]CLOUD_OUT_COUNTS.SEQ;

DELETE CO;
REDEFINE DOMAIN CO USING X25_COUNTS_RECORD ON USER0:[ACCOUNTING]CLOUD_OUT.DAT;

DELETE DPV_COUNTS;
REDEFINE DOMAIN DPV_COUNTS USING DPV_COUNTS_RECORD ON DPV_COUNTS.DAT;

DELETE DPV_COUNTS_RECORD;
REDEFINE RECORD DPV_COUNTS_RECORD USING OPTIMIZE
01 DPV_COUNTS_REC.
!
! This record stores DPV device counters (from DECnet) converted
! to binary data (takes less space, easier numeric comparisons).
!
! B. Z. Lederman
!
    10 TIMES.
	20 DATE_TIME USAGE DATE.
	20 D_TIME COMPUTED BY FN$TIME(DATE_TIME) EDIT_STRING T(11).
	20 SECONDS_SINCE_LAST_ZEROED USAGE LONG EDIT_STRING ZZ,ZZ9.
    10 DATA.
	20 BYTES_RECEIVED USAGE LONG EDIT_STRING ZZ,ZZZ,ZZ9.
	20 BYTES_SENT USAGE LONG EDIT_STRING ZZ,ZZZ,ZZ9.
	20 DATA_BLOCKS_RECEIVED USAGE LONG EDIT_STRING ZZ,ZZZ,ZZ9.
	20 DATA_BLOCKS_SENT USAGE LONG EDIT_STRING ZZ,ZZZ,ZZ9.
    10 ERRORS.
	20 DATA_ERRORS.
	    30 DATA_ERRORS_INBOUND USAGE LONG EDIT_STRING ZZ,ZZZ,ZZ9.
	    30 DATA_ERRORS_OUTBOUND USAGE LONG EDIT_STRING ZZ,ZZZ,ZZ9.
	20 TIMEOUTS.
	    30 REMOTE_REPLY_TIMEOUTS USAGE LONG EDIT_STRING ZZ,ZZZ,ZZ9.
	    30 LOCAL_REPLY_TIMEOUTS USAGE LONG EDIT_STRING ZZ,ZZZ,ZZ9.
	20 BUFFER.
	    30 REMOTE_BUFFER_ERRORS USAGE LONG EDIT_STRING ZZ,ZZZ,ZZ9.
	    30 LOCAL_BUFFER_ERRORS USAGE LONG EDIT_STRING ZZ,ZZZ,ZZ9.
	20 PROCESS.
	    30 REMOTE_PROCESS_ERRORS USAGE LONG EDIT_STRING ZZ,ZZZ,ZZ9.
	    30 LOCAL_PROCESS_ERRORS USAGE LONG EDIT_STRING ZZ,ZZZ,ZZ9.
;

DELETE DPV_IN;
REDEFINE DOMAIN DPV_IN USING DPV_IN_RECORD ON
    USER0:[ACCOUNTING]DPV_0_COUNTS.SEQ_OLD;

DELETE DPV_IN_RECORD;
REDEFINE RECORD DPV_IN_RECORD USING OPTIMIZE
01 DPV_IN_REC.
!
! This record reads the DPV device counter file (from DECnet via DCL)
!
! B. Z. Lederman
!
    10 DATE_STRING PIC X(23).
    10 DATE_TIME COMPUTED BY FN$DATE(DATE_STRING).
    10 FILLER PIC X.
    10 SECONDS_SINCE_LAST_ZEROED PIC X(9).
    10 FILLER PIC X.
    10 BYTES_RECEIVED PIC X(9).
    10 FILLER PIC X.
    10 BYTES_SENT PIC X(9).
    10 FILLER PIC X.
    10 DATA_BLOCKS_RECEIVED PIC X(9).
    10 FILLER PIC X.
    10 DATA_BLOCKS_SENT PIC X(9).
    10 FILLER PIC X.
    10 DATA_ERRORS_INBOUND PIC X(9).
    10 FILLER PIC X.
    10 DATA_ERRORS_OUTBOUND PIC X(9).
    10 FILLER PIC X.
    10 REMOTE_REPLY_TIMEOUTS PIC X(9).
    10 FILLER PIC X.
    10 LOCAL_REPLY_TIMEOUTS PIC X(9).
    10 FILLER PIC X.
    10 REMOTE_BUFFER_ERRORS PIC X(9).
    10 FILLER PIC X.
    10 LOCAL_BUFFER_ERRORS PIC X(9).
    10 FILLER PIC X.
    10 REMOTE_PROCESS_ERRORS PIC X(9).
    10 FILLER PIC X.
    10 LOCAL_PROCESS_ERRORS PIC X(9).
    10 FILLER PIC X.
;

DELETE DPV_SUMMARIZE;
REDEFINE PROCEDURE DPV_SUMMARIZE
!
! This procedure summarizes DPV device counts by day into another domain
!
! B. Z. Lederman	11-Apr-1990
!
DECLARE IN_DATE USAGE DATE.
DECLARE T_DATE_TIME USAGE DATE.
DECLARE T_SECONDS_SINCE_LAST_ZEROED USAGE LONG.
DECLARE T_BYTES_RECEIVED USAGE LONG.
DECLARE T_BYTES_SENT USAGE LONG.
DECLARE T_DATA_BLOCKS_RECEIVED USAGE LONG.
DECLARE T_DATA_BLOCKS_SENT USAGE LONG.
DECLARE T_DATA_ERRORS_INBOUND USAGE LONG.
DECLARE T_DATA_ERRORS_OUTBOUND USAGE LONG.
DECLARE T_REMOTE_REPLY_TIMEOUTS USAGE LONG.
DECLARE T_LOCAL_REPLY_TIMEOUTS USAGE LONG.
DECLARE T_REMOTE_BUFFER_ERRORS USAGE LONG.
DECLARE T_LOCAL_BUFFER_ERRORS USAGE LONG.
DECLARE T_REMOTE_PROCESS_ERRORS USAGE LONG.
DECLARE T_LOCAL_PROCESS_ERRORS USAGE LONG.
!
T_DATE_TIME = "17-NOV-1858"
T_SECONDS_SINCE_LAST_ZEROED = 0
T_BYTES_RECEIVED = 0
T_BYTES_SENT = 0
T_DATA_BLOCKS_RECEIVED = 0
T_DATA_BLOCKS_SENT = 0
T_DATA_ERRORS_INBOUND = 0
T_DATA_ERRORS_OUTBOUND = 0
T_REMOTE_REPLY_TIMEOUTS = 0
T_LOCAL_REPLY_TIMEOUTS = 0
T_REMOTE_BUFFER_ERRORS = 0
T_LOCAL_BUFFER_ERRORS = 0
T_REMOTE_PROCESS_ERRORS = 0
T_LOCAL_PROCESS_ERRORS = 0
!
READY DPV_COUNTS
DEFINE FILE FOR DPV_SUMMARY;
READY DPV_SUMMARY WRITE
!
FOR DPV_COUNTS BEGIN
    IN_DATE = FN$DATE(
	FN$UPCASE(FORMAT DATE_TIME USING DD_MMM_YYYY | " 00:00:00.00"))
    IF T_DATE_TIME NE IN_DATE AND T_DATE_TIME NE "17-NOV-1858" BEGIN
	PRINT IN_DATE
	STORE DPV_SUMMARY USING BEGIN
	    DATE_TIME = T_DATE_TIME
	    SECONDS_SINCE_LAST_ZEROED = T_SECONDS_SINCE_LAST_ZEROED
	    BYTES_RECEIVED = T_BYTES_RECEIVED
	    BYTES_SENT = T_BYTES_SENT
	    DATA_BLOCKS_RECEIVED = T_DATA_BLOCKS_RECEIVED
	    DATA_BLOCKS_SENT = T_DATA_BLOCKS_SENT
	    DATA_ERRORS_INBOUND = T_DATA_ERRORS_INBOUND
	    DATA_ERRORS_OUTBOUND = T_DATA_ERRORS_OUTBOUND
	    REMOTE_REPLY_TIMEOUTS = T_REMOTE_REPLY_TIMEOUTS
	    LOCAL_REPLY_TIMEOUTS = T_LOCAL_REPLY_TIMEOUTS
	    REMOTE_BUFFER_ERRORS = T_REMOTE_BUFFER_ERRORS
	    LOCAL_BUFFER_ERRORS = T_LOCAL_BUFFER_ERRORS
	    REMOTE_PROCESS_ERRORS = T_REMOTE_PROCESS_ERRORS
	    LOCAL_PROCESS_ERRORS = T_LOCAL_PROCESS_ERRORS
	END
	T_SECONDS_SINCE_LAST_ZEROED = 0
	T_BYTES_RECEIVED = 0
	T_BYTES_SENT = 0
	T_DATA_BLOCKS_RECEIVED = 0
	T_DATA_BLOCKS_SENT = 0
	T_DATA_ERRORS_INBOUND = 0
	T_DATA_ERRORS_OUTBOUND = 0
	T_REMOTE_REPLY_TIMEOUTS = 0
	T_LOCAL_REPLY_TIMEOUTS = 0
	T_REMOTE_BUFFER_ERRORS = 0
	T_LOCAL_BUFFER_ERRORS = 0
	T_REMOTE_PROCESS_ERRORS = 0
	T_LOCAL_PROCESS_ERRORS = 0
    END
    T_DATE_TIME = IN_DATE
    T_SECONDS_SINCE_LAST_ZEROED = T_SECONDS_SINCE_LAST_ZEROED  + SECONDS_SINCE_LAST_ZEROED
    T_BYTES_RECEIVED = T_BYTES_RECEIVED  + BYTES_RECEIVED
    T_BYTES_SENT = T_BYTES_SENT  + BYTES_SENT
    T_DATA_BLOCKS_RECEIVED = T_DATA_BLOCKS_RECEIVED  + DATA_BLOCKS_RECEIVED
    T_DATA_BLOCKS_SENT = T_DATA_BLOCKS_SENT  + DATA_BLOCKS_SENT
    T_DATA_ERRORS_INBOUND = T_DATA_ERRORS_INBOUND  + DATA_ERRORS_INBOUND
    T_DATA_ERRORS_OUTBOUND = T_DATA_ERRORS_OUTBOUND  + DATA_ERRORS_OUTBOUND
    T_REMOTE_REPLY_TIMEOUTS = T_REMOTE_REPLY_TIMEOUTS  + REMOTE_REPLY_TIMEOUTS
    T_LOCAL_REPLY_TIMEOUTS = T_LOCAL_REPLY_TIMEOUTS  + LOCAL_REPLY_TIMEOUTS
    T_REMOTE_BUFFER_ERRORS = T_REMOTE_BUFFER_ERRORS  + REMOTE_BUFFER_ERRORS
    T_LOCAL_BUFFER_ERRORS = T_LOCAL_BUFFER_ERRORS  + LOCAL_BUFFER_ERRORS
    T_REMOTE_PROCESS_ERRORS = T_REMOTE_PROCESS_ERRORS  + REMOTE_PROCESS_ERRORS
    T_LOCAL_PROCESS_ERRORS = T_LOCAL_PROCESS_ERRORS  + LOCAL_PROCESS_ERRORS
END
!
END_PROCEDURE

DELETE DPV_SUMMARY;
REDEFINE DOMAIN DPV_SUMMARY USING DPV_COUNTS_RECORD ON DPV_SUMMARY.DAT;

DELETE GET_X25_IN_RECORD;
REDEFINE RECORD GET_X25_IN_RECORD USING OPTIMIZE
01 GET_X25_IN_REC.
    10 DATE_STRING PIC X(23).
    10 DATE_TIME COMPUTED BY FN$DATE(DATE_STRING).
    10 FILLER PIC X.
    10 SECONDS_SINCE_LAST_ZEROED PIC X(9).
    10 FILLER PIC X.
    10 TERMINATING_PACKETS_RECEIVED PIC X(9).
    10 FILLER PIC X.
    10 ORIGINATING_PACKETS_SENT PIC X(9).
    10 FILLER PIC X.
    10 TERMINATING_CONGESTION_LOSS PIC X(9).
    10 FILLER PIC X.
    10 TRANSIT_PACKETS_RECEIVED PIC X(9).
    10 FILLER PIC X.
    10 TRANSIT_PACKETS_SENT PIC X(9).
    10 FILLER PIC X.
    10 TRANSIT_CONGESTION_LOSS PIC X(9).
    10 FILLER PIC X.
    10 CIRCUIT_DOWN PIC X(9).
    10 FILLER PIC X.
    10 INITIALIZATION_FAILURE PIC X(9).
    10 FILLER PIC X.
    10 ADJACENCY_DOWN PIC X(9).
    10 FILLER PIC X.
    10 PEAK_ADJACENCIES PIC X(9).
    10 FILLER PIC X.
;

DELETE LAT_COUNTS;
REDEFINE DOMAIN LAT_COUNTS USING LAT_COUNTS_RECORD ON LAT_COUNTS.DAT;

DELETE LAT_COUNTS_RECORD;
REDEFINE RECORD LAT_COUNTS_RECORD USING OPTIMIZE
01 LAT_COUNTS_REC.
!
! This record stores LAT device counters (from LATCP) converted
! to binary data (takes less space, easier numeric comparisons).
!
! B. Z. Lederman
!
    10 TIMES.
	20 DATE_TIME USAGE DATE.
	20 D_TIME COMPUTED BY FN$TIME(DATE_TIME) EDIT_STRING T(11).
    10 FRAMES.
	20 RECEIVE_FRAMES USAGE LONG EDIT_STRING Z,ZZZ,ZZ9.
	20 TRANSMIT_FRAMES USAGE LONG EDIT_STRING Z,ZZZ,ZZ9.
    10 ERROR1.
	20 RECEIVE_ERRORS USAGE LONG EDIT_STRING ZZ,ZZ9.
	20 RECEIVE_DUPLICATES USAGE LONG EDIT_STRING ZZ,ZZ9.
	20 TRANSMIT_ERRORS USAGE LONG EDIT_STRING ZZ,ZZ9.
	20 RETRANSMISSIONS USAGE LONG EDIT_STRING ZZ,ZZ9.
	20 CIRCUIT_TIMEOUTS USAGE LONG EDIT_STRING ZZ,ZZ9.
    10 ERROR2.
	20 PROTOCOL_ERRORS USAGE LONG EDIT_STRING ZZ,ZZ9.
	20 RESOURCE_ERRORS USAGE LONG EDIT_STRING ZZ,ZZ9.
	20 NO_TRANSMIT_BUFFER USAGE LONG EDIT_STRING ZZ,ZZ9.
	20 UNIT_TIMEOUTS USAGE LONG EDIT_STRING ZZ,ZZ9.
	20 SOLICITATION_FAILURES USAGE LONG EDIT_STRING ZZ,ZZ9.
	20 DISCARDED_OUTPUT_BYTES USAGE LONG EDIT_STRING ZZ,ZZ9.
    10 OTHER.
	20 LAST_TRANSMIT_FAILURE_CODE USAGE LONG EDIT_STRING ZZZ,ZZZ,ZZ9.
	20 PROTOCOL_BIT_MASK USAGE LONG EDIT_STRING ZZZ,ZZZ,ZZ9.
;

DELETE LAT_IN;
REDEFINE DOMAIN LAT_IN USING LAT_IN_RECORD ON
    USER0:[ACCOUNTING]LAT_COUNTS.SEQ_OLD;

DELETE LAT_IN_RECORD;
REDEFINE RECORD LAT_IN_RECORD USING OPTIMIZE
01 LAT_IN_REC.
!
! This record reads the DPV device counter file (from LATCP via DCL)
!
! B. Z. Lederman
!
    10 DATE_STRING PIC X(23).
    10 DATE_TIME COMPUTED BY FN$DATE(DATE_STRING).
    10 FILLER PIC X.
    10 RECEIVE_FRAMES PIC X(9).
    10 FILLER PIC X.
    10 RECEIVE_ERRORS PIC X(9).
    10 FILLER PIC X.
    10 RECEIVE_DUPLICATES PIC X(9).
    10 FILLER PIC X.
    10 TRANSMIT_FRAMES PIC X(9).
    10 FILLER PIC X.
    10 TRANSMIT_ERRORS PIC X(9).
    10 FILLER PIC X.
    10 LAST_TRANSMIT_FAILURE_CODE PIC X(9).
    10 FILLER PIC X.
    10 RETRANSMISSIONS PIC X(9).
    10 FILLER PIC X.
    10 CIRCUIT_TIMEOUTS PIC X(9).
    10 FILLER PIC X.
    10 PROTOCOL_ERRORS PIC X(9).
    10 FILLER PIC X.
    10 PROTOCOL_BIT_MASK PIC X(9).
    10 FILLER PIC X.
    10 RESOURCE_ERRORS PIC X(9).
    10 FILLER PIC X.
    10 NO_TRANSMIT_BUFFER PIC X(9).
    10 FILLER PIC X.
    10 UNIT_TIMEOUTS PIC X(9).
    10 FILLER PIC X.
    10 SOLICITATION_FAILURES PIC X(9).
    10 FILLER PIC X.
    10 DISCARDED_OUTPUT_BYTES PIC X(9).
    10 FILLER PIC X.
;

DELETE LAT_SUMMARIZE;
REDEFINE PROCEDURE LAT_SUMMARIZE
!
! This procedure summarizes LAT device counts by day into another domain
!
! B. Z. Lederman	12-Apr-1990
!
DECLARE IN_DATE                      USAGE DATE.
DECLARE T_DATE_TIME                  USAGE DATE.
DECLARE T_RECEIVE_FRAMES             USAGE LONG.
DECLARE T_TRANSMIT_FRAMES            USAGE LONG.
DECLARE T_RECEIVE_ERRORS             USAGE LONG.
DECLARE T_RECEIVE_DUPLICATES         USAGE LONG.
DECLARE T_TRANSMIT_ERRORS            USAGE LONG.
DECLARE T_RETRANSMISSIONS            USAGE LONG.
DECLARE T_CIRCUIT_TIMEOUTS           USAGE LONG.
DECLARE T_PROTOCOL_ERRORS            USAGE LONG.
DECLARE T_RESOURCE_ERRORS            USAGE LONG.
DECLARE T_NO_TRANSMIT_BUFFER         USAGE LONG.
DECLARE T_UNIT_TIMEOUTS              USAGE LONG.
DECLARE T_SOLICITATION_FAILURES      USAGE LONG.
DECLARE T_DISCARDED_OUTPUT_BYTES     USAGE LONG.
DECLARE T_LAST_TRANSMIT_FAILURE_CODE USAGE LONG.
DECLARE T_PROTOCOL_BIT_MASK          USAGE LONG.
!
T_DATE_TIME                  = "17-NOV-1858"
T_RECEIVE_FRAMES             = 0
T_TRANSMIT_FRAMES            = 0
T_RECEIVE_ERRORS             = 0
T_RECEIVE_DUPLICATES         = 0
T_TRANSMIT_ERRORS            = 0
T_RETRANSMISSIONS            = 0
T_CIRCUIT_TIMEOUTS           = 0
T_PROTOCOL_ERRORS            = 0
T_RESOURCE_ERRORS            = 0
T_NO_TRANSMIT_BUFFER         = 0
T_UNIT_TIMEOUTS              = 0
T_SOLICITATION_FAILURES      = 0
T_DISCARDED_OUTPUT_BYTES     = 0
T_LAST_TRANSMIT_FAILURE_CODE = 0
T_PROTOCOL_BIT_MASK          = 0
!
READY LAT_COUNTS
DEFINE FILE FOR LAT_SUMMARY;
READY LAT_SUMMARY WRITE
FOR LAT_COUNTS BEGIN
!
    IN_DATE = FN$DATE(
	FN$UPCASE(FORMAT DATE_TIME USING DD_MMM_YYYY | " 00:00:00.00"))
    IF T_DATE_TIME NE IN_DATE AND T_DATE_TIME NE "17-NOV-1858" BEGIN
	PRINT IN_DATE
	STORE LAT_SUMMARY USING BEGIN
	    DATE_TIME                  = T_DATE_TIME
	    RECEIVE_FRAMES             = T_RECEIVE_FRAMES
	    TRANSMIT_FRAMES            = T_TRANSMIT_FRAMES
	    RECEIVE_ERRORS             = T_RECEIVE_ERRORS
	    RECEIVE_DUPLICATES         = T_RECEIVE_DUPLICATES
	    TRANSMIT_ERRORS            = T_TRANSMIT_ERRORS
	    RETRANSMISSIONS            = T_RETRANSMISSIONS
	    CIRCUIT_TIMEOUTS           = T_CIRCUIT_TIMEOUTS
	    PROTOCOL_ERRORS            = T_PROTOCOL_ERRORS
	    RESOURCE_ERRORS            = T_RESOURCE_ERRORS
	    NO_TRANSMIT_BUFFER         = T_NO_TRANSMIT_BUFFER
	    UNIT_TIMEOUTS              = T_UNIT_TIMEOUTS
	    SOLICITATION_FAILURES      = T_SOLICITATION_FAILURES
	    DISCARDED_OUTPUT_BYTES     = T_DISCARDED_OUTPUT_BYTES
	    LAST_TRANSMIT_FAILURE_CODE = T_LAST_TRANSMIT_FAILURE_CODE
	    PROTOCOL_BIT_MASK          = T_PROTOCOL_BIT_MASK
	END
	T_RECEIVE_FRAMES             = 0
	T_TRANSMIT_FRAMES            = 0
	T_RECEIVE_ERRORS             = 0
	T_RECEIVE_DUPLICATES         = 0
	T_TRANSMIT_ERRORS            = 0
	T_RETRANSMISSIONS            = 0
	T_CIRCUIT_TIMEOUTS           = 0
	T_PROTOCOL_ERRORS            = 0
	T_RESOURCE_ERRORS            = 0
	T_NO_TRANSMIT_BUFFER         = 0
	T_UNIT_TIMEOUTS              = 0
	T_SOLICITATION_FAILURES      = 0
	T_DISCARDED_OUTPUT_BYTES     = 0
	T_LAST_TRANSMIT_FAILURE_CODE = 0
	T_PROTOCOL_BIT_MASK          = 0
    END
    T_DATE_TIME = IN_DATE
    T_RECEIVE_FRAMES = T_RECEIVE_FRAMES + RECEIVE_FRAMES
    T_TRANSMIT_FRAMES = T_TRANSMIT_FRAMES + TRANSMIT_FRAMES
    T_RECEIVE_ERRORS = T_RECEIVE_ERRORS + RECEIVE_ERRORS
    T_RECEIVE_DUPLICATES = T_RECEIVE_DUPLICATES + RECEIVE_DUPLICATES
    T_TRANSMIT_ERRORS = T_TRANSMIT_ERRORS + TRANSMIT_ERRORS
    T_RETRANSMISSIONS = T_RETRANSMISSIONS + RETRANSMISSIONS
    T_CIRCUIT_TIMEOUTS = T_CIRCUIT_TIMEOUTS + CIRCUIT_TIMEOUTS
    T_PROTOCOL_ERRORS = T_PROTOCOL_ERRORS + PROTOCOL_ERRORS
    T_RESOURCE_ERRORS = T_RESOURCE_ERRORS + RESOURCE_ERRORS
    T_NO_TRANSMIT_BUFFER = T_NO_TRANSMIT_BUFFER + NO_TRANSMIT_BUFFER
    T_UNIT_TIMEOUTS = T_UNIT_TIMEOUTS + UNIT_TIMEOUTS
    T_SOLICITATION_FAILURES = T_SOLICITATION_FAILURES + SOLICITATION_FAILURES
    T_DISCARDED_OUTPUT_BYTES = T_DISCARDED_OUTPUT_BYTES + DISCARDED_OUTPUT_BYTES
    T_LAST_TRANSMIT_FAILURE_CODE = T_LAST_TRANSMIT_FAILURE_CODE + LAST_TRANSMIT_FAILURE_CODE
    T_PROTOCOL_BIT_MASK = T_PROTOCOL_BIT_MASK + PROTOCOL_BIT_MASK
END
!
END_PROCEDURE

DELETE LAT_SUMMARY;
REDEFINE DOMAIN LAT_SUMMARY USING LAT_COUNTS_RECORD ON LAT_SUMMARY.DAT;

DELETE PRINT_DPV_ERRORS;
REDEFINE PROCEDURE PRINT_DPV_ERRORS
FOR DPV_COUNTS WITH (DATA_ERRORS_INBOUND NE 0 OR
	DATA_ERRORS_OUTBOUND NE 0 OR
	REMOTE_REPLY_TIMEOUTS NE 0 OR
	REMOTE_PROCESS_ERRORS NE 0 OR
	REMOTE_BUFFER_ERRORS NE 0 OR
	LOCAL_REPLY_TIMEOUTS NE 0 OR
	LOCAL_BUFFER_ERRORS NE 0 OR
	LOCAL_PROCESS_ERRORS NE 0)
    PRINT DATE_TIME, D_TIME, SENT, RECEIVED, LOCAL, REMOTE
END_PROCEDURE

DELETE QNA_COUNTS;
REDEFINE DOMAIN QNA_COUNTS USING QNA_COUNTS_RECORD ON QNA_COUNTS.DAT;

DELETE QNA_COUNTS_RECORD;
REDEFINE RECORD QNA_COUNTS_RECORD USING OPTIMIZE
01 QNA_COUNTS_REC.
!
! This record stores QNA device counters (from DECnet) converted
! to binary data (takes less space, easier numeric comparisons).
!
! B. Z. Lederman
!
    10 TIMES.
	20 DATE_TIME USAGE DATE.
	20 D_TIME COMPUTED BY FN$TIME(DATE_TIME) EDIT_STRING T(11).
	20 SECONDS_SINCE_LAST_ZEROED USAGE LONG EDIT_STRING ZZ,ZZ9
            QUERY_NAME IS SSLZ.
    10 RECEIVED.
	20 DATA_BLOCKS_RECEIVED USAGE LONG EDIT_STRING ZZZ,ZZZ,ZZ9.
	20 MULTICAST_BLOCKS_RECEIVED USAGE LONG EDIT_STRING ZZZ,ZZZ,ZZ9
            QUERY_NAME IS MBR.
	20 BYTES_RECEIVED USAGE LONG EDIT_STRING ZZZ,ZZZ,ZZ9.
	20 MULTICAST_BYTES_RECEIVED USAGE LONG EDIT_STRING ZZZ,ZZZ,ZZ9.
    10 SENT.
	20 DATA_BLOCKS_SENT USAGE LONG EDIT_STRING ZZZ,ZZZ,ZZ9.
	20 MULTICAST_BLOCKS_SENT USAGE LONG EDIT_STRING ZZZ,ZZZ,ZZ9
	    QUERY_NAME IS MBS.
	20 BLOCKS_SENT_INITIALLY_DEFERRED USAGE LONG EDIT_STRING ZZZ,ZZZ,ZZ9.
	20 BYTES_SENT USAGE LONG EDIT_STRING ZZZ,ZZZ,ZZ9.
	20 MULTICAST_BYTES_SENT USAGE LONG EDIT_STRING ZZZ,ZZZ,ZZ9.
    10 ERRORS.
	20 RECEIVE_FAILURE USAGE LONG EDIT_STRING ZZ9.
	20 DATA_OVERRUN USAGE LONG EDIT_STRING ZZ9.
	20 BLOCKS_SENT_MULTIPLE_COLLISIONS USAGE LONG EDIT_STRING ZZ9.
	20 BLOCKS_SENT_SINGLE_COLLISION USAGE LONG EDIT_STRING ZZ9.
	20 SEND_FAILURE USAGE LONG EDIT_STRING ZZ9.
	20 COLLISION_DETECT_CHECK_FAILURE USAGE LONG EDIT_STRING ZZ9.
	20 UNRECOGNIZED_FRAME_DESTINATION USAGE LONG EDIT_STRING ZZ9.
	20 SYSTEM_BUFFER_UNAVAILABLE USAGE LONG EDIT_STRING ZZ9.
	20 USER_BUFFER_UNAVAILABLE USAGE LONG EDIT_STRING ZZ9.
;

DELETE QNA_HOUR;
REDEFINE DOMAIN QNA_HOUR USING QNA_COUNTS_RECORD ON QNA_HOUR.DAT;

DELETE QNA_IN;
REDEFINE DOMAIN QNA_IN USING QNA_IN_RECORD ON
    USER0:[ACCOUNTING]QNA_0_COUNTS.SEQ;

DELETE QNA_IN_RECORD;
REDEFINE RECORD QNA_IN_RECORD USING OPTIMIZE
01 QNA_IN_REC.
!
! This record reads the QNA device counter file (from DECnet via DCL)
!
! B. Z. Lederman
!
    10 DATE_STRING PIC X(23).
    10 DATE_TIME COMPUTED BY FN$DATE(DATE_STRING).
    10 FILLER PIC X.
    10 SECONDS_SINCE_LAST_ZEROED PIC X(9).
    10 FILLER PIC X.
    10 DATA_BLOCKS_RECEIVED PIC X(9).
    10 FILLER PIC X.
    10 MULTICAST_BLOCKS_RECEIVED PIC X(9).
    10 FILLER PIC X.
    10 RECEIVE_FAILURE PIC X(9).
    10 FILLER PIC X.
    10 BYTES_RECEIVED PIC X(9).
    10 FILLER PIC X.
    10 MULTICAST_BYTES_RECEIVED PIC X(9).
    10 FILLER PIC X.
    10 DATA_OVERRUN PIC X(9).
    10 FILLER PIC X.
    10 DATA_BLOCKS_SENT PIC X(9).
    10 FILLER PIC X.
    10 MULTICAST_BLOCKS_SENT PIC X(9).
    10 FILLER PIC X.
    10 BLOCKS_SENT_MULTIPLE_COLLISIONS PIC X(9).
    10 FILLER PIC X.
    10 BLOCKS_SENT_SINGLE_COLLISION PIC X(9).
    10 FILLER PIC X.
    10 BLOCKS_SENT_INITIALLY_DEFERRED PIC X(9).
    10 FILLER PIC X.
    10 BYTES_SENT PIC X(9).
    10 FILLER PIC X.
    10 MULTICAST_BYTES_SENT PIC X(9).
    10 FILLER PIC X.
    10 SEND_FAILURE PIC X(9).
    10 FILLER PIC X.
    10 COLLISION_DETECT_CHECK_FAILURE PIC X(9).
    10 FILLER PIC X.
    10 UNRECOGNIZED_FRAME_DESTINATION PIC X(9).
    10 FILLER PIC X.
    10 SYSTEM_BUFFER_UNAVAILABLE PIC X(9).
    10 FILLER PIC X.
    10 USER_BUFFER_UNAVAILABLE PIC X(9).
    10 FILLER PIC X.
;

DELETE QNA_SUMMARIZE;
REDEFINE PROCEDURE QNA_SUMMARIZE
!
! This procedure summarizes QNA device counts by day into another domain
!
! B. Z. Lederman	11-Apr-1990
!
DECLARE IN_DATE USAGE DATE.
DECLARE T_DATE_TIME USAGE DATE.
DECLARE T_SECONDS_SINCE_LAST_ZEROED    USAGE LONG.
DECLARE T_DATA_BLOCKS_RECEIVED         USAGE LONG.
DECLARE T_MULTICAST_BLOCKS_RECEIVED    USAGE LONG.
DECLARE T_BYTES_RECEIVED               USAGE LONG.
DECLARE T_MULTICAST_BYTES_RECEIVED     USAGE LONG.
DECLARE T_DATA_BLOCKS_SENT             USAGE LONG.
DECLARE T_MULTICAST_BLOCKS_SENT        USAGE LONG.
DECLARE T_BLOCKS_SENT_INITIALLY_DEFERR USAGE LONG.
DECLARE T_BYTES_SENT                   USAGE LONG.
DECLARE T_MULTICAST_BYTES_SENT         USAGE LONG.
DECLARE T_RECEIVE_FAILURE              USAGE LONG.
DECLARE T_DATA_OVERRUN                 USAGE LONG.
DECLARE T_BLOCKS_SENT_MULTIPLE_COLLISI USAGE LONG.
DECLARE T_BLOCKS_SENT_SINGLE_COLLISION USAGE LONG.
DECLARE T_SEND_FAILURE                 USAGE LONG.
DECLARE T_COLLISION_DETECT_CHECK_FAILU USAGE LONG.
DECLARE T_UNRECOGNIZED_FRAME_DESTINATI USAGE LONG.
DECLARE T_SYSTEM_BUFFER_UNAVAILABLE    USAGE LONG.
DECLARE T_USER_BUFFER_UNAVAILABLE      USAGE LONG.
!
T_DATE_TIME = "17-NOV-1858"
T_SECONDS_SINCE_LAST_ZEROED    = 0
T_DATA_BLOCKS_RECEIVED         = 0
T_MULTICAST_BLOCKS_RECEIVED    = 0
T_BYTES_RECEIVED               = 0
T_MULTICAST_BYTES_RECEIVED     = 0
T_DATA_BLOCKS_SENT             = 0
T_MULTICAST_BLOCKS_SENT        = 0
T_BLOCKS_SENT_INITIALLY_DEFERR = 0
T_BYTES_SENT                   = 0
T_MULTICAST_BYTES_SENT         = 0
T_RECEIVE_FAILURE              = 0
T_DATA_OVERRUN                 = 0
T_BLOCKS_SENT_MULTIPLE_COLLISI = 0
T_BLOCKS_SENT_SINGLE_COLLISION = 0
T_SEND_FAILURE                 = 0
T_COLLISION_DETECT_CHECK_FAILU = 0
T_UNRECOGNIZED_FRAME_DESTINATI = 0
T_SYSTEM_BUFFER_UNAVAILABLE    = 0
T_USER_BUFFER_UNAVAILABLE      = 0
!
READY QNA_COUNTS
DEFINE FILE FOR QNA_SUMMARY;
READY QNA_SUMMARY WRITE
FOR QNA_COUNTS BEGIN
!
    IN_DATE = FN$DATE(
	FN$UPCASE(FORMAT DATE_TIME USING DD_MMM_YYYY | " 00:00:00.00"))
    IF T_DATE_TIME NE IN_DATE AND T_DATE_TIME NE "17-NOV-1858" BEGIN
	PRINT IN_DATE
	STORE QNA_SUMMARY USING BEGIN
	    DATE_TIME = T_DATE_TIME
	    SECONDS_SINCE_LAST_ZEROED      = T_SECONDS_SINCE_LAST_ZEROED
	    DATA_BLOCKS_RECEIVED           = T_DATA_BLOCKS_RECEIVED
	    MULTICAST_BLOCKS_RECEIVED      = T_MULTICAST_BLOCKS_RECEIVED
	    BYTES_RECEIVED                 = T_BYTES_RECEIVED
	    MULTICAST_BYTES_RECEIVED       = T_MULTICAST_BYTES_RECEIVED
	    DATA_BLOCKS_SENT               = T_DATA_BLOCKS_SENT
	    MULTICAST_BLOCKS_SENT          = T_MULTICAST_BLOCKS_SENT
	    BLOCKS_SENT_INITIALLY_DEFERRED = T_BLOCKS_SENT_INITIALLY_DEFERR
	    BYTES_SENT                     = T_BYTES_SENT
	    MULTICAST_BYTES_SENT           = T_MULTICAST_BYTES_SENT
	    RECEIVE_FAILURE                = T_RECEIVE_FAILURE
	    DATA_OVERRUN                   = T_DATA_OVERRUN
	    BLOCKS_SENT_MULTIPLE_COLLISIONS = T_BLOCKS_SENT_MULTIPLE_COLLISI
	    BLOCKS_SENT_SINGLE_COLLISION    = T_BLOCKS_SENT_SINGLE_COLLISION
	    SEND_FAILURE                   = T_SEND_FAILURE
	    COLLISION_DETECT_CHECK_FAILURE = T_COLLISION_DETECT_CHECK_FAILU
	    UNRECOGNIZED_FRAME_DESTINATION = T_UNRECOGNIZED_FRAME_DESTINATI
	    SYSTEM_BUFFER_UNAVAILABLE      = T_SYSTEM_BUFFER_UNAVAILABLE
	    USER_BUFFER_UNAVAILABLE        = T_USER_BUFFER_UNAVAILABLE
	END
	T_SECONDS_SINCE_LAST_ZEROED    = 0
	T_DATA_BLOCKS_RECEIVED         = 0
	T_MULTICAST_BLOCKS_RECEIVED    = 0
	T_BYTES_RECEIVED               = 0
	T_MULTICAST_BYTES_RECEIVED     = 0
	T_DATA_BLOCKS_SENT             = 0
	T_MULTICAST_BLOCKS_SENT        = 0
	T_BLOCKS_SENT_INITIALLY_DEFERR = 0
	T_BYTES_SENT                   = 0
	T_MULTICAST_BYTES_SENT         = 0
	T_RECEIVE_FAILURE              = 0
	T_DATA_OVERRUN                 = 0
	T_BLOCKS_SENT_MULTIPLE_COLLISI = 0
	T_BLOCKS_SENT_SINGLE_COLLISION = 0
	T_SEND_FAILURE                 = 0
	T_COLLISION_DETECT_CHECK_FAILU = 0
	T_UNRECOGNIZED_FRAME_DESTINATI = 0
	T_SYSTEM_BUFFER_UNAVAILABLE    = 0
	T_USER_BUFFER_UNAVAILABLE      = 0
    END
    T_DATE_TIME = IN_DATE
    T_SECONDS_SINCE_LAST_ZEROED = T_SECONDS_SINCE_LAST_ZEROED + SECONDS_SINCE_LAST_ZEROED
    T_DATA_BLOCKS_RECEIVED = T_DATA_BLOCKS_RECEIVED + DATA_BLOCKS_RECEIVED
    T_MULTICAST_BLOCKS_RECEIVED = T_MULTICAST_BLOCKS_RECEIVED + MULTICAST_BLOCKS_RECEIVED
    T_BYTES_RECEIVED = T_BYTES_RECEIVED + BYTES_RECEIVED
    T_MULTICAST_BYTES_RECEIVED = T_MULTICAST_BYTES_RECEIVED + MULTICAST_BYTES_RECEIVED
    T_DATA_BLOCKS_SENT = T_DATA_BLOCKS_SENT + DATA_BLOCKS_SENT
    T_MULTICAST_BLOCKS_SENT = T_MULTICAST_BLOCKS_SENT + MULTICAST_BLOCKS_SENT
    T_BLOCKS_SENT_INITIALLY_DEFERR = T_BLOCKS_SENT_INITIALLY_DEFERR + BLOCKS_SENT_INITIALLY_DEFERRED
    T_BYTES_SENT = T_BYTES_SENT + BYTES_SENT
    T_MULTICAST_BYTES_SENT = T_MULTICAST_BYTES_SENT + MULTICAST_BYTES_SENT
    T_RECEIVE_FAILURE = T_RECEIVE_FAILURE + RECEIVE_FAILURE
    T_DATA_OVERRUN = T_DATA_OVERRUN + DATA_OVERRUN
    T_BLOCKS_SENT_MULTIPLE_COLLISI = T_BLOCKS_SENT_MULTIPLE_COLLISI + BLOCKS_SENT_MULTIPLE_COLLISIONS
    T_BLOCKS_SENT_SINGLE_COLLISION = T_BLOCKS_SENT_SINGLE_COLLISION + BLOCKS_SENT_SINGLE_COLLISION
    T_SEND_FAILURE = T_SEND_FAILURE + SEND_FAILURE
    T_COLLISION_DETECT_CHECK_FAILU = T_COLLISION_DETECT_CHECK_FAILU + COLLISION_DETECT_CHECK_FAILURE
    T_UNRECOGNIZED_FRAME_DESTINATI = T_UNRECOGNIZED_FRAME_DESTINATI + UNRECOGNIZED_FRAME_DESTINATION
    T_SYSTEM_BUFFER_UNAVAILABLE = T_SYSTEM_BUFFER_UNAVAILABLE + SYSTEM_BUFFER_UNAVAILABLE
    T_USER_BUFFER_UNAVAILABLE = T_USER_BUFFER_UNAVAILABLE + USER_BUFFER_UNAVAILABLE
END
!
END_PROCEDURE

DELETE QNA_SUMMARY;
REDEFINE DOMAIN QNA_SUMMARY USING QNA_COUNTS_RECORD ON QNA_SUMMARY.DAT;

DELETE X25_COUNTS_RECORD;
REDEFINE RECORD X25_COUNTS_RECORD USING OPTIMIZE
01 X25_COUNTS_REC.
    10 TIMES.
	20 DATE_TIME USAGE DATE.
	20 D_TIME COMPUTED BY FN$TIME(DATE_TIME) EDIT_STRING T(11).
	20 SECONDS_SINCE_LAST_ZEROED USAGE LONG EDIT_STRING ZZ,ZZ9.
    10 TERMINATING.
	20 TERMINATING_PACKETS_RECEIVED USAGE LONG EDIT_STRING ZZ,ZZ9.
	20 TERMINATING_CONGESTION_LOSS USAGE LONG EDIT_STRING ZZ,ZZ9.
	20 ORIGINATING_PACKETS_SENT USAGE LONG EDIT_STRING ZZ,ZZ9.
    10 TRANSIT.
	20 TRANSIT_PACKETS_RECEIVED USAGE LONG EDIT_STRING ZZ,ZZ9.
	20 TRANSIT_PACKETS_SENT USAGE LONG EDIT_STRING ZZ,ZZ9.
	20 TRANSIT_CONGESTION_LOSS USAGE LONG EDIT_STRING ZZ,ZZ9.
    10 ERRORS.
	20 CIRCUIT_DOWN USAGE LONG EDIT_STRING ZZ9.
	20 INITIALIZATION_FAILURE USAGE LONG EDIT_STRING ZZ9.
	20 ADJACENCY_DOWN USAGE LONG EDIT_STRING ZZ9.
	20 PEAK_ADJACENCIES USAGE LONG EDIT_STRING ZZ9.
;

