MODULE ppl$routines;

/****************************************************************************
/*									    *
/*  COPYRIGHT (c) 1988 BY               				    *
/*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
/*  ALL RIGHTS RESERVED.						    *
/* 									    *
/*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
/*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
/*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
/*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
/*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   * 
/*  TRANSFERRED.			       				    *
/* 									    *
/*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
/*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
/*  CORPORATION.							    *
/* 									    *
/*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
/*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
/* 									    *
/*									    *
/****************************************************************************


/*    PPL$ADJUST_SEMAPHORE_MAXIMUM
/*    
/*    Adjust a Semaphore Maximum
/*    
/*    The Adjust a Semaphore Maximum routine increments or decrements the maximum
/*    associated with a semaphore. 
/*    
ENTRY ppl$adjust_semaphore_maximum ALIAS $ppl_adjust_semaphore_maximum PARAMETER (
    LONGWORD UNSIGNED NAMED semaphore_id IN
        TYPENAME identifier REFERENCE,
    WORD NAMED amount IN
        TYPENAME word_signed REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$ADJUST_QUORUM
/*    
/*    Adjust Barrier Quorum
/*    
/*    The Adjust Barrier Quorum routine increments or decrements the quorum
/*    associated with a barrier.
/*    
ENTRY ppl$adjust_quorum ALIAS $ppl_adjust_quorum PARAMETER (
    LONGWORD UNSIGNED NAMED barrier_id IN
        TYPENAME identifier REFERENCE,
    WORD NAMED amount IN
        TYPENAME word_signed REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$AWAIT_EVENT
/*    
/*    Await Event Occurrence
/*    
/*    The Await Event Occurrence routine blocks the caller until an event
/*    occurs.  
/*    
ENTRY ppl$await_event ALIAS $ppl_await_event PARAMETER (
    LONGWORD UNSIGNED NAMED event_id IN
        TYPENAME identifier REFERENCE,
    LONGWORD UNSIGNED NAMED output OUT OPTIONAL
        TYPENAME user_arg REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$CREATE_APPLICATION
/*    
/*    Form or Join a PPL$ Application
/*    
/*    The Form or Join a PPL$ Application routine informs the PPL$ facility 
/*    that the calling process is forming or joining a parallel application.
/*    
ENTRY ppl$create_application ALIAS $ppl_create_application PARAMETER (
    LONGWORD UNSIGNED NAMED size IN OPTIONAL
        TYPENAME longword_unsigned REFERENCE,
    CHARACTER RTL_STR_DESC NAMED application_name IN OPTIONAL
        TYPENAME char_string,
    LONGWORD UNSIGNED NAMED protection IN OPTIONAL
        TYPENAME file_protection REFERENCE,
    LONGWORD UNSIGNED NAMED flags IN OPTIONAL
        TYPENAME mask_longword REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$CREATE_BARRIER
/*    
/*    Create a Barrier
/*    
/*    The Create a Barrier routine creates and initializes a
/*    barrier, and returns the barrier identifier.
/*    You use the barrier identifier to perform all operations on that
/*    barrier.
/*    
ENTRY ppl$create_barrier ALIAS $ppl_create_barrier PARAMETER (
    LONGWORD UNSIGNED NAMED barrier_id OUT
        TYPENAME identifier REFERENCE,
    CHARACTER RTL_STR_DESC NAMED barrier_name IN OPTIONAL
        TYPENAME char_string,
    WORD NAMED quorum IN OPTIONAL
        TYPENAME word_signed REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$CREATE_EVENT
/*    
/*    Create an Event
/*    
/*    The Create an Event routine creates an arbitrary user-defined event
/*    and returns the event identifier. You use the event identifier to
/*    perform all operations on that event. 
/*    
ENTRY ppl$create_event ALIAS $ppl_create_event PARAMETER (
    LONGWORD UNSIGNED NAMED event_id OUT
        TYPENAME identifier REFERENCE,
    CHARACTER RTL_STR_DESC NAMED event_name IN OPTIONAL
        TYPENAME char_string )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$CREATE_SPIN_LOCK
/*    
/*    Create Spin Lock
/*    
/*    The Create Spin Lock routine creates and initializes a simple (spin)
/*    lock, and returns the lock identifier. You use that lock identifier to 
/*    get and free the lock.
/*    
ENTRY ppl$create_spin_lock ALIAS $ppl_create_spin_lock PARAMETER (
    LONGWORD UNSIGNED NAMED lock_id OUT
        TYPENAME identifier REFERENCE,
    CHARACTER RTL_STR_DESC NAMED lock_name IN OPTIONAL
        TYPENAME char_string )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$CREATE_SHARED_MEMORY
/*    
/*    Create Shared Memory
/*    
/*    The Create Shared Memory routine creates (if necessary) and maps a
/*    section of memory that can be shared by multiple processes.
/*    
ENTRY ppl$create_shared_memory ALIAS $ppl_create_shared_memory PARAMETER (
    CHARACTER RTL_STR_DESC NAMED section_name IN
        TYPENAME char_string,
    LONGWORD UNSIGNED DIMENSION * REFERENCE NAMED memory_area IN OUT
        TYPENAME vector_longword_unsigned,
    LONGWORD UNSIGNED NAMED flags IN OPTIONAL
        TYPENAME mask_longword REFERENCE,
    CHARACTER RTL_STR_DESC NAMED file_name IN OPTIONAL
        TYPENAME char_string,
    LONGWORD UNSIGNED NAMED protection IN OPTIONAL
        TYPENAME file_protection REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$CREATE_WORK_QUEUE
/*    
/*    Create a Work Queue
/*    
/*    The Create a Work Queue routine creates and initializes a work queue, and
/*    returns the work queue identifier.
/*    
ENTRY ppl$create_work_queue ALIAS $ppl_create_work_queue PARAMETER (
    LONGWORD UNSIGNED NAMED queue_id OUT
        TYPENAME identifier REFERENCE,
    CHARACTER RTL_STR_DESC NAMED queue_name IN OPTIONAL
        TYPENAME char_string )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$CREATE_SEMAPHORE
/*    
/*    Create a Semaphore
/*    
/*    The Create a Semaphore routine creates and initializes a
/*    semaphore with a waiting queue, and returns the semaphore identifier.
/*    You use the semaphore identifier to perform all operations on that
/*    semaphore.
/*    
ENTRY ppl$create_semaphore ALIAS $ppl_create_semaphore PARAMETER (
    LONGWORD UNSIGNED NAMED semaphore_id OUT
        TYPENAME identifier REFERENCE,
    CHARACTER RTL_STR_DESC NAMED semaphore_name IN OPTIONAL
        TYPENAME char_string,
    WORD NAMED semaphore_maximum IN OPTIONAL
        TYPENAME word_signed REFERENCE,
    WORD NAMED semaphore_initial IN OPTIONAL
        TYPENAME word_signed REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$CREATE_VM_ZONE
/*    
/*    Create a New Virtual Memory Zone
/*    
/*    The Create a New Virtual Memory Zone routine creates a new storage
/*    zone, according to specified arguments, which is available to all
/*    participants in the application.
/*    
ENTRY ppl$create_vm_zone ALIAS $ppl_create_vm_zone PARAMETER (
    LONGWORD UNSIGNED NAMED zone_id OUT
        TYPENAME identifier REFERENCE,
    LONGWORD NAMED algorithm IN OPTIONAL
        TYPENAME longword_signed REFERENCE,
    LONGWORD NAMED algorithm_argument IN OPTIONAL
        TYPENAME longword_signed REFERENCE,
    LONGWORD UNSIGNED NAMED flags IN OPTIONAL
        TYPENAME mask_longword REFERENCE,
    LONGWORD NAMED extend_size IN OPTIONAL
        TYPENAME longword_signed REFERENCE,
    LONGWORD NAMED initial_size IN OPTIONAL
        TYPENAME longword_signed REFERENCE,
    LONGWORD NAMED block_size IN OPTIONAL
        TYPENAME longword_signed REFERENCE,
    LONGWORD NAMED alignment IN OPTIONAL
        TYPENAME longword_signed REFERENCE,
    LONGWORD NAMED page_limit IN OPTIONAL
        TYPENAME longword_signed REFERENCE,
    LONGWORD NAMED smallest_block_size IN OPTIONAL
        TYPENAME longword_signed REFERENCE,
    CHARACTER RTL_STR_DESC NAMED zone_name IN OPTIONAL
        TYPENAME char_string )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$DELETE_APPLICATION
/*    
/*    Delete a PPL$ Application
/*    
/*    The Delete a PPL$ Application routine marks all shared memory for
/*    deletion and prevents additional processes from joining the application.
/*    
ENTRY ppl$delete_application ALIAS $ppl_delete_application
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;

/*    PPL$DECREMENT_SEMAPHORE
/*    
/*    Decrement a Semaphore
/*    
/*    The Decrement a Semaphore routine waits for a semaphore to have a
/*    value greater than 0, then decrements the value
/*    by 1 to indicate the allocation of a resource.
/*    
ENTRY ppl$decrement_semaphore ALIAS $ppl_decrement_semaphore PARAMETER (
    LONGWORD UNSIGNED NAMED semaphore_id IN
        TYPENAME identifier REFERENCE,
    LONGWORD UNSIGNED NAMED flags IN OPTIONAL
        TYPENAME mask_longword REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$DISABLE_EVENT
/*    
/*    Disable Asynchronous Notification of an Event
/*    
/*    The Disable Asynchronous Notification of an Event routine disables delivery to a
/*    process of notification of an event by either AST or signal.
/*    
ENTRY ppl$disable_event ALIAS $ppl_disable_event PARAMETER (
    LONGWORD UNSIGNED NAMED event_id IN
        TYPENAME identifier REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$DELETE_WORK_ITEM
/*    
/*    Delete a Work Queue Item
/*    
/*    The Delete a Work Queue Item routine deletes a work item from a work
/*    queue. 
/*    
ENTRY ppl$delete_work_item ALIAS $ppl_delete_work_item PARAMETER (
    LONGWORD UNSIGNED NAMED queue_id IN
        TYPENAME identifier REFERENCE,
    LONGWORD UNSIGNED NAMED work_item IN
        TYPENAME user_arg VALUE,
    LONGWORD UNSIGNED NAMED flags IN OPTIONAL
        TYPENAME mask_longword REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$DELETE_SHARED_MEMORY
/*    
/*    Delete Shared Memory
/*    
/*    The Delete Shared Memory routine deletes or unmaps from a global
/*    section that you created using the PPL$CREATE_SHARED_MEMORY routine.
/*    Optionally, this routine writes the contents of the global section to
/*    disk before deleting the section.
/*    
ENTRY ppl$delete_shared_memory ALIAS $ppl_delete_shared_memory PARAMETER (
    CHARACTER RTL_STR_DESC NAMED section_name IN
        TYPENAME char_string,
    LONGWORD UNSIGNED DIMENSION * REFERENCE NAMED memory_area IN OPTIONAL
        TYPENAME vector_longword_unsigned,
    LONGWORD UNSIGNED NAMED flags IN OPTIONAL
        TYPENAME mask_longword REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$DELETE_WORK_QUEUE
/*    
/*    Delete a Work Queue
/*    
/*    The Delete a Work Queue routine deletes the specified work queue, and releases
/*    any storage associated with it.
/*    
ENTRY ppl$delete_work_queue ALIAS $ppl_delete_work_queue PARAMETER (
    LONGWORD UNSIGNED NAMED queue_id IN OPTIONAL
        TYPENAME identifier REFERENCE,
    CHARACTER RTL_STR_DESC NAMED queue_name IN OPTIONAL
        TYPENAME char_string,
    LONGWORD UNSIGNED NAMED flags IN OPTIONAL
        TYPENAME mask_longword REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$ENABLE_EVENT_AST
/*    
/*    Enable AST Notification of an Event
/*    
/*    The Enable AST Notification of an Event routine specifies the address of
/*    an AST routine (and optionally an argument to that routine) to be delivered
/*    when an event occurs.
/*    
ENTRY ppl$enable_event_ast ALIAS $ppl_enable_event_ast PARAMETER (
    LONGWORD UNSIGNED NAMED event_id IN
        TYPENAME identifier REFERENCE,
    ADDRESS (ENTRY) NAMED astadr IN
        TYPENAME ast_procedure REFERENCE,
    ANY NAMED astprm IN OPTIONAL
        TYPENAME user_arg VALUE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$ENABLE_EVENT_SIGNAL
/*    
/*    Enable Signal Notification of an Event
/*    
/*    The Enable Signal Notification of an Event routine specifies a
/*    condition value to be signaled when the event occurs.
/*    
ENTRY ppl$enable_event_signal ALIAS $ppl_enable_event_signal PARAMETER (
    LONGWORD UNSIGNED NAMED event_id IN
        TYPENAME identifier REFERENCE,
    LONGWORD UNSIGNED NAMED signal_value IN OPTIONAL
        TYPENAME user_arg VALUE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$FLUSH_SHARED_MEMORY
/*    
/*    Flush Shared Memory
/*    
/*    The Flush Shared Memory routine writes (flushes) to disk the contents
/*    of a global section that you created using the PPL$CREATE_SHARED_MEMORY
/*    routine. Only pages that have been modified are flushed to disk.
/*    
ENTRY ppl$flush_shared_memory ALIAS $ppl_flush_shared_memory PARAMETER (
    CHARACTER RTL_STR_DESC NAMED section_name IN
        TYPENAME char_string,
    LONGWORD UNSIGNED DIMENSION * REFERENCE NAMED memory_area IN OPTIONAL
        TYPENAME vector_longword_unsigned,
    LONGWORD UNSIGNED NAMED flags IN OPTIONAL
        TYPENAME mask_longword REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$FIND_OBJECT_ID
/*    
/*    Find Object Identification
/*    
/*    Given the name of a spin lock, semaphore, barrier, event, work queue,
/*    or shared memory zone, the Find Object Identification routine returns
/*    the identifier of the object associated with the name you specify. 
/*    
ENTRY ppl$find_object_id ALIAS $ppl_find_object_id PARAMETER (
    LONGWORD UNSIGNED NAMED object_id IN OUT
        TYPENAME identifier REFERENCE,
    CHARACTER RTL_STR_DESC NAMED object_name IN
        TYPENAME char_string )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$FIND_SYNCH_ELEMENT_ID
/*    
/*    Find 
/*    
/*    Given the name of a spin lock, semaphore, barrier, or event, the
/*    Find Synchronization Element Identification routine returns the
/*    identifier of the associated synchronization element.
/*    
ENTRY ppl$find_synch_element_id ALIAS $ppl_find_synch_element_id PARAMETER (
    LONGWORD UNSIGNED NAMED element_id IN OUT
        TYPENAME identifier REFERENCE,
    CHARACTER RTL_STR_DESC NAMED element_name IN
        TYPENAME char_string )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$GET_INDEX
/*    
/*    Get Index of a Participant
/*    
/*    The Get Index of a Participant routine returns an index that is unique
/*    within the application. A value of zero signifies the participant that
/*    formed the application. The other participants in the application
/*    always return an index greater than zero. 
/*    
ENTRY ppl$get_index ALIAS $ppl_get_index PARAMETER (
    LONGWORD UNSIGNED NAMED participant_index OUT
        TYPENAME longword_unsigned REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$INSERT_WORK_ITEM
/*    
/*    Insert a Work Queue Item
/*    
/*    The Insert a Work Queue Item routine inserts a work item into the specified work
/*    queue. 
/*    
ENTRY ppl$insert_work_item ALIAS $ppl_insert_work_item PARAMETER (
    LONGWORD UNSIGNED NAMED queue_id IN
        TYPENAME identifier REFERENCE,
    LONGWORD UNSIGNED NAMED work_item IN
        TYPENAME user_arg VALUE,
    LONGWORD UNSIGNED NAMED flags IN OPTIONAL
        TYPENAME mask_longword REFERENCE,
    LONGWORD NAMED priority IN OPTIONAL
        TYPENAME longword_signed REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$INCREMENT_SEMAPHORE
/*    
/*    Increment a Semaphore
/*    
/*    The Increment a Semaphore routine increments the value of the semaphore
/*    by 1, analogous to the signal protocol.  If any other participants
/*    are blocked on a call to PPL$DECREMENT_SEMAPHORE for this semaphore,
/*    one is removed from the queue and awakened.
/*    The semaphore must have been created by PPL$CREATE_SEMAPHORE.
/*    
ENTRY ppl$increment_semaphore ALIAS $ppl_increment_semaphore PARAMETER (
    LONGWORD UNSIGNED NAMED semaphore_id IN
        TYPENAME identifier REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$INDEX_TO_PID
/*    
/*    Convert Participant Index to VMS PID
/*    
/*    The Convert Participant Index to VMS PID routine returns the VMS PID
/*    of the process associated with the specified index.
/*    
ENTRY ppl$index_to_pid ALIAS $ppl_index_to_pid PARAMETER (
    LONGWORD UNSIGNED NAMED participant_index IN
        TYPENAME longword_unsigned REFERENCE,
    LONGWORD UNSIGNED NAMED pid OUT
        TYPENAME longword_unsigned REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$INITIALIZE
/*    
/*    Initialize the PPL$ Facility
/*    
/*    The Initialize the PPL$ Facility routine informs the PPL$ facility that the
/*    caller is forming or joining the parallel application.  Calling this
/*    routine is optional, because PPL$ initializes itself at the
/*    first call to a PPL$ routine.
/*    
ENTRY ppl$initialize ALIAS $ppl_initialize PARAMETER (
    LONGWORD UNSIGNED NAMED size IN OPTIONAL
        TYPENAME longword_unsigned REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$PID_TO_INDEX
/*    
/*    Convert VMS PID to Participant Index
/*    
/*    The Convert VMS PID to Participant Index routine returns the PPL$-defined
/*    participant index of the process associated with the 
/*    specified VMS PID.
/*    
ENTRY ppl$pid_to_index ALIAS $ppl_pid_to_index PARAMETER (
    LONGWORD UNSIGNED NAMED pid IN
        TYPENAME longword_unsigned REFERENCE,
    LONGWORD UNSIGNED NAMED participant_index OUT
        TYPENAME longword_unsigned REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$READ_BARRIER
/*    
/*    Read a Barrier
/*    
/*    The Read a Barrier routine returns the specified barrier's current quorum and
/*    the number of participants currently waiting (blocked) at the barrier.  The
/*    barrier must have been created by PPL$CREATE_BARRIER. 
/*    
ENTRY ppl$read_barrier ALIAS $ppl_read_barrier PARAMETER (
    LONGWORD UNSIGNED NAMED barrier_id IN
        TYPENAME identifier REFERENCE,
    WORD NAMED quorum OUT
        TYPENAME word_signed REFERENCE,
    WORD NAMED waiters OUT
        TYPENAME word_signed REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$READ_EVENT
/*    
/*    Read an Event State
/*    
/*    The Read an Event State routine returns the current state of the specified 
/*    event.
/*    The state can be not_occurred  or not_occurred.
/*    
ENTRY ppl$read_event ALIAS $ppl_read_event PARAMETER (
    LONGWORD UNSIGNED NAMED event_id IN
        TYPENAME identifier REFERENCE,
    LONGWORD UNSIGNED NAMED occurred OUT
        TYPENAME longword_unsigned REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$READ_SEMAPHORE
/*    
/*    Read Semaphore Values
/*    
/*    The Read Semaphore Values routine returns the current or
/*    maximum values, or both, of the specified counting semaphore.
/*    The semaphore must have been created by 
/*    PPL$CREATE_SEMAPHORE.
/*    
ENTRY ppl$read_semaphore ALIAS $ppl_read_semaphore PARAMETER (
    LONGWORD UNSIGNED NAMED semaphore_id IN
        TYPENAME identifier REFERENCE,
    WORD NAMED semaphore_value OUT OPTIONAL
        TYPENAME word_signed REFERENCE,
    WORD NAMED semaphore_maximum OUT OPTIONAL
        TYPENAME word_signed REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$RELEASE_SPIN_LOCK
/*    
/*    Release Spin Lock
/*    
/*    The Release Spin Lock routine relinquishes the spin lock by clearing the
/*    bit representing the lock. The lock must have been created by 
/*    PPL$CREATE_SPIN_LOCK.
/*    
ENTRY ppl$release_spin_lock ALIAS $ppl_release_spin_lock PARAMETER (
    LONGWORD UNSIGNED NAMED lock_id IN
        TYPENAME identifier REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$RESET_EVENT
/*    
/*    Reset an Event
/*    
/*    The Reset an Event routine resets an event's state to
/*    not_occurred. 
/*    
ENTRY ppl$reset_event ALIAS $ppl_reset_event PARAMETER (
    LONGWORD UNSIGNED NAMED event_id IN
        TYPENAME identifier REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$REMOVE_WORK_ITEM
/*    
/*    Remove a Work Queue Item
/*    
/*    The Remove a Work Queue Item routine removes the next item in order from a work
/*    queue. 
/*    
ENTRY ppl$remove_work_item ALIAS $ppl_remove_work_item PARAMETER (
    LONGWORD UNSIGNED NAMED queue_id IN
        TYPENAME identifier REFERENCE,
    LONGWORD UNSIGNED NAMED work_item OUT
        TYPENAME user_arg REFERENCE,
    LONGWORD UNSIGNED NAMED flags IN OPTIONAL
        TYPENAME mask_longword REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$READ_SPIN_LOCK
/*    
/*    Read a Spin Lock State
/*    
/*    The Read a Spin Lock State routine returns the current state of a spin
/*    lock.  The state can be not_seized or not_seized. 
/*    
ENTRY ppl$read_spin_lock ALIAS $ppl_read_spin_lock PARAMETER (
    LONGWORD UNSIGNED NAMED lock_id IN
        TYPENAME identifier REFERENCE,
    LONGWORD UNSIGNED NAMED seized OUT
        TYPENAME longword_unsigned REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$READ_WORK_QUEUE
/*    
/*    Read a Work Queue
/*    
/*    The Read a Work Queue routine returns information about a work queue.
/*    
ENTRY ppl$read_work_queue ALIAS $ppl_read_work_queue PARAMETER (
    LONGWORD UNSIGNED NAMED queue_id IN
        TYPENAME identifier REFERENCE,
    LONGWORD NAMED queue_value OUT OPTIONAL
        TYPENAME longword_signed REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$SET_SEMAPHORE_MAXIMUM
/*    
/*    Set a Semaphore Maximum
/*    
/*    The Set a Semaphore Maximum routine dynamically sets the maximum value of a
/*    semaphore.
/*    
ENTRY ppl$set_semaphore_maximum ALIAS $ppl_set_semaphore_maximum PARAMETER (
    LONGWORD UNSIGNED NAMED semaphore_id IN
        TYPENAME identifier REFERENCE,
    WORD NAMED semaphore_maximum IN
        TYPENAME word_signed REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$SPAWN
/*    
/*    Initiate Parallel Execution
/*    
/*    The Initiate Parallel Execution routine executes code in parallel
/*    with the caller by creating one or more subordinate threads of execution
/*    (VMS subprocesses).
/*    
ENTRY ppl$spawn ALIAS $ppl_spawn PARAMETER (
    LONGWORD UNSIGNED NAMED copies IN OUT
        TYPENAME longword_unsigned REFERENCE,
    CHARACTER RTL_STR_DESC NAMED program_name IN OPTIONAL
        TYPENAME logical_name,
    LONGWORD UNSIGNED DIMENSION * REFERENCE NAMED children_ids OUT OPTIONAL
        TYPENAME vector_longword_unsigned,
    LONGWORD UNSIGNED NAMED flags IN OPTIONAL
        TYPENAME mask_longword REFERENCE,
    CHARACTER RTL_STR_DESC NAMED std_input_file IN OPTIONAL
        TYPENAME logical_name,
    CHARACTER RTL_STR_DESC NAMED std_output_file IN OPTIONAL
        TYPENAME logical_name )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$SET_QUORUM
/*    
/*    Set Barrier Quorum
/*    
/*    The Set Barrier Quorum routine dynamically sets a value for the
/*    specified barrier's quorum.  
/*    
ENTRY ppl$set_quorum ALIAS $ppl_set_quorum PARAMETER (
    LONGWORD UNSIGNED NAMED barrier_id IN
        TYPENAME identifier REFERENCE,
    WORD NAMED quorum IN
        TYPENAME word_signed REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$STOP
/*    
/*    Stop a Participant
/*    
/*    The Stop a Participant routine terminates the execution of the specified
/*    participant in this application.
/*    
ENTRY ppl$stop ALIAS $ppl_stop PARAMETER (
    LONGWORD UNSIGNED NAMED participant_index IN
        TYPENAME longword_unsigned REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$SEIZE_SPIN_LOCK
/*    
/*    Seize Spin Lock
/*    
/*    The Seize Spin Lock routine retrieves a simple (spin) lock by waiting in a
/*    spin loop until the lock is free. The lock must have been created by
/*    PPL$CREATE_SPIN_LOCK.
/*    
ENTRY ppl$seize_spin_lock ALIAS $ppl_seize_spin_lock PARAMETER (
    LONGWORD UNSIGNED NAMED lock_id IN
        TYPENAME identifier REFERENCE,
    LONGWORD UNSIGNED NAMED flags IN OPTIONAL
        TYPENAME mask_longword REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$TERMINATE
/*    
/*    Abort PPL$ Participation
/*    
/*    The Abort PPL$ Participation routine ends the caller's
/*    participation in the application prematurely---that is, at some time
/*    before the caller actually completes its execution.
/*    
ENTRY ppl$terminate ALIAS $ppl_terminate PARAMETER (
    LONGWORD UNSIGNED NAMED flags IN OPTIONAL
        TYPENAME mask_longword REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$TRIGGER_EVENT
/*    
/*    Trigger an Event
/*    
/*    The Trigger an Event routine causes the event's state to become
/*    occurred.  You control whether all pending actions for
/*    the event are processed (made to occur), or just one is processed.
/*    A pending action can be an AST, a signal (condition), or a wakeup.
/*    
ENTRY ppl$trigger_event ALIAS $ppl_trigger_event PARAMETER (
    LONGWORD UNSIGNED NAMED event_id IN
        TYPENAME identifier REFERENCE,
    LONGWORD UNSIGNED NAMED event_param IN OPTIONAL
        TYPENAME user_arg VALUE,
    LONGWORD UNSIGNED NAMED flags IN OPTIONAL
        TYPENAME mask_longword REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$UNIQUE_NAME
/*    
/*    Produce a Unique Name
/*    
/*    The Produce a Unique Name routine returns an application-unique name.
/*    A system-unique string specific to the calling application is appended
/*    to the string specified by the user.
/*    The resulting name is identical for all participants in
/*    the application, but different from those for all other applications on that
/*    system.
/*    
ENTRY ppl$unique_name ALIAS $ppl_unique_name PARAMETER (
    CHARACTER RTL_STR_DESC NAMED name_string IN
        TYPENAME char_string,
    CHARACTER RTL_STR_DESC NAMED resultant_string OUT
        TYPENAME char_string,
    WORD UNSIGNED NAMED resultant_length OUT OPTIONAL
        TYPENAME word_unsigned REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
/*    PPL$WAIT_AT_BARRIER
/*    
/*    Synchronize at a Barrier
/*    
/*    The Synchronize at a Barrier routine causes the caller to
/*    wait at the specified barrier.
/*    The barrier is in effect from the time the first participant calls
/*    PPL$WAIT_AT_BARRIER until each member of the
/*    quorum has issued the call.  At that time, the wait concludes and
/*    all are released for further execution.
/*    
ENTRY ppl$wait_at_barrier ALIAS $ppl_wait_at_barrier PARAMETER (
    LONGWORD UNSIGNED NAMED barrier_id IN
        TYPENAME identifier REFERENCE )
  RETURNS LONGWORD UNSIGNED TYPENAME cond_value;
                                       
END_MODULE ppl$routines;
