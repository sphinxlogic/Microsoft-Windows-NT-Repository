	OPTIONS		/EXTEND_SOURCE/CHECK
	INTEGER*4 FUNCTION SHS_INITIATE_SORT(PROCESS, PROC_INDEX)
C+
C
C FUNCTIONAL DESCRIPTION:
C
C       SHS_INITIATE_SORT.FOR 
C		- Initiates Qsort entries for various keywords.
C	
C FORMAL PARAMETERS:
C
C     PROCESS - Adjustable Array of Records, each record is holding
C		a single process' information
C     PROC_INDEX - Array dimension
C
C COMMON BLOCKS:
C
C     SORT_KEY - sort keyword defined by symbolic constants, defined 
C		   in main program unit every time the image gets invoked. 
C		   
C AUTHOR:
C	
C     James Shen (jshen1@ford.com)
C
C CREATION DATE: Sept, 1995
C
C MODIFIED BY:
C
C        : VERSION
C 01    -
C
C-
	IMPLICIT	INTEGER(A-Z)

CDEC$ OPTIONS /ALIGN=COMMON=NATURAL
	COMMON	/SORT_KEY/ KEY
CDEC$ END OPTIONS

	INCLUDE		'SHSINC.FOR'

	INTEGER*4	KEY
	INTEGER*4 	SHS_PROC_SORTBY_KEY_BASIC	!Entry
	INTEGER*4 	SHS_PROC_SORTBY_KEY_EXTEND	!Entry 
	INTEGER*4	PROC_INDEX
	
CDEC$	OPTIONS/ALIGN=(STRUCTURE=NATURAL)
	STRUCTURE  /PROCESS_BASIC/
	  INTEGER*4	PID
	  CHARACTER*15	PRCNAM
	  BYTE		%FILL
	  INTEGER*4	PNAME_LEN
	  INTEGER*4	STATE,
	2		CURPRIORITY,
	2		BUFIOCNT,
	2		DIOCNT,
	2		CPUTIME,
	2		PAGEFAULT,
	2		PPAGES,
	2		GPAGES,
	2		PRCMODE
	END STRUCTURE

	STRUCTURE  /PROCESS_EXTEND/
          INTEGER*4     PID
          CHARACTER*15  PRCNAM
          BYTE          %FILL
          INTEGER*4     PNAME_LEN,
	2               STATE,
	2               CURPRIORITY,
	2               BUFIOCNT,
	2               DIOCNT,
	2               CPUTIME,
	2               PAGEFAULT,
	2               PPAGES,
	2		GPAGES,
	2               PRCMODE,
	2               WSSIZE,
	2               WSQUOTA,
	2               WSEXTENT
          CHARACTER*132 IMAGENAME
          INTEGER*4     IMAGE_LEN
          CHARACTER*8   TERMINAL
          INTEGER*4     TERMINAL_LEN
	END STRUCTURE
CDEC$	END OPTIONS

	RECORD /PROCESS_BASIC/  PROCESS(PROC_INDEX)
	RECORD /PROCESS_EXTEND/ PROCEXT(PROC_INDEX)

C+
C Entry Point SHS_PROC_SORTBY_KEY_BASIC
C-
	ENTRY SHS_PROC_SORTBY_KEY_BASIC(PROCESS, PROC_INDEX)

	IF ( KEY .EQ. SHS_PROCNAME ) THEN
	  CALL QSORT_BASIC_PROCNAME(PROCESS, PROC_INDEX, 1, PROC_INDEX)
	ELSE IF ( KEY .EQ. SHS_CPU) THEN
	  CALL QSORT_BASIC_CPU(PROCESS, PROC_INDEX, 1, PROC_INDEX)
	ELSE IF ( KEY .EQ. SHS_IO ) THEN
	  CALL QSORT_BASIC_IO(PROCESS, PROC_INDEX, 1, PROC_INDEX)
	ELSE IF ( KEY .EQ. SHS_CURPRIO ) THEN
	  CALL QSORT_BASIC_CURPRIO(PROCESS, PROC_INDEX, 1, PROC_INDEX)
	ELSE IF ( KEY .EQ. SHS_PAGEFAULT) THEN
	  CALL QSORT_BASIC_PAGEFAULT(PROCESS, PROC_INDEX, 1, PROC_INDEX)
	ELSE IF ( KEY .EQ. SHS_PHYSICAL) THEN
	  CALL QSORT_BASIC_PAGE(PROCESS, PROC_INDEX, 1, PROC_INDEX)
	END IF
	SHS_PROC_SORTBY_KEY_BASIC = 1
	RETURN 
C+
C Entry Point SHS_PROC_SORTBY_KEY_EXTEND
C-
	ENTRY SHS_PROC_SORTBY_KEY_EXTEND(PROCEXT, PROC_INDEX)

	IF ( KEY .EQ. SHS_PROCNAME ) THEN
	  CALL QSORT_EXTEND_PROCNAME(PROCEXT, PROC_INDEX, 1, PROC_INDEX)
	ELSE IF ( KEY .EQ. SHS_CPU) THEN
	  CALL QSORT_EXTEND_CPU(PROCEXT, PROC_INDEX, 1, PROC_INDEX)
	ELSE IF ( KEY .EQ. SHS_IO ) THEN
	  CALL QSORT_EXTEND_IO(PROCEXT, PROC_INDEX, 1, PROC_INDEX)
	ELSE IF ( KEY .EQ. SHS_CURPRIO ) THEN
	  CALL QSORT_EXTEND_CURPRIO(PROCEXT, PROC_INDEX, 1, PROC_INDEX)
	ELSE IF ( KEY .EQ. SHS_PAGEFAULT) THEN
	  CALL QSORT_EXTEND_PAGEFAULT(PROCEXT, PROC_INDEX, 1, PROC_INDEX)
	ELSE IF ( KEY .EQ. SHS_PHYSICAL) THEN
	  CALL QSORT_EXTEND_PAGE(PROCEXT, PROC_INDEX, 1, PROC_INDEX)
	END IF
	SHS_PROC_SORTBY_KEY_EXTEND = 1
	RETURN 
	END
