MODULE $DTKDEF;		/* Definitions for RTL DECtalk Management
{File:  DTKDEF.SDL  Edit:  TS1003
{****************************************************************************
{*									    *
{*  COPYRIGHT (c) 1984, 1985, 1986 BY					    *
{*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
{*  ALL RIGHTS RESERVED.						    *
{* 									    *
{*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
{*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
{*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
{*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
{*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
{*  TRANSFERRED.							    *
{* 									    *
{*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
{*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
{*  CORPORATION.							    *
{* 									    *
{*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
{*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
{* 									    *
{*									    *
{****************************************************************************

{ Edit history:
{
{ 1-001 - Original.  TS 8-Aug-1985
{ 1-002 - Fix keypad constants to be characters instead of numbers.  
{			TS 3-Jun-1986
{ 1-003 - Add TEST constants.  TS 4-Sep-1986
/*
/*	Phone keypad keys.
/*

constant(
      ZERO
    , ONE
    , TWO
    , THREE
    , FOUR
    , FIVE
    , SIX
    , SEVEN
    , EIGHT
    , NINE
    ) equals 48 increment 1 prefix DTK$ tag K_TRM;

constant(
      A
    , B
    , C
    , D
    ) equals 65 increment 1 prefix DTK$ tag K_TRM;

constant NUMBER_SIGN	equals 35  prefix DTK$ tag K_TRM;
constant ASTERISK   	equals 42  prefix DTK$ tag K_TRM;

/* Conditions

constant (
      CANCELLED		/* I/O cancelled 
    , TIMEOUT		/* Timeout period expired
    , BUFFER_FULL	/* Buffer is full
    , UNKNOWN		/* Unknown terminator
    ) equals 508 increment 1 prefix DTK$ tag K_TRM;

/*
/*	Self-test constants.
/*

constant(
      POWER
    , HDATA
    , HCONTROL
    , DATA
    , SPEAK
    ) equals 1 increment 1 prefix DTK$ tag K_TEST;

/*
/*	Phone dialing constants.
/*

constant(
      TONE
    , PULSE
    ) equals 0 increment 1 prefix DTK$ tag K_DIAL;

/*
/*	DECtalk types.
/*

constant(
      UNKNOWN
    , "01"
    , "03"
    ) equals 0 increment 1 prefix DTK$ tag K_DTC;

/*
/*	Keypad modes.
/*

constant(
      OFF
    , ON
    , AUTO
    ) equals 0 increment 1 prefix DTK$ tag K_KEYPAD;

/*
/*	Voices.
/*

constant(
      MALE
    , FEMALE
    , CHILD
    , DEEP_MALE
    , DEEP_FEMALE
    , OLDER_MALE
    , LIGHT_FEMALE
    ) equals 0 increment 1 prefix DTK$ tag K_VOICE;

/*
/*	Speaking modes.
/*

constant(
      SPEAK
    , STOP
    , HALT
    ) equals 0 increment 1 prefix DTK$ tag K;

/*
/*	Return modes.
/*

constant(
      IMMED		/* Return immedately after sending text.
    , WAIT		/* Wait until text is completely spoken be returning.
    , STATUS		/* Wait for text to be spoken and return phone status.
    ) equals 0 increment 1 prefix DTK$ tag K;

/*
/*        DEFINE BIT MASKS AND VALUES FOR MODE ATTRIBUTES
/*

aggregate DTKDEF  union prefix DTK$;

/*
/*	DEFINE BITS, MASKS, AND FIELDS FOR THE CONTROL MODES.
/*

    DTKMODE_BITS structure;
        SQUARE bitfield mask;	/* Set mode square on
        ASCII  bitfield mask;	/* asky mode
        MINUS  bitfield mask;	/* Say dash as minus
        EUROPE bitfield mask;	/* Europe 
        SPELL  bitfield mask;	/* Spell all words
    end DTKMODE_BITS;
    constant "NORMAL" equals 0 prefix DTK$ tag M; /* no bits set 

    constant(
	  SQUARE		/* Mode square bitvector index
	, ASCII			/* asky mode
	, MINUS			/* Say dash as minus bitvector index
	, EUROPE		/* European type numbers
	, SPELL			/* Spell all words
	    ) equals 0 increment 1;

    DTKTERM_BITS structure;
	HOST      bitfield mask; /* Send all chars typed to host.
	SPEAK_ALL bitfield mask; /* Speak all chars typed.
	EDITED    bitfield mask; /* Line edit all chars typed.
	HARD      bitfield mask; /* Do local echo in hardcopy format.
	SETUP     bitfield mask; /* Speak all chars displayed in setup mode.
	FILTER    bitfield mask; /* Don't send DECtalk specific sequences.
    end DTKTERM_BITS;

    constant(
	  HOST    		/* Send all chars typed to host.
	, SPEAK_ALL		/* Speak all chars typed.
	, EDITED 		/* Line edit all chars typed.
	, HARD    		/* Do local echo in hardcopy format.
	, SETUP   		/* Speak all chars displayed in setup mode.
	, FILTER  		/* Don't send DECtalk specific sequences.
	    ) equals 0 increment 1;

    DTKLOG_BITS structure;
	TEXT    bitfield mask;	/* Log ASCII text.
	PHONEME bitfield mask;	/* Log phonemic text.
	RAWHOST bitfield mask;	/* Log all chars without inspection.
	INHOST  bitfield mask;	/* Log text read from host.
	OUTHOST bitfield mask;	/* Log text sent to host.
	ERROR   bitfield mask;	/* Log error messages.
	TRACE   bitfield mask;	/* Log sequences symbolically
	DEBUG   bitfield mask;	/* Reserved
    end DTKLOG_BITS;

    constant(
	  TEXT    		/* Log ASCII text.
	, PHONEME 		/* Log phonemic text.
	, RAWHOST 		/* Log all chars without inspection.
	, INHOST  		/* Log text read from host.
	, OUTHOST 		/* Log text sent to host.
	, ERROR   		/* Log error messages.
	, TRACE   		/* Log sequences symbolically
	, DEBUG   		/* Reserved
	    ) equals 0 increment 1;

end DTKDEF;

end_module $DTKDEF;
